# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/general.rst:5
msgid "General Python FAQ"
msgstr ""

#: ../../faq/general.rst:8
msgid "Contents"
msgstr ""

#: ../../faq/general.rst:13
msgid "General Information"
msgstr ""

#: ../../faq/general.rst:16
msgid "What is Python?"
msgstr ""

#: ../../faq/general.rst:18
msgid ""
"Python is an interpreted, interactive, object-oriented programming language."
"  It incorporates modules, exceptions, dynamic typing, very high level "
"dynamic data types, and classes.  It supports multiple programming paradigms"
" beyond object-oriented programming, such as procedural and functional "
"programming. Python combines remarkable power with very clear syntax. It has"
" interfaces to many system calls and libraries, as well as to various window"
" systems, and is extensible in C or C++.  It is also usable as an extension "
"language for applications that need a programmable interface. Finally, "
"Python is portable: it runs on many Unix variants including Linux and macOS,"
" and on Windows."
msgstr ""

#: ../../faq/general.rst:28
msgid ""
"To find out more, start with :ref:`tutorial-index`.  The `Beginner's Guide "
"to Python <https://wiki.python.org/moin/BeginnersGuide>`_ links to other "
"introductory tutorials and resources for learning Python."
msgstr ""

#: ../../faq/general.rst:34
msgid "What is the Python Software Foundation?"
msgstr ""

#: ../../faq/general.rst:36
msgid ""
"The Python Software Foundation is an independent non-profit organization "
"that holds the copyright on Python versions 2.1 and newer.  The PSF's "
"mission is to advance open source technology related to the Python "
"programming language and to publicize the use of Python.  The PSF's home "
"page is at https://www.python.org/psf/."
msgstr ""

#: ../../faq/general.rst:42
msgid ""
"Donations to the PSF are tax-exempt in the US.  If you use Python and find "
"it helpful, please contribute via `the PSF donation page "
"<https://www.python.org/psf/donations/>`_."
msgstr ""

#: ../../faq/general.rst:48
msgid "Are there copyright restrictions on the use of Python?"
msgstr ""

#: ../../faq/general.rst:50
msgid ""
"You can do anything you want with the source, as long as you leave the "
"copyrights in and display those copyrights in any documentation about Python"
" that you produce.  If you honor the copyright rules, it's OK to use Python "
"for commercial use, to sell copies of Python in source or binary form "
"(modified or unmodified), or to sell products that incorporate Python in "
"some form.  We would still like to know about all commercial use of Python, "
"of course."
msgstr ""

#: ../../faq/general.rst:57
msgid ""
"See `the PSF license page <https://www.python.org/psf/license/>`_ to find "
"further explanations and a link to the full text of the license."
msgstr ""

#: ../../faq/general.rst:60
msgid ""
"The Python logo is trademarked, and in certain cases permission is required "
"to use it.  Consult `the Trademark Usage Policy "
"<https://www.python.org/psf/trademarks/>`__ for more information."
msgstr ""

#: ../../faq/general.rst:66
msgid "Why was Python created in the first place?"
msgstr ""

#: ../../faq/general.rst:68
msgid ""
"Here's a *very* brief summary of what started it all, written by Guido van "
"Rossum:"
msgstr ""

#: ../../faq/general.rst:71
msgid ""
"I had extensive experience with implementing an interpreted language in the "
"ABC group at CWI, and from working with this group I had learned a lot about"
" language design.  This is the origin of many Python features, including the"
" use of indentation for statement grouping and the inclusion of very-high-"
"level data types (although the details are all different in Python)."
msgstr ""

#: ../../faq/general.rst:78
msgid ""
"I had a number of gripes about the ABC language, but also liked many of its "
"features.  It was impossible to extend the ABC language (or its "
"implementation) to remedy my complaints -- in fact its lack of extensibility"
" was one of its biggest problems.  I had some experience with using "
"Modula-2+ and talked with the designers of Modula-3 and read the Modula-3 "
"report. Modula-3 is the origin of the syntax and semantics used for "
"exceptions, and some other Python features."
msgstr ""

#: ../../faq/general.rst:86
msgid ""
"I was working in the Amoeba distributed operating system group at CWI.  We "
"needed a better way to do system administration than by writing either C "
"programs or Bourne shell scripts, since Amoeba had its own system call "
"interface which wasn't easily accessible from the Bourne shell.  My "
"experience with error handling in Amoeba made me acutely aware of the "
"importance of exceptions as a programming language feature."
msgstr ""

#: ../../faq/general.rst:93
msgid ""
"It occurred to me that a scripting language with a syntax like ABC but with "
"access to the Amoeba system calls would fill the need.  I realized that it "
"would be foolish to write an Amoeba-specific language, so I decided that I "
"needed a language that was generally extensible."
msgstr ""

#: ../../faq/general.rst:98
msgid ""
"During the 1989 Christmas holidays, I had a lot of time on my hand, so I "
"decided to give it a try.  During the next year, while still mostly working "
"on it in my own time, Python was used in the Amoeba project with increasing "
"success, and the feedback from colleagues made me add many early "
"improvements."
msgstr ""

#: ../../faq/general.rst:104
msgid ""
"In February 1991, after just over a year of development, I decided to post "
"to USENET.  The rest is in the ``Misc/HISTORY`` file."
msgstr ""

#: ../../faq/general.rst:109
msgid "What is Python good for?"
msgstr ""

#: ../../faq/general.rst:111
msgid ""
"Python is a high-level general-purpose programming language that can be "
"applied to many different classes of problems."
msgstr ""

#: ../../faq/general.rst:114
msgid ""
"The language comes with a large standard library that covers areas such as "
"string processing (regular expressions, Unicode, calculating differences "
"between files), Internet protocols (HTTP, FTP, SMTP, XML-RPC, POP, IMAP, CGI"
" programming), software engineering (unit testing, logging, profiling, "
"parsing Python code), and operating system interfaces (system calls, "
"filesystems, TCP/IP sockets).  Look at the table of contents for "
":ref:`library-index` to get an idea of what's available.  A wide variety of "
"third-party extensions are also available.  Consult `the Python Package "
"Index <https://pypi.org>`_ to find packages of interest to you."
msgstr ""

#: ../../faq/general.rst:126
msgid "How does the Python version numbering scheme work?"
msgstr ""

#: ../../faq/general.rst:128
msgid ""
"Python versions are numbered A.B.C or A.B.  A is the major version number --"
" it is only incremented for really major changes in the language.  B is the "
"minor version number, incremented for less earth-shattering changes.  C is "
"the micro-level -- it is incremented for each bugfix release.  See :pep:`6` "
"for more information about bugfix releases."
msgstr ""

#: ../../faq/general.rst:134
msgid ""
"Not all releases are bugfix releases.  In the run-up to a new major release,"
" a series of development releases are made, denoted as alpha, beta, or "
"release candidate.  Alphas are early releases in which interfaces aren't yet"
" finalized; it's not unexpected to see an interface change between two alpha"
" releases. Betas are more stable, preserving existing interfaces but "
"possibly adding new modules, and release candidates are frozen, making no "
"changes except as needed to fix critical bugs."
msgstr ""

#: ../../faq/general.rst:142
msgid ""
"Alpha, beta and release candidate versions have an additional suffix.  The "
"suffix for an alpha version is \"aN\" for some small number N, the suffix "
"for a beta version is \"bN\" for some small number N, and the suffix for a "
"release candidate version is \"rcN\" for some small number N.  In other "
"words, all versions labeled 2.0aN precede the versions labeled 2.0bN, which "
"precede versions labeled 2.0rcN, and *those* precede 2.0."
msgstr ""

#: ../../faq/general.rst:149
msgid ""
"You may also find version numbers with a \"+\" suffix, e.g. \"2.2+\".  These"
" are unreleased versions, built directly from the CPython development "
"repository.  In practice, after a final minor release is made, the version "
"is incremented to the next minor version, which becomes the \"a0\" version, "
"e.g. \"2.4a0\"."
msgstr ""

#: ../../faq/general.rst:154
msgid ""
"See also the documentation for :data:`sys.version`, :data:`sys.hexversion`, "
"and :data:`sys.version_info`."
msgstr ""

#: ../../faq/general.rst:159
msgid "How do I obtain a copy of the Python source?"
msgstr ""

#: ../../faq/general.rst:161
msgid ""
"The latest Python source distribution is always available from python.org, "
"at https://www.python.org/downloads/.  The latest development sources can be"
" obtained at https://github.com/python/cpython/."
msgstr ""

#: ../../faq/general.rst:165
msgid ""
"The source distribution is a gzipped tar file containing the complete C "
"source, Sphinx-formatted documentation, Python library modules, example "
"programs, and several useful pieces of freely distributable software.  The "
"source will compile and run out of the box on most UNIX platforms."
msgstr ""

#: ../../faq/general.rst:170
msgid ""
"Consult the `Getting Started section of the Python Developer's Guide "
"<https://devguide.python.org/setup/>`__ for more information on getting the "
"source code and compiling it."
msgstr ""

#: ../../faq/general.rst:176
msgid "How do I get documentation on Python?"
msgstr ""

#: ../../faq/general.rst:180
msgid ""
"The standard documentation for the current stable version of Python is "
"available at https://docs.python.org/3/.  PDF, plain text, and downloadable "
"HTML versions are also available at https://docs.python.org/3/download.html."
msgstr ""

#: ../../faq/general.rst:184
msgid ""
"The documentation is written in reStructuredText and processed by `the "
"Sphinx documentation tool <http://sphinx-doc.org/>`__.  The reStructuredText"
" source for the documentation is part of the Python source distribution."
msgstr ""

#: ../../faq/general.rst:190
msgid "I've never programmed before. Is there a Python tutorial?"
msgstr ""

#: ../../faq/general.rst:192
msgid ""
"There are numerous tutorials and books available.  The standard "
"documentation includes :ref:`tutorial-index`."
msgstr ""

#: ../../faq/general.rst:195
msgid ""
"Consult `the Beginner's Guide "
"<https://wiki.python.org/moin/BeginnersGuide>`_ to find information for "
"beginning Python programmers, including lists of tutorials."
msgstr ""

#: ../../faq/general.rst:200
msgid "Is there a newsgroup or mailing list devoted to Python?"
msgstr ""

#: ../../faq/general.rst:202
msgid ""
"There is a newsgroup, :newsgroup:`comp.lang.python`, and a mailing list, "
"`python-list <https://mail.python.org/mailman/listinfo/python-list>`_.  The "
"newsgroup and mailing list are gatewayed into each other -- if you can read "
"news it's unnecessary to subscribe to the mailing list. "
":newsgroup:`comp.lang.python` is high-traffic, receiving hundreds of "
"postings every day, and Usenet readers are often more able to cope with this"
" volume."
msgstr ""

#: ../../faq/general.rst:209
msgid ""
"Announcements of new software releases and events can be found in "
"comp.lang.python.announce, a low-traffic moderated list that receives about "
"five postings per day.  It's available as `the python-announce mailing list "
"<https://mail.python.org/mailman/listinfo/python-announce-list>`_."
msgstr ""

#: ../../faq/general.rst:214
msgid ""
"More info about other mailing lists and newsgroups can be found at "
"https://www.python.org/community/lists/."
msgstr ""

#: ../../faq/general.rst:219
msgid "How do I get a beta test version of Python?"
msgstr ""

#: ../../faq/general.rst:221
msgid ""
"Alpha and beta releases are available from "
"https://www.python.org/downloads/.  All releases are announced on the "
"comp.lang.python and comp.lang.python.announce newsgroups and on the Python "
"home page at https://www.python.org/; an RSS feed of news is available."
msgstr ""

#: ../../faq/general.rst:226
msgid ""
"You can also access the development version of Python through Git.  See `The"
" Python Developer's Guide <https://devguide.python.org/>`_ for details."
msgstr ""

#: ../../faq/general.rst:231
msgid "How do I submit bug reports and patches for Python?"
msgstr ""

#: ../../faq/general.rst:233
msgid ""
"To report a bug or submit a patch, please use the Roundup installation at "
"https://bugs.python.org/."
msgstr ""

#: ../../faq/general.rst:236
msgid ""
"You must have a Roundup account to report bugs; this makes it possible for "
"us to contact you if we have follow-up questions.  It will also enable "
"Roundup to send you updates as we act on your bug. If you had previously "
"used SourceForge to report bugs to Python, you can obtain your Roundup "
"password through Roundup's `password reset procedure "
"<https://bugs.python.org/user?@template=forgotten>`_."
msgstr ""

#: ../../faq/general.rst:242
msgid ""
"For more information on how Python is developed, consult `the Python "
"Developer's Guide <https://devguide.python.org/>`_."
msgstr ""

#: ../../faq/general.rst:247
msgid "Are there any published articles about Python that I can reference?"
msgstr ""

#: ../../faq/general.rst:249
msgid "It's probably best to cite your favorite book about Python."
msgstr ""

#: ../../faq/general.rst:251
msgid ""
"The very first article about Python was written in 1991 and is now quite "
"outdated."
msgstr ""

#: ../../faq/general.rst:254
msgid ""
"Guido van Rossum and Jelke de Boer, \"Interactively Testing Remote Servers "
"Using the Python Programming Language\", CWI Quarterly, Volume 4, Issue 4 "
"(December 1991), Amsterdam, pp 283--303."
msgstr ""

#: ../../faq/general.rst:260
msgid "Are there any books on Python?"
msgstr ""

#: ../../faq/general.rst:262
msgid ""
"Yes, there are many, and more are being published.  See the python.org wiki "
"at https://wiki.python.org/moin/PythonBooks for a list."
msgstr ""

#: ../../faq/general.rst:265
msgid ""
"You can also search online bookstores for \"Python\" and filter out the "
"Monty Python references; or perhaps search for \"Python\" and \"language\"."
msgstr ""

#: ../../faq/general.rst:270
msgid "Where in the world is www.python.org located?"
msgstr ""

#: ../../faq/general.rst:272
msgid ""
"The Python project's infrastructure is located all over the world and is "
"managed by the Python Infrastructure Team. Details `here "
"<http://infra.psf.io>`__."
msgstr ""

#: ../../faq/general.rst:277
msgid "Why is it called Python?"
msgstr ""

#: ../../faq/general.rst:279
msgid ""
"When he began implementing Python, Guido van Rossum was also reading the "
"published scripts from `\"Monty Python's Flying Circus\" "
"<https://en.wikipedia.org/wiki/Monty_Python>`__, a BBC comedy series from "
"the 1970s.  Van Rossum thought he needed a name that was short, unique, and "
"slightly mysterious, so he decided to call the language Python."
msgstr ""

#: ../../faq/general.rst:287
msgid "Do I have to like \"Monty Python's Flying Circus\"?"
msgstr ""

#: ../../faq/general.rst:289
msgid "No, but it helps.  :)"
msgstr ""

#: ../../faq/general.rst:293
msgid "Python in the real world"
msgstr ""

#: ../../faq/general.rst:296
msgid "How stable is Python?"
msgstr ""

#: ../../faq/general.rst:298
msgid ""
"Very stable.  New, stable releases have been coming out roughly every 6 to "
"18 months since 1991, and this seems likely to continue.  As of version 3.9,"
" Python will have a major new release every 12 months (:pep:`602`)."
msgstr ""

#: ../../faq/general.rst:302
msgid ""
"The developers issue \"bugfix\" releases of older versions, so the stability"
" of existing releases gradually improves.  Bugfix releases, indicated by a "
"third component of the version number (e.g. 3.5.3, 3.6.2), are managed for "
"stability; only fixes for known problems are included in a bugfix release, "
"and it's guaranteed that interfaces will remain the same throughout a series"
" of bugfix releases."
msgstr ""

#: ../../faq/general.rst:309
msgid ""
"The latest stable releases can always be found on the `Python download page "
"<https://www.python.org/downloads/>`_.  There are two production-ready "
"versions of Python: 2.x and 3.x. The recommended version is 3.x, which is "
"supported by most widely used libraries.  Although 2.x is still widely used,"
" `it is not maintained anymore "
"<https://www.python.org/dev/peps/pep-0373/>`_."
msgstr ""

#: ../../faq/general.rst:316
msgid "How many people are using Python?"
msgstr ""

#: ../../faq/general.rst:318
msgid ""
"There are probably millions of users, though it's difficult to obtain an "
"exact count."
msgstr ""

#: ../../faq/general.rst:321
msgid ""
"Python is available for free download, so there are no sales figures, and "
"it's available from many different sites and packaged with many Linux "
"distributions, so download statistics don't tell the whole story either."
msgstr ""

#: ../../faq/general.rst:325
msgid ""
"The comp.lang.python newsgroup is very active, but not all Python users post"
" to the group or even read it."
msgstr ""

#: ../../faq/general.rst:330
msgid "Have any significant projects been done in Python?"
msgstr ""

#: ../../faq/general.rst:332
msgid ""
"See https://www.python.org/about/success for a list of projects that use "
"Python. Consulting the proceedings for `past Python conferences "
"<https://www.python.org/community/workshops/>`_ will reveal contributions "
"from many different companies and organizations."
msgstr ""

#: ../../faq/general.rst:337
msgid ""
"High-profile Python projects include `the Mailman mailing list manager "
"<http://www.list.org>`_ and `the Zope application server "
"<http://www.zope.org>`_.  Several Linux distributions, most notably `Red Hat"
" <https://www.redhat.com>`_, have written part or all of their installer and"
" system administration software in Python.  Companies that use Python "
"internally include Google, Yahoo, and Lucasfilm Ltd."
msgstr ""

#: ../../faq/general.rst:346
msgid "What new developments are expected for Python in the future?"
msgstr ""

#: ../../faq/general.rst:348
msgid ""
"See https://www.python.org/dev/peps/ for the Python Enhancement Proposals "
"(PEPs). PEPs are design documents describing a suggested new feature for "
"Python, providing a concise technical specification and a rationale.  Look "
"for a PEP titled \"Python X.Y Release Schedule\", where X.Y is a version "
"that hasn't been publicly released yet."
msgstr ""

#: ../../faq/general.rst:354
msgid ""
"New development is discussed on `the python-dev mailing list "
"<https://mail.python.org/mailman/listinfo/python-dev/>`_."
msgstr ""

#: ../../faq/general.rst:359
msgid "Is it reasonable to propose incompatible changes to Python?"
msgstr ""

#: ../../faq/general.rst:361
msgid ""
"In general, no.  There are already millions of lines of Python code around "
"the world, so any change in the language that invalidates more than a very "
"small fraction of existing programs has to be frowned upon.  Even if you can"
" provide a conversion program, there's still the problem of updating all "
"documentation; many books have been written about Python, and we don't want "
"to invalidate them all at a single stroke."
msgstr ""

#: ../../faq/general.rst:368
msgid ""
"Providing a gradual upgrade path is necessary if a feature has to be "
"changed. :pep:`5` describes the procedure followed for introducing backward-"
"incompatible changes while minimizing disruption for users."
msgstr ""

#: ../../faq/general.rst:374
msgid "Is Python a good language for beginning programmers?"
msgstr ""

#: ../../faq/general.rst:376
msgid "Yes."
msgstr ""

#: ../../faq/general.rst:378
msgid ""
"It is still common to start students with a procedural and statically typed "
"language such as Pascal, C, or a subset of C++ or Java.  Students may be "
"better served by learning Python as their first language.  Python has a very"
" simple and consistent syntax and a large standard library and, most "
"importantly, using Python in a beginning programming course lets students "
"concentrate on important programming skills such as problem decomposition "
"and data type design.  With Python, students can be quickly introduced to "
"basic concepts such as loops and procedures.  They can probably even work "
"with user-defined objects in their very first course."
msgstr ""

#: ../../faq/general.rst:388
msgid ""
"For a student who has never programmed before, using a statically typed "
"language seems unnatural.  It presents additional complexity that the "
"student must master and slows the pace of the course.  The students are "
"trying to learn to think like a computer, decompose problems, design "
"consistent interfaces, and encapsulate data.  While learning to use a "
"statically typed language is important in the long term, it is not "
"necessarily the best topic to address in the students' first programming "
"course."
msgstr ""

#: ../../faq/general.rst:396
msgid ""
"Many other aspects of Python make it a good first language.  Like Java, "
"Python has a large standard library so that students can be assigned "
"programming projects very early in the course that *do* something.  "
"Assignments aren't restricted to the standard four-function calculator and "
"check balancing programs.  By using the standard library, students can gain "
"the satisfaction of working on realistic applications as they learn the "
"fundamentals of programming. Using the standard library also teaches "
"students about code reuse.  Third-party modules such as PyGame are also "
"helpful in extending the students' reach."
msgstr ""

#: ../../faq/general.rst:405
msgid ""
"Python's interactive interpreter enables students to test language features "
"while they're programming.  They can keep a window with the interpreter "
"running while they enter their program's source in another window.  If they "
"can't remember the methods for a list, they can do something like this::"
msgstr ""

#: ../../faq/general.rst:434
msgid ""
"With the interpreter, documentation is never far from the student as they "
"are programming."
msgstr ""

#: ../../faq/general.rst:437
msgid ""
"There are also good IDEs for Python.  IDLE is a cross-platform IDE for "
"Python that is written in Python using Tkinter.  PythonWin is a Windows-"
"specific IDE. Emacs users will be happy to know that there is a very good "
"Python mode for Emacs.  All of these programming environments provide syntax"
" highlighting, auto-indenting, and access to the interactive interpreter "
"while coding.  Consult `the Python wiki "
"<https://wiki.python.org/moin/PythonEditors>`_ for a full list of Python "
"editing environments."
msgstr ""

#: ../../faq/general.rst:445
msgid ""
"If you want to discuss Python's use in education, you may be interested in "
"joining `the edu-sig mailing list "
"<https://www.python.org/community/sigs/current/edu-sig>`_."
msgstr ""
