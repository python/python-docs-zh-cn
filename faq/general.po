# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Konge <zkonge@outlook.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 00:52+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/general.rst:5
msgid "General Python FAQ"
msgstr "Python常见问题"

#: ../../faq/general.rst:8
msgid "Contents"
msgstr "目录"

#: ../../faq/general.rst:13
msgid "General Information"
msgstr "一般信息"

#: ../../faq/general.rst:16
msgid "What is Python?"
msgstr "什么是 Python？"

#: ../../faq/general.rst:18
msgid ""
"Python is an interpreted, interactive, object-oriented programming language."
"  It incorporates modules, exceptions, dynamic typing, very high level "
"dynamic data types, and classes.  It supports multiple programming paradigms"
" beyond object-oriented programming, such as procedural and functional "
"programming. Python combines remarkable power with very clear syntax. It has"
" interfaces to many system calls and libraries, as well as to various window"
" systems, and is extensible in C or C++.  It is also usable as an extension "
"language for applications that need a programmable interface. Finally, "
"Python is portable: it runs on many Unix variants including Linux and macOS,"
" and on Windows."
msgstr ""
"Python 是一种解释型、交互式、面向对象的编程语言。 它包含了模块、异常、动态类型、高层级动态数据类型以及类等特性。 "
"在面向对象编程以外它还支持多种编程范式，例如过程式和函数式编程等。 Python 结合了超强的功能和极清晰的语法。 "
"它带有许多系统调用和库以及多种窗口系统的接口，并且能用 C 或 C++ 来进行扩展。 它还可用作需要可编程接口的应用程序的扩展语言。 最后，Python"
" 非常易于移植：它可以在包括 Linux 和 macOS 在内的许多 Unix 变种以及 Windows 上运行。"

#: ../../faq/general.rst:28
msgid ""
"To find out more, start with :ref:`tutorial-index`.  The `Beginner's Guide "
"to Python <https://wiki.python.org/moin/BeginnersGuide>`_ links to other "
"introductory tutorials and resources for learning Python."
msgstr ""
"要了解更多详情，请先查看 :ref:`tutorial-index`。 `Python 新手指南 "
"<https://wiki.python.org/moin/BeginnersGuide>`_ 提供了学习 Python 的其他入门教程及资源的链接。"

#: ../../faq/general.rst:34
msgid "What is the Python Software Foundation?"
msgstr "什么是 Python 软件基金会？"

#: ../../faq/general.rst:36
msgid ""
"The Python Software Foundation is an independent non-profit organization "
"that holds the copyright on Python versions 2.1 and newer.  The PSF's "
"mission is to advance open source technology related to the Python "
"programming language and to publicize the use of Python.  The PSF's home "
"page is at https://www.python.org/psf/."
msgstr ""
"Python 软件基金会（Python Software Foundation，简称 PSF）是一个独立的非盈利组织，它拥有 Python 2.1 "
"及以上各版本的版权。 PSF 的使命是推进与 Python 编程语言相关的开源技术，并推广 Python 的使用。 PSF 的主页是 "
"https://www.python.org/psf/。"

#: ../../faq/general.rst:42
msgid ""
"Donations to the PSF are tax-exempt in the US.  If you use Python and find "
"it helpful, please contribute via `the PSF donation page "
"<https://www.python.org/psf/donations/>`_."
msgstr ""
"向 PSF 提供捐助在美国是免税的。 如果你在使用 Python 并且感觉它对你很有帮助，可以通过 `PSF 捐助页 "
"<https://www.python.org/psf/donations/>`_ 进行捐助。"

#: ../../faq/general.rst:48
msgid "Are there copyright restrictions on the use of Python?"
msgstr "使用 Python 是否存在版权限制？"

#: ../../faq/general.rst:50
msgid ""
"You can do anything you want with the source, as long as you leave the "
"copyrights in and display those copyrights in any documentation about Python"
" that you produce.  If you honor the copyright rules, it's OK to use Python "
"for commercial use, to sell copies of Python in source or binary form "
"(modified or unmodified), or to sell products that incorporate Python in "
"some form.  We would still like to know about all commercial use of Python, "
"of course."
msgstr ""
"你可以任意使用源码，只要你保留版权信息并在你基于 Python 的产品文档中显示该版权信息。 如果你遵守此版权规则，就可以将 Python "
"用于商业领域，以源码或二进制码的形式（不论是否经过修改）销售 Python 的副本，或是以某种形式包含了 Python 的产品。 "
"当然，我们仍然希望获知所有对 Python 的商业使用。"

#: ../../faq/general.rst:57
msgid ""
"See `the license page <https://docs.python.org/3/license.html>`_ to find "
"further explanations and the full text of the PSF License."
msgstr ""
"请参阅 `许可页 <https://docs.python.org/3/license.html>`_ 以查看进一步的说明以及 PSF 许可的完整文本。"

#: ../../faq/general.rst:60
msgid ""
"The Python logo is trademarked, and in certain cases permission is required "
"to use it.  Consult `the Trademark Usage Policy "
"<https://www.python.org/psf/trademarks/>`__ for more information."
msgstr ""
"Python 的徽标是注册商标，在某些情况下需要获得允许方可使用。 请参阅 `商标使用政策 "
"<https://www.python.org/psf/trademarks/>`__ 了解详情。"

#: ../../faq/general.rst:66
msgid "Why was Python created in the first place?"
msgstr "创造 Python 的最初理由是什么？"

#: ../../faq/general.rst:68
msgid ""
"Here's a *very* brief summary of what started it all, written by Guido van "
"Rossum:"
msgstr "以下是有关最初缘起的一份 *非常* 简短的摘要，由 Guido van Rossum 本人撰写:"

#: ../../faq/general.rst:71
msgid ""
"I had extensive experience with implementing an interpreted language in the "
"ABC group at CWI, and from working with this group I had learned a lot about"
" language design.  This is the origin of many Python features, including the"
" use of indentation for statement grouping and the inclusion of very-high-"
"level data types (although the details are all different in Python)."
msgstr ""
"我在 CWI 的 ABC 部门时在实现解释型语言方面积累了丰富经验，通过与这个部门成员的协同工作，我学到了大量有关语言设计的知识。 这是许多 "
"Python 特性的最初来源，包括使用缩进来组织语句以及包含非常高层级的数据结构（虽然在 Python 中具体的实现细节完全不同）。"

#: ../../faq/general.rst:78
msgid ""
"I had a number of gripes about the ABC language, but also liked many of its "
"features.  It was impossible to extend the ABC language (or its "
"implementation) to remedy my complaints -- in fact its lack of extensibility"
" was one of its biggest problems.  I had some experience with using "
"Modula-2+ and talked with the designers of Modula-3 and read the Modula-3 "
"report. Modula-3 is the origin of the syntax and semantics used for "
"exceptions, and some other Python features."
msgstr ""
"我对 ABC 语言有过许多抱怨，但同时也很喜欢它的许多特性。 没有可能通过扩展 ABC 语言（或它的实现）来弥补我的不满 —— "
"实际上缺乏可扩展性就是它最大的问题之一。 我也有一些使用 Modula-2+ 的经验，并曾与 Modula-3 的设计者进行交流，还阅读了 "
"Modula-3 的报告。 Modula-3 是 Python 中异常机制所用语法和语义，以及其他一些语言特性的最初来源。"

#: ../../faq/general.rst:86
msgid ""
"I was working in the Amoeba distributed operating system group at CWI.  We "
"needed a better way to do system administration than by writing either C "
"programs or Bourne shell scripts, since Amoeba had its own system call "
"interface which wasn't easily accessible from the Bourne shell.  My "
"experience with error handling in Amoeba made me acutely aware of the "
"importance of exceptions as a programming language feature."
msgstr ""
"我还曾在 CWI 的 Amoeba 分布式操作系统部门工作。 当时我们需要有一种比编写 C 程序或 Bash 脚本更好的方式来进行系统管理，因为 "
"Amoeba 有它自己的系统调用接口，并且无法方便地通过 Bash 来访问。 我在 Amoeba "
"中处理错误的经验令我深刻地意识到异常处理在编程语言特性当中的重要地位。"

#: ../../faq/general.rst:93
msgid ""
"It occurred to me that a scripting language with a syntax like ABC but with "
"access to the Amoeba system calls would fill the need.  I realized that it "
"would be foolish to write an Amoeba-specific language, so I decided that I "
"needed a language that was generally extensible."
msgstr ""
"我发现，某种具有 ABC 式的语法而又能访问 Amoeba 系统调用的脚本语言将可满足需求。 我意识到编写一种 Amoeba "
"专属的语言是愚蠢的，所以我决定编写一种具有全面可扩展性的语言。"

#: ../../faq/general.rst:98
msgid ""
"During the 1989 Christmas holidays, I had a lot of time on my hand, so I "
"decided to give it a try.  During the next year, while still mostly working "
"on it in my own time, Python was used in the Amoeba project with increasing "
"success, and the feedback from colleagues made me add many early "
"improvements."
msgstr ""
"在 1989 年的圣诞假期中，我手头的时间非常充裕，因此我决定开始尝试一下。 在接下来的一年里，虽然我仍然主要用我的业余时间来做这件事，但 Python"
" 在 Amoeba 项目中的使用获得了很大的成功，来自同事的反馈让我得以增加了许多早期的改进。"

#: ../../faq/general.rst:104
msgid ""
"In February 1991, after just over a year of development, I decided to post "
"to USENET.  The rest is in the ``Misc/HISTORY`` file."
msgstr ""
"到 1991 年 2 月，经过一年多的开发，我决定将其发布到 USENET。 之后的事情就都可以在 ``Misc/HISTORY`` 文件里面看了。"

#: ../../faq/general.rst:109
msgid "What is Python good for?"
msgstr "Python 适合做什么？"

#: ../../faq/general.rst:111
msgid ""
"Python is a high-level general-purpose programming language that can be "
"applied to many different classes of problems."
msgstr "Python 是一种高层级的多用途编程语言，可用于解决许多不同门类的问题。"

#: ../../faq/general.rst:114
msgid ""
"The language comes with a large standard library that covers areas such as "
"string processing (regular expressions, Unicode, calculating differences "
"between files), internet protocols (HTTP, FTP, SMTP, XML-RPC, POP, IMAP), "
"software engineering (unit testing, logging, profiling, parsing Python "
"code), and operating system interfaces (system calls, filesystems, TCP/IP "
"sockets).  Look at the table of contents for :ref:`library-index` to get an "
"idea of what's available.  A wide variety of third-party extensions are also"
" available.  Consult `the Python Package Index <https://pypi.org>`_ to find "
"packages of interest to you."
msgstr ""
"本语言自带一个庞大标准库，所涵盖的编程领域包括字符串处理（正则表达式、Unicode、文件间的差异比较等），互联网协议（HTTP, FTP, SMTP,"
" XML-RPC, POP, IMAP），软件工程（单元测试、日志记录、性能分析、Python "
"代码解析），以及操作系统接口（系统调用、文件系统、TCP/IP 套接字）。 请查看 :ref:`library-index` "
"目录页以获取所有可用内容的概览。 此外还有大量第三方扩展包可供使用。 请访问 `Python 软件包索引 <https://pypi.org>`_ "
"来查找你感兴趣的软件包。"

#: ../../faq/general.rst:128
msgid "How does the Python version numbering scheme work?"
msgstr "Python 版本的编号形式是怎样的？"

#: ../../faq/general.rst:130
msgid "Python versions are numbered \"A.B.C\" or \"A.B\":"
msgstr "Python 版本的编号形式为 \"A.B.C\" 或 \"A.B\":"

#: ../../faq/general.rst:132
msgid ""
"*A* is the major version number -- it is only incremented for really major "
"changes in the language."
msgstr "*A* 是主版本号 -- 它仅会针对语言中非常重大的改变而递增。"

#: ../../faq/general.rst:134
msgid ""
"*B* is the minor version number -- it is incremented for less earth-"
"shattering changes."
msgstr "*B* 是次版本号 -- 它会针对不太重大的改变而递增。"

#: ../../faq/general.rst:136
msgid ""
"*C* is the micro version number -- it is incremented for each bugfix "
"release."
msgstr "*C* 是微版本号 -- 它针对每次问题修正发布而递增。"

#: ../../faq/general.rst:138
msgid ""
"Not all releases are bugfix releases.  In the run-up to a new feature "
"release, a series of development releases are made, denoted as alpha, beta, "
"or release candidate.  Alphas are early releases in which interfaces aren't "
"yet finalized; it's not unexpected to see an interface change between two "
"alpha releases. Betas are more stable, preserving existing interfaces but "
"possibly adding new modules, and release candidates are frozen, making no "
"changes except as needed to fix critical bugs."
msgstr ""
"并非所有发布版本都是问题修正版本。 在新特征发布版本的开发过程中，会制作一系列的开发版本，它们以 alpha, beta 或 release "
"candidate 来标示。 其中 alpha 版本是早期发布版，它的接口尚未最终确定；在两个 alpha 发布版本间出现接口的改变并不意外。 而 "
"beta 版本更为稳定，它会保留现有的接口，但也可能增加新的模块，而 release candidate "
"版则会保持冻结状态，不做任何改变，除非有需要修复的严重问题。"

#: ../../faq/general.rst:146
msgid "Alpha, beta and release candidate versions have an additional suffix:"
msgstr "Alpha, beta 和候选发布版带有额外的后缀:"

#: ../../faq/general.rst:148
msgid "The suffix for an alpha version is \"aN\" for some small number *N*."
msgstr "带有某个小数字 *N* 的 alpha 版后缀是 \"aN\"。"

#: ../../faq/general.rst:149
msgid "The suffix for a beta version is \"bN\" for some small number *N*."
msgstr "带有某个小数字 *N* 的 beta 版后缀是 \"bN\"。"

#: ../../faq/general.rst:150
msgid ""
"The suffix for a release candidate version is \"rcN\" for some small number "
"*N*."
msgstr "带有某个小数字 *N* 的候选发布版后缀是 \"rcN\"。"

#: ../../faq/general.rst:152
msgid ""
"In other words, all versions labeled *2.0aN* precede the versions labeled "
"*2.0bN*, which precede versions labeled *2.0rcN*, and *those* precede 2.0."
msgstr ""
"换句话说，所有标记为 *2.0aN* 的版本都早于标记为 *2.0bN* 的版本，后者又都早于标记为 *2.0rcN* 的版本，而 *后者* "
"又都早于标记为 2.0 的版本。"

#: ../../faq/general.rst:155
msgid ""
"You may also find version numbers with a \"+\" suffix, e.g. \"2.2+\".  These"
" are unreleased versions, built directly from the CPython development "
"repository.  In practice, after a final minor release is made, the version "
"is incremented to the next minor version, which becomes the \"a0\" version, "
"e.g. \"2.4a0\"."
msgstr ""
"你还可能看到带有“+”后缀的版本号，例如“2.2+”。 这表示未发布版本，直接基于 CPython 开发代码仓库构建。 "
"在实际操作中，当一个小版本最终发布后，未发布版本号会递增到下一个小版本号，成为“a0”版本，例如“2.4a0”。"

#: ../../faq/general.rst:160
msgid ""
"See the `Developer's Guide <https://devguide.python.org/developer-"
"workflow/development-cycle/>`__ for more information about the development "
"cycle, and :pep:`387` to learn more about Python's backward compatibility "
"policy.  See also the documentation for :data:`sys.version`, "
":data:`sys.hexversion`, and :data:`sys.version_info`."
msgstr ""
"请参阅 `Developer's Guide <https://devguide.python.org/developer-"
"workflow/development-cycle/>`__ 获取更多有关开发流程的信息，并参阅 :pep:`387` 了解更多有关 Python "
"的向下兼容策略的信息。 另请参阅有关 :data:`sys.version`, :data:`sys.hexversion` 和 "
":data:`sys.version_info` 的文档。"

#: ../../faq/general.rst:169
msgid "How do I obtain a copy of the Python source?"
msgstr "我应如何获取一份 Python 源代码的副本？"

#: ../../faq/general.rst:171
msgid ""
"The latest Python source distribution is always available from python.org, "
"at https://www.python.org/downloads/.  The latest development sources can be"
" obtained at https://github.com/python/cpython/."
msgstr ""
"最新的 Python 发布版源代码总能从 python.org 获取，下载页链接为 https://www.python.org/downloads/。"
" 最新的开发版源代码可以在 https://github.com/python/cpython/ 获取。"

#: ../../faq/general.rst:175
msgid ""
"The source distribution is a gzipped tar file containing the complete C "
"source, Sphinx-formatted documentation, Python library modules, example "
"programs, and several useful pieces of freely distributable software.  The "
"source will compile and run out of the box on most UNIX platforms."
msgstr ""
"发布版源代码是一个以 gzip 压缩的 tar 文件，其中包含完整的 C 源代码、Sphinx 格式的文档、Python "
"库模块、示例程序以及一些有用的自由分发软件。 该源代码将可在大多数 UNIX 类平台上直接编译并运行。"

#: ../../faq/general.rst:180
msgid ""
"Consult the `Getting Started section of the Python Developer's Guide "
"<https://devguide.python.org/setup/>`__ for more information on getting the "
"source code and compiling it."
msgstr ""
"请参阅 `Python 开发者指南的初步上手部分 <https://devguide.python.org/setup/>`__ "
"了解有关获取源代码并进行编译的更多信息。"

#: ../../faq/general.rst:186
msgid "How do I get documentation on Python?"
msgstr "我应如何获取 Python 的文档？"

#: ../../faq/general.rst:188
msgid ""
"The standard documentation for the current stable version of Python is "
"available at https://docs.python.org/3/.  PDF, plain text, and downloadable "
"HTML versions are also available at https://docs.python.org/3/download.html."
msgstr ""
"当前的 Python 稳定版本的标准文档可在 https://docs.python.org/3/ 查看。 也可在 "
"https://docs.python.org/3/download.html 获取PDF、纯文本以及可下载的 HTML 版本。"

#: ../../faq/general.rst:192
msgid ""
"The documentation is written in reStructuredText and processed by `the "
"Sphinx documentation tool <https://www.sphinx-doc.org/>`__.  The "
"reStructuredText source for the documentation is part of the Python source "
"distribution."
msgstr ""
"文档以 reStructuredText 格式撰写并使用 `Sphinx 文档工具 <https://www.sphinx-doc.org/>`__ "
"生成。 文档的 reStructuredText 源文件是 Python 源代码发布版的一部分。"

#: ../../faq/general.rst:198
msgid "I've never programmed before. Is there a Python tutorial?"
msgstr "我之前从未接触过编程。 哪里有 Python 的教程？"

#: ../../faq/general.rst:200
msgid ""
"There are numerous tutorials and books available.  The standard "
"documentation includes :ref:`tutorial-index`."
msgstr "有许多可选择的教程和书籍。 标准文档中也包含有 :ref:`tutorial-index`。"

#: ../../faq/general.rst:203
msgid ""
"Consult `the Beginner's Guide "
"<https://wiki.python.org/moin/BeginnersGuide>`_ to find information for "
"beginning Python programmers, including lists of tutorials."
msgstr ""
"请参阅 `新手指南 <https://wiki.python.org/moin/BeginnersGuide>`_ 以获取针对 Python "
"编程初学者的信息，包括教程的清单。"

#: ../../faq/general.rst:208
msgid "Is there a newsgroup or mailing list devoted to Python?"
msgstr "是否有专门针对 Python 的新闻组或邮件列表？"

#: ../../faq/general.rst:210
msgid ""
"There is a newsgroup, :newsgroup:`comp.lang.python`, and a mailing list, "
"`python-list <https://mail.python.org/mailman/listinfo/python-list>`_.  The "
"newsgroup and mailing list are gatewayed into each other -- if you can read "
"news it's unnecessary to subscribe to the mailing list. "
":newsgroup:`comp.lang.python` is high-traffic, receiving hundreds of "
"postings every day, and Usenet readers are often more able to cope with this"
" volume."
msgstr ""
"有一个新闻组 :newsgroup:`comp.lang.python` 和一个邮件列表 `python-list "
"<https://mail.python.org/mailman/listinfo/python-list>`_。 新闻组和邮件列表是彼此互通的 —— "
"如果你可以阅读新闻就不必再订阅邮件列表。 :newsgroup:`comp.lang.python` 的流量很大，每天会收到数以百计的发帖，Usenet"
" 使用者通常更擅长处理这样大的流量。"

#: ../../faq/general.rst:217
msgid ""
"Announcements of new software releases and events can be found in "
"comp.lang.python.announce, a low-traffic moderated list that receives about "
"five postings per day.  It's available as `the python-announce mailing list "
"<https://mail.python.org/mailman3/lists/python-announce-list.python.org/>`_."
msgstr ""
"有关新软件发布和活动的公告可以在 comp.lang.python.announce 中找到，这是个严格管理的低流量列表，每天发帖五个左右。 可在 "
"`python-announce 邮件列表 <https://mail.python.org/mailman3/lists/python-"
"announce-list.python.org/>`_ 订阅。"

#: ../../faq/general.rst:222
msgid ""
"More info about other mailing lists and newsgroups can be found at "
"https://www.python.org/community/lists/."
msgstr "有关其他邮件列表和新闻组的更多信息可以在 https://www.python.org/community/lists/ 找到。"

#: ../../faq/general.rst:227
msgid "How do I get a beta test version of Python?"
msgstr "我应如何获取 Python 的公开测试版本？"

#: ../../faq/general.rst:229
msgid ""
"Alpha and beta releases are available from "
"https://www.python.org/downloads/.  All releases are announced on the "
"comp.lang.python and comp.lang.python.announce newsgroups and on the Python "
"home page at https://www.python.org/; an RSS feed of news is available."
msgstr ""
"可以从 https://www.python.org/downloads/ 下载 alpha 和 beta 发布版。 所有发布版都会在 "
"comp.lang.python 和 comp.lang.python.announce 新闻组以及 Python 主页 "
"https://www.python.org/ 上进行公告；并会推送到 RSS 新闻源。"

#: ../../faq/general.rst:234
msgid ""
"You can also access the development version of Python through Git.  See `The"
" Python Developer's Guide <https://devguide.python.org/>`_ for details."
msgstr ""
"你还可以通过 Git 访问 Python 的开发版。 请参阅 `Python 开发者指南 "
"<https://devguide.python.org/>`_ 了解详情。"

#: ../../faq/general.rst:239
msgid "How do I submit bug reports and patches for Python?"
msgstr "我应如何为 Python 提交错误报告和补丁？"

#: ../../faq/general.rst:241
msgid ""
"To report a bug or submit a patch, use the issue tracker at "
"https://github.com/python/cpython/issues."
msgstr "要报告问题或提交补丁，请使用位于 https://github.com/python/cpython/issues 的问题追踪器。"

#: ../../faq/general.rst:244
msgid ""
"For more information on how Python is developed, consult `the Python "
"Developer's Guide <https://devguide.python.org/>`_."
msgstr ""
"有关 Python 开发流程的更多信息，请参阅 `Python 开发者指南 <https://devguide.python.org/>`_。"

#: ../../faq/general.rst:249
msgid "Are there any published articles about Python that I can reference?"
msgstr "是否有任何公开发表的 Python 相关文章可以供我参考引用？"

#: ../../faq/general.rst:251
msgid "It's probably best to cite your favorite book about Python."
msgstr "可能作为参考文献的最好方式还是引用你喜欢的 Python 相关书籍。"

#: ../../faq/general.rst:253
msgid ""
"The `very first article <https://ir.cwi.nl/pub/18204>`_ about Python was "
"written in 1991 and is now quite outdated."
msgstr ""
"有关 Python 的 `最早的文章 <https://ir.cwi.nl/pub/18204>`_ 撰写于 1991 年因而现在已相当过时。"

#: ../../faq/general.rst:256
msgid ""
"Guido van Rossum and Jelke de Boer, \"Interactively Testing Remote Servers "
"Using the Python Programming Language\", CWI Quarterly, Volume 4, Issue 4 "
"(December 1991), Amsterdam, pp 283--303."
msgstr ""
"Guido van Rossum 与 Jelke de Boer, \"使用 Python 编程语言交互式地测试远程服务器\", CWI 季刊, 第 4"
" 卷, 第 4 期 (1991 年 12 月), 阿姆斯特丹, 第 283--303 页。"

#: ../../faq/general.rst:262
msgid "Are there any books on Python?"
msgstr "是否有任何 Python 相关的书籍？"

#: ../../faq/general.rst:264
msgid ""
"Yes, there are many, and more are being published.  See the python.org wiki "
"at https://wiki.python.org/moin/PythonBooks for a list."
msgstr ""
"是的，相关的书籍很多，还有更多即将发行。 请访问 python.org 的 wiki 页面 "
"https://wiki.python.org/moin/PythonBooks 获取一份清单。"

#: ../../faq/general.rst:267
msgid ""
"You can also search online bookstores for \"Python\" and filter out the "
"Monty Python references; or perhaps search for \"Python\" and \"language\"."
msgstr ""
"你也可以到各大在线书店搜索 \"Python\" 并过滤掉对 Monty Python 的引用；或者也可以搜索 \"Python\" 加 "
"\"language\"。"

#: ../../faq/general.rst:272
msgid "Where in the world is www.python.org located?"
msgstr "www.python.org 具体位于世界上的哪个地点？"

#: ../../faq/general.rst:274
msgid ""
"The Python project's infrastructure is located all over the world and is "
"managed by the Python Infrastructure Team. Details `here "
"<https://infra.psf.io>`__."
msgstr ""
"Python 项目的基础设施分布于世界各地并由 Python 基础设施团队负责管理。 相关细节请访问 `这里 "
"<https://infra.psf.io>`__。"

#: ../../faq/general.rst:279
msgid "Why is it called Python?"
msgstr "为何命名为 Python？"

#: ../../faq/general.rst:281
msgid ""
"When he began implementing Python, Guido van Rossum was also reading the "
"published scripts from `\"Monty Python's Flying Circus\" "
"<https://en.wikipedia.org/wiki/Monty_Python>`__, a BBC comedy series from "
"the 1970s.  Van Rossum thought he needed a name that was short, unique, and "
"slightly mysterious, so he decided to call the language Python."
msgstr ""
"在着手编写 Python 实现的时候，Guido van Rossum 同时还阅读了刚出版的 `\"Monty Python 的飞行马戏团\" "
"<https://en.wikipedia.org/wiki/Monty_Python>`__ 剧本，这是一部自 1970 年代开始播出的 BBC "
"系列喜剧。 Van Rossum 觉得他需要选择一个简短、独特而又略显神秘的名字，于是他决定将这个新语言命名为 Python。"

#: ../../faq/general.rst:289
msgid "Do I have to like \"Monty Python's Flying Circus\"?"
msgstr "我必须喜欢 \"Monty Python 的飞行马戏团\" 吗？"

#: ../../faq/general.rst:291
msgid "No, but it helps.  :)"
msgstr "不必，但这对学习会有帮助。 :)"

#: ../../faq/general.rst:295
msgid "Python in the real world"
msgstr "现实世界中的 Python"

#: ../../faq/general.rst:298
msgid "How stable is Python?"
msgstr "Python 有多稳定？"

#: ../../faq/general.rst:300
msgid ""
"Very stable.  New, stable releases have been coming out roughly every 6 to "
"18 months since 1991, and this seems likely to continue.  As of version 3.9,"
" Python will have a new feature release every 12 months (:pep:`602`)."
msgstr ""
"非常稳定。 自 1991 年起大约每隔 6 至 18 个月就会推出新的稳定发布版，这种状态看来还会持续下去。 从 3.9 版开始，Python 将会每隔"
" 12 个月推出一个新增特征版本 (:pep:`602`)。"

#: ../../faq/general.rst:304
msgid ""
"The developers issue bugfix releases of older versions, so the stability of "
"existing releases gradually improves.  Bugfix releases, indicated by a third"
" component of the version number (e.g. 3.5.3, 3.6.2), are managed for "
"stability; only fixes for known problems are included in a bugfix release, "
"and it's guaranteed that interfaces will remain the same throughout a series"
" of bugfix releases."
msgstr ""
"开发者也会推出较旧版本的问题修正发布版，因此现有发布版的稳定性还会逐步提升。 问题修正发布版会以版本号第三部分的数字来标示（例如 3.5.3, "
"3.6.2），用于稳定性管理；只有对已知问题的修正会包含在问题修正发布版中，而同一系列的问题修正发布版中的接口将会始终保持一致。"

#: ../../faq/general.rst:311
msgid ""
"The latest stable releases can always be found on the `Python download page "
"<https://www.python.org/downloads/>`_. Python 3.x is the recommended version"
" and supported by most widely used libraries. Python 2.x :pep:`is not "
"maintained anymore <373>`."
msgstr ""
"最新的稳定发布版总是可以在 `Python 下载页 <https://www.python.org/downloads/>`_ 中找到。 Python "
"3.x 是推荐的版本并被大多数广泛使用的库所支持。 Python 2.x :pep:`已不再维护 <373>`。"

#: ../../faq/general.rst:317
msgid "How many people are using Python?"
msgstr "有多少人在使用 Python？"

#: ../../faq/general.rst:319
msgid ""
"There are probably millions of users, though it's difficult to obtain an "
"exact count."
msgstr "使用者应该数以百万计，但很难获得一个精确的数字。"

#: ../../faq/general.rst:322
msgid ""
"Python is available for free download, so there are no sales figures, and "
"it's available from many different sites and packaged with many Linux "
"distributions, so download statistics don't tell the whole story either."
msgstr ""
"Python 可以免费下载，因此并不存在销量数据，此外它也可以从许多不同网站获取，并且包含于许多 Linux "
"发行版之中，因此下载量统计同样无法完全说明问题。"

#: ../../faq/general.rst:326
msgid ""
"The comp.lang.python newsgroup is very active, but not all Python users post"
" to the group or even read it."
msgstr "comp.lang.python 新闻组非常活跃，但不是所有 Python 用户都会在新闻组发帖，许多人甚至不会阅读新闻组。"

#: ../../faq/general.rst:331
msgid "Have any significant projects been done in Python?"
msgstr "有哪些重要的项目是用 Python 开发的？"

#: ../../faq/general.rst:333
msgid ""
"See https://www.python.org/about/success for a list of projects that use "
"Python. Consulting the proceedings for `past Python conferences "
"<https://www.python.org/community/workshops/>`_ will reveal contributions "
"from many different companies and organizations."
msgstr ""
"请访问 https://www.python.org/about/success 查看使用了 Python 的项目列表。 阅览 `历次 Python "
"会议 <https://www.python.org/community/workshops/>`_ 的日程纪要可以看到许多不同公司和组织所做的贡献。"

#: ../../faq/general.rst:338
msgid ""
"High-profile Python projects include `the Mailman mailing list manager "
"<https://www.list.org>`_ and `the Zope application server "
"<https://www.zope.dev>`_.  Several Linux distributions, most notably `Red "
"Hat <https://www.redhat.com>`_, have written part or all of their installer "
"and system administration software in Python.  Companies that use Python "
"internally include Google, Yahoo, and Lucasfilm Ltd."
msgstr ""
"高水准的 Python 项目包括 `Mailman 邮件列表管理器 <https://www.list.org>`_ 和 `Zope 应用服务器 "
"<https://www.zope.dev>`_。 多个 Linux 发行版，其中最著名的是 `Red Hat "
"<https://www.redhat.com>`_，都使用 Python 来编写其部分或全部的安装器和系统管理软件。 在内部使用 Python "
"的公司包括了 Google, Yahoo 和 Lucasfilm 等等。"

#: ../../faq/general.rst:347
msgid "What new developments are expected for Python in the future?"
msgstr "在未来可以期待 Python 将有什么新进展？"

#: ../../faq/general.rst:349
msgid ""
"See https://peps.python.org/ for the Python Enhancement Proposals (PEPs). "
"PEPs are design documents describing a suggested new feature for Python, "
"providing a concise technical specification and a rationale.  Look for a PEP"
" titled \"Python X.Y Release Schedule\", where X.Y is a version that hasn't "
"been publicly released yet."
msgstr ""
"请访问 https://peps.python.org/ 查看 Python 增强提议（PEP）。 PEP 是为 Python "
"加入某种新特性的提议进行描述的设计文档，其中会提供简明的技术规格说明与基本原理。 可查找标题为 \"Python X.Y Release "
"Schedule\" 的 PEP，其中 X.Y 是某个尚未公开发布的版本。"

#: ../../faq/general.rst:355
msgid ""
"New development is discussed on `the python-dev mailing list "
"<https://mail.python.org/mailman3/lists/python-dev.python.org/>`_."
msgstr ""
"新版本的开发会在 `python-dev 邮件列表 <https://mail.python.org/mailman3/lists/python-"
"dev.python.org/>`_ 中进行讨论。"

#: ../../faq/general.rst:360
msgid "Is it reasonable to propose incompatible changes to Python?"
msgstr "提议对 Python 加入不兼容的更改是否合理？"

#: ../../faq/general.rst:362
msgid ""
"In general, no.  There are already millions of lines of Python code around "
"the world, so any change in the language that invalidates more than a very "
"small fraction of existing programs has to be frowned upon.  Even if you can"
" provide a conversion program, there's still the problem of updating all "
"documentation; many books have been written about Python, and we don't want "
"to invalidate them all at a single stroke."
msgstr ""
"通常来说是不合理的。 世界上已存在的 Python 代码数以亿计，因此，任何对该语言的更改即便仅会使得现有程序中极少的一部分失效也是难以令人接受的。 "
"就算你可以提供一个转换程序，也仍然存在需要更新全部文档的问题；另外还有大量已出版的 Python 书籍，我们不希望让它们在一瞬间全部变成废纸。"

#: ../../faq/general.rst:369
msgid ""
"Providing a gradual upgrade path is necessary if a feature has to be "
"changed. :pep:`5` describes the procedure followed for introducing backward-"
"incompatible changes while minimizing disruption for users."
msgstr "如果必须更改某个特性，则应该提供渐进式的升级路径。 :pep:`5` 描述了引入向后不兼容的更改所需遵循的流程，以尽可能减少对用户的干扰。"

#: ../../faq/general.rst:375
msgid "Is Python a good language for beginning programmers?"
msgstr "Python 是一种对编程初学者友好的语言吗？"

#: ../../faq/general.rst:377
msgid "Yes."
msgstr "是的。"

#: ../../faq/general.rst:379
msgid ""
"It is still common to start students with a procedural and statically typed "
"language such as Pascal, C, or a subset of C++ or Java.  Students may be "
"better served by learning Python as their first language.  Python has a very"
" simple and consistent syntax and a large standard library and, most "
"importantly, using Python in a beginning programming course lets students "
"concentrate on important programming skills such as problem decomposition "
"and data type design.  With Python, students can be quickly introduced to "
"basic concepts such as loops and procedures.  They can probably even work "
"with user-defined objects in their very first course."
msgstr ""
"从过程式、静态类型的编程语言例如 Pascal, C 或者 C++ 以及 Java 的某一子集开始引导学生入门仍然是常见的做法。 但以  Python "
"作为第一种编程语言进行学习对学生可能更有利。Python 具有非常简单和一致的语法和庞大的标准库，而且最重要的是，在编程入门教学中使用 Python "
"可以让学生专注于更重要的编程技能，例如问题分解与数据类型设计。 使用 Python，可以快速向学生介绍基本概念例如循环与过程等。 "
"他们甚至有可能在第一次课里就开始接触用户自定义对象。"

#: ../../faq/general.rst:389
msgid ""
"For a student who has never programmed before, using a statically typed "
"language seems unnatural.  It presents additional complexity that the "
"student must master and slows the pace of the course.  The students are "
"trying to learn to think like a computer, decompose problems, design "
"consistent interfaces, and encapsulate data.  While learning to use a "
"statically typed language is important in the long term, it is not "
"necessarily the best topic to address in the students' first programming "
"course."
msgstr ""
"对于之前从未接触过编程的学生来说，使用静态类型语言会感觉不够自然。 这会给学生带来必须掌握的额外复杂性，并减慢教学的进度。 "
"学生需要尝试像计算机一样思考，分解问题，设计一致的接口并封装数据。 "
"虽然从长远来看，学习和使用一种静态类型语言是很重要的，但这并不是最适宜在学生的第一次编程课上就进行探讨的主题。"

#: ../../faq/general.rst:397
msgid ""
"Many other aspects of Python make it a good first language.  Like Java, "
"Python has a large standard library so that students can be assigned "
"programming projects very early in the course that *do* something.  "
"Assignments aren't restricted to the standard four-function calculator and "
"check balancing programs.  By using the standard library, students can gain "
"the satisfaction of working on realistic applications as they learn the "
"fundamentals of programming. Using the standard library also teaches "
"students about code reuse.  Third-party modules such as PyGame are also "
"helpful in extending the students' reach."
msgstr ""
"还有许多其他方面的特点使得 Python 成为很好的入门语言。 像 Java 一样，Python "
"拥有一个庞大的标准库，因此可以在课程非常早期的阶段就给学生布置一些 *实用* 的编程项目。 编程作业不必仅限于标准四则运算和账目检查程序。 "
"通过使用标准库，学生可以在学习编程基础知识的同时开发真正的应用，从而获得更大的满足感。 使用标准库还能使学生了解代码重用的概念。 而像 PyGame "
"这样的第三方模块同样有助于扩大学生的接触领域。"

#: ../../faq/general.rst:406
msgid ""
"Python's interactive interpreter enables students to test language features "
"while they're programming.  They can keep a window with the interpreter "
"running while they enter their program's source in another window.  If they "
"can't remember the methods for a list, they can do something like this::"
msgstr ""
"Python 的解释器使学生能够在编程时测试语言特性。 他们可以在一个窗口中输入程序源代码的同时开启一个解释器运行窗口。 "
"如果他们不记得列表有哪些方法，他们这以这样做::"

#: ../../faq/general.rst:411
msgid ""
">>> L = []\n"
">>> dir(L)\n"
"['__add__', '__class__', '__contains__', '__delattr__', '__delitem__',\n"
"'__dir__', '__doc__', '__eq__', '__format__', '__ge__',\n"
"'__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__',\n"
"'__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__',\n"
"'__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__',\n"
"'__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__',\n"
"'__sizeof__', '__str__', '__subclasshook__', 'append', 'clear',\n"
"'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove',\n"
"'reverse', 'sort']\n"
">>> [d for d in dir(L) if '__' not in d]\n"
"['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n"
"\n"
">>> help(L.append)\n"
"Help on built-in function append:\n"
"\n"
"append(...)\n"
"    L.append(object) -> None -- append object to end\n"
"\n"
">>> L.append(1)\n"
">>> L\n"
"[1]"
msgstr ""
">>> L = []\n"
">>> dir(L)\n"
"['__add__', '__class__', '__contains__', '__delattr__', '__delitem__',\n"
"'__dir__', '__doc__', '__eq__', '__format__', '__ge__',\n"
"'__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__',\n"
"'__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__',\n"
"'__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__',\n"
"'__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__',\n"
"'__sizeof__', '__str__', '__subclasshook__', 'append', 'clear',\n"
"'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove',\n"
"'reverse', 'sort']\n"
">>> [d for d in dir(L) if '__' not in d]\n"
"['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n"
"\n"
">>> help(L.append)\n"
"Help on built-in function append:\n"
"\n"
"append(...)\n"
"    L.append(object) -> None -- append object to end\n"
"\n"
">>> L.append(1)\n"
">>> L\n"
"[1]"

#: ../../faq/general.rst:435
msgid ""
"With the interpreter, documentation is never far from the student as they "
"are programming."
msgstr "通过使用解释器，学生编写程序时参考文档总是能伴随在他们身边。"

#: ../../faq/general.rst:438
msgid ""
"There are also good IDEs for Python.  IDLE is a cross-platform IDE for "
"Python that is written in Python using Tkinter. Emacs users will be happy to"
" know that there is a very good Python mode for Emacs.  All of these "
"programming environments provide syntax highlighting, auto-indenting, and "
"access to the interactive interpreter while coding.  Consult `the Python "
"wiki <https://wiki.python.org/moin/PythonEditors>`_ for a full list of "
"Python editing environments."
msgstr ""
"Python 还拥有一些很好的 IDE。 IDLE 是一个以 Python 基于 Tkinter 编写的跨平台 Python IDE。 Emacs "
"用户将高兴地了解到 Emacs 具有非常好的 Python 模式。 所有这些编程环境都提供语法高亮、自动缩进以及在编写代码时使用交互式解释器等功能。 "
"请访问 `Python wiki <https://wiki.python.org/moin/PythonEditors>`_ 查看 Python "
"编程环境的完整列表。"

#: ../../faq/general.rst:446
msgid ""
"If you want to discuss Python's use in education, you may be interested in "
"joining `the edu-sig mailing list "
"<https://www.python.org/community/sigs/current/edu-sig>`_."
msgstr ""
"如果你想要讨论 Python 在教育中的使用，你可能会有兴趣加入 `edu-sig 邮件列表 "
"<https://www.python.org/community/sigs/current/edu-sig>`_。"
