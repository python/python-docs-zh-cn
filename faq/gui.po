# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/gui.rst:5
msgid "Graphic User Interface FAQ"
msgstr "图形用户界面（GUI）常见问题"

#: ../../faq/gui.rst:8
msgid "Contents"
msgstr "目录"

#: ../../faq/gui.rst:15
msgid "General GUI Questions"
msgstr "图形界面常见问题"

#: ../../faq/gui.rst:18
msgid "What GUI toolkits exist for Python?"
msgstr "Python 有哪些 GUI 工具包？"

#: ../../faq/gui.rst:20
msgid ""
"Standard builds of Python include an object-oriented interface to the Tcl/Tk"
" widget set, called :ref:`tkinter <Tkinter>`.  This is probably the easiest "
"to install (since it comes included with most `binary distributions "
"<https://www.python.org/downloads/>`_ of Python) and use. For more info "
"about Tk, including pointers to the source, see the `Tcl/Tk home page "
"<https://www.tcl.tk>`_.  Tcl/Tk is fully portable to the macOS, Windows, and"
" Unix platforms."
msgstr ""
"Python 的标准构建包括一个指向 Tcl/Tk 部件集的面向对象的接口，称为 :ref:`tkinter <Tkinter>` 。 "
"这可能是最容易安装（因为它包含在大多数 Python 的 `二进制发行版 <https://www.python.org/downloads/>`_ "
"中）和使用的。关于 Tk 的更多信息，包括指向源代码的信息，见 `Tcl/Tk 主页 <https://www.tcl.tk>`_ 。 Tcl/Tk "
"可以完全移植到 macOS 、 Windows 和 Unix 平台。"

#: ../../faq/gui.rst:28
msgid ""
"Depending on what platform(s) you are aiming at, there are also several "
"alternatives. A `list of cross-platform "
"<https://wiki.python.org/moin/GuiProgramming#Cross-Platform_Frameworks>`_ "
"and `platform-specific "
"<https://wiki.python.org/moin/GuiProgramming#Platform-specific_Frameworks>`_"
" GUI frameworks can be found on the python wiki."
msgstr ""
"存在多种选项，具体取决于你的目标平台。 Python Wiki 上提供了一个 `跨平台 "
"<https://wiki.python.org/moin/GuiProgramming#Cross-Platform_Frameworks>`_ 和 "
"`平台专属 <https://wiki.python.org/moin/GuiProgramming#Platform-"
"specific_Frameworks>`_ 的 GUI 框架列表。"

#: ../../faq/gui.rst:36
msgid "Tkinter questions"
msgstr "有关Tkinter的问题"

#: ../../faq/gui.rst:39
msgid "How do I freeze Tkinter applications?"
msgstr "我怎样“冻结”Tkinter程序？"

#: ../../faq/gui.rst:41
msgid ""
"Freeze is a tool to create stand-alone applications.  When freezing Tkinter "
"applications, the applications will not be truly stand-alone, as the "
"application will still need the Tcl and Tk libraries."
msgstr ""
"Freeze （意为 “冻结”）是一个用来创建独立应用程序的工具。 当 “冻结” Tkinter 程序时，程序并不是真的能够独立运行，因为程序仍然需要 "
"Tcl 和 Tk 库。"

#: ../../faq/gui.rst:45
msgid ""
"One solution is to ship the application with the Tcl and Tk libraries, and "
"point to them at run-time using the :envvar:`TCL_LIBRARY` and "
":envvar:`TK_LIBRARY` environment variables."
msgstr ""
"一种解决方法是将程序与 Tcl 和 Tk 库一同发布，并且在运行时使用环境变量 :envvar:`TCL_LIBRARY` 和 "
":envvar:`TK_LIBRARY` 指向他们的位置。"

#: ../../faq/gui.rst:49
msgid ""
"To get truly stand-alone applications, the Tcl scripts that form the library"
" have to be integrated into the application as well. One tool supporting "
"that is SAM (stand-alone modules), which is part of the Tix distribution "
"(https://tix.sourceforge.net/)."
msgstr ""
"为了获得真正能独立运行的应用程序，来自该库的 Tcl 脚本也需要被整合进应用程序。 一个做这种事情的工具叫 SAM (独立模块)，它是 Tix "
"分发版的一部分 (https://tix.sourceforge.net/)。"

#: ../../faq/gui.rst:54
msgid ""
"Build Tix with SAM enabled, perform the appropriate call to "
":c:func:`Tclsam_init`, etc. inside Python's :file:`Modules/tkappinit.c`, and"
" link with libtclsam and libtksam (you might include the Tix libraries as "
"well)."
msgstr ""
"在启用 SAM 时编译 Tix ，在 Python 文件  :file:`Modules/tkappinit.c` 中执行对 "
":c:func:`Tclsam_init` 等的适当调用，并且将程序与 libtclsam 和 libtksam 相链接（可能也要包括 Tix 的库）。"

#: ../../faq/gui.rst:61
msgid "Can I have Tk events handled while waiting for I/O?"
msgstr "在等待 I/O 操作时能够处理 Tk 事件吗？"

#: ../../faq/gui.rst:63
msgid ""
"On platforms other than Windows, yes, and you don't even need threads!  But "
"you'll have to restructure your I/O code a bit.  Tk has the equivalent of "
"Xt's :c:func:`XtAddInput()` call, which allows you to register a callback "
"function which will be called from the Tk mainloop when I/O is possible on a"
" file descriptor.  See :ref:`tkinter-file-handlers`."
msgstr ""
"在 Windows 以外的其他平台上可以，你甚至不需要使用线程！ 但是你必须稍微修改一下你的 I/O 代码。 Tk 有与 Xt 的 "
":c:func:`XtAddInput()` 对应的调用，它允许你注册一个回调函数，当一个文件描述符可以进行 I/O 操作的时候，Tk "
"主循环将会调用这个回调函数。 参见 :ref:`tkinter-file-handlers`。"

#: ../../faq/gui.rst:71
msgid "I can't get key bindings to work in Tkinter: why?"
msgstr "在Tkinter中键绑定不工作：为什么？"

#: ../../faq/gui.rst:73
msgid ""
"An often-heard complaint is that event handlers bound to events with the "
":meth:`bind` method don't get handled even when the appropriate key is "
"pressed."
msgstr "经常听到的抱怨是：已经通过  :meth:`bind` 方法绑定了事件的处理程序，但是，当按下相关的按键后，这个处理程序却没有执行。"

#: ../../faq/gui.rst:76
msgid ""
"The most common cause is that the widget to which the binding applies "
"doesn't have \"keyboard focus\".  Check out the Tk documentation for the "
"focus command. Usually a widget is given the keyboard focus by clicking in "
"it (but not for labels; see the takefocus option)."
msgstr ""
"最常见的原因是，那个绑定的控件没有“键盘焦点”。请在 Tk 文档中查找 focus "
"指令。通常一个控件要获得“键盘焦点”，需要点击那个控件（而不是标签；请查看 takefocus 选项）。"
