# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Freesand Leo <yuqinju@163.com>, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/time.rst:6
msgid "PyTime C API"
msgstr "PyTime C API"

#: ../../c-api/time.rst:10
msgid ""
"The clock C API provides access to system clocks. It is similar to the "
"Python :mod:`time` module."
msgstr "时钟 C API 提供对系统时钟的访问。它类似于 Python :mod:`time` 模块。"

#: ../../c-api/time.rst:13
msgid ""
"For C API related to the :mod:`datetime` module, see :ref:`datetimeobjects`."
msgstr "有关与 :mod:`datetime` 模块相关的 C API，请参阅 :ref:`datetimeobjects`。"

#: ../../c-api/time.rst:17
msgid "Types"
msgstr "类型"

#: ../../c-api/time.rst:21
msgid ""
"A timestamp or duration in nanoseconds, represented as a signed 64-bit "
"integer."
msgstr "以纳秒为单位的时间戳或持续时间，表示为带符号的 64 位整数。"

#: ../../c-api/time.rst:24
msgid ""
"The reference point for timestamps depends on the clock used. For example, "
":c:func:`PyTime_Time` returns timestamps relative to the UNIX epoch."
msgstr "时间戳的参考点取决于所使用的时钟。 例如，:c:func:`PyTime_Time` 返回相对于 UNIX 纪元的时间戳。"

#: ../../c-api/time.rst:27
msgid ""
"The supported range is around [-292.3 years; +292.3 years]. Using the Unix "
"epoch (January 1st, 1970) as reference, the supported date range is around "
"[1677-09-21; 2262-04-11]. The exact limits are exposed as constants:"
msgstr ""
"支持的范围约为[-292.3年； +292.3 年]。以Unix纪元（1970年1月1日）为参考，支持的日期范围约为[1677-09-21； "
"2262-04-11]。确切的限制以常数形式公开："

#: ../../c-api/time.rst:34
msgid "Minimum value of :c:type:`PyTime_t`."
msgstr ":c:type:`PyTime_t` 的最小值。"

#: ../../c-api/time.rst:38
msgid "Maximum value of :c:type:`PyTime_t`."
msgstr ":c:type:`PyTime_t` 的最大值。"

#: ../../c-api/time.rst:42
msgid "Clock Functions"
msgstr "时钟函数"

#: ../../c-api/time.rst:44
msgid ""
"The following functions take a pointer to a :c:expr:`PyTime_t` that they set"
" to the value of a particular clock. Details of each clock are given in the "
"documentation of the corresponding Python function."
msgstr ""
"以下函数采用指向 :c:expr:`PyTime_t` 的指针，并将其设置为特定时钟的值。 每个时钟的详细信息在相应的 Python 函数的文档中给出。"

#: ../../c-api/time.rst:49
msgid ""
"The functions return ``0`` on success, or ``-1`` (with an exception set) on "
"failure."
msgstr "成功时函数返回``0``，失败时返回``-1``（设置一个异常）。"

#: ../../c-api/time.rst:52
msgid ""
"On integer overflow, they set the :c:data:`PyExc_OverflowError` exception "
"and set ``*result`` to the value clamped to the ``[PyTime_MIN; PyTime_MAX]``"
" range. (On current systems, integer overflows are likely caused by "
"misconfigured system time.)"
msgstr ""
"在整数溢出时，他们设置 :c:data:`PyExc_OverflowError` 异常，并将 ``*result`` 设置为 "
"``[PyTime_MIN; PyTime_MAX]`` 范围内的值。 （在当前系统上，整数溢出可能是由于系统时间配置错误引起的。）"

#: ../../c-api/time.rst:58
msgid ""
"As any other C API (unless otherwise specified), the functions must be "
"called with the :term:`GIL` held."
msgstr "与任何其他 C API 一样（除非另有说明），必须使用持有的 :term:`GIL`  来调用函数。"

#: ../../c-api/time.rst:63
msgid ""
"Read the monotonic clock. See :func:`time.monotonic` for important details "
"on this clock."
msgstr "读取单调时间。有关该时钟的重要详细信息，请参阅 :func:`time.monotonic`。"

#: ../../c-api/time.rst:68
msgid ""
"Read the performance counter. See :func:`time.perf_counter` for important "
"details on this clock."
msgstr "读取性能计数器。有关该时钟的重要详细信息，请参阅 :func:`time.perf_counter`。"

#: ../../c-api/time.rst:73
msgid ""
"Read the “wall clock” time. See :func:`time.time` for details important on "
"this clock."
msgstr "读取“Wall Clock” 时间。有关该时钟的重要详细信息，请参阅 :func:`time.time``。"

#: ../../c-api/time.rst:78
msgid "Raw Clock Functions"
msgstr "原始时钟函数"

#: ../../c-api/time.rst:80
msgid ""
"Similar to clock functions, but don't set an exception on error and don't "
"require the caller to hold the GIL."
msgstr "与时钟函数类似，但不设置错误异常，也不要求调用者持有 GIL。"

#: ../../c-api/time.rst:83
msgid "On success, the functions return ``0``."
msgstr "成功时，函数返回 ``0``。"

#: ../../c-api/time.rst:85
msgid ""
"On failure, they set ``*result`` to ``0`` and return ``-1``, *without* "
"setting an exception. To get the cause of the error, acquire the GIL and "
"call the regular (non-``Raw``) function. Note that the regular function may "
"succeed after the ``Raw`` one failed."
msgstr ""
"失败时，它们将 ``*result`` 设置为 ``0`` 并返回 ``-1``， *不* 设置异常。 要了解错误原因，请获取 GIL 并调用常规 (非"
" ``Raw``) 函数。 请注意，常规函数可能会在 ``Raw`` 函数失败后成功。"

#: ../../c-api/time.rst:92
msgid ""
"Similar to :c:func:`PyTime_Monotonic`, but don't set an exception on error "
"and don't require holding the GIL."
msgstr "与 :c:func:`PyTime_Monotonic` 类似，但在错误时不设置异常，并且不需要持有 GIL。"

#: ../../c-api/time.rst:97
msgid ""
"Similar to :c:func:`PyTime_PerfCounter`, but don't set an exception on error"
" and don't require holding the GIL."
msgstr "与 :c:func:`PyTime_PerfCounter` 类似，但在错误时不设置异常，并且不需要持有 GIL。"

#: ../../c-api/time.rst:102
msgid ""
"Similar to :c:func:`PyTime_Time`, but don't set an exception on error and "
"don't require holding the GIL."
msgstr "与 :c:func:`PyTime_Time` 类似，但在错误时不设置异常，并且不需要持有 GIL。 "

#: ../../c-api/time.rst:107
msgid "Conversion functions"
msgstr "转换函数"

#: ../../c-api/time.rst:111
msgid "Convert a timestamp to a number of seconds as a C :c:expr:`double`."
msgstr "将时间戳转换为 C :c:expr:`double` 形式的秒数。"

#: ../../c-api/time.rst:113
msgid ""
"The function cannot fail, but note that :c:expr:`double` has limited "
"accuracy for large values."
msgstr "该函数不会失败，但请注意 :c:expr:`double` 对于大值的精度有限。"
