# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/file.rst:6
msgid "File Objects"
msgstr "文件对象"

#: ../../c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in file "
"objects, which used to rely on the buffered I/O (:c:expr:`FILE*`) support "
"from the C standard library.  In Python 3, files and streams use the new "
":mod:`io` module, which defines several layers over the low-level unbuffered"
" I/O of the operating system.  The functions described below are convenience"
" C wrappers over these new APIs, and meant mostly for internal error "
"reporting in the interpreter; third-party code is advised to access the "
":mod:`io` APIs instead."
msgstr ""
"这些 API 是对内置文件对象的 Python 2 C API 的最小化模拟，它过去依赖于 C 标准库的带缓冲 I/O "
"(:c:expr:`FILE*`) 支持。 在 Python 3 中，文件和流使用新的 :mod:`io` 模块，该萨凡纳的操作系统的低层级无缓冲 "
"I/O 之上定义了几个层。 下面介绍的函数是针对这些新 API 的便捷 C 包装器，主要用于解释器的内部错误报告；建议第三方代码改为访问 "
":mod:`io` API。"

#: ../../c-api/file.rst:22
msgid ""
"Create a Python file object from the file descriptor of an already opened "
"file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "
"``NULL`` to use the defaults; *buffering* can be *-1* to use the default. "
"*name* is ignored and kept for backward compatibility. Return ``NULL`` on "
"failure. For a more comprehensive description of the arguments, please refer"
" to the :func:`io.open` function documentation."
msgstr ""
"根据已打开文件 *fd* 的文件描述符创建一个 Python 文件对象。 参数 *name*, *encoding*, *errors* 和 "
"*newline* 可以为 ``NULL`` 表示使用默认值；*buffering* 可以为 *-1* 表示使用默认值。 *name* "
"会被忽略仅保留用于向下兼容。 失败时返回 ``NULL``。 有关参数的更全面描述，请参阅 :func:`io.open` 函数的文档。"

#: ../../c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr "由于Python流具有自己的缓冲层，因此将它们与 OS 级文件描述符混合会产生各种问题（例如数据的意外排序）。"

#: ../../c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr "忽略 *name* 属性。"

#: ../../c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:expr:`int`.  If the "
"object is an integer, its value is returned.  If not, the object's "
":meth:`~io.IOBase.fileno` method is called if it exists; the method must "
"return an integer, which is returned as the file descriptor value.  Sets an "
"exception and returns ``-1`` on failure."
msgstr ""
"将与 *p* 关联的文件描述符作为 :c:expr:`int` 返回。 如果对象是整数，则返回其值。 如果不是，则如果对象存在 "
":meth:`~io.IOBase.fileno` 方法则调用该方法；该方法必须返回一个整数，它将作为文件描述符的值返回。 失败时将设置异常并返回 "
"``-1``。"

#: ../../c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a "
":meth:`~io.IOBase.readline` method.  If *n* is ``0``, exactly one line is "
"read, regardless of the length of the line.  If *n* is greater than ``0``, "
"no more than *n* bytes will be read from the file; a partial line can be "
"returned.  In both cases, an empty string is returned if the end of the file"
" is reached immediately.  If *n* is less than ``0``, however, one line is "
"read regardless of length, but :exc:`EOFError` is raised if the end of the "
"file is reached immediately."
msgstr ""
"等价于 ``p.readline([n])`` ，这个函数从对象 *p* 中读取一行。 *p* 可以是文件对象或具有 "
":meth:`~io.IOBase.readline` 方法的任何对象。 如果 *n* 是 ``0`` ，则无论该行的长度如何，都会读取一行。 如果 "
"*n* 大于 ``0``，则从文件中读取不超过 *n* 个字节；可以返回行的一部分。 在这两种情况下，如果立即到达文件末尾，则返回空字符串。 但是，如果"
" *n* 小于 ``0`` ，则无论长度如何都会读取一行，但是如果立即到达文件末尾，则引发 :exc:`EOFError`。"

#: ../../c-api/file.rst:65
msgid ""
"Overrides the normal behavior of :func:`io.open_code` to pass its parameter "
"through the provided handler."
msgstr "重写 :func:`io.open_code` 的正常行为，将其形参通过所提供的处理程序来传递。"

#: ../../c-api/file.rst:68
msgid "The *handler* is a function of type:"
msgstr "*handler* 函数的类型为："

#: ../../c-api/file.rst:73
msgid ""
"Equivalent of :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`, "
"where *path* is guaranteed to be :c:type:`PyUnicodeObject`."
msgstr ""
"等价于 :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`，其中 *path* 会确保为"
" :c:type:`PyUnicodeObject`。"

#: ../../c-api/file.rst:77
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr "*userData* 指针会被传入钩子函数。 因于钩子函数可能由不同的运行时调用，该指针不应直接指向 Python 状态。"

#: ../../c-api/file.rst:81
msgid ""
"As this hook is intentionally used during import, avoid importing new "
"modules during its execution unless they are known to be frozen or available"
" in ``sys.modules``."
msgstr ""
"鉴于这个钩子专门在导入期间使用的，请避免在新模块执行期间进行导入操作，除非已知它们为冻结状态或者是在 ``sys.modules`` 中可用。"

#: ../../c-api/file.rst:85
msgid ""
"Once a hook has been set, it cannot be removed or replaced, and later calls "
"to :c:func:`PyFile_SetOpenCodeHook` will fail. On failure, the function "
"returns -1 and sets an exception if the interpreter has been initialized."
msgstr ""
"一旦钩子被设定，它就不能被移除或替换，之后对 :c:func:`PyFile_SetOpenCodeHook` "
"的调用也将失败，如果解释器已经被初始化，函数将返回 -1 并设置一个异常。"

#: ../../c-api/file.rst:89
msgid "This function is safe to call before :c:func:`Py_Initialize`."
msgstr "此函数可以安全地在 :c:func:`Py_Initialize` 之前调用。"

#: ../../c-api/file.rst:91
msgid ""
"Raises an :ref:`auditing event <auditing>` ``setopencodehook`` with no "
"arguments."
msgstr "引发一个不带参数的 :ref:`审计事件 <auditing>` ``setopencodehook``。"

#: ../../c-api/file.rst:101
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :c:macro:`Py_PRINT_RAW`; if given, the :func:`str` of the object is "
"written instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"将对象 *obj* 写入文件对象 *p*。 *flags* 唯一支持的旗标是 :c:macro:`Py_PRINT_RAW`；如果给定，则写入对象的 "
":func:`str` 而不是 :func:`repr`。 成功时返回 ``0``，失败时返回 ``-1``；将设置适当的异常。"

#: ../../c-api/file.rst:109
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr "将字符串 *s* 写入文件对象 *p*。 成功返回 ``0`` 失败返回 ``-1``；将设定相应的异常。"

#: ../../c-api/file.rst:8
msgid "object"
msgstr "object -- 对象"

#: ../../c-api/file.rst:8
msgid "file"
msgstr "文件"

#: ../../c-api/file.rst:50
msgid "EOFError (built-in exception)"
msgstr "EOFError (内置异常)"

#: ../../c-api/file.rst:99
msgid "Py_PRINT_RAW (C macro)"
msgstr "Py_PRINT_RAW (C 宏)"
