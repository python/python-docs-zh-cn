# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/file.rst:6
msgid "File Objects"
msgstr ""

#: ../../c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in file "
"objects, which used to rely on the buffered I/O (:c:expr:`FILE*`) support "
"from the C standard library.  In Python 3, files and streams use the new "
":mod:`io` module, which defines several layers over the low-level unbuffered"
" I/O of the operating system.  The functions described below are convenience"
" C wrappers over these new APIs, and meant mostly for internal error "
"reporting in the interpreter; third-party code is advised to access the "
":mod:`io` APIs instead."
msgstr ""

#: ../../c-api/file.rst:22
msgid ""
"Create a Python file object from the file descriptor of an already opened "
"file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "
"``NULL`` to use the defaults; *buffering* can be *-1* to use the default. "
"*name* is ignored and kept for backward compatibility. Return ``NULL`` on "
"failure. For a more comprehensive description of the arguments, please refer"
" to the :func:`io.open` function documentation."
msgstr ""

#: ../../c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""

#: ../../c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr ""

#: ../../c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:expr:`int`.  If the "
"object is an integer, its value is returned.  If not, the object's "
":meth:`~io.IOBase.fileno` method is called if it exists; the method must "
"return an integer, which is returned as the file descriptor value.  Sets an "
"exception and returns ``-1`` on failure."
msgstr ""

#: ../../c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a "
":meth:`~io.IOBase.readline` method.  If *n* is ``0``, exactly one line is "
"read, regardless of the length of the line.  If *n* is greater than ``0``, "
"no more than *n* bytes will be read from the file; a partial line can be "
"returned.  In both cases, an empty string is returned if the end of the file"
" is reached immediately.  If *n* is less than ``0``, however, one line is "
"read regardless of length, but :exc:`EOFError` is raised if the end of the "
"file is reached immediately."
msgstr ""

#: ../../c-api/file.rst:65
msgid ""
"Overrides the normal behavior of :func:`io.open_code` to pass its parameter "
"through the provided handler."
msgstr ""

#: ../../c-api/file.rst:68
msgid "The *handler* is a function of type:"
msgstr ""

#: ../../c-api/file.rst:73
msgid ""
"Equivalent of :c:expr:`PyObject *(\\*)(PyObject *path, void *userData)`, "
"where *path* is guaranteed to be :c:type:`PyUnicodeObject`."
msgstr ""

#: ../../c-api/file.rst:77
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""

#: ../../c-api/file.rst:81
msgid ""
"As this hook is intentionally used during import, avoid importing new "
"modules during its execution unless they are known to be frozen or available"
" in ``sys.modules``."
msgstr ""

#: ../../c-api/file.rst:85
msgid ""
"Once a hook has been set, it cannot be removed or replaced, and later calls "
"to :c:func:`PyFile_SetOpenCodeHook` will fail. On failure, the function "
"returns -1 and sets an exception if the interpreter has been initialized."
msgstr ""

#: ../../c-api/file.rst:89
msgid "This function is safe to call before :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/file.rst:91
msgid ""
"Raises an :ref:`auditing event <auditing>` ``setopencodehook`` with no "
"arguments."
msgstr ""

#: ../../c-api/file.rst:101
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :c:macro:`Py_PRINT_RAW`; if given, the :func:`str` of the object is "
"written instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""

#: ../../c-api/file.rst:109
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""

#: ../../c-api/file.rst:8
msgid "object"
msgstr ""

#: ../../c-api/file.rst:8
msgid "file"
msgstr ""

#: ../../c-api/file.rst:50
msgid "EOFError (built-in exception)"
msgstr ""

#: ../../c-api/file.rst:99
msgid "Py_PRINT_RAW (C macro)"
msgstr ""
