# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:57+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/set.rst:6
msgid "Set Objects"
msgstr "集合对象"

#: ../../c-api/set.rst:15
msgid ""
"This section details the public API for :class:`set` and :class:`frozenset` "
"objects.  Any functionality not listed below is best accessed using either "
"the abstract object protocol (including :c:func:`PyObject_CallMethod`, "
":c:func:`PyObject_RichCompareBool`, :c:func:`PyObject_Hash`, "
":c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, "
":c:func:`PyObject_Print`, and :c:func:`PyObject_GetIter`) or the abstract "
"number protocol (including :c:func:`PyNumber_And`, "
":c:func:`PyNumber_Subtract`, :c:func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, "
":c:func:`PyNumber_InPlaceAnd`, :c:func:`PyNumber_InPlaceSubtract`, "
":c:func:`PyNumber_InPlaceOr`, and :c:func:`PyNumber_InPlaceXor`)."
msgstr ""
"这一节详细介绍了针对 :class:`set` 和 :class:`frozenset` 对象的公共 API。 "
"任何未在下面列出的功能最好是使用抽象对象协议 (包括 :c:func:`PyObject_CallMethod`, "
":c:func:`PyObject_RichCompareBool`, :c:func:`PyObject_Hash`, "
":c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:`PyObject_Print`"
" 以及 :c:func:`PyObject_GetIter`) 或者抽象数字协议 (包括 :c:func:`PyNumber_And`, "
":c:func:`PyNumber_Subtract`, :c:func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, "
":c:func:`PyNumber_InPlaceAnd`, :c:func:`PyNumber_InPlaceSubtract`, "
":c:func:`PyNumber_InPlaceOr` 以及 :c:func:`PyNumber_InPlaceXor`)。"

#: ../../c-api/set.rst:29
msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a "
":c:type:`PyDictObject` in that it is a fixed size for small sets (much like "
"tuple storage) and will point to a separate, variable sized block of memory "
"for medium and large sized sets (much like list storage). None of the fields"
" of this structure should be considered public and all are subject to "
"change.  All access should be done through the documented API rather than by"
" manipulating the values in the structure."
msgstr ""
"这个 :c:type:`PyObject` 的子类型被用来保存 :class:`set` 和 :class:`frozenset` 对象的内部数据。 "
"它类似于 :c:type:`PyDictObject` "
"的地方在于对小尺寸集合来说它是固定大小的（很像元组的存储方式），而对于中等和大尺寸集合来说它将指向单独的可变大小的内存块（很像列表的存储方式）。 "
"此结构体的字段不应被视为公有并且可能发生改变。 所有访问都应当通过已写入文档的 API 来进行而不可通过直接操纵结构体中的值。"

#: ../../c-api/set.rst:40
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python "
":class:`set` type."
msgstr "这是一个 :c:type:`PyTypeObject` 实例，表示 Python :class:`set` 类型。"

#: ../../c-api/set.rst:46
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python "
":class:`frozenset` type."
msgstr "这是一个 :c:type:`PyTypeObject` 实例，表示 Python :class:`frozenset` 类型。"

#: ../../c-api/set.rst:49
msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr "下列类型检查宏适用于指向任意 Python 对象的指针。 类似地，这些构造函数也适用于任意可迭代的 Python 对象。"

#: ../../c-api/set.rst:55
msgid ""
"Return true if *p* is a :class:`set` object or an instance of a subtype. "
"This function always succeeds."
msgstr "如果 *p* 是一个 :class:`set` 对象或者是其子类型的实例则返回真值。 此函数总是会成功执行。"

#: ../../c-api/set.rst:60
msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype.  This function always succeeds."
msgstr "如果 *p* 是一个 :class:`frozenset` 对象或者是其子类型的实例则返回真值。 此函数总是会成功执行。"

#: ../../c-api/set.rst:65
msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object, or"
" an instance of a subtype.  This function always succeeds."
msgstr ""
"如果 *p* 是一个 :class:`set` 对象、:class:`frozenset` 对象或者是其子类型的实例则返回真值。 此函数总是会成功执行。"

#: ../../c-api/set.rst:70
msgid ""
"Return true if *p* is a :class:`set` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr "如果 *p* 是一个 :class:`set` 对象但不是其子类型的实例则返回真值。 此函数总是会成功执行。"

#: ../../c-api/set.rst:77
msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` object "
"but not an instance of a subtype.  This function always succeeds."
msgstr ""
"如果 *p* 是一个 :class:`set` 或 :class:`frozenset` 对象但不是其子类型的实例则返回真值。 此函数总是会成功执行。"

#: ../../c-api/set.rst:83
msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr "如果 *p* 是一个 :class:`frozenset` 对象但不是其子类型的实例则返回真值。 此函数总是会成功执行。"

#: ../../c-api/set.rst:89
msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*.  "
"The *iterable* may be ``NULL`` to create a new empty set.  Return the new "
"set on success or ``NULL`` on failure.  Raise :exc:`TypeError` if *iterable*"
" is not actually iterable.  The constructor is also useful for copying a set"
" (``c=set(s)``)."
msgstr ""
"返回一个新的 :class:`set`，其中包含 *iterable* 所返回的对象。 *iterable* 可以为 ``NULL`` "
"表示创建一个新的空集合。 成功时返回新的集合，失败时返回 ``NULL``。 如果 *iterable* 实际上不是可迭代对象则引发 "
":exc:`TypeError`。 该构造器也适用于拷贝集合 (``c=set(s)``)。"

#: ../../c-api/set.rst:98
msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be ``NULL`` to create a new empty frozenset."
"  Return the new set on success or ``NULL`` on failure.  Raise "
":exc:`TypeError` if *iterable* is not actually iterable."
msgstr ""
"返回一个新的 :class:`frozenset`，其中包含 *iterable* 所返回的对象。 *iterable* 可以为 ``NULL`` "
"表示创建一个新的空冻结集合。 成功时返回新的冻结集合，失败时返回 ``NULL``。 如果 *iterable* 实际上不是可迭代对象则引发 "
":exc:`TypeError`。"

#: ../../c-api/set.rst:104
msgid ""
"The following functions and macros are available for instances of "
":class:`set` or :class:`frozenset` or instances of their subtypes."
msgstr "下列函数和宏适用于 :class:`set` 或 :class:`frozenset` 的实例或是其子类型的实例。"

#: ../../c-api/set.rst:112
msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. Equivalent"
" to ``len(anyset)``.  Raises a :exc:`SystemError` if *anyset* is not a "
":class:`set`, :class:`frozenset`, or an instance of a subtype."
msgstr ""
"返回 :class:`set` 或 :class:`frozenset` 对象的长度。 等同于 ``len(anyset)``。 如果 *anyset*"
" 不是 :class:`set`, :class:`frozenset` 或其子类型的实例，则会引发 :exc:`SystemError`。"

#: ../../c-api/set.rst:119
msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr "宏版本的 :c:func:`PySet_Size`，不带错误检测。"

#: ../../c-api/set.rst:124
msgid ""
"Return ``1`` if found, ``0`` if not found, and ``-1`` if an error is "
"encountered.  Unlike the Python :meth:`~object.__contains__` method, this "
"function does not automatically convert unhashable sets into temporary "
"frozensets.  Raise a :exc:`TypeError` if the *key* is unhashable. Raise "
":exc:`SystemError` if *anyset* is not a :class:`set`, :class:`frozenset`, or"
" an instance of a subtype."
msgstr ""
"如果找到则返回 ``1`` ，如果未找到则返回 ``0`` ，如果遇到错误则返回 ``-1``。 与 Python "
":meth:`~object.__contains__` 方法不同，该函数不会自动将不可哈希的集合转换为临时冻结集合。 如果 *key* "
"是不可哈希对象则会引发 :exc:`TypeError`。 如果 *anyset* 不是 :class:`set`, "
":class:`frozenset` 或其子类型的实例则会引发 :exc:`SystemError`。"

#: ../../c-api/set.rst:133
msgid ""
"Add *key* to a :class:`set` instance.  Also works with :class:`frozenset` "
"instances (like :c:func:`PyTuple_SetItem` it can be used to fill in the "
"values of brand new frozensets before they are exposed to other code).  "
"Return ``0`` on success or ``-1`` on failure. Raise a :exc:`TypeError` if "
"the *key* is unhashable. Raise a :exc:`MemoryError` if there is no room to "
"grow.  Raise a :exc:`SystemError` if *set* is not an instance of "
":class:`set` or its subtype."
msgstr ""
"添加 *key* 到一个 :class:`set` 实例。 也可用于 :class:`frozenset` 实例（与 "
":c:func:`PyTuple_SetItem` 的类似之处是它也可被用来为全新的冻结集合在公开给其他代码之前填充全新的值）。 成功时返回 ``0``"
" 而失败时返回 ``-1``。 如果 *key* 为不可哈希对象则会引发 :exc:`TypeError`。 如果没有增长空间则会引发 "
":exc:`MemoryError`。 如果 *set* 不是 :class:`set` 或其子类型的实例则会引发 "
":exc:`SystemError`。"

#: ../../c-api/set.rst:142
msgid ""
"The following functions are available for instances of :class:`set` or its "
"subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr "下列函数适用于 :class:`set` 或其子类型的实例，但不可用于 :class:`frozenset` 或其子类型的实例。"

#: ../../c-api/set.rst:148
msgid ""
"Return ``1`` if found and removed, ``0`` if not found (no action taken), and"
" ``-1`` if an error is encountered.  Does not raise :exc:`KeyError` for "
"missing keys.  Raise a :exc:`TypeError` if the *key* is unhashable.  Unlike "
"the Python :meth:`~frozenset.discard` method, this function does not "
"automatically convert unhashable sets into temporary frozensets. Raise "
":exc:`SystemError` if *set* is not an instance of :class:`set` or its "
"subtype."
msgstr ""
"如果找到并已删除则返回 ``1``，如未找到（无操作）则返回 ``0``，如果遇到错误则返回 ``-1``。 对于不存在的键不会引发 "
":exc:`KeyError`。 如果 *key* 为不可哈希对象则会引发 :exc:`TypeError`。 与 Python "
":meth:`~frozenset.discard` 方法不同，该函数不会自动将不可哈希的集合转换为临时的冻结集合。 如果 *set* 不是 "
":class:`set` 或其子类的实例则会引发 :exc:`SystemError`。"

#: ../../c-api/set.rst:158
msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes the "
"object from the *set*.  Return ``NULL`` on failure.  Raise :exc:`KeyError` "
"if the set is empty. Raise a :exc:`SystemError` if *set* is not an instance "
"of :class:`set` or its subtype."
msgstr ""
"返回 *set* 中任意对象的新引用，并从 *set* 中移除该对象。 失败时返回 ``NULL``。 如果集合为空则会引发 "
":exc:`KeyError`。 如果 *set* 不是 :class:`set` 或其子类型的实例则会引发 :exc:`SystemError`。"

#: ../../c-api/set.rst:166
msgid ""
"Empty an existing set of all elements. Return ``0`` on success. Return "
"``-1`` and raise :exc:`SystemError` if *set* is not an instance of "
":class:`set` or its subtype."
msgstr ""
"清空现有的所有元素的集合。 成功时返回 ``0``。 如果 *set* 不是 :class:`set` 或其子类型的实际则返回  ``-1`` 并引发 "
":exc:`SystemError`。"

#: ../../c-api/set.rst:11
msgid "object"
msgstr "object -- 对象"

#: ../../c-api/set.rst:11
msgid "set"
msgstr "set"

#: ../../c-api/set.rst:11
msgid "frozenset"
msgstr "frozenset"

#: ../../c-api/set.rst:110
msgid "built-in function"
msgstr "内置函数"

#: ../../c-api/set.rst:110
msgid "len"
msgstr "len"
