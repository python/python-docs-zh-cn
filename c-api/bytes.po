# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/bytes.rst:6
msgid "Bytes Objects"
msgstr ""

#: ../../c-api/bytes.rst:8
msgid ""
"These functions raise :exc:`TypeError` when expecting a bytes parameter and "
"called with a non-bytes parameter."
msgstr ""

#: ../../c-api/bytes.rst:16
msgid "This subtype of :c:type:`PyObject` represents a Python bytes object."
msgstr ""

#: ../../c-api/bytes.rst:21
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python bytes type; it"
" is the same object as :class:`bytes` in the Python layer."
msgstr ""

#: ../../c-api/bytes.rst:27
msgid ""
"Return true if the object *o* is a bytes object or an instance of a subtype "
"of the bytes type.  This function always succeeds."
msgstr ""

#: ../../c-api/bytes.rst:33
msgid ""
"Return true if the object *o* is a bytes object, but not an instance of a "
"subtype of the bytes type.  This function always succeeds."
msgstr ""

#: ../../c-api/bytes.rst:39
msgid ""
"Return a new bytes object with a copy of the string *v* as value on success,"
" and ``NULL`` on failure.  The parameter *v* must not be ``NULL``; it will "
"not be checked."
msgstr ""

#: ../../c-api/bytes.rst:46
msgid ""
"Return a new bytes object with a copy of the string *v* as value and length "
"*len* on success, and ``NULL`` on failure.  If *v* is ``NULL``, the contents"
" of the bytes object are uninitialized."
msgstr ""

#: ../../c-api/bytes.rst:53
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python bytes object and "
"return a bytes object with the values formatted into it.  The variable "
"arguments must be C types and must correspond exactly to the format "
"characters in the *format* string.  The following format characters are "
"allowed:"
msgstr ""

#: ../../c-api/bytes.rst:68
msgid "Format Characters"
msgstr ""

#: ../../c-api/bytes.rst:68
msgid "Type"
msgstr ""

#: ../../c-api/bytes.rst:68
msgid "Comment"
msgstr ""

#: ../../c-api/bytes.rst:70
msgid "``%%``"
msgstr ""

#: ../../c-api/bytes.rst:70
msgid "*n/a*"
msgstr ""

#: ../../c-api/bytes.rst:70
msgid "The literal % character."
msgstr ""

#: ../../c-api/bytes.rst:72
msgid "``%c``"
msgstr ""

#: ../../c-api/bytes.rst:72 ../../c-api/bytes.rst:75 ../../c-api/bytes.rst:93
#: ../../c-api/bytes.rst:96
msgid "int"
msgstr ""

#: ../../c-api/bytes.rst:72
msgid "A single byte, represented as a C int."
msgstr ""

#: ../../c-api/bytes.rst:75
msgid "``%d``"
msgstr ""

#: ../../c-api/bytes.rst:75
msgid "Equivalent to ``printf(\"%d\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:78
msgid "``%u``"
msgstr ""

#: ../../c-api/bytes.rst:78
msgid "unsigned int"
msgstr ""

#: ../../c-api/bytes.rst:78
msgid "Equivalent to ``printf(\"%u\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:81
msgid "``%ld``"
msgstr ""

#: ../../c-api/bytes.rst:81
msgid "long"
msgstr ""

#: ../../c-api/bytes.rst:81
msgid "Equivalent to ``printf(\"%ld\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:84
msgid "``%lu``"
msgstr ""

#: ../../c-api/bytes.rst:84
msgid "unsigned long"
msgstr ""

#: ../../c-api/bytes.rst:84
msgid "Equivalent to ``printf(\"%lu\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:87
msgid "``%zd``"
msgstr ""

#: ../../c-api/bytes.rst:87
msgid ":c:type:`\\ Py_ssize_t`"
msgstr ""

#: ../../c-api/bytes.rst:87
msgid "Equivalent to ``printf(\"%zd\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:90
msgid "``%zu``"
msgstr ""

#: ../../c-api/bytes.rst:90
msgid "size_t"
msgstr ""

#: ../../c-api/bytes.rst:90
msgid "Equivalent to ``printf(\"%zu\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:93
msgid "``%i``"
msgstr ""

#: ../../c-api/bytes.rst:93
msgid "Equivalent to ``printf(\"%i\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:96
msgid "``%x``"
msgstr ""

#: ../../c-api/bytes.rst:96
msgid "Equivalent to ``printf(\"%x\")``. [1]_"
msgstr ""

#: ../../c-api/bytes.rst:99
msgid "``%s``"
msgstr ""

#: ../../c-api/bytes.rst:99
msgid "const char\\*"
msgstr ""

#: ../../c-api/bytes.rst:99
msgid "A null-terminated C character array."
msgstr ""

#: ../../c-api/bytes.rst:102
msgid "``%p``"
msgstr ""

#: ../../c-api/bytes.rst:102
msgid "const void\\*"
msgstr ""

#: ../../c-api/bytes.rst:102
msgid ""
"The hex representation of a C pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal "
"``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""

#: ../../c-api/bytes.rst:111
msgid ""
"An unrecognized format character causes all the rest of the format string to"
" be copied as-is to the result object, and any extra arguments discarded."
msgstr ""

#: ../../c-api/bytes.rst:114
msgid ""
"For integer specifiers (d, u, ld, lu, zd, zu, i, x): the 0-conversion flag "
"has effect even when a precision is given."
msgstr ""

#: ../../c-api/bytes.rst:120
msgid ""
"Identical to :c:func:`PyBytes_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""

#: ../../c-api/bytes.rst:126
msgid ""
"Return the bytes representation of object *o* that implements the buffer "
"protocol."
msgstr ""

#: ../../c-api/bytes.rst:132
msgid "Return the length of the bytes in bytes object *o*."
msgstr ""

#: ../../c-api/bytes.rst:137
msgid "Similar to :c:func:`PyBytes_Size`, but without error checking."
msgstr ""

#: ../../c-api/bytes.rst:142
msgid ""
"Return a pointer to the contents of *o*.  The pointer refers to the internal"
" buffer of *o*, which consists of ``len(o) + 1`` bytes.  The last byte in "
"the buffer is always null, regardless of whether there are any other null "
"bytes.  The data must not be modified in any way, unless the object was just"
" created using ``PyBytes_FromStringAndSize(NULL, size)``. It must not be "
"deallocated.  If *o* is not a bytes object at all, "
":c:func:`PyBytes_AsString` returns ``NULL`` and raises :exc:`TypeError`."
msgstr ""

#: ../../c-api/bytes.rst:154
msgid "Similar to :c:func:`PyBytes_AsString`, but without error checking."
msgstr ""

#: ../../c-api/bytes.rst:159
msgid ""
"Return the null-terminated contents of the object *obj* through the output "
"variables *buffer* and *length*. Returns ``0`` on success."
msgstr ""

#: ../../c-api/bytes.rst:163
msgid ""
"If *length* is ``NULL``, the bytes object may not contain embedded null "
"bytes; if it does, the function returns ``-1`` and a :exc:`ValueError` is "
"raised."
msgstr ""

#: ../../c-api/bytes.rst:167
msgid ""
"The buffer refers to an internal buffer of *obj*, which includes an "
"additional null byte at the end (not counted in *length*).  The data must "
"not be modified in any way, unless the object was just created using "
"``PyBytes_FromStringAndSize(NULL, size)``.  It must not be deallocated.  If "
"*obj* is not a bytes object at all, :c:func:`PyBytes_AsStringAndSize` "
"returns ``-1`` and raises :exc:`TypeError`."
msgstr ""

#: ../../c-api/bytes.rst:174
msgid ""
"Previously, :exc:`TypeError` was raised when embedded null bytes were "
"encountered in the bytes object."
msgstr ""

#: ../../c-api/bytes.rst:181
msgid ""
"Create a new bytes object in *\\*bytes* containing the contents of *newpart*"
" appended to *bytes*; the caller will own the new reference.  The reference "
"to the old value of *bytes* will be stolen.  If the new object cannot be "
"created, the old reference to *bytes* will still be discarded and the value "
"of *\\*bytes* will be set to ``NULL``; the appropriate exception will be "
"set."
msgstr ""

#: ../../c-api/bytes.rst:190
msgid ""
"Create a new bytes object in *\\*bytes* containing the contents of *newpart*"
" appended to *bytes*.  This version releases the :term:`strong reference` to"
" *newpart* (i.e. decrements its reference count)."
msgstr ""

#: ../../c-api/bytes.rst:197
msgid ""
"A way to resize a bytes object even though it is \"immutable\". Only use "
"this to build up a brand new bytes object; don't use this if the bytes may "
"already be known in other parts of the code.  It is an error to call this "
"function if the refcount on the input bytes object is not one. Pass the "
"address of an existing bytes object as an lvalue (it may be written into), "
"and the new size desired.  On success, *\\*bytes* holds the resized bytes "
"object and ``0`` is returned; the address in *\\*bytes* may differ from its "
"input value.  If the reallocation fails, the original bytes object at "
"*\\*bytes* is deallocated, *\\*bytes* is set to ``NULL``, :exc:`MemoryError`"
" is set, and ``-1`` is returned."
msgstr ""

#: ../../c-api/bytes.rst:11
msgid "object"
msgstr ""

#: ../../c-api/bytes.rst:11
msgid "bytes"
msgstr ""
