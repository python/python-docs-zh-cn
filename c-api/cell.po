# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:20+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/cell.rst:6
msgid "Cell Objects"
msgstr "Cell 对象"

#: ../../c-api/cell.rst:8
msgid ""
"\"Cell\" objects are used to implement variables referenced by multiple "
"scopes. For each such variable, a cell object is created to store the value;"
" the local variables of each stack frame that references the value contains "
"a reference to the cells from outer scopes which also use that variable.  "
"When the value is accessed, the value contained in the cell is used instead "
"of the cell object itself.  This de-referencing of the cell object requires "
"support from the generated byte-code; these are not automatically de-"
"referenced when accessed. Cell objects are not likely to be useful "
"elsewhere."
msgstr ""
"“Cell”对象用于实现由多个作用域引用的变量。 "
"对于每个这样的变量，一个“Cell”对象为了存储该值而被创建；引用该值的每个堆栈框架的局部变量包含同样使用该变量的对外部作用域的“Cell”引用。 "
"访问该值时，将使用“Cell”中包含的值而不是单元格对象本身。 "
"这种对“Cell”对象的非关联化的引用需要支持生成的字节码；访问时不会自动非关联化这些内容。 “Cell”对象在其他地方可能不太有用。"

#: ../../c-api/cell.rst:20
msgid "The C structure used for cell objects."
msgstr "用于Cell对象的C结构体。"

#: ../../c-api/cell.rst:25
msgid "The type object corresponding to cell objects."
msgstr "与 Cell 对象对应的类型对​​象。"

#: ../../c-api/cell.rst:30
msgid ""
"Return true if *ob* is a cell object; *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr "如果 *ob* 是一个 cell 对象则返回真值；*ob* 必须不为 ``NULL``。 此函数总是会成功执行。"

#: ../../c-api/cell.rst:36
msgid ""
"Create and return a new cell object containing the value *ob*. The parameter"
" may be ``NULL``."
msgstr "创建并返回一个包含值 *ob* 的新 cell 对象。形参可以为 ``NULL``。"

#: ../../c-api/cell.rst:42
msgid ""
"Return the contents of the cell *cell*, which can be ``NULL``. If *cell* is "
"not a cell object, returns ``NULL`` with an exception set."
msgstr ""
"返回 cell 对象 *cell* 的内容，可以为 ``NULL``。 如果 *cell* 不是一个 cell 对象，则返回 ``NULL`` "
"并设置一个异常。"

#: ../../c-api/cell.rst:48
msgid ""
"Return the contents of the cell *cell*, but without checking that *cell* is "
"non-``NULL`` and a cell object."
msgstr "返回 cell 对象 *cell* 的内容，但是不检测 *cell* 是否非 ``NULL`` 并且为一个 cell 对象。"

#: ../../c-api/cell.rst:54
msgid ""
"Set the contents of the cell object *cell* to *value*.  This releases the "
"reference to any current content of the cell. *value* may be ``NULL``.  "
"*cell* must be non-``NULL``."
msgstr ""
"将 cell 对象 *cell* 的内容设为 *value*。 这将释放任何对该 cell 对象当前内容的引用。 *value* 可以为 "
"``NULL``。 *cell* 必须不为 ``NULL``。"

#: ../../c-api/cell.rst:58
msgid ""
"On success, return ``0``. If *cell* is not a cell object, set an exception "
"and return ``-1``."
msgstr "当成功时，返回 ``0``。 如果 *cell* 不是一个 cell 对象，则设置一个异常并返回 ``-1``。"

#: ../../c-api/cell.rst:64
msgid ""
"Sets the value of the cell object *cell* to *value*.  No reference counts "
"are adjusted, and no checks are made for safety; *cell* must be non-``NULL``"
" and must be a cell object."
msgstr ""
"将 cell 对象 *cell* 的值设为 *value*。 不会调整引用计数，并且不会进行检测以保证安全；*cell* 必须为非 ``NULL`` "
"并且为一个 cell 对象。"
