# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "类型对象"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr "对象的 C 结构用于描述 built-in 类型。"

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as "
":class:`type` in the Python layer."
msgstr "这是属于 type 对象的 type object，它在 Python 层面和 :class:`type` 是相同的对象。"

#: ../../c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases. "
"This function always succeeds."
msgstr "如果对象 *o* 是一个类型对象，包括派生自标准类型对象的类型实例则返回非零值。 在所有其它情况下都返回 0。 此函数将总是成功执行。"

#: ../../c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the"
" standard type object.  Return 0 in all other cases.  This function always "
"succeeds."
msgstr "如果对象 *o* 是一个类型对象，但不是标准类型对象的子类型则返回非零值。 在所有其它情况下都返回 0。 此函数将总是成功执行。"

#: ../../c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr "清空内部查找缓存。 返回当前版本标签。"

#: ../../c-api/type.rst:42
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to "
":c:member:`~PyTypeObject.tp_flags` itself is not part of the limited API."
msgstr ""
"返回 *type* 的 :c:member:`~PyTypeObject.tp_flags` 成员。 此函数主要是配合 "
"``Py_LIMITED_API`` 使用；单独的旗标位会确保在各个 Python 发布版之间保持稳定，但对 "
":c:member:`~PyTypeObject.tp_flags` 本身的访问并不是受限 API 的一部分。"

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "返回类型现在是 ``unsigned long`` 而不是 ``long``。"

#: ../../c-api/type.rst:55
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes"
" or base classes of the type."
msgstr "使该类型及其所有子类型的内部查找缓存失效。 此函数必须在对该类型的属性或基类进行任何手动修改之后调用。"

#: ../../c-api/type.rst:62
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr "如果类型对象 *o* 设置了特性 *feature* 则返回非零值。 类型特性是用单个比特位旗标来表示的。"

#: ../../c-api/type.rst:68
msgid ""
"Return true if the type object includes support for the cycle detector; this"
" tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr "如果类型对象包括对循环检测器的支持则返回真值；这会测试类型旗标 :const:`Py_TPFLAGS_HAVE_GC`。"

#: ../../c-api/type.rst:74
msgid "Return true if *a* is a subtype of *b*."
msgstr "如果 *a* 是 *b* 的子类型则返回真值。"

#: ../../c-api/type.rst:76
msgid ""
"This function only checks for actual subtypes, which means that "
":meth:`~class.__subclasscheck__` is not called on *b*.  Call "
":c:func:`PyObject_IsSubclass` to do the same check that :func:`issubclass` "
"would do."
msgstr ""
"此函数只检查实际的子类型，这意味着 :meth:`~class.__subclasscheck__` 不会在 *b* 上被调用。 请调用 "
":c:func:`PyObject_IsSubclass` 来执行与 :func:`issubclass` 所做的相同检查。"

#: ../../c-api/type.rst:84
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""
"类型对象的 :c:member:`~PyTypeObject.tp_alloc` 槽位的通用处理器。 请使用 Python "
"的默认内存分配机制来分配一个新的实例并将其所有内容初始化为 ``NULL``。"

#: ../../c-api/type.rst:90
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's "
":c:member:`~PyTypeObject.tp_alloc` slot."
msgstr ""
"类型对象的 :c:member:`~PyTypeObject.tp_new` 槽位的通用处理器。 请使用类型的 "
":c:member:`~PyTypeObject.tp_alloc` 槽位来创建一个新的实例。"

#: ../../c-api/type.rst:95
msgid ""
"Finalize a type object.  This should be called on all type objects to finish"
" their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"最终化一个类型对象。 这应当在所有类型对象上调用以完成它们的初始化。 此函数会负责从一个类型的基类添加被继承的槽位。 成功时返回 "
"``0``，或是在出错时返回 ``-1`` 并设置一个异常。"

#: ../../c-api/type.rst:101
msgid ""
"If some of the base classes implements the GC protocol and the provided type"
" does not include the :const:`Py_TPFLAGS_HAVE_GC` in its flags, then the GC "
"protocol will be automatically implemented from its parents. On the "
"contrary, if the type being created does include :const:`Py_TPFLAGS_HAVE_GC`"
" in its flags then it **must** implement the GC protocol itself by at least "
"implementing the :c:member:`~PyTypeObject.tp_traverse` handle."
msgstr ""
"如果某些基类实现了 GC 协议并且所提供的类型的旗标中未包括 :const:`Py_TPFLAGS_HAVE_GC`，则将自动从其父类实现 GC 协议。"
" 相反地，如果被创建的类型的旗标中未包括 :const:`Py_TPFLAGS_HAVE_GC` 则它 **必须** 自己通过实现 "
":c:member:`~PyTypeObject.tp_traverse` 句柄来实现 GC 协议。"

#: ../../c-api/type.rst:111
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the"
" result pointer into the appropriate function type."
msgstr ""
"返回存储在给定槽位中的函数指针。 如果结果为 ``NULL``，则表示或者该槽位为 ``NULL``，或者该函数调用传入了无效的形参。 "
"调用方通常要将结果指针转换到适当的函数类型。"

#: ../../c-api/type.rst:117
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr "请参阅 :c:member:`PyType_Slot.slot` 查看可用的 *slot* 参数值。"

#: ../../c-api/type.rst:121
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""
":c:func:`PyType_GetSlot` 现在可以接受所有类型。 在此之前，它被限制为 :ref:`堆类型 <heap-types>`。"

#: ../../c-api/type.rst:127
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr "返回当使用 :c:func:`PyType_FromModuleAndSpec` 创建类型时关联到给定类型的模块对象。"

#: ../../c-api/type.rst:130 ../../c-api/type.rst:148
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr "如果没有关联到给定类型的模块，则设置 :py:class:`TypeError` 并返回 ``NULL``。"

#: ../../c-api/type.rst:133
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may"
" not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of "
"the intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method."
msgstr ""
"此函数通常被用于获取方法定义所在的模块。 请注意在这样的方法中，``PyType_GetModule(Py_TYPE(self))`` "
"可能不会返回预期的结果。 ``Py_TYPE(self)`` 可以是目标类的一个 *子类*，而子类并不一定是在与其上级类相同的模块中定义的。 请参阅 "
":c:type:`PyCMethod` 了解如何获取方法定义所在的类。"

#: ../../c-api/type.rst:144
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of "
":c:func:`PyType_GetModule`."
msgstr ""
"返回关联到给定类型的模块对象的状态。 这是一个在 :c:func:`PyType_GetModule` 的结果上调用 "
":c:func:`PyModule_GetState()` 的快捷方式。"

#: ../../c-api/type.rst:151
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr "如果 *type* 有关联的模块但其状态为 ``NULL``，则返回 ``NULL`` 且不设置异常。"

#: ../../c-api/type.rst:158
msgid "Creating Heap-Allocated Types"
msgstr "创建堆分配类型"

#: ../../c-api/type.rst:160
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr "下列函数和结构体可被用来创建 :ref:`堆类型 <heap-types>`。"

#: ../../c-api/type.rst:165
msgid ""
"Creates and returns a :ref:`heap type <heap-types>` from the *spec* "
"(:const:`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""
"根据 *spec* (:const:`Py_TPFLAGS_HEAPTYPE`) 创建并返回一个 :ref:`堆类型 <heap-types>`。"

#: ../../c-api/type.rst:168
msgid ""
"The *bases* argument can be used to specify base classes; it can either be "
"only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type "
"derives from :class:`object`."
msgstr ""
"*bases* 参数可被用来指定基类；它可以是单个类或由多个类组成的元组。 如果 *bases* 为 ``NULL``，则会改用 "
"*Py_tp_bases* 槽位。 如果该槽位也为 ``NULL``，则会改用 *Py_tp_base* 槽位。 如果该槽位同样为 "
"``NULL``，则新类型将派生自 :class:`object`。"

#: ../../c-api/type.rst:174
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retrieved with "
":c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""
"*module* 参数可被用来记录新类定义所在的模块。 它必须是一个模块对象或为 ``NULL``。 如果不为 "
"``NULL``，则该模块会被关联到新类型并且可在之后通过 :c:func:`PyType_GetModule` 来获取。 "
"这个关联模块不可被子类继承；它必须为每个类单独指定。"

#: ../../c-api/type.rst:181
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "此函数会在新类型上调用 :c:func:`PyType_Ready`。"

#: ../../c-api/type.rst:187
msgid ""
"The function now accepts a single class as the *bases* argument and ``NULL``"
" as the ``tp_doc`` slot."
msgstr "此函数现在接受一个单独类作为 *bases* 参数并接受 ``NULL`` 作为 ``tp_doc`` 槽位。"

#: ../../c-api/type.rst:192
msgid "Equivalent to ``PyType_FromModuleAndSpec(NULL, spec, bases)``."
msgstr "等价于 ``PyType_FromModuleAndSpec(NULL, spec, bases)``。"

#: ../../c-api/type.rst:198
msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
msgstr "等价于 ``PyType_FromSpecWithBases(spec, NULL)``。"

#: ../../c-api/type.rst:202
msgid "Structure defining a type's behavior."
msgstr "定义一个类型的行为的结构体。"

#: ../../c-api/type.rst:206
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr "类型的名称，用来设置 :c:member:`PyTypeObject.tp_name`。"

#: ../../c-api/type.rst:211
msgid ""
"Size of the instance in bytes, used to set "
":c:member:`PyTypeObject.tp_basicsize` and "
":c:member:`PyTypeObject.tp_itemsize`."
msgstr ""
"以字节数表示的实例大小，用来设置 :c:member:`PyTypeObject.tp_basicsize` 和 "
":c:member:`PyTypeObject.tp_itemsize`。"

#: ../../c-api/type.rst:217
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr "类型旗标，用来设置 :c:member:`PyTypeObject.tp_flags`。"

#: ../../c-api/type.rst:219
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, "
":c:func:`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"如果未设置 ``Py_TPFLAGS_HEAPTYPE`` 旗标，则 :c:func:`PyType_FromSpecWithBases` "
"会自动设置它。"

#: ../../c-api/type.rst:224
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ":c:type:`PyType_Slot` 结构体的数组。 以特殊槽位值 ``{0, NULL}`` 来结束。"

#: ../../c-api/type.rst:229
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr "定义一个类型的可选功能的结构体，包含一个槽位 ID 和一个值指针。"

#: ../../c-api/type.rst:234
msgid "A slot ID."
msgstr "槽位 ID。"

#: ../../c-api/type.rst:236
msgid ""
"Slot IDs are named like the field names of the structures "
":c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` and "
":c:type:`PyAsyncMethods` with an added ``Py_`` prefix. For example, use:"
msgstr ""
"槽位 ID 的类名像是结构体 :c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` 和 "
":c:type:`PyAsyncMethods` 的字段名附加一个 ``Py_`` 前缀。 举例来说，使用:"

#: ../../c-api/type.rst:242
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr "``Py_tp_dealloc`` 设置 :c:member:`PyTypeObject.tp_dealloc`"

#: ../../c-api/type.rst:243
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` 设置 :c:member:`PyNumberMethods.nb_add`"

#: ../../c-api/type.rst:244
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr "``Py_sq_length`` 设置 :c:member:`PySequenceMethods.sq_length`"

#: ../../c-api/type.rst:246
msgid ""
"The following fields cannot be set at all using :c:type:`PyType_Spec` and "
":c:type:`PyType_Slot`:"
msgstr "下列字段完全无法使得 :c:type:`PyType_Spec` 和 :c:type:`PyType_Slot` 来设置:"

#: ../../c-api/type.rst:249
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: ../../c-api/type.rst:250
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ":c:member:`~PyTypeObject.tp_mro`"

#: ../../c-api/type.rst:251
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ":c:member:`~PyTypeObject.tp_cache`"

#: ../../c-api/type.rst:252
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ":c:member:`~PyTypeObject.tp_subclasses`"

#: ../../c-api/type.rst:253
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ":c:member:`~PyTypeObject.tp_weaklist`"

#: ../../c-api/type.rst:254
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ":c:member:`~PyTypeObject.tp_vectorcall`"

#: ../../c-api/type.rst:255
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (参见 :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"

#: ../../c-api/type.rst:257
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (see :ref:`PyMemberDef <pymemberdef-"
"offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_dictoffset` (参见 :ref:`PyMemberDef <pymemberdef-"
"offsets>`)"

#: ../../c-api/type.rst:259
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (参见 :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"

#: ../../c-api/type.rst:262
msgid ""
"The following fields cannot be set using :c:type:`PyType_Spec` and "
":c:type:`PyType_Slot` under the limited API:"
msgstr "下列字段在受限 API 下无法使用 :c:type:`PyType_Spec` 和 :c:type:`PyType_Slot` 来设置:"

#: ../../c-api/type.rst:265
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_getbuffer`"

#: ../../c-api/type.rst:266
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_releasebuffer`"

#: ../../c-api/type.rst:268
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of "
":py:func:`PyType_FromSpecWithBases` instead."
msgstr ""
"设置 :c:data:`Py_tp_bases` 或 :c:data:`Py_tp_base` 在某些平台上可能会有问题。 为了避免问题，请改用 "
":py:func:`PyType_FromSpecWithBases` 的 *bases* 参数。"

#: ../../c-api/type.rst:275
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr ":c:type:`PyBufferProcs` 中的槽位可能会在不受限 API 中被设置。"

#: ../../c-api/type.rst:279
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr "该槽位的预期值。 在大多数情况下，这将是一个指向函数的指针。"

#: ../../c-api/type.rst:282
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr "``Py_tp_doc`` 以外的槽位均不可为 ``NULL``。"
