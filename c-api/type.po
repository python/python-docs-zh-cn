# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Freesand Leo <yuqinju@163.com>, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "类型对象"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr "对象的 C 结构用于描述 built-in 类型。"

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as "
":class:`type` in the Python layer."
msgstr "这是属于 type 对象的 type object，它在 Python 层面和 :class:`type` 是相同的对象。"

#: ../../c-api/type.rst:24
msgid ""
"Return non-zero if the object *o* is a type object, including instances of "
"types derived from the standard type object.  Return 0 in all other cases. "
"This function always succeeds."
msgstr "如果对象 *o* 是一个类型对象，包括派生自标准类型对象的类型实例则返回非零值。 在所有其它情况下都返回 0。 此函数将总是成功执行。"

#: ../../c-api/type.rst:31
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of the"
" standard type object.  Return 0 in all other cases.  This function always "
"succeeds."
msgstr "如果对象 *o* 是一个类型对象，但不是标准类型对象的子类型则返回非零值。 在所有其它情况下都返回 0。 此函数将总是成功执行。"

#: ../../c-api/type.rst:38
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr "清空内部查找缓存。 返回当前版本标签。"

#: ../../c-api/type.rst:42
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with ``Py_LIMITED_API``; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to "
":c:member:`~PyTypeObject.tp_flags` itself is not part of the :ref:`limited "
"API <limited-c-api>`."
msgstr ""
"返回 *type* 的 :c:member:`~PyTypeObject.tp_flags` 成员。 此函数主要是配合 "
"``Py_LIMITED_API`` 使用；单独的旗标位会确保在各个 Python 发布版之间保持稳定，但对 "
":c:member:`~PyTypeObject.tp_flags` 本身的访问并不是 :ref:`受限 API <limited-c-api>` "
"的一部分。"

#: ../../c-api/type.rst:49
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "返回类型现在是 ``unsigned long`` 而不是 ``long``。"

#: ../../c-api/type.rst:55
msgid ""
"Return the type object's internal namespace, which is otherwise only exposed"
" via a read-only proxy (:attr:`cls.__dict__ <type.__dict__>`). This is a "
"replacement for accessing :c:member:`~PyTypeObject.tp_dict` directly. The "
"returned dictionary must be treated as read-only."
msgstr ""
"返回类型对象的内部命名空间，它在其他情况下只能通过只读代理 (:attr:`cls.__dict__ <type.__dict__>`) 对外公开。 "
"这可以代替直接访问 :c:member:`~PyTypeObject.tp_dict`。 返回的字典必须视为是只读的。"

#: ../../c-api/type.rst:61
msgid ""
"This function is meant for specific embedding and language-binding cases, "
"where direct access to the dict is necessary and indirect access (e.g. via "
"the proxy or :c:func:`PyObject_GetAttr`) isn't adequate."
msgstr ""
"该函数用于特定的嵌入和语言绑定场景，在这些场景下需要直接访问该字典而间接访问（例如通过代理或 :c:func:`PyObject_GetAttr` "
"访问）并不足够。"

#: ../../c-api/type.rst:65
msgid ""
"Extension modules should continue to use ``tp_dict``, directly or "
"indirectly, when setting up their own types."
msgstr "扩展模块在设置它们自己的类型时应当继续直接或间接地使用 ``tp_dict``。"

#: ../../c-api/type.rst:73
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes"
" or base classes of the type."
msgstr "使该类型及其所有子类型的内部查找缓存失效。 此函数必须在对该类型的属性或基类进行任何手动修改之后调用。"

#: ../../c-api/type.rst:80
msgid ""
"Register *callback* as a type watcher. Return a non-negative integer ID "
"which must be passed to future calls to :c:func:`PyType_Watch`. In case of "
"error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""
"注册 *callback* 作为类型监视器。 返回一个非负的整数 ID，它必须传给将来对 :c:func:`PyType_Watch` 的调用。 "
"如果出错（例如没有足够的可用监视器 ID）,则返回 ``-1`` 并设置一个异常。"

#: ../../c-api/type.rst:85
msgid ""
"In free-threaded builds, :c:func:`PyType_AddWatcher` is not thread-safe, so "
"it must be called at start up (before spawning the first thread)."
msgstr ""
"在自由线程构建版中，:c:func:`PyType_AddWatcher` 不是线程安全的，因此它必须一开始就被调用（在产生第一个线程之前）。"

#: ../../c-api/type.rst:93
msgid ""
"Clear watcher identified by *watcher_id* (previously returned from "
":c:func:`PyType_AddWatcher`). Return ``0`` on success, ``-1`` on error (e.g."
" if *watcher_id* was never registered.)"
msgstr ""
"清除由 *watcher_id* (之前从 :c:func:`PyType_AddWatcher` 返回) 所标识的 watcher。 成功时返回 "
"``0``，出错时（例如 *watcher_id* 未被注册）返回 ``-1``。"

#: ../../c-api/type.rst:97
msgid ""
"An extension should never call ``PyType_ClearWatcher`` with a *watcher_id* "
"that was not returned to it by a previous call to "
":c:func:`PyType_AddWatcher`."
msgstr ""
"扩展在调用 ``PyType_ClearWatcher`` 时绝不能使用不是之前调用 :c:func:`PyType_AddWatcher` 所返回的 "
"*watcher_id*。"

#: ../../c-api/type.rst:106
msgid ""
"Mark *type* as watched. The callback granted *watcher_id* by "
":c:func:`PyType_AddWatcher` will be called whenever "
":c:func:`PyType_Modified` reports a change to *type*. (The callback may be "
"called only once for a series of consecutive modifications to *type*, if "
":c:func:`!_PyType_Lookup` is not called on *type* between the modifications;"
" this is an implementation detail and subject to change.)"
msgstr ""
"将 *type* 标记为已监视。 每当 :c:func:`PyType_Modified` 报告 *type* 发生变化时 "
":c:func:`PyType_AddWatcher` 赋予 *watcher_id* 的回调将被调用。 （如果在 *type* "
"的一系列连续修改之间没有调用 :c:func:`!_PyType_Lookup`，则回调只能被调用一次；这是一个实现细节并可能发生变化）。"

#: ../../c-api/type.rst:113
msgid ""
"An extension should never call ``PyType_Watch`` with a *watcher_id* that was"
" not returned to it by a previous call to :c:func:`PyType_AddWatcher`."
msgstr ""
"扩展在调用 ``PyType_Watch`` 时绝不能使用不是之前调用 :c:func:`PyType_AddWatcher` 所返回的 "
"*watcher_id*。"

#: ../../c-api/type.rst:121
msgid "Type of a type-watcher callback function."
msgstr "类型监视器回调函数的类型。"

#: ../../c-api/type.rst:123
msgid ""
"The callback must not modify *type* or cause :c:func:`PyType_Modified` to be"
" called on *type* or any type in its MRO; violating this rule could cause "
"infinite recursion."
msgstr ""
"回调不可以修改 *type* 或是导致 :c:func:`PyType_Modified` 在 *type* 或其 MRO "
"中的任何类型上被调用；违反此规则可能导致无限递归。"

#: ../../c-api/type.rst:132
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr "如果类型对象 *o* 设置了特性 *feature* 则返回非零值。 类型特性是用单个比特位旗标来表示的。"

#: ../../c-api/type.rst:138
msgid ""
"Return true if the type object includes support for the cycle detector; this"
" tests the type flag :c:macro:`Py_TPFLAGS_HAVE_GC`."
msgstr "如果类型对象包括了对循环检测器的支持则返回真值；这将测试类型旗标 :c:macro:`Py_TPFLAGS_HAVE_GC`。"

#: ../../c-api/type.rst:144
msgid "Return true if *a* is a subtype of *b*."
msgstr "如果 *a* 是 *b* 的子类型则返回真值。"

#: ../../c-api/type.rst:146
msgid ""
"This function only checks for actual subtypes, which means that "
":meth:`~type.__subclasscheck__` is not called on *b*.  Call "
":c:func:`PyObject_IsSubclass` to do the same check that :func:`issubclass` "
"would do."
msgstr ""
"此函数只检查实际的子类型，这意味着 :meth:`~type.__subclasscheck__` 不会在 *b* 上被调用。 请调用 "
":c:func:`PyObject_IsSubclass` 来执行与 :func:`issubclass` 所做的相同检查。"

#: ../../c-api/type.rst:154
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to ``NULL``."
msgstr ""
"类型对象的 :c:member:`~PyTypeObject.tp_alloc` 槽位的通用处理器。 请使用 Python "
"的默认内存分配机制来分配一个新的实例并将其所有内容初始化为 ``NULL``。"

#: ../../c-api/type.rst:160
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's "
":c:member:`~PyTypeObject.tp_alloc` slot."
msgstr ""
"类型对象的 :c:member:`~PyTypeObject.tp_new` 槽位的通用处理器。 请使用类型的 "
":c:member:`~PyTypeObject.tp_alloc` 槽位来创建一个新的实例。"

#: ../../c-api/type.rst:165
msgid ""
"Finalize a type object.  This should be called on all type objects to finish"
" their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"最终化一个类型对象。 这应当在所有类型对象上调用以完成它们的初始化。 此函数会负责从一个类型的基类添加被继承的槽位。 成功时返回 "
"``0``，或是在出错时返回 ``-1`` 并设置一个异常。"

#: ../../c-api/type.rst:171
msgid ""
"If some of the base classes implements the GC protocol and the provided type"
" does not include the :c:macro:`Py_TPFLAGS_HAVE_GC` in its flags, then the "
"GC protocol will be automatically implemented from its parents. On the "
"contrary, if the type being created does include "
":c:macro:`Py_TPFLAGS_HAVE_GC` in its flags then it **must** implement the GC"
" protocol itself by at least implementing the "
":c:member:`~PyTypeObject.tp_traverse` handle."
msgstr ""
"如果某些基类实现了 GC 协议并且所提供的类型的旗标中未包括 :c:macro:`Py_TPFLAGS_HAVE_GC`，则将自动从其父类实现 GC "
"协议。 相反地，如果被创建的类型的旗标中确实包含 :c:macro:`Py_TPFLAGS_HAVE_GC` 则它 **必须** 自己实现 GC "
"协议，至少要实现 :c:member:`~PyTypeObject.tp_traverse` 句柄。"

#: ../../c-api/type.rst:181
msgid ""
"Return the type's name. Equivalent to getting the type's "
":attr:`~type.__name__` attribute."
msgstr "返回类型名称。 等同于获取类型的 :attr:`~type.__name__` 属性。"

#: ../../c-api/type.rst:188
msgid ""
"Return the type's qualified name. Equivalent to getting the type's "
":attr:`~type.__qualname__` attribute."
msgstr "返回类型的限定名称。 等同于获取类型的 :attr:`~type.__qualname__` 属性。"

#: ../../c-api/type.rst:195
msgid ""
"Return the type's fully qualified name. Equivalent to "
"``f\"{type.__module__}.{type.__qualname__}\"``, or :attr:`type.__qualname__`"
" if :attr:`type.__module__` is not a string or is equal to ``\"builtins\"``."
msgstr ""
"返回类型的完整限定名称。 等同于 ``f\"{type.__module__}.{type.__qualname__}\"``，或者如果 "
":attr:`type.__module__` 不是字符串或是等于 ``\"builtins\"`` 则等同于 "
":attr:`type.__qualname__`。"

#: ../../c-api/type.rst:203
msgid ""
"Return the type's module name. Equivalent to getting the "
":attr:`type.__module__` attribute."
msgstr "返回类型的模块名称。 等价于获取 :attr:`type.__module__` 属性。"

#: ../../c-api/type.rst:210
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast the"
" result pointer into the appropriate function type."
msgstr ""
"返回存储在给定槽位中的函数指针。 如果结果为 ``NULL``，则表示或者该槽位为 ``NULL``，或者该函数调用传入了无效的形参。 "
"调用方通常要将结果指针转换到适当的函数类型。"

#: ../../c-api/type.rst:216
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* argument."
msgstr "请参阅 :c:member:`PyType_Slot.slot` 查看可用的 *slot* 参数值。"

#: ../../c-api/type.rst:220
msgid ""
":c:func:`PyType_GetSlot` can now accept all types. Previously, it was "
"limited to :ref:`heap types <heap-types>`."
msgstr ""
":c:func:`PyType_GetSlot` 现在可以接受所有类型。 在此之前，它被限制为 :ref:`堆类型 <heap-types>`。"

#: ../../c-api/type.rst:226
msgid ""
"Return the module object associated with the given type when the type was "
"created using :c:func:`PyType_FromModuleAndSpec`."
msgstr "返回当使用 :c:func:`PyType_FromModuleAndSpec` 创建类型时关联到给定类型的模块对象。"

#: ../../c-api/type.rst:229 ../../c-api/type.rst:249
msgid ""
"If no module is associated with the given type, sets :py:class:`TypeError` "
"and returns ``NULL``."
msgstr "如果没有关联到给定类型的模块，则设置 :py:class:`TypeError` 并返回 ``NULL``。"

#: ../../c-api/type.rst:232
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` may"
" not return the intended result. ``Py_TYPE(self)`` may be a *subclass* of "
"the intended class, and subclasses are not necessarily defined in the same "
"module as their superclass. See :c:type:`PyCMethod` to get the class that "
"defines the method. See :c:func:`PyType_GetModuleByDef` for cases when "
":c:type:`!PyCMethod` cannot be used."
msgstr ""
"此函数通常被用于获取方法定义所在的模块。 请注意在这样的方法中，``PyType_GetModule(Py_TYPE(self))`` "
"可能不会返回预期的结果。 ``Py_TYPE(self)`` 可以是目标类的一个 *子类*，而子类并不一定是在与其超类相同的模块中定义的。 请参阅 "
":c:type:`PyCMethod` 了解如何获取方法定义所在的类。 请参阅 :c:func:`PyType_GetModuleByDef` "
"了解有关无法使用 :c:type:`!PyCMethod` 的情况。"

#: ../../c-api/type.rst:245
msgid ""
"Return the state of the module object associated with the given type. This "
"is a shortcut for calling :c:func:`PyModule_GetState()` on the result of "
":c:func:`PyType_GetModule`."
msgstr ""
"返回关联到给定类型的模块对象的状态。 这是一个在 :c:func:`PyType_GetModule` 的结果上调用 "
":c:func:`PyModule_GetState()` 的快捷方式。"

#: ../../c-api/type.rst:252
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns "
"``NULL`` without setting an exception."
msgstr "如果 *type* 有关联的模块但其状态为 ``NULL``，则返回 ``NULL`` 且不设置异常。"

#: ../../c-api/type.rst:259
msgid ""
"Find the first superclass whose module was created from the given "
":c:type:`PyModuleDef` *def*, and return that module."
msgstr "找到所属模块基于给定的 :c:type:`PyModuleDef` *def* 创建的第一个上级类，并返回该模块。"

#: ../../c-api/type.rst:262
msgid ""
"If no module is found, raises a :py:class:`TypeError` and returns ``NULL``."
msgstr "如果未找到模块，则会引发 :py:class:`TypeError` 并返回 ``NULL``。"

#: ../../c-api/type.rst:264
msgid ""
"This function is intended to be used together with "
":c:func:`PyModule_GetState()` to get module state from slot methods (such as"
" :c:member:`~PyTypeObject.tp_init` or :c:member:`~PyNumberMethods.nb_add`) "
"and other places where a method's defining class cannot be passed using the "
":c:type:`PyCMethod` calling convention."
msgstr ""
"此函数预期会与 :c:func:`PyModule_GetState()` 一起使用以便从槽位方法 (如 "
":c:member:`~PyTypeObject.tp_init` 或 :c:member:`~PyNumberMethods.nb_add`) "
"及其他定义方法的类无法使用 :c:type:`PyCMethod` 调用惯例来传递的场合获取模块状态。"

#: ../../c-api/type.rst:270
msgid ""
"The returned reference is :term:`borrowed <borrowed reference>` from *type*,"
" and will be valid as long as you hold a reference to *type*. Do not release"
" it with :c:func:`Py_DECREF` or similar."
msgstr ""
"返回的引用是从 *type* :term:`借入的 <borrowed reference>`，并且只要你还持有对 *type* 的引用就会保持有效。 "
"请不要通过 :c:func:`Py_DECREF` 或类似函数来释放它。"

#: ../../c-api/type.rst:278
msgid "Attempt to assign a version tag to the given type."
msgstr "尝试为给定的类型设置一个版本标签。"

#: ../../c-api/type.rst:280
msgid ""
"Returns 1 if the type already had a valid version tag or a new one was "
"assigned, or 0 if a new tag could not be assigned."
msgstr "如果类型已有合法的版本标签或已设置了新的版本标签则返回 1，或者如果无法设置新的标签则返回 0。"

#: ../../c-api/type.rst:287
msgid "Creating Heap-Allocated Types"
msgstr "创建堆分配类型"

#: ../../c-api/type.rst:289
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr "下列函数和结构体可被用来创建 :ref:`堆类型 <heap-types>`。"

#: ../../c-api/type.rst:294
msgid ""
"Create and return a :ref:`heap type <heap-types>` from the *spec* (see "
":c:macro:`Py_TPFLAGS_HEAPTYPE`)."
msgstr ""
"根据 *spec* (参见 :c:macro:`Py_TPFLAGS_HEAPTYPE`) 创建并返回一个 :ref:`堆类型 <heap-"
"types>`。"

#: ../../c-api/type.rst:297
msgid ""
"The metaclass *metaclass* is used to construct the resulting type object. "
"When *metaclass* is ``NULL``, the metaclass is derived from *bases* (or "
"*Py_tp_base[s]* slots if *bases* is ``NULL``, see below)."
msgstr ""
"元类 *metaclass* 用于构建结果类型对象。 当 *metaclass* 为 ``NULL`` 时，元类将派生自 *bases* (或者如果 "
"*bases* 为 ``NULL`` 则派生自 *Py_tp_base[s]* 槽位，见下文)。"

#: ../../c-api/type.rst:301
msgid ""
"Metaclasses that override :c:member:`~PyTypeObject.tp_new` are not "
"supported, except if ``tp_new`` is ``NULL``. (For backwards compatibility, "
"other ``PyType_From*`` functions allow such metaclasses. They ignore "
"``tp_new``, which may result in incomplete initialization. This is "
"deprecated and in Python 3.14+ such metaclasses will not be supported.)"
msgstr ""
"不支持重写 :c:member:`~PyTypeObject.tp_new` 的元类，除非 ``tp_new`` 为 ``NULL``。 "
"（为了向下兼容，其他 ``PyType_From*`` 函数允许这样的元类。 它们将忽略 ``tp_new``，可能导致不完整的初始化。 "
"这样的元类已被弃用并在 Python 3.14+ 中停止支持。）"

#: ../../c-api/type.rst:308
msgid ""
"The *bases* argument can be used to specify base classes; it can either be "
"only one class or a tuple of classes. If *bases* is ``NULL``, the "
"*Py_tp_bases* slot is used instead. If that also is ``NULL``, the "
"*Py_tp_base* slot is used instead. If that also is ``NULL``, the new type "
"derives from :class:`object`."
msgstr ""
"*bases* 参数可被用来指定基类；它可以是单个类或由多个类组成的元组。 如果 *bases* 为 ``NULL``，则会改用 "
"*Py_tp_bases* 槽位。 如果该槽位也为 ``NULL``，则会改用 *Py_tp_base* 槽位。 如果该槽位同样为 "
"``NULL``，则新类型将派生自 :class:`object`。"

#: ../../c-api/type.rst:314
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not ``NULL``, "
"the module is associated with the new type and can later be retrieved with "
":c:func:`PyType_GetModule`. The associated module is not inherited by "
"subclasses; it must be specified for each class individually."
msgstr ""
"*module* 参数可被用来记录新类定义所在的模块。 它必须是一个模块对象或为 ``NULL``。 如果不为 "
"``NULL``，则该模块会被关联到新类型并且可在之后通过 :c:func:`PyType_GetModule` 来获取。 "
"这个关联模块不可被子类继承；它必须为每个类单独指定。"

#: ../../c-api/type.rst:321
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "此函数会在新类型上调用 :c:func:`PyType_Ready`。"

#: ../../c-api/type.rst:323
msgid ""
"Note that this function does *not* fully match the behavior of calling "
":py:class:`type() <type>` or using the :keyword:`class` statement. With "
"user-provided base types or metaclasses, prefer :ref:`calling <capi-call>` "
":py:class:`type` (or the metaclass) over ``PyType_From*`` functions. "
"Specifically:"
msgstr ""
"请注意此函数 *不能* 完全匹配调用 :py:class:`type() <type>` 或使用 :keyword:`class` 语句的行为。 "
"对于用户提供的类型或元类，推荐 :ref:`调用 <capi-call>` :py:class:`type` (或元类) 而不是 "
"``PyType_From*`` 函数。 特别地:"

#: ../../c-api/type.rst:330
msgid ""
":py:meth:`~object.__new__` is not called on the new class (and it must be "
"set to ``type.__new__``)."
msgstr ":py:meth:`~object.__new__` 不会在新类上被调用 (它必须被设为 ``type.__new__``)。"

#: ../../c-api/type.rst:332
msgid ":py:meth:`~object.__init__` is not called on the new class."
msgstr ":py:meth:`~object.__init__` 不会在新类上被调用。"

#: ../../c-api/type.rst:333
msgid ":py:meth:`~object.__init_subclass__` is not called on any bases."
msgstr ":py:meth:`~object.__init_subclass__` 不会在任何基类上调用。"

#: ../../c-api/type.rst:334
msgid ":py:meth:`~object.__set_name__` is not called on new descriptors."
msgstr ":py:meth:`~object.__set_name__` 不会在新的描述器上调用。"

#: ../../c-api/type.rst:340
msgid "Equivalent to ``PyType_FromMetaclass(NULL, module, spec, bases)``."
msgstr "等价于 ``PyType_FromMetaclass(NULL, module, spec, bases)``。"

#: ../../c-api/type.rst:346
msgid ""
"The function now accepts a single class as the *bases* argument and ``NULL``"
" as the ``tp_doc`` slot."
msgstr "此函数现在接受一个单独类作为 *bases* 参数并接受 ``NULL`` 作为 ``tp_doc`` 槽位。"

#: ../../c-api/type.rst:351 ../../c-api/type.rst:368
msgid ""
"The function now finds and uses a metaclass corresponding to the provided "
"base classes.  Previously, only :class:`type` instances were returned."
msgstr "该函数现在可以找到并使用与所提供的基类相对应的元类。 在此之前，只会返回 :class:`type` 实例。"

#: ../../c-api/type.rst:354 ../../c-api/type.rst:371 ../../c-api/type.rst:387
msgid ""
"The :c:member:`~PyTypeObject.tp_new` of the metaclass is *ignored*. which "
"may result in incomplete initialization. Creating classes whose metaclass "
"overrides :c:member:`~PyTypeObject.tp_new` is deprecated and in Python 3.14+"
" it will be no longer allowed."
msgstr ""
"元类的 :c:member:`~PyTypeObject.tp_new` 将被 *忽略*。 这可能导致不完整的初始化。 创建元类重写 "
":c:member:`~PyTypeObject.tp_new` 的类的做法已被弃用并且在 Python 3.14+ 中将不再被允许。"

#: ../../c-api/type.rst:362
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, bases)``."
msgstr "等价于 ``PyType_FromMetaclass(NULL, NULL, spec, bases)``。"

#: ../../c-api/type.rst:379
msgid "Equivalent to ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``."
msgstr "等价于 ``PyType_FromMetaclass(NULL, NULL, spec, NULL)``。"

#: ../../c-api/type.rst:383
msgid ""
"The function now finds and uses a metaclass corresponding to the base "
"classes provided in *Py_tp_base[s]* slots. Previously, only :class:`type` "
"instances were returned."
msgstr ""
"该函数现在可以找到并使用与 *Py_tp_base[s]* 槽位中提供的基类相对应的元类。 在此之前，只会返回 :class:`type` 实例。"

#: ../../c-api/type.rst:404
msgid "Structure defining a type's behavior."
msgstr "定义一个类型的行为的结构体。"

#: ../../c-api/type.rst:408
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr "类型的名称，用来设置 :c:member:`PyTypeObject.tp_name`。"

#: ../../c-api/type.rst:412
msgid ""
"If positive, specifies the size of the instance in bytes. It is used to set "
":c:member:`PyTypeObject.tp_basicsize`."
msgstr "如果为正数，则以字节为单位指定实例的大小。 它用于设置 :c:member:`PyTypeObject.tp_basicsize`。"

#: ../../c-api/type.rst:415
msgid ""
"If zero, specifies that :c:member:`~PyTypeObject.tp_basicsize` should be "
"inherited."
msgstr "如果为零，则指定应当继承 :c:member:`~PyTypeObject.tp_basicsize`。"

#: ../../c-api/type.rst:418
msgid ""
"If negative, the absolute value specifies how much space instances of the "
"class need *in addition* to the superclass. Use "
":c:func:`PyObject_GetTypeData` to get a pointer to subclass-specific memory "
"reserved this way. For negative :c:member:`!basicsize`, Python will insert "
"padding when needed to meet :c:member:`~PyTypeObject.tp_basicsize`'s "
"alignment requirements."
msgstr ""
"如为负数，则以其绝对值指定该类的实例在超类的 *基础之上* 还需要多少空间。 使用 :c:func:`PyObject_GetTypeData` "
"来获取指向通过此方式保留的子类专属内存的指针。 对于负的 :c:member:`!basicsize`，Python 将在需要满足 "
":c:member:`~PyTypeObject.tp_basicsize` 的对齐要求时插入填充字节。"

#: ../../c-api/type.rst:428
msgid "Previously, this field could not be negative."
msgstr "在之前版本中，此字段不能为负数。"

#: ../../c-api/type.rst:432
msgid ""
"Size of one element of a variable-size type, in bytes. Used to set "
":c:member:`PyTypeObject.tp_itemsize`. See ``tp_itemsize`` documentation for "
"caveats."
msgstr ""
"可变大小类型中一个元素的大小，以字节为单位。 用于设置 :c:member:`PyTypeObject.tp_itemsize`。 注意事项请参阅 "
"``tp_itemsize`` 文档。"

#: ../../c-api/type.rst:436
msgid ""
"If zero, :c:member:`~PyTypeObject.tp_itemsize` is inherited. Extending "
"arbitrary variable-sized classes is dangerous, since some types use a fixed "
"offset for variable-sized memory, which can then overlap fixed-sized memory "
"used by a subclass. To help prevent mistakes, inheriting ``itemsize`` is "
"only possible in the following situations:"
msgstr ""
"如果为零，则会继承 :c:member:`~PyTypeObject.tp_itemsize`。 "
"扩展任意可变大小的类是很危险的，因为某些类型使用固定偏移量来标识可变大小的内存，这样就会与子类使用的固定大小的内存相重叠。 "
"为了防止出错，只有在以下情况下才可以继承 ``itemsize``:"

#: ../../c-api/type.rst:443
msgid ""
"The base is not variable-sized (its :c:member:`~PyTypeObject.tp_itemsize`)."
msgstr "基类不是可变大小的 (即其 :c:member:`~PyTypeObject.tp_itemsize`)。"

#: ../../c-api/type.rst:445
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is positive, suggesting that"
" the memory layout of the base class is known."
msgstr "所请求的 :c:member:`PyType_Spec.basicsize` 为正值，表明基类的内存布局是已知的。"

#: ../../c-api/type.rst:447
msgid ""
"The requested :c:member:`PyType_Spec.basicsize` is zero, suggesting that the"
" subclass does not access the instance's memory directly."
msgstr "所请求的 :c:member:`PyType_Spec.basicsize` 为零，表明子类不会直接访问实例的内存。"

#: ../../c-api/type.rst:450
msgid "With the :c:macro:`Py_TPFLAGS_ITEMS_AT_END` flag."
msgstr "具有 :c:macro:`Py_TPFLAGS_ITEMS_AT_END` 旗标。"

#: ../../c-api/type.rst:454
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr "类型旗标，用来设置 :c:member:`PyTypeObject.tp_flags`。"

#: ../../c-api/type.rst:456
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, "
":c:func:`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"如果未设置 ``Py_TPFLAGS_HEAPTYPE`` 旗标，则 :c:func:`PyType_FromSpecWithBases` "
"会自动设置它。"

#: ../../c-api/type.rst:461
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot "
"value ``{0, NULL}``."
msgstr ":c:type:`PyType_Slot` 结构体的数组。 以特殊槽位值 ``{0, NULL}`` 来结束。"

#: ../../c-api/type.rst:464
msgid "Each slot ID should be specified at most once."
msgstr "每个槽位 ID 应当只被指定一次。"

#: ../../c-api/type.rst:474
msgid ""
"Structure defining optional functionality of a type, containing a slot ID "
"and a value pointer."
msgstr "定义一个类型的可选功能的结构体，包含一个槽位 ID 和一个值指针。"

#: ../../c-api/type.rst:479
msgid "A slot ID."
msgstr "槽位 ID。"

#: ../../c-api/type.rst:481
msgid ""
"Slot IDs are named like the field names of the structures "
":c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` and "
":c:type:`PyAsyncMethods` with an added ``Py_`` prefix. For example, use:"
msgstr ""
"槽位 ID 的类名像是结构体 :c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` 和 "
":c:type:`PyAsyncMethods` 的字段名附加一个 ``Py_`` 前缀。 举例来说，使用:"

#: ../../c-api/type.rst:487
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr "``Py_tp_dealloc`` 设置 :c:member:`PyTypeObject.tp_dealloc`"

#: ../../c-api/type.rst:488
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr "``Py_nb_add`` 设置 :c:member:`PyNumberMethods.nb_add`"

#: ../../c-api/type.rst:489
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr "``Py_sq_length`` 设置 :c:member:`PySequenceMethods.sq_length`"

#: ../../c-api/type.rst:491
msgid ""
"The following “offset” fields cannot be set using :c:type:`PyType_Slot`:"
msgstr "下列 “offset” 字段不可使用 :c:type:`PyType_Slot` 来设置:"

#: ../../c-api/type.rst:493
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (use "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` instead if possible)"
msgstr ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (如果可能请改用 "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF`)"

#: ../../c-api/type.rst:495
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (use "
":c:macro:`Py_TPFLAGS_MANAGED_DICT` instead if possible)"
msgstr ""
":c:member:`~PyTypeObject.tp_dictoffset` (如果可能请改用 "
":c:macro:`Py_TPFLAGS_MANAGED_DICT`)"

#: ../../c-api/type.rst:497
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (use "
"``\"__vectorcalloffset__\"`` in :ref:`PyMemberDef <pymemberdef-offsets>`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (请使用 :ref:`PyMemberDef "
"<pymemberdef-offsets>` 中的 ``\"__vectorcalloffset__\"``)"

#: ../../c-api/type.rst:501
msgid ""
"If it is not possible to switch to a ``MANAGED`` flag (for example, for "
"vectorcall or to support Python older than 3.12), specify the offset in "
":c:member:`Py_tp_members <PyTypeObject.tp_members>`. See :ref:`PyMemberDef "
"documentation <pymemberdef-offsets>` for details."
msgstr ""
"如果无法转为 ``MANAGED`` 旗标 (例如，对于 vectorcall 或是为了支持早于 Python 3.12 的版本)，请在 "
":c:member:`Py_tp_members <PyTypeObject.tp_members>` 中指定 offset。 详情参见 "
":ref:`PyMemberDef documentation <pymemberdef-offsets>`。"

#: ../../c-api/type.rst:507
msgid "The following fields cannot be set at all when creating a heap type:"
msgstr "以下字段在创建堆类型时完全不可设置:"

#: ../../c-api/type.rst:509
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall` (use "
":c:member:`~PyTypeObject.tp_new` and/or :c:member:`~PyTypeObject.tp_init`)"
msgstr ""
":c:member:`~PyTypeObject.tp_vectorcall` (请使用 "
":c:member:`~PyTypeObject.tp_new` 和/或 :c:member:`~PyTypeObject.tp_init`)"

#: ../../c-api/type.rst:513
msgid ""
"Internal fields: :c:member:`~PyTypeObject.tp_dict`, "
":c:member:`~PyTypeObject.tp_mro`, :c:member:`~PyTypeObject.tp_cache`, "
":c:member:`~PyTypeObject.tp_subclasses`, and "
":c:member:`~PyTypeObject.tp_weaklist`."
msgstr ""
"内部字段: :c:member:`~PyTypeObject.tp_dict`, :c:member:`~PyTypeObject.tp_mro`, "
":c:member:`~PyTypeObject.tp_cache`, :c:member:`~PyTypeObject.tp_subclasses` "
"和 :c:member:`~PyTypeObject.tp_weaklist`。"

#: ../../c-api/type.rst:520
msgid ""
"Setting :c:data:`Py_tp_bases` or :c:data:`Py_tp_base` may be problematic on "
"some platforms. To avoid issues, use the *bases* argument of "
":c:func:`PyType_FromSpecWithBases` instead."
msgstr ""
"在某些平台上设置 :c:data:`Py_tp_bases` 或 :c:data:`Py_tp_base` 可能会有问题。 为了避免问题，请改用 "
":c:func:`PyType_FromSpecWithBases` 的 *bases* 参数。"

#: ../../c-api/type.rst:525
msgid "Slots in :c:type:`PyBufferProcs` may be set in the unlimited API."
msgstr ":c:type:`PyBufferProcs` 中的槽位可能会在不受限 API 中被设置。"

#: ../../c-api/type.rst:528
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and "
":c:member:`~PyBufferProcs.bf_releasebuffer` are now available under the "
":ref:`limited API <limited-c-api>`."
msgstr ""
"现在 :c:member:`~PyBufferProcs.bf_getbuffer` 和 "
":c:member:`~PyBufferProcs.bf_releasebuffer` 将在 :ref:`受限 API <limited-c-api>`"
" 中可用。"

#: ../../c-api/type.rst:535
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr "该槽位的预期值。 在大多数情况下，这将是一个指向函数的指针。"

#: ../../c-api/type.rst:538
msgid "Slots other than ``Py_tp_doc`` may not be ``NULL``."
msgstr "``Py_tp_doc`` 以外的槽位均不可为 ``NULL``。"

#: ../../c-api/type.rst:8
msgid "object"
msgstr "object -- 对象"

#: ../../c-api/type.rst:8
msgid "type"
msgstr "type"
