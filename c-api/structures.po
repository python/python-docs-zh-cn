# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/structures.rst:6
msgid "Common Object Structures"
msgstr "公用对象结构体"

#: ../../c-api/structures.rst:8
msgid ""
"There are a large number of structures which are used in the definition of "
"object types for Python.  This section describes these structures and how "
"they are used."
msgstr "大量的结构体被用于定义Python的对象类型。这一节描述了这些的结构体和它们的使用方法。"

#: ../../c-api/structures.rst:14
msgid "Base object types and macros"
msgstr "基本的对象类型和宏"

#: ../../c-api/structures.rst:16
msgid ""
"All Python objects ultimately share a small number of fields at the "
"beginning of the object's representation in memory.  These are represented "
"by the :c:type:`PyObject` and :c:type:`PyVarObject` types, which are "
"defined, in turn, by the expansions of some macros also used, whether "
"directly or indirectly, in the definition of all other Python objects."
msgstr ""
"所有的 Python 对象都在对象的内存表示的开始部分共享少量的字段。 这些字段用 :c:type:`PyObject` 或 "
":c:type:`PyVarObject` 类型来表示，这些类型又由一些宏定义，这些宏也直接或间接地用于所有其他 Python 对象的定义。"

#: ../../c-api/structures.rst:25
msgid ""
"All object types are extensions of this type.  This is a type which contains"
" the information Python needs to treat a pointer to an object as an object."
"  In a normal \"release\" build, it contains only the object's reference "
"count and a pointer to the corresponding type object. Nothing is actually "
"declared to be a :c:type:`PyObject`, but every pointer to a Python object "
"can be cast to a :c:expr:`PyObject*`.  Access to the members must be done by"
" using the macros :c:macro:`Py_REFCNT` and :c:macro:`Py_TYPE`."
msgstr ""
"所有对象类型都是此类型的扩展。 这是一个包含了 Python 将对象的指针当作对象来处理所需的信息的类型。 "
"在一个普通的“发行”编译版中，它只包含对象的引用计数和指向对应类型对象的指针。 没有什么对象被实际声明为 "
":c:type:`PyObject`，但每个指向 Python 对象的指针都可以被转换为 :c:expr:`PyObject*`。 "
"对成员的访问必须通过使用 :c:macro:`Py_REFCNT` 和 :c:macro:`Py_TYPE` 宏来完成。"

#: ../../c-api/structures.rst:37
msgid ""
"This is an extension of :c:type:`PyObject` that adds the "
":c:member:`~PyVarObject.ob_size` field.  This is only used for objects that "
"have some notion of *length*. This type does not often appear in the "
"Python/C API. Access to the members must be done by using the macros "
":c:macro:`Py_REFCNT`, :c:macro:`Py_TYPE`, and :c:macro:`Py_SIZE`."
msgstr ""
"这是一个添加了 :c:member:`~PyVarObject.ob_size` 字段的 :c:type:`PyObject` 扩展。 它仅用于具有某些"
" *长度* 标记的对象。 此类型并不经常在 Python/C API 中出现。 对成员的访问必须通过使用 :c:macro:`Py_REFCNT`, "
":c:macro:`Py_TYPE` 和 :c:macro:`Py_SIZE` 宏来完成。"

#: ../../c-api/structures.rst:46
msgid ""
"This is a macro used when declaring new types which represent objects "
"without a varying length.  The PyObject_HEAD macro expands to::"
msgstr "这是一个在声明代表无可变长度对象的新类型时所使用的宏。 PyObject_HEAD 宏被扩展为::"

#: ../../c-api/structures.rst:51
msgid "See documentation of :c:type:`PyObject` above."
msgstr "参见上面 :c:type:`PyObject` 的文档。"

#: ../../c-api/structures.rst:56
msgid ""
"This is a macro used when declaring new types which represent objects with a"
" length that varies from instance to instance. The PyObject_VAR_HEAD macro "
"expands to::"
msgstr "这是一个在声明代表每个实例具有可变长度的对象时所使用的宏。 PyObject_VAR_HEAD 宏被扩展为::"

#: ../../c-api/structures.rst:62
msgid "See documentation of :c:type:`PyVarObject` above."
msgstr "参见上面 :c:type:`PyVarObject` 的文档。"

#: ../../c-api/structures.rst:67
msgid ""
"Test if the *x* object is the *y* object, the same as ``x is y`` in Python."
msgstr "测试 *x* 是否为 *y* 对象，与 Python 中的 ``x is y`` 相同。"

#: ../../c-api/structures.rst:74
msgid ""
"Test if an object is the ``None`` singleton, the same as ``x is None`` in "
"Python."
msgstr "测试一个对象是否为 ``None`` 单例，与 Python 中的 ``x is None`` 相同。"

#: ../../c-api/structures.rst:82
msgid ""
"Test if an object is the ``True`` singleton, the same as ``x is True`` in "
"Python."
msgstr "测试一个对象是否为 ``True`` 单例，与 Python 中的 ``x is True`` 相同。"

#: ../../c-api/structures.rst:90
msgid ""
"Test if an object is the ``False`` singleton, the same as ``x is False`` in "
"Python."
msgstr "测试一个对象是否为 ``False`` 单例，与 Python 中的 ``x is False`` 相同。"

#: ../../c-api/structures.rst:98
msgid "Get the type of the Python object *o*."
msgstr "获取 Python 对象 *o* 的类型。"

#: ../../c-api/structures.rst:100
msgid "Return a :term:`borrowed reference`."
msgstr "返回一个 :term:`borrowed reference`。"

#: ../../c-api/structures.rst:102
msgid "Use the :c:func:`Py_SET_TYPE` function to set an object type."
msgstr "使用 :c:func:`Py_SET_TYPE` 函数来设置一个对象类型。"

#: ../../c-api/structures.rst:104
msgid ""
":c:func:`Py_TYPE()` is changed to an inline static function. The parameter "
"type is no longer :c:expr:`const PyObject*`."
msgstr ":c:func:`Py_TYPE()` 被改为一个内联的静态函数。 形参类型不再是 :c:expr:`const PyObject*`。"

#: ../../c-api/structures.rst:111
msgid ""
"Return non-zero if the object *o* type is *type*. Return zero otherwise. "
"Equivalent to: ``Py_TYPE(o) == type``."
msgstr "如果对象 *o* 的类型为 *type* 则返回非零值。 否则返回零。 等价于: ``Py_TYPE(o) == type``。"

#: ../../c-api/structures.rst:119
msgid "Set the object *o* type to *type*."
msgstr "将对象 *o* 的类型设为 *type*。"

#: ../../c-api/structures.rst:126
msgid "Get the reference count of the Python object *o*."
msgstr "获取 Python 对象 *o* 的引用计数。"

#: ../../c-api/structures.rst:128
msgid ""
"Use the :c:func:`Py_SET_REFCNT()` function to set an object reference count."
msgstr "使用 :c:func:`Py_SET_REFCNT()` 函数来设置一个对象引用计数。"

#: ../../c-api/structures.rst:130
msgid "The parameter type is no longer :c:expr:`const PyObject*`."
msgstr "形参类型不再是 :c:expr:`const PyObject*`。"

#: ../../c-api/structures.rst:133
msgid ":c:func:`Py_REFCNT()` is changed to the inline static function."
msgstr ":c:func:`Py_REFCNT()` 被改为内联的静态函数。"

#: ../../c-api/structures.rst:139
msgid "Set the object *o* reference counter to *refcnt*."
msgstr "将对象 *o* 的引用计数器设为 *refcnt*。"

#: ../../c-api/structures.rst:146
msgid "Get the size of the Python object *o*."
msgstr "获取 Python 对象 *o* 的大小。"

#: ../../c-api/structures.rst:148
msgid "Use the :c:func:`Py_SET_SIZE` function to set an object size."
msgstr "使用 :c:func:`Py_SET_SIZE` 函数来设置一个对象大小。"

#: ../../c-api/structures.rst:150
msgid ""
":c:func:`Py_SIZE()` is changed to an inline static function. The parameter "
"type is no longer :c:expr:`const PyVarObject*`."
msgstr ""
":c:func:`Py_SIZE()` 被改为一个内联静态函数。 形参类型不再是 :c:expr:`const PyVarObject*`。"

#: ../../c-api/structures.rst:157
msgid "Set the object *o* size to *size*."
msgstr "将对象 *o* 的大小设为 *size*。"

#: ../../c-api/structures.rst:164
msgid ""
"This is a macro which expands to initialization values for a new "
":c:type:`PyObject` type.  This macro expands to::"
msgstr "这是一个为新的 :c:type:`PyObject` 类型扩展初始化值的宏。 该宏扩展为::"

#: ../../c-api/structures.rst:173
msgid ""
"This is a macro which expands to initialization values for a new "
":c:type:`PyVarObject` type, including the :c:member:`~PyVarObject.ob_size` "
"field. This macro expands to::"
msgstr ""
"这是一个为新的 :c:type:`PyVarObject` 类型扩展初始化值的宏，包括 :c:member:`~PyVarObject.ob_size`"
" 字段。 该宏会扩展为::"

#: ../../c-api/structures.rst:182
msgid "Implementing functions and methods"
msgstr "实现函数和方法"

#: ../../c-api/structures.rst:186
msgid ""
"Type of the functions used to implement most Python callables in C. "
"Functions of this type take two :c:expr:`PyObject*` parameters and return "
"one such value.  If the return value is ``NULL``, an exception shall have "
"been set.  If not ``NULL``, the return value is interpreted as the return "
"value of the function as exposed in Python.  The function must return a new "
"reference."
msgstr ""
"用于在 C 中实现大多数 Python 可调用对象的函数类型。 该类型的函数接受两个 :c:expr:`PyObject*` 形参并返回一个这样的值。 "
"如果返回值为 ``NULL``，则将设置一个异常。 如果不为 ``NULL``，则返回值将被解读为 Python 中暴露的函数的返回值。 "
"此函数必须返回一个新的引用。"

#: ../../c-api/structures.rst:193
msgid "The function signature is::"
msgstr "函数的签名为::"

#: ../../c-api/structures.rst:200
msgid ""
"Type of the functions used to implement Python callables in C with signature"
" :ref:`METH_VARARGS | METH_KEYWORDS <METH_VARARGS-METH_KEYWORDS>`. The "
"function signature is::"
msgstr ""
"用于在 C 中实现具有 :ref:`METH_VARARGS | METH_KEYWORDS <METH_VARARGS-METH_KEYWORDS>`"
" 签名的 Python 可调用对象的函数类型。 函数的签名为::"

#: ../../c-api/structures.rst:211
msgid ""
"Type of the functions used to implement Python callables in C with signature"
" :c:macro:`METH_FASTCALL`. The function signature is::"
msgstr "用于在 C 中实现具有 :c:macro:`METH_FASTCALL` 签名的 Python 可调用对象的函数类型。 函数的签名为::"

#: ../../c-api/structures.rst:221
msgid ""
"Type of the functions used to implement Python callables in C with signature"
" :ref:`METH_FASTCALL | METH_KEYWORDS <METH_FASTCALL-METH_KEYWORDS>`. The "
"function signature is::"
msgstr ""
"用于在 C 中实现具有 :ref:`METH_FASTCALL | METH_KEYWORDS <METH_FASTCALL-"
"METH_KEYWORDS>` 签名的 Python 可调用对象的函数类型。 函数的签名为::"

#: ../../c-api/structures.rst:232
msgid ""
"Type of the functions used to implement Python callables in C with signature"
" :ref:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS <METH_METHOD-"
"METH_FASTCALL-METH_KEYWORDS>`. The function signature is::"
msgstr ""
"用于在 C 中实现具有 :ref:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS <METH_METHOD-"
"METH_FASTCALL-METH_KEYWORDS>` 签名的 Python 可调用对象的函数类型。 函数的签名为::"

#: ../../c-api/structures.rst:247
msgid ""
"Structure used to describe a method of an extension type.  This structure "
"has four fields:"
msgstr "用于描述一个扩展类型的方法的结构体。 该结构体有四个字段:"

#: ../../c-api/structures.rst:252
msgid "Name of the method."
msgstr "方法的名称。"

#: ../../c-api/structures.rst:256
msgid "Pointer to the C implementation."
msgstr "指向 C 语言实现的指针。"

#: ../../c-api/structures.rst:260
msgid "Flags bits indicating how the call should be constructed."
msgstr "指明调用应当如何构建的旗标位。"

#: ../../c-api/structures.rst:264
msgid "Points to the contents of the docstring."
msgstr "指向文档字符串的内容。"

#: ../../c-api/structures.rst:266
msgid ""
"The :c:member:`~PyMethodDef.ml_meth` is a C function pointer. The functions "
"may be of different types, but they always return :c:expr:`PyObject*`.  If "
"the function is not of the :c:type:`PyCFunction`, the compiler will require "
"a cast in the method table. Even though :c:type:`PyCFunction` defines the "
"first parameter as :c:expr:`PyObject*`, it is common that the method "
"implementation uses the specific C type of the *self* object."
msgstr ""
":c:member:`~PyMethodDef.ml_meth` 是一个 C 函数指针。 该函数可以为不同类型，但它们将总是返回 "
":c:expr:`PyObject*`。 如果该函数不属于 :c:type:`PyCFunction`，则编译器将要求在方法表中进行转换。 尽管 "
":c:type:`PyCFunction` 将第一个参数定义为 :c:expr:`PyObject*`，但该方法的实现使用 *self* 对象的特定 C"
" 类型也很常见。"

#: ../../c-api/structures.rst:274
msgid ""
"The :c:member:`~PyMethodDef.ml_flags` field is a bitfield which can include "
"the following flags. The individual flags indicate either a calling "
"convention or a binding convention."
msgstr ":c:member:`~PyMethodDef.ml_flags` 字段是可以包含以下旗标的位字段。 每个旗标表示一个调用惯例或绑定惯例。"

#: ../../c-api/structures.rst:279
msgid "There are these calling conventions:"
msgstr "调用惯例有如下这些:"

#: ../../c-api/structures.rst:283
msgid ""
"This is the typical calling convention, where the methods have the type "
":c:type:`PyCFunction`. The function expects two :c:expr:`PyObject*` values. "
"The first one is the *self* object for methods; for module functions, it is "
"the module object.  The second parameter (often called *args*) is a tuple "
"object representing all arguments. This parameter is typically processed "
"using :c:func:`PyArg_ParseTuple` or :c:func:`PyArg_UnpackTuple`."
msgstr ""
"这是典型的调用惯例，其中方法的类型为 :c:type:`PyCFunction`。 该函数接受两个 :c:expr:`PyObject*` 值。 "
"第一个是用于方法的 *self* 对象；对于模块函数，它将为模块对象。 第二个形参 (常被命名为 *args*) 是一个代表所有参数的元组对象。 "
"该形参通常是使用 :c:func:`PyArg_ParseTuple` 或 :c:func:`PyArg_UnpackTuple` 来处理的。"

#: ../../c-api/structures.rst:293
msgid ""
"Can only be used in certain combinations with other flags: "
":ref:`METH_VARARGS | METH_KEYWORDS <METH_VARARGS-METH_KEYWORDS>`, "
":ref:`METH_FASTCALL | METH_KEYWORDS <METH_FASTCALL-METH_KEYWORDS>` and "
":ref:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS <METH_METHOD-"
"METH_FASTCALL-METH_KEYWORDS>`."
msgstr ""
"只能用于同其他旗标形成特定的组合: :ref:`METH_VARARGS | METH_KEYWORDS <METH_VARARGS-"
"METH_KEYWORDS>`, :ref:`METH_FASTCALL | METH_KEYWORDS <METH_FASTCALL-"
"METH_KEYWORDS>` 和 :ref:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS "
"<METH_METHOD-METH_FASTCALL-METH_KEYWORDS>`。"

#: ../../c-api/structures.rst:307
msgid ":c:expr:`METH_VARARGS | METH_KEYWORDS`"
msgstr ":c:expr:`METH_VARARGS | METH_KEYWORDS`"

#: ../../c-api/structures.rst:302
msgid ""
"Methods with these flags must be of type :c:type:`PyCFunctionWithKeywords`. "
"The function expects three parameters: *self*, *args*, *kwargs* where "
"*kwargs* is a dictionary of all the keyword arguments or possibly ``NULL`` "
"if there are no keyword arguments.  The parameters are typically processed "
"using :c:func:`PyArg_ParseTupleAndKeywords`."
msgstr ""
"带有这些旗标的方法必须为 :c:type:`PyCFunctionWithKeywords` 类型。 该函数接受三个形参: *self*, "
"*args*, *kwargs* 其中 *kwargs* 是一个包含所有关键字参数的字典或者如果没有关键字参数则可以为 ``NULL``。 "
"这些形参通常是使用 :c:func:`PyArg_ParseTupleAndKeywords` 来处理的。"

#: ../../c-api/structures.rst:311
msgid ""
"Fast calling convention supporting only positional arguments. The methods "
"have the type :c:type:`_PyCFunctionFast`. The first parameter is *self*, the"
" second parameter is a C array of :c:expr:`PyObject*` values indicating the "
"arguments and the third parameter is the number of arguments (the length of "
"the array)."
msgstr ""
"快速调用惯例仅支持位置参数。 这些方法的类型为 :c:type:`_PyCFunctionFast`。 第一个形参为 "
"*self*，第二个形参是由表示参数的 :c:expr:`PyObject*` 值组成的数组而第三个形参是参数的数量（数组的长度）。"

#: ../../c-api/structures.rst:321
msgid "``METH_FASTCALL`` is now part of the :ref:`stable ABI <stable-abi>`."
msgstr "``METH_FASTCALL`` 现在是 :ref:`稳定 ABI <stable-abi>` 的一部分。"

#: ../../c-api/structures.rst:338
msgid ":c:expr:`METH_FASTCALL | METH_KEYWORDS`"
msgstr ":c:expr:`METH_FASTCALL | METH_KEYWORDS`"

#: ../../c-api/structures.rst:327
msgid ""
"Extension of :c:macro:`METH_FASTCALL` supporting also keyword arguments, "
"with methods of type :c:type:`_PyCFunctionFastWithKeywords`. Keyword "
"arguments are passed the same way as in the :ref:`vectorcall protocol "
"<vectorcall>`: there is an additional fourth :c:expr:`PyObject*` parameter "
"which is a tuple representing the names of the keyword arguments (which are "
"guaranteed to be strings) or possibly ``NULL`` if there are no keywords.  "
"The values of the keyword arguments are stored in the *args* array, after "
"the positional arguments."
msgstr ""
":c:macro:`METH_FASTCALL` 的扩展也支持关键字参数，它使用类型为 "
":c:type:`_PyCFunctionFastWithKeywords` 的方法。 关键字参数的传递方式与 :ref:`vectorcall 协议 "
"<vectorcall>` 中的相同：还存在额外的第四个 :c:expr:`PyObject*` "
"参数，它是一个代表关键字参数名称（它将保证为字符串）的元组，或者如果没有关键字则可以为 ``NULL``。 关键字参数的值存放在 *args* "
"数组中，在位置参数之后。"

#: ../../c-api/structures.rst:342
msgid ""
"Can only be used in the combination with other flags: :ref:`METH_METHOD | "
"METH_FASTCALL | METH_KEYWORDS <METH_METHOD-METH_FASTCALL-METH_KEYWORDS>`."
msgstr ""
"只能与其他旗标组合使用: :ref:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS <METH_METHOD-"
"METH_FASTCALL-METH_KEYWORDS>`。"

#: ../../c-api/structures.rst:359
msgid ":c:expr:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS`"
msgstr ":c:expr:`METH_METHOD | METH_FASTCALL | METH_KEYWORDS`"

#: ../../c-api/structures.rst:349
msgid ""
"Extension of :ref:`METH_FASTCALL | METH_KEYWORDS <METH_FASTCALL-"
"METH_KEYWORDS>` supporting the *defining class*, that is, the class that "
"contains the method in question. The defining class might be a superclass of"
" ``Py_TYPE(self)``."
msgstr ""
":ref:`METH_FASTCALL | METH_KEYWORDS <METH_FASTCALL-METH_KEYWORDS>` 的扩展支持 "
"*定义式类*，也就是包含相应方法的类。 定义式类可以是 ``Py_TYPE(self)`` 的超类。"

#: ../../c-api/structures.rst:354
msgid ""
"The method needs to be of type :c:type:`PyCMethod`, the same as for "
"``METH_FASTCALL | METH_KEYWORDS`` with ``defining_class`` argument added "
"after ``self``."
msgstr ""
"该方法必须为 :c:type:`PyCMethod` 类型，与在 ``self`` 之后添加了 ``defining_class`` 参数的 "
"``METH_FASTCALL | METH_KEYWORDS`` 一样。"

#: ../../c-api/structures.rst:363
msgid ""
"Methods without parameters don't need to check whether arguments are given "
"if they are listed with the :c:macro:`METH_NOARGS` flag.  They need to be of"
" type :c:type:`PyCFunction`.  The first parameter is typically named *self* "
"and will hold a reference to the module or object instance.  In all cases "
"the second parameter will be ``NULL``."
msgstr ""
"如果通过 :c:macro:`METH_NOARGS` 旗标列出了参数则没有形参的方法无需检查是否给出了参数。 它们必须为 "
":c:type:`PyCFunction` 类型。 第一个形参通常被命名为 *self* 并将持有对模块或对象实例的引用。 在所有情况下第二个形参都将为"
" ``NULL``。"

#: ../../c-api/structures.rst:369
msgid ""
"The function must have 2 parameters. Since the second parameter is unused, "
":c:macro:`Py_UNUSED` can be used to prevent a compiler warning."
msgstr "该函数必须有 2 个形参。 由于第二个形参不会被使用，:c:macro:`Py_UNUSED` 可以被用来防止编译器警告。"

#: ../../c-api/structures.rst:375
msgid ""
"Methods with a single object argument can be listed with the "
":c:macro:`METH_O` flag, instead of invoking :c:func:`PyArg_ParseTuple` with "
"a ``\"O\"`` argument. They have the type :c:type:`PyCFunction`, with the "
"*self* parameter, and a :c:expr:`PyObject*` parameter representing the "
"single argument."
msgstr ""
"具有一个单独对象参数的方法可使用 :c:macro:`METH_O` 旗标列出，而不必唤起 :c:func:`PyArg_ParseTuple` 并附带"
" ``\"O\"`` 参数。 它们的类型为 :c:type:`PyCFunction`，带有 *self* 形参，以及代表该单独参数的 "
":c:expr:`PyObject*` 形参。"

#: ../../c-api/structures.rst:381
msgid ""
"These two constants are not used to indicate the calling convention but the "
"binding when use with methods of classes.  These may not be used for "
"functions defined for modules.  At most one of these flags may be set for "
"any given method."
msgstr ""
"这两个常量不是被用来指明调用惯例而是在配合类方法使用时指明绑定。 它们不会被用于在模块上定义的函数。 对于任何给定方法这些旗标最多只会设置其中一个。"

#: ../../c-api/structures.rst:391
msgid ""
"The method will be passed the type object as the first parameter rather than"
" an instance of the type.  This is used to create *class methods*, similar "
"to what is created when using the :func:`classmethod` built-in function."
msgstr ""
"该方法将接受类型对象而不是类型的实例作为第一个形参。 它会被用于创建 *类方法*，类似于使用 :func:`classmethod` "
"内置函数所创建的结果。"

#: ../../c-api/structures.rst:401
msgid ""
"The method will be passed ``NULL`` as the first parameter rather than an "
"instance of the type.  This is used to create *static methods*, similar to "
"what is created when using the :func:`staticmethod` built-in function."
msgstr ""
"该方法将接受 ``NULL`` 而不是类型的实例作为第一个形参。 它会被用于创建 *静态方法*，类似于使用 :func:`staticmethod` "
"内置函数所创建的结果。"

#: ../../c-api/structures.rst:405
msgid ""
"One other constant controls whether a method is loaded in place of another "
"definition with the same method name."
msgstr "另一个常量控制方法是否将被载入来替代具有相同方法名的另一个定义。"

#: ../../c-api/structures.rst:411
msgid ""
"The method will be loaded in place of existing definitions.  Without "
"*METH_COEXIST*, the default is to skip repeated definitions.  Since slot "
"wrappers are loaded before the method table, the existence of a "
"*sq_contains* slot, for example, would generate a wrapped method named "
":meth:`~object.__contains__` and preclude the loading of a corresponding "
"PyCFunction with the same name.  With the flag defined, the PyCFunction will"
" be loaded in place of the wrapper object and will co-exist with the slot.  "
"This is helpful because calls to PyCFunctions are optimized more than "
"wrapper object calls."
msgstr ""
"该方法将被加载以替代现有的定义。 如果没有 *METH_COEXIST*，默认将跳过重复的定义。 由于槽位包装器会在方法表之前被加载，例如 当存在 "
"*sq_contains* 槽位时，将会生成一个名为 :meth:`~object.__contains__` 的已包装方法并阻止加载同名的相应 "
"PyCFunction。 如果定义了此旗标，PyCFunction 将被加载以替代此包装器对象并与槽位共存。 因为对 PyCFunction "
"的调用相比对包装器对象调用更为优化所以这是很有帮助的。"

#: ../../c-api/structures.rst:423
msgid ""
"Turn *ml* into a Python :term:`callable` object. The caller must ensure that"
" *ml* outlives the :term:`callable`. Typically, *ml* is defined as a static "
"variable."
msgstr ""
"将 *ml* 转为一个 Python :term:`callable` 对象。 调用方必须确保 *ml* 的生命期长于 "
":term:`callable`。 通常，*ml* 会被定义为一个静态变量。"

#: ../../c-api/structures.rst:427
msgid ""
"The *self* parameter will be passed as the *self* argument to the C function"
" in ``ml->ml_meth`` when invoked. *self* can be ``NULL``."
msgstr ""
"*self* 形参将在唤起时作为 ``ml->ml_meth`` 中 C 函数的 *self* 参数传入。 *self* 可以为 ``NULL``。"

#: ../../c-api/structures.rst:431
msgid ""
"The :term:`callable` object's ``__module__`` attribute can be set from the "
"given *module* argument. *module* should be a Python string, which will be "
"used as name of the module the function is defined in. If unavailable, it "
"can be set to :const:`None` or ``NULL``."
msgstr ""
":term:`callable` 对象的 ``__module__`` 属性可以根据给定的 *module* 参数来设置。 *module* 应为一个 "
"Python 字符串，它将被用作函数定义所在的模块名称。 如果不可用，它将被设为 :const:`None` 或 ``NULL``。"

#: ../../c-api/structures.rst:437
msgid ":attr:`function.__module__`"
msgstr ":attr:`function.__module__`"

#: ../../c-api/structures.rst:439
msgid ""
"The *cls* parameter will be passed as the *defining_class* argument to the C"
" function. Must be set if :c:macro:`METH_METHOD` is set on ``ml->ml_flags``."
msgstr ""
"*cls* 形参将被作为 C 函数的 *defining_class* 参数传入。 如果在 ``ml->ml_flags`` 上设置了 "
":c:macro:`METH_METHOD` 则必须设置该形参。"

#: ../../c-api/structures.rst:448
msgid "Equivalent to ``PyCMethod_New(ml, self, module, NULL)``."
msgstr "等价于 ``PyCMethod_New(ml, self, module, NULL)``。"

#: ../../c-api/structures.rst:453
msgid "Equivalent to ``PyCMethod_New(ml, self, NULL, NULL)``."
msgstr "等价于 ``PyCMethod_New(ml, self, NULL, NULL)``。"

#: ../../c-api/structures.rst:457
msgid "Accessing attributes of extension types"
msgstr "访问扩展类型的属性"

#: ../../c-api/structures.rst:461
msgid ""
"Structure which describes an attribute of a type which corresponds to a C "
"struct member.  Its fields are:"
msgstr "描述与某个 C 结构体成员相对应的类型的属性的结构体。 它的字段有:"

#: ../../c-api/structures.rst:465 ../../c-api/structures.rst:561
msgid "Field"
msgstr "域"

#: ../../c-api/structures.rst:465 ../../c-api/structures.rst:561
msgid "C Type"
msgstr "C 类型"

#: ../../c-api/structures.rst:465 ../../c-api/structures.rst:561
msgid "Meaning"
msgstr "含意"

#: ../../c-api/structures.rst:467
msgid ":attr:`name`"
msgstr ":attr:`name`"

#: ../../c-api/structures.rst:467 ../../c-api/structures.rst:480
#: ../../c-api/structures.rst:496 ../../c-api/structures.rst:563
#: ../../c-api/structures.rst:571
msgid "const char \\*"
msgstr "const char \\*"

#: ../../c-api/structures.rst:467
msgid "name of the member"
msgstr "成员名称"

#: ../../c-api/structures.rst:469
msgid ":attr:`!type`"
msgstr ":attr:`!type`"

#: ../../c-api/structures.rst:469 ../../c-api/structures.rst:476
#: ../../c-api/structures.rst:492
msgid "int"
msgstr "int"

#: ../../c-api/structures.rst:469
msgid "the type of the member in the C struct"
msgstr "C 结构体中成员的类型"

#: ../../c-api/structures.rst:472
msgid ":attr:`offset`"
msgstr ":attr:`offset`"

#: ../../c-api/structures.rst:472 ../../c-api/structures.rst:508
msgid "Py_ssize_t"
msgstr "Py_ssize_t"

#: ../../c-api/structures.rst:472
msgid ""
"the offset in bytes that the member is located on the type's object struct"
msgstr "成员在类型的对象结构体中所在位置的以字节表示的偏移量"

#: ../../c-api/structures.rst:476
msgid ":attr:`flags`"
msgstr ":attr:`flags`"

#: ../../c-api/structures.rst:476
msgid "flag bits indicating if the field should be read-only or writable"
msgstr "指明字段是否应为只读或可写的旗标位"

#: ../../c-api/structures.rst:480
msgid ":attr:`doc`"
msgstr ":attr:`doc`"

#: ../../c-api/structures.rst:480
msgid "points to the contents of the docstring"
msgstr "指向文档字符串的内容"

#: ../../c-api/structures.rst:484
msgid ""
":attr:`!type` can be one of many ``T_`` macros corresponding to various C "
"types.  When the member is accessed in Python, it will be converted to the "
"equivalent Python type."
msgstr ""
":attr:`!type` 可以是与各种 C 类型相对应的许多 ``T_`` 宏中的一个。 当在 Python 中访问该成员时，它将被转换为等价的 "
"Python 类型。"

#: ../../c-api/structures.rst:489
msgid "Macro name"
msgstr "宏名称"

#: ../../c-api/structures.rst:489
msgid "C type"
msgstr "C 类型"

#: ../../c-api/structures.rst:491
msgid "T_SHORT"
msgstr "T_SHORT"

#: ../../c-api/structures.rst:491
msgid "short"
msgstr "short"

#: ../../c-api/structures.rst:492
msgid "T_INT"
msgstr "T_INT"

#: ../../c-api/structures.rst:493
msgid "T_LONG"
msgstr "T_LONG"

#: ../../c-api/structures.rst:493
msgid "long"
msgstr "长整型"

#: ../../c-api/structures.rst:494
msgid "T_FLOAT"
msgstr "T_FLOAT"

#: ../../c-api/structures.rst:494
msgid "float"
msgstr "float"

#: ../../c-api/structures.rst:495
msgid "T_DOUBLE"
msgstr "T_DOUBLE"

#: ../../c-api/structures.rst:495
msgid "double"
msgstr "double"

#: ../../c-api/structures.rst:496
msgid "T_STRING"
msgstr "T_STRING"

#: ../../c-api/structures.rst:497
msgid "T_OBJECT"
msgstr "T_OBJECT"

#: ../../c-api/structures.rst:497 ../../c-api/structures.rst:498
msgid "PyObject \\*"
msgstr "PyObject \\*"

#: ../../c-api/structures.rst:498
msgid "T_OBJECT_EX"
msgstr "T_OBJECT_EX"

#: ../../c-api/structures.rst:499
msgid "T_CHAR"
msgstr "T_CHAR"

#: ../../c-api/structures.rst:499 ../../c-api/structures.rst:500
#: ../../c-api/structures.rst:505
msgid "char"
msgstr "char"

#: ../../c-api/structures.rst:500
msgid "T_BYTE"
msgstr "T_BYTE"

#: ../../c-api/structures.rst:501
msgid "T_UBYTE"
msgstr "T_UBYTE"

#: ../../c-api/structures.rst:501
msgid "unsigned char"
msgstr "unsigned char"

#: ../../c-api/structures.rst:502
msgid "T_UINT"
msgstr "T_UINT"

#: ../../c-api/structures.rst:502
msgid "unsigned int"
msgstr "unsigned int"

#: ../../c-api/structures.rst:503
msgid "T_USHORT"
msgstr "T_USHORT"

#: ../../c-api/structures.rst:503
msgid "unsigned short"
msgstr "unsigned short"

#: ../../c-api/structures.rst:504
msgid "T_ULONG"
msgstr "T_ULONG"

#: ../../c-api/structures.rst:504
msgid "unsigned long"
msgstr "unsigned long"

#: ../../c-api/structures.rst:505
msgid "T_BOOL"
msgstr "T_BOOL"

#: ../../c-api/structures.rst:506
msgid "T_LONGLONG"
msgstr "T_LONGLONG"

#: ../../c-api/structures.rst:506
msgid "long long"
msgstr "long long"

#: ../../c-api/structures.rst:507
msgid "T_ULONGLONG"
msgstr "T_ULONGLONG"

#: ../../c-api/structures.rst:507
msgid "unsigned long long"
msgstr "unsigned long long"

#: ../../c-api/structures.rst:508
msgid "T_PYSSIZET"
msgstr "T_PYSSIZET"

#: ../../c-api/structures.rst:511
msgid ""
":c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` differ in that "
":c:macro:`T_OBJECT` returns ``None`` if the member is ``NULL`` and "
":c:macro:`T_OBJECT_EX` raises an :exc:`AttributeError`.  Try to use "
":c:macro:`T_OBJECT_EX` over :c:macro:`T_OBJECT` because "
":c:macro:`T_OBJECT_EX` handles use of the :keyword:`del` statement on that "
"attribute more correctly than :c:macro:`T_OBJECT`."
msgstr ""
":c:macro:`T_OBJECT` 和 :c:macro:`T_OBJECT_EX` 的区别在于 :c:macro:`T_OBJECT` 返回 "
"``None`` 表示其成员为 ``NULL`` 并且 :c:macro:`T_OBJECT_EX` 引发了 "
":exc:`AttributeError`。 请尝试使用 :c:macro:`T_OBJECT_EX` 取代 :c:macro:`T_OBJECT` "
"因为 :c:macro:`T_OBJECT_EX` 处理在属性上使用 :keyword:`del` 语句比 :c:macro:`T_OBJECT` "
"更正确。"

#: ../../c-api/structures.rst:518
msgid ""
":attr:`flags` can be ``0`` for write and read access or :c:macro:`READONLY` "
"for read-only access.  Using :c:macro:`T_STRING` for :attr:`type` implies "
":c:macro:`READONLY`.  :c:macro:`T_STRING` data is interpreted as UTF-8. Only"
" :c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` members can be deleted.  "
"(They are set to ``NULL``)."
msgstr ""
":attr:`flags` 可以为 ``0`` 表示读写访问或 :c:macro:`READONLY` 表示只读访问。 使用 "
":c:macro:`T_STRING` 作为 :attr:`type` 表示 :c:macro:`READONLY`。 "
":c:macro:`T_STRING` 数据将被解读为 UTF-8 编码格式。 只有 :c:macro:`T_OBJECT` 和 "
":c:macro:`T_OBJECT_EX` 成员可以被删除。 (它们会被设为 ``NULL``)。"

#: ../../c-api/structures.rst:526
msgid ""
"Heap allocated types (created using :c:func:`PyType_FromSpec` or similar), "
"``PyMemberDef`` may contain definitions for the special members "
"``__dictoffset__``, ``__weaklistoffset__`` and ``__vectorcalloffset__``, "
"corresponding to :c:member:`~PyTypeObject.tp_dictoffset`, "
":c:member:`~PyTypeObject.tp_weaklistoffset` and "
":c:member:`~PyTypeObject.tp_vectorcall_offset` in type objects. These must "
"be defined with ``T_PYSSIZET`` and ``READONLY``, for example::"
msgstr ""
"堆分配类型 (使用 :c:func:`PyType_FromSpec` 或类似函数创建), ``PyMemberDef`` 可以包含特殊成员 "
"``__dictoffset__``, ``__weaklistoffset__`` 和 ``__vectorcalloffset__`` "
"的定义，对应类型对象中的 :c:member:`~PyTypeObject.tp_dictoffset`, "
":c:member:`~PyTypeObject.tp_weaklistoffset` 和 "
":c:member:`~PyTypeObject.tp_vectorcall_offset`。 它们必须使用 ``T_PYSSIZET`` 和 "
"``READONLY`` 来定义，例如::"

#: ../../c-api/structures.rst:543
msgid ""
"Get an attribute belonging to the object at address *obj_addr*.  The "
"attribute is described by ``PyMemberDef`` *m*.  Returns ``NULL`` on error."
msgstr ""
"获取属于地址Get an attribute belonging to the object at address *obj_addr* "
"上的对象的某个属性。 该属性是以 ``PyMemberDef`` *m* 来描述的。 出错时返回 ``NULL``。"

#: ../../c-api/structures.rst:550
msgid ""
"Set an attribute belonging to the object at address *obj_addr* to object "
"*o*. The attribute to set is described by ``PyMemberDef`` *m*.  Returns "
"``0`` if successful and a negative value on failure."
msgstr ""
"将属于位于地址 *obj_addr* 的对象的属性设置到对象 *o*。 要设置的属性由 ``PyMemberDef`` *m* 描述。 成功时返回 "
"``0`` 而失败时返回负值。"

#: ../../c-api/structures.rst:557
msgid ""
"Structure to define property-like access for a type. See also description of"
" the :c:member:`PyTypeObject.tp_getset` slot."
msgstr ""
"用于定义针对某个类型的特征属性式的访问的结构体。 另请参阅 :c:member:`PyTypeObject.tp_getset` 槽位的描述。"

#: ../../c-api/structures.rst:563
msgid "name"
msgstr "name"

#: ../../c-api/structures.rst:563
msgid "attribute name"
msgstr "属性名称"

#: ../../c-api/structures.rst:565
msgid "get"
msgstr "get"

#: ../../c-api/structures.rst:565
msgid "getter"
msgstr "getter"

#: ../../c-api/structures.rst:565
msgid "C function to get the attribute"
msgstr "用于获取属性的 C 函数"

#: ../../c-api/structures.rst:567
msgid "set"
msgstr "set"

#: ../../c-api/structures.rst:567
msgid "setter"
msgstr "setter"

#: ../../c-api/structures.rst:567
msgid ""
"optional C function to set or delete the attribute, if omitted the attribute"
" is readonly"
msgstr "用于设置或删除属性的可选 C 函数，如果省略则属性将为只读"

#: ../../c-api/structures.rst:571
msgid "doc"
msgstr "doc"

#: ../../c-api/structures.rst:571
msgid "optional docstring"
msgstr "可选的文档字符串"

#: ../../c-api/structures.rst:573
msgid "closure"
msgstr "closure"

#: ../../c-api/structures.rst:573
msgid "void \\*"
msgstr "void \\*"

#: ../../c-api/structures.rst:573
msgid ""
"optional user data pointer, providing additional data for getter and setter"
msgstr ""

#: ../../c-api/structures.rst:578
msgid ""
"The ``get`` function takes one :c:expr:`PyObject*` parameter (the instance) "
"and a user data pointer (the associated ``closure``)::"
msgstr ""

#: ../../c-api/structures.rst:583
msgid ""
"It should return a new reference on success or ``NULL`` with a set exception"
" on failure."
msgstr "它应当在成功时返回一个新的引用或在失败时返回 ``NULL`` 并设置异常。"

#: ../../c-api/structures.rst:586
msgid ""
"``set`` functions take two :c:expr:`PyObject*` parameters (the instance and "
"the value to be set) and a user data pointer (the associated ``closure``)::"
msgstr ""

#: ../../c-api/structures.rst:591
msgid ""
"In case the attribute should be deleted the second parameter is ``NULL``. "
"Should return ``0`` on success or ``-1`` with a set exception on failure."
msgstr "对于属性要被删除的情况第二个形参应为 ``NULL``。 成功时应返回 ``0`` 或在失败时返回 ``-1`` 并设置异常。"

#: ../../c-api/structures.rst:389 ../../c-api/structures.rst:399
msgid "built-in function"
msgstr "内置函数"

#: ../../c-api/structures.rst:389
msgid "classmethod"
msgstr "类方法"

#: ../../c-api/structures.rst:399
msgid "staticmethod"
msgstr "静态方法"
