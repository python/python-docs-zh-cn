# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:48+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "复数对象"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs,"
" and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"从C "
"API看，Python的复数对象由两个不同的部分实现：一个是在Python程序使用的Python对象，另外的是一个代表真正复数值的C结构体。API提供了函数共同操作两者。"

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "表示复数的C结构体"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr "需要注意的是接受这些结构体的作为参数并当做结果返回的函数，都是传递“值”而不是引用指针。此规则适用于整个API。"

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate."
msgstr "对应于 Python 复数对象的值部分的 C 结构体。 大部分用于处理数据对象的函数都使用该类型的结构体作为相应的输入或输出值。"

#: ../../c-api/complex.rst:33
msgid "The structure is defined as::"
msgstr "其结构定义如下："

#: ../../c-api/complex.rst:35
msgid ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"
msgstr ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"

#: ../../c-api/complex.rst:43
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "返回两个复数的和，用 C 类型 :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:49
msgid ""
"Return the difference between two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr "返回两个复数的差，用 C 类型 :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:55
msgid ""
"Return the negation of the complex number *num*, using the C "
":c:type:`Py_complex` representation."
msgstr "返回复数 *num* 的负值，用 C :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:61
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "返回两个复数的乘积，用 C 类型 :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:67
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex`"
" representation."
msgstr "返回两个复数的商，用 C 类型 :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:70
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to "
":c:macro:`!EDOM`."
msgstr "如果 *divisor* 为空，则此方法将返回零并将 :c:data:`errno` 设为 :c:macro:`!EDOM`。"

#: ../../c-api/complex.rst:76
msgid ""
"Return the exponentiation of *num* by *exp*, using the C "
":c:type:`Py_complex` representation."
msgstr "返回 *num* 的 *exp* 次幂，用 C 类型 :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:79
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:macro:`!EDOM`."
msgstr ""
"如果 *num* 为空且 *exp* 不是正实数，则此方法将返回零并将 :c:data:`errno` 设为 :c:macro:`!EDOM`。"

#: ../../c-api/complex.rst:82
msgid "Set :c:data:`errno` to :c:macro:`!ERANGE` on overflows."
msgstr "当溢出时将 :c:data:`errno` 设为 :c:macro:`!ERANGE`。"

#: ../../c-api/complex.rst:86
msgid "Complex Numbers as Python Objects"
msgstr "表示复数的Python对象"

#: ../../c-api/complex.rst:91
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number "
"object."
msgstr "这个C类型 :c:type:`PyObject` 的子类型代表一个 Python 复数对象。"

#: ../../c-api/complex.rst:96
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number"
" type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"这是个属于 :c:type:`PyTypeObject` 的代表Python复数类型的实例。在Python层面的类型 :class:`complex` "
"是同一个对象。"

#: ../../c-api/complex.rst:102
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of "
":c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"如果它的参数是一个 :c:type:`PyComplexObject` 或者 :c:type:`PyComplexObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/complex.rst:108
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"如果它的参数是一个 :c:type:`PyComplexObject` 但不是 :c:type:`PyComplexObject` 的子类型则返回真值。"
" 此函数总是会成功执行。"

#: ../../c-api/complex.rst:114
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value. Return ``NULL`` with an exception set on error."
msgstr ""
"根据一个 C :c:type:`Py_complex` 值新建 Python 复数对象。 当发生错误时将返回 ``NULL`` 并设置一个异常。"

#: ../../c-api/complex.rst:120
msgid ""
"Return a new :c:type:`PyComplexObject` object from *real* and *imag*. Return"
" ``NULL`` with an exception set on error."
msgstr ""
"根据 *real* 和 *imag* 返回一个新的 :c:type:`PyComplexObject` 对象。 当发生错误时将返回 ``NULL`` "
"并设置一个异常。"

#: ../../c-api/complex.rst:126
msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr "以 C 类型 :c:expr:`double` 返回 *op* 的实部。"

#: ../../c-api/complex.rst:128
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` is "
"not defined then it falls back to call :c:func:`PyFloat_AsDouble` and "
"returns its result."
msgstr ""
"如果 *op* 不是一个 Python 复数对象但是具有 :meth:`~object.__complex__` 方法，则会先调用该方法将 *op* "
"转换为 Python 复数对象。 如果未定义 :meth:`!__complex__` 则将回退为调用 "
":c:func:`PyFloat_AsDouble` 并返回其结果。"

#: ../../c-api/complex.rst:134 ../../c-api/complex.rst:150
msgid ""
"Upon failure, this method returns ``-1.0`` with an exception set, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"当失败时，此方法将返回 ``-1.0`` 并设置一个异常，因此开发者应当调用 :c:func:`PyErr_Occurred` 来检查错误。"

#: ../../c-api/complex.rst:137 ../../c-api/complex.rst:153
msgid "Use :meth:`~object.__complex__` if available."
msgstr "如果可能将使用 :meth:`~object.__complex__`。"

#: ../../c-api/complex.rst:142
msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr "以 C 类型 :c:expr:`double` 返回 *op* 的虚部。"

#: ../../c-api/complex.rst:144
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` is "
"not defined then it falls back to call :c:func:`PyFloat_AsDouble` and "
"returns ``0.0`` on success."
msgstr ""
"如果 *op* 不是一个 Python 复数对象但是具有 :meth:`~object.__complex__` 方法，则会先调用该方法将 *op* "
"转换为 Python 复数对象。 如果未定义 :meth:`!__complex__` 则将回退为调用 "
":c:func:`PyFloat_AsDouble` 并在成功时返回 ``0.0``。"

#: ../../c-api/complex.rst:158
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "返回复数 *op* 的C类型 :c:type:`Py_complex` 值。"

#: ../../c-api/complex.rst:160
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` is "
"not defined then it falls back to :meth:`~object.__float__`.  If "
":meth:`!__float__` is not defined then it falls back to "
":meth:`~object.__index__`."
msgstr ""
"如果 *op* 不是一个 Python 复数对象但是具有 :meth:`~object.__complex__` 方法，则会先调用该方法将 *op* "
"转换为 Python 复数对象。 如果未定义 :meth:`!__complex__` 则将回退至 :meth:`~object.__float__`。"
" 如果未定义 :meth:`!__float__` 则将回退至 :meth:`~object.__index__`。"

#: ../../c-api/complex.rst:166
msgid ""
"Upon failure, this method returns :c:type:`Py_complex` with "
":c:member:`~Py_complex.real` set to ``-1.0`` and with an exception set, so "
"one should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"当失败时，此方法将返回 :c:type:`Py_complex` 其中 :c:member:`~Py_complex.real` 为 ``-1.0`` "
"并设置一个异常，因此开发者应当调用 :c:func:`PyErr_Occurred` 来检查错误。"

#: ../../c-api/complex.rst:170
msgid "Use :meth:`~object.__index__` if available."
msgstr "如果可能将使用 :meth:`~object.__index__`。"

#: ../../c-api/complex.rst:8
msgid "object"
msgstr "object -- 对象"

#: ../../c-api/complex.rst:8
msgid "complex number"
msgstr "complex number -- 复数"
