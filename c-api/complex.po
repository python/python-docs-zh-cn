# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "复数对象"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs,"
" and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"从C "
"API看，Python的复数对象由两个不同的部分实现：一个是在Python程序使用的Python对象，另外的是一个代表真正复数值的C结构体。API提供了函数共同操作两者。"

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "表示复数的C结构体"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr "需要注意的是接受这些结构体的作为参数并当做结果返回的函数，都是传递“值”而不是引用指针。此规则适用于整个API。"

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr "这是一个对应Python复数对象的值部分的C结构体。绝大部分处理复数对象的函数都用这类型的结构体作为输入或者输出值，它可近似地定义为："

#: ../../c-api/complex.rst:39
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "返回两个复数的和，用 C 类型 :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:45
msgid ""
"Return the difference between two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr "返回两个复数的差，用 C 类型 :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:51
msgid ""
"Return the negation of the complex number *num*, using the C "
":c:type:`Py_complex` representation."
msgstr "返回复数 *num* 的负值，用 C :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:57
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "返回两个复数的乘积，用 C 类型 :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:63
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex`"
" representation."
msgstr "返回两个复数的商，用 C 类型 :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:66
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to "
":c:data:`EDOM`."
msgstr "如果 *divisor* 为空，这个方法返回零并设置 :c:data:`errno` 为 :c:data:`EDOM`。"

#: ../../c-api/complex.rst:72
msgid ""
"Return the exponentiation of *num* by *exp*, using the C "
":c:type:`Py_complex` representation."
msgstr "返回 *num* 的 *exp* 次幂，用 C 类型 :c:type:`Py_complex` 表示。"

#: ../../c-api/complex.rst:75
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr "如果 *num* 为空且 *exp* 不是正实数，这个方法返回零并设置 :c:data:`errno` 为 :c:data:`EDOM`。"

#: ../../c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr "表示复数的Python对象"

#: ../../c-api/complex.rst:85
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number "
"object."
msgstr "这个C类型 :c:type:`PyObject` 的子类型代表一个 Python 复数对象。"

#: ../../c-api/complex.rst:90
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number"
" type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"这是个属于 :c:type:`PyTypeObject` 的代表Python复数类型的实例。在Python层面的类型 :class:`complex` "
"是同一个对象。"

#: ../../c-api/complex.rst:96
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of "
":c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"如果它的参数是一个 :c:type:`PyComplexObject` 或者 :c:type:`PyComplexObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/complex.rst:102
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"如果它的参数是一个 :c:type:`PyComplexObject` 但不是 :c:type:`PyComplexObject` 的子类型则返回真值。"
" 此函数总是会成功执行。"

#: ../../c-api/complex.rst:108
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr "根据C类型 :c:type:`Py_complex` 的值生成一个新的Python复数对象。"

#: ../../c-api/complex.rst:113
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr "根据 *real* 和 *imag* 返回一个新的C类型 :c:type:`PyComplexObject` 对象。"

#: ../../c-api/complex.rst:118
msgid "Return the real part of *op* as a C :c:type:`double`."
msgstr "以C类型 :c:type:`double` 返回 *op* 的实部。"

#: ../../c-api/complex.rst:123
msgid "Return the imaginary part of *op* as a C :c:type:`double`."
msgstr "以C类型 :c:type:`double` 返回 *op* 的虚部。"

#: ../../c-api/complex.rst:128
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "返回复数 *op* 的C类型 :c:type:`Py_complex` 值。"

#: ../../c-api/complex.rst:130
msgid ""
"If *op* is not a Python complex number object but has a :meth:`__complex__` "
"method, this method will first be called to convert *op* to a Python complex"
" number object.  If ``__complex__()`` is not defined then it falls back to "
":meth:`__float__`.  If ``__float__()`` is not defined then it falls back to "
":meth:`__index__`.  Upon failure, this method returns ``-1.0`` as a real "
"value."
msgstr ""
"如果 *op* 不是一个 Python 复数对象，但是具有 :meth:`__complex__` 方法，此方法将首先被调用，将 *op* 转换为一个 "
"Python 复数对象。 如果 ``__complex__()`` 未定义则将回退至 :meth:`__float__`，如果 "
"``__float__()`` 未定义则将回退至 :meth:`__index__`。 如果失败，此方法将返回 ``-1.0`` 作为实数值。"

#: ../../c-api/complex.rst:137
msgid "Use :meth:`__index__` if available."
msgstr "如果可用将使用 :meth:`__index__`。"
