# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/typehints.rst:6
msgid "Objects for Type Hinting"
msgstr ""

#: ../../c-api/typehints.rst:8
msgid ""
"Various built-in types for type hinting are provided.  Currently, two types "
"exist -- :ref:`GenericAlias <types-genericalias>` and :ref:`Union <types-"
"union>`.  Only ``GenericAlias`` is exposed to C."
msgstr ""

#: ../../c-api/typehints.rst:14
msgid ""
"Create a :ref:`GenericAlias <types-genericalias>` object. Equivalent to "
"calling the Python class :class:`types.GenericAlias`.  The *origin* and "
"*args* arguments set the ``GenericAlias``\\ 's ``__origin__`` and "
"``__args__`` attributes respectively. *origin* should be a "
":c:expr:`PyTypeObject*`, and *args* can be a :c:expr:`PyTupleObject*` or any"
" ``PyObject*``.  If *args* passed is not a tuple, a 1-tuple is automatically"
" constructed and ``__args__`` is set to ``(args,)``. Minimal checking is "
"done for the arguments, so the function will succeed even if *origin* is not"
" a type. The ``GenericAlias``\\ 's ``__parameters__`` attribute is "
"constructed lazily from ``__args__``.  On failure, an exception is raised "
"and ``NULL`` is returned."
msgstr ""

#: ../../c-api/typehints.rst:28
msgid "Here's an example of how to make an extension type generic::"
msgstr ""

#: ../../c-api/typehints.rst:38
msgid "The data model method :meth:`~object.__class_getitem__`."
msgstr ""

#: ../../c-api/typehints.rst:44
msgid ""
"The C type of the object returned by :c:func:`Py_GenericAlias`. Equivalent "
"to :class:`types.GenericAlias` in Python."
msgstr ""
