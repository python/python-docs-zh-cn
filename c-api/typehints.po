# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/typehints.rst:6
msgid "Objects for Type Hinting"
msgstr "类型注解对象"

#: ../../c-api/typehints.rst:8
msgid ""
"Various built-in types for type hinting are provided.  Currently, two types "
"exist -- :ref:`GenericAlias <types-genericalias>` and :ref:`Union <types-"
"union>`.  Only ``GenericAlias`` is exposed to C."
msgstr ""
"提供几种用于类型提示的内置类型。 目前存在两种类型 -- :ref:`GenericAlias <types-genericalias>` 和 "
":ref:`Union <types-union>`。 只有 ``GenericAlias`` 会向 C 开放。"

#: ../../c-api/typehints.rst:14
msgid ""
"Create a :ref:`GenericAlias <types-genericalias>` object. Equivalent to "
"calling the Python class :class:`types.GenericAlias`.  The *origin* and "
"*args* arguments set the ``GenericAlias``\\ 's ``__origin__`` and "
"``__args__`` attributes respectively. *origin* should be a "
":c:expr:`PyTypeObject*`, and *args* can be a :c:expr:`PyTupleObject*` or any"
" ``PyObject*``.  If *args* passed is not a tuple, a 1-tuple is automatically"
" constructed and ``__args__`` is set to ``(args,)``. Minimal checking is "
"done for the arguments, so the function will succeed even if *origin* is not"
" a type. The ``GenericAlias``\\ 's ``__parameters__`` attribute is "
"constructed lazily from ``__args__``.  On failure, an exception is raised "
"and ``NULL`` is returned."
msgstr ""
"创建一个 :ref:`GenericAlias <types-genericalias>` 对象。 相当于调用 Python 类 "
":class:`types.GenericAlias`。 参数 *origin* 和 *args* 分别设置 ``GenericAlias`` 的 "
"``__origin__`` 和 ``__args__`` 属性。 *origin* 应该是一个 :c:expr:`PyTypeObject*`，而 "
"*args* 可以是一个 :c:expr:`PyTupleObject*` 或者任意 ``PyObject*``。 如果传递的 *args* "
"不是一个元组，则会自动构造一个单元组并将 ``__args__`` 设置为 ``(args,)``。 对参数进行了最小限度的检查，因此即使 "
"*origin* 不是类型函数也会成功。 ``GenericAlias`` 的 ``__parameters__`` 属性是从 ``__args__``"
" 懒加载的。 如果失败，则会引发一个异常并返回 ``NULL``。"

#: ../../c-api/typehints.rst:28
msgid "Here's an example of how to make an extension type generic::"
msgstr "下面是一个如何创建一个扩展类型泛型的例子::"

#: ../../c-api/typehints.rst:38
msgid "The data model method :meth:`~object.__class_getitem__`."
msgstr "数据模型方法 :meth:`~object.__class_getitem__`。"

#: ../../c-api/typehints.rst:44
msgid ""
"The C type of the object returned by :c:func:`Py_GenericAlias`. Equivalent "
"to :class:`types.GenericAlias` in Python."
msgstr ""
"由 :c:func:`Py_GenericAlias` 所返回的对象的 C 类型。等价于 Python 中的 "
":class:`types.GenericAlias` 。"
