# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "弱引用对象"

#: ../../c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python 支持 “弱引用” 作为一类对象。具体来说，有两种直接实现弱引用的对象。第一种就是简单的引用对象，第二种尽可能地作用为一个原对象的代理。"

#: ../../c-api/weakref.rst:16
msgid ""
"Return true if *ob* is either a reference or proxy object.  This function "
"always succeeds."
msgstr "如果 *ob* 是一个引用或代理对象则返回真值。 此函数总是会成功执行。"

#: ../../c-api/weakref.rst:22
msgid ""
"Return true if *ob* is a reference object.  This function always succeeds."
msgstr "如果 *ob* 是一个引用对象则返回真值。 此函数总是会成功执行。"

#: ../../c-api/weakref.rst:27
msgid "Return true if *ob* is a proxy object.  This function always succeeds."
msgstr "如果 *ob* 是一个代理对象则返回真值。 此函数总是会成功执行。"

#: ../../c-api/weakref.rst:32
msgid ""
"Return a weak reference object for the object *ob*.  This will always return"
" a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected;"
" it should accept a single parameter, which will be the weak reference "
"object itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not "
"a weakly-referencable object, or if *callback* is not callable, ``None``, or"
" ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"返回对象 *ob* 的一个弱引用对象。 该函数总是会返回一个新引用，但不保证创建一个新的对象；它有可能返回一个现有的引用对象。 第二个形参 "
"*callback* 为一个可调用对象，它会在 *ob* 被作为垃圾回收时接收通知；它应该接受一个单独形参，即弱引用对象本身。 *callback* "
"也可以为 ``None`` 或 ``NULL``。 如果 *ob* 不是一个弱引用对象，或者如果 *callback* 不是可调用对象，``None``"
" 或 ``NULL``，该函数将返回 ``NULL`` 并且引发 :exc:`TypeError`。"

#: ../../c-api/weakref.rst:44
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly-referencable object, or if *callback* is not callable, "
"``None``, or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"返回对象 *ob* 的一个弱引用代理对象。 该函数将总是返回一个新的引用，但不保证创建一个新的对象；它有可能返回一个现有的代理对象。 第二个形参 "
"*callback* 为一个可调用对象，它会在 *ob* 被作为垃圾回收时接收通知；它应该接受一个单独形参，即弱引用对象本身。 *callback* "
"也可以为 ``None`` 或 ``NULL``。 如果 *ob* 不是一个弱引用对象，或者如果 *callback* 不是可调用对象，``None``"
" 或 ``NULL``，该函数将返回 ``NULL`` 并且引发 :exc:`TypeError`。"

#: ../../c-api/weakref.rst:56
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the referent "
"is no longer live, returns :const:`Py_None`."
msgstr "返回弱引用对象 ref 的被引用对象。如果被引用对象不再存在，则返回 :const:`Py_None`。"

#: ../../c-api/weakref.rst:61
msgid ""
"This function returns a **borrowed reference** to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except if you know that it cannot be destroyed while you are still using it."
msgstr ""
"该函数返回被引用对象的一个**借来的引用**。这意味着除非你很清楚在你使用期间这个对象不可能被销毁，否则你应该始终对该对象调用 "
":c:func:`Py_INCREF`。"

#: ../../c-api/weakref.rst:69
msgid ""
"Similar to :c:func:`PyWeakref_GetObject`, but implemented as a macro that "
"does no error checking."
msgstr "类似 :c:func:`PyWeakref_GetObject`，但实现为一个不做类型检查的宏。"
