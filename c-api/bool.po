# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/bool.rst:6
msgid "Boolean Objects"
msgstr ""

#: ../../c-api/bool.rst:8
msgid ""
"Booleans in Python are implemented as a subclass of integers.  There are "
"only two booleans, :const:`Py_False` and :const:`Py_True`.  As such, the "
"normal creation and deletion functions don't apply to booleans.  The "
"following macros are available, however."
msgstr ""

#: ../../c-api/bool.rst:16
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python boolean type; "
"it is the same object as :class:`bool` in the Python layer."
msgstr ""

#: ../../c-api/bool.rst:22
msgid ""
"Return true if *o* is of type :c:data:`PyBool_Type`.  This function always "
"succeeds."
msgstr ""

#: ../../c-api/bool.rst:28
msgid ""
"The Python ``False`` object.  This object has no methods.  It needs to be "
"treated just like any other object with respect to reference counts."
msgstr ""

#: ../../c-api/bool.rst:34
msgid ""
"The Python ``True`` object.  This object has no methods.  It needs to be "
"treated just like any other object with respect to reference counts."
msgstr ""

#: ../../c-api/bool.rst:40
msgid ""
"Return :const:`Py_False` from a function, properly incrementing its "
"reference count."
msgstr ""

#: ../../c-api/bool.rst:46
msgid ""
"Return :const:`Py_True` from a function, properly incrementing its reference"
" count."
msgstr ""

#: ../../c-api/bool.rst:52
msgid ""
"Return a new reference to :const:`Py_True` or :const:`Py_False` depending on"
" the truth value of *v*."
msgstr ""
