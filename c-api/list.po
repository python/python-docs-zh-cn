# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:48+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/list.rst:6
msgid "List Objects"
msgstr "列表对象"

#: ../../c-api/list.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python list object."
msgstr "这个C类型 :c:type:`PyObject` 的子类型代表一个Python列表对象。"

#: ../../c-api/list.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python list type. "
"This is the same object as :class:`list` in the Python layer."
msgstr ""
"这是个属于 :c:type:`PyTypeObject` 的代表Python列表类型的实例。在Python层面和类型 :class:`list` "
"是同一个对象。"

#: ../../c-api/list.rst:24
msgid ""
"Return true if *p* is a list object or an instance of a subtype of the list "
"type.  This function always succeeds."
msgstr "如果 *p* 是一个 list 对象或者 list 类型的子类型的实例则返回真值。 此函数总是会成功执行。"

#: ../../c-api/list.rst:30
msgid ""
"Return true if *p* is a list object, but not an instance of a subtype of the"
" list type.  This function always succeeds."
msgstr "如果 *p* 是一个 list 对象但不是 list 类型的子类型的实例则返回真值。 此函数总是会成功执行。"

#: ../../c-api/list.rst:36
msgid "Return a new list of length *len* on success, or ``NULL`` on failure."
msgstr "成功时返回一个长度为 *len* 的新列表，失败时返回 ``NULL``。"

#: ../../c-api/list.rst:40
msgid ""
"If *len* is greater than zero, the returned list object's items are set to "
"``NULL``. Thus you cannot use abstract API functions such as "
":c:func:`PySequence_SetItem` or expose the object to Python code before "
"setting all items to a real object with :c:func:`PyList_SetItem` or "
":c:func:`PyList_SET_ITEM()`. The following APIs are safe APIs before the "
"list is fully initialized: :c:func:`PyList_SetItem()` and "
":c:func:`PyList_SET_ITEM()`."
msgstr ""
"当 *len* 大于零时，被返回的列表对象的条目将被设为 ``NULL``。 因此你不能使用抽象 API 函数如 "
":c:func:`PySequence_SetItem` 或者在使用 :c:func:`PyList_SetItem` 或 "
":c:func:`PyList_SET_ITEM()` 将所有条目设为真实对象之前将对象暴露给 Python 代码。 以下 API "
"在该列表完全初始化之前将是安全的 API: :c:func:`PyList_SetItem()` 和 "
":c:func:`PyList_SET_ITEM()`。"

#: ../../c-api/list.rst:53
msgid ""
"Return the length of the list object in *list*; this is equivalent to "
"``len(list)`` on a list object."
msgstr "返回 *list* 中列表对象的长度；这等于在列表对象调用 ``len(list)`` 。"

#: ../../c-api/list.rst:59
msgid "Similar to :c:func:`PyList_Size`, but without error checking."
msgstr "类似于 :c:func:`PyList_Size`，但是不带错误检测。"

#: ../../c-api/list.rst:64
msgid ""
"Return the object at position *index* in the list pointed to by *list*.  The"
" position must be non-negative; indexing from the end of the list is not "
"supported.  If *index* is out of bounds (:code:`<0 or >=len(list)`), return "
"``NULL`` and set an :exc:`IndexError` exception."
msgstr ""
"返回 *list* 所指向的列表中 *index* 位置上的对象。 位置值必须为非负数；不支持从列表末尾反向索引。 如果 *index* 超出范围 "
"(:code:`<0 or >=len(list)`)，则返回 ``NULL`` 并设置 :exc:`IndexError` 异常。"

#: ../../c-api/list.rst:74
msgid ""
"Like :c:func:`PyList_GetItemRef`, but returns a :term:`borrowed reference` "
"instead of a :term:`strong reference`."
msgstr ""
"类似于 :c:func:`PyList_GetItemRef`，但返回一个 :term:`borrowed reference` 而不是 "
":term:`strong reference`。"

#: ../../c-api/list.rst:80
msgid "Similar to :c:func:`PyList_GetItem`, but without error checking."
msgstr "类似于 :c:func:`PyList_GetItem`，但是不带错误检测。"

#: ../../c-api/list.rst:85
msgid ""
"Set the item at index *index* in list to *item*.  Return ``0`` on success. "
"If *index* is out of bounds, return ``-1`` and set an :exc:`IndexError` "
"exception."
msgstr ""
"将列表中索引为 *index* 的项设为 *item*。 成功时返回 ``0``。 如果 *index* 超出范围则返回 ``-1`` 并设定 "
":exc:`IndexError` 异常。"

#: ../../c-api/list.rst:91
msgid ""
"This function \"steals\" a reference to *item* and discards a reference to "
"an item already in the list at the affected position."
msgstr "此函数会“偷走”一个对 *item* 的引用并丢弃一个对列表中受影响位置上的已有条目的引用。"

#: ../../c-api/list.rst:97
msgid ""
"Macro form of :c:func:`PyList_SetItem` without error checking. This is "
"normally only used to fill in new lists where there is no previous content."
msgstr "不带错误检测的宏版本 :c:func:`PyList_SetItem`。 这通常只被用于新列表中之前没有内容的位置进行填充。"

#: ../../c-api/list.rst:100
msgid ""
"Bounds checking is performed as an assertion if Python is built in "
":ref:`debug mode <debug-build>` or :option:`with assertions <--with-"
"assertions>`."
msgstr ""
"当 Python 以 :ref:`调试模式 <debug-build>` 或 :option:`启用断言 <--with-assertions>` "
"构建时将把绑定检测作为断言来执行。"

#: ../../c-api/list.rst:106
msgid ""
"This macro \"steals\" a reference to *item*, and, unlike "
":c:func:`PyList_SetItem`, does *not* discard a reference to any item that is"
" being replaced; any reference in *list* at position *i* will be leaked."
msgstr ""
"该宏会“偷走”一个对 *item* 的引用，但与 :c:func:`PyList_SetItem` 不同的是它 *不会* 丢弃对任何被替换条目的引用；在"
" *list* 的 *i* 位置上的任何引用都将被泄露。"

#: ../../c-api/list.rst:114
msgid ""
"Insert the item *item* into list *list* in front of index *index*.  Return "
"``0`` if successful; return ``-1`` and set an exception if unsuccessful. "
"Analogous to ``list.insert(index, item)``."
msgstr ""
"将条目 *item* 插入到列表 *list* 索引号 *index* 之前的位置。 如果成功将返回 ``0``；如果不成功则返回 ``-1`` "
"并设置一个异常。 相当于 ``list.insert(index, item)``。"

#: ../../c-api/list.rst:121
msgid ""
"Append the object *item* at the end of list *list*. Return ``0`` if "
"successful; return ``-1`` and set an exception if unsuccessful.  Analogous "
"to ``list.append(item)``."
msgstr ""
"将对象 *item* 添加到列表 *list* 的末尾。 如果成功将返回 ``0``；如果不成功则返回 ``-1`` 并设置一个异常。 相当于 "
"``list.append(item)``。"

#: ../../c-api/list.rst:128
msgid ""
"Return a list of the objects in *list* containing the objects *between* "
"*low* and *high*.  Return ``NULL`` and set an exception if unsuccessful.  "
"Analogous to ``list[low:high]``.  Indexing from the end of the list is not "
"supported."
msgstr ""
"返回一个对象列表，包含 *list* 当中位于 *low* 和 *high* *之间* 的对象。 如果不成功则返回 ``NULL`` 并设置异常。 "
"相当于 ``list[low:high]``。 不支持从列表末尾进行索引。"

#: ../../c-api/list.rst:135
msgid ""
"Set the slice of *list* between *low* and *high* to the contents of "
"*itemlist*.  Analogous to ``list[low:high] = itemlist``. The *itemlist* may "
"be ``NULL``, indicating the assignment of an empty list (slice deletion). "
"Return ``0`` on success, ``-1`` on failure.  Indexing from the end of the "
"list is not supported."
msgstr ""
"将 *list* 当中 *low* 与 *high* 之间的切片设为 *itemlist* 的内容。 相当于 ``list[low:high] = "
"itemlist``。 *itemlist* 可以为 ``NULL``，表示赋值为一个空列表（删除切片）。 成功时返回 ``0``，失败时返回 "
"``-1``。 这里不支持从列表末尾进行索引。"

#: ../../c-api/list.rst:144
msgid ""
"Extend *list* with the contents of *iterable*.  This is the same as "
"``PyList_SetSlice(list, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, iterable)`` and "
"analogous to ``list.extend(iterable)`` or ``list += iterable``."
msgstr ""
"使用 *iterable* 的内容扩展 *list*。 这与 ``PyList_SetSlice(list, PY_SSIZE_T_MAX, "
"PY_SSIZE_T_MAX, iterable)`` 相同并与 ``list.extend(iterable)`` 或 ``list += "
"iterable`` 类似。"

#: ../../c-api/list.rst:148
msgid ""
"Raise an exception and return ``-1`` if *list* is not a :class:`list` "
"object. Return 0 on success."
msgstr "如果 *list* 不是 :class:`list` 对象则会引发异常并返回 ``-1``。 成功时返回 0。"

#: ../../c-api/list.rst:156
msgid ""
"Remove all items from *list*.  This is the same as ``PyList_SetSlice(list, "
"0, PY_SSIZE_T_MAX, NULL)`` and analogous to ``list.clear()`` or ``del "
"list[:]``."
msgstr ""
"从 *list* 移除所有条目。 这与 ``PyList_SetSlice(list, 0, PY_SSIZE_T_MAX, NULL)`` 相同并与 "
"``list.clear()`` 或 ``del list[:]`` 类似。"

#: ../../c-api/list.rst:160
msgid ""
"Raise an exception and return ``-1`` if *list* is not a :class:`list` "
"object.  Return 0 on success."
msgstr "如果 *list* 不是 :class:`list` 对象则会引发异常并返回 ``-1``。 成功时返回 0。"

#: ../../c-api/list.rst:168
msgid ""
"Sort the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is equivalent to ``list.sort()``."
msgstr "对 *list* 中的条目进行原地排序。 成功时返回 ``0``，失败时返回 ``-1``。 这等价于 ``list.sort()``。"

#: ../../c-api/list.rst:174
msgid ""
"Reverse the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is the equivalent of ``list.reverse()``."
msgstr ""
"对 *list* 中的条目进行原地反转。 成功时返回 ``0``，失败时返回 ``-1``。 这等价于 ``list.reverse()``。"

#: ../../c-api/list.rst:182
msgid ""
"Return a new tuple object containing the contents of *list*; equivalent to "
"``tuple(list)``."
msgstr "返回一个新的元组对象，其中包含 *list* 的内容；等价于 ``tuple(list)``。"

#: ../../c-api/list.rst:8
msgid "object"
msgstr "object -- 对象"

#: ../../c-api/list.rst:8
msgid "list"
msgstr "list"

#: ../../c-api/list.rst:51 ../../c-api/list.rst:180
msgid "built-in function"
msgstr "内置函数"

#: ../../c-api/list.rst:51
msgid "len"
msgstr "len"

#: ../../c-api/list.rst:180
msgid "tuple"
msgstr "元组"
