# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/conversion.rst:6
msgid "String conversion and formatting"
msgstr ""

#: ../../c-api/conversion.rst:8
msgid "Functions for number conversion and formatted string output."
msgstr ""

#: ../../c-api/conversion.rst:13
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the extra arguments. See the Unix man page "
":manpage:`snprintf(3)`."
msgstr ""

#: ../../c-api/conversion.rst:19
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the variable argument list *va*. Unix man page "
":manpage:`vsnprintf(3)`."
msgstr ""

#: ../../c-api/conversion.rst:23
msgid ""
":c:func:`PyOS_snprintf` and :c:func:`PyOS_vsnprintf` wrap the Standard C "
"library functions :c:func:`snprintf` and :c:func:`vsnprintf`. Their purpose "
"is to guarantee consistent behavior in corner cases, which the Standard C "
"functions do not."
msgstr ""

#: ../../c-api/conversion.rst:28
msgid ""
"The wrappers ensure that ``str[size-1]`` is always ``'\\0'`` upon return. "
"They never write more than *size* bytes (including the trailing ``'\\0'``) "
"into str. Both functions require that ``str != NULL``, ``size > 0``, "
"``format != NULL`` and ``size < INT_MAX``. Note that this means there is no "
"equivalent to the C99 ``n = snprintf(NULL, 0, ...)`` which would determine "
"the necessary buffer size."
msgstr ""

#: ../../c-api/conversion.rst:34
msgid ""
"The return value (*rv*) for these functions should be interpreted as "
"follows:"
msgstr ""

#: ../../c-api/conversion.rst:36
msgid ""
"When ``0 <= rv < size``, the output conversion was successful and *rv* "
"characters were written to *str* (excluding the trailing ``'\\0'`` byte at "
"``str[rv]``)."
msgstr ""

#: ../../c-api/conversion.rst:40
msgid ""
"When ``rv >= size``, the output conversion was truncated and a buffer with "
"``rv + 1`` bytes would have been needed to succeed. ``str[size-1]`` is "
"``'\\0'`` in this case."
msgstr ""

#: ../../c-api/conversion.rst:44
msgid ""
"When ``rv < 0``, \"something bad happened.\" ``str[size-1]`` is ``'\\0'`` in"
" this case too, but the rest of *str* is undefined. The exact cause of the "
"error depends on the underlying platform."
msgstr ""

#: ../../c-api/conversion.rst:49
msgid ""
"The following functions provide locale-independent string to number "
"conversions."
msgstr ""

#: ../../c-api/conversion.rst:53
msgid ""
"Convert the initial part of the string in ``str`` to an :c:expr:`unsigned "
"long` value according to the given ``base``, which must be between ``2`` and"
" ``36`` inclusive, or be the special value ``0``."
msgstr ""

#: ../../c-api/conversion.rst:57
msgid ""
"Leading white space and case of characters are ignored.  If ``base`` is zero"
" it looks for a leading ``0b``, ``0o`` or ``0x`` to tell which base.  If "
"these are absent it defaults to ``10``.  Base must be 0 or between 2 and 36 "
"(inclusive).  If ``ptr`` is non-``NULL`` it will contain a pointer to the "
"end of the scan."
msgstr ""

#: ../../c-api/conversion.rst:63
msgid ""
"If the converted value falls out of range of corresponding return type, "
"range error occurs (:c:data:`errno` is set to :c:macro:`!ERANGE`) and "
":c:macro:`!ULONG_MAX` is returned.  If no conversion can be performed, ``0``"
" is returned."
msgstr ""

#: ../../c-api/conversion.rst:68
msgid "See also the Unix man page :manpage:`strtoul(3)`."
msgstr ""

#: ../../c-api/conversion.rst:75
msgid ""
"Convert the initial part of the string in ``str`` to an :c:expr:`long` value"
" according to the given ``base``, which must be between ``2`` and ``36`` "
"inclusive, or be the special value ``0``."
msgstr ""

#: ../../c-api/conversion.rst:79
msgid ""
"Same as :c:func:`PyOS_strtoul`, but return a :c:expr:`long` value instead "
"and :c:macro:`LONG_MAX` on overflows."
msgstr ""

#: ../../c-api/conversion.rst:82
msgid "See also the Unix man page :manpage:`strtol(3)`."
msgstr ""

#: ../../c-api/conversion.rst:89
msgid ""
"Convert a string ``s`` to a :c:expr:`double`, raising a Python exception on "
"failure.  The set of accepted strings corresponds to the set of strings "
"accepted by Python's :func:`float` constructor, except that ``s`` must not "
"have leading or trailing whitespace. The conversion is independent of the "
"current locale."
msgstr ""

#: ../../c-api/conversion.rst:95
msgid ""
"If ``endptr`` is ``NULL``, convert the whole string.  Raise "
":exc:`ValueError` and return ``-1.0`` if the string is not a valid "
"representation of a floating-point number."
msgstr ""

#: ../../c-api/conversion.rst:99
msgid ""
"If endptr is not ``NULL``, convert as much of the string as possible and set"
" ``*endptr`` to point to the first unconverted character.  If no initial "
"segment of the string is the valid representation of a floating-point "
"number, set ``*endptr`` to point to the beginning of the string, raise "
"ValueError, and return ``-1.0``."
msgstr ""

#: ../../c-api/conversion.rst:106
msgid ""
"If ``s`` represents a value that is too large to store in a float (for "
"example, ``\"1e500\"`` is such a string on many platforms) then if "
"``overflow_exception`` is ``NULL`` return ``Py_HUGE_VAL`` (with an "
"appropriate sign) and don't set any exception.  Otherwise, "
"``overflow_exception`` must point to a Python exception object; raise that "
"exception and return ``-1.0``.  In both cases, set ``*endptr`` to point to "
"the first character after the converted value."
msgstr ""

#: ../../c-api/conversion.rst:114
msgid ""
"If any other error occurs during the conversion (for example an out-of-"
"memory error), set the appropriate Python exception and return ``-1.0``."
msgstr ""

#: ../../c-api/conversion.rst:123
msgid ""
"Convert a :c:expr:`double` *val* to a string using supplied *format_code*, "
"*precision*, and *flags*."
msgstr ""

#: ../../c-api/conversion.rst:126
msgid ""
"*format_code* must be one of ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, "
"``'G'`` or ``'r'``.  For ``'r'``, the supplied *precision* must be 0 and is "
"ignored.  The ``'r'`` format code specifies the standard :func:`repr` "
"format."
msgstr ""

#: ../../c-api/conversion.rst:131
msgid ""
"*flags* can be zero or more of the values ``Py_DTSF_SIGN``, "
"``Py_DTSF_ADD_DOT_0``, or ``Py_DTSF_ALT``, or-ed together:"
msgstr ""

#: ../../c-api/conversion.rst:134
msgid ""
"``Py_DTSF_SIGN`` means to always precede the returned string with a sign "
"character, even if *val* is non-negative."
msgstr ""

#: ../../c-api/conversion.rst:137
msgid ""
"``Py_DTSF_ADD_DOT_0`` means to ensure that the returned string will not look"
" like an integer."
msgstr ""

#: ../../c-api/conversion.rst:140
msgid ""
"``Py_DTSF_ALT`` means to apply \"alternate\" formatting rules.  See the "
"documentation for the :c:func:`PyOS_snprintf` ``'#'`` specifier for details."
msgstr ""

#: ../../c-api/conversion.rst:144
msgid ""
"If *ptype* is non-``NULL``, then the value it points to will be set to one "
"of ``Py_DTST_FINITE``, ``Py_DTST_INFINITE``, or ``Py_DTST_NAN``, signifying "
"that *val* is a finite number, an infinite number, or not a number, "
"respectively."
msgstr ""

#: ../../c-api/conversion.rst:148
msgid ""
"The return value is a pointer to *buffer* with the converted string or "
"``NULL`` if the conversion failed. The caller is responsible for freeing the"
" returned string by calling :c:func:`PyMem_Free`."
msgstr ""

#: ../../c-api/conversion.rst:157
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`!strcmp` except that it ignores the case."
msgstr ""

#: ../../c-api/conversion.rst:163
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`!strncmp` except that it ignores the case."
msgstr ""
