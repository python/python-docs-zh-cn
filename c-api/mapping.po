# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:57+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/mapping.rst:6
msgid "Mapping Protocol"
msgstr "映射协议"

#: ../../c-api/mapping.rst:8
msgid ""
"See also :c:func:`PyObject_GetItem`, :c:func:`PyObject_SetItem` and "
":c:func:`PyObject_DelItem`."
msgstr ""
"参见 :c:func:`PyObject_GetItem`、:c:func:`PyObject_SetItem` 与 "
":c:func:`PyObject_DelItem`。"

#: ../../c-api/mapping.rst:14
msgid ""
"Return ``1`` if the object provides the mapping protocol or supports "
"slicing, and ``0`` otherwise.  Note that it returns ``1`` for Python classes"
" with a :meth:`~object.__getitem__` method, since in general it is "
"impossible to determine what type of keys the class supports. This function "
"always succeeds."
msgstr ""
"如果对象提供了映射协议或是支持切片则返回 ``1``，否则返回 ``0``。 请注意它将为具有 :meth:`~object.__getitem__` "
"方法的 Python 类返回 ``1``，因为在通常情况下无法确定该类支持哪种键类型。 此函数总是会成功执行。"

#: ../../c-api/mapping.rst:25
msgid ""
"Returns the number of keys in object *o* on success, and ``-1`` on failure. "
"This is equivalent to the Python expression ``len(o)``."
msgstr "成功时返回对象 *o* 中键的数量，失败时返回 ``-1``。 这相当于 Python 表达式 ``len(o)``。"

#: ../../c-api/mapping.rst:31
msgid ""
"This is the same as :c:func:`PyObject_GetItem`, but *key* is specified as a "
":c:expr:`const char*` UTF-8 encoded bytes string, rather than a "
":c:expr:`PyObject*`."
msgstr ""
"这与 :c:func:`PyObject_GetItem` 相同，但 *key* 被指定为 :c:expr:`const char*` UTF-8 "
"编码的字节串，而不是 :c:expr:`PyObject*`。"

#: ../../c-api/mapping.rst:38
msgid ""
"This is the same as :c:func:`PyObject_SetItem`, but *key* is specified as a "
":c:expr:`const char*` UTF-8 encoded bytes string, rather than a "
":c:expr:`PyObject*`."
msgstr ""
"这与 :c:func:`PyObject_SetItem` 相同，但 *key* 被指定为 :c:expr:`const char*` UTF-8 "
"编码的字节串，而不是 :c:expr:`PyObject*`。"

#: ../../c-api/mapping.rst:45
msgid "This is an alias of :c:func:`PyObject_DelItem`."
msgstr "这是 :c:func:`PyObject_DelItem` 的一个别名。"

#: ../../c-api/mapping.rst:50
msgid ""
"This is the same as :c:func:`PyObject_DelItem`, but *key* is specified as a "
":c:expr:`const char*` UTF-8 encoded bytes string, rather than a "
":c:expr:`PyObject*`."
msgstr ""
"这与 :c:func:`PyObject_DelItem` 相同，但 *key* 被指定为 :c:expr:`const char*` UTF-8 "
"编码的字节串，而不是 :c:expr:`PyObject*`。"

#: ../../c-api/mapping.rst:57
msgid ""
"Return ``1`` if the mapping object has the key *key* and ``0`` otherwise. "
"This is equivalent to the Python expression ``key in o``. This function "
"always succeeds."
msgstr ""
"如果映射对象具有键 *key* 则返回 ``1``，否则返回 ``0``。 这相当于 Python 表达式 ``key in o``。 "
"此函数总是会成功执行。"

#: ../../c-api/mapping.rst:63
msgid ""
"Exceptions which occur when this calls :meth:`~object.__getitem__` method "
"are silently ignored. For proper error handling, use "
":c:func:`PyObject_GetItem()` instead."
msgstr ""
"在调用 :meth:`~object.__getitem__` 方法时发生的异常将被静默地忽略。 想要进行适当的错误处理，请改用 "
":c:func:`PyObject_GetItem()`。"

#: ../../c-api/mapping.rst:70
msgid ""
"This is the same as :c:func:`PyMapping_HasKey`, but *key* is specified as a "
":c:expr:`const char*` UTF-8 encoded bytes string, rather than a "
":c:expr:`PyObject*`."
msgstr ""
"这与 :c:func:`PyMapping_HasKey` 相同，但 *key* 被指定为 :c:expr:`const char*` UTF-8 "
"编码的字节串，而不是 :c:expr:`PyObject*`。"

#: ../../c-api/mapping.rst:76
msgid ""
"Exceptions that occur when this calls :meth:`~object.__getitem__` method or "
"while creating the temporary :class:`str` object are silently ignored. For "
"proper error handling, use :c:func:`PyMapping_GetItemString` instead."
msgstr ""
"在调用 :meth:`~object.__getitem__` 方法或创建临时 :class:`str` 对象时发生的异常将被忽略。 "
"想要进行适当的错误处理，请改用 :c:func:`PyMapping_GetItemString`。"

#: ../../c-api/mapping.rst:84
msgid ""
"On success, return a list of the keys in object *o*.  On failure, return "
"``NULL``."
msgstr "成功时，返回对象 *o* 中的键的列表。 失败时，返回 ``NULL``。"

#: ../../c-api/mapping.rst:87 ../../c-api/mapping.rst:96
#: ../../c-api/mapping.rst:105
msgid "Previously, the function returned a list or a tuple."
msgstr "在之前版本中，此函数返回一个列表或元组。"

#: ../../c-api/mapping.rst:93
msgid ""
"On success, return a list of the values in object *o*.  On failure, return "
"``NULL``."
msgstr "成功时，返回对象 *o* 中的值的列表。 失败时，返回 ``NULL``。"

#: ../../c-api/mapping.rst:102
msgid ""
"On success, return a list of the items in object *o*, where each item is a "
"tuple containing a key-value pair.  On failure, return ``NULL``."
msgstr "成功时，返回对象 *o* 中条目的列表，其中每个条目是一个包含键值对的元组。 失败时，返回 ``NULL``。"

#: ../../c-api/mapping.rst:23
msgid "built-in function"
msgstr "内置函数"

#: ../../c-api/mapping.rst:23
msgid "len"
msgstr "len"
