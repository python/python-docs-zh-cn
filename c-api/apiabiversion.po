# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# my c <70075349@qq.com>, 2021
# Alpha Du <alphanow@gmail.com>, 2025
# ppcfish <ppcfish@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-04 14:20+0000\n"
"PO-Revision-Date: 2021-06-28 00:47+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/apiabiversion.rst:7
msgid "API and ABI Versioning"
msgstr "API 和 ABI 版本管理"

#: ../../c-api/apiabiversion.rst:11
msgid "Build-time version constants"
msgstr "构建时版本常量"

#: ../../c-api/apiabiversion.rst:13
msgid ""
"CPython exposes its version number in the following macros. Note that these "
"correspond to the version code is **built** with. See :c:var:`Py_Version` "
"for the version used at **run time**."
msgstr ""
"CPython 在下列宏中公开其版本号。 请注意这对应于 **构建** 所用的版本代码。 请查看 :c:var:`Py_Version` 获取在 "
"**运行时** 所用的版本。"

#: ../../c-api/apiabiversion.rst:17
msgid ""
"See :ref:`stable` for a discussion of API and ABI stability across versions."
msgstr "请参阅 :ref:`stable` 查看跨版本的 API 和 ABI 稳定情。"

#: ../../c-api/apiabiversion.rst:21
msgid "The ``3`` in ``3.4.1a2``."
msgstr "``3`` (``3.4.1a2`` 中的第一段)。"

#: ../../c-api/apiabiversion.rst:25
msgid "The ``4`` in ``3.4.1a2``."
msgstr "``4`` (``3.4.1a2`` 中的第二段)。"

#: ../../c-api/apiabiversion.rst:29
msgid "The ``1`` in ``3.4.1a2``."
msgstr "``1`` (``3.4.1a2`` 中第三段的数字)。"

#: ../../c-api/apiabiversion.rst:33
msgid ""
"The ``a`` in ``3.4.1a2``. This can be ``0xA`` for alpha, ``0xB`` for beta, "
"``0xC`` for release candidate or ``0xF`` for final."
msgstr ""
"``a`` (``3.4.1a2`` 中第3段的字母)。 可能为 ``0xA`` 即 alpha, ``0xB`` 即 beta, ``0xC`` 即 "
"release candidate 或 ``0xF`` 即 final。"

#: ../../c-api/apiabiversion.rst:39
msgid "The ``2`` in ``3.4.1a2``. Zero for final releases."
msgstr "``2`` (``3.4.1a2`` 中的末尾数字)。 零代表最终发布版。"

#: ../../c-api/apiabiversion.rst:43
msgid ""
"The Python version number encoded in a single integer. See "
":c:func:`Py_PACK_FULL_VERSION` for the encoding details."
msgstr "Python 版本号被编码为一个整数。 请查看 :c:func:`Py_PACK_FULL_VERSION` 了解编码细节。"

#: ../../c-api/apiabiversion.rst:46
msgid ""
"Use this for numeric comparisons, for example, ``#if PY_VERSION_HEX >= "
"...``."
msgstr "可将其用于数字比较，例如 ``#if PY_VERSION_HEX >= ...``。"

#: ../../c-api/apiabiversion.rst:51
msgid "Run-time version"
msgstr "运行时版本"

#: ../../c-api/apiabiversion.rst:55
msgid ""
"The Python runtime version number encoded in a single constant integer. See "
":c:func:`Py_PACK_FULL_VERSION` for the encoding details. This contains the "
"Python version used at run time."
msgstr ""
"Python 运行时版本号被编码为一个整数常量。 请查看 :c:func:`Py_PACK_FULL_VERSION` 了解编码细节。 "
"这包含了在运行时使用的 Python 版本。"

#: ../../c-api/apiabiversion.rst:59
msgid ""
"Use this for numeric comparisons, for example, ``if (Py_Version >= ...)``."
msgstr "可将其用于数字比较，例如 ``if (Py_Version >= ...)``。"

#: ../../c-api/apiabiversion.rst:65
msgid "Bit-packing macros"
msgstr "比特位打包宏"

#: ../../c-api/apiabiversion.rst:69
msgid ""
"Return the given version, encoded as a single 32-bit integer with the "
"following structure:"
msgstr "返回给定的版本，编码为一个具有如下结构的 32 位整数："

#: ../../c-api/apiabiversion.rst:75
msgid "Argument"
msgstr "参数"

#: ../../c-api/apiabiversion.rst:73
msgid "No. of bits"
msgstr "位编号"

#: ../../c-api/apiabiversion.rst:75
msgid "Bit mask"
msgstr "位掩码"

#: ../../c-api/apiabiversion.rst:75
msgid "Bit shift"
msgstr "位移"

#: ../../c-api/apiabiversion.rst:73
msgid "Example values"
msgstr "示例值"

#: ../../c-api/apiabiversion.rst:75 ../../c-api/apiabiversion.rst:93
msgid "``3.4.1a2``"
msgstr "``3.4.1a2``"

#: ../../c-api/apiabiversion.rst:75 ../../c-api/apiabiversion.rst:95
msgid "``3.10.0``"
msgstr "``3.10.0``"

#: ../../c-api/apiabiversion.rst:77
msgid "*major*"
msgstr "*major*"

#: ../../c-api/apiabiversion.rst:77 ../../c-api/apiabiversion.rst:79
#: ../../c-api/apiabiversion.rst:81
msgid "8"
msgstr "8"

#: ../../c-api/apiabiversion.rst:77
msgid "``0xFF000000``"
msgstr "``0xFF000000``"

#: ../../c-api/apiabiversion.rst:77
msgid "24"
msgstr "24"

#: ../../c-api/apiabiversion.rst:77
msgid "``0x03``"
msgstr "``0x03``"

#: ../../c-api/apiabiversion.rst:79
msgid "*minor*"
msgstr "*minor*"

#: ../../c-api/apiabiversion.rst:79
msgid "``0x00FF0000``"
msgstr "``0x00FF0000``"

#: ../../c-api/apiabiversion.rst:79
msgid "16"
msgstr "16"

#: ../../c-api/apiabiversion.rst:79
msgid "``0x04``"
msgstr "``0x04``"

#: ../../c-api/apiabiversion.rst:79
msgid "``0x0A``"
msgstr "``0x0A``"

#: ../../c-api/apiabiversion.rst:81
msgid "*micro*"
msgstr "*micro*"

#: ../../c-api/apiabiversion.rst:81
msgid "``0x0000FF00``"
msgstr "``0x0000FF00``"

#: ../../c-api/apiabiversion.rst:81
msgid "``0x01``"
msgstr "``0x01``"

#: ../../c-api/apiabiversion.rst:81
msgid "``0x00``"
msgstr "``0x00``"

#: ../../c-api/apiabiversion.rst:83
msgid "*release_level*"
msgstr "*release_level*"

#: ../../c-api/apiabiversion.rst:83 ../../c-api/apiabiversion.rst:85
msgid "4"
msgstr "4"

#: ../../c-api/apiabiversion.rst:83
msgid "``0x000000F0``"
msgstr "``0x000000F0``"

#: ../../c-api/apiabiversion.rst:83
msgid "``0xA``"
msgstr "``0xA``"

#: ../../c-api/apiabiversion.rst:83
msgid "``0xF``"
msgstr "``0xF``"

#: ../../c-api/apiabiversion.rst:85
msgid "*release_serial*"
msgstr "*release_serial*"

#: ../../c-api/apiabiversion.rst:85
msgid "``0x0000000F``"
msgstr "``0x0000000F``"

#: ../../c-api/apiabiversion.rst:85
msgid "0"
msgstr "0"

#: ../../c-api/apiabiversion.rst:85
msgid "``0x2``"
msgstr "``0x2``"

#: ../../c-api/apiabiversion.rst:85
msgid "``0x0``"
msgstr "``0x0``"

#: ../../c-api/apiabiversion.rst:88
msgid "For example:"
msgstr "例如:"

#: ../../c-api/apiabiversion.rst:91
msgid "Version"
msgstr "版本"

#: ../../c-api/apiabiversion.rst:91
msgid "``Py_PACK_FULL_VERSION`` arguments"
msgstr "``Py_PACK_FULL_VERSION`` 参数"

#: ../../c-api/apiabiversion.rst:91
msgid "Encoded version"
msgstr "已编码版本"

#: ../../c-api/apiabiversion.rst:93
msgid "``(3, 4, 1, 0xA, 2)``"
msgstr "``(3, 4, 1, 0xA, 2)``"

#: ../../c-api/apiabiversion.rst:93
msgid "``0x030401a2``"
msgstr "``0x030401a2``"

#: ../../c-api/apiabiversion.rst:95
msgid "``(3, 10, 0, 0xF, 0)``"
msgstr "``(3, 10, 0, 0xF, 0)``"

#: ../../c-api/apiabiversion.rst:95
msgid "``0x030a00f0``"
msgstr "``0x030a00f0``"

#: ../../c-api/apiabiversion.rst:98
msgid ""
"Out-of range bits in the arguments are ignored. That is, the macro can be "
"defined as:"
msgstr "参数中超范围的比特位将被忽略。 也就是说，该宏可以被定义为："

#: ../../c-api/apiabiversion.rst:101
msgid ""
"#ifndef Py_PACK_FULL_VERSION\n"
"#define Py_PACK_FULL_VERSION(X, Y, Z, LEVEL, SERIAL) ( \\\n"
"   (((X) & 0xff) << 24) |                              \\\n"
"   (((Y) & 0xff) << 16) |                              \\\n"
"   (((Z) & 0xff) << 8) |                               \\\n"
"   (((LEVEL) & 0xf) << 4) |                            \\\n"
"   (((SERIAL) & 0xf) << 0))\n"
"#endif"
msgstr ""
"#ifndef Py_PACK_FULL_VERSION\n"
"#define Py_PACK_FULL_VERSION(X, Y, Z, LEVEL, SERIAL) ( \\\n"
"   (((X) & 0xff) << 24) |                              \\\n"
"   (((Y) & 0xff) << 16) |                              \\\n"
"   (((Z) & 0xff) << 8) |                               \\\n"
"   (((LEVEL) & 0xf) << 4) |                            \\\n"
"   (((SERIAL) & 0xf) << 0))\n"
"#endif"

#: ../../c-api/apiabiversion.rst:112
msgid ""
"``Py_PACK_FULL_VERSION`` is primarily a macro, intended for use in ``#if`` "
"directives, but it is also available as an exported function."
msgstr "``Py_PACK_FULL_VERSION`` 本质上是一个宏，主要在 ``#if`` 指令中使用，但也可作为导出的函数使用。"

#: ../../c-api/apiabiversion.rst:119
msgid ""
"Equivalent to ``Py_PACK_FULL_VERSION(major, minor, 0, 0, 0)``. The result "
"does not correspond to any Python release, but is useful in numeric "
"comparisons."
msgstr ""
"等价于 ``Py_PACK_FULL_VERSION(major, minor, 0, 0, 0)``。 其结果不与任何 Python "
"发布版对应，但在数字比较中很有用处。"
