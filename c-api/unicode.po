# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/unicode.rst:6
msgid "Unicode Objects and Codecs"
msgstr ""

#: ../../c-api/unicode.rst:12
msgid "Unicode Objects"
msgstr ""

#: ../../c-api/unicode.rst:14
msgid ""
"Since the implementation of :pep:`393` in Python 3.3, Unicode objects "
"internally use a variety of representations, in order to allow handling the "
"complete range of Unicode characters while staying memory efficient.  There "
"are special cases for strings where all code points are below 128, 256, or "
"65536; otherwise, code points must be below 1114112 (which is the full "
"Unicode range)."
msgstr ""

#: ../../c-api/unicode.rst:20
msgid ""
":c:expr:`Py_UNICODE*` and UTF-8 representations are created on demand and "
"cached in the Unicode object.  The :c:expr:`Py_UNICODE*` representation is "
"deprecated and inefficient."
msgstr ""

#: ../../c-api/unicode.rst:24
msgid ""
"Due to the transition between the old APIs and the new APIs, Unicode objects"
" can internally be in two states depending on how they were created:"
msgstr ""

#: ../../c-api/unicode.rst:27
msgid ""
"\"canonical\" Unicode objects are all objects created by a non-deprecated "
"Unicode API.  They use the most efficient representation allowed by the "
"implementation."
msgstr ""

#: ../../c-api/unicode.rst:31
msgid ""
"\"legacy\" Unicode objects have been created through one of the deprecated "
"APIs (typically :c:func:`PyUnicode_FromUnicode`) and only bear the "
":c:expr:`Py_UNICODE*` representation; you will have to call "
":c:func:`PyUnicode_READY` on them before calling any other API."
msgstr ""

#: ../../c-api/unicode.rst:37
msgid ""
"The \"legacy\" Unicode object will be removed in Python 3.12 with deprecated"
" APIs. All Unicode objects will be \"canonical\" since then. See :pep:`623` "
"for more information."
msgstr ""

#: ../../c-api/unicode.rst:43
msgid "Unicode Type"
msgstr ""

#: ../../c-api/unicode.rst:45
msgid ""
"These are the basic Unicode object types used for the Unicode implementation"
" in Python:"
msgstr ""

#: ../../c-api/unicode.rst:52
msgid ""
"These types are typedefs for unsigned integer types wide enough to contain "
"characters of 32 bits, 16 bits and 8 bits, respectively.  When dealing with "
"single Unicode characters, use :c:type:`Py_UCS4`."
msgstr ""

#: ../../c-api/unicode.rst:61
msgid ""
"This is a typedef of :c:type:`wchar_t`, which is a 16-bit type or 32-bit "
"type depending on the platform."
msgstr ""

#: ../../c-api/unicode.rst:64
msgid ""
"In previous versions, this was a 16-bit type or a 32-bit type depending on "
"whether you selected a \"narrow\" or \"wide\" Unicode version of Python at "
"build time."
msgstr ""

#: ../../c-api/unicode.rst:74
msgid ""
"These subtypes of :c:type:`PyObject` represent a Python Unicode object.  In "
"almost all cases, they shouldn't be used directly, since all API functions "
"that deal with Unicode objects take and return :c:type:`PyObject` pointers."
msgstr ""

#: ../../c-api/unicode.rst:83
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python Unicode type."
"  It is exposed to Python code as ``str``."
msgstr ""

#: ../../c-api/unicode.rst:87
msgid ""
"The following APIs are C macros and static inlined functions for fast checks"
" and access to internal read-only data of Unicode objects:"
msgstr ""

#: ../../c-api/unicode.rst:92
msgid ""
"Return true if the object *obj* is a Unicode object or an instance of a "
"Unicode subtype.  This function always succeeds."
msgstr ""

#: ../../c-api/unicode.rst:98
msgid ""
"Return true if the object *obj* is a Unicode object, but not an instance of "
"a subtype.  This function always succeeds."
msgstr ""

#: ../../c-api/unicode.rst:104
msgid ""
"Ensure the string object *o* is in the \"canonical\" representation.  This "
"is required before using any of the access macros described below."
msgstr ""

#: ../../c-api/unicode.rst:109
msgid ""
"Returns ``0`` on success and ``-1`` with an exception set on failure, which "
"in particular happens if memory allocation fails."
msgstr ""

#: ../../c-api/unicode.rst:115
msgid "This API will be removed with :c:func:`PyUnicode_FromUnicode`."
msgstr ""

#: ../../c-api/unicode.rst:120
msgid ""
"Return the length of the Unicode string, in code points.  *unicode* has to "
"be a Unicode object in the \"canonical\" representation (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:130
msgid ""
"Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 "
"integer types for direct character access.  No checks are performed if the "
"canonical representation has the correct character size; use "
":c:func:`PyUnicode_KIND` to select the right macro.  Make sure "
":c:func:`PyUnicode_READY` has been called before accessing this."
msgstr ""

#: ../../c-api/unicode.rst:144
msgid "Return values of the :c:func:`PyUnicode_KIND` macro."
msgstr ""

#: ../../c-api/unicode.rst:149
msgid "``PyUnicode_WCHAR_KIND`` is deprecated."
msgstr ""

#: ../../c-api/unicode.rst:154
msgid ""
"Return one of the PyUnicode kind constants (see above) that indicate how "
"many bytes per character this Unicode object uses to store its data.  "
"*unicode* has to be a Unicode object in the \"canonical\" representation "
"(not checked)."
msgstr ""

#: ../../c-api/unicode.rst:165
msgid ""
"Return a void pointer to the raw Unicode buffer.  *unicode* has to be a "
"Unicode object in the \"canonical\" representation (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:174
msgid ""
"Write into a canonical representation *data* (as obtained with "
":c:func:`PyUnicode_DATA`).  This function performs no sanity checks, and is "
"intended for usage in loops.  The caller should cache the *kind* value and "
"*data* pointer as obtained from other calls.  *index* is the index in the "
"string (starts at 0) and *value* is the new code point value which should be"
" written to that location."
msgstr ""

#: ../../c-api/unicode.rst:187
msgid ""
"Read a code point from a canonical representation *data* (as obtained with "
":c:func:`PyUnicode_DATA`).  No checks or ready calls are performed."
msgstr ""

#: ../../c-api/unicode.rst:195
msgid ""
"Read a character from a Unicode object *unicode*, which must be in the "
"\"canonical\" representation.  This is less efficient than "
":c:func:`PyUnicode_READ` if you do multiple consecutive reads."
msgstr ""

#: ../../c-api/unicode.rst:204
msgid ""
"Return the maximum code point that is suitable for creating another string "
"based on *unicode*, which must be in the \"canonical\" representation.  This"
" is always an approximation but more efficient than iterating over the "
"string."
msgstr ""

#: ../../c-api/unicode.rst:213
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in "
"code units (this includes surrogate pairs as 2 units).  *unicode* has to be "
"a Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:219 ../../c-api/unicode.rst:229
#: ../../c-api/unicode.rst:761
msgid ""
"Part of the old-style Unicode API, please migrate to using "
":c:func:`PyUnicode_GET_LENGTH`."
msgstr ""

#: ../../c-api/unicode.rst:224
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation in "
"bytes.  *unicode* has to be a Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:235
msgid ""
"Return a pointer to a :c:type:`Py_UNICODE` representation of the object.  "
"The returned buffer is always terminated with an extra null code point.  It "
"may also contain embedded null code points, which would cause the string to "
"be truncated when used in most C functions.  The ``AS_DATA`` form casts the "
"pointer to :c:expr:`const char *`.  The *unicode* argument has to be a "
"Unicode object (not checked)."
msgstr ""

#: ../../c-api/unicode.rst:242
msgid ""
"This function is now inefficient -- because in many cases the "
":c:type:`Py_UNICODE` representation does not exist and needs to be created "
"-- and can fail (return ``NULL`` with an exception set).  Try to port the "
"code to use the new :c:func:`PyUnicode_nBYTE_DATA` macros or use "
":c:func:`PyUnicode_WRITE` or :c:func:`PyUnicode_READ`."
msgstr ""

#: ../../c-api/unicode.rst:251
msgid ""
"Part of the old-style Unicode API, please migrate to using the "
":c:func:`PyUnicode_nBYTE_DATA` family of macros."
msgstr ""

#: ../../c-api/unicode.rst:256
msgid ""
"Return ``1`` if the string is a valid identifier according to the language "
"definition, section :ref:`identifiers`. Return ``0`` otherwise."
msgstr ""

#: ../../c-api/unicode.rst:259
msgid ""
"The function does not call :c:func:`Py_FatalError` anymore if the string is "
"not ready."
msgstr ""

#: ../../c-api/unicode.rst:265
msgid "Unicode Character Properties"
msgstr ""

#: ../../c-api/unicode.rst:267
msgid ""
"Unicode provides many different character properties. The most often needed "
"ones are available through these macros which are mapped to C functions "
"depending on the Python configuration."
msgstr ""

#: ../../c-api/unicode.rst:274
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a whitespace character."
msgstr ""

#: ../../c-api/unicode.rst:279
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a lowercase character."
msgstr ""

#: ../../c-api/unicode.rst:284
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an uppercase character."
msgstr ""

#: ../../c-api/unicode.rst:289
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a titlecase character."
msgstr ""

#: ../../c-api/unicode.rst:294
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a linebreak character."
msgstr ""

#: ../../c-api/unicode.rst:299
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a decimal character."
msgstr ""

#: ../../c-api/unicode.rst:304
msgid "Return ``1`` or ``0`` depending on whether *ch* is a digit character."
msgstr ""

#: ../../c-api/unicode.rst:309
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a numeric character."
msgstr ""

#: ../../c-api/unicode.rst:314
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphabetic character."
msgstr ""

#: ../../c-api/unicode.rst:319
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is an alphanumeric "
"character."
msgstr ""

#: ../../c-api/unicode.rst:324
msgid ""
"Return ``1`` or ``0`` depending on whether *ch* is a printable character. "
"Nonprintable characters are those characters defined in the Unicode "
"character database as \"Other\" or \"Separator\", excepting the ASCII space "
"(0x20) which is considered printable.  (Note that printable characters in "
"this context are those which should not be escaped when :func:`repr` is "
"invoked on a string. It has no bearing on the handling of strings written to"
" :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""

#: ../../c-api/unicode.rst:333
msgid "These APIs can be used for fast direct character conversions:"
msgstr ""

#: ../../c-api/unicode.rst:338
msgid "Return the character *ch* converted to lower case."
msgstr ""

#: ../../c-api/unicode.rst:340 ../../c-api/unicode.rst:348
#: ../../c-api/unicode.rst:356
msgid "This function uses simple case mappings."
msgstr ""

#: ../../c-api/unicode.rst:346
msgid "Return the character *ch* converted to upper case."
msgstr ""

#: ../../c-api/unicode.rst:354
msgid "Return the character *ch* converted to title case."
msgstr ""

#: ../../c-api/unicode.rst:362
msgid ""
"Return the character *ch* converted to a decimal positive integer.  Return "
"``-1`` if this is not possible.  This macro does not raise exceptions."
msgstr ""

#: ../../c-api/unicode.rst:368
msgid ""
"Return the character *ch* converted to a single digit integer. Return ``-1``"
" if this is not possible.  This macro does not raise exceptions."
msgstr ""

#: ../../c-api/unicode.rst:374
msgid ""
"Return the character *ch* converted to a double. Return ``-1.0`` if this is "
"not possible.  This macro does not raise exceptions."
msgstr ""

#: ../../c-api/unicode.rst:378
msgid "These APIs can be used to work with surrogates:"
msgstr ""

#: ../../c-api/unicode.rst:382
msgid "Check if *ch* is a surrogate (``0xD800 <= ch <= 0xDFFF``)."
msgstr ""

#: ../../c-api/unicode.rst:386
msgid "Check if *ch* is a high surrogate (``0xD800 <= ch <= 0xDBFF``)."
msgstr ""

#: ../../c-api/unicode.rst:390
msgid "Check if *ch* is a low surrogate (``0xDC00 <= ch <= 0xDFFF``)."
msgstr ""

#: ../../c-api/unicode.rst:394
msgid ""
"Join two surrogate characters and return a single Py_UCS4 value. *high* and "
"*low* are respectively the leading and trailing surrogates in a surrogate "
"pair."
msgstr ""

#: ../../c-api/unicode.rst:400
msgid "Creating and accessing Unicode strings"
msgstr ""

#: ../../c-api/unicode.rst:402
msgid ""
"To create Unicode objects and access their basic sequence properties, use "
"these APIs:"
msgstr ""

#: ../../c-api/unicode.rst:407
msgid ""
"Create a new Unicode object.  *maxchar* should be the true maximum code "
"point to be placed in the string.  As an approximation, it can be rounded up"
" to the nearest value in the sequence 127, 255, 65535, 1114111."
msgstr ""

#: ../../c-api/unicode.rst:411
msgid ""
"This is the recommended way to allocate a new Unicode object.  Objects "
"created using this function are not resizable."
msgstr ""

#: ../../c-api/unicode.rst:420
msgid ""
"Create a new Unicode object with the given *kind* (possible values are "
":c:macro:`PyUnicode_1BYTE_KIND` etc., as returned by "
":c:func:`PyUnicode_KIND`).  The *buffer* must point to an array of *size* "
"units of 1, 2 or 4 bytes per character, as given by the kind."
msgstr ""

#: ../../c-api/unicode.rst:425
msgid ""
"If necessary, the input *buffer* is copied and transformed into the "
"canonical representation.  For example, if the *buffer* is a UCS4 string "
"(:c:macro:`PyUnicode_4BYTE_KIND`) and it consists only of codepoints in the "
"UCS1 range, it will be transformed into UCS1 "
"(:c:macro:`PyUnicode_1BYTE_KIND`)."
msgstr ""

#: ../../c-api/unicode.rst:436
msgid ""
"Create a Unicode object from the char buffer *str*.  The bytes will be "
"interpreted as being UTF-8 encoded.  The buffer is copied into the new "
"object. If the buffer is not ``NULL``, the return value might be a shared "
"object, i.e. modification of the data is not allowed."
msgstr ""

#: ../../c-api/unicode.rst:441
msgid ""
"If *str* is ``NULL``, this function behaves like "
":c:func:`PyUnicode_FromUnicode` with the buffer set to ``NULL``.  This usage"
" is deprecated in favor of :c:func:`PyUnicode_New`, and will be removed in "
"Python 3.12."
msgstr ""

#: ../../c-api/unicode.rst:448
msgid ""
"Create a Unicode object from a UTF-8 encoded null-terminated char buffer "
"*str*."
msgstr ""

#: ../../c-api/unicode.rst:454
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python Unicode string and "
"return a string with the values formatted into it.  The variable arguments "
"must be C types and must correspond exactly to the format characters in the "
"*format* ASCII-encoded string. The following format characters are allowed:"
msgstr ""

#: ../../c-api/unicode.rst:469
msgid "Format Characters"
msgstr ""

#: ../../c-api/unicode.rst:469
msgid "Type"
msgstr ""

#: ../../c-api/unicode.rst:469
msgid "Comment"
msgstr ""

#: ../../c-api/unicode.rst:471
msgid ":attr:`%%`"
msgstr ""

#: ../../c-api/unicode.rst:471
msgid "*n/a*"
msgstr ""

#: ../../c-api/unicode.rst:471
msgid "The literal % character."
msgstr ""

#: ../../c-api/unicode.rst:473
msgid ":attr:`%c`"
msgstr ""

#: ../../c-api/unicode.rst:473 ../../c-api/unicode.rst:476
#: ../../c-api/unicode.rst:509 ../../c-api/unicode.rst:512
msgid "int"
msgstr ""

#: ../../c-api/unicode.rst:473
msgid "A single character, represented as a C int."
msgstr ""

#: ../../c-api/unicode.rst:476
msgid ":attr:`%d`"
msgstr ""

#: ../../c-api/unicode.rst:476
msgid "Equivalent to ``printf(\"%d\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:479
msgid ":attr:`%u`"
msgstr ""

#: ../../c-api/unicode.rst:479
msgid "unsigned int"
msgstr ""

#: ../../c-api/unicode.rst:479
msgid "Equivalent to ``printf(\"%u\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:482
msgid ":attr:`%ld`"
msgstr ""

#: ../../c-api/unicode.rst:482 ../../c-api/unicode.rst:485
msgid "long"
msgstr ""

#: ../../c-api/unicode.rst:482
msgid "Equivalent to ``printf(\"%ld\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:485
msgid ":attr:`%li`"
msgstr ""

#: ../../c-api/unicode.rst:485
msgid "Equivalent to ``printf(\"%li\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:488
msgid ":attr:`%lu`"
msgstr ""

#: ../../c-api/unicode.rst:488
msgid "unsigned long"
msgstr ""

#: ../../c-api/unicode.rst:488
msgid "Equivalent to ``printf(\"%lu\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:491
msgid ":attr:`%lld`"
msgstr ""

#: ../../c-api/unicode.rst:491 ../../c-api/unicode.rst:494
msgid "long long"
msgstr ""

#: ../../c-api/unicode.rst:491
msgid "Equivalent to ``printf(\"%lld\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:494
msgid ":attr:`%lli`"
msgstr ""

#: ../../c-api/unicode.rst:494
msgid "Equivalent to ``printf(\"%lli\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:497
msgid ":attr:`%llu`"
msgstr ""

#: ../../c-api/unicode.rst:497
msgid "unsigned long long"
msgstr ""

#: ../../c-api/unicode.rst:497
msgid "Equivalent to ``printf(\"%llu\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:500
msgid ":attr:`%zd`"
msgstr ""

#: ../../c-api/unicode.rst:500 ../../c-api/unicode.rst:503
msgid ":c:type:`\\ Py_ssize_t`"
msgstr ""

#: ../../c-api/unicode.rst:500
msgid "Equivalent to ``printf(\"%zd\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:503
msgid ":attr:`%zi`"
msgstr ""

#: ../../c-api/unicode.rst:503
msgid "Equivalent to ``printf(\"%zi\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:506
msgid ":attr:`%zu`"
msgstr ""

#: ../../c-api/unicode.rst:506
msgid "size_t"
msgstr ""

#: ../../c-api/unicode.rst:506
msgid "Equivalent to ``printf(\"%zu\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:509
msgid ":attr:`%i`"
msgstr ""

#: ../../c-api/unicode.rst:509
msgid "Equivalent to ``printf(\"%i\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:512
msgid ":attr:`%x`"
msgstr ""

#: ../../c-api/unicode.rst:512
msgid "Equivalent to ``printf(\"%x\")``. [1]_"
msgstr ""

#: ../../c-api/unicode.rst:515
msgid ":attr:`%s`"
msgstr ""

#: ../../c-api/unicode.rst:515
msgid "const char\\*"
msgstr ""

#: ../../c-api/unicode.rst:515
msgid "A null-terminated C character array."
msgstr ""

#: ../../c-api/unicode.rst:518
msgid ":attr:`%p`"
msgstr ""

#: ../../c-api/unicode.rst:518
msgid "const void\\*"
msgstr ""

#: ../../c-api/unicode.rst:518
msgid ""
"The hex representation of a C pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal "
"``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""

#: ../../c-api/unicode.rst:526
msgid ":attr:`%A`"
msgstr ""

#: ../../c-api/unicode.rst:526 ../../c-api/unicode.rst:529
#: ../../c-api/unicode.rst:538 ../../c-api/unicode.rst:541
msgid "PyObject\\*"
msgstr ""

#: ../../c-api/unicode.rst:526
msgid "The result of calling :func:`ascii`."
msgstr ""

#: ../../c-api/unicode.rst:529
msgid ":attr:`%U`"
msgstr ""

#: ../../c-api/unicode.rst:529
msgid "A Unicode object."
msgstr ""

#: ../../c-api/unicode.rst:531
msgid ":attr:`%V`"
msgstr ""

#: ../../c-api/unicode.rst:531
msgid "PyObject\\*, const char\\*"
msgstr ""

#: ../../c-api/unicode.rst:531
msgid ""
"A Unicode object (which may be ``NULL``) and a null-terminated C character "
"array as a second parameter (which will be used, if the first parameter is "
"``NULL``)."
msgstr ""

#: ../../c-api/unicode.rst:538
msgid ":attr:`%S`"
msgstr ""

#: ../../c-api/unicode.rst:538
msgid "The result of calling :c:func:`PyObject_Str`."
msgstr ""

#: ../../c-api/unicode.rst:541
msgid ":attr:`%R`"
msgstr ""

#: ../../c-api/unicode.rst:541
msgid "The result of calling :c:func:`PyObject_Repr`."
msgstr ""

#: ../../c-api/unicode.rst:545
msgid ""
"An unrecognized format character causes all the rest of the format string to"
" be copied as-is to the result string, and any extra arguments discarded."
msgstr ""

#: ../../c-api/unicode.rst:549
msgid ""
"The width formatter unit is number of characters rather than bytes. The "
"precision formatter unit is number of bytes for ``\"%s\"`` and ``\"%V\"`` "
"(if the ``PyObject*`` argument is ``NULL``), and a number of characters for "
"``\"%A\"``, ``\"%U\"``, ``\"%S\"``, ``\"%R\"`` and ``\"%V\"`` (if the "
"``PyObject*`` argument is not ``NULL``)."
msgstr ""

#: ../../c-api/unicode.rst:555
msgid ""
"For integer specifiers (d, u, ld, li, lu, lld, lli, llu, zd, zi, zu, i, x): "
"the 0-conversion flag has effect even when a precision is given."
msgstr ""

#: ../../c-api/unicode.rst:558
msgid "Support for ``\"%lld\"`` and ``\"%llu\"`` added."
msgstr ""

#: ../../c-api/unicode.rst:561
msgid "Support for ``\"%li\"``, ``\"%lli\"`` and ``\"%zi\"`` added."
msgstr ""

#: ../../c-api/unicode.rst:564
msgid ""
"Support width and precision formatter for ``\"%s\"``, ``\"%A\"``, "
"``\"%U\"``, ``\"%V\"``, ``\"%S\"``, ``\"%R\"`` added."
msgstr ""

#: ../../c-api/unicode.rst:571
msgid ""
"Identical to :c:func:`PyUnicode_FromFormat` except that it takes exactly two"
" arguments."
msgstr ""

#: ../../c-api/unicode.rst:577
msgid ""
"Copy an instance of a Unicode subtype to a new true Unicode object if "
"necessary. If *obj* is already a true Unicode object (not a subtype), return"
" a new :term:`strong reference` to the object."
msgstr ""

#: ../../c-api/unicode.rst:581
msgid ""
"Objects other than Unicode or its subtypes will cause a :exc:`TypeError`."
msgstr ""

#: ../../c-api/unicode.rst:587
msgid "Decode an encoded object *obj* to a Unicode object."
msgstr ""

#: ../../c-api/unicode.rst:589
msgid ""
":class:`bytes`, :class:`bytearray` and other :term:`bytes-like objects "
"<bytes-like object>` are decoded according to the given *encoding* and using"
" the error handling defined by *errors*. Both can be ``NULL`` to have the "
"interface use the default values (see :ref:`builtincodecs` for details)."
msgstr ""

#: ../../c-api/unicode.rst:595
msgid ""
"All other objects, including Unicode objects, cause a :exc:`TypeError` to be"
" set."
msgstr ""

#: ../../c-api/unicode.rst:598
msgid ""
"The API returns ``NULL`` if there was an error.  The caller is responsible "
"for decref'ing the returned objects."
msgstr ""

#: ../../c-api/unicode.rst:604
msgid "Return the length of the Unicode object, in code points."
msgstr ""

#: ../../c-api/unicode.rst:615
msgid ""
"Copy characters from one Unicode object into another.  This function "
"performs character conversion when necessary and falls back to "
":c:func:`!memcpy` if possible.  Returns ``-1`` and sets an exception on "
"error, otherwise returns the number of copied characters."
msgstr ""

#: ../../c-api/unicode.rst:626
msgid ""
"Fill a string with a character: write *fill_char* into "
"``unicode[start:start+length]``."
msgstr ""

#: ../../c-api/unicode.rst:629
msgid ""
"Fail if *fill_char* is bigger than the string maximum character, or if the "
"string has more than 1 reference."
msgstr ""

#: ../../c-api/unicode.rst:632
msgid ""
"Return the number of written character, or return ``-1`` and raise an "
"exception on error."
msgstr ""

#: ../../c-api/unicode.rst:641
msgid ""
"Write a character to a string.  The string must have been created through "
":c:func:`PyUnicode_New`.  Since Unicode strings are supposed to be "
"immutable, the string must not be shared, or have been hashed yet."
msgstr ""

#: ../../c-api/unicode.rst:645
msgid ""
"This function checks that *unicode* is a Unicode object, that the index is "
"not out of bounds, and that the object can be modified safely (i.e. that it "
"its reference count is one)."
msgstr ""

#: ../../c-api/unicode.rst:654
msgid ""
"Read a character from a string.  This function checks that *unicode* is a "
"Unicode object and the index is not out of bounds, in contrast to "
":c:func:`PyUnicode_READ_CHAR`, which performs no error checking."
msgstr ""

#: ../../c-api/unicode.rst:664
msgid ""
"Return a substring of *unicode*, from character index *start* (included) to "
"character index *end* (excluded).  Negative indices are not supported."
msgstr ""

#: ../../c-api/unicode.rst:673
msgid ""
"Copy the string *unicode* into a UCS4 buffer, including a null character, if"
" *copy_null* is set.  Returns ``NULL`` and sets an exception on error (in "
"particular, a :exc:`SystemError` if *buflen* is smaller than the length of "
"*unicode*).  *buffer* is returned on success."
msgstr ""

#: ../../c-api/unicode.rst:683
msgid ""
"Copy the string *unicode* into a new UCS4 buffer that is allocated using "
":c:func:`PyMem_Malloc`.  If this fails, ``NULL`` is returned with a "
":exc:`MemoryError` set.  The returned buffer always has an extra null code "
"point appended."
msgstr ""

#: ../../c-api/unicode.rst:692
msgid "Deprecated Py_UNICODE APIs"
msgstr ""

#: ../../c-api/unicode.rst:696
msgid ""
"These API functions are deprecated with the implementation of :pep:`393`. "
"Extension modules can continue using them, as they will not be removed in "
"Python 3.x, but need to be aware that their use can now cause performance "
"and memory hits."
msgstr ""

#: ../../c-api/unicode.rst:703
msgid ""
"Create a Unicode object from the Py_UNICODE buffer *u* of the given size. "
"*u* may be ``NULL`` which causes the contents to be undefined. It is the "
"user's responsibility to fill in the needed data.  The buffer is copied into"
" the new object."
msgstr ""

#: ../../c-api/unicode.rst:708
msgid ""
"If the buffer is not ``NULL``, the return value might be a shared object. "
"Therefore, modification of the resulting Unicode object is only allowed when"
" *u* is ``NULL``."
msgstr ""

#: ../../c-api/unicode.rst:712
msgid ""
"If the buffer is ``NULL``, :c:func:`PyUnicode_READY` must be called once the"
" string content has been filled before using any of the access macros such "
"as :c:func:`PyUnicode_KIND`."
msgstr ""

#: ../../c-api/unicode.rst:719
msgid ""
"Part of the old-style Unicode API, please migrate to using "
":c:func:`PyUnicode_FromKindAndData`, :c:func:`PyUnicode_FromWideChar`, or "
":c:func:`PyUnicode_New`."
msgstr ""

#: ../../c-api/unicode.rst:724
msgid ""
"Return a read-only pointer to the Unicode object's internal "
":c:type:`Py_UNICODE` buffer, or ``NULL`` on error. This will create the "
":c:expr:`Py_UNICODE*` representation of the object if it is not yet "
"available. The buffer is always terminated with an extra null code point. "
"Note that the resulting :c:type:`Py_UNICODE` string may also contain "
"embedded null code points, which would cause the string to be truncated when"
" used in most C functions."
msgstr ""

#: ../../c-api/unicode.rst:735 ../../c-api/unicode.rst:751
msgid ""
"Part of the old-style Unicode API, please migrate to using "
":c:func:`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsWideChar`, "
":c:func:`PyUnicode_ReadChar` or similar new APIs."
msgstr ""

#: ../../c-api/unicode.rst:740
msgid ""
"Like :c:func:`PyUnicode_AsUnicode`, but also saves the :c:func:`Py_UNICODE` "
"array length (excluding the extra null terminator) in *size*. Note that the "
"resulting :c:expr:`Py_UNICODE*` string may contain embedded null code "
"points, which would cause the string to be truncated when used in most C "
"functions."
msgstr ""

#: ../../c-api/unicode.rst:756
msgid ""
"Return the size of the deprecated :c:type:`Py_UNICODE` representation, in "
"code units (this includes surrogate pairs as 2 units)."
msgstr ""

#: ../../c-api/unicode.rst:765
msgid "Locale Encoding"
msgstr ""

#: ../../c-api/unicode.rst:767
msgid ""
"The current locale encoding can be used to decode text from the operating "
"system."
msgstr ""

#: ../../c-api/unicode.rst:774
msgid ""
"Decode a string from UTF-8 on Android and VxWorks, or from the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The decoder uses "
"``\"strict\"`` error handler if *errors* is ``NULL``.  *str* must end with a"
" null character but cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:781
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` to decode a string from "
":c:data:`Py_FileSystemDefaultEncoding` (the locale encoding read at Python "
"startup)."
msgstr ""

#: ../../c-api/unicode.rst:785 ../../c-api/unicode.rst:821
msgid "This function ignores the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: ../../c-api/unicode.rst:789 ../../c-api/unicode.rst:892
msgid "The :c:func:`Py_DecodeLocale` function."
msgstr ""

#: ../../c-api/unicode.rst:793
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, "
":c:func:`Py_DecodeLocale` was used for the ``surrogateescape``, and the "
"current locale encoding was used for ``strict``."
msgstr ""

#: ../../c-api/unicode.rst:802
msgid ""
"Similar to :c:func:`PyUnicode_DecodeLocaleAndSize`, but compute the string "
"length using :c:func:`!strlen`."
msgstr ""

#: ../../c-api/unicode.rst:810
msgid ""
"Encode a Unicode object to UTF-8 on Android and VxWorks, or to the current "
"locale encoding on other platforms. The supported error handlers are "
"``\"strict\"`` and ``\"surrogateescape\"`` (:pep:`383`). The encoder uses "
"``\"strict\"`` error handler if *errors* is ``NULL``. Return a "
":class:`bytes` object. *unicode* cannot contain embedded null characters."
msgstr ""

#: ../../c-api/unicode.rst:817
msgid ""
"Use :c:func:`PyUnicode_EncodeFSDefault` to encode a string to "
":c:data:`Py_FileSystemDefaultEncoding` (the locale encoding read at Python "
"startup)."
msgstr ""

#: ../../c-api/unicode.rst:825 ../../c-api/unicode.rst:928
msgid "The :c:func:`Py_EncodeLocale` function."
msgstr ""

#: ../../c-api/unicode.rst:829
msgid ""
"The function now also uses the current locale encoding for the "
"``surrogateescape`` error handler, except on Android. Previously, "
":c:func:`Py_EncodeLocale` was used for the ``surrogateescape``, and the "
"current locale encoding was used for ``strict``."
msgstr ""

#: ../../c-api/unicode.rst:838
msgid "File System Encoding"
msgstr ""

#: ../../c-api/unicode.rst:840
msgid ""
"To encode and decode file names and other environment strings, "
":c:data:`Py_FileSystemDefaultEncoding` should be used as the encoding, and "
":c:data:`Py_FileSystemDefaultEncodeErrors` should be used as the error "
"handler (:pep:`383` and :pep:`529`). To encode file names to :class:`bytes` "
"during argument parsing, the ``\"O&\"`` converter should be used, passing "
":c:func:`PyUnicode_FSConverter` as the conversion function:"
msgstr ""

#: ../../c-api/unicode.rst:849
msgid ""
"ParseTuple converter: encode :class:`str` objects -- obtained directly or "
"through the :class:`os.PathLike` interface -- to :class:`bytes` using "
":c:func:`PyUnicode_EncodeFSDefault`; :class:`bytes` objects are output as-"
"is. *result* must be a :c:expr:`PyBytesObject*` which must be released when "
"it is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:857 ../../c-api/unicode.rst:874
msgid "Accepts a :term:`path-like object`."
msgstr ""

#: ../../c-api/unicode.rst:860
msgid ""
"To decode file names to :class:`str` during argument parsing, the ``\"O&\"``"
" converter should be used, passing :c:func:`PyUnicode_FSDecoder` as the "
"conversion function:"
msgstr ""

#: ../../c-api/unicode.rst:866
msgid ""
"ParseTuple converter: decode :class:`bytes` objects -- obtained either "
"directly or indirectly through the :class:`os.PathLike` interface -- to "
":class:`str` using :c:func:`PyUnicode_DecodeFSDefaultAndSize`; :class:`str` "
"objects are output as-is. *result* must be a :c:expr:`PyUnicodeObject*` "
"which must be released when it is no longer used."
msgstr ""

#: ../../c-api/unicode.rst:880
msgid ""
"Decode a string from the :term:`filesystem encoding and error handler`."
msgstr ""

#: ../../c-api/unicode.rst:882 ../../c-api/unicode.rst:903
#: ../../c-api/unicode.rst:919
msgid ""
"If :c:data:`Py_FileSystemDefaultEncoding` is not set, fall back to the "
"locale encoding."
msgstr ""

#: ../../c-api/unicode.rst:885
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the "
"locale encoding and cannot be modified later. If you need to decode a string"
" from the current locale encoding, use "
":c:func:`PyUnicode_DecodeLocaleAndSize`."
msgstr ""

#: ../../c-api/unicode.rst:894 ../../c-api/unicode.rst:908
#: ../../c-api/unicode.rst:932
msgid "Use :c:data:`Py_FileSystemDefaultEncodeErrors` error handler."
msgstr ""

#: ../../c-api/unicode.rst:900
msgid ""
"Decode a null-terminated string from the :term:`filesystem encoding and "
"error handler`."
msgstr ""

#: ../../c-api/unicode.rst:906
msgid ""
"Use :c:func:`PyUnicode_DecodeFSDefaultAndSize` if you know the string "
"length."
msgstr ""

#: ../../c-api/unicode.rst:914
msgid ""
"Encode a Unicode object to :c:data:`Py_FileSystemDefaultEncoding` with the "
":c:data:`Py_FileSystemDefaultEncodeErrors` error handler, and return "
":class:`bytes`. Note that the resulting :class:`bytes` object may contain "
"null bytes."
msgstr ""

#: ../../c-api/unicode.rst:922
msgid ""
":c:data:`Py_FileSystemDefaultEncoding` is initialized at startup from the "
"locale encoding and cannot be modified later. If you need to encode a string"
" to the current locale encoding, use :c:func:`PyUnicode_EncodeLocale`."
msgstr ""

#: ../../c-api/unicode.rst:936
msgid "wchar_t Support"
msgstr ""

#: ../../c-api/unicode.rst:938
msgid ":c:type:`wchar_t` support for platforms which support it:"
msgstr ""

#: ../../c-api/unicode.rst:942
msgid ""
"Create a Unicode object from the :c:type:`wchar_t` buffer *wstr* of the "
"given *size*. Passing ``-1`` as the *size* indicates that the function must "
"itself compute the length, using :c:func:`!wcslen`. Return ``NULL`` on "
"failure."
msgstr ""

#: ../../c-api/unicode.rst:950
msgid ""
"Copy the Unicode object contents into the :c:type:`wchar_t` buffer *wstr*.  "
"At most *size* :c:type:`wchar_t` characters are copied (excluding a possibly"
" trailing null termination character).  Return the number of "
":c:type:`wchar_t` characters copied or ``-1`` in case of an error."
msgstr ""

#: ../../c-api/unicode.rst:955
msgid ""
"When *wstr* is ``NULL``, instead return the *size* that would be required to"
" store all of *unicode* including a terminating null."
msgstr ""

#: ../../c-api/unicode.rst:958
msgid ""
"Note that the resulting :c:expr:`wchar_t*` string may or may not be null-"
"terminated.  It is the responsibility of the caller to make sure that the "
":c:expr:`wchar_t*` string is null-terminated in case this is required by the"
" application. Also, note that the :c:expr:`wchar_t*` string might contain "
"null characters, which would cause the string to be truncated when used with"
" most C functions."
msgstr ""

#: ../../c-api/unicode.rst:968
msgid ""
"Convert the Unicode object to a wide character string. The output string "
"always ends with a null character. If *size* is not ``NULL``, write the "
"number of wide characters (excluding the trailing null termination "
"character) into *\\*size*. Note that the resulting :c:type:`wchar_t` string "
"might contain null characters, which would cause the string to be truncated "
"when used with most C functions. If *size* is ``NULL`` and the "
":c:expr:`wchar_t*` string contains null characters a :exc:`ValueError` is "
"raised."
msgstr ""

#: ../../c-api/unicode.rst:976
msgid ""
"Returns a buffer allocated by :c:macro:`PyMem_New` (use :c:func:`PyMem_Free`"
" to free it) on success. On error, returns ``NULL`` and *\\*size* is "
"undefined. Raises a :exc:`MemoryError` if memory allocation is failed."
msgstr ""

#: ../../c-api/unicode.rst:983
msgid ""
"Raises a :exc:`ValueError` if *size* is ``NULL`` and the :c:expr:`wchar_t*` "
"string contains null characters."
msgstr ""

#: ../../c-api/unicode.rst:991
msgid "Built-in Codecs"
msgstr ""

#: ../../c-api/unicode.rst:993
msgid ""
"Python provides a set of built-in codecs which are written in C for speed. "
"All of these codecs are directly usable via the following functions."
msgstr ""

#: ../../c-api/unicode.rst:996
msgid ""
"Many of the following APIs take two arguments encoding and errors, and they "
"have the same semantics as the ones of the built-in :func:`str` string "
"object constructor."
msgstr ""

#: ../../c-api/unicode.rst:1000
msgid ""
"Setting encoding to ``NULL`` causes the default encoding to be used which is"
" UTF-8.  The file system calls should use :c:func:`PyUnicode_FSConverter` "
"for encoding file names. This uses the variable "
":c:data:`Py_FileSystemDefaultEncoding` internally. This variable should be "
"treated as read-only: on some systems, it will be a pointer to a static "
"string, on others, it will change at run-time (such as when the application "
"invokes setlocale)."
msgstr ""

#: ../../c-api/unicode.rst:1008
msgid ""
"Error handling is set by errors which may also be set to ``NULL`` meaning to"
" use the default handling defined for the codec.  Default error handling for"
" all built-in codecs is \"strict\" (:exc:`ValueError` is raised)."
msgstr ""

#: ../../c-api/unicode.rst:1012
msgid ""
"The codecs all use a similar interface.  Only deviations from the following "
"generic ones are documented for simplicity."
msgstr ""

#: ../../c-api/unicode.rst:1017
msgid "Generic Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1019
msgid "These are the generic codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1025
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string "
"*str*. *encoding* and *errors* have the same meaning as the parameters of "
"the same name in the :func:`str` built-in function.  The codec to be used is"
" looked up using the Python codec registry.  Return ``NULL`` if an exception"
" was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1035
msgid ""
"Encode a Unicode object and return the result as Python bytes object. "
"*encoding* and *errors* have the same meaning as the parameters of the same "
"name in the Unicode :meth:`~str.encode` method. The codec to be used is "
"looked up using the Python codec registry. Return ``NULL`` if an exception "
"was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1043
msgid "UTF-8 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1045
msgid "These are the UTF-8 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1050
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-8 encoded string"
" *str*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1057
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF8`. If "
"*consumed* is not ``NULL``, trailing incomplete UTF-8 byte sequences will "
"not be treated as an error. Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1065
msgid ""
"Encode a Unicode object using UTF-8 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1072
msgid ""
"Return a pointer to the UTF-8 encoding of the Unicode object, and store the "
"size of the encoded representation (in bytes) in *size*.  The *size* "
"argument can be ``NULL``; in this case no size will be stored.  The returned"
" buffer always has an extra null byte appended (not included in *size*), "
"regardless of whether there are any other null code points."
msgstr ""

#: ../../c-api/unicode.rst:1078
msgid ""
"In the case of an error, ``NULL`` is returned with an exception set and no "
"*size* is stored."
msgstr ""

#: ../../c-api/unicode.rst:1081
msgid ""
"This caches the UTF-8 representation of the string in the Unicode object, "
"and subsequent calls will return a pointer to the same buffer.  The caller "
"is not responsible for deallocating the buffer. The buffer is deallocated "
"and pointers to it become invalid when the Unicode object is garbage "
"collected."
msgstr ""

#: ../../c-api/unicode.rst:1088 ../../c-api/unicode.rst:1101
msgid "The return type is now ``const char *`` rather of ``char *``."
msgstr ""

#: ../../c-api/unicode.rst:1091
msgid "This function is a part of the :ref:`limited API <limited-c-api>`."
msgstr ""

#: ../../c-api/unicode.rst:1097
msgid "As :c:func:`PyUnicode_AsUTF8AndSize`, but does not store the size."
msgstr ""

#: ../../c-api/unicode.rst:1106
msgid "UTF-32 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1108
msgid "These are the UTF-32 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1114
msgid ""
"Decode *size* bytes from a UTF-32 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: ../../c-api/unicode.rst:1118 ../../c-api/unicode.rst:1168
msgid ""
"If *byteorder* is non-``NULL``, the decoder starts decoding using the given "
"byte order::"
msgstr ""

#: ../../c-api/unicode.rst:1125
msgid ""
"If ``*byteorder`` is zero, and the first four bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output."
msgstr ""

#: ../../c-api/unicode.rst:1130
msgid ""
"After completion, *\\*byteorder* is set to the current byte order at the end"
" of input data."
msgstr ""

#: ../../c-api/unicode.rst:1133 ../../c-api/unicode.rst:1184
msgid "If *byteorder* is ``NULL``, the codec starts in native order mode."
msgstr ""

#: ../../c-api/unicode.rst:1135 ../../c-api/unicode.rst:1186
msgid "Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1141
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF32`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF32Stateful` will not"
" treat trailing incomplete UTF-32 byte sequences (such as a number of bytes "
"not divisible by four) as an error. Those bytes will not be decoded and the "
"number of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1150
msgid ""
"Return a Python byte string using the UTF-32 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1156
msgid "UTF-16 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1158
msgid "These are the UTF-16 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1164
msgid ""
"Decode *size* bytes from a UTF-16 encoded buffer string and return the "
"corresponding Unicode object.  *errors* (if non-``NULL``) defines the error "
"handling. It defaults to \"strict\"."
msgstr ""

#: ../../c-api/unicode.rst:1175
msgid ""
"If ``*byteorder`` is zero, and the first two bytes of the input data are a "
"byte order mark (BOM), the decoder switches to this byte order and the BOM "
"is not copied into the resulting Unicode string.  If ``*byteorder`` is "
"``-1`` or ``1``, any byte order mark is copied to the output (where it will "
"result in either a ``\\ufeff`` or a ``\\ufffe`` character)."
msgstr ""

#: ../../c-api/unicode.rst:1181
msgid ""
"After completion, ``*byteorder`` is set to the current byte order at the end"
" of input data."
msgstr ""

#: ../../c-api/unicode.rst:1192
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF16`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeUTF16Stateful` will not"
" treat trailing incomplete UTF-16 byte sequences (such as an odd number of "
"bytes or a split surrogate pair) as an error. Those bytes will not be "
"decoded and the number of bytes that have been decoded will be stored in "
"*consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1201
msgid ""
"Return a Python byte string using the UTF-16 encoding in native byte order. "
"The string always starts with a BOM mark.  Error handling is \"strict\". "
"Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1207
msgid "UTF-7 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1209
msgid "These are the UTF-7 codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1214
msgid ""
"Create a Unicode object by decoding *size* bytes of the UTF-7 encoded string"
" *str*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1221
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeUTF7`.  If "
"*consumed* is not ``NULL``, trailing incomplete UTF-7 base-64 sections will "
"not be treated as an error.  Those bytes will not be decoded and the number "
"of bytes that have been decoded will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1228
msgid "Unicode-Escape Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1230
msgid "These are the \"Unicode Escape\" codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1236
msgid ""
"Create a Unicode object by decoding *size* bytes of the Unicode-Escape "
"encoded string *str*.  Return ``NULL`` if an exception was raised by the "
"codec."
msgstr ""

#: ../../c-api/unicode.rst:1242
msgid ""
"Encode a Unicode object using Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1248
msgid "Raw-Unicode-Escape Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1250
msgid "These are the \"Raw Unicode Escape\" codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1256
msgid ""
"Create a Unicode object by decoding *size* bytes of the Raw-Unicode-Escape "
"encoded string *str*.  Return ``NULL`` if an exception was raised by the "
"codec."
msgstr ""

#: ../../c-api/unicode.rst:1262
msgid ""
"Encode a Unicode object using Raw-Unicode-Escape and return the result as a "
"bytes object.  Error handling is \"strict\".  Return ``NULL`` if an "
"exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1268
msgid "Latin-1 Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1270
msgid ""
"These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256 "
"Unicode ordinals and only these are accepted by the codecs during encoding."
msgstr ""

#: ../../c-api/unicode.rst:1276
msgid ""
"Create a Unicode object by decoding *size* bytes of the Latin-1 encoded "
"string *str*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1282
msgid ""
"Encode a Unicode object using Latin-1 and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1288
msgid "ASCII Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1290
msgid ""
"These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All "
"other codes generate errors."
msgstr ""

#: ../../c-api/unicode.rst:1296
msgid ""
"Create a Unicode object by decoding *size* bytes of the ASCII encoded string"
" *str*.  Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1302
msgid ""
"Encode a Unicode object using ASCII and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1308
msgid "Character Map Codecs"
msgstr ""

#: ../../c-api/unicode.rst:1310
msgid ""
"This codec is special in that it can be used to implement many different "
"codecs (and this is in fact what was done to obtain most of the standard "
"codecs included in the :mod:`!encodings` package). The codec uses mappings "
"to encode and decode characters.  The mapping objects provided must support "
"the :meth:`~object.__getitem__` mapping interface; dictionaries and "
"sequences work well."
msgstr ""

#: ../../c-api/unicode.rst:1316
msgid "These are the mapping codec APIs:"
msgstr ""

#: ../../c-api/unicode.rst:1321
msgid ""
"Create a Unicode object by decoding *size* bytes of the encoded string *str*"
" using the given *mapping* object.  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1325
msgid ""
"If *mapping* is ``NULL``, Latin-1 decoding will be applied.  Else *mapping* "
"must map bytes ordinals (integers in the range from 0 to 255) to Unicode "
"strings, integers (which are then interpreted as Unicode ordinals) or "
"``None``.  Unmapped data bytes -- ones which cause a :exc:`LookupError`, as "
"well as ones which get mapped to ``None``, ``0xFFFE`` or ``'\\ufffe'``, are "
"treated as undefined mappings and cause an error."
msgstr ""

#: ../../c-api/unicode.rst:1336
msgid ""
"Encode a Unicode object using the given *mapping* object and return the "
"result as a bytes object.  Error handling is \"strict\".  Return ``NULL`` if"
" an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1340
msgid ""
"The *mapping* object must map Unicode ordinal integers to bytes objects, "
"integers in the range from 0 to 255 or ``None``.  Unmapped character "
"ordinals (ones which cause a :exc:`LookupError`) as well as mapped to "
"``None`` are treated as \"undefined mapping\" and cause an error."
msgstr ""

#: ../../c-api/unicode.rst:1346
msgid "The following codec API is special in that maps Unicode to Unicode."
msgstr ""

#: ../../c-api/unicode.rst:1350
msgid ""
"Translate a string by applying a character mapping table to it and return "
"the resulting Unicode object. Return ``NULL`` if an exception was raised by "
"the codec."
msgstr ""

#: ../../c-api/unicode.rst:1354
msgid ""
"The mapping table must map Unicode ordinal integers to Unicode ordinal "
"integers or ``None`` (causing deletion of the character)."
msgstr ""

#: ../../c-api/unicode.rst:1357
msgid ""
"Mapping tables need only provide the :meth:`~object.__getitem__` interface; "
"dictionaries and sequences work well.  Unmapped character ordinals (ones "
"which cause a :exc:`LookupError`) are left untouched and are copied as-is."
msgstr ""

#: ../../c-api/unicode.rst:1361
msgid ""
"*errors* has the usual meaning for codecs. It may be ``NULL`` which "
"indicates to use the default error handling."
msgstr ""

#: ../../c-api/unicode.rst:1366
msgid "MBCS codecs for Windows"
msgstr ""

#: ../../c-api/unicode.rst:1368
msgid ""
"These are the MBCS codec APIs. They are currently only available on Windows "
"and use the Win32 MBCS converters to implement the conversions.  Note that "
"MBCS (or DBCS) is a class of encodings, not just one.  The target encoding "
"is defined by the user settings on the machine running the codec."
msgstr ""

#: ../../c-api/unicode.rst:1375
msgid ""
"Create a Unicode object by decoding *size* bytes of the MBCS encoded string "
"*str*. Return ``NULL`` if an exception was raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1382
msgid ""
"If *consumed* is ``NULL``, behave like :c:func:`PyUnicode_DecodeMBCS`. If "
"*consumed* is not ``NULL``, :c:func:`PyUnicode_DecodeMBCSStateful` will not "
"decode trailing lead byte and the number of bytes that have been decoded "
"will be stored in *consumed*."
msgstr ""

#: ../../c-api/unicode.rst:1390
msgid ""
"Encode a Unicode object using MBCS and return the result as Python bytes "
"object.  Error handling is \"strict\".  Return ``NULL`` if an exception was "
"raised by the codec."
msgstr ""

#: ../../c-api/unicode.rst:1397
msgid ""
"Encode the Unicode object using the specified code page and return a Python "
"bytes object.  Return ``NULL`` if an exception was raised by the codec. Use "
":c:macro:`!CP_ACP` code page to get the MBCS encoder."
msgstr ""

#: ../../c-api/unicode.rst:1405
msgid "Methods & Slots"
msgstr ""

#: ../../c-api/unicode.rst:1411
msgid "Methods and Slot Functions"
msgstr ""

#: ../../c-api/unicode.rst:1413
msgid ""
"The following APIs are capable of handling Unicode objects and strings on "
"input (we refer to them as strings in the descriptions) and return Unicode "
"objects or integers as appropriate."
msgstr ""

#: ../../c-api/unicode.rst:1417
msgid "They all return ``NULL`` or ``-1`` if an exception occurs."
msgstr ""

#: ../../c-api/unicode.rst:1422
msgid "Concat two strings giving a new Unicode string."
msgstr ""

#: ../../c-api/unicode.rst:1427
msgid ""
"Split a string giving a list of Unicode strings.  If *sep* is ``NULL``, "
"splitting will be done at all whitespace substrings.  Otherwise, splits "
"occur at the given separator.  At most *maxsplit* splits will be done.  If "
"negative, no limit is set.  Separators are not included in the resulting "
"list."
msgstr ""

#: ../../c-api/unicode.rst:1435
msgid ""
"Split a Unicode string at line breaks, returning a list of Unicode strings. "
"CRLF is considered to be one line break.  If *keepends* is ``0``, the Line "
"break characters are not included in the resulting strings."
msgstr ""

#: ../../c-api/unicode.rst:1442
msgid ""
"Join a sequence of strings using the given *separator* and return the "
"resulting Unicode string."
msgstr ""

#: ../../c-api/unicode.rst:1449
msgid ""
"Return ``1`` if *substr* matches ``unicode[start:end]`` at the given tail "
"end (*direction* == ``-1`` means to do a prefix match, *direction* == ``1`` "
"a suffix match), ``0`` otherwise. Return ``-1`` if an error occurred."
msgstr ""

#: ../../c-api/unicode.rst:1457
msgid ""
"Return the first position of *substr* in ``unicode[start:end]`` using the "
"given *direction* (*direction* == ``1`` means to do a forward search, "
"*direction* == ``-1`` a backward search).  The return value is the index of "
"the first match; a value of ``-1`` indicates that no match was found, and "
"``-2`` indicates that an error occurred and an exception has been set."
msgstr ""

#: ../../c-api/unicode.rst:1467
msgid ""
"Return the first position of the character *ch* in ``unicode[start:end]`` "
"using the given *direction* (*direction* == ``1`` means to do a forward "
"search, *direction* == ``-1`` a backward search).  The return value is the "
"index of the first match; a value of ``-1`` indicates that no match was "
"found, and ``-2`` indicates that an error occurred and an exception has been"
" set."
msgstr ""

#: ../../c-api/unicode.rst:1475
msgid ""
"*start* and *end* are now adjusted to behave like ``unicode[start:end]``."
msgstr ""

#: ../../c-api/unicode.rst:1482
msgid ""
"Return the number of non-overlapping occurrences of *substr* in "
"``unicode[start:end]``.  Return ``-1`` if an error occurred."
msgstr ""

#: ../../c-api/unicode.rst:1489
msgid ""
"Replace at most *maxcount* occurrences of *substr* in *unicode* with "
"*replstr* and return the resulting Unicode object. *maxcount* == ``-1`` "
"means replace all occurrences."
msgstr ""

#: ../../c-api/unicode.rst:1496
msgid ""
"Compare two strings and return ``-1``, ``0``, ``1`` for less than, equal, "
"and greater than, respectively."
msgstr ""

#: ../../c-api/unicode.rst:1499
msgid ""
"This function returns ``-1`` upon failure, so one should call "
":c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/unicode.rst:1505
msgid ""
"Compare a Unicode object, *unicode*, with *string* and return ``-1``, ``0``,"
" ``1`` for less than, equal, and greater than, respectively. It is best to "
"pass only ASCII-encoded strings, but the function interprets the input "
"string as ISO-8859-1 if it contains non-ASCII characters."
msgstr ""

#: ../../c-api/unicode.rst:1510
msgid "This function does not raise exceptions."
msgstr ""

#: ../../c-api/unicode.rst:1515
msgid "Rich compare two Unicode strings and return one of the following:"
msgstr ""

#: ../../c-api/unicode.rst:1517
msgid "``NULL`` in case an exception was raised"
msgstr ""

#: ../../c-api/unicode.rst:1518
msgid ":c:data:`Py_True` or :c:data:`Py_False` for successful comparisons"
msgstr ""

#: ../../c-api/unicode.rst:1519
msgid ":c:data:`Py_NotImplemented` in case the type combination is unknown"
msgstr ""

#: ../../c-api/unicode.rst:1521
msgid ""
"Possible values for *op* are :c:macro:`Py_GT`, :c:macro:`Py_GE`, "
":c:macro:`Py_EQ`, :c:macro:`Py_NE`, :c:macro:`Py_LT`, and :c:macro:`Py_LE`."
msgstr ""

#: ../../c-api/unicode.rst:1527
msgid ""
"Return a new string object from *format* and *args*; this is analogous to "
"``format % args``."
msgstr ""

#: ../../c-api/unicode.rst:1533
msgid ""
"Check whether *substr* is contained in *unicode* and return true or false "
"accordingly."
msgstr ""

#: ../../c-api/unicode.rst:1536
msgid ""
"*substr* has to coerce to a one element Unicode string. ``-1`` is returned "
"if there was an error."
msgstr ""

#: ../../c-api/unicode.rst:1542
msgid ""
"Intern the argument :c:expr:`*p_unicode` in place.  The argument must be the"
" address of a pointer variable pointing to a Python Unicode string object.  "
"If there is an existing interned string that is the same as "
":c:expr:`*p_unicode`, it sets :c:expr:`*p_unicode` to it (releasing the "
"reference to the old string object and creating a new :term:`strong "
"reference` to the interned string object), otherwise it leaves "
":c:expr:`*p_unicode` alone and interns it (creating a new :term:`strong "
"reference`). (Clarification: even though there is a lot of talk about "
"references, think of this function as reference-neutral; you own the object "
"after the call if and only if you owned it before the call.)"
msgstr ""

#: ../../c-api/unicode.rst:1555
msgid ""
"A combination of :c:func:`PyUnicode_FromString` and "
":c:func:`PyUnicode_InternInPlace`, returning either a new Unicode string "
"object that has been interned, or a new (\"owned\") reference to an earlier "
"interned string object with the same value."
msgstr ""
