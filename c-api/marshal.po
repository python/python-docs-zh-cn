# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-27 14:20+0000\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr "数据 marshal 操作支持"

#: ../../c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data"
" into the serialization format, and additional functions that can be used to"
" read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""
"这些例程允许 C 代码处理与 :mod:`marshal` 模块所用相同数据格式的序列化对象。 "
"其中有些函数可用来将数据写入这种序列化格式，另一些函数则可用来读取并恢复数据。 用于存储 marshal 数据的文件必须以二进制模式打开。"

#: ../../c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr "数字值在存储时会将最低位字节放在开头。"

#: ../../c-api/marshal.rst:16
msgid ""
"The module supports several versions of the data format; see the "
":py:mod:`Python module documentation <marshal>` for details."
msgstr "该模块支持多种版本的数据格式；请参阅 :py:mod:`Python 模块文档 <marshal>` 了解详情。"

#: ../../c-api/marshal.rst:21
msgid "The current format version. See :py:data:`marshal.version`."
msgstr "当前格式版本。 参见 :py:data:`marshal.version`。"

#: ../../c-api/marshal.rst:25
msgid ""
"Marshal a :c:expr:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:expr:`long` type.  *version* indicates the file format."
msgstr ""
"将一个 :c:expr:`long` 整数 *value* 以 marshal 格式写入 *file*。 这将只写入 *value* 中最低的 32 "
"个比特位；无论本机的 :c:expr:`long` 类型的大小如何。 *version* 指明文件格式的版本。"

#: ../../c-api/marshal.rst:29 ../../c-api/marshal.rst:37
msgid ""
"This function can fail, in which case it sets the error indicator. Use "
":c:func:`PyErr_Occurred` to check for that."
msgstr "此函数可能失败，在这种情况下它半设置错误提示符。 请使用 :c:func:`PyErr_Occurred` 进行检测。"

#: ../../c-api/marshal.rst:34
msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file "
"format."
msgstr "将一个 Python 对象 *value* 以 marshal 格式写入 *file*。 *version* 指明文件格式的版本。"

#: ../../c-api/marshal.rst:42
msgid ""
"Return a bytes object containing the marshalled representation of *value*. "
"*version* indicates the file format."
msgstr "返回一个包含 *value* 的 marshal 表示形式的字节串对象。 *version* 指明文件格式的版本。"

#: ../../c-api/marshal.rst:46
msgid "The following functions allow marshalled values to be read back in."
msgstr "以下函数允许读取并恢复存储为 marshal 格式的值。"

#: ../../c-api/marshal.rst:51
msgid ""
"Return a C :c:expr:`long` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`long`."
msgstr ""
"从打开用于读取的 :c:expr:`FILE*` 对应的数据流返回一个 C :c:expr:`long`。 使用此函数只能读取 32 位的值，无论本机 "
":c:expr:`long` 类型的大小如何。"

#: ../../c-api/marshal.rst:55 ../../c-api/marshal.rst:65
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`) and returns "
"``-1``."
msgstr "发生错误时，将设置适当的异常 (:exc:`EOFError`) 并返回 ``-1``。"

#: ../../c-api/marshal.rst:61
msgid ""
"Return a C :c:expr:`short` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 16-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`short`."
msgstr ""
"从打开用于读取的 :c:expr:`FILE*` 对应的数据流返回一个 C :c:expr:`short`。使用此函数只能读取 16 位的值，无论本机 "
":c:expr:`short` 类型的大小如何。"

#: ../../c-api/marshal.rst:71
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading."
msgstr "从打开用于读取的 :c:expr:`FILE*` 对应的数据流返回一个 Python 对象。"

#: ../../c-api/marshal.rst:74 ../../c-api/marshal.rst:88
#: ../../c-api/marshal.rst:97
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`, :exc:`ValueError`"
" or :exc:`TypeError`) and returns ``NULL``."
msgstr ""
"发生错误时，将设置适当的异常 (:exc:`EOFError`, :exc:`ValueError` 或 :exc:`TypeError`) 并返回 "
"``NULL``。"

#: ../../c-api/marshal.rst:80
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file."
msgstr ""
"从打开用于读取的 :c:expr:`FILE*` 对应的数据流返回一个 Python 对象。 不同于 "
":c:func:`PyMarshal_ReadObjectFromFile`，此函数假定将不再从该文件读取更多的对象，允许其将文件数据积极地载入内存，以便反序列化过程可以在内存中的数据上操作而不是每次从文件读取一个字节。"
" 只有当你确定不会再从文件读取任何内容时方可使用此形式。"

#: ../../c-api/marshal.rst:94
msgid ""
"Return a Python object from the data stream in a byte buffer containing "
"*len* bytes pointed to by *data*."
msgstr "从包含指向 *data* 的 *len* 个字节的字节缓冲区对应的数据流返回一个 Python 对象。"
