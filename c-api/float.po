# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/float.rst:6
msgid "Floating Point Objects"
msgstr "浮点数对象"

#: ../../c-api/float.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating point "
"object."
msgstr "这个C类型 :c:type:`PyObject` 的子类型代表一个Python浮点数对象。"

#: ../../c-api/float.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating point"
" type.  This is the same object as :class:`float` in the Python layer."
msgstr ""
"这是个属于C类型 :c:type:`PyTypeObject` 的代表Python浮点类型的实例。在Python层面的类型 :class:`float`"
" 是同一个对象。"

#: ../../c-api/float.rst:24
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of "
":c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"如果它的参数是一个 :c:type:`PyFloatObject` 或者 :c:type:`PyFloatObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/float.rst:30
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"如果它的参数是一个 :c:type:`PyFloatObject` 但不是 :c:type:`PyFloatObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/float.rst:36
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or ``NULL`` on failure."
msgstr "根据字符串 *str* 的值创建一个 :c:type:`PyFloatObject`，失败时返回 ``NULL``。"

#: ../../c-api/float.rst:42
msgid ""
"Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr "根据 *v* 创建一个 :c:type:`PyFloatObject` 对象，失败时返回 ``NULL``。"

#: ../../c-api/float.rst:47
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*.  If"
" *pyfloat* is not a Python floating point object but has a "
":meth:`~object.__float__` method, this method will first be called to "
"convert *pyfloat* into a float. If :meth:`!__float__` is not defined then it"
" falls back to :meth:`~object.__index__`. This method returns ``-1.0`` upon "
"failure, so one should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/float.rst:54
msgid "Use :meth:`~object.__index__` if available."
msgstr "如果可能将使用 :meth:`~object.__index__`。"

#: ../../c-api/float.rst:60
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*, but"
" without error checking."
msgstr ""

#: ../../c-api/float.rst:66
msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header"
" file :file:`float.h`."
msgstr ""
"返回一个 structseq 实例，其中包含有关 float 的精度、最小值和最大值的信息。 它是头文件 :file:`float.h` "
"的一个简单包装。"

#: ../../c-api/float.rst:73
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C "
":c:expr:`double`."
msgstr ""

#: ../../c-api/float.rst:78
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C "
":c:expr:`double`."
msgstr ""

#: ../../c-api/float.rst:82
msgid "Pack and Unpack functions"
msgstr ""

#: ../../c-api/float.rst:84
msgid ""
"The pack and unpack functions provide an efficient platform-independent way "
"to store floating-point values as byte strings. The Pack routines produce a "
"bytes string from a C :c:expr:`double`, and the Unpack routines produce a C "
":c:expr:`double` from such a bytes string. The suffix (2, 4 or 8) specifies "
"the number of bytes in the bytes string."
msgstr ""

#: ../../c-api/float.rst:90
msgid ""
"On platforms that appear to use IEEE 754 formats these functions work by "
"copying bits. On other platforms, the 2-byte format is identical to the IEEE"
" 754 binary16 half-precision format, the 4-byte format (32-bit) is identical"
" to the IEEE 754 binary32 single precision format, and the 8-byte format to "
"the IEEE 754 binary64 double precision format, although the packing of INFs "
"and NaNs (if such things exist on the platform) isn't handled correctly, and"
" attempting to unpack a bytes string containing an IEEE INF or NaN will "
"raise an exception."
msgstr ""

#: ../../c-api/float.rst:99
msgid ""
"On non-IEEE platforms with more precision, or larger dynamic range, than "
"IEEE 754 supports, not all values can be packed; on non-IEEE platforms with "
"less precision, or smaller dynamic range, not all values can be unpacked. "
"What happens in such cases is partly accidental (alas)."
msgstr ""

#: ../../c-api/float.rst:107
msgid "Pack functions"
msgstr ""

#: ../../c-api/float.rst:109
msgid ""
"The pack routines write 2, 4 or 8 bytes, starting at *p*. *le* is an "
":c:expr:`int` argument, non-zero if you want the bytes string in little-"
"endian format (exponent last, at ``p+1``, ``p+3``, or ``p+6`` ``p+7``), zero"
" if you want big-endian format (exponent first, at *p*). The "
":c:macro:`PY_BIG_ENDIAN` constant can be used to use the native endian: it "
"is equal to ``1`` on big endian processor, or ``0`` on little endian "
"processor."
msgstr ""

#: ../../c-api/float.rst:116
msgid ""
"Return value: ``0`` if all is OK, ``-1`` if error (and an exception is set, "
"most likely :exc:`OverflowError`)."
msgstr ""

#: ../../c-api/float.rst:119
msgid "There are two problems on non-IEEE platforms:"
msgstr ""

#: ../../c-api/float.rst:121
msgid "What this does is undefined if *x* is a NaN or infinity."
msgstr ""

#: ../../c-api/float.rst:122
msgid "``-0.0`` and ``+0.0`` produce the same bytes string."
msgstr ""

#: ../../c-api/float.rst:126
msgid "Pack a C double as the IEEE 754 binary16 half-precision format."
msgstr ""

#: ../../c-api/float.rst:130
msgid "Pack a C double as the IEEE 754 binary32 single precision format."
msgstr ""

#: ../../c-api/float.rst:134
msgid "Pack a C double as the IEEE 754 binary64 double precision format."
msgstr ""

#: ../../c-api/float.rst:138
msgid "Unpack functions"
msgstr ""

#: ../../c-api/float.rst:140
msgid ""
"The unpack routines read 2, 4 or 8 bytes, starting at *p*.  *le* is an "
":c:expr:`int` argument, non-zero if the bytes string is in little-endian "
"format (exponent last, at ``p+1``, ``p+3`` or ``p+6`` and ``p+7``), zero if "
"big-endian (exponent first, at *p*). The :c:macro:`PY_BIG_ENDIAN` constant "
"can be used to use the native endian: it is equal to ``1`` on big endian "
"processor, or ``0`` on little endian processor."
msgstr ""

#: ../../c-api/float.rst:147
msgid ""
"Return value: The unpacked double.  On error, this is ``-1.0`` and "
":c:func:`PyErr_Occurred` is true (and an exception is set, most likely "
":exc:`OverflowError`)."
msgstr ""

#: ../../c-api/float.rst:151
msgid ""
"Note that on a non-IEEE platform this will refuse to unpack a bytes string "
"that represents a NaN or infinity."
msgstr ""

#: ../../c-api/float.rst:156
msgid "Unpack the IEEE 754 binary16 half-precision format as a C double."
msgstr ""

#: ../../c-api/float.rst:160
msgid "Unpack the IEEE 754 binary32 single precision format as a C double."
msgstr ""

#: ../../c-api/float.rst:164
msgid "Unpack the IEEE 754 binary64 double precision format as a C double."
msgstr ""

#: ../../c-api/float.rst:8
msgid "object"
msgstr "object -- 对象"

#: ../../c-api/float.rst:8
msgid "floating point"
msgstr "浮点数"
