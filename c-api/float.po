# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:48+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/float.rst:6
msgid "Floating-Point Objects"
msgstr "浮点数对象"

#: ../../c-api/float.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating-point "
"object."
msgstr "这个 :c:type:`PyObject` 的子类型代表一个 Python 浮点数对象。"

#: ../../c-api/float.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating-point"
" type.  This is the same object as :class:`float` in the Python layer."
msgstr ""
"这个 :c:type:`PyTypeObject` 实例代表 Python 浮点数类型。 这与 Python 层面的 :class:`float` "
"是同一个对象。"

#: ../../c-api/float.rst:24
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of "
":c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"如果它的参数是一个 :c:type:`PyFloatObject` 或者 :c:type:`PyFloatObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/float.rst:30
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"如果它的参数是一个 :c:type:`PyFloatObject` 但不是 :c:type:`PyFloatObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/float.rst:36
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or ``NULL`` on failure."
msgstr "根据字符串 *str* 的值创建一个 :c:type:`PyFloatObject`，失败时返回 ``NULL``。"

#: ../../c-api/float.rst:42
msgid ""
"Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr "根据 *v* 创建一个 :c:type:`PyFloatObject` 对象，失败时返回 ``NULL``。"

#: ../../c-api/float.rst:47
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*.  If"
" *pyfloat* is not a Python floating-point object but has a "
":meth:`~object.__float__` method, this method will first be called to "
"convert *pyfloat* into a float. If :meth:`!__float__` is not defined then it"
" falls back to :meth:`~object.__index__`. This method returns ``-1.0`` upon "
"failure, so one should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"返回 *pyfloat* 的内容的 C :c:expr:`double` 表示形式。 如果 *pyfloat* 不是一个 Python "
"浮点数对象但是具有 :meth:`~object.__float__` 方法，则会先调用此方法来将 *pyfloat* 转换为浮点数。 如果 "
":meth:`!__float__` 未定义则将回退至 :meth:`~object.__index__`。 此方法在失败时将返回 "
"``-1.0``，因此开发者应当调用 :c:func:`PyErr_Occurred` 来检测错误。"

#: ../../c-api/float.rst:54
msgid "Use :meth:`~object.__index__` if available."
msgstr "如果可能将使用 :meth:`~object.__index__`。"

#: ../../c-api/float.rst:60
msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*, but"
" without error checking."
msgstr "返回 *pyfloat* 的 C :c:expr:`double` 表示形式，但不带错误检测。"

#: ../../c-api/float.rst:66
msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header"
" file :file:`float.h`."
msgstr ""
"返回一个 structseq 实例，其中包含有关 float 的精度、最小值和最大值的信息。 它是头文件 :file:`float.h` "
"的一个简单包装。"

#: ../../c-api/float.rst:73
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C "
":c:expr:`double`."
msgstr "返回 C :c:expr:`double` 形式的最大可表示有限浮点数 *DBL_MAX*。"

#: ../../c-api/float.rst:78
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C "
":c:expr:`double`."
msgstr "返回 C :c:expr:`double` 形式的最小正规化正浮点数 *DBL_MIN*。"

#: ../../c-api/float.rst:82
msgid "Pack and Unpack functions"
msgstr "打包与解包函数"

#: ../../c-api/float.rst:84
msgid ""
"The pack and unpack functions provide an efficient platform-independent way "
"to store floating-point values as byte strings. The Pack routines produce a "
"bytes string from a C :c:expr:`double`, and the Unpack routines produce a C "
":c:expr:`double` from such a bytes string. The suffix (2, 4 or 8) specifies "
"the number of bytes in the bytes string."
msgstr ""
"打包与解包函数提供了独立于平台的高效方式来将浮点数值存储为字节串。 Pack 例程根据 C :c:expr:`double` 产生字节串，而 "
"Unpack 例程根据这样的字节串产生 C :c:expr:`double`。 后缀 (2, 4 or 8) 指明字节串中的字节数。"

#: ../../c-api/float.rst:90
msgid ""
"On platforms that appear to use IEEE 754 formats these functions work by "
"copying bits. On other platforms, the 2-byte format is identical to the IEEE"
" 754 binary16 half-precision format, the 4-byte format (32-bit) is identical"
" to the IEEE 754 binary32 single precision format, and the 8-byte format to "
"the IEEE 754 binary64 double precision format, although the packing of INFs "
"and NaNs (if such things exist on the platform) isn't handled correctly, and"
" attempting to unpack a bytes string containing an IEEE INF or NaN will "
"raise an exception."
msgstr ""
"在明显使用 IEEE 754 格式的平台上这些函数是通过拷贝比特位来实现的。 在其他平台上，2 字节格式与 IEEE 754 binary16 "
"半精度格式相同，4 字节格式 (32 位) 与 IEEE 754 binary32 单精度格式相同，而 8 字节格式则与 IEEE 754 "
"双精度格式相同，不过 INF 和 NaN (如果平台存在这两种值) 未得到正确处理，而试图对包含 IEEE INF 或 NaN "
"的字节串执行解包将会引发一个异常。"

#: ../../c-api/float.rst:99
msgid ""
"Note that NaNs type may not be preserved on IEEE platforms (silent NaN "
"become quiet), for example on x86 systems in 32-bit mode."
msgstr "请注意 NaN 类型在 IEEE 平台上可能不会被保留（静默的 NaN 不会报错），例如在 32 位模式的 x86 系统上。"

#: ../../c-api/float.rst:102
msgid ""
"On non-IEEE platforms with more precision, or larger dynamic range, than "
"IEEE 754 supports, not all values can be packed; on non-IEEE platforms with "
"less precision, or smaller dynamic range, not all values can be unpacked. "
"What happens in such cases is partly accidental (alas)."
msgstr ""
"在具有比 IEEE 754 所支持的更高精度，或更大动态范围的非 IEEE 平台上，不是所有的值都能被打包；在具有更低精度，或更小动态范围的非 IEEE"
" 平台上，则不是所有的值都能被解包。 在这种情况下发生的事情有一部分将是偶然的（无奈）。"

#: ../../c-api/float.rst:110
msgid "Pack functions"
msgstr "打包函数"

#: ../../c-api/float.rst:112
msgid ""
"The pack routines write 2, 4 or 8 bytes, starting at *p*. *le* is an "
":c:expr:`int` argument, non-zero if you want the bytes string in little-"
"endian format (exponent last, at ``p+1``, ``p+3``, or ``p+6`` ``p+7``), zero"
" if you want big-endian format (exponent first, at *p*). The "
":c:macro:`PY_BIG_ENDIAN` constant can be used to use the native endian: it "
"is equal to ``1`` on big endian processor, or ``0`` on little endian "
"processor."
msgstr ""
"打包例程会写入 2, 4 或 8 个字节，从 *p* 开始。 *le* 是一个 :c:expr:`int` 参数，如果你想要字节串为小端序格式 "
"(指数部分放在后面，位于 ``p+1``, ``p+3`` 或 ``p+6`` ``p+7``) 则其应为非零值，如果你想要大端序格式 "
"(指数部分放在前面，位于 *p*) 则其应为零。 :c:macro:`PY_BIG_ENDIAN` 常量可被用于使用本机端序：在大端序处理器上等于 "
"``1``，在小端序处理器上则等于 ``0``。"

#: ../../c-api/float.rst:119
msgid ""
"Return value: ``0`` if all is OK, ``-1`` if error (and an exception is set, "
"most likely :exc:`OverflowError`)."
msgstr ""
"返回值: 如果一切正常则为 ``0``，如果出错则为 ``-1`` (并会设置一个异常，最大可能为 :exc:`OverflowError`)。"

#: ../../c-api/float.rst:122
msgid "There are two problems on non-IEEE platforms:"
msgstr "在非 IEEE 平台上存在两个问题:"

#: ../../c-api/float.rst:124
msgid "What this does is undefined if *x* is a NaN or infinity."
msgstr "如果 *x* 为 NaN 或无穷大则此函数的行为是未定义的。"

#: ../../c-api/float.rst:125
msgid "``-0.0`` and ``+0.0`` produce the same bytes string."
msgstr "``-0.0`` 和 ``+0.0`` 将产生相同的字节串。"

#: ../../c-api/float.rst:129
msgid "Pack a C double as the IEEE 754 binary16 half-precision format."
msgstr "将 C double 打包为 IEEE 754 binary16 半精度格式。"

#: ../../c-api/float.rst:133
msgid "Pack a C double as the IEEE 754 binary32 single precision format."
msgstr "将 C double 打包为 IEEE 754 binary32 单精度格式。"

#: ../../c-api/float.rst:137
msgid "Pack a C double as the IEEE 754 binary64 double precision format."
msgstr "将 C double 打包为 IEEE 754 binary64 双精度格式。"

#: ../../c-api/float.rst:141
msgid "Unpack functions"
msgstr "解包函数"

#: ../../c-api/float.rst:143
msgid ""
"The unpack routines read 2, 4 or 8 bytes, starting at *p*.  *le* is an "
":c:expr:`int` argument, non-zero if the bytes string is in little-endian "
"format (exponent last, at ``p+1``, ``p+3`` or ``p+6`` and ``p+7``), zero if "
"big-endian (exponent first, at *p*). The :c:macro:`PY_BIG_ENDIAN` constant "
"can be used to use the native endian: it is equal to ``1`` on big endian "
"processor, or ``0`` on little endian processor."
msgstr ""
"解包例程会读取 2, 4 或 8 个字节，从 *p* 开始。 *le* 是一个 :c:expr:`int` 参数，如果字节串为小端序格式 "
"(指数部门放在后面，位于 ``p+1``, ``p+3`` 或 ``p+6`` 和 ``p+7``) 则其应为非零值，如果为大端序格式 "
"(指数部分放在前面，位于 *p*) 则其应为零。 :c:macro:`PY_BIG_ENDIAN` 常量可被用于使用本机端序：在大端序处理器上等于 "
"``1``，在小端序处理器上则等于 ``0``。"

#: ../../c-api/float.rst:150
msgid ""
"Return value: The unpacked double.  On error, this is ``-1.0`` and "
":c:func:`PyErr_Occurred` is true (and an exception is set, most likely "
":exc:`OverflowError`)."
msgstr ""
"返回值: 解包后的 double。 出错时，返回值为 ``-1.0`` 且 :c:func:`PyErr_Occurred` 为真值 "
"(并且会设置一个异常，最大可能为 :exc:`OverflowError`)。"

#: ../../c-api/float.rst:154
msgid ""
"Note that on a non-IEEE platform this will refuse to unpack a bytes string "
"that represents a NaN or infinity."
msgstr "请注意在非 IEEE 平台上此函数将拒绝解包表示 NaN 或无穷大的字节串。"

#: ../../c-api/float.rst:159
msgid "Unpack the IEEE 754 binary16 half-precision format as a C double."
msgstr "将 IEEE 754 binary16 半精度格式解包为 C double。"

#: ../../c-api/float.rst:163
msgid "Unpack the IEEE 754 binary32 single precision format as a C double."
msgstr "将 IEEE 754 binary32 单精度格式解包为 C double。"

#: ../../c-api/float.rst:167
msgid "Unpack the IEEE 754 binary64 double precision format as a C double."
msgstr "将 IEEE 754 binary64 双精度格式解包为 C double。"

#: ../../c-api/float.rst:8
msgid "object"
msgstr "object -- 对象"

#: ../../c-api/float.rst:8
msgid "floating-point"
msgstr "浮点数"
