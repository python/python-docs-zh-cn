# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/float.rst:6
msgid "Floating Point Objects"
msgstr "浮点数对象"

#: ../../c-api/float.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating point "
"object."
msgstr "这个C类型 :c:type:`PyObject` 的子类型代表一个Python浮点数对象。"

#: ../../c-api/float.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating point"
" type.  This is the same object as :class:`float` in the Python layer."
msgstr ""
"这是个属于C类型 :c:type:`PyTypeObject` 的代表Python浮点类型的实例。在Python层面的类型 :class:`float`"
" 是同一个对象。"

#: ../../c-api/float.rst:24
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of "
":c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"如果它的参数是一个 :c:type:`PyFloatObject` 或者 :c:type:`PyFloatObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/float.rst:30
msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"如果它的参数是一个 :c:type:`PyFloatObject` 但不是 :c:type:`PyFloatObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/float.rst:36
msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or ``NULL`` on failure."
msgstr "根据字符串 *str* 的值创建一个 :c:type:`PyFloatObject`，失败时返回 ``NULL``。"

#: ../../c-api/float.rst:42
msgid ""
"Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr "根据 *v* 创建一个 :c:type:`PyFloatObject` 对象，失败时返回 ``NULL``。"

#: ../../c-api/float.rst:47
msgid ""
"Return a C :c:type:`double` representation of the contents of *pyfloat*.  If"
" *pyfloat* is not a Python floating point object but has a :meth:`__float__`"
" method, this method will first be called to convert *pyfloat* into a float."
" If ``__float__()`` is not defined then it falls back to :meth:`__index__`. "
"This method returns ``-1.0`` upon failure, so one should call "
":c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"返回一个 C :c:type:`double` 代表 *pyfloat* 的内容。 如果 *pyfloat* 不是一个 Python 浮点数对象但是具有"
" :meth:`__float__` 方法，此方法将首先被调用，将 *pyfloat* 转换成一个数点数。 如果 ``__float__()`` "
"未定义则将回退至 :meth:`__index__`。 如果失败，此方法将返回 ``-1.0``，因此开发者应当调用 "
":c:func:`PyErr_Occurred` 来检查错误。"

#: ../../c-api/float.rst:54
msgid "Use :meth:`__index__` if available."
msgstr "如果可用将使用 :meth:`__index__`。"

#: ../../c-api/float.rst:60
msgid ""
"Return a C :c:type:`double` representation of the contents of *pyfloat*, but"
" without error checking."
msgstr "返回一个 *pyfloat* 内容的 C :c:type:`double` 表示，但没有错误检查。"

#: ../../c-api/float.rst:66
msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header"
" file :file:`float.h`."
msgstr ""
"返回一个 structseq 实例，其中包含有关 float 的精度、最小值和最大值的信息。 它是头文件 :file:`float.h` "
"的一个简单包装。"

#: ../../c-api/float.rst:73
msgid ""
"Return the maximum representable finite float *DBL_MAX* as C "
":c:type:`double`."
msgstr "返回最大可表示的有限浮点数 *DBL_MAX* 为 C :c:type:`double` 。"

#: ../../c-api/float.rst:78
msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C "
":c:type:`double`."
msgstr "返回最小可表示归一化正浮点数 *DBL_MIN* 为 C :c:type:`double` 。"
