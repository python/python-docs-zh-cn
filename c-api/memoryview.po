# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/memoryview.rst:9
msgid "MemoryView objects"
msgstr ""

#: ../../c-api/memoryview.rst:11
msgid ""
"A :class:`memoryview` object exposes the C level :ref:`buffer interface "
"<bufferobjects>` as a Python object which can then be passed around like any"
" other object."
msgstr ""

#: ../../c-api/memoryview.rst:18
msgid ""
"Create a memoryview object from an object that provides the buffer "
"interface. If *obj* supports writable buffer exports, the memoryview object "
"will be read/write, otherwise it may be either read-only or read/write at "
"the discretion of the exporter."
msgstr ""

#: ../../c-api/memoryview.rst:26
msgid "Flag to request a readonly buffer."
msgstr ""

#: ../../c-api/memoryview.rst:31
msgid "Flag to request a writable buffer."
msgstr ""

#: ../../c-api/memoryview.rst:36
msgid ""
"Create a memoryview object using *mem* as the underlying buffer. *flags* can"
" be one of :c:macro:`PyBUF_READ` or :c:macro:`PyBUF_WRITE`."
msgstr ""

#: ../../c-api/memoryview.rst:43
msgid ""
"Create a memoryview object wrapping the given buffer structure *view*. For "
"simple byte buffers, :c:func:`PyMemoryView_FromMemory` is the preferred "
"function."
msgstr ""

#: ../../c-api/memoryview.rst:49
msgid ""
"Create a memoryview object to a :term:`contiguous` chunk of memory (in "
"either 'C' or 'F'ortran *order*) from an object that defines the buffer "
"interface. If memory is contiguous, the memoryview object points to the "
"original memory. Otherwise, a copy is made and the memoryview points to a "
"new bytes object."
msgstr ""

#: ../../c-api/memoryview.rst:55
msgid ""
"*buffertype* can be one of :c:macro:`PyBUF_READ` or :c:macro:`PyBUF_WRITE`."
msgstr ""

#: ../../c-api/memoryview.rst:60
msgid ""
"Return true if the object *obj* is a memoryview object.  It is not currently"
" allowed to create subclasses of :class:`memoryview`.  This function always "
"succeeds."
msgstr ""

#: ../../c-api/memoryview.rst:67
msgid ""
"Return a pointer to the memoryview's private copy of the exporter's buffer. "
"*mview* **must** be a memoryview instance; this macro doesn't check its "
"type, you must do it yourself or you will risk crashes."
msgstr ""

#: ../../c-api/memoryview.rst:73
msgid ""
"Return either a pointer to the exporting object that the memoryview is based"
" on or ``NULL`` if the memoryview has been created by one of the functions "
":c:func:`PyMemoryView_FromMemory` or :c:func:`PyMemoryView_FromBuffer`. "
"*mview* **must** be a memoryview instance."
msgstr ""

#: ../../c-api/memoryview.rst:5
msgid "object"
msgstr ""

#: ../../c-api/memoryview.rst:5
msgid "memoryview"
msgstr ""
