# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/memoryview.rst:9
msgid "MemoryView objects"
msgstr "MemoryView 对象"

#: ../../c-api/memoryview.rst:11
msgid ""
"A :class:`memoryview` object exposes the C level :ref:`buffer interface "
"<bufferobjects>` as a Python object which can then be passed around like any"
" other object."
msgstr ""
"一个 :class:`memoryview` 对象C级别的 :ref:`缓冲区接口 <bufferobjects>` "
"暴露为一个可以像任何其他对象一样传递的 Python 对象。"

#: ../../c-api/memoryview.rst:18
msgid ""
"Create a memoryview object from an object that provides the buffer "
"interface. If *obj* supports writable buffer exports, the memoryview object "
"will be read/write, otherwise it may be either read-only or read/write at "
"the discretion of the exporter."
msgstr ""
"从提供缓冲区接口的对象创建 memoryview 对象。 如果 *obj* 支持可写缓冲区导出，则 memoryview "
"对象将可以被读/写，否则它可能是只读的，也可以是导出器自行决定的读/写。"

#: ../../c-api/memoryview.rst:25
msgid ""
"Create a memoryview object using *mem* as the underlying buffer. *flags* can"
" be one of :c:macro:`PyBUF_READ` or :c:macro:`PyBUF_WRITE`."
msgstr ""
"使用 *mem* 作为底层缓冲区创建一个 memoryview 对象。 *flags* 可以是 :c:macro:`PyBUF_READ` 或者 "
":c:macro:`PyBUF_WRITE` 之一."

#: ../../c-api/memoryview.rst:32
msgid ""
"Create a memoryview object wrapping the given buffer structure *view*. For "
"simple byte buffers, :c:func:`PyMemoryView_FromMemory` is the preferred "
"function."
msgstr ""
"创建一个包含给定缓冲区结构 *view* 的 memoryview 对象。 "
"对于简单的字节缓冲区，:c:func:`PyMemoryView_FromMemory` 是首选函数。"

#: ../../c-api/memoryview.rst:38
msgid ""
"Create a memoryview object to a :term:`contiguous` chunk of memory (in "
"either 'C' or 'F'ortran *order*) from an object that defines the buffer "
"interface. If memory is contiguous, the memoryview object points to the "
"original memory. Otherwise, a copy is made and the memoryview points to a "
"new bytes object."
msgstr ""
"从定义缓冲区接口的对象创建一个 memoryview 对象 :term:`contiguous` 内存块（在 'C' 或 'F'ortran "
"*order* 中）。 如果内存是连续的，则 memoryview 对象指向原始内存。 否则，复制并且 memoryview 指向新的 bytes "
"对象。"

#: ../../c-api/memoryview.rst:47
msgid ""
"Return true if the object *obj* is a memoryview object.  It is not currently"
" allowed to create subclasses of :class:`memoryview`.  This function always "
"succeeds."
msgstr ""
"如果 *obj* 是一个 memoryview 对象则返回真值。 目前不允许创建 :class:`memoryview` 的子类。 "
"此函数总是会成功执行。"

#: ../../c-api/memoryview.rst:54
msgid ""
"Return a pointer to the memoryview's private copy of the exporter's buffer. "
"*mview* **must** be a memoryview instance; this macro doesn't check its "
"type, you must do it yourself or you will risk crashes."
msgstr ""
"返回指向 memoryview 的导出缓冲区私有副本的指针。 *mview* **必须** 是一个 memoryview "
"实例；这个宏不检查它的类型，你必须自己检查，否则你将面临崩溃风险。"

#: ../../c-api/memoryview.rst:60
msgid ""
"Return either a pointer to the exporting object that the memoryview is based"
" on or ``NULL`` if the memoryview has been created by one of the functions "
":c:func:`PyMemoryView_FromMemory` or :c:func:`PyMemoryView_FromBuffer`. "
"*mview* **must** be a memoryview instance."
msgstr ""
"返回 memoryview 所基于的导出对象的指针，或者如果 memoryview 已由函数 "
":c:func:`PyMemoryView_FromMemory` 或 :c:func:`PyMemoryView_FromBuffer` 创建则返回 "
"``NULL``。 *mview* **必须** 是一个 memoryview 实例。"
