# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "整数型对象"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr "所有整数都实现为长度任意的长整数对象。"

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"在出错时，大多数 ``PyLong_As*`` API 都会返回  ``(return type)-1``，这与数字无法区分开。请采用 "
":c:func:`PyErr_Occurred` 来加以区分。"

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr "表示 Python 整数对象的 :c:type:`PyObject` 子类型。"

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"这个 :c:type:`PyTypeObject` 的实例表示 Python 的整数类型。与 Python 语言中的 :class:`int` 相同。"

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of "
":c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"如果参数是 :c:type:`PyLongObject` 或 :c:type:`PyLongObject` 的子类型，则返回 "
"True。该函数一定能够执行成功。"

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"如果其参数属于 :c:type:`PyLongObject`，但不是 :c:type:`PyLongObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr "由 *v* 返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 ``NULL`` 。"

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""
"当前的实现维护着一个整数对象数组，包含 ``-5`` 和 ``256`` 之间的所有整数对象。 若创建一个位于该区间的 int "
"时，实际得到的将是对已有对象的引用。"

#: ../../c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long`,"
" or ``NULL`` on failure."
msgstr ""
"由 C :c:type:`unsigned long` 类型返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 "
"``NULL`` 。"

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or"
" ``NULL`` on failure."
msgstr ""
"由 C :c:type:`Py_ssize_t`  返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 ``NULL`` 。"

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"由 C :c:type:`size_t` 返回一个新的 :c:type:`PyLongObject` 对象，失败则返回 ``NULL`` 。"

#: ../../c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`long long`, or "
"``NULL`` on failure."
msgstr ""
"从 C :c:type:`long long` 返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 ``NULL`` 。"

#: ../../c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"从 C :c:type:`unsigned long long` 返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 "
"``NULL`` 。"

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr "由 *v* 的整数部分返回一个新的 :c:type:`PyLongObject` 对象，失败则返回 ``NULL`` 。"

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is "
"non-``NULL``, *\\*pend* will point to the first character in *str* which "
"follows the representation of the number.  If *base* is ``0``, *str* is "
"interpreted using the :ref:`integers` definition; in this case, leading "
"zeros in a non-zero decimal number raises a :exc:`ValueError`. If *base* is "
"not ``0``, it must be between ``2`` and ``36``, inclusive.  Leading spaces "
"and single underscores after a base specifier and between digits are "
"ignored.  If there are no digits, :exc:`ValueError` will be raised."
msgstr ""
"根据 *str* 字符串值返回一个新的 :c:type:`PyLongObject` ，*base* 指定了整数的基。如果 *pend* 不为 "
"``NULL`` ，则 */*pend* 将指向 *str* 中表示数字部分后面的第一个字符。如果 *base* 为 ``0`` ， *str* 将采用"
" :ref:`integers` 的定义进行解释；这时非零十进制数的前导零会触发 :exc:`ValueError` 。如果 *base* 不为 "
"``0`` ，则须位于 ``2`` 和 ``36`` 之间（含 2 和 36）。基之后及数字之间的前导空格、单下划线将被忽略。如果不存在数字，将触发 "
":exc:`ValueError`。"

#: ../../c-api/long.rst:99
msgid "Convert a sequence of Unicode digits to a Python integer value."
msgstr "将 Unicode 数字序列转换为 Python 整数值。"

#: ../../c-api/long.rst:103
msgid ""
"Part of the old-style :c:type:`Py_UNICODE` API; please migrate to using "
":c:func:`PyLong_FromUnicodeObject`."
msgstr ""
"旧的 :c:type:`Py_UNICODE` API的一部分;请迁移到使用 :c:func:`PyLong_FromUnicodeObject` 。"

#: ../../c-api/long.rst:108
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr "将字符串 *u* 中的 Unicode 数字序列转换为 Python 整数值。"

#: ../../c-api/long.rst:116
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr "从指针 *p* 创建一个 Python 整数。可以使用 :c:func:`PyLong_AsVoidPtr` 返回的指针值。"

#: ../../c-api/long.rst:127 ../../c-api/long.rst:146
msgid ""
"Return a C :c:type:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` or "
":meth:`__int__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:type:`long` 表达方式。 如果 *obj* 不是 :c:type:`PyLongObject` "
"的实例，先调用它的 :meth:`__index__` 或 :meth:`__int__` 方法(如果有)将其转换为 "
":c:type:`PyLongObject` 。"

#: ../../c-api/long.rst:132
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:type:`long`."
msgstr "如果 *obj* 的值溢出了 :c:type:`long` 的范围，会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:135 ../../c-api/long.rst:156 ../../c-api/long.rst:178
#: ../../c-api/long.rst:199 ../../c-api/long.rst:222
msgid ""
"Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出错则返回 ``-1`` 。请用 :c:func:`PyErr_Occurred` 找出具体问题。"

#: ../../c-api/long.rst:137 ../../c-api/long.rst:158 ../../c-api/long.rst:180
#: ../../c-api/long.rst:203 ../../c-api/long.rst:288 ../../c-api/long.rst:308
msgid "Use :meth:`__index__` if available."
msgstr "如果可用将使用 :meth:`__index__`。"

#: ../../c-api/long.rst:140 ../../c-api/long.rst:161 ../../c-api/long.rst:183
#: ../../c-api/long.rst:206 ../../c-api/long.rst:291 ../../c-api/long.rst:311
msgid "Using :meth:`__int__` is deprecated."
msgstr ":meth:`__int__` 已被弃用。"

#: ../../c-api/long.rst:151
msgid ""
"If the value of *obj* is greater than :const:`LONG_MAX` or less than "
":const:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"如果 *obj* 的值大于 :const:`LONG_MAX` 或小于 :const:`LONG_MIN`，则会把 *\\*overflow* "
"分别置为``1`` 或 ``-1``，并返回 ``1``；否则，将 *\\*overflow*  置为 `0`。如果发生其他异常，则会按常规把 "
"*\\*overflow* 置为 ``0``，并返回 ``-1``。"

#: ../../c-api/long.rst:170 ../../c-api/long.rst:189
msgid ""
"Return a C :c:type:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`__index__` or "
":meth:`__int__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""

#: ../../c-api/long.rst:175
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:type:`long long`."
msgstr "如果 *obj* 值超出 :c:type:`long long` ，触发 :exc:`OverflowError`"

#: ../../c-api/long.rst:194
msgid ""
"If the value of *obj* is greater than :const:`LLONG_MAX` or less than "
":const:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"如果 *obj* 的值大于 :const:`LLONG_MAX` 或小于 :const:`LLONG_MIN`，则按常规将 *\\*overflow* "
"分别置为 ``1`` 或 ``-1``，并返回 -1，否则将 *\\*overflow* 置为 0。如果触发其他异常则 *\\*overflow* 置为"
" 0 并返回 -1。"

#: ../../c-api/long.rst:216
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C 语言 :c:type:`Py_ssize_t` 形式。*pylong* 必须是 "
":c:type:`PyLongObject` 的实例。"

#: ../../c-api/long.rst:219
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`Py_ssize_t`."
msgstr ""
"如果 *pylong* 的值超出了 :c:type:`Py_ssize_t` 的取值范围则会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:231
msgid ""
"Return a C :c:type:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C :c:type:`unsigned long` 形式。 *pylong* 必须是 "
":c:type:`PyLongObject` 的实例。"

#: ../../c-api/long.rst:234
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`unsigned long`."
msgstr ""
"如果 *pylong* 的值超出了 :c:type:`unsigned long` 的取值范围则会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:237
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr "出错时返回 ``(unsigned long)-1`` ，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:247
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an"
" instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C 语言 :c:type:`size_t` 形式。*pylong* 必须是 :c:type:`PyLongObject` "
"的实例。"

#: ../../c-api/long.rst:250
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`size_t`."
msgstr "如果 *pylong* 的值超出了 :c:type:`size_t` 的取值范围则会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:253
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr "出错时返回  ``(size_t)-1`` ，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:262
msgid ""
"Return a C :c:type:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C 语言 :c:type:`unsigned long long`  形式。*pylong* 必须是 "
":c:type:`PyLongObject` 的实例。"

#: ../../c-api/long.rst:265
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an "
":c:type:`unsigned long long`."
msgstr ""
"如果 *pylong* 的值超出了 :c:type:`unsigned long long` 的取值范围则会引发 "
":exc:`OverflowError`。"

#: ../../c-api/long.rst:268
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to"
" disambiguate."
msgstr "出错时返回 ``(unsigned long long)-1``，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:271
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr "现在 *pylong* 为负值会触发  :exc:`OverflowError`，而不是 :exc:`TypeError`。"

#: ../../c-api/long.rst:277
msgid ""
"Return a C :c:type:`unsigned long` representation of *obj*.  If *obj* is not"
" an instance of :c:type:`PyLongObject`, first call its :meth:`__index__` or "
":meth:`__int__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:type:`unsigned long` 表示形式。 如果 *obj* 不是 "
":c:type:`PyLongObject` 的实例，则会先调用其 :meth:`__index__` 或 :meth:`__int__` "
"方法（如果有的话）将其转为 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:282
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long`, return"
" the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"如果 *obj* 的值超出了 :c:type:`unsigned long` 的范围，则返回该值对 ``ULONG_MAX + 1`` 求模的差值。"

#: ../../c-api/long.rst:285
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr "出错时返回 ``(unsigned long)-1``，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:297
msgid ""
"Return a C :c:type:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its "
":meth:`__index__` or :meth:`__int__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:type:`unsigned long long` 表示形式。 如果 *obj* 不是 "
":c:type:`PyLongObject` 的实例，则会先调用其 :meth:`__index__` 或 :meth:`__int__` "
"方法（如果有的话）将其转为 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:302
msgid ""
"If the value of *obj* is out of range for an :c:type:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"如果 *obj* 的值超出了 :c:type:`unsigned long long` 的范围，则返回该值对 ``ULLONG_MAX + 1`` "
"求模的差值。"

#: ../../c-api/long.rst:305
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr "出错时返回 ``(unsigned long long)-1``，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:317
msgid ""
"Return a C :c:type:`double` representation of *pylong*.  *pylong* must be an"
" instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C 语言 :c:type:`double` 形式。*pylong* 必须是 :c:type:`PyLongObject` "
"的实例。"

#: ../../c-api/long.rst:320
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`double`."
msgstr "如果 *pylong* 的值超出了 :c:type:`double` 的取值范围则会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:323
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出错时返回  ``-1.0`` ，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:328
msgid ""
"Convert a Python integer *pylong* to a C :c:type:`void` pointer. If *pylong*"
" cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:type:`void` pointer for values created with "
":c:func:`PyLong_FromVoidPtr`."
msgstr ""
"将一个 Python 整数 *pylong* 转换为 C 语言的 :c:type:`void` 指针。 如果 *pylong* 无法转换，则会触发 "
":exc:`OverflowError`。 这只是保证为 :c:func:`PyLong_FromVoidPtr` 创建的值产生一个合法的  "
":c:type:`void` 指针。"

#: ../../c-api/long.rst:333
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出错时返回  ``NULL``，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"
