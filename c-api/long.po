# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-27 14:55+0000\n"
"PO-Revision-Date: 2025-05-08 05:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/long.rst:6
msgid "Integer Objects"
msgstr "整数型对象"

#: ../../c-api/long.rst:11
msgid ""
"All integers are implemented as \"long\" integer objects of arbitrary size."
msgstr "所有整数都实现为长度任意的长整数对象。"

#: ../../c-api/long.rst:13
msgid ""
"On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot "
"be distinguished from a number.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"在出错时，大多数 ``PyLong_As*`` API 都会返回  ``(return type)-1``，这与数字无法区分开。请采用 "
":c:func:`PyErr_Occurred` 来加以区分。"

#: ../../c-api/long.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python integer object."
msgstr "表示 Python 整数对象的 :c:type:`PyObject` 子类型。"

#: ../../c-api/long.rst:23
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python integer type. "
"This is the same object as :class:`int` in the Python layer."
msgstr ""
"这个 :c:type:`PyTypeObject` 的实例表示 Python 的整数类型。与 Python 语言中的 :class:`int` 相同。"

#: ../../c-api/long.rst:29
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of "
":c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"如果参数是 :c:type:`PyLongObject` 或 :c:type:`PyLongObject` 的子类型，则返回 "
"True。该函数一定能够执行成功。"

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`.  This function always succeeds."
msgstr ""
"如果其参数属于 :c:type:`PyLongObject`，但不是 :c:type:`PyLongObject` 的子类型则返回真值。 "
"此函数总是会成功执行。"

#: ../../c-api/long.rst:41
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or ``NULL`` on failure."
msgstr "由 *v* 返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 ``NULL`` 。"

#: ../../c-api/long.rst:43
msgid ""
"The current implementation keeps an array of integer objects for all "
"integers between ``-5`` and ``256``. When you create an int in that range "
"you actually just get back a reference to the existing object."
msgstr ""
"当前的实现维护着一个整数对象数组，包含 ``-5`` 和 ``256`` 之间的所有整数对象。 若创建一个位于该区间的 int "
"时，实际得到的将是对已有对象的引用。"

#: ../../c-api/long.rst:50
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long`,"
" or ``NULL`` on failure."
msgstr ""
"基于 C :c:expr:`unsigned long` 返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 "
"``NULL``。"

#: ../../c-api/long.rst:56
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or"
" ``NULL`` on failure."
msgstr ""
"由 C :c:type:`Py_ssize_t`  返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 ``NULL`` 。"

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"``NULL`` on failure."
msgstr ""
"由 C :c:type:`size_t` 返回一个新的 :c:type:`PyLongObject` 对象，失败则返回 ``NULL`` 。"

#: ../../c-api/long.rst:68
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`long long`, or "
"``NULL`` on failure."
msgstr ""
"基于 C :c:expr:`long long` 返回一个新的 :c:type:`PyLongObject`，失败时返回 ``NULL``。"

#: ../../c-api/long.rst:74
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:expr:`unsigned long "
"long`, or ``NULL`` on failure."
msgstr ""
"基于 C :c:expr:`unsigned long long` 返回一个新的 :c:type:`PyLongObject` 对象，失败时返回 "
"``NULL``。"

#: ../../c-api/long.rst:80
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"``NULL`` on failure."
msgstr "由 *v* 的整数部分返回一个新的 :c:type:`PyLongObject` 对象，失败则返回 ``NULL`` 。"

#: ../../c-api/long.rst:86
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*, or ``NULL`` on "
"failure.  If *pend* is non-``NULL``, *\\*pend* will point to the end of "
"*str* on success or to the first character that could not be processed on "
"error.  If *base* is ``0``, *str* is interpreted using the :ref:`integers` "
"definition; in this case, leading zeros in a non-zero decimal number raises "
"a :exc:`ValueError`.  If *base* is not ``0``, it must be between ``2`` and "
"``36``, inclusive.  Leading and trailing whitespace and single underscores "
"after a base specifier and between digits are ignored.  If there are no "
"digits or *str* is not NULL-terminated following the digits and trailing "
"whitespace, :exc:`ValueError` will be raised."
msgstr ""
"根据 *str* 字符串值返回一个新的 :c:type:`PyLongObject`，它将根据 *base* 指定的基数来解读，或是在失败时返回 "
"``NULL``。 如果 *pend* 不为 ``NULL``，则在成功时 *\\*pend* 将指向 *str* "
"中末尾而在出错时将指向第一个无法处理的字符。 如果 *base* 为 ``0``，则 *str* 将使用 :ref:`integers` "
"定义来解读；在此情况下，非零十进制数以零开头将会引发 :exc:`ValueError`。 如果 *base* 不为 ``0``，则必须在 ``2`` "
"和 ``36``，包括这两个值。 开头和末尾的空格以及基数标示符之后和数码之间的单下划线将被忽略。 如果没有数码或 *str* 中数码和末尾空格之后不以"
" NULL 结束，则将引发 :exc:`ValueError`。"

#: ../../c-api/long.rst:97
msgid ""
"Python methods :meth:`int.to_bytes` and :meth:`int.from_bytes` to convert a "
":c:type:`PyLongObject` to/from an array of bytes in base ``256``. You can "
"call those from C using :c:func:`PyObject_CallMethod`."
msgstr ""
"Python 方法 :meth:`int.to_bytes` 和 :meth:`int.from_bytes` 用于 "
":c:type:`PyLongObject` 到/从字节数组之间以 ``256`` 为基数进行转换。 你可以使用 "
":c:func:`PyObject_CallMethod` 从 C 调用它们。"

#: ../../c-api/long.rst:104
msgid ""
"Convert a sequence of Unicode digits in the string *u* to a Python integer "
"value."
msgstr "将字符串 *u* 中的 Unicode 数字序列转换为 Python 整数值。"

#: ../../c-api/long.rst:112
msgid ""
"Create a Python integer from the pointer *p*. The pointer value can be "
"retrieved from the resulting value using :c:func:`PyLong_AsVoidPtr`."
msgstr "从指针 *p* 创建一个 Python 整数。可以使用 :c:func:`PyLong_AsVoidPtr` 返回的指针值。"

#: ../../c-api/long.rst:118
msgid ""
"Create a Python integer from the value contained in the first *n_bytes* of "
"*buffer*, interpreted as a two's-complement signed number."
msgstr "将包含在 *buffer* 开头 *n_bytes* 中的值解读为一个二的补码有符号数，基于它创建一个 Python 整数。"

#: ../../c-api/long.rst:121
msgid ""
"*flags* are as for :c:func:`PyLong_AsNativeBytes`. Passing ``-1`` will "
"select the native endian that CPython was compiled with and assume that the "
"most-significant bit is a sign bit. Passing "
"``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` will produce the same result as calling"
" :c:func:`PyLong_FromUnsignedNativeBytes`. Other flags are ignored."
msgstr ""
"*flags* 与针对 :c:func:`PyLong_AsNativeBytes` 的相同。 传入 ``-1`` 将选择 CPython "
"编译时所用的原生端序并将假定主比特位是符号位。 传入 ``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` 将产生与调用 "
":c:func:`PyLong_FromUnsignedNativeBytes` 相同的结果。 其他旗标将被忽略。"

#: ../../c-api/long.rst:132
msgid ""
"Create a Python integer from the value contained in the first *n_bytes* of "
"*buffer*, interpreted as an unsigned number."
msgstr "将包含在 *buffer* 开头 *n_bytes* 中的值解读为一个无符号数，基于它创建一个Python 整数。"

#: ../../c-api/long.rst:135
msgid ""
"*flags* are as for :c:func:`PyLong_AsNativeBytes`. Passing ``-1`` will "
"select the native endian that CPython was compiled with and assume that the "
"most-significant bit is not a sign bit. Flags other than endian are ignored."
msgstr ""
"*flags* 与针对 :c:func:`PyLong_AsNativeBytes` 的相同。 传入 ``-1`` 将选择 CPython "
"编译时所用的原生端序并将假定主比特位不是符号位。 其他旗标将被忽略。"

#: ../../c-api/long.rst:148 ../../c-api/long.rst:184
msgid ""
"Return a C :c:expr:`long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__`"
" method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:expr:`long` 表示形式。 如果 *obj* 不是 :c:type:`PyLongObject` "
"的实例，则会先调用其 :meth:`~object.__index__` 方法（如果存在）将其转换为 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:152
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:expr:`long`."
msgstr "如果 *obj* 的值超出了 :c:expr:`long` 的取值范围则会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:155 ../../c-api/long.rst:193 ../../c-api/long.rst:214
#: ../../c-api/long.rst:234 ../../c-api/long.rst:257
msgid ""
"Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出错则返回 ``-1`` 。请用 :c:func:`PyErr_Occurred` 找出具体问题。"

#: ../../c-api/long.rst:157 ../../c-api/long.rst:195 ../../c-api/long.rst:216
#: ../../c-api/long.rst:238 ../../c-api/long.rst:322 ../../c-api/long.rst:342
msgid "Use :meth:`~object.__index__` if available."
msgstr "如果可能将使用 :meth:`~object.__index__`。"

#: ../../c-api/long.rst:160 ../../c-api/long.rst:198 ../../c-api/long.rst:219
#: ../../c-api/long.rst:241 ../../c-api/long.rst:325 ../../c-api/long.rst:345
msgid "This function will no longer use :meth:`~object.__int__`."
msgstr "此函数将不再使用 :meth:`~object.__int__`。"

#: ../../c-api/long.rst:167
msgid ""
"A :term:`soft deprecated` alias. Exactly equivalent to the preferred "
"``PyLong_AsLong``. In particular, it can fail with :exc:`OverflowError` or "
"another exception."
msgstr ""
"一个已经 :term:`soft deprecated` 的别名。 完全等价于推荐使用的 ``PyLong_AsLong``。 特别地，它可能因 "
":exc:`OverflowError` 或其他异常而失败。"

#: ../../c-api/long.rst:171
msgid "The function is soft deprecated."
msgstr "此函数已被软弃用。"

#: ../../c-api/long.rst:176
msgid ""
"Similar to :c:func:`PyLong_AsLong`, but store the result in a C "
":c:expr:`int` instead of a C :c:expr:`long`."
msgstr ""
"类似于 :c:func:`PyLong_AsLong`，将会将结果存放到一个 C :c:expr:`int` 而不是 C :c:expr:`long`。"

#: ../../c-api/long.rst:188
msgid ""
"If the value of *obj* is greater than :c:macro:`LONG_MAX` or less than "
":c:macro:`LONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and"
" return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"如果 *obj* 的值大于 :c:macro:`LONG_MAX` 或小于 :c:macro:`LONG_MIN`，则会把 *\\*overflow* "
"分别置为 ``1`` 或 ``-1``，并返回 ``-1``；否则，将 *\\*overflow* 置为 ``0``。 如果发生其他异常则按常规把 "
"*\\*overflow* 置为 ``0`` 并返回 ``-1``。"

#: ../../c-api/long.rst:207 ../../c-api/long.rst:225
msgid ""
"Return a C :c:expr:`long long` representation of *obj*.  If *obj* is not an "
"instance of :c:type:`PyLongObject`, first call its :meth:`~object.__index__`"
" method (if present) to convert it to a :c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:expr:`long long` 表示形式。 如果 *obj* 不是 :c:type:`PyLongObject` "
"的实例，则会先调用其 :meth:`~object.__index__` 方法（如果存在）将其转换为 :c:type:`PyLongObject`。"

#: ../../c-api/long.rst:211
msgid ""
"Raise :exc:`OverflowError` if the value of *obj* is out of range for a "
":c:expr:`long long`."
msgstr "如果 *obj* 值超出 :c:expr:`long long` 的取值范围则会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:229
msgid ""
"If the value of *obj* is greater than :c:macro:`LLONG_MAX` or less than "
":c:macro:`LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, "
"and return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs set *\\*overflow* to ``0`` and return ``-1`` as usual."
msgstr ""
"如果 *obj* 的值大于 :c:macro:`LLONG_MAX` 或小于 :c:macro:`LLONG_MIN`，则会把 "
"*\\*overflow* 分别置为 ``1`` 或 ``-1``，并返回 ``-1``；否则，将 *\\*overflow* 置为 ``0``。 "
"如果发生其他异常则按常规把 *\\*overflow* 置为 ``0`` 并返回 ``-1``。"

#: ../../c-api/long.rst:251
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of *pylong*.  *pylong* must "
"be an instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C 语言 :c:type:`Py_ssize_t` 形式。*pylong* 必须是 "
":c:type:`PyLongObject` 的实例。"

#: ../../c-api/long.rst:254
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`Py_ssize_t`."
msgstr ""
"如果 *pylong* 的值超出了 :c:type:`Py_ssize_t` 的取值范围则会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:266
msgid ""
"Return a C :c:expr:`unsigned long` representation of *pylong*.  *pylong* "
"must be an instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C :c:expr:`unsigned long` 表示形式。 *pylong* 必须是 "
":c:type:`PyLongObject` 的实例。"

#: ../../c-api/long.rst:269
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:expr:`unsigned long`."
msgstr ""
"如果 *pylong* 的值超出了 :c:expr:`unsigned long` 的取值范围则会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:272
msgid ""
"Returns ``(unsigned long)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr "出错时返回 ``(unsigned long)-1`` ，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:282
msgid ""
"Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be an"
" instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C 语言 :c:type:`size_t` 形式。*pylong* 必须是 :c:type:`PyLongObject` "
"的实例。"

#: ../../c-api/long.rst:285
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:type:`size_t`."
msgstr "如果 *pylong* 的值超出了 :c:type:`size_t` 的取值范围则会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:288
msgid ""
"Returns ``(size_t)-1`` on error. Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr "出错时返回  ``(size_t)-1`` ，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:297
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *pylong*.  "
"*pylong* must be an instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C :c:expr:`unsigned long long` 表示形式。 *pylong* 必须是 "
":c:type:`PyLongObject` 的实例。"

#: ../../c-api/long.rst:300
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for an "
":c:expr:`unsigned long long`."
msgstr ""
"如果 *pylong* 的值超出 :c:expr:`unsigned long long` 的取值范围则会引发 "
":exc:`OverflowError`。"

#: ../../c-api/long.rst:303
msgid ""
"Returns ``(unsigned long long)-1`` on error. Use :c:func:`PyErr_Occurred` to"
" disambiguate."
msgstr "出错时返回 ``(unsigned long long)-1``，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:306
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr "现在 *pylong* 为负值会触发  :exc:`OverflowError`，而不是 :exc:`TypeError`。"

#: ../../c-api/long.rst:312
msgid ""
"Return a C :c:expr:`unsigned long` representation of *obj*.  If *obj* is not"
" an instance of :c:type:`PyLongObject`, first call its "
":meth:`~object.__index__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:expr:`unsigned long` 表示形式。 如果 *obj* 不是 "
":c:type:`PyLongObject` 的实例，则会先调用其 :meth:`~object.__index__` 方法（如果存在）将其转换为 "
":c:type:`PyLongObject`。"

#: ../../c-api/long.rst:316
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long`, return"
" the reduction of that value modulo ``ULONG_MAX + 1``."
msgstr ""
"如果 *obj* 的值超出了 :c:expr:`unsigned long` 的取值范围，则返回该值对 ``ULONG_MAX + 1`` 求模的余数。"

#: ../../c-api/long.rst:319
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr "出错时返回 ``(unsigned long)-1``，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:331
msgid ""
"Return a C :c:expr:`unsigned long long` representation of *obj*.  If *obj* "
"is not an instance of :c:type:`PyLongObject`, first call its "
":meth:`~object.__index__` method (if present) to convert it to a "
":c:type:`PyLongObject`."
msgstr ""
"返回 *obj* 的 C :c:expr:`unsigned long long` 表示形式。 如果 *obj* 不是 "
":c:type:`PyLongObject` 的实例，则会先调用其 :meth:`~object.__index__` 方法（如果存在）将其转换为 "
":c:type:`PyLongObject`。"

#: ../../c-api/long.rst:336
msgid ""
"If the value of *obj* is out of range for an :c:expr:`unsigned long long`, "
"return the reduction of that value modulo ``ULLONG_MAX + 1``."
msgstr ""
"如果 *obj* 的值超出了 :c:expr:`unsigned long long` 的取值范围，则返回该值对 ``ULLONG_MAX + 1`` "
"求模的余数。"

#: ../../c-api/long.rst:339
msgid ""
"Returns ``(unsigned long long)-1`` on error.  Use :c:func:`PyErr_Occurred` "
"to disambiguate."
msgstr "出错时返回 ``(unsigned long long)-1``，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:351
msgid ""
"Return a C :c:expr:`double` representation of *pylong*.  *pylong* must be an"
" instance of :c:type:`PyLongObject`."
msgstr ""
"返回 *pylong* 的 C :c:expr:`double` 表示形式。 *pylong* 必须是 :c:type:`PyLongObject` "
"的实例。"

#: ../../c-api/long.rst:354
msgid ""
"Raise :exc:`OverflowError` if the value of *pylong* is out of range for a "
":c:expr:`double`."
msgstr "如果 *pylong* 的值超出了 :c:expr:`double` 的取值范围则会引发 :exc:`OverflowError`。"

#: ../../c-api/long.rst:357
msgid ""
"Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出错时返回  ``-1.0`` ，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:362
msgid ""
"Convert a Python integer *pylong* to a C :c:expr:`void` pointer. If *pylong*"
" cannot be converted, an :exc:`OverflowError` will be raised.  This is only "
"assured to produce a usable :c:expr:`void` pointer for values created with "
":c:func:`PyLong_FromVoidPtr`."
msgstr ""
"将一个 Python 整数 *pylong* 转换为 C :c:expr:`void` 指针。 如果 *pylong* 无法被转换，则将引发 "
":exc:`OverflowError`。 这只是为了保证将通过 :c:func:`PyLong_FromVoidPtr` 创建的值产生一个可用的 "
":c:expr:`void` 指针。"

#: ../../c-api/long.rst:367
msgid ""
"Returns ``NULL`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate."
msgstr "出错时返回  ``NULL``，请利用 :c:func:`PyErr_Occurred` 辨别具体问题。"

#: ../../c-api/long.rst:372
msgid ""
"Copy the Python integer value *pylong* to a native *buffer* of size "
"*n_bytes*. The *flags* can be set to ``-1`` to behave similarly to a C cast,"
" or to values documented below to control the behavior."
msgstr ""
"将 Python 整数值 *pylong* 拷贝到一个大小为 *n_bytes* 的原生 *buffer* 中。 *flags* 可设为 ``-1`` "
"以使其行为类似于 C 强制转换类型，或是用下文中的值来控制其行为。"

#: ../../c-api/long.rst:376
msgid ""
"Returns ``-1`` with an exception raised on error.  This may happen if "
"*pylong* cannot be interpreted as an integer, or if *pylong* was negative "
"and the ``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` flag was set."
msgstr ""
"当发生错误时将返回 ``-1`` 并设置一个异常。 如果 *pylong* 无法被解读为一个整数，或者如果 *pylong* 为负值并且设置了 "
"``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` 旗标就可能出现这种情况。"

#: ../../c-api/long.rst:380
msgid ""
"Otherwise, returns the number of bytes required to store the value. If this "
"is equal to or less than *n_bytes*, the entire value was copied. All "
"*n_bytes* of the buffer are written: large buffers are padded with zeroes."
msgstr ""
"在其他情况下，将返回存储该值所需要的字节数量。 如果该数量小于等于 *n_bytes*，则将拷贝整个值。 缓冲区的 *n_bytes* "
"将全部被写入：更大的缓冲区将以零值填充。"

#: ../../c-api/long.rst:385
msgid ""
"If the returned value is greater than *n_bytes*, the value was truncated: as"
" many of the lowest bits of the value as could fit are written, and the "
"higher bits are ignored. This matches the typical behavior of a C-style "
"downcast."
msgstr ""

#: ../../c-api/long.rst:392
msgid ""
"Overflow is not considered an error. If the returned value is larger than "
"*n_bytes*, most significant bits were discarded."
msgstr "溢出不会被视为错误。 如果返回值大于 *n_bytes*，高位部分将被丢弃。"

#: ../../c-api/long.rst:395
msgid "``0`` will never be returned."
msgstr "绝对不会返回 ``0``。"

#: ../../c-api/long.rst:397
msgid "Values are always copied as two's-complement."
msgstr "值将总是作为二的补码被拷贝。"

#: ../../c-api/long.rst:399
msgid "Usage example::"
msgstr "用法示例::"

#: ../../c-api/long.rst:401
msgid ""
"int32_t value;\n"
"Py_ssize_t bytes = PyLong_AsNativeBytes(pylong, &value, sizeof(value), -1);\n"
"if (bytes < 0) {\n"
"    // Failed. A Python exception was set with the reason.\n"
"    return NULL;\n"
"}\n"
"else if (bytes <= (Py_ssize_t)sizeof(value)) {\n"
"    // Success!\n"
"}\n"
"else {\n"
"    // Overflow occurred, but 'value' contains the truncated\n"
"    // lowest bits of pylong.\n"
"}"
msgstr ""
"int32_t value;\n"
"Py_ssize_t bytes = PyLong_AsNativeBytes(pylong, &value, sizeof(value), -1);\n"
"if (bytes < 0) {\n"
"    // 失败。 设置一个提示失败原因的 Python 异常。\n"
"    return NULL;\n"
"}\n"
"else if (bytes <= (Py_ssize_t)sizeof(value)) {\n"
"    // 成功！\n"
"}\n"
"else {\n"
"    // 发生溢出，但 'value' 包含了截断后的\n"
"    // pylong 的低比特位部分。\n"
"}"

#: ../../c-api/long.rst:415
msgid ""
"Passing zero to *n_bytes* will return the size of a buffer that would be "
"large enough to hold the value. This may be larger than technically "
"necessary, but not unreasonably so. If *n_bytes=0*, *buffer* may be "
"``NULL``."
msgstr ""
"将零值传给 *n_bytes* 将返回一个足够容纳该值的缓冲区大小。 这可能会大于基于技术考虑所需要的值，但也不会过于离谱。 如果 "
"*n_bytes=0*，则 *buffer* 可能为 ``NULL``。"

#: ../../c-api/long.rst:422
msgid ""
"Passing *n_bytes=0* to this function is not an accurate way to determine the"
" bit length of the value."
msgstr "将 *n_bytes=0* 传给此函数不是确定值所需比特位长度的准确方式。"

#: ../../c-api/long.rst:425
msgid ""
"To get at the entire Python value of an unknown size, the function can be "
"called twice: first to determine the buffer size, then to fill it::"
msgstr "要获取一个大小未知的完整 Python 值，可以调用此函数两次：首先确定缓冲区大小，然后填充它::"

#: ../../c-api/long.rst:428
msgid ""
"// Ask how much space we need.\n"
"Py_ssize_t expected = PyLong_AsNativeBytes(pylong, NULL, 0, -1);\n"
"if (expected < 0) {\n"
"    // Failed. A Python exception was set with the reason.\n"
"    return NULL;\n"
"}\n"
"assert(expected != 0);  // Impossible per the API definition.\n"
"uint8_t *bignum = malloc(expected);\n"
"if (!bignum) {\n"
"    PyErr_SetString(PyExc_MemoryError, \"bignum malloc failed.\");\n"
"    return NULL;\n"
"}\n"
"// Safely get the entire value.\n"
"Py_ssize_t bytes = PyLong_AsNativeBytes(pylong, bignum, expected, -1);\n"
"if (bytes < 0) {  // Exception has been set.\n"
"    free(bignum);\n"
"    return NULL;\n"
"}\n"
"else if (bytes > expected) {  // This should not be possible.\n"
"    PyErr_SetString(PyExc_RuntimeError,\n"
"        \"Unexpected bignum truncation after a size check.\");\n"
"    free(bignum);\n"
"    return NULL;\n"
"}\n"
"// The expected success given the above pre-check.\n"
"// ... use bignum ...\n"
"free(bignum);"
msgstr ""
"// 询问我们需要多少空间。\n"
"Py_ssize_t expected = PyLong_AsNativeBytes(pylong, NULL, 0, -1);\n"
"if (expected < 0) {\n"
"    // 失败。Python 已设置异常，并提供了原因\n"
"    return NULL;\n"
"}\n"
"assert(expected != 0);  // 根据 API 定义，不可能为 0\n"
"uint8_t *bignum = malloc(expected);\n"
"if (!bignum) {\n"
"    PyErr_SetString(PyExc_MemoryError, \"bignum malloc failed.\");\n"
"    return NULL;\n"
"}\n"
"// 安全地获取整个值\n"
"Py_ssize_t bytes = PyLong_AsNativeBytes(pylong, bignum, expected, -1);\n"
"if (bytes < 0) {  // 已设置异常\n"
"    free(bignum);\n"
"    return NULL;\n"
"}\n"
"else if (bytes > expected) {  // 这种情况不应该发生\n"
"    PyErr_SetString(PyExc_RuntimeError,\n"
"        \"Unexpected bignum truncation after a size check.\");\n"
"    free(bignum);\n"
"    return NULL;\n"
"}\n"
"// 上述预检查成功的预期情况\n"
"// ... 使用 bignum ...\n"
"free(bignum);"

#: ../../c-api/long.rst:456
msgid ""
"*flags* is either ``-1`` (``Py_ASNATIVEBYTES_DEFAULTS``) to select defaults "
"that behave most like a C cast, or a combination of the other flags in the "
"table below. Note that ``-1`` cannot be combined with other flags."
msgstr ""
"*flags* 可以是 ``-1`` (``Py_ASNATIVEBYTES_DEFAULTS``) 表示选择最接近 C "
"强制转换类型的默认行为，或是下表中其他旗标的组合。 请注意 ``-1`` 不能与其他旗标组合使用。"

#: ../../c-api/long.rst:461
msgid ""
"Currently, ``-1`` corresponds to ``Py_ASNATIVEBYTES_NATIVE_ENDIAN | "
"Py_ASNATIVEBYTES_UNSIGNED_BUFFER``."
msgstr ""
"目前，``-1`` 对应于 ``Py_ASNATIVEBYTES_NATIVE_ENDIAN | "
"Py_ASNATIVEBYTES_UNSIGNED_BUFFER``。"

#: ../../c-api/long.rst:467
msgid "Flag"
msgstr "标志位"

#: ../../c-api/long.rst:467
msgid "Value"
msgstr "值"

#: ../../c-api/long.rst:469
msgid "``-1``"
msgstr "``-1``"

#: ../../c-api/long.rst:470
msgid "``0``"
msgstr "``0``"

#: ../../c-api/long.rst:471
msgid "``1``"
msgstr "``1``"

#: ../../c-api/long.rst:472
msgid "``3``"
msgstr "``3``"

#: ../../c-api/long.rst:473
msgid "``4``"
msgstr "``4``"

#: ../../c-api/long.rst:474
msgid "``8``"
msgstr "``8``"

#: ../../c-api/long.rst:475
msgid "``16``"
msgstr "``16``"

#: ../../c-api/long.rst:478
msgid ""
"Specifying ``Py_ASNATIVEBYTES_NATIVE_ENDIAN`` will override any other endian"
" flags. Passing ``2`` is reserved."
msgstr ""
"指定 ``Py_ASNATIVEBYTES_NATIVE_ENDIAN`` 将覆盖任何其他端序旗标。 传入 ``2`` 被保留用于后续版本。"

#: ../../c-api/long.rst:481
msgid ""
"By default, sufficient buffer will be requested to include a sign bit. For "
"example, when converting 128 with *n_bytes=1*, the function will return 2 "
"(or more) in order to store a zero sign bit."
msgstr ""
"在默认情况下，将会请求足够的缓冲区以包括符号位。 例如在设置 *n_bytes=1* 转换 128 时，该函数将返回 2 (或更大的值) "
"以存储一个零值符号位。"

#: ../../c-api/long.rst:485
msgid ""
"If ``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` is specified, a zero sign bit will "
"be omitted from size calculations. This allows, for example, 128 to fit in a"
" single-byte buffer. If the destination buffer is later treated as signed, a"
" positive input value may become negative. Note that the flag does not "
"affect handling of negative values: for those, space for a sign bit is "
"always requested."
msgstr ""
"如果指定了 ``Py_ASNATIVEBYTES_UNSIGNED_BUFFER``，将在计算大小时忽略零值符号位。 例如，这将允许将 128 "
"放入一个单字节缓冲区。 如果目标缓冲区随后又被当作是带符号位的，则一个正数输入值可能会变成负值。 "
"请注意此旗标不会影响对负值的处理：对于这种情况，总是会请求用作符号位的空间。"

#: ../../c-api/long.rst:492
msgid ""
"Specifying ``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` causes an exception to be "
"set if *pylong* is negative. Without this flag, negative values will be "
"copied provided there is enough space for at least one sign bit, regardless "
"of whether ``Py_ASNATIVEBYTES_UNSIGNED_BUFFER`` was specified."
msgstr ""
"指定 ``Py_ASNATIVEBYTES_REJECT_NEGATIVE`` 将导致当 *pylong* 为负值时设置一个异常。 "
"如果没有此旗标，只要至少有足够容纳一个符号位的空间就将拷贝负值，无论是否指定了 "
"``Py_ASNATIVEBYTES_UNSIGNED_BUFFER``。"

#: ../../c-api/long.rst:497
msgid ""
"If ``Py_ASNATIVEBYTES_ALLOW_INDEX`` is specified and a non-integer value is "
"passed, its :meth:`~object.__index__` method will be called first. This may "
"result in Python code executing and other threads being allowed to run, "
"which could cause changes to other objects or values in use. When *flags* is"
" ``-1``, this option is not set, and non-integer values will raise "
":exc:`TypeError`."
msgstr ""
"如果指定了 ``Py_ASNATIVEBYTES_ALLOW_INDEX`` 并且传入一个非整数值，则会先调用其 "
":meth:`~object.__index__` 方法。 这可能导致 Python "
"代码执行并允许运行其他线程，在此情况下将会改变其他正在使用的对象或值。 当 *flags* 为 ``-1`` 时，则不设置此选项，而非整数值将会引发 "
":exc:`TypeError`。"

#: ../../c-api/long.rst:506
msgid ""
"With the default *flags* (``-1``, or *UNSIGNED_BUFFER*  without "
"*REJECT_NEGATIVE*), multiple Python integers can map to a single value "
"without overflow. For example, both ``255`` and ``-1`` fit a single-byte "
"buffer and set all its bits. This matches typical C cast behavior."
msgstr ""
"如果使用默认 *flags* (``-1`` 或不带 *REJECT_NEGATIVE* 的 *UNSIGNED_BUFFER*)，则多个 Python"
" 整数可映射为单个值而不会溢出。 例如，``255`` 和 ``-1`` 都可放入一个单字节缓冲区并设置其全部比特位。 这与典型的 C "
"强制转换行为相匹配。"

#: ../../c-api/long.rst:517
msgid ""
"On success, return a read only :term:`named tuple`, that holds information "
"about Python's internal representation of integers. See :data:`sys.int_info`"
" for description of individual fields."
msgstr ""
"成功时，返回一个只读的 :term:`named tuple`，它保存着有关 Python 内部整数表示形式的信息。 请参阅 "
":data:`sys.int_info` 了解关于单独字段的描述。"

#: ../../c-api/long.rst:521
msgid "On failure, return ``NULL`` with an exception set."
msgstr "当失败时，将返回 ``NULL`` 并设置一个异常。"

#: ../../c-api/long.rst:528
msgid "Return 1 if *op* is compact, 0 otherwise."
msgstr "如果 *op* 为紧凑形式则返回 1，否则返回 0。"

#: ../../c-api/long.rst:530
msgid ""
"This function makes it possible for performance-critical code to implement a"
" “fast path” for small integers. For compact values use "
":c:func:`PyUnstable_Long_CompactValue`; for others fall back to a "
":c:func:`PyLong_As* <PyLong_AsSize_t>` function or "
":c:func:`PyLong_AsNativeBytes`."
msgstr ""
"此函数使得注重性能的代码可以实现小整数的“快速路径”。 对于紧凑值将使用 "
":c:func:`PyUnstable_Long_CompactValue`；对于其他值则回退为 :c:func:`PyLong_As* "
"<PyLong_AsSize_t>` 函数或者 :c:func:`PyLong_AsNativeBytes`。"

#: ../../c-api/long.rst:536
msgid "The speedup is expected to be negligible for most users."
msgstr "此项加速对于大多数用户来说是可以忽略的。"

#: ../../c-api/long.rst:538
msgid ""
"Exactly what values are considered compact is an implementation detail and "
"is subject to change."
msgstr "具体有哪些值会被视为紧凑形式属于实现细节并可能发生改变。"

#: ../../c-api/long.rst:546
msgid ""
"If *op* is compact, as determined by :c:func:`PyUnstable_Long_IsCompact`, "
"return its value."
msgstr "如果 *op* 为紧凑形式，如 :c:func:`PyUnstable_Long_IsCompact` 所确定的，则返回它的值。"

#: ../../c-api/long.rst:549
msgid "Otherwise, the return value is undefined."
msgstr "在其他情况下，返回值是未定义的。"

#: ../../c-api/long.rst:8
msgid "object"
msgstr "object -- 对象"

#: ../../c-api/long.rst:8
msgid "long integer"
msgstr "长整型"

#: ../../c-api/long.rst:8
msgid "integer"
msgstr "integer"

#: ../../c-api/long.rst:144
msgid "LONG_MAX (C macro)"
msgstr "LONG_MAX (C 宏)"

#: ../../c-api/long.rst:144 ../../c-api/long.rst:204 ../../c-api/long.rst:247
#: ../../c-api/long.rst:262 ../../c-api/long.rst:278 ../../c-api/long.rst:294
msgid "OverflowError (built-in exception)"
msgstr "OverflowError (内置异常)"

#: ../../c-api/long.rst:247
msgid "PY_SSIZE_T_MAX (C macro)"
msgstr "PY_SSIZE_T_MAX (C 宏)"

#: ../../c-api/long.rst:262
msgid "ULONG_MAX (C macro)"
msgstr "ULONG_MAX (C 宏)"

#: ../../c-api/long.rst:278
msgid "SIZE_MAX (C macro)"
msgstr "SIZE_MAX (C 宏)"
