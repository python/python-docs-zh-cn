# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:48+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/contextvars.rst:6
msgid "Context Variables Objects"
msgstr "上下文变量对象"

#: ../../c-api/contextvars.rst:15
msgid ""
"In Python 3.7.1 the signatures of all context variables C APIs were "
"**changed** to use :c:type:`PyObject` pointers instead of "
":c:type:`PyContext`, :c:type:`PyContextVar`, and :c:type:`PyContextToken`, "
"e.g.::"
msgstr ""
"在 Python 3.7.1 中，所有上下文变量 C API 的签名被 **更改** 为使用 :c:type:`PyObject` 指针而不是 "
":c:type:`PyContext`, :c:type:`PyContextVar` 以及 :c:type:`PyContextToken`，例如::"

#: ../../c-api/contextvars.rst:20
msgid ""
"// in 3.7.0:\n"
"PyContext *PyContext_New(void);\n"
"\n"
"// in 3.7.1+:\n"
"PyObject *PyContext_New(void);"
msgstr ""
"// 在3.7.0：\n"
"PyContext *PyContext_New(void);\n"
"\n"
"// 在3.7.1+：\n"
"PyObject *PyContext_New(void);"

#: ../../c-api/contextvars.rst:26
msgid "See :issue:`34762` for more details."
msgstr "请参阅 :issue:`34762` 了解详情。"

#: ../../c-api/contextvars.rst:29
msgid ""
"This section details the public C API for the :mod:`contextvars` module."
msgstr "本节深入介绍了 :mod:`contextvars` 模块的公用 C API。"

#: ../../c-api/contextvars.rst:33
msgid ""
"The C structure used to represent a :class:`contextvars.Context` object."
msgstr "用于表示 :class:`contextvars.Context` 对象的 C 结构体。"

#: ../../c-api/contextvars.rst:38
msgid ""
"The C structure used to represent a :class:`contextvars.ContextVar` object."
msgstr "用于表示 :class:`contextvars.ContextVar` 对象的 C 结构体。"

#: ../../c-api/contextvars.rst:43
msgid "The C structure used to represent a :class:`contextvars.Token` object."
msgstr "用于表示 :class:`contextvars.Token` 对象的 C 结构体。"

#: ../../c-api/contextvars.rst:47
msgid "The type object representing the *context* type."
msgstr "表示 *context* 类型的类型对象。"

#: ../../c-api/contextvars.rst:51
msgid "The type object representing the *context variable* type."
msgstr "表示 *context variable* 类型的类型对象。"

#: ../../c-api/contextvars.rst:55
msgid "The type object representing the *context variable token* type."
msgstr "表示 *context variable token* 类型的类型对象。"

#: ../../c-api/contextvars.rst:58
msgid "Type-check macros:"
msgstr "类型检查宏："

#: ../../c-api/contextvars.rst:62
msgid ""
"Return true if *o* is of type :c:data:`PyContext_Type`. *o* must not be "
"``NULL``.  This function always succeeds."
msgstr ""
"如果 *o* 的类型为 :c:data:`PyContext_Type` 则返回真值。 *o* 必须不为 ``NULL``。 此函数总是会成功执行。"

#: ../../c-api/contextvars.rst:67
msgid ""
"Return true if *o* is of type :c:data:`PyContextVar_Type`. *o* must not be "
"``NULL``.  This function always succeeds."
msgstr ""
"如果 *o* 的类型为 :c:data:`PyContextVar_Type` 则返回真值。 *o* 必须不为 ``NULL``。 "
"此函数总是会成功执行。"

#: ../../c-api/contextvars.rst:72
msgid ""
"Return true if *o* is of type :c:data:`PyContextToken_Type`. *o* must not be"
" ``NULL``.  This function always succeeds."
msgstr ""
"如果 *o* 的类型为 :c:data:`PyContextToken_Type` 则返回真值。 *o* 必须不为 ``NULL``。 "
"此函数总是会成功执行。"

#: ../../c-api/contextvars.rst:76
msgid "Context object management functions:"
msgstr "上下文对象管理函数:"

#: ../../c-api/contextvars.rst:80
msgid ""
"Create a new empty context object.  Returns ``NULL`` if an error has "
"occurred."
msgstr "创建一个新的空上下文对象。 如果发生错误则返回 ``NULL``。"

#: ../../c-api/contextvars.rst:85
msgid ""
"Create a shallow copy of the passed *ctx* context object. Returns ``NULL`` "
"if an error has occurred."
msgstr "创建所传入的 *ctx* 上下文对象的浅拷贝。 如果发生错误则返回 ``NULL``。"

#: ../../c-api/contextvars.rst:90
msgid ""
"Create a shallow copy of the current thread context. Returns ``NULL`` if an "
"error has occurred."
msgstr "创建当前线程上下文的浅拷贝。 如果发生错误则返回 ``NULL``。"

#: ../../c-api/contextvars.rst:95
msgid ""
"Set *ctx* as the current context for the current thread. Returns ``0`` on "
"success, and ``-1`` on error."
msgstr "将 *ctx* 设为当前线程的当前上下文。 成功时返回 ``0``，出错时返回 ``-1``。"

#: ../../c-api/contextvars.rst:100
msgid ""
"Deactivate the *ctx* context and restore the previous context as the current"
" context for the current thread.  Returns ``0`` on success, and ``-1`` on "
"error."
msgstr "取消激活 *ctx* 上下文并将之前的上下文恢复为当前线程的当前上下文。 成功时返回 ``0``，出错时返回 ``-1``。"

#: ../../c-api/contextvars.rst:106
msgid ""
"Register *callback* as a context object watcher for the current interpreter."
" Return an ID which may be passed to :c:func:`PyContext_ClearWatcher`. In "
"case of error (e.g. no more watcher IDs available), return ``-1`` and set an"
" exception."
msgstr ""
"注册 *callback* 作为当前解释器的上下文对象监视器。 返回一个可被传递给 :c:func:`PyContext_ClearWatcher` 的"
" ID。 当出错时（例如没有可用的监视器 ID），则返回 ``-1`` 并设置一个异常。"

#: ../../c-api/contextvars.rst:115
msgid ""
"Clear watcher identified by *watcher_id* previously returned from "
":c:func:`PyContext_AddWatcher` for the current interpreter. Return ``0`` on "
"success, or ``-1`` and set an exception on error (e.g. if the given "
"*watcher_id* was never registered.)"
msgstr ""
"清除之前从 :c:func:`PyContext_AddWatcher` 返回的当前解释器中由 *watcher_id* 所标识的监视器。 成功时返回 "
"``0``，或者出错时（例如当给定的 *watcher_id* 未被注册）返回 ``-1`` 并设置异常。"

#: ../../c-api/contextvars.rst:124
msgid "Enumeration of possible context object watcher events:"
msgstr "由可能的上下文对象监视器事件组成的枚举："

#: ../../c-api/contextvars.rst:126
msgid ""
"``Py_CONTEXT_SWITCHED``: The :term:`current context` has switched to a "
"different context.  The object passed to the watch callback is the now-"
"current :class:`contextvars.Context` object, or None if no context is "
"current."
msgstr ""
"``Py_CONTEXT_SWITCHED``: :term:`current context` 已切换到不同的上下文。 "
"传递给监视回调函数的对象是当前的 :class:`contextvars.Context` 对象，或 None（如果没有当前上下文）。"

#: ../../c-api/contextvars.rst:135
msgid ""
"Context object watcher callback function.  The object passed to the callback"
" is event-specific; see :c:type:`PyContextEvent` for details."
msgstr "上下文对象监视器回调函数。传递给回调函数的对象是特定于事件的；有关详细信息，请参阅 :c:type:`PyContextEvent`。"

#: ../../c-api/contextvars.rst:138
msgid ""
"If the callback returns with an exception set, it must return ``-1``; this "
"exception will be printed as an unraisable exception using "
":c:func:`PyErr_FormatUnraisable`. Otherwise it should return ``0``."
msgstr ""
"如果回调函数设置了返回一个异常，则它必须返回 ``-1``；此异常将作为不可引发的异常使用 "
":c:func:`PyErr_FormatUnraisable` 打印出来。 在其他情况下它应当返回 ``0``。"

#: ../../c-api/contextvars.rst:142
msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores"
" it before returning."
msgstr ""
"在进入回调时可能已经设置了尚未处理的异常。 在此情况下，回调应当返回 ``0`` 并仍然设置同样的异常。 这意味着该回调可能不会调用任何其他可设置异常的"
" API 除非它先保存并清空异常状态，并在返回之前恢复它。"

#: ../../c-api/contextvars.rst:151
msgid "Context variable functions:"
msgstr "上下文变量函数:"

#: ../../c-api/contextvars.rst:155
msgid ""
"Create a new ``ContextVar`` object.  The *name* parameter is used for "
"introspection and debug purposes.  The *def* parameter specifies a default "
"value for the context variable, or ``NULL`` for no default. If an error has "
"occurred, this function returns ``NULL``."
msgstr ""
"创建一个新的 ``ContextVar`` 对象。 形参 *name* 用于自我检查和调试目的。 形参 *def* 为上下文变量指定默认值，或为 "
"``NULL`` 表示无默认值。 如果发生错误，这个函数会返回 ``NULL``。"

#: ../../c-api/contextvars.rst:162
msgid ""
"Get the value of a context variable.  Returns ``-1`` if an error has "
"occurred during lookup, and ``0`` if no error occurred, whether or not a "
"value was found."
msgstr "获取上下文变量的值。如果在查找过程中发生错误，返回' ' -1 ' '，如果没有发生错误，无论是否找到值，都返回' ' 0 ' '，"

#: ../../c-api/contextvars.rst:166
msgid ""
"If the context variable was found, *value* will be a pointer to it. If the "
"context variable was *not* found, *value* will point to:"
msgstr "如果找到上下文变量，*value* 将是指向它的指针。 如果上下文变量 *没有* 找到，*value* 将指向："

#: ../../c-api/contextvars.rst:169
msgid "*default_value*, if not ``NULL``;"
msgstr "*default_value*，如果非 ``NULL``;"

#: ../../c-api/contextvars.rst:170
msgid "the default value of *var*, if not ``NULL``;"
msgstr "*var* 的默认值，如果不是 ``NULL``；"

#: ../../c-api/contextvars.rst:171
msgid "``NULL``"
msgstr "``NULL``"

#: ../../c-api/contextvars.rst:173
msgid "Except for ``NULL``, the function returns a new reference."
msgstr "除了返回 ``NULL``，这个函数会返回一个新的引用。"

#: ../../c-api/contextvars.rst:177
msgid ""
"Set the value of *var* to *value* in the current context.  Returns a new "
"token object for this change, or ``NULL`` if an error has occurred."
msgstr "在当前上下文中将 *var* 设为 *value*。 返回针对此修改的新凭据对象，或者如果发生错误则返回 ``NULL``。"

#: ../../c-api/contextvars.rst:182
msgid ""
"Reset the state of the *var* context variable to that it was in before "
":c:func:`PyContextVar_Set` that returned the *token* was called. This "
"function returns ``0`` on success and ``-1`` on error."
msgstr ""
"将上下文变量 *var* 的状态重置为它在返回 *token* 的 :c:func:`PyContextVar_Set` 被调用之前的状态。 "
"此函数成功时返回 ``0``，出错时返回 ``-1``。"
