# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/stable.rst:7
msgid "Stable Application Binary Interface"
msgstr "应用程序二进制接口的稳定版"

#: ../../c-api/stable.rst:9
msgid ""
"Traditionally, the C API of Python will change with every release.  Most "
"changes will be source-compatible, typically by only adding API, rather than"
" changing existing API or removing API (although some interfaces do get "
"removed after being deprecated first)."
msgstr ""
"传统上，Python的C "
"API将随每个版本而变化。大多数更改都与源代码兼容，通常只添加API，而不是更改现有API或删除API（尽管某些接口会首先弃用然后再删除）。"

#: ../../c-api/stable.rst:14
msgid ""
"Unfortunately, the API compatibility does not extend to binary compatibility"
" (the ABI). The reason is primarily the evolution of struct definitions, "
"where addition of a new field, or changing the type of a field, might not "
"break the API, but can break the ABI.  As a consequence, extension modules "
"need to be recompiled for every Python release (although an exception is "
"possible on Unix when none of the affected interfaces are used). In "
"addition, on Windows, extension modules link with a specific pythonXY.dll "
"and need to be recompiled to link with a newer one."
msgstr ""
"不幸的是，API兼容性没有扩展到二进制兼容性（ABI）。原因主要是结构定义的演变，在这里添加新字段或更改字段类型可能不会破坏API，但可能会破坏ABI。因此，每个Python版本都需要重新编译扩展模块（即使在未使用任何受影响的接口的情况下，Unix上也可能会出现异常）。此外，在Windows上，扩展模块与特定的pythonXY.dll链接，需要重新编译才能与新的pythonXY.dll链接。"

#: ../../c-api/stable.rst:23
msgid ""
"Since Python 3.2, a subset of the API has been declared to guarantee a "
"stable ABI. Extension modules wishing to use this API (called \"limited "
"API\") need to define ``Py_LIMITED_API``. A number of interpreter details "
"then become hidden from the extension module; in return, a module is built "
"that works on any 3.x version (x>=2) without recompilation."
msgstr ""
"从Python3.2起，已经声明了一个API的子集，以确保稳定的ABI。如果使用此API（也被称为“受限API”）的扩展模块需要定义``Py_LIMITED_API``。许多解释器细节将从扩展模块中隐藏;"
"  反过来，在任何3.x版本（x>=2）上构建的模块都不需要重新编译"

#: ../../c-api/stable.rst:29
msgid ""
"In some cases, the stable ABI needs to be extended with new functions. "
"Extension modules wishing to use these new APIs need to set "
"``Py_LIMITED_API`` to the ``PY_VERSION_HEX`` value (see "
":ref:`apiabiversion`) of the minimum Python version they want to support "
"(e.g. ``0x03030000`` for Python 3.3). Such modules will work on all "
"subsequent Python releases, but fail to load (because of missing symbols) on"
" the older releases."
msgstr ""
"在某些情况下，需要添加新函数来扩展稳定版 ABI。希望使用这些新 API 的扩展模块需要将 ``Py_LIMITED_API`` "
"设置为他们想要支持的最低 Python 版本的 ``PY_VERSION_HEX`` 值（例如： Python 3.3 为 "
"``0x03030000``）（参见 :ref:`apiabiversion`）。此类模块将适用于所有后续 "
"Python版本，但无法在旧版本上加载（因为缺少符号）。"

#: ../../c-api/stable.rst:36
msgid ""
"As of Python 3.2, the set of functions available to the limited API is "
"documented in :pep:`384`.  In the C API documentation, API elements that are"
" not part of the limited API are marked as \"Not part of the limited API.\""
msgstr ""
"从Python 3.2开始，受限API可用的函数集记录在 :pep:`384` 。在C API文档中，不属于受限API的API元素标记为 "
"“不属于受限API” 。"
