# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/codec.rst:4
msgid "Codec registry and support functions"
msgstr ""

#: ../../c-api/codec.rst:8
msgid "Register a new codec search function."
msgstr ""

#: ../../c-api/codec.rst:10
msgid ""
"As side effect, this tries to load the :mod:`!encodings` package, if not yet"
" done, to make sure that it is always first in the list of search functions."
msgstr ""

#: ../../c-api/codec.rst:15
msgid ""
"Unregister a codec search function and clear the registry's cache. If the "
"search function is not registered, do nothing. Return 0 on success. Raise an"
" exception and return -1 on error."
msgstr ""

#: ../../c-api/codec.rst:23
msgid ""
"Return ``1`` or ``0`` depending on whether there is a registered codec for "
"the given *encoding*.  This function always succeeds."
msgstr ""

#: ../../c-api/codec.rst:28
msgid "Generic codec based encoding API."
msgstr ""

#: ../../c-api/codec.rst:30
msgid ""
"*object* is passed through the encoder function found for the given "
"*encoding* using the error handling method defined by *errors*.  *errors* "
"may be ``NULL`` to use the default method defined for the codec.  Raises a "
":exc:`LookupError` if no encoder can be found."
msgstr ""

#: ../../c-api/codec.rst:37
msgid "Generic codec based decoding API."
msgstr ""

#: ../../c-api/codec.rst:39
msgid ""
"*object* is passed through the decoder function found for the given "
"*encoding* using the error handling method defined by *errors*.  *errors* "
"may be ``NULL`` to use the default method defined for the codec.  Raises a "
":exc:`LookupError` if no encoder can be found."
msgstr ""

#: ../../c-api/codec.rst:46
msgid "Codec lookup API"
msgstr ""

#: ../../c-api/codec.rst:48
msgid ""
"In the following functions, the *encoding* string is looked up converted to "
"all lower-case characters, which makes encodings looked up through this "
"mechanism effectively case-insensitive.  If no codec is found, a "
":exc:`KeyError` is set and ``NULL`` returned."
msgstr ""

#: ../../c-api/codec.rst:55
msgid "Get an encoder function for the given *encoding*."
msgstr ""

#: ../../c-api/codec.rst:59
msgid "Get a decoder function for the given *encoding*."
msgstr ""

#: ../../c-api/codec.rst:63
msgid ""
"Get an :class:`~codecs.IncrementalEncoder` object for the given *encoding*."
msgstr ""

#: ../../c-api/codec.rst:67
msgid ""
"Get an :class:`~codecs.IncrementalDecoder` object for the given *encoding*."
msgstr ""

#: ../../c-api/codec.rst:71
msgid ""
"Get a :class:`~codecs.StreamReader` factory function for the given "
"*encoding*."
msgstr ""

#: ../../c-api/codec.rst:75
msgid ""
"Get a :class:`~codecs.StreamWriter` factory function for the given "
"*encoding*."
msgstr ""

#: ../../c-api/codec.rst:79
msgid "Registry API for Unicode encoding error handlers"
msgstr ""

#: ../../c-api/codec.rst:83
msgid ""
"Register the error handling callback function *error* under the given "
"*name*. This callback function will be called by a codec when it encounters "
"unencodable characters/undecodable bytes and *name* is specified as the "
"error parameter in the call to the encode/decode function."
msgstr ""

#: ../../c-api/codec.rst:88
msgid ""
"The callback gets a single argument, an instance of "
":exc:`UnicodeEncodeError`, :exc:`UnicodeDecodeError` or "
":exc:`UnicodeTranslateError` that holds information about the problematic "
"sequence of characters or bytes and their offset in the original string (see"
" :ref:`unicodeexceptions` for functions to extract this information).  The "
"callback must either raise the given exception, or return a two-item tuple "
"containing the replacement for the problematic sequence, and an integer "
"giving the offset in the original string at which encoding/decoding should "
"be resumed."
msgstr ""

#: ../../c-api/codec.rst:98
msgid "Return ``0`` on success, ``-1`` on error."
msgstr ""

#: ../../c-api/codec.rst:102
msgid ""
"Lookup the error handling callback function registered under *name*.  As a "
"special case ``NULL`` can be passed, in which case the error handling "
"callback for \"strict\" will be returned."
msgstr ""

#: ../../c-api/codec.rst:108
msgid "Raise *exc* as an exception."
msgstr ""

#: ../../c-api/codec.rst:112
msgid "Ignore the unicode error, skipping the faulty input."
msgstr ""

#: ../../c-api/codec.rst:116
msgid "Replace the unicode encode error with ``?`` or ``U+FFFD``."
msgstr ""

#: ../../c-api/codec.rst:120
msgid "Replace the unicode encode error with XML character references."
msgstr ""

#: ../../c-api/codec.rst:124
msgid ""
"Replace the unicode encode error with backslash escapes (``\\x``, ``\\u`` "
"and ``\\U``)."
msgstr ""

#: ../../c-api/codec.rst:129
msgid "Replace the unicode encode error with ``\\N{...}`` escapes."
msgstr ""
