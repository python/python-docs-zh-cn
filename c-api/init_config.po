# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr "Python初始化配置"

#: ../../c-api/init_config.rst:11
msgid ""
"Python can be initialized with :c:func:`Py_InitializeFromConfig` and the "
":c:type:`PyConfig` structure. It can be preinitialized with "
":c:func:`Py_PreInitialize` and the :c:type:`PyPreConfig` structure."
msgstr ""
"Python 可以使用 :c:func:`Py_InitializeFromConfig` 和 :c:type:`PyConfig` 结构体来初始化。 "
"它可以使用 :c:func:`Py_PreInitialize` 和 :c:type:`PyPreConfig` 结构体来预初始化。"

#: ../../c-api/init_config.rst:15
msgid "There are two kinds of configuration:"
msgstr "有两种配置方式："

#: ../../c-api/init_config.rst:17
msgid ""
"The :ref:`Python Configuration <init-python-config>` can be used to build a "
"customized Python which behaves as the regular Python. For example, "
"environment variables and command line arguments are used to configure "
"Python."
msgstr ""
":ref:`Python 配置 <init-python-config>` 可被用于构建一个定制的 Python，其行为与常规 Python 类似。 "
"例如，环境变量和命令行参数可被用于配置 Python。"

#: ../../c-api/init_config.rst:22
msgid ""
"The :ref:`Isolated Configuration <init-isolated-conf>` can be used to embed "
"Python into an application. It isolates Python from the system. For example,"
" environment variables are ignored, the LC_CTYPE locale is left unchanged "
"and no signal handler is registered."
msgstr ""
":ref:`隔离配置 <init-isolated-conf>` 可被用于将 Python 嵌入到应用程序。 它将 Python 与系统隔离开来。 "
"例如，环境变量将被忽略，LC_CTYPE 语言区域设置保持不变并且不会注册任何信号处理器。"

#: ../../c-api/init_config.rst:27
msgid ""
"The :c:func:`Py_RunMain` function can be used to write a customized Python "
"program."
msgstr ":c:func:`Py_RunMain` 函数可被用来编写定制的 Python 程序。"

#: ../../c-api/init_config.rst:30
msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr "参见 :ref:`Initialization, Finalization, and Threads <initialization>`."

#: ../../c-api/init_config.rst:33
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ":pep:`587` \"Python 初始化配置\"."

#: ../../c-api/init_config.rst:37
msgid "Example"
msgstr "示例"

#: ../../c-api/init_config.rst:39
msgid "Example of customized Python always running in isolated mode::"
msgstr "定制的 Python 的示例总是会以隔离模式运行::"

#: ../../c-api/init_config.rst:76
msgid "PyWideStringList"
msgstr "PyWideStringList"

#: ../../c-api/init_config.rst:80
msgid "List of ``wchar_t*`` strings."
msgstr "由 ``wchar_t*`` 字符串组成的列表。"

#: ../../c-api/init_config.rst:82
msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings must "
"be non-``NULL``."
msgstr "如果 *length* 为非零值，则 *items* 必须不为 ``NULL`` 并且所有字符串均必须不为 ``NULL``。"

#: ../../c-api/init_config.rst:85
msgid "Methods:"
msgstr "方法"

#: ../../c-api/init_config.rst:89
msgid "Append *item* to *list*."
msgstr "将 *item* 添加到 *list*。"

#: ../../c-api/init_config.rst:91 ../../c-api/init_config.rst:102
msgid "Python must be preinitialized to call this function."
msgstr "Python 必须被预初始化以便调用此函数。"

#: ../../c-api/init_config.rst:95
msgid "Insert *item* into *list* at *index*."
msgstr "将 *item* 插入到 *list* 的 *index* 位置上。"

#: ../../c-api/init_config.rst:97
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr "如果 *index* 大于等于 *list* 的长度，则将 *item* 添加到 *list*。"

#: ../../c-api/init_config.rst:100
msgid "*index* must be greater than or equal to 0."
msgstr ""

#: ../../c-api/init_config.rst:104 ../../c-api/init_config.rst:124
#: ../../c-api/init_config.rst:225 ../../c-api/init_config.rst:519
msgid "Structure fields:"
msgstr "结构体字段:"

#: ../../c-api/init_config.rst:108
msgid "List length."
msgstr "List 长度。"

#: ../../c-api/init_config.rst:112
msgid "List items."
msgstr "列表项目。"

#: ../../c-api/init_config.rst:115
msgid "PyStatus"
msgstr "PyStatus"

#: ../../c-api/init_config.rst:119
msgid ""
"Structure to store an initialization function status: success, error or "
"exit."
msgstr "存储初始函数状态：成功、错误或退出的结构体。"

#: ../../c-api/init_config.rst:122
msgid ""
"For an error, it can store the C function name which created the error."
msgstr "对于错误，它可以存储造成错误的 C 函数的名称。"

#: ../../c-api/init_config.rst:128
msgid "Exit code. Argument passed to ``exit()``."
msgstr "退出码。 传给 ``exit()`` 的参数。"

#: ../../c-api/init_config.rst:132
msgid "Error message."
msgstr "错误信息"

#: ../../c-api/init_config.rst:136
msgid "Name of the function which created an error, can be ``NULL``."
msgstr "造成错误的函数的名称，可以为 ``NULL``。"

#: ../../c-api/init_config.rst:138
msgid "Functions to create a status:"
msgstr "创建状态的函数:"

#: ../../c-api/init_config.rst:142
msgid "Success."
msgstr "完成。"

#: ../../c-api/init_config.rst:146
msgid "Initialization error with a message."
msgstr "带消息的初始化错误。"

#: ../../c-api/init_config.rst:148
msgid "*err_msg* must not be ``NULL``."
msgstr "*err_msg* 不可为 ``NULL``。"

#: ../../c-api/init_config.rst:152
msgid "Memory allocation failure (out of memory)."
msgstr "内存分配失败（内存不足）。"

#: ../../c-api/init_config.rst:156
msgid "Exit Python with the specified exit code."
msgstr "以指定的退出代码退出 Python。"

#: ../../c-api/init_config.rst:158
msgid "Functions to handle a status:"
msgstr "处理状态的函数:"

#: ../../c-api/init_config.rst:162
msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr "状态为错误还是退出？如为真值，则异常必须被处理；例如通过调用 :c:func:`Py_ExitStatusException`。"

#: ../../c-api/init_config.rst:167
msgid "Is the result an error?"
msgstr "结果错误吗？"

#: ../../c-api/init_config.rst:171
msgid "Is the result an exit?"
msgstr "结果是否退出？"

#: ../../c-api/init_config.rst:175
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called"
" if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""
"如果 *status* 是一个退出码则调用 ``exit(exitcode)``。如果 *status* "
"是一个错误码则打印错误消息并设置一个非零退出码再退出。 必须在 ``PyStatus_Exception(status)`` 为非零值时才能被调用。"

#: ../../c-api/init_config.rst:180
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""
"在内部，Python 将使用设置 ``PyStatus.func`` 的宏，而创建状态的函数则会将 ``func`` 设为 ``NULL``。"

#: ../../c-api/init_config.rst:183
msgid "Example::"
msgstr "示例::"

#: ../../c-api/init_config.rst:207
msgid "PyPreConfig"
msgstr "PyPreConfig"

#: ../../c-api/init_config.rst:211
msgid "Structure used to preinitialize Python."
msgstr "用于预初始化 Python 的结构体。"

#: ../../c-api/init_config.rst:213
msgid "Function to initialize a preconfiguration:"
msgstr "用于初始化预先配置的函数:"

#: ../../c-api/init_config.rst:217
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-"
"python-config>`."
msgstr "通过 :ref:`Python 配置 <init-python-config>` 来初始化预先配置。"

#: ../../c-api/init_config.rst:222
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr "通过 :ref:`隔离配置 <init-isolated-conf>` 来初始化预先配置。"

#: ../../c-api/init_config.rst:229
msgid "Name of the Python memory allocators:"
msgstr "Python 内存分配器名称:"

#: ../../c-api/init_config.rst:231
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)."
msgstr "``PYMEM_ALLOCATOR_NOT_SET`` (``0``): 不改变内存分配器 (使用默认)。"

#: ../../c-api/init_config.rst:233
msgid ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`默认内存分配器 <default-memory-"
"allocators>`。"

#: ../../c-api/init_config.rst:235
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`default memory allocators <default-"
"memory-allocators>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`默认内存分配器 <default-memory-"
"allocators>` 附带 :ref:`调试钩子 <pymem-debug-hooks>`。"

#: ../../c-api/init_config.rst:238
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): use ``malloc()`` of the C library."
msgstr "``PYMEM_ALLOCATOR_MALLOC`` (``3``): 使用 C 库的 ``malloc()``。"

#: ../../c-api/init_config.rst:239
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with "
":ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): 强制使用 ``malloc()`` 附带 :ref:`调试钩子 "
"<pymem-debug-hooks>`。"

#: ../../c-api/init_config.rst:241
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator"
" <pymalloc>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc 内存分配器 "
"<pymalloc>`。"

#: ../../c-api/init_config.rst:243
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc 内存分配器 "
"<pymalloc>` 附带 :ref:`调试钩子 <pymem-debug-hooks>`。"

#: ../../c-api/init_config.rst:247
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-pymalloc "
"<--without-pymalloc>`."
msgstr ""
"如果 Python 是 :option:`使用 --without-pymalloc 进行配置 <--without-pymalloc>` 则 "
"``PYMEM_ALLOCATOR_PYMALLOC`` 和 ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` 将不被支持。"

#: ../../c-api/init_config.rst:251
msgid "See :ref:`Memory Management <memory>`."
msgstr "参见 :ref:`Memory Management <memory>`."

#: ../../c-api/init_config.rst:253
msgid "Default: ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr "默认值: ``PYMEM_ALLOCATOR_NOT_SET``。"

#: ../../c-api/init_config.rst:257
msgid "Set the LC_CTYPE locale to the user preferred locale."
msgstr "将 LC_CTYPE 语言区域设为用户选择的语言区域。"

#: ../../c-api/init_config.rst:259
msgid ""
"If equals to 0, set :c:member:`~PyPreConfig.coerce_c_locale` and "
":c:member:`~PyPreConfig.coerce_c_locale_warn` members to 0."
msgstr ""

#: ../../c-api/init_config.rst:262 ../../c-api/init_config.rst:273
msgid "See the :term:`locale encoding`."
msgstr "参见 :term:`locale encoding`。"

#: ../../c-api/init_config.rst:264 ../../c-api/init_config.rst:319
#: ../../c-api/init_config.rst:627
msgid "Default: ``1`` in Python config, ``0`` in isolated config."
msgstr "默认值: 在 Python 配置中为 ``1``，在隔离配置中为 ``0``。"

#: ../../c-api/init_config.rst:268
msgid "If equals to 2, coerce the C locale."
msgstr ""

#: ../../c-api/init_config.rst:270
msgid ""
"If equals to 1, read the LC_CTYPE locale to decide if it should be coerced."
msgstr ""

#: ../../c-api/init_config.rst:275 ../../c-api/init_config.rst:281
msgid "Default: ``-1`` in Python config, ``0`` in isolated config."
msgstr "默认值: 在 Python 配置中为 ``-1``，在隔离配置中为 ``0``。"

#: ../../c-api/init_config.rst:279
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr "如为非零值，则会在 C 语言区域被强制转换时发出警告。"

#: ../../c-api/init_config.rst:285
msgid ""
"If non-zero, enables the :ref:`Python Development Mode <devmode>`: see "
":c:member:`PyConfig.dev_mode`."
msgstr ""

#: ../../c-api/init_config.rst:288 ../../c-api/init_config.rst:633
#: ../../c-api/init_config.rst:675 ../../c-api/init_config.rst:1093
msgid "Default: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr "默认值: 在 Python 模式中为 ``-1``，在隔离模式中为 ``0``。"

#: ../../c-api/init_config.rst:292
msgid "Isolated mode: see :c:member:`PyConfig.isolated`."
msgstr "隔离模式：参见 :c:member:`PyConfig.isolated`。"

#: ../../c-api/init_config.rst:294 ../../c-api/init_config.rst:797
msgid "Default: ``0`` in Python mode, ``1`` in isolated mode."
msgstr "默认值: 在 Python 模式中为 ``0``，在隔离模式中为 ``1``。"

#: ../../c-api/init_config.rst:298
msgid "If non-zero:"
msgstr "如为非零值:"

#: ../../c-api/init_config.rst:300
msgid "Set :c:member:`PyPreConfig.utf8_mode` to ``0``,"
msgstr "设置 :c:member:`PyPreConfig.utf8_mode` 为 ``0``,"

#: ../../c-api/init_config.rst:301
msgid "Set :c:member:`PyConfig.filesystem_encoding` to ``\"mbcs\"``,"
msgstr "设置 :c:member:`PyConfig.filesystem_encoding` 为 ``\"mbcs\"``,"

#: ../../c-api/init_config.rst:302
msgid "Set :c:member:`PyConfig.filesystem_errors` to ``\"replace\"``."
msgstr "设置 :c:member:`PyConfig.filesystem_errors` 为 ``\"replace\"``."

#: ../../c-api/init_config.rst:304
msgid ""
"Initialized the from :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable value."
msgstr "初始化来自 :envvar:`PYTHONLEGACYWINDOWSFSENCODING` 的环境变量值。"

#: ../../c-api/init_config.rst:307 ../../c-api/init_config.rst:810
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr "仅在 Windows 上可用。 ``#ifdef MS_WINDOWS`` 宏可被用于 Windows 专属的代码。"

#: ../../c-api/init_config.rst:310 ../../c-api/init_config.rst:588
#: ../../c-api/init_config.rst:595 ../../c-api/init_config.rst:646
#: ../../c-api/init_config.rst:755 ../../c-api/init_config.rst:769
#: ../../c-api/init_config.rst:783 ../../c-api/init_config.rst:813
#: ../../c-api/init_config.rst:827 ../../c-api/init_config.rst:880
#: ../../c-api/init_config.rst:929 ../../c-api/init_config.rst:989
#: ../../c-api/init_config.rst:1028 ../../c-api/init_config.rst:1057
#: ../../c-api/init_config.rst:1128
msgid "Default: ``0``."
msgstr "默认值: ``0``."

#: ../../c-api/init_config.rst:314
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and "
":c:func:`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the "
"same way the regular Python parses command line arguments: see :ref:`Command"
" Line Arguments <using-on-cmdline>`."
msgstr ""
"如为非零值，:c:func:`Py_PreInitializeFromArgs` 和 "
":c:func:`Py_PreInitializeFromBytesArgs` 将以与常规 Python 解析命令行参数的相同方式解析其 "
"``argv`` 参数：参见 :ref:`命令行参数 <using-on-cmdline>`。"

#: ../../c-api/init_config.rst:323
msgid ""
"Use :ref:`environment variables <using-on-envvars>`? See "
":c:member:`PyConfig.use_environment`."
msgstr ""
"使用 :ref:`环境变量 <using-on-envvars>`? 参见 :c:member:`PyConfig.use_environment`。"

#: ../../c-api/init_config.rst:326 ../../c-api/init_config.rst:1102
msgid "Default: ``1`` in Python config and ``0`` in isolated config."
msgstr "默认值: 在 Python 配置中为 ``1`` 而在隔离配置中为 ``0``。"

#: ../../c-api/init_config.rst:330
msgid "If non-zero, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr "如为非零值，则启用 :ref:`Python UTF-8 模式 <utf8-mode>`。"

#: ../../c-api/init_config.rst:332
msgid ""
"Set by the :option:`-X utf8 <-X>` command line option and the "
":envvar:`PYTHONUTF8` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:335
msgid "Default: ``-1`` in Python config and ``0`` in isolated config."
msgstr "默认值: 在 Python 配置中为 ``-1`` 而在隔离配置中为 ``0``。"

#: ../../c-api/init_config.rst:341
msgid "Preinitialize Python with PyPreConfig"
msgstr "使用 PyPreConfig 预初始化 Python"

#: ../../c-api/init_config.rst:343
msgid "The preinitialization of Python:"
msgstr "Python 的预初始化:"

#: ../../c-api/init_config.rst:345
msgid "Set the Python memory allocators (:c:member:`PyPreConfig.allocator`)"
msgstr "设置 Python 内存分配器 (:c:member:`PyPreConfig.allocator`)"

#: ../../c-api/init_config.rst:346
msgid "Configure the LC_CTYPE locale (:term:`locale encoding`)"
msgstr "配置 LC_CTYPE 语言区域 (:term:`locale encoding`)"

#: ../../c-api/init_config.rst:347
msgid ""
"Set the :ref:`Python UTF-8 Mode <utf8-mode>` "
"(:c:member:`PyPreConfig.utf8_mode`)"
msgstr ""
"设置 :ref:`Python UTF-8 模式 <utf8-mode>` (:c:member:`PyPreConfig.utf8_mode`)"

#: ../../c-api/init_config.rst:350
msgid ""
"The current preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig``."
msgstr "当前的预配置 (``PyPreConfig`` 类型) 保存在 ``_PyRuntime.preconfig`` 中。"

#: ../../c-api/init_config.rst:353
msgid "Functions to preinitialize Python:"
msgstr "用于预初始化 Python 的函数："

#: ../../c-api/init_config.rst:357 ../../c-api/init_config.rst:363
#: ../../c-api/init_config.rst:372
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr "根据 *preconfig* 预配置来预初始化 Python。"

#: ../../c-api/init_config.rst:359 ../../c-api/init_config.rst:368
#: ../../c-api/init_config.rst:377
msgid "*preconfig* must not be ``NULL``."
msgstr "*preconfig* 不可为 ``NULL``。"

#: ../../c-api/init_config.rst:365
msgid ""
"Parse *argv* command line arguments (bytes strings) if "
":c:member:`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"如果 *preconfig* 的 :c:member:`~PyPreConfig.parse_argv` 为非零值则解析 *argv* "
"命令行参数（字节串）。"

#: ../../c-api/init_config.rst:374
msgid ""
"Parse *argv* command line arguments (wide strings) if "
":c:member:`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""
"如果 *preconfig* 的 :c:member:`~PyPreConfig.parse_argv` 为非零值则解析 *argv* "
"命令行参数（宽字符串）。"

#: ../../c-api/init_config.rst:379 ../../c-api/init_config.rst:1190
msgid ""
"The caller is responsible to handle exceptions (error or exit) using "
":c:func:`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""
"调用方要负责使用 :c:func:`PyStatus_Exception` 和 :c:func:`Py_ExitStatusException` "
"来处理异常（错误或退出）。"

#: ../../c-api/init_config.rst:382
msgid ""
"For :ref:`Python Configuration <init-python-config>` "
"(:c:func:`PyPreConfig_InitPythonConfig`), if Python is initialized with "
"command line arguments, the command line arguments must also be passed to "
"preinitialize Python, since they have an effect on the pre-configuration "
"like encodings. For example, the :option:`-X utf8 <-X>` command line option "
"enables the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"对于 :ref:`Python 配置 <init-python-config>` "
"(:c:func:`PyPreConfig_InitPythonConfig`)，如果 Python 是用命令行参数初始化的，那么在预初始化 "
"Python 时也必须传递命令行参数，因为它们会对编码格式等预配置产生影响。 例如，:option:`-X utf8<-X>` 命令行选项将启用 "
":ref:`Python UTF-8 模式<utf8-mode>`。"

#: ../../c-api/init_config.rst:389
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if "
":c:member:`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""
"``PyMem_SetAllocator()`` 可在 :c:func:`Py_PreInitialize` "
"之后、:c:func:`Py_InitializeFromConfig` 之前被调用以安装自定义的内存分配器。 如果 "
":c:member:`PyPreConfig.allocator` 被设为 ``PYMEM_ALLOCATOR_NOT_SET`` 则可在 "
":c:func:`Py_PreInitialize` 之前被调用。"

#: ../../c-api/init_config.rst:394
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before the Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the Python preinitialization."
msgstr ""
"像 :c:func:`PyMem_RawMalloc` 这样的 Python 内存分配函数不能在 Python 预初始化之前使用，而直接调用 "
"``malloc()`` 和 ``free()`` 则始终会是安全的。 :c:func:`Py_DecodeLocale` 不能在 Python "
"预初始化之前被调用。"

#: ../../c-api/init_config.rst:399
msgid ""
"Example using the preinitialization to enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>`::"
msgstr "使用预初始化来启用 :ref:`Python UTF-8 模式 <utf8-mode>` 的例子::"

#: ../../c-api/init_config.rst:421
msgid "PyConfig"
msgstr "PyConfig"

#: ../../c-api/init_config.rst:425
msgid "Structure containing most parameters to configure Python."
msgstr "包含了大部分用于配置 Python 的形参的结构体。"

#: ../../c-api/init_config.rst:427
msgid ""
"When done, the :c:func:`PyConfig_Clear` function must be used to release the"
" configuration memory."
msgstr "在完成后，必须使用 :c:func:`PyConfig_Clear` 函数来释放配置内存。"

#: ../../c-api/init_config.rst:430
msgid "Structure methods:"
msgstr "结构体方法:"

#: ../../c-api/init_config.rst:434
msgid ""
"Initialize configuration with the :ref:`Python Configuration <init-python-"
"config>`."
msgstr "通过 :ref:`Python 配置 <init-python-config>` 来初始化配置。"

#: ../../c-api/init_config.rst:439
msgid ""
"Initialize configuration with the :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr "通过 :ref:`隔离配置 <init-isolated-conf>` 来初始化配置。"

#: ../../c-api/init_config.rst:444
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr "将宽字符串 *str* 拷贝至 ``*config_str``。"

#: ../../c-api/init_config.rst:446 ../../c-api/init_config.rst:453
#: ../../c-api/init_config.rst:460 ../../c-api/init_config.rst:468
#: ../../c-api/init_config.rst:474 ../../c-api/init_config.rst:488
msgid ":ref:`Preinitialize Python <c-preinit>` if needed."
msgstr "在必要时 :ref:`预初始化 Python <c-preinit>`。"

#: ../../c-api/init_config.rst:450
msgid ""
"Decode *str* using :c:func:`Py_DecodeLocale` and set the result into "
"``*config_str``."
msgstr "使用 :c:func:`Py_DecodeLocale` 对 *str* 进行解码并将结果设置到 ``*config_str``。"

#: ../../c-api/init_config.rst:457
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of wide character strings."
msgstr "根据宽字符串列表 *argv* 设置命令行参数 (*config* 的 :c:member:`~PyConfig.argv` 成员)。"

#: ../../c-api/init_config.rst:464
msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of bytes strings. Decode bytes using "
":c:func:`Py_DecodeLocale`."
msgstr ""
"根据字节串列表 *argv* 设置命令行参数 (*config* 的 :c:member:`~PyConfig.argv` 成员)。 使用 "
":c:func:`Py_DecodeLocale` 对字节串进行解码。"

#: ../../c-api/init_config.rst:472
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr "将宽字符串列表 *list* 设置为 *length* 和 *items*。"

#: ../../c-api/init_config.rst:478
msgid "Read all Python configuration."
msgstr "读取所有 Python 配置。"

#: ../../c-api/init_config.rst:480
msgid "Fields which are already initialized are left unchanged."
msgstr "已经初始化的字段会保持不变。"

#: ../../c-api/init_config.rst:482 ../../c-api/init_config.rst:909
msgid ""
"The :c:func:`PyConfig_Read` function only parses :c:member:`PyConfig.argv` "
"arguments once: :c:member:`PyConfig.parse_argv` is set to ``2`` after "
"arguments are parsed. Since Python arguments are strippped from "
":c:member:`PyConfig.argv`, parsing arguments twice would parse the "
"application options as Python options."
msgstr ""
":c:func:`PyConfig_Read` 函数只解析 :c:member:`PyConfig.argv` "
"参数一次：在参数解析完成后，:c:member:`PyConfig.parse_argv` 将被设为 ``2``。 由于 Python 参数是从 "
":c:member:`PyConfig.argv` 中剥离的，因此解析参数两次会将应用程序选项解析为 Python 选项。"

#: ../../c-api/init_config.rst:490
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed once, "
":c:member:`PyConfig.parse_argv` is set to ``2`` after arguments are parsed, "
"and arguments are only parsed if :c:member:`PyConfig.parse_argv` equals "
"``1``."
msgstr ""
":c:member:`PyConfig.argv` "
"参数现在只会被解析一次，在参数解析完成后，:c:member:`PyConfig.parse_argv` 将被设为 ``2``，只有当 "
":c:member:`PyConfig.parse_argv` 等于 ``1`` 时才会解析参数。"

#: ../../c-api/init_config.rst:498
msgid "Release configuration memory."
msgstr "释放配置内存"

#: ../../c-api/init_config.rst:500
msgid ""
"Most ``PyConfig`` methods :ref:`preinitialize Python <c-preinit>` if needed."
" In that case, the Python preinitialization configuration "
"(:c:type:`PyPreConfig`) in based on the :c:type:`PyConfig`. If configuration"
" fields which are in common with :c:type:`PyPreConfig` are tuned, they must "
"be set before calling a :c:type:`PyConfig` method:"
msgstr ""
"如有必要大多数 ``PyConfig`` 方法将会 :ref:`预初始化 Python <c-preinit>`。 在这种情况下，Python "
"预初始化配置 (:c:type:`PyPreConfig`) 将以 :c:type:`PyConfig` 为基础。 如果要调整与 "
":c:type:`PyPreConfig` 相同的配置字段，它们必须在调用 :c:type:`PyConfig` 方法之前被设置："

#: ../../c-api/init_config.rst:506
msgid ":c:member:`PyConfig.dev_mode`"
msgstr ":c:member:`PyConfig.dev_mode`"

#: ../../c-api/init_config.rst:507
msgid ":c:member:`PyConfig.isolated`"
msgstr ":c:member:`PyConfig.isolated`"

#: ../../c-api/init_config.rst:508
msgid ":c:member:`PyConfig.parse_argv`"
msgstr ":c:member:`PyConfig.parse_argv`"

#: ../../c-api/init_config.rst:509
msgid ":c:member:`PyConfig.use_environment`"
msgstr ":c:member:`PyConfig.use_environment`"

#: ../../c-api/init_config.rst:511
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called before other methods, since the "
"preinitialization configuration depends on command line arguments (if "
":c:member:`parse_argv` is non-zero)."
msgstr ""

#: ../../c-api/init_config.rst:516
msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""
"这些方法的调用者要负责使用 ``PyStatus_Exception()`` 和 ``Py_ExitStatusException()`` "
"来处理异常（错误或退出）。"

#: ../../c-api/init_config.rst:523
msgid "Command line arguments: :data:`sys.argv`."
msgstr "命令行参数: :data:`sys.argv`。"

#: ../../c-api/init_config.rst:525
msgid ""
"Set :c:member:`~PyConfig.parse_argv` to ``1`` to parse "
":c:member:`~PyConfig.argv` the same way the regular Python parses Python "
"command line arguments and then to strip Python arguments from "
":c:member:`~PyConfig.argv`."
msgstr ""
"将 :c:member:`~PyConfig.parse_argv` 设为 ``1`` 将以与普通 Python 解析 Python "
"命令行参数相同的方式解析 :c:member:`~PyConfig.argv` 再从 :c:member:`~PyConfig.argv` 中剥离 "
"Python 参数。"

#: ../../c-api/init_config.rst:530
msgid ""
"If :c:member:`~PyConfig.argv` is empty, an empty string is added to ensure "
"that :data:`sys.argv` always exists and is never empty."
msgstr ""
"如果 :c:member:`~PyConfig.argv` 为空，则会添加一个空字符串以确保 :data:`sys.argv` 始终存在并且永远不为空。"

#: ../../c-api/init_config.rst:533 ../../c-api/init_config.rst:541
#: ../../c-api/init_config.rst:553 ../../c-api/init_config.rst:561
#: ../../c-api/init_config.rst:653 ../../c-api/init_config.rst:662
#: ../../c-api/init_config.rst:744 ../../c-api/init_config.rst:850
#: ../../c-api/init_config.rst:948 ../../c-api/init_config.rst:966
#: ../../c-api/init_config.rst:980 ../../c-api/init_config.rst:997
#: ../../c-api/init_config.rst:1009 ../../c-api/init_config.rst:1017
msgid "Default: ``NULL``."
msgstr "默认值: ``NULL``."

#: ../../c-api/init_config.rst:535
msgid "See also the :c:member:`~PyConfig.orig_argv` member."
msgstr "另请参阅 :c:member:`~PyConfig.orig_argv` 成员。"

#: ../../c-api/init_config.rst:539
msgid ":data:`sys.base_exec_prefix`."
msgstr ":data:`sys.base_exec_prefix`."

#: ../../c-api/init_config.rst:543 ../../c-api/init_config.rst:555
#: ../../c-api/init_config.rst:563 ../../c-api/init_config.rst:655
#: ../../c-api/init_config.rst:664 ../../c-api/init_config.rst:867
#: ../../c-api/init_config.rst:950
msgid ""
"Part of the :ref:`Python Path Configuration <init-path-config>` output."
msgstr ":ref:`Python 路径配置 <init-path-config>` 的一部分。"

#: ../../c-api/init_config.rst:547
msgid "Python base executable: :data:`sys._base_executable`."
msgstr "Python 基础可执行文件: :data:`sys._base_executable`。"

#: ../../c-api/init_config.rst:549
msgid "Set by the :envvar:`__PYVENV_LAUNCHER__` environment variable."
msgstr "由 :envvar:`__PYVENV_LAUNCHER__` 环境变量设置。"

#: ../../c-api/init_config.rst:551
msgid "Set from :c:member:`PyConfig.executable` if ``NULL``."
msgstr "如为 ``NULL`` 则从 :c:member:`PyConfig.executable` 设置。"

#: ../../c-api/init_config.rst:559
msgid ":data:`sys.base_prefix`."
msgstr ":data:`sys.base_prefix`."

#: ../../c-api/init_config.rst:567
msgid ""
"If equals to 0 and :c:member:`~PyConfig.configure_c_stdio` is non-zero, "
"disable buffering on the C streams stdout and stderr."
msgstr ""

#: ../../c-api/init_config.rst:570
msgid ""
"Set to 0 by the :option:`-u` command line option and the "
":envvar:`PYTHONUNBUFFERED` environment variable."
msgstr ""

#: ../../c-api/init_config.rst:573
msgid "stdin is always opened in buffered mode."
msgstr "stdin 始终以缓冲模式打开。"

#: ../../c-api/init_config.rst:575 ../../c-api/init_config.rst:1045
#: ../../c-api/init_config.rst:1160
msgid "Default: ``1``."
msgstr "默认值: ``1``."

#: ../../c-api/init_config.rst:579
msgid ""
"If equals to 1, issue a warning when comparing :class:`bytes` or "
":class:`bytearray` with :class:`str`, or comparing :class:`bytes` with "
":class:`int`."
msgstr ""

#: ../../c-api/init_config.rst:583
msgid ""
"If equal or greater to 2, raise a :exc:`BytesWarning` exception in these "
"cases."
msgstr ""

#: ../../c-api/init_config.rst:586
msgid "Incremented by the :option:`-b` command line option."
msgstr "由 :option:`-b` 命令行选项执行递增。"

#: ../../c-api/init_config.rst:592
msgid ""
"If non-zero, emit a :exc:`EncodingWarning` warning when "
":class:`io.TextIOWrapper` uses its default encoding. See :ref:`io-encoding-"
"warning` for details."
msgstr ""
"如为非零值，则在 :class:`io.TextIOWrapper` 使用默认编码格式时发出 :exc:`EncodingWarning` 警告。 "
"详情请参阅 :ref:`io-encoding-warning`。"

#: ../../c-api/init_config.rst:601
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files: value of the "
":option:`--check-hash-based-pycs` command line option."
msgstr "控制基于哈希值的 ``.pyc`` 文件的验证行为: :option:`--check-hash-based-pycs` 命令行选项的值。"

#: ../../c-api/init_config.rst:604
msgid "Valid values:"
msgstr "有效的值："

#: ../../c-api/init_config.rst:606
msgid ""
"``L\"always\"``: Hash the source file for invalidation regardless of value "
"of the 'check_source' flag."
msgstr "``L\"always\"``: 无论 'check_source' 旗标的值是什么都会对源文件进行哈希验证。"

#: ../../c-api/init_config.rst:608
msgid "``L\"never\"``: Assume that hash-based pycs always are valid."
msgstr "``L\"never\"``: 假定基于哈希值的 pyc 始终是有效的。"

#: ../../c-api/init_config.rst:609
msgid ""
"``L\"default\"``: The 'check_source' flag in hash-based pycs determines "
"invalidation."
msgstr "``L\"default\"``: 基于哈希值的 pyc 中的 'check_source' 旗标确定是否验证无效。"

#: ../../c-api/init_config.rst:612
msgid "Default: ``L\"default\"``."
msgstr "默认值： ``L\"default\"``。"

#: ../../c-api/init_config.rst:614
msgid "See also :pep:`552` \"Deterministic pycs\"."
msgstr "参见 :pep:`552` \"Deterministic pycs\"。"

#: ../../c-api/init_config.rst:618
msgid "If non-zero, configure C standard streams:"
msgstr "如为非零值，则配置 C 标准流:"

#: ../../c-api/init_config.rst:620
msgid ""
"On Windows, set the binary mode (``O_BINARY``) on stdin, stdout and stderr."
msgstr "在 Windows 中，在 stdin, stdout 和 stderr 上设置二进制模式 (``O_BINARY``)。"

#: ../../c-api/init_config.rst:622
msgid ""
"If :c:member:`~PyConfig.buffered_stdio` equals zero, disable buffering of "
"stdin, stdout and stderr streams."
msgstr ""
"如果 :c:member:`~PyConfig.buffered_stdio` 等于零，则禁用 stdin, stdout 和 stderr 流的缓冲。"

#: ../../c-api/init_config.rst:624
msgid ""
"If :c:member:`~PyConfig.interactive` is non-zero, enable stream buffering on"
" stdin and stdout (only stdout on Windows)."
msgstr ""
"如果 :c:member:`~PyConfig.interactive` 为非零值，则启用 stdin 和 stdout 上的流缓冲（Windows "
"中仅限 stdout）。"

#: ../../c-api/init_config.rst:631
msgid "If non-zero, enable the :ref:`Python Development Mode <devmode>`."
msgstr "如果为非零值，则启用 :ref:`Python 开发模式 <devmode>`。"

#: ../../c-api/init_config.rst:637
msgid "Dump Python references?"
msgstr "转储 Python 引用？"

#: ../../c-api/init_config.rst:639
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr "如果为非零值，则转储所有在退出时仍存活的对象。"

#: ../../c-api/init_config.rst:641
msgid "Set to ``1`` by the :envvar:`PYTHONDUMPREFS` environment variable."
msgstr "由 :envvar:`PYTHONDUMPREFS` 环境变量设置为 ``1``。"

#: ../../c-api/init_config.rst:643
msgid ""
"Need a special build of Python with the ``Py_TRACE_REFS`` macro defined: see"
" the :option:`configure --with-trace-refs option <--with-trace-refs>`."
msgstr ""
"需要定义了 ``Py_TRACE_REFS`` 宏的特殊 Python 编译版：参见 :option:`configure --with-trace-"
"refs 选项 <--with-trace-refs>`。"

#: ../../c-api/init_config.rst:650
msgid ""
"The site-specific directory prefix where the platform-dependent Python files"
" are installed: :data:`sys.exec_prefix`."
msgstr "安装依赖于平台的 Python 文件的站点专属目录前缀: :data:`sys.exec_prefix`。"

#: ../../c-api/init_config.rst:659
msgid ""
"The absolute path of the executable binary for the Python interpreter: "
":data:`sys.executable`."
msgstr "Python 解释器可执行二进制文件的绝对路径: :data:`sys.executable`。"

#: ../../c-api/init_config.rst:668
msgid "Enable faulthandler?"
msgstr "启用 faulthandler？"

#: ../../c-api/init_config.rst:670
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr "如果为非零值，则在启动时调用 :func:`faulthandler.enable`。"

#: ../../c-api/init_config.rst:672
msgid ""
"Set to ``1`` by :option:`-X faulthandler <-X>` and the "
":envvar:`PYTHONFAULTHANDLER` environment variable."
msgstr ""
"通过 :option:`-X faulthandler <-X>` 和 :envvar:`PYTHONFAULTHANDLER` 环境变量设为 "
"``1``。"

#: ../../c-api/init_config.rst:679
msgid ""
":term:`Filesystem encoding <filesystem encoding and error handler>`: "
":func:`sys.getfilesystemencoding`."
msgstr ""
":term:`文件系统编码格式 <filesystem encoding and error handler>`: "
":func:`sys.getfilesystemencoding`。"

#: ../../c-api/init_config.rst:682
msgid "On macOS, Android and VxWorks: use ``\"utf-8\"`` by default."
msgstr "在 macOS, Android 和 VxWorks 上：默认使用 ``\"utf-8\"``。"

#: ../../c-api/init_config.rst:684
msgid ""
"On Windows: use ``\"utf-8\"`` by default, or ``\"mbcs\"`` if "
":c:member:`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig`"
" is non-zero."
msgstr ""
"在 Windows 上：默认使用 ``\"utf-8\"``，或者如果 :c:type:`PyPreConfig` 的 "
":c:member:`~PyPreConfig.legacy_windows_fs_encoding` 为非零值则使用 ``\"mbcs\"``。"

#: ../../c-api/init_config.rst:688
msgid "Default encoding on other platforms:"
msgstr "在其他平台上的默认编码格式："

#: ../../c-api/init_config.rst:690
msgid "``\"utf-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "如果 :c:member:`PyPreConfig.utf8_mode` 为非零值则使用 ``\"utf-8\"``。"

#: ../../c-api/init_config.rst:691
msgid ""
"``\"ascii\"`` if Python detects that ``nl_langinfo(CODESET)`` announces the "
"ASCII encoding, whereas the ``mbstowcs()`` function decodes from a different"
" encoding (usually Latin1)."
msgstr ""
"如果 Python 检测到 ``nl_langinfo(CODESET)`` 声明为 ASCII 编码格式，而 ``mbstowcs()`` "
"是从其他的编码格式解码（通常为 Latin1）则使用 ``\"ascii\"``。"

#: ../../c-api/init_config.rst:694
msgid "``\"utf-8\"`` if ``nl_langinfo(CODESET)`` returns an empty string."
msgstr "如果 ``nl_langinfo(CODESET)`` 返回空字符串则使用 ``\"utf-8\"``。"

#: ../../c-api/init_config.rst:695
msgid ""
"Otherwise, use the :term:`locale encoding`: ``nl_langinfo(CODESET)`` result."
msgstr "在其他情况下，使用 :term:`locale encoding`: ``nl_langinfo(CODESET)`` 的结果。"

#: ../../c-api/init_config.rst:698
msgid ""
"At Python startup, the encoding name is normalized to the Python codec name."
" For example, ``\"ANSI_X3.4-1968\"`` is replaced with ``\"ascii\"``."
msgstr ""
"在 Python 启动时，编码格式名称会规范化为 Python 编解码器名称。 例如，``\"ANSI_X3.4-1968\"`` 将被替换为 "
"``\"ascii\"``。"

#: ../../c-api/init_config.rst:701
msgid "See also the :c:member:`~PyConfig.filesystem_errors` member."
msgstr "参见 :c:member:`~PyConfig.filesystem_errors` 的成员。"

#: ../../c-api/init_config.rst:705
msgid ""
":term:`Filesystem error handler <filesystem encoding and error handler>`: "
":func:`sys.getfilesystemencodeerrors`."
msgstr ""
":term:`文件系统错误处理器 <filesystem encoding and error handler>`: "
":func:`sys.getfilesystemencodeerrors`。"

#: ../../c-api/init_config.rst:708
msgid ""
"On Windows: use ``\"surrogatepass\"`` by default, or ``\"replace\"``  if "
":c:member:`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig`"
" is non-zero."
msgstr ""
"在 Windows 上：默认使用 ``\"surrogatepass\"``，或者如果 :c:type:`PyPreConfig` 的  "
":c:member:`~PyPreConfig.legacy_windows_fs_encoding` 为非零值则使用 ``\"replace\"``。"

#: ../../c-api/init_config.rst:712
msgid "On other platforms: use ``\"surrogateescape\"`` by default."
msgstr "在其他平台上：默认使用 ``\"surrogateescape\"``。"

#: ../../c-api/init_config.rst:714
msgid "Supported error handlers:"
msgstr "支持的错误处理器："

#: ../../c-api/init_config.rst:716
msgid "``\"strict\"``"
msgstr "``\"strict\"``"

#: ../../c-api/init_config.rst:717
msgid "``\"surrogateescape\"``"
msgstr "``\"surrogateescape\"``"

#: ../../c-api/init_config.rst:718
msgid "``\"surrogatepass\"`` (only supported with the UTF-8 encoding)"
msgstr "``\"surrogatepass\"`` (仅支持 UTF-8 编码格式)"

#: ../../c-api/init_config.rst:720
msgid "See also the :c:member:`~PyConfig.filesystem_encoding` member."
msgstr "参见 :c:member:`~PyConfig.filesystem_encoding` 的成员。"

#: ../../c-api/init_config.rst:725
msgid "Randomized hash function seed."
msgstr "随机化的哈希函数种子。"

#: ../../c-api/init_config.rst:727
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at"
" Python startup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""
"如果 :c:member:`~PyConfig.use_hash_seed` 为零，则在 Python 启动时随机选择一个种子，并忽略 "
":c:member:`~PyConfig.hash_seed`。"

#: ../../c-api/init_config.rst:730
msgid "Set by the :envvar:`PYTHONHASHSEED` environment variable."
msgstr "由 :envvar:`PYTHONHASHSEED` 环境变量设置。"

#: ../../c-api/init_config.rst:732
msgid ""
"Default *use_hash_seed* value: ``-1`` in Python mode, ``0`` in isolated "
"mode."
msgstr "默认的 *use_hash_seed* 值：在 Python 模式下为 ``-1``，在隔离模式下为 ``0``。"

#: ../../c-api/init_config.rst:737
msgid "Python home directory."
msgstr "Python 主目录。"

#: ../../c-api/init_config.rst:739
msgid ""
"If :c:func:`Py_SetPythonHome` has been called, use its argument if it is not"
" ``NULL``."
msgstr "如果 :c:func:`Py_SetPythonHome` 已被调用，则当其参数不为 ``NULL`` 时将使用它。"

#: ../../c-api/init_config.rst:742
msgid "Set by the :envvar:`PYTHONHOME` environment variable."
msgstr "由 :envvar:`PYTHONHOME` 环境变量设置。"

#: ../../c-api/init_config.rst:746 ../../c-api/init_config.rst:839
#: ../../c-api/init_config.rst:852 ../../c-api/init_config.rst:941
#: ../../c-api/init_config.rst:968
msgid "Part of the :ref:`Python Path Configuration <init-path-config>` input."
msgstr ":ref:`Python 路径配置 <init-path-config>` 输入的一部分。"

#: ../../c-api/init_config.rst:750
msgid "If non-zero, profile import time."
msgstr "如为非零值，则对导入时间执行性能分析。"

#: ../../c-api/init_config.rst:752
msgid ""
"Set the ``1`` by the :option:`-X importtime <-X>` option and the "
":envvar:`PYTHONPROFILEIMPORTTIME` environment variable."
msgstr ""
"通过 :option:`-X importtime <-X>` 选项和 :envvar:`PYTHONPROFILEIMPORTTIME` "
"环境变量设置为 ``1``。"

#: ../../c-api/init_config.rst:759
msgid "Enter interactive mode after executing a script or a command."
msgstr "在执行脚本或命令之后进入交互模式。"

#: ../../c-api/init_config.rst:761
msgid ""
"If greater than 0, enable inspect: when a script is passed as first argument"
" or the -c option is used, enter interactive mode after executing the script"
" or the command, even when :data:`sys.stdin` does not appear to be a "
"terminal."
msgstr ""

#: ../../c-api/init_config.rst:766
msgid ""
"Incremented by the :option:`-i` command line option. Set to ``1`` if the "
":envvar:`PYTHONINSPECT` environment variable is non-empty."
msgstr ""
"通过 :option:`-i` 命令行选项执行递增。 如果 :envvar:`PYTHONINSPECT` 环境变量为非空值则设为 ``1``。"

#: ../../c-api/init_config.rst:773
msgid "Install Python signal handlers?"
msgstr "安装 Python 信号处理器？"

#: ../../c-api/init_config.rst:775 ../../c-api/init_config.rst:915
#: ../../c-api/init_config.rst:939 ../../c-api/init_config.rst:1112
msgid "Default: ``1`` in Python mode, ``0`` in isolated mode."
msgstr "默认值：在 Python 模式下为 ``1``，在隔离模式下为 ``0``。"

#: ../../c-api/init_config.rst:779
msgid "If greater than 0, enable the interactive mode (REPL)."
msgstr ""

#: ../../c-api/init_config.rst:781
msgid "Incremented by the :option:`-i` command line option."
msgstr "由 :option:`-i` 命令行选项执行递增。"

#: ../../c-api/init_config.rst:787
msgid "If greater than 0, enable isolated mode:"
msgstr ""

#: ../../c-api/init_config.rst:789
msgid ""
":data:`sys.path` contains neither the script's directory (computed from "
"``argv[0]`` or the current directory) nor the user's site-packages "
"directory."
msgstr ""

#: ../../c-api/init_config.rst:792
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr "Python REPL 将不导入 :mod:`readline` 也不在交互提示符中启用默认的 readline 配置。"

#: ../../c-api/init_config.rst:794
msgid ""
"Set :c:member:`~PyConfig.use_environment` and "
":c:member:`~PyConfig.user_site_directory` to 0."
msgstr ""

#: ../../c-api/init_config.rst:799
msgid "See also :c:member:`PyPreConfig.isolated`."
msgstr "另请参见 :c:member:`PyPreConfig.isolated` 。"

#: ../../c-api/init_config.rst:803
msgid ""
"If non-zero, use :class:`io.FileIO` instead of :class:`io.WindowsConsoleIO` "
"for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:807
msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr "如果 :envvar:`PYTHONLEGACYWINDOWSSTDIO` 环境变量被设为非空字符串则设为 ``1``。"

#: ../../c-api/init_config.rst:815
msgid "See also the :pep:`528` (Change Windows console encoding to UTF-8)."
msgstr "另请参阅 :pep:`528` (将 Windows 控制台编码格式更改为 UTF-8)。"

#: ../../c-api/init_config.rst:819
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr "如为非零值，则在退出时转储 :ref:`Python pymalloc 内存分配器 <pymalloc>` 的统计数据。"

#: ../../c-api/init_config.rst:822
msgid "Set to ``1`` by the :envvar:`PYTHONMALLOCSTATS` environment variable."
msgstr "由 :envvar:`PYTHONMALLOCSTATS` 环境变量设置为 ``1``。"

#: ../../c-api/init_config.rst:824
msgid ""
"The option is ignored if Python is :option:`configured using the --without-"
"pymalloc option <--without-pymalloc>`."
msgstr ""
"如果 Python 是 :option:`使用 --without-pymalloc 选项进行配置 <--without-pymalloc>` "
"则该选项将被忽略。"

#: ../../c-api/init_config.rst:831
msgid "Platform library directory name: :data:`sys.platlibdir`."
msgstr "平台库目录名称: :data:`sys.platlibdir`。"

#: ../../c-api/init_config.rst:833
msgid "Set by the :envvar:`PYTHONPLATLIBDIR` environment variable."
msgstr "由 :envvar:`PYTHONPLATLIBDIR` 环境变量设置。"

#: ../../c-api/init_config.rst:835
msgid ""
"Default: value of the ``PLATLIBDIR`` macro which is set by the "
":option:`configure --with-platlibdir option <--with-platlibdir>` (default: "
"``\"lib\"``)."
msgstr ""

#: ../../c-api/init_config.rst:845
msgid ""
"Module search paths (:data:`sys.path`) as a string separated by ``DELIM`` "
"(:data:`os.path.pathsep`)."
msgstr ""

#: ../../c-api/init_config.rst:848
msgid "Set by the :envvar:`PYTHONPATH` environment variable."
msgstr "由 :envvar:`PYTHONPATH` 环境变量设置。"

#: ../../c-api/init_config.rst:857
msgid "Module search paths: :data:`sys.path`."
msgstr "模块搜索路径: :data:`sys.path`。"

#: ../../c-api/init_config.rst:859
msgid ""
"If :c:member:`~PyConfig.module_search_paths_set` is equal to 0, the function"
" calculating the :ref:`Python Path Configuration <init-path-config>` "
"overrides the :c:member:`~PyConfig.module_search_paths` and sets "
":c:member:`~PyConfig.module_search_paths_set` to ``1``."
msgstr ""

#: ../../c-api/init_config.rst:864
msgid ""
"Default: empty list (``module_search_paths``) and ``0`` "
"(``module_search_paths_set``)."
msgstr ""
"默认值：空列表 (``module_search_paths``) 和 ``0`` (``module_search_paths_set``)。"

#: ../../c-api/init_config.rst:871
msgid "Compilation optimization level:"
msgstr "编译优化级别："

#: ../../c-api/init_config.rst:873
msgid "``0``: Peephole optimizer, set ``__debug__`` to ``True``."
msgstr "``0``: Peephole 优化器，将 ``__debug__`` 设为 ``True``。"

#: ../../c-api/init_config.rst:874
msgid "``1``: Level 0, remove assertions, set ``__debug__`` to ``False``."
msgstr "``1``: 0 级，移除断言，将 ``__debug__`` 设为 ``False``。"

#: ../../c-api/init_config.rst:875
msgid "``2``: Level 1, strip docstrings."
msgstr "``2``: 1 级，去除文档字符串。"

#: ../../c-api/init_config.rst:877
msgid ""
"Incremented by the :option:`-O` command line option. Set to the "
":envvar:`PYTHONOPTIMIZE` environment variable value."
msgstr "通过 :option:`-O` 命令行选项递增。 设置为 :envvar:`PYTHONOPTIMIZE` 环境变量值。"

#: ../../c-api/init_config.rst:884
msgid ""
"The list of the original command line arguments passed to the Python "
"executable: :data:`sys.orig_argv`."
msgstr "传给 Python 可执行程序的原始命令行参数列表: :data:`sys.orig_argv`。"

#: ../../c-api/init_config.rst:887
msgid ""
"If :c:member:`~PyConfig.orig_argv` list is empty and "
":c:member:`~PyConfig.argv` is not a list only containing an empty string, "
":c:func:`PyConfig_Read` copies :c:member:`~PyConfig.argv` into "
":c:member:`~PyConfig.orig_argv` before modifying :c:member:`~PyConfig.argv` "
"(if :c:member:`~PyConfig.parse_argv` is non-zero)."
msgstr ""
"如果 :c:member:`~PyConfig.orig_argv` 列表为空并且 :c:member:`~PyConfig.argv` "
"不是一个只包含空字符串的列表，:c:func:`PyConfig_Read` 将在修改 :c:member:`~PyConfig.argv` 之前把 "
":c:member:`~PyConfig.argv` 拷贝至 :c:member:`~PyConfig.orig_argv` (如果 "
":c:member:`~PyConfig.parse_argv` 不为空)。"

#: ../../c-api/init_config.rst:894
msgid ""
"See also the :c:member:`~PyConfig.argv` member and the "
":c:func:`Py_GetArgcArgv` function."
msgstr "另请参阅 :c:member:`~PyConfig.argv` 成员和 :c:func:`Py_GetArgcArgv` 函数。"

#: ../../c-api/init_config.rst:897 ../../c-api/init_config.rst:1147
#: ../../c-api/init_config.rst:1166
msgid "Default: empty list."
msgstr "默认值：空列表。"

#: ../../c-api/init_config.rst:903
msgid "Parse command line arguments?"
msgstr "解析命令行参数？"

#: ../../c-api/init_config.rst:905
msgid ""
"If equals to ``1``, parse :c:member:`~PyConfig.argv` the same way the "
"regular Python parses :ref:`command line arguments <using-on-cmdline>`, and "
"strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""
"如果等于 ``1``，则以与常规 Python 解析 :ref:`命令行参数 <using-on-cmdline>` 相同的方式解析 "
":c:member:`~PyConfig.argv`，并从 :c:member:`~PyConfig.argv` 中剥离 Python 参数。"

#: ../../c-api/init_config.rst:917
msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed if "
":c:member:`PyConfig.parse_argv` equals to ``1``."
msgstr ""
"现在只有当 :c:member:`PyConfig.parse_argv` 等于 ``1`` 时才会解析 "
":c:member:`PyConfig.argv` 参数。"

#: ../../c-api/init_config.rst:923
msgid ""
"Parser debug mode. If greater than 0, turn on parser debugging output (for "
"expert only, depending on compilation options)."
msgstr ""

#: ../../c-api/init_config.rst:926
msgid ""
"Incremented by the :option:`-d` command line option. Set to the "
":envvar:`PYTHONDEBUG` environment variable value."
msgstr "通过 :option:`-d` 命令行选项递增。 设置为 :envvar:`PYTHONDEBUG` 环境变量值。"

#: ../../c-api/init_config.rst:933
msgid ""
"On Unix, if non-zero, calculating the :ref:`Python Path Configuration <init-"
"path-config>` can log warnings into ``stderr``. If equals to 0, suppress "
"these warnings."
msgstr ""

#: ../../c-api/init_config.rst:937
msgid "It has no effect on Windows."
msgstr ""

#: ../../c-api/init_config.rst:945
msgid ""
"The site-specific directory prefix where the platform independent Python "
"files are installed: :data:`sys.prefix`."
msgstr "安装依赖于平台的 Python 文件的站点专属目录前缀: :data:`sys.prefix`。"

#: ../../c-api/init_config.rst:954
msgid ""
"Program name used to initialize :c:member:`~PyConfig.executable` and in "
"early error messages during Python initialization."
msgstr "用于初始化 :c:member:`~PyConfig.executable` 和在 Python 初始化期间早期错误消息中使用的程序名称。"

#: ../../c-api/init_config.rst:957
msgid "If :func:`Py_SetProgramName` has been called, use its argument."
msgstr "如果 :func:`Py_SetProgramName` 已被调用，将使用其参数。"

#: ../../c-api/init_config.rst:958
msgid "On macOS, use :envvar:`PYTHONEXECUTABLE` environment variable if set."
msgstr "在 macOS 上，如果设置了 :envvar:`PYTHONEXECUTABLE` 环境变量则会使用它。"

#: ../../c-api/init_config.rst:959
msgid ""
"If the ``WITH_NEXT_FRAMEWORK`` macro is defined, use "
":envvar:`__PYVENV_LAUNCHER__` environment variable if set."
msgstr ""
"如果定义了 ``WITH_NEXT_FRAMEWORK`` 宏，当设置了 :envvar:`__PYVENV_LAUNCHER__` "
"环境变量时将会使用它。"

#: ../../c-api/init_config.rst:961
msgid ""
"Use ``argv[0]`` of :c:member:`~PyConfig.argv` if available and non-empty."
msgstr "如果 :c:member:`~PyConfig.argv` 的 ``argv[0]`` 可用并且不为空值则会使用它。"

#: ../../c-api/init_config.rst:963
msgid ""
"Otherwise, use ``L\"python\"`` on Windows, or ``L\"python3\"`` on other "
"platforms."
msgstr "否则，在 Windows 上将使用 ``L\"python\"``，在其他平台上将使用 ``L\"python3\"``。"

#: ../../c-api/init_config.rst:972
msgid ""
"Directory where cached ``.pyc`` files are written: "
":data:`sys.pycache_prefix`."
msgstr "缓存 ``.pyc`` 文件被写入到的目录: :data:`sys.pycache_prefix`。"

#: ../../c-api/init_config.rst:975
msgid ""
"Set by the :option:`-X pycache_prefix=PATH <-X>` command line option and the"
" :envvar:`PYTHONPYCACHEPREFIX` environment variable."
msgstr ""
"通过 :option:`-X pycache_prefix=PATH <-X>` 命令行选项和 "
":envvar:`PYTHONPYCACHEPREFIX` 环境变量设置。"

#: ../../c-api/init_config.rst:978
msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr "如果为 ``NULL``，则 :data:`sys.pycache_prefix` 将被设为 ``None``。"

#: ../../c-api/init_config.rst:984
msgid ""
"Quiet mode. If greater than 0, don't display the copyright and version at "
"Python startup in interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:987
msgid "Incremented by the :option:`-q` command line option."
msgstr "由 :option:`-q` 命令行选项执行递增。"

#: ../../c-api/init_config.rst:993
msgid "Value of the :option:`-c` command line option."
msgstr ":option:`-c` 命令行选项的值。"

#: ../../c-api/init_config.rst:995 ../../c-api/init_config.rst:1007
#: ../../c-api/init_config.rst:1015
msgid "Used by :c:func:`Py_RunMain`."
msgstr "由 :c:func:`Py_RunMain` 使用。"

#: ../../c-api/init_config.rst:1001
msgid ""
"Filename passed on the command line: trailing command line argument without "
":option:`-c` or :option:`-m`."
msgstr ""

#: ../../c-api/init_config.rst:1004
msgid ""
"For example, it is set to ``script.py`` by the ``python3 script.py arg`` "
"command."
msgstr ""

#: ../../c-api/init_config.rst:1013
msgid "Value of the :option:`-m` command line option."
msgstr ":option:`-m` 命令行选项的值。"

#: ../../c-api/init_config.rst:1021
msgid "Show total reference count at exit?"
msgstr "在退出时显示引用总数？"

#: ../../c-api/init_config.rst:1023
msgid "Set to 1 by :option:`-X showrefcount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:1025
msgid ""
"Need a :ref:`debug build of Python <debug-build>` (the ``Py_REF_DEBUG`` "
"macro must be defined)."
msgstr "需要 :ref:`Python 调试编译版 <debug-build>` (必须定义 ``Py_REF_DEBUG`` 宏)。"

#: ../../c-api/init_config.rst:1032
msgid "Import the :mod:`site` module at startup?"
msgstr "在启动时导入 :mod:`site` 模块？"

#: ../../c-api/init_config.rst:1034
msgid ""
"If equal to zero, disable the import of the module site and the site-"
"dependent manipulations of :data:`sys.path` that it entails."
msgstr "如果等于零，则禁用模块站点的导入以及由此产生的与站点相关的 :data:`sys.path` 操作。"

#: ../../c-api/init_config.rst:1037
msgid ""
"Also disable these manipulations if the :mod:`site` module is explicitly "
"imported later (call :func:`site.main` if you want them to be triggered)."
msgstr ""
"如果以后显式地导入 :mod:`site` 模块也要禁用这些操作（如果你希望触发这些操作，请调用 :func:`site.main` 函数）。"

#: ../../c-api/init_config.rst:1040
msgid "Set to ``0`` by the :option:`-S` command line option."
msgstr "通过 :option:`-S` 命令行选项设置为 ``0``。"

#: ../../c-api/init_config.rst:1042
msgid ""
":data:`sys.flags.no_site` is set to the inverted value of "
":c:member:`~PyConfig.site_import`."
msgstr ""

#: ../../c-api/init_config.rst:1049
msgid ""
"If non-zero, skip the first line of the :c:member:`PyConfig.run_filename` "
"source."
msgstr "如为非零值，则跳过 :c:member:`PyConfig.run_filename` 源的第一行。"

#: ../../c-api/init_config.rst:1052
msgid ""
"It allows the usage of non-Unix forms of ``#!cmd``. This is intended for a "
"DOS specific hack only."
msgstr "它将允许使用非 Unix 形式的 ``#!cmd``。 这是针对 DOS 专属的破解操作。"

#: ../../c-api/init_config.rst:1055
msgid "Set to ``1`` by the :option:`-x` command line option."
msgstr "通过 :option:`-x` 命令行选项设置为 ``1``。"

#: ../../c-api/init_config.rst:1062
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and "
":data:`sys.stderr` (but :data:`sys.stderr` always uses "
"``\"backslashreplace\"`` error handler)."
msgstr ""
":data:`sys.stdin`、:data:`sys.stdout` 和 :data:`sys.stderr` 的编码格式和编码格式错误（但 "
":data:`sys.stderr` 将始终使用 ``\"backslashreplace\"`` 错误处理器）。"

#: ../../c-api/init_config.rst:1066
msgid ""
"If :c:func:`Py_SetStandardStreamEncoding` has been called, use its *error* "
"and *errors* arguments if they are not ``NULL``."
msgstr ""
"如果 :c:func:`Py_SetStandardStreamEncoding` 已被调用，则当其 *error* 和 *errors* 参数不为 "
"``NULL`` 时将使用它们。"

#: ../../c-api/init_config.rst:1069
msgid ""
"Use the :envvar:`PYTHONIOENCODING` environment variable if it is non-empty."
msgstr "如果 :envvar:`PYTHONIOENCODING` 环境变量非空则会使用它。"

#: ../../c-api/init_config.rst:1072
msgid "Default encoding:"
msgstr "默认编码格式："

#: ../../c-api/init_config.rst:1074
msgid "``\"UTF-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr "如果 :c:member:`PyPreConfig.utf8_mode` 为非零值则使用 ``\"UTF-8\"``。"

#: ../../c-api/init_config.rst:1075
msgid "Otherwise, use the :term:`locale encoding`."
msgstr "在其他情况下，使用 :term:`locale encoding`。"

#: ../../c-api/init_config.rst:1077
msgid "Default error handler:"
msgstr "默认错误处理器："

#: ../../c-api/init_config.rst:1079
msgid "On Windows: use ``\"surrogateescape\"``."
msgstr "在 Windows 上：使用 ``\"surrogateescape\"``。"

#: ../../c-api/init_config.rst:1080
msgid ""
"``\"surrogateescape\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero, or"
" if the LC_CTYPE locale is \"C\" or \"POSIX\"."
msgstr ""
"如果 :c:member:`PyPreConfig.utf8_mode` 为非零值，或者如果 LC_CTYPE 语言区域为 \"C\" 或 "
"\"POSIX\" 则使用 ``\"surrogateescape\"``。"

#: ../../c-api/init_config.rst:1082
msgid "``\"strict\"`` otherwise."
msgstr "在其他情况下则使用 ``\"strict\"``。"

#: ../../c-api/init_config.rst:1086
msgid "Enable tracemalloc?"
msgstr "启用 tracemalloc？"

#: ../../c-api/init_config.rst:1088
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr "如果为非零值，则在启动时调用 :func:`tracemalloc.start`。"

#: ../../c-api/init_config.rst:1090
msgid ""
"Set by :option:`-X tracemalloc=N <-X>` command line option and by the "
":envvar:`PYTHONTRACEMALLOC` environment variable."
msgstr ""
"通过 :option:`-X tracemalloc=N <-X>` 命令行选项和 :envvar:`PYTHONTRACEMALLOC` "
"环境变量设置。"

#: ../../c-api/init_config.rst:1097
msgid "Use :ref:`environment variables <using-on-envvars>`?"
msgstr "使用 :ref:`环境变量 <using-on-envvars>`？"

#: ../../c-api/init_config.rst:1099
msgid ""
"If equals to zero, ignore the :ref:`environment variables <using-on-"
"envvars>`."
msgstr "如果等于零，则忽略 :ref:`环境变量 <using-on-envvars>`。"

#: ../../c-api/init_config.rst:1106
msgid "If non-zero, add the user site directory to :data:`sys.path`."
msgstr "如果为非零值，则将用户站点目录添加到 :data:`sys.path`。"

#: ../../c-api/init_config.rst:1108
msgid ""
"Set to ``0`` by the :option:`-s` and :option:`-I` command line options."
msgstr "通过 :option:`-s` 和 :option:`-I` 命令行选项设置为 ``0``。"

#: ../../c-api/init_config.rst:1110
msgid "Set to ``0`` by the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr "由 :envvar:`PYTHONNOUSERSITE` 环境变量设置为 ``0``。"

#: ../../c-api/init_config.rst:1116
msgid ""
"Verbose mode. If greater than 0, print a message each time a module is "
"imported, showing the place (filename or built-in module) from which it is "
"loaded."
msgstr ""

#: ../../c-api/init_config.rst:1120
msgid ""
"If greater or equal to 2, print a message for each file that is checked for "
"when searching for a module. Also provides information on module cleanup at "
"exit."
msgstr ""

#: ../../c-api/init_config.rst:1124
msgid "Incremented by the :option:`-v` command line option."
msgstr "由 :option:`-v` 命令行选项执行递增。"

#: ../../c-api/init_config.rst:1126
msgid "Set to the :envvar:`PYTHONVERBOSE` environment variable value."
msgstr "Установіть значення змінної середовища :envvar:`PYTHONVERBOSE`."

#: ../../c-api/init_config.rst:1132
msgid ""
"Options of the :mod:`warnings` module to build warnings filters, lowest to "
"highest priority: :data:`sys.warnoptions`."
msgstr ":mod:`warnings` 模块用于构建警告过滤器的选项，优先级从低到高: :data:`sys.warnoptions`。"

#: ../../c-api/init_config.rst:1135
msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first item"
" of :data:`warnings.filters` which is checked first (highest priority)."
msgstr ""
":mod:`warnings` 模块以相反的顺序添加 :data:`sys.warnoptions`: 最后一个 "
":c:member:`PyConfig.warnoptions` 条目将成为 :data:`warnings.filters` "
"的第一个条目并将最先被检查（最高优先级）。"

#: ../../c-api/init_config.rst:1140
msgid ""
"The :option:`-W` command line options adds its value to "
":c:member:`~PyConfig.warnoptions`, it can be used multiple times."
msgstr ""
":option:`-W` 命令行选项会将其值添加到 :c:member:`~PyConfig.warnoptions` 中，它可以被多次使用。"

#: ../../c-api/init_config.rst:1143
msgid ""
"The :envvar:`PYTHONWARNINGS` environment variable can also be used to add "
"warning options. Multiple options can be specified, separated by commas "
"(``,``)."
msgstr ":envvar:`PYTHONWARNINGS` 环境变量也可被用于添加警告选项。 可以指定多个选项，并以逗号 (``,``) 分隔。"

#: ../../c-api/init_config.rst:1151
msgid ""
"If equal to 0, Python won't try to write ``.pyc`` files on the import of "
"source modules."
msgstr ""

#: ../../c-api/init_config.rst:1154
msgid ""
"Set to ``0`` by the :option:`-B` command line option and the "
":envvar:`PYTHONDONTWRITEBYTECODE` environment variable."
msgstr ""
"通过 :option:`-B` 命令行选项和 :envvar:`PYTHONDONTWRITEBYTECODE` 环境变量设置为 ``0``。"

#: ../../c-api/init_config.rst:1157
msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of "
":c:member:`~PyConfig.write_bytecode`."
msgstr ""
":data:`sys.dont_write_bytecode` 会被初始化为 :c:member:`~PyConfig.write_bytecode` "
"取反后的值。"

#: ../../c-api/init_config.rst:1164
msgid ""
"Values of the :option:`-X` command line options: :data:`sys._xoptions`."
msgstr ":option:`-X` 命令行选项的值: :data:`sys._xoptions`。"

#: ../../c-api/init_config.rst:1168
msgid ""
"If :c:member:`~PyConfig.parse_argv` is non-zero, :c:member:`~PyConfig.argv` "
"arguments are parsed the same way the regular Python parses :ref:`command "
"line arguments <using-on-cmdline>`, and Python arguments are stripped from "
":c:member:`~PyConfig.argv`."
msgstr ""
"如果 :c:member:`~PyConfig.parse_argv` 为非零值，则 :c:member:`~PyConfig.argv` "
"参数将以与常规 Python 解析 :ref:`命令行参数 <using-on-cmdline>` 相同的方式被解析，并从 "
":c:member:`~PyConfig.argv` 中剥离 Python 参数。"

#: ../../c-api/init_config.rst:1173
msgid ""
"The :c:member:`~PyConfig.xoptions` options are parsed to set other options: "
"see the :option:`-X` command line option."
msgstr ":c:member:`~PyConfig.xoptions` 选项将会被解析以设置其他选项：参见 :option:`-X` 命令行选项。"

#: ../../c-api/init_config.rst:1178
msgid "The ``show_alloc_count`` field has been removed."
msgstr "``show_alloc_count`` 字段已被移除。"

#: ../../c-api/init_config.rst:1182
msgid "Initialization with PyConfig"
msgstr "使用 PyConfig 初始化"

#: ../../c-api/init_config.rst:1184
msgid "Function to initialize Python:"
msgstr "用于初始化 Python 的函数："

#: ../../c-api/init_config.rst:1188
msgid "Initialize Python from *config* configuration."
msgstr "根据 *config* 配置来初始化 Python。"

#: ../../c-api/init_config.rst:1193
msgid ""
"If :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` or "
":c:func:`PyImport_ExtendInittab` are used, they must be set or called after "
"Python preinitialization and before the Python initialization. If Python is "
"initialized multiple times, :c:func:`PyImport_AppendInittab` or "
":c:func:`PyImport_ExtendInittab` must be called before each Python "
"initialization."
msgstr ""
"如果使用了 :c:func:`PyImport_FrozenModules`、:c:func:`PyImport_AppendInittab` 或 "
":c:func:`PyImport_ExtendInittab`，则必须在 Python 预初始化之后、Python 初始化之前设置或调用它们。 如果 "
"Python 被多次初始化，则必须在每次初始化 Python 之前调用 :c:func:`PyImport_AppendInittab` 或 "
":c:func:`PyImport_ExtendInittab`。"

#: ../../c-api/init_config.rst:1200
msgid ""
"The current configuration (``PyConfig`` type) is stored in "
"``PyInterpreterState.config``."
msgstr "当前的配置 (``PyConfig`` 类型) 保存在 ``PyInterpreterState.config`` 中。"

#: ../../c-api/init_config.rst:1203
msgid "Example setting the program name::"
msgstr "设置程序名称的示例::"

#: ../../c-api/init_config.rst:1231
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters::"
msgstr ""

#: ../../c-api/init_config.rst:1282
msgid "Isolated Configuration"
msgstr "隔离配置"

#: ../../c-api/init_config.rst:1284
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and "
":c:func:`PyConfig_InitIsolatedConfig` functions create a configuration to "
"isolate Python from the system. For example, to embed Python into an "
"application."
msgstr ""
":c:func:`PyPreConfig_InitIsolatedConfig` 和 "
":c:func:`PyConfig_InitIsolatedConfig` 函数会创建一个配置来将 Python 与系统隔离开来。 例如，将 "
"Python 嵌入到某个应用程序。"

#: ../../c-api/init_config.rst:1289
msgid ""
"This configuration ignores global configuration variables, environment "
"variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) "
"and user site directory. The C standard streams (ex: ``stdout``) and the "
"LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""
"该配置将忽略全局配置变量、环境变量、命令行参数 (:c:member:`PyConfig.argv` 将不会被解析) 和用户站点目录。 C 标准流 "
"(例如 ``stdout``) 和 LC_CTYPE 语言区域将保持不变。 信号处理器将不会被安装。"

#: ../../c-api/init_config.rst:1294
msgid ""
"Configuration files are still used with this configuration. Set the "
":ref:`Python Path Configuration <init-path-config>` (\"output fields\") to "
"ignore these configuration files and avoid the function computing the "
"default path configuration."
msgstr ""

#: ../../c-api/init_config.rst:1303
msgid "Python Configuration"
msgstr "Python 配置"

#: ../../c-api/init_config.rst:1305
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and "
":c:func:`PyConfig_InitPythonConfig` functions create a configuration to "
"build a customized Python which behaves as the regular Python."
msgstr ""
":c:func:`PyPreConfig_InitPythonConfig` 和 :c:func:`PyConfig_InitPythonConfig`"
" 函数会创建一个配置来构建一个行为与常规 Python 相同的自定义 Python。"

#: ../../c-api/init_config.rst:1309
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr "环境变量和命令行参数将被用于配置 Python，而全局配置变量将被忽略。"

#: ../../c-api/init_config.rst:1312
msgid ""
"This function enables C locale coercion (:pep:`538`) and :ref:`Python UTF-8 "
"Mode <utf8-mode>` (:pep:`540`) depending on the LC_CTYPE locale, "
":envvar:`PYTHONUTF8` and :envvar:`PYTHONCOERCECLOCALE` environment "
"variables."
msgstr ""
"此函数将根据 LC_CTYPE 语言区域、:envvar:`PYTHONUTF8` 和 :envvar:`PYTHONCOERCECLOCALE` "
"环境变量启用 C 语言区域强制转换 (:pep:`538`) 和 :ref:`Python UTF-8 模式 <utf8-mode>` "
"(:pep:`540`)。"

#: ../../c-api/init_config.rst:1321
msgid "Python Path Configuration"
msgstr "Python 路径配置"

#: ../../c-api/init_config.rst:1323
msgid ""
":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ":c:type:`PyConfig` 包含多个用于路径配置的字段："

#: ../../c-api/init_config.rst:1325
msgid "Path configuration inputs:"
msgstr "路径配置输入："

#: ../../c-api/init_config.rst:1327
msgid ":c:member:`PyConfig.home`"
msgstr ":c:member:`PyConfig.home`"

#: ../../c-api/init_config.rst:1328
msgid ":c:member:`PyConfig.platlibdir`"
msgstr ":c:member:`PyConfig.platlibdir`"

#: ../../c-api/init_config.rst:1329
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:member:`PyConfig.pathconfig_warnings`"

#: ../../c-api/init_config.rst:1330
msgid ":c:member:`PyConfig.program_name`"
msgstr ":c:member:`PyConfig.program_name`"

#: ../../c-api/init_config.rst:1331
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ":c:member:`PyConfig.pythonpath_env`"

#: ../../c-api/init_config.rst:1332
msgid "current working directory: to get absolute paths"
msgstr "当前工作目录：用于获取绝对路径"

#: ../../c-api/init_config.rst:1333
msgid ""
"``PATH`` environment variable to get the program full path (from "
":c:member:`PyConfig.program_name`)"
msgstr "``PATH`` 环境变量用于获取程序的完整路径 (来自 :c:member:`PyConfig.program_name`)"

#: ../../c-api/init_config.rst:1335
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr "``__PYVENV_LAUNCHER__`` 环境变量"

#: ../../c-api/init_config.rst:1336
msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and "
"HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""
"（仅限 Windows only） 注册表 HKEY_CURRENT_USER 和 HKEY_LOCAL_MACHINE 的 "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" 项下的应用程序目录（其中 X.Y 为 Python "
"版本）。"

#: ../../c-api/init_config.rst:1340
msgid "Path configuration output fields:"
msgstr "路径配置输出字段："

#: ../../c-api/init_config.rst:1342
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ":c:member:`PyConfig.base_exec_prefix`"

#: ../../c-api/init_config.rst:1343
msgid ":c:member:`PyConfig.base_executable`"
msgstr ":c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:1344
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ":c:member:`PyConfig.base_prefix`"

#: ../../c-api/init_config.rst:1345
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ":c:member:`PyConfig.exec_prefix`"

#: ../../c-api/init_config.rst:1346
msgid ":c:member:`PyConfig.executable`"
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:1347
msgid ""
":c:member:`PyConfig.module_search_paths_set`, "
":c:member:`PyConfig.module_search_paths`"
msgstr ""
":c:member:`PyConfig.module_search_paths_set`, "
":c:member:`PyConfig.module_search_paths`"

#: ../../c-api/init_config.rst:1349
msgid ":c:member:`PyConfig.prefix`"
msgstr ":c:member:`PyConfig.prefix`"

#: ../../c-api/init_config.rst:1351
msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If "
":c:member:`~PyConfig.module_search_paths_set` is equal to 0, "
":c:member:`~PyConfig.module_search_paths` is overridden and "
":c:member:`~PyConfig.module_search_paths_set` is set to 1."
msgstr ""

#: ../../c-api/init_config.rst:1357
msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to 1. In this case, path configuration input fields are ignored as "
"well."
msgstr ""

#: ../../c-api/init_config.rst:1364
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to 0 to suppress warnings when"
" calculating the path configuration (Unix only, Windows does not log any "
"warning)."
msgstr ""

#: ../../c-api/init_config.rst:1367
msgid ""
"If :c:member:`~PyConfig.base_prefix` or "
":c:member:`~PyConfig.base_exec_prefix` fields are not set, they inherit "
"their value from :c:member:`~PyConfig.prefix` and "
":c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""
"如果 :c:member:`~PyConfig.base_prefix` 或 "
":c:member:`~PyConfig.base_exec_prefix` 字段未设置，它们将分别从 "
":c:member:`~PyConfig.prefix` 和 :c:member:`~PyConfig.exec_prefix` 继承其值。"

#: ../../c-api/init_config.rst:1371
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ":c:func:`Py_RunMain` 和 :c:func:`Py_Main` 将修改 :data:`sys.path`:"

#: ../../c-api/init_config.rst:1373
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend "
":c:member:`~PyConfig.run_filename` to :data:`sys.path`."
msgstr ""
"如果 :c:member:`~PyConfig.run_filename` 已设置并且是一个包含 ``__main__.py`` 脚本的目录，则会将 "
":c:member:`~PyConfig.run_filename` 添加到 :data:`sys.path` 的开头。"

#: ../../c-api/init_config.rst:1376
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr "如果 :c:member:`~PyConfig.isolated` 为零："

#: ../../c-api/init_config.rst:1378
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory to"
" :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""
"如果设置了 :c:member:`~PyConfig.run_module`，则将当前目录添加到 :data:`sys.path` 的开头。 "
"如果无法读取当前目录则不执行任何操作。"

#: ../../c-api/init_config.rst:1380
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""
"如果设置了 :c:member:`~PyConfig.run_filename`，则将文件名的目录添加到 :data:`sys.path` 的开头。"

#: ../../c-api/init_config.rst:1382
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr "在其他情况下，则将一个空字符串添加到 :data:`sys.path` 的开头。"

#: ../../c-api/init_config.rst:1384
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. If "
":c:member:`~PyConfig.user_site_directory` is non-zero and the user's site-"
"package directory exists, the :mod:`site` module appends the user's site-"
"package directory to :data:`sys.path`."
msgstr ""
"如果 :c:member:`~PyConfig.site_import` 为非零值，则 :data:`sys.path` 可通过 :mod:`site`"
" 模块修改。 如果 :c:member:`~PyConfig.user_site_directory` 为非零值且用户的 site-package "
"目录存在，则 :mod:`site` 模块会将用户的 site-package 目录附加到 :data:`sys.path`。"

#: ../../c-api/init_config.rst:1390
msgid "The following configuration files are used by the path configuration:"
msgstr "路径配置会使用以下配置文件："

#: ../../c-api/init_config.rst:1392
msgid "``pyvenv.cfg``"
msgstr "``pyvenv.cfg``"

#: ../../c-api/init_config.rst:1393
msgid "``python._pth`` (Windows only)"
msgstr "``python._pth`` (仅Windows)"

#: ../../c-api/init_config.rst:1394
msgid "``pybuilddir.txt`` (Unix only)"
msgstr "``pybuilddir.txt`` (仅Unix)"

#: ../../c-api/init_config.rst:1396
msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set "
":c:member:`PyConfig.base_executable`"
msgstr ""
"``__PYVENV_LAUNCHER__`` 环境变量将被用于设置 :c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:1401
msgid "Py_RunMain()"
msgstr "Py_RunMain()"

#: ../../c-api/init_config.rst:1405
msgid ""
"Execute the command (:c:member:`PyConfig.run_command`), the script "
"(:c:member:`PyConfig.run_filename`) or the module "
"(:c:member:`PyConfig.run_module`) specified on the command line or in the "
"configuration."
msgstr ""
"执行在命令行或配置中指定的命令 (:c:member:`PyConfig.run_command`)、脚本 "
"(:c:member:`PyConfig.run_filename`) 或模块 (:c:member:`PyConfig.run_module`)。"

#: ../../c-api/init_config.rst:1410
msgid "By default and when if :option:`-i` option is used, run the REPL."
msgstr "在默认情况下如果使用了 :option:`-i` 选项，则运行 REPL。"

#: ../../c-api/init_config.rst:1412
msgid ""
"Finally, finalizes Python and returns an exit status that can be passed to "
"the ``exit()`` function."
msgstr "最后，终结化 Python 并返回一个可传递给 ``exit()`` 函数的退出状态。"

#: ../../c-api/init_config.rst:1415
msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of "
"customized Python always running in isolated mode using "
":c:func:`Py_RunMain`."
msgstr ""
"请参阅 :ref:`Python 配置 <init-python-config>` 查看一个使用 :c:func:`Py_RunMain` "
"在隔离模式下始终运行自定义 Python 的示例。"

#: ../../c-api/init_config.rst:1421
msgid "Py_GetArgcArgv()"
msgstr "Py_GetArgcArgv()"

#: ../../c-api/init_config.rst:1425
msgid "Get the original command line arguments, before Python modified them."
msgstr "在 Python 修改原始命令行参数之前，获取这些参数。"

#: ../../c-api/init_config.rst:1427
msgid "See also :c:member:`PyConfig.orig_argv` member."
msgstr "另请参阅 :c:member:`PyConfig.orig_argv` 成员。"

#: ../../c-api/init_config.rst:1431
msgid "Multi-Phase Initialization Private Provisional API"
msgstr "多阶段初始化私有暂定 API"

#: ../../c-api/init_config.rst:1433
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of :pep:`432`:"
msgstr "本节介绍的私有暂定 API 引入了多阶段初始化，它是 :pep:`432` 的核心特性："

#: ../../c-api/init_config.rst:1436
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr "“核心”初始化阶段，“最小化的基本 Python”："

#: ../../c-api/init_config.rst:1438
msgid "Builtin types;"
msgstr "内置类型；"

#: ../../c-api/init_config.rst:1439
msgid "Builtin exceptions;"
msgstr "内置异常；"

#: ../../c-api/init_config.rst:1440
msgid "Builtin and frozen modules;"
msgstr "内置和已冻结模块；"

#: ../../c-api/init_config.rst:1441
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` "
"doesn't exist yet)."
msgstr ":mod:`sys` 模块仅部分初始化（例如: :data:`sys.path` 尚不存在）。"

#: ../../c-api/init_config.rst:1444
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr "\"主要\"初始化阶段，Python 被完全初始化："

#: ../../c-api/init_config.rst:1446
msgid "Install and configure :mod:`importlib`;"
msgstr "安装并配置 :mod:`importlib`；"

#: ../../c-api/init_config.rst:1447
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr "应用 :ref:`路径配置 <init-path-config>`；"

#: ../../c-api/init_config.rst:1448
msgid "Install signal handlers;"
msgstr "安装信号处理器；"

#: ../../c-api/init_config.rst:1449
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` and "
":data:`sys.path`);"
msgstr "完成 :mod:`sys` 模块初始化 (例如：创建 :data:`sys.stdout` 和 :data:`sys.path`)；"

#: ../../c-api/init_config.rst:1451
msgid ""
"Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr "启用 :mod:`faulthandler` 和 :mod:`tracemalloc` 等可选功能；"

#: ../../c-api/init_config.rst:1452
msgid "Import the :mod:`site` module;"
msgstr "导入 :mod:`site` 模块；"

#: ../../c-api/init_config.rst:1453
msgid "etc."
msgstr "等等."

#: ../../c-api/init_config.rst:1455
msgid "Private provisional API:"
msgstr "私有临时API："

#: ../../c-api/init_config.rst:1457
msgid ""
":c:member:`PyConfig._init_main`: if set to 0, "
":c:func:`Py_InitializeFromConfig` stops at the \"Core\" initialization "
"phase."
msgstr ""

#: ../../c-api/init_config.rst:1459
msgid ""
":c:member:`PyConfig._isolated_interpreter`: if non-zero, disallow threads, "
"subprocesses and fork."
msgstr ""
":c:member:`PyConfig._isolated_interpreter`: якщо ненульове значення, "
"заборонити потоки, підпроцеси та розгалуження."

#: ../../c-api/init_config.rst:1464
msgid ""
"Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr "进入“主要”初始化阶段，完成 Python 初始化。"

#: ../../c-api/init_config.rst:1466
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` module"
" is not configured: the :ref:`Path Configuration <init-path-config>` is only"
" applied during the \"Main\" phase. It may allow to customize Python in "
"Python to override or tune the :ref:`Path Configuration <init-path-config>`,"
" maybe install a custom :data:`sys.meta_path` importer or an import hook, "
"etc."
msgstr ""
"在“核心”阶段不会导入任何模块，也不会配置 ``importlib`` 模块: :ref:`路径配置 <init-path-config>` "
"只会在“主要”阶段期间应用。 这可能允许在 Python 中定制 Python 以覆盖或微调 :ref:`路径配置 <init-path-"
"config>`，也可能会安装自定义的 :data:`sys.meta_path` 导入器或导入钩子等等。"

#: ../../c-api/init_config.rst:1472
msgid ""
"It may become possible to calculatin the :ref:`Path Configuration <init-"
"path-config>` in Python, after the Core phase and before the Main phase, "
"which is one of the :pep:`432` motivation."
msgstr ""
"Можливо, стане можливим обчислити :ref:`Конфігурацію шляху <init-path-"
"config>` в Python після основної фази та перед основною фазою, яка є однією "
"з мотивів :pep:`432`."

#: ../../c-api/init_config.rst:1476
msgid ""
"The \"Core\" phase is not properly defined: what should be and what should "
"not be available at this phase is not specified yet. The API is marked as "
"private and provisional: the API can be modified or even be removed anytime "
"until a proper public API is designed."
msgstr ""
"“核心”阶段并没有完整的定义：在这一阶段什么应该可用什么不应该可用都尚未被指明。 该 API 被标记为私有和暂定的：也就是说该 API "
"可以随时被修改甚至被移除直到设计出适用的公共 API。"

#: ../../c-api/init_config.rst:1481
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr "在“核心”和“主要”初始化阶段之间运行 Python 代码的示例::"
