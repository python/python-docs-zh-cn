# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/init_config.rst:7
msgid "Python Initialization Configuration"
msgstr "Python初始化配置"

#: ../../c-api/init_config.rst:11
msgid "Structures:"
msgstr "结构"

#: ../../c-api/init_config.rst:13
msgid ":c:type:`PyConfig`"
msgstr ":c:type:`PyConfig`"

#: ../../c-api/init_config.rst:14
msgid ":c:type:`PyPreConfig`"
msgstr ":c:type:`PyPreConfig`"

#: ../../c-api/init_config.rst:15
msgid ":c:type:`PyStatus`"
msgstr ":c:type:`PyStatus`"

#: ../../c-api/init_config.rst:16
msgid ":c:type:`PyWideStringList`"
msgstr ":c:type:`PyWideStringList`"

#: ../../c-api/init_config.rst:18
msgid "Functions:"
msgstr "函数"

#: ../../c-api/init_config.rst:20
msgid ":c:func:`PyConfig_Clear`"
msgstr ":c:func:`PyConfig_Clear`"

#: ../../c-api/init_config.rst:21
msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyConfig_InitIsolatedConfig`"

#: ../../c-api/init_config.rst:22
msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ":c:func:`PyConfig_InitPythonConfig`"

#: ../../c-api/init_config.rst:23
msgid ":c:func:`PyConfig_Read`"
msgstr ":c:func:`PyConfig_Read`"

#: ../../c-api/init_config.rst:24
msgid ":c:func:`PyConfig_SetArgv`"
msgstr ":c:func:`PyConfig_SetArgv`"

#: ../../c-api/init_config.rst:25
msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ":c:func:`PyConfig_SetBytesArgv`"

#: ../../c-api/init_config.rst:26
msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ":c:func:`PyConfig_SetBytesString`"

#: ../../c-api/init_config.rst:27
msgid ":c:func:`PyConfig_SetString`"
msgstr ":c:func:`PyConfig_SetString`"

#: ../../c-api/init_config.rst:28
msgid ":c:func:`PyConfig_SetWideStringList`"
msgstr ":c:func:`PyConfig_SetWideStringList`"

#: ../../c-api/init_config.rst:29
msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyPreConfig_InitIsolatedConfig`"

#: ../../c-api/init_config.rst:30
msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ":c:func:`PyPreConfig_InitPythonConfig`"

#: ../../c-api/init_config.rst:31
msgid ":c:func:`PyStatus_Error`"
msgstr ":c:func:`PyStatus_Error`"

#: ../../c-api/init_config.rst:32
msgid ":c:func:`PyStatus_Exception`"
msgstr ":c:func:`PyStatus_Exception`"

#: ../../c-api/init_config.rst:33
msgid ":c:func:`PyStatus_Exit`"
msgstr ":c:func:`PyStatus_Exit`"

#: ../../c-api/init_config.rst:34
msgid ":c:func:`PyStatus_IsError`"
msgstr ":c:func:`PyStatus_IsError`"

#: ../../c-api/init_config.rst:35
msgid ":c:func:`PyStatus_IsExit`"
msgstr ":c:func:`PyStatus_IsExit`"

#: ../../c-api/init_config.rst:36
msgid ":c:func:`PyStatus_NoMemory`"
msgstr ":c:func:`PyStatus_NoMemory`"

#: ../../c-api/init_config.rst:37
msgid ":c:func:`PyStatus_Ok`"
msgstr ":c:func:`PyStatus_Ok`"

#: ../../c-api/init_config.rst:38
msgid ":c:func:`PyWideStringList_Append`"
msgstr ":c:func:`PyWideStringList_Append`"

#: ../../c-api/init_config.rst:39
msgid ":c:func:`PyWideStringList_Insert`"
msgstr ":c:func:`PyWideStringList_Insert`"

#: ../../c-api/init_config.rst:40
msgid ":c:func:`Py_ExitStatusException`"
msgstr ":c:func:`Py_ExitStatusException`"

#: ../../c-api/init_config.rst:41
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ":c:func:`Py_InitializeFromConfig`"

#: ../../c-api/init_config.rst:42
msgid ":c:func:`Py_PreInitialize`"
msgstr ":c:func:`Py_PreInitialize`"

#: ../../c-api/init_config.rst:43
msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ":c:func:`Py_PreInitializeFromArgs`"

#: ../../c-api/init_config.rst:44
msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ":c:func:`Py_PreInitializeFromBytesArgs`"

#: ../../c-api/init_config.rst:45
msgid ":c:func:`Py_RunMain`"
msgstr ":c:func:`Py_RunMain`"

#: ../../c-api/init_config.rst:46
msgid ":c:func:`Py_GetArgcArgv`"
msgstr ":c:func:`Py_GetArgcArgv`"

#: ../../c-api/init_config.rst:48
msgid ""
"The preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig`` and the configuration (``PyConfig`` type) is stored"
" in ``PyInterpreterState.config``."
msgstr ""

#: ../../c-api/init_config.rst:52
msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr "参见 :ref:`Initialization, Finalization, and Threads <initialization>`."

#: ../../c-api/init_config.rst:55
msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ":pep:`587` \"Python 初始化配置\"."

#: ../../c-api/init_config.rst:59
msgid "PyWideStringList"
msgstr "PyWideStringList"

#: ../../c-api/init_config.rst:63
msgid "List of ``wchar_t*`` strings."
msgstr "由 ``wchar_t*`` 字符串组成的列表。"

#: ../../c-api/init_config.rst:65
msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings must "
"be non-``NULL``."
msgstr "如果 *length* 为非零值，则 *items* 必须不为 ``NULL`` 并且所有字符串均必须不为 ``NULL``。"

#: ../../c-api/init_config.rst:68
msgid "Methods:"
msgstr "方法"

#: ../../c-api/init_config.rst:72
msgid "Append *item* to *list*."
msgstr "将 *item* 添加到 *list*。"

#: ../../c-api/init_config.rst:74 ../../c-api/init_config.rst:85
msgid "Python must be preinitialized to call this function."
msgstr "Python 必须被预初始化以便调用此函数。"

#: ../../c-api/init_config.rst:78
msgid "Insert *item* into *list* at *index*."
msgstr "将 *item* 插入到 *list* 的 *index* 位置上。"

#: ../../c-api/init_config.rst:80
msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr "如果 *index* 大于等于 *list* 的长度，则将 *item* 添加到 *list*。"

#: ../../c-api/init_config.rst:83
msgid "*index* must be greater than or equal to 0."
msgstr ""

#: ../../c-api/init_config.rst:87 ../../c-api/init_config.rst:107
#: ../../c-api/init_config.rst:210 ../../c-api/init_config.rst:417
msgid "Structure fields:"
msgstr "结构体字段:"

#: ../../c-api/init_config.rst:91
msgid "List length."
msgstr "List 长度。"

#: ../../c-api/init_config.rst:95
msgid "List items."
msgstr "列表项目。"

#: ../../c-api/init_config.rst:98
msgid "PyStatus"
msgstr "PyStatus"

#: ../../c-api/init_config.rst:102
msgid ""
"Structure to store an initialization function status: success, error or "
"exit."
msgstr "存储初始函数状态：成功、错误或退出的结构体。"

#: ../../c-api/init_config.rst:105
msgid ""
"For an error, it can store the C function name which created the error."
msgstr "对于错误，它可以存储造成错误的 C 函数的名称。"

#: ../../c-api/init_config.rst:111
msgid "Exit code. Argument passed to ``exit()``."
msgstr "退出码。 传给 ``exit()`` 的参数。"

#: ../../c-api/init_config.rst:115
msgid "Error message."
msgstr "错误信息"

#: ../../c-api/init_config.rst:119
msgid "Name of the function which created an error, can be ``NULL``."
msgstr "造成错误的函数的名称，可以为 ``NULL``。"

#: ../../c-api/init_config.rst:121
msgid "Functions to create a status:"
msgstr "创建状态的函数:"

#: ../../c-api/init_config.rst:125
msgid "Success."
msgstr "完成。"

#: ../../c-api/init_config.rst:129
msgid "Initialization error with a message."
msgstr "带消息的初始化错误。"

#: ../../c-api/init_config.rst:133
msgid "Memory allocation failure (out of memory)."
msgstr "内存分配失败（内存不足）。"

#: ../../c-api/init_config.rst:137
msgid "Exit Python with the specified exit code."
msgstr "以指定的退出代码退出 Python。"

#: ../../c-api/init_config.rst:139
msgid "Functions to handle a status:"
msgstr "处理状态的函数:"

#: ../../c-api/init_config.rst:143
msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr "状态为错误还是退出？如为真值，则异常必须被处理；例如通过调用 :c:func:`Py_ExitStatusException`。"

#: ../../c-api/init_config.rst:148
msgid "Is the result an error?"
msgstr "结果错误吗？"

#: ../../c-api/init_config.rst:152
msgid "Is the result an exit?"
msgstr "结果是否退出？"

#: ../../c-api/init_config.rst:156
msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called"
" if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""
"如果 *status* 是一个退出码则调用 ``exit(exitcode)``。如果 *status* "
"是一个错误码则打印错误消息并设置一个非零退出码再退出。 必须在 ``PyStatus_Exception(status)`` 为非零值时才能被调用。"

#: ../../c-api/init_config.rst:161
msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""
"在内部，Python 将使用设置 ``PyStatus.func`` 的宏，而创建状态的函数则会将 ``func`` 设为 ``NULL``。"

#: ../../c-api/init_config.rst:164
msgid "Example::"
msgstr "示例::"

#: ../../c-api/init_config.rst:188
msgid "PyPreConfig"
msgstr "PyPreConfig"

#: ../../c-api/init_config.rst:192
msgid "Structure used to preinitialize Python:"
msgstr ""

#: ../../c-api/init_config.rst:194
msgid "Set the Python memory allocator"
msgstr ""

#: ../../c-api/init_config.rst:195
msgid "Configure the LC_CTYPE locale"
msgstr ""

#: ../../c-api/init_config.rst:196
msgid "Set the UTF-8 mode"
msgstr "设置为 UTF-8 模式"

#: ../../c-api/init_config.rst:198
msgid "Function to initialize a preconfiguration:"
msgstr "用于初始化预先配置的函数:"

#: ../../c-api/init_config.rst:202
msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-"
"python-config>`."
msgstr "通过 :ref:`Python 配置 <init-python-config>` 来初始化预先配置。"

#: ../../c-api/init_config.rst:207
msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr "通过 :ref:`隔离配置 <init-isolated-conf>` 来初始化预先配置。"

#: ../../c-api/init_config.rst:214
msgid "Name of the memory allocator:"
msgstr ""

#: ../../c-api/init_config.rst:216
msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)"
msgstr ""

#: ../../c-api/init_config.rst:218
msgid "``PYMEM_ALLOCATOR_DEFAULT`` (``1``): default memory allocators"
msgstr ""

#: ../../c-api/init_config.rst:219
msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): default memory allocators with debug "
"hooks"
msgstr ""

#: ../../c-api/init_config.rst:221
msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): force usage of ``malloc()``"
msgstr ""

#: ../../c-api/init_config.rst:222
msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with "
"debug hooks"
msgstr ""

#: ../../c-api/init_config.rst:224
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator"
" <pymalloc>`"
msgstr ""

#: ../../c-api/init_config.rst:226
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with debug hooks"
msgstr ""

#: ../../c-api/init_config.rst:229
msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is configured using ``--without-pymalloc``"
msgstr ""

#: ../../c-api/init_config.rst:232
msgid "See :ref:`Memory Management <memory>`."
msgstr "参见 :ref:`Memory Management <memory>`."

#: ../../c-api/init_config.rst:236
msgid ""
"Set the LC_CTYPE locale to the user preferred locale? If equals to 0, set "
":c:member:`coerce_c_locale` and :c:member:`coerce_c_locale_warn` to 0."
msgstr ""

#: ../../c-api/init_config.rst:241
msgid ""
"If equals to 2, coerce the C locale; if equals to 1, read the LC_CTYPE "
"locale to decide if it should be coerced."
msgstr ""

#: ../../c-api/init_config.rst:246
msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr "如为非零值，则会在 C 语言区域被强制转换时发出警告。"

#: ../../c-api/init_config.rst:250
msgid "See :c:member:`PyConfig.dev_mode`."
msgstr "参见 :c:member:`PyConfig.dev_mode`."

#: ../../c-api/init_config.rst:254
msgid "See :c:member:`PyConfig.isolated`."
msgstr "参见 :c:member:`PyConfig.isolated`."

#: ../../c-api/init_config.rst:258
msgid ""
"If non-zero, disable UTF-8 Mode, set the Python filesystem encoding to "
"``mbcs``, set the filesystem error handler to ``replace``."
msgstr ""

#: ../../c-api/init_config.rst:261 ../../c-api/init_config.rst:555
msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr "仅在 Windows 上可用。 ``#ifdef MS_WINDOWS`` 宏可被用于 Windows 专属的代码。"

#: ../../c-api/init_config.rst:266
msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and "
":c:func:`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the "
"same way the regular Python parses command line arguments: see :ref:`Command"
" Line Arguments <using-on-cmdline>`."
msgstr ""
"如为非零值，:c:func:`Py_PreInitializeFromArgs` 和 "
":c:func:`Py_PreInitializeFromBytesArgs` 将以与常规 Python 解析命令行参数的相同方式解析其 "
"``argv`` 参数：参见 :ref:`命令行参数 <using-on-cmdline>`。"

#: ../../c-api/init_config.rst:273
msgid "See :c:member:`PyConfig.use_environment`."
msgstr "参见 :c:member:`PyConfig.use_environment`."

#: ../../c-api/init_config.rst:277
msgid "If non-zero, enable the UTF-8 mode."
msgstr ""

#: ../../c-api/init_config.rst:280
msgid "Preinitialization with PyPreConfig"
msgstr ""

#: ../../c-api/init_config.rst:282
msgid "Functions to preinitialize Python:"
msgstr "用于预初始化 Python 的函数："

#: ../../c-api/init_config.rst:286
msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr "根据 *preconfig* 预配置来预初始化 Python。"

#: ../../c-api/init_config.rst:290
msgid ""
"Preinitialize Python from *preconfig* preconfiguration and command line "
"arguments (bytes strings)."
msgstr ""

#: ../../c-api/init_config.rst:295
msgid ""
"Preinitialize Python from *preconfig* preconfiguration and command line "
"arguments (wide strings)."
msgstr ""

#: ../../c-api/init_config.rst:298 ../../c-api/init_config.rst:730
msgid ""
"The caller is responsible to handle exceptions (error or exit) using "
":c:func:`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""
"调用方要负责使用 :c:func:`PyStatus_Exception` 和 :c:func:`Py_ExitStatusException` "
"来处理异常（错误或退出）。"

#: ../../c-api/init_config.rst:301
msgid ""
"For :ref:`Python Configuration <init-python-config>` "
"(:c:func:`PyPreConfig_InitPythonConfig`), if Python is initialized with "
"command line arguments, the command line arguments must also be passed to "
"preinitialize Python, since they have an effect on the pre-configuration "
"like encodings. For example, the :option:`-X utf8 <-X>` command line option "
"enables the UTF-8 Mode."
msgstr ""

#: ../../c-api/init_config.rst:308
msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if "
":c:member:`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""
"``PyMem_SetAllocator()`` 可在 :c:func:`Py_PreInitialize` "
"之后、:c:func:`Py_InitializeFromConfig` 之前被调用以安装自定义的内存分配器。 如果 "
":c:member:`PyPreConfig.allocator` 被设为 ``PYMEM_ALLOCATOR_NOT_SET`` 则可在 "
":c:func:`Py_PreInitialize` 之前被调用。"

#: ../../c-api/init_config.rst:313
msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the preinitialization."
msgstr ""

#: ../../c-api/init_config.rst:318
msgid "Example using the preinitialization to enable the UTF-8 Mode::"
msgstr ""

#: ../../c-api/init_config.rst:339
msgid "PyConfig"
msgstr "PyConfig"

#: ../../c-api/init_config.rst:343
msgid "Structure containing most parameters to configure Python."
msgstr "包含了大部分用于配置 Python 的形参的结构体。"

#: ../../c-api/init_config.rst:345
msgid "Structure methods:"
msgstr "结构体方法:"

#: ../../c-api/init_config.rst:349
msgid ""
"Initialize configuration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""

#: ../../c-api/init_config.rst:354
msgid ""
"Initialize configuration with :ref:`Isolated Configuration <init-isolated-"
"conf>`."
msgstr ""

#: ../../c-api/init_config.rst:359
msgid "Copy the wide character string *str* into ``*config_str``."
msgstr "将宽字符串 *str* 拷贝至 ``*config_str``。"

#: ../../c-api/init_config.rst:361 ../../c-api/init_config.rst:367
#: ../../c-api/init_config.rst:373 ../../c-api/init_config.rst:379
#: ../../c-api/init_config.rst:385 ../../c-api/init_config.rst:393
msgid "Preinitialize Python if needed."
msgstr ""

#: ../../c-api/init_config.rst:365
msgid ""
"Decode *str* using ``Py_DecodeLocale()`` and set the result into "
"``*config_str``."
msgstr ""

#: ../../c-api/init_config.rst:371
msgid "Set command line arguments from wide character strings."
msgstr ""

#: ../../c-api/init_config.rst:377
msgid ""
"Set command line arguments: decode bytes using :c:func:`Py_DecodeLocale`."
msgstr ""

#: ../../c-api/init_config.rst:383
msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr "将宽字符串列表 *list* 设置为 *length* 和 *items*。"

#: ../../c-api/init_config.rst:389
msgid "Read all Python configuration."
msgstr "读取所有 Python 配置。"

#: ../../c-api/init_config.rst:391
msgid "Fields which are already initialized are left unchanged."
msgstr "已经初始化的字段会保持不变。"

#: ../../c-api/init_config.rst:397
msgid "Release configuration memory."
msgstr "释放配置内存"

#: ../../c-api/init_config.rst:399
msgid ""
"Most ``PyConfig`` methods preinitialize Python if needed. In that case, the "
"Python preinitialization configuration in based on the :c:type:`PyConfig`. "
"If configuration fields which are in common with :c:type:`PyPreConfig` are "
"tuned, they must be set before calling a :c:type:`PyConfig` method:"
msgstr ""

#: ../../c-api/init_config.rst:404
msgid ":c:member:`~PyConfig.dev_mode`"
msgstr ":c:member:`~PyConfig.dev_mode`"

#: ../../c-api/init_config.rst:405
msgid ":c:member:`~PyConfig.isolated`"
msgstr ":c:member:`~PyConfig.isolated`"

#: ../../c-api/init_config.rst:406
msgid ":c:member:`~PyConfig.parse_argv`"
msgstr ":c:member:`~PyConfig.parse_argv`"

#: ../../c-api/init_config.rst:407
msgid ":c:member:`~PyConfig.use_environment`"
msgstr ":c:member:`~PyConfig.use_environment`"

#: ../../c-api/init_config.rst:409
msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called first, before other methods, since the "
"preinitialization configuration depends on command line arguments (if "
":c:member:`parse_argv` is non-zero)."
msgstr ""

#: ../../c-api/init_config.rst:414
msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""
"这些方法的调用者要负责使用 ``PyStatus_Exception()`` 和 ``Py_ExitStatusException()`` "
"来处理异常（错误或退出）。"

#: ../../c-api/init_config.rst:421
msgid ""
"Command line arguments, :data:`sys.argv`. See "
":c:member:`~PyConfig.parse_argv` to parse :c:member:`~PyConfig.argv` the "
"same way the regular Python parses Python command line arguments. If "
":c:member:`~PyConfig.argv` is empty, an empty string is added to ensure that"
" :data:`sys.argv` always exists and is never empty."
msgstr ""

#: ../../c-api/init_config.rst:429
msgid ":data:`sys.base_exec_prefix`."
msgstr ":data:`sys.base_exec_prefix`."

#: ../../c-api/init_config.rst:433
msgid ""
":data:`sys._base_executable`: ``__PYVENV_LAUNCHER__`` environment variable "
"value, or copy of :c:member:`PyConfig.executable`."
msgstr ""

#: ../../c-api/init_config.rst:438
msgid ":data:`sys.base_prefix`."
msgstr ":data:`sys.base_prefix`."

#: ../../c-api/init_config.rst:442
msgid ""
":data:`sys.platlibdir`: platform library directory name, set at configure "
"time by ``--with-platlibdir``, overrideable by the ``PYTHONPLATLIBDIR`` "
"environment variable."
msgstr ""

#: ../../c-api/init_config.rst:450
msgid ""
"If equals to 0, enable unbuffered mode, making the stdout and stderr streams"
" unbuffered."
msgstr ""

#: ../../c-api/init_config.rst:453
msgid "stdin is always opened in buffered mode."
msgstr "stdin 始终以缓冲模式打开。"

#: ../../c-api/init_config.rst:457
msgid ""
"If equals to 1, issue a warning when comparing :class:`bytes` or "
":class:`bytearray` with :class:`str`, or comparing :class:`bytes` with "
":class:`int`. If equal or greater to 2, raise a :exc:`BytesWarning` "
"exception."
msgstr ""

#: ../../c-api/init_config.rst:464
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files (see "
":pep:`552`): :option:`--check-hash-based-pycs` command line option value."
msgstr ""

#: ../../c-api/init_config.rst:467
msgid "Valid values: ``always``, ``never`` and ``default``."
msgstr ""

#: ../../c-api/init_config.rst:469
msgid "The default value is: ``default``."
msgstr "默认值为: ``default``."

#: ../../c-api/init_config.rst:473
msgid ""
"If non-zero, configure C standard streams (``stdio``, ``stdout``, "
"``stdout``). For example, set their mode to ``O_BINARY`` on Windows."
msgstr ""

#: ../../c-api/init_config.rst:478
msgid "If non-zero, enable the :ref:`Python Development Mode <devmode>`."
msgstr "如果为非零值，则启用 :ref:`Python 开发模式 <devmode>`。"

#: ../../c-api/init_config.rst:482
msgid "If non-zero, dump all objects which are still alive at exit."
msgstr "如果为非零值，则转储所有在退出时仍存活的对象。"

#: ../../c-api/init_config.rst:484
msgid "``Py_TRACE_REFS`` macro must be defined in build."
msgstr ""

#: ../../c-api/init_config.rst:488
msgid ":data:`sys.exec_prefix`."
msgstr ":data:`sys.exec_prefix`."

#: ../../c-api/init_config.rst:492
msgid ":data:`sys.executable`."
msgstr ":data:`sys.executable`."

#: ../../c-api/init_config.rst:496
msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr "如果为非零值，则在启动时调用 :func:`faulthandler.enable`。"

#: ../../c-api/init_config.rst:500
msgid "Filesystem encoding, :func:`sys.getfilesystemencoding`."
msgstr ""

#: ../../c-api/init_config.rst:504
msgid "Filesystem encoding errors, :func:`sys.getfilesystemencodeerrors`."
msgstr ""

#: ../../c-api/init_config.rst:509
msgid "Randomized hash function seed."
msgstr "随机化的哈希函数种子。"

#: ../../c-api/init_config.rst:511
msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at"
" Pythonstartup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""

#: ../../c-api/init_config.rst:516
msgid "Python home directory."
msgstr "Python 主目录。"

#: ../../c-api/init_config.rst:518
msgid ""
"Initialized from :envvar:`PYTHONHOME` environment variable value by default."
msgstr ""

#: ../../c-api/init_config.rst:523
msgid "If non-zero, profile import time."
msgstr "如为非零值，则对导入时间执行性能分析。"

#: ../../c-api/init_config.rst:527
msgid "Enter interactive mode after executing a script or a command."
msgstr "在执行脚本或命令之后进入交互模式。"

#: ../../c-api/init_config.rst:531
msgid "Install signal handlers?"
msgstr ""

#: ../../c-api/init_config.rst:535
msgid "Interactive mode."
msgstr "交互模式"

#: ../../c-api/init_config.rst:539
msgid "If greater than 0, enable isolated mode:"
msgstr ""

#: ../../c-api/init_config.rst:541
msgid ""
":data:`sys.path` contains neither the script's directory (computed from "
"``argv[0]`` or the current directory) nor the user's site-packages "
"directory."
msgstr ""

#: ../../c-api/init_config.rst:544
msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr "Python REPL 将不导入 :mod:`readline` 也不在交互提示符中启用默认的 readline 配置。"

#: ../../c-api/init_config.rst:546
msgid ""
"Set :c:member:`~PyConfig.use_environment` and "
":c:member:`~PyConfig.user_site_directory` to 0."
msgstr ""

#: ../../c-api/init_config.rst:551
msgid ""
"If non-zero, use :class:`io.FileIO` instead of :class:`io.WindowsConsoleIO` "
"for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:560
msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr "如为非零值，则在退出时转储 :ref:`Python pymalloc 内存分配器 <pymalloc>` 的统计数据。"

#: ../../c-api/init_config.rst:563
msgid "The option is ignored if Python is built using ``--without-pymalloc``."
msgstr ""

#: ../../c-api/init_config.rst:567
msgid ""
"Module search paths as a string separated by ``DELIM`` "
"(:data:`os.path.pathsep`)."
msgstr ""

#: ../../c-api/init_config.rst:570
msgid ""
"Initialized from :envvar:`PYTHONPATH` environment variable value by default."
msgstr ""

#: ../../c-api/init_config.rst:576
msgid ""
":data:`sys.path`. If :c:member:`~PyConfig.module_search_paths_set` is equal "
"to 0, the :c:member:`~PyConfig.module_search_paths` is overridden by the "
"function calculating the :ref:`Path Configuration <init-path-config>`."
msgstr ""

#: ../../c-api/init_config.rst:583
msgid "Compilation optimization level:"
msgstr "编译优化级别："

#: ../../c-api/init_config.rst:585
msgid "0: Peephole optimizer (and ``__debug__`` is set to ``True``)"
msgstr ""

#: ../../c-api/init_config.rst:586
msgid "1: Remove assertions, set ``__debug__`` to ``False``"
msgstr ""

#: ../../c-api/init_config.rst:587
msgid "2: Strip docstrings"
msgstr ""

#: ../../c-api/init_config.rst:591
msgid ""
"If non-zero, parse :c:member:`~PyConfig.argv` the same way the regular "
"Python command line arguments, and strip Python arguments from "
":c:member:`~PyConfig.argv`: see :ref:`Command Line Arguments <using-on-"
"cmdline>`."
msgstr ""

#: ../../c-api/init_config.rst:598
msgid ""
"If non-zero, turn on parser debugging output (for expert only, depending on "
"compilation options)."
msgstr ""

#: ../../c-api/init_config.rst:603
msgid ""
"If equal to 0, suppress warnings when calculating the :ref:`Path "
"Configuration <init-path-config>` (Unix only, Windows does not log any "
"warning). Otherwise, warnings are written into ``stderr``."
msgstr ""

#: ../../c-api/init_config.rst:609
msgid ":data:`sys.prefix`."
msgstr ":data:`sys.prefix`."

#: ../../c-api/init_config.rst:613
msgid ""
"Program name. Used to initialize :c:member:`~PyConfig.executable`, and in "
"early error messages."
msgstr ""

#: ../../c-api/init_config.rst:618
msgid ":data:`sys.pycache_prefix`: ``.pyc`` cache prefix."
msgstr ""

#: ../../c-api/init_config.rst:620
msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr "如果为 ``NULL``，则 :data:`sys.pycache_prefix` 将被设为 ``None``。"

#: ../../c-api/init_config.rst:624
msgid ""
"Quiet mode. For example, don't display the copyright and version messages in"
" interactive mode."
msgstr ""

#: ../../c-api/init_config.rst:629
msgid "``python3 -c COMMAND`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:633
msgid "``python3 FILENAME`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:637
msgid "``python3 -m MODULE`` argument. Used by :c:func:`Py_RunMain`."
msgstr ""

#: ../../c-api/init_config.rst:641
msgid "Show total reference count at exit?"
msgstr "在退出时显示引用总数？"

#: ../../c-api/init_config.rst:643
msgid "Set to 1 by :option:`-X showrefcount <-X>` command line option."
msgstr ""

#: ../../c-api/init_config.rst:645
msgid "Need a debug build of Python (``Py_REF_DEBUG`` macro must be defined)."
msgstr ""

#: ../../c-api/init_config.rst:649
msgid "Import the :mod:`site` module at startup?"
msgstr "在启动时导入 :mod:`site` 模块？"

#: ../../c-api/init_config.rst:653
msgid "Skip the first line of the source?"
msgstr ""

#: ../../c-api/init_config.rst:658
msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and "
":data:`sys.stderr`."
msgstr ""

#: ../../c-api/init_config.rst:663
msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr "如果为非零值，则在启动时调用 :func:`tracemalloc.start`。"

#: ../../c-api/init_config.rst:667
msgid ""
"If greater than 0, use :ref:`environment variables <using-on-envvars>`."
msgstr ""

#: ../../c-api/init_config.rst:671
msgid "If non-zero, add user site directory to :data:`sys.path`."
msgstr ""

#: ../../c-api/init_config.rst:675
msgid "If non-zero, enable verbose mode."
msgstr ""

#: ../../c-api/init_config.rst:679
msgid ""
":data:`sys.warnoptions`: options of the :mod:`warnings` module to build "
"warnings filters: lowest to highest priority."
msgstr ""

#: ../../c-api/init_config.rst:682
msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first item"
" of :data:`warnings.filters` which is checked first (highest priority)."
msgstr ""
":mod:`warnings` 模块以相反的顺序添加 :data:`sys.warnoptions`: 最后一个 "
":c:member:`PyConfig.warnoptions` 条目将成为 :data:`warnings.filters` "
"的第一个条目并将最先被检查（最高优先级）。"

#: ../../c-api/init_config.rst:689
msgid "If non-zero, write ``.pyc`` files."
msgstr ""

#: ../../c-api/init_config.rst:691
msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of "
":c:member:`~PyConfig.write_bytecode`."
msgstr ""
":data:`sys.dont_write_bytecode` 会被初始化为 :c:member:`~PyConfig.write_bytecode` "
"取反后的值。"

#: ../../c-api/init_config.rst:696
msgid ":data:`sys._xoptions`."
msgstr ":data:`sys._xoptions`."

#: ../../c-api/init_config.rst:700
msgid "Enable PEG parser? Default: 1."
msgstr ""

#: ../../c-api/init_config.rst:702
msgid "Set to 0 by :option:`-X oldparser <-X>` and :envvar:`PYTHONOLDPARSER`."
msgstr ""

#: ../../c-api/init_config.rst:704
msgid "See also :pep:`617`."
msgstr "参见 :pep:`617`。"

#: ../../c-api/init_config.rst:708
msgid ""
"If ``parse_argv`` is non-zero, ``argv`` arguments are parsed the same way "
"the regular Python parses command line arguments, and Python arguments are "
"stripped from ``argv``: see :ref:`Command Line Arguments <using-on-"
"cmdline>`."
msgstr ""

#: ../../c-api/init_config.rst:713
msgid ""
"The ``xoptions`` options are parsed to set other options: see :option:`-X` "
"option."
msgstr ""

#: ../../c-api/init_config.rst:718
msgid "The ``show_alloc_count`` field has been removed."
msgstr "``show_alloc_count`` 字段已被移除。"

#: ../../c-api/init_config.rst:722
msgid "Initialization with PyConfig"
msgstr "使用 PyConfig 初始化"

#: ../../c-api/init_config.rst:724
msgid "Function to initialize Python:"
msgstr "用于初始化 Python 的函数："

#: ../../c-api/init_config.rst:728
msgid "Initialize Python from *config* configuration."
msgstr "根据 *config* 配置来初始化 Python。"

#: ../../c-api/init_config.rst:733
msgid ""
"If :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` or "
":c:func:`PyImport_ExtendInittab` are used, they must be set or called after "
"Python preinitialization and before the Python initialization. If Python is "
"initialized multiple times, :c:func:`PyImport_AppendInittab` or "
":c:func:`PyImport_ExtendInittab` must be called before each Python "
"initialization."
msgstr ""
"如果使用了 :c:func:`PyImport_FrozenModules`、:c:func:`PyImport_AppendInittab` 或 "
":c:func:`PyImport_ExtendInittab`，则必须在 Python 预初始化之后、Python 初始化之前设置或调用它们。 如果 "
"Python 被多次初始化，则必须在每次初始化 Python 之前调用 :c:func:`PyImport_AppendInittab` 或 "
":c:func:`PyImport_ExtendInittab`。"

#: ../../c-api/init_config.rst:740
msgid "Example setting the program name::"
msgstr "设置程序名称的示例::"

#: ../../c-api/init_config.rst:768
msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters::"
msgstr ""

#: ../../c-api/init_config.rst:819
msgid "Isolated Configuration"
msgstr "隔离配置"

#: ../../c-api/init_config.rst:821
msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and "
":c:func:`PyConfig_InitIsolatedConfig` functions create a configuration to "
"isolate Python from the system. For example, to embed Python into an "
"application."
msgstr ""
":c:func:`PyPreConfig_InitIsolatedConfig` 和 "
":c:func:`PyConfig_InitIsolatedConfig` 函数会创建一个配置来将 Python 与系统隔离开来。 例如，将 "
"Python 嵌入到某个应用程序。"

#: ../../c-api/init_config.rst:826
msgid ""
"This configuration ignores global configuration variables, environment "
"variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) "
"and user site directory. The C standard streams (ex: ``stdout``) and the "
"LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""
"该配置将忽略全局配置变量、环境变量、命令行参数 (:c:member:`PyConfig.argv` 将不会被解析) 和用户站点目录。 C 标准流 "
"(例如 ``stdout``) 和 LC_CTYPE 语言区域将保持不变。 信号处理器将不会被安装。"

#: ../../c-api/init_config.rst:831
msgid ""
"Configuration files are still used with this configuration. Set the "
":ref:`Path Configuration <init-path-config>` (\"output fields\") to ignore "
"these configuration files and avoid the function computing the default path "
"configuration."
msgstr ""

#: ../../c-api/init_config.rst:840
msgid "Python Configuration"
msgstr "Python 配置"

#: ../../c-api/init_config.rst:842
msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and "
":c:func:`PyConfig_InitPythonConfig` functions create a configuration to "
"build a customized Python which behaves as the regular Python."
msgstr ""
":c:func:`PyPreConfig_InitPythonConfig` 和 :c:func:`PyConfig_InitPythonConfig`"
" 函数会创建一个配置来构建一个行为与常规 Python 相同的自定义 Python。"

#: ../../c-api/init_config.rst:846
msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr "环境变量和命令行参数将被用于配置 Python，而全局配置变量将被忽略。"

#: ../../c-api/init_config.rst:849
msgid ""
"This function enables C locale coercion (:pep:`538`) and UTF-8 Mode "
"(:pep:`540`) depending on the LC_CTYPE locale, :envvar:`PYTHONUTF8` and "
":envvar:`PYTHONCOERCECLOCALE` environment variables."
msgstr ""

#: ../../c-api/init_config.rst:853
msgid "Example of customized Python always running in isolated mode::"
msgstr "定制的 Python 的示例总是会以隔离模式运行::"

#: ../../c-api/init_config.rst:892
msgid "Path Configuration"
msgstr "路径配置"

#: ../../c-api/init_config.rst:894
msgid ""
":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ":c:type:`PyConfig` 包含多个用于路径配置的字段："

#: ../../c-api/init_config.rst:896
msgid "Path configuration inputs:"
msgstr "路径配置输入："

#: ../../c-api/init_config.rst:898
msgid ":c:member:`PyConfig.home`"
msgstr ":c:member:`PyConfig.home`"

#: ../../c-api/init_config.rst:899
msgid ":c:member:`PyConfig.platlibdir`"
msgstr ":c:member:`PyConfig.platlibdir`"

#: ../../c-api/init_config.rst:900
msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:member:`PyConfig.pathconfig_warnings`"

#: ../../c-api/init_config.rst:901
msgid ":c:member:`PyConfig.program_name`"
msgstr ":c:member:`PyConfig.program_name`"

#: ../../c-api/init_config.rst:902
msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ":c:member:`PyConfig.pythonpath_env`"

#: ../../c-api/init_config.rst:903
msgid "current working directory: to get absolute paths"
msgstr "当前工作目录：用于获取绝对路径"

#: ../../c-api/init_config.rst:904
msgid ""
"``PATH`` environment variable to get the program full path (from "
":c:member:`PyConfig.program_name`)"
msgstr "``PATH`` 环境变量用于获取程序的完整路径 (来自 :c:member:`PyConfig.program_name`)"

#: ../../c-api/init_config.rst:906
msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr "``__PYVENV_LAUNCHER__`` 环境变量"

#: ../../c-api/init_config.rst:907
msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and "
"HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""
"（仅限 Windows only） 注册表 HKEY_CURRENT_USER 和 HKEY_LOCAL_MACHINE 的 "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" 项下的应用程序目录（其中 X.Y 为 Python "
"版本）。"

#: ../../c-api/init_config.rst:911
msgid "Path configuration output fields:"
msgstr "路径配置输出字段："

#: ../../c-api/init_config.rst:913
msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ":c:member:`PyConfig.base_exec_prefix`"

#: ../../c-api/init_config.rst:914
msgid ":c:member:`PyConfig.base_executable`"
msgstr ":c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:915
msgid ":c:member:`PyConfig.base_prefix`"
msgstr ":c:member:`PyConfig.base_prefix`"

#: ../../c-api/init_config.rst:916
msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ":c:member:`PyConfig.exec_prefix`"

#: ../../c-api/init_config.rst:917
msgid ":c:member:`PyConfig.executable`"
msgstr ":c:member:`PyConfig.executable`"

#: ../../c-api/init_config.rst:918
msgid ""
":c:member:`PyConfig.module_search_paths_set`, "
":c:member:`PyConfig.module_search_paths`"
msgstr ""
":c:member:`PyConfig.module_search_paths_set`, "
":c:member:`PyConfig.module_search_paths`"

#: ../../c-api/init_config.rst:920
msgid ":c:member:`PyConfig.prefix`"
msgstr ":c:member:`PyConfig.prefix`"

#: ../../c-api/init_config.rst:922
msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If "
":c:member:`~PyConfig.module_search_paths_set` is equal to 0, "
":c:member:`~PyConfig.module_search_paths` is overridden and "
":c:member:`~PyConfig.module_search_paths_set` is set to 1."
msgstr ""

#: ../../c-api/init_config.rst:928
msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to 1. In this case, path configuration input fields are ignored as "
"well."
msgstr ""

#: ../../c-api/init_config.rst:935
msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to 0 to suppress warnings when"
" calculating the path configuration (Unix only, Windows does not log any "
"warning)."
msgstr ""

#: ../../c-api/init_config.rst:938
msgid ""
"If :c:member:`~PyConfig.base_prefix` or "
":c:member:`~PyConfig.base_exec_prefix` fields are not set, they inherit "
"their value from :c:member:`~PyConfig.prefix` and "
":c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""
"如果 :c:member:`~PyConfig.base_prefix` 或 "
":c:member:`~PyConfig.base_exec_prefix` 字段未设置，它们将分别从 "
":c:member:`~PyConfig.prefix` 和 :c:member:`~PyConfig.exec_prefix` 继承其值。"

#: ../../c-api/init_config.rst:942
msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ":c:func:`Py_RunMain` 和 :c:func:`Py_Main` 将修改 :data:`sys.path`:"

#: ../../c-api/init_config.rst:944
msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend "
":c:member:`~PyConfig.run_filename` to :data:`sys.path`."
msgstr ""
"如果 :c:member:`~PyConfig.run_filename` 已设置并且是一个包含 ``__main__.py`` 脚本的目录，则会将 "
":c:member:`~PyConfig.run_filename` 添加到 :data:`sys.path` 的开头。"

#: ../../c-api/init_config.rst:947
msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr "如果 :c:member:`~PyConfig.isolated` 为零："

#: ../../c-api/init_config.rst:949
msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory to"
" :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""
"如果设置了 :c:member:`~PyConfig.run_module`，则将当前目录添加到 :data:`sys.path` 的开头。 "
"如果无法读取当前目录则不执行任何操作。"

#: ../../c-api/init_config.rst:951
msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""
"如果设置了 :c:member:`~PyConfig.run_filename`，则将文件名的目录添加到 :data:`sys.path` 的开头。"

#: ../../c-api/init_config.rst:953
msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr "在其他情况下，则将一个空字符串添加到 :data:`sys.path` 的开头。"

#: ../../c-api/init_config.rst:955
msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. If "
":c:member:`~PyConfig.user_site_directory` is non-zero and the user's site-"
"package directory exists, the :mod:`site` module appends the user's site-"
"package directory to :data:`sys.path`."
msgstr ""
"如果 :c:member:`~PyConfig.site_import` 为非零值，则 :data:`sys.path` 可通过 :mod:`site`"
" 模块修改。 如果 :c:member:`~PyConfig.user_site_directory` 为非零值且用户的 site-package "
"目录存在，则 :mod:`site` 模块会将用户的 site-package 目录附加到 :data:`sys.path`。"

#: ../../c-api/init_config.rst:961
msgid "The following configuration files are used by the path configuration:"
msgstr "路径配置会使用以下配置文件："

#: ../../c-api/init_config.rst:963
msgid "``pyvenv.cfg``"
msgstr "``pyvenv.cfg``"

#: ../../c-api/init_config.rst:964
msgid "``python._pth`` (Windows only)"
msgstr "``python._pth`` (仅Windows)"

#: ../../c-api/init_config.rst:965
msgid "``pybuilddir.txt`` (Unix only)"
msgstr "``pybuilddir.txt`` (仅Unix)"

#: ../../c-api/init_config.rst:967
msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set "
":c:member:`PyConfig.base_executable`"
msgstr ""
"``__PYVENV_LAUNCHER__`` 环境变量将被用于设置 :c:member:`PyConfig.base_executable`"

#: ../../c-api/init_config.rst:972
msgid "Py_RunMain()"
msgstr "Py_RunMain()"

#: ../../c-api/init_config.rst:976
msgid ""
"Execute the command (:c:member:`PyConfig.run_command`), the script "
"(:c:member:`PyConfig.run_filename`) or the module "
"(:c:member:`PyConfig.run_module`) specified on the command line or in the "
"configuration."
msgstr ""
"执行在命令行或配置中指定的命令 (:c:member:`PyConfig.run_command`)、脚本 "
"(:c:member:`PyConfig.run_filename`) 或模块 (:c:member:`PyConfig.run_module`)。"

#: ../../c-api/init_config.rst:981
msgid "By default and when if :option:`-i` option is used, run the REPL."
msgstr "在默认情况下如果使用了 :option:`-i` 选项，则运行 REPL。"

#: ../../c-api/init_config.rst:983
msgid ""
"Finally, finalizes Python and returns an exit status that can be passed to "
"the ``exit()`` function."
msgstr "最后，终结化 Python 并返回一个可传递给 ``exit()`` 函数的退出状态。"

#: ../../c-api/init_config.rst:986
msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of "
"customized Python always running in isolated mode using "
":c:func:`Py_RunMain`."
msgstr ""
"请参阅 :ref:`Python 配置 <init-python-config>` 查看一个使用 :c:func:`Py_RunMain` "
"在隔离模式下始终运行自定义 Python 的示例。"

#: ../../c-api/init_config.rst:992
msgid "Py_GetArgcArgv()"
msgstr "Py_GetArgcArgv()"

#: ../../c-api/init_config.rst:996
msgid "Get the original command line arguments, before Python modified them."
msgstr "在 Python 修改原始命令行参数之前，获取这些参数。"

#: ../../c-api/init_config.rst:1000
msgid "Multi-Phase Initialization Private Provisional API"
msgstr "多阶段初始化私有暂定 API"

#: ../../c-api/init_config.rst:1002
msgid ""
"This section is a private provisional API introducing multi-phase "
"initialization, the core feature of :pep:`432`:"
msgstr "本节介绍的私有暂定 API 引入了多阶段初始化，它是 :pep:`432` 的核心特性："

#: ../../c-api/init_config.rst:1005
msgid "\"Core\" initialization phase, \"bare minimum Python\":"
msgstr "“核心”初始化阶段，“最小化的基本 Python”："

#: ../../c-api/init_config.rst:1007
msgid "Builtin types;"
msgstr "内置类型；"

#: ../../c-api/init_config.rst:1008
msgid "Builtin exceptions;"
msgstr "内置异常；"

#: ../../c-api/init_config.rst:1009
msgid "Builtin and frozen modules;"
msgstr "内置和已冻结模块；"

#: ../../c-api/init_config.rst:1010
msgid ""
"The :mod:`sys` module is only partially initialized (ex: :data:`sys.path` "
"doesn't exist yet)."
msgstr ":mod:`sys` 模块仅部分初始化（例如: :data:`sys.path` 尚不存在）。"

#: ../../c-api/init_config.rst:1013
msgid "\"Main\" initialization phase, Python is fully initialized:"
msgstr "\"主要\"初始化阶段，Python 被完全初始化："

#: ../../c-api/init_config.rst:1015
msgid "Install and configure :mod:`importlib`;"
msgstr "安装并配置 :mod:`importlib`；"

#: ../../c-api/init_config.rst:1016
msgid "Apply the :ref:`Path Configuration <init-path-config>`;"
msgstr "应用 :ref:`路径配置 <init-path-config>`；"

#: ../../c-api/init_config.rst:1017
msgid "Install signal handlers;"
msgstr "安装信号处理器；"

#: ../../c-api/init_config.rst:1018
msgid ""
"Finish :mod:`sys` module initialization (ex: create :data:`sys.stdout` and "
":data:`sys.path`);"
msgstr "完成 :mod:`sys` 模块初始化 (例如：创建 :data:`sys.stdout` 和 :data:`sys.path`)；"

#: ../../c-api/init_config.rst:1020
msgid ""
"Enable optional features like :mod:`faulthandler` and :mod:`tracemalloc`;"
msgstr "启用 :mod:`faulthandler` 和 :mod:`tracemalloc` 等可选功能；"

#: ../../c-api/init_config.rst:1021
msgid "Import the :mod:`site` module;"
msgstr "导入 :mod:`site` 模块；"

#: ../../c-api/init_config.rst:1022
msgid "etc."
msgstr "等等."

#: ../../c-api/init_config.rst:1024
msgid "Private provisional API:"
msgstr "私有临时API："

#: ../../c-api/init_config.rst:1026
msgid ""
":c:member:`PyConfig._init_main`: if set to 0, "
":c:func:`Py_InitializeFromConfig` stops at the \"Core\" initialization "
"phase."
msgstr ""

#: ../../c-api/init_config.rst:1028
msgid ""
":c:member:`PyConfig._isolated_interpreter`: if non-zero, disallow threads, "
"subprocesses and fork."
msgstr ""

#: ../../c-api/init_config.rst:1033
msgid ""
"Move to the \"Main\" initialization phase, finish the Python initialization."
msgstr "进入“主要”初始化阶段，完成 Python 初始化。"

#: ../../c-api/init_config.rst:1035
msgid ""
"No module is imported during the \"Core\" phase and the ``importlib`` module"
" is not configured: the :ref:`Path Configuration <init-path-config>` is only"
" applied during the \"Main\" phase. It may allow to customize Python in "
"Python to override or tune the :ref:`Path Configuration <init-path-config>`,"
" maybe install a custom :data:`sys.meta_path` importer or an import hook, "
"etc."
msgstr ""
"在“核心”阶段不会导入任何模块，也不会配置 ``importlib`` 模块: :ref:`路径配置 <init-path-config>` "
"只会在“主要”阶段期间应用。 这可能允许在 Python 中定制 Python 以覆盖或微调 :ref:`路径配置 <init-path-"
"config>`，也可能会安装自定义的 :data:`sys.meta_path` 导入器或导入钩子等等。"

#: ../../c-api/init_config.rst:1041
msgid ""
"It may become possible to calculatin the :ref:`Path Configuration <init-"
"path-config>` in Python, after the Core phase and before the Main phase, "
"which is one of the :pep:`432` motivation."
msgstr ""

#: ../../c-api/init_config.rst:1045
msgid ""
"The \"Core\" phase is not properly defined: what should be and what should "
"not be available at this phase is not specified yet. The API is marked as "
"private and provisional: the API can be modified or even be removed anytime "
"until a proper public API is designed."
msgstr ""
"“核心”阶段并没有完整的定义：在这一阶段什么应该可用什么不应该可用都尚未被指明。 该 API 被标记为私有和暂定的：也就是说该 API "
"可以随时被修改甚至被移除直到设计出适用的公共 API。"

#: ../../c-api/init_config.rst:1050
msgid ""
"Example running Python code between \"Core\" and \"Main\" initialization "
"phases::"
msgstr "在“核心”和“主要”初始化阶段之间运行 Python 代码的示例::"
