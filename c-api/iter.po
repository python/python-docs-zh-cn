# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# dannyvi <dannyvis@icloud.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2022\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/iter.rst:6
msgid "Iterator Protocol"
msgstr "迭代器协议"

#: ../../c-api/iter.rst:8
msgid "There are two functions specifically for working with iterators."
msgstr "迭代器有两个函数。"

#: ../../c-api/iter.rst:12
msgid ""
"Return non-zero if the object *o* can be safely passed to "
":c:func:`PyIter_NextItem` and ``0`` otherwise. This function always "
"succeeds."
msgstr ""

#: ../../c-api/iter.rst:18
msgid ""
"Return non-zero if the object *o* provides the :class:`AsyncIterator` "
"protocol, and ``0`` otherwise.  This function always succeeds."
msgstr "如果对象 *o* 提供了 :class:`AsyncIterator` 协议则返回非零值，否则返回 ``0``。 此函数总是会成功执行。"

#: ../../c-api/iter.rst:25
msgid ""
"Return ``1`` and set *item* to a :term:`strong reference` of the next value "
"of the iterator *iter* on success. Return ``0`` and set *item* to ``NULL`` "
"if there are no remaining values. Return ``-1``, set *item* to ``NULL`` and "
"set an exception on error."
msgstr ""

#: ../../c-api/iter.rst:34
msgid ""
"This is an older version of :c:func:`!PyIter_NextItem`, which is retained "
"for backwards compatibility. Prefer :c:func:`PyIter_NextItem`."
msgstr ""

#: ../../c-api/iter.rst:38
msgid ""
"Return the next value from the iterator *o*.  The object must be an iterator"
" according to :c:func:`PyIter_Check` (it is up to the caller to check this)."
" If there are no remaining values, returns ``NULL`` with no exception set. "
"If an error occurs while retrieving the item, returns ``NULL`` and passes "
"along the exception."
msgstr ""
"从迭代器 *o* 返回下一个值。 对象必须可被 :c:func:`PyIter_Check` 确认为迭代器（需要调用方来负责检查）。 "
"如果没有剩余的值，则返回 ``NULL`` 并且不设置异常。 如果在获取条目时发生了错误，则返回 ``NULL`` 并且传递异常。"

#: ../../c-api/iter.rst:46
msgid ""
"The enum value used to represent different results of :c:func:`PyIter_Send`."
msgstr "用于代表 :c:func:`PyIter_Send` 的不同结果的枚举值。"

#: ../../c-api/iter.rst:53
msgid "Sends the *arg* value into the iterator *iter*. Returns:"
msgstr "将 *arg* 值发送到迭代器 *iter*。 返回:"

#: ../../c-api/iter.rst:55
msgid ""
"``PYGEN_RETURN`` if iterator returns. Return value is returned via "
"*presult*."
msgstr "``PYGEN_RETURN``，如果迭代器返回的话。 返回值会通过 *presult* 来返回。"

#: ../../c-api/iter.rst:56
msgid ""
"``PYGEN_NEXT`` if iterator yields. Yielded value is returned via *presult*."
msgstr "``PYGEN_NEXT``，如果迭代器生成值的话。 生成的值会通过 *presult* 来返回。"

#: ../../c-api/iter.rst:57
msgid ""
"``PYGEN_ERROR`` if iterator has raised and exception. *presult* is set to "
"``NULL``."
msgstr "``PYGEN_ERROR``，如果迭代器引发异常的话。  *presult* 会被设为 ``NULL``。"
