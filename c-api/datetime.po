# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/datetime.rst:6
msgid "DateTime Objects"
msgstr ""

#: ../../c-api/datetime.rst:8
msgid ""
"Various date and time objects are supplied by the :mod:`datetime` module. "
"Before using any of these functions, the header file :file:`datetime.h` must"
" be included in your source (note that this is not included by "
":file:`Python.h`), and the macro :c:macro:`!PyDateTime_IMPORT` must be "
"invoked, usually as part of the module initialisation function.  The macro "
"puts a pointer to a C structure into a static variable, "
":c:data:`!PyDateTimeAPI`, that is used by the following macros."
msgstr ""

#: ../../c-api/datetime.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python date object."
msgstr ""

#: ../../c-api/datetime.rst:22
msgid ""
"This subtype of :c:type:`PyObject` represents a Python datetime object."
msgstr ""

#: ../../c-api/datetime.rst:26
msgid "This subtype of :c:type:`PyObject` represents a Python time object."
msgstr ""

#: ../../c-api/datetime.rst:30
msgid ""
"This subtype of :c:type:`PyObject` represents the difference between two "
"datetime values."
msgstr ""

#: ../../c-api/datetime.rst:34
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python date type; it "
"is the same object as :class:`datetime.date` in the Python layer."
msgstr ""

#: ../../c-api/datetime.rst:39
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python datetime type;"
" it is the same object as :class:`datetime.datetime` in the Python layer."
msgstr ""

#: ../../c-api/datetime.rst:44
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python time type; it "
"is the same object as :class:`datetime.time` in the Python layer."
msgstr ""

#: ../../c-api/datetime.rst:49
msgid ""
"This instance of :c:type:`PyTypeObject` represents Python type for the "
"difference between two datetime values; it is the same object as "
":class:`datetime.timedelta` in the Python layer."
msgstr ""

#: ../../c-api/datetime.rst:55
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python time zone info"
" type; it is the same object as :class:`datetime.tzinfo` in the Python "
"layer."
msgstr ""

#: ../../c-api/datetime.rst:59
msgid "Macro for access to the UTC singleton:"
msgstr ""

#: ../../c-api/datetime.rst:63
msgid ""
"Returns the time zone singleton representing UTC, the same object as "
":attr:`datetime.timezone.utc`."
msgstr ""

#: ../../c-api/datetime.rst:69
msgid "Type-check macros:"
msgstr ""

#: ../../c-api/datetime.rst:73
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType` or a subtype of"
" :c:data:`!PyDateTime_DateType`.  *ob* must not be ``NULL``.  This function "
"always succeeds."
msgstr ""

#: ../../c-api/datetime.rst:80
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType`. *ob* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""

#: ../../c-api/datetime.rst:86
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType` or a "
"subtype of :c:data:`!PyDateTime_DateTimeType`.  *ob* must not be ``NULL``.  "
"This function always succeeds."
msgstr ""

#: ../../c-api/datetime.rst:93
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""

#: ../../c-api/datetime.rst:99
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType` or a subtype of"
" :c:data:`!PyDateTime_TimeType`.  *ob* must not be ``NULL``.  This function "
"always succeeds."
msgstr ""

#: ../../c-api/datetime.rst:106
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType`. *ob* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""

#: ../../c-api/datetime.rst:112
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType` or a subtype "
"of :c:data:`!PyDateTime_DeltaType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""

#: ../../c-api/datetime.rst:119
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType`. *ob* must not"
" be ``NULL``.  This function always succeeds."
msgstr ""

#: ../../c-api/datetime.rst:125
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType` or a subtype "
"of :c:data:`!PyDateTime_TZInfoType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""

#: ../../c-api/datetime.rst:132
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""

#: ../../c-api/datetime.rst:136
msgid "Macros to create objects:"
msgstr ""

#: ../../c-api/datetime.rst:140
msgid ""
"Return a :class:`datetime.date` object with the specified year, month and "
"day."
msgstr ""

#: ../../c-api/datetime.rst:145
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, month, "
"day, hour, minute, second and microsecond."
msgstr ""

#: ../../c-api/datetime.rst:151
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, month, "
"day, hour, minute, second, microsecond and fold."
msgstr ""

#: ../../c-api/datetime.rst:159
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second and microsecond."
msgstr ""

#: ../../c-api/datetime.rst:165
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second, microsecond and fold."
msgstr ""

#: ../../c-api/datetime.rst:173
msgid ""
"Return a :class:`datetime.timedelta` object representing the given number of"
" days, seconds and microseconds.  Normalization is performed so that the "
"resulting number of microseconds and seconds lie in the ranges documented "
"for :class:`datetime.timedelta` objects."
msgstr ""

#: ../../c-api/datetime.rst:181
msgid ""
"Return a :class:`datetime.timezone` object with an unnamed fixed offset "
"represented by the *offset* argument."
msgstr ""

#: ../../c-api/datetime.rst:189
msgid ""
"Return a :class:`datetime.timezone` object with a fixed offset represented "
"by the *offset* argument and with tzname *name*."
msgstr ""

#: ../../c-api/datetime.rst:195
msgid ""
"Macros to extract fields from date objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Date`, including subclasses (such as "
":c:type:`PyDateTime_DateTime`).  The argument must not be ``NULL``, and the "
"type is not checked:"
msgstr ""

#: ../../c-api/datetime.rst:202
msgid "Return the year, as a positive int."
msgstr ""

#: ../../c-api/datetime.rst:207
msgid "Return the month, as an int from 1 through 12."
msgstr ""

#: ../../c-api/datetime.rst:212
msgid "Return the day, as an int from 1 through 31."
msgstr ""

#: ../../c-api/datetime.rst:215
msgid ""
"Macros to extract fields from datetime objects.  The argument must be an "
"instance of :c:type:`PyDateTime_DateTime`, including subclasses. The "
"argument must not be ``NULL``, and the type is not checked:"
msgstr ""

#: ../../c-api/datetime.rst:221 ../../c-api/datetime.rst:259
msgid "Return the hour, as an int from 0 through 23."
msgstr ""

#: ../../c-api/datetime.rst:226 ../../c-api/datetime.rst:264
msgid "Return the minute, as an int from 0 through 59."
msgstr ""

#: ../../c-api/datetime.rst:231 ../../c-api/datetime.rst:269
msgid "Return the second, as an int from 0 through 59."
msgstr ""

#: ../../c-api/datetime.rst:236 ../../c-api/datetime.rst:274
msgid "Return the microsecond, as an int from 0 through 999999."
msgstr ""

#: ../../c-api/datetime.rst:241 ../../c-api/datetime.rst:279
msgid "Return the fold, as an int from 0 through 1."
msgstr ""

#: ../../c-api/datetime.rst:248 ../../c-api/datetime.rst:286
msgid "Return the tzinfo (which may be ``None``)."
msgstr ""

#: ../../c-api/datetime.rst:253
msgid ""
"Macros to extract fields from time objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Time`, including subclasses. The argument "
"must not be ``NULL``, and the type is not checked:"
msgstr ""

#: ../../c-api/datetime.rst:291
msgid ""
"Macros to extract fields from time delta objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Delta`, including subclasses. The argument "
"must not be ``NULL``, and the type is not checked:"
msgstr ""

#: ../../c-api/datetime.rst:297
msgid "Return the number of days, as an int from -999999999 to 999999999."
msgstr ""

#: ../../c-api/datetime.rst:304
msgid "Return the number of seconds, as an int from 0 through 86399."
msgstr ""

#: ../../c-api/datetime.rst:311
msgid "Return the number of microseconds, as an int from 0 through 999999."
msgstr ""

#: ../../c-api/datetime.rst:316
msgid "Macros for the convenience of modules implementing the DB API:"
msgstr ""

#: ../../c-api/datetime.rst:320
msgid ""
"Create and return a new :class:`datetime.datetime` object given an argument "
"tuple suitable for passing to :meth:`datetime.datetime.fromtimestamp()`."
msgstr ""

#: ../../c-api/datetime.rst:326
msgid ""
"Create and return a new :class:`datetime.date` object given an argument "
"tuple suitable for passing to :meth:`datetime.date.fromtimestamp()`."
msgstr ""
