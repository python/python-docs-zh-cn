# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/datetime.rst:6
msgid "DateTime Objects"
msgstr "DateTime 对象"

#: ../../c-api/datetime.rst:8
msgid ""
"Various date and time objects are supplied by the :mod:`datetime` module. "
"Before using any of these functions, the header file :file:`datetime.h` must"
" be included in your source (note that this is not included by "
":file:`Python.h`), and the macro :c:macro:`!PyDateTime_IMPORT` must be "
"invoked, usually as part of the module initialisation function.  The macro "
"puts a pointer to a C structure into a static variable, "
":c:data:`!PyDateTimeAPI`, that is used by the following macros."
msgstr ""
":mod:`datetime` 模块提供了各种日期和时间对象。 在使用这些函数之前，必须在你的源代码中包含头文件 :file:`datetime.h` "
"(请注意此文件并未包括在 :file:`Python.h` 中)，并且 :c:macro:`!PyDateTime_IMPORT` "
"必须被唤起，通常是作为模块初始化函数的一部分。 这个宏会将指向特定 C 结构体的指针放入一个静态变量 :c:data:`!PyDateTimeAPI` "
"中，它将被下列的宏所使用。"

#: ../../c-api/datetime.rst:18
msgid "This subtype of :c:type:`PyObject` represents a Python date object."
msgstr ":c:type:`PyObject` 的这个子类型表示 Python 日期对象。"

#: ../../c-api/datetime.rst:22
msgid ""
"This subtype of :c:type:`PyObject` represents a Python datetime object."
msgstr ":c:type:`PyObject` 的这个子类型表示 Python 日期时间对象。"

#: ../../c-api/datetime.rst:26
msgid "This subtype of :c:type:`PyObject` represents a Python time object."
msgstr ":c:type:`PyObject` 的这个子类型表示 Python 时间对象。"

#: ../../c-api/datetime.rst:30
msgid ""
"This subtype of :c:type:`PyObject` represents the difference between two "
"datetime values."
msgstr ":c:type:`PyObject` 的这个子类型表示两个日期时间值之间的差值。"

#: ../../c-api/datetime.rst:34
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python date type; it "
"is the same object as :class:`datetime.date` in the Python layer."
msgstr ""
"这个 :c:type:`PyTypeObject` 的实例代表 Python 日期类型；它与 Python 层面的 "
":class:`datetime.date` 对象相同。"

#: ../../c-api/datetime.rst:39
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python datetime type;"
" it is the same object as :class:`datetime.datetime` in the Python layer."
msgstr ""
"这个 :c:type:`PyTypeObject` 的实例代表 Python 日期时间类型；它与 Python 层面的 "
":class:`datetime.datetime` 对象相同。"

#: ../../c-api/datetime.rst:44
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python time type; it "
"is the same object as :class:`datetime.time` in the Python layer."
msgstr ""
"这个 :c:type:`PyTypeObject` 的实例代表 Python 时间类型；它与 Python 层面的 "
":class:`datetime.time` 对象相同。"

#: ../../c-api/datetime.rst:49
msgid ""
"This instance of :c:type:`PyTypeObject` represents Python type for the "
"difference between two datetime values; it is the same object as "
":class:`datetime.timedelta` in the Python layer."
msgstr ""
"这个 :c:type:`PyTypeObject` 的实例是代表两个日期时间值之间差值的 Python 类型；它与 Python 层面的 "
":class:`datetime.timedelta` 对象相同。"

#: ../../c-api/datetime.rst:55
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python time zone info"
" type; it is the same object as :class:`datetime.tzinfo` in the Python "
"layer."
msgstr ""
"这个 :c:type:`PyTypeObject` 的实例代表 Python 时区信息类型；它与 Python 层面的 "
":class:`datetime.tzinfo` 对象相同。"

#: ../../c-api/datetime.rst:59
msgid "Macro for access to the UTC singleton:"
msgstr "宏访问UTC单例:"

#: ../../c-api/datetime.rst:63
msgid ""
"Returns the time zone singleton representing UTC, the same object as "
":attr:`datetime.timezone.utc`."
msgstr "返回表示 UTC 的时区单例，与 :attr:`datetime.timezone.utc` 为同一对象。"

#: ../../c-api/datetime.rst:69
msgid "Type-check macros:"
msgstr "类型检查宏："

#: ../../c-api/datetime.rst:73
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType` or a subtype of"
" :c:data:`!PyDateTime_DateType`.  *ob* must not be ``NULL``.  This function "
"always succeeds."
msgstr ""
"如果 *ob* 为 :c:data:`PyDateTime_DateType` 类型或 :c:data:`!PyDateTime_DateType` "
"的某个子类型则返回真值。 *ob* 不能为 ``NULL``。 此函数总是会成功执行。"

#: ../../c-api/datetime.rst:80
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType`. *ob* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""
"如果 *ob* 为 :c:data:`PyDateTime_DateType` 类型则返回真值。 *ob* 不能为 ``NULL``。 "
"此函数总是会成功执行。"

#: ../../c-api/datetime.rst:86
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType` or a "
"subtype of :c:data:`!PyDateTime_DateTimeType`.  *ob* must not be ``NULL``.  "
"This function always succeeds."
msgstr ""
"如果 *ob* 为 :c:data:`PyDateTime_DateTimeType` 类型或 "
":c:data:`!PyDateTime_DateTimeType` 的某个子类型则返回真值。 *ob* 不能为 ``NULL``。 "
"此函数总是会成功执行。"

#: ../../c-api/datetime.rst:93
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""
"如果 *ob* 为 :c:data:`PyDateTime_DateTimeType` 类型则返回真值。 *ob* 不能为 ``NULL``。 "
"此函数总是会成功执行。"

#: ../../c-api/datetime.rst:99
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType` or a subtype of"
" :c:data:`!PyDateTime_TimeType`.  *ob* must not be ``NULL``.  This function "
"always succeeds."
msgstr ""
"如果 *ob* 为 :c:data:`PyDateTime_TimeType` 类型或 :c:data:`!PyDateTime_TimeType` "
"的某个子类型则返回真值。 *ob* 不能为 ``NULL``。 此函数总是会成功执行。"

#: ../../c-api/datetime.rst:106
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType`. *ob* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""
"如果 *ob* 为 :c:data:`PyDateTime_TimeType` 类型则返回真值。 *ob* 不能为 ``NULL``。 "
"此函数总是会成功执行。"

#: ../../c-api/datetime.rst:112
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType` or a subtype "
"of :c:data:`!PyDateTime_DeltaType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""
"如果 *ob* 为 :c:data:`PyDateTime_DeltaType` 类型或 :c:data:`!PyDateTime_DeltaType`"
" 的某个子类型则返回真值。 *ob* 不能为 ``NULL``。  此函数总是会成功执行。"

#: ../../c-api/datetime.rst:119
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType`. *ob* must not"
" be ``NULL``.  This function always succeeds."
msgstr ""
"如果 *ob* 为 :c:data:`PyDateTime_DeltaType` 类型则返回真值。 *ob* 不能为 ``NULL``。 "
"此函数总是会成功执行。"

#: ../../c-api/datetime.rst:125
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType` or a subtype "
"of :c:data:`!PyDateTime_TZInfoType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""
"如果 *ob* 为 :c:data:`PyDateTime_TZInfoType` 类型或 "
":c:data:`!PyDateTime_TZInfoType` 的某个子类型则返回真值。 *ob* 不能为 ``NULL``。  "
"此函数总是会成功执行。"

#: ../../c-api/datetime.rst:132
msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""
"如果 *ob* 为 :c:data:`PyDateTime_TZInfoType` 类型则返回真值。 *ob* 不能为 ``NULL``。 "
"此函数总是会成功执行。"

#: ../../c-api/datetime.rst:136
msgid "Macros to create objects:"
msgstr "用于创建对象的宏："

#: ../../c-api/datetime.rst:140
msgid ""
"Return a :class:`datetime.date` object with the specified year, month and "
"day."
msgstr "返回指定年、月、日的 :class:`datetime.date` 对象。"

#: ../../c-api/datetime.rst:145
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, month, "
"day, hour, minute, second and microsecond."
msgstr ""
"返回具有指定 year, month, day, hour, minute, second 和 microsecond 属性的 "
":class:`datetime.datetime` 对象。"

#: ../../c-api/datetime.rst:151
msgid ""
"Return a :class:`datetime.datetime` object with the specified year, month, "
"day, hour, minute, second, microsecond and fold."
msgstr ""
"返回具有指定 year, month, day, hour, minute, second, microsecond 和 fold 属性的 "
":class:`datetime.datetime` 对象。"

#: ../../c-api/datetime.rst:159
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second and microsecond."
msgstr ""
"返回具有指定 hour, minute, second and microsecond 属性的 :class:`datetime.time` 对象。"

#: ../../c-api/datetime.rst:165
msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second, microsecond and fold."
msgstr ""
"返回具有指定 hour, minute, second, microsecond 和 fold 属性的 :class:`datetime.time` "
"对象。"

#: ../../c-api/datetime.rst:173
msgid ""
"Return a :class:`datetime.timedelta` object representing the given number of"
" days, seconds and microseconds.  Normalization is performed so that the "
"resulting number of microseconds and seconds lie in the ranges documented "
"for :class:`datetime.timedelta` objects."
msgstr ""
"返回代表给定天、秒和微秒数的 :class:`datetime.timedelta` 对象。 将执行正规化操作以使最终的微秒和秒数处在 "
":class:`datetime.timedelta` 对象的文档指明的区间之内。"

#: ../../c-api/datetime.rst:181
msgid ""
"Return a :class:`datetime.timezone` object with an unnamed fixed offset "
"represented by the *offset* argument."
msgstr "返回一个 :class:`datetime.timezone` 对象，该对象具有以 *offset* 参数表示 的未命名固定时差。"

#: ../../c-api/datetime.rst:189
msgid ""
"Return a :class:`datetime.timezone` object with a fixed offset represented "
"by the *offset* argument and with tzname *name*."
msgstr ""
"返回一个 :class:`datetime.timezone` 对象，该对象具有以 *offset* 参数表示的固定时差和时区名称 *name*。"

#: ../../c-api/datetime.rst:195
msgid ""
"Macros to extract fields from date objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Date`, including subclasses (such as "
":c:type:`PyDateTime_DateTime`).  The argument must not be ``NULL``, and the "
"type is not checked:"
msgstr ""
"一些用来从日期对象中提取字段的宏。 参数必须是 :c:type:`PyDateTime_Date` 包括其子类 (如 "
":c:type:`PyDateTime_DateTime`) 的实例。 参数不能为 ``NULL``，且不会检查类型:"

#: ../../c-api/datetime.rst:202
msgid "Return the year, as a positive int."
msgstr "以正整数的形式返回年份值。"

#: ../../c-api/datetime.rst:207
msgid "Return the month, as an int from 1 through 12."
msgstr "返回月，从0到12的整数。"

#: ../../c-api/datetime.rst:212
msgid "Return the day, as an int from 1 through 31."
msgstr "返回日期，从0到31的整数。"

#: ../../c-api/datetime.rst:215
msgid ""
"Macros to extract fields from datetime objects.  The argument must be an "
"instance of :c:type:`PyDateTime_DateTime`, including subclasses. The "
"argument must not be ``NULL``, and the type is not checked:"
msgstr ""
"一些用来从日期时间对象中提取字段的宏。 参数必须是 :c:type:`PyDateTime_DateTime` 包括其子类的实例。 参数不能为 "
"``NULL``，并且不会检查类型:"

#: ../../c-api/datetime.rst:221 ../../c-api/datetime.rst:259
msgid "Return the hour, as an int from 0 through 23."
msgstr "返回小时，从0到23的整数。"

#: ../../c-api/datetime.rst:226 ../../c-api/datetime.rst:264
msgid "Return the minute, as an int from 0 through 59."
msgstr "返回分钟，从0到59的整数。"

#: ../../c-api/datetime.rst:231 ../../c-api/datetime.rst:269
msgid "Return the second, as an int from 0 through 59."
msgstr "返回秒，从0到59的整数。"

#: ../../c-api/datetime.rst:236 ../../c-api/datetime.rst:274
msgid "Return the microsecond, as an int from 0 through 999999."
msgstr "返回微秒，从0到999999的整数。"

#: ../../c-api/datetime.rst:241 ../../c-api/datetime.rst:279
msgid "Return the fold, as an int from 0 through 1."
msgstr "返回折叠值，为整数 0 或 1。"

#: ../../c-api/datetime.rst:248 ../../c-api/datetime.rst:286
msgid "Return the tzinfo (which may be ``None``)."
msgstr "返回 tzinfo (可以为 ``None``)。"

#: ../../c-api/datetime.rst:253
msgid ""
"Macros to extract fields from time objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Time`, including subclasses. The argument "
"must not be ``NULL``, and the type is not checked:"
msgstr ""
"一些用来从时间对象中提取字段的宏。 参数必须是 :c:type:`PyDateTime_Time` 包括其子类的实例。 参数不能为 "
"``NULL``，且不会检查类型:"

#: ../../c-api/datetime.rst:291
msgid ""
"Macros to extract fields from time delta objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Delta`, including subclasses. The argument "
"must not be ``NULL``, and the type is not checked:"
msgstr ""
"一些用来从时间差对象中提取字段的宏。 参数必须是 :c:type:`PyDateTime_Delta` 包括其子类的实例。参数不能为 "
"``NULL``，并且不会检查类型:"

#: ../../c-api/datetime.rst:297
msgid "Return the number of days, as an int from -999999999 to 999999999."
msgstr "返回天数，从-999999999到999999999的整数。"

#: ../../c-api/datetime.rst:304
msgid "Return the number of seconds, as an int from 0 through 86399."
msgstr "返回秒数，从0到86399的整数。"

#: ../../c-api/datetime.rst:311
msgid "Return the number of microseconds, as an int from 0 through 999999."
msgstr "返回微秒数，从0到999999的整数。"

#: ../../c-api/datetime.rst:316
msgid "Macros for the convenience of modules implementing the DB API:"
msgstr "一些便于模块实现 DB API 的宏:"

#: ../../c-api/datetime.rst:320
msgid ""
"Create and return a new :class:`datetime.datetime` object given an argument "
"tuple suitable for passing to :meth:`datetime.datetime.fromtimestamp()`."
msgstr ""
"创建并返回一个给定元组参数的新 :class:`datetime.datetime` 对象，适合传给 "
":meth:`datetime.datetime.fromtimestamp()`。"

#: ../../c-api/datetime.rst:326
msgid ""
"Create and return a new :class:`datetime.date` object given an argument "
"tuple suitable for passing to :meth:`datetime.date.fromtimestamp()`."
msgstr ""
"创建并返回一个给定元组参数的新 :class:`datetime.date` 对象，适合传给 "
":meth:`datetime.date.fromtimestamp()`。"
