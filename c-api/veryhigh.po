# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:04+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/veryhigh.rst:8
msgid "The Very High Level Layer"
msgstr ""

#: ../../c-api/veryhigh.rst:10
msgid ""
"The functions in this chapter will let you execute Python source code given "
"in a file or a buffer, but they will not let you interact in a more detailed"
" way with the interpreter."
msgstr ""

#: ../../c-api/veryhigh.rst:14
msgid ""
"Several of these functions accept a start symbol from the grammar as a "
"parameter.  The available start symbols are :c:data:`Py_eval_input`, "
":c:data:`Py_file_input`, and :c:data:`Py_single_input`.  These are described"
" following the functions which accept them as parameters."
msgstr ""

#: ../../c-api/veryhigh.rst:19
msgid ""
"Note also that several of these functions take :c:expr:`FILE*` parameters.  "
"One particular issue which needs to be handled carefully is that the "
":c:type:`FILE` structure for different C libraries can be different and "
"incompatible.  Under Windows (at least), it is possible for dynamically "
"linked extensions to actually use different libraries, so care should be "
"taken that :c:expr:`FILE*` parameters are only passed to these functions if "
"it is certain that they were created by the same library that the Python "
"runtime is using."
msgstr ""

#: ../../c-api/veryhigh.rst:30
msgid ""
"The main program for the standard interpreter.  This is made available for "
"programs which embed Python.  The *argc* and *argv* parameters should be "
"prepared exactly as those which are passed to a C program's :c:func:`main` "
"function (converted to wchar_t according to the user's locale).  It is "
"important to note that the argument list may be modified (but the contents "
"of the strings pointed to by the argument list are not). The return value "
"will be ``0`` if the interpreter exits normally (i.e., without an "
"exception), ``1`` if the interpreter exits due to an exception, or ``2`` if "
"the parameter list does not represent a valid Python command line."
msgstr ""

#: ../../c-api/veryhigh.rst:40
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""

#: ../../c-api/veryhigh.rst:47
msgid "Similar to :c:func:`Py_Main` but *argv* is an array of bytes strings."
msgstr ""

#: ../../c-api/veryhigh.rst:54
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:60
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *closeit* argument set to ``0``."
msgstr ""

#: ../../c-api/veryhigh.rst:66
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *flags* argument set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:72
msgid ""
"If *fp* refers to a file associated with an interactive device (console or "
"terminal input or Unix pseudo-terminal), return the value of "
":c:func:`PyRun_InteractiveLoop`, otherwise return the result of "
":c:func:`PyRun_SimpleFile`.  *filename* is decoded from the filesystem "
"encoding (:func:`sys.getfilesystemencoding`).  If *filename* is ``NULL``, "
"this function uses ``\"???\"`` as the filename. If *closeit* is true, the "
"file is closed before ``PyRun_SimpleFileExFlags()`` returns."
msgstr ""

#: ../../c-api/veryhigh.rst:84
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleStringFlags` below, "
"leaving the :c:struct:`PyCompilerFlags`\\* argument set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:90
msgid ""
"Executes the Python source code from *command* in the :mod:`__main__` module"
" according to the *flags* argument. If :mod:`__main__` does not already "
"exist, it is created.  Returns ``0`` on success or ``-1`` if an exception "
"was raised.  If there was an error, there is no way to get the exception "
"information. For the meaning of *flags*, see below."
msgstr ""

#: ../../c-api/veryhigh.rst:96
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``-1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""

#: ../../c-api/veryhigh.rst:103
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:109
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:115
msgid ""
"Similar to :c:func:`PyRun_SimpleStringFlags`, but the Python source code is "
"read from *fp* instead of an in-memory string. *filename* should be the name"
" of the file, it is decoded from :term:`filesystem encoding and error "
"handler`. If *closeit* is true, the file is closed before "
"``PyRun_SimpleFileExFlags()`` returns."
msgstr ""

#: ../../c-api/veryhigh.rst:122
msgid ""
"On Windows, *fp* should be opened as binary mode (e.g. ``fopen(filename, "
"\"rb\")``). Otherwise, Python may not handle script file with LF line ending"
" correctly."
msgstr ""

#: ../../c-api/veryhigh.rst:128
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveOneFlags` below,"
" leaving *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:134
msgid ""
"Read and execute a single statement from a file associated with an "
"interactive device according to the *flags* argument.  The user will be "
"prompted using ``sys.ps1`` and ``sys.ps2``.  *filename* is decoded from the "
":term:`filesystem encoding and error handler`."
msgstr ""

#: ../../c-api/veryhigh.rst:139
msgid ""
"Returns ``0`` when the input was executed successfully, ``-1`` if there was "
"an exception, or an error code from the :file:`errcode.h` include file "
"distributed as part of Python if there was a parse error.  (Note that "
":file:`errcode.h` is not included by :file:`Python.h`, so must be included "
"specifically if needed.)"
msgstr ""

#: ../../c-api/veryhigh.rst:148
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveLoopFlags` "
"below, leaving *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:154
msgid ""
"Read and execute statements from a file associated with an interactive "
"device until EOF is reached.  The user will be prompted using ``sys.ps1`` "
"and ``sys.ps2``.  *filename* is decoded from the :term:`filesystem encoding "
"and error handler`.  Returns ``0`` at EOF or a negative number upon failure."
msgstr ""

#: ../../c-api/veryhigh.rst:162
msgid ""
"Can be set to point to a function with the prototype ``int func(void)``.  "
"The function will be called when Python's interpreter prompt is about to "
"become idle and wait for user input from the terminal.  The return value is "
"ignored.  Overriding this hook can be used to integrate the interpreter's "
"prompt with other event loops, as done in the :file:`Modules/_tkinter.c` in "
"the Python source code."
msgstr ""

#: ../../c-api/veryhigh.rst:173
msgid ""
"Can be set to point to a function with the prototype ``char *func(FILE "
"*stdin, FILE *stdout, char *prompt)``, overriding the default function used "
"to read a single line of input at the interpreter's prompt.  The function is"
" expected to output the string *prompt* if it's not ``NULL``, and then read "
"a line of input from the provided standard input file, returning the "
"resulting string.  For example, The :mod:`readline` module sets this hook to"
" provide line-editing and tab-completion features."
msgstr ""

#: ../../c-api/veryhigh.rst:182
msgid ""
"The result must be a string allocated by :c:func:`PyMem_RawMalloc` or "
":c:func:`PyMem_RawRealloc`, or ``NULL`` if an error occurred."
msgstr ""

#: ../../c-api/veryhigh.rst:185
msgid ""
"The result must be allocated by :c:func:`PyMem_RawMalloc` or "
":c:func:`PyMem_RawRealloc`, instead of being allocated by "
":c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc`."
msgstr ""

#: ../../c-api/veryhigh.rst:192
msgid ""
"This is a simplified interface to :c:func:`PyRun_StringFlags` below, leaving"
" *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:198
msgid ""
"Execute Python source code from *str* in the context specified by the "
"objects *globals* and *locals* with the compiler flags specified by *flags*."
"  *globals* must be a dictionary; *locals* can be any object that implements"
" the mapping protocol.  The parameter *start* specifies the start token that"
" should be used to parse the source code."
msgstr ""

#: ../../c-api/veryhigh.rst:204
msgid ""
"Returns the result of executing the code as a Python object, or ``NULL`` if "
"an exception was raised."
msgstr ""

#: ../../c-api/veryhigh.rst:210
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving"
" *closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:216
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving"
" *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:222
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving"
" *closeit* set to ``0``."
msgstr ""

#: ../../c-api/veryhigh.rst:228
msgid ""
"Similar to :c:func:`PyRun_StringFlags`, but the Python source code is read "
"from *fp* instead of an in-memory string. *filename* should be the name of "
"the file, it is decoded from the :term:`filesystem encoding and error "
"handler`. If *closeit* is true, the file is closed before "
":c:func:`PyRun_FileExFlags` returns."
msgstr ""

#: ../../c-api/veryhigh.rst:237
msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:243
msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringExFlags` below, "
"with *optimize* set to ``-1``."
msgstr ""

#: ../../c-api/veryhigh.rst:249
msgid ""
"Parse and compile the Python source code in *str*, returning the resulting "
"code object.  The start token is given by *start*; this can be used to "
"constrain the code which can be compiled and should be "
":c:data:`Py_eval_input`, :c:data:`Py_file_input`, or "
":c:data:`Py_single_input`.  The filename specified by *filename* is used to "
"construct the code object and may appear in tracebacks or :exc:`SyntaxError`"
" exception messages.  This returns ``NULL`` if the code cannot be parsed or "
"compiled."
msgstr ""

#: ../../c-api/veryhigh.rst:257
msgid ""
"The integer *optimize* specifies the optimization level of the compiler; a "
"value of ``-1`` selects the optimization level of the interpreter as given "
"by :option:`-O` options.  Explicit levels are ``0`` (no optimization; "
"``__debug__`` is true), ``1`` (asserts are removed, ``__debug__`` is false) "
"or ``2`` (docstrings are removed too)."
msgstr ""

#: ../../c-api/veryhigh.rst:268
msgid ""
"Like :c:func:`Py_CompileStringObject`, but *filename* is a byte string "
"decoded from the :term:`filesystem encoding and error handler`."
msgstr ""

#: ../../c-api/veryhigh.rst:275
msgid ""
"This is a simplified interface to :c:func:`PyEval_EvalCodeEx`, with just the"
" code object, and global and local variables.  The other arguments are set "
"to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:282
msgid ""
"Evaluate a precompiled code object, given a particular environment for its "
"evaluation.  This environment consists of a dictionary of global variables, "
"a mapping object of local variables, arrays of arguments, keywords and "
"defaults, a dictionary of default values for :ref:`keyword-only <keyword-"
"only_parameter>` arguments and a closure tuple of cells."
msgstr ""

#: ../../c-api/veryhigh.rst:291
msgid ""
"Evaluate an execution frame.  This is a simplified interface to "
":c:func:`PyEval_EvalFrameEx`, for backward compatibility."
msgstr ""

#: ../../c-api/veryhigh.rst:297
msgid ""
"This is the main, unvarnished function of Python interpretation.  The code "
"object associated with the execution frame *f* is executed, interpreting "
"bytecode and executing calls as needed.  The additional *throwflag* "
"parameter can mostly be ignored - if true, then it causes an exception to "
"immediately be thrown; this is used for the :meth:`~generator.throw` methods"
" of generator objects."
msgstr ""

#: ../../c-api/veryhigh.rst:304
msgid ""
"This function now includes a debug assertion to help ensure that it does not"
" silently discard an active exception."
msgstr ""

#: ../../c-api/veryhigh.rst:311
msgid ""
"This function changes the flags of the current evaluation frame, and returns"
" true on success, false on failure."
msgstr ""

#: ../../c-api/veryhigh.rst:319
msgid ""
"The start symbol from the Python grammar for isolated expressions; for use "
"with :c:func:`Py_CompileString`."
msgstr ""

#: ../../c-api/veryhigh.rst:327
msgid ""
"The start symbol from the Python grammar for sequences of statements as read"
" from a file or other source; for use with :c:func:`Py_CompileString`.  This"
" is the symbol to use when compiling arbitrarily long Python source code."
msgstr ""

#: ../../c-api/veryhigh.rst:336
msgid ""
"The start symbol from the Python grammar for a single statement; for use "
"with :c:func:`Py_CompileString`. This is the symbol used for the interactive"
" interpreter loop."
msgstr ""

#: ../../c-api/veryhigh.rst:343
msgid ""
"This is the structure used to hold compiler flags.  In cases where code is "
"only being compiled, it is passed as ``int flags``, and in cases where code "
"is being executed, it is passed as ``PyCompilerFlags *flags``.  In this "
"case, ``from __future__ import`` can modify *flags*."
msgstr ""

#: ../../c-api/veryhigh.rst:348
msgid ""
"Whenever ``PyCompilerFlags *flags`` is ``NULL``, "
":c:member:`~PyCompilerFlags.cf_flags` is treated as equal to ``0``, and any "
"modification due to ``from __future__ import`` is discarded."
msgstr ""

#: ../../c-api/veryhigh.rst:354
msgid "Compiler flags."
msgstr ""

#: ../../c-api/veryhigh.rst:358
msgid ""
"*cf_feature_version* is the minor Python version. It should be initialized "
"to ``PY_MINOR_VERSION``."
msgstr ""

#: ../../c-api/veryhigh.rst:361
msgid ""
"The field is ignored by default, it is used if and only if ``PyCF_ONLY_AST``"
" flag is set in :c:member:`~PyCompilerFlags.cf_flags`."
msgstr ""

#: ../../c-api/veryhigh.rst:364
msgid "Added *cf_feature_version* field."
msgstr ""

#: ../../c-api/veryhigh.rst:370
msgid ""
"This bit can be set in *flags* to cause division operator ``/`` to be "
"interpreted as \"true division\" according to :pep:`238`."
msgstr ""

#: ../../c-api/veryhigh.rst:317 ../../c-api/veryhigh.rst:325
#: ../../c-api/veryhigh.rst:334
msgid "Py_CompileString (C function)"
msgstr ""
