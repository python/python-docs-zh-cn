# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../install/index.rst:7
msgid "Installing Python Modules (Legacy version)"
msgstr "安装Python模块（旧版）"

#: ../../install/index.rst:0
msgid "Author"
msgstr "作者"

#: ../../install/index.rst:9
msgid "Greg Ward"
msgstr "Greg Ward"

#: ../../install/index.rst:15
msgid ""
"The entire ``distutils`` package has been deprecated and will be removed in "
"Python 3.12. This documentation is retained as a reference only, and will be"
" removed with the package. See the :ref:`What's New <distutils-deprecated>` "
"entry for more information."
msgstr ""
"整个 ``distutils`` 包已被弃用并将在 Python 3.12 中被移除。 此文档仅保留作参考，并将随包一起被移除。 更多信息请参阅 "
":ref:`有什么新变化 <distutils-deprecated>` 条目。"

#: ../../install/index.rst:23
msgid ":ref:`installing-index`"
msgstr ":ref:`installing-index`"

#: ../../install/index.rst:23
msgid ""
"The up to date module installation documentation. For regular Python usage, "
"you almost certainly want that document rather than this one."
msgstr "最新的模块安装文档。对于常规Python使用，你几乎肯定像使用该文档而非这个。"

#: ../../distutils/_setuptools_disclaimer.rst:3
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html"
" independently covers all of the relevant information currently included "
"here."
msgstr ""
"这篇文档是历史遗留文档，在 https://setuptools.readthedocs.io/en/latest/setuptools.html 上的"
" ``setuptools`` 文档独立涵盖此处包含的所有相关信息之后，将不再单独作为正式文档保留。"

#: ../../install/index.rst:30
msgid ""
"This guide only covers the basic tools for building and distributing "
"extensions that are provided as part of this version of Python. Third party "
"tools offer easier to use and more secure alternatives. Refer to the `quick "
"recommendations section <https://packaging.python.org/guides/tool-"
"recommendations/>`__ in the Python Packaging User Guide for more "
"information."
msgstr ""
"本指南仅介绍构建和分发扩展的基本工具，这些扩展是作为此Python版本的一部分提供的。 第三方工具提供更易于使用和更安全的替代方案。有关详细信息，请参阅"
" Python 打包用户指南中的 `快速推荐部分 <https://packaging.python.org/guides/tool-"
"recommendations/>`__ 。"

#: ../../install/index.rst:41
msgid "Introduction"
msgstr "概述"

#: ../../install/index.rst:43
msgid ""
"In Python 2.0, the ``distutils`` API was first added to the standard "
"library. This provided Linux distro maintainers with a standard way of "
"converting Python projects into Linux distro packages, and system "
"administrators with a standard way of installing them directly onto target "
"systems."
msgstr ""
"在Python 2.0中，``distutils`` API "
"首次被添加到标准库中。这向Linux发行版维护者提供了一个将Python项目转换为发行版软件包的标准方法，以及向系统管理员们提供了直接将这些软件包安装到目标系统的标准方法。"

#: ../../install/index.rst:48
msgid ""
"In the many years since Python 2.0 was released, tightly coupling the build "
"system and package installer to the language runtime release cycle has "
"turned out to be problematic, and it is now recommended that projects use "
"the ``pip`` package installer and the ``setuptools`` build system, rather "
"than using ``distutils`` directly."
msgstr ""
"自从很多年前 Python 2.0 发布，将构建系统和包安装器与语言运行时的释放循环紧密连接在一起产生了很多问题。现在推荐做法是在项目中使用 "
"``pip`` 包安装器和 ``setuptools`` 构建系统，而不是直接使用 ``distutils``。"

#: ../../install/index.rst:54
msgid ""
"See :ref:`installing-index` and :ref:`distributing-index` for more details."
msgstr "请参阅 :ref:`installing-index` 和 :ref:`distributing-index` 了解更多细节。"

#: ../../install/index.rst:56
msgid ""
"This legacy documentation is being retained only until we're confident that "
"the ``setuptools`` documentation covers everything needed."
msgstr "这个旧文档将被保留，至到我们相信 ``setuptools`` 覆盖了所有内容。"

#: ../../install/index.rst:62
msgid "Distutils based source distributions"
msgstr "基于 ``distutils`` 的源代码分发"

#: ../../install/index.rst:64
msgid ""
"If you download a module source distribution, you can tell pretty quickly if"
" it was packaged and distributed in the standard way, i.e. using the "
"Distutils. First, the distribution's name and version number will be "
"featured prominently in the name of the downloaded archive, e.g. "
":file:`foo-1.0.tar.gz` or :file:`widget-0.9.7.zip`.  Next, the archive will "
"unpack into a similarly named directory: :file:`foo-1.0` or "
":file:`widget-0.9.7`.  Additionally, the distribution will contain a setup "
"script :file:`setup.py`, and a file named :file:`README.txt` or possibly "
"just :file:`README`, which should explain that building and installing the "
"module distribution is a simple matter of running one command from a "
"terminal::"
msgstr ""
"如果你下载了一个模块源代码发布包，你可以很快地确定它是否按标准方式，即使用 Distutils 进行打包和分发。 "
"首先，发布包的名称和版本号将在已下载归档文件的名称中明确显示，例如 :file:`foo-1.0.tar.gz` 或 "
":file:`widget-0.9.7.zip`。 然后，归档文件将被解包为类似名称的目录: :file:`foo-1.0` 或 "
":file:`widget-0.9.7`。 此外，发布包将包含一个安装脚本 :file:`setup.py`，以及一个名为 "
":file:`README.txt` 或是 :file:`README` 的文件，它应当写明构建和安装模块发布包的方式是简单地在终端中运行一条命令::"

#: ../../install/index.rst:77
msgid ""
"For Windows, this command should be run from a command prompt window "
"(:menuselection:`Start --> Accessories`)::"
msgstr "Windows 用户应该使用命令提示符来运行命令(:menuselection:`Start --> Accessories`)::"

#: ../../install/index.rst:82
msgid ""
"If all these things are true, then you already know how to build and install"
" the modules you've just downloaded:  Run the command above. Unless you need"
" to install things in a non-standard way or customize the build process, you"
" don't really need this manual.  Or rather, the above command is everything "
"you need to get out of this manual."
msgstr ""
"如果这些事情都属实，那么您已经了解了如何构建和安装您已经下载的模块：只需运行如上的命令。除非您需要以非常规方式安装或者定制构建过程，您其实不需要本文档。更进一步说，以上命令就是您可以从文档中获得的全部。"

#: ../../install/index.rst:92
msgid "Standard Build and Install"
msgstr "标准构建及安装"

#: ../../install/index.rst:94
msgid ""
"As described in section :ref:`inst-new-standard`, building and installing a "
"module distribution using the Distutils is usually one simple command to run"
" from a terminal::"
msgstr ""
"正如 :ref:`inst-new-standard` 中所描述的那样，通过 Distutils "
"构建和安装发行的模块常常只需要在终端执行一个简单的命令。"

#: ../../install/index.rst:104
msgid "Platform variations"
msgstr "平台差异"

#: ../../install/index.rst:106
msgid ""
"You should always run the setup command from the distribution root "
"directory, i.e. the top-level subdirectory that the module source "
"distribution unpacks into.  For example, if you've just downloaded a module "
"source distribution :file:`foo-1.0.tar.gz` onto a Unix system, the normal "
"thing to do is::"
msgstr ""
"您应当总是在分发文件的根目录处运行设置的命令，比如，模块分发的源代码最高的子目录。例如，如果您刚刚在 Unix "
"操作系统上下载了一个模块分发的源代码，您需要做的事："

#: ../../install/index.rst:115
msgid ""
"On Windows, you'd probably download :file:`foo-1.0.zip`.  If you downloaded "
"the archive file to :file:`C:\\\\Temp`, then it would unpack into "
":file:`C:\\\\Temp\\\\foo-1.0`; you can use either an archive manipulator "
"with a graphical user interface (such as WinZip) or a command-line tool "
"(such as :program:`unzip` or :program:`pkunzip`) to unpack the archive.  "
"Then, open a command prompt window and run::"
msgstr ""
"在 Windows 上，你下载到的可能是 :file:`foo-1.0.zip`。 如果你将归档文件下载到 "
":file:`C:\\\\Temp`，则它将被解包至 "
":file:`C:\\\\Temp\\\\foo-1.0`；你可以使用带有图形用户界面的归档管理器（如 WinZip）或命令行工具（如 "
":program:`unzip` 或 :program:`pkunzip` 等）来解包归档文件。 然后，打开一个命令行提示符窗口并运行::"

#: ../../install/index.rst:129
msgid "Splitting the job up"
msgstr "拆分任务"

#: ../../install/index.rst:131
msgid ""
"Running ``setup.py install`` builds and installs all modules in one run.  If"
" you prefer to work incrementally---especially useful if you want to "
"customize the build process, or if things are going wrong---you can use the "
"setup script to do one thing at a time.  This is particularly helpful when "
"the build and install will be done by different users---for example, you "
"might want to build a module distribution and hand it off to a system "
"administrator for installation (or do it yourself, with super-user "
"privileges)."
msgstr ""

#: ../../install/index.rst:139
msgid ""
"For example, you can build everything in one step, and then install "
"everything in a second step, by invoking the setup script twice::"
msgstr ""

#: ../../install/index.rst:145
msgid ""
"If you do this, you will notice that running the :command:`install` command "
"first runs the :command:`build` command, which---in this case---quickly "
"notices that it has nothing to do, since everything in the :file:`build` "
"directory is up-to-date."
msgstr ""

#: ../../install/index.rst:150
msgid ""
"You may not need this ability to break things down often if all you do is "
"install modules downloaded off the 'net, but it's very handy for more "
"advanced tasks.  If you get into distributing your own Python modules and "
"extensions, you'll run lots of individual Distutils commands on their own."
msgstr ""

#: ../../install/index.rst:159
msgid "How building works"
msgstr ""

#: ../../install/index.rst:161
msgid ""
"As implied above, the :command:`build` command is responsible for putting "
"the files to install into a *build directory*.  By default, this is "
":file:`build` under the distribution root; if you're excessively concerned "
"with speed, or want to keep the source tree pristine, you can change the "
"build directory with the :option:`!--build-base` option. For example::"
msgstr ""

#: ../../install/index.rst:169
msgid ""
"(Or you could do this permanently with a directive in your system or "
"personal Distutils configuration file; see section :ref:`inst-config-"
"files`.)  Normally, this isn't necessary."
msgstr ""

#: ../../install/index.rst:173
msgid "The default layout for the build tree is as follows::"
msgstr ""

#: ../../install/index.rst:180
msgid ""
"where ``<plat>`` expands to a brief description of the current OS/hardware "
"platform and Python version.  The first form, with just a :file:`lib` "
"directory, is used for \"pure module distributions\"---that is, module "
"distributions that include only pure Python modules.  If a module "
"distribution contains any extensions (modules written in C/C++), then the "
"second form, with two ``<plat>`` directories, is used.  In that case, the "
":file:`temp.{plat}` directory holds temporary files generated by the "
"compile/link process that don't actually get installed.  In either case, the"
" :file:`lib` (or :file:`lib.{plat}`) directory contains all Python modules "
"(pure Python and extensions) that will be installed."
msgstr ""

#: ../../install/index.rst:190
msgid ""
"In the future, more directories will be added to handle Python scripts, "
"documentation, binary executables, and whatever else is needed to handle the"
" job of installing Python modules and applications."
msgstr ""

#: ../../install/index.rst:198
msgid "How installation works"
msgstr ""

#: ../../install/index.rst:200
msgid ""
"After the :command:`build` command runs (whether you run it explicitly, or "
"the :command:`install` command does it for you), the work of the "
":command:`install` command is relatively simple: all it has to do is copy "
"everything under :file:`build/lib` (or :file:`build/lib.{plat}`) to your "
"chosen installation directory."
msgstr ""

#: ../../install/index.rst:206
msgid ""
"If you don't choose an installation directory---i.e., if you just run "
"``setup.py install``\\ ---then the :command:`install` command installs to "
"the standard location for third-party Python modules.  This location varies "
"by platform and by how you built/installed Python itself.  On Unix (and "
"macOS, which is also Unix-based), it also depends on whether the module "
"distribution being installed is pure Python or contains extensions (\"non-"
"pure\"):"
msgstr ""

#: ../../install/index.rst:216
msgid "Platform"
msgstr "平台"

#: ../../install/index.rst:216
msgid "Standard installation location"
msgstr "标准安装位置"

#: ../../install/index.rst:216
msgid "Default value"
msgstr "默认值"

#: ../../install/index.rst:216 ../../install/index.rst:742
#: ../../install/index.rst:754
msgid "Notes"
msgstr "备注"

#: ../../install/index.rst:218
msgid "Unix (pure)"
msgstr "（单一）Unix"

#: ../../install/index.rst:218 ../../install/index.rst:431
msgid ":file:`{prefix}/lib/python{X.Y}/site-packages`"
msgstr ":file:`{prefix}/lib/python{X.Y}/site-packages`"

#: ../../install/index.rst:218 ../../install/index.rst:220
msgid ":file:`/usr/local/lib/python{X.Y}/site-packages`"
msgstr ":file:`/usr/local/lib/python{X.Y}/site-packages`"

#: ../../install/index.rst:218 ../../install/index.rst:220
#: ../../install/index.rst:744
msgid "\\(1)"
msgstr "\\(1)"

#: ../../install/index.rst:220
msgid "Unix (non-pure)"
msgstr "（类）Unix"

#: ../../install/index.rst:220 ../../install/index.rst:432
msgid ":file:`{exec-prefix}/lib/python{X.Y}/site-packages`"
msgstr ":file:`{exec-prefix}/lib/python{X.Y}/site-packages`"

#: ../../install/index.rst:222
msgid "Windows"
msgstr "Windows"

#: ../../install/index.rst:222 ../../install/index.rst:483
msgid ":file:`{prefix}\\\\Lib\\\\site-packages`"
msgstr ":file:`{prefix}\\\\Lib\\\\site-packages`"

#: ../../install/index.rst:222
msgid ":file:`C:\\\\Python{XY}\\\\Lib\\\\site-packages`"
msgstr ":file:`C:\\\\Python{XY}\\\\Lib\\\\site-packages`"

#: ../../install/index.rst:222 ../../install/index.rst:746
msgid "\\(2)"
msgstr "\\(2)"

#: ../../install/index.rst:225 ../../install/index.rst:766
msgid "Notes:"
msgstr "注释："

#: ../../install/index.rst:228
msgid ""
"Most Linux distributions include Python as a standard part of the system, so"
" :file:`{prefix}` and :file:`{exec-prefix}` are usually both :file:`/usr` on"
" Linux.  If you build Python yourself on Linux (or any Unix-like system), "
"the default :file:`{prefix}` and :file:`{exec-prefix}` are "
":file:`/usr/local`."
msgstr ""

#: ../../install/index.rst:234
msgid ""
"The default installation directory on Windows was :file:`C:\\\\Program "
"Files\\\\Python` under Python 1.6a1, 1.5.2, and earlier."
msgstr ""

#: ../../install/index.rst:237
msgid ""
":file:`{prefix}` and :file:`{exec-prefix}` stand for the directories that "
"Python is installed to, and where it finds its libraries at run-time.  They "
"are always the same under Windows, and very often the same under Unix and "
"macOS.  You can find out what your Python installation uses for "
":file:`{prefix}` and :file:`{exec-prefix}` by running Python in interactive "
"mode and typing a few simple commands. Under Unix, just type ``python`` at "
"the shell prompt.  Under Windows, choose :menuselection:`Start --> Programs "
"--> Python X.Y --> Python (command line)`.   Once the interpreter is "
"started, you type Python code at the prompt.  For example, on my Linux "
"system, I type the three Python statements shown below, and get the output "
"as shown, to find out my :file:`{prefix}` and :file:`{exec-prefix}`:"
msgstr ""

#: ../../install/index.rst:259
msgid ""
"A few other placeholders are used in this document: :file:`{X.Y}` stands for"
" the version of Python, for example ``3.2``; :file:`{abiflags}` will be "
"replaced by the value of :data:`sys.abiflags` or the empty string for "
"platforms which don't define ABI flags; :file:`{distname}` will be replaced "
"by the name of the module distribution being installed.  Dots and "
"capitalization are important in the paths; for example, a value that uses "
"``python3.2`` on UNIX will typically use ``Python32`` on Windows."
msgstr ""

#: ../../install/index.rst:267
msgid ""
"If you don't want to install modules to the standard location, or if you "
"don't have permission to write there, then you need to read about alternate "
"installations in section :ref:`inst-alt-install`.  If you want to customize "
"your installation directories more heavily, see section :ref:`inst-custom-"
"install` on custom installations."
msgstr ""

#: ../../install/index.rst:277
msgid "Alternate Installation"
msgstr "可选安装形式"

#: ../../install/index.rst:279
msgid ""
"Often, it is necessary or desirable to install modules to a location other "
"than the standard location for third-party Python modules.  For example, on "
"a Unix system you might not have permission to write to the standard third-"
"party module directory.  Or you might wish to try out a module before making"
" it a standard part of your local Python installation.  This is especially "
"true when upgrading a distribution already present: you want to make sure "
"your existing base of scripts still works with the new version before "
"actually upgrading."
msgstr ""

#: ../../install/index.rst:287
msgid ""
"The Distutils :command:`install` command is designed to make installing "
"module distributions to an alternate location simple and painless.  The "
"basic idea is that you supply a base directory for the installation, and the"
" :command:`install` command picks a set of directories (called an "
"*installation scheme*) under this base directory in which to install files."
"  The details differ across platforms, so read whichever of the following "
"sections applies to you."
msgstr ""

#: ../../install/index.rst:295
msgid ""
"Note that the various alternate installation schemes are mutually exclusive:"
" you can pass ``--user``, or ``--home``, or ``--prefix`` and ``--exec-"
"prefix``, or ``--install-base`` and ``--install-platbase``, but you can't "
"mix from these groups."
msgstr ""

#: ../../install/index.rst:304
msgid "Alternate installation: the user scheme"
msgstr "可选安装形式：用户方案"

#: ../../install/index.rst:306
msgid ""
"This scheme is designed to be the most convenient solution for users that "
"don't have write permission to the global site-packages directory or don't "
"want to install into it.  It is enabled with a simple option::"
msgstr ""
"此方案被设计为针对没有全局 site-packages 目录写入权限或不想安装到该目录的用户的最便捷解决方案。 它可以通过一个简单的选项来启用::"

#: ../../install/index.rst:312
msgid ""
"Files will be installed into subdirectories of :const:`site.USER_BASE` "
"(written as :file:`{userbase}` hereafter).  This scheme installs pure Python"
" modules and extension modules in the same location (also known as "
":const:`site.USER_SITE`). Here are the values for UNIX, including macOS:"
msgstr ""

#: ../../install/index.rst:318 ../../install/index.rst:329
#: ../../install/index.rst:380 ../../install/index.rst:429
#: ../../install/index.rst:481 ../../install/index.rst:506
#: ../../install/index.rst:742 ../../install/index.rst:754
msgid "Type of file"
msgstr "文件类型"

#: ../../install/index.rst:318 ../../install/index.rst:329
#: ../../install/index.rst:380 ../../install/index.rst:429
#: ../../install/index.rst:481
msgid "Installation directory"
msgstr "安装目录"

#: ../../install/index.rst:320 ../../install/index.rst:331
#: ../../install/index.rst:382 ../../install/index.rst:483
msgid "modules"
msgstr "模块"

#: ../../install/index.rst:320
msgid ":file:`{userbase}/lib/python{X.Y}/site-packages`"
msgstr ":file:`{userbase}/lib/python{X.Y}/site-packages`"

#: ../../install/index.rst:321 ../../install/index.rst:332
#: ../../install/index.rst:383 ../../install/index.rst:433
#: ../../install/index.rst:484 ../../install/index.rst:511
msgid "scripts"
msgstr "脚本"

#: ../../install/index.rst:321
msgid ":file:`{userbase}/bin`"
msgstr ":file:`{userbase}/bin`"

#: ../../install/index.rst:322 ../../install/index.rst:333
#: ../../install/index.rst:384 ../../install/index.rst:434
#: ../../install/index.rst:485 ../../install/index.rst:512
msgid "data"
msgstr "数据"

#: ../../install/index.rst:322 ../../install/index.rst:333
msgid ":file:`{userbase}`"
msgstr ":file:`{userbase}`"

#: ../../install/index.rst:323 ../../install/index.rst:334
#: ../../install/index.rst:385 ../../install/index.rst:435
#: ../../install/index.rst:486 ../../install/index.rst:513
msgid "C headers"
msgstr "C 头文件"

#: ../../install/index.rst:323
msgid ":file:`{userbase}/include/python{X.Y}{abiflags}/{distname}`"
msgstr ":file:`{userbase}/include/python{X.Y}{abiflags}/{distname}`"

#: ../../install/index.rst:326
msgid "And here are the values used on Windows:"
msgstr "以下是Windows上使用的值："

#: ../../install/index.rst:331
msgid ":file:`{userbase}\\\\Python{XY}\\\\site-packages`"
msgstr ":file:`{userbase}\\\\Python{XY}\\\\site-packages`"

#: ../../install/index.rst:332
msgid ":file:`{userbase}\\\\Python{XY}\\\\Scripts`"
msgstr ":file:`{userbase}\\\\Python{XY}\\\\Scripts`"

#: ../../install/index.rst:334
msgid ":file:`{userbase}\\\\Python{XY}\\\\Include\\\\{distname}`"
msgstr ":file:`{userbase}\\\\Python{XY}\\\\Include\\\\{distname}`"

#: ../../install/index.rst:337
msgid ""
"The advantage of using this scheme compared to the other ones described "
"below is that the user site-packages directory is under normal conditions "
"always included in :data:`sys.path` (see :mod:`site` for more information), "
"which means that there is no additional step to perform after running the "
":file:`setup.py` script to finalize the installation."
msgstr ""

#: ../../install/index.rst:343
msgid ""
"The :command:`build_ext` command also has a ``--user`` option to add "
":file:`{userbase}/include` to the compiler search path for header files and "
":file:`{userbase}/lib` to the compiler search path for libraries as well as "
"to the runtime search path for shared C libraries (rpath)."
msgstr ""

#: ../../install/index.rst:352
msgid "Alternate installation: the home scheme"
msgstr "可选安装形式：家目录方案"

#: ../../install/index.rst:354
msgid ""
"The idea behind the \"home scheme\" is that you build and maintain a "
"personal stash of Python modules.  This scheme's name is derived from the "
"idea of a \"home\" directory on Unix, since it's not unusual for a Unix user"
" to make their home directory have a layout similar to :file:`/usr/` or "
":file:`/usr/local/`. This scheme can be used by anyone, regardless of the "
"operating system they are installing for."
msgstr ""
"“主方案”背后的理念是你可以构建并维护个人的 Python 模块集。 该方案的名称源自 Unix 上“主目录”的概念，因为通常 Unix "
"用户会将其主目录的布局设置为与 :file:`/usr/` 或 :file:`/usr/local/` 相似。 "
"任何人都可以使用该方案，无论其安装的操作系统是什么。"

#: ../../install/index.rst:361
msgid "Installing a new module distribution is as simple as ::"
msgstr ""

#: ../../install/index.rst:365
msgid ""
"where you can supply any directory you like for the :option:`!--home` "
"option.  On Unix, lazy typists can just type a tilde (``~``); the "
":command:`install` command will expand this to your home directory::"
msgstr ""

#: ../../install/index.rst:371
msgid ""
"To make Python find the distributions installed with this scheme, you may "
"have to :ref:`modify Python's search path <inst-search-path>` or edit "
":mod:`!sitecustomize` (see :mod:`site`) to call :func:`site.addsitedir` or "
"edit :data:`sys.path`."
msgstr ""

#: ../../install/index.rst:376
msgid ""
"The :option:`!--home` option defines the installation base directory.  Files"
" are installed to the following directories under the installation base as "
"follows:"
msgstr ""

#: ../../install/index.rst:382
msgid ":file:`{home}/lib/python`"
msgstr ":file:`{home}/lib/python`"

#: ../../install/index.rst:383
msgid ":file:`{home}/bin`"
msgstr ":file:`{home}/bin`"

#: ../../install/index.rst:384
msgid ":file:`{home}`"
msgstr ":file:`{home}`"

#: ../../install/index.rst:385
msgid ":file:`{home}/include/python/{distname}`"
msgstr ":file:`{home}/include/python/{distname}`"

#: ../../install/index.rst:388
msgid "(Mentally replace slashes with backslashes if you're on Windows.)"
msgstr "（如果你是使用 Windows 请将斜杠替换为反斜杠。）"

#: ../../install/index.rst:394
msgid "Alternate installation: Unix (the prefix scheme)"
msgstr "可选安装形式：Unix（前缀方案）"

#: ../../install/index.rst:396
msgid ""
"The \"prefix scheme\" is useful when you wish to use one Python installation"
" to perform the build/install (i.e., to run the setup script), but install "
"modules into the third-party module directory of a different Python "
"installation (or something that looks like a different Python installation)."
"  If this sounds a trifle unusual, it is---that's why the user and home "
"schemes come before.  However, there are at least two known cases where the "
"prefix scheme will be useful."
msgstr ""
"“前缀方案”适用于当你希望使用一个 Python 安装程序来执行构建/安装（即运行 setup 脚本），但需要将模块安装到另一个 Python "
"安装版（或看起来类似于另一个 Python 安装版）的第三方模块目录中的情况。 如果这听起来有点不寻常，确实如此 --- "
"这就是为什么要先介绍用户和主目录方案的原因。 然而，至少有两种已知的情况会用到前缀方案。"

#: ../../install/index.rst:403
msgid ""
"First, consider that many Linux distributions put Python in :file:`/usr`, "
"rather than the more traditional :file:`/usr/local`.  This is entirely "
"appropriate, since in those cases Python is part of \"the system\" rather "
"than a local add-on. However, if you are installing Python modules from "
"source, you probably want them to go in :file:`/usr/local/lib/python2.{X}` "
"rather than :file:`/usr/lib/python2.{X}`.  This can be done with ::"
msgstr ""

#: ../../install/index.rst:412
msgid ""
"Another possibility is a network filesystem where the name used to write to "
"a remote directory is different from the name used to read it: for example, "
"the Python interpreter accessed as :file:`/usr/local/bin/python` might "
"search for modules in :file:`/usr/local/lib/python2.{X}`, but those modules "
"would have to be installed to, say, "
":file:`/mnt/{@server}/export/lib/python2.{X}`.  This could be done with ::"
msgstr ""

#: ../../install/index.rst:421
msgid ""
"In either case, the :option:`!--prefix` option defines the installation "
"base, and the :option:`!--exec-prefix` option defines the platform-specific "
"installation base, which is used for platform-specific files.  (Currently, "
"this just means non-pure module distributions, but could be expanded to C "
"libraries, binary executables, etc.)  If :option:`!--exec-prefix` is not "
"supplied, it defaults to :option:`!--prefix`.  Files are installed as "
"follows:"
msgstr ""

#: ../../install/index.rst:431 ../../install/index.rst:508
msgid "Python modules"
msgstr "Python 模块"

#: ../../install/index.rst:432 ../../install/index.rst:509
msgid "extension modules"
msgstr "扩展模块"

#: ../../install/index.rst:433
msgid ":file:`{prefix}/bin`"
msgstr ":file:`{prefix}/bin`"

#: ../../install/index.rst:434 ../../install/index.rst:485
msgid ":file:`{prefix}`"
msgstr ":file:`{prefix}`"

#: ../../install/index.rst:435
msgid ":file:`{prefix}/include/python{X.Y}{abiflags}/{distname}`"
msgstr ":file:`{prefix}/include/python{X.Y}{abiflags}/{distname}`"

#: ../../install/index.rst:438
msgid ""
"There is no requirement that :option:`!--prefix` or :option:`!--exec-prefix`"
" actually point to an alternate Python installation; if the directories "
"listed above do not already exist, they are created at installation time."
msgstr ""

#: ../../install/index.rst:442
msgid ""
"Incidentally, the real reason the prefix scheme is important is simply that "
"a standard Unix installation uses the prefix scheme, but with :option:`!--"
"prefix` and :option:`!--exec-prefix` supplied by Python itself as "
"``sys.prefix`` and ``sys.exec_prefix``.  Thus, you might think you'll never "
"use the prefix scheme, but every time you run ``python setup.py install`` "
"without any other options, you're using it."
msgstr ""

#: ../../install/index.rst:449
msgid ""
"Note that installing extensions to an alternate Python installation has no "
"effect on how those extensions are built: in particular, the Python header "
"files (:file:`Python.h` and friends) installed with the Python interpreter "
"used to run the setup script will be used in compiling extensions.  It is "
"your responsibility to ensure that the interpreter used to run extensions "
"installed in this way is compatible with the interpreter used to build them."
"  The best way to do this is to ensure that the two interpreters are the "
"same version of Python (possibly different builds, or possibly copies of the"
" same build).  (Of course, if your :option:`!--prefix` and :option:`!--exec-"
"prefix` don't even point to an alternate Python installation, this is "
"immaterial.)"
msgstr ""

#: ../../install/index.rst:464
msgid "Alternate installation: Windows (the prefix scheme)"
msgstr ""

#: ../../install/index.rst:466
msgid ""
"Windows has no concept of a user's home directory, and since the standard "
"Python installation under Windows is simpler than under Unix, the :option:`!"
"--prefix` option has traditionally been used to install additional packages "
"in separate locations on Windows. ::"
msgstr ""

#: ../../install/index.rst:473
msgid ""
"to install modules to the :file:`\\\\Temp\\\\Python` directory on the "
"current drive."
msgstr ""

#: ../../install/index.rst:475
msgid ""
"The installation base is defined by the :option:`!--prefix` option; the "
":option:`!--exec-prefix` option is not supported under Windows, which means "
"that pure Python modules and extension modules are installed into the same "
"location. Files are installed as follows:"
msgstr ""

#: ../../install/index.rst:484
msgid ":file:`{prefix}\\\\Scripts`"
msgstr ":file:`{prefix}\\\\Scripts`"

#: ../../install/index.rst:486
msgid ":file:`{prefix}\\\\Include\\\\{distname}`"
msgstr ":file:`{prefix}\\\\Include\\\\{distname}`"

#: ../../install/index.rst:493
msgid "Custom Installation"
msgstr "自定义安装"

#: ../../install/index.rst:495
msgid ""
"Sometimes, the alternate installation schemes described in section "
":ref:`inst-alt-install` just don't do what you want.  You might want to "
"tweak just one or two directories while keeping everything under the same "
"base directory, or you might want to completely redefine the installation "
"scheme.  In either case, you're creating a *custom installation scheme*."
msgstr ""

#: ../../install/index.rst:501
msgid ""
"To create a custom installation scheme, you start with one of the alternate "
"schemes and override some of the installation directories used for the "
"various types of files, using these options:"
msgstr ""

#: ../../install/index.rst:506
msgid "Override option"
msgstr "覆盖选项"

#: ../../install/index.rst:508
msgid "``--install-purelib``"
msgstr "``--install-purelib``"

#: ../../install/index.rst:509
msgid "``--install-platlib``"
msgstr "``--install-platlib``"

#: ../../install/index.rst:510
msgid "all modules"
msgstr "所有模块"

#: ../../install/index.rst:510
msgid "``--install-lib``"
msgstr "``--install-lib``"

#: ../../install/index.rst:511
msgid "``--install-scripts``"
msgstr "``--install-scripts``"

#: ../../install/index.rst:512
msgid "``--install-data``"
msgstr "``--install-data``"

#: ../../install/index.rst:513
msgid "``--install-headers``"
msgstr "``--install-headers``"

#: ../../install/index.rst:516
msgid ""
"These override options can be relative, absolute, or explicitly defined in "
"terms of one of the installation base directories. (There are two "
"installation base directories, and they are normally the same---they only "
"differ when you use the Unix \"prefix scheme\" and supply different "
"``--prefix`` and ``--exec-prefix`` options; using ``--install-lib`` will "
"override values computed or given for ``--install-purelib`` and ``--install-"
"platlib``, and is recommended for schemes that don't make a difference "
"between Python and extension modules.)"
msgstr ""

#: ../../install/index.rst:525
msgid ""
"For example, say you're installing a module distribution to your home "
"directory under Unix---but you want scripts to go in :file:`~/scripts` "
"rather than :file:`~/bin`. As you might expect, you can override this "
"directory with the :option:`!--install-scripts` option; in this case, it "
"makes most sense to supply a relative path, which will be interpreted "
"relative to the installation base directory (your home directory, in this "
"case)::"
msgstr ""

#: ../../install/index.rst:534
msgid ""
"Another Unix example: suppose your Python installation was built and "
"installed with a prefix of :file:`/usr/local/python`, so under a standard  "
"installation scripts will wind up in :file:`/usr/local/python/bin`.  If you "
"want them in :file:`/usr/local/bin` instead, you would supply this absolute "
"directory for the :option:`!--install-scripts` option::"
msgstr ""

#: ../../install/index.rst:542
msgid ""
"(This performs an installation using the \"prefix scheme\", where the prefix"
" is whatever your Python interpreter was installed with--- "
":file:`/usr/local/python` in this case.)"
msgstr ""

#: ../../install/index.rst:546
msgid ""
"If you maintain Python on Windows, you might want third-party modules to "
"live in a subdirectory of :file:`{prefix}`, rather than right in "
":file:`{prefix}` itself.  This is almost as easy as customizing the script "
"installation directory---you just have to remember that there are two types "
"of modules to worry about, Python and extension modules, which can "
"conveniently be both controlled by one option::"
msgstr ""

#: ../../install/index.rst:555
msgid ""
"The specified installation directory is relative to :file:`{prefix}`.  Of "
"course, you also have to ensure that this directory is in Python's module "
"search path, such as by putting a :file:`.pth` file in a site directory (see"
" :mod:`site`).  See section :ref:`inst-search-path` to find out how to "
"modify Python's search path."
msgstr ""

#: ../../install/index.rst:561
msgid ""
"If you want to define an entire installation scheme, you just have to supply"
" all of the installation directory options.  The recommended way to do this "
"is to supply relative paths; for example, if you want to maintain all Python"
" module-related files under :file:`python` in your home directory, and you "
"want a separate directory for each platform that you use your home directory"
" from, you might define the following installation scheme::"
msgstr ""

#: ../../install/index.rst:574
msgid "or, equivalently, ::"
msgstr "或者，等价于 ::"

#: ../../install/index.rst:582
msgid ""
"``$PLAT`` is not (necessarily) an environment variable---it will be expanded"
" by the Distutils as it parses your command line options, just as it does "
"when parsing your configuration file(s)."
msgstr ""

#: ../../install/index.rst:586
msgid ""
"Obviously, specifying the entire installation scheme every time you install "
"a new module distribution would be very tedious.  Thus, you can put these "
"options into your Distutils config file (see section :ref:`inst-config-"
"files`):"
msgstr ""

#: ../../install/index.rst:599
msgid "or, equivalently,"
msgstr "或者，等价于，"

#: ../../install/index.rst:610
msgid ""
"Note that these two are *not* equivalent if you supply a different "
"installation base directory when you run the setup script.  For example, ::"
msgstr ""

#: ../../install/index.rst:615
msgid ""
"would install pure modules to :file:`/tmp/python/lib` in the first case, and"
" to :file:`/tmp/lib` in the second case.  (For the second case, you probably"
" want to supply an installation base of :file:`/tmp/python`.)"
msgstr ""

#: ../../install/index.rst:619
msgid ""
"You probably noticed the use of ``$HOME`` and ``$PLAT`` in the sample "
"configuration file input.  These are Distutils configuration variables, "
"which bear a strong resemblance to environment variables. In fact, you can "
"use environment variables in config files on platforms that have such a "
"notion but the Distutils additionally define a few extra variables that may "
"not be in your environment, such as ``$PLAT``.  (And of course, on systems "
"that don't have environment variables, such as Mac OS 9, the configuration "
"variables supplied by the Distutils are the only ones you can use.) See "
"section :ref:`inst-config-files` for details."
msgstr ""

#: ../../install/index.rst:629
msgid ""
"When a :ref:`virtual environment <venv-def>` is activated, any options that "
"change the installation path will be ignored from all distutils "
"configuration files to prevent inadvertently installing projects outside of "
"the virtual environment."
msgstr ""

#: ../../install/index.rst:643
msgid "Modifying Python's Search Path"
msgstr "修改 Python 的搜索路径"

#: ../../install/index.rst:645
msgid ""
"When the Python interpreter executes an :keyword:`import` statement, it "
"searches for both Python code and extension modules along a search path.  A "
"default value for the path is configured into the Python binary when the "
"interpreter is built. You can determine the path by importing the :mod:`sys`"
" module and printing the value of ``sys.path``.   ::"
msgstr ""

#: ../../install/index.rst:662
msgid ""
"The null string in ``sys.path`` represents the current working directory."
msgstr ""

#: ../../install/index.rst:664
msgid ""
"The expected convention for locally installed packages is to put them in the"
" :file:`{...}/site-packages/` directory, but you may want to install Python "
"modules into some arbitrary directory.  For example, your site may have a "
"convention of keeping all software related to the web server under "
":file:`/www`. Add-on Python modules might then belong in "
":file:`/www/python`, and in order to import them, this directory must be "
"added to ``sys.path``.  There are several different ways to add the "
"directory."
msgstr ""

#: ../../install/index.rst:672
msgid ""
"The most convenient way is to add a path configuration file to a directory "
"that's already on Python's path, usually to the :file:`.../site-packages/` "
"directory.  Path configuration files have an extension of :file:`.pth`, and "
"each line must contain a single path that will be appended to ``sys.path``."
"  (Because the new paths are appended to ``sys.path``, modules in the added "
"directories will not override standard modules.  This means you can't use "
"this mechanism for installing fixed versions of standard modules.)"
msgstr ""

#: ../../install/index.rst:680
msgid ""
"Paths can be absolute or relative, in which case they're relative to the "
"directory containing the :file:`.pth` file.  See the documentation of the "
":mod:`site` module for more information."
msgstr ""

#: ../../install/index.rst:684
msgid ""
"A slightly less convenient way is to edit the :file:`site.py` file in "
"Python's standard library, and modify ``sys.path``.  :file:`site.py` is "
"automatically imported when the Python interpreter is executed, unless the "
":option:`-S` switch is supplied to suppress this behaviour.  So you could "
"simply edit :file:`site.py` and add two lines to it:"
msgstr ""

#: ../../install/index.rst:695
msgid ""
"However, if you reinstall the same minor version of Python (perhaps when "
"upgrading from 2.2 to 2.2.2, for example) :file:`site.py` will be "
"overwritten by the stock version.  You'd have to remember that it was "
"modified and save a copy before doing the installation."
msgstr ""

#: ../../install/index.rst:700
msgid ""
"There are two environment variables that can modify ``sys.path``. "
":envvar:`PYTHONHOME` sets an alternate value for the prefix of the Python "
"installation.  For example, if :envvar:`PYTHONHOME` is set to "
"``/www/python``, the search path will be set to ``['', "
"'/www/python/lib/pythonX.Y/', '/www/python/lib/pythonX.Y/plat-linux2', "
"...]``."
msgstr ""

#: ../../install/index.rst:706
msgid ""
"The :envvar:`PYTHONPATH` variable can be set to a list of paths that will be"
" added to the beginning of ``sys.path``.  For example, if "
":envvar:`PYTHONPATH` is set to ``/www/python:/opt/py``, the search path will"
" begin with ``['/www/python', '/opt/py']``.  (Note that directories must "
"exist in order to be added to ``sys.path``; the :mod:`site` module removes "
"paths that don't exist.)"
msgstr ""

#: ../../install/index.rst:713
msgid ""
"Finally, ``sys.path`` is just a regular Python list, so any Python "
"application can modify it by adding or removing entries."
msgstr ""

#: ../../install/index.rst:720
msgid "Distutils Configuration Files"
msgstr "Distutils 配置文件Configuration Files"

#: ../../install/index.rst:722
msgid ""
"As mentioned above, you can use Distutils configuration files to record "
"personal or site preferences for any Distutils options.  That is, any option"
" to any command can be stored in one of two or three (depending on your "
"platform) configuration files, which will be consulted before the command-"
"line is parsed. This means that configuration files will override default "
"values, and the command-line will in turn override configuration files.  "
"Furthermore, if multiple configuration files apply, values from \"earlier\" "
"files are overridden by \"later\" files."
msgstr ""

#: ../../install/index.rst:735
msgid "Location and names of config files"
msgstr ""

#: ../../install/index.rst:737
msgid ""
"The names and locations of the configuration files vary slightly across "
"platforms.  On Unix and macOS, the three configuration files (in the order "
"they are processed) are:"
msgstr ""

#: ../../install/index.rst:742 ../../install/index.rst:754
msgid "Location and filename"
msgstr "位置和文件名"

#: ../../install/index.rst:744 ../../install/index.rst:756
msgid "system"
msgstr "system"

#: ../../install/index.rst:744
msgid ":file:`{prefix}/lib/python{ver}/distutils/distutils.cfg`"
msgstr ":file:`{prefix}/lib/python{ver}/distutils/distutils.cfg`"

#: ../../install/index.rst:746 ../../install/index.rst:758
msgid "personal"
msgstr "personal"

#: ../../install/index.rst:746
msgid ":file:`$HOME/.pydistutils.cfg`"
msgstr ":file:`$HOME/.pydistutils.cfg`"

#: ../../install/index.rst:748 ../../install/index.rst:760
msgid "local"
msgstr "local"

#: ../../install/index.rst:748 ../../install/index.rst:760
msgid ":file:`setup.cfg`"
msgstr ":file:`setup.cfg`"

#: ../../install/index.rst:748 ../../install/index.rst:760
msgid "\\(3)"
msgstr "\\(3)"

#: ../../install/index.rst:751
msgid "And on Windows, the configuration files are:"
msgstr "而在 Windows 中，配置文件为:"

#: ../../install/index.rst:756
msgid ":file:`{prefix}\\\\Lib\\\\distutils\\\\distutils.cfg`"
msgstr ":file:`{prefix}\\\\Lib\\\\distutils\\\\distutils.cfg`"

#: ../../install/index.rst:756
msgid "\\(4)"
msgstr "\\(4)"

#: ../../install/index.rst:758
msgid ":file:`%HOME%\\\\pydistutils.cfg`"
msgstr ":file:`%HOME%\\\\pydistutils.cfg`"

#: ../../install/index.rst:758
msgid "\\(5)"
msgstr "\\(5)"

#: ../../install/index.rst:763
msgid ""
"On all platforms, the \"personal\" file can be temporarily disabled by "
"passing the ``--no-user-cfg`` option."
msgstr ""

#: ../../install/index.rst:769
msgid ""
"Strictly speaking, the system-wide configuration file lives in the directory"
" where the Distutils are installed; under Python 1.6 and later on Unix, this"
" is as shown. For Python 1.5.2, the Distutils will normally be installed to "
":file:`{prefix}/lib/python1.5/site-packages/distutils`, so the system "
"configuration file should be put there under Python 1.5.2."
msgstr ""

#: ../../install/index.rst:776
msgid ""
"On Unix, if the :envvar:`HOME` environment variable is not defined, the "
"user's home directory will be determined with the :func:`~pwd.getpwuid` "
"function from the standard :mod:`pwd` module. This is done by the "
":func:`os.path.expanduser` function used by Distutils."
msgstr ""

#: ../../install/index.rst:782
msgid ""
"I.e., in the current directory (usually the location of the setup script)."
msgstr ""

#: ../../install/index.rst:785
msgid ""
"(See also note (1).)  Under Python 1.6 and later, Python's default "
"\"installation prefix\" is :file:`C:\\\\Python`, so the system configuration"
" file is normally :file:`C:\\\\Python\\\\Lib\\\\distutils\\\\distutils.cfg`."
" Under Python 1.5.2, the default prefix was :file:`C:\\\\Program "
"Files\\\\Python`, and the Distutils were not part of the standard library---"
"so the system configuration file would be :file:`C:\\\\Program "
"Files\\\\Python\\\\distutils\\\\distutils.cfg` in a standard Python 1.5.2 "
"installation under Windows."
msgstr ""

#: ../../install/index.rst:794
msgid ""
"On Windows, if the :envvar:`HOME` environment variable is not defined, "
":envvar:`USERPROFILE` then :envvar:`HOMEDRIVE` and :envvar:`HOMEPATH` will "
"be tried. This is done by the :func:`os.path.expanduser` function used by "
"Distutils."
msgstr ""

#: ../../install/index.rst:803
msgid "Syntax of config files"
msgstr ""

#: ../../install/index.rst:805
msgid ""
"The Distutils configuration files all have the same syntax.  The config "
"files are grouped into sections.  There is one section for each Distutils "
"command, plus a ``global`` section for global options that affect every "
"command.  Each section consists of one option per line, specified as "
"``option=value``."
msgstr ""

#: ../../install/index.rst:810
msgid ""
"For example, the following is a complete config file that just forces all "
"commands to run quietly by default:"
msgstr ""

#: ../../install/index.rst:818
msgid ""
"If this is installed as the system config file, it will affect all "
"processing of any Python module distribution by any user on the current "
"system.  If it is installed as your personal config file (on systems that "
"support them), it will affect only module distributions processed by you.  "
"And if it is used as the :file:`setup.cfg` for a particular module "
"distribution, it affects only that distribution."
msgstr ""

#: ../../install/index.rst:825
msgid ""
"You could override the default \"build base\" directory and make the "
":command:`build\\*` commands always forcibly rebuild all files with the "
"following:"
msgstr ""

#: ../../install/index.rst:835
msgid "which corresponds to the command-line arguments ::"
msgstr ""

#: ../../install/index.rst:839
msgid ""
"except that including the :command:`build` command on the command-line means"
" that command will be run.  Including a particular command in config files "
"has no such implication; it only means that if the command is run, the "
"options in the config file will apply.  (Or if other commands that derive "
"values from it are run, they will use the values in the config file.)"
msgstr ""

#: ../../install/index.rst:845
msgid ""
"You can find out the complete list of options for any command using the "
":option:`!--help` option, e.g.::"
msgstr ""

#: ../../install/index.rst:850
msgid ""
"and you can find out the complete list of global options by using :option:`!"
"--help` without a command::"
msgstr ""

#: ../../install/index.rst:855
msgid ""
"See also the \"Reference\" section of the \"Distributing Python Modules\" "
"manual."
msgstr ""

#: ../../install/index.rst:861
msgid "Building Extensions: Tips and Tricks"
msgstr ""

#: ../../install/index.rst:863
msgid ""
"Whenever possible, the Distutils try to use the configuration information "
"made available by the Python interpreter used to run the :file:`setup.py` "
"script. For example, the same compiler and linker flags used to compile "
"Python will also be used for compiling extensions.  Usually this will work "
"well, but in complicated situations this might be inappropriate.  This "
"section discusses how to override the usual Distutils behaviour."
msgstr ""

#: ../../install/index.rst:874
msgid "Tweaking compiler/linker flags"
msgstr ""

#: ../../install/index.rst:876
msgid ""
"Compiling a Python extension written in C or C++ will sometimes require "
"specifying custom flags for the compiler and linker in order to use a "
"particular library or produce a special kind of object code. This is "
"especially true if the extension hasn't been tested on your platform, or if "
"you're trying to cross-compile Python."
msgstr ""

#: ../../install/index.rst:882
msgid ""
"In the most general case, the extension author might have foreseen that "
"compiling the extensions would be complicated, and provided a :file:`Setup` "
"file for you to edit.  This will likely only be done if the module "
"distribution contains many separate extension modules, or if they often "
"require elaborate sets of compiler flags in order to work."
msgstr ""

#: ../../install/index.rst:888
msgid ""
"A :file:`Setup` file, if present, is parsed in order to get a list of "
"extensions to build.  Each line in a :file:`Setup` describes a single "
"module.  Lines have the following structure::"
msgstr ""

#: ../../install/index.rst:895
msgid "Let's examine each of the fields in turn."
msgstr ""

#: ../../install/index.rst:897
msgid ""
"*module* is the name of the extension module to be built, and should be a "
"valid Python identifier.  You can't just change this in order to rename a "
"module (edits to the source code would also be needed), so this should be "
"left alone."
msgstr ""

#: ../../install/index.rst:901
msgid ""
"*sourcefile* is anything that's likely to be a source code file, at least "
"judging by the filename.  Filenames ending in :file:`.c` are assumed to be "
"written in C, filenames ending in :file:`.C`, :file:`.cc`, and :file:`.c++` "
"are assumed to be C++, and filenames ending in :file:`.m` or :file:`.mm` are"
" assumed to be in Objective C."
msgstr ""

#: ../../install/index.rst:907
msgid ""
"*cpparg* is an argument for the C preprocessor,  and is anything starting "
"with :option:`!-I`, :option:`!-D`, :option:`!-U` or :option:`!-C`."
msgstr ""

#: ../../install/index.rst:910
msgid ""
"*library* is anything ending in :file:`.a` or beginning with :option:`!-l` "
"or :option:`!-L`."
msgstr ""

#: ../../install/index.rst:913
msgid ""
"If a particular platform requires a special library on your platform, you "
"can add it by editing the :file:`Setup` file and running ``python setup.py "
"build``. For example, if the module defined by the line ::"
msgstr ""

#: ../../install/index.rst:919
msgid ""
"must be linked with the math library :file:`libm.a` on your platform, simply"
" add :option:`!-lm` to the line::"
msgstr ""

#: ../../install/index.rst:924
msgid ""
"Arbitrary switches intended for the compiler or the linker can be supplied "
"with the :option:`!-Xcompiler` *arg* and :option:`!-Xlinker` *arg* options::"
msgstr ""

#: ../../install/index.rst:929
msgid ""
"The next option after :option:`!-Xcompiler` and :option:`!-Xlinker` will be "
"appended to the proper command line, so in the above example the compiler "
"will be passed the :option:`!-o32` option, and the linker will be passed "
":option:`!-shared`.  If a compiler option requires an argument, you'll have "
"to supply multiple :option:`!-Xcompiler` options; for example, to pass ``-x "
"c++`` the :file:`Setup` file would have to contain ``-Xcompiler -x "
"-Xcompiler c++``."
msgstr ""

#: ../../install/index.rst:936
msgid ""
"Compiler flags can also be supplied through setting the :envvar:`CFLAGS` "
"environment variable.  If set, the contents of :envvar:`CFLAGS` will be "
"added to the compiler flags specified in the  :file:`Setup` file."
msgstr ""

#: ../../install/index.rst:944
msgid "Using non-Microsoft compilers on Windows"
msgstr "在 Windows 上使用非 Microsoft 编辑器"

#: ../../install/index.rst:951
msgid "Borland/CodeGear C++"
msgstr "Borland/CodeGear C++"

#: ../../install/index.rst:953
msgid ""
"This subsection describes the necessary steps to use Distutils with the "
"Borland C++ compiler version 5.5.  First you have to know that Borland's "
"object file format (OMF) is different from the format used by the Python "
"version you can download from the Python or ActiveState web site.  (Python "
"is built with Microsoft Visual C++, which uses COFF as the object file "
"format.) For this reason you have to convert Python's library "
":file:`python25.lib` into the Borland format.  You can do this as follows:"
msgstr ""

#: ../../install/index.rst:968
msgid ""
"The :file:`coff2omf` program comes with the Borland compiler.  The file "
":file:`python25.lib` is in the :file:`Libs` directory of your Python "
"installation.  If your extension uses other libraries (zlib, ...) you have "
"to convert them too."
msgstr ""

#: ../../install/index.rst:973
msgid ""
"The converted files have to reside in the same directories as the normal "
"libraries."
msgstr ""

#: ../../install/index.rst:976
msgid ""
"How does Distutils manage to use these libraries with their changed names?  "
"If the extension needs a library (eg. :file:`foo`) Distutils checks first if"
" it finds a library with suffix :file:`_bcpp` (eg. :file:`foo_bcpp.lib`) and"
" then uses this library.  In the case it doesn't find such a special library"
" it uses the default name (:file:`foo.lib`.) [#]_"
msgstr ""

#: ../../install/index.rst:982
msgid ""
"To let Distutils compile your extension with Borland C++ you now have to "
"type::"
msgstr ""

#: ../../install/index.rst:986
msgid ""
"If you want to use the Borland C++ compiler as the default, you could "
"specify this in your personal or system-wide configuration file for "
"Distutils (see section :ref:`inst-config-files`.)"
msgstr ""

#: ../../install/index.rst:995
msgid "`C++Builder Compiler <https://www.embarcadero.com/products>`_"
msgstr "`C++Builder Compiler <https://www.embarcadero.com/products>`_"

#: ../../install/index.rst:994
msgid ""
"Information about the free C++ compiler from Borland, including links to the"
" download pages."
msgstr "有关 Borland 发布的免费 C++ 编译器的信息，包括下载页面的链接。"

#: ../../install/index.rst:998
msgid ""
"`Creating Python Extensions Using Borland's Free Compiler "
"<http://www.cyberus.ca/~g_will/pyExtenDL.shtml>`_"
msgstr ""
"`Creating Python Extensions Using Borland's Free Compiler "
"<http://www.cyberus.ca/~g_will/pyExtenDL.shtml>`_"

#: ../../install/index.rst:998
msgid ""
"Document describing how to use Borland's free command-line C++ compiler to "
"build Python."
msgstr "介绍如何使用 Borland 发布的免费命令行方式 C++ 编译器构建 Python 的文档。"

#: ../../install/index.rst:1003
msgid "GNU C / Cygwin / MinGW"
msgstr "GNU C / Cygwin / MinGW"

#: ../../install/index.rst:1005
msgid ""
"This section describes the necessary steps to use Distutils with the GNU "
"C/C++ compilers in their Cygwin and MinGW distributions. [#]_ For a Python "
"interpreter that was built with Cygwin, everything should work without any "
"of these following steps."
msgstr ""

#: ../../install/index.rst:1010
msgid ""
"Not all extensions can be built with MinGW or Cygwin, but many can.  "
"Extensions most likely to not work are those that use C++ or depend on "
"Microsoft Visual C extensions."
msgstr ""

#: ../../install/index.rst:1014
msgid "To let Distutils compile your extension with Cygwin you have to type::"
msgstr ""

#: ../../install/index.rst:1018
msgid "and for Cygwin in no-cygwin mode [#]_ or for MinGW type::"
msgstr ""

#: ../../install/index.rst:1022
msgid ""
"If you want to use any of these options/compilers as default, you should "
"consider writing it in your personal or system-wide configuration file for "
"Distutils (see section :ref:`inst-config-files`.)"
msgstr ""

#: ../../install/index.rst:1027
msgid "Older Versions of Python and MinGW"
msgstr "旧版 Python 和 MinGW"

#: ../../install/index.rst:1028
msgid ""
"The following instructions only apply if you're using a version of Python "
"inferior to 2.4.1 with a MinGW inferior to 3.0.0 (with "
"binutils-2.13.90-20030111-1)."
msgstr ""

#: ../../install/index.rst:1032
msgid ""
"These compilers require some special libraries.  This task is more complex "
"than for Borland's C++, because there is no program to convert the library."
"  First you have to create a list of symbols which the Python DLL exports. "
"(You can find a good program for this task at "
"https://sourceforge.net/projects/mingw/files/MinGW/Extension/pexports/)."
msgstr ""

#: ../../install/index.rst:1045
msgid ""
"The location of an installed :file:`python25.dll` will depend on the "
"installation options and the version and language of Windows.  In a \"just "
"for me\" installation, it will appear in the root of the installation "
"directory.  In a shared installation, it will be located in the system "
"directory."
msgstr ""

#: ../../install/index.rst:1050
msgid ""
"Then you can create from these information an import library for gcc. ::"
msgstr ""

#: ../../install/index.rst:1054
msgid ""
"The resulting library has to be placed in the same directory as "
":file:`python25.lib`. (Should be the :file:`libs` directory under your "
"Python installation directory.)"
msgstr ""

#: ../../install/index.rst:1058
msgid ""
"If your extension uses other libraries (zlib,...) you might  have to convert"
" them too. The converted files have to reside in the same directories as the"
" normal libraries do."
msgstr ""

#: ../../install/index.rst:1065
msgid ""
"`Building Python modules on MS Windows platform with MinGW "
"<https://old.zope.dev/Members/als/tips/win32_mingw_modules>`_"
msgstr ""
"`在 MS Windows 平台上使用 MinGW 构建 Python 模块 "
"<https://old.zope.dev/Members/als/tips/win32_mingw_modules>`_"

#: ../../install/index.rst:1066
msgid ""
"Information about building the required libraries for the MinGW environment."
msgstr "针对 MinGW 环境生成必要的库的相关信息"

#: ../../install/index.rst:1070
msgid "Footnotes"
msgstr "备注"

#: ../../install/index.rst:1071
msgid ""
"This also means you could replace all existing COFF-libraries with OMF-"
"libraries of the same name."
msgstr "这也意味着你可以将现有的全部 COFF 库替换为同名的 OMF 库。"

#: ../../install/index.rst:1074
msgid "Check https://www.sourceware.org/cygwin/ for more information"
msgstr "请查看 https://www.sourceware.org/cygwin/ 了解更多信息"

#: ../../install/index.rst:1076
msgid ""
"Then you have no POSIX emulation available, but you also don't need "
":file:`cygwin1.dll`."
msgstr "你将没有可用的 POSIX 模拟，但你也将不再需要 :file:`cygwin1.dll`。"
