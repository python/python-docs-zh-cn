# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/stdlib.rst:5
msgid "Brief Tour of the Standard Library"
msgstr ""

#: ../../tutorial/stdlib.rst:11
msgid "Operating System Interface"
msgstr ""

#: ../../tutorial/stdlib.rst:13
msgid ""
"The :mod:`os` module provides dozens of functions for interacting with the "
"operating system::"
msgstr ""

#: ../../tutorial/stdlib.rst:23
msgid ""
"Be sure to use the ``import os`` style instead of ``from os import *``.  "
"This will keep :func:`os.open` from shadowing the built-in :func:`open` "
"function which operates much differently."
msgstr ""

#: ../../tutorial/stdlib.rst:29
msgid ""
"The built-in :func:`dir` and :func:`help` functions are useful as "
"interactive aids for working with large modules like :mod:`os`::"
msgstr ""

#: ../../tutorial/stdlib.rst:38
msgid ""
"For daily file and directory management tasks, the :mod:`shutil` module "
"provides a higher level interface that is easier to use::"
msgstr ""

#: ../../tutorial/stdlib.rst:51
msgid "File Wildcards"
msgstr ""

#: ../../tutorial/stdlib.rst:53
msgid ""
"The :mod:`glob` module provides a function for making file lists from "
"directory wildcard searches::"
msgstr ""

#: ../../tutorial/stdlib.rst:64
msgid "Command Line Arguments"
msgstr ""

#: ../../tutorial/stdlib.rst:66
msgid ""
"Common utility scripts often need to process command line arguments. These "
"arguments are stored in the :mod:`sys` module's *argv* attribute as a list."
"  For instance the following output results from running ``python demo.py "
"one two three`` at the command line::"
msgstr ""

#: ../../tutorial/stdlib.rst:75
msgid ""
"The :mod:`argparse` module provides a more sophisticated mechanism to "
"process command line arguments.  The following script extracts one or more "
"filenames and an optional number of lines to be displayed::"
msgstr ""

#: ../../tutorial/stdlib.rst:89
msgid ""
"When run at the command line with ``python top.py --lines=5 alpha.txt "
"beta.txt``, the script sets ``args.lines`` to ``5`` and ``args.filenames`` "
"to ``['alpha.txt', 'beta.txt']``."
msgstr ""

#: ../../tutorial/stdlib.rst:97
msgid "Error Output Redirection and Program Termination"
msgstr ""

#: ../../tutorial/stdlib.rst:99
msgid ""
"The :mod:`sys` module also has attributes for *stdin*, *stdout*, and "
"*stderr*. The latter is useful for emitting warnings and error messages to "
"make them visible even when *stdout* has been redirected::"
msgstr ""

#: ../../tutorial/stdlib.rst:106
msgid "The most direct way to terminate a script is to use ``sys.exit()``."
msgstr ""

#: ../../tutorial/stdlib.rst:112
msgid "String Pattern Matching"
msgstr ""

#: ../../tutorial/stdlib.rst:114
msgid ""
"The :mod:`re` module provides regular expression tools for advanced string "
"processing. For complex matching and manipulation, regular expressions offer"
" succinct, optimized solutions::"
msgstr ""

#: ../../tutorial/stdlib.rst:124
msgid ""
"When only simple capabilities are needed, string methods are preferred "
"because they are easier to read and debug::"
msgstr ""

#: ../../tutorial/stdlib.rst:134
msgid "Mathematics"
msgstr ""

#: ../../tutorial/stdlib.rst:136
msgid ""
"The :mod:`math` module gives access to the underlying C library functions "
"for floating point math::"
msgstr ""

#: ../../tutorial/stdlib.rst:145
msgid "The :mod:`random` module provides tools for making random selections::"
msgstr ""

#: ../../tutorial/stdlib.rst:157
msgid ""
"The :mod:`statistics` module calculates basic statistical properties (the "
"mean, median, variance, etc.) of numeric data::"
msgstr ""

#: ../../tutorial/stdlib.rst:169
msgid ""
"The SciPy project <https://scipy.org> has many other modules for numerical "
"computations."
msgstr ""

#: ../../tutorial/stdlib.rst:175
msgid "Internet Access"
msgstr ""

#: ../../tutorial/stdlib.rst:177
msgid ""
"There are a number of modules for accessing the internet and processing "
"internet protocols. Two of the simplest are :mod:`urllib.request` for "
"retrieving data from URLs and :mod:`smtplib` for sending mail::"
msgstr ""

#: ../../tutorial/stdlib.rst:200
msgid ""
"(Note that the second example needs a mailserver running on localhost.)"
msgstr ""

#: ../../tutorial/stdlib.rst:206
msgid "Dates and Times"
msgstr ""

#: ../../tutorial/stdlib.rst:208
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times"
" in both simple and complex ways. While date and time arithmetic is "
"supported, the focus of the implementation is on efficient member extraction"
" for output formatting and manipulation.  The module also supports objects "
"that are timezone aware. ::"
msgstr ""

#: ../../tutorial/stdlib.rst:232
msgid "Data Compression"
msgstr ""

#: ../../tutorial/stdlib.rst:234
msgid ""
"Common data archiving and compression formats are directly supported by "
"modules including: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, "
":mod:`zipfile` and :mod:`tarfile`. ::"
msgstr ""

#: ../../tutorial/stdlib.rst:254
msgid "Performance Measurement"
msgstr ""

#: ../../tutorial/stdlib.rst:256
msgid ""
"Some Python users develop a deep interest in knowing the relative "
"performance of different approaches to the same problem. Python provides a "
"measurement tool that answers those questions immediately."
msgstr ""

#: ../../tutorial/stdlib.rst:260
msgid ""
"For example, it may be tempting to use the tuple packing and unpacking "
"feature instead of the traditional approach to swapping arguments. The "
":mod:`timeit` module quickly demonstrates a modest performance advantage::"
msgstr ""

#: ../../tutorial/stdlib.rst:270
msgid ""
"In contrast to :mod:`timeit`'s fine level of granularity, the :mod:`profile`"
" and :mod:`pstats` modules provide tools for identifying time critical "
"sections in larger blocks of code."
msgstr ""

#: ../../tutorial/stdlib.rst:278
msgid "Quality Control"
msgstr ""

#: ../../tutorial/stdlib.rst:280
msgid ""
"One approach for developing high quality software is to write tests for each"
" function as it is developed and to run those tests frequently during the "
"development process."
msgstr ""

#: ../../tutorial/stdlib.rst:284
msgid ""
"The :mod:`doctest` module provides a tool for scanning a module and "
"validating tests embedded in a program's docstrings.  Test construction is "
"as simple as cutting-and-pasting a typical call along with its results into "
"the docstring. This improves the documentation by providing the user with an"
" example and it allows the doctest module to make sure the code remains true"
" to the documentation::"
msgstr ""

#: ../../tutorial/stdlib.rst:302
msgid ""
"The :mod:`unittest` module is not as effortless as the :mod:`doctest` "
"module, but it allows a more comprehensive set of tests to be maintained in "
"a separate file::"
msgstr ""

#: ../../tutorial/stdlib.rst:324
msgid "Batteries Included"
msgstr ""

#: ../../tutorial/stdlib.rst:326
msgid ""
"Python has a \"batteries included\" philosophy.  This is best seen through "
"the sophisticated and robust capabilities of its larger packages. For "
"example:"
msgstr ""

#: ../../tutorial/stdlib.rst:329
msgid ""
"The :mod:`xmlrpc.client` and :mod:`xmlrpc.server` modules make implementing "
"remote procedure calls into an almost trivial task.  Despite the modules' "
"names, no direct knowledge or handling of XML is needed."
msgstr ""

#: ../../tutorial/stdlib.rst:333
msgid ""
"The :mod:`email` package is a library for managing email messages, including"
" MIME and other :rfc:`2822`-based message documents. Unlike :mod:`smtplib` "
"and :mod:`poplib` which actually send and receive messages, the email "
"package has a complete toolset for building or decoding complex message "
"structures (including attachments) and for implementing internet encoding "
"and header protocols."
msgstr ""

#: ../../tutorial/stdlib.rst:340
msgid ""
"The :mod:`json` package provides robust support for parsing this popular "
"data interchange format.  The :mod:`csv` module supports direct reading and "
"writing of files in Comma-Separated Value format, commonly supported by "
"databases and spreadsheets.  XML processing is supported by the "
":mod:`xml.etree.ElementTree`, :mod:`xml.dom` and :mod:`xml.sax` packages. "
"Together, these modules and packages greatly simplify data interchange "
"between Python applications and other tools."
msgstr ""

#: ../../tutorial/stdlib.rst:349
msgid ""
"The :mod:`sqlite3` module is a wrapper for the SQLite database library, "
"providing a persistent database that can be updated and accessed using "
"slightly nonstandard SQL syntax."
msgstr ""

#: ../../tutorial/stdlib.rst:353
msgid ""
"Internationalization is supported by a number of modules including "
":mod:`gettext`, :mod:`locale`, and the :mod:`codecs` package."
msgstr ""

#: ../../tutorial/stdlib.rst:27
msgid "built-in function"
msgstr ""

#: ../../tutorial/stdlib.rst:27
msgid "help"
msgstr ""
