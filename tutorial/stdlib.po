# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/stdlib.rst:5
msgid "Brief Tour of the Standard Library"
msgstr "标准库简介"

#: ../../tutorial/stdlib.rst:11
msgid "Operating System Interface"
msgstr "操作系统接口"

#: ../../tutorial/stdlib.rst:13
msgid ""
"The :mod:`os` module provides dozens of functions for interacting with the "
"operating system::"
msgstr ":mod:`os` 模块提供了许多与操作系统交互的函数::"

#: ../../tutorial/stdlib.rst:16
msgid ""
">>> import os\n"
">>> os.getcwd()      # Return the current working directory\n"
"'C:\\\\Python313'\n"
">>> os.chdir('/server/accesslogs')   # Change current working directory\n"
">>> os.system('mkdir today')   # Run the command mkdir in the system shell\n"
"0"
msgstr ""
">>> import os\n"
">>> os.getcwd()      # 返回当前工作目录\n"
"'C:\\\\Python313'\n"
">>> os.chdir('/server/accesslogs')   # 改变当前工作目录\n"
">>> os.system('mkdir today')   # 在系统 shell 中运行 mkdir 命令\n"
"0"

#: ../../tutorial/stdlib.rst:23
msgid ""
"Be sure to use the ``import os`` style instead of ``from os import *``.  "
"This will keep :func:`os.open` from shadowing the built-in :func:`open` "
"function which operates much differently."
msgstr ""
"一定要使用 ``import os`` 而不是 ``from os import *`` 。这将避免内建的 :func:`open` 函数被 "
":func:`os.open` 隐式替换掉，因为它们的使用方式大不相同。"

#: ../../tutorial/stdlib.rst:29
msgid ""
"The built-in :func:`dir` and :func:`help` functions are useful as "
"interactive aids for working with large modules like :mod:`os`::"
msgstr "内置的 :func:`dir` 和 :func:`help` 函数可用作交互式辅助工具，用于处理大型模块，如 :mod:`os`::"

#: ../../tutorial/stdlib.rst:32
msgid ""
">>> import os\n"
">>> dir(os)\n"
"<returns a list of all module functions>\n"
">>> help(os)\n"
"<returns an extensive manual page created from the module's docstrings>"
msgstr ""
">>> import os\n"
">>> dir(os)\n"
"<返回由模块的所有函数组成的列表>\n"
">>> help(os)\n"
"<返回根据模块文档字符串创建的详细说明页面>"

#: ../../tutorial/stdlib.rst:38
msgid ""
"For daily file and directory management tasks, the :mod:`shutil` module "
"provides a higher level interface that is easier to use::"
msgstr "对于日常文件和目录管理任务， :mod:`shutil` 模块提供了更易于使用的更高级别的接口::"

#: ../../tutorial/stdlib.rst:41
msgid ""
">>> import shutil\n"
">>> shutil.copyfile('data.db', 'archive.db')\n"
"'archive.db'\n"
">>> shutil.move('/build/executables', 'installdir')\n"
"'installdir'"
msgstr ""
">>> import shutil\n"
">>> shutil.copyfile('data.db', 'archive.db')\n"
"'archive.db'\n"
">>> shutil.move('/build/executables', 'installdir')\n"
"'installdir'"

#: ../../tutorial/stdlib.rst:51
msgid "File Wildcards"
msgstr "文件通配符"

#: ../../tutorial/stdlib.rst:53
msgid ""
"The :mod:`glob` module provides a function for making file lists from "
"directory wildcard searches::"
msgstr ":mod:`glob` 模块提供了一个在目录中使用通配符搜索创建文件列表的函数::"

#: ../../tutorial/stdlib.rst:56
msgid ""
">>> import glob\n"
">>> glob.glob('*.py')\n"
"['primes.py', 'random.py', 'quote.py']"
msgstr ""
">>> import glob\n"
">>> glob.glob('*.py')\n"
"['primes.py', 'random.py', 'quote.py']"

#: ../../tutorial/stdlib.rst:64
msgid "Command Line Arguments"
msgstr "命令行参数"

#: ../../tutorial/stdlib.rst:66
msgid ""
"Common utility scripts often need to process command line arguments. These "
"arguments are stored in the :mod:`sys` module's *argv* attribute as a list."
"  For instance, let's take the following :file:`demo.py` file::"
msgstr ""
"一般的工具脚本常常需要处理命令行参数。 这些参数以列表形式存储在 :mod:`sys` 模块的 *argv* 属性中。 举例来说，让我们查看下面的 "
":file:`demo.py` 文件::"

#: ../../tutorial/stdlib.rst:70
msgid ""
"# File demo.py\n"
"import sys\n"
"print(sys.argv)"
msgstr ""
"# 文件 demo.py\n"
"import sys\n"
"print(sys.argv)"

#: ../../tutorial/stdlib.rst:74
msgid ""
"Here is the output from running ``python demo.py one two three`` at the "
"command line::"
msgstr "以下是在命令行中运行 ``python demo.py one two three`` 输出的结果::"

#: ../../tutorial/stdlib.rst:77
msgid "['demo.py', 'one', 'two', 'three']"
msgstr "['demo.py', 'one', 'two', 'three']"

#: ../../tutorial/stdlib.rst:79
msgid ""
"The :mod:`argparse` module provides a more sophisticated mechanism to "
"process command line arguments.  The following script extracts one or more "
"filenames and an optional number of lines to be displayed::"
msgstr ":mod:`argparse` 模块提供了一种更复杂的机制来处理命令行参数。 以下脚本可提取一个或多个文件名，并可选择要显示的行数::"

#: ../../tutorial/stdlib.rst:83
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(\n"
"    prog='top',\n"
"    description='Show top lines from each file')\n"
"parser.add_argument('filenames', nargs='+')\n"
"parser.add_argument('-l', '--lines', type=int, default=10)\n"
"args = parser.parse_args()\n"
"print(args)"
msgstr ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(\n"
"    prog='top',\n"
"    description='Show top lines from each file')\n"
"parser.add_argument('filenames', nargs='+')\n"
"parser.add_argument('-l', '--lines', type=int, default=10)\n"
"args = parser.parse_args()\n"
"print(args)"

#: ../../tutorial/stdlib.rst:93
msgid ""
"When run at the command line with ``python top.py --lines=5 alpha.txt "
"beta.txt``, the script sets ``args.lines`` to ``5`` and ``args.filenames`` "
"to ``['alpha.txt', 'beta.txt']``."
msgstr ""
"当在通过 ``python top.py --lines=5 alpha.txt beta.txt`` 在命令行运行时，该脚本会将 "
"``args.lines`` 设为 ``5`` 并将 ``args.filenames`` 设为 ``['alpha.txt', "
"'beta.txt']``。"

#: ../../tutorial/stdlib.rst:101
msgid "Error Output Redirection and Program Termination"
msgstr "错误输出重定向和程序终止"

#: ../../tutorial/stdlib.rst:103
msgid ""
"The :mod:`sys` module also has attributes for *stdin*, *stdout*, and "
"*stderr*. The latter is useful for emitting warnings and error messages to "
"make them visible even when *stdout* has been redirected::"
msgstr ""
":mod:`sys` 模块还具有 *stdin* ， *stdout* 和 *stderr* 的属性。后者对于发出警告和错误消息非常有用，即使在 "
"*stdout* 被重定向后也可以看到它们::"

#: ../../tutorial/stdlib.rst:107
msgid ""
">>> sys.stderr.write('Warning, log file not found starting a new one\\n')\n"
"Warning, log file not found starting a new one"
msgstr ""
">>> sys.stderr.write('Warning, log file not found starting a new one\\n')\n"
"Warning, log file not found starting a new one"

#: ../../tutorial/stdlib.rst:110
msgid "The most direct way to terminate a script is to use ``sys.exit()``."
msgstr "终止脚本的最直接方法是使用 ``sys.exit()`` 。"

#: ../../tutorial/stdlib.rst:116
msgid "String Pattern Matching"
msgstr "字符串模式匹配"

#: ../../tutorial/stdlib.rst:118
msgid ""
"The :mod:`re` module provides regular expression tools for advanced string "
"processing. For complex matching and manipulation, regular expressions offer"
" succinct, optimized solutions::"
msgstr ":mod:`re` 模块为高级字符串处理提供正则表达式工具。对于复杂的匹配和操作，正则表达式提供简洁，优化的解决方案::"

#: ../../tutorial/stdlib.rst:122
msgid ""
">>> import re\n"
">>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\n"
"['foot', 'fell', 'fastest']\n"
">>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\n"
"'cat in the hat'"
msgstr ""
">>> import re\n"
">>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\n"
"['foot', 'fell', 'fastest']\n"
">>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\n"
"'cat in the hat'"

#: ../../tutorial/stdlib.rst:128
msgid ""
"When only simple capabilities are needed, string methods are preferred "
"because they are easier to read and debug::"
msgstr "当只需要简单的功能时，首选字符串方法因为它们更容易阅读和调试::"

#: ../../tutorial/stdlib.rst:131
msgid ""
">>> 'tea for too'.replace('too', 'two')\n"
"'tea for two'"
msgstr ""
">>> 'tea for too'.replace('too', 'two')\n"
"'tea for two'"

#: ../../tutorial/stdlib.rst:138
msgid "Mathematics"
msgstr "数学"

#: ../../tutorial/stdlib.rst:140
msgid ""
"The :mod:`math` module gives access to the underlying C library functions "
"for floating-point math::"
msgstr ":mod:`math` 模块提供对用于浮点数学运算的下层 C 库函数的访问::"

#: ../../tutorial/stdlib.rst:143
msgid ""
">>> import math\n"
">>> math.cos(math.pi / 4)\n"
"0.70710678118654757\n"
">>> math.log(1024, 2)\n"
"10.0"
msgstr ""
">>> import math\n"
">>> math.cos(math.pi / 4)\n"
"0.70710678118654757\n"
">>> math.log(1024, 2)\n"
"10.0"

#: ../../tutorial/stdlib.rst:149
msgid "The :mod:`random` module provides tools for making random selections::"
msgstr ":mod:`random` 模块提供了进行随机选择的工具::"

#: ../../tutorial/stdlib.rst:151
msgid ""
">>> import random\n"
">>> random.choice(['apple', 'pear', 'banana'])\n"
"'apple'\n"
">>> random.sample(range(100), 10)   # sampling without replacement\n"
"[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n"
">>> random.random()    # random float from the interval [0.0, 1.0)\n"
"0.17970987693706186\n"
">>> random.randrange(6)    # random integer chosen from range(6)\n"
"4"
msgstr ""
">>> import random\n"
">>> random.choice(['apple', 'pear', 'banana'])\n"
"'apple'\n"
">>> random.sample(range(100), 10)   # 无替代的取样\n"
"[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n"
">>> random.random()    # [0.0, 1.0) 区间的随机浮点数\n"
"0.17970987693706186\n"
">>> random.randrange(6)    # 从 range(6) 中随机选取的整数\n"
"4"

#: ../../tutorial/stdlib.rst:161
msgid ""
"The :mod:`statistics` module calculates basic statistical properties (the "
"mean, median, variance, etc.) of numeric data::"
msgstr ":mod:`statistics` 模块计算数值数据的基本统计属性（均值，中位数，方差等）::"

#: ../../tutorial/stdlib.rst:164
msgid ""
">>> import statistics\n"
">>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n"
">>> statistics.mean(data)\n"
"1.6071428571428572\n"
">>> statistics.median(data)\n"
"1.25\n"
">>> statistics.variance(data)\n"
"1.3720238095238095"
msgstr ""
">>> import statistics\n"
">>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n"
">>> statistics.mean(data)\n"
"1.6071428571428572\n"
">>> statistics.median(data)\n"
"1.25\n"
">>> statistics.variance(data)\n"
"1.3720238095238095"

#: ../../tutorial/stdlib.rst:173
msgid ""
"The SciPy project <https://scipy.org> has many other modules for numerical "
"computations."
msgstr "SciPy项目 <https://scipy.org> 有许多其他模块用于数值计算。"

#: ../../tutorial/stdlib.rst:179
msgid "Internet Access"
msgstr "互联网访问"

#: ../../tutorial/stdlib.rst:181
msgid ""
"There are a number of modules for accessing the internet and processing "
"internet protocols. Two of the simplest are :mod:`urllib.request` for "
"retrieving data from URLs and :mod:`smtplib` for sending mail::"
msgstr ""
"有许多模块可用于访问互联网和处理互联网协议。其中两个最简单的 :mod:`urllib.request` 用于从URL检索数据，以及 "
":mod:`smtplib` 用于发送邮件::"

#: ../../tutorial/stdlib.rst:185
msgid ""
">>> from urllib.request import urlopen\n"
">>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as response:\n"
"...     for line in response:\n"
"...         line = line.decode()             # Convert bytes to a str\n"
"...         if line.startswith('datetime'):\n"
"...             print(line.rstrip())         # Remove trailing newline\n"
"...\n"
"datetime: 2022-01-01T01:36:47.689215+00:00\n"
"\n"
">>> import smtplib\n"
">>> server = smtplib.SMTP('localhost')\n"
">>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n"
"... \"\"\"To: jcaesar@example.org\n"
"... From: soothsayer@example.org\n"
"...\n"
"... Beware the Ides of March.\n"
"... \"\"\")\n"
">>> server.quit()"
msgstr ""
">>> from urllib.request import urlopen\n"
">>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as response:\n"
"...     for line in response:\n"
"...         line = line.decode()             # 将字节串转换为字符串\n"
"...         if line.startswith('datetime'):\n"
"...             print(line.rstrip())         # 去除末尾换行符\n"
"...\n"
"datetime: 2022-01-01T01:36:47.689215+00:00\n"
"\n"
">>> import smtplib\n"
">>> server = smtplib.SMTP('localhost')\n"
">>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n"
"... \"\"\"To: jcaesar@example.org\n"
"... From: soothsayer@example.org\n"
"...\n"
"... Beware the Ides of March.\n"
"... \"\"\")\n"
">>> server.quit()"

#: ../../tutorial/stdlib.rst:204
msgid ""
"(Note that the second example needs a mailserver running on localhost.)"
msgstr "（请注意，第二个示例需要在localhost上运行的邮件服务器。）"

#: ../../tutorial/stdlib.rst:210
msgid "Dates and Times"
msgstr "日期和时间"

#: ../../tutorial/stdlib.rst:212
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times"
" in both simple and complex ways. While date and time arithmetic is "
"supported, the focus of the implementation is on efficient member extraction"
" for output formatting and manipulation.  The module also supports objects "
"that are timezone aware. ::"
msgstr ""
":mod:`datetime` "
"模块提供了以简单和复杂的方式操作日期和时间的类。虽然支持日期和时间算法，但实现的重点是有效的成员提取以进行输出格式化和操作。该模块还支持可感知时区的对象。"
" ::"

#: ../../tutorial/stdlib.rst:218
msgid ""
">>> # dates are easily constructed and formatted\n"
">>> from datetime import date\n"
">>> now = date.today()\n"
">>> now\n"
"datetime.date(2003, 12, 2)\n"
">>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n"
"'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n"
"\n"
">>> # dates support calendar arithmetic\n"
">>> birthday = date(1964, 7, 31)\n"
">>> age = now - birthday\n"
">>> age.days\n"
"14368"
msgstr ""
">>> # 方便地构造和格式化日期值\n"
">>> from datetime import date\n"
">>> now = date.today()\n"
">>> now\n"
"datetime.date(2003, 12, 2)\n"
">>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n"
"'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n"
"\n"
">>> # 日期值支持日历运算\n"
">>> birthday = date(1964, 7, 31)\n"
">>> age = now - birthday\n"
">>> age.days\n"
"14368"

#: ../../tutorial/stdlib.rst:236
msgid "Data Compression"
msgstr "数据压缩"

#: ../../tutorial/stdlib.rst:238
msgid ""
"Common data archiving and compression formats are directly supported by "
"modules including: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, "
":mod:`zipfile` and :mod:`tarfile`. ::"
msgstr ""
"常见的数据存档和压缩格式由模块直接支持，包括：:mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, "
":mod:`zipfile` 和 :mod:`tarfile`。::"

#: ../../tutorial/stdlib.rst:242
msgid ""
">>> import zlib\n"
">>> s = b'witch which has which witches wrist watch'\n"
">>> len(s)\n"
"41\n"
">>> t = zlib.compress(s)\n"
">>> len(t)\n"
"37\n"
">>> zlib.decompress(t)\n"
"b'witch which has which witches wrist watch'\n"
">>> zlib.crc32(s)\n"
"226805979"
msgstr ""
">>> import zlib\n"
">>> s = b'witch which has which witches wrist watch'\n"
">>> len(s)\n"
"41\n"
">>> t = zlib.compress(s)\n"
">>> len(t)\n"
"37\n"
">>> zlib.decompress(t)\n"
"b'witch which has which witches wrist watch'\n"
">>> zlib.crc32(s)\n"
"226805979"

#: ../../tutorial/stdlib.rst:258
msgid "Performance Measurement"
msgstr "性能测量"

#: ../../tutorial/stdlib.rst:260
msgid ""
"Some Python users develop a deep interest in knowing the relative "
"performance of different approaches to the same problem. Python provides a "
"measurement tool that answers those questions immediately."
msgstr "一些Python用户对了解同一问题的不同方法的相对性能产生了浓厚的兴趣。 Python提供了一种可以立即回答这些问题的测量工具。"

#: ../../tutorial/stdlib.rst:264
msgid ""
"For example, it may be tempting to use the tuple packing and unpacking "
"feature instead of the traditional approach to swapping arguments. The "
":mod:`timeit` module quickly demonstrates a modest performance advantage::"
msgstr "例如，元组封包和拆包功能相比传统的交换参数可能更具吸引力。:mod:`timeit` 模块可以快速演示在运行效率方面一定的优势::"

#: ../../tutorial/stdlib.rst:268
msgid ""
">>> from timeit import Timer\n"
">>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n"
"0.57535828626024577\n"
">>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n"
"0.54962537085770791"
msgstr ""
">>> from timeit import Timer\n"
">>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n"
"0.57535828626024577\n"
">>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n"
"0.54962537085770791"

#: ../../tutorial/stdlib.rst:274
msgid ""
"In contrast to :mod:`timeit`'s fine level of granularity, the :mod:`profile`"
" and :mod:`pstats` modules provide tools for identifying time critical "
"sections in larger blocks of code."
msgstr ""
"与 :mod:`timeit` 的精细粒度级别相反， :mod:`profile` 和 :mod:`pstats` "
"模块提供了用于在较大的代码块中识别时间关键部分的工具。"

#: ../../tutorial/stdlib.rst:282
msgid "Quality Control"
msgstr "质量控制"

#: ../../tutorial/stdlib.rst:284
msgid ""
"One approach for developing high quality software is to write tests for each"
" function as it is developed and to run those tests frequently during the "
"development process."
msgstr "开发高质量软件的一种方法是在开发过程中为每个函数编写测试，并在开发过程中经常运行这些测试。"

#: ../../tutorial/stdlib.rst:288
msgid ""
"The :mod:`doctest` module provides a tool for scanning a module and "
"validating tests embedded in a program's docstrings.  Test construction is "
"as simple as cutting-and-pasting a typical call along with its results into "
"the docstring. This improves the documentation by providing the user with an"
" example and it allows the doctest module to make sure the code remains true"
" to the documentation::"
msgstr ""
":mod:`doctest` "
"模块提供了一个工具，用于扫描模块并验证程序文档字符串中嵌入的测试。测试构造就像将典型调用及其结果剪切并粘贴到文档字符串一样简单。这通过向用户提供示例来改进文档，并且它允许doctest模块确保代码保持对文档的真实::"

#: ../../tutorial/stdlib.rst:295
msgid ""
"def average(values):\n"
"    \"\"\"Computes the arithmetic mean of a list of numbers.\n"
"\n"
"    >>> print(average([20, 30, 70]))\n"
"    40.0\n"
"    \"\"\"\n"
"    return sum(values) / len(values)\n"
"\n"
"import doctest\n"
"doctest.testmod()   # automatically validate the embedded tests"
msgstr ""
"def average(values):\n"
"    \"\"\"计算数字列表的算术平均值\n"
"\n"
"    >>> print(average([20, 30, 70]))\n"
"    40.0\n"
"    \"\"\"\n"
"    return sum(values) / len(values)\n"
"\n"
"import doctest\n"
"doctest.testmod()   # 自动验证嵌入式测试"

#: ../../tutorial/stdlib.rst:306
msgid ""
"The :mod:`unittest` module is not as effortless as the :mod:`doctest` "
"module, but it allows a more comprehensive set of tests to be maintained in "
"a separate file::"
msgstr ":mod:`unittest` 模块不像 :mod:`doctest` 模块那样易于使用，但它允许在一个单独的文件中维护更全面的测试集::"

#: ../../tutorial/stdlib.rst:310
msgid ""
"import unittest\n"
"\n"
"class TestStatisticalFunctions(unittest.TestCase):\n"
"\n"
"    def test_average(self):\n"
"        self.assertEqual(average([20, 30, 70]), 40.0)\n"
"        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n"
"        with self.assertRaises(ZeroDivisionError):\n"
"            average([])\n"
"        with self.assertRaises(TypeError):\n"
"            average(20, 30, 70)\n"
"\n"
"unittest.main()  # Calling from the command line invokes all tests"
msgstr ""
"import unittest\n"
"\n"
"class TestStatisticalFunctions(unittest.TestCase):\n"
"\n"
"    def test_average(self):\n"
"        self.assertEqual(average([20, 30, 70]), 40.0)\n"
"        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n"
"        with self.assertRaises(ZeroDivisionError):\n"
"            average([])\n"
"        with self.assertRaises(TypeError):\n"
"            average(20, 30, 70)\n"
"\n"
"unittest.main()  # 从命令行调用时会执行所有测试"

#: ../../tutorial/stdlib.rst:328
msgid "Batteries Included"
msgstr "自带电池"

#: ../../tutorial/stdlib.rst:330
msgid ""
"Python has a \"batteries included\" philosophy.  This is best seen through "
"the sophisticated and robust capabilities of its larger packages. For "
"example:"
msgstr "Python有“自带电池”的理念。通过其包的复杂和强大功能可以最好地看到这一点。例如:"

#: ../../tutorial/stdlib.rst:333
msgid ""
"The :mod:`xmlrpc.client` and :mod:`xmlrpc.server` modules make implementing "
"remote procedure calls into an almost trivial task.  Despite the modules' "
"names, no direct knowledge or handling of XML is needed."
msgstr ""
":mod:`xmlrpc.client` 和 :mod:`xmlrpc.server` 模块使得实现远程过程调用变成了小菜一碟。 "
"尽管存在于模块名称中，但用户不需要直接了解或处理 XML。"

#: ../../tutorial/stdlib.rst:337
msgid ""
"The :mod:`email` package is a library for managing email messages, including"
" MIME and other :rfc:`2822`-based message documents. Unlike :mod:`smtplib` "
"and :mod:`poplib` which actually send and receive messages, the email "
"package has a complete toolset for building or decoding complex message "
"structures (including attachments) and for implementing internet encoding "
"and header protocols."
msgstr ""
" :mod:`email` 包是一个用于管理电子邮件的库，包括MIME和其他符合 :rfc:`2822` 规范的邮件文档。与 "
":mod:`smtplib` 和 :mod:`poplib` "
"不同（它们实际上做的是发送和接收消息），电子邮件包提供完整的工具集，用于构建或解码复杂的消息结构（包括附件）以及实现互联网编码和标头协议。"

#: ../../tutorial/stdlib.rst:344
msgid ""
"The :mod:`json` package provides robust support for parsing this popular "
"data interchange format.  The :mod:`csv` module supports direct reading and "
"writing of files in Comma-Separated Value format, commonly supported by "
"databases and spreadsheets.  XML processing is supported by the "
":mod:`xml.etree.ElementTree`, :mod:`xml.dom` and :mod:`xml.sax` packages. "
"Together, these modules and packages greatly simplify data interchange "
"between Python applications and other tools."
msgstr ""
" :mod:`json` 包为解析这种流行的数据交换格式提供了强大的支持。 :mod:`csv` "
"模块支持以逗号分隔值格式直接读取和写入文件，这种格式通常为数据库和电子表格所支持。 XML 处理由 "
":mod:`xml.etree.ElementTree` ， :mod:`xml.dom` 和 :mod:`xml.sax` "
"包支持。这些模块和软件包共同大大简化了 Python 应用程序和其他工具之间的数据交换。"

#: ../../tutorial/stdlib.rst:353
msgid ""
"The :mod:`sqlite3` module is a wrapper for the SQLite database library, "
"providing a persistent database that can be updated and accessed using "
"slightly nonstandard SQL syntax."
msgstr ""
" :mod:`sqlite3` 模块是 SQLite 数据库库的包装器，提供了一个可以使用稍微非标准的 SQL 语法更新和访问的持久数据库。"

#: ../../tutorial/stdlib.rst:357
msgid ""
"Internationalization is supported by a number of modules including "
":mod:`gettext`, :mod:`locale`, and the :mod:`codecs` package."
msgstr "国际化由许多模块支持，包括 :mod:`gettext` ， :mod:`locale` ，以及 :mod:`codecs` 包。"

#: ../../tutorial/stdlib.rst:27
msgid "built-in function"
msgstr "内置函数"

#: ../../tutorial/stdlib.rst:27
msgid "help"
msgstr "help"
