# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# lqks, 2024
# Freesand Leo <yuqinju@163.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2024-07-20 00:54+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr "以下API将会被移除，尽管具体时间还未确定。"

#: ../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are "
"deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to "
":meth:`~argparse.ArgumentParser.add_argument_group` is now deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

#: ../../deprecations/pending-removal-in-future.rst:18
msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``。"

#: ../../deprecations/pending-removal-in-future.rst:19
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature"
" is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"生成器: ``throw(type, exc, tb)`` 和 ``athrow(type, exc, tb)`` 签名已被弃用：请改用 "
"``throw(exc)`` 和 ``athrow(exc)``，即单参数签名。"

#: ../../deprecations/pending-removal-in-future.rst:22
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords "
":keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, "
":keyword:`in`, :keyword:`is` and :keyword:`or`.  In a future release it will"
" be changed to a syntax error. (:gh:`87999`)"
msgstr ""
"目前 Python 接受数字类字面值后面紧跟关键字的写法，例如 ``0in x``, ``1or x``, ``0if 1else 2``。 它允许像 "
"``[0x1for x in y]`` 这样令人困惑且有歧义的表达式 (它可以被解读为 ``[0x1 for x in y]`` 或者 ``[0x1f "
"or x in y]``)。 如果数字类字面值后面紧跟关键字 :keyword:`and`, :keyword:`else`, "
":keyword:`for`, :keyword:`if`, :keyword:`in`, :keyword:`is` 和 :keyword:`or` "
"中的一个将会引发语法警告。 在未来的版本中它将改为语法错误。 (:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type:"
" these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"对 ``__index__()`` 和 ``__int__()`` 方法返回非 int 类型的支持：将要求这些方法必须返回 :class:`int` "
"的子类的实例。"

#: ../../deprecations/pending-removal-in-future.rst:33
msgid ""
"Support for ``__float__()`` method returning a strict subclass of "
":class:`float`: these methods will be required to return an instance of "
":class:`float`."
msgstr ""
"对 ``__float__()`` 方法返回 :class:`float` 的子类的支持：将要求这些方法必须返回 :class:`float` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:36
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of "
":class:`complex`: these methods will be required to return an instance of "
":class:`complex`."
msgstr ""
"对 ``__complex__()`` 方法返回 :class:`complex` 的子类的支持：将要求这些方法必须返回 "
":class:`complex` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:39
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "将 ``int()`` 委托给 ``__trunc__()`` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:40
msgid ""
"Passing a complex number as the *real* or *imag* argument in the "
":func:`complex` constructor is now deprecated; it should only be passed as a"
" single positional argument. (Contributed by Serhiy Storchaka in "
":gh:`109218`.)"
msgstr ""
"传入一个复数作为 :func:`complex` 构造器中的 *real* 或 *imag* 参数的做法现在已被弃用；它应当仅作为单个位置参数被传入。 "
"（由 Serhiy Storchaka 在 :gh:`109218` 中贡献。）.)"

#: ../../deprecations/pending-removal-in-future.rst:45
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and "
":data:`calendar.FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: ``calendar.January`` 和 ``calendar.February`` 常量已被弃用并由 "
":data:`calendar.JANUARY` 和 :data:`calendar.FEBRUARY` 替代。 （由 Prince Roshan 在 "
":gh:`103636` 中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:50
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. "
"(:gh:`133038`)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:52
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ":attr:`codeobject.co_lnotab`: 改用 :meth:`codeobject.co_lines` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:55
msgid ":mod:`datetime`:"
msgstr ":mod:`datetime`:"

#: ../../deprecations/pending-removal-in-future.rst:57
msgid ""
":meth:`~datetime.datetime.utcnow`: use "
"``datetime.datetime.now(tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: 使用 "
"``datetime.datetime.now(tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:59
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use "
"``datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: 使用 "
"``datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:62
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: 复数值必须是一个整数。"

#: ../../deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` *debug_override* 形参已被弃用：改用 "
"*optimization* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

#: ../../deprecations/pending-removal-in-future.rst:71
msgid "``EntryPoints`` tuple interface."
msgstr "``EntryPoints`` 元组接口。"

#: ../../deprecations/pending-removal-in-future.rst:72
msgid "Implicit ``None`` on return values."
msgstr "返回值中隐式的 ``None``。"

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: ``warn()`` 方法自 Python 3.3 起已被弃用，请改用 "
":meth:`~logging.warning`。"

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ":mod:`mailbox`: 对 StringIO 输入和文本模式的使用已被弃用，改用 BytesIO 和二进制模式。"

#: ../../deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: 在多线程的进程中调用 :func:`os.register_at_fork`。"

#: ../../deprecations/pending-removal-in-future.rst:82
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is"
" deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: 使用元组值作为 *exc_info* 形参的做法已被弃用，应使用异常实例。"

#: ../../deprecations/pending-removal-in-future.rst:85
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and"
" replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: 现在对于正则表达式中的数字分组引用和分组名称将应用更严格的规则。 现在只接受 ASCII 数字序列作为数字引用。 "
"字节串模式和替换字符串中的分组名称现在只能包含 ASCII 字母和数字以及下划线。 （由 Serhiy Storchaka 在 :gh:`91760` "
"中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ":mod:`!sre_compile`, :mod:`!sre_constants` 和 :mod:`!sre_parse` 模块。"

#: ../../deprecations/pending-removal-in-future.rst:94
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in"
" Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree` 的 *onerror* 形参在 Python 3.12 中已被弃用；请改用 "
"*onexc* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:97
msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` 选项和协议："

#: ../../deprecations/pending-removal-in-future.rst:99
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` 不带 protocol 参数的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:100
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and "
":meth:`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` 和 "
":meth:`!selected_npn_protocol` 已被弃用：请改用 ALPN."

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:110
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:111
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:112
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` 的方法："

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Condition.notifyAll`: use "
":meth:`~threading.Condition.notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: 使用 "
":meth:`~threading.Condition.notify_all`。"

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ":meth:`!threading.Event.isSet`: 使用 :meth:`~threading.Event.is_set`。"

#: ../../deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use "
":attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: 使用 "
":attr:`threading.Thread.daemon` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:120
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use "
":attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: 使用 "
":attr:`threading.Thread.name` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ""
":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: 使用 :meth:`threading.current_thread`。"

#: ../../deprecations/pending-removal-in-future.rst:123
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`: 使用 :meth:`threading.active_count`。"

#: ../../deprecations/pending-removal-in-future.rst:125
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)。"

#: ../../deprecations/pending-removal-in-future.rst:127
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

#: ../../deprecations/pending-removal-in-future.rst:132
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: 从测试用例返回不为 ``None`` 的值的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:135
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ":mod:`urllib.parse` 函数已被弃用：改用 :func:`~urllib.parse.urlparse`"

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splithost()``"
msgstr "``splithost()``"

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:141
msgid "``splitport()``"
msgstr "``splitport()``"

#: ../../deprecations/pending-removal-in-future.rst:142
msgid "``splitquery()``"
msgstr "``splitquery()``"

#: ../../deprecations/pending-removal-in-future.rst:143
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:144
msgid "``splittype()``"
msgstr "``splittype()``"

#: ../../deprecations/pending-removal-in-future.rst:145
msgid "``splituser()``"
msgstr "``splituser()``"

#: ../../deprecations/pending-removal-in-future.rst:146
msgid "``splitvalue()``"
msgstr "``splitvalue()``"

#: ../../deprecations/pending-removal-in-future.rst:147
msgid "``to_bytes()``"
msgstr "``to_bytes()``"

#: ../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` 不应执行部分写入。"

#: ../../deprecations/pending-removal-in-future.rst:152
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an "
":class:`~xml.etree.ElementTree.Element` is deprecated. In a future release "
"it will always return ``True``. Prefer explicit ``len(elem)`` or ``elem is "
"not None`` tests instead."
msgstr ""
":mod:`xml.etree.ElementTree`: 对 :class:`~xml.etree.ElementTree.Element` "
"的真值测试已被弃用。 在未来的发布版中它将始终返回 ``True``。 建议改用显式的 ``len(elem)`` 或 ``elem is not "
"None`` 测试。"

#: ../../deprecations/pending-removal-in-future.rst:157
msgid ""
":func:`sys._clear_type_cache` is deprecated: use "
":func:`sys._clear_internal_caches` instead."
msgstr ""
