# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:48+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/argparse.rst:5
msgid "Argparse Tutorial"
msgstr "argparse 教程"

#: ../../howto/argparse.rst:0
msgid "author"
msgstr "作者"

#: ../../howto/argparse.rst:7
msgid "Tshepang Mbambo"
msgstr "Tshepang Mbambo"

#: ../../howto/argparse.rst:11
msgid ""
"This tutorial is intended to be a gentle introduction to :mod:`argparse`, "
"the recommended command-line parsing module in the Python standard library."
msgstr "这篇教程旨在作为 :mod:`argparse` 的入门介绍，此模块是 Python 标准库中推荐的命令行解析模块。"

#: ../../howto/argparse.rst:16
msgid ""
"The standard library includes two other libraries directly related to "
"command-line parameter processing: the lower level :mod:`optparse` module "
"(which may require more code to configure for a given application, but also "
"allows an application to request behaviors that ``argparse`` doesn't "
"support), and the very low level :mod:`getopt` (which specifically serves as"
" an equivalent to the :c:func:`!getopt` family of functions available to C "
"programmers). While neither of those modules is covered directly in this "
"guide, many of the core concepts in ``argparse`` first originated in "
"``optparse``, so some aspects of this tutorial will also be relevant to "
"``optparse`` users."
msgstr ""
"标准库还包括另两个与命令行形参处理直接相关的库：低层级的 :mod:`optparse` 模块 "
"(对于特定应用程序它可能需要更多的代码来配置，但也允许应用程序请求 ``argparse`` 所不支持的行为)，以及更低层级的 "
":mod:`getopt` (它被作为供 C 程序员使用的 :c:func:`!getopt` 函数族的等价物)。 "
"这些模块并未在本指南中直接介绍，``argparse`` 中的许多核心概念最初都是来自 ``optparse``，因此本教程的某些部分对 "
"``optparse`` 用户来说也是有用的。"

#: ../../howto/argparse.rst:29
msgid "Concepts"
msgstr "概念"

#: ../../howto/argparse.rst:31
msgid ""
"Let's show the sort of functionality that we are going to explore in this "
"introductory tutorial by making use of the :command:`ls` command:"
msgstr "让我们利用 :command:`ls` 命令来展示我们将要在这篇入门教程中探索的功能："

#: ../../howto/argparse.rst:34
msgid ""
"$ ls\n"
"cpython  devguide  prog.py  pypy  rm-unused-function.patch\n"
"$ ls pypy\n"
"ctypes_configure  demo  dotviewer  include  lib_pypy  lib-python ...\n"
"$ ls -l\n"
"total 20\n"
"drwxr-xr-x 19 wena wena 4096 Feb 18 18:51 cpython\n"
"drwxr-xr-x  4 wena wena 4096 Feb  8 12:04 devguide\n"
"-rwxr-xr-x  1 wena wena  535 Feb 19 00:05 prog.py\n"
"drwxr-xr-x 14 wena wena 4096 Feb  7 00:59 pypy\n"
"-rw-r--r--  1 wena wena  741 Feb 18 01:01 rm-unused-function.patch\n"
"$ ls --help\n"
"Usage: ls [OPTION]... [FILE]...\n"
"List information about the FILEs (the current directory by default).\n"
"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n"
"..."
msgstr ""
"$ ls\n"
"cpython  devguide  prog.py  pypy  rm-unused-function.patch\n"
"$ ls pypy\n"
"ctypes_configure  demo  dotviewer  include  lib_pypy  lib-python ...\n"
"$ ls -l\n"
"total 20\n"
"drwxr-xr-x 19 wena wena 4096 Feb 18 18:51 cpython\n"
"drwxr-xr-x  4 wena wena 4096 Feb  8 12:04 devguide\n"
"-rwxr-xr-x  1 wena wena  535 Feb 19 00:05 prog.py\n"
"drwxr-xr-x 14 wena wena 4096 Feb  7 00:59 pypy\n"
"-rw-r--r--  1 wena wena  741 Feb 18 01:01 rm-unused-function.patch\n"
"$ ls --help\n"
"Usage: ls [OPTION]... [FILE]...\n"
"List information about the FILEs (the current directory by default).\n"
"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n"
"..."

#: ../../howto/argparse.rst:53
msgid "A few concepts we can learn from the four commands:"
msgstr "我们可以从这四个命令中学到几个概念："

#: ../../howto/argparse.rst:55
msgid ""
"The :command:`ls` command is useful when run without any options at all. It "
"defaults to displaying the contents of the current directory."
msgstr ":command:`ls` 是一个即使在运行的时候没有提供任何选项，也非常有用的命令。在默认情况下他会输出当前文件夹包含的文件和文件夹。"

#: ../../howto/argparse.rst:58
msgid ""
"If we want beyond what it provides by default, we tell it a bit more. In "
"this case, we want it to display a different directory, ``pypy``. What we "
"did is specify what is known as a positional argument. It's named so because"
" the program should know what to do with the value, solely based on where it"
" appears on the command line. This concept is more relevant to a command "
"like :command:`cp`, whose most basic usage is ``cp SRC DEST``. The first "
"position is *what you want copied,* and the second position is *where you "
"want it copied to*."
msgstr ""
"如果我们想要使用比它默认提供的更多功能，我们需要告诉该命令更多信息。在这个例子里，我们想要查看一个不同的目录，``pypy``。我们所做的是指定所谓的位置参数。之所以这样命名，是因为程序应该如何处理该参数值，完全取决于它在命令行出现的位置。更能体现这个概念的命令如"
" :command:`cp`，它最基本的用法是 ``cp SRC "
"DEST``。第一个位置参数指的是*你想要复制的*，第二个位置参数指的是*你想要复制到的位置*。"

#: ../../howto/argparse.rst:67
msgid ""
"Now, say we want to change behaviour of the program. In our example, we "
"display more info for each file instead of just showing the file names. The "
"``-l`` in that case is known as an optional argument."
msgstr ""
"现在假设我们想要改变这个程序的行为。在我们的例子中，我们不仅仅只是输出每个文件的文件名，还输出了更多信息。在这个例子中，``-l`` 被称为可选参数。"

#: ../../howto/argparse.rst:71
msgid ""
"That's a snippet of the help text. It's very useful in that you can come "
"across a program you have never used before, and can figure out how it works"
" simply by reading its help text."
msgstr "这是一段帮助文档的文字。它是非常有用的，因为当你遇到一个你从未使用过的程序时，你可以通过阅读它的帮助文档来弄清楚它是如何运行的。"

#: ../../howto/argparse.rst:77
msgid "The basics"
msgstr "基础"

#: ../../howto/argparse.rst:79
msgid "Let us start with a very simple example which does (almost) nothing::"
msgstr "让我们从一个简单到（几乎）什么也做不了的例子开始："

#: ../../howto/argparse.rst:81
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.parse_args()"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.parse_args()"

#: ../../howto/argparse.rst:85 ../../howto/argparse.rst:193
#: ../../howto/argparse.rst:214
msgid "Following is a result of running the code:"
msgstr "以下是该代码的运行结果："

#: ../../howto/argparse.rst:87
msgid ""
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py --verbose\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: --verbose\n"
"$ python prog.py foo\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: foo"
msgstr ""
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py --verbose\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: --verbose\n"
"$ python prog.py foo\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: foo"

#: ../../howto/argparse.rst:102 ../../howto/argparse.rst:259
#: ../../howto/argparse.rst:303
msgid "Here is what is happening:"
msgstr "程序运行情况如下："

#: ../../howto/argparse.rst:104
msgid ""
"Running the script without any options results in nothing displayed to "
"stdout. Not so useful."
msgstr "在没有任何选项的情况下运行脚本不会在标准输出显示任何内容。这没有什么用处。"

#: ../../howto/argparse.rst:107
msgid ""
"The second one starts to display the usefulness of the :mod:`argparse` "
"module. We have done almost nothing, but already we get a nice help message."
msgstr "第二行代码开始展现出 :mod:`argparse` 模块的作用。我们几乎什么也没有做，但已经得到一条很好的帮助信息。"

#: ../../howto/argparse.rst:110
msgid ""
"The ``--help`` option, which can also be shortened to ``-h``, is the only "
"option we get for free (i.e. no need to specify it). Specifying anything "
"else results in an error. But even then, we do get a useful usage message, "
"also for free."
msgstr ""
"``--help`` 选项，也可缩写为 "
"``-h``，是唯一一个可以直接使用的选项（即不需要指定该选项的内容）。指定任何内容都会导致错误。即便如此，我们也能直接得到一条有用的用法信息。"

#: ../../howto/argparse.rst:117
msgid "Introducing Positional arguments"
msgstr "位置参数介绍"

#: ../../howto/argparse.rst:119
msgid "An example::"
msgstr "举个例子："

#: ../../howto/argparse.rst:121
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"

#: ../../howto/argparse.rst:127
msgid "And running the code:"
msgstr "运行此程序："

#: ../../howto/argparse.rst:129
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] echo\n"
"prog.py: error: the following arguments are required: echo\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py foo\n"
"foo"
msgstr ""
"$ python prog.py\n"
"usage: prog.py [-h] echo\n"
"prog.py: error: the following arguments are required: echo\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py foo\n"
"foo"

#: ../../howto/argparse.rst:145
msgid "Here is what's happening:"
msgstr "程序运行情况如下："

#: ../../howto/argparse.rst:147
msgid ""
"We've added the :meth:`~ArgumentParser.add_argument` method, which is what "
"we use to specify which command-line options the program is willing to "
"accept. In this case, I've named it ``echo`` so that it's in line with its "
"function."
msgstr ""
"我们增加了 :meth:`~ArgumentParser.add_argument` 方法，该方法用于指定程序将能接受哪些命令行选项。 "
"在这个例子中，我将它命名为 ``echo`` 以与其对应的函数保持一致。"

#: ../../howto/argparse.rst:151
msgid "Calling our program now requires us to specify an option."
msgstr "现在调用我们的程序必须要指定一个选项。"

#: ../../howto/argparse.rst:153
msgid ""
"The :meth:`~ArgumentParser.parse_args` method actually returns some data "
"from the options specified, in this case, ``echo``."
msgstr ""
":meth:`~ArgumentParser.parse_args` 方法实际将返回来自指定选项的某些数据，在这个例子中是 ``echo``。"

#: ../../howto/argparse.rst:156
msgid ""
"The variable is some form of 'magic' that :mod:`argparse` performs for free "
"(i.e. no need to specify which variable that value is stored in). You will "
"also notice that its name matches the string argument given to the method, "
"``echo``."
msgstr ""
"这一变量是 :mod:`argparse` 免费施放的某种 "
"“魔法”（即是说，不需要指定哪个变量是存储哪个值的）。你也可以注意到，这一名称与传递给方法的字符串参数一致，都是  ``echo``。"

#: ../../howto/argparse.rst:161
msgid ""
"Note however that, although the help display looks nice and all, it "
"currently is not as helpful as it can be. For example we see that we got "
"``echo`` as a positional argument, but we don't know what it does, other "
"than by guessing or by reading the source code. So, let's make it a bit more"
" useful::"
msgstr ""
"然而请注意，尽管显示的帮助看起来清楚完整，但它可以比现在更有帮助。比如我们可以知道 ``echo`` "
"是一个位置参数，但我们除了靠猜或者看源代码，没法知道它是用来干什么的。所以，我们可以把它改造得更有用："

#: ../../howto/argparse.rst:166
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\", help=\"echo the string you use here\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\", help=\"echo the string you use here\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"

#: ../../howto/argparse.rst:172
msgid "And we get:"
msgstr "然后我们得到："

#: ../../howto/argparse.rst:174
msgid ""
"$ python prog.py -h\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo        echo the string you use here\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"
msgstr ""
"$ python prog.py -h\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo        echo the string you use here\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"

#: ../../howto/argparse.rst:185
msgid "Now, how about doing something even more useful::"
msgstr "现在，来做一些更有用的事情："

#: ../../howto/argparse.rst:187
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given number\")\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given number\")\n"
"args = parser.parse_args()\n"
"print(args.square**2)"

#: ../../howto/argparse.rst:195
msgid ""
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 5, in <module>\n"
"    print(args.square**2)\n"
"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
msgstr ""
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 5, in <module>\n"
"    print(args.square**2)\n"
"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"

#: ../../howto/argparse.rst:203
msgid ""
"That didn't go so well. That's because :mod:`argparse` treats the options we"
" give it as strings, unless we tell it otherwise. So, let's tell "
":mod:`argparse` to treat that input as an integer::"
msgstr ""
"进展不太顺利。那是因为 :mod:`argparse` 会把我们传递给它的选项视作为字符串，除非我们告诉它别这样。所以，让我们来告诉 "
":mod:`argparse` 来把这一输入视为整数："

#: ../../howto/argparse.rst:207
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given number\",\n"
"                    type=int)\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given number\",\n"
"                    type=int)\n"
"args = parser.parse_args()\n"
"print(args.square**2)"

#: ../../howto/argparse.rst:216
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py four\n"
"usage: prog.py [-h] square\n"
"prog.py: error: argument square: invalid int value: 'four'"
msgstr ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py four\n"
"usage: prog.py [-h] square\n"
"prog.py: error: argument square: invalid int value: 'four'"

#: ../../howto/argparse.rst:224
msgid ""
"That went well. The program now even helpfully quits on bad illegal input "
"before proceeding."
msgstr "做得不错。当这个程序在收到错误的无效的输入时，它甚至能在执行计算之前先退出，还能显示很有帮助的错误信息。"

#: ../../howto/argparse.rst:229
msgid "Introducing Optional arguments"
msgstr "可选参数介绍"

#: ../../howto/argparse.rst:231
msgid ""
"So far we have been playing with positional arguments. Let us have a look on"
" how to add optional ones::"
msgstr "到目前为止，我们一直在研究位置参数。让我们看看如何添加可选的："

#: ../../howto/argparse.rst:234
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbosity\", help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"if args.verbosity:\n"
"    print(\"verbosity turned on\")"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbosity\", help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"if args.verbosity:\n"
"    print(\"verbosity turned on\")"

#: ../../howto/argparse.rst:241 ../../howto/argparse.rst:287
#: ../../howto/argparse.rst:403 ../../howto/argparse.rst:437
msgid "And the output:"
msgstr "和输出："

#: ../../howto/argparse.rst:243
msgid ""
"$ python prog.py --verbosity 1\n"
"verbosity turned on\n"
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --verbosity VERBOSITY\n"
"                        increase output verbosity\n"
"$ python prog.py --verbosity\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"prog.py: error: argument --verbosity: expected one argument"
msgstr ""
"$ python prog.py --verbosity 1\n"
"verbosity turned on\n"
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --verbosity VERBOSITY\n"
"                        increase output verbosity\n"
"$ python prog.py --verbosity\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"prog.py: error: argument --verbosity: expected one argument"

#: ../../howto/argparse.rst:261
msgid ""
"The program is written so as to display something when ``--verbosity`` is "
"specified and display nothing when not."
msgstr "这一程序被设计为当指定 ``--verbosity`` 选项时显示某些东西，否则不显示。"

#: ../../howto/argparse.rst:264
msgid ""
"To show that the option is actually optional, there is no error when running"
" the program without it. Note that by default, if an optional argument isn't"
" used, the relevant variable, in this case ``args.verbosity``, is given "
"``None`` as a value, which is the reason it fails the truth test of the "
":keyword:`if` statement."
msgstr ""
"为表明此选项确实是可选的，当不附带该选项运行程序时将不会提示任何错误。 请注意在默认情况下，如果一个可选参数未被使用，则关联的变量，在这个例子中是 "
"``args.verbosity``，将被赋值为 ``None``，这也就是它在 :keyword:`if` 语句中无法通过真值检测的原因。"

#: ../../howto/argparse.rst:270
msgid "The help message is a bit different."
msgstr "帮助信息有点不同。"

#: ../../howto/argparse.rst:272
msgid ""
"When using the ``--verbosity`` option, one must also specify some value, any"
" value."
msgstr "使用 ``--verbosity`` 选项时，必须指定一个值，但可以是任何值。"

#: ../../howto/argparse.rst:275
msgid ""
"The above example accepts arbitrary integer values for ``--verbosity``, but "
"for our simple program, only two values are actually useful, ``True`` or "
"``False``. Let's modify the code accordingly::"
msgstr ""
"上述例子接受任何整数值作为 ``--verbosity`` 的参数，但对于我们的简单程序而言，只有两个值有实际意义：``True`` 或者 "
"``False``。让我们据此修改代码："

#: ../../howto/argparse.rst:279
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbose\", help=\"increase output verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbose\", help=\"increase output verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"

#: ../../howto/argparse.rst:289
msgid ""
"$ python prog.py --verbose\n"
"verbosity turned on\n"
"$ python prog.py --verbose 1\n"
"usage: prog.py [-h] [--verbose]\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbose]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --verbose   increase output verbosity"
msgstr ""
"$ python prog.py --verbose\n"
"verbosity turned on\n"
"$ python prog.py --verbose 1\n"
"usage: prog.py [-h] [--verbose]\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbose]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --verbose   increase output verbosity"

#: ../../howto/argparse.rst:305
msgid ""
"The option is now more of a flag than something that requires a value. We "
"even changed the name of the option to match that idea. Note that we now "
"specify a new keyword, ``action``, and give it the value ``\"store_true\"``."
" This means that, if the option is specified, assign the value ``True`` to "
"``args.verbose``. Not specifying it implies ``False``."
msgstr ""
"现在此选项更像是一个旗标而不需要接受特定的值。 我们甚至改变了此选项的名字来匹配这一点。 请注意我们现在指定了一个新的关键词 "
"``action``，并将其赋值为 ``\"store_true\"``。 这意味着，如果指定了该选项，则将值 ``True`` 赋给 "
"``args.verbose``。 如未指定则表示其值为 ``False``。"

#: ../../howto/argparse.rst:312
msgid ""
"It complains when you specify a value, in true spirit of what flags actually"
" are."
msgstr "当你为其指定一个值时，它会报错，符合作为标志的真正的精神。"

#: ../../howto/argparse.rst:315
msgid "Notice the different help text."
msgstr "留意不同的帮助文字。"

#: ../../howto/argparse.rst:319
msgid "Short options"
msgstr "短选项"

#: ../../howto/argparse.rst:321
msgid ""
"If you are familiar with command line usage, you will notice that I haven't "
"yet touched on the topic of short versions of the options. It's quite "
"simple::"
msgstr "如果你熟悉命令行的用法，你会发现我还没讲到这一选项的短版本。这也很简单："

#: ../../howto/argparse.rst:325
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"-v\", \"--verbose\", help=\"increase output verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"-v\", \"--verbose\", help=\"increase output verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"

#: ../../howto/argparse.rst:333
msgid "And here goes:"
msgstr "效果就像这样："

#: ../../howto/argparse.rst:335
msgid ""
"$ python prog.py -v\n"
"verbosity turned on\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose  increase output verbosity"
msgstr ""
"$ python prog.py -v\n"
"verbosity turned on\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose  increase output verbosity"

#: ../../howto/argparse.rst:346
msgid "Note that the new ability is also reflected in the help text."
msgstr "可以注意到，这一新的能力也反映在帮助文本里。"

#: ../../howto/argparse.rst:350
msgid "Combining Positional and Optional arguments"
msgstr "结合位置参数和可选参数"

#: ../../howto/argparse.rst:352
msgid "Our program keeps growing in complexity::"
msgstr "我们的程序变得越来越复杂了："

#: ../../howto/argparse.rst:354
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbose:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbose:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"else:\n"
"    print(answer)"

#: ../../howto/argparse.rst:367
msgid "And now the output:"
msgstr "接着是输出："

#: ../../howto/argparse.rst:369
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: the following arguments are required: square\n"
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 --verbose\n"
"the square of 4 equals 16\n"
"$ python prog.py --verbose 4\n"
"the square of 4 equals 16"
msgstr ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: the following arguments are required: square\n"
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 --verbose\n"
"the square of 4 equals 16\n"
"$ python prog.py --verbose 4\n"
"the square of 4 equals 16"

#: ../../howto/argparse.rst:381
msgid "We've brought back a positional argument, hence the complaint."
msgstr "我们带回了一个位置参数，结果发生了报错。"

#: ../../howto/argparse.rst:383
msgid "Note that the order does not matter."
msgstr "注意顺序无关紧要。"

#: ../../howto/argparse.rst:385
msgid ""
"How about we give this program of ours back the ability to have multiple "
"verbosity values, and actually get to use them::"
msgstr "给我们的程序加上接受多个冗长度的值，然后实际来用用："

#: ../../howto/argparse.rst:388
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"

#: ../../howto/argparse.rst:405
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"usage: prog.py [-h] [-v VERBOSITY] square\n"
"prog.py: error: argument -v/--verbosity: expected one argument\n"
"$ python prog.py 4 -v 1\n"
"4^2 == 16\n"
"$ python prog.py 4 -v 2\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 3\n"
"16"
msgstr ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"usage: prog.py [-h] [-v VERBOSITY] square\n"
"prog.py: error: argument -v/--verbosity: expected one argument\n"
"$ python prog.py 4 -v 1\n"
"4^2 == 16\n"
"$ python prog.py 4 -v 2\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 3\n"
"16"

#: ../../howto/argparse.rst:419
msgid ""
"These all look good except the last one, which exposes a bug in our program."
" Let's fix it by restricting the values the ``--verbosity`` option can "
"accept::"
msgstr ""
"除了最后一个，看上去都不错。最后一个暴露了我们的程序中有一个 bug。我们可以通过限制 ``--verbosity`` 选项可以接受的值来修复它："

#: ../../howto/argparse.rst:422
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int, choices=[0, 1, 2],\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int, choices=[0, 1, 2],\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"

#: ../../howto/argparse.rst:439
msgid ""
"$ python prog.py 4 -v 3\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"\n"
"positional arguments:\n"
"  square                display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbosity {0,1,2}\n"
"                        increase output verbosity"
msgstr ""
"$ python prog.py 4 -v 3\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"\n"
"positional arguments:\n"
"  square                display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbosity {0,1,2}\n"
"                        increase output verbosity"

#: ../../howto/argparse.rst:455
msgid ""
"Note that the change also reflects both in the error message as well as the "
"help string."
msgstr "注意这一改变同时反应在错误信息和帮助信息里。"

#: ../../howto/argparse.rst:458
msgid ""
"Now, let's use a different approach of playing with verbosity, which is "
"pretty common. It also matches the way the CPython executable handles its "
"own verbosity argument (check the output of ``python --help``)::"
msgstr ""
"现在，让我们使用另一种的方式来改变冗长度。这种方式更常见，也和 CPython 的可执行文件处理它自己的冗长度参数的方式一致（参考 ``python "
"--help`` 的输出）："

#: ../../howto/argparse.rst:462
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display the square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display the square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"

#: ../../howto/argparse.rst:477
msgid ""
"We have introduced another action, \"count\", to count the number of "
"occurrences of specific options."
msgstr "我们引入了另一种动作 \"count\"，来统计特定选项出现的次数。"

#: ../../howto/argparse.rst:481
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 -vv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 --verbosity --verbosity\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 1\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v] square\n"
"\n"
"positional arguments:\n"
"  square           display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity  increase output verbosity\n"
"$ python prog.py 4 -vvv\n"
"16"
msgstr ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 -vv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 --verbosity --verbosity\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 1\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v] square\n"
"\n"
"positional arguments:\n"
"  square           display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity  increase output verbosity\n"
"$ python prog.py 4 -vvv\n"
"16"

#: ../../howto/argparse.rst:506
msgid ""
"Yes, it's now more of a flag (similar to ``action=\"store_true\"``) in the "
"previous version of our script. That should explain the complaint."
msgstr "是的，它现在比前一版本更像是一个标志（和 ``action=\"store_true\"`` 相似）。这能解释它为什么报错。"

#: ../../howto/argparse.rst:509
msgid "It also behaves similar to \"store_true\" action."
msgstr "它也表现得与 “store_true” 的行为相似。"

#: ../../howto/argparse.rst:511
msgid ""
"Now here's a demonstration of what the \"count\" action gives. You've "
"probably seen this sort of usage before."
msgstr "这给出了一个关于 ``count`` 动作的效果的演示。你之前很可能应该已经看过这种用法。"

#: ../../howto/argparse.rst:514
msgid ""
"And if you don't specify the ``-v`` flag, that flag is considered to have "
"``None`` value."
msgstr "如果你不添加 ``-v`` 标志，这一标志的值会是 ``None``。"

#: ../../howto/argparse.rst:517
msgid ""
"As should be expected, specifying the long form of the flag, we should get "
"the same output."
msgstr "如期望的那样，添加该标志的长形态能够获得相同的输出。"

#: ../../howto/argparse.rst:520
msgid ""
"Sadly, our help output isn't very informative on the new ability our script "
"has acquired, but that can always be fixed by improving the documentation "
"for our script (e.g. via the ``help`` keyword argument)."
msgstr ""
"可惜的是，对于我们的脚本获得的新能力，我们的帮助输出并没有提供很多信息，但我们总是可以通过改善文档来修复这一问题（比如通过 ``help`` "
"关键字参数）。"

#: ../../howto/argparse.rst:524
msgid "That last output exposes a bug in our program."
msgstr "最后一个输出暴露了我们程序中的一个 bug。"

#: ../../howto/argparse.rst:527
msgid "Let's fix::"
msgstr "让我们修复一下："

#: ../../howto/argparse.rst:529
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"\n"
"# bugfix: replace == with >=\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"\n"
"# bugfix: replace == with >=\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"

#: ../../howto/argparse.rst:546
msgid "And this is what it gives:"
msgstr "这是它给我们的输出："

#: ../../howto/argparse.rst:548
msgid ""
"$ python prog.py 4 -vvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -vvvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 11, in <module>\n"
"    if args.verbosity >= 2:\n"
"TypeError: '>=' not supported between instances of 'NoneType' and 'int'"
msgstr ""
"$ python prog.py 4 -vvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -vvvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 11, in <module>\n"
"    if args.verbosity >= 2:\n"
"TypeError: '>=' not supported between instances of 'NoneType' and 'int'"

#: ../../howto/argparse.rst:561
msgid ""
"First output went well, and fixes the bug we had before. That is, we want "
"any value >= 2 to be as verbose as possible."
msgstr "第一组输出很好，修复了之前的 bug。也就是说，我们希望任何 >= 2 的值尽可能详尽。"

#: ../../howto/argparse.rst:564
msgid "Third output not so good."
msgstr "第三组输出并不理想。"

#: ../../howto/argparse.rst:566
msgid "Let's fix that bug::"
msgstr "让我们修复那个 bug："

#: ../../howto/argparse.rst:568
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"

#: ../../howto/argparse.rst:583
msgid ""
"We've just introduced yet another keyword, ``default``. We've set it to "
"``0`` in order to make it comparable to the other int values. Remember that "
"by default, if an optional argument isn't specified, it gets the ``None`` "
"value, and that cannot be compared to an int value (hence the "
":exc:`TypeError` exception)."
msgstr ""
"我们刚刚引入了又一个新的关键字 ``default``。我们把它设置为 ``0`` "
"来让它可以与其他整数值相互比较。记住，默认情况下如果一个可选参数没有被指定，它的值会是 ``None``，并且它不能和整数值相比较（所以产生了 "
":exc:`TypeError` 异常）。"

#: ../../howto/argparse.rst:590
msgid "And:"
msgstr "然后："

#: ../../howto/argparse.rst:592
msgid ""
"$ python prog.py 4\n"
"16"
msgstr ""
"$ python prog.py 4\n"
"16"

#: ../../howto/argparse.rst:597
msgid ""
"You can go quite far just with what we've learned so far, and we have only "
"scratched the surface. The :mod:`argparse` module is very powerful, and "
"we'll explore a bit more of it before we end this tutorial."
msgstr ""
"凭借我们目前已学的东西你就可以做到许多事情，而我们还仅仅学了一些皮毛而已。 :mod:`argparse` "
"模块是非常强大的，在结束本篇教程之前我们将再探索更多一些内容。"

#: ../../howto/argparse.rst:604
msgid "Getting a little more advanced"
msgstr "进行一些小小的改进"

#: ../../howto/argparse.rst:606
msgid ""
"What if we wanted to expand our tiny program to perform other powers, not "
"just squares::"
msgstr "如果我们想扩展我们的简短程序来执行其他幂次的运算，而不仅是乘方::"

#: ../../howto/argparse.rst:609
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")\n"
"else:\n"
"    print(answer)"

#: ../../howto/argparse.rst:623 ../../howto/argparse.rst:661
#: ../../howto/argparse.rst:877
msgid "Output:"
msgstr "输出："

#: ../../howto/argparse.rst:625
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] x y\n"
"prog.py: error: the following arguments are required: x, y\n"
"$ python prog.py -h\n"
"usage: prog.py [-h] [-v] x y\n"
"\n"
"positional arguments:\n"
"  x                the base\n"
"  y                the exponent\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16"
msgstr ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] x y\n"
"prog.py: error: the following arguments are required: x, y\n"
"$ python prog.py -h\n"
"usage: prog.py [-h] [-v] x y\n"
"\n"
"positional arguments:\n"
"  x                the base\n"
"  y                the exponent\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16"

#: ../../howto/argparse.rst:644
msgid ""
"Notice that so far we've been using verbosity level to *change* the text "
"that gets displayed. The following example instead uses verbosity level to "
"display *more* text instead::"
msgstr "请注意到目前为止我们一直在使用详细级别来 *更改* 所显示的文本。 以下示例则使用详细级别来显示 *更多的* 文本::"

#: ../../howto/argparse.rst:648
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"Running '{__file__}'\")\n"
"if args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == \", end=\"\")\n"
"print(answer)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"Running '{__file__}'\")\n"
"if args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == \", end=\"\")\n"
"print(answer)"

#: ../../howto/argparse.rst:663
msgid ""
"$ python prog.py 4 2\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -vv\n"
"Running 'prog.py'\n"
"4^2 == 16"
msgstr ""
"$ python prog.py 4 2\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -vv\n"
"Running 'prog.py'\n"
"4^2 == 16"

#: ../../howto/argparse.rst:677
msgid "Specifying ambiguous arguments"
msgstr "指定有歧义的参数"

#: ../../howto/argparse.rst:679
msgid ""
"When there is ambiguity in deciding whether an argument is positional or for"
" an argument, ``--`` can be used to tell :meth:`~ArgumentParser.parse_args` "
"that everything after that is a positional argument::"
msgstr ""
"当在确定一个参数是位置参数还是从属于另一个参数存在歧义时，可以使用 ``--`` 来告诉 "
":meth:`~ArgumentParser.parse_args` 在它之后的参数是位置参数::"

#: ../../howto/argparse.rst:683
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-n', nargs='+')\n"
">>> parser.add_argument('args', nargs='*')\n"
"\n"
">>> # ambiguous, so parse_args assumes it's an option\n"
">>> parser.parse_args(['-f'])\n"
"usage: PROG [-h] [-n N [N ...]] [args ...]\n"
"PROG: error: unrecognized arguments: -f\n"
"\n"
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(args=['-f'], n=None)\n"
"\n"
">>> # ambiguous, so the -n option greedily accepts arguments\n"
">>> parser.parse_args(['-n', '1', '2', '3'])\n"
"Namespace(args=[], n=['1', '2', '3'])\n"
"\n"
">>> parser.parse_args(['-n', '1', '--', '2', '3'])\n"
"Namespace(args=['2', '3'], n=['1'])"
msgstr ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-n', nargs='+')\n"
">>> parser.add_argument('args', nargs='*')\n"
"\n"
">>> # ambiguous, so parse_args assumes it's an option\n"
">>> parser.parse_args(['-f'])\n"
"usage: PROG [-h] [-n N [N ...]] [args ...]\n"
"PROG: error: unrecognized arguments: -f\n"
"\n"
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(args=['-f'], n=None)\n"
"\n"
">>> # ambiguous, so the -n option greedily accepts arguments\n"
">>> parser.parse_args(['-n', '1', '2', '3'])\n"
"Namespace(args=[], n=['1', '2', '3'])\n"
"\n"
">>> parser.parse_args(['-n', '1', '--', '2', '3'])\n"
"Namespace(args=['2', '3'], n=['1'])"

#: ../../howto/argparse.rst:704
msgid "Conflicting options"
msgstr "矛盾的选项"

#: ../../howto/argparse.rst:706
msgid ""
"So far, we have been working with two methods of an "
":class:`argparse.ArgumentParser` instance. Let's introduce a third one, "
":meth:`~ArgumentParser.add_mutually_exclusive_group`. It allows for us to "
"specify options that conflict with each other. Let's also change the rest of"
" the program so that the new functionality makes more sense: we'll introduce"
" the ``--quiet`` option, which will be the opposite of the ``--verbose`` "
"one::"
msgstr ""
"到目前为止，我们一直在使用 :class:`argparse.ArgumentParser` 实例的两个方法。 让我们再介绍第三个方法  "
":meth:`~ArgumentParser.add_mutually_exclusive_group`。 它允许我们指定彼此相冲突的选项。 "
"让我们再修改程序的其余部分以便使新功能更有意义：我们将引入 ``--quiet`` 选项，它将与 ``--verbose`` 的作用相反::"

#: ../../howto/argparse.rst:714
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"

#: ../../howto/argparse.rst:732
msgid ""
"Our program is now simpler, and we've lost some functionality for the sake "
"of demonstration. Anyways, here's the output:"
msgstr "我们的程序现在变得更简洁了，我们出于演示需要略去了一些功能。 无论如何，输出是这样的:"

#: ../../howto/argparse.rst:735
msgid ""
"$ python prog.py 4 2\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -q\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4 to the power 2 equals 16\n"
"$ python prog.py 4 2 -vq\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose\n"
"$ python prog.py 4 2 -v --quiet\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose"
msgstr ""
"$ python prog.py 4 2\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -q\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4 to the power 2 equals 16\n"
"$ python prog.py 4 2 -vq\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose\n"
"$ python prog.py 4 2 -v --quiet\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose"

#: ../../howto/argparse.rst:750
msgid ""
"That should be easy to follow. I've added that last output so you can see "
"the sort of flexibility you get, i.e. mixing long form options with short "
"form ones."
msgstr "这应该很容易理解。 我添加了末尾的输出这样你就可以看到其所达到的灵活性，即混合使用长和短两种形式的选项。"

#: ../../howto/argparse.rst:754
msgid ""
"Before we conclude, you probably want to tell your users the main purpose of"
" your program, just in case they don't know::"
msgstr "在我们收尾之前，你也许希望告诉你的用户这个程序的主要目标，以免他们还不清楚::"

#: ../../howto/argparse.rst:757
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(description=\"calculate X to the power of Y\")\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(description=\"calculate X to the power of Y\")\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"

#: ../../howto/argparse.rst:775
msgid ""
"Note that slight difference in the usage text. Note the ``[-v | -q]``, which"
" tells us that we can either use ``-v`` or ``-q``, but not both at the same "
"time:"
msgstr ""
"请注意用法文本中有细微的差异。 注意 ``[-v | -q]``，它的意思是说我们可以使用 ``-v`` 或 ``-q``，但不能同时使用两者："

#: ../../howto/argparse.rst:779 ../../howto/argparse.rst:806
msgid ""
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"\n"
"calculate X to the power of Y\n"
"\n"
"positional arguments:\n"
"  x              the base\n"
"  y              the exponent\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose\n"
"  -q, --quiet"
msgstr ""
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"\n"
"calculate X to the power of Y\n"
"\n"
"positional arguments:\n"
"  x              the base\n"
"  y              the exponent\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose\n"
"  -q, --quiet"

#: ../../howto/argparse.rst:797
msgid "How to translate the argparse output"
msgstr "如何翻译 argparse 的输出"

#: ../../howto/argparse.rst:799
msgid ""
"The output of the :mod:`argparse` module such as its help text and error "
"messages are all made translatable using the :mod:`gettext` module. This "
"allows applications to easily localize messages produced by :mod:`argparse`."
" See also :ref:`i18n-howto`."
msgstr ""
":mod:`argparse` 模块的输出例如它的帮助文本和错误消息都可以通过 :mod:`gettext` 模块实现翻译。 这允许应用程序轻松本地化 "
":mod:`argparse` 所产生的消息。 另请参见 :ref:`i18n-howto`。"

#: ../../howto/argparse.rst:804
msgid "For instance, in this :mod:`argparse` output:"
msgstr "例如，在这个 :mod:`argparse` 输出中:"

#: ../../howto/argparse.rst:822
msgid ""
"The strings ``usage:``, ``positional arguments:``, ``options:`` and ``show "
"this help message and exit`` are all translatable."
msgstr ""
"字符串 ``usage:``, ``positional arguments:``, ``options:`` 和 ``show this help "
"message and exit`` 都是可翻译的。"

#: ../../howto/argparse.rst:825
msgid ""
"In order to translate these strings, they must first be extracted into a "
"``.po`` file. For example, using `Babel <https://babel.pocoo.org/>`__, run "
"this command:"
msgstr ""
"要翻译这些字符串，必须先将它们提取到一个 ``.po`` 文件中。 例如，使用 `Babel "
"<https://babel.pocoo.org/>`__，运行这条命令:"

#: ../../howto/argparse.rst:829
msgid "$ pybabel extract -o messages.po /usr/lib/python3.12/argparse.py"
msgstr "$ pybabel extract -o messages.po /usr/lib/python3.12/argparse.py"

#: ../../howto/argparse.rst:833
msgid ""
"This command will extract all translatable strings from the :mod:`argparse` "
"module and output them into a file named ``messages.po``. This command "
"assumes that your Python installation is in ``/usr/lib``."
msgstr ""
"此命令将从 :mod:`argparse` 模块提取所有可翻译的字符串，并将其输出到名为 ``messages.po`` 的文件中。 此命令假定你的 "
"Python 安装位置为 ``/usr/lib``。"

#: ../../howto/argparse.rst:837
msgid ""
"You can find out the location of the :mod:`argparse` module on your system "
"using this script::"
msgstr "你可以使用以下脚本查找 :mod:`argparse` 模块在系统中的位置："

#: ../../howto/argparse.rst:840
msgid ""
"import argparse\n"
"print(argparse.__file__)"
msgstr ""
"import argparse\n"
"print(argparse.__file__)"

#: ../../howto/argparse.rst:843
msgid ""
"Once the messages in the ``.po`` file are translated and the translations "
"are installed using :mod:`gettext`, :mod:`argparse` will be able to display "
"the translated messages."
msgstr ""
"一旦 ``.po`` 文件中的文本信息翻译完毕并使用 :mod:`gettext` 安装了译文，:mod:`argparse` 将能显示翻译后的信息。"

#: ../../howto/argparse.rst:847
msgid ""
"To translate your own strings in the :mod:`argparse` output, use "
":mod:`gettext`."
msgstr "要翻译在 :mod:`argparse` 输出中的字符串，请使用 :mod:`gettext`。"

#: ../../howto/argparse.rst:850
msgid "Custom type converters"
msgstr "自定义类型转换器"

#: ../../howto/argparse.rst:852
msgid ""
"The :mod:`argparse` module allows you to specify custom type converters for "
"your command-line arguments. This allows you to modify user input before "
"it's stored in the :class:`argparse.Namespace`. This can be useful when you "
"need to pre-process the input before it is used in your program."
msgstr ""
":mod:`argparse` 模块允许您为命令行参数指定自定义类型转换器。 这使您能够在用户输入存储在 "
":class:`argparse.Namespace` 中之前对其进行修改。 当您需要在程序中使用输入之前对其进行预处理时，这会很有用。"

#: ../../howto/argparse.rst:857
msgid ""
"When using a custom type converter, you can use any callable that takes a "
"single string argument (the argument value) and returns the converted value."
" However, if you need to handle more complex scenarios, you can use a custom"
" action class with the **action** parameter instead."
msgstr ""
"使用自定义类型转换器时，您可以使用任何可调用对象，该对象接受单个字符串参数（参数值）并返回转换后的值。但是，如果需要处理更复杂的情况，可以使用带有  "
"**action** 形参的自定义动作类。"

#: ../../howto/argparse.rst:862
msgid ""
"For example, let's say you want to handle arguments with different prefixes "
"and process them accordingly::"
msgstr "例如，假设您希望处理带有不同前缀的参数并相应地进行处理::"

#: ../../howto/argparse.rst:865
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(prefix_chars='-+')\n"
"\n"
"parser.add_argument('-a', metavar='<value>', action='append',\n"
"                    type=lambda x: ('-', x))\n"
"parser.add_argument('+a', metavar='<value>', action='append',\n"
"                    type=lambda x: ('+', x))\n"
"\n"
"args = parser.parse_args()\n"
"print(args)"
msgstr ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(prefix_chars='-+')\n"
"\n"
"parser.add_argument('-a', metavar='<value>', action='append',\n"
"                    type=lambda x: ('-', x))\n"
"parser.add_argument('+a', metavar='<value>', action='append',\n"
"                    type=lambda x: ('+', x))\n"
"\n"
"args = parser.parse_args()\n"
"print(args)"

#: ../../howto/argparse.rst:879
msgid ""
"$ python prog.py -a value1 +a value2\n"
"Namespace(a=[('-', 'value1'), ('+', 'value2')])"
msgstr ""
"$ python prog.py -a value1 +a value2\n"
"Namespace(a=[('-', 'value1'), ('+', 'value2')])"

#: ../../howto/argparse.rst:884
msgid "In this example, we:"
msgstr "在这个例子中，我们："

#: ../../howto/argparse.rst:886
msgid ""
"Created a parser with custom prefix characters using the ``prefix_chars`` "
"parameter."
msgstr "使用 ``prefix_chars`` 形参创建了带有自定义前缀字符的解析器 。"

#: ../../howto/argparse.rst:889
msgid ""
"Defined two arguments, ``-a`` and ``+a``, which used the ``type`` parameter "
"to create custom type converters to store the value in a tuple with the "
"prefix."
msgstr "定义了两个参数 ``-a`` 和 ``+a``, 它们使用 ``type`` 形参创建自定义类型转换器，以便将值存储在带有前缀的元组中。"

#: ../../howto/argparse.rst:892
msgid ""
"Without the custom type converters, the arguments would have treated the "
"``-a`` and ``+a`` as the same argument, which would have been undesirable. "
"By using custom type converters, we were able to differentiate between the "
"two arguments."
msgstr ""
"如果没有自定义类型转换器，参数会将 ``-a`` 和 ``+a`` 视为同一个参数，这是不可取的。 通过使用自定义类型转换器，我们能够区分这两个参数。"

#: ../../howto/argparse.rst:897
msgid "Conclusion"
msgstr "后记"

#: ../../howto/argparse.rst:899
msgid ""
"The :mod:`argparse` module offers a lot more than shown here. Its docs are "
"quite detailed and thorough, and full of examples. Having gone through this "
"tutorial, you should easily digest them without feeling overwhelmed."
msgstr ""
"除了这里显示的内容，:mod:`argparse` 模块还提供了更多功能。 它的文档相当详细和完整，包含大量示例。 "
"完成这个教程之后，你应该能毫不困难地阅读该文档。"
