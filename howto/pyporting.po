# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/pyporting.rst:5
msgid "Porting Python 2 Code to Python 3"
msgstr "将 Python 2 代码迁移到 Python 3"

#: ../../howto/pyporting.rst:0
msgid "author"
msgstr "作者"

#: ../../howto/pyporting.rst:7
msgid "Brett Cannon"
msgstr "Brett Cannon"

#: ../../howto/pyporting.rstNone
msgid "Abstract"
msgstr "摘要"

#: ../../howto/pyporting.rst:11
msgid ""
"With Python 3 being the future of Python while Python 2 is still in active "
"use, it is good to have your project available for both major releases of "
"Python. This guide is meant to help you figure out how best to support both "
"Python 2 & 3 simultaneously."
msgstr ""
"Python 3 是 Python 的未来，但 Python 2 仍处于活跃使用阶段，最好让您的项目在两个主要版本的Python "
"上都可用。本指南旨在帮助您了解如何最好地同时支持 Python 2 和 3。"

#: ../../howto/pyporting.rst:16
msgid ""
"If you are looking to port an extension module instead of pure Python code, "
"please see :ref:`cporting-howto`."
msgstr "如果您希望迁移扩展模块而不是纯 Python 代码，请参阅 :ref:`cporting-howto`。"

#: ../../howto/pyporting.rst:19
msgid ""
"If you would like to read one core Python developer's take on why Python 3 "
"came into existence, you can read Nick Coghlan's `Python 3 Q & A`_ or Brett "
"Cannon's `Why Python 3 exists`_."
msgstr ""
"如果你想了解核心 Python 开发者对于 Python 3 的出现有何看法，你可以阅读 Nick Coghlan 的 `Python 3 Q & "
"A`_ 或 Brett Cannon 的 `为什么要有 Python 3`_."

#: ../../howto/pyporting.rst:24
msgid ""
"For help with porting, you can view the archived python-porting_ mailing "
"list."
msgstr "关于迁移的帮助，你可以查看存档的 python-porting_ 邮件列表。"

#: ../../howto/pyporting.rst:27
msgid "The Short Explanation"
msgstr "简要说明"

#: ../../howto/pyporting.rst:29
msgid ""
"To make your project be single-source Python 2/3 compatible, the basic steps"
" are:"
msgstr "为了使你的项目以一份源代码与Python 2/3兼容，基本步骤如下:"

#: ../../howto/pyporting.rst:32
msgid "Only worry about supporting Python 2.7"
msgstr "只担心支持Python 2.7的问题"

#: ../../howto/pyporting.rst:33
msgid ""
"Make sure you have good test coverage (coverage.py_ can help; ``python -m "
"pip install coverage``)"
msgstr "确保你有良好的测试覆盖率（可以用 coverage.py_；``python -m pip install coverage``）。"

#: ../../howto/pyporting.rst:35 ../../howto/pyporting.rst:122
msgid "Learn the differences between Python 2 & 3"
msgstr "了解Python 2 和 3之间的区别"

#: ../../howto/pyporting.rst:36
msgid ""
"Use Futurize_ (or Modernize_) to update your code (e.g. ``python -m pip "
"install future``)"
msgstr ""
"使用 Futurize_ (或Modernize_) 来更新你的代码 (例如 ``python -m pip install future``)。"

#: ../../howto/pyporting.rst:37
msgid ""
"Use Pylint_ to help make sure you don't regress on your Python 3 support "
"(``python -m pip install pylint``)"
msgstr "使用 Pylint_ 来帮助确保你在Python 3支持上不倒退(``python -m pip install pylint``)"

#: ../../howto/pyporting.rst:39
msgid ""
"Use caniusepython3_ to find out which of your dependencies are blocking your"
" use of Python 3 (``python -m pip install caniusepython3``)"
msgstr ""
"使用 caniusepython3_ 来找出你的哪些依赖关系阻碍了你对 Python 3 的使用 (``python -m pip install "
"caniusepython3``)"

#: ../../howto/pyporting.rst:41
msgid ""
"Once your dependencies are no longer blocking you, use continuous "
"integration to make sure you stay compatible with Python 2 & 3 (tox_ can "
"help test against multiple versions of Python; ``python -m pip install "
"tox``)"
msgstr ""
"一旦你的依赖性不再阻碍你，使用持续集成来确保你与 Python 2 和 3 保持兼容 (tox_ 可以帮助对多个版本的 Python "
"进行测试；``python -m pip install tox``)"

#: ../../howto/pyporting.rst:44
msgid ""
"Consider using optional static type checking to make sure your type usage "
"works in both Python 2 & 3 (e.g. use mypy_ to check your typing under both "
"Python 2 & Python 3; ``python -m pip install mypy``)."
msgstr ""
"考虑使用可选的静态类型检查，以确保你的类型用法在 Python 2 和 3 中都适用 (例如，使用 mypy_ 来检查你在 Python 2 和 "
"Python 3 中的类型；``python -m pip install mypy``)。"

#: ../../howto/pyporting.rst:50
msgid ""
"Note: Using ``python -m pip install`` guarantees that the ``pip`` you invoke"
" is the one installed for the Python currently in use, whether it be a "
"system-wide ``pip`` or one installed within a :ref:`virtual environment "
"<tut-venv>`."
msgstr ""
"注意：使用 ``python -m pip install`` 来确保你发起调用的 ``pip`` 就是当前使用的 Python "
"所安装的那一个，无论它是系统级的 ``pip`` 还是安装在 :ref:`虚拟环境 <tut-venv>` 中的。"

#: ../../howto/pyporting.rst:56
msgid "Details"
msgstr "详情"

#: ../../howto/pyporting.rst:58
msgid ""
"A key point about supporting Python 2 & 3 simultaneously is that you can "
"start **today**! Even if your dependencies are not supporting Python 3 yet "
"that does not mean you can't modernize your code **now** to support Python "
"3. Most changes required to support Python 3 lead to cleaner code using "
"newer practices even in Python 2 code."
msgstr ""
"同时支持Python 2和3的一个关键点是，你可以从**今天**开始！即使你的依赖关系还不支持Python "
"3，也不意味着你不能现在就对你的代码进行现代化改造以支持Python 3。支持Python 3所需的大多数变化都会使代码更干净，甚至在Python "
"2的代码中也会使用更新的做法。"

#: ../../howto/pyporting.rst:64
msgid ""
"Another key point is that modernizing your Python 2 code to also support "
"Python 3 is largely automated for you. While you might have to make some API"
" decisions thanks to Python 3 clarifying text data versus binary data, the "
"lower-level work is now mostly done for you and thus can at least benefit "
"from the automated changes immediately."
msgstr ""
"另一个关键点是，使你的Python 2代码现代化以支持Python 3在很大程度上是为你自动化的。虽然由于Python "
"3清晰区分了文本数据与二进制数据，你可能必须做出一些API决定。但现在已经为你完成了大部分底层的工作，因此至少可以立即从自动化变化中受益。"

#: ../../howto/pyporting.rst:70
msgid ""
"Keep those key points in mind while you read on about the details of porting"
" your code to support Python 2 & 3 simultaneously."
msgstr "当你继续阅读关于迁移你的代码以同时支持Python 2和3的细节时，请牢记这些关键点。"

#: ../../howto/pyporting.rst:75
msgid "Drop support for Python 2.6 and older"
msgstr "删除对Python 2.6及更早版本的支持"

#: ../../howto/pyporting.rst:77
msgid ""
"While you can make Python 2.5 work with Python 3, it is **much** easier if "
"you only have to work with Python 2.7. If dropping Python 2.5 is not an "
"option then the six_ project can help you support Python 2.5 & 3 "
"simultaneously (``python -m pip install six``). Do realize, though, that "
"nearly all the projects listed in this HOWTO will not be available to you."
msgstr ""
"虽然你可以让 Python 2.5 与 Python 3 一起工作，但如果你只需要与 Python 2.7 一起工作，那就会 **更加容易**。 "
"如果放弃 Python 2.5 不是一种选择，那么 six_ 项目可以帮助你同时支持 Python 2.5 和 3 (``python -m pip "
"install six``)。 不过请注意，本 HOWTO 中列出的几乎所有项目都有可能会不再可用。"

#: ../../howto/pyporting.rst:83
msgid ""
"If you are able to skip Python 2.5 and older, then the required changes to "
"your code should continue to look and feel like idiomatic Python code. At "
"worst you will have to use a function instead of a method in some instances "
"or have to import a function instead of using a built-in one, but otherwise "
"the overall transformation should not feel foreign to you."
msgstr ""
"如果你能够跳过Python "
"2.5和更早的版本，那么对你的代码所做的必要修改应该看起来和感觉上都是你已经习惯的Python代码。在最坏的情况下，你将不得不使用一个函数而不是一个实例方法，或者不得不导入一个函数而不是使用一个内置的函数，但除此之外，整体的转变应该不会让你感到陌生。"

#: ../../howto/pyporting.rst:89
msgid ""
"But you should aim for only supporting Python 2.7. Python 2.6 is no longer "
"freely supported and thus is not receiving bugfixes. This means **you** will"
" have to work around any issues you come across with Python 2.6. There are "
"also some tools mentioned in this HOWTO which do not support Python 2.6 "
"(e.g., Pylint_), and this will become more commonplace as time goes on. It "
"will simply be easier for you if you only support the versions of Python "
"that you have to support."
msgstr ""
"但你的目标应该是只支持 Python 2.7。Python 2.6 不再被免费支持，因此也就没有得到错误修复。这意味着**你**必须解决你在Python"
" 2.6上遇到的任何问题。本HOWTO中提到的一些工具也不支持Python 2.6 "
"(例如，Pylint_)，随着时间的推移，这将变得越来越普遍。如果你只支持你必须支持的Python版本，那么对你来说会更容易。"

#: ../../howto/pyporting.rst:98
msgid ""
"Make sure you specify the proper version support in your ``setup.py`` file"
msgstr "确保你在你的 ``setup.py`` 文件中指定适当的版本支持"

#: ../../howto/pyporting.rst:100
msgid ""
"In your ``setup.py`` file you should have the proper `trove classifier`_ "
"specifying what versions of Python you support. As your project does not "
"support Python 3 yet you should at least have ``Programming Language :: "
"Python :: 2 :: Only`` specified. Ideally you should also specify each "
"major/minor version of Python that you do support, e.g. ``Programming "
"Language :: Python :: 2.7``."
msgstr ""
"在你的 ``setup.py`` 文件中，你应该有适当的 `trove classifier`_ 指定你支持哪些版本的 "
"Python。由于你的项目还不支持 Python 3，你至少应该指定 ``Programming Language :: Python :: 2 :: "
"Only``。理想情况下，你还应该指定你所支持的Python的每个主要/次要版本，例如：``Programming Language :: Python"
" :: 2.7``。."

#: ../../howto/pyporting.rst:109
msgid "Have good test coverage"
msgstr "良好的测试覆盖率"

#: ../../howto/pyporting.rst:111
msgid ""
"Once you have your code supporting the oldest version of Python 2 you want "
"it to, you will want to make sure your test suite has good coverage. A good "
"rule of thumb is that if you want to be confident enough in your test suite "
"that any failures that appear after having tools rewrite your code are "
"actual bugs in the tools and not in your code. If you want a number to aim "
"for, try to get over 80% coverage (and don't feel bad if you find it hard to"
" get better than 90% coverage). If you don't already have a tool to measure "
"test coverage then coverage.py_ is recommended."
msgstr ""
"一旦你的代码支持了你希望的Python "
"2的最老版本，你将希望确保你的测试套件有良好的覆盖率。一个好的经验法则是，如果你想对你的测试套件有足够的信心，在让工具重写你的代码后出现的任何故障都是工具中的实际错误，而不是你的代码中的错误。如果你想要一个目标数字，试着获得超过80%的覆盖率（如果你发现很难获得好于90%的覆盖率，也不要感到遗憾）。如果你还没有一个测量测试覆盖率的工具，那么推荐使用coverage.py_。"

#: ../../howto/pyporting.rst:124
msgid ""
"Once you have your code well-tested you are ready to begin porting your code"
" to Python 3! But to fully understand how your code is going to change and "
"what you want to look out for while you code, you will want to learn what "
"changes Python 3 makes in terms of Python 2. Typically the two best ways of "
"doing that is reading the :ref:`\"What's New\" <whatsnew-index>` doc for "
"each release of Python 3 and the `Porting to Python 3`_ book (which is free "
"online). There is also a handy `cheat sheet`_ from the Python-Future "
"project."
msgstr ""
"一旦你的代码经过了很好的测试，你就可以开始把你的代码移植到 Python 3 上了！ "
"但是为了充分了解你的代码将发生怎样的变化，以及你在编码时要注意什么，你将会想要了解 Python 3 相比 Python 2 的变化。 "
"通常来说，两个最好的方法是阅读 Python 3 每个版本的 :ref:`\"What's New\" <whatsnew-index>` 文档和 "
"`Porting to Python 3`_ 书（在线免费版本）。还有一个来自 Python-Future 项目的便利 `cheat sheet`_。"

#: ../../howto/pyporting.rst:134
msgid "Update your code"
msgstr "更新代码"

#: ../../howto/pyporting.rst:136
msgid ""
"Once you feel like you know what is different in Python 3 compared to Python"
" 2, it's time to update your code! You have a choice between two tools in "
"porting your code automatically: Futurize_ and Modernize_. Which tool you "
"choose will depend on how much like Python 3 you want your code to be. "
"Futurize_ does its best to make Python 3 idioms and practices exist in "
"Python 2, e.g. backporting the ``bytes`` type from Python 3 so that you have"
" semantic parity between the major versions of Python. Modernize_, on the "
"other hand, is more conservative and targets a Python 2/3 subset of Python, "
"directly relying on six_ to help provide compatibility. As Python 3 is the "
"future, it might be best to consider Futurize to begin adjusting to any new "
"practices that Python 3 introduces which you are not accustomed to yet."
msgstr ""
"一旦你觉得你知道了 Python 3 与 Python 2 相比有什么不同，就是时候更新你的代码了！ 你可以选择两种工具来自动移植你的代码: "
"Futurize_ 和 Modernize_。 你选择哪个工具将取决于你希望你的代码有多像 Python 3。 Futurize_ 尽力使 Python"
" 3 的习性和做法在 Python 2 中存在，例如，从 Python 3 中回传 ``bytes`` 类型，这样你就可以在 Python "
"的主要版本之间实现语义上的平等。 另一方面，Modernize_ 更加保守，它针对的是 Python 2/3 的子集，直接依靠 six_ "
"来帮助提供兼容性。 由于 Python 3 是未来，最好考虑 Futurize，以开始适应 Python 3 所引入的、你还不习惯的任何新做法。"

#: ../../howto/pyporting.rst:148
msgid ""
"Regardless of which tool you choose, they will update your code to run under"
" Python 3 while staying compatible with the version of Python 2 you started "
"with. Depending on how conservative you want to be, you may want to run the "
"tool over your test suite first and visually inspect the diff to make sure "
"the transformation is accurate. After you have transformed your test suite "
"and verified that all the tests still pass as expected, then you can "
"transform your application code knowing that any tests which fail is a "
"translation failure."
msgstr ""
"无论你选择哪种工具，它们都会更新你的代码，使之在Python 3下运行，同时与你开始使用的Python "
"2版本保持兼容。根据你想要的保守程度，你可能想先在你的测试套件上运行该工具，并目测差异以确保转换的准确性。在你转换了你的测试套件并验证了所有的测试仍然如期通过后，你就可以转换你的应用程序代码了，因为你知道任何测试失败都是转译的错误。"

#: ../../howto/pyporting.rst:156
msgid ""
"Unfortunately the tools can't automate everything to make your code work "
"under Python 3 and so there are a handful of things you will need to update "
"manually to get full Python 3 support (which of these steps are necessary "
"vary between the tools). Read the documentation for the tool you choose to "
"use to see what it fixes by default and what it can do optionally to know "
"what will (not) be fixed for you and what you may have to fix on your own "
"(e.g. using ``io.open()`` over the built-in ``open()`` function is off by "
"default in Modernize). Luckily, though, there are only a couple of things to"
" watch out for which can be considered large issues that may be hard to "
"debug if not watched for."
msgstr ""
"不幸的是，这些工具不能自动地使你的代码在Python 3下工作，因此有一些东西你需要手动更新以获得对Python "
"3的完全支持（这些步骤在不同的工具中是必要的）。阅读你选择使用的工具的文档，看看它默认修复了什么，以及它可以选择做什么，以了解哪些将（不）为你修复，哪些你可能必须自己修复（例如，在Modernize中使用"
" ``io.open()`` 覆写内置的 ``open()`` "
"函数默认是关闭的）。不过幸运的是，只有几件需要注意的事情，可以说是大问题，如果不注意的话，可能很难调试。"

#: ../../howto/pyporting.rst:168
msgid "Division"
msgstr "除法"

#: ../../howto/pyporting.rst:170
msgid ""
"In Python 3, ``5 / 2 == 2.5`` and not ``2``; all division between ``int`` "
"values result in a ``float``. This change has actually been planned since "
"Python 2.2 which was released in 2002. Since then users have been encouraged"
" to add ``from __future__ import division`` to any and all files which use "
"the ``/`` and ``//`` operators or to be running the interpreter with the "
"``-Q`` flag. If you have not been doing this then you will need to go "
"through your code and do two things:"
msgstr ""
"在Python 3中， ``5 / 2 == 2.5`` 而不是 ``2`` ；所有 ``int`` 数值之间的除法都会产生一个 ``float`` "
"、这个变化实际上从2002年发布的Python 2.2开始就已经计划好了。从那时起，我们就鼓励用户在所有使用 ``/`` 和 ``//`` "
"运算符的文件中添加 ``from __future__ import division`` ，或者在运行解释器时使用 ``-Q`` "
"标志。如果你没有这样做，那么你需要检查你的代码并做两件事。"

#: ../../howto/pyporting.rst:178
msgid "Add ``from __future__ import division`` to your files"
msgstr "添加 ``from __future__ import division`` 到你的文件。"

#: ../../howto/pyporting.rst:179
msgid ""
"Update any division operator as necessary to either use ``//`` to use floor "
"division or continue using ``/`` and expect a float"
msgstr "根据需要更新任何除法运算符，要么使用 ``//`` 来使用向下取整除法，要么继续使用 ``/`` 并得到一个浮点数"

#: ../../howto/pyporting.rst:182
msgid ""
"The reason that ``/`` isn't simply translated to ``//`` automatically is "
"that if an object defines a ``__truediv__`` method but not ``__floordiv__`` "
"then your code would begin to fail (e.g. a user-defined class that uses "
"``/`` to signify some operation but not ``//`` for the same thing or at "
"all)."
msgstr ""
"之所以没有简单地将 ``/`` 自动翻译成 ``//``，是因为如果一个对象定义了一个 ``__truediv__`` 方法，但没有定义 "
"``__floordiv__``，那么你的代码就会运行失败（例如，一个用户定义的类用 ``/`` 来表示一些操作，但没有用 ``//`` "
"来表示同样的事情或根本没有定义）。"

#: ../../howto/pyporting.rst:189
msgid "Text versus binary data"
msgstr "文本与二进制数据"

#: ../../howto/pyporting.rst:191
msgid ""
"In Python 2 you could use the ``str`` type for both text and binary data. "
"Unfortunately this confluence of two different concepts could lead to "
"brittle code which sometimes worked for either kind of data, sometimes not. "
"It also could lead to confusing APIs if people didn't explicitly state that "
"something that accepted ``str`` accepted either text or binary data instead "
"of one specific type. This complicated the situation especially for anyone "
"supporting multiple languages as APIs wouldn't bother explicitly supporting "
"``unicode`` when they claimed text data support."
msgstr ""
"在Python 2中，你可以对文本和二进制数据都使用 "
"``str``类型。不幸的是，这两个不同概念的融合可能会导致脆弱的代码，有时对任何一种数据都有效，有时则无效。如果人们没有明确说明某种接受``str``东西可以接受文本或二进制数据，而不是一种特定的类型，这也会导致API的混乱。这使情况变得复杂，特别是对于任何支持多种语言的人来说，因为API在声称支持文本数据时不会显式支持``unicode``。"

#: ../../howto/pyporting.rst:200
msgid ""
"To make the distinction between text and binary data clearer and more "
"pronounced, Python 3 did what most languages created in the age of the "
"internet have done and made text and binary data distinct types that cannot "
"blindly be mixed together (Python predates widespread access to the "
"internet). For any code that deals only with text or only binary data, this "
"separation doesn't pose an issue. But for code that has to deal with both, "
"it does mean you might have to now care about when you are using text "
"compared to binary data, which is why this cannot be entirely automated."
msgstr ""
"为了使文本和二进制数据之间的区别更加清晰和明显，Python "
"3做了大多数在互联网时代创建的语言所做的事情，使文本和二进制数据成为不能盲目混合在一起的不同类型（Python早于互联网的广泛使用）。对于任何只处理文本或只处理二进制数据的代码，这种分离并不构成问题。但是对于必须处理这两种数据的代码来说，这确实意味着你现在可能必须关心你何时使用文本或二进制数据，这就是为什么这不能完全自动化迁移。"

#: ../../howto/pyporting.rst:209
msgid ""
"To start, you will need to decide which APIs take text and which take binary"
" (it is **highly** recommended you don't design APIs that can take both due "
"to the difficulty of keeping the code working; as stated earlier it is "
"difficult to do well). In Python 2 this means making sure the APIs that take"
" text can work with ``unicode`` and those that work with binary data work "
"with the ``bytes`` type from Python 3 (which is a subset of ``str`` in "
"Python 2 and acts as an alias for ``bytes`` type in Python 2). Usually the "
"biggest issue is realizing which methods exist on which types in Python 2 & "
"3 simultaneously (for text that's ``unicode`` in Python 2 and ``str`` in "
"Python 3, for binary that's ``str``/``bytes`` in Python 2 and ``bytes`` in "
"Python 3). The following table lists the **unique** methods of each data "
"type across Python 2 & 3 (e.g., the ``decode()`` method is usable on the "
"equivalent binary data type in either Python 2 or 3, but it can't be used by"
" the textual data type consistently between Python 2 and 3 because ``str`` "
"in Python 3 doesn't have the method). Do note that as of Python 3.5 the "
"``__mod__`` method was added to the bytes type."
msgstr ""
"首先，你需要决定哪些 API 接受文本，哪些接受二进制（由于保持代码工作的难度，**强烈** 建议你不要设计同时接受两种数据的 "
"API；如前所述，这很难做得好）。在 Python 2 中，这意味着要确保处理文本的 API 能够与 ``unicode`` "
"一起工作，而处理二进制数据的 API 能够与 Python 3 中的 ``bytes`` 类型一起工作（在 Python 2 中是 ``str`` "
"的一个子集，在 Python 2 中作为 ``bytes`` 类型的别名）。通常最大的问题是意识到哪些方法同时存在于 Python 2 和 3 "
"的哪些类型上 (对于文本来说，Python 2 中是 ``unicode``，Python 3 中是 ``str``，对于二进制来说，Python 2 "
"中是 ``str``/ ``bytes``，Python 3 中是 ``bytes``)。 下表列出了每个数据类型在 Python 2 和 3 中的 "
"**独特** 的方法 (例如， ``decode()`` 方法在 Python 2 或 3 中的等价二进制数据类型上是可用的，但是它不能在 Python"
" 2 和 3 之间被文本数据类型一致使用，因为 Python 3 中的 ``str`` 没有这个方法)。 请注意，从 Python 3.5 开始， "
"``__mod__`` 方法被添加到 bytes 类型中。"

#: ../../howto/pyporting.rst:226
msgid "**Text data**"
msgstr "**文本数据**"

#: ../../howto/pyporting.rst:226
msgid "**Binary data**"
msgstr "**二进制数据**"

#: ../../howto/pyporting.rst:228
msgid "\\"
msgstr "\\"

#: ../../howto/pyporting.rst:228
msgid "decode"
msgstr "decode"

#: ../../howto/pyporting.rst:230
msgid "encode"
msgstr "encode"

#: ../../howto/pyporting.rst:232
msgid "format"
msgstr "format"

#: ../../howto/pyporting.rst:234
msgid "isdecimal"
msgstr "isdecimal"

#: ../../howto/pyporting.rst:236
msgid "isnumeric"
msgstr "isnumeric"

#: ../../howto/pyporting.rst:239
msgid ""
"Making the distinction easier to handle can be accomplished by encoding and "
"decoding between binary data and text at the edge of your code. This means "
"that when you receive text in binary data, you should immediately decode it."
" And if your code needs to send text as binary data then encode it as late "
"as possible. This allows your code to work with only text internally and "
"thus eliminates having to keep track of what type of data you are working "
"with."
msgstr ""
"通过在你的代码边缘对二进制数据和文本进行编码和解码，可以使这种区分更容易处理。这意味着，当你收到二进制数据的文本时，你应该立即对其进行解码。而如果你的代码需要将文本作为二进制数据发送，那么就尽可能晚地对其进行编码。这使得你的代码在内部只与文本打交道，从而不必再去跟踪你所处理的数据类型。"

#: ../../howto/pyporting.rst:246
msgid ""
"The next issue is making sure you know whether the string literals in your "
"code represent text or binary data. You should add a ``b`` prefix to any "
"literal that presents binary data. For text you should add a ``u`` prefix to"
" the text literal. (there is a :mod:`__future__` import to force all "
"unspecified literals to be Unicode, but usage has shown it isn't as "
"effective as adding a ``b`` or ``u`` prefix to all literals explicitly)"
msgstr ""
"下一个问题是确保你知道你的代码中的字符串字头是代表文本还是二进制数据。你应该给任何呈现二进制数据的字面符号添加一个 ``b`` "
"前缀。对于文本，你应该给文本字面添加一个 ``u`` 前缀。（有一个 :mod:`__future__` "
"导入来强制所有未指定的字头为Unicode，但实际使用情况表明它并不像给所有字头显式添加一个 ``b`` 或 ``u`` 前缀那样有效）"

#: ../../howto/pyporting.rst:253
msgid ""
"As part of this dichotomy you also need to be careful about opening files. "
"Unless you have been working on Windows, there is a chance you have not "
"always bothered to add the ``b`` mode when opening a binary file (e.g., "
"``rb`` for binary reading).  Under Python 3, binary files and text files are"
" clearly distinct and mutually incompatible; see the :mod:`io` module for "
"details. Therefore, you **must** make a decision of whether a file will be "
"used for binary access (allowing binary data to be read and/or written) or "
"textual access (allowing text data to be read and/or written). You should "
"also use :func:`io.open` for opening files instead of the built-in "
":func:`open` function as the :mod:`io` module is consistent from Python 2 to"
" 3 while the built-in :func:`open` function is not (in Python 3 it's "
"actually :func:`io.open`). Do not bother with the outdated practice of using"
" :func:`codecs.open` as that's only necessary for keeping compatibility with"
" Python 2.5."
msgstr ""
"作为这种二分法的一部分，你还需要小心打开文件。除非你一直在 Windows 上工作，否则你有可能在打开二进制文件时没有一直费心地添加 ``b`` 模式 "
"（例如，用 ``rb`` 进行二进制读取）。 在 Python 3 下，二进制文件和文本文件显然是不同的，而且是相互不兼容的；详见 :mod:`io` "
"模块。因此，你必须**决定**一个文件是用于二进制访问（允许读取和/或写入二进制数据）还是文本访问（允许读取和/或写入文本数据）。你还应该使用 "
":func:`io.open` 来打开文件，而不是内置的 :func:`open` 函数，因为 :mod:`io` 模块从 Python 2 到 3 "
"是一致的，而内置的 :func:`open` 函数则不是 (在 Python 3 中它实际上是 :func:`io.open`)。不要理会使用 "
":func:`codecs.open` 的过时做法，因为这只是为了保持与 Python 2.5 的兼容性。"

#: ../../howto/pyporting.rst:267
msgid ""
"The constructors of both ``str`` and ``bytes`` have different semantics for "
"the same arguments between Python 2 & 3. Passing an integer to ``bytes`` in "
"Python 2 will give you the string representation of the integer: ``bytes(3) "
"== '3'``. But in Python 3, an integer argument to ``bytes`` will give you a "
"bytes object as long as the integer specified, filled with null bytes: "
"``bytes(3) == b'\\x00\\x00\\x00'``. A similar worry is necessary when "
"passing a bytes object to ``str``. In Python 2 you just get the bytes object"
" back: ``str(b'3') == b'3'``. But in Python 3 you get the string "
"representation of the bytes object: ``str(b'3') == \"b'3'\"``."
msgstr ""
"在Python 2和3中， ``str`` 和 ``bytes`` 的构造函数对相同的参数有不同的语义。在Python 2中，传递一个整数给 "
"``bytes`` ，你将得到整数的字符串表示： ``bytes(3) == '3'`` 。但是在Python 3中，一个整数参数传递给 "
"``bytes`` 将给你一个与指定的整数一样长的bytes对象，其中充满了空字节： ``bytes(3) == "
"b'\\x00\\x00\\x00'`` 。当把bytes对象传给 ``str`` 时，类似的担心是必要的。 在Python "
"2中，你只是又得到了该bytes对象： ``str(b'3') == b'3'`` 。但是在Python 3中，你得到bytes对象的字符串表示： "
"``str(b'3') == \"b'3'\"`` 。"

#: ../../howto/pyporting.rst:277
msgid ""
"Finally, the indexing of binary data requires careful handling (slicing does"
" **not** require any special handling). In Python 2, ``b'123'[1] == b'2'`` "
"while in Python 3 ``b'123'[1] == 50``. Because binary data is simply a "
"collection of binary numbers, Python 3 returns the integer value for the "
"byte you index on. But in Python 2 because ``bytes == str``, indexing "
"returns a one-item slice of bytes. The six_ project has a function named "
"``six.indexbytes()`` which will return an integer like in Python 3: "
"``six.indexbytes(b'123', 1)``."
msgstr ""
"最后，二进制数据的索引需要仔细处理（切片 **不需要** 任何特殊处理）。在 Python 2 中 ``b'123'[1] == b'2'``，而在 "
"Python 3 中 ``b'123'[1] == 50``。 因为二进制数据只是二进制数的集合，Python 3 会返回你索引的字节的整数值。 但是在"
" Python 2 中，因为 ``bytes == str``，索引会返回一个单项的字节片断。 six_ 项目有一个名为 "
"``six.indexbytes()`` 的函数，它将像在 Python 3 中一样返回一个整数: ``six.indexbytes(b'123', "
"1)``。"

#: ../../howto/pyporting.rst:286
msgid "To summarize:"
msgstr "总结一下："

#: ../../howto/pyporting.rst:288
msgid "Decide which of your APIs take text and which take binary data"
msgstr "决定你的API中哪些采用文本，哪些采用二进制数据"

#: ../../howto/pyporting.rst:289
msgid ""
"Make sure that your code that works with text also works with ``unicode`` "
"and code for binary data works with ``bytes`` in Python 2 (see the table "
"above for what methods you cannot use for each type)"
msgstr ""
"确保你对文本工作的代码也能对 ``unicode`` 工作，对二进制数据的代码在Python 2中能对 ``bytes`` "
"工作（关于每种类型不能使用的方法，见上表）。"

#: ../../howto/pyporting.rst:292
msgid ""
"Mark all binary literals with a ``b`` prefix, textual literals with a ``u`` "
"prefix"
msgstr "用 ``b`` 前缀标记所有二进制字词，用 ``u`` 前缀标记文本字词"

#: ../../howto/pyporting.rst:294
msgid ""
"Decode binary data to text as soon as possible, encode text as binary data "
"as late as possible"
msgstr "尽快将二进制数据解码为文本，尽可能晚地将文本编码为二进制数据"

#: ../../howto/pyporting.rst:296
msgid ""
"Open files using :func:`io.open` and make sure to specify the ``b`` mode "
"when appropriate"
msgstr "使用 :func:`io.open` 打开文件，并确保在适当时候指定 ``b`` 模式。"

#: ../../howto/pyporting.rst:298
msgid "Be careful when indexing into binary data"
msgstr "在对二进制数据进行索引时要小心"

#: ../../howto/pyporting.rst:302
msgid "Use feature detection instead of version detection"
msgstr "使用特征检测而不是版本检测"

#: ../../howto/pyporting.rst:304
msgid ""
"Inevitably you will have code that has to choose what to do based on what "
"version of Python is running. The best way to do this is with feature "
"detection of whether the version of Python you're running under supports "
"what you need. If for some reason that doesn't work then you should make the"
" version check be against Python 2 and not Python 3. To help explain this, "
"let's look at an example."
msgstr ""
"你不可避免地会有一些代码需要根据运行的 Python 版本来选择要做什么。做到这一点的最好方法是对你运行的 Python "
"版本是否支持你所需要的东西进行特征检测。如果由于某种原因这不起作用，那么你应该让版本检测针对 Python 2 而不是 Python "
"3。为了帮助解释这个问题，让我们看一个例子。"

#: ../../howto/pyporting.rst:311
msgid ""
"Let's pretend that you need access to a feature of :mod:`importlib` that is "
"available in Python's standard library since Python 3.3 and available for "
"Python 2 through importlib2_ on PyPI. You might be tempted to write code to "
"access e.g. the :mod:`importlib.abc` module by doing the following::"
msgstr ""
"假设你需要访问 :mod:`importlib` 的一个功能，该功能自Python 3.3开始在Python的标准库中提供，并且通过PyPI上的 "
"importlib2_ 提供给Python 2。你可能会想写代码来访问例如 :mod:`importlib.abc` 模块，方法如下::"

#: ../../howto/pyporting.rst:323
msgid ""
"The problem with this code is what happens when Python 4 comes out? It would"
" be better to treat Python 2 as the exceptional case instead of Python 3 and"
" assume that future Python versions will be more compatible with Python 3 "
"than Python 2::"
msgstr ""
"这段代码的问题是，当Python 4出来的时候会发生什么？最好是将Python 2作为例外情况，而不是Python "
"3，并假设未来的Python版本与Python 3的兼容性比Python 2更强::"

#: ../../howto/pyporting.rst:335
msgid ""
"The best solution, though, is to do no version detection at all and instead "
"rely on feature detection. That avoids any potential issues of getting the "
"version detection wrong and helps keep you future-compatible::"
msgstr "不过，最好的解决办法是根本不做版本检测，而是依靠特征检测。这就避免了任何潜在的版本检测错误的问题，并有助于保持你对未来的兼容::"

#: ../../howto/pyporting.rst:346
msgid "Prevent compatibility regressions"
msgstr "防止兼容性退步"

#: ../../howto/pyporting.rst:348
msgid ""
"Once you have fully translated your code to be compatible with Python 3, you"
" will want to make sure your code doesn't regress and stop working under "
"Python 3. This is especially true if you have a dependency which is blocking"
" you from actually running under Python 3 at the moment."
msgstr ""
"一旦你完全翻译了你的代码，使之与 Python 3 兼容，你将希望确保你的代码不会退步，不会在 Python "
"3上停止工作。如果你有一个依赖关系阻碍了你目前在Python 3上的实际运行，那就更是如此了。"

#: ../../howto/pyporting.rst:353
msgid ""
"To help with staying compatible, any new modules you create should have at "
"least the following block of code at the top of it::"
msgstr "为了帮助保持兼容，你创建的任何新模块都应该在其顶部至少有以下代码块::"

#: ../../howto/pyporting.rst:360
msgid ""
"You can also run Python 2 with the ``-3`` flag to be warned about various "
"compatibility issues your code triggers during execution. If you turn "
"warnings into errors with ``-Werror`` then you can make sure that you don't "
"accidentally miss a warning."
msgstr ""
"你也可以在运行Python 2时使用 ``-3`` 标志，对你的代码在执行过程中引发的各种兼容性问题进行警告。如果你用 ``-Werror`` "
"把警告变成错误，那么你可以确保你不会意外地错过一个警告。"

#: ../../howto/pyporting.rst:365
msgid ""
"You can also use the Pylint_ project and its ``--py3k`` flag to lint your "
"code to receive warnings when your code begins to deviate from Python 3 "
"compatibility. This also prevents you from having to run Modernize_ or "
"Futurize_ over your code regularly to catch compatibility regressions. This "
"does require you only support Python 2.7 and Python 3.4 or newer as that is "
"Pylint's minimum Python version support."
msgstr ""
"你也可以使用 Pylint_ 项目和它的 ``--py3k`` 标志来提示你的代码，当你的代码开始偏离 Python 3 "
"的兼容性时，就会收到警告。这也避免了你不得不定期在你的代码上运行 Modernize_ 或 Futurize_ "
"来捕捉兼容性的退步。这确实要求你只支持Python 2.7和Python 3.4或更新的版本，因为这是Pylint支持的最小Python版本。"

#: ../../howto/pyporting.rst:374
msgid "Check which dependencies block your transition"
msgstr "检查哪些依赖性会阻碍你的过渡"

#: ../../howto/pyporting.rst:376
msgid ""
"**After** you have made your code compatible with Python 3 you should begin "
"to care about whether your dependencies have also been ported. The "
"caniusepython3_ project was created to help you determine which projects -- "
"directly or indirectly -- are blocking you from supporting Python 3. There "
"is both a command-line tool as well as a web interface at "
"https://caniusepython3.com."
msgstr ""
"在你使你的代码与 Python 3 兼容**之后**，你应该开始关心你的依赖关系是否也被移植了。 caniusepython3_ "
"项目的建立是为了帮助你确定哪些项目——直接或间接地——阻碍了你对Python 3的支持。它既有一个命令行工具，也有一个在 "
"https://caniusepython3.com 的网页界面。"

#: ../../howto/pyporting.rst:383
msgid ""
"The project also provides code which you can integrate into your test suite "
"so that you will have a failing test when you no longer have dependencies "
"blocking you from using Python 3. This allows you to avoid having to "
"manually check your dependencies and to be notified quickly when you can "
"start running on Python 3."
msgstr ""
"该项目还提供了一些代码，你可以将其集成到你的测试套件中，这样，当你不再有依赖关系阻碍你使用Python "
"3时，你将有一个失败的测试。这使你不必手动检查你的依赖性，并在你可以开始在Python 3上运行时迅速得到通知。"

#: ../../howto/pyporting.rst:390
msgid "Update your ``setup.py`` file to denote Python 3 compatibility"
msgstr "更新你的 ``setup.py`` 文件以表示对Python 3的兼容"

#: ../../howto/pyporting.rst:392
msgid ""
"Once your code works under Python 3, you should update the classifiers in "
"your ``setup.py`` to contain ``Programming Language :: Python :: 3`` and to "
"not specify sole Python 2 support. This will tell anyone using your code "
"that you support Python 2 **and** 3. Ideally you will also want to add "
"classifiers for each major/minor version of Python you now support."
msgstr ""
"一旦你的代码在 Python 3 下工作，你应该更新你 ``setup.py`` 中的分类器，使其包含 ``Programming Language "
":: Python :: 3`` 并不指定单独的 Python 2 支持。这将告诉使用你的代码的人，你支持Python 2 **和** "
"3。理想情况下，你也希望为你现在支持的Python的每个主要/次要版本添加分类器。"

#: ../../howto/pyporting.rst:400
msgid "Use continuous integration to stay compatible"
msgstr "使用持续集成以保持兼容"

#: ../../howto/pyporting.rst:402
msgid ""
"Once you are able to fully run under Python 3 you will want to make sure "
"your code always works under both Python 2 & 3. Probably the best tool for "
"running your tests under multiple Python interpreters is tox_. You can then "
"integrate tox with your continuous integration system so that you never "
"accidentally break Python 2 or 3 support."
msgstr ""
"一旦你能够完全在Python 3下运行，你将希望确保你的代码总是在Python 2和3下工作。在多个Python解释器下运行测试的最好工具可能是 "
"tox_ 。然后你可以将 tox 与你的持续集成系统集成，这样你就不会意外地破坏对 Python 2 或 3 的支持。"

#: ../../howto/pyporting.rst:408
msgid ""
"You may also want to use the ``-bb`` flag with the Python 3 interpreter to "
"trigger an exception when you are comparing bytes to strings or bytes to an "
"int (the latter is available starting in Python 3.5). By default type-"
"differing comparisons simply return ``False``, but if you made a mistake in "
"your separation of text/binary data handling or indexing on bytes you "
"wouldn't easily find the mistake. This flag will raise an exception when "
"these kinds of comparisons occur, making the mistake much easier to track "
"down."
msgstr ""
"你可能还想在 Python 3 解释器中使用 ``-bb``标志，以便在你将bytes与string或bytes与int进行比较时触发一个异常（后者从 "
"Python 3.5 "
"开始可用）。默认情况下，类型不同的比较只是简单地返回``False``，但是如果你在文本/二进制数据处理或字节的索引分离中犯了一个错误，你就不容易发现这个错误。当这些类型的比较发生时，这个标志会触发一个异常，使错误更容易被发现。"

#: ../../howto/pyporting.rst:416
msgid ""
"And that's mostly it! At this point your code base is compatible with both "
"Python 2 and 3 simultaneously. Your testing will also be set up so that you "
"don't accidentally break Python 2 or 3 compatibility regardless of which "
"version you typically run your tests under while developing."
msgstr ""
"基本上就是这样了! 在这一点上，你的代码库同时与 Python 2 和 3 兼容。你的测试也将被设置为不会意外地破坏 Python 2 或 3 "
"的兼容性，无论你在开发时通常在哪个版本下运行测试。"

#: ../../howto/pyporting.rst:423
msgid "Consider using optional static type checking"
msgstr "考虑使用可选的静态类型检查"

#: ../../howto/pyporting.rst:425
msgid ""
"Another way to help port your code is to use a static type checker like "
"mypy_ or pytype_ on your code. These tools can be used to analyze your code "
"as if it's being run under Python 2, then you can run the tool a second time"
" as if your code is running under Python 3. By running a static type checker"
" twice like this you can discover if you're e.g. misusing binary data type "
"in one version of Python compared to another. If you add optional type hints"
" to your code you can also explicitly state whether your APIs use textual or"
" binary data, helping to make sure everything functions as expected in both "
"versions of Python."
msgstr ""
"另一个帮助移植你的代码的方法是在你的代码上使用静态类型检查器，如 mypy_ 或 pytype_。这些工具可以用来分析你的代码，就像它在Python "
"2下运行一样，然后你可以第二次运行这个工具，就像你的代码在Python "
"3下运行一样。通过像这样两次运行静态类型检查器，你可以发现你是否错误地使用了二进制数据类型，例如在Python的一个版本中与另一个版本相比。如果你在你的代码中添加了可选的类型提示，你也可以明确说明你的API是使用文本数据还是二进制数据，这有助于确保在两个版本的Python中所有的功能都符合预期。"
