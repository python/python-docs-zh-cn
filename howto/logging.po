# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/logging.rst:3
msgid "Logging HOWTO"
msgstr ""

#: ../../howto/logging.rst:0
msgid "Author"
msgstr ""

#: ../../howto/logging.rst:5
msgid "Vinay Sajip <vinay_sajip at red-dove dot com>"
msgstr ""

#: ../../howto/logging.rst:12
msgid "Basic Logging Tutorial"
msgstr ""

#: ../../howto/logging.rst:14
msgid ""
"Logging is a means of tracking events that happen when some software runs. "
"The software's developer adds logging calls to their code to indicate that "
"certain events have occurred. An event is described by a descriptive message"
" which can optionally contain variable data (i.e. data that is potentially "
"different for each occurrence of the event). Events also have an importance "
"which the developer ascribes to the event; the importance can also be called"
" the *level* or *severity*."
msgstr ""

#: ../../howto/logging.rst:23
msgid "When to use logging"
msgstr ""

#: ../../howto/logging.rst:25
msgid ""
"You can access logging functionality by creating a logger via ``logger = "
"getLogger(__name__)``, and then calling the logger's :meth:`~Logger.debug`, "
":meth:`~Logger.info`, :meth:`~Logger.warning`, :meth:`~Logger.error` and "
":meth:`~Logger.critical` methods. To determine when to use logging, and to "
"see which logger methods to use when, see the table below. It states, for "
"each of a set of common tasks, the best tool to use for that task."
msgstr ""

#: ../../howto/logging.rst:33
msgid "Task you want to perform"
msgstr ""

#: ../../howto/logging.rst:33
msgid "The best tool for the task"
msgstr ""

#: ../../howto/logging.rst:35
msgid ""
"Display console output for ordinary usage of a command line script or "
"program"
msgstr ""

#: ../../howto/logging.rst:35
msgid ":func:`print`"
msgstr ""

#: ../../howto/logging.rst:39
msgid ""
"Report events that occur during normal operation of a program (e.g. for "
"status monitoring or fault investigation)"
msgstr ""

#: ../../howto/logging.rst:39
msgid ""
"A logger's :meth:`~Logger.info` (or :meth:`~Logger.debug` method for very "
"detailed output for diagnostic purposes)"
msgstr ""

#: ../../howto/logging.rst:44
msgid "Issue a warning regarding a particular runtime event"
msgstr ""

#: ../../howto/logging.rst:44
msgid ""
":func:`warnings.warn` in library code if the issue is avoidable and the "
"client application should be modified to eliminate the warning"
msgstr ""

#: ../../howto/logging.rst:49
msgid ""
"A logger's :meth:`~Logger.warning` method if there is nothing the client "
"application can do about the situation, but the event should still be noted"
msgstr ""

#: ../../howto/logging.rst:55
msgid "Report an error regarding a particular runtime event"
msgstr ""

#: ../../howto/logging.rst:55
msgid "Raise an exception"
msgstr ""

#: ../../howto/logging.rst:58
msgid ""
"Report suppression of an error without raising an exception (e.g. error "
"handler in a long-running server process)"
msgstr ""

#: ../../howto/logging.rst:58
msgid ""
"A logger's :meth:`~Logger.error`, :meth:`~Logger.exception` or "
":meth:`~Logger.critical` method as appropriate for the specific error and "
"application domain"
msgstr ""

#: ../../howto/logging.rst:65
msgid ""
"The logger methods are named after the level or severity of the events they "
"are used to track. The standard levels and their applicability are described"
" below (in increasing order of severity):"
msgstr ""

#: ../../howto/logging.rst:72 ../../howto/logging.rst:827
msgid "Level"
msgstr ""

#: ../../howto/logging.rst:72
msgid "When it's used"
msgstr ""

#: ../../howto/logging.rst:74 ../../howto/logging.rst:837
msgid "``DEBUG``"
msgstr ""

#: ../../howto/logging.rst:74
msgid ""
"Detailed information, typically of interest only when diagnosing problems."
msgstr ""

#: ../../howto/logging.rst:77 ../../howto/logging.rst:835
msgid "``INFO``"
msgstr ""

#: ../../howto/logging.rst:77
msgid "Confirmation that things are working as expected."
msgstr ""

#: ../../howto/logging.rst:80 ../../howto/logging.rst:833
msgid "``WARNING``"
msgstr ""

#: ../../howto/logging.rst:80
msgid ""
"An indication that something unexpected happened, or indicative of some "
"problem in the near future (e.g. 'disk space low'). The software is still "
"working as expected."
msgstr ""

#: ../../howto/logging.rst:85 ../../howto/logging.rst:831
msgid "``ERROR``"
msgstr ""

#: ../../howto/logging.rst:85
msgid ""
"Due to a more serious problem, the software has not been able to perform "
"some function."
msgstr ""

#: ../../howto/logging.rst:88 ../../howto/logging.rst:829
msgid "``CRITICAL``"
msgstr ""

#: ../../howto/logging.rst:88
msgid ""
"A serious error, indicating that the program itself may be unable to "
"continue running."
msgstr ""

#: ../../howto/logging.rst:92
msgid ""
"The default level is ``WARNING``, which means that only events of this level"
" and above will be tracked, unless the logging package is configured to do "
"otherwise."
msgstr ""

#: ../../howto/logging.rst:96
msgid ""
"Events that are tracked can be handled in different ways. The simplest way "
"of handling tracked events is to print them to the console. Another common "
"way is to write them to a disk file."
msgstr ""

#: ../../howto/logging.rst:104
msgid "A simple example"
msgstr ""

#: ../../howto/logging.rst:106
msgid "A very simple example is::"
msgstr ""

#: ../../howto/logging.rst:112
msgid "If you type these lines into a script and run it, you'll see:"
msgstr ""

#: ../../howto/logging.rst:118
msgid ""
"printed out on the console. The ``INFO`` message doesn't appear because the "
"default level is ``WARNING``. The printed message includes the indication of"
" the level and the description of the event provided in the logging call, "
"i.e. 'Watch out!'. The actual output can be formatted quite flexibly if you "
"need that; formatting options will also be explained later."
msgstr ""

#: ../../howto/logging.rst:124
msgid ""
"Notice that in this example, we use functions directly on the ``logging`` "
"module, like ``logging.debug``, rather than creating a logger and calling "
"functions on it. These functions operation on the root logger, but can be "
"useful as they will call :func:`~logging.basicConfig` for you if it has not "
"been called yet, like in this example.  In larger programs you'll usually "
"want to control the logging configuration explicitly however - so for that "
"reason as well as others, it's better to create loggers and call their "
"methods."
msgstr ""

#: ../../howto/logging.rst:133
msgid "Logging to a file"
msgstr ""

#: ../../howto/logging.rst:135
msgid ""
"A very common situation is that of recording logging events in a file, so "
"let's look at that next. Be sure to try the following in a newly started "
"Python interpreter, and don't just continue from the session described "
"above::"
msgstr ""

#: ../../howto/logging.rst:147
msgid ""
"The *encoding* argument was added. In earlier Python versions, or if not "
"specified, the encoding used is the default value used by :func:`open`. "
"While not shown in the above example, an *errors* argument can also now be "
"passed, which determines how encoding errors are handled. For available "
"values and the default, see the documentation for :func:`open`."
msgstr ""

#: ../../howto/logging.rst:154
msgid ""
"And now if we open the file and look at what we have, we should find the log"
" messages:"
msgstr ""

#: ../../howto/logging.rst:164
msgid ""
"This example also shows how you can set the logging level which acts as the "
"threshold for tracking. In this case, because we set the threshold to "
"``DEBUG``, all of the messages were printed."
msgstr ""

#: ../../howto/logging.rst:168
msgid ""
"If you want to set the logging level from a command-line option such as:"
msgstr ""

#: ../../howto/logging.rst:174
msgid ""
"and you have the value of the parameter passed for ``--log`` in some "
"variable *loglevel*, you can use::"
msgstr ""

#: ../../howto/logging.rst:179
msgid ""
"to get the value which you'll pass to :func:`basicConfig` via the *level* "
"argument. You may want to error check any user input value, perhaps as in "
"the following example::"
msgstr ""

#: ../../howto/logging.rst:191
msgid ""
"The call to :func:`basicConfig` should come *before* any calls to a logger's"
" methods such as :meth:`~Logger.debug`, :meth:`~Logger.info`, etc. "
"Otherwise, that logging event may not be handled in the desired manner."
msgstr ""

#: ../../howto/logging.rst:195
msgid ""
"If you run the above script several times, the messages from successive runs"
" are appended to the file *example.log*. If you want each run to start "
"afresh, not remembering the messages from earlier runs, you can specify the "
"*filemode* argument, by changing the call in the above example to::"
msgstr ""

#: ../../howto/logging.rst:202
msgid ""
"The output will be the same as before, but the log file is no longer "
"appended to, so the messages from earlier runs are lost."
msgstr ""

#: ../../howto/logging.rst:207
msgid "Logging variable data"
msgstr ""

#: ../../howto/logging.rst:209
msgid ""
"To log variable data, use a format string for the event description message "
"and append the variable data as arguments. For example::"
msgstr ""

#: ../../howto/logging.rst:215
msgid "will display:"
msgstr ""

#: ../../howto/logging.rst:221
msgid ""
"As you can see, merging of variable data into the event description message "
"uses the old, %-style of string formatting. This is for backwards "
"compatibility: the logging package pre-dates newer formatting options such "
"as :meth:`str.format` and :class:`string.Template`. These newer formatting "
"options *are* supported, but exploring them is outside the scope of this "
"tutorial: see :ref:`formatting-styles` for more information."
msgstr ""

#: ../../howto/logging.rst:230
msgid "Changing the format of displayed messages"
msgstr ""

#: ../../howto/logging.rst:232
msgid ""
"To change the format which is used to display messages, you need to specify "
"the format you want to use::"
msgstr ""

#: ../../howto/logging.rst:241
msgid "which would print:"
msgstr ""

#: ../../howto/logging.rst:249
msgid ""
"Notice that the 'root' which appeared in earlier examples has disappeared. "
"For a full set of things that can appear in format strings, you can refer to"
" the documentation for :ref:`logrecord-attributes`, but for simple usage, "
"you just need the *levelname* (severity), *message* (event description, "
"including variable data) and perhaps to display when the event occurred. "
"This is described in the next section."
msgstr ""

#: ../../howto/logging.rst:258
msgid "Displaying the date/time in messages"
msgstr ""

#: ../../howto/logging.rst:260
msgid ""
"To display the date and time of an event, you would place '%(asctime)s' in "
"your format string::"
msgstr ""

#: ../../howto/logging.rst:267
msgid "which should print something like this:"
msgstr ""

#: ../../howto/logging.rst:273
msgid ""
"The default format for date/time display (shown above) is like ISO8601 or "
":rfc:`3339`. If you need more control over the formatting of the date/time, "
"provide a *datefmt* argument to ``basicConfig``, as in this example::"
msgstr ""

#: ../../howto/logging.rst:281
msgid "which would display something like this:"
msgstr ""

#: ../../howto/logging.rst:287
msgid ""
"The format of the *datefmt* argument is the same as supported by "
":func:`time.strftime`."
msgstr ""

#: ../../howto/logging.rst:292
msgid "Next Steps"
msgstr ""

#: ../../howto/logging.rst:294
msgid ""
"That concludes the basic tutorial. It should be enough to get you up and "
"running with logging. There's a lot more that the logging package offers, "
"but to get the best out of it, you'll need to invest a little more of your "
"time in reading the following sections. If you're ready for that, grab some "
"of your favourite beverage and carry on."
msgstr ""

#: ../../howto/logging.rst:300
msgid ""
"If your logging needs are simple, then use the above examples to incorporate"
" logging into your own scripts, and if you run into problems or don't "
"understand something, please post a question on the comp.lang.python Usenet "
"group (available at https://groups.google.com/g/comp.lang.python) and you "
"should receive help before too long."
msgstr ""

#: ../../howto/logging.rst:306
msgid ""
"Still here? You can carry on reading the next few sections, which provide a "
"slightly more advanced/in-depth tutorial than the basic one above. After "
"that, you can take a look at the :ref:`logging-cookbook`."
msgstr ""

#: ../../howto/logging.rst:314
msgid "Advanced Logging Tutorial"
msgstr ""

#: ../../howto/logging.rst:316
msgid ""
"The logging library takes a modular approach and offers several categories "
"of components: loggers, handlers, filters, and formatters."
msgstr ""

#: ../../howto/logging.rst:319
msgid "Loggers expose the interface that application code directly uses."
msgstr ""

#: ../../howto/logging.rst:320
msgid ""
"Handlers send the log records (created by loggers) to the appropriate "
"destination."
msgstr ""

#: ../../howto/logging.rst:322
msgid ""
"Filters provide a finer grained facility for determining which log records "
"to output."
msgstr ""

#: ../../howto/logging.rst:324
msgid "Formatters specify the layout of log records in the final output."
msgstr ""

#: ../../howto/logging.rst:326
msgid ""
"Log event information is passed between loggers, handlers, filters and "
"formatters in a :class:`LogRecord` instance."
msgstr ""

#: ../../howto/logging.rst:329
msgid ""
"Logging is performed by calling methods on instances of the :class:`Logger` "
"class (hereafter called :dfn:`loggers`). Each instance has a name, and they "
"are conceptually arranged in a namespace hierarchy using dots (periods) as "
"separators. For example, a logger named 'scan' is the parent of loggers "
"'scan.text', 'scan.html' and 'scan.pdf'. Logger names can be anything you "
"want, and indicate the area of an application in which a logged message "
"originates."
msgstr ""

#: ../../howto/logging.rst:336
msgid ""
"A good convention to use when naming loggers is to use a module-level "
"logger, in each module which uses logging, named as follows::"
msgstr ""

#: ../../howto/logging.rst:341
msgid ""
"This means that logger names track the package/module hierarchy, and it's "
"intuitively obvious where events are logged just from the logger name."
msgstr ""

#: ../../howto/logging.rst:344
msgid ""
"The root of the hierarchy of loggers is called the root logger. That's the "
"logger used by the functions :func:`debug`, :func:`info`, :func:`warning`, "
":func:`error` and :func:`critical`, which just call the same-named method of"
" the root logger. The functions and the methods have the same signatures. "
"The root logger's name is printed as 'root' in the logged output."
msgstr ""

#: ../../howto/logging.rst:350
msgid ""
"It is, of course, possible to log messages to different destinations. "
"Support is included in the package for writing log messages to files, HTTP "
"GET/POST locations, email via SMTP, generic sockets, queues, or OS-specific "
"logging mechanisms such as syslog or the Windows NT event log. Destinations "
"are served by :dfn:`handler` classes. You can create your own log "
"destination class if you have special requirements not met by any of the "
"built-in handler classes."
msgstr ""

#: ../../howto/logging.rst:357
msgid ""
"By default, no destination is set for any logging messages. You can specify "
"a destination (such as console or file) by using :func:`basicConfig` as in "
"the tutorial examples. If you call the functions  :func:`debug`, "
":func:`info`, :func:`warning`, :func:`error` and :func:`critical`, they will"
" check to see if no destination is set; and if one is not set, they will set"
" a destination of the console (``sys.stderr``) and a default format for the "
"displayed message before delegating to the root logger to do the actual "
"message output."
msgstr ""

#: ../../howto/logging.rst:365
msgid "The default format set by :func:`basicConfig` for messages is:"
msgstr ""

#: ../../howto/logging.rst:371
msgid ""
"You can change this by passing a format string to :func:`basicConfig` with "
"the *format* keyword argument. For all options regarding how a format string"
" is constructed, see :ref:`formatter-objects`."
msgstr ""

#: ../../howto/logging.rst:376
msgid "Logging Flow"
msgstr ""

#: ../../howto/logging.rst:378
msgid ""
"The flow of log event information in loggers and handlers is illustrated in "
"the following diagram."
msgstr ""

#: ../../howto/logging.rst:385
msgid "Loggers"
msgstr ""

#: ../../howto/logging.rst:387
msgid ""
":class:`Logger` objects have a threefold job.  First, they expose several "
"methods to application code so that applications can log messages at "
"runtime. Second, logger objects determine which log messages to act upon "
"based upon severity (the default filtering facility) or filter objects.  "
"Third, logger objects pass along relevant log messages to all interested log"
" handlers."
msgstr ""

#: ../../howto/logging.rst:393
msgid ""
"The most widely used methods on logger objects fall into two categories: "
"configuration and message sending."
msgstr ""

#: ../../howto/logging.rst:396
msgid "These are the most common configuration methods:"
msgstr ""

#: ../../howto/logging.rst:398
msgid ""
":meth:`Logger.setLevel` specifies the lowest-severity log message a logger "
"will handle, where debug is the lowest built-in severity level and critical "
"is the highest built-in severity.  For example, if the severity level is "
"INFO, the logger will handle only INFO, WARNING, ERROR, and CRITICAL "
"messages and will ignore DEBUG messages."
msgstr ""

#: ../../howto/logging.rst:404
msgid ""
":meth:`Logger.addHandler` and :meth:`Logger.removeHandler` add and remove "
"handler objects from the logger object.  Handlers are covered in more detail"
" in :ref:`handler-basic`."
msgstr ""

#: ../../howto/logging.rst:408
msgid ""
":meth:`Logger.addFilter` and :meth:`Logger.removeFilter` add and remove "
"filter objects from the logger object.  Filters are covered in more detail "
"in :ref:`filter`."
msgstr ""

#: ../../howto/logging.rst:412
msgid ""
"You don't need to always call these methods on every logger you create. See "
"the last two paragraphs in this section."
msgstr ""

#: ../../howto/logging.rst:415
msgid ""
"With the logger object configured, the following methods create log "
"messages:"
msgstr ""

#: ../../howto/logging.rst:417
msgid ""
":meth:`Logger.debug`, :meth:`Logger.info`, :meth:`Logger.warning`, "
":meth:`Logger.error`, and :meth:`Logger.critical` all create log records "
"with a message and a level that corresponds to their respective method "
"names. The message is actually a format string, which may contain the "
"standard string substitution syntax of ``%s``, ``%d``, ``%f``, and so on.  "
"The rest of their arguments is a list of objects that correspond with the "
"substitution fields in the message.  With regard to ``**kwargs``, the "
"logging methods care only about a keyword of ``exc_info`` and use it to "
"determine whether to log exception information."
msgstr ""

#: ../../howto/logging.rst:427
msgid ""
":meth:`Logger.exception` creates a log message similar to "
":meth:`Logger.error`.  The difference is that :meth:`Logger.exception` dumps"
" a stack trace along with it.  Call this method only from an exception "
"handler."
msgstr ""

#: ../../howto/logging.rst:431
msgid ""
":meth:`Logger.log` takes a log level as an explicit argument.  This is a "
"little more verbose for logging messages than using the log level "
"convenience methods listed above, but this is how to log at custom log "
"levels."
msgstr ""

#: ../../howto/logging.rst:435
msgid ""
":func:`getLogger` returns a reference to a logger instance with the "
"specified name if it is provided, or ``root`` if not.  The names are period-"
"separated hierarchical structures.  Multiple calls to :func:`getLogger` with"
" the same name will return a reference to the same logger object.  Loggers "
"that are further down in the hierarchical list are children of loggers "
"higher up in the list. For example, given a logger with a name of ``foo``, "
"loggers with names of ``foo.bar``, ``foo.bar.baz``, and ``foo.bam`` are all "
"descendants of ``foo``."
msgstr ""

#: ../../howto/logging.rst:443
msgid ""
"Loggers have a concept of *effective level*. If a level is not explicitly "
"set on a logger, the level of its parent is used instead as its effective "
"level. If the parent has no explicit level set, *its* parent is examined, "
"and so on - all ancestors are searched until an explicitly set level is "
"found. The root logger always has an explicit level set (``WARNING`` by "
"default). When deciding whether to process an event, the effective level of "
"the logger is used to determine whether the event is passed to the logger's "
"handlers."
msgstr ""

#: ../../howto/logging.rst:451
msgid ""
"Child loggers propagate messages up to the handlers associated with their "
"ancestor loggers. Because of this, it is unnecessary to define and configure"
" handlers for all the loggers an application uses. It is sufficient to "
"configure handlers for a top-level logger and create child loggers as "
"needed. (You can, however, turn off propagation by setting the *propagate* "
"attribute of a logger to ``False``.)"
msgstr ""

#: ../../howto/logging.rst:462
msgid "Handlers"
msgstr ""

#: ../../howto/logging.rst:464
msgid ""
":class:`~logging.Handler` objects are responsible for dispatching the "
"appropriate log messages (based on the log messages' severity) to the "
"handler's specified destination.  :class:`Logger` objects can add zero or "
"more handler objects to themselves with an :meth:`~Logger.addHandler` "
"method.  As an example scenario, an application may want to send all log "
"messages to a log file, all log messages of error or higher to stdout, and "
"all messages of critical to an email address. This scenario requires three "
"individual handlers where each handler is responsible for sending messages "
"of a specific severity to a specific location."
msgstr ""

#: ../../howto/logging.rst:474
msgid ""
"The standard library includes quite a few handler types (see :ref:`useful-"
"handlers`); the tutorials use mainly :class:`StreamHandler` and "
":class:`FileHandler` in its examples."
msgstr ""

#: ../../howto/logging.rst:478
msgid ""
"There are very few methods in a handler for application developers to "
"concern themselves with.  The only handler methods that seem relevant for "
"application developers who are using the built-in handler objects (that is, "
"not creating custom handlers) are the following configuration methods:"
msgstr ""

#: ../../howto/logging.rst:483
msgid ""
"The :meth:`~Handler.setLevel` method, just as in logger objects, specifies "
"the lowest severity that will be dispatched to the appropriate destination."
"  Why are there two :meth:`~Handler.setLevel` methods?  The level set in the"
" logger determines which severity of messages it will pass to its handlers."
"  The level set in each handler determines which messages that handler will "
"send on."
msgstr ""

#: ../../howto/logging.rst:489
msgid ""
":meth:`~Handler.setFormatter` selects a Formatter object for this handler to"
" use."
msgstr ""

#: ../../howto/logging.rst:492
msgid ""
":meth:`~Handler.addFilter` and :meth:`~Handler.removeFilter` respectively "
"configure and deconfigure filter objects on handlers."
msgstr ""

#: ../../howto/logging.rst:495
msgid ""
"Application code should not directly instantiate and use instances of "
":class:`Handler`.  Instead, the :class:`Handler` class is a base class that "
"defines the interface that all handlers should have and establishes some "
"default behavior that child classes can use (or override)."
msgstr ""

#: ../../howto/logging.rst:502
msgid "Formatters"
msgstr ""

#: ../../howto/logging.rst:504
msgid ""
"Formatter objects configure the final order, structure, and contents of the "
"log message.  Unlike the base :class:`logging.Handler` class, application "
"code may instantiate formatter classes, although you could likely subclass "
"the formatter if your application needs special behavior.  The constructor "
"takes three optional arguments -- a message format string, a date format "
"string and a style indicator."
msgstr ""

#: ../../howto/logging.rst:513
msgid ""
"If there is no message format string, the default is to use the raw message."
"  If there is no date format string, the default date format is:"
msgstr ""

#: ../../howto/logging.rst:520
msgid ""
"with the milliseconds tacked on at the end. The ``style`` is one of ``'%'``,"
" ``'{'``, or ``'$'``. If one of these is not specified, then ``'%'`` will be"
" used."
msgstr ""

#: ../../howto/logging.rst:523
msgid ""
"If the ``style`` is ``'%'``, the message format string uses ``%(<dictionary "
"key>)s`` styled string substitution; the possible keys are documented in "
":ref:`logrecord-attributes`. If the style is ``'{'``, the message format "
"string is assumed to be compatible with :meth:`str.format` (using keyword "
"arguments), while if the style is ``'$'`` then the message format string "
"should conform to what is expected by :meth:`string.Template.substitute`."
msgstr ""

#: ../../howto/logging.rst:530
msgid "Added the ``style`` parameter."
msgstr ""

#: ../../howto/logging.rst:533
msgid ""
"The following message format string will log the time in a human-readable "
"format, the severity of the message, and the contents of the message, in "
"that order::"
msgstr ""

#: ../../howto/logging.rst:539
msgid ""
"Formatters use a user-configurable function to convert the creation time of "
"a record to a tuple. By default, :func:`time.localtime` is used; to change "
"this for a particular formatter instance, set the ``converter`` attribute of"
" the instance to a function with the same signature as "
":func:`time.localtime` or :func:`time.gmtime`. To change it for all "
"formatters, for example if you want all logging times to be shown in GMT, "
"set the ``converter`` attribute in the Formatter class (to ``time.gmtime`` "
"for GMT display)."
msgstr ""

#: ../../howto/logging.rst:549
msgid "Configuring Logging"
msgstr ""

#: ../../howto/logging.rst:553
msgid "Programmers can configure logging in three ways:"
msgstr ""

#: ../../howto/logging.rst:555
msgid ""
"Creating loggers, handlers, and formatters explicitly using Python code that"
" calls the configuration methods listed above."
msgstr ""

#: ../../howto/logging.rst:557
msgid ""
"Creating a logging config file and reading it using the :func:`fileConfig` "
"function."
msgstr ""

#: ../../howto/logging.rst:559
msgid ""
"Creating a dictionary of configuration information and passing it to the "
":func:`dictConfig` function."
msgstr ""

#: ../../howto/logging.rst:562
msgid ""
"For the reference documentation on the last two options, see :ref:`logging-"
"config-api`.  The following example configures a very simple logger, a "
"console handler, and a simple formatter using Python code::"
msgstr ""

#: ../../howto/logging.rst:592
msgid ""
"Running this module from the command line produces the following output:"
msgstr ""

#: ../../howto/logging.rst:603
msgid ""
"The following Python module creates a logger, handler, and formatter nearly "
"identical to those in the example listed above, with the only difference "
"being the names of the objects::"
msgstr ""

#: ../../howto/logging.rst:622
msgid "Here is the logging.conf file:"
msgstr ""

#: ../../howto/logging.rst:654
msgid ""
"The output is nearly identical to that of the non-config-file-based example:"
msgstr ""

#: ../../howto/logging.rst:665
msgid ""
"You can see that the config file approach has a few advantages over the "
"Python code approach, mainly separation of configuration and code and the "
"ability of noncoders to easily modify the logging properties."
msgstr ""

#: ../../howto/logging.rst:669
msgid ""
"The :func:`fileConfig` function takes a default parameter, "
"``disable_existing_loggers``, which defaults to ``True`` for reasons of "
"backward compatibility. This may or may not be what you want, since it will "
"cause any non-root loggers existing before the :func:`fileConfig` call to be"
" disabled unless they (or an ancestor) are explicitly named in the "
"configuration. Please refer to the reference documentation for more "
"information, and specify ``False`` for this parameter if you wish."
msgstr ""

#: ../../howto/logging.rst:677
msgid ""
"The dictionary passed to :func:`dictConfig` can also specify a Boolean value"
" with key ``disable_existing_loggers``, which if not specified explicitly in"
" the dictionary also defaults to being interpreted as ``True``. This leads "
"to the logger-disabling behaviour described above, which may not be what you"
" want - in which case, provide the key explicitly with a value of ``False``."
msgstr ""

#: ../../howto/logging.rst:687
msgid ""
"Note that the class names referenced in config files need to be either "
"relative to the logging module, or absolute values which can be resolved "
"using normal import mechanisms. Thus, you could use either "
":class:`~logging.handlers.WatchedFileHandler` (relative to the logging "
"module) or ``mypackage.mymodule.MyHandler`` (for a class defined in package "
"``mypackage`` and module ``mymodule``, where ``mypackage`` is available on "
"the Python import path)."
msgstr ""

#: ../../howto/logging.rst:695
msgid ""
"In Python 3.2, a new means of configuring logging has been introduced, using"
" dictionaries to hold configuration information. This provides a superset of"
" the functionality of the config-file-based approach outlined above, and is "
"the recommended configuration method for new applications and deployments. "
"Because a Python dictionary is used to hold configuration information, and "
"since you can populate that dictionary using different means, you have more "
"options for configuration. For example, you can use a configuration file in "
"JSON format, or, if you have access to YAML processing functionality, a file"
" in YAML format, to populate the configuration dictionary. Or, of course, "
"you can construct the dictionary in Python code, receive it in pickled form "
"over a socket, or use whatever approach makes sense for your application."
msgstr ""

#: ../../howto/logging.rst:707
msgid ""
"Here's an example of the same configuration as above, in YAML format for the"
" new dictionary-based approach:"
msgstr ""

#: ../../howto/logging.rst:731
msgid ""
"For more information about logging using a dictionary, see :ref:`logging-"
"config-api`."
msgstr ""

#: ../../howto/logging.rst:735
msgid "What happens if no configuration is provided"
msgstr ""

#: ../../howto/logging.rst:737
msgid ""
"If no logging configuration is provided, it is possible to have a situation "
"where a logging event needs to be output, but no handlers can be found to "
"output the event."
msgstr ""

#: ../../howto/logging.rst:741
msgid ""
"The event is output using a 'handler of last resort', stored in "
":data:`lastResort`. This internal handler is not associated with any logger,"
" and acts like a :class:`~logging.StreamHandler` which writes the event "
"description message to the current value of ``sys.stderr`` (therefore "
"respecting any redirections which may be in effect). No formatting is done "
"on the message - just the bare event description message is printed. The "
"handler's level is set to ``WARNING``, so all events at this and greater "
"severities will be output."
msgstr ""

#: ../../howto/logging.rst:752
msgid "For versions of Python prior to 3.2, the behaviour is as follows:"
msgstr ""

#: ../../howto/logging.rst:754
msgid ""
"If :data:`raiseExceptions` is ``False`` (production mode), the event is "
"silently dropped."
msgstr ""

#: ../../howto/logging.rst:757
msgid ""
"If :data:`raiseExceptions` is ``True`` (development mode), a message 'No "
"handlers could be found for logger X.Y.Z' is printed once."
msgstr ""

#: ../../howto/logging.rst:760
msgid ""
"To obtain the pre-3.2 behaviour, :data:`lastResort` can be set to ``None``."
msgstr ""

#: ../../howto/logging.rst:766
msgid "Configuring Logging for a Library"
msgstr ""

#: ../../howto/logging.rst:768
msgid ""
"When developing a library which uses logging, you should take care to "
"document how the library uses logging - for example, the names of loggers "
"used. Some consideration also needs to be given to its logging "
"configuration. If the using application does not use logging, and library "
"code makes logging calls, then (as described in the previous section) events"
" of severity ``WARNING`` and greater will be printed to ``sys.stderr``. This"
" is regarded as the best default behaviour."
msgstr ""

#: ../../howto/logging.rst:776
msgid ""
"If for some reason you *don't* want these messages printed in the absence of"
" any logging configuration, you can attach a do-nothing handler to the top-"
"level logger for your library. This avoids the message being printed, since "
"a handler will always be found for the library's events: it just doesn't "
"produce any output. If the library user configures logging for application "
"use, presumably that configuration will add some handlers, and if levels are"
" suitably configured then logging calls made in library code will send "
"output to those handlers, as normal."
msgstr ""

#: ../../howto/logging.rst:785
msgid ""
"A do-nothing handler is included in the logging package: "
":class:`~logging.NullHandler` (since Python 3.1). An instance of this "
"handler could be added to the top-level logger of the logging namespace used"
" by the library (*if* you want to prevent your library's logged events being"
" output to ``sys.stderr`` in the absence of logging configuration). If all "
"logging by a library *foo* is done using loggers with names matching "
"'foo.x', 'foo.x.y', etc. then the code::"
msgstr ""

#: ../../howto/logging.rst:796
msgid ""
"should have the desired effect. If an organisation produces a number of "
"libraries, then the logger name specified can be 'orgname.foo' rather than "
"just 'foo'."
msgstr ""

#: ../../howto/logging.rst:800
msgid ""
"It is strongly advised that you *do not log to the root logger* in your "
"library. Instead, use a logger with a unique and easily identifiable name, "
"such as the ``__name__`` for your library's top-level package or module. "
"Logging to the root logger will make it difficult or impossible for the "
"application developer to configure the logging verbosity or handlers of your"
" library as they wish."
msgstr ""

#: ../../howto/logging.rst:807
msgid ""
"It is strongly advised that you *do not add any handlers other than* "
":class:`~logging.NullHandler` *to your library's loggers*. This is because "
"the configuration of handlers is the prerogative of the application "
"developer who uses your library. The application developer knows their "
"target audience and what handlers are most appropriate for their "
"application: if you add handlers 'under the hood', you might well interfere "
"with their ability to carry out unit tests and deliver logs which suit their"
" requirements."
msgstr ""

#: ../../howto/logging.rst:818
msgid "Logging Levels"
msgstr ""

#: ../../howto/logging.rst:820
msgid ""
"The numeric values of logging levels are given in the following table. These"
" are primarily of interest if you want to define your own levels, and need "
"them to have specific values relative to the predefined levels. If you "
"define a level with the same numeric value, it overwrites the predefined "
"value; the predefined name is lost."
msgstr ""

#: ../../howto/logging.rst:827
msgid "Numeric value"
msgstr ""

#: ../../howto/logging.rst:829
msgid "50"
msgstr ""

#: ../../howto/logging.rst:831
msgid "40"
msgstr ""

#: ../../howto/logging.rst:833
msgid "30"
msgstr ""

#: ../../howto/logging.rst:835
msgid "20"
msgstr ""

#: ../../howto/logging.rst:837
msgid "10"
msgstr ""

#: ../../howto/logging.rst:839
msgid "``NOTSET``"
msgstr ""

#: ../../howto/logging.rst:839
msgid "0"
msgstr ""

#: ../../howto/logging.rst:842
msgid ""
"Levels can also be associated with loggers, being set either by the "
"developer or through loading a saved logging configuration. When a logging "
"method is called on a logger, the logger compares its own level with the "
"level associated with the method call. If the logger's level is higher than "
"the method call's, no logging message is actually generated. This is the "
"basic mechanism controlling the verbosity of logging output."
msgstr ""

#: ../../howto/logging.rst:849
msgid ""
"Logging messages are encoded as instances of the :class:`~logging.LogRecord`"
" class. When a logger decides to actually log an event, a "
":class:`~logging.LogRecord` instance is created from the logging message."
msgstr ""

#: ../../howto/logging.rst:853
msgid ""
"Logging messages are subjected to a dispatch mechanism through the use of "
":dfn:`handlers`, which are instances of subclasses of the :class:`Handler` "
"class. Handlers are responsible for ensuring that a logged message (in the "
"form of a :class:`LogRecord`) ends up in a particular location (or set of "
"locations) which is useful for the target audience for that message (such as"
" end users, support desk staff, system administrators, developers). Handlers"
" are passed :class:`LogRecord` instances intended for particular "
"destinations. Each logger can have zero, one or more handlers associated "
"with it (via the :meth:`~Logger.addHandler` method of :class:`Logger`). In "
"addition to any handlers directly associated with a logger, *all handlers "
"associated with all ancestors of the logger* are called to dispatch the "
"message (unless the *propagate* flag for a logger is set to a false value, "
"at which point the passing to ancestor handlers stops)."
msgstr ""

#: ../../howto/logging.rst:867
msgid ""
"Just as for loggers, handlers can have levels associated with them. A "
"handler's level acts as a filter in the same way as a logger's level does. "
"If a handler decides to actually dispatch an event, the "
":meth:`~Handler.emit` method is used to send the message to its destination."
" Most user-defined subclasses of :class:`Handler` will need to override this"
" :meth:`~Handler.emit`."
msgstr ""

#: ../../howto/logging.rst:876
msgid "Custom Levels"
msgstr ""

#: ../../howto/logging.rst:878
msgid ""
"Defining your own levels is possible, but should not be necessary, as the "
"existing levels have been chosen on the basis of practical experience. "
"However, if you are convinced that you need custom levels, great care should"
" be exercised when doing this, and it is possibly *a very bad idea to define"
" custom levels if you are developing a library*. That's because if multiple "
"library authors all define their own custom levels, there is a chance that "
"the logging output from such multiple libraries used together will be "
"difficult for the using developer to control and/or interpret, because a "
"given numeric value might mean different things for different libraries."
msgstr ""

#: ../../howto/logging.rst:891
msgid "Useful Handlers"
msgstr ""

#: ../../howto/logging.rst:893
msgid ""
"In addition to the base :class:`Handler` class, many useful subclasses are "
"provided:"
msgstr ""

#: ../../howto/logging.rst:896
msgid ""
":class:`StreamHandler` instances send messages to streams (file-like "
"objects)."
msgstr ""

#: ../../howto/logging.rst:899
msgid ":class:`FileHandler` instances send messages to disk files."
msgstr ""

#: ../../howto/logging.rst:901
msgid ""
":class:`~handlers.BaseRotatingHandler` is the base class for handlers that "
"rotate log files at a certain point. It is not meant to be  instantiated "
"directly. Instead, use :class:`~handlers.RotatingFileHandler` or "
":class:`~handlers.TimedRotatingFileHandler`."
msgstr ""

#: ../../howto/logging.rst:906
msgid ""
":class:`~handlers.RotatingFileHandler` instances send messages to disk "
"files, with support for maximum log file sizes and log file rotation."
msgstr ""

#: ../../howto/logging.rst:909
msgid ""
":class:`~handlers.TimedRotatingFileHandler` instances send messages to disk "
"files, rotating the log file at certain timed intervals."
msgstr ""

#: ../../howto/logging.rst:912
msgid ""
":class:`~handlers.SocketHandler` instances send messages to TCP/IP sockets. "
"Since 3.4, Unix domain sockets are also supported."
msgstr ""

#: ../../howto/logging.rst:915
msgid ""
":class:`~handlers.DatagramHandler` instances send messages to UDP sockets. "
"Since 3.4, Unix domain sockets are also supported."
msgstr ""

#: ../../howto/logging.rst:918
msgid ""
":class:`~handlers.SMTPHandler` instances send messages to a designated email"
" address."
msgstr ""

#: ../../howto/logging.rst:921
msgid ""
":class:`~handlers.SysLogHandler` instances send messages to a Unix syslog "
"daemon, possibly on a remote machine."
msgstr ""

#: ../../howto/logging.rst:924
msgid ""
":class:`~handlers.NTEventLogHandler` instances send messages to a Windows "
"NT/2000/XP event log."
msgstr ""

#: ../../howto/logging.rst:927
msgid ""
":class:`~handlers.MemoryHandler` instances send messages to a buffer in "
"memory, which is flushed whenever specific criteria are met."
msgstr ""

#: ../../howto/logging.rst:930
msgid ""
":class:`~handlers.HTTPHandler` instances send messages to an HTTP server "
"using either ``GET`` or ``POST`` semantics."
msgstr ""

#: ../../howto/logging.rst:933
msgid ""
":class:`~handlers.WatchedFileHandler` instances watch the file they are "
"logging to. If the file changes, it is closed and reopened using the file "
"name. This handler is only useful on Unix-like systems; Windows does not "
"support the underlying mechanism used."
msgstr ""

#: ../../howto/logging.rst:938
msgid ""
":class:`~handlers.QueueHandler` instances send messages to a queue, such as "
"those implemented in the :mod:`queue` or :mod:`multiprocessing` modules."
msgstr ""

#: ../../howto/logging.rst:941
msgid ""
":class:`NullHandler` instances do nothing with error messages. They are used"
" by library developers who want to use logging, but want to avoid the 'No "
"handlers could be found for logger *XXX*' message which can be displayed if "
"the library user has not configured logging. See :ref:`library-config` for "
"more information."
msgstr ""

#: ../../howto/logging.rst:947
msgid "The :class:`NullHandler` class."
msgstr ""

#: ../../howto/logging.rst:950
msgid "The :class:`~handlers.QueueHandler` class."
msgstr ""

#: ../../howto/logging.rst:953
msgid ""
"The :class:`NullHandler`, :class:`StreamHandler` and :class:`FileHandler` "
"classes are defined in the core logging package. The other handlers are "
"defined in a sub-module, :mod:`logging.handlers`. (There is also another "
"sub-module, :mod:`logging.config`, for configuration functionality.)"
msgstr ""

#: ../../howto/logging.rst:958
msgid ""
"Logged messages are formatted for presentation through instances of the "
":class:`Formatter` class. They are initialized with a format string suitable"
" for use with the % operator and a dictionary."
msgstr ""

#: ../../howto/logging.rst:962
msgid ""
"For formatting multiple messages in a batch, instances of "
":class:`BufferingFormatter` can be used. In addition to the format string "
"(which is applied to each message in the batch), there is provision for "
"header and trailer format strings."
msgstr ""

#: ../../howto/logging.rst:967
msgid ""
"When filtering based on logger level and/or handler level is not enough, "
"instances of :class:`Filter` can be added to both :class:`Logger` and "
":class:`Handler` instances (through their :meth:`~Handler.addFilter` "
"method). Before deciding to process a message further, both loggers and "
"handlers consult all their filters for permission. If any filter returns a "
"false value, the message is not processed further."
msgstr ""

#: ../../howto/logging.rst:974
msgid ""
"The basic :class:`Filter` functionality allows filtering by specific logger "
"name. If this feature is used, messages sent to the named logger and its "
"children are allowed through the filter, and all others dropped."
msgstr ""

#: ../../howto/logging.rst:982
msgid "Exceptions raised during logging"
msgstr ""

#: ../../howto/logging.rst:984
msgid ""
"The logging package is designed to swallow exceptions which occur while "
"logging in production. This is so that errors which occur while handling "
"logging events - such as logging misconfiguration, network or other similar "
"errors - do not cause the application using logging to terminate "
"prematurely."
msgstr ""

#: ../../howto/logging.rst:989
msgid ""
":class:`SystemExit` and :class:`KeyboardInterrupt` exceptions are never "
"swallowed. Other exceptions which occur during the :meth:`~Handler.emit` "
"method of a :class:`Handler` subclass are passed to its "
":meth:`~Handler.handleError` method."
msgstr ""

#: ../../howto/logging.rst:994
msgid ""
"The default implementation of :meth:`~Handler.handleError` in "
":class:`Handler` checks to see if a module-level variable, "
":data:`raiseExceptions`, is set. If set, a traceback is printed to "
":data:`sys.stderr`. If not set, the exception is swallowed."
msgstr ""

#: ../../howto/logging.rst:1000
msgid ""
"The default value of :data:`raiseExceptions` is ``True``. This is because "
"during development, you typically want to be notified of any exceptions that"
" occur. It's advised that you set :data:`raiseExceptions` to ``False`` for "
"production usage."
msgstr ""

#: ../../howto/logging.rst:1010
msgid "Using arbitrary objects as messages"
msgstr ""

#: ../../howto/logging.rst:1012
msgid ""
"In the preceding sections and examples, it has been assumed that the message"
" passed when logging the event is a string. However, this is not the only "
"possibility. You can pass an arbitrary object as a message, and its "
":meth:`~object.__str__` method will be called when the logging system needs "
"to convert it to a string representation. In fact, if you want to, you can "
"avoid computing a string representation altogether - for example, the "
":class:`~handlers.SocketHandler` emits an event by pickling it and sending "
"it over the wire."
msgstr ""

#: ../../howto/logging.rst:1023
msgid "Optimization"
msgstr ""

#: ../../howto/logging.rst:1025
msgid ""
"Formatting of message arguments is deferred until it cannot be avoided. "
"However, computing the arguments passed to the logging method can also be "
"expensive, and you may want to avoid doing it if the logger will just throw "
"away your event. To decide what to do, you can call the "
":meth:`~Logger.isEnabledFor` method which takes a level argument and returns"
" true if the event would be created by the Logger for that level of call. "
"You can write code like this::"
msgstr ""

#: ../../howto/logging.rst:1037
msgid ""
"so that if the logger's threshold is set above ``DEBUG``, the calls to "
"``expensive_func1`` and ``expensive_func2`` are never made."
msgstr ""

#: ../../howto/logging.rst:1040
msgid ""
"In some cases, :meth:`~Logger.isEnabledFor` can itself be more expensive "
"than you'd like (e.g. for deeply nested loggers where an explicit level is "
"only set high up in the logger hierarchy). In such cases (or if you want to "
"avoid calling a method in tight loops), you can cache the result of a call "
"to :meth:`~Logger.isEnabledFor` in a local or instance variable, and use "
"that instead of calling the method each time. Such a cached value would only"
" need to be recomputed when the logging configuration changes dynamically "
"while the application is running (which is not all that common)."
msgstr ""

#: ../../howto/logging.rst:1049
msgid ""
"There are other optimizations which can be made for specific applications "
"which need more precise control over what logging information is collected. "
"Here's a list of things you can do to avoid processing during logging which "
"you don't need:"
msgstr ""

#: ../../howto/logging.rst:1055
msgid "What you don't want to collect"
msgstr ""

#: ../../howto/logging.rst:1055
msgid "How to avoid collecting it"
msgstr ""

#: ../../howto/logging.rst:1057
msgid "Information about where calls were made from."
msgstr ""

#: ../../howto/logging.rst:1057
msgid ""
"Set ``logging._srcfile`` to ``None``. This avoids calling "
":func:`sys._getframe`, which may help to speed up your code in environments "
"like PyPy (which can't speed up code that uses :func:`sys._getframe`)."
msgstr ""

#: ../../howto/logging.rst:1063
msgid "Threading information."
msgstr ""

#: ../../howto/logging.rst:1063
msgid "Set ``logging.logThreads`` to ``False``."
msgstr ""

#: ../../howto/logging.rst:1065
msgid "Current process ID (:func:`os.getpid`)"
msgstr ""

#: ../../howto/logging.rst:1065
msgid "Set ``logging.logProcesses`` to ``False``."
msgstr ""

#: ../../howto/logging.rst:1067
msgid ""
"Current process name when using ``multiprocessing`` to manage multiple "
"processes."
msgstr ""

#: ../../howto/logging.rst:1067
msgid "Set ``logging.logMultiprocessing`` to ``False``."
msgstr ""

#: ../../howto/logging.rst:1071
msgid ""
"Also note that the core logging module only includes the basic handlers. If "
"you don't import :mod:`logging.handlers` and :mod:`logging.config`, they "
"won't take up any memory."
msgstr ""

#: ../../howto/logging.rst:1078
msgid "Module :mod:`logging`"
msgstr ""

#: ../../howto/logging.rst:1078
msgid "API reference for the logging module."
msgstr ""

#: ../../howto/logging.rst:1081
msgid "Module :mod:`logging.config`"
msgstr ""

#: ../../howto/logging.rst:1081
msgid "Configuration API for the logging module."
msgstr ""

#: ../../howto/logging.rst:1084
msgid "Module :mod:`logging.handlers`"
msgstr ""

#: ../../howto/logging.rst:1084
msgid "Useful handlers included with the logging module."
msgstr ""

#: ../../howto/logging.rst:1086
msgid ":ref:`A logging cookbook <logging-cookbook>`"
msgstr ""
