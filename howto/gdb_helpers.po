# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:57+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/gdb_helpers.rst:5
msgid "Debugging C API extensions and CPython Internals with GDB"
msgstr "使用 GDB 调试 C API 扩展和 CPython 内部代码"

#: ../../howto/gdb_helpers.rst:9
msgid ""
"This document explains how the Python GDB extension, ``python-gdb.py``, can "
"be used with the GDB debugger to debug CPython extensions and the CPython "
"interpreter itself."
msgstr ""
"本文档介绍了如何将 Python GDB 扩展 ``python-gdb.py`` 与 GDB 调试器一起使用以调试 CPython 扩展以及 "
"CPython 解释器本身。"

#: ../../howto/gdb_helpers.rst:13
msgid ""
"When debugging low-level problems such as crashes or deadlocks, a low-level "
"debugger, such as GDB, is useful to diagnose and correct the issue. By "
"default, GDB (or any of its front-ends) doesn't support high-level "
"information specific to the CPython interpreter."
msgstr ""
"当调试低层级问题如崩溃或死锁时，低层级的调试器如 GDB 适合被用来诊断和修正错误。 在默认情况下，GDB（或其任一种前端）并不支持 CPython "
"解释器专属的高层级信息。"

#: ../../howto/gdb_helpers.rst:18
msgid ""
"The ``python-gdb.py`` extension adds CPython interpreter information to GDB."
" The extension helps introspect the stack of currently executing Python "
"functions. Given a Python object represented by a :c:expr:`PyObject *` "
"pointer, the extension surfaces the type and value of the object."
msgstr ""
"``python-gdb.py`` 扩展可向 GDB 添加 CPython 解释器信息。 该扩展能协助对当前执行的 Python 函数栈进行内省。 "
"当给定一个由 :c:expr:`PyObject *` 指针代表的 Python 对象时，该扩展将展示对象的类型和值。"

#: ../../howto/gdb_helpers.rst:23
msgid ""
"Developers who are working on CPython extensions or tinkering with parts of "
"CPython that are written in C can use this document to learn how to use the "
"``python-gdb.py`` extension with GDB."
msgstr ""
"开发 CPython 扩展或处理 CPython 中用 C 语言编写的部分的开发人员可以通过本文档学习如何将 ``python-gdb.py`` 扩展与"
" GDB 一起使用。"

#: ../../howto/gdb_helpers.rst:29
msgid ""
"This document assumes that you are familiar with the basics of GDB and the "
"CPython C API. It consolidates guidance from the `devguide "
"<https://devguide.python.org>`_  and the `Python wiki "
"<https://wiki.python.org/moin/DebuggingWithGdb>`_."
msgstr ""
"本文档假定你已熟悉 GDB 和 CPython C API 的基础知识。 它对来自 `devguide "
"<https://devguide.python.org>`_  和 `Python wiki "
"<https://wiki.python.org/moin/DebuggingWithGdb>`_ 的内容进行了整合。"

#: ../../howto/gdb_helpers.rst:36
msgid "Prerequisites"
msgstr "前提条件"

#: ../../howto/gdb_helpers.rst:38
msgid "You need to have:"
msgstr "你需要有："

#: ../../howto/gdb_helpers.rst:40
msgid ""
"GDB 7 or later. (For earlier versions of GDB, see ``Misc/gdbinit`` in the "
"sources of Python 3.11 or earlier.)"
msgstr ""
"GDB 7 或更高的版本。 （对于较低版本的 GDB，请参阅 Python 3.11 或更低版本源代码中的 ``Misc/gdbinit``。）"

#: ../../howto/gdb_helpers.rst:42
msgid ""
"GDB-compatible debugging information for Python and any extension you are "
"debugging."
msgstr "针对 Python 和你正在调试的任何扩展的 GDB 兼容调试信息。"

#: ../../howto/gdb_helpers.rst:44
msgid "The ``python-gdb.py`` extension."
msgstr "``python-gdb.py`` 扩展。"

#: ../../howto/gdb_helpers.rst:46
msgid ""
"The extension is built with Python, but might be distributed separately or "
"not at all. Below, we include tips for a few common systems as examples. "
"Note that even if the instructions match your system, they might be "
"outdated."
msgstr ""
"此扩展与 Python 一起构建，但可能单独发布或根本不发布。 下面，我们将以几个常见系统为例进行说明。 "
"请注意即使这些说明与你的系统相匹配，它们也可能已经过时。"

#: ../../howto/gdb_helpers.rst:52
msgid "Setup with Python built from source"
msgstr "使用从源代码构建的 Python 进行设置"

#: ../../howto/gdb_helpers.rst:54
msgid ""
"When you build CPython from source, debugging information should be "
"available, and the build should add a ``python-gdb.py`` file to the root "
"directory of your repository."
msgstr ""
"当你从源代码构建 CPython 时，调试信息应当是可用的，并且构建应当在你的代码库根目录中添加一个 ``python-gdb.py`` 文件。"

#: ../../howto/gdb_helpers.rst:58
msgid ""
"To activate support, you must add the directory containing ``python-gdb.py``"
" to GDB's \"auto-load-safe-path\". If you haven't done this, recent versions"
" of GDB will print out a warning with instructions on how to do this."
msgstr ""
"要激活支持，你必须将包含 ``python-gdb.py`` 的目录添加到 GDB 的 \"auto-load-safe-path\" "
"中。如果你没有这样做，较新版本的 GDB 会打印一个警告来说明如何执行此操作。"

#: ../../howto/gdb_helpers.rst:65
msgid ""
"If you do not see instructions for your version of GDB, put this in your "
"configuration file (``~/.gdbinit`` or ``~/.config/gdb/gdbinit``)::"
msgstr ""
"如果你没有看到针对你的 GDB 版本的说明，请将以下内容放到你的配置文件中 (``~/.gdbinit`` 或 "
"``~/.config/gdb/gdbinit``)::"

#: ../../howto/gdb_helpers.rst:68
msgid "add-auto-load-safe-path /path/to/cpython"
msgstr "add-auto-load-safe-path /path/to/cpython"

#: ../../howto/gdb_helpers.rst:70
msgid "You can also add multiple paths, separated by ``:``."
msgstr "你还可以添加多个路径，以 ``:`` 分隔。"

#: ../../howto/gdb_helpers.rst:74
msgid "Setup for Python from a Linux distro"
msgstr "针对 Linux 发行版的 Python 设置"

#: ../../howto/gdb_helpers.rst:76
msgid ""
"Most Linux systems provide debug information for the system Python in a "
"package called ``python-debuginfo``, ``python-dbg`` or similar. For example:"
msgstr ""
"大多数 Linux 系统会在名为 ``python-debuginfo``、``python-dbg`` 或类似的包中提供系统 Python "
"的调试信息。 例如："

#: ../../howto/gdb_helpers.rst:80
msgid "Fedora:"
msgstr "Fedora："

#: ../../howto/gdb_helpers.rst:82
msgid ""
"sudo dnf install gdb\n"
"sudo dnf debuginfo-install python3"
msgstr ""
"sudo dnf install gdb\n"
"sudo dnf debuginfo-install python3"

#: ../../howto/gdb_helpers.rst:87
msgid "Ubuntu:"
msgstr "Ubuntu："

#: ../../howto/gdb_helpers.rst:89
msgid "sudo apt install gdb python3-dbg"
msgstr "sudo apt install gdb python3-dbg"

#: ../../howto/gdb_helpers.rst:93
msgid ""
"On several recent Linux systems, GDB can download debugging symbols "
"automatically using *debuginfod*. However, this will not install the "
"``python-gdb.py`` extension; you generally do need to install the debug info"
" package separately."
msgstr ""
"在一些最新的 Linux 系统上，GDB 可以使用 *debuginfod* 自动下载调试符号。 不过，这并不会安装 ``python-gdb.py``"
" 扩展；你通常需要单独安装调试信息包。"

#: ../../howto/gdb_helpers.rst:100
msgid "Using the Debug build and Development mode"
msgstr "使用调试构建和开发模式"

#: ../../howto/gdb_helpers.rst:102
msgid "For easier debugging, you might want to:"
msgstr "为了方便调试，你可能需要："

#: ../../howto/gdb_helpers.rst:104
msgid ""
"Use a :ref:`debug build <debug-build>` of Python. (When building from "
"source, use ``configure --with-pydebug``. On Linux distros, install and run "
"a package like ``python-debug`` or ``python-dbg``, if available.)"
msgstr ""
"使用 Python 的 :ref:`调试构建版 <debug-build>`。 （当从源代码构建时，使用 ``configure --with-"
"pydebug``。 在 Linux 发行版上，安装并运行 ``python-debug`` 或 ``python-dbg`` 之类的包，如果有的话。）"

#: ../../howto/gdb_helpers.rst:107
msgid "Use the runtime :ref:`development mode <devmode>` (``-X dev``)."
msgstr "使用运行时 :ref:`开发模式 <devmode>` (``-X dev``)。"

#: ../../howto/gdb_helpers.rst:109
msgid ""
"Both enable extra assertions and disable some optimizations. Sometimes this "
"hides the bug you are trying to find, but in most cases they make the "
"process easier."
msgstr "两者都将启用额外的断言并禁用某些优化。 有时这会隐藏你想要查找的程序错误，但大多数情况下它们都能使调试过程更简单。"

#: ../../howto/gdb_helpers.rst:115
msgid "Using the ``python-gdb`` extension"
msgstr "使用 ``python-gdb`` 扩展"

#: ../../howto/gdb_helpers.rst:117
msgid ""
"When the extension is loaded, it provides two main features: pretty printers"
" for Python values, and additional commands."
msgstr "当该扩展被加载时，它将提供两个主要特性：Python 值的美化打印，以及附加的命令。"

#: ../../howto/gdb_helpers.rst:121
msgid "Pretty-printers"
msgstr "美化打印"

#: ../../howto/gdb_helpers.rst:123
msgid ""
"This is what a GDB backtrace looks like (truncated) when this extension is "
"enabled::"
msgstr "这是当此扩展被启用时 GDB 回溯信息的显示效果（截取部分）::"

#: ../../howto/gdb_helpers.rst:126
msgid ""
"#0  0x000000000041a6b1 in PyObject_Malloc (nbytes=Cannot access memory at address 0x7fffff7fefe8\n"
") at Objects/obmalloc.c:748\n"
"#1  0x000000000041b7c0 in _PyObject_DebugMallocApi (id=111 'o', nbytes=24) at Objects/obmalloc.c:1445\n"
"#2  0x000000000041b717 in _PyObject_DebugMalloc (nbytes=24) at Objects/obmalloc.c:1412\n"
"#3  0x000000000044060a in _PyUnicode_New (length=11) at Objects/unicodeobject.c:346\n"
"#4  0x00000000004466aa in PyUnicodeUCS2_DecodeUTF8Stateful (s=0x5c2b8d \"__lltrace__\", size=11, errors=0x0, consumed=\n"
"    0x0) at Objects/unicodeobject.c:2531\n"
"#5  0x0000000000446647 in PyUnicodeUCS2_DecodeUTF8 (s=0x5c2b8d \"__lltrace__\", size=11, errors=0x0)\n"
"    at Objects/unicodeobject.c:2495\n"
"#6  0x0000000000440d1b in PyUnicodeUCS2_FromStringAndSize (u=0x5c2b8d \"__lltrace__\", size=11)\n"
"    at Objects/unicodeobject.c:551\n"
"#7  0x0000000000440d94 in PyUnicodeUCS2_FromString (u=0x5c2b8d \"__lltrace__\") at Objects/unicodeobject.c:569\n"
"#8  0x0000000000584abd in PyDict_GetItemString (v=\n"
"    {'Yuck': <type at remote 0xad4730>, '__builtins__': <module at remote 0x7ffff7fd5ee8>, '__file__': 'Lib/test/crashers/nasty_eq_vs_dict.py', '__package__': None, 'y': <Yuck(i=0) at remote 0xaacd80>, 'dict': {0: 0, 1: 1, 2: 2, 3: 3}, '__cached__': None, '__name__': '__main__', 'z': <Yuck(i=0) at remote 0xaace60>, '__doc__': None}, key=\n"
"    0x5c2b8d \"__lltrace__\") at Objects/dictobject.c:2171"
msgstr ""
"#0  0x000000000041a6b1 in PyObject_Malloc (nbytes=Cannot access memory at address 0x7fffff7fefe8\n"
") at Objects/obmalloc.c:748\n"
"#1  0x000000000041b7c0 in _PyObject_DebugMallocApi (id=111 'o', nbytes=24) at Objects/obmalloc.c:1445\n"
"#2  0x000000000041b717 in _PyObject_DebugMalloc (nbytes=24) at Objects/obmalloc.c:1412\n"
"#3  0x000000000044060a in _PyUnicode_New (length=11) at Objects/unicodeobject.c:346\n"
"#4  0x00000000004466aa in PyUnicodeUCS2_DecodeUTF8Stateful (s=0x5c2b8d \"__lltrace__\", size=11, errors=0x0, consumed=\n"
"    0x0) at Objects/unicodeobject.c:2531\n"
"#5  0x0000000000446647 in PyUnicodeUCS2_DecodeUTF8 (s=0x5c2b8d \"__lltrace__\", size=11, errors=0x0)\n"
"    at Objects/unicodeobject.c:2495\n"
"#6  0x0000000000440d1b in PyUnicodeUCS2_FromStringAndSize (u=0x5c2b8d \"__lltrace__\", size=11)\n"
"    at Objects/unicodeobject.c:551\n"
"#7  0x0000000000440d94 in PyUnicodeUCS2_FromString (u=0x5c2b8d \"__lltrace__\") at Objects/unicodeobject.c:569\n"
"#8  0x0000000000584abd in PyDict_GetItemString (v=\n"
"    {'Yuck': <type at remote 0xad4730>, '__builtins__': <module at remote 0x7ffff7fd5ee8>, '__file__': 'Lib/test/crashers/nasty_eq_vs_dict.py', '__package__': None, 'y': <Yuck(i=0) at remote 0xaacd80>, 'dict': {0: 0, 1: 1, 2: 2, 3: 3}, '__cached__': None, '__name__': '__main__', 'z': <Yuck(i=0) at remote 0xaace60>, '__doc__': None}, key=\n"
"    0x5c2b8d \"__lltrace__\") at Objects/dictobject.c:2171"

#: ../../howto/gdb_helpers.rst:142
msgid ""
"Notice how the dictionary argument to ``PyDict_GetItemString`` is displayed "
"as its ``repr()``, rather than an opaque ``PyObject *`` pointer."
msgstr ""
"请注意传给 ``PyDict_GetItemString`` 的字典参数被显示为其 ``repr()``，而非不透明的 ``PyObject *`` "
"指针。"

#: ../../howto/gdb_helpers.rst:145
msgid ""
"The extension works by supplying a custom printing routine for values of "
"type ``PyObject *``.  If you need to access lower-level details of an "
"object, then cast the value to a pointer of the appropriate type.  For "
"example::"
msgstr ""
"该扩展通过为类型 ``PyObject *`` 的值提供自定义的打印例程来发挥作用。 "
"如果你需要访问一个对象的低层级细节，则要将原值投射为适当类型的指针。 例如::"

#: ../../howto/gdb_helpers.rst:149
msgid ""
"(gdb) p globals\n"
"$1 = {'__builtins__': <module at remote 0x7ffff7fb1868>, '__name__':\n"
"'__main__', 'ctypes': <module at remote 0x7ffff7f14360>, '__doc__': None,\n"
"'__package__': None}\n"
"\n"
"(gdb) p *(PyDictObject*)globals\n"
"$2 = {ob_refcnt = 3, ob_type = 0x3dbdf85820, ma_fill = 5, ma_used = 5,\n"
"ma_mask = 7, ma_table = 0x63d0f8, ma_lookup = 0x3dbdc7ea70\n"
"<lookdict_string>, ma_smalltable = {{me_hash = 7065186196740147912,\n"
"me_key = '__builtins__', me_value = <module at remote 0x7ffff7fb1868>},\n"
"{me_hash = -368181376027291943, me_key = '__name__',\n"
"me_value ='__main__'}, {me_hash = 0, me_key = 0x0, me_value = 0x0},\n"
"{me_hash = 0, me_key = 0x0, me_value = 0x0},\n"
"{me_hash = -9177857982131165996, me_key = 'ctypes',\n"
"me_value = <module at remote 0x7ffff7f14360>},\n"
"{me_hash = -8518757509529533123, me_key = '__doc__', me_value = None},\n"
"{me_hash = 0, me_key = 0x0, me_value = 0x0}, {\n"
"  me_hash = 6614918939584953775, me_key = '__package__', me_value = None}}}"
msgstr ""
"(gdb) p globals\n"
"$1 = {'__builtins__': <module at remote 0x7ffff7fb1868>, '__name__':\n"
"'__main__', 'ctypes': <module at remote 0x7ffff7f14360>, '__doc__': None,\n"
"'__package__': None}\n"
"\n"
"(gdb) p *(PyDictObject*)globals\n"
"$2 = {ob_refcnt = 3, ob_type = 0x3dbdf85820, ma_fill = 5, ma_used = 5,\n"
"ma_mask = 7, ma_table = 0x63d0f8, ma_lookup = 0x3dbdc7ea70\n"
"<lookdict_string>, ma_smalltable = {{me_hash = 7065186196740147912,\n"
"me_key = '__builtins__', me_value = <module at remote 0x7ffff7fb1868>},\n"
"{me_hash = -368181376027291943, me_key = '__name__',\n"
"me_value ='__main__'}, {me_hash = 0, me_key = 0x0, me_value = 0x0},\n"
"{me_hash = 0, me_key = 0x0, me_value = 0x0},\n"
"{me_hash = -9177857982131165996, me_key = 'ctypes',\n"
"me_value = <module at remote 0x7ffff7f14360>},\n"
"{me_hash = -8518757509529533123, me_key = '__doc__', me_value = None},\n"
"{me_hash = 0, me_key = 0x0, me_value = 0x0}, {\n"
"  me_hash = 6614918939584953775, me_key = '__package__', me_value = None}}}"

#: ../../howto/gdb_helpers.rst:168
msgid ""
"Note that the pretty-printers do not actually call ``repr()``. For basic "
"types, they try to match its result closely."
msgstr "请注意美化打印并不会实际调用 ``repr()``。 对于基本类型，它将尝试尽量匹配其结果。"

#: ../../howto/gdb_helpers.rst:171
msgid ""
"An area that can be confusing is that the custom printer for some types look"
" a lot like GDB's built-in printer for standard types.  For example, the "
"pretty-printer for a Python ``int`` (:c:expr:`PyLongObject *`) gives a "
"representation that is not distinguishable from one of a regular machine-"
"level integer::"
msgstr ""
"一个可能令人困惑的地方是某些类型的自定义打印效果很像是 GDB 针对标准类型的内置打印形式。 例如，针对 Python ``int`` "
"(:c:expr:`PyLongObject *`) 的美化打印表示形式与机器层级上常规的整数并无区别::"

#: ../../howto/gdb_helpers.rst:177
msgid ""
"(gdb) p some_machine_integer\n"
"$3 = 42\n"
"\n"
"(gdb) p some_python_integer\n"
"$4 = 42"
msgstr ""
"(gdb) p some_machine_integer\n"
"$3 = 42\n"
"\n"
"(gdb) p some_python_integer\n"
"$4 = 42"

#: ../../howto/gdb_helpers.rst:183
msgid ""
"The internal structure can be revealed with a cast to :c:expr:`PyLongObject "
"*`::"
msgstr "内部结构可通过投射到 :c:expr:`PyLongObject *` 来揭示::"

#: ../../howto/gdb_helpers.rst:185
msgid ""
"(gdb) p *(PyLongObject*)some_python_integer\n"
"$5 = {ob_base = {ob_base = {ob_refcnt = 8, ob_type = 0x3dad39f5e0}, ob_size = 1},\n"
"ob_digit = {42}}"
msgstr ""
"(gdb) p *(PyLongObject*)some_python_integer\n"
"$5 = {ob_base = {ob_base = {ob_refcnt = 8, ob_type = 0x3dad39f5e0}, ob_size = 1},\n"
"ob_digit = {42}}"

#: ../../howto/gdb_helpers.rst:189
msgid ""
"A similar confusion can arise with the ``str`` type, where the output looks "
"a lot like gdb's built-in printer for ``char *``::"
msgstr "类似的困惑也可能发生于 ``str`` 类型，这里的输出看起来很像 gdb 针对 ``char *`` 的内置打印形式::"

#: ../../howto/gdb_helpers.rst:192
msgid ""
"(gdb) p ptr_to_python_str\n"
"$6 = '__builtins__'"
msgstr ""
"(gdb) p ptr_to_python_str\n"
"$6 = '__builtins__'"

#: ../../howto/gdb_helpers.rst:195
msgid ""
"The pretty-printer for ``str`` instances defaults to using single-quotes (as"
" does Python's ``repr`` for strings) whereas the standard printer for ``char"
" *`` values uses double-quotes and contains a hexadecimal address::"
msgstr ""
"针对 ``str`` 实例的美化打印默认使用单引号（就像 Python 字符串的 ``repr`` 一样）而针对 ``char *`` "
"值的标准打印形式使用双引号并且包含一个十六进制的地址::"

#: ../../howto/gdb_helpers.rst:199
msgid ""
"(gdb) p ptr_to_char_star\n"
"$7 = 0x6d72c0 \"hello world\""
msgstr ""
"(gdb) p ptr_to_char_star\n"
"$7 = 0x6d72c0 \"hello world\""

#: ../../howto/gdb_helpers.rst:202
msgid ""
"Again, the implementation details can be revealed with a cast to "
":c:expr:`PyUnicodeObject *`::"
msgstr "同样地，该实现细节可通过投射为 :c:expr:`PyUnicodeObject *` 来显示::"

#: ../../howto/gdb_helpers.rst:205
msgid ""
"(gdb) p *(PyUnicodeObject*)$6\n"
"$8 = {ob_base = {ob_refcnt = 33, ob_type = 0x3dad3a95a0}, length = 12,\n"
"str = 0x7ffff2128500, hash = 7065186196740147912, state = 1, defenc = 0x0}"
msgstr ""
"(gdb) p *(PyUnicodeObject*)$6\n"
"$8 = {ob_base = {ob_refcnt = 33, ob_type = 0x3dad3a95a0}, length = 12,\n"
"str = 0x7ffff2128500, hash = 7065186196740147912, state = 1, defenc = 0x0}"

#: ../../howto/gdb_helpers.rst:210
msgid "``py-list``"
msgstr "``py-list``"

#: ../../howto/gdb_helpers.rst:212
msgid ""
"The extension adds a ``py-list`` command, which lists the Python source code"
" (if any) for the current frame in the selected thread.  The current line is"
" marked with a \">\"::"
msgstr ""
"该扩展添加了一个 ``py-list`` 命令，它将列出选定的线程中当前帧的 Python 源代码（如果存在）。 当前行将以一个 \">\" 来标记::"

#: ../../howto/gdb_helpers.rst:216
msgid ""
"(gdb) py-list\n"
" 901        if options.profile:\n"
" 902            options.profile = False\n"
" 903            profile_me()\n"
" 904            return\n"
" 905\n"
">906        u = UI()\n"
" 907        if not u.quit:\n"
" 908            try:\n"
" 909                gtk.main()\n"
" 910            except KeyboardInterrupt:\n"
" 911                # properly quit on a keyboard interrupt..."
msgstr ""
"(gdb) py-list\n"
" 901        if options.profile:\n"
" 902            options.profile = False\n"
" 903            profile_me()\n"
" 904            return\n"
" 905\n"
">906        u = UI()\n"
" 907        if not u.quit:\n"
" 908            try:\n"
" 909                gtk.main()\n"
" 910            except KeyboardInterrupt:\n"
" 911                # properly quit on a keyboard interrupt..."

#: ../../howto/gdb_helpers.rst:229
msgid ""
"Use ``py-list START`` to list at a different line number within the Python "
"source, and ``py-list START,END`` to list a specific range of lines within "
"the Python source."
msgstr ""
"使用 ``py-list START`` 从不同的行号开始列出 Python 源代码，而 ``py-list START,END`` "
"则从列出指定行范围内的 Python 源代码。"

#: ../../howto/gdb_helpers.rst:234
msgid "``py-up`` and ``py-down``"
msgstr "``py-up`` 和 ``py-down``"

#: ../../howto/gdb_helpers.rst:236
msgid ""
"The ``py-up`` and ``py-down`` commands are analogous to GDB's regular ``up``"
" and ``down`` commands, but try to move at the level of CPython frames, "
"rather than C frames."
msgstr ""
"``py-up`` 和 ``py-down`` 命令类似于 GDB 的常规 ``up`` 和 ``down`` 命令，但会尝试在 CPython "
"帧而不是 C 帧的层级上移动。"

#: ../../howto/gdb_helpers.rst:240
msgid ""
"GDB is not always able to read the relevant frame information, depending on "
"the optimization level with which CPython was compiled. Internally, the "
"commands look for C frames that are executing the default frame evaluation "
"function (that is, the core bytecode interpreter loop within CPython) and "
"look up the value of the related ``PyFrameObject *``."
msgstr ""
"GDB 并不总是能够读取相关的帧信息，这取决于编译 CPython 时的优化级别。 在内部，这些命令会查找正在执行默认帧求值函数（即 CPython "
"内的的核心字节码解释器循环）的 C 帧并查找相关 ``PyFrameObject *`` 的值。"

#: ../../howto/gdb_helpers.rst:246
msgid "They emit the frame number (at the C level) within the thread."
msgstr "它们将发出线程内的帧编号（在 C 层级上）。"

#: ../../howto/gdb_helpers.rst:248 ../../howto/gdb_helpers.rst:320
msgid "For example::"
msgstr "例如："

#: ../../howto/gdb_helpers.rst:250
msgid ""
"(gdb) py-up\n"
"#37 Frame 0x9420b04, for file /usr/lib/python2.6/site-packages/\n"
"gnome_sudoku/main.py, line 906, in start_game ()\n"
"    u = UI()\n"
"(gdb) py-up\n"
"#40 Frame 0x948e82c, for file /usr/lib/python2.6/site-packages/\n"
"gnome_sudoku/gnome_sudoku.py, line 22, in start_game(main=<module at remote 0xb771b7f4>)\n"
"    main.start_game()\n"
"(gdb) py-up\n"
"Unable to find an older python frame"
msgstr ""
"(gdb) py-up\n"
"#37 Frame 0x9420b04, for file /usr/lib/python2.6/site-packages/\n"
"gnome_sudoku/main.py, line 906, in start_game ()\n"
"    u = UI()\n"
"(gdb) py-up\n"
"#40 Frame 0x948e82c, for file /usr/lib/python2.6/site-packages/\n"
"gnome_sudoku/gnome_sudoku.py, line 22, in start_game(main=<module at remote 0xb771b7f4>)\n"
"    main.start_game()\n"
"(gdb) py-up\n"
"Unable to find an older python frame"

#: ../../howto/gdb_helpers.rst:261
msgid "so we're at the top of the Python stack."
msgstr "这样我们位于 Python 栈的顶部。"

#: ../../howto/gdb_helpers.rst:263
msgid ""
"The frame numbers correspond to those displayed by GDB's standard "
"``backtrace`` command. The command skips C frames which are not executing "
"Python code."
msgstr "帧编号对应于 GDB 的 ``backtrace`` 命令所显示的内容。 该命令将跳过未在执行 Python 代码的 C 帧。"

#: ../../howto/gdb_helpers.rst:267
msgid "Going back down::"
msgstr "向下回退::"

#: ../../howto/gdb_helpers.rst:269
msgid ""
"(gdb) py-down\n"
"#37 Frame 0x9420b04, for file /usr/lib/python2.6/site-packages/gnome_sudoku/main.py, line 906, in start_game ()\n"
"    u = UI()\n"
"(gdb) py-down\n"
"#34 (unable to read python frame information)\n"
"(gdb) py-down\n"
"#23 (unable to read python frame information)\n"
"(gdb) py-down\n"
"#19 (unable to read python frame information)\n"
"(gdb) py-down\n"
"#14 Frame 0x99262ac, for file /usr/lib/python2.6/site-packages/gnome_sudoku/game_selector.py, line 201, in run_swallowed_dialog (self=<NewOrSavedGameSelector(new_game_model=<gtk.ListStore at remote 0x98fab44>, puzzle=None, saved_games=[{'gsd.auto_fills': 0, 'tracking': {}, 'trackers': {}, 'notes': [], 'saved_at': 1270084485, 'game': '7 8 0 0 0 0 0 5 6 0 0 9 0 8 0 1 0 0 0 4 6 0 0 0 0 7 0 6 5 0 0 0 4 7 9 2 0 0 0 9 0 1 0 0 0 3 9 7 6 0 0 0 1 8 0 6 0 0 0 0 2 8 0 0 0 5 0 4 0 6 0 0 2 1 0 0 0 0 0 4 5\\n7 8 0 0 0 0 0 5 6 0 0 9 0 8 0 1 0 0 0 4 6 0 0 0 0 7 0 6 5 1 8 3 4 7 9 2 0 0 0 9 0 1 0 0 0 3 9 7 6 0 0 0 1 8 0 6 0 0 0 0 2 8 0 0 0 5 0 4 0 6 0 0 2 1 0 0 0 0 0 4 5', 'gsd.impossible_hints': 0, 'timer.__absolute_start_time__': <float at remote 0x984b474>, 'gsd.hints': 0, 'timer.active_time': <float at remote 0x984b494>, 'timer.total_time': <float at remote 0x984b464>}], dialog=<gtk.Dialog at remote 0x98faaa4>, saved_game_model=<gtk.ListStore at remote 0x98fad24>, sudoku_maker=<SudokuMaker(terminated=False, played=[], batch_siz...(truncated)\n"
"            swallower.run_dialog(self.dialog)\n"
"(gdb) py-down\n"
"#11 Frame 0x9aead74, for file /usr/lib/python2.6/site-packages/gnome_sudoku/dialog_swallower.py, line 48, in run_dialog (self=<SwappableArea(running=<gtk.Dialog at remote 0x98faaa4>, main_page=0) at remote 0x98fa6e4>, d=<gtk.Dialog at remote 0x98faaa4>)\n"
"            gtk.main()\n"
"(gdb) py-down\n"
"#8 (unable to read python frame information)\n"
"(gdb) py-down\n"
"Unable to find a newer python frame"
msgstr ""
"(gdb) py-down\n"
"#37 Frame 0x9420b04, for file /usr/lib/python2.6/site-packages/gnome_sudoku/main.py, line 906, in start_game ()\n"
"    u = UI()\n"
"(gdb) py-down\n"
"#34 (unable to read python frame information)\n"
"(gdb) py-down\n"
"#23 (unable to read python frame information)\n"
"(gdb) py-down\n"
"#19 (unable to read python frame information)\n"
"(gdb) py-down\n"
"#14 Frame 0x99262ac, for file /usr/lib/python2.6/site-packages/gnome_sudoku/game_selector.py, line 201, in run_swallowed_dialog (self=<NewOrSavedGameSelector(new_game_model=<gtk.ListStore at remote 0x98fab44>, puzzle=None, saved_games=[{'gsd.auto_fills': 0, 'tracking': {}, 'trackers': {}, 'notes': [], 'saved_at': 1270084485, 'game': '7 8 0 0 0 0 0 5 6 0 0 9 0 8 0 1 0 0 0 4 6 0 0 0 0 7 0 6 5 0 0 0 4 7 9 2 0 0 0 9 0 1 0 0 0 3 9 7 6 0 0 0 1 8 0 6 0 0 0 0 2 8 0 0 0 5 0 4 0 6 0 0 2 1 0 0 0 0 0 4 5\\n7 8 0 0 0 0 0 5 6 0 0 9 0 8 0 1 0 0 0 4 6 0 0 0 0 7 0 6 5 1 8 3 4 7 9 2 0 0 0 9 0 1 0 0 0 3 9 7 6 0 0 0 1 8 0 6 0 0 0 0 2 8 0 0 0 5 0 4 0 6 0 0 2 1 0 0 0 0 0 4 5', 'gsd.impossible_hints': 0, 'timer.__absolute_start_time__': <float at remote 0x984b474>, 'gsd.hints': 0, 'timer.active_time': <float at remote 0x984b494>, 'timer.total_time': <float at remote 0x984b464>}], dialog=<gtk.Dialog at remote 0x98faaa4>, saved_game_model=<gtk.ListStore at remote 0x98fad24>, sudoku_maker=<SudokuMaker(terminated=False, played=[], batch_siz...(truncated)\n"
"            swallower.run_dialog(self.dialog)\n"
"(gdb) py-down\n"
"#11 Frame 0x9aead74, for file /usr/lib/python2.6/site-packages/gnome_sudoku/dialog_swallower.py, line 48, in run_dialog (self=<SwappableArea(running=<gtk.Dialog at remote 0x98faaa4>, main_page=0) at remote 0x98fa6e4>, d=<gtk.Dialog at remote 0x98faaa4>)\n"
"            gtk.main()\n"
"(gdb) py-down\n"
"#8 (unable to read python frame information)\n"
"(gdb) py-down\n"
"Unable to find a newer python frame"

#: ../../howto/gdb_helpers.rst:289
msgid "and we're at the bottom of the Python stack."
msgstr "现在我们位于 Python 栈的底部。"

#: ../../howto/gdb_helpers.rst:291
msgid ""
"Note that in Python 3.12 and newer, the same C stack frame can be used for "
"multiple Python stack frames. This means that ``py-up`` and ``py-down`` may "
"move multiple Python frames at once. For example::"
msgstr ""
"请注意在 Python 3.12 及更新的版本中，同一个 C 栈帧可被用于多个 Python 栈帧。 这意味着 ``py-up`` 和 ``py-"
"down`` 可以同时移动多个 Python 帧。 例如::"

#: ../../howto/gdb_helpers.rst:295
msgid ""
"(gdb) py-up\n"
"#6 Frame 0x7ffff7fb62b0, for file /tmp/rec.py, line 5, in recursive_function (n=0)\n"
"   time.sleep(5)\n"
"#6 Frame 0x7ffff7fb6240, for file /tmp/rec.py, line 7, in recursive_function (n=1)\n"
"   recursive_function(n-1)\n"
"#6 Frame 0x7ffff7fb61d0, for file /tmp/rec.py, line 7, in recursive_function (n=2)\n"
"   recursive_function(n-1)\n"
"#6 Frame 0x7ffff7fb6160, for file /tmp/rec.py, line 7, in recursive_function (n=3)\n"
"   recursive_function(n-1)\n"
"#6 Frame 0x7ffff7fb60f0, for file /tmp/rec.py, line 7, in recursive_function (n=4)\n"
"   recursive_function(n-1)\n"
"#6 Frame 0x7ffff7fb6080, for file /tmp/rec.py, line 7, in recursive_function (n=5)\n"
"   recursive_function(n-1)\n"
"#6 Frame 0x7ffff7fb6020, for file /tmp/rec.py, line 9, in <module> ()\n"
"   recursive_function(5)\n"
"(gdb) py-up\n"
"Unable to find an older python frame"
msgstr ""
"(gdb) py-up\n"
"#6 Frame 0x7ffff7fb62b0, for file /tmp/rec.py, line 5, in recursive_function (n=0)\n"
"   time.sleep(5)\n"
"#6 Frame 0x7ffff7fb6240, for file /tmp/rec.py, line 7, in recursive_function (n=1)\n"
"   recursive_function(n-1)\n"
"#6 Frame 0x7ffff7fb61d0, for file /tmp/rec.py, line 7, in recursive_function (n=2)\n"
"   recursive_function(n-1)\n"
"#6 Frame 0x7ffff7fb6160, for file /tmp/rec.py, line 7, in recursive_function (n=3)\n"
"   recursive_function(n-1)\n"
"#6 Frame 0x7ffff7fb60f0, for file /tmp/rec.py, line 7, in recursive_function (n=4)\n"
"   recursive_function(n-1)\n"
"#6 Frame 0x7ffff7fb6080, for file /tmp/rec.py, line 7, in recursive_function (n=5)\n"
"   recursive_function(n-1)\n"
"#6 Frame 0x7ffff7fb6020, for file /tmp/rec.py, line 9, in <module> ()\n"
"   recursive_function(5)\n"
"(gdb) py-up\n"
"Unable to find an older python frame"

#: ../../howto/gdb_helpers.rst:315
msgid "``py-bt``"
msgstr "``py-bt``"

#: ../../howto/gdb_helpers.rst:317
msgid ""
"The ``py-bt`` command attempts to display a Python-level backtrace of the "
"current thread."
msgstr "``py-bt`` 命令会尝试显示当前线程的 Python 层级回溯。"

#: ../../howto/gdb_helpers.rst:322
msgid ""
"(gdb) py-bt\n"
"#8 (unable to read python frame information)\n"
"#11 Frame 0x9aead74, for file /usr/lib/python2.6/site-packages/gnome_sudoku/dialog_swallower.py, line 48, in run_dialog (self=<SwappableArea(running=<gtk.Dialog at remote 0x98faaa4>, main_page=0) at remote 0x98fa6e4>, d=<gtk.Dialog at remote 0x98faaa4>)\n"
"            gtk.main()\n"
"#14 Frame 0x99262ac, for file /usr/lib/python2.6/site-packages/gnome_sudoku/game_selector.py, line 201, in run_swallowed_dialog (self=<NewOrSavedGameSelector(new_game_model=<gtk.ListStore at remote 0x98fab44>, puzzle=None, saved_games=[{'gsd.auto_fills': 0, 'tracking': {}, 'trackers': {}, 'notes': [], 'saved_at': 1270084485, 'game': '7 8 0 0 0 0 0 5 6 0 0 9 0 8 0 1 0 0 0 4 6 0 0 0 0 7 0 6 5 0 0 0 4 7 9 2 0 0 0 9 0 1 0 0 0 3 9 7 6 0 0 0 1 8 0 6 0 0 0 0 2 8 0 0 0 5 0 4 0 6 0 0 2 1 0 0 0 0 0 4 5\\n7 8 0 0 0 0 0 5 6 0 0 9 0 8 0 1 0 0 0 4 6 0 0 0 0 7 0 6 5 1 8 3 4 7 9 2 0 0 0 9 0 1 0 0 0 3 9 7 6 0 0 0 1 8 0 6 0 0 0 0 2 8 0 0 0 5 0 4 0 6 0 0 2 1 0 0 0 0 0 4 5', 'gsd.impossible_hints': 0, 'timer.__absolute_start_time__': <float at remote 0x984b474>, 'gsd.hints': 0, 'timer.active_time': <float at remote 0x984b494>, 'timer.total_time': <float at remote 0x984b464>}], dialog=<gtk.Dialog at remote 0x98faaa4>, saved_game_model=<gtk.ListStore at remote 0x98fad24>, sudoku_maker=<SudokuMaker(terminated=False, played=[], batch_siz...(truncated)\n"
"            swallower.run_dialog(self.dialog)\n"
"#19 (unable to read python frame information)\n"
"#23 (unable to read python frame information)\n"
"#34 (unable to read python frame information)\n"
"#37 Frame 0x9420b04, for file /usr/lib/python2.6/site-packages/gnome_sudoku/main.py, line 906, in start_game ()\n"
"    u = UI()\n"
"#40 Frame 0x948e82c, for file /usr/lib/python2.6/site-packages/gnome_sudoku/gnome_sudoku.py, line 22, in start_game (main=<module at remote 0xb771b7f4>)\n"
"    main.start_game()"
msgstr ""
"(gdb) py-bt\n"
"#8 (unable to read python frame information)\n"
"#11 Frame 0x9aead74, for file /usr/lib/python2.6/site-packages/gnome_sudoku/dialog_swallower.py, line 48, in run_dialog (self=<SwappableArea(running=<gtk.Dialog at remote 0x98faaa4>, main_page=0) at remote 0x98fa6e4>, d=<gtk.Dialog at remote 0x98faaa4>)\n"
"            gtk.main()\n"
"#14 Frame 0x99262ac, for file /usr/lib/python2.6/site-packages/gnome_sudoku/game_selector.py, line 201, in run_swallowed_dialog (self=<NewOrSavedGameSelector(new_game_model=<gtk.ListStore at remote 0x98fab44>, puzzle=None, saved_games=[{'gsd.auto_fills': 0, 'tracking': {}, 'trackers': {}, 'notes': [], 'saved_at': 1270084485, 'game': '7 8 0 0 0 0 0 5 6 0 0 9 0 8 0 1 0 0 0 4 6 0 0 0 0 7 0 6 5 0 0 0 4 7 9 2 0 0 0 9 0 1 0 0 0 3 9 7 6 0 0 0 1 8 0 6 0 0 0 0 2 8 0 0 0 5 0 4 0 6 0 0 2 1 0 0 0 0 0 4 5\\n7 8 0 0 0 0 0 5 6 0 0 9 0 8 0 1 0 0 0 4 6 0 0 0 0 7 0 6 5 1 8 3 4 7 9 2 0 0 0 9 0 1 0 0 0 3 9 7 6 0 0 0 1 8 0 6 0 0 0 0 2 8 0 0 0 5 0 4 0 6 0 0 2 1 0 0 0 0 0 4 5', 'gsd.impossible_hints': 0, 'timer.__absolute_start_time__': <float at remote 0x984b474>, 'gsd.hints': 0, 'timer.active_time': <float at remote 0x984b494>, 'timer.total_time': <float at remote 0x984b464>}], dialog=<gtk.Dialog at remote 0x98faaa4>, saved_game_model=<gtk.ListStore at remote 0x98fad24>, sudoku_maker=<SudokuMaker(terminated=False, played=[], batch_siz...(truncated)\n"
"            swallower.run_dialog(self.dialog)\n"
"#19 (unable to read python frame information)\n"
"#23 (unable to read python frame information)\n"
"#34 (unable to read python frame information)\n"
"#37 Frame 0x9420b04, for file /usr/lib/python2.6/site-packages/gnome_sudoku/main.py, line 906, in start_game ()\n"
"    u = UI()\n"
"#40 Frame 0x948e82c, for file /usr/lib/python2.6/site-packages/gnome_sudoku/gnome_sudoku.py, line 22, in start_game (main=<module at remote 0xb771b7f4>)\n"
"    main.start_game()"

#: ../../howto/gdb_helpers.rst:336
msgid ""
"The frame numbers correspond to those displayed by GDB's standard "
"``backtrace`` command."
msgstr "帧编号对应于 GDB 的 ``backtrace`` 命令所显示的内容。"

#: ../../howto/gdb_helpers.rst:340
msgid "``py-print``"
msgstr "``py-print``"

#: ../../howto/gdb_helpers.rst:342
msgid ""
"The ``py-print`` command looks up a Python name and tries to print it. It "
"looks in locals within the current thread, then globals, then finally "
"builtins::"
msgstr ""
"``py-print`` 命令会查找一个 Python 名称并尝试打印它。 它将先在当前线程的 locals 中查找，然后是 globals，最后是 "
"builtins::"

#: ../../howto/gdb_helpers.rst:346
msgid ""
"(gdb) py-print self\n"
"local 'self' = <SwappableArea(running=<gtk.Dialog at remote 0x98faaa4>,\n"
"main_page=0) at remote 0x98fa6e4>\n"
"(gdb) py-print __name__\n"
"global '__name__' = 'gnome_sudoku.dialog_swallower'\n"
"(gdb) py-print len\n"
"builtin 'len' = <built-in function len>\n"
"(gdb) py-print scarlet_pimpernel\n"
"'scarlet_pimpernel' not found"
msgstr ""
"(gdb) py-print self\n"
"local 'self' = <SwappableArea(running=<gtk.Dialog at remote 0x98faaa4>,\n"
"main_page=0) at remote 0x98fa6e4>\n"
"(gdb) py-print __name__\n"
"global '__name__' = 'gnome_sudoku.dialog_swallower'\n"
"(gdb) py-print len\n"
"builtin 'len' = <built-in function len>\n"
"(gdb) py-print scarlet_pimpernel\n"
"'scarlet_pimpernel' not found"

#: ../../howto/gdb_helpers.rst:356
msgid ""
"If the current C frame corresponds to multiple Python frames, ``py-print`` "
"only considers the first one."
msgstr "如果当前 C 帧对应多个 Python 帧，则 ``py-print`` 只会考虑其中第一个。"

#: ../../howto/gdb_helpers.rst:360
msgid "``py-locals``"
msgstr "``py-locals``"

#: ../../howto/gdb_helpers.rst:362
msgid ""
"The ``py-locals`` command looks up all Python locals within the current "
"Python frame in the selected thread, and prints their representations::"
msgstr ""
"``py-locals`` 命令会在选定的线程中查找当前 Python 帧内的所有 Python 的 locals，并打印它们的表示形式::"

#: ../../howto/gdb_helpers.rst:365
msgid ""
"(gdb) py-locals\n"
"self = <SwappableArea(running=<gtk.Dialog at remote 0x98faaa4>,\n"
"main_page=0) at remote 0x98fa6e4>\n"
"d = <gtk.Dialog at remote 0x98faaa4>"
msgstr ""
"(gdb) py-locals\n"
"self = <SwappableArea(running=<gtk.Dialog at remote 0x98faaa4>,\n"
"main_page=0) at remote 0x98fa6e4>\n"
"d = <gtk.Dialog at remote 0x98faaa4>"

#: ../../howto/gdb_helpers.rst:370
msgid ""
"If the current C frame corresponds to multiple Python frames, locals from "
"all of them will be shown::"
msgstr "如果当前 C 帧对应多个 Python 帧，同它们的所有 locals 都会被显示::"

#: ../../howto/gdb_helpers.rst:373
msgid ""
"(gdb) py-locals\n"
"Locals for recursive_function\n"
"n = 0\n"
"Locals for recursive_function\n"
"n = 1\n"
"Locals for recursive_function\n"
"n = 2\n"
"Locals for recursive_function\n"
"n = 3\n"
"Locals for recursive_function\n"
"n = 4\n"
"Locals for recursive_function\n"
"n = 5\n"
"Locals for <module>"
msgstr ""
"(gdb) py-locals\n"
"Locals for recursive_function\n"
"n = 0\n"
"Locals for recursive_function\n"
"n = 1\n"
"Locals for recursive_function\n"
"n = 2\n"
"Locals for recursive_function\n"
"n = 3\n"
"Locals for recursive_function\n"
"n = 4\n"
"Locals for recursive_function\n"
"n = 5\n"
"Locals for <module>"

#: ../../howto/gdb_helpers.rst:390
msgid "Use with GDB commands"
msgstr "与 GDB 命令一起使用"

#: ../../howto/gdb_helpers.rst:392
msgid ""
"The extension commands complement GDB's built-in commands. For example, you "
"can use a frame numbers shown by ``py-bt`` with the ``frame`` command to go "
"a specific frame within the selected thread, like this::"
msgstr ""
"这些扩展命令是对 GDB 的内置命令的补充。 例如，你可以使用 ``py-bt`` 显示的帧编号与 ``frame`` "
"命令一起使用以转到所选线程中的特定帧，如下所示::"

#: ../../howto/gdb_helpers.rst:396
msgid ""
"(gdb) py-bt\n"
"(output snipped)\n"
"#68 Frame 0xaa4560, for file Lib/test/regrtest.py, line 1548, in <module> ()\n"
"        main()\n"
"(gdb) frame 68\n"
"#68 0x00000000004cd1e6 in PyEval_EvalFrameEx (f=Frame 0xaa4560, for file Lib/test/regrtest.py, line 1548, in <module> (), throwflag=0) at Python/ceval.c:2665\n"
"2665                            x = call_function(&sp, oparg);\n"
"(gdb) py-list\n"
"1543        # Run the tests in a context manager that temporary changes the CWD to a\n"
"1544        # temporary and writable directory. If it's not possible to create or\n"
"1545        # change the CWD, the original CWD will be used. The original CWD is\n"
"1546        # available from test_support.SAVEDCWD.\n"
"1547        with test_support.temp_cwd(TESTCWD, quiet=True):\n"
">1548            main()"
msgstr ""
"(gdb) py-bt\n"
"(output snipped)\n"
"#68 Frame 0xaa4560, for file Lib/test/regrtest.py, line 1548, in <module> ()\n"
"        main()\n"
"(gdb) frame 68\n"
"#68 0x00000000004cd1e6 in PyEval_EvalFrameEx (f=Frame 0xaa4560, for file Lib/test/regrtest.py, line 1548, in <module> (), throwflag=0) at Python/ceval.c:2665\n"
"2665                            x = call_function(&sp, oparg);\n"
"(gdb) py-list\n"
"1543        # Run the tests in a context manager that temporary changes the CWD to a\n"
"1544        # temporary and writable directory. If it's not possible to create or\n"
"1545        # change the CWD, the original CWD will be used. The original CWD is\n"
"1546        # available from test_support.SAVEDCWD.\n"
"1547        with test_support.temp_cwd(TESTCWD, quiet=True):\n"
">1548            main()"

#: ../../howto/gdb_helpers.rst:411
msgid ""
"The ``info threads`` command will give you a list of the threads within the "
"process, and you can use the ``thread`` command to select a different one::"
msgstr "``info threads`` 命令将向你提供进程内的线程列表，您还可以使用 ``thread`` 命令来选择不同的线程::"

#: ../../howto/gdb_helpers.rst:414
msgid ""
"(gdb) info threads\n"
"  105 Thread 0x7fffefa18710 (LWP 10260)  sem_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S:86\n"
"  104 Thread 0x7fffdf5fe710 (LWP 10259)  sem_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S:86\n"
"* 1 Thread 0x7ffff7fe2700 (LWP 10145)  0x00000038e46d73e3 in select () at ../sysdeps/unix/syscall-template.S:82"
msgstr ""
"(gdb) info threads\n"
"  105 Thread 0x7fffefa18710 (LWP 10260)  sem_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S:86\n"
"  104 Thread 0x7fffdf5fe710 (LWP 10259)  sem_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S:86\n"
"* 1 Thread 0x7ffff7fe2700 (LWP 10145)  0x00000038e46d73e3 in select () at ../sysdeps/unix/syscall-template.S:82"

#: ../../howto/gdb_helpers.rst:419
msgid ""
"You can use ``thread apply all COMMAND`` or (``t a a COMMAND`` for short) to"
" run a command on all threads.  With ``py-bt``, this lets you see what every"
" thread is doing at the Python level::"
msgstr ""
"你可以使用 ``thread apply all COMMAND`` 或 (简短写法 ``t a a COMMAND``) 在所有线程上运行一个命令。 "
"配合 ``py-bt``，这将让你在 Python 层级上查看看到每个线程在做什么::"

#: ../../howto/gdb_helpers.rst:423
msgid ""
"(gdb) t a a py-bt\n"
"\n"
"Thread 105 (Thread 0x7fffefa18710 (LWP 10260)):\n"
"#5 Frame 0x7fffd00019d0, for file /home/david/coding/python-svn/Lib/threading.py, line 155, in _acquire_restore (self=<_RLock(_Verbose__verbose=False, _RLock__owner=140737354016512, _RLock__block=<thread.lock at remote 0x858770>, _RLock__count=1) at remote 0xd7ff40>, count_owner=(1, 140737213728528), count=1, owner=140737213728528)\n"
"        self.__block.acquire()\n"
"#8 Frame 0x7fffac001640, for file /home/david/coding/python-svn/Lib/threading.py, line 269, in wait (self=<_Condition(_Condition__lock=<_RLock(_Verbose__verbose=False, _RLock__owner=140737354016512, _RLock__block=<thread.lock at remote 0x858770>, _RLock__count=1) at remote 0xd7ff40>, acquire=<instancemethod at remote 0xd80260>, _is_owned=<instancemethod at remote 0xd80160>, _release_save=<instancemethod at remote 0xd803e0>, release=<instancemethod at remote 0xd802e0>, _acquire_restore=<instancemethod at remote 0xd7ee60>, _Verbose__verbose=False, _Condition__waiters=[]) at remote 0xd7fd10>, timeout=None, waiter=<thread.lock at remote 0x858a90>, saved_state=(1, 140737213728528))\n"
"            self._acquire_restore(saved_state)\n"
"#12 Frame 0x7fffb8001a10, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 348, in f ()\n"
"            cond.wait()\n"
"#16 Frame 0x7fffb8001c40, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 37, in task (tid=140737213728528)\n"
"                f()\n"
"\n"
"Thread 104 (Thread 0x7fffdf5fe710 (LWP 10259)):\n"
"#5 Frame 0x7fffe4001580, for file /home/david/coding/python-svn/Lib/threading.py, line 155, in _acquire_restore (self=<_RLock(_Verbose__verbose=False, _RLock__owner=140737354016512, _RLock__block=<thread.lock at remote 0x858770>, _RLock__count=1) at remote 0xd7ff40>, count_owner=(1, 140736940992272), count=1, owner=140736940992272)\n"
"        self.__block.acquire()\n"
"#8 Frame 0x7fffc8002090, for file /home/david/coding/python-svn/Lib/threading.py, line 269, in wait (self=<_Condition(_Condition__lock=<_RLock(_Verbose__verbose=False, _RLock__owner=140737354016512, _RLock__block=<thread.lock at remote 0x858770>, _RLock__count=1) at remote 0xd7ff40>, acquire=<instancemethod at remote 0xd80260>, _is_owned=<instancemethod at remote 0xd80160>, _release_save=<instancemethod at remote 0xd803e0>, release=<instancemethod at remote 0xd802e0>, _acquire_restore=<instancemethod at remote 0xd7ee60>, _Verbose__verbose=False, _Condition__waiters=[]) at remote 0xd7fd10>, timeout=None, waiter=<thread.lock at remote 0x858860>, saved_state=(1, 140736940992272))\n"
"            self._acquire_restore(saved_state)\n"
"#12 Frame 0x7fffac001c90, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 348, in f ()\n"
"            cond.wait()\n"
"#16 Frame 0x7fffac0011c0, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 37, in task (tid=140736940992272)\n"
"                f()\n"
"\n"
"Thread 1 (Thread 0x7ffff7fe2700 (LWP 10145)):\n"
"#5 Frame 0xcb5380, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 16, in _wait ()\n"
"    time.sleep(0.01)\n"
"#8 Frame 0x7fffd00024a0, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 378, in _check_notify (self=<ConditionTests(_testMethodName='test_notify', _resultForDoCleanups=<TestResult(_original_stdout=<cStringIO.StringO at remote 0xc191e0>, skipped=[], _mirrorOutput=False, testsRun=39, buffer=False, _original_stderr=<file at remote 0x7ffff7fc6340>, _stdout_buffer=<cStringIO.StringO at remote 0xc9c7f8>, _stderr_buffer=<cStringIO.StringO at remote 0xc9c790>, _moduleSetUpFailed=False, expectedFailures=[], errors=[], _previousTestClass=<type at remote 0x928310>, unexpectedSuccesses=[], failures=[], shouldStop=False, failfast=False) at remote 0xc185a0>, _threads=(0,), _cleanups=[], _type_equality_funcs={<type at remote 0x7eba00>: <instancemethod at remote 0xd750e0>, <type at remote 0x7e7820>: <instancemethod at remote 0xd75160>, <type at remote 0x7e30e0>: <instancemethod at remote 0xd75060>, <type at remote 0x7e7d20>: <instancemethod at remote 0xd751e0>, <type at remote 0x7f19e0...(truncated)\n"
"        _wait()"
msgstr ""
"(gdb) t a a py-bt\n"
"\n"
"Thread 105 (Thread 0x7fffefa18710 (LWP 10260)):\n"
"#5 Frame 0x7fffd00019d0, for file /home/david/coding/python-svn/Lib/threading.py, line 155, in _acquire_restore (self=<_RLock(_Verbose__verbose=False, _RLock__owner=140737354016512, _RLock__block=<thread.lock at remote 0x858770>, _RLock__count=1) at remote 0xd7ff40>, count_owner=(1, 140737213728528), count=1, owner=140737213728528)\n"
"        self.__block.acquire()\n"
"#8 Frame 0x7fffac001640, for file /home/david/coding/python-svn/Lib/threading.py, line 269, in wait (self=<_Condition(_Condition__lock=<_RLock(_Verbose__verbose=False, _RLock__owner=140737354016512, _RLock__block=<thread.lock at remote 0x858770>, _RLock__count=1) at remote 0xd7ff40>, acquire=<instancemethod at remote 0xd80260>, _is_owned=<instancemethod at remote 0xd80160>, _release_save=<instancemethod at remote 0xd803e0>, release=<instancemethod at remote 0xd802e0>, _acquire_restore=<instancemethod at remote 0xd7ee60>, _Verbose__verbose=False, _Condition__waiters=[]) at remote 0xd7fd10>, timeout=None, waiter=<thread.lock at remote 0x858a90>, saved_state=(1, 140737213728528))\n"
"            self._acquire_restore(saved_state)\n"
"#12 Frame 0x7fffb8001a10, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 348, in f ()\n"
"            cond.wait()\n"
"#16 Frame 0x7fffb8001c40, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 37, in task (tid=140737213728528)\n"
"                f()\n"
"\n"
"Thread 104 (Thread 0x7fffdf5fe710 (LWP 10259)):\n"
"#5 Frame 0x7fffe4001580, for file /home/david/coding/python-svn/Lib/threading.py, line 155, in _acquire_restore (self=<_RLock(_Verbose__verbose=False, _RLock__owner=140737354016512, _RLock__block=<thread.lock at remote 0x858770>, _RLock__count=1) at remote 0xd7ff40>, count_owner=(1, 140736940992272), count=1, owner=140736940992272)\n"
"        self.__block.acquire()\n"
"#8 Frame 0x7fffc8002090, for file /home/david/coding/python-svn/Lib/threading.py, line 269, in wait (self=<_Condition(_Condition__lock=<_RLock(_Verbose__verbose=False, _RLock__owner=140737354016512, _RLock__block=<thread.lock at remote 0x858770>, _RLock__count=1) at remote 0xd7ff40>, acquire=<instancemethod at remote 0xd80260>, _is_owned=<instancemethod at remote 0xd80160>, _release_save=<instancemethod at remote 0xd803e0>, release=<instancemethod at remote 0xd802e0>, _acquire_restore=<instancemethod at remote 0xd7ee60>, _Verbose__verbose=False, _Condition__waiters=[]) at remote 0xd7fd10>, timeout=None, waiter=<thread.lock at remote 0x858860>, saved_state=(1, 140736940992272))\n"
"            self._acquire_restore(saved_state)\n"
"#12 Frame 0x7fffac001c90, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 348, in f ()\n"
"            cond.wait()\n"
"#16 Frame 0x7fffac0011c0, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 37, in task (tid=140736940992272)\n"
"                f()\n"
"\n"
"Thread 1 (Thread 0x7ffff7fe2700 (LWP 10145)):\n"
"#5 Frame 0xcb5380, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 16, in _wait ()\n"
"    time.sleep(0.01)\n"
"#8 Frame 0x7fffd00024a0, for file /home/david/coding/python-svn/Lib/test/lock_tests.py, line 378, in _check_notify (self=<ConditionTests(_testMethodName='test_notify', _resultForDoCleanups=<TestResult(_original_stdout=<cStringIO.StringO at remote 0xc191e0>, skipped=[], _mirrorOutput=False, testsRun=39, buffer=False, _original_stderr=<file at remote 0x7ffff7fc6340>, _stdout_buffer=<cStringIO.StringO at remote 0xc9c7f8>, _stderr_buffer=<cStringIO.StringO at remote 0xc9c790>, _moduleSetUpFailed=False, expectedFailures=[], errors=[], _previousTestClass=<type at remote 0x928310>, unexpectedSuccesses=[], failures=[], shouldStop=False, failfast=False) at remote 0xc185a0>, _threads=(0,), _cleanups=[], _type_equality_funcs={<type at remote 0x7eba00>: <instancemethod at remote 0xd750e0>, <type at remote 0x7e7820>: <instancemethod at remote 0xd75160>, <type at remote 0x7e30e0>: <instancemethod at remote 0xd75060>, <type at remote 0x7e7d20>: <instancemethod at remote 0xd751e0>, <type at remote 0x7f19e0...(truncated)\n"
"        _wait()"
