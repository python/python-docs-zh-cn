# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/enum.rst:3
msgid "Enum HOWTO"
msgstr "Enum 指南"

#: ../../howto/enum.rst:9
msgid ""
"An :class:`Enum` is a set of symbolic names bound to unique values.  They "
"are similar to global variables, but they offer a more useful "
":func:`repr()`, grouping, type-safety, and a few other features."
msgstr ""
":class:`Enum` 是一组与互不相同的值分别绑定的符号名。类似于全局变量，但提供了更好用的 "
":func:`repr()`、分组、类型安全和一些其它特性。"

#: ../../howto/enum.rst:13
msgid ""
"They are most useful when you have a variable that can take one of a limited"
" selection of values.  For example, the days of the week::"
msgstr "它们最适用于当某个变量可选的值有限时。例如，从一周中选取一天："

#: ../../howto/enum.rst:26
msgid "Or perhaps the RGB primary colors::"
msgstr "或是 RGB 三原色："

#: ../../howto/enum.rst:34
msgid ""
"As you can see, creating an :class:`Enum` is as simple as writing a class "
"that inherits from :class:`Enum` itself."
msgstr "正如你所见，创建一个 :class:`Enum` 就是简单地写一个继承 :class:`Enum` 的类。"

#: ../../howto/enum.rst:37
msgid "Case of Enum Members"
msgstr "枚举成员名的大小写"

#: ../../howto/enum.rst:39
msgid ""
"Because Enums are used to represent constants we recommend using UPPER_CASE "
"names for members, and will be using that style in our examples."
msgstr "因为枚举通常表示常量，所以建议枚举成员命名时采用大写，本文示例也将采用这种风格。"

#: ../../howto/enum.rst:42
msgid ""
"Depending on the nature of the enum a member's value may or may not be "
"important, but either way that value can be used to get the corresponding "
"member::"
msgstr "根据枚举的性质，某个成员的值可能不一定用得上，但无论如何都能用那个值构造对应的成员："

#: ../../howto/enum.rst:49
msgid ""
"As you can see, the ``repr()`` of a member shows the enum name, the member "
"name, and the value.  The ``str()`` of a member shows only the enum name and"
" member name::"
msgstr "如你所见，成员的 ``repr()`` 会显示枚举名称、成员名称和值。 成员的 ``str()`` 只会显示枚举名称和成员名称::"

#: ../../howto/enum.rst:56
msgid "The *type* of an enumeration member is the enum it belongs to::"
msgstr "枚举成员的 *类型* 就是其所属的枚举::"

#: ../../howto/enum.rst:63
msgid "Enum members have an attribute that contains just their :attr:`name`::"
msgstr "枚举成员带有一个属性，里面只是他们的 :attr:`name`::"

#: ../../howto/enum.rst:68
msgid "Likewise, they have an attribute for their :attr:`value`::"
msgstr "类似的，枚举成员还有一个属性 :attr:`value`::"

#: ../../howto/enum.rst:74
msgid ""
"Unlike many languages that treat enumerations solely as name/value pairs, "
"Python Enums can have behavior added.  For example, :class:`datetime.date` "
"has two methods for returning the weekday: :meth:`weekday` and "
":meth:`isoweekday`. The difference is that one of them counts from 0-6 and "
"the other from 1-7. Rather than keep track of that ourselves we can add a "
"method to the :class:`Weekday` enum to extract the day from the "
":class:`date` instance and return the matching enum member::"
msgstr ""
"很多语言只把枚举当作名称/值对，而 Python 则可以添加行为。比如 :class:`datetime.date` "
"有两个方法用于返回工作日：:meth:`weekday` 和 :meth:`isoweekday`。两者的区别是，一个是以 0-6 计数，另一个则是 "
"1-7 计数。不用自行去作记录，只要在 :class:`Weekday` 枚举中可添加一个方法，即可由 :class:`date` "
"实例提取日期，并返回匹配的枚举成员::"

#: ../../howto/enum.rst:86
msgid "The complete :class:`Weekday` enum now looks like this::"
msgstr "目前，完整的 :class:`Weekday` 枚举应如下所示::"

#: ../../howto/enum.rst:101
msgid "Now we can find out what today is!  Observe::"
msgstr "现在可以知道今天是星期几了::"

#: ../../howto/enum.rst:107
msgid ""
"Of course, if you're reading this on some other day, you'll see that day "
"instead."
msgstr "当然，如果换个日子读到这篇文章，应该看到当天是周几。"

#: ../../howto/enum.rst:109
msgid ""
"This :class:`Weekday` enum is great if our variable only needs one day, but "
"what if we need several?  Maybe we're writing a function to plot chores "
"during a week, and don't want to use a :class:`list` -- we could use a "
"different type of :class:`Enum`::"
msgstr ""
"如果变量只需要存一天，这个 :class:`Weekday` 枚举是不错，但如果需要好几天呢？比如要写个函数来描绘一周内的家务，并且不想用 "
":class:`list`，则可以使用不同类型的 :class:`Enum`::"

#: ../../howto/enum.rst:124
msgid ""
"We've changed two things: we're inherited from :class:`Flag`, and the values"
" are all powers of 2."
msgstr "这里做了两处改动：继承了 :class:`Flag`，而且值都是2的幂。"

#: ../../howto/enum.rst:127
msgid ""
"Just like the original :class:`Weekday` enum above, we can have a single "
"selection::"
msgstr "就像最开始的 :class:`Weekday` 枚举一样，可以只用一种类型::"

#: ../../howto/enum.rst:133
msgid ""
"But :class:`Flag` also allows us to combine several members into a single "
"variable::"
msgstr "但 :class:`Flag` 也允许将几个成员并入一个变量::"

#: ../../howto/enum.rst:140
msgid "You can even iterate over a :class:`Flag` variable::"
msgstr "甚至可以在一个 :class:`Flag` 变量上进行迭代::"

#: ../../howto/enum.rst:147
msgid "Okay, let's get some chores set up::"
msgstr "好吧，让我们来安排家务吧::"

#: ../../howto/enum.rst:155
msgid "And a function to display the chores for a given day::"
msgstr "一个显示某天家务的函数::"

#: ../../howto/enum.rst:164
msgid ""
"In cases where the actual values of the members do not matter, you can save "
"yourself some work and use :func:`auto()` for the values::"
msgstr "如果成员值是什么无所谓，可以少些工作，用 :func:`auto()` 来取值::"

#: ../../howto/enum.rst:183
msgid "Programmatic access to enumeration members and their attributes"
msgstr "枚举成员及其属性的编程访问"

#: ../../howto/enum.rst:185
msgid ""
"Sometimes it's useful to access members in enumerations programmatically "
"(i.e. situations where ``Color.RED`` won't do because the exact color is not"
" known at program-writing time).  ``Enum`` allows such access::"
msgstr ""
"有时，要在程序中访问枚举成员（如，开发时不知道颜色的确切值，``Color.RED`` 不适用的情况）。``Enum`` 支持如下访问方式::"

#: ../../howto/enum.rst:194
msgid "If you want to access enum members by *name*, use item access::"
msgstr "若要用 *名称* 访问枚举成员时，可使用枚举项::"

#: ../../howto/enum.rst:201
msgid ""
"If you have an enum member and need its :attr:`name` or :attr:`value`::"
msgstr "若有了枚举成员，需要获取 :attr:`name` 或 :attr:`value`::"

#: ../../howto/enum.rst:211
msgid "Duplicating enum members and values"
msgstr "重复的枚举成员和值"

#: ../../howto/enum.rst:213
msgid "Having two enum members with the same name is invalid::"
msgstr "两个枚举成员的名称不能相同::"

#: ../../howto/enum.rst:223
msgid ""
"However, an enum member can have other names associated with it.  Given two "
"entries ``A`` and ``B`` with the same value (and ``A`` defined first), ``B``"
" is an alias for the member ``A``.  By-value lookup of the value of ``A`` "
"will return the member ``A``.  By-name lookup of ``A`` will return the "
"member ``A``. By-name lookup of ``B`` will also return the member ``A``::"
msgstr ""
"然而，一个枚举成员可以关联多个其他名称。如果两个枚举项 ``A`` 和 ``B`` 具有相同值（并且首先定义的是 ``A`` ），则 ``B`` 是成员"
" ``A`` 的别名。对 ``A`` 按值检索将会返回成员 ``A``。按名称检索 ``B`` 也会返回成员 ``A``::"

#: ../../howto/enum.rst:244
msgid ""
"Attempting to create a member with the same name as an already defined "
"attribute (another member, a method, etc.) or attempting to create an "
"attribute with the same name as a member is not allowed."
msgstr "不允许创建与已定义属性（其他成员、方法等）同名的成员，也不支持创建与现有成员同名的属性。"

#: ../../howto/enum.rst:250
msgid "Ensuring unique enumeration values"
msgstr "确保枚举值唯一"

#: ../../howto/enum.rst:252
msgid ""
"By default, enumerations allow multiple names as aliases for the same value."
" When this behavior isn't desired, you can use the :func:`unique` "
"decorator::"
msgstr "默认情况下，枚举允许多个名称作为同一个值的别名。若不想如此，可以使用 :func:`unique` 装饰器::"

#: ../../howto/enum.rst:269
msgid "Using automatic values"
msgstr "使用自动设定的值"

#: ../../howto/enum.rst:271
msgid "If the exact value is unimportant you can use :class:`auto`::"
msgstr "如果具体的枚举值无所谓是什么，可以使用 :class:`auto`::"

#: ../../howto/enum.rst:282
msgid ""
"The values are chosen by :func:`_generate_next_value_`, which can be "
"overridden::"
msgstr "枚举值将交由 :func:`_generate_next_value_` 选取，该函数可以被重写::"

#: ../../howto/enum.rst:300
msgid ""
"The :meth:`_generate_next_value_` method must be defined before any members."
msgstr ":meth:`_generate_next_value_` 方法的定义必须在任何其他成员之前。"

#: ../../howto/enum.rst:303
msgid "Iteration"
msgstr "迭代"

#: ../../howto/enum.rst:305
msgid "Iterating over the members of an enum does not provide the aliases::"
msgstr "对枚举成员的迭代遍历不会列出别名::"

#: ../../howto/enum.rst:312
msgid ""
"Note that the aliases ``Shape.ALIAS_FOR_SQUARE`` and ``Weekday.WEEKEND`` "
"aren't shown."
msgstr "请注意 ``Shape.ALIAS_FOR_SQUARE`` 和 ``Weekday.WEEKEND`` 等别名不会被显示。"

#: ../../howto/enum.rst:314
msgid ""
"The special attribute ``__members__`` is a read-only ordered mapping of "
"names to members.  It includes all names defined in the enumeration, "
"including the aliases::"
msgstr "特殊属性 ``__members__`` 是一个名称与成员间的只读有序映射。包含了枚举中定义的所有名称，包括别名::"

#: ../../howto/enum.rst:326
msgid ""
"The ``__members__`` attribute can be used for detailed programmatic access "
"to the enumeration members.  For example, finding all the aliases::"
msgstr "``__members__`` 属性可用于获取枚举成员的详细信息。比如查找所有别名::"

#: ../../howto/enum.rst:334
msgid ""
"Aliases for flags include values with multiple flags set, such as ``3``, and"
" no flags set, i.e. ``0``."
msgstr "旗标的别名包括带有多个旗标设置的值，如 ``3``，以及不设置任何旗标，即 ``0``。"

#: ../../howto/enum.rst:339
msgid "Comparisons"
msgstr "比较运算"

#: ../../howto/enum.rst:341
msgid "Enumeration members are compared by identity::"
msgstr "枚举成员是按 ID 进行比较的::"

#: ../../howto/enum.rst:350
msgid ""
"Ordered comparisons between enumeration values are *not* supported.  Enum "
"members are not integers (but see `IntEnum`_ below)::"
msgstr "枚举值之间无法进行有序的比较。枚举的成员不是整数（另请参阅下文 `IntEnum`_）::"

#: ../../howto/enum.rst:358
msgid "Equality comparisons are defined though::"
msgstr "相等性比较的定义如下::"

#: ../../howto/enum.rst:367
msgid ""
"Comparisons against non-enumeration values will always compare not equal "
"(again, :class:`IntEnum` was explicitly designed to behave differently, see "
"below)::"
msgstr "与非枚举值的比较将总是不等的（同样 :class:`IntEnum` 有意设计为其他的做法，参见下文）::"

#: ../../howto/enum.rst:376
msgid ""
"It is possible to reload modules -- if a reloaded module contains enums, "
"they will be recreated, and the new members may not compare identical/equal "
"to the original members."
msgstr "重载模块是可能的 -- 如果载入的模块包含枚举，它们将被重新创建，而新成员的标识号/相等性比较不一定会通过。"

#: ../../howto/enum.rst:381
msgid "Allowed members and attributes of enumerations"
msgstr "合法的枚举成员和属性"

#: ../../howto/enum.rst:383
msgid ""
"Most of the examples above use integers for enumeration values.  Using "
"integers is short and handy (and provided by default by the `Functional "
"API`_), but not strictly enforced.  In the vast majority of use-cases, one "
"doesn't care what the actual value of an enumeration is.  But if the value "
"*is* important, enumerations can have arbitrary values."
msgstr ""
"以上大多数示例都用了整数作为枚举值。使用整数确实简短方便（并且是 `Functional API`_ "
"默认提供的值），但并非强制要求。绝大多数情况下，人们并不关心枚举的实际值是什么。但如果值确实重要，可以使用任何值。"

#: ../../howto/enum.rst:389
msgid ""
"Enumerations are Python classes, and can have methods and special methods as"
" usual.  If we have this enumeration::"
msgstr "枚举是 Python 的类，可带有普通方法和特殊方法。假设有如下枚举::"

#: ../../howto/enum.rst:409
msgid "Then::"
msgstr "那么::"

#: ../../howto/enum.rst:418
msgid ""
"The rules for what is allowed are as follows: names that start and end with "
"a single underscore are reserved by enum and cannot be used; all other "
"attributes defined within an enumeration will become members of this "
"enumeration, with the exception of special methods (:meth:`__str__`, "
":meth:`__add__`, etc.), descriptors (methods are also descriptors), and "
"variable names listed in :attr:`_ignore_`."
msgstr ""
"合法的规则如下：以单下划线开头和结尾的名称是保留值，不能使用；在枚举中定义的其他所有属性都将成为该枚举的成员，但特殊方法（:meth:`__str__`"
" 、:meth:`__add__` 等）、描述符（方法也是描述符）和在  :attr:`_ignore_` 中列出的变量名除外。"

#: ../../howto/enum.rst:425
msgid ""
"Note:  if your enumeration defines :meth:`__new__` and/or :meth:`__init__`, "
"any value(s) given to the enum member will be passed into those methods. See"
" `Planet`_ for an example."
msgstr ""
"注意：如果你的枚举定义了 :meth:`__new__` 和/或 :meth:`__init__`，则给予枚举成员的任何值都将被传递给这些方法。 "
"请参阅示例 `Planet`_。"

#: ../../howto/enum.rst:431
msgid ""
"The :meth:`__new__` method, if defined, is used during creation of the Enum "
"members; it is then replaced by Enum's :meth:`__new__` which is used after "
"class creation for lookup of existing members.  See :ref:`new-vs-init` for "
"more details."
msgstr ""
"如果定义了 :meth:`__new__` 方法，则它会在创建 Enum 成员时被使用；然后它将被 Enum 的 :meth:`__new__` "
"所替换，该方法会在类创建后被用于查找现有成员。 详情参见 :ref:`new-vs-init`。"

#: ../../howto/enum.rst:438
msgid "Restricted Enum subclassing"
msgstr "受限的 Enum 子类化"

#: ../../howto/enum.rst:440
msgid ""
"A new :class:`Enum` class must have one base enum class, up to one concrete "
"data type, and as many :class:`object`-based mixin classes as needed.  The "
"order of these base classes is::"
msgstr ""
"新建的 :class:`Enum` 类必须包含：一个枚举基类、至多一种数据类型和按需提供的基于 :class:`object` "
"的混合类。这些基类的顺序如下::"

#: ../../howto/enum.rst:447
msgid ""
"Also, subclassing an enumeration is allowed only if the enumeration does not"
" define any members.  So this is forbidden::"
msgstr "仅当未定义任何成员时，枚举类才允许被子类化。因此不得有以下写法::"

#: ../../howto/enum.rst:457
msgid "But this is allowed::"
msgstr "但以下代码是可以的::"

#: ../../howto/enum.rst:468
msgid ""
"Allowing subclassing of enums that define members would lead to a violation "
"of some important invariants of types and instances.  On the other hand, it "
"makes sense to allow sharing some common behavior between a group of "
"enumerations. (See `OrderedEnum`_ for an example.)"
msgstr ""
"如果定义了成员的枚举也能被子类化，则类型与实例的某些重要不可变规则将会被破坏。另一方面，一组枚举类共享某些操作也是合理的。（请参阅例程 "
"`OrderedEnum`_ ）"

#: ../../howto/enum.rst:475
msgid "Pickling"
msgstr "打包（pickle）"

#: ../../howto/enum.rst:477
msgid "Enumerations can be pickled and unpickled::"
msgstr "枚举类型可以被打包和解包::"

#: ../../howto/enum.rst:484
msgid ""
"The usual restrictions for pickling apply: picklable enums must be defined "
"in the top level of a module, since unpickling requires them to be "
"importable from that module."
msgstr "打包的常规限制同样适用于枚举类型：必须在模块的最高层级定义，因为解包操作要求可从该模块导入。"

#: ../../howto/enum.rst:490
msgid ""
"With pickle protocol version 4 it is possible to easily pickle enums nested "
"in other classes."
msgstr "用 pickle 协议版本 4 可以轻松地将嵌入其他类中的枚举进行打包。"

#: ../../howto/enum.rst:493
msgid ""
"It is possible to modify how enum members are pickled/unpickled by defining "
":meth:`__reduce_ex__` in the enumeration class.  The default method is by-"
"value, but enums with complicated values may want to use by-name::"
msgstr ""
"通过在枚举类中定义 :meth:`__reduce_ex__` 来修改枚举成员的封存/解封方式是可能的。 "
"默认的方法是基于值的，但具有复杂值的枚举也许会想要基于名称的::"

#: ../../howto/enum.rst:503
msgid ""
"Using by-name for flags is not recommended, as unnamed aliases will not "
"unpickle."
msgstr "不建议为旗标使用基于名称的方式，因为未命名的别名将无法解封。"

#: ../../howto/enum.rst:508
msgid "Functional API"
msgstr "函数式 API"

#: ../../howto/enum.rst:510
msgid ""
"The :class:`Enum` class is callable, providing the following functional "
"API::"
msgstr ":class:`Enum` 类可调用并提供了以下函数式 API："

#: ../../howto/enum.rst:520
msgid ""
"The semantics of this API resemble :class:`~collections.namedtuple`. The "
"first argument of the call to :class:`Enum` is the name of the enumeration."
msgstr ""
"该 API 的语义类似于 :class:`~collections.namedtuple`。调用 :class:`Enum` 的第一个参数是枚举的名称。"

#: ../../howto/enum.rst:523
msgid ""
"The second argument is the *source* of enumeration member names.  It can be "
"a whitespace-separated string of names, a sequence of names, a sequence of "
"2-tuples with key/value pairs, or a mapping (e.g. dictionary) of names to "
"values.  The last two options enable assigning arbitrary values to "
"enumerations; the others auto-assign increasing integers starting with 1 "
"(use the ``start`` parameter to specify a different starting value).  A new "
"class derived from :class:`Enum` is returned.  In other words, the above "
"assignment to :class:`Animal` is equivalent to::"
msgstr ""
"第二个参数是枚举成员名称的 *来源*。可以是个用空格分隔的名称字符串、名称序列、表示键/值对的二元组的序列，或者名称到值的映射（如字典）。 "
"最后两种可以为枚举赋任意值；其他类型则会自动赋成由 1 开始递增的整数值（利用 ``start`` 形参可指定为其他起始值）。返回值是一个派生自 "
":class:`Enum` 的新类。换句话说，上述对 :class:`Animal` 的赋值等价于::"

#: ../../howto/enum.rst:539
msgid ""
"The reason for defaulting to ``1`` as the starting number and not ``0`` is "
"that ``0`` is ``False`` in a boolean sense, but by default enum members all "
"evaluate to ``True``."
msgstr ""
"默认从 ``1`` 开始而非 ``0`` ，因为 ``0`` 是布尔值 ``False`` ，但默认的枚举成员都被视作 ``True`` 。"

#: ../../howto/enum.rst:543
msgid ""
"Pickling enums created with the functional API can be tricky as frame stack "
"implementation details are used to try and figure out which module the "
"enumeration is being created in (e.g. it will fail if you use a utility "
"function in a separate module, and also may not work on IronPython or "
"Jython). The solution is to specify the module name explicitly as follows::"
msgstr ""
"对使用函数式 API "
"创建的枚举进行封存，可能会很棘手，因为要使用栈帧的实现细节来尝试找出枚举是在哪个模块中创建的（例如当你使用了另一个模块中的实用函数时它就可能失败，在 "
"IronPython 或 Jython 上也可能无效）。解决办法是像下面这样显式地指定模块名称："

#: ../../howto/enum.rst:553
msgid ""
"If ``module`` is not supplied, and Enum cannot determine what it is, the new"
" Enum members will not be unpicklable; to keep errors closer to the source, "
"pickling will be disabled."
msgstr ""
"如果未提供 ``module``，且 Enum 无法确定是哪个模块，新的 Enum 成员将不可被解封；为了让错误尽量靠近源头，封存将被禁用。"

#: ../../howto/enum.rst:557
msgid ""
"The new pickle protocol 4 also, in some circumstances, relies on "
":attr:`~definition.__qualname__` being set to the location where pickle will"
" be able to find the class.  For example, if the class was made available in"
" class SomeData in the global scope::"
msgstr ""
"新的 pickle 协议版本 4 在某些情况下同样依赖于 :attr:`~definition.__qualname__` 被设为特定位置以便 "
"pickle 能够找到相应的类。 例如，类是否存在于全局作用域的 SomeData 类中::"

#: ../../howto/enum.rst:564
msgid "The complete signature is::"
msgstr "完整的签名为::"

#: ../../howto/enum.rst:576
msgid "*value*: What the new enum class will record as its name."
msgstr "*value*: 新枚举类将会作为其名称记录的值。"

#: ../../howto/enum.rst:578
msgid ""
"*names*: The enum members.  This can be a whitespace- or comma-separated "
"string (values will start at 1 unless otherwise specified)::"
msgstr "*names*: 枚举的成员。 这可以是一个用空格或逗号分隔的字符串（值将从 1 开始除非另外指定）::"

#: ../../howto/enum.rst:583
msgid "or an iterator of names::"
msgstr "或是一个名称的迭代器对象::"

#: ../../howto/enum.rst:587
msgid "or an iterator of (name, value) pairs::"
msgstr "或是一个 (名称, 值) 对的迭代器对象::"

#: ../../howto/enum.rst:591
msgid "or a mapping::"
msgstr "或是一个映射对象::"

#: ../../howto/enum.rst:595
msgid "*module*: name of module where new enum class can be found."
msgstr "*module*: 新枚举类所在的模块名。"

#: ../../howto/enum.rst:597
msgid "*qualname*: where in module new enum class can be found."
msgstr "*qualname*: 新枚举类在模块内的位置。"

#: ../../howto/enum.rst:599
msgid "*type*: type to mix in to new enum class."
msgstr "*type*: 要混入到新枚举类的类型。"

#: ../../howto/enum.rst:601
msgid "*start*: number to start counting at if only names are passed in."
msgstr "*start*: 当只传入名称时要使用的起始计数编号。"

#: ../../howto/enum.rst:603
msgid "The *start* parameter was added."
msgstr "增加了 *start* 形参。"

#: ../../howto/enum.rst:608
msgid "Derived Enumerations"
msgstr "派生的枚举"

#: ../../howto/enum.rst:611
msgid "IntEnum"
msgstr "IntEnum"

#: ../../howto/enum.rst:613
msgid ""
"The first variation of :class:`Enum` that is provided is also a subclass of "
":class:`int`.  Members of an :class:`IntEnum` can be compared to integers; "
"by extension, integer enumerations of different types can also be compared "
"to each other::"
msgstr ""
"所提供的第一个变种 :class:`Enum` 同时也是 :class:`int` 的一个子类。 :class:`IntEnum` "
"的成员可与整数进行比较；通过扩展，不同类型的整数枚举也可以相互进行比较::"

#: ../../howto/enum.rst:634
msgid ""
"However, they still can't be compared to standard :class:`Enum` "
"enumerations::"
msgstr "不过，它们仍然不可与标准 :class:`Enum` 枚举进行比较::"

#: ../../howto/enum.rst:647
msgid ""
":class:`IntEnum` values behave like integers in other ways you'd expect::"
msgstr ":class:`IntEnum` 值在其他方面的行为都如你预期的一样类似于整数::"

#: ../../howto/enum.rst:658
msgid "StrEnum"
msgstr "StrEnum"

#: ../../howto/enum.rst:660
msgid ""
"The second variation of :class:`Enum` that is provided is also a subclass of"
" :class:`str`.  Members of a :class:`StrEnum` can be compared to strings; by"
" extension, string enumerations of different types can also be compared to "
"each other."
msgstr ""
"所提供的第二种 :class:`Enum` 变体同时也是 :class:`str` 的一个子类。 :class:`StrEnum` "
"的成员可与字符串进行比较；通过扩展，不同类型的字符串枚举也可以相互进行比较。"

#: ../../howto/enum.rst:669
msgid "IntFlag"
msgstr "IntFlag"

#: ../../howto/enum.rst:671
msgid ""
"The next variation of :class:`Enum` provided, :class:`IntFlag`, is also "
"based on :class:`int`.  The difference being :class:`IntFlag` members can be"
" combined using the bitwise operators (&, \\|, ^, ~) and the result is still"
" an :class:`IntFlag` member, if possible.  Like :class:`IntEnum`, "
":class:`IntFlag` members are also integers and can be used wherever an "
":class:`int` is used."
msgstr ""
"所提供的下一种 :class:`Enum` 变体 :class:`IntFlag` 也是基于 :class:`int` 的。 不同之处在于 "
":class:`IntFlag` 成员可以用位运算符 (&, \\|, ^, ~) 进行组合并且如果可能的话其结果仍将是 "
":class:`IntFlag` 成员。 与 :class:`IntEnum` 类似，:class:`IntFlag` 成员也是整数并且可以用于任何使用"
" :class:`int` 的地方。"

#: ../../howto/enum.rst:679
msgid ""
"Any operation on an :class:`IntFlag` member besides the bit-wise operations "
"will lose the :class:`IntFlag` membership."
msgstr "除位操作外，其他所有对 :class:`IntFlag` 成员的操作，都会失去 :class:`IntFlag` 成员资格。"

#: ../../howto/enum.rst:682
msgid ""
"Bit-wise operations that result in invalid :class:`IntFlag` values will lose"
" the :class:`IntFlag` membership.  See :class:`FlagBoundary` for details."
msgstr ""
"导致 :class:`IntFlag` 值无效的位操作将失去 :class:`IntFlag` 成员资格。详见 "
":class:`FlagBoundary`。"

#: ../../howto/enum.rst:689
msgid "Sample :class:`IntFlag` class::"
msgstr "示例 :class:`IntFlag` 类::"

#: ../../howto/enum.rst:705
msgid "It is also possible to name the combinations::"
msgstr "对于组合同样可以进行命名::"

#: ../../howto/enum.rst:721
msgid ""
"Named combinations are considered aliases.  Aliases do not show up during "
"iteration, but can be returned from by-value lookups."
msgstr "命名的枚举组合被视作别名。别名在迭代过程中不会显示，但可以通过值查询返回。"

#: ../../howto/enum.rst:726
msgid ""
"Another important difference between :class:`IntFlag` and :class:`Enum` is "
"that if no flags are set (the value is 0), its boolean evaluation is "
":data:`False`::"
msgstr ""
":class:`IntFlag` 和 :class:`Enum` 的另一个重要区别在于如果没有设置任何旗标（值为 0），则其布尔值为 "
":data:`False`::"

#: ../../howto/enum.rst:734
msgid ""
"Because :class:`IntFlag` members are also subclasses of :class:`int` they "
"can be combined with them (but may lose :class:`IntFlag` membership::"
msgstr ""
"因为 :class:`IntFlag` 成员也是 :class:`int` 的子类，他们可以相互组合（但可能会失去 :class:`IntFlag` "
"成员资格::"

#: ../../howto/enum.rst:745
msgid ""
"The negation operator, ``~``, always returns an :class:`IntFlag` member with"
" a positive value::"
msgstr "否运算符 ``~``，始终会返回一个 :class:`IntFlag` 成员的正值::"

#: ../../howto/enum.rst:751
msgid ":class:`IntFlag` members can also be iterated over::"
msgstr ":class:`IntFlag` 成员也可被迭代遍历::"

#: ../../howto/enum.rst:760
msgid "Flag"
msgstr "标志位"

#: ../../howto/enum.rst:762
msgid ""
"The last variation is :class:`Flag`.  Like :class:`IntFlag`, :class:`Flag` "
"members can be combined using the bitwise operators (&, \\|, ^, ~).  Unlike "
":class:`IntFlag`, they cannot be combined with, nor compared against, any "
"other :class:`Flag` enumeration, nor :class:`int`.  While it is possible to "
"specify the values directly it is recommended to use :class:`auto` as the "
"value and let :class:`Flag` select an appropriate value."
msgstr ""
"最后一个变体是 :class:`Flag`。与 :class:`IntFlag` 类似，:class:`Flag` 成员可用按位运算符 (&, \\|,"
" ^, ~) 组合。与 :class:`IntFlag` 不同的是，它们不可与其它 :class:`Flag` 枚举或 :class:`int` "
"进行组合或比较。 虽然可以直接指定值，但推荐使用 :class:`auto` 作为值来让 :class:`Flag` 选择适当的值。"

#: ../../howto/enum.rst:771
msgid ""
"Like :class:`IntFlag`, if a combination of :class:`Flag` members results in "
"no flags being set, the boolean evaluation is :data:`False`::"
msgstr ""
"与 :class:`IntFlag` 类似，如果 :class:`Flag` 成员的某种组合导致没有设置任何旗标，则其布尔值为 "
":data:`False`::"

#: ../../howto/enum.rst:785
msgid ""
"Individual flags should have values that are powers of two (1, 2, 4, 8, "
"...), while combinations of flags will not::"
msgstr "单个旗标的值应当为二的乘方 (1, 2, 4, 8, ...)，而旗标的组合则无此限制::"

#: ../../howto/enum.rst:797
msgid ""
"Giving a name to the \"no flags set\" condition does not change its boolean "
"value::"
msgstr "对 \"no flags set\" 条件指定一个名称并不会改变其布尔值::"

#: ../../howto/enum.rst:811
msgid ":class:`Flag` members can also be iterated over::"
msgstr ":class:`Flag` 成员也可被迭代遍历::"

#: ../../howto/enum.rst:821
msgid ""
"For the majority of new code, :class:`Enum` and :class:`Flag` are strongly "
"recommended, since :class:`IntEnum` and :class:`IntFlag` break some semantic"
" promises of an enumeration (by being comparable to integers, and thus by "
"transitivity to other unrelated enumerations).  :class:`IntEnum` and "
":class:`IntFlag` should be used only in cases where :class:`Enum` and "
":class:`Flag` will not do; for example, when integer constants are replaced "
"with enumerations, or for interoperability with other systems."
msgstr ""
"对于大多数新代码，强烈推荐使用 :class:`Enum` 和 :class:`Flag`，因为 :class:`IntEnum` 和 "
":class:`IntFlag` 打破了枚举的某些语义约定（例如可以同整数进行比较，并因而导致此行为被传递给其他无关的枚举）。 "
":class:`IntEnum` 和 :class:`IntFlag` 的使用应当仅限于 :class:`Enum` 和 :class:`Flag` "
"无法使用的场合；例如，当使用枚举替代整数常量时，或是与其他系统进行交互操作时。"

#: ../../howto/enum.rst:831
msgid "Others"
msgstr "其他事项"

#: ../../howto/enum.rst:833
msgid ""
"While :class:`IntEnum` is part of the :mod:`enum` module, it would be very "
"simple to implement independently::"
msgstr "虽然 :class:`IntEnum` 是 :mod:`enum` 模块的一部分，但要独立实现也应该相当容易::"

#: ../../howto/enum.rst:839
msgid ""
"This demonstrates how similar derived enumerations can be defined; for "
"example a :class:`FloatEnum` that mixes in :class:`float` instead of "
":class:`int`."
msgstr ""
"这里演示了如何定义类似的派生枚举；例如一个混入了 :class:`float` 而不是 :class:`int` 的 "
":class:`FloatEnum`。"

#: ../../howto/enum.rst:842
msgid "Some rules:"
msgstr "几条规则："

#: ../../howto/enum.rst:844
msgid ""
"When subclassing :class:`Enum`, mix-in types must appear before "
":class:`Enum` itself in the sequence of bases, as in the :class:`IntEnum` "
"example above."
msgstr ""
"当子类化 :class:`Enum` 时，在基类序列中的混合类型必须出现于 :class:`Enum` 本身之前，如以上 "
":class:`IntEnum` 的例子所示。"

#: ../../howto/enum.rst:847
msgid ""
"Mix-in types must be subclassable. For example, :class:`bool` and "
":class:`range` are not subclassable and will throw an error during Enum "
"creation if used as the mix-in type."
msgstr ""
"混入类型必须是可子类化的。 例如，:class:`bool` 和 :class:`range` "
"是不可子类化的因而如果被用作混入类型就将在枚举创建期间抛出错误。"

#: ../../howto/enum.rst:850
msgid ""
"While :class:`Enum` can have members of any type, once you mix in an "
"additional type, all the members must have values of that type, e.g. "
":class:`int` above.  This restriction does not apply to mix-ins which only "
"add methods and don't specify another type."
msgstr ""
"虽然 :class:`Enum` 可以拥有任意类型的成员，不过一旦你混合了附加类型，则所有成员必须为相应类型的值，如在上面的例子中即为 "
":class:`int`。 此限制不适用于仅添加方法而未指定另一数据类型的混合类。"

#: ../../howto/enum.rst:854
msgid ""
"When another data type is mixed in, the :attr:`value` attribute is *not the "
"same* as the enum member itself, although it is equivalent and will compare "
"equal."
msgstr "当混合了另一数据类型时，:attr:`value` 属性会 *不同于* 枚举成员自身，但它们仍保持等价且比较结果也相等。"

#: ../../howto/enum.rst:857
msgid "A ``data type`` is a mixin that defines :meth:`__new__`."
msgstr "``数据类型`` 就是定义了 :meth:`__new__` 的混入类型。"

#: ../../howto/enum.rst:858
msgid ""
"%-style formatting:  ``%s`` and ``%r`` call the :class:`Enum` class's "
":meth:`__str__` and :meth:`__repr__` respectively; other codes (such as "
"``%i`` or ``%h`` for IntEnum) treat the enum member as its mixed-in type."
msgstr ""
"% 形式的格式化: ``%s`` 和 ``%r`` 会分别调用 :class:`Enum` 类的 :meth:`__str__` 和 "
":meth:`__repr__`；其他代码 (如 ``%i`` 或 ``%h`` 用于 IntEnum) 会将枚举成员视为对应的混入类型。"

#: ../../howto/enum.rst:861
msgid ""
":ref:`Formatted string literals <f-strings>`, :meth:`str.format`, and "
":func:`format` will use the enum's :meth:`__str__` method."
msgstr ""
":ref:`格式化字符串字面值 <f-strings>`, :meth:`str.format` 和 :func:`format` 将使用枚举的 "
":meth:`__str__` 方法。"

#: ../../howto/enum.rst:866
msgid ""
"Because :class:`IntEnum`, :class:`IntFlag`, and :class:`StrEnum` are "
"designed to be drop-in replacements for existing constants, their "
":meth:`__str__` method has been reset to their data types' :meth:`__str__` "
"method."
msgstr ""
"因为 :class:`IntEnum`, :class:`IntFlag` 和 :class:`StrEnum` 被设计为现有常量的原样替代，它们的 "
":meth:`__str__` 方法已被重围为其数据类型的 :meth:`__str__` 方法。"

#: ../../howto/enum.rst:874
msgid "When to use :meth:`__new__` vs. :meth:`__init__`"
msgstr "何时使用 :meth:`__new__` 与 :meth:`__init__`"

#: ../../howto/enum.rst:876
msgid ""
":meth:`__new__` must be used whenever you want to customize the actual value"
" of the :class:`Enum` member.  Any other modifications may go in either "
":meth:`__new__` or :meth:`__init__`, with :meth:`__init__` being preferred."
msgstr ""
"当你想要定制 :class:`Enum` 成员的实际值时必须使用 :meth:`__new__`。 任何其他修改可以用 :meth:`__new__` "
"也可以用 :meth:`__init__`，应优先使用 :meth:`__init__`。"

#: ../../howto/enum.rst:880
msgid ""
"For example, if you want to pass several items to the constructor, but only "
"want one of them to be the value::"
msgstr "举例来说，如果你要向构造器传入多个条目，但只希望将其中一个作为值::"

#: ../../howto/enum.rst:907
msgid ""
"*Do not* call ``super().__new__()``, as the lookup-only ``__new__`` is the "
"one that is found; instead, use the data type directly."
msgstr "*不要* 调用 ``super().__new__()``，因为只能找到仅用于查找的 ``__new__``；请改为直接使用该数据类型。"

#: ../../howto/enum.rst:912
msgid "Finer Points"
msgstr "细节要点"

#: ../../howto/enum.rst:915
msgid "Supported ``__dunder__`` names"
msgstr "支持的 ``__dunder__`` 名称"

#: ../../howto/enum.rst:917
msgid ""
":attr:`__members__` is a read-only ordered mapping of "
"``member_name``:``member`` items.  It is only available on the class."
msgstr ""
":attr:`__members__` 是一个 ``member_name``:``member`` 条目的只读有序映射。 它只在类上可用。"

#: ../../howto/enum.rst:920
msgid ""
":meth:`__new__`, if specified, must create and return the enum members; it "
"is also a very good idea to set the member's :attr:`_value_` appropriately."
"  Once all the members are created it is no longer used."
msgstr ""
"如果指定了 :meth:`__new__`，它必须创建并返回枚举成员；相应地设定成员的 :attr:`_value_` 也是一个很好的主意。 "
"一旦所有成员都创建完成它就不会再被使用。"

#: ../../howto/enum.rst:926
msgid "Supported ``_sunder_`` names"
msgstr "支持的 ``_sunder_`` 名称"

#: ../../howto/enum.rst:928
msgid "``_name_`` -- name of the member"
msgstr "``_name_`` -- 成员的名称"

#: ../../howto/enum.rst:929
msgid ""
"``_value_`` -- value of the member; can be set / modified in ``__new__``"
msgstr "``_value_`` -- 成员的值；可以在 ``__new__`` 中设置 / 修改"

#: ../../howto/enum.rst:931
msgid ""
"``_missing_`` -- a lookup function used when a value is not found; may be "
"overridden"
msgstr "``_missing_`` -- 当未发现某个值时所使用的查找函数；可被重写"

#: ../../howto/enum.rst:933
msgid ""
"``_ignore_`` -- a list of names, either as a :class:`list` or a "
":class:`str`, that will not be transformed into members, and will be removed"
" from the final class"
msgstr ""
"``_ignore_`` -- 一个名称列表，可以为 :class:`list` 或 :class:`str`，它不会被转化为成员，并将从最终类中被移除"

#: ../../howto/enum.rst:936
msgid ""
"``_order_`` -- used in Python 2/3 code to ensure member order is consistent "
"(class attribute, removed during class creation)"
msgstr "``_order_`` -- 用于 Python 2/3 代码以确保成员顺序一致（类属性，在类创建期间会被移除）"

#: ../../howto/enum.rst:938
msgid ""
"``_generate_next_value_`` -- used by the `Functional API`_ and by "
":class:`auto` to get an appropriate value for an enum member; may be "
"overridden"
msgstr ""
"``_generate_next_value_`` -- `Functional API`_ 和 :class:`auto` "
"用它为枚举成员获取适当的值；可被重写"

#: ../../howto/enum.rst:944
msgid ""
"For standard :class:`Enum` classes the next value chosen is the last value "
"seen incremented by one."
msgstr "对于标准的 :class:`Enum` 类，选择的下一个值是最后所见值加1。"

#: ../../howto/enum.rst:947
msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two, regardless of the last value seen."
msgstr "对于 :class:`Flag` 类，下一个选择的值将是下一个最高的2次幂数，与最后所见值无关。"

#: ../../howto/enum.rst:950
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

#: ../../howto/enum.rst:951
msgid "``_ignore_``"
msgstr "``_ignore_``"

#: ../../howto/enum.rst:953
msgid ""
"To help keep Python 2 / Python 3 code in sync an :attr:`_order_` attribute "
"can be provided.  It will be checked against the actual order of the "
"enumeration and raise an error if the two do not match::"
msgstr ""
"用来帮助 Python 2 / Python 3 代码保持同步提供 :attr:`_order_` 属性。 "
"它将与枚举的实际顺序进行对照检查，如果两者不匹配则会引发错误::"

#: ../../howto/enum.rst:971
msgid ""
"In Python 2 code the :attr:`_order_` attribute is necessary as definition "
"order is lost before it can be recorded."
msgstr "在 Python 2 代码中 :attr:`_order_` 属性是必须的，因为定义顺序在被记录之前就会丢失。"

#: ../../howto/enum.rst:976
msgid "_Private__names"
msgstr "_Private__names"

#: ../../howto/enum.rst:978
msgid ""
":ref:`Private names <private-name-mangling>` are not converted to enum "
"members, but remain normal attributes."
msgstr ":ref:`私有名称 <private-name-mangling>` 不会被转换为枚举成员，而是保持为普通属性。"

#: ../../howto/enum.rst:985
msgid "``Enum`` member type"
msgstr "``Enum`` 成员类型"

#: ../../howto/enum.rst:987
msgid ""
"Enum members are instances of their enum class, and are normally accessed as"
" ``EnumClass.member``.  In certain situations, such as writing custom enum "
"behavior, being able to access one member directly from another is useful, "
"and is supported."
msgstr ""
"枚举成员是其枚举类型的实例，并且通常作为 ``EnumClass.member`` 来访问。 "
"在特定场景下，如编写自定义枚举行为，可从一个成员访问另一个成员的能力是很有用的，并且是受支持的。"

#: ../../howto/enum.rst:996
msgid "Creating members that are mixed with other data types"
msgstr "创建与其他数据类型混合的成员"

#: ../../howto/enum.rst:998
msgid ""
"When subclassing other data types, such as :class:`int` or :class:`str`, "
"with an :class:`Enum`, all values after the ``=`` are passed to that data "
"type's constructor.  For example::"
msgstr ""
"当使用 :class:`Enum` 来子类化其他数据类型，如 :class:`int` 或 :class:`str` 时，所有在 ``=`` "
"之后的值都会被传递给该数据类型的构造器。 例如::"

#: ../../howto/enum.rst:1010
msgid "Boolean value of ``Enum`` classes and members"
msgstr "``Enum`` 类和成员的布尔值"

#: ../../howto/enum.rst:1012
msgid ""
"Enum classes that are mixed with non-:class:`Enum` types (such as "
":class:`int`, :class:`str`, etc.) are evaluated according to the mixed-in "
"type's rules; otherwise, all members evaluate as :data:`True`.  To make your"
" own enum's boolean evaluation depend on the member's value add the "
"following to your class::"
msgstr ""
"与非 :class:`Enum` 类型（如 :class:`int`、:class:`str` "
"等）混合的枚举类会根据混合类型的规则进行计算；否则，所有成员都计算为 "
":data:`True`。为了使你自己的枚举的布尔值取决于成员的值，请在你的类中添加以下内容::"

#: ../../howto/enum.rst:1021
msgid "Plain :class:`Enum` classes always evaluate as :data:`True`."
msgstr "普通的 :class:`Enum` 类总是计算为 :data:`True`。"

#: ../../howto/enum.rst:1025
msgid "``Enum`` classes with methods"
msgstr "带有方法的 ``Enum`` 类"

#: ../../howto/enum.rst:1027
msgid ""
"If you give your enum subclass extra methods, like the `Planet`_ class "
"below, those methods will show up in a :func:`dir` of the member, but not of"
" the class::"
msgstr ""
"如果你给你的枚举子类提供了额外的方法，如下面的 `Planet`_ 类那样，这些方法将显示在成员的，而不是类的 :func:`dir` 中::"

#: ../../howto/enum.rst:1038
msgid "Combining members of ``Flag``"
msgstr "组合 ``Flag`` 的成员"

#: ../../howto/enum.rst:1040
msgid ""
"Iterating over a combination of :class:`Flag` members will only return the "
"members that are comprised of a single bit::"
msgstr "遍历 :class:`Flag` 成员的组合将只返回由一个比特组成的成员::"

#: ../../howto/enum.rst:1058
msgid "``Flag`` and ``IntFlag`` minutia"
msgstr "``Flag`` 和 ``IntFlag`` 的细节"

#: ../../howto/enum.rst:1060
msgid "Using the following snippet for our examples::"
msgstr "使用以下代码段作为我们的例子::"

#: ../../howto/enum.rst:1071
msgid "the following are true:"
msgstr "下列情况为True:"

#: ../../howto/enum.rst:1073
msgid "single-bit flags are canonical"
msgstr "单比特标志是典型的"

#: ../../howto/enum.rst:1074
msgid "multi-bit and zero-bit flags are aliases"
msgstr "多比特和零比特标志是别名"

#: ../../howto/enum.rst:1075
msgid "only canonical flags are returned during iteration::"
msgstr "迭代过程中只返回典型的标志::"

#: ../../howto/enum.rst:1080
msgid ""
"negating a flag or flag set returns a new flag/flag set with the "
"corresponding positive integer value::"
msgstr "取负一个标志或标志集会返回一个新的标志/标志集和其对应的正整数值::"

#: ../../howto/enum.rst:1089
msgid "names of pseudo-flags are constructed from their members' names::"
msgstr "伪标志的名称是由其成员的名称构建的::"

#: ../../howto/enum.rst:1094
msgid "multi-bit flags, aka aliases, can be returned from operations::"
msgstr "多位标志，又称别名，可以从操作中返回::"

#: ../../howto/enum.rst:1105
msgid ""
"membership / containment checking: zero-valued flags are always considered "
"to be contained::"
msgstr "成员 / 包含检测：零值旗标总是会被视为包含::"

#: ../../howto/enum.rst:1111
msgid ""
"otherwise, only if all bits of one flag are in the other flag will True be "
"returned::"
msgstr "在其他情况下，仅当一个旗标的所有比特位都包含于另一个旗标中才会返回 True::"

#: ../../howto/enum.rst:1120
msgid ""
"There is a new boundary mechanism that controls how out-of-range / invalid "
"bits are handled: ``STRICT``, ``CONFORM``, ``EJECT``, and ``KEEP``:"
msgstr ""
"有一个新的边界机制，控制如何处理超出范围的/无效的比特:``STRICT``，``CONFORM``，``EJECT``，``KEEP``。"

#: ../../howto/enum.rst:1123
msgid "STRICT --> raises an exception when presented with invalid values"
msgstr "STRICT --> 当出现无效的值时，会触发一个异常。"

#: ../../howto/enum.rst:1124
msgid "CONFORM --> discards any invalid bits"
msgstr "CONFORM --> 丢弃任何无效的比特"

#: ../../howto/enum.rst:1125
msgid ""
"EJECT --> lose Flag status and become a normal int with the given value"
msgstr "EJECT --> 失去Flag的状态，成为一个普通的int，其值为给定值。"

#: ../../howto/enum.rst:1126
msgid "KEEP --> keep the extra bits"
msgstr "KEEP --> 保留额外的比特"

#: ../../howto/enum.rst:1128
msgid "keeps Flag status and extra bits"
msgstr "保留Flag状态和额外的比特"

#: ../../howto/enum.rst:1129
msgid "extra bits do not show up in iteration"
msgstr "额外的比特不会在迭代中显示出来"

#: ../../howto/enum.rst:1130
msgid "extra bits do show up in repr() and str()"
msgstr "在repr()和str()中确实显示了额外的比特"

#: ../../howto/enum.rst:1132
msgid ""
"The default for Flag is ``STRICT``, the default for ``IntFlag`` is "
"``EJECT``, and the default for ``_convert_`` is ``KEEP`` (see "
"``ssl.Options`` for an example of when ``KEEP`` is needed)."
msgstr ""
"默认的标志为 "
"``STRICT``，``IntFlag``默认为``EJECT``，``_convert_``默认为``KEEP``（需要``KEEP``的例子见``ssl.Options``）。"

#: ../../howto/enum.rst:1140
msgid "How are Enums and Flags different?"
msgstr "枚举和旗标有何差异？"

#: ../../howto/enum.rst:1142
msgid ""
"Enums have a custom metaclass that affects many aspects of both derived "
":class:`Enum` classes and their instances (members)."
msgstr "Enum有一个自定义的元类，它影响到派生的 :class:`Enum` 类和它们的实例（成员）的许多方面。"

#: ../../howto/enum.rst:1147
msgid "Enum Classes"
msgstr "枚举类"

#: ../../howto/enum.rst:1149
msgid ""
"The :class:`EnumType` metaclass is responsible for providing the "
":meth:`__contains__`, :meth:`__dir__`, :meth:`__iter__` and other methods "
"that allow one to do things with an :class:`Enum` class that fail on a "
"typical class, such as ``list(Color)`` or ``some_enum_var in Color``.  "
":class:`EnumType` is responsible for ensuring that various other methods on "
"the final :class:`Enum` class are correct (such as :meth:`__new__`, "
":meth:`__getnewargs__`, :meth:`__str__` and :meth:`__repr__`)."
msgstr ""
":class:`EnumType` 元类负责提供 :meth:`__contains__`, :meth:`__dir__`, "
":meth:`__iter__` 和其他方法来允许人们在 :class:`Enum` 类上做一些在普通类上会失败的事情，比如 "
"``list(Color)`` 或 ``some_enum_var in Color`` 等。 :class:`EnumType` 负责确保最终的 "
":class:`Enum` 类上的各种其他方法是正确的（比如 :meth:`__new__`, :meth:`__getnewargs__`, "
":meth:`__str__` 和 :meth:`__repr__` 等）。"

#: ../../howto/enum.rst:1158
msgid "Flag Classes"
msgstr "旗标类"

#: ../../howto/enum.rst:1160
msgid ""
"Flags have an expanded view of aliasing: to be canonical, the value of a "
"flag needs to be a power-of-two value, and not a duplicate name.  So, in "
"addition to the :class:`Enum` definition of alias, a flag with no value "
"(a.k.a. ``0``) or with more than one power-of-two value (e.g. ``3``) is "
"considered an alias."
msgstr ""
"旗标具有扩展的别名视图：为了符合规范，旗标的值必须为二的乘方，且名称不可重复。 因此，除了别名的定义 :class:`Enum` 之外，没有值 (即 "
"``0``) 或是几个二的乘方值之和 (如 ``3``) 的旗标也会被视为别名。"

#: ../../howto/enum.rst:1166
msgid "Enum Members (aka instances)"
msgstr "枚举成员（即实例）"

#: ../../howto/enum.rst:1168
msgid ""
"The most interesting thing about enum members is that they are singletons. "
":class:`EnumType` creates them all while it is creating the enum class "
"itself, and then puts a custom :meth:`__new__` in place to ensure that no "
"new ones are ever instantiated by returning only the existing member "
"instances."
msgstr ""
":class:`EnumType` 在创建枚举类本身的时候，创建了所有的枚举类，然后把一个自定义的 :meth:`__new__` "
"放在那里，通过只返回现有的成员实例来确保没有新的成员被实例化。"

#: ../../howto/enum.rst:1174
msgid "Flag Members"
msgstr "旗标成员"

#: ../../howto/enum.rst:1176
msgid ""
"Flag members can be iterated over just like the :class:`Flag` class, and "
"only the canonical members will be returned.  For example::"
msgstr "旗标成员可以如 :class:`Flag` 类一样被迭代，并且只有规范的成员会被返回。 例如::"

#: ../../howto/enum.rst:1182
msgid "(Note that ``BLACK``, ``PURPLE``, and ``WHITE`` do not show up.)"
msgstr "（请注意 ``BLACK``, ``PURPLE`` 和 ``WHITE`` 将不显示。）"

#: ../../howto/enum.rst:1184
msgid ""
"Inverting a flag member returns the corresponding positive value, rather "
"than a negative value --- for example::"
msgstr "对一个旗标成员取反将返回对应的正值，而不是负值 --- 例如::"

#: ../../howto/enum.rst:1190
msgid ""
"Flag members have a length corresponding to the number of power-of-two "
"values they contain.  For example::"
msgstr "旗标成员具有与它们所包含的二的乘方值的数量相对应的长度。 例如::"

#: ../../howto/enum.rst:1200
msgid "Enum Cookbook"
msgstr "枚举指导手册"

#: ../../howto/enum.rst:1203
msgid ""
"While :class:`Enum`, :class:`IntEnum`, :class:`StrEnum`, :class:`Flag`, and "
":class:`IntFlag` are expected to cover the majority of use-cases, they "
"cannot cover them all.  Here are recipes for some different types of "
"enumerations that can be used directly, or as examples for creating one's "
"own."
msgstr ""
"虽然 :class:`Enum`, :class:`IntEnum`, :class:`StrEnum`, :class:`Flag` 和 "
":class:`IntFlag` 有望能涵盖大多数的使用情况，但它们不能涵盖所有情况。 "
"这里有一些不同类型的枚举的方法，可以直接使用，或者作为创建定制枚举的范例。"

#: ../../howto/enum.rst:1210
msgid "Omitting values"
msgstr "省略值"

#: ../../howto/enum.rst:1212
msgid ""
"In many use-cases, one doesn't care what the actual value of an enumeration "
"is. There are several ways to define this type of simple enumeration:"
msgstr "在许多应用场景中，人们并不关心枚举的实际值是什么。 有几种方式可用来定义这种类型的简单枚举:"

#: ../../howto/enum.rst:1215
msgid "use instances of :class:`auto` for the value"
msgstr "使用 :class:`auto` 的实例作为值"

#: ../../howto/enum.rst:1216
msgid "use instances of :class:`object` as the value"
msgstr "使用 :class:`object` 的实例作为值"

#: ../../howto/enum.rst:1217
msgid "use a descriptive string as the value"
msgstr "使用描述性的字符串作为值"

#: ../../howto/enum.rst:1218
msgid ""
"use a tuple as the value and a custom :meth:`__new__` to replace the tuple "
"with an :class:`int` value"
msgstr "使用元组作为值并用自定义的 :meth:`__new__` 以一个 :class:`int` 值来替代该元组"

#: ../../howto/enum.rst:1221
msgid ""
"Using any of these methods signifies to the user that these values are not "
"important, and also enables one to add, remove, or reorder members without "
"having to renumber the remaining members."
msgstr "使用以上任何一种方法均可向用户指明值并不重要，并且使人能够添加、移除或重排序成员而不必改变其余成员的数值。"

#: ../../howto/enum.rst:1227
msgid "Using :class:`auto`"
msgstr "使用 :class:`auto`"

#: ../../howto/enum.rst:1229
msgid "Using :class:`auto` would look like::"
msgstr "使用 :class:`auto` 的形式如下::"

#: ../../howto/enum.rst:1241
msgid "Using :class:`object`"
msgstr "使用 :class:`object`"

#: ../../howto/enum.rst:1243
msgid "Using :class:`object` would look like::"
msgstr "使用 :class:`object` 的形式如下::"

#: ../../howto/enum.rst:1253
msgid ""
"This is also a good example of why you might want to write your own "
":meth:`__repr__`::"
msgstr "这也是一个可以说明为什么你会需要编写自己的 :meth:`__repr__` 的好例子::"

#: ../../howto/enum.rst:1269
msgid "Using a descriptive string"
msgstr "使用描述性字符串"

#: ../../howto/enum.rst:1271
msgid "Using a string as the value would look like::"
msgstr "使用字符串作为值的形式如下::"

#: ../../howto/enum.rst:1283
msgid "Using a custom :meth:`__new__`"
msgstr "使用自定义的 :meth:`__new__`"

#: ../../howto/enum.rst:1285
msgid "Using an auto-numbering :meth:`__new__` would look like::"
msgstr "使用自动编号 :meth:`__new__` 的形式如下::"

#: ../../howto/enum.rst:1302
msgid ""
"To make a more general purpose ``AutoNumber``, add ``*args`` to the "
"signature::"
msgstr "要实现更通用的 ``AutoNumber``，请添加 ``*args`` 到签名中::"

#: ../../howto/enum.rst:1312
msgid ""
"Then when you inherit from ``AutoNumber`` you can write your own "
"``__init__`` to handle any extra arguments::"
msgstr "这样当你从 ``AutoNumber`` 继承时你将可以编写你自己的 ``__init__`` 来处理任何附加参数::"

#: ../../howto/enum.rst:1331
msgid ""
"The :meth:`__new__` method, if defined, is used during creation of the Enum "
"members; it is then replaced by Enum's :meth:`__new__` which is used after "
"class creation for lookup of existing members."
msgstr ""
"如果定义了 :meth:`__new__` 则它会在创建 Enum 成员期间被使用；随后它将被 Enum 的 :meth:`__new__` "
"所替换，该方法会在类创建后被用来查找现有成员。"

#: ../../howto/enum.rst:1337
msgid ""
"*Do not* call ``super().__new__()``, as the lookup-only ``__new__`` is the "
"one that is found; instead, use the data type directly -- e.g.::"
msgstr ""
"*不要* 调用 ``super().__new__()``，因为只能找到仅用于查找的 ``__new__``；请改为直接使用该数据类型 -- 例如::"

#: ../../howto/enum.rst:1344
msgid "OrderedEnum"
msgstr "OrderedEnum"

#: ../../howto/enum.rst:1346
msgid ""
"An ordered enumeration that is not based on :class:`IntEnum` and so "
"maintains the normal :class:`Enum` invariants (such as not being comparable "
"to other enumerations)::"
msgstr ""
"一个有序枚举，它不是基于 :class:`IntEnum`，因此保持了正常的 :class:`Enum` 不变特性（例如不可与其他枚举进行比较）::"

#: ../../howto/enum.rst:1380
msgid "DuplicateFreeEnum"
msgstr "DuplicateFreeEnum"

#: ../../howto/enum.rst:1382
msgid ""
"Raises an error if a duplicate member value is found instead of creating an "
"alias::"
msgstr "如果发现重复的成员名称则会引发一个错误而不是创建一个别名::"

#: ../../howto/enum.rst:1407
msgid ""
"This is a useful example for subclassing Enum to add or change other "
"behaviors as well as disallowing aliases.  If the only desired change is "
"disallowing aliases, the :func:`unique` decorator can be used instead."
msgstr ""
"这个例子适用于子类化 Enum 来添加或改变禁用别名以及其他行为。 如果需要的改变只是禁用别名，也可以选择使用 :func:`unique` 装饰器。"

#: ../../howto/enum.rst:1413
msgid "Planet"
msgstr "Planet"

#: ../../howto/enum.rst:1415
msgid ""
"If :meth:`__new__` or :meth:`__init__` is defined, the value of the enum "
"member will be passed to those methods::"
msgstr "如果定义了 :meth:`__new__` 或 :meth:`__init__`，则枚举成员的值将被传给这些方法::"

#: ../../howto/enum.rst:1444
msgid "TimePeriod"
msgstr "TimePeriod"

#: ../../howto/enum.rst:1446
msgid "An example to show the :attr:`_ignore_` attribute in use::"
msgstr "一个演示如何使用 :attr:`_ignore_` 属性的例子::"

#: ../../howto/enum.rst:1465
msgid "Subclassing EnumType"
msgstr "子类化 EnumType"

#: ../../howto/enum.rst:1467
msgid ""
"While most enum needs can be met by customizing :class:`Enum` subclasses, "
"either with class decorators or custom functions, :class:`EnumType` can be "
"subclassed to provide a different Enum experience."
msgstr ""
"虽然大多数枚举需求可以通过自定义 :class:`Enum` 子类来满足，无论是用类装饰器还是自定义函数，:class:`EnumType` "
"可以被子类化以提供不同的枚举体验。"
