# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.rst:2
msgid ":mod:`email` --- An email and MIME handling package"
msgstr ":mod:`email` --- 电子邮件与 MIME 处理包"

#: ../../library/email.rst:11
msgid "**Source code:** :source:`Lib/email/__init__.py`"
msgstr "**源代码:** :source:`Lib/email/__init__.py`"

#: ../../library/email.rst:15
msgid ""
"The :mod:`email` package is a library for managing email messages.  It is "
"specifically *not* designed to do any sending of email messages to SMTP "
"(:rfc:`2821`), NNTP, or other servers; those are functions of modules such "
"as :mod:`smtplib` and :mod:`nntplib`.  The :mod:`email` package attempts to "
"be as RFC-compliant as possible, supporting :rfc:`5322` and :rfc:`6532`, as "
"well as such MIME-related RFCs as :rfc:`2045`, :rfc:`2046`, :rfc:`2047`, "
":rfc:`2183`, and :rfc:`2231`."
msgstr ""
":mod:`email` 包是一个用于管理电子邮件消息的库。 它 *并非* 被设计为执行向 SMTP (:rfc:`2821`), NNTP "
"或其他服务器发送电子邮件消息的操作；这些是 :mod:`smtplib` 和 :mod:`nntplib` 等模块的功能。 :mod:`email` "
"包试图尽可能地遵循 RFC，支持 :rfc:`5322` 和 :rfc:`6532`，以及与 MIME 相关的各个 RFC 例如 "
":rfc:`2045`, :rfc:`2046`, :rfc:`2047`, :rfc:`2183` 和 :rfc:`2231`。"

#: ../../library/email.rst:23
msgid ""
"The overall structure of the email package can be divided into three major "
"components, plus a fourth component that controls the behavior of the other "
"components."
msgstr "email 包的总体结构可以分为三个主要组件，另外还有第四个组件用于控制其他组件的行为。"

#: ../../library/email.rst:27
msgid ""
"The central component of the package is an \"object model\" that represents "
"email messages.  An application interacts with the package primarily through"
" the object model interface defined in the :mod:`~email.message` sub-module."
"  The application can use this API to ask questions about an existing email,"
" to construct a new email, or to add or remove email subcomponents that "
"themselves use the same object model interface.  That is, following the "
"nature of email messages and their MIME subcomponents, the email object "
"model is a tree structure of objects that all provide the "
":class:`~email.message.EmailMessage` API."
msgstr ""
"这个包的中心组件是代表电子邮件消息的“对象模型”。 应用程序主要通过在 :mod:`~email.message` "
"子模块中定义的对象模型接口与这个包进行交互。 应用程序可以使用此 API "
"来询问有关现有电子邮件的问题、构造新的电子邮件，或者添加或移除自身也使用相同对象模型接口的电子邮件子组件。 也就是说，遵循电子邮件消息及其 MIME "
"子组件的性质，电子邮件对象模型是所有提供 :class:`~email.message.EmailMessage` API 的对象所构成的树状结构。"

#: ../../library/email.rst:37
msgid ""
"The other two major components of the package are the :mod:`~email.parser` "
"and the :mod:`~email.generator`.  The parser takes the serialized version of"
" an email message (a stream of bytes) and converts it into a tree of "
":class:`~email.message.EmailMessage` objects.  The generator takes an "
":class:`~email.message.EmailMessage` and turns it back into a serialized "
"byte stream.  (The parser and generator also handle streams of text "
"characters, but this usage is discouraged as it is too easy to end up with "
"messages that are not valid in one way or another.)"
msgstr ""
"这个包的另外两个主要组件是 :mod:`~email.parser` 和 :mod:`~email.generator`。 parser "
"接受电子邮件消息的序列化版本（字节流）并将其转换为 :class:`~email.message.EmailMessage` 对象树。 "
"generator 接受  :class:`~email.message.EmailMessage` 并将其转回序列化的字节流。 (parser 和 "
"generator 还能处理文本字符流，但不建议这种用法，因为这很容易导致某种形式的无效消息。"

#: ../../library/email.rst:46
msgid ""
"The control component is the :mod:`~email.policy` module.  Every "
":class:`~email.message.EmailMessage`, every :mod:`~email.generator`, and "
"every :mod:`~email.parser` has an associated :mod:`~email.policy` object "
"that controls its behavior.  Usually an application only needs to specify "
"the policy when an :class:`~email.message.EmailMessage` is created, either "
"by directly instantiating an :class:`~email.message.EmailMessage`  to create"
" a new email, or by parsing an input stream using a :mod:`~email.parser`.  "
"But the policy can be changed when the message is serialized using a "
":mod:`~email.generator`. This allows, for example, a generic email message "
"to be parsed from disk, but to serialize it using standard SMTP settings "
"when sending it to an email server."
msgstr ""
"控制组件是 :mod:`~email.policy` 模块。 每一个 :class:`~email.message.EmailMessage`、每一个 "
":mod:`~email.generator` 和每一个 :mod:`~email.parser` 都有一个相关联的 "
":mod:`~email.policy` 对象来控制其行为。 通常应用程序只有在 "
":class:`~email.message.EmailMessage` 被创建时才需要指明控制策略，或者通过直接实例代 "
":class:`~email.message.EmailMessage`  来新建电子邮件，或者通过使用 :mod:`~email.parser` "
"来解析输入流。 但是策略也可以在使用 :mod:`~email.generator` 序列化消息时被更改。 "
"例如，这允许从磁盘解析通用电子邮件消息，而在将消息发送到电子邮件服务器时使用标准 SMTP 设置对其进行序列化。"

#: ../../library/email.rst:58
msgid ""
"The email package does its best to hide the details of the various governing"
" RFCs from the application.  Conceptually the application should be able to "
"treat the email message as a structured tree of unicode text and binary "
"attachments, without having to worry about how these are represented when "
"serialized.  In practice, however, it is often necessary to be aware of at "
"least some of the rules governing MIME messages and their structure, "
"specifically the names and nature of the MIME \"content types\" and how they"
" identify multipart documents.  For the most part this knowledge should only"
" be required for more complex applications, and even then it should only be "
"the high level structure in question, and not the details of how those "
"structures are represented.  Since MIME content types are used widely in "
"modern internet software (not just email), this will be a familiar concept "
"to many programmers."
msgstr ""
"email 包会尽量地对应用程序隐藏各种控制类 RFC 的细节。 从概念上讲应用程序应当能够将电子邮件消息视为 Unicode "
"文本和二进制附件的结构化树，而不必担心在序列化时要如何表示它们。 但在实际中，经常有必要至少了解一部分控制类 MIME 消息及其结构的规划，特别是 "
"MIME \"内容类型\" 的名称和性质以及它们是如何标识多部分文档的。 "
"在大多数情况下这些知识应当仅对于更复杂的应用程序来说才是必需的，并且即便在那时它也应当仅是特定的高层级结构，而不是如何表示这些结构的细节信息。 由于 "
"MIME 内容类型被广泛应用于现代因特网软件（而非只是电子邮件），因此这对许多程序员来说将是很熟悉的概念。"

#: ../../library/email.rst:71
msgid ""
"The following sections describe the functionality of the :mod:`email` "
"package. We start with the :mod:`~email.message` object model, which is the "
"primary interface an application will use, and follow that with the "
":mod:`~email.parser` and :mod:`~email.generator` components.  Then we cover "
"the :mod:`~email.policy` controls, which completes the treatment of the main"
" components of the library."
msgstr ""
"以下小节描述了 :mod:`email` 包的具体功能。 我们会从 :mod:`~email.message` "
"对象模型开始，它是应用程序将要使用的主要接口，之后是 :mod:`~email.parser` 和 :mod:`~email.generator` "
"组件。 然后我们会介绍 :mod:`~email.policy` 控制组件，它将完成对这个库的主要组件的处理。"

#: ../../library/email.rst:78
msgid ""
"The next three sections cover the exceptions the package may raise and the "
"defects (non-compliance with the RFCs) that the :mod:`~email.parser` may "
"detect.  Then we cover the :mod:`~email.headerregistry` and the "
":mod:`~email.contentmanager` sub-components, which provide tools for doing "
"more detailed manipulation of headers and payloads, respectively.  Both of "
"these components contain features relevant to consuming and producing non-"
"trivial messages, but also document their extensibility APIs, which will be "
"of interest to advanced applications."
msgstr ""
"接下来的三个小节会介绍这个包可能引发的异常以及 :mod:`~email.parser` 可能检测到的缺陷（即与 RFC 不相符）。 然后我们会介绍 "
":mod:`~email.headerregistry` 和 :mod:`~email.contentmanager` "
"子组件，它们分别提供了用于更精细地操纵标题和载荷的工具。 这两个组件除了包含使用与生成非简单消息的相关特性，还记录了它们的可扩展性 "
"API，这将是高级应用程序所感兴趣的内容。"

#: ../../library/email.rst:87
msgid ""
"Following those is a set of examples of using the fundamental parts of the "
"APIs covered in the preceding sections."
msgstr "在此之后是一组使用之前小节所介绍的 API 的基本部分的示例。"

#: ../../library/email.rst:90
msgid ""
"The foregoing represent the modern (unicode friendly) API of the email "
"package. The remaining sections, starting with the "
":class:`~email.message.Message` class, cover the legacy "
":data:`~email.policy.compat32` API that deals much more directly with the "
"details of how email messages are represented.  The "
":data:`~email.policy.compat32` API does *not* hide the details of the RFCs "
"from the application, but for applications that need to operate at that "
"level, they can be useful tools.  This documentation is also relevant for "
"applications that are still using the :mod:`~email.policy.compat32` API for "
"backward compatibility reasons."
msgstr ""
"前面的内容是 email 包的现代（对 Unicode 支持良好）API。 从 :class:`~email.message.Message` "
"类开始的其余小节则介绍了旧式  :data:`~email.policy.compat32` API，它会更直接地处理如何表示电子邮件消息的细节。 "
":data:`~email.policy.compat32` API *不会* 向应用程序隐藏 RFC "
"的相关细节，但对于需要进行此种层级操作的应用程序来说将是很有用的工具。 此文档对于因向下兼容理由而仍然使用 "
":mod:`~email.policy.compat32` API 的应用程序也是很适合的。"

#: ../../library/email.rst:100
msgid ""
"Docs reorganized and rewritten to promote the new "
":class:`~email.message.EmailMessage`/:class:`~email.policy.EmailPolicy` API."
msgstr ""
"文档经过重新组织和撰写以鼓励使用新的 "
":class:`~email.message.EmailMessage`/:class:`~email.policy.EmailPolicy` API。"

#: ../../library/email.rst:105
msgid "Contents of the :mod:`email` package documentation:"
msgstr ":mod:`email` 包文档的内容:"

#: ../../library/email.rst:120
msgid "Legacy API:"
msgstr "旧式 API:"

#: ../../library/email.rst:136
msgid "Module :mod:`smtplib`"
msgstr ":mod:`smtplib` 模块"

#: ../../library/email.rst:136
msgid "SMTP (Simple Mail Transport Protocol) client"
msgstr "SMTP (简单邮件传输协议) 客户端"

#: ../../library/email.rst:139
msgid "Module :mod:`poplib`"
msgstr ":mod:`poplib` 模块"

#: ../../library/email.rst:139
msgid "POP (Post Office Protocol) client"
msgstr "POP (邮局协议) 客户端"

#: ../../library/email.rst:142
msgid "Module :mod:`imaplib`"
msgstr ":mod:`imaplib` 模块"

#: ../../library/email.rst:142
msgid "IMAP (Internet Message Access Protocol) client"
msgstr "IMAP (互联网消息访问协议) 客户端"

#: ../../library/email.rst:145
msgid "Module :mod:`nntplib`"
msgstr ":mod:`nntplib` 模块"

#: ../../library/email.rst:145
msgid "NNTP (Net News Transport Protocol) client"
msgstr "NNTP (网络新闻传输协议) 客户端"

#: ../../library/email.rst:149
msgid "Module :mod:`mailbox`"
msgstr ":mod:`mailbox` 模块"

#: ../../library/email.rst:148
msgid ""
"Tools for creating, reading, and managing collections of messages on disk "
"using a variety standard formats."
msgstr "创建、读取和管理使用保存在磁盘中的多种标准格式的消息集的工具。"

#: ../../library/email.rst:151
msgid "Module :mod:`smtpd`"
msgstr ":mod:`smtpd` 模块"

#: ../../library/email.rst:152
msgid "SMTP server framework (primarily useful for testing)"
msgstr "SMTP 服务器框架 (主要适用于测试)"
