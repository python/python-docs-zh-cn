# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:18+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/traceback.rst:2
msgid ":mod:`traceback` --- Print or retrieve a stack traceback"
msgstr ""

#: ../../library/traceback.rst:7
msgid "**Source code:** :source:`Lib/traceback.py`"
msgstr ""

#: ../../library/traceback.rst:11
msgid ""
"This module provides a standard interface to extract, format and print stack"
" traces of Python programs.  It exactly mimics the behavior of the Python "
"interpreter when it prints a stack trace.  This is useful when you want to "
"print stack traces under program control, such as in a \"wrapper\" around "
"the interpreter."
msgstr ""

#: ../../library/traceback.rst:19
msgid ""
"The module uses traceback objects --- this is the object type that is stored"
" in the :data:`sys.last_traceback` variable and returned as the third item "
"from :func:`sys.exc_info`."
msgstr ""

#: ../../library/traceback.rst:23
msgid "The module defines the following functions:"
msgstr ""

#: ../../library/traceback.rst:28
msgid ""
"Print up to *limit* stack trace entries from traceback object *tb* (starting"
" from the caller's frame) if *limit* is positive.  Otherwise, print the last"
" ``abs(limit)`` entries.  If *limit* is omitted or ``None``, all entries are"
" printed.  If *file* is omitted or ``None``, the output goes to "
"``sys.stderr``; otherwise it should be an open file or file-like object to "
"receive the output."
msgstr ""

#: ../../library/traceback.rst:35 ../../library/traceback.rst:89
msgid "Added negative *limit* support."
msgstr ""

#: ../../library/traceback.rst:41
msgid ""
"Print exception information and stack trace entries from traceback object "
"*tb* to *file*. This differs from :func:`print_tb` in the following ways:"
msgstr ""

#: ../../library/traceback.rst:45
msgid ""
"if *tb* is not ``None``, it prints a header ``Traceback (most recent call "
"last):``"
msgstr ""

#: ../../library/traceback.rst:48
msgid "it prints the exception *etype* and *value* after the stack trace"
msgstr ""

#: ../../library/traceback.rst:52
msgid ""
"if *type(value)* is :exc:`SyntaxError` and *value* has the appropriate "
"format, it prints the line where the syntax error occurred with a caret "
"indicating the approximate position of the error."
msgstr ""

#: ../../library/traceback.rst:56
msgid ""
"The optional *limit* argument has the same meaning as for :func:`print_tb`. "
"If *chain* is true (the default), then chained exceptions (the "
":attr:`__cause__` or :attr:`__context__` attributes of the exception) will "
"be printed as well, like the interpreter itself does when printing an "
"unhandled exception."
msgstr ""

#: ../../library/traceback.rst:62 ../../library/traceback.rst:143
msgid "The *etype* argument is ignored and inferred from the type of *value*."
msgstr ""

#: ../../library/traceback.rst:68
msgid ""
"This is a shorthand for ``print_exception(*sys.exc_info(), limit, file, "
"chain)``."
msgstr ""

#: ../../library/traceback.rst:74
msgid ""
"This is a shorthand for ``print_exception(sys.last_type, sys.last_value, "
"sys.last_traceback, limit, file, chain)``.  In general it will work only "
"after an exception has reached an interactive prompt (see "
":data:`sys.last_type`)."
msgstr ""

#: ../../library/traceback.rst:82
msgid ""
"Print up to *limit* stack trace entries (starting from the invocation point)"
" if *limit* is positive.  Otherwise, print the last ``abs(limit)`` entries."
"  If *limit* is omitted or ``None``, all entries are printed. The optional "
"*f* argument can be used to specify an alternate stack frame to start.  The "
"optional *file* argument has the same meaning as for :func:`print_tb`."
msgstr ""

#: ../../library/traceback.rst:95
msgid ""
"Return a :class:`StackSummary` object representing a list of \"pre-"
"processed\" stack trace entries extracted from the traceback object *tb*.  "
"It is useful for alternate formatting of stack traces.  The optional *limit*"
" argument has the same meaning as for :func:`print_tb`.  A \"pre-processed\""
" stack trace entry is a :class:`FrameSummary` object containing attributes "
":attr:`~FrameSummary.filename`, :attr:`~FrameSummary.lineno`, "
":attr:`~FrameSummary.name`, and :attr:`~FrameSummary.line` representing the "
"information that is usually printed for a stack trace.  The "
":attr:`~FrameSummary.line` is a string with leading and trailing whitespace "
"stripped; if the source is not available it is ``None``."
msgstr ""

#: ../../library/traceback.rst:109
msgid ""
"Extract the raw traceback from the current stack frame.  The return value "
"has the same format as for :func:`extract_tb`.  The optional *f* and *limit*"
" arguments have the same meaning as for :func:`print_stack`."
msgstr ""

#: ../../library/traceback.rst:116
msgid ""
"Given a list of tuples or :class:`FrameSummary` objects as returned by "
":func:`extract_tb` or :func:`extract_stack`, return a list of strings ready "
"for printing.  Each string in the resulting list corresponds to the item "
"with the same index in the argument list.  Each string ends in a newline; "
"the strings may contain internal newlines as well, for those items whose "
"source text line is not ``None``."
msgstr ""

#: ../../library/traceback.rst:126
msgid ""
"Format the exception part of a traceback.  The arguments are the exception "
"type and value such as given by ``sys.last_type`` and ``sys.last_value``. "
"The return value is a list of strings, each ending in a newline.  Normally, "
"the list contains a single string; however, for :exc:`SyntaxError` "
"exceptions, it contains several lines that (when printed) display detailed "
"information about where the syntax error occurred.  The message indicating "
"which exception occurred is the always last string in the list."
msgstr ""

#: ../../library/traceback.rst:137
msgid ""
"Format a stack trace and the exception information.  The arguments  have the"
" same meaning as the corresponding arguments to :func:`print_exception`.  "
"The return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""

#: ../../library/traceback.rst:149
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr ""

#: ../../library/traceback.rst:155
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr ""

#: ../../library/traceback.rst:160
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr ""

#: ../../library/traceback.rst:164
msgid ""
"Clears the local variables of all the stack frames in a traceback *tb* by "
"calling the :meth:`clear` method of each frame object."
msgstr ""

#: ../../library/traceback.rst:171
msgid ""
"Walk a stack following ``f.f_back`` from the given frame, yielding the frame"
" and line number for each frame. If *f* is ``None``, the current stack is "
"used. This helper is used with :meth:`StackSummary.extract`."
msgstr ""

#: ../../library/traceback.rst:179
msgid ""
"Walk a traceback following ``tb_next`` yielding the frame and line number "
"for each frame. This helper is used with :meth:`StackSummary.extract`."
msgstr ""

#: ../../library/traceback.rst:184
msgid "The module also defines the following classes:"
msgstr ""

#: ../../library/traceback.rst:187
msgid ":class:`TracebackException` Objects"
msgstr ""

#: ../../library/traceback.rst:191
msgid ""
":class:`TracebackException` objects are created from actual exceptions to "
"capture data for later printing in a lightweight fashion."
msgstr ""

#: ../../library/traceback.rst:196 ../../library/traceback.rst:243
msgid ""
"Capture an exception for later rendering. *limit*, *lookup_lines* and "
"*capture_locals* are as for the :class:`StackSummary` class."
msgstr ""

#: ../../library/traceback.rst:199 ../../library/traceback.rst:246
msgid ""
"Note that when locals are captured, they are also shown in the traceback."
msgstr ""

#: ../../library/traceback.rst:203
msgid "A :class:`TracebackException` of the original ``__cause__``."
msgstr ""

#: ../../library/traceback.rst:207
msgid "A :class:`TracebackException` of the original ``__context__``."
msgstr ""

#: ../../library/traceback.rst:211
msgid "The ``__suppress_context__`` value from the original exception."
msgstr ""

#: ../../library/traceback.rst:215
msgid "A :class:`StackSummary` representing the traceback."
msgstr ""

#: ../../library/traceback.rst:219
msgid "The class of the original traceback."
msgstr ""

#: ../../library/traceback.rst:223
msgid "For syntax errors - the file name where the error occurred."
msgstr ""

#: ../../library/traceback.rst:227
msgid "For syntax errors - the line number where the error occurred."
msgstr ""

#: ../../library/traceback.rst:231
msgid "For syntax errors - the text where the error occurred."
msgstr ""

#: ../../library/traceback.rst:235
msgid "For syntax errors - the offset into the text where the error occurred."
msgstr ""

#: ../../library/traceback.rst:239
msgid "For syntax errors - the compiler error message."
msgstr ""

#: ../../library/traceback.rst:250
msgid "Format the exception."
msgstr ""

#: ../../library/traceback.rst:252
msgid ""
"If *chain* is not ``True``, ``__cause__`` and ``__context__`` will not be "
"formatted."
msgstr ""

#: ../../library/traceback.rst:255
msgid ""
"The return value is a generator of strings, each ending in a newline and "
"some containing internal newlines. :func:`~traceback.print_exception` is a "
"wrapper around this method which just prints the lines to a file."
msgstr ""

#: ../../library/traceback.rst:259 ../../library/traceback.rst:273
msgid ""
"The message indicating which exception occurred is always the last string in"
" the output."
msgstr ""

#: ../../library/traceback.rst:264
msgid "Format the exception part of the traceback."
msgstr ""

#: ../../library/traceback.rst:266
msgid "The return value is a generator of strings, each ending in a newline."
msgstr ""

#: ../../library/traceback.rst:268
msgid ""
"Normally, the generator emits a single string; however, for "
":exc:`SyntaxError` exceptions, it emits several lines that (when printed) "
"display detailed information about where the syntax error occurred."
msgstr ""

#: ../../library/traceback.rst:278
msgid ":class:`StackSummary` Objects"
msgstr ""

#: ../../library/traceback.rst:282
msgid ""
":class:`StackSummary` objects represent a call stack ready for formatting."
msgstr ""

#: ../../library/traceback.rst:288
msgid ""
"Construct a :class:`StackSummary` object from a frame generator (such as is "
"returned by :func:`~traceback.walk_stack` or :func:`~traceback.walk_tb`)."
msgstr ""

#: ../../library/traceback.rst:292
msgid ""
"If *limit* is supplied, only this many frames are taken from *frame_gen*. If"
" *lookup_lines* is ``False``, the returned :class:`FrameSummary` objects "
"will not have read their lines in yet, making the cost of creating the "
":class:`StackSummary` cheaper (which may be valuable if it may not actually "
"get formatted). If *capture_locals* is ``True`` the local variables in each "
":class:`FrameSummary` are captured as object representations."
msgstr ""

#: ../../library/traceback.rst:302
msgid ""
"Construct a :class:`StackSummary` object from a supplied list of "
":class:`FrameSummary` objects or old-style list of tuples.  Each tuple "
"should be a 4-tuple with filename, lineno, name, line as the elements."
msgstr ""

#: ../../library/traceback.rst:308
msgid ""
"Returns a list of strings ready for printing.  Each string in the resulting "
"list corresponds to a single frame from the stack. Each string ends in a "
"newline; the strings may contain internal newlines as well, for those items "
"with source text lines."
msgstr ""

#: ../../library/traceback.rst:313
msgid ""
"For long sequences of the same frame and line, the first few repetitions are"
" shown, followed by a summary line stating the exact number of further "
"repetitions."
msgstr ""

#: ../../library/traceback.rst:317
msgid "Long sequences of repeated frames are now abbreviated."
msgstr ""

#: ../../library/traceback.rst:322
msgid ":class:`FrameSummary` Objects"
msgstr ""

#: ../../library/traceback.rst:326
msgid ":class:`FrameSummary` objects represent a single frame in a traceback."
msgstr ""

#: ../../library/traceback.rst:330
msgid ""
"Represent a single frame in the traceback or stack that is being formatted "
"or printed. It may optionally have a stringified version of the frames "
"locals included in it. If *lookup_line* is ``False``, the source code is not"
" looked up until the :class:`FrameSummary` has the "
":attr:`~FrameSummary.line` attribute accessed (which also happens when "
"casting it to a tuple). :attr:`~FrameSummary.line` may be directly provided,"
" and will prevent line lookups happening at all. *locals* is an optional "
"local variable dictionary, and if supplied the variable representations are "
"stored in the summary for later display."
msgstr ""

#: ../../library/traceback.rst:343
msgid "Traceback Examples"
msgstr ""

#: ../../library/traceback.rst:345
msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but"
" less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the "
":mod:`code` module. ::"
msgstr ""

#: ../../library/traceback.rst:367
msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback:"
msgstr ""

#: ../../library/traceback.rst:406
msgid "The output for the example would look similar to this:"
msgstr ""

#: ../../library/traceback.rst:448
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr ""

#: ../../library/traceback.rst:474
msgid "This last example demonstrates the final few formatting functions:"
msgstr ""
