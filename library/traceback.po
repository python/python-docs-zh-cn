# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/traceback.rst:2
msgid ":mod:`!traceback` --- Print or retrieve a stack traceback"
msgstr ":mod:`!traceback` --- 打印或读取栈回溯信息"

#: ../../library/traceback.rst:7
msgid "**Source code:** :source:`Lib/traceback.py`"
msgstr "**源代码：** :source:`Lib/traceback.py`"

#: ../../library/traceback.rst:11
msgid ""
"This module provides a standard interface to extract, format and print stack"
" traces of Python programs. It is more flexible than the interpreter's "
"default traceback display, and therefore makes it possible to configure "
"certain aspects of the output. Finally, it contains a utility for capturing "
"enough information about an exception to print it later, without the need to"
" save a reference to the actual exception. Since exceptions can be the roots"
" of large objects graph, this utility can significantly improve memory "
"management."
msgstr ""
"本模块提供了提取、格式化和打印 Python 程序的栈回溯信息的标准接口。 它比解释器默认的回溯显示更灵活，因而使得配置输出的特定部分成为可能。 "
"最后，它还包含用于捕获有关异常的足够信息以供稍后打印的工具，而无需保存对实际异常的引用。 "
"由于异常可作为大型对象图的根对象，此工具能够显著地提升内存管理效率。"

#: ../../library/traceback.rst:23
msgid ""
"The module uses :ref:`traceback objects <traceback-objects>` --- these are "
"objects of type :class:`types.TracebackType`, which are assigned to the "
":attr:`~BaseException.__traceback__` field of :class:`BaseException` "
"instances."
msgstr ""
"本模块使用 :ref:`回溯对象 <traceback-objects>` --- 它们是类型为 "
":class:`types.TracebackType` 的对象，它们将被赋值给 :class:`BaseException` 实例的 "
":attr:`~BaseException.__traceback__` 字段。"

#: ../../library/traceback.rst:30
msgid "Module :mod:`faulthandler`"
msgstr "模块 :mod:`faulthandler`"

#: ../../library/traceback.rst:31
msgid ""
"Used to dump Python tracebacks explicitly, on a fault, after a timeout, or "
"on a user signal."
msgstr "用于在发生错误、超时或用户信号时显式地转储 Python 回溯信息。"

#: ../../library/traceback.rst:33
msgid "Module :mod:`pdb`"
msgstr "模块 :mod:`pdb`"

#: ../../library/traceback.rst:34
msgid "Interactive source code debugger for Python programs."
msgstr "用于 Python 程序的交互式源代码调试器。"

#: ../../library/traceback.rst:36
msgid "The module's API can be divided into two parts:"
msgstr "本模块的 API 可分为两部分："

#: ../../library/traceback.rst:38
msgid ""
"Module-level functions offering basic functionality, which are useful for "
"interactive inspection of exceptions and tracebacks."
msgstr "提供基本功能的模块级函数，对于异常和回溯的交互式检查来说很有用处。"

#: ../../library/traceback.rst:41
msgid ""
":class:`TracebackException` class and its helper classes "
":class:`StackSummary` and :class:`FrameSummary`. These offer both more "
"flexibility in the output generated and the ability to store the information"
" necessary for later formatting without holding references to actual "
"exception and traceback objects."
msgstr ""
":class:`TracebackException` 类及其辅助类 :class:`StackSummary` 和 "
":class:`FrameSummary`。 这些类提供了生成输出的更大灵活性和存储稍后进行格式化所需信息的能力而无需持有对实际异常和回溯对象的引用。"

#: ../../library/traceback.rst:47
msgid ""
"Output is colorized by default and can be :ref:`controlled using environment"
" variables <using-on-controlling-color>`."
msgstr "输出在默认情况下是彩色的并且可以 :ref:`使用环境变量控制 <using-on-controlling-color>`。"

#: ../../library/traceback.rst:53
msgid "Module-Level Functions"
msgstr "模块级函数"

#: ../../library/traceback.rst:57
msgid ""
"Print up to *limit* stack trace entries from :ref:`traceback object "
"<traceback-objects>` *tb* (starting from the caller's frame) if *limit* is "
"positive.  Otherwise, print the last ``abs(limit)`` entries.  If *limit* is "
"omitted or ``None``, all entries are printed.  If *file* is omitted or "
"``None``, the output goes to :data:`sys.stderr`; otherwise it should be an "
"open :term:`file <file object>` or :term:`file-like object` to receive the "
"output."
msgstr ""
"如果 *limit* 为正值则打印来自 :ref:`回溯对象 <traceback-objects>` *tb* 的至多 *limit* "
"个栈回溯条目（从调用方的帧开始）。 否则，打印最后 ``abs(limit)`` 个条目。 如果 *limit* 被省略或为 "
"``None``，则打印所有条目。 如果 *file* 被省略或为 ``None``，则会输出到 "
":data:`sys.stderr`；在其他情况下它应当是一个打开的 :term:`文件 <file object>` 或 :term:`file-"
"like object` 用来接受输出。"

#: ../../library/traceback.rst:68
msgid ""
"The meaning of the *limit* parameter is different than the meaning of "
":const:`sys.tracebacklimit`. A negative *limit* value corresponds to a "
"positive value of :const:`!sys.tracebacklimit`, whereas the behaviour of a "
"positive *limit* value cannot be achieved with :const:`!sys.tracebacklimit`."
msgstr ""
"*limit* 形参的含义不同于 :const:`sys.tracebacklimit` 的含义。 负的 *limit* 值对应于正的 "
":const:`!sys.tracebacklimit` 值，而正的 *limit* 值的行为无法用 "
":const:`!sys.tracebacklimit` 来达成。"

#: ../../library/traceback.rst:74 ../../library/traceback.rst:139
msgid "Added negative *limit* support."
msgstr "添加了对负数值 *limit* 的支持"

#: ../../library/traceback.rst:81
msgid ""
"Print exception information and stack trace entries from :ref:`traceback "
"object <traceback-objects>` *tb* to *file*. This differs from "
":func:`print_tb` in the following ways:"
msgstr ""
"将来自 :ref:`回溯对象 <traceback-objects>` *tb* 的异常信息与栈跟踪条目打印到 *file*。 这与 "
":func:`print_tb` 相比有以下几方面的区别："

#: ../../library/traceback.rst:86
msgid ""
"if *tb* is not ``None``, it prints a header ``Traceback (most recent call "
"last):``"
msgstr "如果 *tb* 不为 ``None``，它将打印头部 ``Traceback (most recent call last):``"

#: ../../library/traceback.rst:89
msgid "it prints the exception type and *value* after the stack trace"
msgstr "它将在栈回溯之后打印异常类型和 *value*"

#: ../../library/traceback.rst:93
msgid ""
"if *type(value)* is :exc:`SyntaxError` and *value* has the appropriate "
"format, it prints the line where the syntax error occurred with a caret "
"indicating the approximate position of the error."
msgstr ""
"如果 *type(value)* 为 :exc:`SyntaxError` 且 *value* "
"具有适当的格式，它会打印发生语法错误的行并用一个圆点来指明错误的大致位置。"

#: ../../library/traceback.rst:97
msgid ""
"Since Python 3.10, instead of passing *value* and *tb*, an exception object "
"can be passed as the first argument. If *value* and *tb* are provided, the "
"first argument is ignored in order to provide backwards compatibility."
msgstr ""
"从 Python 3.10 开始，可以不再传递 *value* 和 *tb*，而是传递一个异常对象作为第一个参数。 如果提供了 *value* 和 "
"*tb*，则第一个参数会被忽略以便提供向下兼容性。"

#: ../../library/traceback.rst:101
msgid ""
"The optional *limit* argument has the same meaning as for :func:`print_tb`. "
"If *chain* is true (the default), then chained exceptions (the "
":attr:`~BaseException.__cause__` or :attr:`~BaseException.__context__` "
"attributes of the exception) will be printed as well, like the interpreter "
"itself does when printing an unhandled exception."
msgstr ""
"可选的 *limit* 参数的含义与 :func:`print_tb` 的相同。 如果 *chain* 为真值（默认），则链式异常（异常的 "
":attr:`~BaseException.__cause__` 或 :attr:`~BaseException.__context__` "
"属性）也将被打印出来，就像解释器本身在打印未处理的异常时一样。"

#: ../../library/traceback.rst:108 ../../library/traceback.rst:219
msgid "The *etype* argument is ignored and inferred from the type of *value*."
msgstr "*etype* 参数会被忽略并根据 *value* 推断出来。"

#: ../../library/traceback.rst:111 ../../library/traceback.rst:199
msgid ""
"The *etype* parameter has been renamed to *exc* and is now positional-only."
msgstr "*etype* 形参已被重命名为 *exc* 并且现在是仅限位置形参。"

#: ../../library/traceback.rst:118
msgid ""
"This is a shorthand for ``print_exception(sys.exception(), limit=limit, "
"file=file, chain=chain)``."
msgstr ""
"这是 ``print_exception(sys.exception(), limit=limit, file=file, chain=chain)``"
" 的快捷方式。"

#: ../../library/traceback.rst:124
msgid ""
"This is a shorthand for ``print_exception(sys.last_exc, limit=limit, "
"file=file, chain=chain)``.  In general it will work only after an exception "
"has reached an interactive prompt (see :data:`sys.last_exc`)."
msgstr ""
"这是 ``print_exception(sys.last_exc, limit=limit, file=file, chain=chain)`` "
"的快捷方式。 通常它将只在异常到达交互提示符之后才会起作用 (参见 :data:`sys.last_exc`)。"

#: ../../library/traceback.rst:131
msgid ""
"Print up to *limit* stack trace entries (starting from the invocation point)"
" if *limit* is positive.  Otherwise, print the last ``abs(limit)`` entries."
"  If *limit* is omitted or ``None``, all entries are printed. The optional "
"*f* argument can be used to specify an alternate :ref:`stack frame <frame-"
"objects>` to start.  The optional *file* argument has the same meaning as "
"for :func:`print_tb`."
msgstr ""
"如果 *limit* 为正数则打印至多 *limit* 个栈跟踪条目（从唤起点开始）。 在其他情况下，则打印最后 ``abs(limit)`` 个条目。"
" 如果 *limit* 被省略或为 ``None``，则会打印所有条目。 可选的 *f* 参数可被用来指定一个替代 :ref:`栈帧 <frame-"
"objects>` 作为开始位置。 可选的 *file* 参数的含义与 :func:`print_tb` 的相同。"

#: ../../library/traceback.rst:145
msgid ""
"Return a :class:`StackSummary` object representing a list of \"pre-"
"processed\" stack trace entries extracted from the :ref:`traceback object "
"<traceback-objects>` *tb*.  It is useful for alternate formatting of stack "
"traces.  The optional *limit* argument has the same meaning as for "
":func:`print_tb`.  A \"pre-processed\" stack trace entry is a "
":class:`FrameSummary` object containing attributes "
":attr:`~FrameSummary.filename`, :attr:`~FrameSummary.lineno`, "
":attr:`~FrameSummary.name`, and :attr:`~FrameSummary.line` representing the "
"information that is usually printed for a stack trace."
msgstr ""
"返回一个 :class:`StackSummary` 对象来代表从 :ref:`回溯对象 <traceback-objects>` *tb* "
"提取的“预处理”栈跟踪条目列表。 它可用作栈跟踪的另一种格式化形式。 可选的 *limit* 参数的含义与 :func:`print_tb` 的相同。 "
"“预处理”栈跟踪条目是一个 :class:`FrameSummary` 对象，其中包含代表通常针对栈跟踪打印的信息的 "
":attr:`~FrameSummary.filename`, :attr:`~FrameSummary.lineno`, "
":attr:`~FrameSummary.name` 和 :attr:`~FrameSummary.line` 等属性。"

#: ../../library/traceback.rst:158
msgid ""
"Extract the raw traceback from the current :ref:`stack frame <frame-"
"objects>`.  The return value has the same format as for :func:`extract_tb`."
"  The optional *f* and *limit* arguments have the same meaning as for "
":func:`print_stack`."
msgstr ""
"从当前的 :ref:`栈帧 <frame-objects>` 提取原始回溯。 返回值的格式与 :func:`extract_tb` 的相同。 可选的 "
"*f* 和 *limit* 参数的含义与 :func:`print_stack` 的相同。"

#: ../../library/traceback.rst:166
msgid ""
"Print the list of tuples as returned by :func:`extract_tb` or "
":func:`extract_stack` as a formatted stack trace to the given file. If "
"*file* is ``None``, the output is written to :data:`sys.stderr`."
msgstr ""
"将 :func:`extract_tb` 或 :func:`extract_stack` 返回的元组列表以带格式的栈回溯形式打印到给定的文件。 如果 "
"*file* 为 ``None``，则输出将被写到 :data:`sys.stderr`。"

#: ../../library/traceback.rst:173
msgid ""
"Given a list of tuples or :class:`FrameSummary` objects as returned by "
":func:`extract_tb` or :func:`extract_stack`, return a list of strings ready "
"for printing.  Each string in the resulting list corresponds to the item "
"with the same index in the argument list.  Each string ends in a newline; "
"the strings may contain internal newlines as well, for those items whose "
"source text line is not ``None``."
msgstr ""
"给定一个由元组或如 :func:`extract_tb` 或 :func:`extract_stack` 所返回的 "
":class:`FrameSummary` 对象组成的列表，返回一个可打印的字符串列表。 结果列表中的每个字符串都对应于参数列表中具有相同索引号的条目。"
" 每个字符串以一个换行符结束；对于那些源文本行不为 ``None`` 的条目，字符串也可能包含内部换行符。"

#: ../../library/traceback.rst:183
msgid ""
"Format the exception part of a traceback using an exception value such as "
"given by :data:`sys.last_value`.  The return value is a list of strings, "
"each ending in a newline.  The list contains the exception's message, which "
"is normally a single string; however, for :exc:`SyntaxError` exceptions, it "
"contains several lines that (when printed) display detailed information "
"about where the syntax error occurred. Following the message, the list "
"contains the exception's :attr:`notes <BaseException.__notes__>`."
msgstr ""
"使用 :data:`sys.last_value` 等给出的异常值来格式化回溯的异常部分。 返回值是一个字符串列表，其中每一项都以换行符结束。 "
"该列表包含异常消息，它通常是一个字符串；但是，对于 :exc:`SyntaxError` "
"异常，它将包含多行并且（当打印时）会显示语法错误发生位置的详细信息。 在异常消息之后，该列表还包含了异常的 :attr:`注释 "
"<BaseException.__notes__>`。"

#: ../../library/traceback.rst:191
msgid ""
"Since Python 3.10, instead of passing *value*, an exception object can be "
"passed as the first argument.  If *value* is provided, the first argument is"
" ignored in order to provide backwards compatibility."
msgstr ""
"从 Python 3.10 开始，可以不传入 *value*，而是传入一个异常对象作为第一个参数。 如果提供了 "
"*value*，则第一个参数将被忽略以便提供向下兼容性。"

#: ../../library/traceback.rst:195 ../../library/traceback.rst:431
msgid ""
"When *show_group* is ``True``, and the exception is an instance of "
":exc:`BaseExceptionGroup`, the nested exceptions are included as well, "
"recursively, with indentation relative to their nesting depth."
msgstr ""
"当 *show_group* 为 ``True``，并且异常为 :exc:`BaseExceptionGroup` "
"的实例时，还会递归地包括嵌套的异常，并根据它们的嵌套深度添加缩进。"

#: ../../library/traceback.rst:203
msgid ""
"The returned list now includes any :attr:`notes <BaseException.__notes__>` "
"attached to the exception."
msgstr "返回的列表现在将包括关联到异常的任何 :attr:`注释 <BaseException.__notes__>`。"

#: ../../library/traceback.rst:207
msgid "*show_group* parameter was added."
msgstr "增加了 *show_group* 形参。"

#: ../../library/traceback.rst:213
msgid ""
"Format a stack trace and the exception information.  The arguments  have the"
" same meaning as the corresponding arguments to :func:`print_exception`.  "
"The return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""
"格式化一个栈跟踪和异常信息。 参数的含义与传给 :func:`print_exception` 的相应参数相同。 "
"返回值是一个字符串列表，每个字符串都以一个换行符结束且有些还包含内部换行符。 当这些行被拼接并打印时，打印的文本与 "
":func:`print_exception` 的完全相同。"

#: ../../library/traceback.rst:222
msgid ""
"This function's behavior and signature were modified to match "
":func:`print_exception`."
msgstr "此函数的行为和签名已被修改以与 :func:`print_exception` 相匹配。"

#: ../../library/traceback.rst:229
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr "这类似于 ``print_exc(limit)`` 但会返回一个字符串而不是打印到一个文件。"

#: ../../library/traceback.rst:235
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr "是 ``format_list(extract_tb(tb, limit))`` 的简写形式。"

#: ../../library/traceback.rst:240
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr "是 ``format_list(extract_stack(f, limit))`` 的简写形式。"

#: ../../library/traceback.rst:244
msgid ""
"Clears the local variables of all the stack frames in a :ref:`traceback "
"<traceback-objects>` *tb* by calling the :meth:`~frame.clear` method of each"
" :ref:`frame object <frame-objects>`."
msgstr ""
"通过调用每个 :ref:`帧对象 <frame-objects>` 的 :meth:`~frame.clear` 方法来清除 :ref:`回溯 "
"<traceback-objects>` *tb* 中所有栈帧的局部变量。"

#: ../../library/traceback.rst:253
msgid ""
"Walk a stack following :attr:`f.f_back <frame.f_back>` from the given frame,"
" yielding the frame and line number for each frame. If *f* is ``None``, the "
"current stack is used. This helper is used with "
":meth:`StackSummary.extract`."
msgstr ""
"从给定的帧开始访问 :attr:`f.f_back <frame.f_back>` 之后的栈内容，产生每一个帧和帧对应的行号。 如果 *f* 为 "
"``None``，则会使用当前栈。 这个辅助函数要与 :meth:`StackSummary.extract` 一起使用。"

#: ../../library/traceback.rst:260
msgid ""
"This function previously returned a generator that would walk the stack when"
" first iterated over. The generator returned now is the state of the stack "
"when ``walk_stack`` is called."
msgstr "此函数之前返回一个首次迭代后逐个操作栈的生成器。 现在返回的生成器则是当 ``walk_stack`` 被调用时栈的状态。"

#: ../../library/traceback.rst:267
msgid ""
"Walk a traceback following :attr:`~traceback.tb_next` yielding the frame and"
" line number for each frame. This helper is used with "
":meth:`StackSummary.extract`."
msgstr ""
"访问 :attr:`~traceback.tb_next` 之后的回溯并产生每一个帧和帧对应的行号。 这个辅助函数要与 "
":meth:`StackSummary.extract` 一起使用。"

#: ../../library/traceback.rst:275
msgid ":class:`!TracebackException` Objects"
msgstr ":class:`!TracebackException` 对象"

#: ../../library/traceback.rst:279
msgid ""
":class:`!TracebackException` objects are created from actual exceptions to "
"capture data for later printing.  They offer a more lightweight method of "
"storing this information by avoiding holding references to "
":ref:`traceback<traceback-objects>` and :ref:`frame<frame-objects>` objects."
" In addition, they expose more options to configure the output compared to "
"the module-level functions described above."
msgstr ""
":class:`!TracebackException` 对象基于实际异常创建以便捕获数据供稍后打印。 它们通过避免持有对 :ref:`回溯 "
"<traceback-objects>` 和 :ref:`帧 <frame-objects>` 对象的引用提供了存储此信息的更轻量方法。 "
"此外，相比上文所述的模块级函数它们还公开了更多选项用于配置输出。"

#: ../../library/traceback.rst:288
msgid ""
"Capture an exception for later rendering. The meaning of *limit*, "
"*lookup_lines* and *capture_locals* are as for the :class:`StackSummary` "
"class."
msgstr ""
"捕获异常以供稍后渲染。 *limit*, *lookup_lines* 和 *capture_locals* 的含义与 "
":class:`StackSummary` 类的相同。"

#: ../../library/traceback.rst:292
msgid ""
"If *compact* is true, only data that is required by "
":class:`!TracebackException`'s :meth:`format` method is saved in the class "
"attributes. In particular, the :attr:`__context__` field is calculated only "
"if :attr:`__cause__` is ``None`` and :attr:`__suppress_context__` is false."
msgstr ""
"如果 *compact* 为真值，则只有 :class:`!TracebackException` 的 :meth:`format` "
"方法所需要的数据会被保存在类属性性。 特别地，:attr:`__context__` 字段只有在 :attr:`__cause__` 为 "
"``None`` 且 :attr:`__suppress_context__` 为假值时才会被计算。"

#: ../../library/traceback.rst:298 ../../library/traceback.rst:399
msgid ""
"Note that when locals are captured, they are also shown in the traceback."
msgstr "请注意当局部变量被捕获时，它们也会被显示在回溯中。"

#: ../../library/traceback.rst:300
msgid ""
"*max_group_width* and *max_group_depth* control the formatting of exception "
"groups (see :exc:`BaseExceptionGroup`). The depth refers to the nesting "
"level of the group, and the width refers to the size of a single exception "
"group's exceptions array. The formatted output is truncated when either "
"limit is exceeded."
msgstr ""
"*max_group_width* 和 *max_group_depth* 控制异常组的格式化 (参见 "
":exc:`BaseExceptionGroup`)。 depth 是指分组的嵌套层级，而 width 是指一个异常组的异常数组的大小。 "
"格式化的输出在达到某个限制时将被截断。"

#: ../../library/traceback.rst:306
msgid "Added the *compact* parameter."
msgstr "增加了 *compact* 形参。"

#: ../../library/traceback.rst:309
msgid "Added the *max_group_width* and *max_group_depth* parameters."
msgstr "添加了 *max_group_width* 和 *max_group_depth* 形参。parameters."

#: ../../library/traceback.rst:314
msgid ""
"A :class:`!TracebackException` of the original "
":attr:`~BaseException.__cause__`."
msgstr "原始 :attr:`~BaseException.__cause__` 的 :class:`!TracebackException`。"

#: ../../library/traceback.rst:319
msgid ""
"A :class:`!TracebackException` of the original "
":attr:`~BaseException.__context__`."
msgstr "原始 :attr:`~BaseException.__context__` 的 :class:`!TracebackException`。"

#: ../../library/traceback.rst:324
msgid ""
"If ``self`` represents an :exc:`ExceptionGroup`, this field holds a list of "
":class:`!TracebackException` instances representing the nested exceptions. "
"Otherwise it is ``None``."
msgstr ""
"如果 ``self`` 代表一个 :exc:`ExceptionGroup`，此字段将保存一个由代表被嵌套异常的 "
":class:`!TracebackException` 实例组成的列表。 否则它将为 ``None``。"

#: ../../library/traceback.rst:332
msgid ""
"The :attr:`~BaseException.__suppress_context__` value from the original "
"exception."
msgstr "来自原始异常的 :attr:`~BaseException.__suppress_context__` 值。"

#: ../../library/traceback.rst:337
msgid ""
"The :attr:`~BaseException.__notes__` value from the original exception, or "
"``None`` if the exception does not have any notes. If it is not ``None`` is "
"it formatted in the traceback after the exception string."
msgstr ""
"来自原始异常的 :attr:`~BaseException.__notes__` 值，或者如果异常没有任何注释则为 ``None``。 如果它不为 "
"``None`` 则会在异常字符串之后的回溯中进行格式化。"

#: ../../library/traceback.rst:346
msgid "A :class:`StackSummary` representing the traceback."
msgstr "代表回溯的 :class:`StackSummary`。"

#: ../../library/traceback.rst:350
msgid "The class of the original traceback."
msgstr "原始回溯的类。"

#: ../../library/traceback.rst:356
msgid "String display of the class of the original exception."
msgstr "原始异常类的字符串显示。"

#: ../../library/traceback.rst:362
msgid "For syntax errors - the file name where the error occurred."
msgstr "针对语法错误 —— 错误发生所在的文件名。"

#: ../../library/traceback.rst:366
msgid "For syntax errors - the line number where the error occurred."
msgstr "针对语法错误 —— 错误发生所在的行号。"

#: ../../library/traceback.rst:370
msgid ""
"For syntax errors - the end line number where the error occurred. Can be "
"``None`` if not present."
msgstr "针对语法错误 —— 错误发生所在的末尾行号。 如不存在则可以为 ``None``。"

#: ../../library/traceback.rst:377
msgid "For syntax errors - the text where the error occurred."
msgstr "针对语法错误 —— 错误发生所在的文本。"

#: ../../library/traceback.rst:381
msgid "For syntax errors - the offset into the text where the error occurred."
msgstr "针对语法错误 —— 错误发生所在的文本内部的偏移量。"

#: ../../library/traceback.rst:385
msgid ""
"For syntax errors - the end offset into the text where the error occurred. "
"Can be ``None`` if not present."
msgstr "针对语法错误 —— 错误发生所在的文本末尾偏移量。 如不存在则可以为 ``None``。"

#: ../../library/traceback.rst:392
msgid "For syntax errors - the compiler error message."
msgstr "针对语法错误 —— 编译器错误消息。"

#: ../../library/traceback.rst:396
msgid ""
"Capture an exception for later rendering. *limit*, *lookup_lines* and "
"*capture_locals* are as for the :class:`StackSummary` class."
msgstr ""
"捕获一个异常以便随后渲染。 *limit*, *lookup_lines* 和 *capture_locals* 的含义与 "
":class:`StackSummary` 类的相同。"

#: ../../library/traceback.rst:403
msgid ""
"Print to *file* (default ``sys.stderr``) the exception information returned "
"by :meth:`format`."
msgstr "将 :meth:`format` 所返回的异常信息打印至 *file* (默认为 ``sys.stderr``)。"

#: ../../library/traceback.rst:410
msgid "Format the exception."
msgstr "格式化异常。"

#: ../../library/traceback.rst:412
msgid ""
"If *chain* is not ``True``, :attr:`__cause__` and :attr:`__context__` will "
"not be formatted."
msgstr ""
"如果 *chain* 不为 ``True``，则 :attr:`__cause__` 和 :attr:`__context__` 将不会被格式化。"

#: ../../library/traceback.rst:415
msgid ""
"The return value is a generator of strings, each ending in a newline and "
"some containing internal newlines. :func:`~traceback.print_exception` is a "
"wrapper around this method which just prints the lines to a file."
msgstr ""
"返回值是一个字符串的生成器，其中每个字符串都以换行符结束并且有些还会包含内部换行符。 "
":func:`~traceback.print_exception` 是此方法的一个包装器，它只是将这些行打印到一个文件。"

#: ../../library/traceback.rst:421
msgid "Format the exception part of the traceback."
msgstr "格式化回溯的异常部分。"

#: ../../library/traceback.rst:423
msgid "The return value is a generator of strings, each ending in a newline."
msgstr "返回值是一个字符串的生成器，每个字符串都以一个换行符结束。"

#: ../../library/traceback.rst:425
msgid ""
"When *show_group* is ``False``, the generator emits the exception's message "
"followed by its notes (if it has any). The exception message is normally a "
"single string; however, for :exc:`SyntaxError` exceptions, it consists of "
"several lines that (when printed) display detailed information about where "
"the syntax error occurred."
msgstr ""
"当 *show_group* 为 ``False`` 时，生成器会发出异常消息并附带其注释（如果有的话）。 异常消息通常是一个字符串；但是，对于 "
":exc:`SyntaxError` 异常，它将由多行组成并且（当打印时）会显示语法错误发生位置的详细信息。"

#: ../../library/traceback.rst:435
msgid ""
"The exception's :attr:`notes <BaseException.__notes__>` are now included in "
"the output."
msgstr "异常的 :attr:`注释 <BaseException.__notes__>` 现在将被包括在输出中。"

#: ../../library/traceback.rst:439
msgid "Added the *show_group* parameter."
msgstr "增加了 *show_group* 形参。"

#: ../../library/traceback.rst:444
msgid ":class:`!StackSummary` Objects"
msgstr ":class:`!StackSummary` 对象"

#: ../../library/traceback.rst:448
msgid ""
":class:`!StackSummary` objects represent a call stack ready for formatting."
msgstr ":class:`!StackSummary` 对象代表一个可被格式化的调用栈。"

#: ../../library/traceback.rst:454
msgid ""
"Construct a :class:`!StackSummary` object from a frame generator (such as is"
" returned by :func:`~traceback.walk_stack` or :func:`~traceback.walk_tb`)."
msgstr ""
"根据一个帧生成器（例如由 :func:`~traceback.walk_stack` 或 :func:`~traceback.walk_tb` "
"所返回的对象）构造 :class:`!StackSummary` 对象。"

#: ../../library/traceback.rst:458
msgid ""
"If *limit* is supplied, only this many frames are taken from *frame_gen*. If"
" *lookup_lines* is ``False``, the returned :class:`FrameSummary` objects "
"will not have read their lines in yet, making the cost of creating the "
":class:`!StackSummary` cheaper (which may be valuable if it may not actually"
" get formatted). If *capture_locals* is ``True`` the local variables in each"
" :class:`!FrameSummary` are captured as object representations."
msgstr ""
"如果提供了 *limit*，则只从 *frame_gen* 提取该参数所指定数量的帧。 如果 *lookup_lines* 为 "
"``False``，则返回的 :class:`FrameSummary` 对象将不会读入它们的行，这使得创建 "
":class:`!StackSummary` 的开销更低（如果它不会被实际格式化这就很有价值）。 如果 *capture_locals* 为 "
"``True`` 则每个 :class:`!FrameSummary` 中的局部变量会被捕获为对象表示形式。"

#: ../../library/traceback.rst:466
msgid ""
"Exceptions raised from :func:`repr` on a local variable (when "
"*capture_locals* is ``True``) are no longer propagated to the caller."
msgstr ""
"在局部变量的 :func:`repr` 上被引发的异常（当 *capture_locals* 为 ``True`` 时）不会再被传播给调用方。"

#: ../../library/traceback.rst:472
msgid ""
"Construct a :class:`!StackSummary` object from a supplied list of "
":class:`FrameSummary` objects or old-style list of tuples.  Each tuple "
"should be a 4-tuple with *filename*, *lineno*, *name*, *line* as the "
"elements."
msgstr ""
"从所提供的 :class:`FrameSummary` 对象列表或旧式的元组列表构造一个 :class:`!StackSummary` 对象。 "
"每个元组都应当是以 *文件名*, *行号*, *名称*, *行* 为元素的 4 元组。"

#: ../../library/traceback.rst:479
msgid ""
"Returns a list of strings ready for printing.  Each string in the resulting "
"list corresponds to a single :ref:`frame <frame-objects>` from the stack. "
"Each string ends in a newline; the strings may contain internal newlines as "
"well, for those items with source text lines."
msgstr ""
"返回一个可打印的字符串列表。 结果列表中的每个字符串各自对应来自栈的单独的 :ref:`帧 <frame-objects>`。 "
"每个字符串都以一个换行符结束；对于带有源文本行的条目来说，字符串还可能包含内部换行符。"

#: ../../library/traceback.rst:485
msgid ""
"For long sequences of the same frame and line, the first few repetitions are"
" shown, followed by a summary line stating the exact number of further "
"repetitions."
msgstr "对于同一帧与行的长序列，将显示前几个重复项，后面跟一个指明之后的实际重复次数的摘要行。"

#: ../../library/traceback.rst:489
msgid "Long sequences of repeated frames are now abbreviated."
msgstr "重复帧的长序列现在将被缩减。"

#: ../../library/traceback.rst:494
msgid ""
"Returns a string for printing one of the :ref:`frames <frame-objects>` "
"involved in the stack. This method is called for each :class:`FrameSummary` "
"object to be printed by :meth:`StackSummary.format`. If it returns ``None``,"
" the frame is omitted from the output."
msgstr ""
"返回用于打印栈中涉及的某一个 :ref:`帧 <frame-objects>` 的字符串。 此方法会为每个要用 "
":meth:`StackSummary.format` 来打印的 :class:`FrameSummary` 对象进行调用。 如果它返回 "
"``None``，该帧将从输出中被省略。"

#: ../../library/traceback.rst:504
msgid ":class:`!FrameSummary` Objects"
msgstr ":class:`!FrameSummary` 对象"

#: ../../library/traceback.rst:508
msgid ""
"A :class:`!FrameSummary` object represents a single :ref:`frame <frame-"
"objects>` in a :ref:`traceback <traceback-objects>`."
msgstr ""
":class:`!FrameSummary` 对象表示 :ref:`回溯 <traceback-objects>` 中的某一个 :ref:`帧 "
"<frame-objects>`。"

#: ../../library/traceback.rst:515
msgid ""
"Represents a single :ref:`frame <frame-objects>` in the :ref:`traceback "
"<traceback-objects>` or stack that is being formatted or printed. It may "
"optionally have a stringified version of the frame's locals included in it. "
"If *lookup_line* is ``False``, the source code is not looked up until the "
":class:`!FrameSummary` has the :attr:`~FrameSummary.line` attribute accessed"
" (which also happens when casting it to a :class:`tuple`). "
":attr:`~FrameSummary.line` may be directly provided, and will prevent line "
"lookups happening at all. *locals* is an optional local variable mapping, "
"and if supplied the variable representations are stored in the summary for "
"later display."
msgstr ""
"代表 :ref:`回溯 <traceback-objects>` 或栈中被格式化或打印的一个单独 :ref:`帧 <frame-objects>`。 "
"它还可能带有包括在其中的帧局部变量的字符串化版本。 如果 *lookup_line* 为 ``False``，则源代码不会被查找直到 "
":class:`!FrameSummary` 的 :attr:`~FrameSummary.line` 属性被访问（这还会在将其转换为 "
":class:`tuple` 时发生）。 :attr:`~FrameSummary.line` 可能会被直接提供，并将完全阻止行查找的发生。 "
"*locals* 是一个可选的局部变量映射，如果有提供的话这些变量的表示形式将被存储在概要中以便随后显示。"

#: ../../library/traceback.rst:526
msgid ":class:`!FrameSummary` instances have the following attributes:"
msgstr ":class:`!FrameSummary` 实例具有以下属性："

#: ../../library/traceback.rst:530
msgid ""
"The filename of the source code for this frame. Equivalent to accessing "
":attr:`f.f_code.co_filename <codeobject.co_filename>` on a :ref:`frame "
"object <frame-objects>` *f*."
msgstr ""
"对应于该帧的源代码的文件名。 等价于访问 :ref:`帧对象 <frame-objects>` *f* 上的 "
":attr:`f.f_code.co_filename <codeobject.co_filename>`。"

#: ../../library/traceback.rst:536
msgid "The line number of the source code for this frame."
msgstr "对应于该帧的源代码的行号。"

#: ../../library/traceback.rst:540
msgid ""
"Equivalent to accessing :attr:`f.f_code.co_name <codeobject.co_name>` on a "
":ref:`frame object <frame-objects>` *f*."
msgstr ""
"等价于访问 :ref:`帧对象 <frame-objects>` *f* 上的 :attr:`f.f_code.co_name "
"<codeobject.co_name>`。"

#: ../../library/traceback.rst:545
msgid ""
"A string representing the source code for this frame, with leading and "
"trailing whitespace stripped. If the source is not available, it is "
"``None``."
msgstr "代表该帧的源代码的字符串，开头和末尾的空白将被去除。 如果源代码不可用，它将为 ``None``。"

#: ../../library/traceback.rst:551
msgid ""
"The last line number of the source code for this frame. By default, it is "
"set to ``lineno`` and indexation starts from 1."
msgstr "该帧源代码的末尾行号。 在默认情况下，它将被设为 ``lineno`` 且索引号从 1 开始。"

#: ../../library/traceback.rst:554
msgid "The default value changed from ``None`` to ``lineno``."
msgstr "默认值从 ``None`` 改为 ``lineno``。"

#: ../../library/traceback.rst:559
msgid ""
"The column number of the source code for this frame. By default, it is "
"``None`` and indexation starts from 0."
msgstr "该帧源代码的列号。 在默认情况下，它将为 ``None`` 且索引号从 0 开始。"

#: ../../library/traceback.rst:564
msgid ""
"The last column number of the source code for this frame. By default, it is "
"``None`` and indexation starts from 0."
msgstr "该帧源代码的末尾列号。 在默认情况下，它将为 ``None`` 且索引号从 0 开始。"

#: ../../library/traceback.rst:571
msgid "Examples of Using the Module-Level Functions"
msgstr "使用模块级函数的例子"

#: ../../library/traceback.rst:573
msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but"
" less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the "
":mod:`code` module. ::"
msgstr ""
"这个简单示例是一个基本的读取-求值-打印循环，类似于（但实用性小于）标准 Python 交互式解释器循环。 对于解释器循环的更完整实现，请参阅 "
":mod:`code` 模块。 ::"

#: ../../library/traceback.rst:578
msgid ""
"import sys, traceback\n"
"\n"
"def run_user_code(envdir):\n"
"    source = input(\">>> \")\n"
"    try:\n"
"        exec(source, envdir)\n"
"    except Exception:\n"
"        print(\"Exception in user code:\")\n"
"        print(\"-\"*60)\n"
"        traceback.print_exc(file=sys.stdout)\n"
"        print(\"-\"*60)\n"
"\n"
"envdir = {}\n"
"while True:\n"
"    run_user_code(envdir)"
msgstr ""
"import sys, traceback\n"
"\n"
"def run_user_code(envdir):\n"
"    source = input(\">>> \")\n"
"    try:\n"
"        exec(source, envdir)\n"
"    except Exception:\n"
"        print(\"Exception in user code:\")\n"
"        print(\"-\"*60)\n"
"        traceback.print_exc(file=sys.stdout)\n"
"        print(\"-\"*60)\n"
"\n"
"envdir = {}\n"
"while True:\n"
"    run_user_code(envdir)"

#: ../../library/traceback.rst:595
msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback:"
msgstr "下面的例子演示了打印和格式化异常与回溯的不同方式:"

#: ../../library/traceback.rst:598
msgid ""
"import sys, traceback\n"
"\n"
"def lumberjack():\n"
"    bright_side_of_life()\n"
"\n"
"def bright_side_of_life():\n"
"    return tuple()[0]\n"
"\n"
"try:\n"
"    lumberjack()\n"
"except IndexError as exc:\n"
"    print(\"*** print_tb:\")\n"
"    traceback.print_tb(exc.__traceback__, limit=1, file=sys.stdout)\n"
"    print(\"*** print_exception:\")\n"
"    traceback.print_exception(exc, limit=2, file=sys.stdout)\n"
"    print(\"*** print_exc:\")\n"
"    traceback.print_exc(limit=2, file=sys.stdout)\n"
"    print(\"*** format_exc, first and last line:\")\n"
"    formatted_lines = traceback.format_exc().splitlines()\n"
"    print(formatted_lines[0])\n"
"    print(formatted_lines[-1])\n"
"    print(\"*** format_exception:\")\n"
"    print(repr(traceback.format_exception(exc)))\n"
"    print(\"*** extract_tb:\")\n"
"    print(repr(traceback.extract_tb(exc.__traceback__)))\n"
"    print(\"*** format_tb:\")\n"
"    print(repr(traceback.format_tb(exc.__traceback__)))\n"
"    print(\"*** tb_lineno:\", exc.__traceback__.tb_lineno)"
msgstr ""
"import sys, traceback\n"
"\n"
"def lumberjack():\n"
"    bright_side_of_life()\n"
"\n"
"def bright_side_of_life():\n"
"    return tuple()[0]\n"
"\n"
"try:\n"
"    lumberjack()\n"
"except IndexError as exc:\n"
"    print(\"*** print_tb:\")\n"
"    traceback.print_tb(exc.__traceback__, limit=1, file=sys.stdout)\n"
"    print(\"*** print_exception:\")\n"
"    traceback.print_exception(exc, limit=2, file=sys.stdout)\n"
"    print(\"*** print_exc:\")\n"
"    traceback.print_exc(limit=2, file=sys.stdout)\n"
"    print(\"*** format_exc, first and last line:\")\n"
"    formatted_lines = traceback.format_exc().splitlines()\n"
"    print(formatted_lines[0])\n"
"    print(formatted_lines[-1])\n"
"    print(\"*** format_exception:\")\n"
"    print(repr(traceback.format_exception(exc)))\n"
"    print(\"*** extract_tb:\")\n"
"    print(repr(traceback.extract_tb(exc.__traceback__)))\n"
"    print(\"*** format_tb:\")\n"
"    print(repr(traceback.format_tb(exc.__traceback__)))\n"
"    print(\"*** tb_lineno:\", exc.__traceback__.tb_lineno)"

#: ../../library/traceback.rst:629
msgid "The output for the example would look similar to this:"
msgstr "该示例的输出看起来像是这样的:"

#: ../../library/traceback.rst:631
msgid ""
"*** print_tb:\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"*** print_exception:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<doctest...>\", line 4, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple index out of range\n"
"*** print_exc:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<doctest...>\", line 4, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple index out of range\n"
"*** format_exc, first and last line:\n"
"Traceback (most recent call last):\n"
"IndexError: tuple index out of range\n"
"*** format_exception:\n"
"['Traceback (most recent call last):\\n',\n"
" '  File \"<doctest default[0]>\", line 10, in <module>\\n    lumberjack()\\n    ~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 4, in lumberjack\\n    bright_side_of_life()\\n    ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 7, in bright_side_of_life\\n    return tuple()[0]\\n           ~~~~~~~^^^\\n',\n"
" 'IndexError: tuple index out of range\\n']\n"
"*** extract_tb:\n"
"[<FrameSummary file <doctest...>, line 10 in <module>>,\n"
" <FrameSummary file <doctest...>, line 4 in lumberjack>,\n"
" <FrameSummary file <doctest...>, line 7 in bright_side_of_life>]\n"
"*** format_tb:\n"
"['  File \"<doctest default[0]>\", line 10, in <module>\\n    lumberjack()\\n    ~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 4, in lumberjack\\n    bright_side_of_life()\\n    ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 7, in bright_side_of_life\\n    return tuple()[0]\\n           ~~~~~~~^^^\\n']\n"
"*** tb_lineno: 10"
msgstr ""
"*** print_tb:\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"*** print_exception:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<doctest...>\", line 4, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple index out of range\n"
"*** print_exc:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<doctest...>\", line 4, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple index out of range\n"
"*** format_exc, first and last line:\n"
"Traceback (most recent call last):\n"
"IndexError: tuple index out of range\n"
"*** format_exception:\n"
"['Traceback (most recent call last):\\n',\n"
" '  File \"<doctest default[0]>\", line 10, in <module>\\n    lumberjack()\\n    ~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 4, in lumberjack\\n    bright_side_of_life()\\n    ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 7, in bright_side_of_life\\n    return tuple()[0]\\n           ~~~~~~~^^^\\n',\n"
" 'IndexError: tuple index out of range\\n']\n"
"*** extract_tb:\n"
"[<FrameSummary file <doctest...>, line 10 in <module>>,\n"
" <FrameSummary file <doctest...>, line 4 in lumberjack>,\n"
" <FrameSummary file <doctest...>, line 7 in bright_side_of_life>]\n"
"*** format_tb:\n"
"['  File \"<doctest default[0]>\", line 10, in <module>\\n    lumberjack()\\n    ~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 4, in lumberjack\\n    bright_side_of_life()\\n    ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 7, in bright_side_of_life\\n    return tuple()[0]\\n           ~~~~~~~^^^\\n']\n"
"*** tb_lineno: 10"

#: ../../library/traceback.rst:676
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr "下面的例子演示了打印和格式化栈的不同方式::"

#: ../../library/traceback.rst:678
msgid ""
">>> import traceback\n"
">>> def another_function():\n"
"...     lumberstack()\n"
"...\n"
">>> def lumberstack():\n"
"...     traceback.print_stack()\n"
"...     print(repr(traceback.extract_stack()))\n"
"...     print(repr(traceback.format_stack()))\n"
"...\n"
">>> another_function()\n"
"  File \"<doctest>\", line 10, in <module>\n"
"    another_function()\n"
"  File \"<doctest>\", line 3, in another_function\n"
"    lumberstack()\n"
"  File \"<doctest>\", line 6, in lumberstack\n"
"    traceback.print_stack()\n"
"[('<doctest>', 10, '<module>', 'another_function()'),\n"
" ('<doctest>', 3, 'another_function', 'lumberstack()'),\n"
" ('<doctest>', 7, 'lumberstack', 'print(repr(traceback.extract_stack()))')]\n"
"['  File \"<doctest>\", line 10, in <module>\\n    another_function()\\n',\n"
" '  File \"<doctest>\", line 3, in another_function\\n    lumberstack()\\n',\n"
" '  File \"<doctest>\", line 8, in lumberstack\\n    print(repr(traceback.format_stack()))\\n']"
msgstr ""
">>> import traceback\n"
">>> def another_function():\n"
"...     lumberstack()\n"
"...\n"
">>> def lumberstack():\n"
"...     traceback.print_stack()\n"
"...     print(repr(traceback.extract_stack()))\n"
"...     print(repr(traceback.format_stack()))\n"
"...\n"
">>> another_function()\n"
"  File \"<doctest>\", line 10, in <module>\n"
"    another_function()\n"
"  File \"<doctest>\", line 3, in another_function\n"
"    lumberstack()\n"
"  File \"<doctest>\", line 6, in lumberstack\n"
"    traceback.print_stack()\n"
"[('<doctest>', 10, '<module>', 'another_function()'),\n"
" ('<doctest>', 3, 'another_function', 'lumberstack()'),\n"
" ('<doctest>', 7, 'lumberstack', 'print(repr(traceback.extract_stack()))')]\n"
"['  File \"<doctest>\", line 10, in <module>\\n    another_function()\\n',\n"
" '  File \"<doctest>\", line 3, in another_function\\n    lumberstack()\\n',\n"
" '  File \"<doctest>\", line 8, in lumberstack\\n    print(repr(traceback.format_stack()))\\n']"

#: ../../library/traceback.rst:702
msgid "This last example demonstrates the final few formatting functions:"
msgstr "最后这个例子演示了最后几个格式化函数:"

#: ../../library/traceback.rst:704
msgid ""
">>> import traceback\n"
">>> traceback.format_list([('spam.py', 3, '<module>', 'spam.eggs()'),\n"
"...                        ('eggs.py', 42, 'eggs', 'return \"bacon\"')])\n"
"['  File \"spam.py\", line 3, in <module>\\n    spam.eggs()\\n',\n"
" '  File \"eggs.py\", line 42, in eggs\\n    return \"bacon\"\\n']\n"
">>> an_error = IndexError('tuple index out of range')\n"
">>> traceback.format_exception_only(an_error)\n"
"['IndexError: tuple index out of range\\n']"
msgstr ""
">>> import traceback\n"
">>> traceback.format_list([('spam.py', 3, '<module>', 'spam.eggs()'),\n"
"...                        ('eggs.py', 42, 'eggs', 'return \"bacon\"')])\n"
"['  File \"spam.py\", line 3, in <module>\\n    spam.eggs()\\n',\n"
" '  File \"eggs.py\", line 42, in eggs\\n    return \"bacon\"\\n']\n"
">>> an_error = IndexError('tuple index out of range')\n"
">>> traceback.format_exception_only(an_error)\n"
"['IndexError: tuple index out of range\\n']"

#: ../../library/traceback.rst:718
msgid "Examples of Using :class:`TracebackException`"
msgstr "使用 :class:`TracebackException` 的示例"

#: ../../library/traceback.rst:720
msgid "With the helper class, we have more options::"
msgstr "使用辅助类，我们将有更多的选项::"

#: ../../library/traceback.rst:722
msgid ""
">>> import sys\n"
">>> from traceback import TracebackException\n"
">>>\n"
">>> def lumberjack():\n"
"...     bright_side_of_life()\n"
"...\n"
">>> def bright_side_of_life():\n"
"...     t = \"bright\", \"side\", \"of\", \"life\"\n"
"...     return t[5]\n"
"...\n"
">>> try:\n"
"...     lumberjack()\n"
"... except IndexError as e:\n"
"...     exc = e\n"
"...\n"
">>> try:\n"
"...     try:\n"
"...         lumberjack()\n"
"...     except:\n"
"...         1/0\n"
"... except Exception as e:\n"
"...     chained_exc = e\n"
"...\n"
">>> # limit works as with the module-level functions\n"
">>> TracebackException.from_exception(exc, limit=-2).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # capture_locals adds local variables in frames\n"
">>> TracebackException.from_exception(exc, limit=-2, capture_locals=True).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"    t = (\"bright\", \"side\", \"of\", \"life\")\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # The *chain* kwarg to print() controls whether chained\n"
">>> # exceptions are displayed\n"
">>> TracebackException.from_exception(chained_exc).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 4, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 7, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 11, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
"During handling of the above exception, another exception occurred:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero\n"
"\n"
">>> TracebackException.from_exception(chained_exc).print(chain=False)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero"
msgstr ""
">>> import sys\n"
">>> from traceback import TracebackException\n"
">>>\n"
">>> def lumberjack():\n"
"...     bright_side_of_life()\n"
"...\n"
">>> def bright_side_of_life():\n"
"...     t = \"bright\", \"side\", \"of\", \"life\"\n"
"...     return t[5]\n"
"...\n"
">>> try:\n"
"...     lumberjack()\n"
"... except IndexError as e:\n"
"...     exc = e\n"
"...\n"
">>> try:\n"
"...     try:\n"
"...         lumberjack()\n"
"...     except:\n"
"...         1/0\n"
"... except Exception as e:\n"
"...     chained_exc = e\n"
"...\n"
">>> # 限制使用模块级函数\n"
">>> TracebackException.from_exception(exc, limit=-2).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # capture_locals 添加帧中的局部变量\n"
">>> TracebackException.from_exception(exc, limit=-2, capture_locals=True).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"    t = (\"bright\", \"side\", \"of\", \"life\")\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # print() 的 *chain* 关键字参数控制是否要显示\n"
">>> # 串连的异常\n"
">>> TracebackException.from_exception(chained_exc).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 4, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 7, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 11, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
"During handling of the above exception, another exception occurred:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero\n"
"\n"
">>> TracebackException.from_exception(chained_exc).print(chain=False)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero"

#: ../../library/traceback.rst:21
msgid "object"
msgstr "object -- 对象"

#: ../../library/traceback.rst:21
msgid "traceback"
msgstr "traceback -- 回溯"

#: ../../library/traceback.rst:91
msgid "^ (caret)"
msgstr "^ (脱字号)"

#: ../../library/traceback.rst:91
msgid "marker"
msgstr "标记"
