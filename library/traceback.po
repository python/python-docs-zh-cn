# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/traceback.rst:2
msgid ":mod:`traceback` --- Print or retrieve a stack traceback"
msgstr ":mod:`traceback` —— 打印或读取栈回溯信息"

#: ../../library/traceback.rst:7
msgid "**Source code:** :source:`Lib/traceback.py`"
msgstr "**源代码：** :source:`Lib/traceback.py`"

#: ../../library/traceback.rst:11
msgid ""
"This module provides a standard interface to extract, format and print stack"
" traces of Python programs.  It exactly mimics the behavior of the Python "
"interpreter when it prints a stack trace.  This is useful when you want to "
"print stack traces under program control, such as in a \"wrapper\" around "
"the interpreter."
msgstr ""
"该模块提供了一个标准接口来提取、格式化和打印 Python 程序的栈跟踪结果。它完全模仿Python "
"解释器在打印栈跟踪结果时的行为。当您想要在程序控制下打印栈跟踪结果时，例如在“封装”解释器时，这是非常有用的。"

#: ../../library/traceback.rst:19
msgid ""
"The module uses traceback objects --- this is the object type that is stored"
" in the :data:`sys.last_traceback` variable and returned as the third item "
"from :func:`sys.exc_info`."
msgstr ""
"这个模块使用 traceback 对象 —— 这是存储在 :data:`sys.last_traceback` 中的对象类型变量，并作为 "
":func:`sys.exc_info` 的第三项被返回。"

#: ../../library/traceback.rst:26
msgid "Module :mod:`faulthandler`"
msgstr "模块 :mod:`faulthandler`"

#: ../../library/traceback.rst:26
msgid ""
"Used to dump Python tracebacks explicitly, on a fault, after a timeout, or "
"on a user signal."
msgstr "用于在发生错误、超时或用户信号时显式地转储 Python 回溯信息。"

#: ../../library/traceback.rst:28
msgid "Module :mod:`pdb`"
msgstr "模块 :mod:`pdb`"

#: ../../library/traceback.rst:29
msgid "Interactive source code debugger for Python programs."
msgstr "用于 Python 程序的交互式源代码调试器。"

#: ../../library/traceback.rst:31
msgid "The module defines the following functions:"
msgstr "这个模块定义了以下函数："

#: ../../library/traceback.rst:35
msgid ""
"Print up to *limit* stack trace entries from traceback object *tb* (starting"
" from the caller's frame) if *limit* is positive.  Otherwise, print the last"
" ``abs(limit)`` entries.  If *limit* is omitted or ``None``, all entries are"
" printed.  If *file* is omitted or ``None``, the output goes to "
"``sys.stderr``; otherwise it should be an open file or file-like object to "
"receive the output."
msgstr ""
"如果*limit*是正整数，那么从 traceback 对象 \"tb\" 输出最高 *limit* 个（从调用函数开始的）栈的堆栈回溯‎条目‎；如果 "
"*limit* 是负数就输出 ``abs(limit)`` 个回溯条目；又如果 *limit* 被省略或者为 ``None`` "
"，那么就会输出所有回溯条目。如果 *file* 被省略或为 ``None`` 那么就会输出至标准输出 ``sys.stderr`` "
"否则它应该是一个打开的文件或者文件类对象来接收输出"

#: ../../library/traceback.rst:42 ../../library/traceback.rst:105
msgid "Added negative *limit* support."
msgstr "添加了对负数值 *limit* 的支持"

#: ../../library/traceback.rst:49
msgid ""
"Print exception information and stack trace entries from traceback object "
"*tb* to *file*. This differs from :func:`print_tb` in the following ways:"
msgstr "打印回溯对象 *tb* 到 *file* 的异常信息和整个堆栈回溯。这和 :func:`print_tb` 比有以下方面不同："

#: ../../library/traceback.rst:53
msgid ""
"if *tb* is not ``None``, it prints a header ``Traceback (most recent call "
"last):``"
msgstr "如果 *tb* 不为 ``None``，它将打印头部 ``Traceback (most recent call last):``"

#: ../../library/traceback.rst:56
msgid "it prints the exception type and *value* after the stack trace"
msgstr "它将在栈回溯之后打印异常类型和 *value*"

#: ../../library/traceback.rst:60
msgid ""
"if *type(value)* is :exc:`SyntaxError` and *value* has the appropriate "
"format, it prints the line where the syntax error occurred with a caret "
"indicating the approximate position of the error."
msgstr ""
"如果 *type(value)* 为 :exc:`SyntaxError` 且 *value* "
"具有适当的格式，它会打印发生语法错误的行并用一个圆点来指明错误的大致位置。"

#: ../../library/traceback.rst:64
msgid ""
"Since Python 3.10, instead of passing *value* and *tb*, an exception object "
"can be passed as the first argument. If *value* and *tb* are provided, the "
"first argument is ignored in order to provide backwards compatibility."
msgstr ""
"从 Python 3.10 开始，可以不再传递 *value* 和 *tb*，而是传递一个异常对象作为第一个参数。 如果提供了 *value* 和 "
"*tb*，则第一个参数会被忽略以便提供向下兼容性。"

#: ../../library/traceback.rst:68
msgid ""
"The optional *limit* argument has the same meaning as for :func:`print_tb`. "
"If *chain* is true (the default), then chained exceptions (the "
":attr:`__cause__` or :attr:`__context__` attributes of the exception) will "
"be printed as well, like the interpreter itself does when printing an "
"unhandled exception."
msgstr ""
"可选的 *limit* 参数具有与 :func:`print_tb` 的相同含义。 如果 *chain* 为真值（默认），则链式异常（异常的 "
":attr:`__cause__` 或 :attr:`__context__` 属性）也将被打印出来，就像解释器本身在打印未处理的异常时一样。"

#: ../../library/traceback.rst:74 ../../library/traceback.rst:167
msgid "The *etype* argument is ignored and inferred from the type of *value*."
msgstr "*etype* 参数会被忽略并根据 *value* 推断出来。"

#: ../../library/traceback.rst:77 ../../library/traceback.rst:154
msgid ""
"The *etype* parameter has been renamed to *exc* and is now positional-only."
msgstr "*etype* 形参已被重命名为 *exc* 并且现在是仅限位置形参。"

#: ../../library/traceback.rst:84
msgid ""
"This is a shorthand for ``print_exception(*sys.exc_info(), limit, file, "
"chain)``."
msgstr "这是 ``print_exception(*sys.exc_info(), limit, file, chain)`` 的简写。"

#: ../../library/traceback.rst:90
msgid ""
"This is a shorthand for ``print_exception(sys.last_type, sys.last_value, "
"sys.last_traceback, limit, file, chain)``.  In general it will work only "
"after an exception has reached an interactive prompt (see "
":data:`sys.last_type`)."
msgstr ""
"这是 ``print_exception(sys.last_type, sys.last_value, sys.last_traceback, "
"limit, file, chain)`` 的简写。 通常它将只在异常到达交互提示之后才会起作用 (参见 :data:`sys.last_type`)。"

#: ../../library/traceback.rst:98
msgid ""
"Print up to *limit* stack trace entries (starting from the invocation point)"
" if *limit* is positive.  Otherwise, print the last ``abs(limit)`` entries."
"  If *limit* is omitted or ``None``, all entries are printed. The optional "
"*f* argument can be used to specify an alternate stack frame to start.  The "
"optional *file* argument has the same meaning as for :func:`print_tb`."
msgstr ""
"如果 *limit* 为正数则打印至多 *limit* 个栈回溯条目（从发起调用点开始）。 在其他情况下，则打印最后 ``abs(limit)`` "
"个条目。 如果 *limit* 被省略或为 ``None``，则会打印所有条目。 可选的 *f* 参数可被用来指明一个用于开始的替代栈。 可选的 "
"*file* 参数具有与 :func:`print_tb` 的相同含义。"

#: ../../library/traceback.rst:111
msgid ""
"Return a :class:`StackSummary` object representing a list of \"pre-"
"processed\" stack trace entries extracted from the traceback object *tb*.  "
"It is useful for alternate formatting of stack traces.  The optional *limit*"
" argument has the same meaning as for :func:`print_tb`.  A \"pre-processed\""
" stack trace entry is a :class:`FrameSummary` object containing attributes "
":attr:`~FrameSummary.filename`, :attr:`~FrameSummary.lineno`, "
":attr:`~FrameSummary.name`, and :attr:`~FrameSummary.line` representing the "
"information that is usually printed for a stack trace.  The "
":attr:`~FrameSummary.line` is a string with leading and trailing whitespace "
"stripped; if the source is not available it is ``None``."
msgstr ""
"返回一个 :class:`StackSummary` 对象来代表从回溯对象 *tb* 提取的 \"预处理\" 栈回溯条目列表。 "
"它适用于栈回溯的替代格式化。 可选的 *limit* 参数具有与 :func:`print_tb` 的相同含义。 \"预处理\" 栈回溯条目是一个 "
":class:`FrameSummary` 对象，其中包含代表通常为栈回溯打印的信息的 :attr:`~FrameSummary.filename`, "
":attr:`~FrameSummary.lineno`, :attr:`~FrameSummary.name` 和 "
":attr:`~FrameSummary.line` 等属性。 :attr:`~FrameSummary.line` "
"是一个去除了前导和末尾空白符的字符串；如果源代码不可用则它将为 ``None``。"

#: ../../library/traceback.rst:125
msgid ""
"Extract the raw traceback from the current stack frame.  The return value "
"has the same format as for :func:`extract_tb`.  The optional *f* and *limit*"
" arguments have the same meaning as for :func:`print_stack`."
msgstr ""
"从当前的栈帧提取原始回溯信息。 返回值具有与 :func:`extract_tb` 的相同格式。 可选的 *f* 和 *limit* 参数具有与 "
":func:`print_stack` 的相同含义。"

#: ../../library/traceback.rst:132
msgid ""
"Given a list of tuples or :class:`FrameSummary` objects as returned by "
":func:`extract_tb` or :func:`extract_stack`, return a list of strings ready "
"for printing.  Each string in the resulting list corresponds to the item "
"with the same index in the argument list.  Each string ends in a newline; "
"the strings may contain internal newlines as well, for those items whose "
"source text line is not ``None``."
msgstr ""
"给定一个由元组或如 :func:`extract_tb` 或 :func:`extract_stack` 所返回的 "
":class:`FrameSummary` 对象组成的列表，返回一个可打印的字符串列表。 结果列表中的每个字符串都对应于参数列表中具有相同索引号的条目。"
" 每个字符串以一个换行符结束；对于那些源文本行不为 ``None`` 的条目，字符串也可能包含内部换行符。"

#: ../../library/traceback.rst:142
msgid ""
"Format the exception part of a traceback using an exception value such as "
"given by ``sys.last_value``.  The return value is a list of strings, each "
"ending in a newline.  Normally, the list contains a single string; however, "
"for :exc:`SyntaxError` exceptions, it contains several lines that (when "
"printed) display detailed information about where the syntax error occurred."
" The message indicating which exception occurred is the always last string "
"in the list."
msgstr ""
"使用 ``sys.last_value``  等给出的异常值来格式化回溯中的异常部分。 返回值是一个字符串的列表，每个字符串都以换行符结束。 "
"通常，此列表只包含单个字符串；但是，对于 :exc:`SyntaxError` "
"异常，它将包含多行并且（当打印时）会显示有关语法错误在何处发生的详细信息。 指明发生了哪种异常的消息将总是该列表中的最后一个字符串。"

#: ../../library/traceback.rst:150
msgid ""
"Since Python 3.10, instead of passing *value*, an exception object can be "
"passed as the first argument.  If *value* is provided, the first argument is"
" ignored in order to provide backwards compatibility."
msgstr ""
"从 Python 3.10 开始，可以不传入 *value*，而是传入一个异常对象作为第一个参数。 如果提供了 "
"*value*，则第一个参数将被忽略以便提供向下兼容性。"

#: ../../library/traceback.rst:161
msgid ""
"Format a stack trace and the exception information.  The arguments  have the"
" same meaning as the corresponding arguments to :func:`print_exception`.  "
"The return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""
"格式化一个栈跟踪和异常信息。 参数的含义与传给 :func:`print_exception` 的相应参数相同。 "
"返回值是一个字符串列表，每个字符串都以一个换行符结束且有些还包含内部换行符。 当这些行被拼接并打印时，打印的文本与 "
":func:`print_exception` 的完全相同。"

#: ../../library/traceback.rst:170
msgid ""
"This function's behavior and signature were modified to match "
":func:`print_exception`."
msgstr "此函数的行为和签名已被修改以与 :func:`print_exception` 相匹配。"

#: ../../library/traceback.rst:177
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr "这类似于 ``print_exc(limit)`` 但会返回一个字符串而不是打印到一个文件。"

#: ../../library/traceback.rst:183
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr "是 ``format_list(extract_tb(tb, limit))`` 的简写形式。"

#: ../../library/traceback.rst:188
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr "是 ``format_list(extract_stack(f, limit))`` 的简写形式。"

#: ../../library/traceback.rst:192
msgid ""
"Clears the local variables of all the stack frames in a traceback *tb* by "
"calling the :meth:`clear` method of each frame object."
msgstr "通过调用每个帧对象的 :meth:`clear` 方法来清除回溯 *tb* 中所有栈帧的局部变量。"

#: ../../library/traceback.rst:199
msgid ""
"Walk a stack following ``f.f_back`` from the given frame, yielding the frame"
" and line number for each frame. If *f* is ``None``, the current stack is "
"used. This helper is used with :meth:`StackSummary.extract`."
msgstr ""
"从给定的帧开始访问 ``f.f_back`` 之后的栈，产生每一帧的帧和行号。 如果 *f* 为 ``None``，则会使用当前栈。 这个辅助函数要与 "
":meth:`StackSummary.extract` 一起使用。"

#: ../../library/traceback.rst:207
msgid ""
"Walk a traceback following ``tb_next`` yielding the frame and line number "
"for each frame. This helper is used with :meth:`StackSummary.extract`."
msgstr ""
"访问 ``tb_next`` 之后的回溯并产生每一帧的帧和行号。 这个辅助函数要与 :meth:`StackSummary.extract` 一起使用。"

#: ../../library/traceback.rst:212
msgid "The module also defines the following classes:"
msgstr "此模块还定义了以下的类:"

#: ../../library/traceback.rst:215
msgid ":class:`TracebackException` Objects"
msgstr ":class:`TracebackException` 对象"

#: ../../library/traceback.rst:219
msgid ""
":class:`TracebackException` objects are created from actual exceptions to "
"capture data for later printing in a lightweight fashion."
msgstr ":class:`TracebackException` 对象基于实际的异常创建通过轻量的方式捕获数据以便随后打印。"

#: ../../library/traceback.rst:224 ../../library/traceback.rst:290
msgid ""
"Capture an exception for later rendering. *limit*, *lookup_lines* and "
"*capture_locals* are as for the :class:`StackSummary` class."
msgstr ""
"捕获一个异常以便随后渲染。 *limit*, *lookup_lines* 和 *capture_locals* 的含义与 "
":class:`StackSummary` 类的相同。"

#: ../../library/traceback.rst:227
msgid ""
"If *compact* is true, only data that is required by "
":class:`TracebackException`'s ``format`` method is saved in the class "
"attributes. In particular, the ``__context__`` field is calculated only if "
"``__cause__`` is ``None`` and ``__suppress_context__`` is false."
msgstr ""
"如果 *compact* 为真值，则只有 :class:`TracebackException` 的 ``format`` "
"方法所需要的数据会被保存在类属性中。 特别地，``__context__`` 字段只有在 ``__cause__`` 为 ``None`` 且 "
"``__suppress_context__`` 为假值时才会被计算。"

#: ../../library/traceback.rst:232 ../../library/traceback.rst:293
msgid ""
"Note that when locals are captured, they are also shown in the traceback."
msgstr "请注意当局部变量被捕获时，它们也会被显示在回溯中。"

#: ../../library/traceback.rst:236
msgid "A :class:`TracebackException` of the original ``__cause__``."
msgstr "原始 ``__cause__`` 的 :class:`TracebackException`。"

#: ../../library/traceback.rst:240
msgid "A :class:`TracebackException` of the original ``__context__``."
msgstr "原始 ``__context__`` 的 :class:`TracebackException`。"

#: ../../library/traceback.rst:244
msgid "The ``__suppress_context__`` value from the original exception."
msgstr "来自原始异常的 ``__suppress_context__``。"

#: ../../library/traceback.rst:248
msgid "A :class:`StackSummary` representing the traceback."
msgstr "代表回溯的 :class:`StackSummary`。"

#: ../../library/traceback.rst:252
msgid "The class of the original traceback."
msgstr "原始回溯的类。"

#: ../../library/traceback.rst:256
msgid "For syntax errors - the file name where the error occurred."
msgstr "针对语法错误 —— 错误发生所在的文件名。"

#: ../../library/traceback.rst:260
msgid "For syntax errors - the line number where the error occurred."
msgstr "针对语法错误 —— 错误发生所在的行号。"

#: ../../library/traceback.rst:264
msgid ""
"For syntax errors - the end line number where the error occurred. Can be "
"``None`` if not present."
msgstr "针对语法错误 —— 错误发生所在的末尾行号。 如不存在则可以为 ``None``。"

#: ../../library/traceback.rst:271
msgid "For syntax errors - the text where the error occurred."
msgstr "针对语法错误 —— 错误发生所在的文本。"

#: ../../library/traceback.rst:275
msgid "For syntax errors - the offset into the text where the error occurred."
msgstr "针对语法错误 —— 错误发生所在的文本内部的偏移量。"

#: ../../library/traceback.rst:279
msgid ""
"For syntax errors - the end offset into the text where the error occurred. "
"Can be ``None`` if not present."
msgstr "针对语法错误 —— 错误发生所在的文本末尾偏移量。 如不存在则可以为 ``None``。"

#: ../../library/traceback.rst:286
msgid "For syntax errors - the compiler error message."
msgstr "针对语法错误 —— 编译器错误消息。"

#: ../../library/traceback.rst:297
msgid "Format the exception."
msgstr "格式化异常。"

#: ../../library/traceback.rst:299
msgid ""
"If *chain* is not ``True``, ``__cause__`` and ``__context__`` will not be "
"formatted."
msgstr "如果 *chain* 不为 ``True``，则 ``__cause__`` 和 ``__context__`` 将不会被格式化。"

#: ../../library/traceback.rst:302
msgid ""
"The return value is a generator of strings, each ending in a newline and "
"some containing internal newlines. :func:`~traceback.print_exception` is a "
"wrapper around this method which just prints the lines to a file."
msgstr ""
"返回值是一个字符串的生成器，其中每个字符串都以换行符结束并且有些还会包含内部换行符。 "
":func:`~traceback.print_exception` 是此方法的一个包装器，它只是将这些行打印到一个文件。"

#: ../../library/traceback.rst:306 ../../library/traceback.rst:320
msgid ""
"The message indicating which exception occurred is always the last string in"
" the output."
msgstr "指明发生了哪种异常的消息总会是输出中的最后一个字符串。"

#: ../../library/traceback.rst:311
msgid "Format the exception part of the traceback."
msgstr "格式化回溯的异常部分。"

#: ../../library/traceback.rst:313
msgid "The return value is a generator of strings, each ending in a newline."
msgstr "返回值是一个字符串的生成器，每个字符串都以一个换行符结束。"

#: ../../library/traceback.rst:315
msgid ""
"Normally, the generator emits a single string; however, for "
":exc:`SyntaxError` exceptions, it emits several lines that (when printed) "
"display detailed information about where the syntax error occurred."
msgstr ""
"通常，生成器会发出单个字符串；不过，对于 :exc:`SyntaxError` 异常，它会发出（当打印时）显示有关语法错误发生在何处的详细信息的多个行。"

#: ../../library/traceback.rst:323
msgid "Added the *compact* parameter."
msgstr "增加了 *compact* 形参。"

#: ../../library/traceback.rst:328
msgid ":class:`StackSummary` Objects"
msgstr ":class:`StackSummary` 对象"

#: ../../library/traceback.rst:332
msgid ""
":class:`StackSummary` objects represent a call stack ready for formatting."
msgstr "代表一个可被格式化的调用栈的 :class:`StackSummary` 对象。"

#: ../../library/traceback.rst:338
msgid ""
"Construct a :class:`StackSummary` object from a frame generator (such as is "
"returned by :func:`~traceback.walk_stack` or :func:`~traceback.walk_tb`)."
msgstr ""
"构造一个来自帧生成器的 :class:`StackSummary` 对象（如 :func:`~traceback.walk_stack` 或 "
":func:`~traceback.walk_tb` 所返回的一样）。"

#: ../../library/traceback.rst:342
msgid ""
"If *limit* is supplied, only this many frames are taken from *frame_gen*. If"
" *lookup_lines* is ``False``, the returned :class:`FrameSummary` objects "
"will not have read their lines in yet, making the cost of creating the "
":class:`StackSummary` cheaper (which may be valuable if it may not actually "
"get formatted). If *capture_locals* is ``True`` the local variables in each "
":class:`FrameSummary` are captured as object representations."
msgstr ""
"如果提供了 *limit*，则只从 *frame_gen* 提取指定数量的帧。 如果 *lookup_lines* 为 ``False``，则返回的 "
":class:`FrameSummary` 对象将不会读入它们的行，这使得创建 :class:`StackSummary` "
"的开销更低（如果它不会被实际格式化这就会很有价值）。 如果 *capture_locals* 为 ``True`` 则每个 "
":class:`FrameSummary` 中的局部变量会被捕获为对象表示形式。"

#: ../../library/traceback.rst:352
msgid ""
"Construct a :class:`StackSummary` object from a supplied list of "
":class:`FrameSummary` objects or old-style list of tuples.  Each tuple "
"should be a 4-tuple with filename, lineno, name, line as the elements."
msgstr ""
"从所提供的 :class:`FrameSummary` 对象列表或旧式的元组列表构造一个 :class:`StackSummary` 对象。 "
"每个元组都应当是以文件、行号、名称和行为元素的 4 元组。"

#: ../../library/traceback.rst:358
msgid ""
"Returns a list of strings ready for printing.  Each string in the resulting "
"list corresponds to a single frame from the stack. Each string ends in a "
"newline; the strings may contain internal newlines as well, for those items "
"with source text lines."
msgstr ""
"返回一个可打印的字符串列表。 结果列表中的每个字符串各自对应来自于栈的单独帧。 "
"每个字符串都以一个换行符结束；对于带有源文本行的条目来说，字符串还可能包含内部换行符。"

#: ../../library/traceback.rst:363
msgid ""
"For long sequences of the same frame and line, the first few repetitions are"
" shown, followed by a summary line stating the exact number of further "
"repetitions."
msgstr "对于同一帧与行的长序列，将显示前几个重复项，后面跟一个指明之后的实际重复次数的摘要行。"

#: ../../library/traceback.rst:367
msgid "Long sequences of repeated frames are now abbreviated."
msgstr "重复帧的长序列现在将被缩减。"

#: ../../library/traceback.rst:372
msgid ":class:`FrameSummary` Objects"
msgstr ":class:`FrameSummary` 对象"

#: ../../library/traceback.rst:376
msgid ":class:`FrameSummary` objects represent a single frame in a traceback."
msgstr ":class:`FrameSummary` 对象代表回溯中的一个单独帧。"

#: ../../library/traceback.rst:380
msgid ""
"Represent a single frame in the traceback or stack that is being formatted "
"or printed. It may optionally have a stringified version of the frames "
"locals included in it. If *lookup_line* is ``False``, the source code is not"
" looked up until the :class:`FrameSummary` has the "
":attr:`~FrameSummary.line` attribute accessed (which also happens when "
"casting it to a tuple). :attr:`~FrameSummary.line` may be directly provided,"
" and will prevent line lookups happening at all. *locals* is an optional "
"local variable dictionary, and if supplied the variable representations are "
"stored in the summary for later display."
msgstr ""
"代表回溯或栈中被格式化或打印的一个单独帧。 它有时可能还带有包括在其中的帧局部变量的字符串化版本。 如果 *lookup_line* 为 "
"``False``，则不会查找源代码直到 :class:`FrameSummary` 已经访问了 :attr:`~FrameSummary.line` "
"属性（这还将发生在将其转换为元组时）。 :attr:`~FrameSummary.line` 可能会被直接提供，并将完全阻止行查找的发生。 "
"*locals* 是一个可选的局部变量字典，如果有提供的话这些变量的表示形式将被存储在摘要中以便随后显示。"

#: ../../library/traceback.rst:393
msgid "Traceback Examples"
msgstr "回溯示例"

#: ../../library/traceback.rst:395
msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but"
" less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the "
":mod:`code` module. ::"
msgstr ""
"这个简单示例是一个基本的读取-求值-打印循环，类似于（但实用性小于）标准 Python 交互式解释器循环。 对于解释器循环的更完整实现，请参阅 "
":mod:`code` 模块。 ::"

#: ../../library/traceback.rst:417
msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback:"
msgstr "下面的例子演示了打印和格式化异常与回溯的不同方式:"

#: ../../library/traceback.rst:452
msgid "The output for the example would look similar to this:"
msgstr "该示例的输出看起来像是这样的:"

#: ../../library/traceback.rst:494
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr "下面的例子演示了打印和格式化栈的不同方式::"

#: ../../library/traceback.rst:520
msgid "This last example demonstrates the final few formatting functions:"
msgstr "最后这个例子演示了最后几个格式化函数:"
