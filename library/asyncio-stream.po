# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams"
msgstr ""

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr ""

#: ../../library/asyncio-stream.rst:13
msgid ""
"Streams are high-level async/await-ready primitives to work with network "
"connections.  Streams allow sending and receiving data without using "
"callbacks or low-level protocols and transports."
msgstr ""

#: ../../library/asyncio-stream.rst:19
msgid ""
"Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""

#: ../../library/asyncio-stream.rst:42
msgid "See also the `Examples`_ section below."
msgstr ""

#: ../../library/asyncio-stream.rst:46
msgid "Stream Functions"
msgstr ""

#: ../../library/asyncio-stream.rst:47
msgid ""
"The following top-level asyncio functions can be used to create and work "
"with streams:"
msgstr ""

#: ../../library/asyncio-stream.rst:58
msgid ""
"Establish a network connection and return a pair of ``(reader, writer)`` "
"objects."
msgstr ""

#: ../../library/asyncio-stream.rst:61
msgid ""
"The returned *reader* and *writer* objects are instances of "
":class:`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

#: ../../library/asyncio-stream.rst:64 ../../library/asyncio-stream.rst:109
msgid ""
"*limit* determines the buffer size limit used by the returned "
":class:`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""

#: ../../library/asyncio-stream.rst:68
msgid ""
"The rest of the arguments are passed directly to "
":meth:`loop.create_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:73 ../../library/asyncio-stream.rst:147
msgid ""
"The *sock* argument transfers ownership of the socket to the "
":class:`StreamWriter` created. To close the socket, call its "
":meth:`~asyncio.StreamWriter.close` method."
msgstr ""

#: ../../library/asyncio-stream.rst:77
msgid "Added the *ssl_handshake_timeout* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:80
msgid "Added the *happy_eyeballs_delay* and *interleave* parameters."
msgstr ""

#: ../../library/asyncio-stream.rst:83 ../../library/asyncio-stream.rst:125
#: ../../library/asyncio-stream.rst:157 ../../library/asyncio-stream.rst:187
msgid "Removed the *loop* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:86 ../../library/asyncio-stream.rst:128
#: ../../library/asyncio-stream.rst:160 ../../library/asyncio-stream.rst:190
msgid "Added the *ssl_shutdown_timeout* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:98
msgid "Start a socket server."
msgstr ""

#: ../../library/asyncio-stream.rst:100
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a ``(reader, writer)`` pair as two "
"arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` "
"classes."
msgstr ""

#: ../../library/asyncio-stream.rst:105
msgid ""
"*client_connected_cb* can be a plain callable or a :ref:`coroutine function "
"<coroutine>`; if it is a coroutine function, it will be automatically "
"scheduled as a :class:`Task`."
msgstr ""

#: ../../library/asyncio-stream.rst:113
msgid ""
"The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr ""

#: ../../library/asyncio-stream.rst:118 ../../library/asyncio-stream.rst:177
msgid ""
"The *sock* argument transfers ownership of the socket to the server created."
" To close the socket, call the server's :meth:`~asyncio.Server.close` "
"method."
msgstr ""

#: ../../library/asyncio-stream.rst:122
msgid "Added the *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../../library/asyncio-stream.rst:133
msgid "Unix Sockets"
msgstr ""

#: ../../library/asyncio-stream.rst:138
msgid ""
"Establish a Unix socket connection and return a pair of ``(reader, "
"writer)``."
msgstr ""

#: ../../library/asyncio-stream.rst:141
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr ""

#: ../../library/asyncio-stream.rst:143
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:151 ../../library/asyncio-stream.rst:181
msgid ":ref:`Availability <availability>`: Unix."
msgstr ""

#: ../../library/asyncio-stream.rst:153
msgid ""
"Added the *ssl_handshake_timeout* parameter. The *path* parameter can now be"
" a :term:`path-like object`"
msgstr ""

#: ../../library/asyncio-stream.rst:169
msgid "Start a Unix socket server."
msgstr ""

#: ../../library/asyncio-stream.rst:171
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr ""

#: ../../library/asyncio-stream.rst:173
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr ""

#: ../../library/asyncio-stream.rst:183
msgid ""
"Added the *ssl_handshake_timeout* and *start_serving* parameters. The *path*"
" parameter can now be a :term:`path-like object`."
msgstr ""

#: ../../library/asyncio-stream.rst:195
msgid "StreamReader"
msgstr ""

#: ../../library/asyncio-stream.rst:199
msgid ""
"Represents a reader object that provides APIs to read data from the IO "
"stream. As an :term:`asynchronous iterable`, the object supports the "
":keyword:`async for` statement."
msgstr ""

#: ../../library/asyncio-stream.rst:203
msgid ""
"It is not recommended to instantiate *StreamReader* objects directly; use "
":func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../../library/asyncio-stream.rst:209
msgid "Acknowledge the EOF."
msgstr ""

#: ../../library/asyncio-stream.rst:213
msgid "Read up to *n* bytes from the stream."
msgstr ""

#: ../../library/asyncio-stream.rst:215
msgid ""
"If *n* is not provided or set to ``-1``, read until EOF, then return all "
"read :class:`bytes`. If EOF was received and the internal buffer is empty, "
"return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:220
msgid "If *n* is ``0``, return an empty ``bytes`` object immediately."
msgstr ""

#: ../../library/asyncio-stream.rst:222
msgid ""
"If *n* is positive, return at most *n* available ``bytes`` as soon as at "
"least 1 byte is available in the internal buffer. If EOF is received before "
"any byte is read, return an empty ``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:229
msgid "Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: ../../library/asyncio-stream.rst:232
msgid ""
"If EOF is received and ``\\n`` was not found, the method returns partially "
"read data."
msgstr ""

#: ../../library/asyncio-stream.rst:235
msgid ""
"If EOF is received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../../library/asyncio-stream.rst:240
msgid "Read exactly *n* bytes."
msgstr ""

#: ../../library/asyncio-stream.rst:242
msgid ""
"Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be "
"read.  Use the :attr:`IncompleteReadError.partial` attribute to get the "
"partially read data."
msgstr ""

#: ../../library/asyncio-stream.rst:248
msgid "Read data from the stream until *separator* is found."
msgstr ""

#: ../../library/asyncio-stream.rst:250
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""

#: ../../library/asyncio-stream.rst:254
msgid ""
"If the amount of data read exceeds the configured stream limit, a "
":exc:`LimitOverrunError` exception is raised, and the data is left in the "
"internal buffer and can be read again."
msgstr ""

#: ../../library/asyncio-stream.rst:258
msgid ""
"If EOF is reached before the complete separator is found, an "
":exc:`IncompleteReadError` exception is raised, and the internal buffer is "
"reset.  The :attr:`IncompleteReadError.partial` attribute may contain a "
"portion of the separator."
msgstr ""

#: ../../library/asyncio-stream.rst:267
msgid ""
"Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

#: ../../library/asyncio-stream.rst:272
msgid "StreamWriter"
msgstr ""

#: ../../library/asyncio-stream.rst:276
msgid ""
"Represents a writer object that provides APIs to write data to the IO "
"stream."
msgstr ""

#: ../../library/asyncio-stream.rst:279
msgid ""
"It is not recommended to instantiate *StreamWriter* objects directly; use "
":func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../../library/asyncio-stream.rst:285
msgid ""
"The method attempts to write the *data* to the underlying socket "
"immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""

#: ../../library/asyncio-stream.rst:289 ../../library/asyncio-stream.rst:301
msgid "The method should be used along with the ``drain()`` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:296
msgid ""
"The method writes a list (or any iterable) of bytes to the underlying socket"
" immediately. If that fails, the data is queued in an internal write buffer "
"until it can be sent."
msgstr ""

#: ../../library/asyncio-stream.rst:308
msgid "The method closes the stream and the underlying socket."
msgstr ""

#: ../../library/asyncio-stream.rst:310
msgid ""
"The method should be used, though not mandatory, along with the "
"``wait_closed()`` method::"
msgstr ""

#: ../../library/asyncio-stream.rst:318
msgid ""
"Return ``True`` if the underlying transport supports the :meth:`write_eof` "
"method, ``False`` otherwise."
msgstr ""

#: ../../library/asyncio-stream.rst:323
msgid ""
"Close the write end of the stream after the buffered write data is flushed."
msgstr ""

#: ../../library/asyncio-stream.rst:328
msgid "Return the underlying asyncio transport."
msgstr ""

#: ../../library/asyncio-stream.rst:332
msgid ""
"Access optional transport information; see "
":meth:`BaseTransport.get_extra_info` for details."
msgstr ""

#: ../../library/asyncio-stream.rst:337
msgid ""
"Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""

#: ../../library/asyncio-stream.rst:343
msgid ""
"This is a flow control method that interacts with the underlying IO write "
"buffer.  When the size of the buffer reaches the high watermark, *drain()* "
"blocks until the size of the buffer is drained down to the low watermark and"
" writing can be resumed.  When there is nothing to wait for, the "
":meth:`drain` returns immediately."
msgstr ""

#: ../../library/asyncio-stream.rst:353
msgid "Upgrade an existing stream-based connection to TLS."
msgstr ""

#: ../../library/asyncio-stream.rst:355
msgid "Parameters:"
msgstr ""

#: ../../library/asyncio-stream.rst:357
msgid "*sslcontext*: a configured instance of :class:`~ssl.SSLContext`."
msgstr ""

#: ../../library/asyncio-stream.rst:359
msgid ""
"*server_hostname*: sets or overrides the host name that the target server's "
"certificate will be matched against."
msgstr ""

#: ../../library/asyncio-stream.rst:362
msgid ""
"*ssl_handshake_timeout* is the time in seconds to wait for the TLS handshake"
" to complete before aborting the connection.  ``60.0`` seconds if ``None`` "
"(default)."
msgstr ""

#: ../../library/asyncio-stream.rst:370
msgid ""
"Return ``True`` if the stream is closed or in the process of being closed."
msgstr ""

#: ../../library/asyncio-stream.rst:377
msgid "Wait until the stream is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:379
msgid ""
"Should be called after :meth:`close` to wait until the underlying connection"
" is closed, ensuring that all data has been flushed before e.g. exiting the "
"program."
msgstr ""

#: ../../library/asyncio-stream.rst:387
msgid "Examples"
msgstr ""

#: ../../library/asyncio-stream.rst:392
msgid "TCP echo client using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:394
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:418
msgid ""
"The :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` example uses the low-level "
":meth:`loop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:425
msgid "TCP echo server using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:427
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:461
msgid ""
"The :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` example uses the "
":meth:`loop.create_server` method."
msgstr ""

#: ../../library/asyncio-stream.rst:466
msgid "Get HTTP headers"
msgstr ""

#: ../../library/asyncio-stream.rst:468
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

#: ../../library/asyncio-stream.rst:507
msgid "Usage::"
msgstr ""

#: ../../library/asyncio-stream.rst:511
msgid "or with HTTPS::"
msgstr ""

#: ../../library/asyncio-stream.rst:519
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: ../../library/asyncio-stream.rst:521
msgid ""
"Coroutine waiting until a socket receives data using the "
":func:`open_connection` function::"
msgstr ""

#: ../../library/asyncio-stream.rst:556
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio_example_create_connection>` example uses a low-level protocol and "
"the :meth:`loop.create_connection` method."
msgstr ""

#: ../../library/asyncio-stream.rst:560
msgid ""
"The :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` example uses the low-level "
":meth:`loop.add_reader` method to watch a file descriptor."
msgstr ""
