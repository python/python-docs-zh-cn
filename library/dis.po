# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dis.rst:2
msgid ":mod:`!dis` --- Disassembler for Python bytecode"
msgstr ":mod:`!dis` --- Python 字节码反汇编器"

#: ../../library/dis.rst:7
msgid "**Source code:** :source:`Lib/dis.py`"
msgstr "**源代码:** :source:`Lib/dis.py`"

#: ../../library/dis.rst:17
msgid ""
"The :mod:`dis` module supports the analysis of CPython :term:`bytecode` by "
"disassembling it. The CPython bytecode which this module takes as an input "
"is defined in the file :file:`Include/opcode.h` and used by the compiler and"
" the interpreter."
msgstr ""
":mod:`dis` 模块通过反汇编支持CPython的 :term:`bytecode` 分析。该模块作为输入的 CPython 字节码在文件 "
":file:`Include/opcode.h` 中定义，并由编译器和解释器使用。"

#: ../../library/dis.rst:24
msgid ""
"Bytecode is an implementation detail of the CPython interpreter.  No "
"guarantees are made that bytecode will not be added, removed, or changed "
"between versions of Python.  Use of this module should not be considered to "
"work across Python VMs or Python releases."
msgstr ""
"字节码是 CPython 解释器的实现细节。不保证不会在Python版本之间添加、删除或更改字节码。不应考虑将此模块的跨 Python VM 或 "
"Python 版本的使用。"

#: ../../library/dis.rst:29
msgid ""
"Use 2 bytes for each instruction. Previously the number of bytes varied by "
"instruction."
msgstr "每条指令使用2个字节。以前字节数因指令而异。"

#: ../../library/dis.rst:33
msgid ""
"The argument of jump, exception handling and loop instructions is now the "
"instruction offset rather than the byte offset."
msgstr "跳转、异常处理和循环指令的参数现在将为指令偏移量而不是字节偏移量。"

#: ../../library/dis.rst:37
msgid ""
"Some instructions are accompanied by one or more inline cache entries, which"
" take the form of :opcode:`CACHE` instructions. These instructions are "
"hidden by default, but can be shown by passing ``show_caches=True`` to any "
":mod:`dis` utility. Furthermore, the interpreter now adapts the bytecode to "
"specialize it for different runtime conditions. The adaptive bytecode can be"
" shown by passing ``adaptive=True``."
msgstr ""
"有些指令带有一个或多个内联缓存条目，它们是采用 :opcode:`CACHE` 指令的形式。 这些指令默认是隐藏的，但可以通过将 "
"``show_caches=True`` 传给任何 :mod:`dis` 工具对象来显示。 "
"此外，解释器现在会适配字节码以使其能针对不同的运行时条件实现专门化。 适配的字节码可通过传入 ``adaptive=True`` 来显示。"

#: ../../library/dis.rst:45
msgid ""
"The argument of a jump is the offset of the target instruction relative to "
"the instruction that appears immediately after the jump instruction's "
":opcode:`CACHE` entries."
msgstr "跳转的参数是目标指令相对于紧接在跳转指令的 :opcode:`CACHE` 条目之后的指令的偏移量。"

#: ../../library/dis.rst:50
msgid ""
"As a consequence, the presence of the :opcode:`CACHE` instructions is "
"transparent for forward jumps but needs to be taken into account when "
"reasoning about backward jumps."
msgstr "因此，:opcode:`CACHE` 指令的存在对前向跳转是透明的但在处理后向跳转时则需要将其纳入考虑。"

#: ../../library/dis.rst:54
msgid ""
"The output shows logical labels rather than instruction offsets for jump "
"targets and exception handlers. The ``-O`` command line option and the "
"``show_offsets`` argument were added."
msgstr "对于跳转目标和异常处理器输出将显示逻辑标签而不是指令偏移量。 增加了 ``-O`` 命令行选项和 ``show_offsets`` 参数。"

#: ../../library/dis.rst:59
msgid ""
"The :option:`-P <dis --show-positions>` command-line option and the "
"``show_positions`` argument were added."
msgstr "增加了 :option:`-P <dis --show-positions>` 命令行选项和 ``show_positions`` 参数。"

#: ../../library/dis.rst:63
msgid "The :option:`-S <dis --specialized>` command-line option is added."
msgstr "增加了 :option:`-S <dis --specialized>` 命令行选项。"

#: ../../library/dis.rst:65
msgid "Example: Given the function :func:`!myfunc`::"
msgstr "示例：给定函数 :func:`!myfunc`::"

#: ../../library/dis.rst:67
msgid ""
"def myfunc(alist):\n"
"    return len(alist)"
msgstr ""
"def myfunc(alist):\n"
"    return len(alist)"

#: ../../library/dis.rst:70
msgid ""
"the following command can be used to display the disassembly of "
":func:`!myfunc`:"
msgstr "可以使用以下命令显示 :func:`!myfunc` 的反汇编："

#: ../../library/dis.rst:73
msgid ""
">>> dis.dis(myfunc)\n"
"  2           RESUME                   0\n"
"\n"
"  3           LOAD_GLOBAL              1 (len + NULL)\n"
"              LOAD_FAST_BORROW         0 (alist)\n"
"              CALL                     1\n"
"              RETURN_VALUE"
msgstr ""
">>> dis.dis(myfunc)\n"
"  2           RESUME                   0\n"
"\n"
"  3           LOAD_GLOBAL              1 (len + NULL)\n"
"              LOAD_FAST_BORROW         0 (alist)\n"
"              CALL                     1\n"
"              RETURN_VALUE"

#: ../../library/dis.rst:83
msgid "(The \"2\" is a line number)."
msgstr "(\"2\" 是行号)。"

#: ../../library/dis.rst:88
msgid "Command-line interface"
msgstr "命令行接口"

#: ../../library/dis.rst:90
msgid ""
"The :mod:`dis` module can be invoked as a script from the command line:"
msgstr ":mod:`dis` 模块可以在命令行下作为一个脚本来唤起："

#: ../../library/dis.rst:92
msgid "python -m dis [-h] [-C] [-O] [-P] [-S] [infile]"
msgstr "python -m dis [-h] [-C] [-O] [-P] [-S] [infile]"

#: ../../library/dis.rst:96
msgid "The following options are accepted:"
msgstr "可以接受以下选项："

#: ../../library/dis.rst:102
msgid "Display usage and exit."
msgstr "显示用法并退出。"

#: ../../library/dis.rst:106
msgid "Show inline caches."
msgstr "显示内联缓存。"

#: ../../library/dis.rst:112
msgid "Show offsets of instructions."
msgstr "显示指令偏移量。"

#: ../../library/dis.rst:118
msgid "Show positions of instructions in the source code."
msgstr "在源代码中显示指令的位置。"

#: ../../library/dis.rst:124
msgid "Show specialized bytecode."
msgstr "显示专门化的字节码。"

#: ../../library/dis.rst:128
msgid ""
"If :file:`infile` is specified, its disassembled code will be written to "
"stdout. Otherwise, disassembly is performed on compiled source code received"
" from stdin."
msgstr "如果指定了 :file:`infile`，其反汇编代码将被写入到标准输出。 在其他情况下，反汇编将在从标准输入接收的已编译源代码上进行。"

#: ../../library/dis.rst:132
msgid "Bytecode analysis"
msgstr "字节码分析"

#: ../../library/dis.rst:136
msgid ""
"The bytecode analysis API allows pieces of Python code to be wrapped in a "
":class:`Bytecode` object that provides easy access to details of the "
"compiled code."
msgstr "字节码分析 API 允许将 Python 代码片段包装在 :class:`Bytecode` 对象中，以便轻松访问已编译代码的详细信息。"

#: ../../library/dis.rst:144
msgid ""
"Analyse the bytecode corresponding to a function, generator, asynchronous "
"generator, coroutine, method, string of source code, or a code object (as "
"returned by :func:`compile`)."
msgstr "分析的字节码对应于函数、生成器、异步生成器、协程、方法、源代码字符串或代码对象（由 :func:`compile` 返回）。"

#: ../../library/dis.rst:148
msgid ""
"This is a convenience wrapper around many of the functions listed below, "
"most notably :func:`get_instructions`, as iterating over a :class:`Bytecode`"
" instance yields the bytecode operations as :class:`Instruction` instances."
msgstr ""
"这是下面列出的许多函数的便利包装，最值得注意的是 :func:`get_instructions` ，迭代于 :class:`Bytecode` "
"的实例产生字节码操作 :class:`Instruction` 的实例。"

#: ../../library/dis.rst:152 ../../library/dis.rst:373
msgid ""
"If *first_line* is not ``None``, it indicates the line number that should be"
" reported for the first source line in the disassembled code.  Otherwise, "
"the source line information (if any) is taken directly from the disassembled"
" code object."
msgstr ""
"如果 *first_line* 不是 ``None`` "
"，则表示应该为反汇编代码中的第一个源代码行报告的行号。否则，源行信息（如果有的话）直接来自反汇编的代码对象。"

#: ../../library/dis.rst:157
msgid ""
"If *current_offset* is not ``None``, it refers to an instruction offset in "
"the disassembled code. Setting this means :meth:`.dis` will display a "
"\"current instruction\" marker against the specified opcode."
msgstr ""
"如果 *current_offset* 不是 ``None`` ，它指的就是汇编代码中的指令偏移量。设置它意味着 :meth:`.dis` "
"将针对指定的操作码显示“当前指令”标记。"

#: ../../library/dis.rst:161
msgid ""
"If *show_caches* is ``True``, :meth:`.dis` will display inline cache entries"
" used by the interpreter to specialize the bytecode."
msgstr "如果 *show_caches* 为 ``True``，:meth:`.dis` 将显示解释器用来专门化字节码的内联缓存条目。"

#: ../../library/dis.rst:164
msgid ""
"If *adaptive* is ``True``, :meth:`.dis` will display specialized bytecode "
"that may be different from the original bytecode."
msgstr "如果 *adaptive* 为 ``True``，:meth:`.dis` 将显示可能不同于原始字节码的专门化字节码。"

#: ../../library/dis.rst:167
msgid ""
"If *show_offsets* is ``True``, :meth:`.dis` will include instruction offsets"
" in the output."
msgstr "若 *show_offsets* 是 ``True``，:meth:`.dis` 的输出将会显示指令偏移量。"

#: ../../library/dis.rst:170
msgid ""
"If *show_positions* is ``True``, :meth:`.dis` will include instruction "
"source code positions in the output."
msgstr "如果 *show_positions* 为 ``True``，:meth:`.dis` 将在输出中包括指令源代码位置。"

#: ../../library/dis.rst:175
msgid ""
"Construct a :class:`Bytecode` instance from the given traceback, setting "
"*current_offset* to the instruction responsible for the exception."
msgstr "从给定回溯构造一个 :class:`Bytecode` 实例，将设置 *current_offset* 为异常负责的指令。"

#: ../../library/dis.rst:180
msgid "The compiled code object."
msgstr "已编译的代码对象。"

#: ../../library/dis.rst:184
msgid "The first source line of the code object (if available)"
msgstr "代码对象的第一个源代码行（如果可用）"

#: ../../library/dis.rst:188
msgid ""
"Return a formatted view of the bytecode operations (the same as printed by "
":func:`dis.dis`, but returned as a multi-line string)."
msgstr "返回字节码操作的格式化视图（与 :func:`dis.dis` 打印相同，但作为多行字符串返回）。"

#: ../../library/dis.rst:193
msgid ""
"Return a formatted multi-line string with detailed information about the "
"code object, like :func:`code_info`."
msgstr "返回带有关于代码对象的详细信息的格式化多行字符串，如 :func:`code_info` 。"

#: ../../library/dis.rst:196 ../../library/dis.rst:242
#: ../../library/dis.rst:295
msgid "This can now handle coroutine and asynchronous generator objects."
msgstr "现在可以处理协程和异步生成器对象。"

#: ../../library/dis.rst:199 ../../library/dis.rst:298
#: ../../library/dis.rst:320 ../../library/dis.rst:356
#: ../../library/dis.rst:382
msgid "Added the *show_caches* and *adaptive* parameters."
msgstr "增加了 *show_caches* 和 *adaptive* 形参。"

#: ../../library/dis.rst:202
msgid "Added the *show_offsets* parameter"
msgstr "增加了 *show_offsets* 形参"

#: ../../library/dis.rst:205 ../../library/dis.rst:304
#: ../../library/dis.rst:326 ../../library/dis.rst:362
msgid "Added the *show_positions* parameter."
msgstr "增加了 *show_positions* 形参。"

#: ../../library/dis.rst:208
msgid "Example:"
msgstr "示例:"

#: ../../library/dis.rst:210
msgid ""
">>> bytecode = dis.Bytecode(myfunc)\n"
">>> for instr in bytecode:\n"
"...     print(instr.opname)\n"
"...\n"
"RESUME\n"
"LOAD_GLOBAL\n"
"LOAD_FAST_BORROW\n"
"CALL\n"
"RETURN_VALUE"
msgstr ""
">>> bytecode = dis.Bytecode(myfunc)\n"
">>> for instr in bytecode:\n"
"...     print(instr.opname)\n"
"...\n"
"RESUME\n"
"LOAD_GLOBAL\n"
"LOAD_FAST_BORROW\n"
"CALL\n"
"RETURN_VALUE"

#: ../../library/dis.rst:224
msgid "Analysis functions"
msgstr "分析函数"

#: ../../library/dis.rst:226
msgid ""
"The :mod:`dis` module also defines the following analysis functions that "
"convert the input directly to the desired output. They can be useful if only"
" a single operation is being performed, so the intermediate analysis object "
"isn't useful:"
msgstr ":mod:`dis` 模块还定义了以下分析函数，它们将输入直接转换为所需的输出。如果只执行单个操作，它们可能很有用，因此中间分析对象没用："

#: ../../library/dis.rst:232
msgid ""
"Return a formatted multi-line string with detailed code object information "
"for the supplied function, generator, asynchronous generator, coroutine, "
"method, source code string or code object."
msgstr "返回格式化的多行字符串，其包含详细代码对象信息的用于被提供的函数、生成器、异步生成器、协程、方法、源代码字符串或代码对象。"

#: ../../library/dis.rst:236
msgid ""
"Note that the exact contents of code info strings are highly implementation "
"dependent and they may change arbitrarily across Python VMs or Python "
"releases."
msgstr "请注意，代码信息字符串的确切内容是高度依赖于实现的，它们可能会在Python VM或Python版本中任意更改。"

#: ../../library/dis.rst:248
msgid ""
"Print detailed code object information for the supplied function, method, "
"source code string or code object to *file* (or ``sys.stdout`` if *file* is "
"not specified)."
msgstr ""
"将提供的函数、方法。源代码字符串或代码对象的详细代码对象信息打印到 *file* （如果未指定 *file* ，则为 ``sys.stdout`` ）。"

#: ../../library/dis.rst:252
msgid ""
"This is a convenient shorthand for ``print(code_info(x), file=file)``, "
"intended for interactive exploration at the interpreter prompt."
msgstr "这是 ``print(code_info(x), file=file)`` 的便捷简写，用于在解释器提示符下进行交互式探索。"

#: ../../library/dis.rst:257 ../../library/dis.rst:289
#: ../../library/dis.rst:317 ../../library/dis.rst:353
msgid "Added *file* parameter."
msgstr "添加 *file* 形参。"

#: ../../library/dis.rst:264
msgid ""
"Disassemble the *x* object.  *x* can denote either a module, a class, a "
"method, a function, a generator, an asynchronous generator, a coroutine, a "
"code object, a string of source code or a byte sequence of raw bytecode. For"
" a module, it disassembles all functions. For a class, it disassembles all "
"methods (including class and static methods). For a code object or sequence "
"of raw bytecode, it prints one line per bytecode instruction. It also "
"recursively disassembles nested code objects. These can include generator "
"expressions, nested functions, the bodies of nested classes, and the code "
"objects used for :ref:`annotation scopes <annotation-scopes>`. Strings are "
"first compiled to code objects with the :func:`compile` built-in function "
"before being disassembled.  If no object is provided, this function "
"disassembles the last traceback."
msgstr ""
"反汇编 *x* 对象。  *x* 可以表示模块、类、方法、函数、生成器、异步生成器、协程、代码对象、源代码字符串或原始字节码的字节序列。 "
"对于模块，它会反汇编所有函数。 对于一个类，它会反汇编所有方法（包括类方法和静态方法）。 对于代码对象或原始字节码序列，它会为每条字节码指令打印一行。 "
"它还会递归地反汇编嵌套代码对象。 这些对象包括生成器表达式、嵌套函数、嵌套类的语句体以及用于 :ref:`标注作用域 <annotation-"
"scopes>` 的代码对象。 在反汇编之前，首先使用 :func:`compile` 内置函数将字符串编译为代码对象。 "
"如果未提供任何对象，则该函数将反汇编最后一次回溯。"

#: ../../library/dis.rst:277 ../../library/dis.rst:314
#: ../../library/dis.rst:350
msgid ""
"The disassembly is written as text to the supplied *file* argument if "
"provided and to ``sys.stdout`` otherwise."
msgstr "如果提供的话，反汇编将作为文本写入提供的 *file* 参数，否则写入 ``sys.stdout`` 。"

#: ../../library/dis.rst:280
msgid ""
"The maximal depth of recursion is limited by *depth* unless it is ``None``. "
"``depth=0`` means no recursion."
msgstr "递归的最大深度受 *depth* 限制，除非它是 ``None`` 。 ``depth=0`` 表示没有递归。"

#: ../../library/dis.rst:283
msgid ""
"If *show_caches* is ``True``, this function will display inline cache "
"entries used by the interpreter to specialize the bytecode."
msgstr "如果 *show_caches* 为 ``True``，此函数将显示解释器用来专门化字节码的内联缓存条目。"

#: ../../library/dis.rst:286
msgid ""
"If *adaptive* is ``True``, this function will display specialized bytecode "
"that may be different from the original bytecode."
msgstr "如果 *adaptive* 为 ``True``，此函数将显示可能不同于原始字节码的专门化字节码。"

#: ../../library/dis.rst:292
msgid "Implemented recursive disassembling and added *depth* parameter."
msgstr "实现了递归反汇编并添加了 *depth* 参数。"

#: ../../library/dis.rst:301 ../../library/dis.rst:323
#: ../../library/dis.rst:359
msgid "Added the *show_offsets* parameter."
msgstr "添加了*show_offsets*参数。"

#: ../../library/dis.rst:310
msgid ""
"Disassemble the top-of-stack function of a traceback, using the last "
"traceback if none was passed.  The instruction causing the exception is "
"indicated."
msgstr "如果没有传递，则使用最后一个回溯来反汇编回溯的堆栈顶部函数。 指示了导致异常的指令。"

#: ../../library/dis.rst:334
msgid ""
"Disassemble a code object, indicating the last instruction if *lasti* was "
"provided.  The output is divided in the following columns:"
msgstr "反汇编代码对象，如果提供了 *lasti* ，则指示最后一条指令。输出分为以下几列："

#: ../../library/dis.rst:337
msgid ""
"the source code location of the instruction. Complete location information "
"is shown if *show_positions* is true. Otherwise (the default) only the line "
"number is displayed."
msgstr "该指令的源代码位置。 如果 *show_positions* 为真值则会显示完整位置信息。 否则（默认）只显示行号。"

#: ../../library/dis.rst:340
msgid "the current instruction, indicated as ``-->``,"
msgstr "当前指令，表示为 ``-->`` ，"

#: ../../library/dis.rst:341
msgid "a labelled instruction, indicated with ``>>``,"
msgstr "一个标记的指令，用 ``>>`` 表示，"

#: ../../library/dis.rst:342
msgid "the address of the instruction,"
msgstr "指令的地址，"

#: ../../library/dis.rst:343
msgid "the operation code name,"
msgstr "操作码名称，"

#: ../../library/dis.rst:344
msgid "operation parameters, and"
msgstr "操作参数，和"

#: ../../library/dis.rst:345
msgid "interpretation of the parameters in parentheses."
msgstr "括号中参数的解释。"

#: ../../library/dis.rst:347
msgid ""
"The parameter interpretation recognizes local and global variable names, "
"constant values, branch targets, and compare operators."
msgstr "参数解释识别本地和全局变量名称、常量值、分支目标和比较运算符。"

#: ../../library/dis.rst:367
msgid ""
"Return an iterator over the instructions in the supplied function, method, "
"source code string or code object."
msgstr "在所提供的函数、方法、源代码字符串或代码对象中的指令上返回一个迭代器。"

#: ../../library/dis.rst:370
msgid ""
"The iterator generates a series of :class:`Instruction` named tuples giving "
"the details of each operation in the supplied code."
msgstr "迭代器生成一系列 :class:`Instruction` ，命名为元组，提供所提供代码中每个操作的详细信息。"

#: ../../library/dis.rst:378
msgid "The *adaptive* parameter works as it does in :func:`dis`."
msgstr "参数 *adaptive* 和其在 :func:`dis` 中的工作方式一样。"

#: ../../library/dis.rst:385
msgid ""
"The *show_caches* parameter is deprecated and has no effect. The iterator "
"generates the :class:`Instruction` instances with the *cache_info* field "
"populated (regardless of the value of *show_caches*) and it no longer "
"generates separate items for the cache entries."
msgstr ""
"*show_caches* 参数被弃用并且失效。 迭代器保证 :class:`Instruction` 实例一定有 *cache_info* 字段（无论"
" *show_caches* 传入什么），不再生成单独的缓存项。"

#: ../../library/dis.rst:393
msgid ""
"This generator function uses the :meth:`~codeobject.co_lines` method of the "
":ref:`code object <code-objects>` *code* to find the offsets which are "
"starts of lines in the source code.  They are generated as ``(offset, "
"lineno)`` pairs."
msgstr ""
"这个生成器函数使用 :ref:`代码对象 <code-objects>` *code* 的 :meth:`~codeobject.co_lines` "
"方法来查找源代码中行开头的偏移量。 它们将作为 ``(offset, lineno)`` 对被生成。"

#: ../../library/dis.rst:398
msgid "Line numbers can be decreasing. Before, they were always increasing."
msgstr "行号可能会减少。 以前，他们总是在增加。"

#: ../../library/dis.rst:401
msgid ""
"The :pep:`626` :meth:`~codeobject.co_lines` method is used instead of the "
":attr:`~codeobject.co_firstlineno` and :attr:`~codeobject.co_lnotab` "
"attributes of the :ref:`code object <code-objects>`."
msgstr ""
"使用 :pep:`626` :meth:`~codeobject.co_lines` 方法而不是 :ref:`代码对象 <code-objects>` "
"的 :attr:`~codeobject.co_firstlineno` 和 :attr:`~codeobject.co_lnotab` 属性。"

#: ../../library/dis.rst:406
msgid ""
"Line numbers can be ``None`` for bytecode that does not map to source lines."
msgstr "若字节码不对应任何一行，行号可以是 ``None``。"

#: ../../library/dis.rst:412
msgid ""
"Detect all offsets in the raw compiled bytecode string *code* which are jump"
" targets, and return a list of these offsets."
msgstr "检测作为跳转目标的原始编译后字节码字符串 *code* 中的所有偏移量，并返回这些偏移量的列表。"

#: ../../library/dis.rst:418
msgid "Compute the stack effect of *opcode* with argument *oparg*."
msgstr "使用参数 *oparg* 计算 *opcode* 的堆栈效果。"

#: ../../library/dis.rst:420
msgid ""
"If the code has a jump target and *jump* is ``True``, :func:`~stack_effect` "
"will return the stack effect of jumping.  If *jump* is ``False``, it will "
"return the stack effect of not jumping. And if *jump* is ``None`` (default),"
" it will return the maximal stack effect of both cases."
msgstr ""
"如果代码有一个跳转目标并且 *jump* 是 ``True`` ，则 :func:`~drag_effect` 将返回跳转的堆栈效果。如果 *jump*"
" 是 ``False`` ，它将返回不跳跃的堆栈效果。如果 *jump* 是 ``None`` （默认值），它将返回两种情况的最大堆栈效果。"

#: ../../library/dis.rst:427
msgid "Added *jump* parameter."
msgstr "添加 *jump* 参数。"

#: ../../library/dis.rst:430
msgid ""
"If ``oparg`` is omitted (or ``None``), the stack effect is now returned for "
"``oparg=0``. Previously this was an error for opcodes that use their arg. It"
" is also no longer an error to pass an integer ``oparg`` when the ``opcode``"
" does not use it; the ``oparg`` in this case is ignored."
msgstr ""
"如果 ``oparg`` 被省略 (或为 ``None``)，过去如果字节码使用参数，此时会抛出错误，而现在会返回 ``oparg=0`` 时的结果 "
"。当 ``opcode`` 不使用整数 ``oparg`` 时，传入的 ``oparg`` 将被忽略，不会抛出错误。"

#: ../../library/dis.rst:440
msgid "Python Bytecode Instructions"
msgstr "Python字节码说明"

#: ../../library/dis.rst:442
msgid ""
"The :func:`get_instructions` function and :class:`Bytecode` class provide "
"details of bytecode instructions as :class:`Instruction` instances:"
msgstr ""
":func:`get_instructions` 函数和 :class:`Bytecode` 类提供字节码指令的详细信息的 "
":class:`Instruction` 实例："

#: ../../library/dis.rst:447
msgid "Details for a bytecode operation"
msgstr "字节码操作的详细信息"

#: ../../library/dis.rst:451
msgid ""
"numeric code for operation, corresponding to the opcode values listed below "
"and the bytecode values in the :ref:`opcode_collections`."
msgstr "操作的数字代码，对应于下面列出的操作码值和 :ref:`opcode_collections` 中的字节码值。"

#: ../../library/dis.rst:457
msgid "human readable name for operation"
msgstr "人类可读的操作名称"

#: ../../library/dis.rst:462
msgid ""
"numeric code for the base operation if operation is specialized; otherwise "
"equal to :data:`opcode`"
msgstr "如果操作是专用的则为基本操作的数字码；否则等于 :data:`opcode`"

#: ../../library/dis.rst:468
msgid ""
"human readable name for the base operation if operation is specialized; "
"otherwise equal to :data:`opname`"
msgstr "如果操作是专用的则为基本操作的人类易读的名称；否则等于 :data:`opname`"

#: ../../library/dis.rst:474
msgid "numeric argument to operation (if any), otherwise ``None``"
msgstr "操作的数字参数（如果有的话），否则为 ``None``"

#: ../../library/dis.rst:478
msgid "alias for :data:`arg`"
msgstr ":data:`arg` 的别名"

#: ../../library/dis.rst:482
msgid "resolved arg value (if any), otherwise ``None``"
msgstr "已解析的 arg 值（如果有的话），否则为 ``None``"

#: ../../library/dis.rst:487
msgid ""
"human readable description of operation argument (if any), otherwise an "
"empty string."
msgstr "人类可读的操作参数（如果存在）的描述，否则为空字符串。"

#: ../../library/dis.rst:493
msgid "start index of operation within bytecode sequence"
msgstr "在字节码序列中的起始操作索引"

#: ../../library/dis.rst:498
msgid ""
"start index of operation within bytecode sequence, including prefixed "
"``EXTENDED_ARG`` operations if present; otherwise equal to :data:`offset`"
msgstr "在字节码序列中的起始索引，包括前面的 ``EXTENDED_ARG`` 操作（如有），否则和 :data:`offset` 相等。"

#: ../../library/dis.rst:504
msgid "start index of the cache entries following the operation"
msgstr "在操作后面的缓存条目的起始索引"

#: ../../library/dis.rst:509
msgid "end index of the cache entries following the operation"
msgstr "操作后面的缓存条目的结束索引"

#: ../../library/dis.rst:514
msgid "``True`` if this opcode starts a source line, otherwise ``False``"
msgstr "如果这个操作在源代码行的开始，为 ``True``，否则为 ``False``。"

#: ../../library/dis.rst:519
msgid ""
"source line number associated with this opcode (if any), otherwise ``None``"
msgstr "操作码对应的源代码行号（如有），否则为 ``None``"

#: ../../library/dis.rst:524
msgid "``True`` if other code jumps to here, otherwise ``False``"
msgstr "如果其他代码跳到这里，则为 ``True`` ，否则为 ``False``"

#: ../../library/dis.rst:529
msgid ""
"bytecode index of the jump target if this is a jump operation, otherwise "
"``None``"
msgstr "跳转的目标的字节码索引，如果有跳转操作，否则为 ``None``"

#: ../../library/dis.rst:535
msgid ""
":class:`dis.Positions` object holding the start and end locations that are "
"covered by this instruction."
msgstr ":class:`dis.Positions` 对象保存了这条指令所涵盖的起始和结束位置。"

#: ../../library/dis.rst:540
msgid ""
"Information about the cache entries of this instruction, as triplets of the "
"form ``(name, size, data)``, where the ``name`` and ``size`` describe the "
"cache format and data is the contents of the cache. ``cache_info`` is "
"``None`` if the instruction does not have caches."
msgstr ""
"有关该指令的缓存条目的信息，为 ``(name, size, data)`` 形式的三元组，其中 ``name`` 和 ``size`` "
"描述缓存的格式而 data 为缓存的内容。 如果指令没有缓存则 ``cache_info`` 为 ``None``。"

#: ../../library/dis.rst:550
msgid "Field ``positions`` is added."
msgstr "增加了 ``positions`` 字段。"

#: ../../library/dis.rst:554
msgid "Changed field ``starts_line``."
msgstr "更改了字段 ``starts_line``。"

#: ../../library/dis.rst:556
msgid ""
"Added fields ``start_offset``, ``cache_offset``, ``end_offset``, "
"``baseopname``, ``baseopcode``, ``jump_target``, ``oparg``, ``line_number`` "
"and ``cache_info``."
msgstr ""
"添加了字段 "
"``start_offset``、``cache_offset``、``end_offset``、``baseopname``、``baseopcode``、``jump_target``、``oparg``、``line_number``"
" 和 ``cache_info``。"

#: ../../library/dis.rst:563
msgid ""
"In case the information is not available, some fields might be ``None``."
msgstr "考虑到此信息不可用的情况，某些字段可能为 ``None``。"

#: ../../library/dis.rst:573
msgid ""
"The Python compiler currently generates the following bytecode instructions."
msgstr "Python编译器当前生成以下字节码指令。"

#: ../../library/dis.rst:576
msgid "**General instructions**"
msgstr "**一般指令**"

#: ../../library/dis.rst:578
msgid ""
"In the following, We will refer to the interpreter stack as ``STACK`` and "
"describe operations on it as if it was a Python list. The top of the stack "
"corresponds to ``STACK[-1]`` in this language."
msgstr ""
"在下文中，我们将把解释器栈称为 ``STACK`` 并像描述 Python 列表一样描述对它的操作。 栈顶对应于该语言中的 ``STACK[-1]``。"

#: ../../library/dis.rst:584
msgid ""
"Do nothing code.  Used as a placeholder by the bytecode optimizer, and to "
"generate line tracing events."
msgstr "无操作代码。 被字节码优化器用作占位符，以及生成行追踪事件。"

#: ../../library/dis.rst:590
msgid "Removes the top-of-stack item::"
msgstr "移除除堆栈顶部的项："

#: ../../library/dis.rst:592
msgid "STACK.pop()"
msgstr "STACK.pop()"

#: ../../library/dis.rst:597
msgid ""
"Removes the top-of-stack item. Equivalent to ``POP_TOP``. Used to clean up "
"at the end of loops, hence the name."
msgstr "移除栈顶。 等价于 ``POP_TOP``。用于循环结束时的清理，因此而得名。"

#: ../../library/dis.rst:606
msgid "Implements ``del STACK[-2]``. Used to clean up when a generator exits."
msgstr "实现 ``del STACK[-2]``。 用于在生成器退出时进行清理。"

#: ../../library/dis.rst:614
msgid ""
"Push the i-th item to the top of the stack without removing it from its "
"original location::"
msgstr "将第 *i* 项推入栈顶，并不移除原项："

#: ../../library/dis.rst:617
msgid ""
"assert i > 0\n"
"STACK.append(STACK[-i])"
msgstr ""
"assert i > 0\n"
"STACK.append(STACK[-i])"

#: ../../library/dis.rst:625
msgid "Swap the top of the stack with the i-th element::"
msgstr "将栈顶的项与栈中第 *i* 项互换："

#: ../../library/dis.rst:627
msgid "STACK[-i], STACK[-1] = STACK[-1], STACK[-i]"
msgstr "STACK[-i], STACK[-1] = STACK[-1], STACK[-i]"

#: ../../library/dis.rst:634
msgid ""
"Rather than being an actual instruction, this opcode is used to mark extra "
"space for the interpreter to cache useful data directly in the bytecode "
"itself. It is automatically hidden by all ``dis`` utilities, but can be "
"viewed with ``show_caches=True``."
msgstr ""
"此操作码不是真正的指令，它被用来为解释器标记额外空间以便在字节码中直接缓存有用的数据。 它会被所有 ``dis`` 工具自动隐藏，但可以通过 "
"``show_caches=True`` 来查看。"

#: ../../library/dis.rst:639
msgid ""
"Logically, this space is part of the preceding instruction. Many opcodes "
"expect to be followed by an exact number of caches, and will instruct the "
"interpreter to skip over them at runtime."
msgstr "从逻辑上说，此空间是之前的指令的组成部分。 许多操作码都预期带有固定数量的缓存，并会指示解释器在运行时跳过它们。"

#: ../../library/dis.rst:643
msgid ""
"Populated caches can look like arbitrary instructions, so great care should "
"be taken when reading or modifying raw, adaptive bytecode containing "
"quickened data."
msgstr "被填充的缓存看起来可以像是任意的指令，因此在读取或修改包含快取数据的原始自适应字节码时应当非常小心。"

#: ../../library/dis.rst:650
msgid "**Unary operations**"
msgstr "**一元操作**"

#: ../../library/dis.rst:652
msgid ""
"Unary operations take the top of the stack, apply the operation, and push "
"the result back on the stack."
msgstr "一元操作获取堆栈顶部元素，应用操作，并将结果推回堆栈。"

#: ../../library/dis.rst:658
msgid "Implements ``STACK[-1] = -STACK[-1]``."
msgstr "实现 ``STACK[-1] = -STACK[-1]`` 。"

#: ../../library/dis.rst:663
msgid "Implements ``STACK[-1] = not STACK[-1]``."
msgstr "实现 ``STACK[-1] = not STACK[-1]`` 。"

#: ../../library/dis.rst:665 ../../library/dis.rst:1367
#: ../../library/dis.rst:1383
msgid "This instruction now requires an exact :class:`bool` operand."
msgstr "现在，操作对象需要是 :class:`bool` 类型。"

#: ../../library/dis.rst:671
msgid "Implements ``STACK[-1] = ~STACK[-1]``."
msgstr "实现 ``STACK[-1] = ~STACK[-1]`` 。"

#: ../../library/dis.rst:676
msgid "Implements ``STACK[-1] = iter(STACK[-1])``."
msgstr "实现 ``STACK[-1] = iter(STACK[-1])`` 。"

#: ../../library/dis.rst:681
msgid ""
"If ``STACK[-1]`` is a :term:`generator iterator` or :term:`coroutine` object"
" it is left as is.  Otherwise, implements ``STACK[-1] = iter(STACK[-1])``."
msgstr ""
"如果 ``STACK[-1]`` 是一个 :term:`generator iterator` 或 :term:`coroutine` "
"对象则它将保持原样。 否则，将实现 ``STACK[-1] = iter(STACK[-1])``。"

#: ../../library/dis.rst:689
msgid "Implements ``STACK[-1] = bool(STACK[-1])``."
msgstr "实现``STACK[-1] = bool(STACK[-1])``。"

#: ../../library/dis.rst:694
msgid "**Binary and in-place operations**"
msgstr "**双目和原地操作**"

#: ../../library/dis.rst:696
msgid ""
"Binary operations remove the top two items from the stack (``STACK[-1]`` and"
" ``STACK[-2]``). They perform the operation, then put the result back on the"
" stack."
msgstr "双目操作移除栈顶的两项（ ``STACK[-1]`` 和 ``STACK[-2]`` ），执行其运算操作，并将结果放回栈中。"

#: ../../library/dis.rst:699
msgid ""
"In-place operations are like binary operations, but the operation is done "
"in-place when ``STACK[-2]`` supports it, and the resulting ``STACK[-1]`` may"
" be (but does not have to be) the original ``STACK[-2]``."
msgstr ""
"原地操作类似于双目操作，但当 ``STACK[-2]`` 支持时，操作将在原地进行。 结果 ``STACK[-1]`` 可能（但不一定）是原先 "
"``STACK[-2]`` 的值。"

#: ../../library/dis.rst:706
msgid ""
"Implements the binary and in-place operators (depending on the value of "
"*op*)::"
msgstr "实现双目和原地操作运算符（取决于 *op* 的值）："

#: ../../library/dis.rst:709
msgid ""
"rhs = STACK.pop()\n"
"lhs = STACK.pop()\n"
"STACK.append(lhs op rhs)"
msgstr ""
"rhs = STACK.pop()\n"
"lhs = STACK.pop()\n"
"STACK.append(lhs op rhs)"

#: ../../library/dis.rst:714
msgid ""
"With oparg :``NB_SUBSCR``, implements binary subscript (replaces opcode "
"``BINARY_SUBSCR``)"
msgstr "使用操作数 :``NB_SUBSCR``，实现二元下标 (代替操作码 ``BINARY_SUBSCR``)"

#: ../../library/dis.rst:720 ../../library/dis.rst:730
#: ../../library/dis.rst:738 ../../library/dis.rst:750
#: ../../library/dis.rst:828 ../../library/dis.rst:838
#: ../../library/dis.rst:848 ../../library/dis.rst:1054
#: ../../library/dis.rst:1065 ../../library/dis.rst:1210
#: ../../library/dis.rst:1222 ../../library/dis.rst:1234
msgid "Implements::"
msgstr "实现："

#: ../../library/dis.rst:722
msgid ""
"key = STACK.pop()\n"
"container = STACK.pop()\n"
"value = STACK.pop()\n"
"container[key] = value"
msgstr ""
"key = STACK.pop()\n"
"container = STACK.pop()\n"
"value = STACK.pop()\n"
"container[key] = value"

#: ../../library/dis.rst:732
msgid ""
"key = STACK.pop()\n"
"container = STACK.pop()\n"
"del container[key]"
msgstr ""
"key = STACK.pop()\n"
"container = STACK.pop()\n"
"del container[key]"

#: ../../library/dis.rst:740
msgid ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"container = STACK.pop()\n"
"STACK.append(container[start:end])"
msgstr ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"container = STACK.pop()\n"
"STACK.append(container[start:end])"

#: ../../library/dis.rst:752
msgid ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"container = STACK.pop()\n"
"values = STACK.pop()\n"
"container[start:end] = value"
msgstr ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"container = STACK.pop()\n"
"values = STACK.pop()\n"
"container[start:end] = value"

#: ../../library/dis.rst:761
msgid "**Coroutine opcodes**"
msgstr "**协程操作码**"

#: ../../library/dis.rst:765
msgid ""
"Implements ``STACK[-1] = get_awaitable(STACK[-1])``, where "
"``get_awaitable(o)`` returns ``o`` if ``o`` is a coroutine object or a "
"generator object with the :data:`~inspect.CO_ITERABLE_COROUTINE` flag, or "
"resolves ``o.__await__``."
msgstr ""
"实现 ``STACK[-1] = get_awaitable(STACK[-1])`` 。其中对于 ``get_awaitable(o)`` ，当 "
"``o`` 是一个有 :data:`~inspect.CO_ITERABLE_COROUTINE` 旗标的协程对象或生成器对象时，返回 "
"``o``，否则解析 ``o.__await__`` 。"

#: ../../library/dis.rst:770
msgid ""
"If the ``where`` operand is nonzero, it indicates where the instruction "
"occurs:"
msgstr "如果 ``where`` 操作数为非零值，则表示指令所在的位置:"

#: ../../library/dis.rst:773
msgid "``1``: After a call to ``__aenter__``"
msgstr "``1``：在调用 ``__aenter__`` 之后"

#: ../../library/dis.rst:774
msgid "``2``: After a call to ``__aexit__``"
msgstr "``2``：在调用 ``__aexit__`` 之后"

#: ../../library/dis.rst:778
msgid "Previously, this instruction did not have an oparg."
msgstr "在之前版本中，该指令没有 oparg。"

#: ../../library/dis.rst:784
msgid "Implements ``STACK[-1] = STACK[-1].__aiter__()``."
msgstr "实现 ``STACK[-1] = STACK[-1].__aiter__()``。"

#: ../../library/dis.rst:787
msgid "Returning awaitable objects from ``__aiter__`` is no longer supported."
msgstr "已经不再支持从 ``__aiter__`` 返回可等待对象。"

#: ../../library/dis.rst:794
msgid ""
"Implement ``STACK.append(get_awaitable(STACK[-1].__anext__()))`` to the "
"stack. See ``GET_AWAITABLE`` for details about ``get_awaitable``."
msgstr ""
"对堆栈实现 ``STACK.append(get_awaitable(STACK[-1].__anext__()))`` 。 关于 "
"``get_awaitable`` 的细节，见 ``GET_AWAITABLE`` 。"

#: ../../library/dis.rst:802
msgid ""
"Terminates an :keyword:`async for` loop.  Handles an exception raised when "
"awaiting a next item. The stack contains the async iterable in ``STACK[-2]``"
" and the raised exception in ``STACK[-1]``. Both are popped. If the "
"exception is not :exc:`StopAsyncIteration`, it is re-raised."
msgstr ""
"终结一个 :keyword:`async for` 循环。 在等待下一项时处理被引发的异常。 栈包含了 ``STACK[-2]`` 中的异步可迭代对象和"
" ``STACK[-1]`` 中的已引发异常。 两者都将被弹出。 如果异常不是 :exc:`StopAsyncIteration`，它会被重新引发。"

#: ../../library/dis.rst:809 ../../library/dis.rst:900
#: ../../library/dis.rst:911
msgid ""
"Exception representation on the stack now consist of one, not three, items."
msgstr "栈中的异常表示形式现在将由一个而不是三个条目组成。"

#: ../../library/dis.rst:815
msgid ""
"Handles an exception raised during a :meth:`~generator.throw` or "
":meth:`~generator.close` call through the current frame.  If ``STACK[-1]`` "
"is an instance of :exc:`StopIteration`, pop three values from the stack and "
"push its ``value`` member.  Otherwise, re-raise ``STACK[-1]``."
msgstr ""
"处理当前帧中由调用 :meth:`~generator.throw` 或 :meth:`~generator.close` 引发的异常。 如果 "
"``STACK[-1]`` 是 :exc:`StopIteration` 的实例，则从栈中弹出三个值，并将其成员 ``value`` "
"的值推入栈中，否则重新引发 ``STACK[-1]`` 异常。"

#: ../../library/dis.rst:824
msgid "**Miscellaneous opcodes**"
msgstr "**其他操作码**"

#: ../../library/dis.rst:830
msgid ""
"item = STACK.pop()\n"
"set.add(STACK[-i], item)"
msgstr ""
"item = STACK.pop()\n"
"set.add(STACK[-i], item)"

#: ../../library/dis.rst:833
msgid "Used to implement set comprehensions."
msgstr "用于实现集合推导式。"

#: ../../library/dis.rst:840
msgid ""
"item = STACK.pop()\n"
"list.append(STACK[-i], item)"
msgstr ""
"item = STACK.pop()\n"
"list.append(STACK[-i], item)"

#: ../../library/dis.rst:843
msgid "Used to implement list comprehensions."
msgstr "用于实现列表推导式。"

#: ../../library/dis.rst:850
msgid ""
"value = STACK.pop()\n"
"key = STACK.pop()\n"
"dict.__setitem__(STACK[-i], key, value)"
msgstr ""
"value = STACK.pop()\n"
"key = STACK.pop()\n"
"dict.__setitem__(STACK[-i], key, value)"

#: ../../library/dis.rst:854
msgid "Used to implement dict comprehensions."
msgstr "用于实现字典推导式。"

#: ../../library/dis.rst:857
msgid ""
"Map value is ``STACK[-1]`` and map key is ``STACK[-2]``. Before, those were "
"reversed."
msgstr "映射的值为 ``STACK[-1]`` ，映射的键为 ``STACK[-2]`` 。之前它们是反过来的。"

#: ../../library/dis.rst:861
msgid ""
"For all of the :opcode:`SET_ADD`, :opcode:`LIST_APPEND` and "
":opcode:`MAP_ADD` instructions, while the added value or key/value pair is "
"popped off, the container object remains on the stack so that it is "
"available for further iterations of the loop."
msgstr ""
"对于所有 :opcode:`SET_ADD` 、 :opcode:`LIST_APPEND` 和 :opcode:`MAP_ADD` "
"指令，当弹出添加的值或键值对时，容器对象保留在堆栈上，以便它可用于循环的进一步迭代。"

#: ../../library/dis.rst:869
msgid "Returns with ``STACK[-1]`` to the caller of the function."
msgstr "返回 ``STACK[-1]`` 给函数的调用者。"

#: ../../library/dis.rst:874
msgid "Yields ``STACK.pop()`` from a :term:`generator`."
msgstr "从 :term:`generator` 产生 ``STACK.pop()``。"

#: ../../library/dis.rst:876
msgid "oparg set to be the stack depth."
msgstr "oparg 被设为堆栈深度。"

#: ../../library/dis.rst:879
msgid ""
"oparg set to be the exception block depth, for efficient closing of "
"generators."
msgstr "oparg 被设为异常块的深度，以确保关闭生成器的效率。"

#: ../../library/dis.rst:882
msgid ""
"oparg is ``1`` if this instruction is part of a yield-from or await, and "
"``0`` otherwise."
msgstr "如果该指令是 yield-from 或 await 的一部分则 oparg 为 ``1``，否则为 ``0``。"

#: ../../library/dis.rst:888
msgid ""
"Checks whether ``__annotations__`` is defined in ``locals()``, if not it is "
"set up to an empty ``dict``. This opcode is only emitted if a class or "
"module body contains :term:`variable annotations <variable annotation>` "
"statically."
msgstr ""
"检查 ``__annotations__`` 是否在 ``locals()`` 中定义，如果没有，它被设置为空 ``dict`` "
"。只有在类或模块体静态地包含 :term:`variable annotations <variable annotation>` 时才会发出此操作码。"

#: ../../library/dis.rst:898
msgid ""
"Pops a value from the stack, which is used to restore the exception state."
msgstr "从栈中弹出一个值，它将被用来恢复异常状态。"

#: ../../library/dis.rst:905
msgid ""
"Re-raises the exception currently on top of the stack. If oparg is non-zero,"
" pops an additional value from the stack which is used to set "
":attr:`~frame.f_lasti` of the current frame."
msgstr ""
"重新引发当前位于栈顶的异常。 如果 oparg 为非零值，则从栈顶额外弹出一个值用来设置当前帧的 :attr:`~frame.f_lasti`。"

#: ../../library/dis.rst:916
msgid ""
"Pops a value from the stack. Pushes the current exception to the top of the "
"stack. Pushes the value originally popped back to the stack. Used in "
"exception handlers."
msgstr "从栈中弹出一个值。 将当前异常推入栈顶。 将原先被弹出的值推回栈。 在异常处理器中使用。"

#: ../../library/dis.rst:924
msgid ""
"Performs exception matching for ``except``. Tests whether the ``STACK[-2]`` "
"is an exception matching ``STACK[-1]``. Pops ``STACK[-1]`` and pushes the "
"boolean result of the test."
msgstr ""
"为 ``except`` 执行异常匹配。 检测 ``STACK[-2]`` 是否为匹配 ``STACK[-1]`` 的异常。 弹出 "
"``STACK[-1]`` 并将测试的布尔值结果推入栈。"

#: ../../library/dis.rst:932
msgid ""
"Performs exception matching for ``except*``. Applies ``split(STACK[-1])`` on"
" the exception group representing ``STACK[-2]``."
msgstr "为 ``except*`` 执行异常匹配。 在代表 ``STACK[-2]`` 的异常组上应用 ``split(STACK[-1])``。"

#: ../../library/dis.rst:935
msgid ""
"In case of a match, pops two items from the stack and pushes the non-"
"matching subgroup (``None`` in case of full match) followed by the matching "
"subgroup. When there is no match, pops one item (the match type) and pushes "
"``None``."
msgstr ""
"在匹配的情况下，从栈中弹出两项并推入不匹配的子分组 (如完全匹配则为 ``None``) 以及匹配的子分组。 当没有任何匹配时，则弹出一项 (匹配类型)"
" 并推入 ``None``。"

#: ../../library/dis.rst:944
msgid ""
"Calls the function in position 4 on the stack with arguments (type, val, tb)"
" representing the exception at the top of the stack. Used to implement the "
"call ``context_manager.__exit__(*exc_info())`` when an exception has "
"occurred in a :keyword:`with` statement."
msgstr ""
"调用栈中 4 号位置上的函数并附带代表位于栈顶的异常的参数 (type, val, tb)。 用于在 :keyword:`with` "
"语句内发生异常时实现调用 ``context_manager.__exit__(*exc_info())``。"

#: ../../library/dis.rst:951
msgid ""
"The ``__exit__`` function is in position 4 of the stack rather than 7. "
"Exception representation on the stack now consist of one, not three, items."
msgstr "``__exit__`` 函数位于栈的 4 号位而不是 7 号位。 栈中的异常表示形式现在由一项而不是三项组成。"

#: ../../library/dis.rst:958
msgid ""
"Pushes a common constant onto the stack. The interpreter contains a "
"hardcoded list of constants supported by this instruction.  Used by the "
":keyword:`assert` statement to load :exc:`AssertionError`."
msgstr ""
"将一个普通常量推入栈顶。 解释器包含一个硬编码的被该指令所支持的常量列表。 由 :keyword:`assert` 语句用来加载 "
":exc:`AssertionError`。"

#: ../../library/dis.rst:967
msgid ""
"Pushes :func:`!builtins.__build_class__` onto the stack.  It is later called"
" to construct a class."
msgstr "将 :func:`!builtins.__build_class__` 推入栈中。 之后它将会被调用来构造一个类。"

#: ../../library/dis.rst:972
msgid ""
"Perform ``STACK.append(len(STACK[-1]))``. Used in :keyword:`match` "
"statements where comparison with structure of pattern is needed."
msgstr ""
"执行 ``STACK.append(len(STACK[-1]))``。 当需要与模式结构体进行比较时在 :keyword:`match` 语句中使用。"

#: ../../library/dis.rst:980
msgid ""
"If ``STACK[-1]`` is an instance of :class:`collections.abc.Mapping` (or, "
"more technically: if it has the :c:macro:`Py_TPFLAGS_MAPPING` flag set in "
"its :c:member:`~PyTypeObject.tp_flags`), push ``True`` onto the stack.  "
"Otherwise, push ``False``."
msgstr ""
"如果 ``STACK[-1]`` 是 :class:`collections.abc.Mapping` 的实例（或者更准确地说：如果在它的 "
":c:member:`~PyTypeObject.tp_flags` 中设置了 :c:macro:`Py_TPFLAGS_MAPPING` 旗标），则将"
" ``True`` 推入栈顶。 否则，推入 ``False``。"

#: ../../library/dis.rst:990
msgid ""
"If ``STACK[-1]`` is an instance of :class:`collections.abc.Sequence` and is "
"*not* an instance of :class:`str`/:class:`bytes`/:class:`bytearray` (or, "
"more technically: if it has the :c:macro:`Py_TPFLAGS_SEQUENCE` flag set in "
"its :c:member:`~PyTypeObject.tp_flags`), push ``True`` onto the stack.  "
"Otherwise, push ``False``."
msgstr ""
"如果 ``STACK[-1]`` 是 :class:`collections.abc.Sequence` 的实例而 *不是*  "
":class:`str`/:class:`bytes`/:class:`bytearray` 的实例（或者更准确地说：如果在它的 "
":c:member:`~PyTypeObject.tp_flags` 中设置了 :c:macro:`Py_TPFLAGS_SEQUENCE` "
"旗标），则将 ``True`` 推入栈顶。 否则 ，推入 ``False``。"

#: ../../library/dis.rst:1000
msgid ""
"``STACK[-1]`` is a tuple of mapping keys, and ``STACK[-2]`` is the match "
"subject. If ``STACK[-2]`` contains all of the keys in ``STACK[-1]``, push a "
":class:`tuple` containing the corresponding values. Otherwise, push "
"``None``."
msgstr ""
"``STACK[-1]`` 是一个映射键的元组，而 ``STACK[-2]`` 是匹配目标。 如果 ``STACK[-2]`` 包含 "
"``STACK[-1]`` 中的所有键，则推入一个包含对应值的 :class:`tuple`。 在其他情况下，推入 ``None``。"

#: ../../library/dis.rst:1006 ../../library/dis.rst:1748
msgid ""
"Previously, this instruction also pushed a boolean value indicating success "
"(``True``) or failure (``False``)."
msgstr "在之前的版本中，该指令还会推入一个表示成功 (``True``) 或失败 (``False``) 的布尔值。"

#: ../../library/dis.rst:1013
msgid ""
"Implements ``name = STACK.pop()``. *namei* is the index of *name* in the "
"attribute :attr:`~codeobject.co_names` of the :ref:`code object <code-"
"objects>`. The compiler tries to use :opcode:`STORE_FAST` or "
":opcode:`STORE_GLOBAL` if possible."
msgstr ""
"实现 ``name = STACK.pop()``。 *namei* 是 *name* 在 :ref:`代码对象 <code-objects>` 的 "
":attr:`~codeobject.co_names` 属性中的索引。 在可能的情况下编译器会尝试使用 :opcode:`STORE_FAST` 或 "
":opcode:`STORE_GLOBAL`。"

#: ../../library/dis.rst:1020
msgid ""
"Implements ``del name``, where *namei* is the index into "
":attr:`~codeobject.co_names` attribute of the :ref:`code object <code-"
"objects>`."
msgstr ""
"实现 ``del name``，其中 *namei* 是 :ref:`代码对象 <code-objects>` 的 "
":attr:`~codeobject.co_names` 属性的索引。"

#: ../../library/dis.rst:1026
msgid ""
"Unpacks ``STACK[-1]`` into *count* individual values, which are put onto the"
" stack right-to-left. Require there to be exactly *count* values.::"
msgstr "将 ``STACK[-1]`` 解包为 *count* 个单独的值，然后自右向左放入栈中。要求有确切的 *count* 值："

#: ../../library/dis.rst:1029
msgid ""
"assert(len(STACK[-1]) == count)\n"
"STACK.extend(STACK.pop()[:-count-1:-1])"
msgstr ""
"assert(len(STACK[-1]) == count)\n"
"STACK.extend(STACK.pop()[:-count-1:-1])"

#: ../../library/dis.rst:1035
msgid ""
"Implements assignment with a starred target: Unpacks an iterable in "
"``STACK[-1]`` into individual values, where the total number of values can "
"be smaller than the number of items in the iterable: one of the new values "
"will be a list of all leftover items."
msgstr ""
"实现带星号目标的赋值：将 ``STACK[-1]`` 中的可迭代对象解包为各个单独的值。 "
"值的总数可以小于可迭代对象的项数：其中会有一个值是存放剩下的项的列表。"

#: ../../library/dis.rst:1040
msgid ""
"The number of values before and after the list value is limited to 255."
msgstr "在列表前后的值的数量被限制在255。"

#: ../../library/dis.rst:1042
msgid ""
"The number of values before the list value is encoded in the argument of the"
" opcode. The number of values after the list if any is encoded using an "
"``EXTENDED_ARG``. As a consequence, the argument can be seen as a two bytes "
"values where the low byte of *counts* is the number of values before the "
"list value, the high byte of *counts* the number of values after it."
msgstr ""
"列表前的值的数量被编码在操作码的参数之中。 如果列表后有值，则其数量会被用 ``EXTENDED_ARG`` 编码。 "
"因此参数可以被认为是一个双字节值，其中低位字节代表列表前的值的数量，高位字节代表其后的值的数量。"

#: ../../library/dis.rst:1048
msgid ""
"The extracted values are put onto the stack right-to-left, i.e. ``a, *b, c ="
" d`` will be stored after execution as ``STACK.extend((a, b, c))``."
msgstr ""
"提取出来的值被自右向左放入栈中，也就是说 ``a, *b, c = d`` 在执行完成之后会被这样储存： ``STACK.extend((a, b, "
"c))`` 。"

#: ../../library/dis.rst:1056
msgid ""
"obj = STACK.pop()\n"
"value = STACK.pop()\n"
"obj.name = value"
msgstr ""
"obj = STACK.pop()\n"
"value = STACK.pop()\n"
"obj.name = value"

#: ../../library/dis.rst:1060
msgid ""
"where *namei* is the index of name in :attr:`~codeobject.co_names` of the "
":ref:`code object <code-objects>`."
msgstr ""
"其中 *namei* 是 name 在 :ref:`代码对象 <code-objects>` 的 "
":attr:`~codeobject.co_names` 中的索引。"

#: ../../library/dis.rst:1067
msgid ""
"obj = STACK.pop()\n"
"del obj.name"
msgstr ""
"obj = STACK.pop()\n"
"del obj.name"

#: ../../library/dis.rst:1070
msgid ""
"where *namei* is the index of name into :attr:`~codeobject.co_names` of the "
":ref:`code object <code-objects>`."
msgstr ""
"其中 *namei* 是 name 在 :ref:`代码对象 <code-objects>` 的 "
":attr:`~codeobject.co_names` 中的索引。"

#: ../../library/dis.rst:1076
msgid "Works as :opcode:`STORE_NAME`, but stores the name as a global."
msgstr "类似于 :opcode:`STORE_NAME` 但会将 name 存储为全局变量。"

#: ../../library/dis.rst:1081
msgid "Works as :opcode:`DELETE_NAME`, but deletes a global name."
msgstr "类似于 :opcode:`DELETE_NAME` 但会删除一个全局变量。"

#: ../../library/dis.rst:1086
msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr "将 ``co_consts[consti]`` 推入栈顶。"

#: ../../library/dis.rst:1091
msgid ""
"Pushes the integer ``i`` onto the stack. ``i`` must be in ``range(256)``"
msgstr "将整数 ``i`` 推入栈顶。 ``i`` 必须在 ``range(256)`` 范围内"

#: ../../library/dis.rst:1099
msgid ""
"Pushes the value associated with ``co_names[namei]`` onto the stack. The "
"name is looked up within the locals, then the globals, then the builtins."
msgstr "将 ``co_names[namei]`` 关联的值压入栈中。 名称的查找范围包括局部变量，然后是全局变量，然后是内置量。"

#: ../../library/dis.rst:1105
msgid ""
"Pushes a reference to the locals dictionary onto the stack.  This is used to"
" prepare namespace dictionaries for :opcode:`LOAD_FROM_DICT_OR_DEREF` and "
":opcode:`LOAD_FROM_DICT_OR_GLOBALS`."
msgstr ""
"将一个局部变量字典的引用压入栈中。 被用于为 :opcode:`LOAD_FROM_DICT_OR_DEREF` 和 "
":opcode:`LOAD_FROM_DICT_OR_GLOBALS` 准备命名空间字典。"

#: ../../library/dis.rst:1114
msgid ""
"Pops a mapping off the stack and looks up the value for ``co_names[namei]``."
" If the name is not found there, looks it up in the globals and then the "
"builtins, similar to :opcode:`LOAD_GLOBAL`. This is used for loading global "
"variables in :ref:`annotation scopes <annotation-scopes>` within class "
"bodies."
msgstr ""
"从栈中弹出一个映射，在其中查找 ``co_names[namei]``。 如果在此没有找到相应的名称，则在全局变量和内置量中查找，类似 "
":opcode:`LOAD_GLOBAL` 。 被用于在类定义中的 :ref:`标注作用域 <annotation-scopes>` 中加载全局变量。"

#: ../../library/dis.rst:1125
msgid ""
"Constructs a new :class:`~string.templatelib.Template` from a tuple of "
"strings and a tuple of interpolations and pushes the resulting instance onto"
" the stack::"
msgstr ""
"根据一个字符串元组和一个插值元组构造一个新的 :class:`~string.templatelib.Template` 并将结果实例推至栈顶::"

#: ../../library/dis.rst:1129
msgid ""
"interpolations = STACK.pop()\n"
"strings = STACK.pop()\n"
"STACK.append(_build_template(strings, interpolations))"
msgstr ""

#: ../../library/dis.rst:1138
msgid ""
"Constructs a new :class:`~string.templatelib.Interpolation` from a value and"
" its source expression and pushes the resulting instance onto the stack."
msgstr ""

#: ../../library/dis.rst:1142
msgid ""
"If no conversion or format specification is present, ``format`` is set to "
"``2``."
msgstr ""

#: ../../library/dis.rst:1145
msgid ""
"If the low bit of ``format`` is set, it indicates that the interpolation "
"contains a format specification."
msgstr ""

#: ../../library/dis.rst:1148
msgid ""
"If ``format >> 2`` is non-zero, it indicates that the interpolation contains"
" a conversion. The value of ``format >> 2`` is the conversion type (``0`` "
"for no conversion, ``1`` for ``!s``, ``2`` for ``!r``, and ``3`` for "
"``!a``)::"
msgstr ""

#: ../../library/dis.rst:1153
msgid ""
"conversion = format >> 2\n"
"if format & 1:\n"
"    format_spec = STACK.pop()\n"
"else:\n"
"    format_spec = None\n"
"expression = STACK.pop()\n"
"value = STACK.pop()\n"
"STACK.append(_build_interpolation(value, expression, conversion, format_spec))"
msgstr ""
"conversion = format >> 2\n"
"if format & 1:\n"
"    format_spec = STACK.pop()\n"
"else:\n"
"    format_spec = None\n"
"expression = STACK.pop()\n"
"value = STACK.pop()\n"
"STACK.append(_build_interpolation(value, expression, conversion, format_spec))"

#: ../../library/dis.rst:1167
msgid ""
"Creates a tuple consuming *count* items from the stack, and pushes the "
"resulting tuple onto the stack::"
msgstr "创建一个使用来自栈的 *count* 个条目的元组，并将结果元组推入栈顶::"

#: ../../library/dis.rst:1170
msgid ""
"if count == 0:\n"
"    value = ()\n"
"else:\n"
"    value = tuple(STACK[-count:])\n"
"    STACK = STACK[:-count]\n"
"\n"
"STACK.append(value)"
msgstr ""
"if count == 0:\n"
"    value = ()\n"
"else:\n"
"    value = tuple(STACK[-count:])\n"
"    STACK = STACK[:-count]\n"
"\n"
"STACK.append(value)"

#: ../../library/dis.rst:1181
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a list."
msgstr "类似于 :opcode:`BUILD_TUPLE` 但会创建一个列表。"

#: ../../library/dis.rst:1186
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a set."
msgstr "类似于 :opcode:`BUILD_TUPLE` 但会创建一个集合。"

#: ../../library/dis.rst:1191
msgid ""
"Pushes a new dictionary object onto the stack.  Pops ``2 * count`` items so "
"that the dictionary holds *count* entries: ``{..., STACK[-4]: STACK[-3], "
"STACK[-2]: STACK[-1]}``."
msgstr ""
"将一个新字典对象推入栈顶。 弹出 ``2 * count`` 项使得字典包含 *count* 个条目: ``{..., STACK[-4]: "
"STACK[-3], STACK[-2]: STACK[-1]}`` 。"

#: ../../library/dis.rst:1195
msgid ""
"The dictionary is created from stack items instead of creating an empty "
"dictionary pre-sized to hold *count* items."
msgstr "字典是根据栈中的项创建而不是创建一个预设大小包含 *count* 项的空字典。"

#: ../../library/dis.rst:1202
msgid ""
"Concatenates *count* strings from the stack and pushes the resulting string "
"onto the stack."
msgstr "拼接 *count* 个来自栈的字符串并将结果字符串推入栈顶。"

#: ../../library/dis.rst:1212
msgid ""
"seq = STACK.pop()\n"
"list.extend(STACK[-i], seq)"
msgstr ""
"seq = STACK.pop()\n"
"list.extend(STACK[-i], seq)"

#: ../../library/dis.rst:1215
msgid "Used to build lists."
msgstr "用于构建列表。"

#: ../../library/dis.rst:1224
msgid ""
"seq = STACK.pop()\n"
"set.update(STACK[-i], seq)"
msgstr ""
"seq = STACK.pop()\n"
"set.update(STACK[-i], seq)"

#: ../../library/dis.rst:1227
msgid "Used to build sets."
msgstr "用于构建集合。"

#: ../../library/dis.rst:1236
msgid ""
"map = STACK.pop()\n"
"dict.update(STACK[-i], map)"
msgstr ""
"map = STACK.pop()\n"
"dict.update(STACK[-i], map)"

#: ../../library/dis.rst:1239
msgid "Used to build dicts."
msgstr "用于构建字典。"

#: ../../library/dis.rst:1246
msgid "Like :opcode:`DICT_UPDATE` but raises an exception for duplicate keys."
msgstr "类似于 :opcode:`DICT_UPDATE` 但对于重复的键会引发异常。"

#: ../../library/dis.rst:1253
msgid ""
"If the low bit of ``namei`` is not set, this replaces ``STACK[-1]`` with "
"``getattr(STACK[-1], co_names[namei>>1])``."
msgstr ""
"如果 ``namei`` 的低位未设置，则将 ``STACK[-1]`` 替换为 ``getattr(STACK[-1], "
"co_names[namei>>1])``。"

#: ../../library/dis.rst:1256
msgid ""
"If the low bit of ``namei`` is set, this will attempt to load a method named"
" ``co_names[namei>>1]`` from the ``STACK[-1]`` object. ``STACK[-1]`` is "
"popped. This bytecode distinguishes two cases: if ``STACK[-1]`` has a method"
" with the correct name, the bytecode pushes the unbound method and "
"``STACK[-1]``. ``STACK[-1]`` will be used as the first argument (``self``) "
"by :opcode:`CALL` or :opcode:`CALL_KW` when calling the unbound method. "
"Otherwise, ``NULL`` and the object returned by the attribute lookup are "
"pushed."
msgstr ""
"如果 ``namei`` 的低位已设置，则会尝试从 ``STACK[-1]`` 对象加载名为 ``co_names[namei>>1]`` 的方法。 "
"``STACK[-1]`` 会被弹出。 此字节码会区分两种情况：如果 ``STACK[-1]`` 具有一个名称正确的方法，字节码会推入未绑定的方法和 "
"``STACK[-1]``。 ``STACK[-1]`` 将被 :opcode:`CALL` 或者 :opcode:`CALL_KW` "
"用作调用未绑定方法时的第一个参数 (``self``)。 否则，将推入 ``NULL`` 和属性查询所返回的对象。"

#: ../../library/dis.rst:1265
msgid ""
"If the low bit of ``namei`` is set, then a ``NULL`` or ``self`` is pushed to"
" the stack before the attribute or unbound method respectively."
msgstr "如果 ``namei`` 的低位已置，则会在属性或未绑定方法之前分别将 ``NULL`` 或 ``self`` 推入栈。"

#: ../../library/dis.rst:1272
msgid ""
"This opcode implements :func:`super`, both in its zero-argument and two-"
"argument forms (e.g. ``super().method()``, ``super().attr`` and ``super(cls,"
" self).method()``, ``super(cls, self).attr``)."
msgstr ""
"该操作码实现了 :func:`super`，包括零参数和双参数形式 (例如 ``super().method()``, ``super().attr``"
" 和 ``super(cls, self).method()``, ``super(cls, self).attr``)。"

#: ../../library/dis.rst:1276
msgid "It pops three values from the stack (from top of stack down):"
msgstr "它从栈弹出三个值（栈顶在前）："

#: ../../library/dis.rst:1278
msgid "``self``: the first argument to the current method"
msgstr "``self``：当前方法的第一个参数"

#: ../../library/dis.rst:1279
msgid "``cls``: the class within which the current method was defined"
msgstr "``cls``：当前方法被定义的类"

#: ../../library/dis.rst:1280
msgid "the global ``super``"
msgstr "全局的 ``super``"

#: ../../library/dis.rst:1282
msgid ""
"With respect to its argument, it works similarly to :opcode:`LOAD_ATTR`, "
"except that ``namei`` is shifted left by 2 bits instead of 1."
msgstr "对应于其参数，它的操作类似于 :opcode:`LOAD_ATTR`，区别在于 ``namei`` 左移了 2 位而不是 1 位。"

#: ../../library/dis.rst:1285
msgid ""
"The low bit of ``namei`` signals to attempt a method load, as with "
":opcode:`LOAD_ATTR`, which results in pushing ``NULL`` and the loaded "
"method. When it is unset a single value is pushed to the stack."
msgstr ""
"``namei`` 的低位发出尝试加载方法的信号，与 :opcode:`LOAD_ATTR` 一样，其结果是推入 ``NULL`` 和所加载的方法。 "
"当其被取消设置时会将单个值推入栈。"

#: ../../library/dis.rst:1289
msgid ""
"The second-low bit of ``namei``, if set, means that this was a two-argument "
"call to :func:`super` (unset means zero-argument)."
msgstr "``namei`` 的次低比特位如果被设置，表示这是对 :func:`super` 附带两个参数的调用（未设置则表示附带零个参数）。"

#: ../../library/dis.rst:1297
msgid ""
"Performs a Boolean operation.  The operation name can be found in "
"``cmp_op[opname >> 5]``. If the fifth-lowest bit of ``opname`` is set "
"(``opname & 16``), the result should be coerced to ``bool``."
msgstr ""
"执行布尔操作。操作名可以在 ``cmp_op[opname >> 5]`` 中找到。 如果 ``opname`` 的第五低位是 1 (``opname "
"& 16``)，则结果将被强制转换为 ``bool``。"

#: ../../library/dis.rst:1301
msgid ""
"The fifth-lowest bit of the oparg now indicates a forced conversion to "
":class:`bool`."
msgstr "现在参数的第五低位表示强制将结果转换为 :class:`bool`。"

#: ../../library/dis.rst:1308
msgid "Performs ``is`` comparison, or ``is not`` if ``invert`` is 1."
msgstr "执行 ``is`` 比较，或者如果 ``invert`` 为 1 则执行 ``is not``。"

#: ../../library/dis.rst:1315
msgid "Performs ``in`` comparison, or ``not in`` if ``invert`` is 1."
msgstr "执行 ``in`` 比较，或者如果 ``invert`` 为 1 则执行 ``not in``。"

#: ../../library/dis.rst:1322
msgid ""
"Imports the module ``co_names[namei]``.  ``STACK[-1]`` and ``STACK[-2]`` are"
" popped and provide the *fromlist* and *level* arguments of "
":func:`__import__`. The module object is pushed onto the stack.  The current"
" namespace is not affected: for a proper import statement, a subsequent "
":opcode:`STORE_FAST` instruction modifies the namespace."
msgstr ""
"导入模块 ``co_names[namei]``。 会弹出 ``STACK[-1]`` 和 ``STACK[-2]`` 以提供 *fromlist* 和"
" *level* 参数给 :func:`__import__` 。 模块对象会被推入栈顶。 当前命名空间不受影响：对于一条标准 import "
"语句，会执行后续的 :opcode:`STORE_FAST` 指令来修改命名空间。"

#: ../../library/dis.rst:1330
msgid ""
"Loads the attribute ``co_names[namei]`` from the module found in "
"``STACK[-1]``. The resulting object is pushed onto the stack, to be "
"subsequently stored by a :opcode:`STORE_FAST` instruction."
msgstr ""
"从在 ``STACK[-1]`` 内找到的模块中加载属性 ``co_names[namei]``。 结果对象会被推入栈顶，以便由后续的 "
":opcode:`STORE_FAST` 指令来保存。"

#: ../../library/dis.rst:1337
msgid "Increments bytecode counter by *delta*."
msgstr "将字节码计数器的值增加 *delta*。"

#: ../../library/dis.rst:1342
msgid "Decrements bytecode counter by *delta*. Checks for interrupts."
msgstr "将字节码计数器减少 *delta*。 检查中断。"

#: ../../library/dis.rst:1349
msgid "Decrements bytecode counter by *delta*. Does not check for interrupts."
msgstr "将字节码计数器减少 *delta*。 不检查中断。"

#: ../../library/dis.rst:1356
msgid ""
"If ``STACK[-1]`` is true, increments the bytecode counter by *delta*. "
"``STACK[-1]`` is popped."
msgstr "如果 ``STACK[-1]`` 为真值，则将字节码计数器增加 *delta*。 ``STACK[-1]`` 将被弹出。"

#: ../../library/dis.rst:1359 ../../library/dis.rst:1375
msgid ""
"The oparg is now a relative delta rather than an absolute target. This "
"opcode is a pseudo-instruction, replaced in final bytecode by the directed "
"versions (forward/backward)."
msgstr ""
"操作符的参数现在是一个相对的差值而不是一个绝对的目标量。 此操作码是一个伪指令，在最终的字节码里被定向的版本（ forward/backward "
"）取代。"

#: ../../library/dis.rst:1364 ../../library/dis.rst:1380
#: ../../library/dis.rst:1393 ../../library/dis.rst:1404
msgid "This is no longer a pseudo-instruction."
msgstr "该操作码现在不再是伪指令。"

#: ../../library/dis.rst:1372
msgid ""
"If ``STACK[-1]`` is false, increments the bytecode counter by *delta*. "
"``STACK[-1]`` is popped."
msgstr "如果 ``STACK[-1]`` 为假值，则将字节码计数器增加 *delta*。 ``STACK[-1]`` 将被弹出。"

#: ../../library/dis.rst:1388
msgid ""
"If ``STACK[-1]`` is not ``None``, increments the bytecode counter by "
"*delta*. ``STACK[-1]`` is popped."
msgstr "如果 ``STACK[-1]`` 不为 ``None`` ，则将字节码计数器增加 *delta*。 ``STACK[-1]`` 将被弹出。"

#: ../../library/dis.rst:1399
msgid ""
"If ``STACK[-1]`` is ``None``, increments the bytecode counter by *delta*. "
"``STACK[-1]`` is popped."
msgstr "如果 ``STACK[-1]`` 为 ``None`` ，则将字节码计数器增加 *delta*。 ``STACK[-1]`` 将被弹出。"

#: ../../library/dis.rst:1409
msgid ""
"``STACK[-1]`` is an :term:`iterator`.  Call its :meth:`~iterator.__next__` "
"method. If this yields a new value, push it on the stack (leaving the "
"iterator below it).  If the iterator indicates it is exhausted then the byte"
" code counter is incremented by *delta*."
msgstr ""
"``STACK[-1]`` 是一个 :term:`iterator`。 调用其 :meth:`~iterator.__next__` 方法。 "
"如果产生一个新的值则压入栈中 （把迭代器压下去）。 如果迭代器已耗尽，则将字节码计数器增加 *delta* 。"

#: ../../library/dis.rst:1414
msgid "Up until 3.11 the iterator was popped when it was exhausted."
msgstr "直到 3.11 ，当迭代器耗尽时，它会被从栈中弹出。"

#: ../../library/dis.rst:1419
msgid "Loads the global named ``co_names[namei>>1]`` onto the stack."
msgstr "将名为 ``co_names[namei>>1]`` 的全局对象加载到栈顶。"

#: ../../library/dis.rst:1421
msgid ""
"If the low bit of ``namei`` is set, then a ``NULL`` is pushed to the stack "
"before the global variable."
msgstr "如果设置了 ``namei`` 的低比特位，则会在全局变量前将一个 ``NULL`` 推入栈。"

#: ../../library/dis.rst:1427
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr "将指向局部对象 ``co_varnames[var_num]`` 的引用推入栈顶。"

#: ../../library/dis.rst:1429
msgid ""
"This opcode is now only used in situations where the local variable is "
"guaranteed to be initialized. It cannot raise :exc:`UnboundLocalError`."
msgstr "这个操作码目前只用在保证局部变量被初始化的情况下使用。它不能引发 :exc:`UnboundLocalError` 。"

#: ../../library/dis.rst:1435
msgid ""
"Pushes a borrowed reference to the local ``co_varnames[var_num]`` onto the "
"stack."
msgstr "将一个指向局部对象 ``co_varnames[var_num]`` 的借入引用推入栈顶。"

#: ../../library/dis.rst:1442
msgid ""
"Pushes references to ``co_varnames[var_nums >> 4]`` and "
"``co_varnames[var_nums & 15]`` onto the stack."
msgstr ""
"将指向 ``co_varnames[var_nums >> 4]`` 和 ``co_varnames[var_nums & 15]`` 的引用推入栈顶。"

#: ../../library/dis.rst:1450
msgid ""
"Pushes borrowed references to ``co_varnames[var_nums >> 4]`` and "
"``co_varnames[var_nums & 15]`` onto the stack."
msgstr ""
"将指向 ``co_varnames[var_nums >> 4]`` 和 ``co_varnames[var_nums & 15]`` "
"的借入引用推入栈顶。"

#: ../../library/dis.rst:1457
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack, "
"raising an :exc:`UnboundLocalError` if the local variable has not been "
"initialized."
msgstr ""
"将一个指向局部变量 ``co_varnames[var_num]`` 的引用推入栈中，如果该局部变量未被初始化，引发一个 "
":exc:`UnboundLocalError` 。"

#: ../../library/dis.rst:1465
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack (or "
"pushes ``NULL`` onto the stack if the local variable has not been "
"initialized) and sets ``co_varnames[var_num]`` to ``NULL``."
msgstr ""
"将一个指向局部变量 ``co_varnames[var_num]`` 的引用推入栈中（如果该局部变量未被初始化，则推入一个 ``NULL`` ）然后将 "
"``co_varnames[var_num]`` 设为 ``NULL`` 。"

#: ../../library/dis.rst:1473
msgid "Stores ``STACK.pop()`` into the local ``co_varnames[var_num]``."
msgstr "将 ``STACK.pop()`` 存放到局部变量 ``co_varnames[var_num]`` 。"

#: ../../library/dis.rst:1477
msgid ""
"Stores ``STACK[-1]`` into ``co_varnames[var_nums >> 4]`` and ``STACK[-2]`` "
"into ``co_varnames[var_nums & 15]``."
msgstr ""
"将 ``STACK[-1]`` 存入 ``co_varnames[var_nums >> 4]`` 并将 ``STACK[-2]`` 存入 "
"``co_varnames[var_nums & 15]``。"

#: ../../library/dis.rst:1484
msgid ""
"Stores ``STACK.pop()`` into the local ``co_varnames[var_nums >> 4]`` and "
"pushes a reference to the local ``co_varnames[var_nums & 15]`` onto the "
"stack."
msgstr ""
"将 ``STACK.pop()`` 存入本地 ``co_varnames[var_nums >> 4]`` 并将指向本地 "
"``co_varnames[var_nums & 15]`` 的引用推入栈顶。"

#: ../../library/dis.rst:1492
msgid "Deletes local ``co_varnames[var_num]``."
msgstr "移除局部对象 ``co_varnames[var_num]``。"

#: ../../library/dis.rst:1497
msgid ""
"Creates a new cell in slot ``i``.  If that slot is nonempty then that value "
"is stored into the new cell."
msgstr "在槽位 ``i`` 中创建一个新单元。 如果该槽位为非空则该值将存储到新单元中。"

#: ../../library/dis.rst:1505
msgid ""
"Loads the cell contained in slot ``i`` of the \"fast locals\" storage. "
"Pushes a reference to the object the cell contains on the stack."
msgstr "加载包含在 \"fast locals\" 存储的 ``i`` 号槽位中的单元。 将一个指向该单元所包含对象的引用推入栈。"

#: ../../library/dis.rst:1508 ../../library/dis.rst:1530
#: ../../library/dis.rst:1541
msgid ""
"``i`` is no longer offset by the length of :attr:`~codeobject.co_varnames`."
msgstr "``i`` 不再是 :attr:`~codeobject.co_varnames` 的长度的偏移量。"

#: ../../library/dis.rst:1514
msgid ""
"Pops a mapping off the stack and looks up the name associated with slot "
"``i`` of the \"fast locals\" storage in this mapping. If the name is not "
"found there, loads it from the cell contained in slot ``i``, similar to "
":opcode:`LOAD_DEREF`. This is used for loading :term:`closure variables "
"<closure variable>` in class bodies (which previously used "
":opcode:`!LOAD_CLASSDEREF`) and in :ref:`annotation scopes <annotation-"
"scopes>` within class bodies."
msgstr ""
"从栈中弹出一个映射并查找与该映射中 \"fast locals\" 存储的槽位 ``i`` 相关联的名称。 如果未在其中找到此名称，则从包含在槽位 "
"``i`` 中的单元加载它，与 :opcode:`LOAD_DEREF` 类似。 这被用于加载类语句体中的 :term:`闭包变量 <closure "
"variable>` (在此之前是使用 :opcode:`!LOAD_CLASSDEREF`) 和类语句体中的 :ref:`标注作用域 "
"<annotation-scopes>`。"

#: ../../library/dis.rst:1527
msgid ""
"Stores ``STACK.pop()`` into the cell contained in slot ``i`` of the \"fast "
"locals\" storage."
msgstr "将 ``STACK.pop()`` 存放到 \"fast locals\" 存储中包含在 ``i`` 号槽位的单元内。"

#: ../../library/dis.rst:1536
msgid ""
"Empties the cell contained in slot ``i`` of the \"fast locals\" storage. "
"Used by the :keyword:`del` statement."
msgstr "清空 \"fast locals\" 存储中包含在 ``i`` 号槽位的单元。 被用于 :keyword:`del` 语句。"

#: ../../library/dis.rst:1547
msgid ""
"Copies the ``n`` :term:`free (closure) variables <closure variable>` from "
"the closure into the frame. Removes the need for special code on the "
"caller's side when calling closures."
msgstr ""
"将 ``n`` 个 :term:`自由（闭包）变量 <closure variable>` 从闭包拷贝到帧中。 "
"当调用闭包时不再需要调用方添加特殊的代码。"

#: ../../library/dis.rst:1556
msgid ""
"Raises an exception using one of the 3 forms of the ``raise`` statement, "
"depending on the value of *argc*:"
msgstr "使用 ``raise`` 语句的 3 种形式之一引发异常，具体形式取决于 *argc* 的值："

#: ../../library/dis.rst:1559
msgid "0: ``raise`` (re-raise previous exception)"
msgstr "0: ``raise`` (重新引发之前的异常)"

#: ../../library/dis.rst:1560
msgid ""
"1: ``raise STACK[-1]`` (raise exception instance or type at ``STACK[-1]``)"
msgstr "1: ``raise STACK[-1]`` （在 ``STACK[-1]`` 上引发异常实例或类型）"

#: ../../library/dis.rst:1561
msgid ""
"2: ``raise STACK[-2] from STACK[-1]`` (raise exception instance or type at "
"``STACK[-2]`` with ``__cause__`` set to ``STACK[-1]``)"
msgstr ""
"2: ``raise STACK[-2] from STACK[-1]`` （在 ``STACK[-2]`` 上引发异常实例或类型并将 "
"``__cause__`` 设为 ``STACK[-1]`` ）"

#: ../../library/dis.rst:1567
msgid ""
"Calls a callable object with the number of arguments specified by ``argc``. "
"On the stack are (in ascending order):"
msgstr "调用一个可调用对象并传入以 ``argc`` 指定的参数个数。 在栈上为（升序）："

#: ../../library/dis.rst:1570 ../../library/dis.rst:1594
msgid "The callable"
msgstr "可调用对象"

#: ../../library/dis.rst:1571 ../../library/dis.rst:1595
msgid "``self`` or ``NULL``"
msgstr "``self``或者``NULL``"

#: ../../library/dis.rst:1572 ../../library/dis.rst:1596
msgid "The remaining positional arguments"
msgstr "其余的位置参数"

#: ../../library/dis.rst:1574
msgid "``argc`` is the total of the positional arguments, excluding ``self``."
msgstr "``argc`` 是位置参数的数量，不包括 ``self``。"

#: ../../library/dis.rst:1576
msgid ""
"``CALL`` pops all arguments and the callable object off the stack, calls the"
" callable object with those arguments, and pushes the return value returned "
"by the callable object."
msgstr "``CALL`` 将把所有参数和可调用对象弹出栈，附带这些参数调用该可调用对象，并将该可调用对象的返回值推入栈。"

#: ../../library/dis.rst:1582
msgid "The callable now always appears at the same position on the stack."
msgstr "Callable现在总是出现在栈的同一位置。"

#: ../../library/dis.rst:1585
msgid "Calls with keyword arguments are now handled by :opcode:`CALL_KW`."
msgstr "有关键字参数的调用现在由 :opcode:`CALL_KW` 处理。"

#: ../../library/dis.rst:1591
msgid ""
"Calls a callable object with the number of arguments specified by ``argc``, "
"including one or more named arguments. On the stack are (in ascending "
"order):"
msgstr "调用一个可调用对象并传入由 ``argc`` 指定数量的参数。 在栈上为（升序）："

#: ../../library/dis.rst:1597
msgid "The named arguments"
msgstr "关键字参数"

#: ../../library/dis.rst:1598
msgid "A :class:`tuple` of keyword argument names"
msgstr "由关键字参数名称组成的 :class:`tuple`"

#: ../../library/dis.rst:1600
msgid ""
"``argc`` is the total of the positional and named arguments, excluding "
"``self``. The length of the tuple of keyword argument names is the number of"
" named arguments."
msgstr "``argc`` 是位置参数和关键字参数的总数，不包括 ``self``。 关键字参数名称元组的长度为关键字参数的数量。"

#: ../../library/dis.rst:1603
msgid ""
"``CALL_KW`` pops all arguments, the keyword names, and the callable object "
"off the stack, calls the callable object with those arguments, and pushes "
"the return value returned by the callable object."
msgstr "``CALL_KW`` 会将所有参数、关键字名称和可调用对象从栈中弹出，用这些参数调用可调用对象，并将返回值推入栈。"

#: ../../library/dis.rst:1612
msgid ""
"Calls a callable object with variable set of positional and keyword "
"arguments.  If the lowest bit of *flags* is set, the top of the stack "
"contains a mapping object containing additional keyword arguments. Before "
"the callable is called, the mapping object and iterable object are each "
"\"unpacked\" and their contents passed in as keyword and positional "
"arguments respectively. ``CALL_FUNCTION_EX`` pops all arguments and the "
"callable object off the stack, calls the callable object with those "
"arguments, and pushes the return value returned by the callable object."
msgstr ""
"调用一个可调用对象并附带位置参数和关键字参数变量集合。 如果设置了 *flags* 的最低位，则栈顶包含一个由额外关键字参数组成的映射对象。 "
"在调用该可调用对象之前，映射对象和可迭代对象会被分别“解包”并将它们的内容分别作为关键字参数和位置参数传入。 ``CALL_FUNCTION_EX`` "
"会中栈中弹出所有参数及可调用对象，附带这些参数调用该可调用对象，并将可调用对象所返回的返回值推入栈顶。"

#: ../../library/dis.rst:1627
msgid ""
"Pushes a ``NULL`` to the stack. Used in the call sequence to match the "
"``NULL`` pushed by :opcode:`LOAD_METHOD` for non-method calls."
msgstr ""
"将一个 ``NULL`` 推入栈。 在调用序列中用来匹配 :opcode:`LOAD_METHOD` 针对非方法调用推入栈的 ``NULL``。"

#: ../../library/dis.rst:1636
msgid ""
"Pushes a new function object on the stack built from the code object at "
"``STACK[-1]``."
msgstr "在 ``STACK[-1]`` 位置上将一个新函数对象推入从对象代码构建的栈。"

#: ../../library/dis.rst:1638
msgid "Flag value ``0x04`` is a tuple of strings instead of dictionary"
msgstr "旗标值 ``0x04`` 是一个字符串元组而非字典。"

#: ../../library/dis.rst:1641
msgid "Qualified name at ``STACK[-1]`` was removed."
msgstr "位于 ``STACK[-1]`` 的限定名称已被移除。"

#: ../../library/dis.rst:1644
msgid ""
"Extra function attributes on the stack, signaled by oparg flags, were "
"removed. They now use :opcode:`SET_FUNCTION_ATTRIBUTE`."
msgstr "操作参数曾指示额外的函数属性，现已被移除。 现在使用 :opcode:`SET_FUNCTION_ATTRIBUTE`。"

#: ../../library/dis.rst:1651
msgid ""
"Sets an attribute on a function object. Expects the function at "
"``STACK[-1]`` and the attribute value to set at ``STACK[-2]``; consumes both"
" and leaves the function at ``STACK[-1]``. The flag determines which "
"attribute to set:"
msgstr ""
"在函数对象上设置一个属性。将 ``STACK[-1]`` 的元素作为函数对象，``STACK[-2]`` "
"作为要设置的属性值，消耗这两个元素，将函数对象留在 ``STACK[-1]``。参数 flag 决定了要设置哪个属性："

#: ../../library/dis.rst:1655
msgid ""
"``0x01`` a tuple of default values for positional-only and positional-or-"
"keyword parameters in positional order"
msgstr "``0x01`` 一个默认值的元组，用于按位置排序的仅限位置形参以及位置或关键字形参"

#: ../../library/dis.rst:1657
msgid "``0x02`` a dictionary of keyword-only parameters' default values"
msgstr "``0x02`` 一个仅限关键字形参的默认值的字典"

#: ../../library/dis.rst:1658
msgid "``0x04`` a tuple of strings containing parameters' annotations"
msgstr "``0x04`` 一个包含形参标注的字符串元组。"

#: ../../library/dis.rst:1659
msgid "``0x08`` a tuple containing cells for free variables, making a closure"
msgstr "``0x08`` 一个包含用于自由变量的单元的元组，生成一个闭包"

#: ../../library/dis.rst:1668
msgid ""
"Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, "
"implements::"
msgstr "将一个切片对象推入栈中， *argc* 必须为2或3。 如果其为2，则实现："

#: ../../library/dis.rst:1670
msgid ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"STACK.append(slice(start, end))"
msgstr ""
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"STACK.append(slice(start, end))"

#: ../../library/dis.rst:1674
msgid "if it is 3, implements::"
msgstr "如果其为3，则实现："

#: ../../library/dis.rst:1676
msgid ""
"step = STACK.pop()\n"
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"STACK.append(slice(start, end, step))"
msgstr ""
"step = STACK.pop()\n"
"end = STACK.pop()\n"
"start = STACK.pop()\n"
"STACK.append(slice(start, end, step))"

#: ../../library/dis.rst:1681
msgid "See the :func:`slice` built-in function for more information."
msgstr "详见内置函数 :func:`slice` 。"

#: ../../library/dis.rst:1686
msgid ""
"Prefixes any opcode which has an argument too big to fit into the default "
"one byte. *ext* holds an additional byte which act as higher bits in the "
"argument. For each opcode, at most three prefixal ``EXTENDED_ARG`` are "
"allowed, forming an argument from two-byte to four-byte."
msgstr ""
"为任意带有大到无法放入默认的单字节的参数的操作码添加前缀。 *ext* 存放一个附加字节作为参数中的高比特位。 对于每个操作码，最多允许三个 "
"``EXTENDED_ARG`` 前缀，构成两字节到三字节的参数。"

#: ../../library/dis.rst:1694
msgid "Convert value to a string, depending on ``oparg``::"
msgstr "将值转化为字符串，以 ``oparg`` 指定的方式::"

#: ../../library/dis.rst:1696
msgid ""
"value = STACK.pop()\n"
"result = func(value)\n"
"STACK.append(result)"
msgstr ""
"value = STACK.pop()\n"
"result = func(value)\n"
"STACK.append(result)"

#: ../../library/dis.rst:1700
msgid "``oparg == 1``: call :func:`str` on *value*"
msgstr "``oparg == 1``: 在 *value* 上调用 :func:`str`"

#: ../../library/dis.rst:1701
msgid "``oparg == 2``: call :func:`repr` on *value*"
msgstr "``oparg == 2``: 在 *value* 上调用 :func:`repr`"

#: ../../library/dis.rst:1702
msgid "``oparg == 3``: call :func:`ascii` on *value*"
msgstr "``oparg == 3``: 在 *value* 上调用 :func:`ascii`"

#: ../../library/dis.rst:1704 ../../library/dis.rst:1717
#: ../../library/dis.rst:1730
msgid "Used for implementing formatted string literals (f-strings)."
msgstr "用于实现格式字符串字面值（f-字符串）。"

#: ../../library/dis.rst:1711
msgid "Formats the value on top of stack::"
msgstr "格式化栈顶的值::"

#: ../../library/dis.rst:1713
msgid ""
"value = STACK.pop()\n"
"result = value.__format__(\"\")\n"
"STACK.append(result)"
msgstr ""
"value = STACK.pop()\n"
"result = value.__format__(\"\")\n"
"STACK.append(result)"

#: ../../library/dis.rst:1723
msgid "Formats the given value with the given format spec::"
msgstr "使用给定的格式说明来格式化给定的值::"

#: ../../library/dis.rst:1725
msgid ""
"spec = STACK.pop()\n"
"value = STACK.pop()\n"
"result = value.__format__(spec)\n"
"STACK.append(result)"
msgstr ""
"spec = STACK.pop()\n"
"value = STACK.pop()\n"
"result = value.__format__(spec)\n"
"STACK.append(result)"

#: ../../library/dis.rst:1737
msgid ""
"``STACK[-1]`` is a tuple of keyword attribute names, ``STACK[-2]`` is the "
"class being matched against, and ``STACK[-3]`` is the match subject.  "
"*count* is the number of positional sub-patterns."
msgstr ""
"``STACK[-1]`` 是一个由关键字属性名称组成的元组，``STACK[-2]`` 是要匹配的类， 而 ``STACK[-3]`` "
"是匹配的目标主题。 *count* 是位置子模式的数量。"

#: ../../library/dis.rst:1741
msgid ""
"Pop ``STACK[-1]``, ``STACK[-2]``, and ``STACK[-3]``. If ``STACK[-3]`` is an "
"instance of ``STACK[-2]`` and has the positional and keyword attributes "
"required by *count* and ``STACK[-1]``, push a tuple of extracted attributes."
" Otherwise, push ``None``."
msgstr ""
"弹出 ``STACK[-1]``、``STACK[-2]`` 和 ``STACK[-3]``。 如果 ``STACK[-3]`` 是 "
"``STACK[-2]`` 的实例并且具有 *count* 和 ``STACK[-1]`` 所要求的位置和关键字属性，则推入一个由已提取属性组成的元组。"
" 在其他情况下，则推入 ``None``。"

#: ../../library/dis.rst:1755
msgid "A no-op. Performs internal tracing, debugging and optimization checks."
msgstr "空操作。 执行内部追踪、调试和优化检查。"

#: ../../library/dis.rst:1757
msgid ""
"The ``context`` operand consists of two parts. The lowest two bits indicate "
"where the ``RESUME`` occurs:"
msgstr "``context`` 操作数由两部分组成。 最低的两个比特位指明 ``RESUME`` 在何处发生："

#: ../../library/dis.rst:1760
msgid ""
"``0`` The start of a function, which is neither a generator, coroutine nor "
"an async generator"
msgstr "``0`` 在函数的开头。 函数不能是生成器、协程或者异步生成器。"

#: ../../library/dis.rst:1762
msgid "``1`` After a ``yield`` expression"
msgstr "``1`` 在 ``yield`` 表达式之后"

#: ../../library/dis.rst:1763
msgid "``2`` After a ``yield from`` expression"
msgstr "``2`` 在 ``yield from`` 表达式之后"

#: ../../library/dis.rst:1764
msgid "``3`` After an ``await`` expression"
msgstr "``3`` 在 ``await`` 表达式之后"

#: ../../library/dis.rst:1766
msgid ""
"The next bit is ``1`` if the RESUME is at except-depth ``1``, and ``0`` "
"otherwise."
msgstr "如果 RESUME 在 except 深度 ``1`` 上发生则下一个比特位值为 ``1``，否则为 ``0``。"

#: ../../library/dis.rst:1771
msgid "The oparg value changed to include information about except-depth"
msgstr "oparg 值已被修改以包括有关 except 深度的信息"

#: ../../library/dis.rst:1777
msgid ""
"Create a generator, coroutine, or async generator from the current frame. "
"Used as first opcode of in code object for the above mentioned callables. "
"Clear the current frame and return the newly created generator."
msgstr "从当前帧中创建一个生成器，协程，或者异步生成器。 被用作上述可调用对象的代码对象第一个操作码。 清除当前帧，返回新创建的生成器。"

#: ../../library/dis.rst:1786
msgid ""
"Equivalent to ``STACK[-1] = STACK[-2].send(STACK[-1])``. Used in ``yield "
"from`` and ``await`` statements."
msgstr ""
"等价于 ``STACK[-1] = STACK[-2].send(STACK[-1])`` 。 被用于 ``yield from`` 和 "
"``await`` 语句。"

#: ../../library/dis.rst:1789
msgid ""
"If the call raises :exc:`StopIteration`, pop the top value from the stack, "
"push the exception's ``value`` attribute, and increment the bytecode counter"
" by *delta*."
msgstr ""
"如果调用引发了 :exc:`StopIteration`，则从栈中弹出最上面的值，推入异常的 ``value`` 属性，并将字节码计数器值递增 "
"*delta*。"

#: ../../library/dis.rst:1798
msgid ""
"This is not really an opcode.  It identifies the dividing line between "
"opcodes in the range [0,255] which don't use their argument and those that "
"do (``< HAVE_ARGUMENT`` and ``>= HAVE_ARGUMENT``, respectively)."
msgstr ""
"这不是一个真正的操作码。 它是 [0,255] 范围内不使用参数和使用参数的操作码（分别是 ``< HAVE_ARGUMENT`` 和 ``>= "
"HAVE_ARGUMENT`` ）的分界线。"

#: ../../library/dis.rst:1802
msgid ""
"If your application uses pseudo instructions or specialized instructions, "
"use the :data:`hasarg` collection instead."
msgstr "如果你的应用程序使用了伪指令或专用指令，请改用 :data:`hasarg` 多项集。"

#: ../../library/dis.rst:1805
msgid ""
"Now every instruction has an argument, but opcodes ``< HAVE_ARGUMENT`` "
"ignore it. Before, only opcodes ``>= HAVE_ARGUMENT`` had an argument."
msgstr ""
"现在每条指令都带有参数，但操作码 ``< HAVE_ARGUMENT`` 会忽略它。 之前仅限操作码 ``>= HAVE_ARGUMENT`` "
"带有参数。"

#: ../../library/dis.rst:1809
msgid ""
"Pseudo instructions were added to the :mod:`dis` module, and for them it is "
"not true that comparison with ``HAVE_ARGUMENT`` indicates whether they use "
"their arg."
msgstr "伪指令被添加到 :mod:`dis` 模块中，对于它们来说，“比较 ``HAVE_ARGUMENT`` 以确定其是否使用参数”不再有效。"

#: ../../library/dis.rst:1814
msgid "Use :data:`hasarg` instead."
msgstr "使用 :data:`hasarg` 来代替。"

#: ../../library/dis.rst:1819
msgid ""
"Calls an intrinsic function with one argument. Passes ``STACK[-1]`` as the "
"argument and sets ``STACK[-1]`` to the result. Used to implement "
"functionality that is not performance critical."
msgstr ""
"调用内联的函数并附带一个参数。 传入 ``STACK[-1]`` 作为参数并将 ``STACK[-1]`` 设为结果。 用于实现对性能不敏感的功能。"

#: ../../library/dis.rst:1823 ../../library/dis.rst:1877
msgid "The operand determines which intrinsic function is called:"
msgstr "调用哪个内置函数取决于操作数："

#: ../../library/dis.rst:1826 ../../library/dis.rst:1880
msgid "Operand"
msgstr "操作数"

#: ../../library/dis.rst:1826 ../../library/dis.rst:1880
msgid "Description"
msgstr "描述"

#: ../../library/dis.rst:1828
msgid "``INTRINSIC_1_INVALID``"
msgstr "``INTRINSIC_1_INVALID``"

#: ../../library/dis.rst:1828 ../../library/dis.rst:1882
msgid "Not valid"
msgstr "无效"

#: ../../library/dis.rst:1830
msgid "``INTRINSIC_PRINT``"
msgstr "``INTRINSIC_PRINT``"

#: ../../library/dis.rst:1830
msgid "Prints the argument to standard out. Used in the REPL."
msgstr "将参数打印到标准输出。 被用于 REPL 。"

#: ../../library/dis.rst:1833
msgid "``INTRINSIC_IMPORT_STAR``"
msgstr "``INTRINSIC_IMPORT_STAR``"

#: ../../library/dis.rst:1833
msgid "Performs ``import *`` for the named module."
msgstr "为指定模块执行 ``import *`` 。"

#: ../../library/dis.rst:1836
msgid "``INTRINSIC_STOPITERATION_ERROR``"
msgstr "``INTRINSIC_STOPITERATION_ERROR``"

#: ../../library/dis.rst:1836
msgid "Extracts the return value from a ``StopIteration`` exception."
msgstr "从 ``StopIteration`` 异常中提取返回值。"

#: ../../library/dis.rst:1839
msgid "``INTRINSIC_ASYNC_GEN_WRAP``"
msgstr "``INTRINSIC_ASYNC_GEN_WRAP``"

#: ../../library/dis.rst:1839
msgid "Wraps an async generator value"
msgstr "包裹一个异常生成器值"

#: ../../library/dis.rst:1841
msgid "``INTRINSIC_UNARY_POSITIVE``"
msgstr "``INTRINSIC_UNARY_POSITIVE``"

#: ../../library/dis.rst:1841
msgid "Performs the unary ``+`` operation"
msgstr "执行单目运算符 ``+`` "

#: ../../library/dis.rst:1844
msgid "``INTRINSIC_LIST_TO_TUPLE``"
msgstr "``INTRINSIC_LIST_TO_TUPLE``"

#: ../../library/dis.rst:1844
msgid "Converts a list to a tuple"
msgstr "将一个列表转换为元组"

#: ../../library/dis.rst:1846
msgid "``INTRINSIC_TYPEVAR``"
msgstr "``INTRINSIC_TYPEVAR``"

#: ../../library/dis.rst:1846
msgid "Creates a :class:`typing.TypeVar`"
msgstr "创建一个 :class:`typing.TypeVar` "

#: ../../library/dis.rst:1848
msgid "``INTRINSIC_PARAMSPEC``"
msgstr "``INTRINSIC_PARAMSPEC``"

#: ../../library/dis.rst:1848
msgid "Creates a :class:`typing.ParamSpec`"
msgstr "创建一个 :class:`typing.ParamSpec`"

#: ../../library/dis.rst:1851
msgid "``INTRINSIC_TYPEVARTUPLE``"
msgstr "``INTRINSIC_TYPEVARTUPLE``"

#: ../../library/dis.rst:1851
msgid "Creates a :class:`typing.TypeVarTuple`"
msgstr "创建一个 :class:`typing.TypeVarTuple`"

#: ../../library/dis.rst:1854
msgid "``INTRINSIC_SUBSCRIPT_GENERIC``"
msgstr "``INTRINSIC_SUBSCRIPT_GENERIC``"

#: ../../library/dis.rst:1854
msgid "Returns :class:`typing.Generic` subscripted with the argument"
msgstr "返回 :class:`typing.Generic` 取参数下标。"

#: ../../library/dis.rst:1857
msgid "``INTRINSIC_TYPEALIAS``"
msgstr "``INTRINSIC_TYPEALIAS``"

#: ../../library/dis.rst:1857
msgid ""
"Creates a :class:`typing.TypeAliasType`; used in the :keyword:`type` "
"statement. The argument is a tuple of the type alias's name, type "
"parameters, and value."
msgstr ""
"创建一个 :class:`typing.TypeAliasType` ；被用于 :keyword:`type` 语句。 "
"参数是一个由类型别名的名称、类型形参和值组成的元组。"

#: ../../library/dis.rst:1869
msgid ""
"Calls an intrinsic function with two arguments. Used to implement "
"functionality that is not performance critical::"
msgstr "调用内联的函数并附带两个参数。 用于实现对性能不敏感的功能::"

#: ../../library/dis.rst:1872
msgid ""
"arg2 = STACK.pop()\n"
"arg1 = STACK.pop()\n"
"result = intrinsic2(arg1, arg2)\n"
"STACK.append(result)"
msgstr ""
"arg2 = STACK.pop()\n"
"arg1 = STACK.pop()\n"
"result = intrinsic2(arg1, arg2)\n"
"STACK.append(result)"

#: ../../library/dis.rst:1882
msgid "``INTRINSIC_2_INVALID``"
msgstr "``INTRINSIC_2_INVALID``"

#: ../../library/dis.rst:1884
msgid "``INTRINSIC_PREP_RERAISE_STAR``"
msgstr "``INTRINSIC_PREP_RERAISE_STAR``"

#: ../../library/dis.rst:1884
msgid "Calculates the :exc:`ExceptionGroup` to raise from a ``try-except*``."
msgstr "计算 :exc:`ExceptionGroup` 以从 ``try-except*`` 中引发异常。"

#: ../../library/dis.rst:1888
msgid "``INTRINSIC_TYPEVAR_WITH_BOUND``"
msgstr "``INTRINSIC_TYPEVAR_WITH_BOUND``"

#: ../../library/dis.rst:1888
msgid "Creates a :class:`typing.TypeVar` with a bound."
msgstr "创建一个带范围的 :class:`typing.TypeVar` 。"

#: ../../library/dis.rst:1891
msgid "``INTRINSIC_TYPEVAR_WITH_CONSTRAINTS``"
msgstr "``INTRINSIC_TYPEVAR_WITH_CONSTRAINTS``"

#: ../../library/dis.rst:1891
msgid "Creates a :class:`typing.TypeVar` with constraints."
msgstr "创建一个带约束的 :class:`typing.TypeVar` 。"

#: ../../library/dis.rst:1895
msgid "``INTRINSIC_SET_FUNCTION_TYPE_PARAMS``"
msgstr "``INTRINSIC_SET_FUNCTION_TYPE_PARAMS``"

#: ../../library/dis.rst:1895
msgid "Sets the ``__type_params__`` attribute of a function."
msgstr "为一个函数设置 ``__type_params__`` 属性。"

#: ../../library/dis.rst:1904
msgid ""
"Performs special method lookup on ``STACK[-1]``. If "
"``type(STACK[-1]).__xxx__`` is a method, leave ``type(STACK[-1]).__xxx__; "
"STACK[-1]`` on the stack. If ``type(STACK[-1]).__xxx__`` is not a method, "
"leave ``STACK[-1].__xxx__; NULL`` on the stack."
msgstr ""
"在 ``STACK[-1]`` 上执行特殊方法查找。 如果 ``type(STACK[-1]).__xxx__`` 是一个方法，则将 "
"``type(STACK[-1]).__xxx__; STACK[-1]`` 留在栈中。 如果 ``type(STACK[-1]).__xxx__`` "
"不是一个方法，则将 ``STACK[-1].__xxx__; NULL`` 留在栈中。"

#: ../../library/dis.rst:1913
msgid "**Pseudo-instructions**"
msgstr "**伪指令**"

#: ../../library/dis.rst:1915
msgid ""
"These opcodes do not appear in Python bytecode. They are used by the "
"compiler but are replaced by real opcodes or removed before bytecode is "
"generated."
msgstr "这些操作码并不出现在 Python 的字节码之中。 它们被编译器所使用，但在生成字节码之前会被替代成真正的操作码。"

#: ../../library/dis.rst:1920
msgid ""
"Set up an exception handler for the following code block. If an exception "
"occurs, the value stack level is restored to its current state and control "
"is transferred to the exception handler at ``target``."
msgstr "为下面的代码块设置一个异常处理器。 如果发生异常，值栈的级别将恢复到当前状态并将控制权移交给位于 ``target`` 的异常处理器。"

#: ../../library/dis.rst:1927
msgid ""
"Like ``SETUP_FINALLY``, but in case of an exception also pushes the last "
"instruction (``lasti``) to the stack so that ``RERAISE`` can restore it. If "
"an exception occurs, the value stack level and the last instruction on the "
"frame are restored to their current state, and control is transferred to the"
" exception handler at ``target``."
msgstr ""
"与 ``SETUP_FINALLY`` 类似，但在出现异常的情况下也会将最后一条指令 (``lasti``) 推入栈以便 ``RERAISE`` "
"能恢复它。 如果出现异常，栈级别值和帧上的最后一条指令将恢复为其当前状态，控制权将转移到 ``target`` 上的异常处理器。"

#: ../../library/dis.rst:1936
msgid ""
"Like ``SETUP_CLEANUP``, but in case of an exception one more item is popped "
"from the stack before control is transferred to the exception handler at "
"``target``."
msgstr ""
"与 ``SETUP_CLEANUP`` 类似，但在出现异常的情况下会从栈中再弹出一项然后将控制权转移到 ``target`` 上的异常处理器。"

#: ../../library/dis.rst:1940
msgid ""
"This variant is used in :keyword:`with` and :keyword:`async with` "
"constructs, which push the return value of the context manager's "
":meth:`~object.__enter__` or :meth:`~object.__aenter__` to the stack."
msgstr ""
"该变体形式用于 :keyword:`with` 和 :keyword:`async with` 结构，它们会将上下文管理器的 "
":meth:`~object.__enter__` 或 :meth:`~object.__aenter__` 的返回值推入栈。"

#: ../../library/dis.rst:1947
msgid ""
"Marks the end of the code block associated with the last ``SETUP_FINALLY``, "
"``SETUP_CLEANUP`` or ``SETUP_WITH``."
msgstr ""
"标记与最后一个 ``SETUP_FINALLY``、``SETUP_CLEANUP`` 或 ``SETUP_WITH`` 相关联的代码块的结束。"

#: ../../library/dis.rst:1953
msgid ""
"Undirected relative jump instructions which are replaced by their directed "
"(forward/backward) counterparts by the assembler."
msgstr "非定向相对跳转指令会被汇编器转换为它们定向版本（ forward/backward ）"

#: ../../library/dis.rst:1959
msgid ""
"Conditional jumps which do not impact the stack. Replaced by the sequence "
"``COPY 1``, ``TO_BOOL``, ``POP_JUMP_IF_TRUE/FALSE``."
msgstr ""
"不会对栈造成影响的有条件跳转。 由序列 ``COPY 1``, ``TO_BOOL``, ``POP_JUMP_IF_TRUE/FALSE`` 代替。"

#: ../../library/dis.rst:1964
msgid ""
"Pushes a reference to the cell contained in slot ``i`` of the \"fast "
"locals\" storage."
msgstr "将一个引用推入到 \"fast locals\" 存储包含在 ``i`` 号槽位的单元内。"

#: ../../library/dis.rst:1967
msgid ""
"Note that ``LOAD_CLOSURE`` is replaced with ``LOAD_FAST`` in the assembler."
msgstr "请注意在汇编程序中 ``LOAD_CLOSURE`` 将被替换为 ``LOAD_FAST``。"

#: ../../library/dis.rst:1969
msgid "This opcode is now a pseudo-instruction."
msgstr "该操作码现在是一个伪指令。"

#: ../../library/dis.rst:1975
msgid ""
"Optimized unbound method lookup. Emitted as a ``LOAD_ATTR`` opcode with a "
"flag set in the arg."
msgstr "经优化的非绑定方法查找。 以在 arg 中设置了旗标的 ``LOAD_ATTR`` 操作码的形式发出。"

#: ../../library/dis.rst:1982
msgid "Opcode collections"
msgstr "操作码集合"

#: ../../library/dis.rst:1984
msgid ""
"These collections are provided for automatic introspection of bytecode "
"instructions:"
msgstr "提供这些集合用于字节码指令的自动内省："

#: ../../library/dis.rst:1987
msgid ""
"The collections now contain pseudo instructions and instrumented "
"instructions as well. These are opcodes with values ``>= MIN_PSEUDO_OPCODE``"
" and ``>= MIN_INSTRUMENTED_OPCODE``."
msgstr ""
"现在此集合还包含一些伪指令和工具化指令。 这些操作码的值 ``>= MIN_PSEUDO_OPCODE`` 和 ``>= "
"MIN_INSTRUMENTED_OPCODE``。"

#: ../../library/dis.rst:1994
msgid "Sequence of operation names, indexable using the bytecode."
msgstr "操作名称的序列，可使用字节码来索引。"

#: ../../library/dis.rst:1999
msgid "Dictionary mapping operation names to bytecodes."
msgstr "映射操作名称到字节码的字典"

#: ../../library/dis.rst:2004
msgid "Sequence of all compare operation names."
msgstr "所有比较操作名称的序列。"

#: ../../library/dis.rst:2009
msgid "Sequence of bytecodes that use their argument."
msgstr "所有使用参数的字节码的序列"

#: ../../library/dis.rst:2016
msgid "Sequence of bytecodes that access a constant."
msgstr "访问常量的字节码序列。"

#: ../../library/dis.rst:2021
msgid ""
"Sequence of bytecodes that access a :term:`free (closure) variable <closure "
"variable>`. 'free' in this context refers to names in the current scope that"
" are referenced by inner scopes or names in outer scopes that are referenced"
" from this scope.  It does *not* include references to global or builtin "
"scopes."
msgstr ""
"访问 :term:`自由（闭包）变量 <closure variable>` 的字节码序列。 "
"这里所说的‘自由’是指在当前作用域中被内层作用域所引用的名称，或在外层作用域中被此作用域所引用的名称。 它 *并不* 包括对全局或内置作用域的引用。"

#: ../../library/dis.rst:2029
msgid "Sequence of bytecodes that access an attribute by name."
msgstr "按名称访问属性的字节码序列。"

#: ../../library/dis.rst:2034
msgid "Sequence of bytecodes that have a jump target. All jumps are relative."
msgstr "具有一个跳转目标的字节码序列。 所有跳转都是相对的。"

#: ../../library/dis.rst:2041
msgid "Sequence of bytecodes that access a local variable."
msgstr "访问局部变量的字节码序列。"

#: ../../library/dis.rst:2046
msgid "Sequence of bytecodes of Boolean operations."
msgstr "布尔运算的字节码序列。"

#: ../../library/dis.rst:2050
msgid "Sequence of bytecodes that set an exception handler."
msgstr "设置一个异常处理器的字节码序列。"

#: ../../library/dis.rst:2057
msgid "Sequence of bytecodes that have a relative jump target."
msgstr "具有相对跳转目标的字节码序列。"

#: ../../library/dis.rst:2059
msgid "All jumps are now relative. Use :data:`hasjump`."
msgstr "所有跳转现在都是相对的。 使用 :data:`hasjump`。"

#: ../../library/dis.rst:2065
msgid "Sequence of bytecodes that have an absolute jump target."
msgstr "具有绝对跳转目标的字节码序列。"

#: ../../library/dis.rst:2067
msgid "All jumps are now relative. This list is empty."
msgstr "所有跳转现在都是相对的。 该列表将为空。"

#: ../../library/dis.rst:1666
msgid "built-in function"
msgstr "内置函数"

#: ../../library/dis.rst:1666
msgid "slice"
msgstr "slice -- 切片"
