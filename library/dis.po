# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dis.rst:2
msgid ":mod:`dis` --- Disassembler for Python bytecode"
msgstr ":mod:`dis` --- Python 字节码反汇编器"

#: ../../library/dis.rst:7
msgid "**Source code:** :source:`Lib/dis.py`"
msgstr "**源代码:** :source:`Lib/dis.py`"

#: ../../library/dis.rst:17
msgid ""
"The :mod:`dis` module supports the analysis of CPython :term:`bytecode` by "
"disassembling it. The CPython bytecode which this module takes as an input "
"is defined in the file :file:`Include/opcode.h` and used by the compiler and"
" the interpreter."
msgstr ""
":mod:`dis` 模块通过反汇编支持CPython的 :term:`bytecode` 分析。该模块作为输入的 CPython 字节码在文件 "
":file:`Include/opcode.h` 中定义，并由编译器和解释器使用。"

#: ../../library/dis.rst:24
msgid ""
"Bytecode is an implementation detail of the CPython interpreter.  No "
"guarantees are made that bytecode will not be added, removed, or changed "
"between versions of Python.  Use of this module should not be considered to "
"work across Python VMs or Python releases."
msgstr ""
"字节码是 CPython 解释器的实现细节。不保证不会在Python版本之间添加、删除或更改字节码。不应考虑将此模块的跨 Python VM 或 "
"Python 版本的使用。"

#: ../../library/dis.rst:29
msgid ""
"Use 2 bytes for each instruction. Previously the number of bytes varied by "
"instruction."
msgstr "每条指令使用2个字节。以前字节数因指令而异。"

#: ../../library/dis.rst:33
msgid ""
"The argument of jump, exception handling and loop instructions is now the "
"instruction offset rather than the byte offset."
msgstr "跳转、异常处理和循环指令的参数现在将为指令偏移量而不是字节偏移量。"

#: ../../library/dis.rst:37
msgid ""
"Some instructions are accompanied by one or more inline cache entries, which"
" take the form of :opcode:`CACHE` instructions. These instructions are "
"hidden by default, but can be shown by passing ``show_caches=True`` to any "
":mod:`dis` utility. Furthermore, the interpreter now adapts the bytecode to "
"specialize it for different runtime conditions. The adaptive bytecode can be"
" shown by passing ``adaptive=True``."
msgstr ""
"有些指令带有一个或多个内联缓存条目，它们是采用 :opcode:`CACHE` 指令的形式。 这些指令默认是隐藏的，但可以通过将 "
"``show_caches=True`` 传给任何 :mod:`dis` 工具对象来显示。 "
"此外，解释器现在会适配字节码以使其能针对不同的运行时条件实现专门化。 适配的字节码可通过传入 ``adaptive=True`` 来显示。"

#: ../../library/dis.rst:46
msgid "Example: Given the function :func:`myfunc`::"
msgstr "示例：给出函数 :func:`myfunc`::"

#: ../../library/dis.rst:51
msgid ""
"the following command can be used to display the disassembly of "
":func:`myfunc`:"
msgstr "以下命令可被用来显示 :func:`myfunc` 的反汇编:"

#: ../../library/dis.rst:65
msgid "(The \"2\" is a line number)."
msgstr "(\"2\" 是行号)。"

#: ../../library/dis.rst:70
msgid "Command-line interface"
msgstr "命令行接口"

#: ../../library/dis.rst:72
msgid ""
"The :mod:`dis` module can be invoked as a script from the command line:"
msgstr ":mod:`dis` 模块可以在命令行下作为一个脚本来唤起："

#: ../../library/dis.rst:78
msgid "The following options are accepted:"
msgstr "可以接受以下选项："

#: ../../library/dis.rst:84
msgid "Display usage and exit."
msgstr "显示用法并退出。"

#: ../../library/dis.rst:88
msgid "Show inline caches."
msgstr ""

#: ../../library/dis.rst:90
msgid ""
"If :file:`infile` is specified, its disassembled code will be written to "
"stdout. Otherwise, disassembly is performed on compiled source code recieved"
" from stdin."
msgstr "如果指定了 :file:`infile`，其反汇编代码将被写入到标准输出。 否则，反汇编将在从标准输入接收的已编译源代码上进行。"

#: ../../library/dis.rst:94
msgid "Bytecode analysis"
msgstr "字节码分析"

#: ../../library/dis.rst:98
msgid ""
"The bytecode analysis API allows pieces of Python code to be wrapped in a "
":class:`Bytecode` object that provides easy access to details of the "
"compiled code."
msgstr "字节码分析 API 允许将 Python 代码片段包装在 :class:`Bytecode` 对象中，以便轻松访问已编译代码的详细信息。"

#: ../../library/dis.rst:105
msgid ""
"Analyse the bytecode corresponding to a function, generator, asynchronous "
"generator, coroutine, method, string of source code, or a code object (as "
"returned by :func:`compile`)."
msgstr "分析的字节码对应于函数、生成器、异步生成器、协程、方法、源代码字符串或代码对象（由 :func:`compile` 返回）。"

#: ../../library/dis.rst:109
msgid ""
"This is a convenience wrapper around many of the functions listed below, "
"most notably :func:`get_instructions`, as iterating over a :class:`Bytecode`"
" instance yields the bytecode operations as :class:`Instruction` instances."
msgstr ""
"这是下面列出的许多函数的便利包装，最值得注意的是 :func:`get_instructions` ，迭代于 :class:`Bytecode` "
"的实例产生字节码操作 :class:`Instruction` 的实例。"

#: ../../library/dis.rst:113 ../../library/dis.rst:302
msgid ""
"If *first_line* is not ``None``, it indicates the line number that should be"
" reported for the first source line in the disassembled code.  Otherwise, "
"the source line information (if any) is taken directly from the disassembled"
" code object."
msgstr ""
"如果 *first_line* 不是 ``None`` "
"，则表示应该为反汇编代码中的第一个源代码行报告的行号。否则，源行信息（如果有的话）直接来自反汇编的代码对象。"

#: ../../library/dis.rst:118
msgid ""
"If *current_offset* is not ``None``, it refers to an instruction offset in "
"the disassembled code. Setting this means :meth:`.dis` will display a "
"\"current instruction\" marker against the specified opcode."
msgstr ""
"如果 *current_offset* 不是 ``None`` ，它指的就是汇编代码中的指令偏移量。设置它意味着 :meth:`.dis` "
"将针对指定的操作码显示“当前指令”标记。"

#: ../../library/dis.rst:122
msgid ""
"If *show_caches* is ``True``, :meth:`.dis` will display inline cache entries"
" used by the interpreter to specialize the bytecode."
msgstr "如果 *show_caches* 为 ``True``，:meth:`.dis` 将显示解释器用来专门化字节码的内联缓存条目。"

#: ../../library/dis.rst:125
msgid ""
"If *adaptive* is ``True``, :meth:`.dis` will display specialized bytecode "
"that may be different from the original bytecode."
msgstr "如果 *adaptive* 为 ``True``，:meth:`.dis` 将显示可能不同于原始字节码的专门化字节码。"

#: ../../library/dis.rst:130
msgid ""
"Construct a :class:`Bytecode` instance from the given traceback, setting "
"*current_offset* to the instruction responsible for the exception."
msgstr "从给定回溯构造一个 :class:`Bytecode` 实例，将设置 *current_offset* 为异常负责的指令。"

#: ../../library/dis.rst:135
msgid "The compiled code object."
msgstr "已编译的代码对象。"

#: ../../library/dis.rst:139
msgid "The first source line of the code object (if available)"
msgstr "代码对象的第一个源代码行（如果可用）"

#: ../../library/dis.rst:143
msgid ""
"Return a formatted view of the bytecode operations (the same as printed by "
":func:`dis.dis`, but returned as a multi-line string)."
msgstr "返回字节码操作的格式化视图（与 :func:`dis.dis` 打印相同，但作为多行字符串返回）。"

#: ../../library/dis.rst:148
msgid ""
"Return a formatted multi-line string with detailed information about the "
"code object, like :func:`code_info`."
msgstr "返回带有关于代码对象的详细信息的格式化多行字符串，如 :func:`code_info` 。"

#: ../../library/dis.rst:151 ../../library/dis.rst:192
#: ../../library/dis.rst:244
msgid "This can now handle coroutine and asynchronous generator objects."
msgstr "现在可以处理协程和异步生成器对象。"

#: ../../library/dis.rst:154 ../../library/dis.rst:247
#: ../../library/dis.rst:263 ../../library/dis.rst:290
#: ../../library/dis.rst:311
msgid "Added the *show_caches* and *adaptive* parameters."
msgstr "增加了 *show_caches* 和 *adaptive* 形参。"

#: ../../library/dis.rst:157
msgid "Example:"
msgstr "示例:"

#: ../../library/dis.rst:174
msgid "Analysis functions"
msgstr "分析函数"

#: ../../library/dis.rst:176
msgid ""
"The :mod:`dis` module also defines the following analysis functions that "
"convert the input directly to the desired output. They can be useful if only"
" a single operation is being performed, so the intermediate analysis object "
"isn't useful:"
msgstr ":mod:`dis` 模块还定义了以下分析函数，它们将输入直接转换为所需的输出。如果只执行单个操作，它们可能很有用，因此中间分析对象没用："

#: ../../library/dis.rst:182
msgid ""
"Return a formatted multi-line string with detailed code object information "
"for the supplied function, generator, asynchronous generator, coroutine, "
"method, source code string or code object."
msgstr "返回格式化的多行字符串，其包含详细代码对象信息的用于被提供的函数、生成器、异步生成器、协程、方法、源代码字符串或代码对象。"

#: ../../library/dis.rst:186
msgid ""
"Note that the exact contents of code info strings are highly implementation "
"dependent and they may change arbitrarily across Python VMs or Python "
"releases."
msgstr "请注意，代码信息字符串的确切内容是高度依赖于实现的，它们可能会在Python VM或Python版本中任意更改。"

#: ../../library/dis.rst:198
msgid ""
"Print detailed code object information for the supplied function, method, "
"source code string or code object to *file* (or ``sys.stdout`` if *file* is "
"not specified)."
msgstr ""
"将提供的函数、方法。源代码字符串或代码对象的详细代码对象信息打印到 *file* （如果未指定 *file* ，则为 ``sys.stdout`` ）。"

#: ../../library/dis.rst:202
msgid ""
"This is a convenient shorthand for ``print(code_info(x), file=file)``, "
"intended for interactive exploration at the interpreter prompt."
msgstr "这是 ``print(code_info(x), file=file)`` 的便捷简写，用于在解释器提示符下进行交互式探索。"

#: ../../library/dis.rst:207 ../../library/dis.rst:238
#: ../../library/dis.rst:260 ../../library/dis.rst:287
msgid "Added *file* parameter."
msgstr "添加 *file* 形参。"

#: ../../library/dis.rst:213
msgid ""
"Disassemble the *x* object.  *x* can denote either a module, a class, a "
"method, a function, a generator, an asynchronous generator, a coroutine, a "
"code object, a string of source code or a byte sequence of raw bytecode. For"
" a module, it disassembles all functions. For a class, it disassembles all "
"methods (including class and static methods). For a code object or sequence "
"of raw bytecode, it prints one line per bytecode instruction. It also "
"recursively disassembles nested code objects (the code of comprehensions, "
"generator expressions and nested functions, and the code used for building "
"nested classes). Strings are first compiled to code objects with the "
":func:`compile` built-in function before being disassembled.  If no object "
"is provided, this function disassembles the last traceback."
msgstr ""

#: ../../library/dis.rst:226 ../../library/dis.rst:257
#: ../../library/dis.rst:284
msgid ""
"The disassembly is written as text to the supplied *file* argument if "
"provided and to ``sys.stdout`` otherwise."
msgstr "如果提供的话，反汇编将作为文本写入提供的 *file* 参数，否则写入 ``sys.stdout`` 。"

#: ../../library/dis.rst:229
msgid ""
"The maximal depth of recursion is limited by *depth* unless it is ``None``. "
"``depth=0`` means no recursion."
msgstr "递归的最大深度受 *depth* 限制，除非它是 ``None`` 。 ``depth=0`` 表示没有递归。"

#: ../../library/dis.rst:232
msgid ""
"If *show_caches* is ``True``, this function will display inline cache "
"entries used by the interpreter to specialize the bytecode."
msgstr "如果 *show_caches* 为 ``True``，此函数将显示解释器用来专门化字节码的内联缓存条目。"

#: ../../library/dis.rst:235
msgid ""
"If *adaptive* is ``True``, this function will display specialized bytecode "
"that may be different from the original bytecode."
msgstr "如果 *adaptive* 为 ``True``，此函数将显示可能不同于原始字节码的专门化字节码。"

#: ../../library/dis.rst:241
msgid "Implemented recursive disassembling and added *depth* parameter."
msgstr "实现了递归反汇编并添加了 *depth* 参数。"

#: ../../library/dis.rst:253
msgid ""
"Disassemble the top-of-stack function of a traceback, using the last "
"traceback if none was passed.  The instruction causing the exception is "
"indicated."
msgstr "如果没有传递，则使用最后一个回溯来反汇编回溯的堆栈顶部函数。 指示了导致异常的指令。"

#: ../../library/dis.rst:270
msgid ""
"Disassemble a code object, indicating the last instruction if *lasti* was "
"provided.  The output is divided in the following columns:"
msgstr "反汇编代码对象，如果提供了 *lasti* ，则指示最后一条指令。输出分为以下几列："

#: ../../library/dis.rst:273
msgid "the line number, for the first instruction of each line"
msgstr "行号，用于每行的第一条指令"

#: ../../library/dis.rst:274
msgid "the current instruction, indicated as ``-->``,"
msgstr "当前指令，表示为 ``-->`` ，"

#: ../../library/dis.rst:275
msgid "a labelled instruction, indicated with ``>>``,"
msgstr "一个标记的指令，用 ``>>`` 表示，"

#: ../../library/dis.rst:276
msgid "the address of the instruction,"
msgstr "指令的地址，"

#: ../../library/dis.rst:277
msgid "the operation code name,"
msgstr "操作码名称，"

#: ../../library/dis.rst:278
msgid "operation parameters, and"
msgstr "操作参数，和"

#: ../../library/dis.rst:279
msgid "interpretation of the parameters in parentheses."
msgstr "括号中参数的解释。"

#: ../../library/dis.rst:281
msgid ""
"The parameter interpretation recognizes local and global variable names, "
"constant values, branch targets, and compare operators."
msgstr "参数解释识别本地和全局变量名称、常量值、分支目标和比较运算符。"

#: ../../library/dis.rst:296
msgid ""
"Return an iterator over the instructions in the supplied function, method, "
"source code string or code object."
msgstr "在所提供的函数、方法、源代码字符串或代码对象中的指令上返回一个迭代器。"

#: ../../library/dis.rst:299
msgid ""
"The iterator generates a series of :class:`Instruction` named tuples giving "
"the details of each operation in the supplied code."
msgstr "迭代器生成一系列 :class:`Instruction` ，命名为元组，提供所提供代码中每个操作的详细信息。"

#: ../../library/dis.rst:307
msgid ""
"The *show_caches* and *adaptive* parameters work as they do in :func:`dis`."
msgstr "*show_caches* 和 *adaptive* 形参的作用与 :func:`dis` 中的同名形参相同。"

#: ../../library/dis.rst:317
msgid ""
"This generator function uses the :meth:`~codeobject.co_lines` method of the "
":ref:`code object <code-objects>` *code* to find the offsets which are "
"starts of lines in the source code.  They are generated as ``(offset, "
"lineno)`` pairs."
msgstr ""
"这个生成器函数使用 :ref:`代码对象 <code-objects>` *code* 的 :meth:`~codeobject.co_lines` "
"方法来查找源代码中行开头的偏移量。 它们将作为 ``(offset, lineno)`` 对被生成。"

#: ../../library/dis.rst:322
msgid "Line numbers can be decreasing. Before, they were always increasing."
msgstr "行号可能会减少。 以前，他们总是在增加。"

#: ../../library/dis.rst:325
msgid ""
"The :pep:`626` :meth:`~codeobject.co_lines` method is used instead of the "
":attr:`~codeobject.co_firstlineno` and :attr:`~codeobject.co_lnotab` "
"attributes of the :ref:`code object <code-objects>`."
msgstr ""
"使用 :pep:`626` :meth:`~codeobject.co_lines` 方法而不是 :ref:`代码对象 <code-objects>` "
"的 :attr:`~codeobject.co_firstlineno` 和 :attr:`~codeobject.co_lnotab` 属性。"

#: ../../library/dis.rst:333
msgid ""
"Detect all offsets in the raw compiled bytecode string *code* which are jump"
" targets, and return a list of these offsets."
msgstr "检测作为跳转目标的原始编译后字节码字符串 *code* 中的所有偏移量，并返回这些偏移量的列表。"

#: ../../library/dis.rst:339
msgid "Compute the stack effect of *opcode* with argument *oparg*."
msgstr "使用参数 *oparg* 计算 *opcode* 的堆栈效果。"

#: ../../library/dis.rst:341
msgid ""
"If the code has a jump target and *jump* is ``True``, :func:`~stack_effect` "
"will return the stack effect of jumping.  If *jump* is ``False``, it will "
"return the stack effect of not jumping. And if *jump* is ``None`` (default),"
" it will return the maximal stack effect of both cases."
msgstr ""
"如果代码有一个跳转目标并且 *jump* 是 ``True`` ，则 :func:`~drag_effect` 将返回跳转的堆栈效果。如果 *jump*"
" 是 ``False`` ，它将返回不跳跃的堆栈效果。如果 *jump* 是 ``None`` （默认值），它将返回两种情况的最大堆栈效果。"

#: ../../library/dis.rst:348
msgid "Added *jump* parameter."
msgstr "添加 *jump* 参数。"

#: ../../library/dis.rst:355
msgid "Python Bytecode Instructions"
msgstr "Python字节码说明"

#: ../../library/dis.rst:357
msgid ""
"The :func:`get_instructions` function and :class:`Bytecode` class provide "
"details of bytecode instructions as :class:`Instruction` instances:"
msgstr ""
":func:`get_instructions` 函数和 :class:`Bytecode` 类提供字节码指令的详细信息的 "
":class:`Instruction` 实例："

#: ../../library/dis.rst:362
msgid "Details for a bytecode operation"
msgstr "字节码操作的详细信息"

#: ../../library/dis.rst:366
msgid ""
"numeric code for operation, corresponding to the opcode values listed below "
"and the bytecode values in the :ref:`opcode_collections`."
msgstr "操作的数字代码，对应于下面列出的操作码值和 :ref:`opcode_collections` 中的字节码值。"

#: ../../library/dis.rst:372
msgid "human readable name for operation"
msgstr "人类可读的操作名称"

#: ../../library/dis.rst:377
msgid "numeric argument to operation (if any), otherwise ``None``"
msgstr "操作的数字参数（如果有的话），否则为 ``None``"

#: ../../library/dis.rst:382
msgid "resolved arg value (if any), otherwise ``None``"
msgstr "已解析的 arg 值（如果有的话），否则为 ``None``"

#: ../../library/dis.rst:387
msgid ""
"human readable description of operation argument (if any), otherwise an "
"empty string."
msgstr "人类可读的操作参数（如果存在）的描述，否则为空字符串。"

#: ../../library/dis.rst:393
msgid "start index of operation within bytecode sequence"
msgstr "在字节码序列中的起始操作索引"

#: ../../library/dis.rst:398
msgid "line started by this opcode (if any), otherwise ``None``"
msgstr "行由此操作码（如果有）启动，否则为 ``None``"

#: ../../library/dis.rst:403
msgid "``True`` if other code jumps to here, otherwise ``False``"
msgstr "如果其他代码跳到这里，则为 ``True`` ，否则为 ``False``"

#: ../../library/dis.rst:408
msgid ""
":class:`dis.Positions` object holding the start and end locations that are "
"covered by this instruction."
msgstr ":class:`dis.Positions` 对象保存了这条指令所涵盖的起始和结束位置。"

#: ../../library/dis.rst:415
msgid "Field ``positions`` is added."
msgstr "增加了 ``positions`` 字段。"

#: ../../library/dis.rst:420
msgid ""
"In case the information is not available, some fields might be ``None``."
msgstr "考虑到此信息不可用的情况，某些字段可能为 ``None``。"

#: ../../library/dis.rst:430
msgid ""
"The Python compiler currently generates the following bytecode instructions."
msgstr "Python编译器当前生成以下字节码指令。"

#: ../../library/dis.rst:433
msgid "**General instructions**"
msgstr "**一般指令**"

#: ../../library/dis.rst:437
msgid ""
"Do nothing code.  Used as a placeholder by the bytecode optimizer, and to "
"generate line tracing events."
msgstr "无操作代码。 被字节码优化器用作占位符，以及生成行追踪事件。"

#: ../../library/dis.rst:443
msgid "Removes the top-of-stack (TOS) item."
msgstr ""

#: ../../library/dis.rst:448
msgid ""
"Push the *i*-th item to the top of the stack. The item is not removed from "
"its original location."
msgstr ""

#: ../../library/dis.rst:456
msgid "Swap TOS with the item at position *i*."
msgstr ""

#: ../../library/dis.rst:463
msgid ""
"Rather than being an actual instruction, this opcode is used to mark extra "
"space for the interpreter to cache useful data directly in the bytecode "
"itself. It is automatically hidden by all ``dis`` utilities, but can be "
"viewed with ``show_caches=True``."
msgstr ""
"此操作码不是真正的指令，它被用来为解释器标记额外空间以便在字节码中直接缓存有用的数据。 它会被所有 ``dis`` 工具自动隐藏，但可以通过 "
"``show_caches=True`` 来查看。"

#: ../../library/dis.rst:468
msgid ""
"Logically, this space is part of the preceding instruction. Many opcodes "
"expect to be followed by an exact number of caches, and will instruct the "
"interpreter to skip over them at runtime."
msgstr "从逻辑上说，此空间是之前的指令的组成部分。 许多操作码都预期带有固定数量的缓存，并会指示解释器在运行时跳过它们。"

#: ../../library/dis.rst:472
msgid ""
"Populated caches can look like arbitrary instructions, so great care should "
"be taken when reading or modifying raw, adaptive bytecode containing "
"quickened data."
msgstr "被填充的缓存看起来可以像是任意的指令，因此在读取或修改包含快取数据的原始自适应字节码时应当非常小心。"

#: ../../library/dis.rst:479
msgid "**Unary operations**"
msgstr "**一元操作**"

#: ../../library/dis.rst:481
msgid ""
"Unary operations take the top of the stack, apply the operation, and push "
"the result back on the stack."
msgstr "一元操作获取堆栈顶部元素，应用操作，并将结果推回堆栈。"

#: ../../library/dis.rst:486
msgid "Implements ``TOS = +TOS``."
msgstr "实现 ``TOS = +TOS``。"

#: ../../library/dis.rst:491
msgid "Implements ``TOS = -TOS``."
msgstr "实现 ``TOS = -TOS``。"

#: ../../library/dis.rst:496
msgid "Implements ``TOS = not TOS``."
msgstr "实现 ``TOS = not TOS``。"

#: ../../library/dis.rst:501
msgid "Implements ``TOS = ~TOS``."
msgstr "实现 ``TOS = ~TOS``。"

#: ../../library/dis.rst:506
msgid "Implements ``TOS = iter(TOS)``."
msgstr "实现 ``TOS = iter(TOS)``。"

#: ../../library/dis.rst:511
msgid ""
"If ``TOS`` is a :term:`generator iterator` or :term:`coroutine` object it is"
" left as is.  Otherwise, implements ``TOS = iter(TOS)``."
msgstr ""

#: ../../library/dis.rst:517
msgid "**Binary and in-place operations**"
msgstr "**双目和原地操作**"

#: ../../library/dis.rst:519
msgid ""
"Binary operations remove the top of the stack (TOS) and the second top-most "
"stack item (TOS1) from the stack.  They perform the operation, and put the "
"result back on the stack."
msgstr ""

#: ../../library/dis.rst:523
msgid ""
"In-place operations are like binary operations, in that they remove TOS and "
"TOS1, and push the result back on the stack, but the operation is done in-"
"place when TOS1 supports it, and the resulting TOS may be (but does not have"
" to be) the original TOS1."
msgstr ""

#: ../../library/dis.rst:531
msgid ""
"Implements the binary and in-place operators (depending on the value of "
"*op*)."
msgstr ""

#: ../../library/dis.rst:539
msgid "Implements ``TOS = TOS1[TOS]``."
msgstr "实现 ``TOS = TOS1[TOS]``。"

#: ../../library/dis.rst:544
msgid "Implements ``TOS1[TOS] = TOS2``."
msgstr ""

#: ../../library/dis.rst:549
msgid "Implements ``del TOS1[TOS]``."
msgstr ""

#: ../../library/dis.rst:552
msgid "**Coroutine opcodes**"
msgstr "**协程操作码**"

#: ../../library/dis.rst:556
msgid ""
"Implements ``TOS = get_awaitable(TOS)``, where ``get_awaitable(o)`` returns "
"``o`` if ``o`` is a coroutine object or a generator object with the "
"CO_ITERABLE_COROUTINE flag, or resolves ``o.__await__``."
msgstr ""

#: ../../library/dis.rst:561
msgid ""
"If the ``where`` operand is nonzero, it indicates where the instruction "
"occurs:"
msgstr "如果 ``where`` 操作数为非零值，则表示指令所在的位置:"

#: ../../library/dis.rst:564
msgid "``1`` After a call to ``__aenter__``"
msgstr ""

#: ../../library/dis.rst:565
msgid "``2`` After a call to ``__aexit__``"
msgstr ""

#: ../../library/dis.rst:569
msgid "Previously, this instruction did not have an oparg."
msgstr "在之前版本中，该指令没有 oparg。"

#: ../../library/dis.rst:575
msgid "Implements ``TOS = TOS.__aiter__()``."
msgstr ""

#: ../../library/dis.rst:578
msgid "Returning awaitable objects from ``__aiter__`` is no longer supported."
msgstr "已经不再支持从 ``__aiter__`` 返回可等待对象。"

#: ../../library/dis.rst:585
msgid ""
"Pushes ``get_awaitable(TOS.__anext__())`` to the stack.  See "
"``GET_AWAITABLE`` for details about ``get_awaitable``."
msgstr ""

#: ../../library/dis.rst:593
msgid ""
"Terminates an :keyword:`async for` loop.  Handles an exception raised when "
"awaiting a next item. The stack contains the async iterable in TOS1 and the "
"raised exception in TOS. Both are popped. If the exception is not "
":exc:`StopAsyncIteration`, it is re-raised."
msgstr ""

#: ../../library/dis.rst:600 ../../library/dis.rst:678
#: ../../library/dis.rst:689
msgid ""
"Exception representation on the stack now consist of one, not three, items."
msgstr "栈中的异常表示形式现在将由一个而不是三个条目组成。"

#: ../../library/dis.rst:605
msgid ""
"Resolves ``__aenter__`` and ``__aexit__`` from the object on top of the "
"stack.  Pushes ``__aexit__`` and result of ``__aenter__()`` to the stack."
msgstr ""

#: ../../library/dis.rst:612
msgid "**Miscellaneous opcodes**"
msgstr "**其他操作码**"

#: ../../library/dis.rst:616
msgid ""
"Implements the expression statement for the interactive mode.  TOS is "
"removed from the stack and printed.  In non-interactive mode, an expression "
"statement is terminated with :opcode:`POP_TOP`."
msgstr ""

#: ../../library/dis.rst:623
msgid ""
"Calls ``set.add(TOS1[-i], TOS)``.  Used to implement set comprehensions."
msgstr ""

#: ../../library/dis.rst:628
msgid ""
"Calls ``list.append(TOS1[-i], TOS)``.  Used to implement list "
"comprehensions."
msgstr ""

#: ../../library/dis.rst:633
msgid ""
"Calls ``dict.__setitem__(TOS1[-i], TOS1, TOS)``.  Used to implement dict "
"comprehensions."
msgstr ""

#: ../../library/dis.rst:637
msgid "Map value is TOS and map key is TOS1. Before, those were reversed."
msgstr ""

#: ../../library/dis.rst:640
msgid ""
"For all of the :opcode:`SET_ADD`, :opcode:`LIST_APPEND` and "
":opcode:`MAP_ADD` instructions, while the added value or key/value pair is "
"popped off, the container object remains on the stack so that it is "
"available for further iterations of the loop."
msgstr ""
"对于所有 :opcode:`SET_ADD` 、 :opcode:`LIST_APPEND` 和 :opcode:`MAP_ADD` "
"指令，当弹出添加的值或键值对时，容器对象保留在堆栈上，以便它可用于循环的进一步迭代。"

#: ../../library/dis.rst:648
msgid "Returns with TOS to the caller of the function."
msgstr ""

#: ../../library/dis.rst:653
msgid "Pops TOS and yields it from a :term:`generator`."
msgstr ""

#: ../../library/dis.rst:659
msgid ""
"Checks whether ``__annotations__`` is defined in ``locals()``, if not it is "
"set up to an empty ``dict``. This opcode is only emitted if a class or "
"module body contains :term:`variable annotations <variable annotation>` "
"statically."
msgstr ""
"检查 ``__annotations__`` 是否在 ``locals()`` 中定义，如果没有，它被设置为空 ``dict`` "
"。只有在类或模块体静态地包含 :term:`variable annotations <variable annotation>` 时才会发出此操作码。"

#: ../../library/dis.rst:669
msgid ""
"Loads all symbols not starting with ``'_'`` directly from the module TOS to "
"the local namespace. The module is popped after loading all names. This "
"opcode implements ``from module import *``."
msgstr ""

#: ../../library/dis.rst:676
msgid ""
"Pops a value from the stack, which is used to restore the exception state."
msgstr "从栈中弹出一个值，它将被用来恢复异常状态。"

#: ../../library/dis.rst:683
msgid ""
"Re-raises the exception currently on top of the stack. If oparg is non-zero,"
" pops an additional value from the stack which is used to set "
":attr:`~frame.f_lasti` of the current frame."
msgstr ""
"重新引发当前位于栈顶的异常。 如果 oparg 为非零值，则从栈顶额外弹出一个值用来设置当前帧的 :attr:`~frame.f_lasti`。"

#: ../../library/dis.rst:694
msgid ""
"Pops a value from the stack. Pushes the current exception to the top of the "
"stack. Pushes the value originally popped back to the stack. Used in "
"exception handlers."
msgstr "从栈中弹出一个值。 将当前异常推入栈顶。 将原先被弹出的值推回栈。 在异常处理器中使用。"

#: ../../library/dis.rst:702
msgid ""
"Performs exception matching for ``except``. Tests whether the TOS1 is an "
"exception matching TOS. Pops TOS and pushes the boolean result of the test."
msgstr ""

#: ../../library/dis.rst:709
msgid ""
"Performs exception matching for ``except*``. Applies ``split(TOS)`` on the "
"exception group representing TOS1."
msgstr ""

#: ../../library/dis.rst:712
msgid ""
"In case of a match, pops two items from the stack and pushes the non-"
"matching subgroup (``None`` in case of full match) followed by the matching "
"subgroup. When there is no match, pops one item (the match type) and pushes "
"``None``."
msgstr ""
"在匹配的情况下，从栈中弹出两项并推入不匹配的子分组 (如完全匹配则为 ``None``) 以及匹配的子分组。 当没有任何匹配时，则弹出一项 (匹配类型)"
" 并推入 ``None``。"

#: ../../library/dis.rst:721
msgid ""
"Combines the raised and reraised exceptions list from TOS, into an exception"
" group to propagate from a try-except* block. Uses the original exception "
"group from TOS1 to reconstruct the structure of reraised exceptions. Pops "
"two items from the stack and pushes the exception to reraise or ``None`` if "
"there isn't one."
msgstr ""

#: ../../library/dis.rst:731
msgid ""
"Calls the function in position 4 on the stack with arguments (type, val, tb)"
" representing the exception at the top of the stack. Used to implement the "
"call ``context_manager.__exit__(*exc_info())`` when an exception has "
"occurred in a :keyword:`with` statement."
msgstr ""
"调用栈中 4 号位置上的函数并附带代表位于栈顶的异常的参数 (type, val, tb)。 用于在 :keyword:`with` "
"语句内发生异常时实现调用 ``context_manager.__exit__(*exc_info())``。"

#: ../../library/dis.rst:738
msgid ""
"The ``__exit__`` function is in position 4 of the stack rather than 7. "
"Exception representation on the stack now consist of one, not three, items."
msgstr "``__exit__`` 函数位于栈的 4 号位而不是 7 号位。 栈中的异常表示形式现在由一项而不是三项组成。"

#: ../../library/dis.rst:745
msgid ""
"Pushes :exc:`AssertionError` onto the stack.  Used by the :keyword:`assert` "
"statement."
msgstr "将 :exc:`AssertionError` 推入栈顶。 由 :keyword:`assert` 语句使用。"

#: ../../library/dis.rst:753
msgid ""
"Pushes :func:`builtins.__build_class__` onto the stack.  It is later called "
"to construct a class."
msgstr "将 :func:`builtins.__build_class__` 推入栈。 之后它将会被调用来构造一个类。"

#: ../../library/dis.rst:759
msgid ""
"This opcode performs several operations before a with block starts.  First, "
"it loads :meth:`~object.__exit__` from the context manager and pushes it "
"onto the stack for later use by :opcode:`WITH_EXCEPT_START`.  Then, "
":meth:`~object.__enter__` is called. Finally, the result of calling the "
"``__enter__()`` method is pushed onto the stack."
msgstr ""
"此操作码会在 with 代码块开始之前执行多个操作。 首先，它将从上下文管理器加载 :meth:`~object.__exit__` 并将其推入栈顶以供"
" :opcode:`WITH_EXCEPT_START` 后续使用。 然后，将调用 :meth:`~object.__enter__`。 最后，将调用 "
"``__enter__()`` 方法的结果推入栈顶。"

#: ../../library/dis.rst:770
msgid "Push ``len(TOS)`` onto the stack."
msgstr ""

#: ../../library/dis.rst:777
msgid ""
"If TOS is an instance of :class:`collections.abc.Mapping` (or, more "
"technically: if it has the :c:macro:`Py_TPFLAGS_MAPPING` flag set in its "
":c:member:`~PyTypeObject.tp_flags`), push ``True`` onto the stack.  "
"Otherwise, push ``False``."
msgstr ""

#: ../../library/dis.rst:787
msgid ""
"If TOS is an instance of :class:`collections.abc.Sequence` and is *not* an "
"instance of :class:`str`/:class:`bytes`/:class:`bytearray` (or, more "
"technically: if it has the :c:macro:`Py_TPFLAGS_SEQUENCE` flag set in its "
":c:member:`~PyTypeObject.tp_flags`), push ``True`` onto the stack.  "
"Otherwise, push ``False``."
msgstr ""

#: ../../library/dis.rst:797
msgid ""
"TOS is a tuple of mapping keys, and TOS1 is the match subject.  If TOS1 "
"contains all of the keys in TOS, push a :class:`tuple` containing the "
"corresponding values. Otherwise, push ``None``."
msgstr ""

#: ../../library/dis.rst:803 ../../library/dis.rst:1353
msgid ""
"Previously, this instruction also pushed a boolean value indicating success "
"(``True``) or failure (``False``)."
msgstr "在之前的版本中，该指令还会推入一个表示成功 (``True``) 或失败 (``False``) 的布尔值。"

#: ../../library/dis.rst:810
msgid ""
"Implements ``name = TOS``. *namei* is the index of *name* in the attribute "
":attr:`~codeobject.co_names` of the :ref:`code object <code-objects>`. The "
"compiler tries to use :opcode:`STORE_FAST` or :opcode:`STORE_GLOBAL` if "
"possible."
msgstr ""

#: ../../library/dis.rst:818
msgid ""
"Implements ``del name``, where *namei* is the index into "
":attr:`~codeobject.co_names` attribute of the :ref:`code object <code-"
"objects>`."
msgstr ""
"实现 ``del name``，其中 *namei* 是 :ref:`代码对象 <code-objects>` 的 "
":attr:`~codeobject.co_names` 属性的索引。"

#: ../../library/dis.rst:824
msgid ""
"Unpacks TOS into *count* individual values, which are put onto the stack "
"right-to-left."
msgstr ""

#: ../../library/dis.rst:830
msgid ""
"Implements assignment with a starred target: Unpacks an iterable in TOS into"
" individual values, where the total number of values can be smaller than the"
" number of items in the iterable: one of the new values will be a list of "
"all leftover items."
msgstr ""

#: ../../library/dis.rst:835
msgid ""
"The low byte of *counts* is the number of values before the list value, the "
"high byte of *counts* the number of values after it.  The resulting values "
"are put onto the stack right-to-left."
msgstr ""

#: ../../library/dis.rst:842
msgid ""
"Implements ``TOS.name = TOS1``, where *namei* is the index of name in "
":attr:`co_names`."
msgstr ""

#: ../../library/dis.rst:848
msgid ""
"Implements ``del TOS.name``, using *namei* as index into "
":attr:`~codeobject.co_names` of the :ref:`code object <code-objects>`."
msgstr ""

#: ../../library/dis.rst:854
msgid "Works as :opcode:`STORE_NAME`, but stores the name as a global."
msgstr "类似于 :opcode:`STORE_NAME` 但会将 name 存储为全局变量。"

#: ../../library/dis.rst:859
msgid "Works as :opcode:`DELETE_NAME`, but deletes a global name."
msgstr "类似于 :opcode:`DELETE_NAME` 但会删除一个全局变量。"

#: ../../library/dis.rst:864
msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr "将 ``co_consts[consti]`` 推入栈顶。"

#: ../../library/dis.rst:869
msgid "Pushes the value associated with ``co_names[namei]`` onto the stack."
msgstr ""

#: ../../library/dis.rst:874
msgid ""
"Creates a tuple consuming *count* items from the stack, and pushes the "
"resulting tuple onto the stack."
msgstr ""

#: ../../library/dis.rst:880
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a list."
msgstr "类似于 :opcode:`BUILD_TUPLE` 但会创建一个列表。"

#: ../../library/dis.rst:885
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a set."
msgstr "类似于 :opcode:`BUILD_TUPLE` 但会创建一个集合。"

#: ../../library/dis.rst:890
msgid ""
"Pushes a new dictionary object onto the stack.  Pops ``2 * count`` items so "
"that the dictionary holds *count* entries: ``{..., TOS3: TOS2, TOS1: TOS}``."
msgstr ""

#: ../../library/dis.rst:894
msgid ""
"The dictionary is created from stack items instead of creating an empty "
"dictionary pre-sized to hold *count* items."
msgstr "字典是根据栈中的项创建而不是创建一个预设大小包含 *count* 项的空字典。"

#: ../../library/dis.rst:901
msgid ""
"The version of :opcode:`BUILD_MAP` specialized for constant keys. Pops the "
"top element on the stack which contains a tuple of keys, then starting from "
"``TOS1``, pops *count* values to form values in the built dictionary."
msgstr ""

#: ../../library/dis.rst:910
msgid ""
"Concatenates *count* strings from the stack and pushes the resulting string "
"onto the stack."
msgstr "拼接 *count* 个来自栈的字符串并将结果字符串推入栈顶。"

#: ../../library/dis.rst:918
msgid ""
"Pops a list from the stack and pushes a tuple containing the same values."
msgstr ""

#: ../../library/dis.rst:925
msgid "Calls ``list.extend(TOS1[-i], TOS)``.  Used to build lists."
msgstr ""

#: ../../library/dis.rst:932
msgid "Calls ``set.update(TOS1[-i], TOS)``.  Used to build sets."
msgstr ""

#: ../../library/dis.rst:939
msgid "Calls ``dict.update(TOS1[-i], TOS)``.  Used to build dicts."
msgstr ""

#: ../../library/dis.rst:946
msgid "Like :opcode:`DICT_UPDATE` but raises an exception for duplicate keys."
msgstr "类似于 :opcode:`DICT_UPDATE` 但对于重复的键会引发异常。"

#: ../../library/dis.rst:953
msgid "Replaces TOS with ``getattr(TOS, co_names[namei])``."
msgstr ""

#: ../../library/dis.rst:958
msgid ""
"Performs a Boolean operation.  The operation name can be found in "
"``cmp_op[opname]``."
msgstr "执行布尔运算操作。 操作名称可在 ``cmp_op[opname]`` 中找到。"

#: ../../library/dis.rst:964
msgid "Performs ``is`` comparison, or ``is not`` if ``invert`` is 1."
msgstr "执行 ``is`` 比较，或者如果 ``invert`` 为 1 则执行 ``is not``。"

#: ../../library/dis.rst:971
msgid "Performs ``in`` comparison, or ``not in`` if ``invert`` is 1."
msgstr "执行 ``in`` 比较，或者如果 ``invert`` 为 1 则执行 ``not in``。"

#: ../../library/dis.rst:978
msgid ""
"Imports the module ``co_names[namei]``.  TOS and TOS1 are popped and provide"
" the *fromlist* and *level* arguments of :func:`__import__`.  The module "
"object is pushed onto the stack.  The current namespace is not affected: for"
" a proper import statement, a subsequent :opcode:`STORE_FAST` instruction "
"modifies the namespace."
msgstr ""

#: ../../library/dis.rst:987
msgid ""
"Loads the attribute ``co_names[namei]`` from the module found in TOS. The "
"resulting object is pushed onto the stack, to be subsequently stored by a "
":opcode:`STORE_FAST` instruction."
msgstr ""

#: ../../library/dis.rst:994
msgid "Increments bytecode counter by *delta*."
msgstr "将字节码计数器的值增加 *delta*。"

#: ../../library/dis.rst:999
msgid "Decrements bytecode counter by *delta*. Checks for interrupts."
msgstr "将字节码计数器减少 *delta*。 检查中断。"

#: ../../library/dis.rst:1006
msgid "Decrements bytecode counter by *delta*. Does not check for interrupts."
msgstr "将字节码计数器减少 *delta*。 不检查中断。"

#: ../../library/dis.rst:1013
msgid ""
"If TOS is true, increments the bytecode counter by *delta*.  TOS is popped."
msgstr ""

#: ../../library/dis.rst:1020
msgid ""
"If TOS is true, decrements the bytecode counter by *delta*.  TOS is popped."
msgstr ""

#: ../../library/dis.rst:1027
msgid ""
"If TOS is false, increments the bytecode counter by *delta*.  TOS is popped."
msgstr ""

#: ../../library/dis.rst:1034
msgid ""
"If TOS is false, decrements the bytecode counter by *delta*.  TOS is popped."
msgstr ""

#: ../../library/dis.rst:1041
msgid ""
"If TOS is not ``None``, increments the bytecode counter by *delta*.  TOS is "
"popped."
msgstr ""

#: ../../library/dis.rst:1048
msgid ""
"If TOS is not ``None``, decrements the bytecode counter by *delta*.  TOS is "
"popped."
msgstr ""

#: ../../library/dis.rst:1055
msgid ""
"If TOS is ``None``, increments the bytecode counter by *delta*.  TOS is "
"popped."
msgstr ""

#: ../../library/dis.rst:1062
msgid ""
"If TOS is ``None``, decrements the bytecode counter by *delta*.  TOS is "
"popped."
msgstr ""

#: ../../library/dis.rst:1069
msgid ""
"If TOS is true, increments the bytecode counter by *delta* and leaves TOS on"
" the stack.  Otherwise (TOS is false), TOS is popped."
msgstr ""

#: ../../library/dis.rst:1074 ../../library/dis.rst:1084
msgid "The oparg is now a relative delta rather than an absolute target."
msgstr ""

#: ../../library/dis.rst:1079
msgid ""
"If TOS is false, increments the bytecode counter by *delta* and leaves TOS "
"on the stack.  Otherwise (TOS is true), TOS is popped."
msgstr ""

#: ../../library/dis.rst:1090
msgid ""
"TOS is an :term:`iterator`.  Call its :meth:`~iterator.__next__` method.  If"
" this yields a new value, push it on the stack (leaving the iterator below "
"it).  If the iterator indicates it is exhausted, TOS is popped, and the byte"
" code counter is incremented by *delta*."
msgstr ""

#: ../../library/dis.rst:1098
msgid "Loads the global named ``co_names[namei>>1]`` onto the stack."
msgstr "将名为 ``co_names[namei>>1]`` 的全局对象加载到栈顶。"

#: ../../library/dis.rst:1100
msgid ""
"If the low bit of ``namei`` is set, then a ``NULL`` is pushed to the stack "
"before the global variable."
msgstr "如果设置了 ``namei`` 的低比特位，则会在全局变量前将一个 ``NULL`` 推入栈。"

#: ../../library/dis.rst:1106
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr "将指向局部对象 ``co_varnames[var_num]`` 的引用推入栈顶。"

#: ../../library/dis.rst:1111
msgid "Stores TOS into the local ``co_varnames[var_num]``."
msgstr ""

#: ../../library/dis.rst:1116
msgid "Deletes local ``co_varnames[var_num]``."
msgstr "移除局部对象 ``co_varnames[var_num]``。"

#: ../../library/dis.rst:1121
msgid ""
"Creates a new cell in slot ``i``.  If that slot is nonempty then that value "
"is stored into the new cell."
msgstr "在槽位 ``i`` 中创建一个新单元。 如果该槽位为非空则该值将存储到新单元中。"

#: ../../library/dis.rst:1129
msgid ""
"Pushes a reference to the cell contained in slot ``i`` of the \"fast "
"locals\" storage.  The name of the variable is ``co_fastlocalnames[i]``."
msgstr ""
"推入一个指向包含在 \"fast locals\" 存储的 ``i`` 号槽位的单元的引用。 变量名为 "
"``co_fastlocalnames[i]``。"

#: ../../library/dis.rst:1132
msgid ""
"Note that ``LOAD_CLOSURE`` is effectively an alias for ``LOAD_FAST``. It "
"exists to keep bytecode a little more readable."
msgstr "注意 ``LOAD_CLOSURE`` 实际上是 ``LOAD_FAST`` 的一个别名。 它的存在是为了让字节码的可读性更好一些。"

#: ../../library/dis.rst:1135 ../../library/dis.rst:1156
msgid "``i`` is no longer offset by the length of ``co_varnames``."
msgstr "``i`` 不再是长度为 ``co_varnames`` 的偏移量。"

#: ../../library/dis.rst:1141
msgid ""
"Loads the cell contained in slot ``i`` of the \"fast locals\" storage. "
"Pushes a reference to the object the cell contains on the stack."
msgstr "加载包含在 \"fast locals\" 存储的 ``i`` 号槽位中的单元。 将一个指向该单元所包含对象的引用推入栈。"

#: ../../library/dis.rst:1144 ../../library/dis.rst:1165
#: ../../library/dis.rst:1176
msgid ""
"``i`` is no longer offset by the length of :attr:`~codeobject.co_varnames`."
msgstr "``i`` 不再是 :attr:`~codeobject.co_varnames` 的长度的偏移量。"

#: ../../library/dis.rst:1150
msgid ""
"Much like :opcode:`LOAD_DEREF` but first checks the locals dictionary before"
" consulting the cell.  This is used for loading free variables in class "
"bodies."
msgstr ""

#: ../../library/dis.rst:1162
msgid ""
"Stores TOS into the cell contained in slot ``i`` of the \"fast locals\" "
"storage."
msgstr ""

#: ../../library/dis.rst:1171
msgid ""
"Empties the cell contained in slot ``i`` of the \"fast locals\" storage. "
"Used by the :keyword:`del` statement."
msgstr "清空 \"fast locals\" 存储中包含在 ``i`` 号槽位的单元。 被用于 :keyword:`del` 语句。"

#: ../../library/dis.rst:1182
msgid ""
"Copies the ``n`` free variables from the closure into the frame. Removes the"
" need for special code on the caller's side when calling closures."
msgstr "将 ``n`` 个自由变量从闭包拷贝到帧中。 当调用闭包时不再需要调用方添加特殊的代码。"

#: ../../library/dis.rst:1191
msgid ""
"Raises an exception using one of the 3 forms of the ``raise`` statement, "
"depending on the value of *argc*:"
msgstr "使用 ``raise`` 语句的 3 种形式之一引发异常，具体形式取决于 *argc* 的值："

#: ../../library/dis.rst:1194
msgid "0: ``raise`` (re-raise previous exception)"
msgstr "0: ``raise`` (重新引发之前的异常)"

#: ../../library/dis.rst:1195
msgid "1: ``raise TOS`` (raise exception instance or type at ``TOS``)"
msgstr ""

#: ../../library/dis.rst:1196
msgid ""
"2: ``raise TOS1 from TOS`` (raise exception instance or type at ``TOS1`` "
"with ``__cause__`` set to ``TOS``)"
msgstr ""

#: ../../library/dis.rst:1202
msgid ""
"Calls a callable object with the number of arguments specified by ``argc``, "
"including the named arguments specified by the preceding :opcode:`KW_NAMES`,"
" if any. On the stack are (in ascending order), either:"
msgstr ""
"调用一个可调用对象并传入由 ``argc`` 所指定数量的参数，包括之前的 :opcode:`KW_NAMES` 所指定的关键字参数，如果有的话。 "
"在栈上（按升序排列），可以是:"

#: ../../library/dis.rst:1207
msgid "NULL"
msgstr "NULL"

#: ../../library/dis.rst:1208 ../../library/dis.rst:1214
msgid "The callable"
msgstr "可调用对象"

#: ../../library/dis.rst:1209
msgid "The positional arguments"
msgstr "位置参数"

#: ../../library/dis.rst:1210 ../../library/dis.rst:1217
msgid "The named arguments"
msgstr "关键字参数"

#: ../../library/dis.rst:1212
msgid "or:"
msgstr "或者:"

#: ../../library/dis.rst:1215
msgid "``self``"
msgstr "``self``"

#: ../../library/dis.rst:1216
msgid "The remaining positional arguments"
msgstr "其余的位置参数"

#: ../../library/dis.rst:1219
msgid ""
"``argc`` is the total of the positional and named arguments, excluding "
"``self`` when a ``NULL`` is not present."
msgstr "``argc`` 是位置和关键字参数的总和，当未提供 ``NULL`` 时将排除 ``self``。"

#: ../../library/dis.rst:1222
msgid ""
"``CALL`` pops all arguments and the callable object off the stack, calls the"
" callable object with those arguments, and pushes the return value returned "
"by the callable object."
msgstr "``CALL`` 将把所有参数和可调用对象弹出栈，附带这些参数调用该可调用对象，并将该可调用对象的返回值推入栈。"

#: ../../library/dis.rst:1231
msgid ""
"Calls a callable object with variable set of positional and keyword "
"arguments.  If the lowest bit of *flags* is set, the top of the stack "
"contains a mapping object containing additional keyword arguments. Before "
"the callable is called, the mapping object and iterable object are each "
"\"unpacked\" and their contents passed in as keyword and positional "
"arguments respectively. ``CALL_FUNCTION_EX`` pops all arguments and the "
"callable object off the stack, calls the callable object with those "
"arguments, and pushes the return value returned by the callable object."
msgstr ""
"调用一个可调用对象并附带位置参数和关键字参数变量集合。 如果设置了 *flags* 的最低位，则栈顶包含一个由额外关键字参数组成的映射对象。 "
"在调用该可调用对象之前，映射对象和可迭代对象会被分别“解包”并将它们的内容分别作为关键字参数和位置参数传入。 ``CALL_FUNCTION_EX`` "
"会中栈中弹出所有参数及可调用对象，附带这些参数调用该可调用对象，并将可调用对象所返回的返回值推入栈顶。"

#: ../../library/dis.rst:1246
msgid ""
"Loads a method named ``co_names[namei]`` from the TOS object. TOS is popped."
" This bytecode distinguishes two cases: if TOS has a method with the correct"
" name, the bytecode pushes the unbound method and TOS. TOS will be used as "
"the first argument (``self``) by :opcode:`CALL` when calling the unbound "
"method. Otherwise, ``NULL`` and the object return by the attribute lookup "
"are pushed."
msgstr ""

#: ../../library/dis.rst:1258
msgid ""
"Prefixes :opcode:`CALL`. Logically this is a no op. It exists to enable "
"effective specialization of calls. ``argc`` is the number of arguments as "
"described in :opcode:`CALL`."
msgstr ""

#: ../../library/dis.rst:1267
msgid ""
"Pushes a ``NULL`` to the stack. Used in the call sequence to match the "
"``NULL`` pushed by :opcode:`LOAD_METHOD` for non-method calls."
msgstr ""
"将一个 ``NULL`` 推入栈。 在调用序列中用来匹配 :opcode:`LOAD_METHOD` 针对非方法调用推入栈的 ``NULL``。"

#: ../../library/dis.rst:1276
msgid ""
"Prefixes :opcode:`PRECALL`. Stores a reference to ``co_consts[consti]`` into"
" an internal variable for use by :opcode:`CALL`. ``co_consts[consti]`` must "
"be a tuple of strings."
msgstr ""

#: ../../library/dis.rst:1285
msgid ""
"Pushes a new function object on the stack.  From bottom to top, the consumed"
" stack must consist of values if the argument carries a specified flag value"
msgstr "将一个新函数对象推入栈顶。 从底端到顶端，如果参数带有指定的旗标值则所使用的栈必须由这些值组成。"

#: ../../library/dis.rst:1288
msgid ""
"``0x01`` a tuple of default values for positional-only and positional-or-"
"keyword parameters in positional order"
msgstr "``0x01`` 一个默认值的元组，用于按位置排序的仅限位置形参以及位置或关键字形参"

#: ../../library/dis.rst:1290
msgid "``0x02`` a dictionary of keyword-only parameters' default values"
msgstr "``0x02`` 一个仅限关键字形参的默认值的字典"

#: ../../library/dis.rst:1291
msgid "``0x04`` a tuple of strings containing parameters' annotations"
msgstr "``0x04`` 一个包含形参标注的字符串元组。"

#: ../../library/dis.rst:1292
msgid "``0x08`` a tuple containing cells for free variables, making a closure"
msgstr "``0x08`` 一个包含用于自由变量的单元的元组，生成一个闭包"

#: ../../library/dis.rst:1293
msgid "the code associated with the function (at TOS)"
msgstr ""

#: ../../library/dis.rst:1295
msgid "Flag value ``0x04`` is a tuple of strings instead of dictionary"
msgstr "旗标值 ``0x04`` 是一个字符串元组而非字典。"

#: ../../library/dis.rst:1298
msgid "Qualified name at TOS was removed."
msgstr ""

#: ../../library/dis.rst:1306
msgid ""
"Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, "
"``slice(TOS1, TOS)`` is pushed; if it is 3, ``slice(TOS2, TOS1, TOS)`` is "
"pushed. See the :func:`slice` built-in function for more information."
msgstr ""

#: ../../library/dis.rst:1313
msgid ""
"Prefixes any opcode which has an argument too big to fit into the default "
"one byte. *ext* holds an additional byte which act as higher bits in the "
"argument. For each opcode, at most three prefixal ``EXTENDED_ARG`` are "
"allowed, forming an argument from two-byte to four-byte."
msgstr ""
"为任意带有大到无法放入默认的单字节的参数的操作码添加前缀。 *ext* 存放一个附加字节作为参数中的高比特位。 对于每个操作码，最多允许三个 "
"``EXTENDED_ARG`` 前缀，构成两字节到三字节的参数。"

#: ../../library/dis.rst:1321
msgid ""
"Used for implementing formatted literal strings (f-strings).  Pops an "
"optional *fmt_spec* from the stack, then a required *value*. *flags* is "
"interpreted as follows:"
msgstr ""
"用于实现格式化字面值字符串（f-字符串）。 从栈中弹出一个可选的 *fmt_spec*，然后是一个必须的 *value*。 *flags* "
"的解读方式如下："

#: ../../library/dis.rst:1325
msgid "``(flags & 0x03) == 0x00``: *value* is formatted as-is."
msgstr "``(flags & 0x03) == 0x00``: *value* 按原样格式化。"

#: ../../library/dis.rst:1326
msgid ""
"``(flags & 0x03) == 0x01``: call :func:`str` on *value* before formatting "
"it."
msgstr "``(flags & 0x03) == 0x01``: 在格式化 *value* 之前调用其 :func:`str`。"

#: ../../library/dis.rst:1328
msgid ""
"``(flags & 0x03) == 0x02``: call :func:`repr` on *value* before formatting "
"it."
msgstr "``(flags & 0x03) == 0x02``: 在格式化 *value* 之前调用其 :func:`repr`。"

#: ../../library/dis.rst:1330
msgid ""
"``(flags & 0x03) == 0x03``: call :func:`ascii` on *value* before formatting "
"it."
msgstr "``(flags & 0x03) == 0x03``: 在格式化 *value* 之前调用其 :func:`ascii`。"

#: ../../library/dis.rst:1332
msgid ""
"``(flags & 0x04) == 0x04``: pop *fmt_spec* from the stack and use it, else "
"use an empty *fmt_spec*."
msgstr "``(flags & 0x04) == 0x04``: 从栈中弹出 *fmt_spec* 并使用它，否则使用空的 *fmt_spec*。"

#: ../../library/dis.rst:1335
msgid ""
"Formatting is performed using :c:func:`PyObject_Format`.  The result is "
"pushed on the stack."
msgstr "使用 :c:func:`PyObject_Format` 执行格式化。 结果会被推入栈顶。"

#: ../../library/dis.rst:1343
msgid ""
"TOS is a tuple of keyword attribute names, TOS1 is the class being matched "
"against, and TOS2 is the match subject.  *count* is the number of positional"
" sub-patterns."
msgstr ""

#: ../../library/dis.rst:1347
msgid ""
"Pop TOS, TOS1, and TOS2.  If TOS2 is an instance of TOS1 and has the "
"positional and keyword attributes required by *count* and TOS, push a tuple "
"of extracted attributes.  Otherwise, push ``None``."
msgstr ""

#: ../../library/dis.rst:1360
msgid "A no-op. Performs internal tracing, debugging and optimization checks."
msgstr "空操作。 执行内部追踪、调试和优化检查。"

#: ../../library/dis.rst:1362
msgid "The ``where`` operand marks where the ``RESUME`` occurs:"
msgstr "``where`` 操作数标记 ``RESUME`` 在哪里发生:"

#: ../../library/dis.rst:1364
msgid "``0`` The start of a function"
msgstr ""

#: ../../library/dis.rst:1365
msgid "``1`` After a ``yield`` expression"
msgstr "``1`` 在 ``yield`` 表达式之后"

#: ../../library/dis.rst:1366
msgid "``2`` After a ``yield from`` expression"
msgstr "``2`` 在 ``yield from`` 表达式之后"

#: ../../library/dis.rst:1367
msgid "``3`` After an ``await`` expression"
msgstr "``3`` 在 ``await`` 表达式之后"

#: ../../library/dis.rst:1374
msgid ""
"Create a generator, coroutine, or async generator from the current frame. "
"Clear the current frame and return the newly created generator."
msgstr ""

#: ../../library/dis.rst:1382
msgid ""
"Sends ``None`` to the sub-generator of this generator. Used in ``yield "
"from`` and ``await`` statements."
msgstr ""

#: ../../library/dis.rst:1390
msgid ""
"Wraps the value on top of the stack in an ``async_generator_wrapped_value``."
" Used to yield in async generators."
msgstr ""

#: ../../library/dis.rst:1398
msgid ""
"This is not really an opcode.  It identifies the dividing line between "
"opcodes which don't use their argument and those that do (``< "
"HAVE_ARGUMENT`` and ``>= HAVE_ARGUMENT``, respectively)."
msgstr ""
"这不是一个真正的操作码。 它标明了不使用参数和使用参数的操作码 (分别是 ``< HAVE_ARGUMENT`` 和 ``>= "
"HAVE_ARGUMENT``) 之间的分隔线。"

#: ../../library/dis.rst:1402
msgid ""
"Now every instruction has an argument, but opcodes ``< HAVE_ARGUMENT`` "
"ignore it. Before, only opcodes ``>= HAVE_ARGUMENT`` had an argument."
msgstr ""
"现在每条指令都带有参数，但操作码 ``< HAVE_ARGUMENT`` 会忽略它。 之前仅限操作码 ``>= HAVE_ARGUMENT`` "
"带有参数。"

#: ../../library/dis.rst:1410
msgid "Opcode collections"
msgstr "操作码集合"

#: ../../library/dis.rst:1412
msgid ""
"These collections are provided for automatic introspection of bytecode "
"instructions:"
msgstr "提供这些集合用于字节码指令的自动内省："

#: ../../library/dis.rst:1417
msgid "Sequence of operation names, indexable using the bytecode."
msgstr "操作名称的序列，可使用字节码来索引。"

#: ../../library/dis.rst:1422
msgid "Dictionary mapping operation names to bytecodes."
msgstr "映射操作名称到字节码的字典"

#: ../../library/dis.rst:1427
msgid "Sequence of all compare operation names."
msgstr "所有比较操作名称的序列。"

#: ../../library/dis.rst:1432
msgid "Sequence of bytecodes that access a constant."
msgstr "访问常量的字节码序列。"

#: ../../library/dis.rst:1437
msgid ""
"Sequence of bytecodes that access a free variable (note that 'free' in this "
"context refers to names in the current scope that are referenced by inner "
"scopes or names in outer scopes that are referenced from this scope.  It "
"does *not* include references to global or builtin scopes)."
msgstr ""

#: ../../library/dis.rst:1445
msgid "Sequence of bytecodes that access an attribute by name."
msgstr "按名称访问属性的字节码序列。"

#: ../../library/dis.rst:1450
msgid "Sequence of bytecodes that have a relative jump target."
msgstr "具有相对跳转目标的字节码序列。"

#: ../../library/dis.rst:1455
msgid "Sequence of bytecodes that have an absolute jump target."
msgstr "具有绝对跳转目标的字节码序列。"

#: ../../library/dis.rst:1460
msgid "Sequence of bytecodes that access a local variable."
msgstr "访问局部变量的字节码序列。"

#: ../../library/dis.rst:1465
msgid "Sequence of bytecodes of Boolean operations."
msgstr "布尔运算的字节码序列。"

#: ../../library/dis.rst:1304
msgid "built-in function"
msgstr "内置函数"

#: ../../library/dis.rst:1304
msgid "slice"
msgstr "slice -- 切片"
