# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/enum.rst:2
msgid ":mod:`!enum` --- Support for enumerations"
msgstr ":mod:`!enum` --- 对枚举的支持"

#: ../../library/enum.rst:14
msgid "**Source code:** :source:`Lib/enum.py`"
msgstr "**源代码：** :source:`Lib/enum.py`"

#: ../../library/enum.rst:18
msgid ""
"This page contains the API reference information. For tutorial information "
"and discussion of more advanced topics, see"
msgstr "此页面仅包含 API 参考信息。教程信息和更多高级用法的讨论，请参阅"

#: ../../library/enum.rst:21
msgid ":ref:`Basic Tutorial <enum-basic-tutorial>`"
msgstr ":ref:`基础教程 <enum-basic-tutorial>`"

#: ../../library/enum.rst:22
msgid ":ref:`Advanced Tutorial <enum-advanced-tutorial>`"
msgstr ":ref:`进阶教程 <enum-advanced-tutorial>`"

#: ../../library/enum.rst:23
msgid ":ref:`Enum Cookbook <enum-cookbook>`"
msgstr ":ref:`枚举指南 <enum-cookbook>`"

#: ../../library/enum.rst:27
msgid "An enumeration:"
msgstr "一个枚举:"

#: ../../library/enum.rst:29
msgid "is a set of symbolic names (members) bound to unique values"
msgstr "是绑定到唯一值的符号名称（成员）集合"

#: ../../library/enum.rst:30
msgid ""
"can be iterated over to return its canonical (i.e. non-alias) members in "
"definition order"
msgstr "可以被执行迭代以按定义顺序返回其规范的（即非别名的）成员"

#: ../../library/enum.rst:32
msgid "uses *call* syntax to return members by value"
msgstr "使用 *调用* 语法按值返回成员"

#: ../../library/enum.rst:33
msgid "uses *index* syntax to return members by name"
msgstr "使用 *索引* 语法按名称返回成员"

#: ../../library/enum.rst:35
msgid ""
"Enumerations are created either by using :keyword:`class` syntax, or by "
"using function-call syntax::"
msgstr "枚举是通过使用 :keyword:`class` 语法或是通过使用函数调用语法来创建的::"

#: ../../library/enum.rst:38
msgid ""
">>> from enum import Enum\n"
"\n"
">>> # class syntax\n"
">>> class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"\n"
">>> # functional syntax\n"
">>> Color = Enum('Color', [('RED', 1), ('GREEN', 2), ('BLUE', 3)])"
msgstr ""
">>> from enum import Enum\n"
"\n"
">>> # 类语法\n"
">>> class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"\n"
">>> # 函数语法\n"
">>> Color = Enum('Color', [('RED', 1), ('GREEN', 2), ('BLUE', 3)])"

#: ../../library/enum.rst:49
msgid ""
"Even though we can use :keyword:`class` syntax to create Enums, Enums are "
"not normal Python classes.  See :ref:`How are Enums different? <enum-class-"
"differences>` for more details."
msgstr ""
"虽然我们可以使用 :keyword:`class` 语法来创建枚举，但枚举并不是常规的 Python 类。 请参阅 :ref:`枚举有什么不同？ "
"<enum-class-differences>` 了解更多细节。"

#: ../../library/enum.rst:53
msgid "Nomenclature"
msgstr "命名法"

#: ../../library/enum.rst:55
msgid "The class :class:`!Color` is an *enumeration* (or *enum*)"
msgstr "类 :class:`!Color` 是一个 *枚举* （或 *enum* ）"

#: ../../library/enum.rst:56
msgid ""
"The attributes :attr:`!Color.RED`, :attr:`!Color.GREEN`, etc., are "
"*enumeration members* (or *members*) and are functionally constants."
msgstr ""
"属性 :attr:`!Color.RED` 、 :attr:`!Color.GREEN` 等是 *枚举成员* （或 *members* "
"）并且在功能上是常量。"

#: ../../library/enum.rst:58
msgid ""
"The enum members have *names* and *values* (the name of :attr:`!Color.RED` "
"is ``RED``, the value of :attr:`!Color.BLUE` is ``3``, etc.)"
msgstr ""
"枚举成员有 *names* 和 *values* (:attr:`!Color.RED` 的名称是 "
"``RED``，:attr:`!Color.BLUE` 的值是 ``3``，等等)"

#: ../../library/enum.rst:65
msgid "Module Contents"
msgstr "模块内容"

#: ../../library/enum.rst:67
msgid ":class:`EnumType`"
msgstr ":class:`EnumType`"

#: ../../library/enum.rst:69
msgid "The ``type`` for Enum and its subclasses."
msgstr " Enum 及其子类的 ``type`` 。"

#: ../../library/enum.rst:71
msgid ":class:`Enum`"
msgstr ":class:`Enum`"

#: ../../library/enum.rst:73
msgid "Base class for creating enumerated constants."
msgstr "用于创建枚举常量的基类。"

#: ../../library/enum.rst:75
msgid ":class:`IntEnum`"
msgstr ":class:`IntEnum`"

#: ../../library/enum.rst:77
msgid ""
"Base class for creating enumerated constants that are also subclasses of "
":class:`int`. (`Notes`_)"
msgstr "用于创建枚举常量的基类，这些常量也是 :class:`int` 的子类。 (`Notes`_)"

#: ../../library/enum.rst:80
msgid ":class:`StrEnum`"
msgstr ":class:`StrEnum`"

#: ../../library/enum.rst:82
msgid ""
"Base class for creating enumerated constants that are also subclasses of "
":class:`str`. (`Notes`_)"
msgstr "用于创建枚举常量的基类，这些常量也是 :class:`str` 的子类。 (`Notes`_)"

#: ../../library/enum.rst:85
msgid ":class:`Flag`"
msgstr ":class:`Flag`"

#: ../../library/enum.rst:87
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operations without losing their :class:`Flag` membership."
msgstr "创建可与位运算符搭配使用，又不会失去 :class:`Flag` 成员资格的枚举常量的基类。"

#: ../../library/enum.rst:90
msgid ":class:`IntFlag`"
msgstr ":class:`IntFlag`"

#: ../../library/enum.rst:92
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operators without losing their :class:`IntFlag` membership. "
":class:`IntFlag` members are also subclasses of :class:`int`. (`Notes`_)"
msgstr ""
"创建可与位运算符搭配使用，又不失去 :class:`IntFlag` 成员资格的枚举常量的基类。:class:`IntFlag` 成员也是 "
":class:`int` 的子类。 (`Notes`_)"

#: ../../library/enum.rst:96
msgid ":class:`ReprEnum`"
msgstr ":class:`ReprEnum`"

#: ../../library/enum.rst:98
msgid ""
"Used by :class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag` to keep the"
" :class:`str() <str>` of the mixed-in type."
msgstr ""
"由 :class:`IntEnum` 、:class:`StrEnum` 和 :class:`IntFlag` 用来保持混合类型的 "
":class:`str() <str>` 。"

#: ../../library/enum.rst:101
msgid ":class:`EnumCheck`"
msgstr ":class:`EnumCheck`"

#: ../../library/enum.rst:103
msgid ""
"An enumeration with the values ``CONTINUOUS``, ``NAMED_FLAGS``, and "
"``UNIQUE``, for use with :func:`verify` to ensure various constraints are "
"met by a given enumeration."
msgstr ""
"具有值 ``CONTINUOUS``、``NAMED_FLAGS`` 和 ``UNIQUE`` 的枚举，用于 :func:`verify` "
"以确保给定枚举满足各种约束。"

#: ../../library/enum.rst:107
msgid ":class:`FlagBoundary`"
msgstr ":class:`FlagBoundary`"

#: ../../library/enum.rst:109
msgid ""
"An enumeration with the values ``STRICT``, ``CONFORM``, ``EJECT``, and "
"``KEEP`` which allows for more fine-grained control over how invalid values "
"are dealt with in an enumeration."
msgstr ""
"具有值 ``STRICT`` 、 ``CONFORM`` 、 ``EJECT`` 和 ``KEEP`` "
"的枚举，允许对枚举中无效值的处理方式进行更细粒度的控制。"

#: ../../library/enum.rst:113
msgid ":class:`auto`"
msgstr ":class:`auto`"

#: ../../library/enum.rst:115
msgid ""
"Instances are replaced with an appropriate value for Enum members. "
":class:`StrEnum` defaults to the lower-cased version of the member name, "
"while other Enums default to 1 and increase from there."
msgstr "实例被替换为枚举成员的适当值。 :class:`StrEnum` 默认为成员名称的小写版本，而其他枚举默认为 1 并由此递增。"

#: ../../library/enum.rst:119
msgid ":func:`~enum.property`"
msgstr ":func:`~enum.property`"

#: ../../library/enum.rst:121
msgid ""
"Allows :class:`Enum` members to have attributes without conflicting with "
"member names.  The ``value`` and ``name`` attributes are implemented this "
"way."
msgstr ""
"允许 :class:`Enum` 成员拥有属性而不会与成员名称相冲突。 ``value`` 和 ``name`` 属性都是以这样的方式实现的。"

#: ../../library/enum.rst:125
msgid ":func:`unique`"
msgstr ":func:`unique`"

#: ../../library/enum.rst:127
msgid ""
"Enum class decorator that ensures only one name is bound to any one value."
msgstr "确保一个名称只绑定一个值的 Enum 类装饰器。"

#: ../../library/enum.rst:129
msgid ":func:`verify`"
msgstr ":func:`verify`"

#: ../../library/enum.rst:131
msgid ""
"Enum class decorator that checks user-selectable constraints on an "
"enumeration."
msgstr "检查枚举的用户可选择约束的枚举类装饰器。"

#: ../../library/enum.rst:134
msgid ":func:`member`"
msgstr ":func:`member`"

#: ../../library/enum.rst:136
msgid "Make ``obj`` a member.  Can be used as a decorator."
msgstr "使 ``obj`` 成为成员。可以用作装饰器。"

#: ../../library/enum.rst:138
msgid ":func:`nonmember`"
msgstr ":func:`nonmember`"

#: ../../library/enum.rst:140
msgid "Do not make ``obj`` a member.  Can be used as a decorator."
msgstr "使 ``obj`` 不为成员。可以用作装饰器。"

#: ../../library/enum.rst:142
msgid ":func:`global_enum`"
msgstr ":func:`global_enum`"

#: ../../library/enum.rst:144
msgid ""
"Modify the :class:`str() <str>` and :func:`repr` of an enum to show its "
"members as belonging to the module instead of its class, and export the enum"
" members to the global namespace."
msgstr ""
"修改枚举的 :class:`str() <str>` 和 :func:`repr` 以将其成员显示为属于模块而不是其类，并将枚举成员导出到全局命名空间。"

#: ../../library/enum.rst:148
msgid ":func:`show_flag_values`"
msgstr ":func:`show_flag_values`"

#: ../../library/enum.rst:150
msgid "Return a list of all power-of-two integers contained in a flag."
msgstr "返回标志中包含的所有二次幂整数的列表。"

#: ../../library/enum.rst:153
msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr "``Flag``, ``IntFlag``, ``auto``"

#: ../../library/enum.rst:154
msgid ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"
msgstr ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"

#: ../../library/enum.rst:159
msgid "Data Types"
msgstr "数据类型"

#: ../../library/enum.rst:164
msgid ""
"*EnumType* is the :term:`metaclass` for *enum* enumerations.  It is possible"
" to subclass *EnumType* -- see :ref:`Subclassing EnumType <enumtype-"
"examples>` for details."
msgstr ""
"*EnumType* 是 *enum* 枚举的 :term:`metaclass` 。可以对 *EnumType* 进行子类化——有关详细信息，请参阅 "
":ref:`Subclassing EnumType <enumtype-examples>`。"

#: ../../library/enum.rst:168
msgid ""
"*EnumType* is responsible for setting the correct :meth:`!__repr__`, "
":meth:`!__str__`, :meth:`!__format__`, and :meth:`!__reduce__` methods on "
"the final *enum*, as well as creating the enum members, properly handling "
"duplicates, providing iteration over the enum class, etc."
msgstr ""

#: ../../library/enum.rst:175
msgid "This method is called in two different ways:"
msgstr "此方法以两种不同的方式调用："

#: ../../library/enum.rst:177
msgid "to look up an existing member:"
msgstr "查找现有成员："

#: ../../library/enum.rst:0
msgid "cls"
msgstr "cls"

#: ../../library/enum.rst:179 ../../library/enum.rst:185
msgid "The enum class being called."
msgstr "被调用的枚举类。"

#: ../../library/enum.rst:0
msgid "value"
msgstr "value"

#: ../../library/enum.rst:180
msgid "The value to lookup."
msgstr "要查找的值。"

#: ../../library/enum.rst:182
msgid ""
"to use the ``cls`` enum to create a new enum (only if the existing enum does"
" not have any members):"
msgstr "使用 ``cls`` 枚举创建新枚举（仅当现有枚举没有任何成员时）："

#: ../../library/enum.rst:186
msgid "The name of the new Enum to create."
msgstr "要创建的新枚举的名称。"

#: ../../library/enum.rst:0
msgid "names"
msgstr "names"

#: ../../library/enum.rst:187
msgid "The names/values of the members for the new Enum."
msgstr "新枚举成员的名称/值。"

#: ../../library/enum.rst:0
msgid "module"
msgstr "module"

#: ../../library/enum.rst:188
msgid "The name of the module the new Enum is created in."
msgstr "在其中创建新枚举的模块的名称。"

#: ../../library/enum.rst:0
msgid "qualname"
msgstr "qualname"

#: ../../library/enum.rst:189
msgid "The actual location in the module where this Enum can be found."
msgstr "可以找到此枚举的模块中的实际位置。"

#: ../../library/enum.rst:0
msgid "type"
msgstr "type"

#: ../../library/enum.rst:190
msgid "A mix-in type for the new Enum."
msgstr "新枚举的混合类型。"

#: ../../library/enum.rst:0
msgid "start"
msgstr "start"

#: ../../library/enum.rst:191
msgid "The first integer value for the Enum (used by :class:`auto`)."
msgstr "枚举的第一个整数值（由 :class:`auto` 使用）。"

#: ../../library/enum.rst:0
msgid "boundary"
msgstr "边界"

#: ../../library/enum.rst:192
msgid ""
"How to handle out-of-range values from bit operations (:class:`Flag` only)."
msgstr "如何处理来自位操作的超出范围的值（仅限 :class:`Flag` ）。"

#: ../../library/enum.rst:196
msgid "Returns ``True`` if member belongs to the ``cls``::"
msgstr "如果成员属于``cls`` 则返回``True`` ::"

#: ../../library/enum.rst:198
msgid ""
">>> some_var = Color.RED\n"
">>> some_var in Color\n"
"True\n"
">>> Color.RED.value in Color\n"
"True"
msgstr ""
">>> some_var = Color.RED\n"
">>> some_var in Color\n"
"True\n"
">>> Color.RED.value in Color\n"
"True"

#: ../../library/enum.rst:206
msgid ""
"Before Python 3.12, a ``TypeError`` is raised if a non-Enum-member is used "
"in a containment check."
msgstr "在 Python 3.12 之前，如果在包含检测中使用了非枚举成员则会引发 ``TypeError``。"

#: ../../library/enum.rst:211
msgid ""
"Returns ``['__class__', '__doc__', '__members__', '__module__']`` and the "
"names of the members in *cls*::"
msgstr ""
"返回 ``['__class__', '__doc__', '__members__', '__module__']`` 和 *cls* 中的成员名称 "
"::"

#: ../../library/enum.rst:214
msgid ""
">>> dir(Color)\n"
"['BLUE', 'GREEN', 'RED', '__class__', '__contains__', '__doc__', '__getitem__', '__init_subclass__', '__iter__', '__len__', '__members__', '__module__', '__name__', '__qualname__']"
msgstr ""
">>> dir(Color)\n"
"['BLUE', 'GREEN', 'RED', '__class__', '__contains__', '__doc__', '__getitem__', '__init_subclass__', '__iter__', '__len__', '__members__', '__module__', '__name__', '__qualname__']"

#: ../../library/enum.rst:219
msgid ""
"Returns the Enum member in *cls* matching *name*, or raises a "
":exc:`KeyError`::"
msgstr "返回 *cls* 中匹配 *name* 的 Enum 成员，或者引发 :exc:`KeyError`::"

#: ../../library/enum.rst:221
msgid ""
">>> Color['BLUE']\n"
"<Color.BLUE: 3>"
msgstr ""
">>> Color['BLUE']\n"
"<Color.BLUE: 3>"

#: ../../library/enum.rst:226
msgid "Returns each member in *cls* in definition order::"
msgstr "按定义顺序返回 *cls* 中的每个成员::"

#: ../../library/enum.rst:228
msgid ""
">>> list(Color)\n"
"[<Color.RED: 1>, <Color.GREEN: 2>, <Color.BLUE: 3>]"
msgstr ""
">>> list(Color)\n"
"[<Color.RED: 1>, <Color.GREEN: 2>, <Color.BLUE: 3>]"

#: ../../library/enum.rst:233
msgid "Returns the number of member in *cls*::"
msgstr "返回 *cls* 中成员的数量::"

#: ../../library/enum.rst:235
msgid ""
">>> len(Color)\n"
"3"
msgstr ""
">>> len(Color)\n"
"3"

#: ../../library/enum.rst:240
msgid "Returns a mapping of every enum name to its member, including aliases"
msgstr "返回一个从每个枚举名称到其成员的映射，包括别名"

#: ../../library/enum.rst:244
msgid "Returns each member in *cls* in reverse definition order::"
msgstr "按定义的逆序返回 *cls* 中的每个成员::"

#: ../../library/enum.rst:246
msgid ""
">>> list(reversed(Color))\n"
"[<Color.BLUE: 3>, <Color.GREEN: 2>, <Color.RED: 1>]"
msgstr ""
">>> list(reversed(Color))\n"
"[<Color.BLUE: 3>, <Color.GREEN: 2>, <Color.RED: 1>]"

#: ../../library/enum.rst:251
msgid ""
"Before 3.11 ``enum`` used ``EnumMeta`` type, which is kept as an alias."
msgstr ""

#: ../../library/enum.rst:256
msgid "*Enum* is the base class for all *enum* enumerations."
msgstr "*Enum* 是所有 *enum* 枚举的基类。"

#: ../../library/enum.rst:260
msgid "The name used to define the ``Enum`` member::"
msgstr "用于定义 ``Enum`` 成员的名称::"

#: ../../library/enum.rst:262
msgid ""
">>> Color.BLUE.name\n"
"'BLUE'"
msgstr ""
">>> Color.BLUE.name\n"
"'BLUE'"

#: ../../library/enum.rst:267
msgid "The value given to the ``Enum`` member::"
msgstr "赋给 ``Enum`` 成员的值::"

#: ../../library/enum.rst:269
msgid ""
">>> Color.RED.value\n"
"1"
msgstr ""
">>> Color.RED.value\n"
"1"

#: ../../library/enum.rst:272 ../../library/enum.rst:292
msgid "Value of the member, can be set in :meth:`~Enum.__new__`."
msgstr "成员的值，可在 :meth:`~Enum.__new__` 中设置。"

#: ../../library/enum.rst:274
msgid "Enum member values"
msgstr "Enum 成员值"

#: ../../library/enum.rst:276
msgid ""
"Member values can be anything: :class:`int`, :class:`str`, etc.  If the "
"exact value is unimportant you may use :class:`auto` instances and an "
"appropriate value will be chosen for you.  See :class:`auto` for the "
"details."
msgstr ""
"成员值可以为任意类型: :class:`int`, :class:`str` 等等。 如果具体的值不重要则你可以使用 :class:`auto` "
"实例这将为你选择一个适当的值。 详情参见 :class:`auto`。"

#: ../../library/enum.rst:281
msgid ""
"While mutable/unhashable values, such as :class:`dict`, :class:`list` or a "
"mutable :class:`~dataclasses.dataclass`, can be used, they will have a "
"quadratic performance impact during creation relative to the total number of"
" mutable/unhashable values in the enum."
msgstr ""
"虽然可以使用可变/不可哈希的值，比如 :class:`dict`, :class:`list` 或是可变的 "
":class:`~dataclasses.dataclass`，但它们在创建期间会产生基于枚举中可变/不可哈希的值数量的指数级性能影响。"

#: ../../library/enum.rst:288
msgid "Name of the member."
msgstr "成员的名称。"

#: ../../library/enum.rst:296
msgid ""
"No longer used, kept for backward compatibility. (class attribute, removed "
"during class creation)."
msgstr "已不再使用，保留以便向下兼容。 （类属性，在类创建期间移除）。"

#: ../../library/enum.rst:301
msgid ""
"``_ignore_`` is only used during creation and is removed from the "
"enumeration once creation is complete."
msgstr "``_ignore_`` 仅在创建期间使用并会在创建完成后立即从枚举中移除。"

#: ../../library/enum.rst:304
msgid ""
"``_ignore_`` is a list of names that will not become members, and whose "
"names will also be removed from the completed enumeration.  See "
":ref:`TimePeriod <enum-time-period>` for an example."
msgstr ""
"``_ignore_`` 是由不会被作为成员的名称组成的列包，并且这些名称还将从完成的枚举中移除。 请参阅 :ref:`TimePeriod "
"<enum-time-period>` 获取示例。"

#: ../../library/enum.rst:310
msgid ""
"Returns ``['__class__', '__doc__', '__module__', 'name', 'value']`` and any "
"public methods defined on *self.__class__*::"
msgstr ""
"返回 ``['__class__', '__doc__', '__module__', 'name', 'value']`` 以及在 "
"*self.__class__* 上定义的任何公有方法::"

#: ../../library/enum.rst:313
msgid ""
">>> from datetime import date\n"
">>> class Weekday(Enum):\n"
"...     MONDAY = 1\n"
"...     TUESDAY = 2\n"
"...     WEDNESDAY = 3\n"
"...     THURSDAY = 4\n"
"...     FRIDAY = 5\n"
"...     SATURDAY = 6\n"
"...     SUNDAY = 7\n"
"...     @classmethod\n"
"...     def today(cls):\n"
"...         print('today is %s' % cls(date.today().isoweekday()).name)\n"
"...\n"
">>> dir(Weekday.SATURDAY)\n"
"['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', 'today', 'value']"
msgstr ""
">>> from datetime import date\n"
">>> class Weekday(Enum):\n"
"...     MONDAY = 1\n"
"...     TUESDAY = 2\n"
"...     WEDNESDAY = 3\n"
"...     THURSDAY = 4\n"
"...     FRIDAY = 5\n"
"...     SATURDAY = 6\n"
"...     SUNDAY = 7\n"
"...     @classmethod\n"
"...     def today(cls):\n"
"...         print('today is %s' % cls(date.today().isoweekday()).name)\n"
"...\n"
">>> dir(Weekday.SATURDAY)\n"
"['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', 'today', 'value']"

#: ../../library/enum.rst:0
msgid "name"
msgstr "name"

#: ../../library/enum.rst:331
msgid "The name of the member being defined (e.g. 'RED')."
msgstr "定义的成员名称（例如 'RED'）。"

#: ../../library/enum.rst:332
msgid "The start value for the Enum; the default is 1."
msgstr "Enum 的起始值；默认为 1。"

#: ../../library/enum.rst:0
msgid "count"
msgstr "count"

#: ../../library/enum.rst:333
msgid "The number of members currently defined, not including this one."
msgstr "当前定义的成员数量，不包括这一个。"

#: ../../library/enum.rst:0
msgid "last_values"
msgstr "last_values"

#: ../../library/enum.rst:334
msgid "A list of the previous values."
msgstr "由前面的值组成的列表。"

#: ../../library/enum.rst:336
msgid ""
"A *staticmethod* that is used to determine the next value returned by "
":class:`auto`::"
msgstr "一个用来确定由 :class:`auto` 所返回的下一个值的 *静态方法*::"

#: ../../library/enum.rst:339
msgid ""
">>> from enum import auto\n"
">>> class PowersOfThree(Enum):\n"
"...     @staticmethod\n"
"...     def _generate_next_value_(name, start, count, last_values):\n"
"...         return 3 ** (count + 1)\n"
"...     FIRST = auto()\n"
"...     SECOND = auto()\n"
"...\n"
">>> PowersOfThree.SECOND.value\n"
"9"
msgstr ""
">>> from enum import auto\n"
">>> class PowersOfThree(Enum):\n"
"...     @staticmethod\n"
"...     def _generate_next_value_(name, start, count, last_values):\n"
"...         return 3 ** (count + 1)\n"
"...     FIRST = auto()\n"
"...     SECOND = auto()\n"
"...\n"
">>> PowersOfThree.SECOND.value\n"
"9"

#: ../../library/enum.rst:352
msgid ""
"By default, does nothing.  If multiple values are given in the member "
"assignment, those values become separate arguments to ``__init__``; e.g."
msgstr "在默认情况下，将不做任何事。 如果在成员赋值时给出了多个值，这些值将成为传给 ``__init__`` 的单独参数；例如"

#: ../../library/enum.rst:359
msgid ""
"``Weekday.__init__()`` would be called as ``Weekday.__init__(self, 1, "
"'Mon')``"
msgstr "``Weekday.__init__()`` 将以 ``Weekday.__init__(self, 1, 'Mon')`` 的形式被调用"

#: ../../library/enum.rst:363
msgid ""
"A *classmethod* that is used to further configure subsequent subclasses. By "
"default, does nothing."
msgstr "一个用来进一步配置后续子类的 *类方法*。 在默认情况下，将不做任何事。"

#: ../../library/enum.rst:368
msgid ""
"A *classmethod* for looking up values not found in *cls*.  By default it "
"does nothing, but can be overridden to implement custom search behavior::"
msgstr "一个用来查找不存在于 *cls* 中的值的 *类方法*。 在默认情况下它将不做任何事，但可以被重写以实现自定义的搜索行为::"

#: ../../library/enum.rst:371
msgid ""
">>> from enum import StrEnum\n"
">>> class Build(StrEnum):\n"
"...     DEBUG = auto()\n"
"...     OPTIMIZED = auto()\n"
"...     @classmethod\n"
"...     def _missing_(cls, value):\n"
"...         value = value.lower()\n"
"...         for member in cls:\n"
"...             if member.value == value:\n"
"...                 return member\n"
"...         return None\n"
"...\n"
">>> Build.DEBUG.value\n"
"'debug'\n"
">>> Build('deBUG')\n"
"<Build.DEBUG: 'debug'>"
msgstr ""
">>> from enum import StrEnum\n"
">>> class Build(StrEnum):\n"
"...     DEBUG = auto()\n"
"...     OPTIMIZED = auto()\n"
"...     @classmethod\n"
"...     def _missing_(cls, value):\n"
"...         value = value.lower()\n"
"...         for member in cls:\n"
"...             if member.value == value:\n"
"...                 return member\n"
"...         return None\n"
"...\n"
">>> Build.DEBUG.value\n"
"'debug'\n"
">>> Build('deBUG')\n"
"<Build.DEBUG: 'debug'>"

#: ../../library/enum.rst:390
msgid ""
"By default, doesn't exist.  If specified, either in the enum class "
"definition or in a mixin class (such as ``int``), all values given in the "
"member assignment will be passed; e.g."
msgstr ""
"在默认情况下，将不会存在。 如果指定，则或是在枚举类定义中或是在混入类定义中 (比如 ``int``)，在成员赋值时给出的所有值都将被传递；例如"

#: ../../library/enum.rst:398
msgid ""
"results in the call ``int('1a', 16)`` and a value of ``26`` for the member."
msgstr "``int('1a', 16)`` 调用的结果和成员的值 ``26``。"

#: ../../library/enum.rst:402
msgid ""
"When writing a custom ``__new__``, do not use ``super().__new__`` -- call "
"the appropriate ``__new__`` instead."
msgstr ""
"当编写自定义的 ``__new__`` 时，不要使用 ``super().__new__`` -- 而要调用适当的 ``__new__``。"

#: ../../library/enum.rst:407
msgid ""
"Returns the string used for *repr()* calls.  By default, returns the *Enum* "
"name, member name, and value, but can be overridden::"
msgstr "返回用于 *repr()* 调用的字符串。 在默认情况下，将返回 *Enum* 名称、成员名称和值，但也可以被重写::"

#: ../../library/enum.rst:410
msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __repr__(self):\n"
"...         cls_name = self.__class__.__name__\n"
"...         return f'{cls_name}.{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle.ALTERNATE}\"\n"
"(OtherStyle.ALTERNATE, 'OtherStyle.ALTERNATE', 'OtherStyle.ALTERNATE')"
msgstr ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __repr__(self):\n"
"...         cls_name = self.__class__.__name__\n"
"...         return f'{cls_name}.{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle.ALTERNATE}\"\n"
"(OtherStyle.ALTERNATE, 'OtherStyle.ALTERNATE', 'OtherStyle.ALTERNATE')"

#: ../../library/enum.rst:423
msgid ""
"Returns the string used for *str()* calls.  By default, returns the *Enum* "
"name and member name, but can be overridden::"
msgstr "返回用于 *str()* 调用的字符串。 在默认情况下，返回 *Enum* 名称和成员名称，但也可以被重写::"

#: ../../library/enum.rst:426
msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __str__(self):\n"
"...         return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle.ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'ALTERNATE', 'ALTERNATE')"
msgstr ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __str__(self):\n"
"...         return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle.ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'ALTERNATE', 'ALTERNATE')"

#: ../../library/enum.rst:438
msgid ""
"Returns the string used for *format()* and *f-string* calls.  By default, "
"returns :meth:`__str__` return value, but can be overridden::"
msgstr ""
"返回用于 *format()* 和 *f-string* 调用的字符串。 在默认情况下，将返回 :meth:`__str__` "
"的返回值，但也可以被重写::"

#: ../../library/enum.rst:441
msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __format__(self, spec):\n"
"...         return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle.ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'OtherStyle.ALTERNATE', 'ALTERNATE')"
msgstr ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __format__(self, spec):\n"
"...         return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle.ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'OtherStyle.ALTERNATE', 'ALTERNATE')"

#: ../../library/enum.rst:453
msgid ""
"Using :class:`auto` with :class:`Enum` results in integers of increasing "
"value, starting with ``1``."
msgstr "将 :class:`auto` 用于 :class:`Enum` 将得到递增的整数值，从 ``1`` 开始。"

#: ../../library/enum.rst:456
msgid "Added :ref:`enum-dataclass-support`"
msgstr "增加了 :ref:`enum-dataclass-support`"

#: ../../library/enum.rst:461
msgid ""
"*IntEnum* is the same as *Enum*, but its members are also integers and can "
"be used anywhere that an integer can be used.  If any integer operation is "
"performed with an *IntEnum* member, the resulting value loses its "
"enumeration status."
msgstr ""

#: ../../library/enum.rst:482
msgid ""
"Using :class:`auto` with :class:`IntEnum` results in integers of increasing "
"value, starting with ``1``."
msgstr "将 :class:`auto` 用于 :class:`IntEnum` 将得到递增的整数值，从 ``1`` 开始。"

#: ../../library/enum.rst:485
msgid ""
":meth:`~object.__str__` is now :meth:`!int.__str__` to better support the "
"*replacement of existing constants* use-case. :meth:`~object.__format__` was"
" already :meth:`!int.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` 现在是 :meth:`!int.__str__` 以更好地支持 *现有常量的替换* 应用场景。 "
"出于同样的原因 :meth:`~object.__format__` 也已经是 :meth:`!int.__format__`。"

#: ../../library/enum.rst:492
msgid ""
"*StrEnum* is the same as *Enum*, but its members are also strings and can be"
" used in most of the same places that a string can be used.  The result of "
"any string operation performed on or with a *StrEnum* member is not part of "
"the enumeration."
msgstr ""

#: ../../library/enum.rst:498
msgid ""
"There are places in the stdlib that check for an exact :class:`str` instead "
"of a :class:`str` subclass (i.e. ``type(unknown) == str`` instead of "
"``isinstance(unknown, str)``), and in those locations you will need to use "
"``str(StrEnum.member)``."
msgstr ""
"在标准库中有些地方会检查是否是真正的 :class:`str` 而不是 :class:`str` 的子类 (例如使用 ``type(unknown) "
"== str`` 而不是 ``isinstance(unknown, str)``)，在这些地方你将需要使用 "
"``str(StrEnum.member)``。"

#: ../../library/enum.rst:505
msgid ""
"Using :class:`auto` with :class:`StrEnum` results in the lower-cased member "
"name as the value."
msgstr "将 :class:`auto` 用于 :class:`StrEnum` 将得到小写形式的成员名称字符串值。"

#: ../../library/enum.rst:510
msgid ""
":meth:`~object.__str__` is :meth:`!str.__str__` to better support the "
"*replacement of existing constants* use-case.  :meth:`~object.__format__` is"
" likewise :meth:`!str.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` 是 :meth:`!str.__str__` 以更好地支持 *现有常量的替换* 应用场景。 "
"出于同样的原因 :meth:`~object.__format__` 也是 :meth:`!str.__format__`。"

#: ../../library/enum.rst:518
msgid ""
"``Flag`` is the same as :class:`Enum`, but its members support the bitwise "
"operators ``&`` (*AND*), ``|`` (*OR*), ``^`` (*XOR*), and ``~`` (*INVERT*); "
"the results of those operations are (aliases of) members of the enumeration."
msgstr ""
"``Flag`` 与 :class:`Enum` 的相同，但其成员支持按位运算符 ``&`` (*AND*), ``|`` (*OR*), ``^`` "
"(*XOR*) 和 ``~`` (*INVERT*)；这些运算的结果都是枚举成员（的别名）。"

#: ../../library/enum.rst:524
msgid "Returns *True* if value is in self::"
msgstr "如果 value 是 self 之中则返回 *True*::"

#: ../../library/enum.rst:526
msgid ""
">>> from enum import Flag, auto\n"
">>> class Color(Flag):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> purple = Color.RED | Color.BLUE\n"
">>> white = Color.RED | Color.GREEN | Color.BLUE\n"
">>> Color.GREEN in purple\n"
"False\n"
">>> Color.GREEN in white\n"
"True\n"
">>> purple in white\n"
"True\n"
">>> white in purple\n"
"False"
msgstr ""
">>> from enum import Flag, auto\n"
">>> class Color(Flag):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> purple = Color.RED | Color.BLUE\n"
">>> white = Color.RED | Color.GREEN | Color.BLUE\n"
">>> Color.GREEN in purple\n"
"False\n"
">>> Color.GREEN in white\n"
"True\n"
">>> purple in white\n"
"True\n"
">>> white in purple\n"
"False"

#: ../../library/enum.rst:545
msgid "Returns all contained non-alias members::"
msgstr "返回所有包含的非别名成员::"

#: ../../library/enum.rst:547
msgid ""
">>> list(Color.RED)\n"
"[<Color.RED: 1>]\n"
">>> list(purple)\n"
"[<Color.RED: 1>, <Color.BLUE: 4>]"
msgstr ""
">>> list(Color.RED)\n"
"[<Color.RED: 1>]\n"
">>> list(purple)\n"
"[<Color.RED: 1>, <Color.BLUE: 4>]"

#: ../../library/enum.rst:556
msgid "Returns number of members in flag::"
msgstr "返回旗标中成员的数量::"

#: ../../library/enum.rst:558
msgid ""
">>> len(Color.GREEN)\n"
"1\n"
">>> len(white)\n"
"3"
msgstr ""
">>> len(Color.GREEN)\n"
"1\n"
">>> len(white)\n"
"3"

#: ../../library/enum.rst:567
msgid "Returns *True* if any members in flag, *False* otherwise::"
msgstr "如果旗标中有成员则返回 *True*，否则返回 *False*::"

#: ../../library/enum.rst:569
msgid ""
">>> bool(Color.GREEN)\n"
"True\n"
">>> bool(white)\n"
"True\n"
">>> black = Color(0)\n"
">>> bool(black)\n"
"False"
msgstr ""
">>> bool(Color.GREEN)\n"
"True\n"
">>> bool(white)\n"
"True\n"
">>> black = Color(0)\n"
">>> bool(black)\n"
"False"

#: ../../library/enum.rst:579
msgid "Returns current flag binary or'ed with other::"
msgstr "返回当前旗标与另一个旗标执行二进制或运算的结果::"

#: ../../library/enum.rst:581
msgid ""
">>> Color.RED | Color.GREEN\n"
"<Color.RED|GREEN: 3>"
msgstr ""
">>> Color.RED | Color.GREEN\n"
"<Color.RED|GREEN: 3>"

#: ../../library/enum.rst:586
msgid "Returns current flag binary and'ed with other::"
msgstr "返回当前旗标与另一个旗标执行二进制与运算的结果::"

#: ../../library/enum.rst:588
msgid ""
">>> purple & white\n"
"<Color.RED|BLUE: 5>\n"
">>> purple & Color.GREEN\n"
"<Color: 0>"
msgstr ""
">>> purple & white\n"
"<Color.RED|BLUE: 5>\n"
">>> purple & Color.GREEN\n"
"<Color: 0>"

#: ../../library/enum.rst:595
msgid "Returns current flag binary xor'ed with other::"
msgstr "返回当前旗标与另一个旗标执行二进制异或运算的结果::"

#: ../../library/enum.rst:597
msgid ""
">>> purple ^ white\n"
"<Color.GREEN: 2>\n"
">>> purple ^ Color.GREEN\n"
"<Color.RED|GREEN|BLUE: 7>"
msgstr ""
">>> purple ^ white\n"
"<Color.GREEN: 2>\n"
">>> purple ^ Color.GREEN\n"
"<Color.RED|GREEN|BLUE: 7>"

#: ../../library/enum.rst:604
msgid "Returns all the flags in *type(self)* that are not in self::"
msgstr ""

#: ../../library/enum.rst:606
msgid ""
">>> ~white\n"
"<Color: 0>\n"
">>> ~purple\n"
"<Color.GREEN: 2>\n"
">>> ~Color.RED\n"
"<Color.GREEN|BLUE: 6>"
msgstr ""
">>> ~white\n"
"<Color: 0>\n"
">>> ~purple\n"
"<Color.GREEN: 2>\n"
">>> ~Color.RED\n"
"<Color.GREEN|BLUE: 6>"

#: ../../library/enum.rst:615
msgid ""
"Function used to format any remaining unnamed numeric values.  Default is "
"the value's repr; common choices are :func:`hex` and :func:`oct`."
msgstr "用于格式化任何其他未命名数字值的函数。 默认为数字值的 repr；常见的选择有 :func:`hex` 和 :func:`oct`。"

#: ../../library/enum.rst:620
msgid ""
"Using :class:`auto` with :class:`Flag` results in integers that are powers "
"of two, starting with ``1``."
msgstr "将 :class:`auto` 用于 :class:`Flag` 将得到二的整数次方，从 ``1`` 开始。"

#: ../../library/enum.rst:623
msgid "The *repr()* of zero-valued flags has changed.  It is now::"
msgstr "零值旗标的 *repr()* 已被修改。 现在将是::"

#: ../../library/enum.rst:631
msgid ""
"*IntFlag* is the same as *Flag*, but its members are also integers and can "
"be used anywhere that an integer can be used."
msgstr ""

#: ../../library/enum.rst:645
msgid ""
"If any integer operation is performed with an *IntFlag* member, the result "
"is not an *IntFlag*::"
msgstr "如果对一个 *IntFlag* 成员执行任何整数运算，结果将不再是一个 *IntFlag*::"

#: ../../library/enum.rst:648
msgid ""
">>> Color.RED + 2\n"
"3"
msgstr ""
">>> Color.RED + 2\n"
"3"

#: ../../library/enum.rst:651
msgid "If a *Flag* operation is performed with an *IntFlag* member and:"
msgstr ""

#: ../../library/enum.rst:653
msgid "the result is a valid *IntFlag*: an *IntFlag* is returned"
msgstr "结果是一个合法的 *IntFlag*: 将返回一个 *IntFlag*"

#: ../../library/enum.rst:654
msgid ""
"the result is not a valid *IntFlag*: the result depends on the "
"*FlagBoundary* setting"
msgstr ""

#: ../../library/enum.rst:656
msgid "The *repr()* of unnamed zero-valued flags has changed.  It is now:"
msgstr ""

#: ../../library/enum.rst:663
msgid ""
"Using :class:`auto` with :class:`IntFlag` results in integers that are "
"powers of two, starting with ``1``."
msgstr "将 :class:`auto` 用于 :class:`IntFlag` 将得到二的整数次方，从 ``1`` 开始。"

#: ../../library/enum.rst:668
msgid ""
":meth:`~object.__str__` is now :meth:`!int.__str__` to better support the "
"*replacement of existing constants* use-case.  :meth:`~object.__format__` "
"was already :meth:`!int.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` 现在是 :meth:`!int.__str__` 以更好地支持 *现有常量的替换* 应用场景。 "
"出于同样的原因 :meth:`~object.__format__` 也已经是 :meth:`!int.__format__`。"

#: ../../library/enum.rst:672
msgid ""
"Inversion of an :class:`!IntFlag` now returns a positive value that is the "
"union of all flags not in the given flag, rather than a negative value. This"
" matches the existing :class:`Flag` behavior."
msgstr ""
"对一个 :class:`!IntFlag` 的反转现在将返回一个等于不在给定旗标中的所有旗标的并集的正值，而非一个负值。 这与现有 "
":class:`Flag` 的行为相匹配。"

#: ../../library/enum.rst:678
msgid ""
":class:`!ReprEnum` uses the :meth:`repr() <Enum.__repr__>` of :class:`Enum`,"
" but the :class:`str() <str>` of the mixed-in data type:"
msgstr ""
":class:`!ReprEnum` 将使用 :class:`Enum` 的 :meth:`repr() "
"<Enum.__repr__>`，但使用混入数据类型的 :class:`str() <str>`:"

#: ../../library/enum.rst:681
msgid ":meth:`!int.__str__` for :class:`IntEnum` and :class:`IntFlag`"
msgstr ":meth:`!int.__str__` 用于 :class:`IntEnum` 和 :class:`IntFlag`"

#: ../../library/enum.rst:682
msgid ":meth:`!str.__str__` for :class:`StrEnum`"
msgstr ":meth:`!str.__str__` 用于 :class:`StrEnum`"

#: ../../library/enum.rst:684
msgid ""
"Inherit from :class:`!ReprEnum` to keep the :class:`str() <str>` / "
":func:`format` of the mixed-in data type instead of using the "
":class:`Enum`-default :meth:`str() <Enum.__str__>`."
msgstr ""
"从 :class:`!ReprEnum` 继承以存放混入数据类型的 :class:`str() <str>` / :func:`format` "
"而不是使用 :class:`Enum` 默认的 :meth:`str() <Enum.__str__>`。"

#: ../../library/enum.rst:693
msgid ""
"*EnumCheck* contains the options used by the :func:`verify` decorator to "
"ensure various constraints; failed constraints result in a "
":exc:`ValueError`."
msgstr ""
"*EnumCheck* 包含由 :func:`verify` 装饰器用来确保各种约束的选项；失败的约束将导致 :exc:`ValueError`。"

#: ../../library/enum.rst:698
msgid "Ensure that each value has only one name::"
msgstr "确保每个值只有一个名称::"

#: ../../library/enum.rst:700
msgid ""
">>> from enum import Enum, verify, UNIQUE\n"
">>> @verify(UNIQUE)\n"
"... class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"...     CRIMSON = 1\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: aliases found in <enum 'Color'>: CRIMSON -> RED"
msgstr ""
">>> from enum import Enum, verify, UNIQUE\n"
">>> @verify(UNIQUE)\n"
"... class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"...     CRIMSON = 1\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: aliases found in <enum 'Color'>: CRIMSON -> RED"

#: ../../library/enum.rst:714
msgid ""
"Ensure that there are no missing values between the lowest-valued member and"
" the highest-valued member::"
msgstr "确保在最低值成员和最高值成员之间没有缺失的值::"

#: ../../library/enum.rst:717
msgid ""
">>> from enum import Enum, verify, CONTINUOUS\n"
">>> @verify(CONTINUOUS)\n"
"... class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 5\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: invalid enum 'Color': missing values 3, 4"
msgstr ""
">>> from enum import Enum, verify, CONTINUOUS\n"
">>> @verify(CONTINUOUS)\n"
"... class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 5\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: invalid enum 'Color': missing values 3, 4"

#: ../../library/enum.rst:729
msgid ""
"Ensure that any flag groups/masks contain only named flags -- useful when "
"values are specified instead of being generated by :func:`auto`::"
msgstr "确保任何旗标分组/掩码只包含已命名的旗标 -- 在值是明确指定而不是由 :func:`auto` 生成时将很有用处::"

#: ../../library/enum.rst:732
msgid ""
">>> from enum import Flag, verify, NAMED_FLAGS\n"
">>> @verify(NAMED_FLAGS)\n"
"... class Color(Flag):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 4\n"
"...     WHITE = 15\n"
"...     NEON = 31\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: invalid Flag 'Color': aliases WHITE and NEON are missing combined values of 0x18 [use enum.show_flag_values(value) for details]"
msgstr ""
">>> from enum import Flag, verify, NAMED_FLAGS\n"
">>> @verify(NAMED_FLAGS)\n"
"... class Color(Flag):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 4\n"
"...     WHITE = 15\n"
"...     NEON = 31\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: invalid Flag 'Color': aliases WHITE and NEON are missing combined values of 0x18 [use enum.show_flag_values(value) for details]"

#: ../../library/enum.rst:746
msgid ""
"CONTINUOUS and NAMED_FLAGS are designed to work with integer-valued members."
msgstr "CONTINUOUS 和 NAMED_FLAGS 被设计用于配合整数值成员。"

#: ../../library/enum.rst:752
msgid ""
"*FlagBoundary* controls how out-of-range values are handled in *Flag* and "
"its subclasses."
msgstr ""

#: ../../library/enum.rst:757
msgid ""
"Out-of-range values cause a :exc:`ValueError` to be raised. This is the "
"default for :class:`Flag`::"
msgstr "超出范围的值将导致引发 :exc:`ValueError`。 这是 :class:`Flag` 的默认设置::"

#: ../../library/enum.rst:760
msgid ""
">>> from enum import Flag, STRICT, auto\n"
">>> class StrictFlag(Flag, boundary=STRICT):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> StrictFlag(2**2 + 2**4)\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: <flag 'StrictFlag'> invalid value 20\n"
"    given 0b0 10100\n"
"  allowed 0b0 00111"
msgstr ""
">>> from enum import Flag, STRICT, auto\n"
">>> class StrictFlag(Flag, boundary=STRICT):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> StrictFlag(2**2 + 2**4)\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: <flag 'StrictFlag'> invalid value 20\n"
"    given 0b0 10100\n"
"  allowed 0b0 00111"

#: ../../library/enum.rst:775
msgid ""
"Out-of-range values have invalid values removed, leaving a valid *Flag* "
"value::"
msgstr ""

#: ../../library/enum.rst:778
msgid ""
">>> from enum import Flag, CONFORM, auto\n"
">>> class ConformFlag(Flag, boundary=CONFORM):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> ConformFlag(2**2 + 2**4)\n"
"<ConformFlag.BLUE: 4>"
msgstr ""
">>> from enum import Flag, CONFORM, auto\n"
">>> class ConformFlag(Flag, boundary=CONFORM):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> ConformFlag(2**2 + 2**4)\n"
"<ConformFlag.BLUE: 4>"

#: ../../library/enum.rst:789
msgid ""
"Out-of-range values lose their *Flag* membership and revert to :class:`int`."
msgstr ""

#: ../../library/enum.rst:802
msgid ""
"Out-of-range values are kept, and the *Flag* membership is kept. This is the"
" default for :class:`IntFlag`::"
msgstr ""

#: ../../library/enum.rst:805
msgid ""
">>> from enum import Flag, KEEP, auto\n"
">>> class KeepFlag(Flag, boundary=KEEP):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> KeepFlag(2**2 + 2**4)\n"
"<KeepFlag.BLUE|16: 20>"
msgstr ""
">>> from enum import Flag, KEEP, auto\n"
">>> class KeepFlag(Flag, boundary=KEEP):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> KeepFlag(2**2 + 2**4)\n"
"<KeepFlag.BLUE|16: 20>"

#: ../../library/enum.rst:819
msgid "Supported ``__dunder__`` names"
msgstr "支持的 ``__dunder__`` 名称"

#: ../../library/enum.rst:821
msgid ""
":attr:`~EnumType.__members__` is a read-only ordered mapping of "
"``member_name``:``member`` items.  It is only available on the class."
msgstr ""
":attr:`~EnumType.__members__` 是由 ``member_name``:``member`` 条目组成的只读有序映射。 "
"它只在类上可用。"

#: ../../library/enum.rst:824
msgid ""
":meth:`~Enum.__new__`, if specified, must create and return the enum "
"members; it is also a very good idea to set the member's :attr:`!_value_` "
"appropriately.  Once all the members are created it is no longer used."
msgstr ""

#: ../../library/enum.rst:830
msgid "Supported ``_sunder_`` names"
msgstr "支持的 ``_sunder_`` 名称"

#: ../../library/enum.rst:832
msgid ":attr:`~Enum._name_` -- name of the member"
msgstr ":attr:`~Enum._name_` -- 成员的名称"

#: ../../library/enum.rst:833
msgid ""
":attr:`~Enum._value_` -- value of the member; can be set in ``__new__``"
msgstr ":attr:`~Enum._value_` -- 成员的值；可在 ``__new__`` 中设置"

#: ../../library/enum.rst:834
msgid ""
":meth:`~Enum._missing_` -- a lookup function used when a value is not found;"
" may be overridden"
msgstr ":meth:`~Enum._missing_` -- 当未找到某个值时所使用的查找函数；可被重写"

#: ../../library/enum.rst:836
msgid ""
":attr:`~Enum._ignore_` -- a list of names, either as a :class:`list` or a "
":class:`str`, that will not be transformed into members, and will be removed"
" from the final class"
msgstr ""
":attr:`~Enum._ignore_` -- 一个名称列表，可以为 :class:`list` 或 "
":class:`str`，它不会被转化为成员，并将从最终类中移除"

#: ../../library/enum.rst:839
msgid ""
":attr:`~Enum._order_` -- no longer used, kept for backward compatibility "
"(class attribute, removed during class creation)"
msgstr ":attr:`~Enum._order_` -- 已不再使用，保留以便向下兼容（类属性，在类创建期间移除）"

#: ../../library/enum.rst:841
msgid ""
":meth:`~Enum._generate_next_value_` -- used to get an appropriate value for "
"an enum member; may be overridden"
msgstr ":meth:`~Enum._generate_next_value_` -- 用于为枚举成员获取适当的值；可被重写"

#: ../../library/enum.rst:846
msgid ""
"For standard :class:`Enum` classes the next value chosen is the last value "
"seen incremented by one."
msgstr "对于标准的 :class:`Enum` 类，选择的下一个值是最后所见值加1。"

#: ../../library/enum.rst:849
msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two, regardless of the last value seen."
msgstr "对于 :class:`Flag` 类，下一个选择的值将是下一个最高的2次幂数，与最后所见值无关。"

#: ../../library/enum.rst:852
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

#: ../../library/enum.rst:853
msgid "``_ignore_``"
msgstr "``_ignore_``"

#: ../../library/enum.rst:858
msgid "Utilities and Decorators"
msgstr "工具与装饰器"

#: ../../library/enum.rst:862
msgid ""
"*auto* can be used in place of a value.  If used, the *Enum* machinery will "
"call an *Enum*'s :meth:`~Enum._generate_next_value_` to get an appropriate "
"value. For *Enum* and *IntEnum* that appropriate value will be the last "
"value plus one; for *Flag* and *IntFlag* it will be the first power-of-two "
"greater than the highest value; for *StrEnum* it will be the lower-cased "
"version of the member's name.  Care must be taken if mixing *auto()* with "
"manually specified values."
msgstr ""

#: ../../library/enum.rst:870
msgid ""
"*auto* instances are only resolved when at the top level of an assignment:"
msgstr "*auto* 实际仅会在赋值操作的最高层级上被解析:"

#: ../../library/enum.rst:872
msgid "``FIRST = auto()`` will work (auto() is replaced with ``1``);"
msgstr "``FIRST = auto()`` 将是可用的 (auto() 会被替换为 ``1``);"

#: ../../library/enum.rst:873
msgid ""
"``SECOND = auto(), -2`` will work (auto is replaced with ``2``, so ``2, -2``"
" is used to create the ``SECOND`` enum member;"
msgstr ""
"``SECOND = auto(), -2`` 将是可用的 (auto 会被替换为 ``2``，因此将使用 ``2, -2`` 来创建 "
"``SECOND`` 枚举成员；"

#: ../../library/enum.rst:875
msgid ""
"``THREE = [auto(), -3]`` will *not* work (``<auto instance>, -3`` is used to"
" create the ``THREE`` enum member)"
msgstr ""
"``THREE = [auto(), -3]`` 将 *不可用* (``<auto instance>, -3`` 将被用来创建 ``THREE`` "
"枚举成员)"

#: ../../library/enum.rst:880
msgid ""
"In prior versions, ``auto()`` had to be the only thing on the assignment "
"line to work properly."
msgstr "在之前的版本中，``auto()`` 必须为赋值行中唯一的内容才是可用的。"

#: ../../library/enum.rst:883
msgid ""
"``_generate_next_value_`` can be overridden to customize the values used by "
"*auto*."
msgstr "``_generate_next_value_`` 可以被重写以便自定义 *auto* 所使用的值。"

#: ../../library/enum.rst:886
msgid ""
"in 3.13 the default ``_generate_next_value_`` will always return the highest"
" member value incremented by 1, and will fail if any member is an "
"incompatible type."
msgstr ""
"在 3.13 中默认的 ``_generate_next_value_`` 将总是返回最高成员值递增 1 "
"的结果，并且如果有任何成员为不兼容的类型则将失败。, and will fail if any member is an incompatible "
"type."

#: ../../library/enum.rst:892
msgid ""
"A decorator similar to the built-in *property*, but specifically for "
"enumerations.  It allows member attributes to have the same names as members"
" themselves."
msgstr "一个类似于内置 *property* 的装饰器，但是专用于枚举。 它允许成员属性具有与成员自身相同的名称。"

#: ../../library/enum.rst:896
msgid ""
"the *property* and the member must be defined in separate classes; for "
"example, the *value* and *name* attributes are defined in the *Enum* class, "
"and *Enum* subclasses can define members with the names ``value`` and "
"``name``."
msgstr ""
"*property* 和成员必须在单独的类中定义；例如 *value* 和 *name* 属性是在 *Enum* 类中定义，而 *Enum* "
"的子类可以定义名称为 ``value`` 和 ``name`` 的成员。"

#: ../../library/enum.rst:905
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  It searches an "
"enumeration's :attr:`~EnumType.__members__`, gathering any aliases it finds;"
" if any are found :exc:`ValueError` is raised with the details::"
msgstr ""
"一个专用于枚举的 :keyword:`class` 装饰器。 它将搜索一个枚举的 "
":attr:`~EnumType.__members__`，收集它所找到的任何别名；如果找到了任何别名则会引发 :exc:`ValueError` "
"并附带详情::"

#: ../../library/enum.rst:909
msgid ""
">>> from enum import Enum, unique\n"
">>> @unique\n"
"... class Mistake(Enum):\n"
"...     ONE = 1\n"
"...     TWO = 2\n"
"...     THREE = 3\n"
"...     FOUR = 3\n"
"...\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: duplicate values found in <enum 'Mistake'>: FOUR -> THREE"
msgstr ""
">>> from enum import Enum, unique\n"
">>> @unique\n"
"... class Mistake(Enum):\n"
"...     ONE = 1\n"
"...     TWO = 2\n"
"...     THREE = 3\n"
"...     FOUR = 3\n"
"...\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: duplicate values found in <enum 'Mistake'>: FOUR -> THREE"

#: ../../library/enum.rst:923
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  Members from "
":class:`EnumCheck` are used to specify which constraints should be checked "
"on the decorated enumeration."
msgstr ""
"一个专用于枚举的 :keyword:`class` 装饰器。 将使用来自 :class:`EnumCheck` "
"的成员指明应当在被装饰的枚举上检查哪些约束。"

#: ../../library/enum.rst:931
msgid "A decorator for use in enums: its target will become a member."
msgstr "一个在枚举中使用的装饰器：它的目标将成为一个成员。"

#: ../../library/enum.rst:937
msgid "A decorator for use in enums: its target will not become a member."
msgstr "一个在枚举中使用的装饰器：它的目标将不会成员一个成员。"

#: ../../library/enum.rst:943
msgid ""
"A decorator to change the :class:`str() <str>` and :func:`repr` of an enum "
"to show its members as belonging to the module instead of its class. Should "
"only be used when the enum members are exported to the module global "
"namespace (see :class:`re.RegexFlag` for an example)."
msgstr ""
"一个修改枚举的 :class:`str() <str>` 和 :func:`repr` 来将其成员显示为属于模块而不是类的装饰器。 "
"应当仅在枚举成员被导出到模块全局命名空间时（请参看 :class:`re.RegexFlag` 获取示例）使用。"

#: ../../library/enum.rst:953
msgid ""
"Return a list of all power-of-two integers contained in a flag *value*."
msgstr "返回旗标 *value* 中包含的所有二的整数次幂的列表。"

#: ../../library/enum.rst:960
msgid "Notes"
msgstr "备注"

#: ../../library/enum.rst:962
msgid ":class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag`"
msgstr ":class:`IntEnum`, :class:`StrEnum` 和 :class:`IntFlag`"

#: ../../library/enum.rst:964
msgid ""
"These three enum types are designed to be drop-in replacements for existing "
"integer- and string-based values; as such, they have extra limitations:"
msgstr "这三个枚举类型被设计用来快速替代现有的基于整数和字符串的值；为此，它们都有额外的限制:"

#: ../../library/enum.rst:967
msgid "``__str__`` uses the value and not the name of the enum member"
msgstr "``__str__`` 使用枚举成员的值而不是名称"

#: ../../library/enum.rst:969
msgid ""
"``__format__``, because it uses ``__str__``, will also use the value of the "
"enum member instead of its name"
msgstr "``__format__``，因为它使用了 ``__str__``，也将使用枚举成员的值而不是其名称"

#: ../../library/enum.rst:972
msgid ""
"If you do not need/want those limitations, you can either create your own "
"base class by mixing in the ``int`` or ``str`` type yourself::"
msgstr "如果你不需要/希望有这些限制，你可以通过自行混入 ``int`` 或 ``str`` 类型来创建你自己的基类::"

#: ../../library/enum.rst:975
msgid ""
">>> from enum import Enum\n"
">>> class MyIntEnum(int, Enum):\n"
"...     pass"
msgstr ""
">>> from enum import Enum\n"
">>> class MyIntEnum(int, Enum):\n"
"...     pass"

#: ../../library/enum.rst:979
msgid "or you can reassign the appropriate :meth:`str`, etc., in your enum::"
msgstr "或者你也可以在你的枚举中重新赋值适当的 :meth:`str` 等::"

#: ../../library/enum.rst:981
msgid ""
">>> from enum import Enum, IntEnum\n"
">>> class MyIntEnum(IntEnum):\n"
"...     __str__ = Enum.__str__"
msgstr ""
">>> from enum import Enum, IntEnum\n"
">>> class MyIntEnum(IntEnum):\n"
"...     __str__ = Enum.__str__"
