# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/tkinter.rst:2
msgid ":mod:`tkinter` --- Python interface to Tcl/Tk"
msgstr ""

#: ../../library/tkinter.rst:9
msgid "**Source code:** :source:`Lib/tkinter/__init__.py`"
msgstr ""

#: ../../library/tkinter.rst:13
msgid ""
"The :mod:`tkinter` package (\"Tk interface\") is the standard Python "
"interface to the Tcl/Tk GUI toolkit.  Both Tk and :mod:`tkinter` are "
"available on most Unix platforms, including macOS, as well as on Windows "
"systems."
msgstr ""

#: ../../library/tkinter.rst:17
msgid ""
"Running ``python -m tkinter`` from the command line should open a window "
"demonstrating a simple Tk interface, letting you know that :mod:`tkinter` is"
" properly installed on your system, and also showing what version of Tcl/Tk "
"is installed, so you can read the Tcl/Tk documentation specific to that "
"version."
msgstr ""

#: ../../library/tkinter.rst:22
msgid ""
"Tkinter supports a range of Tcl/Tk versions, built either with or without "
"thread support. The official Python binary release bundles Tcl/Tk 8.6 "
"threaded. See the source code for the :mod:`_tkinter` module for more "
"information about supported versions."
msgstr ""

#: ../../library/tkinter.rst:27
msgid ""
"Tkinter is not a thin wrapper, but adds a fair amount of its own logic to "
"make the experience more pythonic. This documentation will concentrate on "
"these additions and changes, and refer to the official Tcl/Tk documentation "
"for details that are unchanged."
msgstr ""

#: ../../library/tkinter.rst:34
msgid ""
"Tcl/Tk 8.5 (2007) introduced a modern set of themed user interface "
"components along with a new API to use them. Both old and new APIs are still"
" available. Most documentation you will find online still uses the old API "
"and can be woefully outdated."
msgstr ""

#: ../../library/tkinter.rst:43
msgid "`TkDocs <https://tkdocs.com/>`_"
msgstr ""

#: ../../library/tkinter.rst:42
msgid ""
"Extensive tutorial on creating user interfaces with Tkinter.  Explains key "
"concepts, and illustrates recommended approaches using the modern API."
msgstr ""

#: ../../library/tkinter.rst:46
msgid ""
"`Tkinter 8.5 reference: a GUI for Python <https://www.tkdocs.com/shipman/>`_"
msgstr ""

#: ../../library/tkinter.rst:46
msgid ""
"Reference documentation for Tkinter 8.5 detailing available classes, "
"methods, and options."
msgstr ""

#: ../../library/tkinter.rst:48
msgid "Tcl/Tk Resources:"
msgstr ""

#: ../../library/tkinter.rst:51
msgid "`Tk commands <https://www.tcl.tk/man/tcl8.6/TkCmd/contents.htm>`_"
msgstr ""

#: ../../library/tkinter.rst:51
msgid ""
"Comprehensive reference to each of the underlying Tcl/Tk commands used by "
"Tkinter."
msgstr ""

#: ../../library/tkinter.rst:54
msgid "`Tcl/Tk Home Page <https://www.tcl.tk>`_"
msgstr ""

#: ../../library/tkinter.rst:54
msgid "Additional documentation, and links to Tcl/Tk core development."
msgstr ""

#: ../../library/tkinter.rst:56
msgid "Books:"
msgstr ""

#: ../../library/tkinter.rst:59
msgid ""
"`Modern Tkinter for Busy Python Developers <https://tkdocs.com/book.html>`_"
msgstr ""

#: ../../library/tkinter.rst:59
msgid "By Mark Roseman. (ISBN 978-1999149567)"
msgstr ""

#: ../../library/tkinter.rst:62
msgid ""
"`Python GUI programming with Tkinter "
"<https://www.packtpub.com/product/python-gui-programming-with-"
"tkinter/9781788835886>`_"
msgstr ""

#: ../../library/tkinter.rst:62
msgid "By Alan D. Moore. (ISBN 978-1788835886)"
msgstr ""

#: ../../library/tkinter.rst:65
msgid "`Programming Python <https://learning-python.com/about-pp4e.html>`_"
msgstr ""

#: ../../library/tkinter.rst:65
msgid "By Mark Lutz; has excellent coverage of Tkinter. (ISBN 978-0596158101)"
msgstr ""

#: ../../library/tkinter.rst:67
msgid ""
"`Tcl and the Tk Toolkit (2nd edition)  "
"<https://www.amazon.com/exec/obidos/ASIN/032133633X>`_"
msgstr ""

#: ../../library/tkinter.rst:68
msgid ""
"By John Ousterhout, inventor of Tcl/Tk, and Ken Jones; does not cover "
"Tkinter. (ISBN 978-0321336330)"
msgstr ""

#: ../../library/tkinter.rst:72
msgid "Architecture"
msgstr ""

#: ../../library/tkinter.rst:74
msgid ""
"Tcl/Tk is not a single library but rather consists of a few distinct "
"modules, each with separate functionality and its own official "
"documentation. Python's binary releases also ship an add-on module together "
"with it."
msgstr ""

#: ../../library/tkinter.rst:90
msgid "Tcl"
msgstr ""

#: ../../library/tkinter.rst:80
msgid ""
"Tcl is a dynamic interpreted programming language, just like Python. Though "
"it can be used on its own as a general-purpose programming language, it is "
"most commonly embedded into C applications as a scripting engine or an "
"interface to the Tk toolkit. The Tcl library has a C interface to create and"
" manage one or more instances of a Tcl interpreter, run Tcl commands and "
"scripts in those instances, and add custom commands implemented in either "
"Tcl or C. Each interpreter has an event queue, and there are facilities to "
"send events to it and process them. Unlike Python, Tcl's execution model is "
"designed around cooperative multitasking, and Tkinter bridges this "
"difference (see `Threading model`_ for details)."
msgstr ""

#: ../../library/tkinter.rst:97 ../../library/tkinter.rst:911
msgid "Tk"
msgstr ""

#: ../../library/tkinter.rst:93
msgid ""
"Tk is a `Tcl package <https://wiki.tcl-lang.org/37432>`_ implemented in C "
"that adds custom commands to create and manipulate GUI widgets. Each "
":class:`Tk` object embeds its own Tcl interpreter instance with Tk loaded "
"into it. Tk's widgets are very customizable, though at the cost of a dated "
"appearance. Tk uses Tcl's event queue to generate and process GUI events."
msgstr ""

#: ../../library/tkinter.rst:103
msgid "Ttk"
msgstr ""

#: ../../library/tkinter.rst:100
msgid ""
"Themed Tk (Ttk) is a newer family of Tk widgets that provide a much better "
"appearance on different platforms than many of the classic Tk widgets. Ttk "
"is distributed as part of Tk, starting with Tk version 8.5. Python bindings "
"are provided in a separate module, :mod:`tkinter.ttk`."
msgstr ""

#: ../../library/tkinter.rst:105
msgid ""
"Internally, Tk and Ttk use facilities of the underlying operating system, "
"i.e., Xlib on Unix/X11, Cocoa on macOS, GDI on Windows."
msgstr ""

#: ../../library/tkinter.rst:108
msgid ""
"When your Python application uses a class in Tkinter, e.g., to create a "
"widget, the :mod:`tkinter` module first assembles a Tcl/Tk command string. "
"It passes that Tcl command string to an internal :mod:`_tkinter` binary "
"module, which then calls the Tcl interpreter to evaluate it. The Tcl "
"interpreter will then call into the Tk and/or Ttk packages, which will in "
"turn make calls to Xlib, Cocoa, or GDI."
msgstr ""

#: ../../library/tkinter.rst:116
msgid "Tkinter Modules"
msgstr ""

#: ../../library/tkinter.rst:118
msgid ""
"Support for Tkinter is spread across several modules. Most applications will"
" need the main :mod:`tkinter` module, as well as the :mod:`tkinter.ttk` "
"module, which provides the modern themed widget set and API::"
msgstr ""

#: ../../library/tkinter.rst:129
msgid ""
"Construct a toplevel Tk widget, which is usually the main window of an "
"application, and initialize a Tcl interpreter for this widget.  Each "
"instance has its own associated Tcl interpreter."
msgstr ""

#: ../../library/tkinter.rst:133
msgid ""
"The :class:`Tk` class is typically instantiated using all default values. "
"However, the following keyword arguments are currently recognized:"
msgstr ""

#: ../../library/tkinter.rst:137
msgid "*screenName*"
msgstr ""

#: ../../library/tkinter.rst:137
msgid ""
"When given (as a string), sets the :envvar:`DISPLAY` environment variable. "
"(X11 only)"
msgstr ""

#: ../../library/tkinter.rst:140
msgid "*baseName*"
msgstr ""

#: ../../library/tkinter.rst:140
msgid ""
"Name of the profile file.  By default, *baseName* is derived from the "
"program name (``sys.argv[0]``)."
msgstr ""

#: ../../library/tkinter.rst:143
msgid "*className*"
msgstr ""

#: ../../library/tkinter.rst:143
msgid ""
"Name of the widget class.  Used as a profile file and also as the name with "
"which Tcl is invoked (*argv0* in *interp*)."
msgstr ""

#: ../../library/tkinter.rst:146
msgid "*useTk*"
msgstr ""

#: ../../library/tkinter.rst:146
msgid ""
"If ``True``, initialize the Tk subsystem.  The :func:`tkinter.Tcl() <Tcl>` "
"function sets this to ``False``."
msgstr ""

#: ../../library/tkinter.rst:149
msgid "*sync*"
msgstr ""

#: ../../library/tkinter.rst:149
msgid ""
"If ``True``, execute all X server commands synchronously, so that errors are"
" reported immediately.  Can be used for debugging. (X11 only)"
msgstr ""

#: ../../library/tkinter.rst:159
msgid "*use*"
msgstr ""

#: ../../library/tkinter.rst:152
msgid ""
"Specifies the *id* of the window in which to embed the application, instead "
"of it being created as an independent toplevel window. *id* must be "
"specified in the same way as the value for the -use option for toplevel "
"widgets (that is, it has a form like that returned by :meth:`winfo_id`)."
msgstr ""

#: ../../library/tkinter.rst:158
msgid ""
"Note that on some platforms this will only work correctly if *id* refers to "
"a Tk frame or toplevel that has its -container option enabled."
msgstr ""

#: ../../library/tkinter.rst:161
msgid ""
":class:`Tk` reads and interprets profile files, named "
":file:`.{className}.tcl` and :file:`.{baseName}.tcl`, into the Tcl "
"interpreter and calls :func:`exec` on the contents of "
":file:`.{className}.py` and :file:`.{baseName}.py`.  The path for the "
"profile files is the :envvar:`HOME` environment variable or, if that isn't "
"defined, then :data:`os.curdir`."
msgstr ""

#: ../../library/tkinter.rst:170
msgid ""
"The Tk application object created by instantiating :class:`Tk`.  This "
"provides access to the Tcl interpreter.  Each widget that is attached the "
"same instance of :class:`Tk` has the same value for its :attr:`tk` "
"attribute."
msgstr ""

#: ../../library/tkinter.rst:177
msgid ""
"The widget object that contains this widget.  For :class:`Tk`, the *master* "
"is :const:`None` because it is the main window.  The terms *master* and "
"*parent* are similar and sometimes used interchangeably as argument names; "
"however, calling :meth:`winfo_parent` returns a string of the widget name "
"whereas :attr:`master` returns the object. *parent*/*child* reflects the "
"tree-like relationship while *master*/*slave* reflects the container "
"structure."
msgstr ""

#: ../../library/tkinter.rst:187
msgid ""
"The immediate descendants of this widget as a :class:`dict` with the child "
"widget names as the keys and the child instance objects as the values."
msgstr ""

#: ../../library/tkinter.rst:194
msgid ""
"The :func:`Tcl` function is a factory function which creates an object much "
"like that created by the :class:`Tk` class, except that it does not "
"initialize the Tk subsystem.  This is most often useful when driving the Tcl"
" interpreter in an environment where one doesn't want to create extraneous "
"toplevel windows, or where one cannot (such as Unix/Linux systems without an"
" X server).  An object created by the :func:`Tcl` object can have a Toplevel"
" window created (and the Tk subsystem initialized) by calling its "
":meth:`loadtk` method."
msgstr ""

#: ../../library/tkinter.rst:203
msgid "The modules that provide Tk support include:"
msgstr ""

#: ../../library/tkinter.rst:206
msgid ":mod:`tkinter`"
msgstr ""

#: ../../library/tkinter.rst:206
msgid "Main Tkinter module."
msgstr ""

#: ../../library/tkinter.rst:209
msgid ":mod:`tkinter.colorchooser`"
msgstr ""

#: ../../library/tkinter.rst:209
msgid "Dialog to let the user choose a color."
msgstr ""

#: ../../library/tkinter.rst:212
msgid ":mod:`tkinter.commondialog`"
msgstr ""

#: ../../library/tkinter.rst:212
msgid "Base class for the dialogs defined in the other modules listed here."
msgstr ""

#: ../../library/tkinter.rst:215
msgid ":mod:`tkinter.filedialog`"
msgstr ""

#: ../../library/tkinter.rst:215
msgid "Common dialogs to allow the user to specify a file to open or save."
msgstr ""

#: ../../library/tkinter.rst:218
msgid ":mod:`tkinter.font`"
msgstr ""

#: ../../library/tkinter.rst:218
msgid "Utilities to help work with fonts."
msgstr ""

#: ../../library/tkinter.rst:221
msgid ":mod:`tkinter.messagebox`"
msgstr ""

#: ../../library/tkinter.rst:221
msgid "Access to standard Tk dialog boxes."
msgstr ""

#: ../../library/tkinter.rst:224
msgid ":mod:`tkinter.scrolledtext`"
msgstr ""

#: ../../library/tkinter.rst:224
msgid "Text widget with a vertical scroll bar built in."
msgstr ""

#: ../../library/tkinter.rst:227
msgid ":mod:`tkinter.simpledialog`"
msgstr ""

#: ../../library/tkinter.rst:227
msgid "Basic dialogs and convenience functions."
msgstr ""

#: ../../library/tkinter.rst:231
msgid ":mod:`tkinter.ttk`"
msgstr ""

#: ../../library/tkinter.rst:230
msgid ""
"Themed widget set introduced in Tk 8.5, providing modern alternatives for "
"many of the classic widgets in the main :mod:`tkinter` module."
msgstr ""

#: ../../library/tkinter.rst:233
msgid "Additional modules:"
msgstr ""

#: ../../library/tkinter.rst:243
msgid ":mod:`_tkinter`"
msgstr ""

#: ../../library/tkinter.rst:239
msgid ""
"A binary module that contains the low-level interface to Tcl/Tk. It is "
"automatically imported by the main :mod:`tkinter` module, and should never "
"be used directly by application programmers. It is usually a shared library "
"(or DLL), but might in some cases be statically linked with the Python "
"interpreter."
msgstr ""

#: ../../library/tkinter.rst:247
msgid ":mod:`idlelib`"
msgstr ""

#: ../../library/tkinter.rst:246
msgid ""
"Python's Integrated Development and Learning Environment (IDLE). Based on "
":mod:`tkinter`."
msgstr ""

#: ../../library/tkinter.rst:252
msgid ":mod:`tkinter.constants`"
msgstr ""

#: ../../library/tkinter.rst:250
msgid ""
"Symbolic constants that can be used in place of strings when passing various"
" parameters to Tkinter calls. Automatically imported by the main "
":mod:`tkinter` module."
msgstr ""

#: ../../library/tkinter.rst:256
msgid ":mod:`tkinter.dnd`"
msgstr ""

#: ../../library/tkinter.rst:255
msgid ""
"(experimental) Drag-and-drop support for :mod:`tkinter`. This will become "
"deprecated when it is replaced with the Tk DND."
msgstr ""

#: ../../library/tkinter.rst:260
msgid ":mod:`tkinter.tix`"
msgstr ""

#: ../../library/tkinter.rst:259
msgid ""
"(deprecated) An older third-party Tcl/Tk package that adds several new "
"widgets. Better alternatives for most can be found in :mod:`tkinter.ttk`."
msgstr ""

#: ../../library/tkinter.rst:264
msgid ":mod:`turtle`"
msgstr ""

#: ../../library/tkinter.rst:263
msgid "Turtle graphics in a Tk window."
msgstr ""

#: ../../library/tkinter.rst:267
msgid "Tkinter Life Preserver"
msgstr ""

#: ../../library/tkinter.rst:269
msgid ""
"This section is not designed to be an exhaustive tutorial on either Tk or "
"Tkinter.  For that, refer to one of the external resources noted earlier. "
"Instead, this section provides a very quick orientation to what a Tkinter "
"application looks like, identifies foundational Tk concepts, and explains "
"how the Tkinter wrapper is structured."
msgstr ""

#: ../../library/tkinter.rst:275
msgid ""
"The remainder of this section will help you to identify the classes, "
"methods, and options you'll need in your Tkinter application, and where to "
"find more detailed documentation on them, including in the official Tcl/Tk "
"reference manual."
msgstr ""

#: ../../library/tkinter.rst:282
msgid "A Hello World Program"
msgstr ""

#: ../../library/tkinter.rst:284
msgid ""
"We'll start by walking through a \"Hello World\" application in Tkinter. "
"This isn't the smallest one we could write, but has enough to illustrate "
"some key concepts you'll need to know."
msgstr ""

#: ../../library/tkinter.rst:300
msgid ""
"After the imports, the next line creates an instance of the :class:`Tk` "
"class, which initializes Tk and creates its associated Tcl interpreter. It "
"also creates a toplevel window, known as the root window, which serves as "
"the main window of the application."
msgstr ""

#: ../../library/tkinter.rst:305
msgid ""
"The following line creates a frame widget, which in this case will contain a"
" label and a button we'll create next. The frame is fit inside the root "
"window."
msgstr ""

#: ../../library/tkinter.rst:309
msgid ""
"The next line creates a label widget holding a static text string. The "
":meth:`grid` method is used to specify the relative layout (position) of the"
" label within its containing frame widget, similar to how tables in HTML "
"work."
msgstr ""

#: ../../library/tkinter.rst:313
msgid ""
"A button widget is then created, and placed to the right of the label. When "
"pressed, it will call the :meth:`destroy` method of the root window."
msgstr ""

#: ../../library/tkinter.rst:316
msgid ""
"Finally, the :meth:`mainloop` method puts everything on the display, and "
"responds to user input until the program terminates."
msgstr ""

#: ../../library/tkinter.rst:322
msgid "Important Tk Concepts"
msgstr ""

#: ../../library/tkinter.rst:324
msgid "Even this simple program illustrates the following key Tk concepts:"
msgstr ""

#: ../../library/tkinter.rst:329
msgid "widgets"
msgstr ""

#: ../../library/tkinter.rst:327
msgid ""
"A Tkinter user interface is made up of individual *widgets*. Each widget is "
"represented as a Python object, instantiated from classes like "
":class:`ttk.Frame`, :class:`ttk.Label`, and :class:`ttk.Button`."
msgstr ""

#: ../../library/tkinter.rst:335
msgid "widget hierarchy"
msgstr ""

#: ../../library/tkinter.rst:332
msgid ""
"Widgets are arranged in a *hierarchy*. The label and button were contained "
"within a frame, which in turn was contained within the root window. When "
"creating each *child* widget, its *parent* widget is passed as the first "
"argument to the widget constructor."
msgstr ""

#: ../../library/tkinter.rst:340
msgid "configuration options"
msgstr ""

#: ../../library/tkinter.rst:338
msgid ""
"Widgets have *configuration options*, which modify their appearance and "
"behavior, such as the text to display in a label or button. Different "
"classes of widgets will have different sets of options."
msgstr ""

#: ../../library/tkinter.rst:345
msgid "geometry management"
msgstr ""

#: ../../library/tkinter.rst:343
msgid ""
"Widgets aren't automatically added to the user interface when they are "
"created. A *geometry manager* like ``grid`` controls where in the user "
"interface they are placed."
msgstr ""

#: ../../library/tkinter.rst:351
msgid "event loop"
msgstr ""

#: ../../library/tkinter.rst:348
msgid ""
"Tkinter reacts to user input, changes from your program, and even refreshes "
"the display only when actively running an *event loop*. If your program "
"isn't running the event loop, your user interface won't update."
msgstr ""

#: ../../library/tkinter.rst:354
msgid "Understanding How Tkinter Wraps Tcl/Tk"
msgstr ""

#: ../../library/tkinter.rst:356
msgid ""
"When your application uses Tkinter's classes and methods, internally Tkinter"
" is assembling strings representing Tcl/Tk commands, and executing those "
"commands in the Tcl interpreter attached to your application's :class:`Tk` "
"instance."
msgstr ""

#: ../../library/tkinter.rst:361
msgid ""
"Whether it's trying to navigate reference documentation, trying to find the "
"right method or option, adapting some existing code, or debugging your "
"Tkinter application, there are times that it will be useful to understand "
"what those underlying Tcl/Tk commands look like."
msgstr ""

#: ../../library/tkinter.rst:366
msgid ""
"To illustrate, here is the Tcl/Tk equivalent of the main part of the Tkinter"
" script above."
msgstr ""

#: ../../library/tkinter.rst:377
msgid ""
"Tcl's syntax is similar to many shell languages, where the first word is the"
" command to be executed, with arguments to that command following it, "
"separated by spaces. Without getting into too many details, notice the "
"following:"
msgstr ""

#: ../../library/tkinter.rst:381
msgid ""
"The commands used to create widgets (like ``ttk::frame``) correspond to "
"widget classes in Tkinter."
msgstr ""

#: ../../library/tkinter.rst:384
msgid ""
"Tcl widget options (like ``-text``) correspond to keyword arguments in "
"Tkinter."
msgstr ""

#: ../../library/tkinter.rst:387
msgid ""
"Widgets are referred to by a *pathname* in Tcl (like ``.frm.btn``), whereas "
"Tkinter doesn't use names but object references."
msgstr ""

#: ../../library/tkinter.rst:390
msgid ""
"A widget's place in the widget hierarchy is encoded in its (hierarchical) "
"pathname, which uses a ``.`` (dot) as a path separator. The pathname for the"
" root window is just ``.`` (dot). In Tkinter, the hierarchy is defined not "
"by pathname but by specifying the parent widget when creating each child "
"widget."
msgstr ""

#: ../../library/tkinter.rst:396
msgid ""
"Operations which are implemented as separate *commands* in Tcl (like "
"``grid`` or ``destroy``) are represented as *methods* on Tkinter widget "
"objects. As you'll see shortly, at other times Tcl uses what appear to be "
"method calls on widget objects, which more closely mirror what would is used"
" in Tkinter."
msgstr ""

#: ../../library/tkinter.rst:404
msgid "How do I...? What option does...?"
msgstr ""

#: ../../library/tkinter.rst:406
msgid ""
"If you're not sure how to do something in Tkinter, and you can't immediately"
" find it in the tutorial or reference documentation you're using, there are "
"a few strategies that can be helpful."
msgstr ""

#: ../../library/tkinter.rst:410
msgid ""
"First, remember that the details of how individual widgets work may vary "
"across different versions of both Tkinter and Tcl/Tk. If you're searching "
"documentation, make sure it corresponds to the Python and Tcl/Tk versions "
"installed on your system."
msgstr ""

#: ../../library/tkinter.rst:415
msgid ""
"When searching for how to use an API, it helps to know the exact name of the"
" class, option, or method that you're using. Introspection, either in an "
"interactive Python shell or with :func:`print`, can help you identify what "
"you need."
msgstr ""

#: ../../library/tkinter.rst:420
msgid ""
"To find out what configuration options are available on any widget, call its"
" :meth:`configure` method, which returns a dictionary containing a variety "
"of information about each object, including its default and current values. "
"Use :meth:`keys` to get just the names of each option."
msgstr ""

#: ../../library/tkinter.rst:430
msgid ""
"As most widgets have many configuration options in common, it can be useful "
"to find out which are specific to a particular widget class. Comparing the "
"list of options to that of a simpler widget, like a frame, is one way to do "
"that."
msgstr ""

#: ../../library/tkinter.rst:439
msgid ""
"Similarly, you can find the available methods for a widget object using the "
"standard :func:`dir` function. If you try it, you'll see there are over 200 "
"common widget methods, so again identifying those specific to a widget class"
" is helpful."
msgstr ""

#: ../../library/tkinter.rst:451
msgid "Navigating the Tcl/Tk Reference Manual"
msgstr ""

#: ../../library/tkinter.rst:453
msgid ""
"As noted, the official `Tk commands "
"<https://www.tcl.tk/man/tcl8.6/TkCmd/contents.htm>`_ reference manual (man "
"pages) is often the most accurate description of what specific operations on"
" widgets do. Even when you know the name of the option or method that you "
"need, you may still have a few places to look."
msgstr ""

#: ../../library/tkinter.rst:458
msgid ""
"While all operations in Tkinter are implemented as method calls on widget "
"objects, you've seen that many Tcl/Tk operations appear as commands that "
"take a widget pathname as its first parameter, followed by optional "
"parameters, e.g."
msgstr ""

#: ../../library/tkinter.rst:468
msgid ""
"Others, however, look more like methods called on a widget object (in fact, "
"when you create a widget in Tcl/Tk, it creates a Tcl command with the name "
"of the widget pathname, with the first parameter to that command being the "
"name of a method to call)."
msgstr ""

#: ../../library/tkinter.rst:479
msgid ""
"In the official Tcl/Tk reference documentation, you'll find most operations "
"that look like method calls on the man page for a specific widget (e.g., "
"you'll find the :meth:`invoke` method on the `ttk::button "
"<https://www.tcl.tk/man/tcl8.6/TkCmd/ttk_button.htm>`_ man page), while "
"functions that take a widget as a parameter often have their own man page "
"(e.g., `grid <https://www.tcl.tk/man/tcl8.6/TkCmd/grid.htm>`_)."
msgstr ""

#: ../../library/tkinter.rst:487
msgid ""
"You'll find many common options and methods in the `options "
"<https://www.tcl.tk/man/tcl8.6/TkCmd/options.htm>`_ or `ttk::widget "
"<https://www.tcl.tk/man/tcl8.6/TkCmd/ttk_widget.htm>`_ man pages, while "
"others are found in the man page for a specific widget class."
msgstr ""

#: ../../library/tkinter.rst:492
msgid ""
"You'll also find that many Tkinter methods have compound names, e.g., "
":func:`winfo_x`, :func:`winfo_height`, :func:`winfo_viewable`. You'd find "
"documentation for all of these in the `winfo "
"<https://www.tcl.tk/man/tcl8.6/TkCmd/winfo.htm>`_ man page."
msgstr ""

#: ../../library/tkinter.rst:498
msgid ""
"Somewhat confusingly, there are also methods on all Tkinter widgets that "
"don't actually operate on the widget, but operate at a global scope, "
"independent of any widget. Examples are methods for accessing the clipboard "
"or the system bell. (They happen to be implemented as methods in the base "
":class:`Widget` class that all Tkinter widgets inherit from)."
msgstr ""

#: ../../library/tkinter.rst:507
msgid "Threading model"
msgstr ""

#: ../../library/tkinter.rst:509
msgid ""
"Python and Tcl/Tk have very different threading models, which :mod:`tkinter`"
" tries to bridge. If you use threads, you may need to be aware of this."
msgstr ""

#: ../../library/tkinter.rst:512
msgid ""
"A Python interpreter may have many threads associated with it. In Tcl, "
"multiple threads can be created, but each thread has a separate Tcl "
"interpreter instance associated with it. Threads can also create more than "
"one interpreter instance, though each interpreter instance can be used only "
"by the one thread that created it."
msgstr ""

#: ../../library/tkinter.rst:517
msgid ""
"Each :class:`Tk` object created by :mod:`tkinter` contains a Tcl "
"interpreter. It also keeps track of which thread created that interpreter. "
"Calls to :mod:`tkinter` can be made from any Python thread. Internally, if a"
" call comes from a thread other than the one that created the :class:`Tk` "
"object, an event is posted to the interpreter's event queue, and when "
"executed, the result is returned to the calling Python thread."
msgstr ""

#: ../../library/tkinter.rst:524
msgid ""
"Tcl/Tk applications are normally event-driven, meaning that after "
"initialization, the interpreter runs an event loop (i.e. "
":func:`Tk.mainloop`) and responds to events. Because it is single-threaded, "
"event handlers must respond quickly, otherwise they will block other events "
"from being processed. To avoid this, any long-running computations should "
"not run in an event handler, but are either broken into smaller pieces using"
" timers, or run in another thread. This is different from many GUI toolkits "
"where the GUI runs in a completely separate thread from all application code"
" including event handlers."
msgstr ""

#: ../../library/tkinter.rst:533
msgid ""
"If the Tcl interpreter is not running the event loop and processing events, "
"any :mod:`tkinter` calls made from threads other than the one running the "
"Tcl interpreter will fail."
msgstr ""

#: ../../library/tkinter.rst:537
msgid "A number of special cases exist:"
msgstr ""

#: ../../library/tkinter.rst:539
msgid ""
"Tcl/Tk libraries can be built so they are not thread-aware. In this case, "
":mod:`tkinter` calls the library from the originating Python thread, even if"
" this is different than the thread that created the Tcl interpreter. A "
"global lock ensures only one call occurs at a time."
msgstr ""

#: ../../library/tkinter.rst:544
msgid ""
"While :mod:`tkinter` allows you to create more than one instance of a "
":class:`Tk` object (with its own interpreter), all interpreters that are "
"part of the same thread share a common event queue, which gets ugly fast. In"
" practice, don't create more than one instance of :class:`Tk` at a time. "
"Otherwise, it's best to create them in separate threads and ensure you're "
"running a thread-aware Tcl/Tk build."
msgstr ""

#: ../../library/tkinter.rst:550
msgid ""
"Blocking event handlers are not the only way to prevent the Tcl interpreter "
"from reentering the event loop. It is even possible to run multiple nested "
"event loops or abandon the event loop entirely. If you're doing anything "
"tricky when it comes to events or threads, be aware of these possibilities."
msgstr ""

#: ../../library/tkinter.rst:555
msgid ""
"There are a few select :mod:`tkinter` functions that presently work only "
"when called from the thread that created the Tcl interpreter."
msgstr ""

#: ../../library/tkinter.rst:560
msgid "Handy Reference"
msgstr ""

#: ../../library/tkinter.rst:566
msgid "Setting Options"
msgstr ""

#: ../../library/tkinter.rst:568
msgid ""
"Options control things like the color and border width of a widget. Options "
"can be set in three ways:"
msgstr ""

#: ../../library/tkinter.rst:574
msgid "At object creation time, using keyword arguments"
msgstr ""

#: ../../library/tkinter.rst:580
msgid ""
"After object creation, treating the option name like a dictionary index"
msgstr ""

#: ../../library/tkinter.rst:585
msgid ""
"Use the config() method to update multiple attrs subsequent to object "
"creation"
msgstr ""

#: ../../library/tkinter.rst:587
msgid ""
"For a complete explanation of a given option and its behavior, see the Tk "
"man pages for the widget in question."
msgstr ""

#: ../../library/tkinter.rst:590
msgid ""
"Note that the man pages list \"STANDARD OPTIONS\" and \"WIDGET SPECIFIC "
"OPTIONS\" for each widget.  The former is a list of options that are common "
"to many widgets, the latter are the options that are idiosyncratic to that "
"particular widget.  The Standard Options are documented on the "
":manpage:`options(3)` man page."
msgstr ""

#: ../../library/tkinter.rst:596
msgid ""
"No distinction between standard and widget-specific options is made in this "
"document.  Some options don't apply to some kinds of widgets. Whether a "
"given widget responds to a particular option depends on the class of the "
"widget; buttons have a ``command`` option, labels do not."
msgstr ""

#: ../../library/tkinter.rst:601
msgid ""
"The options supported by a given widget are listed in that widget's man "
"page, or can be queried at runtime by calling the :meth:`config` method "
"without arguments, or by calling the :meth:`keys` method on that widget.  "
"The return value of these calls is a dictionary whose key is the name of the"
" option as a string (for example, ``'relief'``) and whose values are "
"5-tuples."
msgstr ""

#: ../../library/tkinter.rst:607
msgid ""
"Some options, like ``bg`` are synonyms for common options with long names "
"(``bg`` is shorthand for \"background\"). Passing the ``config()`` method "
"the name of a shorthand option will return a 2-tuple, not 5-tuple. The "
"2-tuple passed back will contain the name of the synonym and the \"real\" "
"option (such as ``('bg', 'background')``)."
msgstr ""

#: ../../library/tkinter.rst:614
msgid "Index"
msgstr ""

#: ../../library/tkinter.rst:614
msgid "Meaning"
msgstr ""

#: ../../library/tkinter.rst:614
msgid "Example"
msgstr ""

#: ../../library/tkinter.rst:616
msgid "0"
msgstr ""

#: ../../library/tkinter.rst:616
msgid "option name"
msgstr ""

#: ../../library/tkinter.rst:616 ../../library/tkinter.rst:618
msgid "``'relief'``"
msgstr ""

#: ../../library/tkinter.rst:618
msgid "1"
msgstr ""

#: ../../library/tkinter.rst:618
msgid "option name for database lookup"
msgstr ""

#: ../../library/tkinter.rst:620
msgid "2"
msgstr ""

#: ../../library/tkinter.rst:620
msgid "option class for database lookup"
msgstr ""

#: ../../library/tkinter.rst:620
msgid "``'Relief'``"
msgstr ""

#: ../../library/tkinter.rst:623
msgid "3"
msgstr ""

#: ../../library/tkinter.rst:623
msgid "default value"
msgstr ""

#: ../../library/tkinter.rst:623
msgid "``'raised'``"
msgstr ""

#: ../../library/tkinter.rst:625
msgid "4"
msgstr ""

#: ../../library/tkinter.rst:625
msgid "current value"
msgstr ""

#: ../../library/tkinter.rst:625
msgid "``'groove'``"
msgstr ""

#: ../../library/tkinter.rst:628
msgid "Example::"
msgstr ""

#: ../../library/tkinter.rst:633
msgid ""
"Of course, the dictionary printed will include all the options available and"
" their values.  This is meant only as an example."
msgstr ""

#: ../../library/tkinter.rst:638
msgid "The Packer"
msgstr ""

#: ../../library/tkinter.rst:642
msgid ""
"The packer is one of Tk's geometry-management mechanisms.    Geometry "
"managers are used to specify the relative positioning of widgets within "
"their container - their mutual *master*.  In contrast to the more cumbersome"
" *placer* (which is used less commonly, and we do not cover here), the "
"packer takes qualitative relationship specification - *above*, *to the left "
"of*, *filling*, etc - and works everything out to determine the exact "
"placement coordinates for you."
msgstr ""

#: ../../library/tkinter.rst:649
msgid ""
"The size of any *master* widget is determined by the size of the \"slave "
"widgets\" inside.  The packer is used to control where slave widgets appear "
"inside the master into which they are packed.  You can pack widgets into "
"frames, and frames into other frames, in order to achieve the kind of layout"
" you desire. Additionally, the arrangement is dynamically adjusted to "
"accommodate incremental changes to the configuration, once it is packed."
msgstr ""

#: ../../library/tkinter.rst:656
msgid ""
"Note that widgets do not appear until they have had their geometry specified"
" with a geometry manager.  It's a common early mistake to leave out the "
"geometry specification, and then be surprised when the widget is created but"
" nothing appears.  A widget will appear only after it has had, for example, "
"the packer's :meth:`pack` method applied to it."
msgstr ""

#: ../../library/tkinter.rst:662
msgid ""
"The pack() method can be called with keyword-option/value pairs that control"
" where the widget is to appear within its container, and how it is to behave"
" when the main application window is resized.  Here are some examples::"
msgstr ""

#: ../../library/tkinter.rst:672
msgid "Packer Options"
msgstr ""

#: ../../library/tkinter.rst:674
msgid ""
"For more extensive information on the packer and the options that it can "
"take, see the man pages and page 183 of John Ousterhout's book."
msgstr ""

#: ../../library/tkinter.rst:678 ../../library/tkinter.rst:798
msgid "anchor"
msgstr ""

#: ../../library/tkinter.rst:678
msgid ""
"Anchor type.  Denotes where the packer is to place each slave in its parcel."
msgstr ""

#: ../../library/tkinter.rst:681
msgid "expand"
msgstr ""

#: ../../library/tkinter.rst:681
msgid "Boolean, ``0`` or ``1``."
msgstr ""

#: ../../library/tkinter.rst:684
msgid "fill"
msgstr ""

#: ../../library/tkinter.rst:684
msgid "Legal values: ``'x'``, ``'y'``, ``'both'``, ``'none'``."
msgstr ""

#: ../../library/tkinter.rst:687
msgid "ipadx and ipady"
msgstr ""

#: ../../library/tkinter.rst:687
msgid ""
"A distance - designating internal padding on each side of the slave widget."
msgstr ""

#: ../../library/tkinter.rst:690
msgid "padx and pady"
msgstr ""

#: ../../library/tkinter.rst:690
msgid ""
"A distance - designating external padding on each side of the slave widget."
msgstr ""

#: ../../library/tkinter.rst:694
msgid "side"
msgstr ""

#: ../../library/tkinter.rst:693
msgid "Legal values are: ``'left'``, ``'right'``, ``'top'``, ``'bottom'``."
msgstr ""

#: ../../library/tkinter.rst:697
msgid "Coupling Widget Variables"
msgstr ""

#: ../../library/tkinter.rst:699
msgid ""
"The current-value setting of some widgets (like text entry widgets) can be "
"connected directly to application variables by using special options.  These"
" options are ``variable``, ``textvariable``, ``onvalue``, ``offvalue``, and "
"``value``.  This connection works both ways: if the variable changes for any"
" reason, the widget it's connected to will be updated to reflect the new "
"value."
msgstr ""

#: ../../library/tkinter.rst:705
msgid ""
"Unfortunately, in the current implementation of :mod:`tkinter` it is not "
"possible to hand over an arbitrary Python variable to a widget through a "
"``variable`` or ``textvariable`` option.  The only kinds of variables for "
"which this works are variables that are subclassed from a class called "
"Variable, defined in :mod:`tkinter`."
msgstr ""

#: ../../library/tkinter.rst:711
msgid ""
"There are many useful subclasses of Variable already defined: "
":class:`StringVar`, :class:`IntVar`, :class:`DoubleVar`, and "
":class:`BooleanVar`.  To read the current value of such a variable, call the"
" :meth:`get` method on it, and to change its value you call the :meth:`!set`"
" method.  If you follow this protocol, the widget will always track the "
"value of the variable, with no further intervention on your part."
msgstr ""

#: ../../library/tkinter.rst:718 ../../library/tkinter.rst:898
msgid "For example::"
msgstr ""

#: ../../library/tkinter.rst:751
msgid "The Window Manager"
msgstr ""

#: ../../library/tkinter.rst:755
msgid ""
"In Tk, there is a utility command, ``wm``, for interacting with the window "
"manager.  Options to the ``wm`` command allow you to control things like "
"titles, placement, icon bitmaps, and the like.  In :mod:`tkinter`, these "
"commands have been implemented as methods on the :class:`Wm` class.  "
"Toplevel widgets are subclassed from the :class:`Wm` class, and so can call "
"the :class:`Wm` methods directly."
msgstr ""

#: ../../library/tkinter.rst:762
msgid ""
"To get at the toplevel window that contains a given widget, you can often "
"just refer to the widget's master.  Of course if the widget has been packed "
"inside of a frame, the master won't represent a toplevel window.  To get at "
"the toplevel window that contains an arbitrary widget, you can call the "
":meth:`_root` method. This method begins with an underscore to denote the "
"fact that this function is part of the implementation, and not an interface "
"to Tk functionality."
msgstr ""

#: ../../library/tkinter.rst:769
msgid "Here are some examples of typical usage::"
msgstr ""

#: ../../library/tkinter.rst:792 ../../library/tkinter.rst:794
msgid "Tk Option Data Types"
msgstr ""

#: ../../library/tkinter.rst:797
msgid ""
"Legal values are points of the compass: ``\"n\"``, ``\"ne\"``, ``\"e\"``, "
"``\"se\"``, ``\"s\"``, ``\"sw\"``, ``\"w\"``, ``\"nw\"``, and also "
"``\"center\"``."
msgstr ""

#: ../../library/tkinter.rst:804
msgid "bitmap"
msgstr ""

#: ../../library/tkinter.rst:801
msgid ""
"There are eight built-in, named bitmaps: ``'error'``, ``'gray25'``, "
"``'gray50'``, ``'hourglass'``, ``'info'``, ``'questhead'``, ``'question'``, "
"``'warning'``.  To specify an X bitmap filename, give the full path to the "
"file, preceded with an ``@``, as in ``\"@/usr/contrib/bitmap/gumby.bit\"``."
msgstr ""

#: ../../library/tkinter.rst:807
msgid "boolean"
msgstr ""

#: ../../library/tkinter.rst:807
msgid "You can pass integers 0 or 1 or the strings ``\"yes\"`` or ``\"no\"``."
msgstr ""

#: ../../library/tkinter.rst:814
msgid "callback"
msgstr ""

#: ../../library/tkinter.rst:810
msgid "This is any Python function that takes no arguments.  For example::"
msgstr ""

#: ../../library/tkinter.rst:820
msgid "color"
msgstr ""

#: ../../library/tkinter.rst:817
msgid ""
"Colors can be given as the names of X colors in the rgb.txt file, or as "
"strings representing RGB values in 4 bit: ``\"#RGB\"``, 8 bit: "
"``\"#RRGGBB\"``, 12 bit: ``\"#RRRGGGBBB\"``, or 16 bit: "
"``\"#RRRRGGGGBBBB\"`` ranges, where R,G,B here represent any legal hex "
"digit.  See page 160 of Ousterhout's book for details."
msgstr ""

#: ../../library/tkinter.rst:826
msgid "cursor"
msgstr ""

#: ../../library/tkinter.rst:823
msgid ""
"The standard X cursor names from :file:`cursorfont.h` can be used, without "
"the ``XC_`` prefix.  For example to get a hand cursor (:const:`XC_hand2`), "
"use the string ``\"hand2\"``.  You can also specify a bitmap and mask file "
"of your own. See page 179 of Ousterhout's book."
msgstr ""

#: ../../library/tkinter.rst:833
msgid "distance"
msgstr ""

#: ../../library/tkinter.rst:829
msgid ""
"Screen distances can be specified in either pixels or absolute distances. "
"Pixels are given as numbers and absolute distances as strings, with the "
"trailing character denoting units: ``c`` for centimetres, ``i`` for inches, "
"``m`` for millimetres, ``p`` for printer's points.  For example, 3.5 inches "
"is expressed as ``\"3.5i\"``."
msgstr ""

#: ../../library/tkinter.rst:838
msgid "font"
msgstr ""

#: ../../library/tkinter.rst:836
msgid ""
"Tk uses a list font name format, such as ``{courier 10 bold}``. Font sizes "
"with positive numbers are measured in points; sizes with negative numbers "
"are measured in pixels."
msgstr ""

#: ../../library/tkinter.rst:843
msgid "geometry"
msgstr ""

#: ../../library/tkinter.rst:841
msgid ""
"This is a string of the form ``widthxheight``, where width and height are "
"measured in pixels for most widgets (in characters for widgets displaying "
"text). For example: ``fred[\"geometry\"] = \"200x100\"``."
msgstr ""

#: ../../library/tkinter.rst:847
msgid "justify"
msgstr ""

#: ../../library/tkinter.rst:846
msgid ""
"Legal values are the strings: ``\"left\"``, ``\"center\"``, ``\"right\"``, "
"and ``\"fill\"``."
msgstr ""

#: ../../library/tkinter.rst:852
msgid "region"
msgstr ""

#: ../../library/tkinter.rst:850
msgid ""
"This is a string with four space-delimited elements, each of which is a "
"legal distance (see above).  For example: ``\"2 3 4 5\"`` and ``\"3i 2i 4.5i"
" 2i\"`` and ``\"3c 2c 4c 10.43c\"``  are all legal regions."
msgstr ""

#: ../../library/tkinter.rst:856
msgid "relief"
msgstr ""

#: ../../library/tkinter.rst:855
msgid ""
"Determines what the border style of a widget will be.  Legal values are: "
"``\"raised\"``, ``\"sunken\"``, ``\"flat\"``, ``\"groove\"``, and "
"``\"ridge\"``."
msgstr ""

#: ../../library/tkinter.rst:860
msgid "scrollcommand"
msgstr ""

#: ../../library/tkinter.rst:859
msgid ""
"This is almost always the :meth:`!set` method of some scrollbar widget, but "
"can be any widget method that takes a single argument."
msgstr ""

#: ../../library/tkinter.rst:863
msgid "wrap"
msgstr ""

#: ../../library/tkinter.rst:863
msgid "Must be one of: ``\"none\"``, ``\"char\"``, or ``\"word\"``."
msgstr ""

#: ../../library/tkinter.rst:868
msgid "Bindings and Events"
msgstr ""

#: ../../library/tkinter.rst:874
msgid ""
"The bind method from the widget command allows you to watch for certain "
"events and to have a callback function trigger when that event type occurs."
"  The form of the bind method is::"
msgstr ""

#: ../../library/tkinter.rst:880
msgid "where:"
msgstr ""

#: ../../library/tkinter.rst:885
msgid "sequence"
msgstr ""

#: ../../library/tkinter.rst:883
msgid ""
"is a string that denotes the target kind of event.  (See the "
":manpage:`bind(3tk)` man page, and page 201 of John Ousterhout's book, "
":title-reference:`Tcl and the Tk Toolkit (2nd edition)`, for details)."
msgstr ""

#: ../../library/tkinter.rst:890
msgid "func"
msgstr ""

#: ../../library/tkinter.rst:888
msgid ""
"is a Python function, taking one argument, to be invoked when the event "
"occurs. An Event instance will be passed as the argument. (Functions "
"deployed this way are commonly known as *callbacks*.)"
msgstr ""

#: ../../library/tkinter.rst:896
msgid "add"
msgstr ""

#: ../../library/tkinter.rst:893
msgid ""
"is optional, either ``''`` or ``'+'``.  Passing an empty string denotes that"
" this binding is to replace any other bindings that this event is associated"
" with.  Passing a ``'+'`` means that this function is to be added to the "
"list of functions bound to this event type."
msgstr ""

#: ../../library/tkinter.rst:905
msgid ""
"Notice how the widget field of the event is being accessed in the "
"``turn_red()`` callback.  This field contains the widget that caught the X "
"event.  The following table lists the other event fields you can access, and"
" how they are denoted in Tk, which can be useful when referring to the Tk "
"man pages."
msgstr ""

#: ../../library/tkinter.rst:911
msgid "Tkinter Event Field"
msgstr ""

#: ../../library/tkinter.rst:913
msgid "%f"
msgstr ""

#: ../../library/tkinter.rst:913
msgid "focus"
msgstr ""

#: ../../library/tkinter.rst:913
msgid "%A"
msgstr ""

#: ../../library/tkinter.rst:913
msgid "char"
msgstr ""

#: ../../library/tkinter.rst:915
msgid "%h"
msgstr ""

#: ../../library/tkinter.rst:915
msgid "height"
msgstr ""

#: ../../library/tkinter.rst:915
msgid "%E"
msgstr ""

#: ../../library/tkinter.rst:915
msgid "send_event"
msgstr ""

#: ../../library/tkinter.rst:917
msgid "%k"
msgstr ""

#: ../../library/tkinter.rst:917
msgid "keycode"
msgstr ""

#: ../../library/tkinter.rst:917
msgid "%K"
msgstr ""

#: ../../library/tkinter.rst:917
msgid "keysym"
msgstr ""

#: ../../library/tkinter.rst:919
msgid "%s"
msgstr ""

#: ../../library/tkinter.rst:919
msgid "state"
msgstr ""

#: ../../library/tkinter.rst:919
msgid "%N"
msgstr ""

#: ../../library/tkinter.rst:919
msgid "keysym_num"
msgstr ""

#: ../../library/tkinter.rst:921
msgid "%t"
msgstr ""

#: ../../library/tkinter.rst:921
msgid "time"
msgstr ""

#: ../../library/tkinter.rst:921
msgid "%T"
msgstr ""

#: ../../library/tkinter.rst:921
msgid "type"
msgstr ""

#: ../../library/tkinter.rst:923
msgid "%w"
msgstr ""

#: ../../library/tkinter.rst:923
msgid "width"
msgstr ""

#: ../../library/tkinter.rst:923
msgid "%W"
msgstr ""

#: ../../library/tkinter.rst:923
msgid "widget"
msgstr ""

#: ../../library/tkinter.rst:925
msgid "%x"
msgstr ""

#: ../../library/tkinter.rst:925
msgid "x"
msgstr ""

#: ../../library/tkinter.rst:925
msgid "%X"
msgstr ""

#: ../../library/tkinter.rst:925
msgid "x_root"
msgstr ""

#: ../../library/tkinter.rst:927
msgid "%y"
msgstr ""

#: ../../library/tkinter.rst:927
msgid "y"
msgstr ""

#: ../../library/tkinter.rst:927
msgid "%Y"
msgstr ""

#: ../../library/tkinter.rst:927
msgid "y_root"
msgstr ""

#: ../../library/tkinter.rst:932
msgid "The index Parameter"
msgstr ""

#: ../../library/tkinter.rst:934
msgid ""
"A number of widgets require \"index\" parameters to be passed.  These are "
"used to point at a specific place in a Text widget, or to particular "
"characters in an Entry widget, or to particular menu items in a Menu widget."
msgstr ""

#: ../../library/tkinter.rst:941
msgid "Entry widget indexes (index, view index, etc.)"
msgstr ""

#: ../../library/tkinter.rst:939
msgid ""
"Entry widgets have options that refer to character positions in the text "
"being displayed.  You can use these :mod:`tkinter` functions to access these"
" special points in text widgets:"
msgstr ""

#: ../../library/tkinter.rst:945
msgid "Text widget indexes"
msgstr ""

#: ../../library/tkinter.rst:944
msgid ""
"The index notation for Text widgets is very rich and is best described in "
"the Tk man pages."
msgstr ""

#: ../../library/tkinter.rst:970
msgid "Menu indexes (menu.invoke(), menu.entryconfig(), etc.)"
msgstr ""

#: ../../library/tkinter.rst:948
msgid ""
"Some options and methods for menus manipulate specific menu entries. Anytime"
" a menu index is needed for an option or a parameter, you may pass in:"
msgstr ""

#: ../../library/tkinter.rst:951
msgid ""
"an integer which refers to the numeric position of the entry in the widget, "
"counted from the top, starting with 0;"
msgstr ""

#: ../../library/tkinter.rst:954
msgid ""
"the string ``\"active\"``, which refers to the menu position that is "
"currently under the cursor;"
msgstr ""

#: ../../library/tkinter.rst:957
msgid "the string ``\"last\"`` which refers to the last menu item;"
msgstr ""

#: ../../library/tkinter.rst:959
msgid ""
"An integer preceded by ``@``, as in ``@6``, where the integer is interpreted"
" as a y pixel coordinate in the menu's coordinate system;"
msgstr ""

#: ../../library/tkinter.rst:962
msgid ""
"the string ``\"none\"``, which indicates no menu entry at all, most often "
"used with menu.activate() to deactivate all entries, and finally,"
msgstr ""

#: ../../library/tkinter.rst:965
msgid ""
"a text string that is pattern matched against the label of the menu entry, "
"as scanned from the top of the menu to the bottom.  Note that this index "
"type is considered after all the others, which means that matches for menu "
"items labelled ``last``, ``active``, or ``none`` may be interpreted as the "
"above literals, instead."
msgstr ""

#: ../../library/tkinter.rst:973
msgid "Images"
msgstr ""

#: ../../library/tkinter.rst:975
msgid ""
"Images of different formats can be created through the corresponding "
"subclass of :class:`tkinter.Image`:"
msgstr ""

#: ../../library/tkinter.rst:978
msgid ":class:`BitmapImage` for images in XBM format."
msgstr ""

#: ../../library/tkinter.rst:980
msgid ""
":class:`PhotoImage` for images in PGM, PPM, GIF and PNG formats. The latter "
"is supported starting with Tk 8.6."
msgstr ""

#: ../../library/tkinter.rst:983
msgid ""
"Either type of image is created through either the ``file`` or the ``data`` "
"option (other options are available as well)."
msgstr ""

#: ../../library/tkinter.rst:986
msgid ""
"The image object can then be used wherever an ``image`` option is supported "
"by some widget (e.g. labels, buttons, menus). In these cases, Tk will not "
"keep a reference to the image. When the last Python reference to the image "
"object is deleted, the image data is deleted as well, and Tk will display an"
" empty box wherever the image was used."
msgstr ""

#: ../../library/tkinter.rst:994
msgid ""
"The `Pillow <https://python-pillow.org/>`_ package adds support for formats "
"such as BMP, JPEG, TIFF, and WebP, among others."
msgstr ""

#: ../../library/tkinter.rst:1000
msgid "File Handlers"
msgstr ""

#: ../../library/tkinter.rst:1002
msgid ""
"Tk allows you to register and unregister a callback function which will be "
"called from the Tk mainloop when I/O is possible on a file descriptor. Only "
"one handler may be registered per file descriptor. Example code::"
msgstr ""

#: ../../library/tkinter.rst:1013
msgid "This feature is not available on Windows."
msgstr ""

#: ../../library/tkinter.rst:1015
msgid ""
"Since you don't know how many bytes are available for reading, you may not "
"want to use the :class:`~io.BufferedIOBase` or :class:`~io.TextIOBase` "
":meth:`~io.BufferedIOBase.read` or :meth:`~io.IOBase.readline` methods, "
"since these will insist on reading a predefined number of bytes. For "
"sockets, the :meth:`~socket.socket.recv` or :meth:`~socket.socket.recvfrom` "
"methods will work fine; for other files, use raw reads or "
"``os.read(file.fileno(), maxbytecount)``."
msgstr ""

#: ../../library/tkinter.rst:1026
msgid ""
"Registers the file handler callback function *func*. The *file* argument may"
" either be an object with a :meth:`~io.IOBase.fileno` method (such as a file"
" or socket object), or an integer file descriptor. The *mask* argument is an"
" ORed combination of any of the three constants below. The callback is "
"called as follows::"
msgstr ""

#: ../../library/tkinter.rst:1037
msgid "Unregisters a file handler."
msgstr ""

#: ../../library/tkinter.rst:1044
msgid "Constants used in the *mask* arguments."
msgstr ""

#: ../../library/tkinter.rst:640
msgid "packing (widgets)"
msgstr ""

#: ../../library/tkinter.rst:753
msgid "window manager (widgets)"
msgstr ""

#: ../../library/tkinter.rst:870
msgid "bind (widgets)"
msgstr ""

#: ../../library/tkinter.rst:870
msgid "events (widgets)"
msgstr ""
