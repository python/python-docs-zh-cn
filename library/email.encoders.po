# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.encoders.rst:2
msgid ":mod:`!email.encoders`: Encoders"
msgstr ":mod:`!email.encoders`: 编码器"

#: ../../library/email.encoders.rst:7
msgid "**Source code:** :source:`Lib/email/encoders.py`"
msgstr "**源代码:** :source:`Lib/email/encoders.py`"

#: ../../library/email.encoders.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  In the new API "
"the functionality is provided by the *cte* parameter of the "
":meth:`~email.message.EmailMessage.set_content` method."
msgstr ""
"此模块是旧版 (``Compat32``) email API 的组成部分。 在新版 API 中将由 "
":meth:`~email.message.EmailMessage.set_content` 方法的 *cte* 形参提供该功能。"

#: ../../library/email.encoders.rst:15
msgid ""
"This module is deprecated in Python 3.  The functions provided here should "
"not be called explicitly since the :class:`~email.mime.text.MIMEText` class "
"sets the content type and CTE header using the *_subtype* and *_charset* "
"values passed during the instantiation of that class."
msgstr ""
"此模块在 Python 3 中已弃用。 这里提供的函数不应被显式地调用，因为 :class:`~email.mime.text.MIMEText` "
"类会在类实例化期间使用 *_subtype* 和 *_charset* 值来设置内容类型和 CTE 标头。"

#: ../../library/email.encoders.rst:20
msgid ""
"The remaining text in this section is the original documentation of the "
"module."
msgstr "本节中的其余文本是此模块的原始文档。"

#: ../../library/email.encoders.rst:22
msgid ""
"When creating :class:`~email.message.Message` objects from scratch, you "
"often need to encode the payloads for transport through compliant mail "
"servers. This is especially true for :mimetype:`image/\\*` and "
":mimetype:`text/\\*` type messages containing binary data."
msgstr ""
"当创建全新的 :class:`~email.message.Message` 对象时，你经常需要对载荷编码以便通过兼容的邮件服务器进行传输。 "
"对于包含二进制数据的 :mimetype:`image/\\*` 和 :mimetype:`text/\\*` 类型的消息来说尤其如此。"

#: ../../library/email.encoders.rst:27
msgid ""
"The :mod:`email` package provides some convenient encoders in its "
":mod:`~email.encoders` module.  These encoders are actually used by the "
":class:`~email.mime.audio.MIMEAudio` and "
":class:`~email.mime.image.MIMEImage` class constructors to provide default "
"encodings.  All encoder functions take exactly one argument, the message "
"object to encode.  They usually extract the payload, encode it, and reset "
"the payload to this newly encoded value.  They should also set the "
":mailheader:`Content-Transfer-Encoding` header as appropriate."
msgstr ""
":mod:`email` 包在其 :mod:`~email.encoders` 模块中提供了一些方便的编码器。 这些编码器实际上由 "
":class:`~email.mime.audio.MIMEAudio` 和 :class:`~email.mime.image.MIMEImage` "
"类构造器使用以提供默认编码格式。 所有编码器函数都只接受一个参数，即要编码的消息对象。 "
"它们通常会提取有效截荷，对其进行编码，并将载荷重置为新近编码的值。 它们还应当相应地设置 :mailheader:`Content-Transfer-"
"Encoding` 标头。"

#: ../../library/email.encoders.rst:35
msgid ""
"Note that these functions are not meaningful for a multipart message.  They "
"must be applied to individual subparts instead, and will raise a "
":exc:`TypeError` if passed a message whose type is multipart."
msgstr ""
"请注意，这些函数对于多段消息没有意义。 它们必须应用到各个单独的段上面，而不是整体。如果直接传递一个多段类型的消息，会产生一个 "
":exc:`TypeError` 错误。"

#: ../../library/email.encoders.rst:39
msgid "Here are the encoding functions provided:"
msgstr "下面是提供的编码函数："

#: ../../library/email.encoders.rst:44
msgid ""
"Encodes the payload into quoted-printable form and sets the "
":mailheader:`Content-Transfer-Encoding` header to ``quoted-printable`` [#]_."
" This is a good encoding to use when most of your payload is normal "
"printable data, but contains a few unprintable characters."
msgstr ""
"将有效数据编码为经转换的可打印形式，并将 :mailheader:`Content-Transfer-Encoding` 标头设置为 ``quoted-"
"printable`` [#]_。 当大多数实际的数据是普通的可打印数据但包含少量不可打印的字符时，这是一个很好的编码。"

#: ../../library/email.encoders.rst:52
msgid ""
"Encodes the payload into base64 form and sets the :mailheader:`Content-"
"Transfer-Encoding` header to ``base64``.  This is a good encoding to use "
"when most of your payload is unprintable data since it is a more compact "
"form than quoted-printable.  The drawback of base64 encoding is that it "
"renders the text non-human readable."
msgstr ""
"将有效载荷编码为 base64 形式，并将 :mailheader:`Content-Transfer-Encoding` 标头设为 "
"``base64``。 当你的载荷主要包含不可打印数据时这是一种很好用的编码格式，因为它比 quoted-printable 更紧凑。 base64 "
"编码格式的缺点是它会使文本变成人类不可读的形式。"

#: ../../library/email.encoders.rst:61
msgid ""
"This doesn't actually modify the message's payload, but it does set the "
":mailheader:`Content-Transfer-Encoding` header to either ``7bit`` or "
"``8bit`` as appropriate, based on the payload data."
msgstr ""
"此函数并不实际改变消息的有效载荷，但它会基于载荷数据将 :mailheader:`Content-Transfer-Encoding` 标头相应地设为 "
"``7bit`` 或 ``8bit``。"

#: ../../library/email.encoders.rst:68
msgid ""
"This does nothing; it doesn't even set the :mailheader:`Content-Transfer-"
"Encoding` header."
msgstr "此函数什么都不会做；它甚至不会设置 :mailheader:`Content-Transfer-Encoding` 标头。"

#: ../../library/email.encoders.rst:72
msgid "Footnotes"
msgstr "备注"

#: ../../library/email.encoders.rst:73
msgid ""
"Note that encoding with :meth:`encode_quopri` also encodes all tabs and "
"space characters in the data."
msgstr "请注意使用 :meth:`encode_quopri` 编码格式还会对数据中的所有制表符和空格符进行编码。"
