# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.encoders.rst:2
msgid ":mod:`email.encoders`: Encoders"
msgstr ""

#: ../../library/email.encoders.rst:7
msgid "**Source code:** :source:`Lib/email/encoders.py`"
msgstr ""

#: ../../library/email.encoders.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  In the new API "
"the functionality is provided by the *cte* parameter of the "
":meth:`~email.message.EmailMessage.set_content` method."
msgstr ""

#: ../../library/email.encoders.rst:15
msgid ""
"This module is deprecated in Python 3.  The functions provided here should "
"not be called explicitly since the :class:`~email.mime.text.MIMEText` class "
"sets the content type and CTE header using the *_subtype* and *_charset* "
"values passed during the instantiation of that class."
msgstr ""

#: ../../library/email.encoders.rst:20
msgid ""
"The remaining text in this section is the original documentation of the "
"module."
msgstr ""

#: ../../library/email.encoders.rst:22
msgid ""
"When creating :class:`~email.message.Message` objects from scratch, you "
"often need to encode the payloads for transport through compliant mail "
"servers. This is especially true for :mimetype:`image/\\*` and "
":mimetype:`text/\\*` type messages containing binary data."
msgstr ""

#: ../../library/email.encoders.rst:27
msgid ""
"The :mod:`email` package provides some convenient encoders in its "
":mod:`encoders` module.  These encoders are actually used by the "
":class:`~email.mime.audio.MIMEAudio` and "
":class:`~email.mime.image.MIMEImage` class constructors to provide default "
"encodings.  All encoder functions take exactly one argument, the message "
"object to encode.  They usually extract the payload, encode it, and reset "
"the payload to this newly encoded value.  They should also set the "
":mailheader:`Content-Transfer-Encoding` header as appropriate."
msgstr ""

#: ../../library/email.encoders.rst:35
msgid ""
"Note that these functions are not meaningful for a multipart message.  They "
"must be applied to individual subparts instead, and will raise a "
":exc:`TypeError` if passed a message whose type is multipart."
msgstr ""

#: ../../library/email.encoders.rst:39
msgid "Here are the encoding functions provided:"
msgstr ""

#: ../../library/email.encoders.rst:44
msgid ""
"Encodes the payload into quoted-printable form and sets the "
":mailheader:`Content-Transfer-Encoding` header to ``quoted-printable`` [#]_."
" This is a good encoding to use when most of your payload is normal "
"printable data, but contains a few unprintable characters."
msgstr ""

#: ../../library/email.encoders.rst:52
msgid ""
"Encodes the payload into base64 form and sets the :mailheader:`Content-"
"Transfer-Encoding` header to ``base64``.  This is a good encoding to use "
"when most of your payload is unprintable data since it is a more compact "
"form than quoted-printable.  The drawback of base64 encoding is that it "
"renders the text non-human readable."
msgstr ""

#: ../../library/email.encoders.rst:61
msgid ""
"This doesn't actually modify the message's payload, but it does set the "
":mailheader:`Content-Transfer-Encoding` header to either ``7bit`` or "
"``8bit`` as appropriate, based on the payload data."
msgstr ""

#: ../../library/email.encoders.rst:68
msgid ""
"This does nothing; it doesn't even set the :mailheader:`Content-Transfer-"
"Encoding` header."
msgstr ""

#: ../../library/email.encoders.rst:72
msgid "Footnotes"
msgstr "备注"

#: ../../library/email.encoders.rst:73
msgid ""
"Note that encoding with :meth:`encode_quopri` also encodes all tabs and "
"space characters in the data."
msgstr ""
