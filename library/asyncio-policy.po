# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Pan Felix <tinylambda@gmail.com>, 2021
# MuSheng Chen <sheng.2179@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-04 14:20+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-policy.rst:8
msgid "Policies"
msgstr "策略"

#: ../../library/asyncio-policy.rst:12
msgid ""
"Policies are deprecated and will be removed in Python 3.16. Users are "
"encouraged to use the :func:`asyncio.run` function or the "
":class:`asyncio.Runner` with *loop_factory* to use the desired loop "
"implementation."
msgstr ""
"策略已弃用，并将在 Python 3.16 中删除。鼓励用户使用 :func:`asyncio.run` 函数或 "
":class:`asyncio.Runner` 并附带 *loop_factory* 以使用想要的循环实现。"

#: ../../library/asyncio-policy.rst:18
msgid ""
"An event loop policy is a global object used to get and set the current "
":ref:`event loop <asyncio-event-loop>`, as well as create new event loops. "
"The default policy can be :ref:`replaced <asyncio-policy-get-set>` with "
":ref:`built-in alternatives <asyncio-policy-builtin>` to use different event"
" loop implementations, or substituted by a :ref:`custom policy <asyncio-"
"custom-policies>` that can override these behaviors."
msgstr ""
"事件循环策略是一个用于获取和设置当前 :ref:`事件循环 <asyncio-event-loop>` 的全局对象，还可以创建新的事件循环。 "
"默认策略可以可以被 :ref:`替换 <asyncio-policy-get-set>` 为 :ref:`内置替代策略 <asyncio-policy-"
"builtin>` 以使用不同的事件循环实现，或者替换为可以覆盖这些行为的 :ref:`自定义策略 <asyncio-custom-"
"policies>`。"

#: ../../library/asyncio-policy.rst:27
msgid ""
"The :ref:`policy object <asyncio-policy-objects>` gets and sets a separate "
"event loop per *context*. This is per-thread by default, though custom "
"policies could define *context* differently."
msgstr ""
":ref:`策略对象 <asyncio-policy-objects>` 可为每个 *context* 获取和设置单独的事件循环。 "
"在默认情况下是分线程，不过自定义策略可以按不同的方式定义 *context*。"

#: ../../library/asyncio-policy.rst:32
msgid ""
"Custom event loop policies can control the behavior of "
":func:`get_event_loop`, :func:`set_event_loop`, and :func:`new_event_loop`."
msgstr ""
"自定义事件循环策略可以控制 :func:`get_event_loop`, :func:`set_event_loop` 和 "
":func:`new_event_loop` 的行为。"

#: ../../library/asyncio-policy.rst:35
msgid ""
"Policy objects should implement the APIs defined in the "
":class:`AbstractEventLoopPolicy` abstract base class."
msgstr "策略对象应该实现 :class:`AbstractEventLoopPolicy` 抽象基类中定义的API。"

#: ../../library/asyncio-policy.rst:42
msgid "Getting and Setting the Policy"
msgstr "获取和设置策略"

#: ../../library/asyncio-policy.rst:44
msgid ""
"The following functions can be used to get and set the policy for the "
"current process:"
msgstr "可以使用下面函数获取和设置当前进程的策略:"

#: ../../library/asyncio-policy.rst:49
msgid "Return the current process-wide policy."
msgstr "返回当前进程域的策略。"

#: ../../library/asyncio-policy.rst:51
msgid ""
"The :func:`get_event_loop_policy` function is deprecated and will be removed"
" in Python 3.16."
msgstr ":func:`get_event_loop_policy` 函数已弃用，并将在 Python 3.16 中删除。"

#: ../../library/asyncio-policy.rst:57
msgid "Set the current process-wide policy to *policy*."
msgstr "将 *policy* 设置为当前进程域策略。"

#: ../../library/asyncio-policy.rst:59
msgid "If *policy* is set to ``None``, the default policy is restored."
msgstr "如果 *policy* 设为 ``None`` 将恢复默认策略。"

#: ../../library/asyncio-policy.rst:61
msgid ""
"The :func:`set_event_loop_policy` function is deprecated and will be removed"
" in Python 3.16."
msgstr ":func:`set_event_loop_policy` 函数已弃用，并将在 Python 3.16 中删除。"

#: ../../library/asyncio-policy.rst:69
msgid "Policy Objects"
msgstr "策略对象"

#: ../../library/asyncio-policy.rst:71
msgid "The abstract event loop policy base class is defined as follows:"
msgstr "抽象事件循环策略基类定义如下:"

#: ../../library/asyncio-policy.rst:75
msgid "An abstract base class for asyncio policies."
msgstr "异步策略的抽象基类。"

#: ../../library/asyncio-policy.rst:79
msgid "Get the event loop for the current context."
msgstr "为当前上下文获取事件循环。"

#: ../../library/asyncio-policy.rst:81
msgid ""
"Return an event loop object implementing the :class:`AbstractEventLoop` "
"interface."
msgstr "返回一个实现  :class:`AbstractEventLoop`  接口的事件循环对象。"

#: ../../library/asyncio-policy.rst:84 ../../library/asyncio-policy.rst:96
msgid "This method should never return ``None``."
msgstr "该方法永远不应返回 ``None``。"

#: ../../library/asyncio-policy.rst:90
msgid "Set the event loop for the current context to *loop*."
msgstr "将当前上下文的事件循环设置为  *loop* 。"

#: ../../library/asyncio-policy.rst:94
msgid "Create and return a new event loop object."
msgstr "创建并返回一个新的事件循环对象。"

#: ../../library/asyncio-policy.rst:98
msgid ""
"The :class:`AbstractEventLoopPolicy` class is deprecated and will be removed"
" in Python 3.16."
msgstr ":class:`AbstractEventLoopPolicy` 类已弃用，并将在 Python 3.16 中删除。"

#: ../../library/asyncio-policy.rst:105
msgid "asyncio ships with the following built-in policies:"
msgstr "asyncio附带下列内置策略:"

#: ../../library/asyncio-policy.rst:110
msgid ""
"The default asyncio policy.  Uses :class:`SelectorEventLoop` on Unix and "
":class:`ProactorEventLoop` on Windows."
msgstr ""
"默认的 asyncio 策略。 在 Unix 上使用 :class:`SelectorEventLoop` 而在 Windows 上使用 "
":class:`ProactorEventLoop`。"

#: ../../library/asyncio-policy.rst:113
msgid ""
"There is no need to install the default policy manually. asyncio is "
"configured to use the default policy automatically."
msgstr "不需要手动安装默认策略。asyncio已配置成自动使用默认策略。"

#: ../../library/asyncio-policy.rst:118
msgid "On Windows, :class:`ProactorEventLoop` is now used by default."
msgstr "在 Windows 上，现在默认会使用 :class:`ProactorEventLoop`。"

#: ../../library/asyncio-policy.rst:120
msgid ""
"The :meth:`get_event_loop` method of the default asyncio policy now raises a"
" :exc:`RuntimeError` if there is no set event loop."
msgstr ""
"如果没有设置事件循环，默认 asyncio 策略的 :meth:`get_event_loop` 方法现在引发 :exc:`RuntimeError`。"

#: ../../library/asyncio-policy.rst:124
msgid ""
"The :class:`DefaultEventLoopPolicy` class is deprecated and will be removed "
"in Python 3.16."
msgstr ":class:`DefaultEventLoopPolicy` 类已被弃用并将在 Python 3.16 中移除。"

#: ../../library/asyncio-policy.rst:131
msgid ""
"An alternative event loop policy that uses the :class:`SelectorEventLoop` "
"event loop implementation."
msgstr "一个使用 :class:`SelectorEventLoop` 事件循环实现的替代事件循环策略。"

#: ../../library/asyncio-policy.rst:134 ../../library/asyncio-policy.rst:146
msgid "Availability"
msgstr "Availability"

#: ../../library/asyncio-policy.rst:136
msgid ""
"The :class:`WindowsSelectorEventLoopPolicy` class is deprecated and will be "
"removed in Python 3.16."
msgstr ":class:`WindowsSelectorEventLoopPolicy` 类已被弃用并将在 Python 3.16 中移除。"

#: ../../library/asyncio-policy.rst:143
msgid ""
"An alternative event loop policy that uses the :class:`ProactorEventLoop` "
"event loop implementation."
msgstr "使用  :class:`ProactorEventLoop` 事件循环实现的另一种事件循环策略。"

#: ../../library/asyncio-policy.rst:148
msgid ""
"The :class:`WindowsProactorEventLoopPolicy` class is deprecated and will be "
"removed in Python 3.16."
msgstr ":class:`WindowsProactorEventLoopPolicy` 类已被弃用并将在 Python 3.16 中移除。"

#: ../../library/asyncio-policy.rst:156
msgid "Custom Policies"
msgstr "自定义策略"

#: ../../library/asyncio-policy.rst:158
msgid ""
"To implement a new event loop policy, it is recommended to subclass "
":class:`DefaultEventLoopPolicy` and override the methods for which custom "
"behavior is wanted, e.g.::"
msgstr "要实现一个新的事件循环策略，建议子类化 :class:`DefaultEventLoopPolicy` 并重写需要定制行为的方法，例如::"

#: ../../library/asyncio-policy.rst:162
msgid ""
"class MyEventLoopPolicy(asyncio.DefaultEventLoopPolicy):\n"
"\n"
"    def get_event_loop(self):\n"
"        \"\"\"Get the event loop.\n"
"\n"
"        This may be None or an instance of EventLoop.\n"
"        \"\"\"\n"
"        loop = super().get_event_loop()\n"
"        # Do something with loop ...\n"
"        return loop\n"
"\n"
"asyncio.set_event_loop_policy(MyEventLoopPolicy())"
msgstr ""
"class MyEventLoopPolicy(asyncio.DefaultEventLoopPolicy):\n"
"\n"
"    def get_event_loop(self):\n"
"        \"\"\"获取事件循环。\n"
"\n"
"        这可能为 None 或是一个 EventLoop 的实例。\n"
"        \"\"\"\n"
"        loop = super().get_event_loop()\n"
"        # 对 loop 执行一些操作 ...\n"
"        return loop\n"
"\n"
"asyncio.set_event_loop_policy(MyEventLoopPolicy())"
