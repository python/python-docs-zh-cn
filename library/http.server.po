# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-23 14:55+0000\n"
"PO-Revision-Date: 2025-05-08 05:09+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/http.server.rst:2
msgid ":mod:`!http.server` --- HTTP servers"
msgstr ":mod:`!http.server` --- HTTP 服务器"

#: ../../library/http.server.rst:7
msgid "**Source code:** :source:`Lib/http/server.py`"
msgstr "**源代码：** :source:`Lib/http/server.py`"

#: ../../library/http.server.rst:17
msgid "This module defines classes for implementing HTTP servers."
msgstr "这个模块定义了用于实现 HTTP 服务器的类。"

#: ../../library/http.server.rst:22
msgid ""
":mod:`http.server` is not recommended for production. It only implements "
":ref:`basic security checks <http.server-security>`."
msgstr ""
":mod:`http.server` 不推荐用于生产环境。它仅仅实现了 :ref:`basic security checks "
"<http.server-security>` 的要求。"

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Availability"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See "
":ref:`wasm-availability` for more information."
msgstr "此模块在 WebAssembly 平台上无效或不可用。 请参阅 :ref:`wasm-availability` 了解详情。"

#: ../../library/http.server.rst:27
msgid ""
"One class, :class:`HTTPServer`, is a :class:`socketserver.TCPServer` "
"subclass. It creates and listens at the HTTP socket, dispatching the "
"requests to a handler.  Code to create and run the server looks like this::"
msgstr ""
":class:`HTTPServer` 是 :class:`socketserver.TCPServer` 的一个子类。它会创建和侦听 HTTP "
"套接字，并将请求分发给处理程序。创建和运行 HTTP 服务器的代码类似如下所示："

#: ../../library/http.server.rst:31
msgid ""
"def run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):\n"
"    server_address = ('', 8000)\n"
"    httpd = server_class(server_address, handler_class)\n"
"    httpd.serve_forever()"
msgstr ""
"def run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):\n"
"    server_address = ('', 8000)\n"
"    httpd = server_class(server_address, handler_class)\n"
"    httpd.serve_forever()"

#: ../../library/http.server.rst:39
msgid ""
"This class builds on the :class:`~socketserver.TCPServer` class by storing "
"the server address as instance variables named :attr:`server_name` and "
":attr:`server_port`. The server is accessible by the handler, typically "
"through the handler's :attr:`server` instance variable."
msgstr ""
"该类基于 :class:`~socketserver.TCPServer` 类，并在实例变量 :attr:`server_name` 和 "
":attr:`server_port` 中保存 HTTP 服务器地址。处理程序可通过实例变量 :attr:`server` 访问 HTTP 服务器。"

#: ../../library/http.server.rst:46
msgid ""
"This class is identical to HTTPServer but uses threads to handle requests by"
" using the :class:`~socketserver.ThreadingMixIn`. This is useful to handle "
"web browsers pre-opening sockets, on which :class:`HTTPServer` would wait "
"indefinitely."
msgstr ""
"该类相似于 HTTPServer ，只是会利用 :class:`~socketserver.ThreadingMixIn` "
"对请求进行多线程处理。当需要对 Web 浏览器预先打开套接字进行处理时，这就很有用，这时 :class:`HTTPServer` 会一直等待请求。"

#: ../../library/http.server.rst:54
msgid ""
"The :class:`HTTPServer` and :class:`ThreadingHTTPServer` must be given a "
"*RequestHandlerClass* on instantiation, of which this module provides three "
"different variants:"
msgstr ""
"实例化 :class:`HTTPServer` 和 :class:`ThreadingHTTPServer` 时，必须给出一个 "
"*RequestHandlerClass*，本模块提供了该对象的三种变体："

#: ../../library/http.server.rst:60
msgid ""
"This class is used to handle the HTTP requests that arrive at the server.  "
"By itself, it cannot respond to any actual HTTP requests; it must be "
"subclassed to handle each request method (e.g. GET or POST). "
":class:`BaseHTTPRequestHandler` provides a number of class and instance "
"variables, and methods for use by subclasses."
msgstr ""
"这个类用于处理到达服务器的 HTTP 请求。 它本身无法响应任何实际的 HTTP 请求；它必须被子类化以处理每个请求方法（例如 GET 或 POST）。"
" :class:`BaseHTTPRequestHandler` 提供了许多供子类使用的类和实例变量以及方法。"

#: ../../library/http.server.rst:66
msgid ""
"The handler will parse the request and the headers, then call a method "
"specific to the request type. The method name is constructed from the "
"request. For example, for the request method ``SPAM``, the :meth:`!do_SPAM` "
"method will be called with no arguments. All of the relevant information is "
"stored in instance variables of the handler.  Subclasses should not need to "
"override or extend the :meth:`!__init__` method."
msgstr ""
"这个处理器将解析请求和标头，然后调用特定请求类型对应的方法。 方法名称将根据请求来构造。 例如，对于请求方法 ``SPAM``，将不带参数地调用 "
":meth:`!do_SPAM` 方法。 所有相关信息会被保存在该处理器的实例变量中。 子类不重写或扩展 :meth:`!__init__` 方法。"

#: ../../library/http.server.rst:73
msgid ":class:`BaseHTTPRequestHandler` has the following instance variables:"
msgstr ":class:`BaseHTTPRequestHandler` 具有下列实例变量:"

#: ../../library/http.server.rst:77
msgid ""
"Contains a tuple of the form ``(host, port)`` referring to the client's "
"address."
msgstr "包含 ``(host, port)`` 形式的指向客户端地址的元组。"

#: ../../library/http.server.rst:82
msgid "Contains the server instance."
msgstr "包含服务器实例。"

#: ../../library/http.server.rst:86
msgid ""
"Boolean that should be set before :meth:`handle_one_request` returns, "
"indicating if another request may be expected, or if the connection should "
"be shut down."
msgstr "应当在 :meth:`handle_one_request` 返回之前设定的布尔值，指明是否要期待另一个请求，还是应当关闭连接。"

#: ../../library/http.server.rst:92
msgid ""
"Contains the string representation of the HTTP request line. The terminating"
" CRLF is stripped. This attribute should be set by "
":meth:`handle_one_request`. If no valid request line was processed, it "
"should be set to the empty string."
msgstr ""
"包含 HTTP 请求行的字符串表示。 末尾的 CRLF 会被去除。 该属性应当由 :meth:`handle_one_request` 来设定。 "
"如果无有效请求行被处理，则它应当被设为空字符串。"

#: ../../library/http.server.rst:99
msgid "Contains the command (request type). For example, ``'GET'``."
msgstr "包含具体的命令（请求类型）。 例如 ``'GET'``。"

#: ../../library/http.server.rst:103
msgid ""
"Contains the request path. If query component of the URL is present, then "
"``path`` includes the query. Using the terminology of :rfc:`3986`, ``path`` "
"here includes ``hier-part`` and the ``query``."
msgstr ""
"包含请求路径。如果URL的查询部分存在， ``path`` 会包含这个查询部分。使用 :rfc:`3986` 的术语来说，在这里， ``path`` "
"包含 ``hier-part`` 和 ``query`` 。"

#: ../../library/http.server.rst:109
msgid ""
"Contains the version string from the request. For example, ``'HTTP/1.0'``."
msgstr "包含请求的版本字符串。 例如 ``'HTTP/1.0'``。"

#: ../../library/http.server.rst:113
msgid ""
"Holds an instance of the class specified by the :attr:`MessageClass` class "
"variable. This instance parses and manages the headers in the HTTP request. "
"The :func:`~http.client.parse_headers` function from :mod:`http.client` is "
"used to parse the headers and it requires that the HTTP request provide a "
"valid :rfc:`2822` style header."
msgstr ""
"存放由 :attr:`MessageClass` 类变量所指定的类的实例。 该实例会解析并管理 HTTP 请求中的标头。 "
":mod:`http.client` 中的 :func:`~http.client.parse_headers` 函数将被用来解析标头并且它需要 "
"HTTP 请求提供一个有效的 :rfc:`2822` 风格的标头。"

#: ../../library/http.server.rst:121
msgid ""
"An :class:`io.BufferedIOBase` input stream, ready to read from the start of "
"the optional input data."
msgstr "一个 :class:`io.BufferedIOBase` 输入流，准备从可选的输入数据的开头进行读取。"

#: ../../library/http.server.rst:126
msgid ""
"Contains the output stream for writing a response back to the client. Proper"
" adherence to the HTTP protocol must be used when writing to this stream in "
"order to achieve successful interoperation with HTTP clients."
msgstr "包含用于写入响应并发回给客户端的输出流。 在写入流时必须正确遵守 HTTP 协议以便成功地实现与 HTTP 客户端的互操作。"

#: ../../library/http.server.rst:131
msgid "This is an :class:`io.BufferedIOBase` stream."
msgstr "这是一个 :class:`io.BufferedIOBase` 流。"

#: ../../library/http.server.rst:134
msgid ":class:`BaseHTTPRequestHandler` has the following attributes:"
msgstr ":class:`BaseHTTPRequestHandler` 具有下列属性："

#: ../../library/http.server.rst:138
msgid ""
"Specifies the server software version.  You may want to override this. The "
"format is multiple whitespace-separated strings, where each string is of the"
" form name[/version]. For example, ``'BaseHTTP/0.2'``."
msgstr ""
"指定服务器软件版本。 你可能会想要重写该属性。 该属性的格式为多个以空格分隔的字符串，其中每个字符串的形式为 name[/version]。 例如 "
"``'BaseHTTP/0.2'``。"

#: ../../library/http.server.rst:144
msgid ""
"Contains the Python system version, in a form usable by the "
":attr:`version_string` method and the :attr:`server_version` class variable."
" For example, ``'Python/1.4'``."
msgstr ""
"包含 Python 系统版本，采用 :attr:`version_string` 方法和 :attr:`server_version` "
"类变量所支持的形式。 例如 ``'Python/1.4'``。"

#: ../../library/http.server.rst:150
msgid ""
"Specifies a format string that should be used by :meth:`send_error` method "
"for building an error response to the client. The string is filled by "
"default with variables from :attr:`responses` based on the status code that "
"passed to :meth:`send_error`."
msgstr ""
"指定应当被 :meth:`send_error` 方法用来构建发给客户端的错误响应的格式字符串。 该字符串应使用来自 :attr:`responses`"
" 的变量根据传给 :meth:`send_error` 的状态码来填充默认值。"

#: ../../library/http.server.rst:157
msgid ""
"Specifies the Content-Type HTTP header of error responses sent to the "
"client.  The default value is ``'text/html'``."
msgstr "指定发送给客户端的错误响应的 Content-Type HTTP 标头。 默认值为 ``'text/html'``。"

#: ../../library/http.server.rst:162
msgid ""
"Specifies the HTTP version to which the server is conformant. It is sent in "
"responses to let the client know the server's communication capabilities for"
" future requests. If set to ``'HTTP/1.1'``, the server will permit HTTP "
"persistent connections; however, your server *must* then include an accurate"
" ``Content-Length`` header (using :meth:`send_header`) in all of its "
"responses to clients. For backwards compatibility, the setting defaults to "
"``'HTTP/1.0'``."
msgstr ""
"指定服务器所符合的 HTTP 版本。 它会在响应中发送以便让客户端知道服务器对于未来请求的通信能力。 如果设置为 "
"``'HTTP/1.1'``，服务器将允许 HTTP 持久连接；但是，你的服务器 *必须* 在所有对客户端的响应中包括一个准确的 ``Content-"
"Length`` 标头 (使用 :meth:`send_header`)。 为了保持向下兼容性，该设置默认为 ``'HTTP/1.0'``。"

#: ../../library/http.server.rst:172
msgid ""
"Specifies an :class:`email.message.Message`\\ -like class to parse HTTP "
"headers.  Typically, this is not overridden, and it defaults to "
":class:`http.client.HTTPMessage`."
msgstr ""
"指定一个 :class:`email.message.Message` 这样的类来解析 HTTP 标头。 通常该属性不会被重写，其默认值为 "
":class:`http.client.HTTPMessage`。"

#: ../../library/http.server.rst:178
msgid ""
"This attribute contains a mapping of error code integers to two-element "
"tuples containing a short and long message. For example, ``{code: "
"(shortmessage, longmessage)}``. The *shortmessage* is usually used as the "
"*message* key in an error response, and *longmessage* as the *explain* key."
"  It is used by :meth:`send_response_only` and :meth:`send_error` methods."
msgstr ""
"该属性包含一个整数错误代码与由短消息和长消息组成的二元组的映射。 例如，``{code: (shortmessage, longmessage)}``。"
" *shortmessage* 通常是作为消息响应中的 *message* 键，而 *longmessage* 则是作为 *explain* 键。 "
"该属性会被 :meth:`send_response_only` 和 :meth:`send_error` 方法所使用。"

#: ../../library/http.server.rst:184
msgid "A :class:`BaseHTTPRequestHandler` instance has the following methods:"
msgstr ":class:`BaseHTTPRequestHandler` 实例具有下列方法:"

#: ../../library/http.server.rst:188
msgid ""
"Calls :meth:`handle_one_request` once (or, if persistent connections are "
"enabled, multiple times) to handle incoming HTTP requests. You should never "
"need to override it; instead, implement appropriate :meth:`!do_\\*` methods."
msgstr ""
"调用 :meth:`handle_one_request` 一次（或者如果启用了永久连接则为多次）来处理传入的 HTTP 请求。 "
"你应该永远不需要重写它；而是要实现适当的 :meth:`!do_\\*` 方法。"

#: ../../library/http.server.rst:195
msgid ""
"This method will parse and dispatch the request to the appropriate "
":meth:`!do_\\*` method.  You should never need to override it."
msgstr "此方法将解析并请请求分配给适当的 :meth:`!do_\\*` 方法。 你应该永远不需要重写它。"

#: ../../library/http.server.rst:200
msgid ""
"When an HTTP/1.1 conformant server receives an ``Expect: 100-continue`` "
"request header it responds back with a ``100 Continue`` followed by ``200 "
"OK`` headers. This method can be overridden to raise an error if the server "
"does not want the client to continue.  For e.g. server can choose to send "
"``417 Expectation Failed`` as a response header and ``return False``."
msgstr ""
"当一个符合 HTTP/1.1 标准的服务器接收到一个 ``Expect: 100-continue`` 请求标头时它会以一个 ``100 "
"Continue`` 加 ``200 OK`` 标头作为响应。 如果服务器不希望客户端继续则可以通过重写来引发一个错误。 例如服务器可以选择发送 "
"``417 Expectation Failed`` 作为响应标头并 ``return False``。"

#: ../../library/http.server.rst:211
msgid ""
"Sends and logs a complete error reply to the client. The numeric *code* "
"specifies the HTTP error code, with *message* as an optional, short, human "
"readable description of the error.  The *explain* argument can be used to "
"provide more detailed information about the error; it will be formatted "
"using the :attr:`error_message_format` attribute and emitted, after a "
"complete set of headers, as the response body.  The :attr:`responses` "
"attribute holds the default values for *message* and *explain* that will be "
"used if no value is provided; for unknown codes the default value for both "
"is the string ``???``. The body will be empty if the method is HEAD or the "
"response code is one of the following: :samp:`1{xx}`, ``204 No Content``, "
"``205 Reset Content``, ``304 Not Modified``."
msgstr ""
"发送并记录回复给客户端的完整的错误信息。 数字形式的 *code* 指明 HTTP 错误代码，可选的 *message* "
"为简短的易于人类阅读的错误描述。 *explain* 参数可被用于提供更详细的错误信息；它将使用 "
":attr:`error_message_format` 属性来进行格式化并在一组完整的标头之后作为响应体被发送。 :attr:`responses` "
"属性保存了 *message* 和 *explain* 的默认值并将在未提供值时被使用；对于未知代码这两者的默认值均为字符串 ``???``。 "
"如果方法为 HEAD 或响应代码为下列值一则响应体将为空: :samp:`1{xx}`, ``204 No Content``, ``205 Reset"
" Content``, ``304 Not Modified``。"

#: ../../library/http.server.rst:223
msgid ""
"The error response includes a Content-Length header. Added the *explain* "
"argument."
msgstr "错误响应包括一个 Content-Length 标头。 增加了 *explain* 参数。"

#: ../../library/http.server.rst:229
msgid ""
"Adds a response header to the headers buffer and logs the accepted request. "
"The HTTP response line is written to the internal buffer, followed by "
"*Server* and *Date* headers. The values for these two headers are picked up "
"from the :meth:`version_string` and :meth:`date_time_string` methods, "
"respectively. If the server does not intend to send any other headers using "
"the :meth:`send_header` method, then :meth:`send_response` should be "
"followed by an :meth:`end_headers` call."
msgstr ""
"将一个响应标头添加到标头缓冲区并记录被接受的请求。 HTTP 响应行会被写入到内部缓冲区，后面是 *Server* 和 *Date* 标头。 "
"这两个标头的值将分别通过 :meth:`version_string` 和 :meth:`date_time_string` 方法获取。 "
"如果服务器不打算使用 :meth:`send_header` 方法发送任何其他标头，则 :meth:`send_response` 后面应该跟一个 "
":meth:`end_headers` 调用。"

#: ../../library/http.server.rst:238
msgid ""
"Headers are stored to an internal buffer and :meth:`end_headers` needs to be"
" called explicitly."
msgstr "标头会被存储到内部缓冲区并且需要显式地调用 :meth:`end_headers`。"

#: ../../library/http.server.rst:244
msgid ""
"Adds the HTTP header to an internal buffer which will be written to the "
"output stream when either :meth:`end_headers` or :meth:`flush_headers` is "
"invoked. *keyword* should specify the header keyword, with *value* "
"specifying its value. Note that, after the send_header calls are done, "
":meth:`end_headers` MUST BE called in order to complete the operation."
msgstr ""
"将 HTTP 标头添加到内部缓冲区，它将在 :meth:`end_headers` 或 :meth:`flush_headers` 被唤起时写入输出流。"
" *keyword* 应当指定标头关键字，并以 *value* 指定其值。 请注意，在 send_header 调用结束之后，必须调用 "
":meth:`end_headers` 以便完成操作。"

#: ../../library/http.server.rst:250
msgid "Headers are stored in an internal buffer."
msgstr "标头将被存入内部缓冲区。"

#: ../../library/http.server.rst:255
msgid ""
"Sends the response header only, used for the purposes when ``100 Continue`` "
"response is sent by the server to the client. The headers not buffered and "
"sent directly the output stream.If the *message* is not specified, the HTTP "
"message corresponding the response *code*  is sent."
msgstr ""
"只发送响应标头，用于当 ``100 Continue`` 响应被服务器发送给客户端的场合。 标头不会被缓冲而是直接发送到输出流。 如果未指定 "
"*message*，则会发送与响应 *code*  相对应的 HTTP 消息。"

#: ../../library/http.server.rst:264
msgid ""
"Adds a blank line (indicating the end of the HTTP headers in the response) "
"to the headers buffer and calls :meth:`flush_headers`."
msgstr "将一个空行（指明响应中 HTTP 标头的结束) 添加到标头缓冲区并调用 :meth:`flush_headers`。"

#: ../../library/http.server.rst:268
msgid "The buffered headers are written to the output stream."
msgstr "已缓冲的标头会被写入到输出流。"

#: ../../library/http.server.rst:273
msgid ""
"Finally send the headers to the output stream and flush the internal headers"
" buffer."
msgstr "最终将标头发送到输出流并清空内部标头缓冲区。"

#: ../../library/http.server.rst:280
msgid ""
"Logs an accepted (successful) request. *code* should specify the numeric "
"HTTP code associated with the response. If a size of the response is "
"available, then it should be passed as the *size* parameter."
msgstr ""
"记录一次被接受（成功）的请求。 *code* 应当指定与请求相关联的 HTTP 代码。 如果请求的大小可用，则它应当作为 *size* 形参传入。"

#: ../../library/http.server.rst:286
msgid ""
"Logs an error when a request cannot be fulfilled. By default, it passes the "
"message to :meth:`log_message`, so it takes the same arguments (*format* and"
" additional values)."
msgstr ""
"当请求无法完成时记录一次错误。 默认情况下，它会将消息传给 :meth:`log_message`，因此它接受同样的参数 (*format* "
"和一些额外的值)。"

#: ../../library/http.server.rst:293
msgid ""
"Logs an arbitrary message to ``sys.stderr``. This is typically overridden to"
" create custom error logging mechanisms. The *format* argument is a standard"
" printf-style format string, where the additional arguments to "
":meth:`log_message` are applied as inputs to the formatting. The client ip "
"address and current date and time are prefixed to every message logged."
msgstr ""
"将任意一条消息记录到 ``sys.stderr``。 此方法通常会被重写以创建自定义的错误日志记录机制。 *format* 参数是标准 printf "
"风格的格式字符串，其中会将传给 :meth:`log_message` 的额外参数用作格式化操作的输入。 每条消息日志记录的开头都会加上客户端 IP "
"地址和当前日期时间。"

#: ../../library/http.server.rst:301
msgid ""
"Returns the server software's version string. This is a combination of the "
":attr:`server_version` and :attr:`sys_version` attributes."
msgstr ""
"返回服务器软件的版本字符串。 该值为 :attr:`server_version` 与 :attr:`sys_version` 属性的组合。"

#: ../../library/http.server.rst:306
msgid ""
"Returns the date and time given by *timestamp* (which must be ``None`` or in"
" the format returned by :func:`time.time`), formatted for a message header. "
"If *timestamp* is omitted, it uses the current date and time."
msgstr ""
"返回由 *timestamp* 所给定的日期和时间（参数应为 ``None`` 或为 :func:`time.time` "
"所返回的格式），格式化为一个消息标头。 如果省略 *timestamp*，则会使用当前日期和时间。"

#: ../../library/http.server.rst:310
msgid "The result looks like ``'Sun, 06 Nov 1994 08:49:37 GMT'``."
msgstr "结果看起来像 ``'Sun, 06 Nov 1994 08:49:37 GMT'``。"

#: ../../library/http.server.rst:314
msgid "Returns the current date and time, formatted for logging."
msgstr "返回当前的日期和时间，为日志格式化"

#: ../../library/http.server.rst:318
msgid "Returns the client address."
msgstr "返回客户端的地址"

#: ../../library/http.server.rst:320
msgid ""
"Previously, a name lookup was performed. To avoid name resolution delays, it"
" now always returns the IP address."
msgstr "在之前版本中，会执行一次名称查找。 为了避免名称解析的时延，现在将总是返回 IP 地址。"

#: ../../library/http.server.rst:327
msgid ""
"This class serves files from the directory *directory* and below, or the "
"current directory if *directory* is not provided, directly mapping the "
"directory structure to HTTP requests."
msgstr ""
"这个类会为目录 *directory* 及以下的文件提供发布服务，或者如果未提供 *directory* 则为当前目录，直接将目录结构映射到 HTTP "
"请求。"

#: ../../library/http.server.rst:331
msgid "Added the *directory* parameter."
msgstr "增加了 *directory* 形参。"

#: ../../library/http.server.rst:334
msgid "The *directory* parameter accepts a :term:`path-like object`."
msgstr "*directory* 形参接受一个 :term:`path-like object`。"

#: ../../library/http.server.rst:337
msgid ""
"A lot of the work, such as parsing the request, is done by the base class "
":class:`BaseHTTPRequestHandler`.  This class implements the :func:`do_GET` "
"and :func:`do_HEAD` functions."
msgstr ""
"诸如解析请求之类的大量工作都是由基类 :class:`BaseHTTPRequestHandler` 完成的。本类实现了 :func:`do_GET` "
"和 :func:`do_HEAD` 函数。"

#: ../../library/http.server.rst:341
msgid ""
"The following are defined as class-level attributes of "
":class:`SimpleHTTPRequestHandler`:"
msgstr "以下是 :class:`SimpleHTTPRequestHandler` 的类属性。"

#: ../../library/http.server.rst:346
msgid ""
"This will be ``\"SimpleHTTP/\" + __version__``, where ``__version__`` is "
"defined at the module level."
msgstr "这会是 ``\"SimpleHTTP/\" + __version__``，其中 ``__version__`` 定义于模块级别。"

#: ../../library/http.server.rst:351
msgid ""
"A dictionary mapping suffixes into MIME types, contains custom overrides for"
" the default system mappings. The mapping is used case-insensitively, and so"
" should contain only lower-cased keys."
msgstr "将后缀映射为 MIME 类型的字典，其中包含了覆盖系统默认值的自定义映射关系。不区分大小写，因此字典键只应为小写值。"

#: ../../library/http.server.rst:355
msgid ""
"This dictionary is no longer filled with the default system mappings, but "
"only contains overrides."
msgstr "此字典不再填充默认的系统映射，而只包含覆盖值。"

#: ../../library/http.server.rst:359
msgid ""
"The :class:`SimpleHTTPRequestHandler` class defines the following methods:"
msgstr ":class:`SimpleHTTPRequestHandler` 类定义了以下方法："

#: ../../library/http.server.rst:363
msgid ""
"This method serves the ``'HEAD'`` request type: it sends the headers it "
"would send for the equivalent ``GET`` request. See the :meth:`do_GET` method"
" for a more complete explanation of the possible headers."
msgstr ""
"本方法为 ``'HEAD'`` 请求提供服务：它将发送等同于 ``GET`` 请求的头文件。关于合法头部信息的更完整解释，请参阅 "
":meth:`do_GET` 方法。"

#: ../../library/http.server.rst:369
msgid ""
"The request is mapped to a local file by interpreting the request as a path "
"relative to the current working directory."
msgstr "通过将请求解释为相对于当前工作目录的路径，将请求映射到某个本地文件。"

#: ../../library/http.server.rst:372
msgid ""
"If the request was mapped to a directory, the directory is checked for a "
"file named ``index.html`` or ``index.htm`` (in that order). If found, the "
"file's contents are returned; otherwise a directory listing is generated by "
"calling the :meth:`list_directory` method. This method uses "
":func:`os.listdir` to scan the directory, and returns a ``404`` error "
"response if the :func:`~os.listdir` fails."
msgstr ""
"如果请求被映射到目录，则会依次检查该目录是否存在 ``index.html`` 或 ``index.htm`` 文件。若存在则返回文件内容；否则会调用"
"  :meth:`list_directory` 方法生成目录列表。本方法将利用 :func:`os.listdir` 扫描目录，如果 "
":func:`~os.listdir` 失败，则返回 ``404`` 出错应答。"

#: ../../library/http.server.rst:379
msgid ""
"If the request was mapped to a file, it is opened. Any :exc:`OSError` "
"exception in opening the requested file is mapped to a ``404``, ``'File not "
"found'`` error. If there was an ``'If-Modified-Since'`` header in the "
"request, and the file was not modified after this time, a ``304``, ``'Not "
"Modified'`` response is sent. Otherwise, the content type is guessed by "
"calling the :meth:`guess_type` method, which in turn uses the "
"*extensions_map* variable, and the file contents are returned."
msgstr ""
"如果请求被映射到文件，则会打开该文件。 打开文件时的任何 :exc:`OSError` 异常都会被映射为 ``404``, ``'File not "
"found'`` 错误。 如果请求中带有 ``'If-Modified-Since'`` 标头，而在此时间点之后文件未作修改，则会发送 ``304``,"
" ``'Not Modified'`` 的响应。 否则会调用 :meth:`guess_type` 方法猜测内容的类型，该方法会反过来用到 "
"*extensions_map* 变量，并返回文件内容。"

#: ../../library/http.server.rst:387
msgid ""
"A ``'Content-type:'`` header with the guessed content type is output, "
"followed by a ``'Content-Length:'`` header with the file's size and a "
"``'Last-Modified:'`` header with the file's modification time."
msgstr ""
"将会输出 ``'Content-type:'`` 头部信息，带上猜出的内容类型，然后是 ``'Content-Length:'`` "
"头部信息，带有文件的大小，以及 ``'Last-Modified:'`` 头部信息，带有文件的修改时间。"

#: ../../library/http.server.rst:391
msgid ""
"Then follows a blank line signifying the end of the headers, and then the "
"contents of the file are output."
msgstr "随后跟一个空行来指明标头的结束，再随后是输出文件内容。"

#: ../../library/http.server.rst:394
msgid ""
"For example usage, see the implementation of the ``test`` function in "
":source:`Lib/http/server.py`."
msgstr "示例用法请见在 :source:`Lib/http/server.py` 中 ``test`` 函数的实现。"

#: ../../library/http.server.rst:397
msgid "Support of the ``'If-Modified-Since'`` header."
msgstr "为 ``'If-Modified-Since'`` 头部信息提供支持。"

#: ../../library/http.server.rst:400
msgid ""
"The :class:`SimpleHTTPRequestHandler` class can be used in the following "
"manner in order to create a very basic webserver serving files relative to "
"the current directory::"
msgstr ""
":class:`SimpleHTTPRequestHandler` 类的用法可如下所示，以便创建一个非常简单的 Web "
"服务，为相对于当前目录的文件提供服务："

#: ../../library/http.server.rst:404
msgid ""
"import http.server\n"
"import socketserver\n"
"\n"
"PORT = 8000\n"
"\n"
"Handler = http.server.SimpleHTTPRequestHandler\n"
"\n"
"with socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n"
"    print(\"serving at port\", PORT)\n"
"    httpd.serve_forever()"
msgstr ""
"import http.server\n"
"import socketserver\n"
"\n"
"PORT = 8000\n"
"\n"
"Handler = http.server.SimpleHTTPRequestHandler\n"
"\n"
"with socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n"
"    print(\"serving at port\", PORT)\n"
"    httpd.serve_forever()"

#: ../../library/http.server.rst:416
msgid ""
":class:`SimpleHTTPRequestHandler` can also be subclassed to enhance "
"behavior, such as using different index file names by overriding the class "
"attribute :attr:`index_pages`."
msgstr ""
":class:`SimpleHTTPRequestHandler` 也可以被子类化以便增强其行为，例如通过重写类属性 "
":attr:`index_pages` 以使用不同的 index 文件名。"

#: ../../library/http.server.rst:423
msgid ""
"This class is used to serve either files or output of CGI scripts from the "
"current directory and below. Note that mapping HTTP hierarchic structure to "
"local directory structure is exactly as in "
":class:`SimpleHTTPRequestHandler`."
msgstr ""
"该类可为当前及以下目录中的文件或输出 CGI 脚本提供服务。注意，把 HTTP 分层结构映射到本地目录结构，这与 "
":class:`SimpleHTTPRequestHandler` 完全一样。"

#: ../../library/http.server.rst:429
msgid ""
"CGI scripts run by the :class:`CGIHTTPRequestHandler` class cannot execute "
"redirects (HTTP code 302), because code 200 (script output follows) is sent "
"prior to execution of the CGI script.  This pre-empts the status code."
msgstr ""
"由 :class:`CGIHTTPRequestHandler` 类运行的 CGI 脚本不能进行重定向操作（HTTP 代码302），因为在执行 CGI "
"脚本之前会发送代码 200（接下来就输出脚本）。这样状态码就冲突了。"

#: ../../library/http.server.rst:434
msgid ""
"The class will however, run the CGI script, instead of serving it as a file,"
" if it guesses it to be a CGI script.  Only directory-based CGI are used ---"
" the other common server configuration is to treat special extensions as "
"denoting CGI scripts."
msgstr ""
"然而，如果这个类猜测它是一个 CGI 脚本，那么就会运行该 CGI 脚本，而不是作为文件提供出去。 只会识别基于目录的 CGI —— "
"另有一种常用的服务器设置，即标识 CGI 脚本是通过特殊的扩展名。"

#: ../../library/http.server.rst:439
msgid ""
"The :func:`do_GET` and :func:`do_HEAD` functions are modified to run CGI "
"scripts and serve the output, instead of serving files, if the request leads"
" to somewhere below the ``cgi_directories`` path."
msgstr ""
"如果请求指向 ``cgi_directories`` 以下的路径，:func:`do_GET` 和 :func:`do_HEAD` "
"函数已作修改，不是给出文件，而是运行 CGI 脚本并输出结果。"

#: ../../library/http.server.rst:443
msgid "The :class:`CGIHTTPRequestHandler` defines the following data member:"
msgstr ":class:`CGIHTTPRequestHandler` 定义了以下数据成员："

#: ../../library/http.server.rst:447
msgid ""
"This defaults to ``['/cgi-bin', '/htbin']`` and describes directories to "
"treat as containing CGI scripts."
msgstr "默认为 ``['/cgi-bin', '/htbin']``，视作 CGI 脚本所在目录。"

#: ../../library/http.server.rst:450
msgid "The :class:`CGIHTTPRequestHandler` defines the following method:"
msgstr ":class:`CGIHTTPRequestHandler` 定义了以下方法："

#: ../../library/http.server.rst:454
msgid ""
"This method serves the ``'POST'`` request type, only allowed for CGI "
"scripts.  Error 501, \"Can only POST to CGI scripts\", is output when trying"
" to POST to a non-CGI url."
msgstr ""
"本方法服务于  ``'POST'`` 请求，仅用于 CGI 脚本。如果试图向非 CGI 网址发送 POST 请求，则会输出错误 501：Can only"
" POST to CGI scripts\"。"

#: ../../library/http.server.rst:458
msgid ""
"Note that CGI scripts will be run with UID of user nobody, for security "
"reasons.  Problems with the CGI script will be translated to error 403."
msgstr "请注意，为了保证安全性，CGI 脚本将以用户 nobody 的 UID 运行。CGI 脚本运行错误将被转换为错误 403。"

#: ../../library/http.server.rst:463
msgid ""
":class:`CGIHTTPRequestHandler` is being removed in 3.15.  CGI has not been "
"considered a good way to do things for well over a decade. This code has "
"been unmaintained for a while now and sees very little practical use. "
"Retaining it could lead to further :ref:`security considerations "
"<http.server-security>`."
msgstr ""
":class:`CGIHTTPRequestHandler` 将在 3.15 中移除。 早在十多年前 CGI 就已不被认为是一个好的解决方案。 "
"目前此代码已长期未得到维护并且极少被实际使用。 保留它可能导致进一步的 :ref:`安全考量 <http.server-security>`。"

#: ../../library/http.server.rst:473
msgid "Command-line interface"
msgstr "命令行接口"

#: ../../library/http.server.rst:475
msgid ""
":mod:`http.server` can also be invoked directly using the :option:`-m` "
"switch of the interpreter.  The following example illustrates how to serve "
"files relative to the current directory::"
msgstr ""
":mod:`http.server` 也可使用解释器的 :option:`-m` 开关来直接唤起。 "
"下面的例子演示了如何以当前目录作为相对起点来发布文件::"

#: ../../library/http.server.rst:479
msgid "python -m http.server [OPTIONS] [port]"
msgstr "python -m http.server [OPTIONS] [port]"

#: ../../library/http.server.rst:481
msgid "The following options are accepted:"
msgstr "可以接受以下选项："

#: ../../library/http.server.rst:487
msgid ""
"The server listens to port 8000 by default. The default can be overridden by"
" passing the desired port number as an argument::"
msgstr "服务器默认监听端口为8000。可以通过传递所需的端口号作为参数来覆盖默认值::"

#: ../../library/http.server.rst:490
msgid "python -m http.server 9000"
msgstr "python -m http.server 9000"

#: ../../library/http.server.rst:494
msgid ""
"Specifies a specific address to which it should bind. Both IPv4 and IPv6 "
"addresses are supported. By default, the server binds itself to all "
"interfaces. For example, the following command causes the server to bind to "
"localhost only::"
msgstr ""
"指定一个它要绑定的特定地址。 IPv4 和 IPv6 地址均受到支持。 在默认情况下，服务器会将自己绑定到所有接口。 例如，以下命令将使服务器仅绑定 "
"localhost::"

#: ../../library/http.server.rst:499
msgid "python -m http.server --bind 127.0.0.1"
msgstr "python -m http.server --bind 127.0.0.1"

#: ../../library/http.server.rst:503
msgid "Support IPv6 in the ``--bind`` option."
msgstr "在 ``--bind`` 选项中支持 IPv6。"

#: ../../library/http.server.rst:508
msgid ""
"Specifies a directory to which it should serve the files. By default, the "
"server uses the current directory. For example, the following command uses a"
" specific directory::"
msgstr "指定一个它要提供文件服务的目录。 在默认情况下，服务器会使用当前目录。 例如，以下命令将使用一个特定地址::"

#: ../../library/http.server.rst:512
msgid "python -m http.server --directory /tmp/"
msgstr "python -m http.server --directory /tmp/"

#: ../../library/http.server.rst:518
msgid ""
"Specifies the HTTP version to which the server is conformant. By default, "
"the server is conformant to HTTP/1.0. For example, the following command "
"runs an HTTP/1.1 conformant server::"
msgstr ""
"指定一个服务器所采用的 HTTP 版本。 在默认情况下，服务器会采用 HTTP/1.0。 例如，以下命令将运行一个采用 HTTP/1.1 的服务器::"

#: ../../library/http.server.rst:522
msgid "python -m http.server --protocol HTTP/1.1"
msgstr "python -m http.server --protocol HTTP/1.1"

#: ../../library/http.server.rst:528
msgid ""
":class:`CGIHTTPRequestHandler` can be enabled in the command line by passing"
" the ``--cgi`` option::"
msgstr "通过在命令行传入 ``--cgi`` 参数，可以启用  :class:`CGIHTTPRequestHandler` ："

#: ../../library/http.server.rst:531
msgid "python -m http.server --cgi"
msgstr "python -m http.server --cgi"

#: ../../library/http.server.rst:535
msgid ""
":mod:`http.server` command line ``--cgi`` support is being removed because "
":class:`CGIHTTPRequestHandler` is being removed."
msgstr ""
":mod:`http.server` 命令行的 ``--cgi`` 支持已被移除因为 :class:`CGIHTTPRequestHandler` "
"将要被移除。"

#: ../../library/http.server.rst:540
msgid ""
":class:`CGIHTTPRequestHandler` and the ``--cgi`` command-line option are not"
" intended for use by untrusted clients and may be vulnerable to "
"exploitation. Always use within a secure environment."
msgstr ""
":class:`CGIHTTPRequestHandler` 和 ``--cgi`` 命令行选项不适合不受信任的客户端使用且容易被恶意利用。 "
"应当始终在安全的环境中使用。"

#: ../../library/http.server.rst:548
msgid "Security considerations"
msgstr "安全考量"

#: ../../library/http.server.rst:552
msgid ""
":class:`SimpleHTTPRequestHandler` will follow symbolic links when handling "
"requests, this makes it possible for files outside of the specified "
"directory to be served."
msgstr "当处理请求时，:class:`SimpleHTTPRequestHandler` 会解析符号链接，这有可能使得指定文件夹以外的文件被暴露。"

#: ../../library/http.server.rst:556
msgid ""
"Earlier versions of Python did not scrub control characters from the log "
"messages emitted to stderr from ``python -m http.server`` or the default "
":class:`BaseHTTPRequestHandler` ``.log_message`` implementation. This could "
"allow remote clients connecting to your server to send nefarious control "
"codes to your terminal."
msgstr ""
"较早版本的 Python 不会擦除从 ``python -m http.server`` 或默认的 "
":class:`BaseHTTPRequestHandler` ``.log_message`` 实现发送到 stderr 的日志消息中的控制字符。 "
"这可以允许连接到你的服务器的远程客户端向你的终端发送邪恶的控制代码。"

#: ../../library/http.server.rst:562
msgid "Control characters are scrubbed in stderr logs."
msgstr "控制字符会在 stderr 日志中被擦除。"

#: ../../library/http.server.rst:9
msgid "WWW"
msgstr "WWW"

#: ../../library/http.server.rst:9
msgid "server"
msgstr "服务器"

#: ../../library/http.server.rst:9
msgid "HTTP"
msgstr "HTTP"

#: ../../library/http.server.rst:9
msgid "protocol"
msgstr "协议"

#: ../../library/http.server.rst:9
msgid "URL"
msgstr "网址"

#: ../../library/http.server.rst:9
msgid "httpd"
msgstr "httpd"

#: ../../library/http.server.rst:550
msgid "http.server"
msgstr "http.server"

#: ../../library/http.server.rst:550
msgid "security"
msgstr "安全"
