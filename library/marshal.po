# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/marshal.rst:2
msgid ":mod:`!marshal` --- Internal Python object serialization"
msgstr ":mod:`!marshal` --- 内部 Python 对象序列化"

#: ../../library/marshal.rst:10
msgid ""
"This module contains functions that can read and write Python values in a "
"binary format.  The format is specific to Python, but independent of machine"
" architecture issues (e.g., you can write a Python value to a file on a PC, "
"transport the file to a Mac, and read it back there).  Details of the format"
" are undocumented on purpose; it may change between Python versions "
"(although it rarely does). [#]_"
msgstr ""
"此模块包含一些能以二进制格式来读写 Python 值的函数。 这种格式是 Python 专属的，但是独立于特定的机器架构（即你可以在一台 PC "
"上写入某个 Python 值，将文件传到一台 Mac 上并在那里读取它）。 这种格式的细节有意不带文档说明；可可能在不同 Python "
"版本之间发生改变（但这种情况极少发生）。 [#]_"

#: ../../library/marshal.rst:21
msgid ""
"This is not a general \"persistence\" module.  For general persistence and "
"transfer of Python objects through RPC calls, see the modules :mod:`pickle` "
"and :mod:`shelve`.  The :mod:`marshal` module exists mainly to support "
"reading and writing the \"pseudo-compiled\" code for Python modules of "
":file:`.pyc` files. Therefore, the Python maintainers reserve the right to "
"modify the marshal format in backward incompatible ways should the need "
"arise. The format of code objects is not compatible between Python versions,"
" even if the version of the format is the same. De-serializing a code object"
" in the incorrect Python version has undefined behavior. If you're "
"serializing and de-serializing Python objects, use the :mod:`pickle` module "
"instead -- the performance is comparable, version independence is "
"guaranteed, and pickle supports a substantially wider range of objects than "
"marshal."
msgstr ""
"这不是一个通用的“持久化”模块。 对于通用的持久化以及通过 RPC 调用传递 Python 对象，请参阅 :mod:`pickle` 和 "
":mod:`shelve` 等模块。 提供 :mod:`marshal` 模块主要是为了支持读写 :file:`.pyc` 形式“伪编译”代码的 "
"Python 模块。 因此，Python 维护者保留在必要时以不向下兼容的方式修改 marshal 格式的权利。 代码对象的格式在 Python "
"版本之间不保证兼容，即使格式的版本是相同的。 在不正确的 Python 版本中反序列化代码对象是未定义的行为。 如果你要序列化和反序列化 Python "
"对象，请改用 :mod:`pickle` 模块 —— 具有类似的性能，保证版本独立性，并且 pickle 还支持比 marshal 更丰富种类的对象。"

#: ../../library/marshal.rst:37
msgid ""
"The :mod:`marshal` module is not intended to be secure against erroneous or "
"maliciously constructed data.  Never unmarshal data received from an "
"untrusted or unauthenticated source."
msgstr ""
":mod:`marshal` 模块对于错误或恶意构建的数据来说是不安全的。 永远不要 unmarshal 来自不受信任的或未经验证的来源的数据。"

#: ../../library/marshal.rst:41
msgid ""
"There are functions that read/write files as well as functions operating on "
"bytes-like objects."
msgstr "有些函数可以读/写文件，还有些函数可以操作字节类对象。"

#: ../../library/marshal.rst:46
msgid ""
"Not all Python object types are supported; in general, only objects whose "
"value is independent from a particular invocation of Python can be written "
"and read by this module.  The following types are supported:"
msgstr "并非所有Python对象类型都受支持；一般来说，只有其值独立于Python特定调用的对象才能被此模块写入和读取。支持以下类型："

#: ../../library/marshal.rst:50
msgid ""
"Numeric types: :class:`int`, :class:`bool`, :class:`float`, "
":class:`complex`."
msgstr "数值类型：:class:`int`、:class:`bool`、:class:`float`、:class:`complex`。"

#: ../../library/marshal.rst:51
msgid ""
"Strings (:class:`str`) and :class:`bytes`. :term:`Bytes-like objects <bytes-"
"like object>` like :class:`bytearray` are marshalled as :class:`!bytes`."
msgstr ""
"字符串 (:class:`str`) 和 :class:`bytes`。 :term:`字节型对象 <bytes-like object>` 如 "
":class:`bytearray` 被序列化为 :class:`!bytes`。"

#: ../../library/marshal.rst:54
msgid ""
"Containers: :class:`tuple`, :class:`list`, :class:`set`, :class:`frozenset`,"
" and (since :data:`version` 5), :class:`slice`. It should be understood that"
" these are supported only if the values contained therein are themselves "
"supported. Recursive containers are supported since :data:`version` 3."
msgstr ""
"容器: :class:`tuple`、:class:`list`、:class:`set`、:class:`frozenset` 和 "
":class:`slice` (从 :data:`version` 5 开始)。 应当理解的是，只有当容器中包含的值本身得到支持时，才支持这些容器。 从"
" :data:`version` 3 开始支持递归容器。"

#: ../../library/marshal.rst:59
msgid ""
"The singletons :const:`None`, :const:`Ellipsis` and :exc:`StopIteration`."
msgstr "单例：:const:`None`、 :const:`Ellipsis` 和 :exc:`StopIteration`。"

#: ../../library/marshal.rst:60
msgid ""
":class:`code` objects, if *allow_code* is true. See note above about version"
" dependence."
msgstr ":class:`code` 对象，如果 *allow_code* 为真值。 请参阅上面关于版本依赖性的说明。"

#: ../../library/marshal.rst:65
msgid ""
"Added format version 3, which supports marshalling recursive lists, sets and"
" dictionaries."
msgstr "增加了格式版本3，支持序列化递归列表、集合和字典。"

#: ../../library/marshal.rst:67
msgid ""
"Added format version 4, which supports efficient representations of short "
"strings."
msgstr "增加了格式版本4，支持短字符串的有效表示。"

#: ../../library/marshal.rst:72
msgid "Added format version 5, which allows marshalling slices."
msgstr "增加了格式版本5，支持切片。"

#: ../../library/marshal.rst:75
msgid "The module defines these functions:"
msgstr "这个模块定义了以下函数："

#: ../../library/marshal.rst:80
msgid ""
"Write the value on the open file.  The value must be a supported type.  The "
"file must be a writeable :term:`binary file`."
msgstr "向打开的文件写入值。 值必须为受支持的类型。 文件必须为可写的 :term:`binary file`。"

#: ../../library/marshal.rst:83
msgid ""
"If the value has (or contains an object that has) an unsupported type, a "
":exc:`ValueError` exception is raised --- but garbage data will also be "
"written to the file.  The object will not be properly read back by "
":func:`load`. :ref:`Code objects <code-objects>` are only supported if "
"*allow_code* is true."
msgstr ""
"如果值具有（或其包含的对象具有）不受支持的类型，则会引发 :exc:`ValueError` 异常 --- 但还是会向文件写入垃圾数据。 对象将不能使用"
" :func:`load` 正确地重新读取。 :ref:`代码对象 <code-objects>` 仅在 *allow_code* 为真值时受到支持。"

#: ../../library/marshal.rst:88
msgid ""
"The *version* argument indicates the data format that ``dump`` should use "
"(see below)."
msgstr "*version* 参数指明 ``dump`` 应当使用的数据格式（见下文）。"

#: ../../library/marshal.rst:91 ../../library/marshal.rst:131
msgid ""
"Raises an :ref:`auditing event <auditing>` ``marshal.dumps`` with arguments "
"``value``, ``version``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``marshal.dumps`` 并附带参数 ``value``, ``version``。"

#: ../../library/marshal.rst:93 ../../library/marshal.rst:117
#: ../../library/marshal.rst:133 ../../library/marshal.rst:151
msgid "Added the *allow_code* parameter."
msgstr "增加了 *allow_code* 形参。"

#: ../../library/marshal.rst:99
msgid ""
"Read one value from the open file and return it.  If no valid value is read "
"(e.g. because the data has a different Python version's incompatible marshal"
" format), raise :exc:`EOFError`, :exc:`ValueError` or :exc:`TypeError`. "
":ref:`Code objects <code-objects>` are only supported if *allow_code* is "
"true. The file must be a readable :term:`binary file`."
msgstr ""
"从打开的文件读取一个值并返回它。 如果没有读取到有效的值（例如由于数据具有来自不同 Python 版本的不兼容的 marshal 格式），则会引发 "
":exc:`EOFError`, :exc:`ValueError` 或 :exc:`TypeError`。 :ref:`代码对象 <code-"
"objects>` 仅在 *allow_code* 为真值时受到支持。 文件必须为可读的 :term:`binary file`。"

#: ../../library/marshal.rst:105
msgid ""
"Raises an :ref:`auditing event <auditing>` ``marshal.load`` with no "
"arguments."
msgstr "引发一个不带参数的 :ref:`审计事件 <auditing>` ``marshal.load``。"

#: ../../library/marshal.rst:109
msgid ""
"If an object containing an unsupported type was marshalled with "
":func:`dump`, :func:`load` will substitute ``None`` for the unmarshallable "
"type."
msgstr ""
"如果通过 :func:`dump` marshal 了一个包含不受支持类型的对象，:func:`load` 将为不可 marshal 的类型替换 "
"``None``。"

#: ../../library/marshal.rst:114
msgid ""
"This call used to raise a ``code.__new__`` audit event for each code object."
" Now it raises a single ``marshal.load`` event for the entire load "
"operation."
msgstr ""
"使用此调用为每个代码对象引发一个 ``code.__new__`` 审计事件。 现在它会为整个载入操作引发单个 ``marshal.load`` 事件。"

#: ../../library/marshal.rst:123
msgid ""
"Return the bytes object that would be written to a file by ``dump(value, "
"file)``.  The value must be a supported type.  Raise a :exc:`ValueError` "
"exception if value has (or contains an object that has) an unsupported type."
" :ref:`Code objects <code-objects>` are only supported if *allow_code* is "
"true."
msgstr ""
"返回将通过 ``dump(value, file)`` 写入到文件的字节串对象。 值必须是受支持的类型。 "
"如果值具有（或其包含的对象具有）不受支持的类型则会引发 :exc:`ValueError` 异常。 :ref:`代码对象 <code-objects>`"
" 仅在 *allow_code* 为真值时受到支持。"

#: ../../library/marshal.rst:128
msgid ""
"The *version* argument indicates the data format that ``dumps`` should use "
"(see below)."
msgstr "*version* 参数指明 ``dumps`` 应当使用的数据类型（见下文）。"

#: ../../library/marshal.rst:139
msgid ""
"Convert the :term:`bytes-like object` to a value.  If no valid value is "
"found, raise :exc:`EOFError`, :exc:`ValueError` or :exc:`TypeError`. "
":ref:`Code objects <code-objects>` are only supported if *allow_code* is "
"true. Extra bytes in the input are ignored."
msgstr ""
"将 :term:`bytes-like object` 转换为一个值。 如果找不到有效的值，则会引发 :exc:`EOFError`, "
":exc:`ValueError` 或 :exc:`TypeError`。 :ref:`代码对象 <code-objects>` 仅在 "
"*allow_code* 为真值时受支持。 输入的额外字节串会被忽略。"

#: ../../library/marshal.rst:144
msgid ""
"Raises an :ref:`auditing event <auditing>` ``marshal.loads`` with argument "
"``bytes``."
msgstr "引发一个 :ref:`审计事件 <auditing>` ``marshal.loads`` 并附带参数 ``bytes``。"

#: ../../library/marshal.rst:148
msgid ""
"This call used to raise a ``code.__new__`` audit event for each code object."
" Now it raises a single ``marshal.loads`` event for the entire load "
"operation."
msgstr ""
"使用此调用为每个代码对象引发一个 ``code.__new__`` 审计事件。 现在它会为整个载入操作引发单个 ``marshal.loads`` "
"事件。"

#: ../../library/marshal.rst:155
msgid "In addition, the following constants are defined:"
msgstr "此外，还定义了以下常量："

#: ../../library/marshal.rst:159
msgid ""
"Indicates the format that the module uses. Version 0 is the historical first"
" version; subsequent versions add new features. Generally, a new version "
"becomes the default when it is introduced."
msgstr "指明该模块使用的格式。版本0是历史上的第一个版本；后续版本添加了新特性。通常，新版本在引入时就会成为默认版本。"

#: ../../library/marshal.rst:165
msgid "Version"
msgstr "版本"

#: ../../library/marshal.rst:165
msgid "Available since"
msgstr "可用始于"

#: ../../library/marshal.rst:165
msgid "New features"
msgstr "新的特性"

#: ../../library/marshal.rst:167
msgid "1"
msgstr "1"

#: ../../library/marshal.rst:167
msgid "Python 2.4"
msgstr "Python 2.4"

#: ../../library/marshal.rst:167
msgid "Sharing interned strings"
msgstr "共享互联字符串"

#: ../../library/marshal.rst:169
msgid "2"
msgstr "2"

#: ../../library/marshal.rst:169
msgid "Python 2.5"
msgstr "Python 2.5"

#: ../../library/marshal.rst:169
msgid "Binary representation of floats"
msgstr "浮点数的二进制表示"

#: ../../library/marshal.rst:171
msgid "3"
msgstr "3"

#: ../../library/marshal.rst:171 ../../library/marshal.rst:173
msgid "Python 3.4"
msgstr "Python 3.4"

#: ../../library/marshal.rst:171
msgid "Support for object instancing and recursion"
msgstr "支持对象实例化和递归"

#: ../../library/marshal.rst:173
msgid "4"
msgstr "4"

#: ../../library/marshal.rst:173
msgid "Efficient representation of short strings"
msgstr "短字符串的有效表示"

#: ../../library/marshal.rst:175
msgid "5"
msgstr "5"

#: ../../library/marshal.rst:175
msgid "Python 3.14"
msgstr "Python 3.14"

#: ../../library/marshal.rst:175
msgid "Support for :class:`slice` objects"
msgstr "支持 :class:`slice` 对象"

#: ../../library/marshal.rst:180
msgid "Footnotes"
msgstr "备注"

#: ../../library/marshal.rst:181
msgid ""
"The name of this module stems from a bit of terminology used by the "
"designers of Modula-3 (amongst others), who use the term \"marshalling\" for"
" shipping of data around in a self-contained form. Strictly speaking, \"to "
"marshal\" means to convert some data from internal to external form (in an "
"RPC buffer for instance) and \"unmarshalling\" for the reverse process."
msgstr ""
"此模块的名称来源于 Modula-3 (及其他语言) 的设计者所使用的术语，他们使用术语 \"marshal\" 来表示以自包含的形式传输数据。 "
"严格地说，将数据从内部形式转换为外部形式 (例如用于 RPC 缓冲区) 称为 \"marshal\" 而其逆过程则称为 \"unmarshal\"。"

#: ../../library/marshal.rst:17
msgid "module"
msgstr "module"

#: ../../library/marshal.rst:17
msgid "pickle"
msgstr "pickle"

#: ../../library/marshal.rst:17
msgid "shelve"
msgstr "shelve"

#: ../../library/marshal.rst:44
msgid "object"
msgstr "object -- 对象"

#: ../../library/marshal.rst:44
msgid "code"
msgstr "code -- 代码"

#: ../../library/marshal.rst:44
msgid "code object"
msgstr "代码对象"
