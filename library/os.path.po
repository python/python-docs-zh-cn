# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/os.path.rst:2
msgid ":mod:`os.path` --- Common pathname manipulations"
msgstr ""

#: ../../library/os.path.rst:7
msgid ""
"**Source code:** :source:`Lib/posixpath.py` (for POSIX) and "
":source:`Lib/ntpath.py` (for Windows)."
msgstr ""

#: ../../library/os.path.rst:14
msgid ""
"This module implements some useful functions on pathnames. To read or write "
"files see :func:`open`, and for accessing the filesystem see the :mod:`os` "
"module. The path parameters can be passed as strings, or bytes, or any "
"object implementing the :class:`os.PathLike` protocol."
msgstr ""

#: ../../library/os.path.rst:19
msgid ""
"Unlike a Unix shell, Python does not do any *automatic* path expansions. "
"Functions such as :func:`expanduser` and :func:`expandvars` can be invoked "
"explicitly when an application desires shell-like path expansion.  (See also"
" the :mod:`glob` module.)"
msgstr ""

#: ../../library/os.path.rst:26
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ""

#: ../../library/os.path.rst:31
msgid ""
"All of these functions accept either only bytes or only string objects as "
"their parameters.  The result is an object of the same type, if a path or "
"file name is returned."
msgstr ""

#: ../../library/os.path.rst:37
msgid ""
"Since different operating systems have different path name conventions, "
"there are several versions of this module in the standard library.  The "
":mod:`os.path` module is always the path module suitable for the operating "
"system Python is running on, and therefore usable for local paths.  However,"
" you can also import and use the individual modules if you want to "
"manipulate a path that is *always* in one of the different formats.  They "
"all have the same interface:"
msgstr ""

#: ../../library/os.path.rst:45
msgid ":mod:`posixpath` for UNIX-style paths"
msgstr ""

#: ../../library/os.path.rst:46
msgid ":mod:`ntpath` for Windows paths"
msgstr ""

#: ../../library/os.path.rst:51
msgid ""
":func:`exists`, :func:`lexists`, :func:`isdir`, :func:`isfile`, "
":func:`islink`, and :func:`ismount` now return ``False`` instead of raising "
"an exception for paths that contain characters or bytes unrepresentable at "
"the OS level."
msgstr ""

#: ../../library/os.path.rst:59
msgid ""
"Return a normalized absolutized version of the pathname *path*. On most "
"platforms, this is equivalent to calling the function :func:`normpath` as "
"follows: ``normpath(join(os.getcwd(), path))``."
msgstr ""

#: ../../library/os.path.rst:63 ../../library/os.path.rst:76
#: ../../library/os.path.rst:116 ../../library/os.path.rst:125
#: ../../library/os.path.rst:141 ../../library/os.path.rst:151
#: ../../library/os.path.rst:177 ../../library/os.path.rst:197
#: ../../library/os.path.rst:214 ../../library/os.path.rst:226
#: ../../library/os.path.rst:235 ../../library/os.path.rst:245
#: ../../library/os.path.rst:255 ../../library/os.path.rst:265
#: ../../library/os.path.rst:275 ../../library/os.path.rst:294
#: ../../library/os.path.rst:325 ../../library/os.path.rst:345
#: ../../library/os.path.rst:384 ../../library/os.path.rst:415
#: ../../library/os.path.rst:433 ../../library/os.path.rst:446
#: ../../library/os.path.rst:462 ../../library/os.path.rst:478
#: ../../library/os.path.rst:503 ../../library/os.path.rst:534
msgid "Accepts a :term:`path-like object`."
msgstr ""

#: ../../library/os.path.rst:69
msgid ""
"Return the base name of pathname *path*.  This is the second element of the "
"pair returned by passing *path* to the function :func:`split`.  Note that "
"the result of this function is different from the Unix :program:`basename` "
"program; where :program:`basename` for ``'/foo/bar/'`` returns ``'bar'``, "
"the :func:`basename` function returns an empty string (``''``)."
msgstr ""

#: ../../library/os.path.rst:82
msgid ""
"Return the longest common sub-path of each pathname in the sequence *paths*."
"  Raise :exc:`ValueError` if *paths* contain both absolute and relative "
"pathnames, the *paths* are on the different drives or if *paths* is empty.  "
"Unlike :func:`commonprefix`, this returns a valid path."
msgstr ""

#: ../../library/os.path.rst:88 ../../library/os.path.rst:413
#: ../../library/os.path.rst:425 ../../library/os.path.rst:441
#: ../../library/os.path.rst:457
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ""

#: ../../library/os.path.rst:92
msgid "Accepts a sequence of :term:`path-like objects <path-like object>`."
msgstr ""

#: ../../library/os.path.rst:98
msgid ""
"Return the longest path prefix (taken character-by-character) that is a "
"prefix of all paths in  *list*.  If *list* is empty, return the empty string"
" (``''``)."
msgstr ""

#: ../../library/os.path.rst:104
msgid ""
"This function may return invalid paths because it works a character at a "
"time.  To obtain a valid path, see :func:`commonpath`."
msgstr ""

#: ../../library/os.path.rst:122
msgid ""
"Return the directory name of pathname *path*.  This is the first element of "
"the pair returned by passing *path* to the function :func:`split`."
msgstr ""

#: ../../library/os.path.rst:131
msgid ""
"Return ``True`` if *path* refers to an existing path or an open file "
"descriptor.  Returns ``False`` for broken symbolic links.  On some "
"platforms, this function may return ``False`` if permission is not granted "
"to execute :func:`os.stat` on the requested file, even if the *path* "
"physically exists."
msgstr ""

#: ../../library/os.path.rst:137
msgid ""
"*path* can now be an integer: ``True`` is returned if it is an  open file "
"descriptor, ``False`` otherwise."
msgstr ""

#: ../../library/os.path.rst:147
msgid ""
"Return ``True`` if *path* refers to an existing path. Returns ``True`` for "
"broken symbolic links.   Equivalent to :func:`exists` on platforms lacking "
":func:`os.lstat`."
msgstr ""

#: ../../library/os.path.rst:159
msgid ""
"On Unix and Windows, return the argument with an initial component of ``~`` "
"or ``~user`` replaced by that *user*'s home directory."
msgstr ""

#: ../../library/os.path.rst:164
msgid ""
"On Unix, an initial ``~`` is replaced by the environment variable "
":envvar:`HOME` if it is set; otherwise the current user's home directory is "
"looked up in the password directory through the built-in module :mod:`pwd`. "
"An initial ``~user`` is looked up directly in the password directory."
msgstr ""

#: ../../library/os.path.rst:169
msgid ""
"On Windows, :envvar:`USERPROFILE` will be used if set, otherwise a "
"combination of :envvar:`HOMEPATH` and :envvar:`HOMEDRIVE` will be used.  An "
"initial ``~user`` is handled by checking that the last directory component "
"of the current user's home directory matches :envvar:`USERNAME`, and "
"replacing it if so."
msgstr ""

#: ../../library/os.path.rst:174
msgid ""
"If the expansion fails or if the path does not begin with a tilde, the path "
"is returned unchanged."
msgstr ""

#: ../../library/os.path.rst:180
msgid "No longer uses :envvar:`HOME` on Windows."
msgstr ""

#: ../../library/os.path.rst:189
msgid ""
"Return the argument with environment variables expanded.  Substrings of the "
"form ``$name`` or ``${name}`` are replaced by the value of environment "
"variable *name*.  Malformed variable names and references to non-existing "
"variables are left unchanged."
msgstr ""

#: ../../library/os.path.rst:194
msgid ""
"On Windows, ``%name%`` expansions are supported in addition to ``$name`` and"
" ``${name}``."
msgstr ""

#: ../../library/os.path.rst:203
msgid ""
"Return the time of last access of *path*.  The return value is a floating "
"point number giving the number of seconds since the epoch (see the  "
":mod:`time` module).  Raise :exc:`OSError` if the file does not exist or is "
"inaccessible."
msgstr ""

#: ../../library/os.path.rst:210
msgid ""
"Return the time of last modification of *path*.  The return value is a "
"floating point number giving the number of seconds since the epoch (see the"
"  :mod:`time` module). Raise :exc:`OSError` if the file does not exist or is"
" inaccessible."
msgstr ""

#: ../../library/os.path.rst:220
msgid ""
"Return the system's ctime which, on some systems (like Unix) is the time of "
"the last metadata change, and, on others (like Windows), is the creation "
"time for *path*. The return value is a number giving the number of seconds "
"since the epoch (see the  :mod:`time` module).  Raise :exc:`OSError` if the "
"file does not exist or is inaccessible."
msgstr ""

#: ../../library/os.path.rst:232
msgid ""
"Return the size, in bytes, of *path*.  Raise :exc:`OSError` if the file does"
" not exist or is inaccessible."
msgstr ""

#: ../../library/os.path.rst:241
msgid ""
"Return ``True`` if *path* is an absolute pathname.  On Unix, that means it "
"begins with a slash, on Windows that it begins with a (back)slash after "
"chopping off a potential drive letter."
msgstr ""

#: ../../library/os.path.rst:251
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` regular file. This"
" follows symbolic links, so both :func:`islink` and :func:`isfile` can be "
"true for the same path."
msgstr ""

#: ../../library/os.path.rst:261
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` directory.  This "
"follows symbolic links, so both :func:`islink` and :func:`isdir` can be true"
" for the same path."
msgstr ""

#: ../../library/os.path.rst:271
msgid ""
"Return ``True`` if *path* refers to an :func:`existing <exists>` directory "
"entry that is a symbolic link.  Always ``False`` if symbolic links are not "
"supported by the Python runtime."
msgstr ""

#: ../../library/os.path.rst:281
msgid ""
"Return ``True`` if pathname *path* is a :dfn:`mount point`: a point in a "
"file system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`{path}/..`, is on a "
"different device than *path*, or whether :file:`{path}/..` and *path* point "
"to the same i-node on the same device --- this should detect mount points "
"for all Unix and POSIX variants.  It is not able to reliably detect bind "
"mounts on the same filesystem.  On Windows, a drive letter root and a share "
"UNC are always mount points, and for any other path ``GetVolumePathName`` is"
" called to see if it is different from the input path."
msgstr ""

#: ../../library/os.path.rst:291
msgid "Support for detecting non-root mount points on Windows."
msgstr ""

#: ../../library/os.path.rst:300
msgid ""
"Join one or more path segments intelligently.  The return value is the "
"concatenation of *path* and all members of *\\*paths*, with exactly one "
"directory separator following each non-empty part, except the last. That is,"
" the result will only end in a separator if the last part is either empty or"
" ends in a separator. If a segment is an absolute path (which on Windows "
"requires both a drive and a root), then all previous segments are ignored "
"and joining continues from the absolute path segment."
msgstr ""

#: ../../library/os.path.rst:308
msgid ""
"On Windows, the drive is not reset when a rooted path segment (e.g., "
"``r'\\foo'``) is encountered. If a segment is on a different drive or is an "
"absolute path, all previous segments are ignored and the drive is reset. "
"Note that since there is a current directory for each drive, "
"``os.path.join(\"c:\", \"foo\")`` represents a path relative to the current "
"directory on drive :file:`C:` (:file:`c:foo`), not :file:`c:\\\\foo`."
msgstr ""

#: ../../library/os.path.rst:315
msgid "Accepts a :term:`path-like object` for *path* and *paths*."
msgstr ""

#: ../../library/os.path.rst:321
msgid ""
"Normalize the case of a pathname.  On Windows, convert all characters in the"
" pathname to lowercase, and also convert forward slashes to backward "
"slashes. On other operating systems, return the path unchanged."
msgstr ""

#: ../../library/os.path.rst:331
msgid ""
"Normalize a pathname by collapsing redundant separators and up-level "
"references so that ``A//B``, ``A/B/``, ``A/./B`` and ``A/foo/../B`` all "
"become ``A/B``.  This string manipulation may change the meaning of a path "
"that contains symbolic links.  On Windows, it converts forward slashes to "
"backward slashes. To normalize case, use :func:`normcase`."
msgstr ""

#: ../../library/os.path.rst:338
msgid ""
"On POSIX systems, in accordance with `IEEE Std 1003.1 2013 Edition; 4.13 "
"Pathname Resolution "
"<https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_13>`_,"
" if a pathname begins with exactly two slashes, the first component "
"following the leading characters may be interpreted in an implementation-"
"defined manner, although more than two leading characters shall be treated "
"as a single character."
msgstr ""

#: ../../library/os.path.rst:351
msgid ""
"Return the canonical path of the specified filename, eliminating any "
"symbolic links encountered in the path (if they are supported by the "
"operating system)."
msgstr ""

#: ../../library/os.path.rst:355
msgid ""
"By default, the path is evaluated up to the first component that does not "
"exist, is a symlink loop, or whose evaluation raises :exc:`OSError`. All "
"such components are appended unchanged to the existing part of the path."
msgstr ""

#: ../../library/os.path.rst:359
msgid ""
"Some errors that are handled this way include \"access denied\", \"not a "
"directory\", or \"bad argument to internal function\". Thus, the resulting "
"path may be missing or inaccessible, may still contain links or loops, and "
"may traverse non-directories."
msgstr ""

#: ../../library/os.path.rst:364
msgid "This behavior can be modified by keyword arguments:"
msgstr ""

#: ../../library/os.path.rst:366
msgid ""
"If *strict* is ``True``, the first error encountered when evaluating the "
"path is re-raised. In particular, :exc:`FileNotFoundError` is raised if "
"*path* does not exist, or another :exc:`OSError` if it is otherwise "
"inaccessible."
msgstr ""

#: ../../library/os.path.rst:371
msgid ""
"If *strict* is :py:data:`os.path.ALLOW_MISSING`, errors other than "
":exc:`FileNotFoundError` are re-raised (as with ``strict=True``). Thus, the "
"returned path will not contain any symbolic links, but the named file and "
"some of its parent directories may be missing."
msgstr ""

#: ../../library/os.path.rst:377
msgid ""
"This function emulates the operating system's procedure for making a path "
"canonical, which differs slightly between Windows and UNIX with respect to "
"how links and subsequent path components interact."
msgstr ""

#: ../../library/os.path.rst:381
msgid ""
"Operating system APIs make paths canonical as needed, so it's not normally "
"necessary to call this function."
msgstr ""

#: ../../library/os.path.rst:387
msgid "Symbolic links and junctions are now resolved on Windows."
msgstr ""

#: ../../library/os.path.rst:390
msgid "The *strict* parameter was added."
msgstr ""

#: ../../library/os.path.rst:393
msgid ""
"The :py:data:`~os.path.ALLOW_MISSING` value for the *strict* parameter was "
"added."
msgstr ""

#: ../../library/os.path.rst:399
msgid "Special value used for the *strict* argument in :func:`realpath`."
msgstr ""

#: ../../library/os.path.rst:405
msgid ""
"Return a relative filepath to *path* either from the current directory or "
"from an optional *start* directory.  This is a path computation:  the "
"filesystem is not accessed to confirm the existence or nature of *path* or "
"*start*.  On Windows, :exc:`ValueError` is raised when *path* and *start* "
"are on different drives."
msgstr ""

#: ../../library/os.path.rst:411
msgid "*start* defaults to :data:`os.curdir`."
msgstr ""

#: ../../library/os.path.rst:421
msgid ""
"Return ``True`` if both pathname arguments refer to the same file or "
"directory. This is determined by the device number and i-node number and "
"raises an exception if an :func:`os.stat` call on either pathname fails."
msgstr ""

#: ../../library/os.path.rst:427 ../../library/os.path.rst:443
#: ../../library/os.path.rst:459
msgid "Added Windows support."
msgstr ""

#: ../../library/os.path.rst:430
msgid "Windows now uses the same implementation as all other platforms."
msgstr ""

#: ../../library/os.path.rst:439
msgid ""
"Return ``True`` if the file descriptors *fp1* and *fp2* refer to the same "
"file."
msgstr ""

#: ../../library/os.path.rst:452
msgid ""
"Return ``True`` if the stat tuples *stat1* and *stat2* refer to the same "
"file. These structures may have been returned by :func:`os.fstat`, "
":func:`os.lstat`, or :func:`os.stat`.  This function implements the "
"underlying comparison used by :func:`samefile` and :func:`sameopenfile`."
msgstr ""

#: ../../library/os.path.rst:468
msgid ""
"Split the pathname *path* into a pair, ``(head, tail)`` where *tail* is the "
"last pathname component and *head* is everything leading up to that.  The "
"*tail* part will never contain a slash; if *path* ends in a slash, *tail* "
"will be empty.  If there is no slash in *path*, *head* will be empty.  If "
"*path* is empty, both *head* and *tail* are empty.  Trailing slashes are "
"stripped from *head* unless it is the root (one or more slashes only).  In "
"all cases, ``join(head, tail)`` returns a path to the same location as "
"*path* (but the strings may differ).  Also see the functions :func:`dirname`"
" and :func:`basename`."
msgstr ""

#: ../../library/os.path.rst:484
msgid ""
"Split the pathname *path* into a pair ``(drive, tail)`` where *drive* is "
"either a mount point or the empty string.  On systems which do not use drive"
" specifications, *drive* will always be the empty string.  In all cases, "
"``drive + tail`` will be the same as *path*."
msgstr ""

#: ../../library/os.path.rst:489
msgid ""
"On Windows, splits a pathname into drive/UNC sharepoint and relative path."
msgstr ""

#: ../../library/os.path.rst:491
msgid ""
"If the path contains a drive letter, drive will contain everything up to and"
" including the colon::"
msgstr ""

#: ../../library/os.path.rst:497
msgid ""
"If the path contains a UNC path, drive will contain the host name and share,"
" up to but not including the fourth separator::"
msgstr ""

#: ../../library/os.path.rst:509
msgid ""
"Split the pathname *path* into a pair ``(root, ext)``  such that ``root + "
"ext == path``, and the extension, *ext*, is empty or begins with a period "
"and contains at most one period."
msgstr ""

#: ../../library/os.path.rst:513
msgid "If the path contains no extension, *ext* will be ``''``::"
msgstr ""

#: ../../library/os.path.rst:518
msgid ""
"If the path contains an extension, then *ext* will be set to this extension,"
" including the leading period. Note that previous periods will be ignored::"
msgstr ""

#: ../../library/os.path.rst:526
msgid ""
"Leading periods of the last component of the path are considered to be part "
"of the root::"
msgstr ""

#: ../../library/os.path.rst:540
msgid ""
"``True`` if arbitrary Unicode strings can be used as file names (within "
"limitations imposed by the file system)."
msgstr ""

#: ../../library/os.path.rst:10
msgid "path"
msgstr ""

#: ../../library/os.path.rst:10
msgid "operations"
msgstr ""

#: ../../library/os.path.rst:155
msgid "~ (tilde)"
msgstr ""

#: ../../library/os.path.rst:155
msgid "home directory expansion"
msgstr ""

#: ../../library/os.path.rst:162
msgid "module"
msgstr ""

#: ../../library/os.path.rst:162
msgid "pwd"
msgstr ""

#: ../../library/os.path.rst:183
msgid "$ (dollar)"
msgstr ""

#: ../../library/os.path.rst:183
msgid "environment variables expansion"
msgstr ""

#: ../../library/os.path.rst:183
msgid "% (percent)"
msgstr ""

#: ../../library/os.path.rst:183
msgid "environment variables expansion (Windows)"
msgstr ""
