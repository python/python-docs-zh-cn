# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/lzma.rst:2
msgid ":mod:`lzma` --- Compression using the LZMA algorithm"
msgstr ""

#: ../../library/lzma.rst:12
msgid "**Source code:** :source:`Lib/lzma.py`"
msgstr ""

#: ../../library/lzma.rst:16
msgid ""
"This module provides classes and convenience functions for compressing and "
"decompressing data using the LZMA compression algorithm. Also included is a "
"file interface supporting the ``.xz`` and legacy ``.lzma`` file formats used"
" by the :program:`xz` utility, as well as raw compressed streams."
msgstr ""

#: ../../library/lzma.rst:21
msgid ""
"The interface provided by this module is very similar to that of the "
":mod:`bz2` module. However, note that :class:`LZMAFile` is *not* thread-"
"safe, unlike :class:`bz2.BZ2File`, so if you need to use a single "
":class:`LZMAFile` instance from multiple threads, it is necessary to protect"
" it with a lock."
msgstr ""

#: ../../library/lzma.rst:29
msgid ""
"This exception is raised when an error occurs during compression or "
"decompression, or while initializing the compressor/decompressor state."
msgstr ""

#: ../../library/lzma.rst:34
msgid "Reading and writing compressed files"
msgstr ""

#: ../../library/lzma.rst:38
msgid ""
"Open an LZMA-compressed file in binary or text mode, returning a :term:`file"
" object`."
msgstr ""

#: ../../library/lzma.rst:41
msgid ""
"The *filename* argument can be either an actual file name (given as a "
":class:`str`, :class:`bytes` or :term:`path-like <path-like object>` "
"object), in which case the named file is opened, or it can be an existing "
"file object to read from or write to."
msgstr ""

#: ../../library/lzma.rst:46
msgid ""
"The *mode* argument can be any of ``\"r\"``, ``\"rb\"``, ``\"w\"``, "
"``\"wb\"``, ``\"x\"``, ``\"xb\"``, ``\"a\"`` or ``\"ab\"`` for binary mode, "
"or ``\"rt\"``, ``\"wt\"``, ``\"xt\"``, or ``\"at\"`` for text mode. The "
"default is ``\"rb\"``."
msgstr ""

#: ../../library/lzma.rst:50 ../../library/lzma.rst:95
msgid ""
"When opening a file for reading, the *format* and *filters* arguments have "
"the same meanings as for :class:`LZMADecompressor`. In this case, the "
"*check* and *preset* arguments should not be used."
msgstr ""

#: ../../library/lzma.rst:54 ../../library/lzma.rst:99
msgid ""
"When opening a file for writing, the *format*, *check*, *preset* and "
"*filters* arguments have the same meanings as for :class:`LZMACompressor`."
msgstr ""

#: ../../library/lzma.rst:57
msgid ""
"For binary mode, this function is equivalent to the :class:`LZMAFile` "
"constructor: ``LZMAFile(filename, mode, ...)``. In this case, the "
"*encoding*, *errors* and *newline* arguments must not be provided."
msgstr ""

#: ../../library/lzma.rst:61
msgid ""
"For text mode, a :class:`LZMAFile` object is created, and wrapped in an "
":class:`io.TextIOWrapper` instance with the specified encoding, error "
"handling behavior, and line ending(s)."
msgstr ""

#: ../../library/lzma.rst:65
msgid "Added support for the ``\"x\"``, ``\"xb\"`` and ``\"xt\"`` modes."
msgstr ""

#: ../../library/lzma.rst:68 ../../library/lzma.rst:126
msgid "Accepts a :term:`path-like object`."
msgstr "接受一个 :term:`path-like object`。"

#: ../../library/lzma.rst:74
msgid "Open an LZMA-compressed file in binary mode."
msgstr ""

#: ../../library/lzma.rst:76
msgid ""
"An :class:`LZMAFile` can wrap an already-open :term:`file object`, or "
"operate directly on a named file. The *filename* argument specifies either "
"the file object to wrap, or the name of the file to open (as a :class:`str`,"
" :class:`bytes` or :term:`path-like <path-like object>` object). When "
"wrapping an existing file object, the wrapped file will not be closed when "
"the :class:`LZMAFile` is closed."
msgstr ""

#: ../../library/lzma.rst:83
msgid ""
"The *mode* argument can be either ``\"r\"`` for reading (default), ``\"w\"``"
" for overwriting, ``\"x\"`` for exclusive creation, or ``\"a\"`` for "
"appending. These can equivalently be given as ``\"rb\"``, ``\"wb\"``, "
"``\"xb\"`` and ``\"ab\"`` respectively."
msgstr ""

#: ../../library/lzma.rst:88
msgid ""
"If *filename* is a file object (rather than an actual file name), a mode of "
"``\"w\"`` does not truncate the file, and is instead equivalent to "
"``\"a\"``."
msgstr ""

#: ../../library/lzma.rst:91
msgid ""
"When opening a file for reading, the input file may be the concatenation of "
"multiple separate compressed streams. These are transparently decoded as a "
"single logical stream."
msgstr ""

#: ../../library/lzma.rst:102
msgid ""
":class:`LZMAFile` supports all the members specified by "
":class:`io.BufferedIOBase`, except for :meth:`detach` and :meth:`truncate`. "
"Iteration and the :keyword:`with` statement are supported."
msgstr ""

#: ../../library/lzma.rst:106
msgid "The following method is also provided:"
msgstr ""

#: ../../library/lzma.rst:110
msgid ""
"Return buffered data without advancing the file position. At least one byte "
"of data will be returned, unless EOF has been reached. The exact number of "
"bytes returned is unspecified (the *size* argument is ignored)."
msgstr ""

#: ../../library/lzma.rst:114
msgid ""
"While calling :meth:`peek` does not change the file position of the "
":class:`LZMAFile`, it may change the position of the underlying file object "
"(e.g. if the :class:`LZMAFile` was constructed by passing a file object for "
"*filename*)."
msgstr ""

#: ../../library/lzma.rst:119
msgid "Added support for the ``\"x\"`` and ``\"xb\"`` modes."
msgstr ""

#: ../../library/lzma.rst:122
msgid ""
"The :meth:`~io.BufferedIOBase.read` method now accepts an argument of "
"``None``."
msgstr ""

#: ../../library/lzma.rst:131
msgid "Compressing and decompressing data in memory"
msgstr ""

#: ../../library/lzma.rst:135
msgid ""
"Create a compressor object, which can be used to compress data "
"incrementally."
msgstr ""

#: ../../library/lzma.rst:137
msgid ""
"For a more convenient way of compressing a single chunk of data, see "
":func:`compress`."
msgstr ""

#: ../../library/lzma.rst:140
msgid ""
"The *format* argument specifies what container format should be used. "
"Possible values are:"
msgstr ""

#: ../../library/lzma.rst:144
msgid ":const:`FORMAT_XZ`: The ``.xz`` container format."
msgstr ""

#: ../../library/lzma.rst:144
msgid "This is the default format."
msgstr ""

#: ../../library/lzma.rst:148
msgid ":const:`FORMAT_ALONE`: The legacy ``.lzma`` container format."
msgstr ""

#: ../../library/lzma.rst:147
msgid ""
"This format is more limited than ``.xz`` -- it does not support integrity "
"checks or multiple filters."
msgstr ""

#: ../../library/lzma.rst:154
msgid ""
":const:`FORMAT_RAW`: A raw data stream, not using any container format."
msgstr ""

#: ../../library/lzma.rst:151
msgid ""
"This format specifier does not support integrity checks, and requires that "
"you always specify a custom filter chain (for both compression and "
"decompression). Additionally, data compressed in this manner cannot be "
"decompressed using :const:`FORMAT_AUTO` (see :class:`LZMADecompressor`)."
msgstr ""

#: ../../library/lzma.rst:156
msgid ""
"The *check* argument specifies the type of integrity check to include in the"
" compressed data. This check is used when decompressing, to ensure that the "
"data has not been corrupted. Possible values are:"
msgstr ""

#: ../../library/lzma.rst:160
msgid ""
":const:`CHECK_NONE`: No integrity check. This is the default (and the only "
"acceptable value) for :const:`FORMAT_ALONE` and :const:`FORMAT_RAW`."
msgstr ""

#: ../../library/lzma.rst:164
msgid ":const:`CHECK_CRC32`: 32-bit Cyclic Redundancy Check."
msgstr ""

#: ../../library/lzma.rst:166
msgid ""
":const:`CHECK_CRC64`: 64-bit Cyclic Redundancy Check. This is the default "
"for :const:`FORMAT_XZ`."
msgstr ""

#: ../../library/lzma.rst:169
msgid ":const:`CHECK_SHA256`: 256-bit Secure Hash Algorithm."
msgstr ""

#: ../../library/lzma.rst:171
msgid ""
"If the specified check is not supported, an :class:`LZMAError` is raised."
msgstr ""

#: ../../library/lzma.rst:173
msgid ""
"The compression settings can be specified either as a preset compression "
"level (with the *preset* argument), or in detail as a custom filter chain "
"(with the *filters* argument)."
msgstr ""

#: ../../library/lzma.rst:177
msgid ""
"The *preset* argument (if provided) should be an integer between ``0`` and "
"``9`` (inclusive), optionally OR-ed with the constant "
":const:`PRESET_EXTREME`. If neither *preset* nor *filters* are given, the "
"default behavior is to use :const:`PRESET_DEFAULT` (preset level ``6``). "
"Higher presets produce smaller output, but make the compression process "
"slower."
msgstr ""

#: ../../library/lzma.rst:186
msgid ""
"In addition to being more CPU-intensive, compression with higher presets "
"also requires much more memory (and produces output that needs more memory "
"to decompress). With preset ``9`` for example, the overhead for an "
":class:`LZMACompressor` object can be as high as 800 MiB. For this reason, "
"it is generally best to stick with the default preset."
msgstr ""

#: ../../library/lzma.rst:192
msgid ""
"The *filters* argument (if provided) should be a filter chain specifier. See"
" :ref:`filter-chain-specs` for details."
msgstr ""

#: ../../library/lzma.rst:197
msgid ""
"Compress *data* (a :class:`bytes` object), returning a :class:`bytes` object"
" containing compressed data for at least part of the input. Some of *data* "
"may be buffered internally, for use in later calls to :meth:`compress` and "
":meth:`flush`. The returned data should be concatenated with the output of "
"any previous calls to :meth:`compress`."
msgstr ""

#: ../../library/lzma.rst:205
msgid ""
"Finish the compression process, returning a :class:`bytes` object containing"
" any data stored in the compressor's internal buffers."
msgstr ""

#: ../../library/lzma.rst:208
msgid "The compressor cannot be used after this method has been called."
msgstr ""

#: ../../library/lzma.rst:213
msgid ""
"Create a decompressor object, which can be used to decompress data "
"incrementally."
msgstr ""

#: ../../library/lzma.rst:216
msgid ""
"For a more convenient way of decompressing an entire compressed stream at "
"once, see :func:`decompress`."
msgstr ""

#: ../../library/lzma.rst:219
msgid ""
"The *format* argument specifies the container format that should be used. "
"The default is :const:`FORMAT_AUTO`, which can decompress both ``.xz`` and "
"``.lzma`` files. Other possible values are :const:`FORMAT_XZ`, "
":const:`FORMAT_ALONE`, and :const:`FORMAT_RAW`."
msgstr ""

#: ../../library/lzma.rst:224
msgid ""
"The *memlimit* argument specifies a limit (in bytes) on the amount of memory"
" that the decompressor can use. When this argument is used, decompression "
"will fail with an :class:`LZMAError` if it is not possible to decompress the"
" input within the given memory limit."
msgstr ""

#: ../../library/lzma.rst:229
msgid ""
"The *filters* argument specifies the filter chain that was used to create "
"the stream being decompressed. This argument is required if *format* is "
":const:`FORMAT_RAW`, but should not be used for other formats. See "
":ref:`filter-chain-specs` for more information about filter chains."
msgstr ""

#: ../../library/lzma.rst:235
msgid ""
"This class does not transparently handle inputs containing multiple "
"compressed streams, unlike :func:`decompress` and :class:`LZMAFile`. To "
"decompress a multi-stream input with :class:`LZMADecompressor`, you must "
"create a new decompressor for each stream."
msgstr ""

#: ../../library/lzma.rst:242
msgid ""
"Decompress *data* (a :term:`bytes-like object`), returning uncompressed data"
" as bytes. Some of *data* may be buffered internally, for use in later calls"
" to :meth:`decompress`. The returned data should be concatenated with the "
"output of any previous calls to :meth:`decompress`."
msgstr ""

#: ../../library/lzma.rst:248
msgid ""
"If *max_length* is nonnegative, returns at most *max_length* bytes of "
"decompressed data. If this limit is reached and further output can be "
"produced, the :attr:`~.needs_input` attribute will be set to ``False``. In "
"this case, the next call to :meth:`~.decompress` may provide *data* as "
"``b''`` to obtain more of the output."
msgstr ""

#: ../../library/lzma.rst:255
msgid ""
"If all of the input data was decompressed and returned (either because this "
"was less than *max_length* bytes, or because *max_length* was negative), the"
" :attr:`~.needs_input` attribute will be set to ``True``."
msgstr ""

#: ../../library/lzma.rst:260
msgid ""
"Attempting to decompress data after the end of stream is reached raises an "
"`EOFError`.  Any data found after the end of the stream is ignored and saved"
" in the :attr:`~.unused_data` attribute."
msgstr ""

#: ../../library/lzma.rst:264
msgid "Added the *max_length* parameter."
msgstr ""

#: ../../library/lzma.rst:269
msgid ""
"The ID of the integrity check used by the input stream. This may be "
":const:`CHECK_UNKNOWN` until enough of the input has been decoded to "
"determine what integrity check it uses."
msgstr ""

#: ../../library/lzma.rst:275
msgid "``True`` if the end-of-stream marker has been reached."
msgstr ""

#: ../../library/lzma.rst:279
msgid "Data found after the end of the compressed stream."
msgstr ""

#: ../../library/lzma.rst:281
msgid "Before the end of the stream is reached, this will be ``b\"\"``."
msgstr ""

#: ../../library/lzma.rst:285
msgid ""
"``False`` if the :meth:`.decompress` method can provide more decompressed "
"data before requiring new uncompressed input."
msgstr ""

#: ../../library/lzma.rst:292
msgid ""
"Compress *data* (a :class:`bytes` object), returning the compressed data as "
"a :class:`bytes` object."
msgstr ""

#: ../../library/lzma.rst:295
msgid ""
"See :class:`LZMACompressor` above for a description of the *format*, "
"*check*, *preset* and *filters* arguments."
msgstr ""

#: ../../library/lzma.rst:301
msgid ""
"Decompress *data* (a :class:`bytes` object), returning the uncompressed data"
" as a :class:`bytes` object."
msgstr ""

#: ../../library/lzma.rst:304
msgid ""
"If *data* is the concatenation of multiple distinct compressed streams, "
"decompress all of these streams, and return the concatenation of the "
"results."
msgstr ""

#: ../../library/lzma.rst:307
msgid ""
"See :class:`LZMADecompressor` above for a description of the *format*, "
"*memlimit* and *filters* arguments."
msgstr ""

#: ../../library/lzma.rst:312
msgid "Miscellaneous"
msgstr ""

#: ../../library/lzma.rst:316
msgid ""
"Return ``True`` if the given integrity check is supported on this system."
msgstr ""

#: ../../library/lzma.rst:318
msgid ""
":const:`CHECK_NONE` and :const:`CHECK_CRC32` are always supported. "
":const:`CHECK_CRC64` and :const:`CHECK_SHA256` may be unavailable if you are"
" using a version of :program:`liblzma` that was compiled with a limited "
"feature set."
msgstr ""

#: ../../library/lzma.rst:327
msgid "Specifying custom filter chains"
msgstr ""

#: ../../library/lzma.rst:329
msgid ""
"A filter chain specifier is a sequence of dictionaries, where each "
"dictionary contains the ID and options for a single filter. Each dictionary "
"must contain the key ``\"id\"``, and may contain additional keys to specify "
"filter-dependent options. Valid filter IDs are as follows:"
msgstr ""

#: ../../library/lzma.rst:336
msgid "Compression filters:"
msgstr ""

#: ../../library/lzma.rst:335
msgid ":const:`FILTER_LZMA1` (for use with :const:`FORMAT_ALONE`)"
msgstr ""

#: ../../library/lzma.rst:336
msgid ""
":const:`FILTER_LZMA2` (for use with :const:`FORMAT_XZ` and "
":const:`FORMAT_RAW`)"
msgstr ""

#: ../../library/lzma.rst:339
msgid "Delta filter:"
msgstr ""

#: ../../library/lzma.rst:339
msgid ":const:`FILTER_DELTA`"
msgstr ""

#: ../../library/lzma.rst:347
msgid "Branch-Call-Jump (BCJ) filters:"
msgstr ""

#: ../../library/lzma.rst:342
msgid ":const:`FILTER_X86`"
msgstr ""

#: ../../library/lzma.rst:343
msgid ":const:`FILTER_IA64`"
msgstr ""

#: ../../library/lzma.rst:344
msgid ":const:`FILTER_ARM`"
msgstr ""

#: ../../library/lzma.rst:345
msgid ":const:`FILTER_ARMTHUMB`"
msgstr ""

#: ../../library/lzma.rst:346
msgid ":const:`FILTER_POWERPC`"
msgstr ""

#: ../../library/lzma.rst:347
msgid ":const:`FILTER_SPARC`"
msgstr ""

#: ../../library/lzma.rst:349
msgid ""
"A filter chain can consist of up to 4 filters, and cannot be empty. The last"
" filter in the chain must be a compression filter, and any other filters "
"must be delta or BCJ filters."
msgstr ""

#: ../../library/lzma.rst:353
msgid ""
"Compression filters support the following options (specified as additional "
"entries in the dictionary representing the filter):"
msgstr ""

#: ../../library/lzma.rst:356
msgid ""
"``preset``: A compression preset to use as a source of default values for "
"options that are not specified explicitly."
msgstr ""

#: ../../library/lzma.rst:358
msgid ""
"``dict_size``: Dictionary size in bytes. This should be between 4 KiB and "
"1.5 GiB (inclusive)."
msgstr ""

#: ../../library/lzma.rst:360
msgid "``lc``: Number of literal context bits."
msgstr ""

#: ../../library/lzma.rst:361
msgid ""
"``lp``: Number of literal position bits. The sum ``lc + lp`` must be at most"
" 4."
msgstr ""

#: ../../library/lzma.rst:363
msgid "``pb``: Number of position bits; must be at most 4."
msgstr ""

#: ../../library/lzma.rst:364
msgid "``mode``: :const:`MODE_FAST` or :const:`MODE_NORMAL`."
msgstr ""

#: ../../library/lzma.rst:365
msgid ""
"``nice_len``: What should be considered a \"nice length\" for a match. This "
"should be 273 or less."
msgstr ""

#: ../../library/lzma.rst:367
msgid ""
"``mf``: What match finder to use -- :const:`MF_HC3`, :const:`MF_HC4`, "
":const:`MF_BT2`, :const:`MF_BT3`, or :const:`MF_BT4`."
msgstr ""

#: ../../library/lzma.rst:369
msgid ""
"``depth``: Maximum search depth used by match finder. 0 (default) means to "
"select automatically based on other filter options."
msgstr ""

#: ../../library/lzma.rst:372
msgid ""
"The delta filter stores the differences between bytes, producing more "
"repetitive input for the compressor in certain circumstances. It supports "
"one option, ``dist``. This indicates the distance between bytes to be "
"subtracted. The default is 1, i.e. take the differences between adjacent "
"bytes."
msgstr ""

#: ../../library/lzma.rst:377
msgid ""
"The BCJ filters are intended to be applied to machine code. They convert "
"relative branches, calls and jumps in the code to use absolute addressing, "
"with the aim of increasing the redundancy that can be exploited by the "
"compressor. These filters support one option, ``start_offset``. This "
"specifies the address that should be mapped to the beginning of the input "
"data. The default is 0."
msgstr ""

#: ../../library/lzma.rst:385
msgid "Examples"
msgstr "例子"

#: ../../library/lzma.rst:387
msgid "Reading in a compressed file::"
msgstr ""

#: ../../library/lzma.rst:393
msgid "Creating a compressed file::"
msgstr ""

#: ../../library/lzma.rst:400
msgid "Compressing data in memory::"
msgstr ""

#: ../../library/lzma.rst:406
msgid "Incremental compression::"
msgstr ""

#: ../../library/lzma.rst:417
msgid "Writing compressed data to an already-open file::"
msgstr ""

#: ../../library/lzma.rst:426
msgid "Creating a compressed file using a custom filter chain::"
msgstr ""
