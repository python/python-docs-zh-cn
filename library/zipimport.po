# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Zombie110year <zombie110year@gmail.com>, 2021
# nick <2330458484@qq.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# Naisen Xu <723648649@qq.com>, 2021
# Shengjing Zhu <zsj950618@gmail.com>, 2023
# Freesand Leo <yuqinju@163.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:18+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/zipimport.rst:2
msgid ":mod:`!zipimport` --- Import modules from Zip archives"
msgstr ":mod:`!zipimport` --- 从 Zip 归档导入模块"

#: ../../library/zipimport.rst:9
msgid "**Source code:** :source:`Lib/zipimport.py`"
msgstr "**源代码：** :source:`Lib/zipimport.py`"

#: ../../library/zipimport.rst:13
msgid ""
"This module adds the ability to import Python modules (:file:`\\*.py`, "
":file:`\\*.pyc`) and packages from ZIP-format archives. It is usually not "
"needed to use the :mod:`zipimport` module explicitly; it is automatically "
"used by the built-in :keyword:`import` mechanism for :data:`sys.path` items "
"that are paths to ZIP archives."
msgstr ""
"此模块添加了从 ZIP 格式档案中导入 Python 模块（ :file:`\\*.py` ， :file:`\\*.pyc` "
"）和包的能力。通常不需要明确地使用 :mod:`zipimport` 模块，内置的 :keyword:`import` 机制会自动将此模块用于 ZIP "
"档案路径的 :data:`sys.path` 项目上。"

#: ../../library/zipimport.rst:19
msgid ""
"Typically, :data:`sys.path` is a list of directory names as strings.  This "
"module also allows an item of :data:`sys.path` to be a string naming a ZIP "
"file archive. The ZIP archive can contain a subdirectory structure to "
"support package imports, and a path within the archive can be specified to "
"only import from a subdirectory.  For example, the path "
":file:`example.zip/lib/` would only import from the :file:`lib/` "
"subdirectory within the archive."
msgstr ""
"通常， :data:`sys.path` 是字符串的目录名称列表。此模块同样允许 :data:`sys.path` 的一项成为命名 ZIP "
"文件档案的字符串。 ZIP 档案可以容纳子目录结构去支持包的导入，并且可以将归档文件中的路径指定为仅从子目录导入。比如说，路径 "
":file:`example.zip/lib/` 将只会从档案中的 :file:`lib/` 子目录导入。"

#: ../../library/zipimport.rst:26
msgid ""
"Any files may be present in the ZIP archive, but importers are only invoked "
"for :file:`.py` and :file:`.pyc` files.  ZIP import of dynamic modules "
"(:file:`.pyd`, :file:`.so`) is disallowed. Note that if an archive only "
"contains :file:`.py` files, Python will not attempt to modify the archive by"
" adding the corresponding :file:`.pyc` file, meaning that if a ZIP archive "
"doesn't contain :file:`.pyc` files, importing may be rather slow."
msgstr ""
"任何文件都可以放到 ZIP 档案中，但只有 :file:`.py` 和 :file:`.pyc` 文件会触发导入器操作。 动态模块 "
"(:file:`.pyd`, :file:`.so`) 的 ZIP 导入是不被允许的。 请注意如果一个档案只包含有 :file:`.py` 文件，那么 "
"Python 将不会尝试通过添加对应的 :file:`.pyc` 文件来修改档案，这意味着如果一个 ZIP 档案不包含 :file:`.pyc` "
"文件，则导入速度可能会相当慢。"

#: ../../library/zipimport.rst:33
msgid "ZIP64 is supported"
msgstr "已支持 ZIP64"

#: ../../library/zipimport.rst:36
msgid "Previously, ZIP archives with an archive comment were not supported."
msgstr "以前，不支持带有档案注释的 ZIP 档案。"

#: ../../library/zipimport.rst:41
msgid ""
"`PKZIP Application Note "
"<https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT>`_"
msgstr ""
"`PKZIP Application Note "
"<https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT>`_"

#: ../../library/zipimport.rst:42
msgid ""
"Documentation on the ZIP file format by Phil Katz, the creator of the format"
" and algorithms used."
msgstr "Phil Katz 编写的 ZIP 文件格式文档，此格式和使用的算法的创建者。"

#: ../../library/zipimport.rst:45
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` -  从ZIP压缩包导入模块"

#: ../../library/zipimport.rst:46
msgid ""
"Written by James C. Ahlstrom, who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`, but uses an implementation "
"written by Just van Rossum that uses the import hooks described in "
":pep:`302`."
msgstr ""
"由 James C. Ahlstrom 编写，他也提供了实现。 Python 2.3 遵循 :pep:`273` 的规范，但是使用 Just van "
"Rossum 编写的使用了 :pep:`302` 中描述的导入钩的实现。"

#: ../../library/zipimport.rst:50
msgid ":mod:`importlib` - The implementation of the import machinery"
msgstr ":mod:`importlib` - 导入机制的实现"

#: ../../library/zipimport.rst:51
msgid ""
"Package providing the relevant protocols for all importers to implement."
msgstr "为所有导入器的实现提供相关协议的包。"

#: ../../library/zipimport.rst:55
msgid "This module defines an exception:"
msgstr "此模块定义了一个异常："

#: ../../library/zipimport.rst:59
msgid ""
"Exception raised by zipimporter objects. It's a subclass of "
":exc:`ImportError`, so it can be caught as :exc:`ImportError`, too."
msgstr ""
"异常由 zipimporter 对象引发。这是 :exc:`ImportError` 的子类，因此，也可以捕获为 :exc:`ImportError` "
"。"

#: ../../library/zipimport.rst:66
msgid "zipimporter Objects"
msgstr "zipimporter 对象"

#: ../../library/zipimport.rst:68
msgid ":class:`zipimporter` is the class for importing ZIP files."
msgstr ":class:`zipimporter` 是用于导入 ZIP 文件的类。"

#: ../../library/zipimport.rst:72
msgid ""
"Create a new zipimporter instance. *archivepath* must be a path to a ZIP "
"file, or to a specific path within a ZIP file.  For example, an "
"*archivepath* of :file:`foo/bar.zip/lib` will look for modules in the "
":file:`lib` directory inside the ZIP file :file:`foo/bar.zip` (provided that"
" it exists)."
msgstr ""
"创建新的 zipimporter 实例。 *archivepath* 必须是指向 ZIP 文件的路径，或者 ZIP 文件中的特定路径。例如， "
":file:`foo/bar.zip/lib` 的 *archivepath* 将在 ZIP 文件 :file:`foo/bar.zip` 中的 "
":file:`lib` 目录中查找模块（只要它存在）。"

#: ../../library/zipimport.rst:77
msgid ""
":exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid "
"ZIP archive."
msgstr "如果 *archivepath* 没有指向一个有效的 ZIP 档案，引发 :exc:`ZipImportError` 。"

#: ../../library/zipimport.rst:82
msgid ""
"Methods ``find_loader()`` and ``find_module()``, deprecated in 3.10 are now "
"removed.  Use :meth:`find_spec` instead."
msgstr ""
"在 3.10 中已弃用的 ``find_loader()`` 和 ``find_module()`` 方法现在已被移除。 请改用 "
":meth:`find_spec`。"

#: ../../library/zipimport.rst:87
msgid ""
"Implementation of :meth:`importlib.abc.Loader.create_module` that returns "
":const:`None` to explicitly request the default semantics."
msgstr ""
"返回 :const:`None` 来显式地请求默认语义的 :meth:`importlib.abc.Loader.create_module` 实现。"

#: ../../library/zipimport.rst:95
msgid "Implementation of :meth:`importlib.abc.Loader.exec_module`."
msgstr ":meth:`importlib.abc.Loader.exec_module` 的实现。"

#: ../../library/zipimport.rst:102
msgid "An implementation of :meth:`importlib.abc.PathEntryFinder.find_spec`."
msgstr ":meth:`importlib.abc.PathEntryFinder.find_spec` 的实现。"

#: ../../library/zipimport.rst:109
msgid ""
"Return the code object for the specified module. Raise :exc:`ZipImportError`"
" if the module couldn't be imported."
msgstr "返回指定模块的代码对象。 如果模块无法被导入则引发 :exc:`ZipImportError`。"

#: ../../library/zipimport.rst:115
msgid ""
"Return the data associated with *pathname*. Raise :exc:`OSError` if the file"
" wasn't found."
msgstr "返回与 *pathname* 相关联的数据。如果不能找到文件则引发 :exc:`OSError` 错误。"

#: ../../library/zipimport.rst:118
msgid ""
":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr "过去触发的 :exc:`IOError`，现在是 :exc:`OSError` 的别名。"

#: ../../library/zipimport.rst:124
msgid ""
"Return the value ``__file__`` would be set to if the specified module was "
"imported. Raise :exc:`ZipImportError` if the module couldn't be imported."
msgstr ""
"返回如果指定模块被导入则应当要设置的 ``__file__`` 值。 如果模块无法被导入则引发 :exc:`ZipImportError`。"

#: ../../library/zipimport.rst:133
msgid ""
"Return the source code for the specified module. Raise :exc:`ZipImportError`"
" if the module couldn't be found, return :const:`None` if the archive does "
"contain the module, but has no source for it."
msgstr ""
"返回指定模块的源代码。如果没有找到模块则引发 :exc:`ZipImportError` ，如果档案包含模块但是没有源代码，返回 "
":const:`None` 。"

#: ../../library/zipimport.rst:141
msgid ""
"Return ``True`` if the module specified by *fullname* is a package. Raise "
":exc:`ZipImportError` if the module couldn't be found."
msgstr ""
"如果由 *fullname* 指定的模块是一个包则返回 ``True`` 。如果不能找到模块则引发 :exc:`ZipImportError` 错误。"

#: ../../library/zipimport.rst:147
msgid ""
"Load the module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. Returns the imported module on success, "
"raises :exc:`ZipImportError` on failure."
msgstr ""
"导入由 *fullname* 所指定的模块。 *fullname* 必须为（带点号的）完整限定名称。 成功时返回导入的模块，失败时引发 "
":exc:`ZipImportError`。"

#: ../../library/zipimport.rst:153
msgid "Use :meth:`exec_module` instead."
msgstr "使用 :meth:`exec_module` 来代替。"

#: ../../library/zipimport.rst:158
msgid ""
"Clear out the internal cache of information about files found within the ZIP"
" archive."
msgstr "清除在 ZIP 归档文件中找到的相关文件信息的内部缓存。"

#: ../../library/zipimport.rst:166
msgid ""
"The file name of the importer's associated ZIP file, without a possible "
"subpath."
msgstr "导入器关联的 ZIP 文件的文件名，没有可能的子路径。"

#: ../../library/zipimport.rst:172
msgid ""
"The subpath within the ZIP file where modules are searched.  This is the "
"empty string for zipimporter objects which point to the root of the ZIP "
"file."
msgstr "ZIP 文件中搜索的模块的子路径。这是一个指向 ZIP 文件根目录的 zipimporter 对象的空字符串。"

#: ../../library/zipimport.rst:176
msgid ""
"The :attr:`archive` and :attr:`prefix` attributes, when combined with a "
"slash, equal the original *archivepath* argument given to the "
":class:`zipimporter` constructor."
msgstr ""
"当与斜杠结合使用时， :attr:`archive` 和 :attr:`prefix` 属性等价于赋予 :class:`zipimporter` "
"构造器的原始 *archivepath* 参数。"

#: ../../library/zipimport.rst:184
msgid "Examples"
msgstr "例子"

#: ../../library/zipimport.rst:186
msgid ""
"Here is an example that imports a module from a ZIP archive - note that the "
":mod:`zipimport` module is not explicitly used."
msgstr "这是一个从 ZIP 档案中导入模块的例子 - 请注意 :mod:`zipimport` 模块不需要明确地使用。"

#: ../../library/zipimport.rst:189
msgid ""
"$ unzip -l example.zip\n"
"Archive:  example.zip\n"
"  Length     Date   Time    Name\n"
" --------    ----   ----    ----\n"
"     8467  11-26-02 22:30   jwzthreading.py\n"
" --------                   -------\n"
"     8467                   1 file\n"
"$ ./python\n"
"Python 2.3 (#1, Aug 1 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, 'example.zip')  # Add .zip file to front of path\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'example.zip/jwzthreading.py'"
msgstr ""
"$ unzip -l example.zip\n"
"Archive:  example.zip\n"
"  Length     Date   Time    Name\n"
" --------    ----   ----    ----\n"
"     8467  11-26-02 22:30   jwzthreading.py\n"
" --------                   -------\n"
"     8467                   1 file\n"
"$ ./python\n"
"Python 2.3 (#1, Aug 1 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, 'example.zip')  # 将 .zip 文件添加到 path 的开头\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'example.zip/jwzthreading.py'"
