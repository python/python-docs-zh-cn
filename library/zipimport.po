# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:18+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/zipimport.rst:2
msgid ":mod:`zipimport` --- Import modules from Zip archives"
msgstr ""

#: ../../library/zipimport.rst:9
msgid "**Source code:** :source:`Lib/zipimport.py`"
msgstr ""

#: ../../library/zipimport.rst:13
msgid ""
"This module adds the ability to import Python modules (:file:`\\*.py`, "
":file:`\\*.pyc`) and packages from ZIP-format archives. It is usually not "
"needed to use the :mod:`zipimport` module explicitly; it is automatically "
"used by the built-in :keyword:`import` mechanism for :data:`sys.path` items "
"that are paths to ZIP archives."
msgstr ""

#: ../../library/zipimport.rst:19
msgid ""
"Typically, :data:`sys.path` is a list of directory names as strings.  This "
"module also allows an item of :data:`sys.path` to be a string naming a ZIP "
"file archive. The ZIP archive can contain a subdirectory structure to "
"support package imports, and a path within the archive can be specified to "
"only import from a subdirectory.  For example, the path "
":file:`example.zip/lib/` would only import from the :file:`lib/` "
"subdirectory within the archive."
msgstr ""

#: ../../library/zipimport.rst:26
msgid ""
"Any files may be present in the ZIP archive, but importers are only invoked "
"for :file:`.py` and :file:`.pyc` files.  ZIP import of dynamic modules "
"(:file:`.pyd`, :file:`.so`) is disallowed. Note that if an archive only "
"contains :file:`.py` files, Python will not attempt to modify the archive by"
" adding the corresponding :file:`.pyc` file, meaning that if a ZIP archive "
"doesn't contain :file:`.pyc` files, importing may be rather slow."
msgstr ""

#: ../../library/zipimport.rst:33
msgid "Previously, ZIP archives with an archive comment were not supported."
msgstr ""

#: ../../library/zipimport.rst:40
msgid ""
"`PKZIP Application Note "
"<https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT>`_"
msgstr ""

#: ../../library/zipimport.rst:39
msgid ""
"Documentation on the ZIP file format by Phil Katz, the creator of the format"
" and algorithms used."
msgstr ""

#: ../../library/zipimport.rst:45
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ""

#: ../../library/zipimport.rst:43
msgid ""
"Written by James C. Ahlstrom, who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`, but uses an implementation "
"written by Just van Rossum that uses the import hooks described in "
":pep:`302`."
msgstr ""

#: ../../library/zipimport.rst:47
msgid ":pep:`302` - New Import Hooks"
msgstr ""

#: ../../library/zipimport.rst:48
msgid "The PEP to add the import hooks that help this module work."
msgstr ""

#: ../../library/zipimport.rst:51
msgid "This module defines an exception:"
msgstr ""

#: ../../library/zipimport.rst:55
msgid ""
"Exception raised by zipimporter objects. It's a subclass of "
":exc:`ImportError`, so it can be caught as :exc:`ImportError`, too."
msgstr ""

#: ../../library/zipimport.rst:62
msgid "zipimporter Objects"
msgstr ""

#: ../../library/zipimport.rst:64
msgid ":class:`zipimporter` is the class for importing ZIP files."
msgstr ""

#: ../../library/zipimport.rst:68
msgid ""
"Create a new zipimporter instance. *archivepath* must be a path to a ZIP "
"file, or to a specific path within a ZIP file.  For example, an "
"*archivepath* of :file:`foo/bar.zip/lib` will look for modules in the "
":file:`lib` directory inside the ZIP file :file:`foo/bar.zip` (provided that"
" it exists)."
msgstr ""

#: ../../library/zipimport.rst:73
msgid ""
":exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid "
"ZIP archive."
msgstr ""

#: ../../library/zipimport.rst:78
msgid ""
"Search for a module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. It returns the zipimporter instance itself "
"if the module was found, or :const:`None` if it wasn't. The optional *path* "
"argument is ignored---it's there for compatibility with the importer "
"protocol."
msgstr ""

#: ../../library/zipimport.rst:87
msgid ""
"Return the code object for the specified module. Raise :exc:`ZipImportError`"
" if the module couldn't be found."
msgstr ""

#: ../../library/zipimport.rst:93
msgid ""
"Return the data associated with *pathname*. Raise :exc:`OSError` if the file"
" wasn't found."
msgstr ""

#: ../../library/zipimport.rst:96
msgid ":exc:`IOError` used to be raised instead of :exc:`OSError`."
msgstr ""

#: ../../library/zipimport.rst:102
msgid ""
"Return the value ``__file__`` would be set to if the specified module was "
"imported. Raise :exc:`ZipImportError` if the module couldn't be found."
msgstr ""

#: ../../library/zipimport.rst:111
msgid ""
"Return the source code for the specified module. Raise :exc:`ZipImportError`"
" if the module couldn't be found, return :const:`None` if the archive does "
"contain the module, but has no source for it."
msgstr ""

#: ../../library/zipimport.rst:119
msgid ""
"Return ``True`` if the module specified by *fullname* is a package. Raise "
":exc:`ZipImportError` if the module couldn't be found."
msgstr ""

#: ../../library/zipimport.rst:125
msgid ""
"Load the module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. It returns the imported module, or raises "
":exc:`ZipImportError` if it wasn't found."
msgstr ""

#: ../../library/zipimport.rst:132
msgid ""
"The file name of the importer's associated ZIP file, without a possible "
"subpath."
msgstr ""

#: ../../library/zipimport.rst:138
msgid ""
"The subpath within the ZIP file where modules are searched.  This is the "
"empty string for zipimporter objects which point to the root of the ZIP "
"file."
msgstr ""

#: ../../library/zipimport.rst:142
msgid ""
"The :attr:`archive` and :attr:`prefix` attributes, when combined with a "
"slash, equal the original *archivepath* argument given to the "
":class:`zipimporter` constructor."
msgstr ""

#: ../../library/zipimport.rst:150
msgid "Examples"
msgstr "例子"

#: ../../library/zipimport.rst:152
msgid ""
"Here is an example that imports a module from a ZIP archive - note that the "
":mod:`zipimport` module is not explicitly used."
msgstr ""
