# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/optparse.rst:2
msgid ":mod:`!optparse` --- Parser for command line options"
msgstr ":mod:`!optparse` --- 命令行选项的解析器"

#: ../../library/optparse.rst:10
msgid "**Source code:** :source:`Lib/optparse.py`"
msgstr "**源代码：** :source:`Lib/optparse.py`"

#: ../../library/optparse.rst:17
msgid "Choosing an argument parsing library"
msgstr "选择参数解析库"

#: ../../library/optparse.rst:19
msgid "The standard library includes three argument parsing libraries:"
msgstr "标准库包括三个参数解析库："

#: ../../library/optparse.rst:21
msgid ""
":mod:`getopt`: a module that closely mirrors the procedural C ``getopt`` "
"API. Included in the standard library since before the initial Python 1.0 "
"release."
msgstr ""
":mod:`getopt`: 一个忠实地复刻过程式 C ``getopt`` API 的模块。 在最初的 Python 1.0 "
"发布版之前就已包括在标准库中。"

#: ../../library/optparse.rst:23
msgid ""
":mod:`optparse`: a declarative replacement for ``getopt`` that provides "
"equivalent functionality without requiring each application to implement its"
" own procedural option parsing logic. Included in the standard library since"
" the Python 2.3 release."
msgstr ""
":mod:`optparse`: 一个 ``getopt`` 的声明式替代物，提供了等价的功能而不要求每个应用程序实现它自己的过程式选项解析逻辑。 自 "
"Python 2.3 发布版起即包括在标准库中。"

#: ../../library/optparse.rst:27
msgid ""
":mod:`argparse`: a more opinionated alternative to ``optparse`` that "
"provides more functionality by default, at the expense of reduced "
"application flexibility in controlling exactly how arguments are processed. "
"Included in the standard library since the Python 2.7 and Python 3.2 "
"releases."
msgstr ""
":mod:`argparse`: 一个更有针对性的 ``optparse`` "
"替代物，默认提供了更多功能，代价是降低了应用程序在具体如何控制参数处理时的灵活性。 自 Python 2.7 和 Python 3.2 "
"发布版起被包括在标准库中。"

#: ../../library/optparse.rst:32
msgid ""
"In the absence of more specific argument parsing design constraints, "
":mod:`argparse` is the recommended choice for implementing command line "
"applications, as it offers the highest level of baseline functionality with "
"the least application level code."
msgstr ""
"在缺少更具体的参数解析设计约束的情况下，:mod:`argparse` "
"是实现命令行应用程序的推荐选择，因为它能以最少的程用程序层级代码提供最高层级的基本功能。"

#: ../../library/optparse.rst:36
msgid ""
":mod:`getopt` is retained almost entirely for backwards compatibility "
"reasons. However, it also serves a niche use case as a tool for prototyping "
"and testing command line argument handling in ``getopt``-based C "
"applications."
msgstr ""
":mod:`getopt` 被保留几乎完全是出于向下兼容性理由。 不过，它也适合在基于 ``getopt`` 的 C "
"应用程序中作为命令行参数处理原型搭建和测试场景中的工具。"

#: ../../library/optparse.rst:40
msgid ""
":mod:`optparse` should be considered as an alternative to :mod:`argparse` in"
" the following cases:"
msgstr ":mod:`optparse` 应当在下列场景中被作为 :mod:`argparse` 的替代物："

#: ../../library/optparse.rst:43
msgid ""
"an application is already using :mod:`optparse` and doesn't want to risk the"
" subtle behavioural changes that may arise when migrating to :mod:`argparse`"
msgstr ""
"一个应用程序已在使用 :mod:`optparse` 并且不想再冒当迁移至 :mod:`argparse` 时可能引发的微妙行为改变的风险。"

#: ../../library/optparse.rst:45
msgid ""
"the application requires additional control over the way options and "
"positional parameters are interleaved on the command line (including the "
"ability to disable the interleaving feature completely)"
msgstr "这个应用程序需要对命令行中选项和位置形参的交错方式进行额外的控制（包括完全禁用交错特性的能力）"

#: ../../library/optparse.rst:48
msgid ""
"the application requires additional control over the incremental parsing of "
"command line elements (while ``argparse`` does support this, the exact way "
"it works in practice is undesirable for some use cases)"
msgstr ""
"这个应用程序需要对命令行元素进行渐进式解析的过程施加更多控制（虽然 ``argparse`` 确实支持这个功能，但实际运作的方式在某些情况下并非理想）"

#: ../../library/optparse.rst:51
msgid ""
"the application requires additional control over the handling of options "
"which accept parameter values that may start with ``-`` (such as delegated "
"options to be passed to invoked subprocesses)"
msgstr ""
"这个应用程序需要对某些可能接受以 ``-`` "
"开头的参数值的命令行选项施行特殊的控制（例如程序本身调用另一个程序，而这些选项是要原样传给被调用的子程序的）"

#: ../../library/optparse.rst:54
msgid ""
"the application requires some other command line parameter processing "
"behavior which ``argparse`` does not support, but which can be implemented "
"in terms of the lower level interface offered by ``optparse``"
msgstr ""
"这个应用程序需要其他一些 ``argparse`` 不支持，但是可利用 ``optparse`` 提供之底层接口实现的特殊的命令行参数处理行为"

#: ../../library/optparse.rst:58
msgid ""
"These considerations also mean that :mod:`optparse` is likely to provide a "
"better foundation for library authors writing third party command line "
"argument processing libraries."
msgstr "这些考量也意味着 :mod:`optparse` 或可为代码库编写者撰写第三方命令行参数解析库时提供更好的基础。"

#: ../../library/optparse.rst:62
msgid ""
"As a concrete example, consider the following two command line argument "
"parsing configurations, the first using ``optparse``, and the second using "
"``argparse``:"
msgstr ""
"以下提供一个具体的例子。请见下方两段命令行参数解析代码，其中第一段使用 ``optparse`` 实现；第二段使用 ``argparse`` 实现："

#: ../../library/optparse.rst:66
msgid ""
"import optparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = optparse.OptionParser()\n"
"    parser.add_option('-o', '--output')\n"
"    parser.add_option('-v', dest='verbose', action='store_true')\n"
"    opts, args = parser.parse_args()\n"
"    process(args, output=opts.output, verbose=opts.verbose)"
msgstr ""
"import optparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = optparse.OptionParser()\n"
"    parser.add_option('-o', '--output')\n"
"    parser.add_option('-v', dest='verbose', action='store_true')\n"
"    opts, args = parser.parse_args()\n"
"    process(args, output=opts.output, verbose=opts.verbose)"

#: ../../library/optparse.rst:77
msgid ""
"import argparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = argparse.ArgumentParser()\n"
"    parser.add_argument('-o', '--output')\n"
"    parser.add_argument('-v', dest='verbose', action='store_true')\n"
"    parser.add_argument('rest', nargs='*')\n"
"    args = parser.parse_args()\n"
"    process(args.rest, output=args.output, verbose=args.verbose)"
msgstr ""
"import argparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = argparse.ArgumentParser()\n"
"    parser.add_argument('-o', '--output')\n"
"    parser.add_argument('-v', dest='verbose', action='store_true')\n"
"    parser.add_argument('rest', nargs='*')\n"
"    args = parser.parse_args()\n"
"    process(args.rest, output=args.output, verbose=args.verbose)"

#: ../../library/optparse.rst:89
msgid ""
"The most obvious difference is that in the ``optparse`` version, the non-"
"option arguments are processed separately by the application after the "
"option processing is complete. In the ``argparse`` version, positional "
"arguments are declared and processed in the same way as the named options."
msgstr ""
"最明显的差异就是在 ``optparse`` 版本中，无选项参数是在选项处理完成后由应用程序单独处理的。 在 ``argparse`` "
"版本中，位置参数则是以与带名称的选项相同的方式声明和处理的。"

#: ../../library/optparse.rst:94
msgid ""
"However, the ``argparse`` version will also handle some parameter "
"combination differently from the way the ``optparse`` version would handle "
"them. For example (amongst other differences):"
msgstr "不过，``argparse`` 版本还会以与 ``optparse`` 版本不同的方式处理某些形参组合。 例如（除其他差异之外）："

#: ../../library/optparse.rst:98
msgid ""
"supplying ``-o -v`` gives ``output=\"-v\"`` and ``verbose=False`` when using"
" ``optparse``, but a usage error with ``argparse`` (complaining that no "
"value has been supplied for ``-o/--output``, since ``-v`` is interpreted as "
"meaning the verbosity flag)"
msgstr ""
"当使用 ``optparse`` 时 ``-o -v`` 是指定 ``output=\"-v\"`` 和 ``verbose=False``，但对于 "
"``argparse`` 则为错误用法（将报告没有为 ``-o/--output`` 提供值，因为 ``-v`` 会被解读为代表 verbosity "
"旗标）"

#: ../../library/optparse.rst:102
msgid ""
"similarly, supplying ``-o --`` gives ``output=\"--\"`` and ``args=()`` when "
"using ``optparse``, but a usage error with ``argparse`` (also complaining "
"that no value has been supplied for ``-o/--output``, since ``--`` is "
"interpreted as terminating the option processing and treating all remaining "
"values as positional arguments)"
msgstr ""
"类似地，当使用 ``optparse`` 时提供 ``-o --`` 是指定 ``output=\"--\"`` 和 ``args=()``，但对于 "
"``argparse`` 则为错误用法（同样将报告没有为 ``-o/--output`` 提供值，因为 ``--`` "
"会被解读为结束选项处理并将所有剩余的值视为位置参数）"

#: ../../library/optparse.rst:107
msgid ""
"supplying ``-o=foo`` gives ``output=\"=foo\"`` when using ``optparse``, but "
"gives ``output=\"foo\"`` with ``argparse`` (since ``=`` is special cased as "
"an alternative separator for option parameter values)"
msgstr ""
"当使用 ``optparse`` 时提供 ``-o=foo`` 是指定 ``output=\"=foo\"``，但对于 ``argparse`` 则为 "
"``output=\"foo\"`` (因为 ``=`` 是被作为选项形参值的替代分隔符的特例)。"

#: ../../library/optparse.rst:111
msgid ""
"Whether these differing behaviors in the ``argparse`` version are considered"
" desirable or a problem will depend on the specific command line application"
" use case."
msgstr "这些在 ``argparse`` 版本中存在差异的行为是有必要的还是有问题的将取决于特定命令行应用程序的使用场景。"

#: ../../library/optparse.rst:117
msgid ""
":pypi:`click` is a third party argument processing library (originally based"
" on ``optparse``), which allows command line applications to be developed as"
" a set of decorated command implementation functions."
msgstr ""
":pypi:`click` 是一个第三方参数处理库（最初是以 ``optparse`` "
"为基础），它允许命令行应用程序以一组被装饰的命令实现函数的方式来开发。"

#: ../../library/optparse.rst:121
msgid ""
"Other third party libraries, such as :pypi:`typer` or :pypi:`msgspec-click`,"
" allow command line interfaces to be specified in ways that more effectively"
" integrate with static checking of Python type annotations."
msgstr ""
"其他的第三方库，例如 :pypi:`typer` 或 :pypi:`msgspec-click`，允许命令行界面以更有效率地集成 Python "
"类型标注静态检查的方式来指定。"

#: ../../library/optparse.rst:127
msgid "Introduction"
msgstr "概述"

#: ../../library/optparse.rst:129
msgid ""
":mod:`optparse` is a more convenient, flexible, and powerful library for "
"parsing command-line options than the minimalist :mod:`getopt` module. "
":mod:`optparse` uses a more declarative style of command-line parsing: you "
"create an instance of :class:`OptionParser`, populate it with options, and "
"parse the command line. :mod:`optparse` allows users to specify options in "
"the conventional GNU/POSIX syntax, and additionally generates usage and help"
" messages for you."
msgstr ""
":mod:`optparse` 是一个相比极简风格的 :mod:`getopt` 模块更为方便、灵活和强大的命令行选项解析库。 "
":mod:`optparse` 使用更趋声明式的命令行解析风格：创建一个 :class:`OptionParser` "
"的实例，使用选项来填充它，然后解析命令行。 :mod:`optparse` 允许用户以传统的 GNU/POSIX "
"语法来指定选项，并会为你生成额外的用法和帮助消息。"

#: ../../library/optparse.rst:137
msgid "Here's an example of using :mod:`optparse` in a simple script::"
msgstr "下面是在一个简单脚本中使用 :mod:`optparse` 的示例::"

#: ../../library/optparse.rst:139
msgid ""
"from optparse import OptionParser\n"
"...\n"
"parser = OptionParser()\n"
"parser.add_option(\"-f\", \"--file\", dest=\"filename\",\n"
"                  help=\"write report to FILE\", metavar=\"FILE\")\n"
"parser.add_option(\"-q\", \"--quiet\",\n"
"                  action=\"store_false\", dest=\"verbose\", default=True,\n"
"                  help=\"don't print status messages to stdout\")\n"
"\n"
"(options, args) = parser.parse_args()"
msgstr ""
"from optparse import OptionParser\n"
"...\n"
"parser = OptionParser()\n"
"parser.add_option(\"-f\", \"--file\", dest=\"filename\",\n"
"                  help=\"write report to FILE\", metavar=\"FILE\")\n"
"parser.add_option(\"-q\", \"--quiet\",\n"
"                  action=\"store_false\", dest=\"verbose\", default=True,\n"
"                  help=\"don't print status messages to stdout\")\n"
"\n"
"(options, args) = parser.parse_args()"

#: ../../library/optparse.rst:150
msgid ""
"With these few lines of code, users of your script can now do the \"usual "
"thing\" on the command-line, for example::"
msgstr "通过这几行代码，你的脚本的用户可以在命令行上完成“常见任务”，例如::"

#: ../../library/optparse.rst:153
msgid "<yourscript> --file=outfile -q"
msgstr "<yourscript> --file=outfile -q"

#: ../../library/optparse.rst:155
msgid ""
"As it parses the command line, :mod:`optparse` sets attributes of the "
"``options`` object returned by :meth:`~OptionParser.parse_args` based on "
"user-supplied command-line values.  When :meth:`~OptionParser.parse_args` "
"returns from parsing this command line, ``options.filename`` will be "
"``\"outfile\"`` and ``options.verbose`` will be ``False``.  :mod:`optparse` "
"supports both long and short options, allows short options to be merged "
"together, and allows options to be associated with their arguments in a "
"variety of ways.  Thus, the following command lines are all equivalent to "
"the above example::"
msgstr ""
"在它解析命令行时，:mod:`optparse` 会根据用户提供的命令行值设置 :meth:`~OptionParser.parse_args` "
"所返回的 ``options`` 对象的属性。 当 :meth:`~OptionParser.parse_args` "
"从解析此命令行返回时，``options.filename`` 将为 ``\"outfile\"`` 而 ``options.verbose`` 将为 "
"``False``。 :mod:`optparse` 支持长短两种形式的选项，允许多个短选项合并到一起，并允许选项以多种方式与其参数相关联。 "
"因此，以下命令行均等价于以上示例::"

#: ../../library/optparse.rst:164
msgid ""
"<yourscript> -f outfile --quiet\n"
"<yourscript> --quiet --file outfile\n"
"<yourscript> -q -foutfile\n"
"<yourscript> -qfoutfile"
msgstr ""
"<yourscript> -f outfile --quiet\n"
"<yourscript> --quiet --file outfile\n"
"<yourscript> -q -foutfile\n"
"<yourscript> -qfoutfile"

#: ../../library/optparse.rst:169
msgid "Additionally, users can run one of the following ::"
msgstr "此外，用户还可以运行以下命令之一 ::"

#: ../../library/optparse.rst:171
msgid ""
"<yourscript> -h\n"
"<yourscript> --help"
msgstr ""
"<yourscript> -h\n"
"<yourscript> --help"

#: ../../library/optparse.rst:174
msgid ""
"and :mod:`optparse` will print out a brief summary of your script's options:"
msgstr "这样 :mod:`optparse` 将打印出你的脚本的选项概要:"

#: ../../library/optparse.rst:176
msgid ""
"Usage: <yourscript> [options]\n"
"\n"
"Options:\n"
"  -h, --help            show this help message and exit\n"
"  -f FILE, --file=FILE  write report to FILE\n"
"  -q, --quiet           don't print status messages to stdout"
msgstr ""
"Usage: <yourscript> [options]\n"
"\n"
"Options:\n"
"  -h, --help            show this help message and exit\n"
"  -f FILE, --file=FILE  write report to FILE\n"
"  -q, --quiet           don't print status messages to stdout"

#: ../../library/optparse.rst:185
msgid ""
"where the value of *yourscript* is determined at runtime (normally from "
"``sys.argv[0]``)."
msgstr "其中 *yourscript* 的值是在运行时确定的 (通常来自 ``sys.argv[0]``)。"

#: ../../library/optparse.rst:192
msgid "Background"
msgstr "背景"

#: ../../library/optparse.rst:194
msgid ""
":mod:`optparse` was explicitly designed to encourage the creation of "
"programs with straightforward command-line interfaces that follow the "
"conventions established by the :c:func:`!getopt` family of functions "
"available to C developers. To that end, it supports only the most common "
"command-line syntax and semantics conventionally used under Unix.  If you "
"are unfamiliar with these conventions, reading this section will allow you "
"to acquaint yourself with them."
msgstr ""
":mod:`optparse` 被显式地设计为鼓励创建带有遵循 C 开发者所用的 :c:func:`!getopt` "
"函数族的惯例的简明直观的命令行接口的程序。 为了这个目标，它仅支持最常见的命令行语法和在 Unix 下使用的规范语义。 "
"如果你不熟悉这些惯例，阅读本章节将使你开始了解它们。"

#: ../../library/optparse.rst:205
msgid "Terminology"
msgstr "术语"

#: ../../library/optparse.rst:207
msgid "argument"
msgstr "argument -- 参数"

#: ../../library/optparse.rst:208
msgid ""
"a string entered on the command-line, and passed by the shell to ``execl()``"
" or ``execv()``.  In Python, arguments are elements of ``sys.argv[1:]`` "
"(``sys.argv[0]`` is the name of the program being executed).  Unix shells "
"also use the term \"word\"."
msgstr ""
"在命令行中输入的字符串，并会被 shell 传给 ``execl()`` 或 ``execv()``。 在 Python 中，参数将是 "
"``sys.argv[1:]`` 的元素 (``sys.argv[0]`` 是被执行的程序的名称)。 Unix shell 也使用术语 \"word\""
" 来指代参数。"

#: ../../library/optparse.rst:213
msgid ""
"It is occasionally desirable to substitute an argument list other than "
"``sys.argv[1:]``, so you should read \"argument\" as \"an element of "
"``sys.argv[1:]``, or of some other list provided as a substitute for "
"``sys.argv[1:]``\"."
msgstr ""
"有时替换 ``sys.argv[1:]`` 以外的参数列表也是必要的，所以你应当将 \"参数\" 当作是 \"``sys.argv[1:]`` "
"的一个元素，或者是作为 ``sys.argv[1:]`` 的替代的其他列表\"。"

#: ../../library/optparse.rst:218
msgid "option"
msgstr "选项"

#: ../../library/optparse.rst:219
msgid ""
"an argument used to supply extra information to guide or customize the "
"execution of a program.  There are many different syntaxes for options; the "
"traditional Unix syntax is a hyphen (\"-\") followed by a single letter, "
"e.g. ``-x`` or ``-F``.  Also, traditional Unix syntax allows multiple "
"options to be merged into a single argument, e.g. ``-x -F`` is equivalent to"
" ``-xF``.  The GNU project introduced ``--`` followed by a series of hyphen-"
"separated words, e.g. ``--file`` or ``--dry-run``.  These are the only two "
"option syntaxes provided by :mod:`optparse`."
msgstr ""
"一个用来提供额外信息以指导或定制程序的执行的参数。 对于选项有许多不同的语法；传统的 Unix 语法是一个连字符 (\"-\") 后面跟单个字母，例如 "
"``-x`` 或 ``-F``。 此外，传统的 Unix 语法允许将多个选项合并为一个参数，例如 ``-x -F`` 就等价于 ``-xF``。 GNU"
" 项目引入了 ``--`` 后面跟一串以连字符分隔的单词，例如 ``--file`` 或 ``--dry-run``。 它们是 "
":mod:`optparse` 所提供的仅有的两种选项语法。"

#: ../../library/optparse.rst:228
msgid "Some other option syntaxes that the world has seen include:"
msgstr "存在于世上的其他一些选项语法包括:"

#: ../../library/optparse.rst:230
msgid ""
"a hyphen followed by a few letters, e.g. ``-pf`` (this is *not* the same as "
"multiple options merged into a single argument)"
msgstr "一个连字符后面跟几个字母，例如 ``-pf`` (这与多个选项合并成单个参数 *并不* 一样)"

#: ../../library/optparse.rst:233
msgid ""
"a hyphen followed by a whole word, e.g. ``-file`` (this is technically "
"equivalent to the previous syntax, but they aren't usually seen in the same "
"program)"
msgstr "一个连字符后面跟一个完整单词，例如 ``-file`` (这在技术上等同于前面的语法，但它们通常不在同一个程序中出现)"

#: ../../library/optparse.rst:237
msgid ""
"a plus sign followed by a single letter, or a few letters, or a word, e.g. "
"``+f``, ``+rgb``"
msgstr "一个加号后面跟一个字母，或几个字母，或一个单词，例如 ``+f``, ``+rgb``"

#: ../../library/optparse.rst:240
msgid ""
"a slash followed by a letter, or a few letters, or a word, e.g. ``/f``, "
"``/file``"
msgstr "一个斜杠后面跟一个字母，或几个字母，或一个单词，例如 ``/f``, ``/file``"

#: ../../library/optparse.rst:243
msgid ""
"These option syntaxes are not supported by :mod:`optparse`, and they never "
"will be.  This is deliberate: the first three are non-standard on any "
"environment, and the last only makes sense if you're exclusively targeting "
"Windows or certain legacy platforms (e.g. VMS, MS-DOS)."
msgstr ""
"这些选项语法都不被 :mod:`optparse` 所支持，也永远不会支持。 这是有意为之的：前三种在任何环境下都是非标准的，而最后一种只在你专门针对 "
"Windows 或某些旧平台（例如 VMS, MS-DOS）时才有意义。"

#: ../../library/optparse.rst:248
msgid "option argument"
msgstr "可选参数:"

#: ../../library/optparse.rst:249
msgid ""
"an argument that follows an option, is closely associated with that option, "
"and is consumed from the argument list when that option is. With "
":mod:`optparse`, option arguments may either be in a separate argument from "
"their option:"
msgstr ""
"一个跟在某个选项之后的参数，与该选项紧密相关，并会在该选项被消耗时从参数列表中被消耗。 使用 "
":mod:`optparse`，选项参数可以是其对应选项以外的一个单独参数:"

#: ../../library/optparse.rst:254
msgid ""
"-f foo\n"
"--file foo"
msgstr ""
"-f foo\n"
"--file foo"

#: ../../library/optparse.rst:259
msgid "or included in the same argument:"
msgstr "或是包括在同一个参数中:"

#: ../../library/optparse.rst:261
msgid ""
"-ffoo\n"
"--file=foo"
msgstr ""
"-ffoo\n"
"--file=foo"

#: ../../library/optparse.rst:266
msgid ""
"Typically, a given option either takes an argument or it doesn't. Lots of "
"people want an \"optional option arguments\" feature, meaning that some "
"options will take an argument if they see it, and won't if they don't.  This"
" is somewhat controversial, because it makes parsing ambiguous: if ``-a`` "
"takes an optional argument and ``-b`` is another option entirely, how do we "
"interpret ``-ab``?  Because of this ambiguity, :mod:`optparse` does not "
"support this feature."
msgstr ""
"通常，一个给定的选项将接受一个参数或是不接受。 许多人想要“可选的可选参数”特性，即某些选项将在看到特定参数时接受它，而如果没看到特定参数则不接受。 "
"在某种程度上说这一特性是存在争议的，因它它将使解析发生歧义：如果 ``-a`` 接受一个可选参数而 ``-b`` "
"是完全不同的另一个选项，那我们该如何解读 ``-ab`` 呢？ 由于这会存在歧义，因此 :mod:`optparse` 不支持这一特性。"

#: ../../library/optparse.rst:274
msgid "positional argument"
msgstr "positional argument -- 位置参数"

#: ../../library/optparse.rst:275
msgid ""
"something leftover in the argument list after options have been parsed, i.e."
" after options and their arguments have been parsed and removed from the "
"argument list."
msgstr "在解析选项之后，即在选项及其参数解析完成并从参数列表中移除后参数列表中余下的内容。"

#: ../../library/optparse.rst:279
msgid "required option"
msgstr "必选选项"

#: ../../library/optparse.rst:280
msgid ""
"an option that must be supplied on the command-line; note that the phrase "
"\"required option\" is self-contradictory in English.  :mod:`optparse` "
"doesn't prevent you from implementing required options, but doesn't give you"
" much help at it either."
msgstr ""
"必须在命令行中提供的选项；请注意在英文中 \"required option\" 这个短语是自相矛盾的。 :mod:`optparse` "
"不会阻止你实现必须选项，但也不会在这方面给你什么帮助。"

#: ../../library/optparse.rst:285
msgid "For example, consider this hypothetical command-line::"
msgstr "例如，考虑这个假设的命令行::"

#: ../../library/optparse.rst:287
msgid "prog -v --report report.txt foo bar"
msgstr "prog -v --report report.txt foo bar"

#: ../../library/optparse.rst:289
msgid ""
"``-v`` and ``--report`` are both options.  Assuming that ``--report`` takes "
"one argument, ``report.txt`` is an option argument.  ``foo`` and ``bar`` are"
" positional arguments."
msgstr ""
"``-v`` 和 ``--report`` 都是选项。 假定 ``--report`` 接受一个参数，``report.txt`` 是一个选项参数。 "
"``foo`` 和 ``bar`` 是位置参数。"

#: ../../library/optparse.rst:297
msgid "What are options for?"
msgstr "选项的作用是什么？"

#: ../../library/optparse.rst:299
msgid ""
"Options are used to provide extra information to tune or customize the "
"execution of a program.  In case it wasn't clear, options are usually "
"*optional*.  A program should be able to run just fine with no options "
"whatsoever.  (Pick a random program from the Unix or GNU toolsets.  Can it "
"run without any options at all and still make sense?  The main exceptions "
"are ``find``, ``tar``, and ``dd``\\ ---all of which are mutant oddballs that"
" have been rightly criticized for their non-standard syntax and confusing "
"interfaces.)"
msgstr ""
"选项被用来提供额外信息以便微调或定制程序的执行。 需要明确的一点是，选项通常都是 *可选的*。 一个程序应当能在没有设置任何选项的的情况下正常运行。 "
"（从 Unix 或 GNU 工具集中随机挑选一个程序。 它是否能在未设置任何选项的情况下运行并且仍然得到有意义的结果？ 主要的例外有 ``find``,"
" ``tar`` 和 ``dd`` --- 它们都是些因为语法不标准和界面混乱而受到公正抨击的变异奇行种。）"

#: ../../library/optparse.rst:307
msgid ""
"Lots of people want their programs to have \"required options\".  Think "
"about it. If it's required, then it's *not optional*!  If there is a piece "
"of information that your program absolutely requires in order to run "
"successfully, that's what positional arguments are for."
msgstr ""
"有很多人希望他们的程序具有“必需选项”。 请再思考一下。 如果某个项是必需的，那么它就 *不是可选的*！ "
"如果你的程序必需要有某项信息才能成功运行，则它更适合作为位置参数。"

#: ../../library/optparse.rst:312
msgid ""
"As an example of good command-line interface design, consider the humble "
"``cp`` utility, for copying files.  It doesn't make much sense to try to "
"copy files without supplying a destination and at least one source. Hence, "
"``cp`` fails if you run it with no arguments.  However, it has a flexible, "
"useful syntax that does not require any options at all::"
msgstr ""
"作为良好的命令行界面设计的一个例子，请看基本的用于拷贝文件的 ``cp`` 工具。 试图拷贝文件而不提供一个目标和至少一个源是没有什么意义的。 "
"因此，如果你不带参数地运行 ``cp`` 它将会报错。 不过，它具有一个完全不需要任何选项的灵活、易用的语法::"

#: ../../library/optparse.rst:318
msgid ""
"cp SOURCE DEST\n"
"cp SOURCE ... DEST-DIR"
msgstr ""
"cp SOURCE DEST\n"
"cp SOURCE ... DEST-DIR"

#: ../../library/optparse.rst:321
msgid ""
"You can get pretty far with just that.  Most ``cp`` implementations provide "
"a bunch of options to tweak exactly how the files are copied: you can "
"preserve mode and modification time, avoid following symlinks, ask before "
"clobbering existing files, etc.  But none of this distracts from the core "
"mission of ``cp``, which is to copy either one file to another, or several "
"files to another directory."
msgstr ""
"你只使用这个语法就能畅行无阻。 大多数 ``cp`` "
"实现还提供了许多精确调整文件拷贝方式的选项：你可以保留模式和修改时间，避免跟随符号链接，覆盖现有文件之前先询问，诸如此类。 但这些都不会破坏 "
"``cp`` 的核心任务，即将一个文件拷贝为另一个文件，或将多个文件拷贝到另一个目录。"

#: ../../library/optparse.rst:332
msgid "What are positional arguments for?"
msgstr "位置参数有什么用？"

#: ../../library/optparse.rst:334
msgid ""
"Positional arguments are for those pieces of information that your program "
"absolutely, positively requires to run."
msgstr "位置参数是对于你的程序运行来说绝对、肯定需要的信息片段。"

#: ../../library/optparse.rst:337
msgid ""
"A good user interface should have as few absolute requirements as possible."
"  If your program requires 17 distinct pieces of information in order to run"
" successfully, it doesn't much matter *how* you get that information from "
"the user---most people will give up and walk away before they successfully "
"run the program.  This applies whether the user interface is a command-line,"
" a configuration file, or a GUI: if you make that many demands on your "
"users, most of them will simply give up."
msgstr ""
"一个好的用户界面应当尽可能少地设置绝对必需提供的信息。 如果你的程序必需提供 17 项不同的信息片段才能成功运行，那么你要 *如何* "
"从用户获取这些信息将不是问题的关键 --- 大多数人会在他们成功运行此程序之前放弃并离开。 无论用户界面是命令行、配置文件还是 GUI "
"都一样适用：如果你对你的用户提出如此多的要求，它们大多将会直接放弃。"

#: ../../library/optparse.rst:345
msgid ""
"In short, try to minimize the amount of information that users are "
"absolutely required to supply---use sensible defaults whenever possible.  Of"
" course, you also want to make your programs reasonably flexible.  That's "
"what options are for.  Again, it doesn't matter if they are entries in a "
"config file, widgets in the \"Preferences\" dialog of a GUI, or command-line"
" options---the more options you implement, the more flexible your program "
"is, and the more complicated its implementation becomes.  Too much "
"flexibility has drawbacks as well, of course; too many options can overwhelm"
" users and make your code much harder to maintain."
msgstr ""
"简而言之，请尽量最小化绝对要求用户提供的信息量 --- 只要有可能就使用合理的默认值。 当然，你希望程序足够灵活也是合理的。 这就是选项的作用。 "
"同样，选项是配置文件中的条目，GUI 中的“首选项”对话框中的控件，还是命令行选项不是问题的关键 --- "
"你实现的选项越多，你的程序就越灵活，它的具体实现也会变得更为复杂。 当然，太大的灵活性也存在缺点；过多的选项会让用户更难掌握并使你的代码更难维护。"

#: ../../library/optparse.rst:358
msgid "Tutorial"
msgstr "教程"

#: ../../library/optparse.rst:360
msgid ""
"While :mod:`optparse` is quite flexible and powerful, it's also "
"straightforward to use in most cases.  This section covers the code patterns"
" that are common to any :mod:`optparse`\\ -based program."
msgstr ""
"虽然 :mod:`optparse` 非常灵活和强大，但在大多数情况下它也很简明易用。 本小节介绍了任何基于 :mod:`optparse` "
"的程序中常见的代码模式。"

#: ../../library/optparse.rst:364
msgid ""
"First, you need to import the OptionParser class; then, early in the main "
"program, create an OptionParser instance::"
msgstr "首先，你需要导入 OptionParser 类；然后在主程序的开头部分，创建一个 OptionParser 实例::"

#: ../../library/optparse.rst:367
msgid ""
"from optparse import OptionParser\n"
"...\n"
"parser = OptionParser()"
msgstr ""
"from optparse import OptionParser\n"
"...\n"
"parser = OptionParser()"

#: ../../library/optparse.rst:371
msgid "Then you can start defining options.  The basic syntax is::"
msgstr "然后你可以开始定义选项。 基本语法如下::"

#: ../../library/optparse.rst:373
msgid ""
"parser.add_option(opt_str, ...,\n"
"                  attr=value, ...)"
msgstr ""
"parser.add_option(opt_str, ...,\n"
"                  attr=value, ...)"

#: ../../library/optparse.rst:376
msgid ""
"Each option has one or more option strings, such as ``-f`` or ``--file``, "
"and several option attributes that tell :mod:`optparse` what to expect and "
"what to do when it encounters that option on the command line."
msgstr ""
"每个选项有一个或多个选项字符串，如 ``-f`` 或 ``--file``，以及一些选项属性用来告诉 :mod:`optparse` "
"当它在命令行中遇到该选项时将得到什么和需要做什么。"

#: ../../library/optparse.rst:380
msgid ""
"Typically, each option will have one short option string and one long option"
" string, e.g.::"
msgstr "通常，每个选项都会有一个短选项字符串和一个长选项字符串，例如 ::"

#: ../../library/optparse.rst:383
msgid "parser.add_option(\"-f\", \"--file\", ...)"
msgstr "parser.add_option(\"-f\", \"--file\", ...)"

#: ../../library/optparse.rst:385
msgid ""
"You're free to define as many short option strings and as many long option "
"strings as you like (including zero), as long as there is at least one "
"option string overall."
msgstr "你可以随你的喜好自由定义任意数量的短选项字符串和任意数量的长选项字符串（包括零个），只要总计至少有一个选项字符串。"

#: ../../library/optparse.rst:389
msgid ""
"The option strings passed to :meth:`OptionParser.add_option` are effectively"
" labels for the option defined by that call.  For brevity, we will "
"frequently refer to *encountering an option* on the command line; in "
"reality, :mod:`optparse` encounters *option strings* and looks up options "
"from them."
msgstr ""
"传给 :meth:`OptionParser.add_option` 的选项字符串实际上是特定调用所定义的选项的标签。 "
"为了表述简单，我们将经常会说在命令行中 *遇到一个选项*；而实际上，:mod:`optparse` 是遇到了 *选项字符串* 并根据它们来查找选项。"

#: ../../library/optparse.rst:395
msgid ""
"Once all of your options are defined, instruct :mod:`optparse` to parse your"
" program's command line::"
msgstr "一旦你定义好所有的选项，即可指令 :mod:`optparse` 来解析你的程序的命令行::"

#: ../../library/optparse.rst:398
msgid "(options, args) = parser.parse_args()"
msgstr "(options, args) = parser.parse_args()"

#: ../../library/optparse.rst:400
msgid ""
"(If you like, you can pass a custom argument list to "
":meth:`~OptionParser.parse_args`, but that's rarely necessary: by default it"
" uses ``sys.argv[1:]``.)"
msgstr ""
"（如果你愿意，可以将自定义的参数列表传给 :meth:`~OptionParser.parse_args`，但很少有必要这样做：默认它将使用 "
"``sys.argv[1:]``。）"

#: ../../library/optparse.rst:403
msgid ":meth:`~OptionParser.parse_args` returns two values:"
msgstr ":meth:`~OptionParser.parse_args` 返回两个值:"

#: ../../library/optparse.rst:405
msgid ""
"``options``, an object containing values for all of your options---e.g. if "
"``--file`` takes a single string argument, then ``options.file`` will be the"
" filename supplied by the user, or ``None`` if the user did not supply that "
"option"
msgstr ""
"``options``，一个包含你所有的选项的值的对象 --- 举例来说，如果 ``--file`` 接受一个字符串参数，则 "
"``options.file`` 将为用户所提供的文件名，或者如果用户未提供该选项则为 ``None``"

#: ../../library/optparse.rst:410
msgid ""
"``args``, the list of positional arguments leftover after parsing options"
msgstr "``args``，由解析选项之后余下的位置参数组成的列表"

#: ../../library/optparse.rst:412
msgid ""
"This tutorial section only covers the four most important option attributes:"
" :attr:`~Option.action`, :attr:`~Option.type`, :attr:`~Option.dest` "
"(destination), and :attr:`~Option.help`. Of these, :attr:`~Option.action` is"
" the most fundamental."
msgstr ""
"本教学章节只介绍了四个最重要的选项属性: :attr:`~Option.action`, :attr:`~Option.type`, "
":attr:`~Option.dest` (destination) 和 :attr:`~Option.help`。 "
"其中，:attr:`~Option.action` 是最基本的一个。"

#: ../../library/optparse.rst:421
msgid "Understanding option actions"
msgstr "理解选项动作"

#: ../../library/optparse.rst:423
msgid ""
"Actions tell :mod:`optparse` what to do when it encounters an option on the "
"command line.  There is a fixed set of actions hard-coded into "
":mod:`optparse`; adding new actions is an advanced topic covered in section "
":ref:`optparse-extending-optparse`.  Most actions tell :mod:`optparse` to "
"store a value in some variable---for example, take a string from the command"
" line and store it in an attribute of ``options``."
msgstr ""
"动作是告诉 :mod:`optparse` 当它在命令行中遇到某个选项时要做什么。 有一个固定的动作集被硬编码到 :mod:`optparse` "
"内部；添加新的动作是将在 :ref:`optparse-extending-optparse` 章节中介绍的进阶内容。  大多数动作都是告诉 "
":mod:`optparse` 将特定的值存储到某个变量中 --- 例如，从命令行接收一个字符串并将其存储到 ``options`` 的某个选项中。"

#: ../../library/optparse.rst:430
msgid ""
"If you don't specify an option action, :mod:`optparse` defaults to "
"``store``."
msgstr "如果你没有指定一个选项动作，:mod:`optparse` 将默认选择 ``store``。"

#: ../../library/optparse.rst:436
msgid "The store action"
msgstr "store 动作"

#: ../../library/optparse.rst:438
msgid ""
"The most common option action is ``store``, which tells :mod:`optparse` to "
"take the next argument (or the remainder of the current argument), ensure "
"that it is of the correct type, and store it to your chosen destination."
msgstr ""
"最常用的选项动作是 ``store``，它告诉 :mod:`optparse` "
"接收下一个参数（或当前参数的剩余部分），确认其为正确的类型，并将其保存至你选择的目标。"

#: ../../library/optparse.rst:442
msgid "For example::"
msgstr "例如："

#: ../../library/optparse.rst:444
msgid ""
"parser.add_option(\"-f\", \"--file\",\n"
"                  action=\"store\", type=\"string\", dest=\"filename\")"
msgstr ""
"parser.add_option(\"-f\", \"--file\",\n"
"                  action=\"store\", type=\"string\", dest=\"filename\")"

#: ../../library/optparse.rst:447
msgid ""
"Now let's make up a fake command line and ask :mod:`optparse` to parse it::"
msgstr "现在让我们编一个虚假的命令行并让 :mod:`optparse` 来解析它::"

#: ../../library/optparse.rst:449
msgid ""
"args = [\"-f\", \"foo.txt\"]\n"
"(options, args) = parser.parse_args(args)"
msgstr ""
"args = [\"-f\", \"foo.txt\"]\n"
"(options, args) = parser.parse_args(args)"

#: ../../library/optparse.rst:452
msgid ""
"When :mod:`optparse` sees the option string ``-f``, it consumes the next "
"argument, ``foo.txt``, and stores it in ``options.filename``.  So, after "
"this call to :meth:`~OptionParser.parse_args`, ``options.filename`` is "
"``\"foo.txt\"``."
msgstr ""
"当 :mod:`optparse` 看到选项字符串 ``-f`` 时，它将获取下一个参数 ``foo.txt``，并将其保存到 "
"``options.filename`` 中。 因此，在这个对 :meth:`~OptionParser.parse_args` "
"的调用之后，``options.filename`` 将为 ``\"foo.txt\"``。"

#: ../../library/optparse.rst:456
msgid ""
"Some other option types supported by :mod:`optparse` are ``int`` and "
"``float``. Here's an option that expects an integer argument::"
msgstr "受到 :mod:`optparse` 支持的其他一些选项类型有 ``int`` 和 ``float``。 下面是一个接受整数参数的选项::"

#: ../../library/optparse.rst:459
msgid "parser.add_option(\"-n\", type=\"int\", dest=\"num\")"
msgstr "parser.add_option(\"-n\", type=\"int\", dest=\"num\")"

#: ../../library/optparse.rst:461
msgid ""
"Note that this option has no long option string, which is perfectly "
"acceptable. Also, there's no explicit action, since the default is "
"``store``."
msgstr "请注意这个选项没有长选项字符串，这是完全可接受的。 而且，它也没有显式的动作，因为使用默认的 ``store``。"

#: ../../library/optparse.rst:464
msgid ""
"Let's parse another fake command-line.  This time, we'll jam the option "
"argument right up against the option: since ``-n42`` (one argument) is "
"equivalent to ``-n 42`` (two arguments), the code ::"
msgstr ""
"让我们解析另一个虚假的命令行。 这一次，我们将让选项参数与选项紧贴在一起：因为 ``-n42`` (一个参数) 与 ``-n 42`` (两个参数) "
"是等价的，以下代码 ::"

#: ../../library/optparse.rst:468
msgid ""
"(options, args) = parser.parse_args([\"-n42\"])\n"
"print(options.num)"
msgstr ""
"(options, args) = parser.parse_args([\"-n42\"])\n"
"print(options.num)"

#: ../../library/optparse.rst:471
msgid "will print ``42``."
msgstr "将会打印 ``42``。"

#: ../../library/optparse.rst:473
msgid ""
"If you don't specify a type, :mod:`optparse` assumes ``string``.  Combined "
"with the fact that the default action is ``store``, that means our first "
"example can be a lot shorter::"
msgstr ""
"如果你没有指明类型，:mod:`optparse` 会假定类型为 ``string``。 加上默认动作为 ``store`` "
"这一事实，意味着我们的第一个示例可以变得更加简短::"

#: ../../library/optparse.rst:477
msgid "parser.add_option(\"-f\", \"--file\", dest=\"filename\")"
msgstr "parser.add_option(\"-f\", \"--file\", dest=\"filename\")"

#: ../../library/optparse.rst:479
msgid ""
"If you don't supply a destination, :mod:`optparse` figures out a sensible "
"default from the option strings: if the first long option string is ``--foo-"
"bar``, then the default destination is ``foo_bar``.  If there are no long "
"option strings, :mod:`optparse` looks at the first short option string: the "
"default destination for ``-f`` is ``f``."
msgstr ""
"如果你没有提供目标，:mod:`optparse` 会从选项字符串推断出一个合理的默认目标：如果第一个长选项字符串为 ``--foo-"
"bar``，则默认目标为 ``foo_bar``。 如果没有长选项字符串，则 :mod:`optparse` 会查找第一个短选项字符串：针对 "
"``-f`` 的默认目标将为 ``f``。"

#: ../../library/optparse.rst:485
msgid ""
":mod:`optparse` also includes the built-in ``complex`` type.  Adding types "
"is covered in section :ref:`optparse-extending-optparse`."
msgstr ""
":mod:`optparse` 还包括了内置的 ``complex`` 类型。 添加类型的方式将在 :ref:`optparse-extending-"
"optparse` 一节中介绍。"

#: ../../library/optparse.rst:492
msgid "Handling boolean (flag) options"
msgstr "处理布尔值（旗标）选项"

#: ../../library/optparse.rst:494
msgid ""
"Flag options---set a variable to true or false when a particular option is "
"seen---are quite common.  :mod:`optparse` supports them with two separate "
"actions, ``store_true`` and ``store_false``.  For example, you might have a "
"``verbose`` flag that is turned on with ``-v`` and off with ``-q``::"
msgstr ""
"旗标选项 --- 当看到特定选项时将某个变量设为真值或假值 --- 是相当常见的。 :mod:`optparse` "
"通过两个单独的动作支持它们，``store_true`` 和 ``store_false``。 例如，你可能会有个 ``verbose`` 旗标将通过 "
"``-v`` 来启用并通过 ``-q`` 来禁用::"

#: ../../library/optparse.rst:499
msgid ""
"parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\")\n"
"parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\")"
msgstr ""
"parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\")\n"
"parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\")"

#: ../../library/optparse.rst:502
msgid ""
"Here we have two different options with the same destination, which is "
"perfectly OK.  (It just means you have to be a bit careful when setting "
"default values---see below.)"
msgstr "这里我们有两个相同目标的不同选项，这是完全可行的。 （只是这意味着在设置默认值时你必须更加小心 --- 见下文所述。）"

#: ../../library/optparse.rst:506
msgid ""
"When :mod:`optparse` encounters ``-v`` on the command line, it sets "
"``options.verbose`` to ``True``; when it encounters ``-q``, "
"``options.verbose`` is set to ``False``."
msgstr ""
"当 :mod:`optparse` 在命令行中遇到 ``-v`` 时，它会将 ``options.verbose`` 设为 ``True``；当它遇到 "
"``-q`` 时，则会将 ``options.verbose`` 设为 ``False``。"

#: ../../library/optparse.rst:514
msgid "Other actions"
msgstr "其他动作"

#: ../../library/optparse.rst:516
msgid "Some other actions supported by :mod:`optparse` are:"
msgstr "受到 :mod:`optparse` 支持的其他动作还有:"

#: ../../library/optparse.rst:518 ../../library/optparse.rst:1040
msgid "``\"store_const\"``"
msgstr "``\"store_const\"``"

#: ../../library/optparse.rst:519 ../../library/optparse.rst:1041
msgid "store a constant value, pre-set via :attr:`Option.const`"
msgstr "存储一个常量值，通过 :attr:`Option.const` 预设"

#: ../../library/optparse.rst:521 ../../library/optparse.rst:1049
msgid "``\"append\"``"
msgstr "``\"append\"``"

#: ../../library/optparse.rst:522 ../../library/optparse.rst:1050
msgid "append this option's argument to a list"
msgstr "将此选项的参数添加到一个列表"

#: ../../library/optparse.rst:524 ../../library/optparse.rst:1055
msgid "``\"count\"``"
msgstr "``\"count\"``"

#: ../../library/optparse.rst:525 ../../library/optparse.rst:1056
msgid "increment a counter by one"
msgstr "让指定的计数器加一"

#: ../../library/optparse.rst:527 ../../library/optparse.rst:1058
msgid "``\"callback\"``"
msgstr "``\"callback\"``"

#: ../../library/optparse.rst:528 ../../library/optparse.rst:1059
msgid "call a specified function"
msgstr "调用指定函数"

#: ../../library/optparse.rst:530
msgid ""
"These are covered in section :ref:`optparse-reference-guide`, and section "
":ref:`optparse-option-callbacks`."
msgstr ""
"这些在 :ref:`optparse-reference-guide`，以及 :ref:`optparse-option-callbacks` "
"等章节中有说明。"

#: ../../library/optparse.rst:537
msgid "Default values"
msgstr "默认值"

#: ../../library/optparse.rst:539
msgid ""
"All of the above examples involve setting some variable (the "
"\"destination\") when certain command-line options are seen.  What happens "
"if those options are never seen?  Since we didn't supply any defaults, they "
"are all set to ``None``.  This is usually fine, but sometimes you want more "
"control.  :mod:`optparse` lets you supply a default value for each "
"destination, which is assigned before the command line is parsed."
msgstr ""
"上述示例全都涉及当看到特定命令行选项时设置某些变量（即“目标”）的操作。 "
"如果从未看到这些选项那么会发生什么叱？由于我们没有提供任何默认值，它们全都会被设为 ``None``。 这通常是可以的，但有时你会想要更多的控制。 "
":mod:`optparse` 允许你为每个目标提供默认值，它们将在解析命令行之前被赋值。"

#: ../../library/optparse.rst:546
msgid ""
"First, consider the verbose/quiet example.  If we want :mod:`optparse` to "
"set ``verbose`` to ``True`` unless ``-q`` is seen, then we can do this::"
msgstr ""
"首先，考虑这个 verbose/quiet 示例。 如果我们希望 :mod:`optparse` 将 ``verbose`` 设为 ``True`` "
"除非看到了 ``-q``，那么我们可以这样做::"

#: ../../library/optparse.rst:549
msgid ""
"parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\", default=True)\n"
"parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\")"
msgstr ""
"parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\", default=True)\n"
"parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\")"

#: ../../library/optparse.rst:552
msgid ""
"Since default values apply to the *destination* rather than to any "
"particular option, and these two options happen to have the same "
"destination, this is exactly equivalent::"
msgstr "由于默认值将应用到 *destination* 而不是任何特定选项，并且这两个选项正好具有相同的目标，因此这是完全等价的::"

#: ../../library/optparse.rst:556
msgid ""
"parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\")\n"
"parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\", default=True)"
msgstr ""
"parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\")\n"
"parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\", default=True)"

#: ../../library/optparse.rst:559
msgid "Consider this::"
msgstr "考虑一下："

#: ../../library/optparse.rst:561
msgid ""
"parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\", default=False)\n"
"parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\", default=True)"
msgstr ""
"parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\", default=False)\n"
"parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\", default=True)"

#: ../../library/optparse.rst:564
msgid ""
"Again, the default value for ``verbose`` will be ``True``: the last default "
"value supplied for any particular destination is the one that counts."
msgstr "同样地，``verbose`` 的默认值将为 ``True``: 最终生效的将是最后提供给任何特定目标的默认值。"

#: ../../library/optparse.rst:567
msgid ""
"A clearer way to specify default values is the :meth:`set_defaults` method "
"of OptionParser, which you can call at any time before calling "
":meth:`~OptionParser.parse_args`::"
msgstr ""
"一种更清晰的默认值指定方式是使用 OptionParser 的 :meth:`set_defaults` 方法，你可以在调用 "
":meth:`~OptionParser.parse_args` 之前的任何时候调用它::"

#: ../../library/optparse.rst:571
msgid ""
"parser.set_defaults(verbose=True)\n"
"parser.add_option(...)\n"
"(options, args) = parser.parse_args()"
msgstr ""
"parser.set_defaults(verbose=True)\n"
"parser.add_option(...)\n"
"(options, args) = parser.parse_args()"

#: ../../library/optparse.rst:575
msgid ""
"As before, the last value specified for a given option destination is the "
"one that counts.  For clarity, try to use one method or the other of setting"
" default values, not both."
msgstr "如前面一样，最终生效的将是最后为特定选项目标指定的值。 为清楚起见，请使用一种或另外一种设置默认值的方法，而不要同时使用。"

#: ../../library/optparse.rst:583
msgid "Generating help"
msgstr "生成帮助"

#: ../../library/optparse.rst:585
msgid ""
":mod:`optparse`'s ability to generate help and usage text automatically is "
"useful for creating user-friendly command-line interfaces.  All you have to "
"do is supply a :attr:`~Option.help` value for each option, and optionally a "
"short usage message for your whole program.  Here's an OptionParser "
"populated with user-friendly (documented) options::"
msgstr ""
":mod:`optparse` 自动生成帮助和用法文本的功能适用于创建用户友好的命令行界面。 你所要做的只是为每个选项提供 "
":attr:`~Option.help` 值，并可选项为你的整个程序提供一条简短的用法消息。 下面是一个填充了用户友好的（文档）选项的 "
"OptionParser::"

#: ../../library/optparse.rst:591
msgid ""
"usage = \"usage: %prog [options] arg1 arg2\"\n"
"parser = OptionParser(usage=usage)\n"
"parser.add_option(\"-v\", \"--verbose\",\n"
"                  action=\"store_true\", dest=\"verbose\", default=True,\n"
"                  help=\"make lots of noise [default]\")\n"
"parser.add_option(\"-q\", \"--quiet\",\n"
"                  action=\"store_false\", dest=\"verbose\",\n"
"                  help=\"be vewwy quiet (I'm hunting wabbits)\")\n"
"parser.add_option(\"-f\", \"--filename\",\n"
"                  metavar=\"FILE\", help=\"write output to FILE\")\n"
"parser.add_option(\"-m\", \"--mode\",\n"
"                  default=\"intermediate\",\n"
"                  help=\"interaction mode: novice, intermediate, \"\n"
"                       \"or expert [default: %default]\")"
msgstr ""
"usage = \"usage: %prog [options] arg1 arg2\"\n"
"parser = OptionParser(usage=usage)\n"
"parser.add_option(\"-v\", \"--verbose\",\n"
"                  action=\"store_true\", dest=\"verbose\", default=True,\n"
"                  help=\"make lots of noise [default]\")\n"
"parser.add_option(\"-q\", \"--quiet\",\n"
"                  action=\"store_false\", dest=\"verbose\",\n"
"                  help=\"be vewwy quiet (I'm hunting wabbits)\")\n"
"parser.add_option(\"-f\", \"--filename\",\n"
"                  metavar=\"FILE\", help=\"write output to FILE\")\n"
"parser.add_option(\"-m\", \"--mode\",\n"
"                  default=\"intermediate\",\n"
"                  help=\"interaction mode: novice, intermediate, \"\n"
"                       \"or expert [default: %default]\")"

#: ../../library/optparse.rst:606
msgid ""
"If :mod:`optparse` encounters either ``-h`` or ``--help`` on the command-"
"line, or if you just call :meth:`parser.print_help`, it prints the following"
" to standard output:"
msgstr ""
"如果 :mod:`optparse` 在命令行中遇到了 ``-h`` 或 ``--help``，或者如果你调用了 "
":meth:`parser.print_help`，它会把以下内容打印到标准输出:"

#: ../../library/optparse.rst:610
msgid ""
"Usage: <yourscript> [options] arg1 arg2\n"
"\n"
"Options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbose         make lots of noise [default]\n"
"  -q, --quiet           be vewwy quiet (I'm hunting wabbits)\n"
"  -f FILE, --filename=FILE\n"
"                        write output to FILE\n"
"  -m MODE, --mode=MODE  interaction mode: novice, intermediate, or\n"
"                        expert [default: intermediate]"
msgstr ""
"Usage: <yourscript> [options] arg1 arg2\n"
"\n"
"Options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbose         make lots of noise [default]\n"
"  -q, --quiet           be vewwy quiet (I'm hunting wabbits)\n"
"  -f FILE, --filename=FILE\n"
"                        write output to FILE\n"
"  -m MODE, --mode=MODE  interaction mode: novice, intermediate, or\n"
"                        expert [default: intermediate]"

#: ../../library/optparse.rst:623
msgid ""
"(If the help output is triggered by a help option, :mod:`optparse` exits "
"after printing the help text.)"
msgstr "（如果帮助输出是由 help 选项触发的，:mod:`optparse` 将在打印帮助文本之后退出。）"

#: ../../library/optparse.rst:626
msgid ""
"There's a lot going on here to help :mod:`optparse` generate the best "
"possible help message:"
msgstr "在这里为帮助 :mod:`optparse` 生成尽可能好的帮助消息做了很多工作:"

#: ../../library/optparse.rst:629
msgid "the script defines its own usage message::"
msgstr "该脚本定义了自己的用法消息::"

#: ../../library/optparse.rst:631
msgid "usage = \"usage: %prog [options] arg1 arg2\""
msgstr "usage = \"usage: %prog [options] arg1 arg2\""

#: ../../library/optparse.rst:633
msgid ""
":mod:`optparse` expands ``%prog`` in the usage string to the name of the "
"current program, i.e. ``os.path.basename(sys.argv[0])``.  The expanded "
"string is then printed before the detailed option help."
msgstr ""
":mod:`optparse` 会将用法字符串中的 ``%prog`` 扩展为当前程序的名称，即 "
"``os.path.basename(sys.argv[0])``。 随后将在详细选项帮助之前打印这个经过扩展的字符串。"

#: ../../library/optparse.rst:637
msgid ""
"If you don't supply a usage string, :mod:`optparse` uses a bland but "
"sensible default: ``\"Usage: %prog [options]\"``, which is fine if your "
"script doesn't take any positional arguments."
msgstr ""
"如果你未提供用法字符串，:mod:`optparse` 将使用一个直白而合理的默认值: ``\"Usage: %prog "
"[options]\"``，这在你的脚本不接受任何位置参数时是可以的。"

#: ../../library/optparse.rst:641
msgid ""
"every option defines a help string, and doesn't worry about line-"
"wrapping---\\ :mod:`optparse` takes care of wrapping lines and making the "
"help output look good."
msgstr "每个选项都定义了帮助字符串，并且不用担心换行问题 --- :mod:`optparse` 将负责执行换行并使帮助输出有良好的外观格式。"

#: ../../library/optparse.rst:645
msgid ""
"options that take a value indicate this fact in their automatically "
"generated help message, e.g. for the \"mode\" option::"
msgstr "需要接受值的选项会在它们自动生成的帮助消息中提示这一点，例如对于 \"mode\" 选项::"

#: ../../library/optparse.rst:648
msgid "-m MODE, --mode=MODE"
msgstr "-m MODE, --mode=MODE"

#: ../../library/optparse.rst:650
msgid ""
"Here, \"MODE\" is called the meta-variable: it stands for the argument that "
"the user is expected to supply to ``-m``/``--mode``.  By default, "
":mod:`optparse` converts the destination variable name to uppercase and uses"
" that for the meta-variable.  Sometimes, that's not what you want---for "
"example, the ``--filename`` option explicitly sets ``metavar=\"FILE\"``, "
"resulting in this automatically generated option description::"
msgstr ""
"在这里，\"MODE\" 被称为元变量：它代表预期用户会提供给 ``-m``/``--mode`` 的参数。 "
"在默认情况下，:mod:`optparse` 会将目标变量名转换为大写形式并将其用作元变量。 有时，这并不是你所希望的 --- "
"例如，``--filename`` 选项显式地设置了 ``metavar=\"FILE\"``，结果将自动生成这样的选项描述::"

#: ../../library/optparse.rst:657
msgid "-f FILE, --filename=FILE"
msgstr "-f FILE, --filename=FILE"

#: ../../library/optparse.rst:659
msgid ""
"This is important for more than just saving space, though: the manually "
"written help text uses the meta-variable ``FILE`` to clue the user in that "
"there's a connection between the semi-formal syntax ``-f FILE`` and the "
"informal semantic description \"write output to FILE\". This is a simple but"
" effective way to make your help text a lot clearer and more useful for end "
"users."
msgstr ""
"不过，这具有比节省一点空间更重要的作用：手动编写的帮助文本使用元变量 ``FILE`` 来提示用户在半正式的语法 ``-f FILE`` 和非正式的描述"
" \"write output to FILE\" 之间存在联系。 这是一种使你的帮助文本更清晰并对最终用户来说更易用的简单而有效的方式。"

#: ../../library/optparse.rst:665
msgid ""
"options that have a default value can include ``%default`` in the help "
"string---\\ :mod:`optparse` will replace it with :func:`str` of the option's"
" default value.  If an option has no default value (or the default value is "
"``None``), ``%default`` expands to ``none``."
msgstr ""
"具有默认值的选项可以在帮助字符串中包括 ``%default`` --- :mod:`optparse` 将用该选项的默认值的 :func:`str` "
"来替代它。 如果一个选项没有默认值 (或默认值为 ``None``)，则 ``%default`` 将被扩展为 ``none``。"

#: ../../library/optparse.rst:671
msgid "Grouping Options"
msgstr "选项分组"

#: ../../library/optparse.rst:673
msgid ""
"When dealing with many options, it is convenient to group these options for "
"better help output.  An :class:`OptionParser` can contain several option "
"groups, each of which can contain several options."
msgstr ""
"在处理大量选项时，可以方便地将选项进行分组以提供更好的帮助输出。 :class:`OptionParser` "
"可以包含多个选项分组，每个分组可以包含多个选项。"

#: ../../library/optparse.rst:677
msgid "An option group is obtained using the class :class:`OptionGroup`:"
msgstr "选项分组是使用 :class:`OptionGroup` 类来生成的:"

#: ../../library/optparse.rst:681 ../../library/optparse.rst:1752
msgid "where"
msgstr "其中"

#: ../../library/optparse.rst:683
msgid ""
"parser is the :class:`OptionParser` instance the group will be inserted in "
"to"
msgstr "parser 是分组将被插入的 :class:`OptionParser` 实例"

#: ../../library/optparse.rst:685
msgid "title is the group title"
msgstr "title 是分组的标题"

#: ../../library/optparse.rst:686
msgid "description, optional, is a long description of the group"
msgstr "description，可选项，是分组的长描述文本"

#: ../../library/optparse.rst:688
msgid ""
":class:`OptionGroup` inherits from :class:`OptionContainer` (like "
":class:`OptionParser`) and so the :meth:`add_option` method can be used to "
"add an option to the group."
msgstr ""
":class:`OptionGroup` 继承自 :class:`OptionContainer` (类似 :class:`OptionParser`)"
" 因此 :meth:`add_option` 方法可被用来向分组添加选项。"

#: ../../library/optparse.rst:692
msgid ""
"Once all the options are declared, using the :class:`OptionParser` method "
":meth:`add_option_group` the group is added to the previously defined "
"parser."
msgstr ""
"一旦声明了所有选项，使用 :class:`OptionParser` 方法 :meth:`add_option_group` "
"即可将分组添加到之前定义的解析器。"

#: ../../library/optparse.rst:695
msgid ""
"Continuing with the parser defined in the previous section, adding an "
":class:`OptionGroup` to a parser is easy::"
msgstr "继续使用前一节定义的解析器，很容易将 :class:`OptionGroup` 添加到解析器中::"

#: ../../library/optparse.rst:698
msgid ""
"group = OptionGroup(parser, \"Dangerous Options\",\n"
"                    \"Caution: use these options at your own risk.  \"\n"
"                    \"It is believed that some of them bite.\")\n"
"group.add_option(\"-g\", action=\"store_true\", help=\"Group option.\")\n"
"parser.add_option_group(group)"
msgstr ""
"group = OptionGroup(parser, \"Dangerous Options\",\n"
"                    \"Caution: use these options at your own risk.  \"\n"
"                    \"It is believed that some of them bite.\")\n"
"group.add_option(\"-g\", action=\"store_true\", help=\"Group option.\")\n"
"parser.add_option_group(group)"

#: ../../library/optparse.rst:704
msgid "This would result in the following help output:"
msgstr "这将产生以下帮助输出:"

#: ../../library/optparse.rst:706
msgid ""
"Usage: <yourscript> [options] arg1 arg2\n"
"\n"
"Options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbose         make lots of noise [default]\n"
"  -q, --quiet           be vewwy quiet (I'm hunting wabbits)\n"
"  -f FILE, --filename=FILE\n"
"                        write output to FILE\n"
"  -m MODE, --mode=MODE  interaction mode: novice, intermediate, or\n"
"                        expert [default: intermediate]\n"
"\n"
"  Dangerous Options:\n"
"    Caution: use these options at your own risk.  It is believed that some\n"
"    of them bite.\n"
"\n"
"    -g                  Group option."
msgstr ""
"Usage: <yourscript> [options] arg1 arg2\n"
"\n"
"Options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbose         make lots of noise [default]\n"
"  -q, --quiet           be vewwy quiet (I'm hunting wabbits)\n"
"  -f FILE, --filename=FILE\n"
"                        write output to FILE\n"
"  -m MODE, --mode=MODE  interaction mode: novice, intermediate, or\n"
"                        expert [default: intermediate]\n"
"\n"
"  Dangerous Options:\n"
"    Caution: use these options at your own risk.  It is believed that some\n"
"    of them bite.\n"
"\n"
"    -g                  Group option."

#: ../../library/optparse.rst:725
msgid ""
"A bit more complete example might involve using more than one group: still "
"extending the previous example::"
msgstr "更完整一些的示例可能涉及使用多个分组：继续扩展之前的例子::"

#: ../../library/optparse.rst:728
msgid ""
"group = OptionGroup(parser, \"Dangerous Options\",\n"
"                    \"Caution: use these options at your own risk.  \"\n"
"                    \"It is believed that some of them bite.\")\n"
"group.add_option(\"-g\", action=\"store_true\", help=\"Group option.\")\n"
"parser.add_option_group(group)\n"
"\n"
"group = OptionGroup(parser, \"Debug Options\")\n"
"group.add_option(\"-d\", \"--debug\", action=\"store_true\",\n"
"                 help=\"Print debug information\")\n"
"group.add_option(\"-s\", \"--sql\", action=\"store_true\",\n"
"                 help=\"Print all SQL statements executed\")\n"
"group.add_option(\"-e\", action=\"store_true\", help=\"Print every action done\")\n"
"parser.add_option_group(group)"
msgstr ""
"group = OptionGroup(parser, \"Dangerous Options\",\n"
"                    \"Caution: use these options at your own risk.  \"\n"
"                    \"It is believed that some of them bite.\")\n"
"group.add_option(\"-g\", action=\"store_true\", help=\"Group option.\")\n"
"parser.add_option_group(group)\n"
"\n"
"group = OptionGroup(parser, \"Debug Options\")\n"
"group.add_option(\"-d\", \"--debug\", action=\"store_true\",\n"
"                 help=\"Print debug information\")\n"
"group.add_option(\"-s\", \"--sql\", action=\"store_true\",\n"
"                 help=\"Print all SQL statements executed\")\n"
"group.add_option(\"-e\", action=\"store_true\", help=\"Print every action done\")\n"
"parser.add_option_group(group)"

#: ../../library/optparse.rst:742
msgid "that results in the following output:"
msgstr "这会产生以下输出:"

#: ../../library/optparse.rst:744
msgid ""
"Usage: <yourscript> [options] arg1 arg2\n"
"\n"
"Options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbose         make lots of noise [default]\n"
"  -q, --quiet           be vewwy quiet (I'm hunting wabbits)\n"
"  -f FILE, --filename=FILE\n"
"                        write output to FILE\n"
"  -m MODE, --mode=MODE  interaction mode: novice, intermediate, or expert\n"
"                        [default: intermediate]\n"
"\n"
"  Dangerous Options:\n"
"    Caution: use these options at your own risk.  It is believed that some\n"
"    of them bite.\n"
"\n"
"    -g                  Group option.\n"
"\n"
"  Debug Options:\n"
"    -d, --debug         Print debug information\n"
"    -s, --sql           Print all SQL statements executed\n"
"    -e                  Print every action done"
msgstr ""
"Usage: <yourscript> [options] arg1 arg2\n"
"\n"
"Options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbose         make lots of noise [default]\n"
"  -q, --quiet           be vewwy quiet (I'm hunting wabbits)\n"
"  -f FILE, --filename=FILE\n"
"                        write output to FILE\n"
"  -m MODE, --mode=MODE  interaction mode: novice, intermediate, or expert\n"
"                        [default: intermediate]\n"
"\n"
"  Dangerous Options:\n"
"    Caution: use these options at your own risk.  It is believed that some\n"
"    of them bite.\n"
"\n"
"    -g                  Group option.\n"
"\n"
"  Debug Options:\n"
"    -d, --debug         Print debug information\n"
"    -s, --sql           Print all SQL statements executed\n"
"    -e                  Print every action done"

#: ../../library/optparse.rst:768
msgid ""
"Another interesting method, in particular when working programmatically with"
" option groups is:"
msgstr "另一个有趣的方法，特别适合在编程处理选项分组时使用:"

#: ../../library/optparse.rst:773
msgid ""
"Return the :class:`OptionGroup` to which the short or long option string "
"*opt_str* (e.g. ``'-o'`` or ``'--option'``) belongs. If there's no such "
":class:`OptionGroup`, return ``None``."
msgstr ""
"返回短或长选项字符串 *opt_str* (例如 ``'-o'`` 或 ``'--option'``) 所属的 "
":class:`OptionGroup`。 如果没有对应的 :class:`OptionGroup`，则返回 ``None``。"

#: ../../library/optparse.rst:780
msgid "Printing a version string"
msgstr "打印版本字符串"

#: ../../library/optparse.rst:782
msgid ""
"Similar to the brief usage string, :mod:`optparse` can also print a version "
"string for your program.  You have to supply the string as the ``version`` "
"argument to OptionParser::"
msgstr ""
"与简短用法字符串类似，:mod:`optparse` 还可以打印你的程序的版本字符串。 你必须将该字符串作为 ``version`` 参数提供给 "
"OptionParser::"

#: ../../library/optparse.rst:786
msgid "parser = OptionParser(usage=\"%prog [-f] [-q]\", version=\"%prog 1.0\")"
msgstr "parser = OptionParser(usage=\"%prog [-f] [-q]\", version=\"%prog 1.0\")"

#: ../../library/optparse.rst:788
msgid ""
"``%prog`` is expanded just like it is in ``usage``.  Apart from that, "
"``version`` can contain anything you like.  When you supply it, "
":mod:`optparse` automatically adds a ``--version`` option to your parser. If"
" it encounters this option on the command line, it expands your ``version`` "
"string (by replacing ``%prog``), prints it to stdout, and exits."
msgstr ""
"``%prog`` 会像在 ``usage`` 中那样被扩展。 除了这一点，``version`` 还可包含你想存放的任何东西。 "
"当你提供它时，:mod:`optparse` 将自动向你的解析器添加一个 ``--version`` 选项。 如果它在命令行中遇到了该选项，它将扩展你的"
" ``version`` 字符串 (通过替换 ``%prog``)，将其打印到标准输出，然后退出。"

#: ../../library/optparse.rst:794
msgid "For example, if your script is called ``/usr/bin/foo``:"
msgstr "举例来说，如果你的脚本是 ``/usr/bin/foo``:"

#: ../../library/optparse.rst:796
msgid ""
"$ /usr/bin/foo --version\n"
"foo 1.0"
msgstr ""
"$ /usr/bin/foo --version\n"
"foo 1.0"

#: ../../library/optparse.rst:801
msgid ""
"The following two methods can be used to print and get the ``version`` "
"string:"
msgstr "下列两个方法可被用来打印和获取 ``version`` 字符串:"

#: ../../library/optparse.rst:805
msgid ""
"Print the version message for the current program (``self.version``) to "
"*file* (default stdout).  As with :meth:`print_usage`, any occurrence of "
"``%prog`` in ``self.version`` is replaced with the name of the current "
"program.  Does nothing if ``self.version`` is empty or undefined."
msgstr ""
"将当前程序的版本消息 (``self.version``) 打印到 *file* (默认为 stdout)。 就像 "
":meth:`print_usage` 一样，任何在 ``self.version`` 中出现的 ``%prog`` 将被替换为当前程序的名称。 如果 "
"``self.version`` 为空或未定义则不做任何操作。"

#: ../../library/optparse.rst:812
msgid ""
"Same as :meth:`print_version` but returns the version string instead of "
"printing it."
msgstr "与 :meth:`print_version` 相似但是会返回版本字符串而不是打印它。"

#: ../../library/optparse.rst:819
msgid "How :mod:`optparse` handles errors"
msgstr ":mod:`optparse` 如何处理错误handles errors"

#: ../../library/optparse.rst:821
msgid ""
"There are two broad classes of errors that :mod:`optparse` has to worry "
"about: programmer errors and user errors.  Programmer errors are usually "
"erroneous calls to :func:`OptionParser.add_option`, e.g. invalid option "
"strings, unknown option attributes, missing option attributes, etc.  These "
"are dealt with in the usual way: raise an exception (either "
":exc:`optparse.OptionError` or :exc:`TypeError`) and let the program crash."
msgstr ""
":mod:`optparse` 必须考虑两种宽泛的错误类：程序员错误和用户错误。 程序员错误通常是对 "
":func:`OptionParser.add_option` 的错误调用，例如无效的选项字符串，未知的选项属性，不存在的选项属性等等。 "
"这些错误将以通常的方式来处理：引发一个异常 (或者是 :exc:`optparse.OptionError` 或者是 :exc:`TypeError`)"
" 并让程序崩溃。"

#: ../../library/optparse.rst:828
msgid ""
"Handling user errors is much more important, since they are guaranteed to "
"happen no matter how stable your code is.  :mod:`optparse` can automatically"
" detect some user errors, such as bad option arguments (passing ``-n 4x`` "
"where ``-n`` takes an integer argument), missing arguments (``-n`` at the "
"end of the command line, where ``-n`` takes an argument of any type).  Also,"
" you can call :func:`OptionParser.error` to signal an application-defined "
"error condition::"
msgstr ""
"处理用户错误更为重要，因为无论你的代码有多稳定他们都肯定会发生。 :mod:`optparse` 可以自动检测部分用户错误，例如不正确的选项参数（如传入"
" ``-n 4x`` 而 ``-n`` 接受整数参数），缺少参数（如 ``-n`` 位于命令行的末尾，而 ``-n`` 接受任意类型的参数）。 "
"并且，你可以调用 :func:`OptionParser.error` 来指明应用程序自定义的错误条件::"

#: ../../library/optparse.rst:836
msgid ""
"(options, args) = parser.parse_args()\n"
"...\n"
"if options.a and options.b:\n"
"    parser.error(\"options -a and -b are mutually exclusive\")"
msgstr ""
"(options, args) = parser.parse_args()\n"
"...\n"
"if options.a and options.b:\n"
"    parser.error(\"options -a and -b are mutually exclusive\")"

#: ../../library/optparse.rst:841
msgid ""
"In either case, :mod:`optparse` handles the error the same way: it prints "
"the program's usage message and an error message to standard error and exits"
" with error status 2."
msgstr ""
"在两种情况下，:mod:`optparse` 都是以相同方式处理错误的：它会将程序的用法消息和错误消息打印到标准错误并附带错误状态 2 退出。"

#: ../../library/optparse.rst:845
msgid ""
"Consider the first example above, where the user passes ``4x`` to an option "
"that takes an integer:"
msgstr "考虑上面的第一个示例，当用户向一个接受整数的选项传入了 ``4x``:"

#: ../../library/optparse.rst:848
msgid ""
"$ /usr/bin/foo -n 4x\n"
"Usage: foo [options]\n"
"\n"
"foo: error: option -n: invalid integer value: '4x'"
msgstr ""
"$ /usr/bin/foo -n 4x\n"
"Usage: foo [options]\n"
"\n"
"foo: error: option -n: invalid integer value: '4x'"

#: ../../library/optparse.rst:855
msgid "Or, where the user fails to pass a value at all:"
msgstr "或者，当用户未传入任何值:"

#: ../../library/optparse.rst:857
msgid ""
"$ /usr/bin/foo -n\n"
"Usage: foo [options]\n"
"\n"
"foo: error: -n option requires an argument"
msgstr ""
"$ /usr/bin/foo -n\n"
"Usage: foo [options]\n"
"\n"
"foo: error: -n option requires an argument"

#: ../../library/optparse.rst:864
msgid ""
":mod:`optparse`\\ -generated error messages take care always to mention the "
"option involved in the error; be sure to do the same when calling "
":func:`OptionParser.error` from your application code."
msgstr ""
":mod:`optparse` 生成的错误消息总是会确保提示在错误中涉及的选项；请确保在从你的应用程序代码调用 "
":func:`OptionParser.error` 时也做同样的事。"

#: ../../library/optparse.rst:868
msgid ""
"If :mod:`optparse`'s default error-handling behaviour does not suit your "
"needs, you'll need to subclass OptionParser and override its "
":meth:`~OptionParser.exit` and/or :meth:`~OptionParser.error` methods."
msgstr ""
"如果 :mod:`optparse` 的默认错误处理行为不适合你的需求，你需要子类化 OptionParser 并重写它的 "
":meth:`~OptionParser.exit` 和/或 :meth:`~OptionParser.error` 方法。"

#: ../../library/optparse.rst:876
msgid "Putting it all together"
msgstr "合并所有代码"

#: ../../library/optparse.rst:878
msgid "Here's what :mod:`optparse`\\ -based scripts usually look like::"
msgstr "下面是基于 :mod:`optparse` 的脚本通常的结构::"

#: ../../library/optparse.rst:880
msgid ""
"from optparse import OptionParser\n"
"...\n"
"def main():\n"
"    usage = \"usage: %prog [options] arg\"\n"
"    parser = OptionParser(usage)\n"
"    parser.add_option(\"-f\", \"--file\", dest=\"filename\",\n"
"                      help=\"read data from FILENAME\")\n"
"    parser.add_option(\"-v\", \"--verbose\",\n"
"                      action=\"store_true\", dest=\"verbose\")\n"
"    parser.add_option(\"-q\", \"--quiet\",\n"
"                      action=\"store_false\", dest=\"verbose\")\n"
"    ...\n"
"    (options, args) = parser.parse_args()\n"
"    if len(args) != 1:\n"
"        parser.error(\"incorrect number of arguments\")\n"
"    if options.verbose:\n"
"        print(\"reading %s...\" % options.filename)\n"
"    ...\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""
"from optparse import OptionParser\n"
"...\n"
"def main():\n"
"    usage = \"usage: %prog [options] arg\"\n"
"    parser = OptionParser(usage)\n"
"    parser.add_option(\"-f\", \"--file\", dest=\"filename\",\n"
"                      help=\"read data from FILENAME\")\n"
"    parser.add_option(\"-v\", \"--verbose\",\n"
"                      action=\"store_true\", dest=\"verbose\")\n"
"    parser.add_option(\"-q\", \"--quiet\",\n"
"                      action=\"store_false\", dest=\"verbose\")\n"
"    ...\n"
"    (options, args) = parser.parse_args()\n"
"    if len(args) != 1:\n"
"        parser.error(\"incorrect number of arguments\")\n"
"    if options.verbose:\n"
"        print(\"reading %s...\" % options.filename)\n"
"    ...\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"

#: ../../library/optparse.rst:906
msgid "Reference Guide"
msgstr "参考指南"

#: ../../library/optparse.rst:912
msgid "Creating the parser"
msgstr "创建解析器"

#: ../../library/optparse.rst:914
msgid ""
"The first step in using :mod:`optparse` is to create an OptionParser "
"instance."
msgstr "使用 :mod:`optparse` 的第一步是创建 OptionParser 实例。"

#: ../../library/optparse.rst:918
msgid ""
"The OptionParser constructor has no required arguments, but a number of "
"optional keyword arguments.  You should always pass them as keyword "
"arguments, i.e. do not rely on the order in which the arguments are "
"declared."
msgstr ""
"OptionParser 构造器没有必需的参数，只有一些可选的关键字参数。 你应当始终以关键字参数形式传入它们，即不要依赖于声明参数所在位置的顺序。"

#: ../../library/optparse.rst:922
msgid "``usage`` (default: ``\"%prog [options]\"``)"
msgstr "``usage`` (默认: ``\"%prog [options]\"``)"

#: ../../library/optparse.rst:923
msgid ""
"The usage summary to print when your program is run incorrectly or with a "
"help option.  When :mod:`optparse` prints the usage string, it expands "
"``%prog`` to ``os.path.basename(sys.argv[0])`` (or to ``prog`` if you passed"
" that keyword argument).  To suppress a usage message, pass the special "
"value :const:`optparse.SUPPRESS_USAGE`."
msgstr ""
"当你的程序不正确地运行或附带 help 选项运行时将打印的用法说明。 当 :mod:`optparse` 打印用法字符串时，它会将 ``%prog`` "
"扩展为 ``os.path.basename(sys.argv[0])`` (或者如果你传入 ``prog`` 则为该关键字参数值)。 "
"要屏蔽用法说明，请传入特殊值 :const:`optparse.SUPPRESS_USAGE`。"

#: ../../library/optparse.rst:929
msgid "``option_list`` (default: ``[]``)"
msgstr "``option_list`` (默认: ``[]``)"

#: ../../library/optparse.rst:930
msgid ""
"A list of Option objects to populate the parser with.  The options in "
"``option_list`` are added after any options in ``standard_option_list`` (a "
"class attribute that may be set by OptionParser subclasses), but before any "
"version or help options. Deprecated; use :meth:`add_option` after creating "
"the parser instead."
msgstr ""
"一个用于填充解析器的由 Option 对象组成的列表。 ``option_list`` 中的选项将添加在 "
"``standard_option_list`` (一个可由 OptionParser 的子类设置的类属性) "
"中的任何选项之后，以及任何版本或帮助选项之前。 已被弃用；请改为在创建解析器之后使用 :meth:`add_option`。"

#: ../../library/optparse.rst:936
msgid "``option_class`` (default: optparse.Option)"
msgstr "``option_class`` (默认: optparse.Option)"

#: ../../library/optparse.rst:937
msgid "Class to use when adding options to the parser in :meth:`add_option`."
msgstr "当在 :meth:`add_option` 中向解析器添加选项时要使用的类。"

#: ../../library/optparse.rst:939
msgid "``version`` (default: ``None``)"
msgstr "``version`` (默认: ``None``)"

#: ../../library/optparse.rst:940
msgid ""
"A version string to print when the user supplies a version option. If you "
"supply a true value for ``version``, :mod:`optparse` automatically adds a "
"version option with the single option string ``--version``.  The substring "
"``%prog`` is expanded the same as for ``usage``."
msgstr ""
"当用户提供了 version 选项时将会打印的版本字符串。 如果你为 ``version`` 提供真值，:mod:`optparse` "
"将自动添加单个选项字符串 ``--version`` 形式的 version 选项。 子字符串 ``%prog`` 会以与 ``usage`` "
"相同的方式扩展。"

#: ../../library/optparse.rst:945
msgid "``conflict_handler`` (default: ``\"error\"``)"
msgstr "``conflict_handler`` (默认: ``\"error\"``)"

#: ../../library/optparse.rst:946
msgid ""
"Specifies what to do when options with conflicting option strings are added "
"to the parser; see section :ref:`optparse-conflicts-between-options`."
msgstr ""
"指定当有相互冲突的选项字符串的选项被添加到解析器时要如何做；参见 :ref:`optparse-conflicts-between-options` "
"一节。"

#: ../../library/optparse.rst:950
msgid "``description`` (default: ``None``)"
msgstr "``description`` (默认: ``None``)"

#: ../../library/optparse.rst:951
msgid ""
"A paragraph of text giving a brief overview of your program. :mod:`optparse`"
" reformats this paragraph to fit the current terminal width and prints it "
"when the user requests help (after ``usage``, but before the list of "
"options)."
msgstr ""
"一段提供你的程序的简短介绍的文本。 :mod:`optparse` 会重格式化段落以适合当前终端宽度并在用户请求帮助时打印其内容（在 ``usage``"
" 之后，选项列表之前）。"

#: ../../library/optparse.rst:956
msgid "``formatter`` (default: a new :class:`IndentedHelpFormatter`)"
msgstr "``formatter`` (默认: 一个新的 :class:`IndentedHelpFormatter`)"

#: ../../library/optparse.rst:957
msgid ""
"An instance of optparse.HelpFormatter that will be used for printing help "
"text.  :mod:`optparse` provides two concrete classes for this purpose: "
"IndentedHelpFormatter and TitledHelpFormatter."
msgstr ""
"一个将被用于打印帮助文本的 optparse.HelpFormatter 实例。 :mod:`optparse` 为此目的提供了两个实体类: "
"IndentedHelpFormatter 和 TitledHelpFormatter。"

#: ../../library/optparse.rst:961
msgid "``add_help_option`` (default: ``True``)"
msgstr "``add_help_option`` (默认: ``True``)"

#: ../../library/optparse.rst:962
msgid ""
"If true, :mod:`optparse` will add a help option (with option strings ``-h`` "
"and ``--help``) to the parser."
msgstr "如为真值，:mod:`optparse` 将向解析器添加一个 help 选项 (使用选项字符串 ``-h`` 和 ``--help``)。"

#: ../../library/optparse.rst:965
msgid "``prog``"
msgstr "``prog``"

#: ../../library/optparse.rst:966
msgid ""
"The string to use when expanding ``%prog`` in ``usage`` and ``version`` "
"instead of ``os.path.basename(sys.argv[0])``."
msgstr ""
"当在 ``usage`` 和 ``version`` 中用于代替 ``os.path.basename(sys.argv[0])`` 来扩展 "
"``%prog`` 的字符串。"

#: ../../library/optparse.rst:969
msgid "``epilog`` (default: ``None``)"
msgstr "``epilog`` (默认: ``None``)"

#: ../../library/optparse.rst:970
msgid "A paragraph of help text to print after the option help."
msgstr "一段将在选项帮助之后打印的帮助文本。"

#: ../../library/optparse.rst:975
msgid "Populating the parser"
msgstr "填充解析器"

#: ../../library/optparse.rst:977
msgid ""
"There are several ways to populate the parser with options.  The preferred "
"way is by using :meth:`OptionParser.add_option`, as shown in section "
":ref:`optparse-tutorial`.  :meth:`add_option` can be called in one of two "
"ways:"
msgstr ""
"有几种方式可以为解析器填充选项。 最推荐的方式是使用 :meth:`OptionParser.add_option`，如 :ref:`optparse-"
"tutorial` 一节所演示的。 :meth:`add_option` 可以通过两种方式来调用:"

#: ../../library/optparse.rst:981
msgid "pass it an Option instance (as returned by :func:`make_option`)"
msgstr "传入一个 Option 实例（即 :func:`make_option` 所返回的对象）"

#: ../../library/optparse.rst:983
msgid ""
"pass it any combination of positional and keyword arguments that are "
"acceptable to :func:`make_option` (i.e., to the Option constructor), and it "
"will create the Option instance for you"
msgstr ""
"传入 :func:`make_option` 可接受的（即与 Option 构造器相同的）任意位置和关键字参数组合，它将为你创建 Option 实例"

#: ../../library/optparse.rst:987
msgid ""
"The other alternative is to pass a list of pre-constructed Option instances "
"to the OptionParser constructor, as in::"
msgstr "另一种方式是将由预先构造的 Option 实例组成的列表传给 OptionParser 构造器，如下所示::"

#: ../../library/optparse.rst:990
msgid ""
"option_list = [\n"
"    make_option(\"-f\", \"--filename\",\n"
"                action=\"store\", type=\"string\", dest=\"filename\"),\n"
"    make_option(\"-q\", \"--quiet\",\n"
"                action=\"store_false\", dest=\"verbose\"),\n"
"    ]\n"
"parser = OptionParser(option_list=option_list)"
msgstr ""
"option_list = [\n"
"    make_option(\"-f\", \"--filename\",\n"
"                action=\"store\", type=\"string\", dest=\"filename\"),\n"
"    make_option(\"-q\", \"--quiet\",\n"
"                action=\"store_false\", dest=\"verbose\"),\n"
"    ]\n"
"parser = OptionParser(option_list=option_list)"

#: ../../library/optparse.rst:998
msgid ""
"(:func:`make_option` is a factory function for creating Option instances; "
"currently it is an alias for the Option constructor.  A future version of "
":mod:`optparse` may split Option into several classes, and "
":func:`make_option` will pick the right class to instantiate.  Do not "
"instantiate Option directly.)"
msgstr ""
"(:func:`make_option` 是一个用于创建 Option 实例的工厂函数；目前它是 Option 构造器的一个别名。 未来的 "
":mod:`optparse` 版本可能会将 Option 拆分为多个类，而 :func:`make_option` 将选择适当的类来实例化。 "
"请不要直接实例化 Option。)"

#: ../../library/optparse.rst:1007
msgid "Defining options"
msgstr "定义选项"

#: ../../library/optparse.rst:1009
msgid ""
"Each Option instance represents a set of synonymous command-line option "
"strings, e.g. ``-f`` and ``--file``.  You can specify any number of short or"
" long option strings, but you must specify at least one overall option "
"string."
msgstr ""
"每个 Option 实例代表一组同义的命令行选项字符串，例如 ``-f`` 和 ``--file``。 "
"你可以指定任意数量的短和长选项字符串，但你必须指定总计至少一个选项字符串。"

#: ../../library/optparse.rst:1013
msgid ""
"The canonical way to create an :class:`Option` instance is with the "
":meth:`add_option` method of :class:`OptionParser`."
msgstr ""
"创建 :class:`Option` 的正规方式是使用 :class:`OptionParser` 的 :meth:`add_option` 方法。"

#: ../../library/optparse.rst:1019
msgid "To define an option with only a short option string::"
msgstr "定义只有一个短选项字符串的选项::"

#: ../../library/optparse.rst:1021
msgid "parser.add_option(\"-f\", attr=value, ...)"
msgstr "parser.add_option(\"-f\", attr=value, ...)"

#: ../../library/optparse.rst:1023
msgid "And to define an option with only a long option string::"
msgstr "以及定义只有一个长选项字符串的选项::"

#: ../../library/optparse.rst:1025
msgid "parser.add_option(\"--foo\", attr=value, ...)"
msgstr "parser.add_option(\"--foo\", attr=value, ...)"

#: ../../library/optparse.rst:1027
msgid ""
"The keyword arguments define attributes of the new Option object.  The most "
"important option attribute is :attr:`~Option.action`, and it largely "
"determines which other attributes are relevant or required.  If you pass "
"irrelevant option attributes, or fail to pass required ones, :mod:`optparse`"
" raises an :exc:`OptionError` exception explaining your mistake."
msgstr ""
"该关键字参数定义新 Option 对象的属性。 最重要的选项属性是 "
":attr:`~Option.action`，它主要负责确定其他的属性是相关的还是必须的。 "
"如果你传入了不相关的选项属性，或是未能传入必须的属性，:mod:`optparse` 将引发一个 :exc:`OptionError` "
"异常来说明你的错误。"

#: ../../library/optparse.rst:1033
msgid ""
"An option's *action* determines what :mod:`optparse` does when it encounters"
" this option on the command-line.  The standard option actions hard-coded "
"into :mod:`optparse` are:"
msgstr ""
"选项的 *action* 决定当 :mod:`optparse` 在命令行中遇到该选项时要做什么。 硬编码在 :mod:`optparse` "
"中的标准选项动作有:"

#: ../../library/optparse.rst:1037
msgid "``\"store\"``"
msgstr "``\"store\"``"

#: ../../library/optparse.rst:1038
msgid "store this option's argument (default)"
msgstr "存储此选项的参数（默认）"

#: ../../library/optparse.rst:1043
msgid "``\"store_true\"``"
msgstr "``\"store_true\"``"

#: ../../library/optparse.rst:1044
msgid "store ``True``"
msgstr "存储 ``True``"

#: ../../library/optparse.rst:1046
msgid "``\"store_false\"``"
msgstr "``\"store_false\"``"

#: ../../library/optparse.rst:1047
msgid "store ``False``"
msgstr "存储 ``False``"

#: ../../library/optparse.rst:1052
msgid "``\"append_const\"``"
msgstr "``\"append_const\"``"

#: ../../library/optparse.rst:1053
msgid "append a constant value to a list, pre-set via :attr:`Option.const`"
msgstr "将指定常量值添加到一个列表，可通过 :attr:`Option.const` 预设"

#: ../../library/optparse.rst:1061 ../../library/optparse.rst:1356
msgid "``\"help\"``"
msgstr "``\"help\"``"

#: ../../library/optparse.rst:1062
msgid ""
"print a usage message including all options and the documentation for them"
msgstr "打印用法消息，包括所有选项和它们的文档"

#: ../../library/optparse.rst:1064
msgid ""
"(If you don't supply an action, the default is ``\"store\"``.  For this "
"action, you may also supply :attr:`~Option.type` and :attr:`~Option.dest` "
"option attributes; see :ref:`optparse-standard-option-actions`.)"
msgstr ""
"（如果你没有提供动作，则默认为 ``\"store\"``。 对于此动作，你还可以提供 :attr:`~Option.type` 和 "
":attr:`~Option.dest` 选项属性；参见 :ref:`optparse-standard-option-actions`。）"

#: ../../library/optparse.rst:1068
msgid ""
"As you can see, most actions involve storing or updating a value somewhere. "
":mod:`optparse` always creates a special object for this, conventionally "
"called ``options``, which is an instance of :class:`optparse.Values`."
msgstr ""
"如你所见，大多数动作都在某处保存或更新一个值。 :mod:`optparse` 总是会为此创建一个特殊对象，它被恰当地称为 ``options``，是 "
":class:`optparse.Values` 的实例。"

#: ../../library/optparse.rst:1074
msgid ""
"An object holding parsed argument names and values as attributes. Normally "
"created by calling when calling :meth:`OptionParser.parse_args`, and can be "
"overridden by a custom subclass passed to the *values* argument of "
":meth:`OptionParser.parse_args` (as described in :ref:`optparse-parsing-"
"arguments`)."
msgstr ""
"一个将被解析的参数名和值作为属性保存的对象。 一般是通过调用 :meth:`OptionParser.parse_args` 来创建，并可被传给 "
":meth:`OptionParser.parse_args` 的 *values* 参数的自定义子类所覆盖（如在 :ref:`optparse-"
"parsing-arguments` 中描述的那样）。"

#: ../../library/optparse.rst:1079
msgid ""
"Option arguments (and various other values) are stored as attributes of this"
" object, according to the :attr:`~Option.dest` (destination) option "
"attribute."
msgstr "Option 参数（以及各种其他的值）将根据 :attr:`~Option.dest` (目标) 选项属性被保存为此对象的属性。"

#: ../../library/optparse.rst:1083
msgid "For example, when you call ::"
msgstr "例如，当你调用 ::"

#: ../../library/optparse.rst:1085
msgid "parser.parse_args()"
msgstr "parser.parse_args()"

#: ../../library/optparse.rst:1087
msgid ""
"one of the first things :mod:`optparse` does is create the ``options`` "
"object::"
msgstr ":mod:`optparse` 首先会做的一件事情是创建 ``options`` 对象::"

#: ../../library/optparse.rst:1089
msgid "options = Values()"
msgstr "options = Values()"

#: ../../library/optparse.rst:1091
msgid "If one of the options in this parser is defined with ::"
msgstr "如果该解析器中的某个选项定义带有 ::"

#: ../../library/optparse.rst:1093
msgid ""
"parser.add_option(\"-f\", \"--file\", action=\"store\", type=\"string\", "
"dest=\"filename\")"
msgstr ""
"parser.add_option(\"-f\", \"--file\", action=\"store\", type=\"string\", "
"dest=\"filename\")"

#: ../../library/optparse.rst:1095
msgid "and the command-line being parsed includes any of the following::"
msgstr "并且被解析的命令行包括以下任意一项::"

#: ../../library/optparse.rst:1097
msgid ""
"-ffoo\n"
"-f foo\n"
"--file=foo\n"
"--file foo"
msgstr ""
"-ffoo\n"
"-f foo\n"
"--file=foo\n"
"--file foo"

#: ../../library/optparse.rst:1102
msgid ""
"then :mod:`optparse`, on seeing this option, will do the equivalent of ::"
msgstr "那么 :mod:`optparse` 在看到此选项时，将执行这样的操作 ::"

#: ../../library/optparse.rst:1104
msgid "options.filename = \"foo\""
msgstr "options.filename = \"foo\""

#: ../../library/optparse.rst:1106
msgid ""
"The :attr:`~Option.type` and :attr:`~Option.dest` option attributes are "
"almost as important as :attr:`~Option.action`, but :attr:`~Option.action` is"
" the only one that makes sense for *all* options."
msgstr ""
":attr:`~Option.type` 和 :attr:`~Option.dest` 选项属性几乎与 :attr:`~Option.action` "
"一样重要，但 :attr:`~Option.action` 是唯一对 *所有* 选项都有意义的。"

#: ../../library/optparse.rst:1114
msgid "Option attributes"
msgstr "选项属性"

#: ../../library/optparse.rst:1118
msgid ""
"A single command line argument, with various attributes passed by keyword to"
" the constructor. Normally created with :meth:`OptionParser.add_option` "
"rather than directly, and can be overridden by a custom class via the "
"*option_class* argument to :class:`OptionParser`."
msgstr ""
"一个单独的命令行参数，带有以关键字参数形式传给构造器的各种属性。 通常使用 :meth:`OptionParser.add_option` "
"创建而不是直接创建，并可被作为 :class:`OptionParser` 的 *option_class* 参数传入的自定义类来重写。"

#: ../../library/optparse.rst:1124
msgid ""
"The following option attributes may be passed as keyword arguments to "
":meth:`OptionParser.add_option`.  If you pass an option attribute that is "
"not relevant to a particular option, or fail to pass a required option "
"attribute, :mod:`optparse` raises :exc:`OptionError`."
msgstr ""
"下列选项属性可以作为关键字参数传给 :meth:`OptionParser.add_option`。 "
"如果你传入一个与特定选项无关的选项属性，或是未能传入必要的选项属性，:mod:`optparse` 将会引发 :exc:`OptionError`。"

#: ../../library/optparse.rst:1131
msgid "(default: ``\"store\"``)"
msgstr "(默认: ``\"store\"``)"

#: ../../library/optparse.rst:1133
msgid ""
"Determines :mod:`optparse`'s behaviour when this option is seen on the "
"command line; the available options are documented :ref:`here <optparse-"
"standard-option-actions>`."
msgstr ""
"用于当在命令行中遇到此选项时确定 :mod:`optparse` 的行为；可用的选项记录在 :ref:`这里 <optparse-standard-"
"option-actions>`。"

#: ../../library/optparse.rst:1139
msgid "(default: ``\"string\"``)"
msgstr "(默认: ``\"string\"``)"

#: ../../library/optparse.rst:1141
msgid ""
"The argument type expected by this option (e.g., ``\"string\"`` or "
"``\"int\"``); the available option types are documented :ref:`here "
"<optparse-standard-option-types>`."
msgstr ""
"此选项所接受的参数类型 (例如 ``\"string\"`` 或 ``\"int\"``)；可用的选项类型记录在 :ref:`这里 <optparse-"
"standard-option-types>`。"

#: ../../library/optparse.rst:1147 ../../library/optparse.rst:1197
msgid "(default: derived from option strings)"
msgstr "(默认: 获取自选项字符串)"

#: ../../library/optparse.rst:1149
msgid ""
"If the option's action implies writing or modifying a value somewhere, this "
"tells :mod:`optparse` where to write it: :attr:`~Option.dest` names an "
"attribute of the ``options`` object that :mod:`optparse` builds as it parses"
" the command line."
msgstr ""
"如果此选项的动作涉及在某处写入或修改一个值，该属性将告诉 :mod:`optparse` 将它写入到哪里: :attr:`~Option.dest` "
"指定 :mod:`optparse` 在解析命令行时构建的 ``options`` 对象的某个属性。"

#: ../../library/optparse.rst:1156
msgid ""
"The value to use for this option's destination if the option is not seen on "
"the command line.  See also :meth:`OptionParser.set_defaults`."
msgstr "当未在命令行中遇到此选项时将被用作此选项的目标的值。 另请参阅 :meth:`OptionParser.set_defaults`。"

#: ../../library/optparse.rst:1161
msgid "(default: 1)"
msgstr "(默认: 1)"

#: ../../library/optparse.rst:1163
msgid ""
"How many arguments of type :attr:`~Option.type` should be consumed when this"
" option is seen.  If > 1, :mod:`optparse` will store a tuple of values to "
":attr:`~Option.dest`."
msgstr ""
"当遇到此选项时应当读取多少个 :attr:`~Option.type` 类型的参数。 如果 > 1，:mod:`optparse` "
"会将由多个值组成的元组保存到 :attr:`~Option.dest`。"

#: ../../library/optparse.rst:1169
msgid "For actions that store a constant value, the constant value to store."
msgstr "对于保存常量值的动作，指定要保存的常量值。"

#: ../../library/optparse.rst:1173
msgid ""
"For options of type ``\"choice\"``, the list of strings the user may choose "
"from."
msgstr "对于 ``\"choice\"`` 类型的选项，由用户可选择的字符串组成的列表。"

#: ../../library/optparse.rst:1178
msgid ""
"For options with action ``\"callback\"``, the callable to call when this "
"option is seen.  See section :ref:`optparse-option-callbacks` for detail on "
"the arguments passed to the callable."
msgstr ""
"对于使用 ``\"callback\"`` 动作的选项，当遇到此选项时要调用的可调用对象。 请参阅 :ref:`optparse-option-"
"callbacks` 一节了解关于传给可调用对象的参数的详情。"

#: ../../library/optparse.rst:1185
msgid ""
"Additional positional and keyword arguments to pass to ``callback`` after "
"the four standard callback arguments."
msgstr "将在四个标准回调参数之后传给 ``callback`` 的额外的位置和关键字参数。"

#: ../../library/optparse.rst:1190
msgid ""
"Help text to print for this option when listing all available options after "
"the user supplies a :attr:`~Option.help` option (such as ``--help``).  If no"
" help text is supplied, the option will be listed without help text.  To "
"hide this option, use the special value :const:`optparse.SUPPRESS_HELP`."
msgstr ""
"当用户提供 :attr:`~Option.help` 选项 (如 ``--help``) 之后将在列出所有可有远项时针对此选项打印的文本。 "
"如果没有提供帮助文本，则列出选项时将不附带帮助文本。 要隐藏此选项，请使用特殊值 :const:`optparse.SUPPRESS_HELP`。"

#: ../../library/optparse.rst:1199
msgid ""
"Stand-in for the option argument(s) to use when printing help text.  See "
"section :ref:`optparse-tutorial` for an example."
msgstr "当打印帮助文本时要使用的代表选项参数的名称。 请参阅 :ref:`optparse-tutorial` 一节查看相应示例。"

#: ../../library/optparse.rst:1206
msgid "Standard option actions"
msgstr "标准选项动作"

#: ../../library/optparse.rst:1208
msgid ""
"The various option actions all have slightly different requirements and "
"effects. Most actions have several relevant option attributes which you may "
"specify to guide :mod:`optparse`'s behaviour; a few have required "
"attributes, which you must specify for any option using that action."
msgstr ""
"各种选项动作具有略微不同的要求和效果。 大多数动作都具有几个可被你指定的独步选项属性用来控制 :mod:`optparse` "
"的行为；少数还具有一些必需属性，你必须为任何使用该动作的选项指定这些属性。"

#: ../../library/optparse.rst:1213
msgid ""
"``\"store\"`` [relevant: :attr:`~Option.type`, :attr:`~Option.dest`, "
":attr:`~Option.nargs`, :attr:`~Option.choices`]"
msgstr ""
"``\"store\"`` [关联: :attr:`~Option.type`, :attr:`~Option.dest`, "
":attr:`~Option.nargs`, :attr:`~Option.choices`]"

#: ../../library/optparse.rst:1216
msgid ""
"The option must be followed by an argument, which is converted to a value "
"according to :attr:`~Option.type` and stored in :attr:`~Option.dest`.  If "
":attr:`~Option.nargs` > 1, multiple arguments will be consumed from the "
"command line; all will be converted according to :attr:`~Option.type` and "
"stored to :attr:`~Option.dest` as a tuple.  See the :ref:`optparse-standard-"
"option-types` section."
msgstr ""
"该选项后必须跟一个参数，它将根据 :attr:`~Option.type` 被转换为相应的值并保存至 :attr:`~Option.dest`。 如果 "
":attr:`~Option.nargs` > 1，则将从命令行读取多个参数；它们将全部根据 :attr:`~Option.type` "
"被转换并以元组形式保存至 :attr:`~Option.dest`。 参见 :ref:`optparse-standard-option-types` "
"一节。"

#: ../../library/optparse.rst:1223
msgid ""
"If :attr:`~Option.choices` is supplied (a list or tuple of strings), the "
"type defaults to ``\"choice\"``."
msgstr "如果提供了 :attr:`~Option.choices` (由字符串组成的列表和元组)，则类型默认为 ``\"choice\"``。"

#: ../../library/optparse.rst:1226
msgid "If :attr:`~Option.type` is not supplied, it defaults to ``\"string\"``."
msgstr "如果未提供 :attr:`~Option.type`，则默认为 ``\"string\"``。"

#: ../../library/optparse.rst:1228
msgid ""
"If :attr:`~Option.dest` is not supplied, :mod:`optparse` derives a "
"destination from the first long option string (e.g., ``--foo-bar`` implies "
"``foo_bar``). If there are no long option strings, :mod:`optparse` derives a"
" destination from the first short option string (e.g., ``-f`` implies "
"``f``)."
msgstr ""
"如果未提供 :attr:`~Option.dest`，则 :mod:`optparse` 会从第一个长选项字符串派生出目标 (例如 ``--foo-"
"bar`` 将对应 ``foo_bar``)。 如果不存在长选项字符串，则 :mod:`optparse` 会从第一个短选项字符串派生出目标 (例如 "
"``-f`` 将对应 ``f``)。"

#: ../../library/optparse.rst:1233 ../../library/optparse.rst:1253
#: ../../library/optparse.rst:1275 ../../library/optparse.rst:1293
#: ../../library/optparse.rst:1332 ../../library/optparse.rst:1370
msgid "Example::"
msgstr "示例::"

#: ../../library/optparse.rst:1235
msgid ""
"parser.add_option(\"-f\")\n"
"parser.add_option(\"-p\", type=\"float\", nargs=3, dest=\"point\")"
msgstr ""
"parser.add_option(\"-f\")\n"
"parser.add_option(\"-p\", type=\"float\", nargs=3, dest=\"point\")"

#: ../../library/optparse.rst:1238
msgid "As it parses the command line ::"
msgstr "当它解析命令行 ::"

#: ../../library/optparse.rst:1240
msgid "-f foo.txt -p 1 -3.5 4 -fbar.txt"
msgstr "-f foo.txt -p 1 -3.5 4 -fbar.txt"

#: ../../library/optparse.rst:1242
msgid ":mod:`optparse` will set ::"
msgstr ":mod:`optparse` 将设置 ::"

#: ../../library/optparse.rst:1244
msgid ""
"options.f = \"foo.txt\"\n"
"options.point = (1.0, -3.5, 4.0)\n"
"options.f = \"bar.txt\""
msgstr ""
"options.f = \"foo.txt\"\n"
"options.point = (1.0, -3.5, 4.0)\n"
"options.f = \"bar.txt\""

#: ../../library/optparse.rst:1248
msgid ""
"``\"store_const\"`` [required: :attr:`~Option.const`; relevant: "
":attr:`~Option.dest`]"
msgstr "``\"store_const\"`` [要求: :attr:`~Option.const`; 关联: :attr:`~Option.dest`]"

#: ../../library/optparse.rst:1251
msgid "The value :attr:`~Option.const` is stored in :attr:`~Option.dest`."
msgstr "值 :attr:`~Option.const` 将存放到 :attr:`~Option.dest` 中。"

#: ../../library/optparse.rst:1255
msgid ""
"parser.add_option(\"-q\", \"--quiet\",\n"
"                  action=\"store_const\", const=0, dest=\"verbose\")\n"
"parser.add_option(\"-v\", \"--verbose\",\n"
"                  action=\"store_const\", const=1, dest=\"verbose\")\n"
"parser.add_option(\"--noisy\",\n"
"                  action=\"store_const\", const=2, dest=\"verbose\")"
msgstr ""
"parser.add_option(\"-q\", \"--quiet\",\n"
"                  action=\"store_const\", const=0, dest=\"verbose\")\n"
"parser.add_option(\"-v\", \"--verbose\",\n"
"                  action=\"store_const\", const=1, dest=\"verbose\")\n"
"parser.add_option(\"--noisy\",\n"
"                  action=\"store_const\", const=2, dest=\"verbose\")"

#: ../../library/optparse.rst:1262
msgid "If ``--noisy`` is seen, :mod:`optparse` will set  ::"
msgstr "如果看到了 ``--noisy``，:mod:`optparse` 将设置 ::"

#: ../../library/optparse.rst:1264
msgid "options.verbose = 2"
msgstr "options.verbose = 2"

#: ../../library/optparse.rst:1266
msgid "``\"store_true\"`` [relevant: :attr:`~Option.dest`]"
msgstr "``\"store_true\"`` [关联: :attr:`~Option.dest`]"

#: ../../library/optparse.rst:1268
msgid ""
"A special case of ``\"store_const\"`` that stores ``True`` to "
":attr:`~Option.dest`."
msgstr "将 ``True`` 存放到 :attr:`~Option.dest` 中的 ``\"store_const\"`` 的特例。"

#: ../../library/optparse.rst:1271
msgid "``\"store_false\"`` [relevant: :attr:`~Option.dest`]"
msgstr "``\"store_false\"`` [关联: :attr:`~Option.dest`]"

#: ../../library/optparse.rst:1273
msgid "Like ``\"store_true\"``, but stores ``False``."
msgstr "类似于 ``\"store_true\"``，但是存放 ``False``。"

#: ../../library/optparse.rst:1277
msgid ""
"parser.add_option(\"--clobber\", action=\"store_true\", dest=\"clobber\")\n"
"parser.add_option(\"--no-clobber\", action=\"store_false\", dest=\"clobber\")"
msgstr ""
"parser.add_option(\"--clobber\", action=\"store_true\", dest=\"clobber\")\n"
"parser.add_option(\"--no-clobber\", action=\"store_false\", dest=\"clobber\")"

#: ../../library/optparse.rst:1280
msgid ""
"``\"append\"`` [relevant: :attr:`~Option.type`, :attr:`~Option.dest`, "
":attr:`~Option.nargs`, :attr:`~Option.choices`]"
msgstr ""
"``\"append\"`` [关联: :attr:`~Option.type`, :attr:`~Option.dest`, "
":attr:`~Option.nargs`, :attr:`~Option.choices`]"

#: ../../library/optparse.rst:1283
msgid ""
"The option must be followed by an argument, which is appended to the list in"
" :attr:`~Option.dest`.  If no default value for :attr:`~Option.dest` is "
"supplied, an empty list is automatically created when :mod:`optparse` first "
"encounters this option on the command-line.  If :attr:`~Option.nargs` > 1, "
"multiple arguments are consumed, and a tuple of length :attr:`~Option.nargs`"
" is appended to :attr:`~Option.dest`."
msgstr ""
"该选项必须跟一个参数，该参数将被添加到 :attr:`~Option.dest` 的列表中。 如果未提供 :attr:`~Option.dest` "
"的默认值，那么当 :mod:`optparse` 首次在命令行中遇到该选项时将自动创建一个空列表。 如果 :attr:`~Option.nargs` >"
" 1，则会读取多个参数，并将一个长度为 :attr:`~Option.nargs` 的元组添加到 :attr:`~Option.dest`。"

#: ../../library/optparse.rst:1290
msgid ""
"The defaults for :attr:`~Option.type` and :attr:`~Option.dest` are the same "
"as for the ``\"store\"`` action."
msgstr ":attr:`~Option.type` 和 :attr:`~Option.dest` 的默认值与 ``\"store\"`` 动作的相同。"

#: ../../library/optparse.rst:1295
msgid "parser.add_option(\"-t\", \"--tracks\", action=\"append\", type=\"int\")"
msgstr "parser.add_option(\"-t\", \"--tracks\", action=\"append\", type=\"int\")"

#: ../../library/optparse.rst:1297
msgid ""
"If ``-t3`` is seen on the command-line, :mod:`optparse` does the equivalent "
"of::"
msgstr "如果在命令行中遇到 ``-t3``，:mod:`optparse` 将执行这样的操作::"

#: ../../library/optparse.rst:1300
msgid ""
"options.tracks = []\n"
"options.tracks.append(int(\"3\"))"
msgstr ""
"options.tracks = []\n"
"options.tracks.append(int(\"3\"))"

#: ../../library/optparse.rst:1303
msgid "If, a little later on, ``--tracks=4`` is seen, it does::"
msgstr "如果，在稍后的时候，再遇到 ``--tracks=4``，它将执行::"

#: ../../library/optparse.rst:1305
msgid "options.tracks.append(int(\"4\"))"
msgstr "options.tracks.append(int(\"4\"))"

#: ../../library/optparse.rst:1307
msgid ""
"The ``append`` action calls the ``append`` method on the current value of "
"the option.  This means that any default value specified must have an "
"``append`` method.  It also means that if the default value is non-empty, "
"the default elements will be present in the parsed value for the option, "
"with any values from the command line appended after those default values::"
msgstr ""
"``append`` 动作会在选项的当前值上调用 ``append`` 方法。 这意味着任何被指定的默认值必须具有 ``append`` 方法。 "
"这还意味着如果默认值非空，则其中的默认元素将存在于选项的已解析值中，而任何来自命令行的值将被添加到这些默认值之后::"

#: ../../library/optparse.rst:1313
msgid ""
">>> parser.add_option(\"--files\", action=\"append\", default=['~/.mypkg/defaults'])\n"
">>> opts, args = parser.parse_args(['--files', 'overrides.mypkg'])\n"
">>> opts.files\n"
"['~/.mypkg/defaults', 'overrides.mypkg']"
msgstr ""
">>> parser.add_option(\"--files\", action=\"append\", default=['~/.mypkg/defaults'])\n"
">>> opts, args = parser.parse_args(['--files', 'overrides.mypkg'])\n"
">>> opts.files\n"
"['~/.mypkg/defaults', 'overrides.mypkg']"

#: ../../library/optparse.rst:1318
msgid ""
"``\"append_const\"`` [required: :attr:`~Option.const`; relevant: "
":attr:`~Option.dest`]"
msgstr ""
"``\"append_const\"`` [需要: :attr:`~Option.const`; 关联: :attr:`~Option.dest`]"

#: ../../library/optparse.rst:1321
msgid ""
"Like ``\"store_const\"``, but the value :attr:`~Option.const` is appended to"
" :attr:`~Option.dest`; as with ``\"append\"``, :attr:`~Option.dest` defaults"
" to ``None``, and an empty list is automatically created the first time the "
"option is encountered."
msgstr ""
"与 ``\"store_const\"`` 类似，但 :attr:`~Option.const` 值将被添加到 "
":attr:`~Option.dest`；与 ``\"append\"`` 一样，:attr:`~Option.dest` 默认为 "
"``None``，并且当首次遇到该选项时将自动创建一个空列表。"

#: ../../library/optparse.rst:1326
msgid "``\"count\"`` [relevant: :attr:`~Option.dest`]"
msgstr "``\"count\"`` [关联: :attr:`~Option.dest`]"

#: ../../library/optparse.rst:1328
msgid ""
"Increment the integer stored at :attr:`~Option.dest`.  If no default value "
"is supplied, :attr:`~Option.dest` is set to zero before being incremented "
"the first time."
msgstr ""
"对保存在 :attr:`~Option.dest` 的整数执行递增。 如果未提供默认值，则 :attr:`~Option.dest` "
"会在第一次执行递增之前被设为零。"

#: ../../library/optparse.rst:1334
msgid "parser.add_option(\"-v\", action=\"count\", dest=\"verbosity\")"
msgstr "parser.add_option(\"-v\", action=\"count\", dest=\"verbosity\")"

#: ../../library/optparse.rst:1336
msgid ""
"The first time ``-v`` is seen on the command line, :mod:`optparse` does the "
"equivalent of::"
msgstr "第一次在命令行中看到 ``-v`` 时，:mod:`optparse` 将执行这样的操作::"

#: ../../library/optparse.rst:1339
msgid ""
"options.verbosity = 0\n"
"options.verbosity += 1"
msgstr ""
"options.verbosity = 0\n"
"options.verbosity += 1"

#: ../../library/optparse.rst:1342
msgid "Every subsequent occurrence of ``-v`` results in  ::"
msgstr "后续每次出现 ``-v`` 都将导致  ::"

#: ../../library/optparse.rst:1344
msgid "options.verbosity += 1"
msgstr "options.verbosity += 1"

#: ../../library/optparse.rst:1346
msgid ""
"``\"callback\"`` [required: :attr:`~Option.callback`; relevant: "
":attr:`~Option.type`, :attr:`~Option.nargs`, :attr:`~Option.callback_args`, "
":attr:`~Option.callback_kwargs`]"
msgstr ""
"``\"callback\"`` [需要: :attr:`~Option.callback`; 关联: :attr:`~Option.type`, "
":attr:`~Option.nargs`, :attr:`~Option.callback_args`, "
":attr:`~Option.callback_kwargs`]"

#: ../../library/optparse.rst:1350
msgid ""
"Call the function specified by :attr:`~Option.callback`, which is called as "
"::"
msgstr "调用 :attr:`~Option.callback` 所指定的函数，它将以如下形式被调用 ::"

#: ../../library/optparse.rst:1352 ../../library/optparse.rst:1750
msgid "func(option, opt_str, value, parser, *args, **kwargs)"
msgstr "func(option, opt_str, value, parser, *args, **kwargs)"

#: ../../library/optparse.rst:1354
msgid "See section :ref:`optparse-option-callbacks` for more detail."
msgstr "请参阅 :ref:`optparse-option-callbacks` 一节了解详情。"

#: ../../library/optparse.rst:1358
msgid ""
"Prints a complete help message for all the options in the current option "
"parser.  The help message is constructed from the ``usage`` string passed to"
" OptionParser's constructor and the :attr:`~Option.help` string passed to "
"every option."
msgstr ""
"为当前选项解析器中所有的选项打印完整帮助消息。 该帮助消息是由传给 OptionParser 的构造器的 ``usage`` 字符串和传给每个选项的 "
":attr:`~Option.help` 字符串构造而成的。"

#: ../../library/optparse.rst:1363
msgid ""
"If no :attr:`~Option.help` string is supplied for an option, it will still "
"be listed in the help message.  To omit an option entirely, use the special "
"value :const:`optparse.SUPPRESS_HELP`."
msgstr ""
"如果没有为某个选项提供 :attr:`~Option.help` 字符串，它仍将在帮助消息中列出。 要完全略去某个选项，请使用特殊值 "
":const:`optparse.SUPPRESS_HELP`。"

#: ../../library/optparse.rst:1367
msgid ""
":mod:`optparse` automatically adds a :attr:`~Option.help` option to all "
"OptionParsers, so you do not normally need to create one."
msgstr ""
":mod:`optparse` 将自动为所有OptionParser 添加 :attr:`~Option.help` 选项，因此你通常不需要创建选项。"

#: ../../library/optparse.rst:1372
msgid ""
"from optparse import OptionParser, SUPPRESS_HELP\n"
"\n"
"# usually, a help option is added automatically, but that can\n"
"# be suppressed using the add_help_option argument\n"
"parser = OptionParser(add_help_option=False)\n"
"\n"
"parser.add_option(\"-h\", \"--help\", action=\"help\")\n"
"parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\",\n"
"                  help=\"Be moderately verbose\")\n"
"parser.add_option(\"--file\", dest=\"filename\",\n"
"                  help=\"Input file to read data from\")\n"
"parser.add_option(\"--secret\", help=SUPPRESS_HELP)"
msgstr ""
"from optparse import OptionParser, SUPPRESS_HELP\n"
"\n"
"# 通常，help 选项会自动添加，但可以\n"
"# 使用 add_help_option 参数来屏蔽\n"
"parser = OptionParser(add_help_option=False)\n"
"\n"
"parser.add_option(\"-h\", \"--help\", action=\"help\")\n"
"parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\",\n"
"                  help=\"Be moderately verbose\")\n"
"parser.add_option(\"--file\", dest=\"filename\",\n"
"                  help=\"Input file to read data from\")\n"
"parser.add_option(\"--secret\", help=SUPPRESS_HELP)"

#: ../../library/optparse.rst:1385
msgid ""
"If :mod:`optparse` sees either ``-h`` or ``--help`` on the command line, it "
"will print something like the following help message to stdout (assuming "
"``sys.argv[0]`` is ``\"foo.py\"``):"
msgstr ""
"如果 :mod:`optparse` 在命令行中看到 ``-h`` 或 ``--help``，它将将类似下面这样的帮助消息打印到 stdout (假设 "
"``sys.argv[0]`` 为 ``\"foo.py\"``):"

#: ../../library/optparse.rst:1389
msgid ""
"Usage: foo.py [options]\n"
"\n"
"Options:\n"
"  -h, --help        Show this help message and exit\n"
"  -v                Be moderately verbose\n"
"  --file=FILENAME   Input file to read data from"
msgstr ""
"Usage: foo.py [options]\n"
"\n"
"Options:\n"
"  -h, --help        Show this help message and exit\n"
"  -v                Be moderately verbose\n"
"  --file=FILENAME   Input file to read data from"

#: ../../library/optparse.rst:1398
msgid ""
"After printing the help message, :mod:`optparse` terminates your process "
"with ``sys.exit(0)``."
msgstr "在打印帮助消息之后，:mod:`optparse` 将使用 ``sys.exit(0)`` 来终结你的进程。"

#: ../../library/optparse.rst:1401
msgid "``\"version\"``"
msgstr "``\"version\"``"

#: ../../library/optparse.rst:1403
msgid ""
"Prints the version number supplied to the OptionParser to stdout and exits. "
"The version number is actually formatted and printed by the "
"``print_version()`` method of OptionParser.  Generally only relevant if the "
"``version`` argument is supplied to the OptionParser constructor.  As with "
":attr:`~Option.help` options, you will rarely create ``version`` options, "
"since :mod:`optparse` automatically adds them when needed."
msgstr ""
"将提供给 OptionParser 的版本号打印到 stdout 并退出。 该版本号实际上是由 OptionParser 的 "
"``print_version()`` 方法进行格式化并打印的。 这通常只在向 OptionParser 构造器提供了 ``version`` "
"参数时才有意义。 与 :attr:`~Option.help` 选项类似，你很少会创建 ``version`` 选项，因为 "
":mod:`optparse` 会在需要时自动添加它们。"

#: ../../library/optparse.rst:1414
msgid "Standard option types"
msgstr "标准选项类型"

#: ../../library/optparse.rst:1416
msgid ""
":mod:`optparse` has five built-in option types: ``\"string\"``, ``\"int\"``,"
" ``\"choice\"``, ``\"float\"`` and ``\"complex\"``.  If you need to add new "
"option types, see section :ref:`optparse-extending-optparse`."
msgstr ""
":mod:`optparse` 有五种内置选项类型: ``\"string\"``, ``\"int\"``, ``\"choice\"``, "
"``\"float\"`` 和 ``\"complex\"``。 如果你需要添加新的选项类型，请参阅 :ref:`optparse-extending-"
"optparse` 一节。"

#: ../../library/optparse.rst:1420
msgid ""
"Arguments to string options are not checked or converted in any way: the "
"text on the command line is stored in the destination (or passed to the "
"callback) as-is."
msgstr "传给 string 类型选项的参数不会以任何方式进行检查或转换：命令行中的文本将被原样保存至目标（或传给回调）。"

#: ../../library/optparse.rst:1423
msgid "Integer arguments (type ``\"int\"``) are parsed as follows:"
msgstr "整数参数 (``\"int\"`` 类型) 将以如下方式解析:"

#: ../../library/optparse.rst:1425
msgid "if the number starts with ``0x``, it is parsed as a hexadecimal number"
msgstr "如果数字开头为 ``0x``，它将被解析为十六进制数"

#: ../../library/optparse.rst:1427
msgid "if the number starts with ``0``, it is parsed as an octal number"
msgstr "如果数字开头为 ``0``，它将被解析为八进制数"

#: ../../library/optparse.rst:1429
msgid "if the number starts with ``0b``, it is parsed as a binary number"
msgstr "如果数字开头为 ``0b``，它将被解析为二进制数"

#: ../../library/optparse.rst:1431
msgid "otherwise, the number is parsed as a decimal number"
msgstr "在其他情况下，数字将被解析为十进制数"

#: ../../library/optparse.rst:1434
msgid ""
"The conversion is done by calling :func:`int` with the appropriate base (2, "
"8, 10, or 16).  If this fails, so will :mod:`optparse`, although with a more"
" useful error message."
msgstr ""
"转换操作是通过调用 :func:`int` 并传入适当的 base (2, 8, 10 或 16) 来完成的。 如果转换失败， "
":mod:`optparse` 也将失败，但它会附带更有用的错误消息。"

#: ../../library/optparse.rst:1438
msgid ""
"``\"float\"`` and ``\"complex\"`` option arguments are converted directly "
"with :func:`float` and :func:`complex`, with similar error-handling."
msgstr ""
"``\"float\"`` 和 ``\"complex\"`` 选项参数会直接通过 :func:`float` 和 :func:`complex` "
"来转换，使用类似的错误处理。"

#: ../../library/optparse.rst:1441
msgid ""
"``\"choice\"`` options are a subtype of ``\"string\"`` options.  The "
":attr:`~Option.choices` option attribute (a sequence of strings) defines the"
" set of allowed option arguments.  :func:`optparse.check_choice` compares "
"user-supplied option arguments against this master list and raises "
":exc:`OptionValueError` if an invalid string is given."
msgstr ""
"``\"choice\"`` 选项是 ``\"string\"`` 选项的子类型。 :attr:`~Option.choices` "
"选项属性（由字符串组成的序列）定义了允许的选项参数的集合。 :func:`optparse.check_choice` "
"将用户提供的选项参数与这个主列表进行比较并会在给出无效的字符串时引发 :exc:`OptionValueError`。"

#: ../../library/optparse.rst:1451
msgid "Parsing arguments"
msgstr "解析参数"

#: ../../library/optparse.rst:1453
msgid ""
"The whole point of creating and populating an OptionParser is to call its "
":meth:`~OptionParser.parse_args` method."
msgstr "创建和填充 OptionParser 的基本目的是调用其 :meth:`~OptionParser.parse_args` 方法。"

#: ../../library/optparse.rst:1458
msgid "Parse the command-line options found in *args*."
msgstr "解析 *args* 中的命令行选项。"

#: ../../library/optparse.rst:1460
msgid "The input parameters are"
msgstr "输入形参为"

#: ../../library/optparse.rst:1462 ../../library/optparse.rst:1476
#: ../../library/optparse.rst:1794
msgid "``args``"
msgstr "``args``"

#: ../../library/optparse.rst:1463
msgid "the list of arguments to process (default: ``sys.argv[1:]``)"
msgstr "要处理的参数列表 (默认: ``sys.argv[1:]``)"

#: ../../library/optparse.rst:1465
msgid "``values``"
msgstr "``values``"

#: ../../library/optparse.rst:1466
msgid ""
"a :class:`Values` object to store option arguments in (default: a new "
"instance of :class:`Values`) -- if you give an existing object, the option "
"defaults will not be initialized on it"
msgstr ""
"要用于存储选项参数的 :class:`Values` 对象（默认值：一个新的 :class:`Values` 实例） -- "
"如果你给出一个现有对象，则不会基于它来初始化选项的默认值。"

#: ../../library/optparse.rst:1470
msgid "and the return value is a pair ``(options, args)`` where"
msgstr "并且返回值是一个 ``(options, args)`` 对，其中"

#: ../../library/optparse.rst:1472
msgid "``options``"
msgstr "``options``"

#: ../../library/optparse.rst:1473
msgid ""
"the same object that was passed in as *values*, or the ``optparse.Values`` "
"instance created by :mod:`optparse`"
msgstr "就是作为 *values* 传入的同一个对象，或是由 :mod:`optparse` 创建的 ``optparse.Values`` 实例"

#: ../../library/optparse.rst:1477
msgid ""
"the leftover positional arguments after all options have been processed"
msgstr "在所有选项被处理完毕后余下的位置参数"

#: ../../library/optparse.rst:1479
msgid ""
"The most common usage is to supply neither keyword argument.  If you supply "
"``values``, it will be modified with repeated :func:`setattr` calls (roughly"
" one for every option argument stored to an option destination) and returned"
" by :meth:`~OptionParser.parse_args`."
msgstr ""
"最常见的用法是不提供任何关键字参数。 如果你提供了 ``values``，它将通过重复的 :func:`setattr` "
"调用来修改（大致为每个存储到指定选项目标的选项参数调用一次）并由 :meth:`~OptionParser.parse_args` 返回。"

#: ../../library/optparse.rst:1484
msgid ""
"If :meth:`~OptionParser.parse_args` encounters any errors in the argument "
"list, it calls the OptionParser's :meth:`error` method with an appropriate "
"end-user error message. This ultimately terminates your process with an exit"
" status of 2 (the traditional Unix exit status for command-line errors)."
msgstr ""
"如果 :meth:`~OptionParser.parse_args` 在参数列表中遇到任何错误，它将调用 OptionParser 的 "
":meth:`error` 方法并附带适当的最终用户错误消息。 这会完全终结你的进程并将退出状态设为 2 (传统的针对命令行错误的 Unix "
"退出状态)。"

#: ../../library/optparse.rst:1493
msgid "Querying and manipulating your option parser"
msgstr "查询和操纵你的选项解析器"

#: ../../library/optparse.rst:1495
msgid ""
"The default behavior of the option parser can be customized slightly, and "
"you can also poke around your option parser and see what's there.  "
"OptionParser provides several methods to help you out:"
msgstr ""
"选项解析器的默认行为可被轻度地定制，并且你还可以调整你的选项解析器查看实际效果如何。 OptionParser 提供了一些方法来帮助你进行定制:"

#: ../../library/optparse.rst:1501
msgid ""
"Set parsing to stop on the first non-option.  For example, if ``-a`` and "
"``-b`` are both simple options that take no arguments, :mod:`optparse` "
"normally accepts this syntax::"
msgstr ""
"设置解析在第一个非选项处停止。 举例来说，如果 ``-a`` 和 ``-b`` 都是不接受参数的简单选项，则 :mod:`optparse` "
"通常会接受这样的语法::"

#: ../../library/optparse.rst:1505
msgid "prog -a arg1 -b arg2"
msgstr "prog -a arg1 -b arg2"

#: ../../library/optparse.rst:1507
msgid "and treats it as equivalent to  ::"
msgstr "并会这样处理它 ::"

#: ../../library/optparse.rst:1509
msgid "prog -a -b arg1 arg2"
msgstr "prog -a -b arg1 arg2"

#: ../../library/optparse.rst:1511
msgid ""
"To disable this feature, call :meth:`disable_interspersed_args`.  This "
"restores traditional Unix syntax, where option parsing stops with the first "
"non-option argument."
msgstr ""
"要禁用此特性，则调用 :meth:`disable_interspersed_args`。 这将恢复传统的 Unix "
"语法，其中选项解析会在第一个非选项参数处停止。"

#: ../../library/optparse.rst:1515
msgid ""
"Use this if you have a command processor which runs another command which "
"has options of its own and you want to make sure these options don't get "
"confused.  For example, each command might have a different set of options."
msgstr ""
"如果你用一个命令处理程序来运行另一个拥有它自己的选项的命令而你希望参确保这些选项不会被混淆就可以使用此方法。 例如，每个命令可能具有不同的选项集合。"

#: ../../library/optparse.rst:1521
msgid ""
"Set parsing to not stop on the first non-option, allowing interspersing "
"switches with command arguments.  This is the default behavior."
msgstr "设置解析不在第一个非选项处停止，允许多个命令行参数的插入相互切换。 这是默认的行为。"

#: ../../library/optparse.rst:1526
msgid ""
"Returns the Option instance with the option string *opt_str*, or ``None`` if"
" no options have that option string."
msgstr "返回具有选项字符串 *opt_str* 的的 Option 实例，或者如果不存在具有该选项字符串的选项则返回 ``None``。"

#: ../../library/optparse.rst:1531
msgid ""
"Return ``True`` if the OptionParser has an option with option string "
"*opt_str* (e.g., ``-q`` or ``--verbose``)."
msgstr ""
"如果 OptionParser 包含一个具有选项字符串 *opt_str* 的选项 (例如 ``-q`` 或 ``--verbose``) 则返回 "
"``True``。"

#: ../../library/optparse.rst:1536
msgid ""
"If the :class:`OptionParser` has an option corresponding to *opt_str*, that "
"option is removed.  If that option provided any other option strings, all of"
" those option strings become invalid. If *opt_str* does not occur in any "
"option belonging to this :class:`OptionParser`, raises :exc:`ValueError`."
msgstr ""
"如果 :class:`OptionParser` 包含一个对应于 *opt_str* 的选项，则移除该选项。 "
"如果该选项提供了任何其他选项字符串，这些选项字符串将全部不可用。 如果 *opt_str* 不存在于任何属于此 "
":class:`OptionParser` 的选项之中，则会引发 :exc:`ValueError`。"

#: ../../library/optparse.rst:1545
msgid "Conflicts between options"
msgstr "选项之间的冲突"

#: ../../library/optparse.rst:1547
msgid ""
"If you're not careful, it's easy to define options with conflicting option "
"strings::"
msgstr "如果你不够小心，很容易会定义具有相互冲突的选项字符串的多个选项::"

#: ../../library/optparse.rst:1550
msgid ""
"parser.add_option(\"-n\", \"--dry-run\", ...)\n"
"...\n"
"parser.add_option(\"-n\", \"--noisy\", ...)"
msgstr ""
"parser.add_option(\"-n\", \"--dry-run\", ...)\n"
"...\n"
"parser.add_option(\"-n\", \"--noisy\", ...)"

#: ../../library/optparse.rst:1554
msgid ""
"(This is particularly true if you've defined your own OptionParser subclass "
"with some standard options.)"
msgstr "（当你自定义具有某些标准选项的 OptionParser 时特别容易发生这种情况。）"

#: ../../library/optparse.rst:1557
msgid ""
"Every time you add an option, :mod:`optparse` checks for conflicts with "
"existing options.  If it finds any, it invokes the current conflict-handling"
" mechanism. You can set the conflict-handling mechanism either in the "
"constructor::"
msgstr ""
"每当你添加一个选项时，:mod:`optparse` 会检查它是否与现有选项冲突。 如果发现存在冲突，它将唤起当前的冲突处理机制。 "
"你可以选择在构造器中设置冲突处理机制::"

#: ../../library/optparse.rst:1561
msgid "parser = OptionParser(..., conflict_handler=handler)"
msgstr "parser = OptionParser(..., conflict_handler=handler)"

#: ../../library/optparse.rst:1563
msgid "or with a separate call::"
msgstr "或是在单独调用中设置::"

#: ../../library/optparse.rst:1565
msgid "parser.set_conflict_handler(handler)"
msgstr "parser.set_conflict_handler(handler)"

#: ../../library/optparse.rst:1567
msgid "The available conflict handlers are:"
msgstr "可用的冲突处理器有:"

#: ../../library/optparse.rst:1569
msgid "``\"error\"`` (default)"
msgstr "``\"error\"`` (默认)"

#: ../../library/optparse.rst:1570
msgid ""
"assume option conflicts are a programming error and raise "
":exc:`OptionConflictError`"
msgstr "将选项冲突视为编程错误并引发 :exc:`OptionConflictError`"

#: ../../library/optparse.rst:1573
msgid "``\"resolve\"``"
msgstr "``\"resolve\"``"

#: ../../library/optparse.rst:1574
msgid "resolve option conflicts intelligently (see below)"
msgstr "智能地解决选项冲突（见下文）"

#: ../../library/optparse.rst:1577
msgid ""
"As an example, let's define an :class:`OptionParser` that resolves conflicts"
" intelligently and add conflicting options to it::"
msgstr "举例来说，让我们定义一个智能地解决冲突的 :class:`OptionParser` 并向其添加相互冲突的选项::"

#: ../../library/optparse.rst:1580
msgid ""
"parser = OptionParser(conflict_handler=\"resolve\")\n"
"parser.add_option(\"-n\", \"--dry-run\", ..., help=\"do no harm\")\n"
"parser.add_option(\"-n\", \"--noisy\", ..., help=\"be noisy\")"
msgstr ""
"parser = OptionParser(conflict_handler=\"resolve\")\n"
"parser.add_option(\"-n\", \"--dry-run\", ..., help=\"do no harm\")\n"
"parser.add_option(\"-n\", \"--noisy\", ..., help=\"be noisy\")"

#: ../../library/optparse.rst:1584
msgid ""
"At this point, :mod:`optparse` detects that a previously added option is "
"already using the ``-n`` option string.  Since ``conflict_handler`` is "
"``\"resolve\"``, it resolves the situation by removing ``-n`` from the "
"earlier option's list of option strings.  Now ``--dry-run`` is the only way "
"for the user to activate that option.  If the user asks for help, the help "
"message will reflect that::"
msgstr ""
"这时，:mod:`optparse` 会检测到之前添加的选项已经在使用 ``-n`` 选项字符串。 由于 ``conflict_handler`` 为 "
"``\"resolve\"``，它将通过在之前选项的选项字符串列表中移除 ``-n`` 来解决冲突。 现在 ``--dry-run`` "
"将是用户激活该选项的唯一方式。 如果用户要获取帮助，帮助消息将反映这一变化::"

#: ../../library/optparse.rst:1590
msgid ""
"Options:\n"
"  --dry-run     do no harm\n"
"  ...\n"
"  -n, --noisy   be noisy"
msgstr ""
"Options:\n"
"  --dry-run     do no harm\n"
"  ...\n"
"  -n, --noisy   be noisy"

#: ../../library/optparse.rst:1595
msgid ""
"It's possible to whittle away the option strings for a previously added "
"option until there are none left, and the user has no way of invoking that "
"option from the command-line.  In that case, :mod:`optparse` removes that "
"option completely, so it doesn't show up in help text or anywhere else. "
"Carrying on with our existing OptionParser::"
msgstr ""
"之前添加的选项有可能不断更取代直到一个都不剩，这样用户将无法再从命令行唤起相应的选项。 在这种情况下，:mod:`optparse` "
"将完全移除这样的选项，使它不会在帮助文本或任何其他地方显示。 如果我们继续修改现有的 OptionParser::"

#: ../../library/optparse.rst:1601
msgid "parser.add_option(\"--dry-run\", ..., help=\"new dry-run option\")"
msgstr "parser.add_option(\"--dry-run\", ..., help=\"new dry-run option\")"

#: ../../library/optparse.rst:1603
msgid ""
"At this point, the original ``-n``/``--dry-run`` option is no longer "
"accessible, so :mod:`optparse` removes it, leaving this help text::"
msgstr ""
"这时，原有的 ``-n``/``--dry-run`` 选项将不再可用，因此 :mod:`optparse` 会将其移除，帮助文本将变成这样::"

#: ../../library/optparse.rst:1606
msgid ""
"Options:\n"
"  ...\n"
"  -n, --noisy   be noisy\n"
"  --dry-run     new dry-run option"
msgstr ""
"Options:\n"
"  ...\n"
"  -n, --noisy   be noisy\n"
"  --dry-run     new dry-run option"

#: ../../library/optparse.rst:1615
msgid "Cleanup"
msgstr "清理"

#: ../../library/optparse.rst:1617
msgid ""
"OptionParser instances have several cyclic references.  This should not be a"
" problem for Python's garbage collector, but you may wish to break the "
"cyclic references explicitly by calling :meth:`~OptionParser.destroy` on "
"your OptionParser once you are done with it.  This is particularly useful in"
" long-running applications where large object graphs are reachable from your"
" OptionParser."
msgstr ""
"OptionParser 实例存在一些循环引用。 这对 Python 的垃圾回收器来说应该不是问题，但你可能希望在你完成对 OptionParser "
"的使用后通过调用其 :meth:`~OptionParser.destroy` 来显式地中断循环引用。 这在可以从你的 OptionParser "
"访问大型对象图的长期运行应用程序中特别有用。"

#: ../../library/optparse.rst:1628
msgid "Other methods"
msgstr "其他方法"

#: ../../library/optparse.rst:1630
msgid "OptionParser supports several other public methods:"
msgstr "OptionParser 还支持其他一些公有方法:"

#: ../../library/optparse.rst:1634
msgid ""
"Set the usage string according to the rules described above for the "
"``usage`` constructor keyword argument.  Passing ``None`` sets the default "
"usage string; use :const:`optparse.SUPPRESS_USAGE` to suppress a usage "
"message."
msgstr ""
"根据上述的规则为 ``usage`` 构造器关键字参数设置用法字符串。 传入 ``None`` 将设置默认的用法字符串；使用 "
":const:`optparse.SUPPRESS_USAGE` 将屏蔽用法说明。"

#: ../../library/optparse.rst:1640
msgid ""
"Print the usage message for the current program (``self.usage``) to *file* "
"(default stdout).  Any occurrence of the string ``%prog`` in ``self.usage`` "
"is replaced with the name of the current program.  Does nothing if "
"``self.usage`` is empty or not defined."
msgstr ""
"将当前程序的用法消息 (``self.usage``) 打印到 *file* (默认为 stdout)。 出现在 ``self.usage`` "
"中的字符串 ``%prog`` 将全部被替换为当前程序的名称。 如果 ``self.usage`` 为空或未定义则不做任何事情。"

#: ../../library/optparse.rst:1647
msgid ""
"Same as :meth:`print_usage` but returns the usage string instead of printing"
" it."
msgstr "与 :meth:`print_usage` 类似但是将返回用法字符串而不是打印它。"

#: ../../library/optparse.rst:1652
msgid ""
"Set default values for several option destinations at once.  Using "
":meth:`set_defaults` is the preferred way to set default values for options,"
" since multiple options can share the same destination.  For example, if "
"several \"mode\" options all set the same destination, any one of them can "
"set the default, and the last one wins::"
msgstr ""
"一次性地为多个选项目标设置默认值。 使用 :meth:`set_defaults` 是为选项设置默认值的推荐方式同，因为多个选项可以共享同一个目标。 "
"举例来说，如果几个 \"mode\" 选项全部设置了相同的目标，则它们中的任何一个都可以设置默认值，而最终生效的将是最后一次设置的默认值::"

#: ../../library/optparse.rst:1658
msgid ""
"parser.add_option(\"--advanced\", action=\"store_const\",\n"
"                  dest=\"mode\", const=\"advanced\",\n"
"                  default=\"novice\")    # overridden below\n"
"parser.add_option(\"--novice\", action=\"store_const\",\n"
"                  dest=\"mode\", const=\"novice\",\n"
"                  default=\"advanced\")  # overrides above setting"
msgstr ""
"parser.add_option(\"--advanced\", action=\"store_const\",\n"
"                  dest=\"mode\", const=\"advanced\",\n"
"                  default=\"novice\")    # 覆盖下面的设置\n"
"parser.add_option(\"--novice\", action=\"store_const\",\n"
"                  dest=\"mode\", const=\"novice\",\n"
"                  default=\"advanced\")  # 覆盖上面的设置"

#: ../../library/optparse.rst:1665
msgid "To avoid this confusion, use :meth:`set_defaults`::"
msgstr "为避免混淆，请使用 :meth:`set_defaults`::"

#: ../../library/optparse.rst:1667
msgid ""
"parser.set_defaults(mode=\"advanced\")\n"
"parser.add_option(\"--advanced\", action=\"store_const\",\n"
"                  dest=\"mode\", const=\"advanced\")\n"
"parser.add_option(\"--novice\", action=\"store_const\",\n"
"                  dest=\"mode\", const=\"novice\")"
msgstr ""
"parser.set_defaults(mode=\"advanced\")\n"
"parser.add_option(\"--advanced\", action=\"store_const\",\n"
"                  dest=\"mode\", const=\"advanced\")\n"
"parser.add_option(\"--novice\", action=\"store_const\",\n"
"                  dest=\"mode\", const=\"novice\")"

#: ../../library/optparse.rst:1677
msgid "Option Callbacks"
msgstr "选项回调"

#: ../../library/optparse.rst:1679
msgid ""
"When :mod:`optparse`'s built-in actions and types aren't quite enough for "
"your needs, you have two choices: extend :mod:`optparse` or define a "
"callback option. Extending :mod:`optparse` is more general, but overkill for"
" a lot of simple cases.  Quite often a simple callback is all you need."
msgstr ""
"当 :mod:`optparse` 的内置动作和类型不能满足你的需要时，你有两个选择：扩展 :mod:`optparse` 或定义一个回调选项。 扩展 "
":mod:`optparse` 的方式更为通用，但对许多简单场景来说是大材小用了。 你所需要的往往只是一个简单的回调。"

#: ../../library/optparse.rst:1684
msgid "There are two steps to defining a callback option:"
msgstr "定义一个回调选项分为两步:"

#: ../../library/optparse.rst:1686
msgid "define the option itself using the ``\"callback\"`` action"
msgstr "使用 ``\"callback\"`` 动作定义选项本身"

#: ../../library/optparse.rst:1688
msgid ""
"write the callback; this is a function (or method) that takes at least four "
"arguments, as described below"
msgstr "编写回调；它是一个接受至少四个参数的函数（或方法），如下所述"

#: ../../library/optparse.rst:1695
msgid "Defining a callback option"
msgstr "定义回调选项"

#: ../../library/optparse.rst:1697
msgid ""
"As always, the easiest way to define a callback option is by using the "
":meth:`OptionParser.add_option` method.  Apart from :attr:`~Option.action`, "
"the only option attribute you must specify is ``callback``, the function to "
"call::"
msgstr ""
"一般来说，定义回调选项的最简单方式是使用 :meth:`OptionParser.add_option` 方法。 在 "
":attr:`~Option.action` 之外，你必须指定的唯一选项属性是 ``callback``，即要调用的函数::"

#: ../../library/optparse.rst:1701
msgid "parser.add_option(\"-c\", action=\"callback\", callback=my_callback)"
msgstr "parser.add_option(\"-c\", action=\"callback\", callback=my_callback)"

#: ../../library/optparse.rst:1703
msgid ""
"``callback`` is a function (or other callable object), so you must have "
"already defined ``my_callback()`` when you create this callback option. In "
"this simple case, :mod:`optparse` doesn't even know if ``-c`` takes any "
"arguments, which usually means that the option takes no arguments---the mere"
" presence of ``-c`` on the command-line is all it needs to know.  In some "
"circumstances, though, you might want your callback to consume an arbitrary "
"number of command-line arguments.  This is where writing callbacks gets "
"tricky; it's covered later in this section."
msgstr ""
"``callback`` 是一个函数（或其他可调用对象），因此当你创建这个回调选项时你必须已经定义了 ``my_callback()``。 "
"在这个简单的例子中，:mod:`optparse` 甚至不知道 ``-c`` 是否接受任何参数，这通常意味着该选项不接受任何参数 --- "
"它需要知道的就是存在命令行参数 ``-c``。 但是，在某些情况下，你可能希望你的回调接受任意数量的命令行参数。 "
"这是编写回调的一个麻烦之处；本小节将稍后讲解这个问题。"

#: ../../library/optparse.rst:1712
msgid ""
":mod:`optparse` always passes four particular arguments to your callback, "
"and it will only pass additional arguments if you specify them via "
":attr:`~Option.callback_args` and :attr:`~Option.callback_kwargs`.  Thus, "
"the minimal callback function signature is::"
msgstr ""
":mod:`optparse` 总是会向你的回调传递四个特定参数，它只会在你通过 :attr:`~Option.callback_args` 和 "
":attr:`~Option.callback_kwargs` 进行指定时才传入额外的参数。 因此，最小化的回调函数签名如下::"

#: ../../library/optparse.rst:1717
msgid "def my_callback(option, opt, value, parser):"
msgstr "def my_callback(option, opt, value, parser):"

#: ../../library/optparse.rst:1719
msgid "The four arguments to a callback are described below."
msgstr "对传给回调的四个参数的说明见下文。"

#: ../../library/optparse.rst:1721
msgid ""
"There are several other option attributes that you can supply when you "
"define a callback option:"
msgstr "当你定义回调选项时还可以提供一些其他的选项属性:"

#: ../../library/optparse.rst:1724
msgid ":attr:`~Option.type`"
msgstr ":attr:`~Option.type`"

#: ../../library/optparse.rst:1725
msgid ""
"has its usual meaning: as with the ``\"store\"`` or ``\"append\"`` actions, "
"it instructs :mod:`optparse` to consume one argument and convert it to "
":attr:`~Option.type`.  Rather than storing the converted value(s) anywhere, "
"though, :mod:`optparse` passes it to your callback function."
msgstr ""
"具有其通常的含义：与在 ``\"store\"`` 或 ``\"append\"`` 动作中一样，它指示 :mod:`optparse` "
"读取一个参数并将其转换为 :attr:`~Option.type`。 但是，:mod:`optparse` "
"并不会将所转换的值保存到某个地方，而是将其传给你的回调函数。"

#: ../../library/optparse.rst:1730
msgid ":attr:`~Option.nargs`"
msgstr ":attr:`~Option.nargs`"

#: ../../library/optparse.rst:1731
msgid ""
"also has its usual meaning: if it is supplied and > 1, :mod:`optparse` will "
"consume :attr:`~Option.nargs` arguments, each of which must be convertible "
"to :attr:`~Option.type`.  It then passes a tuple of converted values to your"
" callback."
msgstr ""
"同样具有其通常的含义：如果提供了该属性并且其值 > 1，:mod:`optparse` 将读取 :attr:`~Option.nargs` "
"个参数，每个参数都必须可被转换为 :attr:`~Option.type`。 随后它会将被转换值的元组传给你的回调。"

#: ../../library/optparse.rst:1736
msgid ":attr:`~Option.callback_args`"
msgstr ":attr:`~Option.callback_args`"

#: ../../library/optparse.rst:1737
msgid "a tuple of extra positional arguments to pass to the callback"
msgstr "一个要传给回调的由额外位置参数组成的元组"

#: ../../library/optparse.rst:1739
msgid ":attr:`~Option.callback_kwargs`"
msgstr ":attr:`~Option.callback_kwargs`"

#: ../../library/optparse.rst:1740
msgid "a dictionary of extra keyword arguments to pass to the callback"
msgstr "一个要传给回调的由额外关键字参数组成的字典"

#: ../../library/optparse.rst:1746
msgid "How callbacks are called"
msgstr "回调应当如何调用"

#: ../../library/optparse.rst:1748
msgid "All callbacks are called as follows::"
msgstr "所有回调都将使用以下方式调用::"

#: ../../library/optparse.rst:1754
msgid "``option``"
msgstr "``option``"

#: ../../library/optparse.rst:1755
msgid "is the Option instance that's calling the callback"
msgstr "是调用该回调的 Option 实例"

#: ../../library/optparse.rst:1757
msgid "``opt_str``"
msgstr "``opt_str``"

#: ../../library/optparse.rst:1758
msgid ""
"is the option string seen on the command-line that's triggering the "
"callback. (If an abbreviated long option was used, ``opt_str`` will be the "
"full, canonical option string---e.g. if the user puts ``--foo`` on the "
"command-line as an abbreviation for ``--foobar``, then ``opt_str`` will be "
"``\"--foobar\"``.)"
msgstr ""
"是在触发回调的命令行参数中出现的选项字符串。 （如果使用了长选项的缩写形式，则 ``opt_str`` 将为完整规范的选项字符串 --- "
"举例来说，如果用户在命令行中将 ``--foo`` 作为 ``--foobar`` 的缩写形式，则 ``opt_str`` 将为 ``\"--"
"foobar\"``。）"

#: ../../library/optparse.rst:1764
msgid "``value``"
msgstr "``value``"

#: ../../library/optparse.rst:1765
msgid ""
"is the argument to this option seen on the command-line.  :mod:`optparse` "
"will only expect an argument if :attr:`~Option.type` is set; the type of "
"``value`` will be the type implied by the option's type.  If "
":attr:`~Option.type` for this option is ``None`` (no argument expected), "
"then ``value`` will be ``None``.  If :attr:`~Option.nargs` > 1, ``value`` "
"will be a tuple of values of the appropriate type."
msgstr ""
"是在命令行中提供给该选项的参数。 :mod:`optparse` 将只在设置了 :attr:`~Option.type` "
"的时候才接受参数；``value`` 将为该选项的类型所指定的类型。 如果该选项的 :attr:`~Option.type` 为 ``None`` "
"(不接受参数)，则 ``value`` 将为 ``None``。 如果 :attr:`~Option.nargs` > 1，则 ``value`` "
"将为由指定类型的值组成的元组。"

#: ../../library/optparse.rst:1771
msgid "``parser``"
msgstr "``parser``"

#: ../../library/optparse.rst:1772
msgid ""
"is the OptionParser instance driving the whole thing, mainly useful because "
"you can access some other interesting data through its instance attributes:"
msgstr "是驱动选项解析过程的 OptionParser 实例，主要作用在于你可以通过其实例属性访问其他一些相关数据:"

#: ../../library/optparse.rst:1775
msgid "``parser.largs``"
msgstr "``parser.largs``"

#: ../../library/optparse.rst:1776
msgid ""
"the current list of leftover arguments, ie. arguments that have been "
"consumed but are neither options nor option arguments. Feel free to modify "
"``parser.largs``, e.g. by adding more arguments to it.  (This list will "
"become ``args``, the second return value of "
":meth:`~OptionParser.parse_args`.)"
msgstr ""
"当前的剩余参数列表，即已被读取但不属于选项或选项参数的参数。 可以任意修改 ``parser.largs``，例如通过向其添加更多的参数。 "
"（该列表将成为 ``args``，即 :meth:`~OptionParser.parse_args` 的第二个返回值。）"

#: ../../library/optparse.rst:1781
msgid "``parser.rargs``"
msgstr "``parser.rargs``"

#: ../../library/optparse.rst:1782
msgid ""
"the current list of remaining arguments, ie. with ``opt_str`` and ``value`` "
"(if applicable) removed, and only the arguments following them still there."
"  Feel free to modify ``parser.rargs``, e.g. by consuming more arguments."
msgstr ""
"当前的保留参数列表，即移除了 ``opt_str`` 和 ``value`` (如果可用)，并且只有在它们之后的参数才会被保留。 可以任意修改 "
"``parser.rargs``，例如通过读取更多的参数。"

#: ../../library/optparse.rst:1787
msgid "``parser.values``"
msgstr "``parser.values``"

#: ../../library/optparse.rst:1788
msgid ""
"the object where option values are by default stored (an instance of "
"optparse.OptionValues).  This lets callbacks use the same mechanism as the "
"rest of :mod:`optparse` for storing option values; you don't need to mess "
"around with globals or closures.  You can also access or modify the value(s)"
" of any options already encountered on the command-line."
msgstr ""
"作为选项值默认保存位置的对象（一个 optparse.OptionValues 实例）。 这使得回调能使用与 :mod:`optparse` "
"的其他部分相同的机制来保存选项值；你不需要手动处理全局变量或闭包。 你还可以访问或修改在命令行中遇到的任何选项的值。"

#: ../../library/optparse.rst:1795
msgid ""
"is a tuple of arbitrary positional arguments supplied via the "
":attr:`~Option.callback_args` option attribute."
msgstr "是一个由通过 :attr:`~Option.callback_args` 选项属性提供的任意位置参数组成的元组。"

#: ../../library/optparse.rst:1798
msgid "``kwargs``"
msgstr "``kwargs``"

#: ../../library/optparse.rst:1799
msgid ""
"is a dictionary of arbitrary keyword arguments supplied via "
":attr:`~Option.callback_kwargs`."
msgstr "是一个由通过 :attr:`~Option.callback_kwargs` 提供的任意关键字参数组成的字典。"

#: ../../library/optparse.rst:1806
msgid "Raising errors in a callback"
msgstr "在回调中引发错误"

#: ../../library/optparse.rst:1808
msgid ""
"The callback function should raise :exc:`OptionValueError` if there are any "
"problems with the option or its argument(s).  :mod:`optparse` catches this "
"and terminates the program, printing the error message you supply to stderr."
"  Your message should be clear, concise, accurate, and mention the option at"
" fault. Otherwise, the user will have a hard time figuring out what they did"
" wrong."
msgstr ""
"如果选项或其参数存在任何问题则回调函数应当引发 :exc:`OptionValueError`。 :mod:`optparse` "
"将捕获该异常并终止程序，将你提供的错误消息打印到 stderr。 你的消息应当清晰、简洁、准确并指明出错的选项。 否则，用户将很难弄清楚自己做错了什么。"

#: ../../library/optparse.rst:1818
msgid "Callback example 1: trivial callback"
msgstr "回调示例 1：最简回调"

#: ../../library/optparse.rst:1820
msgid ""
"Here's an example of a callback option that takes no arguments, and simply "
"records that the option was seen::"
msgstr "下面是一个不接受任何参数，只是简单地记录所遇见的选项的回调选项示例::"

#: ../../library/optparse.rst:1823
msgid ""
"def record_foo_seen(option, opt_str, value, parser):\n"
"    parser.values.saw_foo = True\n"
"\n"
"parser.add_option(\"--foo\", action=\"callback\", callback=record_foo_seen)"
msgstr ""
"def record_foo_seen(option, opt_str, value, parser):\n"
"    parser.values.saw_foo = True\n"
"\n"
"parser.add_option(\"--foo\", action=\"callback\", callback=record_foo_seen)"

#: ../../library/optparse.rst:1828
msgid "Of course, you could do that with the ``\"store_true\"`` action."
msgstr "当然，你也可以使用 ``\"store_true\"`` 动作做到这一点。"

#: ../../library/optparse.rst:1834
msgid "Callback example 2: check option order"
msgstr "回调示例 2：检查选项顺序"

#: ../../library/optparse.rst:1836
msgid ""
"Here's a slightly more interesting example: record the fact that ``-a`` is "
"seen, but blow up if it comes after ``-b`` in the command-line.  ::"
msgstr "下面是一个更有趣些的示例：当看到 ``-a`` 出现时将会记录，而如果它在命令行中出现于 ``-b`` 之后则将报告错误。 ::"

#: ../../library/optparse.rst:1839
msgid ""
"def check_order(option, opt_str, value, parser):\n"
"    if parser.values.b:\n"
"        raise OptionValueError(\"can't use -a after -b\")\n"
"    parser.values.a = 1\n"
"...\n"
"parser.add_option(\"-a\", action=\"callback\", callback=check_order)\n"
"parser.add_option(\"-b\", action=\"store_true\", dest=\"b\")"
msgstr ""
"def check_order(option, opt_str, value, parser):\n"
"    if parser.values.b:\n"
"        raise OptionValueError(\"can't use -a after -b\")\n"
"    parser.values.a = 1\n"
"...\n"
"parser.add_option(\"-a\", action=\"callback\", callback=check_order)\n"
"parser.add_option(\"-b\", action=\"store_true\", dest=\"b\")"

#: ../../library/optparse.rst:1851
msgid "Callback example 3: check option order (generalized)"
msgstr "回调示例 3：检查选项顺序（通用）"

#: ../../library/optparse.rst:1853
msgid ""
"If you want to reuse this callback for several similar options (set a flag, "
"but blow up if ``-b`` has already been seen), it needs a bit of work: the "
"error message and the flag that it sets must be generalized.  ::"
msgstr ""
"如果你希望为多个类似的选项重用此回调（设置旗标，并在 ``-b`` 已经出现时触发），则需要一些额外工作：它设置的错误消息和旗标必须进行通用化。 ::"

#: ../../library/optparse.rst:1857
msgid ""
"def check_order(option, opt_str, value, parser):\n"
"    if parser.values.b:\n"
"        raise OptionValueError(\"can't use %s after -b\" % opt_str)\n"
"    setattr(parser.values, option.dest, 1)\n"
"...\n"
"parser.add_option(\"-a\", action=\"callback\", callback=check_order, dest='a')\n"
"parser.add_option(\"-b\", action=\"store_true\", dest=\"b\")\n"
"parser.add_option(\"-c\", action=\"callback\", callback=check_order, dest='c')"
msgstr ""
"def check_order(option, opt_str, value, parser):\n"
"    if parser.values.b:\n"
"        raise OptionValueError(\"can't use %s after -b\" % opt_str)\n"
"    setattr(parser.values, option.dest, 1)\n"
"...\n"
"parser.add_option(\"-a\", action=\"callback\", callback=check_order, dest='a')\n"
"parser.add_option(\"-b\", action=\"store_true\", dest=\"b\")\n"
"parser.add_option(\"-c\", action=\"callback\", callback=check_order, dest='c')"

#: ../../library/optparse.rst:1870
msgid "Callback example 4: check arbitrary condition"
msgstr "回调示例 4：检查任意条件"

#: ../../library/optparse.rst:1872
msgid ""
"Of course, you could put any condition in there---you're not limited to "
"checking the values of already-defined options.  For example, if you have "
"options that should not be called when the moon is full, all you have to do "
"is this::"
msgstr "当然，你可以设置任何条件 --- 并不限于检查已定义选项的值。 举例来说，如果你有一个不应当在满月时被调用的选项，你就可以这样做::"

#: ../../library/optparse.rst:1876
msgid ""
"def check_moon(option, opt_str, value, parser):\n"
"    if is_moon_full():\n"
"        raise OptionValueError(\"%s option invalid when moon is full\"\n"
"                               % opt_str)\n"
"    setattr(parser.values, option.dest, 1)\n"
"...\n"
"parser.add_option(\"--foo\",\n"
"                  action=\"callback\", callback=check_moon, dest=\"foo\")"
msgstr ""
"def check_moon(option, opt_str, value, parser):\n"
"    if is_moon_full():\n"
"        raise OptionValueError(\"%s option invalid when moon is full\"\n"
"                               % opt_str)\n"
"    setattr(parser.values, option.dest, 1)\n"
"...\n"
"parser.add_option(\"--foo\",\n"
"                  action=\"callback\", callback=check_moon, dest=\"foo\")"

#: ../../library/optparse.rst:1885
msgid ""
"(The definition of ``is_moon_full()`` is left as an exercise for the "
"reader.)"
msgstr "（定义 ``is_moon_full()`` 的任务将作为留给读者的练习。）"

#: ../../library/optparse.rst:1891
msgid "Callback example 5: fixed arguments"
msgstr "回调示例 5：固定的参数"

#: ../../library/optparse.rst:1893
msgid ""
"Things get slightly more interesting when you define callback options that "
"take a fixed number of arguments.  Specifying that a callback option takes "
"arguments is similar to defining a ``\"store\"`` or ``\"append\"`` option: "
"if you define :attr:`~Option.type`, then the option takes one argument that "
"must be convertible to that type; if you further define "
":attr:`~Option.nargs`, then the option takes :attr:`~Option.nargs` "
"arguments."
msgstr ""
"当你定义接受固定数量参数的 callback 选项时情况会变得更有趣一点。 指定一个 callback 选项接受参数的操作类似于定义一个 "
"``\"store\"`` 或 ``\"append\"`` 选项：如果你定义 "
":attr:`~Option.type`，那么该选项将接受一个必须可被转换为相应类型的参数；如果你进一步定义 "
":attr:`~Option.nargs`，那么该选项将接受 :attr:`~Option.nargs` 个参数。"

#: ../../library/optparse.rst:1900
msgid "Here's an example that just emulates the standard ``\"store\"`` action::"
msgstr "下面是一个模拟了标准 ``\"store\"`` 动作的示例::"

#: ../../library/optparse.rst:1902
msgid ""
"def store_value(option, opt_str, value, parser):\n"
"    setattr(parser.values, option.dest, value)\n"
"...\n"
"parser.add_option(\"--foo\",\n"
"                  action=\"callback\", callback=store_value,\n"
"                  type=\"int\", nargs=3, dest=\"foo\")"
msgstr ""
"def store_value(option, opt_str, value, parser):\n"
"    setattr(parser.values, option.dest, value)\n"
"...\n"
"parser.add_option(\"--foo\",\n"
"                  action=\"callback\", callback=store_value,\n"
"                  type=\"int\", nargs=3, dest=\"foo\")"

#: ../../library/optparse.rst:1909
msgid ""
"Note that :mod:`optparse` takes care of consuming 3 arguments and converting"
" them to integers for you; all you have to do is store them.  (Or whatever; "
"obviously you don't need a callback for this example.)"
msgstr ""
"请注意 :mod:`optparse` 将为你读取 3 个参数并将它们转换为整数；你所要做的只是保存它们。 "
"（或任何其他操作；对于这个示例显然你不需要使用回调。）"

#: ../../library/optparse.rst:1917
msgid "Callback example 6: variable arguments"
msgstr "回调示例 6：可变的参数"

#: ../../library/optparse.rst:1919
msgid ""
"Things get hairy when you want an option to take a variable number of "
"arguments. For this case, you must write a callback, as :mod:`optparse` "
"doesn't provide any built-in capabilities for it.  And you have to deal with"
" certain intricacies of conventional Unix command-line parsing that "
":mod:`optparse` normally handles for you.  In particular, callbacks should "
"implement the conventional rules for bare ``--`` and ``-`` arguments:"
msgstr ""
"当你想要一个选项接受可变数数量的参数时情况会变得更麻烦一点。 对于这种场景，你必须编写一个回调，因为 :mod:`optparse` "
"没有为它提供任何内置的相应功能。 而你必须处理 :mod:`optparse` 通常会为你处理的传统 Unix 命令行的某些细节问题。 "
"特别地，回调应当实现单个 ``--`` 和 ``-`` 参数的惯例规则:"

#: ../../library/optparse.rst:1926
msgid "either ``--`` or ``-`` can be option arguments"
msgstr "``--`` 或 ``-`` 都可以作为选项参数"

#: ../../library/optparse.rst:1928
msgid ""
"bare ``--`` (if not the argument to some option): halt command-line "
"processing and discard the ``--``"
msgstr "单个 ``--`` (如果不是某个选项的参数): 停止命令行处理并丢弃该 ``--``"

#: ../../library/optparse.rst:1931
msgid ""
"bare ``-`` (if not the argument to some option): halt command-line "
"processing but keep the ``-`` (append it to ``parser.largs``)"
msgstr "单个 ``-`` (如果不是某个选项的参数): 停止命令行处理但保留 ``-`` (将其添加到 ``parser.largs``)"

#: ../../library/optparse.rst:1934
msgid ""
"If you want an option that takes a variable number of arguments, there are "
"several subtle, tricky issues to worry about.  The exact implementation you "
"choose will be based on which trade-offs you're willing to make for your "
"application (which is why :mod:`optparse` doesn't support this sort of thing"
" directly)."
msgstr ""
"如果你想要一个选项接受可变数量的参数，那么有几个微妙、棘手的问题需要考虑到。 你选择的具体实现将基于你的应用程序对于各方面利弊的权衡（这就是为什么 "
":mod:`optparse` 没有直接支持这一功能）。"

#: ../../library/optparse.rst:1940
msgid ""
"Nevertheless, here's a stab at a callback for an option with variable "
"arguments::"
msgstr "无论如何，下面是一个对于接受可变参数的选项的回调的尝试::"

#: ../../library/optparse.rst:1943
msgid ""
"def vararg_callback(option, opt_str, value, parser):\n"
"    assert value is None\n"
"    value = []\n"
"\n"
"    def floatable(str):\n"
"        try:\n"
"            float(str)\n"
"            return True\n"
"        except ValueError:\n"
"            return False\n"
"\n"
"    for arg in parser.rargs:\n"
"        # stop on --foo like options\n"
"        if arg[:2] == \"--\" and len(arg) > 2:\n"
"            break\n"
"        # stop on -a, but not on -3 or -3.0\n"
"        if arg[:1] == \"-\" and len(arg) > 1 and not floatable(arg):\n"
"            break\n"
"        value.append(arg)\n"
"\n"
"    del parser.rargs[:len(value)]\n"
"    setattr(parser.values, option.dest, value)\n"
"\n"
"...\n"
"parser.add_option(\"-c\", \"--callback\", dest=\"vararg_attr\",\n"
"                  action=\"callback\", callback=vararg_callback)"
msgstr ""
"def vararg_callback(option, opt_str, value, parser):\n"
"    assert value is None\n"
"    value = []\n"
"\n"
"    def floatable(str):\n"
"        try:\n"
"            float(str)\n"
"            return True\n"
"        except ValueError:\n"
"            return False\n"
"\n"
"    for arg in parser.rargs:\n"
"        # stop on --foo like options\n"
"        if arg[:2] == \"--\" and len(arg) > 2:\n"
"            break\n"
"        # stop on -a, but not on -3 or -3.0\n"
"        if arg[:1] == \"-\" and len(arg) > 1 and not floatable(arg):\n"
"            break\n"
"        value.append(arg)\n"
"\n"
"    del parser.rargs[:len(value)]\n"
"    setattr(parser.values, option.dest, value)\n"
"\n"
"...\n"
"parser.add_option(\"-c\", \"--callback\", dest=\"vararg_attr\",\n"
"                  action=\"callback\", callback=vararg_callback)"

#: ../../library/optparse.rst:1974
msgid "Extending :mod:`optparse`"
msgstr "扩展 :mod:`optparse`"

#: ../../library/optparse.rst:1976
msgid ""
"Since the two major controlling factors in how :mod:`optparse` interprets "
"command-line options are the action and type of each option, the most likely"
" direction of extension is to add new actions and new types."
msgstr ""
"由于控制 :mod:`optparse` 如何读取命令行选项的两个主要因子是每个选项的动作和类型，所以扩展最可能的方向就是添加新的动作和新的类型。"

#: ../../library/optparse.rst:1984
msgid "Adding new types"
msgstr "添加新的类型"

#: ../../library/optparse.rst:1986
msgid ""
"To add new types, you need to define your own subclass of :mod:`optparse`'s "
":class:`Option` class.  This class has a couple of attributes that define "
":mod:`optparse`'s types: :attr:`~Option.TYPES` and "
":attr:`~Option.TYPE_CHECKER`."
msgstr ""
"要添加新的类型，你必须自定义 :mod:`optparse` 的 :class:`Option` 类的子类。 这个类包含几个用来定义 "
":mod:`optparse` 的类型的属性: :attr:`~Option.TYPES` 和 "
":attr:`~Option.TYPE_CHECKER`。"

#: ../../library/optparse.rst:1992
msgid ""
"A tuple of type names; in your subclass, simply define a new tuple "
":attr:`TYPES` that builds on the standard one."
msgstr "一个由类型名称组成的元组；在你的子类中，简单地定义一个在标准元组基础上构建的新元组 :attr:`TYPES`。"

#: ../../library/optparse.rst:1997
msgid ""
"A dictionary mapping type names to type-checking functions.  A type-checking"
" function has the following signature::"
msgstr "一个将类型名称映射到类型检查函数的字典。 类型检查函数具有如下签名::"

#: ../../library/optparse.rst:2000
msgid "def check_mytype(option, opt, value)"
msgstr "def check_mytype(option, opt, value)"

#: ../../library/optparse.rst:2002
msgid ""
"where ``option`` is an :class:`Option` instance, ``opt`` is an option string"
" (e.g., ``-f``), and ``value`` is the string from the command line that must"
" be checked and converted to your desired type.  ``check_mytype()`` should "
"return an object of the hypothetical type ``mytype``.  The value returned by"
" a type-checking function will wind up in the OptionValues instance returned"
" by :meth:`OptionParser.parse_args`, or be passed to a callback as the "
"``value`` parameter."
msgstr ""
"其中 ``option`` 是一个 :class:`Option` 实例，``opt`` 是一个选项字符串 (例如 ``-f``)，而 "
"``value`` 是来自命令行的必须被检查并转换为你想要的类型的字符串。 ``check_mytype()`` 应当返回假设的类型 "
"``mytype`` 的对象。 类型检查函数所返回的值将最终出现在 :meth:`OptionParser.parse_args` 所返回的 "
"OptionValues 实例中，或是作为 ``value`` 形参传给一个回调。"

#: ../../library/optparse.rst:2010
msgid ""
"Your type-checking function should raise :exc:`OptionValueError` if it "
"encounters any problems.  :exc:`OptionValueError` takes a single string "
"argument, which is passed as-is to :class:`OptionParser`'s :meth:`error` "
"method, which in turn prepends the program name and the string "
"``\"error:\"`` and prints everything to stderr before terminating the "
"process."
msgstr ""
"如果你的类型检查函数遇到任何问题则应当引发 :exc:`OptionValueError`。 :exc:`OptionValueError` "
"接受一个字符串参数，该参数将被原样传递给 :class:`OptionParser` 的 :meth:`error` "
"方法，该方法将随后附加程序名称和字符串 ``\"error:\"`` 并在终结进程之前将所有信息打印到 stderr。"

#: ../../library/optparse.rst:2016
msgid ""
"Here's a silly example that demonstrates adding a ``\"complex\"`` option "
"type to parse Python-style complex numbers on the command line.  (This is "
"even sillier than it used to be, because :mod:`optparse` 1.3 added built-in "
"support for complex numbers, but never mind.)"
msgstr ""
"下面这个很傻的例子演示了如何添加一个 ``\"complex\"`` 选项类型以便在命令行中解析 Python 风格的复数。 "
"（现在这个例子比以前更傻了，因为 :mod:`optparse` 1.3 增加了对复数的内置支持，但是不必管它了。）"

#: ../../library/optparse.rst:2021
msgid "First, the necessary imports::"
msgstr "首先，必要的导入操作::"

#: ../../library/optparse.rst:2023
msgid ""
"from copy import copy\n"
"from optparse import Option, OptionValueError"
msgstr ""
"from copy import copy\n"
"from optparse import Option, OptionValueError"

#: ../../library/optparse.rst:2026
msgid ""
"You need to define your type-checker first, since it's referred to later (in"
" the :attr:`~Option.TYPE_CHECKER` class attribute of your Option subclass)::"
msgstr ""
"你必须先定义自己的类型检查器，因为以后它会被引用（在你的 Option 子类的 :attr:`~Option.TYPE_CHECKER` 类属性中）::"

#: ../../library/optparse.rst:2029
msgid ""
"def check_complex(option, opt, value):\n"
"    try:\n"
"        return complex(value)\n"
"    except ValueError:\n"
"        raise OptionValueError(\n"
"            \"option %s: invalid complex value: %r\" % (opt, value))"
msgstr ""
"def check_complex(option, opt, value):\n"
"    try:\n"
"        return complex(value)\n"
"    except ValueError:\n"
"        raise OptionValueError(\n"
"            \"option %s: invalid complex value: %r\" % (opt, value))"

#: ../../library/optparse.rst:2036
msgid "Finally, the Option subclass::"
msgstr "最后，是 Option 子类::"

#: ../../library/optparse.rst:2038
msgid ""
"class MyOption (Option):\n"
"    TYPES = Option.TYPES + (\"complex\",)\n"
"    TYPE_CHECKER = copy(Option.TYPE_CHECKER)\n"
"    TYPE_CHECKER[\"complex\"] = check_complex"
msgstr ""
"class MyOption (Option):\n"
"    TYPES = Option.TYPES + (\"complex\",)\n"
"    TYPE_CHECKER = copy(Option.TYPE_CHECKER)\n"
"    TYPE_CHECKER[\"complex\"] = check_complex"

#: ../../library/optparse.rst:2043
msgid ""
"(If we didn't make a :func:`copy` of :attr:`Option.TYPE_CHECKER`, we would "
"end up modifying the :attr:`~Option.TYPE_CHECKER` attribute of "
":mod:`optparse`'s Option class.  This being Python, nothing stops you from "
"doing that except good manners and common sense.)"
msgstr ""
"（如果我们不对 :attr:`Option.TYPE_CHECKER` 执行 :func:`copy`，我们就将修改 :mod:`optparse` 的"
" Option 类的 :attr:`~Option.TYPE_CHECKER` 属性。 Python "
"就是这样，除了礼貌和常识以外没有任何东西能阻止你这样做。）"

#: ../../library/optparse.rst:2048
msgid ""
"That's it!  Now you can write a script that uses the new option type just "
"like any other :mod:`optparse`\\ -based script, except you have to instruct "
"your OptionParser to use MyOption instead of Option::"
msgstr ""
"就是这样！ 现在你可以编写一个脚本以与其他基于 :mod:`optparse` 的脚本相同的方式使用新的选项类型，除了你必须指示你的 "
"OptionParser 使用 MyOption 而不是 Option::"

#: ../../library/optparse.rst:2052
msgid ""
"parser = OptionParser(option_class=MyOption)\n"
"parser.add_option(\"-c\", type=\"complex\")"
msgstr ""
"parser = OptionParser(option_class=MyOption)\n"
"parser.add_option(\"-c\", type=\"complex\")"

#: ../../library/optparse.rst:2055
msgid ""
"Alternately, you can build your own option list and pass it to OptionParser;"
" if you don't use :meth:`add_option` in the above way, you don't need to "
"tell OptionParser which option class to use::"
msgstr ""
"作为替代选择，你可以构建你自己的选项列表并将它传给 OptionParser；如果你不是以上述方式使用 "
":meth:`add_option`，则你不需要告诉 OptionParser 使用哪个选项类::"

#: ../../library/optparse.rst:2059
msgid ""
"option_list = [MyOption(\"-c\", action=\"store\", type=\"complex\", dest=\"c\")]\n"
"parser = OptionParser(option_list=option_list)"
msgstr ""
"option_list = [MyOption(\"-c\", action=\"store\", type=\"complex\", dest=\"c\")]\n"
"parser = OptionParser(option_list=option_list)"

#: ../../library/optparse.rst:2066
msgid "Adding new actions"
msgstr "添加新的动作"

#: ../../library/optparse.rst:2068
msgid ""
"Adding new actions is a bit trickier, because you have to understand that "
":mod:`optparse` has a couple of classifications for actions:"
msgstr "添加新的动作有一点复杂，因为你必须理解 :mod:`optparse` 对于动作有几种分类:"

#: ../../library/optparse.rst:2071
msgid "\"store\" actions"
msgstr "\"store\" 类动作"

#: ../../library/optparse.rst:2072
msgid ""
"actions that result in :mod:`optparse` storing a value to an attribute of "
"the current OptionValues instance; these options require a "
":attr:`~Option.dest` attribute to be supplied to the Option constructor."
msgstr ""
"会使得 :mod:`optparse` 将某个值保存到当前 OptionValues 实例的特定属性中的动作；这些选项要求向 Option "
"构造器提供一个 :attr:`~Option.dest` 属性。attribute to be supplied to the constructor."

#: ../../library/optparse.rst:2076
msgid "\"typed\" actions"
msgstr "\"typed\" 类动作"

#: ../../library/optparse.rst:2077
msgid ""
"actions that take a value from the command line and expect it to be of a "
"certain type; or rather, a string that can be converted to a certain type. "
"These options require a :attr:`~Option.type` attribute to the Option "
"constructor."
msgstr ""
"从命令行接受某个值并预期它是一个特定类型；或者更准确地说，是可被转换为一个特定类型的字符串的动作。 这些选项要求向 Option 构造器提供一个 "
":attr:`~Option.type` 属性。attribute to the constructor."

#: ../../library/optparse.rst:2082
msgid ""
"These are overlapping sets: some default \"store\" actions are "
"``\"store\"``, ``\"store_const\"``, ``\"append\"``, and ``\"count\"``, while"
" the default \"typed\" actions are ``\"store\"``, ``\"append\"``, and "
"``\"callback\"``."
msgstr ""
"这些是相互重叠的集合：默认的 \"store\" 类动作有 ``\"store\"``, ``\"store_const\"``, "
"``\"append\"`` 和 ``\"count\"``，而默认的 \"typed\" 类动作有 ``\"store\"``, "
"``\"append\"`` 和 ``\"callback\"``。"

#: ../../library/optparse.rst:2086
msgid ""
"When you add an action, you need to categorize it by listing it in at least "
"one of the following class attributes of Option (all are lists of strings):"
msgstr "当你添加一个动作时，你需要将它列在 Option 的以下类属性的至少一个当中以对它进行分类（全部为字符串列表）:"

#: ../../library/optparse.rst:2091
msgid "All actions must be listed in ACTIONS."
msgstr "所有动作必须在 ACTIONS 中列出。"

#: ../../library/optparse.rst:2095
msgid "\"store\" actions are additionally listed here."
msgstr "\"store\" 类动作要额外地在此列出。"

#: ../../library/optparse.rst:2099
msgid "\"typed\" actions are additionally listed here."
msgstr "\"typed\" 类动作要额外地在此列出。"

#: ../../library/optparse.rst:2103
msgid ""
"Actions that always take a type (i.e. whose options always take a value) are"
" additionally listed here.  The only effect of this is that :mod:`optparse` "
"assigns the default type, ``\"string\"``, to options with no explicit type "
"whose action is listed in :attr:`ALWAYS_TYPED_ACTIONS`."
msgstr ""
"总是会接受一个类型的动作（即其选项总是会接受一个值）要额外地在此列出。 它带来的唯一影响是 :mod:`optparse` 会将默认类型 "
"``\"string\"`` 赋值给动作在 :attr:`ALWAYS_TYPED_ACTIONS` 中列出而未显式指定类型的选项。"

#: ../../library/optparse.rst:2108
msgid ""
"In order to actually implement your new action, you must override Option's "
":meth:`take_action` method and add a case that recognizes your action."
msgstr "为了真正实现你的新动作，你必须重写 Option 的 :meth:`take_action` 方法并添加一个识别你的动作的分支。"

#: ../../library/optparse.rst:2111
msgid ""
"For example, let's add an ``\"extend\"`` action.  This is similar to the "
"standard ``\"append\"`` action, but instead of taking a single value from "
"the command-line and appending it to an existing list, ``\"extend\"`` will "
"take multiple values in a single comma-delimited string, and extend an "
"existing list with them.  That is, if ``--names`` is an ``\"extend\"`` "
"option of type ``\"string\"``, the command line ::"
msgstr ""
"例如，让我们添加一个 ``\"extend\"`` 动作。 它类似于标准的 ``\"append\"`` 动作，但 ``\"extend\"`` "
"不是从命令行接受单个值并将其添加到现有列表，而是接受形式为以单个逗号分隔的多个值的字符串，并用这些值来扩展现有列表。 也就是说，如果 "
"``--names`` 是一个类型为 ``\"string\"`` 的 ``\"extend\"`` 选项，则命令行 ::"

#: ../../library/optparse.rst:2118
msgid "--names=foo,bar --names blah --names ding,dong"
msgstr "--names=foo,bar --names blah --names ding,dong"

#: ../../library/optparse.rst:2120
msgid "would result in a list  ::"
msgstr "将得到一个列表 ::"

#: ../../library/optparse.rst:2122
msgid "[\"foo\", \"bar\", \"blah\", \"ding\", \"dong\"]"
msgstr "[\"foo\", \"bar\", \"blah\", \"ding\", \"dong\"]"

#: ../../library/optparse.rst:2124
msgid "Again we define a subclass of Option::"
msgstr "我们再定义一个 Option 的子类::"

#: ../../library/optparse.rst:2126
msgid ""
"class MyOption(Option):\n"
"\n"
"    ACTIONS = Option.ACTIONS + (\"extend\",)\n"
"    STORE_ACTIONS = Option.STORE_ACTIONS + (\"extend\",)\n"
"    TYPED_ACTIONS = Option.TYPED_ACTIONS + (\"extend\",)\n"
"    ALWAYS_TYPED_ACTIONS = Option.ALWAYS_TYPED_ACTIONS + (\"extend\",)\n"
"\n"
"    def take_action(self, action, dest, opt, value, values, parser):\n"
"        if action == \"extend\":\n"
"            lvalue = value.split(\",\")\n"
"            values.ensure_value(dest, []).extend(lvalue)\n"
"        else:\n"
"            Option.take_action(\n"
"                self, action, dest, opt, value, values, parser)"
msgstr ""
"class MyOption(Option):\n"
"\n"
"    ACTIONS = Option.ACTIONS + (\"extend\",)\n"
"    STORE_ACTIONS = Option.STORE_ACTIONS + (\"extend\",)\n"
"    TYPED_ACTIONS = Option.TYPED_ACTIONS + (\"extend\",)\n"
"    ALWAYS_TYPED_ACTIONS = Option.ALWAYS_TYPED_ACTIONS + (\"extend\",)\n"
"\n"
"    def take_action(self, action, dest, opt, value, values, parser):\n"
"        if action == \"extend\":\n"
"            lvalue = value.split(\",\")\n"
"            values.ensure_value(dest, []).extend(lvalue)\n"
"        else:\n"
"            Option.take_action(\n"
"                self, action, dest, opt, value, values, parser)"

#: ../../library/optparse.rst:2141
msgid "Features of note:"
msgstr "应注意的特性:"

#: ../../library/optparse.rst:2143
msgid ""
"``\"extend\"`` both expects a value on the command-line and stores that "
"value somewhere, so it goes in both :attr:`~Option.STORE_ACTIONS` and "
":attr:`~Option.TYPED_ACTIONS`."
msgstr ""
"``\"extend\"`` 既预期在命令行接受一个值又会将该值保存到某处，因此它同时被归类于 "
":attr:`~Option.STORE_ACTIONS` 和 :attr:`~Option.TYPED_ACTIONS`。"

#: ../../library/optparse.rst:2147
msgid ""
"to ensure that :mod:`optparse` assigns the default type of ``\"string\"`` to"
" ``\"extend\"`` actions, we put the ``\"extend\"`` action in "
":attr:`~Option.ALWAYS_TYPED_ACTIONS` as well."
msgstr ""
"为确保 :mod:`optparse` 将 ``\"string\"`` 的默认类型赋值给 ``\"extend\"`` 动作，我们同时将 "
"``\"extend\"`` 动作归类于 :attr:`~Option.ALWAYS_TYPED_ACTIONS`。"

#: ../../library/optparse.rst:2151
msgid ""
":meth:`MyOption.take_action` implements just this one new action, and passes"
" control back to :meth:`Option.take_action` for the standard :mod:`optparse`"
" actions."
msgstr ""
":meth:`MyOption.take_action` 只实现了这一个新动作，并将控制权回传给 :meth:`Option.take_action` "
"以执行标准的 :mod:`optparse` 动作。"

#: ../../library/optparse.rst:2155
msgid ""
"``values`` is an instance of the optparse_parser.Values class, which "
"provides the very useful :meth:`ensure_value` method. :meth:`ensure_value` "
"is essentially :func:`getattr` with a safety valve; it is called as ::"
msgstr ""
"``values`` 是 optparse_parser.Values 类的一个实例，该类提供了非常有用的 :meth:`ensure_value` "
"方法。 :meth:`ensure_value` 实际就是一个带有安全阀的 :func:`getattr`；它的调用形式为 ::"

#: ../../library/optparse.rst:2159
msgid "values.ensure_value(attr, value)"
msgstr "values.ensure_value(attr, value)"

#: ../../library/optparse.rst:2161
msgid ""
"If the ``attr`` attribute of ``values`` doesn't exist or is ``None``, then "
"ensure_value() first sets it to ``value``, and then returns ``value``. This "
"is very handy for actions like ``\"extend\"``, ``\"append\"``, and "
"``\"count\"``, all of which accumulate data in a variable and expect that "
"variable to be of a certain type (a list for the first two, an integer for "
"the latter).  Using :meth:`ensure_value` means that scripts using your "
"action don't have to worry about setting a default value for the option "
"destinations in question; they can just leave the default as ``None`` and "
":meth:`ensure_value` will take care of getting it right when it's needed."
msgstr ""
"如果 ``values`` 的 ``attr`` 属性不存在或为 ``None``，则 ensure_value() 会先将其设为 "
"``value``，然后返回 ``value``。 这非常适用于 ``\"extend\"``, ``\"append\"`` 和 "
"``\"count\"`` 等动作，它们会将数据累积在一个变量中并预期该变量属于特定的类型（前两项是一个列表，后一项是一个整数）。 使用 "
":meth:`ensure_value` 意味着使用你的动作的脚本无需关心为相应的选项目标设置默认值；可以简单地保持默认的 ``None`` 而 "
":meth:`ensure_value` 将在必要时负责为其设置适当的值。"

#: ../../library/optparse.rst:2172
msgid "Exceptions"
msgstr "异常"

#: ../../library/optparse.rst:2176
msgid ""
"Raised if an :class:`Option` instance is created with invalid or "
"inconsistent arguments."
msgstr "当使用无效或不一致的参数创建 :class:`Option` 实例时将被引发。"

#: ../../library/optparse.rst:2181
msgid "Raised if conflicting options are added to an :class:`OptionParser`."
msgstr "当向 :class:`OptionParser` 添加相互冲突的选项时将被引发。"

#: ../../library/optparse.rst:2185
msgid "Raised if an invalid option value is encountered on the command line."
msgstr "当在命令行中遇到无效的选项值时将被引发。"

#: ../../library/optparse.rst:2189
msgid "Raised if an invalid option is passed on the command line."
msgstr "当在命令行中传入无效的选项时将被引发。"

#: ../../library/optparse.rst:2193
msgid "Raised if an ambiguous option is passed on the command line."
msgstr "当在命令行中传入有歧义的选项时将被引发。"
