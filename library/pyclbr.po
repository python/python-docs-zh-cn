# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Freesand Leo <yuqinju@163.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-02 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:11+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pyclbr.rst:2
msgid ":mod:`!pyclbr` --- Python module browser support"
msgstr ":mod:`!pyclbr` --- Python 模块浏览器支持"

#: ../../library/pyclbr.rst:9
msgid "**Source code:** :source:`Lib/pyclbr.py`"
msgstr "**源代码:** :source:`Lib/pyclbr.py`"

#: ../../library/pyclbr.rst:13
msgid ""
"The :mod:`pyclbr` module provides limited information about the functions, "
"classes, and methods defined in a Python-coded module.  The information is "
"sufficient to implement a module browser.  The information is extracted from"
" the Python source code rather than by importing the module, so this module "
"is safe to use with untrusted code. This restriction makes it impossible to "
"use this module with modules not implemented in Python, including all "
"standard and optional extension modules."
msgstr ""
":mod:`pyclbr` 模块提供了对于以 Python 编写的模块中定义的函数、类和方法的受限信息。 这种信息足够用来实现一个模块浏览器。 "
"这种信息是从 Python 源代码中直接提取而非通过导入模块，因此该模块可以安全地用于不受信任的代码。 此限制使得非 Python "
"实现的模块无法使用此模块，包括所有标准和可选的扩展模块。"

#: ../../library/pyclbr.rst:25
msgid ""
"Return a dictionary mapping module-level class names to class descriptors.  "
"If possible, descriptors for imported base classes are included.  Parameter "
"*module* is a string with the name of the module to read; it may be the name"
" of a module within a package.  If given, *path* is a sequence of directory "
"paths prepended to ``sys.path``, which is used to locate the module source "
"code."
msgstr ""
"返回一个将模块层级的类名映射到类描述器的字典。 如果可能，将会包括已导入基类的描述器。 形参 *module* "
"为要读取模块名称的字符串；它可能是某个包内部的模块名称。 *path* 如果给出则为添加到 ``sys.path`` "
"开头的目录路径序列，它会被用于定位模块的源代码。"

#: ../../library/pyclbr.rst:32
msgid ""
"This function is the original interface and is only kept for back "
"compatibility.  It returns a filtered version of the following."
msgstr "此函数为原始接口，仅保留用于向下兼容。 它会返回以下内容的过滤版本。"

#: ../../library/pyclbr.rst:38
msgid ""
"Return a dictionary-based tree containing a function or class descriptors "
"for each function and class defined in the module with a ``def`` or "
"``class`` statement.  The returned dictionary maps module-level function and"
" class names to their descriptors.  Nested objects are entered into the "
"children dictionary of their parent.  As with readmodule, *module* names the"
" module to be read and *path* is prepended to sys.path.  If the module being"
" read is a package, the returned dictionary has a key ``'__path__'`` whose "
"value is a list containing the package search path."
msgstr ""
"返回一个基于字典的树，其中包含与模块中每个用 ``def`` 或 ``class`` 语句定义的函数和类相对应的函数和类描述器。 "
"被返回的字典会将模块层级的函数和类名映射到它们的描述器。 嵌套的对象会被输入到它们的上级子目录中。 与 readmodule 一样，*module* "
"指明要读取的模块而 *path* 会被添加到 sys.path。 如果被读取的模块是一个包，则返回的字典将具有 ``'__path__'`` "
"键，其值是一个包含包搜索路径的列表。"

#: ../../library/pyclbr.rst:48
msgid ""
"Descriptors for nested definitions.  They are accessed through the new "
"children attribute.  Each has a new parent attribute."
msgstr "嵌套定义的描述器。 它们通过新的子属性来访问。 每个定义都会有一个新的上级属性。"

#: ../../library/pyclbr.rst:52
msgid ""
"The descriptors returned by these functions are instances of Function and "
"Class classes.  Users are not expected to create instances of these classes."
msgstr "这些函数所返回的描述器是 Function 和 Class 类的实例。 用户不应自行创建这些类的实例。"

#: ../../library/pyclbr.rst:60
msgid "Function Objects"
msgstr "Function 对象"

#: ../../library/pyclbr.rst:64
msgid ""
"Class :class:`!Function` instances describe functions defined by def "
"statements.  They have the following attributes:"
msgstr ":class:`!Function` 类的实例描述了由 def 语句所定义的函数。 它们具有下列属性："

#: ../../library/pyclbr.rst:70
msgid "Name of the file in which the function is defined."
msgstr "函数定义所在的文件名称。"

#: ../../library/pyclbr.rst:75
msgid "The name of the module defining the function described."
msgstr "定义了所描述函数的模块名称。"

#: ../../library/pyclbr.rst:80
msgid "The name of the function."
msgstr "函数名称。"

#: ../../library/pyclbr.rst:85 ../../library/pyclbr.rst:140
msgid "The line number in the file where the definition starts."
msgstr "定义在文件中起始位置的行号。"

#: ../../library/pyclbr.rst:90
msgid "For top-level functions, ``None``.  For nested functions, the parent."
msgstr "对于最高层级函数为 ``None``。 对于嵌套函数则为上级函数。"

#: ../../library/pyclbr.rst:97
msgid ""
"A :class:`dictionary <dict>` mapping names to descriptors for nested "
"functions and classes."
msgstr "一个将名称映射到针对嵌套函数和类的描述器的 :class:`字典 <dict>`。"

#: ../../library/pyclbr.rst:105
msgid ""
"``True`` for functions that are defined with the :keyword:`async <async "
"def>` prefix, ``False`` otherwise."
msgstr "``True`` 针对使用 :keyword:`async <async def>` 前缀定义的函数，其他情况下为 ``False``。"

#: ../../library/pyclbr.rst:114
msgid "Class Objects"
msgstr "Class 对象"

#: ../../library/pyclbr.rst:118
msgid ""
"Class :class:`!Class` instances describe classes defined by class "
"statements.  They have the same attributes as :class:`Functions <Function>` "
"and two more."
msgstr ""
":class:`!Class` 类的实例描述了由 class 语句所定义的类。 它们具有与 :class:`Function <Function>` "
"相同的属性以及两个额外属性。"

#: ../../library/pyclbr.rst:125
msgid "Name of the file in which the class is defined."
msgstr "类定义所在的文件名称。"

#: ../../library/pyclbr.rst:130
msgid "The name of the module defining the class described."
msgstr "定义了所描述类的模块名称。"

#: ../../library/pyclbr.rst:135
msgid "The name of the class."
msgstr "类名称。"

#: ../../library/pyclbr.rst:145
msgid "For top-level classes, ``None``.  For nested classes, the parent."
msgstr "对于最高层级类为 ``None``。 对于嵌套的类则为上级类。"

#: ../../library/pyclbr.rst:152
msgid ""
"A dictionary mapping names to descriptors for nested functions and classes."
msgstr "将名称映射到嵌套函数和类描述器的字典。"

#: ../../library/pyclbr.rst:160
msgid ""
"A list of :class:`!Class` objects which describe the immediate base classes "
"of the class being described.  Classes which are named as superclasses but "
"which are not discoverable by :func:`readmodule_ex` are listed as a string "
"with the class name instead of as :class:`!Class` objects."
msgstr ""
"一个由 :class:`!Class` 对象组成的列表，这些对象描述了相应类的直接基类。 被指定为超类但无法被 "
":func:`readmodule_ex` 发现的类会作为类名字符串而非 :class:`!Class` 对象列出。"

#: ../../library/pyclbr.rst:169
msgid ""
"A :class:`dictionary <dict>` mapping method names to line numbers. This can "
"be derived from the newer :attr:`children` dictionary, but remains for back-"
"compatibility."
msgstr ""
"一个将方法名映射到行号的 :class:`字典 <dict>`。 此属性可从更新的 :attr:`children` 字典中获取，但被保留用于向下兼容。"
