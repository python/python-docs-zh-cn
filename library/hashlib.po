# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/hashlib.rst:2
msgid ":mod:`!hashlib` --- Secure hashes and message digests"
msgstr ":mod:`!hashlib` --- 安全哈希与消息摘要"

#: ../../library/hashlib.rst:10
msgid "**Source code:** :source:`Lib/hashlib.py`"
msgstr "**源码：** :source:`Lib/hashlib.py`"

#: ../../library/hashlib.rst:23
msgid ""
"This module implements a common interface to many different hash algorithms."
" Included are the FIPS secure hash algorithms SHA224, SHA256, SHA384, "
"SHA512, (defined in `the FIPS 180-4 standard`_), the SHA-3 series (defined "
"in `the FIPS 202 standard`_) as well as the legacy algorithms SHA1 "
"(`formerly part of FIPS`_) and the MD5 algorithm (defined in internet "
":rfc:`1321`)."
msgstr ""
"本模块实现了一个针对不同哈希算法的通用接口。 包括了 FIPS 安全哈希算法 SHA224, SHA256, SHA384, SHA512, (定义见 "
"`the FIPS 180-4 standard`_), SHA-3 系列 (定义见 `the FIPS 202 standard`_) 以及旧式算法 "
"SHA1 (`formerly part of FIPS`_) 和 MD5 算法 (定义见 internet :rfc:`1321`)。"

#: ../../library/hashlib.rst:31
msgid ""
"If you want the adler32 or crc32 hash functions, they are available in the "
":mod:`zlib` module."
msgstr "如果你想找到 adler32 或 crc32 哈希函数，它们在 :mod:`zlib` 模块中。"

#: ../../library/hashlib.rst:38
msgid "Hash algorithms"
msgstr "哈希算法"

#: ../../library/hashlib.rst:40
msgid ""
"There is one constructor method named for each type of :dfn:`hash`.  All "
"return a hash object with the same simple interface. For example: use "
":func:`sha256` to create a SHA-256 hash object. You can now feed this object"
" with :term:`bytes-like objects <bytes-like object>` (normally "
":class:`bytes`) using the :meth:`update<hash.update>` method.  At any point "
"you can ask it for the :dfn:`digest` of the concatenation of the data fed to"
" it so far using the :meth:`digest()<hash.digest>` or "
":meth:`hexdigest()<hash.hexdigest>` methods."
msgstr ""
"每种类型的 :dfn:`hash` 都有一个构造器方法。 它们都返回一个具有相同简单接口的哈希对象。 例如，使用 :func:`sha256` 创建一个"
" SHA-256 哈希对象。 你可以使用 :meth:`update<hash.update>` 方法向这个对象输入 :term:`字节类对象 "
"<bytes-like object>` (通常是 :class:`bytes`)。 在任何时候你都可以使用 "
":meth:`digest()<hash.digest>` 或 :meth:`hexdigest()<hash.hexdigest>` "
"方法获得到目前为止输入这个对象的拼接数据的 :dfn:`digest`。"

#: ../../library/hashlib.rst:48
msgid ""
"To allow multithreading, the Python :term:`GIL` is released while computing "
"a hash supplied more than 2047 bytes of data at once in its constructor or "
":meth:`.update<hash.update>` method."
msgstr ""
"为了允许多线程，当在其构造器或 :meth:`.update<hash.update>` 方法中计算一次性提供超过 2047 字节数据的哈希时将会释放 "
"Python :term:`GIL`。"

#: ../../library/hashlib.rst:55
msgid ""
"Constructors for hash algorithms that are always present in this module are "
":func:`sha1`, :func:`sha224`, :func:`sha256`, :func:`sha384`, "
":func:`sha512`, :func:`sha3_224`, :func:`sha3_256`, :func:`sha3_384`, "
":func:`sha3_512`, :func:`shake_128`, :func:`shake_256`, :func:`blake2b`, and"
" :func:`blake2s`. :func:`md5` is normally available as well, though it may "
"be missing or blocked if you are using a rare \"FIPS compliant\" build of "
"Python. These correspond to :data:`algorithms_guaranteed`."
msgstr ""
"本模块中总是存在的哈希算法构造器有 :func:`sha1`, :func:`sha224`, :func:`sha256`, "
":func:`sha384`, :func:`sha512`, :func:`sha3_224`, :func:`sha3_256`, "
":func:`sha3_384`, :func:`sha3_512`, :func:`shake_128`, :func:`shake_256`, "
":func:`blake2b` 和 :func:`blake2s`。 :func:`md5` 通常也是可用的，但在你使用稀有的 \"FIPS 兼容\" "
"Python 编译版时它可能会缺失或被屏蔽。 这些构造器对应于 :data:`algorithms_guaranteed`。"

#: ../../library/hashlib.rst:63
msgid ""
"Additional algorithms may also be available if your Python distribution's "
":mod:`hashlib` was linked against a build of OpenSSL that provides others. "
"Others *are not guaranteed available* on all installations and will only be "
"accessible by name via :func:`new`.  See :data:`algorithms_available`."
msgstr ""
"如果你的 Python 分发版的 :mod:`hashlib` 是基于提供了其他算法的 OpenSSL 编译版上链接的那么还可能存在一些附加的算法。 "
"其他算法在所有安装版上 *不保证全都可用* 并且仅可通过 :func:`new` 使用名称来访问。 参见 "
":data:`algorithms_available`。"

#: ../../library/hashlib.rst:70
msgid ""
"Some algorithms have known hash collision weaknesses (including MD5 and "
"SHA1). Refer to `Attacks on cryptographic hash algorithms`_ and the "
"`hashlib-seealso`_ section at the end of this document."
msgstr ""
"一些算法具有已知的碰撞弱点（包括 MD5 和 SHA1）。 请参阅本文档末尾的 `Attacks on cryptographic hash "
"algorithms`_ 和 `hashlib-seealso`_ 小节。"

#: ../../library/hashlib.rst:74
msgid ""
"SHA3 (Keccak) and SHAKE constructors :func:`sha3_224`, :func:`sha3_256`, "
":func:`sha3_384`, :func:`sha3_512`, :func:`shake_128`, :func:`shake_256` "
"were added. :func:`blake2b` and :func:`blake2s` were added."
msgstr ""
"增加了 SHA3 (Keccak) 和 SHAKE 构造器 :func:`sha3_224`, :func:`sha3_256`, "
":func:`sha3_384`, :func:`sha3_512`, :func:`shake_128`, :func:`shake_256`。 "
"并增加了 :func:`blake2b` 和 :func:`blake2s`。"

#: ../../library/hashlib.rst:82
msgid ""
"All hashlib constructors take a keyword-only argument *usedforsecurity* with"
" default value ``True``. A false value allows the use of insecure and "
"blocked hashing algorithms in restricted environments. ``False`` indicates "
"that the hashing algorithm is not used in a security context, e.g. as a non-"
"cryptographic one-way compression function."
msgstr ""
"所有 hashlib 的构造器都接受仅限关键字参数 *usedforsecurity* 且其默认值为 ``True``。 "
"设为假值即允许在受限的环境中使用不安全且阻塞的哈希算法。 ``False`` 表示此哈希算法不可用于安全场景，例如用作非加密的单向压缩函数。"

#: ../../library/hashlib.rst:89
msgid "Hashlib now uses SHA3 and SHAKE from OpenSSL if it provides it."
msgstr "现在 hashlib 会在 OpenSSL 有提供的情况下使用 SHA3 和 SHAKE。"

#: ../../library/hashlib.rst:92
msgid ""
"For any of the MD5, SHA1, SHA2, or SHA3 algorithms that the linked OpenSSL "
"does not provide we fall back to a verified implementation from the `HACL\\*"
" project`_."
msgstr ""
"在所链接的 OpenSSL 未提供 MD5, SHA1, SHA2 或 SHA3 算法的情况下我们将回退至来自 `HACL\\* project`_ "
"的已验证的实现。"

#: ../../library/hashlib.rst:98
msgid "Usage"
msgstr "用法"

#: ../../library/hashlib.rst:100
msgid ""
"To obtain the digest of the byte string ``b\"Nobody inspects the spammish "
"repetition\"``::"
msgstr "要获取字节串 ``b\"Nobody inspects the spammish repetition\"`` 的摘要::"

#: ../../library/hashlib.rst:103
msgid ""
">>> import hashlib\n"
">>> m = hashlib.sha256()\n"
">>> m.update(b\"Nobody inspects\")\n"
">>> m.update(b\" the spammish repetition\")\n"
">>> m.digest()\n"
"b'\\x03\\x1e\\xdd}Ae\\x15\\x93\\xc5\\xfe\\\\\\x00o\\xa5u+7\\xfd\\xdf\\xf7\\xbcN\\x84:\\xa6\\xaf\\x0c\\x95\\x0fK\\x94\\x06'\n"
">>> m.hexdigest()\n"
"'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'"
msgstr ""
">>> import hashlib\n"
">>> m = hashlib.sha256()\n"
">>> m.update(b\"Nobody inspects\")\n"
">>> m.update(b\" the spammish repetition\")\n"
">>> m.digest()\n"
"b'\\x03\\x1e\\xdd}Ae\\x15\\x93\\xc5\\xfe\\\\\\x00o\\xa5u+7\\xfd\\xdf\\xf7\\xbcN\\x84:\\xa6\\xaf\\x0c\\x95\\x0fK\\x94\\x06'\n"
">>> m.hexdigest()\n"
"'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'"

#: ../../library/hashlib.rst:112
msgid "More condensed:"
msgstr "更简要的写法："

#: ../../library/hashlib.rst:118
msgid "Constructors"
msgstr "构造器"

#: ../../library/hashlib.rst:122
msgid ""
"Is a generic constructor that takes the string *name* of the desired "
"algorithm as its first parameter.  It also exists to allow access to the "
"above listed hashes as well as any other algorithms that your OpenSSL "
"library may offer."
msgstr ""
"接受想要的算法对应的字符串 *name* 作为其第一个形参的泛型构造器。 它还允许访问上面列出的哈希算法以及你的 OpenSSL "
"库可能提供的任何其他算法。"

#: ../../library/hashlib.rst:127
msgid "Using :func:`new` with an algorithm name:"
msgstr "使用 :func:`new` 并附带一个算法名称:"

#: ../../library/hashlib.rst:146
msgid ""
"Named constructors such as these are faster than passing an algorithm name "
"to :func:`new`."
msgstr "这些带命名的构造器速度相比向 :func:`new` 传入算法名称更快。"

#: ../../library/hashlib.rst:150
msgid "Attributes"
msgstr "属性"

#: ../../library/hashlib.rst:152
msgid "Hashlib provides the following constant module attributes:"
msgstr "在 hashlib 中提供了下列常量模块属性:"

#: ../../library/hashlib.rst:156
msgid ""
"A set containing the names of the hash algorithms guaranteed to be supported"
" by this module on all platforms.  Note that 'md5' is in this list despite "
"some upstream vendors offering an odd \"FIPS compliant\" Python build that "
"excludes it."
msgstr ""
"一个集合，其中包含此模块在所有平台上都保证支持的哈希算法的名称。 请注意 'md5' 也在此清单中，虽然某些上游厂商提供了一个怪异的排除了此算法的 "
"\"FIPS 兼容\" Python 编译版本。"

#: ../../library/hashlib.rst:165
msgid ""
"A set containing the names of the hash algorithms that are available in the "
"running Python interpreter.  These names will be recognized when passed to "
":func:`new`.  :attr:`algorithms_guaranteed` will always be a subset.  The "
"same algorithm may appear multiple times in this set under different names "
"(thanks to OpenSSL)."
msgstr ""
"一个集合，其中包含在所运行的 Python 解释器上可用的哈希算法的名称。 将这些名称传给 :func:`new` 时将可被识别。 "
":attr:`algorithms_guaranteed` 将总是它的一个子集。 同样的算法在此集合中可能以不同的名称出现多次（这是 OpenSSL "
"的原因）。"

#: ../../library/hashlib.rst:174
msgid "Hash Objects"
msgstr "哈希对象"

#: ../../library/hashlib.rst:176
msgid ""
"The following values are provided as constant attributes of the hash objects"
" returned by the constructors:"
msgstr "下列值会以构造器所返回的哈希对象的常量属性的形式被提供:"

#: ../../library/hashlib.rst:181
msgid "The size of the resulting hash in bytes."
msgstr "以字节表示的结果哈希对象的大小。"

#: ../../library/hashlib.rst:185
msgid "The internal block size of the hash algorithm in bytes."
msgstr "以字节表示的哈希算法的内部块大小。"

#: ../../library/hashlib.rst:187
msgid "A hash object has the following attributes:"
msgstr "hash 对象具有以下属性："

#: ../../library/hashlib.rst:191
msgid ""
"The canonical name of this hash, always lowercase and always suitable as a "
"parameter to :func:`new` to create another hash of this type."
msgstr "此哈希对象的规范名称，总是为小写形式并且总是可以作为 :func:`new` 的形参用来创建另一个此类型的哈希对象。"

#: ../../library/hashlib.rst:194
msgid ""
"The name attribute has been present in CPython since its inception, but "
"until Python 3.4 was not formally specified, so may not exist on some "
"platforms."
msgstr "该属性名称自被引入起即存在于 CPython 中，但在 Python 3.4 之前并未正式指明，因此可能不存在于某些平台上。"

#: ../../library/hashlib.rst:199
msgid "A hash object has the following methods:"
msgstr "哈希对象具有下列方法:"

#: ../../library/hashlib.rst:204
msgid ""
"Update the hash object with the :term:`bytes-like object`. Repeated calls "
"are equivalent to a single call with the concatenation of all the arguments:"
" ``m.update(a); m.update(b)`` is equivalent to ``m.update(a+b)``."
msgstr ""
"用 :term:`bytes-like object` 来更新哈希对象。 重复调用相当于单次调用并传入所有参数的拼接结果: ``m.update(a);"
" m.update(b)`` 等价于 ``m.update(a+b)``。"

#: ../../library/hashlib.rst:212
msgid ""
"Return the digest of the data passed to the :meth:`update` method so far. "
"This is a bytes object of size :attr:`digest_size` which may contain bytes "
"in the whole range from 0 to 255."
msgstr ""
"返回当前已传给 :meth:`update` 方法的数据摘要。 这是一个大小为 :attr:`digest_size` 的字节串对象，字节串中可包含 0"
" 至 255 的完整取值范围。"

#: ../../library/hashlib.rst:219
msgid ""
"Like :meth:`digest` except the digest is returned as a string object of "
"double length, containing only hexadecimal digits.  This may be used to "
"exchange the value safely in email or other non-binary environments."
msgstr ""
"类似于 :meth:`digest` 但摘要会以两倍长度字符串对象的形式返回，其中仅包含十六进制数码。 "
"这可以被用于在电子邮件或其他非二进制环境中安全地交换数据值。"

#: ../../library/hashlib.rst:226
msgid ""
"Return a copy (\"clone\") of the hash object.  This can be used to "
"efficiently compute the digests of data sharing a common initial substring."
msgstr "返回哈希对象的副本（“克隆”）。 这可被用来高效地计算共享相同初始子串的数据的摘要。"

#: ../../library/hashlib.rst:231
msgid "SHAKE variable length digests"
msgstr "SHAKE 可变长度摘要"

#: ../../library/hashlib.rst:236
msgid ""
"The :func:`shake_128` and :func:`shake_256` algorithms provide variable "
"length digests with length_in_bits//2 up to 128 or 256 bits of security. As "
"such, their digest methods require a length. Maximum length is not limited "
"by the SHAKE algorithm."
msgstr ""
":func:`shake_128` 和 :func:`shake_256` 算法提供安全的 length_in_bits//2 至 128 或 256 "
"位可变长度摘要。 为此，它们的摘要需指定一个长度。 SHAKE 算法不限制最大长度。"

#: ../../library/hashlib.rst:243
msgid ""
"Return the digest of the data passed to the :meth:`~hash.update` method so "
"far. This is a bytes object of size *length* which may contain bytes in the "
"whole range from 0 to 255."
msgstr ""
"返回当前已传给 :meth:`~hash.update` 方法的数据摘要。 这是一个大小为 *length* 的字节串对象，其中可包含 0 至 255 "
"完整范围内的字节值。"

#: ../../library/hashlib.rst:250
msgid ""
"Like :meth:`digest` except the digest is returned as a string object of "
"double length, containing only hexadecimal digits.  This may be used to "
"exchange the value in email or other non-binary environments."
msgstr ""
"类似于 :meth:`digest` 但摘要会以两倍长度字符串对象的形式返回，其中仅包含十六进制数码。 "
"这可以被用于在电子邮件或其他非二进制环境中安全地交换数据值。"

#: ../../library/hashlib.rst:254
msgid "Example use:"
msgstr "用法示例:"

#: ../../library/hashlib.rst:261
msgid "File hashing"
msgstr "文件哈希"

#: ../../library/hashlib.rst:263
msgid ""
"The hashlib module provides a helper function for efficient hashing of a "
"file or file-like object."
msgstr "hashlib 模块提供了一个辅助函数用于文件或文件型对象的高效哈希操作。"

#: ../../library/hashlib.rst:268
msgid ""
"Return a digest object that has been updated with contents of file object."
msgstr "返回一个根据文件对象进行更新的摘要对象。"

#: ../../library/hashlib.rst:270
msgid ""
"*fileobj* must be a file-like object opened for reading in binary mode. It "
"accepts file objects from  builtin :func:`open`, :class:`~io.BytesIO` "
"instances, SocketIO objects from :meth:`socket.socket.makefile`, and "
"similar. *fileobj* must be opened in blocking mode, otherwise a "
":exc:`BlockingIOError` may be raised."
msgstr ""
"*fileobj* 必须是一个以二进制模式打开用于读取的文件型对象。 它接受来自内置 :func:`open`, "
":class:`~io.BytesIO` 实例, :meth:`socket.socket.makefile` 创建的 SocketIO "
"及其他类似的文件对象。 *fileobj* 必须以阻塞模式打开，否则可能引发 :exc:`BlockingIOError`。"

#: ../../library/hashlib.rst:276
msgid ""
"The function may bypass Python's I/O and use the file descriptor from "
":meth:`~io.IOBase.fileno` directly. *fileobj* must be assumed to be in an "
"unknown state after this function returns or raises. It is up to the caller "
"to close *fileobj*."
msgstr ""
"此函数可能会绕过 Python 的 I/O 并直接使用来自 :meth:`~io.IOBase.fileno` 的文件描述符。 *fileobj* "
"在此函数返回或引发异常之后必须被假定为已处于未知状态。 应当由调用方来负责关闭 *fileobj*。"

#: ../../library/hashlib.rst:281
msgid ""
"*digest* must either be a hash algorithm name as a *str*, a hash "
"constructor, or a callable that returns a hash object."
msgstr "*digest* 必须是一个 *str* 形式的哈希算法名称、哈希构造器或返回哈希对象的可调用对象。"

#: ../../library/hashlib.rst:284
msgid "Example:"
msgstr "示例:"

#: ../../library/hashlib.rst:305
msgid ""
"Now raises a :exc:`BlockingIOError` if the file is opened in blocking mode. "
"Previously, spurious null bytes were added to the digest."
msgstr "现在如果文件是以阻塞模式打开则会引发 :exc:`BlockingIOError`。 在之前版本中，会向摘要添加伪装的空字节。"

#: ../../library/hashlib.rst:311
msgid "Key derivation"
msgstr "密钥派生"

#: ../../library/hashlib.rst:313
msgid ""
"Key derivation and key stretching algorithms are designed for secure "
"password hashing. Naive algorithms such as ``sha1(password)`` are not "
"resistant against brute-force attacks. A good password hashing function must"
" be tunable, slow, and include a `salt "
"<https://en.wikipedia.org/wiki/Salt_%28cryptography%29>`_."
msgstr ""
"密钥派生和密钥延展算法被设计用于安全密码哈希。 ``sha1(password)`` 这样的简单算法无法防御暴力攻击。 "
"好的密码哈希函数必须可以微调、放慢步调，并且包含 `加盐 "
"<https://en.wikipedia.org/wiki/Salt_%28cryptography%29>`_。"

#: ../../library/hashlib.rst:321
msgid ""
"The function provides PKCS#5 password-based key derivation function 2. It "
"uses HMAC as pseudorandom function."
msgstr "此函数提供 PKCS#5 基于密码的密钥派生函数 2。 它使用 HMAC 作为伪随机函数。"

#: ../../library/hashlib.rst:324
msgid ""
"The string *hash_name* is the desired name of the hash digest algorithm for "
"HMAC, e.g. 'sha1' or 'sha256'. *password* and *salt* are interpreted as "
"buffers of bytes. Applications and libraries should limit *password* to a "
"sensible length (e.g. 1024). *salt* should be about 16 or more bytes from a "
"proper source, e.g. :func:`os.urandom`."
msgstr ""
"字符串 *hash_name* 是要求用于 HMAC 的哈希摘要算法的名称，例如 'sha1' 或 'sha256'。 *password* 和 "
"*salt* 会以字节串缓冲区的形式被解析。 应用和库应当将 *password* 限制在合理长度 (例如 1024)。 *salt* "
"应当为适当来源例如 :func:`os.urandom` 的大约 16 个或更多的字节串数据。"

#: ../../library/hashlib.rst:330
msgid ""
"The number of *iterations* should be chosen based on the hash algorithm and "
"computing power. As of 2022, hundreds of thousands of iterations of SHA-256 "
"are suggested. For rationale as to why and how to choose what is best for "
"your application, read *Appendix A.2.2* of NIST-SP-800-132_. The answers on "
"the `stackexchange pbkdf2 iterations question`_ explain in detail."
msgstr ""
"*iterations* 的数值应当基于哈希算法和机器算力来选择。 在 2022 年，建议选择进行数万次的 SHA-256 迭代。 "
"对于为何以及如何选择最适合你的应用程序的迭代次数的理由，请参阅 NIST-SP-800-132_ 的 *Appendix A.2.2*。 其中 "
"`stackexchange pbkdf2 迭代问题`_ 的解答提供的详细的说明。"

#: ../../library/hashlib.rst:336
msgid ""
"*dklen* is the length of the derived key in bytes. If *dklen* is ``None`` "
"then the digest size of the hash algorithm *hash_name* is used, e.g. 64 for "
"SHA-512."
msgstr ""
"*dklen* 是以字节数表示的派生密钥长度。 如果 *dklen* 为 ``None`` 则会使用哈希算法 *hash_name* 的摘要长度，例如对"
" SHA-512 来说是 64。"

#: ../../library/hashlib.rst:345
msgid "Function only available when Python is compiled with OpenSSL."
msgstr "此函数只有在 Python 附带 OpenSSL 编译时才可用。"

#: ../../library/hashlib.rst:349
msgid ""
"Function now only available when Python is built with OpenSSL. The slow pure"
" Python implementation has been removed."
msgstr "现在此函数只有在 Python 附带 OpenSSL 构建时才可用。 慢速的纯 Python 实现已被移除。"

#: ../../library/hashlib.rst:355
msgid ""
"The function provides scrypt password-based key derivation function as "
"defined in :rfc:`7914`."
msgstr "此函数提供基于密码加密的密钥派生函数，其定义参见 :rfc:`7914`。"

#: ../../library/hashlib.rst:358
msgid ""
"*password* and *salt* must be :term:`bytes-like objects <bytes-like "
"object>`.  Applications and libraries should limit *password* to a sensible "
"length (e.g. 1024).  *salt* should be about 16 or more bytes from a proper "
"source, e.g. :func:`os.urandom`."
msgstr ""
"*password* 和 *salt* 必须为 :term:`字节类对象 <bytes-like object>`。 应用和库应当将 "
"*password* 限制在合理长度 (例如 1024)。 *salt* 应当为适当来源例如 :func:`os.urandom` 的大约 16 "
"个或更多的字节串数据。"

#: ../../library/hashlib.rst:363
msgid ""
"*n* is the CPU/Memory cost factor, *r* the block size, *p* parallelization "
"factor and *maxmem* limits memory (OpenSSL 1.1.0 defaults to 32 MiB). "
"*dklen* is the length of the derived key in bytes."
msgstr ""
"*n* 是 CPU/内存开销因子，*r* 是块大小，*p* 是并行化因子而 *maxmem* 是内存上限（OpenSSL 1.1.0 默认为 32 "
"MiB）。 *dklen* 是以字节数表示的派生密钥长度。"

#: ../../library/hashlib.rst:373
msgid "BLAKE2"
msgstr "BLAKE2"

#: ../../library/hashlib.rst:380
msgid ""
"BLAKE2_ is a cryptographic hash function defined in :rfc:`7693` that comes "
"in two flavors:"
msgstr "BLAKE2_ 是在 :rfc:`7693` 中定义的加密哈希函数，它有两种形式:"

#: ../../library/hashlib.rst:383
msgid ""
"**BLAKE2b**, optimized for 64-bit platforms and produces digests of any size"
" between 1 and 64 bytes,"
msgstr "**BLAKE2b**，针对 64 位平台进行优化，并会生成长度介于 1 和 64 字节之间任意大小的摘要。"

#: ../../library/hashlib.rst:386
msgid ""
"**BLAKE2s**, optimized for 8- to 32-bit platforms and produces digests of "
"any size between 1 and 32 bytes."
msgstr "**BLAKE2s**，针对 8 至 32 位平台进行优化，并会生成长度介于 1 和 32 字节之间任意大小的摘要。"

#: ../../library/hashlib.rst:389
msgid ""
"BLAKE2 supports **keyed mode** (a faster and simpler replacement for HMAC_),"
" **salted hashing**, **personalization**, and **tree hashing**."
msgstr ""
"BLAKE2 支持 **keyed mode** (HMAC_ 的更快速更简单的替代), **salted hashing**, "
"**personalization** 和 **tree hashing**."

#: ../../library/hashlib.rst:392
msgid ""
"Hash objects from this module follow the API of standard library's "
":mod:`hashlib` objects."
msgstr "此模块的哈希对象遵循标准库 :mod:`hashlib` 对象的 API。"

#: ../../library/hashlib.rst:397
msgid "Creating hash objects"
msgstr "创建哈希对象"

#: ../../library/hashlib.rst:399
msgid "New hash objects are created by calling constructor functions:"
msgstr "新哈希对象可通过调用构造器函数来创建:"

#: ../../library/hashlib.rst:413
msgid ""
"These functions return the corresponding hash objects for calculating "
"BLAKE2b or BLAKE2s. They optionally take these general parameters:"
msgstr "这些函数返回用于计算 BLAKE2b 或 BLAKE2s 的相应的哈希对象。 它们接受下列可选通用形参:"

#: ../../library/hashlib.rst:416
msgid ""
"*data*: initial chunk of data to hash, which must be :term:`bytes-like "
"object`.  It can be passed only as positional argument."
msgstr "*data*: 要哈希的初始数据块，它必须为 :term:`bytes-like object`。 它只能作为位置参数传入。"

#: ../../library/hashlib.rst:419
msgid "*digest_size*: size of output digest in bytes."
msgstr "*digest_size*: 以字节数表示的输出摘要大小。"

#: ../../library/hashlib.rst:421
msgid ""
"*key*: key for keyed hashing (up to 64 bytes for BLAKE2b, up to 32 bytes for"
" BLAKE2s)."
msgstr "*key*: 用于密钥哈希的密钥（对于 BLAKE2b 最长 64 字节，对于 BLAKE2s 最长 32 字节）。"

#: ../../library/hashlib.rst:424
msgid ""
"*salt*: salt for randomized hashing (up to 16 bytes for BLAKE2b, up to 8 "
"bytes for BLAKE2s)."
msgstr "*salt*: 用于随机哈希的盐值（对于 BLAKE2b 最长 16 字节，对于 BLAKE2s 最长 8 字节）。"

#: ../../library/hashlib.rst:427
msgid ""
"*person*: personalization string (up to 16 bytes for BLAKE2b, up to 8 bytes "
"for BLAKE2s)."
msgstr "*person*: 个性化字符串（对于 BLAKE2b 最长 16 字节，对于 BLAKE2s 最长 8 字节）。"

#: ../../library/hashlib.rst:430
msgid "The following table shows limits for general parameters (in bytes):"
msgstr "下表显示了常规参数的限制（以字节为单位）："

#: ../../library/hashlib.rst:433
msgid "Hash"
msgstr "Hash"

#: ../../library/hashlib.rst:433
msgid "digest_size"
msgstr "目标长度"

#: ../../library/hashlib.rst:433
msgid "len(key)"
msgstr "长度（键）"

#: ../../library/hashlib.rst:433
msgid "len(salt)"
msgstr "长度（盐）"

#: ../../library/hashlib.rst:433
msgid "len(person)"
msgstr "长度（个人）"

#: ../../library/hashlib.rst:435
msgid "BLAKE2b"
msgstr "BLAKE2b"

#: ../../library/hashlib.rst:435
msgid "64"
msgstr "64"

#: ../../library/hashlib.rst:435
msgid "16"
msgstr "16"

#: ../../library/hashlib.rst:436
msgid "BLAKE2s"
msgstr "BLAKE2s"

#: ../../library/hashlib.rst:436
msgid "32"
msgstr "32"

#: ../../library/hashlib.rst:436
msgid "8"
msgstr "8"

#: ../../library/hashlib.rst:441
msgid ""
"BLAKE2 specification defines constant lengths for salt and personalization "
"parameters, however, for convenience, this implementation accepts byte "
"strings of any size up to the specified length. If the length of the "
"parameter is less than specified, it is padded with zeros, thus, for "
"example, ``b'salt'`` and ``b'salt\\x00'`` is the same value. (This is not "
"the case for *key*.)"
msgstr ""
"BLAKE2 规格描述为盐值和个性化形参定义了固定的长度，但是为了方便起见，此实现接受指定在长度以内的任意大小的字节串。 "
"如果形参长度小于指定值，它将以零值进行填充，因此举例来说，``b'salt'`` 和 ``b'salt\\x00'`` 为相同的值 (*key* "
"的情况则并非如此。)"

#: ../../library/hashlib.rst:448
msgid "These sizes are available as module `constants`_ described below."
msgstr "如下面的模块 `constants`_ 所描述，这些是可用的大小取值。"

#: ../../library/hashlib.rst:450
msgid ""
"Constructor functions also accept the following tree hashing parameters:"
msgstr "构造器函数还接受下列树形哈希形参:"

#: ../../library/hashlib.rst:452
msgid "*fanout*: fanout (0 to 255, 0 if unlimited, 1 in sequential mode)."
msgstr "*fanout*: 扇出值 (0 至 255，如无限制即为 0，连续模式下为 1)。"

#: ../../library/hashlib.rst:454
msgid ""
"*depth*: maximal depth of tree (1 to 255, 255 if unlimited, 1 in sequential "
"mode)."
msgstr "*depth*: 树的最大深度 (1 至 255，如无限制则为 255，连续模式下为 1)。"

#: ../../library/hashlib.rst:457
msgid ""
"*leaf_size*: maximal byte length of leaf (0 to ``2**32-1``, 0 if unlimited "
"or in sequential mode)."
msgstr "*leaf_size*: 叶子的最大字节长度 (0 至 ``2**32-1``，如无限制或在连续模式下则为 0)。"

#: ../../library/hashlib.rst:460
msgid ""
"*node_offset*: node offset (0 to ``2**64-1`` for BLAKE2b, 0 to ``2**48-1`` "
"for BLAKE2s, 0 for the first, leftmost, leaf, or in sequential mode)."
msgstr ""
"*node_offset*: 节点的偏移量 (对于 BLAKE2b 为 0 至 ``2**64-1``，对于 BLAKE2s 为 0 至 "
"``2**48-1``，对于最多边的第一个叶子或在连续模式下则为 0)。"

#: ../../library/hashlib.rst:463
msgid ""
"*node_depth*: node depth (0 to 255, 0 for leaves, or in sequential mode)."
msgstr "*node_depth*: 节点深度 (0 至 255，对于叶子或在连续模式下则为 0)。"

#: ../../library/hashlib.rst:465
msgid ""
"*inner_size*: inner digest size (0 to 64 for BLAKE2b, 0 to 32 for BLAKE2s, 0"
" in sequential mode)."
msgstr ""
"*inner_size*: 内部摘要大小 (对于 BLAKE2b 为 0 至 64，对于 BLAKE2s 为 0 至 32，连续模式下则为 0)。"

#: ../../library/hashlib.rst:468
msgid ""
"*last_node*: boolean indicating whether the processed node is the last one "
"(``False`` for sequential mode)."
msgstr "*last_node*: 一个指明所处理的节点是否为最后一个 (在连续模式下为 ``False``) 的布尔值。"

#: ../../library/hashlib.rst:471
msgid "Explanation of tree mode parameters."
msgstr "树模式形参的说明。"

#: ../../library/hashlib.rst:475
msgid ""
"See section 2.10 in `BLAKE2 specification "
"<https://www.blake2.net/blake2_20130129.pdf>`_ for comprehensive review of "
"tree hashing."
msgstr ""
"请参阅 `BLAKE2 规格描述 <https://www.blake2.net/blake2_20130129.pdf>`_ 第 2.10 "
"节获取有关树形哈希的完整介绍。"

#: ../../library/hashlib.rst:481
msgid "Constants"
msgstr "常量"

#: ../../library/hashlib.rst:486
msgid "Salt length (maximum length accepted by constructors)."
msgstr "盐值长度（构造器所接受的最大长度）。"

#: ../../library/hashlib.rst:492
msgid ""
"Personalization string length (maximum length accepted by constructors)."
msgstr "个性化字符串长度（构造器所接受的最大长度）。"

#: ../../library/hashlib.rst:498
msgid "Maximum key size."
msgstr "最大密钥长度。"

#: ../../library/hashlib.rst:504
msgid "Maximum digest size that the hash function can output."
msgstr "哈希函数可输出的最大摘要长度。"

#: ../../library/hashlib.rst:508
msgid "Examples"
msgstr "例子"

#: ../../library/hashlib.rst:511
msgid "Simple hashing"
msgstr "简单哈希"

#: ../../library/hashlib.rst:513
msgid ""
"To calculate hash of some data, you should first construct a hash object by "
"calling the appropriate constructor function (:func:`blake2b` or "
":func:`blake2s`), then update it with the data by calling "
":meth:`~hash.update` on the object, and, finally, get the digest out of the "
"object by calling :meth:`~hash.digest` (or :meth:`~hash.hexdigest` for hex-"
"encoded string)."
msgstr ""
"要计算某个数据的哈希值，你应该首先通过调用适当的构造器函数 (:func:`blake2b` 或 :func:`blake2s`) "
"来构造一个哈希对象，然后通过在该对象上调用 :meth:`~hash.update` 来更新目标数据，最后再通过调用 "
":meth:`~hash.digest` (或针对十六进制编码字符串的 :meth:`~hash.hexdigest`) 来获取该对象的摘要。"

#: ../../library/hashlib.rst:526
msgid ""
"As a shortcut, you can pass the first chunk of data to update directly to "
"the constructor as the positional argument:"
msgstr "作为快捷方式，你可以直接以位置参数的形式向构造器传入第一个数据块来直接更新:"

#: ../../library/hashlib.rst:533
msgid ""
"You can call :meth:`hash.update` as many times as you need to iteratively "
"update the hash:"
msgstr "你可以多次调用 :meth:`hash.update` 至你所想要的任意次数以迭代地更新哈希值:"

#: ../../library/hashlib.rst:547
msgid "Using different digest sizes"
msgstr "使用不同的摘要大小"

#: ../../library/hashlib.rst:549
msgid ""
"BLAKE2 has configurable size of digests up to 64 bytes for BLAKE2b and up to"
" 32 bytes for BLAKE2s. For example, to replace SHA-1 with BLAKE2b without "
"changing the size of output, we can tell BLAKE2b to produce 20-byte digests:"
msgstr ""
"BLAKE2 具有可配置的摘要大小，对于 BLAKE2b 最多 64 字节，对于 BLAKE2s 最多 32 字节。 例如，要使用 BLAKE2b "
"来替代 SHA-1 而不改变输出大小，我们可以让 BLAKE2b 产生 20 个字节的摘要:"

#: ../../library/hashlib.rst:563
msgid ""
"Hash objects with different digest sizes have completely different outputs "
"(shorter hashes are *not* prefixes of longer hashes); BLAKE2b and BLAKE2s "
"produce different outputs even if the output length is the same:"
msgstr ""
"不同摘要大小的哈希对象具有完全不同的输出（较短哈希值 *并非* 较长哈希值的前缀）；即使输出长度相同，BLAKE2b 和 BLAKE2s "
"也会产生不同的输出:"

#: ../../library/hashlib.rst:579
msgid "Keyed hashing"
msgstr "密钥哈希"

#: ../../library/hashlib.rst:581
msgid ""
"Keyed hashing can be used for authentication as a faster and simpler "
"replacement for `Hash-based message authentication code "
"<https://en.wikipedia.org/wiki/HMAC>`_ (HMAC). BLAKE2 can be securely used "
"in prefix-MAC mode thanks to the indifferentiability property inherited from"
" BLAKE."
msgstr ""
"带密钥的哈希运算可被用于身份验证，作为 `基于哈希的消息验证代码 <https://en.wikipedia.org/wiki/HMAC>`_ "
"(HMAC) 的一种更快速更简单的替代。 BLAKE2 可被安全地用于前缀 MAC 模式，这是由于它从 BLAKE 继承而来的不可区分特性。"

#: ../../library/hashlib.rst:587
msgid ""
"This example shows how to get a (hex-encoded) 128-bit authentication code "
"for message ``b'message data'`` with key ``b'pseudorandom key'``::"
msgstr ""
"这个例子演示了如何使用密钥 ``b'pseudorandom key'`` 来为 ``b'message data'`` "
"获取一个（十六进制编码的）128 位验证代码::"

#: ../../library/hashlib.rst:590
msgid ""
">>> from hashlib import blake2b\n"
">>> h = blake2b(key=b'pseudorandom key', digest_size=16)\n"
">>> h.update(b'message data')\n"
">>> h.hexdigest()\n"
"'3d363ff7401e02026f4a4687d4863ced'"
msgstr ""
">>> from hashlib import blake2b\n"
">>> h = blake2b(key=b'pseudorandom key', digest_size=16)\n"
">>> h.update(b'message data')\n"
">>> h.hexdigest()\n"
"'3d363ff7401e02026f4a4687d4863ced'"

#: ../../library/hashlib.rst:597
msgid ""
"As a practical example, a web application can symmetrically sign cookies "
"sent to users and later verify them to make sure they weren't tampered "
"with::"
msgstr "作为实际的例子，一个 Web 应用可为发送给用户的 cookies 进行对称签名，并在之后对其进行验证以确保它们没有被篡改::"

#: ../../library/hashlib.rst:600
msgid ""
">>> from hashlib import blake2b\n"
">>> from hmac import compare_digest\n"
">>>\n"
">>> SECRET_KEY = b'pseudorandomly generated server secret key'\n"
">>> AUTH_SIZE = 16\n"
">>>\n"
">>> def sign(cookie):\n"
"...     h = blake2b(digest_size=AUTH_SIZE, key=SECRET_KEY)\n"
"...     h.update(cookie)\n"
"...     return h.hexdigest().encode('utf-8')\n"
">>>\n"
">>> def verify(cookie, sig):\n"
"...     good_sig = sign(cookie)\n"
"...     return compare_digest(good_sig, sig)\n"
">>>\n"
">>> cookie = b'user-alice'\n"
">>> sig = sign(cookie)\n"
">>> print(\"{0},{1}\".format(cookie.decode('utf-8'), sig))\n"
"user-alice,b'43b3c982cf697e0c5ab22172d1ca7421'\n"
">>> verify(cookie, sig)\n"
"True\n"
">>> verify(b'user-bob', sig)\n"
"False\n"
">>> verify(cookie, b'0102030405060708090a0b0c0d0e0f00')\n"
"False"
msgstr ""
">>> from hashlib import blake2b\n"
">>> from hmac import compare_digest\n"
">>>\n"
">>> SECRET_KEY = b'pseudorandomly generated server secret key'\n"
">>> AUTH_SIZE = 16\n"
">>>\n"
">>> def sign(cookie):\n"
"...     h = blake2b(digest_size=AUTH_SIZE, key=SECRET_KEY)\n"
"...     h.update(cookie)\n"
"...     return h.hexdigest().encode('utf-8')\n"
">>>\n"
">>> def verify(cookie, sig):\n"
"...     good_sig = sign(cookie)\n"
"...     return compare_digest(good_sig, sig)\n"
">>>\n"
">>> cookie = b'user-alice'\n"
">>> sig = sign(cookie)\n"
">>> print(\"{0},{1}\".format(cookie.decode('utf-8'), sig))\n"
"user-alice,b'43b3c982cf697e0c5ab22172d1ca7421'\n"
">>> verify(cookie, sig)\n"
"True\n"
">>> verify(b'user-bob', sig)\n"
"False\n"
">>> verify(cookie, b'0102030405060708090a0b0c0d0e0f00')\n"
"False"

#: ../../library/hashlib.rst:626
msgid ""
"Even though there's a native keyed hashing mode, BLAKE2 can, of course, be "
"used in HMAC construction with :mod:`hmac` module::"
msgstr "即使存在原生的密钥哈希模式，BLAKE2 也同样可在 :mod:`hmac` 模块的 HMAC 构造过程中使用::"

#: ../../library/hashlib.rst:629
msgid ""
">>> import hmac, hashlib\n"
">>> m = hmac.new(b'secret key', digestmod=hashlib.blake2s)\n"
">>> m.update(b'message')\n"
">>> m.hexdigest()\n"
"'e3c8102868d28b5ff85fc35dda07329970d1a01e273c37481326fe0c861c8142'"
msgstr ""
">>> import hmac, hashlib\n"
">>> m = hmac.new(b'secret key', digestmod=hashlib.blake2s)\n"
">>> m.update(b'message')\n"
">>> m.hexdigest()\n"
"'e3c8102868d28b5ff85fc35dda07329970d1a01e273c37481326fe0c861c8142'"

#: ../../library/hashlib.rst:637
msgid "Randomized hashing"
msgstr "随机哈希"

#: ../../library/hashlib.rst:639
msgid ""
"By setting *salt* parameter users can introduce randomization to the hash "
"function. Randomized hashing is useful for protecting against collision "
"attacks on the hash function used in digital signatures."
msgstr "用户可通过设置 *salt* 形参来为哈希函数引入随机化。 随机哈希适用于防止对数字签名中使用的哈希函数进行碰撞攻击。"

#: ../../library/hashlib.rst:643
msgid ""
"Randomized hashing is designed for situations where one party, the message "
"preparer, generates all or part of a message to be signed by a second party,"
" the message signer. If the message preparer is able to find cryptographic "
"hash function collisions (i.e., two messages producing the same hash value),"
" then they might prepare meaningful versions of the message that would "
"produce the same hash value and digital signature, but with different "
"results (e.g., transferring $1,000,000 to an account, rather than $10). "
"Cryptographic hash functions have been designed with collision resistance as"
" a major goal, but the current concentration on attacking cryptographic hash"
" functions may result in a given cryptographic hash function providing less "
"collision resistance than expected. Randomized hashing offers the signer "
"additional protection by reducing the likelihood that a preparer can "
"generate two or more messages that ultimately yield the same hash value "
"during the digital signature generation process --- even if it is practical "
"to find collisions for the hash function. However, the use of randomized "
"hashing may reduce the amount of security provided by a digital signature "
"when all portions of the message are prepared by the signer."
msgstr ""
"随机哈希被设计用来处理当一方（消息准备者）要生成由另一方（消息签名者）进行签名的全部或部分消息的情况。 "
"如果消息准备者能够找到加密哈希函数的碰撞现象（即两条消息产生相同的哈希值），则他们就可以准备将产生相同哈希值和数字签名但却具有不同结果的有意义的消息版本（例如向某个账户转入"
" $1,000,000 而不是 $10）。 "
"加密哈希函数的设计都是以防碰撞性能为其主要目标之一的，但是当前针对加密哈希函数的集中攻击可能导致特定加密哈希函数所提供的防碰撞性能低于预期。 "
"随机哈希为签名者提供了额外的保护，可以降低准备者在数字签名生成过程中使得两条或更多条消息最终产生相同哈希值的可能性 --- "
"即使为特定哈希函数找到碰撞现象是可行的。 但是，当消息的所有部分均由签名者准备时，使用随机哈希可能降低数字签名所提供的安全性。"

#: ../../library/hashlib.rst:662
msgid ""
"(`NIST SP-800-106 \"Randomized Hashing for Digital Signatures\" "
"<https://csrc.nist.gov/pubs/sp/800/106/final>`_)"
msgstr ""
"(`NIST SP-800-106 \"数字签名的随机哈希\" "
"<https://csrc.nist.gov/pubs/sp/800/106/final>`_)"

#: ../../library/hashlib.rst:665
msgid ""
"In BLAKE2 the salt is processed as a one-time input to the hash function "
"during initialization, rather than as an input to each compression function."
msgstr "在 BLAKE2 中，盐值会在初始化期间作为对哈希函数的一次性输入而不是对每个压缩函数的输入来处理。"

#: ../../library/hashlib.rst:670
msgid ""
"*Salted hashing* (or just hashing) with BLAKE2 or any other general-purpose "
"cryptographic hash function, such as SHA-256, is not suitable for hashing "
"passwords.  See `BLAKE2 FAQ <https://www.blake2.net/#qa>`_ for more "
"information."
msgstr ""
"使用 BLAKE2 或任何其他通用加密哈希函数，例如 SHA-256 进行 *加盐哈希* (或纯哈希) 并不适用于对密码的哈希。 请参阅 `BLAKE2"
" FAQ <https://www.blake2.net/#qa>`_ 了解更多信息。"

#: ../../library/hashlib.rst:693
msgid "Personalization"
msgstr "个性化"

#: ../../library/hashlib.rst:695
msgid ""
"Sometimes it is useful to force hash function to produce different digests "
"for the same input for different purposes. Quoting the authors of the Skein "
"hash function:"
msgstr "出于不同的目的强制让哈希函数为相同的输入生成不同的摘要有时也是有用的。 正如 Skein 哈希函数的作者所言:"

#: ../../library/hashlib.rst:699
msgid ""
"We recommend that all application designers seriously consider doing this; "
"we have seen many protocols where a hash that is computed in one part of the"
" protocol can be used in an entirely different part because two hash "
"computations were done on similar or related data, and the attacker can "
"force the application to make the hash inputs the same. Personalizing each "
"hash function used in the protocol summarily stops this type of attack."
msgstr ""
"我们建议所有应用设计者慎重考虑这种做法；我们已看到有许多协议在协议的某一部分中计算出来的哈希值在另一个完全不同的部分中也可以被使用，因为两次哈希计算是针对类似或相关的数据进行的，这样攻击者可以强制应用为相同的输入生成哈希值。"
" 个性化协议中所使用的每个哈希函数将有效地阻止这种类型的攻击。"

#: ../../library/hashlib.rst:706
msgid ""
"(`The Skein Hash Function Family <https://www.schneier.com/wp-"
"content/uploads/2016/02/skein.pdf>`_, p. 21)"
msgstr ""
"(`Skein 哈希函数族 <https://www.schneier.com/wp-"
"content/uploads/2016/02/skein.pdf>`_, p. 21)"

#: ../../library/hashlib.rst:710
msgid "BLAKE2 can be personalized by passing bytes to the *person* argument::"
msgstr "BLAKE2 可通过向 *person* 参数传入字节串来进行个性化::"

#: ../../library/hashlib.rst:712
msgid ""
">>> from hashlib import blake2b\n"
">>> FILES_HASH_PERSON = b'MyApp Files Hash'\n"
">>> BLOCK_HASH_PERSON = b'MyApp Block Hash'\n"
">>> h = blake2b(digest_size=32, person=FILES_HASH_PERSON)\n"
">>> h.update(b'the same content')\n"
">>> h.hexdigest()\n"
"'20d9cd024d4fb086aae819a1432dd2466de12947831b75c5a30cf2676095d3b4'\n"
">>> h = blake2b(digest_size=32, person=BLOCK_HASH_PERSON)\n"
">>> h.update(b'the same content')\n"
">>> h.hexdigest()\n"
"'cf68fb5761b9c44e7878bfb2c4c9aea52264a80b75005e65619778de59f383a3'"
msgstr ""
">>> from hashlib import blake2b\n"
">>> FILES_HASH_PERSON = b'MyApp Files Hash'\n"
">>> BLOCK_HASH_PERSON = b'MyApp Block Hash'\n"
">>> h = blake2b(digest_size=32, person=FILES_HASH_PERSON)\n"
">>> h.update(b'the same content')\n"
">>> h.hexdigest()\n"
"'20d9cd024d4fb086aae819a1432dd2466de12947831b75c5a30cf2676095d3b4'\n"
">>> h = blake2b(digest_size=32, person=BLOCK_HASH_PERSON)\n"
">>> h.update(b'the same content')\n"
">>> h.hexdigest()\n"
"'cf68fb5761b9c44e7878bfb2c4c9aea52264a80b75005e65619778de59f383a3'"

#: ../../library/hashlib.rst:724
msgid ""
"Personalization together with the keyed mode can also be used to derive "
"different keys from a single one."
msgstr "个性化配合密钥模式也可被用来从单个密钥派生出多个不同密钥。"

#: ../../library/hashlib.rst:738
msgid "Tree mode"
msgstr "树形模式"

#: ../../library/hashlib.rst:740
msgid "Here's an example of hashing a minimal tree with two leaf nodes::"
msgstr "以下是对包含两个叶子节点的最小树进行哈希的例子::"

#: ../../library/hashlib.rst:742
msgid ""
"  10\n"
" /  \\\n"
"00  01"
msgstr ""
"  10\n"
" /  \\\n"
"00  01"

#: ../../library/hashlib.rst:746
msgid ""
"This example uses 64-byte internal digests, and returns the 32-byte final "
"digest::"
msgstr "这个例子使用 64 字节内部摘要，返回 32 字节最终摘要::"

#: ../../library/hashlib.rst:749
msgid ""
">>> from hashlib import blake2b\n"
">>>\n"
">>> FANOUT = 2\n"
">>> DEPTH = 2\n"
">>> LEAF_SIZE = 4096\n"
">>> INNER_SIZE = 64\n"
">>>\n"
">>> buf = bytearray(6000)\n"
">>>\n"
">>> # Left leaf\n"
"... h00 = blake2b(buf[0:LEAF_SIZE], fanout=FANOUT, depth=DEPTH,\n"
"...               leaf_size=LEAF_SIZE, inner_size=INNER_SIZE,\n"
"...               node_offset=0, node_depth=0, last_node=False)\n"
">>> # Right leaf\n"
"... h01 = blake2b(buf[LEAF_SIZE:], fanout=FANOUT, depth=DEPTH,\n"
"...               leaf_size=LEAF_SIZE, inner_size=INNER_SIZE,\n"
"...               node_offset=1, node_depth=0, last_node=True)\n"
">>> # Root node\n"
"... h10 = blake2b(digest_size=32, fanout=FANOUT, depth=DEPTH,\n"
"...               leaf_size=LEAF_SIZE, inner_size=INNER_SIZE,\n"
"...               node_offset=0, node_depth=1, last_node=True)\n"
">>> h10.update(h00.digest())\n"
">>> h10.update(h01.digest())\n"
">>> h10.hexdigest()\n"
"'3ad2a9b37c6070e374c7a8c508fe20ca86b6ed54e286e93a0318e95e881db5aa'"
msgstr ""
">>> from hashlib import blake2b\n"
">>>\n"
">>> FANOUT = 2\n"
">>> DEPTH = 2\n"
">>> LEAF_SIZE = 4096\n"
">>> INNER_SIZE = 64\n"
">>>\n"
">>> buf = bytearray(6000)\n"
">>>\n"
">>> # Left leaf\n"
"... h00 = blake2b(buf[0:LEAF_SIZE], fanout=FANOUT, depth=DEPTH,\n"
"...               leaf_size=LEAF_SIZE, inner_size=INNER_SIZE,\n"
"...               node_offset=0, node_depth=0, last_node=False)\n"
">>> # Right leaf\n"
"... h01 = blake2b(buf[LEAF_SIZE:], fanout=FANOUT, depth=DEPTH,\n"
"...               leaf_size=LEAF_SIZE, inner_size=INNER_SIZE,\n"
"...               node_offset=1, node_depth=0, last_node=True)\n"
">>> # Root node\n"
"... h10 = blake2b(digest_size=32, fanout=FANOUT, depth=DEPTH,\n"
"...               leaf_size=LEAF_SIZE, inner_size=INNER_SIZE,\n"
"...               node_offset=0, node_depth=1, last_node=True)\n"
">>> h10.update(h00.digest())\n"
">>> h10.update(h01.digest())\n"
">>> h10.hexdigest()\n"
"'3ad2a9b37c6070e374c7a8c508fe20ca86b6ed54e286e93a0318e95e881db5aa'"

#: ../../library/hashlib.rst:776
msgid "Credits"
msgstr "开发人员"

#: ../../library/hashlib.rst:778
msgid ""
"BLAKE2_ was designed by *Jean-Philippe Aumasson*, *Samuel Neves*, *Zooko "
"Wilcox-O'Hearn*, and *Christian Winnerlein* based on SHA-3_ finalist BLAKE_ "
"created by *Jean-Philippe Aumasson*, *Luca Henzen*, *Willi Meier*, and "
"*Raphael C.-W. Phan*."
msgstr ""
"BLAKE2_ 是由 *Jean-Philippe Aumasson*, *Samuel Neves*, *Zooko Wilcox-O'Hearn* "
"和 *Christian Winnerlein* 基于 *Jean-Philippe Aumasson*, *Luca Henzen*, *Willi "
"Meier* 和 *Raphael C.-W. Phan* 所创造的 SHA-3_ 入围方案 BLAKE_ 进行设计的。"

#: ../../library/hashlib.rst:783
msgid ""
"It uses core algorithm from ChaCha_ cipher designed by *Daniel J.  "
"Bernstein*."
msgstr "它使用的核心算法来自由 *Daniel J. Bernstein* 所设计的 ChaCha_ 加密。"

#: ../../library/hashlib.rst:785
msgid ""
"The stdlib implementation is based on pyblake2_ module. It was written by "
"*Dmitry Chestnykh* based on C implementation written by *Samuel Neves*. The "
"documentation was copied from pyblake2_ and written by *Dmitry Chestnykh*."
msgstr ""
"stdlib 实现是基于 pyblake2_ 模块的。 它由 *Dmitry Chestnykh* 在 *Samuel Neves* 所编写的 C "
"实现的基础上编写。 此文档拷贝自 pyblake2_ 并由 *Dmitry Chestnykh* 撰写。"

#: ../../library/hashlib.rst:789
msgid "The C code was partly rewritten for Python by *Christian Heimes*."
msgstr "C 代码由 *Christian Heimes* 针对 Python 进行了部分的重写。"

#: ../../library/hashlib.rst:791
msgid ""
"The following public domain dedication applies for both C hash function "
"implementation, extension code, and this documentation:"
msgstr "以下公共领域贡献同时适用于 C 哈希函数实现、扩展代码和本文档:"

#: ../../library/hashlib.rst:794
msgid ""
"To the extent possible under law, the author(s) have dedicated all copyright"
" and related and neighboring rights to this software to the public domain "
"worldwide. This software is distributed without any warranty."
msgstr "在法律许可的范围内，作者已将此软件的全部版权以及关联和邻接权利贡献到全球公共领域。 此软件的发布不附带任何担保。"

#: ../../library/hashlib.rst:798
msgid ""
"You should have received a copy of the CC0 Public Domain Dedication along "
"with this software. If not, see "
"https://creativecommons.org/publicdomain/zero/1.0/."
msgstr ""
"你应该已收到此软件附带的 CC0 公共领域专属证书的副本。 如果没有，请参阅 "
"https://creativecommons.org/publicdomain/zero/1.0/。"

#: ../../library/hashlib.rst:802
msgid ""
"The following people have helped with development or contributed their "
"changes to the project and the public domain according to the Creative "
"Commons Public Domain Dedication 1.0 Universal:"
msgstr "根据创意分享公共领域贡献 1.0 通用规范，下列人士为此项目的开发提供了帮助或对公共领域的修改作出了贡献:"

#: ../../library/hashlib.rst:806
msgid "*Alexandr Sokolovskiy*"
msgstr "*Alexandr Sokolovskiy*"

#: ../../library/hashlib.rst:827
msgid "Module :mod:`hmac`"
msgstr "模块 :mod:`hmac`"

#: ../../library/hashlib.rst:828
msgid "A module to generate message authentication codes using hashes."
msgstr "使用哈希运算来生成消息验证代码的模块。"

#: ../../library/hashlib.rst:830
msgid "Module :mod:`base64`"
msgstr "模块 :mod:`base64`"

#: ../../library/hashlib.rst:831
msgid "Another way to encode binary hashes for non-binary environments."
msgstr "针对非二进制环境对二进制哈希值进行编辑的另一种方式。"

#: ../../library/hashlib.rst:833
msgid "https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.180-4.pdf"
msgstr "https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.180-4.pdf"

#: ../../library/hashlib.rst:834
msgid "The FIPS 180-4 publication on Secure Hash Algorithms."
msgstr "有关安全哈希算法的 FIPS 180-4 发布版。"

#: ../../library/hashlib.rst:836
msgid "https://csrc.nist.gov/pubs/fips/202/final"
msgstr "https://csrc.nist.gov/pubs/fips/202/final"

#: ../../library/hashlib.rst:837
msgid "The FIPS 202 publication on the SHA-3 Standard."
msgstr "关于 SHA-3 标准的 FIPS 202 公告。"

#: ../../library/hashlib.rst:839
msgid "https://www.blake2.net/"
msgstr "https://www.blake2.net/"

#: ../../library/hashlib.rst:840
msgid "Official BLAKE2 website."
msgstr "BLAKE2 官方网站"

#: ../../library/hashlib.rst:842
msgid "https://en.wikipedia.org/wiki/Cryptographic_hash_function"
msgstr "https://en.wikipedia.org/wiki/Cryptographic_hash_function"

#: ../../library/hashlib.rst:843
msgid ""
"Wikipedia article with information on which algorithms have known issues and"
" what that means regarding their use."
msgstr "包含关于哪些算法存在已知问题以及对其使用所造成的影响的信息的 Wikipedia 文章。"

#: ../../library/hashlib.rst:846
msgid "https://www.ietf.org/rfc/rfc8018.txt"
msgstr "https://www.ietf.org/rfc/rfc8018.txt"

#: ../../library/hashlib.rst:847
msgid "PKCS #5: Password-Based Cryptography Specification Version 2.1"
msgstr "PKCS #5: 基于密码的加密规范描述 2.1 版"

#: ../../library/hashlib.rst:849
msgid ""
"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf"
msgstr ""
"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf"

#: ../../library/hashlib.rst:850
msgid "NIST Recommendation for Password-Based Key Derivation."
msgstr "NIST 对基于密码的密钥派生的建议。"

#: ../../library/hashlib.rst:12
msgid "message digest, MD5"
msgstr "消息摘要, MD5"

#: ../../library/hashlib.rst:12
msgid ""
"secure hash algorithm, SHA1, SHA2, SHA224, SHA256, SHA384, SHA512, SHA3, "
"Shake, Blake2"
msgstr ""
"安全哈希算法, SHA1, SHA2, SHA224, SHA256, SHA384, SHA512, SHA3, Shake, Blake2"

#: ../../library/hashlib.rst:53
msgid "OpenSSL"
msgstr "OpenSSL"

#: ../../library/hashlib.rst:53
msgid "(use in module hashlib)"
msgstr "(在 hashlib 模块中使用)"

#: ../../library/hashlib.rst:377
msgid "blake2b, blake2s"
msgstr "blake2b, blake2s"
