# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/hashlib.rst:2
msgid ":mod:`hashlib` --- Secure hashes and message digests"
msgstr ""

#: ../../library/hashlib.rst:10
msgid "**Source code:** :source:`Lib/hashlib.py`"
msgstr ""

#: ../../library/hashlib.rst:23
msgid ""
"This module implements a common interface to many different secure hash and "
"message digest algorithms.  Included are the FIPS secure hash algorithms "
"SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS 180-2) as well as "
"RSA's MD5 algorithm (defined in Internet :rfc:`1321`).  The terms \"secure "
"hash\" and \"message digest\" are interchangeable.  Older algorithms were "
"called message digests.  The modern term is secure hash."
msgstr ""

#: ../../library/hashlib.rst:32
msgid ""
"If you want the adler32 or crc32 hash functions, they are available in the "
":mod:`zlib` module."
msgstr ""

#: ../../library/hashlib.rst:37
msgid ""
"Some algorithms have known hash collision weaknesses, refer to the \"See "
"also\" section at the end."
msgstr ""

#: ../../library/hashlib.rst:44
msgid "Hash algorithms"
msgstr ""

#: ../../library/hashlib.rst:46
msgid ""
"There is one constructor method named for each type of :dfn:`hash`.  All "
"return a hash object with the same simple interface. For example: use "
":func:`sha256` to create a SHA-256 hash object. You can now feed this object"
" with :term:`bytes-like objects <bytes-like object>` (normally "
":class:`bytes`) using the :meth:`update` method. At any point you can ask it"
" for the :dfn:`digest` of the concatenation of the data fed to it so far "
"using the :meth:`digest` or :meth:`hexdigest` methods."
msgstr ""

#: ../../library/hashlib.rst:56
msgid ""
"For better multithreading performance, the Python :term:`GIL` is released "
"for data larger than 2047 bytes at object creation or on update."
msgstr ""

#: ../../library/hashlib.rst:61
msgid ""
"Feeding string objects into :meth:`update` is not supported, as hashes work "
"on bytes, not on characters."
msgstr ""

#: ../../library/hashlib.rst:66
msgid ""
"Constructors for hash algorithms that are always present in this module are "
":func:`sha1`, :func:`sha224`, :func:`sha256`, :func:`sha384`, "
":func:`sha512`, :func:`blake2b`, and :func:`blake2s`. :func:`md5` is "
"normally available as well, though it may be missing or blocked if you are "
"using a rare \"FIPS compliant\" build of Python. Additional algorithms may "
"also be available depending upon the OpenSSL library that Python uses on "
"your platform. On most platforms the :func:`sha3_224`, :func:`sha3_256`, "
":func:`sha3_384`, :func:`sha3_512`, :func:`shake_128`, :func:`shake_256` are"
" also available."
msgstr ""

#: ../../library/hashlib.rst:76
msgid ""
"SHA3 (Keccak) and SHAKE constructors :func:`sha3_224`, :func:`sha3_256`, "
":func:`sha3_384`, :func:`sha3_512`, :func:`shake_128`, :func:`shake_256`."
msgstr ""

#: ../../library/hashlib.rst:80
msgid ":func:`blake2b` and :func:`blake2s` were added."
msgstr ""

#: ../../library/hashlib.rst:85
msgid ""
"All hashlib constructors take a keyword-only argument *usedforsecurity* with"
" default value ``True``. A false value allows the use of insecure and "
"blocked hashing algorithms in restricted environments. ``False`` indicates "
"that the hashing algorithm is not used in a security context, e.g. as a non-"
"cryptographic one-way compression function."
msgstr ""

#: ../../library/hashlib.rst:92
msgid "Hashlib now uses SHA3 and SHAKE from OpenSSL 1.1.1 and newer."
msgstr ""

#: ../../library/hashlib.rst:94
msgid ""
"For example, to obtain the digest of the byte string ``b'Nobody inspects the"
" spammish repetition'``::"
msgstr ""

#: ../../library/hashlib.rst:108
msgid "More condensed:"
msgstr ""

#: ../../library/hashlib.rst:115
msgid ""
"Is a generic constructor that takes the string *name* of the desired "
"algorithm as its first parameter.  It also exists to allow access to the "
"above listed hashes as well as any other algorithms that your OpenSSL "
"library may offer.  The named constructors are much faster than :func:`new` "
"and should be preferred."
msgstr ""

#: ../../library/hashlib.rst:121
msgid "Using :func:`new` with an algorithm provided by OpenSSL:"
msgstr ""

#: ../../library/hashlib.rst:128
msgid "Hashlib provides the following constant attributes:"
msgstr ""

#: ../../library/hashlib.rst:132
msgid ""
"A set containing the names of the hash algorithms guaranteed to be supported"
" by this module on all platforms.  Note that 'md5' is in this list despite "
"some upstream vendors offering an odd \"FIPS compliant\" Python build that "
"excludes it."
msgstr ""

#: ../../library/hashlib.rst:141
msgid ""
"A set containing the names of the hash algorithms that are available in the "
"running Python interpreter.  These names will be recognized when passed to "
":func:`new`.  :attr:`algorithms_guaranteed` will always be a subset.  The "
"same algorithm may appear multiple times in this set under different names "
"(thanks to OpenSSL)."
msgstr ""

#: ../../library/hashlib.rst:149
msgid ""
"The following values are provided as constant attributes of the hash objects"
" returned by the constructors:"
msgstr ""

#: ../../library/hashlib.rst:155
msgid "The size of the resulting hash in bytes."
msgstr ""

#: ../../library/hashlib.rst:159
msgid "The internal block size of the hash algorithm in bytes."
msgstr ""

#: ../../library/hashlib.rst:161
msgid "A hash object has the following attributes:"
msgstr ""

#: ../../library/hashlib.rst:165
msgid ""
"The canonical name of this hash, always lowercase and always suitable as a "
"parameter to :func:`new` to create another hash of this type."
msgstr ""

#: ../../library/hashlib.rst:168
msgid ""
"The name attribute has been present in CPython since its inception, but "
"until Python 3.4 was not formally specified, so may not exist on some "
"platforms."
msgstr ""

#: ../../library/hashlib.rst:173
msgid "A hash object has the following methods:"
msgstr ""

#: ../../library/hashlib.rst:178
msgid ""
"Update the hash object with the :term:`bytes-like object`. Repeated calls "
"are equivalent to a single call with the concatenation of all the arguments:"
" ``m.update(a); m.update(b)`` is equivalent to ``m.update(a+b)``."
msgstr ""

#: ../../library/hashlib.rst:183
msgid ""
"The Python GIL is released to allow other threads to run while hash updates "
"on data larger than 2047 bytes is taking place when using hash algorithms "
"supplied by OpenSSL."
msgstr ""

#: ../../library/hashlib.rst:191
msgid ""
"Return the digest of the data passed to the :meth:`update` method so far. "
"This is a bytes object of size :attr:`digest_size` which may contain bytes "
"in the whole range from 0 to 255."
msgstr ""

#: ../../library/hashlib.rst:198 ../../library/hashlib.rst:226
msgid ""
"Like :meth:`digest` except the digest is returned as a string object of "
"double length, containing only hexadecimal digits.  This may be used to "
"exchange the value safely in email or other non-binary environments."
msgstr ""

#: ../../library/hashlib.rst:205
msgid ""
"Return a copy (\"clone\") of the hash object.  This can be used to "
"efficiently compute the digests of data sharing a common initial substring."
msgstr ""

#: ../../library/hashlib.rst:210
msgid "SHAKE variable length digests"
msgstr ""

#: ../../library/hashlib.rst:212
msgid ""
"The :func:`shake_128` and :func:`shake_256` algorithms provide variable "
"length digests with length_in_bits//2 up to 128 or 256 bits of security. As "
"such, their digest methods require a length. Maximum length is not limited "
"by the SHAKE algorithm."
msgstr ""

#: ../../library/hashlib.rst:219
msgid ""
"Return the digest of the data passed to the :meth:`update` method so far. "
"This is a bytes object of size *length* which may contain bytes in the whole"
" range from 0 to 255."
msgstr ""

#: ../../library/hashlib.rst:232
msgid "Key derivation"
msgstr ""

#: ../../library/hashlib.rst:234
msgid ""
"Key derivation and key stretching algorithms are designed for secure "
"password hashing. Naive algorithms such as ``sha1(password)`` are not "
"resistant against brute-force attacks. A good password hashing function must"
" be tunable, slow, and include a `salt "
"<https://en.wikipedia.org/wiki/Salt_%28cryptography%29>`_."
msgstr ""

#: ../../library/hashlib.rst:242
msgid ""
"The function provides PKCS#5 password-based key derivation function 2. It "
"uses HMAC as pseudorandom function."
msgstr ""

#: ../../library/hashlib.rst:245
msgid ""
"The string *hash_name* is the desired name of the hash digest algorithm for "
"HMAC, e.g. 'sha1' or 'sha256'. *password* and *salt* are interpreted as "
"buffers of bytes. Applications and libraries should limit *password* to a "
"sensible length (e.g. 1024). *salt* should be about 16 or more bytes from a "
"proper source, e.g. :func:`os.urandom`."
msgstr ""

#: ../../library/hashlib.rst:251
msgid ""
"The number of *iterations* should be chosen based on the hash algorithm and "
"computing power. As of 2013, at least 100,000 iterations of SHA-256 are "
"suggested."
msgstr ""

#: ../../library/hashlib.rst:255
msgid ""
"*dklen* is the length of the derived key. If *dklen* is ``None`` then the "
"digest size of the hash algorithm *hash_name* is used, e.g. 64 for SHA-512."
msgstr ""

#: ../../library/hashlib.rst:267
msgid ""
"A fast implementation of *pbkdf2_hmac* is available with OpenSSL.  The "
"Python implementation uses an inline version of :mod:`hmac`. It is about "
"three times slower and doesn't release the GIL."
msgstr ""

#: ../../library/hashlib.rst:273
msgid ""
"The function provides scrypt password-based key derivation function as "
"defined in :rfc:`7914`."
msgstr ""

#: ../../library/hashlib.rst:276
msgid ""
"*password* and *salt* must be :term:`bytes-like objects <bytes-like "
"object>`.  Applications and libraries should limit *password* to a sensible "
"length (e.g. 1024).  *salt* should be about 16 or more bytes from a proper "
"source, e.g. :func:`os.urandom`."
msgstr ""

#: ../../library/hashlib.rst:281
msgid ""
"*n* is the CPU/Memory cost factor, *r* the block size, *p* parallelization "
"factor and *maxmem* limits memory (OpenSSL 1.1.0 defaults to 32 MiB). "
"*dklen* is the length of the derived key."
msgstr ""

#: ../../library/hashlib.rst:286
msgid ":ref:`Availability <availability>`: OpenSSL 1.1+."
msgstr ""

#: ../../library/hashlib.rst:291
msgid "BLAKE2"
msgstr ""

#: ../../library/hashlib.rst:298
msgid ""
"BLAKE2_ is a cryptographic hash function defined in :rfc:`7693` that comes "
"in two flavors:"
msgstr ""

#: ../../library/hashlib.rst:301
msgid ""
"**BLAKE2b**, optimized for 64-bit platforms and produces digests of any size"
" between 1 and 64 bytes,"
msgstr ""

#: ../../library/hashlib.rst:304
msgid ""
"**BLAKE2s**, optimized for 8- to 32-bit platforms and produces digests of "
"any size between 1 and 32 bytes."
msgstr ""

#: ../../library/hashlib.rst:307
msgid ""
"BLAKE2 supports **keyed mode** (a faster and simpler replacement for HMAC_),"
" **salted hashing**, **personalization**, and **tree hashing**."
msgstr ""

#: ../../library/hashlib.rst:310
msgid ""
"Hash objects from this module follow the API of standard library's "
":mod:`hashlib` objects."
msgstr ""

#: ../../library/hashlib.rst:315
msgid "Creating hash objects"
msgstr ""

#: ../../library/hashlib.rst:317
msgid "New hash objects are created by calling constructor functions:"
msgstr ""

#: ../../library/hashlib.rst:331
msgid ""
"These functions return the corresponding hash objects for calculating "
"BLAKE2b or BLAKE2s. They optionally take these general parameters:"
msgstr ""

#: ../../library/hashlib.rst:334
msgid ""
"*data*: initial chunk of data to hash, which must be :term:`bytes-like "
"object`.  It can be passed only as positional argument."
msgstr ""

#: ../../library/hashlib.rst:337
msgid "*digest_size*: size of output digest in bytes."
msgstr ""

#: ../../library/hashlib.rst:339
msgid ""
"*key*: key for keyed hashing (up to 64 bytes for BLAKE2b, up to 32 bytes for"
" BLAKE2s)."
msgstr ""

#: ../../library/hashlib.rst:342
msgid ""
"*salt*: salt for randomized hashing (up to 16 bytes for BLAKE2b, up to 8 "
"bytes for BLAKE2s)."
msgstr ""

#: ../../library/hashlib.rst:345
msgid ""
"*person*: personalization string (up to 16 bytes for BLAKE2b, up to 8 bytes "
"for BLAKE2s)."
msgstr ""

#: ../../library/hashlib.rst:348
msgid "The following table shows limits for general parameters (in bytes):"
msgstr ""

#: ../../library/hashlib.rst:351
msgid "Hash"
msgstr ""

#: ../../library/hashlib.rst:351
msgid "digest_size"
msgstr ""

#: ../../library/hashlib.rst:351
msgid "len(key)"
msgstr ""

#: ../../library/hashlib.rst:351
msgid "len(salt)"
msgstr ""

#: ../../library/hashlib.rst:351
msgid "len(person)"
msgstr ""

#: ../../library/hashlib.rst:353
msgid "BLAKE2b"
msgstr ""

#: ../../library/hashlib.rst:353 ../../library/hashlib.rst:353
msgid "64"
msgstr ""

#: ../../library/hashlib.rst:353 ../../library/hashlib.rst:353
msgid "16"
msgstr ""

#: ../../library/hashlib.rst:354
msgid "BLAKE2s"
msgstr ""

#: ../../library/hashlib.rst:354 ../../library/hashlib.rst:354
msgid "32"
msgstr ""

#: ../../library/hashlib.rst:354 ../../library/hashlib.rst:354
msgid "8"
msgstr ""

#: ../../library/hashlib.rst:359
msgid ""
"BLAKE2 specification defines constant lengths for salt and personalization "
"parameters, however, for convenience, this implementation accepts byte "
"strings of any size up to the specified length. If the length of the "
"parameter is less than specified, it is padded with zeros, thus, for "
"example, ``b'salt'`` and ``b'salt\\x00'`` is the same value. (This is not "
"the case for *key*.)"
msgstr ""

#: ../../library/hashlib.rst:366
msgid "These sizes are available as module `constants`_ described below."
msgstr ""

#: ../../library/hashlib.rst:368
msgid ""
"Constructor functions also accept the following tree hashing parameters:"
msgstr ""

#: ../../library/hashlib.rst:370
msgid "*fanout*: fanout (0 to 255, 0 if unlimited, 1 in sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:372
msgid ""
"*depth*: maximal depth of tree (1 to 255, 255 if unlimited, 1 in sequential "
"mode)."
msgstr ""

#: ../../library/hashlib.rst:375
msgid ""
"*leaf_size*: maximal byte length of leaf (0 to ``2**32-1``, 0 if unlimited "
"or in sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:378
msgid ""
"*node_offset*: node offset (0 to ``2**64-1`` for BLAKE2b, 0 to ``2**48-1`` "
"for BLAKE2s, 0 for the first, leftmost, leaf, or in sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:381
msgid ""
"*node_depth*: node depth (0 to 255, 0 for leaves, or in sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:383
msgid ""
"*inner_size*: inner digest size (0 to 64 for BLAKE2b, 0 to 32 for BLAKE2s, 0"
" in sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:386
msgid ""
"*last_node*: boolean indicating whether the processed node is the last one "
"(`False` for sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:392
msgid ""
"See section 2.10 in `BLAKE2 specification "
"<https://blake2.net/blake2_20130129.pdf>`_ for comprehensive review of tree "
"hashing."
msgstr ""

#: ../../library/hashlib.rst:398
msgid "Constants"
msgstr ""

#: ../../library/hashlib.rst:403
msgid "Salt length (maximum length accepted by constructors)."
msgstr ""

#: ../../library/hashlib.rst:409
msgid ""
"Personalization string length (maximum length accepted by constructors)."
msgstr ""

#: ../../library/hashlib.rst:415
msgid "Maximum key size."
msgstr ""

#: ../../library/hashlib.rst:421
msgid "Maximum digest size that the hash function can output."
msgstr ""

#: ../../library/hashlib.rst:425
msgid "Examples"
msgstr "例子"

#: ../../library/hashlib.rst:428
msgid "Simple hashing"
msgstr ""

#: ../../library/hashlib.rst:430
msgid ""
"To calculate hash of some data, you should first construct a hash object by "
"calling the appropriate constructor function (:func:`blake2b` or "
":func:`blake2s`), then update it with the data by calling :meth:`update` on "
"the object, and, finally, get the digest out of the object by calling "
":meth:`digest` (or :meth:`hexdigest` for hex-encoded string)."
msgstr ""

#: ../../library/hashlib.rst:443
msgid ""
"As a shortcut, you can pass the first chunk of data to update directly to "
"the constructor as the positional argument:"
msgstr ""

#: ../../library/hashlib.rst:450
msgid ""
"You can call :meth:`hash.update` as many times as you need to iteratively "
"update the hash:"
msgstr ""

#: ../../library/hashlib.rst:463
msgid "Using different digest sizes"
msgstr ""

#: ../../library/hashlib.rst:465
msgid ""
"BLAKE2 has configurable size of digests up to 64 bytes for BLAKE2b and up to"
" 32 bytes for BLAKE2s. For example, to replace SHA-1 with BLAKE2b without "
"changing the size of output, we can tell BLAKE2b to produce 20-byte digests:"
msgstr ""

#: ../../library/hashlib.rst:479
msgid ""
"Hash objects with different digest sizes have completely different outputs "
"(shorter hashes are *not* prefixes of longer hashes); BLAKE2b and BLAKE2s "
"produce different outputs even if the output length is the same:"
msgstr ""

#: ../../library/hashlib.rst:495
msgid "Keyed hashing"
msgstr ""

#: ../../library/hashlib.rst:497
msgid ""
"Keyed hashing can be used for authentication as a faster and simpler "
"replacement for `Hash-based message authentication code "
"<https://en.wikipedia.org/wiki/HMAC>`_ (HMAC). BLAKE2 can be securely used "
"in prefix-MAC mode thanks to the indifferentiability property inherited from"
" BLAKE."
msgstr ""

#: ../../library/hashlib.rst:503
msgid ""
"This example shows how to get a (hex-encoded) 128-bit authentication code "
"for message ``b'message data'`` with key ``b'pseudorandom key'``::"
msgstr ""

#: ../../library/hashlib.rst:513
msgid ""
"As a practical example, a web application can symmetrically sign cookies "
"sent to users and later verify them to make sure they weren't tampered "
"with::"
msgstr ""

#: ../../library/hashlib.rst:542
msgid ""
"Even though there's a native keyed hashing mode, BLAKE2 can, of course, be "
"used in HMAC construction with :mod:`hmac` module::"
msgstr ""

#: ../../library/hashlib.rst:553
msgid "Randomized hashing"
msgstr ""

#: ../../library/hashlib.rst:555
msgid ""
"By setting *salt* parameter users can introduce randomization to the hash "
"function. Randomized hashing is useful for protecting against collision "
"attacks on the hash function used in digital signatures."
msgstr ""

#: ../../library/hashlib.rst:559
msgid ""
"Randomized hashing is designed for situations where one party, the message "
"preparer, generates all or part of a message to be signed by a second party,"
" the message signer. If the message preparer is able to find cryptographic "
"hash function collisions (i.e., two messages producing the same hash value),"
" then they might prepare meaningful versions of the message that would "
"produce the same hash value and digital signature, but with different "
"results (e.g., transferring $1,000,000 to an account, rather than $10). "
"Cryptographic hash functions have been designed with collision resistance as"
" a major goal, but the current concentration on attacking cryptographic hash"
" functions may result in a given cryptographic hash function providing less "
"collision resistance than expected. Randomized hashing offers the signer "
"additional protection by reducing the likelihood that a preparer can "
"generate two or more messages that ultimately yield the same hash value "
"during the digital signature generation process --- even if it is practical "
"to find collisions for the hash function. However, the use of randomized "
"hashing may reduce the amount of security provided by a digital signature "
"when all portions of the message are prepared by the signer."
msgstr ""

#: ../../library/hashlib.rst:578
msgid ""
"(`NIST SP-800-106 \"Randomized Hashing for Digital Signatures\" "
"<https://csrc.nist.gov/publications/detail/sp/800-106/final>`_)"
msgstr ""

#: ../../library/hashlib.rst:581
msgid ""
"In BLAKE2 the salt is processed as a one-time input to the hash function "
"during initialization, rather than as an input to each compression function."
msgstr ""

#: ../../library/hashlib.rst:586
msgid ""
"*Salted hashing* (or just hashing) with BLAKE2 or any other general-purpose "
"cryptographic hash function, such as SHA-256, is not suitable for hashing "
"passwords.  See `BLAKE2 FAQ <https://blake2.net/#qa>`_ for more information."
msgstr ""

#: ../../library/hashlib.rst:609
msgid "Personalization"
msgstr ""

#: ../../library/hashlib.rst:611
msgid ""
"Sometimes it is useful to force hash function to produce different digests "
"for the same input for different purposes. Quoting the authors of the Skein "
"hash function:"
msgstr ""

#: ../../library/hashlib.rst:615
msgid ""
"We recommend that all application designers seriously consider doing this; "
"we have seen many protocols where a hash that is computed in one part of the"
" protocol can be used in an entirely different part because two hash "
"computations were done on similar or related data, and the attacker can "
"force the application to make the hash inputs the same. Personalizing each "
"hash function used in the protocol summarily stops this type of attack."
msgstr ""

#: ../../library/hashlib.rst:622
msgid ""
"(`The Skein Hash Function Family <http://www.skein-"
"hash.info/sites/default/files/skein1.3.pdf>`_, p. 21)"
msgstr ""

#: ../../library/hashlib.rst:626
msgid "BLAKE2 can be personalized by passing bytes to the *person* argument::"
msgstr ""

#: ../../library/hashlib.rst:640
msgid ""
"Personalization together with the keyed mode can also be used to derive "
"different keys from a single one."
msgstr ""

#: ../../library/hashlib.rst:654
msgid "Tree mode"
msgstr ""

#: ../../library/hashlib.rst:656
msgid "Here's an example of hashing a minimal tree with two leaf nodes::"
msgstr ""

#: ../../library/hashlib.rst:662
msgid ""
"This example uses 64-byte internal digests, and returns the 32-byte final "
"digest::"
msgstr ""

#: ../../library/hashlib.rst:692
msgid "Credits"
msgstr ""

#: ../../library/hashlib.rst:694
msgid ""
"BLAKE2_ was designed by *Jean-Philippe Aumasson*, *Samuel Neves*, *Zooko "
"Wilcox-O'Hearn*, and *Christian Winnerlein* based on SHA-3_ finalist BLAKE_ "
"created by *Jean-Philippe Aumasson*, *Luca Henzen*, *Willi Meier*, and "
"*Raphael C.-W. Phan*."
msgstr ""

#: ../../library/hashlib.rst:699
msgid ""
"It uses core algorithm from ChaCha_ cipher designed by *Daniel J.  "
"Bernstein*."
msgstr ""

#: ../../library/hashlib.rst:701
msgid ""
"The stdlib implementation is based on pyblake2_ module. It was written by "
"*Dmitry Chestnykh* based on C implementation written by *Samuel Neves*. The "
"documentation was copied from pyblake2_ and written by *Dmitry Chestnykh*."
msgstr ""

#: ../../library/hashlib.rst:705
msgid "The C code was partly rewritten for Python by *Christian Heimes*."
msgstr ""

#: ../../library/hashlib.rst:707
msgid ""
"The following public domain dedication applies for both C hash function "
"implementation, extension code, and this documentation:"
msgstr ""

#: ../../library/hashlib.rst:710
msgid ""
"To the extent possible under law, the author(s) have dedicated all copyright"
" and related and neighboring rights to this software to the public domain "
"worldwide. This software is distributed without any warranty."
msgstr ""

#: ../../library/hashlib.rst:714
msgid ""
"You should have received a copy of the CC0 Public Domain Dedication along "
"with this software. If not, see "
"https://creativecommons.org/publicdomain/zero/1.0/."
msgstr ""

#: ../../library/hashlib.rst:718
msgid ""
"The following people have helped with development or contributed their "
"changes to the project and the public domain according to the Creative "
"Commons Public Domain Dedication 1.0 Universal:"
msgstr ""

#: ../../library/hashlib.rst:722
msgid "*Alexandr Sokolovskiy*"
msgstr ""

#: ../../library/hashlib.rst:736
msgid "Module :mod:`hmac`"
msgstr ""

#: ../../library/hashlib.rst:736
msgid "A module to generate message authentication codes using hashes."
msgstr ""

#: ../../library/hashlib.rst:739
msgid "Module :mod:`base64`"
msgstr ""

#: ../../library/hashlib.rst:739
msgid "Another way to encode binary hashes for non-binary environments."
msgstr ""

#: ../../library/hashlib.rst:742
msgid "https://blake2.net"
msgstr ""

#: ../../library/hashlib.rst:742
msgid "Official BLAKE2 website."
msgstr ""

#: ../../library/hashlib.rst:745
msgid ""
"https://csrc.nist.gov/csrc/media/publications/fips/180/2/archive/2002-08-01/documents/fips180-2.pdf"
msgstr ""

#: ../../library/hashlib.rst:745
msgid "The FIPS 180-2 publication on Secure Hash Algorithms."
msgstr ""

#: ../../library/hashlib.rst:749
msgid ""
"https://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptographic_hash_algorithms"
msgstr ""

#: ../../library/hashlib.rst:748
msgid ""
"Wikipedia article with information on which algorithms have known issues and"
" what that means regarding their use."
msgstr ""

#: ../../library/hashlib.rst:751
msgid "https://www.ietf.org/rfc/rfc2898.txt"
msgstr ""

#: ../../library/hashlib.rst:752
msgid "PKCS #5: Password-Based Cryptography Specification Version 2.0"
msgstr ""
