# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/gettext.rst:2
msgid ":mod:`gettext` --- Multilingual internationalization services"
msgstr ""

#: ../../library/gettext.rst:10
msgid "**Source code:** :source:`Lib/gettext.py`"
msgstr ""

#: ../../library/gettext.rst:14
msgid ""
"The :mod:`gettext` module provides internationalization (I18N) and "
"localization (L10N) services for your Python modules and applications. It "
"supports both the GNU :program:`gettext` message catalog API and a higher "
"level, class-based API that may be more appropriate for Python files.  The "
"interface described below allows you to write your module and application "
"messages in one natural language, and provide a catalog of translated "
"messages for running under different natural languages."
msgstr ""

#: ../../library/gettext.rst:22
msgid ""
"Some hints on localizing your Python modules and applications are also "
"given."
msgstr ""

#: ../../library/gettext.rst:26
msgid "GNU :program:`gettext` API"
msgstr ""

#: ../../library/gettext.rst:28
msgid ""
"The :mod:`gettext` module defines the following API, which is very similar "
"to the GNU :program:`gettext` API.  If you use this API you will affect the "
"translation of your entire application globally.  Often this is what you "
"want if your application is monolingual, with the choice of language "
"dependent on the locale of your user.  If you are localizing a Python "
"module, or if your application needs to switch languages on the fly, you "
"probably want to use the class-based API instead."
msgstr ""

#: ../../library/gettext.rst:39
msgid ""
"Bind the *domain* to the locale directory *localedir*.  More concretely, "
":mod:`gettext` will look for binary :file:`.mo` files for the given domain "
"using the path (on Unix): "
":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`, where *language* is "
"searched for in the environment variables :envvar:`LANGUAGE`, "
":envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and :envvar:`LANG` respectively."
msgstr ""

#: ../../library/gettext.rst:45
msgid ""
"If *localedir* is omitted or ``None``, then the current binding for *domain*"
" is returned. [#]_"
msgstr ""

#: ../../library/gettext.rst:51
msgid ""
"Bind the *domain* to *codeset*, changing the encoding of byte strings "
"returned by the :func:`lgettext`, :func:`ldgettext`, :func:`lngettext` and "
":func:`ldngettext` functions. If *codeset* is omitted, then the current "
"binding is returned."
msgstr ""

#: ../../library/gettext.rst:61
msgid ""
"Change or query the current global domain.  If *domain* is ``None``, then "
"the current global domain is returned, otherwise the global domain is set to"
" *domain*, which is returned."
msgstr ""

#: ../../library/gettext.rst:69
msgid ""
"Return the localized translation of *message*, based on the current global "
"domain, language, and locale directory.  This function is usually aliased as"
" :func:`_` in the local namespace (see examples below)."
msgstr ""

#: ../../library/gettext.rst:76
msgid ""
"Like :func:`.gettext`, but look the message up in the specified *domain*."
msgstr ""

#: ../../library/gettext.rst:81
msgid ""
"Like :func:`.gettext`, but consider plural forms. If a translation is found,"
" apply the plural formula to *n*, and return the resulting message (some "
"languages have more than two plural forms). If no translation is found, "
"return *singular* if *n* is 1; return *plural* otherwise."
msgstr ""

#: ../../library/gettext.rst:86
msgid ""
"The Plural formula is taken from the catalog header. It is a C or Python "
"expression that has a free variable *n*; the expression evaluates to the "
"index of the plural in the catalog. See `the GNU gettext documentation "
"<https://www.gnu.org/software/gettext/manual/gettext.html>`__ for the "
"precise syntax to be used in :file:`.po` files and the formulas for a "
"variety of languages."
msgstr ""

#: ../../library/gettext.rst:96
msgid ""
"Like :func:`ngettext`, but look the message up in the specified *domain*."
msgstr ""

#: ../../library/gettext.rst:104
msgid ""
"Similar to the corresponding functions without the ``p`` in the prefix (that"
" is, :func:`gettext`, :func:`dgettext`, :func:`ngettext`, "
":func:`dngettext`), but the translation is restricted to the given message "
"*context*."
msgstr ""

#: ../../library/gettext.rst:116
msgid ""
"Equivalent to the corresponding functions without the ``l`` prefix "
"(:func:`.gettext`, :func:`dgettext`, :func:`ngettext` and "
":func:`dngettext`), but the translation is returned as a byte string encoded"
" in the preferred system encoding if no other encoding was explicitly set "
"with :func:`bind_textdomain_codeset`."
msgstr ""

#: ../../library/gettext.rst:124
msgid ""
"These functions should be avoided in Python 3, because they return encoded "
"bytes.  It's much better to use alternatives which return Unicode strings "
"instead, since most Python applications will want to manipulate human "
"readable text as strings instead of bytes.  Further, it's possible that you "
"may get unexpected Unicode-related exceptions if there are encoding problems"
" with the translated strings."
msgstr ""

#: ../../library/gettext.rst:134
msgid ""
"Note that GNU :program:`gettext` also defines a :func:`dcgettext` method, "
"but this was deemed not useful and so it is currently unimplemented."
msgstr ""

#: ../../library/gettext.rst:137
msgid "Here's an example of typical usage for this API::"
msgstr ""

#: ../../library/gettext.rst:148
msgid "Class-based API"
msgstr ""

#: ../../library/gettext.rst:150
msgid ""
"The class-based API of the :mod:`gettext` module gives you more flexibility "
"and greater convenience than the GNU :program:`gettext` API.  It is the "
"recommended way of localizing your Python applications and modules.  "
":mod:`!gettext` defines a :class:`GNUTranslations` class which implements "
"the parsing of GNU :file:`.mo` format files, and has methods for returning "
"strings. Instances of this class can also install themselves in the built-in"
" namespace as the function :func:`_`."
msgstr ""

#: ../../library/gettext.rst:160
msgid ""
"This function implements the standard :file:`.mo` file search algorithm.  It"
" takes a *domain*, identical to what :func:`textdomain` takes.  Optional "
"*localedir* is as in :func:`bindtextdomain`. Optional *languages* is a list "
"of strings, where each string is a language code."
msgstr ""

#: ../../library/gettext.rst:165
msgid ""
"If *localedir* is not given, then the default system locale directory is "
"used. [#]_  If *languages* is not given, then the following environment "
"variables are searched: :envvar:`LANGUAGE`, :envvar:`LC_ALL`, "
":envvar:`LC_MESSAGES`, and :envvar:`LANG`.  The first one returning a non-"
"empty value is used for the *languages* variable. The environment variables "
"should contain a colon separated list of languages, which will be split on "
"the colon to produce the expected list of language code strings."
msgstr ""

#: ../../library/gettext.rst:173
msgid ""
":func:`find` then expands and normalizes the languages, and then iterates "
"through them, searching for an existing file built of these components:"
msgstr ""

#: ../../library/gettext.rst:176
msgid ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"
msgstr ""

#: ../../library/gettext.rst:178
msgid ""
"The first such file name that exists is returned by :func:`find`. If no such"
" file is found, then ``None`` is returned. If *all* is given, it returns a "
"list of all file names, in the order in which they appear in the languages "
"list or the environment variables."
msgstr ""

#: ../../library/gettext.rst:186
msgid ""
"Return a :class:`*Translations` instance based on the *domain*, *localedir*,"
" and *languages*, which are first passed to :func:`find` to get a list of "
"the associated :file:`.mo` file paths.  Instances with identical :file:`.mo`"
" file names are cached.  The actual class instantiated is *class_* if "
"provided, otherwise :class:`GNUTranslations`.  The class's constructor must "
"take a single :term:`file object` argument.  If provided, *codeset* will "
"change the charset used to encode translated strings in the "
":meth:`~NullTranslations.lgettext` and :meth:`~NullTranslations.lngettext` "
"methods."
msgstr ""

#: ../../library/gettext.rst:196
msgid ""
"If multiple files are found, later files are used as fallbacks for earlier "
"ones. To allow setting the fallback, :func:`copy.copy` is used to clone each"
" translation object from the cache; the actual instance data is still shared"
" with the cache."
msgstr ""

#: ../../library/gettext.rst:201
msgid ""
"If no :file:`.mo` file is found, this function raises :exc:`OSError` if "
"*fallback* is false (which is the default), and returns a "
":class:`NullTranslations` instance if *fallback* is true."
msgstr ""

#: ../../library/gettext.rst:205
msgid ":exc:`IOError` used to be raised instead of :exc:`OSError`."
msgstr ""

#: ../../library/gettext.rst:209 ../../library/gettext.rst:232
msgid "The *codeset* parameter."
msgstr ""

#: ../../library/gettext.rst:214
msgid ""
"This installs the function :func:`_` in Python's builtins namespace, based "
"on *domain*, *localedir*, and *codeset* which are passed to the function "
":func:`translation`."
msgstr ""

#: ../../library/gettext.rst:218
msgid ""
"For the *names* parameter, please see the description of the translation "
"object's :meth:`~NullTranslations.install` method."
msgstr ""

#: ../../library/gettext.rst:221
msgid ""
"As seen below, you usually mark the strings in your application that are "
"candidates for translation, by wrapping them in a call to the :func:`_` "
"function, like this::"
msgstr ""

#: ../../library/gettext.rst:227
msgid ""
"For convenience, you want the :func:`_` function to be installed in Python's"
" builtins namespace, so it is easily accessible in all modules of your "
"application."
msgstr ""

#: ../../library/gettext.rst:236
msgid "The :class:`NullTranslations` class"
msgstr ""

#: ../../library/gettext.rst:238
msgid ""
"Translation classes are what actually implement the translation of original "
"source file message strings to translated message strings. The base class "
"used by all translation classes is :class:`NullTranslations`; this provides "
"the basic interface you can use to write your own specialized translation "
"classes.  Here are the methods of :class:`!NullTranslations`:"
msgstr ""

#: ../../library/gettext.rst:247
msgid ""
"Takes an optional :term:`file object` *fp*, which is ignored by the base "
"class. Initializes \"protected\" instance variables *_info* and *_charset* "
"which are set by derived classes, as well as *_fallback*, which is set "
"through :meth:`add_fallback`.  It then calls ``self._parse(fp)`` if *fp* is "
"not ``None``."
msgstr ""

#: ../../library/gettext.rst:255
msgid ""
"No-op in the base class, this method takes file object *fp*, and reads the "
"data from the file, initializing its message catalog.  If you have an "
"unsupported message catalog file format, you should override this method to "
"parse your format."
msgstr ""

#: ../../library/gettext.rst:263
msgid ""
"Add *fallback* as the fallback object for the current translation object. A "
"translation object should consult the fallback if it cannot provide a "
"translation for a given message."
msgstr ""

#: ../../library/gettext.rst:270
msgid ""
"If a fallback has been set, forward :meth:`!gettext` to the fallback. "
"Otherwise, return *message*.  Overridden in derived classes."
msgstr ""

#: ../../library/gettext.rst:276
msgid ""
"If a fallback has been set, forward :meth:`!ngettext` to the fallback. "
"Otherwise, return *singular* if *n* is 1; return *plural* otherwise. "
"Overridden in derived classes."
msgstr ""

#: ../../library/gettext.rst:283
msgid ""
"If a fallback has been set, forward :meth:`pgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""

#: ../../library/gettext.rst:291
msgid ""
"If a fallback has been set, forward :meth:`npgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""

#: ../../library/gettext.rst:300
msgid ""
"Equivalent to :meth:`.gettext` and :meth:`.ngettext`, but the translation is"
" returned as a byte string encoded in the preferred system encoding if no "
"encoding was explicitly set with :meth:`set_output_charset`. Overridden in "
"derived classes."
msgstr ""

#: ../../library/gettext.rst:307 ../../library/gettext.rst:463
msgid ""
"These methods should be avoided in Python 3.  See the warning for the "
":func:`lgettext` function."
msgstr ""

#: ../../library/gettext.rst:315
msgid ""
"Return the \"protected\" :attr:`_info` variable, a dictionary containing the"
" metadata found in the message catalog file."
msgstr ""

#: ../../library/gettext.rst:321
msgid "Return the encoding of the message catalog file."
msgstr ""

#: ../../library/gettext.rst:326
msgid ""
"Return the encoding used to return translated messages in :meth:`.lgettext` "
"and :meth:`.lngettext`."
msgstr ""

#: ../../library/gettext.rst:334
msgid "Change the encoding used to return translated messages."
msgstr ""

#: ../../library/gettext.rst:341
msgid ""
"This method installs :meth:`.gettext` into the built-in namespace, binding "
"it to ``_``."
msgstr ""

#: ../../library/gettext.rst:344
msgid ""
"If the *names* parameter is given, it must be a sequence containing the "
"names of functions you want to install in the builtins namespace in addition"
" to :func:`_`.  Supported names are ``'gettext'``, ``'ngettext'``, "
"``'pgettext'``, ``'npgettext'``, ``'lgettext'``, and ``'lngettext'``."
msgstr ""

#: ../../library/gettext.rst:349
msgid ""
"Note that this is only one way, albeit the most convenient way, to make the "
":func:`_` function available to your application.  Because it affects the "
"entire application globally, and specifically the built-in namespace, "
"localized modules should never install :func:`_`. Instead, they should use "
"this code to make :func:`_` available to their module::"
msgstr ""

#: ../../library/gettext.rst:359
msgid ""
"This puts :func:`_` only in the module's global namespace and so only "
"affects calls within this module."
msgstr ""

#: ../../library/gettext.rst:362
msgid "Added ``'pgettext'`` and ``'npgettext'``."
msgstr ""

#: ../../library/gettext.rst:367
msgid "The :class:`GNUTranslations` class"
msgstr ""

#: ../../library/gettext.rst:369
msgid ""
"The :mod:`gettext` module provides one additional class derived from "
":class:`NullTranslations`: :class:`GNUTranslations`.  This class overrides "
":meth:`_parse` to enable reading GNU :program:`gettext` format :file:`.mo` "
"files in both big-endian and little-endian format."
msgstr ""

#: ../../library/gettext.rst:374
msgid ""
":class:`GNUTranslations` parses optional metadata out of the translation "
"catalog. It is convention with GNU :program:`gettext` to include metadata as"
" the translation for the empty string. This metadata is in :rfc:`822`\\ "
"-style ``key: value`` pairs, and should contain the ``Project-Id-Version`` "
"key.  If the key ``Content-Type`` is found, then the ``charset`` property is"
" used to initialize the \"protected\" :attr:`_charset` instance variable, "
"defaulting to ``None`` if not found.  If the charset encoding is specified, "
"then all message ids and message strings read from the catalog are converted"
" to Unicode using this encoding, else ASCII is assumed."
msgstr ""

#: ../../library/gettext.rst:384
msgid ""
"Since message ids are read as Unicode strings too, all :meth:`*gettext` "
"methods will assume message ids as Unicode strings, not byte strings."
msgstr ""

#: ../../library/gettext.rst:387
msgid ""
"The entire set of key/value pairs are placed into a dictionary and set as "
"the \"protected\" :attr:`_info` instance variable."
msgstr ""

#: ../../library/gettext.rst:390
msgid ""
"If the :file:`.mo` file's magic number is invalid, the major version number "
"is unexpected, or if other problems occur while reading the file, "
"instantiating a :class:`GNUTranslations` class can raise :exc:`OSError`."
msgstr ""

#: ../../library/gettext.rst:396
msgid ""
"The following methods are overridden from the base class implementation:"
msgstr ""

#: ../../library/gettext.rst:400
msgid ""
"Look up the *message* id in the catalog and return the corresponding message"
" string, as a Unicode string.  If there is no entry in the catalog for the "
"*message* id, and a fallback has been set, the look up is forwarded to the "
"fallback's :meth:`~NullTranslations.gettext` method.  Otherwise, the "
"*message* id is returned."
msgstr ""

#: ../../library/gettext.rst:409
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message"
" id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use.  The returned message string is a Unicode string."
msgstr ""

#: ../../library/gettext.rst:413
msgid ""
"If the message id is not found in the catalog, and a fallback is specified, "
"the request is forwarded to the fallback's "
":meth:`~NullTranslations.ngettext` method.  Otherwise, when *n* is 1 "
"*singular* is returned, and *plural* is returned in all other cases."
msgstr ""

#: ../../library/gettext.rst:418
msgid "Here is an example::"
msgstr "例如："

#: ../../library/gettext.rst:430
msgid ""
"Look up the *context* and *message* id in the catalog and return the "
"corresponding message string, as a Unicode string.  If there is no entry in "
"the catalog for the *message* id and *context*, and a fallback has been set,"
" the look up is forwarded to the fallback's :meth:`pgettext` method.  "
"Otherwise, the *message* id is returned."
msgstr ""

#: ../../library/gettext.rst:441
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message"
" id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use."
msgstr ""

#: ../../library/gettext.rst:445
msgid ""
"If the message id for *context* is not found in the catalog, and a fallback "
"is specified, the request is forwarded to the fallback's :meth:`npgettext` "
"method.  Otherwise, when *n* is 1 *singular* is returned, and *plural* is "
"returned in all other cases."
msgstr ""

#: ../../library/gettext.rst:456
msgid ""
"Equivalent to :meth:`.gettext` and :meth:`.ngettext`, but the translation is"
" returned as a byte string encoded in the preferred system encoding if no "
"encoding  was explicitly set with "
":meth:`~NullTranslations.set_output_charset`."
msgstr ""

#: ../../library/gettext.rst:470
msgid "Solaris message catalog support"
msgstr ""

#: ../../library/gettext.rst:472
msgid ""
"The Solaris operating system defines its own binary :file:`.mo` file format,"
" but since no documentation can be found on this format, it is not supported"
" at this time."
msgstr ""

#: ../../library/gettext.rst:478
msgid "The Catalog constructor"
msgstr ""

#: ../../library/gettext.rst:482
msgid ""
"GNOME uses a version of the :mod:`gettext` module by James Henstridge, but "
"this version has a slightly different API.  Its documented usage was::"
msgstr ""

#: ../../library/gettext.rst:490
msgid ""
"For compatibility with this older module, the function :func:`Catalog` is an"
" alias for the :func:`translation` function described above."
msgstr ""

#: ../../library/gettext.rst:493
msgid ""
"One difference between this module and Henstridge's: his catalog objects "
"supported access through a mapping API, but this appears to be unused and so"
" is not currently supported."
msgstr ""

#: ../../library/gettext.rst:499
msgid "Internationalizing your programs and modules"
msgstr ""

#: ../../library/gettext.rst:501
msgid ""
"Internationalization (I18N) refers to the operation by which a program is "
"made aware of multiple languages.  Localization (L10N) refers to the "
"adaptation of your program, once internationalized, to the local language "
"and cultural habits. In order to provide multilingual messages for your "
"Python programs, you need to take the following steps:"
msgstr ""

#: ../../library/gettext.rst:507
msgid ""
"prepare your program or module by specially marking translatable strings"
msgstr ""

#: ../../library/gettext.rst:509
msgid ""
"run a suite of tools over your marked files to generate raw messages "
"catalogs"
msgstr ""

#: ../../library/gettext.rst:511
msgid "create language-specific translations of the message catalogs"
msgstr ""

#: ../../library/gettext.rst:513
msgid ""
"use the :mod:`gettext` module so that message strings are properly "
"translated"
msgstr ""

#: ../../library/gettext.rst:515
msgid ""
"In order to prepare your code for I18N, you need to look at all the strings "
"in your files.  Any string that needs to be translated should be marked by "
"wrapping it in ``_('...')`` --- that is, a call to the function :func:`_`.  "
"For example::"
msgstr ""

#: ../../library/gettext.rst:524
msgid ""
"In this example, the string ``'writing a log message'`` is marked as a "
"candidate for translation, while the strings ``'mylog.txt'`` and ``'w'`` are"
" not."
msgstr ""

#: ../../library/gettext.rst:527
msgid ""
"There are a few tools to extract the strings meant for translation. The "
"original GNU :program:`gettext` only supported C or C++ source code but its "
"extended version :program:`xgettext` scans code written in a number of "
"languages, including Python, to find strings marked as translatable.  `Babel"
" <http://babel.pocoo.org/>`__ is a Python internationalization library that "
"includes a :file:`pybabel` script to extract and compile message catalogs.  "
"François Pinard's program called :program:`xpot` does a similar job and is "
"available as part of his `po-utils package <https://github.com/pinard/po-"
"utils>`__."
msgstr ""

#: ../../library/gettext.rst:537
msgid ""
"(Python also includes pure-Python versions of these programs, called "
":program:`pygettext.py` and :program:`msgfmt.py`; some Python distributions "
"will install them for you.  :program:`pygettext.py` is similar to "
":program:`xgettext`, but only understands Python source code and cannot "
"handle other programming languages such as C or C++. :program:`pygettext.py`"
" supports a command-line interface similar to :program:`xgettext`; for "
"details on its use, run ``pygettext.py --help``.  :program:`msgfmt.py` is "
"binary compatible with GNU :program:`msgfmt`.  With these two programs, you "
"may not need the GNU :program:`gettext` package to internationalize your "
"Python applications.)"
msgstr ""

#: ../../library/gettext.rst:549
msgid ""
":program:`xgettext`, :program:`pygettext`, and similar tools generate "
":file:`.po` files that are message catalogs.  They are structured human-"
"readable files that contain every marked string in the source code, along "
"with a placeholder for the translated versions of these strings."
msgstr ""

#: ../../library/gettext.rst:555
msgid ""
"Copies of these :file:`.po` files are then handed over to the individual "
"human translators who write translations for every supported natural "
"language.  They send back the completed language-specific versions as a "
":file:`<language-name>.po` file that's compiled into a machine-readable "
":file:`.mo` binary catalog file using the :program:`msgfmt` program.  The "
":file:`.mo` files are used by the :mod:`gettext` module for the actual "
"translation processing at run-time."
msgstr ""

#: ../../library/gettext.rst:564
msgid ""
"How you use the :mod:`gettext` module in your code depends on whether you "
"are internationalizing a single module or your entire application. The next "
"two sections will discuss each case."
msgstr ""

#: ../../library/gettext.rst:570
msgid "Localizing your module"
msgstr ""

#: ../../library/gettext.rst:572
msgid ""
"If you are localizing your module, you must take care not to make global "
"changes, e.g. to the built-in namespace. You should not use the GNU "
":program:`gettext` API but instead the class-based API."
msgstr ""

#: ../../library/gettext.rst:576
msgid ""
"Let's say your module is called \"spam\" and the module's various natural "
"language translation :file:`.mo` files reside in :file:`/usr/share/locale` "
"in GNU :program:`gettext` format.  Here's what you would put at the top of "
"your module::"
msgstr ""

#: ../../library/gettext.rst:587
msgid "Localizing your application"
msgstr ""

#: ../../library/gettext.rst:589
msgid ""
"If you are localizing your application, you can install the :func:`_` "
"function globally into the built-in namespace, usually in the main driver "
"file of your application.  This will let all your application-specific files"
" just use ``_('...')`` without having to explicitly install it in each file."
msgstr ""

#: ../../library/gettext.rst:594
msgid ""
"In the simple case then, you need only add the following bit of code to the "
"main driver file of your application::"
msgstr ""

#: ../../library/gettext.rst:600
msgid ""
"If you need to set the locale directory, you can pass it into the "
":func:`install` function::"
msgstr ""

#: ../../library/gettext.rst:608
msgid "Changing languages on the fly"
msgstr ""

#: ../../library/gettext.rst:610
msgid ""
"If your program needs to support many languages at the same time, you may "
"want to create multiple translation instances and then switch between them "
"explicitly, like so::"
msgstr ""

#: ../../library/gettext.rst:631
msgid "Deferred translations"
msgstr ""

#: ../../library/gettext.rst:633
msgid ""
"In most coding situations, strings are translated where they are coded. "
"Occasionally however, you need to mark strings for translation, but defer "
"actual translation until later.  A classic example is::"
msgstr ""

#: ../../library/gettext.rst:646
msgid ""
"Here, you want to mark the strings in the ``animals`` list as being "
"translatable, but you don't actually want to translate them until they are "
"printed."
msgstr ""

#: ../../library/gettext.rst:650
msgid "Here is one way you can handle this situation::"
msgstr ""

#: ../../library/gettext.rst:666
msgid ""
"This works because the dummy definition of :func:`_` simply returns the "
"string unchanged.  And this dummy definition will temporarily override any "
"definition of :func:`_` in the built-in namespace (until the :keyword:`del` "
"command). Take care, though if you have a previous definition of :func:`_` "
"in the local namespace."
msgstr ""

#: ../../library/gettext.rst:672
msgid ""
"Note that the second use of :func:`_` will not identify \"a\" as being "
"translatable to the :program:`gettext` program, because the parameter is not"
" a string literal."
msgstr ""

#: ../../library/gettext.rst:676
msgid "Another way to handle this is with the following example::"
msgstr ""

#: ../../library/gettext.rst:690
msgid ""
"In this case, you are marking translatable strings with the function "
":func:`N_`, which won't conflict with any definition of :func:`_`. However, "
"you will need to teach your message extraction program to look for "
"translatable strings marked with :func:`N_`. :program:`xgettext`, "
":program:`pygettext`, ``pybabel extract``, and :program:`xpot` all support "
"this through the use of the :option:`!-k` command-line switch. The choice of"
" :func:`N_` here is totally arbitrary; it could have just as easily been "
":func:`MarkThisStringForTranslation`."
msgstr ""

#: ../../library/gettext.rst:701
msgid "Acknowledgements"
msgstr ""

#: ../../library/gettext.rst:703
msgid ""
"The following people contributed code, feedback, design suggestions, "
"previous implementations, and valuable experience to the creation of this "
"module:"
msgstr ""

#: ../../library/gettext.rst:706
msgid "Peter Funk"
msgstr ""

#: ../../library/gettext.rst:708
msgid "James Henstridge"
msgstr ""

#: ../../library/gettext.rst:710
msgid "Juan David Ibáñez Palomar"
msgstr ""

#: ../../library/gettext.rst:712
msgid "Marc-André Lemburg"
msgstr ""

#: ../../library/gettext.rst:714
msgid "Martin von Löwis"
msgstr ""

#: ../../library/gettext.rst:716
msgid "François Pinard"
msgstr ""

#: ../../library/gettext.rst:718
msgid "Barry Warsaw"
msgstr ""

#: ../../library/gettext.rst:720
msgid "Gustavo Niemeyer"
msgstr ""

#: ../../library/gettext.rst:723
msgid "Footnotes"
msgstr "备注"

#: ../../library/gettext.rst:724
msgid ""
"The default locale directory is system dependent; for example, on RedHat "
"Linux it is :file:`/usr/share/locale`, but on Solaris it is "
":file:`/usr/lib/locale`. The :mod:`gettext` module does not try to support "
"these system dependent defaults; instead its default is "
":file:`{sys.base_prefix}/share/locale` (see :data:`sys.base_prefix`). For "
"this reason, it is always best to call :func:`bindtextdomain` with an "
"explicit absolute path at the start of your application."
msgstr ""

#: ../../library/gettext.rst:732
msgid "See the footnote for :func:`bindtextdomain` above."
msgstr ""
