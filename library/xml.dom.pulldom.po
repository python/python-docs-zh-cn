# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 15:02+0000\n"
"PO-Revision-Date: 2025-05-08 05:10+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.dom.pulldom.rst:2
msgid ":mod:`!xml.dom.pulldom` --- Support for building partial DOM trees"
msgstr ":mod:`!xml.dom.pulldom` --- 对构建部分 DOM 树的支持"

#: ../../library/xml.dom.pulldom.rst:9
msgid "**Source code:** :source:`Lib/xml/dom/pulldom.py`"
msgstr "**源代码:** :source:`Lib/xml/dom/pulldom.py`"

#: ../../library/xml.dom.pulldom.rst:13
msgid ""
"The :mod:`xml.dom.pulldom` module provides a \"pull parser\" which can also "
"be asked to produce DOM-accessible fragments of the document where "
"necessary. The basic concept involves pulling \"events\" from a stream of "
"incoming XML and processing them. In contrast to SAX which also employs an "
"event-driven processing model together with callbacks, the user of a pull "
"parser is responsible for explicitly pulling events from the stream, looping"
" over those events until either processing is finished or an error condition"
" occurs."
msgstr ""
":mod:`xml.dom.pulldom` 模块提供了一个“拉取解析器”，它能在必要时被用于产生文件的可访问 DOM 的片段。 其基本概念包括从输入的"
" XML 流拉取“事件”并处理它们。 与同样地同时应用了事件驱动处理模型加回调函数的 SAX "
"不同，拉取解析器的用户要负责显式地从流拉取事件，并循环遍历这些事件直到处理结束或者发生了错误条件。"

#: ../../library/xml.dom.pulldom.rst:24
msgid ""
"If you need to parse untrusted or unauthenticated data, see :ref:`xml-"
"security`."
msgstr "如果你需要解析不受信任或未经身份验证的数据，请参阅 :ref:`xml-security`。"

#: ../../library/xml.dom.pulldom.rst:29
msgid ""
"The SAX parser no longer processes general external entities by default to "
"increase security by default. To enable processing of external entities, "
"pass a custom parser instance in::"
msgstr "SAX 解析器默认不再处理一般外部实体以提升在默认情况下的安全性。 要启用外部实体处理，请传入一个自定义的解析器实例::"

#: ../../library/xml.dom.pulldom.rst:33
msgid ""
"from xml.dom.pulldom import parse\n"
"from xml.sax import make_parser\n"
"from xml.sax.handler import feature_external_ges\n"
"\n"
"parser = make_parser()\n"
"parser.setFeature(feature_external_ges, True)\n"
"parse(filename, parser=parser)"
msgstr ""
"from xml.dom.pulldom import parse\n"
"from xml.sax import make_parser\n"
"from xml.sax.handler import feature_external_ges\n"
"\n"
"parser = make_parser()\n"
"parser.setFeature(feature_external_ges, True)\n"
"parse(filename, parser=parser)"

#: ../../library/xml.dom.pulldom.rst:42
msgid "Example::"
msgstr "示例::"

#: ../../library/xml.dom.pulldom.rst:44
msgid ""
"from xml.dom import pulldom\n"
"\n"
"doc = pulldom.parse('sales_items.xml')\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'item':\n"
"        if int(node.getAttribute('price')) > 50:\n"
"            doc.expandNode(node)\n"
"            print(node.toxml())"
msgstr ""
"from xml.dom import pulldom\n"
"\n"
"doc = pulldom.parse('sales_items.xml')\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'item':\n"
"        if int(node.getAttribute('price')) > 50:\n"
"            doc.expandNode(node)\n"
"            print(node.toxml())"

#: ../../library/xml.dom.pulldom.rst:53
msgid "``event`` is a constant and can be one of:"
msgstr "``event`` 是一个常量，可以取下列值之一:"

#: ../../library/xml.dom.pulldom.rst:55
msgid ":data:`START_ELEMENT`"
msgstr ":data:`START_ELEMENT`"

#: ../../library/xml.dom.pulldom.rst:56
msgid ":data:`END_ELEMENT`"
msgstr ":data:`END_ELEMENT`"

#: ../../library/xml.dom.pulldom.rst:57
msgid ":data:`COMMENT`"
msgstr ":data:`COMMENT`"

#: ../../library/xml.dom.pulldom.rst:58
msgid ":data:`START_DOCUMENT`"
msgstr ":data:`START_DOCUMENT`"

#: ../../library/xml.dom.pulldom.rst:59
msgid ":data:`END_DOCUMENT`"
msgstr ":data:`END_DOCUMENT`"

#: ../../library/xml.dom.pulldom.rst:60
msgid ":data:`CHARACTERS`"
msgstr ":data:`CHARACTERS`"

#: ../../library/xml.dom.pulldom.rst:61
msgid ":data:`PROCESSING_INSTRUCTION`"
msgstr ":data:`PROCESSING_INSTRUCTION`"

#: ../../library/xml.dom.pulldom.rst:62
msgid ":data:`IGNORABLE_WHITESPACE`"
msgstr ":data:`IGNORABLE_WHITESPACE`"

#: ../../library/xml.dom.pulldom.rst:64
msgid ""
"``node`` is an object of type :class:`xml.dom.minidom.Document`, "
":class:`xml.dom.minidom.Element` or :class:`xml.dom.minidom.Text`."
msgstr ""
"``node`` 是一个 :class:`xml.dom.minidom.Document`, "
":class:`xml.dom.minidom.Element` 或 :class:`xml.dom.minidom.Text` 类型的对象。"

#: ../../library/xml.dom.pulldom.rst:67
msgid ""
"Since the document is treated as a \"flat\" stream of events, the document "
"\"tree\" is implicitly traversed and the desired elements are found "
"regardless of their depth in the tree. In other words, one does not need to "
"consider hierarchical issues such as recursive searching of the document "
"nodes, although if the context of elements were important, one would either "
"need to maintain some context-related state (i.e. remembering where one is "
"in the document at any given point) or to make use of the "
":func:`DOMEventStream.expandNode` method and switch to DOM-related "
"processing."
msgstr ""
"由于文档是被当作“展平”的事件流来处理的，文档“树”会被隐式地遍历并且无论所需元素在树中的深度如何都会被找到。 "
"换句话说，不需要考虑层级问题，例如文档节点的递归搜索等，但是如果元素的内容很重要，则有必要保留一些上下文相关的状态（例如记住任意给定点在文档中的位置）或者使用"
" :func:`DOMEventStream.expandNode` 方法并切换到 DOM 相关的处理过程。"

#: ../../library/xml.dom.pulldom.rst:79 ../../library/xml.dom.pulldom.rst:84
msgid "Subclass of :class:`xml.sax.handler.ContentHandler`."
msgstr ":class:`xml.sax.handler.ContentHandler` 的子类。"

#: ../../library/xml.dom.pulldom.rst:89
msgid ""
"Return a :class:`DOMEventStream` from the given input. *stream_or_string* "
"may be either a file name, or a file-like object. *parser*, if given, must "
"be an :class:`~xml.sax.xmlreader.XMLReader` object. This function will "
"change the document handler of the parser and activate namespace support; "
"other parser configuration (like setting an entity resolver) must have been "
"done in advance."
msgstr ""
"基于给定的输入返回一个 :class:`DOMEventStream`。 *stream_or_string* 可以是一个文件名，或是一个文件型对象。 "
"*parser* 如果给出，则必须是一个 :class:`~xml.sax.xmlreader.XMLReader` 对象。 "
"此函数将改变解析器的文档处理程序并激活命名空间支持；其他解析器配置（例如设置实体解析器）必须在之前已完成。"

#: ../../library/xml.dom.pulldom.rst:96
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr "如果你将 XML 存放为字符串形式，则可以改用 :func:`parseString` 函数:"

#: ../../library/xml.dom.pulldom.rst:100
msgid ""
"Return a :class:`DOMEventStream` that represents the (Unicode) *string*."
msgstr "返回一个 :class:`DOMEventStream` 来表示 (Unicode) *string*。"

#: ../../library/xml.dom.pulldom.rst:104
msgid "Default value for the *bufsize* parameter to :func:`parse`."
msgstr "将 *bufsize* 形参的默认值设为 :func:`parse`。"

#: ../../library/xml.dom.pulldom.rst:106
msgid ""
"The value of this variable can be changed before calling :func:`parse` and "
"the new value will take effect."
msgstr "此变量的值可在调用 :func:`parse` 之前修改并使新值生效。"

#: ../../library/xml.dom.pulldom.rst:112
msgid "DOMEventStream Objects"
msgstr "DOMEventStream 对象"

#: ../../library/xml.dom.pulldom.rst:116
msgid "Support for :meth:`~object.__getitem__` method has been removed."
msgstr "对 :meth:`~object.__getitem__` 方法的支持已被移除。"

#: ../../library/xml.dom.pulldom.rst:121
msgid ""
"Return a tuple containing *event* and the current *node* as "
":class:`xml.dom.minidom.Document` if event equals :data:`START_DOCUMENT`, "
":class:`xml.dom.minidom.Element` if event equals :data:`START_ELEMENT` or "
":data:`END_ELEMENT` or :class:`xml.dom.minidom.Text` if event equals "
":data:`CHARACTERS`. The current node does not contain information about its "
"children, unless :func:`expandNode` is called."
msgstr ""
"返回一个元组，其中包含 *event* 和 :class:`xml.dom.minidom.Document` 形式的当前 *node* 如果 "
"event 等于 :data:`START_DOCUMENT`，包含 :class:`xml.dom.minidom.Element` 如果 event"
" 等于 :data:`START_ELEMENT` 或 :data:`END_ELEMENT` 或者 "
":class:`xml.dom.minidom.Text` 如果 event 等于 :data:`CHARACTERS`。 当前 node "
"不包含有关其子节点的信息，除非 :func:`expandNode` 被调用。"

#: ../../library/xml.dom.pulldom.rst:131
msgid "Expands all children of *node* into *node*. Example::"
msgstr "将 *node* 的所有子节点扩展到 *node* 中。 例如::"

#: ../../library/xml.dom.pulldom.rst:133
msgid ""
"from xml.dom import pulldom\n"
"\n"
"xml = '<html><title>Foo</title> <p>Some text <div>and more</div></p> </html>'\n"
"doc = pulldom.parseString(xml)\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'p':\n"
"        # Following statement only prints '<p/>'\n"
"        print(node.toxml())\n"
"        doc.expandNode(node)\n"
"        # Following statement prints node with all its children '<p>Some text <div>and more</div></p>'\n"
"        print(node.toxml())"
msgstr ""
"from xml.dom import pulldom\n"
"\n"
"xml = '<html><title>Foo</title> <p>Some text <div>and more</div></p> </html>'\n"
"doc = pulldom.parseString(xml)\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'p':\n"
"        # 以下语句只打印 '<p/>'\n"
"        print(node.toxml())\n"
"        doc.expandNode(node)\n"
"        # 以下语句将打印节点所有的子节点 '<p>Some text <div>and more</div></p>'\n"
"        print(node.toxml())"
