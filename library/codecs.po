# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/codecs.rst:2
msgid ":mod:`codecs` --- Codec registry and base classes"
msgstr ""

#: ../../library/codecs.rst:11
msgid "**Source code:** :source:`Lib/codecs.py`"
msgstr ""

#: ../../library/codecs.rst:23
msgid ""
"This module defines base classes for standard Python codecs (encoders and "
"decoders) and provides access to the internal Python codec registry, which "
"manages the codec and error handling lookup process. Most standard codecs "
"are :term:`text encodings <text encoding>`, which encode text to bytes (and "
"decode bytes to text), but there are also codecs provided that encode text "
"to text, and bytes to bytes. Custom codecs may encode and decode between "
"arbitrary types, but some module features are restricted to be used "
"specifically with :term:`text encodings <text encoding>` or with codecs that"
" encode to :class:`bytes`."
msgstr ""

#: ../../library/codecs.rst:33
msgid ""
"The module defines the following functions for encoding and decoding with "
"any codec:"
msgstr ""

#: ../../library/codecs.rst:38
msgid "Encodes *obj* using the codec registered for *encoding*."
msgstr ""

#: ../../library/codecs.rst:40
msgid ""
"*Errors* may be given to set the desired error handling scheme. The default "
"error handler is ``'strict'`` meaning that encoding errors raise "
":exc:`ValueError` (or a more codec specific subclass, such as "
":exc:`UnicodeEncodeError`). Refer to :ref:`codec-base-classes` for more "
"information on codec error handling."
msgstr ""

#: ../../library/codecs.rst:48
msgid "Decodes *obj* using the codec registered for *encoding*."
msgstr ""

#: ../../library/codecs.rst:50
msgid ""
"*Errors* may be given to set the desired error handling scheme. The default "
"error handler is ``'strict'`` meaning that decoding errors raise "
":exc:`ValueError` (or a more codec specific subclass, such as "
":exc:`UnicodeDecodeError`). Refer to :ref:`codec-base-classes` for more "
"information on codec error handling."
msgstr ""

#: ../../library/codecs.rst:56
msgid "The full details for each codec can also be looked up directly:"
msgstr ""

#: ../../library/codecs.rst:60
msgid ""
"Looks up the codec info in the Python codec registry and returns a "
":class:`CodecInfo` object as defined below."
msgstr ""

#: ../../library/codecs.rst:63
msgid ""
"Encodings are first looked up in the registry's cache. If not found, the "
"list of registered search functions is scanned. If no :class:`CodecInfo` "
"object is found, a :exc:`LookupError` is raised. Otherwise, the "
":class:`CodecInfo` object is stored in the cache and returned to the caller."
msgstr ""

#: ../../library/codecs.rst:70
msgid ""
"Codec details when looking up the codec registry. The constructor arguments "
"are stored in attributes of the same name:"
msgstr ""

#: ../../library/codecs.rst:76
msgid "The name of the encoding."
msgstr ""

#: ../../library/codecs.rst:82
msgid ""
"The stateless encoding and decoding functions. These must be functions or "
"methods which have the same interface as the :meth:`~Codec.encode` and "
":meth:`~Codec.decode` methods of Codec instances (see :ref:`Codec Interface "
"<codec-objects>`). The functions or methods are expected to work in a "
"stateless mode."
msgstr ""

#: ../../library/codecs.rst:92
msgid ""
"Incremental encoder and decoder classes or factory functions. These have to "
"provide the interface defined by the base classes "
":class:`IncrementalEncoder` and :class:`IncrementalDecoder`, respectively. "
"Incremental codecs can maintain state."
msgstr ""

#: ../../library/codecs.rst:101
msgid ""
"Stream writer and reader classes or factory functions. These have to provide"
" the interface defined by the base classes :class:`StreamWriter` and "
":class:`StreamReader`, respectively. Stream codecs can maintain state."
msgstr ""

#: ../../library/codecs.rst:106
msgid ""
"To simplify access to the various codec components, the module provides "
"these additional functions which use :func:`lookup` for the codec lookup:"
msgstr ""

#: ../../library/codecs.rst:111
msgid ""
"Look up the codec for the given encoding and return its encoder function."
msgstr ""

#: ../../library/codecs.rst:113 ../../library/codecs.rst:120
#: ../../library/codecs.rst:146 ../../library/codecs.rst:154
msgid "Raises a :exc:`LookupError` in case the encoding cannot be found."
msgstr ""

#: ../../library/codecs.rst:118
msgid ""
"Look up the codec for the given encoding and return its decoder function."
msgstr ""

#: ../../library/codecs.rst:125
msgid ""
"Look up the codec for the given encoding and return its incremental encoder "
"class or factory function."
msgstr ""

#: ../../library/codecs.rst:128
msgid ""
"Raises a :exc:`LookupError` in case the encoding cannot be found or the "
"codec doesn't support an incremental encoder."
msgstr ""

#: ../../library/codecs.rst:134
msgid ""
"Look up the codec for the given encoding and return its incremental decoder "
"class or factory function."
msgstr ""

#: ../../library/codecs.rst:137
msgid ""
"Raises a :exc:`LookupError` in case the encoding cannot be found or the "
"codec doesn't support an incremental decoder."
msgstr ""

#: ../../library/codecs.rst:143
msgid ""
"Look up the codec for the given encoding and return its "
":class:`StreamReader` class or factory function."
msgstr ""

#: ../../library/codecs.rst:151
msgid ""
"Look up the codec for the given encoding and return its "
":class:`StreamWriter` class or factory function."
msgstr ""

#: ../../library/codecs.rst:156
msgid ""
"Custom codecs are made available by registering a suitable codec search "
"function:"
msgstr ""

#: ../../library/codecs.rst:161
msgid ""
"Register a codec search function. Search functions are expected to take one "
"argument, being the encoding name in all lower case letters with hyphens and"
" spaces converted to underscores, and return a :class:`CodecInfo` object. In"
" case a search function cannot find a given encoding, it should return "
"``None``."
msgstr ""

#: ../../library/codecs.rst:167
msgid "Hyphens and spaces are converted to underscore."
msgstr ""

#: ../../library/codecs.rst:172
msgid ""
"Search function registration is not currently reversible, which may cause "
"problems in some cases, such as unit testing or module reloading."
msgstr ""

#: ../../library/codecs.rst:176
msgid ""
"While the builtin :func:`open` and the associated :mod:`io` module are the "
"recommended approach for working with encoded text files, this module "
"provides additional utility functions and classes that allow the use of a "
"wider range of codecs when working with binary files:"
msgstr ""

#: ../../library/codecs.rst:183
msgid ""
"Open an encoded file using the given *mode* and return an instance of "
":class:`StreamReaderWriter`, providing transparent encoding/decoding. The "
"default file mode is ``'r'``, meaning to open the file in read mode."
msgstr ""

#: ../../library/codecs.rst:189
msgid ""
"Underlying encoded files are always opened in binary mode. No automatic "
"conversion of ``'\\n'`` is done on reading and writing. The *mode* argument "
"may be any binary mode acceptable to the built-in :func:`open` function; the"
" ``'b'`` is automatically added."
msgstr ""

#: ../../library/codecs.rst:194
msgid ""
"*encoding* specifies the encoding which is to be used for the file. Any "
"encoding that encodes to and decodes from bytes is allowed, and the data "
"types supported by the file methods depend on the codec used."
msgstr ""

#: ../../library/codecs.rst:198
msgid ""
"*errors* may be given to define the error handling. It defaults to "
"``'strict'`` which causes a :exc:`ValueError` to be raised in case an "
"encoding error occurs."
msgstr ""

#: ../../library/codecs.rst:201
msgid ""
"*buffering* has the same meaning as for the built-in :func:`open` function. "
"It defaults to -1 which means that the default buffer size will be used."
msgstr ""

#: ../../library/codecs.rst:207
msgid ""
"Return a :class:`StreamRecoder` instance, a wrapped version of *file* which "
"provides transparent transcoding. The original file is closed when the "
"wrapped version is closed."
msgstr ""

#: ../../library/codecs.rst:211
msgid ""
"Data written to the wrapped file is decoded according to the given "
"*data_encoding* and then written to the original file as bytes using "
"*file_encoding*. Bytes read from the original file are decoded according to "
"*file_encoding*, and the result is encoded using *data_encoding*."
msgstr ""

#: ../../library/codecs.rst:217
msgid "If *file_encoding* is not given, it defaults to *data_encoding*."
msgstr ""

#: ../../library/codecs.rst:219
msgid ""
"*errors* may be given to define the error handling. It defaults to "
"``'strict'``, which causes :exc:`ValueError` to be raised in case an "
"encoding error occurs."
msgstr ""

#: ../../library/codecs.rst:226
msgid ""
"Uses an incremental encoder to iteratively encode the input provided by "
"*iterator*. This function is a :term:`generator`. The *errors* argument (as "
"well as any other keyword argument) is passed through to the incremental "
"encoder."
msgstr ""

#: ../../library/codecs.rst:231
msgid ""
"This function requires that the codec accept text :class:`str` objects to "
"encode. Therefore it does not support bytes-to-bytes encoders such as "
"``base64_codec``."
msgstr ""

#: ../../library/codecs.rst:238
msgid ""
"Uses an incremental decoder to iteratively decode the input provided by "
"*iterator*. This function is a :term:`generator`. The *errors* argument (as "
"well as any other keyword argument) is passed through to the incremental "
"decoder."
msgstr ""

#: ../../library/codecs.rst:243
msgid ""
"This function requires that the codec accept :class:`bytes` objects to "
"decode. Therefore it does not support text-to-text encoders such as "
"``rot_13``, although ``rot_13`` may be used equivalently with "
":func:`iterencode`."
msgstr ""

#: ../../library/codecs.rst:249
msgid ""
"The module also provides the following constants which are useful for "
"reading and writing to platform dependent files:"
msgstr ""

#: ../../library/codecs.rst:264
msgid ""
"These constants define various byte sequences, being Unicode byte order "
"marks (BOMs) for several encodings. They are used in UTF-16 and UTF-32 data "
"streams to indicate the byte order used, and in UTF-8 as a Unicode "
"signature. :const:`BOM_UTF16` is either :const:`BOM_UTF16_BE` or "
":const:`BOM_UTF16_LE` depending on the platform's native byte order, "
":const:`BOM` is an alias for :const:`BOM_UTF16`, :const:`BOM_LE` for "
":const:`BOM_UTF16_LE` and :const:`BOM_BE` for :const:`BOM_UTF16_BE`. The "
"others represent the BOM in UTF-8 and UTF-32 encodings."
msgstr ""

#: ../../library/codecs.rst:278
msgid "Codec Base Classes"
msgstr ""

#: ../../library/codecs.rst:280
msgid ""
"The :mod:`codecs` module defines a set of base classes which define the "
"interfaces for working with codec objects, and can also be used as the basis"
" for custom codec implementations."
msgstr ""

#: ../../library/codecs.rst:284
msgid ""
"Each codec has to define four interfaces to make it usable as codec in "
"Python: stateless encoder, stateless decoder, stream reader and stream "
"writer. The stream reader and writers typically reuse the stateless "
"encoder/decoder to implement the file protocols. Codec authors also need to "
"define how the codec will handle encoding and decoding errors."
msgstr ""

#: ../../library/codecs.rst:295
msgid "Error Handlers"
msgstr ""

#: ../../library/codecs.rst:297
msgid ""
"To simplify and standardize error handling, codecs may implement different "
"error handling schemes by accepting the *errors* string argument:"
msgstr ""

#: ../../library/codecs.rst:317
msgid ""
"The following error handlers can be used with all Python :ref:`standard-"
"encodings` codecs:"
msgstr ""

#: ../../library/codecs.rst:323 ../../library/codecs.rst:365
#: ../../library/codecs.rst:384
msgid "Value"
msgstr "值"

#: ../../library/codecs.rst:323 ../../library/codecs.rst:365
#: ../../library/codecs.rst:384 ../../library/codecs.rst:1317
#: ../../library/codecs.rst:1384 ../../library/codecs.rst:1439
msgid "Meaning"
msgstr "含意"

#: ../../library/codecs.rst:325
msgid "``'strict'``"
msgstr ""

#: ../../library/codecs.rst:325
msgid ""
"Raise :exc:`UnicodeError` (or a subclass), this is the default. Implemented "
"in :func:`strict_errors`."
msgstr ""

#: ../../library/codecs.rst:329
msgid "``'ignore'``"
msgstr ""

#: ../../library/codecs.rst:329
msgid ""
"Ignore the malformed data and continue without further notice. Implemented "
"in :func:`ignore_errors`."
msgstr ""

#: ../../library/codecs.rst:333
msgid "``'replace'``"
msgstr ""

#: ../../library/codecs.rst:333
msgid ""
"Replace with a replacement marker. On encoding, use ``?`` (ASCII character)."
" On decoding, use ``�`` (U+FFFD, the official REPLACEMENT CHARACTER). "
"Implemented in :func:`replace_errors`."
msgstr ""

#: ../../library/codecs.rst:339
msgid "``'backslashreplace'``"
msgstr ""

#: ../../library/codecs.rst:339
msgid ""
"Replace with backslashed escape sequences. On encoding, use hexadecimal form"
" of Unicode code point with formats ``\\xhh`` ``\\uxxxx`` ``\\Uxxxxxxxx``. "
"On decoding, use hexadecimal form of byte value with format ``\\xhh``. "
"Implemented in :func:`backslashreplace_errors`."
msgstr ""

#: ../../library/codecs.rst:347
msgid "``'surrogateescape'``"
msgstr ""

#: ../../library/codecs.rst:347
msgid ""
"On decoding, replace byte with individual surrogate code ranging from "
"``U+DC80`` to ``U+DCFF``. This code will then be turned back into the same "
"byte when the ``'surrogateescape'`` error handler is used when encoding the "
"data. (See :pep:`383` for more.)"
msgstr ""

#: ../../library/codecs.rst:361
msgid ""
"The following error handlers are only applicable to encoding (within "
":term:`text encodings <text encoding>`):"
msgstr ""

#: ../../library/codecs.rst:367
msgid "``'xmlcharrefreplace'``"
msgstr ""

#: ../../library/codecs.rst:367
msgid ""
"Replace with XML/HTML numeric character reference, which is a decimal form "
"of Unicode code point with format ``&#num;`` Implemented in "
":func:`xmlcharrefreplace_errors`."
msgstr ""

#: ../../library/codecs.rst:372
msgid "``'namereplace'``"
msgstr ""

#: ../../library/codecs.rst:372
msgid ""
"Replace with ``\\N{...}`` escape sequences, what appears in the braces is "
"the Name property from Unicode Character Database. Implemented in "
":func:`namereplace_errors`."
msgstr ""

#: ../../library/codecs.rst:381
msgid ""
"In addition, the following error handler is specific to the given codecs:"
msgstr ""

#: ../../library/codecs.rst:384
msgid "Codecs"
msgstr ""

#: ../../library/codecs.rst:386
msgid "``'surrogatepass'``"
msgstr ""

#: ../../library/codecs.rst:386
msgid "utf-8, utf-16, utf-32, utf-16-be, utf-16-le, utf-32-be, utf-32-le"
msgstr ""

#: ../../library/codecs.rst:386
msgid ""
"Allow encoding and decoding surrogate code point (``U+D800`` - ``U+DFFF``) "
"as normal code point. Otherwise these codecs treat the presence of surrogate"
" code point in :class:`str` as an error."
msgstr ""

#: ../../library/codecs.rst:393
msgid "The ``'surrogateescape'`` and ``'surrogatepass'`` error handlers."
msgstr ""

#: ../../library/codecs.rst:396
msgid ""
"The ``'surrogatepass'`` error handler now works with utf-16\\* and utf-32\\*"
" codecs."
msgstr ""

#: ../../library/codecs.rst:400
msgid "The ``'namereplace'`` error handler."
msgstr ""

#: ../../library/codecs.rst:403
msgid ""
"The ``'backslashreplace'`` error handler now works with decoding and "
"translating."
msgstr ""

#: ../../library/codecs.rst:407
msgid ""
"The set of allowed values can be extended by registering a new named error "
"handler:"
msgstr ""

#: ../../library/codecs.rst:412
msgid ""
"Register the error handling function *error_handler* under the name *name*. "
"The *error_handler* argument will be called during encoding and decoding in "
"case of an error, when *name* is specified as the errors parameter."
msgstr ""

#: ../../library/codecs.rst:416
msgid ""
"For encoding, *error_handler* will be called with a "
":exc:`UnicodeEncodeError` instance, which contains information about the "
"location of the error. The error handler must either raise this or a "
"different exception, or return a tuple with a replacement for the "
"unencodable part of the input and a position where encoding should continue."
" The replacement may be either :class:`str` or :class:`bytes`. If the "
"replacement is bytes, the encoder will simply copy them into the output "
"buffer. If the replacement is a string, the encoder will encode the "
"replacement. Encoding continues on original input at the specified position."
" Negative position values will be treated as being relative to the end of "
"the input string. If the resulting position is out of bound an "
":exc:`IndexError` will be raised."
msgstr ""

#: ../../library/codecs.rst:428
msgid ""
"Decoding and translating works similarly, except :exc:`UnicodeDecodeError` "
"or :exc:`UnicodeTranslateError` will be passed to the handler and that the "
"replacement from the error handler will be put into the output directly."
msgstr ""

#: ../../library/codecs.rst:433
msgid ""
"Previously registered error handlers (including the standard error handlers)"
" can be looked up by name:"
msgstr ""

#: ../../library/codecs.rst:438
msgid "Return the error handler previously registered under the name *name*."
msgstr ""

#: ../../library/codecs.rst:440
msgid "Raises a :exc:`LookupError` in case the handler cannot be found."
msgstr ""

#: ../../library/codecs.rst:442
msgid ""
"The following standard error handlers are also made available as module "
"level functions:"
msgstr ""

#: ../../library/codecs.rst:447
msgid "Implements the ``'strict'`` error handling."
msgstr ""

#: ../../library/codecs.rst:449
msgid "Each encoding or decoding error raises a :exc:`UnicodeError`."
msgstr ""

#: ../../library/codecs.rst:454
msgid "Implements the ``'ignore'`` error handling."
msgstr ""

#: ../../library/codecs.rst:456
msgid ""
"Malformed data is ignored; encoding or decoding is continued without further"
" notice."
msgstr ""

#: ../../library/codecs.rst:462
msgid "Implements the ``'replace'`` error handling."
msgstr ""

#: ../../library/codecs.rst:464
msgid ""
"Substitutes ``?`` (ASCII character) for encoding errors or ``�`` (U+FFFD, "
"the official REPLACEMENT CHARACTER) for decoding errors."
msgstr ""

#: ../../library/codecs.rst:470
msgid "Implements the ``'backslashreplace'`` error handling."
msgstr ""

#: ../../library/codecs.rst:472
msgid ""
"Malformed data is replaced by a backslashed escape sequence. On encoding, "
"use the hexadecimal form of Unicode code point with formats ``\\xhh`` "
"``\\uxxxx`` ``\\Uxxxxxxxx``. On decoding, use the hexadecimal form of byte "
"value with format ``\\xhh``."
msgstr ""

#: ../../library/codecs.rst:477
msgid "Works with decoding and translating."
msgstr ""

#: ../../library/codecs.rst:483
msgid ""
"Implements the ``'xmlcharrefreplace'`` error handling (for encoding within "
":term:`text encoding` only)."
msgstr ""

#: ../../library/codecs.rst:486
msgid ""
"The unencodable character is replaced by an appropriate XML/HTML numeric "
"character reference, which is a decimal form of Unicode code point with "
"format ``&#num;`` ."
msgstr ""

#: ../../library/codecs.rst:493
msgid ""
"Implements the ``'namereplace'`` error handling (for encoding within "
":term:`text encoding` only)."
msgstr ""

#: ../../library/codecs.rst:496
msgid ""
"The unencodable character is replaced by a ``\\N{...}`` escape sequence. The"
" set of characters that appear in the braces is the Name property from "
"Unicode Character Database. For example, the German lowercase letter ``'ß'``"
" will be converted to byte sequence ``\\N{LATIN SMALL LETTER SHARP S}`` ."
msgstr ""

#: ../../library/codecs.rst:507
msgid "Stateless Encoding and Decoding"
msgstr ""

#: ../../library/codecs.rst:509
msgid ""
"The base :class:`Codec` class defines these methods which also define the "
"function interfaces of the stateless encoder and decoder:"
msgstr ""

#: ../../library/codecs.rst:515
msgid ""
"Encodes the object *input* and returns a tuple (output object, length "
"consumed). For instance, :term:`text encoding` converts a string object to a"
" bytes object using a particular character set encoding (e.g., ``cp1252`` or"
" ``iso-8859-1``)."
msgstr ""

#: ../../library/codecs.rst:520 ../../library/codecs.rst:542
msgid ""
"The *errors* argument defines the error handling to apply. It defaults to "
"``'strict'`` handling."
msgstr ""

#: ../../library/codecs.rst:523
msgid ""
"The method may not store state in the :class:`Codec` instance. Use "
":class:`StreamWriter` for codecs which have to keep state in order to make "
"encoding efficient."
msgstr ""

#: ../../library/codecs.rst:527
msgid ""
"The encoder must be able to handle zero length input and return an empty "
"object of the output object type in this situation."
msgstr ""

#: ../../library/codecs.rst:533
msgid ""
"Decodes the object *input* and returns a tuple (output object, length "
"consumed). For instance, for a :term:`text encoding`, decoding converts a "
"bytes object encoded using a particular character set encoding to a string "
"object."
msgstr ""

#: ../../library/codecs.rst:538
msgid ""
"For text encodings and bytes-to-bytes codecs, *input* must be a bytes object"
" or one which provides the read-only buffer interface -- for example, buffer"
" objects and memory mapped files."
msgstr ""

#: ../../library/codecs.rst:545
msgid ""
"The method may not store state in the :class:`Codec` instance. Use "
":class:`StreamReader` for codecs which have to keep state in order to make "
"decoding efficient."
msgstr ""

#: ../../library/codecs.rst:549
msgid ""
"The decoder must be able to handle zero length input and return an empty "
"object of the output object type in this situation."
msgstr ""

#: ../../library/codecs.rst:554
msgid "Incremental Encoding and Decoding"
msgstr ""

#: ../../library/codecs.rst:556
msgid ""
"The :class:`IncrementalEncoder` and :class:`IncrementalDecoder` classes "
"provide the basic interface for incremental encoding and decoding. "
"Encoding/decoding the input isn't done with one call to the stateless "
"encoder/decoder function, but with multiple calls to the "
":meth:`~IncrementalEncoder.encode`/:meth:`~IncrementalDecoder.decode` method"
" of the incremental encoder/decoder. The incremental encoder/decoder keeps "
"track of the encoding/decoding process during method calls."
msgstr ""

#: ../../library/codecs.rst:564
msgid ""
"The joined output of calls to the "
":meth:`~IncrementalEncoder.encode`/:meth:`~IncrementalDecoder.decode` method"
" is the same as if all the single inputs were joined into one, and this "
"input was encoded/decoded with the stateless encoder/decoder."
msgstr ""

#: ../../library/codecs.rst:573
msgid "IncrementalEncoder Objects"
msgstr ""

#: ../../library/codecs.rst:575
msgid ""
"The :class:`IncrementalEncoder` class is used for encoding an input in "
"multiple steps. It defines the following methods which every incremental "
"encoder must define in order to be compatible with the Python codec "
"registry."
msgstr ""

#: ../../library/codecs.rst:582
msgid "Constructor for an :class:`IncrementalEncoder` instance."
msgstr ""

#: ../../library/codecs.rst:584
msgid ""
"All incremental encoders must provide this constructor interface. They are "
"free to add additional keyword arguments, but only the ones defined here are"
" used by the Python codec registry."
msgstr ""

#: ../../library/codecs.rst:588
msgid ""
"The :class:`IncrementalEncoder` may implement different error handling "
"schemes by providing the *errors* keyword argument. See :ref:`error-"
"handlers` for possible values."
msgstr ""

#: ../../library/codecs.rst:592
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the "
":class:`IncrementalEncoder` object."
msgstr ""

#: ../../library/codecs.rst:600
msgid ""
"Encodes *object* (taking the current state of the encoder into account) and "
"returns the resulting encoded object. If this is the last call to "
":meth:`encode` *final* must be true (the default is false)."
msgstr ""

#: ../../library/codecs.rst:607
msgid ""
"Reset the encoder to the initial state. The output is discarded: call "
"``.encode(object, final=True)``, passing an empty byte or text string if "
"necessary, to reset the encoder and to get the output."
msgstr ""

#: ../../library/codecs.rst:614
msgid ""
"Return the current state of the encoder which must be an integer. The "
"implementation should make sure that ``0`` is the most common state. (States"
" that are more complicated than integers can be converted into an integer by"
" marshaling/pickling the state and encoding the bytes of the resulting "
"string into an integer.)"
msgstr ""

#: ../../library/codecs.rst:623
msgid ""
"Set the state of the encoder to *state*. *state* must be an encoder state "
"returned by :meth:`getstate`."
msgstr ""

#: ../../library/codecs.rst:630
msgid "IncrementalDecoder Objects"
msgstr ""

#: ../../library/codecs.rst:632
msgid ""
"The :class:`IncrementalDecoder` class is used for decoding an input in "
"multiple steps. It defines the following methods which every incremental "
"decoder must define in order to be compatible with the Python codec "
"registry."
msgstr ""

#: ../../library/codecs.rst:639
msgid "Constructor for an :class:`IncrementalDecoder` instance."
msgstr ""

#: ../../library/codecs.rst:641
msgid ""
"All incremental decoders must provide this constructor interface. They are "
"free to add additional keyword arguments, but only the ones defined here are"
" used by the Python codec registry."
msgstr ""

#: ../../library/codecs.rst:645
msgid ""
"The :class:`IncrementalDecoder` may implement different error handling "
"schemes by providing the *errors* keyword argument. See :ref:`error-"
"handlers` for possible values."
msgstr ""

#: ../../library/codecs.rst:649
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the "
":class:`IncrementalDecoder` object."
msgstr ""

#: ../../library/codecs.rst:657
msgid ""
"Decodes *object* (taking the current state of the decoder into account) and "
"returns the resulting decoded object. If this is the last call to "
":meth:`decode` *final* must be true (the default is false). If *final* is "
"true the decoder must decode the input completely and must flush all "
"buffers. If this isn't possible (e.g. because of incomplete byte sequences "
"at the end of the input) it must initiate error handling just like in the "
"stateless case (which might raise an exception)."
msgstr ""

#: ../../library/codecs.rst:668
msgid "Reset the decoder to the initial state."
msgstr ""

#: ../../library/codecs.rst:673
msgid ""
"Return the current state of the decoder. This must be a tuple with two "
"items, the first must be the buffer containing the still undecoded input. "
"The second must be an integer and can be additional state info. (The "
"implementation should make sure that ``0`` is the most common additional "
"state info.) If this additional state info is ``0`` it must be possible to "
"set the decoder to the state which has no input buffered and ``0`` as the "
"additional state info, so that feeding the previously buffered input to the "
"decoder returns it to the previous state without producing any output. "
"(Additional state info that is more complicated than integers can be "
"converted into an integer by marshaling/pickling the info and encoding the "
"bytes of the resulting string into an integer.)"
msgstr ""

#: ../../library/codecs.rst:688
msgid ""
"Set the state of the decoder to *state*. *state* must be a decoder state "
"returned by :meth:`getstate`."
msgstr ""

#: ../../library/codecs.rst:693
msgid "Stream Encoding and Decoding"
msgstr ""

#: ../../library/codecs.rst:696
msgid ""
"The :class:`StreamWriter` and :class:`StreamReader` classes provide generic "
"working interfaces which can be used to implement new encoding submodules "
"very easily. See :mod:`encodings.utf_8` for an example of how this is done."
msgstr ""

#: ../../library/codecs.rst:704
msgid "StreamWriter Objects"
msgstr ""

#: ../../library/codecs.rst:706
msgid ""
"The :class:`StreamWriter` class is a subclass of :class:`Codec` and defines "
"the following methods which every stream writer must define in order to be "
"compatible with the Python codec registry."
msgstr ""

#: ../../library/codecs.rst:713
msgid "Constructor for a :class:`StreamWriter` instance."
msgstr ""

#: ../../library/codecs.rst:715
msgid ""
"All stream writers must provide this constructor interface. They are free to"
" add additional keyword arguments, but only the ones defined here are used "
"by the Python codec registry."
msgstr ""

#: ../../library/codecs.rst:719
msgid ""
"The *stream* argument must be a file-like object open for writing text or "
"binary data, as appropriate for the specific codec."
msgstr ""

#: ../../library/codecs.rst:722
msgid ""
"The :class:`StreamWriter` may implement different error handling schemes by "
"providing the *errors* keyword argument. See :ref:`error-handlers` for the "
"standard error handlers the underlying stream codec may support."
msgstr ""

#: ../../library/codecs.rst:726
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the :class:`StreamWriter` "
"object."
msgstr ""

#: ../../library/codecs.rst:732
msgid "Writes the object's contents encoded to the stream."
msgstr ""

#: ../../library/codecs.rst:737
msgid ""
"Writes the concatenated iterable of strings to the stream (possibly by "
"reusing the :meth:`write` method). Infinite or very large iterables are not "
"supported. The standard bytes-to-bytes codecs do not support this method."
msgstr ""

#: ../../library/codecs.rst:745 ../../library/codecs.rst:840
msgid "Resets the codec buffers used for keeping internal state."
msgstr ""

#: ../../library/codecs.rst:747
msgid ""
"Calling this method should ensure that the data on the output is put into a "
"clean state that allows appending of new fresh data without having to rescan"
" the whole stream to recover state."
msgstr ""

#: ../../library/codecs.rst:752
msgid ""
"In addition to the above methods, the :class:`StreamWriter` must also "
"inherit all other methods and attributes from the underlying stream."
msgstr ""

#: ../../library/codecs.rst:759
msgid "StreamReader Objects"
msgstr ""

#: ../../library/codecs.rst:761
msgid ""
"The :class:`StreamReader` class is a subclass of :class:`Codec` and defines "
"the following methods which every stream reader must define in order to be "
"compatible with the Python codec registry."
msgstr ""

#: ../../library/codecs.rst:768
msgid "Constructor for a :class:`StreamReader` instance."
msgstr ""

#: ../../library/codecs.rst:770
msgid ""
"All stream readers must provide this constructor interface. They are free to"
" add additional keyword arguments, but only the ones defined here are used "
"by the Python codec registry."
msgstr ""

#: ../../library/codecs.rst:774
msgid ""
"The *stream* argument must be a file-like object open for reading text or "
"binary data, as appropriate for the specific codec."
msgstr ""

#: ../../library/codecs.rst:777
msgid ""
"The :class:`StreamReader` may implement different error handling schemes by "
"providing the *errors* keyword argument. See :ref:`error-handlers` for the "
"standard error handlers the underlying stream codec may support."
msgstr ""

#: ../../library/codecs.rst:781
msgid ""
"The *errors* argument will be assigned to an attribute of the same name. "
"Assigning to this attribute makes it possible to switch between different "
"error handling strategies during the lifetime of the :class:`StreamReader` "
"object."
msgstr ""

#: ../../library/codecs.rst:785
msgid ""
"The set of allowed values for the *errors* argument can be extended with "
":func:`register_error`."
msgstr ""

#: ../../library/codecs.rst:791
msgid "Decodes data from the stream and returns the resulting object."
msgstr ""

#: ../../library/codecs.rst:793
msgid ""
"The *chars* argument indicates the number of decoded code points or bytes to"
" return. The :func:`read` method will never return more data than requested,"
" but it might return less, if there is not enough available."
msgstr ""

#: ../../library/codecs.rst:798
msgid ""
"The *size* argument indicates the approximate maximum number of encoded "
"bytes or code points to read for decoding. The decoder can modify this "
"setting as appropriate. The default value -1 indicates to read and decode as"
" much as possible. This parameter is intended to prevent having to decode "
"huge files in one step."
msgstr ""

#: ../../library/codecs.rst:805
msgid ""
"The *firstline* flag indicates that it would be sufficient to only return "
"the first line, if there are decoding errors on later lines."
msgstr ""

#: ../../library/codecs.rst:809
msgid ""
"The method should use a greedy read strategy meaning that it should read as "
"much data as is allowed within the definition of the encoding and the given "
"size, e.g.  if optional encoding endings or state markers are available on "
"the stream, these should be read too."
msgstr ""

#: ../../library/codecs.rst:817
msgid "Read one line from the input stream and return the decoded data."
msgstr ""

#: ../../library/codecs.rst:819
msgid ""
"*size*, if given, is passed as size argument to the stream's :meth:`read` "
"method."
msgstr ""

#: ../../library/codecs.rst:822
msgid ""
"If *keepends* is false line-endings will be stripped from the lines "
"returned."
msgstr ""

#: ../../library/codecs.rst:828
msgid ""
"Read all lines available on the input stream and return them as a list of "
"lines."
msgstr ""

#: ../../library/codecs.rst:831
msgid ""
"Line-endings are implemented using the codec's :meth:`decode` method and are"
" included in the list entries if *keepends* is true."
msgstr ""

#: ../../library/codecs.rst:834
msgid ""
"*sizehint*, if given, is passed as the *size* argument to the stream's "
":meth:`read` method."
msgstr ""

#: ../../library/codecs.rst:842
msgid ""
"Note that no stream repositioning should take place. This method is "
"primarily intended to be able to recover from decoding errors."
msgstr ""

#: ../../library/codecs.rst:846
msgid ""
"In addition to the above methods, the :class:`StreamReader` must also "
"inherit all other methods and attributes from the underlying stream."
msgstr ""

#: ../../library/codecs.rst:852
msgid "StreamReaderWriter Objects"
msgstr ""

#: ../../library/codecs.rst:854
msgid ""
"The :class:`StreamReaderWriter` is a convenience class that allows wrapping "
"streams which work in both read and write modes."
msgstr ""

#: ../../library/codecs.rst:857 ../../library/codecs.rst:881
msgid ""
"The design is such that one can use the factory functions returned by the "
":func:`lookup` function to construct the instance."
msgstr ""

#: ../../library/codecs.rst:863
msgid ""
"Creates a :class:`StreamReaderWriter` instance. *stream* must be a file-like"
" object. *Reader* and *Writer* must be factory functions or classes "
"providing the :class:`StreamReader` and :class:`StreamWriter` interface "
"resp. Error handling is done in the same way as defined for the stream "
"readers and writers."
msgstr ""

#: ../../library/codecs.rst:868
msgid ""
":class:`StreamReaderWriter` instances define the combined interfaces of "
":class:`StreamReader` and :class:`StreamWriter` classes. They inherit all "
"other methods and attributes from the underlying stream."
msgstr ""

#: ../../library/codecs.rst:876
msgid "StreamRecoder Objects"
msgstr ""

#: ../../library/codecs.rst:878
msgid ""
"The :class:`StreamRecoder` translates data from one encoding to another, "
"which is sometimes useful when dealing with different encoding environments."
msgstr ""

#: ../../library/codecs.rst:887
msgid ""
"Creates a :class:`StreamRecoder` instance which implements a two-way "
"conversion: *encode* and *decode* work on the frontend — the data visible to"
" code calling :meth:`read` and :meth:`write`, while *Reader* and *Writer* "
"work on the backend — the data in *stream*."
msgstr ""

#: ../../library/codecs.rst:892
msgid ""
"You can use these objects to do transparent transcodings, e.g., from Latin-1"
" to UTF-8 and back."
msgstr ""

#: ../../library/codecs.rst:895
msgid "The *stream* argument must be a file-like object."
msgstr ""

#: ../../library/codecs.rst:897
msgid ""
"The *encode* and *decode* arguments must adhere to the :class:`Codec` "
"interface. *Reader* and *Writer* must be factory functions or classes "
"providing objects of the :class:`StreamReader` and :class:`StreamWriter` "
"interface respectively."
msgstr ""

#: ../../library/codecs.rst:902
msgid ""
"Error handling is done in the same way as defined for the stream readers and"
" writers."
msgstr ""

#: ../../library/codecs.rst:906
msgid ""
":class:`StreamRecoder` instances define the combined interfaces of "
":class:`StreamReader` and :class:`StreamWriter` classes. They inherit all "
"other methods and attributes from the underlying stream."
msgstr ""

#: ../../library/codecs.rst:914
msgid "Encodings and Unicode"
msgstr ""

#: ../../library/codecs.rst:916
msgid ""
"Strings are stored internally as sequences of code points in range "
"``U+0000``--``U+10FFFF``. (See :pep:`393` for more details about the "
"implementation.) Once a string object is used outside of CPU and memory, "
"endianness and how these arrays are stored as bytes become an issue. As with"
" other codecs, serialising a string into a sequence of bytes is known as "
"*encoding*, and recreating the string from the sequence of bytes is known as"
" *decoding*. There are a variety of different text serialisation codecs, "
"which are collectivity referred to as :term:`text encodings <text "
"encoding>`."
msgstr ""

#: ../../library/codecs.rst:926
msgid ""
"The simplest text encoding (called ``'latin-1'`` or ``'iso-8859-1'``) maps "
"the code points 0--255 to the bytes ``0x0``--``0xff``, which means that a "
"string object that contains code points above ``U+00FF`` can't be encoded "
"with this codec. Doing so will raise a :exc:`UnicodeEncodeError` that looks "
"like the following (although the details of the error message may differ): "
"``UnicodeEncodeError: 'latin-1' codec can't encode character '\\u1234' in "
"position 3: ordinal not in range(256)``."
msgstr ""

#: ../../library/codecs.rst:934
msgid ""
"There's another group of encodings (the so called charmap encodings) that "
"choose a different subset of all Unicode code points and how these code "
"points are mapped to the bytes ``0x0``--``0xff``. To see how this is done "
"simply open e.g. :file:`encodings/cp1252.py` (which is an encoding that is "
"used primarily on Windows). There's a string constant with 256 characters "
"that shows you which character is mapped to which byte value."
msgstr ""

#: ../../library/codecs.rst:941
msgid ""
"All of these encodings can only encode 256 of the 1114112 code points "
"defined in Unicode. A simple and straightforward way that can store each "
"Unicode code point, is to store each code point as four consecutive bytes. "
"There are two possibilities: store the bytes in big endian or in little "
"endian order. These two encodings are called ``UTF-32-BE`` and ``UTF-32-LE``"
" respectively. Their disadvantage is that if e.g. you use ``UTF-32-BE`` on a"
" little endian machine you will always have to swap bytes on encoding and "
"decoding. ``UTF-32`` avoids this problem: bytes will always be in natural "
"endianness. When these bytes are read by a CPU with a different endianness, "
"then bytes have to be swapped though. To be able to detect the endianness of"
" a ``UTF-16`` or ``UTF-32`` byte sequence, there's the so called BOM (\"Byte"
" Order Mark\"). This is the Unicode character ``U+FEFF``. This character can"
" be prepended to every ``UTF-16`` or ``UTF-32`` byte sequence. The byte "
"swapped version of this character (``0xFFFE``) is an illegal character that "
"may not appear in a Unicode text. So when the first character in a "
"``UTF-16`` or ``UTF-32`` byte sequence appears to be a ``U+FFFE`` the bytes "
"have to be swapped on decoding. Unfortunately the character ``U+FEFF`` had a"
" second purpose as a ``ZERO WIDTH NO-BREAK SPACE``: a character that has no "
"width and doesn't allow a word to be split. It can e.g. be used to give "
"hints to a ligature algorithm. With Unicode 4.0 using ``U+FEFF`` as a ``ZERO"
" WIDTH NO-BREAK SPACE`` has been deprecated (with ``U+2060`` (``WORD "
"JOINER``) assuming this role). Nevertheless Unicode software still must be "
"able to handle ``U+FEFF`` in both roles: as a BOM it's a device to determine"
" the storage layout of the encoded bytes, and vanishes once the byte "
"sequence has been decoded into a string; as a ``ZERO WIDTH NO-BREAK SPACE`` "
"it's a normal character that will be decoded like any other."
msgstr ""

#: ../../library/codecs.rst:967
msgid ""
"There's another encoding that is able to encode the full range of Unicode "
"characters: UTF-8. UTF-8 is an 8-bit encoding, which means there are no "
"issues with byte order in UTF-8. Each byte in a UTF-8 byte sequence consists"
" of two parts: marker bits (the most significant bits) and payload bits. The"
" marker bits are a sequence of zero to four ``1`` bits followed by a ``0`` "
"bit. Unicode characters are encoded like this (with x being payload bits, "
"which when concatenated give the Unicode character):"
msgstr ""

#: ../../library/codecs.rst:976
msgid "Range"
msgstr ""

#: ../../library/codecs.rst:976
msgid "Encoding"
msgstr ""

#: ../../library/codecs.rst:978
msgid "``U-00000000`` ... ``U-0000007F``"
msgstr ""

#: ../../library/codecs.rst:978
msgid "0xxxxxxx"
msgstr ""

#: ../../library/codecs.rst:980
msgid "``U-00000080`` ... ``U-000007FF``"
msgstr ""

#: ../../library/codecs.rst:980
msgid "110xxxxx 10xxxxxx"
msgstr ""

#: ../../library/codecs.rst:982
msgid "``U-00000800`` ... ``U-0000FFFF``"
msgstr ""

#: ../../library/codecs.rst:982
msgid "1110xxxx 10xxxxxx 10xxxxxx"
msgstr ""

#: ../../library/codecs.rst:984
msgid "``U-00010000`` ... ``U-0010FFFF``"
msgstr ""

#: ../../library/codecs.rst:984
msgid "11110xxx 10xxxxxx 10xxxxxx 10xxxxxx"
msgstr ""

#: ../../library/codecs.rst:987
msgid ""
"The least significant bit of the Unicode character is the rightmost x bit."
msgstr ""

#: ../../library/codecs.rst:989
msgid ""
"As UTF-8 is an 8-bit encoding no BOM is required and any ``U+FEFF`` "
"character in the decoded string (even if it's the first character) is "
"treated as a ``ZERO WIDTH NO-BREAK SPACE``."
msgstr ""

#: ../../library/codecs.rst:993
msgid ""
"Without external information it's impossible to reliably determine which "
"encoding was used for encoding a string. Each charmap encoding can decode "
"any random byte sequence. However that's not possible with UTF-8, as UTF-8 "
"byte sequences have a structure that doesn't allow arbitrary byte sequences."
" To increase the reliability with which a UTF-8 encoding can be detected, "
"Microsoft invented a variant of UTF-8 (that Python calls ``\"utf-8-sig\"``) "
"for its Notepad program: Before any of the Unicode characters is written to "
"the file, a UTF-8 encoded BOM (which looks like this as a byte sequence: "
"``0xef``, ``0xbb``, ``0xbf``) is written. As it's rather improbable that any"
" charmap encoded file starts with these byte values (which would e.g. map to"
msgstr ""

#: ../../library/codecs.rst:0
msgid "LATIN SMALL LETTER I WITH DIAERESIS"
msgstr ""

#: ../../library/codecs.rst:0
msgid "RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK"
msgstr ""

#: ../../library/codecs.rst:0
msgid "INVERTED QUESTION MARK"
msgstr ""

#: ../../library/codecs.rst:1009
msgid ""
"in iso-8859-1), this increases the probability that a ``utf-8-sig`` encoding"
" can be correctly guessed from the byte sequence. So here the BOM is not "
"used to be able to determine the byte order used for generating the byte "
"sequence, but as a signature that helps in guessing the encoding. On "
"encoding the utf-8-sig codec will write ``0xef``, ``0xbb``, ``0xbf`` as the "
"first three bytes to the file. On decoding ``utf-8-sig`` will skip those "
"three bytes if they appear as the first three bytes in the file. In UTF-8, "
"the use of the BOM is discouraged and should generally be avoided."
msgstr ""

#: ../../library/codecs.rst:1022
msgid "Standard Encodings"
msgstr ""

#: ../../library/codecs.rst:1024
msgid ""
"Python comes with a number of codecs built-in, either implemented as C "
"functions or with dictionaries as mapping tables. The following table lists "
"the codecs by name, together with a few common aliases, and the languages "
"for which the encoding is likely used. Neither the list of aliases nor the "
"list of languages is meant to be exhaustive. Notice that spelling "
"alternatives that only differ in case or use a hyphen instead of an "
"underscore are also valid aliases; therefore, e.g. ``'utf-8'`` is a valid "
"alias for the ``'utf_8'`` codec."
msgstr ""

#: ../../library/codecs.rst:1034
msgid ""
"Some common encodings can bypass the codecs lookup machinery to improve "
"performance. These optimization opportunities are only recognized by CPython"
" for a limited set of (case insensitive) aliases: utf-8, utf8, latin-1, "
"latin1, iso-8859-1, iso8859-1, mbcs (Windows only), ascii, us-ascii, utf-16,"
" utf16, utf-32, utf32, and the same using underscores instead of dashes. "
"Using alternative aliases for these encodings may result in slower "
"execution."
msgstr ""

#: ../../library/codecs.rst:1042
msgid "Optimization opportunity recognized for us-ascii."
msgstr ""

#: ../../library/codecs.rst:1045
msgid ""
"Many of the character sets support the same languages. They vary in "
"individual characters (e.g. whether the EURO SIGN is supported or not), and "
"in the assignment of characters to code positions. For the European "
"languages in particular, the following variants typically exist:"
msgstr ""

#: ../../library/codecs.rst:1050
msgid "an ISO 8859 codeset"
msgstr ""

#: ../../library/codecs.rst:1052
msgid ""
"a Microsoft Windows code page, which is typically derived from an 8859 "
"codeset, but replaces control characters with additional graphic characters"
msgstr ""

#: ../../library/codecs.rst:1055
msgid "an IBM EBCDIC code page"
msgstr ""

#: ../../library/codecs.rst:1057
msgid "an IBM PC code page, which is ASCII compatible"
msgstr ""

#: ../../library/codecs.rst:1062 ../../library/codecs.rst:1317
#: ../../library/codecs.rst:1384 ../../library/codecs.rst:1439
msgid "Codec"
msgstr ""

#: ../../library/codecs.rst:1062 ../../library/codecs.rst:1317
#: ../../library/codecs.rst:1384 ../../library/codecs.rst:1439
msgid "Aliases"
msgstr ""

#: ../../library/codecs.rst:1062
msgid "Languages"
msgstr ""

#: ../../library/codecs.rst:1064
msgid "ascii"
msgstr ""

#: ../../library/codecs.rst:1064
msgid "646, us-ascii"
msgstr ""

#: ../../library/codecs.rst:1064 ../../library/codecs.rst:1070
#: ../../library/codecs.rst:1078
msgid "English"
msgstr ""

#: ../../library/codecs.rst:1066
msgid "big5"
msgstr ""

#: ../../library/codecs.rst:1066
msgid "big5-tw, csbig5"
msgstr ""

#: ../../library/codecs.rst:1066 ../../library/codecs.rst:1068
#: ../../library/codecs.rst:1126
msgid "Traditional Chinese"
msgstr ""

#: ../../library/codecs.rst:1068
msgid "big5hkscs"
msgstr ""

#: ../../library/codecs.rst:1068
msgid "big5-hkscs, hkscs"
msgstr ""

#: ../../library/codecs.rst:1070
msgid "cp037"
msgstr ""

#: ../../library/codecs.rst:1070
msgid "IBM037, IBM039"
msgstr ""

#: ../../library/codecs.rst:1072
msgid "cp273"
msgstr ""

#: ../../library/codecs.rst:1072
msgid "273, IBM273, csIBM273"
msgstr ""

#: ../../library/codecs.rst:1072
msgid "German"
msgstr ""

#: ../../library/codecs.rst:1076
msgid "cp424"
msgstr ""

#: ../../library/codecs.rst:1076
msgid "EBCDIC-CP-HE, IBM424"
msgstr ""

#: ../../library/codecs.rst:1076 ../../library/codecs.rst:1096
#: ../../library/codecs.rst:1106 ../../library/codecs.rst:1149
#: ../../library/codecs.rst:1212
msgid "Hebrew"
msgstr ""

#: ../../library/codecs.rst:1078
msgid "cp437"
msgstr ""

#: ../../library/codecs.rst:1078
msgid "437, IBM437"
msgstr ""

#: ../../library/codecs.rst:1080
msgid "cp500"
msgstr ""

#: ../../library/codecs.rst:1080
msgid "EBCDIC-CP-BE, EBCDIC-CP-CH, IBM500"
msgstr ""

#: ../../library/codecs.rst:1080 ../../library/codecs.rst:1089
#: ../../library/codecs.rst:1100 ../../library/codecs.rst:1136
#: ../../library/codecs.rst:1143 ../../library/codecs.rst:1196
#: ../../library/codecs.rst:1224 ../../library/codecs.rst:1252
msgid "Western Europe"
msgstr ""

#: ../../library/codecs.rst:1083
msgid "cp720"
msgstr ""

#: ../../library/codecs.rst:1083 ../../library/codecs.rst:1110
#: ../../library/codecs.rst:1151 ../../library/codecs.rst:1208
msgid "Arabic"
msgstr ""

#: ../../library/codecs.rst:1085
msgid "cp737"
msgstr ""

#: ../../library/codecs.rst:1085 ../../library/codecs.rst:1116
#: ../../library/codecs.rst:1120 ../../library/codecs.rst:1145
#: ../../library/codecs.rst:1210 ../../library/codecs.rst:1245
msgid "Greek"
msgstr ""

#: ../../library/codecs.rst:1087
msgid "cp775"
msgstr ""

#: ../../library/codecs.rst:1087
msgid "IBM775"
msgstr ""

#: ../../library/codecs.rst:1087 ../../library/codecs.rst:1153
#: ../../library/codecs.rst:1203 ../../library/codecs.rst:1220
msgid "Baltic languages"
msgstr ""

#: ../../library/codecs.rst:1089
msgid "cp850"
msgstr ""

#: ../../library/codecs.rst:1089
msgid "850, IBM850"
msgstr ""

#: ../../library/codecs.rst:1091
msgid "cp852"
msgstr ""

#: ../../library/codecs.rst:1091
msgid "852, IBM852"
msgstr ""

#: ../../library/codecs.rst:1091 ../../library/codecs.rst:1138
#: ../../library/codecs.rst:1199 ../../library/codecs.rst:1249
msgid "Central and Eastern Europe"
msgstr ""

#: ../../library/codecs.rst:1093
msgid "cp855"
msgstr ""

#: ../../library/codecs.rst:1093
msgid "855, IBM855"
msgstr ""

#: ../../library/codecs.rst:1093 ../../library/codecs.rst:1140
#: ../../library/codecs.rst:1205 ../../library/codecs.rst:1242
msgid "Bulgarian, Byelorussian, Macedonian, Russian, Serbian"
msgstr ""

#: ../../library/codecs.rst:1096
msgid "cp856"
msgstr ""

#: ../../library/codecs.rst:1098
msgid "cp857"
msgstr ""

#: ../../library/codecs.rst:1098
msgid "857, IBM857"
msgstr ""

#: ../../library/codecs.rst:1098 ../../library/codecs.rst:1130
#: ../../library/codecs.rst:1147 ../../library/codecs.rst:1214
#: ../../library/codecs.rst:1254
msgid "Turkish"
msgstr ""

#: ../../library/codecs.rst:1100
msgid "cp858"
msgstr ""

#: ../../library/codecs.rst:1100
msgid "858, IBM858"
msgstr ""

#: ../../library/codecs.rst:1102
msgid "cp860"
msgstr ""

#: ../../library/codecs.rst:1102
msgid "860, IBM860"
msgstr ""

#: ../../library/codecs.rst:1102
msgid "Portuguese"
msgstr ""

#: ../../library/codecs.rst:1104
msgid "cp861"
msgstr ""

#: ../../library/codecs.rst:1104
msgid "861, CP-IS, IBM861"
msgstr ""

#: ../../library/codecs.rst:1104 ../../library/codecs.rst:1247
msgid "Icelandic"
msgstr ""

#: ../../library/codecs.rst:1106
msgid "cp862"
msgstr ""

#: ../../library/codecs.rst:1106
msgid "862, IBM862"
msgstr ""

#: ../../library/codecs.rst:1108
msgid "cp863"
msgstr ""

#: ../../library/codecs.rst:1108
msgid "863, IBM863"
msgstr ""

#: ../../library/codecs.rst:1108
msgid "Canadian"
msgstr ""

#: ../../library/codecs.rst:1110
msgid "cp864"
msgstr ""

#: ../../library/codecs.rst:1110
msgid "IBM864"
msgstr ""

#: ../../library/codecs.rst:1112
msgid "cp865"
msgstr ""

#: ../../library/codecs.rst:1112
msgid "865, IBM865"
msgstr ""

#: ../../library/codecs.rst:1112
msgid "Danish, Norwegian"
msgstr ""

#: ../../library/codecs.rst:1114
msgid "cp866"
msgstr ""

#: ../../library/codecs.rst:1114
msgid "866, IBM866"
msgstr ""

#: ../../library/codecs.rst:1114 ../../library/codecs.rst:1230
msgid "Russian"
msgstr ""

#: ../../library/codecs.rst:1116
msgid "cp869"
msgstr ""

#: ../../library/codecs.rst:1116
msgid "869, CP-GR, IBM869"
msgstr ""

#: ../../library/codecs.rst:1118
msgid "cp874"
msgstr ""

#: ../../library/codecs.rst:1118
msgid "Thai"
msgstr ""

#: ../../library/codecs.rst:1120
msgid "cp875"
msgstr ""

#: ../../library/codecs.rst:1122
msgid "cp932"
msgstr ""

#: ../../library/codecs.rst:1122
msgid "932, ms932, mskanji, ms-kanji"
msgstr ""

#: ../../library/codecs.rst:1122 ../../library/codecs.rst:1157
#: ../../library/codecs.rst:1159 ../../library/codecs.rst:1161
#: ../../library/codecs.rst:1178 ../../library/codecs.rst:1181
#: ../../library/codecs.rst:1186 ../../library/codecs.rst:1189
#: ../../library/codecs.rst:1191 ../../library/codecs.rst:1259
#: ../../library/codecs.rst:1262 ../../library/codecs.rst:1265
msgid "Japanese"
msgstr ""

#: ../../library/codecs.rst:1124
msgid "cp949"
msgstr ""

#: ../../library/codecs.rst:1124
msgid "949, ms949, uhc"
msgstr ""

#: ../../library/codecs.rst:1124 ../../library/codecs.rst:1163
#: ../../library/codecs.rst:1193 ../../library/codecs.rst:1228
msgid "Korean"
msgstr ""

#: ../../library/codecs.rst:1126
msgid "cp950"
msgstr ""

#: ../../library/codecs.rst:1126
msgid "950, ms950"
msgstr ""

#: ../../library/codecs.rst:1128
msgid "cp1006"
msgstr ""

#: ../../library/codecs.rst:1128
msgid "Urdu"
msgstr ""

#: ../../library/codecs.rst:1130
msgid "cp1026"
msgstr ""

#: ../../library/codecs.rst:1130
msgid "ibm1026"
msgstr ""

#: ../../library/codecs.rst:1132
msgid "cp1125"
msgstr ""

#: ../../library/codecs.rst:1132
msgid "1125, ibm1125, cp866u, ruscii"
msgstr ""

#: ../../library/codecs.rst:1132 ../../library/codecs.rst:1236
msgid "Ukrainian"
msgstr ""

#: ../../library/codecs.rst:1136
msgid "cp1140"
msgstr ""

#: ../../library/codecs.rst:1136
msgid "ibm1140"
msgstr ""

#: ../../library/codecs.rst:1138
msgid "cp1250"
msgstr ""

#: ../../library/codecs.rst:1138
msgid "windows-1250"
msgstr ""

#: ../../library/codecs.rst:1140
msgid "cp1251"
msgstr ""

#: ../../library/codecs.rst:1140
msgid "windows-1251"
msgstr ""

#: ../../library/codecs.rst:1143
msgid "cp1252"
msgstr ""

#: ../../library/codecs.rst:1143
msgid "windows-1252"
msgstr ""

#: ../../library/codecs.rst:1145
msgid "cp1253"
msgstr ""

#: ../../library/codecs.rst:1145
msgid "windows-1253"
msgstr ""

#: ../../library/codecs.rst:1147
msgid "cp1254"
msgstr ""

#: ../../library/codecs.rst:1147
msgid "windows-1254"
msgstr ""

#: ../../library/codecs.rst:1149
msgid "cp1255"
msgstr ""

#: ../../library/codecs.rst:1149
msgid "windows-1255"
msgstr ""

#: ../../library/codecs.rst:1151
msgid "cp1256"
msgstr ""

#: ../../library/codecs.rst:1151
msgid "windows-1256"
msgstr ""

#: ../../library/codecs.rst:1153
msgid "cp1257"
msgstr ""

#: ../../library/codecs.rst:1153
msgid "windows-1257"
msgstr ""

#: ../../library/codecs.rst:1155
msgid "cp1258"
msgstr ""

#: ../../library/codecs.rst:1155
msgid "windows-1258"
msgstr ""

#: ../../library/codecs.rst:1155
msgid "Vietnamese"
msgstr ""

#: ../../library/codecs.rst:1157
msgid "euc_jp"
msgstr ""

#: ../../library/codecs.rst:1157
msgid "eucjp, ujis, u-jis"
msgstr ""

#: ../../library/codecs.rst:1159
msgid "euc_jis_2004"
msgstr ""

#: ../../library/codecs.rst:1159
msgid "jisx0213, eucjis2004"
msgstr ""

#: ../../library/codecs.rst:1161
msgid "euc_jisx0213"
msgstr ""

#: ../../library/codecs.rst:1161
msgid "eucjisx0213"
msgstr ""

#: ../../library/codecs.rst:1163
msgid "euc_kr"
msgstr ""

#: ../../library/codecs.rst:1163
msgid "euckr, korean, ksc5601, ks_c-5601, ks_c-5601-1987, ksx1001, ks_x-1001"
msgstr ""

#: ../../library/codecs.rst:1167
msgid "gb2312"
msgstr ""

#: ../../library/codecs.rst:1167
msgid ""
"chinese, csiso58gb231280, euc-cn, euccn, eucgb2312-cn, gb2312-1980, "
"gb2312-80, iso-ir-58"
msgstr ""

#: ../../library/codecs.rst:1167 ../../library/codecs.rst:1176
msgid "Simplified Chinese"
msgstr ""

#: ../../library/codecs.rst:1172
msgid "gbk"
msgstr ""

#: ../../library/codecs.rst:1172
msgid "936, cp936, ms936"
msgstr ""

#: ../../library/codecs.rst:1172 ../../library/codecs.rst:1174
msgid "Unified Chinese"
msgstr ""

#: ../../library/codecs.rst:1174
msgid "gb18030"
msgstr ""

#: ../../library/codecs.rst:1174
msgid "gb18030-2000"
msgstr ""

#: ../../library/codecs.rst:1176
msgid "hz"
msgstr ""

#: ../../library/codecs.rst:1176
msgid "hzgb, hz-gb, hz-gb-2312"
msgstr ""

#: ../../library/codecs.rst:1178
msgid "iso2022_jp"
msgstr ""

#: ../../library/codecs.rst:1178
msgid "csiso2022jp, iso2022jp, iso-2022-jp"
msgstr ""

#: ../../library/codecs.rst:1181
msgid "iso2022_jp_1"
msgstr ""

#: ../../library/codecs.rst:1181
msgid "iso2022jp-1, iso-2022-jp-1"
msgstr ""

#: ../../library/codecs.rst:1183
msgid "iso2022_jp_2"
msgstr ""

#: ../../library/codecs.rst:1183
msgid "iso2022jp-2, iso-2022-jp-2"
msgstr ""

#: ../../library/codecs.rst:1183
msgid "Japanese, Korean, Simplified Chinese, Western Europe, Greek"
msgstr ""

#: ../../library/codecs.rst:1186
msgid "iso2022_jp_2004"
msgstr ""

#: ../../library/codecs.rst:1186
msgid "iso2022jp-2004, iso-2022-jp-2004"
msgstr ""

#: ../../library/codecs.rst:1189
msgid "iso2022_jp_3"
msgstr ""

#: ../../library/codecs.rst:1189
msgid "iso2022jp-3, iso-2022-jp-3"
msgstr ""

#: ../../library/codecs.rst:1191
msgid "iso2022_jp_ext"
msgstr ""

#: ../../library/codecs.rst:1191
msgid "iso2022jp-ext, iso-2022-jp-ext"
msgstr ""

#: ../../library/codecs.rst:1193
msgid "iso2022_kr"
msgstr ""

#: ../../library/codecs.rst:1193
msgid "csiso2022kr, iso2022kr, iso-2022-kr"
msgstr ""

#: ../../library/codecs.rst:1196
msgid "latin_1"
msgstr ""

#: ../../library/codecs.rst:1196
msgid "iso-8859-1, iso8859-1, 8859, cp819, latin, latin1, L1"
msgstr ""

#: ../../library/codecs.rst:1199
msgid "iso8859_2"
msgstr ""

#: ../../library/codecs.rst:1199
msgid "iso-8859-2, latin2, L2"
msgstr ""

#: ../../library/codecs.rst:1201
msgid "iso8859_3"
msgstr ""

#: ../../library/codecs.rst:1201
msgid "iso-8859-3, latin3, L3"
msgstr ""

#: ../../library/codecs.rst:1201
msgid "Esperanto, Maltese"
msgstr ""

#: ../../library/codecs.rst:1203
msgid "iso8859_4"
msgstr ""

#: ../../library/codecs.rst:1203
msgid "iso-8859-4, latin4, L4"
msgstr ""

#: ../../library/codecs.rst:1205
msgid "iso8859_5"
msgstr ""

#: ../../library/codecs.rst:1205
msgid "iso-8859-5, cyrillic"
msgstr ""

#: ../../library/codecs.rst:1208
msgid "iso8859_6"
msgstr ""

#: ../../library/codecs.rst:1208
msgid "iso-8859-6, arabic"
msgstr ""

#: ../../library/codecs.rst:1210
msgid "iso8859_7"
msgstr ""

#: ../../library/codecs.rst:1210
msgid "iso-8859-7, greek, greek8"
msgstr ""

#: ../../library/codecs.rst:1212
msgid "iso8859_8"
msgstr ""

#: ../../library/codecs.rst:1212
msgid "iso-8859-8, hebrew"
msgstr ""

#: ../../library/codecs.rst:1214
msgid "iso8859_9"
msgstr ""

#: ../../library/codecs.rst:1214
msgid "iso-8859-9, latin5, L5"
msgstr ""

#: ../../library/codecs.rst:1216
msgid "iso8859_10"
msgstr ""

#: ../../library/codecs.rst:1216
msgid "iso-8859-10, latin6, L6"
msgstr ""

#: ../../library/codecs.rst:1216
msgid "Nordic languages"
msgstr ""

#: ../../library/codecs.rst:1218
msgid "iso8859_11"
msgstr ""

#: ../../library/codecs.rst:1218
msgid "iso-8859-11, thai"
msgstr ""

#: ../../library/codecs.rst:1218
msgid "Thai languages"
msgstr ""

#: ../../library/codecs.rst:1220
msgid "iso8859_13"
msgstr ""

#: ../../library/codecs.rst:1220
msgid "iso-8859-13, latin7, L7"
msgstr ""

#: ../../library/codecs.rst:1222
msgid "iso8859_14"
msgstr ""

#: ../../library/codecs.rst:1222
msgid "iso-8859-14, latin8, L8"
msgstr ""

#: ../../library/codecs.rst:1222
msgid "Celtic languages"
msgstr ""

#: ../../library/codecs.rst:1224
msgid "iso8859_15"
msgstr ""

#: ../../library/codecs.rst:1224
msgid "iso-8859-15, latin9, L9"
msgstr ""

#: ../../library/codecs.rst:1226
msgid "iso8859_16"
msgstr ""

#: ../../library/codecs.rst:1226
msgid "iso-8859-16, latin10, L10"
msgstr ""

#: ../../library/codecs.rst:1226
msgid "South-Eastern Europe"
msgstr ""

#: ../../library/codecs.rst:1228
msgid "johab"
msgstr ""

#: ../../library/codecs.rst:1228
msgid "cp1361, ms1361"
msgstr ""

#: ../../library/codecs.rst:1230
msgid "koi8_r"
msgstr ""

#: ../../library/codecs.rst:1232
msgid "koi8_t"
msgstr ""

#: ../../library/codecs.rst:1232
msgid "Tajik"
msgstr ""

#: ../../library/codecs.rst:1236
msgid "koi8_u"
msgstr ""

#: ../../library/codecs.rst:1238
msgid "kz1048"
msgstr ""

#: ../../library/codecs.rst:1238
msgid "kz_1048, strk1048_2002, rk1048"
msgstr ""

#: ../../library/codecs.rst:1238 ../../library/codecs.rst:1256
msgid "Kazakh"
msgstr ""

#: ../../library/codecs.rst:1242
msgid "mac_cyrillic"
msgstr ""

#: ../../library/codecs.rst:1242
msgid "maccyrillic"
msgstr ""

#: ../../library/codecs.rst:1245
msgid "mac_greek"
msgstr ""

#: ../../library/codecs.rst:1245
msgid "macgreek"
msgstr ""

#: ../../library/codecs.rst:1247
msgid "mac_iceland"
msgstr ""

#: ../../library/codecs.rst:1247
msgid "maciceland"
msgstr ""

#: ../../library/codecs.rst:1249
msgid "mac_latin2"
msgstr ""

#: ../../library/codecs.rst:1249
msgid "maclatin2, maccentraleurope, mac_centeuro"
msgstr ""

#: ../../library/codecs.rst:1252
msgid "mac_roman"
msgstr ""

#: ../../library/codecs.rst:1252
msgid "macroman, macintosh"
msgstr ""

#: ../../library/codecs.rst:1254
msgid "mac_turkish"
msgstr ""

#: ../../library/codecs.rst:1254
msgid "macturkish"
msgstr ""

#: ../../library/codecs.rst:1256
msgid "ptcp154"
msgstr ""

#: ../../library/codecs.rst:1256
msgid "csptcp154, pt154, cp154, cyrillic-asian"
msgstr ""

#: ../../library/codecs.rst:1259
msgid "shift_jis"
msgstr ""

#: ../../library/codecs.rst:1259
msgid "csshiftjis, shiftjis, sjis, s_jis"
msgstr ""

#: ../../library/codecs.rst:1262
msgid "shift_jis_2004"
msgstr ""

#: ../../library/codecs.rst:1262
msgid "shiftjis2004, sjis_2004, sjis2004"
msgstr ""

#: ../../library/codecs.rst:1265
msgid "shift_jisx0213"
msgstr ""

#: ../../library/codecs.rst:1265
msgid "shiftjisx0213, sjisx0213, s_jisx0213"
msgstr ""

#: ../../library/codecs.rst:1268
msgid "utf_32"
msgstr ""

#: ../../library/codecs.rst:1268
msgid "U32, utf32"
msgstr ""

#: ../../library/codecs.rst:1268 ../../library/codecs.rst:1270
#: ../../library/codecs.rst:1272 ../../library/codecs.rst:1274
#: ../../library/codecs.rst:1276 ../../library/codecs.rst:1278
#: ../../library/codecs.rst:1280 ../../library/codecs.rst:1282
#: ../../library/codecs.rst:1284
msgid "all languages"
msgstr ""

#: ../../library/codecs.rst:1270
msgid "utf_32_be"
msgstr ""

#: ../../library/codecs.rst:1270
msgid "UTF-32BE"
msgstr ""

#: ../../library/codecs.rst:1272
msgid "utf_32_le"
msgstr ""

#: ../../library/codecs.rst:1272
msgid "UTF-32LE"
msgstr ""

#: ../../library/codecs.rst:1274
msgid "utf_16"
msgstr ""

#: ../../library/codecs.rst:1274
msgid "U16, utf16"
msgstr ""

#: ../../library/codecs.rst:1276
msgid "utf_16_be"
msgstr ""

#: ../../library/codecs.rst:1276
msgid "UTF-16BE"
msgstr ""

#: ../../library/codecs.rst:1278
msgid "utf_16_le"
msgstr ""

#: ../../library/codecs.rst:1278
msgid "UTF-16LE"
msgstr ""

#: ../../library/codecs.rst:1280
msgid "utf_7"
msgstr ""

#: ../../library/codecs.rst:1280
msgid "U7, unicode-1-1-utf-7"
msgstr ""

#: ../../library/codecs.rst:1282
msgid "utf_8"
msgstr ""

#: ../../library/codecs.rst:1282
msgid "U8, UTF, utf8, cp65001"
msgstr ""

#: ../../library/codecs.rst:1284
msgid "utf_8_sig"
msgstr ""

#: ../../library/codecs.rst:1287
msgid ""
"The utf-16\\* and utf-32\\* encoders no longer allow surrogate code points "
"(``U+D800``--``U+DFFF``) to be encoded. The utf-32\\* decoders no longer "
"decode byte sequences that correspond to surrogate code points."
msgstr ""

#: ../../library/codecs.rst:1293
msgid "``cp65001`` is now an alias to ``utf_8``."
msgstr ""

#: ../../library/codecs.rst:1298
msgid "Python Specific Encodings"
msgstr ""

#: ../../library/codecs.rst:1300
msgid ""
"A number of predefined codecs are specific to Python, so their codec names "
"have no meaning outside Python. These are listed in the tables below based "
"on the expected input and output types (note that while text encodings are "
"the most common use case for codecs, the underlying codec infrastructure "
"supports arbitrary data transforms rather than just text encodings). For "
"asymmetric codecs, the stated meaning describes the encoding direction."
msgstr ""

#: ../../library/codecs.rst:1308
msgid "Text Encodings"
msgstr ""

#: ../../library/codecs.rst:1310
msgid ""
"The following codecs provide :class:`str` to :class:`bytes` encoding and "
":term:`bytes-like object` to :class:`str` decoding, similar to the Unicode "
"text encodings."
msgstr ""

#: ../../library/codecs.rst:1319
msgid "idna"
msgstr ""

#: ../../library/codecs.rst:1319
msgid ""
"Implement :rfc:`3490`, see also :mod:`encodings.idna`. Only "
"``errors='strict'`` is supported."
msgstr ""

#: ../../library/codecs.rst:1325
msgid "mbcs"
msgstr ""

#: ../../library/codecs.rst:1325
msgid "ansi, dbcs"
msgstr ""

#: ../../library/codecs.rst:1325
msgid ""
"Windows only: Encode the operand according to the ANSI codepage (CP_ACP)."
msgstr ""

#: ../../library/codecs.rst:1329
msgid "oem"
msgstr ""

#: ../../library/codecs.rst:1329
msgid ""
"Windows only: Encode the operand according to the OEM codepage (CP_OEMCP)."
msgstr ""

#: ../../library/codecs.rst:1335
msgid "palmos"
msgstr ""

#: ../../library/codecs.rst:1335
msgid "Encoding of PalmOS 3.5."
msgstr ""

#: ../../library/codecs.rst:1337
msgid "punycode"
msgstr ""

#: ../../library/codecs.rst:1337
msgid "Implement :rfc:`3492`. Stateful codecs are not supported."
msgstr ""

#: ../../library/codecs.rst:1341
msgid "raw_unicode_escape"
msgstr ""

#: ../../library/codecs.rst:1341
msgid ""
"Latin-1 encoding with ``\\uXXXX`` and ``\\UXXXXXXXX`` for other code points."
" Existing backslashes are not escaped in any way. It is used in the Python "
"pickle protocol."
msgstr ""

#: ../../library/codecs.rst:1350
msgid "undefined"
msgstr ""

#: ../../library/codecs.rst:1350
msgid ""
"Raise an exception for all conversions, even empty strings. The error "
"handler is ignored."
msgstr ""

#: ../../library/codecs.rst:1355
msgid "unicode_escape"
msgstr ""

#: ../../library/codecs.rst:1355
msgid ""
"Encoding suitable as the contents of a Unicode literal in ASCII-encoded "
"Python source code, except that quotes are not escaped. Decode from Latin-1 "
"source code. Beware that Python source code actually uses UTF-8 by default."
msgstr ""

#: ../../library/codecs.rst:1367
msgid "\"unicode_internal\" codec is removed."
msgstr ""

#: ../../library/codecs.rst:1374
msgid "Binary Transforms"
msgstr ""

#: ../../library/codecs.rst:1376
msgid ""
"The following codecs provide binary transforms: :term:`bytes-like object` to"
" :class:`bytes` mappings. They are not supported by :meth:`bytes.decode` "
"(which only produces :class:`str` output)."
msgstr ""

#: ../../library/codecs.rst:1384
msgid "Encoder / decoder"
msgstr ""

#: ../../library/codecs.rst:1386
msgid "base64_codec [#b64]_"
msgstr ""

#: ../../library/codecs.rst:1386
msgid "base64, base_64"
msgstr ""

#: ../../library/codecs.rst:1386
msgid ""
"Convert the operand to multiline MIME base64 (the result always includes a "
"trailing ``'\\n'``)."
msgstr ""

#: ../../library/codecs.rst:1391
msgid ""
"accepts any :term:`bytes-like object` as input for encoding and decoding"
msgstr ""

#: ../../library/codecs.rst:1386
msgid ":meth:`base64.encodebytes` / :meth:`base64.decodebytes`"
msgstr ""

#: ../../library/codecs.rst:1397
msgid "bz2_codec"
msgstr ""

#: ../../library/codecs.rst:1397
msgid "bz2"
msgstr ""

#: ../../library/codecs.rst:1397
msgid "Compress the operand using bz2."
msgstr ""

#: ../../library/codecs.rst:1397
msgid ":meth:`bz2.compress` / :meth:`bz2.decompress`"
msgstr ""

#: ../../library/codecs.rst:1400
msgid "hex_codec"
msgstr ""

#: ../../library/codecs.rst:1400
msgid "hex"
msgstr ""

#: ../../library/codecs.rst:1400
msgid ""
"Convert the operand to hexadecimal representation, with two digits per byte."
msgstr ""

#: ../../library/codecs.rst:1400
msgid ":meth:`binascii.b2a_hex` / :meth:`binascii.a2b_hex`"
msgstr ""

#: ../../library/codecs.rst:1405
msgid "quopri_codec"
msgstr ""

#: ../../library/codecs.rst:1405
msgid "quopri, quotedprintable, quoted_printable"
msgstr ""

#: ../../library/codecs.rst:1405
msgid "Convert the operand to MIME quoted printable."
msgstr ""

#: ../../library/codecs.rst:1405
msgid ":meth:`quopri.encode` with ``quotetabs=True`` / :meth:`quopri.decode`"
msgstr ""

#: ../../library/codecs.rst:1409
msgid "uu_codec"
msgstr ""

#: ../../library/codecs.rst:1409
msgid "uu"
msgstr ""

#: ../../library/codecs.rst:1409
msgid "Convert the operand using uuencode."
msgstr ""

#: ../../library/codecs.rst:1409
msgid ":meth:`uu.encode` / :meth:`uu.decode`"
msgstr ""

#: ../../library/codecs.rst:1412
msgid "zlib_codec"
msgstr ""

#: ../../library/codecs.rst:1412
msgid "zip, zlib"
msgstr ""

#: ../../library/codecs.rst:1412
msgid "Compress the operand using gzip."
msgstr ""

#: ../../library/codecs.rst:1412
msgid ":meth:`zlib.compress` / :meth:`zlib.decompress`"
msgstr ""

#: ../../library/codecs.rst:1416
msgid ""
"In addition to :term:`bytes-like objects <bytes-like object>`, "
"``'base64_codec'`` also accepts ASCII-only instances of :class:`str` for "
"decoding"
msgstr ""

#: ../../library/codecs.rst:1420
msgid "Restoration of the binary transforms."
msgstr ""

#: ../../library/codecs.rst:1423
msgid "Restoration of the aliases for the binary transforms."
msgstr ""

#: ../../library/codecs.rst:1430
msgid "Text Transforms"
msgstr ""

#: ../../library/codecs.rst:1432
msgid ""
"The following codec provides a text transform: a :class:`str` to "
":class:`str` mapping. It is not supported by :meth:`str.encode` (which only "
"produces :class:`bytes` output)."
msgstr ""

#: ../../library/codecs.rst:1441
msgid "rot_13"
msgstr ""

#: ../../library/codecs.rst:1441
msgid "rot13"
msgstr ""

#: ../../library/codecs.rst:1441
msgid "Return the Caesar-cypher encryption of the operand."
msgstr ""

#: ../../library/codecs.rst:1446
msgid "Restoration of the ``rot_13`` text transform."
msgstr ""

#: ../../library/codecs.rst:1449
msgid "Restoration of the ``rot13`` alias."
msgstr ""

#: ../../library/codecs.rst:1454
msgid ""
":mod:`encodings.idna` --- Internationalized Domain Names in Applications"
msgstr ""

#: ../../library/codecs.rst:1460
msgid ""
"This module implements :rfc:`3490` (Internationalized Domain Names in "
"Applications) and :rfc:`3492` (Nameprep: A Stringprep Profile for "
"Internationalized Domain Names (IDN)). It builds upon the ``punycode`` "
"encoding and :mod:`stringprep`."
msgstr ""

#: ../../library/codecs.rst:1465
msgid ""
"If you need the IDNA 2008 standard from :rfc:`5891` and :rfc:`5895`, use the"
" third-party `idna module <https://pypi.org/project/idna/>`_."
msgstr ""

#: ../../library/codecs.rst:1468
msgid ""
"These RFCs together define a protocol to support non-ASCII characters in "
"domain names. A domain name containing non-ASCII characters (such as "
"``www.Alliancefrançaise.nu``) is converted into an ASCII-compatible encoding"
" (ACE, such as ``www.xn--alliancefranaise-npb.nu``). The ACE form of the "
"domain name is then used in all places where arbitrary characters are not "
"allowed by the protocol, such as DNS queries, HTTP :mailheader:`Host` "
"fields, and so on. This conversion is carried out in the application; if "
"possible invisible to the user: The application should transparently convert"
" Unicode domain labels to IDNA on the wire, and convert back ACE labels to "
"Unicode before presenting them to the user."
msgstr ""

#: ../../library/codecs.rst:1479
msgid ""
"Python supports this conversion in several ways:  the ``idna`` codec "
"performs conversion between Unicode and ACE, separating an input string into"
" labels based on the separator characters defined in :rfc:`section 3.1 of "
"RFC 3490 <3490#section-3.1>` and converting each label to ACE as required, "
"and conversely separating an input byte string into labels based on the "
"``.`` separator and converting any ACE labels found into unicode. "
"Furthermore, the :mod:`socket` module transparently converts Unicode host "
"names to ACE, so that applications need not be concerned about converting "
"host names themselves when they pass them to the socket module. On top of "
"that, modules that have host names as function parameters, such as "
":mod:`http.client` and :mod:`ftplib`, accept Unicode host names "
"(:mod:`http.client` then also transparently sends an IDNA hostname in the "
":mailheader:`Host` field if it sends that field at all)."
msgstr ""

#: ../../library/codecs.rst:1492
msgid ""
"When receiving host names from the wire (such as in reverse name lookup), no"
" automatic conversion to Unicode is performed: applications wishing to "
"present such host names to the user should decode them to Unicode."
msgstr ""

#: ../../library/codecs.rst:1496
msgid ""
"The module :mod:`encodings.idna` also implements the nameprep procedure, "
"which performs certain normalizations on host names, to achieve case-"
"insensitivity of international domain names, and to unify similar "
"characters. The nameprep functions can be used directly if desired."
msgstr ""

#: ../../library/codecs.rst:1504
msgid ""
"Return the nameprepped version of *label*. The implementation currently "
"assumes query strings, so ``AllowUnassigned`` is true."
msgstr ""

#: ../../library/codecs.rst:1510
msgid ""
"Convert a label to ASCII, as specified in :rfc:`3490`. ``UseSTD3ASCIIRules``"
" is assumed to be false."
msgstr ""

#: ../../library/codecs.rst:1516
msgid "Convert a label to Unicode, as specified in :rfc:`3490`."
msgstr ""

#: ../../library/codecs.rst:1520
msgid ":mod:`encodings.mbcs` --- Windows ANSI codepage"
msgstr ""

#: ../../library/codecs.rst:1525
msgid "This module implements the ANSI codepage (CP_ACP)."
msgstr ""

#: ../../library/codecs.rst:1528
msgid ":ref:`Availability <availability>`: Windows only."
msgstr ""

#: ../../library/codecs.rst:1529
msgid "Support any error handler."
msgstr ""

#: ../../library/codecs.rst:1532
msgid ""
"Before 3.2, the *errors* argument was ignored; ``'replace'`` was always used"
" to encode, and ``'ignore'`` to decode."
msgstr ""

#: ../../library/codecs.rst:1538
msgid ":mod:`encodings.utf_8_sig` --- UTF-8 codec with BOM signature"
msgstr ""

#: ../../library/codecs.rst:1544
msgid ""
"This module implements a variant of the UTF-8 codec. On encoding, a UTF-8 "
"encoded BOM will be prepended to the UTF-8 encoded bytes. For the stateful "
"encoder this is only done once (on the first write to the byte stream). On "
"decoding, an optional UTF-8 encoded BOM at the start of the data will be "
"skipped."
msgstr ""
