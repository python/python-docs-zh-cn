# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/getopt.rst:2
msgid ":mod:`getopt` --- C-style parser for command line options"
msgstr ":mod:`getopt` --- C 风格的命令行选项解析器"

#: ../../library/getopt.rst:8
msgid "**Source code:** :source:`Lib/getopt.py`"
msgstr "**源代码:** :source:`Lib/getopt.py`"

#: ../../library/getopt.rst:12
msgid ""
"The :mod:`getopt` module is a parser for command line options whose API is "
"designed to be familiar to users of the C :c:func:`getopt` function. Users "
"who are unfamiliar with the C :c:func:`getopt` function or who would like to"
" write less code and get better help and error messages should consider "
"using the :mod:`argparse` module instead."
msgstr ""
":mod:`getopt` 模块是一个命令行选项解析器，其 API 设计会让 C :c:func:`getopt` 函数的用户感到熟悉。 不熟悉 C "
":c:func:`getopt` 函数或者希望写更少代码并获得更完善帮助和错误消息的用户应当考虑改用 :mod:`argparse` 模块。"

#: ../../library/getopt.rst:20
msgid ""
"This module helps scripts to parse the command line arguments in "
"``sys.argv``. It supports the same conventions as the Unix :c:func:`getopt` "
"function (including the special meanings of arguments of the form '``-``' "
"and '``--``').  Long options similar to those supported by GNU software may "
"be used as well via an optional third argument."
msgstr ""
"此模块可协助脚本解析 ``sys.argv`` 中的命令行参数。 它支持与 Unix :c:func:`getopt` 函数相同的惯例（包括形式如 "
"'``-``' 与 '``--``' 的参数的特殊含义）。 也能通过可选的第三个参数来使用与 GNU 软件所支持形式相类似的长选项。"

#: ../../library/getopt.rst:26
msgid "This module provides two functions and an exception:"
msgstr "此模块提供了两个函数和一个异常:"

#: ../../library/getopt.rst:32
msgid ""
"Parses command line options and parameter list.  *args* is the argument list"
" to be parsed, without the leading reference to the running program. "
"Typically, this means ``sys.argv[1:]``. *shortopts* is the string of option "
"letters that the script wants to recognize, with options that require an "
"argument followed by a colon (``':'``; i.e., the same format that Unix "
":c:func:`getopt` uses)."
msgstr ""
"解析命令行选项与形参列表。 *args* 为要解析的参数列表，不包含最开头的对正在运行的程序的引用。 通常这意味着 ``sys.argv[1:]``。 "
"*shortopts* 为脚本所要识别的字母选项，包含要求后缀一个冒号 (``':'``；即与 Unix :c:func:`getopt` "
"所用的格式相同) 的选项。"

#: ../../library/getopt.rst:40
msgid ""
"Unlike GNU :c:func:`getopt`, after a non-option argument, all further "
"arguments are considered also non-options. This is similar to the way non-"
"GNU Unix systems work."
msgstr ""
"与 GNU :c:func:`getopt` 不同，在非选项参数之后，所有后续参数都会被视为非选项。 这类似于非 GNU Unix 系统的运作方式。"

#: ../../library/getopt.rst:44
msgid ""
"*longopts*, if specified, must be a list of strings with the names of the "
"long options which should be supported.  The leading ``'--'`` characters "
"should not be included in the option name.  Long options which require an "
"argument should be followed by an equal sign (``'='``).  Optional arguments "
"are not supported.  To accept only long options, *shortopts* should be an "
"empty string.  Long options on the command line can be recognized so long as"
" they provide a prefix of the option name that matches exactly one of the "
"accepted options.  For example, if *longopts* is ``['foo', 'frob']``, the "
"option ``--fo`` will match as ``--foo``, but ``--f`` will not match "
"uniquely, so :exc:`GetoptError` will be raised."
msgstr ""
"如果指定了 *longopts*，则必须为一个由应当被支持的长选项名称组成的列表。 开头的 ``'--'`` 字符不应被包括在选项名称中。 "
"要求参数的长选项后应当带一个等号 (``'='``)。 可选参数不被支持。 如果想仅接受长选项，则 *shortopts* 应为一个空字符串。 "
"命令行中的长选项只要提供了恰好能匹配可接受选项之一的选项名称前缀即可被识别。 举例来说，如果 *longopts* 为 ``['foo', "
"'frob']``，则选项 ``--fo`` 将匹配为 ``--foo``，但 ``--f`` 将不能得到唯一匹配，因此将引发 "
":exc:`GetoptError`。"

#: ../../library/getopt.rst:55
msgid ""
"The return value consists of two elements: the first is a list of ``(option,"
" value)`` pairs; the second is the list of program arguments left after the "
"option list was stripped (this is a trailing slice of *args*).  Each option-"
"and-value pair returned has the option as its first element, prefixed with a"
" hyphen for short options (e.g., ``'-x'``) or two hyphens for long options "
"(e.g., ``'--long-option'``), and the option argument as its second element, "
"or an empty string if the option has no argument.  The options occur in the "
"list in the same order in which they were found, thus allowing multiple "
"occurrences.  Long and short options may be mixed."
msgstr ""
"返回值由两个元素组成：第一个是 ``(option, value)`` 对的列表；第二个是在去除该选项列表后余下的程序参数列表（这也就是 *args* "
"的尾部切片）。每个被返回的选项与值对的第一个元素是选项，短选项前缀一个连字符 (例如 ``'-x'``)，长选项则前缀两个连字符 (例如 ``'--"
"long-option'``)，第二个元素是选项参数，如果选项不带参数则为空字符串。 列表中选项的排列顺序与它们被解析的顺序相同，因此允许多次出现。 "
"长选项与短选项可以混用。"

#: ../../library/getopt.rst:68
msgid ""
"This function works like :func:`getopt`, except that GNU style scanning mode"
" is used by default. This means that option and non-option arguments may be "
"intermixed. The :func:`getopt` function stops processing options as soon as "
"a non-option argument is encountered."
msgstr ""
"此函数与 :func:`getopt` 类似，区别在于它默认使用 GNU 风格的扫描模式。 这意味着选项和非选项参数可能会混在一起。 "
":func:`getopt` 函数将在遇到非选项参数时立即停止处理选项。"

#: ../../library/getopt.rst:73
msgid ""
"If the first character of the option string is ``'+'``, or if the "
"environment variable :envvar:`POSIXLY_CORRECT` is set, then option "
"processing stops as soon as a non-option argument is encountered."
msgstr ""
"如果选项字符串的第一个字符为 ``'+'``，或者如果设置了环境变量 "
":envvar:`POSIXLY_CORRECT`，则选项处理会在遇到非选项参数时立即停止。"

#: ../../library/getopt.rst:80
msgid ""
"This is raised when an unrecognized option is found in the argument list or "
"when an option requiring an argument is given none. The argument to the "
"exception is a string indicating the cause of the error.  For long options, "
"an argument given to an option which does not require one will also cause "
"this exception to be raised.  The attributes :attr:`msg` and :attr:`opt` "
"give the error message and related option; if there is no specific option to"
" which the exception relates, :attr:`opt` is an empty string."
msgstr ""
"This is raised当参数列表中出现不可识别的选项或者当一个需要参数的选项未带参数时将引发此异常。 此异常的参数是一个指明错误原因的字符串。 "
"对于长选项，将一个参数传给不需要参数的选项也将导致引发此异常。 :attr:`msg` 和 :attr:`opt` "
"属性会给出错误消息和关联的选项；如果没有关联到异常的特定选项，则 :attr:`opt` 将为空字符串。"

#: ../../library/getopt.rst:91
msgid "Alias for :exc:`GetoptError`; for backward compatibility."
msgstr ":exc:`GetoptError` 的别名；用于向后兼容。"

#: ../../library/getopt.rst:93
msgid "An example using only Unix style options:"
msgstr "一个仅使用 Unix 风格选项的例子:"

#: ../../library/getopt.rst:105
msgid "Using long option names is equally easy:"
msgstr "使用长选项名也同样容易:"

#: ../../library/getopt.rst:118
msgid "In a script, typical usage is something like this::"
msgstr "在脚本中，典型的用法类似这样::"

#: ../../library/getopt.rst:147
msgid ""
"Note that an equivalent command line interface could be produced with less "
"code and more informative help and error messages by using the "
":mod:`argparse` module::"
msgstr "请注意通过 :mod:`argparse` 模块可以使用更少的代码并附带更详细的帮助与错误消息生成等价的命令行接口::"

#: ../../library/getopt.rst:162
msgid "Module :mod:`argparse`"
msgstr "模块 :mod:`argparse`"

#: ../../library/getopt.rst:163
msgid "Alternative command line option and argument parsing library."
msgstr "替代的命令行选项和参数解析库。"
