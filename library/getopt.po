# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/getopt.rst:2
msgid ":mod:`!getopt` --- C-style parser for command line options"
msgstr ":mod:`!getopt` --- C 风格的命令行选项解析器"

#: ../../library/getopt.rst:8
msgid "**Source code:** :source:`Lib/getopt.py`"
msgstr "**源代码:** :source:`Lib/getopt.py`"

#: ../../library/getopt.rst:12
msgid ""
"This module is considered feature complete. A more declarative and "
"extensible alternative to this API is provided in the :mod:`optparse` "
"module. Further functional enhancements for command line parameter "
"processing are provided either as third party modules on PyPI, or else as "
"features in the :mod:`argparse` module."
msgstr ""
"该模块被认为具有完备的特性。 在 :mod:`optparse` 模块中提供了一个针对此 API 的更为声明式和可扩展的替代物。 "
"对命令行形参处理进一步的功能增强或是作为 PyPI 上的第三方模块，或是作为 :mod:`argparse` 模块中的特性被提供。"

#: ../../library/getopt.rst:20
msgid ""
"This module helps scripts to parse the command line arguments in "
"``sys.argv``. It supports the same conventions as the Unix :c:func:`!getopt`"
" function (including the special meanings of arguments of the form '``-``' "
"and '``--``').  Long options similar to those supported by GNU software may "
"be used as well via an optional third argument."
msgstr ""
"此模块可协助脚本解析 ``sys.argv`` 中的命令行参数。 它支持与 Unix :c:func:`!getopt` 函数相同的惯例 (包括形式为 "
"'``-``' 和 '``--``' 的参数的特殊含义)。 也可以通过可选的第三个参数来使用类似于 GNU 软件所支持形式的长选项。"

#: ../../library/getopt.rst:26
msgid ""
"Users who are unfamiliar with the Unix :c:func:`!getopt` function should "
"consider using the :mod:`argparse` module instead. Users who are familiar "
"with the Unix :c:func:`!getopt` function, but would like to get equivalent "
"behavior while writing less code and getting better help and error messages "
"should consider using the :mod:`optparse` module. See :ref:`choosing-an-"
"argument-parser` for additional details."
msgstr ""
"不熟悉 Unix :c:func:`!getopt` 函数的用户应当考虑改用 :mod:`argparse` 模块。 熟悉 Unix "
":c:func:`!getopt` 函数，但希望在获得等价的行为同时使用更少的代码又具有更好的帮助和错误信息的用户应当考虑使用 "
":mod:`optparse` 模块。 请参阅 :ref:`choosing-an-argument-parser` 了解更多细节。"

#: ../../library/getopt.rst:33
msgid "This module provides two functions and an exception:"
msgstr "此模块提供了两个函数和一个异常:"

#: ../../library/getopt.rst:39
msgid ""
"Parses command line options and parameter list.  *args* is the argument list"
" to be parsed, without the leading reference to the running program. "
"Typically, this means ``sys.argv[1:]``. *shortopts* is the string of option "
"letters that the script wants to recognize, with options that require an "
"argument followed by a colon (``':'``) and options that accept an optional "
"argument followed by two colons (``'::'``); i.e., the same format that Unix "
":c:func:`!getopt` uses."
msgstr ""
"解析命令行选项与形参列表。 *args* 是要解析的参数列表，不包含最开头的对正在运行的程序的引用。 通常，这意味着 ``sys.argv[1:]``。"
" *shortopts* "
"是脚本要识别的选项字母字符串，选项需要一个参数则后跟一个冒号（``':'``），选项接受一个可选参数则后跟两个冒号（``'::'``）；即与 Unix "
":c:func:`!getopt` 所用的格式相同。"

#: ../../library/getopt.rst:48
msgid ""
"Unlike GNU :c:func:`!getopt`, after a non-option argument, all further "
"arguments are considered also non-options. This is similar to the way non-"
"GNU Unix systems work."
msgstr ""
"与 GNU :c:func:`!getopt` 不同，在非选项参数之后，所有后续参数都会被视为非选项。 这类似于非 GNU Unix 系统的运作方式。"

#: ../../library/getopt.rst:52
msgid ""
"*longopts*, if specified, must be a list of strings with the names of the "
"long options which should be supported.  The leading ``'--'`` characters "
"should not be included in the option name.  Long options which require an "
"argument should be followed by an equal sign (``'='``). Long options which "
"accept an optional argument should be followed by an equal sign and question"
" mark (``'=?'``). To accept only long options, *shortopts* should be an "
"empty string.  Long options on the command line can be recognized so long as"
" they provide a prefix of the option name that matches exactly one of the "
"accepted options.  For example, if *longopts* is ``['foo', 'frob']``, the "
"option ``--fo`` will match as ``--foo``, but ``--f`` will not match "
"uniquely, so :exc:`GetoptError` will be raised."
msgstr ""
"如果指定了 *longopts*，则必须为一个由应当被支持的长选项名称组成的列表。 开头的 ``'--'`` 字符不应被包括在选项名称中。 "
"需要参数的长选项应当后跟一个等号 (``'='``)。 接受可选参数的长选项应当后跟等号和问号（``'=?'``）。 如果想仅接受长选项，则 "
"*shortopts* 应为一个空字符串。 命令行中的长选项只要提供了恰好能匹配可接受选项之一的选项名称前缀即可被识别。 举例来说，如果 "
"*longopts* 为 ``['foo', 'frob']``，则选项 ``--fo`` 将匹配为 ``--foo``，但 ``--f`` "
"将不能得到唯一匹配，因此将引发 :exc:`GetoptError`。"

#: ../../library/getopt.rst:65
msgid ""
"The return value consists of two elements: the first is a list of ``(option,"
" value)`` pairs; the second is the list of program arguments left after the "
"option list was stripped (this is a trailing slice of *args*).  Each option-"
"and-value pair returned has the option as its first element, prefixed with a"
" hyphen for short options (e.g., ``'-x'``) or two hyphens for long options "
"(e.g., ``'--long-option'``), and the option argument as its second element, "
"or an empty string if the option has no argument.  The options occur in the "
"list in the same order in which they were found, thus allowing multiple "
"occurrences.  Long and short options may be mixed."
msgstr ""
"返回值由两个元素组成：第一个是 ``(option, value)`` 对的列表；第二个是在去除该选项列表后余下的程序参数列表（这也就是 *args* "
"的尾部切片）。每个被返回的选项与值对的第一个元素是选项，短选项前缀一个连字符 (例如 ``'-x'``)，长选项则前缀两个连字符 (例如 ``'--"
"long-option'``)，第二个元素是选项参数，如果选项不带参数则为空字符串。 列表中选项的排列顺序与它们被解析的顺序相同，因此允许多次出现。 "
"长选项与短选项可以混用。"

#: ../../library/getopt.rst:75
msgid "Optional arguments are supported."
msgstr "支持可选参数。"

#: ../../library/getopt.rst:81
msgid ""
"This function works like :func:`getopt`, except that GNU style scanning mode"
" is used by default. This means that option and non-option arguments may be "
"intermixed. The :func:`getopt` function stops processing options as soon as "
"a non-option argument is encountered."
msgstr ""
"此函数与 :func:`getopt` 类似，区别在于它默认使用 GNU 风格的扫描模式。 这意味着选项和非选项参数可能会混在一起。 "
":func:`getopt` 函数将在遇到非选项参数时立即停止处理选项。"

#: ../../library/getopt.rst:86
msgid ""
"If the first character of the option string is ``'+'``, or if the "
"environment variable :envvar:`!POSIXLY_CORRECT` is set, then option "
"processing stops as soon as a non-option argument is encountered."
msgstr ""
"如果选项字符串的第一个字符为 ``'+'``，或者如果设置了环境变量 "
":envvar:`!POSIXLY_CORRECT`，则选项处理会在遇到非选项参数时立即停止。"

#: ../../library/getopt.rst:90
msgid ""
"If the first character of the option string is ``'-'``, non-option arguments"
" that are followed by options are added to the list of option-and-value "
"pairs as a pair that has ``None`` as its first element and the list of non-"
"option arguments as its second element. The second element of the "
":func:`!gnu_getopt` result is a list of program arguments after the last "
"option."
msgstr ""
"如果选项字符串的第一个字符是 ``'-'``，则后面跟着选项的非选项参数将作为一对添加到选项和值对列表中，该对的第一个元素是 "
"``None``，第二个元素是非选项参数列表。:func:`!gnu_getopt` 结果的第二个元素是最后一个选项后的程序参数列表。"

#: ../../library/getopt.rst:97
msgid ""
"Support for returning intermixed options and non-option arguments in order."
msgstr "支持按顺序返回混合了的选项和非选项参数。"

#: ../../library/getopt.rst:103
msgid ""
"This is raised when an unrecognized option is found in the argument list or "
"when an option requiring an argument is given none. The argument to the "
"exception is a string indicating the cause of the error.  For long options, "
"an argument given to an option which does not require one will also cause "
"this exception to be raised.  The attributes :attr:`!msg` and :attr:`!opt` "
"give the error message and related option; if there is no specific option to"
" which the exception relates, :attr:`!opt` is an empty string."
msgstr ""
"当参数列表中出现不可识别的选项或当一个需要参数的选项未带参数时将引发此异常。 此异常的参数是一个指明错误原因的字符串。 "
"对于长选项，将一个参数传给不需要参数的选项也将导致此异常被引发。 :attr:`!msg` 和 :attr:`!opt` "
"属性将给出错误消息和关联的选项；如果没有关联到此异常的特定选项，则 :attr:`!opt` 将为空字符串。"

#: ../../library/getopt.rst:114
msgid "Alias for :exc:`GetoptError`; for backward compatibility."
msgstr ":exc:`GetoptError` 的别名；用于向后兼容。"

#: ../../library/getopt.rst:116
msgid "An example using only Unix style options:"
msgstr "一个仅使用 Unix 风格选项的例子:"

#: ../../library/getopt.rst:118
msgid ""
">>> import getopt\n"
">>> args = '-a -b -cfoo -d bar a1 a2'.split()\n"
">>> args\n"
"['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'abc:d:')\n"
">>> optlist\n"
"[('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]\n"
">>> args\n"
"['a1', 'a2']"
msgstr ""
">>> import getopt\n"
">>> args = '-a -b -cfoo -d bar a1 a2'.split()\n"
">>> args\n"
"['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'abc:d:')\n"
">>> optlist\n"
"[('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]\n"
">>> args\n"
"['a1', 'a2']"

#: ../../library/getopt.rst:130
msgid "Using long option names is equally easy:"
msgstr "使用长选项名也同样容易:"

#: ../../library/getopt.rst:132
msgid ""
">>> s = '--condition=foo --testing --output-file abc.def -x a1 a2'\n"
">>> args = s.split()\n"
">>> args\n"
"['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'x', [\n"
"...     'condition=', 'output-file=', 'testing'])\n"
">>> optlist\n"
"[('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-x', '')]\n"
">>> args\n"
"['a1', 'a2']"
msgstr ""
">>> s = '--condition=foo --testing --output-file abc.def -x a1 a2'\n"
">>> args = s.split()\n"
">>> args\n"
"['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'x', [\n"
"...     'condition=', 'output-file=', 'testing'])\n"
">>> optlist\n"
"[('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-x', '')]\n"
">>> args\n"
"['a1', 'a2']"

#: ../../library/getopt.rst:145
msgid "Optional arguments should be specified explicitly:"
msgstr "应当显式地指定可选参数："

#: ../../library/getopt.rst:147
msgid ""
">>> s = '-Con -C --color=off --color a1 a2'\n"
">>> args = s.split()\n"
">>> args\n"
"['-Con', '-C', '--color=off', '--color', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'C::', ['color=?'])\n"
">>> optlist\n"
"[('-C', 'on'), ('-C', ''), ('--color', 'off'), ('--color', '')]\n"
">>> args\n"
"['a1', 'a2']"
msgstr ""
">>> s = '-Con -C --color=off --color a1 a2'\n"
">>> args = s.split()\n"
">>> args\n"
"['-Con', '-C', '--color=off', '--color', 'a1', 'a2']\n"
">>> optlist, args = getopt.getopt(args, 'C::', ['color=?'])\n"
">>> optlist\n"
"[('-C', 'on'), ('-C', ''), ('--color', 'off'), ('--color', '')]\n"
">>> args\n"
"['a1', 'a2']"

#: ../../library/getopt.rst:159
msgid "The order of options and non-option arguments can be preserved:"
msgstr "选项和非选项参数的顺序可以被保留："

#: ../../library/getopt.rst:161
msgid ""
">>> s = 'a1 -x a2 a3 a4 --long a5 a6'\n"
">>> args = s.split()\n"
">>> args\n"
"['a1', '-x', 'a2', 'a3', 'a4', '--long', 'a5', 'a6']\n"
">>> optlist, args = getopt.gnu_getopt(args, '-x:', ['long='])\n"
">>> optlist\n"
"[(None, ['a1']), ('-x', 'a2'), (None, ['a3', 'a4']), ('--long', 'a5')]\n"
">>> args\n"
"['a6']"
msgstr ""
">>> s = 'a1 -x a2 a3 a4 --long a5 a6'\n"
">>> args = s.split()\n"
">>> args\n"
"['a1', '-x', 'a2', 'a3', 'a4', '--long', 'a5', 'a6']\n"
">>> optlist, args = getopt.gnu_getopt(args, '-x:', ['long='])\n"
">>> optlist\n"
"[(None, ['a1']), ('-x', 'a2'), (None, ['a3', 'a4']), ('--long', 'a5')]\n"
">>> args\n"
"['a6']"

#: ../../library/getopt.rst:173
msgid "In a script, typical usage is something like this:"
msgstr "在脚本中，典型的用法是这样的:"

#: ../../library/getopt.rst:175
msgid ""
"import getopt, sys\n"
"\n"
"def main():\n"
"    try:\n"
"        opts, args = getopt.getopt(sys.argv[1:], \"ho:v\", [\"help\", \"output=\"])\n"
"    except getopt.GetoptError as err:\n"
"        # print help information and exit:\n"
"        print(err)  # will print something like \"option -a not recognized\"\n"
"        usage()\n"
"        sys.exit(2)\n"
"    output = None\n"
"    verbose = False\n"
"    for o, a in opts:\n"
"        if o == \"-v\":\n"
"            verbose = True\n"
"        elif o in (\"-h\", \"--help\"):\n"
"            usage()\n"
"            sys.exit()\n"
"        elif o in (\"-o\", \"--output\"):\n"
"            output = a\n"
"        else:\n"
"            assert False, \"unhandled option\"\n"
"    process(args, output=output, verbose=verbose)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""
"import getopt, sys\n"
"\n"
"def main():\n"
"    try:\n"
"        opts, args = getopt.getopt(sys.argv[1:], \"ho:v\", [\"help\", \"output=\"])\n"
"    except getopt.GetoptError as err:\n"
"        # 打印帮助信息并退出。\n"
"        print(err)  # 将打印 \"option -a not recognized\" 之类的消息\n"
"        usage()\n"
"        sys.exit(2)\n"
"    output = None\n"
"    verbose = False\n"
"    for o, a in opts:\n"
"        if o == \"-v\":\n"
"            verbose = True\n"
"        elif o in (\"-h\", \"--help\"):\n"
"            usage()\n"
"            sys.exit()\n"
"        elif o in (\"-o\", \"--output\"):\n"
"            output = a\n"
"        else:\n"
"            assert False, \"unhandled option\"\n"
"    process(args, output=output, verbose=verbose)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"

#: ../../library/getopt.rst:204
msgid ""
"Note that an equivalent command line interface could be produced with less "
"code and more informative help and error messages by using the "
":mod:`optparse` module:"
msgstr "请注意可以通过使用 :mod:`optparse` 模块以更少的代码并附带更清晰的帮助和错误消息生成等价的命令行界面："

#: ../../library/getopt.rst:207
msgid ""
"import optparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = optparse.OptionParser()\n"
"    parser.add_option('-o', '--output')\n"
"    parser.add_option('-v', dest='verbose', action='store_true')\n"
"    opts, args = parser.parse_args()\n"
"    process(args, output=opts.output, verbose=opts.verbose)"
msgstr ""
"import optparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = optparse.OptionParser()\n"
"    parser.add_option('-o', '--output')\n"
"    parser.add_option('-v', dest='verbose', action='store_true')\n"
"    opts, args = parser.parse_args()\n"
"    process(args, output=opts.output, verbose=opts.verbose)"

#: ../../library/getopt.rst:218
msgid ""
"A roughly equivalent command line interface for this case can also be "
"produced by using the :mod:`argparse` module:"
msgstr "对这种情况也可以通过使用 :mod:`argparse` 模块来生成大致等价的命令行界面："

#: ../../library/getopt.rst:221
msgid ""
"import argparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = argparse.ArgumentParser()\n"
"    parser.add_argument('-o', '--output')\n"
"    parser.add_argument('-v', dest='verbose', action='store_true')\n"
"    parser.add_argument('rest', nargs='*')\n"
"    args = parser.parse_args()\n"
"    process(args.rest, output=args.output, verbose=args.verbose)"
msgstr ""
"import argparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = argparse.ArgumentParser()\n"
"    parser.add_argument('-o', '--output')\n"
"    parser.add_argument('-v', dest='verbose', action='store_true')\n"
"    parser.add_argument('rest', nargs='*')\n"
"    args = parser.parse_args()\n"
"    process(args.rest, output=args.output, verbose=args.verbose)"

#: ../../library/getopt.rst:233
msgid ""
"See :ref:`choosing-an-argument-parser` for details on how the ``argparse`` "
"version of this code differs in behaviour from the ``optparse`` (and "
"``getopt``) version."
msgstr ""
"请参阅 :ref:`choosing-an-argument-parser` 了解有关此代码的 ``argparse`` 版本与 "
"``optparse`` (和 ``getopt``) 版本间行为差异的详情。"

#: ../../library/getopt.rst:239
msgid "Module :mod:`optparse`"
msgstr "模块 :mod:`optparse`"

#: ../../library/getopt.rst:240
msgid "Declarative command line option parsing."
msgstr "声明式命令行选项解析。"

#: ../../library/getopt.rst:242
msgid "Module :mod:`argparse`"
msgstr "模块 :mod:`argparse`"

#: ../../library/getopt.rst:243
msgid "More opinionated command line option and argument parsing library."
msgstr "更有针对性的命令行选项和参数解析库。"
