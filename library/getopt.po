# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/getopt.rst:2
msgid ":mod:`getopt` --- C-style parser for command line options"
msgstr ""

#: ../../library/getopt.rst:8
msgid "**Source code:** :source:`Lib/getopt.py`"
msgstr ""

#: ../../library/getopt.rst:12
msgid ""
"The :mod:`getopt` module is a parser for command line options whose API is "
"designed to be familiar to users of the C :c:func:`getopt` function. Users "
"who are unfamiliar with the C :c:func:`getopt` function or who would like to"
" write less code and get better help and error messages should consider "
"using the :mod:`argparse` module instead."
msgstr ""

#: ../../library/getopt.rst:20
msgid ""
"This module helps scripts to parse the command line arguments in "
"``sys.argv``. It supports the same conventions as the Unix :c:func:`getopt` "
"function (including the special meanings of arguments of the form '``-``' "
"and '``--``').  Long options similar to those supported by GNU software may "
"be used as well via an optional third argument."
msgstr ""

#: ../../library/getopt.rst:26
msgid "This module provides two functions and an exception:"
msgstr ""

#: ../../library/getopt.rst:32
msgid ""
"Parses command line options and parameter list.  *args* is the argument list"
" to be parsed, without the leading reference to the running program. "
"Typically, this means ``sys.argv[1:]``. *shortopts* is the string of option "
"letters that the script wants to recognize, with options that require an "
"argument followed by a colon (``':'``; i.e., the same format that Unix "
":c:func:`getopt` uses)."
msgstr ""

#: ../../library/getopt.rst:40
msgid ""
"Unlike GNU :c:func:`getopt`, after a non-option argument, all further "
"arguments are considered also non-options. This is similar to the way non-"
"GNU Unix systems work."
msgstr ""

#: ../../library/getopt.rst:44
msgid ""
"*longopts*, if specified, must be a list of strings with the names of the "
"long options which should be supported.  The leading ``'--'`` characters "
"should not be included in the option name.  Long options which require an "
"argument should be followed by an equal sign (``'='``).  Optional arguments "
"are not supported.  To accept only long options, *shortopts* should be an "
"empty string.  Long options on the command line can be recognized so long as"
" they provide a prefix of the option name that matches exactly one of the "
"accepted options.  For example, if *longopts* is ``['foo', 'frob']``, the "
"option ``--fo`` will match as ``--foo``, but ``--f`` will not match "
"uniquely, so :exc:`GetoptError` will be raised."
msgstr ""

#: ../../library/getopt.rst:55
msgid ""
"The return value consists of two elements: the first is a list of ``(option,"
" value)`` pairs; the second is the list of program arguments left after the "
"option list was stripped (this is a trailing slice of *args*).  Each option-"
"and-value pair returned has the option as its first element, prefixed with a"
" hyphen for short options (e.g., ``'-x'``) or two hyphens for long options "
"(e.g., ``'--long-option'``), and the option argument as its second element, "
"or an empty string if the option has no argument.  The options occur in the "
"list in the same order in which they were found, thus allowing multiple "
"occurrences.  Long and short options may be mixed."
msgstr ""

#: ../../library/getopt.rst:68
msgid ""
"This function works like :func:`getopt`, except that GNU style scanning mode"
" is used by default. This means that option and non-option arguments may be "
"intermixed. The :func:`getopt` function stops processing options as soon as "
"a non-option argument is encountered."
msgstr ""

#: ../../library/getopt.rst:73
msgid ""
"If the first character of the option string is ``'+'``, or if the "
"environment variable :envvar:`POSIXLY_CORRECT` is set, then option "
"processing stops as soon as a non-option argument is encountered."
msgstr ""

#: ../../library/getopt.rst:80
msgid ""
"This is raised when an unrecognized option is found in the argument list or "
"when an option requiring an argument is given none. The argument to the "
"exception is a string indicating the cause of the error.  For long options, "
"an argument given to an option which does not require one will also cause "
"this exception to be raised.  The attributes :attr:`msg` and :attr:`opt` "
"give the error message and related option; if there is no specific option to"
" which the exception relates, :attr:`opt` is an empty string."
msgstr ""

#: ../../library/getopt.rst:91
msgid "Alias for :exc:`GetoptError`; for backward compatibility."
msgstr ""

#: ../../library/getopt.rst:93
msgid "An example using only Unix style options:"
msgstr ""

#: ../../library/getopt.rst:105
msgid "Using long option names is equally easy:"
msgstr ""

#: ../../library/getopt.rst:118
msgid "In a script, typical usage is something like this::"
msgstr ""

#: ../../library/getopt.rst:147
msgid ""
"Note that an equivalent command line interface could be produced with less "
"code and more informative help and error messages by using the "
":mod:`argparse` module::"
msgstr ""

#: ../../library/getopt.rst:162
msgid "Module :mod:`argparse`"
msgstr ""

#: ../../library/getopt.rst:163
msgid "Alternative command line option and argument parsing library."
msgstr ""
