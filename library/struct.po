# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/struct.rst:2
msgid ":mod:`struct` --- Interpret bytes as packed binary data"
msgstr ""

#: ../../library/struct.rst:7
msgid "**Source code:** :source:`Lib/struct.py`"
msgstr ""

#: ../../library/struct.rst:15
msgid ""
"This module converts between Python values and C structs represented as "
"Python :class:`bytes` objects.  Compact :ref:`format strings <struct-format-"
"strings>` describe the intended conversions to/from Python values. The "
"module's functions and objects can be used for two largely distinct "
"applications, data exchange with external sources (files or network "
"connections), or data transfer between the Python application and the C "
"layer."
msgstr ""

#: ../../library/struct.rst:25
msgid ""
"When no prefix character is given, native mode is the default. It packs or "
"unpacks data based on the platform and compiler on which the Python "
"interpreter was built. The result of packing a given C struct includes pad "
"bytes which maintain proper alignment for the C types involved; similarly, "
"alignment is taken into account when unpacking.  In contrast, when "
"communicating data between external sources, the programmer is responsible "
"for defining byte ordering and padding between elements. See :ref:`struct-"
"alignment` for details."
msgstr ""

#: ../../library/struct.rst:35
msgid ""
"Several :mod:`struct` functions (and methods of :class:`Struct`) take a "
"*buffer* argument.  This refers to objects that implement the "
":ref:`bufferobjects` and provide either a readable or read-writable buffer."
"  The most common types used for that purpose are :class:`bytes` and "
":class:`bytearray`, but many other types that can be viewed as an array of "
"bytes implement the buffer protocol, so that they can be read/filled without"
" additional copying from a :class:`bytes` object."
msgstr ""

#: ../../library/struct.rst:44
msgid "Functions and Exceptions"
msgstr ""

#: ../../library/struct.rst:46
msgid "The module defines the following exception and functions:"
msgstr ""

#: ../../library/struct.rst:51
msgid ""
"Exception raised on various occasions; argument is a string describing what "
"is wrong."
msgstr ""

#: ../../library/struct.rst:57
msgid ""
"Return a bytes object containing the values *v1*, *v2*, ... packed according"
" to the format string *format*.  The arguments must match the values "
"required by the format exactly."
msgstr ""

#: ../../library/struct.rst:64
msgid ""
"Pack the values *v1*, *v2*, ... according to the format string *format* and "
"write the packed bytes into the writable buffer *buffer* starting at "
"position *offset*.  Note that *offset* is a required argument."
msgstr ""

#: ../../library/struct.rst:71
msgid ""
"Unpack from the buffer *buffer* (presumably packed by ``pack(format, ...)``)"
" according to the format string *format*.  The result is a tuple even if it "
"contains exactly one item.  The buffer's size in bytes must match the size "
"required by the format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:79
msgid ""
"Unpack from *buffer* starting at position *offset*, according to the format "
"string *format*.  The result is a tuple even if it contains exactly one "
"item.  The buffer's size in bytes, starting at position *offset*, must be at"
" least the size required by the format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:87
msgid ""
"Iteratively unpack from the buffer *buffer* according to the format string "
"*format*.  This function returns an iterator which will read equally sized "
"chunks from the buffer until all its contents have been consumed.  The "
"buffer's size in bytes must be a multiple of the size required by the "
"format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:93
msgid "Each iteration yields a tuple as specified by the format string."
msgstr ""

#: ../../library/struct.rst:100
msgid ""
"Return the size of the struct (and hence of the bytes object produced by "
"``pack(format, ...)``) corresponding to the format string *format*."
msgstr ""

#: ../../library/struct.rst:107
msgid "Format Strings"
msgstr ""

#: ../../library/struct.rst:109
msgid ""
"Format strings describe the data layout when packing and unpacking data.  "
"They are built up from :ref:`format characters<format-characters>`, which "
"specify the type of data being packed/unpacked.  In addition, special "
"characters control the :ref:`byte order, size and alignment<struct-"
"alignment>`. Each format string consists of an optional prefix character "
"which describes the overall properties of the data and one or more format "
"characters which describe the actual data values and padding."
msgstr ""

#: ../../library/struct.rst:121
msgid "Byte Order, Size, and Alignment"
msgstr ""

#: ../../library/struct.rst:123
msgid ""
"By default, C types are represented in the machine's native format and byte "
"order, and properly aligned by skipping pad bytes if necessary (according to"
" the rules used by the C compiler). This behavior is chosen so that the "
"bytes of a packed struct correspond exactly to the memory layout of the "
"corresponding C struct. Whether to use native byte ordering and padding or "
"standard formats depends on the application."
msgstr ""

#: ../../library/struct.rst:139
msgid ""
"Alternatively, the first character of the format string can be used to "
"indicate the byte order, size and alignment of the packed data, according to"
" the following table:"
msgstr ""

#: ../../library/struct.rst:144
msgid "Character"
msgstr ""

#: ../../library/struct.rst:144
msgid "Byte order"
msgstr ""

#: ../../library/struct.rst:144
msgid "Size"
msgstr ""

#: ../../library/struct.rst:144
msgid "Alignment"
msgstr ""

#: ../../library/struct.rst:146
msgid "``@``"
msgstr ""

#: ../../library/struct.rst:146 ../../library/struct.rst:148
msgid "native"
msgstr ""

#: ../../library/struct.rst:148
msgid "``=``"
msgstr ""

#: ../../library/struct.rst:148 ../../library/struct.rst:150
#: ../../library/struct.rst:152 ../../library/struct.rst:154
msgid "standard"
msgstr ""

#: ../../library/struct.rst:148 ../../library/struct.rst:150
#: ../../library/struct.rst:152 ../../library/struct.rst:154
msgid "none"
msgstr ""

#: ../../library/struct.rst:150
msgid "``<``"
msgstr ""

#: ../../library/struct.rst:150
msgid "little-endian"
msgstr ""

#: ../../library/struct.rst:152
msgid "``>``"
msgstr ""

#: ../../library/struct.rst:152
msgid "big-endian"
msgstr ""

#: ../../library/struct.rst:154
msgid "``!``"
msgstr ""

#: ../../library/struct.rst:154
msgid "network (= big-endian)"
msgstr ""

#: ../../library/struct.rst:157
msgid "If the first character is not one of these, ``'@'`` is assumed."
msgstr ""

#: ../../library/struct.rst:161
msgid ""
"The number 1023 (``0x3ff`` in hexadecimal) has the following byte "
"representations:"
msgstr ""

#: ../../library/struct.rst:163
msgid "``03 ff`` in big-endian (``>``)"
msgstr ""

#: ../../library/struct.rst:164
msgid "``ff 03`` in little-endian (``<``)"
msgstr ""

#: ../../library/struct.rst:166
msgid "Python example:"
msgstr ""

#: ../../library/struct.rst:174
msgid ""
"Native byte order is big-endian or little-endian, depending on the host "
"system. For example, Intel x86, AMD64 (x86-64), and Apple M1 are little-"
"endian; IBM z and many legacy architectures are big-endian. Use "
":data:`sys.byteorder` to check the endianness of your system."
msgstr ""

#: ../../library/struct.rst:179
msgid ""
"Native size and alignment are determined using the C compiler's ``sizeof`` "
"expression.  This is always combined with native byte order."
msgstr ""

#: ../../library/struct.rst:182
msgid ""
"Standard size depends only on the format character;  see the table in the "
":ref:`format-characters` section."
msgstr ""

#: ../../library/struct.rst:185
msgid ""
"Note the difference between ``'@'`` and ``'='``: both use native byte order,"
" but the size and alignment of the latter is standardized."
msgstr ""

#: ../../library/struct.rst:188
msgid ""
"The form ``'!'`` represents the network byte order which is always big-"
"endian as defined in `IETF RFC 1700 <IETF RFC 1700_>`_."
msgstr ""

#: ../../library/struct.rst:191
msgid ""
"There is no way to indicate non-native byte order (force byte-swapping); use"
" the appropriate choice of ``'<'`` or ``'>'``."
msgstr ""

#: ../../library/struct.rst:194 ../../library/struct.rst:273
msgid "Notes:"
msgstr ""

#: ../../library/struct.rst:196
msgid ""
"Padding is only automatically added between successive structure members. No"
" padding is added at the beginning or the end of the encoded struct."
msgstr ""

#: ../../library/struct.rst:199
msgid ""
"No padding is added when using non-native size and alignment, e.g. with '<',"
" '>', '=', and '!'."
msgstr ""

#: ../../library/struct.rst:202
msgid ""
"To align the end of a structure to the alignment requirement of a particular"
" type, end the format with the code for that type with a repeat count of "
"zero.  See :ref:`struct-examples`."
msgstr ""

#: ../../library/struct.rst:210
msgid "Format Characters"
msgstr ""

#: ../../library/struct.rst:212
msgid ""
"Format characters have the following meaning; the conversion between C and "
"Python values should be obvious given their types.  The 'Standard size' "
"column refers to the size of the packed value in bytes when using standard "
"size; that is, when the format string starts with one of ``'<'``, ``'>'``, "
"``'!'`` or ``'='``.  When using native size, the size of the packed value is"
" platform-dependent."
msgstr ""

#: ../../library/struct.rst:220
msgid "Format"
msgstr ""

#: ../../library/struct.rst:220
msgid "C Type"
msgstr ""

#: ../../library/struct.rst:220
msgid "Python type"
msgstr ""

#: ../../library/struct.rst:220
msgid "Standard size"
msgstr ""

#: ../../library/struct.rst:220
msgid "Notes"
msgstr ""

#: ../../library/struct.rst:222
msgid "``x``"
msgstr ""

#: ../../library/struct.rst:222
msgid "pad byte"
msgstr ""

#: ../../library/struct.rst:222
msgid "no value"
msgstr ""

#: ../../library/struct.rst:222
msgid "\\(7)"
msgstr ""

#: ../../library/struct.rst:224
msgid "``c``"
msgstr ""

#: ../../library/struct.rst:224
msgid ":c:expr:`char`"
msgstr ""

#: ../../library/struct.rst:224
msgid "bytes of length 1"
msgstr ""

#: ../../library/struct.rst:224 ../../library/struct.rst:226
#: ../../library/struct.rst:228 ../../library/struct.rst:230
msgid "1"
msgstr ""

#: ../../library/struct.rst:226
msgid "``b``"
msgstr ""

#: ../../library/struct.rst:226
msgid ":c:expr:`signed char`"
msgstr ""

#: ../../library/struct.rst:226 ../../library/struct.rst:228
#: ../../library/struct.rst:232 ../../library/struct.rst:234
#: ../../library/struct.rst:236 ../../library/struct.rst:238
#: ../../library/struct.rst:240 ../../library/struct.rst:242
#: ../../library/struct.rst:244 ../../library/struct.rst:246
#: ../../library/struct.rst:249 ../../library/struct.rst:251
#: ../../library/struct.rst:263
msgid "integer"
msgstr ""

#: ../../library/struct.rst:226
msgid "\\(1), \\(2)"
msgstr ""

#: ../../library/struct.rst:228
msgid "``B``"
msgstr ""

#: ../../library/struct.rst:228
msgid ":c:expr:`unsigned char`"
msgstr ""

#: ../../library/struct.rst:228 ../../library/struct.rst:232
#: ../../library/struct.rst:234 ../../library/struct.rst:236
#: ../../library/struct.rst:238 ../../library/struct.rst:240
#: ../../library/struct.rst:242 ../../library/struct.rst:244
#: ../../library/struct.rst:246
msgid "\\(2)"
msgstr ""

#: ../../library/struct.rst:230
msgid "``?``"
msgstr ""

#: ../../library/struct.rst:230
msgid ":c:expr:`_Bool`"
msgstr ""

#: ../../library/struct.rst:230
msgid "bool"
msgstr ""

#: ../../library/struct.rst:230
msgid "\\(1)"
msgstr ""

#: ../../library/struct.rst:232
msgid "``h``"
msgstr ""

#: ../../library/struct.rst:232
msgid ":c:expr:`short`"
msgstr ""

#: ../../library/struct.rst:232 ../../library/struct.rst:234
#: ../../library/struct.rst:253
msgid "2"
msgstr ""

#: ../../library/struct.rst:234
msgid "``H``"
msgstr ""

#: ../../library/struct.rst:234
msgid ":c:expr:`unsigned short`"
msgstr ""

#: ../../library/struct.rst:236
msgid "``i``"
msgstr ""

#: ../../library/struct.rst:236
msgid ":c:expr:`int`"
msgstr ""

#: ../../library/struct.rst:236 ../../library/struct.rst:238
#: ../../library/struct.rst:240 ../../library/struct.rst:242
#: ../../library/struct.rst:255
msgid "4"
msgstr ""

#: ../../library/struct.rst:238
msgid "``I``"
msgstr ""

#: ../../library/struct.rst:238
msgid ":c:expr:`unsigned int`"
msgstr ""

#: ../../library/struct.rst:240
msgid "``l``"
msgstr ""

#: ../../library/struct.rst:240
msgid ":c:expr:`long`"
msgstr ""

#: ../../library/struct.rst:242
msgid "``L``"
msgstr ""

#: ../../library/struct.rst:242
msgid ":c:expr:`unsigned long`"
msgstr ""

#: ../../library/struct.rst:244
msgid "``q``"
msgstr ""

#: ../../library/struct.rst:244
msgid ":c:expr:`long long`"
msgstr ""

#: ../../library/struct.rst:244 ../../library/struct.rst:246
#: ../../library/struct.rst:257
msgid "8"
msgstr ""

#: ../../library/struct.rst:246
msgid "``Q``"
msgstr ""

#: ../../library/struct.rst:246
msgid ":c:expr:`unsigned long long`"
msgstr ""

#: ../../library/struct.rst:249
msgid "``n``"
msgstr ""

#: ../../library/struct.rst:249
msgid ":c:type:`ssize_t`"
msgstr ""

#: ../../library/struct.rst:249 ../../library/struct.rst:251
msgid "\\(3)"
msgstr ""

#: ../../library/struct.rst:251
msgid "``N``"
msgstr ""

#: ../../library/struct.rst:251
msgid ":c:type:`size_t`"
msgstr ""

#: ../../library/struct.rst:253
msgid "``e``"
msgstr ""

#: ../../library/struct.rst:253
msgid "\\(6)"
msgstr ""

#: ../../library/struct.rst:253 ../../library/struct.rst:255
#: ../../library/struct.rst:257
msgid "float"
msgstr ""

#: ../../library/struct.rst:253 ../../library/struct.rst:255
#: ../../library/struct.rst:257
msgid "\\(4)"
msgstr ""

#: ../../library/struct.rst:255
msgid "``f``"
msgstr ""

#: ../../library/struct.rst:255
msgid ":c:expr:`float`"
msgstr ""

#: ../../library/struct.rst:257
msgid "``d``"
msgstr ""

#: ../../library/struct.rst:257
msgid ":c:expr:`double`"
msgstr ""

#: ../../library/struct.rst:259
msgid "``s``"
msgstr ""

#: ../../library/struct.rst:259 ../../library/struct.rst:261
msgid ":c:expr:`char[]`"
msgstr ""

#: ../../library/struct.rst:259 ../../library/struct.rst:261
msgid "bytes"
msgstr ""

#: ../../library/struct.rst:259
msgid "\\(9)"
msgstr ""

#: ../../library/struct.rst:261
msgid "``p``"
msgstr ""

#: ../../library/struct.rst:261
msgid "\\(8)"
msgstr ""

#: ../../library/struct.rst:263
msgid "``P``"
msgstr ""

#: ../../library/struct.rst:263
msgid ":c:expr:`void \\*`"
msgstr ""

#: ../../library/struct.rst:263
msgid "\\(5)"
msgstr ""

#: ../../library/struct.rst:266
msgid "Added support for the ``'n'`` and ``'N'`` formats."
msgstr ""

#: ../../library/struct.rst:269
msgid "Added support for the ``'e'`` format."
msgstr ""

#: ../../library/struct.rst:278
msgid ""
"The ``'?'`` conversion code corresponds to the :c:expr:`_Bool` type defined "
"by C99. If this type is not available, it is simulated using a "
":c:expr:`char`. In standard mode, it is always represented by one byte."
msgstr ""

#: ../../library/struct.rst:283
msgid ""
"When attempting to pack a non-integer using any of the integer conversion "
"codes, if the non-integer has a :meth:`~object.__index__` method then that "
"method is called to convert the argument to an integer before packing."
msgstr ""

#: ../../library/struct.rst:287
msgid "Added use of the :meth:`~object.__index__` method for non-integers."
msgstr ""

#: ../../library/struct.rst:291
msgid ""
"The ``'n'`` and ``'N'`` conversion codes are only available for the native "
"size (selected as the default or with the ``'@'`` byte order character). For"
" the standard size, you can use whichever of the other integer formats fits "
"your application."
msgstr ""

#: ../../library/struct.rst:297
msgid ""
"For the ``'f'``, ``'d'`` and ``'e'`` conversion codes, the packed "
"representation uses the IEEE 754 binary32, binary64 or binary16 format (for "
"``'f'``, ``'d'`` or ``'e'`` respectively), regardless of the floating-point "
"format used by the platform."
msgstr ""

#: ../../library/struct.rst:303
msgid ""
"The ``'P'`` format character is only available for the native byte ordering "
"(selected as the default or with the ``'@'`` byte order character). The byte"
" order character ``'='`` chooses to use little- or big-endian ordering based"
" on the host system. The struct module does not interpret this as native "
"ordering, so the ``'P'`` format is not available."
msgstr ""

#: ../../library/struct.rst:310
msgid ""
"The IEEE 754 binary16 \"half precision\" type was introduced in the 2008 "
"revision of the `IEEE 754 standard <ieee 754 standard_>`_. It has a sign "
"bit, a 5-bit exponent and 11-bit precision (with 10 bits explicitly stored),"
" and can represent numbers between approximately ``6.1e-05`` and ``6.5e+04``"
" at full precision. This type is not widely supported by C compilers: on a "
"typical machine, an unsigned short can be used for storage, but not for math"
" operations. See the Wikipedia page on the `half-precision floating-point "
"format <half precision format_>`_ for more information."
msgstr ""

#: ../../library/struct.rst:320
msgid "When packing, ``'x'`` inserts one NUL byte."
msgstr ""

#: ../../library/struct.rst:323
msgid ""
"The ``'p'`` format character encodes a \"Pascal string\", meaning a short "
"variable-length string stored in a *fixed number of bytes*, given by the "
"count. The first byte stored is the length of the string, or 255, whichever "
"is smaller.  The bytes of the string follow.  If the string passed in to "
":func:`pack` is too long (longer than the count minus 1), only the leading "
"``count-1`` bytes of the string are stored.  If the string is shorter than "
"``count-1``, it is padded with null bytes so that exactly count bytes in all"
" are used.  Note that for :func:`unpack`, the ``'p'`` format character "
"consumes ``count`` bytes, but that the string returned can never contain "
"more than 255 bytes."
msgstr ""

#: ../../library/struct.rst:335
msgid ""
"For the ``'s'`` format character, the count is interpreted as the length of "
"the bytes, not a repeat count like for the other format characters; for "
"example, ``'10s'`` means a single 10-byte string mapping to or from a single"
" Python byte string, while ``'10c'`` means 10 separate one byte character "
"elements (e.g., ``cccccccccc``) mapping to or from ten different Python byte"
" objects. (See :ref:`struct-examples` for a concrete demonstration of the "
"difference.) If a count is not given, it defaults to 1.  For packing, the "
"string is truncated or padded with null bytes as appropriate to make it fit."
" For unpacking, the resulting bytes object always has exactly the specified "
"number of bytes.  As a special case, ``'0s'`` means a single, empty string "
"(while ``'0c'`` means 0 characters)."
msgstr ""

#: ../../library/struct.rst:348
msgid ""
"A format character may be preceded by an integral repeat count.  For "
"example, the format string ``'4h'`` means exactly the same as ``'hhhh'``."
msgstr ""

#: ../../library/struct.rst:351
msgid ""
"Whitespace characters between formats are ignored; a count and its format "
"must not contain whitespace though."
msgstr ""

#: ../../library/struct.rst:354
msgid ""
"When packing a value ``x`` using one of the integer formats (``'b'``, "
"``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, ``'l'``, ``'L'``, ``'q'``, "
"``'Q'``), if ``x`` is outside the valid range for that format then "
":exc:`struct.error` is raised."
msgstr ""

#: ../../library/struct.rst:359
msgid ""
"Previously, some of the integer formats wrapped out-of-range values and "
"raised :exc:`DeprecationWarning` instead of :exc:`struct.error`."
msgstr ""

#: ../../library/struct.rst:365
msgid ""
"For the ``'?'`` format character, the return value is either :const:`True` "
"or :const:`False`. When packing, the truth value of the argument object is "
"used. Either 0 or 1 in the native or standard bool representation will be "
"packed, and any non-zero value will be ``True`` when unpacking."
msgstr ""

#: ../../library/struct.rst:375
msgid "Examples"
msgstr ""

#: ../../library/struct.rst:378
msgid ""
"Native byte order examples (designated by the ``'@'`` format prefix or lack "
"of any prefix character) may not match what the reader's machine produces as"
" that depends on the platform and compiler."
msgstr ""

#: ../../library/struct.rst:383
msgid ""
"Pack and unpack integers of three different sizes, using big endian "
"ordering::"
msgstr ""

#: ../../library/struct.rst:394
msgid "Attempt to pack an integer which is too large for the defined field::"
msgstr ""

#: ../../library/struct.rst:401
msgid ""
"Demonstrate the difference between ``'s'`` and ``'c'`` format characters::"
msgstr ""

#: ../../library/struct.rst:409
msgid ""
"Unpacked fields can be named by assigning them to variables or by wrapping "
"the result in a named tuple::"
msgstr ""

#: ../../library/struct.rst:420
msgid ""
"The ordering of format characters may have an impact on size in native mode "
"since padding is implicit. In standard mode, the user is responsible for "
"inserting any desired padding. Note in the first ``pack`` call below that "
"three NUL bytes were added after the packed ``'#'`` to align the following "
"integer on a four-byte boundary. In this example, the output was produced on"
" a little endian machine::"
msgstr ""

#: ../../library/struct.rst:437
msgid ""
"The following format ``'llh0l'`` results in two pad bytes being added at the"
" end, assuming the platform's longs are aligned on 4-byte boundaries::"
msgstr ""

#: ../../library/struct.rst:447
msgid "Module :mod:`array`"
msgstr ""

#: ../../library/struct.rst:447
msgid "Packed binary storage of homogeneous data."
msgstr ""

#: ../../library/struct.rst:450
msgid "Module :mod:`json`"
msgstr ""

#: ../../library/struct.rst:450
msgid "JSON encoder and decoder."
msgstr ""

#: ../../library/struct.rst:452
msgid "Module :mod:`pickle`"
msgstr ""

#: ../../library/struct.rst:453
msgid "Python object serialization."
msgstr ""

#: ../../library/struct.rst:459
msgid "Applications"
msgstr ""

#: ../../library/struct.rst:461
msgid ""
"Two main applications for the :mod:`struct` module exist, data interchange "
"between Python and C code within an application or another application "
"compiled using the same compiler (:ref:`native formats<struct-native-"
"formats>`), and data interchange between applications using agreed upon data"
" layout (:ref:`standard formats<struct-standard-formats>`).  Generally "
"speaking, the format strings constructed for these two domains are distinct."
msgstr ""

#: ../../library/struct.rst:472
msgid "Native Formats"
msgstr ""

#: ../../library/struct.rst:474
msgid ""
"When constructing format strings which mimic native layouts, the compiler "
"and machine architecture determine byte ordering and padding. In such cases,"
" the ``@`` format character should be used to specify native byte ordering "
"and data sizes.  Internal pad bytes are normally inserted automatically.  It"
" is possible that a zero-repeat format code will be needed at the end of a "
"format string to round up to the correct byte boundary for proper alignment "
"of consective chunks of data."
msgstr ""

#: ../../library/struct.rst:482
msgid ""
"Consider these two simple examples (on a 64-bit, little-endian machine)::"
msgstr ""

#: ../../library/struct.rst:490
msgid ""
"Data is not padded to an 8-byte boundary at the end of the second format "
"string without the use of extra padding.  A zero-repeat format code solves "
"that problem::"
msgstr ""

#: ../../library/struct.rst:497
msgid ""
"The ``'x'`` format code can be used to specify the repeat, but for native "
"formats it is better to use a zero-repeat format like ``'0l'``."
msgstr ""

#: ../../library/struct.rst:500
msgid ""
"By default, native byte ordering and alignment is used, but it is better to "
"be explicit and use the ``'@'`` prefix character."
msgstr ""

#: ../../library/struct.rst:507
msgid "Standard Formats"
msgstr ""

#: ../../library/struct.rst:509
msgid ""
"When exchanging data beyond your process such as networking or storage, be "
"precise.  Specify the exact byte order, size, and alignment.  Do not assume "
"they match the native order of a particular machine. For example, network "
"byte order is big-endian, while many popular CPUs are little-endian.  By "
"defining this explicitly, the user need not care about the specifics of the "
"platform their code is running on. The first character should typically be "
"``<`` or ``>`` (or ``!``).  Padding is the responsibility of the programmer."
"  The zero-repeat format character won't work.  Instead, the user must "
"explicitly add ``'x'`` pad bytes where needed.  Revisiting the examples from"
" the previous section, we have::"
msgstr ""

#: ../../library/struct.rst:536
msgid ""
"The above results (executed on a 64-bit machine) aren't guaranteed to match "
"when executed on different machines.  For example, the examples below were "
"executed on a 32-bit machine::"
msgstr ""

#: ../../library/struct.rst:551
msgid "Classes"
msgstr ""

#: ../../library/struct.rst:553
msgid "The :mod:`struct` module also defines the following type:"
msgstr ""

#: ../../library/struct.rst:558
msgid ""
"Return a new Struct object which writes and reads binary data according to "
"the format string *format*.  Creating a ``Struct`` object once and calling "
"its methods is more efficient than calling module-level functions with the "
"same format since the format string is only compiled once."
msgstr ""

#: ../../library/struct.rst:565
msgid ""
"The compiled versions of the most recent format strings passed to "
":class:`Struct` and the module-level functions are cached, so programs that "
"use only a few format strings needn't worry about reusing a single "
":class:`Struct` instance."
msgstr ""

#: ../../library/struct.rst:570
msgid "Compiled Struct objects support the following methods and attributes:"
msgstr ""

#: ../../library/struct.rst:574
msgid ""
"Identical to the :func:`pack` function, using the compiled format. "
"(``len(result)`` will equal :attr:`size`.)"
msgstr ""

#: ../../library/struct.rst:580
msgid ""
"Identical to the :func:`pack_into` function, using the compiled format."
msgstr ""

#: ../../library/struct.rst:585
msgid ""
"Identical to the :func:`unpack` function, using the compiled format. The "
"buffer's size in bytes must equal :attr:`size`."
msgstr ""

#: ../../library/struct.rst:591
msgid ""
"Identical to the :func:`unpack_from` function, using the compiled format. "
"The buffer's size in bytes, starting at position *offset*, must be at least "
":attr:`size`."
msgstr ""

#: ../../library/struct.rst:598
msgid ""
"Identical to the :func:`iter_unpack` function, using the compiled format. "
"The buffer's size in bytes must be a multiple of :attr:`size`."
msgstr ""

#: ../../library/struct.rst:605
msgid "The format string used to construct this Struct object."
msgstr ""

#: ../../library/struct.rst:607
msgid "The format string type is now :class:`str` instead of :class:`bytes`."
msgstr ""

#: ../../library/struct.rst:612
msgid ""
"The calculated size of the struct (and hence of the bytes object produced by"
" the :meth:`pack` method) corresponding to :attr:`format`."
msgstr ""

#: ../../library/struct.rst:9
msgid "C"
msgstr ""

#: ../../library/struct.rst:9
msgid "structures"
msgstr ""

#: ../../library/struct.rst:9
msgid "packing"
msgstr ""

#: ../../library/struct.rst:9
msgid "binary"
msgstr ""

#: ../../library/struct.rst:9
msgid "data"
msgstr ""

#: ../../library/struct.rst:132
msgid "@ (at)"
msgstr ""

#: ../../library/struct.rst:132 ../../library/struct.rst:276
#: ../../library/struct.rst:363
msgid "in struct format strings"
msgstr ""

#: ../../library/struct.rst:132
msgid "= (equals)"
msgstr ""

#: ../../library/struct.rst:132
msgid "< (less)"
msgstr ""

#: ../../library/struct.rst:132
msgid "> (greater)"
msgstr ""

#: ../../library/struct.rst:132
msgid "! (exclamation)"
msgstr ""

#: ../../library/struct.rst:276 ../../library/struct.rst:363
msgid "? (question mark)"
msgstr ""
