# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/socketserver.rst:2
msgid ":mod:`!socketserver` --- A framework for network servers"
msgstr ":mod:`!socketserver` --- 用于网络服务器的框架"

#: ../../library/socketserver.rst:7
msgid "**Source code:** :source:`Lib/socketserver.py`"
msgstr "**源代码:** :source:`Lib/socketserver.py`"

#: ../../library/socketserver.rst:11
msgid ""
"The :mod:`socketserver` module simplifies the task of writing network "
"servers."
msgstr ":mod:`socketserver` 模块简化了编写网络服务器的任务。"

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Availability"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See "
":ref:`wasm-availability` for more information."
msgstr "此模块在 WebAssembly 平台上无效或不可用。 请参阅 :ref:`wasm-availability` 了解详情。"

#: ../../library/socketserver.rst:15
msgid "There are four basic concrete server classes:"
msgstr "该模块具有四个基础实体服务器类:"

#: ../../library/socketserver.rst:20
msgid ""
"This uses the internet TCP protocol, which provides for continuous streams "
"of data between the client and server. If *bind_and_activate* is true, the "
"constructor automatically attempts to invoke :meth:`~BaseServer.server_bind`"
" and :meth:`~BaseServer.server_activate`.  The other parameters are passed "
"to the :class:`BaseServer` base class."
msgstr ""
"该类使用互联网 TCP 协议，它可以提供客户端与服务器之间的连续数据流。 如果 *bind_and_activate* "
"为真值，该类的构造器会自动尝试唤起 :meth:`~BaseServer.server_bind` 和 "
":meth:`~BaseServer.server_activate`。 其他形参会被传递给 :class:`BaseServer` 基类。"

#: ../../library/socketserver.rst:30
msgid ""
"This uses datagrams, which are discrete packets of information that may "
"arrive out of order or be lost while in transit.  The parameters are the "
"same as for :class:`TCPServer`."
msgstr "该类使用数据包，即一系列离散的信息分包，它们可能会无序地到达或在传输中丢失。 该类的形参与 :class:`TCPServer` 的相同。"

#: ../../library/socketserver.rst:38
msgid ""
"These more infrequently used classes are similar to the TCP and UDP classes,"
" but use Unix domain sockets; they're not available on non-Unix platforms.  "
"The parameters are the same as for :class:`TCPServer`."
msgstr ""
"这两个更常用的类与 TCP 和 UDP 类相似，但使用 Unix 域套接字；它们在非 Unix 系统平台上不可用。 它们的形参与 "
":class:`TCPServer` 的相同。"

#: ../../library/socketserver.rst:44
msgid ""
"These four classes process requests :dfn:`synchronously`; each request must "
"be completed before the next request can be started.  This isn't suitable if"
" each request takes a long time to complete, because it requires a lot of "
"computation, or because it returns a lot of data which the client is slow to"
" process.  The solution is to create a separate process or thread to handle "
"each request; the :class:`ForkingMixIn` and :class:`ThreadingMixIn` mix-in "
"classes can be used to support asynchronous behaviour."
msgstr ""
"这四个类会 :dfn:`同步地` 处理请求；每个请求必须完成才能开始下一个请求。 "
"这就不适用于每个请求要耗费很长时间来完成的情况，或者因为它需要大量的计算，又或者它返回了大量的数据而客户端处理起来很缓慢。 "
"解决方案是创建单独的进程或线程来处理每个请求；:class:`ForkingMixIn` 和 :class:`ThreadingMixIn` "
"混合类可以被用于支持异步行为。"

#: ../../library/socketserver.rst:52
msgid ""
"Creating a server requires several steps.  First, you must create a request "
"handler class by subclassing the :class:`BaseRequestHandler` class and "
"overriding its :meth:`~BaseRequestHandler.handle` method; this method will "
"process incoming requests.  Second, you must instantiate one of the server "
"classes, passing it the server's address and the request handler class. It "
"is recommended to use the server in a :keyword:`with` statement. Then call "
"the :meth:`~BaseServer.handle_request` or :meth:`~BaseServer.serve_forever` "
"method of the server object to process one or many requests.  Finally, call "
":meth:`~BaseServer.server_close` to close the socket (unless you used a "
":keyword:`!with` statement)."
msgstr ""
"创建一个服务器需要分几个步骤进行。 首先，你必须通过子类化 :class:`BaseRequestHandler` 类并重载其 "
":meth:`~BaseRequestHandler.handle` 方法来创建一个请求处理器类；这个方法将处理传入的请求。 "
"其次，你必须实例化某个服务器类，将服务器地址和请求处理器类传给它。 建议在 :keyword:`with` 语句中使用该服务器。 然后再调用服务器对象的"
" :meth:`~BaseServer.handle_request` 或 :meth:`~BaseServer.serve_forever` "
"方法来处理一个或多个请求。 最后，调用 :meth:`~BaseServer.server_close` 来关闭套接字（除非你使用了 "
":keyword:`!with` 语句）。"

#: ../../library/socketserver.rst:64
msgid ""
"When inheriting from :class:`ThreadingMixIn` for threaded connection "
"behavior, you should explicitly declare how you want your threads to behave "
"on an abrupt shutdown.  The :class:`ThreadingMixIn` class defines an "
"attribute *daemon_threads*, which indicates whether or not the server should"
" wait for thread termination.  You should set the flag explicitly if you "
"would like threads to behave autonomously; the default is :const:`False`, "
"meaning that Python will not exit until all threads created by "
":class:`ThreadingMixIn` have exited."
msgstr ""
"当从 :class:`ThreadingMixIn` 继承线程连接行为时，你应当显式地声明你希望在突然关机时你的线程采取何种行为。 "
":class:`ThreadingMixIn` 类定义了一个属性 *daemon_threads*，它指明服务器是否应当等待线程终止。 "
"如果你希望线程能自主行动你应当显式地设置这个旗标；默认值为 :const:`False`，表示 Python 将不会在 "
":class:`ThreadingMixIn` 所创建的所有线程都退出之前退出。"

#: ../../library/socketserver.rst:73
msgid ""
"Server classes have the same external methods and attributes, no matter what"
" network protocol they use."
msgstr "服务器类具有同样的外部方法和属性，无论它们使用哪种网络协议。"

#: ../../library/socketserver.rst:78
msgid "Server Creation Notes"
msgstr "服务器创建的说明"

#: ../../library/socketserver.rst:80
msgid ""
"There are five classes in an inheritance diagram, four of which represent "
"synchronous servers of four types::"
msgstr "在继承图中有五个类，其中四个代表四种类型的同步服务器::"

#: ../../library/socketserver.rst:83
msgid ""
"+------------+\n"
"| BaseServer |\n"
"+------------+\n"
"      |\n"
"      v\n"
"+-----------+        +------------------+\n"
"| TCPServer |------->| UnixStreamServer |\n"
"+-----------+        +------------------+\n"
"      |\n"
"      v\n"
"+-----------+        +--------------------+\n"
"| UDPServer |------->| UnixDatagramServer |\n"
"+-----------+        +--------------------+"
msgstr ""
"+------------+\n"
"| BaseServer |\n"
"+------------+\n"
"      |\n"
"      v\n"
"+-----------+        +------------------+\n"
"| TCPServer |------->| UnixStreamServer |\n"
"+-----------+        +------------------+\n"
"      |\n"
"      v\n"
"+-----------+        +--------------------+\n"
"| UDPServer |------->| UnixDatagramServer |\n"
"+-----------+        +--------------------+"

#: ../../library/socketserver.rst:97
msgid ""
"Note that :class:`UnixDatagramServer` derives from :class:`UDPServer`, not "
"from :class:`UnixStreamServer` --- the only difference between an IP and a "
"Unix server is the address family."
msgstr ""
"请注意 :class:`UnixDatagramServer` 是派生自 :class:`UDPServer`，而不是派生自 "
":class:`UnixStreamServer` --- IP 和 Unix 流服务器的唯一区别地址族。"

#: ../../library/socketserver.rst:105
msgid ""
"Forking and threading versions of each type of server can be created using "
"these mix-in classes.  For instance, :class:`ThreadingUDPServer` is created "
"as follows::"
msgstr ""
"每种服务器类型的分叉和线程版本都可以使用这些混合类来创建。 例如，:class:`ThreadingUDPServer` 的创建方式如下::"

#: ../../library/socketserver.rst:109
msgid ""
"class ThreadingUDPServer(ThreadingMixIn, UDPServer):\n"
"    pass"
msgstr ""
"class ThreadingUDPServer(ThreadingMixIn, UDPServer):\n"
"    pass"

#: ../../library/socketserver.rst:112
msgid ""
"The mix-in class comes first, since it overrides a method defined in "
":class:`UDPServer`.  Setting the various attributes also changes the "
"behavior of the underlying server mechanism."
msgstr "混合类先出现，因为它重载了 :class:`UDPServer` 中定义的一个方法。 设置各种属性也会改变下层服务器机制的行为。"

#: ../../library/socketserver.rst:116
msgid ""
":class:`ForkingMixIn` and the Forking classes mentioned below are only "
"available on POSIX platforms that support :func:`~os.fork`."
msgstr ":class:`ForkingMixIn` 和下文提及的分叉类仅在支持 :func:`~os.fork` 的 POSIX 系统平台上可用。"

#: ../../library/socketserver.rst:121
msgid ""
":meth:`ForkingMixIn.server_close <BaseServer.server_close>` waits until all "
"child processes complete, except if :attr:`block_on_close` attribute is "
"``False``."
msgstr ""
":meth:`ForkingMixIn.server_close <BaseServer.server_close>` 会等待直到所有子进程完成，除非 "
":attr:`block_on_close` 属性为 ``False``。"

#: ../../library/socketserver.rst:125
msgid ""
":meth:`ThreadingMixIn.server_close <BaseServer.server_close>` waits until "
"all non-daemon threads complete, except if :attr:`block_on_close` attribute "
"is ``False``."
msgstr ""
":meth:`ThreadingMixIn.server_close <BaseServer.server_close>` "
"会等待直到所有非守护程序类线程完成，除非 :attr:`block_on_close` 属性为 ``False``。"

#: ../../library/socketserver.rst:131
msgid ""
"For :class:`ThreadingMixIn` use daemonic threads by setting "
":data:`ThreadingMixIn.daemon_threads <daemon_threads>` to ``True`` to not "
"wait until threads complete."
msgstr ""
"对于 :class:`ThreadingMixIn` 可通过将 :data:`ThreadingMixIn.daemon_threads "
"<daemon_threads>` 设为 ``True`` 来使用守护线程从而无需等待线程完成。"

#: ../../library/socketserver.rst:137
msgid ""
":meth:`ForkingMixIn.server_close <BaseServer.server_close>` and "
":meth:`ThreadingMixIn.server_close <BaseServer.server_close>` now waits "
"until all child processes and non-daemonic threads complete. Add a new "
":attr:`ForkingMixIn.block_on_close <block_on_close>` class attribute to opt-"
"in for the pre-3.7 behaviour."
msgstr ""
":meth:`ForkingMixIn.server_close <BaseServer.server_close>` 和 "
":meth:`ThreadingMixIn.server_close <BaseServer.server_close>` "
"现在会等待直到所有子进程和非守护类线程完成。 新增了一个 :attr:`ForkingMixIn.block_on_close "
"<block_on_close>` 类属性用来选择 3.7 版之前的行为。"

#: ../../library/socketserver.rst:153
msgid "These classes are pre-defined using the mix-in classes."
msgstr "这些类都是使用混合类来预定义的。"

#: ../../library/socketserver.rst:155
msgid ""
"The ``ForkingUnixStreamServer`` and ``ForkingUnixDatagramServer`` classes "
"were added."
msgstr "增加了 ``ForkingUnixStreamServer`` 和 ``ForkingUnixDatagramServer`` 类。"

#: ../../library/socketserver.rst:159
msgid ""
"To implement a service, you must derive a class from "
":class:`BaseRequestHandler` and redefine its "
":meth:`~BaseRequestHandler.handle` method. You can then run various versions"
" of the service by combining one of the server classes with your request "
"handler class.  The request handler class must be different for datagram or "
"stream services.  This can be hidden by using the handler subclasses "
":class:`StreamRequestHandler` or :class:`DatagramRequestHandler`."
msgstr ""
"要实现一个服务，你必须从 :class:`BaseRequestHandler` 派生一个类并重定义其 "
":meth:`~BaseRequestHandler.handle` 方法。 然后你可以通过组合某种服务器类型与你的请求处理器类来运行各种版本的服务。 "
"请求处理器类对于数据报和流服务必须是不相同的。 这可以通过使用处理器子类 :class:`StreamRequestHandler` 或 "
":class:`DatagramRequestHandler` 来隐藏。"

#: ../../library/socketserver.rst:167
msgid ""
"Of course, you still have to use your head!  For instance, it makes no sense"
" to use a forking server if the service contains state in memory that can be"
" modified by different requests, since the modifications in the child "
"process would never reach the initial state kept in the parent process and "
"passed to each child.  In this case, you can use a threading server, but you"
" will probably have to use locks to protect the integrity of the shared "
"data."
msgstr ""
"当然，你仍然需要动点脑筋！ "
"举例来说，如果服务包含可能被不同请求所修改的内存状态则使用分叉服务器是没有意义的，因为在子进程中的修改将永远不会触及保存在父进程中的初始状态并传递到各个子进程。"
" 在这种情况下，你可以使用线程服务器，但你可能必须使用锁来保护共享数据的一致性。"

#: ../../library/socketserver.rst:174
msgid ""
"On the other hand, if you are building an HTTP server where all data is "
"stored externally (for instance, in the file system), a synchronous class "
"will essentially render the service \"deaf\" while one request is being "
"handled -- which may be for a very long time if a client is slow to receive "
"all the data it has requested.  Here a threading or forking server is "
"appropriate."
msgstr ""
"另一方面，如果你是在编写一个所有数据保存在外部（例如文件系统）的 HTTP 服务器，同步类实际上将在正在处理某个请求的时候“失聪” -- "
"如果某个客户端在接收它所请求的所有数据时很缓慢这可能会是非常长的时间。 这时线程或分叉服务器会更为适用。"

#: ../../library/socketserver.rst:180
msgid ""
"In some cases, it may be appropriate to process part of a request "
"synchronously, but to finish processing in a forked child depending on the "
"request data.  This can be implemented by using a synchronous server and "
"doing an explicit fork in the request handler class "
":meth:`~BaseRequestHandler.handle` method."
msgstr ""
"在某些情况下，合适的做法是同步地处理请求的一部分，但根据请求数据在分叉的子进程中完成处理。 这可以通过使用一个同步服务器并在请求处理器类 "
":meth:`~BaseRequestHandler.handle` 中进行显式分叉来实现。"

#: ../../library/socketserver.rst:185
msgid ""
"Another approach to handling multiple simultaneous requests in an "
"environment that supports neither threads nor :func:`~os.fork` (or where "
"these are too expensive or inappropriate for the service) is to maintain an "
"explicit table of partially finished requests and to use :mod:`selectors` to"
" decide which request to work on next (or whether to handle a new incoming "
"request).  This is particularly important for stream services where each "
"client can potentially be connected for a long time (if threads or "
"subprocesses cannot be used)."
msgstr ""
"另一种可以在既不支持线程也不支持 :func:`~os.fork` "
"的环境（或者对于本服务来说这两者开销过大或不适用）中处理多个同时请求的方式是维护一个显式的部分完成的请求表并使用 :mod:`selectors` "
"来决定接下来要处理哪个请求（或者是否要处理一个新传入的请求）。 "
"这对于流式服务来说特别重要，因为每个客户端可能会连接很长的时间（如果不能使用线程或子进程）。"

#: ../../library/socketserver.rst:198
msgid "Server Objects"
msgstr "Server 对象"

#: ../../library/socketserver.rst:202
msgid ""
"This is the superclass of all Server objects in the module.  It defines the "
"interface, given below, but does not implement most of the methods, which is"
" done in subclasses.  The two parameters are stored in the respective "
":attr:`server_address` and :attr:`RequestHandlerClass` attributes."
msgstr ""
"这是本模块中所有 Server 对象的超类。 它定义了下文给出的接口，但没有实现大部分的方法，它们应在子类中实现。 两个形参存储在对应的 "
":attr:`server_address` 和 :attr:`RequestHandlerClass` 属性中。"

#: ../../library/socketserver.rst:210
msgid ""
"Return an integer file descriptor for the socket on which the server is "
"listening.  This function is most commonly passed to :mod:`selectors`, to "
"allow monitoring multiple servers in the same process."
msgstr ""
"返回服务器正在监听的套接字的以整数表示的文件描述符。 此函数最常被传递给 :mod:`selectors`，以允许在同一进程中监控多个服务器。"

#: ../../library/socketserver.rst:217
msgid ""
"Process a single request.  This function calls the following methods in "
"order: :meth:`get_request`, :meth:`verify_request`, and "
":meth:`process_request`.  If the user-provided "
":meth:`~BaseRequestHandler.handle` method of the handler class raises an "
"exception, the server's :meth:`handle_error` method will be called.  If no "
"request is received within :attr:`timeout` seconds, :meth:`handle_timeout` "
"will be called and :meth:`handle_request` will return."
msgstr ""
"处理单个请求。 此函数会依次调用下列方法: :meth:`get_request`, :meth:`verify_request` 和 "
":meth:`process_request`。 如果用户提供的处理器类的 :meth:`~BaseRequestHandler.handle` "
"方法引发了异常，则将调用服务器的 :meth:`handle_error` 方法。 如果在 :attr:`timeout` 秒内未接收到请求，将会调用 "
":meth:`handle_timeout` 并将返回 :meth:`handle_request`。"

#: ../../library/socketserver.rst:229
msgid ""
"Handle requests until an explicit :meth:`shutdown` request.  Poll for "
"shutdown every *poll_interval* seconds. Ignores the :attr:`timeout` "
"attribute.  It also calls :meth:`service_actions`, which may be used by a "
"subclass or mixin to provide actions specific to a given service.  For "
"example, the :class:`ForkingMixIn` class uses :meth:`service_actions` to "
"clean up zombie child processes."
msgstr ""
"对请求进行处理直至收到显式的 :meth:`shutdown` 请求。 每隔 *poll_interval* 秒对 shutdown 进行轮询。 忽略 "
":attr:`timeout` 属性。 它还会调用 :meth:`service_actions`，这可被子类或混合类用来提供某个给定服务的专属操作。 "
"例如，:class:`ForkingMixIn` 类使用 :meth:`service_actions` 来清理僵尸子进程。"

#: ../../library/socketserver.rst:237
msgid "Added ``service_actions`` call to the ``serve_forever`` method."
msgstr "将 ``service_actions`` 调用添加到 ``serve_forever`` 方法。"

#: ../../library/socketserver.rst:243
msgid ""
"This is called in the :meth:`serve_forever` loop. This method can be "
"overridden by subclasses or mixin classes to perform actions specific to a "
"given service, such as cleanup actions."
msgstr ""
"此方法会在 the :meth:`serve_forever` 循环中被调用。 此方法可被子类或混合类所重载以执行某个给定服务的专属操作，例如清理操作。"

#: ../../library/socketserver.rst:251
msgid ""
"Tell the :meth:`serve_forever` loop to stop and wait until it does. "
":meth:`shutdown` must be called while :meth:`serve_forever` is running in a "
"different thread otherwise it will deadlock."
msgstr ""
"通知 :meth:`serve_forever` 循环停止并等待它完成。 :meth:`shutdown` 必须在 "
":meth:`serve_forever` 运行于不同线程时被调用否则它将发生死锁。"

#: ../../library/socketserver.rst:258
msgid "Clean up the server. May be overridden."
msgstr "清理服务器。 此方法可被重载。"

#: ../../library/socketserver.rst:263
msgid ""
"The family of protocols to which the server's socket belongs.  Common "
"examples are :const:`socket.AF_INET`, :const:`socket.AF_INET6`, and "
":const:`socket.AF_UNIX`.  Subclass the TCP or UDP server classes in this "
"module with class attribute ``address_family = AF_INET6`` set if you want "
"IPv6 server classes."
msgstr ""
"服务器套接字所属的协议族。 常见的例子有 :const:`socket.AF_INET`, :const:`socket.AF_INET6` 和 "
":const:`socket.AF_UNIX` 等。 如果你想要 IPv6 服务器类请子类化此模块中的 TCP 或 UDP 服务器类并设置类属性 "
"``address_family = AF_INET6``。"

#: ../../library/socketserver.rst:272
msgid ""
"The user-provided request handler class; an instance of this class is "
"created for each request."
msgstr "用户提供的请求处理器类；将为每个请求创建该类的实例。"

#: ../../library/socketserver.rst:278
msgid ""
"The address on which the server is listening.  The format of addresses "
"varies depending on the protocol family; see the documentation for the "
":mod:`socket` module for details.  For internet protocols, this is a tuple "
"containing a string giving the address, and an integer port number: "
"``('127.0.0.1', 80)``, for example."
msgstr ""
"服务器所监听的地址。 地址的格式因具体协议族而不同；请参阅 :mod:`socket` 模块的文档了解详情。 "
"对于互联网协议，这将是一个元组，其中包含一个表示地址的字符串，和一个表示端口号的整数，例如: ``('127.0.0.1', 80)``。"

#: ../../library/socketserver.rst:287
msgid ""
"The socket object on which the server will listen for incoming requests."
msgstr "将由服务器用于监听入站请求的套接字对象。"

#: ../../library/socketserver.rst:290
msgid "The server classes support the following class variables:"
msgstr "服务器类支持下列类变量:"

#: ../../library/socketserver.rst:296
msgid ""
"Whether the server will allow the reuse of an address.  This defaults to "
":const:`False`, and can be set in subclasses to change the policy."
msgstr "服务器是否要允许地址的重用。 默认值为 :const:`False`，并可在子类中设置以改变策略。"

#: ../../library/socketserver.rst:302
msgid ""
"The size of the request queue.  If it takes a long time to process a single "
"request, any requests that arrive while the server is busy are placed into a"
" queue, up to :attr:`request_queue_size` requests.  Once the queue is full, "
"further requests from clients will get a \"Connection denied\" error.  The "
"default value is usually 5, but this can be overridden by subclasses."
msgstr ""
"请求队列的长度。 如果处理单个请求要花费很长的时间，则当服务器正忙时到达的任何请求都会被加入队列，最多加入 "
":attr:`request_queue_size` 个请求。 一旦队列被加满，来自客户端的更多请求将收到 \"Connection denied\" "
"错误。 默认值为 5，但可在子类中重载。"

#: ../../library/socketserver.rst:311
msgid ""
"The type of socket used by the server; :const:`socket.SOCK_STREAM` and "
":const:`socket.SOCK_DGRAM` are two common values."
msgstr ""
"服务器使用的套接字类型；常见的有 :const:`socket.SOCK_STREAM` 和 :const:`socket.SOCK_DGRAM` "
"这两个值。"

#: ../../library/socketserver.rst:317
msgid ""
"Timeout duration, measured in seconds, or :const:`None` if no timeout is "
"desired.  If :meth:`handle_request` receives no incoming requests within the"
" timeout period, the :meth:`handle_timeout` method is called."
msgstr ""
"超时限制，以秒数表示，或者如果不限制超时则为 :const:`None`。 如果在超时限制期间没有收到 "
":meth:`handle_request`，则会调用 :meth:`handle_timeout` 方法。"

#: ../../library/socketserver.rst:322
msgid ""
"There are various server methods that can be overridden by subclasses of "
"base server classes like :class:`TCPServer`; these methods aren't useful to "
"external users of the server object."
msgstr "有多个服务器方法可被服务器基类的子类例如 :class:`TCPServer` 所重载；这些方法对服务器对象的外部用户来说并无用处。"

#: ../../library/socketserver.rst:331
msgid ""
"Actually processes the request by instantiating :attr:`RequestHandlerClass` "
"and calling its :meth:`~BaseRequestHandler.handle` method."
msgstr ""
"通过实例化 :attr:`RequestHandlerClass` 并调用其 :meth:`~BaseRequestHandler.handle` "
"方法来实际处理请求。"

#: ../../library/socketserver.rst:337
msgid ""
"Must accept a request from the socket, and return a 2-tuple containing the "
"*new* socket object to be used to communicate with the client, and the "
"client's address."
msgstr "必须接受来自套接字的请求，并返回一个 2 元组，其中包含用来与客户端通信的 *new* 套接字对象，以及客户端的地址。"

#: ../../library/socketserver.rst:344
msgid ""
"This function is called if the :meth:`~BaseRequestHandler.handle` method of "
"a :attr:`RequestHandlerClass` instance raises an exception.  The default "
"action is to print the traceback to standard error and continue handling "
"further requests."
msgstr ""
"此函数会在 :attr:`RequestHandlerClass` 实例的 :meth:`~BaseRequestHandler.handle` "
"方法引发异常时被调用。 默认行为是将回溯信息打印到标准错误并继续处理其他请求。"

#: ../../library/socketserver.rst:349
msgid ""
"Now only called for exceptions derived from the :exc:`Exception` class."
msgstr "现在只针对派生自 :exc:`Exception` 类的异常调用此方法。"

#: ../../library/socketserver.rst:356
msgid ""
"This function is called when the :attr:`timeout` attribute has been set to a"
" value other than :const:`None` and the timeout period has passed with no "
"requests being received.  The default action for forking servers is to "
"collect the status of any child processes that have exited, while in "
"threading servers this method does nothing."
msgstr ""
"此函数会在 :attr:`timeout` 属性被设为 :const:`None` 以外的值并且在超出时限之后仍未收到请求时被调用。 "
"分叉服务器的默认行为是收集任何已退出的子进程状态，而在线程服务器中此方法则不做任何操作。"

#: ../../library/socketserver.rst:365
msgid ""
"Calls :meth:`finish_request` to create an instance of the "
":attr:`RequestHandlerClass`.  If desired, this function can create a new "
"process or thread to handle the request; the :class:`ForkingMixIn` and "
":class:`ThreadingMixIn` classes do this."
msgstr ""
"调用 :meth:`finish_request` 来创建 :attr:`RequestHandlerClass` 的实例。 "
"如果需要，此函数可创建一个新的进程或线程来处理请求；:class:`ForkingMixIn` 和 :class:`ThreadingMixIn` "
"类能完成此任务。"

#: ../../library/socketserver.rst:377
msgid ""
"Called by the server's constructor to activate the server.  The default "
"behavior for a TCP server just invokes :meth:`~socket.socket.listen` on the "
"server's socket.  May be overridden."
msgstr ""
"由服务器的构造器调用以激活服务器。 TCP 服务器的默认行为只是在服务器的套接字上唤起 :meth:`~socket.socket.listen`。 "
"可以被重载。"

#: ../../library/socketserver.rst:384
msgid ""
"Called by the server's constructor to bind the socket to the desired "
"address. May be overridden."
msgstr "由服务器的构造器调用以将套接字绑定到所需的地址。 可以被重载。"

#: ../../library/socketserver.rst:390
msgid ""
"Must return a Boolean value; if the value is :const:`True`, the request will"
" be processed, and if it's :const:`False`, the request will be denied.  This"
" function can be overridden to implement access controls for a server. The "
"default implementation always returns :const:`True`."
msgstr ""
"必须返回一个布尔值；如果值为 :const:`True`，请求将被处理。 而如果值为 :const:`False`，请求将被拒绝。 "
"此函数可被重载以实现服务器的访问控制。 默认实现总是返回 :const:`True`。"

#: ../../library/socketserver.rst:396
msgid ""
"Support for the :term:`context manager` protocol was added.  Exiting the "
"context manager is equivalent to calling :meth:`server_close`."
msgstr ""
"添加了对 :term:`context manager` 协议的支持。 退出上下文管理器与调用 :meth:`server_close` 等效。"

#: ../../library/socketserver.rst:402
msgid "Request Handler Objects"
msgstr "请求处理器对象"

#: ../../library/socketserver.rst:406
msgid ""
"This is the superclass of all request handler objects.  It defines the "
"interface, given below.  A concrete request handler subclass must define a "
"new :meth:`handle` method, and can override any of the other methods.  A new"
" instance of the subclass is created for each request."
msgstr ""
"这是所有请求处理器对象的超类。 它定义了下文列出的接口。 一个实体请求处理器子类必须定义新的 :meth:`handle` 方法，并可重载任何其他方法。"
" 对于每个请求都会创建一个新的子类的实例。"

#: ../../library/socketserver.rst:415
msgid ""
"Called before the :meth:`handle` method to perform any initialization "
"actions required.  The default implementation does nothing."
msgstr "会在 :meth:`handle` 方法之前被调用以执行任何必要的初始化操作。 默认实现不执行任何操作。"

#: ../../library/socketserver.rst:421
msgid ""
"This function must do all the work required to service a request.  The "
"default implementation does nothing.  Several instance attributes are "
"available to it; the request is available as :attr:`request`; the client "
"address as :attr:`client_address`; and the server instance as "
":attr:`server`, in case it needs access to per-server information."
msgstr ""
"此函数必须执行为请求提供服务所需的全部操作。 默认实现不执行任何操作。 它有几个可用的实例属性；请求为 :attr:`request`；客户端地址为 "
":attr:`client_address`；服务器实例为 :attr:`server`，如果它需要访问特定服务器信息的话。, in case it "
"needs access to per-server information."

#: ../../library/socketserver.rst:427
msgid ""
"The type of :attr:`request` is different for datagram or stream services.  "
"For stream services, :attr:`request` is a socket object; for datagram "
"services, :attr:`request` is a pair of string and socket."
msgstr ""
"针对数据报或流服务的 :attr:`request` 类型是不同的。 对于流服务，:attr:`request` "
"是一个套接字对象；对于数据报服务，:attr:`request` 是一对字符串于套接字。"

#: ../../library/socketserver.rst:434
msgid ""
"Called after the :meth:`handle` method to perform any clean-up actions "
"required.  The default implementation does nothing.  If :meth:`setup` raises"
" an exception, this function will not be called."
msgstr ""
"在 :meth:`handle` 方法之后调用以执行任何需要的清理操作。 默认实现不执行任何操作。 如果 :meth:`setup` "
"引发了异常，此函数将不会被调用。"

#: ../../library/socketserver.rst:441
msgid ""
"The *new* :class:`socket.socket` object to be used to communicate with the "
"client."
msgstr "将被用于同客户端通信的 *新* :class:`socket.socket` 对象。"

#: ../../library/socketserver.rst:447
msgid "Client address returned by :meth:`BaseServer.get_request`."
msgstr ":meth:`BaseServer.get_request` 所返回的客户端地址。"

#: ../../library/socketserver.rst:452
msgid ":class:`BaseServer` object used for handling the request."
msgstr "用于处理请求的 :class:`BaseServer` 对象。"

#: ../../library/socketserver.rst:458
msgid ""
"These :class:`BaseRequestHandler` subclasses override the "
":meth:`~BaseRequestHandler.setup` and :meth:`~BaseRequestHandler.finish` "
"methods, and provide :attr:`rfile` and :attr:`wfile` attributes."
msgstr ""
"这些 :class:`BaseRequestHandler` 子类重载了 :meth:`~BaseRequestHandler.setup` 和 "
":meth:`~BaseRequestHandler.finish` 方法，并提供了 :attr:`rfile` 和 :attr:`wfile` 属性。"

#: ../../library/socketserver.rst:464
msgid ""
"A file object from which receives the request is read. Support the "
":class:`io.BufferedIOBase` readable interface."
msgstr "用于读取所接受请求的文件对象。 支持 :class:`io.BufferedIOBase` 可读接口。"

#: ../../library/socketserver.rst:469
msgid ""
"A file object to which the reply is written. Support the "
":class:`io.BufferedIOBase` writable interface"
msgstr "用于写入所回复内容的文件对象。 支持 :class:`io.BufferedIOBase` 可写接口。"

#: ../../library/socketserver.rst:473
msgid ""
":attr:`wfile` also supports the :class:`io.BufferedIOBase` writable "
"interface."
msgstr ":attr:`wfile` 也支持 :class:`io.BufferedIOBase` 可写接口。"

#: ../../library/socketserver.rst:479
msgid "Examples"
msgstr "例子"

#: ../../library/socketserver.rst:482
msgid ":class:`socketserver.TCPServer` Example"
msgstr ":class:`socketserver.TCPServer` 示例"

#: ../../library/socketserver.rst:484 ../../library/socketserver.rst:595
msgid "This is the server side::"
msgstr "以下是服务端::"

#: ../../library/socketserver.rst:486
msgid ""
"import socketserver\n"
"\n"
"class MyTCPHandler(socketserver.BaseRequestHandler):\n"
"    \"\"\"\n"
"    The request handler class for our server.\n"
"\n"
"    It is instantiated once per connection to the server, and must\n"
"    override the handle() method to implement communication to the\n"
"    client.\n"
"    \"\"\"\n"
"\n"
"    def handle(self):\n"
"        # self.request is the TCP socket connected to the client\n"
"        pieces = [b'']\n"
"        total = 0\n"
"        while b'\\n' not in pieces[-1] and total < 10_000:\n"
"            pieces.append(self.request.recv(2000))\n"
"            total += len(pieces[-1])\n"
"        self.data = b''.join(pieces)\n"
"        print(f\"Received from {self.client_address[0]}:\")\n"
"        print(self.data.decode(\"utf-8\"))\n"
"        # just send back the same data, but upper-cased\n"
"        self.request.sendall(self.data.upper())\n"
"        # after we return, the socket will be closed.\n"
"\n"
"if __name__ == \"__main__\":\n"
"    HOST, PORT = \"localhost\", 9999\n"
"\n"
"    # Create the server, binding to localhost on port 9999\n"
"    with socketserver.TCPServer((HOST, PORT), MyTCPHandler) as server:\n"
"        # Activate the server; this will keep running until you\n"
"        # interrupt the program with Ctrl-C\n"
"        server.serve_forever()"
msgstr ""
"import socketserver\n"
"\n"
"class MyTCPHandler(socketserver.BaseRequestHandler):\n"
"    \"\"\"\n"
"    The request handler class for our server.\n"
"\n"
"    It is instantiated once per connection to the server, and must\n"
"    override the handle() method to implement communication to the\n"
"    client.\n"
"    \"\"\"\n"
"\n"
"    def handle(self):\n"
"        # self.request 是连接到客户端的 TCP 套接字\n"
"        pieces = [b'']\n"
"        total = 0\n"
"        while b'\\n' not in pieces[-1] and total < 10_000:\n"
"            pieces.append(self.request.recv(2000))\n"
"            total += len(pieces[-1])\n"
"        self.data = b''.join(pieces)\n"
"        print(f\"Received from {self.client_address[0]}:\")\n"
"        print(self.data.decode(\"utf-8\"))\n"
"        # 发回同样的数据，但转为大写形式\n"
"        self.request.sendall(self.data.upper())\n"
"        # 在我们返回后，套接字将被关闭。\n"
"\n"
"if __name__ == \"__main__\":\n"
"    HOST, PORT = \"localhost\", 9999\n"
"\n"
"    # 创建服务器，绑定到 localhost 的 9999 端口\n"
"    with socketserver.TCPServer((HOST, PORT), MyTCPHandler) as server:\n"
"        # 激活服务器；它将持续运行直到你\n"
"        # 使用 Ctrl-C 中断程序\n"
"        server.serve_forever()"

#: ../../library/socketserver.rst:520
msgid ""
"An alternative request handler class that makes use of streams (file-like "
"objects that simplify communication by providing the standard file "
"interface)::"
msgstr "一个使用流（通过提供标准文件接口来简化通信的文件型对象）的替代请求处理器类::"

#: ../../library/socketserver.rst:523
msgid ""
"class MyTCPHandler(socketserver.StreamRequestHandler):\n"
"\n"
"    def handle(self):\n"
"        # self.rfile is a file-like object created by the handler.\n"
"        # We can now use e.g. readline() instead of raw recv() calls.\n"
"        # We limit ourselves to 10000 bytes to avoid abuse by the sender.\n"
"        self.data = self.rfile.readline(10000).rstrip()\n"
"        print(f\"{self.client_address[0]} wrote:\")\n"
"        print(self.data.decode(\"utf-8\"))\n"
"        # Likewise, self.wfile is a file-like object used to write back\n"
"        # to the client\n"
"        self.wfile.write(self.data.upper())"
msgstr ""
"class MyTCPHandler(socketserver.StreamRequestHandler):\n"
"\n"
"    def handle(self):\n"
"        # self.rfile 是由该处理器创建的文件型对象。\n"
"        # 我们现在可以使用 readline() 代替原始 recv() 调用\n"
"        # 我们自己限制为 10000 字节以避免被发送方滥用。\n"
"        self.data = self.rfile.readline(10000).rstrip()\n"
"        print(f\"{self.client_address[0]} wrote:\")\n"
"        print(self.data.decode(\"utf-8\"))\n"
"        # 类似地，self.wfile 是用于写回到客户端的\n"
"        # 文件型对象\n"
"        self.wfile.write(self.data.upper())"

#: ../../library/socketserver.rst:536
msgid ""
"The difference is that the ``readline()`` call in the second handler will "
"call ``recv()`` multiple times until it encounters a newline character, "
"while the first handler had to use a ``recv()`` loop to accumulate data "
"until a newline itself.  If it had just used a single ``recv()`` without the"
" loop it would just have returned what has been received so far from the "
"client. TCP is stream based: data arrives in the order it was sent, but "
"there no correlation between client ``send()`` or ``sendall()`` calls and "
"the number of ``recv()`` calls on the server required to receive it."
msgstr ""
"区别在于第二个处理器的 ``readline()`` 调用将多次调用 ``recv()`` 直至遇到一个换行符，而第一个处理器必须使用一个 "
"``recv()`` 循环来累积数据直至遇到一个换行符。 如果它只使用一个 ``recv()`` 而不带循环则将只返回当前已从客户端接收的内容。 TCP"
" 是基于流的：数据将按其发送顺序到达，但在客户端 ``send()`` 或 ``sendall()`` 调用和服务端需要接收它的 ``recv()`` "
"调用数量之间并没有关联。"

#: ../../library/socketserver.rst:546 ../../library/socketserver.rst:619
msgid "This is the client side::"
msgstr "以下是客户端::"

#: ../../library/socketserver.rst:548
msgid ""
"import socket\n"
"import sys\n"
"\n"
"HOST, PORT = \"localhost\", 9999\n"
"data = \" \".join(sys.argv[1:])\n"
"\n"
"# Create a socket (SOCK_STREAM means a TCP socket)\n"
"with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n"
"    # Connect to server and send data\n"
"    sock.connect((HOST, PORT))\n"
"    sock.sendall(bytes(data, \"utf-8\"))\n"
"    sock.sendall(b\"\\n\")\n"
"\n"
"    # Receive data from the server and shut down\n"
"    received = str(sock.recv(1024), \"utf-8\")\n"
"\n"
"print(\"Sent:    \", data)\n"
"print(\"Received:\", received)"
msgstr ""
"import socket\n"
"import sys\n"
"\n"
"HOST, PORT = \"localhost\", 9999\n"
"data = \" \".join(sys.argv[1:])\n"
"\n"
"# 创建一个套接字 (SOCK_STREAM 表示一个 TCP 套接字)\n"
"with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n"
"    # 连接到服务器并发送数据\n"
"    sock.connect((HOST, PORT))\n"
"    sock.sendall(bytes(data, \"utf-8\"))\n"
"    sock.sendall(b\"\\n\")\n"
"\n"
"    # 从服务器接收数据并关闭\n"
"    received = str(sock.recv(1024), \"utf-8\")\n"
"\n"
"print(\"Sent:    \", data)\n"
"print(\"Received:\", received)"

#: ../../library/socketserver.rst:568 ../../library/socketserver.rst:694
msgid "The output of the example should look something like this:"
msgstr "这个示例程序的输出应该是像这样的:"

#: ../../library/socketserver.rst:570
msgid "Server:"
msgstr "服务器:"

#: ../../library/socketserver.rst:572
msgid ""
"$ python TCPServer.py\n"
"127.0.0.1 wrote:\n"
"b'hello world with TCP'\n"
"127.0.0.1 wrote:\n"
"b'python is nice'"
msgstr ""
"$ python TCPServer.py\n"
"127.0.0.1 wrote:\n"
"b'hello world with TCP'\n"
"127.0.0.1 wrote:\n"
"b'python is nice'"

#: ../../library/socketserver.rst:580
msgid "Client:"
msgstr "客户端:"

#: ../../library/socketserver.rst:582
msgid ""
"$ python TCPClient.py hello world with TCP\n"
"Sent:     hello world with TCP\n"
"Received: HELLO WORLD WITH TCP\n"
"$ python TCPClient.py python is nice\n"
"Sent:     python is nice\n"
"Received: PYTHON IS NICE"
msgstr ""
"$ python TCPClient.py hello world with TCP\n"
"Sent:     hello world with TCP\n"
"Received: HELLO WORLD WITH TCP\n"
"$ python TCPClient.py python is nice\n"
"Sent:     python is nice\n"
"Received: PYTHON IS NICE"

#: ../../library/socketserver.rst:593
msgid ":class:`socketserver.UDPServer` Example"
msgstr ":class:`socketserver.UDPServer` 示例"

#: ../../library/socketserver.rst:597
msgid ""
"import socketserver\n"
"\n"
"class MyUDPHandler(socketserver.BaseRequestHandler):\n"
"    \"\"\"\n"
"    This class works similar to the TCP handler class, except that\n"
"    self.request consists of a pair of data and client socket, and since\n"
"    there is no connection the client address must be given explicitly\n"
"    when sending data back via sendto().\n"
"    \"\"\"\n"
"\n"
"    def handle(self):\n"
"        data = self.request[0].strip()\n"
"        socket = self.request[1]\n"
"        print(f\"{self.client_address[0]} wrote:\")\n"
"        print(data)\n"
"        socket.sendto(data.upper(), self.client_address)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    HOST, PORT = \"localhost\", 9999\n"
"    with socketserver.UDPServer((HOST, PORT), MyUDPHandler) as server:\n"
"        server.serve_forever()"
msgstr ""
"import socketserver\n"
"\n"
"class MyUDPHandler(socketserver.BaseRequestHandler):\n"
"    \"\"\"\n"
"    This class works similar to the TCP handler class, except that\n"
"    self.request consists of a pair of data and client socket, and since\n"
"    there is no connection the client address must be given explicitly\n"
"    when sending data back via sendto().\n"
"    \"\"\"\n"
"\n"
"    def handle(self):\n"
"        data = self.request[0].strip()\n"
"        socket = self.request[1]\n"
"        print(f\"{self.client_address[0]} wrote:\")\n"
"        print(data)\n"
"        socket.sendto(data.upper(), self.client_address)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    HOST, PORT = \"localhost\", 9999\n"
"    with socketserver.UDPServer((HOST, PORT), MyUDPHandler) as server:\n"
"        server.serve_forever()"

#: ../../library/socketserver.rst:621
msgid ""
"import socket\n"
"import sys\n"
"\n"
"HOST, PORT = \"localhost\", 9999\n"
"data = \" \".join(sys.argv[1:])\n"
"\n"
"# SOCK_DGRAM is the socket type to use for UDP sockets\n"
"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n"
"\n"
"# As you can see, there is no connect() call; UDP has no connections.\n"
"# Instead, data is directly sent to the recipient via sendto().\n"
"sock.sendto(bytes(data + \"\\n\", \"utf-8\"), (HOST, PORT))\n"
"received = str(sock.recv(1024), \"utf-8\")\n"
"\n"
"print(\"Sent:    \", data)\n"
"print(\"Received:\", received)"
msgstr ""
"import socket\n"
"import sys\n"
"\n"
"HOST, PORT = \"localhost\", 9999\n"
"data = \" \".join(sys.argv[1:])\n"
"\n"
"# SOCK_DGRAM 是用于 UDP 套接字的套接字类型\n"
"sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n"
"\n"
"# 如你所见，没有 connect() 调用；UDP 没有连接。\n"
"# 数据是通过 sendto() 直接发给接收方的。\n"
"sock.sendto(bytes(data + \"\\n\", \"utf-8\"), (HOST, PORT))\n"
"received = str(sock.recv(1024), \"utf-8\")\n"
"\n"
"print(\"Sent:    \", data)\n"
"print(\"Received:\", received)"

#: ../../library/socketserver.rst:638
msgid ""
"The output of the example should look exactly like for the TCP server "
"example."
msgstr "这个示例程序的输出应该是与 TCP 服务器示例相一致的。"

#: ../../library/socketserver.rst:642
msgid "Asynchronous Mixins"
msgstr "异步混合类"

#: ../../library/socketserver.rst:644
msgid ""
"To build asynchronous handlers, use the :class:`ThreadingMixIn` and "
":class:`ForkingMixIn` classes."
msgstr "要构建异步处理器，请使用 :class:`ThreadingMixIn` 和 :class:`ForkingMixIn` 类。"

#: ../../library/socketserver.rst:647
msgid "An example for the :class:`ThreadingMixIn` class::"
msgstr ":class:`ThreadingMixIn` 类的示例::"

#: ../../library/socketserver.rst:649
msgid ""
"import socket\n"
"import threading\n"
"import socketserver\n"
"\n"
"class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):\n"
"\n"
"    def handle(self):\n"
"        data = str(self.request.recv(1024), 'ascii')\n"
"        cur_thread = threading.current_thread()\n"
"        response = bytes(\"{}: {}\".format(cur_thread.name, data), 'ascii')\n"
"        self.request.sendall(response)\n"
"\n"
"class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):\n"
"    pass\n"
"\n"
"def client(ip, port, message):\n"
"    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n"
"        sock.connect((ip, port))\n"
"        sock.sendall(bytes(message, 'ascii'))\n"
"        response = str(sock.recv(1024), 'ascii')\n"
"        print(\"Received: {}\".format(response))\n"
"\n"
"if __name__ == \"__main__\":\n"
"    # Port 0 means to select an arbitrary unused port\n"
"    HOST, PORT = \"localhost\", 0\n"
"\n"
"    server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)\n"
"    with server:\n"
"        ip, port = server.server_address\n"
"\n"
"        # Start a thread with the server -- that thread will then start one\n"
"        # more thread for each request\n"
"        server_thread = threading.Thread(target=server.serve_forever)\n"
"        # Exit the server thread when the main thread terminates\n"
"        server_thread.daemon = True\n"
"        server_thread.start()\n"
"        print(\"Server loop running in thread:\", server_thread.name)\n"
"\n"
"        client(ip, port, \"Hello World 1\")\n"
"        client(ip, port, \"Hello World 2\")\n"
"        client(ip, port, \"Hello World 3\")\n"
"\n"
"        server.shutdown()"
msgstr ""
"import socket\n"
"import threading\n"
"import socketserver\n"
"\n"
"class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):\n"
"\n"
"    def handle(self):\n"
"        data = str(self.request.recv(1024), 'ascii')\n"
"        cur_thread = threading.current_thread()\n"
"        response = bytes(\"{}: {}\".format(cur_thread.name, data), 'ascii')\n"
"        self.request.sendall(response)\n"
"\n"
"class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):\n"
"    pass\n"
"\n"
"def client(ip, port, message):\n"
"    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n"
"        sock.connect((ip, port))\n"
"        sock.sendall(bytes(message, 'ascii'))\n"
"        response = str(sock.recv(1024), 'ascii')\n"
"        print(\"Received: {}\".format(response))\n"
"\n"
"if __name__ == \"__main__\":\n"
"    # 端口 0 表示选择任意一个未使用的端口\n"
"    HOST, PORT = \"localhost\", 0\n"
"\n"
"    server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)\n"
"    with server:\n"
"        ip, port = server.server_address\n"
"\n"
"        # 启动一个服务器线程 -- 该线程将在此后\n"
"        # 为每个请求再启动一个线程\n"
"        server_thread = threading.Thread(target=server.serve_forever)\n"
"        # 在主线程终结时退出服务器线程\n"
"        server_thread.daemon = True\n"
"        server_thread.start()\n"
"        print(\"Server loop running in thread:\", server_thread.name)\n"
"\n"
"        client(ip, port, \"Hello World 1\")\n"
"        client(ip, port, \"Hello World 2\")\n"
"        client(ip, port, \"Hello World 3\")\n"
"\n"
"        server.shutdown()"

#: ../../library/socketserver.rst:696
msgid ""
"$ python ThreadedTCPServer.py\n"
"Server loop running in thread: Thread-1\n"
"Received: Thread-2: Hello World 1\n"
"Received: Thread-3: Hello World 2\n"
"Received: Thread-4: Hello World 3"
msgstr ""
"$ python ThreadedTCPServer.py\n"
"Server loop running in thread: Thread-1\n"
"Received: Thread-2: Hello World 1\n"
"Received: Thread-3: Hello World 2\n"
"Received: Thread-4: Hello World 3"

#: ../../library/socketserver.rst:705
msgid ""
"The :class:`ForkingMixIn` class is used in the same way, except that the "
"server will spawn a new process for each request. Available only on POSIX "
"platforms that support :func:`~os.fork`."
msgstr ""
":class:`ForkingMixIn` 类的使用方式是相同的，区别在于服务器将为每个请求产生一个新的进程。 仅在支持 "
":func:`~os.fork` 的 POSIX 系统平台上可用。"
