# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/importlib.resources.abc.rst:2
msgid ":mod:`importlib.resources.abc` -- Abstract base classes for resources"
msgstr ""

#: ../../library/importlib.resources.abc.rst:7
msgid "**Source code:** :source:`Lib/importlib/resources/abc.py`"
msgstr ""

#: ../../library/importlib.resources.abc.rst:15
msgid "*Superseded by TraversableResources*"
msgstr ""

#: ../../library/importlib.resources.abc.rst:17
msgid ""
"An :term:`abstract base class` to provide the ability to read *resources*."
msgstr ""

#: ../../library/importlib.resources.abc.rst:20
msgid ""
"From the perspective of this ABC, a *resource* is a binary artifact that is "
"shipped within a package. Typically this is something like a data file that "
"lives next to the ``__init__.py`` file of the package. The purpose of this "
"class is to help abstract out the accessing of such data files so that it "
"does not matter if the package and its data file(s) are stored in a e.g. zip"
" file versus on the file system."
msgstr ""

#: ../../library/importlib.resources.abc.rst:28
msgid ""
"For any of methods of this class, a *resource* argument is expected to be a "
":term:`path-like object` which represents conceptually just a file name. "
"This means that no subdirectory paths should be included in the *resource* "
"argument. This is because the location of the package the reader is for, "
"acts as the \"directory\". Hence the metaphor for directories and file names"
" is packages and resources, respectively. This is also why instances of this"
" class are expected to directly correlate to a specific package (instead of "
"potentially representing multiple packages or a module)."
msgstr ""

#: ../../library/importlib.resources.abc.rst:39
msgid ""
"Loaders that wish to support resource reading are expected to provide a "
"method called ``get_resource_reader(fullname)`` which returns an object "
"implementing this ABC's interface. If the module specified by fullname is "
"not a package, this method should return :const:`None`. An object compatible"
" with this ABC should only be returned when the specified module is a "
"package."
msgstr ""

#: ../../library/importlib.resources.abc.rst:50
msgid ""
"Returns an opened, :term:`file-like object` for binary reading of the "
"*resource*."
msgstr ""

#: ../../library/importlib.resources.abc.rst:53
msgid "If the resource cannot be found, :exc:`FileNotFoundError` is raised."
msgstr ""

#: ../../library/importlib.resources.abc.rst:58
msgid "Returns the file system path to the *resource*."
msgstr ""

#: ../../library/importlib.resources.abc.rst:60
msgid ""
"If the resource does not concretely exist on the file system, raise "
":exc:`FileNotFoundError`."
msgstr ""

#: ../../library/importlib.resources.abc.rst:65
msgid ""
"Returns ``True`` if the named *name* is considered a resource. "
":exc:`FileNotFoundError` is raised if *name* does not exist."
msgstr ""

#: ../../library/importlib.resources.abc.rst:70
msgid ""
"Returns an :term:`iterable` of strings over the contents of the package. Do "
"note that it is not required that all names returned by the iterator be "
"actual resources, e.g. it is acceptable to return names for which "
":meth:`is_resource` would be false."
msgstr ""

#: ../../library/importlib.resources.abc.rst:76
msgid ""
"Allowing non-resource names to be returned is to allow for situations where "
"how a package and its resources are stored are known a priori and the non-"
"resource names would be useful. For instance, returning subdirectory names "
"is allowed so that when it is known that the package and resources are "
"stored on the file system then those subdirectory names can be used "
"directly."
msgstr ""

#: ../../library/importlib.resources.abc.rst:84
msgid "The abstract method returns an iterable of no items."
msgstr ""

#: ../../library/importlib.resources.abc.rst:89
msgid ""
"An object with a subset of :class:`pathlib.Path` methods suitable for "
"traversing directories and opening files."
msgstr ""

#: ../../library/importlib.resources.abc.rst:92
msgid ""
"For a representation of the object on the file-system, use "
":meth:`importlib.resources.as_file`."
msgstr ""

#: ../../library/importlib.resources.abc.rst:99
msgid "Abstract. The base name of this object without any parent references."
msgstr ""

#: ../../library/importlib.resources.abc.rst:103
msgid "Yield Traversable objects in self."
msgstr ""

#: ../../library/importlib.resources.abc.rst:107
msgid "Return True if self is a directory."
msgstr ""

#: ../../library/importlib.resources.abc.rst:111
msgid "Return True if self is a file."
msgstr ""

#: ../../library/importlib.resources.abc.rst:115
#: ../../library/importlib.resources.abc.rst:119
msgid "Return Traversable child in self."
msgstr ""

#: ../../library/importlib.resources.abc.rst:123
msgid ""
"*mode* may be 'r' or 'rb' to open as text or binary. Return a handle "
"suitable for reading (same as :attr:`pathlib.Path.open`)."
msgstr ""

#: ../../library/importlib.resources.abc.rst:126
msgid ""
"When opening as text, accepts encoding parameters such as those accepted by "
":class:`io.TextIOWrapper`."
msgstr ""

#: ../../library/importlib.resources.abc.rst:131
msgid "Read contents of self as bytes."
msgstr ""

#: ../../library/importlib.resources.abc.rst:135
msgid "Read contents of self as text."
msgstr ""

#: ../../library/importlib.resources.abc.rst:140
msgid ""
"An abstract base class for resource readers capable of serving the "
":meth:`importlib.resources.files` interface. Subclasses "
":class:`ResourceReader` and provides concrete implementations of the "
":class:`!ResourceReader`'s abstract methods. Therefore, any loader supplying"
" :class:`!TraversableResources` also supplies :class:`!ResourceReader`."
msgstr ""

#: ../../library/importlib.resources.abc.rst:147
msgid ""
"Loaders that wish to support resource reading are expected to implement this"
" interface."
msgstr ""

#: ../../library/importlib.resources.abc.rst:154
msgid ""
"Returns a :class:`importlib.resources.abc.Traversable` object for the loaded"
" package."
msgstr ""
