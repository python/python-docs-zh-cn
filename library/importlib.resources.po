# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/importlib.resources.rst:2
msgid ""
":mod:`!importlib.resources` -- Package resource reading, opening and access"
msgstr ":mod:`!importlib.resources` -- 包资源的读取、打开和访问"

#: ../../library/importlib.resources.rst:7
msgid "**Source code:** :source:`Lib/importlib/resources/__init__.py`"
msgstr "**源代码:** :source:`Lib/importlib/resources/__init__.py`"

#: ../../library/importlib.resources.rst:13
msgid ""
"This module leverages Python's import system to provide access to "
"*resources* within *packages*."
msgstr "此模块调整了 Python 的导入系统以便提供对 *包* 内部的 *资源* 的访问。"

#: ../../library/importlib.resources.rst:16
msgid ""
"\"Resources\" are file-like resources associated with a module or package in"
" Python. The resources may be contained directly in a package, within a "
"subdirectory contained in that package, or adjacent to modules outside a "
"package. Resources may be text or binary. As a result, Python module sources"
" (.py) of a package and compilation artifacts (pycache) are technically de-"
"facto resources of that package. In practice, however, resources are "
"primarily those non-Python artifacts exposed specifically by the package "
"author."
msgstr ""
"“资源”是指 Python 中与模块或包相关联的文件类资源。 资源可以直接包含在某个包中，包含在某个包的子目录中，或是与某个包外部的模块相邻。 "
"资源可以是文本或二进制数据。 因此，从技术上说 Python 包的模块源代码文件 (.py) 和编译结果文件 (pycache) "
"就是包实际所包含的资源。 但是，在实践中，资源主要是指包作者专门公开的非 Python 文件。"

#: ../../library/importlib.resources.rst:25
msgid "Resources can be opened or read in either binary or text mode."
msgstr "资源可以使用二进制或文本模式打开。"

#: ../../library/importlib.resources.rst:27
msgid ""
"Resources are roughly akin to files inside directories, though it's "
"important to keep in mind that this is just a metaphor.  Resources and "
"packages **do not** have to exist as physical files and directories on the "
"file system: for example, a package and its resources can be imported from a"
" zip file using :py:mod:`zipimport`."
msgstr ""
"资源大致相当于目录内的文件，不过需要记住这只是一个比喻。 资源和包 **不是** 必须如文件系统上的物理文件和目录那样存在的：例如，一个包及其资源可使用"
" :py:mod:`zipimport` 从一个 ZIP 文件导入。"

#: ../../library/importlib.resources.rst:35
msgid ""
"This module provides functionality similar to `pkg_resources "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ `Basic "
"Resource Access "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-"
"resource-access>`_ without the performance overhead of that package.  This "
"makes reading resources included in packages easier, with more stable and "
"consistent semantics."
msgstr ""
"本模块提供了类似于 `pkg_resources "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ `Basic "
"Resource Access "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-"
"resource-access>`_ 的功能而没有那样高的性能开销。 这使得读取包中的资源更为容易，并具有更为稳定和一致的语义。"

#: ../../library/importlib.resources.rst:43
msgid ""
"The standalone backport of this module provides more information on `using "
"importlib.resources <https://importlib-"
"resources.readthedocs.io/en/latest/using.html>`_ and `migrating from "
"pkg_resources to importlib.resources <https://importlib-"
"resources.readthedocs.io/en/latest/migration.html>`_."
msgstr ""
"此模块的独立向下移植版本在 `using importlib.resources <https://importlib-"
"resources.readthedocs.io/en/latest/using.html>`_ 和 `migrating from "
"pkg_resources to importlib.resources <https://importlib-"
"resources.readthedocs.io/en/latest/migration.html>`_ 中提供了更多信息。"

#: ../../library/importlib.resources.rst:49
msgid ""
":class:`Loaders <importlib.abc.Loader>` that wish to support resource "
"reading should implement a ``get_resource_reader(fullname)`` method as "
"specified by :class:`importlib.resources.abc.ResourceReader`."
msgstr ""
"想要支持资源读取的 :class:`加载器 <importlib.abc.Loader>` 应当实现 "
":class:`importlib.resources.abc.ResourceReader` 中规定的 "
"``get_resource_reader(fullname)`` 方法。"

#: ../../library/importlib.resources.rst:55
msgid ""
"Represents an anchor for resources, either a :class:`module object "
"<types.ModuleType>` or a module name as a string. Defined as ``Union[str, "
"ModuleType]``."
msgstr ""
"代表资源的锚点，可以是一个 :class:`模块对象 <types.ModuleType>` 或字符串形式的模块名称不。 定义为 "
"``Union[str, ModuleType]``。"

#: ../../library/importlib.resources.rst:61
msgid ""
"Returns a :class:`~importlib.resources.abc.Traversable` object representing "
"the resource container (think directory) and its resources (think files). A "
"Traversable may contain other containers (think subdirectories)."
msgstr ""
"返回一个代表资源容器（相当于目录）及其资源（相当于文件）的 :class:`~importlib.resources.abc.Traversable` "
"对象。 Traversable 可以包含其他容器（相当于子目录）。"

#: ../../library/importlib.resources.rst:66
msgid ""
"*anchor* is an optional :class:`Anchor`. If the anchor is a package, "
"resources are resolved from that package. If a module, resources are "
"resolved adjacent to that module (in the same package or the package root). "
"If the anchor is omitted, the caller's module is used."
msgstr ""
"*anchor* 是一个可选的 :class:`Anchor`。 如果 anchor 是一个包，则会从这个包获取资源。 "
"如果是一个模块，则会从这个模块的相邻位置获取资源（在同一个包或包的根目录中）。 如果省略了 anchor,则会使用调用方的模块。"

#: ../../library/importlib.resources.rst:74
msgid ""
"*package* parameter was renamed to *anchor*. *anchor* can now be a non-"
"package module and if omitted will default to the caller's module. *package*"
" is still accepted for compatibility but will raise a "
":exc:`DeprecationWarning`. Consider passing the anchor positionally or using"
" ``importlib_resources >= 5.10`` for a compatible interface on older "
"Pythons."
msgstr ""
"*package* 形参被重命名为 *anchor*。 *anchor* 现在可以是一个不为包的模块，如果被省略则默认为调用方的模块。 为保持兼容性 "
"*package* 仍然被接受但会引发 :exc:`DeprecationWarning`。 请考虑以位置参数方式传入或使用 "
"``importlib_resources >= 5.10`` 作为针对旧版 Python 的兼容接口。"

#: ../../library/importlib.resources.rst:84
msgid ""
"Given a :class:`~importlib.resources.abc.Traversable` object representing a "
"file or directory, typically from :func:`importlib.resources.files`, return "
"a context manager for use in a :keyword:`with` statement. The context "
"manager provides a :class:`pathlib.Path` object."
msgstr ""
"给定一个代表文件或目录的 :class:`~importlib.resources.abc.Traversable` 对象，通常是来自 "
":func:`importlib.resources.files`，返回一个上下文管理器以供 :keyword:`with` 语句使用。 "
"该上下文管理器提供一个 :class:`pathlib.Path` 对象。"

#: ../../library/importlib.resources.rst:89
msgid ""
"Exiting the context manager cleans up any temporary file or directory "
"created when the resource was extracted from e.g. a zip file."
msgstr "退出上下文管理器后会清除从 zip 文件等提取资源时创建的任何临时文件或目录。"

#: ../../library/importlib.resources.rst:92
msgid ""
"Use ``as_file`` when the Traversable methods (``read_text``, etc) are "
"insufficient and an actual file or directory on the file system is required."
msgstr ""
"当 Traversable 的方法（如 ``read_text`` 等）不足以满足需要而需要文件系统中的真实文件或目录时请使用 ``as_file``。"

#: ../../library/importlib.resources.rst:98
msgid "Added support for *traversable* representing a directory."
msgstr "增加了对代表目录的 *traversable* 的支持。"

#: ../../library/importlib.resources.rst:103
msgid "Functional API"
msgstr "函数式 API"

#: ../../library/importlib.resources.rst:105
msgid ""
"An older, previously deprecated set of functions is still available. The "
"main drawback of these functions is that they do not support directories: "
"they assume all resources are located directly within a *package*."
msgstr ""

#: ../../library/importlib.resources.rst:111
msgid ""
"Whenever a function accepts a ``Package`` argument, you can pass in either a"
" :class:`module object <types.ModuleType>` or a module name as a string.  "
"You can only pass module objects whose "
"``__spec__.submodule_search_locations`` is not ``None``."
msgstr ""
"只要一个函数接受 ``Package`` 参数，你就可以传入 :class:`模块对象 <types.ModuleType>` 或字符串形式的模块名称。"
" 你只能传入 ``__spec__.submodule_search_locations`` 不为 ``None`` 的模块对象。"

#: ../../library/importlib.resources.rst:116
msgid "The ``Package`` type is defined as ``Union[str, ModuleType]``."
msgstr "``Package`` 类型是作为 ``Union[str, ModuleType]`` 定义的。"

#: ../../library/importlib.resources.rst:121
msgid ""
"For *resource* arguments of the functions below, you can pass in the name of"
" a resource as a string or a :class:`path-like object <os.PathLike>`."
msgstr "对于下列函数的 *resource* 参数，你可以传入字符串形式的资源名称或 :class:`路径类对象 <os.PathLike>`。"

#: ../../library/importlib.resources.rst:125
msgid "The ``Resource`` type is defined as ``Union[str, os.PathLike]``."
msgstr "``Resource`` 类型是作为 ``Union[str, os.PathLike]`` 定义的。"

#: ../../library/importlib.resources.rst:130
msgid "Open for binary reading the *resource* within *package*."
msgstr "以二进制读方式打开 *package* 内的 *resource*。"

#: ../../library/importlib.resources.rst:132
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have "
"sub-resources (i.e. it cannot be a directory).  This function returns a "
"``typing.BinaryIO`` instance, a binary I/O stream open for reading."
msgstr ""
"*package* 是包名或符合 ``Package`` 要求的模块对象。 *resource* 是要在 *package* "
"内打开的资源名；不能包含路径分隔符，也不能有子资源（即不能为目录）。本函数将返回一个 ``typing.BinaryIO`` "
"实例以供读取，即一个已打开的二进制 I/O 流。"

#: ../../library/importlib.resources.rst:138
#: ../../library/importlib.resources.rst:157
#: ../../library/importlib.resources.rst:173
#: ../../library/importlib.resources.rst:190
#: ../../library/importlib.resources.rst:222
#: ../../library/importlib.resources.rst:236
msgid "This function is roughly equivalent to::"
msgstr "此函数大致等价于::"

#: ../../library/importlib.resources.rst:140
msgid "files(package).joinpath(resource).open('rb')"
msgstr ""

#: ../../library/importlib.resources.rst:145
msgid ""
"Open for text reading the *resource* within *package*.  By default, the "
"resource is opened for reading as UTF-8."
msgstr "以文本读方式打开 *package* 内的 *resource*。默认情况下，资源将以 UTF-8 格式打开以供读取。"

#: ../../library/importlib.resources.rst:148
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have "
"sub-resources (i.e. it cannot be a directory).  *encoding* and *errors* have"
" the same meaning as with built-in :func:`open`."
msgstr ""
"*package* 是包名或符合 ``Package`` 要求的模块对象。 *resource* 是要在 *package* "
"内打开的资源名；不能包含路径分隔符，也不能有子资源（即不能是目录）。*encoding* 和 *errors* 的含义与内置 :func:`open` "
"的一样。"

#: ../../library/importlib.resources.rst:154
msgid ""
"This function returns a ``typing.TextIO`` instance, a text I/O stream open "
"for reading."
msgstr "本函数返回一个 ``typing.TextIO`` 实例，即一个打开的文本 I/O  流对象以供读取。"

#: ../../library/importlib.resources.rst:159
msgid "files(package).joinpath(resource).open('r', encoding=encoding)"
msgstr ""

#: ../../library/importlib.resources.rst:164
msgid ""
"Read and return the contents of the *resource* within *package* as "
"``bytes``."
msgstr "读取并返回 *package* 中的 *resource* 内容，格式为 ``bytes``。"

#: ../../library/importlib.resources.rst:167
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have "
"sub-resources (i.e. it cannot be a directory).  This function returns the "
"contents of the resource as :class:`bytes`."
msgstr ""
"*package* 是包名或符合 ``Package`` 要求的模块对象。 *resource* 是要在 *package* "
"内打开的资源名；不能包含路径分隔符，也不能有子资源（即不能是目录）。资源内容以 :class:`bytes` 的形式返回。"

#: ../../library/importlib.resources.rst:175
msgid "files(package).joinpath(resource).read_bytes()"
msgstr ""

#: ../../library/importlib.resources.rst:180
msgid ""
"Read and return the contents of *resource* within *package* as a ``str``. By"
" default, the contents are read as strict UTF-8."
msgstr ""
"读取并返回 *package* 中 *resource* 的内容，格式为 ``str``。默认情况下，资源内容将以严格的 UTF-8 格式读取。"

#: ../../library/importlib.resources.rst:183
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have "
"sub-resources (i.e. it cannot be a directory).  *encoding* and *errors* have"
" the same meaning as with built-in :func:`open`.  This function returns the "
"contents of the resource as :class:`str`."
msgstr ""
"*package* 是包名或符合 ``Package`` 要求的模块对象。 *resource* 是要在 *package* "
"内打开的资源名；不能包含路径分隔符，也不能有子资源（即不能是目录）。*encoding* 和 *errors* 的含义与内置 :func:`open` "
"的一样。资源内容将以 :class:`str` 的形式返回。"

#: ../../library/importlib.resources.rst:192
msgid "files(package).joinpath(resource).read_text(encoding=encoding)"
msgstr ""

#: ../../library/importlib.resources.rst:197
msgid ""
"Return the path to the *resource* as an actual file system path.  This "
"function returns a context manager for use in a :keyword:`with` statement. "
"The context manager provides a :class:`pathlib.Path` object."
msgstr ""
"返回 *resource* 实际的文件系统路径。本函数返回一个上下文管理器，以供 :keyword:`with` 语句中使用。上下文管理器提供一个 "
":class:`pathlib.Path` 对象。"

#: ../../library/importlib.resources.rst:201
msgid ""
"Exiting the context manager cleans up any temporary file created when the "
"resource needs to be extracted from e.g. a zip file."
msgstr "退出上下文管理程序时，可以清理所有临时文件，比如从压缩文件中提取资源时创建的那些文件。"

#: ../../library/importlib.resources.rst:204
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements.  *resource* is the name of the resource to open "
"within *package*; it may not contain path separators and it may not have "
"sub-resources (i.e. it cannot be a directory)."
msgstr ""
"*package* 是包名或符合 ``Package`` 要求的模块对象。 *resource* 是要在 *package* "
"内打开的资源名；不能包含路径分隔符，也不能有子资源（即不能是目录）。"

#: ../../library/importlib.resources.rst:209
msgid "This function is roughly equivalent to ::"
msgstr ""

#: ../../library/importlib.resources.rst:211
msgid "as_file(files(package).joinpath(resource))"
msgstr ""

#: ../../library/importlib.resources.rst:216
msgid ""
"Return ``True`` if there is a resource named *name* in the package, "
"otherwise ``False``. This function does not consider directories to be "
"resources. *package* is either a name or a module object which conforms to "
"the ``Package`` requirements."
msgstr ""
"如果包中存在名为 *name* 的资源则返回 ``True``，否则返回 ``False``。 此函数不会将目录视为资源。 *package* "
"是包名或符合 ``Package`` 要求的模块对象。"

#: ../../library/importlib.resources.rst:224
msgid "files(package).joinpath(resource).is_file()"
msgstr ""

#: ../../library/importlib.resources.rst:229
msgid ""
"Return an iterable over the named items within the package.  The iterable "
"returns :class:`str` resources (e.g. files) and non-resources (e.g. "
"directories).  The iterable does not recurse into subdirectories."
msgstr ""
"返回一个用于遍历包内各命名项的可迭代对象。该可迭代对象将返回 :class:`str` 资源（如文件）及非资源（如目录）。该迭代器不会递归进入子目录。"

#: ../../library/importlib.resources.rst:233
msgid ""
"*package* is either a name or a module object which conforms to the "
"``Package`` requirements."
msgstr "*package* 是包名或符合 ``Package`` 要求的模块对象。"

#: ../../library/importlib.resources.rst:238
msgid ""
"(resource.name for resource in files(package).iterdir() if "
"resource.is_file())"
msgstr ""
