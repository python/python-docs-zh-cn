# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/functools.rst:2
msgid ""
":mod:`functools` --- Higher-order functions and operations on callable "
"objects"
msgstr ":mod:`functools` --- 高阶函数和可调用对象上的操作"

#: ../../library/functools.rst:14
msgid "**Source code:** :source:`Lib/functools.py`"
msgstr "**源代码:** :source:`Lib/functools.py`"

#: ../../library/functools.rst:23
msgid ""
"The :mod:`functools` module is for higher-order functions: functions that "
"act on or return other functions. In general, any callable object can be "
"treated as a function for the purposes of this module."
msgstr ":mod:`functools` 模块应用于高阶函数，即参数或（和）返回值为其他函数的函数。 通常来说，此模块的功能适用于所有可调用对象。"

#: ../../library/functools.rst:27
msgid "The :mod:`functools` module defines the following functions:"
msgstr ":mod:`functools` 模块定义了以下函数:"

#: ../../library/functools.rst:31
msgid ""
"Simple lightweight unbounded function cache.  Sometimes called `\"memoize\" "
"<https://en.wikipedia.org/wiki/Memoization>`_."
msgstr ""
"简单轻量级未绑定函数缓存。 有时称为 `\"memoize\" "
"<https://en.wikipedia.org/wiki/Memoization>`_。"

#: ../../library/functools.rst:34
msgid ""
"Returns the same as ``lru_cache(maxsize=None)``, creating a thin wrapper "
"around a dictionary lookup for the function arguments.  Because it never "
"needs to evict old values, this is smaller and faster than "
":func:`lru_cache()` with a size limit."
msgstr ""
"返回值与 ``lru_cache(maxsize=None)`` 相同，创建一个查找函数参数的字典的简单包装器。 "
"因为它不需要移出旧值，所以比带有大小限制的 :func:`lru_cache()` 更小更快。"

#: ../../library/functools.rst:39 ../../library/functools.rst:276
msgid "For example::"
msgstr "例如："

#: ../../library/functools.rst:52 ../../library/functools.rst:143
msgid ""
"The cache is threadsafe so that the wrapped function can be used in multiple"
" threads.  This means that the underlying data structure will remain "
"coherent during concurrent updates."
msgstr "该缓存是线程安全的因此被包装的函数可在多线程中使用。 这意味着下层的数据结构将在并发更新期间保持一致性。"

#: ../../library/functools.rst:56 ../../library/functools.rst:147
msgid ""
"It is possible for the wrapped function to be called more than once if "
"another thread makes an additional call before the initial call has been "
"completed and cached."
msgstr "如果另一个线程在初始调用完成并被缓存之前执行了额外的调用则被包装的函数可能会被多次调用。"

#: ../../library/functools.rst:65
msgid ""
"Transform a method of a class into a property whose value is computed once "
"and then cached as a normal attribute for the life of the instance. Similar "
"to :func:`property`, with the addition of caching. Useful for expensive "
"computed properties of instances that are otherwise effectively immutable."
msgstr ""
"将一个类方法转换为特征属性，一次性计算该特征属性的值，然后将其缓存为实例生命周期内的普通属性。 类似于 :func:`property` "
"但增加了缓存功能。 对于在其他情况下实际不可变的高计算资源消耗的实例特征属性来说该函数非常有用。"

#: ../../library/functools.rst:70 ../../library/functools.rst:127
#: ../../library/functools.rst:368
msgid "Example::"
msgstr "示例::"

#: ../../library/functools.rst:81
msgid ""
"The mechanics of :func:`cached_property` are somewhat different from "
":func:`property`.  A regular property blocks attribute writes unless a "
"setter is defined. In contrast, a *cached_property* allows writes."
msgstr ""
":func:`cached_property` 的设定与 :func:`property` 有所不同。 常规的 property "
"会阻止属性写入，除非定义了 setter。 与之相反，*cached_property* 则允许写入。"

#: ../../library/functools.rst:85
msgid ""
"The *cached_property* decorator only runs on lookups and only when an "
"attribute of the same name doesn't exist.  When it does run, the "
"*cached_property* writes to the attribute with the same name. Subsequent "
"attribute reads and writes take precedence over the *cached_property* method"
" and it works like a normal attribute."
msgstr ""
"*cached_property* 装饰器仅在执行查找且不存在同名属性时才会运行。 当运行时，*cached_property* 会写入同名的属性。 "
"后续的属性读取和写入操作会优先于 *cached_property* 方法，其行为就像普通的属性一样。"

#: ../../library/functools.rst:91
msgid ""
"The cached value can be cleared by deleting the attribute.  This allows the "
"*cached_property* method to run again."
msgstr "缓存的值可通过删除该属性来清空。 这允许 *cached_property* 方法再次运行。"

#: ../../library/functools.rst:94
msgid ""
"Note, this decorator interferes with the operation of :pep:`412` key-sharing"
" dictionaries.  This means that instance dictionaries can take more space "
"than usual."
msgstr "注意，这个装饰器会影响 :pep:`412` 键共享字典的操作。 这意味着相应的字典实例可能占用比通常时更多的空间。"

#: ../../library/functools.rst:98
msgid ""
"Also, this decorator requires that the ``__dict__`` attribute on each "
"instance be a mutable mapping. This means it will not work with some types, "
"such as metaclasses (since the ``__dict__`` attributes on type instances are"
" read-only proxies for the class namespace), and those that specify "
"``__slots__`` without including ``__dict__`` as one of the defined slots (as"
" such classes don't provide a ``__dict__`` attribute at all)."
msgstr ""
"而且，这个装饰器要求每个实例上的 ``__dict__`` 是可变的映射。 这意味着它将不适用于某些类型，例如元类（因为类型实例上的 "
"``__dict__`` 属性是类命名空间的只读代理），以及那些指定了 ``__slots__`` 但未包括 ``__dict__`` "
"作为所定义的空位之一的类（因为这样的类根本没有提供 ``__dict__`` 属性）。"

#: ../../library/functools.rst:105
msgid ""
"If a mutable mapping is not available or if space-efficient key sharing is "
"desired, an effect similar to :func:`cached_property` can also be achieved "
"by stacking :func:`property` on top of :func:`lru_cache`. See :ref:`faq-"
"cache-method-calls` for more details on how this differs from "
":func:`cached_property`."
msgstr ""
"如果可变的映射不可用或者如果想要节省空间的键共享，可以通过在 :func:`lru_cache` 上堆叠 :func:`property` 来实现类似 "
":func:`cached_property` 的效果。 请参阅 :ref:`faq-cache-method-calls` 了解这与 "
":func:`cached_property` 之间区别的详情。"

#: ../../library/functools.rst:115
msgid ""
"Transform an old-style comparison function to a :term:`key function`.  Used "
"with tools that accept key functions (such as :func:`sorted`, :func:`min`, "
":func:`max`, :func:`heapq.nlargest`, :func:`heapq.nsmallest`, "
":func:`itertools.groupby`).  This function is primarily used as a transition"
" tool for programs being converted from Python 2 which supported the use of "
"comparison functions."
msgstr ""
"将(旧式的)比较函数转换为新式的 :term:`key function` .  在类似于 :func:`sorted` ， :func:`min` ，"
" :func:`max` ， :func:`heapq.nlargest` ， :func:`heapq.nsmallest` ， "
":func:`itertools.groupby` 等函数的 `key` 参数中使用。此函数主要用作将 Python 2 "
"程序转换至新版的转换工具，以保持对比较函数的兼容。"

#: ../../library/functools.rst:122
msgid ""
"A comparison function is any callable that accepts two arguments, compares "
"them, and returns a negative number for less-than, zero for equality, or a "
"positive number for greater-than.  A key function is a callable that accepts"
" one argument and returns another value to be used as the sort key."
msgstr ""
"比较函数是任何接受两个参数，比较它们，并在结果为小于时返回负数，等于时返回零，大于时返回正数的可调用对象。键函数是接受一个参数并返回另一值的可调用对象，返回值在排序时被用作键。"

#: ../../library/functools.rst:131
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr "有关排序示例和简要排序教程，请参阅 :ref:`sortinghowto` 。"

#: ../../library/functools.rst:139
msgid ""
"Decorator to wrap a function with a memoizing callable that saves up to the "
"*maxsize* most recent calls.  It can save time when an expensive or I/O "
"bound function is periodically called with the same arguments."
msgstr ""
"一个为函数提供缓存功能的装饰器，缓存 *maxsize* 组传入参数，在下次以相同参数调用时直接返回上一次的结果。用以节约高开销或I/O函数的调用时间。"

#: ../../library/functools.rst:151
msgid ""
"Since a dictionary is used to cache results, the positional and keyword "
"arguments to the function must be :term:`hashable`."
msgstr "由于使用字典来缓存结果，因此传给该函数的位置和关键字参数必须为 :term:`hashable`。"

#: ../../library/functools.rst:154
msgid ""
"Distinct argument patterns may be considered to be distinct calls with "
"separate cache entries.  For example, ``f(a=1, b=2)`` and ``f(b=2, a=1)`` "
"differ in their keyword argument order and may have two separate cache "
"entries."
msgstr ""
"不同的参数模式可能会被视为具有单独缓存项的不同调用。 例如，``f(a=1, b=2)`` 和 ``f(b=2, a=1)`` "
"因其关键字参数顺序不同而可能会具有两个单独的缓存项。"

#: ../../library/functools.rst:159
msgid ""
"If *user_function* is specified, it must be a callable. This allows the "
"*lru_cache* decorator to be applied directly to a user function, leaving the"
" *maxsize* at its default value of 128::"
msgstr ""
"如果指定了 *user_function*，它必须是一个可调用对象。 这允许 *lru_cache* 装饰器被直接应用于一个用户自定义函数，让 "
"*maxsize* 保持其默认值 128::"

#: ../../library/functools.rst:167
msgid ""
"If *maxsize* is set to ``None``, the LRU feature is disabled and the cache "
"can grow without bound."
msgstr "如果 *maxsize* 设为 ``None``，LRU 特性将被禁用且缓存可无限增长。"

#: ../../library/functools.rst:170
msgid ""
"If *typed* is set to true, function arguments of different types will be "
"cached separately.  If *typed* is false, the implementation will usually "
"regard them as equivalent calls and only cache a single result. (Some types "
"such as *str* and *int* may be cached separately even when *typed* is "
"false.)"
msgstr ""
"如果 *typed* 被设置为 true ，不同类型的函数参数将被分别缓存。 如果 *typed* 为 false "
"，实现通常会将它们视为等价的调用，只缓存一个结果。(有些类型，如 *str* 和 *int* ，即使 *typed* 为 false "
"，也可能被分开缓存）。"

#: ../../library/functools.rst:176
msgid ""
"Note, type specificity applies only to the function's immediate arguments "
"rather than their contents.  The scalar arguments, ``Decimal(42)`` and "
"``Fraction(42)`` are be treated as distinct calls with distinct results. In "
"contrast, the tuple arguments ``('answer', Decimal(42))`` and ``('answer', "
"Fraction(42))`` are treated as equivalent."
msgstr ""
"注意，类型的特殊性只适用于函数的直接参数而不是它们的内容。 标量参数 ``Decimal(42)`` 和 ``Fraction(42)`` "
"被视为具有不同结果的不同调用。相比之下，元组参数 ``('answer', Decimal(42))`` 和 ``('answer', "
"Fraction(42))`` 被视为等同的。"

#: ../../library/functools.rst:182
msgid ""
"The wrapped function is instrumented with a :func:`!cache_parameters` "
"function that returns a new :class:`dict` showing the values for *maxsize* "
"and *typed*.  This is for information purposes only.  Mutating the values "
"has no effect."
msgstr ""
"被包装的函数配有一个 :func:`!cache_parameters` 函数，它返回一个新的 :class:`dict` 用来显示 *maxsize*"
" 和 *typed* 的值。 这只是出于显示信息的目的。 改变这些值没有有任何效果。"

#: ../../library/functools.rst:187
msgid ""
"To help measure the effectiveness of the cache and tune the *maxsize* "
"parameter, the wrapped function is instrumented with a :func:`cache_info` "
"function that returns a :term:`named tuple` showing *hits*, *misses*, "
"*maxsize* and *currsize*."
msgstr ""
"为了帮助衡量缓存的有效性以及调整 *maxsize* 形参，被包装的函数会带有一个 :func:`cache_info` 函数，它返回一个 "
":term:`named tuple` 以显示 *hits*, *misses*, *maxsize* 和 *currsize*。"

#: ../../library/functools.rst:192
msgid ""
"The decorator also provides a :func:`cache_clear` function for clearing or "
"invalidating the cache."
msgstr "该装饰器也提供了一个用于清理/使缓存失效的函数 :func:`cache_clear` 。"

#: ../../library/functools.rst:195
msgid ""
"The original underlying function is accessible through the "
":attr:`__wrapped__` attribute.  This is useful for introspection, for "
"bypassing the cache, or for rewrapping the function with a different cache."
msgstr ""
"原始的未经装饰的函数可以通过 :attr:`__wrapped__` 属性访问。它可以用于检查、绕过缓存，或使用不同的缓存再次装饰原始函数。"

#: ../../library/functools.rst:199
msgid ""
"The cache keeps references to the arguments and return values until they age"
" out of the cache or until the cache is cleared."
msgstr "缓存会保持对参数的引用并返回值，直到它们结束生命期退出缓存或者直到缓存被清空。"

#: ../../library/functools.rst:202
msgid ""
"If a method is cached, the ``self`` instance argument is included in the "
"cache.  See :ref:`faq-cache-method-calls`"
msgstr "如果一个方法被缓存，则 ``self`` 实例参数会被包括在缓存中。 请参阅 :ref:`faq-cache-method-calls`"

#: ../../library/functools.rst:205
msgid ""
"An `LRU (least recently used) cache "
"<https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)>`_"
" works best when the most recent calls are the best predictors of upcoming "
"calls (for example, the most popular articles on a news server tend to "
"change each day).  The cache's size limit assures that the cache does not "
"grow without bound on long-running processes such as web servers."
msgstr ""
"`LRU（最久未使用算法）缓存 "
"<https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)>`_"
" 在最近的调用是即将到来的调用的最佳预测值时性能最好（例如，新闻服务器上最热门文章倾向于每天更改）。 "
"缓存的大小限制可确保缓存不会在长期运行进程如网站服务器上无限制地增长。"

#: ../../library/functools.rst:212
msgid ""
"In general, the LRU cache should only be used when you want to reuse "
"previously computed values.  Accordingly, it doesn't make sense to cache "
"functions with side-effects, functions that need to create distinct mutable "
"objects on each call (such as generators and async functions), or impure "
"functions such as time() or random()."
msgstr ""
"一般来说，LRU 缓存只应在你需要重复使用先前计算的值时使用。 "
"因此，缓存有附带影响的函数、每次调用都需要创建不同的可变对象的函数（如生成器和异步函数）或不纯的函数如 time() 或 random() "
"等是没有意义的。"

#: ../../library/functools.rst:218
msgid "Example of an LRU cache for static web content::"
msgstr "静态 Web 内容的 LRU 缓存示例::"

#: ../../library/functools.rst:237
msgid ""
"Example of efficiently computing `Fibonacci numbers "
"<https://en.wikipedia.org/wiki/Fibonacci_number>`_ using a cache to "
"implement a `dynamic programming "
"<https://en.wikipedia.org/wiki/Dynamic_programming>`_ technique::"
msgstr ""
"以下是使用缓存通过 `动态规划 <https://zh.wikipedia.org/wiki/动态规划>`_  计算 `斐波那契数列 "
"<https://zh.wikipedia.org/wiki/斐波那契数列>`_  的例子。"

#: ../../library/functools.rst:257
msgid "Added the *typed* option."
msgstr "添加 *typed* 选项。"

#: ../../library/functools.rst:260
msgid "Added the *user_function* option."
msgstr "添加了 *user_function* 选项。"

#: ../../library/functools.rst:263
msgid "Added the function :func:`!cache_parameters`"
msgstr "增加了 :func:`!cache_parameters` 函数"

#: ../../library/functools.rst:268
msgid ""
"Given a class defining one or more rich comparison ordering methods, this "
"class decorator supplies the rest.  This simplifies the effort involved in "
"specifying all of the possible rich comparison operations:"
msgstr "给定一个声明一个或多个全比较排序方法的类，这个类装饰器实现剩余的方法。这减轻了指定所有可能的全比较操作的工作。"

#: ../../library/functools.rst:272
msgid ""
"The class must define one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`,"
" or :meth:`__ge__`. In addition, the class should supply an :meth:`__eq__` "
"method."
msgstr ""
"此类必须包含以下方法之一：:meth:`__lt__` 、:meth:`__le__`、:meth:`__gt__` 或 "
":meth:`__ge__`。另外，此类必须支持 :meth:`__eq__` 方法。"

#: ../../library/functools.rst:296
msgid ""
"While this decorator makes it easy to create well behaved totally ordered "
"types, it *does* come at the cost of slower execution and more complex stack"
" traces for the derived comparison methods. If performance benchmarking "
"indicates this is a bottleneck for a given application, implementing all six"
" rich comparison methods instead is likely to provide an easy speed boost."
msgstr ""
"虽然此装饰器使得创建具有良好行为的完全有序类型变得非常容易，但它 *确实* 是以执行速度更缓慢和派生比较方法的堆栈回溯更复杂为代价的。 "
"如果性能基准测试表明这是特定应用的瓶颈所在，则改为实现全部六个富比较方法应该会轻松提升速度。"

#: ../../library/functools.rst:305
msgid ""
"This decorator makes no attempt to override methods that have been declared "
"in the class *or its superclasses*. Meaning that if a superclass defines a "
"comparison operator, *total_ordering* will not implement it again, even if "
"the original method is abstract."
msgstr ""
"这个装饰器不会尝试重写类 *或其上级类* 中已经被声明的方法。 这意味着如果某个上级类定义了比较运算符，则 *total_ordering* "
"将不会再次实现它，即使原方法是抽象方法。"

#: ../../library/functools.rst:312
msgid ""
"Returning NotImplemented from the underlying comparison function for "
"unrecognised types is now supported."
msgstr "现在已支持从未识别类型的下层比较函数返回 NotImplemented 异常。"

#: ../../library/functools.rst:318
msgid ""
"Return a new :ref:`partial object<partial-objects>` which when called will "
"behave like *func* called with the positional arguments *args* and keyword "
"arguments *keywords*. If more arguments are supplied to the call, they are "
"appended to *args*. If additional keyword arguments are supplied, they "
"extend and override *keywords*. Roughly equivalent to::"
msgstr ""
"返回一个新的 :ref:`部分对象<partial-objects>`，当被调用时其行为类似于 *func* 附带位置参数 *args* 和关键字参数 "
"*keywords* 被调用。 如果为调用提供了更多的参数，它们会被附加到 *args*。 如果提供了额外的关键字参数，它们会扩展并重写 "
"*keywords*。 大致等价于::"

#: ../../library/functools.rst:334
msgid ""
"The :func:`partial` is used for partial function application which "
"\"freezes\" some portion of a function's arguments and/or keywords resulting"
" in a new object with a simplified signature.  For example, :func:`partial` "
"can be used to create a callable that behaves like the :func:`int` function "
"where the *base* argument defaults to two:"
msgstr ""
":func:`partial` 会被“冻结了”一部分函数参数和/或关键字的部分函数应用所使用，从而得到一个具有简化签名的新对象。 "
"例如，:func:`partial` 可用来创建一个行为类似于 :func:`int` 函数的可调用对象，其中 *base* 参数默认为二："

#: ../../library/functools.rst:349
msgid ""
"Return a new :class:`partialmethod` descriptor which behaves like "
":class:`partial` except that it is designed to be used as a method "
"definition rather than being directly callable."
msgstr ""
"返回一个新的 :class:`partialmethod` 描述器，其行为类似 :class:`partial` "
"但它被设计用作方法定义而非直接用作可调用对象。"

#: ../../library/functools.rst:353
msgid ""
"*func* must be a :term:`descriptor` or a callable (objects which are both, "
"like normal functions, are handled as descriptors)."
msgstr "*func* 必须是一个 :term:`descriptor` 或可调用对象（同属两者的对象例如普通函数会被当作描述器来处理）。"

#: ../../library/functools.rst:356
msgid ""
"When *func* is a descriptor (such as a normal Python function, "
":func:`classmethod`, :func:`staticmethod`, :func:`abstractmethod` or another"
" instance of :class:`partialmethod`), calls to ``__get__`` are delegated to "
"the underlying descriptor, and an appropriate :ref:`partial object<partial-"
"objects>` returned as the result."
msgstr ""
"当 *func* 是一个描述器（例如普通 Python 函数, :func:`classmethod`, :func:`staticmethod`, "
":func:`abstractmethod` 或其他 :class:`partialmethod` 的实例）时, 对 ``__get__`` "
"的调用会被委托给底层的描述器，并会返回一个适当的 :ref:`部分对象<partial-objects>` 作为结果。"

#: ../../library/functools.rst:362
msgid ""
"When *func* is a non-descriptor callable, an appropriate bound method is "
"created dynamically. This behaves like a normal Python function when used as"
" a method: the *self* argument will be inserted as the first positional "
"argument, even before the *args* and *keywords* supplied to the "
":class:`partialmethod` constructor."
msgstr ""
"当 *func* 是一个非描述器类可调用对象时，则会动态创建一个适当的绑定方法。 当用作方法时其行为类似普通 Python 函数：将会插入 *self*"
" 参数作为第一个位置参数，其位置甚至会处于提供给 :class:`partialmethod` 构造器的 *args* 和 *keywords* 之前。"

#: ../../library/functools.rst:393
msgid ""
"Apply *function* of two arguments cumulatively to the items of *iterable*, "
"from left to right, so as to reduce the iterable to a single value.  For "
"example, ``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` calculates "
"``((((1+2)+3)+4)+5)``. The left argument, *x*, is the accumulated value and "
"the right argument, *y*, is the update value from the *iterable*.  If the "
"optional *initializer* is present, it is placed before the items of the "
"iterable in the calculation, and serves as a default when the iterable is "
"empty.  If *initializer* is not given and *iterable* contains only one item,"
" the first item is returned."
msgstr ""
"将两个参数的 *function* 从左至右积累地应用到 *iterable* 的条目，以便将该可迭代对象缩减为单一的值。 "
"例如，``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` 是计算 ``((((1+2)+3)+4)+5)`` "
"的值。 左边的参数 *x* 是积累值而右边的参数 *y* 则是来自 *iterable* 的更新值。 如果存在可选项 "
"*initializer*，它会被放在参与计算的可迭代对象的条目之前，并在可迭代对象为空时作为默认值。 如果没有给出 *initializer* 并且 "
"*iterable* 仅包含一个条目，则将返回第一项。"

#: ../../library/functools.rst:402
msgid "Roughly equivalent to::"
msgstr "大致相当于："

#: ../../library/functools.rst:414
msgid ""
"See :func:`itertools.accumulate` for an iterator that yields all "
"intermediate values."
msgstr "请参阅 :func:`itertools.accumulate` 了解有关可产生所有中间值的迭代器。"

#: ../../library/functools.rst:419
msgid ""
"Transform a function into a :term:`single-dispatch <single dispatch>` "
":term:`generic function`."
msgstr "将一个函数转换为 :term:`单分派 <single dispatch>` :term:`generic function`。"

#: ../../library/functools.rst:422
msgid ""
"To define a generic function, decorate it with the ``@singledispatch`` "
"decorator. When defining a function using ``@singledispatch``, note that the"
" dispatch happens on the type of the first argument::"
msgstr ""
"要定义一个泛型函数，用装饰器 ``@singledispatch`` 来装饰它。当使用 ``@singledispatch`` "
"定义一个函数时，请注意调度发生在第一个参数的类型上::"

#: ../../library/functools.rst:433
msgid ""
"To add overloaded implementations to the function, use the :func:`register` "
"attribute of the generic function, which can be used as a decorator.  For "
"functions annotated with types, the decorator will infer the type of the "
"first argument automatically::"
msgstr ""
"要将重载的实现添加到函数中，请使用泛型函数的 :func:`register` 属性，它可以被用作装饰器。 "
"对于带有类型标注的函数，该装饰器将自动推断第一个参数的类型::"

#: ../../library/functools.rst:451
msgid ":data:`types.UnionType` and :data:`typing.Union` can also be used::"
msgstr "还可以使用 :data:`types.UnionType` 和 :data:`typing.Union`::"

#: ../../library/functools.rst:468
msgid ""
"For code which doesn't use type annotations, the appropriate type argument "
"can be passed explicitly to the decorator itself::"
msgstr "对于不使用类型标注的代码，可以将适当的类型参数显式地传给装饰器本身::"

#: ../../library/functools.rst:479
msgid ""
"To enable registering :term:`lambdas<lambda>` and pre-existing functions, "
"the :func:`register` attribute can also be used in a functional form::"
msgstr "要启用注册 :term:`lambda <lambda>` 和现有的函数，也可以使用 :func:`register` 属性的函数形式::"

#: ../../library/functools.rst:487
msgid ""
"The :func:`register` attribute returns the undecorated function. This "
"enables decorator stacking, :mod:`pickling<pickle>`, and the creation of "
"unit tests for each variant independently::"
msgstr ""
":func:`register` 属性会返回未被装饰的函数。 这将启用装饰器栈、:mod:`封存 <pickle>`，并为每个变量单独创建单元测试::"

#: ../../library/functools.rst:501
msgid ""
"When called, the generic function dispatches on the type of the first "
"argument::"
msgstr "在调用时，泛型函数会根据第一个参数的类型进行分派::"

#: ../../library/functools.rst:521
msgid ""
"Where there is no registered implementation for a specific type, its method "
"resolution order is used to find a more generic implementation. The original"
" function decorated with ``@singledispatch`` is registered for the base "
":class:`object` type, which means it is used if no better implementation is "
"found."
msgstr ""
"在没有针对特定类型的已注册实现的情况下，会使用其方法解析顺序来查找更通用的实现。 使用 ``@singledispatch`` 装饰的原始函数将为基本的"
" :class:`object` 类型进行注册，这意味着它将在找不到更好的实现时被使用。"

#: ../../library/functools.rst:527
msgid ""
"If an implementation is registered to an :term:`abstract base class`, "
"virtual subclasses of the base class will be dispatched to that "
"implementation::"
msgstr "如果一个实现被注册到 :term:`abstract base class`，则基类的虚拟子类将被发送到该实现::"

#: ../../library/functools.rst:542
msgid ""
"To check which implementation the generic function will choose for a given "
"type, use the ``dispatch()`` attribute::"
msgstr "要检查泛型函数将为给定的类型选择哪个实现，请使用 ``dispatch()`` 属性::"

#: ../../library/functools.rst:550
msgid ""
"To access all registered implementations, use the read-only ``registry`` "
"attribute::"
msgstr "要访问所有已注册实现，请使用只读的 ``registry`` 属性::"

#: ../../library/functools.rst:564
msgid "The :func:`register` attribute now supports using type annotations."
msgstr ":func:`register` 属性现在支持使用类型标注。"

#: ../../library/functools.rst:567
msgid ""
"The :func:`register` attribute now supports :data:`types.UnionType` and "
":data:`typing.Union` as type annotations."
msgstr ""
":func:`register` 属性现在支持将 :data:`types.UnionType` 和 :data:`typing.Union` "
"作为类型标注。"

#: ../../library/functools.rst:574
msgid ""
"Transform a method into a :term:`single-dispatch <single dispatch>` "
":term:`generic function`."
msgstr "将一个方法转换为 :term:`单分派 <single dispatch>` :term:`generic function`。"

#: ../../library/functools.rst:577
msgid ""
"To define a generic method, decorate it with the ``@singledispatchmethod`` "
"decorator. When defining a function using ``@singledispatchmethod``, note "
"that the dispatch happens on the type of the first non-*self* or non-*cls* "
"argument::"
msgstr ""
"要定义一个泛型方法，请用 ``@singledispatchmethod`` 装饰器来装饰它。 当使用 "
"``@singledispatchmethod`` 定义一个函数时，请注意发送操作将针对第一个非 *self* 或非 *cls* 参数的类型上::"

#: ../../library/functools.rst:595
msgid ""
"``@singledispatchmethod`` supports nesting with other decorators such as "
":func:`@classmethod<classmethod>`. Note that to allow for "
"``dispatcher.register``, ``singledispatchmethod`` must be the *outer most* "
"decorator. Here is the ``Negator`` class with the ``neg`` methods bound to "
"the class, rather than an instance of the class::"
msgstr ""
"``@singledispatchmethod`` 支持与其他装饰器如 :func:`@classmethod<classmethod>` 相嵌套。 "
"请注意为了允许 ``dispatcher.register``，``singledispatchmethod`` 必须是 *最外层的* 装饰器。 "
"下面是一个 ``Negator`` 类包含绑定到类的 ``neg`` 方法，而不是一个类实例::"

#: ../../library/functools.rst:617
msgid ""
"The same pattern can be used for other similar decorators: "
":func:`@staticmethod<staticmethod>`, "
":func:`@abstractmethod<abc.abstractmethod>`, and others."
msgstr ""
"同样的模式也可被用于其他类似的装饰器: :func:`@staticmethod<staticmethod>`, "
":func:`@abstractmethod<abc.abstractmethod>` 等等。"

#: ../../library/functools.rst:626
msgid ""
"Update a *wrapper* function to look like the *wrapped* function. The "
"optional arguments are tuples to specify which attributes of the original "
"function are assigned directly to the matching attributes on the wrapper "
"function and which attributes of the wrapper function are updated with the "
"corresponding attributes from the original function. The default values for "
"these arguments are the module level constants ``WRAPPER_ASSIGNMENTS`` "
"(which assigns to the wrapper function's ``__module__``, ``__name__``, "
"``__qualname__``, ``__annotations__`` and ``__doc__``, the documentation "
"string) and ``WRAPPER_UPDATES`` (which updates the wrapper function's "
"``__dict__``, i.e. the instance dictionary)."
msgstr ""
"更新一个 *wrapper* 函数以使其类似于 *wrapped* 函数。 可选参数为指明原函数的哪些属性要直接被赋值给 wrapper "
"函数的匹配属性的元组，并且这些 wrapper 函数的属性将使用原函数的对应属性来更新。 这些参数的默认值是模块级常量 "
"``WRAPPER_ASSIGNMENTS`` (它将被赋值给 wrapper 函数的 ``__module__``, ``__name__``, "
"``__qualname__``, ``__annotations__`` 和 ``__doc__`` 即文档字符串) 以及 "
"``WRAPPER_UPDATES`` (它将更新 wrapper 函数的 ``__dict__`` 即实例字典)。"

#: ../../library/functools.rst:636
msgid ""
"To allow access to the original function for introspection and other "
"purposes (e.g. bypassing a caching decorator such as :func:`lru_cache`), "
"this function automatically adds a ``__wrapped__`` attribute to the wrapper "
"that refers to the function being wrapped."
msgstr ""
"为了允许出于内省和其他目的访问原始函数（例如绕过 :func:`lru_cache` 之类的缓存装饰器），此函数会自动为 wrapper "
"添加一个指向被包装函数的 ``__wrapped__`` 属性。"

#: ../../library/functools.rst:641
msgid ""
"The main intended use for this function is in :term:`decorator` functions "
"which wrap the decorated function and return the wrapper. If the wrapper "
"function is not updated, the metadata of the returned function will reflect "
"the wrapper definition rather than the original function definition, which "
"is typically less than helpful."
msgstr ""
"此函数的主要目的是在 :term:`decorator` 函数中用来包装被装饰的函数并返回包装器。 "
"如果包装器函数未被更新，则被返回函数的元数据将反映包装器定义而不是原始函数定义，这通常没有什么用处。"

#: ../../library/functools.rst:647
msgid ""
":func:`update_wrapper` may be used with callables other than functions. Any "
"attributes named in *assigned* or *updated* that are missing from the object"
" being wrapped are ignored (i.e. this function will not attempt to set them "
"on the wrapper function). :exc:`AttributeError` is still raised if the "
"wrapper function itself is missing any attributes named in *updated*."
msgstr ""
":func:`update_wrapper` 可以与函数之外的可调用对象一同使用。 在 *assigned* 或 *updated* "
"中命名的任何属性如果不存在于被包装对象则会被忽略（即该函数将不会尝试在包装器函数上设置它们）。 如果包装器函数自身缺少在 *updated* "
"中命名的任何属性则仍将引发 :exc:`AttributeError`。"

#: ../../library/functools.rst:653
msgid ""
"The ``__wrapped__`` attribute is now automatically added. The "
"``__annotations__`` attribute is now copied by default. Missing attributes "
"no longer trigger an :exc:`AttributeError`."
msgstr ""
"现在 ``__wrapped__`` 属性会被自动添加。 现在 ``__annotations__`` 属性默认将被拷贝。 缺失的属性将不再触发 "
":exc:`AttributeError`。"

#: ../../library/functools.rst:658
msgid ""
"The ``__wrapped__`` attribute now always refers to the wrapped function, "
"even if that function defined a ``__wrapped__`` attribute. (see "
":issue:`17482`)"
msgstr ""
"``__wrapped__`` 属性现在总是指向被包装的函数，即使该函数定义了 ``__wrapped__`` 属性。 (参见 "
":issue:`17482`)"

#: ../../library/functools.rst:666
msgid ""
"This is a convenience function for invoking :func:`update_wrapper` as a "
"function decorator when defining a wrapper function.  It is equivalent to "
"``partial(update_wrapper, wrapped=wrapped, assigned=assigned, "
"updated=updated)``. For example::"
msgstr ""
"这是一个便捷函数，用于在定义包装器函数时唤起 :func:`update_wrapper` 作为函数装饰器。 它等价于 "
"``partial(update_wrapper, wrapped=wrapped, assigned=assigned, "
"updated=updated)``。 例如::"

#: ../../library/functools.rst:692
msgid ""
"Without the use of this decorator factory, the name of the example function "
"would have been ``'wrapper'``, and the docstring of the original "
":func:`example` would have been lost."
msgstr ""
"如果不使用这个装饰器工厂函数，则 example 函数的名称将变为 ``'wrapper'``，并且 :func:`example` "
"原本的文档字符串将会丢失。"

#: ../../library/functools.rst:700
msgid ":class:`partial` Objects"
msgstr ":class:`partial` 对象"

#: ../../library/functools.rst:702
msgid ""
":class:`partial` objects are callable objects created by :func:`partial`. "
"They have three read-only attributes:"
msgstr ":class:`partial` 对象是由 :func:`partial` 创建的可调用对象。 它们具有三个只读属性："

#: ../../library/functools.rst:708
msgid ""
"A callable object or function.  Calls to the :class:`partial` object will be"
" forwarded to :attr:`func` with new arguments and keywords."
msgstr "一个可调用对象或函数。 对 :class:`partial` 对象的调用将被转发给 :attr:`func` 并附带新的参数和关键字。"

#: ../../library/functools.rst:714
msgid ""
"The leftmost positional arguments that will be prepended to the positional "
"arguments provided to a :class:`partial` object call."
msgstr "最左边的位置参数将放置在提供给 :class:`partial` 对象调用的位置参数之前。"

#: ../../library/functools.rst:720
msgid ""
"The keyword arguments that will be supplied when the :class:`partial` object"
" is called."
msgstr "当调用 :class:`partial` 对象时将要提供的关键字参数。"

#: ../../library/functools.rst:723
msgid ""
":class:`partial` objects are like :class:`function` objects in that they are"
" callable, weak referenceable, and can have attributes.  There are some "
"important differences.  For instance, the :attr:`~definition.__name__` and "
":attr:`__doc__` attributes are not created automatically.  Also, "
":class:`partial` objects defined in classes behave like static methods and "
"do not transform into bound methods during instance attribute look-up."
msgstr ""
":class:`partial` 对象与 :class:`function` 对象的类似之处在于它们都可调用、可弱引用并可拥有属性。 "
"但两者也存在一些重要的区别。 例如，前者不会自动创建 :attr:`~definition.__name__` 和 :attr:`__doc__` "
"属性。 而且，在类中定义的 :class:`partial` 对象的行为类似于静态方法且不会在实例属性查找期间转换为绑定方法。"
