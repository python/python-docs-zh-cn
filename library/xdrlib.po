# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xdrlib.rst:2
msgid ":mod:`xdrlib` --- Encode and decode XDR data"
msgstr ":mod:`xdrlib` --- 编码与解码 XDR 数据"

#: ../../library/xdrlib.rst:8
msgid "**Source code:** :source:`Lib/xdrlib.py`"
msgstr "**源代码:** :source:`Lib/xdrlib.py`"

#: ../../library/xdrlib.rst:14
msgid ""
"The :mod:`xdrlib` module is deprecated (see :pep:`PEP 594 <594#xdrlib>` for "
"details)."
msgstr ":mod:`xdrlib` 模块已被弃用（请参阅 :pep:`PEP 594 <594#xdrlib>` 了解详情）。"

#: ../../library/xdrlib.rst:20
msgid ""
"The :mod:`xdrlib` module supports the External Data Representation Standard "
"as described in :rfc:`1014`, written by Sun Microsystems, Inc. June 1987.  "
"It supports most of the data types described in the RFC."
msgstr ""
":mod:`xdrlib` 模块为外部数据表示标准提供支持，该标准的描述见 :rfc:`1014`，由 Sun Microsystems, Inc. 在"
" 1987 年 6 月撰写。 它支持该 RFC 中描述的大部分数据类型。"

#: ../../library/xdrlib.rst:24
msgid ""
"The :mod:`xdrlib` module defines two classes, one for packing variables into"
" XDR representation, and another for unpacking from XDR representation.  "
"There are also two exception classes."
msgstr ""
":mod:`xdrlib` 模块定义了两个类，一个用于将变量打包为 XDR 表示形式，另一个用于从 XDR 表示形式解包。 此外还有两个异常类。"

#: ../../library/xdrlib.rst:31
msgid ""
":class:`Packer` is the class for packing data into XDR representation. The "
":class:`Packer` class is instantiated with no arguments."
msgstr ":class:`Packer` 是用于将数据打包为 XDR 表示形式的类。 :class:`Packer` 类的实例化不附带参数。"

#: ../../library/xdrlib.rst:37
msgid ""
"``Unpacker`` is the complementary class which unpacks XDR data values from a"
" string buffer.  The input buffer is given as *data*."
msgstr "``Unpacker`` 是用于相应地从字符串缓冲区解包 XDR 数据值的类。 输入缓冲区将作为 *data* 给出。"

#: ../../library/xdrlib.rst:43
msgid ":rfc:`1014` - XDR: External Data Representation Standard"
msgstr ":rfc:`1014` - XDR: 外部数据表示标准"

#: ../../library/xdrlib.rst:44
msgid ""
"This RFC defined the encoding of data which was XDR at the time this module "
"was originally written.  It has apparently been obsoleted by :rfc:`1832`."
msgstr "这个 RFC 定义了最初编写此模块时 XDR 所用的数据编码格式。 显然它已被 :rfc:`1832` 所淘汰。"

#: ../../library/xdrlib.rst:47
msgid ":rfc:`1832` - XDR: External Data Representation Standard"
msgstr ":rfc:`1832` - XDR: 外部数据表示标准"

#: ../../library/xdrlib.rst:48
msgid "Newer RFC that provides a revised definition of XDR."
msgstr "更新的 RFC，它提供了经修订的 XDR 定义。"

#: ../../library/xdrlib.rst:54
msgid "Packer Objects"
msgstr "Packer 对象"

#: ../../library/xdrlib.rst:56
msgid ":class:`Packer` instances have the following methods:"
msgstr ":class:`Packer` 实例具有下列方法:"

#: ../../library/xdrlib.rst:61
msgid "Returns the current pack buffer as a string."
msgstr "将当前打包缓冲区以字符串的形式返回。"

#: ../../library/xdrlib.rst:66
msgid "Resets the pack buffer to the empty string."
msgstr "将打包缓冲区重置为空字符串。"

#: ../../library/xdrlib.rst:68
msgid ""
"In general, you can pack any of the most common XDR data types by calling "
"the appropriate ``pack_type()`` method.  Each method takes a single "
"argument, the value to pack.  The following simple data type packing methods"
" are supported: :meth:`pack_uint`, :meth:`pack_int`, :meth:`pack_enum`, "
":meth:`pack_bool`, :meth:`pack_uhyper`, and :meth:`pack_hyper`."
msgstr ""
"总体来说，你可以通过调用适当的 ``pack_type()`` 方法来打包任何最常见的 XDR 数据类型。 每个方法都是接受单个参数，即要打包的值。 "
"受支持的简单数据类型打包方法如下: :meth:`pack_uint`, :meth:`pack_int`, :meth:`pack_enum`, "
":meth:`pack_bool`, :meth:`pack_uhyper` 以及 :meth:`pack_hyper`。"

#: ../../library/xdrlib.rst:77
msgid "Packs the single-precision floating point number *value*."
msgstr "打包单精度浮点数 *value*。"

#: ../../library/xdrlib.rst:82
msgid "Packs the double-precision floating point number *value*."
msgstr "打包双精度浮点数 *value*。"

#: ../../library/xdrlib.rst:84
msgid "The following methods support packing strings, bytes, and opaque data:"
msgstr "以下方法支持打包字符串、字节串以及不透明数据。"

#: ../../library/xdrlib.rst:89
msgid ""
"Packs a fixed length string, *s*.  *n* is the length of the string but it is"
" *not* packed into the data buffer.  The string is padded with null bytes if"
" necessary to guaranteed 4 byte alignment."
msgstr ""
"打包固定长度字符串 *s*。 *n* 为字符串的长度，但它 *不会* 被打包进数据缓冲区。 如有必要字符串会以空字节串填充以保证 4 字节对齐。"

#: ../../library/xdrlib.rst:96
msgid ""
"Packs a fixed length opaque data stream, similarly to :meth:`pack_fstring`."
msgstr "打包固定长度不透明数据流，类似于 :meth:`pack_fstring`。"

#: ../../library/xdrlib.rst:101
msgid ""
"Packs a variable length string, *s*.  The length of the string is first "
"packed as an unsigned integer, then the string data is packed with "
":meth:`pack_fstring`."
msgstr "打包可变长度字符串 *s*。 先将字符串的长度打包为无符号整数，再用 :meth:`pack_fstring` 来打包字符串数据。"

#: ../../library/xdrlib.rst:108
msgid ""
"Packs a variable length opaque data string, similarly to "
":meth:`pack_string`."
msgstr "打包可变长度不透明数据流，类似于 :meth:`pack_string`。"

#: ../../library/xdrlib.rst:113
msgid "Packs a variable length byte stream, similarly to :meth:`pack_string`."
msgstr "打包可变长度字节流，类似于 :meth:`pack_string`。"

#: ../../library/xdrlib.rst:115
msgid "The following methods support packing arrays and lists:"
msgstr "下列方法支持打包数组和列表:"

#: ../../library/xdrlib.rst:120
msgid ""
"Packs a *list* of homogeneous items.  This method is useful for lists with "
"an indeterminate size; i.e. the size is not available until the entire list "
"has been walked.  For each item in the list, an unsigned integer ``1`` is "
"packed first, followed by the data value from the list.  *pack_item* is the "
"function that is called to pack the individual item.  At the end of the "
"list, an unsigned integer ``0`` is packed."
msgstr ""
"打包由同质条目构成的 *list*。 此方法适用于不确定长度的列表；即其长度无法在遍历整个列表之前获知。 对于列表中的每个条目，先打包一个无符号整数 "
"``1``，再添加列表中数据的值。 *pack_item* 是在打包单个条目时要调用的函数。 在列表的末尾，会再打包一个无符号整数 ``0``。"

#: ../../library/xdrlib.rst:127
msgid ""
"For example, to pack a list of integers, the code might appear like this::"
msgstr "例如，要打包一个整数列表，代码看起来会是这样::"

#: ../../library/xdrlib.rst:129
msgid ""
"import xdrlib\n"
"p = xdrlib.Packer()\n"
"p.pack_list([1, 2, 3], p.pack_int)"
msgstr ""

#: ../../library/xdrlib.rst:136
msgid ""
"Packs a fixed length list (*array*) of homogeneous items.  *n* is the length"
" of the list; it is *not* packed into the buffer, but a :exc:`ValueError` "
"exception is raised if ``len(array)`` is not equal to *n*.  As above, "
"*pack_item* is the function used to pack each element."
msgstr ""
"打包由同质条目构成的固定长度列表 (*array*)。 *n* 为列表长度；它 *不会* 被打包到缓冲区，但是如果 ``len(array)`` 不等于"
" *n* 则会引发 :exc:`ValueError`。 如上所述，*pack_item* 是在打包每个元素时要使用的函数。"

#: ../../library/xdrlib.rst:144
msgid ""
"Packs a variable length *list* of homogeneous items.  First, the length of "
"the list is packed as an unsigned integer, then each element is packed as in"
" :meth:`pack_farray` above."
msgstr ""
"打包由同质条目构成的可变长度 *list*。 先将列表的长度打包为无符号整数，再像上面的 :meth:`pack_farray` 一样打包每个元素。"

#: ../../library/xdrlib.rst:152
msgid "Unpacker Objects"
msgstr "Unpacker 对象"

#: ../../library/xdrlib.rst:154
msgid "The :class:`Unpacker` class offers the following methods:"
msgstr ":class:`Unpacker` 类提供以下方法:"

#: ../../library/xdrlib.rst:159
msgid "Resets the string buffer with the given *data*."
msgstr "使用给定的 *data* 重置字符串缓冲区。"

#: ../../library/xdrlib.rst:164
msgid "Returns the current unpack position in the data buffer."
msgstr "返回数据缓冲区中的当前解包位置。"

#: ../../library/xdrlib.rst:169
msgid ""
"Sets the data buffer unpack position to *position*.  You should be careful "
"about using :meth:`get_position` and :meth:`set_position`."
msgstr ""
"将数据缓冲区的解包位置设为 *position*。 你应当小心使用 :meth:`get_position` 和 "
":meth:`set_position`。"

#: ../../library/xdrlib.rst:175
msgid "Returns the current unpack data buffer as a string."
msgstr "将当前解包数据缓冲区以字符串的形式返回。"

#: ../../library/xdrlib.rst:180
msgid ""
"Indicates unpack completion.  Raises an :exc:`Error` exception if all of the"
" data has not been unpacked."
msgstr "表明解包完成。 如果数据没有全部完成解包则会引发 :exc:`Error` 异常。"

#: ../../library/xdrlib.rst:183
msgid ""
"In addition, every data type that can be packed with a :class:`Packer`, can "
"be unpacked with an :class:`Unpacker`.  Unpacking methods are of the form "
"``unpack_type()``, and take no arguments.  They return the unpacked object."
msgstr ""
"此外，每种可通过 :class:`Packer` 打包的数据类型都可通过 :class:`Unpacker` 来解包。 解包方法的形式为 "
"``unpack_type()``，并且不接受任何参数。 该方法将返回解包后的对象。"

#: ../../library/xdrlib.rst:190
msgid "Unpacks a single-precision floating point number."
msgstr "解包单精度浮点数。"

#: ../../library/xdrlib.rst:195
msgid ""
"Unpacks a double-precision floating point number, similarly to "
":meth:`unpack_float`."
msgstr "解包双精度浮点数，类似于 :meth:`unpack_float`。"

#: ../../library/xdrlib.rst:198
msgid ""
"In addition, the following methods unpack strings, bytes, and opaque data:"
msgstr "此外，以下方法可用来解包字符串、字节串以及不透明数据:"

#: ../../library/xdrlib.rst:203
msgid ""
"Unpacks and returns a fixed length string.  *n* is the number of characters "
"expected.  Padding with null bytes to guaranteed 4 byte alignment is "
"assumed."
msgstr "解包并返回固定长度字符串。 *n* 为期望的字符数量。 会预设以空字节串填充以保证 4 字节对齐。"

#: ../../library/xdrlib.rst:209
msgid ""
"Unpacks and returns a fixed length opaque data stream, similarly to "
":meth:`unpack_fstring`."
msgstr "解包并返回固定长度数据流，类似于 :meth:`unpack_fstring`。"

#: ../../library/xdrlib.rst:215
msgid ""
"Unpacks and returns a variable length string.  The length of the string is "
"first unpacked as an unsigned integer, then the string data is unpacked with"
" :meth:`unpack_fstring`."
msgstr "解包并返回可变长度字符串。 先将字符串的长度解包为无符号整数，再用 :meth:`unpack_fstring` 来解包字符串数据。"

#: ../../library/xdrlib.rst:222
msgid ""
"Unpacks and returns a variable length opaque data string, similarly to "
":meth:`unpack_string`."
msgstr "解包并返回可变长度不透明数据流，类似于 :meth:`unpack_string`。"

#: ../../library/xdrlib.rst:228
msgid ""
"Unpacks and returns a variable length byte stream, similarly to "
":meth:`unpack_string`."
msgstr "解包并返回可变长度字节流，类似于 :meth:`unpack_string`。"

#: ../../library/xdrlib.rst:231
msgid "The following methods support unpacking arrays and lists:"
msgstr "下列方法支持解包数组和列表:"

#: ../../library/xdrlib.rst:236
msgid ""
"Unpacks and returns a list of homogeneous items.  The list is unpacked one "
"element at a time by first unpacking an unsigned integer flag.  If the flag "
"is ``1``, then the item is unpacked and appended to the list.  A flag of "
"``0`` indicates the end of the list.  *unpack_item* is the function that is "
"called to unpack the items."
msgstr ""
"解包并返回同质条目的列表。 该列表每次解包一个元素，先解包一个无符号整数旗标。 如果旗标为 ``1``，则解包条目并将其添加到列表。 旗标为 ``0``"
" 表明列表结束。 *unpack_item* 为在解包条目时调用的函数。"

#: ../../library/xdrlib.rst:245
msgid ""
"Unpacks and returns (as a list) a fixed length array of homogeneous items.  "
"*n* is number of list elements to expect in the buffer. As above, "
"*unpack_item* is the function used to unpack each element."
msgstr ""
"解包并（以列表形式）返回由同质条目构成的固定长度数组。 *n* 为期望的缓冲区内列表元素数量。 如上所述，*unpack_item* "
"是解包每个元素时要使用的函数。"

#: ../../library/xdrlib.rst:252
msgid ""
"Unpacks and returns a variable length *list* of homogeneous items. First, "
"the length of the list is unpacked as an unsigned integer, then each element"
" is unpacked as in :meth:`unpack_farray` above."
msgstr ""
"解包并返回由同质条目构成的可变长度 *list*。 先将列表的长度解包为无符号整数，再像上面的 :meth:`unpack_farray` "
"一样解包每个元素。"

#: ../../library/xdrlib.rst:260
msgid "Exceptions"
msgstr "异常"

#: ../../library/xdrlib.rst:262
msgid "Exceptions in this module are coded as class instances:"
msgstr "此模块中的异常会表示为类实例代码:"

#: ../../library/xdrlib.rst:267
msgid ""
"The base exception class.  :exc:`Error` has a single public attribute "
":attr:`msg` containing the description of the error."
msgstr "基本异常类。 :exc:`Error` 具有一个公共属性 :attr:`msg`，其中包含对错误的描述。"

#: ../../library/xdrlib.rst:273
msgid ""
"Class derived from :exc:`Error`.  Contains no additional instance variables."
msgstr "从 :exc:`Error` 所派生的类。 不包含额外的实例变量。"

#: ../../library/xdrlib.rst:275
msgid "Here is an example of how you would catch one of these exceptions::"
msgstr "以下是一个应该如何捕获这些异常的示例::"

#: ../../library/xdrlib.rst:277
msgid ""
"import xdrlib\n"
"p = xdrlib.Packer()\n"
"try:\n"
"    p.pack_double(8.01)\n"
"except xdrlib.ConversionError as instance:\n"
"    print('packing the double failed:', instance.msg)"
msgstr ""

#: ../../library/xdrlib.rst:10
msgid "XDR"
msgstr "XDR"

#: ../../library/xdrlib.rst:10
msgid "External Data Representation"
msgstr "External Data Representation"
