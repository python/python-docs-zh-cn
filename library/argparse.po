# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/argparse.rst:2
msgid ""
":mod:`argparse` --- Parser for command-line options, arguments and sub-"
"commands"
msgstr ":mod:`argparse` --- 命令行选项、参数和子命令解析器"

#: ../../library/argparse.rst:12
msgid "**Source code:** :source:`Lib/argparse.py`"
msgstr "**源代码：** :source:`Lib/argparse.py`"

#: ../../library/argparse.rstNone
msgid "Tutorial"
msgstr "教程"

#: ../../library/argparse.rst:18
msgid ""
"This page contains the API reference information. For a more gentle "
"introduction to Python command-line parsing, have a look at the "
":ref:`argparse tutorial <argparse-tutorial>`."
msgstr ""
"此页面包含该 API 的参考信息。有关 Python 命令行解析更细致的介绍，请参阅 :ref:`argparse 教程 <argparse-"
"tutorial>`。"

#: ../../library/argparse.rst:22
msgid ""
"The :mod:`argparse` module makes it easy to write user-friendly command-line"
" interfaces. The program defines what arguments it requires, and "
":mod:`argparse` will figure out how to parse those out of :data:`sys.argv`."
"  The :mod:`argparse` module also automatically generates help and usage "
"messages and issues errors when users give the program invalid arguments."
msgstr ""
":mod:`argparse` 模块可以让人轻松编写用户友好的命令行接口。程序定义它需要的参数，然后 :mod:`argparse` 将弄清如何从 "
":data:`sys.argv` 解析出那些参数。 :mod:`argparse` "
"模块还会自动生成帮助和使用手册，并在用户给程序传入无效参数时报出错误信息。"

#: ../../library/argparse.rst:30
msgid "Example"
msgstr "示例"

#: ../../library/argparse.rst:32
msgid ""
"The following code is a Python program that takes a list of integers and "
"produces either the sum or the max::"
msgstr "以下代码是一个 Python 程序，它获取一个整数列表并计算总和或者最大值："

#: ../../library/argparse.rst:47
msgid ""
"Assuming the Python code above is saved into a file called ``prog.py``, it "
"can be run at the command line and provides useful help messages:"
msgstr "假设上面的 Python 代码保存在名为 ``prog.py`` 的文件中，它可以在命令行运行并提供有用的帮助信息："

#: ../../library/argparse.rst:64
msgid ""
"When run with the appropriate arguments, it prints either the sum or the max"
" of the command-line integers:"
msgstr "当使用适当的参数运行时，它会输出命令行传入整数的总和或者最大值："

#: ../../library/argparse.rst:75
msgid "If invalid arguments are passed in, it will issue an error:"
msgstr "如果传入无效参数，则会报出错误："

#: ../../library/argparse.rst:83
msgid "The following sections walk you through this example."
msgstr "以下部分将引导你完成这个示例。"

#: ../../library/argparse.rst:87
msgid "Creating a parser"
msgstr "创建一个解析器"

#: ../../library/argparse.rst:89
msgid ""
"The first step in using the :mod:`argparse` is creating an "
":class:`ArgumentParser` object::"
msgstr "使用 :mod:`argparse` 的第一步是创建一个 :class:`ArgumentParser` 对象："

#: ../../library/argparse.rst:94
msgid ""
"The :class:`ArgumentParser` object will hold all the information necessary "
"to parse the command line into Python data types."
msgstr ":class:`ArgumentParser` 对象包含将命令行解析成 Python 数据类型所需的全部信息。"

#: ../../library/argparse.rst:99
msgid "Adding arguments"
msgstr "添加参数"

#: ../../library/argparse.rst:101
msgid ""
"Filling an :class:`ArgumentParser` with information about program arguments "
"is done by making calls to the :meth:`~ArgumentParser.add_argument` method. "
"Generally, these calls tell the :class:`ArgumentParser` how to take the "
"strings on the command line and turn them into objects.  This information is"
" stored and used when :meth:`~ArgumentParser.parse_args` is called. For "
"example::"
msgstr ""
"给一个 :class:`ArgumentParser` 添加程序参数信息是通过调用 "
":meth:`~ArgumentParser.add_argument` 方法完成的。通常，这些调用指定 :class:`ArgumentParser`"
" 如何获取命令行字符串并将其转换为对象。这些信息在 :meth:`~ArgumentParser.parse_args` 调用时被存储和使用。例如："

#: ../../library/argparse.rst:113
msgid ""
"Later, calling :meth:`~ArgumentParser.parse_args` will return an object with"
" two attributes, ``integers`` and ``accumulate``.  The ``integers`` "
"attribute will be a list of one or more ints, and the ``accumulate`` "
"attribute will be either the :func:`sum` function, if ``--sum`` was "
"specified at the command line, or the :func:`max` function if it was not."
msgstr ""
"然后，调用 :meth:`~ArgumentParser.parse_args` 将返回一个具有 ``integers`` 和 "
"``accumulate`` 两个属性的对象。``integers`` 属性将是一个包含一个或多个整数的列表，而 ``accumulate`` "
"属性当命令行中指定了 ``--sum`` 参数时将是 :func:`sum` 函数，否则则是 :func:`max` 函数。"

#: ../../library/argparse.rst:121
msgid "Parsing arguments"
msgstr "解析参数"

#: ../../library/argparse.rst:123
msgid ""
":class:`ArgumentParser` parses arguments through the "
":meth:`~ArgumentParser.parse_args` method.  This will inspect the command "
"line, convert each argument to the appropriate type and then invoke the "
"appropriate action. In most cases, this means a simple :class:`Namespace` "
"object will be built up from attributes parsed out of the command line::"
msgstr ""
":class:`ArgumentParser` 通过 :meth:`~ArgumentParser.parse_args` "
"方法解析参数。它将检查命令行，把每个参数转换为适当的类型然后调用相应的操作。在大多数情况下，这意味着一个简单的 :class:`Namespace` "
"对象将从命令行解析出的属性构建："

#: ../../library/argparse.rst:132
msgid ""
"In a script, :meth:`~ArgumentParser.parse_args` will typically be called "
"with no arguments, and the :class:`ArgumentParser` will automatically "
"determine the command-line arguments from :data:`sys.argv`."
msgstr ""
"在脚本中，通常 :meth:`~ArgumentParser.parse_args` 会被不带参数调用，而 "
":class:`ArgumentParser` 将自动从 :data:`sys.argv` 中确定命令行参数。"

#: ../../library/argparse.rst:138
msgid "ArgumentParser objects"
msgstr "ArgumentParser 对象"

#: ../../library/argparse.rst:147
msgid ""
"Create a new :class:`ArgumentParser` object. All parameters should be passed"
" as keyword arguments. Each parameter has its own more detailed description "
"below, but in short they are:"
msgstr ""
"创建一个新的 :class:`ArgumentParser` "
"对象。所有的参数都应当作为关键字参数传入。每个参数在下面都有它更详细的描述，但简而言之，它们是："

#: ../../library/argparse.rst:151
msgid ""
"prog_ - The name of the program (default: ``os.path.basename(sys.argv[0])``)"
msgstr "prog_ - 程序的名称 (默认值: ``os.path.basename(sys.argv[0])``)"

#: ../../library/argparse.rst:154
msgid ""
"usage_ - The string describing the program usage (default: generated from "
"arguments added to parser)"
msgstr "usage_ - 描述程序用途的字符串（默认值：从添加到解析器的参数生成）"

#: ../../library/argparse.rst:157
msgid ""
"description_ - Text to display before the argument help (by default, no "
"text)"
msgstr "description_ - 要在参数帮助信息之前显示的文本（默认：无文本）"

#: ../../library/argparse.rst:160
msgid ""
"epilog_ - Text to display after the argument help (by default, no text)"
msgstr "epilog_ - 要在参数帮助信息之后显示的文本（默认：无文本）"

#: ../../library/argparse.rst:162
msgid ""
"parents_ - A list of :class:`ArgumentParser` objects whose arguments should "
"also be included"
msgstr "parents_ - 一个 :class:`ArgumentParser` 对象的列表，它们的参数也应包含在内"

#: ../../library/argparse.rst:165
msgid "formatter_class_ - A class for customizing the help output"
msgstr "formatter_class_ - 用于自定义帮助文档输出格式的类"

#: ../../library/argparse.rst:167
msgid ""
"prefix_chars_ - The set of characters that prefix optional arguments "
"(default: '-')"
msgstr "prefix_chars_ - 可选参数的前缀字符集合（默认值： '-'）"

#: ../../library/argparse.rst:170
msgid ""
"fromfile_prefix_chars_ - The set of characters that prefix files from which "
"additional arguments should be read (default: ``None``)"
msgstr "fromfile_prefix_chars_ - 当需要从文件中读取其他参数时，用于标识文件名的前缀字符集合（默认值： ``None``）"

#: ../../library/argparse.rst:173
msgid ""
"argument_default_ - The global default value for arguments (default: "
"``None``)"
msgstr "argument_default_ - 参数的全局默认值（默认值： ``None``）"

#: ../../library/argparse.rst:176
msgid ""
"conflict_handler_ - The strategy for resolving conflicting optionals "
"(usually unnecessary)"
msgstr "conflict_handler_ - 解决冲突选项的策略（通常是不必要的）"

#: ../../library/argparse.rst:179
msgid ""
"add_help_ - Add a ``-h/--help`` option to the parser (default: ``True``)"
msgstr "add_help_ - 为解析器添加一个 ``-h/--help`` 选项（默认值： ``True``）"

#: ../../library/argparse.rst:181
msgid ""
"allow_abbrev_ - Allows long options to be abbreviated if the abbreviation is"
" unambiguous. (default: ``True``)"
msgstr "allow_abbrev_ - 如果缩写是无歧义的，则允许缩写长选项 （默认值：``True``）"

#: ../../library/argparse.rst:184
msgid ""
"exit_on_error_ - Determines whether or not ArgumentParser exits with error "
"info when an error occurs. (default: ``True``)"
msgstr "exit_on_error_ - 决定当错误发生时是否让 ArgumentParser 附带错误信息退出。 (默认值: ``True``)"

#: ../../library/argparse.rst:187
msgid "*allow_abbrev* parameter was added."
msgstr "增加了 *allow_abbrev* 参数。"

#: ../../library/argparse.rst:190
msgid ""
"In previous versions, *allow_abbrev* also disabled grouping of short flags "
"such as ``-vv`` to mean ``-v -v``."
msgstr "在之前的版本中，*allow_abbrev* 还会禁用短旗标分组，例如 ``-vv`` 表示为 ``-v -v``。"

#: ../../library/argparse.rst:194
msgid "*exit_on_error* parameter was added."
msgstr "添加了 *exit_on_error* 形参。"

#: ../../library/argparse.rst:197 ../../library/argparse.rst:717
msgid "The following sections describe how each of these are used."
msgstr "以下部分描述这些参数如何使用。"

#: ../../library/argparse.rst:201
msgid "prog"
msgstr "prog"

#: ../../library/argparse.rst:203
msgid ""
"By default, :class:`ArgumentParser` objects use ``sys.argv[0]`` to determine"
" how to display the name of the program in help messages.  This default is "
"almost always desirable because it will make the help messages match how the"
" program was invoked on the command line.  For example, consider a file "
"named ``myprogram.py`` with the following code::"
msgstr ""
"默认情况下，:class:`ArgumentParser` 对象使用 ``sys.argv[0]`` "
"来确定如何在帮助消息中显示程序名称。这一默认值几乎总是可取的，因为它将使帮助消息与从命令行调用此程序的方式相匹配。例如，对于有如下代码的名为 "
"``myprogram.py`` 的文件："

#: ../../library/argparse.rst:214
msgid ""
"The help for this program will display ``myprogram.py`` as the program name "
"(regardless of where the program was invoked from):"
msgstr "该程序的帮助信息将显示 ``myprogram.py`` 作为程序名称（无论程序从何处被调用）："

#: ../../library/argparse.rst:233
msgid ""
"To change this default behavior, another value can be supplied using the "
"``prog=`` argument to :class:`ArgumentParser`::"
msgstr "要更改这样的默认行为，可以使用 ``prog=`` 参数为 :class:`ArgumentParser` 指定另一个值："

#: ../../library/argparse.rst:243
msgid ""
"Note that the program name, whether determined from ``sys.argv[0]`` or from "
"the ``prog=`` argument, is available to help messages using the ``%(prog)s``"
" format specifier."
msgstr ""
"需要注意的是，无论是从 ``sys.argv[0]`` 或是从 ``prog=`` 参数确定的程序名称，都可以在帮助消息里通过 ``%(prog)s``"
" 格式说明符来引用。"

#: ../../library/argparse.rst:260
msgid "usage"
msgstr "usage（用法）"

#: ../../library/argparse.rst:262
msgid ""
"By default, :class:`ArgumentParser` calculates the usage message from the "
"arguments it contains::"
msgstr "默认情况下，:class:`ArgumentParser` 根据它包含的参数来构建用法消息："

#: ../../library/argparse.rst:278
msgid ""
"The default message can be overridden with the ``usage=`` keyword argument::"
msgstr "可以通过 ``usage=`` 关键字参数覆盖这一默认消息："

#: ../../library/argparse.rst:293
msgid ""
"The ``%(prog)s`` format specifier is available to fill in the program name "
"in your usage messages."
msgstr "在用法消息中可以使用 ``%(prog)s`` 格式说明符来填入程序名称。"

#: ../../library/argparse.rst:298
msgid "description"
msgstr "description"

#: ../../library/argparse.rst:300
msgid ""
"Most calls to the :class:`ArgumentParser` constructor will use the "
"``description=`` keyword argument.  This argument gives a brief description "
"of what the program does and how it works.  In help messages, the "
"description is displayed between the command-line usage string and the help "
"messages for the various arguments::"
msgstr ""
"大多数对 :class:`ArgumentParser` 构造方法的调用都会使用 ``description=`` 关键字参数。 "
"这个参数简要描述这个程序做什么以及怎么做。 在帮助消息中，这个描述会显示在命令行用法字符串和各种参数的帮助消息之间::"

#: ../../library/argparse.rst:315
msgid ""
"By default, the description will be line-wrapped so that it fits within the "
"given space.  To change this behavior, see the formatter_class_ argument."
msgstr "在默认情况下，description 将被换行以便适应给定的空间。如果想改变这种行为，见 formatter_class_ 参数。"

#: ../../library/argparse.rst:320
msgid "epilog"
msgstr "epilog"

#: ../../library/argparse.rst:322
msgid ""
"Some programs like to display additional description of the program after "
"the description of the arguments.  Such text can be specified using the "
"``epilog=`` argument to :class:`ArgumentParser`::"
msgstr ""
"一些程序喜欢在 description 参数后显示额外的对程序的描述。这种文字能够通过给 :class:`ArgumentParser`:: 提供 "
"``epilog=`` 参数而被指定。"

#: ../../library/argparse.rst:339
msgid ""
"As with the description_ argument, the ``epilog=`` text is by default line-"
"wrapped, but this behavior can be adjusted with the formatter_class_ "
"argument to :class:`ArgumentParser`."
msgstr ""
"和 description_ 参数一样，``epilog=`` text 在默认情况下会换行，但是这种行为能够被调整通过提供 "
"formatter_class_ 参数给 :class:`ArgumentParse`."

#: ../../library/argparse.rst:345
msgid "parents"
msgstr "parents"

#: ../../library/argparse.rst:347
msgid ""
"Sometimes, several parsers share a common set of arguments. Rather than "
"repeating the definitions of these arguments, a single parser with all the "
"shared arguments and passed to ``parents=`` argument to "
":class:`ArgumentParser` can be used.  The ``parents=`` argument takes a list"
" of :class:`ArgumentParser` objects, collects all the positional and "
"optional actions from them, and adds these actions to the "
":class:`ArgumentParser` object being constructed::"
msgstr ""
"有些时候，少数解析器会使用同一系列参数。 单个解析器能够通过提供 ``parents=`` 参数给 :class:`ArgumentParser` "
"而使用相同的参数而不是重复这些参数的定义。``parents=`` 参数使用 :class:`ArgumentParser` "
"对象的列表，从它们那里收集所有的位置和可选的行为，然后将这写行为加到正在构建的 :class:`ArgumentParser` 对象。"

#: ../../library/argparse.rst:367
msgid ""
"Note that most parent parsers will specify ``add_help=False``.  Otherwise, "
"the :class:`ArgumentParser` will see two ``-h/--help`` options (one in the "
"parent and one in the child) and raise an error."
msgstr ""
"请注意大多数父解析器会指定 ``add_help=False`` . 否则， :class:`ArgumentParse` 将会看到两个 "
"``-h/--help`` 选项（一个在父参数中一个在子参数中）并且产生一个错误。"

#: ../../library/argparse.rst:372
msgid ""
"You must fully initialize the parsers before passing them via ``parents=``. "
"If you change the parent parsers after the child parser, those changes will "
"not be reflected in the child."
msgstr "你在通过 ``parents=`` 传递解析器之前必须完全初始化它们。 如果你在子解析器之后改变父解析器，这些改变将不会反映在子解析器上。"

#: ../../library/argparse.rst:378
msgid "formatter_class"
msgstr "formatter_class"

#: ../../library/argparse.rst:380
msgid ""
":class:`ArgumentParser` objects allow the help formatting to be customized "
"by specifying an alternate formatting class.  Currently, there are four such"
" classes:"
msgstr ":class:`ArgumentParser` 对象允许通过指定备用格式化类来自定义帮助格式。目前，有四种这样的类。"

#: ../../library/argparse.rst:389
msgid ""
":class:`RawDescriptionHelpFormatter` and :class:`RawTextHelpFormatter` give "
"more control over how textual descriptions are displayed. By default, "
":class:`ArgumentParser` objects line-wrap the description_ and epilog_ texts"
" in command-line help messages::"
msgstr ""
":class:`RawDescriptionHelpFormatter` 和 :class:`RawTextHelpFormatter` "
"在正文的描述和展示上给与了更多的控制。:class:`ArgumentParser` 对象会将 description_ 和 epilog_ "
"的文字在命令行中自动换行。"

#: ../../library/argparse.rst:414
msgid ""
"Passing :class:`RawDescriptionHelpFormatter` as ``formatter_class=`` "
"indicates that description_ and epilog_ are already correctly formatted and "
"should not be line-wrapped::"
msgstr ""
"传 :class:`RawDescriptionHelpFormatter` 给 ``formatter_class=`` 表示 "
"description_ 和 epilog_ 已经被正确的格式化了，不能在命令行中被自动换行::"

#: ../../library/argparse.rst:440
msgid ""
":class:`RawTextHelpFormatter` maintains whitespace for all sorts of help "
"text, including argument descriptions. However, multiple new lines are "
"replaced with one. If you wish to preserve multiple blank lines, add spaces "
"between the newlines."
msgstr ""
":class:`RawTextHelpFormatter` "
"保留所有种类文字的空格，包括参数的描述。然而，多重的新行会被替换成一行。如果你想保留多重的空白行，可以在新行之间加空格。"

#: ../../library/argparse.rst:445
msgid ""
":class:`ArgumentDefaultsHelpFormatter` automatically adds information about "
"default values to each of the argument help messages::"
msgstr ":class:`ArgumentDefaultsHelpFormatter` 自动添加默认的值的信息到每一个帮助信息的参数中::"

#: ../../library/argparse.rst:463
msgid ""
":class:`MetavarTypeHelpFormatter` uses the name of the type_ argument for "
"each argument as the display name for its values (rather than using the "
"dest_ as the regular formatter does)::"
msgstr ""
":class:`MetavarTypeHelpFormatter` 为它的值在每一个参数中使用 type_ 的参数名当作它的显示名（而不是使用通常的格式"
" dest_ )::"

#: ../../library/argparse.rst:484
msgid "prefix_chars"
msgstr "prefix_chars"

#: ../../library/argparse.rst:486
msgid ""
"Most command-line options will use ``-`` as the prefix, e.g. ``-f/--foo``. "
"Parsers that need to support different or additional prefix characters, e.g."
" for options like ``+f`` or ``/foo``, may specify them using the "
"``prefix_chars=`` argument to the ArgumentParser constructor::"
msgstr ""
"许多命令行会使用 ``-`` 当作前缀，比如 ``-f/--foo``。如果解析器需要支持不同的或者额外的字符，比如像 ``+f`` 或者 "
"``/foo`` 的选项，可以在参数解析构建器中使用 ``prefix_chars=`` 参数。"

#: ../../library/argparse.rst:498
msgid ""
"The ``prefix_chars=`` argument defaults to ``'-'``. Supplying a set of "
"characters that does not include ``-`` will cause ``-f/--foo`` options to be"
" disallowed."
msgstr ""
"``prefix_chars=`` 参数默认使用 ``'-'``。 提供一组不包括 ``-`` 的字符将导致 ``-f/--foo`` 选项不被允许。"

#: ../../library/argparse.rst:504
msgid "fromfile_prefix_chars"
msgstr "fromfile_prefix_chars"

#: ../../library/argparse.rst:506
msgid ""
"Sometimes, for example when dealing with a particularly long argument list, "
"it may make sense to keep the list of arguments in a file rather than typing"
" it out at the command line.  If the ``fromfile_prefix_chars=`` argument is "
"given to the :class:`ArgumentParser` constructor, then arguments that start "
"with any of the specified characters will be treated as files, and will be "
"replaced by the arguments they contain.  For example::"
msgstr ""
"在某些时候，例如在处理一个特别长的参数列表的时候，把参数列表存入一个文件中而不是在命令行中打印出来会更有意义。 如果提供 "
"``fromfile_prefix_chars=`` 参数给 :class:`ArgumentParser` "
"构造器，则任何以指定字符打头的参数都将被当作文件来处理，并将被它们包含的参数所替代。 举例来说::"

#: ../../library/argparse.rst:520
msgid ""
"Arguments read from a file must by default be one per line (but see also "
":meth:`~ArgumentParser.convert_arg_line_to_args`) and are treated as if they"
" were in the same place as the original file referencing argument on the "
"command line.  So in the example above, the expression ``['-f', 'foo', "
"'@args.txt']`` is considered equivalent to the expression ``['-f', 'foo', "
"'-f', 'bar']``."
msgstr ""
"从文件读取的参数在默认情况下必须一个一行（但是可参见  "
":meth:`~ArgumentParser.convert_arg_line_to_args`）并且它们被视为与命令行上的原始文件引用参数位于同一位置。所以在以上例子中，``['-f',"
" 'foo', '@args.txt']`` 的表示和 ``['-f', 'foo', '-f', 'bar']`` 的表示相同。"

#: ../../library/argparse.rst:526
msgid ""
"The ``fromfile_prefix_chars=`` argument defaults to ``None``, meaning that "
"arguments will never be treated as file references."
msgstr "``fromfile_prefix_chars=`` 参数默认为 ``None``，意味着参数不会被当作文件对待。"

#: ../../library/argparse.rst:531
msgid "argument_default"
msgstr "argument_default"

#: ../../library/argparse.rst:533
msgid ""
"Generally, argument defaults are specified either by passing a default to "
":meth:`~ArgumentParser.add_argument` or by calling the "
":meth:`~ArgumentParser.set_defaults` methods with a specific set of name-"
"value pairs.  Sometimes however, it may be useful to specify a single "
"parser-wide default for arguments.  This can be accomplished by passing the "
"``argument_default=`` keyword argument to :class:`ArgumentParser`.  For "
"example, to globally suppress attribute creation on "
":meth:`~ArgumentParser.parse_args` calls, we supply "
"``argument_default=SUPPRESS``::"
msgstr ""
"一般情况下，参数默认会通过设置一个默认到 :meth:`~ArgumentParser.add_argument` 或者调用带一组指定键值对的 "
":meth:`ArgumentParser.set_defaults` 方法。但是有些时候，为参数指定一个普遍适用的解析器会更有用。这能够通过传输 "
"``argument_default=`` 关键词参数给 :class:`ArgumentParser` 来完成。举个栗子，要全局禁止在 "
":meth:`~ArgumentParser.parse_args` 中创建属性，我们提供 "
"``argument_default=SUPPRESS``::"

#: ../../library/argparse.rst:553
msgid "allow_abbrev"
msgstr "allow_abbrev"

#: ../../library/argparse.rst:555
msgid ""
"Normally, when you pass an argument list to the "
":meth:`~ArgumentParser.parse_args` method of an :class:`ArgumentParser`, it "
":ref:`recognizes abbreviations <prefix-matching>` of long options."
msgstr ""
"正常情况下，当你向 :class:`ArgumentParser` 的 :meth:`~ArgumentParser.parse_args` "
"方法传入一个参数列表时，它会 :ref:`recognizes abbreviations  <prefix-matching>`。"

#: ../../library/argparse.rst:559
msgid ""
"This feature can be disabled by setting ``allow_abbrev`` to ``False``::"
msgstr "这个特性可以设置 ``allow_abbrev`` 为 ``False`` 来关闭::"

#: ../../library/argparse.rst:572
msgid "conflict_handler"
msgstr "conflict_handler"

#: ../../library/argparse.rst:574
msgid ""
":class:`ArgumentParser` objects do not allow two actions with the same "
"option string.  By default, :class:`ArgumentParser` objects raise an "
"exception if an attempt is made to create an argument with an option string "
"that is already in use::"
msgstr ""
":class:`ArgumentParser` 对象不允许在相同选项字符串下有两种行为。默认情况下， :class:`ArgumentParser` "
"对象会产生一个异常如果去创建一个正在使用的选项字符串参数。"

#: ../../library/argparse.rst:586
msgid ""
"Sometimes (e.g. when using parents_) it may be useful to simply override any"
" older arguments with the same option string.  To get this behavior, the "
"value ``'resolve'`` can be supplied to the ``conflict_handler=`` argument of"
" :class:`ArgumentParser`::"
msgstr ""
"有些时候（例如：使用 parents_），重写旧的有相同选项字符串的参数会更有用。为了产生这种行为， ``'resolve'`` 值可以提供给 "
":class:`ArgumentParser` 的 ``conflict_handler=`` 参数::"

#: ../../library/argparse.rst:602
msgid ""
"Note that :class:`ArgumentParser` objects only remove an action if all of "
"its option strings are overridden.  So, in the example above, the old "
"``-f/--foo`` action is retained as the ``-f`` action, because only the "
"``--foo`` option string was overridden."
msgstr ""
"注意 :class:`ArgumentParser` 对象只能移除一个行为如果它所有的选项字符串都被重写。所以，在上面的例子中，旧的 "
"``-f/--foo`` 行为 回合 ``-f`` 行为保持一样, 因为只有 ``--foo`` 选项字符串被重写。"

#: ../../library/argparse.rst:609
msgid "add_help"
msgstr "add_help"

#: ../../library/argparse.rst:611
msgid ""
"By default, ArgumentParser objects add an option which simply displays the "
"parser's help message. For example, consider a file named ``myprogram.py`` "
"containing the following code::"
msgstr ""
"默认情况下，ArgumentParser 对象添加一个简单的显示解析器帮助信息的选项。举个栗子，考虑一个名为 ``myprogram.py`` "
"的文件包含如下代码::"

#: ../../library/argparse.rst:620
msgid ""
"If ``-h`` or ``--help`` is supplied at the command line, the ArgumentParser "
"help will be printed:"
msgstr "如果 ``-h`` or ``--help`` 在命令行中被提供, 参数解析器帮助信息会打印::"

#: ../../library/argparse.rst:632
msgid ""
"Occasionally, it may be useful to disable the addition of this help option. "
"This can be achieved by passing ``False`` as the ``add_help=`` argument to "
":class:`ArgumentParser`::"
msgstr ""
"有时候可能会需要关闭额外的帮助信息。这可以通过在 :class:`ArgumentParser` 中设置 ``add_help=`` 参数为 "
"``False`` 来实现。"

#: ../../library/argparse.rst:644
msgid ""
"The help option is typically ``-h/--help``. The exception to this is if the "
"``prefix_chars=`` is specified and does not include ``-``, in which case "
"``-h`` and ``--help`` are not valid options.  In this case, the first "
"character in ``prefix_chars`` is used to prefix the help options::"
msgstr ""
"帮助选项一般为 ``-h/--help``。如果 ``prefix_chars=`` 被指定并且没有包含 ``-`` 字符，在这种情况下， ``-h``"
" ``--help`` 不是有效的选项。此时， ``prefix_chars`` 的第一个字符将用作帮助选项的前缀。"

#: ../../library/argparse.rst:659
msgid "exit_on_error"
msgstr "exit_on_error"

#: ../../library/argparse.rst:661
msgid ""
"Normally, when you pass an invalid argument list to the "
":meth:`~ArgumentParser.parse_args` method of an :class:`ArgumentParser`, it "
"will exit with error info."
msgstr ""
"正常情况下，当你向 :class:`ArgumentParser` 的 :meth:`~ArgumentParser.parse_args` "
"方法传入一个无效的参数列表时，它将会退出并发出错误信息。"

#: ../../library/argparse.rst:664
msgid ""
"If the user would like to catch errors manually, the feature can be enabled "
"by setting ``exit_on_error`` to ``False``::"
msgstr "如果用户想要手动捕获错误，可通过将 ``exit_on_error`` 设为 ``False`` 来启用该特性::"

#: ../../library/argparse.rst:681
msgid "The add_argument() method"
msgstr "add_argument() 方法"

#: ../../library/argparse.rst:687
msgid ""
"Define how a single command-line argument should be parsed.  Each parameter "
"has its own more detailed description below, but in short they are:"
msgstr "定义单个的命令行参数应当如何解析。每个形参都在下面有它自己更多的描述，长话短说有："

#: ../../library/argparse.rst:690
msgid ""
"`name or flags`_ - Either a name or a list of option strings, e.g. ``foo`` "
"or ``-f, --foo``."
msgstr "`name or flags`_ - 一个命名或者一个选项字符串的列表，例如 ``foo`` 或 ``-f, --foo``。"

#: ../../library/argparse.rst:693
msgid ""
"action_ - The basic type of action to be taken when this argument is "
"encountered at the command line."
msgstr "action_ - 当参数在命令行中出现时使用的动作基本类型。"

#: ../../library/argparse.rst:696
msgid "nargs_ - The number of command-line arguments that should be consumed."
msgstr "nargs_ - 命令行参数应当消耗的数目。"

#: ../../library/argparse.rst:698
msgid ""
"const_ - A constant value required by some action_ and nargs_ selections."
msgstr "const_ - 被一些 action_ 和 nargs_ 选择所需求的常数。"

#: ../../library/argparse.rst:700
msgid ""
"default_ - The value produced if the argument is absent from the command "
"line and if it is absent from the namespace object."
msgstr "default_ - 当参数未在命令行中出现并且也不存在于命名空间对象时所产生的值。"

#: ../../library/argparse.rst:703
msgid ""
"type_ - The type to which the command-line argument should be converted."
msgstr "type_ - 命令行参数应当被转换成的类型。"

#: ../../library/argparse.rst:705
msgid "choices_ - A sequence of the allowable values for the argument."
msgstr "choices_ - 由允许作为参数的值组成的序列。"

#: ../../library/argparse.rst:707
msgid ""
"required_ - Whether or not the command-line option may be omitted (optionals"
" only)."
msgstr "required_ - 此命令行选项是否可省略 （仅选项可用）。"

#: ../../library/argparse.rst:710
msgid "help_ - A brief description of what the argument does."
msgstr "help_ - 一个此选项作用的简单描述。"

#: ../../library/argparse.rst:712
msgid "metavar_ - A name for the argument in usage messages."
msgstr "metavar_ - 在使用方法消息中使用的参数值示例。"

#: ../../library/argparse.rst:714
msgid ""
"dest_ - The name of the attribute to be added to the object returned by "
":meth:`parse_args`."
msgstr "dest_ - 被添加到 :meth:`parse_args` 所返回对象上的属性名。"

#: ../../library/argparse.rst:721
msgid "name or flags"
msgstr "name or flags"

#: ../../library/argparse.rst:723
msgid ""
"The :meth:`~ArgumentParser.add_argument` method must know whether an "
"optional argument, like ``-f`` or ``--foo``, or a positional argument, like "
"a list of filenames, is expected.  The first arguments passed to "
":meth:`~ArgumentParser.add_argument` must therefore be either a series of "
"flags, or a simple argument name.  For example, an optional argument could "
"be created like::"
msgstr ""
":meth:`~ArgumentParser.add_argument` 方法必须知道它是否是一个选项，例如 ``-f`` 或 "
"``--foo``，或是一个位置参数，例如一组文件名。 第一个传递给 :meth:`~ArgumentParser.add_argument` "
"的参数必须是一系列旗标或者是一个简单的参数名。例如，可选参数可以被这样创建::"

#: ../../library/argparse.rst:732
msgid "while a positional argument could be created like::"
msgstr "而位置参数可以这么创建::"

#: ../../library/argparse.rst:736
msgid ""
"When :meth:`~ArgumentParser.parse_args` is called, optional arguments will "
"be identified by the ``-`` prefix, and the remaining arguments will be "
"assumed to be positional::"
msgstr ""
"当 :meth:`~ArgumentParser.parse_args` 被调用，选项会以 ``-`` 前缀识别，剩下的参数则会被假定为位置参数::"

#: ../../library/argparse.rst:753
msgid "action"
msgstr "action"

#: ../../library/argparse.rst:755
msgid ""
":class:`ArgumentParser` objects associate command-line arguments with "
"actions.  These actions can do just about anything with the command-line "
"arguments associated with them, though most actions simply add an attribute "
"to the object returned by :meth:`~ArgumentParser.parse_args`.  The "
"``action`` keyword argument specifies how the command-line arguments should "
"be handled. The supplied actions are:"
msgstr ""
":class:`ArgumentParser` 对象将命令行参数与动作相关联。这些动作可以做与它们相关联的命令行参数的任何事，尽管大多数动作只是简单的向"
" :meth:`~ArgumentParser.parse_args` 返回的对象上添加属性。``action`` "
"命名参数指定了这个命令行参数应当如何处理。供应的动作有："

#: ../../library/argparse.rst:761
msgid ""
"``'store'`` - This just stores the argument's value.  This is the default "
"action. For example::"
msgstr "``'store'`` - 存储参数的值。这是默认的动作。例如::"

#: ../../library/argparse.rst:769
msgid ""
"``'store_const'`` - This stores the value specified by the const_ keyword "
"argument.  The ``'store_const'`` action is most commonly used with optional "
"arguments that specify some sort of flag.  For example::"
msgstr ""
"``'store_const'`` - 存储被 const_ 命名参数指定的值。 ``'store_const'`` "
"动作通常用在选项中来指定一些标志。例如::"

#: ../../library/argparse.rst:778
msgid ""
"``'store_true'`` and ``'store_false'`` - These are special cases of "
"``'store_const'`` used for storing the values ``True`` and ``False`` "
"respectively.  In addition, they create default values of ``False`` and "
"``True`` respectively.  For example::"
msgstr ""
"``'store_true'`` and ``'store_false'`` - 这些是 ``'store_const'`` 分别用作存储 "
"``True`` 和 ``False`` 值的特殊用例。另外，它们的默认值分别为 ``False`` 和 ``True``。例如::"

#: ../../library/argparse.rst:790
msgid ""
"``'append'`` - This stores a list, and appends each argument value to the "
"list.  This is useful to allow an option to be specified multiple times. "
"Example usage::"
msgstr "``'append'`` - 存储一个列表，并且将每个参数值追加到列表中。在允许多次使用选项时很有用。例如::"

#: ../../library/argparse.rst:799
msgid ""
"``'append_const'`` - This stores a list, and appends the value specified by "
"the const_ keyword argument to the list.  (Note that the const_ keyword "
"argument defaults to ``None``.)  The ``'append_const'`` action is typically "
"useful when multiple arguments need to store constants to the same list. For"
" example::"
msgstr ""
"``'append_const'`` - 这存储一个列表，并将 const_ 命名参数指定的值追加到列表中。（注意 const_ 命名参数默认为 "
"``None``。）``'append_const'`` 动作一般在多个参数需要在同一列表中存储常数时会有用。例如::"

#: ../../library/argparse.rst:811
msgid ""
"``'count'`` - This counts the number of times a keyword argument occurs. For"
" example, this is useful for increasing verbosity levels::"
msgstr "``'count'`` - 计算一个关键字参数出现的数目或次数。例如，对于一个增长的详情等级来说有用::"

#: ../../library/argparse.rst:819
msgid "Note, the *default* will be ``None`` unless explicitly set to *0*."
msgstr "请注意，*default* 将为 ``None``，除非显式地设为 *0*。"

#: ../../library/argparse.rst:821
msgid ""
"``'help'`` - This prints a complete help message for all the options in the "
"current parser and then exits. By default a help action is automatically "
"added to the parser. See :class:`ArgumentParser` for details of how the "
"output is created."
msgstr ""
"``'help'`` - 打印所有当前解析器中的选项和参数的完整帮助信息，然后退出。默认情况下，一个 help "
"动作会被自动加入解析器。关于输出是如何创建的，参与 :class:`ArgumentParser`。"

#: ../../library/argparse.rst:826
msgid ""
"``'version'`` - This expects a ``version=`` keyword argument in the "
":meth:`~ArgumentParser.add_argument` call, and prints version information "
"and exits when invoked::"
msgstr ""
"``'version'`` - 期望有一个 ``version=`` 命名参数在 "
":meth:`~ArgumentParser.add_argument` 调用中，并打印版本信息并在调用后退出::"

#: ../../library/argparse.rst:836
msgid ""
"``'extend'`` - This stores a list, and extends each argument value to the "
"list. Example usage::"
msgstr "``'extend'`` - 这会存储一个列表，并将每个参数值加入到列表中。 示例用法::"

#: ../../library/argparse.rst:847
msgid ""
"You may also specify an arbitrary action by passing an Action subclass or "
"other object that implements the same interface. The "
"``BooleanOptionalAction`` is available in ``argparse`` and adds support for "
"boolean actions such as ``--foo`` and ``--no-foo``::"
msgstr ""
"你还可以通过传递一个 Action 子类或实现相同接口的其他对象来指定任意操作。 ``BooleanOptionalAction`` 在 "
"``argparse`` 中可用并会添加对布尔型操作例如 ``--foo`` 和 ``--no-foo`` 的支持::"

#: ../../library/argparse.rst:860
msgid ""
"The recommended way to create a custom action is to extend :class:`Action`, "
"overriding the ``__call__`` method and optionally the ``__init__`` and "
"``format_usage`` methods."
msgstr ""
"创建自定义动作的推荐方式是扩展 :class:`Action`，重写 ``__call__`` 方法以及可选的 ``__init__`` 和 "
"``format_usage`` 方法。"

#: ../../library/argparse.rst:864
msgid "An example of a custom action::"
msgstr "一个自定义动作的例子::"

#: ../../library/argparse.rst:884
msgid "For more details, see :class:`Action`."
msgstr "更多描述，见 :class:`Action`。"

#: ../../library/argparse.rst:887
msgid "nargs"
msgstr "nargs"

#: ../../library/argparse.rst:889
msgid ""
"ArgumentParser objects usually associate a single command-line argument with"
" a single action to be taken.  The ``nargs`` keyword argument associates a "
"different number of command-line arguments with a single action.  The "
"supported values are:"
msgstr ""
"ArgumentParser 对象通常关联一个单独的命令行参数到一个单独的被执行的动作。 ``nargs`` "
"命名参数关联不同数目的命令行参数到单一动作。支持的值有："

#: ../../library/argparse.rst:894
msgid ""
"``N`` (an integer).  ``N`` arguments from the command line will be gathered "
"together into a list.  For example::"
msgstr "``N`` （一个整数）。命令行中的 ``N`` 个参数会被聚集到一个列表中。 例如::"

#: ../../library/argparse.rst:903
msgid ""
"Note that ``nargs=1`` produces a list of one item.  This is different from "
"the default, in which the item is produced by itself."
msgstr "注意 ``nargs=1`` 会产生一个单元素列表。这和默认的元素本身是不同的。"

#: ../../library/argparse.rst:908
msgid ""
"``'?'``. One argument will be consumed from the command line if possible, "
"and produced as a single item.  If no command-line argument is present, the "
"value from default_ will be produced.  Note that for optional arguments, "
"there is an additional case - the option string is present but not followed "
"by a command-line argument.  In this case the value from const_ will be "
"produced.  Some examples to illustrate this::"
msgstr ""
"``'?'``。 如果可能的话，会从命令行中消耗一个参数，并产生一个单独项。 如果当前没有命令行参数，将会产生 default_ 值。 "
"注意对于可选参数来说，还有一个额外情况 —— 出现了选项字符串但没有跟随命令行参数，在此情况下将会产生 const_ 值。 "
"一些说明这种情况的例子如下::"

#: ../../library/argparse.rst:925
msgid ""
"One of the more common uses of ``nargs='?'`` is to allow optional input and "
"output files::"
msgstr "``nargs='?'`` 的一个更普遍用法是允许可选的输入或输出文件::"

#: ../../library/argparse.rst:942
msgid ""
"``'*'``.  All command-line arguments present are gathered into a list.  Note"
" that it generally doesn't make much sense to have more than one positional "
"argument with ``nargs='*'``, but multiple optional arguments with "
"``nargs='*'`` is possible.  For example::"
msgstr ""
"``'*'``。所有当前命令行参数被聚集到一个列表中。注意通过 ``nargs='*'`` "
"来实现多个位置参数通常没有意义，但是多个选项是可能的。例如::"

#: ../../library/argparse.rst:956
msgid ""
"``'+'``. Just like ``'*'``, all command-line args present are gathered into "
"a list.  Additionally, an error message will be generated if there wasn't at"
" least one command-line argument present.  For example::"
msgstr ""
"``'+'``。和 ``'*'`` 类似，所有当前命令行参数被聚集到一个列表中。另外，当前没有至少一个命令行参数时会产生一个错误信息。例如::"

#: ../../library/argparse.rst:968
msgid ""
"If the ``nargs`` keyword argument is not provided, the number of arguments "
"consumed is determined by the action_.  Generally this means a single "
"command-line argument will be consumed and a single item (not a list) will "
"be produced."
msgstr "如果不提供 ``nargs`` 命名参数，则消耗参数的数目将被 action_ 决定。通常这意味着单一项目（非列表）消耗单一命令行参数。"

#: ../../library/argparse.rst:974
msgid "const"
msgstr "const"

#: ../../library/argparse.rst:976
msgid ""
"The ``const`` argument of :meth:`~ArgumentParser.add_argument` is used to "
"hold constant values that are not read from the command line but are "
"required for the various :class:`ArgumentParser` actions.  The two most "
"common uses of it are:"
msgstr ""
":meth:`~ArgumentParser.add_argument`  的 ``const`` 参数用于保存不从命令行中读取但被各种 "
":class:`ArgumentParser` 动作需求的常数值。最常用的两例为："

#: ../../library/argparse.rst:980
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with "
"``action='store_const'`` or ``action='append_const'``.  These actions add "
"the ``const`` value to one of the attributes of the object returned by "
":meth:`~ArgumentParser.parse_args`. See the action_ description for "
"examples."
msgstr ""
"当 :meth:`~ArgumentParser.add_argument` 通过 ``action='store_const'`` 或 "
"``action='append_const`` 调用时。这些动作将 ``const`` 值添加到 "
":meth:`~ArgumentParser.parse_args` 返回的对象的属性中。在 action_ 的描述中查看案例。"

#: ../../library/argparse.rst:985
msgid ""
"When :meth:`~ArgumentParser.add_argument` is called with option strings "
"(like ``-f`` or ``--foo``) and ``nargs='?'``.  This creates an optional "
"argument that can be followed by zero or one command-line arguments. When "
"parsing the command line, if the option string is encountered with no "
"command-line argument following it, the value of ``const`` will be assumed "
"instead. See the nargs_ description for examples."
msgstr ""
"当 :meth:`~ArgumentParser.add_argument` 通过选项（例如 ``-f`` 或 ``--foo``）调用并且 "
"``nargs='?'`` 时。这会创建一个可以跟随零个或一个命令行参数的选项。当解析命令行时，如果选项后没有参数，则将用 ``const`` 代替。在"
" nargs_ 描述中查看案例。"

#: ../../library/argparse.rst:992
msgid ""
"With the ``'store_const'`` and ``'append_const'`` actions, the ``const`` "
"keyword argument must be given.  For other actions, it defaults to ``None``."
msgstr ""
"对 ``'store_const'`` 和 ``'append_const'`` 动作， ``const`` 命名参数必须给出。对其他动作，默认为 "
"``None``。"

#: ../../library/argparse.rst:997
msgid "default"
msgstr "默认值"

#: ../../library/argparse.rst:999
msgid ""
"All optional arguments and some positional arguments may be omitted at the "
"command line.  The ``default`` keyword argument of "
":meth:`~ArgumentParser.add_argument`, whose value defaults to ``None``, "
"specifies what value should be used if the command-line argument is not "
"present. For optional arguments, the ``default`` value is used when the "
"option string was not present at the command line::"
msgstr ""
"所有选项和一些位置参数可能在命令行中被忽略。:meth:`~ArgumentParser.add_argument` 的命名参数 "
"``default``，默认值为 ``None``，指定了在命令行参数未出现时应当使用的值。对于选项， ``default`` "
"值在选项未在命令行中出现时使用::"

#: ../../library/argparse.rst:1013
msgid ""
"If the target namespace already has an attribute set, the action *default* "
"will not over write it::"
msgstr "如果目标命名空间已经有一个属性集，则 *default* 动作不会覆盖它::"

#: ../../library/argparse.rst:1021
msgid ""
"If the ``default`` value is a string, the parser parses the value as if it "
"were a command-line argument.  In particular, the parser applies any type_ "
"conversion argument, if provided, before setting the attribute on the "
":class:`Namespace` return value.  Otherwise, the parser uses the value as "
"is::"
msgstr ""
"如果 ``default`` 值是一个字符串，解析器解析此值就像一个命令行参数。特别是，在将属性设置在 :class:`Namespace` "
"的返回值之前，解析器应用任何提供的 type_ 转换参数。否则解析器使用原值::"

#: ../../library/argparse.rst:1032
msgid ""
"For positional arguments with nargs_ equal to ``?`` or ``*``, the "
"``default`` value is used when no command-line argument was present::"
msgstr "对于 nargs_ 等于 ``?`` 或 ``*`` 的位置参数， ``default`` 值在没有命令行参数出现时使用。"

#: ../../library/argparse.rst:1043
msgid ""
"Providing ``default=argparse.SUPPRESS`` causes no attribute to be added if "
"the command-line argument was not present::"
msgstr "提供 ``default=argparse.SUPPRESS`` 导致命令行参数未出现时没有属性被添加::"

#: ../../library/argparse.rst:1055
msgid "type"
msgstr "type"

#: ../../library/argparse.rst:1057
msgid ""
"By default, the parser reads command-line arguments in as simple strings. "
"However, quite often the command-line string should instead be interpreted "
"as another type, such as a :class:`float` or :class:`int`.  The ``type`` "
"keyword for :meth:`~ArgumentParser.add_argument` allows any necessary type-"
"checking and type conversions to be performed."
msgstr ""
"默认情况下，解析器会将命令行参数当作简单字符串读入。 然而，命令行字符串经常应当被解读为其他类型，例如 :class:`float` 或 "
":class:`int`。 :meth:`~ArgumentParser.add_argument` 的 ``type`` "
"关键字允许执行任何必要的类型检查和类型转换。"

#: ../../library/argparse.rst:1063
msgid ""
"If the type_ keyword is used with the default_ keyword, the type converter "
"is only applied if the default is a string."
msgstr "如果 type_ 关键字使用了 default_ 关键字，则类型转换器仅会在默认值为字符串时被应用。"

#: ../../library/argparse.rst:1066
msgid ""
"The argument to ``type`` can be any callable that accepts a single string. "
"If the function raises :exc:`ArgumentTypeError`, :exc:`TypeError`, or "
":exc:`ValueError`, the exception is caught and a nicely formatted error "
"message is displayed.  No other exception types are handled."
msgstr ""
"传给 ``type`` 的参数可以是任何接受单个字符串的可调用对象。 如果函数引发了 :exc:`ArgumentTypeError`, "
":exc:`TypeError` 或 :exc:`ValueError`，异常会被捕获并显示经过良好格式化的错误消息。 其他异常类型则不会被处理。"

#: ../../library/argparse.rst:1071
msgid "Common built-in types and functions can be used as type converters:"
msgstr "普通内置类型和函数可被用作类型转换器:"

#: ../../library/argparse.rst:1087
msgid "User defined functions can be used as well:"
msgstr "用户自定义的函数也可以被使用:"

#: ../../library/argparse.rst:1099
msgid ""
"The :func:`bool` function is not recommended as a type converter.  All it "
"does is convert empty strings to ``False`` and non-empty strings to "
"``True``. This is usually not what is desired."
msgstr ""
"不建议将 :func:`bool` 函数用作类型转换器。 它所做的只是将空字符串转为 ``False`` 而将非空字符串转为 ``True``。 "
"这通常不是用户所想要的。"

#: ../../library/argparse.rst:1103
msgid ""
"In general, the ``type`` keyword is a convenience that should only be used "
"for simple conversions that can only raise one of the three supported "
"exceptions. Anything with more interesting error-handling or resource "
"management should be done downstream after the arguments are parsed."
msgstr ""
"通常，``type`` 关键字是仅应被用于只会引发上述三种被支持的异常的简单转换的便捷选项。 "
"任何具有更复杂错误处理或资源管理的转换都应当在参数被解析后由下游代码来完成。"

#: ../../library/argparse.rst:1108
msgid ""
"For example, JSON or YAML conversions have complex error cases that require "
"better reporting than can be given by the ``type`` keyword.  A "
":exc:`~json.JSONDecodeError` would not be well formatted and a "
":exc:`FileNotFound` exception would not be handled at all."
msgstr ""
"例如，JSON 或 YAML 转换具有复杂的错误情况，要求给出比 ``type`` 关键字所能给出的更好的报告。 "
":exc:`~json.JSONDecodeError` 将不会被良好地格式化而 :exc:`FileNotFound` 异常则完全不会被处理。"

#: ../../library/argparse.rst:1113
msgid ""
"Even :class:`~argparse.FileType` has its limitations for use with the "
"``type`` keyword.  If one argument uses *FileType* and then a subsequent "
"argument fails, an error is reported but the file is not automatically "
"closed.  In this case, it would be better to wait until after the parser has"
" run and then use the :keyword:`with`-statement to manage the files."
msgstr ""
"即使 :class:`~argparse.FileType` 在用于 ``type`` 关键字时也存在限制。 如果一个参数使用了 *FileType* "
"并且有一个后续参数出错，则将报告一个错误但文件并不会被自动关闭。 在此情况下，更好的做法是等待直到解析器运行完毕再使用 :keyword:`with` "
"语句来管理文件。"

#: ../../library/argparse.rst:1119
msgid ""
"For type checkers that simply check against a fixed set of values, consider "
"using the choices_ keyword instead."
msgstr "对于简单地检查一组固定值的类型检查器，请考虑改用 choices_ 关键字。"

#: ../../library/argparse.rst:1124
msgid "choices"
msgstr "choices"

#: ../../library/argparse.rst:1126
msgid ""
"Some command-line arguments should be selected from a restricted set of "
"values. These can be handled by passing a sequence object as the *choices* "
"keyword argument to :meth:`~ArgumentParser.add_argument`.  When the command "
"line is parsed, argument values will be checked, and an error message will "
"be displayed if the argument was not one of the acceptable values::"
msgstr ""
"某些命令行参数应当从一组受限的值中选择。 这可以通过将一个序列对象作为 *choices* 关键字参数传给 "
":meth:`~ArgumentParser.add_argument` 来处理。 "
"当执行命令行解析时，参数值将被检查，如果参数不是可接受的值之一就将显示错误消息::"

#: ../../library/argparse.rst:1141
msgid ""
"Note that inclusion in the *choices* sequence is checked after any type_ "
"conversions have been performed, so the type of the objects in the *choices*"
" sequence should match the type_ specified::"
msgstr ""
"请注意 *choices* 序列包含的内容会在执行任意 type_ 转换之后被检查，因此 *choices* 序列中对象的类型应当与指定的 type_ "
"相匹配::"

#: ../../library/argparse.rst:1153
msgid ""
"Any sequence can be passed as the *choices* value, so :class:`list` objects,"
" :class:`tuple` objects, and custom sequences are all supported."
msgstr ""
"任何序列都可作为 *choices* 值传入，因此 :class:`list` 对象、:class:`tuple` 对象以及自定义序列都是受支持的。"

#: ../../library/argparse.rst:1156
msgid ""
"Use of :class:`enum.Enum` is not recommended because it is difficult to "
"control its appearance in usage, help, and error messages."
msgstr "不建议使用 :class:`enum.Enum`，因为要控制其在用法、帮助和错误消息中的外观是很困难的。"

#: ../../library/argparse.rst:1159
msgid ""
"Formatted choices overrides the default *metavar* which is normally derived "
"from *dest*.  This is usually what you want because the user never sees the "
"*dest* parameter.  If this display isn't desirable (perhaps because there "
"are many choices), just specify an explicit metavar_."
msgstr ""
"已格式化的选项会覆盖默认的 *metavar*，该值一般是派生自 *dest*。 这通常就是你所需要的，因为用户永远不会看到 *dest* 形参。 "
"如果不想要这样的显示（或许因为有很多选择），只需指定一个显式的 metavar_。"

#: ../../library/argparse.rst:1166
msgid "required"
msgstr "required"

#: ../../library/argparse.rst:1168
msgid ""
"In general, the :mod:`argparse` module assumes that flags like ``-f`` and "
"``--bar`` indicate *optional* arguments, which can always be omitted at the "
"command line. To make an option *required*, ``True`` can be specified for "
"the ``required=`` keyword argument to :meth:`~ArgumentParser.add_argument`::"
msgstr ""
"通常，:mod:`argparse` 模块会认为 ``-f`` 和 ``--bar`` 等旗标是指明 *可选的* 参数，它们总是可以在命令行中被忽略。 "
"要让一个选项成为 *必需的*，则可以将 ``True`` 作为 ``required=`` 关键字参数传给 "
":meth:`~ArgumentParser.add_argument`::"

#: ../../library/argparse.rst:1181
msgid ""
"As the example shows, if an option is marked as ``required``, "
":meth:`~ArgumentParser.parse_args` will report an error if that option is "
"not present at the command line."
msgstr ""
"如这个例子所示，如果一个选项被标记为 "
"``required``，则当该选项未在命令行中出现时，:meth:`~ArgumentParser.parse_args` 将会报告一个错误。"

#: ../../library/argparse.rst:1187
msgid ""
"Required options are generally considered bad form because users expect "
"*options* to be *optional*, and thus they should be avoided when possible."
msgstr "必需的选项通常被认为是不适宜的，因为用户会预期 *options* 都是 *可选的*，因此在可能的情况下应当避免使用它们。"

#: ../../library/argparse.rst:1192
msgid "help"
msgstr "help"

#: ../../library/argparse.rst:1194
msgid ""
"The ``help`` value is a string containing a brief description of the "
"argument. When a user requests help (usually by using ``-h`` or ``--help`` "
"at the command line), these ``help`` descriptions will be displayed with "
"each argument::"
msgstr ""
"``help`` 值是一个包含参数简短描述的字符串。 当用户请求帮助时（一般是通过在命令行中使用 ``-h`` 或 ``--help`` 的方式），这些"
" ``help`` 描述将随每个参数一同显示::"

#: ../../library/argparse.rst:1214
msgid ""
"The ``help`` strings can include various format specifiers to avoid "
"repetition of things like the program name or the argument default_.  The "
"available specifiers include the program name, ``%(prog)s`` and most keyword"
" arguments to :meth:`~ArgumentParser.add_argument`, e.g. ``%(default)s``, "
"``%(type)s``, etc.::"
msgstr ""
"``help`` 字符串可包括各种格式描述符以避免重复使用程序名称或参数 default_ 等文本。 有效的描述符包括程序名称 ``%(prog)s``"
" 和传给 :meth:`~ArgumentParser.add_argument` 的大部分关键字参数，例如 ``%(default)s``, "
"``%(type)s`` 等等::"

#: ../../library/argparse.rst:1231
msgid ""
"As the help string supports %-formatting, if you want a literal ``%`` to "
"appear in the help string, you must escape it as ``%%``."
msgstr "由于帮助字符串支持 %-formatting，如果你希望在帮助字符串中显示 ``%`` 字面值，你必须将其转义为 ``%%``。"

#: ../../library/argparse.rst:1234
msgid ""
":mod:`argparse` supports silencing the help entry for certain options, by "
"setting the ``help`` value to ``argparse.SUPPRESS``::"
msgstr ""
":mod:`argparse` 支持静默特定选项的帮助，具体做法是将 ``help`` 的值设为 ``argparse.SUPPRESS``::"

#: ../../library/argparse.rst:1247
msgid "metavar"
msgstr "metavar"

#: ../../library/argparse.rst:1249
msgid ""
"When :class:`ArgumentParser` generates help messages, it needs some way to "
"refer to each expected argument.  By default, ArgumentParser objects use the"
" dest_ value as the \"name\" of each object.  By default, for positional "
"argument actions, the dest_ value is used directly, and for optional "
"argument actions, the dest_ value is uppercased.  So, a single positional "
"argument with ``dest='bar'`` will be referred to as ``bar``. A single "
"optional argument ``--foo`` that should be followed by a single command-line"
" argument will be referred to as ``FOO``.  An example::"
msgstr ""
"当 :class:`ArgumentParser` 生成帮助消息时，它需要用某种方式来引用每个预期的参数。 默认情况下，ArgumentParser "
"对象使用 dest_ 值作为每个对象的 \"name\"。 默认情况下，对于位置参数动作，dest_ 值将被直接使用，而对于可选参数动作，dest_ "
"值将被转为大写形式。 因此，一个位置参数 ``dest='bar'`` 的引用形式将为 ``bar``。 一个带有单独命令行参数的可选参数 "
"``--foo`` 的引用形式将为 ``FOO``。 示例如下::"

#: ../../library/argparse.rst:1273
msgid "An alternative name can be specified with ``metavar``::"
msgstr "可以使用 ``metavar`` 来指定一个替代名称::"

#: ../../library/argparse.rst:1290
msgid ""
"Note that ``metavar`` only changes the *displayed* name - the name of the "
"attribute on the :meth:`~ArgumentParser.parse_args` object is still "
"determined by the dest_ value."
msgstr ""
"请注意 ``metavar`` 仅改变 *显示的* 名称 -  :meth:`~ArgumentParser.parse_args` "
"对象的属性名称仍然会由 dest_ 值确定。"

#: ../../library/argparse.rst:1294
msgid ""
"Different values of ``nargs`` may cause the metavar to be used multiple "
"times. Providing a tuple to ``metavar`` specifies a different display for "
"each of the arguments::"
msgstr ""
"不同的 ``nargs`` 值可能导致 metavar 被多次使用。 提供一个元组给 ``metavar`` 即为每个参数指定不同的显示信息::"

#: ../../library/argparse.rst:1311
msgid "dest"
msgstr "dest"

#: ../../library/argparse.rst:1313
msgid ""
"Most :class:`ArgumentParser` actions add some value as an attribute of the "
"object returned by :meth:`~ArgumentParser.parse_args`.  The name of this "
"attribute is determined by the ``dest`` keyword argument of "
":meth:`~ArgumentParser.add_argument`.  For positional argument actions, "
"``dest`` is normally supplied as the first argument to "
":meth:`~ArgumentParser.add_argument`::"
msgstr ""
"大多数 :class:`ArgumentParser` 动作会添加一些值作为 :meth:`~ArgumentParser.parse_args` "
"所返回对象的一个属性。 该属性的名称由 :meth:`~ArgumentParser.add_argument` 的 ``dest`` 关键字参数确定。"
" 对于位置参数动作，``dest`` 通常会作为 :meth:`~ArgumentParser.add_argument` 的第一个参数提供::"

#: ../../library/argparse.rst:1325
msgid ""
"For optional argument actions, the value of ``dest`` is normally inferred "
"from the option strings.  :class:`ArgumentParser` generates the value of "
"``dest`` by taking the first long option string and stripping away the "
"initial ``--`` string.  If no long option strings were supplied, ``dest`` "
"will be derived from the first short option string by stripping the initial "
"``-`` character.  Any internal ``-`` characters will be converted to ``_`` "
"characters to make sure the string is a valid attribute name.  The examples "
"below illustrate this behavior::"
msgstr ""
"对于可选参数动作，``dest`` 的值通常取自选项字符串。 :class:`ArgumentParser` 会通过接受第一个长选项字符串并去掉开头的 "
"``--`` 字符串来生成 ``dest`` 的值。 如果没有提供长选项字符串，则 ``dest`` 将通过接受第一个短选项字符串并去掉开头的 "
"``-`` 字符来获得。 任何内部的 ``-`` 字符都将被转换为 ``_`` 字符以确保字符串是有效的属性名称。 下面的例子显示了这种行为::"

#: ../../library/argparse.rst:1342
msgid "``dest`` allows a custom attribute name to be provided::"
msgstr "``dest`` 允许提供自定义属性名称::"

#: ../../library/argparse.rst:1350
msgid "Action classes"
msgstr "Action 类"

#: ../../library/argparse.rst:1352
msgid ""
"Action classes implement the Action API, a callable which returns a callable"
" which processes arguments from the command-line. Any object which follows "
"this API may be passed as the ``action`` parameter to :meth:`add_argument`."
msgstr ""
"Action 类实现了 Action API，它是一个返回可调用对象的可调用对象，返回的可调用对象可处理来自命令行的参数。 任何遵循此 API "
"的对象均可作为 ``action`` 形参传给 :meth:`add_argument`。"

#: ../../library/argparse.rst:1361
msgid ""
"Action objects are used by an ArgumentParser to represent the information "
"needed to parse a single argument from one or more strings from the command "
"line. The Action class must accept the two positional arguments plus any "
"keyword arguments passed to :meth:`ArgumentParser.add_argument` except for "
"the ``action`` itself."
msgstr ""
"Action 对象会被 ArgumentParser 用来表示解析从命令行中的一个或多个字符串中解析出单个参数所必须的信息。 Action "
"类必须接受两个位置参数以及传给 :meth:`ArgumentParser.add_argument` 的任何关键字参数，除了 ``action`` "
"本身。"

#: ../../library/argparse.rst:1367
msgid ""
"Instances of Action (or return value of any callable to the ``action`` "
"parameter) should have attributes \"dest\", \"option_strings\", \"default\","
" \"type\", \"required\", \"help\", etc. defined. The easiest way to ensure "
"these attributes are defined is to call ``Action.__init__``."
msgstr ""
"Action 的实例（或作为or return value of any callable to the ``action`` "
"形参的任何可调用对象的返回值）应当定义 \"dest\", \"option_strings\", \"default\", \"type\", "
"\"required\", \"help\" 等属性。 确保这些属性被定义的最容易方式是调用 ``Action.__init__``。"

#: ../../library/argparse.rst:1372
msgid ""
"Action instances should be callable, so subclasses must override the "
"``__call__`` method, which should accept four parameters:"
msgstr "Action 的实例应当为可调用对象，因此所有子类都必须重写 ``__call__`` 方法，该方法应当接受四个形参:"

#: ../../library/argparse.rst:1375
msgid "``parser`` - The ArgumentParser object which contains this action."
msgstr "``parser`` - 包含此动作的 ArgumentParser 对象。"

#: ../../library/argparse.rst:1377
msgid ""
"``namespace`` - The :class:`Namespace` object that will be returned by "
":meth:`~ArgumentParser.parse_args`.  Most actions add an attribute to this "
"object using :func:`setattr`."
msgstr ""
"``namespace`` - 将由 :meth:`~ArgumentParser.parse_args` 返回的 :class:`Namespace`"
" 对象。 大多数动作会使用 :func:`setattr` 为此对象添加属性。"

#: ../../library/argparse.rst:1381
msgid ""
"``values`` - The associated command-line arguments, with any type "
"conversions applied.  Type conversions are specified with the type_ keyword "
"argument to :meth:`~ArgumentParser.add_argument`."
msgstr ""
"``values`` - 已关联的命令行参数，并提供相应的类型转换。 类型转换由 "
":meth:`~ArgumentParser.add_argument` 的 type_ 关键字参数来指定。"

#: ../../library/argparse.rst:1385
msgid ""
"``option_string`` - The option string that was used to invoke this action. "
"The ``option_string`` argument is optional, and will be absent if the action"
" is associated with a positional argument."
msgstr ""
"``option_string`` - 被用来发起调用此动作的选项字符串。 ``option_string`` "
"参数是可选的，且此参数在动作关联到位置参数时将被略去。"

#: ../../library/argparse.rst:1389
msgid ""
"The ``__call__`` method may perform arbitrary actions, but will typically "
"set attributes on the ``namespace`` based on ``dest`` and ``values``."
msgstr ""
"``__call__`` 方法可以执行任意动作，但通常将基于 ``dest`` 和 ``values`` 来设置 ``namespace`` 的属性。"

#: ../../library/argparse.rst:1392
msgid ""
"Action subclasses can define a ``format_usage`` method that takes no "
"argument and return a string which will be used when printing the usage of "
"the program. If such method is not provided, a sensible default will be "
"used."
msgstr ""
"动作子类可定义 ``format_usage`` 方法，该方法不带参数，所返回的字符串将被用于打印程序的用法说明。 "
"如果未提供此方法，则将使用适当的默认值。"

#: ../../library/argparse.rst:1397
msgid "The parse_args() method"
msgstr "parse_args() 方法"

#: ../../library/argparse.rst:1401
msgid ""
"Convert argument strings to objects and assign them as attributes of the "
"namespace.  Return the populated namespace."
msgstr "将参数字符串转换为对象并将其设为命名空间的属性。 返回带有成员的命名空间。"

#: ../../library/argparse.rst:1404
msgid ""
"Previous calls to :meth:`add_argument` determine exactly what objects are "
"created and how they are assigned. See the documentation for "
":meth:`add_argument` for details."
msgstr ""
"之前对 :meth:`add_argument` 的调用决定了哪些对象被创建以及它们如何被赋值。 请参阅 :meth:`add_argument` "
"的文档了解详情。"

#: ../../library/argparse.rst:1408
msgid ""
"args_ - List of strings to parse.  The default is taken from "
":data:`sys.argv`."
msgstr "args_ - 要解析的字符串列表。 默认值是从 :data:`sys.argv` 获取。"

#: ../../library/argparse.rst:1411
msgid ""
"namespace_ - An object to take the attributes.  The default is a new empty "
":class:`Namespace` object."
msgstr "namespace_ - 用于获取属性的对象。 默认值是一个新的空 :class:`Namespace` 对象。"

#: ../../library/argparse.rst:1416
msgid "Option value syntax"
msgstr "选项值语法"

#: ../../library/argparse.rst:1418
msgid ""
"The :meth:`~ArgumentParser.parse_args` method supports several ways of "
"specifying the value of an option (if it takes one).  In the simplest case, "
"the option and its value are passed as two separate arguments::"
msgstr ""
":meth:`~ArgumentParser.parse_args` 方法支持多种指定选项值的方式（如果它接受选项的话）。 "
"在最简单的情况下，选项和它的值是作为两个单独参数传入的::"

#: ../../library/argparse.rst:1430
msgid ""
"For long options (options with names longer than a single character), the "
"option and value can also be passed as a single command-line argument, using"
" ``=`` to separate them::"
msgstr "对于长选项（名称长度超过一个字符的选项），选项和值也可以作为单个命令行参数传入，使用 ``=`` 分隔它们即可::"

#: ../../library/argparse.rst:1437
msgid ""
"For short options (options only one character long), the option and its "
"value can be concatenated::"
msgstr "对于短选项（长度只有一个字符的选项），选项和它的值可以拼接在一起::"

#: ../../library/argparse.rst:1443
msgid ""
"Several short options can be joined together, using only a single ``-`` "
"prefix, as long as only the last option (or none of them) requires a value::"
msgstr "有些短选项可以使用单个 ``-`` 前缀来进行合并，如果仅有最后一个选项（或没有任何选项）需要值的话::"

#: ../../library/argparse.rst:1455
msgid "Invalid arguments"
msgstr "无效的参数"

#: ../../library/argparse.rst:1457
msgid ""
"While parsing the command line, :meth:`~ArgumentParser.parse_args` checks "
"for a variety of errors, including ambiguous options, invalid types, invalid"
" options, wrong number of positional arguments, etc.  When it encounters "
"such an error, it exits and prints the error along with a usage message::"
msgstr ""
"在解析命令行时，:meth:`~ArgumentParser.parse_args` "
"会检测多种错误，包括有歧义的选项、无效的类型、无效的选项、错误的位置参数个数等等。 当遇到这种错误时，它将退出并打印出错误文本同时附带用法消息::"

#: ../../library/argparse.rst:1483
msgid "Arguments containing ``-``"
msgstr "包含 ``-`` 的参数"

#: ../../library/argparse.rst:1485
msgid ""
"The :meth:`~ArgumentParser.parse_args` method attempts to give errors "
"whenever the user has clearly made a mistake, but some situations are "
"inherently ambiguous.  For example, the command-line argument ``-1`` could "
"either be an attempt to specify an option or an attempt to provide a "
"positional argument. The :meth:`~ArgumentParser.parse_args` method is "
"cautious here: positional arguments may only begin with ``-`` if they look "
"like negative numbers and there are no options in the parser that look like "
"negative numbers::"
msgstr ""
":meth:`~ArgumentParser.parse_args` 方法会在用户明显出错时尝试给出错误信息，但某些情况本身就存在歧义。 "
"例如，命令行参数 ``-1`` 可能是尝试指定一个选项也可能是尝试提供一个位置参数。 "
":meth:`~ArgumentParser.parse_args` "
"方法在此会谨慎行事：位置参数只有在它们看起来像负数并且解析器中没有任何选项看起来像负数时才能以 ``-`` 打头。::"

#: ../../library/argparse.rst:1523
msgid ""
"If you have positional arguments that must begin with ``-`` and don't look "
"like negative numbers, you can insert the pseudo-argument ``'--'`` which "
"tells :meth:`~ArgumentParser.parse_args` that everything after that is a "
"positional argument::"
msgstr ""
"如果你有必须以 ``-`` 打头的位置参数并且看起来不像负数，你可以插入伪参数 ``'--'`` 以告诉 "
":meth:`~ArgumentParser.parse_args` 在那之后的内容是一个位置参数::"

#: ../../library/argparse.rst:1534
msgid "Argument abbreviations (prefix matching)"
msgstr "参数缩写（前缀匹配）"

#: ../../library/argparse.rst:1536
msgid ""
"The :meth:`~ArgumentParser.parse_args` method :ref:`by default "
"<allow_abbrev>` allows long options to be abbreviated to a prefix, if the "
"abbreviation is unambiguous (the prefix matches a unique option)::"
msgstr ""
":meth:`~ArgumentParser.parse_args` 方法 :ref:`在默认情况下 <allow_abbrev>` "
"允许将长选项缩写为前缀，如果缩写无歧义（即前缀与一个特定选项相匹配）的话::"

#: ../../library/argparse.rst:1551
msgid ""
"An error is produced for arguments that could produce more than one options."
" This feature can be disabled by setting :ref:`allow_abbrev` to ``False``."
msgstr "可产生一个以上选项的参数会引发错误。 此特定可通过将 :ref:`allow_abbrev` 设为 ``False`` 来禁用。"

#: ../../library/argparse.rst:1557
msgid "Beyond ``sys.argv``"
msgstr "在 ``sys.argv`` 以外"

#: ../../library/argparse.rst:1559
msgid ""
"Sometimes it may be useful to have an ArgumentParser parse arguments other "
"than those of :data:`sys.argv`.  This can be accomplished by passing a list "
"of strings to :meth:`~ArgumentParser.parse_args`.  This is useful for "
"testing at the interactive prompt::"
msgstr ""
"有时在 :data:`sys.argv` 以外用 ArgumentParser 解析参数也是有用的。 这可以通过将一个字符串列表传给 "
":meth:`~ArgumentParser.parse_args` 来实现。 它适用于在交互提示符下进行检测::"

#: ../../library/argparse.rst:1579
msgid "The Namespace object"
msgstr "命名空间对象"

#: ../../library/argparse.rst:1583
msgid ""
"Simple class used by default by :meth:`~ArgumentParser.parse_args` to create"
" an object holding attributes and return it."
msgstr "由 :meth:`~ArgumentParser.parse_args` 默认使用的简单类，可创建一个存放属性的对象并将其返回。"

#: ../../library/argparse.rst:1586
msgid ""
"This class is deliberately simple, just an :class:`object` subclass with a "
"readable string representation. If you prefer to have dict-like view of the "
"attributes, you can use the standard Python idiom, :func:`vars`::"
msgstr ""
"这个类被有意做得很简单，只是一个具有可读字符串表示形式的 :class:`object`。 如果你更喜欢类似字典的属性视图，你可以使用标准 Python"
" 中惯常的 :func:`vars`::"

#: ../../library/argparse.rst:1596
msgid ""
"It may also be useful to have an :class:`ArgumentParser` assign attributes "
"to an already existing object, rather than a new :class:`Namespace` object."
"  This can be achieved by specifying the ``namespace=`` keyword argument::"
msgstr ""
"另一个用处是让 :class:`ArgumentParser` 为一个已存在对象而不是为一个新的 :class:`Namespace` 对象的属性赋值。"
" 这可以通过指定 ``namespace=`` 关键字参数来实现::"

#: ../../library/argparse.rst:1612
msgid "Other utilities"
msgstr "其它实用工具"

#: ../../library/argparse.rst:1615
msgid "Sub-commands"
msgstr "子命令"

#: ../../library/argparse.rst:1622
msgid ""
"Many programs split up their functionality into a number of sub-commands, "
"for example, the ``svn`` program can invoke sub-commands like ``svn "
"checkout``, ``svn update``, and ``svn commit``.  Splitting up functionality "
"this way can be a particularly good idea when a program performs several "
"different functions which require different kinds of command-line arguments."
" :class:`ArgumentParser` supports the creation of such sub-commands with the"
" :meth:`add_subparsers` method.  The :meth:`add_subparsers` method is "
"normally called with no arguments and returns a special action object.  This"
" object has a single method, :meth:`~ArgumentParser.add_parser`, which takes"
" a command name and any :class:`ArgumentParser` constructor arguments, and "
"returns an :class:`ArgumentParser` object that can be modified as usual."
msgstr ""
"许多程序都会将其功能拆分为一系列子命令，例如，``svn`` 程序包含的子命令有 ``svn checkout``, ``svn update`` 和 "
"``svn commit``。 当一个程序能执行需要多组不同种类命令行参数时这种拆分功能的方式是一个非常好的主意。 "
":class:`ArgumentParser` 通过 :meth:`add_subparsers` 方法支持创建这样的子命令。 "
":meth:`add_subparsers` 方法通常不带参数地调用并返回一个特殊的动作对象。 这种对象只有一个方法 "
":meth:`~ArgumentParser.add_parser`，它接受一个命令名称和任意多个 :class:`ArgumentParser` "
"构造器参数，并返回一个可以通常方式进行修改的 :class:`ArgumentParser` 对象。"

#: ../../library/argparse.rst:1634
msgid "Description of parameters:"
msgstr "形参的描述"

#: ../../library/argparse.rst:1636
msgid ""
"title - title for the sub-parser group in help output; by default "
"\"subcommands\" if description is provided, otherwise uses title for "
"positional arguments"
msgstr "title - 输出帮助的子解析器分组的标题；如果提供了描述则默认为 \"subcommands\"，否则使用位置参数的标题"

#: ../../library/argparse.rst:1640
msgid ""
"description - description for the sub-parser group in help output, by "
"default ``None``"
msgstr "description - 输出帮助中对子解析器的描述，默认为 ``None``"

#: ../../library/argparse.rst:1643
msgid ""
"prog - usage information that will be displayed with sub-command help, by "
"default the name of the program and any positional arguments before the "
"subparser argument"
msgstr "prog - 将与子命令帮助一同显示的用法信息，默认为程序名称和子解析器参数之前的任何位置参数。"

#: ../../library/argparse.rst:1647
msgid ""
"parser_class - class which will be used to create sub-parser instances, by "
"default the class of the current parser (e.g. ArgumentParser)"
msgstr "parser_class - 将被用于创建子解析器实例的类，默认为当前解析器类（例如 ArgumentParser）"

#: ../../library/argparse.rst:1650
msgid ""
"action_ - the basic type of action to be taken when this argument is "
"encountered at the command line"
msgstr "action_ - 当此参数在命令行中出现时要执行动作的基本类型"

#: ../../library/argparse.rst:1653
msgid ""
"dest_ - name of the attribute under which sub-command name will be stored; "
"by default ``None`` and no value is stored"
msgstr "dest_ - 将被用于保存子命令名称的属性名；默认为 ``None`` 即不保存任何值"

#: ../../library/argparse.rst:1656
msgid ""
"required_ - Whether or not a subcommand must be provided, by default "
"``False`` (added in 3.7)"
msgstr "required_ - 是否必须要提供子命令，默认为 ``False`` (在 3.7 中新增)"

#: ../../library/argparse.rst:1659
msgid "help_ - help for sub-parser group in help output, by default ``None``"
msgstr "help_ - 在输出帮助中的子解析器分组帮助信息，默认为 ``None``"

#: ../../library/argparse.rst:1661
msgid ""
"metavar_ - string presenting available sub-commands in help; by default it "
"is ``None`` and presents sub-commands in form {cmd1, cmd2, ..}"
msgstr "metavar_ - 帮助信息中表示可用子命令的字符串；默认为 ``None`` 并以 {cmd1, cmd2, ..} 的形式表示子命令"

#: ../../library/argparse.rst:1664
msgid "Some example usage::"
msgstr "一些使用示例::"

#: ../../library/argparse.rst:1685
msgid ""
"Note that the object returned by :meth:`parse_args` will only contain "
"attributes for the main parser and the subparser that was selected by the "
"command line (and not any other subparsers).  So in the example above, when "
"the ``a`` command is specified, only the ``foo`` and ``bar`` attributes are "
"present, and when the ``b`` command is specified, only the ``foo`` and "
"``baz`` attributes are present."
msgstr ""
"请注意 :meth:`parse_args` 返回的对象将只包含主解析器和由命令行所选择的子解析器的属性（而没有任何其他子解析器）。 "
"因此在上面的例子中，当指定了 ``a`` 命令时，将只存在 ``foo`` 和 ``bar`` 属性，而当指定了 ``b`` 命令时，则只存在 "
"``foo`` 和 ``baz`` 属性。"

#: ../../library/argparse.rst:1692
msgid ""
"Similarly, when a help message is requested from a subparser, only the help "
"for that particular parser will be printed.  The help message will not "
"include parent parser or sibling parser messages.  (A help message for each "
"subparser command, however, can be given by supplying the ``help=`` argument"
" to :meth:`add_parser` as above.)"
msgstr ""
"类似地，当从一个子解析器请求帮助消息时，只有该特定解析器的帮助消息会被打印出来。 帮助消息将不包括父解析器或同级解析器的消息。 "
"（每个子解析器命令一条帮助消息，但是，也可以像上面那样通过提供 ``help=`` 参数给 :meth:`add_parser` 来给出。）"

#: ../../library/argparse.rst:1728
msgid ""
"The :meth:`add_subparsers` method also supports ``title`` and "
"``description`` keyword arguments.  When either is present, the subparser's "
"commands will appear in their own group in the help output.  For example::"
msgstr ""
":meth:`add_subparsers` 方法也支持 ``title`` 和 ``description`` 关键字参数。 "
"当两者都存在时，子解析器的命令将出现在输出帮助消息中它们自己的分组内。 例如::"

#: ../../library/argparse.rst:1749
msgid ""
"Furthermore, ``add_parser`` supports an additional ``aliases`` argument, "
"which allows multiple strings to refer to the same subparser. This example, "
"like ``svn``, aliases ``co`` as a shorthand for ``checkout``::"
msgstr ""
"此外，``add_parser`` 还支持额外的``aliases`` 参数，允许多个字符串引用同一个子解析器。以下例子，与``svn`` "
"一样，将``co`` 作为``checkout`` 的别名::"

#: ../../library/argparse.rst:1760
msgid ""
"One particularly effective way of handling sub-commands is to combine the "
"use of the :meth:`add_subparsers` method with calls to :meth:`set_defaults` "
"so that each subparser knows which Python function it should execute.  For "
"example::"
msgstr ""
"一个特别有效的处理子命令的方式是将 :meth:`add_subparsers` 方法与对 :meth:`set_defaults` "
"的调用结合起来使用，这样每个子解析器就能知道应当执行哪个 Python 函数。 例如::"

#: ../../library/argparse.rst:1797
msgid ""
"This way, you can let :meth:`parse_args` do the job of calling the "
"appropriate function after argument parsing is complete.  Associating "
"functions with actions like this is typically the easiest way to handle the "
"different actions for each of your subparsers.  However, if it is necessary "
"to check the name of the subparser that was invoked, the ``dest`` keyword "
"argument to the :meth:`add_subparsers` call will work::"
msgstr ""
"通过这种方式，你可以在参数解析结束后让 :meth:`parse_args` 执行调用适当函数的任务。 "
"像这样将函数关联到动作通常是你处理每个子解析器的不同动作的最简便方式。 但是，如果有必要检查被唤起的子解析器的名称，则 "
":meth:`add_subparsers` 调用的 ``dest`` 关键字参数将可实现::"

#: ../../library/argparse.rst:1813
msgid "New *required* keyword argument."
msgstr "新增 *required* 关键字参数。"

#: ../../library/argparse.rst:1818
msgid "FileType objects"
msgstr "FileType 对象"

#: ../../library/argparse.rst:1822
msgid ""
"The :class:`FileType` factory creates objects that can be passed to the type"
" argument of :meth:`ArgumentParser.add_argument`.  Arguments that have "
":class:`FileType` objects as their type will open command-line arguments as "
"files with the requested modes, buffer sizes, encodings and error handling "
"(see the :func:`open` function for more details)::"
msgstr ""
":class:`FileType` 工厂类用于创建可作为 :meth:`ArgumentParser.add_argument` 的 type "
"参数传入的对象。 以 :class:`FileType` "
"对象作为其类型的参数将使用命令行参数以所请求模式、缓冲区大小、编码格式和错误处理方式打开文件（请参阅 :func:`open` 函数了解详情）::"

#: ../../library/argparse.rst:1834
msgid ""
"FileType objects understand the pseudo-argument ``'-'`` and automatically "
"convert this into :data:`sys.stdin` for readable :class:`FileType` objects "
"and :data:`sys.stdout` for writable :class:`FileType` objects::"
msgstr ""
"FileType 对象能理解伪参数 ``'-'`` 并会自动将其转换为 :data:`sys.stdin` 用于可读的 "
":class:`FileType` 对象以及 :data:`sys.stdout` 用于可写的 :class:`FileType` 对象::"

#: ../../library/argparse.rst:1843
msgid "The *encodings* and *errors* keyword arguments."
msgstr "*encodings* 和 *errors* 关键字参数。"

#: ../../library/argparse.rst:1848
msgid "Argument groups"
msgstr "参数组"

#: ../../library/argparse.rst:1852
msgid ""
"By default, :class:`ArgumentParser` groups command-line arguments into "
"\"positional arguments\" and \"optional arguments\" when displaying help "
"messages. When there is a better conceptual grouping of arguments than this "
"default one, appropriate groups can be created using the "
":meth:`add_argument_group` method::"
msgstr ""
"在默认情况下，:class:`ArgumentParser` 会在显示帮助消息时将命令行参数分为“位置参数”和“可选参数”两组。 "
"当存在比默认更好的参数分组概念时，可以使用 :meth:`add_argument_group` 方法来创建适当的分组::"

#: ../../library/argparse.rst:1869
msgid ""
"The :meth:`add_argument_group` method returns an argument group object which"
" has an :meth:`~ArgumentParser.add_argument` method just like a regular "
":class:`ArgumentParser`.  When an argument is added to the group, the parser"
" treats it just like a normal argument, but displays the argument in a "
"separate group for help messages.  The :meth:`add_argument_group` method "
"accepts *title* and *description* arguments which can be used to customize "
"this display::"
msgstr ""
":meth:`add_argument_group` 方法返回一个具有 :meth:`~ArgumentParser.add_argument` "
"方法的参数分组对象，这与常规的 :class:`ArgumentParser` 一样。 "
"当一个参数被加入分组时，解析器会将它视为一个正常的参数，但是会在不同的帮助消息分组中显示该参数。 :meth:`add_argument_group` "
"方法接受 *title* 和 *description* 参数，它们可被用来定制显示内容::"

#: ../../library/argparse.rst:1895
msgid ""
"Note that any arguments not in your user-defined groups will end up back in "
"the usual \"positional arguments\" and \"optional arguments\" sections."
msgstr "请注意任意不在你的自定义分组中的参数最终都将回到通常的“位置参数”和“可选参数”分组中。"

#: ../../library/argparse.rst:1900
msgid "Mutual exclusion"
msgstr "互斥"

#: ../../library/argparse.rst:1904
msgid ""
"Create a mutually exclusive group. :mod:`argparse` will make sure that only "
"one of the arguments in the mutually exclusive group was present on the "
"command line::"
msgstr "创建一个互斥组。 :mod:`argparse` 将会确保互斥组中只有一个参数在命令行中可用::"

#: ../../library/argparse.rst:1920
msgid ""
"The :meth:`add_mutually_exclusive_group` method also accepts a *required* "
"argument, to indicate that at least one of the mutually exclusive arguments "
"is required::"
msgstr ""
":meth:`add_mutually_exclusive_group` 方法也接受一个 *required* "
"参数，表示在互斥组中至少有一个参数是需要的::"

#: ../../library/argparse.rst:1932
msgid ""
"Note that currently mutually exclusive argument groups do not support the "
"*title* and *description* arguments of "
":meth:`~ArgumentParser.add_argument_group`."
msgstr ""
"注意，目前互斥参数组不支持 :meth:`~ArgumentParser.add_argument_group` 的 *title* 和 "
"*description* 参数。"

#: ../../library/argparse.rst:1938
msgid "Parser defaults"
msgstr "解析器默认值"

#: ../../library/argparse.rst:1942
msgid ""
"Most of the time, the attributes of the object returned by "
":meth:`parse_args` will be fully determined by inspecting the command-line "
"arguments and the argument actions.  :meth:`set_defaults` allows some "
"additional attributes that are determined without any inspection of the "
"command line to be added::"
msgstr ""
"在大多数时候，:meth:`parse_args` 所返回对象的属性将完全通过检查命令行参数和参数动作来确定。 :meth:`set_defaults`"
" 则允许加入一些无须任何命令行检查的额外属性::"

#: ../../library/argparse.rst:1954
msgid ""
"Note that parser-level defaults always override argument-level defaults::"
msgstr "请注意解析器层级的默认值总是会覆盖参数层级的默认值::"

#: ../../library/argparse.rst:1962
msgid ""
"Parser-level defaults can be particularly useful when working with multiple "
"parsers.  See the :meth:`~ArgumentParser.add_subparsers` method for an "
"example of this type."
msgstr ""
"解析器层级默认值在需要多解析器时会特别有用。 请参阅 :meth:`~ArgumentParser.add_subparsers` "
"方法了解此类型的一个示例。"

#: ../../library/argparse.rst:1968
msgid ""
"Get the default value for a namespace attribute, as set by either "
":meth:`~ArgumentParser.add_argument` or by "
":meth:`~ArgumentParser.set_defaults`::"
msgstr ""
"获取一个命名空间属性的默认值，该值是由 :meth:`~ArgumentParser.add_argument` 或 "
":meth:`~ArgumentParser.set_defaults` 设置的::"

#: ../../library/argparse.rst:1979
msgid "Printing help"
msgstr "打印帮助"

#: ../../library/argparse.rst:1981
msgid ""
"In most typical applications, :meth:`~ArgumentParser.parse_args` will take "
"care of formatting and printing any usage or error messages.  However, "
"several formatting methods are available:"
msgstr ""
"在大多数典型应用中，:meth:`~ArgumentParser.parse_args` 将负责任何用法和错误消息的格式化和打印。 "
"但是，也可使用某些其他格式化方法:"

#: ../../library/argparse.rst:1987
msgid ""
"Print a brief description of how the :class:`ArgumentParser` should be "
"invoked on the command line.  If *file* is ``None``, :data:`sys.stdout` is "
"assumed."
msgstr ""
"打印一段简短描述，说明应当如何在命令行中唤起 :class:`ArgumentParser`。 如果 *file* 为 ``None``，则默认使用 "
":data:`sys.stdout`。"

#: ../../library/argparse.rst:1993
msgid ""
"Print a help message, including the program usage and information about the "
"arguments registered with the :class:`ArgumentParser`.  If *file* is "
"``None``, :data:`sys.stdout` is assumed."
msgstr ""
"打印一条帮助消息，包括程序用法和通过 :class:`ArgumentParser` 注册的相关参数信息。 如果 *file* 为 "
"``None``，则默认使用 :data:`sys.stdout`。"

#: ../../library/argparse.rst:1997
msgid ""
"There are also variants of these methods that simply return a string instead"
" of printing it:"
msgstr "还存在这些方法的几个变化形式，它们只返回字符串而不打印消息:"

#: ../../library/argparse.rst:2002
msgid ""
"Return a string containing a brief description of how the "
":class:`ArgumentParser` should be invoked on the command line."
msgstr "返回一个包含简短描述的字符串，说明应当如何在命令行中唤起 :class:`ArgumentParser`。"

#: ../../library/argparse.rst:2007
msgid ""
"Return a string containing a help message, including the program usage and "
"information about the arguments registered with the :class:`ArgumentParser`."
msgstr "反回一个包含帮助消息的字符串，包括程序用法和通过 :class:`ArgumentParser` 注册的相关参数信息。"

#: ../../library/argparse.rst:2012
msgid "Partial parsing"
msgstr "部分解析"

#: ../../library/argparse.rst:2016
msgid ""
"Sometimes a script may only parse a few of the command-line arguments, "
"passing the remaining arguments on to another script or program. In these "
"cases, the :meth:`~ArgumentParser.parse_known_args` method can be useful.  "
"It works much like :meth:`~ArgumentParser.parse_args` except that it does "
"not produce an error when extra arguments are present.  Instead, it returns "
"a two item tuple containing the populated namespace and the list of "
"remaining argument strings."
msgstr ""
"有时一个脚本可能只解析部分命令行参数，而将其余的参数继续传递给另一个脚本或程序。 "
"在这种情况下，:meth:`~ArgumentParser.parse_known_args` 方法会很有用处。 它的作用方式很类似 "
":meth:`~ArgumentParser.parse_args` 但区别在于当存在额外参数时它不会产生错误。 "
"而是会返回一个由两个条目构成的元组，其中包含带成员的命名空间和剩余参数字符串的列表。"

#: ../../library/argparse.rst:2032
msgid ""
":ref:`Prefix matching <prefix-matching>` rules apply to "
":meth:`parse_known_args`. The parser may consume an option even if it's just"
" a prefix of one of its known options, instead of leaving it in the "
"remaining arguments list."
msgstr ""
":ref:`前缀匹配 <prefix-matching>` 规则应用于 :meth:`parse_known_args`。 "
"一个选项即使只是已知选项的前缀部分解析器也能识别该选项，不会将其放入剩余参数列表。"

#: ../../library/argparse.rst:2039
msgid "Customizing file parsing"
msgstr "自定义文件解析"

#: ../../library/argparse.rst:2043
msgid ""
"Arguments that are read from a file (see the *fromfile_prefix_chars* keyword"
" argument to the :class:`ArgumentParser` constructor) are read one argument "
"per line. :meth:`convert_arg_line_to_args` can be overridden for fancier "
"reading."
msgstr ""
"从文件读取的参数（见 :class:`ArgumentParser` 的 *fromfile_prefix_chars* "
"关键字参数）将是一行读取一个参数。 :meth:`convert_arg_line_to_args` 可被重写以使用更复杂的读取方式。"

#: ../../library/argparse.rst:2048
msgid ""
"This method takes a single argument *arg_line* which is a string read from "
"the argument file.  It returns a list of arguments parsed from this string. "
"The method is called once per line read from the argument file, in order."
msgstr ""
"此方法接受从参数文件读取的字符串形式的单个参数 *arg_line*。 它返回从该字符串解析出的参数列表。 "
"此方法将在每次按顺序从参数文件读取一行时被调用一次。"

#: ../../library/argparse.rst:2052
msgid ""
"A useful override of this method is one that treats each space-separated "
"word as an argument.  The following example demonstrates how to do this::"
msgstr "此方法的一个有用的重写是将每个以空格分隔的单词视为一个参数。 下面的例子演示了如何实现这一点::"

#: ../../library/argparse.rst:2061
msgid "Exiting methods"
msgstr "退出方法"

#: ../../library/argparse.rst:2065
msgid ""
"This method terminates the program, exiting with the specified *status* and,"
" if given, it prints a *message* before that. The user can override this "
"method to handle these steps differently::"
msgstr ""
"此方法将终结程序，退出时附带指定的 *status*，并且如果给出了 *message* 则会在退出前将其打印输出。 "
"用户可重写此方法以不同方式来处理这些步骤::"

#: ../../library/argparse.rst:2077
msgid ""
"This method prints a usage message including the *message* to the standard "
"error and terminates the program with a status code of 2."
msgstr "此方法将向标准错误打印包括 *message* 的用法消息并附带状态码 2 终结程序。"

#: ../../library/argparse.rst:2082
msgid "Intermixed parsing"
msgstr "混合解析"

#: ../../library/argparse.rst:2087
msgid ""
"A number of Unix commands allow the user to intermix optional arguments with"
" positional arguments.  The :meth:`~ArgumentParser.parse_intermixed_args` "
"and :meth:`~ArgumentParser.parse_known_intermixed_args` methods support this"
" parsing style."
msgstr ""
"许多 Unix 命令允许用户混用可选参数与位置参数。 :meth:`~ArgumentParser.parse_intermixed_args` 和 "
":meth:`~ArgumentParser.parse_known_intermixed_args` 方法均支持这种解析风格。"

#: ../../library/argparse.rst:2092
msgid ""
"These parsers do not support all the argparse features, and will raise "
"exceptions if unsupported features are used.  In particular, subparsers, "
"``argparse.REMAINDER``, and mutually exclusive groups that include both "
"optionals and positionals are not supported."
msgstr ""
"这些解析器并不支持所有的 argparse 特性，并且当未支持的特性被使用时将会引发异常。 "
"特别地，子解析器，``argparse.REMAINDER`` 以及同时包括可选与位置参数的互斥分组是不受支持的。"

#: ../../library/argparse.rst:2097
msgid ""
"The following example shows the difference between "
":meth:`~ArgumentParser.parse_known_args` and "
":meth:`~ArgumentParser.parse_intermixed_args`: the former returns ``['2', "
"'3']`` as unparsed arguments, while the latter collects all the positionals "
"into ``rest``.  ::"
msgstr ""
"下面的例子显示了 :meth:`~ArgumentParser.parse_known_args` 与 "
":meth:`~ArgumentParser.parse_intermixed_args` 之间的差异：前者会将 ``['2', '3']`` "
"返回为未解析的参数，而后者会将所有位置参数收集至 ``rest`` 中。 ::"

#: ../../library/argparse.rst:2112
msgid ""
":meth:`~ArgumentParser.parse_known_intermixed_args` returns a two item tuple"
" containing the populated namespace and the list of remaining argument "
"strings. :meth:`~ArgumentParser.parse_intermixed_args` raises an error if "
"there are any remaining unparsed argument strings."
msgstr ""
":meth:`~ArgumentParser.parse_known_intermixed_args` "
"返回由两个条目组成的元组，其中包含带成员的命名空间以及剩余参数字符串列表。 当存在任何剩余的未解析参数字符串时 "
":meth:`~ArgumentParser.parse_intermixed_args` 将引发一个错误。"

#: ../../library/argparse.rst:2122
msgid "Upgrading optparse code"
msgstr "升级 optparse 代码"

#: ../../library/argparse.rst:2124
msgid ""
"Originally, the :mod:`argparse` module had attempted to maintain "
"compatibility with :mod:`optparse`.  However, :mod:`optparse` was difficult "
"to extend transparently, particularly with the changes required to support "
"the new ``nargs=`` specifiers and better usage messages.  When most "
"everything in :mod:`optparse` had either been copy-pasted over or monkey-"
"patched, it no longer seemed practical to try to maintain the backwards "
"compatibility."
msgstr ""
"起初，:mod:`argparse` 曾经尝试通过 :mod:`optparse` 来维持兼容性。 但是，:mod:`optparse` "
"很难透明地扩展，特别是那些为支持新的 ``nargs=`` 描述方式和更好的用法消息所需的修改。当When most everything in "
":mod:`optparse` 中几乎所有内容都已被复制粘贴或打上补丁时，维持向下兼容看来已是不切实际的。"

#: ../../library/argparse.rst:2131
msgid ""
"The :mod:`argparse` module improves on the standard library :mod:`optparse` "
"module in a number of ways including:"
msgstr ":mod:`argparse` 模块在许多方面对标准库的 :mod:`optparse` 模块进行了增强，包括:"

#: ../../library/argparse.rst:2134
msgid "Handling positional arguments."
msgstr "处理位置参数。"

#: ../../library/argparse.rst:2135
msgid "Supporting sub-commands."
msgstr "支持子命令。"

#: ../../library/argparse.rst:2136
msgid "Allowing alternative option prefixes like ``+`` and ``/``."
msgstr "允许替代选项前缀例如 ``+`` 和 ``/``。"

#: ../../library/argparse.rst:2137
msgid "Handling zero-or-more and one-or-more style arguments."
msgstr "处理零个或多个以及一个或多个风格的参数。"

#: ../../library/argparse.rst:2138
msgid "Producing more informative usage messages."
msgstr "生成更具信息量的用法消息。"

#: ../../library/argparse.rst:2139
msgid "Providing a much simpler interface for custom ``type`` and ``action``."
msgstr "提供用于定制 ``type`` 和 ``action`` 的更为简单的接口。"

#: ../../library/argparse.rst:2141
msgid "A partial upgrade path from :mod:`optparse` to :mod:`argparse`:"
msgstr "从 :mod:`optparse` 到 :mod:`argparse` 的部分升级路径:"

#: ../../library/argparse.rst:2143
msgid ""
"Replace all :meth:`optparse.OptionParser.add_option` calls with "
":meth:`ArgumentParser.add_argument` calls."
msgstr ""
"将所有 :meth:`optparse.OptionParser.add_option` 调用替换为 "
":meth:`ArgumentParser.add_argument` 调用。"

#: ../../library/argparse.rst:2146
msgid ""
"Replace ``(options, args) = parser.parse_args()`` with ``args = "
"parser.parse_args()`` and add additional :meth:`ArgumentParser.add_argument`"
" calls for the positional arguments. Keep in mind that what was previously "
"called ``options``, now in the :mod:`argparse` context is called ``args``."
msgstr ""
"将 ``(options, args) = parser.parse_args()`` 替换为 ``args = "
"parser.parse_args()`` 并为位置参数添加额外的 :meth:`ArgumentParser.add_argument` 调用。 "
"请注意之前所谓的 ``options`` 在 :mod:`argparse` 上下文中被称为 ``args``。"

#: ../../library/argparse.rst:2151
msgid ""
"Replace :meth:`optparse.OptionParser.disable_interspersed_args` by using "
":meth:`~ArgumentParser.parse_intermixed_args` instead of "
":meth:`~ArgumentParser.parse_args`."
msgstr ""
"通过使用 :meth:`~ArgumentParser.parse_intermixed_args` 而非 "
":meth:`~ArgumentParser.parse_args` 来替换 "
":meth:`optparse.OptionParser.disable_interspersed_args`。"

#: ../../library/argparse.rst:2155
msgid ""
"Replace callback actions and the ``callback_*`` keyword arguments with "
"``type`` or ``action`` arguments."
msgstr "将回调动作和 ``callback_*`` 关键字参数替换为 ``type`` 或 ``action`` 参数。"

#: ../../library/argparse.rst:2158
msgid ""
"Replace string names for ``type`` keyword arguments with the corresponding "
"type objects (e.g. int, float, complex, etc)."
msgstr "将 ``type`` 关键字参数字符串名称替换为相应的类型对象（例如 int, float, complex 等）。"

#: ../../library/argparse.rst:2161
msgid ""
"Replace :class:`optparse.Values` with :class:`Namespace` and "
":exc:`optparse.OptionError` and :exc:`optparse.OptionValueError` with "
":exc:`ArgumentError`."
msgstr ""
"将 :class:`optparse.Values` 替换为 :class:`Namespace` 并将 "
":exc:`optparse.OptionError` 和 :exc:`optparse.OptionValueError` 替换为 "
":exc:`ArgumentError`。"

#: ../../library/argparse.rst:2165
msgid ""
"Replace strings with implicit arguments such as ``%default`` or ``%prog`` "
"with the standard Python syntax to use dictionaries to format strings, that "
"is, ``%(default)s`` and ``%(prog)s``."
msgstr ""
"将隐式参数字符串例如使用标准 Python 字典语法的 ``%default`` 或 ``%prog`` 替换为格式字符串，即 "
"``%(default)s`` 和 ``%(prog)s``。"

#: ../../library/argparse.rst:2169
msgid ""
"Replace the OptionParser constructor ``version`` argument with a call to "
"``parser.add_argument('--version', action='version', version='<the "
"version>')``."
msgstr ""
"将 OptionParser 构造器 ``version`` 参数替换为对 ``parser.add_argument('--version', "
"action='version', version='<the version>')`` 的调用。"
