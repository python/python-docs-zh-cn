# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/chunk.rst:2
msgid ":mod:`chunk` --- Read IFF chunked data"
msgstr ":mod:`chunk` --- 读取 IFF 分块数据"

#: ../../library/chunk.rst:11
msgid "**Source code:** :source:`Lib/chunk.py`"
msgstr "**源代码:** :source:`Lib/chunk.py`"

#: ../../library/chunk.rst:23
msgid ""
"The :mod:`chunk` module is deprecated (see :pep:`PEP 594 <594#chunk>` for "
"details)."
msgstr ":mod:`chunk` 模块已被弃用（请参阅 :pep:`PEP 594 <594#chunk>` 了解详情）。"

#: ../../library/chunk.rst:26
msgid ""
"This module provides an interface for reading files that use EA IFF 85 "
"chunks. [#]_  This format is used in at least the Audio Interchange File "
"Format (AIFF/AIFF-C) and the Real Media File Format (RMFF).  The WAVE audio "
"file format is closely related and can also be read using this module."
msgstr ""
"本模块提供了一个读取使用 EA IFF 85 分块的数据的接口chunks. [#]_  这种格式使用的场合有 Audio Interchange "
"File Format (AIFF/AIFF-C) 和 Real Media File Format (RMFF) 等。 与它们密切相关的 WAVE "
"音频文件也可使用此模块来读取。"

#: ../../library/chunk.rst:31
msgid "A chunk has the following structure:"
msgstr "一个分块具有以下结构:"

#: ../../library/chunk.rst:34
msgid "Offset"
msgstr "偏移"

#: ../../library/chunk.rst:34
msgid "Length"
msgstr "长度"

#: ../../library/chunk.rst:34
msgid "Contents"
msgstr "目录"

#: ../../library/chunk.rst:36
msgid "0"
msgstr "0"

#: ../../library/chunk.rst:36 ../../library/chunk.rst:38
msgid "4"
msgstr "4"

#: ../../library/chunk.rst:36
msgid "Chunk ID"
msgstr "区块ID"

#: ../../library/chunk.rst:38
msgid "Size of chunk in big-endian byte order, not including the header"
msgstr "大端字节顺序的块大小，不包括头"

#: ../../library/chunk.rst:42
msgid "8"
msgstr "8"

#: ../../library/chunk.rst:42
msgid "*n*"
msgstr "*n*"

#: ../../library/chunk.rst:42
msgid "Data bytes, where *n* is the size given in the preceding field"
msgstr "数据字节，其中 *n* 是前一字段中给出的大小"

#: ../../library/chunk.rst:46
msgid "8 + *n*"
msgstr "8 + *n*"

#: ../../library/chunk.rst:46
msgid "0 or 1"
msgstr "0 或 1"

#: ../../library/chunk.rst:46
msgid "Pad byte needed if *n* is odd and chunk alignment is used"
msgstr "如果 *n* 为奇数且使用块对齐，则需要填充字节"

#: ../../library/chunk.rst:50
msgid "The ID is a 4-byte string which identifies the type of chunk."
msgstr "ID是一个4字节的字符串，用于标识块的类型。"

#: ../../library/chunk.rst:52
msgid ""
"The size field (a 32-bit value, encoded using big-endian byte order) gives "
"the size of the chunk data, not including the 8-byte header."
msgstr "大小字段（32 位的值，使用大端字节序编码）给出分块数据的大小，不包括 8 字节的标头。"

#: ../../library/chunk.rst:55
msgid ""
"Usually an IFF-type file consists of one or more chunks.  The proposed usage"
" of the :class:`Chunk` class defined here is to instantiate an instance at "
"the start of each chunk and read from the instance until it reaches the end,"
" after which a new instance can be instantiated. At the end of the file, "
"creating a new instance will fail with an :exc:`EOFError` exception."
msgstr ""
"使用由一个或更多分块组成的 IFF 类型文件。 此处定义的 :class:`Chunk` "
"类的建议使用方式是在每个分块开始时实例化一个实例并从实例读取直到其末尾，在那之后可以再实例化新的实例。 到达文件末尾时，创建新实例将会失败并引发 "
":exc:`EOFError` 异常。"

#: ../../library/chunk.rst:64
msgid ""
"Class which represents a chunk.  The *file* argument is expected to be a "
"file-like object.  An instance of this class is specifically allowed.  The "
"only method that is needed is :meth:`~io.IOBase.read`.  If the methods "
":meth:`~io.IOBase.seek` and :meth:`~io.IOBase.tell` are present and don't "
"raise an exception, they are also used. If these methods are present and "
"raise an exception, they are expected to not have altered the object.  If "
"the optional argument *align* is true, chunks are assumed to be aligned on "
"2-byte boundaries.  If *align* is false, no alignment is assumed.  The "
"default value is true.  If the optional argument *bigendian* is false, the "
"chunk size is assumed to be in little-endian order. This is needed for WAVE "
"audio files. The default value is true.  If the optional argument "
"*inclheader* is true, the size given in the chunk header includes the size "
"of the header.  The default value is false."
msgstr ""
"代表一个分块的类。 *file* 参数预期为一个文件型对象。 特别地也允许该类的实例。 唯一必需的方法是 "
":meth:`~io.IOBase.read`。 如果存在 :meth:`~io.IOBase.seek` 和 "
":meth:`~io.IOBase.tell` 方法并且没有引发异常，它们也会被使用。 如果存在这些方法并且引发了异常，则它们不应改变目标对象。 "
"如果可选参数 *align* 为真值，则分块应当以 2 字节边界对齐。 如果 *align* 为假值，则不使用对齐。 此参数默认为真值。 如果可选参数 "
"*bigendian* 为假值，分块大小应当为小端序。 这对于 WAVE 音频文件是必须的。 此参数默认为真值。 如果可选参数 *inclheader*"
" 为真值，则分块标头中给出的大小将包括标头的大小。 此参数默认为假值。"

#: ../../library/chunk.rst:78
msgid "A :class:`Chunk` object supports the following methods:"
msgstr ":class:`Chunk` 对象支持下列方法："

#: ../../library/chunk.rst:83
msgid ""
"Returns the name (ID) of the chunk.  This is the first 4 bytes of the chunk."
msgstr "返回分块的名称（ID）。 这是分块的头 4 个字节。"

#: ../../library/chunk.rst:89
msgid "Returns the size of the chunk."
msgstr "返回分块的大小。"

#: ../../library/chunk.rst:94
msgid ""
"Close and skip to the end of the chunk.  This does not close the underlying "
"file."
msgstr "关闭并跳转到分块的末尾。 这不会关闭下层的文件。"

#: ../../library/chunk.rst:97
msgid ""
"The remaining methods will raise :exc:`OSError` if called after the "
":meth:`close` method has been called.  Before Python 3.3, they used to raise"
" :exc:`IOError`, now an alias of :exc:`OSError`."
msgstr ""
"在 :meth:`close` 方法已被调用后其余方法将会引发 :exc:`OSError`。 在 Python 3.3 之前，它们曾会引发 "
":exc:`IOError`，现在这是 :exc:`OSError` 的一个别名。"

#: ../../library/chunk.rst:104
msgid "Returns ``False``."
msgstr "返回 ``False``。"

#: ../../library/chunk.rst:109
msgid ""
"Set the chunk's current position.  The *whence* argument is optional and "
"defaults to ``0`` (absolute file positioning); other values are ``1`` (seek "
"relative to the current position) and ``2`` (seek relative to the file's "
"end).  There is no return value. If the underlying file does not allow seek,"
" only forward seeks are allowed."
msgstr ""
"设置分块的当前位置。 *whence* 参数为可选项并且默认为 ``0`` (绝对文件定位)；其他值还有 ``1`` (相对当前位置查找) 和 "
"``2`` (相对文件末尾查找)。 没有返回值。 如果下层文件不支持查找，则只允许向前查找。"

#: ../../library/chunk.rst:118
msgid "Return the current position into the chunk."
msgstr "将当前位置返回到分块。"

#: ../../library/chunk.rst:123
msgid ""
"Read at most *size* bytes from the chunk (less if the read hits the end of "
"the chunk before obtaining *size* bytes).  If the *size* argument is "
"negative or omitted, read all data until the end of the chunk.  An empty "
"bytes object is returned when the end of the chunk is encountered "
"immediately."
msgstr ""
"从分块读取至多 *size* 个字节（如果在获得 *size* 个字节之前已到达分块末尾则读取的字节会少于此数量）。 如果 *size* "
"参数为负值或被省略，则读取所有字节直到分块末尾。 当立即遇到分块末尾则返回空字节串对象。"

#: ../../library/chunk.rst:132
msgid ""
"Skip to the end of the chunk.  All further calls to :meth:`read` for the "
"chunk will return ``b''``.  If you are not interested in the contents of the"
" chunk, this method should be called so that the file points to the start of"
" the next chunk."
msgstr ""
"跳到分块末尾。此后对分块再次调用 :meth:`read` 将返回 ``b''``。 "
"如果你对分块的内容不感兴趣，则应当调用此方法以使文件指向下一分块的开头。"

#: ../../library/chunk.rst:139
msgid "Footnotes"
msgstr "备注"

#: ../../library/chunk.rst:140
msgid ""
"\"EA IFF 85\" Standard for Interchange Format Files, Jerry Morrison, "
"Electronic Arts, January 1985."
msgstr "\"EA IFF 85\" 交换格式文件标准, Jerry Morrison, Electronic Arts, 1985 年 1 月。"

#: ../../library/chunk.rst:13
msgid "Audio Interchange File Format"
msgstr "Audio Interchange File Format"

#: ../../library/chunk.rst:13
msgid "AIFF"
msgstr "AIFF"

#: ../../library/chunk.rst:13
msgid "AIFF-C"
msgstr "AIFF-C"

#: ../../library/chunk.rst:13
msgid "Real Media File Format"
msgstr "Real Media File Format"

#: ../../library/chunk.rst:13
msgid "RMFF"
msgstr "RMFF"
