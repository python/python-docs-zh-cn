# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/timeit.rst:2
msgid ":mod:`timeit` --- Measure execution time of small code snippets"
msgstr ""

#: ../../library/timeit.rst:7
msgid "**Source code:** :source:`Lib/timeit.py`"
msgstr ""

#: ../../library/timeit.rst:15
msgid ""
"This module provides a simple way to time small bits of Python code. It has "
"both a :ref:`timeit-command-line-interface` as well as a :ref:`callable "
"<python-interface>` one.  It avoids a number of common traps for measuring "
"execution times. See also Tim Peters' introduction to the \"Algorithms\" "
"chapter in the second edition of *Python Cookbook*, published by O'Reilly."
msgstr ""

#: ../../library/timeit.rst:23
msgid "Basic Examples"
msgstr ""

#: ../../library/timeit.rst:25
msgid ""
"The following example shows how the :ref:`timeit-command-line-interface` can"
" be used to compare three different expressions:"
msgstr ""

#: ../../library/timeit.rst:37
msgid "This can be achieved from the :ref:`python-interface` with::"
msgstr ""

#: ../../library/timeit.rst:47
msgid "A callable can also be passed from the :ref:`python-interface`::"
msgstr ""

#: ../../library/timeit.rst:52
msgid ""
"Note however that :func:`.timeit` will automatically determine the number of"
" repetitions only when the command-line interface is used.  In the "
":ref:`timeit-examples` section you can find more advanced examples."
msgstr ""

#: ../../library/timeit.rst:60
msgid "Python Interface"
msgstr ""

#: ../../library/timeit.rst:62
msgid "The module defines three convenience functions and a public class:"
msgstr ""

#: ../../library/timeit.rst:67
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.timeit` method with *number* "
"executions. The optional *globals* argument specifies a namespace in which "
"to execute the code."
msgstr ""

#: ../../library/timeit.rst:72 ../../library/timeit.rst:83
#: ../../library/timeit.rst:122
msgid "The optional *globals* parameter was added."
msgstr ""

#: ../../library/timeit.rst:78
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.repeat` method with the given *repeat* "
"count and *number* executions.  The optional *globals* argument specifies a "
"namespace in which to execute the code."
msgstr ""

#: ../../library/timeit.rst:86 ../../library/timeit.rst:183
msgid "Default value of *repeat* changed from 3 to 5."
msgstr ""

#: ../../library/timeit.rst:92
msgid ""
"The default timer, which is always time.perf_counter(), returns float "
"seconds. An alternative, time.perf_counter_ns, returns integer nanoseconds."
msgstr ""

#: ../../library/timeit.rst:95
msgid ":func:`time.perf_counter` is now the default timer."
msgstr ""

#: ../../library/timeit.rst:101
msgid "Class for timing execution speed of small code snippets."
msgstr ""

#: ../../library/timeit.rst:103
msgid ""
"The constructor takes a statement to be timed, an additional statement used "
"for setup, and a timer function.  Both statements default to ``'pass'``; the"
" timer function is platform-dependent (see the module doc string). *stmt* "
"and *setup* may also contain multiple statements separated by ``;`` or "
"newlines, as long as they don't contain multi-line string literals.  The "
"statement will by default be executed within timeit's namespace; this "
"behavior can be controlled by passing a namespace to *globals*."
msgstr ""

#: ../../library/timeit.rst:111
msgid ""
"To measure the execution time of the first statement, use the "
":meth:`.timeit` method.  The :meth:`.repeat` and :meth:`.autorange` methods "
"are convenience methods to call :meth:`.timeit` multiple times."
msgstr ""

#: ../../library/timeit.rst:115
msgid ""
"The execution time of *setup* is excluded from the overall timed execution "
"run."
msgstr ""

#: ../../library/timeit.rst:117
msgid ""
"The *stmt* and *setup* parameters can also take objects that are callable "
"without arguments.  This will embed calls to them in a timer function that "
"will then be executed by :meth:`.timeit`.  Note that the timing overhead is "
"a little larger in this case because of the extra function calls."
msgstr ""

#: ../../library/timeit.rst:127
msgid ""
"Time *number* executions of the main statement.  This executes the setup "
"statement once, and then returns the time it takes to execute the main "
"statement a number of times.  The default timer returns seconds as a float. "
"The argument is the number of times through the loop, defaulting to one "
"million.  The main statement, the setup statement and the timer function to "
"be used are passed to the constructor."
msgstr ""

#: ../../library/timeit.rst:136
msgid ""
"By default, :meth:`.timeit` temporarily turns off :term:`garbage collection`"
" during the timing.  The advantage of this approach is that it makes "
"independent timings more comparable.  The disadvantage is that GC may be an "
"important component of the performance of the function being measured.  If "
"so, GC can be re-enabled as the first statement in the *setup* string.  For "
"example::"
msgstr ""

#: ../../library/timeit.rst:148
msgid "Automatically determine how many times to call :meth:`.timeit`."
msgstr ""

#: ../../library/timeit.rst:150
msgid ""
"This is a convenience function that calls :meth:`.timeit` repeatedly so that"
" the total time >= 0.2 second, returning the eventual (number of loops, time"
" taken for that number of loops). It calls :meth:`.timeit` with increasing "
"numbers from the sequence 1, 2, 5, 10, 20, 50, ... until the time taken is "
"at least 0.2 seconds."
msgstr ""

#: ../../library/timeit.rst:156
msgid ""
"If *callback* is given and is not ``None``, it will be called after each "
"trial with two arguments: ``callback(number, time_taken)``."
msgstr ""

#: ../../library/timeit.rst:164
msgid "Call :meth:`.timeit` a few times."
msgstr ""

#: ../../library/timeit.rst:166
msgid ""
"This is a convenience function that calls the :meth:`.timeit` repeatedly, "
"returning a list of results.  The first argument specifies how many times to"
" call :meth:`.timeit`.  The second argument specifies the *number* argument "
"for :meth:`.timeit`."
msgstr ""

#: ../../library/timeit.rst:173
msgid ""
"It's tempting to calculate mean and standard deviation from the result "
"vector and report these.  However, this is not very useful. In a typical "
"case, the lowest value gives a lower bound for how fast your machine can run"
" the given code snippet; higher values in the result vector are typically "
"not caused by variability in Python's speed, but by other processes "
"interfering with your timing accuracy. So the :func:`min` of the result is "
"probably the only number you should be interested in.  After that, you "
"should look at the entire vector and apply common sense rather than "
"statistics."
msgstr ""

#: ../../library/timeit.rst:189
msgid "Helper to print a traceback from the timed code."
msgstr ""

#: ../../library/timeit.rst:191
msgid "Typical use::"
msgstr ""

#: ../../library/timeit.rst:199
msgid ""
"The advantage over the standard traceback is that source lines in the "
"compiled template will be displayed.  The optional *file* argument directs "
"where the traceback is sent; it defaults to :data:`sys.stderr`."
msgstr ""

#: ../../library/timeit.rst:207
msgid "Command-Line Interface"
msgstr ""

#: ../../library/timeit.rst:209
msgid ""
"When called as a program from the command line, the following form is used::"
msgstr ""

#: ../../library/timeit.rst:213
msgid "Where the following options are understood:"
msgstr ""

#: ../../library/timeit.rst:219
msgid "how many times to execute 'statement'"
msgstr ""

#: ../../library/timeit.rst:223
msgid "how many times to repeat the timer (default 5)"
msgstr ""

#: ../../library/timeit.rst:227
msgid "statement to be executed once initially (default ``pass``)"
msgstr ""

#: ../../library/timeit.rst:231
msgid ""
"measure process time, not wallclock time, using :func:`time.process_time` "
"instead of :func:`time.perf_counter`, which is the default"
msgstr ""

#: ../../library/timeit.rst:238
msgid ""
"specify a time unit for timer output; can select ``nsec``, ``usec``, "
"``msec``, or ``sec``"
msgstr ""

#: ../../library/timeit.rst:244
msgid "print raw timing results; repeat for more digits precision"
msgstr ""

#: ../../library/timeit.rst:248
msgid "print a short usage message and exit"
msgstr ""

#: ../../library/timeit.rst:250
msgid ""
"A multi-line statement may be given by specifying each line as a separate "
"statement argument; indented lines are possible by enclosing an argument in "
"quotes and using leading spaces.  Multiple :option:`-s` options are treated "
"similarly."
msgstr ""

#: ../../library/timeit.rst:255
msgid ""
"If :option:`-n` is not given, a suitable number of loops is calculated by "
"trying increasing numbers from the sequence 1, 2, 5, 10, 20, 50, ... until "
"the total time is at least 0.2 seconds."
msgstr ""

#: ../../library/timeit.rst:259
msgid ""
":func:`default_timer` measurements can be affected by other programs running"
" on the same machine, so the best thing to do when accurate timing is "
"necessary is to repeat the timing a few times and use the best time.  The "
":option:`-r` option is good for this; the default of 5 repetitions is "
"probably enough in most cases.  You can use :func:`time.process_time` to "
"measure CPU time."
msgstr ""

#: ../../library/timeit.rst:267
msgid ""
"There is a certain baseline overhead associated with executing a pass "
"statement. The code here doesn't try to hide it, but you should be aware of "
"it.  The baseline overhead can be measured by invoking the program without "
"arguments, and it might differ between Python versions."
msgstr ""

#: ../../library/timeit.rst:276
msgid "Examples"
msgstr ""

#: ../../library/timeit.rst:278
msgid ""
"It is possible to provide a setup statement that is executed only once at "
"the beginning:"
msgstr ""

#: ../../library/timeit.rst:287
msgid ""
"In the output, there are three fields. The loop count, which tells you how "
"many times the statement body was run per timing loop repetition. The "
"repetition count ('best of 5') which tells you how many times the timing "
"loop was repeated, and finally the time the statement body took on average "
"within the best repetition of the timing loop. That is, the time the fastest"
" repetition took divided by the loop count."
msgstr ""

#: ../../library/timeit.rst:302
msgid "The same can be done using the :class:`Timer` class and its methods::"
msgstr ""

#: ../../library/timeit.rst:312
msgid ""
"The following examples show how to time expressions that contain multiple "
"lines. Here we compare the cost of using :func:`hasattr` vs. "
":keyword:`try`/:keyword:`except` to test for missing and present object "
"attributes:"
msgstr ""

#: ../../library/timeit.rst:358
msgid ""
"To give the :mod:`timeit` module access to functions you define, you can "
"pass a *setup* parameter which contains an import statement::"
msgstr ""

#: ../../library/timeit.rst:369
msgid ""
"Another option is to pass :func:`globals` to the  *globals* parameter, which"
" will cause the code to be executed within your current global namespace.  "
"This can be more convenient than individually specifying imports::"
msgstr ""

#: ../../library/timeit.rst:9
msgid "Benchmarking"
msgstr ""

#: ../../library/timeit.rst:9
msgid "Performance"
msgstr ""
