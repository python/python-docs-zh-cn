# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/bdb.rst:2
msgid ":mod:`bdb` --- Debugger framework"
msgstr ""

#: ../../library/bdb.rst:7
msgid "**Source code:** :source:`Lib/bdb.py`"
msgstr ""

#: ../../library/bdb.rst:11
msgid ""
"The :mod:`bdb` module handles basic debugger functions, like setting "
"breakpoints or managing execution via the debugger."
msgstr ""

#: ../../library/bdb.rst:14
msgid "The following exception is defined:"
msgstr ""

#: ../../library/bdb.rst:18
msgid "Exception raised by the :class:`Bdb` class for quitting the debugger."
msgstr ""

#: ../../library/bdb.rst:21
msgid "The :mod:`bdb` module also defines two classes:"
msgstr ""

#: ../../library/bdb.rst:25
msgid ""
"This class implements temporary breakpoints, ignore counts, disabling and "
"(re-)enabling, and conditionals."
msgstr ""

#: ../../library/bdb.rst:28
msgid ""
"Breakpoints are indexed by number through a list called :attr:`bpbynumber` "
"and by ``(file, line)`` pairs through :attr:`bplist`.  The former points to "
"a single instance of class :class:`Breakpoint`.  The latter points to a list"
" of such instances since there may be more than one breakpoint per line."
msgstr ""

#: ../../library/bdb.rst:33
msgid ""
"When creating a breakpoint, its associated filename should be in canonical "
"form.  If a *funcname* is defined, a breakpoint hit will be counted when the"
" first line of that function is executed.  A conditional breakpoint always "
"counts a hit."
msgstr ""

#: ../../library/bdb.rst:38
msgid ":class:`Breakpoint` instances have the following methods:"
msgstr ""

#: ../../library/bdb.rst:42
msgid ""
"Delete the breakpoint from the list associated to a file/line.  If it is the"
" last breakpoint in that position, it also deletes the entry for the "
"file/line."
msgstr ""

#: ../../library/bdb.rst:49
msgid "Mark the breakpoint as enabled."
msgstr ""

#: ../../library/bdb.rst:54
msgid "Mark the breakpoint as disabled."
msgstr ""

#: ../../library/bdb.rst:59
msgid ""
"Return a string with all the information about the breakpoint, nicely "
"formatted:"
msgstr ""

#: ../../library/bdb.rst:62
msgid "The breakpoint number."
msgstr ""

#: ../../library/bdb.rst:63
msgid "If it is temporary or not."
msgstr ""

#: ../../library/bdb.rst:64
msgid "Its file,line position."
msgstr ""

#: ../../library/bdb.rst:65
msgid "The condition that causes a break."
msgstr ""

#: ../../library/bdb.rst:66
msgid "If it must be ignored the next N times."
msgstr ""

#: ../../library/bdb.rst:67
msgid "The breakpoint hit count."
msgstr ""

#: ../../library/bdb.rst:73
msgid ""
"Print the output of :meth:`bpformat` to the file *out*, or if it is "
"``None``, to standard output."
msgstr ""

#: ../../library/bdb.rst:79
msgid "The :class:`Bdb` class acts as a generic Python debugger base class."
msgstr ""

#: ../../library/bdb.rst:81
msgid ""
"This class takes care of the details of the trace facility; a derived class "
"should implement user interaction.  The standard debugger class "
"(:class:`pdb.Pdb`) is an example."
msgstr ""

#: ../../library/bdb.rst:85
msgid ""
"The *skip* argument, if given, must be an iterable of glob-style module name"
" patterns.  The debugger will not step into frames that originate in a "
"module that matches one of these patterns. Whether a frame is considered to "
"originate in a certain module is determined by the ``__name__`` in the frame"
" globals."
msgstr ""

#: ../../library/bdb.rst:91
msgid "The *skip* argument."
msgstr ""

#: ../../library/bdb.rst:94
msgid ""
"The following methods of :class:`Bdb` normally don't need to be overridden."
msgstr ""

#: ../../library/bdb.rst:98
msgid ""
"Auxiliary method for getting a filename in a canonical form, that is, as a "
"case-normalized (on case-insensitive filesystems) absolute path, stripped of"
" surrounding angle brackets."
msgstr ""

#: ../../library/bdb.rst:104
msgid ""
"Set the :attr:`botframe`, :attr:`stopframe`, :attr:`returnframe` and "
":attr:`quitting` attributes with values ready to start debugging."
msgstr ""

#: ../../library/bdb.rst:109
msgid ""
"This function is installed as the trace function of debugged frames.  Its "
"return value is the new trace function (in most cases, that is, itself)."
msgstr ""

#: ../../library/bdb.rst:112
msgid ""
"The default implementation decides how to dispatch a frame, depending on the"
" type of event (passed as a string) that is about to be executed. *event* "
"can be one of the following:"
msgstr ""

#: ../../library/bdb.rst:116
msgid "``\"line\"``: A new line of code is going to be executed."
msgstr ""

#: ../../library/bdb.rst:117
msgid ""
"``\"call\"``: A function is about to be called, or another code block "
"entered."
msgstr ""

#: ../../library/bdb.rst:119
msgid "``\"return\"``: A function or other code block is about to return."
msgstr ""

#: ../../library/bdb.rst:120
msgid "``\"exception\"``: An exception has occurred."
msgstr ""

#: ../../library/bdb.rst:121
msgid "``\"c_call\"``: A C function is about to be called."
msgstr ""

#: ../../library/bdb.rst:122
msgid "``\"c_return\"``: A C function has returned."
msgstr ""

#: ../../library/bdb.rst:123
msgid "``\"c_exception\"``: A C function has raised an exception."
msgstr ""

#: ../../library/bdb.rst:125
msgid ""
"For the Python events, specialized functions (see below) are called.  For "
"the C events, no action is taken."
msgstr ""

#: ../../library/bdb.rst:128
msgid "The *arg* parameter depends on the previous event."
msgstr ""

#: ../../library/bdb.rst:130
msgid ""
"See the documentation for :func:`sys.settrace` for more information on the "
"trace function.  For more information on code and frame objects, refer to "
":ref:`types`."
msgstr ""

#: ../../library/bdb.rst:136
msgid ""
"If the debugger should stop on the current line, invoke the "
":meth:`user_line` method (which should be overridden in subclasses). Raise a"
" :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set (which can"
" be set from :meth:`user_line`).  Return a reference to the "
":meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:144
msgid ""
"If the debugger should stop on this function call, invoke the "
":meth:`user_call` method (which should be overridden in subclasses). Raise a"
" :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set (which can"
" be set from :meth:`user_call`).  Return a reference to the "
":meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:152
msgid ""
"If the debugger should stop on this function return, invoke the "
":meth:`user_return` method (which should be overridden in subclasses). Raise"
" a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set (which "
"can be set from :meth:`user_return`).  Return a reference to the "
":meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:160
msgid ""
"If the debugger should stop at this exception, invokes the "
":meth:`user_exception` method (which should be overridden in subclasses). "
"Raise a :exc:`BdbQuit` exception if the :attr:`Bdb.quitting` flag is set "
"(which can be set from :meth:`user_exception`).  Return a reference to the "
":meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:166
msgid ""
"Normally derived classes don't override the following methods, but they may "
"if they want to redefine the definition of stopping and breakpoints."
msgstr ""

#: ../../library/bdb.rst:171
msgid ""
"This method checks if the *frame* is somewhere below :attr:`botframe` in the"
" call stack.  :attr:`botframe` is the frame in which debugging started."
msgstr ""

#: ../../library/bdb.rst:176
msgid ""
"This method checks if there is a breakpoint in the filename and line "
"belonging to *frame* or, at least, in the current function.  If the "
"breakpoint is a temporary one, this method deletes it."
msgstr ""

#: ../../library/bdb.rst:182
msgid ""
"This method checks if there is a breakpoint in the filename of the current "
"frame."
msgstr ""

#: ../../library/bdb.rst:185
msgid ""
"Derived classes should override these methods to gain control over debugger "
"operation."
msgstr ""

#: ../../library/bdb.rst:190
msgid ""
"This method is called from :meth:`dispatch_call` when there is the "
"possibility that a break might be necessary anywhere inside the called "
"function."
msgstr ""

#: ../../library/bdb.rst:196
msgid ""
"This method is called from :meth:`dispatch_line` when either "
":meth:`stop_here` or :meth:`break_here` yields ``True``."
msgstr ""

#: ../../library/bdb.rst:201
msgid ""
"This method is called from :meth:`dispatch_return` when :meth:`stop_here` "
"yields ``True``."
msgstr ""

#: ../../library/bdb.rst:206
msgid ""
"This method is called from :meth:`dispatch_exception` when :meth:`stop_here`"
" yields ``True``."
msgstr ""

#: ../../library/bdb.rst:211
msgid "Handle how a breakpoint must be removed when it is a temporary one."
msgstr ""

#: ../../library/bdb.rst:213
msgid "This method must be implemented by derived classes."
msgstr ""

#: ../../library/bdb.rst:216
msgid ""
"Derived classes and clients can call the following methods to affect the "
"stepping state."
msgstr ""

#: ../../library/bdb.rst:221
msgid "Stop after one line of code."
msgstr ""

#: ../../library/bdb.rst:225
msgid "Stop on the next line in or below the given frame."
msgstr ""

#: ../../library/bdb.rst:229
msgid "Stop when returning from the given frame."
msgstr ""

#: ../../library/bdb.rst:233
msgid ""
"Stop when the line with the line no greater than the current one is reached "
"or when returning from current frame."
msgstr ""

#: ../../library/bdb.rst:238
msgid ""
"Start debugging from *frame*.  If *frame* is not specified, debugging starts"
" from caller's frame."
msgstr ""

#: ../../library/bdb.rst:243
msgid ""
"Stop only at breakpoints or when finished.  If there are no breakpoints, set"
" the system trace function to ``None``."
msgstr ""

#: ../../library/bdb.rst:248
msgid ""
"Set the :attr:`quitting` attribute to ``True``.  This raises :exc:`BdbQuit` "
"in the next call to one of the :meth:`dispatch_\\*` methods."
msgstr ""

#: ../../library/bdb.rst:252
msgid ""
"Derived classes and clients can call the following methods to manipulate "
"breakpoints.  These methods return a string containing an error message if "
"something went wrong, or ``None`` if all is well."
msgstr ""

#: ../../library/bdb.rst:258
msgid ""
"Set a new breakpoint.  If the *lineno* line doesn't exist for the *filename*"
" passed as argument, return an error message.  The *filename* should be in "
"canonical form, as described in the :meth:`canonic` method."
msgstr ""

#: ../../library/bdb.rst:264
msgid ""
"Delete the breakpoints in *filename* and *lineno*.  If none were set, an "
"error message is returned."
msgstr ""

#: ../../library/bdb.rst:269
msgid ""
"Delete the breakpoint which has the index *arg* in the "
":attr:`Breakpoint.bpbynumber`.  If *arg* is not numeric or out of range, "
"return an error message."
msgstr ""

#: ../../library/bdb.rst:275
msgid ""
"Delete all breakpoints in *filename*.  If none were set, an error message is"
" returned."
msgstr ""

#: ../../library/bdb.rst:280
msgid "Delete all existing breakpoints."
msgstr ""

#: ../../library/bdb.rst:284
msgid ""
"Return a breakpoint specified by the given number.  If *arg* is a string, it"
" will be converted to a number.  If *arg* is a non-numeric string, if the "
"given breakpoint never existed or has been deleted, a :exc:`ValueError` is "
"raised."
msgstr ""

#: ../../library/bdb.rst:293
msgid "Check if there is a breakpoint for *lineno* of *filename*."
msgstr ""

#: ../../library/bdb.rst:297
msgid ""
"Return all breakpoints for *lineno* in *filename*, or an empty list if none "
"are set."
msgstr ""

#: ../../library/bdb.rst:302
msgid ""
"Return all breakpoints in *filename*, or an empty list if none are set."
msgstr ""

#: ../../library/bdb.rst:306
msgid "Return all breakpoints that are set."
msgstr ""

#: ../../library/bdb.rst:309
msgid ""
"Derived classes and clients can call the following methods to get a data "
"structure representing a stack trace."
msgstr ""

#: ../../library/bdb.rst:314
msgid ""
"Get a list of records for a frame and all higher (calling) and lower frames,"
" and the size of the higher part."
msgstr ""

#: ../../library/bdb.rst:319
msgid ""
"Return a string with information about a stack entry, identified by a "
"``(frame, lineno)`` tuple:"
msgstr ""

#: ../../library/bdb.rst:322
msgid "The canonical form of the filename which contains the frame."
msgstr ""

#: ../../library/bdb.rst:323
msgid "The function name, or ``\"<lambda>\"``."
msgstr ""

#: ../../library/bdb.rst:324
msgid "The input arguments."
msgstr ""

#: ../../library/bdb.rst:325
msgid "The return value."
msgstr ""

#: ../../library/bdb.rst:326
msgid "The line of code (if it exists)."
msgstr ""

#: ../../library/bdb.rst:329
msgid ""
"The following two methods can be called by clients to use a debugger to "
"debug a :term:`statement`, given as a string."
msgstr ""

#: ../../library/bdb.rst:334
msgid ""
"Debug a statement executed via the :func:`exec` function.  *globals* "
"defaults to :attr:`__main__.__dict__`, *locals* defaults to *globals*."
msgstr ""

#: ../../library/bdb.rst:339
msgid ""
"Debug an expression executed via the :func:`eval` function.  *globals* and "
"*locals* have the same meaning as in :meth:`run`."
msgstr ""

#: ../../library/bdb.rst:344
msgid "For backwards compatibility.  Calls the :meth:`run` method."
msgstr ""

#: ../../library/bdb.rst:348
msgid "Debug a single function call, and return its result."
msgstr ""

#: ../../library/bdb.rst:351
msgid "Finally, the module defines the following functions:"
msgstr ""

#: ../../library/bdb.rst:355
msgid ""
"Check whether we should break here, depending on the way the breakpoint *b* "
"was set."
msgstr ""

#: ../../library/bdb.rst:358
msgid ""
"If it was set via line number, it checks if ``b.line`` is the same as the "
"one in the frame also passed as argument.  If the breakpoint was set via "
"function name, we have to check we are in the right frame (the right "
"function) and if we are in its first executable line."
msgstr ""

#: ../../library/bdb.rst:365
msgid ""
"Determine if there is an effective (active) breakpoint at this line of code."
" Return a tuple of the breakpoint and a boolean that indicates if it is ok "
"to delete a temporary breakpoint.  Return ``(None, None)`` if there is no "
"matching breakpoint."
msgstr ""

#: ../../library/bdb.rst:372
msgid "Start debugging with a :class:`Bdb` instance from caller's frame."
msgstr ""
