# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/bdb.rst:2
msgid ":mod:`bdb` --- Debugger framework"
msgstr ""

#: ../../library/bdb.rst:7
msgid "**Source code:** :source:`Lib/bdb.py`"
msgstr ""

#: ../../library/bdb.rst:11
msgid ""
"The :mod:`bdb` module handles basic debugger functions, like setting "
"breakpoints or managing execution via the debugger."
msgstr ""

#: ../../library/bdb.rst:14
msgid "The following exception is defined:"
msgstr ""

#: ../../library/bdb.rst:18
msgid "Exception raised by the :class:`Bdb` class for quitting the debugger."
msgstr ""

#: ../../library/bdb.rst:21
msgid "The :mod:`bdb` module also defines two classes:"
msgstr ""

#: ../../library/bdb.rst:25
msgid ""
"This class implements temporary breakpoints, ignore counts, disabling and "
"(re-)enabling, and conditionals."
msgstr ""

#: ../../library/bdb.rst:28
msgid ""
"Breakpoints are indexed by number through a list called :attr:`bpbynumber` "
"and by ``(file, line)`` pairs through :attr:`bplist`.  The former points to "
"a single instance of class :class:`Breakpoint`.  The latter points to a list"
" of such instances since there may be more than one breakpoint per line."
msgstr ""

#: ../../library/bdb.rst:33
msgid ""
"When creating a breakpoint, its associated :attr:`file name <file>` should "
"be in canonical form.  If a :attr:`funcname` is defined, a breakpoint "
":attr:`hit <hits>` will be counted when the first line of that function is "
"executed.  A :attr:`conditional <cond>` breakpoint always counts a "
":attr:`hit <hits>`."
msgstr ""

#: ../../library/bdb.rst:39
msgid ":class:`Breakpoint` instances have the following methods:"
msgstr ""

#: ../../library/bdb.rst:43
msgid ""
"Delete the breakpoint from the list associated to a file/line.  If it is the"
" last breakpoint in that position, it also deletes the entry for the "
"file/line."
msgstr ""

#: ../../library/bdb.rst:50
msgid "Mark the breakpoint as enabled."
msgstr ""

#: ../../library/bdb.rst:55
msgid "Mark the breakpoint as disabled."
msgstr ""

#: ../../library/bdb.rst:60
msgid ""
"Return a string with all the information about the breakpoint, nicely "
"formatted:"
msgstr ""

#: ../../library/bdb.rst:63
msgid "Breakpoint number."
msgstr ""

#: ../../library/bdb.rst:64
msgid "Temporary status (del or keep)."
msgstr ""

#: ../../library/bdb.rst:65
msgid "File/line position."
msgstr ""

#: ../../library/bdb.rst:66
msgid "Break condition."
msgstr ""

#: ../../library/bdb.rst:67
msgid "Number of times to ignore."
msgstr ""

#: ../../library/bdb.rst:68
msgid "Number of times hit."
msgstr ""

#: ../../library/bdb.rst:74
msgid ""
"Print the output of :meth:`bpformat` to the file *out*, or if it is "
"``None``, to standard output."
msgstr ""

#: ../../library/bdb.rst:77
msgid ":class:`Breakpoint` instances have the following attributes:"
msgstr ""

#: ../../library/bdb.rst:81
msgid "File name of the :class:`Breakpoint`."
msgstr ""

#: ../../library/bdb.rst:85
msgid "Line number of the :class:`Breakpoint` within :attr:`file`."
msgstr ""

#: ../../library/bdb.rst:89
msgid "True if a :class:`Breakpoint` at (file, line) is temporary."
msgstr ""

#: ../../library/bdb.rst:93
msgid "Condition for evaluating a :class:`Breakpoint` at (file, line)."
msgstr ""

#: ../../library/bdb.rst:97
msgid ""
"Function name that defines whether a :class:`Breakpoint` is hit upon "
"entering the function."
msgstr ""

#: ../../library/bdb.rst:102
msgid "True if :class:`Breakpoint` is enabled."
msgstr ""

#: ../../library/bdb.rst:106
msgid "Numeric index for a single instance of a :class:`Breakpoint`."
msgstr ""

#: ../../library/bdb.rst:110
msgid ""
"Dictionary of :class:`Breakpoint` instances indexed by (:attr:`file`, "
":attr:`line`) tuples."
msgstr ""

#: ../../library/bdb.rst:115
msgid "Number of times to ignore a :class:`Breakpoint`."
msgstr ""

#: ../../library/bdb.rst:119
msgid "Count of the number of times a :class:`Breakpoint` has been hit."
msgstr ""

#: ../../library/bdb.rst:123
msgid "The :class:`Bdb` class acts as a generic Python debugger base class."
msgstr ""

#: ../../library/bdb.rst:125
msgid ""
"This class takes care of the details of the trace facility; a derived class "
"should implement user interaction.  The standard debugger class "
"(:class:`pdb.Pdb`) is an example."
msgstr ""

#: ../../library/bdb.rst:129
msgid ""
"The *skip* argument, if given, must be an iterable of glob-style module name"
" patterns.  The debugger will not step into frames that originate in a "
"module that matches one of these patterns. Whether a frame is considered to "
"originate in a certain module is determined by the ``__name__`` in the frame"
" globals."
msgstr ""

#: ../../library/bdb.rst:135
msgid "Added the *skip* parameter."
msgstr ""

#: ../../library/bdb.rst:138
msgid ""
"The following methods of :class:`Bdb` normally don't need to be overridden."
msgstr ""

#: ../../library/bdb.rst:142
msgid "Return canonical form of *filename*."
msgstr ""

#: ../../library/bdb.rst:144
msgid ""
"For real file names, the canonical form is an operating-system-dependent, "
":func:`case-normalized <os.path.normcase>` :func:`absolute path "
"<os.path.abspath>`. A *filename* with angle brackets, such as "
"``\"<stdin>\"`` generated in interactive mode, is returned unchanged."
msgstr ""

#: ../../library/bdb.rst:151
msgid ""
"Set the :attr:`!botframe`, :attr:`!stopframe`, :attr:`!returnframe` and "
":attr:`quitting <Bdb.set_quit>` attributes with values ready to start "
"debugging."
msgstr ""

#: ../../library/bdb.rst:156
msgid ""
"This function is installed as the trace function of debugged frames.  Its "
"return value is the new trace function (in most cases, that is, itself)."
msgstr ""

#: ../../library/bdb.rst:159
msgid ""
"The default implementation decides how to dispatch a frame, depending on the"
" type of event (passed as a string) that is about to be executed. *event* "
"can be one of the following:"
msgstr ""

#: ../../library/bdb.rst:163
msgid "``\"line\"``: A new line of code is going to be executed."
msgstr ""

#: ../../library/bdb.rst:164
msgid ""
"``\"call\"``: A function is about to be called, or another code block "
"entered."
msgstr ""

#: ../../library/bdb.rst:166
msgid "``\"return\"``: A function or other code block is about to return."
msgstr ""

#: ../../library/bdb.rst:167
msgid "``\"exception\"``: An exception has occurred."
msgstr ""

#: ../../library/bdb.rst:168
msgid "``\"c_call\"``: A C function is about to be called."
msgstr ""

#: ../../library/bdb.rst:169
msgid "``\"c_return\"``: A C function has returned."
msgstr ""

#: ../../library/bdb.rst:170
msgid "``\"c_exception\"``: A C function has raised an exception."
msgstr ""

#: ../../library/bdb.rst:172
msgid ""
"For the Python events, specialized functions (see below) are called.  For "
"the C events, no action is taken."
msgstr ""

#: ../../library/bdb.rst:175
msgid "The *arg* parameter depends on the previous event."
msgstr ""

#: ../../library/bdb.rst:177
msgid ""
"See the documentation for :func:`sys.settrace` for more information on the "
"trace function.  For more information on code and frame objects, refer to "
":ref:`types`."
msgstr ""

#: ../../library/bdb.rst:183
msgid ""
"If the debugger should stop on the current line, invoke the "
":meth:`user_line` method (which should be overridden in subclasses). Raise a"
" :exc:`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is "
"set (which can be set from :meth:`user_line`).  Return a reference to the "
":meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:191
msgid ""
"If the debugger should stop on this function call, invoke the "
":meth:`user_call` method (which should be overridden in subclasses). Raise a"
" :exc:`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is "
"set (which can be set from :meth:`user_call`).  Return a reference to the "
":meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:199
msgid ""
"If the debugger should stop on this function return, invoke the "
":meth:`user_return` method (which should be overridden in subclasses). Raise"
" a :exc:`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is "
"set (which can be set from :meth:`user_return`).  Return a reference to the "
":meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

#: ../../library/bdb.rst:207
msgid ""
"If the debugger should stop at this exception, invokes the "
":meth:`user_exception` method (which should be overridden in subclasses). "
"Raise a :exc:`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` "
"flag is set (which can be set from :meth:`user_exception`).  Return a "
"reference to the :meth:`trace_dispatch` method for further tracing in that "
"scope."
msgstr ""

#: ../../library/bdb.rst:213
msgid ""
"Normally derived classes don't override the following methods, but they may "
"if they want to redefine the definition of stopping and breakpoints."
msgstr ""

#: ../../library/bdb.rst:218
msgid "Return True if *module_name* matches any skip pattern."
msgstr ""

#: ../../library/bdb.rst:222
msgid "Return True if *frame* is below the starting frame in the stack."
msgstr ""

#: ../../library/bdb.rst:226
msgid "Return True if there is an effective breakpoint for this line."
msgstr ""

#: ../../library/bdb.rst:228
msgid ""
"Check whether a line or function breakpoint exists and is in effect.  Delete"
" temporary breakpoints based on information from :func:`effective`."
msgstr ""

#: ../../library/bdb.rst:233
msgid "Return True if any breakpoint exists for *frame*'s filename."
msgstr ""

#: ../../library/bdb.rst:235
msgid ""
"Derived classes should override these methods to gain control over debugger "
"operation."
msgstr ""

#: ../../library/bdb.rst:240
msgid ""
"Called from :meth:`dispatch_call` if a break might stop inside the called "
"function."
msgstr ""

#: ../../library/bdb.rst:245
msgid ""
"Called from :meth:`dispatch_line` when either :meth:`stop_here` or "
":meth:`break_here` returns ``True``."
msgstr ""

#: ../../library/bdb.rst:250
msgid ""
"Called from :meth:`dispatch_return` when :meth:`stop_here` returns ``True``."
msgstr ""

#: ../../library/bdb.rst:254
msgid ""
"Called from :meth:`dispatch_exception` when :meth:`stop_here` returns "
"``True``."
msgstr ""

#: ../../library/bdb.rst:259
msgid "Handle how a breakpoint must be removed when it is a temporary one."
msgstr ""

#: ../../library/bdb.rst:261
msgid "This method must be implemented by derived classes."
msgstr ""

#: ../../library/bdb.rst:264
msgid ""
"Derived classes and clients can call the following methods to affect the "
"stepping state."
msgstr ""

#: ../../library/bdb.rst:269
msgid "Stop after one line of code."
msgstr ""

#: ../../library/bdb.rst:273
msgid "Stop on the next line in or below the given frame."
msgstr ""

#: ../../library/bdb.rst:277
msgid "Stop when returning from the given frame."
msgstr ""

#: ../../library/bdb.rst:281
msgid ""
"Stop when the line with the *lineno* greater than the current one is reached"
" or when returning from current frame."
msgstr ""

#: ../../library/bdb.rst:286
msgid ""
"Start debugging from *frame*.  If *frame* is not specified, debugging starts"
" from caller's frame."
msgstr ""

#: ../../library/bdb.rst:291
msgid ""
"Stop only at breakpoints or when finished.  If there are no breakpoints, set"
" the system trace function to ``None``."
msgstr ""

#: ../../library/bdb.rst:298
msgid ""
"Set the :attr:`!quitting` attribute to ``True``.  This raises :exc:`BdbQuit`"
" in the next call to one of the :meth:`!dispatch_\\*` methods."
msgstr ""

#: ../../library/bdb.rst:302
msgid ""
"Derived classes and clients can call the following methods to manipulate "
"breakpoints.  These methods return a string containing an error message if "
"something went wrong, or ``None`` if all is well."
msgstr ""

#: ../../library/bdb.rst:308
msgid ""
"Set a new breakpoint.  If the *lineno* line doesn't exist for the *filename*"
" passed as argument, return an error message.  The *filename* should be in "
"canonical form, as described in the :meth:`canonic` method."
msgstr ""

#: ../../library/bdb.rst:314
msgid ""
"Delete the breakpoints in *filename* and *lineno*.  If none were set, return"
" an error message."
msgstr ""

#: ../../library/bdb.rst:319
msgid ""
"Delete the breakpoint which has the index *arg* in the "
":attr:`Breakpoint.bpbynumber`.  If *arg* is not numeric or out of range, "
"return an error message."
msgstr ""

#: ../../library/bdb.rst:325
msgid ""
"Delete all breakpoints in *filename*.  If none were set, return an error "
"message."
msgstr ""

#: ../../library/bdb.rst:330
msgid ""
"Delete all existing breakpoints.  If none were set, return an error message."
msgstr ""

#: ../../library/bdb.rst:335
msgid ""
"Return a breakpoint specified by the given number.  If *arg* is a string, it"
" will be converted to a number.  If *arg* is a non-numeric string, if the "
"given breakpoint never existed or has been deleted, a :exc:`ValueError` is "
"raised."
msgstr ""

#: ../../library/bdb.rst:344
msgid "Return True if there is a breakpoint for *lineno* in *filename*."
msgstr ""

#: ../../library/bdb.rst:348
msgid ""
"Return all breakpoints for *lineno* in *filename*, or an empty list if none "
"are set."
msgstr ""

#: ../../library/bdb.rst:353
msgid ""
"Return all breakpoints in *filename*, or an empty list if none are set."
msgstr ""

#: ../../library/bdb.rst:357
msgid "Return all breakpoints that are set."
msgstr ""

#: ../../library/bdb.rst:360
msgid ""
"Derived classes and clients can call the following methods to get a data "
"structure representing a stack trace."
msgstr ""

#: ../../library/bdb.rst:365
msgid "Return a list of (frame, lineno) tuples in a stack trace, and a size."
msgstr ""

#: ../../library/bdb.rst:367
msgid ""
"The most recently called frame is last in the list. The size is the number "
"of frames below the frame where the debugger was invoked."
msgstr ""

#: ../../library/bdb.rst:372
msgid ""
"Return a string with information about a stack entry, which is a ``(frame, "
"lineno)`` tuple.  The return string contains:"
msgstr ""

#: ../../library/bdb.rst:375
msgid "The canonical filename which contains the frame."
msgstr ""

#: ../../library/bdb.rst:376
msgid "The function name or ``\"<lambda>\"``."
msgstr ""

#: ../../library/bdb.rst:377
msgid "The input arguments."
msgstr ""

#: ../../library/bdb.rst:378
msgid "The return value."
msgstr ""

#: ../../library/bdb.rst:379
msgid "The line of code (if it exists)."
msgstr ""

#: ../../library/bdb.rst:382
msgid ""
"The following two methods can be called by clients to use a debugger to "
"debug a :term:`statement`, given as a string."
msgstr ""

#: ../../library/bdb.rst:387
msgid ""
"Debug a statement executed via the :func:`exec` function.  *globals* "
"defaults to :attr:`!__main__.__dict__`, *locals* defaults to *globals*."
msgstr ""

#: ../../library/bdb.rst:392
msgid ""
"Debug an expression executed via the :func:`eval` function.  *globals* and "
"*locals* have the same meaning as in :meth:`run`."
msgstr ""

#: ../../library/bdb.rst:397
msgid "For backwards compatibility.  Calls the :meth:`run` method."
msgstr ""

#: ../../library/bdb.rst:401
msgid "Debug a single function call, and return its result."
msgstr ""

#: ../../library/bdb.rst:404
msgid "Finally, the module defines the following functions:"
msgstr ""

#: ../../library/bdb.rst:408
msgid ""
"Return True if we should break here, depending on the way the "
":class:`Breakpoint` *b* was set."
msgstr ""

#: ../../library/bdb.rst:411
msgid ""
"If it was set via line number, it checks if :attr:`b.line "
"<bdb.Breakpoint.line>` is the same as the one in *frame*. If the breakpoint "
"was set via :attr:`function name <bdb.Breakpoint.funcname>`, we have to "
"check we are in the right *frame* (the right function) and if we are on its "
"first executable line."
msgstr ""

#: ../../library/bdb.rst:420
msgid ""
"Return ``(active breakpoint, delete temporary flag)`` or ``(None, None)`` as"
" the breakpoint to act upon."
msgstr ""

#: ../../library/bdb.rst:423
msgid ""
"The *active breakpoint* is the first entry in :attr:`bplist "
"<bdb.Breakpoint.bplist>` for the (:attr:`file <bdb.Breakpoint.file>`, "
":attr:`line <bdb.Breakpoint.line>`) (which must exist) that is "
":attr:`enabled <bdb.Breakpoint.enabled>`, for which :func:`checkfuncname` is"
" True, and that has neither a False :attr:`condition <bdb.Breakpoint.cond>` "
"nor positive :attr:`ignore <bdb.Breakpoint.ignore>` count.  The *flag*, "
"meaning that a temporary breakpoint should be deleted, is False only when "
"the :attr:`cond <bdb.Breakpoint.cond>` cannot be evaluated (in which case, "
":attr:`ignore <bdb.Breakpoint.ignore>` count is ignored)."
msgstr ""

#: ../../library/bdb.rst:434
msgid "If no such entry exists, then (None, None) is returned."
msgstr ""

#: ../../library/bdb.rst:439
msgid "Start debugging with a :class:`Bdb` instance from caller's frame."
msgstr ""

#: ../../library/bdb.rst:296
msgid "quitting (bdb.Bdb attribute)"
msgstr ""
