# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:57+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/builtins.rst:2
msgid ":mod:`!builtins` --- Built-in objects"
msgstr ":mod:`!builtins` --- 内置对象"

#: ../../library/builtins.rst:9
msgid ""
"This module provides direct access to all 'built-in' identifiers of Python; "
"for example, ``builtins.open`` is the full name for the built-in function "
":func:`open`."
msgstr ""
"此模块提供了对 Python 的所有‘内置’标识符的直接访问；例如，``builtins.open`` 是内置函数 function "
":func:`open` 的完整名称。"

#: ../../library/builtins.rst:12
msgid ""
"This module is not normally accessed explicitly by most applications, but "
"can be useful in modules that provide objects with the same name as a built-"
"in value, but in which the built-in of that name is also needed.  For "
"example, in a module that wants to implement an :func:`open` function that "
"wraps the built-in :func:`open`, this module can be used directly::"
msgstr ""
"大多数应用程序通常不会显式访问此模块，但在提供与内置值同名的对象的模块中可能很有用，但其中还需要内置该名称。例如，在一个想要实现 "
":func:`open` 函数的模块中，它包装了内置的 :func:`open` ，这个模块可以直接使用::"

#: ../../library/builtins.rst:18
msgid ""
"import builtins\n"
"\n"
"def open(path):\n"
"    f = builtins.open(path, 'r')\n"
"    return UpperCaser(f)\n"
"\n"
"class UpperCaser:\n"
"    '''Wrapper around a file that converts output to uppercase.'''\n"
"\n"
"    def __init__(self, f):\n"
"        self._f = f\n"
"\n"
"    def read(self, count=-1):\n"
"        return self._f.read(count).upper()\n"
"\n"
"    # ..."
msgstr ""
"import builtins\n"
"\n"
"def open(path):\n"
"    f = builtins.open(path, 'r')\n"
"    return UpperCaser(f)\n"
"\n"
"class UpperCaser:\n"
"    '''文件的包装类，将读取的内容转换为大写输出'''\n"
"\n"
"    def __init__(self, f):\n"
"        self._f = f\n"
"\n"
"    def read(self, count=-1):\n"
"        return self._f.read(count).upper()\n"
"\n"
"    # .."

#: ../../library/builtins.rst:35
msgid ""
"As an implementation detail, most modules have the name ``__builtins__`` "
"made available as part of their globals.  The value of ``__builtins__`` is "
"normally either this module or the value of this module's "
":attr:`~object.__dict__` attribute. Since this is an implementation detail, "
"it may not be used by alternate implementations of Python."
msgstr ""
"作为一个实现细节，大多数模块都将名称 ``__builtins__`` 作为其全局变量的一部分提供。 ``__builtins__`` "
"的值通常是这个模块或者这个模块的值 :attr:`~object.__dict__` 属性。由于这是一个实现细节，因此 Python "
"的替代实现可能不会使用它。"

#: ../../library/builtins.rst:43
msgid ":ref:`built-in-consts`"
msgstr ":ref:`built-in-consts`"

#: ../../library/builtins.rst:44
msgid ":ref:`bltin-exceptions`"
msgstr ":ref:`bltin-exceptions`"

#: ../../library/builtins.rst:45
msgid ":ref:`built-in-funcs`"
msgstr ":ref:`built-in-funcs`"

#: ../../library/builtins.rst:46
msgid ":ref:`bltin-types`"
msgstr ":ref:`bltin-types`"
