# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.iterators.rst:2
msgid ":mod:`!email.iterators`: Iterators"
msgstr ":mod:`!email.iterators`: 迭代器"

#: ../../library/email.iterators.rst:7
msgid "**Source code:** :source:`Lib/email/iterators.py`"
msgstr "**源代码:** :source:`Lib/email/iterators.py`"

#: ../../library/email.iterators.rst:11
msgid ""
"Iterating over a message object tree is fairly easy with the "
":meth:`Message.walk <email.message.Message.walk>` method.  The "
":mod:`email.iterators` module provides some useful higher level iterations "
"over message object trees."
msgstr ""
"通过 :meth:`Message.walk <email.message.Message.walk>` 方法来迭代消息对象树是相当容易的。 "
":mod:`email.iterators` 模块提供了一些适用于消息对象树的高层级迭代器。"

#: ../../library/email.iterators.rst:19
msgid ""
"This iterates over all the payloads in all the subparts of *msg*, returning "
"the string payloads line-by-line.  It skips over all the subpart headers, "
"and it skips over any subpart with a payload that isn't a Python string.  "
"This is somewhat equivalent to reading the flat text representation of the "
"message from a file using :meth:`~io.TextIOBase.readline`, skipping over all"
" the intervening headers."
msgstr ""
"此函数会迭代 *msg* 的所有子部分中的所有载荷，逐行返回字符串载荷。 它会跳过所有子部分的标头，并且它也会跳过任何包含不为 Python "
"字符串的载荷的子部分。 这基本上等价于使用 :meth:`~io.TextIOBase.readline` "
"从一个文件读取消息的纯文本表示形式，并跳过所有中间的标头。"

#: ../../library/email.iterators.rst:26
msgid ""
"Optional *decode* is passed through to :meth:`Message.get_payload "
"<email.message.Message.get_payload>`."
msgstr ""
"可选的 *decode* 会被传递给 :meth:`Message.get_payload "
"<email.message.Message.get_payload>`。"

#: ../../library/email.iterators.rst:32
msgid ""
"This iterates over all the subparts of *msg*, returning only those subparts "
"that match the MIME type specified by *maintype* and *subtype*."
msgstr ""
"此函数会迭代 *msg* 的所有子部分，只返回其中与 *maintype* 和 *subtype* 所指定的 MIME 类型相匹配的子部分。"

#: ../../library/email.iterators.rst:35
msgid ""
"Note that *subtype* is optional; if omitted, then subpart MIME type matching"
" is done only with the main type.  *maintype* is optional too; it defaults "
"to :mimetype:`text`."
msgstr ""
"请注意 *subtype* 是可选项；如果省略，则仅使用主类型来进行子部分 MIME 类型的匹配。 *maintype* 也是可选项；它的默认值为 "
":mimetype:`text`。"

#: ../../library/email.iterators.rst:39
msgid ""
"Thus, by default :func:`typed_subpart_iterator` returns each subpart that "
"has a MIME type of :mimetype:`text/\\*`."
msgstr ""
"因此，在默认情况下 :func:`typed_subpart_iterator` 会返回每一个 MIME 类型为 "
":mimetype:`text/\\*` 的子部分。"

#: ../../library/email.iterators.rst:43
msgid ""
"The following function has been added as a useful debugging tool.  It should"
" *not* be considered part of the supported public interface for the package."
msgstr "增加了以下函数作为有用的调试工具。 它 *不应当* 被视为该包所支持的公共接口的组成部分。"

#: ../../library/email.iterators.rst:48
msgid ""
"Prints an indented representation of the content types of the message object"
" structure.  For example:"
msgstr "打印消息对象结构的内容类型的缩进表示形式。 例如:"

#: ../../library/email.iterators.rst:57
msgid ""
">>> msg = email.message_from_file(somefile)\n"
">>> _structure(msg)\n"
"multipart/mixed\n"
"    text/plain\n"
"    text/plain\n"
"    multipart/digest\n"
"        message/rfc822\n"
"            text/plain\n"
"        message/rfc822\n"
"            text/plain\n"
"        message/rfc822\n"
"            text/plain\n"
"        message/rfc822\n"
"            text/plain\n"
"        message/rfc822\n"
"            text/plain\n"
"    text/plain"
msgstr ""
">>> msg = email.message_from_file(somefile)\n"
">>> _structure(msg)\n"
"multipart/mixed\n"
"    text/plain\n"
"    text/plain\n"
"    multipart/digest\n"
"        message/rfc822\n"
"            text/plain\n"
"        message/rfc822\n"
"            text/plain\n"
"        message/rfc822\n"
"            text/plain\n"
"        message/rfc822\n"
"            text/plain\n"
"        message/rfc822\n"
"            text/plain\n"
"    text/plain"

#: ../../library/email.iterators.rst:81
msgid ""
"Optional *fp* is a file-like object to print the output to.  It must be "
"suitable for Python's :func:`print` function.  *level* is used internally. "
"*include_default*, if true, prints the default type as well."
msgstr ""
"可选项 *fp* 是一个作为打印输出目标的文件型对象。 它必须适用于 Python 的 :func:`print` 函数。 *level* "
"是供内部使用的。 *include_default* 如果为真值，则会同时打印默认类型。"
