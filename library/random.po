# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# nick <2330458484@qq.com>, 2021
# Xu Siyuan, 2022
# ProgramRipper, 2023
# Alpha Du <alphanow@gmail.com>, 2024
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 14:21+0000\n"
"PO-Revision-Date: 2021-06-28 01:12+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/random.rst:2
msgid ":mod:`!random` --- Generate pseudo-random numbers"
msgstr ":mod:`!random` --- 生成伪随机数"

#: ../../library/random.rst:7
msgid "**Source code:** :source:`Lib/random.py`"
msgstr "**源码：** :source:`Lib/random.py`"

#: ../../library/random.rst:11
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr "该模块实现了各种分布的伪随机数生成器。"

#: ../../library/random.rst:14
msgid ""
"For integers, there is uniform selection from a range. For sequences, there "
"is uniform selection of a random element, a function to generate a random "
"permutation of a list in-place, and a function for random sampling without "
"replacement."
msgstr "对于整数，从范围中有统一的选择。 对于序列，存在随机元素的统一选择、用于生成列表的随机排列的函数、以及用于随机抽样而无需替换的函数。"

#: ../../library/random.rst:19
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian),"
" lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr "在实数轴上，有计算均匀、正态（高斯）、对数正态、负指数、伽马和贝塔分布的函数。 为了生成角度分布，可以使用 von Mises 分布。"

#: ../../library/random.rst:23
msgid ""
"Almost all module functions depend on the basic function :func:`.random`, "
"which generates a random float uniformly in the half-open range ``0.0 <= X <"
" 1.0``. Python uses the Mersenne Twister as the core generator.  It produces"
" 53-bit precision floats and has a period of 2\\*\\*19937-1.  The underlying"
" implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""
"几乎所有模块函数都依赖于基本函数 :func:`.random`，它在左开右闭区间 ``0.0 <= X < 1.0`` 内均匀生成随机浮点数。 "
"Python 使用 Mersenne Twister 作为核心生成器。 它产生 53 位精度的浮点数并且周期为 2\\*\\*19937-1。 其在 C"
" 中的这个底层实现既快速又线程安全。 Mersenne Twister 是目前经过最广泛测试的随机数生成器之一。 "
"但是，因为是完全确定性的，它不适用于所有目的，并且完全不适用于加密目的。"

#: ../../library/random.rst:32
msgid ""
"The functions supplied by this module are actually bound methods of a hidden"
" instance of the :class:`random.Random` class.  You can instantiate your own"
" instances of :class:`Random` to get generators that don't share state."
msgstr ""
"这个模块提供的函数实际上是 :class:`random.Random` 类的隐藏实例的绑定方法。 你可以实例化自己的 :class:`Random` "
"类实例以获取不共享状态的生成器。"

#: ../../library/random.rst:36
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: see the documentation on that class "
"for more details."
msgstr "如果你想使用自己设计的不同的基本生成器那么也可以子类化 :class:`Random` 类：请参阅该类的文档了解详情。"

#: ../../library/random.rst:40
msgid ""
"The :mod:`random` module also provides the :class:`SystemRandom` class which"
" uses the system function :func:`os.urandom` to generate random numbers from"
" sources provided by the operating system."
msgstr ""
":mod:`random` 模块还提供 :class:`SystemRandom` 类，它使用系统函数 :func:`os.urandom` "
"从操作系统提供的源生成随机数。"

#: ../../library/random.rst:46
msgid ""
"The pseudo-random generators of this module should not be used for security "
"purposes.  For security or cryptographic uses, see the :mod:`secrets` "
"module."
msgstr "不应将此模块的伪随机生成器用于安全目的。 有关安全性或加密用途，请参阅 :mod:`secrets` 模块。"

#: ../../library/random.rst:52
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on"
" Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."
msgstr ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on"
" Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."

#: ../../library/random.rst:57
msgid ""
"`Complementary-Multiply-with-Carry recipe "
"<https://code.activestate.com/recipes/576707-long-period-random-number-"
"generator/>`_ for a compatible alternative random number generator with a "
"long period and comparatively simple update operations."
msgstr ""
"`Complementary-Multiply-with-Carry recipe "
"<https://code.activestate.com/recipes/576707-long-period-random-number-"
"generator/>`_ 用于兼容的替代性随机数发生器，具有长周期和相对简单的更新操作。"

#: ../../library/random.rst:63
msgid ""
"The global random number generator and instances of :class:`Random` are "
"thread-safe. However, in the free-threaded build, concurrent calls to the "
"global generator or to the same instance of :class:`Random` may encounter "
"contention and poor performance. Consider using separate instances of "
":class:`Random` per thread instead."
msgstr ""
"全局随机数发生器和 :class:`Random` 实例是线程安全的。 不过，在自由线程构建版中，对全局发生器或同一个 :class:`Random` "
"实例的并发调用可能导致竞争和糟糕的性能。 请考虑改用每线程单独的 :class:`Random` 实例。"

#: ../../library/random.rst:70
msgid "Bookkeeping functions"
msgstr "簿记功能"

#: ../../library/random.rst:74
msgid "Initialize the random number generator."
msgstr "初始化随机数生成器。"

#: ../../library/random.rst:76
msgid ""
"If *a* is omitted or ``None``, the current system time is used.  If "
"randomness sources are provided by the operating system, they are used "
"instead of the system time (see the :func:`os.urandom` function for details "
"on availability)."
msgstr ""
"如果 *a* 被省略或为 ``None`` ，则使用当前系统时间。 如果操作系统提供随机源，则使用它们而不是系统时间（有关可用性的详细信息，请参阅 "
":func:`os.urandom` 函数）。"

#: ../../library/random.rst:81
msgid "If *a* is an int, it is used directly."
msgstr "如果 *a* 是 int 类型，则直接使用。"

#: ../../library/random.rst:83
msgid ""
"With version 2 (the default), a :class:`str`, :class:`bytes`, or "
":class:`bytearray` object gets converted to an :class:`int` and all of its "
"bits are used."
msgstr ""
"对于版本2（默认的），:class:`str` 、 :class:`bytes` 或 :class:`bytearray` 对象转换为 "
":class:`int` 并使用它的所有位。"

#: ../../library/random.rst:86
msgid ""
"With version 1 (provided for reproducing random sequences from older "
"versions of Python), the algorithm for :class:`str` and :class:`bytes` "
"generates a narrower range of seeds."
msgstr ""
"对于版本1（用于从旧版本的Python再现随机序列），用于 :class:`str` 和 :class:`bytes` 的算法生成更窄的种子范围。"

#: ../../library/random.rst:90
msgid ""
"Moved to the version 2 scheme which uses all of the bits in a string seed."
msgstr "已移至版本2方案，该方案使用字符串种子中的所有位。"

#: ../../library/random.rst:93
msgid ""
"The *seed* must be one of the following types: ``None``, :class:`int`, "
":class:`float`, :class:`str`, :class:`bytes`, or :class:`bytearray`."
msgstr ""
"*seed* 必须是下列类型之一: ``None``, :class:`int`, :class:`float`, :class:`str`, "
":class:`bytes` 或 :class:`bytearray`。"

#: ../../library/random.rst:100
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr "返回捕获生成器当前内部状态的对象。 这个对象可以传递给 :func:`setstate` 来恢复状态。"

#: ../../library/random.rst:106
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it"
" was at the time :func:`getstate` was called."
msgstr ""
"*state* 应该是从之前调用 :func:`getstate` 获得的，并且 :func:`setstate` 将生成器的内部状态恢复到 "
":func:`getstate` 被调用时的状态。"

#: ../../library/random.rst:112
msgid "Functions for bytes"
msgstr "用于字节数据的函数"

#: ../../library/random.rst:116
msgid "Generate *n* random bytes."
msgstr "生成 *n* 个随机字节。"

#: ../../library/random.rst:118
msgid ""
"This method should not be used for generating security tokens. Use "
":func:`secrets.token_bytes` instead."
msgstr "此方法不可用于生成安全凭据。 那应当使用 :func:`secrets.token_bytes`。"

#: ../../library/random.rst:125
msgid "Functions for integers"
msgstr "整数用函数"

#: ../../library/random.rst:130
msgid "Return a randomly selected element from ``range(start, stop, step)``."
msgstr "返回从 ``range(start, stop, step)`` 随机选择的一个元素。"

#: ../../library/random.rst:132
msgid ""
"This is roughly equivalent to ``choice(range(start, stop, step))`` but "
"supports arbitrarily large ranges and is optimized for common cases."
msgstr "这大致等价于 ``choice(range(start, stop, step))`` 但是支持任意大的取值范围并针对常见场景进行了优化。"

#: ../../library/random.rst:135
msgid "The positional argument pattern matches the :func:`range` function."
msgstr "该位置参数的模式与 :func:`range` 函数相匹配。"

#: ../../library/random.rst:137
msgid ""
"Keyword arguments should not be used because they can be interpreted in "
"unexpected ways. For example ``randrange(start=100)`` is interpreted as "
"``randrange(0, 100, 1)``."
msgstr ""
"关键字参数不应被使用因为它们可能以预料之外的方式被解读。 例如 ``randrange(start=100)`` 会被解读为 "
"``randrange(0, 100, 1)``。"

#: ../../library/random.rst:141
msgid ""
":meth:`randrange` is more sophisticated about producing equally distributed "
"values.  Formerly it used a style like ``int(random()*n)`` which could "
"produce slightly uneven distributions."
msgstr ""
":meth:`randrange` 在生成均匀分布的值方面更为复杂。 以前它使用了像 ``int(random()*n)`` "
"这样的形式，它可以产生稍微不均匀的分布。"

#: ../../library/random.rst:146
msgid ""
"Automatic conversion of non-integer types is no longer supported. Calls such"
" as ``randrange(10.0)`` and ``randrange(Fraction(10, 1))`` now raise a "
":exc:`TypeError`."
msgstr ""
"不再支持非整数类型的自动转换。 ``randrange(10.0)`` 和 ``randrange(Fraction(10, 1))`` "
"之类的调用现在将会引发 :exc:`TypeError`。"

#: ../../library/random.rst:153
msgid ""
"Return a random integer *N* such that ``a <= N <= b``.  Alias for "
"``randrange(a, b+1)``."
msgstr "返回随机整数 *N* 满足 ``a <= N <= b``。相当于 ``randrange(a, b+1)``。"

#: ../../library/random.rst:158
msgid ""
"Returns a non-negative Python integer with *k* random bits. This method is "
"supplied with the Mersenne Twister generator and some other generators may "
"also provide it as an optional part of the API. When available, "
":meth:`getrandbits` enables :meth:`randrange` to handle arbitrarily large "
"ranges."
msgstr ""
"返回具有 *k* 个随机比特位的非负 Python 整数。 此方法随 Mersenne Twister 生成器一起提供，其他一些生成器也可能将其作为 "
"API 的可选部分提供。 在可能的情况下，:meth:`getrandbits` 会启用 :meth:`randrange` 来处理任意大的区间。"

#: ../../library/random.rst:164
msgid "This method now accepts zero for *k*."
msgstr "此方法现在接受零作为 *k* 的值。"

#: ../../library/random.rst:169
msgid "Functions for sequences"
msgstr "序列用函数"

#: ../../library/random.rst:173
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr "从非空序列 *seq* 返回一个随机元素。 如果 *seq* 为空，则引发 :exc:`IndexError`。"

#: ../../library/random.rst:178
msgid ""
"Return a *k* sized list of elements chosen from the *population* with "
"replacement. If the *population* is empty, raises :exc:`IndexError`."
msgstr ""
"从 *population* 中有重复地随机选取元素，返回大小为 *k* 的元素列表。 如果 *population* 为空，则引发 "
":exc:`IndexError`。"

#: ../../library/random.rst:181
msgid ""
"If a *weights* sequence is specified, selections are made according to the "
"relative weights.  Alternatively, if a *cum_weights* sequence is given, the "
"selections are made according to the cumulative weights (perhaps computed "
"using :func:`itertools.accumulate`).  For example, the relative weights "
"``[10, 5, 30, 5]`` are equivalent to the cumulative weights ``[10, 15, 45, "
"50]``.  Internally, the relative weights are converted to cumulative weights"
" before making selections, so supplying the cumulative weights saves work."
msgstr ""
"如果指定了 *weight* 序列，则根据相对权重进行选择。 或者，如果给出 *cum_weights* 序列，则根据累积权重（可能使用 "
":func:`itertools.accumulate` 计算）进行选择。 例如，相对权重 ``[10, 5, 30, "
"5]``相当于累积权重``[10, 15, 45, 50]``。 在内部，相对权重在进行选择之前会转换为累积权重，因此提供累积权重可以节省工作量。"

#: ../../library/random.rst:190
msgid ""
"If neither *weights* nor *cum_weights* are specified, selections are made "
"with equal probability.  If a weights sequence is supplied, it must be the "
"same length as the *population* sequence.  It is a :exc:`TypeError` to "
"specify both *weights* and *cum_weights*."
msgstr ""
"如果既未指定 *weight* 也未指定 *cum_weights* ，则以相等的概率进行选择。 如果提供了权重序列，则它必须与 "
"*population* 序列的长度相同。 一个 :exc:`TypeError` 指定了 *weights* 和 *cum_weights* 。"

#: ../../library/random.rst:195
msgid ""
"The *weights* or *cum_weights* can use any numeric type that interoperates "
"with the :class:`float` values returned by :func:`random` (that includes "
"integers, floats, and fractions but excludes decimals).  Weights are assumed"
" to be non-negative and finite.  A :exc:`ValueError` is raised if all "
"weights are zero."
msgstr ""
"*weights* 或 *cum_weights* 可使用 :func:`random` 所返回的能与 :class:`float` "
"值进行相互运算的任何数字类型（包括整数、浮点数、分数但不包括 decimal）。 权重值应当非负且为有限的数值。 如果所有的权重值均为零则会引发 "
":exc:`ValueError`。"

#: ../../library/random.rst:201
msgid ""
"For a given seed, the :func:`choices` function with equal weighting "
"typically produces a different sequence than repeated calls to "
":func:`choice`.  The algorithm used by :func:`choices` uses floating-point "
"arithmetic for internal consistency and speed.  The algorithm used by "
":func:`choice` defaults to integer arithmetic with repeated selections to "
"avoid small biases from round-off error."
msgstr ""
"对于给定的种子，具有相等加权的 :func:`choices` 函数通常产生与重复调用 :func:`choice` 不同的序列。 "
":func:`choices` 使用的算法使用浮点运算来实现内部一致性和速度。 :func:`choice`  "
"使用的算法默认为重复选择的整数运算，以避免因舍入误差引起的小偏差。"

#: ../../library/random.rst:210
msgid "Raises a :exc:`ValueError` if all weights are zero."
msgstr "如果所有权重均为负值则将引发 :exc:`ValueError`。"

#: ../../library/random.rst:216
msgid "Shuffle the sequence *x* in place."
msgstr "就地将序列 *x* 随机打乱位置。"

#: ../../library/random.rst:218
msgid ""
"To shuffle an immutable sequence and return a new shuffled list, use "
"``sample(x, k=len(x))`` instead."
msgstr "要改变一个不可变的序列并返回一个新的打乱列表，请使用 ``sample(x, k=len(x))``。"

#: ../../library/random.rst:221
msgid ""
"Note that even for small ``len(x)``, the total number of permutations of *x*"
" can quickly grow larger than the period of most random number generators. "
"This implies that most permutations of a long sequence can never be "
"generated.  For example, a sequence of length 2080 is the largest that can "
"fit within the period of the Mersenne Twister random number generator."
msgstr ""
"请注意，即使对于小的 ``len(x)``，*x* 的排列总数也可以快速增长，大于大多数随机数生成器的周期。 这意味着长序列的大多数排列永远不会产生。 "
"例如，长度为2080的序列是可以在 Mersenne Twister 随机数生成器的周期内拟合的最大序列。"

#: ../../library/random.rst:227
msgid "Removed the optional parameter *random*."
msgstr "移除了可选的形参 *random*。"

#: ../../library/random.rst:233
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence.  Used for random sampling without replacement."
msgstr "返回从总体序列中选取的唯一元素的长度为 *k* 的列表。 用于无重复的随机抽样。"

#: ../../library/random.rst:236
msgid ""
"Returns a new list containing elements from the population while leaving the"
" original population unchanged.  The resulting list is in selection order so"
" that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr ""
"返回包含来自总体的元素的新列表，同时保持原始总体不变。 结果列表按选择顺序排列，因此所有子切片也将是有效的随机样本。 "
"这允许抽奖获奖者（样本）被划分为大奖和第二名获胜者（子切片）。"

#: ../../library/random.rst:242
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in"
" the sample."
msgstr "总体成员不必是 :term:`hashable` 或 unique 。 如果总体包含重复，则每次出现都是样本中可能的选择。"

#: ../../library/random.rst:245
msgid ""
"Repeated elements can be specified one at a time or with the optional "
"keyword-only *counts* parameter.  For example, ``sample(['red', 'blue'], "
"counts=[4, 2], k=5)`` is equivalent to ``sample(['red', 'red', 'red', 'red',"
" 'blue', 'blue'], k=5)``."
msgstr ""
"重复的元素可以一个个地直接列出，或使用可选的仅限关键字形参 *counts* 来指定。 例如，``sample(['red', 'blue'], "
"counts=[4, 2], k=5)`` 等价于 ``sample(['red', 'red', 'red', 'red', 'blue', "
"'blue'], k=5)``。"

#: ../../library/random.rst:250
msgid ""
"To choose a sample from a range of integers, use a :func:`range` object as "
"an argument.  This is especially fast and space efficient for sampling from "
"a large population:  ``sample(range(10000000), k=60)``."
msgstr ""
"要从一系列整数中选择样本，请使用 :func:`range` 对象作为参数。 "
"对于从大量人群中采样，这种方法特别快速且节省空间：``sample(range(10000000), k=60)`` 。"

#: ../../library/random.rst:254
msgid ""
"If the sample size is larger than the population size, a :exc:`ValueError` "
"is raised."
msgstr "如果样本大小大于总体大小，则引发 :exc:`ValueError` 。"

#: ../../library/random.rst:257
msgid "Added the *counts* parameter."
msgstr "增加了 *counts* 形参。"

#: ../../library/random.rst:262
msgid ""
"The *population* must be a sequence.  Automatic conversion of sets to lists "
"is no longer supported."
msgstr "*population* 必须为一个序列。 不再支持将集合自动转换为列表。"

#: ../../library/random.rst:266
msgid "Discrete distributions"
msgstr "离散分布"

#: ../../library/random.rst:268
msgid "The following function generates a discrete distribution."
msgstr "以下函数会生成离散分布。"

#: ../../library/random.rst:272
msgid ""
"`Binomial distribution "
"<https://mathworld.wolfram.com/BinomialDistribution.html>`_. Return the "
"number of successes for *n* independent trials with the probability of "
"success in each trial being *p*:"
msgstr ""
"`二项式分布 <https://mathworld.wolfram.com/BinomialDistribution.html>`_。 返回 *n* "
"次独立试验在每次试验的成功率为 *p* 时的成功次数:"

#: ../../library/random.rst:277
msgid "Mathematically equivalent to::"
msgstr "在数学上等价于::"

#: ../../library/random.rst:279
msgid "sum(random() < p for i in range(n))"
msgstr "sum(random() < p for i in range(n))"

#: ../../library/random.rst:281
msgid ""
"The number of trials *n* should be a non-negative integer. The probability "
"of success *p* should be between ``0.0 <= p <= 1.0``. The result is an "
"integer in the range ``0 <= X <= n``."
msgstr ""
"试验次数 *n* 应为一个非负整数。 成功几率 *p* 的取值范围应为 ``0.0 <= p <= 1.0``。 结果是一个 ``0 <= X <= "
"n`` 范围内的整数。"

#: ../../library/random.rst:291
msgid "Real-valued distributions"
msgstr "实值分布"

#: ../../library/random.rst:293
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr "以下函数生成特定的实值分布。如常用数学实践中所使用的那样，函数形参以分布方程中的相应变量命名，大多数这些方程都可以在任何统计学教材中找到。"

#: ../../library/random.rst:301
msgid ""
"Return the next random floating-point number in the range ``0.0 <= X < 1.0``"
msgstr "返回 ``0.0 <= X < 1.0`` 范围内的下一个随机浮点数。"

#: ../../library/random.rst:306
msgid ""
"Return a random floating-point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""
"返回一个随机浮点数 *N* ，当 ``a <= b`` 时 ``a <= N <= b`` ，当 ``b < a`` 时 ``b <= N <= a``"
" 。"

#: ../../library/random.rst:309
msgid ""
"The end-point value ``b`` may or may not be included in the range depending "
"on floating-point rounding in the expression ``a + (b-a) * random()``."
msgstr "终点值 ``b`` 可能包括或不包括在该范围内，具体取决于表达式 ``a + (b-a) * random()`` 的浮点舍入结果。"

#: ../../library/random.rst:316
msgid ""
"Return a random floating-point number *N* such that ``low <= N <= high`` and"
" with the specified *mode* between those bounds.  The *low* and *high* "
"bounds default to zero and one.  The *mode* argument defaults to the "
"midpoint between the bounds, giving a symmetric distribution."
msgstr ""
"返回一个随机浮点数 *N* ，使得 ``low <= N <= high`` 并在这些边界之间使用指定的 *mode* 。 *low* 和 *high*"
" 边界默认为零和一。 *mode* 参数默认为边界之间的中点，给出对称分布。"

#: ../../library/random.rst:324
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr "Beta 分布。 参数的条件是 ``alpha > 0`` 和 ``beta > 0``。 返回值的范围介于 0 和 1 之间。"

#: ../../library/random.rst:330
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It "
"should be nonzero.  (The parameter would be called \"lambda\", but that is a"
" reserved word in Python.)  Returned values range from 0 to positive "
"infinity if *lambd* is positive, and from negative infinity to 0 if *lambd* "
"is negative."
msgstr ""
"指数分布。 *lambd* 是 1.0 除以所需的平均值，它应该是非零的。 （该参数本应命名为 “lambda” ，但这是 Python "
"中的保留字。）如果 *lambd* 为正，则返回值的范围为 0 到正无穷大；如果 *lambd* 为负，则返回值从负无穷大到 0。"

#: ../../library/random.rst:336
msgid "Added the default value for ``lambd``."
msgstr "添加了 ``lambd`` 的默认值。"

#: ../../library/random.rst:342
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  The shape and scale "
"parameters, *alpha* and *beta*, must have positive values. (Calling "
"conventions vary and some sources define 'beta' as the inverse of the "
"scale)."
msgstr ""
"Gamma 分布。 (*不是* gamma 函数！)  shape 和 scale 形参，即 *alpha* 和 *beta*，必须为正值。 "
"（调用规范有变动并且有些源码会将 'beta' 定义为逆向的 scale)。"

#: ../../library/random.rst:347
msgid "The probability distribution function is::"
msgstr "概率分布函数是::"

#: ../../library/random.rst:349
msgid ""
"          x ** (alpha - 1) * math.exp(-x / beta)\n"
"pdf(x) =  --------------------------------------\n"
"            math.gamma(alpha) * beta ** alpha"
msgstr ""
"          x ** (alpha - 1) * math.exp(-x / beta)\n"
"pdf(x) =  --------------------------------------\n"
"            math.gamma(alpha) * beta ** alpha"

#: ../../library/random.rst:356
msgid ""
"Normal distribution, also called the Gaussian distribution. *mu* is the "
"mean, and *sigma* is the standard deviation.  This is slightly faster than "
"the :func:`normalvariate` function defined below."
msgstr ""
"正态分布，也称高斯分布。 *mu* 为平均值，而 *sigma* 为标准差。 此函数要稍快于下面所定义的 :func:`normalvariate` "
"函数。"

#: ../../library/random.rst:361
msgid ""
"Multithreading note:  When two threads call this function simultaneously, it"
" is possible that they will receive the same return value.  This can be "
"avoided in three ways. 1) Have each thread use a different instance of the "
"random number generator. 2) Put locks around all calls. 3) Use the slower, "
"but thread-safe :func:`normalvariate` function instead."
msgstr ""
"多线程注意事项：当两个线程同时调用此方法时，它们有可能将获得相同的返回值。 这可以通过三种办法来避免。 1) 让每个线程使用不同的随机数生成器实例。 "
"2) 在所有调用外面加锁。 3) 改用速度较慢但是线程安全的 :func:`normalvariate` 函数。"

#: ../../library/random.rst:368 ../../library/random.rst:384
msgid "*mu* and *sigma* now have default arguments."
msgstr "现在 *mu* 和 *sigma* 均有默认参数。"

#: ../../library/random.rst:374
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr ""
"对数正态分布。 如果你采用这个分布的自然对数，你将得到一个正态分布，平均值为 *mu* 和标准差为 *sigma* 。 *mu* "
"可以是任何值，*sigma* 必须大于零。"

#: ../../library/random.rst:382
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr "正态分布。 *mu* 是平均值，*sigma* 是标准差。"

#: ../../library/random.rst:390
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""
"冯·米塞斯分布。 *mu* 是平均角度，以弧度表示，介于0和 2\\*\\ *pi* 之间，*kappa* 是浓度参数，必须大于或等于零。 如果 "
"*kappa* 等于零，则该分布在 0 到 2\\*\\ *pi* 的范围内减小到均匀的随机角度。"

#: ../../library/random.rst:398
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr "帕累托分布。 *alpha* 是形状参数。"

#: ../../library/random.rst:403
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr "威布尔分布。 *alpha* 是比例参数，*beta* 是形状参数。"

#: ../../library/random.rst:408
msgid "Alternative Generator"
msgstr "替代生成器"

#: ../../library/random.rst:412
msgid ""
"Class that implements the default pseudo-random number generator used by the"
" :mod:`random` module."
msgstr "该类实现了 :mod:`random` 模块所用的默认伪随机数生成器。"

#: ../../library/random.rst:415
msgid ""
"Formerly the *seed* could be any hashable object.  Now it is limited to: "
"``None``, :class:`int`, :class:`float`, :class:`str`, :class:`bytes`, or "
":class:`bytearray`."
msgstr ""
"之前 *seed* 可以是任何可哈希对象。 现在它被限制为: ``None``, :class:`int`, :class:`float`, "
":class:`str`, :class:`bytes` 或 :class:`bytearray`。"

#: ../../library/random.rst:420
msgid ""
"Subclasses of :class:`!Random` should override the following methods if they"
" wish to make use of a different basic generator:"
msgstr ":class:`!Random` 的子类如果想要使用不同的基本生成器则应当重载下列方法："

#: ../../library/random.rst:425
msgid ""
"Override this method in subclasses to customise the :meth:`~random.seed` "
"behaviour of :class:`!Random` instances."
msgstr "在子类中重写此方法以自定义 :class:`!Random` 实例的 :meth:`~random.seed` 行为。"

#: ../../library/random.rst:430
msgid ""
"Override this method in subclasses to customise the :meth:`~random.getstate`"
" behaviour of :class:`!Random` instances."
msgstr "在子类中重写此方法以自定义 :class:`!Random` 实例的 :meth:`~random.getstate` 行为。"

#: ../../library/random.rst:435
msgid ""
"Override this method in subclasses to customise the :meth:`~random.setstate`"
" behaviour of :class:`!Random` instances."
msgstr "在子类中重写此方法以自定义 :class:`!Random` 实例的 :meth:`~random.setstate` 行为。"

#: ../../library/random.rst:440
msgid ""
"Override this method in subclasses to customise the :meth:`~random.random` "
"behaviour of :class:`!Random` instances."
msgstr "在子类中重写此方法以自定义 :class:`!Random` 实例的 :meth:`~random.random` 行为。"

#: ../../library/random.rst:443
msgid ""
"Optionally, a custom generator subclass can also supply the following "
"method:"
msgstr "作为可选项，自定义的生成器子类还可以提供下列方法："

#: ../../library/random.rst:447
msgid ""
"Override this method in subclasses to customise the "
":meth:`~random.getrandbits` behaviour of :class:`!Random` instances."
msgstr "在子类中重写此方法以自定义 :class:`!Random` 实例的 :meth:`~random.getrandbits` 行为。"

#: ../../library/random.rst:452
msgid ""
"Override this method in subclasses to customise the "
":meth:`~random.randbytes` behaviour of :class:`!Random` instances."
msgstr "在子类中重写此方法以自定义 :class:`!Random` 实例的 :meth:`~random.randbytes` 行为。"

#: ../../library/random.rst:458
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state, and sequences are not "
"reproducible. Accordingly, the :meth:`seed` method has no effect and is "
"ignored. The :meth:`getstate` and :meth:`setstate` methods raise "
":exc:`NotImplementedError` if called."
msgstr ""
"使用 :func:`os.urandom` 函数的类，用从操作系统提供的源生成随机数。 这并非适用于所有系统。 也不依赖于软件状态，序列不可重现。 "
"因此，:meth:`seed` 方法没有效果而被忽略。 :meth:`getstate` 和 :meth:`setstate` 方法如果被调用则引发 "
":exc:`NotImplementedError`。"

#: ../../library/random.rst:467
msgid "Notes on Reproducibility"
msgstr "关于再现性的说明"

#: ../../library/random.rst:469
msgid ""
"Sometimes it is useful to be able to reproduce the sequences given by a "
"pseudo-random number generator.  By reusing a seed value, the same sequence "
"should be reproducible from run to run as long as multiple threads are not "
"running."
msgstr "有时能够重现伪随机数生成器给出的序列是很有用处的。 通过重用一个种子值，只要没有运行多线程，相同的序列就应当可在多次运行中重现。"

#: ../../library/random.rst:473
msgid ""
"Most of the random module's algorithms and seeding functions are subject to "
"change across Python versions, but two aspects are guaranteed not to change:"
msgstr "大多数随机模块的算法和种子函数都会在 Python 版本中发生变化，但保证两个方面不会改变："

#: ../../library/random.rst:476
msgid ""
"If a new seeding method is added, then a backward compatible seeder will be "
"offered."
msgstr "如果添加了新的播种方法，则将提供向后兼容的播种机。"

#: ../../library/random.rst:479
msgid ""
"The generator's :meth:`~Random.random` method will continue to produce the "
"same sequence when the compatible seeder is given the same seed."
msgstr "当兼容的播种机被赋予相同的种子时，生成器的 :meth:`~Random.random` 方法将继续产生相同的序列。"

#: ../../library/random.rst:485
msgid "Examples"
msgstr "例子"

#: ../../library/random.rst:487
msgid "Basic examples::"
msgstr "基本示例::"

#: ../../library/random.rst:489
msgid ""
">>> random()                          # Random float:  0.0 <= x < 1.0\n"
"0.37444887175646646\n"
"\n"
">>> uniform(2.5, 10.0)                # Random float:  2.5 <= x <= 10.0\n"
"3.1800146073117523\n"
"\n"
">>> expovariate(1 / 5)                # Interval between arrivals averaging 5 seconds\n"
"5.148957571865031\n"
"\n"
">>> randrange(10)                     # Integer from 0 to 9 inclusive\n"
"7\n"
"\n"
">>> randrange(0, 101, 2)              # Even integer from 0 to 100 inclusive\n"
"26\n"
"\n"
">>> choice(['win', 'lose', 'draw'])   # Single random element from a sequence\n"
"'draw'\n"
"\n"
">>> deck = 'ace two three four'.split()\n"
">>> shuffle(deck)                     # Shuffle a list\n"
">>> deck\n"
"['four', 'two', 'ace', 'three']\n"
"\n"
">>> sample([10, 20, 30, 40, 50], k=4) # Four samples without replacement\n"
"[40, 10, 50, 30]"
msgstr ""
">>> random()                          # 随机浮点数:  0.0 <= x < 1.0\n"
"0.37444887175646646\n"
"\n"
">>> uniform(2.5, 10.0)                # 随机浮点数:  2.5 <= x <= 10.0\n"
"3.1800146073117523\n"
"\n"
">>> expovariate(1 / 5)                # 到达的间隔平均为 5 秒\n"
"5.148957571865031\n"
"\n"
">>> randrange(10)                     # 从 0 至 9 区间内的整数\n"
"7\n"
"\n"
">>> randrange(0, 101, 2)              # 从 0 至 100 区间内的偶数\n"
"26\n"
"\n"
">>> choice(['win', 'lose', 'draw'])   # 从序列中取单个随机元素\n"
"'draw'\n"
"\n"
">>> deck = 'ace two three four'.split()\n"
">>> shuffle(deck)                     # 打乱列表\n"
">>> deck\n"
"['four', 'two', 'ace', 'three']\n"
"\n"
">>> sample([10, 20, 30, 40, 50], k=4) # 不重复地取四个样本\n"
"[40, 10, 50, 30]"

#: ../../library/random.rst:515
msgid "Simulations::"
msgstr "模拟::"

#: ../../library/random.rst:517
msgid ""
">>> # Six roulette wheel spins (weighted sampling with replacement)\n"
">>> choices(['red', 'black', 'green'], [18, 18, 2], k=6)\n"
"['red', 'green', 'black', 'black', 'red', 'black']\n"
"\n"
">>> # Deal 20 cards without replacement from a deck\n"
">>> # of 52 playing cards, and determine the proportion of cards\n"
">>> # with a ten-value:  ten, jack, queen, or king.\n"
">>> deal = sample(['tens', 'low cards'], counts=[16, 36], k=20)\n"
">>> deal.count('tens') / 20\n"
"0.15\n"
"\n"
">>> # Estimate the probability of getting 5 or more heads from 7 spins\n"
">>> # of a biased coin that settles on heads 60% of the time.\n"
">>> sum(binomialvariate(n=7, p=0.6) >= 5 for i in range(10_000)) / 10_000\n"
"0.4169\n"
"\n"
">>> # Probability of the median of 5 samples being in middle two quartiles\n"
">>> def trial():\n"
"...     return 2_500 <= sorted(choices(range(10_000), k=5))[2] < 7_500\n"
"...\n"
">>> sum(trial() for i in range(10_000)) / 10_000\n"
"0.7958"
msgstr ""
">>> # 六次轮盘旋转（可重复的带权重取样）\n"
">>> choices(['red', 'black', 'green'], [18, 18, 2], k=6)\n"
"['red', 'green', 'black', 'black', 'red', 'black']\n"
"\n"
">>> # 从一套扑克 52 张牌中不重复的抽取 20 张，\n"
">>> # 并以十以上的大牌来确定牌的对比值：\n"
">>> # 10、J、Q 或 K。\n"
">>> deal = sample(['tens', 'low cards'], counts=[16, 36], k=20)\n"
">>> deal.count('tens') / 20\n"
"0.15\n"
"\n"
">>> # 估计一个被做了手脚的正面朝上概率为 60% 硬币\n"
">>> # 在 7 次抛掷中得到 5 次及以上正面的概率。\n"
">>> sum(binomialvariate(n=7, p=0.6) >= 5 for i in range(10_000)) / 10_000\n"
"0.4169\n"
"\n"
">>> # 5 个样本的中位数位于中间两个四分位区之内的概率\n"
">>> def trial():\n"
"...     return 2_500 <= sorted(choices(range(10_000), k=5))[2] < 7_500\n"
"...\n"
">>> sum(trial() for i in range(10_000)) / 10_000\n"
"0.7958"

#: ../../library/random.rst:540
msgid ""
"Example of `statistical bootstrapping "
"<https://en.wikipedia.org/wiki/Bootstrapping_(statistics)>`_ using "
"resampling with replacement to estimate a confidence interval for the mean "
"of a sample::"
msgstr ""
"`statistical bootstrapping "
"<https://en.wikipedia.org/wiki/Bootstrapping_(statistics)>`_ "
"的示例，使用重新采样和替换来估计一个样本的均值的置信区间::"

#: ../../library/random.rst:544
msgid ""
"# https://www.thoughtco.com/example-of-bootstrapping-3126155\n"
"from statistics import fmean as mean\n"
"from random import choices\n"
"\n"
"data = [41, 50, 29, 37, 81, 30, 73, 63, 20, 35, 68, 22, 60, 31, 95]\n"
"means = sorted(mean(choices(data, k=len(data))) for i in range(100))\n"
"print(f'The sample mean of {mean(data):.1f} has a 90% confidence '\n"
"      f'interval from {means[5]:.1f} to {means[94]:.1f}')"
msgstr ""
"# https://www.thoughtco.com/example-of-bootstrapping-3126155\n"
"from statistics import fmean as mean\n"
"from random import choices\n"
"\n"
"data = [41, 50, 29, 37, 81, 30, 73, 63, 20, 35, 68, 22, 60, 31, 95]\n"
"means = sorted(mean(choices(data, k=len(data))) for i in range(100))\n"
"print(f'The sample mean of {mean(data):.1f} has a 90% confidence '\n"
"      f'interval from {means[5]:.1f} to {means[94]:.1f}')"

#: ../../library/random.rst:553
msgid ""
"Example of a `resampling permutation test "
"<https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests>`_ "
"to determine the statistical significance or `p-value "
"<https://en.wikipedia.org/wiki/P-value>`_ of an observed difference between "
"the effects of a drug versus a placebo::"
msgstr ""
"使用 `重新采样排列测试 "
"<https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests>`_ "
"来确定统计学显著性或者使用  `p-值 <https://en.wikipedia.org/wiki/P-value>`_ "
"来观察药物与安慰剂的作用之间差异的示例::"

#: ../../library/random.rst:559
msgid ""
"# Example from \"Statistics is Easy\" by Dennis Shasha and Manda Wilson\n"
"from statistics import fmean as mean\n"
"from random import shuffle\n"
"\n"
"drug = [54, 73, 53, 70, 73, 68, 52, 65, 65]\n"
"placebo = [54, 51, 58, 44, 55, 52, 42, 47, 58, 46]\n"
"observed_diff = mean(drug) - mean(placebo)\n"
"\n"
"n = 10_000\n"
"count = 0\n"
"combined = drug + placebo\n"
"for i in range(n):\n"
"    shuffle(combined)\n"
"    new_diff = mean(combined[:len(drug)]) - mean(combined[len(drug):])\n"
"    count += (new_diff >= observed_diff)\n"
"\n"
"print(f'{n} label reshufflings produced only {count} instances with a difference')\n"
"print(f'at least as extreme as the observed difference of {observed_diff:.1f}.')\n"
"print(f'The one-sided p-value of {count / n:.4f} leads us to reject the null')\n"
"print(f'hypothesis that there is no difference between the drug and the placebo.')"
msgstr ""
"# 来自 Dennis Shasha 与 Manda Wilson 所著 \"Statistics is Easy\" 的示例\n"
"from statistics import fmean as mean\n"
"from random import shuffle\n"
"\n"
"drug = [54, 73, 53, 70, 73, 68, 52, 65, 65]\n"
"placebo = [54, 51, 58, 44, 55, 52, 42, 47, 58, 46]\n"
"observed_diff = mean(drug) - mean(placebo)\n"
"\n"
"n = 10_000\n"
"count = 0\n"
"combined = drug + placebo\n"
"for i in range(n):\n"
"    shuffle(combined)\n"
"    new_diff = mean(combined[:len(drug)]) - mean(combined[len(drug):])\n"
"    count += (new_diff >= observed_diff)\n"
"\n"
"print(f'{n} label reshufflings produced only {count} instances with a difference')\n"
"print(f'at least as extreme as the observed difference of {observed_diff:.1f}.')\n"
"print(f'The one-sided p-value of {count / n:.4f} leads us to reject the null')\n"
"print(f'hypothesis that there is no difference between the drug and the placebo.')"

#: ../../library/random.rst:580
msgid ""
"Simulation of arrival times and service deliveries for a multiserver queue::"
msgstr "多服务器队列的到达时间和服务交付模拟::"

#: ../../library/random.rst:582
msgid ""
"from heapq import heapify, heapreplace\n"
"from random import expovariate, gauss\n"
"from statistics import mean, quantiles\n"
"\n"
"average_arrival_interval = 5.6\n"
"average_service_time = 15.0\n"
"stdev_service_time = 3.5\n"
"num_servers = 3\n"
"\n"
"waits = []\n"
"arrival_time = 0.0\n"
"servers = [0.0] * num_servers  # time when each server becomes available\n"
"heapify(servers)\n"
"for i in range(1_000_000):\n"
"    arrival_time += expovariate(1.0 / average_arrival_interval)\n"
"    next_server_available = servers[0]\n"
"    wait = max(0.0, next_server_available - arrival_time)\n"
"    waits.append(wait)\n"
"    service_duration = max(0.0, gauss(average_service_time, stdev_service_time))\n"
"    service_completed = arrival_time + wait + service_duration\n"
"    heapreplace(servers, service_completed)\n"
"\n"
"print(f'Mean wait: {mean(waits):.1f}   Max wait: {max(waits):.1f}')\n"
"print('Quartiles:', [round(q, 1) for q in quantiles(waits)])"
msgstr ""
"from heapq import heapify, heapreplace\n"
"from random import expovariate, gauss\n"
"from statistics import mean, quantiles\n"
"\n"
"average_arrival_interval = 5.6\n"
"average_service_time = 15.0\n"
"stdev_service_time = 3.5\n"
"num_servers = 3\n"
"\n"
"waits = []\n"
"arrival_time = 0.0\n"
"servers = [0.0] * num_servers  # 每个服务器都可用的时刻\n"
"heapify(servers)\n"
"for i in range(1_000_000):\n"
"    arrival_time += expovariate(1.0 / average_arrival_interval)\n"
"    next_server_available = servers[0]\n"
"    wait = max(0.0, next_server_available - arrival_time)\n"
"    waits.append(wait)\n"
"    service_duration = max(0.0, gauss(average_service_time, stdev_service_time))\n"
"    service_completed = arrival_time + wait + service_duration\n"
"    heapreplace(servers, service_completed)\n"
"\n"
"print(f'Mean wait: {mean(waits):.1f}   Max wait: {max(waits):.1f}')\n"
"print('Quartiles:', [round(q, 1) for q in quantiles(waits)])"

#: ../../library/random.rst:609
msgid ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ a "
"video tutorial by `Jake Vanderplas "
"<https://us.pycon.org/2016/speaker/profile/295/>`_ on statistical analysis "
"using just a few fundamental concepts including simulation, sampling, "
"shuffling, and cross-validation."
msgstr ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ "
"`Jake Vanderplas <https://us.pycon.org/2016/speaker/profile/295/>`_ "
"撰写的视频教程，使用一些基本概念进行统计分析，包括模拟、抽样、洗牌和交叉验证。"

#: ../../library/random.rst:615
msgid ""
"`Economics Simulation "
"<https://nbviewer.org/url/norvig.com/ipython/Economics.ipynb>`_ a simulation"
" of a marketplace by `Peter Norvig <https://norvig.com/bio.html>`_ that "
"shows effective use of many of the tools and distributions provided by this "
"module (gauss, uniform, sample, betavariate, choice, triangular, and "
"randrange)."
msgstr ""
"`Economics Simulation "
"<https://nbviewer.org/url/norvig.com/ipython/Economics.ipynb>`_ 是 `Peter "
"Norvig <https://norvig.com/bio.html>`_ 编写的市场模拟，它演示了对此模块所提供的许多工具和分布（gauss, "
"uniform, sample, betavariate, choice, triangular 和 randrange）的高效运用。"

#: ../../library/random.rst:622
msgid ""
"`A Concrete Introduction to Probability (using Python) "
"<https://nbviewer.org/url/norvig.com/ipython/Probability.ipynb>`_ a tutorial"
" by `Peter Norvig <https://norvig.com/bio.html>`_ covering the basics of "
"probability theory, how to write simulations, and how to perform data "
"analysis using Python."
msgstr ""
"`A Concrete Introduction to Probability (using Python) "
"<https://nbviewer.org/url/norvig.com/ipython/Probability.ipynb>`_ 是 `Peter "
"Norvig <https://norvig.com/bio.html>`_ 撰写的教程，其中涉及概率论基础、如何编写模拟以及如何使用 Python "
"进行数据分析等内容。"

#: ../../library/random.rst:630
msgid "Recipes"
msgstr "例程"

#: ../../library/random.rst:632
msgid ""
"These recipes show how to efficiently make random selections from the "
"combinatoric iterators in the :mod:`itertools` module:"
msgstr "这些例程演示了如何有效地使用 :mod:`itertools` 模块中的组合迭代器进行随机选取:"

#: ../../library/random.rst:635
msgid ""
"def random_product(*args, repeat=1):\n"
"    \"Random selection from itertools.product(*args, **kwds)\"\n"
"    pools = [tuple(pool) for pool in args] * repeat\n"
"    return tuple(map(random.choice, pools))\n"
"\n"
"def random_permutation(iterable, r=None):\n"
"    \"Random selection from itertools.permutations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    r = len(pool) if r is None else r\n"
"    return tuple(random.sample(pool, r))\n"
"\n"
"def random_combination(iterable, r):\n"
"    \"Random selection from itertools.combinations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.sample(range(n), r))\n"
"    return tuple(pool[i] for i in indices)\n"
"\n"
"def random_combination_with_replacement(iterable, r):\n"
"    \"Choose r elements with replacement.  Order the result to match the iterable.\"\n"
"    # Result will be in set(itertools.combinations_with_replacement(iterable, r)).\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.choices(range(n), k=r))\n"
"    return tuple(pool[i] for i in indices)"
msgstr ""
"def random_product(*args, repeat=1):\n"
"    \"从 itertools.product(*args, **kwds) 随机选取\"\n"
"    pools = [tuple(pool) for pool in args] * repeat\n"
"    return tuple(map(random.choice, pools))\n"
"\n"
"def random_permutation(iterable, r=None):\n"
"    \"从 itertools.permutations(iterable, r) 随机选取\"\n"
"    pool = tuple(iterable)\n"
"    r = len(pool) if r is None else r\n"
"    return tuple(random.sample(pool, r))\n"
"\n"
"def random_combination(iterable, r):\n"
"    \"从 itertools.combinations(iterable, r) 随机选取\"\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.sample(range(n), r))\n"
"    return tuple(pool[i] for i in indices)\n"
"\n"
"def random_combination_with_replacement(iterable, r):\n"
"    \"可重复地选取 r 个元素。 对结果进行排序以与 iterable 相匹配。\"\n"
"    # 结果将在 set(itertools.combinations_with_replacement(iterable, r)) 中。\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.choices(range(n), k=r))\n"
"    return tuple(pool[i] for i in indices)"

#: ../../library/random.rst:664
msgid ""
"The default :func:`.random` returns multiples of 2⁻⁵³ in the range *0.0 ≤ x "
"< 1.0*.  All such numbers are evenly spaced and are exactly representable as"
" Python floats.  However, many other representable floats in that interval "
"are not possible selections.  For example, ``0.05954861408025609`` isn't an "
"integer multiple of 2⁻⁵³."
msgstr ""
"默认的 :func:`.random` 返回在 *0.0 ≤ x < 1.0* 范围内 2⁻⁵³ 的倍数。 所有这些数值间隔相等并能精确表示为 "
"Python 浮点数。 但是在此间隔上有许多其他可表示浮点数是不可能的选择。 例如，``0.05954861408025609`` 就不是 2⁻⁵³ "
"的整数倍。"

#: ../../library/random.rst:670
msgid ""
"The following recipe takes a different approach.  All floats in the interval"
" are possible selections.  The mantissa comes from a uniform distribution of"
" integers in the range *2⁵² ≤ mantissa < 2⁵³*.  The exponent comes from a "
"geometric distribution where exponents smaller than *-53* occur half as "
"often as the next larger exponent."
msgstr ""
"以下规范程序采取了一种不同的方式。 在间隔上的所有浮点数都是可能的选择。 它们的尾数取值来自 *2⁵² ≤ 尾数 < 2⁵³* 范围内整数的均匀分布。 "
"指数取值则来自几何分布，其中小于 *-53* 的指数的出现频率为下一个较大指数的一半。"

#: ../../library/random.rst:678
msgid ""
"from random import Random\n"
"from math import ldexp\n"
"\n"
"class FullRandom(Random):\n"
"\n"
"    def random(self):\n"
"        mantissa = 0x10_0000_0000_0000 | self.getrandbits(52)\n"
"        exponent = -53\n"
"        x = 0\n"
"        while not x:\n"
"            x = self.getrandbits(32)\n"
"            exponent += x.bit_length() - 32\n"
"        return ldexp(mantissa, exponent)"
msgstr ""
"from random import Random\n"
"from math import ldexp\n"
"\n"
"class FullRandom(Random):\n"
"\n"
"    def random(self):\n"
"        mantissa = 0x10_0000_0000_0000 | self.getrandbits(52)\n"
"        exponent = -53\n"
"        x = 0\n"
"        while not x:\n"
"            x = self.getrandbits(32)\n"
"            exponent += x.bit_length() - 32\n"
"        return ldexp(mantissa, exponent)"

#: ../../library/random.rst:692
msgid ""
"All :ref:`real valued distributions <real-valued-distributions>` in the "
"class will use the new method::"
msgstr "该类中所有的 :ref:`实值分布 <real-valued-distributions>` 都将使用新的方法::"

#: ../../library/random.rst:695
msgid ""
">>> fr = FullRandom()\n"
">>> fr.random()\n"
"0.05954861408025609\n"
">>> fr.expovariate(0.25)\n"
"8.87925541791544"
msgstr ""
">>> fr = FullRandom()\n"
">>> fr.random()\n"
"0.05954861408025609\n"
">>> fr.expovariate(0.25)\n"
"8.87925541791544"

#: ../../library/random.rst:701
msgid ""
"The recipe is conceptually equivalent to an algorithm that chooses from all "
"the multiples of 2⁻¹⁰⁷⁴ in the range *0.0 ≤ x < 1.0*.  All such numbers are "
"evenly spaced, but most have to be rounded down to the nearest representable"
" Python float.  (The value 2⁻¹⁰⁷⁴ is the smallest positive unnormalized "
"float and is equal to ``math.ulp(0.0)``.)"
msgstr ""
"该规范程序在概念上等效于在 *0.0 ≤ x < 1.0* 范围内对所有 2⁻¹⁰⁷⁴ 的倍数进行选择的算法。 "
"所有这样的数字间隔都相等，但大多必须向下舍入为最接近的 Python 浮点数表示形式。 （2⁻¹⁰⁷⁴ 这个数值是等于 "
"``math.ulp(0.0)`` 的未经正规化的最小正浮点数。）"

#: ../../library/random.rst:710
msgid ""
"`Generating Pseudo-random Floating-Point Values "
"<https://allendowney.com/research/rand/downey07randfloat.pdf>`_ a paper by "
"Allen B. Downey describing ways to generate more fine-grained floats than "
"normally generated by :func:`.random`."
msgstr ""
"`生成伪随机浮点数值 <https://allendowney.com/research/rand/downey07randfloat.pdf>`_ 为"
" Allen B. Downey 所撰写的描述如何生成相比通过 :func:`.random` 正常生成的数值更细粒度浮点数的论文。"

#: ../../library/random.rst:718
msgid "Command-line usage"
msgstr "命令行用法"

#: ../../library/random.rst:722
msgid "The :mod:`!random` module can be executed from the command line."
msgstr ":mod:`!random` 模块可以在命令行中执行。"

#: ../../library/random.rst:724
msgid ""
"python -m random [-h] [-c CHOICE [CHOICE ...] | -i N | -f N] [input ...]"
msgstr ""
"python -m random [-h] [-c CHOICE [CHOICE ...] | -i N | -f N] [input ...]"

#: ../../library/random.rst:728
msgid "The following options are accepted:"
msgstr "可以接受以下选项："

#: ../../library/random.rst:734
msgid "Show the help message and exit."
msgstr "显示帮助信息并退出。"

#: ../../library/random.rst:739
msgid "Print a random choice, using :meth:`choice`."
msgstr "使用 :meth:`choice` 打印一个随机选择的项。"

#: ../../library/random.rst:744
msgid ""
"Print a random integer between 1 and N inclusive, using :meth:`randint`."
msgstr "使用 :meth:`randint` 打印从 1 到 N 闭区间中的一个随机整数。"

#: ../../library/random.rst:749
msgid ""
"Print a random floating-point number between 0 and N inclusive, using "
":meth:`uniform`."
msgstr "使用 :meth:`uniform` 打印从 0 到 N 闭区间中的一个随机浮点数。"

#: ../../library/random.rst:752
msgid "If no options are given, the output depends on the input:"
msgstr "如果未给出任何选项，输出将取决于输入："

#: ../../library/random.rst:754
msgid "String or multiple: same as :option:`--choice`."
msgstr "字符串或多个字符串：与 :option:`--choice` 相同。"

#: ../../library/random.rst:755
msgid "Integer: same as :option:`--integer`."
msgstr "整数：与 :option:`--integer` 相同。"

#: ../../library/random.rst:756
msgid "Float: same as :option:`--float`."
msgstr "浮点数：与 :option:`--float` 相同。"

#: ../../library/random.rst:761
msgid "Command-line example"
msgstr "命令行示例"

#: ../../library/random.rst:763
msgid "Here are some examples of the :mod:`!random` command-line interface:"
msgstr "下面是一些 :mod:`!random` 命令行接口的示例："

#: ../../library/random.rst:765
msgid ""
"$ # Choose one at random\n"
"$ python -m random egg bacon sausage spam \"Lobster Thermidor aux crevettes with a Mornay sauce\"\n"
"Lobster Thermidor aux crevettes with a Mornay sauce\n"
"\n"
"$ # Random integer\n"
"$ python -m random 6\n"
"6\n"
"\n"
"$ # Random floating-point number\n"
"$ python -m random 1.8\n"
"1.7080016272295635\n"
"\n"
"$ # With explicit arguments\n"
"$ python  -m random --choice egg bacon sausage spam \"Lobster Thermidor aux crevettes with a Mornay sauce\"\n"
"egg\n"
"\n"
"$ python -m random --integer 6\n"
"3\n"
"\n"
"$ python -m random --float 1.8\n"
"1.5666339105010318\n"
"\n"
"$ python -m random --integer 6\n"
"5\n"
"\n"
"$ python -m random --float 6\n"
"3.1942323316565915"
msgstr ""
"$ # 随机选择一项\n"
"$ python -m random egg bacon sausage spam \"Lobster Thermidor aux crevettes with a Mornay sauce\"\n"
"Lobster Thermidor aux crevettes with a Mornay sauce\n"
"\n"
"$ # 随机整数\n"
"$ python -m random 6\n"
"6\n"
"\n"
"$ # 随机浮点数\n"
"$ python -m random 1.8\n"
"1.7080016272295635\n"
"\n"
"$ # 带有显式的参数\n"
"$ python  -m random --choice egg bacon sausage spam \"Lobster Thermidor aux crevettes with a Mornay sauce\"\n"
"egg\n"
"\n"
"$ python -m random --integer 6\n"
"3\n"
"\n"
"$ python -m random --float 1.8\n"
"1.5666339105010318\n"
"\n"
"$ python -m random --integer 6\n"
"5\n"
"\n"
"$ python -m random --float 6\n"
"3.1942323316565915"
