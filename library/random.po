# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/random.rst:2
msgid ":mod:`random` --- Generate pseudo-random numbers"
msgstr ""

#: ../../library/random.rst:7
msgid "**Source code:** :source:`Lib/random.py`"
msgstr ""

#: ../../library/random.rst:11
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr ""

#: ../../library/random.rst:14
msgid ""
"For integers, there is uniform selection from a range. For sequences, there "
"is uniform selection of a random element, a function to generate a random "
"permutation of a list in-place, and a function for random sampling without "
"replacement."
msgstr ""

#: ../../library/random.rst:19
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian),"
" lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr ""

#: ../../library/random.rst:23
msgid ""
"Almost all module functions depend on the basic function :func:`.random`, "
"which generates a random float uniformly in the half-open range ``0.0 <= X <"
" 1.0``. Python uses the Mersenne Twister as the core generator.  It produces"
" 53-bit precision floats and has a period of 2\\*\\*19937-1.  The underlying"
" implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""

#: ../../library/random.rst:32
msgid ""
"The functions supplied by this module are actually bound methods of a hidden"
" instance of the :class:`random.Random` class.  You can instantiate your own"
" instances of :class:`Random` to get generators that don't share state."
msgstr ""

#: ../../library/random.rst:36
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: see the documentation on that class "
"for more details."
msgstr ""

#: ../../library/random.rst:40
msgid ""
"The :mod:`random` module also provides the :class:`SystemRandom` class which"
" uses the system function :func:`os.urandom` to generate random numbers from"
" sources provided by the operating system."
msgstr ""

#: ../../library/random.rst:46
msgid ""
"The pseudo-random generators of this module should not be used for security "
"purposes.  For security or cryptographic uses, see the :mod:`secrets` "
"module."
msgstr ""

#: ../../library/random.rst:52
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on"
" Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."
msgstr ""

#: ../../library/random.rst:57
msgid ""
"`Complementary-Multiply-with-Carry recipe "
"<https://code.activestate.com/recipes/576707/>`_ for a compatible "
"alternative random number generator with a long period and comparatively "
"simple update operations."
msgstr ""

#: ../../library/random.rst:64
msgid "Bookkeeping functions"
msgstr ""

#: ../../library/random.rst:68
msgid "Initialize the random number generator."
msgstr ""

#: ../../library/random.rst:70
msgid ""
"If *a* is omitted or ``None``, the current system time is used.  If "
"randomness sources are provided by the operating system, they are used "
"instead of the system time (see the :func:`os.urandom` function for details "
"on availability)."
msgstr ""

#: ../../library/random.rst:75
msgid "If *a* is an int, it is used directly."
msgstr ""

#: ../../library/random.rst:77
msgid ""
"With version 2 (the default), a :class:`str`, :class:`bytes`, or "
":class:`bytearray` object gets converted to an :class:`int` and all of its "
"bits are used."
msgstr ""

#: ../../library/random.rst:80
msgid ""
"With version 1 (provided for reproducing random sequences from older "
"versions of Python), the algorithm for :class:`str` and :class:`bytes` "
"generates a narrower range of seeds."
msgstr ""

#: ../../library/random.rst:84
msgid ""
"Moved to the version 2 scheme which uses all of the bits in a string seed."
msgstr ""

#: ../../library/random.rst:87
msgid ""
"The *seed* must be one of the following types: ``None``, :class:`int`, "
":class:`float`, :class:`str`, :class:`bytes`, or :class:`bytearray`."
msgstr ""

#: ../../library/random.rst:94
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr ""

#: ../../library/random.rst:100
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it"
" was at the time :func:`getstate` was called."
msgstr ""

#: ../../library/random.rst:106
msgid "Functions for bytes"
msgstr ""

#: ../../library/random.rst:110
msgid "Generate *n* random bytes."
msgstr ""

#: ../../library/random.rst:112
msgid ""
"This method should not be used for generating security tokens. Use "
":func:`secrets.token_bytes` instead."
msgstr ""

#: ../../library/random.rst:119
msgid "Functions for integers"
msgstr ""

#: ../../library/random.rst:124
msgid ""
"Return a randomly selected element from ``range(start, stop, step)``.  This "
"is equivalent to ``choice(range(start, stop, step))``, but doesn't actually "
"build a range object."
msgstr ""

#: ../../library/random.rst:128
msgid ""
"The positional argument pattern matches that of :func:`range`.  Keyword "
"arguments should not be used because the function may use them in unexpected"
" ways."
msgstr ""

#: ../../library/random.rst:131
msgid ""
":meth:`randrange` is more sophisticated about producing equally distributed "
"values.  Formerly it used a style like ``int(random()*n)`` which could "
"produce slightly uneven distributions."
msgstr ""

#: ../../library/random.rst:136
msgid ""
"The automatic conversion of non-integer types to equivalent integers is "
"deprecated.  Currently ``randrange(10.0)`` is losslessly converted to "
"``randrange(10)``.  In the future, this will raise a :exc:`TypeError`."
msgstr ""

#: ../../library/random.rst:141
msgid ""
"The exception raised for non-integer values such as ``randrange(10.5)`` or "
"``randrange('10')`` will be changed from :exc:`ValueError` to "
":exc:`TypeError`."
msgstr ""

#: ../../library/random.rst:148
msgid ""
"Return a random integer *N* such that ``a <= N <= b``.  Alias for "
"``randrange(a, b+1)``."
msgstr ""

#: ../../library/random.rst:153
msgid ""
"Returns a non-negative Python integer with *k* random bits. This method is "
"supplied with the MersenneTwister generator and some other generators may "
"also provide it as an optional part of the API. When available, "
":meth:`getrandbits` enables :meth:`randrange` to handle arbitrarily large "
"ranges."
msgstr ""

#: ../../library/random.rst:159
msgid "This method now accepts zero for *k*."
msgstr ""

#: ../../library/random.rst:164
msgid "Functions for sequences"
msgstr ""

#: ../../library/random.rst:168
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr ""

#: ../../library/random.rst:173
msgid ""
"Return a *k* sized list of elements chosen from the *population* with "
"replacement. If the *population* is empty, raises :exc:`IndexError`."
msgstr ""

#: ../../library/random.rst:176
msgid ""
"If a *weights* sequence is specified, selections are made according to the "
"relative weights.  Alternatively, if a *cum_weights* sequence is given, the "
"selections are made according to the cumulative weights (perhaps computed "
"using :func:`itertools.accumulate`).  For example, the relative weights "
"``[10, 5, 30, 5]`` are equivalent to the cumulative weights ``[10, 15, 45, "
"50]``.  Internally, the relative weights are converted to cumulative weights"
" before making selections, so supplying the cumulative weights saves work."
msgstr ""

#: ../../library/random.rst:185
msgid ""
"If neither *weights* nor *cum_weights* are specified, selections are made "
"with equal probability.  If a weights sequence is supplied, it must be the "
"same length as the *population* sequence.  It is a :exc:`TypeError` to "
"specify both *weights* and *cum_weights*."
msgstr ""

#: ../../library/random.rst:190
msgid ""
"The *weights* or *cum_weights* can use any numeric type that interoperates "
"with the :class:`float` values returned by :func:`random` (that includes "
"integers, floats, and fractions but excludes decimals).  Weights are assumed"
" to be non-negative and finite.  A :exc:`ValueError` is raised if all "
"weights are zero."
msgstr ""

#: ../../library/random.rst:196
msgid ""
"For a given seed, the :func:`choices` function with equal weighting "
"typically produces a different sequence than repeated calls to "
":func:`choice`.  The algorithm used by :func:`choices` uses floating point "
"arithmetic for internal consistency and speed.  The algorithm used by "
":func:`choice` defaults to integer arithmetic with repeated selections to "
"avoid small biases from round-off error."
msgstr ""

#: ../../library/random.rst:205
msgid "Raises a :exc:`ValueError` if all weights are zero."
msgstr ""

#: ../../library/random.rst:211
msgid "Shuffle the sequence *x* in place."
msgstr ""

#: ../../library/random.rst:213
msgid ""
"To shuffle an immutable sequence and return a new shuffled list, use "
"``sample(x, k=len(x))`` instead."
msgstr ""

#: ../../library/random.rst:216
msgid ""
"Note that even for small ``len(x)``, the total number of permutations of *x*"
" can quickly grow larger than the period of most random number generators. "
"This implies that most permutations of a long sequence can never be "
"generated.  For example, a sequence of length 2080 is the largest that can "
"fit within the period of the Mersenne Twister random number generator."
msgstr ""

#: ../../library/random.rst:222
msgid "Removed the optional parameter *random*."
msgstr ""

#: ../../library/random.rst:228
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence.  Used for random sampling without replacement."
msgstr ""

#: ../../library/random.rst:231
msgid ""
"Returns a new list containing elements from the population while leaving the"
" original population unchanged.  The resulting list is in selection order so"
" that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr ""

#: ../../library/random.rst:237
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in"
" the sample."
msgstr ""

#: ../../library/random.rst:240
msgid ""
"Repeated elements can be specified one at a time or with the optional "
"keyword-only *counts* parameter.  For example, ``sample(['red', 'blue'], "
"counts=[4, 2], k=5)`` is equivalent to ``sample(['red', 'red', 'red', 'red',"
" 'blue', 'blue'], k=5)``."
msgstr ""

#: ../../library/random.rst:245
msgid ""
"To choose a sample from a range of integers, use a :func:`range` object as "
"an argument.  This is especially fast and space efficient for sampling from "
"a large population:  ``sample(range(10000000), k=60)``."
msgstr ""

#: ../../library/random.rst:249
msgid ""
"If the sample size is larger than the population size, a :exc:`ValueError` "
"is raised."
msgstr ""

#: ../../library/random.rst:252
msgid "Added the *counts* parameter."
msgstr ""

#: ../../library/random.rst:257
msgid ""
"The *population* must be a sequence.  Automatic conversion of sets to lists "
"is no longer supported."
msgstr ""

#: ../../library/random.rst:264
msgid "Real-valued distributions"
msgstr ""

#: ../../library/random.rst:266
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr ""

#: ../../library/random.rst:274
msgid ""
"Return the next random floating point number in the range ``0.0 <= X < 1.0``"
msgstr ""

#: ../../library/random.rst:279
msgid ""
"Return a random floating point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""

#: ../../library/random.rst:282
msgid ""
"The end-point value ``b`` may or may not be included in the range depending "
"on floating-point rounding in the expression ``a + (b-a) * random()``."
msgstr ""

#: ../../library/random.rst:289
msgid ""
"Return a random floating point number *N* such that ``low <= N <= high`` and"
" with the specified *mode* between those bounds.  The *low* and *high* "
"bounds default to zero and one.  The *mode* argument defaults to the "
"midpoint between the bounds, giving a symmetric distribution."
msgstr ""

#: ../../library/random.rst:297
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr ""

#: ../../library/random.rst:303
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It "
"should be nonzero.  (The parameter would be called \"lambda\", but that is a"
" reserved word in Python.)  Returned values range from 0 to positive "
"infinity if *lambd* is positive, and from negative infinity to 0 if *lambd* "
"is negative."
msgstr ""

#: ../../library/random.rst:312
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  The shape and scale "
"parameters, *alpha* and *beta*, must have positive values. (Calling "
"conventions vary and some sources define 'beta' as the inverse of the "
"scale)."
msgstr ""

#: ../../library/random.rst:317
msgid "The probability distribution function is::"
msgstr ""

#: ../../library/random.rst:326
msgid ""
"Normal distribution, also called the Gaussian distribution. *mu* is the "
"mean, and *sigma* is the standard deviation.  This is slightly faster than "
"the :func:`normalvariate` function defined below."
msgstr ""

#: ../../library/random.rst:331
msgid ""
"Multithreading note:  When two threads call this function simultaneously, it"
" is possible that they will receive the same return value.  This can be "
"avoided in three ways. 1) Have each thread use a different instance of the "
"random number generator. 2) Put locks around all calls. 3) Use the slower, "
"but thread-safe :func:`normalvariate` function instead."
msgstr ""

#: ../../library/random.rst:338 ../../library/random.rst:354
msgid "*mu* and *sigma* now have default arguments."
msgstr ""

#: ../../library/random.rst:344
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr ""

#: ../../library/random.rst:352
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr ""

#: ../../library/random.rst:360
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""

#: ../../library/random.rst:368
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr ""

#: ../../library/random.rst:373
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr ""

#: ../../library/random.rst:378
msgid "Alternative Generator"
msgstr ""

#: ../../library/random.rst:382
msgid ""
"Class that implements the default pseudo-random number generator used by the"
" :mod:`random` module."
msgstr ""

#: ../../library/random.rst:385
msgid ""
"Formerly the *seed* could be any hashable object.  Now it is limited to: "
"``None``, :class:`int`, :class:`float`, :class:`str`, :class:`bytes`, or "
":class:`bytearray`."
msgstr ""

#: ../../library/random.rst:390
msgid ""
"Subclasses of :class:`!Random` should override the following methods if they"
" wish to make use of a different basic generator:"
msgstr ""

#: ../../library/random.rst:395
msgid ""
"Override this method in subclasses to customise the :meth:`~random.seed` "
"behaviour of :class:`!Random` instances."
msgstr ""

#: ../../library/random.rst:400
msgid ""
"Override this method in subclasses to customise the :meth:`~random.getstate`"
" behaviour of :class:`!Random` instances."
msgstr ""

#: ../../library/random.rst:405
msgid ""
"Override this method in subclasses to customise the :meth:`~random.setstate`"
" behaviour of :class:`!Random` instances."
msgstr ""

#: ../../library/random.rst:410
msgid ""
"Override this method in subclasses to customise the :meth:`~random.random` "
"behaviour of :class:`!Random` instances."
msgstr ""

#: ../../library/random.rst:413
msgid ""
"Optionally, a custom generator subclass can also supply the following "
"method:"
msgstr ""

#: ../../library/random.rst:417
msgid ""
"Override this method in subclasses to customise the "
":meth:`~random.getrandbits` behaviour of :class:`!Random` instances."
msgstr ""

#: ../../library/random.rst:423
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state, and sequences are not "
"reproducible. Accordingly, the :meth:`seed` method has no effect and is "
"ignored. The :meth:`getstate` and :meth:`setstate` methods raise "
":exc:`NotImplementedError` if called."
msgstr ""

#: ../../library/random.rst:432
msgid "Notes on Reproducibility"
msgstr ""

#: ../../library/random.rst:434
msgid ""
"Sometimes it is useful to be able to reproduce the sequences given by a "
"pseudo-random number generator.  By re-using a seed value, the same sequence"
" should be reproducible from run to run as long as multiple threads are not "
"running."
msgstr ""

#: ../../library/random.rst:438
msgid ""
"Most of the random module's algorithms and seeding functions are subject to "
"change across Python versions, but two aspects are guaranteed not to change:"
msgstr ""

#: ../../library/random.rst:441
msgid ""
"If a new seeding method is added, then a backward compatible seeder will be "
"offered."
msgstr ""

#: ../../library/random.rst:444
msgid ""
"The generator's :meth:`~Random.random` method will continue to produce the "
"same sequence when the compatible seeder is given the same seed."
msgstr ""

#: ../../library/random.rst:450
msgid "Examples"
msgstr ""

#: ../../library/random.rst:452
msgid "Basic examples::"
msgstr ""

#: ../../library/random.rst:480
msgid "Simulations::"
msgstr ""

#: ../../library/random.rst:508
msgid ""
"Example of `statistical bootstrapping "
"<https://en.wikipedia.org/wiki/Bootstrapping_(statistics)>`_ using "
"resampling with replacement to estimate a confidence interval for the mean "
"of a sample::"
msgstr ""

#: ../../library/random.rst:521
msgid ""
"Example of a `resampling permutation test "
"<https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests>`_ "
"to determine the statistical significance or `p-value "
"<https://en.wikipedia.org/wiki/P-value>`_ of an observed difference between "
"the effects of a drug versus a placebo::"
msgstr ""

#: ../../library/random.rst:548
msgid ""
"Simulation of arrival times and service deliveries for a multiserver queue::"
msgstr ""

#: ../../library/random.rst:577
msgid ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ a "
"video tutorial by `Jake Vanderplas "
"<https://us.pycon.org/2016/speaker/profile/295/>`_ on statistical analysis "
"using just a few fundamental concepts including simulation, sampling, "
"shuffling, and cross-validation."
msgstr ""

#: ../../library/random.rst:583
msgid ""
"`Economics Simulation "
"<https://nbviewer.org/url/norvig.com/ipython/Economics.ipynb>`_ a simulation"
" of a marketplace by `Peter Norvig <https://norvig.com/bio.html>`_ that "
"shows effective use of many of the tools and distributions provided by this "
"module (gauss, uniform, sample, betavariate, choice, triangular, and "
"randrange)."
msgstr ""

#: ../../library/random.rst:590
msgid ""
"`A Concrete Introduction to Probability (using Python) "
"<https://nbviewer.org/url/norvig.com/ipython/Probability.ipynb>`_ a tutorial"
" by `Peter Norvig <https://norvig.com/bio.html>`_ covering the basics of "
"probability theory, how to write simulations, and how to perform data "
"analysis using Python."
msgstr ""

#: ../../library/random.rst:598
msgid "Recipes"
msgstr ""

#: ../../library/random.rst:600
msgid ""
"These recipes show how to efficiently make random selections from the "
"combinatoric iterators in the :mod:`itertools` module:"
msgstr ""

#: ../../library/random.rst:632
msgid ""
"The default :func:`.random` returns multiples of 2⁻⁵³ in the range *0.0 ≤ x "
"< 1.0*.  All such numbers are evenly spaced and are exactly representable as"
" Python floats.  However, many other representable floats in that interval "
"are not possible selections.  For example, ``0.05954861408025609`` isn't an "
"integer multiple of 2⁻⁵³."
msgstr ""

#: ../../library/random.rst:638
msgid ""
"The following recipe takes a different approach.  All floats in the interval"
" are possible selections.  The mantissa comes from a uniform distribution of"
" integers in the range *2⁵² ≤ mantissa < 2⁵³*.  The exponent comes from a "
"geometric distribution where exponents smaller than *-53* occur half as "
"often as the next larger exponent."
msgstr ""

#: ../../library/random.rst:660
msgid ""
"All :ref:`real valued distributions <real-valued-distributions>` in the "
"class will use the new method::"
msgstr ""

#: ../../library/random.rst:669
msgid ""
"The recipe is conceptually equivalent to an algorithm that chooses from all "
"the multiples of 2⁻¹⁰⁷⁴ in the range *0.0 ≤ x < 1.0*.  All such numbers are "
"evenly spaced, but most have to be rounded down to the nearest representable"
" Python float.  (The value 2⁻¹⁰⁷⁴ is the smallest positive unnormalized "
"float and is equal to ``math.ulp(0.0)``.)"
msgstr ""

#: ../../library/random.rst:678
msgid ""
"`Generating Pseudo-random Floating-Point Values "
"<https://allendowney.com/research/rand/downey07randfloat.pdf>`_ a paper by "
"Allen B. Downey describing ways to generate more fine-grained floats than "
"normally generated by :func:`.random`."
msgstr ""
