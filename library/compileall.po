# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/compileall.rst:2
msgid ":mod:`compileall` --- Byte-compile Python libraries"
msgstr ":mod:`compileall` --- 字节编译 Python 库"

#: ../../library/compileall.rst:7
msgid "**Source code:** :source:`Lib/compileall.py`"
msgstr "**源代码:** :source:`Lib/compileall.py`"

#: ../../library/compileall.rst:11
msgid ""
"This module provides some utility functions to support installing Python "
"libraries.  These functions compile Python source files in a directory tree."
" This module can be used to create the cached byte-code files at library "
"installation time, which makes them available for use even by users who "
"don't have write permission to the library directories."
msgstr ""
"这个模块提供了一些工具函数来支持安装 Python 库。 这些函数可以编译一个目录树中的 Python 源文件。 "
"这个模块可被用来在安装库时创建缓存的字节码文件，这使得它们对于没有库目录写入权限的用户来说也是可用的。"

#: ../../includes/wasm-notavail.rst:3
msgid ":ref:`Availability <availability>`: not Emscripten, not WASI."
msgstr ":ref:`可用性 <availability>`: 非 Emscripten，非 WASI。"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""
"此模块在 WebAssembly 平台 ``wasm32-emscripten`` 和 ``wasm32-wasi`` 上不适用或不可用。 请参阅 "
":ref:`wasm-availability` 了解详情。"

#: ../../library/compileall.rst:22
msgid "Command-line use"
msgstr "使用命令行"

#: ../../library/compileall.rst:24
msgid ""
"This module can work as a script (using :program:`python -m compileall`) to "
"compile Python sources."
msgstr "此模块可以作为脚本运行 (使用 :program:`python -m compileall`) 来编译 Python 源代码。"

#: ../../library/compileall.rst:32
msgid ""
"Positional arguments are files to compile or directories that contain source"
" files, traversed recursively.  If no argument is given, behave as if the "
"command line was :samp:`-l {<directories from sys.path>}`."
msgstr ""
"位置参数是要编译的文件或包含源文件的目录，目录将被递归地遍历。 如果没有给出参数，则其行为如同使用了命令行 :samp:`-l "
"{<directories from sys.path>}`。"

#: ../../library/compileall.rst:38
msgid ""
"Do not recurse into subdirectories, only compile source code files directly "
"contained in the named or implied directories."
msgstr "不要递归到子目录，只编译直接包含在指明或隐含的目录中的源代码文件。"

#: ../../library/compileall.rst:43
msgid "Force rebuild even if timestamps are up-to-date."
msgstr "强制重新构建即使时间戳是最新的。"

#: ../../library/compileall.rst:47
msgid ""
"Do not print the list of files compiled. If passed once, error messages will"
" still be printed. If passed twice (``-qq``), all output is suppressed."
msgstr "不要打印已编译文件的列表。 如果传入一次，则错误消息仍将被打印。 如果传入两次 (``-qq``)，所有输出都会被屏蔽。"

#: ../../library/compileall.rst:52
msgid ""
"Directory prepended to the path to each file being compiled.  This will "
"appear in compilation time tracebacks, and is also compiled in to the byte-"
"code file, where it will be used in tracebacks and other messages in cases "
"where the source file does not exist at the time the byte-code file is "
"executed."
msgstr ""
"要附加到每个被编译文件的路径之前的目录。 "
"这将出现在编译时回溯信息中，并且还会被编译到字节码文件中，届时它将在字节码文件被执行而源文件已不存在的情况下被用于回溯和其他消息。"

#: ../../library/compileall.rst:61
msgid ""
"Remove (``-s``) or append (``-p``) the given prefix of paths recorded in the"
" ``.pyc`` files. Cannot be combined with ``-d``."
msgstr "移除 (``-s``) 或添加 (``-p``) 记录在 ``.pyc`` 文件中的给定路径前缀。 不可与 ``-d`` 一同使用。"

#: ../../library/compileall.rst:67
msgid ""
"regex is used to search the full path to each file considered for "
"compilation, and if the regex produces a match, the file is skipped."
msgstr "regex 会被用于搜索每个要执行编译的文件的完整路径，而如果 regex 产生了一个匹配，则相应文件会被跳过。"

#: ../../library/compileall.rst:72
msgid ""
"Read the file ``list`` and add each line that it contains to the list of "
"files and directories to compile.  If ``list`` is ``-``, read lines from "
"``stdin``."
msgstr ""
"读取文件 ``list`` 并将其包含的每一行添加到要编译的文件和目录列表中。 如果 ``list`` 为 ``-``，则从 ``stdin`` "
"读取行。"

#: ../../library/compileall.rst:78
msgid ""
"Write the byte-code files to their legacy locations and names, which may "
"overwrite byte-code files created by another version of Python.  The default"
" is to write files to their :pep:`3147` locations and names, which allows "
"byte-code files from multiple versions of Python to coexist."
msgstr ""
"将字节码写入到它们的传统位置和名称，这可能会覆盖由另一版本的 Python 所创建的字节码文件。 默认是将文件写入到它们的 :pep:`3147` "
"位置和名称，这允许来自多个版本的 Python 字节码文件共存。"

#: ../../library/compileall.rst:85
msgid ""
"Control the maximum recursion level for subdirectories. If this is given, "
"then ``-l`` option will not be taken into account. :program:`python -m "
"compileall <directory> -r 0` is equivalent to :program:`python -m compileall"
" <directory> -l`."
msgstr ""
"控制子目录的最大递归层级。 如果给出此选项，则 ``-l`` 选项将不会被考虑。 :program:`python -m compileall "
"<directory> -r 0` 等价于 :program:`python -m compileall <directory> -l`。"

#: ../../library/compileall.rst:92
msgid ""
"Use *N* workers to compile the files within the given directory. If ``0`` is"
" used, then the result of :func:`os.cpu_count()` will be used."
msgstr "使用 *N* 个工作者来编译给定目录中的文件。 如果使用 ``0``，则将使用 :func:`os.cpu_count()` 的结果。"

#: ../../library/compileall.rst:98
msgid ""
"Control how the generated byte-code files are invalidated at runtime. The "
"``timestamp`` value, means that ``.pyc`` files with the source timestamp and"
" size embedded will be generated. The ``checked-hash`` and ``unchecked-"
"hash`` values cause hash-based pycs to be generated. Hash-based pycs embed a"
" hash of the source file contents rather than a timestamp. See :ref:`pyc-"
"invalidation` for more information on how Python validates bytecode cache "
"files at runtime. The default is ``timestamp`` if the "
":envvar:`SOURCE_DATE_EPOCH` environment variable is not set, and ``checked-"
"hash`` if the ``SOURCE_DATE_EPOCH`` environment variable is set."
msgstr ""
"控制生成的字节码文件在运行时的失效规则。 值为 ``timestamp``，意味着将生成嵌入了源时间戳和大小的 ``.pyc`` 文件。 "
"``checked-hash`` 和 ``unchecked-hash`` 等值将导致生成基于哈希的 pyc。 基于哈希的 pyc "
"嵌入了源文件内容的哈希值而不是时间戳。 请参阅 :ref:`pyc-invalidation` 了解有关 Python "
"在运行时如何验证字节码缓存文件的更多信息。 如果未设置 :envvar:`SOURCE_DATE_EPOCH` 环境变量则默认值为 "
"``timestamp``，而如果设置了 ``SOURCE_DATE_EPOCH`` 则为 ``checked-hash``。"

#: ../../library/compileall.rst:111
msgid ""
"Compile with the given optimization level. May be used multiple times to "
"compile for multiple levels at a time (for example, ``compileall -o 1 -o "
"2``)."
msgstr "使用给定的优化级别进行编译。 可以多次使用来一次性地针对多个级别进行编译 (例如，``compileall -o 1 -o 2``)。"

#: ../../library/compileall.rst:117
msgid "Ignore symlinks pointing outside the given directory."
msgstr "忽略指向给定目录之外的符号链接。"

#: ../../library/compileall.rst:121
msgid ""
"If two ``.pyc`` files with different optimization level have the same "
"content, use hard links to consolidate duplicate files."
msgstr "如果两个不同优化级别的 ``.pyc`` 文件具有相同的内容，则使用硬链接来合并重复的文件。"

#: ../../library/compileall.rst:124
msgid "Added the ``-i``, ``-b`` and ``-h`` options."
msgstr "增加了 ``-i``, ``-b`` 和 ``-h`` 选项。"

#: ../../library/compileall.rst:127
msgid ""
"Added the  ``-j``, ``-r``, and ``-qq`` options.  ``-q`` option was changed "
"to a multilevel value.  ``-b`` will always produce a byte-code file ending "
"in ``.pyc``, never ``.pyo``."
msgstr ""
"增加了 ``-j``, ``-r`` 和 ``-qq`` 选项。 ``-q`` 选项改为多级别值。 ``-b`` 将总是产生以 ``.pyc`` "
"为后缀的字节码文件，而不是 ``.pyo``。"

#: ../../library/compileall.rst:132
msgid "Added the ``--invalidation-mode`` option."
msgstr "增加了 ``--invalidation-mode`` 选项。"

#: ../../library/compileall.rst:135
msgid ""
"Added the ``-s``, ``-p``, ``-e`` and ``--hardlink-dupes`` options. Raised "
"the default recursion limit from 10 to :py:func:`sys.getrecursionlimit()`. "
"Added the possibility to specify the ``-o`` option multiple times."
msgstr ""
"增加了 ``-s``, ``-p``, ``-e`` 和 ``--hardlink-dupes`` 选项。 将默认的递归限制从 10 提高到 "
":py:func:`sys.getrecursionlimit()`。 增加允许多次指定 ``-o`` 选项。"

#: ../../library/compileall.rst:142
msgid ""
"There is no command-line option to control the optimization level used by "
"the :func:`compile` function, because the Python interpreter itself already "
"provides the option: :program:`python -O -m compileall`."
msgstr ""
"没有可以控制 :func:`compile` 函数所使用的优化级别的命令行选项，因为 Python 解释器本身已经提供了该选项: "
":program:`python -O -m compileall`。"

#: ../../library/compileall.rst:146
msgid ""
"Similarly, the :func:`compile` function respects the "
":data:`sys.pycache_prefix` setting. The generated bytecode cache will only "
"be useful if :func:`compile` is run with the same :data:`sys.pycache_prefix`"
" (if any) that will be used at runtime."
msgstr ""
"类似地，:func:`compile` 函数会遵循 :data:`sys.pycache_prefix` 设置。 所生成的字节码缓存将仅在 "
":func:`compile` 附带与将在运行时使用的相同 :data:`sys.pycache_prefix` 时可用（如果存在该设置）。"

#: ../../library/compileall.rst:152
msgid "Public functions"
msgstr "公有函数"

#: ../../library/compileall.rst:156
msgid ""
"Recursively descend the directory tree named by *dir*, compiling all "
":file:`.py` files along the way. Return a true value if all the files "
"compiled successfully, and a false value otherwise."
msgstr "递归地深入名为 *dir* 的目录树，在途中编译所有 :file:`.py` 文件。 如果所有文件都编译成功则返回真值，否则返回假值。"

#: ../../library/compileall.rst:160
msgid ""
"The *maxlevels* parameter is used to limit the depth of the recursion; it "
"defaults to ``sys.getrecursionlimit()``."
msgstr "*maxlevels* 形参被用来限制递归深度；它默认为 ``sys.getrecursionlimit()``。"

#: ../../library/compileall.rst:163
msgid ""
"If *ddir* is given, it is prepended to the path to each file being compiled "
"for use in compilation time tracebacks, and is also compiled in to the byte-"
"code file, where it will be used in tracebacks and other messages in cases "
"where the source file does not exist at the time the byte-code file is "
"executed."
msgstr ""
"如果给出了 "
"*ddir*，它会被附加到每个被编译的文件的路径之前以便在编译时回溯中使用，同时还会被编译到字节码文件中，届时它将在字节码文件被执行而源文件已不存在的情况下被用于回溯和其他消息中。"

#: ../../library/compileall.rst:169
msgid ""
"If *force* is true, modules are re-compiled even if the timestamps are up to"
" date."
msgstr "如果 *force* 为真值，则即使时间戳为最新模块也会被重新编译。"

#: ../../library/compileall.rst:172
msgid ""
"If *rx* is given, its ``search`` method is called on the complete path to "
"each file considered for compilation, and if it returns a true value, the "
"file is skipped. This can be used to exclude files matching a regular "
"expression, given as a :ref:`re.Pattern <re-objects>` object."
msgstr ""
"如果给出了 *rx*，则它的 ``search`` 方法会在准备编译的每个文件的完整路径上被调用，并且如果它返回真值，则该文件会被跳过。 "
"这可被用来排除与一个正则表达式相匹配的文件，正则表达式将以 :ref:`re.Pattern <re-objects>` 对象的形式给出。"

#: ../../library/compileall.rst:177 ../../library/compileall.rst:254
msgid ""
"If *quiet* is ``False`` or ``0`` (the default), the filenames and other "
"information are printed to standard out. Set to ``1``, only errors are "
"printed. Set to ``2``, all output is suppressed."
msgstr ""
"如果 *quiet* 为 ``False`` 或 ``0`` (默认值)，则文件名和其他信息将被打印到标准输出。 如果设为 ``1``，则只打印错误。 "
"如果设为 ``2``，则屏蔽所有输出。"

#: ../../library/compileall.rst:181 ../../library/compileall.rst:258
msgid ""
"If *legacy* is true, byte-code files are written to their legacy locations "
"and names, which may overwrite byte-code files created by another version of"
" Python.  The default is to write files to their :pep:`3147` locations and "
"names, which allows byte-code files from multiple versions of Python to "
"coexist."
msgstr ""
"如果 *legacy* 为真值，则将字节码文件写入到它们的传统位置和名称，这可能会覆盖由另一版本的 Python 所创建的字节码文件。 "
"默认是将文件写入到它们的 :pep:`3147` 位置和名称，这允许来自多个版本的 Python 字节码文件共存。"

#: ../../library/compileall.rst:187 ../../library/compileall.rst:264
msgid ""
"*optimize* specifies the optimization level for the compiler.  It is passed "
"to the built-in :func:`compile` function. Accepts also a sequence of "
"optimization levels which lead to multiple compilations of one :file:`.py` "
"file in one call."
msgstr ""
"*optimize* 指明编译器的优化级别。 它会被传给内置 :func:`compile` 函数。 还接受一个优化层别列表这将在单次调用中多次编译一个"
" :file:`.py` 文件。"

#: ../../library/compileall.rst:191
msgid ""
"The argument *workers* specifies how many workers are used to compile files "
"in parallel. The default is to not use multiple workers. If the platform "
"can't use multiple workers and *workers* argument is given, then sequential "
"compilation will be used as a fallback.  If *workers* is 0, the number of "
"cores in the system is used.  If *workers* is lower than ``0``, a "
":exc:`ValueError` will be raised."
msgstr ""
"参数 *workers* 指明要使用多少个工作进程来并行编译文件。 默认设置不使用多个工作进程。 如果平台不能使用多个工作进程而又给出了 "
"*workers* 参数，则将回退为使用顺序编译。 如果 *workers* 为 0，则会使用系统的核心数量。 如果 *workers* 小于 "
"``0``，则会引发 :exc:`ValueError`。"

#: ../../library/compileall.rst:198 ../../library/compileall.rst:268
msgid ""
"*invalidation_mode* should be a member of the "
":class:`py_compile.PycInvalidationMode` enum and controls how the generated "
"pycs are invalidated at runtime."
msgstr ""
"*invalidation_mode* 应为 :class:`py_compile.PycInvalidationMode` "
"枚举的成员之一并将控制所生成的 pyc 在运行时以何种方式验证是否失效。"

#: ../../library/compileall.rst:202 ../../library/compileall.rst:272
msgid ""
"The *stripdir*, *prependdir* and *limit_sl_dest* arguments correspond to the"
" ``-s``, ``-p`` and ``-e`` options described above. They may be specified as"
" ``str`` or :py:class:`os.PathLike`."
msgstr ""
"*stripdir*, *prependdir* 和 *limit_sl_dest* 参数分别对应上述的 ``-s``, ``-p`` 和 ``-e``"
" 选项。 它们可以被指定为 ``str`` 或 :py:class:`os.PathLike`。"

#: ../../library/compileall.rst:206 ../../library/compileall.rst:276
msgid ""
"If *hardlink_dupes* is true and two ``.pyc`` files with different "
"optimization level have the same content, use hard links to consolidate "
"duplicate files."
msgstr ""
"如果 *hardlink_dupes* 为真值且两个使用不同优化级别的 ``.pyc`` 文件具有相同的内容，则会使用硬链接来合并重复的文件。"

#: ../../library/compileall.rst:209 ../../library/compileall.rst:307
msgid "Added the *legacy* and *optimize* parameter."
msgstr "增加了 *legacy* 和 *optimize* 形参。"

#: ../../library/compileall.rst:212
msgid "Added the *workers* parameter."
msgstr "增加了 *workers* 形参。"

#: ../../library/compileall.rst:215 ../../library/compileall.rst:281
#: ../../library/compileall.rst:310
msgid "*quiet* parameter was changed to a multilevel value."
msgstr "*quiet* 形参已改为多级别值。"

#: ../../library/compileall.rst:218 ../../library/compileall.rst:284
#: ../../library/compileall.rst:313
msgid ""
"The *legacy* parameter only writes out ``.pyc`` files, not ``.pyo`` files no"
" matter what the value of *optimize* is."
msgstr "*legacy* 形参将只写入 ``.pyc`` 文件而非 ``.pyo`` 文件，无论 *optimize* 的值是什么。"

#: ../../library/compileall.rst:222
msgid "Accepts a :term:`path-like object`."
msgstr "接受一个 :term:`path-like object`。"

#: ../../library/compileall.rst:225 ../../library/compileall.rst:288
#: ../../library/compileall.rst:317
msgid "The *invalidation_mode* parameter was added."
msgstr "增加了 *invalidation_mode* 形参。"

#: ../../library/compileall.rst:228 ../../library/compileall.rst:291
#: ../../library/compileall.rst:320
msgid "The *invalidation_mode* parameter's default value is updated to None."
msgstr "*invalidation_mode* 形参的默认值更新为 None。"

#: ../../library/compileall.rst:231
msgid "Setting *workers* to 0 now chooses the optimal number of cores."
msgstr "将 *workers* 设为 0 现在将会选择最优核心数量。"

#: ../../library/compileall.rst:234
msgid ""
"Added *stripdir*, *prependdir*, *limit_sl_dest* and *hardlink_dupes* "
"arguments. Default value of *maxlevels* was changed from ``10`` to "
"``sys.getrecursionlimit()``"
msgstr ""
"增加了 *stripdir*, *prependdir*, *limit_sl_dest* 和 *hardlink_dupes* 参数。 "
"*maxlevels* 的默认值从 ``10`` 改为 ``sys.getrecursionlimit()``"

#: ../../library/compileall.rst:240
msgid ""
"Compile the file with path *fullname*. Return a true value if the file "
"compiled successfully, and a false value otherwise."
msgstr "编译路径为 *fullname* 的文件。 如果文件编译成功则返回真值，否则返回假值。"

#: ../../library/compileall.rst:243
msgid ""
"If *ddir* is given, it is prepended to the path to the file being compiled "
"for use in compilation time tracebacks, and is also compiled in to the byte-"
"code file, where it will be used in tracebacks and other messages in cases "
"where the source file does not exist at the time the byte-code file is "
"executed."
msgstr ""
"如果给出了 "
"*ddir*，它会被附加到被编译的文件的路径之前以便在编译时回溯中使用，同时还会被编译到字节码文件中，届时它将在字节码文件被执行而源文件已不存在的情况下被用于回溯和其他消息中。"

#: ../../library/compileall.rst:249
msgid ""
"If *rx* is given, its ``search`` method is passed the full path name to the "
"file being compiled, and if it returns a true value, the file is not "
"compiled and ``True`` is returned. This can be used to exclude files "
"matching a regular expression, given as a :ref:`re.Pattern <re-objects>` "
"object."
msgstr ""
"如果给出了 *rx*，则会向它的 ``search`` 方法传入准备编译的文件的完整路径，并且如果它返回真值，则不编译该文件并返回 ``True``。 "
"这可被用来排除与一个正则表达式相匹配的文件，正则表达式将以 :ref:`re.Pattern <re-objects>` 对象的形式给出。"

#: ../../library/compileall.rst:294
msgid ""
"Added *stripdir*, *prependdir*, *limit_sl_dest* and *hardlink_dupes* "
"arguments."
msgstr "增加了 *stripdir*, *prependdir*, *limit_sl_dest* 和 *hardlink_dupes* 参数。"

#: ../../library/compileall.rst:299
msgid ""
"Byte-compile all the :file:`.py` files found along ``sys.path``. Return a "
"true value if all the files compiled successfully, and a false value "
"otherwise."
msgstr "将在 ``sys.path`` 中找到的所有 :file:`.py` 文件编译为字节码。 如果所有文件编译成功则返回真值，否则返回假值。"

#: ../../library/compileall.rst:302
msgid ""
"If *skip_curdir* is true (the default), the current directory is not "
"included in the search.  All other parameters are passed to the "
":func:`compile_dir` function.  Note that unlike the other compile functions,"
" ``maxlevels`` defaults to ``0``."
msgstr ""
"如果 *skip_curdir* 为真值（默认），则当前目录不会被包括在搜索中。 所有其他形参将被传递给 :func:`compile_dir` 函数。"
" 请注意不同于其他编译函数，``maxlevels`` 默认为 ``0``。"

#: ../../library/compileall.rst:323
msgid ""
"To force a recompile of all the :file:`.py` files in the :file:`Lib/` "
"subdirectory and all its subdirectories::"
msgstr "强制重新编译 :file:`Lib/` 子目录及其所有子目录下的全部 :file:`.py` 文件::"

#: ../../library/compileall.rst:340
msgid "Module :mod:`py_compile`"
msgstr "模块 :mod:`py_compile`"

#: ../../library/compileall.rst:341
msgid "Byte-compile a single source file."
msgstr "将单个源文件编译为字节码。"
