# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 汇民 王 <whuim@qq.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-29 14:17+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/string.templatelib.rst:2
msgid ":mod:`!string.templatelib` --- Support for template string literals"
msgstr ":mod:`!string.templatelib` --- 对模板字符串字面值的支持"

#: ../../library/string.templatelib.rst:7
msgid "**Source code:** :source:`Lib/string/templatelib.py`"
msgstr "**源代码：** :source:`Lib/string/templatelib.py`"

#: ../../library/string.templatelib.rst:13
msgid ":ref:`Format strings <f-strings>`"
msgstr ":ref:`格式化字符串 <f-strings>`"

#: ../../library/string.templatelib.rst:14
msgid ":ref:`Template string literal (t-string) syntax <t-strings>`"
msgstr ":ref:`模板字符串字面值（t-字符串）语法 <t-strings>`"

#: ../../library/string.templatelib.rst:15
msgid ":pep:`750`"
msgstr ":pep:`750`"

#: ../../library/string.templatelib.rst:20
msgid "Template strings"
msgstr "模板字符串"

#: ../../library/string.templatelib.rst:24
msgid ""
"Template strings are a mechanism for custom string processing. They have the"
" full flexibility of Python's :ref:`f-strings`, but return a "
":class:`Template` instance that gives access to the static and interpolated "
"(in curly braces) parts of a string *before* they are combined."
msgstr ""
"模板字符串是一种用于自定义字符串处理的机制。它们具有 Python 的 :ref:`f-strings` 的全部灵活性，但返回一个 "
":class:`Template` 实例，该实例提供了在将静态部分和插值部分（用花括号括起来的部分）组合之前对它们的访问。"

#: ../../library/string.templatelib.rst:30
msgid ""
"To write a t-string, use a ``'t'`` prefix instead of an ``'f'``, like so:"
msgstr "要编写 t-字符串，使用 ``'t'`` 前缀而不是 ``'f'``，如下所示："

#: ../../library/string.templatelib.rst:32
msgid ""
">>> pi = 3.14\n"
">>> t't-strings are new in Python {pi!s}!'\n"
"Template(\n"
"   strings=('t-strings are new in Python ', '!'),\n"
"   interpolations=(Interpolation(3.14, 'pi', 's', ''),)\n"
")"
msgstr ""
">>> pi = 3.14\n"
">>> t't-strings are new in Python {pi!s}!'\n"
"Template(\n"
"   strings=('t-strings are new in Python ', '!'),\n"
"   interpolations=(Interpolation(3.14, 'pi', 's', ''),)\n"
")"

#: ../../library/string.templatelib.rst:42
msgid "Types"
msgstr "类型"

#: ../../library/string.templatelib.rst:46
msgid ""
"The :class:`!Template` class describes the contents of a template string. It"
" is immutable, meaning that attributes of a template cannot be reassigned."
msgstr ":class:`!Template` 类描述了模板字符串的内容。它是不可变的，意味着模板的属性不能被重新赋值。"

#: ../../library/string.templatelib.rst:49
msgid ""
"The most common way to create a :class:`!Template` instance is to use the "
":ref:`template string literal syntax <t-strings>`. This syntax is identical "
"to that of :ref:`f-strings <f-strings>`, except that it uses a ``t`` prefix "
"in place of an ``f``:"
msgstr ""
"创建 :class:`!Template` 实例的最常见方式是使用 :ref:`模板字符串字面值语法 <t-strings>`。这种语法与 "
":ref:`f-字符串 <f-strings>` 的语法相同，只是它使用 ``t`` 前缀代替 ``f``："

#: ../../library/string.templatelib.rst:59
msgid ""
"Templates are stored as sequences of literal :attr:`~Template.strings` and "
"dynamic :attr:`~Template.interpolations`. A :attr:`~Template.values` "
"attribute holds the values of the interpolations:"
msgstr ""
"模板被存储为字面值 :attr:`~Template.strings` 序列和动态 :attr:`~Template.interpolations` "
"序列。一个 :attr:`~Template.values` 属性保存插值的值："

#: ../../library/string.templatelib.rst:72
msgid ""
"The :attr:`!strings` tuple has one more element than :attr:`!interpolations`"
" and :attr:`!values`; the interpolations “belong” between the strings. This "
"may be easier to understand when tuples are aligned"
msgstr ""
":attr:`!strings` 元组比 :attr:`!interpolations` 和 :attr:`!values` "
"多一个元素；插值“属于”字符串之间。当元组对齐时可能更容易理解"

#: ../../library/string.templatelib.rst:76
msgid ""
"template.strings:  ('Ah! We do have ',              '.')\n"
"template.values:   (                   'Camembert',    )"
msgstr ""
"template.strings:  ('Ah! We do have ',              '.')\n"
"template.values:   (                   'Camembert',    )"

#: ../../library/string.templatelib.rst:82
#: ../../library/string.templatelib.rst:249
msgid "Attributes"
msgstr "属性"

#: ../../library/string.templatelib.rst:86
msgid "A :class:`tuple` of the static strings in the template."
msgstr "模板中静态字符串的 :class:`tuple`。"

#: ../../library/string.templatelib.rst:93
msgid "Empty strings *are* included in the tuple:"
msgstr "空字符串 *确实* 包含在元组中："

#: ../../library/string.templatelib.rst:101
msgid ""
"The ``strings`` tuple is never empty, and always contains one more string "
"than the ``interpolations`` and ``values`` tuples:"
msgstr "``strings`` 元组从不为空，并且总是比 ``interpolations`` 和 ``values`` 元组多一个字符串："

#: ../../library/string.templatelib.rst:116
msgid "A :class:`tuple` of the interpolations in the template."
msgstr "模板中插值的 :class:`tuple`。"

#: ../../library/string.templatelib.rst:123
msgid ""
"The ``interpolations`` tuple may be empty and always contains one fewer "
"values than the ``strings`` tuple:"
msgstr "``interpolations`` 元组可能为空，并且总是比 ``strings`` 元组少一个值："

#: ../../library/string.templatelib.rst:132
msgid "A tuple of all interpolated values in the template."
msgstr "模板中所有插值值的元组。"

#: ../../library/string.templatelib.rst:139
msgid ""
"The ``values`` tuple always has the same length as the ``interpolations`` "
"tuple. It is always equivalent to ``tuple(i.value for i in "
"template.interpolations)``."
msgstr ""
"``values`` 元组总是与 ``interpolations`` 元组长度相同。它总是等同于 ``tuple(i.value for i in "
"template.interpolations)``。"

#: ../../library/string.templatelib.rst:144
#: ../../library/string.templatelib.rst:314
msgid "Methods"
msgstr "方法"

#: ../../library/string.templatelib.rst:147
msgid ""
"While literal syntax is the most common way to create a :class:`!Template`, "
"it is also possible to create them directly using the constructor:"
msgstr "虽然字面值语法是创建 :class:`!Template` 的最常见方式，但也可以直接使用构造函数创建它们："

#: ../../library/string.templatelib.rst:158
msgid ""
"If multiple strings are passed consecutively, they will be concatenated into"
" a single value in the :attr:`~Template.strings` attribute. For example, the"
" following code creates a :class:`Template` with a single final string:"
msgstr ""
"如果连续传递多个字符串，它们将被连接成一个单一的值，存储在 :attr:`~Template.strings` 属性中。例如，以下代码创建了一个 "
":class:`Template`，其最终字符串为单一值："

#: ../../library/string.templatelib.rst:167
msgid ""
"If multiple interpolations are passed consecutively, they will be treated as"
" separate interpolations and an empty string will be inserted between them. "
"For example, the following code creates a template with empty placeholders "
"in the :attr:`~Template.strings` attribute:"
msgstr ""
"如果连续传递多个插值，它们将被视为独立的插值，并在它们之间插入一个空字符串。例如，以下代码创建了一个模板，在 "
":attr:`~Template.strings` 属性中包含空占位符："

#: ../../library/string.templatelib.rst:182
msgid ""
"Iterate over the template, yielding each non-empty string and "
":class:`Interpolation` in the correct order:"
msgstr "遍历模板，按正确顺序生成每个非空字符串和 :class:`Interpolation`："

#: ../../library/string.templatelib.rst:191
msgid "Empty strings are **not** included in the iteration:"
msgstr "空字符串 **不** 包含在迭代中："

#: ../../library/string.templatelib.rst:204
msgid ""
"Concatenate this template with another, returning a new :class:`!Template` "
"instance:"
msgstr "将此模板与另一个模板连接，返回一个新的 :class:`!Template` 实例："

#: ../../library/string.templatelib.rst:211
msgid ""
"Concatenating a :class:`!Template` and a ``str`` is **not** supported. This "
"is because it is unclear whether the string should be treated as a static "
"string or an interpolation. If you want to concatenate a :class:`!Template` "
"with a string, you should either wrap the string directly in a "
":class:`!Template` (to treat it as a static string) or use an "
":class:`!Interpolation` (to treat it as dynamic):"
msgstr ""
"连接一个 :class:`!Template` 和一个 ``str`` 是 **不** 支持的。 "
"这是因为不清楚该字符串应被视为静态字符串还是插值。如果您想将 :class:`!Template` 与字符串连接，您应该要么直接将字符串包装在 "
":class:`!Template` 中（将其视为静态字符串），要么使用 :class:`!Interpolation` （将其视为动态字符串）："

#: ../../library/string.templatelib.rst:232
msgid ""
"The :class:`!Interpolation` type represents an expression inside a template "
"string. It is immutable, meaning that attributes of an interpolation cannot "
"be reassigned."
msgstr ":class:`!Interpolation` 类型表示模板字符串内的一个表达式。它是不可变的，意味着插值的属性不能被重新赋值。"

#: ../../library/string.templatelib.rst:235
msgid ""
"Interpolations support pattern matching, allowing you to match against their"
" attributes with the :ref:`match statement <match>`:"
msgstr "插值支持模式匹配，允许你使用 :ref:`match 语句 <match>` 匹配其属性："

#: ../../library/string.templatelib.rst:253
msgid "The evaluated value of the interpolation."
msgstr "插值的计算值。"

#: ../../library/string.templatelib.rst:261
#: ../../library/string.templatelib.rst:323
msgid "The text of a valid Python expression, or an empty string."
msgstr "一个有效 Python 表达式的文本，或一个空字符串。"

#: ../../library/string.templatelib.rst:263
msgid ""
"The :attr:`.expression` is the original text of the interpolation's Python "
"expression, if the interpolation was created from a t-string literal. "
"Developers creating interpolations manually should either set this to an "
"empty string or choose a suitable valid Python expression."
msgstr ""
":attr:`.expression` 是插值的原始 Python 表达式文本，如果插值是从 t-string "
"字面值创建的。手动创建插值的开发者应将该属性设置为空字符串或选择一个合适的有效 Python 表达式。"

#: ../../library/string.templatelib.rst:275
msgid "The conversion to apply to the value, or ``None``."
msgstr "要应用于值的转换，或 ``None``。"

#: ../../library/string.templatelib.rst:277
msgid ""
"The :attr:`!conversion` is the optional conversion to apply to the value:"
msgstr ":attr:`!conversion` 是应用于值的可选转换："

#: ../../library/string.templatelib.rst:285
msgid ""
"Unlike f-strings, where conversions are applied automatically, the expected "
"behavior with t-strings is that code that *processes* the :class:`!Template`"
" will decide how to interpret and whether to apply the :attr:`!conversion`. "
"For convenience, the :func:`convert` function can be used to mimic f-string "
"conversion semantics."
msgstr ""
"与 f-字符串 不同，f-字符串 中的转换会自动应用，t-字符串 的预期行为是处理 :class:`!Template` "
"的代码将决定如何解释以及是否应用 :attr:`!conversion`。为方便起见，可以使用 :func:`convert` 函数来模拟 f-字符串 "
"转换语义。"

#: ../../library/string.templatelib.rst:295
msgid "The format specification to apply to the value."
msgstr "要应用于值的格式规范。"

#: ../../library/string.templatelib.rst:297
msgid ""
"The :attr:`!format_spec` is an optional, arbitrary string used as the format"
" specification to present the value:"
msgstr ":attr:`!format_spec` 是一个可选的、任意的字符串，用作格式规范来呈现值："

#: ../../library/string.templatelib.rst:305
msgid ""
"Unlike f-strings, where format specifications are applied automatically via "
"the :func:`format` protocol, the expected behavior with t-strings is that "
"code that *processes* the interpolation will decide how to interpret and "
"whether to apply the format specification. As a result, :attr:`!format_spec`"
" values in interpolations can be arbitrary strings, including those that do "
"not conform to the :func:`format` protocol."
msgstr ""
"与 f-字符串不同，f-字符串中的格式规范会通过 :func:`format` 协议自动应用，而 "
"t-字符串的预期行为是处理插值的代码将决定如何解释以及是否应用格式规范。因此，插值中的 :attr:`!format_spec` "
"值可以是任意字符串，包括那些不符合 :func:`format` 协议的字符串。"

#: ../../library/string.templatelib.rst:320
msgid "Create a new :class:`!Interpolation` object from component parts."
msgstr "从组成部分创建一个新的 :class:`!Interpolation` 对象。"

#: ../../library/string.templatelib.rst:0
msgid "Parameters"
msgstr "参数"

#: ../../library/string.templatelib.rst:322
msgid "The evaluated, in-scope result of the interpolation."
msgstr "插值运算的求值结果（在作用域范围内）。"

#: ../../library/string.templatelib.rst:325
msgid ""
"The :ref:`conversion <formatstrings>` to be used, one of ``None``, ``'a'``, "
"``'r'``, or ``'s'``."
msgstr ""
"要使用的 :ref:`转换 <formatstrings>`，可以是 ``None``、``'a'``、``'r'`` 或 ``'s'`` 之一。"

#: ../../library/string.templatelib.rst:327
msgid ""
"An optional, arbitrary string used as the :ref:`format specification "
"<formatspec>` to present the value."
msgstr "一个可选的、任意字符串，用作呈现值的 :ref:`格式规范 <formatspec>`。"

#: ../../library/string.templatelib.rst:332
msgid "Helper functions"
msgstr "辅助函数"

#: ../../library/string.templatelib.rst:336
msgid ""
"Applies formatted string literal :ref:`conversion <formatstrings-"
"conversion>` semantics to the given object *obj*. This is frequently useful "
"for custom template string processing logic."
msgstr ""
"对给定对象 *obj* 应用格式化字符串字面值 :ref:`转换 <formatstrings-conversion>` "
"语义。这对于自定义模板字符串处理逻辑通常很有用。"

#: ../../library/string.templatelib.rst:340
msgid "Three conversion flags are currently supported:"
msgstr "目前支持三种转换标志："

#: ../../library/string.templatelib.rst:342
msgid "``'s'`` which calls :func:`str` on the value (like ``!s``),"
msgstr "``'s'`` 调用 :func:`str` 对值进行转换（类似于 ``!s``），"

#: ../../library/string.templatelib.rst:343
msgid "``'r'`` which calls :func:`repr` (like ``!r``), and"
msgstr "``'r'`` 调用 :func:`repr`（类似于 ``!r``），以及"

#: ../../library/string.templatelib.rst:344
msgid "``'a'`` which calls :func:`ascii` (like ``!a``)."
msgstr "``'a'`` 调用 :func:`ascii` (就如 ``!a``)。"

#: ../../library/string.templatelib.rst:346
msgid "If the conversion flag is ``None``, *obj* is returned unchanged."
msgstr "如果转换标志为 ``None``，则 *obj* 不变返回。"
