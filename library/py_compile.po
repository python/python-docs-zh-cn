# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/py_compile.rst:2
msgid ":mod:`py_compile` --- Compile Python source files"
msgstr ""

#: ../../library/py_compile.rst:10
msgid "**Source code:** :source:`Lib/py_compile.py`"
msgstr ""

#: ../../library/py_compile.rst:16
msgid ""
"The :mod:`py_compile` module provides a function to generate a byte-code "
"file from a source file, and another function used when the module source "
"file is invoked as a script."
msgstr ""

#: ../../library/py_compile.rst:20
msgid ""
"Though not often needed, this function can be useful when installing modules"
" for shared use, especially if some of the users may not have permission to "
"write the byte-code cache files in the directory containing the source code."
msgstr ""

#: ../../library/py_compile.rst:27
msgid ""
"Exception raised when an error occurs while attempting to compile the file."
msgstr ""

#: ../../library/py_compile.rst:32
msgid ""
"Compile a source file to byte-code and write out the byte-code cache file. "
"The source code is loaded from the file named *file*.  The byte-code is "
"written to *cfile*, which defaults to the :pep:`3147`/:pep:`488` path, "
"ending in ``.pyc``. For example, if *file* is ``/foo/bar/baz.py`` *cfile* "
"will default to ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python 3.2."
"  If *dfile* is specified, it is used as the name of the source file in "
"error messages instead of *file*.  If *doraise* is true, a "
":exc:`PyCompileError` is raised when an error is encountered while compiling"
" *file*. If *doraise* is false (the default), an error string is written to "
"``sys.stderr``, but no exception is raised.  This function returns the path "
"to byte-compiled file, i.e. whatever *cfile* value was used."
msgstr ""

#: ../../library/py_compile.rst:45
msgid ""
"The *doraise* and *quiet* arguments determine how errors are handled while "
"compiling file. If *quiet* is 0 or 1, and *doraise* is false, the default "
"behaviour is enabled: an error string is written to ``sys.stderr``, and the "
"function returns ``None`` instead of a path. If *doraise* is true, a "
":exc:`PyCompileError` is raised instead. However if *quiet* is 2, no message"
" is written, and *doraise* has no effect."
msgstr ""

#: ../../library/py_compile.rst:52
msgid ""
"If the path that *cfile* becomes (either explicitly specified or computed) "
"is a symlink or non-regular file, :exc:`FileExistsError` will be raised. "
"This is to act as a warning that import will turn those paths into regular "
"files if it is allowed to write byte-compiled files to those paths. This is "
"a side-effect of import using file renaming to place the final byte-compiled"
" file into place to prevent concurrent file writing issues."
msgstr ""

#: ../../library/py_compile.rst:59
msgid ""
"*optimize* controls the optimization level and is passed to the built-in "
":func:`compile` function.  The default of ``-1`` selects the optimization "
"level of the current interpreter."
msgstr ""

#: ../../library/py_compile.rst:63
msgid ""
"*invalidation_mode* should be a member of the :class:`PycInvalidationMode` "
"enum and controls how the generated bytecode cache is invalidated at "
"runtime.  The default is :attr:`PycInvalidationMode.CHECKED_HASH` if the "
":envvar:`SOURCE_DATE_EPOCH` environment variable is set, otherwise the "
"default is :attr:`PycInvalidationMode.TIMESTAMP`."
msgstr ""

#: ../../library/py_compile.rst:69
msgid ""
"Changed default value of *cfile* to be :PEP:`3147`-compliant.  Previous "
"default was *file* + ``'c'`` (``'o'`` if optimization was enabled). Also "
"added the *optimize* parameter."
msgstr ""

#: ../../library/py_compile.rst:74
msgid ""
"Changed code to use :mod:`importlib` for the byte-code cache file writing. "
"This means file creation/writing semantics now match what :mod:`importlib` "
"does, e.g. permissions, write-and-move semantics, etc. Also added the caveat"
" that :exc:`FileExistsError` is raised if *cfile* is a symlink or non-"
"regular file."
msgstr ""

#: ../../library/py_compile.rst:81
msgid ""
"The *invalidation_mode* parameter was added as specified in :pep:`552`. If "
"the :envvar:`SOURCE_DATE_EPOCH` environment variable is set, "
"*invalidation_mode* will be forced to "
":attr:`PycInvalidationMode.CHECKED_HASH`."
msgstr ""

#: ../../library/py_compile.rst:87
msgid ""
"The :envvar:`SOURCE_DATE_EPOCH` environment variable no longer overrides the"
" value of the *invalidation_mode* argument, and determines its default value"
" instead."
msgstr ""

#: ../../library/py_compile.rst:92
msgid "The *quiet* parameter was added."
msgstr ""

#: ../../library/py_compile.rst:98
msgid ""
"A enumeration of possible methods the interpreter can use to determine "
"whether a bytecode file is up to date with a source file. The ``.pyc`` file "
"indicates the desired invalidation mode in its header. See :ref:`pyc-"
"invalidation` for more information on how Python invalidates ``.pyc`` files "
"at runtime."
msgstr ""

#: ../../library/py_compile.rst:108
msgid ""
"The ``.pyc`` file includes the timestamp and size of the source file, which "
"Python will compare against the metadata of the source file at runtime to "
"determine if the ``.pyc`` file needs to be regenerated."
msgstr ""

#: ../../library/py_compile.rst:114
msgid ""
"The ``.pyc`` file includes a hash of the source file content, which Python "
"will compare against the source at runtime to determine if the ``.pyc`` file"
" needs to be regenerated."
msgstr ""

#: ../../library/py_compile.rst:120
msgid ""
"Like :attr:`CHECKED_HASH`, the ``.pyc`` file includes a hash of the source "
"file content. However, Python will at runtime assume the ``.pyc`` file is up"
" to date and not validate the ``.pyc`` against the source file at all."
msgstr ""

#: ../../library/py_compile.rst:124
msgid ""
"This option is useful when the ``.pycs`` are kept up to date by some system "
"external to Python like a build system."
msgstr ""

#: ../../library/py_compile.rst:130
msgid ""
"Compile several source files.  The files named in *args* (or on the command "
"line, if *args* is ``None``) are compiled and the resulting byte-code is "
"cached in the normal manner.  This function does not search a directory "
"structure to locate source files; it only compiles files named explicitly. "
"If ``'-'`` is the only parameter in args, the list of files is taken from "
"standard input."
msgstr ""

#: ../../library/py_compile.rst:137
msgid "Added support for ``'-'``."
msgstr ""

#: ../../library/py_compile.rst:140
msgid ""
"When this module is run as a script, the :func:`main` is used to compile all"
" the files named on the command line.  The exit status is nonzero if one of "
"the files could not be compiled."
msgstr ""

#: ../../library/py_compile.rst:147
msgid "Module :mod:`compileall`"
msgstr ""

#: ../../library/py_compile.rst:148
msgid "Utilities to compile all Python source files in a directory tree."
msgstr ""
