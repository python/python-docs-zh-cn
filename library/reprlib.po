# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# sunsol s <sunsolzn@gmail.com>, 2023
# 乐成 王, 2023
# Freesand Leo <yuqinju@163.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:12+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/reprlib.rst:2
msgid ":mod:`!reprlib` --- Alternate :func:`repr` implementation"
msgstr ":mod:`!reprlib` --- 替代性 :func:`repr` 实现"

#: ../../library/reprlib.rst:9
msgid "**Source code:** :source:`Lib/reprlib.py`"
msgstr "**源代码:** :source:`Lib/reprlib.py`"

#: ../../library/reprlib.rst:13
msgid ""
"The :mod:`!reprlib` module provides a means for producing object "
"representations with limits on the size of the resulting strings. This is "
"used in the Python debugger and may be useful in other contexts as well."
msgstr ""
":mod:`!reprlib` 模块提供了一种对象表示的产生方式，它会对结果字符串的大小进行限制。 该方式被用于 Python "
"调试器并可能同样适用于某些其他场景。"

#: ../../library/reprlib.rst:17
msgid "This module provides a class, an instance, and a function:"
msgstr "此模块提供了一个类、一个实例和一个函数："

#: ../../library/reprlib.rst:24
msgid ""
"Class which provides formatting services useful in implementing functions "
"similar to the built-in :func:`repr`; size limits for  different object "
"types are added to avoid the generation of representations which are "
"excessively long."
msgstr "该类提供了格式化服务 适用于实现与内置 :func:`repr` 相似的方法；其中附加了针对不同对象类型的大小限制，以避免生成超长的表示。"

#: ../../library/reprlib.rst:28
msgid ""
"The keyword arguments of the constructor can be used as a shortcut to set "
"the attributes of the :class:`Repr` instance. Which means that the following"
" initialization::"
msgstr "该构造器的关键字参数可被用作设置 :class:`Repr` 实例属性的快捷方式。 这意味着以下的初始化::"

#: ../../library/reprlib.rst:32
msgid "aRepr = reprlib.Repr(maxlevel=3)"
msgstr "aRepr = reprlib.Repr(maxlevel=3)"

#: ../../library/reprlib.rst:34
msgid "Is equivalent to::"
msgstr "等价于："

#: ../../library/reprlib.rst:36
msgid ""
"aRepr = reprlib.Repr()\n"
"aRepr.maxlevel = 3"
msgstr ""
"aRepr = reprlib.Repr()\n"
"aRepr.maxlevel = 3"

#: ../../library/reprlib.rst:39
msgid ""
"See section `Repr Objects`_ for more information about :class:`Repr` "
"attributes."
msgstr "请参阅 `Repr Objects`_ 小节了解有关 :class:`Repr` 属性的信息。"

#: ../../library/reprlib.rst:42
msgid "Allow attributes to be set via keyword arguments."
msgstr "允许通过关键字参数来设置属性。"

#: ../../library/reprlib.rst:48
msgid ""
"This is an instance of :class:`Repr` which is used to provide the "
":func:`.repr` function described below.  Changing the attributes of this "
"object will affect the size limits used by :func:`.repr` and the Python "
"debugger."
msgstr ""
"这是 :class:`Repr` 的一个实例，用于提供如下所述的 :func:`.repr` 函数。 改变此对象的属性将会影响 "
":func:`.repr` 和 Python 调试器所使用的大小限制。"

#: ../../library/reprlib.rst:56
msgid ""
"This is the :meth:`~Repr.repr` method of ``aRepr``.  It returns a string "
"similar to that returned by the built-in function of the same name, but with"
" limits on most sizes."
msgstr ""
"这是 ``aRepr`` 的 :meth:`~Repr.repr` 方法。 "
"它会返回与同名内置函数所返回字符串相似的字符串，区别在于附带了对多数类型的大小限制。"

#: ../../library/reprlib.rst:60
msgid ""
"In addition to size-limiting tools, the module also provides a decorator for"
" detecting recursive calls to :meth:`~object.__repr__` and substituting a "
"placeholder string instead."
msgstr ""
"在大小限制工具以外，此模块还提供了一个装饰器用于检测对 :meth:`~object.__repr__` 的递归调用并改用一个占位符来替换。"

#: ../../library/reprlib.rst:69
msgid ""
"Decorator for :meth:`~object.__repr__` methods to detect recursive calls "
"within the same thread.  If a recursive call is made, the *fillvalue* is "
"returned, otherwise, the usual :meth:`!__repr__` call is made.  For example:"
msgstr ""
"用于为 :meth:`~object.__repr__` 方法检查同一线程内部递归调用的装饰器。 如果执行了递归调用，则返回 "
"*fillvalue*，在其他情况下，将执行正常的 :meth:`!__repr__` 调用。 例如："

#: ../../library/reprlib.rst:73
msgid ""
">>> from reprlib import recursive_repr\n"
">>> class MyList(list):\n"
"...     @recursive_repr()\n"
"...     def __repr__(self):\n"
"...         return '<' + '|'.join(map(repr, self)) + '>'\n"
"...\n"
">>> m = MyList('abc')\n"
">>> m.append(m)\n"
">>> m.append('x')\n"
">>> print(m)\n"
"<'a'|'b'|'c'|...|'x'>"
msgstr ""
">>> from reprlib import recursive_repr\n"
">>> class MyList(list):\n"
"...     @recursive_repr()\n"
"...     def __repr__(self):\n"
"...         return '<' + '|'.join(map(repr, self)) + '>'\n"
"...\n"
">>> m = MyList('abc')\n"
">>> m.append(m)\n"
">>> m.append('x')\n"
">>> print(m)\n"
"<'a'|'b'|'c'|...|'x'>"

#: ../../library/reprlib.rst:93
msgid "Repr Objects"
msgstr "Repr 对象"

#: ../../library/reprlib.rst:95
msgid ""
":class:`Repr` instances provide several attributes which can be used to "
"provide size limits for the representations of different object types,  and "
"methods which format specific object types."
msgstr ":class:`Repr` 实例对象包含一些属性可以用于为不同对象类型的表示提供大小限制，还包含一些方法可以格式化特定的对象类型。"

#: ../../library/reprlib.rst:102
msgid ""
"This string is displayed for recursive references. It defaults to ``...``."
msgstr "该字符串将针对递归引用显示。 它默认为 ``...``。"

#: ../../library/reprlib.rst:110
msgid ""
"Depth limit on the creation of recursive representations.  The default is "
"``6``."
msgstr "创建递归表示形式的深度限制。 默认为 ``6``。"

#: ../../library/reprlib.rst:121
msgid ""
"Limits on the number of entries represented for the named object type.  The "
"default is ``4`` for :attr:`maxdict`, ``5`` for :attr:`maxarray`, and  ``6``"
" for the others."
msgstr ""
"表示命名对象类型的条目数量限制。 对于 :attr:`maxdict` 的默认值为 ``4``，对于 :attr:`maxarray` 为 "
"``5``，对于其他则为  ``6``。"

#: ../../library/reprlib.rst:128
msgid ""
"Maximum number of characters in the representation for an integer.  Digits "
"are dropped from the middle.  The default is ``40``."
msgstr "表示整数的最大字符数量。 数码会从中间被丢弃。 默认值为 ``40``。"

#: ../../library/reprlib.rst:134
msgid ""
"Limit on the number of characters in the representation of the string.  Note"
" that the \"normal\" representation of the string is used as the character "
"source: if escape sequences are needed in the representation, these may be "
"mangled when the representation is shortened.  The default is ``30``."
msgstr ""
"表示字符串的字符数量限制。 请注意字符源会使用字符串的“正常”表示形式：如果表示中需要用到转义序列，在缩短表示时它们可能会被破坏。 默认值为 "
"``30``。"

#: ../../library/reprlib.rst:142
msgid ""
"This limit is used to control the size of object types for which no specific"
" formatting method is available on the :class:`Repr` object. It is applied "
"in a similar manner as :attr:`maxstring`.  The default is ``20``."
msgstr ""
"此限制用于控制在 :class:`Repr` 对象上没有特定的格式化方法可用的对象类型的大小。 它会以类似 :attr:`maxstring` "
"的方式被应用。 默认值为 ``20``。"

#: ../../library/reprlib.rst:149
msgid ""
"If this attribute is set to ``None`` (the default), the output is formatted "
"with no line breaks or indentation, like the standard :func:`repr`. For "
"example:"
msgstr "如果该属性被设为 ``None`` (默认值)，输出将被格式化为不带换行或缩进，像标准的 :func:`repr` 一样。 例如:"

#: ../../library/reprlib.rst:153
msgid ""
">>> example = [\n"
"...     1, 'spam', {'a': 2, 'b': 'spam eggs', 'c': {3: 4.5, 6: []}}, 'ham']\n"
">>> import reprlib\n"
">>> aRepr = reprlib.Repr()\n"
">>> print(aRepr.repr(example))\n"
"[1, 'spam', {'a': 2, 'b': 'spam eggs', 'c': {3: 4.5, 6: []}}, 'ham']"
msgstr ""
">>> example = [\n"
"...     1, 'spam', {'a': 2, 'b': 'spam eggs', 'c': {3: 4.5, 6: []}}, 'ham']\n"
">>> import reprlib\n"
">>> aRepr = reprlib.Repr()\n"
">>> print(aRepr.repr(example))\n"
"[1, 'spam', {'a': 2, 'b': 'spam eggs', 'c': {3: 4.5, 6: []}}, 'ham']"

#: ../../library/reprlib.rst:162
msgid ""
"If :attr:`~Repr.indent` is set to a string, each recursion level is placed "
"on its own line, indented by that string:"
msgstr "如果 :attr:`~Repr.indent` 被设为一个字符串，每个递归层级将放在单独行中，并用该字符串来缩进:"

#: ../../library/reprlib.rst:165
msgid ""
">>> aRepr.indent = '-->'\n"
">>> print(aRepr.repr(example))\n"
"[\n"
"-->1,\n"
"-->'spam',\n"
"-->{\n"
"-->-->'a': 2,\n"
"-->-->'b': 'spam eggs',\n"
"-->-->'c': {\n"
"-->-->-->3: 4.5,\n"
"-->-->-->6: [],\n"
"-->-->},\n"
"-->},\n"
"-->'ham',\n"
"]"
msgstr ""
">>> aRepr.indent = '-->'\n"
">>> print(aRepr.repr(example))\n"
"[\n"
"-->1,\n"
"-->'spam',\n"
"-->{\n"
"-->-->'a': 2,\n"
"-->-->'b': 'spam eggs',\n"
"-->-->'c': {\n"
"-->-->-->3: 4.5,\n"
"-->-->-->6: [],\n"
"-->-->},\n"
"-->},\n"
"-->'ham',\n"
"]"

#: ../../library/reprlib.rst:183
msgid ""
"Setting :attr:`~Repr.indent` to a positive integer value behaves as if it "
"was set to a string with that number of spaces:"
msgstr "将 :attr:`~Repr.indent` 设为一个正整数时其行为与设为相应数量的空格是相同的:"

#: ../../library/reprlib.rst:186
msgid ""
">>> aRepr.indent = 4\n"
">>> print(aRepr.repr(example))\n"
"[\n"
"    1,\n"
"    'spam',\n"
"    {\n"
"        'a': 2,\n"
"        'b': 'spam eggs',\n"
"        'c': {\n"
"            3: 4.5,\n"
"            6: [],\n"
"        },\n"
"    },\n"
"    'ham',\n"
"]"
msgstr ""
">>> aRepr.indent = 4\n"
">>> print(aRepr.repr(example))\n"
"[\n"
"    1,\n"
"    'spam',\n"
"    {\n"
"        'a': 2,\n"
"        'b': 'spam eggs',\n"
"        'c': {\n"
"            3: 4.5,\n"
"            6: [],\n"
"        },\n"
"    },\n"
"    'ham',\n"
"]"

#: ../../library/reprlib.rst:209
msgid ""
"The equivalent to the built-in :func:`repr` that uses the formatting imposed"
" by the instance."
msgstr "内置 :func:`repr` 的等价形式，它使用实例专属的格式化。"

#: ../../library/reprlib.rst:215
msgid ""
"Recursive implementation used by :meth:`.repr`.  This uses the type of *obj*"
" to determine which formatting method to call, passing it *obj* and *level*."
"  The type-specific methods should call :meth:`repr1` to perform recursive "
"formatting, with ``level - 1`` for the value of *level* in the recursive  "
"call."
msgstr ""
"供 :meth:`.repr` 使用的递归实现。 此方法使用 *obj* 的类型来确定要调用哪个格式化方法，并传入 *obj* 和 *level*。 "
"类型专属的方法应当调用 :meth:`repr1` 来执行递归格式化，在递归调用中使用 ``level - 1`` 作为 *level* 的值。"

#: ../../library/reprlib.rst:224
msgid ""
"Formatting methods for specific types are implemented as methods with a name"
" based on the type name.  In the method name, **TYPE** is replaced by "
"``'_'.join(type(obj).__name__.split())``. Dispatch to these methods is "
"handled by :meth:`repr1`. Type-specific methods which need to recursively "
"format a value should call ``self.repr1(subobj, level - 1)``."
msgstr ""
"特定类型的格式化方法会被实现为基于类型名称来命名的方法。 在方法名称中，**TYPE** 会被替换为 "
"``'_'.join(type(obj).__name__.split())``。 对这些方法的分派会由 :meth:`repr1` 来处理。 "
"需要对值进行递归格式化的类型专属方法应当调用 ``self.repr1(subobj, level - 1)``。"

#: ../../library/reprlib.rst:234
msgid "Subclassing Repr Objects"
msgstr "子类化 Repr 对象"

#: ../../library/reprlib.rst:236
msgid ""
"The use of dynamic dispatching by :meth:`Repr.repr1` allows subclasses of "
":class:`Repr` to add support for additional built-in object types or to "
"modify the handling of types already supported. This example shows how "
"special support for file objects could be added:"
msgstr ""
"通过 :meth:`Repr.repr1` 使用动态分派允许 :class:`Repr` 的子类添加额外内置对象类型的支持，或是修改对已支持类型的处理。"
" 这个例子演示了如何添加对文件对象的特殊支持："

#: ../../library/reprlib.rst:241
msgid ""
"import reprlib\n"
"import sys\n"
"\n"
"class MyRepr(reprlib.Repr):\n"
"\n"
"    def repr_TextIOWrapper(self, obj, level):\n"
"        if obj.name in {'<stdin>', '<stdout>', '<stderr>'}:\n"
"            return obj.name\n"
"        return repr(obj)\n"
"\n"
"aRepr = MyRepr()\n"
"print(aRepr.repr(sys.stdin))         # prints '<stdin>'"
msgstr ""
"import reprlib\n"
"import sys\n"
"\n"
"class MyRepr(reprlib.Repr):\n"
"\n"
"    def repr_TextIOWrapper(self, obj, level):\n"
"        if obj.name in {'<stdin>', '<stdout>', '<stderr>'}:\n"
"            return obj.name\n"
"        return repr(obj)\n"
"\n"
"aRepr = MyRepr()\n"
"print(aRepr.repr(sys.stdin))         # 打印 '<stdin>'"

#: ../../library/reprlib.rst:256
msgid "<stdin>"
msgstr "<stdin>"

#: ../../library/reprlib.rst:65
msgid "..."
msgstr "..."

#: ../../library/reprlib.rst:65
msgid "placeholder"
msgstr "placeholder"
