# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/string.rst:2
msgid ":mod:`string` --- Common string operations"
msgstr ":mod:`string` --- 常见的字符串操作"

#: ../../library/string.rst:7
msgid "**Source code:** :source:`Lib/string.py`"
msgstr "**源代码：** :source:`Lib/string.py`"

#: ../../library/string.rst:14
msgid ":ref:`textseq`"
msgstr ":ref:`textseq`"

#: ../../library/string.rst:16
msgid ":ref:`string-methods`"
msgstr ":ref:`string-methods`"

#: ../../library/string.rst:19
msgid "String constants"
msgstr "字符串常量"

#: ../../library/string.rst:21
msgid "The constants defined in this module are:"
msgstr "此模块中定义的常量为："

#: ../../library/string.rst:26
msgid ""
"The concatenation of the :const:`ascii_lowercase` and "
":const:`ascii_uppercase` constants described below.  This value is not "
"locale-dependent."
msgstr ""
"下文所述 :const:`ascii_lowercase` 和 :const:`ascii_uppercase` 常量的拼连。 该值不依赖于语言区域。"

#: ../../library/string.rst:32
msgid ""
"The lowercase letters ``'abcdefghijklmnopqrstuvwxyz'``.  This value is not "
"locale-dependent and will not change."
msgstr "小写字母 ``'abcdefghijklmnopqrstuvwxyz'``。 该值不依赖于语言区域，不会发生改变。"

#: ../../library/string.rst:38
msgid ""
"The uppercase letters ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``.  This value is not "
"locale-dependent and will not change."
msgstr "大写字母 ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``。 该值不依赖于语言区域，不会发生改变。"

#: ../../library/string.rst:44
msgid "The string ``'0123456789'``."
msgstr "字符串 ``'0123456789'``。"

#: ../../library/string.rst:49
msgid "The string ``'0123456789abcdefABCDEF'``."
msgstr "字符串 ``'0123456789abcdefABCDEF'``。"

#: ../../library/string.rst:54
msgid "The string ``'01234567'``."
msgstr "字符串 ``'01234567'``。"

#: ../../library/string.rst:59
msgid ""
"String of ASCII characters which are considered punctuation characters in "
"the ``C`` locale: ``!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~``."
msgstr ""
"由在 ``C`` 区域设置中被视为标点符号的 ASCII 字符所组成的字符串: "
"``!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~``."

#: ../../library/string.rst:64
msgid ""
"String of ASCII characters which are considered printable.  This is a "
"combination of :const:`digits`, :const:`ascii_letters`, "
":const:`punctuation`, and :const:`whitespace`."
msgstr ""
"由被视为可打印符号的 ASCII 字符组成的字符串。 这是 :const:`digits`, :const:`ascii_letters`, "
":const:`punctuation` 和 :const:`whitespace` 的总和。"

#: ../../library/string.rst:71
msgid ""
"A string containing all ASCII characters that are considered whitespace. "
"This includes the characters space, tab, linefeed, return, formfeed, and "
"vertical tab."
msgstr "由被视为空白符号的 ASCII 字符组成的字符串。 其中包括空格、制表、换行、回车、进纸和纵向制表符。"

#: ../../library/string.rst:79
msgid "Custom String Formatting"
msgstr "自定义字符串格式化"

#: ../../library/string.rst:81
msgid ""
"The built-in string class provides the ability to do complex variable "
"substitutions and value formatting via the :meth:`~str.format` method "
"described in :pep:`3101`.  The :class:`Formatter` class in the :mod:`string`"
" module allows you to create and customize your own string formatting "
"behaviors using the same implementation as the built-in :meth:`~str.format` "
"method."
msgstr ""
"内置的字符串类提供了通过使用 :pep:`3101` 所描述的 :meth:`~str.format` 方法进行复杂变量替换和值格式化的能力。 "
":mod:`string` 模块中的 :class:`Formatter` 类允许你使用与内置 :meth:`~str.format` "
"方法相同的实现来创建并定制你自己的字符串格式化行为。"

#: ../../library/string.rst:90
msgid "The :class:`Formatter` class has the following public methods:"
msgstr ":class:`Formatter` 类包含下列公有方法："

#: ../../library/string.rst:94
msgid ""
"The primary API method.  It takes a format string and an arbitrary set of "
"positional and keyword arguments. It is just a wrapper that calls "
":meth:`vformat`."
msgstr "首要的 API 方法。 它接受一个格式字符串和任意一组位置和关键字参数。 它只是一个调用 :meth:`vformat` 的包装器。"

#: ../../library/string.rst:98
msgid ""
"A format string argument is now :ref:`positional-only <positional-"
"only_parameter>`."
msgstr "格式字符串参数现在是 :ref:`仅限位置参数 <positional-only_parameter>`。"

#: ../../library/string.rst:104
msgid ""
"This function does the actual work of formatting.  It is exposed as a "
"separate function for cases where you want to pass in a predefined "
"dictionary of arguments, rather than unpacking and repacking the dictionary "
"as individual arguments using the ``*args`` and ``**kwargs`` syntax.  "
":meth:`vformat` does the work of breaking up the format string into "
"character data and replacement fields.  It calls the various methods "
"described below."
msgstr ""
"此函数执行实际的格式化操作。 它被公开为一个单独的函数，用于需要传入一个预定义字母作为参数，而不是使用 ``*args`` 和 ``**kwargs``"
" 语法将字典解包为多个单独参数并重打包的情况。 :meth:`vformat` 完成将格式字符串分解为字符数据和替换字段的工作。 "
"它会调用下文所述的几种不同方法。"

#: ../../library/string.rst:112
msgid ""
"In addition, the :class:`Formatter` defines a number of methods that are "
"intended to be replaced by subclasses:"
msgstr "此外，:class:`Formatter` 还定义了一些旨在被子类替换的方法："

#: ../../library/string.rst:117
msgid ""
"Loop over the format_string and return an iterable of tuples "
"(*literal_text*, *field_name*, *format_spec*, *conversion*).  This is used "
"by :meth:`vformat` to break the string into either literal text, or "
"replacement fields."
msgstr ""
"循环遍历 format_string 并返回一个由可迭代对象组成的元组 (*literal_text*, *field_name*, "
"*format_spec*, *conversion*)。 它会被 :meth:`vformat` 用来将字符串分解为文本字面值或替换字段。"

#: ../../library/string.rst:122
msgid ""
"The values in the tuple conceptually represent a span of literal text "
"followed by a single replacement field.  If there is no literal text (which "
"can happen if two replacement fields occur consecutively), then "
"*literal_text* will be a zero-length string.  If there is no replacement "
"field, then the values of *field_name*, *format_spec* and *conversion* will "
"be ``None``."
msgstr ""
"元组中的值在概念上表示一段字面文本加上一个替换字段。 如果没有字面文本（如果连续出现两个替换字段就会发生这种情况），则 *literal_text* "
"将是一个长度为零的字符串。 如果没有替换字段，则 *field_name*, *format_spec* 和 *conversion* 的值将为 "
"``None``。"

#: ../../library/string.rst:131
msgid ""
"Given *field_name* as returned by :meth:`parse` (see above), convert it to "
"an object to be formatted.  Returns a tuple (obj, used_key).  The default "
"version takes strings of the form defined in :pep:`3101`, such as "
"\"0[name]\" or \"label.title\".  *args* and *kwargs* are as passed in to "
":meth:`vformat`.  The return value *used_key* has the same meaning as the "
"*key* parameter to :meth:`get_value`."
msgstr ""
"给定 *field_name* 作为 :meth:`parse` (见上文) 的返回值，将其转换为要格式化的对象。 返回一个元组 (obj, "
"used_key)。 默认版本接受在 :pep:`3101` 所定义形式的字符串，例如 \"0[name]\" 或 \"label.title\"。 "
"*args* 和 *kwargs* 与传给 :meth:`vformat` 的一样。 返回值 *used_key* 与 "
":meth:`get_value` 的 *key* 形参具有相同的含义。"

#: ../../library/string.rst:140
msgid ""
"Retrieve a given field value.  The *key* argument will be either an integer "
"or a string.  If it is an integer, it represents the index of the positional"
" argument in *args*; if it is a string, then it represents a named argument "
"in *kwargs*."
msgstr ""
"提取给定的字段值。 *key* 参数将为整数或字符串。 如果是整数，它表示 *args* 中位置参数的索引；如果是字符串，它表示 *kwargs* "
"中的关键字参数名。"

#: ../../library/string.rst:145
msgid ""
"The *args* parameter is set to the list of positional arguments to "
":meth:`vformat`, and the *kwargs* parameter is set to the dictionary of "
"keyword arguments."
msgstr "*args* 形参会被设为 :meth:`vformat` 的位置参数列表，而 *kwargs* 形参会被设为由关键字参数组成的字典。"

#: ../../library/string.rst:149
msgid ""
"For compound field names, these functions are only called for the first "
"component of the field name; subsequent components are handled through "
"normal attribute and indexing operations."
msgstr "对于复合字段名称，仅会为字段名称的第一个组件调用这些函数；后续组件会通过普通属性和索引操作来进行处理。"

#: ../../library/string.rst:153
msgid ""
"So for example, the field expression '0.name' would cause :meth:`get_value` "
"to be called with a *key* argument of 0.  The ``name`` attribute will be "
"looked up after :meth:`get_value` returns by calling the built-in "
":func:`getattr` function."
msgstr ""
"因此举例来说，字段表达式 '0.name' 将导致调用 :meth:`get_value` 时附带 *key* 参数值 0。 在 "
":meth:`get_value` 通过调用内置的 :func:`getattr` 函数返回后将会查找 ``name`` 属性。"

#: ../../library/string.rst:158
msgid ""
"If the index or keyword refers to an item that does not exist, then an "
":exc:`IndexError` or :exc:`KeyError` should be raised."
msgstr "如果索引或关键字引用了一个不存在的项，则将引发 :exc:`IndexError` 或 :exc:`KeyError`。"

#: ../../library/string.rst:163
msgid ""
"Implement checking for unused arguments if desired.  The arguments to this "
"function is the set of all argument keys that were actually referred to in "
"the format string (integers for positional arguments, and strings for named "
"arguments), and a reference to the *args* and *kwargs* that was passed to "
"vformat.  The set of unused args can be calculated from these parameters.  "
":meth:`check_unused_args` is assumed to raise an exception if the check "
"fails."
msgstr ""
"在必要时实现对未使用参数进行检测。 此函数的参数是是格式字符串中实际引用的所有参数键的集合（整数表示位置参数，字符串表示名称参数），以及被传给 "
"vformat 的 *args* 和 *kwargs* 的引用。 未使用参数的集合可以根据这些形参计算出来。 如果检测失败则 "
":meth:`check_unused_args` 应会引发一个异常。"

#: ../../library/string.rst:173
msgid ""
":meth:`format_field` simply calls the global :func:`format` built-in.  The "
"method is provided so that subclasses can override it."
msgstr ":meth:`format_field` 会简单地调用内置全局函数 :func:`format`。 提供该方法是为了让子类能够重载它。"

#: ../../library/string.rst:178
msgid ""
"Converts the value (returned by :meth:`get_field`) given a conversion type "
"(as in the tuple returned by the :meth:`parse` method).  The default version"
" understands 's' (str), 'r' (repr) and 'a' (ascii) conversion types."
msgstr ""
"使用给定的转换类型（来自 :meth:`parse` 方法所返回的元组）来转换（由 :meth:`get_field` 所返回的）值。 默认版本支持 "
"'s' (str), 'r' (repr) 和 'a' (ascii) 等转换类型。"

#: ../../library/string.rst:187
msgid "Format String Syntax"
msgstr "格式字符串语法"

#: ../../library/string.rst:189
msgid ""
"The :meth:`str.format` method and the :class:`Formatter` class share the "
"same syntax for format strings (although in the case of :class:`Formatter`, "
"subclasses can define their own format string syntax).  The syntax is "
"related to that of :ref:`formatted string literals <f-strings>`, but it is "
"less sophisticated and, in particular, does not support arbitrary "
"expressions."
msgstr ""
":meth:`str.format` 方法和 :class:`Formatter` 类共享相同的格式字符串语法（虽然对于 "
":class:`Formatter` 来说，其子类可以定义它们自己的格式字符串语法）。 具体语法与 :ref:`格式化字符串字面值 "
"<f-strings>` 相似，但较为简单一些，并且关键的一点是不支持任意表达式。"

#: ../../library/string.rst:202
msgid ""
"Format strings contain \"replacement fields\" surrounded by curly braces "
"``{}``. Anything that is not contained in braces is considered literal text,"
" which is copied unchanged to the output.  If you need to include a brace "
"character in the literal text, it can be escaped by doubling: ``{{`` and "
"``}}``."
msgstr ""
"格式字符串包含有以花括号 ``{}`` 括起来的“替换字段”。 不在花括号之内的内容被视为字面文本，会不加修改地复制到输出中。 "
"如果你需要在字面文本中包含花括号字符，可以通过重复来转义: ``{{`` and ``}}``。"

#: ../../library/string.rst:207
msgid "The grammar for a replacement field is as follows:"
msgstr "替换字段的语法如下："

#: ../../library/string.rst:219
msgid ""
"In less formal terms, the replacement field can start with a *field_name* "
"that specifies the object whose value is to be formatted and inserted into "
"the output instead of the replacement field. The *field_name* is optionally "
"followed by a  *conversion* field, which is preceded by an exclamation point"
" ``'!'``, and a *format_spec*, which is preceded by a colon ``':'``.  These "
"specify a non-default format for the replacement value."
msgstr ""
"用不太正式的术语来描述，替换字段开头可以用一个 *field_name* 指定要对值进行格式化并取代替换字符被插入到输出结果的对象。 "
"*field_name* 之后有可选的  *conversion* 字段，它是一个感叹号 ``'!'`` 加一个 "
"*format_spec*，并以一个冒号 ``':'`` 打头。 这些指明了替换值的非默认格式。"

#: ../../library/string.rst:226
msgid "See also the :ref:`formatspec` section."
msgstr "另请参阅 :ref:`formatspec` 一节。"

#: ../../library/string.rst:228
msgid ""
"The *field_name* itself begins with an *arg_name* that is either a number or"
" a keyword.  If it's a number, it refers to a positional argument, and if "
"it's a keyword, it refers to a named keyword argument. An *arg_name* is "
"treated as a number if a call to :meth:`str.isdecimal` on the string would "
"return true. If the numerical arg_names in a format string are 0, 1, 2, ... "
"in sequence, they can all be omitted (not just some) and the numbers 0, 1, "
"2, ... will be automatically inserted in that order. Because *arg_name* is "
"not quote-delimited, it is not possible to specify arbitrary dictionary keys"
" (e.g., the strings ``'10'`` or ``':-]'``) within a format string. The "
"*arg_name* can be followed by any number of index or attribute expressions. "
"An expression of the form ``'.name'`` selects the named attribute using "
":func:`getattr`, while an expression of the form ``'[index]'`` does an index"
" lookup using :func:`__getitem__`."
msgstr ""

#: ../../library/string.rst:242
msgid ""
"The positional argument specifiers can be omitted for :meth:`str.format`, so"
" ``'{} {}'.format(a, b)`` is equivalent to ``'{0} {1}'.format(a, b)``."
msgstr ""
"位置参数说明符对于 :meth:`str.format` 可以省略，因此 ``'{} {}'.format(a, b)`` 等价于 ``'{0} "
"{1}'.format(a, b)``。"

#: ../../library/string.rst:246
msgid ""
"The positional argument specifiers can be omitted for :class:`Formatter`."
msgstr "位置参数说明符对于 :class:`Formatter` 可以省略。"

#: ../../library/string.rst:249
msgid "Some simple format string examples::"
msgstr "一些简单的格式字符串示例"

#: ../../library/string.rst:258
msgid ""
"The *conversion* field causes a type coercion before formatting.  Normally, "
"the job of formatting a value is done by the :meth:`__format__` method of "
"the value itself.  However, in some cases it is desirable to force a type to"
" be formatted as a string, overriding its own definition of formatting.  By "
"converting the value to a string before calling :meth:`__format__`, the "
"normal formatting logic is bypassed."
msgstr ""

#: ../../library/string.rst:265
msgid ""
"Three conversion flags are currently supported: ``'!s'`` which calls "
":func:`str` on the value, ``'!r'`` which calls :func:`repr` and ``'!a'`` "
"which calls :func:`ascii`."
msgstr ""
"目前支持的转换旗标有三种: ``'!s'`` 会对值调用 :func:`str`，``'!r'`` 调用 :func:`repr` 而 ``'!a'``"
" 则调用 :func:`ascii`。"

#: ../../library/string.rst:269
msgid "Some examples::"
msgstr "示例如下："

#: ../../library/string.rst:275
msgid ""
"The *format_spec* field contains a specification of how the value should be "
"presented, including such details as field width, alignment, padding, "
"decimal precision and so on.  Each value type can define its own "
"\"formatting mini-language\" or interpretation of the *format_spec*."
msgstr ""
"*format_spec* 字段包含值应如何呈现的规格描述，例如字段宽度、对齐、填充、小数精度等细节信息。 "
"每种值类型可以定义自己的“格式化迷你语言”或对 *format_spec* 的解读方式。"

#: ../../library/string.rst:280
msgid ""
"Most built-in types support a common formatting mini-language, which is "
"described in the next section."
msgstr "大多数内置类型都支持同样的格式化迷你语言，具体描述见下一节。"

#: ../../library/string.rst:283
msgid ""
"A *format_spec* field can also include nested replacement fields within it. "
"These nested replacement fields may contain a field name, conversion flag "
"and format specification, but deeper nesting is not allowed.  The "
"replacement fields within the format_spec are substituted before the "
"*format_spec* string is interpreted. This allows the formatting of a value "
"to be dynamically specified."
msgstr ""
"*format_spec* 字段还可以在其内部包含嵌套的替换字段。 "
"这些嵌套的替换字段可能包括字段名称、转换旗标和格式规格描述，但是不再允许更深层的嵌套。 format_spec 内部的替换字段会在解读 "
"*format_spec* 字符串之前先被解读。 这将允许动态地指定特定值的格式。"

#: ../../library/string.rst:290
msgid "See the :ref:`formatexamples` section for some examples."
msgstr "请参阅 :ref:`formatexamples` 一节查看相关示例。"

#: ../../library/string.rst:296
msgid "Format Specification Mini-Language"
msgstr "格式规格迷你语言"

#: ../../library/string.rst:298
msgid ""
"\"Format specifications\" are used within replacement fields contained "
"within a format string to define how individual values are presented (see "
":ref:`formatstrings` and :ref:`f-strings`). They can also be passed directly"
" to the built-in :func:`format` function.  Each formattable type may define "
"how the format specification is to be interpreted."
msgstr ""
"“格式规格”在格式字符串所包含的替换字段内部使用，用于定义单个值应如何呈现 (参见 :ref:`formatstrings` 和 "
":ref:`f-strings`)。 它们也可以被直接传给内置的 :func:`format` 函数。 "
"每种可格式化的类型都可以自行定义如何对格式规格进行解读。"

#: ../../library/string.rst:305
msgid ""
"Most built-in types implement the following options for format "
"specifications, although some of the formatting options are only supported "
"by the numeric types."
msgstr "大多数内置类型都为格式规格实现了下列选项，不过某些格式化选项只被数值类型所支持。"

#: ../../library/string.rst:308
msgid ""
"A general convention is that an empty format specification produces the same"
" result as if you had called :func:`str` on the value. A non-empty format "
"specification typically modifies the result."
msgstr "一般约定空的格式描述将产生与在值上调用 :func:`str` 相同的结果。 非空格式描述通常会修改此结果。"

#: ../../library/string.rst:312
msgid "The general form of a *standard format specifier* is:"
msgstr "*标准格式说明符* 的一般形式如下："

#: ../../library/string.rst:324
msgid ""
"If a valid *align* value is specified, it can be preceded by a *fill* "
"character that can be any character and defaults to a space if omitted. It "
"is not possible to use a literal curly brace (\"``{``\" or \"``}``\") as the"
" *fill* character in a :ref:`formatted string literal <f-strings>` or when "
"using the :meth:`str.format` method.  However, it is possible to insert a "
"curly brace with a nested replacement field.  This limitation doesn't affect"
" the :func:`format` function."
msgstr ""
"如果指定了一个有效的 *align* 值，则可以在该值前面加一个 *fill* 字符，它可以为任意字符，如果省略则默认为空格符。 在 "
":ref:`格式化字符串字面值 <f-strings>` 或在使用 :meth:`str.format` 方法时是无法使用花括号字面值 "
"(\"``{``\" or \"``}``\") 作为 *fill* 字符的。 但是，通过嵌套替换字段插入花括号则是可以的。 这个限制不会影响 "
":func:`format` 函数。"

#: ../../library/string.rst:333
msgid "The meaning of the various alignment options is as follows:"
msgstr "各种对齐选项的含义如下："

#: ../../library/string.rst:342 ../../library/string.rst:373
msgid "Option"
msgstr "属性"

#: ../../library/string.rst:342 ../../library/string.rst:373
#: ../../library/string.rst:456 ../../library/string.rst:467
#: ../../library/string.rst:502
msgid "Meaning"
msgstr "含意"

#: ../../library/string.rst:344
msgid "``'<'``"
msgstr "``'<'``"

#: ../../library/string.rst:344
msgid ""
"Forces the field to be left-aligned within the available space (this is the "
"default for most objects)."
msgstr "强制字段在可用空间内左对齐（这是大多数对象的默认值）。"

#: ../../library/string.rst:347
msgid "``'>'``"
msgstr "``'>'``"

#: ../../library/string.rst:347
msgid ""
"Forces the field to be right-aligned within the available space (this is the"
" default for numbers)."
msgstr "强制字段在可用空间内右对齐（这是数字的默认值）。"

#: ../../library/string.rst:350
msgid "``'='``"
msgstr "``'='``"

#: ../../library/string.rst:350
msgid ""
"Forces the padding to be placed after the sign (if any) but before the "
"digits.  This is used for printing fields in the form '+000000120'. This "
"alignment option is only valid for numeric types.  It becomes the default "
"for numbers when '0' immediately precedes the field width."
msgstr ""
"强制在符号（如果有）之后数码之前放置填充。 这被用于以 '+000000120' 形式打印字段。 这个对齐选项仅对数字类型有效。 这是当 '0' "
"紧接在字段宽度之前时的默认选项。"

#: ../../library/string.rst:356
msgid "``'^'``"
msgstr "``'^'``"

#: ../../library/string.rst:356
msgid "Forces the field to be centered within the available space."
msgstr "强制字段在可用空间内居中。"

#: ../../library/string.rst:360
msgid ""
"Note that unless a minimum field width is defined, the field width will "
"always be the same size as the data to fill it, so that the alignment option"
" has no meaning in this case."
msgstr "请注意，除非定义了最小字段宽度，否则字段宽度将始终与填充它的数据大小相同，因此在这种情况下，对齐选项没有意义。"

#: ../../library/string.rst:364
msgid ""
"The *sign* option is only valid for number types, and can be one of the "
"following:"
msgstr "*sign* 选项仅对数字类型有效，可以是以下之一："

#: ../../library/string.rst:375
msgid "``'+'``"
msgstr "``'+'``"

#: ../../library/string.rst:375
msgid ""
"indicates that a sign should be used for both positive as well as negative "
"numbers."
msgstr "表示正负号将同时用于正数与负数，例如 +3 , -1 。"

#: ../../library/string.rst:378
msgid "``'-'``"
msgstr "``'-'``"

#: ../../library/string.rst:378
msgid ""
"indicates that a sign should be used only for negative numbers (this is the "
"default behavior)."
msgstr "表示正负号仅用于负数（这是默认行为），例如 3 , -1。"

#: ../../library/string.rst:367 ../../library/string.rst:381
msgid "space"
msgstr "space"

#: ../../library/string.rst:381
msgid ""
"indicates that a leading space should be used on positive numbers, and a "
"minus sign on negative numbers."
msgstr "表示应在正数上使用前导空格，在负数上使用负号。"

#: ../../library/string.rst:388
msgid ""
"The ``'z'`` option coerces negative zero floating-point values to positive "
"zero after rounding to the format precision.  This option is only valid for "
"floating-point presentation types."
msgstr " ``'z'`` 选项是在舍入到格式精度后将负零浮点值强制转为正零。 此选项适用于浮点表示类型。"

#: ../../library/string.rst:392
msgid "Added the ``'z'`` option (see also :pep:`682`)."
msgstr "增加了 ``'z'`` 选项 (另请参阅 :pep:`682`)。"

#: ../../library/string.rst:397
msgid ""
"The ``'#'`` option causes the \"alternate form\" to be used for the "
"conversion.  The alternate form is defined differently for different types."
"  This option is only valid for integer, float and complex types. For "
"integers, when binary, octal, or hexadecimal output is used, this option "
"adds the respective prefix ``'0b'``, ``'0o'``, ``'0x'``, or ``'0X'`` to the "
"output value. For float and complex the alternate form causes the result of "
"the conversion to always contain a decimal-point character, even if no "
"digits follow it. Normally, a decimal-point character appears in the result "
"of these conversions only if a digit follows it. In addition, for ``'g'`` "
"and ``'G'`` conversions, trailing zeros are not removed from the result."
msgstr ""
"``'#'`` 选项可让“替代形式”被用于执行转换。 替代形式会针对不同的类型分别定义。  此选项仅适用于整数、浮点数和复数类型。 "
"对于整数类型，当使用二进制、八进制或十六进制输出时，此选项会为输出值分别添加相应的 ``'0b'``, ``'0o'``, ``'0x'`` 或 "
"``'0X'`` 前缀。 对于浮点数和复数类型，替代形式会使得转换结果总是包含小数点符号，即使其不带小数部分。 "
"通常只有在带有小数部分的情况下，此类转换的结果中才会出现小数点符号。 此外，对于 ``'g'`` 和 ``'G'`` 转换，末尾的零不会从结果中被移除。"

#: ../../library/string.rst:411
msgid ""
"The ``','`` option signals the use of a comma for a thousands separator. For"
" a locale aware separator, use the ``'n'`` integer presentation type "
"instead."
msgstr "``','`` 选项表示使用逗号作为千位分隔符。 对于感应区域设置的分隔符，请改用 ``'n'`` 整数表示类型。"

#: ../../library/string.rst:415
msgid "Added the ``','`` option (see also :pep:`378`)."
msgstr "添加了 ``','`` 选项 (另请参阅 :pep:`378`)。"

#: ../../library/string.rst:420
msgid ""
"The ``'_'`` option signals the use of an underscore for a thousands "
"separator for floating point presentation types and for integer presentation"
" type ``'d'``.  For integer presentation types ``'b'``, ``'o'``, ``'x'``, "
"and ``'X'``, underscores will be inserted every 4 digits.  For other "
"presentation types, specifying this option is an error."
msgstr ""
"``'_'`` 选项表示对浮点表示类型和整数表示类型 ``'d'`` 使用下划线作为千位分隔符。 对于整数表示类型 ``'b'``, ``'o'``, "
"``'x'`` 和 ``'X'``，将为每 4 个数位插入一个下划线。 对于其他表示类型指定此选项则将导致错误。"

#: ../../library/string.rst:427
msgid "Added the ``'_'`` option (see also :pep:`515`)."
msgstr "添加了 ``'_'`` 选项 (另请参阅 :pep:`515`)。"

#: ../../library/string.rst:430
msgid ""
"*width* is a decimal integer defining the minimum total field width, "
"including any prefixes, separators, and other formatting characters. If not "
"specified, then the field width will be determined by the content."
msgstr "*width* 是一个定义最小总字段宽度的十进制整数，包括任何前缀、分隔符和其他格式化字符。 如果未指定，则字段宽度将由内容确定。"

#: ../../library/string.rst:434
msgid ""
"When no explicit alignment is given, preceding the *width* field by a zero "
"(``'0'``) character enables sign-aware zero-padding for numeric types.  This"
" is equivalent to a *fill* character of ``'0'`` with an *alignment* type of "
"``'='``."
msgstr ""
"当未显式给出对齐方式时，在 *width* 字段前加一个零 (``'0'``) 字段将为数字类型启用感知正负号的零填充。 这相当于设置 *fill* "
"字符为 ``'0'`` 且 *alignment* 类型为 ``'='``。"

#: ../../library/string.rst:439
msgid ""
"Preceding the *width* field by ``'0'`` no longer affects the default "
"alignment for strings."
msgstr "在 *width* 字段之前添加 ``'0'`` 不会再影响字符串的默认对齐。"

#: ../../library/string.rst:443
msgid ""
"The *precision* is a decimal integer indicating how many digits should be "
"displayed after the decimal point for presentation types ``'f'`` and "
"``'F'``, or before and after the decimal point for presentation types "
"``'g'`` or ``'G'``.  For string presentation types the field indicates the "
"maximum field size - in other words, how many characters will be used from "
"the field content.  The *precision* is not allowed for integer presentation "
"types."
msgstr ""
"*precision* 是一个十进制整数，它表示对于以表示类型 ``'f'`` 和 ``'F'`` "
"格式化的数值应当在小数点后显示多少个数位，或者对于以表示类型 ``'g'`` 或 ``'G'`` 格式化的数值应当在小数点前后显示多少个数位。 "
"对于字符串表示类型，该字段表示最大的字段大小 ——换句话说，就是要使用多少个来自字段内容的字符。不允许对整数表示类型指定 *precision* 字段。"

#: ../../library/string.rst:451
msgid "Finally, the *type* determines how the data should be presented."
msgstr "最后，*type* 确定了数据应如何呈现。"

#: ../../library/string.rst:453
msgid "The available string presentation types are:"
msgstr "可用的字符串表示类型是："

#: ../../library/string.rst:456 ../../library/string.rst:467
#: ../../library/string.rst:502
msgid "Type"
msgstr "类型"

#: ../../library/string.rst:458
msgid "``'s'``"
msgstr "``'s'``"

#: ../../library/string.rst:458
msgid ""
"String format. This is the default type for strings and may be omitted."
msgstr "字符串格式。这是字符串的默认类型，可以省略。"

#: ../../library/string.rst:461 ../../library/string.rst:490
#: ../../library/string.rst:577
msgid "None"
msgstr "None"

#: ../../library/string.rst:461
msgid "The same as ``'s'``."
msgstr "和 ``'s'`` 一样。"

#: ../../library/string.rst:464
msgid "The available integer presentation types are:"
msgstr "可用的整数表示类型是："

#: ../../library/string.rst:469
msgid "``'b'``"
msgstr "``'b'``"

#: ../../library/string.rst:469
msgid "Binary format. Outputs the number in base 2."
msgstr "二进制格式。 输出以 2 为基数的数字。"

#: ../../library/string.rst:471
msgid "``'c'``"
msgstr "``'c'``"

#: ../../library/string.rst:471
msgid ""
"Character. Converts the integer to the corresponding unicode character "
"before printing."
msgstr "字符。在打印之前将整数转换为相应的unicode字符。"

#: ../../library/string.rst:474
msgid "``'d'``"
msgstr "``'d'``"

#: ../../library/string.rst:474
msgid "Decimal Integer. Outputs the number in base 10."
msgstr "十进制整数。 输出以 10 为基数的数字。"

#: ../../library/string.rst:476
msgid "``'o'``"
msgstr "``'o'``"

#: ../../library/string.rst:476
msgid "Octal format. Outputs the number in base 8."
msgstr "八进制格式。 输出以 8 为基数的数字。"

#: ../../library/string.rst:478
msgid "``'x'``"
msgstr "``'x'``"

#: ../../library/string.rst:478
msgid ""
"Hex format. Outputs the number in base 16, using lower-case letters for the "
"digits above 9."
msgstr "十六进制格式。 输出以 16 为基数的数字，使用小写字母表示 9 以上的数码。"

#: ../../library/string.rst:481
msgid "``'X'``"
msgstr "``'X'``"

#: ../../library/string.rst:481
msgid ""
"Hex format. Outputs the number in base 16, using upper-case letters for the "
"digits above 9. In case ``'#'`` is specified, the prefix ``'0x'`` will be "
"upper-cased to ``'0X'`` as well."
msgstr ""
"十六进制格式。 输出以 16 为基数的数字，使用大写字母表示 9 以上的数码。 在指定 ``'#'`` 的情况下，前缀 ``'0x'`` "
"也将被转为大写形式 ``'0X'``。"

#: ../../library/string.rst:486 ../../library/string.rst:570
msgid "``'n'``"
msgstr "``'n'``"

#: ../../library/string.rst:486
msgid ""
"Number. This is the same as ``'d'``, except that it uses the current locale "
"setting to insert the appropriate number separator characters."
msgstr "数字。 这与 ``'d'`` 相似，不同之处在于它会使用当前区域设置来插入适当的数字分隔字符。"

#: ../../library/string.rst:490
msgid "The same as ``'d'``."
msgstr "和 ``'d'`` 相同。"

#: ../../library/string.rst:493
msgid ""
"In addition to the above presentation types, integers can be formatted with "
"the floating point presentation types listed below (except ``'n'`` and "
"``None``). When doing so, :func:`float` is used to convert the integer to a "
"floating point number before formatting."
msgstr ""
"在上述的表示类型之外，整数还可以通过下列的浮点表示类型来格式化 (除了 ``'n'`` 和 ``None``)。 当这样做时，会在格式化之前使用 "
":func:`float` 将整数转换为浮点数。"

#: ../../library/string.rst:498
msgid ""
"The available presentation types for :class:`float` and "
":class:`~decimal.Decimal` values are:"
msgstr ":class:`float` 和 :class:`~decimal.Decimal` 值的可用表示类型有:"

#: ../../library/string.rst:504
msgid "``'e'``"
msgstr "``'e'``"

#: ../../library/string.rst:504
msgid ""
"Scientific notation. For a given precision ``p``, formats the number in "
"scientific notation with the letter 'e' separating the coefficient from the "
"exponent. The coefficient has one digit before and ``p`` digits after the "
"decimal point, for a total of ``p + 1`` significant digits. With no "
"precision given, uses a precision of ``6`` digits after the decimal point "
"for :class:`float`, and shows all coefficient digits for "
":class:`~decimal.Decimal`. If no digits follow the decimal point, the "
"decimal point is also removed unless the ``#`` option is used."
msgstr ""
"科学计数法。 对于一个给定的精度 ``p``，将数字格式化为以字母 'e' 分隔系数和指数的科学计数法形式。 系数在小数点之前有一位，之后有 ``p``"
" 位，总计 ``p + 1`` 个有效数位。 如未指定精度，则会对 :class:`float` 采用小数点之后 ``6`` 位精度，而对 "
":class:`~decimal.Decimal` 则显示所有系数位。 如果小数点之后没有数位，则小数点也会被略去，除非使用了 ``#`` 选项。"

#: ../../library/string.rst:516
msgid "``'E'``"
msgstr "``'E'``"

#: ../../library/string.rst:516
msgid ""
"Scientific notation. Same as ``'e'`` except it uses an upper case 'E' as the"
" separator character."
msgstr "科学计数法。 与 ``'e'`` 相似，不同之处在于它使用大写字母 'E' 作为分隔字符。"

#: ../../library/string.rst:519
msgid "``'f'``"
msgstr "``'f'``"

#: ../../library/string.rst:519
msgid ""
"Fixed-point notation. For a given precision ``p``, formats the number as a "
"decimal number with exactly ``p`` digits following the decimal point. With "
"no precision given, uses a precision of ``6`` digits after the decimal point"
" for :class:`float`, and uses a precision large enough to show all "
"coefficient digits for :class:`~decimal.Decimal`. If no digits follow the "
"decimal point, the decimal point is also removed unless the ``#`` option is "
"used."
msgstr ""
"定点表示法。 对于一个给定的精度 ``p``，将数字格式化为在小数点之后恰好有 ``p`` 位的小数形式。 如未指定精度，则会对 "
":class:`float` 采用小数点之后 ``6`` 位精度，而对 :class:`~decimal.Decimal` "
"则使用大到足够显示所有系数位的精度。 如果小数点之后没有数位，则小数点也会被略去，除非使用了 ``#`` 选项。"

#: ../../library/string.rst:529
msgid "``'F'``"
msgstr "``'F'``"

#: ../../library/string.rst:529
msgid ""
"Fixed-point notation. Same as ``'f'``, but converts ``nan`` to  ``NAN`` and "
"``inf`` to ``INF``."
msgstr "定点表示。 与 ``'f'`` 相似，但会将 ``nan`` 转为  ``NAN`` 并将 ``inf`` 转为 ``INF``。"

#: ../../library/string.rst:532
msgid "``'g'``"
msgstr "``'g'``"

#: ../../library/string.rst:532
msgid ""
"General format.  For a given precision ``p >= 1``, this rounds the number to"
" ``p`` significant digits and then formats the result in either fixed-point "
"format or in scientific notation, depending on its magnitude. A precision of"
" ``0`` is treated as equivalent to a precision of ``1``."
msgstr ""
"常规格式。 对于给定精度 ``p >= 1``，这会将数值舍入到 ``p`` "
"个有效数位，再将结果以定点表示法或科学计数法进行格式化，具体取决于其值的大小。 精度 ``0`` 会被视为等价于精度 ``1``。"

#: ../../library/string.rst:539
msgid ""
"The precise rules are as follows: suppose that the result formatted with "
"presentation type ``'e'`` and precision ``p-1`` would have exponent ``exp``."
"  Then, if ``m <= exp < p``, where ``m`` is -4 for floats and -6 for "
":class:`Decimals <decimal.Decimal>`, the number is formatted with "
"presentation type ``'f'`` and precision ``p-1-exp``.  Otherwise, the number "
"is formatted with presentation type ``'e'`` and precision ``p-1``. In both "
"cases insignificant trailing zeros are removed from the significand, and the"
" decimal point is also removed if there are no remaining digits following "
"it, unless the ``'#'`` option is used."
msgstr ""
"准确的规则如下：假设使用表示类型 ``'e'`` 和精度 ``p-1`` 进行格式化的结果具有指数值 ``exp``。 那么如果 ``m <= exp "
"< p``，其中 ``m`` 以 -4 表示浮点值而以 -6 表示 :class:`Decimal <decimal.Decimal>` "
"值，该数字将使用类型 ``'f'`` 和精度 ``p-1-exp`` 进行格式化。 否则的话，该数字将使用表示类型 ``'e'`` 和精度 "
"``p-1`` 进行格式化。 在两种情况下，都会从有效数字中移除无意义的末尾零，如果小数点之后没有余下数字则小数点也会被移除，除非使用了 ``'#'``"
" 选项。"

#: ../../library/string.rst:552
msgid ""
"With no precision given, uses a precision of ``6`` significant digits for "
":class:`float`. For :class:`~decimal.Decimal`, the coefficient of the result"
" is formed from the coefficient digits of the value; scientific notation is "
"used for values smaller than ``1e-6`` in absolute value and values where the"
" place value of the least significant digit is larger than 1, and fixed-"
"point notation is used otherwise."
msgstr ""
"如未指定精度，会对 :class:`float` 采用 ``6`` 个有效数位的精度。 对于 "
":class:`~decimal.Decimal`，结果的系数会沿用原值的系数数位；对于绝对值小于 ``1e-6`` 的值以及最小有效数位的位值大于 1"
" 的数值将会使用科学计数法，在其他情况下则会使用定点表示法。"

#: ../../library/string.rst:561
msgid ""
"Positive and negative infinity, positive and negative zero, and nans, are "
"formatted as ``inf``, ``-inf``, ``0``, ``-0`` and ``nan`` respectively, "
"regardless of the precision."
msgstr ""
"正负无穷，正负零和 nan 会分别被格式化为 ``inf``, ``-inf``, ``0``, ``-0`` 和 ``nan``，无论精度如何设定。"

#: ../../library/string.rst:566
msgid "``'G'``"
msgstr "``'G'``"

#: ../../library/string.rst:566
msgid ""
"General format. Same as ``'g'`` except switches to ``'E'`` if the number "
"gets too large. The representations of infinity and NaN are uppercased, too."
msgstr "常规格式。 类似于 ``'g'``，不同之处在于当数值非常大时会切换为 ``'E'``。 无穷与 NaN 也会表示为大写形式。"

#: ../../library/string.rst:570
msgid ""
"Number. This is the same as ``'g'``, except that it uses the current locale "
"setting to insert the appropriate number separator characters."
msgstr "数字。 这与 ``'g'`` 相似，不同之处在于它会使用当前区域设置来插入适当的数字分隔字符。"

#: ../../library/string.rst:574
msgid "``'%'``"
msgstr "``'%'``"

#: ../../library/string.rst:574
msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed (``'f'``) "
"format, followed by a percent sign."
msgstr "百分比。 将数字乘以 100 并显示为定点 (``'f'``) 格式，后面带一个百分号。"

#: ../../library/string.rst:577
msgid ""
"For :class:`float` this is the same as ``'g'``, except that when fixed-point"
" notation is used to format the result, it always includes at least one "
"digit past the decimal point. The precision used is as large as needed to "
"represent the given value faithfully."
msgstr ""
"对于 :class:`float` 来说这类似于 ``'g'``，不同之处在于当使用定点表示法时，小数点之后将至少显示一位。 "
"所用的精度会大到足以精确表示给定的值。"

#: ../../library/string.rst:583
msgid ""
"For :class:`~decimal.Decimal`, this is the same as either ``'g'`` or ``'G'``"
" depending on the value of ``context.capitals`` for the current decimal "
"context."
msgstr ""
"对于 :class:`~decimal.Decimal` 来说这相当于 ``'g'`` 或 ``'G'``，具体取决于当前 decimal 上下文的 "
"``context.capitals`` 值。"

#: ../../library/string.rst:587
msgid ""
"The overall effect is to match the output of :func:`str` as altered by the "
"other format modifiers."
msgstr "总体效果是将 :func:`str` 的输出匹配为其他格式化因子所调整出的样子。"

#: ../../library/string.rst:595
msgid "Format examples"
msgstr "格式示例"

#: ../../library/string.rst:597
msgid ""
"This section contains examples of the :meth:`str.format` syntax and "
"comparison with the old ``%``-formatting."
msgstr "本节包含 :meth:`str.format` 语法的示例以及与旧式 ``%`` 格式化的比较。"

#: ../../library/string.rst:600
msgid ""
"In most of the cases the syntax is similar to the old ``%``-formatting, with"
" the addition of the ``{}`` and with ``:`` used instead of ``%``. For "
"example, ``'%03.2f'`` can be translated to ``'{:03.2f}'``."
msgstr ""
"该语法在大多数情况下与旧式的 ``%`` 格式化类似，只是增加了 ``{}`` 和 ``:`` 来取代 ``%``。 例如，，``'%03.2f'`` "
"可以被改写为 ``'{:03.2f}'``。"

#: ../../library/string.rst:604
msgid ""
"The new format syntax also supports new and different options, shown in the "
"following examples."
msgstr "新的格式语法还支持新增的不同选项，将在以下示例中说明。"

#: ../../library/string.rst:607
msgid "Accessing arguments by position::"
msgstr "按位置访问参数::"

#: ../../library/string.rst:620
msgid "Accessing arguments by name::"
msgstr "按名称访问参数::"

#: ../../library/string.rst:628
msgid "Accessing arguments' attributes::"
msgstr "访问参数的属性::"

#: ../../library/string.rst:643
msgid "Accessing arguments' items::"
msgstr "访问参数的项::"

#: ../../library/string.rst:649
msgid "Replacing ``%s`` and ``%r``::"
msgstr "替代 ``%s`` 和 ``%r``::"

#: ../../library/string.rst:654
msgid "Aligning the text and specifying a width::"
msgstr "对齐文本以及指定宽度::"

#: ../../library/string.rst:665
msgid "Replacing ``%+f``, ``%-f``, and ``% f`` and specifying a sign::"
msgstr "替代 ``%+f``, ``%-f`` 和 ``% f`` 以及指定正负号::"

#: ../../library/string.rst:674
msgid ""
"Replacing ``%x`` and ``%o`` and converting the value to different bases::"
msgstr "替代 ``%x`` 和 ``%o`` 以及转换基于不同进位制的值::"

#: ../../library/string.rst:683
msgid "Using the comma as a thousands separator::"
msgstr "使用逗号作为千位分隔符::"

#: ../../library/string.rst:688
msgid "Expressing a percentage::"
msgstr "表示为百分数::"

#: ../../library/string.rst:695
msgid "Using type-specific formatting::"
msgstr "使用特定类型的专属格式化::"

#: ../../library/string.rst:702
msgid "Nesting arguments and more complex examples::"
msgstr "嵌套参数以及更复杂的示例::"

#: ../../library/string.rst:736
msgid "Template strings"
msgstr "模板字符串"

#: ../../library/string.rst:738
msgid ""
"Template strings provide simpler string substitutions as described in "
":pep:`292`.  A primary use case for template strings is for "
"internationalization (i18n) since in that context, the simpler syntax and "
"functionality makes it easier to translate than other built-in string "
"formatting facilities in Python.  As an example of a library built on "
"template strings for i18n, see the `flufl.i18n "
"<https://flufli18n.readthedocs.io/en/latest/>`_ package."
msgstr ""
"模板字符串提供了由 :pep:`292` 所描述的更简便的字符串替换方式。 模板字符串的一个主要用例是文本国际化 "
"(i18n)，因为在此情境下，更简单的语法和功能使得文本翻译过程比使用 Python 的其他内置字符串格式化工具更方便。 作为基于模板字符串构建以实现 "
"i18n 的库的一个例子，请参看 `flufl.i18n <https://flufli18n.readthedocs.io/en/latest/>`_"
" 包。"

#: ../../library/string.rst:748
msgid ""
"Template strings support ``$``-based substitutions, using the following "
"rules:"
msgstr "模板字符串支持基于 ``$`` 的替换，使用以下规则："

#: ../../library/string.rst:750
msgid "``$$`` is an escape; it is replaced with a single ``$``."
msgstr "``$$`` 为转义符号；它会被替换为单个的 ``$``。"

#: ../../library/string.rst:752
msgid ""
"``$identifier`` names a substitution placeholder matching a mapping key of "
"``\"identifier\"``.  By default, ``\"identifier\"`` is restricted to any "
"case-insensitive ASCII alphanumeric string (including underscores) that "
"starts with an underscore or ASCII letter.  The first non-identifier "
"character after the ``$`` character terminates this placeholder "
"specification."
msgstr ""
"``$identifier`` 为替换占位符，它会匹配一个名为 ``\"identifier\"`` 的映射键。 "
"在默认情况下，``\"identifier\"`` 限制为任意 ASCII 字母数字（包括下划线）组成的字符串，不区分大小写，以下划线或 ASCII "
"字母开头。 在 ``$`` 字符之后的第一个非标识符字符将表明占位符的终结。"

#: ../../library/string.rst:759
msgid ""
"``${identifier}`` is equivalent to ``$identifier``.  It is required when "
"valid identifier characters follow the placeholder but are not part of the "
"placeholder, such as ``\"${noun}ification\"``."
msgstr ""
"``${identifier}`` 等价于 ``$identifier``。 当占位符之后紧跟着有效的但又不是占位符一部分的标识符字符时需要使用，例如 "
"``\"${noun}ification\"``。"

#: ../../library/string.rst:763
msgid ""
"Any other appearance of ``$`` in the string will result in a "
":exc:`ValueError` being raised."
msgstr "在字符串的其他位置出现 ``$`` 将导致引发 :exc:`ValueError`。"

#: ../../library/string.rst:766
msgid ""
"The :mod:`string` module provides a :class:`Template` class that implements "
"these rules.  The methods of :class:`Template` are:"
msgstr ""
":mod:`string` 模块提供了实现这些规则的 :class:`Template` 类。 :class:`Template` 有下列方法："

#: ../../library/string.rst:772
msgid "The constructor takes a single argument which is the template string."
msgstr "该构造器接受一个参数作为模板字符串。"

#: ../../library/string.rst:777
msgid ""
"Performs the template substitution, returning a new string.  *mapping* is "
"any dictionary-like object with keys that match the placeholders in the "
"template.  Alternatively, you can provide keyword arguments, where the "
"keywords are the placeholders.  When both *mapping* and *kwds* are given and"
" there are duplicates, the placeholders from *kwds* take precedence."
msgstr ""
"执行模板替换，返回一个新字符串。 *mapping* 为任意字典类对象，其中的键将匹配模板中的占位符。 "
"或者你也可以提供一组关键字参数，其中的关键字即对应占位符。 当同时给出 *mapping* 和 *kwds* 并且存在重复时，则以 *kwds* "
"中的占位符为优先。"

#: ../../library/string.rst:786
msgid ""
"Like :meth:`substitute`, except that if placeholders are missing from "
"*mapping* and *kwds*, instead of raising a :exc:`KeyError` exception, the "
"original placeholder will appear in the resulting string intact.  Also, "
"unlike with :meth:`substitute`, any other appearances of the ``$`` will "
"simply return ``$`` instead of raising :exc:`ValueError`."
msgstr ""
"类似于 :meth:`substitute`，不同之处是如果有占位符未在 *mapping* 和 *kwds* 中找到，不是引发 "
":exc:`KeyError` 异常，而是将原始占位符不加修改地显示在结果字符串中。 另一个与 :meth:`substitute` "
"的差异是任何在其他情况下出现的 ``$`` 将简单地返回 ``$`` 而不是引发 :exc:`ValueError`。"

#: ../../library/string.rst:792
msgid ""
"While other exceptions may still occur, this method is called \"safe\" "
"because it always tries to return a usable string instead of raising an "
"exception.  In another sense, :meth:`safe_substitute` may be anything other "
"than safe, since it will silently ignore malformed templates containing "
"dangling delimiters, unmatched braces, or placeholders that are not valid "
"Python identifiers."
msgstr ""
"此方法被认为“安全”，因为虽然仍有可能发生其他异常，但它总是尝试返回可用的字符串而不是引发一个异常。 "
"从另一方面来说，:meth:`safe_substitute` "
"也可能根本算不上安全，因为它将静默地忽略错误格式的模板，例如包含多余的分隔符、不成对的花括号或不是合法 Python 标识符的占位符等等。"

#: ../../library/string.rst:802
msgid ""
"Returns false if the template has invalid placeholders that will cause "
":meth:`substitute` to raise :exc:`ValueError`."
msgstr "如果模板有会导致 :meth:`substitute` 引发 :exc:`ValueError` 的无效占位符则返回假值。"

#: ../../library/string.rst:810
msgid ""
"Returns a list of the valid identifiers in the template, in the order they "
"first appear, ignoring any invalid identifiers."
msgstr "返回模板中有效占位符的列表，按它们首次出现的顺序排列，忽略任何无效标识符。"

#: ../../library/string.rst:815
msgid ":class:`Template` instances also provide one public data attribute:"
msgstr ":class:`Template` 的实例还提供一个公有数据属性："

#: ../../library/string.rst:819
msgid ""
"This is the object passed to the constructor's *template* argument.  In "
"general, you shouldn't change it, but read-only access is not enforced."
msgstr "这是作为构造器的 *template* 参数被传入的对象。 一般来说，你不应该修改它，但并不强制要求只读访问。"

#: ../../library/string.rst:822
msgid "Here is an example of how to use a Template::"
msgstr "以下是一个如何使用模版的示例："

#: ../../library/string.rst:840
msgid ""
"Advanced usage: you can derive subclasses of :class:`Template` to customize "
"the placeholder syntax, delimiter character, or the entire regular "
"expression used to parse template strings.  To do this, you can override "
"these class attributes:"
msgstr ""
"进阶用法：你可以派生 :class:`Template` 的子类来自定义占位符语法、分隔符，或用于解析模板字符串的整个正则表达式。 "
"为此目的，你可以重载这些类属性："

#: ../../library/string.rst:845
msgid ""
"*delimiter* -- This is the literal string describing a placeholder "
"introducing delimiter.  The default value is ``$``.  Note that this should "
"*not* be a regular expression, as the implementation will call "
":meth:`re.escape` on this string as needed.  Note further that you cannot "
"change the delimiter after class creation (i.e. a different delimiter must "
"be set in the subclass's class namespace)."
msgstr ""
"*delimiter* -- 这是用来表示占位符的起始的分隔符的字符串字面值。 默认值为 ``$``。 请注意此参数 *不能* "
"为正则表达式，因为其实现将在必要时对此字符串调用 :meth:`re.escape`。 "
"还要注意你不能在创建类之后改变此分隔符（例如在子类的类命名空间中必须设置不同的分隔符）。"

#: ../../library/string.rst:852
msgid ""
"*idpattern* -- This is the regular expression describing the pattern for "
"non-braced placeholders.  The default value is the regular expression "
"``(?a:[_a-z][_a-z0-9]*)``.  If this is given and *braceidpattern* is "
"``None`` this pattern will also apply to braced placeholders."
msgstr ""
"*idpattern* -- 这是用来描述不带花括号的占位符的模式的正则表达式。 默认值为正则表达式 "
"``(?a:[_a-z][_a-z0-9]*)``。 如果给出了此属性并且 *braceidpattern* 为 ``None`` "
"则此模式也将作用于带花括号的占位符。"

#: ../../library/string.rst:859
msgid ""
"Since default *flags* is ``re.IGNORECASE``, pattern ``[a-z]`` can match with"
" some non-ASCII characters. That's why we use the local ``a`` flag here."
msgstr ""
"由于默认的 *flags* 为 ``re.IGNORECASE``，模式 ``[a-z]`` 可以匹配某些非 ASCII 字符。 "
"因此我们在这里使用了局部旗标 ``a``。"

#: ../../library/string.rst:863
msgid ""
"*braceidpattern* can be used to define separate patterns used inside and "
"outside the braces."
msgstr "*braceidpattern* 可被用来定义对花括号内部和外部进行区分的模式。"

#: ../../library/string.rst:867
msgid ""
"*braceidpattern* -- This is like *idpattern* but describes the pattern for "
"braced placeholders.  Defaults to ``None`` which means to fall back to "
"*idpattern* (i.e. the same pattern is used both inside and outside braces). "
"If given, this allows you to define different patterns for braced and "
"unbraced placeholders."
msgstr ""
"*braceidpattern* -- 此属性类似于 *idpattern* 但是用来描述带花括号的占位符的模式。 默认值 ``None`` "
"意味着回退到 *idpattern* (即在花括号内部和外部使用相同的模式)。 如果给出此属性，这将允许你为带花括号和不带花括号的占位符定义不同的模式。"

#: ../../library/string.rst:875
msgid ""
"*flags* -- The regular expression flags that will be applied when compiling "
"the regular expression used for recognizing substitutions.  The default "
"value is ``re.IGNORECASE``.  Note that ``re.VERBOSE`` will always be added "
"to the flags, so custom *idpattern*\\ s must follow conventions for verbose "
"regular expressions."
msgstr ""
"*flags* -- 将在编译用于识别替换内容的正则表达式被应用的正则表达式旗标。 默认值为 ``re.IGNORECASE``。 请注意 "
"``re.VERBOSE`` 总是会被加为旗标，因此自定义的 *idpattern* 必须遵循详细正则表达式的约定。"

#: ../../library/string.rst:883
msgid ""
"Alternatively, you can provide the entire regular expression pattern by "
"overriding the class attribute *pattern*.  If you do this, the value must be"
" a regular expression object with four named capturing groups.  The "
"capturing groups correspond to the rules given above, along with the invalid"
" placeholder rule:"
msgstr ""
"作为另一种选项，你可以通过重载类属性 *pattern* 来提供整个正则表达式模式。 如果你这样做，该值必须为一个具有四个命名捕获组的正则表达式对象。 "
"这些捕获组对应于上面已经给出的规则，以及无效占位符的规则："

#: ../../library/string.rst:889
msgid ""
"*escaped* -- This group matches the escape sequence, e.g. ``$$``, in the "
"default pattern."
msgstr "*escaped* -- 这个组匹配转义序列，在默认模式中即 ``$$``。"

#: ../../library/string.rst:892
msgid ""
"*named* -- This group matches the unbraced placeholder name; it should not "
"include the delimiter in capturing group."
msgstr "*named* -- 这个组匹配不带花括号的占位符名称；它不应当包含捕获组中的分隔符。"

#: ../../library/string.rst:895
msgid ""
"*braced* -- This group matches the brace enclosed placeholder name; it "
"should not include either the delimiter or braces in the capturing group."
msgstr "*braced* -- 这个组匹配带有花括号的占位符名称；它不应当包含捕获组中的分隔符或者花括号。"

#: ../../library/string.rst:898
msgid ""
"*invalid* -- This group matches any other delimiter pattern (usually a "
"single delimiter), and it should appear last in the regular expression."
msgstr "*invalid* -- 这个组匹配任何其他分隔符模式（通常为单个分隔符），并且它应当出现在正则表达式的末尾。"

#: ../../library/string.rst:901
msgid ""
"The methods on this class will raise :exc:`ValueError` if the pattern "
"matches the template without one of these named groups matching."
msgstr "如果模式匹配模板但这些命名分组均不匹配则该类上的方法将引发 :exc:`ValueError`。"

#: ../../library/string.rst:906
msgid "Helper functions"
msgstr "辅助函数"

#: ../../library/string.rst:910
msgid ""
"Split the argument into words using :meth:`str.split`, capitalize each word "
"using :meth:`str.capitalize`, and join the capitalized words using "
":meth:`str.join`.  If the optional second argument *sep* is absent or "
"``None``, runs of whitespace characters are replaced by a single space and "
"leading and trailing whitespace are removed, otherwise *sep* is used to "
"split and join the words."
msgstr ""
"使用 :meth:`str.split` 将参数拆分为单词，使用 :meth:`str.capitalize` 将单词转为大写形式，使用 "
":meth:`str.join` 将大写的单词进行拼接。 如果可选的第二个参数 *sep* 被省略或为 "
"``None``，则连续的空白字符会被替换为单个空格符并且开头和末尾的空白字符会被移除，否则 *sep* 会被用来拆分和拼接单词。"

#: ../../library/string.rst:195
msgid "{} (curly brackets)"
msgstr "{} (花括号)"

#: ../../library/string.rst:195 ../../library/string.rst:335
#: ../../library/string.rst:367 ../../library/string.rst:386
#: ../../library/string.rst:395 ../../library/string.rst:409
#: ../../library/string.rst:418
msgid "in string formatting"
msgstr "在字符串格式化中"

#: ../../library/string.rst:195
msgid ". (dot)"
msgstr ". (点号)"

#: ../../library/string.rst:195
msgid "[] (square brackets)"
msgstr "[] (方括号)"

#: ../../library/string.rst:195
msgid "! (exclamation)"
msgstr "! (感叹号)"

#: ../../library/string.rst:195
msgid ": (colon)"
msgstr ": (冒号)"

#: ../../library/string.rst:335
msgid "< (less)"
msgstr "< (小与)"

#: ../../library/string.rst:335
msgid "> (greater)"
msgstr "> (大与)"

#: ../../library/string.rst:335
msgid "= (equals)"
msgstr "= (等于号)"

#: ../../library/string.rst:335
msgid "^ (caret)"
msgstr "^ (脱字号)"

#: ../../library/string.rst:367
msgid "+ (plus)"
msgstr "+ (加号)"

#: ../../library/string.rst:367
msgid "- (minus)"
msgstr "- (减号)"

#: ../../library/string.rst:386
msgid "z"
msgstr "z"

#: ../../library/string.rst:395
msgid "# (hash)"
msgstr "# (hash)"

#: ../../library/string.rst:409
msgid ", (comma)"
msgstr ", (逗号)"

#: ../../library/string.rst:418
msgid "_ (underscore)"
msgstr "_ (下划线)"

#: ../../library/string.rst:746
msgid "$ (dollar)"
msgstr "$ (货币符号)"

#: ../../library/string.rst:746
msgid "in template strings"
msgstr "在模板字符串中"
