# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/formatter.rst:2
msgid ":mod:`formatter` --- Generic output formatting"
msgstr ""

#: ../../library/formatter.rst:8
msgid "Due to lack of usage, the formatter module has been deprecated."
msgstr ""

#: ../../library/formatter.rst:13
msgid ""
"This module supports two interface definitions, each with multiple "
"implementations: The *formatter* interface, and the *writer* interface which"
" is required by the formatter interface."
msgstr ""

#: ../../library/formatter.rst:17
msgid ""
"Formatter objects transform an abstract flow of formatting events into "
"specific output events on writer objects.  Formatters manage several stack "
"structures to allow various properties of a writer object to be changed and "
"restored; writers need not be able to handle relative changes nor any sort "
"of \"change back\" operation.  Specific writer properties which may be "
"controlled via formatter objects are horizontal alignment, font, and left "
"margin indentations.  A mechanism is provided which supports providing "
"arbitrary, non-exclusive style settings to a writer as well.  Additional "
"interfaces facilitate formatting events which are not reversible, such as "
"paragraph separation."
msgstr ""

#: ../../library/formatter.rst:27
msgid ""
"Writer objects encapsulate device interfaces.  Abstract devices, such as "
"file formats, are supported as well as physical devices.  The provided "
"implementations all work with abstract devices.  The interface makes "
"available mechanisms for setting the properties which formatter objects "
"manage and inserting data into the output."
msgstr ""

#: ../../library/formatter.rst:37
msgid "The Formatter Interface"
msgstr ""

#: ../../library/formatter.rst:39
msgid ""
"Interfaces to create formatters are dependent on the specific formatter "
"class being instantiated.  The interfaces described below are the required "
"interfaces which all formatters must support once initialized."
msgstr ""

#: ../../library/formatter.rst:43
msgid "One data element is defined at the module level:"
msgstr ""

#: ../../library/formatter.rst:48
msgid ""
"Value which can be used in the font specification passed to the "
"``push_font()`` method described below, or as the new value to any other "
"``push_property()`` method.  Pushing the ``AS_IS`` value allows the "
"corresponding ``pop_property()`` method to be called without having to track"
" whether the property was changed."
msgstr ""

#: ../../library/formatter.rst:53
msgid "The following attributes are defined for formatter instance objects:"
msgstr ""

#: ../../library/formatter.rst:58
msgid "The writer instance with which the formatter interacts."
msgstr ""

#: ../../library/formatter.rst:63
msgid ""
"Close any open paragraphs and insert at least *blanklines* before the next "
"paragraph."
msgstr ""

#: ../../library/formatter.rst:69
msgid ""
"Add a hard line break if one does not already exist.  This does not break "
"the logical paragraph."
msgstr ""

#: ../../library/formatter.rst:75
msgid ""
"Insert a horizontal rule in the output.  A hard break is inserted if there "
"is data in the current paragraph, but the logical paragraph is not broken.  "
"The arguments and keywords are passed on to the writer's "
":meth:`send_line_break` method."
msgstr ""

#: ../../library/formatter.rst:83
msgid ""
"Provide data which should be formatted with collapsed whitespace. Whitespace"
" from preceding and successive calls to :meth:`add_flowing_data` is "
"considered as well when the whitespace collapse is performed.  The data "
"which is passed to this method is expected to be word-wrapped by the output "
"device.  Note that any word-wrapping still must be performed by the writer "
"object due to the need to rely on device and font information."
msgstr ""

#: ../../library/formatter.rst:93
msgid ""
"Provide data which should be passed to the writer unchanged. Whitespace, "
"including newline and tab characters, are considered legal in the value of "
"*data*."
msgstr ""

#: ../../library/formatter.rst:100
msgid ""
"Insert a label which should be placed to the left of the current left "
"margin. This should be used for constructing bulleted or numbered lists.  If"
" the *format* value is a string, it is interpreted as a format specification"
" for *counter*, which should be an integer. The result of this formatting "
"becomes the value of the label; if *format* is not a string it is used as "
"the label value directly. The label value is passed as the only argument to "
"the writer's :meth:`send_label_data` method.  Interpretation of non-string "
"label values is dependent on the associated writer."
msgstr ""

#: ../../library/formatter.rst:109
msgid ""
"Format specifications are strings which, in combination with a counter "
"value, are used to compute label values.  Each character in the format "
"string is copied to the label value, with some characters recognized to "
"indicate a transform on the counter value.  Specifically, the character "
"``'1'`` represents the counter value formatter as an Arabic number, the "
"characters ``'A'`` and ``'a'`` represent alphabetic representations of the "
"counter value in upper and lower case, respectively, and ``'I'`` and ``'i'``"
" represent the counter value in Roman numerals, in upper and lower case.  "
"Note that the alphabetic and roman transforms require that the counter value"
" be greater than zero."
msgstr ""

#: ../../library/formatter.rst:122
msgid ""
"Send any pending whitespace buffered from a previous call to "
":meth:`add_flowing_data` to the associated writer object.  This should be "
"called before any direct manipulation of the writer object."
msgstr ""

#: ../../library/formatter.rst:129
msgid ""
"Push a new alignment setting onto the alignment stack.  This may be "
":const:`AS_IS` if no change is desired.  If the alignment value is changed "
"from the previous setting, the writer's :meth:`new_alignment` method is "
"called with the *align* value."
msgstr ""

#: ../../library/formatter.rst:137
msgid "Restore the previous alignment."
msgstr ""

#: ../../library/formatter.rst:142
msgid ""
"Change some or all font properties of the writer object.  Properties which "
"are not set to :const:`AS_IS` are set to the values passed in while others "
"are maintained at their current settings.  The writer's :meth:`new_font` "
"method is called with the fully resolved font specification."
msgstr ""

#: ../../library/formatter.rst:150
msgid "Restore the previous font."
msgstr ""

#: ../../library/formatter.rst:155
msgid ""
"Increase the number of left margin indentations by one, associating the "
"logical tag *margin* with the new indentation.  The initial margin level is "
"``0``. Changed values of the logical tag must be true values; false values "
"other than :const:`AS_IS` are not sufficient to change the margin."
msgstr ""

#: ../../library/formatter.rst:163
msgid "Restore the previous margin."
msgstr ""

#: ../../library/formatter.rst:168
msgid ""
"Push any number of arbitrary style specifications.  All styles are pushed "
"onto the styles stack in order.  A tuple representing the entire stack, "
"including :const:`AS_IS` values, is passed to the writer's "
":meth:`new_styles` method."
msgstr ""

#: ../../library/formatter.rst:175
msgid ""
"Pop the last *n* style specifications passed to :meth:`push_style`.  A tuple"
" representing the revised stack, including :const:`AS_IS` values, is passed "
"to the writer's :meth:`new_styles` method."
msgstr ""

#: ../../library/formatter.rst:182
msgid "Set the spacing style for the writer."
msgstr ""

#: ../../library/formatter.rst:187
msgid ""
"Inform the formatter that data has been added to the current paragraph out-"
"of-band.  This should be used when the writer has been manipulated directly."
"  The optional *flag* argument can be set to false if the writer "
"manipulations produced a hard line break at the end of the output."
msgstr ""

#: ../../library/formatter.rst:196
msgid "Formatter Implementations"
msgstr ""

#: ../../library/formatter.rst:198
msgid ""
"Two implementations of formatter objects are provided by this module. Most "
"applications may use one of these classes without modification or "
"subclassing."
msgstr ""

#: ../../library/formatter.rst:204
msgid ""
"A formatter which does nothing.  If *writer* is omitted, a "
":class:`NullWriter` instance is created.  No methods of the writer are "
"called by :class:`NullFormatter` instances.  Implementations should inherit "
"from this class if implementing a writer interface but don't need to inherit"
" any implementation."
msgstr ""

#: ../../library/formatter.rst:213
msgid ""
"The standard formatter.  This implementation has demonstrated wide "
"applicability to many writers, and may be used directly in most "
"circumstances.  It has been used to implement a full-featured World Wide Web"
" browser."
msgstr ""

#: ../../library/formatter.rst:221
msgid "The Writer Interface"
msgstr ""

#: ../../library/formatter.rst:223
msgid ""
"Interfaces to create writers are dependent on the specific writer class "
"being instantiated.  The interfaces described below are the required "
"interfaces which all writers must support once initialized. Note that while "
"most applications can use the :class:`AbstractFormatter` class as a "
"formatter, the writer must typically be provided by the application."
msgstr ""

#: ../../library/formatter.rst:232
msgid "Flush any buffered output or device control events."
msgstr ""

#: ../../library/formatter.rst:237
msgid ""
"Set the alignment style.  The *align* value can be any object, but by "
"convention is a string or ``None``, where ``None`` indicates that the "
"writer's \"preferred\" alignment should be used. Conventional *align* values"
" are ``'left'``, ``'center'``, ``'right'``, and ``'justify'``."
msgstr ""

#: ../../library/formatter.rst:245
msgid ""
"Set the font style.  The value of *font* will be ``None``, indicating that "
"the device's default font should be used, or a tuple of the form ``(size, "
"italic, bold, teletype)``.  Size will be a string indicating the size of "
"font that should be used; specific strings and their interpretation must be "
"defined by the application.  The *italic*, *bold*, and *teletype* values are"
" Boolean values specifying which of those font attributes should be used."
msgstr ""

#: ../../library/formatter.rst:255
msgid ""
"Set the margin level to the integer *level* and the logical tag to *margin*."
" Interpretation of the logical tag is at the writer's discretion; the only "
"restriction on the value of the logical tag is that it not be a false value "
"for non-zero values of *level*."
msgstr ""

#: ../../library/formatter.rst:263
msgid "Set the spacing style to *spacing*."
msgstr ""

#: ../../library/formatter.rst:268
msgid ""
"Set additional styles.  The *styles* value is a tuple of arbitrary values; "
"the value :const:`AS_IS` should be ignored.  The *styles* tuple may be "
"interpreted either as a set or as a stack depending on the requirements of "
"the application and writer implementation."
msgstr ""

#: ../../library/formatter.rst:276
msgid "Break the current line."
msgstr ""

#: ../../library/formatter.rst:281
msgid ""
"Produce a paragraph separation of at least *blankline* blank lines, or the "
"equivalent.  The *blankline* value will be an integer.  Note that the "
"implementation will receive a call to :meth:`send_line_break` before this "
"call if a line break is needed;  this method should not include ending the "
"last line of the paragraph. It is only responsible for vertical spacing "
"between paragraphs."
msgstr ""

#: ../../library/formatter.rst:291
msgid ""
"Display a horizontal rule on the output device.  The arguments to this "
"method are entirely application- and writer-specific, and should be "
"interpreted with care.  The method implementation may assume that a line "
"break has already been issued via :meth:`send_line_break`."
msgstr ""

#: ../../library/formatter.rst:299
msgid ""
"Output character data which may be word-wrapped and re-flowed as needed.  "
"Within any sequence of calls to this method, the writer may assume that "
"spans of multiple whitespace characters have been collapsed to single space "
"characters."
msgstr ""

#: ../../library/formatter.rst:306
msgid ""
"Output character data which has already been formatted for display.  "
"Generally, this should be interpreted to mean that line breaks indicated by "
"newline characters should be preserved and no new line breaks should be "
"introduced.  The data may contain embedded newline and tab characters, "
"unlike data provided to the :meth:`send_formatted_data` interface."
msgstr ""

#: ../../library/formatter.rst:315
msgid ""
"Set *data* to the left of the current left margin, if possible. The value of"
" *data* is not restricted; treatment of non-string values is entirely "
"application- and writer-dependent.  This method will only be called at the "
"beginning of a line."
msgstr ""

#: ../../library/formatter.rst:324
msgid "Writer Implementations"
msgstr ""

#: ../../library/formatter.rst:326
msgid ""
"Three implementations of the writer object interface are provided as "
"examples by this module.  Most applications will need to derive new writer "
"classes from the :class:`NullWriter` class."
msgstr ""

#: ../../library/formatter.rst:333
msgid ""
"A writer which only provides the interface definition; no actions are taken "
"on any methods.  This should be the base class for all writers which do not "
"need to inherit any implementation methods."
msgstr ""

#: ../../library/formatter.rst:340
msgid ""
"A writer which can be used in debugging formatters, but not much else.  Each"
" method simply announces itself by printing its name and arguments on "
"standard output."
msgstr ""

#: ../../library/formatter.rst:347
msgid ""
"Simple writer class which writes output on the :term:`file object` passed in"
" as *file* or, if *file* is omitted, on standard output.  The output is "
"simply word-wrapped to the number of columns specified by *maxcol*.  This "
"class is suitable for reflowing a sequence of paragraphs."
msgstr ""
