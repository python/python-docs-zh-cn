# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:18+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xmlrpc.client.rst:2
msgid ":mod:`xmlrpc.client` --- XML-RPC client access"
msgstr ""

#: ../../library/xmlrpc.client.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/client.py`"
msgstr ""

#: ../../library/xmlrpc.client.rst:17
msgid ""
"XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) "
"as a transport.  With it, a client can call methods with parameters on a "
"remote server (the server is named by a URI) and get back structured data.  "
"This module supports writing XML-RPC client code; it handles all the details"
" of translating between conformable Python objects and XML on the wire."
msgstr ""

#: ../../library/xmlrpc.client.rst:26
msgid ""
"The :mod:`xmlrpc.client` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""

#: ../../library/xmlrpc.client.rst:32
msgid ""
"For HTTPS URIs, :mod:`xmlrpc.client` now performs all the necessary "
"certificate and hostname checks by default."
msgstr ""

#: ../../library/xmlrpc.client.rst:39
msgid ""
"A :class:`ServerProxy` instance is an object that manages communication with"
" a remote XML-RPC server.  The required first argument is a URI (Uniform "
"Resource Indicator), and will normally be the URL of the server.  The "
"optional second argument is a transport factory instance; by default it is "
"an internal :class:`SafeTransport` instance for https: URLs and an internal "
"HTTP :class:`Transport` instance otherwise.  The optional third argument is "
"an encoding, by default UTF-8. The optional fourth argument is a debugging "
"flag."
msgstr ""

#: ../../library/xmlrpc.client.rst:47
msgid ""
"The following parameters govern the use of the returned proxy instance. If "
"*allow_none* is true,  the Python constant ``None`` will be translated into "
"XML; the default behaviour is for ``None`` to raise a :exc:`TypeError`. This"
" is a commonly-used extension to the XML-RPC specification, but isn't "
"supported by all clients and servers; see `http://ontosys.com/xml-"
"rpc/extensions.php "
"<https://web.archive.org/web/20130120074804/http://ontosys.com/xml-"
"rpc/extensions.php>`_ for a description. The *use_builtin_types* flag can be"
" used to cause date/time values to be presented as "
":class:`datetime.datetime` objects and binary data to be presented as "
":class:`bytes` objects; this flag is false by default. "
":class:`datetime.datetime`, :class:`bytes` and :class:`bytearray` objects "
"may be passed to calls. The *headers* parameter is an optional sequence of "
"HTTP headers to send with each request, expressed as a sequence of 2-tuples "
"representing the header name and value. (e.g. `[('Header-Name', 'value')]`)."
" The obsolete *use_datetime* flag is similar to *use_builtin_types* but it "
"applies only to date/time values."
msgstr ""

#: ../../library/xmlrpc.client.rst:65 ../../library/xmlrpc.client.rst:546
msgid "The *use_builtin_types* flag was added."
msgstr ""

#: ../../library/xmlrpc.client.rst:68
msgid "The *headers* parameter was added."
msgstr ""

#: ../../library/xmlrpc.client.rst:71
msgid ""
"Both the HTTP and HTTPS transports support the URL syntax extension for HTTP"
" Basic Authentication: ``http://user:pass@host:port/path``.  The  "
"``user:pass`` portion will be base64-encoded as an HTTP 'Authorization' "
"header, and sent to the remote server as part of the connection process when"
" invoking an XML-RPC method.  You only need to use this if the remote server"
" requires a Basic Authentication user and password. If an HTTPS URL is "
"provided, *context* may be :class:`ssl.SSLContext` and configures the SSL "
"settings of the underlying HTTPS connection."
msgstr ""

#: ../../library/xmlrpc.client.rst:80
msgid ""
"The returned instance is a proxy object with methods that can be used to "
"invoke corresponding RPC calls on the remote server.  If the remote server "
"supports the introspection API, the proxy can also be used to query the "
"remote server for the methods it supports (service discovery) and fetch "
"other server-associated metadata."
msgstr ""

#: ../../library/xmlrpc.client.rst:86
msgid ""
"Types that are conformable (e.g. that can be marshalled through XML), "
"include the following (and except where noted, they are unmarshalled as the "
"same Python type):"
msgstr ""

#: ../../library/xmlrpc.client.rst:93
msgid "XML-RPC type"
msgstr ""

#: ../../library/xmlrpc.client.rst:93
msgid "Python type"
msgstr ""

#: ../../library/xmlrpc.client.rst:95
msgid "``boolean``"
msgstr ""

#: ../../library/xmlrpc.client.rst:95
msgid ":class:`bool`"
msgstr ""

#: ../../library/xmlrpc.client.rst:97
msgid "``int``, ``i1``, ``i2``,  ``i4``, ``i8`` or ``biginteger``"
msgstr ""

#: ../../library/xmlrpc.client.rst:97
msgid ""
":class:`int` in range from -2147483648 to 2147483647. Values get the "
"``<int>`` tag."
msgstr ""

#: ../../library/xmlrpc.client.rst:102
msgid "``double`` or ``float``"
msgstr ""

#: ../../library/xmlrpc.client.rst:102
msgid ":class:`float`.  Values get the ``<double>`` tag."
msgstr ""

#: ../../library/xmlrpc.client.rst:105
msgid "``string``"
msgstr ""

#: ../../library/xmlrpc.client.rst:105
msgid ":class:`str`"
msgstr ""

#: ../../library/xmlrpc.client.rst:107
msgid "``array``"
msgstr ""

#: ../../library/xmlrpc.client.rst:107
msgid ""
":class:`list` or :class:`tuple` containing conformable elements.  Arrays are"
" returned as :class:`lists <list>`."
msgstr ""

#: ../../library/xmlrpc.client.rst:111
msgid "``struct``"
msgstr ""

#: ../../library/xmlrpc.client.rst:111
msgid ""
":class:`dict`.  Keys must be strings, values may be any conformable type.  "
"Objects of user-defined classes can be passed in; only their "
":attr:`~object.__dict__` attribute is transmitted."
msgstr ""

#: ../../library/xmlrpc.client.rst:116
msgid "``dateTime.iso8601``"
msgstr ""

#: ../../library/xmlrpc.client.rst:116
msgid ""
":class:`DateTime` or :class:`datetime.datetime`. Returned type depends on "
"values of *use_builtin_types* and *use_datetime* flags."
msgstr ""

#: ../../library/xmlrpc.client.rst:120
msgid "``base64``"
msgstr ""

#: ../../library/xmlrpc.client.rst:120
msgid ""
":class:`Binary`, :class:`bytes` or :class:`bytearray`.  Returned type "
"depends on the value of the *use_builtin_types* flag."
msgstr ""

#: ../../library/xmlrpc.client.rst:124
msgid "``nil``"
msgstr ""

#: ../../library/xmlrpc.client.rst:124
msgid ""
"The ``None`` constant.  Passing is allowed only if *allow_none* is true."
msgstr ""

#: ../../library/xmlrpc.client.rst:127
msgid "``bigdecimal``"
msgstr ""

#: ../../library/xmlrpc.client.rst:127
msgid ":class:`decimal.Decimal`.  Returned type only."
msgstr ""

#: ../../library/xmlrpc.client.rst:130
msgid ""
"This is the full set of data types supported by XML-RPC.  Method calls may "
"also raise a special :exc:`Fault` instance, used to signal XML-RPC server "
"errors, or :exc:`ProtocolError` used to signal an error in the HTTP/HTTPS "
"transport layer. Both :exc:`Fault` and :exc:`ProtocolError` derive from a "
"base class called :exc:`Error`.  Note that the xmlrpc client module "
"currently does not marshal instances of subclasses of built-in types."
msgstr ""

#: ../../library/xmlrpc.client.rst:137
msgid ""
"When passing strings, characters special to XML such as ``<``, ``>``, and "
"``&`` will be automatically escaped.  However, it's the caller's "
"responsibility to ensure that the string is free of characters that aren't "
"allowed in XML, such as the control characters with ASCII values between 0 "
"and 31 (except, of course, tab, newline and carriage return); failing to do "
"this will result in an XML-RPC request that isn't well-formed XML.  If you "
"have to pass arbitrary bytes via XML-RPC, use :class:`bytes` or "
":class:`bytearray` classes or the :class:`Binary` wrapper class described "
"below."
msgstr ""

#: ../../library/xmlrpc.client.rst:146
msgid ""
":class:`Server` is retained as an alias for :class:`ServerProxy` for "
"backwards compatibility.  New code should use :class:`ServerProxy`."
msgstr ""

#: ../../library/xmlrpc.client.rst:149
msgid "Added the *context* argument."
msgstr ""

#: ../../library/xmlrpc.client.rst:152
msgid ""
"Added support of type tags with prefixes (e.g. ``ex:nil``). Added support of"
" unmarshalling additional types used by Apache XML-RPC implementation for "
"numerics: ``i1``, ``i2``, ``i8``, ``biginteger``, ``float`` and "
"``bigdecimal``. See http://ws.apache.org/xmlrpc/types.html for a "
"description."
msgstr ""

#: ../../library/xmlrpc.client.rst:164
msgid "`XML-RPC HOWTO <http://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"
msgstr ""

#: ../../library/xmlrpc.client.rst:163
msgid ""
"A good description of XML-RPC operation and client software in several "
"languages. Contains pretty much everything an XML-RPC client developer needs"
" to know."
msgstr ""

#: ../../library/xmlrpc.client.rst:167
msgid ""
"`XML-RPC Introspection "
"<http://xmlrpc-c.sourceforge.net/introspection.html>`_"
msgstr ""

#: ../../library/xmlrpc.client.rst:167
msgid "Describes the XML-RPC protocol extension for introspection."
msgstr ""

#: ../../library/xmlrpc.client.rst:169
msgid "`XML-RPC Specification <http://xmlrpc.scripting.com/spec.html>`_"
msgstr ""

#: ../../library/xmlrpc.client.rst:170
msgid "The official specification."
msgstr ""

#: ../../library/xmlrpc.client.rst:175
msgid "ServerProxy Objects"
msgstr ""

#: ../../library/xmlrpc.client.rst:177
msgid ""
"A :class:`ServerProxy` instance has a method corresponding to each remote "
"procedure call accepted by the XML-RPC server.  Calling the method performs "
"an RPC, dispatched by both name and argument signature (e.g. the same method"
" name can be overloaded with multiple argument signatures).  The RPC "
"finishes by returning a value, which may be either returned data in a "
"conformant type or a :class:`Fault` or :class:`ProtocolError` object "
"indicating an error."
msgstr ""

#: ../../library/xmlrpc.client.rst:184
msgid ""
"Servers that support the XML introspection API support some common methods "
"grouped under the reserved :attr:`~ServerProxy.system` attribute:"
msgstr ""

#: ../../library/xmlrpc.client.rst:190
msgid ""
"This method returns a list of strings, one for each (non-system) method "
"supported by the XML-RPC server."
msgstr ""

#: ../../library/xmlrpc.client.rst:196
msgid ""
"This method takes one parameter, the name of a method implemented by the "
"XML-RPC server. It returns an array of possible signatures for this method. "
"A signature is an array of types. The first of these types is the return "
"type of the method, the rest are parameters."
msgstr ""

#: ../../library/xmlrpc.client.rst:201
msgid ""
"Because multiple signatures (ie. overloading) is permitted, this method "
"returns a list of signatures rather than a singleton."
msgstr ""

#: ../../library/xmlrpc.client.rst:204
msgid ""
"Signatures themselves are restricted to the top level parameters expected by"
" a method. For instance if a method expects one array of structs as a "
"parameter, and it returns a string, its signature is simply \"string, "
"array\". If it expects three integers and returns a string, its signature is"
" \"string, int, int, int\"."
msgstr ""

#: ../../library/xmlrpc.client.rst:209
msgid ""
"If no signature is defined for the method, a non-array value is returned. In"
" Python this means that the type of the returned  value will be something "
"other than list."
msgstr ""

#: ../../library/xmlrpc.client.rst:216
msgid ""
"This method takes one parameter, the name of a method implemented by the "
"XML-RPC server.  It returns a documentation string describing the use of "
"that method. If no such string is available, an empty string is returned. "
"The documentation string may contain HTML markup."
msgstr ""

#: ../../library/xmlrpc.client.rst:223
msgid ""
"Instances of :class:`ServerProxy` support the :term:`context manager` "
"protocol for closing the underlying transport."
msgstr ""

#: ../../library/xmlrpc.client.rst:227 ../../library/xmlrpc.client.rst:273
msgid "A working example follows. The server code::"
msgstr ""

#: ../../library/xmlrpc.client.rst:239 ../../library/xmlrpc.client.rst:288
#: ../../library/xmlrpc.client.rst:398 ../../library/xmlrpc.client.rst:504
msgid "The client code for the preceding server::"
msgstr ""

#: ../../library/xmlrpc.client.rst:250
msgid "DateTime Objects"
msgstr "DateTime 对象"

#: ../../library/xmlrpc.client.rst:254
msgid ""
"This class may be initialized with seconds since the epoch, a time tuple, an"
" ISO 8601 time/date string, or a :class:`datetime.datetime` instance.  It "
"has the following methods, supported mainly for internal use by the "
"marshalling/unmarshalling code:"
msgstr ""

#: ../../library/xmlrpc.client.rst:262
msgid "Accept a string as the instance's new time value."
msgstr ""

#: ../../library/xmlrpc.client.rst:267
msgid ""
"Write the XML-RPC encoding of this :class:`DateTime` item to the *out* "
"stream object."
msgstr ""

#: ../../library/xmlrpc.client.rst:270
msgid ""
"It also supports certain of Python's built-in operators through rich "
"comparison and :meth:`__repr__` methods."
msgstr ""

#: ../../library/xmlrpc.client.rst:303
msgid "Binary Objects"
msgstr ""

#: ../../library/xmlrpc.client.rst:307
msgid ""
"This class may be initialized from bytes data (which may include NULs). The "
"primary access to the content of a :class:`Binary` object is provided by an "
"attribute:"
msgstr ""

#: ../../library/xmlrpc.client.rst:314
msgid ""
"The binary data encapsulated by the :class:`Binary` instance.  The data is "
"provided as a :class:`bytes` object."
msgstr ""

#: ../../library/xmlrpc.client.rst:317
msgid ""
":class:`Binary` objects have the following methods, supported mainly for "
"internal use by the marshalling/unmarshalling code:"
msgstr ""

#: ../../library/xmlrpc.client.rst:323
msgid ""
"Accept a base64 :class:`bytes` object and decode it as the instance's new "
"data."
msgstr ""

#: ../../library/xmlrpc.client.rst:328
msgid ""
"Write the XML-RPC base 64 encoding of this binary item to the *out* stream "
"object."
msgstr ""

#: ../../library/xmlrpc.client.rst:330
msgid ""
"The encoded data will have newlines every 76 characters as per :rfc:`RFC "
"2045 section 6.8 <2045#section-6.8>`, which was the de facto standard base64"
" specification when the XML-RPC spec was written."
msgstr ""

#: ../../library/xmlrpc.client.rst:335
msgid ""
"It also supports certain of Python's built-in operators through "
":meth:`__eq__` and :meth:`__ne__` methods."
msgstr ""

#: ../../library/xmlrpc.client.rst:338
msgid ""
"Example usage of the binary objects.  We're going to transfer an image over "
"XMLRPC::"
msgstr ""

#: ../../library/xmlrpc.client.rst:354
msgid "The client gets the image and saves it to a file::"
msgstr ""

#: ../../library/xmlrpc.client.rst:365
msgid "Fault Objects"
msgstr ""

#: ../../library/xmlrpc.client.rst:369
msgid ""
"A :class:`Fault` object encapsulates the content of an XML-RPC fault tag. "
"Fault objects have the following attributes:"
msgstr ""

#: ../../library/xmlrpc.client.rst:375
msgid "A string indicating the fault type."
msgstr ""

#: ../../library/xmlrpc.client.rst:380
msgid "A string containing a diagnostic message associated with the fault."
msgstr ""

#: ../../library/xmlrpc.client.rst:382
msgid ""
"In the following example we're going to intentionally cause a :exc:`Fault` "
"by returning a complex type object.  The server code::"
msgstr ""

#: ../../library/xmlrpc.client.rst:415
msgid "ProtocolError Objects"
msgstr ""

#: ../../library/xmlrpc.client.rst:419
msgid ""
"A :class:`ProtocolError` object describes a protocol error in the underlying"
" transport layer (such as a 404 'not found' error if the server named by the"
" URI does not exist).  It has the following attributes:"
msgstr ""

#: ../../library/xmlrpc.client.rst:426
msgid "The URI or URL that triggered the error."
msgstr ""

#: ../../library/xmlrpc.client.rst:431
msgid "The error code."
msgstr ""

#: ../../library/xmlrpc.client.rst:436
msgid "The error message or diagnostic string."
msgstr ""

#: ../../library/xmlrpc.client.rst:441
msgid ""
"A dict containing the headers of the HTTP/HTTPS request that triggered the "
"error."
msgstr ""

#: ../../library/xmlrpc.client.rst:444
msgid ""
"In the following example we're going to intentionally cause a "
":exc:`ProtocolError` by providing an invalid URI::"
msgstr ""

#: ../../library/xmlrpc.client.rst:462
msgid "MultiCall Objects"
msgstr ""

#: ../../library/xmlrpc.client.rst:464
msgid ""
"The :class:`MultiCall` object provides a way to encapsulate multiple calls "
"to a remote server into a single request [#]_."
msgstr ""

#: ../../library/xmlrpc.client.rst:470
msgid ""
"Create an object used to boxcar method calls. *server* is the eventual "
"target of the call. Calls can be made to the result object, but they will "
"immediately return ``None``, and only store the call name and parameters in "
"the :class:`MultiCall` object. Calling the object itself causes all stored "
"calls to be transmitted as a single ``system.multicall`` request. The result"
" of this call is a :term:`generator`; iterating over this generator yields "
"the individual results."
msgstr ""

#: ../../library/xmlrpc.client.rst:478
msgid "A usage example of this class follows.  The server code::"
msgstr ""

#: ../../library/xmlrpc.client.rst:520
msgid "Convenience Functions"
msgstr ""

#: ../../library/xmlrpc.client.rst:524
msgid ""
"Convert *params* into an XML-RPC request. or into a response if "
"*methodresponse* is true. *params* can be either a tuple of arguments or an "
"instance of the :exc:`Fault` exception class.  If *methodresponse* is true, "
"only a single value can be returned, meaning that *params* must be of length"
" 1. *encoding*, if supplied, is the encoding to use in the generated XML; "
"the default is UTF-8. Python's :const:`None` value cannot be used in "
"standard XML-RPC; to allow using it via an extension,  provide a true value "
"for *allow_none*."
msgstr ""

#: ../../library/xmlrpc.client.rst:535
msgid ""
"Convert an XML-RPC request or response into Python objects, a ``(params, "
"methodname)``.  *params* is a tuple of argument; *methodname* is a string, "
"or ``None`` if no method name is present in the packet. If the XML-RPC "
"packet represents a fault condition, this function will raise a :exc:`Fault`"
" exception. The *use_builtin_types* flag can be used to cause date/time "
"values to be presented as :class:`datetime.datetime` objects and binary data"
" to be presented as :class:`bytes` objects; this flag is false by default."
msgstr ""

#: ../../library/xmlrpc.client.rst:543
msgid ""
"The obsolete *use_datetime* flag is similar to *use_builtin_types* but it "
"applies only to date/time values."
msgstr ""

#: ../../library/xmlrpc.client.rst:553
msgid "Example of Client Usage"
msgstr ""

#: ../../library/xmlrpc.client.rst:570
msgid ""
"To access an XML-RPC server through a HTTP proxy, you need to define a "
"custom transport.  The following example shows how::"
msgstr ""

#: ../../library/xmlrpc.client.rst:595
msgid "Example of Client and Server Usage"
msgstr ""

#: ../../library/xmlrpc.client.rst:597
msgid "See :ref:`simplexmlrpcserver-example`."
msgstr ""

#: ../../library/xmlrpc.client.rst:601
msgid "Footnotes"
msgstr "备注"

#: ../../library/xmlrpc.client.rst:602
msgid ""
"This approach has been first presented in `a discussion on xmlrpc.com "
"<https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader$1208?mode=topic>`_."
msgstr ""
