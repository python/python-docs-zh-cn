# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xmlrpc.client.rst:2
msgid ":mod:`xmlrpc.client` --- XML-RPC client access"
msgstr ":mod:`xmlrpc.client` --- XML-RPC 客户端访问"

#: ../../library/xmlrpc.client.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/client.py`"
msgstr "**源代码:** :source:`Lib/xmlrpc/client.py`"

#: ../../library/xmlrpc.client.rst:17
msgid ""
"XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) "
"as a transport.  With it, a client can call methods with parameters on a "
"remote server (the server is named by a URI) and get back structured data.  "
"This module supports writing XML-RPC client code; it handles all the details"
" of translating between conformable Python objects and XML on the wire."
msgstr ""
"XML-RPC 是一种远程过程调用方法，它以使用 HTTP(S) 传递的 XML 作为载体。 通过它，客户端可以在远程服务器（服务器以 URI "
"指明）上调用带参数的方法并获取结构化的数据。 本模块支持编写 XML-RPC 客户端代码；它会处理在通用 Python 对象和 XML "
"之间进行在线翻译的所有细节。"

#: ../../library/xmlrpc.client.rst:26
msgid ""
"The :mod:`xmlrpc.client` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xmlrpc.client` 模块对于恶意构建的数据是不安全的。 如果你需要解析不受信任或未经身份验证的数据，请参阅 :ref:`xml-"
"vulnerabilities`。"

#: ../../library/xmlrpc.client.rst:32
msgid ""
"For HTTPS URIs, :mod:`xmlrpc.client` now performs all the necessary "
"certificate and hostname checks by default."
msgstr "对于 HTTPS URI，现在 :mod:`xmlrpc.client` 默认会执行所有必要的证书和主机名检查。"

#: ../../library/xmlrpc.client.rst:39
msgid ""
"A :class:`ServerProxy` instance is an object that manages communication with"
" a remote XML-RPC server.  The required first argument is a URI (Uniform "
"Resource Indicator), and will normally be the URL of the server.  The "
"optional second argument is a transport factory instance; by default it is "
"an internal :class:`SafeTransport` instance for https: URLs and an internal "
"HTTP :class:`Transport` instance otherwise.  The optional third argument is "
"an encoding, by default UTF-8. The optional fourth argument is a debugging "
"flag."
msgstr ""
":class:`ServerProxy` 实例是管理与远程 XML-RPC 服务器通信的对象。 要求的第一个参数为 URI "
"(统一资源定位符)，通常就是服务器的 URL。 可选的第二个参数为传输工厂实例；在默认情况下对于 https: URL 是一个内部 "
":class:`SafeTransport` 实例，在其他情况下则是一个内部 HTTP :class:`Transport` 实例。 "
"可选的第三个参数为编码格式，默认为 UTF-8。 可选的第四个参数为调试旗标。"

#: ../../library/xmlrpc.client.rst:47
msgid ""
"The following parameters govern the use of the returned proxy instance. If "
"*allow_none* is true,  the Python constant ``None`` will be translated into "
"XML; the default behaviour is for ``None`` to raise a :exc:`TypeError`. This"
" is a commonly used extension to the XML-RPC specification, but isn't "
"supported by all clients and servers; see `http://ontosys.com/xml-"
"rpc/extensions.php "
"<https://web.archive.org/web/20130120074804/http://ontosys.com/xml-"
"rpc/extensions.php>`_ for a description. The *use_builtin_types* flag can be"
" used to cause date/time values to be presented as "
":class:`datetime.datetime` objects and binary data to be presented as "
":class:`bytes` objects; this flag is false by default. "
":class:`datetime.datetime`, :class:`bytes` and :class:`bytearray` objects "
"may be passed to calls. The *headers* parameter is an optional sequence of "
"HTTP headers to send with each request, expressed as a sequence of 2-tuples "
"representing the header name and value. (e.g. ``[('Header-Name', "
"'value')]``). The obsolete *use_datetime* flag is similar to "
"*use_builtin_types* but it applies only to date/time values."
msgstr ""
"下列形参控制所返回代理实例的使用。 如果 *allow_none* 为真值，则 Python 常量 ``None`` 将被转写至 XML；默认行为是针对"
" ``None`` 引发 :exc:`TypeError`。 这是对 XML-RPC 规格的一个常用扩展，但并不被所有客户端和服务器所支持；请参阅 "
"`http://ontosys.com/xml-rpc/extensions.php "
"<https://web.archive.org/web/20130120074804/http://ontosys.com/xml-"
"rpc/extensions.php>`_ 了解详情。 *use_builtin_types* 旗标可被用来将日期/时间值表示为 "
":class:`datetime.datetime` 对象而将二进制数据表示为 :class:`bytes` 对象；此旗标默认为假值。 "
":class:`datetime.datetime`, :class:`bytes` 和 :class:`bytearray` 对象可以被传给调用操作。"
" *headers* 形参为可选的随每次请求发送的 HTTP 标头序列，其形式为包含代表标头名称和值的二元组序列 (例如 ``[('Header-"
"Name', 'value')]``)。 已淘汰的 *use_datetime* 旗标与 *use_builtin_types* "
"类似但它只针对日期/时间值。"

#: ../../library/xmlrpc.client.rst:65 ../../library/xmlrpc.client.rst:546
msgid "The *use_builtin_types* flag was added."
msgstr "增加了 *use_builtin_types* 旗标。"

#: ../../library/xmlrpc.client.rst:68
msgid "The *headers* parameter was added."
msgstr "增加了 *headers* 形参。"

#: ../../library/xmlrpc.client.rst:71
msgid ""
"Both the HTTP and HTTPS transports support the URL syntax extension for HTTP"
" Basic Authentication: ``http://user:pass@host:port/path``.  The  "
"``user:pass`` portion will be base64-encoded as an HTTP 'Authorization' "
"header, and sent to the remote server as part of the connection process when"
" invoking an XML-RPC method.  You only need to use this if the remote server"
" requires a Basic Authentication user and password. If an HTTPS URL is "
"provided, *context* may be :class:`ssl.SSLContext` and configures the SSL "
"settings of the underlying HTTPS connection."
msgstr ""
"HTTP 和 HTTPS 传输均支持用于 HTTP 基本身份验证的 URL 语法扩展: "
"``http://user:pass@host:port/path``。 ``user:pass`` 部分将以 base64 编码为 HTTP "
"'Authorization' 标头，并在唤起 XML-RPC 方法时作为连接过程的一部分发送给远程服务器。 "
"你只需要在远程服务器要求基本身份验证账号和密码时使用此语法。 如果提供了 HTTPS URL，*context* 可以为 "
":class:`ssl.SSLContext` 并配置有下层 HTTPS 连接的 SSL 设置。"

#: ../../library/xmlrpc.client.rst:80
msgid ""
"The returned instance is a proxy object with methods that can be used to "
"invoke corresponding RPC calls on the remote server.  If the remote server "
"supports the introspection API, the proxy can also be used to query the "
"remote server for the methods it supports (service discovery) and fetch "
"other server-associated metadata."
msgstr ""
"返回的实例是一个代理对象，具有可被用来在远程服务器上发起相应 RPC 调用的方法。 如果远程服务器支持内省 "
"API，则也可使用该代理对象在远程服务器上查询它所支持的方法（服务发现）并获取其他服务器相关的元数据"

#: ../../library/xmlrpc.client.rst:86
msgid ""
"Types that are conformable (e.g. that can be marshalled through XML), "
"include the following (and except where noted, they are unmarshalled as the "
"same Python type):"
msgstr ""
"适用的类型（即可通过 XML 生成 marshall 对象），包括如下类型（除了已说明的例外，它们都会被反 marshall 为同样的 Python "
"类型）:"

#: ../../library/xmlrpc.client.rst:93
msgid "XML-RPC type"
msgstr "XML-RPC类型"

#: ../../library/xmlrpc.client.rst:93
msgid "Python type"
msgstr "Python 类型"

#: ../../library/xmlrpc.client.rst:95
msgid "``boolean``"
msgstr "``boolean``"

#: ../../library/xmlrpc.client.rst:95
msgid ":class:`bool`"
msgstr ":class:`bool`"

#: ../../library/xmlrpc.client.rst:97
msgid "``int``, ``i1``, ``i2``,  ``i4``, ``i8`` or ``biginteger``"
msgstr "``int``, ``i1``, ``i2``,  ``i4``, ``i8`` 或者 ``biginteger``"

#: ../../library/xmlrpc.client.rst:97
msgid ""
":class:`int` in range from -2147483648 to 2147483647. Values get the "
"``<int>`` tag."
msgstr ":class:`int` 的范围从 -2147483648 到 2147483647。值将获得 ``<int>`` 标志。"

#: ../../library/xmlrpc.client.rst:102
msgid "``double`` or ``float``"
msgstr "``double`` 或 ``float``"

#: ../../library/xmlrpc.client.rst:102
msgid ":class:`float`.  Values get the ``<double>`` tag."
msgstr ":class:`float`。值将获得 ``<double>`` 标志。"

#: ../../library/xmlrpc.client.rst:105
msgid "``string``"
msgstr "``string``"

#: ../../library/xmlrpc.client.rst:105
msgid ":class:`str`"
msgstr ":class:`str`"

#: ../../library/xmlrpc.client.rst:107
msgid "``array``"
msgstr "``array``"

#: ../../library/xmlrpc.client.rst:107
msgid ""
":class:`list` or :class:`tuple` containing conformable elements.  Arrays are"
" returned as :class:`lists <list>`."
msgstr ":class:`list` 或 :class:`tuple` 包含整合元素。数组以 :class:`lists <list>` 形式返回。"

#: ../../library/xmlrpc.client.rst:111
msgid "``struct``"
msgstr "``struct``"

#: ../../library/xmlrpc.client.rst:111
msgid ""
":class:`dict`.  Keys must be strings, values may be any conformable type.  "
"Objects of user-defined classes can be passed in; only their "
":attr:`~object.__dict__` attribute is transmitted."
msgstr ""
":class:`dict`。 键必须为字符串，值可以为任何适用的类型。 可以传入用户自定义类的对象；只有其 "
":attr:`~object.__dict__` 属性会被传输。"

#: ../../library/xmlrpc.client.rst:116
msgid "``dateTime.iso8601``"
msgstr "``dateTime.iso8601``"

#: ../../library/xmlrpc.client.rst:116
msgid ""
":class:`DateTime` or :class:`datetime.datetime`. Returned type depends on "
"values of *use_builtin_types* and *use_datetime* flags."
msgstr ""
":class:`DateTime` 或 :class:`datetime.datetime`。返回的类型取决于 *use_builtin_types* "
"和 *use_datetime* 标志的值。"

#: ../../library/xmlrpc.client.rst:120
msgid "``base64``"
msgstr "``base64``"

#: ../../library/xmlrpc.client.rst:120
msgid ""
":class:`Binary`, :class:`bytes` or :class:`bytearray`.  Returned type "
"depends on the value of the *use_builtin_types* flag."
msgstr ""
":class:`Binary`, :class:`bytes` 或 :class:`bytearray`。返回的类型取决于 "
"*use_builtin_types* 标志的值。"

#: ../../library/xmlrpc.client.rst:124
msgid "``nil``"
msgstr "``nil``"

#: ../../library/xmlrpc.client.rst:124
msgid ""
"The ``None`` constant.  Passing is allowed only if *allow_none* is true."
msgstr "``None`` 常量。仅当 *allow_none* 为true时才允许传递。"

#: ../../library/xmlrpc.client.rst:127
msgid "``bigdecimal``"
msgstr "``bigdecimal``"

#: ../../library/xmlrpc.client.rst:127
msgid ":class:`decimal.Decimal`.  Returned type only."
msgstr ":class:`decimal.Decimal`.  仅返回类型。"

#: ../../library/xmlrpc.client.rst:130
msgid ""
"This is the full set of data types supported by XML-RPC.  Method calls may "
"also raise a special :exc:`Fault` instance, used to signal XML-RPC server "
"errors, or :exc:`ProtocolError` used to signal an error in the HTTP/HTTPS "
"transport layer. Both :exc:`Fault` and :exc:`ProtocolError` derive from a "
"base class called :exc:`Error`.  Note that the xmlrpc client module "
"currently does not marshal instances of subclasses of built-in types."
msgstr ""
"这是This is the full set of data types supported by XML-RPC 所支持数据类型的完整集合。 "
"方法调用也可能引发一个特殊的 :exc:`Fault` 实例，用来提示 XML-RPC 服务器错误，或是用 :exc:`ProtocolError` "
"来提示 HTTP/HTTPS 传输层中的错误。 :exc:`Fault` 和 :exc:`ProtocolError` 都派生自名为 "
":exc:`Error` 的基类。 请注意 xmlrpc client 模块目前不可 marshal 内置类型的子类的实例。"

#: ../../library/xmlrpc.client.rst:137
msgid ""
"When passing strings, characters special to XML such as ``<``, ``>``, and "
"``&`` will be automatically escaped.  However, it's the caller's "
"responsibility to ensure that the string is free of characters that aren't "
"allowed in XML, such as the control characters with ASCII values between 0 "
"and 31 (except, of course, tab, newline and carriage return); failing to do "
"this will result in an XML-RPC request that isn't well-formed XML.  If you "
"have to pass arbitrary bytes via XML-RPC, use :class:`bytes` or "
":class:`bytearray` classes or the :class:`Binary` wrapper class described "
"below."
msgstr ""
"当传入字符串时，XML 中的特殊字符如 ``<``, ``>`` 和 ``&`` 将被自动转义。 但是，调用方有责任确保字符串中没有 XML "
"中不允许的字符，例如 ASCII 值在 0 和 31 之间的控制字符（当然，制表、换行和回车除外）；不这样做将导致 XML-RPC 请求的 XML "
"格式不正确。 如果你必须通过 XML-RPC 传入任意字节数据，请使用 :class:`bytes` 或 :class:`bytearray` "
"类或者下文描述的 :class:`Binary` 包装器类。"

#: ../../library/xmlrpc.client.rst:146
msgid ""
":class:`Server` is retained as an alias for :class:`ServerProxy` for "
"backwards compatibility.  New code should use :class:`ServerProxy`."
msgstr ""
":class:`Server` 被保留作为 :class:`ServerProxy` 的别名用于向下兼容。 新的代码应当使用 "
":class:`ServerProxy`。"

#: ../../library/xmlrpc.client.rst:149
msgid "Added the *context* argument."
msgstr "增加了 *context* 参数。"

#: ../../library/xmlrpc.client.rst:152
msgid ""
"Added support of type tags with prefixes (e.g. ``ex:nil``). Added support of"
" unmarshalling additional types used by Apache XML-RPC implementation for "
"numerics: ``i1``, ``i2``, ``i8``, ``biginteger``, ``float`` and "
"``bigdecimal``. See https://ws.apache.org/xmlrpc/types.html for a "
"description."
msgstr ""
"增加了对带有前缀的类型标签的支持 (例如 ``ex:nil``)。 增加了对反 marshall 被 Apache XML-RPC "
"实现用于表示数值的附加类型的支持: ``i1``, ``i2``, ``i8``, ``biginteger``, ``float`` 和 "
"``bigdecimal``。 请参阅 https://ws.apache.org/xmlrpc/types.html 了解详情。"

#: ../../library/xmlrpc.client.rst:164
msgid "`XML-RPC HOWTO <https://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"
msgstr ""

#: ../../library/xmlrpc.client.rst:163
msgid ""
"A good description of XML-RPC operation and client software in several "
"languages. Contains pretty much everything an XML-RPC client developer needs"
" to know."
msgstr "以多种语言对 XML-RPC 操作和客户端软件进行了很好的说明。 包含 XML-RPC 客户端开发者所需知道的几乎任何事情。"

#: ../../library/xmlrpc.client.rst:167
msgid ""
"`XML-RPC Introspection "
"<https://xmlrpc-c.sourceforge.net/introspection.html>`_"
msgstr ""
"`XML-RPC Introspection "
"<https://xmlrpc-c.sourceforge.net/introspection.html>`_"

#: ../../library/xmlrpc.client.rst:167
msgid "Describes the XML-RPC protocol extension for introspection."
msgstr "描述了用于内省的 XML-RPC 协议扩展。"

#: ../../library/xmlrpc.client.rst:169
msgid "`XML-RPC Specification <http://xmlrpc.scripting.com/spec.html>`_"
msgstr "`XML-RPC Specification <http://xmlrpc.scripting.com/spec.html>`_"

#: ../../library/xmlrpc.client.rst:170
msgid "The official specification."
msgstr "官方规范说明。"

#: ../../library/xmlrpc.client.rst:175
msgid "ServerProxy Objects"
msgstr "ServerProxy 对象"

#: ../../library/xmlrpc.client.rst:177
msgid ""
"A :class:`ServerProxy` instance has a method corresponding to each remote "
"procedure call accepted by the XML-RPC server.  Calling the method performs "
"an RPC, dispatched by both name and argument signature (e.g. the same method"
" name can be overloaded with multiple argument signatures).  The RPC "
"finishes by returning a value, which may be either returned data in a "
"conformant type or a :class:`Fault` or :class:`ProtocolError` object "
"indicating an error."
msgstr ""
":class:`ServerProxy` 实例有一个方法与 XML-RPC 服务器所接受的每个远程过程调用相对应。 调用该方法会执行一个 "
"RPC，通过名称和参数签名来调度（例如同一个方法名可通过多个参数签名来重载）。 RPC 结束时返回一个值，它可以是适用类型的返回数据或是表示错误的 "
":class:`Fault` 或 :class:`ProtocolError` 对象。"

#: ../../library/xmlrpc.client.rst:184
msgid ""
"Servers that support the XML introspection API support some common methods "
"grouped under the reserved :attr:`~ServerProxy.system` attribute:"
msgstr "支持 XML 内省 API 的服务器还支持一些以保留的 :attr:`~ServerProxy.system` 属性分组的通用方法:"

#: ../../library/xmlrpc.client.rst:190
msgid ""
"This method returns a list of strings, one for each (non-system) method "
"supported by the XML-RPC server."
msgstr "此方法返回一个字符串列表，每个字符串都各自对应 XML-RPC 服务器所支持的（非系统）方法。"

#: ../../library/xmlrpc.client.rst:196
msgid ""
"This method takes one parameter, the name of a method implemented by the "
"XML-RPC server. It returns an array of possible signatures for this method. "
"A signature is an array of types. The first of these types is the return "
"type of the method, the rest are parameters."
msgstr ""
"此方法接受一个形参，即某个由 XML-RPC 服务器所实现的方法名称。 它返回一个由此方法可能的签名组成的数组。 一个签名就是一个类型数组。 "
"这些类型中的第一个是方法的的返回类型，其余的均为形参。"

#: ../../library/xmlrpc.client.rst:201
msgid ""
"Because multiple signatures (ie. overloading) is permitted, this method "
"returns a list of signatures rather than a singleton."
msgstr "由于允许多个签名（即重载），此方法是返回一个签名列表而非一个单例。"

#: ../../library/xmlrpc.client.rst:204
msgid ""
"Signatures themselves are restricted to the top level parameters expected by"
" a method. For instance if a method expects one array of structs as a "
"parameter, and it returns a string, its signature is simply \"string, "
"array\". If it expects three integers and returns a string, its signature is"
" \"string, int, int, int\"."
msgstr ""
"签名本身被限制为一个方法所期望的最高层级形参。 举例来说如果一个方法期望有一个结构体数组作为形参，并返回一个字符串，则其签名就是 \"string, "
"array\"。 如果它期望有三个整数并返回一个字符串，则其签名是 \"string, int, int, int\"。"

#: ../../library/xmlrpc.client.rst:209
msgid ""
"If no signature is defined for the method, a non-array value is returned. In"
" Python this means that the type of the returned  value will be something "
"other than list."
msgstr "如果方法没有定义任何签名，则将返回一个非数组值。 在 Python 中这意味着返回值的类型为列表以外的类型。"

#: ../../library/xmlrpc.client.rst:216
msgid ""
"This method takes one parameter, the name of a method implemented by the "
"XML-RPC server.  It returns a documentation string describing the use of "
"that method. If no such string is available, an empty string is returned. "
"The documentation string may contain HTML markup."
msgstr ""
"此方法接受一个形参，即 XML-RPC 服务器所实现的某个方法的名称。 它返回描述相应方法用法的文档字符串。 如果没有可用的文档字符串，则返回空字符串。"
" 文档字符串可以包含 HTML 标记。"

#: ../../library/xmlrpc.client.rst:223
msgid ""
"Instances of :class:`ServerProxy` support the :term:`context manager` "
"protocol for closing the underlying transport."
msgstr ":class:`ServerProxy` 的实例支持 :term:`context manager` 协议用于关闭下层传输。"

#: ../../library/xmlrpc.client.rst:227 ../../library/xmlrpc.client.rst:273
msgid "A working example follows. The server code::"
msgstr "以下是一个可运行的示例。 服务器端代码::"

#: ../../library/xmlrpc.client.rst:239 ../../library/xmlrpc.client.rst:288
#: ../../library/xmlrpc.client.rst:398 ../../library/xmlrpc.client.rst:504
msgid "The client code for the preceding server::"
msgstr "前述服务器的客户端代码::"

#: ../../library/xmlrpc.client.rst:250
msgid "DateTime Objects"
msgstr "DateTime 对象"

#: ../../library/xmlrpc.client.rst:254
msgid ""
"This class may be initialized with seconds since the epoch, a time tuple, an"
" ISO 8601 time/date string, or a :class:`datetime.datetime` instance.  It "
"has the following methods, supported mainly for internal use by the "
"marshalling/unmarshalling code:"
msgstr ""
"该类的初始化可以使用距离 Unix 纪元的秒数、时间元组、ISO 8601 时间/日期字符串或 :class:`datetime.datetime` "
"实例。 它具有下列方法，主要是为 marshall 和反 marshall 代码的内部使用提供支持:"

#: ../../library/xmlrpc.client.rst:262
msgid "Accept a string as the instance's new time value."
msgstr "接受一个字符串作为实例的新时间值。"

#: ../../library/xmlrpc.client.rst:267
msgid ""
"Write the XML-RPC encoding of this :class:`DateTime` item to the *out* "
"stream object."
msgstr "将此 :class:`DateTime` 条目的 XML-RPC 编码格式写入到 *out* 流对象。"

#: ../../library/xmlrpc.client.rst:270
msgid ""
"It also supports certain of Python's built-in operators through rich "
"comparison and :meth:`__repr__` methods."
msgstr "它还通过富比较和 :meth:`__repr__` 方法来支持某些 Python 内置运算符。"

#: ../../library/xmlrpc.client.rst:303
msgid "Binary Objects"
msgstr "Binary 对象"

#: ../../library/xmlrpc.client.rst:307
msgid ""
"This class may be initialized from bytes data (which may include NULs). The "
"primary access to the content of a :class:`Binary` object is provided by an "
"attribute:"
msgstr "该类的初始化可以使用字节数据（可包括 NUL）。 对 :class:`Binary` 对象的初始访问是由一个属性来提供的:"

#: ../../library/xmlrpc.client.rst:314
msgid ""
"The binary data encapsulated by the :class:`Binary` instance.  The data is "
"provided as a :class:`bytes` object."
msgstr "被 :class:`Binary` 实例封装的二进制数据。 该数据以 :class:`bytes` 对象的形式提供。"

#: ../../library/xmlrpc.client.rst:317
msgid ""
":class:`Binary` objects have the following methods, supported mainly for "
"internal use by the marshalling/unmarshalling code:"
msgstr ":class:`Binary` 对象具有下列方法，支持这些方法主要是供 marshall 和反 marshall 代码在内部使用:"

#: ../../library/xmlrpc.client.rst:323
msgid ""
"Accept a base64 :class:`bytes` object and decode it as the instance's new "
"data."
msgstr "接受一个 base64 :class:`bytes` 对象并将其解码为实例的新数据。"

#: ../../library/xmlrpc.client.rst:328
msgid ""
"Write the XML-RPC base 64 encoding of this binary item to the *out* stream "
"object."
msgstr "将此二进制条目的 XML-RPC base 64 编码格式写入到 *out* 流对象。"

#: ../../library/xmlrpc.client.rst:330
msgid ""
"The encoded data will have newlines every 76 characters as per :rfc:`RFC "
"2045 section 6.8 <2045#section-6.8>`, which was the de facto standard base64"
" specification when the XML-RPC spec was written."
msgstr ""
"被编码数据将依据 :rfc:`RFC 2045 第 6.8 节 <2045#section-6.8>` 每 76 个字符换行一次，这是撰写 XML-"
"RPC 规范说明时 base64 规范的事实标准。"

#: ../../library/xmlrpc.client.rst:335
msgid ""
"It also supports certain of Python's built-in operators through "
":meth:`__eq__` and :meth:`__ne__` methods."
msgstr "它还通过 :meth:`__eq__` 和 :meth:`__ne__` 方法来支持某些 Python 内置运算符。"

#: ../../library/xmlrpc.client.rst:338
msgid ""
"Example usage of the binary objects.  We're going to transfer an image over "
"XMLRPC::"
msgstr "该二进制对象的示例用法。 我们将通过 XMLRPC 来传输一张图片::"

#: ../../library/xmlrpc.client.rst:354
msgid "The client gets the image and saves it to a file::"
msgstr "客户端会获取图片并将其保存为一个文件::"

#: ../../library/xmlrpc.client.rst:365
msgid "Fault Objects"
msgstr "Fault 对象"

#: ../../library/xmlrpc.client.rst:369
msgid ""
"A :class:`Fault` object encapsulates the content of an XML-RPC fault tag. "
"Fault objects have the following attributes:"
msgstr ":class:`Fault` 对象封装了 XML-RPC fault 标签的内容。 Fault 对象具有下列属性:"

#: ../../library/xmlrpc.client.rst:375
msgid "An int indicating the fault type."
msgstr "一个指明 fault 类型的整数。"

#: ../../library/xmlrpc.client.rst:380
msgid "A string containing a diagnostic message associated with the fault."
msgstr "一个包含与 fault 相关联的诊断消息的字符串。"

#: ../../library/xmlrpc.client.rst:382
msgid ""
"In the following example we're going to intentionally cause a :exc:`Fault` "
"by returning a complex type object.  The server code::"
msgstr "在接下来的示例中我们将通过返回一个复数类型的值来故意引发一个 :exc:`Fault`。 服务器端代码::"

#: ../../library/xmlrpc.client.rst:415
msgid "ProtocolError Objects"
msgstr "ProtocolError 对象"

#: ../../library/xmlrpc.client.rst:419
msgid ""
"A :class:`ProtocolError` object describes a protocol error in the underlying"
" transport layer (such as a 404 'not found' error if the server named by the"
" URI does not exist).  It has the following attributes:"
msgstr ""
":class:`ProtocolError` 对象描述了下层传输层中的协议错误（例如当 URI 所指定的服务器不存在时的 404 'not found'"
" 错误）。 它具有下列属性:"

#: ../../library/xmlrpc.client.rst:426
msgid "The URI or URL that triggered the error."
msgstr "触发错误的 URI 或 URL。"

#: ../../library/xmlrpc.client.rst:431
msgid "The error code."
msgstr "错误代码。"

#: ../../library/xmlrpc.client.rst:436
msgid "The error message or diagnostic string."
msgstr "错误消息或诊断字符串。"

#: ../../library/xmlrpc.client.rst:441
msgid ""
"A dict containing the headers of the HTTP/HTTPS request that triggered the "
"error."
msgstr "一个包含触发错误的 HTTP/HTTPS 请求的标头的字典。"

#: ../../library/xmlrpc.client.rst:444
msgid ""
"In the following example we're going to intentionally cause a "
":exc:`ProtocolError` by providing an invalid URI::"
msgstr "在接下来的示例中我们将通过提供一个无效的 URI 来故意引发一个 :exc:`ProtocolError`::"

#: ../../library/xmlrpc.client.rst:462
msgid "MultiCall Objects"
msgstr "MultiCall 对象"

#: ../../library/xmlrpc.client.rst:464
msgid ""
"The :class:`MultiCall` object provides a way to encapsulate multiple calls "
"to a remote server into a single request [#]_."
msgstr ":class:`MultiCall` 对象提供了一种将对远程服务器的多个调用封装为一个单独请求的方式 [#]_。"

#: ../../library/xmlrpc.client.rst:470
msgid ""
"Create an object used to boxcar method calls. *server* is the eventual "
"target of the call. Calls can be made to the result object, but they will "
"immediately return ``None``, and only store the call name and parameters in "
"the :class:`MultiCall` object. Calling the object itself causes all stored "
"calls to be transmitted as a single ``system.multicall`` request. The result"
" of this call is a :term:`generator`; iterating over this generator yields "
"the individual results."
msgstr ""
"创建一个用于盒式方法调用的对象。 *server* 是调用的最终目标。 可以针对结果对象被唤起，但它们将立即返回 ``None``，并只在 "
":class:`MultiCall` 对象中存储调用名称和形参。 调用该对象本身会导致所有已存储的调用作为一个单独的 "
"``system.multicall`` 请求被发送。 此调用的结果是一个 :term:`generator`；迭代这个生成器会产生各个结果。"

#: ../../library/xmlrpc.client.rst:478
msgid "A usage example of this class follows.  The server code::"
msgstr "以下是该类的用法示例。 服务器端代码::"

#: ../../library/xmlrpc.client.rst:520
msgid "Convenience Functions"
msgstr "便捷函数"

#: ../../library/xmlrpc.client.rst:524
msgid ""
"Convert *params* into an XML-RPC request. or into a response if "
"*methodresponse* is true. *params* can be either a tuple of arguments or an "
"instance of the :exc:`Fault` exception class.  If *methodresponse* is true, "
"only a single value can be returned, meaning that *params* must be of length"
" 1. *encoding*, if supplied, is the encoding to use in the generated XML; "
"the default is UTF-8. Python's :const:`None` value cannot be used in "
"standard XML-RPC; to allow using it via an extension,  provide a true value "
"for *allow_none*."
msgstr ""
"请 *params* 转换为一个 XML-RPC 请求。 或者当 *methodresponse* 为真值时则转换为一个请求。 *params* "
"可以是一个参数元组或是一个 :exc:`Fault` 异常类的实例。 如果 *methodresponse* 为真值，只有单独的值可以被返回，这意味着 "
"*params* 的长度必须为 1。 如果提供了 *encoding*，则在生成的 XML 会使用该编码格式；默认的编码格式为 UTF-8。 "
"Python 的 :const:`None` 值不可在标准 XML-RPC 中使用；要通过扩展来允许使用它，请为 *allow_none* "
"提供一个真值。"

#: ../../library/xmlrpc.client.rst:535
msgid ""
"Convert an XML-RPC request or response into Python objects, a ``(params, "
"methodname)``.  *params* is a tuple of argument; *methodname* is a string, "
"or ``None`` if no method name is present in the packet. If the XML-RPC "
"packet represents a fault condition, this function will raise a :exc:`Fault`"
" exception. The *use_builtin_types* flag can be used to cause date/time "
"values to be presented as :class:`datetime.datetime` objects and binary data"
" to be presented as :class:`bytes` objects; this flag is false by default."
msgstr ""
"将一个 XML-RPC 请求或响应转换为 Python 对象 ``(params, methodname)``。 *params* "
"是一个参数元组；*methodname* 是一个字符串，或者如果数据包没有提供方法名则为 ``None``。 如果 XML-RPC "
"数据包是代表一个故障条件，则此函数将引发一个 :exc:`Fault` 异常。 *use_builtin_types* 旗标可被用于将日期/时间值表示为"
" :class:`datetime.datetime` 对象并将二进制数据表示为 :class:`bytes` 对象；此旗标默认为假值。"

#: ../../library/xmlrpc.client.rst:543
msgid ""
"The obsolete *use_datetime* flag is similar to *use_builtin_types* but it "
"applies only to date/time values."
msgstr "已过时的 *use_datetime* 旗标与 *use_builtin_types* 类似但只作用于日期/时间值。"

#: ../../library/xmlrpc.client.rst:553
msgid "Example of Client Usage"
msgstr "客户端用法的示例"

#: ../../library/xmlrpc.client.rst:570
msgid ""
"To access an XML-RPC server through a HTTP proxy, you need to define a "
"custom transport.  The following example shows how::"
msgstr "要通过 HTTP 代理访问一个 XML-RPC 服务器，你必须自行定义一个传输。 下面的例子演示了具体做法::"

#: ../../library/xmlrpc.client.rst:595
msgid "Example of Client and Server Usage"
msgstr "客户端与服务器用法的示例"

#: ../../library/xmlrpc.client.rst:597
msgid "See :ref:`simplexmlrpcserver-example`."
msgstr "参见 :ref:`simplexmlrpcserver-example`。"

#: ../../library/xmlrpc.client.rst:601
msgid "Footnotes"
msgstr "备注"

#: ../../library/xmlrpc.client.rst:602
msgid ""
"This approach has been first presented in `a discussion on xmlrpc.com "
"<https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader$1208?mode=topic>`_."
msgstr ""
"此做法被首次提及是在 `a discussion on xmlrpc.com "
"<https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader$1208?mode=topic>`_。"
