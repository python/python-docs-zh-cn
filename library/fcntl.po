# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fcntl.rst:2
msgid ":mod:`!fcntl` --- The ``fcntl`` and ``ioctl`` system calls"
msgstr ":mod:`!fcntl` --- ``fcntl`` 和 ``ioctl`` 系统调用"

#: ../../library/fcntl.rst:16
msgid ""
"This module performs file and I/O control on file descriptors. It is an "
"interface to the :c:func:`fcntl` and :c:func:`ioctl` Unix routines. See the "
":manpage:`fcntl(2)` and :manpage:`ioctl(2)` Unix manual pages for full "
"details."
msgstr ""
"本模块基于文件描述符来执行文件和 I/O 控制。 它是 :c:func:`fcntl` 和 :c:func:`ioctl` Unix 例程的接口。 "
"请参阅 :manpage:`fcntl(2)` 和 :manpage:`ioctl(2)` Unix 手册页了解详情。"

#: ../../library/fcntl.rst:21
msgid "Availability"
msgstr "Availability"

#: ../../library/fcntl.rst:23
msgid ""
"All functions in this module take a file descriptor *fd* as their first "
"argument.  This can be an integer file descriptor, such as returned by "
"``sys.stdin.fileno()``, or an :class:`io.IOBase` object, such as "
"``sys.stdin`` itself, which provides a :meth:`~io.IOBase.fileno` that "
"returns a genuine file descriptor."
msgstr ""
"本模块的所有函数都接受文件描述符 *fd* 作为第一个参数。可以是一个整数形式的文件描述符，比如 ``sys.stdin.fileno()`` "
"的返回结果，或为 :class:`io.IOBase` 对象，比如 ``sys.stdin`` 提供一个 "
":meth:`~io.IOBase.fileno`，可返回一个真正的文件描述符。"

#: ../../library/fcntl.rst:29
msgid ""
"Operations in this module used to raise an :exc:`IOError` where they now "
"raise an :exc:`OSError`."
msgstr "本模块的操作以前触发的是 :exc:`IOError`，现在则会触发 :exc:`OSError`。"

#: ../../library/fcntl.rst:33
msgid ""
"The fcntl module now contains ``F_ADD_SEALS``, ``F_GET_SEALS``, and "
"``F_SEAL_*`` constants for sealing of :func:`os.memfd_create` file "
"descriptors."
msgstr ""
"fcntl 模块现在有了 ``F_ADD_SEALS`` 、``F_GET_SEALS``  和 ``F_SEAL_*`` 常量，用于文件描述符 "
":func:`os.memfd_create` 的封装。"

#: ../../library/fcntl.rst:38
msgid ""
"On macOS, the fcntl module exposes the ``F_GETPATH`` constant, which obtains"
" the path of a file from a file descriptor. On Linux(>=3.15), the fcntl "
"module exposes the ``F_OFD_GETLK``, ``F_OFD_SETLK`` and ``F_OFD_SETLKW`` "
"constants, which are used when working with open file description locks."
msgstr ""
"在 macOS 上，fcntl 模块提供了 ``F_GETPATH`` 常量，从文件描述符获取文件的路径。 在 Linux(>=3.15) "
"上，fcntl 模块提供了 ``F_OFD_GETLK``, ``F_OFD_SETLK`` 和 ``F_OFD_SETLKW`` "
"常量，它们将在处理打开文件描述锁时被使用。"

#: ../../library/fcntl.rst:45
msgid ""
"On Linux >= 2.6.11, the fcntl module exposes the ``F_GETPIPE_SZ`` and "
"``F_SETPIPE_SZ`` constants, which allow to check and modify a pipe's size "
"respectively."
msgstr ""
"在 Linux 2.6.11 以上版本中，fcntl 模块提供了 ``F_GETPIPE_SZ`` 和 ``F_SETPIPE_SZ`` "
"常量，分别用于检查和修改管道的大小。"

#: ../../library/fcntl.rst:50
msgid ""
"On FreeBSD, the fcntl module exposes the ``F_DUP2FD`` and "
"``F_DUP2FD_CLOEXEC`` constants, which allow to duplicate a file descriptor, "
"the latter setting ``FD_CLOEXEC`` flag in addition."
msgstr ""
"在 FreeBSD 上，fcntl 模块会暴露 ``F_DUP2FD`` 和 ``F_DUP2FD_CLOEXEC`` "
"常量，它们允许复制文件描述符，后者还额外设置了 ``FD_CLOEXEC`` 旗标。"

#: ../../library/fcntl.rst:55
msgid ""
"On Linux >= 4.5, the :mod:`fcntl` module exposes the ``FICLONE`` and "
"``FICLONERANGE`` constants, which allow to share some data of one file with "
"another file by reflinking on some filesystems (e.g., btrfs, OCFS2, and "
"XFS). This behavior is commonly referred to as \"copy-on-write\"."
msgstr ""
"在 Linux >= 4.5 上，:mod:`fcntl` 模块将公开 ``FICLONE`` 和 ``FICLONERANGE`` "
"常量，这允许在某些系统上（例如 btrfs, OCFS2, 和 XFS）通过将一个文件引用链接到另一个文件来共享某些数据。 "
"此行为通常被称为“写入时拷贝”。"

#: ../../library/fcntl.rst:61
msgid "The module defines the following functions:"
msgstr "这个模块定义了以下函数："

#: ../../library/fcntl.rst:66
msgid ""
"Perform the operation *cmd* on file descriptor *fd* (file objects providing "
"a :meth:`~io.IOBase.fileno` method are accepted as well).  The values used "
"for *cmd* are operating system dependent, and are available as constants in "
"the :mod:`fcntl` module, using the same names as used in the relevant C "
"header files. The argument *arg* can either be an integer value, or a "
":class:`bytes` object. With an integer value, the return value of this "
"function is the integer return value of the C :c:func:`fcntl` call.  When "
"the argument is bytes it represents a binary structure, e.g. created by "
":func:`struct.pack`. The binary data is copied to a buffer whose address is "
"passed to the C :c:func:`fcntl` call.  The return value after a successful "
"call is the contents of the buffer, converted to a :class:`bytes` object. "
"The length of the returned object will be the same as the length of the "
"*arg* argument. This is limited to 1024 bytes. If the information returned "
"in the buffer by the operating system is larger than 1024 bytes, this is "
"most likely to result in a segmentation violation or a more subtle data "
"corruption."
msgstr ""
"对文件描述符 *fd* 执行 *cmd* 操作（能够提供 :meth:`~io.IOBase.fileno` 方法的文件对象也可以接受）。 *cmd* "
"可用的值与操作系统有关，在 :mod:`fcntl` 模块中可作为常量使用，名称与相关 C 语言头文件中的一样。参数 *arg* 可以是整数或 "
":class:`bytes` 对象。若为整数值，则本函数的返回值是 C 语言  :c:func:`fcntl` "
"调用的整数返回值。若为字节串，则其代表一个二进制结构，比如由 :func:`struct.pack` "
"创建的数据。该二进制数据将被复制到一个缓冲区，缓冲区地址传给 C 调用 :c:func:`fcntl`。调用成功后的返回值位于缓冲区内，转换为一个 "
":class:`bytes` 对象。返回的对象长度将与 *arg* 参数的长度相同。上限为 1024 字节。如果操作系统在缓冲区中返回的信息大于 "
"1024 字节，很可能导致内存段冲突，或更为不易察觉的数据错误。"

#: ../../library/fcntl.rst:83
msgid "If the :c:func:`fcntl` call fails, an :exc:`OSError` is raised."
msgstr "如果 :c:func:`fcntl` 调用失败，将引发 :exc:`OSError`。"

#: ../../library/fcntl.rst:85
msgid ""
"Raises an :ref:`auditing event <auditing>` ``fcntl.fcntl`` with arguments "
"``fd``, ``cmd``, ``arg``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``fcntl.fcntl`` 并附带参数 ``fd``, ``cmd``, ``arg``。"

#: ../../library/fcntl.rst:90
msgid ""
"This function is identical to the :func:`~fcntl.fcntl` function, except that"
" the argument handling is even more complicated."
msgstr "本函数与 :func:`~fcntl.fcntl` 函数相同，只是参数的处理更加复杂。"

#: ../../library/fcntl.rst:93
msgid ""
"The *request* parameter is limited to values that can fit in 32-bits. "
"Additional constants of interest for use as the *request* argument can be "
"found in the :mod:`termios` module, under the same names as used in the "
"relevant C header files."
msgstr ""
"*request* 参数的上限是 32位。:mod:`termios` 模块中包含了可用作 *request* 参数其他常量，名称与相关 C "
"头文件中定义的相同。"

#: ../../library/fcntl.rst:98
msgid ""
"The parameter *arg* can be one of an integer, an object supporting the read-"
"only buffer interface (like :class:`bytes`) or an object supporting the "
"read-write buffer interface (like :class:`bytearray`)."
msgstr ""
"参数 *arg* 可为整数、支持只读缓冲区接口的对象（如 :class:`bytes` ）或支持读写缓冲区接口的对象（如 "
":class:`bytearray` ）。"

#: ../../library/fcntl.rst:102
msgid ""
"In all but the last case, behaviour is as for the :func:`~fcntl.fcntl` "
"function."
msgstr "除了最后一种情况，其他情况下的行为都与 :func:`~fcntl.fcntl` 函数一样。"

#: ../../library/fcntl.rst:105
msgid ""
"If a mutable buffer is passed, then the behaviour is determined by the value"
" of the *mutate_flag* parameter."
msgstr "如果传入的是个可变缓冲区，那么行为就由 *mutate_flag* 参数决定。"

#: ../../library/fcntl.rst:108
msgid ""
"If it is false, the buffer's mutability is ignored and behaviour is as for a"
" read-only buffer, except that the 1024 byte limit mentioned above is "
"avoided -- so long as the buffer you pass is at least as long as what the "
"operating system wants to put there, things should work."
msgstr ""
"如果 *mutate_flag*  为 False，缓冲区的可变性将被忽略，行为与只读缓冲区一样，只是没有了上述 1024 "
"字节的上限——只要传入的缓冲区能容纳操作系统放入的数据即可。"

#: ../../library/fcntl.rst:113
msgid ""
"If *mutate_flag* is true (the default), then the buffer is (in effect) "
"passed to the underlying :func:`ioctl` system call, the latter's return code"
" is passed back to the calling Python, and the buffer's new contents reflect"
" the action of the :func:`ioctl`.  This is a slight simplification, because "
"if the supplied buffer is less than 1024 bytes long it is first copied into "
"a static buffer 1024 bytes long which is then passed to :func:`ioctl` and "
"copied back into the supplied buffer."
msgstr ""
"如果 *mutate_flag* 为 True（默认值），那么缓冲区（实际上）会传给底层的 系统调用 :func:`ioctl` "
"，其返回代码则会回传给调用它的 Python，而缓冲区的新数据则反映了 :func:`ioctl` "
"的运行结果。这里做了一点简化，因为若是给出的缓冲区少于 1024 字节，首先会被复制到一个 1024 字节长的静态缓冲区再传给  "
":func:`ioctl` ，然后把结果复制回给出的缓冲区去。"

#: ../../library/fcntl.rst:121
msgid ""
"If the :c:func:`ioctl` call fails, an :exc:`OSError` exception is raised."
msgstr "如果 :c:func:`ioctl` 调用失败，将引发 :exc:`OSError` 异常。"

#: ../../library/fcntl.rst:123
msgid "An example::"
msgstr "举个例子："

#: ../../library/fcntl.rst:125
msgid ""
">>> import array, fcntl, struct, termios, os\n"
">>> os.getpgrp()\n"
"13341\n"
">>> struct.unpack('h', fcntl.ioctl(0, termios.TIOCGPGRP, \"  \"))[0]\n"
"13341\n"
">>> buf = array.array('h', [0])\n"
">>> fcntl.ioctl(0, termios.TIOCGPGRP, buf, 1)\n"
"0\n"
">>> buf\n"
"array('h', [13341])"
msgstr ""
">>> import array, fcntl, struct, termios, os\n"
">>> os.getpgrp()\n"
"13341\n"
">>> struct.unpack('h', fcntl.ioctl(0, termios.TIOCGPGRP, \"  \"))[0]\n"
"13341\n"
">>> buf = array.array('h', [0])\n"
">>> fcntl.ioctl(0, termios.TIOCGPGRP, buf, 1)\n"
"0\n"
">>> buf\n"
"array('h', [13341])"

#: ../../library/fcntl.rst:136
msgid ""
"Raises an :ref:`auditing event <auditing>` ``fcntl.ioctl`` with arguments "
"``fd``, ``request``, ``arg``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``fcntl.ioctl`` 并附带参数 ``fd``, ``request``, "
"``arg``。"

#: ../../library/fcntl.rst:141
msgid ""
"Perform the lock operation *operation* on file descriptor *fd* (file objects"
" providing a :meth:`~io.IOBase.fileno` method are accepted as well). See the"
" Unix manual :manpage:`flock(2)` for details.  (On some systems, this "
"function is emulated using :c:func:`fcntl`.)"
msgstr ""
"在文件描述符 *fd* 上执行加锁操作 *operation* (也接受能提供 :meth:`~io.IOBase.fileno` 方法的文件对象)。 "
"详见 Unix 手册  :manpage:`flock(2)`。 (在某些系统中，此函数是用 :c:func:`fcntl` 模拟出来的。)"

#: ../../library/fcntl.rst:146
msgid ""
"If the :c:func:`flock` call fails, an :exc:`OSError` exception is raised."
msgstr "如果 :c:func:`flock` 调用失败，将引发 :exc:`OSError` 异常。"

#: ../../library/fcntl.rst:148
msgid ""
"Raises an :ref:`auditing event <auditing>` ``fcntl.flock`` with arguments "
"``fd``, ``operation``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``fcntl.flock`` 并附带参数 ``fd``, ``operation``。"

#: ../../library/fcntl.rst:153
msgid ""
"This is essentially a wrapper around the :func:`~fcntl.fcntl` locking calls."
" *fd* is the file descriptor (file objects providing a "
":meth:`~io.IOBase.fileno` method are accepted as well) of the file to lock "
"or unlock, and *cmd* is one of the following values:"
msgstr ""
"本质上是对 :func:`~fcntl.fcntl` 加锁调用的封装。*fd* 是要加解锁的文件描述符（也接受能提供 "
":meth:`~io.IOBase.fileno` 方法的文件对象），*cmd* 是以下值之一："

#: ../../library/fcntl.rst:160
msgid "Release an existing lock."
msgstr "释放一个已存在的锁 。"

#: ../../library/fcntl.rst:164
msgid "Acquire a shared lock."
msgstr "获取一个共享的锁。"

#: ../../library/fcntl.rst:168
msgid "Acquire an exclusive lock."
msgstr "获得一个独占的锁。"

#: ../../library/fcntl.rst:172
msgid ""
"Bitwise OR with any of the other three ``LOCK_*`` constants to make the "
"request non-blocking."
msgstr "与其他三个 ``LOCK_*`` 常量中的任何一个进行位或操作，使请求不阻塞。"

#: ../../library/fcntl.rst:175
msgid ""
"If :const:`!LOCK_NB` is used and the lock cannot be acquired, an "
":exc:`OSError` will be raised and the exception will have an *errno* "
"attribute set to :const:`~errno.EACCES` or :const:`~errno.EAGAIN` (depending"
" on the operating system; for portability, check for both values).  On at "
"least some systems, :const:`!LOCK_EX` can only be used if the file "
"descriptor refers to a file opened for writing."
msgstr ""
"如果使用了 :const:`!LOCK_NB` ，但无法获取锁 ，则 :exc:`OSError` 将被引发 ，异常将被 *errno* 属性 设置为 "
":const:`~errno.EACCES` 或 :const:`~errno.EAGAIN` （取决于操作系统；为便于移植，请检查这两个值）。 "
"至少在某些系统中，只有当文件描述符指向一个已打开供写入的文件时，才能使用:const:`!LOCK_EX` 。"

#: ../../library/fcntl.rst:182
msgid ""
"*len* is the number of bytes to lock, *start* is the byte offset at which "
"the lock starts, relative to *whence*, and *whence* is as with "
":func:`io.IOBase.seek`, specifically:"
msgstr ""
"*len* 是要锁定的字节数，*start* 是自 *whence* 开始锁定的字节偏移量，*whence* 与 "
":func:`io.IOBase.seek` 的定义一样。"

#: ../../library/fcntl.rst:186
msgid "``0`` -- relative to the start of the file (:const:`os.SEEK_SET`)"
msgstr "``0`` -- 相对于文件开头 (:const:`os.SEEK_SET`)"

#: ../../library/fcntl.rst:187
msgid ""
"``1`` -- relative to the current buffer position (:const:`os.SEEK_CUR`)"
msgstr "``1`` -- 相对于当前缓冲区位置 (:const:`os.SEEK_CUR`)"

#: ../../library/fcntl.rst:188
msgid "``2`` -- relative to the end of the file (:const:`os.SEEK_END`)"
msgstr "``2`` -- 相对于文件末尾 (:const:`os.SEEK_END`)"

#: ../../library/fcntl.rst:190
msgid ""
"The default for *start* is 0, which means to start at the beginning of the "
"file. The default for *len* is 0 which means to lock to the end of the file."
"  The default for *whence* is also 0."
msgstr ""
"*start* 的默认值为 0，表示从文件起始位置开始。*len* 的默认值是 0，表示加锁至文件末尾。 *whence* 的默认值也是 0。"

#: ../../library/fcntl.rst:194
msgid ""
"Raises an :ref:`auditing event <auditing>` ``fcntl.lockf`` with arguments "
"``fd``, ``cmd``, ``len``, ``start``, ``whence``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``fcntl.lockf`` 并附带参数 ``fd``, ``cmd``, ``len``, "
"``start``, ``whence``。"

#: ../../library/fcntl.rst:196
msgid "Examples (all on a SVR4 compliant system)::"
msgstr "示例（都是运行于符合 SVR4 的系统）："

#: ../../library/fcntl.rst:198
msgid ""
"import struct, fcntl, os\n"
"\n"
"f = open(...)\n"
"rv = fcntl.fcntl(f, fcntl.F_SETFL, os.O_NDELAY)\n"
"\n"
"lockdata = struct.pack('hhllhh', fcntl.F_WRLCK, 0, 0, 0, 0, 0)\n"
"rv = fcntl.fcntl(f, fcntl.F_SETLKW, lockdata)"
msgstr ""
"import struct, fcntl, os\n"
"\n"
"f = open(...)\n"
"rv = fcntl.fcntl(f, fcntl.F_SETFL, os.O_NDELAY)\n"
"\n"
"lockdata = struct.pack('hhllhh', fcntl.F_WRLCK, 0, 0, 0, 0, 0)\n"
"rv = fcntl.fcntl(f, fcntl.F_SETLKW, lockdata)"

#: ../../library/fcntl.rst:206
msgid ""
"Note that in the first example the return value variable *rv* will hold an "
"integer value; in the second example it will hold a :class:`bytes` object.  "
"The structure lay-out for the *lockdata* variable is system dependent --- "
"therefore using the :func:`flock` call may be better."
msgstr ""
"注意，在第一个例子中，返回值变量 *rv* 将存有整数；在第二个例子中，该变量中将存有一个 :class:`bytes` 对象。*lockdata* "
"变量的结构布局视系统而定——因此采用 :func:`flock` 调用可能会更好。"

#: ../../library/fcntl.rst:214
msgid "Module :mod:`os`"
msgstr "模块 :mod:`os`"

#: ../../library/fcntl.rst:215
msgid ""
"If the locking flags :const:`~os.O_SHLOCK` and :const:`~os.O_EXLOCK` are "
"present in the :mod:`os` module (on BSD only), the :func:`os.open` function "
"provides an alternative to the :func:`lockf` and :func:`flock` functions."
msgstr ""
"如果加锁旗标 :const:`~os.O_SHLOCK` 和 :const:`~os.O_EXLOCK` 存在于 :mod:`os` 模块中（仅 BSD"
" 专属），则 :func:`os.open` 函数提供了对 :func:`lockf` 和 :func:`flock` 函数的替代。"

#: ../../library/fcntl.rst:10
msgid "UNIX"
msgstr "UNIX"

#: ../../library/fcntl.rst:10
msgid "file control"
msgstr "文件控制"

#: ../../library/fcntl.rst:10
msgid "I/O control"
msgstr "I/O 控制"
