# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/audioop.rst:2
msgid ":mod:`audioop` --- Manipulate raw audio data"
msgstr ":mod:`audioop` --- 处理原始音频数据"

#: ../../library/audioop.rst:11
msgid ""
"The :mod:`audioop` module is deprecated (see :pep:`PEP 594 <594#audioop>` "
"for details)."
msgstr ":mod:`audioop` 模块已被弃用（请参阅 :pep:`PEP 594 <594#audioop>` 了解详情）。"

#: ../../library/audioop.rst:14
msgid ""
"The :mod:`audioop` module contains some useful operations on sound "
"fragments. It operates on sound fragments consisting of signed integer "
"samples 8, 16, 24 or 32 bits wide, stored in :term:`bytes-like objects "
"<bytes-like object>`.  All scalar items are integers, unless specified "
"otherwise."
msgstr ""
":mod:`audioop` 模块包含针对声音片段的一些有用操作。它操作的声音片段由 8、16、24 或 32 位宽的有符号整型采样值组成，存储在 "
":term:`类字节串对象 <bytes-like object>` 中。除非特别说明，否则所有标量项目均为整数。"

#: ../../library/audioop.rst:19
msgid ""
"Support for 24-bit samples was added. All functions now accept any "
":term:`bytes-like object`. String input now results in an immediate error."
msgstr ""
"增加了对 24 位采样的支持。现在，所有函数都接受任何 :term:`类字节串对象 <bytes-like "
"object>`。而传入字符串会立即导致错误。"

#: ../../library/audioop.rst:30
msgid ""
"This module provides support for a-LAW, u-LAW and Intel/DVI ADPCM encodings."
msgstr "本模块提供对 a-LAW、u-LAW 和 Intel/DVI ADPCM 编码的支持。"

#: ../../library/audioop.rst:34
msgid ""
"A few of the more complicated operations only take 16-bit samples, otherwise"
" the sample size (in bytes) is always a parameter of the operation."
msgstr "部分更复杂的操作仅接受 16 位采样，而其他操作始终需要采样大小（以字节为单位）作为该操作的参数。"

#: ../../library/audioop.rst:37
msgid "The module defines the following variables and functions:"
msgstr "此模块定义了下列变量和函数："

#: ../../library/audioop.rst:42
msgid ""
"This exception is raised on all errors, such as unknown number of bytes per "
"sample, etc."
msgstr "所有错误都会抛出此异常，比如采样值的字节数未知等等。"

#: ../../library/audioop.rst:48
msgid ""
"Return a fragment which is the addition of the two samples passed as "
"parameters. *width* is the sample width in bytes, either ``1``, ``2``, ``3``"
" or ``4``.  Both fragments should have the same length.  Samples are "
"truncated in case of overflow."
msgstr ""
"两个采样作为参数传入，返回一个片段，该片段是两个采样的和。*width* 是采样位宽（以字节为单位），可以取 ``1``, ``2``, ``3`` 或"
" ``4``。两个片段的长度应相同。如果发生溢出，较长的采样将被截断。"

#: ../../library/audioop.rst:55
msgid ""
"Decode an Intel/DVI ADPCM coded fragment to a linear fragment.  See the "
"description of :func:`lin2adpcm` for details on ADPCM coding. Return a tuple"
" ``(sample, newstate)`` where the sample has the width specified in *width*."
msgstr ""
"将 Intel/DVI ADPCM 编码的片段解码为线性片段。关于 ADPCM 编码的详情请参阅 :func:`lin2adpcm` "
"的描述。返回一个元组 ``(sample, newstate)``，其中 sample 的位宽由 *width* 指定。"

#: ../../library/audioop.rst:62
msgid ""
"Convert sound fragments in a-LAW encoding to linearly encoded sound "
"fragments. a-LAW encoding always uses 8 bits samples, so *width* refers only"
" to the sample width of the output fragment here."
msgstr ""
"将 a-LAW 编码的声音片段转换为线性编码声音片段。由于 a-LAW 编码采样值始终为 8 位，因此这里的 *width* 仅指输出片段的采样位宽。"

#: ../../library/audioop.rst:69
msgid "Return the average over all samples in the fragment."
msgstr "返回片段中所有采样值的平均值。"

#: ../../library/audioop.rst:74
msgid ""
"Return the average peak-peak value over all samples in the fragment. No "
"filtering is done, so the usefulness of this routine is questionable."
msgstr "返回片段中所有采样值的平均峰峰值。由于没有进行过滤，因此该例程的实用性尚存疑。"

#: ../../library/audioop.rst:80
msgid ""
"Return a fragment that is the original fragment with a bias added to each "
"sample.  Samples wrap around in case of overflow."
msgstr "返回一个片段，该片段由原始片段中的每个采样值加上偏差组成。在溢出时采样值会回卷 (wrap around)。"

#: ../../library/audioop.rst:86
msgid ""
"\"Byteswap\" all samples in a fragment and returns the modified fragment. "
"Converts big-endian samples to little-endian and vice versa."
msgstr "“按字节交换”片段中的所有采样值，返回修改后的片段。将大端序采样转换为小端序采样，反之亦然。"

#: ../../library/audioop.rst:94
msgid ""
"Return the number of zero crossings in the fragment passed as an argument."
msgstr "将片段作为参数传入，返回其中过零点的数量。"

#: ../../library/audioop.rst:99
msgid ""
"Return a factor *F* such that ``rms(add(fragment, mul(reference, -F)))`` is "
"minimal, i.e., return the factor with which you should multiply *reference* "
"to make it match as well as possible to *fragment*.  The fragments should "
"both contain 2-byte samples."
msgstr ""
"返回一个系数 *F* 使得 ``rms(add(fragment, mul(reference, -F)))`` 最小，即返回的系数乘以 "
"*reference* 后与 *fragment* 最匹配。两个片段都应包含 2 字节宽的采样。"

#: ../../library/audioop.rst:104
msgid "The time taken by this routine is proportional to ``len(fragment)``."
msgstr "本例程所需的时间与 ``len(fragment)`` 成正比。"

#: ../../library/audioop.rst:109
msgid ""
"Try to match *reference* as well as possible to a portion of *fragment* "
"(which should be the longer fragment).  This is (conceptually) done by "
"taking slices out of *fragment*, using :func:`findfactor` to compute the "
"best match, and minimizing the result.  The fragments should both contain "
"2-byte samples. Return a tuple ``(offset, factor)`` where *offset* is the "
"(integer) offset into *fragment* where the optimal match started and "
"*factor* is the (floating-point) factor as per :func:`findfactor`."
msgstr ""
"尽可能尝试让 *reference* 匹配 *fragment* 的一部分（*fragment* 应较长）。从概念上讲，完成这些靠从 "
"*fragment* 中取出切片，使用 :func:`findfactor` 计算最佳匹配，并最小化结果。两个片段都应包含 2 "
"字节宽的采样。返回一个元组 ``(offset, factor)``，其中 *offset* 是在 *fragment* "
"中的偏移量（整数），表示从此处开始最佳匹配，而 *factor* 是由 :func:`findfactor` 定义的因数（浮点数）。"

#: ../../library/audioop.rst:120
msgid ""
"Search *fragment* for a slice of length *length* samples (not bytes!) with "
"maximum energy, i.e., return *i* for which "
"``rms(fragment[i*2:(i+length)*2])`` is maximal.  The fragments should both "
"contain 2-byte samples."
msgstr ""
"在 *fragment* 中搜索所有长度为 *length* 的采样切片（不是字节！）中，能量最大的那一个切片，即返回 *i* 使得 "
"``rms(fragment[i*2:(i+length)*2])`` 最大。两个片段都应包含 2 字节宽的采样。"

#: ../../library/audioop.rst:124
msgid "The routine takes time proportional to ``len(fragment)``."
msgstr "本例程所需的时间与 ``len(fragment)`` 成正比。"

#: ../../library/audioop.rst:129
msgid "Return the value of sample *index* from the fragment."
msgstr "返回片段中采样值索引 *index* 的值。"

#: ../../library/audioop.rst:134
msgid ""
"Convert samples to 4 bit Intel/DVI ADPCM encoding.  ADPCM coding is an "
"adaptive coding scheme, whereby each 4 bit number is the difference between "
"one sample and the next, divided by a (varying) step.  The Intel/DVI ADPCM "
"algorithm has been selected for use by the IMA, so it may well become a "
"standard."
msgstr ""
"将采样转换为 4 位 Intel/DVI ADPCM 编码。ADPCM 编码是一种自适应编码方案，其中每个 4 "
"比特数字是一个采样值与下一个采样值之间的差除以（不定的）步长。IMA 已选择使用 Intel/DVI ADPCM 算法，因此它很可能成为标准。"

#: ../../library/audioop.rst:139
msgid ""
"*state* is a tuple containing the state of the coder.  The coder returns a "
"tuple ``(adpcmfrag, newstate)``, and the *newstate* should be passed to the "
"next call of :func:`lin2adpcm`.  In the initial call, ``None`` can be passed"
" as the state. *adpcmfrag* is the ADPCM coded fragment packed 2 4-bit values"
" per byte."
msgstr ""
"*state* 是一个表示编码器状态的元组。编码器返回一个元组 ``(adpcmfrag, newstate)``，而 *newstate* "
"要在下一次调用 :func:`lin2adpcm` 时传入。在初始调用中，可以将 ``None`` 作为 state 传递。*adpcmfrag* 是 "
"ADPCM 编码的片段，每个字节打包了 2 个 4 比特值。"

#: ../../library/audioop.rst:147
msgid ""
"Convert samples in the audio fragment to a-LAW encoding and return this as a"
" bytes object.  a-LAW is an audio encoding format whereby you get a dynamic "
"range of about 13 bits using only 8 bit samples.  It is used by the Sun "
"audio hardware, among others."
msgstr ""
"将音频片段中的采样值转换为 a-LAW 编码，并将其作为字节对象返回。a-LAW 是一种音频编码格式，仅使用 8 位采样即可获得大约 13 "
"位的动态范围。Sun 音频硬件等使用该编码。"

#: ../../library/audioop.rst:155
msgid "Convert samples between 1-, 2-, 3- and 4-byte formats."
msgstr "将采样在 1、2、3 和 4 字节格式之间转换。"

#: ../../library/audioop.rst:159
msgid ""
"In some audio formats, such as .WAV files, 16, 24 and 32 bit samples are "
"signed, but 8 bit samples are unsigned.  So when converting to 8 bit wide "
"samples for these formats, you need to also add 128 to the result::"
msgstr ""
"在某些音频格式（如 .WAV 文件）中，16、24 和 32 位采样是有符号的，但 8 位采样是无符号的。因此，当将这些格式转换为 8 "
"位宽采样时，还需使结果加上 128::"

#: ../../library/audioop.rst:166
msgid ""
"The same, in reverse, has to be applied when converting from 8 to 16, 24 or "
"32 bit width samples."
msgstr "反之，将 8 位宽的采样转换为 16、24 或 32 位时，必须采用相同的处理。"

#: ../../library/audioop.rst:172
msgid ""
"Convert samples in the audio fragment to u-LAW encoding and return this as a"
" bytes object.  u-LAW is an audio encoding format whereby you get a dynamic "
"range of about 14 bits using only 8 bit samples.  It is used by the Sun "
"audio hardware, among others."
msgstr ""
"将音频片段中的采样值转换为 u-LAW 编码，并将其作为字节对象返回。u-LAW 是一种音频编码格式，仅使用 8 位采样即可获得大约 14 "
"位的动态范围。Sun 音频硬件等使用该编码。"

#: ../../library/audioop.rst:180
msgid ""
"Return the maximum of the *absolute value* of all samples in a fragment."
msgstr "返回片段中所有采样值的最大 *绝对值*。"

#: ../../library/audioop.rst:185
msgid "Return the maximum peak-peak value in the sound fragment."
msgstr "返回声音片段中的最大峰峰值。"

#: ../../library/audioop.rst:190
msgid ""
"Return a tuple consisting of the minimum and maximum values of all samples "
"in the sound fragment."
msgstr "返回声音片段中所有采样值的最小值和最大值组成的元组。"

#: ../../library/audioop.rst:196
msgid ""
"Return a fragment that has all samples in the original fragment multiplied "
"by the floating-point value *factor*.  Samples are truncated in case of "
"overflow."
msgstr "返回一个片段，该片段由原始片段中的每个采样值乘以浮点值 *factor* 组成。如果发生溢出，采样将被截断。"

#: ../../library/audioop.rst:202
msgid "Convert the frame rate of the input fragment."
msgstr "转换输入片段的帧速率。"

#: ../../library/audioop.rst:204
msgid ""
"*state* is a tuple containing the state of the converter.  The converter "
"returns a tuple ``(newfragment, newstate)``, and *newstate* should be passed"
" to the next call of :func:`ratecv`.  The initial call should pass ``None`` "
"as the state."
msgstr ""
"*state* 是一个表示转换器状态的元组。转换器返回一个元组 ``(newfragment, newstate)``，而 *newstate* "
"要在下一次调用 :func:`ratecv` 时传入。初始调用应传入 ``None`` 作为 state。"

#: ../../library/audioop.rst:208
msgid ""
"The *weightA* and *weightB* arguments are parameters for a simple digital "
"filter and default to ``1`` and ``0`` respectively."
msgstr "参数 *weightA* 和 *weightB* 是简单数字滤波器的参数，默认分别为 ``1`` 和 ``0``。"

#: ../../library/audioop.rst:214
msgid "Reverse the samples in a fragment and returns the modified fragment."
msgstr "将片段中的采样值反转，返回修改后的片段。"

#: ../../library/audioop.rst:219
msgid ""
"Return the root-mean-square of the fragment, i.e. ``sqrt(sum(S_i^2)/n)``."
msgstr "返回片段的均方根值，即 ``sqrt(sum(S_i^2)/n)``。"

#: ../../library/audioop.rst:221
msgid "This is a measure of the power in an audio signal."
msgstr "测量音频信号的能量。"

#: ../../library/audioop.rst:226
msgid ""
"Convert a stereo fragment to a mono fragment.  The left channel is "
"multiplied by *lfactor* and the right channel by *rfactor* before adding the"
" two channels to give a mono signal."
msgstr "将立体声片段转换为单声道片段。左通道乘以 *lfactor*，右通道乘以 *rfactor*，然后两个通道相加得到单声道信号。"

#: ../../library/audioop.rst:233
msgid ""
"Generate a stereo fragment from a mono fragment.  Each pair of samples in "
"the stereo fragment are computed from the mono sample, whereby left channel "
"samples are multiplied by *lfactor* and right channel samples by *rfactor*."
msgstr ""
"由单声道片段生成立体声片段。立体声片段中的两对采样都是从单声道计算而来的，即左声道是乘以 *lfactor*，右声道是乘以 *rfactor*。"

#: ../../library/audioop.rst:240
msgid ""
"Convert sound fragments in u-LAW encoding to linearly encoded sound "
"fragments. u-LAW encoding always uses 8 bits samples, so *width* refers only"
" to the sample width of the output fragment here."
msgstr ""
"将 u-LAW 编码的声音片段转换为线性编码声音片段。由于 u-LAW 编码采样值始终为 8 位，因此这里的 *width* 仅指输出片段的采样位宽。"

#: ../../library/audioop.rst:244
msgid ""
"Note that operations such as :func:`.mul` or :func:`.max` make no "
"distinction between mono and stereo fragments, i.e. all samples are treated "
"equal.  If this is a problem the stereo fragment should be split into two "
"mono fragments first and recombined later.  Here is an example of how to do "
"that::"
msgstr ""
"请注意，诸如 :func:`.mul` 或 :func:`.max` "
"之类的操作在单声道和立体声间没有区别，即所有采样都作相同处理。如果出现问题，应先将立体声片段拆分为两个单声道片段，之后再重组。以下是如何进行该操作的示例::"

#: ../../library/audioop.rst:258
msgid ""
"If you use the ADPCM coder to build network packets and you want your "
"protocol to be stateless (i.e. to be able to tolerate packet loss) you "
"should not only transmit the data but also the state.  Note that you should "
"send the *initial* state (the one you passed to :func:`lin2adpcm`) along to "
"the decoder, not the final state (as returned by the coder).  If you want to"
" use :class:`struct.Struct` to store the state in binary you can code the "
"first element (the predicted value) in 16 bits and the second (the delta "
"index) in 8."
msgstr ""
"如果使用 ADPCM "
"编码器构造网络数据包，并且希望协议是无状态的（即能够容忍数据包丢失），则不仅需要传输数据，还应该传输状态。请注意，必须将*初始*状态（传入 "
":func:`lin2adpcm` 的状态）发送给解码器，不能发送最终状态（编码器返回的状态）。如果要使用 :class:`struct.Struct`"
" 以二进制保存状态，可以将第一个元素（预测值）用 16 位编码，将第二个元素（增量索引）用 8 位编码。"

#: ../../library/audioop.rst:266
msgid ""
"The ADPCM coders have never been tried against other ADPCM coders, only "
"against themselves.  It could well be that I misinterpreted the standards in"
" which case they will not be interoperable with the respective standards."
msgstr "本 ADPCM 编码器从不与其他 ADPCM 编码器对立，仅针对自身。本开发者可能会误读标准，这种情况下它们将无法与相应标准互操作。"

#: ../../library/audioop.rst:270
msgid ""
"The :func:`find\\*` routines might look a bit funny at first sight. They are"
" primarily meant to do echo cancellation.  A reasonably fast way to do this "
"is to pick the most energetic piece of the output sample, locate that in the"
" input sample and subtract the whole output sample from the input sample::"
msgstr ""
"乍看之下 :func:`find\\*` "
"例程可能有些可笑。它们主要是用于回声消除，一种快速有效的方法是选取输出样本中能量最高的片段，在输入样本中定位该片段，然后从输入样本中减去整个输出样本::"

#: ../../library/audioop.rst:24
msgid "Intel/DVI ADPCM"
msgstr ""

#: ../../library/audioop.rst:24
msgid "ADPCM, Intel/DVI"
msgstr ""

#: ../../library/audioop.rst:24
msgid "a-LAW"
msgstr ""

#: ../../library/audioop.rst:24
msgid "u-LAW"
msgstr "u-LAW"
