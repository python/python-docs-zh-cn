# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# Tangyuan, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 17:49+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Tangyuan, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/stdtypes.rst:8
msgid "Built-in Types"
msgstr "内置类型"

#: ../../library/stdtypes.rst:10
msgid ""
"The following sections describe the standard types that are built into the "
"interpreter."
msgstr "以下各节描述了解释器中内置的标准类型。"

#: ../../library/stdtypes.rst:15
msgid ""
"The principal built-in types are numerics, sequences, mappings, classes, "
"instances and exceptions."
msgstr "主要的内置类型包括数值型、序列、映射、类、实例和异常。"

#: ../../library/stdtypes.rst:18
msgid ""
"Some collection classes are mutable.  The methods that add, subtract, or "
"rearrange their members in place, and don't return a specific item, never "
"return the collection instance itself but ``None``."
msgstr ""

#: ../../library/stdtypes.rst:22
msgid ""
"Some operations are supported by several object types; in particular, "
"practically all objects can be compared for equality, tested for truth "
"value, and converted to a string (with the :func:`repr` function or the "
"slightly different :func:`str` function).  The latter function is implicitly"
" used when an object is written by the :func:`print` function."
msgstr ""

#: ../../library/stdtypes.rst:32
msgid "Truth Value Testing"
msgstr "真值测试"

#: ../../library/stdtypes.rst:41
msgid ""
"Any object can be tested for truth value, for use in an :keyword:`if` or "
":keyword:`while` condition or as operand of the Boolean operations below."
msgstr ""

#: ../../library/stdtypes.rst:46
msgid ""
"By default, an object is considered true unless its class defines either a "
":meth:`__bool__` method that returns ``False`` or a :meth:`__len__` method "
"that returns zero, when called with the object. [1]_  Here are most of the "
"built-in objects considered false:"
msgstr ""

#: ../../library/stdtypes.rst:55
msgid "constants defined to be false: ``None`` and ``False``."
msgstr "定义为假的常量: ``None``  和 ``False``。"

#: ../../library/stdtypes.rst:57
msgid ""
"zero of any numeric type: ``0``, ``0.0``, ``0j``, ``Decimal(0)``, "
"``Fraction(0, 1)``"
msgstr "任何数值类型的零：``0``,``0.0``,``0j``,``Decimal(0)`` 、``Fraction(0, 1)``"

#: ../../library/stdtypes.rst:60
msgid ""
"empty sequences and collections: ``''``, ``()``, ``[]``, ``{}``, ``set()``, "
"``range(0)``"
msgstr "空序列和多项集:``''``,``()``,``[]``,``{}``,``set()`` 、``range(0)``"

#: ../../library/stdtypes.rst:69
msgid ""
"Operations and built-in functions that have a Boolean result always return "
"``0`` or ``False`` for false and ``1`` or ``True`` for true, unless "
"otherwise stated. (Important exception: the Boolean operations ``or`` and "
"``and`` always return one of their operands.)"
msgstr ""

#: ../../library/stdtypes.rst:78
msgid ""
"Boolean Operations --- :keyword:`!and`, :keyword:`!or`, :keyword:`!not`"
msgstr "布尔运算符——:keyword:`!and`、:keyword:`!or`、:keyword:`!not`"

#: ../../library/stdtypes.rst:82
msgid "These are the Boolean operations, ordered by ascending priority:"
msgstr "以下是布尔运算，按优先级从低到高排序："

#: ../../library/stdtypes.rst:85 ../../library/stdtypes.rst:143
#: ../../library/stdtypes.rst:275 ../../library/stdtypes.rst:364
#: ../../library/stdtypes.rst:414 ../../library/stdtypes.rst:862
#: ../../library/stdtypes.rst:1057
msgid "Operation"
msgstr "操作"

#: ../../library/stdtypes.rst:85 ../../library/stdtypes.rst:275
#: ../../library/stdtypes.rst:364 ../../library/stdtypes.rst:414
#: ../../library/stdtypes.rst:862 ../../library/stdtypes.rst:1057
msgid "Result"
msgstr "结果"

#: ../../library/stdtypes.rst:85 ../../library/stdtypes.rst:275
#: ../../library/stdtypes.rst:414 ../../library/stdtypes.rst:862
#: ../../library/stdtypes.rst:1057 ../../library/stdtypes.rst:2292
#: ../../library/stdtypes.rst:3502
msgid "Notes"
msgstr "备注"

#: ../../library/stdtypes.rst:87
msgid "``x or y``"
msgstr ""

#: ../../library/stdtypes.rst:87
msgid "if *x* is false, then *y*, else *x*"
msgstr ""

#: ../../library/stdtypes.rst:87 ../../library/stdtypes.rst:285
#: ../../library/stdtypes.rst:864 ../../library/stdtypes.rst:867
#: ../../library/stdtypes.rst:1068 ../../library/stdtypes.rst:2298
#: ../../library/stdtypes.rst:3508
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/stdtypes.rst:90
msgid "``x and y``"
msgstr ""

#: ../../library/stdtypes.rst:90
msgid "if *x* is false, then *x*, else *y*"
msgstr ""

#: ../../library/stdtypes.rst:90 ../../library/stdtypes.rst:288
#: ../../library/stdtypes.rst:308 ../../library/stdtypes.rst:1096
#: ../../library/stdtypes.rst:2302 ../../library/stdtypes.rst:2304
#: ../../library/stdtypes.rst:3512 ../../library/stdtypes.rst:3514
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/stdtypes.rst:93
msgid "``not x``"
msgstr ""

#: ../../library/stdtypes.rst:93
msgid "if *x* is false, then ``True``, else ``False``"
msgstr ""

#: ../../library/stdtypes.rst:93 ../../library/stdtypes.rst:876
#: ../../library/stdtypes.rst:1099 ../../library/stdtypes.rst:2306
#: ../../library/stdtypes.rst:2308 ../../library/stdtypes.rst:2310
#: ../../library/stdtypes.rst:2312 ../../library/stdtypes.rst:3516
#: ../../library/stdtypes.rst:3518 ../../library/stdtypes.rst:3520
#: ../../library/stdtypes.rst:3522
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/stdtypes.rst:102 ../../library/stdtypes.rst:319
#: ../../library/stdtypes.rst:432 ../../library/stdtypes.rst:903
#: ../../library/stdtypes.rst:1107 ../../library/stdtypes.rst:2338
#: ../../library/stdtypes.rst:3552
msgid "Notes:"
msgstr "注释："

#: ../../library/stdtypes.rst:105
msgid ""
"This is a short-circuit operator, so it only evaluates the second argument "
"if the first one is false."
msgstr ""

#: ../../library/stdtypes.rst:109
msgid ""
"This is a short-circuit operator, so it only evaluates the second argument "
"if the first one is true."
msgstr ""

#: ../../library/stdtypes.rst:113
msgid ""
"``not`` has a lower priority than non-Boolean operators, so ``not a == b`` "
"is interpreted as ``not (a == b)``, and ``a == not b`` is a syntax error."
msgstr ""

#: ../../library/stdtypes.rst:120
msgid "Comparisons"
msgstr ""

#: ../../library/stdtypes.rst:134
msgid ""
"There are eight comparison operations in Python.  They all have the same "
"priority (which is higher than that of the Boolean operations).  Comparisons"
" can be chained arbitrarily; for example, ``x < y <= z`` is equivalent to "
"``x < y and y <= z``, except that *y* is evaluated only once (but in both "
"cases *z* is not evaluated at all when ``x < y`` is found to be false)."
msgstr ""

#: ../../library/stdtypes.rst:140
msgid "This table summarizes the comparison operations:"
msgstr ""

#: ../../library/stdtypes.rst:143 ../../library/stdtypes.rst:2269
#: ../../library/stdtypes.rst:2292 ../../library/stdtypes.rst:3479
#: ../../library/stdtypes.rst:3502
msgid "Meaning"
msgstr "含意"

#: ../../library/stdtypes.rst:145
msgid "``<``"
msgstr "``<``"

#: ../../library/stdtypes.rst:145
msgid "strictly less than"
msgstr ""

#: ../../library/stdtypes.rst:147
msgid "``<=``"
msgstr "``<=``"

#: ../../library/stdtypes.rst:147
msgid "less than or equal"
msgstr ""

#: ../../library/stdtypes.rst:149
msgid "``>``"
msgstr "``>``"

#: ../../library/stdtypes.rst:149
msgid "strictly greater than"
msgstr ""

#: ../../library/stdtypes.rst:151
msgid "``>=``"
msgstr "``>=``"

#: ../../library/stdtypes.rst:151
msgid "greater than or equal"
msgstr ""

#: ../../library/stdtypes.rst:153
msgid "``==``"
msgstr "``==``"

#: ../../library/stdtypes.rst:153
msgid "equal"
msgstr ""

#: ../../library/stdtypes.rst:155
msgid "``!=``"
msgstr "``!=``"

#: ../../library/stdtypes.rst:155
msgid "not equal"
msgstr ""

#: ../../library/stdtypes.rst:157
msgid "``is``"
msgstr ""

#: ../../library/stdtypes.rst:157
msgid "object identity"
msgstr ""

#: ../../library/stdtypes.rst:159
msgid "``is not``"
msgstr ""

#: ../../library/stdtypes.rst:159
msgid "negated object identity"
msgstr ""

#: ../../library/stdtypes.rst:166
msgid ""
"Objects of different types, except different numeric types, never compare "
"equal. The ``==`` operator is always defined but for some object types (for "
"example, class objects) is equivalent to :keyword:`is`. The ``<``, ``<=``, "
"``>`` and ``>=`` operators are only defined where they make sense; for "
"example, they raise a :exc:`TypeError` exception when one of the arguments "
"is a complex number."
msgstr ""

#: ../../library/stdtypes.rst:180
msgid ""
"Non-identical instances of a class normally compare as non-equal unless the "
"class defines the :meth:`~object.__eq__` method."
msgstr ""

#: ../../library/stdtypes.rst:183
msgid ""
"Instances of a class cannot be ordered with respect to other instances of "
"the same class, or other types of object, unless the class defines enough of"
" the methods :meth:`~object.__lt__`, :meth:`~object.__le__`, "
":meth:`~object.__gt__`, and :meth:`~object.__ge__` (in general, "
":meth:`~object.__lt__` and :meth:`~object.__eq__` are sufficient, if you "
"want the conventional meanings of the comparison operators)."
msgstr ""

#: ../../library/stdtypes.rst:190
msgid ""
"The behavior of the :keyword:`is` and :keyword:`is not` operators cannot be "
"customized; also they can be applied to any two objects and never raise an "
"exception."
msgstr ""

#: ../../library/stdtypes.rst:198
msgid ""
"Two more operations with the same syntactic priority, :keyword:`in` and "
":keyword:`not in`, are supported by types that are :term:`iterable` or "
"implement the :meth:`__contains__` method."
msgstr ""

#: ../../library/stdtypes.rst:205
msgid "Numeric Types --- :class:`int`, :class:`float`, :class:`complex`"
msgstr ""

#: ../../library/stdtypes.rst:215
msgid ""
"There are three distinct numeric types: :dfn:`integers`, :dfn:`floating "
"point numbers`, and :dfn:`complex numbers`.  In addition, Booleans are a "
"subtype of integers.  Integers have unlimited precision.  Floating point "
"numbers are usually implemented using :c:type:`double` in C; information "
"about the precision and internal representation of floating point numbers "
"for the machine on which your program is running is available in "
":data:`sys.float_info`.  Complex numbers have a real and imaginary part, "
"which are each a floating point number.  To extract these parts from a "
"complex number *z*, use ``z.real`` and ``z.imag``. (The standard library "
"includes the additional numeric types :mod:`fractions.Fraction`, for "
"rationals, and :mod:`decimal.Decimal`, for floating-point numbers with user-"
"definable precision.)"
msgstr ""

#: ../../library/stdtypes.rst:237
msgid ""
"Numbers are created by numeric literals or as the result of built-in "
"functions and operators.  Unadorned integer literals (including hex, octal "
"and binary numbers) yield integers.  Numeric literals containing a decimal "
"point or an exponent sign yield floating point numbers.  Appending ``'j'`` "
"or ``'J'`` to a numeric literal yields an imaginary number (a complex number"
" with a zero real part) which you can add to an integer or float to get a "
"complex number with real and imaginary parts."
msgstr ""

#: ../../library/stdtypes.rst:262
msgid ""
"Python fully supports mixed arithmetic: when a binary arithmetic operator "
"has operands of different numeric types, the operand with the \"narrower\" "
"type is widened to that of the other, where integer is narrower than "
"floating point, which is narrower than complex. A comparison between numbers"
" of different types behaves as though the exact values of those numbers were"
" being compared. [2]_"
msgstr ""

#: ../../library/stdtypes.rst:268
msgid ""
"The constructors :func:`int`, :func:`float`, and :func:`complex` can be used"
" to produce numbers of a specific type."
msgstr ""

#: ../../library/stdtypes.rst:271
msgid ""
"All numeric types (except complex) support the following operations (for "
"priorities of the operations, see :ref:`operator-summary`):"
msgstr ""

#: ../../library/stdtypes.rst:275
msgid "Full documentation"
msgstr ""

#: ../../library/stdtypes.rst:277
msgid "``x + y``"
msgstr ""

#: ../../library/stdtypes.rst:277
msgid "sum of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:279
msgid "``x - y``"
msgstr ""

#: ../../library/stdtypes.rst:279
msgid "difference of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:281
msgid "``x * y``"
msgstr ""

#: ../../library/stdtypes.rst:281
msgid "product of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:283
msgid "``x / y``"
msgstr ""

#: ../../library/stdtypes.rst:283
msgid "quotient of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:285
msgid "``x // y``"
msgstr ""

#: ../../library/stdtypes.rst:285
msgid "floored quotient of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:288
msgid "``x % y``"
msgstr ""

#: ../../library/stdtypes.rst:288
msgid "remainder of ``x / y``"
msgstr ""

#: ../../library/stdtypes.rst:290
msgid "``-x``"
msgstr ""

#: ../../library/stdtypes.rst:290
msgid "*x* negated"
msgstr ""

#: ../../library/stdtypes.rst:292
msgid "``+x``"
msgstr ""

#: ../../library/stdtypes.rst:292
msgid "*x* unchanged"
msgstr ""

#: ../../library/stdtypes.rst:294
msgid "``abs(x)``"
msgstr ""

#: ../../library/stdtypes.rst:294
msgid "absolute value or magnitude of *x*"
msgstr ""

#: ../../library/stdtypes.rst:294
msgid ":func:`abs`"
msgstr ""

#: ../../library/stdtypes.rst:297
msgid "``int(x)``"
msgstr ""

#: ../../library/stdtypes.rst:297
msgid "*x* converted to integer"
msgstr ""

#: ../../library/stdtypes.rst:297
msgid "\\(3)\\(6)"
msgstr ""

#: ../../library/stdtypes.rst:297
msgid ":func:`int`"
msgstr ""

#: ../../library/stdtypes.rst:299
msgid "``float(x)``"
msgstr ""

#: ../../library/stdtypes.rst:299
msgid "*x* converted to floating point"
msgstr ""

#: ../../library/stdtypes.rst:299
msgid "\\(4)\\(6)"
msgstr ""

#: ../../library/stdtypes.rst:299
msgid ":func:`float`"
msgstr ""

#: ../../library/stdtypes.rst:301
msgid "``complex(re, im)``"
msgstr ""

#: ../../library/stdtypes.rst:301
msgid ""
"a complex number with real part *re*, imaginary part *im*. *im* defaults to "
"zero."
msgstr ""

#: ../../library/stdtypes.rst:301 ../../library/stdtypes.rst:1089
#: ../../library/stdtypes.rst:2300 ../../library/stdtypes.rst:3539
msgid "\\(6)"
msgstr ""

#: ../../library/stdtypes.rst:301
msgid ":func:`complex`"
msgstr ""

#: ../../library/stdtypes.rst:305
msgid "``c.conjugate()``"
msgstr ""

#: ../../library/stdtypes.rst:305
msgid "conjugate of the complex number *c*"
msgstr ""

#: ../../library/stdtypes.rst:308
msgid "``divmod(x, y)``"
msgstr ""

#: ../../library/stdtypes.rst:308
msgid "the pair ``(x // y, x % y)``"
msgstr ""

#: ../../library/stdtypes.rst:308
msgid ":func:`divmod`"
msgstr ""

#: ../../library/stdtypes.rst:310
msgid "``pow(x, y)``"
msgstr ""

#: ../../library/stdtypes.rst:310 ../../library/stdtypes.rst:312
msgid "*x* to the power *y*"
msgstr ""

#: ../../library/stdtypes.rst:310 ../../library/stdtypes.rst:312
#: ../../library/stdtypes.rst:1078 ../../library/stdtypes.rst:1081
#: ../../library/stdtypes.rst:2325 ../../library/stdtypes.rst:2328
#: ../../library/stdtypes.rst:2331 ../../library/stdtypes.rst:3535
#: ../../library/stdtypes.rst:3542
msgid "\\(5)"
msgstr "\\(5)"

#: ../../library/stdtypes.rst:310
msgid ":func:`pow`"
msgstr ""

#: ../../library/stdtypes.rst:312
msgid "``x ** y``"
msgstr ""

#: ../../library/stdtypes.rst:322
msgid ""
"Also referred to as integer division.  The resultant value is a whole "
"integer, though the result's type is not necessarily int.  The result is "
"always rounded towards minus infinity: ``1//2`` is ``0``, ``(-1)//2`` is "
"``-1``, ``1//(-2)`` is ``-1``, and ``(-1)//(-2)`` is ``0``."
msgstr ""

#: ../../library/stdtypes.rst:328
msgid ""
"Not for complex numbers.  Instead convert to floats using :func:`abs` if "
"appropriate."
msgstr ""

#: ../../library/stdtypes.rst:340
msgid ""
"Conversion from floating point to integer may round or truncate as in C; see"
" functions :func:`math.floor` and :func:`math.ceil` for well-defined "
"conversions."
msgstr ""

#: ../../library/stdtypes.rst:345
msgid ""
"float also accepts the strings \"nan\" and \"inf\" with an optional prefix "
"\"+\" or \"-\" for Not a Number (NaN) and positive or negative infinity."
msgstr ""

#: ../../library/stdtypes.rst:349
msgid ""
"Python defines ``pow(0, 0)`` and ``0 ** 0`` to be ``1``, as is common for "
"programming languages."
msgstr ""

#: ../../library/stdtypes.rst:353
msgid ""
"The numeric literals accepted include the digits ``0`` to ``9`` or any "
"Unicode equivalent (code points with the ``Nd`` property)."
msgstr ""

#: ../../library/stdtypes.rst:356
msgid ""
"See "
"https://www.unicode.org/Public/13.0.0/ucd/extracted/DerivedNumericType.txt "
"for a complete list of code points with the ``Nd`` property."
msgstr ""

#: ../../library/stdtypes.rst:360
msgid ""
"All :class:`numbers.Real` types (:class:`int` and :class:`float`) also "
"include the following operations:"
msgstr ""

#: ../../library/stdtypes.rst:366
msgid ":func:`math.trunc(\\ x) <math.trunc>`"
msgstr ""

#: ../../library/stdtypes.rst:366
msgid "*x* truncated to :class:`~numbers.Integral`"
msgstr ""

#: ../../library/stdtypes.rst:369
msgid ":func:`round(x[, n]) <round>`"
msgstr ""

#: ../../library/stdtypes.rst:369
msgid ""
"*x* rounded to *n* digits, rounding half to even. If *n* is omitted, it "
"defaults to 0."
msgstr ""

#: ../../library/stdtypes.rst:373
msgid ":func:`math.floor(\\ x) <math.floor>`"
msgstr ""

#: ../../library/stdtypes.rst:373
msgid "the greatest :class:`~numbers.Integral` <= *x*"
msgstr ""

#: ../../library/stdtypes.rst:376
msgid ":func:`math.ceil(x) <math.ceil>`"
msgstr ""

#: ../../library/stdtypes.rst:376
msgid "the least :class:`~numbers.Integral` >= *x*"
msgstr ""

#: ../../library/stdtypes.rst:380
msgid ""
"For additional numeric operations see the :mod:`math` and :mod:`cmath` "
"modules."
msgstr ""

#: ../../library/stdtypes.rst:389
msgid "Bitwise Operations on Integer Types"
msgstr ""

#: ../../library/stdtypes.rst:403
msgid ""
"Bitwise operations only make sense for integers. The result of bitwise "
"operations is calculated as though carried out in two's complement with an "
"infinite number of sign bits."
msgstr ""

#: ../../library/stdtypes.rst:407
msgid ""
"The priorities of the binary bitwise operations are all lower than the "
"numeric operations and higher than the comparisons; the unary operation "
"``~`` has the same priority as the other unary numeric operations (``+`` and"
" ``-``)."
msgstr ""

#: ../../library/stdtypes.rst:411
msgid "This table lists the bitwise operations sorted in ascending priority:"
msgstr ""

#: ../../library/stdtypes.rst:416
msgid "``x | y``"
msgstr ""

#: ../../library/stdtypes.rst:416
msgid "bitwise :dfn:`or` of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:416 ../../library/stdtypes.rst:419
#: ../../library/stdtypes.rst:422 ../../library/stdtypes.rst:1102
#: ../../library/stdtypes.rst:2314 ../../library/stdtypes.rst:2318
#: ../../library/stdtypes.rst:3524 ../../library/stdtypes.rst:3528
msgid "\\(4)"
msgstr "\\(4)"

#: ../../library/stdtypes.rst:419
msgid "``x ^ y``"
msgstr ""

#: ../../library/stdtypes.rst:419
msgid "bitwise :dfn:`exclusive or` of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:422
msgid "``x & y``"
msgstr ""

#: ../../library/stdtypes.rst:422
msgid "bitwise :dfn:`and` of *x* and *y*"
msgstr ""

#: ../../library/stdtypes.rst:425
msgid "``x << n``"
msgstr ""

#: ../../library/stdtypes.rst:425
msgid "*x* shifted left by *n* bits"
msgstr ""

#: ../../library/stdtypes.rst:425
msgid "(1)(2)"
msgstr "(1)(2)"

#: ../../library/stdtypes.rst:427
msgid "``x >> n``"
msgstr ""

#: ../../library/stdtypes.rst:427
msgid "*x* shifted right by *n* bits"
msgstr ""

#: ../../library/stdtypes.rst:427
msgid "(1)(3)"
msgstr ""

#: ../../library/stdtypes.rst:429
msgid "``~x``"
msgstr ""

#: ../../library/stdtypes.rst:429
msgid "the bits of *x* inverted"
msgstr ""

#: ../../library/stdtypes.rst:435
msgid ""
"Negative shift counts are illegal and cause a :exc:`ValueError` to be "
"raised."
msgstr ""

#: ../../library/stdtypes.rst:438
msgid ""
"A left shift by *n* bits is equivalent to multiplication by ``pow(2, n)``."
msgstr ""

#: ../../library/stdtypes.rst:441
msgid ""
"A right shift by *n* bits is equivalent to floor division by ``pow(2, n)``."
msgstr ""

#: ../../library/stdtypes.rst:444
msgid ""
"Performing these calculations with at least one extra sign extension bit in "
"a finite two's complement representation (a working bit-width of ``1 + "
"max(x.bit_length(), y.bit_length())`` or more) is sufficient to get the same"
" result as if there were an infinite number of sign bits."
msgstr ""

#: ../../library/stdtypes.rst:451
msgid "Additional Methods on Integer Types"
msgstr ""

#: ../../library/stdtypes.rst:453
msgid ""
"The int type implements the :class:`numbers.Integral` :term:`abstract base "
"class`. In addition, it provides a few more methods:"
msgstr ""

#: ../../library/stdtypes.rst:458
msgid ""
"Return the number of bits necessary to represent an integer in binary, "
"excluding the sign and leading zeros::"
msgstr ""

#: ../../library/stdtypes.rst:467
msgid ""
"More precisely, if ``x`` is nonzero, then ``x.bit_length()`` is the unique "
"positive integer ``k`` such that ``2**(k-1) <= abs(x) < 2**k``. "
"Equivalently, when ``abs(x)`` is small enough to have a correctly rounded "
"logarithm, then ``k = 1 + int(log(abs(x), 2))``. If ``x`` is zero, then "
"``x.bit_length()`` returns ``0``."
msgstr ""

#: ../../library/stdtypes.rst:473
msgid "Equivalent to::"
msgstr ""

#: ../../library/stdtypes.rst:484
msgid "Return an array of bytes representing an integer."
msgstr ""

#: ../../library/stdtypes.rst:496
msgid ""
"The integer is represented using *length* bytes.  An :exc:`OverflowError` is"
" raised if the integer is not representable with the given number of bytes."
msgstr ""

#: ../../library/stdtypes.rst:500 ../../library/stdtypes.rst:532
msgid ""
"The *byteorder* argument determines the byte order used to represent the "
"integer.  If *byteorder* is ``\"big\"``, the most significant byte is at the"
" beginning of the byte array.  If *byteorder* is ``\"little\"``, the most "
"significant byte is at the end of the byte array.  To request the native "
"byte order of the host system, use :data:`sys.byteorder` as the byte order "
"value."
msgstr ""

#: ../../library/stdtypes.rst:507
msgid ""
"The *signed* argument determines whether two's complement is used to "
"represent the integer.  If *signed* is ``False`` and a negative integer is "
"given, an :exc:`OverflowError` is raised. The default value for *signed* is "
"``False``."
msgstr ""

#: ../../library/stdtypes.rst:516
msgid "Return the integer represented by the given array of bytes."
msgstr ""

#: ../../library/stdtypes.rst:529
msgid ""
"The argument *bytes* must either be a :term:`bytes-like object` or an "
"iterable producing bytes."
msgstr ""

#: ../../library/stdtypes.rst:539
msgid ""
"The *signed* argument indicates whether two's complement is used to "
"represent the integer."
msgstr ""

#: ../../library/stdtypes.rst:546
msgid ""
"Return a pair of integers whose ratio is exactly equal to the original "
"integer and with a positive denominator. The integer ratio of integers "
"(whole numbers) is always the integer as the numerator and ``1`` as the "
"denominator."
msgstr ""

#: ../../library/stdtypes.rst:554
msgid "Additional Methods on Float"
msgstr ""

#: ../../library/stdtypes.rst:556
msgid ""
"The float type implements the :class:`numbers.Real` :term:`abstract base "
"class`. float also has the following additional methods."
msgstr ""

#: ../../library/stdtypes.rst:561
msgid ""
"Return a pair of integers whose ratio is exactly equal to the original float"
" and with a positive denominator.  Raises :exc:`OverflowError` on infinities"
" and a :exc:`ValueError` on NaNs."
msgstr ""

#: ../../library/stdtypes.rst:568
msgid ""
"Return ``True`` if the float instance is finite with integral value, and "
"``False`` otherwise::"
msgstr ""

#: ../../library/stdtypes.rst:576
msgid ""
"Two methods support conversion to and from hexadecimal strings.  Since "
"Python's floats are stored internally as binary numbers, converting a float "
"to or from a *decimal* string usually involves a small rounding error.  In "
"contrast, hexadecimal strings allow exact representation and specification "
"of floating-point numbers.  This can be useful when debugging, and in "
"numerical work."
msgstr ""

#: ../../library/stdtypes.rst:587
msgid ""
"Return a representation of a floating-point number as a hexadecimal string."
"  For finite floating-point numbers, this representation will always include"
" a leading ``0x`` and a trailing ``p`` and exponent."
msgstr ""

#: ../../library/stdtypes.rst:595
msgid ""
"Class method to return the float represented by a hexadecimal string *s*.  "
"The string *s* may have leading and trailing whitespace."
msgstr ""

#: ../../library/stdtypes.rst:600
msgid ""
"Note that :meth:`float.hex` is an instance method, while "
":meth:`float.fromhex` is a class method."
msgstr ""

#: ../../library/stdtypes.rst:603
msgid "A hexadecimal string takes the form::"
msgstr ""

#: ../../library/stdtypes.rst:607
msgid ""
"where the optional ``sign`` may by either ``+`` or ``-``, ``integer`` and "
"``fraction`` are strings of hexadecimal digits, and ``exponent`` is a "
"decimal integer with an optional leading sign.  Case is not significant, and"
" there must be at least one hexadecimal digit in either the integer or the "
"fraction.  This syntax is similar to the syntax specified in section 6.4.4.2"
" of the C99 standard, and also to the syntax used in Java 1.5 onwards.  In "
"particular, the output of :meth:`float.hex` is usable as a hexadecimal "
"floating-point literal in C or Java code, and hexadecimal strings produced "
"by C's ``%a`` format character or Java's ``Double.toHexString`` are accepted"
" by :meth:`float.fromhex`."
msgstr ""

#: ../../library/stdtypes.rst:620
msgid ""
"Note that the exponent is written in decimal rather than hexadecimal, and "
"that it gives the power of 2 by which to multiply the coefficient. For "
"example, the hexadecimal string ``0x3.a7p10`` represents the floating-point "
"number ``(3 + 10./16 + 7./16**2) * 2.0**10``, or ``3740.0``::"
msgstr ""

#: ../../library/stdtypes.rst:630
msgid ""
"Applying the reverse conversion to ``3740.0`` gives a different hexadecimal "
"string representing the same number::"
msgstr ""

#: ../../library/stdtypes.rst:640
msgid "Hashing of numeric types"
msgstr ""

#: ../../library/stdtypes.rst:642
msgid ""
"For numbers ``x`` and ``y``, possibly of different types, it's a requirement"
" that ``hash(x) == hash(y)`` whenever ``x == y`` (see the "
":meth:`~object.__hash__` method documentation for more details).  For ease "
"of implementation and efficiency across a variety of numeric types "
"(including :class:`int`, :class:`float`, :class:`decimal.Decimal` and "
":class:`fractions.Fraction`) Python's hash for numeric types is based on a "
"single mathematical function that's defined for any rational number, and "
"hence applies to all instances of :class:`int` and "
":class:`fractions.Fraction`, and all finite instances of :class:`float` and "
":class:`decimal.Decimal`.  Essentially, this function is given by reduction "
"modulo ``P`` for a fixed prime ``P``.  The value of ``P`` is made available "
"to Python as the :attr:`modulus` attribute of :data:`sys.hash_info`."
msgstr ""

#: ../../library/stdtypes.rst:657
msgid ""
"Currently, the prime used is ``P = 2**31 - 1`` on machines with 32-bit C "
"longs and ``P = 2**61 - 1`` on machines with 64-bit C longs."
msgstr ""

#: ../../library/stdtypes.rst:660
msgid "Here are the rules in detail:"
msgstr ""

#: ../../library/stdtypes.rst:662
msgid ""
"If ``x = m / n`` is a nonnegative rational number and ``n`` is not divisible"
" by ``P``, define ``hash(x)`` as ``m * invmod(n, P) % P``, where ``invmod(n,"
" P)`` gives the inverse of ``n`` modulo ``P``."
msgstr ""

#: ../../library/stdtypes.rst:666
msgid ""
"If ``x = m / n`` is a nonnegative rational number and ``n`` is divisible by "
"``P`` (but ``m`` is not) then ``n`` has no inverse modulo ``P`` and the rule"
" above doesn't apply; in this case define ``hash(x)`` to be the constant "
"value ``sys.hash_info.inf``."
msgstr ""

#: ../../library/stdtypes.rst:671
msgid ""
"If ``x = m / n`` is a negative rational number define ``hash(x)`` as "
"``-hash(-x)``.  If the resulting hash is ``-1``, replace it with ``-2``."
msgstr ""

#: ../../library/stdtypes.rst:675
msgid ""
"The particular values ``sys.hash_info.inf``, ``-sys.hash_info.inf`` and "
"``sys.hash_info.nan`` are used as hash values for positive infinity, "
"negative infinity, or nans (respectively).  (All hashable nans have the same"
" hash value.)"
msgstr ""

#: ../../library/stdtypes.rst:680
msgid ""
"For a :class:`complex` number ``z``, the hash values of the real and "
"imaginary parts are combined by computing ``hash(z.real) + "
"sys.hash_info.imag * hash(z.imag)``, reduced modulo "
"``2**sys.hash_info.width`` so that it lies in "
"``range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width - 1))``.  "
"Again, if the result is ``-1``, it's replaced with ``-2``."
msgstr ""

#: ../../library/stdtypes.rst:688
msgid ""
"To clarify the above rules, here's some example Python code, equivalent to "
"the built-in hash, for computing the hash of a rational number, "
":class:`float`, or :class:`complex`::"
msgstr ""

#: ../../library/stdtypes.rst:743
msgid "Iterator Types"
msgstr ""

#: ../../library/stdtypes.rst:751
msgid ""
"Python supports a concept of iteration over containers.  This is implemented"
" using two distinct methods; these are used to allow user-defined classes to"
" support iteration.  Sequences, described below in more detail, always "
"support the iteration methods."
msgstr ""

#: ../../library/stdtypes.rst:756
msgid ""
"One method needs to be defined for container objects to provide iteration "
"support:"
msgstr ""

#: ../../library/stdtypes.rst:763
msgid ""
"Return an iterator object.  The object is required to support the iterator "
"protocol described below.  If a container supports different types of "
"iteration, additional methods can be provided to specifically request "
"iterators for those iteration types.  (An example of an object supporting "
"multiple forms of iteration would be a tree structure which supports both "
"breadth-first and depth-first traversal.)  This method corresponds to the "
":c:member:`~PyTypeObject.tp_iter` slot of the type structure for Python "
"objects in the Python/C API."
msgstr ""

#: ../../library/stdtypes.rst:772
msgid ""
"The iterator objects themselves are required to support the following two "
"methods, which together form the :dfn:`iterator protocol`:"
msgstr ""

#: ../../library/stdtypes.rst:778
msgid ""
"Return the iterator object itself.  This is required to allow both "
"containers and iterators to be used with the :keyword:`for` and "
":keyword:`in` statements. This method corresponds to the "
":c:member:`~PyTypeObject.tp_iter` slot of the type structure for Python "
"objects in the Python/C API."
msgstr ""

#: ../../library/stdtypes.rst:786
msgid ""
"Return the next item from the container.  If there are no further items, "
"raise the :exc:`StopIteration` exception.  This method corresponds to the "
":c:member:`~PyTypeObject.tp_iternext` slot of the type structure for Python "
"objects in the Python/C API."
msgstr ""

#: ../../library/stdtypes.rst:791
msgid ""
"Python defines several iterator objects to support iteration over general "
"and specific sequence types, dictionaries, and other more specialized forms."
"  The specific types are not important beyond their implementation of the "
"iterator protocol."
msgstr ""

#: ../../library/stdtypes.rst:796
msgid ""
"Once an iterator's :meth:`~iterator.__next__` method raises "
":exc:`StopIteration`, it must continue to do so on subsequent calls. "
"Implementations that do not obey this property are deemed broken."
msgstr ""

#: ../../library/stdtypes.rst:804
msgid "Generator Types"
msgstr ""

#: ../../library/stdtypes.rst:806
msgid ""
"Python's :term:`generator`\\s provide a convenient way to implement the "
"iterator protocol.  If a container object's :meth:`__iter__` method is "
"implemented as a generator, it will automatically return an iterator object "
"(technically, a generator object) supplying the :meth:`__iter__` and "
":meth:`~generator.__next__` methods. More information about generators can "
"be found in :ref:`the documentation for the yield expression <yieldexpr>`."
msgstr ""

#: ../../library/stdtypes.rst:818
msgid "Sequence Types --- :class:`list`, :class:`tuple`, :class:`range`"
msgstr ""

#: ../../library/stdtypes.rst:820
msgid ""
"There are three basic sequence types: lists, tuples, and range objects. "
"Additional sequence types tailored for processing of :ref:`binary data "
"<binaryseq>` and :ref:`text strings <textseq>` are described in dedicated "
"sections."
msgstr ""

#: ../../library/stdtypes.rst:829
msgid "Common Sequence Operations"
msgstr ""

#: ../../library/stdtypes.rst:833
msgid ""
"The operations in the following table are supported by most sequence types, "
"both mutable and immutable. The :class:`collections.abc.Sequence` ABC is "
"provided to make it easier to correctly implement these operations on custom"
" sequence types."
msgstr ""

#: ../../library/stdtypes.rst:838
msgid ""
"This table lists the sequence operations sorted in ascending priority.  In "
"the table, *s* and *t* are sequences of the same type, *n*, *i*, *j* and *k*"
" are integers and *x* is an arbitrary object that meets any type and value "
"restrictions imposed by *s*."
msgstr ""

#: ../../library/stdtypes.rst:843
msgid ""
"The ``in`` and ``not in`` operations have the same priorities as the "
"comparison operations. The ``+`` (concatenation) and ``*`` (repetition) "
"operations have the same priority as the corresponding numeric operations. "
"[3]_"
msgstr ""

#: ../../library/stdtypes.rst:864
msgid "``x in s``"
msgstr ""

#: ../../library/stdtypes.rst:864
msgid "``True`` if an item of *s* is equal to *x*, else ``False``"
msgstr ""

#: ../../library/stdtypes.rst:867
msgid "``x not in s``"
msgstr ""

#: ../../library/stdtypes.rst:867
msgid "``False`` if an item of *s* is equal to *x*, else ``True``"
msgstr ""

#: ../../library/stdtypes.rst:870
msgid "``s + t``"
msgstr ""

#: ../../library/stdtypes.rst:870
msgid "the concatenation of *s* and *t*"
msgstr ""

#: ../../library/stdtypes.rst:870
msgid "(6)(7)"
msgstr "(6)(7)"

#: ../../library/stdtypes.rst:873
msgid "``s * n`` or ``n * s``"
msgstr ""

#: ../../library/stdtypes.rst:873
msgid "equivalent to adding *s* to itself *n* times"
msgstr ""

#: ../../library/stdtypes.rst:873
msgid "(2)(7)"
msgstr ""

#: ../../library/stdtypes.rst:876
msgid "``s[i]``"
msgstr ""

#: ../../library/stdtypes.rst:876
msgid "*i*\\ th item of *s*, origin 0"
msgstr ""

#: ../../library/stdtypes.rst:878
msgid "``s[i:j]``"
msgstr ""

#: ../../library/stdtypes.rst:878
msgid "slice of *s* from *i* to *j*"
msgstr ""

#: ../../library/stdtypes.rst:878
msgid "(3)(4)"
msgstr ""

#: ../../library/stdtypes.rst:880
msgid "``s[i:j:k]``"
msgstr ""

#: ../../library/stdtypes.rst:880
msgid "slice of *s* from *i* to *j* with step *k*"
msgstr ""

#: ../../library/stdtypes.rst:880
msgid "(3)(5)"
msgstr ""

#: ../../library/stdtypes.rst:883
msgid "``len(s)``"
msgstr ""

#: ../../library/stdtypes.rst:883
msgid "length of *s*"
msgstr ""

#: ../../library/stdtypes.rst:885
msgid "``min(s)``"
msgstr ""

#: ../../library/stdtypes.rst:885
msgid "smallest item of *s*"
msgstr ""

#: ../../library/stdtypes.rst:887
msgid "``max(s)``"
msgstr ""

#: ../../library/stdtypes.rst:887
msgid "largest item of *s*"
msgstr ""

#: ../../library/stdtypes.rst:889
msgid "``s.index(x[, i[, j]])``"
msgstr ""

#: ../../library/stdtypes.rst:889
msgid ""
"index of the first occurrence of *x* in *s* (at or after index *i* and "
"before index *j*)"
msgstr ""

#: ../../library/stdtypes.rst:889 ../../library/stdtypes.rst:3510
msgid "\\(8)"
msgstr ""

#: ../../library/stdtypes.rst:893
msgid "``s.count(x)``"
msgstr ""

#: ../../library/stdtypes.rst:893
msgid "total number of occurrences of *x* in *s*"
msgstr ""

#: ../../library/stdtypes.rst:897
msgid ""
"Sequences of the same type also support comparisons.  In particular, tuples "
"and lists are compared lexicographically by comparing corresponding "
"elements. This means that to compare equal, every element must compare equal"
" and the two sequences must be of the same type and have the same length.  "
"(For full details see :ref:`comparisons` in the language reference.)"
msgstr ""

#: ../../library/stdtypes.rst:906
msgid ""
"While the ``in`` and ``not in`` operations are used only for simple "
"containment testing in the general case, some specialised sequences (such as"
" :class:`str`, :class:`bytes` and :class:`bytearray`) also use them for "
"subsequence testing::"
msgstr ""

#: ../../library/stdtypes.rst:915
msgid ""
"Values of *n* less than ``0`` are treated as ``0`` (which yields an empty "
"sequence of the same type as *s*).  Note that items in the sequence *s* are "
"not copied; they are referenced multiple times.  This often haunts new "
"Python programmers; consider::"
msgstr ""

#: ../../library/stdtypes.rst:927
msgid ""
"What has happened is that ``[[]]`` is a one-element list containing an empty"
" list, so all three elements of ``[[]] * 3`` are references to this single "
"empty list.  Modifying any of the elements of ``lists`` modifies this single"
" list. You can create a list of different lists this way::"
msgstr ""

#: ../../library/stdtypes.rst:939
msgid ""
"Further explanation is available in the FAQ entry :ref:`faq-"
"multidimensional-list`."
msgstr ""

#: ../../library/stdtypes.rst:943
msgid ""
"If *i* or *j* is negative, the index is relative to the end of sequence *s*:"
" ``len(s) + i`` or ``len(s) + j`` is substituted.  But note that ``-0`` is "
"still ``0``."
msgstr ""

#: ../../library/stdtypes.rst:948
msgid ""
"The slice of *s* from *i* to *j* is defined as the sequence of items with "
"index *k* such that ``i <= k < j``.  If *i* or *j* is greater than "
"``len(s)``, use ``len(s)``.  If *i* is omitted or ``None``, use ``0``.  If "
"*j* is omitted or ``None``, use ``len(s)``.  If *i* is greater than or equal"
" to *j*, the slice is empty."
msgstr ""

#: ../../library/stdtypes.rst:955
msgid ""
"The slice of *s* from *i* to *j* with step *k* is defined as the sequence of"
" items with index  ``x = i + n*k`` such that ``0 <= n < (j-i)/k``.  In other"
" words, the indices are ``i``, ``i+k``, ``i+2*k``, ``i+3*k`` and so on, "
"stopping when *j* is reached (but never including *j*).  When *k* is "
"positive, *i* and *j* are reduced to ``len(s)`` if they are greater. When "
"*k* is negative, *i* and *j* are reduced to ``len(s) - 1`` if they are "
"greater.  If *i* or *j* are omitted or ``None``, they become \"end\" values "
"(which end depends on the sign of *k*).  Note, *k* cannot be zero. If *k* is"
" ``None``, it is treated like ``1``."
msgstr ""

#: ../../library/stdtypes.rst:966
msgid ""
"Concatenating immutable sequences always results in a new object.  This "
"means that building up a sequence by repeated concatenation will have a "
"quadratic runtime cost in the total sequence length.  To get a linear "
"runtime cost, you must switch to one of the alternatives below:"
msgstr ""

#: ../../library/stdtypes.rst:971
msgid ""
"if concatenating :class:`str` objects, you can build a list and use "
":meth:`str.join` at the end or else write to an :class:`io.StringIO` "
"instance and retrieve its value when complete"
msgstr ""

#: ../../library/stdtypes.rst:975
msgid ""
"if concatenating :class:`bytes` objects, you can similarly use "
":meth:`bytes.join` or :class:`io.BytesIO`, or you can do in-place "
"concatenation with a :class:`bytearray` object.  :class:`bytearray` objects "
"are mutable and have an efficient overallocation mechanism"
msgstr ""

#: ../../library/stdtypes.rst:980
msgid ""
"if concatenating :class:`tuple` objects, extend a :class:`list` instead"
msgstr ""

#: ../../library/stdtypes.rst:982
msgid "for other types, investigate the relevant class documentation"
msgstr ""

#: ../../library/stdtypes.rst:986
msgid ""
"Some sequence types (such as :class:`range`) only support item sequences "
"that follow specific patterns, and hence don't support sequence "
"concatenation or repetition."
msgstr ""

#: ../../library/stdtypes.rst:991
msgid ""
"``index`` raises :exc:`ValueError` when *x* is not found in *s*. Not all "
"implementations support passing the additional arguments *i* and *j*. These "
"arguments allow efficient searching of subsections of the sequence. Passing "
"the extra arguments is roughly equivalent to using ``s[i:j].index(x)``, only"
" without copying any data and with the returned index being relative to the "
"start of the sequence rather than the start of the slice."
msgstr ""

#: ../../library/stdtypes.rst:1002
msgid "Immutable Sequence Types"
msgstr ""

#: ../../library/stdtypes.rst:1009
msgid ""
"The only operation that immutable sequence types generally implement that is"
" not also implemented by mutable sequence types is support for the "
":func:`hash` built-in."
msgstr ""

#: ../../library/stdtypes.rst:1013
msgid ""
"This support allows immutable sequences, such as :class:`tuple` instances, "
"to be used as :class:`dict` keys and stored in :class:`set` and "
":class:`frozenset` instances."
msgstr ""

#: ../../library/stdtypes.rst:1017
msgid ""
"Attempting to hash an immutable sequence that contains unhashable values "
"will result in :exc:`TypeError`."
msgstr ""

#: ../../library/stdtypes.rst:1024
msgid "Mutable Sequence Types"
msgstr ""

#: ../../library/stdtypes.rst:1031
msgid ""
"The operations in the following table are defined on mutable sequence types."
" The :class:`collections.abc.MutableSequence` ABC is provided to make it "
"easier to correctly implement these operations on custom sequence types."
msgstr ""

#: ../../library/stdtypes.rst:1035
msgid ""
"In the table *s* is an instance of a mutable sequence type, *t* is any "
"iterable object and *x* is an arbitrary object that meets any type and value"
" restrictions imposed by *s* (for example, :class:`bytearray` only accepts "
"integers that meet the value restriction ``0 <= x <= 255``)."
msgstr ""

#: ../../library/stdtypes.rst:1059
msgid "``s[i] = x``"
msgstr ""

#: ../../library/stdtypes.rst:1059
msgid "item *i* of *s* is replaced by *x*"
msgstr ""

#: ../../library/stdtypes.rst:1062
msgid "``s[i:j] = t``"
msgstr ""

#: ../../library/stdtypes.rst:1062
msgid ""
"slice of *s* from *i* to *j* is replaced by the contents of the iterable *t*"
msgstr ""

#: ../../library/stdtypes.rst:1066
msgid "``del s[i:j]``"
msgstr ""

#: ../../library/stdtypes.rst:1066
msgid "same as ``s[i:j] = []``"
msgstr ""

#: ../../library/stdtypes.rst:1068
msgid "``s[i:j:k] = t``"
msgstr ""

#: ../../library/stdtypes.rst:1068
msgid "the elements of ``s[i:j:k]`` are replaced by those of *t*"
msgstr ""

#: ../../library/stdtypes.rst:1071
msgid "``del s[i:j:k]``"
msgstr ""

#: ../../library/stdtypes.rst:1071
msgid "removes the elements of ``s[i:j:k]`` from the list"
msgstr ""

#: ../../library/stdtypes.rst:1074
msgid "``s.append(x)``"
msgstr ""

#: ../../library/stdtypes.rst:1074
msgid ""
"appends *x* to the end of the sequence (same as ``s[len(s):len(s)] = [x]``)"
msgstr ""

#: ../../library/stdtypes.rst:1078
msgid "``s.clear()``"
msgstr ""

#: ../../library/stdtypes.rst:1078
msgid "removes all items from *s* (same as ``del s[:]``)"
msgstr ""

#: ../../library/stdtypes.rst:1081
msgid "``s.copy()``"
msgstr ""

#: ../../library/stdtypes.rst:1081
msgid "creates a shallow copy of *s* (same as ``s[:]``)"
msgstr ""

#: ../../library/stdtypes.rst:1084
msgid "``s.extend(t)`` or ``s += t``"
msgstr ""

#: ../../library/stdtypes.rst:1084
msgid ""
"extends *s* with the contents of *t* (for the most part the same as "
"``s[len(s):len(s)] = t``)"
msgstr ""

#: ../../library/stdtypes.rst:1089
msgid "``s *= n``"
msgstr ""

#: ../../library/stdtypes.rst:1089
msgid "updates *s* with its contents repeated *n* times"
msgstr ""

#: ../../library/stdtypes.rst:1092
msgid "``s.insert(i, x)``"
msgstr ""

#: ../../library/stdtypes.rst:1092
msgid ""
"inserts *x* into *s* at the index given by *i* (same as ``s[i:i] = [x]``)"
msgstr ""

#: ../../library/stdtypes.rst:1096
msgid "``s.pop()`` or ``s.pop(i)``"
msgstr ""

#: ../../library/stdtypes.rst:1096
msgid "retrieves the item at *i* and also removes it from *s*"
msgstr ""

#: ../../library/stdtypes.rst:1099
msgid "``s.remove(x)``"
msgstr ""

#: ../../library/stdtypes.rst:1099
msgid "remove the first item from *s* where ``s[i]`` is equal to *x*"
msgstr ""

#: ../../library/stdtypes.rst:1102
msgid "``s.reverse()``"
msgstr ""

#: ../../library/stdtypes.rst:1102
msgid "reverses the items of *s* in place"
msgstr ""

#: ../../library/stdtypes.rst:1110
msgid "*t* must have the same length as the slice it is replacing."
msgstr ""

#: ../../library/stdtypes.rst:1113
msgid ""
"The optional argument *i* defaults to ``-1``, so that by default the last "
"item is removed and returned."
msgstr ""

#: ../../library/stdtypes.rst:1117
msgid ":meth:`remove` raises :exc:`ValueError` when *x* is not found in *s*."
msgstr ""

#: ../../library/stdtypes.rst:1120
msgid ""
"The :meth:`reverse` method modifies the sequence in place for economy of "
"space when reversing a large sequence.  To remind users that it operates by "
"side effect, it does not return the reversed sequence."
msgstr ""

#: ../../library/stdtypes.rst:1125
msgid ""
":meth:`clear` and :meth:`!copy` are included for consistency with the "
"interfaces of mutable containers that don't support slicing operations (such"
" as :class:`dict` and :class:`set`). :meth:`!copy` is not part of the "
":class:`collections.abc.MutableSequence` ABC, but most concrete mutable "
"sequence classes provide it."
msgstr ""

#: ../../library/stdtypes.rst:1131
msgid ":meth:`clear` and :meth:`!copy` methods."
msgstr ""

#: ../../library/stdtypes.rst:1135
msgid ""
"The value *n* is an integer, or an object implementing "
":meth:`~object.__index__`.  Zero and negative values of *n* clear the "
"sequence.  Items in the sequence are not copied; they are referenced "
"multiple times, as explained for ``s * n`` under :ref:`typesseq-common`."
msgstr ""

#: ../../library/stdtypes.rst:1144
msgid "Lists"
msgstr ""

#: ../../library/stdtypes.rst:1148
msgid ""
"Lists are mutable sequences, typically used to store collections of "
"homogeneous items (where the precise degree of similarity will vary by "
"application)."
msgstr ""

#: ../../library/stdtypes.rst:1154
msgid "Lists may be constructed in several ways:"
msgstr ""

#: ../../library/stdtypes.rst:1156
msgid "Using a pair of square brackets to denote the empty list: ``[]``"
msgstr ""

#: ../../library/stdtypes.rst:1157
msgid ""
"Using square brackets, separating items with commas: ``[a]``, ``[a, b, c]``"
msgstr ""

#: ../../library/stdtypes.rst:1158
msgid "Using a list comprehension: ``[x for x in iterable]``"
msgstr ""

#: ../../library/stdtypes.rst:1159
msgid "Using the type constructor: ``list()`` or ``list(iterable)``"
msgstr ""

#: ../../library/stdtypes.rst:1161
msgid ""
"The constructor builds a list whose items are the same and in the same order"
" as *iterable*'s items.  *iterable* may be either a sequence, a container "
"that supports iteration, or an iterator object.  If *iterable* is already a "
"list, a copy is made and returned, similar to ``iterable[:]``. For example, "
"``list('abc')`` returns ``['a', 'b', 'c']`` and ``list( (1, 2, 3) )`` "
"returns ``[1, 2, 3]``. If no argument is given, the constructor creates a "
"new empty list, ``[]``."
msgstr ""

#: ../../library/stdtypes.rst:1170
msgid ""
"Many other operations also produce lists, including the :func:`sorted` "
"built-in."
msgstr ""

#: ../../library/stdtypes.rst:1173
msgid ""
"Lists implement all of the :ref:`common <typesseq-common>` and :ref:`mutable"
" <typesseq-mutable>` sequence operations. Lists also provide the following "
"additional method:"
msgstr ""

#: ../../library/stdtypes.rst:1179
msgid ""
"This method sorts the list in place, using only ``<`` comparisons between "
"items. Exceptions are not suppressed - if any comparison operations fail, "
"the entire sort operation will fail (and the list will likely be left in a "
"partially modified state)."
msgstr ""

#: ../../library/stdtypes.rst:1184
msgid ""
":meth:`sort` accepts two arguments that can only be passed by keyword "
"(:ref:`keyword-only arguments <keyword-only_parameter>`):"
msgstr ""

#: ../../library/stdtypes.rst:1187
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each list element (for example, ``key=str.lower``). The "
"key corresponding to each item in the list is calculated once and then used "
"for the entire sorting process. The default value of ``None`` means that "
"list items are sorted directly without calculating a separate key value."
msgstr ""

#: ../../library/stdtypes.rst:1194
msgid ""
"The :func:`functools.cmp_to_key` utility is available to convert a 2.x style"
" *cmp* function to a *key* function."
msgstr ""

#: ../../library/stdtypes.rst:1197
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""

#: ../../library/stdtypes.rst:1200
msgid ""
"This method modifies the sequence in place for economy of space when sorting"
" a large sequence.  To remind users that it operates by side effect, it does"
" not return the sorted sequence (use :func:`sorted` to explicitly request a "
"new sorted list instance)."
msgstr ""

#: ../../library/stdtypes.rst:1205
msgid ""
"The :meth:`sort` method is guaranteed to be stable.  A sort is stable if it "
"guarantees not to change the relative order of elements that compare equal "
"--- this is helpful for sorting in multiple passes (for example, sort by "
"department, then by salary grade)."
msgstr ""

#: ../../library/stdtypes.rst:1210
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""

#: ../../library/stdtypes.rst:1214
msgid ""
"While a list is being sorted, the effect of attempting to mutate, or even "
"inspect, the list is undefined.  The C implementation of Python makes the "
"list appear empty for the duration, and raises :exc:`ValueError` if it can "
"detect that the list has been mutated during a sort."
msgstr ""

#: ../../library/stdtypes.rst:1223
msgid "Tuples"
msgstr ""

#: ../../library/stdtypes.rst:1227
msgid ""
"Tuples are immutable sequences, typically used to store collections of "
"heterogeneous data (such as the 2-tuples produced by the :func:`enumerate` "
"built-in). Tuples are also used for cases where an immutable sequence of "
"homogeneous data is needed (such as allowing storage in a :class:`set` or "
":class:`dict` instance)."
msgstr ""

#: ../../library/stdtypes.rst:1235
msgid "Tuples may be constructed in a number of ways:"
msgstr ""

#: ../../library/stdtypes.rst:1237
msgid "Using a pair of parentheses to denote the empty tuple: ``()``"
msgstr ""

#: ../../library/stdtypes.rst:1238
msgid "Using a trailing comma for a singleton tuple: ``a,`` or ``(a,)``"
msgstr ""

#: ../../library/stdtypes.rst:1239
msgid "Separating items with commas: ``a, b, c`` or ``(a, b, c)``"
msgstr ""

#: ../../library/stdtypes.rst:1240
msgid "Using the :func:`tuple` built-in: ``tuple()`` or ``tuple(iterable)``"
msgstr ""

#: ../../library/stdtypes.rst:1242
msgid ""
"The constructor builds a tuple whose items are the same and in the same "
"order as *iterable*'s items.  *iterable* may be either a sequence, a "
"container that supports iteration, or an iterator object.  If *iterable* is "
"already a tuple, it is returned unchanged. For example, ``tuple('abc')`` "
"returns ``('a', 'b', 'c')`` and ``tuple( [1, 2, 3] )`` returns ``(1, 2, "
"3)``. If no argument is given, the constructor creates a new empty tuple, "
"``()``."
msgstr ""

#: ../../library/stdtypes.rst:1250
msgid ""
"Note that it is actually the comma which makes a tuple, not the parentheses."
" The parentheses are optional, except in the empty tuple case, or when they "
"are needed to avoid syntactic ambiguity. For example, ``f(a, b, c)`` is a "
"function call with three arguments, while ``f((a, b, c))`` is a function "
"call with a 3-tuple as the sole argument."
msgstr ""

#: ../../library/stdtypes.rst:1256
msgid ""
"Tuples implement all of the :ref:`common <typesseq-common>` sequence "
"operations."
msgstr ""

#: ../../library/stdtypes.rst:1259
msgid ""
"For heterogeneous collections of data where access by name is clearer than "
"access by index, :func:`collections.namedtuple` may be a more appropriate "
"choice than a simple tuple object."
msgstr ""

#: ../../library/stdtypes.rst:1267
msgid "Ranges"
msgstr ""

#: ../../library/stdtypes.rst:1271
msgid ""
"The :class:`range` type represents an immutable sequence of numbers and is "
"commonly used for looping a specific number of times in :keyword:`for` "
"loops."
msgstr ""

#: ../../library/stdtypes.rst:1278
msgid ""
"The arguments to the range constructor must be integers (either built-in "
":class:`int` or any object that implements the :meth:`~object.__index__` "
"special method).  If the *step* argument is omitted, it defaults to ``1``. "
"If the *start* argument is omitted, it defaults to ``0``. If *step* is zero,"
" :exc:`ValueError` is raised."
msgstr ""

#: ../../library/stdtypes.rst:1284
msgid ""
"For a positive *step*, the contents of a range ``r`` are determined by the "
"formula ``r[i] = start + step*i`` where ``i >= 0`` and ``r[i] < stop``."
msgstr ""

#: ../../library/stdtypes.rst:1288
msgid ""
"For a negative *step*, the contents of the range are still determined by the"
" formula ``r[i] = start + step*i``, but the constraints are ``i >= 0`` and "
"``r[i] > stop``."
msgstr ""

#: ../../library/stdtypes.rst:1292
msgid ""
"A range object will be empty if ``r[0]`` does not meet the value constraint."
" Ranges do support negative indices, but these are interpreted as indexing "
"from the end of the sequence determined by the positive indices."
msgstr ""

#: ../../library/stdtypes.rst:1297
msgid ""
"Ranges containing absolute values larger than :data:`sys.maxsize` are "
"permitted but some features (such as :func:`len`) may raise "
":exc:`OverflowError`."
msgstr ""

#: ../../library/stdtypes.rst:1301
msgid "Range examples::"
msgstr ""

#: ../../library/stdtypes.rst:1318
msgid ""
"Ranges implement all of the :ref:`common <typesseq-common>` sequence "
"operations except concatenation and repetition (due to the fact that range "
"objects can only represent sequences that follow a strict pattern and "
"repetition and concatenation will usually violate that pattern)."
msgstr ""

#: ../../library/stdtypes.rst:1325
msgid ""
"The value of the *start* parameter (or ``0`` if the parameter was not "
"supplied)"
msgstr ""

#: ../../library/stdtypes.rst:1330
msgid "The value of the *stop* parameter"
msgstr ""

#: ../../library/stdtypes.rst:1334
msgid ""
"The value of the *step* parameter (or ``1`` if the parameter was not "
"supplied)"
msgstr ""

#: ../../library/stdtypes.rst:1337
msgid ""
"The advantage of the :class:`range` type over a regular :class:`list` or "
":class:`tuple` is that a :class:`range` object will always take the same "
"(small) amount of memory, no matter the size of the range it represents (as "
"it only stores the ``start``, ``stop`` and ``step`` values, calculating "
"individual items and subranges as needed)."
msgstr ""

#: ../../library/stdtypes.rst:1343
msgid ""
"Range objects implement the :class:`collections.abc.Sequence` ABC, and "
"provide features such as containment tests, element index lookup, slicing "
"and support for negative indices (see :ref:`typesseq`):"
msgstr ""

#: ../../library/stdtypes.rst:1363
msgid ""
"Testing range objects for equality with ``==`` and ``!=`` compares them as "
"sequences.  That is, two range objects are considered equal if they "
"represent the same sequence of values.  (Note that two range objects that "
"compare equal might have different :attr:`~range.start`, :attr:`~range.stop`"
" and :attr:`~range.step` attributes, for example ``range(0) == range(2, 1, "
"3)`` or ``range(0, 3, 2) == range(0, 4, 2)``.)"
msgstr ""

#: ../../library/stdtypes.rst:1370
msgid ""
"Implement the Sequence ABC. Support slicing and negative indices. Test "
":class:`int` objects for membership in constant time instead of iterating "
"through all items."
msgstr ""

#: ../../library/stdtypes.rst:1376
msgid ""
"Define '==' and '!=' to compare range objects based on the sequence of "
"values they define (instead of comparing based on object identity)."
msgstr ""

#: ../../library/stdtypes.rst:1381
msgid ""
"The :attr:`~range.start`, :attr:`~range.stop` and :attr:`~range.step` "
"attributes."
msgstr ""

#: ../../library/stdtypes.rst:1387
msgid ""
"The `linspace recipe <http://code.activestate.com/recipes/579000/>`_ shows "
"how to implement a lazy version of range suitable for floating point "
"applications."
msgstr ""

#: ../../library/stdtypes.rst:1399
msgid "Text Sequence Type --- :class:`str`"
msgstr ""

#: ../../library/stdtypes.rst:1401
msgid ""
"Textual data in Python is handled with :class:`str` objects, or "
":dfn:`strings`. Strings are immutable :ref:`sequences <typesseq>` of Unicode"
" code points.  String literals are written in a variety of ways:"
msgstr ""

#: ../../library/stdtypes.rst:1406
msgid "Single quotes: ``'allows embedded \"double\" quotes'``"
msgstr ""

#: ../../library/stdtypes.rst:1407
msgid "Double quotes: ``\"allows embedded 'single' quotes\"``"
msgstr ""

#: ../../library/stdtypes.rst:1408
msgid "Triple quoted: ``'''Three single quotes'''``, ``\"\"\"Three double quotes\"\"\"``"
msgstr ""

#: ../../library/stdtypes.rst:1410
msgid ""
"Triple quoted strings may span multiple lines - all associated whitespace "
"will be included in the string literal."
msgstr ""

#: ../../library/stdtypes.rst:1413
msgid ""
"String literals that are part of a single expression and have only "
"whitespace between them will be implicitly converted to a single string "
"literal. That is, ``(\"spam \" \"eggs\") == \"spam eggs\"``."
msgstr ""

#: ../../library/stdtypes.rst:1417
msgid ""
"See :ref:`strings` for more about the various forms of string literal, "
"including supported escape sequences, and the ``r`` (\"raw\") prefix that "
"disables most escape sequence processing."
msgstr ""

#: ../../library/stdtypes.rst:1421
msgid ""
"Strings may also be created from other objects using the :class:`str` "
"constructor."
msgstr ""

#: ../../library/stdtypes.rst:1424
msgid ""
"Since there is no separate \"character\" type, indexing a string produces "
"strings of length 1. That is, for a non-empty string *s*, ``s[0] == "
"s[0:1]``."
msgstr ""

#: ../../library/stdtypes.rst:1430
msgid ""
"There is also no mutable string type, but :meth:`str.join` or "
":class:`io.StringIO` can be used to efficiently construct strings from "
"multiple fragments."
msgstr ""

#: ../../library/stdtypes.rst:1434
msgid ""
"For backwards compatibility with the Python 2 series, the ``u`` prefix is "
"once again permitted on string literals. It has no effect on the meaning of "
"string literals and cannot be combined with the ``r`` prefix."
msgstr ""

#: ../../library/stdtypes.rst:1446
msgid ""
"Return a :ref:`string <textseq>` version of *object*.  If *object* is not "
"provided, returns the empty string.  Otherwise, the behavior of ``str()`` "
"depends on whether *encoding* or *errors* is given, as follows."
msgstr ""

#: ../../library/stdtypes.rst:1450
msgid ""
"If neither *encoding* nor *errors* is given, ``str(object)`` returns "
":meth:`type(object).__str__(object) <object.__str__>`, which is the "
"\"informal\" or nicely printable string representation of *object*.  For "
"string objects, this is the string itself.  If *object* does not have a "
":meth:`~object.__str__` method, then :func:`str` falls back to returning "
":meth:`repr(object) <repr>`."
msgstr ""

#: ../../library/stdtypes.rst:1462
msgid ""
"If at least one of *encoding* or *errors* is given, *object* should be a "
":term:`bytes-like object` (e.g. :class:`bytes` or :class:`bytearray`).  In "
"this case, if *object* is a :class:`bytes` (or :class:`bytearray`) object, "
"then ``str(bytes, encoding, errors)`` is equivalent to "
":meth:`bytes.decode(encoding, errors) <bytes.decode>`.  Otherwise, the bytes"
" object underlying the buffer object is obtained before calling "
":meth:`bytes.decode`.  See :ref:`binaryseq` and :ref:`bufferobjects` for "
"information on buffer objects."
msgstr ""

#: ../../library/stdtypes.rst:1471
msgid ""
"Passing a :class:`bytes` object to :func:`str` without the *encoding* or "
"*errors* arguments falls under the first case of returning the informal "
"string representation (see also the :option:`-b` command-line option to "
"Python).  For example::"
msgstr ""

#: ../../library/stdtypes.rst:1479
msgid ""
"For more information on the ``str`` class and its methods, see "
":ref:`textseq` and the :ref:`string-methods` section below.  To output "
"formatted strings, see the :ref:`f-strings` and :ref:`formatstrings` "
"sections.  In addition, see the :ref:`stringservices` section."
msgstr ""

#: ../../library/stdtypes.rst:1491
msgid "String Methods"
msgstr ""

#: ../../library/stdtypes.rst:1496
msgid ""
"Strings implement all of the :ref:`common <typesseq-common>` sequence "
"operations, along with the additional methods described below."
msgstr ""

#: ../../library/stdtypes.rst:1499
msgid ""
"Strings also support two styles of string formatting, one providing a large "
"degree of flexibility and customization (see :meth:`str.format`, "
":ref:`formatstrings` and :ref:`string-formatting`) and the other based on C "
"``printf`` style formatting that handles a narrower range of types and is "
"slightly harder to use correctly, but is often faster for the cases it can "
"handle (:ref:`old-string-formatting`)."
msgstr ""

#: ../../library/stdtypes.rst:1506
msgid ""
"The :ref:`textservices` section of the standard library covers a number of "
"other modules that provide various text related utilities (including regular"
" expression support in the :mod:`re` module)."
msgstr ""

#: ../../library/stdtypes.rst:1512
msgid ""
"Return a copy of the string with its first character capitalized and the "
"rest lowercased."
msgstr ""

#: ../../library/stdtypes.rst:1515
msgid ""
"The first character is now put into titlecase rather than uppercase. This "
"means that characters like digraphs will only have their first letter "
"capitalized, instead of the full character."
msgstr ""

#: ../../library/stdtypes.rst:1522
msgid ""
"Return a casefolded copy of the string. Casefolded strings may be used for "
"caseless matching."
msgstr ""

#: ../../library/stdtypes.rst:1525
msgid ""
"Casefolding is similar to lowercasing but more aggressive because it is "
"intended to remove all case distinctions in a string. For example, the "
"German lowercase letter ``'ß'`` is equivalent to ``\"ss\"``. Since it is "
"already lowercase, :meth:`lower` would do nothing to ``'ß'``; "
":meth:`casefold` converts it to ``\"ss\"``."
msgstr ""

#: ../../library/stdtypes.rst:1531
msgid ""
"The casefolding algorithm is described in section 3.13 of the Unicode "
"Standard."
msgstr ""

#: ../../library/stdtypes.rst:1539
msgid ""
"Return centered in a string of length *width*. Padding is done using the "
"specified *fillchar* (default is an ASCII space). The original string is "
"returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:1547
msgid ""
"Return the number of non-overlapping occurrences of substring *sub* in the "
"range [*start*, *end*].  Optional arguments *start* and *end* are "
"interpreted as in slice notation."
msgstr ""

#: ../../library/stdtypes.rst:1554
msgid ""
"Return an encoded version of the string as a bytes object. Default encoding "
"is ``'utf-8'``. *errors* may be given to set a different error handling "
"scheme. The default for *errors* is ``'strict'``, meaning that encoding "
"errors raise a :exc:`UnicodeError`. Other possible values are ``'ignore'``, "
"``'replace'``, ``'xmlcharrefreplace'``, ``'backslashreplace'`` and any other"
" name registered via :func:`codecs.register_error`, see section :ref:`error-"
"handlers`. For a list of possible encodings, see section :ref:`standard-"
"encodings`."
msgstr ""

#: ../../library/stdtypes.rst:1563
msgid ""
"By default, the *errors* argument is not checked for best performances, but "
"only used at the first encoding error. Enable the :ref:`Python Development "
"Mode <devmode>`, or use a debug build to check *errors*."
msgstr ""

#: ../../library/stdtypes.rst:1567
msgid "Support for keyword arguments added."
msgstr ""

#: ../../library/stdtypes.rst:1570 ../../library/stdtypes.rst:2699
msgid "The *errors* is now checked in development mode and in debug mode."
msgstr ""

#: ../../library/stdtypes.rst:1576
msgid ""
"Return ``True`` if the string ends with the specified *suffix*, otherwise "
"return ``False``.  *suffix* can also be a tuple of suffixes to look for.  "
"With optional *start*, test beginning at that position.  With optional "
"*end*, stop comparing at that position."
msgstr ""

#: ../../library/stdtypes.rst:1584
msgid ""
"Return a copy of the string where all tab characters are replaced by one or "
"more spaces, depending on the current column and the given tab size.  Tab "
"positions occur every *tabsize* characters (default is 8, giving tab "
"positions at columns 0, 8, 16 and so on).  To expand the string, the current"
" column is set to zero and the string is examined character by character.  "
"If the character is a tab (``\\t``), one or more space characters are "
"inserted in the result until the current column is equal to the next tab "
"position. (The tab character itself is not copied.)  If the character is a "
"newline (``\\n``) or return (``\\r``), it is copied and the current column "
"is reset to zero.  Any other character is copied unchanged and the current "
"column is incremented by one regardless of how the character is represented "
"when printed."
msgstr ""

#: ../../library/stdtypes.rst:1605
msgid ""
"Return the lowest index in the string where substring *sub* is found within "
"the slice ``s[start:end]``.  Optional arguments *start* and *end* are "
"interpreted as in slice notation.  Return ``-1`` if *sub* is not found."
msgstr ""

#: ../../library/stdtypes.rst:1611
msgid ""
"The :meth:`~str.find` method should be used only if you need to know the "
"position of *sub*.  To check if *sub* is a substring or not, use the "
":keyword:`in` operator::"
msgstr ""

#: ../../library/stdtypes.rst:1621
msgid ""
"Perform a string formatting operation.  The string on which this method is "
"called can contain literal text or replacement fields delimited by braces "
"``{}``.  Each replacement field contains either the numeric index of a "
"positional argument, or the name of a keyword argument.  Returns a copy of "
"the string where each replacement field is replaced with the string value of"
" the corresponding argument."
msgstr ""

#: ../../library/stdtypes.rst:1631
msgid ""
"See :ref:`formatstrings` for a description of the various formatting options"
" that can be specified in format strings."
msgstr ""

#: ../../library/stdtypes.rst:1635
msgid ""
"When formatting a number (:class:`int`, :class:`float`, :class:`complex`, "
":class:`decimal.Decimal` and subclasses) with the ``n`` type (ex: "
"``'{:n}'.format(1234)``), the function temporarily sets the ``LC_CTYPE`` "
"locale to the ``LC_NUMERIC`` locale to decode ``decimal_point`` and "
"``thousands_sep`` fields of :c:func:`localeconv` if they are non-ASCII or "
"longer than 1 byte, and the ``LC_NUMERIC`` locale is different than the "
"``LC_CTYPE`` locale.  This temporary change affects other threads."
msgstr ""

#: ../../library/stdtypes.rst:1644
msgid ""
"When formatting a number with the ``n`` type, the function sets temporarily "
"the ``LC_CTYPE`` locale to the ``LC_NUMERIC`` locale in some cases."
msgstr ""

#: ../../library/stdtypes.rst:1652
msgid ""
"Similar to ``str.format(**mapping)``, except that ``mapping`` is used "
"directly and not copied to a :class:`dict`.  This is useful if for example "
"``mapping`` is a dict subclass:"
msgstr ""

#: ../../library/stdtypes.rst:1668
msgid ""
"Like :meth:`~str.find`, but raise :exc:`ValueError` when the substring is "
"not found."
msgstr ""

#: ../../library/stdtypes.rst:1674
msgid ""
"Return ``True`` if all characters in the string are alphanumeric and there "
"is at least one character, ``False`` otherwise.  A character ``c`` is "
"alphanumeric if one of the following returns ``True``: ``c.isalpha()``, "
"``c.isdecimal()``, ``c.isdigit()``, or ``c.isnumeric()``."
msgstr ""

#: ../../library/stdtypes.rst:1682
msgid ""
"Return ``True`` if all characters in the string are alphabetic and there is "
"at least one character, ``False`` otherwise.  Alphabetic characters are "
"those characters defined in the Unicode character database as \"Letter\", "
"i.e., those with general category property being one of \"Lm\", \"Lt\", "
"\"Lu\", \"Ll\", or \"Lo\".  Note that this is different from the "
"\"Alphabetic\" property defined in the Unicode Standard."
msgstr ""

#: ../../library/stdtypes.rst:1691
msgid ""
"Return ``True`` if the string is empty or all characters in the string are "
"ASCII, ``False`` otherwise. ASCII characters have code points in the range "
"U+0000-U+007F."
msgstr ""

#: ../../library/stdtypes.rst:1700
msgid ""
"Return ``True`` if all characters in the string are decimal characters and "
"there is at least one character, ``False`` otherwise. Decimal characters are"
" those that can be used to form numbers in base 10, e.g. U+0660, ARABIC-"
"INDIC DIGIT ZERO.  Formally a decimal character is a character in the "
"Unicode General Category \"Nd\"."
msgstr ""

#: ../../library/stdtypes.rst:1710
msgid ""
"Return ``True`` if all characters in the string are digits and there is at "
"least one character, ``False`` otherwise.  Digits include decimal characters"
" and digits that need special handling, such as the compatibility "
"superscript digits. This covers digits which cannot be used to form numbers "
"in base 10, like the Kharosthi numbers.  Formally, a digit is a character "
"that has the property value Numeric_Type=Digit or Numeric_Type=Decimal."
msgstr ""

#: ../../library/stdtypes.rst:1720
msgid ""
"Return ``True`` if the string is a valid identifier according to the "
"language definition, section :ref:`identifiers`."
msgstr ""

#: ../../library/stdtypes.rst:1723
msgid ""
"Call :func:`keyword.iskeyword` to test whether string ``s`` is a reserved "
"identifier, such as :keyword:`def` and :keyword:`class`."
msgstr ""

#: ../../library/stdtypes.rst:1726
msgid "Example: ::"
msgstr ""

#: ../../library/stdtypes.rst:1739
msgid ""
"Return ``True`` if all cased characters [4]_ in the string are lowercase and"
" there is at least one cased character, ``False`` otherwise."
msgstr ""

#: ../../library/stdtypes.rst:1745
msgid ""
"Return ``True`` if all characters in the string are numeric characters, and "
"there is at least one character, ``False`` otherwise. Numeric characters "
"include digit characters, and all characters that have the Unicode numeric "
"value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH.  Formally, numeric "
"characters are those with the property value Numeric_Type=Digit, "
"Numeric_Type=Decimal or Numeric_Type=Numeric."
msgstr ""

#: ../../library/stdtypes.rst:1755
msgid ""
"Return ``True`` if all characters in the string are printable or the string "
"is empty, ``False`` otherwise.  Nonprintable characters are those characters"
" defined in the Unicode character database as \"Other\" or \"Separator\", "
"excepting the ASCII space (0x20) which is considered printable.  (Note that "
"printable characters in this context are those which should not be escaped "
"when :func:`repr` is invoked on a string.  It has no bearing on the handling"
" of strings written to :data:`sys.stdout` or :data:`sys.stderr`.)"
msgstr ""

#: ../../library/stdtypes.rst:1766
msgid ""
"Return ``True`` if there are only whitespace characters in the string and "
"there is at least one character, ``False`` otherwise."
msgstr ""

#: ../../library/stdtypes.rst:1769
msgid ""
"A character is *whitespace* if in the Unicode character database (see "
":mod:`unicodedata`), either its general category is ``Zs`` (\"Separator, "
"space\"), or its bidirectional class is one of ``WS``, ``B``, or ``S``."
msgstr ""

#: ../../library/stdtypes.rst:1777
msgid ""
"Return ``True`` if the string is a titlecased string and there is at least "
"one character, for example uppercase characters may only follow uncased "
"characters and lowercase characters only cased ones.  Return ``False`` "
"otherwise."
msgstr ""

#: ../../library/stdtypes.rst:1784
msgid ""
"Return ``True`` if all cased characters [4]_ in the string are uppercase and"
" there is at least one cased character, ``False`` otherwise."
msgstr ""

#: ../../library/stdtypes.rst:1800
msgid ""
"Return a string which is the concatenation of the strings in *iterable*. A "
":exc:`TypeError` will be raised if there are any non-string values in "
"*iterable*, including :class:`bytes` objects.  The separator between "
"elements is the string providing this method."
msgstr ""

#: ../../library/stdtypes.rst:1808
msgid ""
"Return the string left justified in a string of length *width*. Padding is "
"done using the specified *fillchar* (default is an ASCII space). The "
"original string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:1815
msgid ""
"Return a copy of the string with all the cased characters [4]_ converted to "
"lowercase."
msgstr ""

#: ../../library/stdtypes.rst:1818
msgid ""
"The lowercasing algorithm used is described in section 3.13 of the Unicode "
"Standard."
msgstr ""

#: ../../library/stdtypes.rst:1824
msgid ""
"Return a copy of the string with leading characters removed.  The *chars* "
"argument is a string specifying the set of characters to be removed.  If "
"omitted or ``None``, the *chars* argument defaults to removing whitespace.  "
"The *chars* argument is not a prefix; rather, all combinations of its values"
" are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:1834
msgid ""
"See :meth:`str.removeprefix` for a method that will remove a single prefix "
"string rather than all of a set of characters.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:1845
msgid ""
"This static method returns a translation table usable for "
":meth:`str.translate`."
msgstr ""

#: ../../library/stdtypes.rst:1847
msgid ""
"If there is only one argument, it must be a dictionary mapping Unicode "
"ordinals (integers) or characters (strings of length 1) to Unicode ordinals,"
" strings (of arbitrary lengths) or ``None``.  Character keys will then be "
"converted to ordinals."
msgstr ""

#: ../../library/stdtypes.rst:1852
msgid ""
"If there are two arguments, they must be strings of equal length, and in the"
" resulting dictionary, each character in x will be mapped to the character "
"at the same position in y.  If there is a third argument, it must be a "
"string, whose characters will be mapped to ``None`` in the result."
msgstr ""

#: ../../library/stdtypes.rst:1860
msgid ""
"Split the string at the first occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself, and the part"
" after the separator.  If the separator is not found, return a 3-tuple "
"containing the string itself, followed by two empty strings."
msgstr ""

#: ../../library/stdtypes.rst:1868
msgid ""
"If the string starts with the *prefix* string, return "
"``string[len(prefix):]``. Otherwise, return a copy of the original string::"
msgstr ""

#: ../../library/stdtypes.rst:1882
msgid ""
"If the string ends with the *suffix* string and that *suffix* is not empty, "
"return ``string[:-len(suffix)]``. Otherwise, return a copy of the original "
"string::"
msgstr ""

#: ../../library/stdtypes.rst:1896
msgid ""
"Return a copy of the string with all occurrences of substring *old* replaced"
" by *new*.  If the optional argument *count* is given, only the first "
"*count* occurrences are replaced."
msgstr ""

#: ../../library/stdtypes.rst:1903
msgid ""
"Return the highest index in the string where substring *sub* is found, such "
"that *sub* is contained within ``s[start:end]``.  Optional arguments *start*"
" and *end* are interpreted as in slice notation.  Return ``-1`` on failure."
msgstr ""

#: ../../library/stdtypes.rst:1910
msgid ""
"Like :meth:`rfind` but raises :exc:`ValueError` when the substring *sub* is "
"not found."
msgstr ""

#: ../../library/stdtypes.rst:1916
msgid ""
"Return the string right justified in a string of length *width*. Padding is "
"done using the specified *fillchar* (default is an ASCII space). The "
"original string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:1923
msgid ""
"Split the string at the last occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself, and the part"
" after the separator.  If the separator is not found, return a 3-tuple "
"containing two empty strings, followed by the string itself."
msgstr ""

#: ../../library/stdtypes.rst:1931
msgid ""
"Return a list of the words in the string, using *sep* as the delimiter "
"string. If *maxsplit* is given, at most *maxsplit* splits are done, the "
"*rightmost* ones.  If *sep* is not specified or ``None``, any whitespace "
"string is a separator.  Except for splitting from the right, :meth:`rsplit` "
"behaves like :meth:`split` which is described in detail below."
msgstr ""

#: ../../library/stdtypes.rst:1940
msgid ""
"Return a copy of the string with trailing characters removed.  The *chars* "
"argument is a string specifying the set of characters to be removed.  If "
"omitted or ``None``, the *chars* argument defaults to removing whitespace.  "
"The *chars* argument is not a suffix; rather, all combinations of its values"
" are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:1950
msgid ""
"See :meth:`str.removesuffix` for a method that will remove a single suffix "
"string rather than all of a set of characters.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:1960
msgid ""
"Return a list of the words in the string, using *sep* as the delimiter "
"string.  If *maxsplit* is given, at most *maxsplit* splits are done (thus, "
"the list will have at most ``maxsplit+1`` elements).  If *maxsplit* is not "
"specified or ``-1``, then there is no limit on the number of splits (all "
"possible splits are made)."
msgstr ""

#: ../../library/stdtypes.rst:1966
msgid ""
"If *sep* is given, consecutive delimiters are not grouped together and are "
"deemed to delimit empty strings (for example, ``'1,,2'.split(',')`` returns "
"``['1', '', '2']``).  The *sep* argument may consist of multiple characters "
"(for example, ``'1<>2<>3'.split('<>')`` returns ``['1', '2', '3']``). "
"Splitting an empty string with a specified separator returns ``['']``."
msgstr ""

#: ../../library/stdtypes.rst:1972 ../../library/stdtypes.rst:1988
#: ../../library/stdtypes.rst:2040 ../../library/stdtypes.rst:2108
#: ../../library/stdtypes.rst:2175 ../../library/stdtypes.rst:3014
#: ../../library/stdtypes.rst:3030 ../../library/stdtypes.rst:3121
#: ../../library/stdtypes.rst:3137 ../../library/stdtypes.rst:3162
#: ../../library/stdtypes.rst:3176 ../../library/stdtypes.rst:3204
#: ../../library/stdtypes.rst:3218 ../../library/stdtypes.rst:3236
#: ../../library/stdtypes.rst:3263 ../../library/stdtypes.rst:3286
#: ../../library/stdtypes.rst:3313 ../../library/stdtypes.rst:3355
#: ../../library/stdtypes.rst:3379
msgid "For example::"
msgstr "例如："

#: ../../library/stdtypes.rst:1981
msgid ""
"If *sep* is not specified or is ``None``, a different splitting algorithm is"
" applied: runs of consecutive whitespace are regarded as a single separator,"
" and the result will contain no empty strings at the start or end if the "
"string has leading or trailing whitespace.  Consequently, splitting an empty"
" string or a string consisting of just whitespace with a ``None`` separator "
"returns ``[]``."
msgstr ""

#: ../../library/stdtypes.rst:2003
msgid ""
"Return a list of the lines in the string, breaking at line boundaries.  Line"
" breaks are not included in the resulting list unless *keepends* is given "
"and true."
msgstr ""

#: ../../library/stdtypes.rst:2007
msgid ""
"This method splits on the following line boundaries.  In particular, the "
"boundaries are a superset of :term:`universal newlines`."
msgstr ""

#: ../../library/stdtypes.rst:2011
msgid "Representation"
msgstr ""

#: ../../library/stdtypes.rst:2011
msgid "Description"
msgstr "描述"

#: ../../library/stdtypes.rst:2013
msgid "``\\n``"
msgstr ""

#: ../../library/stdtypes.rst:2013
msgid "Line Feed"
msgstr ""

#: ../../library/stdtypes.rst:2015
msgid "``\\r``"
msgstr ""

#: ../../library/stdtypes.rst:2015
msgid "Carriage Return"
msgstr ""

#: ../../library/stdtypes.rst:2017
msgid "``\\r\\n``"
msgstr ""

#: ../../library/stdtypes.rst:2017
msgid "Carriage Return + Line Feed"
msgstr ""

#: ../../library/stdtypes.rst:2019
msgid "``\\v`` or ``\\x0b``"
msgstr ""

#: ../../library/stdtypes.rst:2019
msgid "Line Tabulation"
msgstr ""

#: ../../library/stdtypes.rst:2021
msgid "``\\f`` or ``\\x0c``"
msgstr ""

#: ../../library/stdtypes.rst:2021
msgid "Form Feed"
msgstr ""

#: ../../library/stdtypes.rst:2023
msgid "``\\x1c``"
msgstr ""

#: ../../library/stdtypes.rst:2023
msgid "File Separator"
msgstr ""

#: ../../library/stdtypes.rst:2025
msgid "``\\x1d``"
msgstr ""

#: ../../library/stdtypes.rst:2025
msgid "Group Separator"
msgstr ""

#: ../../library/stdtypes.rst:2027
msgid "``\\x1e``"
msgstr ""

#: ../../library/stdtypes.rst:2027
msgid "Record Separator"
msgstr ""

#: ../../library/stdtypes.rst:2029
msgid "``\\x85``"
msgstr ""

#: ../../library/stdtypes.rst:2029
msgid "Next Line (C1 Control Code)"
msgstr ""

#: ../../library/stdtypes.rst:2031
msgid "``\\u2028``"
msgstr ""

#: ../../library/stdtypes.rst:2031
msgid "Line Separator"
msgstr ""

#: ../../library/stdtypes.rst:2033
msgid "``\\u2029``"
msgstr ""

#: ../../library/stdtypes.rst:2033
msgid "Paragraph Separator"
msgstr ""

#: ../../library/stdtypes.rst:2038
msgid "``\\v`` and ``\\f`` added to list of line boundaries."
msgstr ""

#: ../../library/stdtypes.rst:2047
msgid ""
"Unlike :meth:`~str.split` when a delimiter string *sep* is given, this "
"method returns an empty list for the empty string, and a terminal line break"
" does not result in an extra line::"
msgstr ""

#: ../../library/stdtypes.rst:2056
msgid "For comparison, ``split('\\n')`` gives::"
msgstr ""

#: ../../library/stdtypes.rst:2066
msgid ""
"Return ``True`` if string starts with the *prefix*, otherwise return "
"``False``. *prefix* can also be a tuple of prefixes to look for.  With "
"optional *start*, test string beginning at that position.  With optional "
"*end*, stop comparing string at that position."
msgstr ""

#: ../../library/stdtypes.rst:2074
msgid ""
"Return a copy of the string with the leading and trailing characters "
"removed. The *chars* argument is a string specifying the set of characters "
"to be removed. If omitted or ``None``, the *chars* argument defaults to "
"removing whitespace. The *chars* argument is not a prefix or suffix; rather,"
" all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:2085
msgid ""
"The outermost leading and trailing *chars* argument values are stripped from"
" the string. Characters are removed from the leading end until reaching a "
"string character that is not contained in the set of characters in *chars*. "
"A similar action takes place on the trailing end. For example::"
msgstr ""

#: ../../library/stdtypes.rst:2098
msgid ""
"Return a copy of the string with uppercase characters converted to lowercase"
" and vice versa. Note that it is not necessarily true that "
"``s.swapcase().swapcase() == s``."
msgstr ""

#: ../../library/stdtypes.rst:2105
msgid ""
"Return a titlecased version of the string where words start with an "
"uppercase character and the remaining characters are lowercase."
msgstr ""

#: ../../library/stdtypes.rst:2113 ../../library/stdtypes.rst:3323
msgid ""
"The algorithm uses a simple language-independent definition of a word as "
"groups of consecutive letters.  The definition works in many contexts but it"
" means that apostrophes in contractions and possessives form word "
"boundaries, which may not be the desired result::"
msgstr ""

#: ../../library/stdtypes.rst:2121
msgid ""
"The :func:`string.capwords` function does not have this problem, as it "
"splits words on spaces only."
msgstr ""

#: ../../library/stdtypes.rst:2124
msgid ""
"Alternatively, a workaround for apostrophes can be constructed using regular"
" expressions::"
msgstr ""

#: ../../library/stdtypes.rst:2139
msgid ""
"Return a copy of the string in which each character has been mapped through "
"the given translation table.  The table must be an object that implements "
"indexing via :meth:`__getitem__`, typically a :term:`mapping` or "
":term:`sequence`.  When indexed by a Unicode ordinal (an integer), the table"
" object can do any of the following: return a Unicode ordinal or a string, "
"to map the character to one or more other characters; return ``None``, to "
"delete the character from the return string; or raise a :exc:`LookupError` "
"exception, to map the character to itself."
msgstr ""

#: ../../library/stdtypes.rst:2148
msgid ""
"You can use :meth:`str.maketrans` to create a translation map from "
"character-to-character mappings in different formats."
msgstr ""

#: ../../library/stdtypes.rst:2151
msgid ""
"See also the :mod:`codecs` module for a more flexible approach to custom "
"character mappings."
msgstr ""

#: ../../library/stdtypes.rst:2157
msgid ""
"Return a copy of the string with all the cased characters [4]_ converted to "
"uppercase.  Note that ``s.upper().isupper()`` might be ``False`` if ``s`` "
"contains uncased characters or if the Unicode category of the resulting "
"character(s) is not \"Lu\" (Letter, uppercase), but e.g. \"Lt\" (Letter, "
"titlecase)."
msgstr ""

#: ../../library/stdtypes.rst:2163
msgid ""
"The uppercasing algorithm used is described in section 3.13 of the Unicode "
"Standard."
msgstr ""

#: ../../library/stdtypes.rst:2169
msgid ""
"Return a copy of the string left filled with ASCII ``'0'`` digits to make a "
"string of length *width*. A leading sign prefix (``'+'``/``'-'``) is handled"
" by inserting the padding *after* the sign character rather than before. The"
" original string is returned if *width* is less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:2187
msgid "``printf``-style String Formatting"
msgstr ""

#: ../../library/stdtypes.rst:2200
msgid ""
"The formatting operations described here exhibit a variety of quirks that "
"lead to a number of common errors (such as failing to display tuples and "
"dictionaries correctly).  Using the newer :ref:`formatted string literals "
"<f-strings>`, the :meth:`str.format` interface, or :ref:`template strings "
"<template-strings>` may help avoid these errors.  Each of these alternatives"
" provides their own trade-offs and benefits of simplicity, flexibility, "
"and/or extensibility."
msgstr ""

#: ../../library/stdtypes.rst:2208
msgid ""
"String objects have one unique built-in operation: the ``%`` operator "
"(modulo). This is also known as the string *formatting* or *interpolation* "
"operator. Given ``format % values`` (where *format* is a string), ``%`` "
"conversion specifications in *format* are replaced with zero or more "
"elements of *values*. The effect is similar to using the :c:func:`sprintf` "
"in the C language."
msgstr ""

#: ../../library/stdtypes.rst:2214
msgid ""
"If *format* requires a single argument, *values* may be a single non-tuple "
"object. [5]_  Otherwise, *values* must be a tuple with exactly the number of"
" items specified by the format string, or a single mapping object (for "
"example, a dictionary)."
msgstr ""

#: ../../library/stdtypes.rst:2224 ../../library/stdtypes.rst:3434
msgid ""
"A conversion specifier contains two or more characters and has the following"
" components, which must occur in this order:"
msgstr ""

#: ../../library/stdtypes.rst:2227 ../../library/stdtypes.rst:3437
msgid "The ``'%'`` character, which marks the start of the specifier."
msgstr ""

#: ../../library/stdtypes.rst:2229 ../../library/stdtypes.rst:3439
msgid ""
"Mapping key (optional), consisting of a parenthesised sequence of characters"
" (for example, ``(somename)``)."
msgstr ""

#: ../../library/stdtypes.rst:2232 ../../library/stdtypes.rst:3442
msgid ""
"Conversion flags (optional), which affect the result of some conversion "
"types."
msgstr ""

#: ../../library/stdtypes.rst:2235 ../../library/stdtypes.rst:3445
msgid ""
"Minimum field width (optional).  If specified as an ``'*'`` (asterisk), the "
"actual width is read from the next element of the tuple in *values*, and the"
" object to convert comes after the minimum field width and optional "
"precision."
msgstr ""

#: ../../library/stdtypes.rst:2239 ../../library/stdtypes.rst:3449
msgid ""
"Precision (optional), given as a ``'.'`` (dot) followed by the precision.  "
"If specified as ``'*'`` (an asterisk), the actual precision is read from the"
" next element of the tuple in *values*, and the value to convert comes after"
" the precision."
msgstr ""

#: ../../library/stdtypes.rst:2244 ../../library/stdtypes.rst:3454
msgid "Length modifier (optional)."
msgstr ""

#: ../../library/stdtypes.rst:2246 ../../library/stdtypes.rst:3456
msgid "Conversion type."
msgstr ""

#: ../../library/stdtypes.rst:2248
msgid ""
"When the right argument is a dictionary (or other mapping type), then the "
"formats in the string *must* include a parenthesised mapping key into that "
"dictionary inserted immediately after the ``'%'`` character. The mapping key"
" selects the value to be formatted from the mapping.  For example:"
msgstr ""

#: ../../library/stdtypes.rst:2257 ../../library/stdtypes.rst:3467
msgid ""
"In this case no ``*`` specifiers may occur in a format (since they require a"
" sequential parameter list)."
msgstr ""

#: ../../library/stdtypes.rst:2260 ../../library/stdtypes.rst:3470
msgid "The conversion flag characters are:"
msgstr ""

#: ../../library/stdtypes.rst:2269 ../../library/stdtypes.rst:3479
msgid "Flag"
msgstr ""

#: ../../library/stdtypes.rst:2271 ../../library/stdtypes.rst:3481
msgid "``'#'``"
msgstr ""

#: ../../library/stdtypes.rst:2271 ../../library/stdtypes.rst:3481
msgid ""
"The value conversion will use the \"alternate form\" (where defined below)."
msgstr ""

#: ../../library/stdtypes.rst:2274 ../../library/stdtypes.rst:3484
msgid "``'0'``"
msgstr ""

#: ../../library/stdtypes.rst:2274 ../../library/stdtypes.rst:3484
msgid "The conversion will be zero padded for numeric values."
msgstr ""

#: ../../library/stdtypes.rst:2276 ../../library/stdtypes.rst:3486
msgid "``'-'``"
msgstr ""

#: ../../library/stdtypes.rst:2276 ../../library/stdtypes.rst:3486
msgid ""
"The converted value is left adjusted (overrides the ``'0'`` conversion if "
"both are given)."
msgstr ""

#: ../../library/stdtypes.rst:2279 ../../library/stdtypes.rst:3489
msgid "``' '``"
msgstr ""

#: ../../library/stdtypes.rst:2279 ../../library/stdtypes.rst:3489
msgid ""
"(a space) A blank should be left before a positive number (or empty string) "
"produced by a signed conversion."
msgstr ""

#: ../../library/stdtypes.rst:2282 ../../library/stdtypes.rst:3492
msgid "``'+'``"
msgstr ""

#: ../../library/stdtypes.rst:2282 ../../library/stdtypes.rst:3492
msgid ""
"A sign character (``'+'`` or ``'-'``) will precede the conversion (overrides"
" a \"space\" flag)."
msgstr ""

#: ../../library/stdtypes.rst:2286 ../../library/stdtypes.rst:3496
msgid ""
"A length modifier (``h``, ``l``, or ``L``) may be present, but is ignored as"
" it is not necessary for Python -- so e.g. ``%ld`` is identical to ``%d``."
msgstr ""

#: ../../library/stdtypes.rst:2289 ../../library/stdtypes.rst:3499
msgid "The conversion types are:"
msgstr ""

#: ../../library/stdtypes.rst:2292 ../../library/stdtypes.rst:3502
msgid "Conversion"
msgstr ""

#: ../../library/stdtypes.rst:2294 ../../library/stdtypes.rst:3504
msgid "``'d'``"
msgstr ""

#: ../../library/stdtypes.rst:2294 ../../library/stdtypes.rst:2296
#: ../../library/stdtypes.rst:3504 ../../library/stdtypes.rst:3506
msgid "Signed integer decimal."
msgstr ""

#: ../../library/stdtypes.rst:2296 ../../library/stdtypes.rst:3506
msgid "``'i'``"
msgstr ""

#: ../../library/stdtypes.rst:2298 ../../library/stdtypes.rst:3508
msgid "``'o'``"
msgstr ""

#: ../../library/stdtypes.rst:2298 ../../library/stdtypes.rst:3508
msgid "Signed octal value."
msgstr ""

#: ../../library/stdtypes.rst:2300 ../../library/stdtypes.rst:3510
msgid "``'u'``"
msgstr ""

#: ../../library/stdtypes.rst:2300 ../../library/stdtypes.rst:3510
msgid "Obsolete type -- it is identical to ``'d'``."
msgstr ""

#: ../../library/stdtypes.rst:2302 ../../library/stdtypes.rst:3512
msgid "``'x'``"
msgstr ""

#: ../../library/stdtypes.rst:2302 ../../library/stdtypes.rst:3512
msgid "Signed hexadecimal (lowercase)."
msgstr ""

#: ../../library/stdtypes.rst:2304 ../../library/stdtypes.rst:3514
msgid "``'X'``"
msgstr ""

#: ../../library/stdtypes.rst:2304 ../../library/stdtypes.rst:3514
msgid "Signed hexadecimal (uppercase)."
msgstr ""

#: ../../library/stdtypes.rst:2306 ../../library/stdtypes.rst:3516
msgid "``'e'``"
msgstr ""

#: ../../library/stdtypes.rst:2306 ../../library/stdtypes.rst:3516
msgid "Floating point exponential format (lowercase)."
msgstr ""

#: ../../library/stdtypes.rst:2308 ../../library/stdtypes.rst:3518
msgid "``'E'``"
msgstr ""

#: ../../library/stdtypes.rst:2308 ../../library/stdtypes.rst:3518
msgid "Floating point exponential format (uppercase)."
msgstr ""

#: ../../library/stdtypes.rst:2310 ../../library/stdtypes.rst:3520
msgid "``'f'``"
msgstr ""

#: ../../library/stdtypes.rst:2310 ../../library/stdtypes.rst:2312
#: ../../library/stdtypes.rst:3520 ../../library/stdtypes.rst:3522
msgid "Floating point decimal format."
msgstr ""

#: ../../library/stdtypes.rst:2312 ../../library/stdtypes.rst:3522
msgid "``'F'``"
msgstr ""

#: ../../library/stdtypes.rst:2314 ../../library/stdtypes.rst:3524
msgid "``'g'``"
msgstr ""

#: ../../library/stdtypes.rst:2314 ../../library/stdtypes.rst:3524
msgid ""
"Floating point format. Uses lowercase exponential format if exponent is less"
" than -4 or not less than precision, decimal format otherwise."
msgstr ""

#: ../../library/stdtypes.rst:2318 ../../library/stdtypes.rst:3528
msgid "``'G'``"
msgstr ""

#: ../../library/stdtypes.rst:2318 ../../library/stdtypes.rst:3528
msgid ""
"Floating point format. Uses uppercase exponential format if exponent is less"
" than -4 or not less than precision, decimal format otherwise."
msgstr ""

#: ../../library/stdtypes.rst:2322 ../../library/stdtypes.rst:3532
msgid "``'c'``"
msgstr ""

#: ../../library/stdtypes.rst:2322
msgid "Single character (accepts integer or single character string)."
msgstr ""

#: ../../library/stdtypes.rst:2325 ../../library/stdtypes.rst:3545
msgid "``'r'``"
msgstr ""

#: ../../library/stdtypes.rst:2325
msgid "String (converts any Python object using :func:`repr`)."
msgstr ""

#: ../../library/stdtypes.rst:2328 ../../library/stdtypes.rst:3539
msgid "``'s'``"
msgstr ""

#: ../../library/stdtypes.rst:2328
msgid "String (converts any Python object using :func:`str`)."
msgstr ""

#: ../../library/stdtypes.rst:2331 ../../library/stdtypes.rst:3542
msgid "``'a'``"
msgstr ""

#: ../../library/stdtypes.rst:2331
msgid "String (converts any Python object using :func:`ascii`)."
msgstr ""

#: ../../library/stdtypes.rst:2334 ../../library/stdtypes.rst:3548
msgid "``'%'``"
msgstr ""

#: ../../library/stdtypes.rst:2334 ../../library/stdtypes.rst:3548
msgid ""
"No argument is converted, results in a ``'%'`` character in the result."
msgstr ""

#: ../../library/stdtypes.rst:2341 ../../library/stdtypes.rst:3555
msgid ""
"The alternate form causes a leading octal specifier (``'0o'``) to be "
"inserted before the first digit."
msgstr ""

#: ../../library/stdtypes.rst:2345 ../../library/stdtypes.rst:3559
msgid ""
"The alternate form causes a leading ``'0x'`` or ``'0X'`` (depending on "
"whether the ``'x'`` or ``'X'`` format was used) to be inserted before the "
"first digit."
msgstr ""

#: ../../library/stdtypes.rst:2349 ../../library/stdtypes.rst:3563
msgid ""
"The alternate form causes the result to always contain a decimal point, even"
" if no digits follow it."
msgstr ""

#: ../../library/stdtypes.rst:2352 ../../library/stdtypes.rst:3566
msgid ""
"The precision determines the number of digits after the decimal point and "
"defaults to 6."
msgstr ""

#: ../../library/stdtypes.rst:2356 ../../library/stdtypes.rst:3570
msgid ""
"The alternate form causes the result to always contain a decimal point, and "
"trailing zeroes are not removed as they would otherwise be."
msgstr ""

#: ../../library/stdtypes.rst:2359 ../../library/stdtypes.rst:3573
msgid ""
"The precision determines the number of significant digits before and after "
"the decimal point and defaults to 6."
msgstr ""

#: ../../library/stdtypes.rst:2363 ../../library/stdtypes.rst:3577
msgid "If precision is ``N``, the output is truncated to ``N`` characters."
msgstr ""

#: ../../library/stdtypes.rst:2366 ../../library/stdtypes.rst:3586
msgid "See :pep:`237`."
msgstr ""

#: ../../library/stdtypes.rst:2368
msgid ""
"Since Python strings have an explicit length, ``%s`` conversions do not "
"assume that ``'\\0'`` is the end of the string."
msgstr ""

#: ../../library/stdtypes.rst:2373
msgid ""
"``%f`` conversions for numbers whose absolute value is over 1e50 are no "
"longer replaced by ``%g`` conversions."
msgstr ""

#: ../../library/stdtypes.rst:2384
msgid ""
"Binary Sequence Types --- :class:`bytes`, :class:`bytearray`, "
":class:`memoryview`"
msgstr ""

#: ../../library/stdtypes.rst:2392
msgid ""
"The core built-in types for manipulating binary data are :class:`bytes` and "
":class:`bytearray`. They are supported by :class:`memoryview` which uses the"
" :ref:`buffer protocol <bufferobjects>` to access the memory of other binary"
" objects without needing to make a copy."
msgstr ""

#: ../../library/stdtypes.rst:2397
msgid ""
"The :mod:`array` module supports efficient storage of basic data types like "
"32-bit integers and IEEE754 double-precision floating values."
msgstr ""

#: ../../library/stdtypes.rst:2403
msgid "Bytes Objects"
msgstr "bytes 对象"

#: ../../library/stdtypes.rst:2407
msgid ""
"Bytes objects are immutable sequences of single bytes. Since many major "
"binary protocols are based on the ASCII text encoding, bytes objects offer "
"several methods that are only valid when working with ASCII compatible data "
"and are closely related to string objects in a variety of other ways."
msgstr ""

#: ../../library/stdtypes.rst:2414
msgid ""
"Firstly, the syntax for bytes literals is largely the same as that for "
"string literals, except that a ``b`` prefix is added:"
msgstr ""

#: ../../library/stdtypes.rst:2417
msgid "Single quotes: ``b'still allows embedded \"double\" quotes'``"
msgstr ""

#: ../../library/stdtypes.rst:2418
msgid "Double quotes: ``b\"still allows embedded 'single' quotes\"``"
msgstr ""

#: ../../library/stdtypes.rst:2419
msgid "Triple quoted: ``b'''3 single quotes'''``, ``b\"\"\"3 double quotes\"\"\"``"
msgstr ""

#: ../../library/stdtypes.rst:2421
msgid ""
"Only ASCII characters are permitted in bytes literals (regardless of the "
"declared source code encoding). Any binary values over 127 must be entered "
"into bytes literals using the appropriate escape sequence."
msgstr ""

#: ../../library/stdtypes.rst:2425
msgid ""
"As with string literals, bytes literals may also use a ``r`` prefix to "
"disable processing of escape sequences. See :ref:`strings` for more about "
"the various forms of bytes literal, including supported escape sequences."
msgstr ""

#: ../../library/stdtypes.rst:2429
msgid ""
"While bytes literals and representations are based on ASCII text, bytes "
"objects actually behave like immutable sequences of integers, with each "
"value in the sequence restricted such that ``0 <= x < 256`` (attempts to "
"violate this restriction will trigger :exc:`ValueError`). This is done "
"deliberately to emphasise that while many binary formats include ASCII based"
" elements and can be usefully manipulated with some text-oriented "
"algorithms, this is not generally the case for arbitrary binary data "
"(blindly applying text processing algorithms to binary data formats that are"
" not ASCII compatible will usually lead to data corruption)."
msgstr ""

#: ../../library/stdtypes.rst:2439
msgid ""
"In addition to the literal forms, bytes objects can be created in a number "
"of other ways:"
msgstr ""

#: ../../library/stdtypes.rst:2442
msgid "A zero-filled bytes object of a specified length: ``bytes(10)``"
msgstr ""

#: ../../library/stdtypes.rst:2443
msgid "From an iterable of integers: ``bytes(range(20))``"
msgstr ""

#: ../../library/stdtypes.rst:2444
msgid "Copying existing binary data via the buffer protocol:  ``bytes(obj)``"
msgstr ""

#: ../../library/stdtypes.rst:2446
msgid "Also see the :ref:`bytes <func-bytes>` built-in."
msgstr ""

#: ../../library/stdtypes.rst:2448
msgid ""
"Since 2 hexadecimal digits correspond precisely to a single byte, "
"hexadecimal numbers are a commonly used format for describing binary data. "
"Accordingly, the bytes type has an additional class method to read data in "
"that format:"
msgstr ""

#: ../../library/stdtypes.rst:2454
msgid ""
"This :class:`bytes` class method returns a bytes object, decoding the given "
"string object.  The string must contain two hexadecimal digits per byte, "
"with ASCII whitespace being ignored."
msgstr ""

#: ../../library/stdtypes.rst:2461
msgid ""
":meth:`bytes.fromhex` now skips all ASCII whitespace in the string, not just"
" spaces."
msgstr ""

#: ../../library/stdtypes.rst:2465
msgid ""
"A reverse conversion function exists to transform a bytes object into its "
"hexadecimal representation."
msgstr ""

#: ../../library/stdtypes.rst:2470 ../../library/stdtypes.rst:2554
msgid ""
"Return a string object containing two hexadecimal digits for each byte in "
"the instance."
msgstr ""

#: ../../library/stdtypes.rst:2476
msgid ""
"If you want to make the hex string easier to read, you can specify a single "
"character separator *sep* parameter to include in the output. By default "
"between each byte.  A second optional *bytes_per_sep* parameter controls the"
" spacing.  Positive values calculate the separator position from the right, "
"negative values from the left."
msgstr ""

#: ../../library/stdtypes.rst:2492
msgid ""
":meth:`bytes.hex` now supports optional *sep* and *bytes_per_sep* parameters"
" to insert separators between bytes in the hex output."
msgstr ""

#: ../../library/stdtypes.rst:2496
msgid ""
"Since bytes objects are sequences of integers (akin to a tuple), for a bytes"
" object *b*, ``b[0]`` will be an integer, while ``b[0:1]`` will be a bytes "
"object of length 1.  (This contrasts with text strings, where both indexing "
"and slicing will produce a string of length 1)"
msgstr ""

#: ../../library/stdtypes.rst:2501
msgid ""
"The representation of bytes objects uses the literal format (``b'...'``) "
"since it is often more useful than e.g. ``bytes([46, 46, 46])``.  You can "
"always convert a bytes object into a list of integers using ``list(b)``."
msgstr ""

#: ../../library/stdtypes.rst:2509
msgid "Bytearray Objects"
msgstr ""

#: ../../library/stdtypes.rst:2513
msgid ""
":class:`bytearray` objects are a mutable counterpart to :class:`bytes` "
"objects."
msgstr ""

#: ../../library/stdtypes.rst:2518
msgid ""
"There is no dedicated literal syntax for bytearray objects, instead they are"
" always created by calling the constructor:"
msgstr ""

#: ../../library/stdtypes.rst:2521
msgid "Creating an empty instance: ``bytearray()``"
msgstr ""

#: ../../library/stdtypes.rst:2522
msgid "Creating a zero-filled instance with a given length: ``bytearray(10)``"
msgstr ""

#: ../../library/stdtypes.rst:2523
msgid "From an iterable of integers: ``bytearray(range(20))``"
msgstr ""

#: ../../library/stdtypes.rst:2524
msgid ""
"Copying existing binary data via the buffer protocol:  ``bytearray(b'Hi!')``"
msgstr ""

#: ../../library/stdtypes.rst:2526
msgid ""
"As bytearray objects are mutable, they support the :ref:`mutable <typesseq-"
"mutable>` sequence operations in addition to the common bytes and bytearray "
"operations described in :ref:`bytes-methods`."
msgstr ""

#: ../../library/stdtypes.rst:2530
msgid "Also see the :ref:`bytearray <func-bytearray>` built-in."
msgstr ""

#: ../../library/stdtypes.rst:2532
msgid ""
"Since 2 hexadecimal digits correspond precisely to a single byte, "
"hexadecimal numbers are a commonly used format for describing binary data. "
"Accordingly, the bytearray type has an additional class method to read data "
"in that format:"
msgstr ""

#: ../../library/stdtypes.rst:2538
msgid ""
"This :class:`bytearray` class method returns bytearray object, decoding the "
"given string object.  The string must contain two hexadecimal digits per "
"byte, with ASCII whitespace being ignored."
msgstr ""

#: ../../library/stdtypes.rst:2545
msgid ""
":meth:`bytearray.fromhex` now skips all ASCII whitespace in the string, not "
"just spaces."
msgstr ""

#: ../../library/stdtypes.rst:2549
msgid ""
"A reverse conversion function exists to transform a bytearray object into "
"its hexadecimal representation."
msgstr ""

#: ../../library/stdtypes.rst:2562
msgid ""
"Similar to :meth:`bytes.hex`, :meth:`bytearray.hex` now supports optional "
"*sep* and *bytes_per_sep* parameters to insert separators between bytes in "
"the hex output."
msgstr ""

#: ../../library/stdtypes.rst:2567
msgid ""
"Since bytearray objects are sequences of integers (akin to a list), for a "
"bytearray object *b*, ``b[0]`` will be an integer, while ``b[0:1]`` will be "
"a bytearray object of length 1.  (This contrasts with text strings, where "
"both indexing and slicing will produce a string of length 1)"
msgstr ""

#: ../../library/stdtypes.rst:2572
msgid ""
"The representation of bytearray objects uses the bytes literal format "
"(``bytearray(b'...')``) since it is often more useful than e.g. "
"``bytearray([46, 46, 46])``.  You can always convert a bytearray object into"
" a list of integers using ``list(b)``."
msgstr ""

#: ../../library/stdtypes.rst:2581
msgid "Bytes and Bytearray Operations"
msgstr ""

#: ../../library/stdtypes.rst:2586
msgid ""
"Both bytes and bytearray objects support the :ref:`common <typesseq-common>`"
" sequence operations. They interoperate not just with operands of the same "
"type, but with any :term:`bytes-like object`. Due to this flexibility, they "
"can be freely mixed in operations without causing errors. However, the "
"return type of the result may depend on the order of operands."
msgstr ""

#: ../../library/stdtypes.rst:2594
msgid ""
"The methods on bytes and bytearray objects don't accept strings as their "
"arguments, just as the methods on strings don't accept bytes as their "
"arguments.  For example, you have to write::"
msgstr ""

#: ../../library/stdtypes.rst:2601
msgid "and::"
msgstr ""

#: ../../library/stdtypes.rst:2606
msgid ""
"Some bytes and bytearray operations assume the use of ASCII compatible "
"binary formats, and hence should be avoided when working with arbitrary "
"binary data. These restrictions are covered below."
msgstr ""

#: ../../library/stdtypes.rst:2611
msgid ""
"Using these ASCII based operations to manipulate binary data that is not "
"stored in an ASCII based format may lead to data corruption."
msgstr ""

#: ../../library/stdtypes.rst:2614
msgid ""
"The following methods on bytes and bytearray objects can be used with "
"arbitrary binary data."
msgstr ""

#: ../../library/stdtypes.rst:2620
msgid ""
"Return the number of non-overlapping occurrences of subsequence *sub* in the"
" range [*start*, *end*].  Optional arguments *start* and *end* are "
"interpreted as in slice notation."
msgstr ""

#: ../../library/stdtypes.rst:2624 ../../library/stdtypes.rst:2722
#: ../../library/stdtypes.rst:2744 ../../library/stdtypes.rst:2810
#: ../../library/stdtypes.rst:2823
msgid ""
"The subsequence to search for may be any :term:`bytes-like object` or an "
"integer in the range 0 to 255."
msgstr ""

#: ../../library/stdtypes.rst:2627 ../../library/stdtypes.rst:2734
#: ../../library/stdtypes.rst:2747 ../../library/stdtypes.rst:2813
#: ../../library/stdtypes.rst:2826
msgid "Also accept an integer in the range 0 to 255 as the subsequence."
msgstr ""

#: ../../library/stdtypes.rst:2634
msgid ""
"If the binary data starts with the *prefix* string, return "
"``bytes[len(prefix):]``. Otherwise, return a copy of the original binary "
"data::"
msgstr ""

#: ../../library/stdtypes.rst:2643
msgid "The *prefix* may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:2647 ../../library/stdtypes.rst:2669
#: ../../library/stdtypes.rst:2798 ../../library/stdtypes.rst:2891
#: ../../library/stdtypes.rst:2905 ../../library/stdtypes.rst:2936
#: ../../library/stdtypes.rst:2950 ../../library/stdtypes.rst:2992
#: ../../library/stdtypes.rst:3062 ../../library/stdtypes.rst:3080
#: ../../library/stdtypes.rst:3108 ../../library/stdtypes.rst:3247
#: ../../library/stdtypes.rst:3302 ../../library/stdtypes.rst:3345
#: ../../library/stdtypes.rst:3366 ../../library/stdtypes.rst:3388
#: ../../library/stdtypes.rst:3590
msgid ""
"The bytearray version of this method does *not* operate in place - it always"
" produces a new object, even if no changes were made."
msgstr ""

#: ../../library/stdtypes.rst:2656
msgid ""
"If the binary data ends with the *suffix* string and that *suffix* is not "
"empty, return ``bytes[:-len(suffix)]``.  Otherwise, return a copy of the "
"original binary data::"
msgstr ""

#: ../../library/stdtypes.rst:2665
msgid "The *suffix* may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:2678
msgid ""
"Return a string decoded from the given bytes.  Default encoding is "
"``'utf-8'``. *errors* may be given to set a different error handling scheme."
"  The default for *errors* is ``'strict'``, meaning that encoding errors "
"raise a :exc:`UnicodeError`.  Other possible values are ``'ignore'``, "
"``'replace'`` and any other name registered via "
":func:`codecs.register_error`, see section :ref:`error-handlers`. For a list"
" of possible encodings, see section :ref:`standard-encodings`."
msgstr ""

#: ../../library/stdtypes.rst:2686
msgid ""
"By default, the *errors* argument is not checked for best performances, but "
"only used at the first decoding error. Enable the :ref:`Python Development "
"Mode <devmode>`, or use a debug build to check *errors*."
msgstr ""

#: ../../library/stdtypes.rst:2692
msgid ""
"Passing the *encoding* argument to :class:`str` allows decoding any "
":term:`bytes-like object` directly, without needing to make a temporary "
"bytes or bytearray object."
msgstr ""

#: ../../library/stdtypes.rst:2696
msgid "Added support for keyword arguments."
msgstr ""

#: ../../library/stdtypes.rst:2706
msgid ""
"Return ``True`` if the binary data ends with the specified *suffix*, "
"otherwise return ``False``.  *suffix* can also be a tuple of suffixes to "
"look for.  With optional *start*, test beginning at that position.  With "
"optional *end*, stop comparing at that position."
msgstr ""

#: ../../library/stdtypes.rst:2711
msgid "The suffix(es) to search for may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:2717
msgid ""
"Return the lowest index in the data where the subsequence *sub* is found, "
"such that *sub* is contained in the slice ``s[start:end]``.  Optional "
"arguments *start* and *end* are interpreted as in slice notation.  Return "
"``-1`` if *sub* is not found."
msgstr ""

#: ../../library/stdtypes.rst:2727
msgid ""
"The :meth:`~bytes.find` method should be used only if you need to know the "
"position of *sub*.  To check if *sub* is a substring or not, use the "
":keyword:`in` operator::"
msgstr ""

#: ../../library/stdtypes.rst:2741
msgid ""
"Like :meth:`~bytes.find`, but raise :exc:`ValueError` when the subsequence "
"is not found."
msgstr ""

#: ../../library/stdtypes.rst:2754
msgid ""
"Return a bytes or bytearray object which is the concatenation of the binary "
"data sequences in *iterable*.  A :exc:`TypeError` will be raised if there "
"are any values in *iterable* that are not :term:`bytes-like objects <bytes-"
"like object>`, including :class:`str` objects.  The separator between "
"elements is the contents of the bytes or bytearray object providing this "
"method."
msgstr ""

#: ../../library/stdtypes.rst:2765
msgid ""
"This static method returns a translation table usable for "
":meth:`bytes.translate` that will map each character in *from* into the "
"character at the same position in *to*; *from* and *to* must both be "
":term:`bytes-like objects <bytes-like object>` and have the same length."
msgstr ""

#: ../../library/stdtypes.rst:2776
msgid ""
"Split the sequence at the first occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself or its "
"bytearray copy, and the part after the separator. If the separator is not "
"found, return a 3-tuple containing a copy of the original sequence, followed"
" by two empty bytes or bytearray objects."
msgstr ""

#: ../../library/stdtypes.rst:2783 ../../library/stdtypes.rst:2840
msgid "The separator to search for may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:2789
msgid ""
"Return a copy of the sequence with all occurrences of subsequence *old* "
"replaced by *new*.  If the optional argument *count* is given, only the "
"first *count* occurrences are replaced."
msgstr ""

#: ../../library/stdtypes.rst:2793
msgid ""
"The subsequence to search for and its replacement may be any :term:`bytes-"
"like object`."
msgstr ""

#: ../../library/stdtypes.rst:2805
msgid ""
"Return the highest index in the sequence where the subsequence *sub* is "
"found, such that *sub* is contained within ``s[start:end]``.  Optional "
"arguments *start* and *end* are interpreted as in slice notation. Return "
"``-1`` on failure."
msgstr ""

#: ../../library/stdtypes.rst:2820
msgid ""
"Like :meth:`~bytes.rfind` but raises :exc:`ValueError` when the subsequence "
"*sub* is not found."
msgstr ""

#: ../../library/stdtypes.rst:2833
msgid ""
"Split the sequence at the last occurrence of *sep*, and return a 3-tuple "
"containing the part before the separator, the separator itself or its "
"bytearray copy, and the part after the separator. If the separator is not "
"found, return a 3-tuple containing two empty bytes or bytearray objects, "
"followed by a copy of the original sequence."
msgstr ""

#: ../../library/stdtypes.rst:2846
msgid ""
"Return ``True`` if the binary data starts with the specified *prefix*, "
"otherwise return ``False``.  *prefix* can also be a tuple of prefixes to "
"look for.  With optional *start*, test beginning at that position.  With "
"optional *end*, stop comparing at that position."
msgstr ""

#: ../../library/stdtypes.rst:2851
msgid "The prefix(es) to search for may be any :term:`bytes-like object`."
msgstr ""

#: ../../library/stdtypes.rst:2857
msgid ""
"Return a copy of the bytes or bytearray object where all bytes occurring in "
"the optional argument *delete* are removed, and the remaining bytes have "
"been mapped through the given translation table, which must be a bytes "
"object of length 256."
msgstr ""

#: ../../library/stdtypes.rst:2862
msgid ""
"You can use the :func:`bytes.maketrans` method to create a translation "
"table."
msgstr ""

#: ../../library/stdtypes.rst:2865
msgid ""
"Set the *table* argument to ``None`` for translations that only delete "
"characters::"
msgstr ""

#: ../../library/stdtypes.rst:2871
msgid "*delete* is now supported as a keyword argument."
msgstr ""

#: ../../library/stdtypes.rst:2875
msgid ""
"The following methods on bytes and bytearray objects have default behaviours"
" that assume the use of ASCII compatible binary formats, but can still be "
"used with arbitrary binary data by passing appropriate arguments. Note that "
"all of the bytearray methods in this section do *not* operate in place, and "
"instead produce new objects."
msgstr ""

#: ../../library/stdtypes.rst:2884
msgid ""
"Return a copy of the object centered in a sequence of length *width*. "
"Padding is done using the specified *fillbyte* (default is an ASCII space). "
"For :class:`bytes` objects, the original sequence is returned if *width* is "
"less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:2898
msgid ""
"Return a copy of the object left justified in a sequence of length *width*. "
"Padding is done using the specified *fillbyte* (default is an ASCII space). "
"For :class:`bytes` objects, the original sequence is returned if *width* is "
"less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:2912
msgid ""
"Return a copy of the sequence with specified leading bytes removed.  The "
"*chars* argument is a binary sequence specifying the set of byte values to "
"be removed - the name refers to the fact this method is usually used with "
"ASCII characters.  If omitted or ``None``, the *chars* argument defaults to "
"removing ASCII whitespace.  The *chars* argument is not a prefix; rather, "
"all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:2924
msgid ""
"The binary sequence of byte values to remove may be any :term:`bytes-like "
"object`. See :meth:`~bytes.removeprefix` for a method that will remove a "
"single prefix string rather than all of a set of characters.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:2943
msgid ""
"Return a copy of the object right justified in a sequence of length *width*."
" Padding is done using the specified *fillbyte* (default is an ASCII space)."
" For :class:`bytes` objects, the original sequence is returned if *width* is"
" less than or equal to ``len(s)``."
msgstr ""

#: ../../library/stdtypes.rst:2957
msgid ""
"Split the binary sequence into subsequences of the same type, using *sep* as"
" the delimiter string. If *maxsplit* is given, at most *maxsplit* splits are"
" done, the *rightmost* ones.  If *sep* is not specified or ``None``, any "
"subsequence consisting solely of ASCII whitespace is a separator. Except for"
" splitting from the right, :meth:`rsplit` behaves like :meth:`split` which "
"is described in detail below."
msgstr ""

#: ../../library/stdtypes.rst:2968
msgid ""
"Return a copy of the sequence with specified trailing bytes removed.  The "
"*chars* argument is a binary sequence specifying the set of byte values to "
"be removed - the name refers to the fact this method is usually used with "
"ASCII characters.  If omitted or ``None``, the *chars* argument defaults to "
"removing ASCII whitespace.  The *chars* argument is not a suffix; rather, "
"all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:2980
msgid ""
"The binary sequence of byte values to remove may be any :term:`bytes-like "
"object`. See :meth:`~bytes.removesuffix` for a method that will remove a "
"single suffix string rather than all of a set of characters.  For example::"
msgstr ""

#: ../../library/stdtypes.rst:2999
msgid ""
"Split the binary sequence into subsequences of the same type, using *sep* as"
" the delimiter string. If *maxsplit* is given and non-negative, at most "
"*maxsplit* splits are done (thus, the list will have at most ``maxsplit+1`` "
"elements).  If *maxsplit* is not specified or is ``-1``, then there is no "
"limit on the number of splits (all possible splits are made)."
msgstr ""

#: ../../library/stdtypes.rst:3005
msgid ""
"If *sep* is given, consecutive delimiters are not grouped together and are "
"deemed to delimit empty subsequences (for example, ``b'1,,2'.split(b',')`` "
"returns ``[b'1', b'', b'2']``).  The *sep* argument may consist of a "
"multibyte sequence (for example, ``b'1<>2<>3'.split(b'<>')`` returns "
"``[b'1', b'2', b'3']``). Splitting an empty sequence with a specified "
"separator returns ``[b'']`` or ``[bytearray(b'')]`` depending on the type of"
" object being split.  The *sep* argument may be any :term:`bytes-like "
"object`."
msgstr ""

#: ../../library/stdtypes.rst:3023
msgid ""
"If *sep* is not specified or is ``None``, a different splitting algorithm is"
" applied: runs of consecutive ASCII whitespace are regarded as a single "
"separator, and the result will contain no empty strings at the start or end "
"if the sequence has leading or trailing whitespace.  Consequently, splitting"
" an empty sequence or a sequence consisting solely of ASCII whitespace "
"without a specified separator returns ``[]``."
msgstr ""

#: ../../library/stdtypes.rst:3044
msgid ""
"Return a copy of the sequence with specified leading and trailing bytes "
"removed. The *chars* argument is a binary sequence specifying the set of "
"byte values to be removed - the name refers to the fact this method is "
"usually used with ASCII characters.  If omitted or ``None``, the *chars* "
"argument defaults to removing ASCII whitespace. The *chars* argument is not "
"a prefix or suffix; rather, all combinations of its values are stripped::"
msgstr ""

#: ../../library/stdtypes.rst:3057
msgid ""
"The binary sequence of byte values to remove may be any :term:`bytes-like "
"object`."
msgstr ""

#: ../../library/stdtypes.rst:3066
msgid ""
"The following methods on bytes and bytearray objects assume the use of ASCII"
" compatible binary formats and should not be applied to arbitrary binary "
"data. Note that all of the bytearray methods in this section do *not* "
"operate in place, and instead produce new objects."
msgstr ""

#: ../../library/stdtypes.rst:3074
msgid ""
"Return a copy of the sequence with each byte interpreted as an ASCII "
"character, and the first byte capitalized and the rest lowercased. Non-ASCII"
" byte values are passed through unchanged."
msgstr ""

#: ../../library/stdtypes.rst:3087
msgid ""
"Return a copy of the sequence where all ASCII tab characters are replaced by"
" one or more ASCII spaces, depending on the current column and the given tab"
" size.  Tab positions occur every *tabsize* bytes (default is 8, giving tab "
"positions at columns 0, 8, 16 and so on).  To expand the sequence, the "
"current column is set to zero and the sequence is examined byte by byte.  If"
" the byte is an ASCII tab character (``b'\\t'``), one or more space "
"characters are inserted in the result until the current column is equal to "
"the next tab position. (The tab character itself is not copied.)  If the "
"current byte is an ASCII newline (``b'\\n'``) or carriage return "
"(``b'\\r'``), it is copied and the current column is reset to zero.  Any "
"other byte value is copied unchanged and the current column is incremented "
"by one regardless of how the byte value is represented when printed::"
msgstr ""

#: ../../library/stdtypes.rst:3115
msgid ""
"Return ``True`` if all bytes in the sequence are alphabetical ASCII "
"characters or ASCII decimal digits and the sequence is not empty, ``False`` "
"otherwise. Alphabetic ASCII characters are those byte values in the sequence"
" ``b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'``. ASCII decimal "
"digits are those byte values in the sequence ``b'0123456789'``."
msgstr ""

#: ../../library/stdtypes.rst:3132
msgid ""
"Return ``True`` if all bytes in the sequence are alphabetic ASCII characters"
" and the sequence is not empty, ``False`` otherwise.  Alphabetic ASCII "
"characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'``."
msgstr ""

#: ../../library/stdtypes.rst:3148
msgid ""
"Return ``True`` if the sequence is empty or all bytes in the sequence are "
"ASCII, ``False`` otherwise. ASCII bytes are in the range 0-0x7F."
msgstr ""

#: ../../library/stdtypes.rst:3158
msgid ""
"Return ``True`` if all bytes in the sequence are ASCII decimal digits and "
"the sequence is not empty, ``False`` otherwise. ASCII decimal digits are "
"those byte values in the sequence ``b'0123456789'``."
msgstr ""

#: ../../library/stdtypes.rst:3173
msgid ""
"Return ``True`` if there is at least one lowercase ASCII character in the "
"sequence and no uppercase ASCII characters, ``False`` otherwise."
msgstr ""

#: ../../library/stdtypes.rst:3183 ../../library/stdtypes.rst:3225
#: ../../library/stdtypes.rst:3241 ../../library/stdtypes.rst:3291
#: ../../library/stdtypes.rst:3360
msgid ""
"Lowercase ASCII characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyz'``. Uppercase ASCII characters are those byte"
" values in the sequence ``b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``."
msgstr ""

#: ../../library/stdtypes.rst:3191
msgid ""
"Return ``True`` if all bytes in the sequence are ASCII whitespace and the "
"sequence is not empty, ``False`` otherwise.  ASCII whitespace characters are"
" those byte values in the sequence ``b' \\t\\n\\r\\x0b\\f'`` (space, tab, "
"newline, carriage return, vertical tab, form feed)."
msgstr ""

#: ../../library/stdtypes.rst:3200
msgid ""
"Return ``True`` if the sequence is ASCII titlecase and the sequence is not "
"empty, ``False`` otherwise. See :meth:`bytes.title` for more details on the "
"definition of \"titlecase\"."
msgstr ""

#: ../../library/stdtypes.rst:3215
msgid ""
"Return ``True`` if there is at least one uppercase alphabetic ASCII "
"character in the sequence and no lowercase ASCII characters, ``False`` "
"otherwise."
msgstr ""

#: ../../library/stdtypes.rst:3233
msgid ""
"Return a copy of the sequence with all the uppercase ASCII characters "
"converted to their corresponding lowercase counterpart."
msgstr ""

#: ../../library/stdtypes.rst:3258
msgid ""
"Return a list of the lines in the binary sequence, breaking at ASCII line "
"boundaries. This method uses the :term:`universal newlines` approach to "
"splitting lines. Line breaks are not included in the resulting list unless "
"*keepends* is given and true."
msgstr ""

#: ../../library/stdtypes.rst:3270
msgid ""
"Unlike :meth:`~bytes.split` when a delimiter string *sep* is given, this "
"method returns an empty list for the empty string, and a terminal line break"
" does not result in an extra line::"
msgstr ""

#: ../../library/stdtypes.rst:3283
msgid ""
"Return a copy of the sequence with all the lowercase ASCII characters "
"converted to their corresponding uppercase counterpart and vice-versa."
msgstr ""

#: ../../library/stdtypes.rst:3295
msgid ""
"Unlike :func:`str.swapcase()`, it is always the case that "
"``bin.swapcase().swapcase() == bin`` for the binary versions. Case "
"conversions are symmetrical in ASCII, even though that is not generally true"
" for arbitrary Unicode code points."
msgstr ""

#: ../../library/stdtypes.rst:3309
msgid ""
"Return a titlecased version of the binary sequence where words start with an"
" uppercase ASCII character and the remaining characters are lowercase. "
"Uncased byte values are left unmodified."
msgstr ""

#: ../../library/stdtypes.rst:3318
msgid ""
"Lowercase ASCII characters are those byte values in the sequence "
"``b'abcdefghijklmnopqrstuvwxyz'``. Uppercase ASCII characters are those byte"
" values in the sequence ``b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``. All other byte "
"values are uncased."
msgstr ""

#: ../../library/stdtypes.rst:3331
msgid ""
"A workaround for apostrophes can be constructed using regular expressions::"
msgstr ""

#: ../../library/stdtypes.rst:3352
msgid ""
"Return a copy of the sequence with all the lowercase ASCII characters "
"converted to their corresponding uppercase counterpart."
msgstr ""

#: ../../library/stdtypes.rst:3373
msgid ""
"Return a copy of the sequence left filled with ASCII ``b'0'`` digits to make"
" a sequence of length *width*. A leading sign prefix (``b'+'``/ ``b'-'``) is"
" handled by inserting the padding *after* the sign character rather than "
"before. For :class:`bytes` objects, the original sequence is returned if "
"*width* is less than or equal to ``len(seq)``."
msgstr ""

#: ../../library/stdtypes.rst:3395
msgid "``printf``-style Bytes Formatting"
msgstr ""

#: ../../library/stdtypes.rst:3412
msgid ""
"The formatting operations described here exhibit a variety of quirks that "
"lead to a number of common errors (such as failing to display tuples and "
"dictionaries correctly).  If the value being printed may be a tuple or "
"dictionary, wrap it in a tuple."
msgstr ""

#: ../../library/stdtypes.rst:3417
msgid ""
"Bytes objects (``bytes``/``bytearray``) have one unique built-in operation: "
"the ``%`` operator (modulo). This is also known as the bytes *formatting* or"
" *interpolation* operator. Given ``format % values`` (where *format* is a "
"bytes object), ``%`` conversion specifications in *format* are replaced with"
" zero or more elements of *values*. The effect is similar to using the "
":c:func:`sprintf` in the C language."
msgstr ""

#: ../../library/stdtypes.rst:3424
msgid ""
"If *format* requires a single argument, *values* may be a single non-tuple "
"object. [5]_  Otherwise, *values* must be a tuple with exactly the number of"
" items specified by the format bytes object, or a single mapping object (for"
" example, a dictionary)."
msgstr ""

#: ../../library/stdtypes.rst:3458
msgid ""
"When the right argument is a dictionary (or other mapping type), then the "
"formats in the bytes object *must* include a parenthesised mapping key into "
"that dictionary inserted immediately after the ``'%'`` character. The "
"mapping key selects the value to be formatted from the mapping.  For "
"example:"
msgstr ""

#: ../../library/stdtypes.rst:3532
msgid "Single byte (accepts integer or single byte objects)."
msgstr ""

#: ../../library/stdtypes.rst:3535
msgid "``'b'``"
msgstr ""

#: ../../library/stdtypes.rst:3535
msgid ""
"Bytes (any object that follows the :ref:`buffer protocol <bufferobjects>` or"
" has :meth:`__bytes__`)."
msgstr ""

#: ../../library/stdtypes.rst:3539
msgid ""
"``'s'`` is an alias for ``'b'`` and should only be used for Python2/3 code "
"bases."
msgstr ""

#: ../../library/stdtypes.rst:3542
msgid ""
"Bytes (converts any Python object using ``repr(obj).encode('ascii', "
"'backslashreplace')``)."
msgstr ""

#: ../../library/stdtypes.rst:3545
msgid ""
"``'r'`` is an alias for ``'a'`` and should only be used for Python2/3 code "
"bases."
msgstr ""

#: ../../library/stdtypes.rst:3545
msgid "\\(7)"
msgstr ""

#: ../../library/stdtypes.rst:3580
msgid ""
"``b'%s'`` is deprecated, but will not be removed during the 3.x series."
msgstr ""

#: ../../library/stdtypes.rst:3583
msgid ""
"``b'%r'`` is deprecated, but will not be removed during the 3.x series."
msgstr ""

#: ../../library/stdtypes.rst:3595
msgid ":pep:`461` - Adding % formatting to bytes and bytearray"
msgstr ""

#: ../../library/stdtypes.rst:3602
msgid "Memory Views"
msgstr ""

#: ../../library/stdtypes.rst:3604
msgid ""
":class:`memoryview` objects allow Python code to access the internal data of"
" an object that supports the :ref:`buffer protocol <bufferobjects>` without "
"copying."
msgstr ""

#: ../../library/stdtypes.rst:3610
msgid ""
"Create a :class:`memoryview` that references *object*.  *object* must "
"support the buffer protocol.  Built-in objects that support the buffer "
"protocol include :class:`bytes` and :class:`bytearray`."
msgstr ""

#: ../../library/stdtypes.rst:3614
msgid ""
"A :class:`memoryview` has the notion of an *element*, which is the atomic "
"memory unit handled by the originating *object*.  For many simple types such"
" as :class:`bytes` and :class:`bytearray`, an element is a single byte, but "
"other types such as :class:`array.array` may have bigger elements."
msgstr ""

#: ../../library/stdtypes.rst:3619
msgid ""
"``len(view)`` is equal to the length of :class:`~memoryview.tolist`. If "
"``view.ndim = 0``, the length is 1. If ``view.ndim = 1``, the length is "
"equal to the number of elements in the view. For higher dimensions, the "
"length is equal to the length of the nested list representation of the view."
" The :class:`~memoryview.itemsize` attribute will give you the number of "
"bytes in a single element."
msgstr ""

#: ../../library/stdtypes.rst:3626
msgid ""
"A :class:`memoryview` supports slicing and indexing to expose its data. One-"
"dimensional slicing will result in a subview::"
msgstr ""

#: ../../library/stdtypes.rst:3639
msgid ""
"If :class:`~memoryview.format` is one of the native format specifiers from "
"the :mod:`struct` module, indexing with an integer or a tuple of integers is"
" also supported and returns a single *element* with the correct type.  One-"
"dimensional memoryviews can be indexed with an integer or a one-integer "
"tuple.  Multi-dimensional memoryviews can be indexed with tuples of exactly "
"*ndim* integers where *ndim* is the number of dimensions.  Zero-dimensional "
"memoryviews can be indexed with the empty tuple."
msgstr ""

#: ../../library/stdtypes.rst:3648
msgid "Here is an example with a non-byte format::"
msgstr ""

#: ../../library/stdtypes.rst:3660
msgid ""
"If the underlying object is writable, the memoryview supports one-"
"dimensional slice assignment. Resizing is not allowed::"
msgstr ""

#: ../../library/stdtypes.rst:3681
msgid ""
"One-dimensional memoryviews of hashable (read-only) types with formats 'B', "
"'b' or 'c' are also hashable. The hash is defined as ``hash(m) == "
"hash(m.tobytes())``::"
msgstr ""

#: ../../library/stdtypes.rst:3693
msgid ""
"One-dimensional memoryviews can now be sliced. One-dimensional memoryviews "
"with formats 'B', 'b' or 'c' are now hashable."
msgstr ""

#: ../../library/stdtypes.rst:3697
msgid ""
"memoryview is now registered automatically with "
":class:`collections.abc.Sequence`"
msgstr ""

#: ../../library/stdtypes.rst:3701
msgid "memoryviews can now be indexed with tuple of integers."
msgstr ""

#: ../../library/stdtypes.rst:3704
msgid ":class:`memoryview` has several methods:"
msgstr ""

#: ../../library/stdtypes.rst:3708
msgid ""
"A memoryview and a :pep:`3118` exporter are equal if their shapes are "
"equivalent and if all corresponding values are equal when the operands' "
"respective format codes are interpreted using :mod:`struct` syntax."
msgstr ""

#: ../../library/stdtypes.rst:3712
msgid ""
"For the subset of :mod:`struct` format strings currently supported by "
":meth:`tolist`, ``v`` and ``w`` are equal if ``v.tolist() == w.tolist()``::"
msgstr ""

#: ../../library/stdtypes.rst:3731
msgid ""
"If either format string is not supported by the :mod:`struct` module, then "
"the objects will always compare as unequal (even if the format strings and "
"buffer contents are identical)::"
msgstr ""

#: ../../library/stdtypes.rst:3747
msgid ""
"Note that, as with floating point numbers, ``v is w`` does *not* imply ``v "
"== w`` for memoryview objects."
msgstr ""

#: ../../library/stdtypes.rst:3750
msgid ""
"Previous versions compared the raw memory disregarding the item format and "
"the logical array structure."
msgstr ""

#: ../../library/stdtypes.rst:3756
msgid ""
"Return the data in the buffer as a bytestring.  This is equivalent to "
"calling the :class:`bytes` constructor on the memoryview. ::"
msgstr ""

#: ../../library/stdtypes.rst:3765
msgid ""
"For non-contiguous arrays the result is equal to the flattened list "
"representation with all elements converted to bytes. :meth:`tobytes` "
"supports all format strings, including those that are not in :mod:`struct` "
"module syntax."
msgstr ""

#: ../../library/stdtypes.rst:3770
msgid ""
"*order* can be {'C', 'F', 'A'}.  When *order* is 'C' or 'F', the data of the"
" original array is converted to C or Fortran order. For contiguous views, "
"'A' returns an exact copy of the physical memory. In particular, in-memory "
"Fortran order is preserved. For non-contiguous views, the data is converted "
"to C first. *order=None* is the same as *order='C'*."
msgstr ""

#: ../../library/stdtypes.rst:3779
msgid ""
"Return a string object containing two hexadecimal digits for each byte in "
"the buffer. ::"
msgstr ""

#: ../../library/stdtypes.rst:3788
msgid ""
"Similar to :meth:`bytes.hex`, :meth:`memoryview.hex` now supports optional "
"*sep* and *bytes_per_sep* parameters to insert separators between bytes in "
"the hex output."
msgstr ""

#: ../../library/stdtypes.rst:3795
msgid "Return the data in the buffer as a list of elements. ::"
msgstr ""

#: ../../library/stdtypes.rst:3805
msgid ""
":meth:`tolist` now supports all single character native formats in "
":mod:`struct` module syntax as well as multi-dimensional representations."
msgstr ""

#: ../../library/stdtypes.rst:3812
msgid ""
"Return a readonly version of the memoryview object.  The original memoryview"
" object is unchanged. ::"
msgstr ""

#: ../../library/stdtypes.rst:3831
msgid ""
"Release the underlying buffer exposed by the memoryview object.  Many "
"objects take special actions when a view is held on them (for example, a "
":class:`bytearray` would temporarily forbid resizing); therefore, calling "
"release() is handy to remove these restrictions (and free any dangling "
"resources) as soon as possible."
msgstr ""

#: ../../library/stdtypes.rst:3837
msgid ""
"After this method has been called, any further operation on the view raises "
"a :class:`ValueError` (except :meth:`release()` itself which can be called "
"multiple times)::"
msgstr ""

#: ../../library/stdtypes.rst:3848
msgid ""
"The context management protocol can be used for a similar effect, using the "
"``with`` statement::"
msgstr ""

#: ../../library/stdtypes.rst:3864
msgid ""
"Cast a memoryview to a new format or shape. *shape* defaults to "
"``[byte_length//new_itemsize]``, which means that the result view will be "
"one-dimensional. The return value is a new memoryview, but the buffer itself"
" is not copied. Supported casts are 1D -> C-:term:`contiguous` and "
"C-contiguous -> 1D."
msgstr ""

#: ../../library/stdtypes.rst:3870
msgid ""
"The destination format is restricted to a single element native format in "
":mod:`struct` syntax. One of the formats must be a byte format ('B', 'b' or "
"'c'). The byte length of the result must be the same as the original length."
msgstr ""

#: ../../library/stdtypes.rst:3875
msgid "Cast 1D/long to 1D/unsigned bytes::"
msgstr ""

#: ../../library/stdtypes.rst:3898
msgid "Cast 1D/unsigned bytes to 1D/char::"
msgstr ""

#: ../../library/stdtypes.rst:3911
msgid "Cast 1D/bytes to 3D/ints to 1D/signed char::"
msgstr ""

#: ../../library/stdtypes.rst:3937
msgid "Cast 1D/unsigned long to 2D/unsigned long::"
msgstr ""

#: ../../library/stdtypes.rst:3951
msgid "The source format is no longer restricted when casting to a byte view."
msgstr ""

#: ../../library/stdtypes.rst:3954
msgid "There are also several readonly attributes available:"
msgstr ""

#: ../../library/stdtypes.rst:3958
msgid "The underlying object of the memoryview::"
msgstr ""

#: ../../library/stdtypes.rst:3969
msgid ""
"``nbytes == product(shape) * itemsize == len(m.tobytes())``. This is the "
"amount of space in bytes that the array would use in a contiguous "
"representation. It is not necessarily equal to ``len(m)``::"
msgstr ""

#: ../../library/stdtypes.rst:3988
msgid "Multi-dimensional arrays::"
msgstr ""

#: ../../library/stdtypes.rst:4005
msgid "A bool indicating whether the memory is read only."
msgstr ""

#: ../../library/stdtypes.rst:4009
msgid ""
"A string containing the format (in :mod:`struct` module style) for each "
"element in the view. A memoryview can be created from exporters with "
"arbitrary format strings, but some methods (e.g. :meth:`tolist`) are "
"restricted to native single element formats."
msgstr ""

#: ../../library/stdtypes.rst:4014
msgid ""
"format ``'B'`` is now handled according to the struct module syntax. This "
"means that ``memoryview(b'abc')[0] == b'abc'[0] == 97``."
msgstr ""

#: ../../library/stdtypes.rst:4020
msgid "The size in bytes of each element of the memoryview::"
msgstr ""

#: ../../library/stdtypes.rst:4033
msgid ""
"An integer indicating how many dimensions of a multi-dimensional array the "
"memory represents."
msgstr ""

#: ../../library/stdtypes.rst:4038
msgid ""
"A tuple of integers the length of :attr:`ndim` giving the shape of the "
"memory as an N-dimensional array."
msgstr ""

#: ../../library/stdtypes.rst:4041 ../../library/stdtypes.rst:4049
msgid "An empty tuple instead of ``None`` when ndim = 0."
msgstr ""

#: ../../library/stdtypes.rst:4046
msgid ""
"A tuple of integers the length of :attr:`ndim` giving the size in bytes to "
"access each element for each dimension of the array."
msgstr ""

#: ../../library/stdtypes.rst:4054
msgid "Used internally for PIL-style arrays. The value is informational only."
msgstr ""

#: ../../library/stdtypes.rst:4058
msgid "A bool indicating whether the memory is C-:term:`contiguous`."
msgstr ""

#: ../../library/stdtypes.rst:4064
msgid "A bool indicating whether the memory is Fortran :term:`contiguous`."
msgstr ""

#: ../../library/stdtypes.rst:4070
msgid "A bool indicating whether the memory is :term:`contiguous`."
msgstr ""

#: ../../library/stdtypes.rst:4078
msgid "Set Types --- :class:`set`, :class:`frozenset`"
msgstr ""

#: ../../library/stdtypes.rst:4082
msgid ""
"A :dfn:`set` object is an unordered collection of distinct :term:`hashable` "
"objects. Common uses include membership testing, removing duplicates from a "
"sequence, and computing mathematical operations such as intersection, union,"
" difference, and symmetric difference. (For other containers see the built-"
"in :class:`dict`, :class:`list`, and :class:`tuple` classes, and the "
":mod:`collections` module.)"
msgstr ""

#: ../../library/stdtypes.rst:4089
msgid ""
"Like other collections, sets support ``x in set``, ``len(set)``, and ``for x"
" in set``.  Being an unordered collection, sets do not record element "
"position or order of insertion.  Accordingly, sets do not support indexing, "
"slicing, or other sequence-like behavior."
msgstr ""

#: ../../library/stdtypes.rst:4094
msgid ""
"There are currently two built-in set types, :class:`set` and "
":class:`frozenset`. The :class:`set` type is mutable --- the contents can be"
" changed using methods like :meth:`~set.add` and :meth:`~set.remove`.  Since"
" it is mutable, it has no hash value and cannot be used as either a "
"dictionary key or as an element of another set.  The :class:`frozenset` type"
" is immutable and :term:`hashable` --- its contents cannot be altered after "
"it is created; it can therefore be used as a dictionary key or as an element"
" of another set."
msgstr ""

#: ../../library/stdtypes.rst:4102
msgid ""
"Non-empty sets (not frozensets) can be created by placing a comma-separated "
"list of elements within braces, for example: ``{'jack', 'sjoerd'}``, in "
"addition to the :class:`set` constructor."
msgstr ""

#: ../../library/stdtypes.rst:4106
msgid "The constructors for both classes work the same:"
msgstr ""

#: ../../library/stdtypes.rst:4111
msgid ""
"Return a new set or frozenset object whose elements are taken from "
"*iterable*.  The elements of a set must be :term:`hashable`.  To represent "
"sets of sets, the inner sets must be :class:`frozenset` objects.  If "
"*iterable* is not specified, a new empty set is returned."
msgstr ""

#: ../../library/stdtypes.rst:4117
msgid "Sets can be created by several means:"
msgstr ""

#: ../../library/stdtypes.rst:4119
msgid ""
"Use a comma-separated list of elements within braces: ``{'jack', 'sjoerd'}``"
msgstr ""

#: ../../library/stdtypes.rst:4120
msgid ""
"Use a set comprehension: ``{c for c in 'abracadabra' if c not in 'abc'}``"
msgstr ""

#: ../../library/stdtypes.rst:4121
msgid ""
"Use the type constructor: ``set()``, ``set('foobar')``, ``set(['a', 'b', "
"'foo'])``"
msgstr ""

#: ../../library/stdtypes.rst:4123
msgid ""
"Instances of :class:`set` and :class:`frozenset` provide the following "
"operations:"
msgstr ""

#: ../../library/stdtypes.rst:4128
msgid "Return the number of elements in set *s* (cardinality of *s*)."
msgstr ""

#: ../../library/stdtypes.rst:4132
msgid "Test *x* for membership in *s*."
msgstr ""

#: ../../library/stdtypes.rst:4136
msgid "Test *x* for non-membership in *s*."
msgstr ""

#: ../../library/stdtypes.rst:4140
msgid ""
"Return ``True`` if the set has no elements in common with *other*.  Sets are"
" disjoint if and only if their intersection is the empty set."
msgstr ""

#: ../../library/stdtypes.rst:4146
msgid "Test whether every element in the set is in *other*."
msgstr ""

#: ../../library/stdtypes.rst:4150
msgid ""
"Test whether the set is a proper subset of *other*, that is, ``set <= other "
"and set != other``."
msgstr ""

#: ../../library/stdtypes.rst:4156
msgid "Test whether every element in *other* is in the set."
msgstr ""

#: ../../library/stdtypes.rst:4160
msgid ""
"Test whether the set is a proper superset of *other*, that is, ``set >= "
"other and set != other``."
msgstr ""

#: ../../library/stdtypes.rst:4166
msgid "Return a new set with elements from the set and all others."
msgstr ""

#: ../../library/stdtypes.rst:4171
msgid "Return a new set with elements common to the set and all others."
msgstr ""

#: ../../library/stdtypes.rst:4176
msgid "Return a new set with elements in the set that are not in the others."
msgstr ""

#: ../../library/stdtypes.rst:4181
msgid ""
"Return a new set with elements in either the set or *other* but not both."
msgstr ""

#: ../../library/stdtypes.rst:4185
msgid "Return a shallow copy of the set."
msgstr ""

#: ../../library/stdtypes.rst:4188
msgid ""
"Note, the non-operator versions of :meth:`union`, :meth:`intersection`, "
":meth:`difference`, and :meth:`symmetric_difference`, :meth:`issubset`, and "
":meth:`issuperset` methods will accept any iterable as an argument.  In "
"contrast, their operator based counterparts require their arguments to be "
"sets.  This precludes error-prone constructions like ``set('abc') & 'cbs'`` "
"in favor of the more readable ``set('abc').intersection('cbs')``."
msgstr ""

#: ../../library/stdtypes.rst:4195
msgid ""
"Both :class:`set` and :class:`frozenset` support set to set comparisons. Two"
" sets are equal if and only if every element of each set is contained in the"
" other (each is a subset of the other). A set is less than another set if "
"and only if the first set is a proper subset of the second set (is a subset,"
" but is not equal). A set is greater than another set if and only if the "
"first set is a proper superset of the second set (is a superset, but is not "
"equal)."
msgstr ""

#: ../../library/stdtypes.rst:4202
msgid ""
"Instances of :class:`set` are compared to instances of :class:`frozenset` "
"based on their members.  For example, ``set('abc') == frozenset('abc')`` "
"returns ``True`` and so does ``set('abc') in set([frozenset('abc')])``."
msgstr ""

#: ../../library/stdtypes.rst:4206
msgid ""
"The subset and equality comparisons do not generalize to a total ordering "
"function.  For example, any two nonempty disjoint sets are not equal and are"
" not subsets of each other, so *all* of the following return ``False``: "
"``a<b``, ``a==b``, or ``a>b``."
msgstr ""

#: ../../library/stdtypes.rst:4211
msgid ""
"Since sets only define partial ordering (subset relationships), the output "
"of the :meth:`list.sort` method is undefined for lists of sets."
msgstr ""

#: ../../library/stdtypes.rst:4214
msgid "Set elements, like dictionary keys, must be :term:`hashable`."
msgstr ""

#: ../../library/stdtypes.rst:4216
msgid ""
"Binary operations that mix :class:`set` instances with :class:`frozenset` "
"return the type of the first operand.  For example: ``frozenset('ab') | "
"set('bc')`` returns an instance of :class:`frozenset`."
msgstr ""

#: ../../library/stdtypes.rst:4220
msgid ""
"The following table lists operations available for :class:`set` that do not "
"apply to immutable instances of :class:`frozenset`:"
msgstr ""

#: ../../library/stdtypes.rst:4226
msgid "Update the set, adding elements from all others."
msgstr ""

#: ../../library/stdtypes.rst:4231
msgid "Update the set, keeping only elements found in it and all others."
msgstr ""

#: ../../library/stdtypes.rst:4236
msgid "Update the set, removing elements found in others."
msgstr ""

#: ../../library/stdtypes.rst:4241
msgid ""
"Update the set, keeping only elements found in either set, but not in both."
msgstr ""

#: ../../library/stdtypes.rst:4245
msgid "Add element *elem* to the set."
msgstr ""

#: ../../library/stdtypes.rst:4249
msgid ""
"Remove element *elem* from the set.  Raises :exc:`KeyError` if *elem* is not"
" contained in the set."
msgstr ""

#: ../../library/stdtypes.rst:4254
msgid "Remove element *elem* from the set if it is present."
msgstr ""

#: ../../library/stdtypes.rst:4258
msgid ""
"Remove and return an arbitrary element from the set.  Raises :exc:`KeyError`"
" if the set is empty."
msgstr ""

#: ../../library/stdtypes.rst:4263
msgid "Remove all elements from the set."
msgstr ""

#: ../../library/stdtypes.rst:4266
msgid ""
"Note, the non-operator versions of the :meth:`update`, "
":meth:`intersection_update`, :meth:`difference_update`, and "
":meth:`symmetric_difference_update` methods will accept any iterable as an "
"argument."
msgstr ""

#: ../../library/stdtypes.rst:4271
msgid ""
"Note, the *elem* argument to the :meth:`__contains__`, :meth:`remove`, and "
":meth:`discard` methods may be a set.  To support searching for an "
"equivalent frozenset, a temporary one is created from *elem*."
msgstr ""

#: ../../library/stdtypes.rst:4279
msgid "Mapping Types --- :class:`dict`"
msgstr ""

#: ../../library/stdtypes.rst:4289
msgid ""
"A :term:`mapping` object maps :term:`hashable` values to arbitrary objects. "
"Mappings are mutable objects.  There is currently only one standard mapping "
"type, the :dfn:`dictionary`.  (For other containers see the built-in "
":class:`list`, :class:`set`, and :class:`tuple` classes, and the "
":mod:`collections` module.)"
msgstr ""

#: ../../library/stdtypes.rst:4295
msgid ""
"A dictionary's keys are *almost* arbitrary values.  Values that are not "
":term:`hashable`, that is, values containing lists, dictionaries or other "
"mutable types (that are compared by value rather than by object identity) "
"may not be used as keys.  Numeric types used for keys obey the normal rules "
"for numeric comparison: if two numbers compare equal (such as ``1`` and "
"``1.0``) then they can be used interchangeably to index the same dictionary "
"entry.  (Note however, that since computers store floating-point numbers as "
"approximations it is usually unwise to use them as dictionary keys.)"
msgstr ""

#: ../../library/stdtypes.rst:4308
msgid ""
"Return a new dictionary initialized from an optional positional argument and"
" a possibly empty set of keyword arguments."
msgstr ""

#: ../../library/stdtypes.rst:4311
msgid "Dictionaries can be created by several means:"
msgstr ""

#: ../../library/stdtypes.rst:4313
msgid ""
"Use a comma-separated list of ``key: value`` pairs within braces: ``{'jack':"
" 4098, 'sjoerd': 4127}`` or ``{4098: 'jack', 4127: 'sjoerd'}``"
msgstr ""

#: ../../library/stdtypes.rst:4315
msgid "Use a dict comprehension: ``{}``, ``{x: x ** 2 for x in range(10)}``"
msgstr ""

#: ../../library/stdtypes.rst:4316
msgid ""
"Use the type constructor: ``dict()``, ``dict([('foo', 100), ('bar', "
"200)])``, ``dict(foo=100, bar=200)``"
msgstr ""

#: ../../library/stdtypes.rst:4319
msgid ""
"If no positional argument is given, an empty dictionary is created. If a "
"positional argument is given and it is a mapping object, a dictionary is "
"created with the same key-value pairs as the mapping object.  Otherwise, the"
" positional argument must be an :term:`iterable` object.  Each item in the "
"iterable must itself be an iterable with exactly two objects.  The first "
"object of each item becomes a key in the new dictionary, and the second "
"object the corresponding value.  If a key occurs more than once, the last "
"value for that key becomes the corresponding value in the new dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4329
msgid ""
"If keyword arguments are given, the keyword arguments and their values are "
"added to the dictionary created from the positional argument.  If a key "
"being added is already present, the value from the keyword argument replaces"
" the value from the positional argument."
msgstr ""

#: ../../library/stdtypes.rst:4334
msgid ""
"To illustrate, the following examples all return a dictionary equal to "
"``{\"one\": 1, \"two\": 2, \"three\": 3}``::"
msgstr ""

#: ../../library/stdtypes.rst:4346
msgid ""
"Providing keyword arguments as in the first example only works for keys that"
" are valid Python identifiers.  Otherwise, any valid keys can be used."
msgstr ""

#: ../../library/stdtypes.rst:4350
msgid ""
"These are the operations that dictionaries support (and therefore, custom "
"mapping types should support too):"
msgstr ""

#: ../../library/stdtypes.rst:4355
msgid "Return a list of all the keys used in the dictionary *d*."
msgstr ""

#: ../../library/stdtypes.rst:4359
msgid "Return the number of items in the dictionary *d*."
msgstr ""

#: ../../library/stdtypes.rst:4363
msgid ""
"Return the item of *d* with key *key*.  Raises a :exc:`KeyError` if *key* is"
" not in the map."
msgstr ""

#: ../../library/stdtypes.rst:4368
msgid ""
"If a subclass of dict defines a method :meth:`__missing__` and *key* is not "
"present, the ``d[key]`` operation calls that method with the key *key* as "
"argument.  The ``d[key]`` operation then returns or raises whatever is "
"returned or raised by the ``__missing__(key)`` call. No other operations or "
"methods invoke :meth:`__missing__`. If :meth:`__missing__` is not defined, "
":exc:`KeyError` is raised. :meth:`__missing__` must be a method; it cannot "
"be an instance variable::"
msgstr ""

#: ../../library/stdtypes.rst:4386
msgid ""
"The example above shows part of the implementation of "
":class:`collections.Counter`.  A different ``__missing__`` method is used by"
" :class:`collections.defaultdict`."
msgstr ""

#: ../../library/stdtypes.rst:4392
msgid "Set ``d[key]`` to *value*."
msgstr ""

#: ../../library/stdtypes.rst:4396
msgid ""
"Remove ``d[key]`` from *d*.  Raises a :exc:`KeyError` if *key* is not in the"
" map."
msgstr ""

#: ../../library/stdtypes.rst:4401
msgid "Return ``True`` if *d* has a key *key*, else ``False``."
msgstr ""

#: ../../library/stdtypes.rst:4405
msgid "Equivalent to ``not key in d``."
msgstr ""

#: ../../library/stdtypes.rst:4409
msgid ""
"Return an iterator over the keys of the dictionary.  This is a shortcut for "
"``iter(d.keys())``."
msgstr ""

#: ../../library/stdtypes.rst:4414
msgid "Remove all items from the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4418
msgid "Return a shallow copy of the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4422
msgid ""
"Create a new dictionary with keys from *iterable* and values set to *value*."
msgstr ""

#: ../../library/stdtypes.rst:4424
msgid ""
":meth:`fromkeys` is a class method that returns a new dictionary. *value* "
"defaults to ``None``.  All of the values refer to just a single instance, so"
" it generally doesn't make sense for *value* to be a mutable object such as "
"an empty list.  To get distinct values, use a :ref:`dict comprehension "
"<dict>` instead."
msgstr ""

#: ../../library/stdtypes.rst:4432
msgid ""
"Return the value for *key* if *key* is in the dictionary, else *default*. If"
" *default* is not given, it defaults to ``None``, so that this method never "
"raises a :exc:`KeyError`."
msgstr ""

#: ../../library/stdtypes.rst:4438
msgid ""
"Return a new view of the dictionary's items (``(key, value)`` pairs). See "
"the :ref:`documentation of view objects <dict-views>`."
msgstr ""

#: ../../library/stdtypes.rst:4443
msgid ""
"Return a new view of the dictionary's keys.  See the :ref:`documentation of "
"view objects <dict-views>`."
msgstr ""

#: ../../library/stdtypes.rst:4448
msgid ""
"If *key* is in the dictionary, remove it and return its value, else return "
"*default*.  If *default* is not given and *key* is not in the dictionary, a "
":exc:`KeyError` is raised."
msgstr ""

#: ../../library/stdtypes.rst:4454
msgid ""
"Remove and return a ``(key, value)`` pair from the dictionary. Pairs are "
"returned in :abbr:`LIFO (last-in, first-out)` order."
msgstr ""

#: ../../library/stdtypes.rst:4457
msgid ""
":meth:`popitem` is useful to destructively iterate over a dictionary, as "
"often used in set algorithms.  If the dictionary is empty, calling "
":meth:`popitem` raises a :exc:`KeyError`."
msgstr ""

#: ../../library/stdtypes.rst:4461
msgid ""
"LIFO order is now guaranteed. In prior versions, :meth:`popitem` would "
"return an arbitrary key/value pair."
msgstr ""

#: ../../library/stdtypes.rst:4467
msgid ""
"Return a reverse iterator over the keys of the dictionary. This is a "
"shortcut for ``reversed(d.keys())``."
msgstr ""

#: ../../library/stdtypes.rst:4474
msgid ""
"If *key* is in the dictionary, return its value.  If not, insert *key* with "
"a value of *default* and return *default*.  *default* defaults to ``None``."
msgstr ""

#: ../../library/stdtypes.rst:4480
msgid ""
"Update the dictionary with the key/value pairs from *other*, overwriting "
"existing keys.  Return ``None``."
msgstr ""

#: ../../library/stdtypes.rst:4483
msgid ""
":meth:`update` accepts either another dictionary object or an iterable of "
"key/value pairs (as tuples or other iterables of length two).  If keyword "
"arguments are specified, the dictionary is then updated with those key/value"
" pairs: ``d.update(red=1, blue=2)``."
msgstr ""

#: ../../library/stdtypes.rst:4490
msgid ""
"Return a new view of the dictionary's values.  See the :ref:`documentation "
"of view objects <dict-views>`."
msgstr ""

#: ../../library/stdtypes.rst:4493
msgid ""
"An equality comparison between one ``dict.values()`` view and another will "
"always return ``False``. This also applies when comparing ``dict.values()`` "
"to itself::"
msgstr ""

#: ../../library/stdtypes.rst:4503
msgid ""
"Create a new dictionary with the merged keys and values of *d* and *other*, "
"which must both be dictionaries. The values of *other* take priority when "
"*d* and *other* share keys."
msgstr ""

#: ../../library/stdtypes.rst:4511
msgid ""
"Update the dictionary *d* with keys and values from *other*, which may be "
"either a :term:`mapping` or an :term:`iterable` of key/value pairs. The "
"values of *other* take priority when *d* and *other* share keys."
msgstr ""

#: ../../library/stdtypes.rst:4517
msgid ""
"Dictionaries compare equal if and only if they have the same ``(key, "
"value)`` pairs (regardless of ordering). Order comparisons ('<', '<=', '>=',"
" '>') raise :exc:`TypeError`."
msgstr ""

#: ../../library/stdtypes.rst:4521
msgid ""
"Dictionaries preserve insertion order.  Note that updating a key does not "
"affect the order.  Keys added after deletion are inserted at the end. ::"
msgstr ""

#: ../../library/stdtypes.rst:4539
msgid ""
"Dictionary order is guaranteed to be insertion order.  This behavior was an "
"implementation detail of CPython from 3.6."
msgstr ""

#: ../../library/stdtypes.rst:4543
msgid "Dictionaries and dictionary views are reversible. ::"
msgstr ""

#: ../../library/stdtypes.rst:4555
msgid "Dictionaries are now reversible."
msgstr ""

#: ../../library/stdtypes.rst:4560
msgid ""
":class:`types.MappingProxyType` can be used to create a read-only view of a "
":class:`dict`."
msgstr ""

#: ../../library/stdtypes.rst:4567
msgid "Dictionary view objects"
msgstr ""

#: ../../library/stdtypes.rst:4569
msgid ""
"The objects returned by :meth:`dict.keys`, :meth:`dict.values` and "
":meth:`dict.items` are *view objects*.  They provide a dynamic view on the "
"dictionary's entries, which means that when the dictionary changes, the view"
" reflects these changes."
msgstr ""

#: ../../library/stdtypes.rst:4574
msgid ""
"Dictionary views can be iterated over to yield their respective data, and "
"support membership tests:"
msgstr ""

#: ../../library/stdtypes.rst:4579
msgid "Return the number of entries in the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4583
msgid ""
"Return an iterator over the keys, values or items (represented as tuples of "
"``(key, value)``) in the dictionary."
msgstr ""

#: ../../library/stdtypes.rst:4586
msgid ""
"Keys and values are iterated over in insertion order. This allows the "
"creation of ``(value, key)`` pairs using :func:`zip`: ``pairs = "
"zip(d.values(), d.keys())``.  Another way to create the same list is ``pairs"
" = [(v, k) for (k, v) in d.items()]``."
msgstr ""

#: ../../library/stdtypes.rst:4591
msgid ""
"Iterating views while adding or deleting entries in the dictionary may raise"
" a :exc:`RuntimeError` or fail to iterate over all entries."
msgstr ""

#: ../../library/stdtypes.rst:4594
msgid "Dictionary order is guaranteed to be insertion order."
msgstr ""

#: ../../library/stdtypes.rst:4599
msgid ""
"Return ``True`` if *x* is in the underlying dictionary's keys, values or "
"items (in the latter case, *x* should be a ``(key, value)`` tuple)."
msgstr ""

#: ../../library/stdtypes.rst:4604
msgid ""
"Return a reverse iterator over the keys, values or items of the dictionary. "
"The view will be iterated in reverse order of the insertion."
msgstr ""

#: ../../library/stdtypes.rst:4607
msgid "Dictionary views are now reversible."
msgstr ""

#: ../../library/stdtypes.rst:4611
msgid ""
"Keys views are set-like since their entries are unique and hashable.  If all"
" values are hashable, so that ``(key, value)`` pairs are unique and "
"hashable, then the items view is also set-like.  (Values views are not "
"treated as set-like since the entries are generally not unique.)  For set-"
"like views, all of the operations defined for the abstract base class "
":class:`collections.abc.Set` are available (for example, ``==``, ``<``, or "
"``^``)."
msgstr ""

#: ../../library/stdtypes.rst:4618
msgid "An example of dictionary view usage::"
msgstr ""

#: ../../library/stdtypes.rst:4653
msgid "Context Manager Types"
msgstr ""

#: ../../library/stdtypes.rst:4660
msgid ""
"Python's :keyword:`with` statement supports the concept of a runtime context"
" defined by a context manager.  This is implemented using a pair of methods "
"that allow user-defined classes to define a runtime context that is entered "
"before the statement body is executed and exited when the statement ends:"
msgstr ""

#: ../../library/stdtypes.rst:4668
msgid ""
"Enter the runtime context and return either this object or another object "
"related to the runtime context. The value returned by this method is bound "
"to the identifier in the :keyword:`!as` clause of :keyword:`with` statements"
" using this context manager."
msgstr ""

#: ../../library/stdtypes.rst:4673
msgid ""
"An example of a context manager that returns itself is a :term:`file "
"object`. File objects return themselves from __enter__() to allow "
":func:`open` to be used as the context expression in a :keyword:`with` "
"statement."
msgstr ""

#: ../../library/stdtypes.rst:4677
msgid ""
"An example of a context manager that returns a related object is the one "
"returned by :func:`decimal.localcontext`. These managers set the active "
"decimal context to a copy of the original decimal context and then return "
"the copy. This allows changes to be made to the current decimal context in "
"the body of the :keyword:`with` statement without affecting code outside the"
" :keyword:`!with` statement."
msgstr ""

#: ../../library/stdtypes.rst:4687
msgid ""
"Exit the runtime context and return a Boolean flag indicating if any "
"exception that occurred should be suppressed. If an exception occurred while"
" executing the body of the :keyword:`with` statement, the arguments contain "
"the exception type, value and traceback information. Otherwise, all three "
"arguments are ``None``."
msgstr ""

#: ../../library/stdtypes.rst:4692
msgid ""
"Returning a true value from this method will cause the :keyword:`with` "
"statement to suppress the exception and continue execution with the "
"statement immediately following the :keyword:`!with` statement. Otherwise "
"the exception continues propagating after this method has finished "
"executing. Exceptions that occur during execution of this method will "
"replace any exception that occurred in the body of the :keyword:`!with` "
"statement."
msgstr ""

#: ../../library/stdtypes.rst:4699
msgid ""
"The exception passed in should never be reraised explicitly - instead, this "
"method should return a false value to indicate that the method completed "
"successfully and does not want to suppress the raised exception. This allows"
" context management code to easily detect whether or not an :meth:`__exit__`"
" method has actually failed."
msgstr ""

#: ../../library/stdtypes.rst:4705
msgid ""
"Python defines several context managers to support easy thread "
"synchronisation, prompt closure of files or other objects, and simpler "
"manipulation of the active decimal arithmetic context. The specific types "
"are not treated specially beyond their implementation of the context "
"management protocol. See the :mod:`contextlib` module for some examples."
msgstr ""

#: ../../library/stdtypes.rst:4711
msgid ""
"Python's :term:`generator`\\s and the :class:`contextlib.contextmanager` "
"decorator provide a convenient way to implement these protocols.  If a "
"generator function is decorated with the :class:`contextlib.contextmanager` "
"decorator, it will return a context manager implementing the necessary "
":meth:`~contextmanager.__enter__` and :meth:`~contextmanager.__exit__` "
"methods, rather than the iterator produced by an undecorated generator "
"function."
msgstr ""

#: ../../library/stdtypes.rst:4718
msgid ""
"Note that there is no specific slot for any of these methods in the type "
"structure for Python objects in the Python/C API. Extension types wanting to"
" define these methods must provide them as a normal Python accessible "
"method. Compared to the overhead of setting up the runtime context, the "
"overhead of a single class dictionary lookup is negligible."
msgstr ""

#: ../../library/stdtypes.rst:4728
msgid "Generic Alias Type"
msgstr ""

#: ../../library/stdtypes.rst:4734
msgid ""
"``GenericAlias`` objects are generally created by :ref:`subscripting "
"<subscriptions>` a class. They are most often used with :ref:`container "
"classes <sequence-types>`, such as :class:`list` or :class:`dict`. For "
"example, ``list[int]`` is a ``GenericAlias`` object created by subscripting "
"the ``list`` class with the argument :class:`int`. ``GenericAlias`` objects "
"are intended primarily for use with :term:`type annotations <annotation>`."
msgstr ""

#: ../../library/stdtypes.rst:4744
msgid ""
"It is generally only possible to subscript a class if the class implements "
"the special method :meth:`~object.__class_getitem__`."
msgstr ""

#: ../../library/stdtypes.rst:4747
msgid ""
"A ``GenericAlias`` object acts as a proxy for a :term:`generic type`, "
"implementing *parameterized generics*."
msgstr ""

#: ../../library/stdtypes.rst:4750
msgid ""
"For a container class, the argument(s) supplied to a :ref:`subscription "
"<subscriptions>` of the class may indicate the type(s) of the elements an "
"object contains. For example, ``set[bytes]`` can be used in type annotations"
" to signify a :class:`set` in which all the elements are of type "
":class:`bytes`."
msgstr ""

#: ../../library/stdtypes.rst:4756
msgid ""
"For a class which defines :meth:`~object.__class_getitem__` but is not a "
"container, the argument(s) supplied to a subscription of the class will "
"often indicate the return type(s) of one or more methods defined on an "
"object. For example, :mod:`regular expressions <re>` can be used on both the"
" :class:`str` data type and the :class:`bytes` data type:"
msgstr ""

#: ../../library/stdtypes.rst:4762
msgid ""
"If ``x = re.search('foo', 'foo')``, ``x`` will be a :ref:`re.Match <match-"
"objects>` object where the return values of ``x.group(0)`` and ``x[0]`` will"
" both be of type :class:`str`. We can represent this kind of object in type "
"annotations with the ``GenericAlias`` ``re.Match[str]``."
msgstr ""

#: ../../library/stdtypes.rst:4768
msgid ""
"If ``y = re.search(b'bar', b'bar')``, (note the ``b`` for :class:`bytes`), "
"``y`` will also be an instance of ``re.Match``, but the return values of "
"``y.group(0)`` and ``y[0]`` will both be of type :class:`bytes`. In type "
"annotations, we would represent this variety of :ref:`re.Match <match-"
"objects>` objects with ``re.Match[bytes]``."
msgstr ""

#: ../../library/stdtypes.rst:4774
msgid ""
"``GenericAlias`` objects are instances of the class "
":class:`types.GenericAlias`, which can also be used to create "
"``GenericAlias`` objects directly."
msgstr ""

#: ../../library/stdtypes.rst:4780
msgid ""
"Creates a ``GenericAlias`` representing a type ``T`` parameterized by types "
"*X*, *Y*, and more depending on the ``T`` used. For example, a function "
"expecting a :class:`list` containing :class:`float` elements::"
msgstr ""

#: ../../library/stdtypes.rst:4788
msgid ""
"Another example for :term:`mapping` objects, using a :class:`dict`, which is"
" a generic type expecting two type parameters representing the key type and "
"the value type.  In this example, the function expects a ``dict`` with keys "
"of type :class:`str` and values of type :class:`int`::"
msgstr ""

#: ../../library/stdtypes.rst:4796
msgid ""
"The builtin functions :func:`isinstance` and :func:`issubclass` do not "
"accept ``GenericAlias`` types for their second argument::"
msgstr ""

#: ../../library/stdtypes.rst:4804
msgid ""
"The Python runtime does not enforce :term:`type annotations <annotation>`. "
"This extends to generic types and their type parameters. When creating a "
"container object from a ``GenericAlias``, the elements in the container are "
"not checked against their type. For example, the following code is "
"discouraged, but will run without errors::"
msgstr ""

#: ../../library/stdtypes.rst:4814
msgid ""
"Furthermore, parameterized generics erase type parameters during object "
"creation::"
msgstr ""

#: ../../library/stdtypes.rst:4825
msgid ""
"Calling :func:`repr` or :func:`str` on a generic shows the parameterized "
"type::"
msgstr ""

#: ../../library/stdtypes.rst:4833
msgid ""
"The :meth:`~object.__getitem__` method of generic containers will raise an "
"exception to disallow mistakes like ``dict[str][str]``::"
msgstr ""

#: ../../library/stdtypes.rst:4841
msgid ""
"However, such expressions are valid when :ref:`type variables <generics>` "
"are used.  The index must have as many elements as there are type variable "
"items in the ``GenericAlias`` object's :attr:`~genericalias.__args__`. ::"
msgstr ""

#: ../../library/stdtypes.rst:4852
msgid "Standard Generic Classes"
msgstr ""

#: ../../library/stdtypes.rst:4854
msgid ""
"The following standard library classes support parameterized generics. This "
"list is non-exhaustive."
msgstr ""

#: ../../library/stdtypes.rst:4857
msgid ":class:`tuple`"
msgstr ""

#: ../../library/stdtypes.rst:4858
msgid ":class:`list`"
msgstr ""

#: ../../library/stdtypes.rst:4859
msgid ":class:`dict`"
msgstr ""

#: ../../library/stdtypes.rst:4860
msgid ":class:`set`"
msgstr ""

#: ../../library/stdtypes.rst:4861
msgid ":class:`frozenset`"
msgstr ""

#: ../../library/stdtypes.rst:4862
msgid ":class:`type`"
msgstr ""

#: ../../library/stdtypes.rst:4863
msgid ":class:`collections.deque`"
msgstr ""

#: ../../library/stdtypes.rst:4864
msgid ":class:`collections.defaultdict`"
msgstr ""

#: ../../library/stdtypes.rst:4865
msgid ":class:`collections.OrderedDict`"
msgstr ""

#: ../../library/stdtypes.rst:4866
msgid ":class:`collections.Counter`"
msgstr ""

#: ../../library/stdtypes.rst:4867
msgid ":class:`collections.ChainMap`"
msgstr ""

#: ../../library/stdtypes.rst:4868
msgid ":class:`collections.abc.Awaitable`"
msgstr ""

#: ../../library/stdtypes.rst:4869
msgid ":class:`collections.abc.Coroutine`"
msgstr ""

#: ../../library/stdtypes.rst:4870
msgid ":class:`collections.abc.AsyncIterable`"
msgstr ""

#: ../../library/stdtypes.rst:4871
msgid ":class:`collections.abc.AsyncIterator`"
msgstr ""

#: ../../library/stdtypes.rst:4872
msgid ":class:`collections.abc.AsyncGenerator`"
msgstr ""

#: ../../library/stdtypes.rst:4873
msgid ":class:`collections.abc.Iterable`"
msgstr ""

#: ../../library/stdtypes.rst:4874
msgid ":class:`collections.abc.Iterator`"
msgstr ""

#: ../../library/stdtypes.rst:4875
msgid ":class:`collections.abc.Generator`"
msgstr ""

#: ../../library/stdtypes.rst:4876
msgid ":class:`collections.abc.Reversible`"
msgstr ""

#: ../../library/stdtypes.rst:4877
msgid ":class:`collections.abc.Container`"
msgstr ""

#: ../../library/stdtypes.rst:4878
msgid ":class:`collections.abc.Collection`"
msgstr ""

#: ../../library/stdtypes.rst:4879
msgid ":class:`collections.abc.Callable`"
msgstr ""

#: ../../library/stdtypes.rst:4880
msgid ":class:`collections.abc.Set`"
msgstr ""

#: ../../library/stdtypes.rst:4881
msgid ":class:`collections.abc.MutableSet`"
msgstr ""

#: ../../library/stdtypes.rst:4882
msgid ":class:`collections.abc.Mapping`"
msgstr ""

#: ../../library/stdtypes.rst:4883
msgid ":class:`collections.abc.MutableMapping`"
msgstr ""

#: ../../library/stdtypes.rst:4884
msgid ":class:`collections.abc.Sequence`"
msgstr ""

#: ../../library/stdtypes.rst:4885
msgid ":class:`collections.abc.MutableSequence`"
msgstr ""

#: ../../library/stdtypes.rst:4886
msgid ":class:`collections.abc.ByteString`"
msgstr ""

#: ../../library/stdtypes.rst:4887
msgid ":class:`collections.abc.MappingView`"
msgstr ""

#: ../../library/stdtypes.rst:4888
msgid ":class:`collections.abc.KeysView`"
msgstr ""

#: ../../library/stdtypes.rst:4889
msgid ":class:`collections.abc.ItemsView`"
msgstr ""

#: ../../library/stdtypes.rst:4890
msgid ":class:`collections.abc.ValuesView`"
msgstr ""

#: ../../library/stdtypes.rst:4891
msgid ":class:`contextlib.AbstractContextManager`"
msgstr ""

#: ../../library/stdtypes.rst:4892
msgid ":class:`contextlib.AbstractAsyncContextManager`"
msgstr ""

#: ../../library/stdtypes.rst:4893
msgid ":class:`dataclasses.Field`"
msgstr ""

#: ../../library/stdtypes.rst:4894
msgid ":class:`functools.cached_property`"
msgstr ""

#: ../../library/stdtypes.rst:4895
msgid ":class:`functools.partialmethod`"
msgstr ""

#: ../../library/stdtypes.rst:4896
msgid ":class:`os.PathLike`"
msgstr ""

#: ../../library/stdtypes.rst:4897
msgid ":class:`queue.LifoQueue`"
msgstr ""

#: ../../library/stdtypes.rst:4898
msgid ":class:`queue.Queue`"
msgstr ""

#: ../../library/stdtypes.rst:4899
msgid ":class:`queue.PriorityQueue`"
msgstr ""

#: ../../library/stdtypes.rst:4900
msgid ":class:`queue.SimpleQueue`"
msgstr ""

#: ../../library/stdtypes.rst:4901
msgid ":ref:`re.Pattern <re-objects>`"
msgstr ""

#: ../../library/stdtypes.rst:4902
msgid ":ref:`re.Match <match-objects>`"
msgstr ""

#: ../../library/stdtypes.rst:4903
msgid ":class:`shelve.BsdDbShelf`"
msgstr ""

#: ../../library/stdtypes.rst:4904
msgid ":class:`shelve.DbfilenameShelf`"
msgstr ""

#: ../../library/stdtypes.rst:4905
msgid ":class:`shelve.Shelf`"
msgstr ""

#: ../../library/stdtypes.rst:4906
msgid ":class:`types.MappingProxyType`"
msgstr ""

#: ../../library/stdtypes.rst:4907
msgid ":class:`weakref.WeakKeyDictionary`"
msgstr ""

#: ../../library/stdtypes.rst:4908
msgid ":class:`weakref.WeakMethod`"
msgstr ""

#: ../../library/stdtypes.rst:4909
msgid ":class:`weakref.WeakSet`"
msgstr ""

#: ../../library/stdtypes.rst:4910
msgid ":class:`weakref.WeakValueDictionary`"
msgstr ""

#: ../../library/stdtypes.rst:4915
msgid "Special Attributes of ``GenericAlias`` objects"
msgstr ""

#: ../../library/stdtypes.rst:4917
msgid "All parameterized generics implement special read-only attributes."
msgstr ""

#: ../../library/stdtypes.rst:4921
msgid "This attribute points at the non-parameterized generic class::"
msgstr ""

#: ../../library/stdtypes.rst:4929
msgid ""
"This attribute is a :class:`tuple` (possibly of length 1) of generic types "
"passed to the original :meth:`~object.__class_getitem__` of the generic "
"class::"
msgstr ""

#: ../../library/stdtypes.rst:4939
msgid ""
"This attribute is a lazily computed tuple (possibly empty) of unique type "
"variables found in ``__args__``::"
msgstr ""

#: ../../library/stdtypes.rst:4952
msgid ":pep:`484` - Type Hints"
msgstr ""

#: ../../library/stdtypes.rst:4952
msgid "Introducing Python's framework for type annotations."
msgstr ""

#: ../../library/stdtypes.rst:4957
msgid ":pep:`585` - Type Hinting Generics In Standard Collections"
msgstr ""

#: ../../library/stdtypes.rst:4955
msgid ""
"Introducing the ability to natively parameterize standard-library classes, "
"provided they implement the special class method "
":meth:`~object.__class_getitem__`."
msgstr ""

#: ../../library/stdtypes.rst:4960
msgid ""
":ref:`Generics`, :ref:`user-defined generics <user-defined-generics>` and "
":class:`typing.Generic`"
msgstr ""

#: ../../library/stdtypes.rst:4960
msgid ""
"Documentation on how to implement generic classes that can be parameterized "
"at runtime and understood by static type-checkers."
msgstr ""

#: ../../library/stdtypes.rst:4969
msgid "Other Built-in Types"
msgstr ""

#: ../../library/stdtypes.rst:4971
msgid ""
"The interpreter supports several other kinds of objects. Most of these "
"support only one or two operations."
msgstr ""

#: ../../library/stdtypes.rst:4978
msgid "Modules"
msgstr ""

#: ../../library/stdtypes.rst:4980
msgid ""
"The only special operation on a module is attribute access: ``m.name``, "
"where *m* is a module and *name* accesses a name defined in *m*'s symbol "
"table. Module attributes can be assigned to.  (Note that the "
":keyword:`import` statement is not, strictly speaking, an operation on a "
"module object; ``import foo`` does not require a module object named *foo* "
"to exist, rather it requires an (external) *definition* for a module named "
"*foo* somewhere.)"
msgstr ""

#: ../../library/stdtypes.rst:4987
msgid ""
"A special attribute of every module is :attr:`~object.__dict__`. This is the"
" dictionary containing the module's symbol table. Modifying this dictionary "
"will actually change the module's symbol table, but direct assignment to the"
" :attr:`~object.__dict__` attribute is not possible (you can write "
"``m.__dict__['a'] = 1``, which defines ``m.a`` to be ``1``, but you can't "
"write ``m.__dict__ = {}``).  Modifying :attr:`~object.__dict__` directly is "
"not recommended."
msgstr ""

#: ../../library/stdtypes.rst:4995
msgid ""
"Modules built into the interpreter are written like this: ``<module 'sys' "
"(built-in)>``.  If loaded from a file, they are written as ``<module 'os' "
"from '/usr/local/lib/pythonX.Y/os.pyc'>``."
msgstr ""

#: ../../library/stdtypes.rst:5003
msgid "Classes and Class Instances"
msgstr ""

#: ../../library/stdtypes.rst:5005
msgid "See :ref:`objects` and :ref:`class` for these."
msgstr ""

#: ../../library/stdtypes.rst:5011
msgid "Functions"
msgstr ""

#: ../../library/stdtypes.rst:5013
msgid ""
"Function objects are created by function definitions.  The only operation on"
" a function object is to call it: ``func(argument-list)``."
msgstr ""

#: ../../library/stdtypes.rst:5016
msgid ""
"There are really two flavors of function objects: built-in functions and "
"user-defined functions.  Both support the same operation (to call the "
"function), but the implementation is different, hence the different object "
"types."
msgstr ""

#: ../../library/stdtypes.rst:5020
msgid "See :ref:`function` for more information."
msgstr ""

#: ../../library/stdtypes.rst:5026
msgid "Methods"
msgstr "方法"

#: ../../library/stdtypes.rst:5030
msgid ""
"Methods are functions that are called using the attribute notation. There "
"are two flavors: built-in methods (such as :meth:`append` on lists) and "
"class instance methods.  Built-in methods are described with the types that "
"support them."
msgstr ""

#: ../../library/stdtypes.rst:5035
msgid ""
"If you access a method (a function defined in a class namespace) through an "
"instance, you get a special object: a :dfn:`bound method` (also called "
":dfn:`instance method`) object. When called, it will add the ``self`` "
"argument to the argument list.  Bound methods have two special read-only "
"attributes: ``m.__self__`` is the object on which the method operates, and "
"``m.__func__`` is the function implementing the method.  Calling ``m(arg-1, "
"arg-2, ..., arg-n)`` is completely equivalent to calling "
"``m.__func__(m.__self__, arg-1, arg-2, ..., arg-n)``."
msgstr ""

#: ../../library/stdtypes.rst:5044
msgid ""
"Like function objects, bound method objects support getting arbitrary "
"attributes.  However, since method attributes are actually stored on the "
"underlying function object (``meth.__func__``), setting method attributes on"
" bound methods is disallowed.  Attempting to set an attribute on a method "
"results in an :exc:`AttributeError` being raised.  In order to set a method "
"attribute, you need to explicitly set it on the underlying function object::"
msgstr ""

#: ../../library/stdtypes.rst:5064 ../../library/stdtypes.rst:5095
msgid "See :ref:`types` for more information."
msgstr ""

#: ../../library/stdtypes.rst:5072
msgid "Code Objects"
msgstr "代码对象"

#: ../../library/stdtypes.rst:5078
msgid ""
"Code objects are used by the implementation to represent \"pseudo-compiled\""
" executable Python code such as a function body. They differ from function "
"objects because they don't contain a reference to their global execution "
"environment.  Code objects are returned by the built-in :func:`compile` "
"function and can be extracted from function objects through their "
":attr:`__code__` attribute. See also the :mod:`code` module."
msgstr ""

#: ../../library/stdtypes.rst:5085
msgid ""
"Accessing ``__code__`` raises an :ref:`auditing event <auditing>` "
"``object.__getattr__`` with arguments ``obj`` and ``\"__code__\"``."
msgstr ""

#: ../../library/stdtypes.rst:5092
msgid ""
"A code object can be executed or evaluated by passing it (instead of a "
"source string) to the :func:`exec` or :func:`eval`  built-in functions."
msgstr ""

#: ../../library/stdtypes.rst:5101
msgid "Type Objects"
msgstr "类型对象"

#: ../../library/stdtypes.rst:5107
msgid ""
"Type objects represent the various object types.  An object's type is "
"accessed by the built-in function :func:`type`.  There are no special "
"operations on types.  The standard module :mod:`types` defines names for all"
" standard built-in types."
msgstr ""

#: ../../library/stdtypes.rst:5112
msgid "Types are written like this: ``<class 'int'>``."
msgstr ""

#: ../../library/stdtypes.rst:5118
msgid "The Null Object"
msgstr ""

#: ../../library/stdtypes.rst:5120
msgid ""
"This object is returned by functions that don't explicitly return a value.  "
"It supports no special operations.  There is exactly one null object, named "
"``None`` (a built-in name).  ``type(None)()`` produces the same singleton."
msgstr ""

#: ../../library/stdtypes.rst:5124
msgid "It is written as ``None``."
msgstr ""

#: ../../library/stdtypes.rst:5131
msgid "The Ellipsis Object"
msgstr ""

#: ../../library/stdtypes.rst:5133
msgid ""
"This object is commonly used by slicing (see :ref:`slicings`).  It supports "
"no special operations.  There is exactly one ellipsis object, named "
":const:`Ellipsis` (a built-in name).  ``type(Ellipsis)()`` produces the "
":const:`Ellipsis` singleton."
msgstr ""

#: ../../library/stdtypes.rst:5138
msgid "It is written as ``Ellipsis`` or ``...``."
msgstr ""

#: ../../library/stdtypes.rst:5144
msgid "The NotImplemented Object"
msgstr ""

#: ../../library/stdtypes.rst:5146
msgid ""
"This object is returned from comparisons and binary operations when they are"
" asked to operate on types they don't support. See :ref:`comparisons` for "
"more information.  There is exactly one ``NotImplemented`` object. "
"``type(NotImplemented)()`` produces the singleton instance."
msgstr ""

#: ../../library/stdtypes.rst:5151
msgid "It is written as ``NotImplemented``."
msgstr ""

#: ../../library/stdtypes.rst:5157
msgid "Boolean Values"
msgstr ""

#: ../../library/stdtypes.rst:5159
msgid ""
"Boolean values are the two constant objects ``False`` and ``True``.  They "
"are used to represent truth values (although other values can also be "
"considered false or true).  In numeric contexts (for example when used as "
"the argument to an arithmetic operator), they behave like the integers 0 and"
" 1, respectively. The built-in function :func:`bool` can be used to convert "
"any value to a Boolean, if the value can be interpreted as a truth value "
"(see section :ref:`truth` above)."
msgstr ""

#: ../../library/stdtypes.rst:5172
msgid "They are written as ``False`` and ``True``, respectively."
msgstr ""

#: ../../library/stdtypes.rst:5178
msgid "Internal Objects"
msgstr ""

#: ../../library/stdtypes.rst:5180
msgid ""
"See :ref:`types` for this information.  It describes stack frame objects, "
"traceback objects, and slice objects."
msgstr ""

#: ../../library/stdtypes.rst:5187
msgid "Special Attributes"
msgstr ""

#: ../../library/stdtypes.rst:5189
msgid ""
"The implementation adds a few special read-only attributes to several object"
" types, where they are relevant.  Some of these are not reported by the "
":func:`dir` built-in function."
msgstr ""

#: ../../library/stdtypes.rst:5196
msgid ""
"A dictionary or other mapping object used to store an object's (writable) "
"attributes."
msgstr ""

#: ../../library/stdtypes.rst:5202
msgid "The class to which a class instance belongs."
msgstr ""

#: ../../library/stdtypes.rst:5207
msgid "The tuple of base classes of a class object."
msgstr ""

#: ../../library/stdtypes.rst:5212
msgid ""
"The name of the class, function, method, descriptor, or generator instance."
msgstr ""

#: ../../library/stdtypes.rst:5218
msgid ""
"The :term:`qualified name` of the class, function, method, descriptor, or "
"generator instance."
msgstr ""

#: ../../library/stdtypes.rst:5226
msgid ""
"This attribute is a tuple of classes that are considered when looking for "
"base classes during method resolution."
msgstr ""

#: ../../library/stdtypes.rst:5232
msgid ""
"This method can be overridden by a metaclass to customize the method "
"resolution order for its instances.  It is called at class instantiation, "
"and its result is stored in :attr:`~class.__mro__`."
msgstr ""

#: ../../library/stdtypes.rst:5239
msgid ""
"Each class keeps a list of weak references to its immediate subclasses.  "
"This method returns a list of all those references still alive.  The list is"
" in definition order.  Example::"
msgstr ""

#: ../../library/stdtypes.rst:5250
msgid "Integer string conversion length limitation"
msgstr ""

#: ../../library/stdtypes.rst:5252
msgid ""
"CPython has a global limit for converting between :class:`int` and "
":class:`str` to mitigate denial of service attacks. This limit *only* "
"applies to decimal or other non-power-of-two number bases. Hexadecimal, "
"octal, and binary conversions are unlimited. The limit can be configured."
msgstr ""

#: ../../library/stdtypes.rst:5257
msgid ""
"The :class:`int` type in CPython is an arbitrary length number stored in "
"binary form (commonly known as a \"bignum\"). There exists no algorithm that"
" can convert a string to a binary integer or a binary integer to a string in"
" linear time, *unless* the base is a power of 2. Even the best known "
"algorithms for base 10 have sub-quadratic complexity. Converting a large "
"value such as ``int('1' * 500_000)`` can take over a second on a fast CPU."
msgstr ""

#: ../../library/stdtypes.rst:5264
msgid ""
"Limiting conversion size offers a practical way to avoid `CVE-2020-10735 "
"<https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10735>`_."
msgstr ""

#: ../../library/stdtypes.rst:5267
msgid ""
"The limit is applied to the number of digit characters in the input or "
"output string when a non-linear conversion algorithm would be involved.  "
"Underscores and the sign are not counted towards the limit."
msgstr ""

#: ../../library/stdtypes.rst:5271
msgid ""
"When an operation would exceed the limit, a :exc:`ValueError` is raised:"
msgstr ""

#: ../../library/stdtypes.rst:5293
msgid ""
"The default limit is 4300 digits as provided in "
":data:`sys.int_info.default_max_str_digits <sys.int_info>`. The lowest limit"
" that can be configured is 640 digits as provided in "
":data:`sys.int_info.str_digits_check_threshold <sys.int_info>`."
msgstr ""

#: ../../library/stdtypes.rst:5298
msgid "Verification:"
msgstr ""

#: ../../library/stdtypes.rst:5313
msgid "Affected APIs"
msgstr ""

#: ../../library/stdtypes.rst:5315
msgid ""
"The limitation only applies to potentially slow conversions between "
":class:`int` and :class:`str` or :class:`bytes`:"
msgstr ""

#: ../../library/stdtypes.rst:5318
msgid "``int(string)`` with default base 10."
msgstr ""

#: ../../library/stdtypes.rst:5319
msgid "``int(string, base)`` for all bases that are not a power of 2."
msgstr ""

#: ../../library/stdtypes.rst:5320
msgid "``str(integer)``."
msgstr ""

#: ../../library/stdtypes.rst:5321
msgid "``repr(integer)``."
msgstr ""

#: ../../library/stdtypes.rst:5322
msgid ""
"any other string conversion to base 10, for example ``f\"{integer}\"``, "
"``\"{}\".format(integer)``, or ``b\"%d\" % integer``."
msgstr ""

#: ../../library/stdtypes.rst:5325
msgid "The limitations do not apply to functions with a linear algorithm:"
msgstr ""

#: ../../library/stdtypes.rst:5327
msgid "``int(string, base)`` with base 2, 4, 8, 16, or 32."
msgstr ""

#: ../../library/stdtypes.rst:5328
msgid ":func:`int.from_bytes` and :func:`int.to_bytes`."
msgstr ""

#: ../../library/stdtypes.rst:5329
msgid ":func:`hex`, :func:`oct`, :func:`bin`."
msgstr ""

#: ../../library/stdtypes.rst:5330
msgid ":ref:`formatspec` for hex, octal, and binary numbers."
msgstr ""

#: ../../library/stdtypes.rst:5331
msgid ":class:`str` to :class:`float`."
msgstr ""

#: ../../library/stdtypes.rst:5332
msgid ":class:`str` to :class:`decimal.Decimal`."
msgstr ""

#: ../../library/stdtypes.rst:5335
msgid "Configuring the limit"
msgstr ""

#: ../../library/stdtypes.rst:5337
msgid ""
"Before Python starts up you can use an environment variable or an "
"interpreter command line flag to configure the limit:"
msgstr ""

#: ../../library/stdtypes.rst:5340
msgid ""
":envvar:`PYTHONINTMAXSTRDIGITS`, e.g. ``PYTHONINTMAXSTRDIGITS=640 python3`` "
"to set the limit to 640 or ``PYTHONINTMAXSTRDIGITS=0 python3`` to disable "
"the limitation."
msgstr ""

#: ../../library/stdtypes.rst:5343
msgid ""
":option:`-X int_max_str_digits <-X>`, e.g. ``python3 -X "
"int_max_str_digits=640``"
msgstr ""

#: ../../library/stdtypes.rst:5345
msgid ""
":data:`sys.flags.int_max_str_digits` contains the value of "
":envvar:`PYTHONINTMAXSTRDIGITS` or :option:`-X int_max_str_digits <-X>`. If "
"both the env var and the ``-X`` option are set, the ``-X`` option takes "
"precedence. A value of *-1* indicates that both were unset, thus a value of "
":data:`sys.int_info.default_max_str_digits` was used during initialization."
msgstr ""

#: ../../library/stdtypes.rst:5351
msgid ""
"From code, you can inspect the current limit and set a new one using these "
":mod:`sys` APIs:"
msgstr ""

#: ../../library/stdtypes.rst:5354
msgid ""
":func:`sys.get_int_max_str_digits` and :func:`sys.set_int_max_str_digits` "
"are a getter and setter for the interpreter-wide limit. Subinterpreters have"
" their own limit."
msgstr ""

#: ../../library/stdtypes.rst:5358
msgid ""
"Information about the default and minimum can be found in "
":attr:`sys.int_info`:"
msgstr ""

#: ../../library/stdtypes.rst:5360
msgid ""
":data:`sys.int_info.default_max_str_digits <sys.int_info>` is the compiled-"
"in default limit."
msgstr ""

#: ../../library/stdtypes.rst:5362
msgid ""
":data:`sys.int_info.str_digits_check_threshold <sys.int_info>` is the lowest"
" accepted value for the limit (other than 0 which disables it)."
msgstr ""

#: ../../library/stdtypes.rst:5369
msgid ""
"Setting a low limit *can* lead to problems. While rare, code exists that "
"contains integer constants in decimal in their source that exceed the "
"minimum threshold. A consequence of setting the limit is that Python source "
"code containing decimal integer literals longer than the limit will "
"encounter an error during parsing, usually at startup time or import time or"
" even at installation time - anytime an up to date ``.pyc`` does not already"
" exist for the code. A workaround for source that contains such large "
"constants is to convert them to ``0x`` hexadecimal form as it has no limit."
msgstr ""

#: ../../library/stdtypes.rst:5378
msgid ""
"Test your application thoroughly if you use a low limit. Ensure your tests "
"run with the limit set early via the environment or flag so that it applies "
"during startup and even during any installation step that may invoke Python "
"to precompile ``.py`` sources to ``.pyc`` files."
msgstr ""

#: ../../library/stdtypes.rst:5384
msgid "Recommended configuration"
msgstr ""

#: ../../library/stdtypes.rst:5386
msgid ""
"The default :data:`sys.int_info.default_max_str_digits` is expected to be "
"reasonable for most applications. If your application requires a different "
"limit, set it from your main entry point using Python version agnostic code "
"as these APIs were added in security patch releases in versions before 3.11."
msgstr ""

#: ../../library/stdtypes.rst:5391
msgid "Example::"
msgstr "示例::"

#: ../../library/stdtypes.rst:5403
msgid "If you need to disable it entirely, set it to ``0``."
msgstr ""

#: ../../library/stdtypes.rst:5407
msgid "Footnotes"
msgstr "备注"

#: ../../library/stdtypes.rst:5408
msgid ""
"Additional information on these special methods may be found in the Python "
"Reference Manual (:ref:`customization`)."
msgstr ""

#: ../../library/stdtypes.rst:5411
msgid ""
"As a consequence, the list ``[1, 2]`` is considered equal to ``[1.0, 2.0]``,"
" and similarly for tuples."
msgstr ""

#: ../../library/stdtypes.rst:5414
msgid "They must have since the parser can't tell the type of the operands."
msgstr ""

#: ../../library/stdtypes.rst:5416
msgid ""
"Cased characters are those with general category property being one of "
"\"Lu\" (Letter, uppercase), \"Ll\" (Letter, lowercase), or \"Lt\" (Letter, "
"titlecase)."
msgstr ""

#: ../../library/stdtypes.rst:5419
msgid ""
"To format only a tuple you should therefore provide a singleton tuple whose "
"only element is the tuple to be formatted."
msgstr ""
