# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.mime.rst:2
msgid ":mod:`email.mime`: Creating email and MIME objects from scratch"
msgstr ""

#: ../../library/email.mime.rst:7
msgid "**Source code:** :source:`Lib/email/mime/`"
msgstr ""

#: ../../library/email.mime.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  Its "
"functionality is partially replaced by the :mod:`~email.contentmanager` in "
"the new API, but in certain applications these classes may still be useful, "
"even in non-legacy code."
msgstr ""

#: ../../library/email.mime.rst:16
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message object."
"  However you can also build a complete message structure from scratch, or "
"even individual :class:`~email.message.Message` objects by hand.  In fact, "
"you can also take an existing structure and add new "
":class:`~email.message.Message` objects, move them around, etc.  This makes "
"a very convenient interface for slicing-and-dicing MIME messages."
msgstr ""

#: ../../library/email.mime.rst:24
msgid ""
"You can create a new object structure by creating "
":class:`~email.message.Message` instances, adding attachments and all the "
"appropriate headers manually.  For MIME messages though, the :mod:`email` "
"package provides some convenient subclasses to make things easier."
msgstr ""

#: ../../library/email.mime.rst:29
msgid "Here are the classes:"
msgstr ""

#: ../../library/email.mime.rst:35
msgid "Module: :mod:`email.mime.base`"
msgstr ""

#: ../../library/email.mime.rst:37
msgid ""
"This is the base class for all the MIME-specific subclasses of "
":class:`~email.message.Message`.  Ordinarily you won't create instances "
"specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase` is"
" provided primarily as a convenient base class for more specific MIME-aware "
"subclasses."
msgstr ""

#: ../../library/email.mime.rst:43
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. "
":mimetype:`text` or :mimetype:`image`), and *_subtype* is the "
":mailheader:`Content-Type` minor type  (e.g. :mimetype:`plain` or "
":mimetype:`gif`).  *_params* is a parameter key/value dictionary and is "
"passed directly to :meth:`Message.add_header "
"<email.message.Message.add_header>`."
msgstr ""

#: ../../library/email.mime.rst:49
msgid ""
"If *policy* is specified, (defaults to the :class:`compat32 "
"<email.policy.Compat32>` policy) it will be passed to "
":class:`~email.message.Message`."
msgstr ""

#: ../../library/email.mime.rst:53
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header "
"(based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-"
"Version` header (always set to ``1.0``)."
msgstr ""

#: ../../library/email.mime.rst:57 ../../library/email.mime.rst:104
#: ../../library/email.mime.rst:135 ../../library/email.mime.rst:169
#: ../../library/email.mime.rst:204 ../../library/email.mime.rst:224
#: ../../library/email.mime.rst:258
msgid "Added *policy* keyword-only parameter."
msgstr ""

#: ../../library/email.mime.rst:65
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr ""

#: ../../library/email.mime.rst:67
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are not :mimetype:`multipart`.  The "
"primary purpose of this class is to prevent the use of the "
":meth:`~email.message.Message.attach` method, which only makes sense for "
":mimetype:`multipart` messages.  If :meth:`~email.message.Message.attach` is"
" called, a :exc:`~email.errors.MultipartConversionError` exception is "
"raised."
msgstr ""

#: ../../library/email.mime.rst:80
msgid "Module: :mod:`email.mime.multipart`"
msgstr ""

#: ../../library/email.mime.rst:82
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are :mimetype:`multipart`.  Optional "
"*_subtype* defaults to :mimetype:`mixed`, but can be used to specify the "
"subtype of the message.  A :mailheader:`Content-Type` header of "
":mimetype:`multipart/_subtype` will be added to the message object.  A "
":mailheader:`MIME-Version` header will also be added."
msgstr ""

#: ../../library/email.mime.rst:89
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the "
"default), the boundary is calculated when needed (for example, when the "
"message is serialized)."
msgstr ""

#: ../../library/email.mime.rst:93
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must be "
"possible to convert this sequence to a list.  You can always attach new "
"subparts to the message by using the :meth:`Message.attach "
"<email.message.Message.attach>` method."
msgstr ""

#: ../../library/email.mime.rst:98 ../../library/email.mime.rst:131
#: ../../library/email.mime.rst:165 ../../library/email.mime.rst:199
#: ../../library/email.mime.rst:222 ../../library/email.mime.rst:253
msgid ""
"Optional *policy* argument defaults to :class:`compat32 "
"<email.policy.Compat32>`."
msgstr ""

#: ../../library/email.mime.rst:100
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken "
"from the keyword arguments, or passed into the *_params* argument, which is "
"a keyword dictionary."
msgstr ""

#: ../../library/email.mime.rst:113
msgid "Module: :mod:`email.mime.application`"
msgstr ""

#: ../../library/email.mime.rst:115
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEApplication` class is used to represent MIME message objects of "
"major type :mimetype:`application`.  *_data* is a string containing the raw "
"byte data.  Optional *_subtype* specifies the MIME subtype and defaults to "
":mimetype:`octet-stream`."
msgstr ""

#: ../../library/email.mime.rst:121
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""

#: ../../library/email.mime.rst:133 ../../library/email.mime.rst:167
msgid "*_params* are passed straight through to the base class constructor."
msgstr ""

#: ../../library/email.mime.rst:144
msgid "Module: :mod:`email.mime.audio`"
msgstr ""

#: ../../library/email.mime.rst:146
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEAudio` class is used to create MIME message objects of major "
"type :mimetype:`audio`. *_audiodata* is a string containing the raw audio "
"data.  If this data can be decoded by the standard Python module "
":mod:`sndhdr`, then the subtype will be automatically included in the "
":mailheader:`Content-Type` header. Otherwise you can explicitly specify the "
"audio subtype via the *_subtype* argument.  If the minor type could not be "
"guessed and *_subtype* was not given, then :exc:`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:155
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one "
"argument, which is the :class:`MIMEAudio` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""

#: ../../library/email.mime.rst:178
msgid "Module: :mod:`email.mime.image`"
msgstr ""

#: ../../library/email.mime.rst:180
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEImage` class is used to create MIME message objects of major "
"type :mimetype:`image`. *_imagedata* is a string containing the raw image "
"data.  If this data can be decoded by the standard Python module "
":mod:`imghdr`, then the subtype will be automatically included in the "
":mailheader:`Content-Type` header. Otherwise you can explicitly specify the "
"image subtype via the *_subtype* argument.  If the minor type could not be "
"guessed and *_subtype* was not given, then :exc:`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:189
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one "
"argument, which is the :class:`MIMEImage` instance. It should use "
":meth:`~email.message.Message.get_payload` and "
":meth:`~email.message.Message.set_payload` to change the payload to encoded "
"form.  It should also add any :mailheader:`Content-Transfer-Encoding` or "
"other headers to the message object as necessary.  The default encoding is "
"base64.  See the :mod:`email.encoders` module for a list of the built-in "
"encoders."
msgstr ""

#: ../../library/email.mime.rst:201
msgid ""
"*_params* are passed straight through to the "
":class:`~email.mime.base.MIMEBase` constructor."
msgstr ""

#: ../../library/email.mime.rst:211
msgid "Module: :mod:`email.mime.message`"
msgstr ""

#: ../../library/email.mime.rst:213
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEMessage` class is used to create MIME objects of main type "
":mimetype:`message`. *_msg* is used as the payload, and must be an instance "
"of class :class:`~email.message.Message` (or a subclass thereof), otherwise "
"a :exc:`TypeError` is raised."
msgstr ""

#: ../../library/email.mime.rst:219
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to "
":mimetype:`rfc822`."
msgstr ""

#: ../../library/email.mime.rst:231
msgid "Module: :mod:`email.mime.text`"
msgstr ""

#: ../../library/email.mime.rst:233
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the "
":class:`MIMEText` class is used to create MIME objects of major type "
":mimetype:`text`. *_text* is the string for the payload.  *_subtype* is the "
"minor type and defaults to :mimetype:`plain`.  *_charset* is the character "
"set of the text and is passed as an argument to the "
":class:`~email.mime.nonmultipart.MIMENonMultipart` constructor; it defaults "
"to ``us-ascii`` if the string contains only ``ascii`` code points, and "
"``utf-8`` otherwise.  The *_charset* parameter accepts either a string or a "
":class:`~email.charset.Charset` instance."
msgstr ""

#: ../../library/email.mime.rst:243
msgid ""
"Unless the *_charset* argument is explicitly set to ``None``, the MIMEText "
"object created will have both a :mailheader:`Content-Type` header with a "
"``charset`` parameter, and a :mailheader:`Content-Transfer-Encoding` header."
"  This means that a subsequent ``set_payload`` call will not result in an "
"encoded payload, even if a charset is passed in the ``set_payload`` command."
"  You can \"reset\" this behavior by deleting the ``Content-Transfer-"
"Encoding`` header, after which a ``set_payload`` call will automatically "
"encode the new payload (and add a new :mailheader:`Content-Transfer-"
"Encoding` header)."
msgstr ""

#: ../../library/email.mime.rst:255
msgid "*_charset* also accepts :class:`~email.charset.Charset` instances."
msgstr ""
