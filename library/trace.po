# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/trace.rst:2
msgid ":mod:`trace` --- Trace or track Python statement execution"
msgstr ":mod:`trace` —— 跟踪 Python 语句的执行"

#: ../../library/trace.rst:7
msgid "**Source code:** :source:`Lib/trace.py`"
msgstr "**源代码** ： :source:`Lib/trace.py`"

#: ../../library/trace.rst:11
msgid ""
"The :mod:`trace` module allows you to trace program execution, generate "
"annotated statement coverage listings, print caller/callee relationships and"
" list functions executed during a program run.  It can be used in another "
"program or from the command line."
msgstr ""
"模块 :mod:`trace` "
"模块用于跟踪程序的执行过程，可生成带注释的语句覆盖率列表，打印调用/被调用关系，列出程序运行期间执行过的函数。该模块可在其他程序或命令行中使用。"

#: ../../library/trace.rst:19
msgid "`Coverage.py <https://coverage.readthedocs.io/>`_"
msgstr "`Coverage.py <https://coverage.readthedocs.io/>`_"

#: ../../library/trace.rst:19
msgid ""
"A popular third-party coverage tool that provides HTML output along with "
"advanced features such as branch coverage."
msgstr "流行的第三方代码覆盖工具，可输出 HTML ，并提供分支覆盖等高级功能。"

#: ../../library/trace.rst:25
msgid "Command-Line Usage"
msgstr "命令行用法"

#: ../../library/trace.rst:27
msgid ""
"The :mod:`trace` module can be invoked from the command line.  It can be as "
"simple as ::"
msgstr ":mod:`trace` 模块可由命令行调用。用法如此简单："

#: ../../library/trace.rst:32
msgid ""
"The above will execute :file:`somefile.py` and generate annotated listings "
"of all Python modules imported during the execution into the current "
"directory."
msgstr "上述命令将执行 :file:`somefile.py` ，并在当前目录生成执行期间所有已导入 Python 模块的带注解列表。"

#: ../../library/trace.rst:39
msgid "Display usage and exit."
msgstr "显示用法并退出。"

#: ../../library/trace.rst:43
msgid "Display the version of the module and exit."
msgstr "显示模块版本并退出。"

#: ../../library/trace.rst:45
msgid "Added ``--module`` option that allows to run an executable module."
msgstr "加入了 ``--module`` 选项，允许运行可执行模块。"

#: ../../library/trace.rst:49
msgid "Main options"
msgstr "主要的可选参数"

#: ../../library/trace.rst:51
msgid ""
"At least one of the following options must be specified when invoking "
":mod:`trace`.  The :option:`--listfuncs <-l>` option is mutually exclusive "
"with the :option:`--trace <-t>` and :option:`--count <-c>` options. When "
":option:`--listfuncs <-l>` is provided, neither :option:`--count <-c>` nor "
":option:`--trace <-t>` are accepted, and vice versa."
msgstr ""
"在调用 :mod:`trace` 时，至少须指定以下可选参数之一。 :option:`-listfuncs <-l>` 与 "
":option:`-trace <-t>` 、 :option:`-count <-c>` 相互排斥。如果给出 :option:`--listfuncs"
" <-l>`，就再不会接受 :option:`--count <-c>` 和 :option:`--trace <-t>` ，反之亦然。"

#: ../../library/trace.rst:61
msgid ""
"Produce a set of annotated listing files upon program completion that shows "
"how many times each statement was executed.  See also :option:`--coverdir "
"<-C>`, :option:`--file <-f>` and :option:`--no-report <-R>` below."
msgstr ""
"在程序完成时生成一组带有注解的报表文件，显示每个语句被执行的次数。 参见下面的 :option:`-coverdir <-C>` "
"、:option:`-file <-f>` 和 :option:`-no-report  <-R>`。"

#: ../../library/trace.rst:68
msgid "Display lines as they are executed."
msgstr "执行时显示每一行。"

#: ../../library/trace.rst:72
msgid "Display the functions executed by running the program."
msgstr "显示程序运行时执行到的函数。"

#: ../../library/trace.rst:76
msgid ""
"Produce an annotated list from an earlier program run that used the "
":option:`--count <-c>` and :option:`--file <-f>` option.  This does not "
"execute any code."
msgstr "由之前用了 :option:`--count` 和 :option:`--file` 运行的程序产生一个带有注解的报表。 不会执行代码。"

#: ../../library/trace.rst:82
msgid "Display the calling relationships exposed by running the program."
msgstr "显示程序运行时暴露出来的调用关系。"

#: ../../library/trace.rst:85
msgid "Modifiers"
msgstr "修饰器"

#: ../../library/trace.rst:91
msgid ""
"Name of a file to accumulate counts over several tracing runs.  Should be "
"used with the :option:`--count <-c>` option."
msgstr "用于累计多次跟踪运行计数的文件名。应与 :option:`--count <-c>` 一起使用。"

#: ../../library/trace.rst:96
msgid ""
"Directory where the report files go.  The coverage report for "
"``package.module`` is written to file "
":file:`{dir}/{package}/{module}.cover`."
msgstr ""
"报表文件的所在目录。``package.module`` 的覆盖率报表将被写入文件 "
":file:`{dir}/{package}/{module}.cover`。"

#: ../../library/trace.rst:101
msgid ""
"When generating annotated listings, mark lines which were not executed with "
"``>>>>>>``."
msgstr "生成带注解的报表时，用 ``>>>>>>`` 标记未执行的行。"

#: ../../library/trace.rst:106
msgid ""
"When using :option:`--count <-c>` or :option:`--report <-r>`, write a brief "
"summary to stdout for each file processed."
msgstr ""
"在用到 :option:`--count <-c>` 或 :option:`--report <-r>` 时，将每个文件的简短摘要输出到 stdout。"

#: ../../library/trace.rst:111
msgid ""
"Do not generate annotated listings.  This is useful if you intend to make "
"several runs with :option:`--count <-c>`, and then produce a single set of "
"annotated listings at the end."
msgstr ""
"不生成带注解的报表。如果打算用 :option:`--count <-c>` 执行多次运行，然后在最后产生一组带注解的报表，该选项就很有用。"

#: ../../library/trace.rst:117
msgid ""
"Prefix each line with the time since the program started.  Only used while "
"tracing."
msgstr "在每一行前面加上时间，自程序运行算起。只在跟踪时有用。"

#: ../../library/trace.rst:121
msgid "Filters"
msgstr "过滤器"

#: ../../library/trace.rst:123
msgid "These options may be repeated multiple times."
msgstr "以下参数可重复多次。"

#: ../../library/trace.rst:129
msgid ""
"Ignore each of the given module names and its submodules (if it is a "
"package).  The argument can be a list of names separated by a comma."
msgstr "忽略给出的模块名及其子模块（若为包）。参数可为逗号分隔的名称列表。"

#: ../../library/trace.rst:134
msgid ""
"Ignore all modules and packages in the named directory and subdirectories. "
"The argument can be a list of directories separated by :data:`os.pathsep`."
msgstr "忽略指定目录及其子目录下的所有模块和包。参数可为 :data:`os.pathsep` 分隔的目录列表。"

#: ../../library/trace.rst:140
msgid "Programmatic Interface"
msgstr "编程接口"

#: ../../library/trace.rst:145
msgid ""
"Create an object to trace execution of a single statement or expression.  "
"All parameters are optional.  *count* enables counting of line numbers.  "
"*trace* enables line execution tracing.  *countfuncs* enables listing of the"
" functions called during the run.  *countcallers* enables call relationship "
"tracking.  *ignoremods* is a list of modules or packages to ignore. "
"*ignoredirs* is a list of directories whose modules or packages should be "
"ignored.  *infile* is the name of the file from which to read stored count "
"information.  *outfile* is the name of the file in which to write updated "
"count information.  *timing* enables a timestamp relative to when tracing "
"was started to be displayed."
msgstr ""
"创建一个对象来跟踪单个语句或表达式的执行。所有参数均为选填。 *count* 可对行号计数。 *trace* 启用单行执行跟踪。 "
"*countfuncs* 可列出运行过程中调用的函数。 *countcallers* 可跟踪调用关系。 *ignoremods* "
"是要忽略的模块或包的列表。*ignoredirs* 是要忽略的模块或包的目录列表。 *infile* 是个文件名，从该文件中读取存储的计数信息。 "
"*outfile* 是用来写入最新计数信息的文件名。 *timing* 可以显示相对于跟踪开始时间的时间戳。"

#: ../../library/trace.rst:158
msgid ""
"Execute the command and gather statistics from the execution with the "
"current tracing parameters.  *cmd* must be a string or code object, suitable"
" for passing into :func:`exec`."
msgstr "执行命令，并根据当前跟踪参数从执行过程中收集统计数据。 *cmd* 必须为字符串或 code 对象，可供传入 :func:`exec`。"

#: ../../library/trace.rst:164
msgid ""
"Execute the command and gather statistics from the execution with the "
"current tracing parameters, in the defined global and local environments.  "
"If not defined, *globals* and *locals* default to empty dictionaries."
msgstr ""
"在定义的全局和局部环境中，执行命令并收集当前跟踪参数下的执行统计数据。若没有定义 *globals* 和 *locals* ，则默认为空字典。"

#: ../../library/trace.rst:171
msgid ""
"Call *func* with the given arguments under control of the :class:`Trace` "
"object with the current tracing parameters."
msgstr "在 :class:`Trace` 对象的控制下，用给定的参数调用 *func*，并采用当前的跟踪参数。"

#: ../../library/trace.rst:176
msgid ""
"Return a :class:`CoverageResults` object that contains the cumulative "
"results of all previous calls to ``run``, ``runctx`` and ``runfunc`` for the"
" given :class:`Trace` instance.  Does not reset the accumulated trace "
"results."
msgstr ""
"返回一个 :class:`CoverageResults` 对象，包含之前对指定 :class:`Trace` 实例调用 "
"``run``、``runctx`` 和 ``runfunc`` 的累积结果。 累积的跟踪结果不会重置。"

#: ../../library/trace.rst:183
msgid ""
"A container for coverage results, created by :meth:`Trace.results`.  Should "
"not be created directly by the user."
msgstr "存放代码覆盖结果的容器，由 :meth:`Trace.results` 创建。用户不应直接去创建。"

#: ../../library/trace.rst:188
msgid "Merge in data from another :class:`CoverageResults` object."
msgstr "从另一个 :class:`CoverageResults` 对象中合并代码覆盖数据。"

#: ../../library/trace.rst:192
msgid ""
"Write coverage results.  Set *show_missing* to show lines that had no hits."
"  Set *summary* to include in the output the coverage summary per module.  "
"*coverdir* specifies the directory into which the coverage result files will"
" be output.  If ``None``, the results for each source file are placed in its"
" directory."
msgstr ""
"写入代码覆盖结果。设置 *show_missing* 可显示未命中的行。设置*summary* 可在输出中包含每个模块的覆盖率摘要信息。 "
"*coverdir* 可指定覆盖率结果文件的输出目录，为  ``None`` 则结果将置于源文件所在目录中。"

#: ../../library/trace.rst:198
msgid "A simple example demonstrating the use of the programmatic interface::"
msgstr "以下例子简单演示了编程接口的用法："
