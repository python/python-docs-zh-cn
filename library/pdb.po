# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pdb.rst:4
msgid ":mod:`pdb` --- The Python Debugger"
msgstr ""

#: ../../library/pdb.rst:9
msgid "**Source code:** :source:`Lib/pdb.py`"
msgstr ""

#: ../../library/pdb.rst:15
msgid ""
"The module :mod:`pdb` defines an interactive source code debugger for Python"
" programs.  It supports setting (conditional) breakpoints and single "
"stepping at the source line level, inspection of stack frames, source code "
"listing, and evaluation of arbitrary Python code in the context of any stack"
" frame.  It also supports post-mortem debugging and can be called under "
"program control."
msgstr ""

#: ../../library/pdb.rst:26
msgid ""
"The debugger is extensible -- it is actually defined as the class "
":class:`Pdb`. This is currently undocumented but easily understood by "
"reading the source.  The extension interface uses the modules :mod:`bdb` and"
" :mod:`cmd`."
msgstr ""

#: ../../library/pdb.rst:34
msgid "Module :mod:`faulthandler`"
msgstr ""

#: ../../library/pdb.rst:33
msgid ""
"Used to dump Python tracebacks explicitly, on a fault, after a timeout, or "
"on a user signal."
msgstr ""

#: ../../library/pdb.rst:36
msgid "Module :mod:`traceback`"
msgstr ""

#: ../../library/pdb.rst:37
msgid ""
"Standard interface to extract, format and print stack traces of Python "
"programs."
msgstr ""

#: ../../library/pdb.rst:39
msgid "The typical usage to break into the debugger is to insert::"
msgstr ""

#: ../../library/pdb.rst:43
msgid "Or::"
msgstr ""

#: ../../library/pdb.rst:47
msgid ""
"at the location you want to break into the debugger, and then run the "
"program. You can then step through the code following this statement, and "
"continue running without the debugger using the :pdbcmd:`continue` command."
msgstr ""

#: ../../library/pdb.rst:51
msgid ""
"The built-in :func:`breakpoint()`, when called with defaults, can be used "
"instead of ``import pdb; pdb.set_trace()``."
msgstr ""

#: ../../library/pdb.rst:63
msgid ""
"The debugger's prompt is ``(Pdb)``, which is the indicator that you are in "
"debug mode::"
msgstr ""

#: ../../library/pdb.rst:72
msgid ""
"Tab-completion via the :mod:`readline` module is available for commands and "
"command arguments, e.g. the current global and local names are offered as "
"arguments of the ``p`` command."
msgstr ""

#: ../../library/pdb.rst:78
msgid ""
"You can also invoke :mod:`pdb` from the command line to debug other scripts."
"  For example::"
msgstr ""

#: ../../library/pdb.rst:83
msgid ""
"When invoked as a module, pdb will automatically enter post-mortem debugging"
" if the program being debugged exits abnormally.  After post-mortem "
"debugging (or after normal exit of the program), pdb will restart the "
"program.  Automatic restarting preserves pdb's state (such as breakpoints) "
"and in most cases is more useful than quitting the debugger upon program's "
"exit."
msgstr ""

#: ../../library/pdb.rst:89
msgid ""
"Added the ``-c`` option to execute commands as if given in a :file:`.pdbrc` "
"file; see :ref:`debugger-commands`."
msgstr ""

#: ../../library/pdb.rst:93
msgid ""
"Added the ``-m`` option to execute modules similar to the way ``python -m`` "
"does. As with a script, the debugger will pause execution just before the "
"first line of the module."
msgstr ""

#: ../../library/pdb.rst:98
msgid ""
"Typical usage to execute a statement under control of the debugger is::"
msgstr ""

#: ../../library/pdb.rst:109
msgid "The typical usage to inspect a crashed program is::"
msgstr ""

#: ../../library/pdb.rst:127
msgid ""
"The module defines the following functions; each enters the debugger in a "
"slightly different way:"
msgstr ""

#: ../../library/pdb.rst:132
msgid ""
"Execute the *statement* (given as a string or a code object) under debugger "
"control.  The debugger prompt appears before any code is executed; you can "
"set breakpoints and type :pdbcmd:`continue`, or you can step through the "
"statement using :pdbcmd:`step` or :pdbcmd:`next` (all these commands are "
"explained below).  The optional *globals* and *locals* arguments specify the"
" environment in which the code is executed; by default the dictionary of the"
" module :mod:`__main__` is used.  (See the explanation of the built-in "
":func:`exec` or :func:`eval` functions.)"
msgstr ""

#: ../../library/pdb.rst:144
msgid ""
"Evaluate the *expression* (given as a string or a code object) under "
"debugger control.  When :func:`runeval` returns, it returns the value of the"
" *expression*.  Otherwise this function is similar to :func:`run`."
msgstr ""

#: ../../library/pdb.rst:151
msgid ""
"Call the *function* (a function or method object, not a string) with the "
"given arguments.  When :func:`runcall` returns, it returns whatever the "
"function call returned.  The debugger prompt appears as soon as the function"
" is entered."
msgstr ""

#: ../../library/pdb.rst:159
msgid ""
"Enter the debugger at the calling stack frame.  This is useful to hard-code "
"a breakpoint at a given point in a program, even if the code is not "
"otherwise being debugged (e.g. when an assertion fails).  If given, *header*"
" is printed to the console just before debugging begins."
msgstr ""

#: ../../library/pdb.rst:164
msgid "The keyword-only argument *header*."
msgstr ""

#: ../../library/pdb.rst:170
msgid ""
"Enter post-mortem debugging of the given *traceback* object.  If no "
"*traceback* is given, it uses the one of the exception that is currently "
"being handled (an exception must be being handled if the default is to be "
"used)."
msgstr ""

#: ../../library/pdb.rst:178
msgid ""
"Enter post-mortem debugging of the traceback found in "
":data:`sys.last_traceback`."
msgstr ""

#: ../../library/pdb.rst:182
msgid ""
"The ``run*`` functions and :func:`set_trace` are aliases for instantiating "
"the :class:`Pdb` class and calling the method of the same name.  If you want"
" to access further features, you have to do this yourself:"
msgstr ""

#: ../../library/pdb.rst:189
msgid ":class:`Pdb` is the debugger class."
msgstr ""

#: ../../library/pdb.rst:191
msgid ""
"The *completekey*, *stdin* and *stdout* arguments are passed to the "
"underlying :class:`cmd.Cmd` class; see the description there."
msgstr ""

#: ../../library/pdb.rst:194
msgid ""
"The *skip* argument, if given, must be an iterable of glob-style module name"
" patterns.  The debugger will not step into frames that originate in a "
"module that matches one of these patterns. [1]_"
msgstr ""

#: ../../library/pdb.rst:198
msgid ""
"By default, Pdb sets a handler for the SIGINT signal (which is sent when the"
" user presses :kbd:`Ctrl-C` on the console) when you give a "
":pdbcmd:`continue` command. This allows you to break into the debugger again"
" by pressing :kbd:`Ctrl-C`.  If you want Pdb not to touch the SIGINT "
"handler, set *nosigint* to true."
msgstr ""

#: ../../library/pdb.rst:203
msgid ""
"The *readrc* argument defaults to true and controls whether Pdb will load "
".pdbrc files from the filesystem."
msgstr ""

#: ../../library/pdb.rst:206
msgid "Example call to enable tracing with *skip*::"
msgstr ""

#: ../../library/pdb.rst:210
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pdb.Pdb`` with no arguments."
msgstr ""

#: ../../library/pdb.rst:212
msgid "Added the *skip* parameter."
msgstr ""

#: ../../library/pdb.rst:215
msgid ""
"Added the *nosigint* parameter. Previously, a SIGINT handler was never set "
"by Pdb."
msgstr ""

#: ../../library/pdb.rst:219
msgid "The *readrc* argument."
msgstr ""

#: ../../library/pdb.rst:227
msgid "See the documentation for the functions explained above."
msgstr ""

#: ../../library/pdb.rst:233
msgid "Debugger Commands"
msgstr ""

#: ../../library/pdb.rst:235
msgid ""
"The commands recognized by the debugger are listed below.  Most commands can"
" be abbreviated to one or two letters as indicated; e.g. ``h(elp)`` means "
"that either ``h`` or ``help`` can be used to enter the help command (but not"
" ``he`` or ``hel``, nor ``H`` or ``Help`` or ``HELP``).  Arguments to "
"commands must be separated by whitespace (spaces or tabs).  Optional "
"arguments are enclosed in square brackets (``[]``) in the command syntax; "
"the square brackets must not be typed.  Alternatives in the command syntax "
"are separated by a vertical bar (``|``)."
msgstr ""

#: ../../library/pdb.rst:244
msgid ""
"Entering a blank line repeats the last command entered.  Exception: if the "
"last command was a :pdbcmd:`list` command, the next 11 lines are listed."
msgstr ""

#: ../../library/pdb.rst:247
msgid ""
"Commands that the debugger doesn't recognize are assumed to be Python "
"statements and are executed in the context of the program being debugged.  "
"Python statements can also be prefixed with an exclamation point (``!``).  "
"This is a powerful way to inspect the program being debugged; it is even "
"possible to change a variable or call a function.  When an exception occurs "
"in such a statement, the exception name is printed but the debugger's state "
"is not changed."
msgstr ""

#: ../../library/pdb.rst:255
msgid ""
"The debugger supports :ref:`aliases <debugger-aliases>`.  Aliases can have "
"parameters which allows one a certain level of adaptability to the context "
"under examination."
msgstr ""

#: ../../library/pdb.rst:259
msgid ""
"Multiple commands may be entered on a single line, separated by ``;;``.  (A "
"single ``;`` is not used as it is the separator for multiple commands in a "
"line that is passed to the Python parser.)  No intelligence is applied to "
"separating the commands; the input is split at the first ``;;`` pair, even "
"if it is in the middle of a quoted string. A workaround for strings with "
"double semicolons is to use implicit string concatenation ``';'';'`` or "
"``\";\"\";\"``."
msgstr ""

#: ../../library/pdb.rst:270
msgid ""
"If a file :file:`.pdbrc` exists in the user's home directory or in the "
"current directory, it is read with ``'utf-8'`` encoding and executed as if "
"it had been typed at the debugger prompt, with the exception that empty "
"lines and lines starting with ``#`` are ignored.  This is particularly "
"useful for aliases.  If both files exist, the one in the home directory is "
"read first and aliases defined there can be overridden by the local file."
msgstr ""

#: ../../library/pdb.rst:277
msgid ""
":file:`.pdbrc` can now contain commands that continue debugging, such as "
":pdbcmd:`continue` or :pdbcmd:`next`.  Previously, these commands had no "
"effect."
msgstr ""

#: ../../library/pdb.rst:282
msgid ""
":file:`.pdbrc` is now read with ``'utf-8'`` encoding. Previously, it was "
"read with the system locale encoding."
msgstr ""

#: ../../library/pdb.rst:289
msgid ""
"Without argument, print the list of available commands.  With a *command* as"
" argument, print help about that command.  ``help pdb`` displays the full "
"documentation (the docstring of the :mod:`pdb` module).  Since the *command*"
" argument must be an identifier, ``help exec`` must be entered to get help "
"on the ``!`` command."
msgstr ""

#: ../../library/pdb.rst:297
msgid ""
"Print a stack trace, with the most recent frame at the bottom.  An arrow "
"(``>``) indicates the current frame, which determines the context of most "
"commands."
msgstr ""

#: ../../library/pdb.rst:302
msgid ""
"Move the current frame *count* (default one) levels down in the stack trace "
"(to a newer frame)."
msgstr ""

#: ../../library/pdb.rst:307
msgid ""
"Move the current frame *count* (default one) levels up in the stack trace "
"(to an older frame)."
msgstr ""

#: ../../library/pdb.rst:312
msgid ""
"With a *lineno* argument, set a break there in the current file.  With a "
"*function* argument, set a break at the first executable statement within "
"that function.  The line number may be prefixed with a filename and a colon,"
" to specify a breakpoint in another file (probably one that hasn't been "
"loaded yet).  The file is searched on :data:`sys.path`.  Note that each "
"breakpoint is assigned a number to which all the other breakpoint commands "
"refer."
msgstr ""

#: ../../library/pdb.rst:319
msgid ""
"If a second argument is present, it is an expression which must evaluate to "
"true before the breakpoint is honored."
msgstr ""

#: ../../library/pdb.rst:322
msgid ""
"Without argument, list all breaks, including for each breakpoint, the number"
" of times that breakpoint has been hit, the current ignore count, and the "
"associated condition if any."
msgstr ""

#: ../../library/pdb.rst:328
msgid ""
"Temporary breakpoint, which is removed automatically when it is first hit. "
"The arguments are the same as for :pdbcmd:`break`."
msgstr ""

#: ../../library/pdb.rst:333
msgid ""
"With a *filename:lineno* argument, clear all the breakpoints at this line. "
"With a space separated list of breakpoint numbers, clear those breakpoints. "
"Without argument, clear all breaks (but first ask confirmation)."
msgstr ""

#: ../../library/pdb.rst:339
msgid ""
"Disable the breakpoints given as a space separated list of breakpoint "
"numbers.  Disabling a breakpoint means it cannot cause the program to stop "
"execution, but unlike clearing a breakpoint, it remains in the list of "
"breakpoints and can be (re-)enabled."
msgstr ""

#: ../../library/pdb.rst:346
msgid "Enable the breakpoints specified."
msgstr ""

#: ../../library/pdb.rst:350
msgid ""
"Set the ignore count for the given breakpoint number.  If *count* is "
"omitted, the ignore count is set to 0.  A breakpoint becomes active when the"
" ignore count is zero.  When non-zero, the *count* is decremented each time "
"the breakpoint is reached and the breakpoint is not disabled and any "
"associated condition evaluates to true."
msgstr ""

#: ../../library/pdb.rst:358
msgid ""
"Set a new *condition* for the breakpoint, an expression which must evaluate "
"to true before the breakpoint is honored.  If *condition* is absent, any "
"existing condition is removed; i.e., the breakpoint is made unconditional."
msgstr ""

#: ../../library/pdb.rst:364
msgid ""
"Specify a list of commands for breakpoint number *bpnumber*.  The commands "
"themselves appear on the following lines.  Type a line containing just "
"``end`` to terminate the commands. An example::"
msgstr ""

#: ../../library/pdb.rst:373
msgid ""
"To remove all commands from a breakpoint, type ``commands`` and follow it "
"immediately with ``end``; that is, give no commands."
msgstr ""

#: ../../library/pdb.rst:376
msgid ""
"With no *bpnumber* argument, ``commands`` refers to the last breakpoint set."
msgstr ""

#: ../../library/pdb.rst:378
msgid ""
"You can use breakpoint commands to start your program up again.  Simply use "
"the :pdbcmd:`continue` command, or :pdbcmd:`step`, or any other command that"
" resumes execution."
msgstr ""

#: ../../library/pdb.rst:382
msgid ""
"Specifying any command resuming execution (currently :pdbcmd:`continue`, "
":pdbcmd:`step`, :pdbcmd:`next`, :pdbcmd:`return`, :pdbcmd:`jump`, "
":pdbcmd:`quit` and their abbreviations) terminates the command list (as if "
"that command was immediately followed by end). This is because any time you "
"resume execution (even with a simple next or step), you may encounter "
"another breakpoint—which could have its own command list, leading to "
"ambiguities about which list to execute."
msgstr ""

#: ../../library/pdb.rst:391
msgid ""
"If you use the ``silent`` command in the command list, the usual message "
"about stopping at a breakpoint is not printed.  This may be desirable for "
"breakpoints that are to print a specific message and then continue.  If none"
" of the other commands print anything, you see no sign that the breakpoint "
"was reached."
msgstr ""

#: ../../library/pdb.rst:398
msgid ""
"Execute the current line, stop at the first possible occasion (either in a "
"function that is called or on the next line in the current function)."
msgstr ""

#: ../../library/pdb.rst:403
msgid ""
"Continue execution until the next line in the current function is reached or"
" it returns.  (The difference between :pdbcmd:`next` and :pdbcmd:`step` is "
"that :pdbcmd:`step` stops inside a called function, while :pdbcmd:`next` "
"executes called functions at (nearly) full speed, only stopping at the next "
"line in the current function.)"
msgstr ""

#: ../../library/pdb.rst:411
msgid ""
"Without argument, continue execution until the line with a number greater "
"than the current one is reached."
msgstr ""

#: ../../library/pdb.rst:414
msgid ""
"With *lineno*, continue execution until a line with a number greater or "
"equal to *lineno* is reached.  In both cases, also stop when the current "
"frame returns."
msgstr ""

#: ../../library/pdb.rst:418
msgid "Allow giving an explicit line number."
msgstr ""

#: ../../library/pdb.rst:423
msgid "Continue execution until the current function returns."
msgstr ""

#: ../../library/pdb.rst:427
msgid "Continue execution, only stop when a breakpoint is encountered."
msgstr ""

#: ../../library/pdb.rst:431
msgid ""
"Set the next line that will be executed.  Only available in the bottom-most "
"frame.  This lets you jump back and execute code again, or jump forward to "
"skip code that you don't want to run."
msgstr ""

#: ../../library/pdb.rst:435
msgid ""
"It should be noted that not all jumps are allowed -- for instance it is not "
"possible to jump into the middle of a :keyword:`for` loop or out of a "
":keyword:`finally` clause."
msgstr ""

#: ../../library/pdb.rst:441
msgid ""
"List source code for the current file.  Without arguments, list 11 lines "
"around the current line or continue the previous listing.  With ``.`` as "
"argument, list 11 lines around the current line.  With one argument, list 11"
" lines around at that line.  With two arguments, list the given range; if "
"the second argument is less than the first, it is interpreted as a count."
msgstr ""

#: ../../library/pdb.rst:447
msgid ""
"The current line in the current frame is indicated by ``->``.  If an "
"exception is being debugged, the line where the exception was originally "
"raised or propagated is indicated by ``>>``, if it differs from the current "
"line."
msgstr ""

#: ../../library/pdb.rst:452
msgid "Added the ``>>`` marker."
msgstr ""

#: ../../library/pdb.rst:457
msgid ""
"List all source code for the current function or frame.  Interesting lines "
"are marked as for :pdbcmd:`list`."
msgstr ""

#: ../../library/pdb.rst:464
msgid "Print the arguments of the current function and their current values."
msgstr ""

#: ../../library/pdb.rst:468
msgid "Evaluate *expression* in the current context and print its value."
msgstr ""

#: ../../library/pdb.rst:472
msgid ""
"``print()`` can also be used, but is not a debugger command --- this "
"executes the Python :func:`print` function."
msgstr ""

#: ../../library/pdb.rst:478
msgid ""
"Like the :pdbcmd:`p` command, except the value of *expression* is pretty-"
"printed using the :mod:`pprint` module."
msgstr ""

#: ../../library/pdb.rst:483
msgid "Print the type of *expression*."
msgstr ""

#: ../../library/pdb.rst:487
msgid "Try to get source code of *expression* and display it."
msgstr ""

#: ../../library/pdb.rst:493
msgid ""
"Display the value of *expression* if it changed, each time execution stops "
"in the current frame."
msgstr ""

#: ../../library/pdb.rst:496
msgid ""
"Without *expression*, list all display expressions for the current frame."
msgstr ""

#: ../../library/pdb.rst:500
msgid ""
"Display evaluates *expression* and compares to the result of the previous "
"evaluation of *expression*, so when the result is mutable, display may not "
"be able to pick up the changes."
msgstr ""

#: ../../library/pdb.rst:504
msgid "Example::"
msgstr ""

#: ../../library/pdb.rst:512
msgid ""
"Display won't realize ``lst`` has been changed because the result of "
"evaluation is modified in place by ``lst.append(1)`` before being compared::"
msgstr ""

#: ../../library/pdb.rst:527
msgid "You can do some tricks with copy mechanism to make it work::"
msgstr ""

#: ../../library/pdb.rst:546
msgid ""
"Do not display *expression* anymore in the current frame.  Without "
"*expression*, clear all display expressions for the current frame."
msgstr ""

#: ../../library/pdb.rst:553
msgid ""
"Start an interactive interpreter (using the :mod:`code` module) whose global"
" namespace contains all the (global and local) names found in the current "
"scope."
msgstr ""

#: ../../library/pdb.rst:563
msgid ""
"Create an alias called *name* that executes *command*.  The *command* must "
"*not* be enclosed in quotes.  Replaceable parameters can be indicated by "
"``%1``, ``%2``, and so on, while ``%*`` is replaced by all the parameters. "
"If *command* is omitted, the current alias for *name* is shown. If no "
"arguments are given, all aliases are listed."
msgstr ""

#: ../../library/pdb.rst:569
msgid ""
"Aliases may be nested and can contain anything that can be legally typed at "
"the pdb prompt.  Note that internal pdb commands *can* be overridden by "
"aliases.  Such a command is then hidden until the alias is removed.  "
"Aliasing is recursively applied to the first word of the command line; all "
"other words in the line are left alone."
msgstr ""

#: ../../library/pdb.rst:575
msgid ""
"As an example, here are two useful aliases (especially when placed in the "
":file:`.pdbrc` file)::"
msgstr ""

#: ../../library/pdb.rst:585
msgid "Delete the specified alias *name*."
msgstr ""

#: ../../library/pdb.rst:589
msgid ""
"Execute the (one-line) *statement* in the context of the current stack "
"frame. The exclamation point can be omitted unless the first word of the "
"statement resembles a debugger command.  To set a global variable, you can "
"prefix the assignment command with a :keyword:`global` statement on the same"
" line, e.g.::"
msgstr ""

#: ../../library/pdb.rst:601
msgid ""
"Restart the debugged Python program.  If *args* is supplied, it is split "
"with :mod:`shlex` and the result is used as the new :data:`sys.argv`. "
"History, breakpoints, actions and debugger options are preserved. "
":pdbcmd:`restart` is an alias for :pdbcmd:`run`."
msgstr ""

#: ../../library/pdb.rst:608
msgid "Quit from the debugger.  The program being executed is aborted."
msgstr ""

#: ../../library/pdb.rst:612
msgid ""
"Enter a recursive debugger that steps through *code* (which is an arbitrary "
"expression or statement to be executed in the current environment)."
msgstr ""

#: ../../library/pdb.rst:618
msgid "Print the return value for the last return of the current function."
msgstr ""

#: ../../library/pdb.rst:621
msgid "Footnotes"
msgstr ""

#: ../../library/pdb.rst:622
msgid ""
"Whether a frame is considered to originate in a certain module is determined"
" by the ``__name__`` in the frame globals."
msgstr ""

#: ../../library/pdb.rst:11
msgid "debugging"
msgstr ""

#: ../../library/pdb.rst:21
msgid "Pdb (class in pdb)"
msgstr ""

#: ../../library/pdb.rst:21
msgid "module"
msgstr ""

#: ../../library/pdb.rst:21
msgid "bdb"
msgstr ""

#: ../../library/pdb.rst:21
msgid "cmd"
msgstr ""

#: ../../library/pdb.rst:266
msgid ".pdbrc"
msgstr ""

#: ../../library/pdb.rst:266
msgid "file"
msgstr ""

#: ../../library/pdb.rst:266
msgid "debugger"
msgstr ""

#: ../../library/pdb.rst:266
msgid "configuration"
msgstr ""
