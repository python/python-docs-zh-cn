# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/importlib.rst:2
msgid ":mod:`!importlib` --- The implementation of :keyword:`!import`"
msgstr ":mod:`!importlib` --- :keyword:`!import` 的实现"

#: ../../library/importlib.rst:12
msgid "**Source code:** :source:`Lib/importlib/__init__.py`"
msgstr "**源代码** :source:`Lib/importlib/__init__.py`"

#: ../../library/importlib.rst:18
msgid "Introduction"
msgstr "概述"

#: ../../library/importlib.rst:20
msgid "The purpose of the :mod:`importlib` package is three-fold."
msgstr ":mod:`importlib` 包具有三重目标。"

#: ../../library/importlib.rst:22
msgid ""
"One is to provide the implementation of the :keyword:`import` statement (and"
" thus, by extension, the :func:`__import__` function) in Python source code."
" This provides an implementation of :keyword:`!import` which is portable to "
"any Python interpreter. This also provides an implementation which is easier"
" to comprehend than one implemented in a programming language other than "
"Python."
msgstr ""
"一是在 Python 源代码中提供 :keyword:`import` 语句的实现（并且因此而扩展 :func:`__import__` 函数）。 "
"这提供了一个可移植到任何 Python 解释器的 :keyword:`!import` 实现。 与使用 Python "
"以外的编程语言实现的方式相比这一实现也更易于理解。"

#: ../../library/importlib.rst:29
msgid ""
"Two, the components to implement :keyword:`import` are exposed in this "
"package, making it easier for users to create their own custom objects "
"(known generically as an :term:`importer`) to participate in the import "
"process."
msgstr ""
"第二个目的是实现 :keyword:`import` 的部分被公开在这个包中，使得用户更容易创建他们自己的自定义对象 (通常被称为 "
":term:`importer`) 来参与到导入过程中。"

#: ../../library/importlib.rst:33
msgid ""
"Three, the package contains modules exposing additional functionality for "
"managing aspects of Python packages:"
msgstr "三，这个包也包含了对外公开用于管理 Python 包的各个方面的附加功能的模块:"

#: ../../library/importlib.rst:36
msgid ""
":mod:`importlib.metadata` presents access to metadata from third-party "
"distributions."
msgstr ":mod:`importlib.metadata` 代表对来自第三方发行版的元数据的访问。"

#: ../../library/importlib.rst:38
msgid ""
":mod:`importlib.resources` provides routines for accessing non-code "
"\"resources\" from Python packages."
msgstr ":mod:`importlib.resources` 提供了用于对来自 Python 包的非代码“资源”的访问的例程。"

#: ../../library/importlib.rst:44
msgid ":ref:`import`"
msgstr ":ref:`import`"

#: ../../library/importlib.rst:44
msgid "The language reference for the :keyword:`import` statement."
msgstr ":keyword:`import` 语句的语言参考"

#: ../../library/importlib.rst:49
msgid ""
"`Packages specification <https://www.python.org/doc/essays/packages/>`__"
msgstr "`包规格说明 <https://www.python.org/doc/essays/packages/>`__"

#: ../../library/importlib.rst:47
msgid ""
"Original specification of packages. Some semantics have changed since the "
"writing of this document (e.g. redirecting based on ``None`` in "
":data:`sys.modules`)."
msgstr ""
"包的初始规范。自从编写这个文档开始，一些语义已经发生改变了（比如基于 :data:`sys.modules` 中 ``None`` 的重定向）。"

#: ../../library/importlib.rst:52
msgid "The :func:`.__import__` function"
msgstr ":func:`.__import__` 函数"

#: ../../library/importlib.rst:52
msgid "The :keyword:`import` statement is syntactic sugar for this function."
msgstr ":keyword:`import` 语句是这个函数的语法糖。"

#: ../../library/importlib.rst:55
msgid ":ref:`sys-path-init`"
msgstr ":ref:`sys-path-init`"

#: ../../library/importlib.rst:55
msgid "The initialization of :data:`sys.path`."
msgstr ":data:`sys.path` 的初始化。"

#: ../../library/importlib.rst:58
msgid ":pep:`235`"
msgstr ":pep:`235`"

#: ../../library/importlib.rst:58
msgid "Import on Case-Insensitive Platforms"
msgstr "在忽略大小写的平台上进行导入"

#: ../../library/importlib.rst:61
msgid ":pep:`263`"
msgstr ":pep:`263`"

#: ../../library/importlib.rst:61
msgid "Defining Python Source Code Encodings"
msgstr "定义 Python 源代码编码"

#: ../../library/importlib.rst:64
msgid ":pep:`302`"
msgstr ":pep:`302`"

#: ../../library/importlib.rst:64
msgid "New Import Hooks"
msgstr "新导入钩子"

#: ../../library/importlib.rst:67
msgid ":pep:`328`"
msgstr ":pep:`328`"

#: ../../library/importlib.rst:67
msgid "Imports: Multi-Line and Absolute/Relative"
msgstr "导入：多行和绝对/相对"

#: ../../library/importlib.rst:70
msgid ":pep:`366`"
msgstr ":pep:`366`"

#: ../../library/importlib.rst:70
msgid "Main module explicit relative imports"
msgstr "主模块显式相对导入"

#: ../../library/importlib.rst:73
msgid ":pep:`420`"
msgstr ":pep:`420`"

#: ../../library/importlib.rst:73
msgid "Implicit namespace packages"
msgstr "隐式命名空间包"

#: ../../library/importlib.rst:76
msgid ":pep:`451`"
msgstr ":pep:`451`"

#: ../../library/importlib.rst:76
msgid "A ModuleSpec Type for the Import System"
msgstr "导入系统的一个模块规范类型"

#: ../../library/importlib.rst:79
msgid ":pep:`488`"
msgstr ":pep:`488`"

#: ../../library/importlib.rst:79
msgid "Elimination of PYO files"
msgstr "消除PYO文件"

#: ../../library/importlib.rst:82
msgid ":pep:`489`"
msgstr ":pep:`489`"

#: ../../library/importlib.rst:82
msgid "Multi-phase extension module initialization"
msgstr "多阶段扩展模块初始化"

#: ../../library/importlib.rst:85
msgid ":pep:`552`"
msgstr ":pep:`552`"

#: ../../library/importlib.rst:85
msgid "Deterministic pycs"
msgstr "确定性的 pyc 文件"

#: ../../library/importlib.rst:88
msgid ":pep:`3120`"
msgstr ":pep:`3120`"

#: ../../library/importlib.rst:88
msgid "Using UTF-8 as the Default Source Encoding"
msgstr "使用 UTF-8 作为默认的源编码"

#: ../../library/importlib.rst:90
msgid ":pep:`3147`"
msgstr ":pep:`3147`"

#: ../../library/importlib.rst:91
msgid "PYC Repository Directories"
msgstr "PYC 仓库目录"

#: ../../library/importlib.rst:95
msgid "Functions"
msgstr "函数"

#: ../../library/importlib.rst:99
msgid "An implementation of the built-in :func:`__import__` function."
msgstr "内置 :func:`__import__` 函数的实现。"

#: ../../library/importlib.rst:102
msgid ""
"Programmatic importing of modules should use :func:`import_module` instead "
"of this function."
msgstr "程序式地导入模块应该使用 :func:`import_module` 而不是这个函数。"

#: ../../library/importlib.rst:107
msgid ""
"Import a module. The *name* argument specifies what module to import in "
"absolute or relative terms (e.g. either ``pkg.mod`` or ``..mod``). If the "
"name is specified in relative terms, then the *package* argument must be set"
" to the name of the package which is to act as the anchor for resolving the "
"package name (e.g. ``import_module('..mod', 'pkg.subpkg')`` will import "
"``pkg.mod``)."
msgstr ""
"导入一个模块。 参数 *name* 指定了以绝对或相对导入方式导入什么模块 (比如要么像这样 ``pkg.mod`` 或者这样 ``..mod``)。 "
"如果参数 name 使用相对导入的方式来指定，那么 *package* 参数必须设置为那个包名，这个包名作为解析这个包名的锚点 (比如  "
"``import_module('..mod', 'pkg.subpkg')`` 将会导入 ``pkg.mod``)。"

#: ../../library/importlib.rst:115
msgid ""
"The :func:`import_module` function acts as a simplifying wrapper around "
":func:`importlib.__import__`. This means all semantics of the function are "
"derived from :func:`importlib.__import__`. The most important difference "
"between these two functions is that :func:`import_module` returns the "
"specified package or module (e.g. ``pkg.mod``), while :func:`__import__` "
"returns the top-level package or module (e.g. ``pkg``)."
msgstr ""
":func:`import_module` 函数是一个对 :func:`importlib.__import__` 进行简化的包装器。 "
"这意味着该函数的所有语义都来自于 :func:`importlib.__import__`。 这两个函数之间最重要的不同点在于 "
":func:`import_module` 返回指定的包或模块 (例如 ``pkg.mod``)，而 :func:`__import__` "
"返回最高层级的包或模块 (例如 ``pkg``)。"

#: ../../library/importlib.rst:122
msgid ""
"If you are dynamically importing a module that was created since the "
"interpreter began execution (e.g., created a Python source file), you may "
"need to call :func:`invalidate_caches` in order for the new module to be "
"noticed by the import system."
msgstr ""
"如果动态导入一个自解释器开始执行以来被创建的模块（即创建了一个 Python 源代码文件），为了让导入系统知道这个新模块，可能需要调用 "
":func:`invalidate_caches`。"

#: ../../library/importlib.rst:127
msgid "Parent packages are automatically imported."
msgstr "父包会被自动导入。"

#: ../../library/importlib.rst:132
msgid ""
"Find the loader for a module, optionally within the specified *path*. If the"
" module is in :attr:`sys.modules`, then ``sys.modules[name].__loader__`` is "
"returned (unless the loader would be ``None`` or is not set, in which case "
":exc:`ValueError` is raised). Otherwise a search using :attr:`sys.meta_path`"
" is done. ``None`` is returned if no loader is found."
msgstr ""

#: ../../library/importlib.rst:138
msgid ""
"A dotted name does not have its parents implicitly imported as that requires"
" loading them and that may not be desired. To properly import a submodule "
"you will need to import all parent packages of the submodule and use the "
"correct argument to *path*."
msgstr ""

#: ../../library/importlib.rst:145
msgid ""
"If ``__loader__`` is not set, raise :exc:`ValueError`, just like when the "
"attribute is set to ``None``."
msgstr ""

#: ../../library/importlib.rst:149
msgid "Use :func:`importlib.util.find_spec` instead."
msgstr "使用 :func:`importlib.util.find_spec` 来代替。"

#: ../../library/importlib.rst:154
msgid ""
"Invalidate the internal caches of finders stored at :data:`sys.meta_path`. "
"If a finder implements ``invalidate_caches()`` then it will be called to "
"perform the invalidation.  This function should be called if any modules are"
" created/installed while your program is running to guarantee all finders "
"will notice the new module's existence."
msgstr ""
"使查找器存储在 :data:`sys.meta_path` 中的内部缓存无效。如果一个查找器实现了 "
"``invalidate_caches()``，那么它会被调用来执行那个无效过程。 "
"如果创建/安装任何模块，同时正在运行的程序是为了保证所有的查找器知道新模块的存在，那么应该调用这个函数。"

#: ../../library/importlib.rst:162
msgid ""
"Namespace packages created/installed in a different :data:`sys.path` "
"location after the same namespace was already imported are noticed."
msgstr "当注意到相同命名空间已被导入之后在不同 :data:`sys.path` 位置中创建/安装的命名空间包。"

#: ../../library/importlib.rst:168
msgid ""
"Reload a previously imported *module*.  The argument must be a module "
"object, so it must have been successfully imported before.  This is useful "
"if you have edited the module source file using an external editor and want "
"to try out the new version without leaving the Python interpreter.  The "
"return value is the module object (which can be different if re-importing "
"causes a different object to be placed in :data:`sys.modules`)."
msgstr ""
"重新加载之前导入的 *module*。 那个参数必须是一个模块对象，所以它之前必须已经成功导入了。 "
"这在你已经使用外部编辑器编辑过了那个模块的源代码文件并且想在退出 Python 解释器之前试验这个新版本的模块的时候将很适用。 "
"函数的返回值是那个模块对象（如果重新导入导致一个不同的对象放置在 :data:`sys.modules` 中，那么那个模块对象是有可能会不同）。"

#: ../../library/importlib.rst:175
msgid "When :func:`reload` is executed:"
msgstr "当执行 :func:`reload` 的时候："

#: ../../library/importlib.rst:177
msgid ""
"Python module's code is recompiled and the module-level code re-executed, "
"defining a new set of objects which are bound to names in the module's "
"dictionary by reusing the :term:`loader` which originally loaded the module."
"  The ``init`` function of extension modules is not called a second time."
msgstr ""
"Python 模块的代码会被重新编译并且那个模块级的代码被重新执行，通过重新使用一开始加载那个模块的 "
":term:`loader`，定义一个新的绑定在那个模块字典中的名称的对象集合。扩展模块的 ``init`` 函数不会被调用第二次。"

#: ../../library/importlib.rst:183
msgid ""
"As with all other objects in Python the old objects are only reclaimed after"
" their reference counts drop to zero."
msgstr "与Python中的所有的其它对象一样，旧的对象只有在它们的引用计数为0之后才会被回收。"

#: ../../library/importlib.rst:186
msgid ""
"The names in the module namespace are updated to point to any new or changed"
" objects."
msgstr "模块命名空间中的名称重新指向任何新的或更改后的对象。"

#: ../../library/importlib.rst:189
msgid ""
"Other references to the old objects (such as names external to the module) "
"are not rebound to refer to the new objects and must be updated in each "
"namespace where they occur if that is desired."
msgstr "其他旧对象的引用（例如那个模块的外部名称）不会被重新绑定到引用的新对象的，并且如果有需要，必须在出现的每个命名空间中进行更新。"

#: ../../library/importlib.rst:193
msgid "There are a number of other caveats:"
msgstr "有一些其他注意事项："

#: ../../library/importlib.rst:195
msgid ""
"When a module is reloaded, its dictionary (containing the module's global "
"variables) is retained.  Redefinitions of names will override the old "
"definitions, so this is generally not a problem.  If the new version of a "
"module does not define a name that was defined by the old version, the old "
"definition remains.  This feature can be used to the module's advantage if "
"it maintains a global table or cache of objects --- with a :keyword:`try` "
"statement it can test for the table's presence and skip its initialization "
"if desired::"
msgstr ""
"当一个模块被重新加载的时候，它的字典（包含了那个模块的全区变量）会被保留。名称的重新定义会覆盖旧的定义，所以通常来说这不是问题。如果一个新模块没有定义在旧版本模块中定义的名称，则将保留旧版本中的定义。这一特性可用于作为那个模块的优点，如果它维护一个全局表或者对象的缓存"
" —— 使用 :keyword:`try` 语句，就可以测试表的存在并且跳过它的初始化，如果有需要的话::"

#: ../../library/importlib.rst:209
msgid ""
"It is generally not very useful to reload built-in or dynamically loaded "
"modules.  Reloading :mod:`sys`, :mod:`__main__`, :mod:`builtins` and other "
"key modules is not recommended.  In many cases extension modules are not "
"designed to be initialized more than once, and may fail in arbitrary ways "
"when reloaded."
msgstr ""
"重新加载内置的或者动态加载模块，通常来说不是很有用处。不推荐重新加载\":mod:`sys`，:mod:`__main__`，:mod:`builtins`"
" 和其它关键模块。在很多例子中，扩展模块并不是设计为不止一次的初始化，并且当重新加载时，可能会以任意方式失败。"

#: ../../library/importlib.rst:215
msgid ""
"If a module imports objects from another module using :keyword:`from` ... "
":keyword:`import` ..., calling :func:`reload` for the other module does not "
"redefine the objects imported from it --- one way around this is to re-"
"execute the :keyword:`!from` statement, another is to use :keyword:`!import`"
" and qualified names (*module.name*) instead."
msgstr ""
"如果一个模块使用 :keyword:`from` ... :keyword:`import` ... 导入的对象来自另外一个模块，给其它模块调用 "
":func:`reload` 不会重新定义来自这个模块的对象 —— 解决这个问题的一种方式是重新执行 :keyword:`!from` "
"语句，另一种方式是使用 :keyword:`!import` 和限定名称(*module.name*)来代替。"

#: ../../library/importlib.rst:221
msgid ""
"If a module instantiates instances of a class, reloading the module that "
"defines the class does not affect the method definitions of the instances "
"--- they continue to use the old class definition.  The same is true for "
"derived classes."
msgstr "如果一个模块创建一个类的实例，重新加载定义那个类的模块不影响那些实例的方法定义———它们继续使用旧类中的定义。对于子类来说同样是正确的。"

#: ../../library/importlib.rst:227
msgid ""
":exc:`ModuleNotFoundError` is raised when the module being reloaded lacks a "
":class:`~importlib.machinery.ModuleSpec`."
msgstr ""
"如果重新加载的模块缺少  :class:`~importlib.machinery.ModuleSpec` ，则会触发 "
":exc:`ModuleNotFoundError` 。"

#: ../../library/importlib.rst:233
msgid ":mod:`importlib.abc` -- Abstract base classes related to import"
msgstr ":mod:`importlib.abc` —— 关于导入的抽象基类"

#: ../../library/importlib.rst:238
msgid "**Source code:** :source:`Lib/importlib/abc.py`"
msgstr "**源代码：** :source:`Lib/importlib/abc.py`"

#: ../../library/importlib.rst:243
msgid ""
"The :mod:`importlib.abc` module contains all of the core abstract base "
"classes used by :keyword:`import`. Some subclasses of the core abstract base"
" classes are also provided to help in implementing the core ABCs."
msgstr ""
":mod:`importlib.abc` 模块包含了 :keyword:`import` 使用到的所有核心抽象基类。在实现核心的 ABCs "
"中，核心抽象基类的一些子类也提供了帮助。"

#: ../../library/importlib.rst:247
msgid "ABC hierarchy::"
msgstr "ABC 类的层次结构："

#: ../../library/importlib.rst:263
msgid "An abstract base class representing a :term:`finder`."
msgstr ""

#: ../../library/importlib.rst:265
msgid "Use :class:`MetaPathFinder` or :class:`PathEntryFinder` instead."
msgstr ""

#: ../../library/importlib.rst:270
msgid ""
"An abstract method for finding a :term:`loader` for the specified module.  "
"Originally specified in :pep:`302`, this method was meant for use in "
":data:`sys.meta_path` and in the path-based import subsystem."
msgstr ""

#: ../../library/importlib.rst:274
msgid ""
"Returns ``None`` when called instead of raising :exc:`NotImplementedError`."
msgstr ""

#: ../../library/importlib.rst:278
msgid ""
"Implement :meth:`MetaPathFinder.find_spec` or "
":meth:`PathEntryFinder.find_spec` instead."
msgstr ""

#: ../../library/importlib.rst:285
msgid "An abstract base class representing a :term:`meta path finder`."
msgstr "一个代表 :term:`meta path finder` 的抽象基类。"

#: ../../library/importlib.rst:289 ../../library/importlib.rst:344
msgid "No longer a subclass of :class:`Finder`."
msgstr "不再是 :class:`Finder` 的子类。"

#: ../../library/importlib.rst:294
msgid ""
"An abstract method for finding a :term:`spec <module spec>` for the "
"specified module.  If this is a top-level import, *path* will be ``None``.  "
"Otherwise, this is a search for a subpackage or module and *path* will be "
"the value of :attr:`__path__` from the parent package. If a spec cannot be "
"found, ``None`` is returned. When passed in, ``target`` is a module object "
"that the finder may use to make a more educated guess about what spec to "
"return. :func:`importlib.util.spec_from_loader` may be useful for "
"implementing concrete ``MetaPathFinders``."
msgstr ""
"一个抽象方法，用于查找指定模块的 :term:`spec <module spec>` 。若是顶层导入，*path* 将为 ``None``。 "
"否则就是查找子包或模块，*path* 将是父级包的 :attr:`__path__` 值。找不到则会返回 ``None``。传入的 ``target``"
" 是一个模块对象，查找器可以用来对返回的规格进行更有依据的猜测。在实现具体的 ``MetaPathFinders`` 代码时，可能会用到 "
":func:`importlib.util.spec_from_loader` 。"

#: ../../library/importlib.rst:308
msgid ""
"A legacy method for finding a :term:`loader` for the specified module.  If "
"this is a top-level import, *path* will be ``None``. Otherwise, this is a "
"search for a subpackage or module and *path* will be the value of "
":attr:`__path__` from the parent package. If a loader cannot be found, "
"``None`` is returned."
msgstr ""

#: ../../library/importlib.rst:314
msgid ""
"If :meth:`find_spec` is defined, backwards-compatible functionality is "
"provided."
msgstr ""

#: ../../library/importlib.rst:317
msgid ""
"Returns ``None`` when called instead of raising :exc:`NotImplementedError`. "
"Can use :meth:`find_spec` to provide functionality."
msgstr ""

#: ../../library/importlib.rst:322 ../../library/importlib.rst:378
#: ../../library/importlib.rst:386 ../../library/importlib.rst:902
#: ../../library/importlib.rst:959
msgid "Use :meth:`find_spec` instead."
msgstr "使用 :meth:`find_spec` 代替。"

#: ../../library/importlib.rst:327
msgid ""
"An optional method which, when called, should invalidate any internal cache "
"used by the finder. Used by :func:`importlib.invalidate_caches` when "
"invalidating the caches of all finders on :data:`sys.meta_path`."
msgstr ""
"当被调用的时候，一个可选的方法应该将查找器使用的任何内部缓存进行无效。将在 :data:`sys.meta_path` "
"上的所有查找器的缓存进行无效的时候，这个函数被 :func:`importlib.invalidate_caches` 所使用。"

#: ../../library/importlib.rst:331
msgid "Returns ``None`` when called instead of :data:`NotImplemented`."
msgstr "当被调用时将返回 ``None`` 而不是 :data:`NotImplemented`。"

#: ../../library/importlib.rst:337
msgid ""
"An abstract base class representing a :term:`path entry finder`.  Though it "
"bears some similarities to :class:`MetaPathFinder`, ``PathEntryFinder`` is "
"meant for use only within the path-based import subsystem provided by "
":class:`importlib.machinery.PathFinder`."
msgstr ""
"一个抽象基类，代表  :term:`path entry finder`。虽然与 :class:`MetaPathFinder` 有些相似之处，但 "
"`PathEntryFinder` 仅用于 :class:`importlib.machinery.PathFinder` "
"提供的基于路径的导入子系统中。"

#: ../../library/importlib.rst:349
msgid ""
"An abstract method for finding a :term:`spec <module spec>` for the "
"specified module.  The finder will search for the module only within the "
":term:`path entry` to which it is assigned.  If a spec cannot be found, "
"``None`` is returned.  When passed in, ``target`` is a module object that "
"the finder may use to make a more educated guess about what spec to return. "
":func:`importlib.util.spec_from_loader` may be useful for implementing "
"concrete ``PathEntryFinders``."
msgstr ""
"一个抽象方法，用于查找指定模块的 :term:`spec <module spec>`。搜索器将只在指定的 :term:`path entry` "
"内搜索该模块。找不到则会返回 ``None``。在实现具体的 ``PathEntryFinders`` 代码时，可能会用到  "
":func:`importlib.util.spec_from_loader` 。"

#: ../../library/importlib.rst:361
msgid ""
"A legacy method for finding a :term:`loader` for the specified module.  "
"Returns a 2-tuple of ``(loader, portion)`` where ``portion`` is a sequence "
"of file system locations contributing to part of a namespace package. The "
"loader may be ``None`` while specifying ``portion`` to signify the "
"contribution of the file system locations to a namespace package. An empty "
"list can be used for ``portion`` to signify the loader is not part of a "
"namespace package. If ``loader`` is ``None`` and ``portion`` is the empty "
"list then no loader or location for a namespace package were found (i.e. "
"failure to find anything for the module)."
msgstr ""

#: ../../library/importlib.rst:371
msgid ""
"If :meth:`find_spec` is defined then backwards-compatible functionality is "
"provided."
msgstr ""

#: ../../library/importlib.rst:374
msgid ""
"Returns ``(None, [])`` instead of raising :exc:`NotImplementedError`. Uses "
":meth:`find_spec` when available to provide functionality."
msgstr ""

#: ../../library/importlib.rst:383
msgid ""
"A concrete implementation of :meth:`Finder.find_module` which is equivalent "
"to ``self.find_loader(fullname)[0]``."
msgstr ""

#: ../../library/importlib.rst:391
msgid ""
"An optional method which, when called, should invalidate any internal cache "
"used by the finder. Used by "
":meth:`importlib.machinery.PathFinder.invalidate_caches` when invalidating "
"the caches of all cached finders."
msgstr ""
"可选方法，调用后应让查找器用到的所有内部缓存失效。要让所有缓存的查找器的缓存无效时，可供 "
":meth:`importlib.machinery.PathFinder.invalidate_caches` 调用。"

#: ../../library/importlib.rst:399
msgid ""
"An abstract base class for a :term:`loader`. See :pep:`302` for the exact "
"definition for a loader."
msgstr ":term:`loader` 的抽象基类。 关于一个加载器的实际定义请查看 :pep:`302`。"

#: ../../library/importlib.rst:402
msgid ""
"Loaders that wish to support resource reading should implement a "
":meth:`get_resource_reader` method as specified by "
":class:`importlib.resources.abc.ResourceReader`."
msgstr ""
"想要支持资源读取的加载器应当实现 :class:`importlib.resources.abc.ResourceReader` 所规定的 "
":meth:`get_resource_reader` 方法。"

#: ../../library/importlib.rst:406
msgid "Introduced the optional :meth:`get_resource_reader` method."
msgstr "引入了可选的 :meth:`get_resource_reader` 方法。"

#: ../../library/importlib.rst:411
msgid ""
"A method that returns the module object to use when importing a module.  "
"This method may return ``None``, indicating that default module creation "
"semantics should take place."
msgstr "当导入一个模块的时候，一个返回将要使用的那个模块对象的方法。这个方法可能返回 ``None`` ，这暗示着应该发生默认的模块创建语义。\""

#: ../../library/importlib.rst:417
msgid "This method is no longer optional when :meth:`exec_module` is defined."
msgstr "当 :meth:`exec_module` 已定义时此方法将不再是可选项。"

#: ../../library/importlib.rst:423
msgid ""
"An abstract method that executes the module in its own namespace when a "
"module is imported or reloaded.  The module should already be initialized "
"when :meth:`exec_module` is called.  When this method exists, "
":meth:`create_module` must be defined."
msgstr ""
"当一个模块被导入或重新加载时在自己的命名空间中执行该模块的的抽象方法。 该模块在 :meth:`exec_module` 被调用时应该已经被初始化了。 "
"当此方法存在时，必须要定义 :meth:`create_module`。"

#: ../../library/importlib.rst:430
msgid ":meth:`create_module` must also be defined."
msgstr ":meth:`create_module` 也必须要定义。"

#: ../../library/importlib.rst:435
msgid ""
"A legacy method for loading a module.  If the module cannot be loaded, "
":exc:`ImportError` is raised, otherwise the loaded module is returned."
msgstr "用于加载模块的传统方法。 如果模块无法被导入，则会引发 :exc:`ImportError`，在其他情况下将返回被加载的模块。"

#: ../../library/importlib.rst:439
msgid ""
"If the requested module already exists in :data:`sys.modules`, that module "
"should be used and reloaded. Otherwise the loader should create a new module"
" and insert it into :data:`sys.modules` before any loading begins, to "
"prevent recursion from the import.  If the loader inserted a module and the "
"load fails, it must be removed by the loader from :data:`sys.modules`; "
"modules already in :data:`sys.modules` before the loader began execution "
"should be left alone (see :func:`importlib.util.module_for_loader`)."
msgstr ""

#: ../../library/importlib.rst:448
msgid ""
"The loader should set several attributes on the module (note that some of "
"these attributes can change when a module is reloaded):"
msgstr "加载器应当在模块上设置几个属性（请注意在模块被重新加载时这些属性有几个可能发生改变）:"

#: ../../library/importlib.rst:454
msgid ":attr:`__name__`"
msgstr ":attr:`__name__`"

#: ../../library/importlib.rst:453
msgid ""
"The module's fully qualified name. It is ``'__main__'`` for an executed "
"module."
msgstr "模块的完整限定名称。 对于被执行的模块来说是 ``'__main__'``。"

#: ../../library/importlib.rst:459
msgid ":attr:`__file__`"
msgstr ":attr:`__file__`"

#: ../../library/importlib.rst:457
msgid ""
"The location the :term:`loader` used to load the module. For example, for "
"modules loaded from a .py file this is the filename. It is not set on all "
"modules (e.g. built-in modules)."
msgstr ""
"被 :term:`loader` 用于加载指定模块的位置。 例如，对于从一个 .py 文件加载的模块来说即文件名。 "
"这不一定会在所有模块上设置（例如内置模块就不会设置）。"

#: ../../library/importlib.rst:463
msgid ":attr:`__cached__`"
msgstr ":attr:`__cached__`"

#: ../../library/importlib.rst:462
msgid ""
"The filename of a compiled version of the module's code. It is not set on "
"all modules (e.g. built-in modules)."
msgstr "模块代码的编译版本的文件名。 这不一定会在所有模块上设置（例如内置模块就不会设置）。"

#: ../../library/importlib.rst:471
msgid ":attr:`__path__`"
msgstr ":attr:`__path__`"

#: ../../library/importlib.rst:466
msgid ""
"The list of locations where the package's submodules will be found. Most of "
"the time this is a single directory. The import system passes this attribute"
" to ``__import__()`` and to finders in the same way as :data:`sys.path` but "
"just for the package. It is not set on non-package modules so it can be used"
" as an indicator that the module is a package."
msgstr ""
"用于查找指定包的子模块的位置列表。 在大多数时候这将为单个目录。 导入系统会以与 :data:`sys.path` "
"相同但专门针对指定包的方式将此属性传给 ``__import__()`` 和查找器。 这不会在非包模块上设置因此它可以被用作确定模块是否为包的指示器。"

#: ../../library/importlib.rst:476
msgid ":attr:`__package__`"
msgstr ":attr:`__package__`"

#: ../../library/importlib.rst:474
msgid ""
"The fully qualified name of the package the module is in (or the empty "
"string for a top-level module). If the module is a package then this is the "
"same as :attr:`__name__`."
msgstr "指定模块所在包的完整限定名称（或者对于最高层级模块来说则为空字符串）。 如果模块是包则它将与 :attr:`__name__` 相同。"

#: ../../library/importlib.rst:479
msgid ":attr:`__loader__`"
msgstr ":attr:`__loader__`"

#: ../../library/importlib.rst:479
msgid "The :term:`loader` used to load the module."
msgstr "用于加载模块的 :term:`loader`。"

#: ../../library/importlib.rst:481
msgid ""
"When :meth:`exec_module` is available then backwards-compatible "
"functionality is provided."
msgstr "当 :meth:`exec_module` 可用的时候，那么则提供了向后兼容的功能。"

#: ../../library/importlib.rst:484
msgid ""
"Raise :exc:`ImportError` when called instead of :exc:`NotImplementedError`."
"  Functionality provided when :meth:`exec_module` is available."
msgstr ""
"当被调用时将引发 :exc:`ImportError` 而不是 :exc:`NotImplementedError`。 在 "
":meth:`exec_module` 可用时提供的功能。"

#: ../../library/importlib.rst:489
msgid ""
"The recommended API for loading a module is :meth:`exec_module` (and "
":meth:`create_module`).  Loaders should implement it instead of "
":meth:`load_module`.  The import machinery takes care of all the other "
"responsibilities of :meth:`load_module` when :meth:`exec_module` is "
"implemented."
msgstr ""
"用于加载模块的推荐 API 是 :meth:`exec_module` (和 :meth:`create_module`)。 加载器应该实现它而不是 "
":meth:`load_module`。 当实现了 :meth:`exec_module` 时导入机制将会承担 :meth:`load_module` "
"的所有其他责任。"

#: ../../library/importlib.rst:498
msgid ""
"A legacy method which when implemented calculates and returns the given "
"module's representation, as a string.  The module type's default "
":meth:`__repr__` will use the result of this method as appropriate."
msgstr ""

#: ../../library/importlib.rst:504
msgid "Made optional instead of an abstractmethod."
msgstr ""

#: ../../library/importlib.rst:507
msgid "The import machinery now takes care of this automatically."
msgstr ""

#: ../../library/importlib.rst:513
msgid ""
"An abstract base class for a :term:`loader` which implements the optional "
":pep:`302` protocol for loading arbitrary resources from the storage back-"
"end."
msgstr "一个 :term:`loader` 的抽象基类，它实现了可选的 :pep:`302` 协议用于从存储后端加载任意资源。"

#: ../../library/importlib.rst:517
msgid ""
"This ABC is deprecated in favour of supporting resource loading through "
":class:`importlib.resources.abc.ResourceReader`."
msgstr ""
"这个 ABC 已被弃用并转为通过 :class:`importlib.resources.abc.ResourceReader` 来支持资源加载。"

#: ../../library/importlib.rst:523
msgid ""
"An abstract method to return the bytes for the data located at *path*. "
"Loaders that have a file-like storage back-end that allows storing arbitrary"
" data can implement this abstract method to give direct access to the data "
"stored. :exc:`OSError` is to be raised if the *path* cannot be found. The "
"*path* is expected to be constructed using a module's :attr:`__file__` "
"attribute or an item from a package's :attr:`__path__`."
msgstr ""
"一个用于返回位于 *path* "
"的字节数据的抽象方法。有一个允许存储任意数据的类文件存储后端的加载器能够实现这个抽象方法来直接访问这些被存储的数据。如果不能够找到 "
"*path*，则会引发 :exc:`OSError` 异常。*path* 被希望使用一个模块的 :attr:`__file` 属性或来自一个包的 "
":attr:`__path__` 来构建。"

#: ../../library/importlib.rst:531
msgid "Raises :exc:`OSError` instead of :exc:`NotImplementedError`."
msgstr "引发 :exc:`OSError` 异常而不是 :exc:`NotImplementedError` 异常。"

#: ../../library/importlib.rst:537
msgid ""
"An abstract base class for a :term:`loader` which implements the optional "
":pep:`302` protocol for loaders that inspect modules."
msgstr "一个实现加载器检查模块可选的 :pep:`302` 协议的 :term:`loader` 的抽象基类。"

#: ../../library/importlib.rst:542
msgid ""
"Return the code object for a module, or ``None`` if the module does not have"
" a code object (as would be the case, for example, for a built-in module).  "
"Raise an :exc:`ImportError` if loader cannot find the requested module."
msgstr ""
"返回一个模块的代码对象，或如果模块没有一个代码对象（例如，对于内置的模块来说，这会是这种情况），则为 ``None``。 "
"如果加载器不能找到请求的模块，则引发 :exc:`ImportError` 异常。"

#: ../../library/importlib.rst:548
msgid ""
"While the method has a default implementation, it is suggested that it be "
"overridden if possible for performance."
msgstr "当这个方法有一个默认的实现的时候，出于性能方面的考虑，如果有可能的话，建议覆盖它。"

#: ../../library/importlib.rst:554
msgid "No longer abstract and a concrete implementation is provided."
msgstr "不再抽象并且提供一个具体的实现。"

#: ../../library/importlib.rst:559
msgid ""
"An abstract method to return the source of a module. It is returned as a "
"text string using :term:`universal newlines`, translating all recognized "
"line separators into ``'\\n'`` characters.  Returns ``None`` if no source is"
" available (e.g. a built-in module). Raises :exc:`ImportError` if the loader"
" cannot find the module specified."
msgstr ""
"一个返回模块源的抽象方法。使用 :term:`universal newlines` 作为文本字符串被返回，将所有可识别行分割符翻译成 "
"``'\\n'`` 字符。 如果没有可用的源（例如，一个内置模块），则返回 ``None``。 如果加载器不能找到指定的模块，则引发 "
":exc:`ImportError` 异常。"

#: ../../library/importlib.rst:565 ../../library/importlib.rst:574
#: ../../library/importlib.rst:624
msgid "Raises :exc:`ImportError` instead of :exc:`NotImplementedError`."
msgstr "引发 :exc:`ImportError` 而不是 :exc:`NotImplementedError`。"

#: ../../library/importlib.rst:570
msgid ""
"An optional method to return a true value if the module is a package, a "
"false value otherwise. :exc:`ImportError` is raised if the :term:`loader` "
"cannot find the module."
msgstr ""
"可选方法，如果模块为包，则返回 True，否则返回 False。 如果 :term:`loader` 找不到模块，则会触发 "
":exc:`ImportError`。"

#: ../../library/importlib.rst:579
msgid "Create a code object from Python source."
msgstr "创建一个来自Python源码的代码对象。"

#: ../../library/importlib.rst:581
msgid ""
"The *data* argument can be whatever the :func:`compile` function supports "
"(i.e. string or bytes). The *path* argument should be the \"path\" to where "
"the source code originated from, which can be an abstract concept (e.g. "
"location in a zip file)."
msgstr ""
"参数 *data* 可以是任意 :func:`compile` 函数支持的类型（例如字符串或字节串）。 参数 *path* "
"应该是源代码来源的路径，这可能是一个抽象概念（例如位于一个 zip 文件中）。"

#: ../../library/importlib.rst:586
msgid ""
"With the subsequent code object one can execute it in a module by running "
"``exec(code, module.__dict__)``."
msgstr "在有后续代码对象的情况下，可以在一个模块中通过运行 ``exec(code, module.__dict__)`` 来执行它。"

#: ../../library/importlib.rst:591
msgid "Made the method static."
msgstr "使得这个方法变成静态的。"

#: ../../library/importlib.rst:596
msgid "Implementation of :meth:`Loader.exec_module`."
msgstr ":meth:`Loader.exec_module` 的实现。"

#: ../../library/importlib.rst:602
msgid "Implementation of :meth:`Loader.load_module`."
msgstr ":meth:`Loader.load_module` 的实现。"

#: ../../library/importlib.rst:604
msgid "use :meth:`exec_module` instead."
msgstr "使用 :meth:`exec_module` 来代替。"

#: ../../library/importlib.rst:610
msgid ""
"An abstract base class which inherits from :class:`InspectLoader` that, when"
" implemented, helps a module to be executed as a script. The ABC represents "
"an optional :pep:`302` protocol."
msgstr ""
"一个继承自 :class:`InspectLoader` 的抽象基类，当被实现时，帮助一个模块作为脚本来执行。 这个抽象基类表示可选的 "
":pep:`302` 协议。"

#: ../../library/importlib.rst:616
msgid ""
"An abstract method that is to return the value of :attr:`__file__` for the "
"specified module. If no path is available, :exc:`ImportError` is raised."
msgstr "一个用来为指定模块返回 :attr:`__file__` 的值的抽象方法。如果无路径可用，则引发 :exc:`ImportError`。"

#: ../../library/importlib.rst:620
msgid ""
"If source code is available, then the method should return the path to the "
"source file, regardless of whether a bytecode was used to load the module."
msgstr "如果源代码可用，那么这个方法返回源文件的路径，不管是否是用来加载模块的字节码。"

#: ../../library/importlib.rst:630
msgid ""
"An abstract base class which inherits from :class:`ResourceLoader` and "
":class:`ExecutionLoader`, providing concrete implementations of "
":meth:`ResourceLoader.get_data` and :meth:`ExecutionLoader.get_filename`."
msgstr ""
"一个继承自 :class:`ResourceLoader` 和 :class:`ExecutionLoader`，提供 "
":meth:`ResourceLoader.get_data` 和 :meth:`ExecutionLoader.get_filename` "
"具体实现的抽象基类。"

#: ../../library/importlib.rst:634
msgid ""
"The *fullname* argument is a fully resolved name of the module the loader is"
" to handle. The *path* argument is the path to the file for the module."
msgstr "参数 *fullname* 是加载器要处理的模块的完全解析的名字。参数 *path* 是模块文件的路径。"

#: ../../library/importlib.rst:641
msgid "The name of the module the loader can handle."
msgstr "加载器可以处理的模块的名字。"

#: ../../library/importlib.rst:645
msgid "Path to the file of the module."
msgstr "模块的文件路径"

#: ../../library/importlib.rst:649
msgid "Calls super's ``load_module()``."
msgstr "调用super的 ``load_module()``。"

#: ../../library/importlib.rst:651
msgid "Use :meth:`Loader.exec_module` instead."
msgstr "使用 :meth:`Loader.exec_module` 来代替。"

#: ../../library/importlib.rst:656 ../../library/importlib.rst:1104
msgid "Returns :attr:`path`."
msgstr "返回 :attr:`path`。"

#: ../../library/importlib.rst:660
msgid "Reads *path* as a binary file and returns the bytes from it."
msgstr "读取 *path* 作为二进制文件并且返回来自它的字节数据。"

#: ../../library/importlib.rst:665
msgid ""
"An abstract base class for implementing source (and optionally bytecode) "
"file loading. The class inherits from both :class:`ResourceLoader` and "
":class:`ExecutionLoader`, requiring the implementation of:"
msgstr ""
"一个用于实现源文件（和可选地字节码）加载的抽象基类。这个类继承自 :class:`ResourceLoader` 和 "
":class:`ExecutionLoader`，需要实现："

#: ../../library/importlib.rst:669
msgid ":meth:`ResourceLoader.get_data`"
msgstr ":meth:`ResourceLoader.get_data`"

#: ../../library/importlib.rst:672
msgid ":meth:`ExecutionLoader.get_filename`"
msgstr ":meth:`ExecutionLoader.get_filename`"

#: ../../library/importlib.rst:671
msgid ""
"Should only return the path to the source file; sourceless loading is not "
"supported."
msgstr "应该是只返回源文件的路径；不支持无源加载。"

#: ../../library/importlib.rst:674
msgid ""
"The abstract methods defined by this class are to add optional bytecode file"
" support. Not implementing these optional methods (or causing them to raise "
":exc:`NotImplementedError`) causes the loader to only work with source code."
" Implementing the methods allows the loader to work with source *and* "
"bytecode files; it does not allow for *sourceless* loading where only "
"bytecode is provided.  Bytecode files are an optimization to speed up "
"loading by removing the parsing step of Python's compiler, and so no "
"bytecode-specific API is exposed."
msgstr ""
"由这个类定义的抽象方法用来添加可选的字节码文件支持。不实现这些可选的方法（或导致它们引发 :exc:`NotImplementedError` "
"异常）导致这个加载器只能与源代码一起工作。 实现这些方法允许加载器能与源 *和* 字节码文件一起工作。不允许只提供字节码的 *无源式* "
"加载。字节码文件是通过移除 Python 编译器的解析步骤来加速加载的优化，并且因此没有开放出字节码专用的 API。"

#: ../../library/importlib.rst:685
msgid ""
"Optional abstract method which returns a :class:`dict` containing metadata "
"about the specified path.  Supported dictionary keys are:"
msgstr "返回一个包含关于指定路径的元数据的 :class:`dict` 的可选的抽象方法。 支持的字典键有："

#: ../../library/importlib.rst:688
msgid ""
"``'mtime'`` (mandatory): an integer or floating-point number representing "
"the modification time of the source code;"
msgstr "``'mtime'`` (必选项): 一个表示源码修改时间的整数或浮点数；"

#: ../../library/importlib.rst:690
msgid "``'size'`` (optional): the size in bytes of the source code."
msgstr "``'size'`` (可选项)：源码的字节大小。"

#: ../../library/importlib.rst:692
msgid ""
"Any other keys in the dictionary are ignored, to allow for future "
"extensions. If the path cannot be handled, :exc:`OSError` is raised."
msgstr "字典中任何其他键会被忽略，以允许将来的扩展。 如果不能处理该路径，则会引发 :exc:`OSError`。"

#: ../../library/importlib.rst:697 ../../library/importlib.rst:710
msgid "Raise :exc:`OSError` instead of :exc:`NotImplementedError`."
msgstr "引发 :exc:`OSError` 而不是 :exc:`NotImplemented`。"

#: ../../library/importlib.rst:702
msgid ""
"Optional abstract method which returns the modification time for the "
"specified path."
msgstr "返回指定文件路径修改时间的可选的抽象方法。"

#: ../../library/importlib.rst:705
msgid ""
"This method is deprecated in favour of :meth:`path_stats`.  You don't have "
"to implement it, but it is still available for compatibility purposes. Raise"
" :exc:`OSError` if the path cannot be handled."
msgstr ""
"在有了 :meth:`path_stats` 的情况下，这个方法被弃用了。 没必要去实现它了，但是为了兼容性，它依然处于可用状态。 "
"如果文件路径不能被处理，则引发 :exc:`OSError` 异常。"

#: ../../library/importlib.rst:715
msgid ""
"Optional abstract method which writes the specified bytes to a file path. "
"Any intermediate directories which do not exist are to be created "
"automatically."
msgstr "往一个文件路径写入指定字节的的可选的抽象方法。任何中间不存在的目录不会被自动创建。"

#: ../../library/importlib.rst:719
msgid ""
"When writing to the path fails because the path is read-only "
"(:const:`errno.EACCES`/:exc:`PermissionError`), do not propagate the "
"exception."
msgstr ""
"当对路径的写入因路径为只读而失败时 (:const:`errno.EACCES`/:exc:`PermissionError`)，不会传播异常。"

#: ../../library/importlib.rst:723
msgid "No longer raises :exc:`NotImplementedError` when called."
msgstr "当被调用时，不再引起 :exc:`NotImplementedError` 异常。"

#: ../../library/importlib.rst:728
msgid "Concrete implementation of :meth:`InspectLoader.get_code`."
msgstr ":meth:`InspectLoader.get_code` 的具体实现。"

#: ../../library/importlib.rst:732
msgid "Concrete implementation of :meth:`Loader.exec_module`."
msgstr ":meth:`Loader.exec_module` 的具体实现。"

#: ../../library/importlib.rst:738
msgid "Concrete implementation of :meth:`Loader.load_module`."
msgstr " :meth:`Loader.load_module` 的具体实现。"

#: ../../library/importlib.rst:740
msgid "Use :meth:`exec_module` instead."
msgstr "使用 :meth:`exec_module` 来代替。"

#: ../../library/importlib.rst:745
msgid "Concrete implementation of :meth:`InspectLoader.get_source`."
msgstr ":meth:`InspectLoader.get_source` 的具体实现。"

#: ../../library/importlib.rst:749
msgid ""
"Concrete implementation of :meth:`InspectLoader.is_package`. A module is "
"determined to be a package if its file path (as provided by "
":meth:`ExecutionLoader.get_filename`) is a file named ``__init__`` when the "
"file extension is removed **and** the module name itself does not end in "
"``__init__``."
msgstr ""
":meth:`InspectLoader.is_package` 的具体实现。一个模块被确定为一个包的条件是：它的文件路径（由 "
":meth:`ExecutionLoader.get_filename` 提供）当文件扩展名被移除时是一个命名为 ``__init__`` "
"的文件，**并且** 这个模块名字本身不是以 ``__init__`` 结束。"

#: ../../library/importlib.rst:758
msgid ":mod:`importlib.machinery` -- Importers and path hooks"
msgstr ":mod:`importlib.machinery` —— 导入器和路径钩子函数。"

#: ../../library/importlib.rst:763
msgid "**Source code:** :source:`Lib/importlib/machinery.py`"
msgstr "**源代码：** :source:`Lib/importlib/machinery.py`"

#: ../../library/importlib.rst:767
msgid ""
"This module contains the various objects that help :keyword:`import` find "
"and load modules."
msgstr "本模块包含多个对象，以帮助 :keyword:`import` 查找并加载模块。"

#: ../../library/importlib.rst:772
msgid ""
"A list of strings representing the recognized file suffixes for source "
"modules."
msgstr "一个字符串列表，表示源模块的可识别的文件后缀。"

#: ../../library/importlib.rst:779
msgid ""
"A list of strings representing the file suffixes for non-optimized bytecode "
"modules."
msgstr "一个字符串列表，表示未经优化字节码模块的文件后缀。"

#: ../../library/importlib.rst:784 ../../library/importlib.rst:794
msgid "Use :attr:`BYTECODE_SUFFIXES` instead."
msgstr "改用 :attr:`BYTECODE_SUFFIXES` 。"

#: ../../library/importlib.rst:789
msgid ""
"A list of strings representing the file suffixes for optimized bytecode "
"modules."
msgstr "一个字符串列表，表示已优化字节码模块的文件后缀。"

#: ../../library/importlib.rst:799
msgid ""
"A list of strings representing the recognized file suffixes for bytecode "
"modules (including the leading dot)."
msgstr "一个字符串列表，表示字节码模块的可识别的文件后缀（包含前导的句点符号）。"

#: ../../library/importlib.rst:804
msgid "The value is no longer dependent on ``__debug__``."
msgstr "该值不再依赖于 ``__debug__`` 。"

#: ../../library/importlib.rst:809
msgid ""
"A list of strings representing the recognized file suffixes for extension "
"modules."
msgstr "一个字符串列表，表示扩展模块的可识别的文件后缀。"

#: ../../library/importlib.rst:816
msgid ""
"Returns a combined list of strings representing all file suffixes for "
"modules recognized by the standard import machinery. This is a helper for "
"code which simply needs to know if a filesystem path potentially refers to a"
" module without needing any details on the kind of module (for example, "
":func:`inspect.getmodulename`)."
msgstr ""
"返回字符串的组合列表，代表标准导入机制可识别模块的所有文件后缀。这是个助手函数，只需知道某个文件系统路径是否会指向模块，而不需要任何关于模块种类的细节（例如"
" :func:`inspect.getmodulename`）。"

#: ../../library/importlib.rst:827
msgid ""
"An :term:`importer` for built-in modules. All known built-in modules are "
"listed in :data:`sys.builtin_module_names`. This class implements the "
":class:`importlib.abc.MetaPathFinder` and "
":class:`importlib.abc.InspectLoader` ABCs."
msgstr ""
"用于导入内置模块的 :term:`importer`。 所有已知的内置模块都已列入 :data:`sys.builtin_module_names`。 "
"此类实现了 :class:`importlib.abc.MetaPathFinder` 和 "
":class:`importlib.abc.InspectLoader` 抽象基类。"

#: ../../library/importlib.rst:832 ../../library/importlib.rst:846
#: ../../library/importlib.rst:859 ../../library/importlib.rst:874
msgid ""
"Only class methods are defined by this class to alleviate the need for "
"instantiation."
msgstr "此类只定义类的方法，以减轻实例化的开销。"

#: ../../library/importlib.rst:835
msgid ""
"As part of :pep:`489`, the builtin importer now implements "
":meth:`Loader.create_module` and :meth:`Loader.exec_module`"
msgstr ""
"作为 :pep:`489` 的一部分，现在内置模块导入器实现了 :meth:`Loader.create_module` 和 "
":meth:`Loader.exec_module`。"

#: ../../library/importlib.rst:842
msgid ""
"An :term:`importer` for frozen modules. This class implements the "
":class:`importlib.abc.MetaPathFinder` and "
":class:`importlib.abc.InspectLoader` ABCs."
msgstr ""
"用于已冻结模块的 :term:`importer`。 此类实现了 :class:`importlib.abc.MetaPathFinder` 和 "
":class:`importlib.abc.InspectLoader` 抽象基类。"

#: ../../library/importlib.rst:849
msgid ""
"Gained :meth:`~Loader.create_module` and :meth:`~Loader.exec_module` "
"methods."
msgstr "有了 :meth:`~Loader.create_module` 和 :meth:`~Loader.exec_module` 方法。"

#: ../../library/importlib.rst:856
msgid ""
":term:`Finder <finder>` for modules declared in the Windows registry.  This "
"class implements the :class:`importlib.abc.MetaPathFinder` ABC."
msgstr ""
":term:`Finder <finder>` 用于查找在 Windows 注册表中声明的模块。该类实现了基础的 "
":class:`importlib.abc.MetaPathFinder` 。"

#: ../../library/importlib.rst:864
msgid ""
"Use :mod:`site` configuration instead. Future versions of Python may not "
"enable this finder by default."
msgstr "改用 :mod:`site` 配置。未来版本的 Python 可能不会默认启用该查找器。"

#: ../../library/importlib.rst:871
msgid ""
"A :term:`Finder <finder>` for :data:`sys.path` and package ``__path__`` "
"attributes. This class implements the :class:`importlib.abc.MetaPathFinder` "
"ABC."
msgstr ""
"用于 :data:`sys.path` 和包的 ``__path__`` 属性的  :term:`Finder <finder>` 。该类实现了基础的 "
":class:`importlib.abc.MetaPathFinder`。"

#: ../../library/importlib.rst:879
msgid ""
"Class method that attempts to find a :term:`spec <module spec>` for the "
"module specified by *fullname* on :data:`sys.path` or, if defined, on "
"*path*. For each path entry that is searched, "
":data:`sys.path_importer_cache` is checked. If a non-false object is found "
"then it is used as the :term:`path entry finder` to look for the module "
"being searched for. If no entry is found in :data:`sys.path_importer_cache`,"
" then :data:`sys.path_hooks` is searched for a finder for the path entry "
"and, if found, is stored in :data:`sys.path_importer_cache` along with being"
" queried about the module. If no finder is ever found then ``None`` is both "
"stored in the cache and returned."
msgstr ""
"类方法试图在 :data:`sys.path` 或 *path* 上为 *fullname* 指定的模块查找 :term:`spec <module "
"spec>`。对于每个路径条目，都会查看  :data:`sys.path_importer_cache` 。如果找到非 False 的对象，则将其用作"
" :term:`path entry finder` 来查找要搜索的模块。如果在 :data:`sys.path_importer_cache` "
"中没有找到条目，那会在 :data:`sys.path_hooks` 检索该路径条目的查找器，找到了则和查到的模块信息一起存入 "
":data:`sys.path_importer_cache` 。如果查找器没有找到，则缓存中的查找器和模块信息都存为 ``None`` ，然后返回。"

#: ../../library/importlib.rst:893
msgid ""
"If the current working directory -- represented by an empty string -- is no "
"longer valid then ``None`` is returned but no value is cached in "
":data:`sys.path_importer_cache`."
msgstr ""
"如果当前工作目录不再有效（用空字符串表示），则返回 ``None``，但在 :data:`sys.path_importer_cache` "
"中不会有缓存值。"

#: ../../library/importlib.rst:900
msgid "A legacy wrapper around :meth:`find_spec`."
msgstr ""

#: ../../library/importlib.rst:907
msgid ""
"Calls :meth:`importlib.abc.PathEntryFinder.invalidate_caches` on all finders"
" stored in :data:`sys.path_importer_cache` that define the method. Otherwise"
" entries in :data:`sys.path_importer_cache` set to ``None`` are deleted."
msgstr ""
"为所有存于 :data:`sys.path_importer_cache` 中的查找器，调用其  "
":meth:`importlib.abc.PathEntryFinder.invalidate_caches` 方法。 "
":data:`sys.path_importer_cache` 中为 ``None`` 的条目将被删除。"

#: ../../library/importlib.rst:912
msgid "Entries of ``None`` in :data:`sys.path_importer_cache` are deleted."
msgstr ":data:`sys.path_importer_cache` 中为 ``None`` 的条目将被删除。"

#: ../../library/importlib.rst:915
msgid ""
"Calls objects in :data:`sys.path_hooks` with the current working directory "
"for ``''`` (i.e. the empty string)."
msgstr "调用 :data:`sys.path_hooks` 中的对象，当前工作目录为 ``''`` (即空字符串)。"

#: ../../library/importlib.rst:922
msgid ""
"A concrete implementation of :class:`importlib.abc.PathEntryFinder` which "
"caches results from the file system."
msgstr ":class:`importlib.abc.PathEntryFinder` 的一个具体实现，它会缓存来自文件系统的结果。"

#: ../../library/importlib.rst:925
msgid ""
"The *path* argument is the directory for which the finder is in charge of "
"searching."
msgstr "参数 *path* 是查找器负责搜索的目录。"

#: ../../library/importlib.rst:928
msgid ""
"The *loader_details* argument is a variable number of 2-item tuples each "
"containing a loader and a sequence of file suffixes the loader recognizes. "
"The loaders are expected to be callables which accept two arguments of the "
"module's name and the path to the file found."
msgstr ""
"*loader_details* "
"参数是数量不定的二元组，每个元组包含加载器及其可识别的文件后缀列表。加载器应为可调用对象，可接受两个参数，即模块的名称和已找到文件的路径。"

#: ../../library/importlib.rst:933
msgid ""
"The finder will cache the directory contents as necessary, making stat calls"
" for each module search to verify the cache is not outdated. Because cache "
"staleness relies upon the granularity of the operating system's state "
"information of the file system, there is a potential race condition of "
"searching for a module, creating a new file, and then searching for the "
"module the new file represents. If the operations happen fast enough to fit "
"within the granularity of stat calls, then the module search will fail. To "
"prevent this from happening, when you create a module dynamically, make sure"
" to call :func:`importlib.invalidate_caches`."
msgstr ""
"查找器将按需对目录内容进行缓存，通过对每个模块的检索进行状态统计，验证缓存是否过期。因为缓存的滞后性依赖于操作系统文件系统状态信息的粒度，所以搜索模块、新建文件、然后搜索新文件代表的模块，这会存在竞争状态。如果这些操作的频率太快，甚至小于状态统计的粒度，那么模块搜索将会失败。为了防止这种情况发生，在动态创建模块时，请确保调用"
" :func:`importlib.invalidate_caches`。"

#: ../../library/importlib.rst:947
msgid "The path the finder will search in."
msgstr "查找器将要搜索的路径。"

#: ../../library/importlib.rst:951
msgid "Attempt to find the spec to handle *fullname* within :attr:`path`."
msgstr "尝试在 :attr:`path` 中找到处理 *fullname* 的规格。"

#: ../../library/importlib.rst:957
msgid "Attempt to find the loader to handle *fullname* within :attr:`path`."
msgstr ""

#: ../../library/importlib.rst:964
msgid "Clear out the internal cache."
msgstr "清理内部缓存。"

#: ../../library/importlib.rst:968
msgid ""
"A class method which returns a closure for use on :data:`sys.path_hooks`. An"
" instance of :class:`FileFinder` is returned by the closure using the path "
"argument given to the closure directly and *loader_details* indirectly."
msgstr ""
"一个类方法，返回供 :data:`sys.path_hooks` 使用的闭包。 使用直接提供给闭包的路径参数和间接提供的 "
"*loader_details* 闭包将返回一个 :class:`FileFinder` 的实例。"

#: ../../library/importlib.rst:973
msgid ""
"If the argument to the closure is not an existing directory, "
":exc:`ImportError` is raised."
msgstr "如果给闭包的参数不是已存在的目录，将会触发 :exc:`ImportError`。"

#: ../../library/importlib.rst:979
msgid ""
"A concrete implementation of :class:`importlib.abc.SourceLoader` by "
"subclassing :class:`importlib.abc.FileLoader` and providing some concrete "
"implementations of other methods."
msgstr ""
":class:`importlib.abc.SourceLoader` 的一个具体实现，该实现子类化了 "
":class:`importlib.abc.FileLoader` 并提供了其他一些方法的具体实现。"

#: ../../library/importlib.rst:987
msgid "The name of the module that this loader will handle."
msgstr "该加载器将要处理的模块名称。"

#: ../../library/importlib.rst:991
msgid "The path to the source file."
msgstr "源文件的路径"

#: ../../library/importlib.rst:995
msgid "Return ``True`` if :attr:`path` appears to be for a package."
msgstr "如果 :attr:`path` 看似包的路径，则返回 ``True``。"

#: ../../library/importlib.rst:999
msgid ""
"Concrete implementation of :meth:`importlib.abc.SourceLoader.path_stats`."
msgstr ":meth:`importlib.abc.SourceLoader.path_stats` 的具体代码实现。"

#: ../../library/importlib.rst:1003
msgid ""
"Concrete implementation of :meth:`importlib.abc.SourceLoader.set_data`."
msgstr ":meth:`importlib.abc.SourceLoader.set_data` 的具体代码实现。"

#: ../../library/importlib.rst:1007 ../../library/importlib.rst:1050
msgid ""
"Concrete implementation of :meth:`importlib.abc.Loader.load_module` where "
"specifying the name of the module to load is optional."
msgstr ":meth:`importlib.abc.Loader.load_module` 的具体代码实现，这里要加载的模块名是可选的。"

#: ../../library/importlib.rst:1012 ../../library/importlib.rst:1055
msgid "Use :meth:`importlib.abc.Loader.exec_module` instead."
msgstr "改用 :meth:`importlib.abc.Loader.exec_module` 。"

#: ../../library/importlib.rst:1017
msgid ""
"A concrete implementation of :class:`importlib.abc.FileLoader` which can "
"import bytecode files (i.e. no source code files exist)."
msgstr ":class:`importlib.abc.FileLoader` 的具体代码实现，可导入字节码文件（也即源代码文件不存在）。"

#: ../../library/importlib.rst:1020
msgid ""
"Please note that direct use of bytecode files (and thus not source code "
"files) inhibits your modules from being usable by all Python implementations"
" or new versions of Python which change the bytecode format."
msgstr "请注意，直接用字节码文件（而不是源代码文件），会让模块无法应用于所有的 Python 版本或字节码格式有所改动的新版本 Python。"

#: ../../library/importlib.rst:1029
msgid "The name of the module the loader will handle."
msgstr "加载器将要处理的模块名。"

#: ../../library/importlib.rst:1033
msgid "The path to the bytecode file."
msgstr "二进制码文件的路径。"

#: ../../library/importlib.rst:1037
msgid "Determines if the module is a package based on :attr:`path`."
msgstr "根据 :attr:`path` 确定该模块是否为包。"

#: ../../library/importlib.rst:1041
msgid "Returns the code object for :attr:`name` created from :attr:`path`."
msgstr "返回由 :attr:`path` 创建的 :attr:`name` 的代码对象。"

#: ../../library/importlib.rst:1045
msgid ""
"Returns ``None`` as bytecode files have no source when this loader is used."
msgstr "因为用此加载器时字节码文件没有源码文件，所以返回 ``None``。"

#: ../../library/importlib.rst:1060
msgid ""
"A concrete implementation of :class:`importlib.abc.ExecutionLoader` for "
"extension modules."
msgstr ":class:`importlib.abc.ExecutionLoader` 的具体代码实现，用于扩展模块。"

#: ../../library/importlib.rst:1063
msgid ""
"The *fullname* argument specifies the name of the module the loader is to "
"support. The *path* argument is the path to the extension module's file."
msgstr "参数 *fullname* 指定了加载器要支持的模块名。参数 *path* 是指向扩展模块文件的路径。"

#: ../../library/importlib.rst:1070
msgid "Name of the module the loader supports."
msgstr "装载器支持的模块名。"

#: ../../library/importlib.rst:1074
msgid "Path to the extension module."
msgstr "扩展模块的路径。"

#: ../../library/importlib.rst:1078
msgid ""
"Creates the module object from the given specification in accordance with "
":pep:`489`."
msgstr "根据 :pep:`489` ，由给定规范创建模块对象。"

#: ../../library/importlib.rst:1085
msgid "Initializes the given module object in accordance with :pep:`489`."
msgstr "根据 :pep:`489`，初始化给定的模块对象。"

#: ../../library/importlib.rst:1091
msgid ""
"Returns ``True`` if the file path points to a package's ``__init__`` module "
"based on :attr:`EXTENSION_SUFFIXES`."
msgstr ""
"根据 :attr:`EXTENSION_SUFFIXES` ，如果文件路径指向某个包的 ``__init__`` 模块，则返回 ``True``。"

#: ../../library/importlib.rst:1096
msgid "Returns ``None`` as extension modules lack a code object."
msgstr "返回 ``None``，因为扩展模块缺少代码对象。"

#: ../../library/importlib.rst:1100
msgid "Returns ``None`` as extension modules do not have source code."
msgstr "返回 ``None``，因为扩展模块没有源代码。"

#: ../../library/importlib.rst:1111
msgid ""
"A concrete implementation of :class:`importlib.abc.InspectLoader` for "
"namespace packages.  This is an alias for a private class and is only made "
"public for introspecting the ``__loader__`` attribute on namespace "
"packages::"
msgstr ""
"一个针对命名空间包的 :class:`importlib.abc.InspectLoader` 具体实现。 这是一个私有类的别名，仅为在命名空间包上内省"
" ``__loader__`` 属性而被设为公有::"

#: ../../library/importlib.rst:1129
msgid ""
"A specification for a module's import-system-related state.  This is "
"typically exposed as the module's :attr:`__spec__` attribute.  In the "
"descriptions below, the names in parentheses give the corresponding "
"attribute available directly on the module object, e.g. "
"``module.__spec__.origin == module.__file__``.  Note, however, that while "
"the *values* are usually equivalent, they can differ since there is no "
"synchronization between the two objects.  For example, it is possible to "
"update the module's :attr:`__file__` at runtime and this will not be "
"automatically reflected in the module's :attr:`__spec__.origin`, and vice "
"versa."
msgstr ""
"针对特定模块的导入系统相关状态的规范说明。 这通常是作为模块的 :attr:`__spec__` 属性对外公开。 "
"在下面的描述中，圆括号内的名称给出了在模块对象上直接可用的对应属性，例如 ``module.__spec__.origin == "
"module.__file__``。 但是要注意，虽然 *values* 通常是相等的，但它们也可以因为两个对象之间没有进行同步而不相等。 "
"举例来说，有可能在运行时更新模块的 :attr:`__file__` 而这将不会自动反映在模块的 :attr:`__spec__.origin` "
"中，反之亦然。"

#: ../../library/importlib.rst:1143
msgid "(:attr:`__name__`)"
msgstr "(:attr:`__name__`)"

#: ../../library/importlib.rst:1145
msgid ""
"The module's fully qualified name. The :term:`finder` should always set this"
" attribute to a non-empty string."
msgstr "模块的完整限定名称。 :term:`finder` 总是应当将此属性设为一个非空字符串。"

#: ../../library/importlib.rst:1150
msgid "(:attr:`__loader__`)"
msgstr "(:attr:`__loader__`)"

#: ../../library/importlib.rst:1152
msgid ""
"The :term:`loader` used to load the module. The :term:`finder` should always"
" set this attribute."
msgstr "用于加载模块的 :term:`loader`。 :term:`finder` 总是应当设置此属性。"

#: ../../library/importlib.rst:1157
msgid "(:attr:`__file__`)"
msgstr "(:attr:`__file__`)"

#: ../../library/importlib.rst:1159
msgid ""
"The location the :term:`loader` should use to load the module. For example, "
"for modules loaded from a .py file this is the filename. The :term:`finder` "
"should always set this attribute to a meaningful value for the "
":term:`loader` to use.  In the uncommon case that there is not one (like for"
" namespace packages), it should be set to ``None``."
msgstr ""
"应当被 :term:`loader` 用来加载模块的位置。 例如，对于从 .py 文件加载的模块来说这将为文件名。 :term:`finder` "
"总是应当将此属性设为一个有意义的值供 :term:`loader` 使用。 在少数没有可用值的情况下（如命名空间包），它应当被设为 ``None``。"

#: ../../library/importlib.rst:1167
msgid "(:attr:`__path__`)"
msgstr "(:attr:`__path__`)"

#: ../../library/importlib.rst:1169
msgid ""
"The list of locations where the package's submodules will be found. Most of "
"the time this is a single directory. The :term:`finder` should set this "
"attribute to a list, even an empty one, to indicate to the import system "
"that the module is a package.  It should be set to ``None`` for non-package "
"modules.  It is set automatically later to a special object for namespace "
"packages."
msgstr ""
"将被用于包的子模块查找的位置列表。 在大多数时候这将为单个目录。 :term:`finder` "
"应当将此属性设为一个列表，甚至可以是空列表，以便提示导入系统指定的模块是一个包。 对于非包模块它应当被设为 ``None``。 "
"对于命名空间包它会在稍后被自动设为一个特殊对象。"

#: ../../library/importlib.rst:1178
msgid ""
"The :term:`finder` may set this attribute to an object containing "
"additional, module-specific data to use when loading the module.  Otherwise "
"it should be set to ``None``."
msgstr ""
":term:`finder` 可以将此属性设为一个包含额外的模块专属数据的对象供加载模块时使用。 在其他情况下应将其设为 ``None``。"

#: ../../library/importlib.rst:1184
msgid "(:attr:`__cached__`)"
msgstr "(:attr:`__cached__`)"

#: ../../library/importlib.rst:1186
msgid ""
"The filename of a compiled version of the module's code. The :term:`finder` "
"should always set this attribute but it may be ``None`` for modules that do "
"not need compiled code stored."
msgstr ""
"模块代码的编译版本的文件名。 :term:`finder` 总是应当设置此属性但是对于不需要存储已编译代码的模块来说可以将其设为 ``None``。"

#: ../../library/importlib.rst:1192
msgid "(:attr:`__package__`)"
msgstr "(:attr:`__package__`)"

#: ../../library/importlib.rst:1194
msgid ""
"(Read-only) The fully qualified name of the package the module is in (or the"
" empty string for a top-level module). If the module is a package then this "
"is the same as :attr:`name`."
msgstr "（只读）指定模块所在的包的完整限定名称（或者对于最高层级模块来说则为空字符串）。 如果模块是包则它将与 :attr:`name` 相同。"

#: ../../library/importlib.rst:1201
msgid "``True`` if the spec's :attr:`origin` refers to a loadable location,"
msgstr "如果 spec 的 :attr:`origin` 指向一个可加载的位置则为 ``True``,"

#: ../../library/importlib.rst:1201
msgid ""
"``False`` otherwise.  This value impacts how :attr:`origin` is interpreted "
"and how the module's :attr:`__file__` is populated."
msgstr ""
"在其他情况下为 ``False``。 该值将确定如何解读 :attr:`origin` 以及如何填充模块的 :attr:`__file__`。"

#: ../../library/importlib.rst:1206
msgid ":mod:`importlib.util` -- Utility code for importers"
msgstr ":mod:`importlib.util` —— 导入器的工具程序代码"

#: ../../library/importlib.rst:1212
msgid "**Source code:** :source:`Lib/importlib/util.py`"
msgstr "**源代码：** :source:`Lib/importlib/util.py`"

#: ../../library/importlib.rst:1216
msgid ""
"This module contains the various objects that help in the construction of an"
" :term:`importer`."
msgstr "本模块包含了帮助构建 :term:`importer` 的多个对象。"

#: ../../library/importlib.rst:1221
msgid ""
"The bytes which represent the bytecode version number. If you need help with"
" loading/writing bytecode then consider :class:`importlib.abc.SourceLoader`."
msgstr ""
"代表字节码版本号的字节串。若要有助于加载/写入字节码，可考虑采用  :class:`importlib.abc.SourceLoader`。"

#: ../../library/importlib.rst:1228
msgid ""
"Return the :pep:`3147`/:pep:`488` path to the byte-compiled file associated "
"with the source *path*.  For example, if *path* is ``/foo/bar/baz.py`` the "
"return value would be ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python"
" 3.2. The ``cpython-32`` string comes from the current magic tag (see "
":func:`get_tag`; if :attr:`sys.implementation.cache_tag` is not defined then"
" :exc:`NotImplementedError` will be raised)."
msgstr ""
"返回 :pep:`3147`/:pep:`488` 定义的，与源 *path* 相关联的已编译字节码文件的路径。 例如，如果 *path* 为 "
"``/foo/bar/baz.py`` 则 Python 3.2 中的返回值将是 "
"``/foo/bar/__pycache__/baz.cpython-32.pyc``。 字符串 ``cpython-32`` 来自于当前的魔法标签 "
"(参见 :func:`get_tag`; 如果 :attr:`sys.implementation.cache_tag` 未定义则将会引发 "
":exc:`NotImplementedError`)。"

#: ../../library/importlib.rst:1235
msgid ""
"The *optimization* parameter is used to specify the optimization level of "
"the bytecode file. An empty string represents no optimization, so "
"``/foo/bar/baz.py`` with an *optimization* of ``''`` will result in a "
"bytecode path of ``/foo/bar/__pycache__/baz.cpython-32.pyc``. ``None`` "
"causes the interpreter's optimization level to be used. Any other value's "
"string representation is used, so ``/foo/bar/baz.py`` with an *optimization*"
" of ``2`` will lead to the bytecode path of "
"``/foo/bar/__pycache__/baz.cpython-32.opt-2.pyc``. The string representation"
" of *optimization* can only be alphanumeric, else :exc:`ValueError` is "
"raised."
msgstr ""
"参数 *optimization* 用于指定字节码文件的优化级别。空字符串代表没有优化，所以 *optimization* 为  的 "
"``/foo/bar/baz.py``，将会得到字节码路径为 "
"``/foo/bar/__pycache__/baz.cpython-32.pyc``。``None`` "
"会导致采用解释器的优化。任何其他字符串都会被采用，所以 *optimization* 为 ``''`` 的 ``/foo/bar/baz.py`` "
"会导致字节码路径为 ``/foo/bar/__pycache__/baz.cpython-32.opt-2.pyc``。*optimization* "
"字符串只能是字母数字，否则会触发 :exc:`ValueError`。"

#: ../../library/importlib.rst:1245
msgid ""
"The *debug_override* parameter is deprecated and can be used to override the"
" system's value for ``__debug__``. A ``True`` value is the equivalent of "
"setting *optimization* to the empty string. A ``False`` value is the same as"
" setting *optimization* to ``1``. If both *debug_override* an *optimization*"
" are not ``None`` then :exc:`TypeError` is raised."
msgstr ""
"*debug_override* 参数已废弃，可用于覆盖系统的 ``__debug__`` 值。``True`` 值相当于将 "
"*optimization* 设为空字符串。``False`` 则相当于*optimization* 设为 ``1``。如果 "
"*debug_override* 和 *optimization* 都不为 ``None``，则会触发 :exc:`TypeError`。"

#: ../../library/importlib.rst:1253
msgid ""
"The *optimization* parameter was added and the *debug_override* parameter "
"was deprecated."
msgstr "增加了 *optimization* 参数，废弃了 *debug_override* 参数。"

#: ../../library/importlib.rst:1257 ../../library/importlib.rst:1273
#: ../../library/importlib.rst:1423
msgid "Accepts a :term:`path-like object`."
msgstr "接受一个 :term:`path-like object`。"

#: ../../library/importlib.rst:1263
msgid ""
"Given the *path* to a :pep:`3147` file name, return the associated source "
"code file path.  For example, if *path* is "
"``/foo/bar/__pycache__/baz.cpython-32.pyc`` the returned path would be "
"``/foo/bar/baz.py``.  *path* need not exist, however if it does not conform "
"to :pep:`3147` or :pep:`488` format, a :exc:`ValueError` is raised. If "
":attr:`sys.implementation.cache_tag` is not defined, "
":exc:`NotImplementedError` is raised."
msgstr ""
"根据指向一个 :pep:`3147` 文件名的 *path*，返回相关联的源代码文件路径。 举例来说，如果 *path* 为 "
"``/foo/bar/__pycache__/baz.cpython-32.pyc`` 则返回的路径将是 ``/foo/bar/baz.py``。 "
"*path* 不需要已存在，但如果它未遵循 :pep:`3147` 或 :pep:`488` 的格式，则会引发 :exc:`ValueError`。 "
"如果未定义 :attr:`sys.implementation.cache_tag`，则会引发 :exc:`NotImplementedError`。"

#: ../../library/importlib.rst:1278
msgid ""
"Decode the given bytes representing source code and return it as a string "
"with universal newlines (as required by "
":meth:`importlib.abc.InspectLoader.get_source`)."
msgstr ""
"对代表源代码的字节串进行解码，并将其作为带有通用换行符的字符串返回（符合 "
":meth:`importlib.abc.InspectLoader.get_source` 要求）。"

#: ../../library/importlib.rst:1286
msgid "Resolve a relative module name to an absolute one."
msgstr "将模块的相对名称解析为绝对名称。"

#: ../../library/importlib.rst:1288
msgid ""
"If  **name** has no leading dots, then **name** is simply returned. This "
"allows for usage such as ``importlib.util.resolve_name('sys', "
"__spec__.parent)`` without doing a check to see if the **package** argument "
"is needed."
msgstr ""
"如果 **name** 前面没有句点，那就简单地返回 **name**。这样就能采用 "
"``importlib.util.resolve_name('sys', __spec__.parent)`` 之类的写法，而无需检查是否需要 "
"**package** 参数。"

#: ../../library/importlib.rst:1293
msgid ""
":exc:`ImportError` is raised if **name** is a relative module name but "
"**package** is a false value (e.g. ``None`` or the empty string). "
":exc:`ImportError` is also raised if a relative name would escape its "
"containing package (e.g. requesting ``..bacon`` from within the ``spam`` "
"package)."
msgstr ""
"如果 **name** 是一个相对模块名称但 **package** 为假值（如为 ``None`` 或空字符串）则会引发 "
":exc:`ImportError`。 如果相对名称离开了其所在的包（如为从 ``spam`` 包请求 ``..bacon`` 的形式）则也会引发 "
":exc:`ImportError`。"

#: ../../library/importlib.rst:1301
msgid ""
"To improve consistency with import statements, raise :exc:`ImportError` "
"instead of :exc:`ValueError` for invalid relative import attempts."
msgstr ""
"为了改善与 import 语句的一致性，对于无效的相对导入尝试会引发 :exc:`ImportError` 而不是 :exc:`ValueError`。"

#: ../../library/importlib.rst:1308
msgid ""
"Find the :term:`spec <module spec>` for a module, optionally relative to the"
" specified **package** name. If the module is in :data:`sys.modules`, then "
"``sys.modules[name].__spec__`` is returned (unless the spec would be "
"``None`` or is not set, in which case :exc:`ValueError` is raised). "
"Otherwise a search using :data:`sys.meta_path` is done. ``None`` is returned"
" if no spec is found."
msgstr ""
"查找模块的 :term:`spec <module spec>`，可选择相对于指定的 **package** 名称。 如果该模块位于 "
":data:`sys.modules` 中，则会返回 ``sys.modules[name].__spec__`` (除非 spec 为 "
"``None`` 或未设置，在此情况下则会引发 :exc:`ValueError`)。 在其他情况下将使用 :data:`sys.meta_path` "
"进行搜索。 如果找不到任何 spec 则返回 ``None``。"

#: ../../library/importlib.rst:1315
msgid ""
"If **name** is for a submodule (contains a dot), the parent module is "
"automatically imported."
msgstr "如果 **name** 为一个子模块（带有一个句点），则会自动导入父级模块。"

#: ../../library/importlib.rst:1318
msgid "**name** and **package** work the same as for :func:`import_module`."
msgstr "**name** 和 **package** 的用法与 :func:`import_module` 相同。"

#: ../../library/importlib.rst:1322
msgid ""
"Raises :exc:`ModuleNotFoundError` instead of :exc:`AttributeError` if "
"**package** is in fact not a package (i.e. lacks a :attr:`__path__` "
"attribute)."
msgstr ""
"如果 **package** 实际上不是一个包（即缺少 :attr:`__path__` 属性）则会引发 "
":exc:`ModuleNotFoundError` 而不是 :exc:`AttributeError`。"

#: ../../library/importlib.rst:1329
msgid ""
"Create a new module based on **spec** and :meth:`spec.loader.create_module "
"<importlib.abc.Loader.create_module>`."
msgstr ""
"基于 **spec** 和 :meth:`spec.loader.create_module "
"<importlib.abc.Loader.create_module>` 创建一个新模块。"

#: ../../library/importlib.rst:1332
msgid ""
"If :meth:`spec.loader.create_module <importlib.abc.Loader.create_module>` "
"does not return ``None``, then any pre-existing attributes will not be "
"reset. Also, no :exc:`AttributeError` will be raised if triggered while "
"accessing **spec** or setting an attribute on the module."
msgstr ""
"如果 :meth:`spec.loader.create_module <importlib.abc.Loader.create_module>` "
"未返回 ``None``，那么先前已存在的属性不会被重置。另外，如果 :exc:`AttributeError` 是在访问 **spec** "
"或设置模块属性时触发的，则不会触发 。"

#: ../../library/importlib.rst:1337
msgid ""
"This function is preferred over using :class:`types.ModuleType` to create a "
"new module as **spec** is used to set as many import-controlled attributes "
"on the module as possible."
msgstr ""
"本函数比 :class:`types.ModuleType` 创建新模块要好，因为用到 **spec** 模块设置了尽可能多的导入控制属性。"

#: ../../library/importlib.rst:1345
msgid ""
"A :term:`decorator` for :meth:`importlib.abc.Loader.load_module` to handle "
"selecting the proper module object to load with. The decorated method is "
"expected to have a call signature taking two positional arguments (e.g. "
"``load_module(self, module)``) for which the second argument will be the "
"module **object** to be used by the loader. Note that the decorator will not"
" work on static methods because of the assumption of two arguments."
msgstr ""

#: ../../library/importlib.rst:1354
msgid ""
"The decorated method will take in the **name** of the module to be loaded as"
" expected for a :term:`loader`. If the module is not found in "
":data:`sys.modules` then a new one is constructed. Regardless of where the "
"module came from, :attr:`__loader__` set to **self** and :attr:`__package__`"
" is set based on what :meth:`importlib.abc.InspectLoader.is_package` returns"
" (if available). These attributes are set unconditionally to support "
"reloading."
msgstr ""

#: ../../library/importlib.rst:1362
msgid ""
"If an exception is raised by the decorated method and a module was added to "
":data:`sys.modules`, then the module will be removed to prevent a partially "
"initialized module from being in left in :data:`sys.modules`. If the module "
"was already in :data:`sys.modules` then it is left alone."
msgstr ""

#: ../../library/importlib.rst:1367
msgid ""
":attr:`__loader__` and :attr:`__package__` are automatically set (when "
"possible)."
msgstr ""

#: ../../library/importlib.rst:1371
msgid ""
"Set :attr:`__name__`, :attr:`__loader__` :attr:`__package__` unconditionally"
" to support reloading."
msgstr ""

#: ../../library/importlib.rst:1375
msgid ""
"The import machinery now directly performs all the functionality provided by"
" this function."
msgstr ""

#: ../../library/importlib.rst:1381
msgid ""
"A :term:`decorator` for :meth:`importlib.abc.Loader.load_module` to set the "
":attr:`__loader__` attribute on the returned module. If the attribute is "
"already set the decorator does nothing. It is assumed that the first "
"positional argument to the wrapped method (i.e. ``self``) is what "
":attr:`__loader__` should be set to."
msgstr ""

#: ../../library/importlib.rst:1388
msgid ""
"Set ``__loader__`` if set to ``None``, as if the attribute does not exist."
msgstr ""

#: ../../library/importlib.rst:1392 ../../library/importlib.rst:1401
msgid "The import machinery takes care of this automatically."
msgstr "导入机制会自动进行处理。"

#: ../../library/importlib.rst:1397
msgid ""
"A :term:`decorator` for :meth:`importlib.abc.Loader.load_module` to set the "
":attr:`__package__` attribute on the returned module. If :attr:`__package__`"
" is set and has a value other than ``None`` it will not be changed."
msgstr ""

#: ../../library/importlib.rst:1406
msgid ""
"A factory function for creating a :class:`~importlib.machinery.ModuleSpec` "
"instance based on a loader.  The parameters have the same meaning as they do"
" for ModuleSpec.  The function uses available :term:`loader` APIs, such as "
":meth:`InspectLoader.is_package`, to fill in any missing information on the "
"spec."
msgstr ""
"一个工厂函数，用于创建基于加载器的 :class:`~importlib.machinery.ModuleSpec` 实例。参数的含义与 "
"ModuleSpec 的相同。该函数会利用当前可用的 :term:`loader` API，比如 "
":meth:`InspectLoader.is_package`，以填充所有缺失的规格信息。"

#: ../../library/importlib.rst:1416
msgid ""
"A factory function for creating a :class:`~importlib.machinery.ModuleSpec` "
"instance based on the path to a file.  Missing information will be filled in"
" on the spec by making use of loader APIs and by the implication that the "
"module will be file-based."
msgstr ""
"一个工厂函数，根据文件路径创建 :class:`~importlib.machinery.ModuleSpec` 实例。缺失的信息将根据 spec "
"进行填补，利用加载器 API ，以及模块基于文件的隐含条件。"

#: ../../library/importlib.rst:1428
msgid ""
"Return the hash of *source_bytes* as bytes. A hash-based ``.pyc`` file "
"embeds the :func:`source_hash` of the corresponding source file's contents "
"in its header."
msgstr ""
"以字节串的形式返回 *source_bytes* 的哈希值。基于哈希值的 ``.pyc`` 文件在头部嵌入了对应源文件内容的 "
":func:`source_hash`。"

#: ../../library/importlib.rst:1436
msgid ""
"A class which postpones the execution of the loader of a module until the "
"module has an attribute accessed."
msgstr "此类会延迟执行模块加载器，直至该模块有一个属性被访问到。"

#: ../../library/importlib.rst:1439
msgid ""
"This class **only** works with loaders that define "
":meth:`~importlib.abc.Loader.exec_module` as control over what module type "
"is used for the module is required. For those same reasons, the loader's "
":meth:`~importlib.abc.Loader.create_module` method must return ``None`` or a"
" type for which its ``__class__`` attribute can be mutated along with not "
"using :term:`slots <__slots__>`. Finally, modules which substitute the "
"object placed into :data:`sys.modules` will not work as there is no way to "
"properly replace the module references throughout the interpreter safely; "
":exc:`ValueError` is raised if such a substitution is detected."
msgstr ""
"此类 **仅仅** 适用于定义 :meth:`~importlib.abc.Loader.exec_module` "
"作为需要控制模块使用何种模块类型的加载器。 出于相同理由，加载器的 "
":meth:`~importlib.abc.Loader.create_module` 方法必须返回 ``None`` 或其 ``__class__``"
" 属性可被改变并且不使用 :term:`槽位 <__slots__>` 的类型。 最后，用于替换已放入 :data:`sys.modules` "
"的对象的模块将无法工作因为没有办法安全地在整个解释器中正确替换模块引用；  如果检测到这种替换则会引发 :exc:`ValueError`。"

#: ../../library/importlib.rst:1450
msgid ""
"For projects where startup time is critical, this class allows for "
"potentially minimizing the cost of loading a module if it is never used. For"
" projects where startup time is not essential then use of this class is "
"**heavily** discouraged due to error messages created during loading being "
"postponed and thus occurring out of context."
msgstr ""
"如果项目对启动时间要求很高，只要模块未被用过，此类能够最小化加载模块的开销。对于启动时间并不重要的项目来说，由于加载过程中产生的错误信息会被暂时搁置，因此强烈不建议使用此类。"

#: ../../library/importlib.rst:1458
msgid ""
"Began calling :meth:`~importlib.abc.Loader.create_module`, removing the "
"compatibility warning for :class:`importlib.machinery.BuiltinImporter` and "
":class:`importlib.machinery.ExtensionFileLoader`."
msgstr ""
"开始调用 :meth:`~importlib.abc.Loader.create_module`，移除 "
":class:`importlib.machinery.BuiltinImporter` 和 "
":class:`importlib.machinery.ExtensionFileLoader` 的兼容性警告。"

#: ../../library/importlib.rst:1465
msgid ""
"A class method which returns a callable that creates a lazy loader. This is "
"meant to be used in situations where the loader is passed by class instead "
"of by instance. ::"
msgstr "一个返回创建延迟加载器的可调用对象的类方法。 这专门被用于加载器由类而不是实例来传入的场合。 ::"

#: ../../library/importlib.rst:1478
msgid "Examples"
msgstr "例子"

#: ../../library/importlib.rst:1481
msgid "Importing programmatically"
msgstr "用编程方式导入"

#: ../../library/importlib.rst:1483
msgid ""
"To programmatically import a module, use :func:`importlib.import_module`. ::"
msgstr "要以编程方式导入一个模块，请使用 :func:`importlib.import_module` ："

#: ../../library/importlib.rst:1492
msgid "Checking if a module can be imported"
msgstr "检查某模块可否导入。"

#: ../../library/importlib.rst:1494
msgid ""
"If you need to find out if a module can be imported without actually doing "
"the import, then you should use :func:`importlib.util.find_spec`."
msgstr ""
"如果你需要在不实际执行导入的情况下确定某个模块是否可被导入，则你应当使用 :func:`importlib.util.find_spec`。"

#: ../../library/importlib.rst:1497
msgid ""
"Note that if ``name`` is a submodule (contains a dot), "
":func:`importlib.util.find_spec` will import the parent module. ::"
msgstr ""
"请注意如果 ``name`` 是一个子模块（即包含一个点号），则 :func:`importlib.util.find_spec` 将会导入父模块。 "
"::"

#: ../../library/importlib.rst:1520
msgid "Importing a source file directly"
msgstr "直接导入源码文件。"

#: ../../library/importlib.rst:1522
msgid "To import a Python source file directly, use the following recipe::"
msgstr "要直接导入 Python 源文件，请使用以下写法::"

#: ../../library/importlib.rst:1539
msgid "Implementing lazy imports"
msgstr "实现延迟导入"

#: ../../library/importlib.rst:1541
msgid "The example below shows how to implement lazy imports::"
msgstr "以下例子展示了如何实现延迟导入："

#: ../../library/importlib.rst:1563
msgid "Setting up an importer"
msgstr "导入器的配置"

#: ../../library/importlib.rst:1565
msgid ""
"For deep customizations of import, you typically want to implement an "
":term:`importer`. This means managing both the :term:`finder` and "
":term:`loader` side of things. For finders there are two flavours to choose "
"from depending on your needs: a :term:`meta path finder` or a :term:`path "
"entry finder`. The former is what you would put on :data:`sys.meta_path` "
"while the latter is what you create using a :term:`path entry hook` on "
":data:`sys.path_hooks` which works with :data:`sys.path` entries to "
"potentially create a finder. This example will show you how to register your"
" own importers so that import will use them (for creating an importer for "
"yourself, read the documentation for the appropriate classes defined within "
"this package)::"
msgstr ""
"对于导入的深度定制，通常你需要实现一个 :term:`importer`。 这意味着同时管理 :term:`finder` 和 "
":term:`loader` 两方面。 对于查找器来说根据你的需求有两种类别可供选择: :term:`meta path finder` 或 "
":term:`path entry finder`。 前者你应当放到 :data:`sys.meta_path` 而后者是使用 :term:`path "
"entry hook` 在 :data:`sys.path_hooks` 上创建并与 :data:`sys.path` 条目一起创建一个潜在的查找器。 "
"下面的例子将向你演示如何注册自己的导入器供导入机制使用 (关于自行创建导入器，请阅读在本包内定义的相应类的文档)::"

#: ../../library/importlib.rst:1597
msgid "Approximating :func:`importlib.import_module`"
msgstr ":func:`importlib.import_module` 的近似实现"

#: ../../library/importlib.rst:1599
msgid ""
"Import itself is implemented in Python code, making it possible to expose "
"most of the import machinery through importlib. The following helps "
"illustrate the various APIs that importlib exposes by providing an "
"approximate implementation of :func:`importlib.import_module`::"
msgstr ""
"导入过程本身是用 Python 代码实现的，这样就有可能通过 importlib 来对外公开大部分导入机制。 以下代码通过提供 "
":func:`importlib.import_module` 的近似实现来说明 importlib 所公开的几种 API::"

#: ../../library/importlib.rst:551
msgid "universal newlines"
msgstr "universal newlines -- 通用换行"

#: ../../library/importlib.rst:551
msgid "importlib.abc.InspectLoader.get_source method"
msgstr "importlib.abc.InspectLoader.get_source 方法"
