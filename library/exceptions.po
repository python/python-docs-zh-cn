# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/exceptions.rst:4
msgid "Built-in Exceptions"
msgstr ""

#: ../../library/exceptions.rst:10
msgid ""
"In Python, all exceptions must be instances of a class that derives from "
":class:`BaseException`.  In a :keyword:`try` statement with an "
":keyword:`except` clause that mentions a particular class, that clause also "
"handles any exception classes derived from that class (but not exception "
"classes from which *it* is derived).  Two exception classes that are not "
"related via subclassing are never equivalent, even if they have the same "
"name."
msgstr ""

#: ../../library/exceptions.rst:19
msgid ""
"The built-in exceptions listed below can be generated by the interpreter or "
"built-in functions.  Except where mentioned, they have an \"associated "
"value\" indicating the detailed cause of the error.  This may be a string or"
" a tuple of several items of information (e.g., an error code and a string "
"explaining the code).  The associated value is usually passed as arguments "
"to the exception class's constructor."
msgstr ""

#: ../../library/exceptions.rst:26
msgid ""
"User code can raise built-in exceptions.  This can be used to test an "
"exception handler or to report an error condition \"just like\" the "
"situation in which the interpreter raises the same exception; but beware "
"that there is nothing to prevent user code from raising an inappropriate "
"error."
msgstr ""

#: ../../library/exceptions.rst:31
msgid ""
"The built-in exception classes can be subclassed to define new exceptions; "
"programmers are encouraged to derive new exceptions from the "
":exc:`Exception` class or one of its subclasses, and not from "
":exc:`BaseException`.  More information on defining exceptions is available "
"in the Python Tutorial under :ref:`tut-userexceptions`."
msgstr ""

#: ../../library/exceptions.rst:39
msgid "Exception context"
msgstr ""

#: ../../library/exceptions.rst:41
msgid ""
"When raising a new exception while another exception is already being "
"handled, the new exception's :attr:`__context__` attribute is automatically "
"set to the handled exception.  An exception may be handled when an "
":keyword:`except` or :keyword:`finally` clause, or a :keyword:`with` "
"statement, is used."
msgstr ""

#: ../../library/exceptions.rst:47
msgid ""
"This implicit exception context can be supplemented with an explicit cause "
"by using :keyword:`!from` with :keyword:`raise`::"
msgstr ""

#: ../../library/exceptions.rst:53
msgid ""
"The expression following :keyword:`from<raise>` must be an exception or "
"``None``. It will be set as :attr:`__cause__` on the raised exception. "
"Setting :attr:`__cause__` also implicitly sets the "
":attr:`__suppress_context__` attribute to ``True``, so that using ``raise "
"new_exc from None`` effectively replaces the old exception with the new one "
"for display purposes (e.g. converting :exc:`KeyError` to "
":exc:`AttributeError`), while leaving the old exception available in "
":attr:`__context__` for introspection when debugging."
msgstr ""

#: ../../library/exceptions.rst:62
msgid ""
"The default traceback display code shows these chained exceptions in "
"addition to the traceback for the exception itself. An explicitly chained "
"exception in :attr:`__cause__` is always shown when present. An implicitly "
"chained exception in :attr:`__context__` is shown only if :attr:`__cause__` "
"is :const:`None` and :attr:`__suppress_context__` is false."
msgstr ""

#: ../../library/exceptions.rst:68
msgid ""
"In either case, the exception itself is always shown after any chained "
"exceptions so that the final line of the traceback always shows the last "
"exception that was raised."
msgstr ""

#: ../../library/exceptions.rst:74
msgid "Inheriting from built-in exceptions"
msgstr ""

#: ../../library/exceptions.rst:76
msgid ""
"User code can create subclasses that inherit from an exception type. It's "
"recommended to only subclass one exception type at a time to avoid any "
"possible conflicts between how the bases handle the ``args`` attribute, as "
"well as due to possible memory layout incompatibilities."
msgstr ""

#: ../../library/exceptions.rst:83
msgid ""
"Most built-in exceptions are implemented in C for efficiency, see: "
":source:`Objects/exceptions.c`.  Some have custom memory layouts which makes"
" it impossible to create a subclass that inherits from multiple exception "
"types. The memory layout of a type is an implementation detail and might "
"change between Python versions, leading to new conflicts in the future.  "
"Therefore, it's recommended to avoid subclassing multiple exception types "
"altogether."
msgstr ""

#: ../../library/exceptions.rst:93
msgid "Base classes"
msgstr ""

#: ../../library/exceptions.rst:95
msgid ""
"The following exceptions are used mostly as base classes for other "
"exceptions."
msgstr ""

#: ../../library/exceptions.rst:99
msgid ""
"The base class for all built-in exceptions.  It is not meant to be directly "
"inherited by user-defined classes (for that, use :exc:`Exception`).  If "
":func:`str` is called on an instance of this class, the representation of "
"the argument(s) to the instance are returned, or the empty string when there"
" were no arguments."
msgstr ""

#: ../../library/exceptions.rst:107
msgid ""
"The tuple of arguments given to the exception constructor.  Some built-in "
"exceptions (like :exc:`OSError`) expect a certain number of arguments and "
"assign a special meaning to the elements of this tuple, while others are "
"usually called only with a single string giving an error message."
msgstr ""

#: ../../library/exceptions.rst:114
msgid ""
"This method sets *tb* as the new traceback for the exception and returns the"
" exception object.  It is usually used in exception handling code like "
"this::"
msgstr ""

#: ../../library/exceptions.rst:127
msgid ""
"All built-in, non-system-exiting exceptions are derived from this class.  "
"All user-defined exceptions should also be derived from this class."
msgstr ""

#: ../../library/exceptions.rst:133
msgid ""
"The base class for those built-in exceptions that are raised for various "
"arithmetic errors: :exc:`OverflowError`, :exc:`ZeroDivisionError`, "
":exc:`FloatingPointError`."
msgstr ""

#: ../../library/exceptions.rst:140
msgid ""
"Raised when a :ref:`buffer <bufferobjects>` related operation cannot be "
"performed."
msgstr ""

#: ../../library/exceptions.rst:146
msgid ""
"The base class for the exceptions that are raised when a key or index used "
"on a mapping or sequence is invalid: :exc:`IndexError`, :exc:`KeyError`.  "
"This can be raised directly by :func:`codecs.lookup`."
msgstr ""

#: ../../library/exceptions.rst:152
msgid "Concrete exceptions"
msgstr ""

#: ../../library/exceptions.rst:154
msgid "The following exceptions are the exceptions that are usually raised."
msgstr ""

#: ../../library/exceptions.rst:160
msgid "Raised when an :keyword:`assert` statement fails."
msgstr ""

#: ../../library/exceptions.rst:165
msgid ""
"Raised when an attribute reference (see :ref:`attribute-references`) or "
"assignment fails.  (When an object does not support attribute references or "
"attribute assignments at all, :exc:`TypeError` is raised.)"
msgstr ""

#: ../../library/exceptions.rst:172
msgid ""
"Raised when the :func:`input` function hits an end-of-file condition (EOF) "
"without reading any data. (N.B.: the :meth:`io.IOBase.read` and "
":meth:`io.IOBase.readline` methods return an empty string when they hit "
"EOF.)"
msgstr ""

#: ../../library/exceptions.rst:179
msgid "Not currently used."
msgstr ""

#: ../../library/exceptions.rst:184
msgid ""
"Raised when a :term:`generator` or :term:`coroutine` is closed; see "
":meth:`generator.close` and :meth:`coroutine.close`.  It directly inherits "
"from :exc:`BaseException` instead of :exc:`Exception` since it is "
"technically not an error."
msgstr ""

#: ../../library/exceptions.rst:192
msgid ""
"Raised when the :keyword:`import` statement has troubles trying to load a "
"module.  Also raised when the \"from list\" in ``from ... import`` has a "
"name that cannot be found."
msgstr ""

#: ../../library/exceptions.rst:196
msgid ""
"The :attr:`name` and :attr:`path` attributes can be set using keyword-only "
"arguments to the constructor. When set they represent the name of the module"
" that was attempted to be imported and the path to any file which triggered "
"the exception, respectively."
msgstr ""

#: ../../library/exceptions.rst:201
msgid "Added the :attr:`name` and :attr:`path` attributes."
msgstr ""

#: ../../library/exceptions.rst:206
msgid ""
"A subclass of :exc:`ImportError` which is raised by :keyword:`import` when a"
" module could not be located.  It is also raised when ``None`` is found in "
":data:`sys.modules`."
msgstr ""

#: ../../library/exceptions.rst:215
msgid ""
"Raised when a sequence subscript is out of range.  (Slice indices are "
"silently truncated to fall in the allowed range; if an index is not an "
"integer, :exc:`TypeError` is raised.)"
msgstr ""

#: ../../library/exceptions.rst:224
msgid ""
"Raised when a mapping (dictionary) key is not found in the set of existing "
"keys."
msgstr ""

#: ../../library/exceptions.rst:231
msgid ""
"Raised when the user hits the interrupt key (normally :kbd:`Control-C` or "
":kbd:`Delete`).  During execution, a check for interrupts is made regularly."
" The exception inherits from :exc:`BaseException` so as to not be "
"accidentally caught by code that catches :exc:`Exception` and thus prevent "
"the interpreter from exiting."
msgstr ""

#: ../../library/exceptions.rst:239
msgid ""
"Catching a :exc:`KeyboardInterrupt` requires special consideration. Because "
"it can be raised at unpredictable points, it may, in some circumstances, "
"leave the running program in an inconsistent state. It is generally best to "
"allow :exc:`KeyboardInterrupt` to end the program as quickly as possible or "
"avoid raising it entirely. (See :ref:`handlers-and-exceptions`.)"
msgstr ""

#: ../../library/exceptions.rst:249
msgid ""
"Raised when an operation runs out of memory but the situation may still be "
"rescued (by deleting some objects).  The associated value is a string "
"indicating what kind of (internal) operation ran out of memory. Note that "
"because of the underlying memory management architecture (C's "
":c:func:`malloc` function), the interpreter may not always be able to "
"completely recover from this situation; it nevertheless raises an exception "
"so that a stack traceback can be printed, in case a run-away program was the"
" cause."
msgstr ""

#: ../../library/exceptions.rst:260
msgid ""
"Raised when a local or global name is not found.  This applies only to "
"unqualified names.  The associated value is an error message that includes "
"the name that could not be found."
msgstr ""

#: ../../library/exceptions.rst:267
msgid ""
"This exception is derived from :exc:`RuntimeError`.  In user defined base "
"classes, abstract methods should raise this exception when they require "
"derived classes to override the method, or while the class is being "
"developed to indicate that the real implementation still needs to be added."
msgstr ""

#: ../../library/exceptions.rst:274
msgid ""
"It should not be used to indicate that an operator or method is not meant to"
" be supported at all -- in that case either leave the operator / method "
"undefined or, if a subclass, set it to :data:`None`."
msgstr ""

#: ../../library/exceptions.rst:280
msgid ""
"``NotImplementedError`` and ``NotImplemented`` are not interchangeable, even"
" though they have similar names and purposes.  See :data:`NotImplemented` "
"for details on when to use it."
msgstr ""

#: ../../library/exceptions.rst:289
msgid ""
"This exception is raised when a system function returns a system-related "
"error, including I/O failures such as \"file not found\" or \"disk full\" "
"(not for illegal argument types or other incidental errors)."
msgstr ""

#: ../../library/exceptions.rst:293
msgid ""
"The second form of the constructor sets the corresponding attributes, "
"described below.  The attributes default to :const:`None` if not specified."
"  For backwards compatibility, if three arguments are passed, the "
":attr:`~BaseException.args` attribute contains only a 2-tuple of the first "
"two constructor arguments."
msgstr ""

#: ../../library/exceptions.rst:299
msgid ""
"The constructor often actually returns a subclass of :exc:`OSError`, as "
"described in `OS exceptions`_ below.  The particular subclass depends on the"
" final :attr:`.errno` value.  This behaviour only occurs when constructing "
":exc:`OSError` directly or via an alias, and is not inherited when "
"subclassing."
msgstr ""

#: ../../library/exceptions.rst:307
msgid "A numeric error code from the C variable :c:data:`errno`."
msgstr ""

#: ../../library/exceptions.rst:311
msgid ""
"Under Windows, this gives you the native Windows error code.  The "
":attr:`.errno` attribute is then an approximate translation, in POSIX terms,"
" of that native error code."
msgstr ""

#: ../../library/exceptions.rst:315
msgid ""
"Under Windows, if the *winerror* constructor argument is an integer, the "
":attr:`.errno` attribute is determined from the Windows error code, and the "
"*errno* argument is ignored.  On other platforms, the *winerror* argument is"
" ignored, and the :attr:`winerror` attribute does not exist."
msgstr ""

#: ../../library/exceptions.rst:323
msgid ""
"The corresponding error message, as provided by the operating system.  It is"
" formatted by the C functions :c:func:`perror` under POSIX, and "
":c:func:`FormatMessage` under Windows."
msgstr ""

#: ../../library/exceptions.rst:331
msgid ""
"For exceptions that involve a file system path (such as :func:`open` or "
":func:`os.unlink`), :attr:`filename` is the file name passed to the "
"function. For functions that involve two file system paths (such as "
":func:`os.rename`), :attr:`filename2` corresponds to the second file name "
"passed to the function."
msgstr ""

#: ../../library/exceptions.rst:338
msgid ""
":exc:`EnvironmentError`, :exc:`IOError`, :exc:`WindowsError`, "
":exc:`socket.error`, :exc:`select.error` and :exc:`mmap.error` have been "
"merged into :exc:`OSError`, and the constructor may return a subclass."
msgstr ""

#: ../../library/exceptions.rst:344
msgid ""
"The :attr:`filename` attribute is now the original file name passed to the "
"function, instead of the name encoded to or decoded from the filesystem "
"encoding.  Also, the *filename2* constructor argument and attribute was "
"added."
msgstr ""

#: ../../library/exceptions.rst:353
msgid ""
"Raised when the result of an arithmetic operation is too large to be "
"represented.  This cannot occur for integers (which would rather raise "
":exc:`MemoryError` than give up).  However, for historical reasons, "
"OverflowError is sometimes raised for integers that are outside a required "
"range.   Because of the lack of standardization of floating point exception "
"handling in C, most floating point operations are not checked."
msgstr ""

#: ../../library/exceptions.rst:363
msgid ""
"This exception is derived from :exc:`RuntimeError`.  It is raised when the "
"interpreter detects that the maximum recursion depth (see "
":func:`sys.getrecursionlimit`) is exceeded."
msgstr ""

#: ../../library/exceptions.rst:367
msgid "Previously, a plain :exc:`RuntimeError` was raised."
msgstr ""

#: ../../library/exceptions.rst:373
msgid ""
"This exception is raised when a weak reference proxy, created by the "
":func:`weakref.proxy` function, is used to access an attribute of the "
"referent after it has been garbage collected. For more information on weak "
"references, see the :mod:`weakref` module."
msgstr ""

#: ../../library/exceptions.rst:381
msgid ""
"Raised when an error is detected that doesn't fall in any of the other "
"categories.  The associated value is a string indicating what precisely went"
" wrong."
msgstr ""

#: ../../library/exceptions.rst:388
msgid ""
"Raised by built-in function :func:`next` and an :term:`iterator`\\'s "
":meth:`~iterator.__next__` method to signal that there are no further items "
"produced by the iterator."
msgstr ""

#: ../../library/exceptions.rst:392
msgid ""
"The exception object has a single attribute :attr:`value`, which is given as"
" an argument when constructing the exception, and defaults to :const:`None`."
msgstr ""

#: ../../library/exceptions.rst:396
msgid ""
"When a :term:`generator` or :term:`coroutine` function returns, a new "
":exc:`StopIteration` instance is raised, and the value returned by the "
"function is used as the :attr:`value` parameter to the constructor of the "
"exception."
msgstr ""

#: ../../library/exceptions.rst:401
msgid ""
"If a generator code directly or indirectly raises :exc:`StopIteration`, it "
"is converted into a :exc:`RuntimeError` (retaining the :exc:`StopIteration` "
"as the new exception's cause)."
msgstr ""

#: ../../library/exceptions.rst:405
msgid ""
"Added ``value`` attribute and the ability for generator functions to use it "
"to return a value."
msgstr ""

#: ../../library/exceptions.rst:409
msgid ""
"Introduced the RuntimeError transformation via ``from __future__ import "
"generator_stop``, see :pep:`479`."
msgstr ""

#: ../../library/exceptions.rst:413
msgid ""
"Enable :pep:`479` for all code by default: a :exc:`StopIteration` error "
"raised in a generator is transformed into a :exc:`RuntimeError`."
msgstr ""

#: ../../library/exceptions.rst:419
msgid ""
"Must be raised by :meth:`__anext__` method of an :term:`asynchronous "
"iterator` object to stop the iteration."
msgstr ""

#: ../../library/exceptions.rst:426
msgid ""
"Raised when the parser encounters a syntax error.  This may occur in an "
":keyword:`import` statement, in a call to the built-in functions "
":func:`compile`, :func:`exec`, or :func:`eval`, or when reading the initial "
"script or standard input (also interactively)."
msgstr ""

#: ../../library/exceptions.rst:432
msgid ""
"The :func:`str` of the exception instance returns only the error message. "
"Details is a tuple whose members are also available as separate attributes."
msgstr ""

#: ../../library/exceptions.rst:437
msgid "The name of the file the syntax error occurred in."
msgstr ""

#: ../../library/exceptions.rst:441
msgid ""
"Which line number in the file the error occurred in. This is 1-indexed: the "
"first line in the file has a ``lineno`` of 1."
msgstr ""

#: ../../library/exceptions.rst:446
msgid ""
"The column in the line where the error occurred. This is 1-indexed: the "
"first character in the line has an ``offset`` of 1."
msgstr ""

#: ../../library/exceptions.rst:451
msgid "The source code text involved in the error."
msgstr ""

#: ../../library/exceptions.rst:453
msgid ""
"For errors in f-string fields, the message is prefixed by \"f-string: \" and"
" the offsets are offsets in a text constructed from the replacement "
"expression.  For example, compiling f'Bad {a b} field' results in this args "
"attribute: ('f-string: ...', ('', 1, 4, '(a b)\\n'))."
msgstr ""

#: ../../library/exceptions.rst:461
msgid ""
"Base class for syntax errors related to incorrect indentation.  This is a "
"subclass of :exc:`SyntaxError`."
msgstr ""

#: ../../library/exceptions.rst:467
msgid ""
"Raised when indentation contains an inconsistent use of tabs and spaces. "
"This is a subclass of :exc:`IndentationError`."
msgstr ""

#: ../../library/exceptions.rst:473
msgid ""
"Raised when the interpreter finds an internal error, but the situation does "
"not look so serious to cause it to abandon all hope. The associated value is"
" a string indicating what went wrong (in low-level terms)."
msgstr ""

#: ../../library/exceptions.rst:477
msgid ""
"You should report this to the author or maintainer of your Python "
"interpreter. Be sure to report the version of the Python interpreter "
"(``sys.version``; it is also printed at the start of an interactive Python "
"session), the exact error message (the exception's associated value) and if "
"possible the source of the program that triggered the error."
msgstr ""

#: ../../library/exceptions.rst:486
msgid ""
"This exception is raised by the :func:`sys.exit` function.  It inherits from"
" :exc:`BaseException` instead of :exc:`Exception` so that it is not "
"accidentally caught by code that catches :exc:`Exception`.  This allows the "
"exception to properly propagate up and cause the interpreter to exit.  When "
"it is not handled, the Python interpreter exits; no stack traceback is "
"printed.  The constructor accepts the same optional argument passed to "
":func:`sys.exit`. If the value is an integer, it specifies the system exit "
"status (passed to C's :c:func:`exit` function); if it is ``None``, the exit "
"status is zero; if it has another type (such as a string), the object's "
"value is printed and the exit status is one."
msgstr ""

#: ../../library/exceptions.rst:497
msgid ""
"A call to :func:`sys.exit` is translated into an exception so that clean-up "
"handlers (:keyword:`finally` clauses of :keyword:`try` statements) can be "
"executed, and so that a debugger can execute a script without running the "
"risk of losing control.  The :func:`os._exit` function can be used if it is "
"absolutely positively necessary to exit immediately (for example, in the "
"child process after a call to :func:`os.fork`)."
msgstr ""

#: ../../library/exceptions.rst:506
msgid ""
"The exit status or error message that is passed to the constructor. "
"(Defaults to ``None``.)"
msgstr ""

#: ../../library/exceptions.rst:512
msgid ""
"Raised when an operation or function is applied to an object of "
"inappropriate type.  The associated value is a string giving details about "
"the type mismatch."
msgstr ""

#: ../../library/exceptions.rst:515
msgid ""
"This exception may be raised by user code to indicate that an attempted "
"operation on an object is not supported, and is not meant to be. If an "
"object is meant to support a given operation but has not yet provided an "
"implementation, :exc:`NotImplementedError` is the proper exception to raise."
msgstr ""

#: ../../library/exceptions.rst:520
msgid ""
"Passing arguments of the wrong type (e.g. passing a :class:`list` when an "
":class:`int` is expected) should result in a :exc:`TypeError`, but passing "
"arguments with the wrong value (e.g. a number outside expected boundaries) "
"should result in a :exc:`ValueError`."
msgstr ""

#: ../../library/exceptions.rst:527
msgid ""
"Raised when a reference is made to a local variable in a function or method,"
" but no value has been bound to that variable.  This is a subclass of "
":exc:`NameError`."
msgstr ""

#: ../../library/exceptions.rst:534
msgid ""
"Raised when a Unicode-related encoding or decoding error occurs.  It is a "
"subclass of :exc:`ValueError`."
msgstr ""

#: ../../library/exceptions.rst:537
msgid ""
":exc:`UnicodeError` has attributes that describe the encoding or decoding "
"error.  For example, ``err.object[err.start:err.end]`` gives the particular "
"invalid input that the codec failed on."
msgstr ""

#: ../../library/exceptions.rst:543
msgid "The name of the encoding that raised the error."
msgstr ""

#: ../../library/exceptions.rst:547
msgid "A string describing the specific codec error."
msgstr ""

#: ../../library/exceptions.rst:551
msgid "The object the codec was attempting to encode or decode."
msgstr ""

#: ../../library/exceptions.rst:555
msgid "The first index of invalid data in :attr:`object`."
msgstr ""

#: ../../library/exceptions.rst:559
msgid "The index after the last invalid data in :attr:`object`."
msgstr ""

#: ../../library/exceptions.rst:564
msgid ""
"Raised when a Unicode-related error occurs during encoding.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr ""

#: ../../library/exceptions.rst:570
msgid ""
"Raised when a Unicode-related error occurs during decoding.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr ""

#: ../../library/exceptions.rst:576
msgid ""
"Raised when a Unicode-related error occurs during translating.  It is a "
"subclass of :exc:`UnicodeError`."
msgstr ""

#: ../../library/exceptions.rst:582
msgid ""
"Raised when an operation or function receives an argument that has the right"
" type but an inappropriate value, and the situation is not described by a "
"more precise exception such as :exc:`IndexError`."
msgstr ""

#: ../../library/exceptions.rst:589
msgid ""
"Raised when the second argument of a division or modulo operation is zero.  "
"The associated value is a string indicating the type of the operands and the"
" operation."
msgstr ""

#: ../../library/exceptions.rst:594
msgid ""
"The following exceptions are kept for compatibility with previous versions; "
"starting from Python 3.3, they are aliases of :exc:`OSError`."
msgstr ""

#: ../../library/exceptions.rst:603
msgid "Only available on Windows."
msgstr ""

#: ../../library/exceptions.rst:607
msgid "OS exceptions"
msgstr ""

#: ../../library/exceptions.rst:609
msgid ""
"The following exceptions are subclasses of :exc:`OSError`, they get raised "
"depending on the system error code."
msgstr ""

#: ../../library/exceptions.rst:614
msgid ""
"Raised when an operation would block on an object (e.g. socket) set for non-"
"blocking operation. Corresponds to :c:data:`errno` :py:data:`~errno.EAGAIN`,"
" :py:data:`~errno.EALREADY`, :py:data:`~errno.EWOULDBLOCK` and "
":py:data:`~errno.EINPROGRESS`."
msgstr ""

#: ../../library/exceptions.rst:619
msgid ""
"In addition to those of :exc:`OSError`, :exc:`BlockingIOError` can have one "
"more attribute:"
msgstr ""

#: ../../library/exceptions.rst:624
msgid ""
"An integer containing the number of characters written to the stream before "
"it blocked.  This attribute is available when using the buffered I/O classes"
" from the :mod:`io` module."
msgstr ""

#: ../../library/exceptions.rst:630
msgid ""
"Raised when an operation on a child process failed. Corresponds to "
":c:data:`errno` :py:data:`~errno.ECHILD`."
msgstr ""

#: ../../library/exceptions.rst:635
msgid "A base class for connection-related issues."
msgstr ""

#: ../../library/exceptions.rst:637
msgid ""
"Subclasses are :exc:`BrokenPipeError`, :exc:`ConnectionAbortedError`, "
":exc:`ConnectionRefusedError` and :exc:`ConnectionResetError`."
msgstr ""

#: ../../library/exceptions.rst:642
msgid ""
"A subclass of :exc:`ConnectionError`, raised when trying to write on a pipe "
"while the other end has been closed, or trying to write on a socket which "
"has been shutdown for writing. Corresponds to :c:data:`errno` "
":py:data:`~errno.EPIPE` and :py:data:`~errno.ESHUTDOWN`."
msgstr ""

#: ../../library/exceptions.rst:649
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection attempt is "
"aborted by the peer. Corresponds to :c:data:`errno` "
":py:data:`~errno.ECONNABORTED`."
msgstr ""

#: ../../library/exceptions.rst:655
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection attempt is "
"refused by the peer. Corresponds to :c:data:`errno` "
":py:data:`~errno.ECONNREFUSED`."
msgstr ""

#: ../../library/exceptions.rst:661
msgid ""
"A subclass of :exc:`ConnectionError`, raised when a connection is reset by "
"the peer. Corresponds to :c:data:`errno` :py:data:`~errno.ECONNRESET`."
msgstr ""

#: ../../library/exceptions.rst:667
msgid ""
"Raised when trying to create a file or directory which already exists. "
"Corresponds to :c:data:`errno` :py:data:`~errno.EEXIST`."
msgstr ""

#: ../../library/exceptions.rst:672
msgid ""
"Raised when a file or directory is requested but doesn't exist. Corresponds "
"to :c:data:`errno` :py:data:`~errno.ENOENT`."
msgstr ""

#: ../../library/exceptions.rst:677
msgid ""
"Raised when a system call is interrupted by an incoming signal. Corresponds "
"to :c:data:`errno` :py:data:`~errno.EINTR`."
msgstr ""

#: ../../library/exceptions.rst:680
msgid ""
"Python now retries system calls when a syscall is interrupted by a signal, "
"except if the signal handler raises an exception (see :pep:`475` for the "
"rationale), instead of raising :exc:`InterruptedError`."
msgstr ""

#: ../../library/exceptions.rst:687
msgid ""
"Raised when a file operation (such as :func:`os.remove`) is requested on a "
"directory. Corresponds to :c:data:`errno` :py:data:`~errno.EISDIR`."
msgstr ""

#: ../../library/exceptions.rst:693
msgid ""
"Raised when a directory operation (such as :func:`os.listdir`) is requested "
"on something which is not a directory.  On most POSIX platforms, it may also"
" be raised if an operation attempts to open or traverse a non-directory file"
" as if it were a directory. Corresponds to :c:data:`errno` "
":py:data:`~errno.ENOTDIR`."
msgstr ""

#: ../../library/exceptions.rst:701
msgid ""
"Raised when trying to run an operation without the adequate access rights - "
"for example filesystem permissions. Corresponds to :c:data:`errno` "
":py:data:`~errno.EACCES` and :py:data:`~errno.EPERM`."
msgstr ""

#: ../../library/exceptions.rst:707
msgid ""
"Raised when a given process doesn't exist. Corresponds to :c:data:`errno` "
":py:data:`~errno.ESRCH`."
msgstr ""

#: ../../library/exceptions.rst:712
msgid ""
"Raised when a system function timed out at the system level. Corresponds to "
":c:data:`errno` :py:data:`~errno.ETIMEDOUT`."
msgstr ""

#: ../../library/exceptions.rst:715
msgid "All the above :exc:`OSError` subclasses were added."
msgstr ""

#: ../../library/exceptions.rst:721
msgid ":pep:`3151` - Reworking the OS and IO exception hierarchy"
msgstr ""

#: ../../library/exceptions.rst:727
msgid "Warnings"
msgstr ""

#: ../../library/exceptions.rst:729
msgid ""
"The following exceptions are used as warning categories; see the "
":ref:`warning-categories` documentation for more details."
msgstr ""

#: ../../library/exceptions.rst:734
msgid "Base class for warning categories."
msgstr ""

#: ../../library/exceptions.rst:739
msgid "Base class for warnings generated by user code."
msgstr ""

#: ../../library/exceptions.rst:744
msgid ""
"Base class for warnings about deprecated features when those warnings are "
"intended for other Python developers."
msgstr ""

#: ../../library/exceptions.rst:747
msgid ""
"Ignored by the default warning filters, except in the ``__main__`` module "
"(:pep:`565`). Enabling the :ref:`Python Development Mode <devmode>` shows "
"this warning."
msgstr ""

#: ../../library/exceptions.rst:751 ../../library/exceptions.rst:767
msgid "The deprecation policy is described in :pep:`387`."
msgstr ""

#: ../../library/exceptions.rst:756
msgid ""
"Base class for warnings about features which are obsolete and expected to be"
" deprecated in the future, but are not deprecated at the moment."
msgstr ""

#: ../../library/exceptions.rst:760
msgid ""
"This class is rarely used as emitting a warning about a possible upcoming "
"deprecation is unusual, and :exc:`DeprecationWarning` is preferred for "
"already active deprecations."
msgstr ""

#: ../../library/exceptions.rst:764 ../../library/exceptions.rst:790
#: ../../library/exceptions.rst:808
msgid ""
"Ignored by the default warning filters. Enabling the :ref:`Python "
"Development Mode <devmode>` shows this warning."
msgstr ""

#: ../../library/exceptions.rst:772
msgid "Base class for warnings about dubious syntax."
msgstr ""

#: ../../library/exceptions.rst:777
msgid "Base class for warnings about dubious runtime behavior."
msgstr ""

#: ../../library/exceptions.rst:782
msgid ""
"Base class for warnings about deprecated features when those warnings are "
"intended for end users of applications that are written in Python."
msgstr ""

#: ../../library/exceptions.rst:788
msgid "Base class for warnings about probable mistakes in module imports."
msgstr ""

#: ../../library/exceptions.rst:796
msgid "Base class for warnings related to Unicode."
msgstr ""

#: ../../library/exceptions.rst:801
msgid ""
"Base class for warnings related to :class:`bytes` and :class:`bytearray`."
msgstr ""

#: ../../library/exceptions.rst:806
msgid "Base class for warnings related to resource usage."
msgstr ""

#: ../../library/exceptions.rst:816
msgid "Exception hierarchy"
msgstr ""

#: ../../library/exceptions.rst:818
msgid "The class hierarchy for built-in exceptions is:"
msgstr ""
