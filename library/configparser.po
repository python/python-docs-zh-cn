# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/configparser.rst:2
msgid ":mod:`configparser` --- Configuration file parser"
msgstr ""

#: ../../library/configparser.rst:14
msgid "**Source code:** :source:`Lib/configparser.py`"
msgstr ""

#: ../../library/configparser.rst:24
msgid ""
"This module provides the :class:`ConfigParser` class which implements a "
"basic configuration language which provides a structure similar to what's "
"found in Microsoft Windows INI files.  You can use this to write Python "
"programs which can be customized by end users easily."
msgstr ""

#: ../../library/configparser.rst:31
msgid ""
"This library does *not* interpret or write the value-type prefixes used in "
"the Windows Registry extended version of INI syntax."
msgstr ""

#: ../../library/configparser.rst:38
msgid "Module :mod:`tomllib`"
msgstr ""

#: ../../library/configparser.rst:37
msgid ""
"TOML is a well-specified format for application configuration files. It is "
"specifically designed to be an improved version of INI."
msgstr ""

#: ../../library/configparser.rst:42
msgid "Module :mod:`shlex`"
msgstr ""

#: ../../library/configparser.rst:41
msgid ""
"Support for creating Unix shell-like mini-languages which can also be used "
"for application configuration files."
msgstr ""

#: ../../library/configparser.rst:45
msgid "Module :mod:`json`"
msgstr ""

#: ../../library/configparser.rst:45
msgid ""
"The ``json`` module implements a subset of JavaScript syntax which is "
"sometimes used for configuration, but does not support comments."
msgstr ""

#: ../../library/configparser.rst:60
msgid "Quick Start"
msgstr ""

#: ../../library/configparser.rst:62
msgid "Let's take a very basic configuration file that looks like this:"
msgstr ""

#: ../../library/configparser.rst:79
msgid ""
"The structure of INI files is described `in the following section "
"<#supported-ini-file-structure>`_.  Essentially, the file consists of "
"sections, each of which contains keys with values. :mod:`configparser` "
"classes can read and write such files.  Let's start by creating the above "
"configuration file programmatically."
msgstr ""

#: ../../library/configparser.rst:103
msgid ""
"As you can see, we can treat a config parser much like a dictionary. There "
"are differences, `outlined later <#mapping-protocol-access>`_, but the "
"behavior is very close to what you would expect from a dictionary."
msgstr ""

#: ../../library/configparser.rst:107
msgid ""
"Now that we have created and saved a configuration file, let's read it back "
"and explore the data it holds."
msgstr ""

#: ../../library/configparser.rst:142
msgid ""
"As we can see above, the API is pretty straightforward.  The only bit of "
"magic involves the ``DEFAULT`` section which provides default values for all"
" other sections [1]_.  Note also that keys in sections are case-insensitive "
"and stored in lowercase [1]_."
msgstr ""

#: ../../library/configparser.rst:147
msgid ""
"It is possible to read several configurations into a single "
":class:`ConfigParser`, where the most recently added configuration has the "
"highest priority. Any conflicting keys are taken from the more recent "
"configuration while the previously existing keys are retained."
msgstr ""

#: ../../library/configparser.rst:168
msgid ""
"This behaviour is equivalent to a :meth:`ConfigParser.read` call with "
"several files passed to the *filenames* parameter."
msgstr ""

#: ../../library/configparser.rst:173
msgid "Supported Datatypes"
msgstr ""

#: ../../library/configparser.rst:175
msgid ""
"Config parsers do not guess datatypes of values in configuration files, "
"always storing them internally as strings.  This means that if you need "
"other datatypes, you should convert on your own:"
msgstr ""

#: ../../library/configparser.rst:186
msgid ""
"Since this task is so common, config parsers provide a range of handy getter"
" methods to handle integers, floats and booleans.  The last one is the most "
"interesting because simply passing the value to ``bool()`` would do no good "
"since ``bool('False')`` is still ``True``.  This is why config parsers also "
"provide :meth:`~ConfigParser.getboolean`.  This method is case-insensitive "
"and recognizes Boolean values from ``'yes'``/``'no'``, ``'on'``/``'off'``, "
"``'true'``/``'false'`` and ``'1'``/``'0'`` [1]_.  For example:"
msgstr ""

#: ../../library/configparser.rst:203
msgid ""
"Apart from :meth:`~ConfigParser.getboolean`, config parsers also provide "
"equivalent :meth:`~ConfigParser.getint` and :meth:`~ConfigParser.getfloat` "
"methods.  You can register your own converters and customize the provided "
"ones. [1]_"
msgstr ""

#: ../../library/configparser.rst:209
msgid "Fallback Values"
msgstr ""

#: ../../library/configparser.rst:211
msgid ""
"As with a dictionary, you can use a section's :meth:`~ConfigParser.get` "
"method to provide fallback values:"
msgstr ""

#: ../../library/configparser.rst:224
msgid ""
"Please note that default values have precedence over fallback values. For "
"instance, in our example the ``'CompressionLevel'`` key was specified only "
"in the ``'DEFAULT'`` section.  If we try to get it from the section "
"``'topsecret.server.example'``, we will always get the default, even if we "
"specify a fallback:"
msgstr ""

#: ../../library/configparser.rst:235
msgid ""
"One more thing to be aware of is that the parser-level "
":meth:`~ConfigParser.get` method provides a custom, more complex interface, "
"maintained for backwards compatibility.  When using this method, a fallback "
"value can be provided via the ``fallback`` keyword-only argument:"
msgstr ""

#: ../../library/configparser.rst:246
msgid ""
"The same ``fallback`` argument can be used with the "
":meth:`~ConfigParser.getint`, :meth:`~ConfigParser.getfloat` and "
":meth:`~ConfigParser.getboolean` methods, for example:"
msgstr ""

#: ../../library/configparser.rst:262
msgid "Supported INI File Structure"
msgstr ""

#: ../../library/configparser.rst:264
msgid ""
"A configuration file consists of sections, each led by a ``[section]`` "
"header, followed by key/value entries separated by a specific string (``=`` "
"or ``:`` by default [1]_).  By default, section names are case sensitive but"
" keys are not [1]_.  Leading and trailing whitespace is removed from keys "
"and values. Values can be omitted if the parser is configured to allow it "
"[1]_, in which case the key/value delimiter may also be left out.  Values "
"can also span multiple lines, as long as they are indented deeper than the "
"first line of the value.  Depending on the parser's mode, blank lines may be"
" treated as parts of multiline values or ignored."
msgstr ""

#: ../../library/configparser.rst:274
msgid ""
"By default, a valid section name can be any string that does not contain "
"'\\\\n'. To change this, see :attr:`ConfigParser.SECTCRE`."
msgstr ""

#: ../../library/configparser.rst:277
msgid ""
"Configuration files may include comments, prefixed by specific characters "
"(``#`` and ``;`` by default [1]_).  Comments may appear on their own on an "
"otherwise empty line, possibly indented. [1]_"
msgstr ""

#: ../../library/configparser.rst:281 ../../library/configparser.rst:344
msgid "For example:"
msgstr ""

#: ../../library/configparser.rst:329
msgid "Interpolation of values"
msgstr ""

#: ../../library/configparser.rst:331
msgid ""
"On top of the core functionality, :class:`ConfigParser` supports "
"interpolation.  This means values can be preprocessed before returning them "
"from ``get()`` calls."
msgstr ""

#: ../../library/configparser.rst:339
msgid ""
"The default implementation used by :class:`ConfigParser`.  It enables values"
" to contain format strings which refer to other values in the same section, "
"or values in the special default section [1]_.  Additional default values "
"can be provided on initialization."
msgstr ""

#: ../../library/configparser.rst:357
msgid ""
"In the example above, :class:`ConfigParser` with *interpolation* set to "
"``BasicInterpolation()`` would resolve ``%(home_dir)s`` to the value of "
"``home_dir`` (``/Users`` in this case).  ``%(my_dir)s`` in effect would "
"resolve to ``/Users/lumberjack``.  All interpolations are done on demand so "
"keys used in the chain of references do not have to be specified in any "
"specific order in the configuration file."
msgstr ""

#: ../../library/configparser.rst:364
msgid ""
"With ``interpolation`` set to ``None``, the parser would simply return "
"``%(my_dir)s/Pictures`` as the value of ``my_pictures`` and "
"``%(home_dir)s/lumberjack`` as the value of ``my_dir``."
msgstr ""

#: ../../library/configparser.rst:372
msgid ""
"An alternative handler for interpolation which implements a more advanced "
"syntax, used for instance in ``zc.buildout``.  Extended interpolation is "
"using ``${section:option}`` to denote a value from a foreign section. "
"Interpolation can span multiple levels.  For convenience, if the "
"``section:`` part is omitted, interpolation defaults to the current section "
"(and possibly the default values from the special section)."
msgstr ""

#: ../../library/configparser.rst:379
msgid ""
"For example, the configuration specified above with basic interpolation, "
"would look like this with extended interpolation:"
msgstr ""

#: ../../library/configparser.rst:393
msgid "Values from other sections can be fetched as well:"
msgstr ""

#: ../../library/configparser.rst:415
msgid "Mapping Protocol Access"
msgstr ""

#: ../../library/configparser.rst:419
msgid ""
"Mapping protocol access is a generic name for functionality that enables "
"using custom objects as if they were dictionaries.  In case of "
":mod:`configparser`, the mapping interface implementation is using the "
"``parser['section']['option']`` notation."
msgstr ""

#: ../../library/configparser.rst:424
msgid ""
"``parser['section']`` in particular returns a proxy for the section's data "
"in the parser.  This means that the values are not copied but they are taken"
" from the original parser on demand.  What's even more important is that "
"when values are changed on a section proxy, they are actually mutated in the"
" original parser."
msgstr ""

#: ../../library/configparser.rst:430
msgid ""
":mod:`configparser` objects behave as close to actual dictionaries as "
"possible. The mapping interface is complete and adheres to the "
":class:`~collections.abc.MutableMapping` ABC. However, there are a few "
"differences that should be taken into account:"
msgstr ""

#: ../../library/configparser.rst:435
msgid ""
"By default, all keys in sections are accessible in a case-insensitive manner"
" [1]_.  E.g. ``for option in parser[\"section\"]`` yields only "
"``optionxform``'ed option key names.  This means lowercased keys by default."
"  At the same time, for a section that holds the key ``'a'``, both "
"expressions return ``True``::"
msgstr ""

#: ../../library/configparser.rst:443
msgid ""
"All sections include ``DEFAULTSECT`` values as well which means that "
"``.clear()`` on a section may not leave the section visibly empty.  This is "
"because default values cannot be deleted from the section (because "
"technically they are not there).  If they are overridden in the section, "
"deleting causes the default value to be visible again.  Trying to delete a "
"default value causes a :exc:`KeyError`."
msgstr ""

#: ../../library/configparser.rst:450
msgid "``DEFAULTSECT`` cannot be removed from the parser:"
msgstr ""

#: ../../library/configparser.rst:452
msgid "trying to delete it raises :exc:`ValueError`,"
msgstr ""

#: ../../library/configparser.rst:454
msgid "``parser.clear()`` leaves it intact,"
msgstr ""

#: ../../library/configparser.rst:456
msgid "``parser.popitem()`` never returns it."
msgstr ""

#: ../../library/configparser.rst:458
msgid ""
"``parser.get(section, option, **kwargs)`` - the second argument is **not** a"
" fallback value.  Note however that the section-level ``get()`` methods are "
"compatible both with the mapping protocol and the classic configparser API."
msgstr ""

#: ../../library/configparser.rst:462
msgid ""
"``parser.items()`` is compatible with the mapping protocol (returns a list "
"of *section_name*, *section_proxy* pairs including the DEFAULTSECT).  "
"However, this method can also be invoked with arguments: "
"``parser.items(section, raw, vars)``.  The latter call returns a list of "
"*option*, *value* pairs for a specified ``section``, with all interpolations"
" expanded (unless ``raw=True`` is provided)."
msgstr ""

#: ../../library/configparser.rst:469
msgid ""
"The mapping protocol is implemented on top of the existing legacy API so "
"that subclasses overriding the original interface still should have mappings"
" working as expected."
msgstr ""

#: ../../library/configparser.rst:475
msgid "Customizing Parser Behaviour"
msgstr ""

#: ../../library/configparser.rst:477
msgid ""
"There are nearly as many INI format variants as there are applications using"
" it. :mod:`configparser` goes a long way to provide support for the largest "
"sensible set of INI styles available.  The default functionality is mainly "
"dictated by historical background and it's very likely that you will want to"
" customize some of the features."
msgstr ""

#: ../../library/configparser.rst:483
msgid ""
"The most common way to change the way a specific config parser works is to "
"use the :meth:`!__init__` options:"
msgstr ""

#: ../../library/configparser.rst:486
msgid "*defaults*, default value: ``None``"
msgstr ""

#: ../../library/configparser.rst:488
msgid ""
"This option accepts a dictionary of key-value pairs which will be initially "
"put in the ``DEFAULT`` section.  This makes for an elegant way to support "
"concise configuration files that don't specify values which are the same as "
"the documented default."
msgstr ""

#: ../../library/configparser.rst:493
msgid ""
"Hint: if you want to specify default values for a specific section, use "
":meth:`~ConfigParser.read_dict` before you read the actual file."
msgstr ""

#: ../../library/configparser.rst:496
msgid "*dict_type*, default value: :class:`dict`"
msgstr ""

#: ../../library/configparser.rst:498
msgid ""
"This option has a major impact on how the mapping protocol will behave and "
"how the written configuration files look.  With the standard dictionary, "
"every section is stored in the order they were added to the parser.  Same "
"goes for options within sections."
msgstr ""

#: ../../library/configparser.rst:503
msgid ""
"An alternative dictionary type can be used for example to sort sections and "
"options on write-back."
msgstr ""

#: ../../library/configparser.rst:506
msgid ""
"Please note: there are ways to add a set of key-value pairs in a single "
"operation.  When you use a regular dictionary in those operations, the order"
" of the keys will be ordered.  For example:"
msgstr ""

#: ../../library/configparser.rst:528
msgid "*allow_no_value*, default value: ``False``"
msgstr ""

#: ../../library/configparser.rst:530
msgid ""
"Some configuration files are known to include settings without values, but "
"which otherwise conform to the syntax supported by :mod:`configparser`.  The"
" *allow_no_value* parameter to the constructor can be used to indicate that "
"such values should be accepted:"
msgstr ""

#: ../../library/configparser.rst:565
msgid "*delimiters*, default value: ``('=', ':')``"
msgstr ""

#: ../../library/configparser.rst:567
msgid ""
"Delimiters are substrings that delimit keys from values within a section. "
"The first occurrence of a delimiting substring on a line is considered a "
"delimiter.  This means values (but not keys) can contain the delimiters."
msgstr ""

#: ../../library/configparser.rst:571
msgid ""
"See also the *space_around_delimiters* argument to "
":meth:`ConfigParser.write`."
msgstr ""

#: ../../library/configparser.rst:574
msgid "*comment_prefixes*, default value: ``('#', ';')``"
msgstr ""

#: ../../library/configparser.rst:576
msgid "*inline_comment_prefixes*, default value: ``None``"
msgstr ""

#: ../../library/configparser.rst:578
msgid ""
"Comment prefixes are strings that indicate the start of a valid comment "
"within a config file. *comment_prefixes* are used only on otherwise empty "
"lines (optionally indented) whereas *inline_comment_prefixes* can be used "
"after every valid value (e.g. section names, options and empty lines as "
"well).  By default inline comments are disabled and ``'#'`` and ``';'`` are "
"used as prefixes for whole line comments."
msgstr ""

#: ../../library/configparser.rst:585
msgid ""
"In previous versions of :mod:`configparser` behaviour matched "
"``comment_prefixes=('#',';')`` and ``inline_comment_prefixes=(';',)``."
msgstr ""

#: ../../library/configparser.rst:589
msgid ""
"Please note that config parsers don't support escaping of comment prefixes "
"so using *inline_comment_prefixes* may prevent users from specifying option "
"values with characters used as comment prefixes.  When in doubt, avoid "
"setting *inline_comment_prefixes*.  In any circumstances, the only way of "
"storing comment prefix characters at the beginning of a line in multiline "
"values is to interpolate the prefix, for example::"
msgstr ""

#: ../../library/configparser.rst:635
msgid "*strict*, default value: ``True``"
msgstr ""

#: ../../library/configparser.rst:637
msgid ""
"When set to ``True``, the parser will not allow for any section or option "
"duplicates while reading from a single source (using "
":meth:`~ConfigParser.read_file`, :meth:`~ConfigParser.read_string` or "
":meth:`~ConfigParser.read_dict`).  It is recommended to use strict parsers "
"in new applications."
msgstr ""

#: ../../library/configparser.rst:642
msgid ""
"In previous versions of :mod:`configparser` behaviour matched "
"``strict=False``."
msgstr ""

#: ../../library/configparser.rst:646
msgid "*empty_lines_in_values*, default value: ``True``"
msgstr ""

#: ../../library/configparser.rst:648
msgid ""
"In config parsers, values can span multiple lines as long as they are "
"indented more than the key that holds them.  By default parsers also let "
"empty lines to be parts of values.  At the same time, keys can be "
"arbitrarily indented themselves to improve readability.  In consequence, "
"when configuration files get big and complex, it is easy for the user to "
"lose track of the file structure.  Take for instance:"
msgstr ""

#: ../../library/configparser.rst:663
msgid ""
"This can be especially problematic for the user to see if she's using a "
"proportional font to edit the file.  That is why when your application does "
"not need values with empty lines, you should consider disallowing them.  "
"This will make empty lines split keys every time.  In the example above, it "
"would produce two keys, ``key`` and ``this``."
msgstr ""

#: ../../library/configparser.rst:669
msgid ""
"*default_section*, default value: ``configparser.DEFAULTSECT`` (that is: "
"``\"DEFAULT\"``)"
msgstr ""

#: ../../library/configparser.rst:672
msgid ""
"The convention of allowing a special section of default values for other "
"sections or interpolation purposes is a powerful concept of this library, "
"letting users create complex declarative configurations.  This section is "
"normally called ``\"DEFAULT\"`` but this can be customized to point to any "
"other valid section name.  Some typical values include: ``\"general\"`` or "
"``\"common\"``.  The name provided is used for recognizing default sections "
"when reading from any source and is used when writing configuration back to "
"a file.  Its current value can be retrieved using the "
"``parser_instance.default_section`` attribute and may be modified at runtime"
" (i.e. to convert files from one format to another)."
msgstr ""

#: ../../library/configparser.rst:683
msgid "*interpolation*, default value: ``configparser.BasicInterpolation``"
msgstr ""

#: ../../library/configparser.rst:685
msgid ""
"Interpolation behaviour may be customized by providing a custom handler "
"through the *interpolation* argument. ``None`` can be used to turn off "
"interpolation completely, ``ExtendedInterpolation()`` provides a more "
"advanced variant inspired by ``zc.buildout``.  More on the subject in the "
"`dedicated documentation section <#interpolation-of-values>`_. "
":class:`RawConfigParser` has a default value of ``None``."
msgstr ""

#: ../../library/configparser.rst:692
msgid "*converters*, default value: not set"
msgstr ""

#: ../../library/configparser.rst:694
msgid ""
"Config parsers provide option value getters that perform type conversion.  "
"By default :meth:`~ConfigParser.getint`, :meth:`~ConfigParser.getfloat`, and"
" :meth:`~ConfigParser.getboolean` are implemented.  Should other getters be "
"desirable, users may define them in a subclass or pass a dictionary where "
"each key is a name of the converter and each value is a callable "
"implementing said conversion.  For instance, passing ``{'decimal': "
"decimal.Decimal}`` would add :meth:`!getdecimal` on both the parser object "
"and all section proxies.  In other words, it will be possible to write both "
"``parser_instance.getdecimal('section', 'key', fallback=0)`` and "
"``parser_instance['section'].getdecimal('key', 0)``."
msgstr ""

#: ../../library/configparser.rst:705
msgid ""
"If the converter needs to access the state of the parser, it can be "
"implemented as a method on a config parser subclass.  If the name of this "
"method starts with ``get``, it will be available on all section proxies, in "
"the dict-compatible form (see the ``getdecimal()`` example above)."
msgstr ""

#: ../../library/configparser.rst:710
msgid ""
"More advanced customization may be achieved by overriding default values of "
"these parser attributes.  The defaults are defined on the classes, so they "
"may be overridden by subclasses or by attribute assignment."
msgstr ""

#: ../../library/configparser.rst:716
msgid ""
"By default when using :meth:`~ConfigParser.getboolean`, config parsers "
"consider the following values ``True``: ``'1'``, ``'yes'``, ``'true'``, "
"``'on'`` and the following values ``False``: ``'0'``, ``'no'``, ``'false'``,"
" ``'off'``.  You can override this by specifying a custom dictionary of "
"strings and their Boolean outcomes. For example:"
msgstr ""

#: ../../library/configparser.rst:734
msgid ""
"Other typical Boolean pairs include ``accept``/``reject`` or "
"``enabled``/``disabled``."
msgstr ""

#: ../../library/configparser.rst:740
msgid ""
"This method transforms option names on every read, get, or set operation.  "
"The default converts the name to lowercase.  This also means that when a "
"configuration file gets written, all keys will be lowercase.  Override this "
"method if that's unsuitable. For example:"
msgstr ""

#: ../../library/configparser.rst:770
msgid ""
"The optionxform function transforms option names to a canonical form. This "
"should be an idempotent function: if the name is already in canonical form, "
"it should be returned unchanged."
msgstr ""

#: ../../library/configparser.rst:777
msgid ""
"A compiled regular expression used to parse section headers.  The default "
"matches ``[section]`` to the name ``\"section\"``.  Whitespace is considered"
" part of the section name, thus ``[  larch  ]`` will be read as a section of"
" name ``\"  larch  \"``.  Override this attribute if that's unsuitable.  For"
" example:"
msgstr ""

#: ../../library/configparser.rst:805
msgid ""
"While ConfigParser objects also use an ``OPTCRE`` attribute for recognizing "
"option lines, it's not recommended to override it because that would "
"interfere with constructor options *allow_no_value* and *delimiters*."
msgstr ""

#: ../../library/configparser.rst:811
msgid "Legacy API Examples"
msgstr ""

#: ../../library/configparser.rst:813
msgid ""
"Mainly because of backwards compatibility concerns, :mod:`configparser` "
"provides also a legacy API with explicit ``get``/``set`` methods.  While "
"there are valid use cases for the methods outlined below, mapping protocol "
"access is preferred for new projects.  The legacy API is at times more "
"advanced, low-level and downright counterintuitive."
msgstr ""

#: ../../library/configparser.rst:819
msgid "An example of writing to a configuration file::"
msgstr ""

#: ../../library/configparser.rst:842
msgid "An example of reading the configuration file again::"
msgstr ""

#: ../../library/configparser.rst:860
msgid "To get interpolation, use :class:`ConfigParser`::"
msgstr ""

#: ../../library/configparser.rst:893
msgid ""
"Default values are available in both types of ConfigParsers.  They are used "
"in interpolation if an option used is not defined elsewhere. ::"
msgstr ""

#: ../../library/configparser.rst:911
msgid "ConfigParser Objects"
msgstr ""

#: ../../library/configparser.rst:915
msgid ""
"The main configuration parser.  When *defaults* is given, it is initialized "
"into the dictionary of intrinsic defaults.  When *dict_type* is given, it "
"will be used to create the dictionary objects for the list of sections, for "
"the options within a section, and for the default values."
msgstr ""

#: ../../library/configparser.rst:920
msgid ""
"When *delimiters* is given, it is used as the set of substrings that divide "
"keys from values.  When *comment_prefixes* is given, it will be used as the "
"set of substrings that prefix comments in otherwise empty lines. Comments "
"can be indented.  When *inline_comment_prefixes* is given, it will be used "
"as the set of substrings that prefix comments in non-empty lines."
msgstr ""

#: ../../library/configparser.rst:926
msgid ""
"When *strict* is ``True`` (the default), the parser won't allow for any "
"section or option duplicates while reading from a single source (file, "
"string or dictionary), raising :exc:`DuplicateSectionError` or "
":exc:`DuplicateOptionError`.  When *empty_lines_in_values* is ``False`` "
"(default: ``True``), each empty line marks the end of an option.  Otherwise,"
" internal empty lines of a multiline option are kept as part of the value. "
"When *allow_no_value* is ``True`` (default: ``False``), options without "
"values are accepted; the value held for these is ``None`` and they are "
"serialized without the trailing delimiter."
msgstr ""

#: ../../library/configparser.rst:936
msgid ""
"When *default_section* is given, it specifies the name for the special "
"section holding default values for other sections and interpolation purposes"
" (normally named ``\"DEFAULT\"``).  This value can be retrieved and changed "
"at runtime using the ``default_section`` instance attribute. This won't re-"
"evaluate an already parsed config file, but will be used when writing parsed"
" settings to a new config file."
msgstr ""

#: ../../library/configparser.rst:943
msgid ""
"Interpolation behaviour may be customized by providing a custom handler "
"through the *interpolation* argument. ``None`` can be used to turn off "
"interpolation completely, ``ExtendedInterpolation()`` provides a more "
"advanced variant inspired by ``zc.buildout``.  More on the subject in the "
"`dedicated documentation section <#interpolation-of-values>`_."
msgstr ""

#: ../../library/configparser.rst:949
msgid ""
"All option names used in interpolation will be passed through the "
":meth:`optionxform` method just like any other option name reference.  For "
"example, using the default implementation of :meth:`optionxform` (which "
"converts option names to lower case), the values ``foo %(bar)s`` and ``foo "
"%(BAR)s`` are equivalent."
msgstr ""

#: ../../library/configparser.rst:955
msgid ""
"When *converters* is given, it should be a dictionary where each key "
"represents the name of a type converter and each value is a callable "
"implementing the conversion from string to the desired datatype.  Every "
"converter gets its own corresponding :meth:`!get*()` method on the parser "
"object and section proxies."
msgstr ""

#: ../../library/configparser.rst:961
msgid "The default *dict_type* is :class:`collections.OrderedDict`."
msgstr ""

#: ../../library/configparser.rst:964
msgid ""
"*allow_no_value*, *delimiters*, *comment_prefixes*, *strict*, "
"*empty_lines_in_values*, *default_section* and *interpolation* were added."
msgstr ""

#: ../../library/configparser.rst:969
msgid "The *converters* argument was added."
msgstr ""

#: ../../library/configparser.rst:972
msgid ""
"The *defaults* argument is read with :meth:`read_dict()`, providing "
"consistent behavior across the parser: non-string keys and values are "
"implicitly converted to strings."
msgstr ""

#: ../../library/configparser.rst:977 ../../library/configparser.rst:1262
msgid ""
"The default *dict_type* is :class:`dict`, since it now preserves insertion "
"order."
msgstr ""

#: ../../library/configparser.rst:983
msgid "Return a dictionary containing the instance-wide defaults."
msgstr ""

#: ../../library/configparser.rst:988
msgid ""
"Return a list of the sections available; the *default section* is not "
"included in the list."
msgstr ""

#: ../../library/configparser.rst:994
msgid ""
"Add a section named *section* to the instance.  If a section by the given "
"name already exists, :exc:`DuplicateSectionError` is raised.  If the "
"*default section* name is passed, :exc:`ValueError` is raised.  The name of "
"the section must be a string; if not, :exc:`TypeError` is raised."
msgstr ""

#: ../../library/configparser.rst:999
msgid "Non-string section names raise :exc:`TypeError`."
msgstr ""

#: ../../library/configparser.rst:1005
msgid ""
"Indicates whether the named *section* is present in the configuration. The "
"*default section* is not acknowledged."
msgstr ""

#: ../../library/configparser.rst:1011
msgid "Return a list of options available in the specified *section*."
msgstr ""

#: ../../library/configparser.rst:1016
msgid ""
"If the given *section* exists, and contains the given *option*, return "
":const:`True`; otherwise return :const:`False`.  If the specified *section* "
"is :const:`None` or an empty string, DEFAULT is assumed."
msgstr ""

#: ../../library/configparser.rst:1023
msgid ""
"Attempt to read and parse an iterable of filenames, returning a list of "
"filenames which were successfully parsed."
msgstr ""

#: ../../library/configparser.rst:1026
msgid ""
"If *filenames* is a string, a :class:`bytes` object or a :term:`path-like "
"object`, it is treated as a single filename.  If a file named in *filenames*"
" cannot be opened, that file will be ignored.  This is designed so that you "
"can specify an iterable of potential configuration file locations (for "
"example, the current directory, the user's home directory, and some system-"
"wide directory), and all existing configuration files in the iterable will "
"be read."
msgstr ""

#: ../../library/configparser.rst:1035
msgid ""
"If none of the named files exist, the :class:`ConfigParser` instance will "
"contain an empty dataset.  An application which requires initial values to "
"be loaded from a file should load the required file or files using "
":meth:`read_file` before calling :meth:`read` for any optional files::"
msgstr ""

#: ../../library/configparser.rst:1048
msgid ""
"Added the *encoding* parameter. Previously, all files were read using the "
"default encoding for :func:`open`."
msgstr ""

#: ../../library/configparser.rst:1052
msgid "The *filenames* parameter accepts a :term:`path-like object`."
msgstr ""

#: ../../library/configparser.rst:1055
msgid "The *filenames* parameter accepts a :class:`bytes` object."
msgstr ""

#: ../../library/configparser.rst:1061
msgid ""
"Read and parse configuration data from *f* which must be an iterable "
"yielding Unicode strings (for example files opened in text mode)."
msgstr ""

#: ../../library/configparser.rst:1064
msgid ""
"Optional argument *source* specifies the name of the file being read.  If "
"not given and *f* has a :attr:`!name` attribute, that is used for *source*; "
"the default is ``'<???>'``."
msgstr ""

#: ../../library/configparser.rst:1068
msgid "Replaces :meth:`!readfp`."
msgstr ""

#: ../../library/configparser.rst:1073
msgid "Parse configuration data from a string."
msgstr ""

#: ../../library/configparser.rst:1075
msgid ""
"Optional argument *source* specifies a context-specific name of the string "
"passed.  If not given, ``'<string>'`` is used.  This should commonly be a "
"filesystem path or a URL."
msgstr ""

#: ../../library/configparser.rst:1084
msgid ""
"Load configuration from any object that provides a dict-like ``items()`` "
"method.  Keys are section names, values are dictionaries with keys and "
"values that should be present in the section.  If the used dictionary type "
"preserves order, sections and their keys will be added in order. Values are "
"automatically converted to strings."
msgstr ""

#: ../../library/configparser.rst:1090
msgid ""
"Optional argument *source* specifies a context-specific name of the "
"dictionary passed.  If not given, ``<dict>`` is used."
msgstr ""

#: ../../library/configparser.rst:1093
msgid "This method can be used to copy state between parsers."
msgstr ""

#: ../../library/configparser.rst:1100
msgid ""
"Get an *option* value for the named *section*.  If *vars* is provided, it "
"must be a dictionary.  The *option* is looked up in *vars* (if provided), "
"*section*, and in *DEFAULTSECT* in that order.  If the key is not found and "
"*fallback* is provided, it is used as a fallback value.  ``None`` can be "
"provided as a *fallback* value."
msgstr ""

#: ../../library/configparser.rst:1106
msgid ""
"All the ``'%'`` interpolations are expanded in the return values, unless the"
" *raw* argument is true.  Values for interpolation keys are looked up in the"
" same manner as the option."
msgstr ""

#: ../../library/configparser.rst:1110
msgid ""
"Arguments *raw*, *vars* and *fallback* are keyword only to protect users "
"from trying to use the third argument as the *fallback* fallback (especially"
" when using the mapping protocol)."
msgstr ""

#: ../../library/configparser.rst:1118
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to an integer.  See :meth:`get` for explanation of *raw*, *vars* and "
"*fallback*."
msgstr ""

#: ../../library/configparser.rst:1125
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to a floating point number.  See :meth:`get` for explanation of *raw*, "
"*vars* and *fallback*."
msgstr ""

#: ../../library/configparser.rst:1132
msgid ""
"A convenience method which coerces the *option* in the specified *section* "
"to a Boolean value.  Note that the accepted values for the option are "
"``'1'``, ``'yes'``, ``'true'``, and ``'on'``, which cause this method to "
"return ``True``, and ``'0'``, ``'no'``, ``'false'``, and ``'off'``, which "
"cause it to return ``False``.  These string values are checked in a case-"
"insensitive manner.  Any other value will cause it to raise "
":exc:`ValueError`.  See :meth:`get` for explanation of *raw*, *vars* and "
"*fallback*."
msgstr ""

#: ../../library/configparser.rst:1145
msgid ""
"When *section* is not given, return a list of *section_name*, "
"*section_proxy* pairs, including DEFAULTSECT."
msgstr ""

#: ../../library/configparser.rst:1148
msgid ""
"Otherwise, return a list of *name*, *value* pairs for the options in the "
"given *section*.  Optional arguments have the same meaning as for the "
":meth:`get` method."
msgstr ""

#: ../../library/configparser.rst:1152
msgid ""
"Items present in *vars* no longer appear in the result.  The previous "
"behaviour mixed actual parser options with variables provided for "
"interpolation."
msgstr ""

#: ../../library/configparser.rst:1160
msgid ""
"If the given section exists, set the given option to the specified value; "
"otherwise raise :exc:`NoSectionError`.  *option* and *value* must be "
"strings; if not, :exc:`TypeError` is raised."
msgstr ""

#: ../../library/configparser.rst:1167
msgid ""
"Write a representation of the configuration to the specified :term:`file "
"object`, which must be opened in text mode (accepting strings).  This "
"representation can be parsed by a future :meth:`read` call.  If "
"*space_around_delimiters* is true, delimiters between keys and values are "
"surrounded by spaces."
msgstr ""

#: ../../library/configparser.rst:1175
msgid ""
"Comments in the original configuration file are not preserved when writing "
"the configuration back. What is considered a comment, depends on the given "
"values for *comment_prefix* and *inline_comment_prefix*."
msgstr ""

#: ../../library/configparser.rst:1183
msgid ""
"Remove the specified *option* from the specified *section*.  If the section "
"does not exist, raise :exc:`NoSectionError`.  If the option existed to be "
"removed, return :const:`True`; otherwise return :const:`False`."
msgstr ""

#: ../../library/configparser.rst:1191
msgid ""
"Remove the specified *section* from the configuration.  If the section in "
"fact existed, return ``True``.  Otherwise return ``False``."
msgstr ""

#: ../../library/configparser.rst:1197
msgid ""
"Transforms the option name *option* as found in an input file or as passed "
"in by client code to the form that should be used in the internal "
"structures.  The default implementation returns a lower-case version of "
"*option*; subclasses may override this or client code can set an attribute "
"of this name on instances to affect this behavior."
msgstr ""

#: ../../library/configparser.rst:1203
msgid ""
"You don't need to subclass the parser to use this method, you can also set "
"it on an instance, to a function that takes a string argument and returns a "
"string.  Setting it to ``str``, for example, would make option names case "
"sensitive::"
msgstr ""

#: ../../library/configparser.rst:1211
msgid ""
"Note that when reading configuration files, whitespace around the option "
"names is stripped before :meth:`optionxform` is called."
msgstr ""

#: ../../library/configparser.rst:1217
msgid "Use :meth:`read_file` instead."
msgstr ""

#: ../../library/configparser.rst:1220
msgid ""
":meth:`readfp` now iterates on *fp* instead of calling ``fp.readline()``."
msgstr ""

#: ../../library/configparser.rst:1223
msgid ""
"For existing code calling :meth:`readfp` with arguments which don't support "
"iteration, the following generator may be used as a wrapper around the file-"
"like object::"
msgstr ""

#: ../../library/configparser.rst:1233
msgid ""
"Instead of ``parser.readfp(fp)`` use "
"``parser.read_file(readline_generator(fp))``."
msgstr ""

#: ../../library/configparser.rst:1239
msgid ""
"The maximum depth for recursive interpolation for "
":meth:`~configparser.ConfigParser.get` when the *raw* parameter is false.  "
"This is relevant only when the default *interpolation* is used."
msgstr ""

#: ../../library/configparser.rst:1247
msgid "RawConfigParser Objects"
msgstr ""

#: ../../library/configparser.rst:1257
msgid ""
"Legacy variant of the :class:`ConfigParser`.  It has interpolation disabled "
"by default and allows for non-string section names, option names, and values"
" via its unsafe ``add_section`` and ``set`` methods, as well as the legacy "
"``defaults=`` keyword argument handling."
msgstr ""

#: ../../library/configparser.rst:1267
msgid ""
"Consider using :class:`ConfigParser` instead which checks types of the "
"values to be stored internally.  If you don't want interpolation, you can "
"use ``ConfigParser(interpolation=None)``."
msgstr ""

#: ../../library/configparser.rst:1274
msgid ""
"Add a section named *section* to the instance.  If a section by the given "
"name already exists, :exc:`DuplicateSectionError` is raised.  If the "
"*default section* name is passed, :exc:`ValueError` is raised."
msgstr ""

#: ../../library/configparser.rst:1278
msgid ""
"Type of *section* is not checked which lets users create non-string named "
"sections.  This behaviour is unsupported and may cause internal errors."
msgstr ""

#: ../../library/configparser.rst:1284
msgid ""
"If the given section exists, set the given option to the specified value; "
"otherwise raise :exc:`NoSectionError`.  While it is possible to use "
":class:`RawConfigParser` (or :class:`ConfigParser` with *raw* parameters set"
" to true) for *internal* storage of non-string values, full functionality "
"(including interpolation and output to files) can only be achieved using "
"string values."
msgstr ""

#: ../../library/configparser.rst:1291
msgid ""
"This method lets users assign non-string values to keys internally.  This "
"behaviour is unsupported and will cause errors when attempting to write to a"
" file or get it in non-raw mode.  **Use the mapping protocol API** which "
"does not allow such assignments to take place."
msgstr ""

#: ../../library/configparser.rst:1298
msgid "Exceptions"
msgstr ""

#: ../../library/configparser.rst:1302
msgid "Base class for all other :mod:`configparser` exceptions."
msgstr ""

#: ../../library/configparser.rst:1307
msgid "Exception raised when a specified section is not found."
msgstr ""

#: ../../library/configparser.rst:1312
msgid ""
"Exception raised if :meth:`~ConfigParser.add_section` is called with the "
"name of a section that is already present or in strict parsers when a "
"section if found more than once in a single input file, string or "
"dictionary."
msgstr ""

#: ../../library/configparser.rst:1316
msgid ""
"Added the optional *source* and *lineno* attributes and parameters to "
":meth:`!__init__`."
msgstr ""

#: ../../library/configparser.rst:1323
msgid ""
"Exception raised by strict parsers if a single option appears twice during "
"reading from a single file, string or dictionary. This catches misspellings "
"and case sensitivity-related errors, e.g. a dictionary may have two keys "
"representing the same case-insensitive configuration key."
msgstr ""

#: ../../library/configparser.rst:1331
msgid ""
"Exception raised when a specified option is not found in the specified "
"section."
msgstr ""

#: ../../library/configparser.rst:1337
msgid ""
"Base class for exceptions raised when problems occur performing string "
"interpolation."
msgstr ""

#: ../../library/configparser.rst:1343
msgid ""
"Exception raised when string interpolation cannot be completed because the "
"number of iterations exceeds :const:`MAX_INTERPOLATION_DEPTH`.  Subclass of "
":exc:`InterpolationError`."
msgstr ""

#: ../../library/configparser.rst:1350
msgid ""
"Exception raised when an option referenced from a value does not exist. "
"Subclass of :exc:`InterpolationError`."
msgstr ""

#: ../../library/configparser.rst:1356
msgid ""
"Exception raised when the source text into which substitutions are made does"
" not conform to the required syntax.  Subclass of :exc:`InterpolationError`."
msgstr ""

#: ../../library/configparser.rst:1362
msgid ""
"Exception raised when attempting to parse a file which has no section "
"headers."
msgstr ""

#: ../../library/configparser.rst:1368
msgid "Exception raised when errors occur attempting to parse a file."
msgstr ""

#: ../../library/configparser.rst:1370
msgid ""
"The ``filename`` attribute and :meth:`!__init__` argument were renamed to "
"``source`` for consistency."
msgstr ""

#: ../../library/configparser.rst:1376
msgid "Footnotes"
msgstr ""

#: ../../library/configparser.rst:1377
msgid ""
"Config parsers allow for heavy customization.  If you are interested in "
"changing the behaviour outlined by the footnote reference, consult the "
"`Customizing Parser Behaviour`_ section."
msgstr ""

#: ../../library/configparser.rst:16
msgid ".ini"
msgstr ""

#: ../../library/configparser.rst:16
msgid "file"
msgstr ""

#: ../../library/configparser.rst:16
msgid "configuration"
msgstr ""

#: ../../library/configparser.rst:16
msgid "ini file"
msgstr ""

#: ../../library/configparser.rst:16
msgid "Windows ini file"
msgstr ""

#: ../../library/configparser.rst:335
msgid "% (percent)"
msgstr ""

#: ../../library/configparser.rst:335 ../../library/configparser.rst:368
msgid "interpolation in configuration files"
msgstr ""

#: ../../library/configparser.rst:368
msgid "$ (dollar)"
msgstr ""
