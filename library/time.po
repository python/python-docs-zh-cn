# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:18+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/time.rst:2
msgid ":mod:`time` --- Time access and conversions"
msgstr ""

#: ../../library/time.rst:9
msgid ""
"This module provides various time-related functions. For related "
"functionality, see also the :mod:`datetime` and :mod:`calendar` modules."
msgstr ""

#: ../../library/time.rst:12
msgid ""
"Although this module is always available, not all functions are available on"
" all platforms.  Most of the functions defined in this module call platform "
"C library functions with the same name.  It may sometimes be helpful to "
"consult the platform documentation, because the semantics of these functions"
" varies among platforms."
msgstr ""

#: ../../library/time.rst:18
msgid "An explanation of some terminology and conventions is in order."
msgstr ""

#: ../../library/time.rst:24
msgid ""
"The :dfn:`epoch` is the point where the time starts, and is platform "
"dependent.  For Unix, the epoch is January 1, 1970, 00:00:00 (UTC). To find "
"out what the epoch is on a given platform, look at ``time.gmtime(0)``."
msgstr ""

#: ../../library/time.rst:33
msgid ""
"The term :dfn:`seconds since the epoch` refers to the total number of "
"elapsed seconds since the epoch, typically excluding `leap seconds`_.  Leap "
"seconds are excluded from this total on all POSIX-compliant platforms."
msgstr ""

#: ../../library/time.rst:40
msgid ""
"The functions in this module may not handle dates and times before the epoch"
" or far in the future.  The cut-off point in the future is determined by the"
" C library; for 32-bit systems, it is typically in 2038."
msgstr ""

#: ../../library/time.rst:47
msgid ""
"Function :func:`strptime` can parse 2-digit years when given ``%y`` format "
"code. When 2-digit years are parsed, they are converted according to the "
"POSIX and ISO C standards: values 69--99 are mapped to 1969--1999, and "
"values 0--68 are mapped to 2000--2068."
msgstr ""

#: ../../library/time.rst:57
msgid ""
"UTC is Coordinated Universal Time (formerly known as Greenwich Mean Time, or"
" GMT).  The acronym UTC is not a mistake but a compromise between English "
"and French."
msgstr ""

#: ../../library/time.rst:63
msgid ""
"DST is Daylight Saving Time, an adjustment of the timezone by (usually) one "
"hour during part of the year.  DST rules are magic (determined by local law)"
" and can change from year to year.  The C library has a table containing the"
" local rules (often it is read from a system file for flexibility) and is "
"the only source of True Wisdom in this respect."
msgstr ""

#: ../../library/time.rst:69
msgid ""
"The precision of the various real-time functions may be less than suggested "
"by the units in which their value or argument is expressed. E.g. on most "
"Unix systems, the clock \"ticks\" only 50 or 100 times a second."
msgstr ""

#: ../../library/time.rst:73
msgid ""
"On the other hand, the precision of :func:`.time` and :func:`sleep` is "
"better than their Unix equivalents: times are expressed as floating point "
"numbers, :func:`.time` returns the most accurate time available (using Unix "
":c:func:`gettimeofday` where available), and :func:`sleep` will accept a "
"time with a nonzero fraction (Unix :c:func:`select` is used to implement "
"this, where available)."
msgstr ""

#: ../../library/time.rst:80
msgid ""
"The time value as returned by :func:`gmtime`, :func:`localtime`, and "
":func:`strptime`, and accepted by :func:`asctime`, :func:`mktime` and "
":func:`strftime`, is a sequence of 9 integers.  The return values of "
":func:`gmtime`, :func:`localtime`, and :func:`strptime` also offer attribute"
" names for individual fields."
msgstr ""

#: ../../library/time.rst:86
msgid "See :class:`struct_time` for a description of these objects."
msgstr ""

#: ../../library/time.rst:88
msgid ""
"The :class:`struct_time` type was extended to provide the :attr:`tm_gmtoff` "
"and :attr:`tm_zone` attributes when platform supports corresponding ``struct"
" tm`` members."
msgstr ""

#: ../../library/time.rst:93
msgid ""
"The :class:`struct_time` attributes :attr:`tm_gmtoff` and :attr:`tm_zone` "
"are now available on all platforms."
msgstr ""

#: ../../library/time.rst:97
msgid "Use the following functions to convert between time representations:"
msgstr ""

#: ../../library/time.rst:100
msgid "From"
msgstr ""

#: ../../library/time.rst:100
msgid "To"
msgstr ""

#: ../../library/time.rst:100
msgid "Use"
msgstr ""

#: ../../library/time.rst:102 ../../library/time.rst:105
#: ../../library/time.rst:108 ../../library/time.rst:111
msgid "seconds since the epoch"
msgstr ""

#: ../../library/time.rst:102 ../../library/time.rst:108
msgid ":class:`struct_time` in UTC"
msgstr ""

#: ../../library/time.rst:102
msgid ":func:`gmtime`"
msgstr ""

#: ../../library/time.rst:105 ../../library/time.rst:111
msgid ":class:`struct_time` in local time"
msgstr ""

#: ../../library/time.rst:105
msgid ":func:`localtime`"
msgstr ""

#: ../../library/time.rst:108
msgid ":func:`calendar.timegm`"
msgstr ""

#: ../../library/time.rst:111
msgid ":func:`mktime`"
msgstr ""

#: ../../library/time.rst:119
msgid "Functions"
msgstr ""

#: ../../library/time.rst:123
msgid ""
"Convert a tuple or :class:`struct_time` representing a time as returned by "
":func:`gmtime` or :func:`localtime` to a string of the following form: "
"``'Sun Jun 20 23:21:05 1993'``. The day field is two characters long and is "
"space padded if the day is a single digit, e.g.: ``'Wed Jun  9 04:26:40 "
"1993'``."
msgstr ""

#: ../../library/time.rst:129
msgid ""
"If *t* is not provided, the current time as returned by :func:`localtime` is"
" used. Locale information is not used by :func:`asctime`."
msgstr ""

#: ../../library/time.rst:134
msgid ""
"Unlike the C function of the same name, :func:`asctime` does not add a "
"trailing newline."
msgstr ""

#: ../../library/time.rst:139
msgid ""
"Return the *clk_id* of the thread-specific CPU-time clock for the specified "
"*thread_id*."
msgstr ""

#: ../../library/time.rst:141
msgid ""
"Use :func:`threading.get_ident` or the :attr:`~threading.Thread.ident` "
"attribute of :class:`threading.Thread` objects to get a suitable value for "
"*thread_id*."
msgstr ""

#: ../../library/time.rst:146
msgid ""
"Passing an invalid or expired *thread_id* may result in undefined behavior, "
"such as segmentation fault."
msgstr ""

#: ../../library/time.rst:151
msgid ""
":ref:`Availability <availability>`: Unix (see the man page for "
":manpage:`pthread_getcpuclockid(3)` for further information)."
msgstr ""

#: ../../library/time.rst:156
msgid ""
"Return the resolution (precision) of the specified clock *clk_id*.  Refer to"
" :ref:`time-clock-id-constants` for a list of accepted values for *clk_id*."
msgstr ""

#: ../../library/time.rst:160 ../../library/time.rst:170
#: ../../library/time.rst:179 ../../library/time.rst:189
#: ../../library/time.rst:198 ../../library/time.rst:635
#: ../../library/time.rst:752 ../../library/time.rst:771
#: ../../library/time.rst:799 ../../library/time.rst:834
msgid ":ref:`Availability <availability>`: Unix."
msgstr ""

#: ../../library/time.rst:166
msgid ""
"Return the time of the specified clock *clk_id*.  Refer to :ref:`time-clock-"
"id-constants` for a list of accepted values for *clk_id*."
msgstr ""

#: ../../library/time.rst:176
msgid "Similar to :func:`clock_gettime` but return time as nanoseconds."
msgstr ""

#: ../../library/time.rst:185
msgid ""
"Set the time of the specified clock *clk_id*.  Currently, "
":data:`CLOCK_REALTIME` is the only accepted value for *clk_id*."
msgstr ""

#: ../../library/time.rst:195
msgid "Similar to :func:`clock_settime` but set time with nanoseconds."
msgstr ""

#: ../../library/time.rst:204
msgid ""
"Convert a time expressed in seconds since the epoch to a string of a form: "
"``'Sun Jun 20 23:21:05 1993'`` representing local time. The day field is two"
" characters long and is space padded if the day is a single digit, e.g.: "
"``'Wed Jun  9 04:26:40 1993'``."
msgstr ""

#: ../../library/time.rst:209
msgid ""
"If *secs* is not provided or :const:`None`, the current time as returned by "
":func:`.time` is used. ``ctime(secs)`` is equivalent to "
"``asctime(localtime(secs))``. Locale information is not used by "
":func:`ctime`."
msgstr ""

#: ../../library/time.rst:217
msgid ""
"Get information on the specified clock as a namespace object. Supported "
"clock names and the corresponding functions to read their value are:"
msgstr ""

#: ../../library/time.rst:221
msgid "``'monotonic'``: :func:`time.monotonic`"
msgstr ""

#: ../../library/time.rst:222
msgid "``'perf_counter'``: :func:`time.perf_counter`"
msgstr ""

#: ../../library/time.rst:223
msgid "``'process_time'``: :func:`time.process_time`"
msgstr ""

#: ../../library/time.rst:224
msgid "``'thread_time'``: :func:`time.thread_time`"
msgstr ""

#: ../../library/time.rst:225
msgid "``'time'``: :func:`time.time`"
msgstr ""

#: ../../library/time.rst:227
msgid "The result has the following attributes:"
msgstr ""

#: ../../library/time.rst:229
msgid ""
"*adjustable*: ``True`` if the clock can be changed automatically (e.g. by a "
"NTP daemon) or manually by the system administrator, ``False`` otherwise"
msgstr ""

#: ../../library/time.rst:231
msgid ""
"*implementation*: The name of the underlying C function used to get the "
"clock value.  Refer to :ref:`time-clock-id-constants` for possible values."
msgstr ""

#: ../../library/time.rst:233
msgid ""
"*monotonic*: ``True`` if the clock cannot go backward, ``False`` otherwise"
msgstr ""

#: ../../library/time.rst:235
msgid "*resolution*: The resolution of the clock in seconds (:class:`float`)"
msgstr ""

#: ../../library/time.rst:242
msgid ""
"Convert a time expressed in seconds since the epoch to a "
":class:`struct_time` in UTC in which the dst flag is always zero.  If *secs*"
" is not provided or :const:`None`, the current time as returned by "
":func:`.time` is used.  Fractions of a second are ignored.  See above for a "
"description of the :class:`struct_time` object. See :func:`calendar.timegm` "
"for the inverse of this function."
msgstr ""

#: ../../library/time.rst:252
msgid ""
"Like :func:`gmtime` but converts to local time.  If *secs* is not provided "
"or :const:`None`, the current time as returned by :func:`.time` is used.  "
"The dst flag is set to ``1`` when DST applies to the given time."
msgstr ""

#: ../../library/time.rst:256
msgid ""
":func:`localtime` may raise :exc:`OverflowError`, if the timestamp is "
"outside the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions, and :exc:`OSError` on :c:func:`localtime` or "
":c:func:`gmtime` failure. It's common for this to be restricted to years "
"between 1970 and 2038."
msgstr ""

#: ../../library/time.rst:265
msgid ""
"This is the inverse function of :func:`localtime`.  Its argument is the "
":class:`struct_time` or full 9-tuple (since the dst flag is needed; use "
"``-1`` as the dst flag if it is unknown) which expresses the time in *local*"
" time, not UTC.  It returns a floating point number, for compatibility with "
":func:`.time`. If the input value cannot be represented as a valid time, "
"either :exc:`OverflowError` or :exc:`ValueError` will be raised (which "
"depends on whether the invalid value is caught by Python or the underlying C"
" libraries). The earliest date for which it can generate a time is platform-"
"dependent."
msgstr ""

#: ../../library/time.rst:277
msgid ""
"Return the value (in fractional seconds) of a monotonic clock, i.e. a clock "
"that cannot go backwards.  The clock is not affected by system clock "
"updates. The reference point of the returned value is undefined, so that "
"only the difference between the results of two calls is valid."
msgstr ""

#: ../../library/time.rst:283
msgid "The function is now always available and always system-wide."
msgstr ""

#: ../../library/time.rst:289
msgid "Similar to :func:`monotonic`, but return time as nanoseconds."
msgstr ""

#: ../../library/time.rst:298
msgid ""
"Return the value (in fractional seconds) of a performance counter, i.e. a "
"clock with the highest available resolution to measure a short duration.  It"
" does include time elapsed during sleep and is system-wide.  The reference "
"point of the returned value is undefined, so that only the difference "
"between the results of two calls is valid."
msgstr ""

#: ../../library/time.rst:308
msgid "Similar to :func:`perf_counter`, but return time as nanoseconds."
msgstr ""

#: ../../library/time.rst:320
msgid ""
"Return the value (in fractional seconds) of the sum of the system and user "
"CPU time of the current process.  It does not include time elapsed during "
"sleep.  It is process-wide by definition.  The reference point of the "
"returned value is undefined, so that only the difference between the results"
" of two calls is valid."
msgstr ""

#: ../../library/time.rst:330
msgid "Similar to :func:`process_time` but return time as nanoseconds."
msgstr ""

#: ../../library/time.rst:336
msgid ""
"Suspend execution of the calling thread for the given number of seconds. The"
" argument may be a floating point number to indicate a more precise sleep "
"time. The actual suspension time may be less than that requested because any"
" caught signal will terminate the :func:`sleep` following execution of that "
"signal's catching routine.  Also, the suspension time may be longer than "
"requested by an arbitrary amount because of the scheduling of other activity"
" in the system."
msgstr ""

#: ../../library/time.rst:344
msgid ""
"The function now sleeps at least *secs* even if the sleep is interrupted by "
"a signal, except if the signal handler raises an exception (see :pep:`475` "
"for the rationale)."
msgstr ""

#: ../../library/time.rst:355
msgid ""
"Convert a tuple or :class:`struct_time` representing a time as returned by "
":func:`gmtime` or :func:`localtime` to a string as specified by the *format*"
" argument.  If *t* is not provided, the current time as returned by "
":func:`localtime` is used.  *format* must be a string.  :exc:`ValueError` is"
" raised if any field in *t* is outside of the allowed range."
msgstr ""

#: ../../library/time.rst:361
msgid ""
"0 is a legal argument for any position in the time tuple; if it is normally "
"illegal the value is forced to a correct one."
msgstr ""

#: ../../library/time.rst:364
msgid ""
"The following directives can be embedded in the *format* string. They are "
"shown without the optional field width and precision specification, and are "
"replaced by the indicated characters in the :func:`strftime` result:"
msgstr ""

#: ../../library/time.rst:369
msgid "Directive"
msgstr ""

#: ../../library/time.rst:369
msgid "Meaning"
msgstr "含意"

#: ../../library/time.rst:369
msgid "Notes"
msgstr "备注"

#: ../../library/time.rst:371
msgid "``%a``"
msgstr ""

#: ../../library/time.rst:371
msgid "Locale's abbreviated weekday name."
msgstr ""

#: ../../library/time.rst:374
msgid "``%A``"
msgstr ""

#: ../../library/time.rst:374
msgid "Locale's full weekday name."
msgstr ""

#: ../../library/time.rst:376
msgid "``%b``"
msgstr ""

#: ../../library/time.rst:376
msgid "Locale's abbreviated month name."
msgstr ""

#: ../../library/time.rst:379
msgid "``%B``"
msgstr ""

#: ../../library/time.rst:379
msgid "Locale's full month name."
msgstr ""

#: ../../library/time.rst:381
msgid "``%c``"
msgstr ""

#: ../../library/time.rst:381
msgid "Locale's appropriate date and time representation."
msgstr ""

#: ../../library/time.rst:384
msgid "``%d``"
msgstr ""

#: ../../library/time.rst:384
msgid "Day of the month as a decimal number [01,31]."
msgstr ""

#: ../../library/time.rst:387
msgid "``%H``"
msgstr ""

#: ../../library/time.rst:387
msgid "Hour (24-hour clock) as a decimal number [00,23]."
msgstr ""

#: ../../library/time.rst:390
msgid "``%I``"
msgstr ""

#: ../../library/time.rst:390
msgid "Hour (12-hour clock) as a decimal number [01,12]."
msgstr ""

#: ../../library/time.rst:393
msgid "``%j``"
msgstr ""

#: ../../library/time.rst:393
msgid "Day of the year as a decimal number [001,366]."
msgstr ""

#: ../../library/time.rst:396
msgid "``%m``"
msgstr ""

#: ../../library/time.rst:396
msgid "Month as a decimal number [01,12]."
msgstr ""

#: ../../library/time.rst:399
msgid "``%M``"
msgstr ""

#: ../../library/time.rst:399
msgid "Minute as a decimal number [00,59]."
msgstr ""

#: ../../library/time.rst:402
msgid "``%p``"
msgstr ""

#: ../../library/time.rst:402
msgid "Locale's equivalent of either AM or PM."
msgstr ""

#: ../../library/time.rst:402
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/time.rst:405
msgid "``%S``"
msgstr ""

#: ../../library/time.rst:405
msgid "Second as a decimal number [00,61]."
msgstr ""

#: ../../library/time.rst:405
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/time.rst:408
msgid "``%U``"
msgstr ""

#: ../../library/time.rst:408
msgid ""
"Week number of the year (Sunday as the first day of the week) as a decimal "
"number [00,53]. All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""

#: ../../library/time.rst:408 ../../library/time.rst:419
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/time.rst:416
msgid "``%w``"
msgstr ""

#: ../../library/time.rst:416
msgid "Weekday as a decimal number [0(Sunday),6]."
msgstr ""

#: ../../library/time.rst:419
msgid "``%W``"
msgstr ""

#: ../../library/time.rst:419
msgid ""
"Week number of the year (Monday as the first day of the week) as a decimal "
"number [00,53]. All days in a new year preceding the first Monday are "
"considered to be in week 0."
msgstr ""

#: ../../library/time.rst:427
msgid "``%x``"
msgstr ""

#: ../../library/time.rst:427
msgid "Locale's appropriate date representation."
msgstr ""

#: ../../library/time.rst:430
msgid "``%X``"
msgstr ""

#: ../../library/time.rst:430
msgid "Locale's appropriate time representation."
msgstr ""

#: ../../library/time.rst:433
msgid "``%y``"
msgstr ""

#: ../../library/time.rst:433
msgid "Year without century as a decimal number [00,99]."
msgstr ""

#: ../../library/time.rst:436
msgid "``%Y``"
msgstr ""

#: ../../library/time.rst:436
msgid "Year with century as a decimal number."
msgstr ""

#: ../../library/time.rst:439
msgid "``%z``"
msgstr ""

#: ../../library/time.rst:439
msgid ""
"Time zone offset indicating a positive or negative time difference from "
"UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits "
"and M represents decimal minute digits [-23:59, +23:59]. [1]_"
msgstr ""

#: ../../library/time.rst:445
msgid "``%Z``"
msgstr ""

#: ../../library/time.rst:445
msgid ""
"Time zone name (no characters if no time zone exists). Deprecated. [1]_"
msgstr ""

#: ../../library/time.rst:448
msgid "``%%``"
msgstr ""

#: ../../library/time.rst:448
msgid "A literal ``'%'`` character."
msgstr ""

#: ../../library/time.rst:451
msgid "Notes:"
msgstr "注释："

#: ../../library/time.rst:454
msgid ""
"When used with the :func:`strptime` function, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr ""

#: ../../library/time.rst:458
msgid ""
"The range really is ``0`` to ``61``; value ``60`` is valid in timestamps "
"representing `leap seconds`_ and value ``61`` is supported for historical "
"reasons."
msgstr ""

#: ../../library/time.rst:463
msgid ""
"When used with the :func:`strptime` function, ``%U`` and ``%W`` are only "
"used in calculations when the day of the week and the year are specified."
msgstr ""

#: ../../library/time.rst:466
msgid ""
"Here is an example, a format for dates compatible with that specified  in "
"the :rfc:`2822` Internet email standard.  [1]_ ::"
msgstr ""

#: ../../library/time.rst:473
msgid ""
"Additional directives may be supported on certain platforms, but only the "
"ones listed here have a meaning standardized by ANSI C.  To see the full set"
" of format codes supported on your platform, consult the "
":manpage:`strftime(3)` documentation."
msgstr ""

#: ../../library/time.rst:478
msgid ""
"On some platforms, an optional field width and precision specification can "
"immediately follow the initial ``'%'`` of a directive in the following "
"order; this is also not portable. The field width is normally 2 except for "
"``%j`` where it is 3."
msgstr ""

#: ../../library/time.rst:489
msgid ""
"Parse a string representing a time according to a format.  The return value "
"is a :class:`struct_time` as returned by :func:`gmtime` or "
":func:`localtime`."
msgstr ""

#: ../../library/time.rst:493
msgid ""
"The *format* parameter uses the same directives as those used by "
":func:`strftime`; it defaults to ``\"%a %b %d %H:%M:%S %Y\"`` which matches "
"the formatting returned by :func:`ctime`. If *string* cannot be parsed "
"according to *format*, or if it has excess data after parsing, "
":exc:`ValueError` is raised. The default values used to fill in any missing "
"data when more accurate values cannot be inferred are ``(1900, 1, 1, 0, 0, "
"0, 0, 1, -1)``. Both *string* and *format* must be strings."
msgstr ""

#: ../../library/time.rst:501
msgid "For example:"
msgstr ""

#: ../../library/time.rst:508
msgid ""
"Support for the ``%Z`` directive is based on the values contained in "
"``tzname`` and whether ``daylight`` is true.  Because of this, it is "
"platform-specific except for recognizing UTC and GMT which are always known "
"(and are considered to be non-daylight savings timezones)."
msgstr ""

#: ../../library/time.rst:513
msgid ""
"Only the directives specified in the documentation are supported.  Because "
"``strftime()`` is implemented per platform it can sometimes offer more "
"directives than those listed.  But ``strptime()`` is independent of any "
"platform and thus does not necessarily support all directives available that"
" are not documented as supported."
msgstr ""

#: ../../library/time.rst:522
msgid ""
"The type of the time value sequence returned by :func:`gmtime`, "
":func:`localtime`, and :func:`strptime`.  It is an object with a "
":term:`named tuple` interface: values can be accessed by index and by "
"attribute name.  The following values are present:"
msgstr ""

#: ../../library/time.rst:528
msgid "Index"
msgstr ""

#: ../../library/time.rst:528
msgid "Attribute"
msgstr ""

#: ../../library/time.rst:528
msgid "Values"
msgstr ""

#: ../../library/time.rst:530
msgid "0"
msgstr "0"

#: ../../library/time.rst:530
msgid ":attr:`tm_year`"
msgstr ""

#: ../../library/time.rst:530
msgid "(for example, 1993)"
msgstr ""

#: ../../library/time.rst:532
msgid "1"
msgstr ""

#: ../../library/time.rst:532
msgid ":attr:`tm_mon`"
msgstr ""

#: ../../library/time.rst:532
msgid "range [1, 12]"
msgstr ""

#: ../../library/time.rst:534
msgid "2"
msgstr ""

#: ../../library/time.rst:534
msgid ":attr:`tm_mday`"
msgstr ""

#: ../../library/time.rst:534
msgid "range [1, 31]"
msgstr ""

#: ../../library/time.rst:536
msgid "3"
msgstr ""

#: ../../library/time.rst:536
msgid ":attr:`tm_hour`"
msgstr ""

#: ../../library/time.rst:536
msgid "range [0, 23]"
msgstr ""

#: ../../library/time.rst:538
msgid "4"
msgstr ""

#: ../../library/time.rst:538
msgid ":attr:`tm_min`"
msgstr ""

#: ../../library/time.rst:538
msgid "range [0, 59]"
msgstr ""

#: ../../library/time.rst:540
msgid "5"
msgstr ""

#: ../../library/time.rst:540
msgid ":attr:`tm_sec`"
msgstr ""

#: ../../library/time.rst:540
msgid "range [0, 61]; see **(2)** in :func:`strftime` description"
msgstr ""

#: ../../library/time.rst:543
msgid "6"
msgstr ""

#: ../../library/time.rst:543
msgid ":attr:`tm_wday`"
msgstr ""

#: ../../library/time.rst:543
msgid "range [0, 6], Monday is 0"
msgstr ""

#: ../../library/time.rst:545
msgid "7"
msgstr ""

#: ../../library/time.rst:545
msgid ":attr:`tm_yday`"
msgstr ""

#: ../../library/time.rst:545
msgid "range [1, 366]"
msgstr ""

#: ../../library/time.rst:547
msgid "8"
msgstr ""

#: ../../library/time.rst:547
msgid ":attr:`tm_isdst`"
msgstr ""

#: ../../library/time.rst:547
msgid "0, 1 or -1; see below"
msgstr ""

#: ../../library/time.rst:549 ../../library/time.rst:551
msgid "N/A"
msgstr ""

#: ../../library/time.rst:549
msgid ":attr:`tm_zone`"
msgstr ""

#: ../../library/time.rst:549
msgid "abbreviation of timezone name"
msgstr ""

#: ../../library/time.rst:551
msgid ":attr:`tm_gmtoff`"
msgstr ""

#: ../../library/time.rst:551
msgid "offset east of UTC in seconds"
msgstr ""

#: ../../library/time.rst:554
msgid ""
"Note that unlike the C structure, the month value is a range of [1, 12], not"
" [0, 11]."
msgstr ""

#: ../../library/time.rst:557
msgid ""
"In calls to :func:`mktime`, :attr:`tm_isdst` may be set to 1 when daylight "
"savings time is in effect, and 0 when it is not.  A value of -1 indicates "
"that this is not known, and will usually result in the correct state being "
"filled in."
msgstr ""

#: ../../library/time.rst:561
msgid ""
"When a tuple with an incorrect length is passed to a function expecting a "
":class:`struct_time`, or having elements of the wrong type, a "
":exc:`TypeError` is raised."
msgstr ""

#: ../../library/time.rst:567
msgid ""
"Return the time in seconds since the epoch_ as a floating point number. The "
"specific date of the epoch and the handling of `leap seconds`_ is platform "
"dependent. On Windows and most Unix systems, the epoch is January 1, 1970, "
"00:00:00 (UTC) and leap seconds are not counted towards the time in seconds "
"since the epoch. This is commonly referred to as `Unix time "
"<https://en.wikipedia.org/wiki/Unix_time>`_. To find out what the epoch is "
"on a given platform, look at ``gmtime(0)``."
msgstr ""

#: ../../library/time.rst:577
msgid ""
"Note that even though the time is always returned as a floating point "
"number, not all systems provide time with a better precision than 1 second. "
"While this function normally returns non-decreasing values, it can return a "
"lower value than a previous call if the system clock has been set back "
"between the two calls."
msgstr ""

#: ../../library/time.rst:583
msgid ""
"The number returned by :func:`.time` may be converted into a more common "
"time format (i.e. year, month, day, hour, etc...) in UTC by passing it to "
":func:`gmtime` function or in local time by passing it to the "
":func:`localtime` function. In both cases a :class:`struct_time` object is "
"returned, from which the components of the calendar date may be accessed as "
"attributes."
msgstr ""

#: ../../library/time.rst:598
msgid ""
"Return the value (in fractional seconds) of the sum of the system and user "
"CPU time of the current thread.  It does not include time elapsed during "
"sleep.  It is thread-specific by definition.  The reference point of the "
"returned value is undefined, so that only the difference between the results"
" of two calls in the same thread is valid."
msgstr ""

#: ../../library/time.rst:606
msgid ""
":ref:`Availability <availability>`: Windows, Linux, Unix systems supporting "
"``CLOCK_THREAD_CPUTIME_ID``."
msgstr ""

#: ../../library/time.rst:612
msgid "Similar to :func:`thread_time` but return time as nanoseconds."
msgstr ""

#: ../../library/time.rst:619
msgid ""
"Similar to :func:`~time.time` but returns time as an integer number of "
"nanoseconds since the epoch_."
msgstr ""

#: ../../library/time.rst:626
msgid ""
"Reset the time conversion rules used by the library routines. The "
"environment variable :envvar:`TZ` specifies how this is done. It will also "
"set the variables ``tzname`` (from the :envvar:`TZ` environment variable), "
"``timezone`` (non-DST seconds West of UTC), ``altzone`` (DST seconds west of"
" UTC) and ``daylight`` (to 0 if this timezone does not have any daylight "
"saving time rules, or to nonzero if there is a time, past, present or future"
" when daylight saving time applies)."
msgstr ""

#: ../../library/time.rst:638
msgid ""
"Although in many cases, changing the :envvar:`TZ` environment variable may "
"affect the output of functions like :func:`localtime` without calling "
":func:`tzset`, this behavior should not be relied on."
msgstr ""

#: ../../library/time.rst:642
msgid "The :envvar:`TZ` environment variable should contain no whitespace."
msgstr ""

#: ../../library/time.rst:644
msgid ""
"The standard format of the :envvar:`TZ` environment variable is (whitespace "
"added for clarity)::"
msgstr ""

#: ../../library/time.rst:649
msgid "Where the components are:"
msgstr ""

#: ../../library/time.rst:653
msgid "``std`` and ``dst``"
msgstr ""

#: ../../library/time.rst:652
msgid ""
"Three or more alphanumerics giving the timezone abbreviations. These will be"
" propagated into time.tzname"
msgstr ""

#: ../../library/time.rst:659
msgid "``offset``"
msgstr ""

#: ../../library/time.rst:656
msgid ""
"The offset has the form: ``± hh[:mm[:ss]]``. This indicates the value added "
"the local time to arrive at UTC.  If preceded by a '-', the timezone is east"
" of the Prime Meridian; otherwise, it is west. If no offset follows dst, "
"summer time is assumed to be one hour ahead of standard time."
msgstr ""

#: ../../library/time.rst:681
msgid "``start[/time], end[/time]``"
msgstr ""

#: ../../library/time.rst:662
msgid ""
"Indicates when to change to and back from DST. The format of the start and "
"end dates are one of the following:"
msgstr ""

#: ../../library/time.rst:667
msgid ":samp:`J{n}`"
msgstr ""

#: ../../library/time.rst:666
msgid ""
"The Julian day *n* (1 <= *n* <= 365). Leap days are not counted, so in all "
"years February 28 is day 59 and March 1 is day 60."
msgstr ""

#: ../../library/time.rst:671
msgid ":samp:`{n}`"
msgstr ""

#: ../../library/time.rst:670
msgid ""
"The zero-based Julian day (0 <= *n* <= 365). Leap days are counted, and it "
"is possible to refer to February 29."
msgstr ""

#: ../../library/time.rst:678
msgid ":samp:`M{m}.{n}.{d}`"
msgstr ""

#: ../../library/time.rst:674
msgid ""
"The *d*'th day (0 <= *d* <= 6) of week *n* of month *m* of the year (1 <= "
"*n* <= 5, 1 <= *m* <= 12, where week 5 means \"the last *d* day in month "
"*m*\" which may occur in either the fourth or the fifth week). Week 1 is the"
" first week in which the *d*'th day occurs. Day zero is a Sunday."
msgstr ""

#: ../../library/time.rst:680
msgid ""
"``time`` has the same format as ``offset`` except that no leading sign ('-' "
"or '+') is allowed. The default, if time is not given, is 02:00:00."
msgstr ""

#: ../../library/time.rst:694
msgid ""
"On many Unix systems (including \\*BSD, Linux, Solaris, and Darwin), it is "
"more convenient to use the system's zoneinfo (:manpage:`tzfile(5)`)  "
"database to specify the timezone rules. To do this, set the  :envvar:`TZ` "
"environment variable to the path of the required timezone  datafile, "
"relative to the root of the systems 'zoneinfo' timezone database, usually "
"located at :file:`/usr/share/zoneinfo`. For example,  ``'US/Eastern'``, "
"``'Australia/Melbourne'``, ``'Egypt'`` or  ``'Europe/Amsterdam'``. ::"
msgstr ""

#: ../../library/time.rst:715
msgid "Clock ID Constants"
msgstr ""

#: ../../library/time.rst:717
msgid ""
"These constants are used as parameters for :func:`clock_getres` and "
":func:`clock_gettime`."
msgstr ""

#: ../../library/time.rst:722
msgid ""
"Identical to :data:`CLOCK_MONOTONIC`, except it also includes any time that "
"the system is suspended."
msgstr ""

#: ../../library/time.rst:725
msgid ""
"This allows applications to get a suspend-aware monotonic  clock  without "
"having to deal with the complications of :data:`CLOCK_REALTIME`, which may "
"have  discontinuities if the time is changed using ``settimeofday()`` or "
"similar."
msgstr ""

#: ../../library/time.rst:731
msgid ":ref:`Availability <availability>`: Linux 2.6.39 or later."
msgstr ""

#: ../../library/time.rst:737
msgid ""
"The Solaris OS has a ``CLOCK_HIGHRES`` timer that attempts to use an optimal"
" hardware source, and may give close to nanosecond resolution. "
"``CLOCK_HIGHRES`` is the nonadjustable, high-resolution clock."
msgstr ""

#: ../../library/time.rst:742
msgid ":ref:`Availability <availability>`: Solaris."
msgstr ""

#: ../../library/time.rst:748
msgid ""
"Clock that cannot be set and represents monotonic time since some "
"unspecified starting point."
msgstr ""

#: ../../library/time.rst:758
msgid ""
"Similar to :data:`CLOCK_MONOTONIC`, but provides access to a raw hardware-"
"based time that is not subject to NTP adjustments."
msgstr ""

#: ../../library/time.rst:762
msgid ""
":ref:`Availability <availability>`: Linux 2.6.28 and newer, macOS 10.12 and "
"newer."
msgstr ""

#: ../../library/time.rst:768 ../../library/time.rst:777
msgid "High-resolution per-process timer from the CPU."
msgstr ""

#: ../../library/time.rst:780
msgid ""
":ref:`Availability <availability>`: FreeBSD, NetBSD 7 or later, OpenBSD."
msgstr ""

#: ../../library/time.rst:785
msgid ""
"`International Atomic Time <https://www.nist.gov/pml/time-and-frequency-"
"division/nist-time-frequently-asked-questions-faq#tai>`_"
msgstr ""

#: ../../library/time.rst:787
msgid ""
"The system must have a current leap second table in order for this to give "
"the correct answer.  PTP or NTP software can maintain a leap second table."
msgstr ""

#: ../../library/time.rst:791
msgid ":ref:`Availability <availability>`: Linux."
msgstr ""

#: ../../library/time.rst:796
msgid "Thread-specific CPU-time clock."
msgstr ""

#: ../../library/time.rst:805
msgid ""
"Time whose absolute value is the time the system has been running and not "
"suspended, providing accurate uptime measurement, both absolute and "
"interval."
msgstr ""

#: ../../library/time.rst:810
msgid ":ref:`Availability <availability>`: FreeBSD, OpenBSD 5.5 or later."
msgstr ""

#: ../../library/time.rst:816
msgid ""
"Clock that increments monotonically, tracking the time since an arbitrary "
"point, unaffected by frequency or time adjustments and not incremented while"
" the system is asleep."
msgstr ""

#: ../../library/time.rst:821
msgid ":ref:`Availability <availability>`: macOS 10.12 and newer."
msgstr ""

#: ../../library/time.rst:824
msgid ""
"The following constant is the only parameter that can be sent to "
":func:`clock_settime`."
msgstr ""

#: ../../library/time.rst:830
msgid ""
"System-wide real-time clock.  Setting this clock requires appropriate "
"privileges."
msgstr ""

#: ../../library/time.rst:841
msgid "Timezone Constants"
msgstr ""

#: ../../library/time.rst:845
msgid ""
"The offset of the local DST timezone, in seconds west of UTC, if one is "
"defined. This is negative if the local DST timezone is east of UTC (as in "
"Western Europe, including the UK).  Only use this if ``daylight`` is "
"nonzero.  See note below."
msgstr ""

#: ../../library/time.rst:851
msgid "Nonzero if a DST timezone is defined.  See note below."
msgstr ""

#: ../../library/time.rst:855
msgid ""
"The offset of the local (non-DST) timezone, in seconds west of UTC (negative"
" in most of Western Europe, positive in the US, zero in the UK).  See note "
"below."
msgstr ""

#: ../../library/time.rst:860
msgid ""
"A tuple of two strings: the first is the name of the local non-DST timezone,"
" the second is the name of the local DST timezone.  If no DST timezone is "
"defined, the second string should not be used.  See note below."
msgstr ""

#: ../../library/time.rst:866
msgid ""
"For the above Timezone constants (:data:`altzone`, :data:`daylight`, "
":data:`timezone`, and :data:`tzname`), the value is determined by the "
"timezone rules in effect at module load time or the last time :func:`tzset` "
"is called and may be incorrect for times in the past.  It is recommended to "
"use the :attr:`tm_gmtoff` and :attr:`tm_zone` results from :func:`localtime`"
" to obtain timezone information."
msgstr ""

#: ../../library/time.rst:876
msgid "Module :mod:`datetime`"
msgstr ""

#: ../../library/time.rst:876
msgid "More object-oriented interface to dates and times."
msgstr ""

#: ../../library/time.rst:880
msgid "Module :mod:`locale`"
msgstr ""

#: ../../library/time.rst:879
msgid ""
"Internationalization services.  The locale setting affects the "
"interpretation of many format specifiers in :func:`strftime` and "
":func:`strptime`."
msgstr ""

#: ../../library/time.rst:883
msgid "Module :mod:`calendar`"
msgstr ""

#: ../../library/time.rst:883
msgid ""
"General calendar-related functions.   :func:`~calendar.timegm` is the "
"inverse of :func:`gmtime` from this module."
msgstr ""

#: ../../library/time.rst:887
msgid "Footnotes"
msgstr "备注"

#: ../../library/time.rst:888
msgid ""
"The use of ``%Z`` is now deprecated, but the ``%z`` escape that expands to "
"the preferred hour/minute offset is not supported by all ANSI C libraries. "
"Also, a strict reading of the original 1982 :rfc:`822` standard calls for a "
"two-digit year (``%y`` rather than ``%Y``), but practice moved to 4-digit "
"years long before the year 2000.  After that, :rfc:`822` became obsolete and"
" the 4-digit year has been first recommended by :rfc:`1123` and then "
"mandated by :rfc:`2822`."
msgstr ""
