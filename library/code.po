# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/code.rst:2
msgid ":mod:`code` --- Interpreter base classes"
msgstr ""

#: ../../library/code.rst:7
msgid "**Source code:** :source:`Lib/code.py`"
msgstr ""

#: ../../library/code.rst:11
msgid ""
"The ``code`` module provides facilities to implement read-eval-print loops "
"in Python.  Two classes and convenience functions are included which can be "
"used to build applications which provide an interactive interpreter prompt."
msgstr ""

#: ../../library/code.rst:18
msgid ""
"This class deals with parsing and interpreter state (the user's namespace); "
"it does not deal with input buffering or prompting or input file naming (the"
" filename is always passed in explicitly). The optional *locals* argument "
"specifies the dictionary in which code will be executed; it defaults to a "
"newly created dictionary with key ``'__name__'`` set to ``'__console__'`` "
"and key ``'__doc__'`` set to ``None``."
msgstr ""

#: ../../library/code.rst:28
msgid ""
"Closely emulate the behavior of the interactive Python interpreter. This "
"class builds on :class:`InteractiveInterpreter` and adds prompting using the"
" familiar ``sys.ps1`` and ``sys.ps2``, and input buffering."
msgstr ""

#: ../../library/code.rst:35
msgid ""
"Convenience function to run a read-eval-print loop.  This creates a new "
"instance of :class:`InteractiveConsole` and sets *readfunc* to be used as "
"the :meth:`InteractiveConsole.raw_input` method, if provided.  If *local* is"
" provided, it is passed to the :class:`InteractiveConsole` constructor for "
"use as the default namespace for the interpreter loop.  The :meth:`interact`"
" method of the instance is then run with *banner* and *exitmsg* passed as "
"the banner and exit message to use, if provided.  The console object is "
"discarded after use."
msgstr ""

#: ../../library/code.rst:44
msgid "Added *exitmsg* parameter."
msgstr ""

#: ../../library/code.rst:50
msgid ""
"This function is useful for programs that want to emulate Python's "
"interpreter main loop (a.k.a. the read-eval-print loop).  The tricky part is"
" to determine when the user has entered an incomplete command that can be "
"completed by entering more text (as opposed to a complete command or a "
"syntax error).  This function *almost* always makes the same decision as the"
" real interpreter main loop."
msgstr ""

#: ../../library/code.rst:57
msgid ""
"*source* is the source string; *filename* is the optional filename from "
"which source was read, defaulting to ``'<input>'``; and *symbol* is the "
"optional grammar start symbol, which should be ``'single'`` (the default), "
"``'eval'`` or ``'exec'``."
msgstr ""

#: ../../library/code.rst:62
msgid ""
"Returns a code object (the same as ``compile(source, filename, symbol)``) if"
" the command is complete and valid; ``None`` if the command is incomplete; "
"raises :exc:`SyntaxError` if the command is complete and contains a syntax "
"error, or raises :exc:`OverflowError` or :exc:`ValueError` if the command "
"contains an invalid literal."
msgstr ""

#: ../../library/code.rst:72
msgid "Interactive Interpreter Objects"
msgstr ""

#: ../../library/code.rst:77
msgid ""
"Compile and run some source in the interpreter. Arguments are the same as "
"for :func:`compile_command`; the default for *filename* is ``'<input>'``, "
"and for *symbol* is ``'single'``.  One of several things can happen:"
msgstr ""

#: ../../library/code.rst:81
msgid ""
"The input is incorrect; :func:`compile_command` raised an exception "
"(:exc:`SyntaxError` or :exc:`OverflowError`).  A syntax traceback will be "
"printed by calling the :meth:`showsyntaxerror` method.  :meth:`runsource` "
"returns ``False``."
msgstr ""

#: ../../library/code.rst:86
msgid ""
"The input is incomplete, and more input is required; :func:`compile_command`"
" returned ``None``. :meth:`runsource` returns ``True``."
msgstr ""

#: ../../library/code.rst:89
msgid ""
"The input is complete; :func:`compile_command` returned a code object.  The "
"code is executed by calling the :meth:`runcode` (which also handles run-time"
" exceptions, except for :exc:`SystemExit`). :meth:`runsource` returns "
"``False``."
msgstr ""

#: ../../library/code.rst:93
msgid ""
"The return value can be used to decide whether to use ``sys.ps1`` or "
"``sys.ps2`` to prompt the next line."
msgstr ""

#: ../../library/code.rst:99
msgid ""
"Execute a code object. When an exception occurs, :meth:`showtraceback` is "
"called to display a traceback.  All exceptions are caught except "
":exc:`SystemExit`, which is allowed to propagate."
msgstr ""

#: ../../library/code.rst:103
msgid ""
"A note about :exc:`KeyboardInterrupt`: this exception may occur elsewhere in"
" this code, and may not always be caught.  The caller should be prepared to "
"deal with it."
msgstr ""

#: ../../library/code.rst:110
msgid ""
"Display the syntax error that just occurred.  This does not display a stack "
"trace because there isn't one for syntax errors. If *filename* is given, it "
"is stuffed into the exception instead of the default filename provided by "
"Python's parser, because it always uses ``'<string>'`` when reading from a "
"string. The output is written by the :meth:`write` method."
msgstr ""

#: ../../library/code.rst:119
msgid ""
"Display the exception that just occurred.  We remove the first stack item "
"because it is within the interpreter object implementation. The output is "
"written by the :meth:`write` method."
msgstr ""

#: ../../library/code.rst:123
msgid ""
"The full chained traceback is displayed instead of just the primary "
"traceback."
msgstr ""

#: ../../library/code.rst:129
msgid ""
"Write a string to the standard error stream (``sys.stderr``). Derived "
"classes should override this to provide the appropriate output handling as "
"needed."
msgstr ""

#: ../../library/code.rst:136
msgid "Interactive Console Objects"
msgstr ""

#: ../../library/code.rst:138
msgid ""
"The :class:`InteractiveConsole` class is a subclass of "
":class:`InteractiveInterpreter`, and so offers all the methods of the "
"interpreter objects as well as the following additions."
msgstr ""

#: ../../library/code.rst:145
msgid ""
"Closely emulate the interactive Python console. The optional *banner* "
"argument specify the banner to print before the first interaction; by "
"default it prints a banner similar to the one printed by the standard Python"
" interpreter, followed by the class name of the console object in "
"parentheses (so as not to confuse this with the real interpreter -- since "
"it's so close!)."
msgstr ""

#: ../../library/code.rst:151
msgid ""
"The optional *exitmsg* argument specifies an exit message printed when "
"exiting. Pass the empty string to suppress the exit message. If *exitmsg* is"
" not given or ``None``, a default message is printed."
msgstr ""

#: ../../library/code.rst:155
msgid "To suppress printing any banner, pass an empty string."
msgstr ""

#: ../../library/code.rst:158
msgid "Print an exit message when exiting."
msgstr ""

#: ../../library/code.rst:164
msgid ""
"Push a line of source text to the interpreter. The line should not have a "
"trailing newline; it may have internal newlines.  The line is appended to a "
"buffer and the interpreter's :meth:`runsource` method is called with the "
"concatenated contents of the buffer as source.  If this indicates that the "
"command was executed or invalid, the buffer is reset; otherwise, the command"
" is incomplete, and the buffer is left as it was after the line was "
"appended.  The return value is ``True`` if more input is required, ``False``"
" if the line was dealt with in some way (this is the same as "
":meth:`runsource`)."
msgstr ""

#: ../../library/code.rst:176
msgid "Remove any unhandled source text from the input buffer."
msgstr ""

#: ../../library/code.rst:181
msgid ""
"Write a prompt and read a line.  The returned line does not include the "
"trailing newline.  When the user enters the EOF key sequence, "
":exc:`EOFError` is raised. The base implementation reads from ``sys.stdin``;"
" a subclass may replace this with a different implementation."
msgstr ""
