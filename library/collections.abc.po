# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ""

#: ../../library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr ""

#: ../../library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr ""

#: ../../library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is :term:`hashable` or whether it is a "
":term:`mapping`."
msgstr ""

#: ../../library/collections.abc.rst:27
msgid ""
"An :func:`issubclass` or :func:`isinstance` test for an interface works in "
"one of three ways."
msgstr ""

#: ../../library/collections.abc.rst:30
msgid ""
"1) A newly written class can inherit directly from one of the abstract base "
"classes.  The class must supply the required abstract methods.  The "
"remaining mixin methods come from inheritance and can be overridden if "
"desired.  Other methods may be added as needed:"
msgstr ""

#: ../../library/collections.abc.rst:50
msgid ""
"2) Existing classes and built-in classes can be registered as \"virtual "
"subclasses\" of the ABCs.  Those classes should define the full API "
"including all of the abstract methods and all of the mixin methods. This "
"lets users rely on :func:`issubclass` or :func:`isinstance` tests to "
"determine whether the full interface is supported.  The exception to this "
"rule is for methods that are automatically inferred from the rest of the "
"API:"
msgstr ""

#: ../../library/collections.abc.rst:76
msgid ""
"In this example, class :class:`!D` does not need to define ``__contains__``,"
" ``__iter__``, and ``__reversed__`` because the :ref:`in-operator "
"<comparisons>`, the :term:`iteration <iterable>` logic, and the "
":func:`reversed` function automatically fall back to using ``__getitem__`` "
"and ``__len__``."
msgstr ""

#: ../../library/collections.abc.rst:82
msgid ""
"3) Some simple interfaces are directly recognizable by the presence of the "
"required methods (unless those methods have been set to :const:`None`):"
msgstr ""

#: ../../library/collections.abc.rst:99
msgid ""
"Complex interfaces do not support this last technique because an interface "
"is more than just the presence of method names.  Interfaces specify "
"semantics and relationships between methods that cannot be inferred solely "
"from the presence of specific method names.  For example, knowing that a "
"class supplies ``__getitem__``, ``__len__``, and ``__iter__`` is "
"insufficient for distinguishing a :class:`Sequence` from a :class:`Mapping`."
msgstr ""

#: ../../library/collections.abc.rst:107
msgid ""
"These abstract classes now support ``[]``. See :ref:`types-genericalias` and"
" :pep:`585`."
msgstr ""

#: ../../library/collections.abc.rst:114
msgid "Collections Abstract Base Classes"
msgstr ""

#: ../../library/collections.abc.rst:116
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr ""

#: ../../library/collections.abc.rst:121
msgid "ABC"
msgstr ""

#: ../../library/collections.abc.rst:121
msgid "Inherits from"
msgstr ""

#: ../../library/collections.abc.rst:121
msgid "Abstract Methods"
msgstr ""

#: ../../library/collections.abc.rst:121
msgid "Mixin Methods"
msgstr ""

#: ../../library/collections.abc.rst:123
msgid ":class:`Container` [1]_"
msgstr ""

#: ../../library/collections.abc.rst:123
msgid "``__contains__``"
msgstr ""

#: ../../library/collections.abc.rst:124
msgid ":class:`Hashable` [1]_"
msgstr ""

#: ../../library/collections.abc.rst:124
msgid "``__hash__``"
msgstr ""

#: ../../library/collections.abc.rst:125
msgid ":class:`Iterable` [1]_ [2]_"
msgstr ""

#: ../../library/collections.abc.rst:125 ../../library/collections.abc.rst:126
msgid "``__iter__``"
msgstr ""

#: ../../library/collections.abc.rst:126
msgid ":class:`Iterator` [1]_"
msgstr ""

#: ../../library/collections.abc.rst:126 ../../library/collections.abc.rst:127
msgid ":class:`Iterable`"
msgstr ""

#: ../../library/collections.abc.rst:126
msgid "``__next__``"
msgstr ""

#: ../../library/collections.abc.rst:127
msgid ":class:`Reversible` [1]_"
msgstr ""

#: ../../library/collections.abc.rst:127
msgid "``__reversed__``"
msgstr ""

#: ../../library/collections.abc.rst:128
msgid ":class:`Generator`  [1]_"
msgstr ""

#: ../../library/collections.abc.rst:128
msgid ":class:`Iterator`"
msgstr ""

#: ../../library/collections.abc.rst:128 ../../library/collections.abc.rst:176
msgid "``send``, ``throw``"
msgstr ""

#: ../../library/collections.abc.rst:128
msgid "``close``, ``__iter__``, ``__next__``"
msgstr ""

#: ../../library/collections.abc.rst:129
msgid ":class:`Sized`  [1]_"
msgstr ""

#: ../../library/collections.abc.rst:129 ../../library/collections.abc.rst:168
msgid "``__len__``"
msgstr ""

#: ../../library/collections.abc.rst:130
msgid ":class:`Callable`  [1]_"
msgstr ""

#: ../../library/collections.abc.rst:130
msgid "``__call__``"
msgstr ""

#: ../../library/collections.abc.rst:131
msgid ":class:`Collection`  [1]_"
msgstr ""

#: ../../library/collections.abc.rst:131
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ""

#: ../../library/collections.abc.rst:131 ../../library/collections.abc.rst:147
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr ""

#: ../../library/collections.abc.rst:135 ../../library/collections.abc.rst:138
#: ../../library/collections.abc.rst:144
msgid ":class:`Sequence`"
msgstr ""

#: ../../library/collections.abc.rst:135
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ""

#: ../../library/collections.abc.rst:135 ../../library/collections.abc.rst:144
msgid "``__getitem__``, ``__len__``"
msgstr ""

#: ../../library/collections.abc.rst:135
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr ""

#: ../../library/collections.abc.rst:138
msgid ":class:`MutableSequence`"
msgstr ""

#: ../../library/collections.abc.rst:138
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""

#: ../../library/collections.abc.rst:138
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``clear``, ``reverse``, "
"``extend``, ``pop``, ``remove``, and ``__iadd__``"
msgstr ""

#: ../../library/collections.abc.rst:144
msgid ":class:`ByteString`"
msgstr ""

#: ../../library/collections.abc.rst:144
msgid "Inherited :class:`Sequence` methods"
msgstr ""

#: ../../library/collections.abc.rst:147 ../../library/collections.abc.rst:151
msgid ":class:`Set`"
msgstr ""

#: ../../library/collections.abc.rst:147 ../../library/collections.abc.rst:157
msgid ":class:`Collection`"
msgstr ""

#: ../../library/collections.abc.rst:147
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""

#: ../../library/collections.abc.rst:151
msgid ":class:`MutableSet`"
msgstr ""

#: ../../library/collections.abc.rst:151
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr ""

#: ../../library/collections.abc.rst:151
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""

#: ../../library/collections.abc.rst:157 ../../library/collections.abc.rst:161
msgid ":class:`Mapping`"
msgstr ""

#: ../../library/collections.abc.rst:157
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr ""

#: ../../library/collections.abc.rst:157
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""

#: ../../library/collections.abc.rst:161
msgid ":class:`MutableMapping`"
msgstr ""

#: ../../library/collections.abc.rst:161
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""

#: ../../library/collections.abc.rst:161
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""

#: ../../library/collections.abc.rst:168
msgid ":class:`MappingView`"
msgstr ""

#: ../../library/collections.abc.rst:168
msgid ":class:`Sized`"
msgstr ""

#: ../../library/collections.abc.rst:169
msgid ":class:`ItemsView`"
msgstr ""

#: ../../library/collections.abc.rst:169 ../../library/collections.abc.rst:171
msgid ":class:`MappingView`, :class:`Set`"
msgstr ""

#: ../../library/collections.abc.rst:169 ../../library/collections.abc.rst:171
#: ../../library/collections.abc.rst:173
msgid "``__contains__``, ``__iter__``"
msgstr ""

#: ../../library/collections.abc.rst:171
msgid ":class:`KeysView`"
msgstr ""

#: ../../library/collections.abc.rst:173
msgid ":class:`ValuesView`"
msgstr ""

#: ../../library/collections.abc.rst:173
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ""

#: ../../library/collections.abc.rst:175
msgid ":class:`Awaitable` [1]_"
msgstr ""

#: ../../library/collections.abc.rst:175
msgid "``__await__``"
msgstr ""

#: ../../library/collections.abc.rst:176
msgid ":class:`Coroutine` [1]_"
msgstr ""

#: ../../library/collections.abc.rst:176
msgid ":class:`Awaitable`"
msgstr ""

#: ../../library/collections.abc.rst:176
msgid "``close``"
msgstr ""

#: ../../library/collections.abc.rst:177
msgid ":class:`AsyncIterable` [1]_"
msgstr ""

#: ../../library/collections.abc.rst:177 ../../library/collections.abc.rst:178
msgid "``__aiter__``"
msgstr ""

#: ../../library/collections.abc.rst:178
msgid ":class:`AsyncIterator` [1]_"
msgstr ""

#: ../../library/collections.abc.rst:178
msgid ":class:`AsyncIterable`"
msgstr ""

#: ../../library/collections.abc.rst:178
msgid "``__anext__``"
msgstr ""

#: ../../library/collections.abc.rst:179
msgid ":class:`AsyncGenerator` [1]_"
msgstr ""

#: ../../library/collections.abc.rst:179
msgid ":class:`AsyncIterator`"
msgstr ""

#: ../../library/collections.abc.rst:179
msgid "``asend``, ``athrow``"
msgstr ""

#: ../../library/collections.abc.rst:179
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr ""

#: ../../library/collections.abc.rst:184
msgid "Footnotes"
msgstr ""

#: ../../library/collections.abc.rst:185
msgid ""
"These ABCs override :meth:`~abc.ABCMeta.__subclasshook__` to support testing"
" an interface by verifying the required methods are present and have not "
"been set to :const:`None`.  This only works for simple interfaces.  More "
"complex interfaces require registration or direct subclassing."
msgstr ""

#: ../../library/collections.abc.rst:191
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`~container.__iter__` method, but"
" it does not detect classes that iterate with the "
":meth:`~object.__getitem__` method.  The only reliable way to determine "
"whether an object is :term:`iterable` is to call ``iter(obj)``."
msgstr ""

#: ../../library/collections.abc.rst:199
msgid "Collections Abstract Base Classes -- Detailed Descriptions"
msgstr ""

#: ../../library/collections.abc.rst:204
msgid "ABC for classes that provide the :meth:`~object.__contains__` method."
msgstr ""

#: ../../library/collections.abc.rst:208
msgid "ABC for classes that provide the :meth:`~object.__hash__` method."
msgstr ""

#: ../../library/collections.abc.rst:212
msgid "ABC for classes that provide the :meth:`~object.__len__` method."
msgstr ""

#: ../../library/collections.abc.rst:216
msgid "ABC for classes that provide the :meth:`~object.__call__` method."
msgstr ""

#: ../../library/collections.abc.rst:220
msgid "ABC for classes that provide the :meth:`~container.__iter__` method."
msgstr ""

#: ../../library/collections.abc.rst:222
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`~container.__iter__` method, but"
" it does not detect classes that iterate with the "
":meth:`~object.__getitem__` method. The only reliable way to determine "
"whether an object is :term:`iterable` is to call ``iter(obj)``."
msgstr ""

#: ../../library/collections.abc.rst:231
msgid "ABC for sized iterable container classes."
msgstr ""

#: ../../library/collections.abc.rst:237
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and "
":meth:`~iterator.__next__` methods.  See also the definition of "
":term:`iterator`."
msgstr ""

#: ../../library/collections.abc.rst:243
msgid ""
"ABC for iterable classes that also provide the :meth:`~object.__reversed__` "
"method."
msgstr ""

#: ../../library/collections.abc.rst:250
msgid ""
"ABC for :term:`generator` classes that implement the protocol defined in "
":pep:`342` that extends :term:`iterators <iterator>` with the "
":meth:`~generator.send`, :meth:`~generator.throw` and "
":meth:`~generator.close` methods."
msgstr ""

#: ../../library/collections.abc.rst:261
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr ""

#: ../../library/collections.abc.rst:263
msgid ""
"Implementation note: Some of the mixin methods, such as "
":meth:`~container.__iter__`, :meth:`~object.__reversed__` and :meth:`index`,"
" make repeated calls to the underlying :meth:`~object.__getitem__` method. "
"Consequently, if :meth:`~object.__getitem__` is implemented with constant "
"access speed, the mixin methods will have linear performance; however, if "
"the underlying method is linear (as it would be with a linked list), the "
"mixins will have quadratic performance and will likely need to be "
"overridden."
msgstr ""

#: ../../library/collections.abc.rst:272
msgid "The index() method added support for *stop* and *start* arguments."
msgstr ""

#: ../../library/collections.abc.rst:279
msgid "ABCs for read-only and mutable :ref:`sets <types-set>`."
msgstr ""

#: ../../library/collections.abc.rst:284
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr ""

#: ../../library/collections.abc.rst:291
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""

#: ../../library/collections.abc.rst:295
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the "
":meth:`~object.__await__` method."
msgstr ""

#: ../../library/collections.abc.rst:299
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the "
":class:`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""

#: ../../library/collections.abc.rst:303
msgid ""
"In CPython, generator-based coroutines (:term:`generators <generator>` "
"decorated with :func:`@types.coroutine <types.coroutine>`) are *awaitables*,"
" even though they do not have an :meth:`~object.__await__` method. Using "
"``isinstance(gencoro, Awaitable)`` for them will return ``False``. Use "
":func:`inspect.isawaitable` to detect them."
msgstr ""

#: ../../library/collections.abc.rst:313
msgid ""
"ABC for :term:`coroutine` compatible classes.  These implement the following"
" methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, "
":meth:`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom "
"implementations must also implement :meth:`~object.__await__`.  All "
":class:`Coroutine` instances are also instances of :class:`Awaitable`."
msgstr ""

#: ../../library/collections.abc.rst:321
msgid ""
"In CPython, generator-based coroutines (:term:`generators <generator>` "
"decorated with :func:`@types.coroutine <types.coroutine>`) are *awaitables*,"
" even though they do not have an :meth:`~object.__await__` method. Using "
"``isinstance(gencoro, Coroutine)`` for them will return ``False``. Use "
":func:`inspect.isawaitable` to detect them."
msgstr ""

#: ../../library/collections.abc.rst:331
msgid ""
"ABC for classes that provide an ``__aiter__`` method.  See also the "
"definition of :term:`asynchronous iterable`."
msgstr ""

#: ../../library/collections.abc.rst:338
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""

#: ../../library/collections.abc.rst:345
msgid ""
"ABC for :term:`asynchronous generator` classes that implement the protocol "
"defined in :pep:`525` and :pep:`492`."
msgstr ""

#: ../../library/collections.abc.rst:351
msgid "Examples and Recipes"
msgstr ""

#: ../../library/collections.abc.rst:353
msgid ""
"ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""

#: ../../library/collections.abc.rst:360
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop"
" classes supporting container APIs.  For example, to write a class "
"supporting the full :class:`Set` API, it is only necessary to supply the "
"three underlying abstract methods: :meth:`~object.__contains__`, "
":meth:`~container.__iter__`, and :meth:`~object.__len__`. The ABC supplies "
"the remaining methods such as :meth:`!__and__` and "
":meth:`~frozenset.isdisjoint`::"
msgstr ""

#: ../../library/collections.abc.rst:389
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ""

#: ../../library/collections.abc.rst:392
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an :term:`iterable`. The class constructor "
"is assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal :class:`classmethod` called "
":meth:`!_from_iterable` which calls ``cls(iterable)`` to produce a new set. "
"If the :class:`Set` mixin is being used in a class with a different "
"constructor signature, you will need to override :meth:`!_from_iterable` "
"with a classmethod or regular method that can construct new instances from "
"an iterable argument."
msgstr ""

#: ../../library/collections.abc.rst:403
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`~object.__le__` and :meth:`~object.__ge__`, then the"
" other operations will automatically follow suit."
msgstr ""

#: ../../library/collections.abc.rst:409
msgid ""
"The :class:`Set` mixin provides a :meth:`!_hash` method to compute a hash "
"value for the set; however, :meth:`~object.__hash__` is not defined because "
"not all sets are :term:`hashable` or immutable.  To add set hashability "
"using mixins, inherit from both :meth:`Set` and :meth:`Hashable`, then "
"define ``__hash__ = Set._hash``."
msgstr ""

#: ../../library/collections.abc.rst:417
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""

#: ../../library/collections.abc.rst:420
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
