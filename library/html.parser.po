# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Shengjing Zhu <zsj950618@gmail.com>, 2021
# walkinrain <walkinrain2008@outlook.com>, 2021
# nick <2330458484@qq.com>, 2021
# ProgramRipper, 2023
# cdarlint <cdarling@126.com>, 2023
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:07+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/html.parser.rst:2
msgid ":mod:`!html.parser` --- Simple HTML and XHTML parser"
msgstr ":mod:`!html.parser` --- 简单的 HTML 和 XHTML 解析器"

#: ../../library/html.parser.rst:7
msgid "**Source code:** :source:`Lib/html/parser.py`"
msgstr "**源代码：** :source:`Lib/html/parser.py`"

#: ../../library/html.parser.rst:15
msgid ""
"This module defines a class :class:`HTMLParser` which serves as the basis "
"for parsing text files formatted in HTML (HyperText Mark-up Language) and "
"XHTML."
msgstr "这个模块定义了一个 :class:`HTMLParser` 类，为 HTML（超文本标记语言）和 XHTML 文本文件解析提供基础。"

#: ../../library/html.parser.rst:20
msgid "Create a parser instance able to parse invalid markup."
msgstr "创建一个能解析无效标记的解析器实例。"

#: ../../library/html.parser.rst:22
msgid ""
"If *convert_charrefs* is ``True`` (the default), all character references "
"(except the ones in ``script``/``style`` elements) are automatically "
"converted to the corresponding Unicode characters."
msgstr ""
"如果 *convert_charrefs* 为 ``True`` (默认值)，则所有字符引用( ``script``/``style``   "
"元素中的除外)都会自动转换为相应的 Unicode 字符。"

#: ../../library/html.parser.rst:26
msgid ""
"An :class:`.HTMLParser` instance is fed HTML data and calls handler methods "
"when start tags, end tags, text, comments, and other markup elements are "
"encountered.  The user should subclass :class:`.HTMLParser` and override its"
" methods to implement the desired behavior."
msgstr ""
"一个 :class:`.HTMLParser` 类的实例用来接受 HTML "
"数据，并在标记开始、标记结束、文本、注释和其他元素标记出现的时候调用对应的方法。要实现具体的行为，请使用 :class:`.HTMLParser` "
"的子类并重写其方法。"

#: ../../library/html.parser.rst:31
msgid ""
"This parser does not check that end tags match start tags or call the end-"
"tag handler for elements which are closed implicitly by closing an outer "
"element."
msgstr "这个解析器不检查结束标记是否与开始标记匹配，也不会因外层元素完毕而隐式关闭了的元素引发结束标记处理。"

#: ../../library/html.parser.rst:34
msgid "*convert_charrefs* keyword argument added."
msgstr "*convert_charrefs* 关键字参数被添加。"

#: ../../library/html.parser.rst:37
msgid "The default value for argument *convert_charrefs* is now ``True``."
msgstr "*convert_charrefs* 参数的默认值现在为 ``True``。"

#: ../../library/html.parser.rst:42
msgid "Example HTML Parser Application"
msgstr "HTML 解析器的示例程序"

#: ../../library/html.parser.rst:44
msgid ""
"As a basic example, below is a simple HTML parser that uses the "
":class:`HTMLParser` class to print out start tags, end tags, and data as "
"they are encountered:"
msgstr ""
"下面的基本示例是一个简单的 HTML 解析器，它使用 :class:`HTMLParser` 类，会在遇到开始标记、结束标记和数据时将它们打印出来："

#: ../../library/html.parser.rst:48
msgid ""
"from html.parser import HTMLParser\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Encountered a start tag:\", tag)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"Encountered an end tag :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Encountered some data  :\", data)\n"
"\n"
"parser = MyHTMLParser()\n"
"parser.feed('<html><head><title>Test</title></head>'\n"
"            '<body><h1>Parse me!</h1></body></html>')"
msgstr ""
"from html.parser import HTMLParser\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Encountered a start tag:\", tag)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"Encountered an end tag :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Encountered some data  :\", data)\n"
"\n"
"parser = MyHTMLParser()\n"
"parser.feed('<html><head><title>Test</title></head>'\n"
"            '<body><h1>Parse me!</h1></body></html>')"

#: ../../library/html.parser.rst:66
msgid "The output will then be:"
msgstr "输出是:"

#: ../../library/html.parser.rst:68
msgid ""
"Encountered a start tag: html\n"
"Encountered a start tag: head\n"
"Encountered a start tag: title\n"
"Encountered some data  : Test\n"
"Encountered an end tag : title\n"
"Encountered an end tag : head\n"
"Encountered a start tag: body\n"
"Encountered a start tag: h1\n"
"Encountered some data  : Parse me!\n"
"Encountered an end tag : h1\n"
"Encountered an end tag : body\n"
"Encountered an end tag : html"
msgstr ""
"Encountered a start tag: html\n"
"Encountered a start tag: head\n"
"Encountered a start tag: title\n"
"Encountered some data  : Test\n"
"Encountered an end tag : title\n"
"Encountered an end tag : head\n"
"Encountered a start tag: body\n"
"Encountered a start tag: h1\n"
"Encountered some data  : Parse me!\n"
"Encountered an end tag : h1\n"
"Encountered an end tag : body\n"
"Encountered an end tag : html"

#: ../../library/html.parser.rst:85
msgid ":class:`.HTMLParser` Methods"
msgstr ":class:`.HTMLParser` 方法"

#: ../../library/html.parser.rst:87
msgid ":class:`HTMLParser` instances have the following methods:"
msgstr ":class:`HTMLParser` 实例有下列方法："

#: ../../library/html.parser.rst:92
msgid ""
"Feed some text to the parser.  It is processed insofar as it consists of "
"complete elements; incomplete data is buffered until more data is fed or "
":meth:`close` is called.  *data* must be :class:`str`."
msgstr ""
"填充一些文本到解析器中。如果包含完整的元素，则被处理；如果数据不完整，将被缓冲直到更多的数据被填充，或者 :meth:`close` "
"被调用。*data* 必须为 :class:`str` 类型。"

#: ../../library/html.parser.rst:99
msgid ""
"Force processing of all buffered data as if it were followed by an end-of-"
"file mark.  This method may be redefined by a derived class to define "
"additional processing at the end of the input, but the redefined version "
"should always call the :class:`HTMLParser` base class method :meth:`close`."
msgstr ""
"如同后面跟着一个文件结束标记一样，强制处理所有缓冲数据。这个方法能被派生类重新定义，用于在输入的末尾定义附加处理，但是重定义的版本应当始终调用基类 "
":class:`HTMLParser` 的 :meth:`close` 方法。"

#: ../../library/html.parser.rst:107
msgid ""
"Reset the instance.  Loses all unprocessed data.  This is called implicitly "
"at instantiation time."
msgstr "重置实例。丢失所有未处理的数据。在实例化阶段被隐式调用。"

#: ../../library/html.parser.rst:113
msgid "Return current line number and offset."
msgstr "返回当前行号和偏移值。"

#: ../../library/html.parser.rst:118
msgid ""
"Return the text of the most recently opened start tag.  This should not "
"normally be needed for structured processing, but may be useful in dealing "
"with HTML \"as deployed\" or for re-generating input with minimal changes "
"(whitespace between attributes can be preserved, etc.)."
msgstr ""
"返回最近打开的开始标记中的文本。 结构化处理时通常应该不需要这个，但在处理“已部署”的 HTML "
"或是在以最小改变来重新生成输入时可能会有用处（例如可以保留属性间的空格等）。"

#: ../../library/html.parser.rst:124
msgid ""
"The following methods are called when data or markup elements are "
"encountered and they are meant to be overridden in a subclass.  The base "
"class implementations do nothing (except for "
":meth:`~HTMLParser.handle_startendtag`):"
msgstr ""
"下列方法将在遇到数据或者标记元素的时候被调用。他们需要在子类中重写。基类的实现中没有任何实际操作（除了 "
":meth:`~HTMLParser.handle_startendtag` ）："

#: ../../library/html.parser.rst:131
msgid ""
"This method is called to handle the start tag of an element (e.g. ``<div "
"id=\"main\">``)."
msgstr "调用此方法来处理一个元素的开始标记 (例如 ``<div id=\"main\">``)。"

#: ../../library/html.parser.rst:133
msgid ""
"The *tag* argument is the name of the tag converted to lower case. The "
"*attrs* argument is a list of ``(name, value)`` pairs containing the "
"attributes found inside the tag's ``<>`` brackets.  The *name* will be "
"translated to lower case, and quotes in the *value* have been removed, and "
"character and entity references have been replaced."
msgstr ""
"*tag* 参数是小写的标记名。*attrs* 参数是一个 ``(name, value)`` 形式的列表，包含了所有在标记的 ``<>``  "
"括号中找到的属性。*name* 转换为小写，*value* 的引号被去除，字符和实体引用都会被替换。"

#: ../../library/html.parser.rst:139
msgid ""
"For instance, for the tag ``<A HREF=\"https://www.cwi.nl/\">``, this method "
"would be called as ``handle_starttag('a', [('href', "
"'https://www.cwi.nl/')])``."
msgstr ""
"实例中，对于标签 ``<A HREF=\"https://www.cwi.nl/\">``，这个方法将以下列形式被调用 "
"``handle_starttag('a', [('href', 'https://www.cwi.nl/')])`` 。"

#: ../../library/html.parser.rst:142
msgid ""
"All entity references from :mod:`html.entities` are replaced in the "
"attribute values."
msgstr ":mod:`html.entities` 中的所有实体引用，会被替换为属性值。"

#: ../../library/html.parser.rst:148
msgid ""
"This method is called to handle the end tag of an element (e.g. ``</div>``)."
msgstr "此方法被用来处理元素的结束标记（例如： ``</div>`` ）。"

#: ../../library/html.parser.rst:150
msgid "The *tag* argument is the name of the tag converted to lower case."
msgstr "*tag* 参数是小写的标签名。"

#: ../../library/html.parser.rst:155
msgid ""
"Similar to :meth:`handle_starttag`, but called when the parser encounters an"
" XHTML-style empty tag (``<img ... />``).  This method may be overridden by "
"subclasses which require this particular lexical information; the default "
"implementation simply calls :meth:`handle_starttag` and "
":meth:`handle_endtag`."
msgstr ""
"类似于 :meth:`handle_starttag`, 只是在解析器遇到 XHTML 样式的空标记时被调用（ ``<img ... "
"/>``）。这个方法能被需要这种特殊词法信息的子类重写；默认实现仅简单调用 :meth:`handle_starttag` 和 "
":meth:`handle_endtag` 。"

#: ../../library/html.parser.rst:163
msgid ""
"This method is called to process arbitrary data (e.g. text nodes and the "
"content of ``<script>...</script>`` and ``<style>...</style>``)."
msgstr ""
"这个方法被用来处理任意数据（例如：文本节点和 ``<script>...</script>`` 以及 ``<style>...</style>`` "
"中的内容）。"

#: ../../library/html.parser.rst:169
msgid ""
"This method is called to process a named character reference of the form "
"``&name;`` (e.g. ``&gt;``), where *name* is a general entity reference (e.g."
" ``'gt'``).  This method is never called if *convert_charrefs* is ``True``."
msgstr ""
"这个方法被用于处理 ``&name;`` 形式的命名字符引用（例如 ``&gt;``），其中 *name* 是通用的实体引用（例如： "
"``'gt'``）。如果 *convert_charrefs* 为 ``True``，该方法永远不会被调用。"

#: ../../library/html.parser.rst:177
msgid ""
"This method is called to process decimal and hexadecimal numeric character "
"references of the form :samp:`&#{NNN};` and :samp:`&#x{NNN};`.  For example,"
" the decimal equivalent for ``&gt;`` is ``&#62;``, whereas the hexadecimal "
"is ``&#x3E;``; in this case the method will receive ``'62'`` or ``'x3E'``.  "
"This method is never called if *convert_charrefs* is ``True``."
msgstr ""
"调用该方法来处理 :samp:`&#{NNN};` 和 :samp:`&#x{NNN};` 形式的十进制和十六进制数字字符引用。 例如，``&gt;``"
" 的等价十进制形式为 ``&#62;``，而十六进制形式则为 ``&#x3E;``；在这种情况下，该方法将收到 ``'62'`` 或 "
"``'x3E'``。如果 *convert_charrefs* 为 ``True``，则此方法永远不会被调用。"

#: ../../library/html.parser.rst:186
msgid ""
"This method is called when a comment is encountered (e.g. ``<!--"
"comment-->``)."
msgstr "这个方法在遇到注释的时候被调用（例如： ``<!--comment-->`` ）。"

#: ../../library/html.parser.rst:188
msgid ""
"For example, the comment ``<!-- comment -->`` will cause this method to be "
"called with the argument ``' comment '``."
msgstr "例如， ``<!-- comment -->`` 这个注释会用 ``' comment '`` 作为参数调用此方法。"

#: ../../library/html.parser.rst:191
msgid ""
"The content of Internet Explorer conditional comments (condcoms) will also "
"be sent to this method, so, for ``<!--[if IE 9]>IE9-specific "
"content<![endif]-->``, this method will receive ``'[if IE 9]>IE9-specific "
"content<![endif]'``."
msgstr ""
"Internet Explorer 条件注释（condcoms）的内容也被发送到这个方法，因此，对于 ``<!--[if IE "
"9]>IE9-specific content<![endif]-->`` ，这个方法将接收到 ``'[if IE 9]>IE9-specific "
"content<![endif]'`` 。"

#: ../../library/html.parser.rst:198
msgid ""
"This method is called to handle an HTML doctype declaration (e.g. "
"``<!DOCTYPE html>``)."
msgstr "这个方法用来处理 HTML doctype 申明（例如 ``<!DOCTYPE html>`` ）。"

#: ../../library/html.parser.rst:201
msgid ""
"The *decl* parameter will be the entire contents of the declaration inside "
"the ``<!...>`` markup (e.g. ``'DOCTYPE html'``)."
msgstr "*decl* 形参为 ``<!...>`` 标记中的所有内容（例如： ``'DOCTYPE html'`` ）。"

#: ../../library/html.parser.rst:207
msgid ""
"Method called when a processing instruction is encountered.  The *data* "
"parameter will contain the entire processing instruction. For example, for "
"the processing instruction ``<?proc color='red'>``, this method would be "
"called as ``handle_pi(\"proc color='red'\")``.  It is intended to be "
"overridden by a derived class; the base class implementation does nothing."
msgstr ""
"此方法在遇到处理指令的时候被调用。*data* 形参将包含整个处理指令。例如，对于处理指令 ``<?proc color='red'>`` "
"，这个方法将以 ``handle_pi(\"proc color='red'\")`` 形式被调用。它旨在被派生类重写；基类实现中无任何实际操作。"

#: ../../library/html.parser.rst:215
msgid ""
"The :class:`HTMLParser` class uses the SGML syntactic rules for processing "
"instructions.  An XHTML processing instruction using the trailing ``'?'`` "
"will cause the ``'?'`` to be included in *data*."
msgstr ""
":class:`HTMLParser` 类使用 SGML 语法规则处理指令。使用 ``'?'`` 结尾的 XHTML 处理指令将导致 ``'?'`` "
"包含在 *data* 中。"

#: ../../library/html.parser.rst:222
msgid ""
"This method is called when an unrecognized declaration is read by the "
"parser."
msgstr "当解析器读到无法识别的声明时，此方法被调用。"

#: ../../library/html.parser.rst:224
msgid ""
"The *data* parameter will be the entire contents of the declaration inside "
"the ``<![...]>`` markup.  It is sometimes useful to be overridden by a "
"derived class.  The base class implementation does nothing."
msgstr "*data* 形参为 ``<![...]>`` 标记中的所有内容。某些时候对派生类的重写很有用。基类实现中无任何实际操作。"

#: ../../library/html.parser.rst:232
msgid "Examples"
msgstr "例子"

#: ../../library/html.parser.rst:234
msgid ""
"The following class implements a parser that will be used to illustrate more"
" examples:"
msgstr "下面的类实现了一个解析器，它将被用来演示更多的例子："

#: ../../library/html.parser.rst:237
msgid ""
"from html.parser import HTMLParser\n"
"from html.entities import name2codepoint\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Start tag:\", tag)\n"
"        for attr in attrs:\n"
"            print(\"     attr:\", attr)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"End tag  :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Data     :\", data)\n"
"\n"
"    def handle_comment(self, data):\n"
"        print(\"Comment  :\", data)\n"
"\n"
"    def handle_entityref(self, name):\n"
"        c = chr(name2codepoint[name])\n"
"        print(\"Named ent:\", c)\n"
"\n"
"    def handle_charref(self, name):\n"
"        if name.startswith('x'):\n"
"            c = chr(int(name[1:], 16))\n"
"        else:\n"
"            c = chr(int(name))\n"
"        print(\"Num ent  :\", c)\n"
"\n"
"    def handle_decl(self, data):\n"
"        print(\"Decl     :\", data)\n"
"\n"
"parser = MyHTMLParser()"
msgstr ""
"from html.parser import HTMLParser\n"
"from html.entities import name2codepoint\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Start tag:\", tag)\n"
"        for attr in attrs:\n"
"            print(\"     attr:\", attr)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"End tag  :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Data     :\", data)\n"
"\n"
"    def handle_comment(self, data):\n"
"        print(\"Comment  :\", data)\n"
"\n"
"    def handle_entityref(self, name):\n"
"        c = chr(name2codepoint[name])\n"
"        print(\"Named ent:\", c)\n"
"\n"
"    def handle_charref(self, name):\n"
"        if name.startswith('x'):\n"
"            c = chr(int(name[1:], 16))\n"
"        else:\n"
"            c = chr(int(name))\n"
"        print(\"Num ent  :\", c)\n"
"\n"
"    def handle_decl(self, data):\n"
"        print(\"Decl     :\", data)\n"
"\n"
"parser = MyHTMLParser()"

#: ../../library/html.parser.rst:273
msgid "Parsing a doctype:"
msgstr ""

#: ../../library/html.parser.rst:275
msgid ""
">>> parser.feed('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" '\n"
"...             '\"http://www.w3.org/TR/html4/strict.dtd\">')\n"
"Decl     : DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\""
msgstr ""
">>> parser.feed('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" '\n"
"...             '\"http://www.w3.org/TR/html4/strict.dtd\">')\n"
"Decl     : DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\""

#: ../../library/html.parser.rst:281
msgid "Parsing an element with a few attributes and a title:"
msgstr ""

#: ../../library/html.parser.rst:283
msgid ""
">>> parser.feed('<img src=\"python-logo.png\" alt=\"The Python logo\">')\n"
"Start tag: img\n"
"     attr: ('src', 'python-logo.png')\n"
"     attr: ('alt', 'The Python logo')\n"
">>>\n"
">>> parser.feed('<h1>Python</h1>')\n"
"Start tag: h1\n"
"Data     : Python\n"
"End tag  : h1"
msgstr ""
">>> parser.feed('<img src=\"python-logo.png\" alt=\"The Python logo\">')\n"
"Start tag: img\n"
"     attr: ('src', 'python-logo.png')\n"
"     attr: ('alt', 'The Python logo')\n"
">>>\n"
">>> parser.feed('<h1>Python</h1>')\n"
"Start tag: h1\n"
"Data     : Python\n"
"End tag  : h1"

#: ../../library/html.parser.rst:295
msgid ""
"The content of ``script`` and ``style`` elements is returned as is, without "
"further parsing:"
msgstr ""

#: ../../library/html.parser.rst:298
msgid ""
">>> parser.feed('<style type=\"text/css\">#python { color: green }</style>')\n"
"Start tag: style\n"
"     attr: ('type', 'text/css')\n"
"Data     : #python { color: green }\n"
"End tag  : style\n"
"\n"
">>> parser.feed('<script type=\"text/javascript\">'\n"
"...             'alert(\"<strong>hello!</strong>\");</script>')\n"
"Start tag: script\n"
"     attr: ('type', 'text/javascript')\n"
"Data     : alert(\"<strong>hello!</strong>\");\n"
"End tag  : script"
msgstr ""
">>> parser.feed('<style type=\"text/css\">#python { color: green }</style>')\n"
"Start tag: style\n"
"     attr: ('type', 'text/css')\n"
"Data     : #python { color: green }\n"
"End tag  : style\n"
"\n"
">>> parser.feed('<script type=\"text/javascript\">'\n"
"...             'alert(\"<strong>hello!</strong>\");</script>')\n"
"Start tag: script\n"
"     attr: ('type', 'text/javascript')\n"
"Data     : alert(\"<strong>hello!</strong>\");\n"
"End tag  : script"

#: ../../library/html.parser.rst:313
msgid "Parsing comments:"
msgstr ""

#: ../../library/html.parser.rst:315
msgid ""
">>> parser.feed('<!--a comment-->'\n"
"...             '<!--[if IE 9]>IE-specific content<![endif]-->')\n"
"Comment  : a comment\n"
"Comment  : [if IE 9]>IE-specific content<![endif]"
msgstr ""

#: ../../library/html.parser.rst:322
msgid ""
"Parsing named and numeric character references and converting them to the "
"correct char (note: these 3 references are all equivalent to ``'>'``):"
msgstr ""

#: ../../library/html.parser.rst:325
msgid ""
">>> parser = MyHTMLParser()\n"
">>> parser.feed('&gt;&#62;&#x3E;')\n"
"Data     : >>>\n"
"\n"
">>> parser = MyHTMLParser(convert_charrefs=False)\n"
">>> parser.feed('&gt;&#62;&#x3E;')\n"
"Named ent: >\n"
"Num ent  : >\n"
"Num ent  : >"
msgstr ""

#: ../../library/html.parser.rst:337
msgid ""
"Feeding incomplete chunks to :meth:`~HTMLParser.feed` works, but "
":meth:`~HTMLParser.handle_data` might be called more than once (unless "
"*convert_charrefs* is set to ``True``):"
msgstr ""

#: ../../library/html.parser.rst:341
msgid ""
">>> for chunk in ['<sp', 'an>buff', 'ered', ' text</s', 'pan>']:\n"
"...     parser.feed(chunk)\n"
"...\n"
"Start tag: span\n"
"Data     : buff\n"
"Data     : ered\n"
"Data     :  text\n"
"End tag  : span"
msgstr ""

#: ../../library/html.parser.rst:352
msgid "Parsing invalid HTML (e.g. unquoted attributes) also works:"
msgstr ""

#: ../../library/html.parser.rst:354
msgid ""
">>> parser.feed('<p><a class=link href=#main>tag soup</p ></a>')\n"
"Start tag: p\n"
"Start tag: a\n"
"     attr: ('class', 'link')\n"
"     attr: ('href', '#main')\n"
"Data     : tag soup\n"
"End tag  : p\n"
"End tag  : a"
msgstr ""
">>> parser.feed('<p><a class=link href=#main>tag soup</p ></a>')\n"
"Start tag: p\n"
"Start tag: a\n"
"     attr: ('class', 'link')\n"
"     attr: ('href', '#main')\n"
"Data     : tag soup\n"
"End tag  : p\n"
"End tag  : a"

#: ../../library/html.parser.rst:9
msgid "HTML"
msgstr "HTML"

#: ../../library/html.parser.rst:9
msgid "XHTML"
msgstr "XHTML"
