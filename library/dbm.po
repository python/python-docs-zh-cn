# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# walkinrain <walkinrain2008@outlook.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-25 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:04+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dbm.rst:2
msgid ":mod:`!dbm` --- Interfaces to Unix \"databases\""
msgstr ":mod:`!dbm` --- Unix \"数据库\" 接口"

#: ../../library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr "**源代码:** :source:`Lib/dbm/__init__.py`"

#: ../../library/dbm.rst:11
msgid ":mod:`dbm` is a generic interface to variants of the DBM database:"
msgstr ":mod:`dbm` 是一个针对多种 DBM 数据库的泛用接口："

#: ../../library/dbm.rst:13
msgid ":mod:`dbm.sqlite3`"
msgstr ":mod:`dbm.sqlite3`"

#: ../../library/dbm.rst:14
msgid ":mod:`dbm.gnu`"
msgstr ":mod:`dbm.gnu`"

#: ../../library/dbm.rst:15
msgid ":mod:`dbm.ndbm`"
msgstr ":mod:`dbm.ndbm`"

#: ../../library/dbm.rst:17
msgid ""
"If none of these modules are installed, the slow-but-simple implementation "
"in module :mod:`dbm.dumb` will be used.  There is a `third party interface "
"<https://www.jcea.es/programacion/pybsddb.htm>`_ to the Oracle Berkeley DB."
msgstr ""
"如果未安装这些模块中的任何一种，则将使用 :mod:`dbm.dumb` 模块中慢速但简单的实现。 还有一个适用于 Oracle Berkeley DB"
" 的 `第三方接口 <https://www.jcea.es/programacion/pybsddb.htm>`_。"

#: ../../library/dbm.rst:24
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""
"一个元组，其中包含每个受支持的模块可引发的异常，另外还有一个名为 :exc:`dbm.error` 的特殊异常作为第一项 --- 后者最在引发 "
":exc:`dbm.error` 时被使用。"

#: ../../library/dbm.rst:31
msgid ""
"This function attempts to guess which of the several simple database modules"
" available --- :mod:`dbm.sqlite3`, :mod:`dbm.gnu`, :mod:`dbm.ndbm`, or "
":mod:`dbm.dumb` --- should be used to open a given file."
msgstr ""
"此函数会尝试猜测几种简单数据库模块中哪一个是可用的 --- :mod:`dbm.sqlite3`, :mod:`dbm.gnu`, "
":mod:`dbm.ndbm` 或 :mod:`dbm.dumb` --- 并应当被用来打开给定的文件。"

#: ../../library/dbm.rst:35
msgid "Return one of the following values:"
msgstr "返回下列值中的一个："

#: ../../library/dbm.rst:37
msgid ""
"``None`` if the file can't be opened because it's unreadable or doesn't "
"exist"
msgstr "如果文件因其不可读或不存在而无法打开则返回 ``None``"

#: ../../library/dbm.rst:38
msgid "the empty string (``''``) if the file's format can't be guessed"
msgstr "如果文件格式无法猜测则返回空字符串 (``''``)"

#: ../../library/dbm.rst:39
msgid ""
"a string containing the required module name, such as ``'dbm.ndbm'`` or "
"``'dbm.gnu'``"
msgstr "包含所需模块名称的字符串，如 ``'dbm.ndbm'`` 或 ``'dbm.gnu'``"

#: ../../library/dbm.rst:41 ../../library/dbm.rst:250
#: ../../library/dbm.rst:448
msgid "*filename* accepts a :term:`path-like object`."
msgstr "*filename* 接受一个 :term:`path-like object`。"

#: ../../library/dbm.rst:65
msgid "Open a database and return the corresponding database object."
msgstr "打开一个数据库并返回相应的数据库对象。"

#: ../../library/dbm.rst:0
msgid "Parameters"
msgstr "参数"

#: ../../library/dbm.rst:67
msgid ""
"The database file to open.  If the database file already exists, the "
":func:`whichdb` function is used to determine its type and the appropriate "
"module is used; if it does not exist, the first submodule listed above that "
"can be imported is used."
msgstr ""
"要打开的数据库文件。 如果数据库文件已存在，则使用 :func:`whichdb` "
"来确定其类型和要使用的适当模块；如果文件不存在，则会使用上述可导入子模块中的第一个。"

#: ../../library/dbm.rst:68 ../../library/dbm.rst:222
msgid "The database file to open."
msgstr "要打开的数据库文件。"

#: ../../library/dbm.rst:70
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to"
" determine its type and the appropriate module is used; if it does not "
"exist, the first submodule listed above that can be imported is used."
msgstr ""
"如果数据库文件已存在，则使用 :func:`whichdb` 函数来确定其类型和要使用的适当模块；如果文件不存在，则会使用上述可导入子模块中的第一个。"

#: ../../library/dbm.rst:75 ../../library/dbm.rst:178
#: ../../library/dbm.rst:353
msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""
"* ``'r'`` (默认): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * ``'n'``: "
"|flag_n|"

#: ../../library/dbm.rst:76 ../../library/dbm.rst:180
#: ../../library/dbm.rst:227 ../../library/dbm.rst:354
msgid "``'r'`` (default): |flag_r|"
msgstr "``'r'`` (default): |flag_r|"

#: ../../library/dbm.rst:77 ../../library/dbm.rst:181
#: ../../library/dbm.rst:228 ../../library/dbm.rst:355
#: ../../library/dbm.rst:429
msgid "``'w'``: |flag_w|"
msgstr "``'w'``: |flag_w|"

#: ../../library/dbm.rst:78 ../../library/dbm.rst:182
#: ../../library/dbm.rst:229 ../../library/dbm.rst:356
msgid "``'c'``: |flag_c|"
msgstr "``'c'``: |flag_c|"

#: ../../library/dbm.rst:79 ../../library/dbm.rst:183
#: ../../library/dbm.rst:230 ../../library/dbm.rst:357
#: ../../library/dbm.rst:431
msgid "``'n'``: |flag_n|"
msgstr "``'n'``: |flag_n|"

#: ../../library/dbm.rst:81 ../../library/dbm.rst:244
#: ../../library/dbm.rst:359 ../../library/dbm.rst:433
msgid "|mode_param_doc|"
msgstr "|mode_param_doc|"

#: ../../library/dbm.rst:84
msgid "*file* accepts a :term:`path-like object`."
msgstr "*file* 接受一个 :term:`path-like object`。"

#: ../../library/dbm.rst:87
msgid ""
"The object returned by :func:`~dbm.open` supports the same basic "
"functionality as a :class:`dict`; keys and their corresponding values can be"
" stored, retrieved, and deleted, and the :keyword:`in` operator and the "
":meth:`!keys` method are available, as well as :meth:`!get` and "
":meth:`!setdefault` methods."
msgstr ""
":func:`~dbm.open` 所返回的对象支持与 :class:`dict` 相同的基本功能；可以存储、获取和删除键及其对应的值，并可使用 "
":keyword:`in` 运算符和 :meth:`!keys` 方法，以及 :meth:`!get` 和 :meth:`!setdefault` "
"方法。"

#: ../../library/dbm.rst:92
msgid ""
"Key and values are always stored as :class:`bytes`. This means that when "
"strings are used they are implicitly converted to the default encoding "
"before being stored."
msgstr "键和值总是被存储为 :class:`bytes`。 这意味着当使用字符串时它们会在被存储之前隐式地转换至默认编码格式。"

#: ../../library/dbm.rst:96
msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr "这些对象也支持在 :keyword:`with` 语句中使用，当语句结束时将自动关闭它们。"

#: ../../library/dbm.rst:99
msgid ""
":meth:`!get` and :meth:`!setdefault` methods are now available for all "
":mod:`dbm` backends."
msgstr "现在 :meth:`!get` 和 :meth:`!setdefault` 方法对所有 :mod:`dbm` 后端均可用。"

#: ../../library/dbm.rst:103
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`~dbm.open`."
msgstr "向 :func:`~dbm.open` 所返回的对象添加了对上下文管理协议的原生支持。"

#: ../../library/dbm.rst:107
msgid ""
"Deleting a key from a read-only database raises a database module specific "
"exception instead of :exc:`KeyError`."
msgstr "从只读数据库中删除键将引发数据库模块专属的异常而不是 :exc:`KeyError`。"

#: ../../library/dbm.rst:111
msgid ""
"The following example records some hostnames and a corresponding title,  and"
" then prints out the contents of the database::"
msgstr "以下示例记录了一些主机名和对应的标题，随后将数据库的内容打印出来。::"

#: ../../library/dbm.rst:114
msgid ""
"import dbm\n"
"\n"
"# Open database, creating it if necessary.\n"
"with dbm.open('cache', 'c') as db:\n"
"\n"
"    # Record some values\n"
"    db[b'hello'] = b'there'\n"
"    db['www.python.org'] = 'Python Website'\n"
"    db['www.cnn.com'] = 'Cable News Network'\n"
"\n"
"    # Note that the keys are considered bytes now.\n"
"    assert db[b'www.python.org'] == b'Python Website'\n"
"    # Notice how the value is now in bytes.\n"
"    assert db['www.cnn.com'] == b'Cable News Network'\n"
"\n"
"    # Often-used methods of the dict interface work too.\n"
"    print(db.get('python.org', b'not present'))\n"
"\n"
"    # Storing a non-string key or value will raise an exception (most\n"
"    # likely a TypeError).\n"
"    db['www.yahoo.com'] = 4\n"
"\n"
"# db is automatically closed when leaving the with statement."
msgstr ""
"import dbm\n"
"\n"
"# 打开数据库，如有必要则创建它。\n"
"with dbm.open('cache', 'c') as db:\n"
"\n"
"    # 记录一些值\n"
"    db[b'hello'] = b'there'\n"
"    db['www.python.org'] = 'Python Website'\n"
"    db['www.cnn.com'] = 'Cable News Network'\n"
"\n"
"    # 请注意现在键被作为字节串。\n"
"    assert db[b'www.python.org'] == b'Python Website'\n"
"    # 可以看到值现在被作为字节串。\n"
"    assert db['www.cnn.com'] == b'Cable News Network'\n"
"\n"
"    # 常用的字典接口方法同样可用。\n"
"    print(db.get('python.org', b'not present'))\n"
"\n"
"    # 存储非字符串的键或值将引发异常\n"
"    # (通常为 TypeError)。\n"
"    db['www.yahoo.com'] = 4\n"
"\n"
"# 当离开 with 语句时 db 将被自动关闭。"

#: ../../library/dbm.rst:141
msgid "Module :mod:`shelve`"
msgstr "模块 :mod:`shelve`"

#: ../../library/dbm.rst:142
msgid "Persistence module which stores non-string data."
msgstr "存储非字符串数据的持久化模块。"

#: ../../library/dbm.rst:145
msgid "The individual submodules are described in the following sections."
msgstr "以下部分描述了各个单独的子模块。"

#: ../../library/dbm.rst:148
msgid ":mod:`dbm.sqlite3` --- SQLite backend for dbm"
msgstr ":mod:`dbm.sqlite3` --- 针对 dbm 的 SQLite 后端"

#: ../../library/dbm.rst:156
msgid "**Source code:** :source:`Lib/dbm/sqlite3.py`"
msgstr "**源代码:** :source:`Lib/dbm/sqlite3.py`"

#: ../../library/dbm.rst:160
msgid ""
"This module uses the standard library :mod:`sqlite3` module to provide an "
"SQLite backend for the :mod:`dbm` module. The files created by "
":mod:`dbm.sqlite3` can thus be opened by :mod:`sqlite3`, or any other SQLite"
" browser, including the SQLite CLI."
msgstr ""
"此模块使用标准库 :mod:`sqlite3` 模块来提供针对 :mod:`dbm` 模块的 SQLite 后端。 这样由 "
":mod:`dbm.sqlite3` 创建的文件可通过 :mod:`sqlite3`，或任何其他 SQLite 浏览器，包括 SQLite CLI "
"打开。"

#: ../../includes/wasm-mobile-notavail.rst:3
#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Availability"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See "
":ref:`wasm-availability` for more information."
msgstr "此模块在 WebAssembly 平台上无效或不可用。 请参阅 :ref:`wasm-availability` 了解详情。"

#: ../../library/dbm.rst:169
msgid ""
"Open an SQLite database. The returned object behaves like a :term:`mapping`,"
" implements a :meth:`!close` method, and supports a \"closing\" context "
"manager via the :keyword:`with` keyword."
msgstr ""
"打开一个 SQLite 数据库。 返回的对象行为类似于 :term:`mapping`，实现了 :meth:`!close` 方法，并通过 "
":keyword:`with` 关键字支持“关闭”上下文管理器。"

#: ../../library/dbm.rst:174
msgid "The path to the database to be opened."
msgstr "要打开的数据库的路径。"

#: ../../library/dbm.rst:185
msgid ""
"The Unix file access mode of the file (default: octal ``0o666``), used only "
"when the database has to be created."
msgstr "文件的 Unix 文件访问模式 (默认值: 八进制数 ``0o666``)，仅在需要创建数据为时使用。"

#: ../../library/dbm.rst:191
msgid ":mod:`dbm.gnu` --- GNU database manager"
msgstr ":mod:`dbm.gnu` --- GNU 数据库管理器"

#: ../../library/dbm.rst:197
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr "**源代码:** :source:`Lib/dbm/gnu.py`"

#: ../../library/dbm.rst:201
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the :abbr:`GDBM (GNU "
"dbm)` library, similar to the :mod:`dbm.ndbm` module, but with additional "
"functionality like crash tolerance."
msgstr ""
":mod:`dbm.gnu` 模块提供了针对 :abbr:`GDBM (GNU dbm)` 库的接口，类似于 :mod:`dbm.ndbm` "
"模块，但带有额外的功能如对崩溃的容忍。"

#: ../../library/dbm.rst:207 ../../library/dbm.rst:321
msgid ""
"The file formats created by :mod:`dbm.gnu` and :mod:`dbm.ndbm` are "
"incompatible and can not be used interchangeably."
msgstr "由 :mod:`dbm.gnu` 和 :mod:`dbm.ndbm` 创建的文件格式是不兼容的因而无法互换使用。"

#: ../../includes/wasm-mobile-notavail.rst:5
msgid ""
"This module is not supported on :ref:`mobile platforms <mobile-"
"availability>` or :ref:`WebAssembly platforms <wasm-availability>`."
msgstr ""
"此模块在 :ref:`移动平台 <mobile-availability>` 或 :ref:`WebAssembly 平台 <wasm-"
"availability>` 上不受支持。"

#: ../../library/dbm.rst:214
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. "
":exc:`KeyError` is raised for general mapping errors like specifying an "
"incorrect key."
msgstr ""
"针对 :mod:`dbm.gnu` 专属错误例如 I/O 错误引发。 :exc:`KeyError` 的引发则针对一般映射错误例如指定了不正确的键。"

#: ../../library/dbm.rst:220
msgid "Open a GDBM database and return a :class:`!gdbm` object."
msgstr "打开 GDBM 数据库并返回一个 :class:`!gdbm` 对象。"

#: ../../library/dbm.rst:226
msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|  The following additional characters may be appended to "
"control how the database is opened:  * ``'f'``: Open the database in fast "
"mode.   Writes to the database will not be synchronized. * ``'s'``: "
"Synchronized mode.   Changes to the database will be written immediately to "
"the file. * ``'u'``: Do not lock database.  Not all flags are valid for all "
"versions of GDBM. See the :data:`open_flags` member for a list of supported "
"flag characters."
msgstr ""
"* ``'r'`` (默认值): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * ``'n'``:"
" |flag_n|  可以添加下列额外字符来控制数据库的打开方式:  * ``'f'``: 以快速模式打开数据库。 对数据库的写入将不是同步的。 * "
"``'s'``: 同步模式。  对数据库的修改将立即写入到文件。 * ``'u'``: 不锁定数据库。 并非所有旗标都对所有 GDBM 版本可用。 "
"要获取受支持的旗标字符列表请参阅 :data:`open_flags` 成员。"

#: ../../library/dbm.rst:232
msgid ""
"The following additional characters may be appended to control how the "
"database is opened:"
msgstr "可以添加下列额外字符来控制数据库的打开方式："

#: ../../library/dbm.rst:235
msgid ""
"``'f'``: Open the database in fast mode. Writes to the database will not be "
"synchronized."
msgstr "``'f'``: 以快速模式打开数据库。 对数据库的写入将不是同步的。"

#: ../../library/dbm.rst:237
msgid ""
"``'s'``: Synchronized mode. Changes to the database will be written "
"immediately to the file."
msgstr "``'s'``: 同步模式。 对数据库的修改将立即写入到文件。"

#: ../../library/dbm.rst:239
msgid "``'u'``: Do not lock database."
msgstr "``'u'``: 不锁定数据库。"

#: ../../library/dbm.rst:241
msgid ""
"Not all flags are valid for all versions of GDBM. See the :data:`open_flags`"
" member for a list of supported flag characters."
msgstr "并非所有旗标都对所有 GDBM 版本可用。 请参阅 :data:`open_flags` 成员获取受支持旗标字符的列表。"

#: ../../library/dbm.rst:0
msgid "Raises"
msgstr "引发"

#: ../../library/dbm.rst:247
msgid "If an invalid *flag* argument is passed."
msgstr "如果传入了不可用的 *flag* 参数。"

#: ../../library/dbm.rst:255
msgid ""
"A string of characters the *flag* parameter of :meth:`~dbm.gnu.open` "
"supports."
msgstr "由 :meth:`~dbm.gnu.open` 的 *flag* 形参所支持的字符组成的字符串。"

#: ../../library/dbm.rst:257
msgid ""
":class:`!gdbm` objects behave similar to :term:`mappings <mapping>`, but "
":meth:`!items` and :meth:`!values` methods are not supported. The following "
"methods are also provided:"
msgstr ""
":class:`!gdbm` 对象的行为类似于 :term:`映射 <mapping>`，但不支持 :meth:`!items` 和 "
":meth:`!values` 方法。 还提供了以下方法："

#: ../../library/dbm.rst:263
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by GDBM's internal "
"hash values, and won't be sorted by the key values.  This method returns the"
" starting key."
msgstr ""
"可以使用此方法和 :meth:`nextkey` 方法循环遍历数据库中的每个键。 遍历的顺序是按照 GDBM 的内部哈希值，而不会根据键的值排序。 "
"此方法将返回起始的键。"

#: ../../library/dbm.rst:270
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr "在遍历中返回 *key* 之后的的下一个键。 以下代码将打印数据库 ``db`` 中的每个键，而不会在内存中创建一个包含所有键的列表::"

#: ../../library/dbm.rst:274
msgid ""
"k = db.firstkey()\n"
"while k is not None:\n"
"    print(k)\n"
"    k = db.nextkey(k)"
msgstr ""
"k = db.firstkey()\n"
"while k is not None:\n"
"    print(k)\n"
"    k = db.nextkey(k)"

#: ../../library/dbm.rst:281
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the GDBM file, this routine will reorganize the database.  "
":class:`!gdbm` objects will not shorten the length of a database file except"
" by using this reorganization; otherwise, deleted file space will be kept "
"and reused as new (key, value) pairs are added."
msgstr ""
"如果你进行了大量删除操作并且想要缩减 GDBM 文件所使用的空间，此例程可将可重新组织数据库。 除非使用此重组功能否则 :class:`!gdbm` "
"对象不会缩减数据库文件大小；在其他情况下，被删除的文件空间将会保留并在添加新的 (键, 值) 对时被重用。"

#: ../../library/dbm.rst:289
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr "当以快速模式打开数据库时，此方法会将任何未写入数据强制写入磁盘。"

#: ../../library/dbm.rst:294
msgid "Close the GDBM database."
msgstr "关闭 GDBM 数据库。"

#: ../../library/dbm.rst:298
msgid "Remove all items from the GDBM database."
msgstr "从 GDBM 数据库移除所有条目。"

#: ../../library/dbm.rst:304
msgid ":mod:`dbm.ndbm` --- New Database Manager"
msgstr ":mod:`dbm.ndbm` --- 新数据库管理器"

#: ../../library/dbm.rst:310
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr "**源代码:** :source:`Lib/dbm/ndbm.py`"

#: ../../library/dbm.rst:314
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the :abbr:`NDBM (New "
"Database Manager)` library. This module can be used with the \"classic\" "
"NDBM interface or the :abbr:`GDBM (GNU dbm)` compatibility interface."
msgstr ""
":mod:`dbm.ndbm` 模块提供了对 :abbr:`NDBM (New Database Manager)` 库的接口。 此模块可与 "
"\"经典\" NDBM 接口或 :abbr:`GDBM (GNU dbm)` 兼容接口配合使用。"

#: ../../library/dbm.rst:326
msgid ""
"The NDBM library shipped as part of macOS has an undocumented limitation on "
"the size of values, which can result in corrupted database files when "
"storing values larger than this limit. Reading such corrupted files can "
"result in a hard crash (segmentation fault)."
msgstr ""
"作为 macOS 的组成部分提供的 NDBM 库对值的大小有一个未写入文档的限制，当存储的值大于此限制时可能会导致数据库文件损坏。 "
"读取这种已损坏的文件可能会导致硬崩溃（段错误）。"

#: ../../library/dbm.rst:335
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. "
":exc:`KeyError` is raised for general mapping errors like specifying an "
"incorrect key."
msgstr ""
"针对 :mod:`dbm.ndbm` 专属错误例如 I/O 错误引发。 :exc:`KeyError` 的引发则针对一般映射错误例如指定了不正确的键。"

#: ../../library/dbm.rst:341
msgid "Name of the NDBM implementation library used."
msgstr "所使用的 NDBM 实现库的名称。"

#: ../../library/dbm.rst:346
msgid "Open an NDBM database and return an :class:`!ndbm` object."
msgstr "打开 NDBM 数据库并返回一个 :class:`!ndbm` 对象。"

#: ../../library/dbm.rst:348
msgid ""
"The basename of the database file (without the :file:`.dir` or :file:`.pag` "
"extensions)."
msgstr "数据库文件的基本名（不带 :file:`.dir` 或 :file:`.pag` 扩展名）。"

#: ../../library/dbm.rst:362
msgid ""
":class:`!ndbm` objects behave similar to :term:`mappings <mapping>`, but "
":meth:`!items` and :meth:`!values` methods are not supported. The following "
"methods are also provided:"
msgstr ""
":class:`!ndbm` 对象的行为类似于 :term:`映射 <mapping>`，但不支持 :meth:`!items` 和 "
":meth:`!values` 方法。 还提供了以下方法："

#: ../../library/dbm.rst:366
msgid "Accepts :term:`path-like object` for filename."
msgstr "接受 :term:`path-like object` 作为文件名。"

#: ../../library/dbm.rst:371
msgid "Close the NDBM database."
msgstr "关闭 NDBM 数据库。"

#: ../../library/dbm.rst:375
msgid "Remove all items from the NDBM database."
msgstr "从 NDBM 数据库移除所有条目。"

#: ../../library/dbm.rst:381
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ":mod:`dbm.dumb` --- 便携式 DBM 实现"

#: ../../library/dbm.rst:386
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr "**源代码:** :source:`Lib/dbm/dumb.py`"

#: ../../library/dbm.rst:392
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the "
":mod:`dbm` module when a more robust module is not available. The "
":mod:`dbm.dumb` module is not written for speed and is not nearly as heavily"
" used as the other database modules."
msgstr ""
":mod:`dbm.dumb` 模块的目的是在更健壮的模块不可用时作为 :mod:`dbm` 模块的最终回退项。 :mod:`dbm.dumb` "
"不是为高速运行而编写的，也不像其他数据库模块一样被经常使用。"

#: ../../library/dbm.rst:399
msgid ""
"The :mod:`dbm.dumb` module provides a persistent :class:`dict`-like "
"interface which is written entirely in Python. Unlike other :mod:`dbm` "
"backends, such as :mod:`dbm.gnu`, no external library is required."
msgstr ""
":mod:`dbm.dumb` 模块提供了一个完全以 Python 编写的持久化 :class:`dict` 型接口。 不同于其他 :mod:`dbm`"
" 后端，例如 :mod:`dbm.gnu`，它不需要外部库。"

#: ../../library/dbm.rst:404
msgid "The :mod:`!dbm.dumb` module defines the following:"
msgstr ":mod:`!dbm.dumb` 模块定义了以下对象："

#: ../../library/dbm.rst:408
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  "
":exc:`KeyError` is raised for general mapping errors like specifying an "
"incorrect key."
msgstr ""
"针对 :mod:`dbm.dumb` 专属错误例如 I/O 错误引发。  :exc:`KeyError` 的引发则针对一般映射例如指定了不正确的键。"

#: ../../library/dbm.rst:414
msgid ""
"Open a :mod:`!dbm.dumb` database. The returned database object behaves "
"similar to a :term:`mapping`, in addition to providing :meth:`~dumbdbm.sync`"
" and :meth:`~dumbdbm.close` methods."
msgstr ""
"打开一个 :mod:`!dbm.dumb` 数据库。 返回的数据库对象的行为类似于 :term:`mapping`，并额外提供 "
":meth:`~dumbdbm.sync` 和 :meth:`~dumbdbm.close` 等方法。"

#: ../../library/dbm.rst:419
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:  - :file:`{filename}.dat` - "
":file:`{filename}.dir`"
msgstr ""
"数据库文件的基本名（不带扩展名）。 新数据库将会创建以下文件:  - :file:`{filename}.dat` - "
":file:`{filename}.dir`"

#: ../../library/dbm.rst:420
msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:"
msgstr "数据库文件的基本名（不带扩展名）。 新数据库将会创建以下文件："

#: ../../library/dbm.rst:423
msgid ":file:`{filename}.dat`"
msgstr ":file:`{filename}.dat`"

#: ../../library/dbm.rst:424
msgid ":file:`{filename}.dir`"
msgstr ":file:`{filename}.dir`"

#: ../../library/dbm.rst:427
msgid ""
"* ``'r'``: |flag_r| * ``'w'``: |flag_w| * ``'c'`` (default): |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""
"* ``'r'``: |flag_r| * ``'w'``: |flag_w| * ``'c'`` (默认): |flag_c| * ``'n'``: "
"|flag_n|"

#: ../../library/dbm.rst:428
msgid "``'r'``: |flag_r|"
msgstr "``'r'``: |flag_r|"

#: ../../library/dbm.rst:430
msgid "``'c'`` (default): |flag_c|"
msgstr "``'c'`` (default): |flag_c|"

#: ../../library/dbm.rst:437
msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr "当载入包含足够巨大/复杂条目的数据库时有可能导致 Python 解释器的崩溃，这是由于 Python AST 编译器有栈深度限制。"

#: ../../library/dbm.rst:441
msgid ""
":func:`~dbm.dumb.open` always creates a new database when *flag* is ``'n'``."
msgstr ":func:`~dbm.dumb.open` 在 *flag* 为 ``'n'`` 时将总是创建一个新数据库。"

#: ../../library/dbm.rst:444
msgid ""
"A database opened read-only if *flag* is ``'r'``. A database is not created "
"if it does not exist if *flag* is ``'r'`` or ``'w'``."
msgstr ""
"如果 *flag* 为 ``'r'`` 则打开的数据库将为只读的。 如果 *flag* 为 ``'r'`` 或 ``'w'`` "
"则当数据库不存在时不会自动创建它。"

#: ../../library/dbm.rst:451
msgid ""
"In addition to the methods provided by the "
":class:`collections.abc.MutableMapping` class, the following methods are "
"provided:"
msgstr "在 :class:`collections.abc.MutableMapping` 类所提供的方法之外，还提供了以下方法："

#: ../../library/dbm.rst:457
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`shelve.Shelf.sync` method."
msgstr "同步磁盘上的目录和数据文件。 此方法将被 :meth:`shelve.Shelf.sync` 方法调用。"

#: ../../library/dbm.rst:462
msgid "Close the database."
msgstr "关闭数据库。"

#: ../../library/dbm.rst:388
msgid "databases"
msgstr "数据库"
