# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dataclasses.rst:2
msgid ":mod:`!dataclasses` --- Data Classes"
msgstr ":mod:`!dataclasses` --- 数据类"

#: ../../library/dataclasses.rst:10
msgid "**Source code:** :source:`Lib/dataclasses.py`"
msgstr "**源码：** :source:`Lib/dataclasses.py`"

#: ../../library/dataclasses.rst:14
msgid ""
"This module provides a decorator and functions for automatically adding "
"generated :term:`special method`\\s such as :meth:`~object.__init__` and "
":meth:`~object.__repr__` to user-defined classes.  It was originally "
"described in :pep:`557`."
msgstr ""
"这个模块提供了一个装饰器和一些函数，用于自动为用户自定义的类添加生成的 :term:`special method` 例如 "
":meth:`~object.__init__` 和 :meth:`~object.__repr__`。 它的初始描述见 :pep:`557`。"

#: ../../library/dataclasses.rst:19
msgid ""
"The member variables to use in these generated methods are defined using "
":pep:`526` type annotations.  For example, this code::"
msgstr "在这些生成的方法中使用的成员变量是使用 :pep:`526` 类型标注来定义的。例如以下代码："

#: ../../library/dataclasses.rst:34
msgid "will add, among other things, a :meth:`!__init__` that looks like::"
msgstr "将添加多项内容，包括如下所示的 :meth:`!__init__`::"

#: ../../library/dataclasses.rst:41
msgid ""
"Note that this method is automatically added to the class: it is not "
"directly specified in the ``InventoryItem`` definition shown above."
msgstr "请注意，此方法会自动添加到类中：而不是在如上所示的 ``InventoryItem`` 定义中被直接指定。"

#: ../../library/dataclasses.rst:47
msgid "Module contents"
msgstr "模块内容"

#: ../../library/dataclasses.rst:51
msgid ""
"This function is a :term:`decorator` that is used to add generated "
":term:`special methods <special method>` to classes, as described below."
msgstr ""
"此函数是一个 :term:`decorator`，它被用于将生成的 :term:`特殊方法 <special method>` 添加到类中，如下所述。"

#: ../../library/dataclasses.rst:54
msgid ""
"The ``@dataclass`` decorator examines the class to find ``field``\\s.  A "
"``field`` is defined as a class variable that has a :term:`type annotation "
"<variable annotation>`.  With two exceptions described below, nothing in "
"``@dataclass`` examines the type specified in the variable annotation."
msgstr ""
"``@dataclass`` 装饰器会检查类以找到其中的 ``field``。 ``field`` 被定义为具有 :term:`类型标注 "
"<variable annotation>` 的类变量。 除了下面所述的两个例外，在 ``@dataclass`` "
"中没有任何东西会去检查变量标注中指定的类型。"

#: ../../library/dataclasses.rst:60
msgid ""
"The order of the fields in all of the generated methods is the order in "
"which they appear in the class definition."
msgstr "这些字段在所有生成的方法中的顺序，都是它们在类定义中出现的顺序。"

#: ../../library/dataclasses.rst:63
msgid ""
"The ``@dataclass`` decorator will add various \"dunder\" methods to the "
"class, described below.  If any of the added methods already exist in the "
"class, the behavior depends on the parameter, as documented below. The "
"decorator returns the same class that it is called on; no new class is "
"created."
msgstr ""
"``@dataclass`` 装饰器将把各种“双下线”方法添加到类，具体如下所述。 "
"如果所添加的任何方法在类中已存在，其行为将取决于形参的值，具体如下所述。 该装饰器将返回执行其调用的类而不会创建新类。"

#: ../../library/dataclasses.rst:69
msgid ""
"If ``@dataclass`` is used just as a simple decorator with no parameters, it "
"acts as if it has the default values documented in this signature.  That is,"
" these three uses of ``@dataclass`` are equivalent::"
msgstr ""
"如果 ``@dataclass`` 仅被用作不带形参的简单装饰器，其行为相当于使用在此签名中记录的默认值。 也就是说，这三种 "
"``@dataclass`` 的用法是等价的::"

#: ../../library/dataclasses.rst:87
msgid "The parameters to ``@dataclass`` are:"
msgstr "``@dataclass`` 的形参有："

#: ../../library/dataclasses.rst:89
msgid ""
"``init``: If true (the default), a :meth:`~object.__init__` method will be "
"generated."
msgstr "``init``: 如为真值（默认），将生成一个 :meth:`~object.__init__` 方法。"

#: ../../library/dataclasses.rst:92
msgid ""
"If the class already defines :meth:`!__init__`, this parameter is ignored."
msgstr "如果类已经定义了 :meth:`!__init__`，此形参将被忽略。"

#: ../../library/dataclasses.rst:95
msgid ""
"``repr``: If true (the default), a :meth:`~object.__repr__` method will be "
"generated.  The generated repr string will have the class name and the name "
"and repr of each field, in the order they are defined in the class.  Fields "
"that are marked as being excluded from the repr are not included.  For "
"example: ``InventoryItem(name='widget', unit_price=3.0, "
"quantity_on_hand=10)``."
msgstr ""
"``repr``: 如果为真值（默认），将生成一个 :meth:`~object.__repr__` 方法。 生成的 repr "
"字符串将带有类名及每个字符的名称和 repr，并按它们在类中定义的顺序排列。 不包括被标记为从 repr 排除的字段。 例如: "
"``InventoryItem(name='widget', unit_price=3.0, quantity_on_hand=10)``。"

#: ../../library/dataclasses.rst:102
msgid ""
"If the class already defines :meth:`!__repr__`, this parameter is ignored."
msgstr "如果类已经定义了 :meth:`!__repr__`，此形参将被忽略。"

#: ../../library/dataclasses.rst:105
msgid ""
"``eq``: If true (the default), an :meth:`~object.__eq__` method will be "
"generated.  This method compares the class as if it were a tuple of its "
"fields, in order.  Both instances in the comparison must be of the identical"
" type."
msgstr ""
"``eq``: 如果为真值（默认），将生成 :meth:`~object.__eq__` 方法。 此方法将把类当作由其字段组成的元组那样按顺序进行比较。"
" 要比较的两个实例必须是相同的类型。"

#: ../../library/dataclasses.rst:110
msgid ""
"If the class already defines :meth:`!__eq__`, this parameter is ignored."
msgstr "如果类已经定义了 :meth:`!__eq__`，此形参将被忽略。"

#: ../../library/dataclasses.rst:113
msgid ""
"``order``: If true (the default is ``False``), :meth:`~object.__lt__`, "
":meth:`~object.__le__`, :meth:`~object.__gt__`, and :meth:`~object.__ge__` "
"methods will be generated.  These compare the class as if it were a tuple of"
" its fields, in order.  Both instances in the comparison must be of the "
"identical type.  If ``order`` is true and ``eq`` is false, a "
":exc:`ValueError` is raised."
msgstr ""
"``order``: 如果为真值 (默认为 ``False``)，将生成 :meth:`~object.__lt__`, "
":meth:`~object.__le__`, :meth:`~object.__gt__` 和 :meth:`~object.__ge__` 方法。 "
"这些方法将把类当作由其字段组成的元组那样按顺序进行比较。 要比较的两个实例必须是相同的类型。 如果 ``order`` 为真值并且 ``eq`` "
"为假值，则会引发 :exc:`ValueError`。"

#: ../../library/dataclasses.rst:120
msgid ""
"If the class already defines any of :meth:`!__lt__`, :meth:`!__le__`, "
":meth:`!__gt__`, or :meth:`!__ge__`, then :exc:`TypeError` is raised."
msgstr ""
"如果类已经定义了 :meth:`!__lt__`, :meth:`!__le__`, :meth:`!__gt__` 或者 "
":meth:`!__ge__` 中的任意一个，将引发 :exc:`TypeError`。"

#: ../../library/dataclasses.rst:124
msgid ""
"``unsafe_hash``: If ``False`` (the default), a :meth:`~object.__hash__` "
"method is generated according to how ``eq`` and ``frozen`` are set."
msgstr ""
"``unsafe_hash``: 如果为 ``False`` (默认值)，则会根据 ``eq`` 和 ``frozen`` 的设置情况生成 "
":meth:`~object.__hash__` 方法。"

#: ../../library/dataclasses.rst:127
msgid ""
":meth:`!__hash__` is used by built-in :meth:`hash()`, and when objects are "
"added to hashed collections such as dictionaries and sets.  Having a "
":meth:`!__hash__` implies that instances of the class are immutable. "
"Mutability is a complicated property that depends on the programmer's "
"intent, the existence and behavior of :meth:`!__eq__`, and the values of the"
" ``eq`` and ``frozen`` flags in the ``@dataclass`` decorator."
msgstr ""
":meth:`!__hash__` 会在对象被添加到哈希多项集例如字典和集合时由内置的 :meth:`hash()` 使用。 具有 "
":meth:`!__hash__` 就意味着类的实例是不可变的。 可变性是一个依赖于程序员的实际意图、:meth:`!__eq__` "
"是否存在和具体行、以及 ``@dataclass`` 装饰器中 ``eq`` 和 ``frozen`` 旗标值和复杂特性。"

#: ../../library/dataclasses.rst:134
msgid ""
"By default, ``@dataclass`` will not implicitly add a "
":meth:`~object.__hash__` method unless it is safe to do so.  Neither will it"
" add or change an existing explicitly defined :meth:`!__hash__` method.  "
"Setting the class attribute ``__hash__ = None`` has a specific meaning to "
"Python, as described in the :meth:`!__hash__` documentation."
msgstr ""
"在默认情况下，``@dataclass`` 不会隐式地添加 :meth:`~object.__hash__` 方法，除非这样做是安全的。 "
"它也没会添加或更改现有的显式定义的 :meth:`!__hash__` 方法。 设置类属性 ``__hash__ = None`` 对 Python "
"具有特定含义，如 :meth:`!__hash__` 文档中所述。"

#: ../../library/dataclasses.rst:140
msgid ""
"If :meth:`!__hash__` is not explicitly defined, or if it is set to ``None``,"
" then ``@dataclass`` *may* add an implicit :meth:`!__hash__` method. "
"Although not recommended, you can force ``@dataclass`` to create a "
":meth:`!__hash__` method with ``unsafe_hash=True``. This might be the case "
"if your class is logically immutable but can still be mutated. This is a "
"specialized use case and should be considered carefully."
msgstr ""
"如果 :meth:`!__hash__` 没有被显式定义，或者它被设为 ``None``，则 ``@dataclass`` *可能* 会添加一个隐式 "
":meth:`!__hash__` 方法。 虽然并不推荐，但你可以用 ``unsafe_hash=True`` 来强制让 ``@dataclass`` "
"创建一个 :meth:`!__hash__` 方法。 如果你的类在逻辑上不可变但却仍然可被修改那么可能就是这种情况一。 "
"这是一个特殊用例并且应当被小心地处理。"

#: ../../library/dataclasses.rst:147
msgid ""
"Here are the rules governing implicit creation of a :meth:`!__hash__` "
"method.  Note that you cannot both have an explicit :meth:`!__hash__` method"
" in your dataclass and set ``unsafe_hash=True``; this will result in a "
":exc:`TypeError`."
msgstr ""
"以下是针对隐式创建 :meth:`!__hash__` 方法的规则。 请注意你的数据类中不能既有显式的 :meth:`!__hash__` 方法又设置 "
"``unsafe_hash=True``；这将导致 :exc:`TypeError`。"

#: ../../library/dataclasses.rst:152
msgid ""
"If ``eq`` and ``frozen`` are both true, by default ``@dataclass`` will "
"generate a :meth:`!__hash__` method for you.  If ``eq`` is true and "
"``frozen`` is false, :meth:`!__hash__` will be set to ``None``, marking it "
"unhashable (which it is, since it is mutable).  If ``eq`` is false, "
":meth:`!__hash__` will be left untouched meaning the :meth:`!__hash__` "
"method of the superclass will be used (if the superclass is :class:`object`,"
" this means it will fall back to id-based hashing)."
msgstr ""
"如果 ``eq`` 和 ``frozen`` 都为真值，则默认 ``@dataclass`` 将为你生成 :meth:`!__hash__` 方法。 "
"如果 ``eq`` 为真值而 ``frozen`` 为假值，则 :meth:`!__hash__` 将被设为 "
"``None``，既将其标记为不可哈希（因为它属于可变对象）。 如果 ``eq`` 为假值，则 :meth:`!__hash__` "
"将保持不变，这意味着将使用超类的 :meth:`!__hash__` 方法（如果超类是 :class:`object`，这意味着它将回退为基于 id "
"的哈希）。"

#: ../../library/dataclasses.rst:160
msgid ""
"``frozen``: If true (the default is ``False``), assigning to fields will "
"generate an exception.  This emulates read-only frozen instances.  If "
":meth:`~object.__setattr__` or :meth:`~object.__delattr__` is defined in the"
" class, then :exc:`TypeError` is raised.  See the discussion below."
msgstr ""
"``frozen``: 如果为真值 (默认为 ``False``)，则对字段赋值将引发异常。 这模拟了只读的冻结实例。 如果在类中定义了 "
":meth:`~object.__setattr__` 或 :meth:`~object.__delattr__`，则将引发 "
":exc:`TypeError`。 参见下文的讨论。"

#: ../../library/dataclasses.rst:165
msgid ""
"``match_args``: If true (the default is ``True``), the ``__match_args__`` "
"tuple will be created from the list of parameters to the generated "
":meth:`~object.__init__` method (even if :meth:`!__init__` is not generated,"
" see above).  If false, or if ``__match_args__`` is already defined in the "
"class, then ``__match_args__`` will not be generated."
msgstr ""
"``match_args``: 如果为真值 (默认为 ``True``)，则将根据传给已生成的 :meth:`~object.__init__` "
"方法的形参列表来创建 ``__match_args__`` 元组 (即使没有生成 :meth:`!__init__`，见上文)。 如果为假值，或者如果 "
"``__match_args__`` 已在类中定义，则不会生成 ``__match_args__``。"

#: ../../library/dataclasses.rst:174
msgid ""
"``kw_only``: If true (the default value is ``False``), then all fields will "
"be marked as keyword-only.  If a field is marked as keyword-only, then the "
"only effect is that the :meth:`~object.__init__` parameter generated from a "
"keyword-only field must be specified with a keyword when :meth:`!__init__` "
"is called.  There is no effect on any other aspect of dataclasses.  See the "
":term:`parameter` glossary entry for details.  Also see the :const:`KW_ONLY`"
" section."
msgstr ""
"``kw_only``: 如果为真值 (默认为 ``False``)，则所有字段都将被标记为仅限关键字的。 "
"如果一个字段被标记为仅限关键字的，则唯一的影响是由仅限关键字的字段生成的 :meth:`~object.__init__` 的对应形参在 "
":meth:`!__init__` 被调用时必须以关键字形式指定。 而数据类的任何其他行为都不会受影响。 详情参见 :term:`parameter` "
"术语表条目。 另请参阅 :const:`KW_ONLY` 一节。"

#: ../../library/dataclasses.rst:185
msgid ""
"``slots``: If true (the default is ``False``), :attr:`~object.__slots__` "
"attribute will be generated and new class will be returned instead of the "
"original one. If :attr:`!__slots__` is already defined in the class, then "
":exc:`TypeError` is raised."
msgstr ""
"``slots``: 如果为真值 (默认为 ``False``)，则将生成 :attr:`~object.__slots__` "
"属性并返回一个新类而非原本的类。 如果 :attr:`!__slots__` 已在类中定义，则会引发 :exc:`TypeError`。"

#: ../../library/dataclasses.rst:192
msgid ""
"If a field name is already included in the ``__slots__`` of a base class, it"
" will not be included in the generated ``__slots__`` to prevent "
":ref:`overriding them <datamodel-note-slots>`. Therefore, do not use "
"``__slots__`` to retrieve the field names of a dataclass. Use :func:`fields`"
" instead. To be able to determine inherited slots, base class ``__slots__`` "
"may be any iterable, but *not* an iterator."
msgstr ""
"如果某个字段名称已经包括在基类的 ``__slots__`` 中，它将不会被包括在所生成的 ``__slots__`` 中以防止 :ref:`覆盖它们 "
"<datamodel-note-slots>`。 因此，请不要使用 ``__slots__`` 来获取数据类的字段名称。 而应改用 "
":func:`fields`。 为了能够确定所继承的槽位，基类 ``__slots__`` 可以为任意可迭代对象，但是 *不可以为* 迭代器。"

#: ../../library/dataclasses.rst:202
msgid ""
"``weakref_slot``: If true (the default is ``False``), add a slot named "
"\"__weakref__\", which is required to make an instance weakref-able.  It is "
"an error to specify ``weakref_slot=True`` without also specifying "
"``slots=True``."
msgstr ""
"``weakref_slot``：如果为真值（默认为 ``False``），则添加一个名为 “__weakref__” "
"的槽位，这是使得一个实例可以被弱引用所必需的。指定 ``weakref_slot=True`` 而不同时指定 ``slots=True`` "
"将会导致错误。"

#: ../../library/dataclasses.rst:209
msgid ""
"``field``\\s may optionally specify a default value, using normal Python "
"syntax::"
msgstr "可以用普通的 Python 语法为各个 ``field`` 指定默认值："

#: ../../library/dataclasses.rst:217
msgid ""
"In this example, both ``a`` and ``b`` will be included in the added "
":meth:`~object.__init__` method, which will be defined as::"
msgstr ""
"在这个例子中，``a`` 和 ``b`` 都将被包括在所添加的 :meth:`~object.__init__` 方法中，该方法将被定义为::"

#: ../../library/dataclasses.rst:222
msgid ""
":exc:`TypeError` will be raised if a field without a default value follows a"
" field with a default value.  This is true whether this occurs in a single "
"class, or as a result of class inheritance."
msgstr ""
"如果在具有默认值的字段之后存在没有默认值的字段，将会引发 :exc:`TypeError`。无论此情况是发生在单个类中还是作为类继承的结果，都是如此。"

#: ../../library/dataclasses.rst:228
msgid ""
"For common and simple use cases, no other functionality is required.  There "
"are, however, some dataclass features that require additional per-field "
"information.  To satisfy this need for additional information, you can "
"replace the default field value with a call to the provided :func:`!field` "
"function.  For example::"
msgstr ""
"对于常见和简单的用例，不需要其他的功能。 但是，有些数据类的特性需要额外的每字段信息。 为了满足这种对额外信息的需求，你可以通过调用所提供的 "
":func:`!field` 函数来替换默认的字段值。 例如::"

#: ../../library/dataclasses.rst:241
msgid ""
"As shown above, the :const:`MISSING` value is a sentinel object used to "
"detect if some parameters are provided by the user. This sentinel is used "
"because ``None`` is a valid value for some parameters with a distinct "
"meaning.  No code should directly use the :const:`MISSING` value."
msgstr ""
"如上所示，:const:`MISSING` 值是一个哨兵对象，用于检测一些形参是否由用户提供。使用它是因为 ``None`` "
"对于一些形参来说是有效的用户值。任何代码都不应该直接使用 :const:`MISSING` 值。"

#: ../../library/dataclasses.rst:246
msgid "The parameters to :func:`!field` are:"
msgstr "传给 :func:`!field` 的形参有："

#: ../../library/dataclasses.rst:248
msgid ""
"``default``: If provided, this will be the default value for this field.  "
"This is needed because the :func:`!field` call itself replaces the normal "
"position of the default value."
msgstr ""
"``default``: 如果提供，这将为该字段的默认值。 设置此形参是因为 :func:`!field` 调用本身会替换通常的默认值所在位置。"

#: ../../library/dataclasses.rst:252
msgid ""
"``default_factory``: If provided, it must be a zero-argument callable that "
"will be called when a default value is needed for this field.  Among other "
"purposes, this can be used to specify fields with mutable default values, as"
" discussed below.  It is an error to specify both ``default`` and "
"``default_factory``."
msgstr ""
"``default_factory``：如果提供，它必须是一个需要零个参数的可调用对象，当该字段需要一个默认值时，它将被调用。这能解决当默认值是可变对象时会带来的问题，如下所述。同时指定"
" ``default`` 和 ``default_factory`` 将产生错误。"

#: ../../library/dataclasses.rst:258
msgid ""
"``init``: If true (the default), this field is included as a parameter to "
"the generated :meth:`~object.__init__` method."
msgstr "``init``: 如果为真值（默认），则该字段将作为一个形参被包括在所生成的 :meth:`~object.__init__` 方法中。"

#: ../../library/dataclasses.rst:261
msgid ""
"``repr``: If true (the default), this field is included in the string "
"returned by the generated :meth:`~object.__repr__` method."
msgstr "``repr``: 如果为真值（默认），则该字段将被包括在所生成的 :meth:`~object.__repr__` 方法返回的字符串中。"

#: ../../library/dataclasses.rst:264
msgid ""
"``hash``: This can be a bool or ``None``.  If true, this field is included "
"in the generated :meth:`~object.__hash__` method.  If ``None`` (the "
"default), use the value of ``compare``: this would normally be the expected "
"behavior.  A field should be considered in the hash if it's used for "
"comparisons.  Setting this value to anything other than ``None`` is "
"discouraged."
msgstr ""
"``hash``: 这可以是一个布尔值或为 ``None``。 如果为真值，则此字段将被包括在所生成的 :meth:`~object.__hash__`"
" 方法中。 如果为 ``None`` (默认)，则将使用 ``compare`` 的值：这通常是预期的行为。 "
"一个字段如果被用于比较那么就应当在哈希时考虑到它。 不建议将该值设为 ``None`` 以外的任何其他对象。"

#: ../../library/dataclasses.rst:271
msgid ""
"One possible reason to set ``hash=False`` but ``compare=True`` would be if a"
" field is expensive to compute a hash value for, that field is needed for "
"equality testing, and there are other fields that contribute to the type's "
"hash value.  Even if a field is excluded from the hash, it will still be "
"used for comparisons."
msgstr ""
"设置 ``hash=False`` 但 ``compare=True`` "
"的一个合理情况是，一个计算哈希值的代价很高的字段是检验等价性需要的，且还有其他字段可以用于计算类型的哈希值。可以从哈希值中排除该字段，但仍令它用于比较。"

#: ../../library/dataclasses.rst:277
msgid ""
"``compare``: If true (the default), this field is included in the generated "
"equality and comparison methods (:meth:`~object.__eq__`, "
":meth:`~object.__gt__`, et al.)."
msgstr ""
"``compare``: 如果为真值（默认），则该字段将被包括在所生成的相等性和大小比较方法中 (:meth:`~object.__eq__`, "
":meth:`~object.__gt__` 等等)。"

#: ../../library/dataclasses.rst:281
msgid ""
"``metadata``: This can be a mapping or None. None is treated as an empty "
"dict.  This value is wrapped in :func:`~types.MappingProxyType` to make it "
"read-only, and exposed on the :class:`Field` object. It is not used at all "
"by Data Classes, and is provided as a third-party extension mechanism. "
"Multiple third-parties can each have their own key, to use as a namespace in"
" the metadata."
msgstr ""
"``metadata``：可以是映射或 None。None 被视为一个空的字典。这个值将被包装在 "
":func:`~types.MappingProxyType` 中，使其只读，并暴露在 :class:`Field` "
"对象上。数据类不使用它——它是作为第三方扩展机制提供的。多个第三方可以各自拥有自己的键，以用作元数据中的命名空间。"

#: ../../library/dataclasses.rst:289
msgid ""
"``kw_only``: If true, this field will be marked as keyword-only. This is "
"used when the generated :meth:`~object.__init__` method's parameters are "
"computed."
msgstr ""
"``kw_only``: 如果为真值，则该字段将被标记为仅限关键字字段。 这将在计算所生成的 :meth:`~object.__init__` "
"方法的形参时被使用。"

#: ../../library/dataclasses.rst:295
msgid ""
"If the default value of a field is specified by a call to :func:`!field`, "
"then the class attribute for this field will be replaced by the specified "
"``default`` value.  If no ``default`` is provided, then the class attribute "
"will be deleted.  The intent is that after the :func:`@dataclass "
"<dataclass>` decorator runs, the class attributes will all contain the "
"default values for the fields, just as if the default value itself were "
"specified.  For example, after::"
msgstr ""
"如果通过对 :func:`!field` 的调用来指定字段的默认值，那么该字段对应的类属性将被替换为指定的 ``default`` 值。 如果没有提供 "
"``default``，那么该类属性将被删除。 其意图是在 :func:`@dataclass <dataclass>` "
"装饰器运行之后，该类属性将包含所有字段的默认值，就像直接指定了默认值本身一样。 例如，在执行下列代码之后::"

#: ../../library/dataclasses.rst:311
msgid ""
"The class attribute ``C.z`` will be ``10``, the class attribute ``C.t`` will"
" be ``20``, and the class attributes ``C.x`` and ``C.y`` will not be set."
msgstr ""
"类属性 ``C.z`` 将是 ``10``，类属性 ``C.t`` 将是 ``20``，类属性 ``C.x`` 和 ``C.y`` 将不设置。"

#: ../../library/dataclasses.rst:317
msgid ""
":class:`!Field` objects describe each defined field. These objects are "
"created internally, and are returned by the :func:`fields` module-level "
"method (see below).  Users should never instantiate a :class:`!Field` object"
" directly.  Its documented attributes are:"
msgstr ""
":class:`!Field` 对象描述每个已定义的字段。 这些对象是在内部创建的，并会由 :func:`fields` 模块块方法返回（见下文）。 "
"用户绝不应直接实例化 :class:`!Field` 对象。 已写入文档的属性如下："

#: ../../library/dataclasses.rst:322
msgid "``name``: The name of the field."
msgstr "``name``：字段的名称。"

#: ../../library/dataclasses.rst:323
msgid "``type``: The type of the field."
msgstr "``type``：字段的类型。"

#: ../../library/dataclasses.rst:324
msgid ""
"``default``, ``default_factory``, ``init``, ``repr``, ``hash``, ``compare``,"
" ``metadata``, and ``kw_only`` have the identical meaning and values as they"
" do in the :func:`field` function."
msgstr ""
"``default``, ``default_factory``, ``init``, ``repr``, ``hash``, ``compare``,"
" ``metadata`` 和 ``kw_only`` 具有与 :func:`field` 函数中对应参数相同的含义和值。"

#: ../../library/dataclasses.rst:328
msgid ""
"Other attributes may exist, but they are private and must not be inspected "
"or relied on."
msgstr "可能存在其他属性，但它们是私有的。用户不应检查或依赖于这些属性。"

#: ../../library/dataclasses.rst:333
msgid ""
"Returns a tuple of :class:`Field` objects that define the fields for this "
"dataclass.  Accepts either a dataclass, or an instance of a dataclass. "
"Raises :exc:`TypeError` if not passed a dataclass or instance of one. Does "
"not return pseudo-fields which are ``ClassVar`` or ``InitVar``."
msgstr ""
"返回一个能描述此数据类所包含的字段的元组，元组的每一项都是 :class:`Field` "
"对象。接受数据类或数据类的实例。如果没有传递一个数据类或实例将引发 :exc:`TypeError`。不返回 ``ClassVar`` 或 "
"``InitVar`` 等伪字段。"

#: ../../library/dataclasses.rst:340
msgid ""
"Converts the dataclass ``obj`` to a dict (by using the factory function "
"``dict_factory``).  Each dataclass is converted to a dict of its fields, as "
"``name: value`` pairs.  dataclasses, dicts, lists, and tuples are recursed "
"into.  Other objects are copied with :func:`copy.deepcopy`."
msgstr ""
"将数据类 ``obj`` 转换为一个字典（使用工厂函数 ``dict_factory``）。每个数据类被转换为以 ``name: value`` "
"键值对来储存其字段的字典。数据类、字典、列表和元组的内容会被递归地访问。其它对象用 :func:`copy.deepcopy` 来复制。"

#: ../../library/dataclasses.rst:346
msgid "Example of using :func:`!asdict` on nested dataclasses::"
msgstr "在嵌套的数据类上使用 :func:`!asdict` 的例子::"

#: ../../library/dataclasses.rst:363 ../../library/dataclasses.rst:383
msgid "To create a shallow copy, the following workaround may be used::"
msgstr "要创建一个浅拷贝，可以使用以下的变通方法："

#: ../../library/dataclasses.rst:367
msgid ""
":func:`!asdict` raises :exc:`TypeError` if ``obj`` is not a dataclass "
"instance."
msgstr "如果 ``obj`` 不是一个数据类实例则 :func:`!asdict` 将引发 :exc:`TypeError`。"

#: ../../library/dataclasses.rst:372
msgid ""
"Converts the dataclass ``obj`` to a tuple (by using the factory function "
"``tuple_factory``).  Each dataclass is converted to a tuple of its field "
"values.  dataclasses, dicts, lists, and tuples are recursed into. Other "
"objects are copied with :func:`copy.deepcopy`."
msgstr ""
"将数据类 ``obj`` 转换为一个元组（使用工厂函数 "
"``tuple_factory``）。每个数据类被转换为其字段的值的元组。数据类、字典、列表和元组的内容会被递归地访问。其它对象用 "
":func:`copy.deepcopy` 来复制。"

#: ../../library/dataclasses.rst:378
msgid "Continuing from the previous example::"
msgstr "继续前一个例子："

#: ../../library/dataclasses.rst:387
msgid ""
":func:`!astuple` raises :exc:`TypeError` if ``obj`` is not a dataclass "
"instance."
msgstr "如果 ``obj`` 不是一个数据类实例则 :func:`!astuple` 将引发 :exc:`TypeError`。"

#: ../../library/dataclasses.rst:392
msgid ""
"Creates a new dataclass with name ``cls_name``, fields as defined in "
"``fields``, base classes as given in ``bases``, and initialized with a "
"namespace as given in ``namespace``.  ``fields`` is an iterable whose "
"elements are each either ``name``, ``(name, type)``, or ``(name, type, "
"Field)``.  If just ``name`` is supplied, ``typing.Any`` is used for "
"``type``.  The values of ``init``, ``repr``, ``eq``, ``order``, "
"``unsafe_hash``, ``frozen``, ``match_args``, ``kw_only``, ``slots``, and "
"``weakref_slot`` have the same meaning as they do in :func:`@dataclass "
"<dataclass>`."
msgstr ""
"新建一个名为 ``cls_name`` 的数据类，其字段在 ``fields`` 中定义，其基类在 ``bases`` 中给出，并使用在 "
"``namespace`` 中给定的命名空间来初始化。 ``fields`` 是一个可迭代对象，其中的每个元素均为 ``name``, ``(name,"
" type)`` 或 ``(name, type, Field)`` 的形式。 如果只提供了 ``name``，则使用 ``typing.Any`` "
"作为 ``type``。 ``init``, ``repr``, ``eq``, ``order``, ``unsafe_hash``, "
"``frozen``, ``match_args``, ``kw_only``, ``slots`` 和 ``weakref_slot`` 值的含义与 "
":func:`@dataclass <dataclass>` 中的同名参数相同。"

#: ../../library/dataclasses.rst:402
msgid ""
"This function is not strictly required, because any Python mechanism for "
"creating a new class with ``__annotations__`` can then apply the "
"``@dataclass`` function to convert that class to a dataclass.  This function"
" is provided as a convenience.  For example::"
msgstr ""
"此函数不是必需的，因为任何用于新建带有 ``__annotations__`` 的类的 Python 机制都可以继续应用 ``@dataclass`` "
"函数来将类转换为数据类。 提供此函数只是为了更便捷地使用。 例如::"

#: ../../library/dataclasses.rst:414
msgid "Is equivalent to::"
msgstr "等价于："

#: ../../library/dataclasses.rst:427
msgid ""
"Creates a new object of the same type as ``obj``, replacing fields with "
"values from ``changes``.  If ``obj`` is not a Data Class, raises "
":exc:`TypeError`.  If values in ``changes`` do not specify fields, raises "
":exc:`TypeError`."
msgstr ""
"创建一个与 ``obj`` 类型相同的新对象，将字段替换为 ``changes`` 里的值。如果 ``obj`` 不是数据类，则抛出 "
":exc:`TypeError` 。如果 ``changes`` 里的值没有指定要替换的字段名，则抛出 :exc:`TypeError`。"

#: ../../library/dataclasses.rst:432
msgid ""
"The newly returned object is created by calling the :meth:`~object.__init__`"
" method of the dataclass.  This ensures that :ref:`__post_init__ <post-init-"
"processing>`, if present, is also called."
msgstr ""

#: ../../library/dataclasses.rst:436
msgid ""
"Init-only variables without default values, if any exist, must be specified "
"on the call to :func:`!replace` so that they can be passed to "
":meth:`!__init__` and :meth:`__post_init__`."
msgstr ""
"如果存在任何没有默认值的仅初始化变量，那么必须在调用 :func:`!replace` 时指定它们的值，以便它们可以被传递给 "
":meth:`!__init__` 和 :meth:`__post_init__`。"

#: ../../library/dataclasses.rst:440
msgid ""
"It is an error for ``changes`` to contain any fields that are defined as "
"having ``init=False``.  A :exc:`ValueError` will be raised in this case."
msgstr ""
"``changes`` 包含任何定义为 ``init=False`` 的字段是错误的。在这种情况下会引发 :exc:`ValueError` 。"

#: ../../library/dataclasses.rst:444
msgid ""
"Be forewarned about how ``init=False`` fields work during a call to "
":func:`!replace`.  They are not copied from the source object, but rather "
"are initialized in :meth:`__post_init__`, if they're initialized at all.  It"
" is expected that ``init=False`` fields will be rarely and judiciously used."
"  If they are used, it might be wise to have alternate class constructors, "
"or perhaps a custom ``replace()`` (or similarly named) method which handles "
"instance copying."
msgstr ""
"需要预先注意 ``init=False`` 字段在对 :func:`!replace` 调用期间的行为。 "
"如果它们会被初始化，它们将不是从源对象复制，而是在 :meth:`__post_init__` 中被初始化。 通常预期 ``init=False`` "
"字段将很少能被正确地使用。 如果要使用它们，那么使用另外的类构造器，或是自定义的 ``replace()`` (或类似名称的) "
"方法来处理实例拷贝可能是更明智的做法。"

#: ../../library/dataclasses.rst:455
msgid ""
"Return ``True`` if its parameter is a dataclass or an instance of one, "
"otherwise return ``False``."
msgstr "如果其形参为数据类，或其实例，返回 ``True``，否则返回 ``False``。"

#: ../../library/dataclasses.rst:458
msgid ""
"If you need to know if a class is an instance of a dataclass (and not a "
"dataclass itself), then add a further check for ``not isinstance(obj, "
"type)``::"
msgstr ""
"如果你需要知道一个类是否是一个数据类的实例（而不是一个数据类本身），那么再添加一个 ``not isinstance(obj, type)`` 检查："

#: ../../library/dataclasses.rst:467
msgid "A sentinel value signifying a missing default or default_factory."
msgstr "一个指明“没有提供 default 或 default_factory”的监视值。"

#: ../../library/dataclasses.rst:471
msgid ""
"A sentinel value used as a type annotation.  Any fields after a pseudo-field"
" with the type of :const:`!KW_ONLY` are marked as keyword-only fields.  Note"
" that a pseudo-field of type :const:`!KW_ONLY` is otherwise completely "
"ignored.  This includes the name of such a field.  By convention, a name of "
"``_`` is used for a :const:`!KW_ONLY` field.  Keyword-only fields signify "
":meth:`~object.__init__` parameters that must be specified as keywords when "
"the class is instantiated."
msgstr ""
"一个用途类型标的监视值。 任何在伪字段之后的类型为 :const:`!KW_ONLY` 的字段会被标记为仅限关键字的字段。 请注意在其他情况下 "
":const:`!KW_ONLY` 类型的伪字段会被完全忽略。 这包括此类字段的名称。 根据惯例，名称 ``_`` 会被用作 "
":const:`!KW_ONLY` 字段。 仅限关键字字段指明当类被实例化时 :meth:`~object.__init__` "
"形参必须以关键字形式来指定。"

#: ../../library/dataclasses.rst:480
msgid ""
"In this example, the fields ``y`` and ``z`` will be marked as keyword-only "
"fields::"
msgstr "在这个例子中，字段 ``y`` 和 ``z`` 将被标记为仅限关键字字段::"

#: ../../library/dataclasses.rst:491
msgid ""
"In a single dataclass, it is an error to specify more than one field whose "
"type is :const:`!KW_ONLY`."
msgstr "在单个数据类中，指定一个以上 :const:`!KW_ONLY` 类型的字段将导致错误。"

#: ../../library/dataclasses.rst:498
msgid ""
"Raised when an implicitly defined :meth:`~object.__setattr__` or "
":meth:`~object.__delattr__` is called on a dataclass which was defined with "
"``frozen=True``. It is a subclass of :exc:`AttributeError`."
msgstr ""
"在定义时设置了 ``frozen=True`` 的类上调用隐式定义的 :meth:`~object.__setattr__` 或 "
":meth:`~object.__delattr__` 时引发。 这是 :exc:`AttributeError` 的一个子类。"

#: ../../library/dataclasses.rst:505
msgid "Post-init processing"
msgstr "初始化后处理"

#: ../../library/dataclasses.rst:507
msgid ""
"The generated :meth:`~object.__init__` code will call a method named "
":meth:`!__post_init__`, if :meth:`!__post_init__` is defined on the class.  "
"It will normally be called as ``self.__post_init__()``. However, if any "
"``InitVar`` fields are defined, they will also be passed to "
":meth:`!__post_init__` in the order they were defined in the class.  If no "
":meth:`~object.__init__` method is generated, then :meth:`!__post_init__` "
"will not automatically be called."
msgstr ""

#: ../../library/dataclasses.rst:515
msgid ""
"When defined on the class, it will be called by the generated "
":meth:`~object.__init__`, normally as ``self.__post_init__()``. However, if "
"any ``InitVar`` fields are defined, they will also be passed to "
":meth:`!__post_init__` in the order they were defined in the class.  If no "
":meth:`!__init__` method is generated, then :meth:`!__post_init__` will not "
"automatically be called."
msgstr ""
"当在类上定义时，它将被所生成的 :meth:`~object.__init__` 调用，通常是以 ``self.__post_init__()`` "
"的形式。 但是，如果定义了任何 ``InitVar`` 字段，它们也将按照它们在类中定义的顺序被传递给 :meth:`!__post_init__`。 "
"如果没有生成 :meth:`!__init__` 方法，那么 :meth:`!__post_init__` 将不会被自动调用。"

#: ../../library/dataclasses.rst:522
msgid "@dataclass class C:"
msgstr ""

#: ../../library/dataclasses.rst:525
msgid "a: float b: float c: float = field(init=False)"
msgstr ""

#: ../../library/dataclasses.rst:530
msgid "def __post_init__(self):"
msgstr ""

#: ../../library/dataclasses.rst:530
msgid "self.c = self.a + self.b"
msgstr ""

#: ../../library/dataclasses.rst:532
msgid ""
"The :meth:`~object.__init__` method generated by :func:`@dataclass "
"<dataclass>` does not call base class :meth:`!__init__` methods. If the base"
" class has an :meth:`!__init__` method that has to be called, it is common "
"to call this method in a :meth:`!__post_init__` method::"
msgstr ""

#: ../../library/dataclasses.rst:549
msgid ""
"Note, however, that in general the dataclass-generated :meth:`!__init__` "
"methods don't need to be called, since the derived dataclass will take care "
"of initializing all fields of any base class that is a dataclass itself."
msgstr ""
"但是，请注意一般来说数据类生成的 :meth:`!__init__` 方法不需要被调用，因为派生的数据类将负责初始化任何本身为数据类的基类的所有字段。"

#: ../../library/dataclasses.rst:553
msgid ""
"See the section below on init-only variables for ways to pass parameters to "
":meth:`!__post_init__`.  Also see the warning about how :func:`replace` "
"handles ``init=False`` fields."
msgstr ""
"请参阅下面有关仅初始化变量的小节来了解如何将形参传递给 :meth:`!__post_init__`。 另请参阅关于 :func:`replace` "
"如何处理 ``init=False`` 字段的警告。"

#: ../../library/dataclasses.rst:558
msgid "Class variables"
msgstr "类变量"

#: ../../library/dataclasses.rst:560
msgid ""
"One of the few places where :func:`@dataclass <dataclass>` actually inspects"
" the type of a field is to determine if a field is a class variable as "
"defined in :pep:`526`.  It does this by checking if the type of the field is"
" ``typing.ClassVar``.  If a field is a ``ClassVar``, it is excluded from "
"consideration as a field and is ignored by the dataclass mechanisms.  Such "
"``ClassVar`` pseudo-fields are not returned by the module-level "
":func:`fields` function."
msgstr ""
"在 :func:`@dataclass <dataclass>` 会实际检查字段类型的少数几个地方之一是确定字段是否为如 :pep:`526` "
"所定义的类变量。 它通过检查字段的类型是否为 ``typing.ClassVar`` 来实现这一点。 如果一个字段是 "
"``ClassVar``，它将被排除在考虑范围之外并被数据类机制所忽略。 这样的 ``ClassVar`` 伪字段将不会被模块层级的 "
":func:`fields` 函数返回。"

#: ../../library/dataclasses.rst:569
msgid "Init-only variables"
msgstr "仅初始化变量"

#: ../../library/dataclasses.rst:571
msgid ""
"Another place where :func:`@dataclass <dataclass>` inspects a type "
"annotation is to determine if a field is an init-only variable.  It does "
"this by seeing if the type of a field is of type ``dataclasses.InitVar``.  "
"If a field is an ``InitVar``, it is considered a pseudo-field called an "
"init-only field.  As it is not a true field, it is not returned by the "
"module-level :func:`fields` function.  Init-only fields are added as "
"parameters to the generated :meth:`~object.__init__` method, and are passed "
"to the optional :ref:`__post_init__ <post-init-processing>` method.  They "
"are not otherwise used by dataclasses."
msgstr ""

#: ../../library/dataclasses.rst:581
msgid ""
"For example, suppose a field will be initialized from a database, if a value"
" is not provided when creating the class::"
msgstr "例如，假设在创建类时没有为某个字段提供值，初始化时将从数据库中取值::"

#: ../../library/dataclasses.rst:596
msgid ""
"In this case, :func:`fields` will return :class:`Field` objects for ``i`` "
"and ``j``, but not for ``database``."
msgstr ""
"在这种情况下， :func:`fields` 将返回 ``i`` 和 ``j`` 的 :class:`Field` 对象，但不包括 "
"``database`` 。"

#: ../../library/dataclasses.rst:600
msgid "Frozen instances"
msgstr "冻结的实例"

#: ../../library/dataclasses.rst:602
msgid ""
"It is not possible to create truly immutable Python objects.  However, by "
"passing ``frozen=True`` to the :func:`@dataclass <dataclass>` decorator you "
"can emulate immutability.  In that case, dataclasses will add "
":meth:`~object.__setattr__` and :meth:`~object.__delattr__` methods to the "
"class.  These methods will raise a :exc:`FrozenInstanceError` when invoked."
msgstr ""
"创建真正不可变的 Python 对象是不可能的。 但是，你可以通过将 ``frozen=True`` 传递给 :func:`@dataclass "
"<dataclass>` 装饰器来模拟出不可变性。 在这种情况下，数据类将向类添加 :meth:`~object.__setattr__` 和 "
":meth:`~object.__delattr__` 方法。 当被唤起时这些方法将会引发 :exc:`FrozenInstanceError`。"

#: ../../library/dataclasses.rst:608
msgid ""
"There is a tiny performance penalty when using ``frozen=True``: "
":meth:`~object.__init__` cannot use simple assignment to initialize fields, "
"and must use :meth:`!__setattr__`."
msgstr ""
"在使用 ``frozen=True`` 时会有微小的性能损失: :meth:`~object.__init__` "
"不能使用简单赋值来初始化字段，而必须使用 :meth:`!__setattr__`。"

#: ../../library/dataclasses.rst:613
msgid "Inheritance"
msgstr "继承"

#: ../../library/dataclasses.rst:615
msgid ""
"When the dataclass is being created by the :func:`@dataclass <dataclass>` "
"decorator, it looks through all of the class's base classes in reverse MRO "
"(that is, starting at :class:`object`) and, for each dataclass that it "
"finds, adds the fields from that base class to an ordered mapping of fields."
" After all of the base class fields are added, it adds its own fields to the"
" ordered mapping.  All of the generated methods will use this combined, "
"calculated ordered mapping of fields.  Because the fields are in insertion "
"order, derived classes override base classes.  An example::"
msgstr ""
"当数据类由 :func:`@dataclass <dataclass>` 装饰器创建时，它会按反向 MRO 顺序（也就是说，从 "
":class:`object` 开始）查看它的所有基类，并将找到的每个数据类的字段添加到一个有序映射中。 所有生成的方法都将使用这个有序映射。 "
"字段会遵守它们被插入的顺序，因此派生类会重写基类。 一个例子::"

#: ../../library/dataclasses.rst:635
msgid ""
"The final list of fields is, in order, ``x``, ``y``, ``z``.  The final type "
"of ``x`` is ``int``, as specified in class ``C``."
msgstr ""
"最后的字段列表依次是 ``x`` 、 ``y`` 、 ``z`` 。 ``x`` 的最终类型是 ``int`` ，如类 ``C`` 中所指定的那样。"

#: ../../library/dataclasses.rst:638
msgid ""
"The generated :meth:`~object.__init__` method for ``C`` will look like::"
msgstr "为 ``C`` 生成的 :meth:`~object.__init__` 方法看起来像是这样::"

#: ../../library/dataclasses.rst:643
msgid "Re-ordering of keyword-only parameters in :meth:`!__init__`"
msgstr ":meth:`!__init__` 中仅限关键字形参的重新排序"

#: ../../library/dataclasses.rst:645
msgid ""
"After the parameters needed for :meth:`~object.__init__` are computed, any "
"keyword-only parameters are moved to come after all regular (non-keyword-"
"only) parameters.  This is a requirement of how keyword-only parameters are "
"implemented in Python: they must come after non-keyword-only parameters."
msgstr ""
"在计算出 :meth:`~object.__init__` 所需要的形参之后，任何仅限关键字形参会被移至所有常规（非仅限关键字）形参的后面。 这是 "
"Python 中实现仅限关键字形参所要求的：它们必须位于非仅限关键字形参之后。"

#: ../../library/dataclasses.rst:651
msgid ""
"In this example, ``Base.y``, ``Base.w``, and ``D.t`` are keyword-only "
"fields, and ``Base.x`` and ``D.z`` are regular fields::"
msgstr ""
"在这个例子中，``Base.y``, ``Base.w``, and ``D.t`` 是仅限关键字字段，而 ``Base.x`` 和 ``D.z`` "
"是常规字段::"

#: ../../library/dataclasses.rst:666
msgid "The generated :meth:`!__init__` method for ``D`` will look like::"
msgstr "为 ``D`` 生成的 :meth:`!__init__` 方法看起来是这样的::"

#: ../../library/dataclasses.rst:670
msgid ""
"Note that the parameters have been re-ordered from how they appear in the "
"list of fields: parameters derived from regular fields are followed by "
"parameters derived from keyword-only fields."
msgstr "请注意形参原来在字段列表中出现的位置已被重新排序：前面是来自常规字段的形参而后面是来自仅限关键字字段的形参。"

#: ../../library/dataclasses.rst:674
msgid ""
"The relative ordering of keyword-only parameters is maintained in the re-"
"ordered :meth:`!__init__` parameter list."
msgstr "仅限关键字形参的相对顺序会在重新排序的 :meth:`!__init__` 列表中保持不变。"

#: ../../library/dataclasses.rst:679
msgid "Default factory functions"
msgstr "默认工厂函数"

#: ../../library/dataclasses.rst:681
msgid ""
"If a :func:`field` specifies a ``default_factory``, it is called with zero "
"arguments when a default value for the field is needed.  For example, to "
"create a new instance of a list, use::"
msgstr ""
"如果一个 :func:`field` 指定了一个 ``default_factory`` "
"，当需要该字段的默认值时，将使用零参数调用它。例如，要创建列表的新实例，请使用::"

#: ../../library/dataclasses.rst:687
msgid ""
"If a field is excluded from :meth:`~object.__init__` (using ``init=False``) "
"and the field also specifies ``default_factory``, then the default factory "
"function will always be called from the generated :meth:`!__init__` "
"function.  This happens because there is no other way to give the field an "
"initial value."
msgstr ""
"如果一个字段被排除在 :meth:`~object.__init__` 之外 (使用 ``init=False``) 并且该字段还指定了 "
"``default_factory``，则默认的工厂函数将总是会从生成的 :meth:`!__init__` 函数中被调用。 "
"发生这种情况是因为没有其他方式能为字段提供初始值。"

#: ../../library/dataclasses.rst:694
msgid "Mutable default values"
msgstr "可变的默认值"

#: ../../library/dataclasses.rst:696
msgid ""
"Python stores default member variable values in class attributes. Consider "
"this example, not using dataclasses::"
msgstr "Python 在类属性中存储默认成员变量值。思考这个例子，不使用数据类::"

#: ../../library/dataclasses.rst:711
msgid ""
"Note that the two instances of class ``C`` share the same class variable "
"``x``, as expected."
msgstr "请注意，类 ``C`` 的两个实例共享相同的类变量 ``x`` ，如预期的那样。"

#: ../../library/dataclasses.rst:714
msgid "Using dataclasses, *if* this code was valid::"
msgstr "使用数据类，*如果* 此代码有效："

#: ../../library/dataclasses.rst:722
msgid "it would generate code similar to::"
msgstr "它生成的代码类似于::"

#: ../../library/dataclasses.rst:733
msgid ""
"This has the same issue as the original example using class ``C``. That is, "
"two instances of class ``D`` that do not specify a value for ``x`` when "
"creating a class instance will share the same copy of ``x``.  Because "
"dataclasses just use normal Python class creation they also share this "
"behavior.  There is no general way for Data Classes to detect this "
"condition.  Instead, the :func:`@dataclass <dataclass>` decorator will raise"
" a :exc:`ValueError` if it detects an unhashable default parameter.  The "
"assumption is that if a value is unhashable, it is mutable.  This is a "
"partial solution, but it does protect against many common errors."
msgstr ""
"这具有与使用 ``C`` 类的原始示例相同的问题。 也就是说，当创建类实例的时候如果 ``D`` 类的两个实例没有为 ``x`` 指定值则将共享同一个 "
"``x`` 的副本。 因为数据类只是使用普通的 Python 类创建方式所以它们也会共享此行为。 数据类没有任何通用方式来检测这种情况。 "
"相反地，:func:`@dataclass <dataclass>` 装饰器在检测到不可哈希的默认形参时将会引发 :exc:`ValueError`。 "
"这一行为假定如果一个值是不可哈希的，则它就是可变对象。 这是一个部分解决方案，但它确实能防止许多常见错误。"

#: ../../library/dataclasses.rst:744
msgid ""
"Using default factory functions is a way to create new instances of mutable "
"types as default values for fields::"
msgstr "使用默认工厂函数是一种创建可变类型新实例的方法，并将其作为字段的默认值::"

#: ../../library/dataclasses.rst:753
msgid ""
"Instead of looking for and disallowing objects of type ``list``, ``dict``, "
"or ``set``, unhashable objects are now not allowed as default values.  "
"Unhashability is used to approximate mutability."
msgstr ""
"现在不再是寻找并阻止使用类型为 ``list``, ``dict`` 或 ``set`` 的对象，而是不允许使用不可哈希的对象作为默认值。 "
"就是将不可哈希性当作是不可变性的等价物。"

#: ../../library/dataclasses.rst:760
msgid "Descriptor-typed fields"
msgstr "描述器类型的字段"

#: ../../library/dataclasses.rst:762
msgid ""
"Fields that are assigned :ref:`descriptor objects <descriptors>` as their "
"default value have the following special behaviors:"
msgstr "当字段被 :ref:`描述器对象 <descriptors>` 赋值为默认值时会遵循以下行为:"

#: ../../library/dataclasses.rst:765
msgid ""
"The value for the field passed to the dataclass's :meth:`~object.__init__` "
"method is passed to the descriptor's :meth:`~object.__set__` method rather "
"than overwriting the descriptor object."
msgstr ""
"传递给数据类的 :meth:`~object.__init__` 方法的字段值会被传递给描述器的 :meth:`~object.__set__` "
"方法而不会覆盖描述器对象。"

#: ../../library/dataclasses.rst:769
msgid ""
"Similarly, when getting or setting the field, the descriptor's "
":meth:`~object.__get__` or :meth:`!__set__` method is called rather than "
"returning or overwriting the descriptor object."
msgstr ""
"类似地，当获取或设置字段值时，将调用描述器的 :meth:`~object.__get__` 或 :meth:`!__set__` "
"方法而不是返回或重写描述器对象。"

#: ../../library/dataclasses.rst:773
msgid ""
"To determine whether a field contains a default value, :func:`@dataclass "
"<dataclass>` will call the descriptor's :meth:`!__get__` method using its "
"class access form: ``descriptor.__get__(obj=None, type=cls)``.  If the "
"descriptor returns a value in this case, it will be used as the field's "
"default. On the other hand, if the descriptor raises :exc:`AttributeError` "
"in this situation, no default value will be provided for the field."
msgstr ""
"为了确定一个字段是否包含默认值，:func:`@dataclass <dataclass>` 会使用类访问形式调用描述器的 "
":meth:`!__get__` 方法: ``descriptor.__get__(obj=None, type=cls)``。 "
"如果在此情况下描述器返回了一个值，它将被用作字段的默认值。 另一方面，如果在此情况下描述器引发了 "
":exc:`AttributeError`，则不会为字段提供默认值。"

#: ../../library/dataclasses.rst:808
msgid ""
"Note that if a field is annotated with a descriptor type, but is not "
"assigned a descriptor object as its default value, the field will act like a"
" normal field."
msgstr "若一个字段的类型是描述器，但其默认值并不是描述器对象，那么该字段只会像普通的字段一样工作。"
