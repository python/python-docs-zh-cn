# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/2to3.rst:4
msgid "2to3 - Automated Python 2 to 3 code translation"
msgstr ""

#: ../../library/2to3.rst:8
msgid ""
"2to3 is a Python program that reads Python 2.x source code and applies a "
"series of *fixers* to transform it into valid Python 3.x code.  The standard"
" library contains a rich set of fixers that will handle almost all code.  "
"2to3 supporting library :mod:`lib2to3` is, however, a flexible and generic "
"library, so it is possible to write your own fixers for 2to3."
msgstr ""

#: ../../library/2to3.rst:18
msgid "Using 2to3"
msgstr ""

#: ../../library/2to3.rst:20
msgid ""
"2to3 will usually be installed with the Python interpreter as a script.  It "
"is also located in the :file:`Tools/scripts` directory of the Python root."
msgstr ""

#: ../../library/2to3.rst:23
msgid ""
"2to3's basic arguments are a list of files or directories to transform.  The"
" directories are recursively traversed for Python sources."
msgstr ""

#: ../../library/2to3.rst:26
msgid "Here is a sample Python 2.x source file, :file:`example.py`::"
msgstr ""

#: ../../library/2to3.rst:34
msgid "It can be converted to Python 3.x code via 2to3 on the command line:"
msgstr ""

#: ../../library/2to3.rst:40
msgid ""
"A diff against the original source file is printed.  2to3 can also write the"
" needed modifications right back to the source file.  (A backup of the "
"original file is made unless :option:`!-n` is also given.)  Writing the "
"changes back is enabled with the :option:`!-w` flag:"
msgstr ""

#: ../../library/2to3.rst:49
msgid "After transformation, :file:`example.py` looks like this::"
msgstr ""

#: ../../library/2to3.rst:57
msgid ""
"Comments and exact indentation are preserved throughout the translation "
"process."
msgstr ""

#: ../../library/2to3.rst:59
msgid ""
"By default, 2to3 runs a set of :ref:`predefined fixers <2to3-fixers>`.  The "
":option:`!-l` flag lists all available fixers.  An explicit set of fixers to"
" run can be given with :option:`!-f`.  Likewise the :option:`!-x` explicitly"
" disables a fixer.  The following example runs only the ``imports`` and "
"``has_key`` fixers:"
msgstr ""

#: ../../library/2to3.rst:68
msgid "This command runs every fixer except the ``apply`` fixer:"
msgstr ""

#: ../../library/2to3.rst:74
msgid ""
"Some fixers are *explicit*, meaning they aren't run by default and must be "
"listed on the command line to be run.  Here, in addition to the default "
"fixers, the ``idioms`` fixer is run:"
msgstr ""

#: ../../library/2to3.rst:82
msgid "Notice how passing ``all`` enables all default fixers."
msgstr ""

#: ../../library/2to3.rst:84
msgid ""
"Sometimes 2to3 will find a place in your source code that needs to be "
"changed, but 2to3 cannot fix automatically.  In this case, 2to3 will print a"
" warning beneath the diff for a file.  You should address the warning in "
"order to have compliant 3.x code."
msgstr ""

#: ../../library/2to3.rst:89
msgid ""
"2to3 can also refactor doctests.  To enable this mode, use the :option:`!-d`"
" flag.  Note that *only* doctests will be refactored.  This also doesn't "
"require the module to be valid Python.  For example, doctest like examples "
"in a reST document could also be refactored with this option."
msgstr ""

#: ../../library/2to3.rst:94
msgid ""
"The :option:`!-v` option enables output of more information on the "
"translation process."
msgstr ""

#: ../../library/2to3.rst:97
msgid ""
"Since some print statements can be parsed as function calls or statements, "
"2to3 cannot always read files containing the print function.  When 2to3 "
"detects the presence of the ``from __future__ import print_function`` "
"compiler directive, it modifies its internal grammar to interpret "
":func:`print` as a function.  This change can also be enabled manually with "
"the :option:`!-p` flag.  Use :option:`!-p` to run fixers on code that "
"already has had its print statements converted. Also :option:`!-e` can be "
"used to make :func:`exec` a function."
msgstr ""

#: ../../library/2to3.rst:105
msgid ""
"The :option:`!-o` or :option:`!--output-dir` option allows specification of "
"an alternate directory for processed output files to be written to.  The "
":option:`!-n` flag is required when using this as backup files do not make "
"sense when not overwriting the input files."
msgstr ""

#: ../../library/2to3.rst:110
msgid "The :option:`!-o` option was added."
msgstr ""

#: ../../library/2to3.rst:113
msgid ""
"The :option:`!-W` or :option:`!--write-unchanged-files` flag tells 2to3 to "
"always write output files even if no changes were required to the file.  "
"This is most useful with :option:`!-o` so that an entire Python source tree "
"is copied with translation from one directory to another. This option "
"implies the :option:`!-w` flag as it would not make sense otherwise."
msgstr ""

#: ../../library/2to3.rst:119
msgid "The :option:`!-W` flag was added."
msgstr ""

#: ../../library/2to3.rst:122
msgid ""
"The :option:`!--add-suffix` option specifies a string to append to all "
"output filenames.  The :option:`!-n` flag is required when specifying this "
"as backups are not necessary when writing to different filenames.  Example:"
msgstr ""

#: ../../library/2to3.rst:130
msgid "Will cause a converted file named ``example.py3`` to be written."
msgstr ""

#: ../../library/2to3.rst:132
msgid "The :option:`!--add-suffix` option was added."
msgstr ""

#: ../../library/2to3.rst:135
msgid "To translate an entire project from one directory tree to another use:"
msgstr ""

#: ../../library/2to3.rst:145
msgid "Fixers"
msgstr ""

#: ../../library/2to3.rst:147
msgid ""
"Each step of transforming code is encapsulated in a fixer.  The command "
"``2to3 -l`` lists them.  As :ref:`documented above <2to3-using>`, each can "
"be turned on and off individually.  They are described here in more detail."
msgstr ""

#: ../../library/2to3.rst:154
msgid ""
"Removes usage of :func:`apply`.  For example ``apply(function, *args, "
"**kwargs)`` is converted to ``function(*args, **kwargs)``."
msgstr ""

#: ../../library/2to3.rst:159
msgid ""
"Replaces deprecated :mod:`unittest` method names with the correct ones."
msgstr ""

#: ../../library/2to3.rst:162 ../../library/2to3.rst:351
msgid "From"
msgstr ""

#: ../../library/2to3.rst:162 ../../library/2to3.rst:351
msgid "To"
msgstr ""

#: ../../library/2to3.rst:164
msgid "``failUnlessEqual(a, b)``"
msgstr ""

#: ../../library/2to3.rst:164 ../../library/2to3.rst:166
msgid ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"
msgstr ""

#: ../../library/2to3.rst:166
msgid "``assertEquals(a, b)``"
msgstr ""

#: ../../library/2to3.rst:168
msgid "``failIfEqual(a, b)``"
msgstr ""

#: ../../library/2to3.rst:168 ../../library/2to3.rst:170
msgid ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"
msgstr ""

#: ../../library/2to3.rst:170
msgid "``assertNotEquals(a, b)``"
msgstr ""

#: ../../library/2to3.rst:172
msgid "``failUnless(a)``"
msgstr ""

#: ../../library/2to3.rst:172 ../../library/2to3.rst:174
msgid ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"
msgstr ""

#: ../../library/2to3.rst:174
msgid "``assert_(a)``"
msgstr ""

#: ../../library/2to3.rst:176
msgid "``failIf(a)``"
msgstr ""

#: ../../library/2to3.rst:176
msgid ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"
msgstr ""

#: ../../library/2to3.rst:178
msgid "``failUnlessRaises(exc, cal)``"
msgstr ""

#: ../../library/2to3.rst:178
msgid ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"
msgstr ""

#: ../../library/2to3.rst:180
msgid "``failUnlessAlmostEqual(a, b)``"
msgstr ""

#: ../../library/2to3.rst:180 ../../library/2to3.rst:182
msgid ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"
msgstr ""

#: ../../library/2to3.rst:182
msgid "``assertAlmostEquals(a, b)``"
msgstr ""

#: ../../library/2to3.rst:184
msgid "``failIfAlmostEqual(a, b)``"
msgstr ""

#: ../../library/2to3.rst:184 ../../library/2to3.rst:186
msgid ""
":meth:`assertNotAlmostEqual(a, b) <unittest.TestCase.assertNotAlmostEqual>`"
msgstr ""

#: ../../library/2to3.rst:186
msgid "``assertNotAlmostEquals(a, b)``"
msgstr ""

#: ../../library/2to3.rst:192
msgid "Converts :class:`basestring` to :class:`str`."
msgstr ""

#: ../../library/2to3.rst:196
msgid ""
"Converts :class:`buffer` to :class:`memoryview`.  This fixer is optional "
"because the :class:`memoryview` API is similar but not exactly the same as "
"that of :class:`buffer`."
msgstr ""

#: ../../library/2to3.rst:202
msgid ""
"Fixes dictionary iteration methods.  :meth:`dict.iteritems` is converted to "
":meth:`dict.items`, :meth:`dict.iterkeys` to :meth:`dict.keys`, and "
":meth:`dict.itervalues` to :meth:`dict.values`.  Similarly, "
":meth:`dict.viewitems`, :meth:`dict.viewkeys` and :meth:`dict.viewvalues` "
"are converted respectively to :meth:`dict.items`, :meth:`dict.keys` and "
":meth:`dict.values`.  It also wraps existing usages of :meth:`dict.items`, "
":meth:`dict.keys`, and :meth:`dict.values` in a call to :class:`list`."
msgstr ""

#: ../../library/2to3.rst:212
msgid "Converts ``except X, T`` to ``except X as T``."
msgstr ""

#: ../../library/2to3.rst:216
msgid "Converts the ``exec`` statement to the :func:`exec` function."
msgstr ""

#: ../../library/2to3.rst:220
msgid ""
"Removes usage of :func:`execfile`.  The argument to :func:`execfile` is "
"wrapped in calls to :func:`open`, :func:`compile`, and :func:`exec`."
msgstr ""

#: ../../library/2to3.rst:225
msgid ""
"Changes assignment of :attr:`sys.exitfunc` to use of the :mod:`atexit` "
"module."
msgstr ""

#: ../../library/2to3.rst:230
msgid "Wraps :func:`filter` usage in a :class:`list` call."
msgstr ""

#: ../../library/2to3.rst:234
msgid ""
"Fixes function attributes that have been renamed.  For example, "
"``my_function.func_closure`` is converted to ``my_function.__closure__``."
msgstr ""

#: ../../library/2to3.rst:239
msgid "Removes ``from __future__ import new_feature`` statements."
msgstr ""

#: ../../library/2to3.rst:243
msgid "Renames :func:`os.getcwdu` to :func:`os.getcwd`."
msgstr ""

#: ../../library/2to3.rst:247
msgid "Changes ``dict.has_key(key)`` to ``key in dict``."
msgstr ""

#: ../../library/2to3.rst:251
msgid ""
"This optional fixer performs several transformations that make Python code "
"more idiomatic.  Type comparisons like ``type(x) is SomeClass`` and "
"``type(x) == SomeClass`` are converted to ``isinstance(x, SomeClass)``. "
"``while 1`` becomes ``while True``.  This fixer also tries to make use of "
":func:`sorted` in appropriate places.  For example, this block ::"
msgstr ""

#: ../../library/2to3.rst:260
msgid "is changed to ::"
msgstr ""

#: ../../library/2to3.rst:266
msgid "Detects sibling imports and converts them to relative imports."
msgstr ""

#: ../../library/2to3.rst:270
msgid "Handles module renames in the standard library."
msgstr ""

#: ../../library/2to3.rst:274
msgid ""
"Handles other modules renames in the standard library.  It is separate from "
"the :2to3fixer:`imports` fixer only because of technical limitations."
msgstr ""

#: ../../library/2to3.rst:279
msgid "Converts ``input(prompt)`` to ``eval(input(prompt))``."
msgstr ""

#: ../../library/2to3.rst:283
msgid "Converts :func:`intern` to :func:`sys.intern`."
msgstr ""

#: ../../library/2to3.rst:287
msgid ""
"Fixes duplicate types in the second argument of :func:`isinstance`.  For "
"example, ``isinstance(x, (int, int))`` is converted to ``isinstance(x, "
"int)`` and ``isinstance(x, (int, float, int))`` is converted to "
"``isinstance(x, (int, float))``."
msgstr ""

#: ../../library/2to3.rst:294
msgid ""
"Removes imports of :func:`itertools.ifilter`, :func:`itertools.izip`, and "
":func:`itertools.imap`.  Imports of :func:`itertools.ifilterfalse` are also "
"changed to :func:`itertools.filterfalse`."
msgstr ""

#: ../../library/2to3.rst:300
msgid ""
"Changes usage of :func:`itertools.ifilter`, :func:`itertools.izip`, and "
":func:`itertools.imap` to their built-in equivalents. "
":func:`itertools.ifilterfalse` is changed to :func:`itertools.filterfalse`."
msgstr ""

#: ../../library/2to3.rst:306
msgid "Renames :class:`long` to :class:`int`."
msgstr ""

#: ../../library/2to3.rst:310
msgid ""
"Wraps :func:`map` in a :class:`list` call.  It also changes ``map(None, x)``"
" to ``list(x)``.  Using ``from future_builtins import map`` disables this "
"fixer."
msgstr ""

#: ../../library/2to3.rst:316
msgid ""
"Converts the old metaclass syntax (``__metaclass__ = Meta`` in the class "
"body) to the new (``class X(metaclass=Meta)``)."
msgstr ""

#: ../../library/2to3.rst:321
msgid ""
"Fixes old method attribute names.  For example, ``meth.im_func`` is "
"converted to ``meth.__func__``."
msgstr ""

#: ../../library/2to3.rst:326
msgid "Converts the old not-equal syntax, ``<>``, to ``!=``."
msgstr ""

#: ../../library/2to3.rst:330
msgid ""
"Converts the use of iterator's :meth:`~iterator.next` methods to the "
":func:`next` function.  It also renames :meth:`next` methods to "
":meth:`~iterator.__next__`."
msgstr ""

#: ../../library/2to3.rst:336
msgid ""
"Renames definitions of methods called :meth:`__nonzero__` to "
":meth:`~object.__bool__`."
msgstr ""

#: ../../library/2to3.rst:341
msgid "Converts octal literals into the new syntax."
msgstr ""

#: ../../library/2to3.rst:345
msgid ""
"Converts calls to various functions in the :mod:`operator` module to other, "
"but equivalent, function calls.  When needed, the appropriate ``import`` "
"statements are added, e.g. ``import collections.abc``.  The following "
"mapping are made:"
msgstr ""

#: ../../library/2to3.rst:353
msgid "``operator.isCallable(obj)``"
msgstr ""

#: ../../library/2to3.rst:353
msgid "``callable(obj)``"
msgstr ""

#: ../../library/2to3.rst:354
msgid "``operator.sequenceIncludes(obj)``"
msgstr ""

#: ../../library/2to3.rst:354
msgid "``operator.contains(obj)``"
msgstr ""

#: ../../library/2to3.rst:355
msgid "``operator.isSequenceType(obj)``"
msgstr ""

#: ../../library/2to3.rst:355
msgid "``isinstance(obj, collections.abc.Sequence)``"
msgstr ""

#: ../../library/2to3.rst:356
msgid "``operator.isMappingType(obj)``"
msgstr ""

#: ../../library/2to3.rst:356
msgid "``isinstance(obj, collections.abc.Mapping)``"
msgstr ""

#: ../../library/2to3.rst:357
msgid "``operator.isNumberType(obj)``"
msgstr ""

#: ../../library/2to3.rst:357
msgid "``isinstance(obj, numbers.Number)``"
msgstr ""

#: ../../library/2to3.rst:358
msgid "``operator.repeat(obj, n)``"
msgstr ""

#: ../../library/2to3.rst:358
msgid "``operator.mul(obj, n)``"
msgstr ""

#: ../../library/2to3.rst:359
msgid "``operator.irepeat(obj, n)``"
msgstr ""

#: ../../library/2to3.rst:359
msgid "``operator.imul(obj, n)``"
msgstr ""

#: ../../library/2to3.rst:364
msgid ""
"Add extra parenthesis where they are required in list comprehensions.  For "
"example, ``[x for x in 1, 2]`` becomes ``[x for x in (1, 2)]``."
msgstr ""

#: ../../library/2to3.rst:369
msgid "Converts the ``print`` statement to the :func:`print` function."
msgstr ""

#: ../../library/2to3.rst:373
msgid ""
"Converts ``raise E, V`` to ``raise E(V)``, and ``raise E, V, T`` to ``raise "
"E(V).with_traceback(T)``.  If ``E`` is a tuple, the translation will be "
"incorrect because substituting tuples for exceptions has been removed in "
"3.0."
msgstr ""

#: ../../library/2to3.rst:379
msgid "Converts :func:`raw_input` to :func:`input`."
msgstr ""

#: ../../library/2to3.rst:383
msgid "Handles the move of :func:`reduce` to :func:`functools.reduce`."
msgstr ""

#: ../../library/2to3.rst:387
msgid "Converts :func:`reload` to :func:`importlib.reload`."
msgstr ""

#: ../../library/2to3.rst:391
msgid "Changes :data:`sys.maxint` to :data:`sys.maxsize`."
msgstr ""

#: ../../library/2to3.rst:395
msgid "Replaces backtick repr with the :func:`repr` function."
msgstr ""

#: ../../library/2to3.rst:399
msgid ""
"Replaces use of the :class:`set` constructor with set literals.  This fixer "
"is optional."
msgstr ""

#: ../../library/2to3.rst:404
msgid "Renames :exc:`StandardError` to :exc:`Exception`."
msgstr ""

#: ../../library/2to3.rst:408
msgid ""
"Changes the deprecated :data:`sys.exc_value`, :data:`sys.exc_type`, "
":data:`sys.exc_traceback` to use :func:`sys.exc_info`."
msgstr ""

#: ../../library/2to3.rst:413
msgid "Fixes the API change in generator's :meth:`throw` method."
msgstr ""

#: ../../library/2to3.rst:417
msgid ""
"Removes implicit tuple parameter unpacking.  This fixer inserts temporary "
"variables."
msgstr ""

#: ../../library/2to3.rst:422
msgid ""
"Fixes code broken from the removal of some members in the :mod:`types` "
"module."
msgstr ""

#: ../../library/2to3.rst:427
msgid "Renames :class:`unicode` to :class:`str`."
msgstr ""

#: ../../library/2to3.rst:431
msgid ""
"Handles the rename of :mod:`urllib` and :mod:`urllib2` to the :mod:`urllib` "
"package."
msgstr ""

#: ../../library/2to3.rst:436
msgid ""
"Removes excess whitespace from comma separated items.  This fixer is "
"optional."
msgstr ""

#: ../../library/2to3.rst:441
msgid ""
"Renames :func:`xrange` to :func:`range` and wraps existing :func:`range` "
"calls with :class:`list`."
msgstr ""

#: ../../library/2to3.rst:446
msgid "Changes ``for x in file.xreadlines()`` to ``for x in file``."
msgstr ""

#: ../../library/2to3.rst:450
msgid ""
"Wraps :func:`zip` usage in a :class:`list` call.  This is disabled when "
"``from future_builtins import zip`` appears."
msgstr ""

#: ../../library/2to3.rst:455
msgid ":mod:`lib2to3` - 2to3's library"
msgstr ""

#: ../../library/2to3.rst:464
msgid "**Source code:** :source:`Lib/lib2to3/`"
msgstr ""

#: ../../library/2to3.rst:468
msgid ""
"Python 3.9 will switch to a PEG parser (see :pep:`617`), and Python 3.10 may"
" include new language syntax that is not parsable by lib2to3's LL(1) parser."
" The ``lib2to3`` module may be removed from the standard library in a future"
" Python version. Consider third-party alternatives such as `LibCST`_ or "
"`parso`_."
msgstr ""

#: ../../library/2to3.rst:477
msgid ""
"The :mod:`lib2to3` API should be considered unstable and may change "
"drastically in the future."
msgstr ""
