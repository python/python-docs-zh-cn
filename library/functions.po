# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/functions.rst:5 ../../library/functions.rst:11
msgid "Built-in Functions"
msgstr ""

#: ../../library/functions.rst:7
msgid ""
"The Python interpreter has a number of functions and types built into it "
"that are always available.  They are listed here in alphabetical order."
msgstr ""

#: ../../library/functions.rst:13
msgid ":func:`abs`"
msgstr ""

#: ../../library/functions.rst:13
msgid ":func:`delattr`"
msgstr ""

#: ../../library/functions.rst:13
msgid ":func:`hash`"
msgstr ""

#: ../../library/functions.rst:13
msgid "|func-memoryview|_"
msgstr ""

#: ../../library/functions.rst:13
msgid "|func-set|_"
msgstr ""

#: ../../library/functions.rst:14
msgid ":func:`all`"
msgstr ""

#: ../../library/functions.rst:14
msgid "|func-dict|_"
msgstr ""

#: ../../library/functions.rst:14
msgid ":func:`help`"
msgstr ""

#: ../../library/functions.rst:14
msgid ":func:`min`"
msgstr ""

#: ../../library/functions.rst:14
msgid ":func:`setattr`"
msgstr ""

#: ../../library/functions.rst:15
msgid ":func:`any`"
msgstr ""

#: ../../library/functions.rst:15
msgid ":func:`dir`"
msgstr ""

#: ../../library/functions.rst:15
msgid ":func:`hex`"
msgstr ""

#: ../../library/functions.rst:15
msgid ":func:`next`"
msgstr ""

#: ../../library/functions.rst:15
msgid ":func:`slice`"
msgstr ""

#: ../../library/functions.rst:16
msgid ":func:`ascii`"
msgstr ""

#: ../../library/functions.rst:16
msgid ":func:`divmod`"
msgstr ""

#: ../../library/functions.rst:16
msgid ":func:`id`"
msgstr ""

#: ../../library/functions.rst:16
msgid ":func:`object`"
msgstr ""

#: ../../library/functions.rst:16
msgid ":func:`sorted`"
msgstr ""

#: ../../library/functions.rst:17
msgid ":func:`bin`"
msgstr ""

#: ../../library/functions.rst:17
msgid ":func:`enumerate`"
msgstr ""

#: ../../library/functions.rst:17
msgid ":func:`input`"
msgstr ""

#: ../../library/functions.rst:17
msgid ":func:`oct`"
msgstr ""

#: ../../library/functions.rst:17
msgid ":func:`staticmethod`"
msgstr ""

#: ../../library/functions.rst:18
msgid ":func:`bool`"
msgstr ""

#: ../../library/functions.rst:18
msgid ":func:`eval`"
msgstr ""

#: ../../library/functions.rst:18
msgid ":func:`int`"
msgstr ""

#: ../../library/functions.rst:18
msgid ":func:`open`"
msgstr ""

#: ../../library/functions.rst:18
msgid "|func-str|_"
msgstr ""

#: ../../library/functions.rst:19
msgid ":func:`breakpoint`"
msgstr ""

#: ../../library/functions.rst:19
msgid ":func:`exec`"
msgstr ""

#: ../../library/functions.rst:19
msgid ":func:`isinstance`"
msgstr ""

#: ../../library/functions.rst:19
msgid ":func:`ord`"
msgstr ""

#: ../../library/functions.rst:19
msgid ":func:`sum`"
msgstr ""

#: ../../library/functions.rst:20
msgid "|func-bytearray|_"
msgstr ""

#: ../../library/functions.rst:20
msgid ":func:`filter`"
msgstr ""

#: ../../library/functions.rst:20
msgid ":func:`issubclass`"
msgstr ""

#: ../../library/functions.rst:20
msgid ":func:`pow`"
msgstr ""

#: ../../library/functions.rst:20
msgid ":func:`super`"
msgstr ""

#: ../../library/functions.rst:21
msgid "|func-bytes|_"
msgstr ""

#: ../../library/functions.rst:21
msgid ":func:`float`"
msgstr ""

#: ../../library/functions.rst:21
msgid ":func:`iter`"
msgstr ""

#: ../../library/functions.rst:21
msgid ":func:`print`"
msgstr ""

#: ../../library/functions.rst:21
msgid "|func-tuple|_"
msgstr ""

#: ../../library/functions.rst:22
msgid ":func:`callable`"
msgstr ""

#: ../../library/functions.rst:22
msgid ":func:`format`"
msgstr ""

#: ../../library/functions.rst:22
msgid ":func:`len`"
msgstr ""

#: ../../library/functions.rst:22
msgid ":func:`property`"
msgstr ""

#: ../../library/functions.rst:22
msgid ":func:`type`"
msgstr ""

#: ../../library/functions.rst:23
msgid ":func:`chr`"
msgstr ""

#: ../../library/functions.rst:23
msgid "|func-frozenset|_"
msgstr ""

#: ../../library/functions.rst:23
msgid "|func-list|_"
msgstr ""

#: ../../library/functions.rst:23
msgid "|func-range|_"
msgstr ""

#: ../../library/functions.rst:23
msgid ":func:`vars`"
msgstr ""

#: ../../library/functions.rst:24
msgid ":func:`classmethod`"
msgstr ""

#: ../../library/functions.rst:24
msgid ":func:`getattr`"
msgstr ""

#: ../../library/functions.rst:24
msgid ":func:`locals`"
msgstr ""

#: ../../library/functions.rst:24
msgid ":func:`repr`"
msgstr ""

#: ../../library/functions.rst:24
msgid ":func:`zip`"
msgstr ""

#: ../../library/functions.rst:25
msgid ":func:`compile`"
msgstr ""

#: ../../library/functions.rst:25
msgid ":func:`globals`"
msgstr ""

#: ../../library/functions.rst:25
msgid ":func:`map`"
msgstr ""

#: ../../library/functions.rst:25
msgid ":func:`reversed`"
msgstr ""

#: ../../library/functions.rst:25
msgid ":func:`__import__`"
msgstr ""

#: ../../library/functions.rst:26
msgid ":func:`complex`"
msgstr ""

#: ../../library/functions.rst:26
msgid ":func:`hasattr`"
msgstr ""

#: ../../library/functions.rst:26
msgid ":func:`max`"
msgstr ""

#: ../../library/functions.rst:26
msgid ":func:`round`"
msgstr ""

#: ../../library/functions.rst:45
msgid ""
"Return the absolute value of a number.  The argument may be an integer, a "
"floating point number, or an object implementing :meth:`__abs__`. If the "
"argument is a complex number, its magnitude is returned."
msgstr ""

#: ../../library/functions.rst:52
msgid ""
"Return ``True`` if all elements of the *iterable* are true (or if the "
"iterable is empty).  Equivalent to::"
msgstr ""

#: ../../library/functions.rst:64
msgid ""
"Return ``True`` if any element of the *iterable* is true.  If the iterable "
"is empty, return ``False``.  Equivalent to::"
msgstr ""

#: ../../library/functions.rst:76
msgid ""
"As :func:`repr`, return a string containing a printable representation of an"
" object, but escape the non-ASCII characters in the string returned by "
":func:`repr` using ``\\x``, ``\\u`` or ``\\U`` escapes.  This generates a "
"string similar to that returned by :func:`repr` in Python 2."
msgstr ""

#: ../../library/functions.rst:84
msgid ""
"Convert an integer number to a binary string prefixed with \"0b\". The "
"result is a valid Python expression. If *x* is not a Python :class:`int` "
"object, it has to define an :meth:`__index__` method that returns an "
"integer. Some examples:"
msgstr ""

#: ../../library/functions.rst:94
msgid ""
"If prefix \"0b\" is desired or not, you can use either of the following "
"ways."
msgstr ""

#: ../../library/functions.rst:101 ../../library/functions.rst:757
#: ../../library/functions.rst:1053
msgid "See also :func:`format` for more information."
msgstr ""

#: ../../library/functions.rst:106
msgid ""
"Return a Boolean value, i.e. one of ``True`` or ``False``.  *x* is converted"
" using the standard :ref:`truth testing procedure <truth>`.  If *x* is false"
" or omitted, this returns ``False``; otherwise it returns ``True``.  The "
":class:`bool` class is a subclass of :class:`int` (see :ref:`typesnumeric`)."
" It cannot be subclassed further.  Its only instances are ``False`` and "
"``True`` (see :ref:`bltin-boolean-values`)."
msgstr ""

#: ../../library/functions.rst:115 ../../library/functions.rst:625
#: ../../library/functions.rst:841
msgid "*x* is now a positional-only parameter."
msgstr ""

#: ../../library/functions.rst:120
msgid ""
"This function drops you into the debugger at the call site.  Specifically, "
"it calls :func:`sys.breakpointhook`, passing ``args`` and ``kws`` straight "
"through.  By default, ``sys.breakpointhook()`` calls :func:`pdb.set_trace()`"
" expecting no arguments.  In this case, it is purely a convenience function "
"so you don't have to explicitly import :mod:`pdb` or type as much code to "
"enter the debugger.  However, :func:`sys.breakpointhook` can be set to some "
"other function and :func:`breakpoint` will automatically call that, allowing"
" you to drop into the debugger of choice."
msgstr ""

#: ../../library/functions.rst:130
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.breakpoint`` with "
"argument ``breakpointhook``."
msgstr ""

#: ../../library/functions.rst:138
msgid ""
"Return a new array of bytes.  The :class:`bytearray` class is a mutable "
"sequence of integers in the range 0 <= x < 256.  It has most of the usual "
"methods of mutable sequences, described in :ref:`typesseq-mutable`, as well "
"as most methods that the :class:`bytes` type has, see :ref:`bytes-methods`."
msgstr ""

#: ../../library/functions.rst:143
msgid ""
"The optional *source* parameter can be used to initialize the array in a few"
" different ways:"
msgstr ""

#: ../../library/functions.rst:146
msgid ""
"If it is a *string*, you must also give the *encoding* (and optionally, "
"*errors*) parameters; :func:`bytearray` then converts the string to bytes "
"using :meth:`str.encode`."
msgstr ""

#: ../../library/functions.rst:150
msgid ""
"If it is an *integer*, the array will have that size and will be initialized"
" with null bytes."
msgstr ""

#: ../../library/functions.rst:153
msgid ""
"If it is an object conforming to the :ref:`buffer interface "
"<bufferobjects>`, a read-only buffer of the object will be used to "
"initialize the bytes array."
msgstr ""

#: ../../library/functions.rst:156
msgid ""
"If it is an *iterable*, it must be an iterable of integers in the range ``0 "
"<= x < 256``, which are used as the initial contents of the array."
msgstr ""

#: ../../library/functions.rst:159
msgid "Without an argument, an array of size 0 is created."
msgstr ""

#: ../../library/functions.rst:161
msgid "See also :ref:`binaryseq` and :ref:`typebytearray`."
msgstr ""

#: ../../library/functions.rst:168
msgid ""
"Return a new \"bytes\" object, which is an immutable sequence of integers in"
" the range ``0 <= x < 256``.  :class:`bytes` is an immutable version of "
":class:`bytearray` -- it has the same non-mutating methods and the same "
"indexing and slicing behavior."
msgstr ""

#: ../../library/functions.rst:173
msgid ""
"Accordingly, constructor arguments are interpreted as for :func:`bytearray`."
msgstr ""

#: ../../library/functions.rst:175
msgid "Bytes objects can also be created with literals, see :ref:`strings`."
msgstr ""

#: ../../library/functions.rst:177
msgid "See also :ref:`binaryseq`, :ref:`typebytes`, and :ref:`bytes-methods`."
msgstr ""

#: ../../library/functions.rst:182
msgid ""
"Return :const:`True` if the *object* argument appears callable, "
":const:`False` if not.  If this returns ``True``, it is still possible that "
"a call fails, but if it is ``False``, calling *object* will never succeed. "
"Note that classes are callable (calling a class returns a new instance); "
"instances are callable if their class has a :meth:`__call__` method."
msgstr ""

#: ../../library/functions.rst:188
msgid ""
"This function was first removed in Python 3.0 and then brought back in "
"Python 3.2."
msgstr ""

#: ../../library/functions.rst:195
msgid ""
"Return the string representing a character whose Unicode code point is the "
"integer *i*.  For example, ``chr(97)`` returns the string ``'a'``, while "
"``chr(8364)`` returns the string ``'€'``. This is the inverse of "
":func:`ord`."
msgstr ""

#: ../../library/functions.rst:199
msgid ""
"The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in "
"base 16).  :exc:`ValueError` will be raised if *i* is outside that range."
msgstr ""

#: ../../library/functions.rst:205
msgid "Transform a method into a class method."
msgstr ""

#: ../../library/functions.rst:207
msgid ""
"A class method receives the class as implicit first argument, just like an "
"instance method receives the instance. To declare a class method, use this "
"idiom::"
msgstr ""

#: ../../library/functions.rst:215
msgid ""
"The ``@classmethod`` form is a function :term:`decorator` -- see "
":ref:`function` for details."
msgstr ""

#: ../../library/functions.rst:218
msgid ""
"A class method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``).  The instance is ignored except for its "
"class. If a class method is called for a derived class, the derived class "
"object is passed as the implied first argument."
msgstr ""

#: ../../library/functions.rst:223
msgid ""
"Class methods are different than C++ or Java static methods. If you want "
"those, see :func:`staticmethod` in this section. For more information on "
"class methods, see :ref:`types`."
msgstr ""

#: ../../library/functions.rst:227
msgid ""
"Class methods can now wrap other :term:`descriptors <descriptor>` such as "
":func:`property`."
msgstr ""

#: ../../library/functions.rst:233
msgid ""
"Compile the *source* into a code or AST object.  Code objects can be "
"executed by :func:`exec` or :func:`eval`.  *source* can either be a normal "
"string, a byte string, or an AST object.  Refer to the :mod:`ast` module "
"documentation for information on how to work with AST objects."
msgstr ""

#: ../../library/functions.rst:238
msgid ""
"The *filename* argument should give the file from which the code was read; "
"pass some recognizable value if it wasn't read from a file (``'<string>'`` "
"is commonly used)."
msgstr ""

#: ../../library/functions.rst:242
msgid ""
"The *mode* argument specifies what kind of code must be compiled; it can be "
"``'exec'`` if *source* consists of a sequence of statements, ``'eval'`` if "
"it consists of a single expression, or ``'single'`` if it consists of a "
"single interactive statement (in the latter case, expression statements that"
" evaluate to something other than ``None`` will be printed)."
msgstr ""

#: ../../library/functions.rst:248
msgid ""
"The optional arguments *flags* and *dont_inherit* control which "
":ref:`compiler options <ast-compiler-flags>` should be activated and which "
":ref:`future features <future>` should be allowed. If neither is present (or"
" both are zero) the code is compiled with the same flags that affect the "
"code that is calling :func:`compile`. If the *flags* argument is given and "
"*dont_inherit* is not (or is zero) then the compiler options and the future "
"statements specified by the *flags* argument are used in addition to those "
"that would be used anyway. If *dont_inherit* is a non-zero integer then the "
"*flags* argument is it -- the flags (future features and compiler options) "
"in the surrounding code are ignored."
msgstr ""

#: ../../library/functions.rst:259
msgid ""
"Compiler options and future statements are specified by bits which can be "
"bitwise ORed together to specify multiple options. The bitfield required to "
"specify a given future feature can be found as the "
":attr:`~__future__._Feature.compiler_flag` attribute on the "
":class:`~__future__._Feature` instance in the :mod:`__future__` module. "
":ref:`Compiler flags <ast-compiler-flags>` can be found in :mod:`ast` "
"module, with ``PyCF_`` prefix."
msgstr ""

#: ../../library/functions.rst:267
msgid ""
"The argument *optimize* specifies the optimization level of the compiler; "
"the default value of ``-1`` selects the optimization level of the "
"interpreter as given by :option:`-O` options.  Explicit levels are ``0`` (no"
" optimization; ``__debug__`` is true), ``1`` (asserts are removed, "
"``__debug__`` is false) or ``2`` (docstrings are removed too)."
msgstr ""

#: ../../library/functions.rst:273
msgid ""
"This function raises :exc:`SyntaxError` if the compiled source is invalid, "
"and :exc:`ValueError` if the source contains null bytes."
msgstr ""

#: ../../library/functions.rst:276
msgid ""
"If you want to parse Python code into its AST representation, see "
":func:`ast.parse`."
msgstr ""

#: ../../library/functions.rst:279
msgid ""
"Raises an :ref:`auditing event <auditing>` ``compile`` with arguments "
"``source``, ``filename``."
msgstr ""

#: ../../library/functions.rst:281
msgid ""
"Raises an :ref:`auditing event <auditing>` ``compile`` with arguments "
"``source`` and ``filename``. This event may also be raised by implicit "
"compilation."
msgstr ""

#: ../../library/functions.rst:287
msgid ""
"When compiling a string with multi-line code in ``'single'`` or ``'eval'`` "
"mode, input must be terminated by at least one newline character.  This is "
"to facilitate detection of incomplete and complete statements in the "
":mod:`code` module."
msgstr ""

#: ../../library/functions.rst:294
msgid ""
"It is possible to crash the Python interpreter with a sufficiently "
"large/complex string when compiling to an AST object due to stack depth "
"limitations in Python's AST compiler."
msgstr ""

#: ../../library/functions.rst:298
msgid ""
"Allowed use of Windows and Mac newlines.  Also input in ``'exec'`` mode does"
" not have to end in a newline anymore.  Added the *optimize* parameter."
msgstr ""

#: ../../library/functions.rst:302
msgid ""
"Previously, :exc:`TypeError` was raised when null bytes were encountered in "
"*source*."
msgstr ""

#: ../../library/functions.rst:306
msgid ""
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` can now be passed in flags to enable "
"support for top-level ``await``, ``async for``, and ``async with``."
msgstr ""

#: ../../library/functions.rst:313
msgid ""
"Return a complex number with the value *real* + *imag*\\*1j or convert a "
"string or number to a complex number.  If the first parameter is a string, "
"it will be interpreted as a complex number and the function must be called "
"without a second parameter.  The second parameter can never be a string. "
"Each argument may be any numeric type (including complex).  If *imag* is "
"omitted, it defaults to zero and the constructor serves as a numeric "
"conversion like :class:`int` and :class:`float`.  If both arguments are "
"omitted, returns ``0j``."
msgstr ""

#: ../../library/functions.rst:322
msgid ""
"For a general Python object ``x``, ``complex(x)`` delegates to "
"``x.__complex__()``.  If ``__complex__()`` is not defined then it falls back"
" to :meth:`__float__`.  If ``__float__()`` is not defined then it falls back"
" to :meth:`__index__`."
msgstr ""

#: ../../library/functions.rst:329
msgid ""
"When converting from a string, the string must not contain whitespace around"
" the central ``+`` or ``-`` operator.  For example, ``complex('1+2j')`` is "
"fine, but ``complex('1 + 2j')`` raises :exc:`ValueError`."
msgstr ""

#: ../../library/functions.rst:334
msgid "The complex type is described in :ref:`typesnumeric`."
msgstr ""

#: ../../library/functions.rst:336 ../../library/functions.rst:622
#: ../../library/functions.rst:838
msgid "Grouping digits with underscores as in code literals is allowed."
msgstr ""

#: ../../library/functions.rst:339
msgid ""
"Falls back to :meth:`__index__` if :meth:`__complex__` and :meth:`__float__`"
" are not defined."
msgstr ""

#: ../../library/functions.rst:346
msgid ""
"This is a relative of :func:`setattr`.  The arguments are an object and a "
"string.  The string must be the name of one of the object's attributes.  The"
" function deletes the named attribute, provided the object allows it.  For "
"example, ``delattr(x, 'foobar')`` is equivalent to ``del x.foobar``."
msgstr ""

#: ../../library/functions.rst:358
msgid ""
"Create a new dictionary.  The :class:`dict` object is the dictionary class. "
"See :class:`dict` and :ref:`typesmapping` for documentation about this "
"class."
msgstr ""

#: ../../library/functions.rst:361
msgid ""
"For other containers see the built-in :class:`list`, :class:`set`, and "
":class:`tuple` classes, as well as the :mod:`collections` module."
msgstr ""

#: ../../library/functions.rst:367
msgid ""
"Without arguments, return the list of names in the current local scope.  "
"With an argument, attempt to return a list of valid attributes for that "
"object."
msgstr ""

#: ../../library/functions.rst:370
msgid ""
"If the object has a method named :meth:`__dir__`, this method will be called"
" and must return the list of attributes. This allows objects that implement "
"a custom :func:`__getattr__` or :func:`__getattribute__` function to "
"customize the way :func:`dir` reports their attributes."
msgstr ""

#: ../../library/functions.rst:375
msgid ""
"If the object does not provide :meth:`__dir__`, the function tries its best "
"to gather information from the object's :attr:`~object.__dict__` attribute, "
"if defined, and from its type object.  The resulting list is not necessarily"
" complete, and may be inaccurate when the object has a custom "
":func:`__getattr__`."
msgstr ""

#: ../../library/functions.rst:380
msgid ""
"The default :func:`dir` mechanism behaves differently with different types "
"of objects, as it attempts to produce the most relevant, rather than "
"complete, information:"
msgstr ""

#: ../../library/functions.rst:384
msgid ""
"If the object is a module object, the list contains the names of the "
"module's attributes."
msgstr ""

#: ../../library/functions.rst:387
msgid ""
"If the object is a type or class object, the list contains the names of its "
"attributes, and recursively of the attributes of its bases."
msgstr ""

#: ../../library/functions.rst:390
msgid ""
"Otherwise, the list contains the object's attributes' names, the names of "
"its class's attributes, and recursively of the attributes of its class's "
"base classes."
msgstr ""

#: ../../library/functions.rst:394
msgid "The resulting list is sorted alphabetically.  For example:"
msgstr ""

#: ../../library/functions.rst:413
msgid ""
"Because :func:`dir` is supplied primarily as a convenience for use at an "
"interactive prompt, it tries to supply an interesting set of names more than"
" it tries to supply a rigorously or consistently defined set of names, and "
"its detailed behavior may change across releases.  For example, metaclass "
"attributes are not in the result list when the argument is a class."
msgstr ""

#: ../../library/functions.rst:423
msgid ""
"Take two (non complex) numbers as arguments and return a pair of numbers "
"consisting of their quotient and remainder when using integer division.  "
"With mixed operand types, the rules for binary arithmetic operators apply.  "
"For integers, the result is the same as ``(a // b, a % b)``. For floating "
"point numbers the result is ``(q, a % b)``, where *q* is usually "
"``math.floor(a / b)`` but may be 1 less than that.  In any case ``q * b + a "
"% b`` is very close to *a*, if ``a % b`` is non-zero it has the same sign as"
" *b*, and ``0 <= abs(a % b) < abs(b)``."
msgstr ""

#: ../../library/functions.rst:435
msgid ""
"Return an enumerate object. *iterable* must be a sequence, an "
":term:`iterator`, or some other object which supports iteration. The "
":meth:`~iterator.__next__` method of the iterator returned by "
":func:`enumerate` returns a tuple containing a count (from *start* which "
"defaults to 0) and the values obtained from iterating over *iterable*."
msgstr ""

#: ../../library/functions.rst:447
msgid "Equivalent to::"
msgstr ""

#: ../../library/functions.rst:458
msgid ""
"The arguments are a string and optional globals and locals.  If provided, "
"*globals* must be a dictionary.  If provided, *locals* can be any mapping "
"object."
msgstr ""

#: ../../library/functions.rst:462
msgid ""
"The *expression* argument is parsed and evaluated as a Python expression "
"(technically speaking, a condition list) using the *globals* and *locals* "
"dictionaries as global and local namespace.  If the *globals* dictionary is "
"present and does not contain a value for the key ``__builtins__``, a "
"reference to the dictionary of the built-in module :mod:`builtins` is "
"inserted under that key before *expression* is parsed.  This means that "
"*expression* normally has full access to the standard :mod:`builtins` module"
" and restricted environments are propagated.  If the *locals* dictionary is "
"omitted it defaults to the *globals* dictionary.  If both dictionaries are "
"omitted, the expression is executed with the *globals* and *locals* in the "
"environment where :func:`eval` is called.  Note, *eval()* does not have "
"access to the :term:`nested scopes <nested scope>` (non-locals) in the "
"enclosing environment."
msgstr ""

#: ../../library/functions.rst:476
msgid ""
"The return value is the result of the evaluated expression. Syntax errors "
"are reported as exceptions.  Example:"
msgstr ""

#: ../../library/functions.rst:483
msgid ""
"This function can also be used to execute arbitrary code objects (such as "
"those created by :func:`compile`).  In this case pass a code object instead "
"of a string.  If the code object has been compiled with ``'exec'`` as the "
"*mode* argument, :func:`eval`\\'s return value will be ``None``."
msgstr ""

#: ../../library/functions.rst:488
msgid ""
"Hints: dynamic execution of statements is supported by the :func:`exec` "
"function.  The :func:`globals` and :func:`locals` functions returns the "
"current global and local dictionary, respectively, which may be useful to "
"pass around for use by :func:`eval` or :func:`exec`."
msgstr ""

#: ../../library/functions.rst:493
msgid ""
"See :func:`ast.literal_eval` for a function that can safely evaluate strings"
" with expressions containing only literals."
msgstr ""

#: ../../library/functions.rst:496 ../../library/functions.rst:532
msgid ""
"Raises an :ref:`auditing event <auditing>` ``exec`` with argument "
"``code_object``."
msgstr ""

#: ../../library/functions.rst:498 ../../library/functions.rst:534
msgid ""
"Raises an :ref:`auditing event <auditing>` ``exec`` with the code object as "
"the argument. Code compilation events may also be raised."
msgstr ""

#: ../../library/functions.rst:505
msgid ""
"This function supports dynamic execution of Python code. *object* must be "
"either a string or a code object.  If it is a string, the string is parsed "
"as a suite of Python statements which is then executed (unless a syntax "
"error occurs). [#]_ If it is a code object, it is simply executed.  In all "
"cases, the code that's executed is expected to be valid as file input (see "
"the section :ref:`file-input` in the Reference Manual). Be aware that the "
":keyword:`nonlocal`, :keyword:`yield`,  and :keyword:`return` statements may"
" not be used outside of function definitions even within the context of code"
" passed to the :func:`exec` function. The return value is ``None``."
msgstr ""

#: ../../library/functions.rst:516
msgid ""
"In all cases, if the optional parts are omitted, the code is executed in the"
" current scope.  If only *globals* is provided, it must be a dictionary (and"
" not a subclass of dictionary), which will be used for both the global and "
"the local variables.  If *globals* and *locals* are given, they are used for"
" the global and local variables, respectively.  If provided, *locals* can be"
" any mapping object.  Remember that at module level, globals and locals are "
"the same dictionary. If exec gets two separate objects as *globals* and "
"*locals*, the code will be executed as if it were embedded in a class "
"definition."
msgstr ""

#: ../../library/functions.rst:526
msgid ""
"If the *globals* dictionary does not contain a value for the key "
"``__builtins__``, a reference to the dictionary of the built-in module "
":mod:`builtins` is inserted under that key.  That way you can control what "
"builtins are available to the executed code by inserting your own "
"``__builtins__`` dictionary into *globals* before passing it to "
":func:`exec`."
msgstr ""

#: ../../library/functions.rst:539
msgid ""
"The built-in functions :func:`globals` and :func:`locals` return the current"
" global and local dictionary, respectively, which may be useful to pass "
"around for use as the second and third argument to :func:`exec`."
msgstr ""

#: ../../library/functions.rst:545
msgid ""
"The default *locals* act as described for function :func:`locals` below: "
"modifications to the default *locals* dictionary should not be attempted. "
"Pass an explicit *locals* dictionary if you need to see effects of the code "
"on *locals* after function :func:`exec` returns."
msgstr ""

#: ../../library/functions.rst:553
msgid ""
"Construct an iterator from those elements of *iterable* for which *function*"
" returns true.  *iterable* may be either a sequence, a container which "
"supports iteration, or an iterator.  If *function* is ``None``, the identity"
" function is assumed, that is, all elements of *iterable* that are false are"
" removed."
msgstr ""

#: ../../library/functions.rst:559
msgid ""
"Note that ``filter(function, iterable)`` is equivalent to the generator "
"expression ``(item for item in iterable if function(item))`` if function is "
"not ``None`` and ``(item for item in iterable if item)`` if function is "
"``None``."
msgstr ""

#: ../../library/functions.rst:564
msgid ""
"See :func:`itertools.filterfalse` for the complementary function that "
"returns elements of *iterable* for which *function* returns false."
msgstr ""

#: ../../library/functions.rst:574
msgid ""
"Return a floating point number constructed from a number or string *x*."
msgstr ""

#: ../../library/functions.rst:576
msgid ""
"If the argument is a string, it should contain a decimal number, optionally "
"preceded by a sign, and optionally embedded in whitespace.  The optional "
"sign may be ``'+'`` or ``'-'``; a ``'+'`` sign has no effect on the value "
"produced.  The argument may also be a string representing a NaN (not-a-"
"number), or a positive or negative infinity.  More precisely, the input must"
" conform to the following grammar after leading and trailing whitespace "
"characters are removed:"
msgstr ""

#: ../../library/functions.rst:591
msgid ""
"Here ``floatnumber`` is the form of a Python floating-point literal, "
"described in :ref:`floating`.  Case is not significant, so, for example, "
"\"inf\", \"Inf\", \"INFINITY\" and \"iNfINity\" are all acceptable spellings"
" for positive infinity."
msgstr ""

#: ../../library/functions.rst:596
msgid ""
"Otherwise, if the argument is an integer or a floating point number, a "
"floating point number with the same value (within Python's floating point "
"precision) is returned.  If the argument is outside the range of a Python "
"float, an :exc:`OverflowError` will be raised."
msgstr ""

#: ../../library/functions.rst:601
msgid ""
"For a general Python object ``x``, ``float(x)`` delegates to "
"``x.__float__()``.  If ``__float__()`` is not defined then it falls back to "
":meth:`__index__`."
msgstr ""

#: ../../library/functions.rst:605
msgid "If no argument is given, ``0.0`` is returned."
msgstr ""

#: ../../library/functions.rst:607
msgid "Examples::"
msgstr ""

#: ../../library/functions.rst:620
msgid "The float type is described in :ref:`typesnumeric`."
msgstr ""

#: ../../library/functions.rst:628
msgid "Falls back to :meth:`__index__` if :meth:`__float__` is not defined."
msgstr ""

#: ../../library/functions.rst:638
msgid ""
"Convert a *value* to a \"formatted\" representation, as controlled by "
"*format_spec*.  The interpretation of *format_spec* will depend on the type "
"of the *value* argument, however there is a standard formatting syntax that "
"is used by most built-in types: :ref:`formatspec`."
msgstr ""

#: ../../library/functions.rst:643
msgid ""
"The default *format_spec* is an empty string which usually gives the same "
"effect as calling :func:`str(value) <str>`."
msgstr ""

#: ../../library/functions.rst:646
msgid ""
"A call to ``format(value, format_spec)`` is translated to "
"``type(value).__format__(value, format_spec)`` which bypasses the instance "
"dictionary when searching for the value's :meth:`__format__` method.  A "
":exc:`TypeError` exception is raised if the method search reaches "
":mod:`object` and the *format_spec* is non-empty, or if either the "
"*format_spec* or the return value are not strings."
msgstr ""

#: ../../library/functions.rst:653
msgid ""
"``object().__format__(format_spec)`` raises :exc:`TypeError` if "
"*format_spec* is not an empty string."
msgstr ""

#: ../../library/functions.rst:662
msgid ""
"Return a new :class:`frozenset` object, optionally with elements taken from "
"*iterable*.  ``frozenset`` is a built-in class.  See :class:`frozenset` and "
":ref:`types-set` for documentation about this class."
msgstr ""

#: ../../library/functions.rst:666
msgid ""
"For other containers see the built-in :class:`set`, :class:`list`, "
":class:`tuple`, and :class:`dict` classes, as well as the :mod:`collections`"
" module."
msgstr ""

#: ../../library/functions.rst:673
msgid ""
"Return the value of the named attribute of *object*.  *name* must be a "
"string. If the string is the name of one of the object's attributes, the "
"result is the value of that attribute.  For example, ``getattr(x, "
"'foobar')`` is equivalent to ``x.foobar``.  If the named attribute does not "
"exist, *default* is returned if provided, otherwise :exc:`AttributeError` is"
" raised."
msgstr ""

#: ../../library/functions.rst:681
msgid ""
"Since :ref:`private name mangling <private-name-mangling>` happens at "
"compilation time, one must manually mangle a private attribute's (attributes"
" with two leading underscores) name in order to retrieve it with "
":func:`getattr`."
msgstr ""

#: ../../library/functions.rst:689
msgid ""
"Return the dictionary implementing the current module namespace. For code "
"within functions, this is set when the function is defined and remains the "
"same regardless of where the function is called."
msgstr ""

#: ../../library/functions.rst:696
msgid ""
"The arguments are an object and a string.  The result is ``True`` if the "
"string is the name of one of the object's attributes, ``False`` if not. "
"(This is implemented by calling ``getattr(object, name)`` and seeing whether"
" it raises an :exc:`AttributeError` or not.)"
msgstr ""

#: ../../library/functions.rst:704
msgid ""
"Return the hash value of the object (if it has one).  Hash values are "
"integers.  They are used to quickly compare dictionary keys during a "
"dictionary lookup.  Numeric values that compare equal have the same hash "
"value (even if they are of different types, as is the case for 1 and 1.0)."
msgstr ""

#: ../../library/functions.rst:711
msgid ""
"For objects with custom :meth:`__hash__` methods, note that :func:`hash` "
"truncates the return value based on the bit width of the host machine. See "
":meth:`__hash__` for details."
msgstr ""

#: ../../library/functions.rst:717
msgid ""
"Invoke the built-in help system.  (This function is intended for interactive"
" use.)  If no argument is given, the interactive help system starts on the "
"interpreter console.  If the argument is a string, then the string is looked"
" up as the name of a module, function, class, method, keyword, or "
"documentation topic, and a help page is printed on the console.  If the "
"argument is any other kind of object, a help page on the object is "
"generated."
msgstr ""

#: ../../library/functions.rst:724
msgid ""
"Note that if a slash(/) appears in the parameter list of a function, when "
"invoking :func:`help`, it means that the parameters prior to the slash are "
"positional-only. For more info, see :ref:`the FAQ entry on positional-only "
"parameters <faq-positional-only-arguments>`."
msgstr ""

#: ../../library/functions.rst:729
msgid ""
"This function is added to the built-in namespace by the :mod:`site` module."
msgstr ""

#: ../../library/functions.rst:731
msgid ""
"Changes to :mod:`pydoc` and :mod:`inspect` mean that the reported signatures"
" for callables are now more comprehensive and consistent."
msgstr ""

#: ../../library/functions.rst:738
msgid ""
"Convert an integer number to a lowercase hexadecimal string prefixed with "
"\"0x\". If *x* is not a Python :class:`int` object, it has to define an "
":meth:`__index__` method that returns an integer. Some examples:"
msgstr ""

#: ../../library/functions.rst:747
msgid ""
"If you want to convert an integer number to an uppercase or lower "
"hexadecimal string with prefix or not, you can use either of the following "
"ways:"
msgstr ""

#: ../../library/functions.rst:759
msgid ""
"See also :func:`int` for converting a hexadecimal string to an integer using"
" a base of 16."
msgstr ""

#: ../../library/functions.rst:764
msgid ""
"To obtain a hexadecimal string representation for a float, use the "
":meth:`float.hex` method."
msgstr ""

#: ../../library/functions.rst:770
msgid ""
"Return the \"identity\" of an object.  This is an integer which is "
"guaranteed to be unique and constant for this object during its lifetime. "
"Two objects with non-overlapping lifetimes may have the same :func:`id` "
"value."
msgstr ""

#: ../../library/functions.rst:777
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.id`` with argument "
"``id``."
msgstr ""

#: ../../library/functions.rst:782
msgid ""
"If the *prompt* argument is present, it is written to standard output "
"without a trailing newline.  The function then reads a line from input, "
"converts it to a string (stripping a trailing newline), and returns that.  "
"When EOF is read, :exc:`EOFError` is raised.  Example::"
msgstr ""

#: ../../library/functions.rst:792
msgid ""
"If the :mod:`readline` module was loaded, then :func:`input` will use it to "
"provide elaborate line editing and history features."
msgstr ""

#: ../../library/functions.rst:795
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input`` with argument "
"``prompt``."
msgstr ""

#: ../../library/functions.rst:797
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input`` with argument "
"``prompt`` before reading input"
msgstr ""

#: ../../library/functions.rst:800
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input/result`` with "
"argument ``result``."
msgstr ""

#: ../../library/functions.rst:802
msgid ""
"Raises an auditing event ``builtins.input/result`` with the result after "
"successfully reading input."
msgstr ""

#: ../../library/functions.rst:809
msgid ""
"Return an integer object constructed from a number or string *x*, or return "
"``0`` if no arguments are given.  If *x* defines :meth:`__int__`, ``int(x)``"
" returns ``x.__int__()``.  If *x* defines :meth:`__index__`, it returns "
"``x.__index__()``.  If *x* defines :meth:`__trunc__`, it returns "
"``x.__trunc__()``. For floating point numbers, this truncates towards zero."
msgstr ""

#: ../../library/functions.rst:816
msgid ""
"If *x* is not a number or if *base* is given, then *x* must be a string, "
":class:`bytes`, or :class:`bytearray` instance representing an :ref:`integer"
" literal <integers>` in radix *base*.  Optionally, the literal can be "
"preceded by ``+`` or ``-`` (with no space in between) and surrounded by "
"whitespace.  A base-n literal consists of the digits 0 to n-1, with ``a`` to"
" ``z`` (or ``A`` to ``Z``) having values 10 to 35.  The default *base* is "
"10. The allowed values are 0 and 2--36. Base-2, -8, and -16 literals can be "
"optionally prefixed with ``0b``/``0B``, ``0o``/``0O``, or ``0x``/``0X``, as "
"with integer literals in code.  Base 0 means to interpret exactly as a code "
"literal, so that the actual base is 2, 8, 10, or 16, and so that "
"``int('010', 0)`` is not legal, while ``int('010')`` is, as well as "
"``int('010', 8)``."
msgstr ""

#: ../../library/functions.rst:829
msgid "The integer type is described in :ref:`typesnumeric`."
msgstr ""

#: ../../library/functions.rst:831
msgid ""
"If *base* is not an instance of :class:`int` and the *base* object has a "
":meth:`base.__index__ <object.__index__>` method, that method is called to "
"obtain an integer for the base.  Previous versions used :meth:`base.__int__ "
"<object.__int__>` instead of :meth:`base.__index__ <object.__index__>`."
msgstr ""

#: ../../library/functions.rst:844
msgid "Falls back to :meth:`__index__` if :meth:`__int__` is not defined."
msgstr ""

#: ../../library/functions.rst:847
msgid ""
":class:`int` string inputs and string representations can be limited to help"
" avoid denial of service attacks. A :exc:`ValueError` is raised when the "
"limit is exceeded while converting a string *x* to an :class:`int` or when "
"converting an :class:`int` into a string would exceed the limit. See the "
":ref:`integer string conversion length limitation <int_max_str_digits>` "
"documentation."
msgstr ""

#: ../../library/functions.rst:858
msgid ""
"Return ``True`` if the *object* argument is an instance of the *classinfo* "
"argument, or of a (direct, indirect or :term:`virtual <abstract base "
"class>`) subclass thereof.  If *object* is not an object of the given type, "
"the function always returns ``False``. If *classinfo* is a tuple of type "
"objects (or recursively, other such tuples), return ``True`` if *object* is "
"an instance of any of the types. If *classinfo* is not a type or tuple of "
"types and such tuples, a :exc:`TypeError` exception is raised."
msgstr ""

#: ../../library/functions.rst:870
msgid ""
"Return ``True`` if *class* is a subclass (direct, indirect or :term:`virtual"
" <abstract base class>`) of *classinfo*.  A class is considered a subclass "
"of itself. *classinfo* may be a tuple of class objects (or recursively, "
"other such tuples), in which case return ``True`` if *class* is a subclass "
"of any entry in *classinfo*.  In any other case, a :exc:`TypeError` "
"exception is raised."
msgstr ""

#: ../../library/functions.rst:880
msgid ""
"Return an :term:`iterator` object.  The first argument is interpreted very "
"differently depending on the presence of the second argument. Without a "
"second argument, *object* must be a collection object which supports the "
"iteration protocol (the :meth:`__iter__` method), or it must support the "
"sequence protocol (the :meth:`__getitem__` method with integer arguments "
"starting at ``0``).  If it does not support either of those protocols, "
":exc:`TypeError` is raised. If the second argument, *sentinel*, is given, "
"then *object* must be a callable object.  The iterator created in this case "
"will call *object* with no arguments for each call to its "
":meth:`~iterator.__next__` method; if the value returned is equal to "
"*sentinel*, :exc:`StopIteration` will be raised, otherwise the value will be"
" returned."
msgstr ""

#: ../../library/functions.rst:893
msgid "See also :ref:`typeiter`."
msgstr ""

#: ../../library/functions.rst:895
msgid ""
"One useful application of the second form of :func:`iter` is to build a "
"block-reader. For example, reading fixed-width blocks from a binary database"
" file until the end of file is reached::"
msgstr ""

#: ../../library/functions.rst:907
msgid ""
"Return the length (the number of items) of an object.  The argument may be a"
" sequence (such as a string, bytes, tuple, list, or range) or a collection "
"(such as a dictionary, set, or frozen set)."
msgstr ""

#: ../../library/functions.rst:913
msgid ""
"``len`` raises :exc:`OverflowError` on lengths larger than "
":data:`sys.maxsize`, such as :class:`range(2 ** 100) <range>`."
msgstr ""

#: ../../library/functions.rst:921
msgid ""
"Rather than being a function, :class:`list` is actually a mutable sequence "
"type, as documented in :ref:`typesseq-list` and :ref:`typesseq`."
msgstr ""

#: ../../library/functions.rst:927
msgid ""
"Update and return a dictionary representing the current local symbol table. "
"Free variables are returned by :func:`locals` when it is called in function "
"blocks, but not in class blocks. Note that at the module level, "
":func:`locals` and :func:`globals` are the same dictionary."
msgstr ""

#: ../../library/functions.rst:933
msgid ""
"The contents of this dictionary should not be modified; changes may not "
"affect the values of local and free variables used by the interpreter."
msgstr ""

#: ../../library/functions.rst:938
msgid ""
"Return an iterator that applies *function* to every item of *iterable*, "
"yielding the results.  If additional *iterable* arguments are passed, "
"*function* must take that many arguments and is applied to the items from "
"all iterables in parallel.  With multiple iterables, the iterator stops when"
" the shortest iterable is exhausted.  For cases where the function inputs "
"are already arranged into argument tuples, see :func:`itertools.starmap`\\."
msgstr ""

#: ../../library/functions.rst:949
msgid ""
"Return the largest item in an iterable or the largest of two or more "
"arguments."
msgstr ""

#: ../../library/functions.rst:952
msgid ""
"If one positional argument is provided, it should be an :term:`iterable`. "
"The largest item in the iterable is returned.  If two or more positional "
"arguments are provided, the largest of the positional arguments is returned."
msgstr ""

#: ../../library/functions.rst:957 ../../library/functions.rst:994
msgid ""
"There are two optional keyword-only arguments. The *key* argument specifies "
"a one-argument ordering function like that used for :meth:`list.sort`. The "
"*default* argument specifies an object to return if the provided iterable is"
" empty. If the iterable is empty and *default* is not provided, a "
":exc:`ValueError` is raised."
msgstr ""

#: ../../library/functions.rst:963
msgid ""
"If multiple items are maximal, the function returns the first one "
"encountered.  This is consistent with other sort-stability preserving tools "
"such as ``sorted(iterable, key=keyfunc, reverse=True)[0]`` and "
"``heapq.nlargest(1, iterable, key=keyfunc)``."
msgstr ""

#: ../../library/functions.rst:968 ../../library/functions.rst:1005
msgid "The *default* keyword-only argument."
msgstr ""

#: ../../library/functions.rst:971 ../../library/functions.rst:1008
msgid "The *key* can be ``None``."
msgstr ""

#: ../../library/functions.rst:979
msgid ""
"Return a \"memory view\" object created from the given argument.  See "
":ref:`typememoryview` for more information."
msgstr ""

#: ../../library/functions.rst:986
msgid ""
"Return the smallest item in an iterable or the smallest of two or more "
"arguments."
msgstr ""

#: ../../library/functions.rst:989
msgid ""
"If one positional argument is provided, it should be an :term:`iterable`. "
"The smallest item in the iterable is returned.  If two or more positional "
"arguments are provided, the smallest of the positional arguments is "
"returned."
msgstr ""

#: ../../library/functions.rst:1000
msgid ""
"If multiple items are minimal, the function returns the first one "
"encountered.  This is consistent with other sort-stability preserving tools "
"such as ``sorted(iterable, key=keyfunc)[0]`` and ``heapq.nsmallest(1, "
"iterable, key=keyfunc)``."
msgstr ""

#: ../../library/functions.rst:1014
msgid ""
"Retrieve the next item from the *iterator* by calling its "
":meth:`~iterator.__next__` method.  If *default* is given, it is returned if"
" the iterator is exhausted, otherwise :exc:`StopIteration` is raised."
msgstr ""

#: ../../library/functions.rst:1021
msgid ""
"Return a new featureless object.  :class:`object` is a base for all classes."
" It has the methods that are common to all instances of Python classes.  "
"This function does not accept any arguments."
msgstr ""

#: ../../library/functions.rst:1027
msgid ""
":class:`object` does *not* have a :attr:`~object.__dict__`, so you can't "
"assign arbitrary attributes to an instance of the :class:`object` class."
msgstr ""

#: ../../library/functions.rst:1033
msgid ""
"Convert an integer number to an octal string prefixed with \"0o\".  The "
"result is a valid Python expression. If *x* is not a Python :class:`int` "
"object, it has to define an :meth:`__index__` method that returns an "
"integer. For example:"
msgstr ""

#: ../../library/functions.rst:1043
msgid ""
"If you want to convert an integer number to octal string either with prefix "
"\"0o\" or not, you can use either of the following ways."
msgstr ""

#: ../../library/functions.rst:1060
msgid ""
"Open *file* and return a corresponding :term:`file object`.  If the file "
"cannot be opened, an :exc:`OSError` is raised. See :ref:`tut-files` for more"
" examples of how to use this function."
msgstr ""

#: ../../library/functions.rst:1064
msgid ""
"*file* is a :term:`path-like object` giving the pathname (absolute or "
"relative to the current working directory) of the file to be opened or an "
"integer file descriptor of the file to be wrapped.  (If a file descriptor is"
" given, it is closed when the returned I/O object is closed, unless "
"*closefd* is set to ``False``.)"
msgstr ""

#: ../../library/functions.rst:1070
msgid ""
"*mode* is an optional string that specifies the mode in which the file is "
"opened.  It defaults to ``'r'`` which means open for reading in text mode. "
"Other common values are ``'w'`` for writing (truncating the file if it "
"already exists), ``'x'`` for exclusive creation and ``'a'`` for appending "
"(which on *some* Unix systems, means that *all* writes append to the end of "
"the file regardless of the current seek position).  In text mode, if "
"*encoding* is not specified the encoding used is platform dependent: "
"``locale.getpreferredencoding(False)`` is called to get the current locale "
"encoding. (For reading and writing raw bytes use binary mode and leave "
"*encoding* unspecified.)  The available modes are:"
msgstr ""

#: ../../library/functions.rst:1087
msgid "Character"
msgstr ""

#: ../../library/functions.rst:1087
msgid "Meaning"
msgstr "含意"

#: ../../library/functions.rst:1089
msgid "``'r'``"
msgstr ""

#: ../../library/functions.rst:1089
msgid "open for reading (default)"
msgstr ""

#: ../../library/functions.rst:1090
msgid "``'w'``"
msgstr ""

#: ../../library/functions.rst:1090
msgid "open for writing, truncating the file first"
msgstr ""

#: ../../library/functions.rst:1091
msgid "``'x'``"
msgstr ""

#: ../../library/functions.rst:1091
msgid "open for exclusive creation, failing if the file already exists"
msgstr ""

#: ../../library/functions.rst:1092
msgid "``'a'``"
msgstr ""

#: ../../library/functions.rst:1092
msgid "open for writing, appending to the end of the file if it exists"
msgstr ""

#: ../../library/functions.rst:1093
msgid "``'b'``"
msgstr ""

#: ../../library/functions.rst:1093
msgid "binary mode"
msgstr ""

#: ../../library/functions.rst:1094
msgid "``'t'``"
msgstr ""

#: ../../library/functions.rst:1094
msgid "text mode (default)"
msgstr ""

#: ../../library/functions.rst:1095
msgid "``'+'``"
msgstr ""

#: ../../library/functions.rst:1095
msgid "open for updating (reading and writing)"
msgstr ""

#: ../../library/functions.rst:1098
msgid ""
"The default mode is ``'r'`` (open for reading text, synonym of ``'rt'``). "
"Modes ``'w+'`` and ``'w+b'`` open and truncate the file.  Modes ``'r+'`` and"
" ``'r+b'`` open the file with no truncation."
msgstr ""

#: ../../library/functions.rst:1102
msgid ""
"As mentioned in the :ref:`io-overview`, Python distinguishes between binary "
"and text I/O.  Files opened in binary mode (including ``'b'`` in the *mode* "
"argument) return contents as :class:`bytes` objects without any decoding.  "
"In text mode (the default, or when ``'t'`` is included in the *mode* "
"argument), the contents of the file are returned as :class:`str`, the bytes "
"having been first decoded using a platform-dependent encoding or using the "
"specified *encoding* if given."
msgstr ""

#: ../../library/functions.rst:1110
msgid ""
"There is an additional mode character permitted, ``'U'``, which no longer "
"has any effect, and is considered deprecated. It previously enabled "
":term:`universal newlines` in text mode, which became the default behaviour "
"in Python 3.0. Refer to the documentation of the :ref:`newline <open-"
"newline-parameter>` parameter for further details."
msgstr ""

#: ../../library/functions.rst:1118
msgid ""
"Python doesn't depend on the underlying operating system's notion of text "
"files; all the processing is done by Python itself, and is therefore "
"platform-independent."
msgstr ""

#: ../../library/functions.rst:1122
msgid ""
"*buffering* is an optional integer used to set the buffering policy.  Pass 0"
" to switch buffering off (only allowed in binary mode), 1 to select line "
"buffering (only usable in text mode), and an integer > 1 to indicate the "
"size in bytes of a fixed-size chunk buffer. Note that specifying a buffer "
"size this way applies for binary buffered I/O, but ``TextIOWrapper`` (i.e., "
"files opened with ``mode='r+'``) would have another buffering. To disable "
"buffering in ``TextIOWrapper``, consider using the ``write_through`` flag "
"for :func:`io.TextIOWrapper.reconfigure`. When no *buffering* argument is "
"given, the default buffering policy works as follows:"
msgstr ""

#: ../../library/functions.rst:1132
msgid ""
"Binary files are buffered in fixed-size chunks; the size of the buffer is "
"chosen using a heuristic trying to determine the underlying device's \"block"
" size\" and falling back on :attr:`io.DEFAULT_BUFFER_SIZE`.  On many "
"systems, the buffer will typically be 4096 or 8192 bytes long."
msgstr ""

#: ../../library/functions.rst:1137
msgid ""
"\"Interactive\" text files (files for which :meth:`~io.IOBase.isatty` "
"returns ``True``) use line buffering.  Other text files use the policy "
"described above for binary files."
msgstr ""

#: ../../library/functions.rst:1141
msgid ""
"*encoding* is the name of the encoding used to decode or encode the file. "
"This should only be used in text mode.  The default encoding is platform "
"dependent (whatever :func:`locale.getpreferredencoding` returns), but any "
":term:`text encoding` supported by Python can be used.  See the "
":mod:`codecs` module for the list of supported encodings."
msgstr ""

#: ../../library/functions.rst:1148
msgid ""
"*errors* is an optional string that specifies how encoding and decoding "
"errors are to be handled—this cannot be used in binary mode. A variety of "
"standard error handlers are available (listed under :ref:`error-handlers`), "
"though any error handling name that has been registered with "
":func:`codecs.register_error` is also valid.  The standard names include:"
msgstr ""

#: ../../library/functions.rst:1156
msgid ""
"``'strict'`` to raise a :exc:`ValueError` exception if there is an encoding "
"error.  The default value of ``None`` has the same effect."
msgstr ""

#: ../../library/functions.rst:1160
msgid ""
"``'ignore'`` ignores errors.  Note that ignoring encoding errors can lead to"
" data loss."
msgstr ""

#: ../../library/functions.rst:1163
msgid ""
"``'replace'`` causes a replacement marker (such as ``'?'``) to be inserted "
"where there is malformed data."
msgstr ""

#: ../../library/functions.rst:1166
msgid ""
"``'surrogateescape'`` will represent any incorrect bytes as low surrogate "
"code units ranging from U+DC80 to U+DCFF. These surrogate code units will "
"then be turned back into the same bytes when the ``surrogateescape`` error "
"handler is used when writing data.  This is useful for processing files in "
"an unknown encoding."
msgstr ""

#: ../../library/functions.rst:1173
msgid ""
"``'xmlcharrefreplace'`` is only supported when writing to a file. Characters"
" not supported by the encoding are replaced with the appropriate XML "
"character reference ``&#nnn;``."
msgstr ""

#: ../../library/functions.rst:1177
msgid ""
"``'backslashreplace'`` replaces malformed data by Python's backslashed "
"escape sequences."
msgstr ""

#: ../../library/functions.rst:1180
msgid ""
"``'namereplace'`` (also only supported when writing) replaces unsupported "
"characters with ``\\N{...}`` escape sequences."
msgstr ""

#: ../../library/functions.rst:1188
msgid ""
"*newline* controls how :term:`universal newlines` mode works (it only "
"applies to text mode).  It can be ``None``, ``''``, ``'\\n'``, ``'\\r'``, "
"and ``'\\r\\n'``.  It works as follows:"
msgstr ""

#: ../../library/functions.rst:1192
msgid ""
"When reading input from the stream, if *newline* is ``None``, universal "
"newlines mode is enabled.  Lines in the input can end in ``'\\n'``, "
"``'\\r'``, or ``'\\r\\n'``, and these are translated into ``'\\n'`` before "
"being returned to the caller.  If it is ``''``, universal newlines mode is "
"enabled, but line endings are returned to the caller untranslated.  If it "
"has any of the other legal values, input lines are only terminated by the "
"given string, and the line ending is returned to the caller untranslated."
msgstr ""

#: ../../library/functions.rst:1200
msgid ""
"When writing output to the stream, if *newline* is ``None``, any ``'\\n'`` "
"characters written are translated to the system default line separator, "
":data:`os.linesep`.  If *newline* is ``''`` or ``'\\n'``, no translation "
"takes place.  If *newline* is any of the other legal values, any ``'\\n'`` "
"characters written are translated to the given string."
msgstr ""

#: ../../library/functions.rst:1206
msgid ""
"If *closefd* is ``False`` and a file descriptor rather than a filename was "
"given, the underlying file descriptor will be kept open when the file is "
"closed.  If a filename is given *closefd* must be ``True`` (the default) "
"otherwise an error will be raised."
msgstr ""

#: ../../library/functions.rst:1211
msgid ""
"A custom opener can be used by passing a callable as *opener*. The "
"underlying file descriptor for the file object is then obtained by calling "
"*opener* with (*file*, *flags*). *opener* must return an open file "
"descriptor (passing :mod:`os.open` as *opener* results in functionality "
"similar to passing ``None``)."
msgstr ""

#: ../../library/functions.rst:1217
msgid "The newly created file is :ref:`non-inheritable <fd_inheritance>`."
msgstr ""

#: ../../library/functions.rst:1219
msgid ""
"The following example uses the :ref:`dir_fd <dir_fd>` parameter of the "
":func:`os.open` function to open a file relative to a given directory::"
msgstr ""

#: ../../library/functions.rst:1232
msgid ""
"The type of :term:`file object` returned by the :func:`open` function "
"depends on the mode.  When :func:`open` is used to open a file in a text "
"mode (``'w'``, ``'r'``, ``'wt'``, ``'rt'``, etc.), it returns a subclass of "
":class:`io.TextIOBase` (specifically :class:`io.TextIOWrapper`).  When used "
"to open a file in a binary mode with buffering, the returned class is a "
"subclass of :class:`io.BufferedIOBase`.  The exact class varies: in read "
"binary mode, it returns an :class:`io.BufferedReader`; in write binary and "
"append binary modes, it returns an :class:`io.BufferedWriter`, and in "
"read/write mode, it returns an :class:`io.BufferedRandom`.  When buffering "
"is disabled, the raw stream, a subclass of :class:`io.RawIOBase`, "
":class:`io.FileIO`, is returned."
msgstr ""

#: ../../library/functions.rst:1253
msgid ""
"See also the file handling modules, such as, :mod:`fileinput`, :mod:`io` "
"(where :func:`open` is declared), :mod:`os`, :mod:`os.path`, "
":mod:`tempfile`, and :mod:`shutil`."
msgstr ""

#: ../../library/functions.rst:1257
msgid ""
"Raises an :ref:`auditing event <auditing>` ``open`` with arguments ``file``,"
" ``mode``, ``flags``."
msgstr ""

#: ../../library/functions.rst:1259
msgid ""
"The ``mode`` and ``flags`` arguments may have been modified or inferred from"
" the original call."
msgstr ""

#: ../../library/functions.rst:1265
msgid "The *opener* parameter was added."
msgstr ""

#: ../../library/functions.rst:1266
msgid "The ``'x'`` mode was added."
msgstr ""

#: ../../library/functions.rst:1267
msgid ""
":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr ""

#: ../../library/functions.rst:1268
msgid ""
":exc:`FileExistsError` is now raised if the file opened in exclusive "
"creation mode (``'x'``) already exists."
msgstr ""

#: ../../library/functions.rst:1274
msgid "The file is now non-inheritable."
msgstr ""

#: ../../library/functions.rst:1278
msgid "The ``'U'`` mode."
msgstr ""

#: ../../library/functions.rst:1283
msgid ""
"If the system call is interrupted and the signal handler does not raise an "
"exception, the function now retries the system call instead of raising an "
":exc:`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""

#: ../../library/functions.rst:1286
msgid "The ``'namereplace'`` error handler was added."
msgstr ""

#: ../../library/functions.rst:1291
msgid "Support added to accept objects implementing :class:`os.PathLike`."
msgstr ""

#: ../../library/functions.rst:1292
msgid ""
"On Windows, opening a console buffer may return a subclass of "
":class:`io.RawIOBase` other than :class:`io.FileIO`."
msgstr ""

#: ../../library/functions.rst:1297
msgid ""
"Given a string representing one Unicode character, return an integer "
"representing the Unicode code point of that character.  For example, "
"``ord('a')`` returns the integer ``97`` and ``ord('€')`` (Euro sign) returns"
" ``8364``.  This is the inverse of :func:`chr`."
msgstr ""

#: ../../library/functions.rst:1305
msgid ""
"Return *base* to the power *exp*; if *mod* is present, return *base* to the "
"power *exp*, modulo *mod* (computed more efficiently than ``pow(base, exp) %"
" mod``). The two-argument form ``pow(base, exp)`` is equivalent to using the"
" power operator: ``base**exp``."
msgstr ""

#: ../../library/functions.rst:1310
msgid ""
"The arguments must have numeric types.  With mixed operand types, the "
"coercion rules for binary arithmetic operators apply.  For :class:`int` "
"operands, the result has the same type as the operands (after coercion) "
"unless the second argument is negative; in that case, all arguments are "
"converted to float and a float result is delivered.  For example, ``pow(10, "
"2)`` returns ``100``, but ``pow(10, -2)`` returns ``0.01``.  For a negative "
"base of type :class:`int` or :class:`float` and a non-integral exponent, a "
"complex result is delivered.  For example, ``pow(-9, 0.5)`` returns a value "
"close to ``3j``."
msgstr ""

#: ../../library/functions.rst:1320
msgid ""
"For :class:`int` operands *base* and *exp*, if *mod* is present, *mod* must "
"also be of integer type and *mod* must be nonzero. If *mod* is present and "
"*exp* is negative, *base* must be relatively prime to *mod*. In that case, "
"``pow(inv_base, -exp, mod)`` is returned, where *inv_base* is an inverse to "
"*base* modulo *mod*."
msgstr ""

#: ../../library/functions.rst:1326
msgid "Here's an example of computing an inverse for ``38`` modulo ``97``::"
msgstr ""

#: ../../library/functions.rst:1333
msgid ""
"For :class:`int` operands, the three-argument form of ``pow`` now allows the"
" second argument to be negative, permitting computation of modular inverses."
msgstr ""

#: ../../library/functions.rst:1338
msgid ""
"Allow keyword arguments.  Formerly, only positional arguments were "
"supported."
msgstr ""

#: ../../library/functions.rst:1345
msgid ""
"Print *objects* to the text stream *file*, separated by *sep* and followed "
"by *end*.  *sep*, *end*, *file* and *flush*, if present, must be given as "
"keyword arguments."
msgstr ""

#: ../../library/functions.rst:1349
msgid ""
"All non-keyword arguments are converted to strings like :func:`str` does and"
" written to the stream, separated by *sep* and followed by *end*.  Both "
"*sep* and *end* must be strings; they can also be ``None``, which means to "
"use the default values.  If no *objects* are given, :func:`print` will just "
"write *end*."
msgstr ""

#: ../../library/functions.rst:1355
msgid ""
"The *file* argument must be an object with a ``write(string)`` method; if it"
" is not present or ``None``, :data:`sys.stdout` will be used.  Since printed"
" arguments are converted to text strings, :func:`print` cannot be used with "
"binary mode file objects.  For these, use ``file.write(...)`` instead."
msgstr ""

#: ../../library/functions.rst:1360
msgid ""
"Whether output is buffered is usually determined by *file*, but if the "
"*flush* keyword argument is true, the stream is forcibly flushed."
msgstr ""

#: ../../library/functions.rst:1363
msgid "Added the *flush* keyword argument."
msgstr ""

#: ../../library/functions.rst:1369
msgid "Return a property attribute."
msgstr ""

#: ../../library/functions.rst:1371
msgid ""
"*fget* is a function for getting an attribute value.  *fset* is a function "
"for setting an attribute value. *fdel* is a function for deleting an "
"attribute value.  And *doc* creates a docstring for the attribute."
msgstr ""

#: ../../library/functions.rst:1375
msgid "A typical use is to define a managed attribute ``x``::"
msgstr ""

#: ../../library/functions.rst:1392
msgid ""
"If *c* is an instance of *C*, ``c.x`` will invoke the getter, ``c.x = "
"value`` will invoke the setter and ``del c.x`` the deleter."
msgstr ""

#: ../../library/functions.rst:1395
msgid ""
"If given, *doc* will be the docstring of the property attribute. Otherwise, "
"the property will copy *fget*'s docstring (if it exists).  This makes it "
"possible to create read-only properties easily using :func:`property` as a "
":term:`decorator`::"
msgstr ""

#: ../../library/functions.rst:1408
msgid ""
"The ``@property`` decorator turns the :meth:`voltage` method into a "
"\"getter\" for a read-only attribute with the same name, and it sets the "
"docstring for *voltage* to \"Get the current voltage.\""
msgstr ""

#: ../../library/functions.rst:1412
msgid ""
"A property object has :attr:`~property.getter`, :attr:`~property.setter`, "
"and :attr:`~property.deleter` methods usable as decorators that create a "
"copy of the property with the corresponding accessor function set to the "
"decorated function.  This is best explained with an example::"
msgstr ""

#: ../../library/functions.rst:1434
msgid ""
"This code is exactly equivalent to the first example.  Be sure to give the "
"additional functions the same name as the original property (``x`` in this "
"case.)"
msgstr ""

#: ../../library/functions.rst:1438
msgid ""
"The returned property object also has the attributes ``fget``, ``fset``, and"
" ``fdel`` corresponding to the constructor arguments."
msgstr ""

#: ../../library/functions.rst:1441
msgid "The docstrings of property objects are now writeable."
msgstr ""

#: ../../library/functions.rst:1450
msgid ""
"Rather than being a function, :class:`range` is actually an immutable "
"sequence type, as documented in :ref:`typesseq-range` and :ref:`typesseq`."
msgstr ""

#: ../../library/functions.rst:1456
msgid ""
"Return a string containing a printable representation of an object.  For "
"many types, this function makes an attempt to return a string that would "
"yield an object with the same value when passed to :func:`eval`, otherwise "
"the representation is a string enclosed in angle brackets that contains the "
"name of the type of the object together with additional information often "
"including the name and address of the object.  A class can control what this"
" function returns for its instances by defining a :meth:`__repr__` method."
msgstr ""

#: ../../library/functions.rst:1467
msgid ""
"Return a reverse :term:`iterator`.  *seq* must be an object which has a "
":meth:`__reversed__` method or supports the sequence protocol (the "
":meth:`__len__` method and the :meth:`__getitem__` method with integer "
"arguments starting at ``0``)."
msgstr ""

#: ../../library/functions.rst:1475
msgid ""
"Return *number* rounded to *ndigits* precision after the decimal point.  If "
"*ndigits* is omitted or is ``None``, it returns the nearest integer to its "
"input."
msgstr ""

#: ../../library/functions.rst:1479
msgid ""
"For the built-in types supporting :func:`round`, values are rounded to the "
"closest multiple of 10 to the power minus *ndigits*; if two multiples are "
"equally close, rounding is done toward the even choice (so, for example, "
"both ``round(0.5)`` and ``round(-0.5)`` are ``0``, and ``round(1.5)`` is "
"``2``).  Any integer value is valid for *ndigits* (positive, zero, or "
"negative).  The return value is an integer if *ndigits* is omitted or "
"``None``. Otherwise the return value has the same type as *number*."
msgstr ""

#: ../../library/functions.rst:1488
msgid ""
"For a general Python object ``number``, ``round`` delegates to "
"``number.__round__``."
msgstr ""

#: ../../library/functions.rst:1493
msgid ""
"The behavior of :func:`round` for floats can be surprising: for example, "
"``round(2.675, 2)`` gives ``2.67`` instead of the expected ``2.68``. This is"
" not a bug: it's a result of the fact that most decimal fractions can't be "
"represented exactly as a float.  See :ref:`tut-fp-issues` for more "
"information."
msgstr ""

#: ../../library/functions.rst:1504
msgid ""
"Return a new :class:`set` object, optionally with elements taken from "
"*iterable*.  ``set`` is a built-in class.  See :class:`set` and :ref:`types-"
"set` for documentation about this class."
msgstr ""

#: ../../library/functions.rst:1508
msgid ""
"For other containers see the built-in :class:`frozenset`, :class:`list`, "
":class:`tuple`, and :class:`dict` classes, as well as the :mod:`collections`"
" module."
msgstr ""

#: ../../library/functions.rst:1515
msgid ""
"This is the counterpart of :func:`getattr`.  The arguments are an object, a "
"string and an arbitrary value.  The string may name an existing attribute or"
" a new attribute.  The function assigns the value to the attribute, provided"
" the object allows it.  For example, ``setattr(x, 'foobar', 123)`` is "
"equivalent to ``x.foobar = 123``."
msgstr ""

#: ../../library/functions.rst:1523
msgid ""
"Since :ref:`private name mangling <private-name-mangling>` happens at "
"compilation time, one must manually mangle a private attribute's (attributes"
" with two leading underscores) name in order to set it with :func:`setattr`."
msgstr ""

#: ../../library/functions.rst:1532
msgid ""
"Return a :term:`slice` object representing the set of indices specified by "
"``range(start, stop, step)``.  The *start* and *step* arguments default to "
"``None``.  Slice objects have read-only data attributes "
":attr:`~slice.start`, :attr:`~slice.stop` and :attr:`~slice.step` which "
"merely return the argument values (or their default).  They have no other "
"explicit functionality; however they are used by NumPy and other third party"
" packages. Slice objects are also generated when extended indexing syntax is"
" used.  For example: ``a[start:stop:step]`` or ``a[start:stop, i]``.  See "
":func:`itertools.islice` for an alternate version that returns an iterator."
msgstr ""

#: ../../library/functions.rst:1545
msgid "Return a new sorted list from the items in *iterable*."
msgstr ""

#: ../../library/functions.rst:1547
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr ""

#: ../../library/functions.rst:1549
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each element in *iterable* (for example, "
"``key=str.lower``).  The default value is ``None`` (compare the elements "
"directly)."
msgstr ""

#: ../../library/functions.rst:1553
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""

#: ../../library/functions.rst:1556
msgid ""
"Use :func:`functools.cmp_to_key` to convert an old-style *cmp* function to a"
" *key* function."
msgstr ""

#: ../../library/functions.rst:1559
msgid ""
"The built-in :func:`sorted` function is guaranteed to be stable. A sort is "
"stable if it guarantees not to change the relative order of elements that "
"compare equal --- this is helpful for sorting in multiple passes (for "
"example, sort by department, then by salary grade)."
msgstr ""

#: ../../library/functions.rst:1564
msgid ""
"The sort algorithm uses only ``<`` comparisons between items.  While "
"defining an :meth:`~object.__lt__` method will suffice for sorting, :PEP:`8`"
" recommends that all six :ref:`rich comparisons <comparisons>` be "
"implemented.  This will help avoid bugs when using the same data with other "
"ordering tools such as :func:`max` that rely on a different underlying "
"method.  Implementing all six comparisons also helps avoid confusion for "
"mixed type comparisons which can call reflected the :meth:`~object.__gt__` "
"method."
msgstr ""

#: ../../library/functions.rst:1573
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""

#: ../../library/functions.rst:1577
msgid "Transform a method into a static method."
msgstr ""

#: ../../library/functions.rst:1579
msgid ""
"A static method does not receive an implicit first argument. To declare a "
"static method, use this idiom::"
msgstr ""

#: ../../library/functions.rst:1586
msgid ""
"The ``@staticmethod`` form is a function :term:`decorator` -- see "
":ref:`function` for details."
msgstr ""

#: ../../library/functions.rst:1589
msgid ""
"A static method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``)."
msgstr ""

#: ../../library/functions.rst:1592
msgid ""
"Static methods in Python are similar to those found in Java or C++. Also see"
" :func:`classmethod` for a variant that is useful for creating alternate "
"class constructors."
msgstr ""

#: ../../library/functions.rst:1596
msgid ""
"Like all decorators, it is also possible to call ``staticmethod`` as a "
"regular function and do something with its result.  This is needed in some "
"cases where you need a reference to a function from a class body and you "
"want to avoid the automatic transformation to instance method.  For these "
"cases, use this idiom::"
msgstr ""

#: ../../library/functions.rst:1605
msgid "For more information on static methods, see :ref:`types`."
msgstr ""

#: ../../library/functions.rst:1616
msgid ""
"Return a :class:`str` version of *object*.  See :func:`str` for details."
msgstr ""

#: ../../library/functions.rst:1618
msgid ""
"``str`` is the built-in string :term:`class`.  For general information about"
" strings, see :ref:`textseq`."
msgstr ""

#: ../../library/functions.rst:1624
msgid ""
"Sums *start* and the items of an *iterable* from left to right and returns "
"the total.  The *iterable*'s items are normally numbers, and the start value"
" is not allowed to be a string."
msgstr ""

#: ../../library/functions.rst:1628
msgid ""
"For some use cases, there are good alternatives to :func:`sum`. The "
"preferred, fast way to concatenate a sequence of strings is by calling "
"``''.join(sequence)``.  To add floating point values with extended "
"precision, see :func:`math.fsum`\\.  To concatenate a series of iterables, "
"consider using :func:`itertools.chain`."
msgstr ""

#: ../../library/functions.rst:1634
msgid "The *start* parameter can be specified as a keyword argument."
msgstr ""

#: ../../library/functions.rst:1639
msgid ""
"Return a proxy object that delegates method calls to a parent or sibling "
"class of *type*.  This is useful for accessing inherited methods that have "
"been overridden in a class."
msgstr ""

#: ../../library/functions.rst:1643
msgid ""
"The *object-or-type* determines the :term:`method resolution order` to be "
"searched.  The search starts from the class right after the *type*."
msgstr ""

#: ../../library/functions.rst:1647
msgid ""
"For example, if :attr:`~class.__mro__` of *object-or-type* is ``D -> B -> C "
"-> A -> object`` and the value of *type* is ``B``, then :func:`super` "
"searches ``C -> A -> object``."
msgstr ""

#: ../../library/functions.rst:1651
msgid ""
"The :attr:`~class.__mro__` attribute of the *object-or-type* lists the "
"method resolution search order used by both :func:`getattr` and "
":func:`super`.  The attribute is dynamic and can change whenever the "
"inheritance hierarchy is updated."
msgstr ""

#: ../../library/functions.rst:1656
msgid ""
"If the second argument is omitted, the super object returned is unbound.  If"
" the second argument is an object, ``isinstance(obj, type)`` must be true.  "
"If the second argument is a type, ``issubclass(type2, type)`` must be true "
"(this is useful for classmethods)."
msgstr ""

#: ../../library/functions.rst:1661
msgid ""
"There are two typical use cases for *super*.  In a class hierarchy with "
"single inheritance, *super* can be used to refer to parent classes without "
"naming them explicitly, thus making the code more maintainable.  This use "
"closely parallels the use of *super* in other programming languages."
msgstr ""

#: ../../library/functions.rst:1666
msgid ""
"The second use case is to support cooperative multiple inheritance in a "
"dynamic execution environment.  This use case is unique to Python and is not"
" found in statically compiled languages or languages that only support "
"single inheritance.  This makes it possible to implement \"diamond "
"diagrams\" where multiple base classes implement the same method.  Good "
"design dictates that such implementations have the same calling signature in"
" every case (because the order of calls is determined at runtime, because "
"that order adapts to changes in the class hierarchy, and because that order "
"can include sibling classes that are unknown prior to runtime)."
msgstr ""

#: ../../library/functions.rst:1676
msgid "For both use cases, a typical superclass call looks like this::"
msgstr ""

#: ../../library/functions.rst:1683
msgid ""
"In addition to method lookups, :func:`super` also works for attribute "
"lookups.  One possible use case for this is calling :term:`descriptors "
"<descriptor>` in a parent or sibling class."
msgstr ""

#: ../../library/functions.rst:1687
msgid ""
"Note that :func:`super` is implemented as part of the binding process for "
"explicit dotted attribute lookups such as ``super().__getitem__(name)``. It "
"does so by implementing its own :meth:`__getattribute__` method for "
"searching classes in a predictable order that supports cooperative multiple "
"inheritance. Accordingly, :func:`super` is undefined for implicit lookups "
"using statements or operators such as ``super()[name]``."
msgstr ""

#: ../../library/functions.rst:1694
msgid ""
"Also note that, aside from the zero argument form, :func:`super` is not "
"limited to use inside methods.  The two argument form specifies the "
"arguments exactly and makes the appropriate references.  The zero argument "
"form only works inside a class definition, as the compiler fills in the "
"necessary details to correctly retrieve the class being defined, as well as "
"accessing the current instance for ordinary methods."
msgstr ""

#: ../../library/functions.rst:1701
msgid ""
"For practical suggestions on how to design cooperative classes using "
":func:`super`, see `guide to using super() "
"<https://rhettinger.wordpress.com/2011/05/26/super-considered-super/>`_."
msgstr ""

#: ../../library/functions.rst:1710
msgid ""
"Rather than being a function, :class:`tuple` is actually an immutable "
"sequence type, as documented in :ref:`typesseq-tuple` and :ref:`typesseq`."
msgstr ""

#: ../../library/functions.rst:1719
msgid ""
"With one argument, return the type of an *object*.  The return value is a "
"type object and generally the same object as returned by "
":attr:`object.__class__ <instance.__class__>`."
msgstr ""

#: ../../library/functions.rst:1723
msgid ""
"The :func:`isinstance` built-in function is recommended for testing the type"
" of an object, because it takes subclasses into account."
msgstr ""

#: ../../library/functions.rst:1727
msgid ""
"With three arguments, return a new type object.  This is essentially a "
"dynamic form of the :keyword:`class` statement. The *name* string is the "
"class name and becomes the :attr:`~definition.__name__` attribute. The "
"*bases* tuple contains the base classes and becomes the "
":attr:`~class.__bases__` attribute; if empty, :class:`object`, the ultimate "
"base of all classes, is added.  The *dict* dictionary contains attribute and"
" method definitions for the class body; it may be copied or wrapped before "
"becoming the :attr:`~object.__dict__` attribute. The following two "
"statements create identical :class:`type` objects:"
msgstr ""

#: ../../library/functions.rst:1742
msgid "See also :ref:`bltin-type-objects`."
msgstr ""

#: ../../library/functions.rst:1744
msgid ""
"Keyword arguments provided to the three argument form are passed to the "
"appropriate metaclass machinery (usually :meth:`~object.__init_subclass__`) "
"in the same way that keywords in a class definition (besides *metaclass*) "
"would."
msgstr ""

#: ../../library/functions.rst:1749
msgid "See also :ref:`class-customization`."
msgstr ""

#: ../../library/functions.rst:1751
msgid ""
"Subclasses of :class:`type` which don't override ``type.__new__`` may no "
"longer use the one-argument form to get the type of an object."
msgstr ""

#: ../../library/functions.rst:1757
msgid ""
"Return the :attr:`~object.__dict__` attribute for a module, class, instance,"
" or any other object with a :attr:`~object.__dict__` attribute."
msgstr ""

#: ../../library/functions.rst:1760
msgid ""
"Objects such as modules and instances have an updateable "
":attr:`~object.__dict__` attribute; however, other objects may have write "
"restrictions on their :attr:`~object.__dict__` attributes (for example, "
"classes use a :class:`types.MappingProxyType` to prevent direct dictionary "
"updates)."
msgstr ""

#: ../../library/functions.rst:1765
msgid ""
"Without an argument, :func:`vars` acts like :func:`locals`.  Note, the "
"locals dictionary is only useful for reads since updates to the locals "
"dictionary are ignored."
msgstr ""

#: ../../library/functions.rst:1769
msgid ""
"A :exc:`TypeError` exception is raised if an object is specified but it "
"doesn't have a :attr:`~object.__dict__` attribute (for example, if its class"
" defines the :attr:`~object.__slots__` attribute)."
msgstr ""

#: ../../library/functions.rst:1775
msgid "Make an iterator that aggregates elements from each of the iterables."
msgstr ""

#: ../../library/functions.rst:1777
msgid ""
"Returns an iterator of tuples, where the *i*-th tuple contains the *i*-th "
"element from each of the argument sequences or iterables.  The iterator "
"stops when the shortest input iterable is exhausted. With a single iterable "
"argument, it returns an iterator of 1-tuples.  With no arguments, it returns"
" an empty iterator.  Equivalent to::"
msgstr ""

#: ../../library/functions.rst:1796
msgid ""
"The left-to-right evaluation order of the iterables is guaranteed. This "
"makes possible an idiom for clustering a data series into n-length groups "
"using ``zip(*[iter(s)]*n)``.  This repeats the *same* iterator ``n`` times "
"so that each output tuple has the result of ``n`` calls to the iterator. "
"This has the effect of dividing the input into n-length chunks."
msgstr ""

#: ../../library/functions.rst:1802
msgid ""
":func:`zip` should only be used with unequal length inputs when you don't "
"care about trailing, unmatched values from the longer iterables.  If those "
"values are important, use :func:`itertools.zip_longest` instead."
msgstr ""

#: ../../library/functions.rst:1806
msgid ""
":func:`zip` in conjunction with the ``*`` operator can be used to unzip a "
"list::"
msgstr ""

#: ../../library/functions.rst:1827
msgid ""
"This is an advanced function that is not needed in everyday Python "
"programming, unlike :func:`importlib.import_module`."
msgstr ""

#: ../../library/functions.rst:1830
msgid ""
"This function is invoked by the :keyword:`import` statement.  It can be "
"replaced (by importing the :mod:`builtins` module and assigning to "
"``builtins.__import__``) in order to change semantics of the "
":keyword:`!import` statement, but doing so is **strongly** discouraged as it"
" is usually simpler to use import hooks (see :pep:`302`) to attain the same "
"goals and does not cause issues with code which assumes the default import "
"implementation is in use.  Direct use of :func:`__import__` is also "
"discouraged in favor of :func:`importlib.import_module`."
msgstr ""

#: ../../library/functions.rst:1839
msgid ""
"The function imports the module *name*, potentially using the given "
"*globals* and *locals* to determine how to interpret the name in a package "
"context. The *fromlist* gives the names of objects or submodules that should"
" be imported from the module given by *name*.  The standard implementation "
"does not use its *locals* argument at all, and uses its *globals* only to "
"determine the package context of the :keyword:`import` statement."
msgstr ""

#: ../../library/functions.rst:1846
msgid ""
"*level* specifies whether to use absolute or relative imports. ``0`` (the "
"default) means only perform absolute imports.  Positive values for *level* "
"indicate the number of parent directories to search relative to the "
"directory of the module calling :func:`__import__` (see :pep:`328` for the "
"details)."
msgstr ""

#: ../../library/functions.rst:1852
msgid ""
"When the *name* variable is of the form ``package.module``, normally, the "
"top-level package (the name up till the first dot) is returned, *not* the "
"module named by *name*.  However, when a non-empty *fromlist* argument is "
"given, the module named by *name* is returned."
msgstr ""

#: ../../library/functions.rst:1857
msgid ""
"For example, the statement ``import spam`` results in bytecode resembling "
"the following code::"
msgstr ""

#: ../../library/functions.rst:1862
msgid "The statement ``import spam.ham`` results in this call::"
msgstr ""

#: ../../library/functions.rst:1866
msgid ""
"Note how :func:`__import__` returns the toplevel module here because this is"
" the object that is bound to a name by the :keyword:`import` statement."
msgstr ""

#: ../../library/functions.rst:1869
msgid ""
"On the other hand, the statement ``from spam.ham import eggs, sausage as "
"saus`` results in ::"
msgstr ""

#: ../../library/functions.rst:1876
msgid ""
"Here, the ``spam.ham`` module is returned from :func:`__import__`.  From "
"this object, the names to import are retrieved and assigned to their "
"respective names."
msgstr ""

#: ../../library/functions.rst:1880
msgid ""
"If you simply want to import a module (potentially within a package) by "
"name, use :func:`importlib.import_module`."
msgstr ""

#: ../../library/functions.rst:1883
msgid ""
"Negative values for *level* are no longer supported (which also changes the "
"default value to 0)."
msgstr ""

#: ../../library/functions.rst:1887
msgid ""
"When the command line options :option:`-E` or :option:`-I` are being used, "
"the environment variable :envvar:`PYTHONCASEOK` is now ignored."
msgstr ""

#: ../../library/functions.rst:1892
msgid "Footnotes"
msgstr "备注"

#: ../../library/functions.rst:1893
msgid ""
"Note that the parser only accepts the Unix-style end of line convention. If "
"you are reading the code from a file, make sure to use newline conversion "
"mode to convert Windows or Mac-style newlines."
msgstr ""
