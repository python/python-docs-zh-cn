# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/runpy.rst:2
msgid ":mod:`runpy` --- Locating and executing Python modules"
msgstr ""

#: ../../library/runpy.rst:9
msgid "**Source code:** :source:`Lib/runpy.py`"
msgstr ""

#: ../../library/runpy.rst:13
msgid ""
"The :mod:`runpy` module is used to locate and run Python modules without "
"importing them first. Its main use is to implement the :option:`-m` command "
"line switch that allows scripts to be located using the Python module "
"namespace rather than the filesystem."
msgstr ""

#: ../../library/runpy.rst:18
msgid ""
"Note that this is *not* a sandbox module - all code is executed in the "
"current process, and any side effects (such as cached imports of other "
"modules) will remain in place after the functions have returned."
msgstr ""

#: ../../library/runpy.rst:22
msgid ""
"Furthermore, any functions and classes defined by the executed code are not "
"guaranteed to work correctly after a :mod:`runpy` function has returned. If "
"that limitation is not acceptable for a given use case, :mod:`importlib` is "
"likely to be a more suitable choice than this module."
msgstr ""

#: ../../library/runpy.rst:27
msgid "The :mod:`runpy` module provides two functions:"
msgstr ""

#: ../../library/runpy.rst:35
msgid ""
"Execute the code of the specified module and return the resulting module "
"globals dictionary. The module's code is first located using the standard "
"import mechanism (refer to :pep:`302` for details) and then executed in a "
"fresh module namespace."
msgstr ""

#: ../../library/runpy.rst:40
msgid ""
"The *mod_name* argument should be an absolute module name. If the module "
"name refers to a package rather than a normal module, then that package is "
"imported and the ``__main__`` submodule within that package is then executed"
" and the resulting module globals dictionary returned."
msgstr ""

#: ../../library/runpy.rst:46
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_module`."
msgstr ""

#: ../../library/runpy.rst:52 ../../library/runpy.rst:121
msgid ""
"The special global variables ``__name__``, ``__spec__``, ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` are set in the globals "
"dictionary before the module code is executed (Note that this is a minimal "
"set of variables - other variables may be set implicitly as an interpreter "
"implementation detail)."
msgstr ""

#: ../../library/runpy.rst:58
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not "
":const:`None`, to ``mod_name + '.__main__'`` if the named module is a "
"package and to the *mod_name* argument otherwise."
msgstr ""

#: ../../library/runpy.rst:62
msgid ""
"``__spec__`` will be set appropriately for the *actually* imported module "
"(that is, ``__spec__.name`` will always be *mod_name* or ``mod_name + "
"'.__main__``, never *run_name*)."
msgstr ""

#: ../../library/runpy.rst:66
msgid ""
"``__file__``, ``__cached__``, ``__loader__`` and ``__package__`` are "
":ref:`set as normal <import-mod-attrs>` based on the module spec."
msgstr ""

#: ../../library/runpy.rst:69
msgid ""
"If the argument *alter_sys* is supplied and evaluates to :const:`True`, then"
" ``sys.argv[0]`` is updated with the value of ``__file__`` and "
"``sys.modules[__name__]`` is updated with a temporary module object for the "
"module being executed. Both ``sys.argv[0]`` and ``sys.modules[__name__]`` "
"are restored to their original values before the function returns."
msgstr ""

#: ../../library/runpy.rst:75
msgid ""
"Note that this manipulation of :mod:`sys` is not thread-safe. Other threads "
"may see the partially initialised module, as well as the altered list of "
"arguments. It is recommended that the :mod:`sys` module be left alone when "
"invoking this function from threaded code."
msgstr ""

#: ../../library/runpy.rst:81
msgid ""
"The :option:`-m` option offering equivalent functionality from the command "
"line."
msgstr ""

#: ../../library/runpy.rst:84
msgid ""
"Added ability to execute packages by looking for a ``__main__`` submodule."
msgstr ""

#: ../../library/runpy.rst:87
msgid "Added ``__cached__`` global variable (see :pep:`3147`)."
msgstr ""

#: ../../library/runpy.rst:90
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly for modules run this way, as "
"well as ensuring the real module name is always accessible as "
"``__spec__.name``."
msgstr ""

#: ../../library/runpy.rst:101
msgid ""
"Execute the code at the named filesystem location and return the resulting "
"module globals dictionary. As with a script name supplied to the CPython "
"command line, the supplied path may refer to a Python source file, a "
"compiled bytecode file or a valid sys.path entry containing a ``__main__`` "
"module (e.g. a zipfile containing a top-level ``__main__.py`` file)."
msgstr ""

#: ../../library/runpy.rst:107
msgid ""
"For a simple script, the specified code is simply executed in a fresh module"
" namespace. For a valid sys.path entry (typically a zipfile or directory), "
"the entry is first added to the beginning of ``sys.path``. The function then"
" looks for and executes a :mod:`__main__` module using the updated path. "
"Note that there is no special protection against invoking an existing "
":mod:`__main__` entry located elsewhere on ``sys.path`` if there is no such "
"module at the specified location."
msgstr ""

#: ../../library/runpy.rst:115
msgid ""
"The optional dictionary argument *init_globals* may be used to pre-populate "
"the module's globals dictionary before the code is executed. The supplied "
"dictionary will not be modified. If any of the special global variables "
"below are defined in the supplied dictionary, those definitions are "
"overridden by :func:`run_path`."
msgstr ""

#: ../../library/runpy.rst:127
msgid ""
"``__name__`` is set to *run_name* if this optional argument is not "
":const:`None` and to ``'<run_path>'`` otherwise."
msgstr ""

#: ../../library/runpy.rst:130
msgid ""
"If the supplied path directly references a script file (whether as source or"
" as precompiled byte code), then ``__file__`` will be set to the supplied "
"path, and ``__spec__``, ``__cached__``, ``__loader__`` and ``__package__`` "
"will all be set to :const:`None`."
msgstr ""

#: ../../library/runpy.rst:135
msgid ""
"If the supplied path is a reference to a valid sys.path entry, then "
"``__spec__`` will be set appropriately for the imported ``__main__`` module "
"(that is, ``__spec__.name`` will always be ``__main__``). ``__file__``, "
"``__cached__``, ``__loader__`` and ``__package__`` will be :ref:`set as "
"normal <import-mod-attrs>` based on the module spec."
msgstr ""

#: ../../library/runpy.rst:141
msgid ""
"A number of alterations are also made to the :mod:`sys` module. Firstly, "
"``sys.path`` may be altered as described above. ``sys.argv[0]`` is updated "
"with the value of ``path_name`` and ``sys.modules[__name__]`` is updated "
"with a temporary module object for the module being executed. All "
"modifications to items in :mod:`sys` are reverted before the function "
"returns."
msgstr ""

#: ../../library/runpy.rst:148
msgid ""
"Note that, unlike :func:`run_module`, the alterations made to :mod:`sys` are"
" not optional in this function as these adjustments are essential to "
"allowing the execution of sys.path entries. As the thread-safety limitations"
" still apply, use of this function in threaded code should be either "
"serialised with the import lock or delegated to a separate process."
msgstr ""

#: ../../library/runpy.rst:155
msgid ""
":ref:`using-on-interface-options` for equivalent functionality on the "
"command line (``python path/to/script``)."
msgstr ""

#: ../../library/runpy.rst:160
msgid ""
"Updated to take advantage of the module spec feature added by :pep:`451`. "
"This allows ``__cached__`` to be set correctly in the case where "
"``__main__`` is imported from a valid sys.path entry rather than being "
"executed directly."
msgstr ""

#: ../../library/runpy.rst:169
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ""

#: ../../library/runpy.rst:169 ../../library/runpy.rst:172
msgid "PEP written and implemented by Nick Coghlan."
msgstr ""

#: ../../library/runpy.rst:172
msgid ":pep:`366` -- Main module explicit relative imports"
msgstr ""

#: ../../library/runpy.rst:175
msgid ":pep:`451` -- A ModuleSpec Type for the Import System"
msgstr ""

#: ../../library/runpy.rst:175
msgid "PEP written and implemented by Eric Snow"
msgstr ""

#: ../../library/runpy.rst:177
msgid ":ref:`using-on-general` - CPython command line details"
msgstr ""

#: ../../library/runpy.rst:179
msgid "The :func:`importlib.import_module` function"
msgstr ""
