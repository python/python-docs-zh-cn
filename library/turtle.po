# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# ww song <sww4718168@gmail.com>, 2021
# sgqy <sgqyzh@gmail.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2023
# stone jing <stonejing1817@gmail.com>, 2023
# lian Wu (Wulian) <xiguawulian@gmail.com>, 2024
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:16+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/turtle.rst:3
msgid ":mod:`!turtle` --- Turtle graphics"
msgstr ":mod:`!turtle` --- 海龟绘图"

#: ../../library/turtle.rst:10
msgid "**Source code:** :source:`Lib/turtle.py`"
msgstr "**源码：** :source:`Lib/turtle.py`"

#: ../../library/turtle.rst:25
msgid "Introduction"
msgstr "概述"

#: ../../library/turtle.rst:27
msgid ""
"Turtle graphics is an implementation of `the popular geometric drawing tools"
" introduced in Logo <https://en.wikipedia.org/wiki/Turtle_ (robot)>`_, "
"developed by Wally Feurzeig, Seymour Papert and Cynthia Solomon in 1967."
msgstr ""
"海龟绘图是对 `最早在 Logo 中引入的受欢迎的几何绘图工具 <https://en.wikipedia.org/wiki/Turtle_ "
"(robot)>`_ 的实现，它由 Wally Feurzeig, Seymour Papert 和 Cynthia Solomon 在 1967 "
"年开发。"

#: ../../library/turtle.rst:34
msgid "Get started"
msgstr "入门"

#: ../../library/turtle.rst:36
msgid ""
"Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an "
"``import turtle``, give it the command ``turtle.forward(15)``, and it moves "
"(on-screen!) 15 pixels in the direction it is facing, drawing a line as it "
"moves.  Give it the command ``turtle.right(25)``, and it rotates in-place 25"
" degrees clockwise."
msgstr ""
"请想象绘图区有一只机器海龟，起始位置在 x-y 平面的 (0, 0) 点。先执行 ``import turtle``，再执行 "
"``turtle.forward(15)``，它将(在屏幕上)朝所面对的 x 轴正方向前进 15 像素，随着它的移动画出一条线段。再执行 "
"``turtle.right(25)``，它将原地右转 25 度。"

#: ../../library/turtle.rst:43
msgid ""
"Turtle can draw intricate shapes using programs that repeat simple moves."
msgstr "使用海龟绘图可以编写重复执行简单动作的程序画出精细复杂的形状。"

#: ../../library/turtle.rst:49
msgid ""
"In Python, turtle graphics provides a representation of a physical "
"\"turtle\" (a little robot with a pen) that draws on a sheet of paper on the"
" floor."
msgstr "在 Python 中，海龟绘图提供了一个实体“海龟”形象（带有画笔的小机器动物），假定它在地板上平铺的纸张上画线。"

#: ../../library/turtle.rst:52
msgid ""
"It's an effective and well-proven way for learners to encounter programming "
"concepts and interaction with software, as it provides instant, visible "
"feedback. It also provides convenient access to graphical output in general."
msgstr "对于学习者来说这是一种接触编程概念和与软件交互的高效且久经验证的方式，因为它能提供即时、可见的反馈。 它还能提供方便直观的图形输出。"

#: ../../library/turtle.rst:57
msgid ""
"Turtle drawing was originally created as an educational tool, to be used by "
"teachers in the classroom. For the programmer who needs to produce some "
"graphical output it can be a way to do that without the overhead of "
"introducing more complex or external libraries into their work."
msgstr ""
"海龟绘图最初是作为一种教学工具被创建的，供教师在课堂上使用。 对于需要生成一些图形输出的程序员来说这是一种无需在工作中引入更高复杂度或外部库的方式。"

#: ../../library/turtle.rst:66
msgid "Tutorial"
msgstr "教程"

#: ../../library/turtle.rst:68
msgid ""
"New users should start here. In this tutorial we'll explore some of the "
"basics of turtle drawing."
msgstr "新用户应当从这里开始。 在本教程中我们将探索海龟绘图的一些基本知识。"

#: ../../library/turtle.rst:73
msgid "Starting a turtle environment"
msgstr "启动海龟环境"

#: ../../library/turtle.rst:75
msgid "In a Python shell, import all the objects of the ``turtle`` module::"
msgstr "在 Python shell 中，导入 ``turtle`` 模块的所有对象::"

#: ../../library/turtle.rst:77
msgid "from turtle import *"
msgstr "from turtle import *"

#: ../../library/turtle.rst:79
msgid ""
"If you run into a ``No module named '_tkinter'`` error, you'll have to "
"install the :mod:`Tk interface package <tkinter>` on your system."
msgstr ""
"如果你遇到了 ``No module named '_tkinter'`` 错误，则需要在你的系统中安装 :mod:`Tk 接口包 "
"<tkinter>`。"

#: ../../library/turtle.rst:84
msgid "Basic drawing"
msgstr "基本绘图"

#: ../../library/turtle.rst:86
msgid "Send the turtle forward 100 steps::"
msgstr "让海龟前进 100 步::"

#: ../../library/turtle.rst:88
msgid "forward(100)"
msgstr "forward(100)"

#: ../../library/turtle.rst:90
msgid ""
"You should see (most likely, in a new window on your display) a line drawn "
"by the turtle, heading East. Change the direction of the turtle, so that it "
"turns 120 degrees left (anti-clockwise)::"
msgstr ""
"你应该会看到（最可能的情况，是在你的显示器的一个新窗口中）海龟画出一条线段，方向朝东。 改变海龟的方向，让它向左转 120 度（逆时针）::"

#: ../../library/turtle.rst:94
msgid "left(120)"
msgstr "left(120)"

#: ../../library/turtle.rst:96
msgid "Let's continue by drawing a triangle::"
msgstr "让我们继续画一个三角形::"

#: ../../library/turtle.rst:98
msgid ""
"forward(100)\n"
"left(120)\n"
"forward(100)"
msgstr ""
"forward(100)\n"
"left(120)\n"
"forward(100)"

#: ../../library/turtle.rst:102
msgid ""
"Notice how the turtle, represented by an arrow, points in different "
"directions as you steer it."
msgstr "注意以一个箭头表示的海龟是如何随着你的操纵指向不同方向的。"

#: ../../library/turtle.rst:105
msgid ""
"Experiment with those commands, and also with ``backward()`` and "
"``right()``."
msgstr "请继续尝试这些命令，还可以使用 ``backward()`` 和 ``right()``。"

#: ../../library/turtle.rst:110 ../../library/turtle.rst:364
#: ../../library/turtle.rst:1058
msgid "Pen control"
msgstr "画笔控制"

#: ../../library/turtle.rst:112
msgid ""
"Try changing the color - for example, ``color('blue')`` - and width of the "
"line - for example, ``width(3)`` - and then drawing again."
msgstr "试着改变颜色 —— 例如，``color('blue')`` 和线宽 —— 例如，``width(3)`` 然后再次绘制。"

#: ../../library/turtle.rst:115
msgid ""
"You can also move the turtle around without drawing, by lifting up the pen: "
"``up()`` before moving. To start drawing again, use ``down()``."
msgstr "您也可以在不绘制线条的情况下移动海龟，即在移动前抬起画笔: ``up()``。 要重新开始绘制，请使用 ``down()``。"

#: ../../library/turtle.rst:120
msgid "The turtle's position"
msgstr "海龟的位置"

#: ../../library/turtle.rst:122
msgid ""
"Send your turtle back to its starting-point (useful if it has disappeared "
"off-screen)::"
msgstr "将海龟送回起点（这适用于海龟消失在屏幕之外的情况）::"

#: ../../library/turtle.rst:125
msgid "home()"
msgstr "home()"

#: ../../library/turtle.rst:127
msgid ""
"The home position is at the center of the turtle's screen. If you ever need "
"to know them, get the turtle's x-y coordinates with::"
msgstr "初始位置在海龟屏幕的中心。 如果你需要知道具体数值，可以这样获取海龟的 x-y 坐标::"

#: ../../library/turtle.rst:130
msgid "pos()"
msgstr "pos()"

#: ../../library/turtle.rst:132
msgid "Home is at ``(0, 0)``."
msgstr "初始点在 ``(0, 0)``。"

#: ../../library/turtle.rst:134
msgid ""
"And after a while, it will probably help to clear the window so we can start"
" anew::"
msgstr "过一段时间后，也许可以考虑清空窗口这样我们就可以重新开始::"

#: ../../library/turtle.rst:137
msgid "clearscreen()"
msgstr "clearscreen()"

#: ../../library/turtle.rst:141
msgid "Making algorithmic patterns"
msgstr "使用算法绘制图案"

#: ../../library/turtle.rst:143
msgid "Using loops, it's possible to build up geometric patterns::"
msgstr "使用循环，可以构建出各种几何图案::"

#: ../../library/turtle.rst:145
msgid ""
"for steps in range(100):\n"
"    for c in ('blue', 'red', 'green'):\n"
"        color(c)\n"
"        forward(steps)\n"
"        right(30)"
msgstr ""
"for steps in range(100):\n"
"    for c in ('blue', 'red', 'green'):\n"
"        color(c)\n"
"        forward(steps)\n"
"        right(30)"

#: ../../library/turtle.rst:152
msgid "\\ - which of course, are limited only by the imagination!"
msgstr "\\ - 当然，这仅受限于你的想象力！"

#: ../../library/turtle.rst:154
msgid ""
"Let's draw the star shape at the top of this page. We want red lines, filled"
" in with yellow::"
msgstr "让我们绘制本页面顶部的星形。 我们想要用红色线条，黄色填充::"

#: ../../library/turtle.rst:157
msgid ""
"color('red')\n"
"fillcolor('yellow')"
msgstr ""
"color('red')\n"
"fillcolor('yellow')"

#: ../../library/turtle.rst:160
msgid ""
"Just as ``up()`` and ``down()`` determine whether lines will be drawn, "
"filling can be turned on and off::"
msgstr "就像用 ``up()`` 和 ``down()`` 决定是否画线一样，填充也可以打开或关闭::"

#: ../../library/turtle.rst:163
msgid "begin_fill()"
msgstr "begin_fill()"

#: ../../library/turtle.rst:165
msgid "Next we'll create a loop::"
msgstr "接下来我们将创建一个循环::"

#: ../../library/turtle.rst:167
msgid ""
"while True:\n"
"    forward(200)\n"
"    left(170)\n"
"    if abs(pos()) < 1:\n"
"        break"
msgstr ""
"while True:\n"
"    forward(200)\n"
"    left(170)\n"
"    if abs(pos()) < 1:\n"
"        break"

#: ../../library/turtle.rst:173
msgid ""
"``abs(pos()) < 1`` is a good way to know when the turtle is back at its home"
" position."
msgstr "``abs(pos()) < 1`` 是确定海龟何时回到初始点的好办法。"

#: ../../library/turtle.rst:176
msgid "Finally, complete the filling::"
msgstr "最后，完成填充::"

#: ../../library/turtle.rst:178
msgid "end_fill()"
msgstr "end_fill()"

#: ../../library/turtle.rst:180
msgid ""
"(Note that filling only actually takes place when you give the "
"``end_fill()`` command.)"
msgstr "（请注意只有在你给出 ``end_fill()`` 命令时才会实际进行填充。）"

#: ../../library/turtle.rst:187
msgid "How to..."
msgstr "如何..."

#: ../../library/turtle.rst:189
msgid "This section covers some typical turtle use-cases and approaches."
msgstr "本节介绍一些典型的海龟使用案例和操作方式。"

#: ../../library/turtle.rst:193
msgid "Get started as quickly as possible"
msgstr "尽快地开始"

#: ../../library/turtle.rst:195
msgid ""
"One of the joys of turtle graphics is the immediate, visual feedback that's "
"available from simple commands - it's an excellent way to introduce children"
" to programming ideas, with a minimum of overhead (not just children, of "
"course)."
msgstr ""
"海龟绘图形的乐趣之一在于通过简单的命令就能获得即时的视觉反馈 —— 这是一种向儿童介绍编程理念的绝佳方式，而且开销最小（当然，不仅适用于儿童）。"

#: ../../library/turtle.rst:200
msgid ""
"The turtle module makes this possible by exposing all its basic "
"functionality as functions, available with ``from turtle import *``. The "
":ref:`turtle graphics tutorial <turtle-tutorial>` covers this approach."
msgstr ""
"海龟模块将其所有基本功能作为函数公开，并通过 ``from turtle import *`` 提供使这一切成为可能。 :ref:`海龟绘图教程 "
"<turtle-tutorial>` 介绍了相关的步骤。"

#: ../../library/turtle.rst:204
msgid ""
"It's worth noting that many of the turtle commands also have even more terse"
" equivalents, such as ``fd()`` for :func:`forward`. These are especially "
"useful when working with learners for whom typing is not a skill."
msgstr ""
"值得注意的是许多海乌命令还有更简洁的等价形式，例如 ``fd()`` 对应 :func:`forward`。 对于不擅长打字的学习者来说这尤其有用。"

#: ../../library/turtle.rst:210
msgid ""
"You'll need to have the :mod:`Tk interface package <tkinter>` installed on "
"your system for turtle graphics to work. Be warned that this is not always "
"straightforward, so check this in advance if you're planning to use turtle "
"graphics with a learner."
msgstr ""
"你需要在系统中安装 :mod:`Tk 接口软件包 <tkinter>`，才能使用海龟绘图。 "
"请注意这并不总是很容易做到的，所以如果你打算让学习者使用海龟绘图请事先检查这一点。"

#: ../../library/turtle.rst:217
msgid "Automatically begin and end filling"
msgstr "自动开始和结束填充"

#: ../../library/turtle.rst:219
msgid ""
"Starting with Python 3.14, you can use the :func:`fill` :term:`context "
"manager` instead of :func:`begin_fill` and :func:`end_fill` to automatically"
" begin and end fill. Here is an example::"
msgstr ""
"从 Python 3.14 开始，你可以使用 :func:`fill` :term:`context manager` 来代替 "
":func:`begin_fill` 和 :func:`end_fill` 以自动开始和结束填充。 下面是一个示例::"

#: ../../library/turtle.rst:223
msgid ""
"with fill():\n"
"    for i in range(4):\n"
"        forward(100)\n"
"        right(90)\n"
"\n"
"forward(200)"
msgstr ""
"with fill():\n"
"    for i in range(4):\n"
"        forward(100)\n"
"        right(90)\n"
"\n"
"forward(200)"

#: ../../library/turtle.rst:230
msgid "The code above is equivalent to::"
msgstr "上面的代码等价于::"

#: ../../library/turtle.rst:232
msgid ""
"begin_fill()\n"
"for i in range(4):\n"
"    forward(100)\n"
"    right(90)\n"
"end_fill()\n"
"\n"
"forward(200)"
msgstr ""
"begin_fill()\n"
"for i in range(4):\n"
"    forward(100)\n"
"    right(90)\n"
"end_fill()\n"
"\n"
"forward(200)"

#: ../../library/turtle.rst:242
msgid "Use the ``turtle`` module namespace"
msgstr "使用 ``turtle`` 模块命名空间"

#: ../../library/turtle.rst:244
msgid ""
"Using ``from turtle import *`` is convenient - but be warned that it imports"
" a rather large collection of objects, and if you're doing anything but "
"turtle graphics you run the risk of a name conflict (this becomes even more "
"an issue if you're using turtle graphics in a script where other modules "
"might be imported)."
msgstr ""
"使用 ``from turtle import *`` 是很方便 —— "
"但要注意它导入的对象集相当大，如果你还在做海龟绘图以外的事情就有发生名称冲突的风险（如果你在可能导入了其他模块的脚本中使用海龟绘图则可能会遇到更大的问题）。"

#: ../../library/turtle.rst:250
msgid ""
"The solution is to use ``import turtle`` - ``fd()`` becomes ``turtle.fd()``,"
" ``width()`` becomes ``turtle.width()`` and so on. (If typing \"turtle\" "
"over and over again becomes tedious, use for example ``import turtle as t`` "
"instead.)"
msgstr ""
"解决办法是使用 ``import turtle`` —— ``fd()`` 将变成 ``turtle.fd()``，``width()`` 将变成 "
"``turtle.width()`` 等等。 （如果反复输入“turtle”太过烦琐，还可改成 ``import turtle as t`` 等。）"

#: ../../library/turtle.rst:257
msgid "Use turtle graphics in a script"
msgstr "在脚本中使用海龟绘图"

#: ../../library/turtle.rst:259
msgid ""
"It's recommended to use the ``turtle`` module namespace as described "
"immediately above, for example::"
msgstr "建议使用上文所述的 ``turtle`` 模块命名空间，例如::"

#: ../../library/turtle.rst:262
msgid ""
"import turtle as t\n"
"from random import random\n"
"\n"
"for i in range(100):\n"
"    steps = int(random() * 100)\n"
"    angle = int(random() * 360)\n"
"    t.right(angle)\n"
"    t.fd(steps)"
msgstr ""
"import turtle as t\n"
"from random import random\n"
"\n"
"for i in range(100):\n"
"    steps = int(random() * 100)\n"
"    angle = int(random() * 360)\n"
"    t.right(angle)\n"
"    t.fd(steps)"

#: ../../library/turtle.rst:271
msgid ""
"Another step is also required though - as soon as the script ends, Python "
"will also close the turtle's window. Add::"
msgstr "但还需要另一个步骤 —— 因为一旦脚本结束，Python 将会同时关闭海龟的窗口。 请添加::"

#: ../../library/turtle.rst:274
msgid "t.mainloop()"
msgstr "t.mainloop()"

#: ../../library/turtle.rst:276
msgid ""
"to the end of the script. The script will now wait to be dismissed and will "
"not exit until it is terminated, for example by closing the turtle graphics "
"window."
msgstr "到脚本的末尾。 现在脚本将等待被关闭而不会自动退出直到被主动终止，例如海龟绘图窗口被关闭。"

#: ../../library/turtle.rst:282
msgid "Use object-oriented turtle graphics"
msgstr "使用面向对象的海龟绘图"

#: ../../library/turtle.rst:284
msgid ""
":ref:`Explanation of the object-oriented interface <turtle-explanation>`"
msgstr ":ref:`面向对象接口说明 <turtle-explanation>`"

#: ../../library/turtle.rst:286
msgid ""
"Other than for very basic introductory purposes, or for trying things out as"
" quickly as possible, it's more usual and much more powerful to use the "
"object-oriented approach to turtle graphics. For example, this allows "
"multiple turtles on screen at once."
msgstr "除了非常基本的入门目的，或是尽快尝试操作之外，使用面向对象的方式进行海龟绘图更为常见也更为强大。 例如，这将允许屏幕上同时存在多只海龟。"

#: ../../library/turtle.rst:291
msgid ""
"In this approach, the various turtle commands are methods of objects (mostly"
" of ``Turtle`` objects). You *can* use the object-oriented approach in the "
"shell, but it would be more typical in a Python script."
msgstr ""
"在这种方式下，各种海龟命令都是对象（主要是 ``Turtle`` 对象）的方法。 你 *可以* 在 shell 中使用面向对象的方法，但在 Python"
" 脚本中使用是更为典型的做法。"

#: ../../library/turtle.rst:295
msgid "The example above then becomes::"
msgstr "这样上面的例子就将变成::"

#: ../../library/turtle.rst:297
msgid ""
"from turtle import Turtle\n"
"from random import random\n"
"\n"
"t = Turtle()\n"
"for i in range(100):\n"
"    steps = int(random() * 100)\n"
"    angle = int(random() * 360)\n"
"    t.right(angle)\n"
"    t.fd(steps)\n"
"\n"
"t.screen.mainloop()"
msgstr ""
"from turtle import Turtle\n"
"from random import random\n"
"\n"
"t = Turtle()\n"
"for i in range(100):\n"
"    steps = int(random() * 100)\n"
"    angle = int(random() * 360)\n"
"    t.right(angle)\n"
"    t.fd(steps)\n"
"\n"
"t.screen.mainloop()"

#: ../../library/turtle.rst:309
msgid ""
"Note the last line. ``t.screen`` is an instance of the :class:`Screen` that "
"a Turtle instance exists on; it's created automatically along with the "
"turtle."
msgstr ""
"请注意最后一行。 ``t.screen`` 是 Turtle 实例所在的 :class:`Screen` 的实例；它是与海龟一起自动创建的。"

#: ../../library/turtle.rst:313
msgid "The turtle's screen can be customised, for example::"
msgstr "海龟的屏幕可以被自定义，例如::"

#: ../../library/turtle.rst:315
msgid ""
"t.screen.title('Object-oriented turtle demo')\n"
"t.screen.bgcolor(\"orange\")"
msgstr ""
"t.screen.title('Object-oriented turtle demo')\n"
"t.screen.bgcolor(\"orange\")"

#: ../../library/turtle.rst:320
msgid "Turtle graphics reference"
msgstr "海龟绘图参考"

#: ../../library/turtle.rst:324
msgid ""
"In the following documentation the argument list for functions is given. "
"Methods, of course, have the additional first argument *self* which is "
"omitted here."
msgstr "以下文档给出了函数的参数列表。对于方法来说当然还有额外的第一个参数 *self*，这里省略了。"

#: ../../library/turtle.rst:330
msgid "Turtle methods"
msgstr "Turtle 方法"

#: ../../library/turtle.rst:332 ../../library/turtle.rst:475
msgid "Turtle motion"
msgstr "海龟动作"

#: ../../library/turtle.rst:333
msgid "Move and draw"
msgstr "移动和绘制"

#: ../../library/turtle.rst:0
msgid ":func:`forward` | :func:`fd`"
msgstr ":func:`forward` | :func:`fd` 前进"

#: ../../library/turtle.rst:0
msgid ":func:`backward` | :func:`bk` | :func:`back`"
msgstr ":func:`backward` | :func:`bk` | :func:`back` 后退"

#: ../../library/turtle.rst:0
msgid ":func:`right` | :func:`rt`"
msgstr ":func:`right` | :func:`rt` 右转"

#: ../../library/turtle.rst:0
msgid ":func:`left` | :func:`lt`"
msgstr ":func:`left` | :func:`lt` 左转"

#: ../../library/turtle.rst:0
msgid ":func:`goto` | :func:`setpos` | :func:`setposition`"
msgstr ":func:`goto` | :func:`setpos` | :func:`setposition` 前往/定位"

#: ../../library/turtle.rst:0
msgid ":func:`teleport`"
msgstr ":func:`teleport`"

#: ../../library/turtle.rst:0
msgid ":func:`setx`"
msgstr ":func:`setx` 设置x坐标"

#: ../../library/turtle.rst:0
msgid ":func:`sety`"
msgstr ":func:`sety` 设置y坐标"

#: ../../library/turtle.rst:0
msgid ":func:`setheading` | :func:`seth`"
msgstr ":func:`setheading` | :func:`seth` 设置朝向"

#: ../../library/turtle.rst:0
msgid ":func:`home`"
msgstr ":func:`home` 返回原点"

#: ../../library/turtle.rst:0 ../../library/turtle.rst:2832
msgid ":func:`circle`"
msgstr ":func:`circle` 画圆"

#: ../../library/turtle.rst:0
msgid ":func:`dot`"
msgstr ":func:`dot` 画点"

#: ../../library/turtle.rst:0 ../../library/turtle.rst:2810
msgid ":func:`stamp`"
msgstr ":func:`stamp` 印章"

#: ../../library/turtle.rst:0
msgid ":func:`clearstamp`"
msgstr ":func:`clearstamp` 清除印章"

#: ../../library/turtle.rst:0
msgid ":func:`clearstamps`"
msgstr ":func:`clearstamps` 清除多个印章"

#: ../../library/turtle.rst:0
msgid ":func:`undo`"
msgstr ":func:`undo` 撤消"

#: ../../library/turtle.rst:0
msgid ":func:`speed`"
msgstr ":func:`speed` 速度"

#: ../../library/turtle.rst:352 ../../library/turtle.rst:907
msgid "Tell Turtle's state"
msgstr "获取海龟的状态"

#: ../../library/turtle.rst:0
msgid ":func:`position` | :func:`pos`"
msgstr ":func:`position` | :func:`pos` 位置"

#: ../../library/turtle.rst:0
msgid ":func:`towards`"
msgstr ":func:`towards` 目标方向"

#: ../../library/turtle.rst:0
msgid ":func:`xcor`"
msgstr ":func:`xcor` x坐标"

#: ../../library/turtle.rst:0
msgid ":func:`ycor`"
msgstr ":func:`ycor` y坐标"

#: ../../library/turtle.rst:0
msgid ":func:`heading`"
msgstr ":func:`heading` 朝向"

#: ../../library/turtle.rst:0
msgid ":func:`distance`"
msgstr ":func:`distance` 距离"

#: ../../library/turtle.rst:360
msgid "Setting and measurement"
msgstr "设置与度量单位"

#: ../../library/turtle.rst:0
msgid ":func:`degrees`"
msgstr ":func:`degrees` 角度"

#: ../../library/turtle.rst:0
msgid ":func:`radians`"
msgstr ":func:`radians` 弧度"

#: ../../library/turtle.rst:365 ../../library/turtle.rst:1061
msgid "Drawing state"
msgstr "绘图状态"

#: ../../library/turtle.rst:0
msgid ":func:`pendown` | :func:`pd` | :func:`down`"
msgstr ":func:`pendown` | :func:`pd` | :func:`down` 画笔落下"

#: ../../library/turtle.rst:0
msgid ":func:`penup` | :func:`pu` | :func:`up`"
msgstr ":func:`penup` | :func:`pu` | :func:`up` 画笔抬起"

#: ../../library/turtle.rst:0
msgid ":func:`pensize` | :func:`width`"
msgstr ":func:`pensize` | :func:`width` 画笔粗细"

#: ../../library/turtle.rst:0
msgid ":func:`pen`"
msgstr ":func:`pen` 画笔"

#: ../../library/turtle.rst:0
msgid ":func:`isdown`"
msgstr ":func:`isdown` 画笔是否落下"

#: ../../library/turtle.rst:372 ../../library/turtle.rst:1153
msgid "Color control"
msgstr "颜色控制"

#: ../../library/turtle.rst:0
msgid ":func:`color`"
msgstr ":func:`color` 颜色"

#: ../../library/turtle.rst:0
msgid ":func:`pencolor`"
msgstr ":func:`pencolor` 画笔颜色"

#: ../../library/turtle.rst:0
msgid ":func:`fillcolor`"
msgstr ":func:`fillcolor` 填充颜色"

#: ../../library/turtle.rst:377 ../../library/turtle.rst:1285
msgid "Filling"
msgstr "填充"

#: ../../library/turtle.rst:0
msgid ":func:`filling`"
msgstr ":func:`filling` 是否填充"

#: ../../library/turtle.rst:0
msgid ":func:`fill`"
msgstr ":func:`fill`"

#: ../../library/turtle.rst:0
msgid ":func:`begin_fill`"
msgstr ":func:`begin_fill` 开始填充"

#: ../../library/turtle.rst:0
msgid ":func:`end_fill`"
msgstr ":func:`end_fill` 结束填充"

#: ../../library/turtle.rst:383 ../../library/turtle.rst:1355
msgid "More drawing control"
msgstr "更多绘图控制"

#: ../../library/turtle.rst:0
msgid ":func:`reset`"
msgstr ":func:`reset` 重置"

#: ../../library/turtle.rst:0
msgid ":func:`clear`"
msgstr ":func:`clear` 清空"

#: ../../library/turtle.rst:0
msgid ":func:`write`"
msgstr ":func:`write` 书写"

#: ../../library/turtle.rst:388 ../../library/turtle.rst:1401
msgid "Turtle state"
msgstr "海龟状态"

#: ../../library/turtle.rst:389 ../../library/turtle.rst:1404
msgid "Visibility"
msgstr "可见性"

#: ../../library/turtle.rst:0
msgid ":func:`showturtle` | :func:`st`"
msgstr ":func:`showturtle` | :func:`st` 显示海龟"

#: ../../library/turtle.rst:0
msgid ":func:`hideturtle` | :func:`ht`"
msgstr ":func:`hideturtle` | :func:`ht` 隐藏海龟"

#: ../../library/turtle.rst:0
msgid ":func:`isvisible`"
msgstr ":func:`isvisible` 是否可见"

#: ../../library/turtle.rst:394 ../../library/turtle.rst:1443
msgid "Appearance"
msgstr "外观"

#: ../../library/turtle.rst:0
msgid ":func:`shape`"
msgstr ":func:`shape` 形状"

#: ../../library/turtle.rst:0
msgid ":func:`resizemode`"
msgstr ":func:`resizemode` 大小调整模式"

#: ../../library/turtle.rst:0
msgid ":func:`shapesize` | :func:`turtlesize`"
msgstr ":func:`shapesize` | :func:`turtlesize` 形状大小"

#: ../../library/turtle.rst:0
msgid ":func:`shearfactor`"
msgstr ":func:`shearfactor` 剪切因子"

#: ../../library/turtle.rst:0
msgid ":func:`tiltangle`"
msgstr ":func:`tiltangle` 倾角"

#: ../../library/turtle.rst:0
msgid ":func:`tilt`"
msgstr ":func:`tilt` 倾斜"

#: ../../library/turtle.rst:0
msgid ":func:`shapetransform`"
msgstr ":func:`shapetransform` 变形"

#: ../../library/turtle.rst:0
msgid ":func:`get_shapepoly`"
msgstr ":func:`get_shapepoly` 获取形状多边形"

#: ../../library/turtle.rst:404 ../../library/turtle.rst:1626
msgid "Using events"
msgstr "使用事件"

#: ../../library/turtle.rst:0 ../../library/turtle.rst:2804
msgid ":func:`onclick`"
msgstr ":func:`onclick` 当鼠标点击"

#: ../../library/turtle.rst:0
msgid ":func:`onrelease`"
msgstr ":func:`onrelease` 当鼠标释放"

#: ../../library/turtle.rst:0 ../../library/turtle.rst:2787
msgid ":func:`ondrag`"
msgstr ":func:`ondrag` 当鼠标拖动"

#: ../../library/turtle.rst:409 ../../library/turtle.rst:1700
msgid "Special Turtle methods"
msgstr "特殊海龟方法"

#: ../../library/turtle.rst:0
msgid ":func:`poly`"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`begin_poly`"
msgstr ":func:`begin_poly` 开始记录多边形"

#: ../../library/turtle.rst:0
msgid ":func:`end_poly`"
msgstr ":func:`end_poly` 结束记录多边形"

#: ../../library/turtle.rst:0
msgid ":func:`get_poly`"
msgstr ":func:`get_poly` 获取多边形"

#: ../../library/turtle.rst:0 ../../library/turtle.rst:2826
msgid ":func:`clone`"
msgstr ":func:`clone` 克隆"

#: ../../library/turtle.rst:0
msgid ":func:`getturtle` | :func:`getpen`"
msgstr ":func:`getturtle` | :func:`getpen` 获取海龟画笔"

#: ../../library/turtle.rst:0
msgid ":func:`getscreen`"
msgstr ":func:`getscreen` 获取屏幕"

#: ../../library/turtle.rst:0
msgid ":func:`setundobuffer`"
msgstr ":func:`setundobuffer` 设置撤消缓冲区"

#: ../../library/turtle.rst:0
msgid ":func:`undobufferentries`"
msgstr ":func:`undobufferentries` 撤消缓冲区条目数"

#: ../../library/turtle.rst:422
msgid "Methods of TurtleScreen/Screen"
msgstr "TurtleScreen/Screen 方法"

#: ../../library/turtle.rst:424 ../../library/turtle.rst:1871
msgid "Window control"
msgstr "窗口控制"

#: ../../library/turtle.rst:0
msgid ":func:`bgcolor`"
msgstr ":func:`bgcolor` 背景颜色"

#: ../../library/turtle.rst:0
msgid ":func:`bgpic`"
msgstr ":func:`bgpic` 背景图片"

#: ../../library/turtle.rst:0
msgid ":func:`clearscreen`"
msgstr ":func:`clearscreen`"

#: ../../library/turtle.rst:0
msgid ":func:`resetscreen`"
msgstr ":func:`resetscreen`"

#: ../../library/turtle.rst:0
msgid ":func:`screensize`"
msgstr ":func:`screensize` 屏幕大小"

#: ../../library/turtle.rst:0
msgid ":func:`setworldcoordinates`"
msgstr ":func:`setworldcoordinates` 设置世界坐标系"

#: ../../library/turtle.rst:432 ../../library/turtle.rst:1995
msgid "Animation control"
msgstr "动画控制"

#: ../../library/turtle.rst:0
msgid ":func:`no_animation`"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`delay`"
msgstr ":func:`delay` 延迟"

#: ../../library/turtle.rst:0
msgid ":func:`tracer`"
msgstr ":func:`tracer` 追踪"

#: ../../library/turtle.rst:0
msgid ":func:`update`"
msgstr ":func:`update` 更新"

#: ../../library/turtle.rst:438 ../../library/turtle.rst:2065
msgid "Using screen events"
msgstr "使用屏幕事件"

#: ../../library/turtle.rst:0
msgid ":func:`listen`"
msgstr ":func:`listen` 监听"

#: ../../library/turtle.rst:0
msgid ":func:`onkey` | :func:`onkeyrelease`"
msgstr ":func:`onkey` | :func:`onkeyrelease` 当键盘按下并释放"

#: ../../library/turtle.rst:0
msgid ":func:`onkeypress`"
msgstr ":func:`onkeypress` 当键盘按下"

#: ../../library/turtle.rst:0
msgid ":func:`onclick` | :func:`onscreenclick`"
msgstr ":func:`onclick` | :func:`onscreenclick` 当点击屏幕"

#: ../../library/turtle.rst:0
msgid ":func:`ontimer`"
msgstr ":func:`ontimer` 当达到定时"

#: ../../library/turtle.rst:0
msgid ":func:`mainloop` | :func:`done`"
msgstr ":func:`mainloop` | :func:`done` 主循环"

#: ../../library/turtle.rst:446 ../../library/turtle.rst:2210
msgid "Settings and special methods"
msgstr "设置与特殊方法"

#: ../../library/turtle.rst:0
msgid ":func:`mode`"
msgstr ":func:`mode`"

#: ../../library/turtle.rst:0
msgid ":func:`colormode`"
msgstr ":func:`colormode` 颜色模式"

#: ../../library/turtle.rst:0
msgid ":func:`getcanvas`"
msgstr ":func:`getcanvas` 获取画布"

#: ../../library/turtle.rst:0
msgid ":func:`getshapes`"
msgstr ":func:`getshapes` 获取形状"

#: ../../library/turtle.rst:0
msgid ":func:`register_shape` | :func:`addshape`"
msgstr ":func:`register_shape` | :func:`addshape` 添加形状"

#: ../../library/turtle.rst:0
msgid ":func:`turtles`"
msgstr ":func:`turtles` 所有海龟"

#: ../../library/turtle.rst:0
msgid ":func:`window_height`"
msgstr ":func:`window_height` 窗口高度"

#: ../../library/turtle.rst:0
msgid ":func:`window_width`"
msgstr ":func:`window_width` 窗口宽度"

#: ../../library/turtle.rst:456 ../../library/turtle.rst:2174
msgid "Input methods"
msgstr "输入方法"

#: ../../library/turtle.rst:0
msgid ":func:`textinput`"
msgstr ":func:`textinput` 文本输入"

#: ../../library/turtle.rst:0
msgid ":func:`numinput`"
msgstr ":func:`numinput` 数字输入"

#: ../../library/turtle.rst:460
msgid "Methods specific to Screen"
msgstr "Screen 专有方法"

#: ../../library/turtle.rst:0
msgid ":func:`bye`"
msgstr ":func:`bye` 退出"

#: ../../library/turtle.rst:0
msgid ":func:`exitonclick`"
msgstr ":func:`exitonclick` 当点击时退出"

#: ../../library/turtle.rst:0
msgid ":func:`save`"
msgstr ""

#: ../../library/turtle.rst:0
msgid ":func:`setup`"
msgstr ":func:`setup` 设置"

#: ../../library/turtle.rst:0
msgid ":func:`title`"
msgstr ":func:`title` 标题"

#: ../../library/turtle.rst:469
msgid "Methods of RawTurtle/Turtle and corresponding functions"
msgstr "RawTurtle/Turtle 方法和对应函数"

#: ../../library/turtle.rst:471
msgid ""
"Most of the examples in this section refer to a Turtle instance called "
"``turtle``."
msgstr "本节中的大部分示例都使用 Turtle 类的一个实例，命名为 ``turtle``。"

#: ../../library/turtle.rst:0
msgid "Parameters"
msgstr "参数"

#: ../../library/turtle.rst:480 ../../library/turtle.rst:525
#: ../../library/turtle.rst:550 ../../library/turtle.rst:648
#: ../../library/turtle.rst:671 ../../library/turtle.rst:694
msgid "a number (integer or float)"
msgstr "一个数值 (整型或浮点型)"

#: ../../library/turtle.rst:482
msgid ""
"Move the turtle forward by the specified *distance*, in the direction the "
"turtle is headed."
msgstr "海龟前进 *distance* 指定的距离，方向为海龟的朝向。"

#: ../../library/turtle.rst:485
msgid ""
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.forward(25)\n"
">>> turtle.position()\n"
"(25.00,0.00)\n"
">>> turtle.forward(-75)\n"
">>> turtle.position()\n"
"(-50.00,0.00)"
msgstr ""
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.forward(25)\n"
">>> turtle.position()\n"
"(25.00,0.00)\n"
">>> turtle.forward(-75)\n"
">>> turtle.position()\n"
"(-50.00,0.00)"

#: ../../library/turtle.rst:502 ../../library/turtle.rst:744
#: ../../library/turtle.rst:1011 ../../library/turtle.rst:1542
msgid "a number"
msgstr "一个数值"

#: ../../library/turtle.rst:504
msgid ""
"Move the turtle backward by *distance*, opposite to the direction the turtle"
" is headed.  Do not change the turtle's heading."
msgstr "海龟后退 *distance* 指定的距离，方向与海龟的朝向相反。不改变海龟的朝向。"

#: ../../library/turtle.rst:512
msgid ""
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.backward(30)\n"
">>> turtle.position()\n"
"(-30.00,0.00)"
msgstr ""
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.backward(30)\n"
">>> turtle.position()\n"
"(-30.00,0.00)"

#: ../../library/turtle.rst:527
msgid ""
"Turn turtle right by *angle* units.  (Units are by default degrees, but can "
"be set via the :func:`degrees` and :func:`radians` functions.)  Angle "
"orientation depends on the turtle mode, see :func:`mode`."
msgstr ""
"海龟右转 *angle* 个单位。(单位默认为角度，但可通过 :func:`degrees` 和 :func:`radians` 函数改变设置。) "
"角度的正负由海龟模式确定，参见 :func:`mode`。"

#: ../../library/turtle.rst:537
msgid ""
">>> turtle.heading()\n"
"22.0\n"
">>> turtle.right(45)\n"
">>> turtle.heading()\n"
"337.0"
msgstr ""
">>> turtle.heading()\n"
"22.0\n"
">>> turtle.right(45)\n"
">>> turtle.heading()\n"
"337.0"

#: ../../library/turtle.rst:552
msgid ""
"Turn turtle left by *angle* units.  (Units are by default degrees, but can "
"be set via the :func:`degrees` and :func:`radians` functions.)  Angle "
"orientation depends on the turtle mode, see :func:`mode`."
msgstr ""
"海龟左转 *angle* 个单位。(单位默认为角度，但可通过 :func:`degrees` 和 :func:`radians` 函数改变设置。) "
"角度的正负由海龟模式确定，参见 :func:`mode`。"

#: ../../library/turtle.rst:562
msgid ""
">>> turtle.heading()\n"
"22.0\n"
">>> turtle.left(45)\n"
">>> turtle.heading()\n"
"67.0"
msgstr ""
">>> turtle.heading()\n"
"22.0\n"
">>> turtle.left(45)\n"
">>> turtle.heading()\n"
"67.0"

#: ../../library/turtle.rst:576
msgid "a number or a pair/vector of numbers"
msgstr "一个数值或数值对/向量"

#: ../../library/turtle.rst:577 ../../library/turtle.rst:610
#: ../../library/turtle.rst:611
msgid "a number or ``None``"
msgstr "一个数值或 ``None``"

#: ../../library/turtle.rst:579
msgid ""
"If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D` "
"(e.g. as returned by :func:`pos`)."
msgstr ""
"如果 *y* 为 ``None``，*x* 应为一个表示坐标的数值对或 :class:`Vec2D` 类对象 (例如 :func:`pos` "
"返回的对象)."

#: ../../library/turtle.rst:582
msgid ""
"Move turtle to an absolute position.  If the pen is down, draw line.  Do not"
" change the turtle's orientation."
msgstr "海龟移动到一个绝对坐标。如果画笔已落下将会画线。不改变海龟的朝向。"

#: ../../library/turtle.rst:591
msgid ""
">>> tp = turtle.pos()\n"
">>> tp\n"
"(0.00,0.00)\n"
">>> turtle.setpos(60,30)\n"
">>> turtle.pos()\n"
"(60.00,30.00)\n"
">>> turtle.setpos((20,80))\n"
">>> turtle.pos()\n"
"(20.00,80.00)\n"
">>> turtle.setpos(tp)\n"
">>> turtle.pos()\n"
"(0.00,0.00)"
msgstr ""
">>> tp = turtle.pos()\n"
">>> tp\n"
"(0.00,0.00)\n"
">>> turtle.setpos(60,30)\n"
">>> turtle.pos()\n"
"(60.00,30.00)\n"
">>> turtle.setpos((20,80))\n"
">>> turtle.pos()\n"
"(20.00,80.00)\n"
">>> turtle.setpos(tp)\n"
">>> turtle.pos()\n"
"(0.00,0.00)"

#: ../../library/turtle.rst:612
msgid "a boolean"
msgstr "布尔"

#: ../../library/turtle.rst:614
msgid ""
"Move turtle to an absolute position. Unlike goto(x, y), a line will not be "
"drawn. The turtle's orientation does not change. If currently filling, the "
"polygon(s) teleported from will be filled after leaving, and filling will "
"begin again after teleporting. This can be disabled with fill_gap=True, "
"which makes the imaginary line traveled during teleporting act as a fill "
"barrier like in goto(x, y)."
msgstr ""
"将海龟移到某个绝对位置。 不同于 goto(x, y)，这将不会画一条线段。 海龟的方向不变。 "
"如果当前正在填充，离开后原位置上的多边形将被填充，在移位后将再次开始填充。 这可以通过 fill_gap=True "
"来禁用，此设置将使在移位期间海龟的移动轨迹线像在 goto(x, y) 中一样被当作填充边缘。"

#: ../../library/turtle.rst:627
msgid ""
">>> tp = turtle.pos()\n"
">>> tp\n"
"(0.00,0.00)\n"
">>> turtle.teleport(60)\n"
">>> turtle.pos()\n"
"(60.00,0.00)\n"
">>> turtle.teleport(y=10)\n"
">>> turtle.pos()\n"
"(60.00,10.00)\n"
">>> turtle.teleport(20, 30)\n"
">>> turtle.pos()\n"
"(20.00,30.00)"
msgstr ""
">>> tp = turtle.pos()\n"
">>> tp\n"
"(0.00,0.00)\n"
">>> turtle.teleport(60)\n"
">>> turtle.pos()\n"
"(60.00,0.00)\n"
">>> turtle.teleport(y=10)\n"
">>> turtle.pos()\n"
"(60.00,10.00)\n"
">>> turtle.teleport(20, 30)\n"
">>> turtle.pos()\n"
"(20.00,30.00)"

#: ../../library/turtle.rst:650
msgid ""
"Set the turtle's first coordinate to *x*, leave second coordinate unchanged."
msgstr "设置海龟的横坐标为 *x*，纵坐标保持不变。"

#: ../../library/turtle.rst:659
msgid ""
">>> turtle.position()\n"
"(0.00,240.00)\n"
">>> turtle.setx(10)\n"
">>> turtle.position()\n"
"(10.00,240.00)"
msgstr ""
">>> turtle.position()\n"
"(0.00,240.00)\n"
">>> turtle.setx(10)\n"
">>> turtle.position()\n"
"(10.00,240.00)"

#: ../../library/turtle.rst:673
msgid ""
"Set the turtle's second coordinate to *y*, leave first coordinate unchanged."
msgstr "设置海龟的纵坐标为 *y*，横坐标保持不变。"

#: ../../library/turtle.rst:681
msgid ""
">>> turtle.position()\n"
"(0.00,40.00)\n"
">>> turtle.sety(-10)\n"
">>> turtle.position()\n"
"(0.00,-10.00)"
msgstr ""
">>> turtle.position()\n"
"(0.00,40.00)\n"
">>> turtle.sety(-10)\n"
">>> turtle.position()\n"
"(0.00,-10.00)"

#: ../../library/turtle.rst:696
msgid ""
"Set the orientation of the turtle to *to_angle*.  Here are some common "
"directions in degrees:"
msgstr "设置海龟的朝向为 *to_angle*。以下是以角度表示的几个常用方向："

#: ../../library/turtle.rst:700
msgid "standard mode"
msgstr "标准模式"

#: ../../library/turtle.rst:700
msgid "logo mode"
msgstr "logo 模式"

#: ../../library/turtle.rst:702
msgid "0 - east"
msgstr "0 - 东"

#: ../../library/turtle.rst:702
msgid "0 - north"
msgstr "0 - 北"

#: ../../library/turtle.rst:703
msgid "90 - north"
msgstr "90 - 北"

#: ../../library/turtle.rst:703
msgid "90 - east"
msgstr "90 - 东"

#: ../../library/turtle.rst:704
msgid "180 - west"
msgstr "180 - 西"

#: ../../library/turtle.rst:704
msgid "180 - south"
msgstr "180 - 南"

#: ../../library/turtle.rst:705
msgid "270 - south"
msgstr "270 - 南"

#: ../../library/turtle.rst:705
msgid "270 - west"
msgstr "270 - 西"

#: ../../library/turtle.rst:708
msgid ""
">>> turtle.setheading(90)\n"
">>> turtle.heading()\n"
"90.0"
msgstr ""
">>> turtle.setheading(90)\n"
">>> turtle.heading()\n"
"90.0"

#: ../../library/turtle.rst:718
msgid ""
"Move turtle to the origin -- coordinates (0,0) -- and set its heading to its"
" start-orientation (which depends on the mode, see :func:`mode`)."
msgstr "海龟移至初始坐标 (0,0)，并设置朝向为初始方向 (由海龟模式确定，参见 :func:`mode`)。"

#: ../../library/turtle.rst:728
msgid ""
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.position()\n"
"(0.00,-10.00)\n"
">>> turtle.home()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.position()\n"
"(0.00,-10.00)\n"
">>> turtle.home()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0"

#: ../../library/turtle.rst:745
msgid "a number (or ``None``)"
msgstr "一个数值 (或 ``None``)"

#: ../../library/turtle.rst:746 ../../library/turtle.rst:839
msgid "an integer (or ``None``)"
msgstr "一个整型数 (或 ``None``)"

#: ../../library/turtle.rst:748
msgid ""
"Draw a circle with given *radius*.  The center is *radius* units left of the"
" turtle; *extent* -- an angle -- determines which part of the circle is "
"drawn.  If *extent* is not given, draw the entire circle.  If *extent* is "
"not a full circle, one endpoint of the arc is the current pen position.  "
"Draw the arc in counterclockwise direction if *radius* is positive, "
"otherwise in clockwise direction.  Finally the direction of the turtle is "
"changed by the amount of *extent*."
msgstr ""
"绘制一个 *radius* 指定半径的圆。圆心在海龟左边 *radius* 个单位；*extent* 为一个夹角，用来决定绘制圆的一部分。如未指定 "
"*extent*则绘制整个圆。如果 *extent* 不是完整圆周，则以当前画笔位置为一个端点绘制圆弧。如果 *radius* "
"为正值则朝逆时针方向绘制圆弧，否则朝顺时针方向。最终海龟的朝向会依据 *extent* 的值而改变。"

#: ../../library/turtle.rst:756
msgid ""
"As the circle is approximated by an inscribed regular polygon, *steps* "
"determines the number of steps to use.  If not given, it will be calculated "
"automatically.  May be used to draw regular polygons."
msgstr "圆实际是以其内切正多边形来近似表示的，其边的数量由 *steps* 指定。如果未指定边数则会自动确定。此方法也可用来绘制正多边形。"

#: ../../library/turtle.rst:760
msgid ""
">>> turtle.home()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0\n"
">>> turtle.circle(50)\n"
">>> turtle.position()\n"
"(-0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0\n"
">>> turtle.circle(120, 180)  # draw a semicircle\n"
">>> turtle.position()\n"
"(0.00,240.00)\n"
">>> turtle.heading()\n"
"180.0"
msgstr ""
">>> turtle.home()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0\n"
">>> turtle.circle(50)\n"
">>> turtle.position()\n"
"(-0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0\n"
">>> turtle.circle(120, 180)  # 画一个半圆\n"
">>> turtle.position()\n"
"(0.00,240.00)\n"
">>> turtle.heading()\n"
"180.0"

#: ../../library/turtle.rst:782
msgid "an integer >= 1 (if given)"
msgstr "一个整型数 >= 1 (如果指定)"

#: ../../library/turtle.rst:783
msgid "a colorstring or a numeric color tuple"
msgstr "一个颜色字符串或颜色数值元组"

#: ../../library/turtle.rst:785
msgid ""
"Draw a circular dot with diameter *size*, using *color*.  If *size* is not "
"given, the maximum of pensize+4 and 2*pensize is used."
msgstr ""
"绘制一个直径为 *size*，颜色为 *color* 的圆点。如果 *size* 未指定，则直径取 pensize+4 和 2*pensize "
"中的较大值。"

#: ../../library/turtle.rst:789
msgid ""
">>> turtle.home()\n"
">>> turtle.dot()\n"
">>> turtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50)\n"
">>> turtle.position()\n"
"(100.00,-0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""
">>> turtle.home()\n"
">>> turtle.dot()\n"
">>> turtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50)\n"
">>> turtle.position()\n"
"(100.00,-0.00)\n"
">>> turtle.heading()\n"
"0.0"

#: ../../library/turtle.rst:803
msgid ""
"Stamp a copy of the turtle shape onto the canvas at the current turtle "
"position.  Return a stamp_id for that stamp, which can be used to delete it "
"by calling ``clearstamp(stamp_id)``."
msgstr ""
"在海龟当前位置印制一个海龟形状。返回该印章的 stamp_id，印章可以通过调用 ``clearstamp(stamp_id)`` 来删除。"

#: ../../library/turtle.rst:807
msgid ""
">>> turtle.color(\"blue\")\n"
">>> stamp_id = turtle.stamp()\n"
">>> turtle.fd(50)"
msgstr ""
">>> turtle.color(\"blue\")\n"
">>> stamp_id = turtle.stamp()\n"
">>> turtle.fd(50)"

#: ../../library/turtle.rst:817
msgid "an integer, must be return value of previous :func:`stamp` call"
msgstr "一个整型数，必须是之前 :func:`stamp` 调用的返回值"

#: ../../library/turtle.rst:820
msgid "Delete stamp with given *stampid*."
msgstr "删除 *stampid* 指定的印章。"

#: ../../library/turtle.rst:822
msgid ""
">>> turtle.position()\n"
"(150.00,-0.00)\n"
">>> turtle.color(\"blue\")\n"
">>> astamp = turtle.stamp()\n"
">>> turtle.fd(50)\n"
">>> turtle.position()\n"
"(200.00,-0.00)\n"
">>> turtle.clearstamp(astamp)\n"
">>> turtle.position()\n"
"(200.00,-0.00)"
msgstr ""
">>> turtle.position()\n"
"(150.00,-0.00)\n"
">>> turtle.color(\"blue\")\n"
">>> astamp = turtle.stamp()\n"
">>> turtle.fd(50)\n"
">>> turtle.position()\n"
"(200.00,-0.00)\n"
">>> turtle.clearstamp(astamp)\n"
">>> turtle.position()\n"
"(200.00,-0.00)"

#: ../../library/turtle.rst:841
msgid ""
"Delete all or first/last *n* of turtle's stamps.  If *n* is ``None``, delete"
" all stamps, if *n* > 0 delete first *n* stamps, else if *n* < 0 delete last"
" *n* stamps."
msgstr ""
"删除全部或前/后 *n* 个海龟印章。如果 *n* 为 ``None`` 则删除全部印章，如果 *n* > 0 则删除前 *n* 个印章，否则如果 "
"*n* < 0 则删除后 *n* 个印章。"

#: ../../library/turtle.rst:845
msgid ""
">>> for i in range(8):\n"
"...     unused_stamp_id = turtle.stamp()\n"
"...     turtle.fd(30)\n"
">>> turtle.clearstamps(2)\n"
">>> turtle.clearstamps(-2)\n"
">>> turtle.clearstamps()"
msgstr ""
">>> for i in range(8):\n"
"...     unused_stamp_id = turtle.stamp()\n"
"...     turtle.fd(30)\n"
">>> turtle.clearstamps(2)\n"
">>> turtle.clearstamps(-2)\n"
">>> turtle.clearstamps()"

#: ../../library/turtle.rst:857
msgid ""
"Undo (repeatedly) the last turtle action(s).  Number of available undo "
"actions is determined by the size of the undobuffer."
msgstr "撤消 (或连续撤消) 最近的一个 (或多个) 海龟动作。可撤消的次数由撤消缓冲区的大小决定。"

#: ../../library/turtle.rst:860
msgid ""
">>> for i in range(4):\n"
"...     turtle.fd(50); turtle.lt(80)\n"
"...\n"
">>> for i in range(8):\n"
"...     turtle.undo()"
msgstr ""
">>> for i in range(4):\n"
"...     turtle.fd(50); turtle.lt(80)\n"
"...\n"
">>> for i in range(8):\n"
"...     turtle.undo()"

#: ../../library/turtle.rst:872
msgid "an integer in the range 0..10 or a speedstring (see below)"
msgstr "一个 0..10 范围内的整型数或速度字符串 (见下)"

#: ../../library/turtle.rst:874
msgid ""
"Set the turtle's speed to an integer value in the range 0..10.  If no "
"argument is given, return current speed."
msgstr "设置海龟移动的速度为 0..10 表示的整型数值。如未指定参数则返回当前速度。"

#: ../../library/turtle.rst:877
msgid ""
"If input is a number greater than 10 or smaller than 0.5, speed is set to 0."
"  Speedstrings are mapped to speedvalues as follows:"
msgstr "如果输入数值大于 10 或小于 0.5 则速度设为 0。速度字符串与速度值的对应关系如下:"

#: ../../library/turtle.rst:880
msgid "\"fastest\":  0"
msgstr "\"fastest\":  0 最快"

#: ../../library/turtle.rst:881
msgid "\"fast\":  10"
msgstr "\"fast\":  10 快"

#: ../../library/turtle.rst:882
msgid "\"normal\":  6"
msgstr "\"normal\":  6 正常"

#: ../../library/turtle.rst:883
msgid "\"slow\":  3"
msgstr "\"slow\":  3 慢"

#: ../../library/turtle.rst:884
msgid "\"slowest\":  1"
msgstr "\"slowest\":  1 最慢"

#: ../../library/turtle.rst:886
msgid ""
"Speeds from 1 to 10 enforce increasingly faster animation of line drawing "
"and turtle turning."
msgstr "速度值从 1 到 10，画线和海龟转向的动画效果逐级加快。"

#: ../../library/turtle.rst:889
msgid ""
"Attention: *speed* = 0 means that *no* animation takes place. forward/back "
"makes turtle jump and likewise left/right make the turtle turn instantly."
msgstr ""
"注意: *speed* = 0 表示 *没有* 动画效果。forward/back 将使海龟向前/向后跳跃，同样的 left/right "
"将使海龟立即改变朝向。"

#: ../../library/turtle.rst:893
msgid ""
">>> turtle.speed()\n"
"3\n"
">>> turtle.speed('normal')\n"
">>> turtle.speed()\n"
"6\n"
">>> turtle.speed(9)\n"
">>> turtle.speed()\n"
"9"
msgstr ""
">>> turtle.speed()\n"
"3\n"
">>> turtle.speed('normal')\n"
">>> turtle.speed()\n"
"6\n"
">>> turtle.speed(9)\n"
">>> turtle.speed()\n"
"9"

#: ../../library/turtle.rst:912
msgid ""
"Return the turtle's current location (x,y) (as a :class:`Vec2D` vector)."
msgstr "返回海龟当前的坐标 (x,y) (为 :class:`Vec2D` 矢量类对象)。"

#: ../../library/turtle.rst:914
msgid ""
">>> turtle.pos()\n"
"(440.00,-0.00)"
msgstr ""
">>> turtle.pos()\n"
"(440.00,-0.00)"

#: ../../library/turtle.rst:923 ../../library/turtle.rst:986
msgid "a number or a pair/vector of numbers or a turtle instance"
msgstr "一个数值或数值对/矢量，或一个海龟实例"

#: ../../library/turtle.rst:924 ../../library/turtle.rst:987
msgid "a number if *x* is a number, else ``None``"
msgstr "一个数值——如果 *x* 是一个数值，否则为 ``None``"

#: ../../library/turtle.rst:926
msgid ""
"Return the angle between the line from turtle position to position specified"
" by (x,y), the vector or the other turtle.  This depends on the turtle's "
"start orientation which depends on the mode - \"standard\"/\"world\" or "
"\"logo\"."
msgstr ""
"返回从海龟位置到由 (x,y)、矢量或另一海龟所确定位置的连线的夹角。 此数值依赖于海龟的初始朝向，这又取决于 "
"\"standard\"/\"world\" 或 \"logo\" 模式设置。"

#: ../../library/turtle.rst:930
msgid ""
">>> turtle.goto(10, 10)\n"
">>> turtle.towards(0,0)\n"
"225.0"
msgstr ""
">>> turtle.goto(10, 10)\n"
">>> turtle.towards(0,0)\n"
"225.0"

#: ../../library/turtle.rst:940
msgid "Return the turtle's x coordinate."
msgstr "返回海龟的 x 坐标。"

#: ../../library/turtle.rst:942
msgid ""
">>> turtle.home()\n"
">>> turtle.left(50)\n"
">>> turtle.forward(100)\n"
">>> turtle.pos()\n"
"(64.28,76.60)\n"
">>> print(round(turtle.xcor(), 5))\n"
"64.27876"
msgstr ""
">>> turtle.home()\n"
">>> turtle.left(50)\n"
">>> turtle.forward(100)\n"
">>> turtle.pos()\n"
"(64.28,76.60)\n"
">>> print(round(turtle.xcor(), 5))\n"
"64.27876"

#: ../../library/turtle.rst:956
msgid "Return the turtle's y coordinate."
msgstr "返回海龟的 y 坐标。"

#: ../../library/turtle.rst:958
msgid ""
">>> turtle.home()\n"
">>> turtle.left(60)\n"
">>> turtle.forward(100)\n"
">>> print(turtle.pos())\n"
"(50.00,86.60)\n"
">>> print(round(turtle.ycor(), 5))\n"
"86.60254"
msgstr ""
">>> turtle.home()\n"
">>> turtle.left(60)\n"
">>> turtle.forward(100)\n"
">>> print(turtle.pos())\n"
"(50.00,86.60)\n"
">>> print(round(turtle.ycor(), 5))\n"
"86.60254"

#: ../../library/turtle.rst:972
msgid ""
"Return the turtle's current heading (value depends on the turtle mode, see "
":func:`mode`)."
msgstr "返回海龟当前的朝向 (数值依赖于海龟模式参见 :func:`mode`)。"

#: ../../library/turtle.rst:975
msgid ""
">>> turtle.home()\n"
">>> turtle.left(67)\n"
">>> turtle.heading()\n"
"67.0"
msgstr ""
">>> turtle.home()\n"
">>> turtle.left(67)\n"
">>> turtle.heading()\n"
"67.0"

#: ../../library/turtle.rst:989
msgid ""
"Return the distance from the turtle to (x,y), the given vector, or the given"
" other turtle, in turtle step units."
msgstr "返回从海龟位置到由 (x,y)，适量或另一海龟对应位置的单位距离。"

#: ../../library/turtle.rst:992
msgid ""
">>> turtle.home()\n"
">>> turtle.distance(30,40)\n"
"50.0\n"
">>> turtle.distance((30,40))\n"
"50.0\n"
">>> joe = Turtle()\n"
">>> joe.forward(77)\n"
">>> turtle.distance(joe)\n"
"77.0"
msgstr ""
">>> turtle.home()\n"
">>> turtle.distance(30,40)\n"
"50.0\n"
">>> turtle.distance((30,40))\n"
"50.0\n"
">>> joe = Turtle()\n"
">>> joe.forward(77)\n"
">>> turtle.distance(joe)\n"
"77.0"

#: ../../library/turtle.rst:1007
msgid "Settings for measurement"
msgstr "度量单位设置"

#: ../../library/turtle.rst:1013
msgid ""
"Set angle measurement units, i.e. set number of \"degrees\" for a full "
"circle. Default value is 360 degrees."
msgstr "设置角度的度量单位，即设置一个圆周为多少 \"度\"。默认值为 360 度。"

#: ../../library/turtle.rst:1016
msgid ""
">>> turtle.home()\n"
">>> turtle.left(90)\n"
">>> turtle.heading()\n"
"90.0\n"
"\n"
">>> # Change angle measurement unit to grad (also known as gon,\n"
">>> # grade, or gradian and equals 1/100-th of the right angle.)\n"
">>> turtle.degrees(400.0)\n"
">>> turtle.heading()\n"
"100.0\n"
">>> turtle.degrees(360)\n"
">>> turtle.heading()\n"
"90.0"
msgstr ""
">>> turtle.home()\n"
">>> turtle.left(90)\n"
">>> turtle.heading()\n"
"90.0\n"
"\n"
">>> # 将角度计量单位改为 grad (或称 gon, grade\n"
">>> # 或 gradian，等于直角的 1/100。）\n"
">>> turtle.degrees(400.0)\n"
">>> turtle.heading()\n"
"100.0\n"
">>> turtle.degrees(360)\n"
">>> turtle.heading()\n"
"90.0"

#: ../../library/turtle.rst:1036
msgid ""
"Set the angle measurement units to radians.  Equivalent to "
"``degrees(2*math.pi)``."
msgstr "设置角度的度量单位为弧度。其值等于 ``degrees(2*math.pi)``。"

#: ../../library/turtle.rst:1039
msgid ""
">>> turtle.home()\n"
">>> turtle.left(90)\n"
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.radians()\n"
">>> turtle.heading()\n"
"1.5707963267948966"
msgstr ""
">>> turtle.home()\n"
">>> turtle.left(90)\n"
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.radians()\n"
">>> turtle.heading()\n"
"1.5707963267948966"

#: ../../library/turtle.rst:1067
msgid "Pull the pen down -- drawing when moving."
msgstr "画笔落下 -- 移动时将画线。"

#: ../../library/turtle.rst:1074
msgid "Pull the pen up -- no drawing when moving."
msgstr "画笔抬起 -- 移动时不画线。"

#: ../../library/turtle.rst:1080
msgid "a positive number"
msgstr "一个正数值"

#: ../../library/turtle.rst:1082
msgid ""
"Set the line thickness to *width* or return it.  If resizemode is set to "
"\"auto\" and turtleshape is a polygon, that polygon is drawn with the same "
"line thickness.  If no argument is given, the current pensize is returned."
msgstr ""
"设置线条的粗细为 *width* 或返回该值。如果 resizemode 设为 \"auto\" 并且 turtleshape "
"为多边形，该多边形也以同样组细的线条绘制。如未指定参数，则返回当前的 pensize。"

#: ../../library/turtle.rst:1086
msgid ""
">>> turtle.pensize()\n"
"1\n"
">>> turtle.pensize(10)   # from here on lines of width 10 are drawn"
msgstr ""
">>> turtle.pensize()\n"
"1\n"
">>> turtle.pensize(10)   # 从这里开始，画出宽度为10的线"

#: ../../library/turtle.rst:1096
msgid "a dictionary with some or all of the below listed keys"
msgstr "一个包含部分或全部下列键的字典"

#: ../../library/turtle.rst:1097
msgid "one or more keyword-arguments with the below listed keys as keywords"
msgstr "一个或多个以下列键为关键字的关键字参数"

#: ../../library/turtle.rst:1099
msgid ""
"Return or set the pen's attributes in a \"pen-dictionary\" with the "
"following key/value pairs:"
msgstr "返回或设置画笔的属性，以一个包含以下键值对的 \"画笔字典\" 表示:"

#: ../../library/turtle.rst:1102
msgid "\"shown\": True/False"
msgstr "\"shown\": True/False"

#: ../../library/turtle.rst:1103
msgid "\"pendown\": True/False"
msgstr "\"pendown\": True/False"

#: ../../library/turtle.rst:1104
msgid "\"pencolor\": color-string or color-tuple"
msgstr "\"pencolor\": 颜色字符串或颜色元组"

#: ../../library/turtle.rst:1105
msgid "\"fillcolor\": color-string or color-tuple"
msgstr "\"fillcolor\": 颜色字符串或颜色元组"

#: ../../library/turtle.rst:1106
msgid "\"pensize\": positive number"
msgstr "\"pensize\": 正数值"

#: ../../library/turtle.rst:1107
msgid "\"speed\": number in range 0..10"
msgstr "\"speed\": 0..10 范围内的数值"

#: ../../library/turtle.rst:1108
msgid "\"resizemode\": \"auto\" or \"user\" or \"noresize\""
msgstr "\"resizemode\": \"auto\" 或 \"user\" 或 \"noresize\""

#: ../../library/turtle.rst:1109
msgid "\"stretchfactor\": (positive number, positive number)"
msgstr "\"stretchfactor\": (正数值, 正数值)"

#: ../../library/turtle.rst:1110
msgid "\"outline\": positive number"
msgstr "\"outline\": 正数值"

#: ../../library/turtle.rst:1111
msgid "\"tilt\": number"
msgstr "\"tilt\": 数值"

#: ../../library/turtle.rst:1113
msgid ""
"This dictionary can be used as argument for a subsequent call to :func:`pen`"
" to restore the former pen-state.  Moreover one or more of these attributes "
"can be provided as keyword-arguments.  This can be used to set several pen "
"attributes in one statement."
msgstr ""
"此字典可作为后续调用 :func:`pen` "
"时的参数，以恢复之前的画笔状态。另外还可将这些属性作为关键词参数提交。使用此方式可以用一条语句设置画笔的多个属性。"

#: ../../library/turtle.rst:1118
msgid ""
">>> turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\n"
">>> sorted(turtle.pen().items())\n"
"[('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),\n"
" ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),\n"
" ('shearfactor', 0.0), ('shown', True), ('speed', 9),\n"
" ('stretchfactor', (1.0, 1.0)), ('tilt', 0.0)]\n"
">>> penstate=turtle.pen()\n"
">>> turtle.color(\"yellow\", \"\")\n"
">>> turtle.penup()\n"
">>> sorted(turtle.pen().items())[:3]\n"
"[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')]\n"
">>> turtle.pen(penstate, fillcolor=\"green\")\n"
">>> sorted(turtle.pen().items())[:3]\n"
"[('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red')]"
msgstr ""
">>> turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\n"
">>> sorted(turtle.pen().items())\n"
"[('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),\n"
" ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),\n"
" ('shearfactor', 0.0), ('shown', True), ('speed', 9),\n"
" ('stretchfactor', (1.0, 1.0)), ('tilt', 0.0)]\n"
">>> penstate=turtle.pen()\n"
">>> turtle.color(\"yellow\", \"\")\n"
">>> turtle.penup()\n"
">>> sorted(turtle.pen().items())[:3]\n"
"[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')]\n"
">>> turtle.pen(penstate, fillcolor=\"green\")\n"
">>> sorted(turtle.pen().items())[:3]\n"
"[('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red')]"

#: ../../library/turtle.rst:1139
msgid "Return ``True`` if pen is down, ``False`` if it's up."
msgstr "如果画笔落下返回 ``True``，如果画笔抬起返回 ``False``。"

#: ../../library/turtle.rst:1141
msgid ""
">>> turtle.penup()\n"
">>> turtle.isdown()\n"
"False\n"
">>> turtle.pendown()\n"
">>> turtle.isdown()\n"
"True"
msgstr ""
">>> turtle.penup()\n"
">>> turtle.isdown()\n"
"False\n"
">>> turtle.pendown()\n"
">>> turtle.isdown()\n"
"True"

#: ../../library/turtle.rst:1157
msgid "Return or set the pencolor."
msgstr "返回或设置画笔颜色。"

#: ../../library/turtle.rst:1159 ../../library/turtle.rst:1208
msgid "Four input formats are allowed:"
msgstr "允许以下四种输入格式:"

#: ../../library/turtle.rst:1161
msgid "``pencolor()``"
msgstr "``pencolor()``"

#: ../../library/turtle.rst:1162
msgid ""
"Return the current pencolor as color specification string or as a tuple (see"
" example).  May be used as input to another color/pencolor/fillcolor call."
msgstr "返回以颜色描述字符串或元组 (见示例) 表示的当前画笔颜色。可用作其他 color/pencolor/fillcolor 调用的输入。"

#: ../../library/turtle.rst:1166
msgid "``pencolor(colorstring)``"
msgstr "``pencolor(colorstring)``"

#: ../../library/turtle.rst:1167
msgid ""
"Set pencolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""
"设置画笔颜色为 *colorstring* 指定的 Tk 颜色描述字符串，例如 ``\"red\"``、``\"yellow\"`` 或 "
"``\"#33cc8c\"``。"

#: ../../library/turtle.rst:1170
msgid "``pencolor((r, g, b))``"
msgstr "``pencolor((r, g, b))``"

#: ../../library/turtle.rst:1171
msgid ""
"Set pencolor to the RGB color represented by the tuple of *r*, *g*, and *b*."
"  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""
"设置画笔颜色为以 *r*, *g*, *b* 元组表示的 RGB 颜色。*r*, *g*, *b* 的取值范围应为 "
"0..colormode，colormode 的值为 1.0 或 255 (参见 :func:`colormode`)。"

#: ../../library/turtle.rst:1175
msgid "``pencolor(r, g, b)``"
msgstr "``pencolor(r, g, b)``"

#: ../../library/turtle.rst:1176
msgid ""
"Set pencolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr "设置画笔颜色为以 *r*, *g*, *b* 表示的 RGB 颜色。*r*, *g*, *b* 的取值范围应为 0..colormode。"

#: ../../library/turtle.rst:1179
msgid ""
"If turtleshape is a polygon, the outline of that polygon is drawn with the "
"newly set pencolor."
msgstr "如果 turtleshape 为多边形，该多边形轮廓也以新设置的画笔颜色绘制。"

#: ../../library/turtle.rst:1182
msgid ""
">>> colormode()\n"
"1.0\n"
">>> turtle.pencolor()\n"
"'red'\n"
">>> turtle.pencolor(\"brown\")\n"
">>> turtle.pencolor()\n"
"'brown'\n"
">>> tup = (0.2, 0.8, 0.55)\n"
">>> turtle.pencolor(tup)\n"
">>> turtle.pencolor()\n"
"(0.2, 0.8, 0.5490196078431373)\n"
">>> colormode(255)\n"
">>> turtle.pencolor()\n"
"(51.0, 204.0, 140.0)\n"
">>> turtle.pencolor('#32c18f')\n"
">>> turtle.pencolor()\n"
"(50.0, 193.0, 143.0)"
msgstr ""
">>> colormode()\n"
"1.0\n"
">>> turtle.pencolor()\n"
"'red'\n"
">>> turtle.pencolor(\"brown\")\n"
">>> turtle.pencolor()\n"
"'brown'\n"
">>> tup = (0.2, 0.8, 0.55)\n"
">>> turtle.pencolor(tup)\n"
">>> turtle.pencolor()\n"
"(0.2, 0.8, 0.5490196078431373)\n"
">>> colormode(255)\n"
">>> turtle.pencolor()\n"
"(51.0, 204.0, 140.0)\n"
">>> turtle.pencolor('#32c18f')\n"
">>> turtle.pencolor()\n"
"(50.0, 193.0, 143.0)"

#: ../../library/turtle.rst:1206
msgid "Return or set the fillcolor."
msgstr "返回或设置填充颜色。"

#: ../../library/turtle.rst:1210
msgid "``fillcolor()``"
msgstr "``fillcolor()``"

#: ../../library/turtle.rst:1211
msgid ""
"Return the current fillcolor as color specification string, possibly in "
"tuple format (see example).  May be used as input to another "
"color/pencolor/fillcolor call."
msgstr "返回以颜色描述字符串或元组 (见示例) 表示的当前填充颜色。可用作其他 color/pencolor/fillcolor 调用的输入。"

#: ../../library/turtle.rst:1215
msgid "``fillcolor(colorstring)``"
msgstr "``fillcolor(colorstring)``"

#: ../../library/turtle.rst:1216
msgid ""
"Set fillcolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""
"设置填充颜色为 *colorstring* 指定的 Tk 颜色描述字符串，例如 ``\"red\"``、``\"yellow\"`` 或 "
"``\"#33cc8c\"``。"

#: ../../library/turtle.rst:1219
msgid "``fillcolor((r, g, b))``"
msgstr "``fillcolor((r, g, b))``"

#: ../../library/turtle.rst:1220
msgid ""
"Set fillcolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""
"设置填充颜色为以 *r*, *g*, *b* 元组表示的 RGB 颜色。*r*, *g*, *b* 的取值范围应为 "
"0..colormode，colormode 的值为 1.0 或 255 (参见 :func:`colormode`)。"

#: ../../library/turtle.rst:1224
msgid "``fillcolor(r, g, b)``"
msgstr "``fillcolor(r, g, b)``"

#: ../../library/turtle.rst:1225
msgid ""
"Set fillcolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr "设置填充颜色为 *r*, *g*, *b* 表示的 RGB 颜色。*r*, *g*, *b* 的取值范围应为 0..colormode。"

#: ../../library/turtle.rst:1228
msgid ""
"If turtleshape is a polygon, the interior of that polygon is drawn with the "
"newly set fillcolor."
msgstr "如果 turtleshape 为多边形，该多边形内部也以新设置的填充颜色填充。"

#: ../../library/turtle.rst:1231
msgid ""
">>> turtle.fillcolor(\"violet\")\n"
">>> turtle.fillcolor()\n"
"'violet'\n"
">>> turtle.pencolor()\n"
"(50.0, 193.0, 143.0)\n"
">>> turtle.fillcolor((50, 193, 143))  # Integers, not floats\n"
">>> turtle.fillcolor()\n"
"(50.0, 193.0, 143.0)\n"
">>> turtle.fillcolor('#ffffff')\n"
">>> turtle.fillcolor()\n"
"(255.0, 255.0, 255.0)"
msgstr ""
">>> turtle.fillcolor(\"violet\")\n"
">>> turtle.fillcolor()\n"
"'violet'\n"
">>> turtle.pencolor()\n"
"(50.0, 193.0, 143.0)\n"
">>> turtle.fillcolor((50, 193, 143))  # 整数，而非浮点数\n"
">>> turtle.fillcolor()\n"
"(50.0, 193.0, 143.0)\n"
">>> turtle.fillcolor('#ffffff')\n"
">>> turtle.fillcolor()\n"
"(255.0, 255.0, 255.0)"

#: ../../library/turtle.rst:1249
msgid "Return or set pencolor and fillcolor."
msgstr "返回或设置画笔颜色和填充颜色。"

#: ../../library/turtle.rst:1251
msgid ""
"Several input formats are allowed.  They use 0 to 3 arguments as follows:"
msgstr "允许多种输入格式。使用如下 0 至 3 个参数:"

#: ../../library/turtle.rst:1254
msgid "``color()``"
msgstr "``color()``"

#: ../../library/turtle.rst:1255
msgid ""
"Return the current pencolor and the current fillcolor as a pair of color "
"specification strings or tuples as returned by :func:`pencolor` and "
":func:`fillcolor`."
msgstr ""
"返回以一对颜色描述字符串或元组表示的当前画笔颜色和填充颜色，两者可分别由 :func:`pencolor` 和 :func:`fillcolor` "
"返回。"

#: ../../library/turtle.rst:1259
msgid "``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``"
msgstr "``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``"

#: ../../library/turtle.rst:1260
msgid ""
"Inputs as in :func:`pencolor`, set both, fillcolor and pencolor, to the "
"given value."
msgstr "输入格式与 :func:`pencolor` 相同，同时设置填充颜色和画笔颜色为指定的值。"

#: ../../library/turtle.rst:1263
msgid ""
"``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``"
msgstr ""
"``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``"

#: ../../library/turtle.rst:1264
msgid ""
"Equivalent to ``pencolor(colorstring1)`` and ``fillcolor(colorstring2)`` and"
" analogously if the other input format is used."
msgstr ""
"相当于 ``pencolor(colorstring1)`` 加 "
"``fillcolor(colorstring2)``，使用其他输入格式的方法也与之类似。"

#: ../../library/turtle.rst:1267
msgid ""
"If turtleshape is a polygon, outline and interior of that polygon is drawn "
"with the newly set colors."
msgstr "如果 turtleshape 为多边形，该多边形轮廓与填充也使用新设置的颜色。"

#: ../../library/turtle.rst:1270
msgid ""
">>> turtle.color(\"red\", \"green\")\n"
">>> turtle.color()\n"
"('red', 'green')\n"
">>> color(\"#285078\", \"#a0c8f0\")\n"
">>> color()\n"
"((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))"
msgstr ""
">>> turtle.color(\"red\", \"green\")\n"
">>> turtle.color()\n"
"('red', 'green')\n"
">>> color(\"#285078\", \"#a0c8f0\")\n"
">>> color()\n"
"((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))"

#: ../../library/turtle.rst:1281
msgid "See also: Screen method :func:`colormode`."
msgstr "另参见: Screen 方法 :func:`colormode`。"

#: ../../library/turtle.rst:1295
msgid "Return fillstate (``True`` if filling, ``False`` else)."
msgstr "返回填充状态 (填充为 ``True``，否则为 ``False``)。"

#: ../../library/turtle.rst:1297
msgid ""
">>> turtle.begin_fill()\n"
">>> if turtle.filling():\n"
"...    turtle.pensize(5)\n"
"... else:\n"
"...    turtle.pensize(3)"
msgstr ""
">>> turtle.begin_fill()\n"
">>> if turtle.filling():\n"
"...    turtle.pensize(5)\n"
"... else:\n"
"...    turtle.pensize(3)"

#: ../../library/turtle.rst:1308
msgid "Fill the shape drawn in the ``with turtle.fill():`` block."
msgstr ""

#: ../../library/turtle.rst:1310
msgid ""
">>> turtle.color(\"black\", \"red\")\n"
">>> with turtle.fill():\n"
"...     turtle.circle(80)"
msgstr ""

#: ../../library/turtle.rst:1317
msgid ""
"Using :func:`!fill` is equivalent to adding the :func:`begin_fill` before "
"the fill-block and :func:`end_fill` after the fill-block:"
msgstr ""

#: ../../library/turtle.rst:1320 ../../library/turtle.rst:1345
msgid ""
">>> turtle.color(\"black\", \"red\")\n"
">>> turtle.begin_fill()\n"
">>> turtle.circle(80)\n"
">>> turtle.end_fill()"
msgstr ""
">>> turtle.color(\"black\", \"red\")\n"
">>> turtle.begin_fill()\n"
">>> turtle.circle(80)\n"
">>> turtle.end_fill()"

#: ../../library/turtle.rst:1333
msgid "To be called just before drawing a shape to be filled."
msgstr "在绘制要填充的形状之前调用。"

#: ../../library/turtle.rst:1338
msgid "Fill the shape drawn after the last call to :func:`begin_fill`."
msgstr "填充上次调用 :func:`begin_fill` 之后绘制的形状。"

#: ../../library/turtle.rst:1340
msgid ""
"Whether or not overlap regions for self-intersecting polygons or multiple "
"shapes are filled depends on the operating system graphics, type of overlap,"
" and number of overlaps.  For example, the Turtle star above may be either "
"all yellow or have some white regions."
msgstr ""
"自相交多边形或多个形状间的重叠区域是否填充取决于操作系统的图形引擎、重叠的类型以及重叠的层数。 例如上面的 Turtle "
"多芒星可能会全部填充为黄色，也可能会有一些白色区域。"

#: ../../library/turtle.rst:1359
msgid ""
"Delete the turtle's drawings from the screen, re-center the turtle and set "
"variables to the default values."
msgstr "从屏幕中删除海龟的绘图，海龟回到原点并设置所有变量为默认值。"

#: ../../library/turtle.rst:1362
msgid ""
">>> turtle.goto(0,-22)\n"
">>> turtle.left(100)\n"
">>> turtle.position()\n"
"(0.00,-22.00)\n"
">>> turtle.heading()\n"
"100.0\n"
">>> turtle.reset()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""
">>> turtle.goto(0,-22)\n"
">>> turtle.left(100)\n"
">>> turtle.position()\n"
"(0.00,-22.00)\n"
">>> turtle.heading()\n"
"100.0\n"
">>> turtle.reset()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0"

#: ../../library/turtle.rst:1380
msgid ""
"Delete the turtle's drawings from the screen.  Do not move turtle.  State "
"and position of the turtle as well as drawings of other turtles are not "
"affected."
msgstr "从屏幕中删除指定海龟的绘图。不移动海龟。海龟的状态和位置以及其他海龟的绘图不受影响。"

#: ../../library/turtle.rst:1386
msgid "object to be written to the TurtleScreen"
msgstr "要书写到 TurtleScreen 的对象"

#: ../../library/turtle.rst:1387
msgid "True/False"
msgstr "True/False"

#: ../../library/turtle.rst:1388
msgid "one of the strings \"left\", \"center\" or right\""
msgstr "字符串 \"left\", \"center\" 或 \"right\""

#: ../../library/turtle.rst:1389
msgid "a triple (fontname, fontsize, fonttype)"
msgstr "一个三元组 (fontname, fontsize, fonttype)"

#: ../../library/turtle.rst:1391
msgid ""
"Write text - the string representation of *arg* - at the current turtle "
"position according to *align* (\"left\", \"center\" or \"right\") and with "
"the given font.  If *move* is true, the pen is moved to the bottom-right "
"corner of the text.  By default, *move* is ``False``."
msgstr ""
"基于 *align* (\"left\", \"center\" 或 \"right\") 并使用给定的字体将文本 —— *arg* 的字符串表示形式 "
"—— 写到当前海龟位置。 如果 *move* 为真值，画笔会移至文本的右下角。 默认情况下 *move* 为 ``False``。"

#: ../../library/turtle.rst:1409
msgid ""
"Make the turtle invisible.  It's a good idea to do this while you're in the "
"middle of doing some complex drawing, because hiding the turtle speeds up "
"the drawing observably."
msgstr "使海龟不可见。当你绘制复杂图形时这是个好主意，因为隐藏海龟可显著加快绘制速度。"

#: ../../library/turtle.rst:1413
msgid ">>> turtle.hideturtle()"
msgstr ">>> turtle.hideturtle()"

#: ../../library/turtle.rst:1422
msgid "Make the turtle visible."
msgstr "使海龟可见。"

#: ../../library/turtle.rst:1424
msgid ">>> turtle.showturtle()"
msgstr ">>> turtle.showturtle()"

#: ../../library/turtle.rst:1432
msgid "Return ``True`` if the Turtle is shown, ``False`` if it's hidden."
msgstr "如果海龟显示返回 ``True``，如果海龟隐藏返回 ``False``。"

#: ../../library/turtle.rst:1447
msgid "a string which is a valid shapename"
msgstr "一个有效的形状名字符串"

#: ../../library/turtle.rst:1449
msgid ""
"Set turtle shape to shape with given *name* or, if name is not given, return"
" name of current shape.  Shape with *name* must exist in the TurtleScreen's "
"shape dictionary.  Initially there are the following polygon shapes: "
"\"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\".  "
"To learn about how to deal with shapes see Screen method "
":func:`register_shape`."
msgstr ""
"设置海龟形状为 *name* 指定的形状名，如未指定形状名则返回当前的形状名。*name* 指定的形状名应存在于 TurtleScreen 的 "
"shape 字典中。多边形的形状初始时有以下几种: \"arrow\", \"turtle\", \"circle\", \"square\", "
"\"triangle\", \"classic\"。要了解如何处理形状请参看 Screen 方法 :func:`register_shape`。"

#: ../../library/turtle.rst:1455
msgid ""
">>> turtle.shape()\n"
"'classic'\n"
">>> turtle.shape(\"turtle\")\n"
">>> turtle.shape()\n"
"'turtle'"
msgstr ""
">>> turtle.shape()\n"
"'classic'\n"
">>> turtle.shape(\"turtle\")\n"
">>> turtle.shape()\n"
"'turtle'"

#: ../../library/turtle.rst:1467
msgid "one of the strings \"auto\", \"user\", \"noresize\""
msgstr "字符串 \"auto\", \"user\", \"noresize\" 其中之一"

#: ../../library/turtle.rst:1469
msgid ""
"Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".  If "
"*rmode* is not given, return current resizemode.  Different resizemodes have"
" the following effects:"
msgstr ""
"设置大小调整模式为以下值之一: \"auto\", \"user\", \"noresize\"。如未指定 *rmode* "
"则返回当前的大小调整模式。不同的大小调整模式的效果如下:"

#: ../../library/turtle.rst:1473
msgid ""
"\"auto\": adapts the appearance of the turtle corresponding to the value of "
"pensize."
msgstr "\"auto\": 根据画笔粗细值调整海龟的外观。"

#: ../../library/turtle.rst:1474
msgid ""
"\"user\": adapts the appearance of the turtle according to the values of "
"stretchfactor and outlinewidth (outline), which are set by "
":func:`shapesize`."
msgstr "\"user\": 根据拉伸因子和轮廓宽度 (outline) 值调整海龟的外观，两者是由 :func:`shapesize` 设置的。"

#: ../../library/turtle.rst:1477
msgid "\"noresize\": no adaption of the turtle's appearance takes place."
msgstr "\"noresize\": 不调整海龟的外观大小。"

#: ../../library/turtle.rst:1479
msgid ""
"``resizemode(\"user\")`` is called by :func:`shapesize` when used with "
"arguments."
msgstr "``resizemode(\"user\")`` 会由 :func:`shapesize` 带参数使用时被调用。"

#: ../../library/turtle.rst:1481
msgid ""
">>> turtle.resizemode()\n"
"'noresize'\n"
">>> turtle.resizemode(\"auto\")\n"
">>> turtle.resizemode()\n"
"'auto'"
msgstr ""
">>> turtle.resizemode()\n"
"'noresize'\n"
">>> turtle.resizemode(\"auto\")\n"
">>> turtle.resizemode()\n"
"'auto'"

#: ../../library/turtle.rst:1494 ../../library/turtle.rst:1495
#: ../../library/turtle.rst:1496
msgid "positive number"
msgstr "正数值"

#: ../../library/turtle.rst:1498
msgid ""
"Return or set the pen's attributes x/y-stretchfactors and/or outline.  Set "
"resizemode to \"user\".  If and only if resizemode is set to \"user\", the "
"turtle will be displayed stretched according to its stretchfactors: "
"*stretch_wid* is stretchfactor perpendicular to its orientation, "
"*stretch_len* is stretchfactor in direction of its orientation, *outline* "
"determines the width of the shape's outline."
msgstr ""
"返回或设置画笔的属性 x/y 拉伸因子和/或轮廓。 设置大小调整模式为 \"user\"。 当且仅当大小调整模式为 \"user\" "
"时，海龟会基于其拉伸因子调整外观: *stretch_wid* 为垂直于其朝向的宽度拉伸因子，*stretch_len* "
"为平行于其朝向的长度拉伸因子，*outline* 决定形状轮廓线的宽度。"

#: ../../library/turtle.rst:1505
msgid ""
">>> turtle.shapesize()\n"
"(1.0, 1.0, 1)\n"
">>> turtle.resizemode(\"user\")\n"
">>> turtle.shapesize(5, 5, 12)\n"
">>> turtle.shapesize()\n"
"(5, 5, 12)\n"
">>> turtle.shapesize(outline=8)\n"
">>> turtle.shapesize()\n"
"(5, 5, 8)"
msgstr ""
">>> turtle.shapesize()\n"
"(1.0, 1.0, 1)\n"
">>> turtle.resizemode(\"user\")\n"
">>> turtle.shapesize(5, 5, 12)\n"
">>> turtle.shapesize()\n"
"(5, 5, 12)\n"
">>> turtle.shapesize(outline=8)\n"
">>> turtle.shapesize()\n"
"(5, 5, 8)"

#: ../../library/turtle.rst:1521 ../../library/turtle.rst:2193
#: ../../library/turtle.rst:2194 ../../library/turtle.rst:2195
msgid "number (optional)"
msgstr "数值 (可选)"

#: ../../library/turtle.rst:1523
msgid ""
"Set or return the current shearfactor. Shear the turtleshape according to "
"the given shearfactor shear, which is the tangent of the shear angle. Do "
"*not* change the turtle's heading (direction of movement). If shear is not "
"given: return the current shearfactor, i. e. the tangent of the shear angle,"
" by which lines parallel to the heading of the turtle are sheared."
msgstr ""
"设置或返回当前的剪切因子。根据 share 指定的剪切因子即剪切角度的切线来剪切海龟形状。*不* 改变海龟的朝向 (移动方向)。如未指定 shear "
"参数: 返回当前的剪切因子即剪切角度的切线，与海龟朝向平行的线条将被剪切。"

#: ../../library/turtle.rst:1530
msgid ""
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.shearfactor(0.5)\n"
">>> turtle.shearfactor()\n"
"0.5"
msgstr ""
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.shearfactor(0.5)\n"
">>> turtle.shearfactor()\n"
"0.5"

#: ../../library/turtle.rst:1544
msgid ""
"Rotate the turtleshape by *angle* from its current tilt-angle, but do *not* "
"change the turtle's heading (direction of movement)."
msgstr "海龟形状自其当前的倾角转动 *angle* 指定的角度，但 *不* 改变海龟的朝向 (移动方向)。"

#: ../../library/turtle.rst:1547
msgid ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.tilt(30)\n"
">>> turtle.fd(50)\n"
">>> turtle.tilt(30)\n"
">>> turtle.fd(50)"
msgstr ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.tilt(30)\n"
">>> turtle.fd(50)\n"
">>> turtle.tilt(30)\n"
">>> turtle.fd(50)"

#: ../../library/turtle.rst:1561 ../../library/turtle.rst:1584
#: ../../library/turtle.rst:1585 ../../library/turtle.rst:1586
#: ../../library/turtle.rst:1587
msgid "a number (optional)"
msgstr "一个数值 (可选)"

#: ../../library/turtle.rst:1563
msgid ""
"Set or return the current tilt-angle. If angle is given, rotate the "
"turtleshape to point in the direction specified by angle, regardless of its "
"current tilt-angle. Do *not* change the turtle's heading (direction of "
"movement). If angle is not given: return the current tilt-angle, i. e. the "
"angle between the orientation of the turtleshape and the heading of the "
"turtle (its direction of movement)."
msgstr ""
"设置或返回当前的倾角。如果指定 angle 则旋转海龟形状使其指向 angle 指定的方向，忽略其当前的倾角。*不* 改变海龟的朝向 "
"(移动方向)。如果未指定 angle: 返回当前的倾角，即海龟形状的方向和海龟朝向 (移动方向) 之间的夹角。"

#: ../../library/turtle.rst:1571
msgid ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.tilt(45)\n"
">>> turtle.tiltangle()\n"
"45.0"
msgstr ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.tilt(45)\n"
">>> turtle.tiltangle()\n"
"45.0"

#: ../../library/turtle.rst:1589
msgid "Set or return the current transformation matrix of the turtle shape."
msgstr "设置或返回海龟形状的当前变形矩阵。"

#: ../../library/turtle.rst:1591
msgid ""
"If none of the matrix elements are given, return the transformation matrix "
"as a tuple of 4 elements. Otherwise set the given elements and transform the"
" turtleshape according to the matrix consisting of first row t11, t12 and "
"second row t21, t22. The determinant t11 * t22 - t12 * t21 must not be zero,"
" otherwise an error is raised. Modify stretchfactor, shearfactor and "
"tiltangle according to the given matrix."
msgstr ""
"如未指定任何矩阵元素，则返回以 4 元素元组表示的变形矩阵。 否则就根据设置指定元素的矩阵来改变海龟形状，矩阵第一排的值为 t11, t12 "
"而第二排的值为 t21, t22。 行列式 t11 * t22 - t12 * t21 必须不为零，否则会引发错误。 根据指定矩阵修改拉伸因子 "
"stretchfactor, 剪切因子 shearfactor 和倾角 tiltangle。"

#: ../../library/turtle.rst:1600
msgid ""
">>> turtle = Turtle()\n"
">>> turtle.shape(\"square\")\n"
">>> turtle.shapesize(4,2)\n"
">>> turtle.shearfactor(-0.5)\n"
">>> turtle.shapetransform()\n"
"(4.0, -1.0, -0.0, 2.0)"
msgstr ""
">>> turtle = Turtle()\n"
">>> turtle.shape(\"square\")\n"
">>> turtle.shapesize(4,2)\n"
">>> turtle.shearfactor(-0.5)\n"
">>> turtle.shapetransform()\n"
"(4.0, -1.0, -0.0, 2.0)"

#: ../../library/turtle.rst:1613
msgid ""
"Return the current shape polygon as tuple of coordinate pairs. This can be "
"used to define a new shape or components of a compound shape."
msgstr "返回以坐标值对元组表示的当前形状多边形。这可以用于定义一个新形状或一个复合形状的多个组成部分。"

#: ../../library/turtle.rst:1616
msgid ""
">>> turtle.shape(\"square\")\n"
">>> turtle.shapetransform(4, -1, 0, 2)\n"
">>> turtle.get_shapepoly()\n"
"((50, -20), (30, 20), (-50, 20), (-30, -20))"
msgstr ""
">>> turtle.shape(\"square\")\n"
">>> turtle.shapetransform(4, -1, 0, 2)\n"
">>> turtle.get_shapepoly()\n"
"((50, -20), (30, 20), (-50, 20), (-30, -20))"

#: ../../library/turtle.rst:1631 ../../library/turtle.rst:1653
#: ../../library/turtle.rst:1678 ../../library/turtle.rst:2117
msgid ""
"a function with two arguments which will be called with the coordinates of "
"the clicked point on the canvas"
msgstr "一个函数，调用时将传入两个参数表示在画布上点击的坐标。"

#: ../../library/turtle.rst:1633 ../../library/turtle.rst:1655
#: ../../library/turtle.rst:1680 ../../library/turtle.rst:2119
msgid "number of the mouse-button, defaults to 1 (left mouse button)"
msgstr "鼠标按钮编号，默认值为 1 (鼠标左键)"

#: ../../library/turtle.rst:1634 ../../library/turtle.rst:1656
#: ../../library/turtle.rst:1681 ../../library/turtle.rst:2120
msgid ""
"``True`` or ``False`` -- if ``True``, a new binding will be added, otherwise"
" it will replace a former binding"
msgstr "``True`` 或 ``False`` -- 如为 ``True`` 则将添加一个新绑定，否则将取代先前的绑定"

#: ../../library/turtle.rst:1637
msgid ""
"Bind *fun* to mouse-click events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed.  Example for the anonymous turtle, i.e. the "
"procedural way:"
msgstr ""
"将 *fun* 指定的函数绑定到鼠标点击此海龟事件。如果 *fun* 值为 ``None``，则移除现有的绑定。以下为使用匿名海龟即过程式的示例:"

#: ../../library/turtle.rst:1641
msgid ""
">>> def turn(x, y):\n"
"...     left(180)\n"
"...\n"
">>> onclick(turn)  # Now clicking into the turtle will turn it.\n"
">>> onclick(None)  # event-binding will be removed"
msgstr ""
">>> def turn(x, y):\n"
"...     left(180)\n"
"...\n"
">>> onclick(turn)  # 现在点击海龟将使其转向。\n"
">>> onclick(None)  # 事件绑定将被移除"

#: ../../library/turtle.rst:1659
msgid ""
"Bind *fun* to mouse-button-release events on this turtle.  If *fun* is "
"``None``, existing bindings are removed."
msgstr "将 *fun* 指定的函数绑定到在此海龟上释放鼠标按键事件。如果 *fun* 值为 ``None``，则移除现有的绑定。"

#: ../../library/turtle.rst:1662
msgid ""
">>> class MyTurtle(Turtle):\n"
"...     def glow(self,x,y):\n"
"...         self.fillcolor(\"red\")\n"
"...     def unglow(self,x,y):\n"
"...         self.fillcolor(\"\")\n"
"...\n"
">>> turtle = MyTurtle()\n"
">>> turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor red,\n"
">>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent."
msgstr ""
">>> class MyTurtle(Turtle):\n"
"...     def glow(self,x,y):\n"
"...         self.fillcolor(\"red\")\n"
"...     def unglow(self,x,y):\n"
"...         self.fillcolor(\"\")\n"
"...\n"
">>> turtle = MyTurtle()\n"
">>> turtle.onclick(turtle.glow)     # 点击turtle会将填充颜色设置为红色。\n"
">>> turtle.onrelease(turtle.unglow) # 释放会使它变得透明"

#: ../../library/turtle.rst:1684
msgid ""
"Bind *fun* to mouse-move events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr "将 *fun* 指定的函数绑定到在此海龟上移动鼠标事件。如果 *fun* 值为 ``None``，则移除现有的绑定。"

#: ../../library/turtle.rst:1687
msgid ""
"Remark: Every sequence of mouse-move-events on a turtle is preceded by a "
"mouse-click event on that turtle."
msgstr "注: 在海龟上移动鼠标事件之前应先发生在此海龟上点击鼠标事件。"

#: ../../library/turtle.rst:1690
msgid ">>> turtle.ondrag(turtle.goto)"
msgstr ">>> turtle.ondrag(turtle.goto)"

#: ../../library/turtle.rst:1695
msgid ""
"Subsequently, clicking and dragging the Turtle will move it across the "
"screen thereby producing handdrawings (if pen is down)."
msgstr "在此之后点击并拖动海龟可在屏幕上手绘线条 (如果画笔为落下)。"

#: ../../library/turtle.rst:1705
msgid ""
"Record the vertices of a polygon drawn in the ``with turtle.poly():`` block."
" The first and last vertices will be connected."
msgstr ""

#: ../../library/turtle.rst:1708
msgid ""
">>> with turtle.poly():\n"
"...     turtle.forward(100)\n"
"...     turtle.right(60)\n"
"...     turtle.forward(100)"
msgstr ""

#: ../../library/turtle.rst:1721
msgid ""
"Start recording the vertices of a polygon.  Current turtle position is first"
" vertex of polygon."
msgstr "开始记录多边形的顶点。当前海龟位置为多边形的第一个顶点。"

#: ../../library/turtle.rst:1727
msgid ""
"Stop recording the vertices of a polygon.  Current turtle position is last "
"vertex of polygon.  This will be connected with the first vertex."
msgstr "停止记录多边形的顶点。当前海龟位置为多边形的最后一个顶点。它将连线到第一个顶点。"

#: ../../library/turtle.rst:1733
msgid "Return the last recorded polygon."
msgstr "返回最新记录的多边形。"

#: ../../library/turtle.rst:1735
msgid ""
">>> turtle.home()\n"
">>> turtle.begin_poly()\n"
">>> turtle.fd(100)\n"
">>> turtle.left(20)\n"
">>> turtle.fd(30)\n"
">>> turtle.left(60)\n"
">>> turtle.fd(50)\n"
">>> turtle.end_poly()\n"
">>> p = turtle.get_poly()\n"
">>> register_shape(\"myFavouriteShape\", p)"
msgstr ""
">>> turtle.home()\n"
">>> turtle.begin_poly()\n"
">>> turtle.fd(100)\n"
">>> turtle.left(20)\n"
">>> turtle.fd(30)\n"
">>> turtle.left(60)\n"
">>> turtle.fd(50)\n"
">>> turtle.end_poly()\n"
">>> p = turtle.get_poly()\n"
">>> register_shape(\"myFavouriteShape\", p)"

#: ../../library/turtle.rst:1752
msgid ""
"Create and return a clone of the turtle with same position, heading and "
"turtle properties."
msgstr "创建并返回海龟的克隆体，具有相同的位置、朝向和海龟属性。"

#: ../../library/turtle.rst:1755
msgid ""
">>> mick = Turtle()\n"
">>> joe = mick.clone()"
msgstr ""
">>> mick = Turtle()\n"
">>> joe = mick.clone()"

#: ../../library/turtle.rst:1765
msgid ""
"Return the Turtle object itself.  Only reasonable use: as a function to "
"return the \"anonymous turtle\":"
msgstr "返回海龟对象自身。唯一合理的用法: 作为一个函数来返回 \"匿名海龟\":"

#: ../../library/turtle.rst:1768
msgid ""
">>> pet = getturtle()\n"
">>> pet.fd(50)\n"
">>> pet\n"
"<turtle.Turtle object at 0x...>"
msgstr ""
">>> pet = getturtle()\n"
">>> pet.fd(50)\n"
">>> pet\n"
"<turtle.Turtle object at 0x...>"

#: ../../library/turtle.rst:1779
msgid ""
"Return the :class:`TurtleScreen` object the turtle is drawing on. "
"TurtleScreen methods can then be called for that object."
msgstr "返回作为海龟绘图场所的 :class:`TurtleScreen` 类对象。该对象将可调用 TurtleScreen 方法。"

#: ../../library/turtle.rst:1782
msgid ""
">>> ts = turtle.getscreen()\n"
">>> ts\n"
"<turtle._Screen object at 0x...>\n"
">>> ts.bgcolor(\"pink\")"
msgstr ""
">>> ts = turtle.getscreen()\n"
">>> ts\n"
"<turtle._Screen object at 0x...>\n"
">>> ts.bgcolor(\"pink\")"

#: ../../library/turtle.rst:1793
msgid "an integer or ``None``"
msgstr "一个整型数值或 ``None``"

#: ../../library/turtle.rst:1795
msgid ""
"Set or disable undobuffer.  If *size* is an integer, an empty undobuffer of "
"given size is installed.  *size* gives the maximum number of turtle actions "
"that can be undone by the :func:`undo` method/function.  If *size* is "
"``None``, the undobuffer is disabled."
msgstr ""
"设置或禁用撤销缓冲区。 如果 *size* 为整数，则开辟一个给定大小的空撤销缓冲区。 *size* 给出了可以通过 :func:`undo` "
"方法/函数撤销海龟动作的最大次数。  如果 *size* 为 ``None``，则禁用撤销缓冲区。"

#: ../../library/turtle.rst:1800
msgid ">>> turtle.setundobuffer(42)"
msgstr ">>> turtle.setundobuffer(42)"

#: ../../library/turtle.rst:1808
msgid "Return number of entries in the undobuffer."
msgstr "返回撤销缓冲区里的条目数。"

#: ../../library/turtle.rst:1810
msgid ""
">>> while undobufferentries():\n"
"...     undo()"
msgstr ""
">>> while undobufferentries():\n"
"...     undo()"

#: ../../library/turtle.rst:1821
msgid "Compound shapes"
msgstr "复合形状"

#: ../../library/turtle.rst:1823
msgid ""
"To use compound turtle shapes, which consist of several polygons of "
"different color, you must use the helper class :class:`Shape` explicitly as "
"described below:"
msgstr "要使用由多个不同颜色多边形构成的复合海龟形状，你必须明确地使用辅助类 :class:`Shape`，具体步骤如下:"

#: ../../library/turtle.rst:1827
msgid "Create an empty Shape object of type \"compound\"."
msgstr "创建一个空 Shape 对象，类型为 \"compound\"。"

#: ../../library/turtle.rst:1828
msgid ""
"Add as many components to this object as desired, using the "
":meth:`~Shape.addcomponent` method."
msgstr "可根据需要使用 :meth:`~Shape.addcomponent` 方法向此对象添加多个组件。"

#: ../../library/turtle.rst:1831
msgid "For example:"
msgstr "例如:"

#: ../../library/turtle.rst:1833
msgid ""
">>> s = Shape(\"compound\")\n"
">>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5))\n"
">>> s.addcomponent(poly1, \"red\", \"blue\")\n"
">>> poly2 = ((0,0),(10,-5),(-10,-5))\n"
">>> s.addcomponent(poly2, \"blue\", \"red\")"
msgstr ""
">>> s = Shape(\"compound\")\n"
">>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5))\n"
">>> s.addcomponent(poly1, \"red\", \"blue\")\n"
">>> poly2 = ((0,0),(10,-5),(-10,-5))\n"
">>> s.addcomponent(poly2, \"blue\", \"red\")"

#: ../../library/turtle.rst:1842
msgid "Now add the Shape to the Screen's shapelist and use it:"
msgstr "接下来将 Shape 对象添加到 Screen 对象的形状列表并使用它:"

#: ../../library/turtle.rst:1844
msgid ""
">>> register_shape(\"myshape\", s)\n"
">>> shape(\"myshape\")"
msgstr ""
">>> register_shape(\"myshape\", s)\n"
">>> shape(\"myshape\")"

#: ../../library/turtle.rst:1853
msgid ""
"The :class:`Shape` class is used internally by the :func:`register_shape` "
"method in different ways.  The application programmer has to deal with the "
"Shape class *only* when using compound shapes like shown above!"
msgstr ""
":class:`Shape` 类在 :func:`register_shape` 方法的内部以多种方式使用。应用程序编写者 *只有* "
"在使用上述的复合形状时才需要处理 Shape 类。"

#: ../../library/turtle.rst:1859
msgid "Methods of TurtleScreen/Screen and corresponding functions"
msgstr "TurtleScreen/Screen 方法及对应函数"

#: ../../library/turtle.rst:1861
msgid ""
"Most of the examples in this section refer to a TurtleScreen instance called"
" ``screen``."
msgstr "本节中的大部分示例都使用 TurtleScreen 类的一个实例，命名为 ``screen``。"

#: ../../library/turtle.rst:1875
msgid ""
"a color string or three numbers in the range 0..colormode or a 3-tuple of "
"such numbers"
msgstr "一个颜色字符串或三个取值范围 0..colormode 内的数值或一个取值范围相同的数值3元组"

#: ../../library/turtle.rst:1879
msgid "Set or return background color of the TurtleScreen."
msgstr "设置或返回 TurtleScreen 的背景颜色。"

#: ../../library/turtle.rst:1881
msgid ""
">>> screen.bgcolor(\"orange\")\n"
">>> screen.bgcolor()\n"
"'orange'\n"
">>> screen.bgcolor(\"#800080\")\n"
">>> screen.bgcolor()\n"
"(128.0, 0.0, 128.0)"
msgstr ""
">>> screen.bgcolor(\"orange\")\n"
">>> screen.bgcolor()\n"
"'orange'\n"
">>> screen.bgcolor(\"#800080\")\n"
">>> screen.bgcolor()\n"
"(128.0, 0.0, 128.0)"

#: ../../library/turtle.rst:1894
msgid ""
"a string, name of an image file (PNG, GIF, PGM, and PPM) or ``\"nopic\"``, "
"or ``None``"
msgstr ""

#: ../../library/turtle.rst:1897
msgid ""
"Set background image or return name of current backgroundimage.  If "
"*picname* is a filename, set the corresponding image as background.  If "
"*picname* is ``\"nopic\"``, delete background image, if present.  If "
"*picname* is ``None``, return the filename of the current backgroundimage. "
"::"
msgstr ""
"设置背景图片或返回当前背景图片名称。如果 *picname* 为一个文件名，则将相应图片设为背景。如果 *picname* 为 "
"``\"nopic\"``，则删除当前背景图片。如果 *picname* 为 ``None``，则返回当前背景图片文件名。::"

#: ../../library/turtle.rst:1902
msgid ""
">>> screen.bgpic()\n"
"'nopic'\n"
">>> screen.bgpic(\"landscape.gif\")\n"
">>> screen.bgpic()\n"
"\"landscape.gif\""
msgstr ""
">>> screen.bgpic()\n"
"'nopic'\n"
">>> screen.bgpic(\"landscape.gif\")\n"
">>> screen.bgpic()\n"
"\"landscape.gif\""

#: ../../library/turtle.rst:1913
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``clearscreen``.  The global function ``clear`` is a different one "
"derived from the Turtle method ``clear``."
msgstr ""
"此 TurtleScreen 方法作为全局函数时只有一个名字 ``clearscreen``。全局函数 ``clear`` 所对应的是 Turtle "
"方法 ``clear``。"

#: ../../library/turtle.rst:1920
msgid ""
"Delete all drawings and all turtles from the TurtleScreen.  Reset the now "
"empty TurtleScreen to its initial state: white background, no background "
"image, no event bindings and tracing on."
msgstr "从中删除所有海龟的全部绘图。将已清空的 TurtleScreen 重置为初始状态: 白色背景，无背景片，无事件绑定并启用追踪。"

#: ../../library/turtle.rst:1929
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``resetscreen``.  The global function ``reset`` is another one derived "
"from the Turtle method ``reset``."
msgstr ""
"此 TurtleScreen 方法作为全局函数时只有一个名字 ``resetscreen``。全局函数 ``reset`` 所对应的是 Turtle "
"方法 ``reset``。"

#: ../../library/turtle.rst:1936
msgid "Reset all Turtles on the Screen to their initial state."
msgstr "重置屏幕上的所有海龟为其初始状态。"

#: ../../library/turtle.rst:1941
msgid "positive integer, new width of canvas in pixels"
msgstr "正整型数，以像素表示画布的新宽度值"

#: ../../library/turtle.rst:1942
msgid "positive integer, new height of canvas in pixels"
msgstr "正整型数，以像素表示画面的新高度值"

#: ../../library/turtle.rst:1943
msgid "colorstring or color-tuple, new background color"
msgstr "颜色字符串或颜色元组，新的背景颜色"

#: ../../library/turtle.rst:1945
msgid ""
"If no arguments are given, return current (canvaswidth, canvasheight).  Else"
" resize the canvas the turtles are drawing on.  Do not alter the drawing "
"window.  To observe hidden parts of the canvas, use the scrollbars. With "
"this method, one can make visible those parts of a drawing which were "
"outside the canvas before."
msgstr ""
"如未指定任何参数，则返回当前的 (canvaswidth, "
"canvasheight)。否则改变作为海龟绘图场所的画布大小。不改变绘图窗口。要观察画布的隐藏区域，可以使用滚动条。通过此方法可以令之前绘制于画布之外的图形变为可见。"

#: ../../library/turtle.rst:1957
msgid "e.g. to search for an erroneously escaped turtle ;-)"
msgstr "也可以用来寻找意外逃走的海龟 ;-)"

#: ../../library/turtle.rst:1962
msgid "a number, x-coordinate of lower left corner of canvas"
msgstr "一个数值, 画布左下角的 x-坐标"

#: ../../library/turtle.rst:1963
msgid "a number, y-coordinate of lower left corner of canvas"
msgstr "一个数值, 画布左下角的 y-坐标"

#: ../../library/turtle.rst:1964
msgid "a number, x-coordinate of upper right corner of canvas"
msgstr "一个数值, 画面右上角的 x-坐标"

#: ../../library/turtle.rst:1965
msgid "a number, y-coordinate of upper right corner of canvas"
msgstr "一个数值, 画布右上角的 y-坐标"

#: ../../library/turtle.rst:1967
msgid ""
"Set up user-defined coordinate system and switch to mode \"world\" if "
"necessary.  This performs a ``screen.reset()``.  If mode \"world\" is "
"already active, all drawings are redrawn according to the new coordinates."
msgstr ""
"设置用户自定义坐标系并在必要时切换模式为 \"world\"。这会执行一次 ``screen.reset()``。如果 \"world\" "
"模式已激活，则所有图形将根据新的坐标系重绘。"

#: ../../library/turtle.rst:1971
msgid ""
"**ATTENTION**: in user-defined coordinate systems angles may appear "
"distorted."
msgstr "**注意**: 在用户自定义坐标系中，角度可能显得扭曲。"

#: ../../library/turtle.rst:1974
msgid ""
">>> screen.reset()\n"
">>> screen.setworldcoordinates(-50,-7.5,50,7.5)\n"
">>> for _ in range(72):\n"
"...     left(10)\n"
"...\n"
">>> for _ in range(8):\n"
"...     left(45); fd(2)   # a regular octagon"
msgstr ""
">>> screen.reset()\n"
">>> screen.setworldcoordinates(-50,-7.5,50,7.5)\n"
">>> for _ in range(72):\n"
"...     left(10)\n"
"...\n"
">>> for _ in range(8):\n"
"...     left(45); fd(2)   # 一个正八边形"

#: ../../library/turtle.rst:1999
msgid ""
"Temporarily disable turtle animation. The code written inside the "
"``no_animation`` block will not be animated; once the code block is exited, "
"the drawing will appear."
msgstr ""

#: ../../library/turtle.rst:2003
msgid ""
">>> with screen.no_animation():\n"
"...     for dist in range(2, 400, 2):\n"
"...         fd(dist)\n"
"...         rt(90)"
msgstr ""

#: ../../library/turtle.rst:2016
msgid "positive integer"
msgstr "正整型数"

#: ../../library/turtle.rst:2018
msgid ""
"Set or return the drawing *delay* in milliseconds.  (This is approximately "
"the time interval between two consecutive canvas updates.)  The longer the "
"drawing delay, the slower the animation."
msgstr "设置或返回以毫秒数表示的延迟值 *delay*。(这约等于连续两次画布刷新的间隔时间。) 绘图延迟越长，动画速度越慢。"

#: ../../library/turtle.rst:2022
msgid "Optional argument:"
msgstr "可选参数:"

#: ../../library/turtle.rst:2024
msgid ""
">>> screen.delay()\n"
"10\n"
">>> screen.delay(5)\n"
">>> screen.delay()\n"
"5"
msgstr ""
">>> screen.delay()\n"
"10\n"
">>> screen.delay(5)\n"
">>> screen.delay()\n"
"5"

#: ../../library/turtle.rst:2036 ../../library/turtle.rst:2037
msgid "nonnegative integer"
msgstr "非负整型数"

#: ../../library/turtle.rst:2039
msgid ""
"Turn turtle animation on/off and set delay for update drawings.  If *n* is "
"given, only each n-th regular screen update is really performed.  (Can be "
"used to accelerate the drawing of complex graphics.)  When called without "
"arguments, returns the currently stored value of n. Second argument sets "
"delay value (see :func:`delay`)."
msgstr ""
"启用/禁用海龟动画并设置刷新图形的延迟时间。如果指定 *n* 值，则只有每第 n 次屏幕刷新会实际执行。(可被用来加速复杂图形的绘制。) "
"如果调用时不带参数，则返回当前保存的 n 值。第二个参数设置延迟值 (参见 :func:`delay`)。"

#: ../../library/turtle.rst:2046
msgid ""
">>> screen.tracer(8, 25)\n"
">>> dist = 2\n"
">>> for i in range(200):\n"
"...     fd(dist)\n"
"...     rt(90)\n"
"...     dist += 2"
msgstr ""
">>> screen.tracer(8, 25)\n"
">>> dist = 2\n"
">>> for i in range(200):\n"
"...     fd(dist)\n"
"...     rt(90)\n"
"...     dist += 2"

#: ../../library/turtle.rst:2059
msgid "Perform a TurtleScreen update. To be used when tracer is turned off."
msgstr "执行一次 TurtleScreen 刷新。在禁用追踪时使用。"

#: ../../library/turtle.rst:2061
msgid "See also the RawTurtle/Turtle method :func:`speed`."
msgstr "另参见 RawTurtle/Turtle 方法 :func:`speed`。"

#: ../../library/turtle.rst:2069
msgid ""
"Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments"
" are provided in order to be able to pass :func:`listen` to the onclick "
"method."
msgstr ""
"设置焦点到 TurtleScreen (以便接收按键事件)。使用两个 Dummy 参数以便能够传递 :func:`listen` 给 onclick "
"方法。"

#: ../../library/turtle.rst:2076 ../../library/turtle.rst:2096
msgid "a function with no arguments or ``None``"
msgstr "一个无参数的函数或 ``None``"

#: ../../library/turtle.rst:2077 ../../library/turtle.rst:2097
msgid "a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")"
msgstr "一个字符串: 键 (例如 \"a\") 或键标 (例如 \"space\")"

#: ../../library/turtle.rst:2079
msgid ""
"Bind *fun* to key-release event of key.  If *fun* is ``None``, event "
"bindings are removed. Remark: in order to be able to register key-events, "
"TurtleScreen must have the focus. (See method :func:`listen`.)"
msgstr ""
"绑定 *fun* 指定的函数到按键释放事件。如果 *fun* 值为 ``None``，则移除事件绑定。注: "
"为了能够注册按键事件，TurtleScreen 必须得到焦点。(参见 method :func:`listen` 方法。)"

#: ../../library/turtle.rst:2083
msgid ""
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> screen.onkey(f, \"Up\")\n"
">>> screen.listen()"
msgstr ""
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> screen.onkey(f, \"Up\")\n"
">>> screen.listen()"

#: ../../library/turtle.rst:2099
msgid ""
"Bind *fun* to key-press event of key if key is given, or to any key-press-"
"event if no key is given. Remark: in order to be able to register key-"
"events, TurtleScreen must have focus. (See method :func:`listen`.)"
msgstr ""
"绑定 *fun* 指定的函数到指定键的按下事件。如未指定键则绑定到任意键的按下事件。注: 为了能够注册按键事件，必须得到焦点。(参见 "
":func:`listen` 方法。)"

#: ../../library/turtle.rst:2104
msgid ""
">>> def f():\n"
"...     fd(50)\n"
"...\n"
">>> screen.onkey(f, \"Up\")\n"
">>> screen.listen()"
msgstr ""
">>> def f():\n"
"...     fd(50)\n"
"...\n"
">>> screen.onkey(f, \"Up\")\n"
">>> screen.listen()"

#: ../../library/turtle.rst:2123
msgid ""
"Bind *fun* to mouse-click events on this screen.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr "绑定 *fun* 指定的函数到鼠标点击屏幕事件。如果 *fun* 值为 ``None``，则移除现有的绑定。"

#: ../../library/turtle.rst:2126
msgid ""
"Example for a TurtleScreen instance named ``screen`` and a Turtle instance "
"named ``turtle``:"
msgstr "以下示例使用一个 TurtleScreen 实例 ``screen`` 和一个 Turtle 实例 ``turtle``:"

#: ../../library/turtle.rst:2129
msgid ""
">>> screen.onclick(turtle.goto) # Subsequently clicking into the TurtleScreen will\n"
">>>                             # make the turtle move to the clicked point.\n"
">>> screen.onclick(None)        # remove event binding again"
msgstr ""
">>> screen.onclick(turtle.goto) # 后续对 TurtleScreen 的点击\n"
">>>                             # 将使海龟移至被点击的位置。\n"
">>> screen.onclick(None)        # 再次移除事件绑定"

#: ../../library/turtle.rst:2137
msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``onscreenclick``.  The global function ``onclick`` is another one "
"derived from the Turtle method ``onclick``."
msgstr ""
"此 TurtleScreen 方法作为全局函数时只有一个名字 ``onscreenclick``。全局函数 ``onclick`` 所对应的是 "
"Turtle 方法 ``onclick``。"

#: ../../library/turtle.rst:2144
msgid "a function with no arguments"
msgstr "一个无参数的函数"

#: ../../library/turtle.rst:2145
msgid "a number >= 0"
msgstr "一个数值 >= 0"

#: ../../library/turtle.rst:2147
msgid "Install a timer that calls *fun* after *t* milliseconds."
msgstr "安装一个计时器，在 *t* 毫秒后调用 *fun* 函数。"

#: ../../library/turtle.rst:2149
msgid ""
">>> running = True\n"
">>> def f():\n"
"...     if running:\n"
"...         fd(50)\n"
"...         lt(60)\n"
"...         screen.ontimer(f, 250)\n"
">>> f()   ### makes the turtle march around\n"
">>> running = False"
msgstr ""
">>> running = True\n"
">>> def f():\n"
"...     if running:\n"
"...         fd(50)\n"
"...         lt(60)\n"
"...         screen.ontimer(f, 250)\n"
">>> f()   ### 让海龟随意前进\n"
">>> running = False"

#: ../../library/turtle.rst:2165
msgid ""
"Starts event loop - calling Tkinter's mainloop function. Must be the last "
"statement in a turtle graphics program. Must *not* be used if a script is "
"run from within IDLE in -n mode (No subprocess) - for interactive use of "
"turtle graphics. ::"
msgstr ""
"开始事件循环 - 调用 Tkinter 的 mainloop 函数。必须作为一个海龟绘图程序的结束语句。如果一个脚本是在以 -n 模式 (无子进程) "
"启动的 IDLE 中运行时 *不可* 使用 - 用于实现海龟绘图的交互功能。::"

#: ../../library/turtle.rst:2170
msgid ">>> screen.mainloop()"
msgstr ">>> screen.mainloop()"

#: ../../library/turtle.rst:2178 ../../library/turtle.rst:2179
#: ../../library/turtle.rst:2191 ../../library/turtle.rst:2192
msgid "string"
msgstr "string"

#: ../../library/turtle.rst:2181
msgid ""
"Pop up a dialog window for input of a string. Parameter title is the title "
"of the dialog window, prompt is a text mostly describing what information to"
" input. Return the string input. If the dialog is canceled, return ``None``."
" ::"
msgstr ""
"弹出一个对话框窗口用来输入一个字符串。形参 title 为对话框窗口的标题，prompt "
"为一条文本，通常用来提示要输入什么信息。返回输入的字符串。如果对话框被取消则返回 ``None``。::"

#: ../../library/turtle.rst:2186
msgid ">>> screen.textinput(\"NIM\", \"Name of first player:\")"
msgstr ">>> screen.textinput(\"NIM\", \"Name of first player:\")"

#: ../../library/turtle.rst:2197
msgid ""
"Pop up a dialog window for input of a number. title is the title of the "
"dialog window, prompt is a text mostly describing what numerical information"
" to input. default: default value, minval: minimum value for input, maxval: "
"maximum value for input. The number input must be in the range minval .. "
"maxval if these are given. If not, a hint is issued and the dialog remains "
"open for correction. Return the number input. If the dialog is canceled,  "
"return ``None``. ::"
msgstr ""
"弹出一个用于输入数值的对话框窗口。 title 是对话框窗口的标题，prompt 是通常用来描述要输入的数字信息的文本。 default: 默认值, "
"minval: 可输入的最小值, maxval: 可输入的最大值。 如果给出 minval .. maxval 则输入的数值必须在此范围以内。 "
"如未给出，则将发出提示并且让话框保持打开以便修正。  返回输入的数值。 如果对话框被取消，则返回 ``None``。 ::"

#: ../../library/turtle.rst:2206
msgid ""
">>> screen.numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, "
"maxval=10000)"
msgstr ""
">>> screen.numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, "
"maxval=10000)"

#: ../../library/turtle.rst:2214
msgid "one of the strings \"standard\", \"logo\" or \"world\""
msgstr "字符串 \"standard\", \"logo\" 或 \"world\" 其中之一"

#: ../../library/turtle.rst:2216
msgid ""
"Set turtle mode (\"standard\", \"logo\" or \"world\") and perform reset.  If"
" mode is not given, current mode is returned."
msgstr "设置海龟模式 (\"standard\", \"logo\" 或 \"world\") 并执行重置。如未指定模式则返回当前的模式。"

#: ../../library/turtle.rst:2219
msgid ""
"Mode \"standard\" is compatible with old :mod:`turtle`.  Mode \"logo\" is "
"compatible with most Logo turtle graphics.  Mode \"world\" uses user-defined"
" \"world coordinates\". **Attention**: in this mode angles appear distorted "
"if ``x/y`` unit-ratio doesn't equal 1."
msgstr ""
"\"standard\" 模式与旧的 :mod:`turtle` 兼容。\"logo\" 模式与大部分 Logo 海龟绘图兼容。\"world\" "
"模式使用用户自定义的 \"世界坐标系\"。**注意**: 在此模式下，如果 ``x/y`` 单位比率不等于 1 则角度会显得扭曲。"

#: ../../library/turtle.rst:2225
msgid "Mode"
msgstr "模式"

#: ../../library/turtle.rst:2225
msgid "Initial turtle heading"
msgstr "初始海龟朝向"

#: ../../library/turtle.rst:2225
msgid "positive angles"
msgstr "正数角度"

#: ../../library/turtle.rst:2227
msgid "\"standard\""
msgstr "\"standard\""

#: ../../library/turtle.rst:2227
msgid "to the right (east)"
msgstr "朝右 (东)"

#: ../../library/turtle.rst:2227
msgid "counterclockwise"
msgstr "逆时针"

#: ../../library/turtle.rst:2228
msgid "\"logo\""
msgstr "\"logo\""

#: ../../library/turtle.rst:2228
msgid "upward    (north)"
msgstr "朝上 (北)"

#: ../../library/turtle.rst:2228
msgid "clockwise"
msgstr "顺时针"

#: ../../library/turtle.rst:2231
msgid ""
">>> mode(\"logo\")   # resets turtle heading to north\n"
">>> mode()\n"
"'logo'"
msgstr ""
">>> mode(\"logo\")   # 将海龟重置为朝向北方\n"
">>> mode()\n"
"'logo'"

#: ../../library/turtle.rst:2241
msgid "one of the values 1.0 or 255"
msgstr "数值 1.0 或 255 其中之一"

#: ../../library/turtle.rst:2243
msgid ""
"Return the colormode or set it to 1.0 or 255.  Subsequently *r*, *g*, *b* "
"values of color triples have to be in the range 0..*cmode*."
msgstr ""
"返回 colormode 或将其设为 1.0 或 255。 后续表示三原色的 *r*, *g*, *b* 值必须在 0..*cmode* 范围之内。"

#: ../../library/turtle.rst:2246
msgid ""
">>> screen.colormode(1)\n"
">>> turtle.pencolor(240, 160, 80)\n"
"Traceback (most recent call last):\n"
"     ...\n"
"TurtleGraphicsError: bad color sequence: (240, 160, 80)\n"
">>> screen.colormode()\n"
"1.0\n"
">>> screen.colormode(255)\n"
">>> screen.colormode()\n"
"255\n"
">>> turtle.pencolor(240,160,80)"
msgstr ""
">>> screen.colormode(1)\n"
">>> turtle.pencolor(240, 160, 80)\n"
"Traceback (most recent call last):\n"
"     ...\n"
"TurtleGraphicsError: bad color sequence: (240, 160, 80)\n"
">>> screen.colormode()\n"
"1.0\n"
">>> screen.colormode(255)\n"
">>> screen.colormode()\n"
"255\n"
">>> turtle.pencolor(240,160,80)"

#: ../../library/turtle.rst:2264
msgid ""
"Return the Canvas of this TurtleScreen.  Useful for insiders who know what "
"to do with a Tkinter Canvas."
msgstr "返回此 TurtleScreen 的 Canvas 对象。供了解 Tkinter 的 Canvas 对象内部机理的人士使用。"

#: ../../library/turtle.rst:2267
msgid ""
">>> cv = screen.getcanvas()\n"
">>> cv\n"
"<turtle.ScrolledCanvas object ...>"
msgstr ""
">>> cv = screen.getcanvas()\n"
">>> cv\n"
"<turtle.ScrolledCanvas object ...>"

#: ../../library/turtle.rst:2277
msgid "Return a list of names of all currently available turtle shapes."
msgstr "返回所有当前可用海龟形状的列表。"

#: ../../library/turtle.rst:2279
msgid ""
">>> screen.getshapes()\n"
"['arrow', 'blank', 'circle', ..., 'turtle']"
msgstr ""
">>> screen.getshapes()\n"
"['arrow', 'blank', 'circle', ..., 'turtle']"

#: ../../library/turtle.rst:2289
msgid "There are four different ways to call this function:"
msgstr ""

#: ../../library/turtle.rst:2291
msgid ""
"*name* is the name of an image file (PNG, GIF, PGM, and PPM) and *shape* is "
"``None``: Install the corresponding image shape. ::"
msgstr ""

#: ../../library/turtle.rst:2294
msgid ">>> screen.register_shape(\"turtle.gif\")"
msgstr ">>> screen.register_shape(\"turtle.gif\")"

#: ../../library/turtle.rst:2297 ../../library/turtle.rst:2306
msgid ""
"Image shapes *do not* rotate when turning the turtle, so they do not display"
" the heading of the turtle!"
msgstr "当海龟转向时图像形状 *不会* 转动，因此无法显示海龟的朝向!"

#: ../../library/turtle.rst:2300
msgid ""
"*name* is an arbitrary string and *shape* is the name of an image file (PNG,"
" GIF, PGM, and PPM): Install the corresponding image shape. ::"
msgstr ""

#: ../../library/turtle.rst:2303
msgid ">>> screen.register_shape(\"turtle\", \"turtle.gif\")"
msgstr ""

#: ../../library/turtle.rst:2309
msgid ""
"*name* is an arbitrary string and *shape* is a tuple of pairs of "
"coordinates: Install the corresponding polygon shape."
msgstr "*name* 为指定的字符串，*shape* 为由坐标值对构成的元组: 安装相应的多边形形状。"

#: ../../library/turtle.rst:2312
msgid ">>> screen.register_shape(\"triangle\", ((5,-3), (0,5), (-5,-3)))"
msgstr ">>> screen.register_shape(\"triangle\", ((5,-3), (0,5), (-5,-3)))"

#: ../../library/turtle.rst:2317
msgid ""
"*name* is an arbitrary string and *shape* is a (compound) :class:`Shape` "
"object: Install the corresponding compound shape."
msgstr ""
"*name* 为任意字符串而 *shape* 为 (复合) :class:`Shape` 对象：安装相应的复合形状。Install the "
"corresponding compound shape."

#: ../../library/turtle.rst:2320
msgid ""
"Add a turtle shape to TurtleScreen's shapelist.  Only thusly registered "
"shapes can be used by issuing the command ``shape(shapename)``."
msgstr ""
"将一个海龟形状加入 TurtleScreen 的形状列表。只有这样注册过的形状才能通过执行 ``shape(shapename)`` 命令来使用。"

#: ../../library/turtle.rst:2323
msgid ""
"Added support for PNG, PGM, and PPM image formats. Both a shape name and an "
"image file name can be specified."
msgstr ""

#: ../../library/turtle.rst:2330
msgid "Return the list of turtles on the screen."
msgstr "返回屏幕上的海龟列表。"

#: ../../library/turtle.rst:2332
msgid ""
">>> for turtle in screen.turtles():\n"
"...     turtle.color(\"red\")"
msgstr ""
">>> for turtle in screen.turtles():\n"
"...     turtle.color(\"red\")"

#: ../../library/turtle.rst:2341
msgid "Return the height of the turtle window. ::"
msgstr "返回海龟窗口的高度。::"

#: ../../library/turtle.rst:2343
msgid ""
">>> screen.window_height()\n"
"480"
msgstr ""
">>> screen.window_height()\n"
"480"

#: ../../library/turtle.rst:2349
msgid "Return the width of the turtle window. ::"
msgstr "返回海龟窗口的宽度。::"

#: ../../library/turtle.rst:2351
msgid ""
">>> screen.window_width()\n"
"640"
msgstr ""
">>> screen.window_width()\n"
"640"

#: ../../library/turtle.rst:2358
msgid "Methods specific to Screen, not inherited from TurtleScreen"
msgstr "Screen 专有方法, 而非继承自 TurtleScreen"

#: ../../library/turtle.rst:2362
msgid "Shut the turtlegraphics window."
msgstr "关闭海龟绘图窗口。"

#: ../../library/turtle.rst:2367
msgid "Bind ``bye()`` method to mouse clicks on the Screen."
msgstr "将 ``bye()`` 方法绑定到 Screen 上的鼠标点击事件。"

#: ../../library/turtle.rst:2370
msgid ""
"If the value \"using_IDLE\" in the configuration dictionary is ``False`` "
"(default value), also enter mainloop.  Remark: If IDLE with the ``-n`` "
"switch (no subprocess) is used, this value should be set to ``True`` in "
":file:`turtle.cfg`.  In this case IDLE's own mainloop is active also for the"
" client script."
msgstr ""
"如果配置字典中 \"using_IDLE\" 的值为 ``False`` (默认值) 则同时进入主事件循环。注: 如果启动 IDLE 时使用了 "
"``-n`` 开关 (无子进程)，:file:`turtle.cfg` 中此数值应设为 ``True``。在此情况下 IDLE "
"本身的主事件循环同样会作用于客户脚本。"

#: ../../library/turtle.rst:2379
msgid "Save the current turtle drawing (and turtles) as a PostScript file."
msgstr ""

#: ../../library/turtle.rst:2381
msgid "the path of the saved PostScript file"
msgstr ""

#: ../../library/turtle.rst:2382
msgid ""
"if ``False`` and there already exists a file with the given filename, then "
"the function will raise a ``FileExistsError``. If it is ``True``, the file "
"will be overwritten."
msgstr ""

#: ../../library/turtle.rst:2387
msgid ""
">>> screen.save(\"my_drawing.ps\")\n"
">>> screen.save(\"my_drawing.ps\", overwrite=True)"
msgstr ""

#: ../../library/turtle.rst:2397
msgid ""
"Set the size and position of the main window.  Default values of arguments "
"are stored in the configuration dictionary and can be changed via a "
":file:`turtle.cfg` file."
msgstr "设置主窗口的大小和位置。默认参数值保存在配置字典中，可通过 :file:`turtle.cfg` 文件进行修改。"

#: ../../library/turtle.rst:2401
msgid ""
"if an integer, a size in pixels, if a float, a fraction of the screen; "
"default is 50% of screen"
msgstr "如为一个整型数值，表示大小为多少像素，如为一个浮点数值，则表示屏幕的占比；默认为屏幕的 50%"

#: ../../library/turtle.rst:2403
msgid ""
"if an integer, the height in pixels, if a float, a fraction of the screen; "
"default is 75% of screen"
msgstr "如为一个整型数值，表示高度为多少像素，如为一个浮点数值，则表示屏幕的占比；默认为屏幕的 75%"

#: ../../library/turtle.rst:2405
msgid ""
"if positive, starting position in pixels from the left edge of the screen, "
"if negative from the right edge, if ``None``, center window horizontally"
msgstr "如为正值，表示初始位置距离屏幕左边缘多少像素，负值表示距离右边缘，``None`` 表示窗口水平居中"

#: ../../library/turtle.rst:2408
msgid ""
"if positive, starting position in pixels from the top edge of the screen, if"
" negative from the bottom edge, if ``None``, center window vertically"
msgstr "如为正值，表示初始位置距离屏幕上边缘多少像素，负值表示距离下边缘，``None`` 表示窗口垂直居中"

#: ../../library/turtle.rst:2412
msgid ""
">>> screen.setup (width=200, height=200, startx=0, starty=0)\n"
">>>              # sets window to 200x200 pixels, in upper left of screen\n"
">>> screen.setup(width=.75, height=0.5, startx=None, starty=None)\n"
">>>              # sets window to 75% of screen by 50% of screen and centers"
msgstr ""
">>> screen.setup (width=200, height=200, startx=0, starty=0)\n"
">>>              # 设置窗口为 200x200 像素，位于屏幕左上角\n"
">>> screen.setup(width=.75, height=0.5, startx=None, starty=None)\n"
">>>              # 设置窗口宽度为屏幕的 75% 高度为屏幕的 50% 并居中"

#: ../../library/turtle.rst:2423
msgid "a string that is shown in the titlebar of the turtle graphics window"
msgstr "一个字符串，显示为海龟绘图窗口的标题栏文本"

#: ../../library/turtle.rst:2426
msgid "Set title of turtle window to *titlestring*."
msgstr "设置海龟窗口标题为 *titlestring* 指定的文本。"

#: ../../library/turtle.rst:2428
msgid ">>> screen.title(\"Welcome to the turtle zoo!\")"
msgstr ">>> screen.title(\"Welcome to the turtle zoo!\")"

#: ../../library/turtle.rst:2435
msgid "Public classes"
msgstr "公共类"

#: ../../library/turtle.rst:2441
msgid ""
"a :class:`!tkinter.Canvas`, a :class:`ScrolledCanvas` or a "
":class:`TurtleScreen`"
msgstr ""
"一个 :class:`!tkinter.Canvas`, :class:`ScrolledCanvas` 或 :class:`TurtleScreen`"

#: ../../library/turtle.rst:2444
msgid ""
"Create a turtle.  The turtle has all methods described above as \"methods of"
" Turtle/RawTurtle\"."
msgstr "创建一个海龟。海龟对象具有 \"Turtle/RawTurtle 方法\" 一节所述的全部方法。"

#: ../../library/turtle.rst:2450
msgid ""
"Subclass of RawTurtle, has the same interface but draws on a default "
":class:`Screen` object created automatically when needed for the first time."
msgstr "RawTurtle 的子类，具有相同的接口，但其绘图场所为默认的 :class:`Screen` 类对象，在首次使用时自动创建。"

#: ../../library/turtle.rst:2456
msgid "a :class:`!tkinter.Canvas`"
msgstr "一个 :class:`!tkinter.Canvas`"

#: ../../library/turtle.rst:2458
msgid ""
"Provides screen oriented methods like :func:`bgcolor` etc. that are "
"described above."
msgstr "提供面向屏幕的方法如 :func:`bgcolor` 等。 说明见上文。"

#: ../../library/turtle.rst:2463
msgid ""
"Subclass of TurtleScreen, with :ref:`four methods added <screenspecific>`."
msgstr "TurtleScreen 的子类，:ref:`增加了四个方法 <screenspecific>`."

#: ../../library/turtle.rst:2468
msgid ""
"some Tkinter widget to contain the ScrolledCanvas, i.e. a Tkinter-canvas "
"with scrollbars added"
msgstr "可容纳 ScrolledCanvas 的 Tkinter 部件，即添加了滚动条的 Tkinter-canvas"

#: ../../library/turtle.rst:2471
msgid ""
"Used by class Screen, which thus automatically provides a ScrolledCanvas as "
"playground for the turtles."
msgstr "由 Screen 类使用，使其能够自动提供一个 ScrolledCanvas 作为海龟的绘图场所。"

#: ../../library/turtle.rst:2476
msgid "one of the strings \"polygon\", \"image\", \"compound\""
msgstr "字符串 \"polygon\", \"image\", \"compound\" 其中之一"

#: ../../library/turtle.rst:2478
msgid ""
"Data structure modeling shapes.  The pair ``(type_, data)`` must follow this"
" specification:"
msgstr "实现形状的数据结构。``(type_, data)`` 必须遵循以下定义:"

#: ../../library/turtle.rst:2483
msgid "*type_*"
msgstr "*type_*"

#: ../../library/turtle.rst:2483
msgid "*data*"
msgstr "*data*"

#: ../../library/turtle.rst:2485
msgid "\"polygon\""
msgstr "\"polygon\""

#: ../../library/turtle.rst:2485
msgid "a polygon-tuple, i.e. a tuple of pairs of coordinates"
msgstr "一个多边形元组，即由坐标值对构成的元组"

#: ../../library/turtle.rst:2486
msgid "\"image\""
msgstr "\"image\""

#: ../../library/turtle.rst:2486
msgid "an image  (in this form only used internally!)"
msgstr "一个图片  (此形式仅限内部使用!)"

#: ../../library/turtle.rst:2487
msgid "\"compound\""
msgstr "\"compound\""

#: ../../library/turtle.rst:2487
msgid ""
"``None`` (a compound shape has to be constructed using the "
":meth:`addcomponent` method)"
msgstr "``None`` (复合形状必须使用 :meth:`addcomponent` 方法来构建)"

#: ../../library/turtle.rst:2493
msgid "a polygon, i.e. a tuple of pairs of numbers"
msgstr "一个多边形，即由数值对构成的元组"

#: ../../library/turtle.rst:2494
msgid "a color the *poly* will be filled with"
msgstr "一种颜色，将用来填充 *poly* 指定的多边形"

#: ../../library/turtle.rst:2495
msgid "a color for the poly's outline (if given)"
msgstr "一种颜色，用于多边形的轮廓 (如有指定)"

#: ../../library/turtle.rst:2497
msgid "Example:"
msgstr "示例:"

#: ../../library/turtle.rst:2499
msgid ""
">>> poly = ((0,0),(10,-5),(0,10),(-10,-5))\n"
">>> s = Shape(\"compound\")\n"
">>> s.addcomponent(poly, \"red\", \"blue\")\n"
">>> # ... add more components and then use register_shape()"
msgstr ""
">>> poly = ((0,0),(10,-5),(0,10),(-10,-5))\n"
">>> s = Shape(\"compound\")\n"
">>> s.addcomponent(poly, \"red\", \"blue\")\n"
">>> # ... 添加更多组件，然后使用 register_shape()"

#: ../../library/turtle.rst:2507
msgid "See :ref:`compoundshapes`."
msgstr "参见 :ref:`compoundshapes`。"

#: ../../library/turtle.rst:2512
msgid ""
"A two-dimensional vector class, used as a helper class for implementing "
"turtle graphics.  May be useful for turtle graphics programs too.  Derived "
"from tuple, so a vector is a tuple!"
msgstr "一个二维矢量类，用来作为实现海龟绘图的辅助类。也可能在海龟绘图程序中使用。派生自元组，因此矢量也属于元组!"

#: ../../library/turtle.rst:2516
msgid "Provides (for *a*, *b* vectors, *k* number):"
msgstr "提供的运算 (*a*, *b* 为矢量, *k* 为数值):"

#: ../../library/turtle.rst:2518
msgid "``a + b`` vector addition"
msgstr "``a + b`` 矢量加法"

#: ../../library/turtle.rst:2519
msgid "``a - b`` vector subtraction"
msgstr "``a - b`` 矢量减法"

#: ../../library/turtle.rst:2520
msgid "``a * b`` inner product"
msgstr "``a * b`` 内积"

#: ../../library/turtle.rst:2521
msgid "``k * a`` and ``a * k`` multiplication with scalar"
msgstr "``k * a`` 和 ``a * k`` 与标量相乘"

#: ../../library/turtle.rst:2522
msgid "``abs(a)`` absolute value of a"
msgstr "``abs(a)`` a 的绝对值"

#: ../../library/turtle.rst:2523
msgid "``a.rotate(angle)`` rotation"
msgstr "``a.rotate(angle)`` 旋转"

#: ../../library/turtle.rst:2529
msgid "Explanation"
msgstr "说明"

#: ../../library/turtle.rst:2531
msgid ""
"A turtle object draws on a screen object, and there a number of key classes "
"in the turtle object-oriented interface that can be used to create them and "
"relate them to each other."
msgstr "海龟对象在屏幕对象上绘图，在 turtle 的面向对象接口中有许多关键的类可被用于创建它们并将它们相互关联。"

#: ../../library/turtle.rst:2535
msgid ""
"A :class:`Turtle` instance will automatically create a :class:`Screen` "
"instance if one is not already present."
msgstr ":class:`Turtle` 实例将自动创建一个 :class:`Screen` 实例，如果它还未创建的话。"

#: ../../library/turtle.rst:2538
msgid ""
"``Turtle`` is a subclass of :class:`RawTurtle`, which *doesn't* "
"automatically create a drawing surface - a *canvas* will need to be provided"
" or created for it. The *canvas* can be a :class:`!tkinter.Canvas`, "
":class:`ScrolledCanvas` or :class:`TurtleScreen`."
msgstr ""
"``Turtle`` 是 :class:`RawTurtle` 的子类，它 *不会* 自动创建绘图区域 —— 需要为其提供或创建一个 *canvas*。"
" *canvas* 可以是一个 :class:`!tkinter.Canvas`, :class:`ScrolledCanvas` 或 "
":class:`TurtleScreen`。"

#: ../../library/turtle.rst:2544
msgid ""
":class:`TurtleScreen` is the basic drawing surface for a turtle. "
":class:`Screen` is a subclass of ``TurtleScreen``, and includes :ref:`some "
"additional methods <screenspecific>` for managing its appearance (including "
"size and title) and behaviour. ``TurtleScreen``'s constructor needs a "
":class:`!tkinter.Canvas` or a :class:`ScrolledCanvas` as an argument."
msgstr ""
":class:`TurtleScreen` 是基本的海龟绘图区域。 :class:`Screen` 是 ``TurtleScreen`` 的子类，并包括"
" :ref:`一些额外方法 <screenspecific>` 用来管理其外观（包括大小和标题）及行为。 ``TurtleScreen`` "
"的构造器需要一个 :class:`!tkinter.Canvas` 或 :class:`ScrolledCanvas` 作为参数。"

#: ../../library/turtle.rst:2551
msgid ""
"The functional interface for turtle graphics uses the various methods of "
"``Turtle`` and ``TurtleScreen``/``Screen``. Behind the scenes, a screen "
"object is automatically created whenever a function derived from a "
"``Screen`` method is called. Similarly, a turtle object is automatically "
"created whenever any of the functions derived from a Turtle method is "
"called."
msgstr ""
"海龟绘图形的函数式接口使用 ``Turtle`` 和 ``TurtleScreen``/``Screen`` 的各种方法。 在下层，每当从 "
"``Screen`` 方法派生的函数被调用时就会自动创建一个屏幕对象。 同样地，每当从 Turtle 方法派生的函数被调用时也都会自动创建一个 "
"Turtle 对象。"

#: ../../library/turtle.rst:2557
msgid ""
"To use multiple turtles on a screen, the object-oriented interface must be "
"used."
msgstr "要在一个屏幕中使用多个海龟，就必须使用面向对象的接口。"

#: ../../library/turtle.rst:2562
msgid "Help and configuration"
msgstr "帮助与配置"

#: ../../library/turtle.rst:2565
msgid "How to use help"
msgstr "如何使用帮助"

#: ../../library/turtle.rst:2567
msgid ""
"The public methods of the Screen and Turtle classes are documented "
"extensively via docstrings.  So these can be used as online-help via the "
"Python help facilities:"
msgstr "Screen 和 Turtle 类的公用方法以文档字符串提供了详细的文档。因此可以利用 Python 帮助工具获取这些在线帮助信息:"

#: ../../library/turtle.rst:2571
msgid ""
"When using IDLE, tooltips show the signatures and first lines of the "
"docstrings of typed in function-/method calls."
msgstr "当使用 IDLE 时，输入函数/方法调用将弹出工具提示显示其签名和文档字符串的头几行。"

#: ../../library/turtle.rst:2574
msgid "Calling :func:`help` on methods or functions displays the docstrings::"
msgstr "对文法或函数调用 :func:`help` 将显示其文档字符串::"

#: ../../library/turtle.rst:2576
msgid ""
">>> help(Screen.bgcolor)\n"
"Help on method bgcolor in module turtle:\n"
"\n"
"bgcolor(self, *args) unbound turtle.Screen method\n"
"    Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"    Arguments (if given): a color string or three numbers\n"
"    in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"\n"
"    >>> screen.bgcolor(\"orange\")\n"
"    >>> screen.bgcolor()\n"
"    \"orange\"\n"
"    >>> screen.bgcolor(0.5,0,0.5)\n"
"    >>> screen.bgcolor()\n"
"    \"#800080\"\n"
"\n"
">>> help(Turtle.penup)\n"
"Help on method penup in module turtle:\n"
"\n"
"penup(self) unbound turtle.Turtle method\n"
"    Pull the pen up -- no drawing when moving.\n"
"\n"
"    Aliases: penup | pu | up\n"
"\n"
"    No argument\n"
"\n"
"    >>> turtle.penup()"
msgstr ""
">>> help(Screen.bgcolor)\n"
"Help on method bgcolor in module turtle:\n"
"\n"
"bgcolor(self, *args) unbound turtle.Screen method\n"
"    Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"    Arguments (if given): a color string or three numbers\n"
"    in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"\n"
"    >>> screen.bgcolor(\"orange\")\n"
"    >>> screen.bgcolor()\n"
"    \"orange\"\n"
"    >>> screen.bgcolor(0.5,0,0.5)\n"
"    >>> screen.bgcolor()\n"
"    \"#800080\"\n"
"\n"
">>> help(Turtle.penup)\n"
"Help on method penup in module turtle:\n"
"\n"
"penup(self) unbound turtle.Turtle method\n"
"    Pull the pen up -- no drawing when moving.\n"
"\n"
"    Aliases: penup | pu | up\n"
"\n"
"    No argument\n"
"\n"
"    >>> turtle.penup()"

#: ../../library/turtle.rst:2605
msgid ""
"The docstrings of the functions which are derived from methods have a "
"modified form::"
msgstr "方法对应函数的文档字符串的形式会有一些修改::"

#: ../../library/turtle.rst:2608
msgid ""
">>> help(bgcolor)\n"
"Help on function bgcolor in module turtle:\n"
"\n"
"bgcolor(*args)\n"
"    Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"    Arguments (if given): a color string or three numbers\n"
"    in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"    Example::\n"
"\n"
"      >>> bgcolor(\"orange\")\n"
"      >>> bgcolor()\n"
"      \"orange\"\n"
"      >>> bgcolor(0.5,0,0.5)\n"
"      >>> bgcolor()\n"
"      \"#800080\"\n"
"\n"
">>> help(penup)\n"
"Help on function penup in module turtle:\n"
"\n"
"penup()\n"
"    Pull the pen up -- no drawing when moving.\n"
"\n"
"    Aliases: penup | pu | up\n"
"\n"
"    No argument\n"
"\n"
"    Example:\n"
"    >>> penup()"
msgstr ""
">>> help(bgcolor)\n"
"Help on function bgcolor in module turtle:\n"
"\n"
"bgcolor(*args)\n"
"    Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"    Arguments (if given): a color string or three numbers\n"
"    in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"    Example::\n"
"\n"
"      >>> bgcolor(\"orange\")\n"
"      >>> bgcolor()\n"
"      \"orange\"\n"
"      >>> bgcolor(0.5,0,0.5)\n"
"      >>> bgcolor()\n"
"      \"#800080\"\n"
"\n"
">>> help(penup)\n"
"Help on function penup in module turtle:\n"
"\n"
"penup()\n"
"    Pull the pen up -- no drawing when moving.\n"
"\n"
"    Aliases: penup | pu | up\n"
"\n"
"    No argument\n"
"\n"
"    Example:\n"
"    >>> penup()"

#: ../../library/turtle.rst:2639
msgid ""
"These modified docstrings are created automatically together with the "
"function definitions that are derived from the methods at import time."
msgstr "这些修改版文档字符串是在导入时与方法对应函数的定义一起自动生成的。"

#: ../../library/turtle.rst:2644
msgid "Translation of docstrings into different languages"
msgstr "文档字符串翻译为不同的语言"

#: ../../library/turtle.rst:2646
msgid ""
"There is a utility to create a dictionary the keys of which are the method "
"names and the values of which are the docstrings of the public methods of "
"the classes Screen and Turtle."
msgstr "可使用工具创建一个字典，键为方法名，值为 Screen 和 Turtle 类公共方法的文档字符串。"

#: ../../library/turtle.rst:2652
msgid "a string, used as filename"
msgstr "一个字符串，表示文件名"

#: ../../library/turtle.rst:2654
msgid ""
"Create and write docstring-dictionary to a Python script with the given "
"filename.  This function has to be called explicitly (it is not used by the "
"turtle graphics classes).  The docstring dictionary will be written to the "
"Python script :file:`{filename}.py`.  It is intended to serve as a template "
"for translation of the docstrings into different languages."
msgstr ""
"创建文档字符串字典并将其写入 filename 指定的 Python 脚本文件。此函数必须显示地调用 "
"(海龟绘图类并不使用此函数)。文档字符串字典将被写入到 Python 脚本文件 "
":file:`{filename}.py`。该文件可作为模板用来将文档字符串翻译为不同语言。"

#: ../../library/turtle.rst:2660
msgid ""
"If you (or your students) want to use :mod:`turtle` with online help in your"
" native language, you have to translate the docstrings and save the "
"resulting file as e.g. :file:`turtle_docstringdict_german.py`."
msgstr ""
"如果你 (或你的学生) 想使用本国语言版本的 :mod:`turtle` 在线帮助，你必须翻译文档字符串并保存结果文件，例如 "
":file:`turtle_docstringdict_german.py`."

#: ../../library/turtle.rst:2664
msgid ""
"If you have an appropriate entry in your :file:`turtle.cfg` file this "
"dictionary will be read in at import time and will replace the original "
"English docstrings."
msgstr "如果你在 :file:`turtle.cfg` 文件中加入了相应的条目，此字典将在导入模块时被读取并替代原有的英文版文档字符串。"

#: ../../library/turtle.rst:2667
msgid ""
"At the time of this writing there are docstring dictionaries in German and "
"in Italian.  (Requests please to glingl@aon.at.)"
msgstr "在撰写本文档时已经有了德语和意大利语版的文档字符串字典。(更多需求请联系 glingl@aon.at)"

#: ../../library/turtle.rst:2673
msgid "How to configure Screen and Turtles"
msgstr "如何配置 Screen 和 Turtle"

#: ../../library/turtle.rst:2675
msgid ""
"The built-in default configuration mimics the appearance and behaviour of "
"the old turtle module in order to retain best possible compatibility with "
"it."
msgstr "内置的默认配置是模仿旧 turtle 模块的外观和行为，以便尽可能地与其保持兼容。"

#: ../../library/turtle.rst:2678
msgid ""
"If you want to use a different configuration which better reflects the "
"features of this module or which better fits to your needs, e.g. for use in "
"a classroom, you can prepare a configuration file ``turtle.cfg`` which will "
"be read at import time and modify the configuration according to its "
"settings."
msgstr ""
"如果你想使用不同的配置，以便更好地反映此模块的特性或是更适合你的需求，例如在课堂中使用，你可以准备一个配置文件 "
"``turtle.cfg``，该文件将在导入模块时被读取并根据其中的设定修改模块配置。"

#: ../../library/turtle.rst:2683
msgid ""
"The built in configuration would correspond to the following ``turtle.cfg``:"
msgstr "内置的配置对应了下面的 ``turtle.cfg``:"

#: ../../library/turtle.rst:2685
msgid ""
"width = 0.5\n"
"height = 0.75\n"
"leftright = None\n"
"topbottom = None\n"
"canvwidth = 400\n"
"canvheight = 300\n"
"mode = standard\n"
"colormode = 1.0\n"
"delay = 10\n"
"undobuffersize = 1000\n"
"shape = classic\n"
"pencolor = black\n"
"fillcolor = black\n"
"resizemode = noresize\n"
"visible = True\n"
"language = english\n"
"exampleturtle = turtle\n"
"examplescreen = screen\n"
"title = Python Turtle Graphics\n"
"using_IDLE = False"
msgstr ""
"width = 0.5\n"
"height = 0.75\n"
"leftright = None\n"
"topbottom = None\n"
"canvwidth = 400\n"
"canvheight = 300\n"
"mode = standard\n"
"colormode = 1.0\n"
"delay = 10\n"
"undobuffersize = 1000\n"
"shape = classic\n"
"pencolor = black\n"
"fillcolor = black\n"
"resizemode = noresize\n"
"visible = True\n"
"language = english\n"
"exampleturtle = turtle\n"
"examplescreen = screen\n"
"title = Python Turtle Graphics\n"
"using_IDLE = False"

#: ../../library/turtle.rst:2708
msgid "Short explanation of selected entries:"
msgstr "选定条目的简短说明:"

#: ../../library/turtle.rst:2710
msgid ""
"The first four lines correspond to the arguments of the :func:`Screen.setup "
"<setup>` method."
msgstr "开头的四行对应了 :func:`Screen.setup <setup>` 方法的参数。"

#: ../../library/turtle.rst:2712
msgid ""
"Line 5 and 6 correspond to the arguments of the method "
":func:`Screen.screensize <screensize>`."
msgstr "第 5 和第 6 行对应于 :func:`Screen.screensize <screensize>` 方法的参数。"

#: ../../library/turtle.rst:2714
msgid ""
"*shape* can be any of the built-in shapes, e.g: arrow, turtle, etc.  For "
"more info try ``help(shape)``."
msgstr "*shape* 可以是任何内置形状，即: arrow, turtle 等。更多信息可用 ``help(shape)`` 查看。"

#: ../../library/turtle.rst:2716
msgid ""
"If you want to use no fill color (i.e. make the turtle transparent), you "
"have to write ``fillcolor = \"\"`` (but all nonempty strings must not have "
"quotes in the cfg file)."
msgstr ""
"如果你想使用无填充色（即让海龟变透明），则你必须写 ``fillcolor = \"\"`` (但在but all nonempty strings "
"must not have quotes in the cfg 文件中所有非空字符串都不可加引号)。"

#: ../../library/turtle.rst:2719
msgid ""
"If you want to reflect the turtle its state, you have to use ``resizemode = "
"auto``."
msgstr "如果你想令海龟反映其状态，你必须使用 ``resizemode = auto``。"

#: ../../library/turtle.rst:2721
msgid ""
"If you set e.g. ``language = italian`` the docstringdict "
":file:`turtle_docstringdict_italian.py` will be loaded at import time (if "
"present on the import path, e.g. in the same directory as :mod:`turtle`)."
msgstr ""
"例如当你设置了 ``language = italian`` 则文档字符串字典 "
":file:`turtle_docstringdict_italian.py` 将在导入时被加载（如果它存在于导入路径，即与 :mod:`turtle`"
" 相同的目录中）。"

#: ../../library/turtle.rst:2724
msgid ""
"The entries *exampleturtle* and *examplescreen* define the names of these "
"objects as they occur in the docstrings.  The transformation of method-"
"docstrings to function-docstrings will delete these names from the "
"docstrings."
msgstr ""
"*exampleturtle* 和 *examplescreen* "
"条目定义了相应对象在文档字符串中显示的名称。方法文档字符串转换为函数文档字符串时将从文档字符串中删去这些名称。"

#: ../../library/turtle.rst:2728
msgid ""
"*using_IDLE*: Set this to ``True`` if you regularly work with IDLE and its "
"``-n`` switch (\"no subprocess\").  This will prevent :func:`exitonclick` to"
" enter the mainloop."
msgstr ""
"*using_IDLE*: 如果你经常使用 IDLE 及其 ``-n`` 开关选项（\"无子进程\"）则将此项设为 ``True``。 这将阻止 "
":func:`exitonclick` 进入主事件循环。"

#: ../../library/turtle.rst:2732
msgid ""
"There can be a :file:`turtle.cfg` file in the directory where :mod:`turtle` "
"is stored and an additional one in the current working directory.  The "
"latter will override the settings of the first one."
msgstr ""
":file:`turtle.cfg` 文件可以保存于 :mod:`turtle` 所在目录，当前工作目录也可以有一个同名文件。后者会重载覆盖前者的设置。"

#: ../../library/turtle.rst:2736
msgid ""
"The :file:`Lib/turtledemo` directory contains a :file:`turtle.cfg` file.  "
"You can study it as an example and see its effects when running the demos "
"(preferably not from within the demo-viewer)."
msgstr ""
":file:`Lib/turtledemo` 目录中也有一个 :file:`turtle.cfg` "
"文件。你可以将其作为示例进行研究，并在运行演示时查看其作用效果 (但最好不要在演示查看器中运行)。"

#: ../../library/turtle.rst:2742
msgid ":mod:`turtledemo` --- Demo scripts"
msgstr ":mod:`turtledemo` --- 演示脚本集"

#: ../../library/turtle.rst:2747
msgid ""
"The :mod:`turtledemo` package includes a set of demo scripts.  These scripts"
" can be run and viewed using the supplied demo viewer as follows::"
msgstr ":mod:`turtledemo` 包汇集了一组演示脚本。这些脚本可以通过以下命令打开所提供的演示查看器运行和查看::"

#: ../../library/turtle.rst:2750
msgid "python -m turtledemo"
msgstr "python -m turtledemo"

#: ../../library/turtle.rst:2752
msgid ""
"Alternatively, you can run the demo scripts individually.  For example, ::"
msgstr "此外，你也可以单独运行其中的演示脚本。例如，::"

#: ../../library/turtle.rst:2754
msgid "python -m turtledemo.bytedesign"
msgstr "python -m turtledemo.bytedesign"

#: ../../library/turtle.rst:2756
msgid "The :mod:`turtledemo` package directory contains:"
msgstr ":mod:`turtledemo` 包目录中的内容:"

#: ../../library/turtle.rst:2758
msgid ""
"A demo viewer :file:`__main__.py` which can be used to view the sourcecode "
"of the scripts and run them at the same time."
msgstr "一个演示查看器 :file:`__main__.py`，可用来查看脚本的源码并即时运行。"

#: ../../library/turtle.rst:2760
msgid ""
"Multiple scripts demonstrating different features of the :mod:`turtle` "
"module.  Examples can be accessed via the Examples menu.  They can also be "
"run standalone."
msgstr "多个脚本文件，演示 :mod:`turtle` 模块的不同特性。所有示例可通过 Examples 菜单打开。也可以单独运行每个脚本。"

#: ../../library/turtle.rst:2763
msgid ""
"A :file:`turtle.cfg` file which serves as an example of how to write and use"
" such files."
msgstr "一个 :file:`turtle.cfg` 文件，作为说明如何编写并使用模块配置文件的示例模板。"

#: ../../library/turtle.rst:2766
msgid "The demo scripts are:"
msgstr "演示脚本清单如下:"

#: ../../library/turtle.rst:2773
msgid "Name"
msgstr "名称"

#: ../../library/turtle.rst:2773
msgid "Description"
msgstr "描述"

#: ../../library/turtle.rst:2773
msgid "Features"
msgstr "相关特性"

#: ../../library/turtle.rst:2775
msgid "bytedesign"
msgstr "bytedesign"

#: ../../library/turtle.rst:2775
msgid "complex classical turtle graphics pattern"
msgstr "复杂的传统海龟绘图模式"

#: ../../library/turtle.rst:2775
msgid ":func:`tracer`, delay, :func:`update`"
msgstr ":func:`tracer`, delay, :func:`update`"

#: ../../library/turtle.rst:2778
msgid "chaos"
msgstr "chaos"

#: ../../library/turtle.rst:2778
msgid ""
"graphs Verhulst dynamics, shows that computer's computations can generate "
"results sometimes against the common sense expectations"
msgstr "绘制 Verhulst 动态模型，演示通过计算机的运算可能会生成令人惊叹的结果"

#: ../../library/turtle.rst:2778
msgid "world coordinates"
msgstr "世界坐标系"

#: ../../library/turtle.rst:2784
msgid "clock"
msgstr "clock"

#: ../../library/turtle.rst:2784
msgid "analog clock showing time of your computer"
msgstr "绘制模拟时钟显示本机的当前时间"

#: ../../library/turtle.rst:2784
msgid "turtles as clock's hands, ontimer"
msgstr "海龟作为表针, ontimer"

#: ../../library/turtle.rst:2787
msgid "colormixer"
msgstr "colormixer"

#: ../../library/turtle.rst:2787
msgid "experiment with r, g, b"
msgstr "试验 r, g, b 颜色模式"

#: ../../library/turtle.rst:2789
msgid "forest"
msgstr "forest"

#: ../../library/turtle.rst:2789
msgid "3 breadth-first trees"
msgstr "绘制 3 棵广度优先树"

#: ../../library/turtle.rst:2789
msgid "randomization"
msgstr "随机化"

#: ../../library/turtle.rst:2791
msgid "fractalcurves"
msgstr "fractalcurves"

#: ../../library/turtle.rst:2791
msgid "Hilbert & Koch curves"
msgstr "绘制 Hilbert & Koch 曲线"

#: ../../library/turtle.rst:2791
msgid "recursion"
msgstr "递归"

#: ../../library/turtle.rst:2793
msgid "lindenmayer"
msgstr "lindenmayer"

#: ../../library/turtle.rst:2793
msgid "ethnomathematics (indian kolams)"
msgstr "文化数学 (印度装饰艺术)"

#: ../../library/turtle.rst:2793
msgid "L-System"
msgstr "L-系统"

#: ../../library/turtle.rst:2796
msgid "minimal_hanoi"
msgstr "minimal_hanoi"

#: ../../library/turtle.rst:2796
msgid "Towers of Hanoi"
msgstr "汉诺塔"

#: ../../library/turtle.rst:2796
msgid "Rectangular Turtles as Hanoi discs (shape, shapesize)"
msgstr "矩形海龟作为汉诺盘 (shape, shapesize)"

#: ../../library/turtle.rst:2800
msgid "nim"
msgstr "nim"

#: ../../library/turtle.rst:2800
msgid ""
"play the classical nim game with three heaps of sticks against the computer."
msgstr "玩经典的“尼姆”游戏，开始时有三堆小棒，与电脑对战。"

#: ../../library/turtle.rst:2800
msgid "turtles as nimsticks, event driven (mouse, keyboard)"
msgstr "海龟作为小棒，事件驱动 (鼠标, 键盘)"

#: ../../library/turtle.rst:2804
msgid "paint"
msgstr "paint"

#: ../../library/turtle.rst:2804
msgid "super minimalistic drawing program"
msgstr "超极简主义绘画程序"

#: ../../library/turtle.rst:2807
msgid "peace"
msgstr "peace"

#: ../../library/turtle.rst:2807
msgid "elementary"
msgstr "初级技巧"

#: ../../library/turtle.rst:2807
msgid "turtle: appearance and animation"
msgstr "海龟: 外观与动画"

#: ../../library/turtle.rst:2810
msgid "penrose"
msgstr "penrose"

#: ../../library/turtle.rst:2810
msgid "aperiodic tiling with kites and darts"
msgstr "非周期性地使用风筝和飞镖形状铺满平面"

#: ../../library/turtle.rst:2813
msgid "planet_and_moon"
msgstr "planet_and_moon"

#: ../../library/turtle.rst:2813
msgid "simulation of gravitational system"
msgstr "模拟引力系统"

#: ../../library/turtle.rst:2813
msgid "compound shapes, :class:`Vec2D`"
msgstr "复合开关, :class:`Vec2D` 类"

#: ../../library/turtle.rst:2816
msgid "rosette"
msgstr "rosette"

#: ../../library/turtle.rst:2816
msgid "a pattern from the wikipedia article on turtle graphics"
msgstr "一个来自介绍海龟绘图的维基百科文章的图案"

#: ../../library/turtle.rst:2816
msgid ":func:`clone`, :func:`undo`"
msgstr ":func:`clone`, :func:`undo`"

#: ../../library/turtle.rst:2819
msgid "round_dance"
msgstr "round_dance"

#: ../../library/turtle.rst:2819
msgid "dancing turtles rotating pairwise in opposite direction"
msgstr "两两相对并不断旋转舞蹈的海龟"

#: ../../library/turtle.rst:2819
msgid "compound shapes, clone shapesize, tilt, get_shapepoly, update"
msgstr "复合形状, clone shapesize, tilt, get_shapepoly, update"

#: ../../library/turtle.rst:2823
msgid "sorting_animate"
msgstr "sorting_animate"

#: ../../library/turtle.rst:2823
msgid "visual demonstration of different sorting methods"
msgstr "动态演示不同的排序方法"

#: ../../library/turtle.rst:2823
msgid "simple alignment, randomization"
msgstr "简单对齐, 随机化"

#: ../../library/turtle.rst:2826
msgid "tree"
msgstr "tree"

#: ../../library/turtle.rst:2826
msgid "a (graphical) breadth first tree (using generators)"
msgstr "一棵 (图形化的) 广度优先树 (使用生成器)"

#: ../../library/turtle.rst:2829
msgid "two_canvases"
msgstr "two_canvases"

#: ../../library/turtle.rst:2829
msgid "simple design"
msgstr "简单设计"

#: ../../library/turtle.rst:2829
msgid "turtles on two canvases"
msgstr "两块画布上的海龟"

#: ../../library/turtle.rst:2832
msgid "yinyang"
msgstr "yinyang"

#: ../../library/turtle.rst:2832
msgid "another elementary example"
msgstr "另一个初级示例"

#: ../../library/turtle.rst:2835
msgid "Have fun!"
msgstr "祝你玩得开心！"

#: ../../library/turtle.rst:2839
msgid "Changes since Python 2.6"
msgstr "Python 2.6 之后的变化"

#: ../../library/turtle.rst:2841
msgid ""
"The methods :func:`Turtle.tracer <tracer>`, :func:`Turtle.window_width "
"<window_width>` and :func:`Turtle.window_height <window_height>` have been "
"eliminated. Methods with these names and functionality are now available "
"only as methods of :class:`Screen`. The functions derived from these remain "
"available. (In fact already in Python 2.6 these methods were merely "
"duplications of the corresponding :class:`TurtleScreen`/:class:`Screen` "
"methods.)"
msgstr ""
":func:`Turtle.tracer <tracer>`, :func:`Turtle.window_width <window_width>` 和"
" :func:`Turtle.window_height <window_height>` 等方法已被去除。 具有这些名称和功能的方法现在只限于作为 "
":class:`Screen` 的方法。 自这些方法派生的函数仍保持可用。 (实际上在 Python 2.6 中这些方法就已经只是对应 "
":class:`TurtleScreen`/:class:`Screen` 方法的副本了。)"

#: ../../library/turtle.rst:2849
msgid ""
"The method :func:`!Turtle.fill` has been eliminated. The behaviour of "
":func:`begin_fill` and :func:`end_fill` have changed slightly: now every "
"filling process must be completed with an ``end_fill()`` call."
msgstr ""
":func:`!Turtle.fill` 方法已被去除。 :func:`begin_fill` 和 :func:`end_fill` "
"的行为则有细微改变：现在每个填充过程必须以一个 ``end_fill()`` 调用来结束。"

#: ../../library/turtle.rst:2854
msgid ""
"A method :func:`Turtle.filling <filling>` has been added. It returns a "
"boolean value: ``True`` if a filling process is under way, ``False`` "
"otherwise. This behaviour corresponds to a ``fill()`` call without arguments"
" in Python 2.6."
msgstr ""
"增加了一个 :func:`Turtle.filling <filling>` 方法。 该方法返回一个布尔值：如果填充过程正在运行则为 "
"``True``，否则为 ``False``。 此行为对应于 Python 2.6 中一个不带参数的 ``fill()`` 调用。"

#: ../../library/turtle.rst:2860
msgid "Changes since Python 3.0"
msgstr "Python 3.0 之后的变化"

#: ../../library/turtle.rst:2862
msgid ""
"The :class:`Turtle` methods :func:`shearfactor`, :func:`shapetransform` and "
":func:`get_shapepoly` have been added. Thus the full range of regular linear"
" transforms is now available for transforming turtle shapes. "
":func:`tiltangle` has been enhanced in functionality: it now can be used to "
"get or set the tilt angle."
msgstr ""
"增加了 :class:`Turtle` 方法 :func:`shearfactor`, :func:`shapetransform` 和 "
":func:`get_shapepoly`。 这样就可以使用所有的常规线性变换来改变海龟形状。 :func:`tiltangle` "
"的功能已得到加强：现在它可以被用来获取或设置倾斜角度。"

#: ../../library/turtle.rst:2868
msgid ""
"The :class:`Screen` method :func:`onkeypress` has been added as a complement"
" to :func:`onkey`. As the latter binds actions to the key release event, an "
"alias: :func:`onkeyrelease` was also added for it."
msgstr ""
"增加了 :class:`Screen` 方法 :func:`onkeypress` 作为 :func:`onkey` 的补充。 "
"当后者将动作绑定到松开按键事件时，还将为它添加一个别名: :func:`onkeyrelease`。"

#: ../../library/turtle.rst:2872
msgid ""
"The method :func:`Screen.mainloop <mainloop>` has been added, so there is no"
" longer a need to use the standalone :func:`mainloop` function when working "
"with :class:`Screen` and :class:`Turtle` objects."
msgstr ""
"增加了 :func:`Screen.mainloop <mainloop>` 方法，这样在操作 :class:`Screen` 和 "
":class:`Turtle` 对象时就无需再使用单独的 :func:`mainloop` 函数。"

#: ../../library/turtle.rst:2876
msgid ""
"Two input methods have been added: :func:`Screen.textinput <textinput>` and "
":func:`Screen.numinput <numinput>`. These pop up input dialogs and return "
"strings and numbers respectively."
msgstr ""
"增加了两个输入方法: :func:`Screen.textinput <textinput>` 和 :func:`Screen.numinput "
"<numinput>`。 这两个方法会弹出输入对话框接受输入并分别返回字符串和数字。 These pop up input dialogs and "
"return strings and numbers respectively."
