# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Arisaka97 <solitaire2312@gmail.com>, 2021
# Zombie110year <zombie110year@gmail.com>, 2021
# nick <2330458484@qq.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# Makdon <makdon@makdon.me>, 2021
# Alpha Du <alphanow@gmail.com>, 2023
# Jiuh.star <jiuh.star@gmail.com>, 2023
# 汇民 王 <whuim@qq.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-04 14:20+0000\n"
"PO-Revision-Date: 2021-06-28 01:14+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/tarfile.rst:2
msgid ":mod:`!tarfile` --- Read and write tar archive files"
msgstr ":mod:`!tarfile` --- 读写 tar 归档文件"

#: ../../library/tarfile.rst:10
msgid "**Source code:** :source:`Lib/tarfile.py`"
msgstr "**源代码:** :source:`Lib/tarfile.py`"

#: ../../library/tarfile.rst:14
msgid ""
"The :mod:`tarfile` module makes it possible to read and write tar archives, "
"including those using gzip, bz2 and lzma compression. Use the :mod:`zipfile`"
" module to read or write :file:`.zip` files, or the higher-level functions "
"in :ref:`shutil <archiving-operations>`."
msgstr ""
":mod:`tarfile` 模块可以用来读写 tar 归档，包括使用 gzip, bz2 和 lzma 压缩的归档。 请使用 "
":mod:`zipfile` 模块来读写 :file:`.zip` 文件，或者使用 :ref:`shutil <archiving-"
"operations>` 的高层级函数。"

#: ../../library/tarfile.rst:19
msgid "Some facts and figures:"
msgstr "一些事实和数字:"

#: ../../library/tarfile.rst:21
msgid ""
"reads and writes :mod:`gzip`, :mod:`bz2`, :mod:`compression.zstd`, and "
":mod:`lzma` compressed archives if the respective modules are available."
msgstr ""
"在相应的模块可用时读写 :mod:`gzip`, :mod:`bz2`, :mod:`compression.zstd` 和 :mod:`lzma` "
"压缩的归档。"

#: ../../library/tarfile.rst:24
msgid "read/write support for the POSIX.1-1988 (ustar) format."
msgstr "支持读取 / 写入 POSIX.1-1988 (ustar) 格式。"

#: ../../library/tarfile.rst:26
msgid ""
"read/write support for the GNU tar format including *longname* and "
"*longlink* extensions, read-only support for all variants of the *sparse* "
"extension including restoration of sparse files."
msgstr ""
"对 GNU tar 格式的读/写支持，包括 *longname* 和 *longlink* 扩展，对所有种类 *sparse* 扩展的只读支持，包括 "
"sparse 文件的恢复。"

#: ../../library/tarfile.rst:30
msgid "read/write support for the POSIX.1-2001 (pax) format."
msgstr "对 POSIX.1-2001 (pax) 格式的读/写支持。"

#: ../../library/tarfile.rst:32
msgid ""
"handles directories, regular files, hardlinks, symbolic links, fifos, "
"character devices and block devices and is able to acquire and restore file "
"information like timestamp, access permissions and owner."
msgstr "处理目录、正常文件、硬链接、符号链接、fifo 管道、字符设备和块设备，并且能够获取和恢复文件信息例如时间戳、访问权限和所有者等。"

#: ../../library/tarfile.rst:36
msgid "Added support for :mod:`lzma` compression."
msgstr "添加了对 :mod:`lzma` 压缩的支持。"

#: ../../library/tarfile.rst:39
msgid ""
"Archives are extracted using a :ref:`filter <tarfile-extraction-filter>`, "
"which makes it possible to either limit surprising/dangerous features, or to"
" acknowledge that they are expected and the archive is fully trusted."
msgstr ""
"归档文件使用 :ref:`过滤器 <tarfile-extraction-filter>` "
"来提取，这将可以限制令人惊讶/危险的特性，或确认它们符合预期并且归档文档受到完全信任。 "

#: ../../library/tarfile.rst:44
msgid ""
"Set the default extraction filter to :func:`data <data_filter>`, which "
"disallows some dangerous features such as links to absolute paths or paths "
"outside of the destination. Previously, the filter strategy was equivalent "
"to :func:`fully_trusted <fully_trusted_filter>`."
msgstr ""
"将默认的提取过滤器设置为 :func:`data "
"<data_filter>`，这将禁止一些危险的特性，比如链接到绝对路径或目的地之外的路径。以前，过滤器策略相当于 "
":func:`fully_trusted <fully_trusted_filter>`。"

#: ../../library/tarfile.rst:52
msgid "Added support for Zstandard compression using :mod:`compression.zstd`."
msgstr "使用 :mod:`compression.zstd` 增加对 Zstandard 压缩的支持。"

#: ../../library/tarfile.rst:56
msgid ""
"Return a :class:`TarFile` object for the pathname *name*. For detailed "
"information on :class:`TarFile` objects and the keyword arguments that are "
"allowed, see :ref:`tarfile-objects`."
msgstr ""
"针对路径名 *name* 返回 :class:`TarFile` 对象。 有关 :class:`TarFile` "
"对象以及所允许的关键字参数的详细信息请参阅 :ref:`tarfile-objects`。"

#: ../../library/tarfile.rst:60
msgid ""
"*mode* has to be a string of the form ``'filemode[:compression]'``, it "
"defaults to ``'r'``. Here is a full list of mode combinations:"
msgstr ""
"*mode* 必须是 ``'filemode[:compression]'`` 形式的字符串，其默认值为 ``'r'``。 以下是模式组合的完整列表:"

#: ../../library/tarfile.rst:64
msgid "mode"
msgstr "模式"

#: ../../library/tarfile.rst:64
msgid "action"
msgstr "action"

#: ../../library/tarfile.rst:66
msgid "``'r' or 'r:*'``"
msgstr "``'r' or 'r:*'``"

#: ../../library/tarfile.rst:66
msgid "Open for reading with transparent compression (recommended)."
msgstr "打开和读取使用透明压缩（推荐）。"

#: ../../library/tarfile.rst:69
msgid "``'r:'``"
msgstr "``'r:'``"

#: ../../library/tarfile.rst:69
msgid "Open for reading exclusively without compression."
msgstr "打开和读取不使用压缩。"

#: ../../library/tarfile.rst:72
msgid "``'r:gz'``"
msgstr "``'r:gz'``"

#: ../../library/tarfile.rst:72
msgid "Open for reading with gzip compression."
msgstr "打开和读取使用gzip 压缩。"

#: ../../library/tarfile.rst:74
msgid "``'r:bz2'``"
msgstr "``'r:bz2'``"

#: ../../library/tarfile.rst:74
msgid "Open for reading with bzip2 compression."
msgstr "打开和读取使用bzip2 压缩。"

#: ../../library/tarfile.rst:76
msgid "``'r:xz'``"
msgstr "``'r:xz'``"

#: ../../library/tarfile.rst:76
msgid "Open for reading with lzma compression."
msgstr "打开和读取使用lzma 压缩。"

#: ../../library/tarfile.rst:78
msgid "``'r:zst'``"
msgstr "``'r:zst'``"

#: ../../library/tarfile.rst:78
msgid "Open for reading with Zstandard compression."
msgstr "打开以使用 Zstandard 压缩格式进行读取。"

#: ../../library/tarfile.rst:80
msgid "``'x'`` or ``'x:'``"
msgstr "``'x'`` 或 ``'x:'``"

#: ../../library/tarfile.rst:80
msgid ""
"Create a tarfile exclusively without compression. Raise a "
":exc:`FileExistsError` exception if it already exists."
msgstr "单独创建一个 tarfile 而不带压缩。 如果它已经存在则会引发 :exc:`FileExistsError` 异常。"

#: ../../library/tarfile.rst:85
msgid "``'x:gz'``"
msgstr "``'x:gz'``"

#: ../../library/tarfile.rst:85
msgid ""
"Create a tarfile with gzip compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr "使用 gzip 压缩创建一个 tarfile。 如果它已经存在则会引发 :exc:`FileExistsError` 异常。"

#: ../../library/tarfile.rst:89
msgid "``'x:bz2'``"
msgstr "``'x:bz2'``"

#: ../../library/tarfile.rst:89
msgid ""
"Create a tarfile with bzip2 compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr "使用 bzip2 压缩创建一个 tarfile。 如果它已经存在则会引发 :exc:`FileExistsError` 异常。"

#: ../../library/tarfile.rst:93
msgid "``'x:xz'``"
msgstr "``'x:xz'``"

#: ../../library/tarfile.rst:93
msgid ""
"Create a tarfile with lzma compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr "使用 lzma 压缩创建一个 tarfile。 如果它已经存在则会引发 :exc:`FileExistsError` 异常。"

#: ../../library/tarfile.rst:97
msgid "``'x:zst'``"
msgstr "``'x:zst'``"

#: ../../library/tarfile.rst:97
msgid ""
"Create a tarfile with Zstandard compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr "创建一个使用 Zstandard 压缩的 tar 文件。 如果它已经存在则会引发 :exc:`FileExistsError` 异常。"

#: ../../library/tarfile.rst:101
msgid "``'a' or 'a:'``"
msgstr "``'a' or 'a:'``"

#: ../../library/tarfile.rst:101
msgid ""
"Open for appending with no compression. The file is created if it does not "
"exist."
msgstr "打开以便在没有压缩的情况下追加。如果文件不存在，则创建该文件。"

#: ../../library/tarfile.rst:104
msgid "``'w' or 'w:'``"
msgstr "``'w' or 'w:'``"

#: ../../library/tarfile.rst:104
msgid "Open for uncompressed writing."
msgstr "打开用于未压缩的写入。"

#: ../../library/tarfile.rst:106
msgid "``'w:gz'``"
msgstr "``'w:gz'``"

#: ../../library/tarfile.rst:106
msgid "Open for gzip compressed writing."
msgstr "打开用于 gzip 压缩的写入。"

#: ../../library/tarfile.rst:108
msgid "``'w:bz2'``"
msgstr "``'w:bz2'``"

#: ../../library/tarfile.rst:108
msgid "Open for bzip2 compressed writing."
msgstr "打开用于 bzip2 压缩的写入。"

#: ../../library/tarfile.rst:110
msgid "``'w:xz'``"
msgstr "``'w:xz'``"

#: ../../library/tarfile.rst:110
msgid "Open for lzma compressed writing."
msgstr "打开用于 lzma 压缩的写入。"

#: ../../library/tarfile.rst:112
msgid "``'w:zst'``"
msgstr "``'w:zst'``"

#: ../../library/tarfile.rst:112
msgid "Open for Zstandard compressed writing."
msgstr "打开以使用 Zstandard 压缩格式进行写入。"

#: ../../library/tarfile.rst:115
msgid ""
"Note that ``'a:gz'``, ``'a:bz2'`` or ``'a:xz'`` is not possible. If *mode* "
"is not suitable to open a certain (compressed) file for reading, "
":exc:`ReadError` is raised. Use *mode* ``'r'`` to avoid this.  If a "
"compression method is not supported, :exc:`CompressionError` is raised."
msgstr ""
"请注意 ``'a:gz'``, ``'a:bz2'`` 或 ``'a:xz'`` 是不可能的组合。 如果 *mode* "
"不适用于打开特定（压缩的）文件用于读取，则会引发 :exc:`ReadError`。 请使用 *mode* ``'r'`` 来避免这种情况。 "
"如果某种压缩方法不受支持，则会引发 :exc:`CompressionError`。"

#: ../../library/tarfile.rst:120
msgid ""
"If *fileobj* is specified, it is used as an alternative to a :term:`file "
"object` opened in binary mode for *name*. It is supposed to be at position "
"0."
msgstr ""
"如果指定了 *fileobj*，它会被用作对应于 *name* 的以二进制模式打开的 :term:`file object` 的替代。 "
"它会被设定为处在位置 0。"

#: ../../library/tarfile.rst:123
msgid ""
"For modes ``'w:gz'``, ``'x:gz'``, ``'w|gz'``, ``'w:bz2'``, ``'x:bz2'``, "
"``'w|bz2'``, :func:`tarfile.open` accepts the keyword argument "
"*compresslevel* (default ``9``) to specify the compression level of the "
"file."
msgstr ""
"对于 ``'w:gz'``, ``'x:gz'``, ``'w|gz'``, ``'w:bz2'``, ``'x:bz2'``, ``'w|bz2'``"
" 等模式，:func:`tarfile.open` 接受关键字参数 *compresslevel* (默认值为 ``9``) 用于指定文件的压缩等级。"

#: ../../library/tarfile.rst:127
msgid ""
"For modes ``'w:xz'``, ``'x:xz'`` and ``'w|xz'``, :func:`tarfile.open` "
"accepts the keyword argument *preset* to specify the compression level of "
"the file."
msgstr ""
"对于 ``'w:xz'``, ``'x:xz'`` 和 ``'w|xz'`` 等模式，:func:`tarfile.open` 接受关键字参数 "
"*preset* 来指定文件的压缩等级。"

#: ../../library/tarfile.rst:130
msgid ""
"For modes ``'w:zst'``, ``'x:zst'`` and ``'w|zst'``, :func:`tarfile.open` "
"accepts the keyword argument *level* to specify the compression level of the"
" file. The keyword argument *options* may also be passed, providing advanced"
" Zstandard compression parameters described by "
":class:`~compression.zstd.CompressionParameter`. The keyword argument "
"*zstd_dict* can be passed to provide a :class:`~compression.zstd.ZstdDict`, "
"a Zstandard dictionary used to improve compression of smaller amounts of "
"data."
msgstr ""
"对于 ``'w:zst'``, ``'x:zst'`` 和 ``'w|zst'`` 模式，:func:`tarfile.open` 接受关键字参数 "
"*level* 以指定文件的压缩级别。 还可以传入关键字参数 *options*，它提供由 "
":class:`~compression.zstd.CompressionParameter` 描述的高级 Zstandard 压缩形参。 "
"还可以传入关键字参数 *zstd_dict* 以提供 "
":class:`~compression.zstd.ZstdDict`，这是用于提升较小量数据压缩效率的 Zstandard 字典。"

#: ../../library/tarfile.rst:139
msgid ""
"For special purposes, there is a second format for *mode*: "
"``'filemode|[compression]'``.  :func:`tarfile.open` will return a "
":class:`TarFile` object that processes its data as a stream of blocks.  No "
"random seeking will be done on the file. If given, *fileobj* may be any "
"object that has a :meth:`~io.RawIOBase.read` or :meth:`~io.RawIOBase.write` "
"method (depending on the *mode*) that works with bytes. *bufsize* specifies "
"the blocksize and defaults to ``20 * 512`` bytes. Use this variant in "
"combination with e.g. ``sys.stdin.buffer``, a socket :term:`file object` or "
"a tape device. However, such a :class:`TarFile` object is limited in that it"
" does not allow random access, see :ref:`tar-examples`.  The currently "
"possible modes:"
msgstr ""
"针对特殊的目的，还存在第二种 *mode* 格式: ``'filemode|[compression]'``。 :func:`tarfile.open`"
" 将返回一个将其数据作为数据块流来处理的 :class:`TarFile` 对象。 对此文件将不能执行随机查找。 如果给定了 "
"*fileobj*，它可以是任何具有 :meth:`~io.RawIOBase.read` 或 :meth:`~io.RawIOBase.write` "
"方法（由 *mode* 确定）的对象。 *bufsize* 指定块大小，默认为 ``20 * 512`` 字节。 可与此格式组合使用的有 "
"``sys.stdin.buffer``、套接字 :term:`file object` 或磁盘设备等。 但是，这样的 :class:`TarFile`"
" 对象存在不允许随机访问的限制，参见 :ref:`tar-examples`。 当前可用的模式有："

#: ../../library/tarfile.rst:153
msgid "Mode"
msgstr "模式"

#: ../../library/tarfile.rst:153
msgid "Action"
msgstr "动作"

#: ../../library/tarfile.rst:155
msgid "``'r|*'``"
msgstr "``'r|*'``"

#: ../../library/tarfile.rst:155
msgid ""
"Open a *stream* of tar blocks for reading with transparent compression."
msgstr "打开 tar 块的 *流* 以进行透明压缩读取。"

#: ../../library/tarfile.rst:158
msgid "``'r|'``"
msgstr "``'r|'``"

#: ../../library/tarfile.rst:158
msgid "Open a *stream* of uncompressed tar blocks for reading."
msgstr "打开一个未压缩的 tar 块的 *stream* 用于读取。"

#: ../../library/tarfile.rst:161
msgid "``'r|gz'``"
msgstr "``'r|gz'``"

#: ../../library/tarfile.rst:161
msgid "Open a gzip compressed *stream* for reading."
msgstr "打开一个 gzip 压缩的 *stream* 用于读取。"

#: ../../library/tarfile.rst:164
msgid "``'r|bz2'``"
msgstr "``'r|bz2'``"

#: ../../library/tarfile.rst:164
msgid "Open a bzip2 compressed *stream* for reading."
msgstr "打开一个 bzip2 压缩的 *stream* 用于读取。"

#: ../../library/tarfile.rst:167
msgid "``'r|xz'``"
msgstr "``'r|xz'``"

#: ../../library/tarfile.rst:167
msgid "Open an lzma compressed *stream* for reading."
msgstr "打开一个 lzma 压缩 *stream* 用于读取。"

#: ../../library/tarfile.rst:170
msgid "``'r|zst'``"
msgstr "``'r|zst'``"

#: ../../library/tarfile.rst:170
msgid "Open a Zstandard compressed *stream* for reading."
msgstr "打开一个 Zstandard 压缩的 *stream* 用于读取。"

#: ../../library/tarfile.rst:173
msgid "``'w|'``"
msgstr "``'w|'``"

#: ../../library/tarfile.rst:173
msgid "Open an uncompressed *stream* for writing."
msgstr "打开一个未压缩的 *stream* 用于写入。"

#: ../../library/tarfile.rst:175
msgid "``'w|gz'``"
msgstr "``'w|gz'``"

#: ../../library/tarfile.rst:175
msgid "Open a gzip compressed *stream* for writing."
msgstr "打开一个 gzip 压缩的 *stream* 用于写入。"

#: ../../library/tarfile.rst:178
msgid "``'w|bz2'``"
msgstr "``'w|bz2'``"

#: ../../library/tarfile.rst:178
msgid "Open a bzip2 compressed *stream* for writing."
msgstr "打开一个 bzip2 压缩的 *stream* 用于写入。"

#: ../../library/tarfile.rst:181
msgid "``'w|xz'``"
msgstr "``'w|xz'``"

#: ../../library/tarfile.rst:181
msgid "Open an lzma compressed *stream* for writing."
msgstr "打开一个 lzma 压缩的 *stream* 用于写入。"

#: ../../library/tarfile.rst:184
msgid "``'w|zst'``"
msgstr "``'w|zst'``"

#: ../../library/tarfile.rst:184
msgid "Open a Zstandard compressed *stream* for writing."
msgstr "打开一个 Zstandard 压缩的 *stream* 用于写入。"

#: ../../library/tarfile.rst:188 ../../library/tarfile.rst:467
msgid "The ``'x'`` (exclusive creation) mode was added."
msgstr "添加了 ``'x'`` (单独创建) 模式。"

#: ../../library/tarfile.rst:191 ../../library/tarfile.rst:470
#: ../../library/tarfile.rst:718
msgid "The *name* parameter accepts a :term:`path-like object`."
msgstr "*name* 形参接受一个 :term:`path-like object`。"

#: ../../library/tarfile.rst:194
msgid "The *compresslevel* keyword argument also works for streams."
msgstr "*compresslevel* 关键字参数也适用于流式数据。"

#: ../../library/tarfile.rst:197
msgid "The *preset* keyword argument also works for streams."
msgstr "*preset* 关键字参数也适用于流式数据。"

#: ../../library/tarfile.rst:204
msgid ""
"Class for reading and writing tar archives. Do not use this class directly: "
"use :func:`tarfile.open` instead. See :ref:`tarfile-objects`."
msgstr ""
"用于读取和写入 tar 归档的类。 请不要直接使用这个类：而要使用 :func:`tarfile.open`。 参见 :ref:`tarfile-"
"objects`。"

#: ../../library/tarfile.rst:210
msgid ""
"Return :const:`True` if *name* is a tar archive file, that the "
":mod:`tarfile` module can read. *name* may be a :class:`str`, file, or file-"
"like object."
msgstr ""
"如果 *name* 是一个 :mod:`tarfile` 能读取的 tar 归档文件则返回 :const:`True`。 *name* 可以为 "
":class:`str`，文件或文件型对象。"

#: ../../library/tarfile.rst:213
msgid "Support for file and file-like objects."
msgstr "支持文件或类文件对象。"

#: ../../library/tarfile.rst:217
msgid "The :mod:`tarfile` module defines the following exceptions:"
msgstr ":mod:`tarfile` 模块定义了以下异常:"

#: ../../library/tarfile.rst:222
msgid "Base class for all :mod:`tarfile` exceptions."
msgstr "所有 :mod:`tarfile` 异常的基类。"

#: ../../library/tarfile.rst:227
msgid ""
"Is raised when a tar archive is opened, that either cannot be handled by the"
" :mod:`tarfile` module or is somehow invalid."
msgstr "当一个不能被 :mod:`tarfile` 模块处理或者因某种原因而无效的 tar 归档被打开时将被引发。"

#: ../../library/tarfile.rst:233
msgid ""
"Is raised when a compression method is not supported or when the data cannot"
" be decoded properly."
msgstr "当一个压缩方法不受支持或者当数据无法被正确解码时将被引发。"

#: ../../library/tarfile.rst:239
msgid ""
"Is raised for the limitations that are typical for stream-like "
":class:`TarFile` objects."
msgstr "当达到流式 :class:`TarFile` 对象的典型限制时将被引发。"

#: ../../library/tarfile.rst:245
msgid ""
"Is raised for *non-fatal* errors when using :meth:`TarFile.extract`, but "
"only if :attr:`TarFile.errorlevel`\\ ``== 2``."
msgstr ""
"当使用 :meth:`TarFile.extract` 时针对 *non-fatal* 所引发的异常，但是仅限 "
":attr:`TarFile.errorlevel`\\ ``== 2``。"

#: ../../library/tarfile.rst:251
msgid "Is raised by :meth:`TarInfo.frombuf` if the buffer it gets is invalid."
msgstr "如果获取的缓冲区无效则会由 :meth:`TarInfo.frombuf` 引发的异常。"

#: ../../library/tarfile.rst:256
msgid ""
"Base class for members :ref:`refused <tarfile-extraction-refuse>` by "
"filters."
msgstr "被过滤器 :ref:`拒绝 <tarfile-extraction-refuse>` 的成员的基类。"

#: ../../library/tarfile.rst:261
msgid ""
"Information about the member that the filter refused to extract, as "
":ref:`TarInfo <tarinfo-objects>`."
msgstr "关于过滤器拒绝提取的成员的信息，为 :ref:`TarInfo <tarinfo-objects>` 类型。"

#: ../../library/tarfile.rst:266
msgid "Raised to refuse extracting a member with an absolute path."
msgstr "在拒绝提取具有绝对路径的成员时引发。"

#: ../../library/tarfile.rst:270
msgid ""
"Raised to refuse extracting a member outside the destination directory."
msgstr "在拒绝提取目标目录以外的成员时引发。"

#: ../../library/tarfile.rst:274
msgid "Raised to refuse extracting a special file (e.g. a device or pipe)."
msgstr "在拒绝提取特殊文件（例如设备或管道）时引发。"

#: ../../library/tarfile.rst:278
msgid "Raised to refuse extracting a symbolic link with an absolute path."
msgstr "在拒绝提取具有绝对路径的符号链接时引发。"

#: ../../library/tarfile.rst:282
msgid ""
"Raised to refuse extracting a symbolic link pointing outside the destination"
" directory."
msgstr "在拒绝提取指向目标目录以外的符号链接时引发。"

#: ../../library/tarfile.rst:287
msgid ""
"Raised to refuse emulating a link (hard or symbolic) by extracting another "
"archive member, when that member would be rejected by the filter location. "
"The exception that was raised to reject the replacement member is available "
"as :attr:`!BaseException.__context__`."
msgstr ""
"在要拒绝通过提取其他归档成员来模拟一个链接（硬链接或符号链接），而该成员会被过滤位置丢弃时被引发。 被引发以丢弃替换成员的异常可作为 "
":attr:`!BaseException.__context__` 被访问。"

#: ../../library/tarfile.rst:295
msgid "The following constants are available at the module level:"
msgstr "以下常量在模块层级上可用:"

#: ../../library/tarfile.rst:299
msgid ""
"The default character encoding: ``'utf-8'`` on Windows, the value returned "
"by :func:`sys.getfilesystemencoding` otherwise."
msgstr ""
"默认的字符编码格式：在 Windows 上为 ``'utf-8'``，其他系统上则为 :func:`sys.getfilesystemencoding`"
" 所返回的值。"

#: ../../library/tarfile.rst:305
msgid "A regular file :attr:`~TarInfo.type`."
msgstr "常规文件 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:309
msgid "A link (inside tarfile) :attr:`~TarInfo.type`."
msgstr "（tar 文件中的）链接 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:313
msgid "A symbolic link :attr:`~TarInfo.type`."
msgstr "符号链接 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:317
msgid "A character special device :attr:`~TarInfo.type`."
msgstr "字符特殊设备 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:321
msgid "A block special device :attr:`~TarInfo.type`."
msgstr "块特殊设备 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:325
msgid "A directory :attr:`~TarInfo.type`."
msgstr "目录 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:329
msgid "A FIFO special device :attr:`~TarInfo.type`."
msgstr "FIFO 特殊设备 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:333
msgid "A contiguous file :attr:`~TarInfo.type`."
msgstr "连续文件 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:337
msgid "A GNU tar longname :attr:`~TarInfo.type`."
msgstr "GNU tar 长名称 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:341
msgid "A GNU tar longlink :attr:`~TarInfo.type`."
msgstr "GNU tar 长链接 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:345
msgid "A GNU tar sparse file :attr:`~TarInfo.type`."
msgstr "A GNU tar 离散文件 :attr:`~TarInfo.type`。"

#: ../../library/tarfile.rst:348
msgid ""
"Each of the following constants defines a tar archive format that the "
":mod:`tarfile` module is able to create. See section :ref:`tar-formats` for "
"details."
msgstr ""
"以下常量各自定义了一个 :mod:`tarfile` 模块能够创建的 tar 归档格式。 相关细节请参阅 :ref:`tar-formats` 小节。"

#: ../../library/tarfile.rst:355
msgid "POSIX.1-1988 (ustar) format."
msgstr "POSIX.1-1988 (ustar) 格式。"

#: ../../library/tarfile.rst:360
msgid "GNU tar format."
msgstr "GNU tar 格式。"

#: ../../library/tarfile.rst:365
msgid "POSIX.1-2001 (pax) format."
msgstr "POSIX.1-2001 (pax) 格式。"

#: ../../library/tarfile.rst:370
msgid ""
"The default format for creating archives. This is currently "
":const:`PAX_FORMAT`."
msgstr "用于创建归档的默认格式。 目前为 :const:`PAX_FORMAT`。"

#: ../../library/tarfile.rst:372
msgid ""
"The default format for new archives was changed to :const:`PAX_FORMAT` from "
":const:`GNU_FORMAT`."
msgstr "新归档的默认格式已更改为 :const:`PAX_FORMAT` 而不再是 :const:`GNU_FORMAT`。"

#: ../../library/tarfile.rst:379
msgid "Module :mod:`zipfile`"
msgstr "模块 :mod:`zipfile`"

#: ../../library/tarfile.rst:380
msgid "Documentation of the :mod:`zipfile` standard module."
msgstr ":mod:`zipfile` 标准模块的文档。"

#: ../../library/tarfile.rst:382
msgid ":ref:`archiving-operations`"
msgstr ":ref:`archiving-operations`"

#: ../../library/tarfile.rst:383
msgid ""
"Documentation of the higher-level archiving facilities provided by the "
"standard :mod:`shutil` module."
msgstr "标准 :mod:`shutil` 模块所提供的高层级归档工具的文档。"

#: ../../library/tarfile.rst:386
msgid ""
"`GNU tar manual, Basic Tar Format "
"<https://www.gnu.org/software/tar/manual/html_node/Standard.html>`_"
msgstr ""
"`GNU tar manual, Basic Tar Format "
"<https://www.gnu.org/software/tar/manual/html_node/Standard.html>`_"

#: ../../library/tarfile.rst:387
msgid "Documentation for tar archive files, including GNU tar extensions."
msgstr "针对 tar 归档文件的文档，包含 GNU tar 扩展。"

#: ../../library/tarfile.rst:393
msgid "TarFile Objects"
msgstr "TarFile 对象"

#: ../../library/tarfile.rst:395
msgid ""
"The :class:`TarFile` object provides an interface to a tar archive. A tar "
"archive is a sequence of blocks. An archive member (a stored file) is made "
"up of a header block followed by data blocks. It is possible to store a file"
" in a tar archive several times. Each archive member is represented by a "
":class:`TarInfo` object, see :ref:`tarinfo-objects` for details."
msgstr ""
":class:`TarFile` 对象提供了一个 tar 归档的接口。 一个 tar 归档就是数据块的序列。 "
"一个归档成员（被保存文件）是由一个标头块加多个数据块组成的。 一个文件可以在一个 tar 归档中多次被保存。 每个归档成员都由一个 "
":class:`TarInfo` 对象来代表，详情参见 :ref:`tarinfo-objects`。"

#: ../../library/tarfile.rst:401
msgid ""
"A :class:`TarFile` object can be used as a context manager in a "
":keyword:`with` statement. It will automatically be closed when the block is"
" completed. Please note that in the event of an exception an archive opened "
"for writing will not be finalized; only the internally used file object will"
" be closed. See the :ref:`tar-examples` section for a use case."
msgstr ""
":class:`TarFile` 对象可在 :keyword:`with` 语句中作为上下文管理器使用。 当语句块结束时它将自动被关闭。 "
"请注意在发生异常事件时被打开用于写入的归档将不会被终结；只有内部使用的文件对象将被关闭。 相关用例请参见 :ref:`tar-examples`。"

#: ../../library/tarfile.rst:407
msgid "Added support for the context management protocol."
msgstr "添加了对上下文管理器协议的支持。"

#: ../../library/tarfile.rst:412
msgid ""
"All following arguments are optional and can be accessed as instance "
"attributes as well."
msgstr "下列所有参数都是可选项并且也可作为实例属性来访问。"

#: ../../library/tarfile.rst:415
msgid ""
"*name* is the pathname of the archive. *name* may be a :term:`path-like "
"object`. It can be omitted if *fileobj* is given. In this case, the file "
"object's :attr:`!name` attribute is used if it exists."
msgstr ""
"*name* 是归档的路径名。 *name* 可以是一个 :term:`path-like object`。 如果给定了 *fileobj* "
"则它可以被省略。 在此情况下，如果对象存在 :attr:`!name` 属性则将使用它。"

#: ../../library/tarfile.rst:419
msgid ""
"*mode* is either ``'r'`` to read from an existing archive, ``'a'`` to append"
" data to an existing file, ``'w'`` to create a new file overwriting an "
"existing one, or ``'x'`` to create a new file only if it does not already "
"exist."
msgstr ""
"*mode* 可以为 ``'r'`` 表示从现有归档读取，``'a'`` 表示将数据追加到现有文件，``'w'`` 表示创建新文件覆盖现有文件，或者 "
"``'x'`` 表示仅在文件不存在时创建新文件。"

#: ../../library/tarfile.rst:423
msgid ""
"If *fileobj* is given, it is used for reading or writing data. If it can be "
"determined, *mode* is overridden by *fileobj*'s mode. *fileobj* will be used"
" from position 0."
msgstr ""
"如果给定了 *fileobj*，它会被用于读取或写入数据。 如果可以被确定，则 *mode* 会被 *fileobj* 的模式所覆盖。 "
"*fileobj* 的使用将从位置 0 开始。"

#: ../../library/tarfile.rst:429
msgid "*fileobj* is not closed, when :class:`TarFile` is closed."
msgstr "当 :class:`TarFile` 被关闭时，*fileobj* 不会被关闭。"

#: ../../library/tarfile.rst:431
msgid ""
"*format* controls the archive format for writing. It must be one of the "
"constants :const:`USTAR_FORMAT`, :const:`GNU_FORMAT` or :const:`PAX_FORMAT` "
"that are defined at module level. When reading, format will be automatically"
" detected, even if different formats are present in a single archive."
msgstr ""
"*format* 控制用于写入的归档格式。 它必须为在模块层级定义的常量 :const:`USTAR_FORMAT`, "
":const:`GNU_FORMAT` 或 :const:`PAX_FORMAT` 中的一个。 "
"当读取时，格式将被自动检测，即使单个归档中存在不同的格式。"

#: ../../library/tarfile.rst:436
msgid ""
"The *tarinfo* argument can be used to replace the default :class:`TarInfo` "
"class with a different one."
msgstr "*tarinfo* 参数可以被用来将默认的 :class:`TarInfo` 类替换为另一个。"

#: ../../library/tarfile.rst:439
msgid ""
"If *dereference* is :const:`False`, add symbolic and hard links to the "
"archive. If it is :const:`True`, add the content of the target files to the "
"archive. This has no effect on systems that do not support symbolic links."
msgstr ""
"如果 *dereference* 为 :const:`False`，则会将符号链接和硬链接添加到归档中。 如果为 "
":const:`True`，则会将目标文件的内容添加到归档中。 在不支持符号链接的系统上参数将不起作用。"

#: ../../library/tarfile.rst:443
msgid ""
"If *ignore_zeros* is :const:`False`, treat an empty block as the end of the "
"archive. If it is :const:`True`, skip empty (and invalid) blocks and try to "
"get as many members as possible. This is only useful for reading "
"concatenated or damaged archives."
msgstr ""
"如果 *ignore_zeros* 为 :const:`False`，则会将空的数据块当作归档的末尾来处理。 如果为 "
":const:`True`，则会跳过空的（和无效的）数据块并尝试获取尽可能多的成员。 此参数仅适用于读取拼接的或损坏的归档。"

#: ../../library/tarfile.rst:447
msgid ""
"*debug* can be set from ``0`` (no debug messages) up to ``3`` (all debug "
"messages). The messages are written to ``sys.stderr``."
msgstr "*debug* 可设为从 ``0`` (无调试消息) 到 ``3`` (全部调试消息)。 消息会被写入到 ``sys.stderr``。"

#: ../../library/tarfile.rst:450
msgid ""
"*errorlevel* controls how extraction errors are handled, see :attr:`the "
"corresponding attribute <TarFile.errorlevel>`."
msgstr "*errorlevel* 控制如何处理解压错误，参见 :attr:`相应的属性 <TarFile.errorlevel>`。"

#: ../../library/tarfile.rst:453
msgid ""
"The *encoding* and *errors* arguments define the character encoding to be "
"used for reading or writing the archive and how conversion errors are going "
"to be handled. The default settings will work for most users. See section "
":ref:`tar-unicode` for in-depth information."
msgstr ""
"*encoding* 和 *errors* 参数定义了读取或写入归档所使用的字符编码格式以及要如何处理转换错误。 默认设置将适用于大多数用户。 "
"要深入了解详情可参阅 :ref:`tar-unicode` 小节。"

#: ../../library/tarfile.rst:458
msgid ""
"The *pax_headers* argument is an optional dictionary of strings which will "
"be added as a pax global header if *format* is :const:`PAX_FORMAT`."
msgstr ""
"可选的 *pax_headers* 参数是字符串的字典，如果 *format* 为 :const:`PAX_FORMAT` 它将被作为 pax "
"全局标头被添加。"

#: ../../library/tarfile.rst:461
msgid ""
"If *stream* is set to :const:`True` then while reading the archive info "
"about files in the archive are not cached, saving memory."
msgstr "如果 *stream* 被设为 :const:`True` 则在读取时有关归档中文件的归档信息不会被缓存，以节省内存消耗。"

#: ../../library/tarfile.rst:464 ../../library/tarfile.rst:787
msgid "Use ``'surrogateescape'`` as the default for the *errors* argument."
msgstr "使用 ``'surrogateescape'`` 作为 *errors* 参数的默认值。"

#: ../../library/tarfile.rst:473
msgid "Add the *stream* parameter."
msgstr "增加了 *stream* 形参。"

#: ../../library/tarfile.rst:478
msgid ""
"Alternative constructor. The :func:`tarfile.open` function is actually a "
"shortcut to this classmethod."
msgstr "作为替代的构造器。 :func:`tarfile.open` 函数实际上是这个类方法的快捷方式。"

#: ../../library/tarfile.rst:484
msgid ""
"Return a :class:`TarInfo` object for member *name*. If *name* can not be "
"found in the archive, :exc:`KeyError` is raised."
msgstr ""
"返回成员 *name* 的 :class:`TarInfo` 对象。 如果 *name* 在归档中找不到，则会引发 :exc:`KeyError`。"

#: ../../library/tarfile.rst:489
msgid ""
"If a member occurs more than once in the archive, its last occurrence is "
"assumed to be the most up-to-date version."
msgstr "如果一个成员在归档中出现超过一次，它的最后一次出现会被视为是最新的版本。"

#: ../../library/tarfile.rst:495
msgid ""
"Return the members of the archive as a list of :class:`TarInfo` objects. The"
" list has the same order as the members in the archive."
msgstr "以 :class:`TarInfo` 对象列表的形式返回归档的成员。 列表的顺序与归档中成员的顺序一致。"

#: ../../library/tarfile.rst:501
msgid ""
"Return the members as a list of their names. It has the same order as the "
"list returned by :meth:`getmembers`."
msgstr "以名称列表的形式返回成员。 它的顺序与 :meth:`getmembers` 所返回列表的顺序一致。"

#: ../../library/tarfile.rst:507
msgid ""
"Print a table of contents to ``sys.stdout``. If *verbose* is :const:`False`,"
" only the names of the members are printed. If it is :const:`True`, output "
"similar to that of :program:`ls -l` is produced. If optional *members* is "
"given, it must be a subset of the list returned by :meth:`getmembers`."
msgstr ""
"将内容清单打印到 ``sys.stdout``。 如果 *verbose* 为 :const:`False`，则将只打印成员名称。 如果为 "
":const:`True`，则输出将类似于 :program:`ls -l` 的输出效果。 如果给定了可选的 *members*，它必须为 "
":meth:`getmembers` 所返回的列表的一个子集。"

#: ../../library/tarfile.rst:512
msgid "Added the *members* parameter."
msgstr "添加了 *members* 形参。"

#: ../../library/tarfile.rst:518
msgid ""
"Return the next member of the archive as a :class:`TarInfo` object, when "
":class:`TarFile` is opened for reading. Return :const:`None` if there is no "
"more available."
msgstr ""
"当 :class:`TarFile` 被打开用于读取时，以 :class:`TarInfo` 对象的形式返回归档的下一个成员。 如果不再有可用对象则返回"
" :const:`None`。"

#: ../../library/tarfile.rst:525
msgid ""
"Extract all members from the archive to the current working directory or "
"directory *path*. If optional *members* is given, it must be a subset of the"
" list returned by :meth:`getmembers`. Directory information like owner, "
"modification time and permissions are set after all members have been "
"extracted. This is done to work around two problems: A directory's "
"modification time is reset each time a file is created in it. And, if a "
"directory's permissions do not allow writing, extracting files to it will "
"fail."
msgstr ""
"将归档中的所有成员提取到当前工作目录或 *path* 目录。 如果给定了可选的 *members*，则它必须为 :meth:`getmembers` "
"所返回的列表的一个子集。 字典信息例如所有者、修改时间和权限会在所有成员提取完毕后被设置。 "
"这样做是为了避免两个问题：目录的修改时间会在每当在其中创建文件时被重置。 并且如果目录的权限不允许写入，提取文件到目录的操作将失败。"

#: ../../library/tarfile.rst:533
msgid ""
"If *numeric_owner* is :const:`True`, the uid and gid numbers from the "
"tarfile are used to set the owner/group for the extracted files. Otherwise, "
"the named values from the tarfile are used."
msgstr ""
"如果 *numeric_owner* 为 :const:`True`，则将使用来自 tarfile 的 uid 和 gid "
"数值来设置被提取文件的所有者/用户组。 在其他情况下，则会使用来自 tarfile 的名称值。"

#: ../../library/tarfile.rst:537
msgid ""
"The *filter* argument specifies how ``members`` are modified or rejected "
"before extraction. See :ref:`tarfile-extraction-filter` for details. It is "
"recommended to set this explicitly only if specific *tar* features are "
"required, or as ``filter='data'`` to support Python versions with a less "
"secure default (3.13 and lower)."
msgstr ""
"*filter* 参数指定在提取成员之前如何修改或拒绝 ``members``。详细信息请参见 :ref:`tarfile-extraction-"
"filter`。建议仅在需要特定的 *tar* 特性时才显式设置此值，或者设置 ``filter='data'`` "
"以支持默认安全性较低的Python版本（3.13及以下）。"

#: ../../library/tarfile.rst:546
msgid ""
"Never extract archives from untrusted sources without prior inspection."
msgstr "绝不要在没有预先检查的情况下从不受信任的来源提取归档文件。"

#: ../../library/tarfile.rst:548
msgid ""
"Since Python 3.14, the default (:func:`data <data_filter>`) will prevent the"
" most dangerous security issues. However, it will not prevent *all* "
"unintended or insecure behavior. Read the :ref:`tarfile-extraction-filter` "
"section for details."
msgstr ""
"从 Python 3.14 起，默认的 (:func:`data <data_filter>`) 将能防止最危险的安全问题。 不过，它不能防止 *所有*"
" 非故意或不安全的行为。 请参阅 :ref:`tarfile-extraction-filter` 一节了解详情。"

#: ../../library/tarfile.rst:553 ../../library/tarfile.rst:590
msgid "Added the *numeric_owner* parameter."
msgstr "添加了 *numeric_owner* 形参。"

#: ../../library/tarfile.rst:556 ../../library/tarfile.rst:593
msgid "The *path* parameter accepts a :term:`path-like object`."
msgstr "*path* 形参接受一个 :term:`path-like object`。"

#: ../../library/tarfile.rst:559 ../../library/tarfile.rst:596
#: ../../library/tarfile.rst:680
msgid "Added the *filter* parameter."
msgstr "添加了 *filter* 形参。"

#: ../../library/tarfile.rst:562
msgid "The *filter* parameter now defaults to ``'data'``."
msgstr "现在 *filter* 形参的默认值为 ``'data'``。"

#: ../../library/tarfile.rst:568
msgid ""
"Extract a member from the archive to the current working directory, using "
"its full name. Its file information is extracted as accurately as possible. "
"*member* may be a filename or a :class:`TarInfo` object. You can specify a "
"different directory using *path*. *path* may be a :term:`path-like object`. "
"File attributes (owner, mtime, mode) are set unless *set_attrs* is false."
msgstr ""
"从归档中提取出一个成员放入当前工作目录，将使用其完整名称。 成员的文件信息会尽可能精确地被提取。 *member* 可以是一个文件名或 "
":class:`TarInfo` 对象。 你可以使用 *path* 指定一个不同的目录。 *path* 可以是一个 :term:`path-like "
"object`。 将会设置文件属性 (owner, mtime, mode) 除非 *set_attrs* 为假值。"

#: ../../library/tarfile.rst:574
msgid ""
"The *numeric_owner* and *filter* arguments are the same as for "
":meth:`extractall`."
msgstr "*numeric_owner* 和 *filter* 参数与 :meth:`extractall` 中的相同。"

#: ../../library/tarfile.rst:579
msgid ""
"The :meth:`extract` method does not take care of several extraction issues. "
"In most cases you should consider using the :meth:`extractall` method."
msgstr ":meth:`extract` 方法不会处理某些提取问题。 在大多数情况下你应当考虑使用 :meth:`extractall` 方法。"

#: ../../library/tarfile.rst:584
msgid ""
"Never extract archives from untrusted sources without prior inspection. See "
"the warning for :meth:`extractall` for details."
msgstr "绝不要在没有预先检查的情况下从不受信任的来源提取归档文件。 请参阅 :meth:`extractall` 的警告信息了解详情。"

#: ../../library/tarfile.rst:587
msgid "Added the *set_attrs* parameter."
msgstr "添加了 *set_attrs* 形参。"

#: ../../library/tarfile.rst:602
msgid ""
"Extract a member from the archive as a file object. *member* may be a "
"filename or a :class:`TarInfo` object. If *member* is a regular file or a "
"link, an :class:`io.BufferedReader` object is returned. For all other "
"existing members, :const:`None` is returned. If *member* does not appear in "
"the archive, :exc:`KeyError` is raised."
msgstr ""
"将归档中的一个成员提取为文件对象。 *member* 可以是一个文件名或 :class:`TarInfo` 对象。 如果 *member* "
"是一个常规文件或链接，则会返回一个 :class:`io.BufferedReader` 对象。 对于所有其他现有成员，则都将返回 "
":const:`None`。 如果 *member* 未在归档中出现，则会引发 :exc:`KeyError`。"

#: ../../library/tarfile.rst:608
msgid "Return an :class:`io.BufferedReader` object."
msgstr "返回一个 :class:`io.BufferedReader` 对象。"

#: ../../library/tarfile.rst:611
msgid ""
"The returned :class:`io.BufferedReader` object has the :attr:`!mode` "
"attribute which is always equal to ``'rb'``."
msgstr "返回的 :class:`io.BufferedReader` 对象具有 :attr:`!mode` 属性并且总是会等于 ``'rb'``。"

#: ../../library/tarfile.rst:618
msgid ""
"If *errorlevel* is ``0``, errors are ignored when using "
":meth:`TarFile.extract` and :meth:`TarFile.extractall`. Nevertheless, they "
"appear as error messages in the debug output when *debug* is greater than 0."
" If ``1`` (the default), all *fatal* errors are raised as :exc:`OSError` or "
":exc:`FilterError` exceptions. If ``2``, all *non-fatal* errors are raised "
"as :exc:`TarError` exceptions as well."
msgstr ""
"如果 *errorlevel* 为 ``0``，则在使用 :meth:`TarFile.extract` 和 "
":meth:`TarFile.extractall` 时错误会被忽略。 不过，当 *debug* 大于 0 时它们将会作为错误消息在调试输出中出现。 "
"如果 *errorlevel*为 ``1`` (默认值)，则所有 *fatal* 错误都会作为 :exc:`OSError` 或 "
":exc:`FilterError` 异常被引发。 如果为 ``2``，则所有 *non-fatal* 错误也会作为 :exc:`TarError` "
"异常被引发。"

#: ../../library/tarfile.rst:626
msgid ""
"Some exceptions, e.g. ones caused by wrong argument types or data "
"corruption, are always raised."
msgstr "某些异常，如参数类型错误或数据损坏导致的异常，总是会被触发。"

#: ../../library/tarfile.rst:629
msgid ""
"Custom :ref:`extraction filters <tarfile-extraction-filter>` should raise "
":exc:`FilterError` for *fatal* errors and :exc:`ExtractError` for *non-"
"fatal* ones."
msgstr ""
"自定义 :ref:`提取过滤器 <tarfile-extraction-filter>` 应针对 *fatal* 错误引发 "
":exc:`FilterError`，针对 *non-fatal* 错误引发 :exc:`ExtractError`。"

#: ../../library/tarfile.rst:633
msgid ""
"Note that when an exception is raised, the archive may be partially "
"extracted. It is the user’s responsibility to clean up."
msgstr "请注意，当出现异常时，存档可能会被部分提取。用需要户负责进行清理。"

#: ../../library/tarfile.rst:640
msgid ""
"The :ref:`extraction filter <tarfile-extraction-filter>` used as a default "
"for the *filter* argument of :meth:`~TarFile.extract` and "
":meth:`~TarFile.extractall`."
msgstr ""
"被用作 :meth:`~TarFile.extract` 和 :meth:`~TarFile.extractall` 的 *filter* "
"参数的默认值的 :ref:`提取过滤器 <tarfile-extraction-filter>`。"

#: ../../library/tarfile.rst:644
msgid ""
"The attribute may be ``None`` or a callable. String names are not allowed "
"for this attribute, unlike the *filter* argument to "
":meth:`~TarFile.extract`."
msgstr ""
"该属性可以为 ``None`` 或是一个可调用对象。 与 :meth:`~TarFile.extract` 的 *filter* "
"参数不同，该属性不允许使用字符串名称。"

#: ../../library/tarfile.rst:648
msgid ""
"If ``extraction_filter`` is ``None`` (the default), extraction methods will "
"use the :func:`data <data_filter>` filter by default."
msgstr ""
"如果 ``extraction_filter`` 为 ``None`` (默认值)，则提取方法默认将使用 :func:`data "
"<data_filter>` 过滤器。"

#: ../../library/tarfile.rst:651
msgid ""
"The attribute may be set on instances or overridden in subclasses. It also "
"is possible to set it on the ``TarFile`` class itself to set a global "
"default, although, since it affects all uses of *tarfile*, it is best "
"practice to only do so in top-level applications or :mod:`site configuration"
" <site>`. To set a global default this way, a filter function needs to be "
"wrapped in :func:`staticmethod` to prevent injection of a ``self`` argument."
msgstr ""
"该属性可在实例上设置或在子类中覆盖。 也可以在 ``TarFile`` 类本身上设置它以设置一个全局默认值，不过，由于它会影响 *tarfile* "
"的所有使用，最好的做法是只在最高层级应和程序或 :mod:`站点配置 <site>` 中这样做。 要以这种方式设置全局默认值，需要将一个过滤器函数包装在"
" :func:`staticmethod` 中以防止 ``self`` 参数的注入。"

#: ../../library/tarfile.rst:661
msgid ""
"The default filter is set to :func:`data <data_filter>`, which disallows "
"some dangerous features such as links to absolute paths or paths outside of "
"the destination. Previously, the default was equivalent to "
":func:`fully_trusted <fully_trusted_filter>`."
msgstr ""
"默认的提取过滤器是设置为 :func:`data "
"<data_filter>`，这将禁止一些危险的特性，比如链接到绝对路径或目的地之外的路径。以前，默认的过滤器相当于 "
":func:`fully_trusted <fully_trusted_filter>`。"

#: ../../library/tarfile.rst:669
msgid ""
"Add the file *name* to the archive. *name* may be any type of file "
"(directory, fifo, symbolic link, etc.). If given, *arcname* specifies an "
"alternative name for the file in the archive. Directories are added "
"recursively by default. This can be avoided by setting *recursive* to "
":const:`False`. Recursion adds entries in sorted order. If *filter* is "
"given, it should be a function that takes a :class:`TarInfo` object argument"
" and returns the changed :class:`TarInfo` object. If it instead returns "
":const:`None` the :class:`TarInfo` object will be excluded from the archive."
" See :ref:`tar-examples` for an example."
msgstr ""
"将文件 *name* 添加到归档。 *name* 可以为任意类型的文件（目录、fifo、符号链接等等）。 如果给出 *arcname* "
"则它将为归档中的文件指定一个替代名称。 默认情况下会递归地添加目录。 这可以通过将 *recursive* 设为 :const:`False` 来避免。"
" 递归操作会按排序顺序添加条目。 如果给定了 *filter*，它应当为一个接受 :class:`TarInfo` 对象并返回已修改 "
":class:`TarInfo` 对象的函数。 如果它返回 :const:`None` 则 :class:`TarInfo` 对象将从归档中被排除。 "
"具体示例参见 :ref:`tar-examples`。"

#: ../../library/tarfile.rst:683
msgid "Recursion adds entries in sorted order."
msgstr "递归操作按排序顺序添加条目。"

#: ../../library/tarfile.rst:689
msgid ""
"Add the :class:`TarInfo` object *tarinfo* to the archive. If *tarinfo* "
"represents a non zero-size regular file, the *fileobj* argument should be a "
":term:`binary file`, and ``tarinfo.size`` bytes are read from it and added "
"to the archive.  You can create :class:`TarInfo` objects directly, or by "
"using :meth:`gettarinfo`."
msgstr ""
"将 :class:`TarInfo` 对象 *tarinfo* 添加到归档中。 如果 *tarinfo* 代表一个大小不为零的常规文件，则 "
"*fileobj* 参数应为一个 :term:`binary file`，且会从中读取 ``tarinfo.size`` 个字节并添加到归档中。 "
"你可以直接创建 :class:`TarInfo` 对象，或者也可以使用 :meth:`gettarinfo`。"

#: ../../library/tarfile.rst:696
msgid "*fileobj* must be given for non-zero-sized regular files."
msgstr "对于大小不为零的常规文件必须给出 *fileobj*。"

#: ../../library/tarfile.rst:701
msgid ""
"Create a :class:`TarInfo` object from the result of :func:`os.stat` or "
"equivalent on an existing file.  The file is either named by *name*, or "
"specified as a :term:`file object` *fileobj* with a file descriptor. *name* "
"may be a :term:`path-like object`.  If given, *arcname* specifies an "
"alternative name for the file in the archive, otherwise, the name is taken "
"from *fileobj*’s :attr:`~io.FileIO.name` attribute, or the *name* argument."
"  The name should be a text string."
msgstr ""
"基于 :func:`os.stat` 的结果或者现有文件的相同数据创建一个 :class:`TarInfo`。 文件或者是命名为 "
"*name*，或者是使用文件描述符指定为一个 :term:`file object` *fileobj*。 *name* 可以是一个 "
":term:`path-like object`。 如果给定了 *arcname*，则它将为归档中的文件指定一个替代名称，在其他情况下，名称将从 "
"*fileobj* 的 :attr:`~io.FileIO.name` 属性或 *name* 参数获取。 名称应当是一个文本字符串。"

#: ../../library/tarfile.rst:710
msgid ""
"You can modify some of the :class:`TarInfo`’s attributes before you add it "
"using :meth:`addfile`. If the file object is not an ordinary file object "
"positioned at the beginning of the file, attributes such as "
":attr:`~TarInfo.size` may need modifying.  This is the case for objects such"
" as :class:`~gzip.GzipFile`. The :attr:`~TarInfo.name` may also be modified,"
" in which case *arcname* could be a dummy string."
msgstr ""
"你可以在使用 :meth:`addfile` 添加 :class:`TarInfo` 的某些属性之前修改它们。 "
"如果文件对象不是从文件开头进行定位的普通文件对象，:attr:`~TarInfo.size` 之类的属性就可能需要修改。 例如 "
":class:`~gzip.GzipFile` 之类的文件就属于这种情况。  :attr:`~TarInfo.name` 也可以被修改，在这种情况下 "
"*arcname* 可以是一个占位字符串。"

#: ../../library/tarfile.rst:724
msgid ""
"Close the :class:`TarFile`. In write mode, two finishing zero blocks are "
"appended to the archive."
msgstr "关闭 :class:`TarFile`。 在写入模式下，会向归档添加两个表示结束的零数据块。"

#: ../../library/tarfile.rst:731
msgid "A dictionary containing key-value pairs of pax global headers."
msgstr "一个包含 pax 全局标头的键值对的字典。"

#: ../../library/tarfile.rst:738
msgid "TarInfo Objects"
msgstr "TarInfo 对象"

#: ../../library/tarfile.rst:740
msgid ""
"A :class:`TarInfo` object represents one member in a :class:`TarFile`. Aside"
" from storing all required attributes of a file (like file type, size, time,"
" permissions, owner etc.), it provides some useful methods to determine its "
"type. It does *not* contain the file's data itself."
msgstr ""
":class:`TarInfo` 对象代表 :class:`TarFile` 中的一个文件。 "
"除了会存储所有必要的文件属性（例如文件类型、大小、时间、权限、所有者等），它还提供了一些确定文件类型的有用方法。 此对象 *并不* 包含文件数据本身。"

#: ../../library/tarfile.rst:745
msgid ""
":class:`TarInfo` objects are returned by :class:`TarFile`'s methods "
":meth:`~TarFile.getmember`, :meth:`~TarFile.getmembers` and "
":meth:`~TarFile.gettarinfo`."
msgstr ""
":class:`TarInfo` 对象可通过 :class:`TarFile` 的方法 :meth:`~TarFile.getmember`, "
":meth:`~TarFile.getmembers` 和 :meth:`~TarFile.gettarinfo` 返回。"

#: ../../library/tarfile.rst:749
msgid ""
"Modifying the objects returned by :meth:`~TarFile.getmember` or "
":meth:`~TarFile.getmembers` will affect all subsequent operations on the "
"archive. For cases where this is unwanted, you can use :mod:`copy.copy() "
"<copy>` or call the :meth:`~TarInfo.replace` method to create a modified "
"copy in one step."
msgstr ""
"修改 :meth:`~TarFile.getmember` 或 :meth:`~TarFile.getmembers` "
"返回的对象会影响在上的所有后续操作。 对于不想要这样的场景，你可以使用 :mod:`copy.copy() <copy>` 或调用 "
":meth:`~TarInfo.replace` 方法一次性创建修改后的副本。"

#: ../../library/tarfile.rst:755
msgid ""
"Several attributes can be set to ``None`` to indicate that a piece of "
"metadata is unused or unknown. Different :class:`TarInfo` methods handle "
"``None`` differently:"
msgstr ""
"部分属性可以设为 ``None`` 以表示一些元数据未被使用或未知。 不同的 :class:`TarInfo` 方法会以不同的方式处理 "
"``None``:"

#: ../../library/tarfile.rst:759
msgid ""
"The :meth:`~TarFile.extract` or :meth:`~TarFile.extractall` methods will "
"ignore the corresponding metadata, leaving it set to a default."
msgstr ""
":meth:`~TarFile.extract` 或 :meth:`~TarFile.extractall` 方法会忽略相应的元数据，让其保持默认设置。"

#: ../../library/tarfile.rst:761
msgid ":meth:`~TarFile.addfile` will fail."
msgstr ":meth:`~TarFile.addfile` 将会失败。"

#: ../../library/tarfile.rst:762
msgid ":meth:`~TarFile.list` will print a placeholder string."
msgstr ":meth:`~TarFile.list` 将打印一个占位字符串。"

#: ../../library/tarfile.rst:766
msgid "Create a :class:`TarInfo` object."
msgstr "创建一个 :class:`TarInfo` 对象。"

#: ../../library/tarfile.rst:771
msgid "Create and return a :class:`TarInfo` object from string buffer *buf*."
msgstr "基于字符串缓冲区 *buf* 创建并返回一个 :class:`TarInfo` 对象。"

#: ../../library/tarfile.rst:773
msgid "Raises :exc:`HeaderError` if the buffer is invalid."
msgstr "如果缓冲区无效则会引发 :exc:`HeaderError`。"

#: ../../library/tarfile.rst:778
msgid ""
"Read the next member from the :class:`TarFile` object *tarfile* and return "
"it as a :class:`TarInfo` object."
msgstr "从 :class:`TarFile` 对象 *tarfile* 读取下一个成员并将其作为 :class:`TarInfo` 对象返回。"

#: ../../library/tarfile.rst:784
msgid ""
"Create a string buffer from a :class:`TarInfo` object. For information on "
"the arguments see the constructor of the :class:`TarFile` class."
msgstr "基于 :class:`TarInfo` 对象创建一个字符串缓冲区。 有关参数的信息请参见 :class:`TarFile` 类的构造器。"

#: ../../library/tarfile.rst:791
msgid "A ``TarInfo`` object has the following public data attributes:"
msgstr "``TarInfo`` 对象具有以下公有数据属性:"

#: ../../library/tarfile.rst:797
msgid "Name of the archive member."
msgstr "归档成员的名称。"

#: ../../library/tarfile.rst:803
msgid "Size in bytes."
msgstr "以字节表示的大小。"

#: ../../library/tarfile.rst:809
msgid ""
"Time of last modification in seconds since the :ref:`epoch <epoch>`, as in "
":attr:`os.stat_result.st_mtime`."
msgstr ""
"以 :ref:`Unix 纪元 <epoch>` 秒数表示的最近修改时间，与 :attr:`os.stat_result.st_mtime` 相同。"

#: ../../library/tarfile.rst:814 ../../library/tarfile.rst:825
#: ../../library/tarfile.rst:857 ../../library/tarfile.rst:868
#: ../../library/tarfile.rst:879 ../../library/tarfile.rst:890
msgid ""
"Can be set to ``None`` for :meth:`~TarFile.extract` and "
":meth:`~TarFile.extractall`, causing extraction to skip applying this "
"attribute."
msgstr ""
"对于 :meth:`~TarFile.extract` 和 :meth:`~TarFile.extractall` 可设为 "
"``None``，以使解压缩操作跳过应用此属性。"

#: ../../library/tarfile.rst:821
msgid "Permission bits, as for :func:`os.chmod`."
msgstr "权限比特位，与 :func:`os.chmod` 相同。"

#: ../../library/tarfile.rst:831
msgid ""
"File type.  *type* is usually one of these constants: :const:`REGTYPE`, "
":const:`AREGTYPE`, :const:`LNKTYPE`, :const:`SYMTYPE`, :const:`DIRTYPE`, "
":const:`FIFOTYPE`, :const:`CONTTYPE`, :const:`CHRTYPE`, :const:`BLKTYPE`, "
":const:`GNUTYPE_SPARSE`.  To determine the type of a :class:`TarInfo` object"
" more conveniently, use the ``is*()`` methods below."
msgstr ""
"文件类型。 *type* 通常为以下常量之一: :const:`REGTYPE`, :const:`AREGTYPE`, "
":const:`LNKTYPE`, :const:`SYMTYPE`, :const:`DIRTYPE`, :const:`FIFOTYPE`, "
":const:`CONTTYPE`, :const:`CHRTYPE`, :const:`BLKTYPE`, "
":const:`GNUTYPE_SPARSE`。 要更方便地确定一个 :class:`TarInfo` 对象的类型，请使用下述的 ``is*()`` "
"方法。"

#: ../../library/tarfile.rst:841
msgid ""
"Name of the target file name, which is only present in :class:`TarInfo` "
"objects of type :const:`LNKTYPE` and :const:`SYMTYPE`."
msgstr ""
"目标文件名的名称，该属性仅在类型为 :const:`LNKTYPE` 和 :const:`SYMTYPE` 的 :class:`TarInfo` "
"对象中存在。"

#: ../../library/tarfile.rst:844
msgid ""
"For symbolic links (``SYMTYPE``), the *linkname* is relative to the "
"directory that contains the link. For hard links (``LNKTYPE``), the "
"*linkname* is relative to the root of the archive."
msgstr ""
"对于符号链接 (``SYMTYPE``)，*linkname* 是相对于包含链接的目录的。 对于硬链接 (``LNKTYPE``)，*linkname*"
" 则是相对于存档根目录的。"

#: ../../library/tarfile.rst:853
msgid "User ID of the user who originally stored this member."
msgstr "最初保存该成员的用户的用户 ID。"

#: ../../library/tarfile.rst:864
msgid "Group ID of the user who originally stored this member."
msgstr "最初保存该成员的用户的分组 ID。"

#: ../../library/tarfile.rst:875
msgid "User name."
msgstr "用户名。"

#: ../../library/tarfile.rst:886
msgid "Group name."
msgstr "分组名。"

#: ../../library/tarfile.rst:897
msgid "Header checksum."
msgstr "标头校验和。"

#: ../../library/tarfile.rst:903
msgid "Device major number."
msgstr "设备主编号。"

#: ../../library/tarfile.rst:909
msgid "Device minor number."
msgstr "设备次编号。"

#: ../../library/tarfile.rst:915
msgid "The tar header starts here."
msgstr "tar 标头从这里开始。"

#: ../../library/tarfile.rst:921
msgid "The file's data starts here."
msgstr "文件的数据从这里开始。"

#: ../../library/tarfile.rst:926
msgid "Sparse member information."
msgstr "离散的成员信息。"

#: ../../library/tarfile.rst:932
msgid ""
"A dictionary containing key-value pairs of an associated pax extended "
"header."
msgstr "一个包含所关联的 pax 扩展标头的键值对的字典。"

#: ../../library/tarfile.rst:940
msgid ""
"Return a *new* copy of the :class:`!TarInfo` object with the given "
"attributes changed. For example, to return a ``TarInfo`` with the group name"
" set to ``'staff'``, use::"
msgstr ""
"返回修改了给定属性的 :class:`!TarInfo` 对象的 *新* 副本。 例如，要返回组名设为 ``'staff'`` 的 "
"``TarInfo``，请使用::"

#: ../../library/tarfile.rst:944
msgid "new_tarinfo = old_tarinfo.replace(gname='staff')"
msgstr "new_tarinfo = old_tarinfo.replace(gname='staff')"

#: ../../library/tarfile.rst:946
msgid ""
"By default, a deep copy is made. If *deep* is false, the copy is shallow, "
"i.e. ``pax_headers`` and any custom attributes are shared with the original "
"``TarInfo`` object."
msgstr ""
"在默认情况下，将执行深拷贝。 如果 *deep* 为假值，则执行浅拷贝，即 ``pax_headers`` 及任何自定义属性都与原始 "
"``TarInfo`` 对象共享。"

#: ../../library/tarfile.rst:950
msgid "A :class:`TarInfo` object also provides some convenient query methods:"
msgstr ":class:`TarInfo` 对象还提供了一些便捷查询方法:"

#: ../../library/tarfile.rst:955
msgid "Return :const:`True` if the :class:`TarInfo` object is a regular file."
msgstr "如果 :class:`TarInfo` 对象为普通文件则返回 :const:`True`。"

#: ../../library/tarfile.rst:960
msgid "Same as :meth:`isfile`."
msgstr "与 :meth:`isfile` 相同。"

#: ../../library/tarfile.rst:965
msgid "Return :const:`True` if it is a directory."
msgstr "如果为目录则返回 :const:`True`。"

#: ../../library/tarfile.rst:970
msgid "Return :const:`True` if it is a symbolic link."
msgstr "如果为符号链接则返回 :const:`True`。"

#: ../../library/tarfile.rst:975
msgid "Return :const:`True` if it is a hard link."
msgstr "如果为硬链接则返回 :const:`True`。"

#: ../../library/tarfile.rst:980
msgid "Return :const:`True` if it is a character device."
msgstr "如果为字符设备则返回 :const:`True`。"

#: ../../library/tarfile.rst:985
msgid "Return :const:`True` if it is a block device."
msgstr "如果为块设备则返回 :const:`True`。"

#: ../../library/tarfile.rst:990
msgid "Return :const:`True` if it is a FIFO."
msgstr "如果为 FIFO 则返回 :const:`True`。."

#: ../../library/tarfile.rst:995
msgid ""
"Return :const:`True` if it is one of character device, block device or FIFO."
msgstr "如果为字符设备、块设备或 FIFO 之一则返回 :const:`True`。"

#: ../../library/tarfile.rst:1001
msgid "Extraction filters"
msgstr "解压缩过滤器"

#: ../../library/tarfile.rst:1005
msgid ""
"The *tar* format is designed to capture all details of a UNIX-like "
"filesystem, which makes it very powerful. Unfortunately, the features make "
"it easy to create tar files that have unintended -- and possibly malicious "
"-- effects when extracted. For example, extracting a tar file can overwrite "
"arbitrary files in various ways (e.g.  by using absolute paths, ``..`` path "
"components, or symlinks that affect later members)."
msgstr ""
"*tar* 格式的设计旨在捕捉类 UNIX 文件系统的所有细节，这使其功能非常强大。 不幸的是，这些特性也使得很容易创建在解压缩时产生意想不到的 -- "
"甚至可能是恶意的 -- 影响的 tar 文件。 举例来说，解压缩 tar 文件时可以通过各种方式覆盖任意文件（例如通过使用绝对路径、``..`` "
"路径组件或影响后续成员的符号链接等）。"

#: ../../library/tarfile.rst:1013
msgid ""
"In most cases, the full functionality is not needed. Therefore, *tarfile* "
"supports extraction filters: a mechanism to limit functionality, and thus "
"mitigate some of the security issues."
msgstr "在大多数情况下，并不需要全部的功能。 因此，*tarfile* 支持提取过滤器：一种限制功能的机制，从而避免一些安全问题。"

#: ../../library/tarfile.rst:1019
msgid ""
"None of the available filters blocks *all* dangerous archive features. Never"
" extract archives from untrusted sources without prior inspection. See also "
":ref:`tarfile-further-verification`."
msgstr ""
"没有可用的过滤器阻止 *所有* 危险的归档特性。 在没有事先检查的情况下，不要从不可信的来源提取归档。参见 :ref:`tarfile-further-"
"verification`。"

#: ../../library/tarfile.rst:1025
msgid ":pep:`706`"
msgstr ":pep:`706`"

#: ../../library/tarfile.rst:1026
msgid "Contains further motivation and rationale behind the design."
msgstr "包含设计背后进一步的动机和理由。"

#: ../../library/tarfile.rst:1028
msgid ""
"The *filter* argument to :meth:`TarFile.extract` or "
":meth:`~TarFile.extractall` can be:"
msgstr ""
":meth:`TarFile.extract` 或 :meth:`~TarFile.extractall` 的 *filter* 参数可以是："

#: ../../library/tarfile.rst:1031
msgid ""
"the string ``'fully_trusted'``: Honor all metadata as specified in the "
"archive. Should be used if the user trusts the archive completely, or "
"implements their own complex verification."
msgstr ""
"字符串 ``'fully_trusted'``：尊重归档文件中指定的所有元数据。 如果用户完全信任该归档，或实现了自己的复杂验证则应使用此过滤器。"

#: ../../library/tarfile.rst:1036
msgid ""
"the string ``'tar'``: Honor most *tar*-specific features (i.e. features of "
"UNIX-like filesystems), but block features that are very likely to be "
"surprising or malicious. See :func:`tar_filter` for details."
msgstr ""
"字符串 ``'tar'``: 尊重大多数 *tar* 专属的特性（即类 UNIX 文件系统的功能），但阻止极有可能令人惊讶的或恶意的功能。 详情参见 "
":func:`tar_filter`。"

#: ../../library/tarfile.rst:1040
msgid ""
"the string ``'data'``: Ignore or block most features specific to UNIX-like "
"filesystems. Intended for extracting cross-platform data archives. See "
":func:`data_filter` for details."
msgstr ""
"字符串 ``'data'``：忽略或阻止大多数类 UNIX 文件系统专属的特性。 用于提取跨平台数据归档文件。 详情参见 "
":func:`data_filter`。"

#: ../../library/tarfile.rst:1044
msgid "``None`` (default): Use :attr:`TarFile.extraction_filter`."
msgstr "``None`` (默认): 使用 :attr:`TarFile.extraction_filter`。"

#: ../../library/tarfile.rst:1046
msgid ""
"If that is also ``None`` (the default), the ``'data'`` filter will be used."
msgstr "如果该参数也为 ``None`` (默认值)，则将使用 ``'data'`` 过滤器。"

#: ../../library/tarfile.rst:1050
msgid ""
"The default filter is set to :func:`data <data_filter>`. Previously, the "
"default was equivalent to :func:`fully_trusted <fully_trusted_filter>`."
msgstr ""
"默认过滤器被设为 :func:`data <data_filter>`。 在之前版本中，默认值等于 :func:`fully_trusted "
"<fully_trusted_filter>`。"

#: ../../library/tarfile.rst:1054
msgid ""
"A callable which will be called for each extracted member with a "
":ref:`TarInfo <tarinfo-objects>` describing the member and the destination "
"path to where the archive is extracted (i.e. the same path is used for all "
"members)::"
msgstr ""
"该可调用对象将针每个被提取的成员执行调用并附带一个 :ref:`TarInfo <tarinfo-objects>` "
"来描述该成员以及被提取归档文件的目标路径（即供所有成员使用的相同路径）::"

#: ../../library/tarfile.rst:1059
msgid "filter(member: TarInfo, path: str, /) -> TarInfo | None"
msgstr "filter(member: TarInfo, path: str, /) -> TarInfo | None"

#: ../../library/tarfile.rst:1061
msgid ""
"The callable is called just before each member is extracted, so it can take "
"the current state of the disk into account. It can:"
msgstr "该可调用对象会在提取每个成员之前被调用，因此它能够将磁盘的当前状态考虑在内。 它可以："

#: ../../library/tarfile.rst:1065
msgid ""
"return a :class:`TarInfo` object which will be used instead of the metadata "
"in the archive, or"
msgstr "返回一个 :class:`TarInfo` 对象，该对象将被用来代替归档文件中的元数据，或者"

#: ../../library/tarfile.rst:1067
msgid "return ``None``, in which case the member will be skipped, or"
msgstr "返回 ``None``，在这种情况下该成员将被跳过，或者"

#: ../../library/tarfile.rst:1068
msgid ""
"raise an exception to abort the operation or skip the member, depending on "
":attr:`~TarFile.errorlevel`. Note that when extraction is aborted, "
":meth:`~TarFile.extractall` may leave the archive partially extracted. It "
"does not attempt to clean up."
msgstr ""
"根据 :attr:`~TarFile.errorlevel` 的值引发一个异常以中止操作或跳过成员。 "
"请注意当提取操作中止时，:meth:`~TarFile.extractall` 可能会保留部分已提取的归档文件。 它不会尝试执行清理。"

#: ../../library/tarfile.rst:1074
msgid "Default named filters"
msgstr "默认的命名过滤器"

#: ../../library/tarfile.rst:1076
msgid ""
"The pre-defined, named filters are available as functions, so they can be "
"reused in custom filters:"
msgstr "预定义的命名过滤器可作为函数使用，因此它们可在自定义过滤器中被重用："

#: ../../library/tarfile.rst:1081
msgid "Return *member* unchanged."
msgstr "不加修改地返回 *member*。"

#: ../../library/tarfile.rst:1083
msgid "This implements the ``'fully_trusted'`` filter."
msgstr "实现 ``'fully_trusted'`` 过滤器。"

#: ../../library/tarfile.rst:1087
msgid "Implements the ``'tar'`` filter."
msgstr "实现 ``'tar'`` 过滤器。"

#: ../../library/tarfile.rst:1089
msgid "Strip leading slashes (``/`` and :data:`os.sep`) from filenames."
msgstr "从文件名中去除开头的斜杠 (``/`` 和 :data:`os.sep`)。"

#: ../../library/tarfile.rst:1090
msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract files with absolute "
"paths (in case the name is absolute even after stripping slashes, e.g. "
"``C:/foo`` on Windows). This raises :class:`~tarfile.AbsolutePathError`."
msgstr ""
":ref:`拒绝 <tarfile-extraction-refuse>` 提取具有绝对路径的文件（针对名称在去除斜杠后仍为绝对路径的情况，例如 "
"Windows 上 ``C:/foo`` 这样的路径）。 这会引发 :class:`~tarfile.AbsolutePathError`。"

#: ../../library/tarfile.rst:1094
msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract files whose absolute "
"path (after following symlinks) would end up outside the destination. This "
"raises :class:`~tarfile.OutsideDestinationError`."
msgstr ""
":ref:`拒绝 <tarfile-extraction-refuse>` 提取具有位于目标以外的绝对路径（跟随符号链接之后）的文件。这会引发 "
":class:`~tarfile.OutsideDestinationError`。"

#: ../../library/tarfile.rst:1097
msgid ""
"Clear high mode bits (setuid, setgid, sticky) and group/other write bits "
"(:const:`~stat.S_IWGRP` | :const:`~stat.S_IWOTH`)."
msgstr ""
"清空高模式位 (setuid, setgid, sticky) 和 group/other 写入位 (:const:`~stat.S_IWGRP` | "
":const:`~stat.S_IWOTH`)。"

#: ../../library/tarfile.rst:1100 ../../library/tarfile.rst:1139
msgid "Return the modified ``TarInfo`` member."
msgstr "返回修改后的 ``TarInfo`` 成员。"

#: ../../library/tarfile.rst:1104
msgid ""
"Implements the ``'data'`` filter. In addition to what ``tar_filter`` does:"
msgstr "实现 ``'data'`` 过滤器。 在 ``tar_filter`` 的所具有的功能之外："

#: ../../library/tarfile.rst:1107
msgid ""
"Normalize link targets (:attr:`TarInfo.linkname`) using "
":func:`os.path.normpath`. Note that this removes internal ``..`` components,"
" which may change the meaning of the link if the path in "
":attr:`!TarInfo.linkname` traverses symbolic links."
msgstr ""
"使用 :func:`os.path.normpath` 来正规化链接目标 (:attr:`TarInfo.linkname`)。 请注意这将移除内部的 "
"``..`` 组件，这可能在 :attr:`!TarInfo.linkname` 中的路径会遍历符号链接时改变链接的含义。"

#: ../../library/tarfile.rst:1113
msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract links (hard or soft) "
"that link to absolute paths, or ones that link outside the destination."
msgstr ""
":ref:`拒绝 <tarfile-extraction-refuse>` 提取链接到绝对路径的链接（不论是硬链接还是软链接），或链接到目标之外的链接。"

#: ../../library/tarfile.rst:1116
msgid ""
"This raises :class:`~tarfile.AbsoluteLinkError` or "
":class:`~tarfile.LinkOutsideDestinationError`."
msgstr ""
"这会引发 :class:`~tarfile.AbsoluteLinkError` 或 "
":class:`~tarfile.LinkOutsideDestinationError`。"

#: ../../library/tarfile.rst:1119
msgid ""
"Note that such files are refused even on platforms that do not support "
"symbolic links."
msgstr "请注意即使在不支持符号链接的平台上此类文件也会被拒绝。"

#: ../../library/tarfile.rst:1122
msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract device files (including"
" pipes). This raises :class:`~tarfile.SpecialFileError`."
msgstr ""
":ref:`拒绝 <tarfile-extraction-refuse>` 提取设备文件（包括管道）。 这会引发 "
":class:`~tarfile.SpecialFileError`。"

#: ../../library/tarfile.rst:1126
msgid "For regular files, including hard links:"
msgstr "用于常规文件，包括硬链接："

#: ../../library/tarfile.rst:1128
msgid ""
"Set the owner read and write permissions (:const:`~stat.S_IRUSR` | "
":const:`~stat.S_IWUSR`)."
msgstr "设置所有者读写权限 (:const:`~stat.S_IRUSR` | :const:`~stat.S_IWUSR`)。"

#: ../../library/tarfile.rst:1130
msgid ""
"Remove the group & other executable permission (:const:`~stat.S_IXGRP` | "
":const:`~stat.S_IXOTH`) if the owner doesn’t have it "
"(:const:`~stat.S_IXUSR`)."
msgstr ""
"如果所有者没有 group 和 other 可执行权限 (:const:`~stat.S_IXGRP` | "
":const:`~stat.S_IXOTH`) 则移除它 (:const:`~stat.S_IXUSR`)。"

#: ../../library/tarfile.rst:1134
msgid ""
"For other files (directories), set ``mode`` to ``None``, so that extraction "
"methods skip applying permission bits."
msgstr "对于其他文件（目录），将 ``mode`` 设为 ``None``，以便提取方法跳过应用权限位。"

#: ../../library/tarfile.rst:1136
msgid ""
"Set user and group info (``uid``, ``gid``, ``uname``, ``gname``) to "
"``None``, so that extraction methods skip setting it."
msgstr ""
"将用户和组信息 (``uid``, ``gid``, ``uname``, ``gname``) 设为 ``None``，以使得提取方法跳过对它的设置。"

#: ../../library/tarfile.rst:1141
msgid ""
"Note that this filter does not block *all* dangerous archive features. See "
":ref:`tarfile-further-verification`  for details."
msgstr ""
"请注意该过滤器不会阻挡 *所有* 危险的归档特性。 请参阅 :ref:`tarfile-further-verification` 了解详情。"

#: ../../library/tarfile.rst:1146
msgid "Link targets are now normalized."
msgstr "链接目标现在会被正规化。"

#: ../../library/tarfile.rst:1152
msgid "Filter errors"
msgstr "过滤器错误"

#: ../../library/tarfile.rst:1154
msgid ""
"When a filter refuses to extract a file, it will raise an appropriate "
"exception, a subclass of :class:`~tarfile.FilterError`. This will abort the "
"extraction if :attr:`TarFile.errorlevel` is 1 or more. With ``errorlevel=0``"
" the error will be logged and the member will be skipped, but extraction "
"will continue."
msgstr ""
"当过滤器拒绝提取文件时，它将引发一个适当的异常，即 :class:`~tarfile.FilterError` 的子类。 如果 "
":attr:`TarFile.errorlevel` 为 1 或更大的值则提取将中止。 如果 ``errorlevel=0`` "
"则会记录错误并跳过该成员，但提取仍会继续。"

#: ../../library/tarfile.rst:1164
msgid "Hints for further verification"
msgstr "进一步核验的提示"

#: ../../library/tarfile.rst:1166
msgid ""
"Even with ``filter='data'``, *tarfile* is not suited for extracting "
"untrusted files without prior inspection. Among other issues, the pre-"
"defined filters do not prevent denial-of-service attacks. Users should do "
"additional checks."
msgstr ""
"即使 ``filter='data'``，*tarfile* 也不适合在没有事先检查的情况下提取不受信任的文件。 "
"除其他问题外，预定义的过滤器不能防止拒绝服务攻击。 用户应当进行额外的检查。"

#: ../../library/tarfile.rst:1171
msgid "Here is an incomplete list of things to consider:"
msgstr "以下是一份不完整的考虑事项列表："

#: ../../library/tarfile.rst:1173
msgid ""
"Extract to a :func:`new temporary directory <tempfile.mkdtemp>` to prevent "
"e.g. exploiting pre-existing links, and to make it easier to clean up after "
"a failed extraction."
msgstr "提取到 :func:`新的临时目录 <tempfile.mkdtemp>` 以避免滥用已存在的链接等问题，并使得提取失败后更容易清理。"

#: ../../library/tarfile.rst:1176
msgid "Disallow symbolic links if you do not need the functionality."
msgstr "如果你不需要此功能则请禁用符号链接。"

#: ../../library/tarfile.rst:1177
msgid ""
"When working with untrusted data, use external (e.g. OS-level) limits on "
"disk, memory and CPU usage."
msgstr "在处理不受信任的数据时，使用外部（例如操作系统层级）的磁盘、内存和 CPU 使用限制。"

#: ../../library/tarfile.rst:1179
msgid ""
"Check filenames against an allow-list of characters (to filter out control "
"characters, confusables, foreign path separators, and so on)."
msgstr "根据允许字符列表检查文件名（以过滤掉控制字符、易混淆字符、外来路径分隔符等等）。"

#: ../../library/tarfile.rst:1182
msgid ""
"Check that filenames have expected extensions (discouraging files that "
"execute when you “click on them”, or extension-less files like Windows "
"special device names)."
msgstr "检查文件名是否有预期的扩展名（不鼓励使用在“点击”时会被执行的文件，或像 Windows 特殊设备名称这样没有扩展名的文件）。"

#: ../../library/tarfile.rst:1185
msgid ""
"Limit the number of extracted files, total size of extracted data, filename "
"length (including symlink length), and size of individual files."
msgstr "限制提取文件的数量、提取数据的总大小、文件名长度（包括符号链接长度）以及单个文件的大小。"

#: ../../library/tarfile.rst:1187
msgid ""
"Check for files that would be shadowed on case-insensitive filesystems."
msgstr "检查在不区分大小写的文件系统上会被屏蔽的文件。"

#: ../../library/tarfile.rst:1189
msgid "Also note that:"
msgstr "还需要注意："

#: ../../library/tarfile.rst:1191
msgid ""
"Tar files may contain multiple versions of the same file. Later ones are "
"expected to overwrite any earlier ones. This feature is crucial to allow "
"updating tape archives, but can be abused maliciously."
msgstr "Tar 文件可能包含同一文件的多个版本。 较晚的版本会覆盖任何较早的版本。 这一功能对于更新磁带归档来说至关重要，但也可能被恶意滥用。"

#: ../../library/tarfile.rst:1195
msgid ""
"*tarfile* does not protect against issues with “live” data, e.g. an attacker"
" tinkering with the destination (or source) directory while extraction (or "
"archiving) is in progress."
msgstr "*tarfile* 无法为“实时”数据的问题提供保护，例如在提取（或归档）过程中攻击者对目标（或源）目录进行了改动。"

#: ../../library/tarfile.rst:1201
msgid "Supporting older Python versions"
msgstr "支持较早的 Python 版本"

#: ../../library/tarfile.rst:1203
msgid ""
"Extraction filters were added to Python 3.12, but may be backported to older"
" versions as security updates. To check whether the feature is available, "
"use e.g. ``hasattr(tarfile, 'data_filter')`` rather than checking the Python"
" version."
msgstr ""
"提取过滤器是在 Python 3.12 中增加的，但可能会作为安全更新向下移植到较老的版本。 要检查该特性是否可用，请使用 "
"``hasattr(tarfile, 'data_filter')`` 而不是检查 Python 版本。"

#: ../../library/tarfile.rst:1208
msgid ""
"The following examples show how to support Python versions with and without "
"the feature. Note that setting ``extraction_filter`` will affect any "
"subsequent operations."
msgstr ""
"下面的例子演示了如何支持带有和没有有该功能的 Python 版本。 请注意设置 ``extraction_filter`` 会影响任何后续的操作。"

#: ../../library/tarfile.rst:1212
msgid "Fully trusted archive::"
msgstr "完全受信任的归档::"

#: ../../library/tarfile.rst:1214
msgid ""
"my_tarfile.extraction_filter = (lambda member, path: member)\n"
"my_tarfile.extractall()"
msgstr ""
"my_tarfile.extraction_filter = (lambda member, path: member)\n"
"my_tarfile.extractall()"

#: ../../library/tarfile.rst:1217
msgid ""
"Use the ``'data'`` filter if available, but revert to Python 3.11 behavior "
"(``'fully_trusted'``) if this feature is not available::"
msgstr ""
"如果可用则使用 ``'data'`` 过滤器；如果此特性不可用，则恢复为 Python 3.11 的行为 (``'fully_trusted'``)::"

#: ../../library/tarfile.rst:1220
msgid ""
"my_tarfile.extraction_filter = getattr(tarfile, 'data_filter',\n"
"                                       (lambda member, path: member))\n"
"my_tarfile.extractall()"
msgstr ""
"my_tarfile.extraction_filter = getattr(tarfile, 'data_filter',\n"
"                                       (lambda member, path: member))\n"
"my_tarfile.extractall()"

#: ../../library/tarfile.rst:1224
msgid "Use the ``'data'`` filter; *fail* if it is not available::"
msgstr "使用 ``'data'`` 过滤器；如果不可用则 *fail*::"

#: ../../library/tarfile.rst:1226
msgid "my_tarfile.extractall(filter=tarfile.data_filter)"
msgstr "my_tarfile.extractall(filter=tarfile.data_filter)"

#: ../../library/tarfile.rst:1228
msgid "or::"
msgstr "或者::"

#: ../../library/tarfile.rst:1230
msgid ""
"my_tarfile.extraction_filter = tarfile.data_filter\n"
"my_tarfile.extractall()"
msgstr ""
"my_tarfile.extraction_filter = tarfile.data_filter\n"
"my_tarfile.extractall()"

#: ../../library/tarfile.rst:1233
msgid "Use the ``'data'`` filter; *warn* if it is not available::"
msgstr "使用 ``'data'`` 过滤器；如果不可用则 *warn*::"

#: ../../library/tarfile.rst:1235
msgid ""
"if hasattr(tarfile, 'data_filter'):\n"
"    my_tarfile.extractall(filter='data')\n"
"else:\n"
"    # remove this when no longer needed\n"
"    warn_the_user('Extracting may be unsafe; consider updating Python')\n"
"    my_tarfile.extractall()"
msgstr ""
"if hasattr(tarfile, 'data_filter'):\n"
"    my_tarfile.extractall(filter='data')\n"
"else:\n"
"    # 当不再需要时移除这个\n"
"    warn_the_user('Extracting may be unsafe; consider updating Python')\n"
"    my_tarfile.extractall()"

#: ../../library/tarfile.rst:1244
msgid "Stateful extraction filter example"
msgstr "有状态的提取过滤器示例"

#: ../../library/tarfile.rst:1246
msgid ""
"While *tarfile*'s extraction methods take a simple *filter* callable, custom"
" filters may be more complex objects with an internal state. It may be "
"useful to write these as context managers, to be used like this::"
msgstr ""
"*tarfile* 的提取方法接受一个简单的 *filter* 可调用对象，而自定义过滤器则可以是具有内部状态的更复杂对象。 "
"将其写成为下文管理器可能会很有用处，即以这样的方式使用::"

#: ../../library/tarfile.rst:1250
msgid ""
"with StatefulFilter() as filter_func:\n"
"    tar.extractall(path, filter=filter_func)"
msgstr ""
"with StatefulFilter() as filter_func:\n"
"    tar.extractall(path, filter=filter_func)"

#: ../../library/tarfile.rst:1253
msgid "Such a filter can be written as, for example::"
msgstr "例如，这种过滤器可以写成::"

#: ../../library/tarfile.rst:1255
msgid ""
"class StatefulFilter:\n"
"    def __init__(self):\n"
"        self.file_count = 0\n"
"\n"
"    def __enter__(self):\n"
"        return self\n"
"\n"
"    def __call__(self, member, path):\n"
"        self.file_count += 1\n"
"        return member\n"
"\n"
"    def __exit__(self, *exc_info):\n"
"        print(f'{self.file_count} files extracted')"
msgstr ""
"class StatefulFilter:\n"
"    def __init__(self):\n"
"        self.file_count = 0\n"
"\n"
"    def __enter__(self):\n"
"        return self\n"
"\n"
"    def __call__(self, member, path):\n"
"        self.file_count += 1\n"
"        return member\n"
"\n"
"    def __exit__(self, *exc_info):\n"
"        print(f'{self.file_count} files extracted')"

#: ../../library/tarfile.rst:1275
msgid "Command-Line Interface"
msgstr "命令行接口"

#: ../../library/tarfile.rst:1279
msgid ""
"The :mod:`tarfile` module provides a simple command-line interface to "
"interact with tar archives."
msgstr ":mod:`tarfile` 模块提供了简单的命令行接口以便与 tar 归档进行交互。"

#: ../../library/tarfile.rst:1282
msgid ""
"If you want to create a new tar archive, specify its name after the "
":option:`-c` option and then list the filename(s) that should be included:"
msgstr "如果你想要创建一个新的 tar 归档，请在 :option:`-c` 选项后指定其名称然后列出应当被包含的文件名:"

#: ../../library/tarfile.rst:1285
msgid "$ python -m tarfile -c monty.tar  spam.txt eggs.txt"
msgstr "$ python -m tarfile -c monty.tar  spam.txt eggs.txt"

#: ../../library/tarfile.rst:1289
msgid "Passing a directory is also acceptable:"
msgstr "传入一个字典也是可接受的:"

#: ../../library/tarfile.rst:1291
msgid "$ python -m tarfile -c monty.tar life-of-brian_1979/"
msgstr "$ python -m tarfile -c monty.tar life-of-brian_1979/"

#: ../../library/tarfile.rst:1295
msgid ""
"If you want to extract a tar archive into the current directory, use the "
":option:`-e` option:"
msgstr "如果你想要将一个 tar 归档提取到指定的目录，请使用 :option:`-e` 选项:"

#: ../../library/tarfile.rst:1298
msgid "$ python -m tarfile -e monty.tar"
msgstr "$ python -m tarfile -e monty.tar"

#: ../../library/tarfile.rst:1302
msgid ""
"You can also extract a tar archive into a different directory by passing the"
" directory's name:"
msgstr "你也可以通过传入目录名称将一个 tar 归档提取到不同的目录:"

#: ../../library/tarfile.rst:1305
msgid "$ python -m tarfile -e monty.tar  other-dir/"
msgstr "$ python -m tarfile -e monty.tar  other-dir/"

#: ../../library/tarfile.rst:1309
msgid "For a list of the files in a tar archive, use the :option:`-l` option:"
msgstr "要获取一个 tar 归档中文件的列表，请使用 :option:`-l` 选项:"

#: ../../library/tarfile.rst:1311
msgid "$ python -m tarfile -l monty.tar"
msgstr "$ python -m tarfile -l monty.tar"

#: ../../library/tarfile.rst:1317
msgid "Command-line options"
msgstr "命令行选项"

#: ../../library/tarfile.rst:1322
msgid "List files in a tarfile."
msgstr "列出一个 tarfile 中的文件名。"

#: ../../library/tarfile.rst:1327
msgid "Create tarfile from source files."
msgstr "基于源文件创建 tarfile。"

#: ../../library/tarfile.rst:1332
msgid ""
"Extract tarfile into the current directory if *output_dir* is not specified."
msgstr "如果未指定 *output_dir* 则会将 tarfile 提取到当前目录。"

#: ../../library/tarfile.rst:1337
msgid "Test whether the tarfile is valid or not."
msgstr "检测 tarfile 是否有效。"

#: ../../library/tarfile.rst:1341
msgid "Verbose output."
msgstr "更详细地输出结果。"

#: ../../library/tarfile.rst:1345
msgid ""
"Specifies the *filter* for ``--extract``. See :ref:`tarfile-extraction-"
"filter` for details. Only string names are accepted (that is, "
"``fully_trusted``, ``tar``, and ``data``)."
msgstr ""
"为 ``--extract`` 指定 *filter*。 详情参见 :ref:`tarfile-extraction-filter`。 只接受字符串名称"
" (包括 ``fully_trusted``, ``tar`` 和 ``data``)。"

#: ../../library/tarfile.rst:1353
msgid "Examples"
msgstr "例子"

#: ../../library/tarfile.rst:1355
msgid ""
"How to extract an entire tar archive to the current working directory::"
msgstr "如何将整个 tar 归档提取到当前工作目录::"

#: ../../library/tarfile.rst:1357
msgid ""
"import tarfile\n"
"tar = tarfile.open(\"sample.tar.gz\")\n"
"tar.extractall(filter='data')\n"
"tar.close()"
msgstr ""
"import tarfile\n"
"tar = tarfile.open(\"sample.tar.gz\")\n"
"tar.extractall(filter='data')\n"
"tar.close()"

#: ../../library/tarfile.rst:1362
msgid ""
"How to extract a subset of a tar archive with :meth:`TarFile.extractall` "
"using a generator function instead of a list::"
msgstr "如何通过 :meth:`TarFile.extractall` 使用生成器函数而非列表来提取一个 tar 归档的子集::"

#: ../../library/tarfile.rst:1365
msgid ""
"import os\n"
"import tarfile\n"
"\n"
"def py_files(members):\n"
"    for tarinfo in members:\n"
"        if os.path.splitext(tarinfo.name)[1] == \".py\":\n"
"            yield tarinfo\n"
"\n"
"tar = tarfile.open(\"sample.tar.gz\")\n"
"tar.extractall(members=py_files(tar))\n"
"tar.close()"
msgstr ""
"import os\n"
"import tarfile\n"
"\n"
"def py_files(members):\n"
"    for tarinfo in members:\n"
"        if os.path.splitext(tarinfo.name)[1] == \".py\":\n"
"            yield tarinfo\n"
"\n"
"tar = tarfile.open(\"sample.tar.gz\")\n"
"tar.extractall(members=py_files(tar))\n"
"tar.close()"

#: ../../library/tarfile.rst:1377
msgid "How to create an uncompressed tar archive from a list of filenames::"
msgstr "如何基于一个文件名列表创建未压缩的 tar 归档::"

#: ../../library/tarfile.rst:1379
msgid ""
"import tarfile\n"
"tar = tarfile.open(\"sample.tar\", \"w\")\n"
"for name in [\"foo\", \"bar\", \"quux\"]:\n"
"    tar.add(name)\n"
"tar.close()"
msgstr ""
"import tarfile\n"
"tar = tarfile.open(\"sample.tar\", \"w\")\n"
"for name in [\"foo\", \"bar\", \"quux\"]:\n"
"    tar.add(name)\n"
"tar.close()"

#: ../../library/tarfile.rst:1385
msgid "The same example using the :keyword:`with` statement::"
msgstr "使用 :keyword:`with` 语句的同一个示例::"

#: ../../library/tarfile.rst:1387
msgid ""
"import tarfile\n"
"with tarfile.open(\"sample.tar\", \"w\") as tar:\n"
"    for name in [\"foo\", \"bar\", \"quux\"]:\n"
"        tar.add(name)"
msgstr ""
"import tarfile\n"
"with tarfile.open(\"sample.tar\", \"w\") as tar:\n"
"    for name in [\"foo\", \"bar\", \"quux\"]:\n"
"        tar.add(name)"

#: ../../library/tarfile.rst:1392
msgid ""
"How to read a gzip compressed tar archive and display some member "
"information::"
msgstr "如何读取一个 gzip 压缩的 tar 归档并显示一些成员信息::"

#: ../../library/tarfile.rst:1394
msgid ""
"import tarfile\n"
"tar = tarfile.open(\"sample.tar.gz\", \"r:gz\")\n"
"for tarinfo in tar:\n"
"    print(tarinfo.name, \"is\", tarinfo.size, \"bytes in size and is \", end=\"\")\n"
"    if tarinfo.isreg():\n"
"        print(\"a regular file.\")\n"
"    elif tarinfo.isdir():\n"
"        print(\"a directory.\")\n"
"    else:\n"
"        print(\"something else.\")\n"
"tar.close()"
msgstr ""
"import tarfile\n"
"tar = tarfile.open(\"sample.tar.gz\", \"r:gz\")\n"
"for tarinfo in tar:\n"
"    print(tarinfo.name, \"is\", tarinfo.size, \"bytes in size and is \", end=\"\")\n"
"    if tarinfo.isreg():\n"
"        print(\"a regular file.\")\n"
"    elif tarinfo.isdir():\n"
"        print(\"a directory.\")\n"
"    else:\n"
"        print(\"something else.\")\n"
"tar.close()"

#: ../../library/tarfile.rst:1406
msgid ""
"How to create an archive and reset the user information using the *filter* "
"parameter in :meth:`TarFile.add`::"
msgstr "如何创建一个归档并使用 :meth:`TarFile.add` 中的 *filter* 形参来重置用户信息::"

#: ../../library/tarfile.rst:1409
msgid ""
"import tarfile\n"
"def reset(tarinfo):\n"
"    tarinfo.uid = tarinfo.gid = 0\n"
"    tarinfo.uname = tarinfo.gname = \"root\"\n"
"    return tarinfo\n"
"tar = tarfile.open(\"sample.tar.gz\", \"w:gz\")\n"
"tar.add(\"foo\", filter=reset)\n"
"tar.close()"
msgstr ""
"import tarfile\n"
"def reset(tarinfo):\n"
"    tarinfo.uid = tarinfo.gid = 0\n"
"    tarinfo.uname = tarinfo.gname = \"root\"\n"
"    return tarinfo\n"
"tar = tarfile.open(\"sample.tar.gz\", \"w:gz\")\n"
"tar.add(\"foo\", filter=reset)\n"
"tar.close()"

#: ../../library/tarfile.rst:1422
msgid "Supported tar formats"
msgstr "受支持的 tar 格式"

#: ../../library/tarfile.rst:1424
msgid ""
"There are three tar formats that can be created with the :mod:`tarfile` "
"module:"
msgstr "通过 :mod:`tarfile` 模块可以创建三种 tar 格式:"

#: ../../library/tarfile.rst:1426
msgid ""
"The POSIX.1-1988 ustar format (:const:`USTAR_FORMAT`). It supports filenames"
" up to a length of at best 256 characters and linknames up to 100 "
"characters. The maximum file size is 8 GiB. This is an old and limited but "
"widely supported format."
msgstr ""
"The POSIX.1-1988 ustar 格式 (:const:`USTAR_FORMAT`)。 它支持最多 256 个字符的文件名长度和最多 "
"100 个字符的链接名长度。 文件大小上限为 8 GiB。 这是一种老旧但广受支持的格式。"

#: ../../library/tarfile.rst:1431
msgid ""
"The GNU tar format (:const:`GNU_FORMAT`). It supports long filenames and "
"linknames, files bigger than 8 GiB and sparse files. It is the de facto "
"standard on GNU/Linux systems. :mod:`tarfile` fully supports the GNU tar "
"extensions for long names, sparse file support is read-only."
msgstr ""
"GNU tar 格式 (:const:`GNU_FORMAT`)。 它支持长文件名和链接名、大于 8 GiB 的文件以及稀疏文件。 它是 "
"GNU/Linux 系统上的事实标准。 :mod:`tarfile` 完全支持针对长名称的 GNU tar 扩展，稀疏文件支持则限制为只读。"

#: ../../library/tarfile.rst:1436
msgid ""
"The POSIX.1-2001 pax format (:const:`PAX_FORMAT`). It is the most flexible "
"format with virtually no limits. It supports long filenames and linknames, "
"large files and stores pathnames in a portable way. Modern tar "
"implementations, including GNU tar, bsdtar/libarchive and star, fully "
"support extended *pax* features; some old or unmaintained libraries may not,"
" but should treat *pax* archives as if they were in the universally "
"supported *ustar* format. It is the current default format for new archives."
msgstr ""
"POSIX.1-2001 pax 格式 (:const:`PAX_FORMAT`)。 它是几乎无限制的最灵活格式。 "
"它支持长文件名和链接名，大文件以及使用可移植方式存储路径名。 现代的 tar 实现，包括 GNU tar, bsdtar/libarchive 和 "
"star，都完全支持扩展的 *pax* 特性；某些老旧或不再维护的库可能不支持，但应当会将 *pax* 归档视为广受支持的 *ustar* 格式。 "
"它是当前新建归档的默认格式。"

#: ../../library/tarfile.rst:1444
msgid ""
"It extends the existing *ustar* format with extra headers for information "
"that cannot be stored otherwise. There are two flavours of pax headers: "
"Extended headers only affect the subsequent file header, global headers are "
"valid for the complete archive and affect all following files. All the data "
"in a pax header is encoded in *UTF-8* for portability reasons."
msgstr ""
"它扩展了现有的 *ustar* 格式，包括用于无法以其他方式存储的附加标头。 存在两种形式的 pax "
"标头：扩展标头只影响后续的文件标头，全局标头则适用于完整归档并会影响所有后续的文件。 为了便于移植，在 pax 标头中的所有数据均以 *UTF-8* "
"编码。"

#: ../../library/tarfile.rst:1450
msgid ""
"There are some more variants of the tar format which can be read, but not "
"created:"
msgstr "还有一些 tar 格式的其他变种，它们可以被读取但不能被创建:"

#: ../../library/tarfile.rst:1453
msgid ""
"The ancient V7 format. This is the first tar format from Unix Seventh "
"Edition, storing only regular files and directories. Names must not be "
"longer than 100 characters, there is no user/group name information. Some "
"archives have miscalculated header checksums in case of fields with non-"
"ASCII characters."
msgstr ""
"古老的 V7 格式。 这是来自 Unix 第七版的第一个 tar 格式，它只存储常规文件和目录。 名称长度不能超过 100 "
"个字符，并且没有用户/分组名信息。 某些归档在带有非 ASCII 字符字段的情况下会产生计算错误的标头校验和。"

#: ../../library/tarfile.rst:1458
msgid ""
"The SunOS tar extended format. This format is a variant of the POSIX.1-2001 "
"pax format, but is not compatible."
msgstr "SunOS tar 扩展格式。 此格式是 POSIX.1-2001 pax 格式的一个变种，但并不保持兼容。"

#: ../../library/tarfile.rst:1464
msgid "Unicode issues"
msgstr "Unicode 问题"

#: ../../library/tarfile.rst:1466
msgid ""
"The tar format was originally conceived to make backups on tape drives with "
"the main focus on preserving file system information. Nowadays tar archives "
"are commonly used for file distribution and exchanging archives over "
"networks. One problem of the original format (which is the basis of all "
"other formats) is that there is no concept of supporting different character"
" encodings. For example, an ordinary tar archive created on a *UTF-8* system"
" cannot be read correctly on a *Latin-1* system if it contains non-*ASCII* "
"characters. Textual metadata (like filenames, linknames, user/group names) "
"will appear damaged. Unfortunately, there is no way to autodetect the "
"encoding of an archive. The pax format was designed to solve this problem. "
"It stores non-ASCII metadata using the universal character encoding *UTF-8*."
msgstr ""
"最初 tar 格式被设计用来在磁带机上生成备份，主要关注于保存文件系统信息。 现在 tar 归档通常用于文件分发和在网络上交换归档。 "
"最初格式（它是所有其他格式的基础）的一个问题是它没有支持不同字符编码格式的概念。 例如，一个在 *UTF-8* 系统上创建的普通 tar 归档如果包含非"
" *ASCII* 字符则将无法在 *Latin-1* 系统上被正确读取。 文本元数据（例如文件名，链接名，用户/分组名）将变为损坏状态。 "
"不幸的是，没有什么办法能够自动检测一个归档的编码格式。 pax 格式被设计用来解决这个问题。 它使用通用字符编码格式 *UTF-8* 来存储非 "
"ASCII 元数据。"

#: ../../library/tarfile.rst:1478
msgid ""
"The details of character conversion in :mod:`tarfile` are controlled by the "
"*encoding* and *errors* keyword arguments of the :class:`TarFile` class."
msgstr ""
"在 :mod:`tarfile` 中字符转换的细节由 :class:`TarFile` 类的 *encoding* 和 *errors* "
"关键字参数控制。"

#: ../../library/tarfile.rst:1481
msgid ""
"*encoding* defines the character encoding to use for the metadata in the "
"archive. The default value is :func:`sys.getfilesystemencoding` or "
"``'ascii'`` as a fallback. Depending on whether the archive is read or "
"written, the metadata must be either decoded or encoded. If *encoding* is "
"not set appropriately, this conversion may fail."
msgstr ""
"*encoding* 定义了用于归档中元数据的字符编码格式。 默认值为 :func:`sys.getfilesystemencoding` 或是回退选项"
" ``'ascii'``。 根据归档是被读取还是被写入，元数据必须被解码或编码。 如果没有正确设置 *encoding*，转换可能会失败。"

#: ../../library/tarfile.rst:1487
msgid ""
"The *errors* argument defines how characters are treated that cannot be "
"converted. Possible values are listed in section :ref:`error-handlers`. The "
"default scheme is ``'surrogateescape'`` which Python also uses for its file "
"system calls, see :ref:`os-filenames`."
msgstr ""
"*errors* 参数定义了不能被转换的字符将如何处理。 可能的取值在 :ref:`error-handlers` 小节列出。 默认方案为 "
"``'surrogateescape'``，它也被 Python 用于文件系统调用，参见 :ref:`os-filenames`。"

#: ../../library/tarfile.rst:1492
msgid ""
"For :const:`PAX_FORMAT` archives (the default), *encoding* is generally not "
"needed because all the metadata is stored using *UTF-8*. *encoding* is only "
"used in the rare cases when binary pax headers are decoded or when strings "
"with surrogate characters are stored."
msgstr ""
"对于 :const:`PAX_FORMAT` 归档（默认格式），*encoding* 通常是不必要的，因为所有元数据都使用 *UTF-8* 来存储。 "
"*encoding* 仅在解码二进制 pax 标头或存储带有替代字符的字符串等少数场景下会被使用。"
