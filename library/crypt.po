# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/crypt.rst:2
msgid ":mod:`crypt` --- Function to check Unix passwords"
msgstr ":mod:`crypt` —— 验证 Unix 口令的函数"

#: ../../library/crypt.rst:13
msgid "**Source code:** :source:`Lib/crypt.py`"
msgstr "**源代码：** :source:`Lib/struct.py`"

#: ../../library/crypt.rst:24
msgid ""
"The :mod:`crypt` module is deprecated (see :pep:`PEP 594 <594#crypt>` for "
"details and alternatives). The :mod:`hashlib` module is a potential "
"replacement for certain use cases. The `passlib "
"<https://pypi.org/project/passlib/>`_ package can replace all use cases of "
"this module."
msgstr ""

#: ../../library/crypt.rst:27
msgid ""
"This module implements an interface to the :manpage:`crypt(3)` routine, "
"which is a one-way hash function based upon a modified DES algorithm; see "
"the Unix man page for further details.  Possible uses include storing hashed"
" passwords so you can check passwords without storing the actual password, "
"or attempting to crack Unix passwords with a dictionary."
msgstr ""
"本模块实现了连接 :manpage:`crypt(3)` 的接口，是一个基于改进 DES 算法的单向散列函数；更多细节请参阅 Unix man "
"手册。可能的用途包括保存经过哈希的口令，这样就可以在不存储实际口令的情况下对其进行验证，或者尝试用字典来破解 Unix 口令。"

#: ../../library/crypt.rst:35
msgid ""
"Notice that the behavior of this module depends on the actual implementation"
"  of the :manpage:`crypt(3)` routine in the running system.  Therefore, any "
"extensions available on the current implementation will also  be available "
"on this module."
msgstr "请注意，本模块的执行取决于当前系统中 :manpage:`crypt(3)` 的实际实现。 因此，当前实现版本可用的扩展均可在本模块使用。"

#: ../../library/crypt.rst:40
msgid ":ref:`Availability <availability>`: Unix, not VxWorks."
msgstr ":ref:`可用性 <availability>`: Unix，不包括 VxWorks。"

#: ../../includes/wasm-notavail.rst:3
msgid ":ref:`Availability <availability>`: not Emscripten, not WASI."
msgstr ":ref:`可用性 <availability>`: 非 Emscripten，非 WASI。"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""
"此模块在 WebAssembly 平台 ``wasm32-emscripten`` 和 ``wasm32-wasi`` 上不适用或不可用。 请参阅 "
":ref:`wasm-availability` 了解详情。"

#: ../../library/crypt.rst:45
msgid "Hashing Methods"
msgstr "哈希方法"

#: ../../library/crypt.rst:49
msgid ""
"The :mod:`crypt` module defines the list of hashing methods (not all methods"
" are available on all platforms):"
msgstr ":mod:`crypt` 模块定义了哈希方法的列表（不是所有的方法在所有平台上都可用）。"

#: ../../library/crypt.rst:54
msgid ""
"A Modular Crypt Format method with 16 character salt and 86 character hash "
"based on the SHA-512 hash function.  This is the strongest method."
msgstr "基于 SHA-512 哈希函数的模块化加密格式方法，具备 16 个字符的 salt 和 86个字符的哈希算法。这是最强的哈希算法。"

#: ../../library/crypt.rst:59
msgid ""
"Another Modular Crypt Format method with 16 character salt and 43 character "
"hash based on the SHA-256 hash function."
msgstr "另一种基于 SHA-256 哈希函数的模块化加密格式方法，具备 16 个字符的 salt 和 43 个字符的哈希算法。"

#: ../../library/crypt.rst:64
msgid ""
"Another Modular Crypt Format method with 22 character salt and 31 character "
"hash based on the Blowfish cipher."
msgstr "另一种基于 Blowfish 的模块化加密格式方法，有 22 个字符的 salt 和 31 个字符的哈希算法。"

#: ../../library/crypt.rst:71
msgid ""
"Another Modular Crypt Format method with 8 character salt and 22 character "
"hash based on the MD5 hash function."
msgstr "另一种基于 MD5 哈希函数的模块化加密格式方法，具备 8 个字符的 salt 和 22 个字符的哈希算法。"

#: ../../library/crypt.rst:76
msgid ""
"The traditional method with a 2 character salt and 13 characters of hash.  "
"This is the weakest method."
msgstr "传统的方法，具备 2 个字符的 salt 和 13 个字符的哈希算法。这是最弱的方法。"

#: ../../library/crypt.rst:81
msgid "Module Attributes"
msgstr "模块属性"

#: ../../library/crypt.rst:87
msgid ""
"A list of available password hashing algorithms, as ``crypt.METHOD_*`` "
"objects.  This list is sorted from strongest to weakest."
msgstr "可用口令哈希算法的列表，形式为 ``crypt.METHOD_*`` 对象。该列表从最强到最弱进行排序。"

#: ../../library/crypt.rst:93
msgid "Module Functions"
msgstr "模块函数"

#: ../../library/crypt.rst:95
msgid "The :mod:`crypt` module defines the following functions:"
msgstr ":mod:`crypt` 模块定义了以下函数："

#: ../../library/crypt.rst:99
msgid ""
"*word* will usually be a user's password as typed at a prompt or  in a "
"graphical interface.  The optional *salt* is either a string as returned "
"from :func:`mksalt`, one of the ``crypt.METHOD_*`` values (though not all "
"may be available on all platforms), or a full encrypted password including "
"salt, as returned by this function.  If *salt* is not provided, the "
"strongest method available in :attr:`methods` will be used."
msgstr ""
"*word* 通常将是用户在提示符或图形界面上输入的口令。 可选参数 *salt* 要么是 :func:`mksalt` 所返回的字符串，即 "
"``crypt.METHOD_*`` 值之一（尽管不是在所有平台上都可用），要么就是一个包括 salt 的完全加密的口令，与本函数的返回值一样。 "
"如果未给出 *salt*，则将使用 :attr:`methods` 中提供的最强方法。"

#: ../../library/crypt.rst:106
msgid ""
"Checking a password is usually done by passing the plain-text password as "
"*word* and the full results of a previous :func:`crypt` call, which should "
"be the same as the results of this call."
msgstr "查验口令通常是传入纯文本密码 *word* ，和之前 :func:`crypt` 调用的结果进行比较，应该与本次调用的结果相同。"

#: ../../library/crypt.rst:110
msgid ""
"*salt* (either a random 2 or 16 character string, possibly prefixed with "
"``$digit$`` to indicate the method) which will be used to perturb the "
"encryption algorithm.  The characters in *salt* must be in the set "
"``[./a-zA-Z0-9]``, with the exception of Modular Crypt Format which prefixes"
" a ``$digit$``."
msgstr ""
"*salt* (随机的 2 或 16 个字符的字符串，可能带有 ``$digit{TX-PL-LABEL}#x60;`` 前缀以提示相关方法) "
"将被用来扰乱加密算法。  *salt* 中的字符必须在 ``[./a-zA-Z0-9]`` 集合中，但 Modular Crypt Format "
"除外，它会带有 ``$digit{TX-PL-LABEL}#x60;`` 前缀。"

#: ../../library/crypt.rst:116
msgid ""
"Returns the hashed password as a string, which will be composed of "
"characters from the same alphabet as the salt."
msgstr "返回哈希后的口令字符串，将由 salt 所在字母表中的字符组成。"

#: ../../library/crypt.rst:121
msgid ""
"Since a few :manpage:`crypt(3)` extensions allow different values, with "
"different sizes in the *salt*, it is recommended to use  the full crypted "
"password as salt when checking for a password."
msgstr ""
"由于有些 :manpage:`crypt(3)` 扩展可以接受各种大小的  *salt*  值，建议在查验口令时采用完整的加密后口令作为 salt。"

#: ../../library/crypt.rst:125
msgid "Accept ``crypt.METHOD_*`` values in addition to strings for *salt*."
msgstr "除了字符串之外， *salt* 还可接受 ``crypt.METHOD_*`` 值。"

#: ../../library/crypt.rst:131
msgid ""
"Return a randomly generated salt of the specified method.  If no *method* is"
" given, the strongest method available in :attr:`methods` is used."
msgstr ""
"返回用指定方法随机生成的 salt 值。 如果没有给出 *method*，则会使用 :attr:`methods` 中提供的最强方法。is used."

#: ../../library/crypt.rst:135
msgid ""
"The return value is a string suitable for passing as the *salt* argument to "
":func:`crypt`."
msgstr "返回一个字符串，可用作传入 :func:`crypt` 的 *salt* 参数。"

#: ../../library/crypt.rst:138
msgid ""
"*rounds* specifies the number of rounds for ``METHOD_SHA256``, "
"``METHOD_SHA512`` and ``METHOD_BLOWFISH``. For ``METHOD_SHA256`` and "
"``METHOD_SHA512`` it must be an integer between ``1000`` and "
"``999_999_999``, the default is ``5000``.  For ``METHOD_BLOWFISH`` it must "
"be a power of two between ``16`` (2\\ :sup:`4`) and ``2_147_483_648`` (2\\ "
":sup:`31`), the default is ``4096`` (2\\ :sup:`12`)."
msgstr ""
"*rounds* 指定了 ``METHOD_SHA256``, ``METHOD_SHA512`` 和 ``METHOD_BLOWFISH`` "
"的循环次数。 对于 ``METHOD_SHA256`` 和 ``METHOD_SHA512`` 而言，必须为介于 ``1000`` 和 "
"``999_999_999`` 之间的整数，默认值为 ``5000``。 而对于 ``METHOD_BLOWFISH``，则必须为 ``16`` "
"(2\\ :sup:`4`) 和 ``2_147_483_648`` (2\\ :sup:`31`) 之间的二的幂，默认值为 ``4096`` (2\\"
" :sup:`12`)。"

#: ../../library/crypt.rst:148
msgid "Added the *rounds* parameter."
msgstr "加入  *rounds* 参数。"

#: ../../library/crypt.rst:153
msgid "Examples"
msgstr "例子"

#: ../../library/crypt.rst:155
msgid ""
"A simple example illustrating typical use (a constant-time comparison "
"operation is needed to limit exposure to timing attacks. "
":func:`hmac.compare_digest` is suitable for this purpose)::"
msgstr ""
"以下简单示例演示了典型用法（需要一个时间固定的比较操作来限制留给计时攻击的暴露面。 :func:`hmac.compare_digest` 即很适用）："

#: ../../library/crypt.rst:175
msgid ""
"To generate a hash of a password using the strongest available method and "
"check it against the original::"
msgstr "采用当前强度最高的方法生成哈希值，并与原口令进行核对："

#: ../../library/crypt.rst:15 ../../library/crypt.rst:33
#: ../../library/crypt.rst:119
msgid "crypt(3)"
msgstr ""

#: ../../library/crypt.rst:15
msgid "cipher"
msgstr ""

#: ../../library/crypt.rst:15
msgid "DES"
msgstr ""
