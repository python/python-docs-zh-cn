# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/crypt.rst:2
msgid ":mod:`crypt` --- Function to check Unix passwords"
msgstr ""

#: ../../library/crypt.rst:13
msgid "**Source code:** :source:`Lib/crypt.py`"
msgstr ""

#: ../../library/crypt.rst:24
msgid ""
"The :mod:`crypt` module is deprecated (see :pep:`PEP 594 <594#crypt>` for "
"details and alternatives). The :mod:`hashlib` module is a potential "
"replacement for certain use cases. The `passlib "
"<https://pypi.org/project/passlib/>`_ package can replace all use cases of "
"this module."
msgstr ""

#: ../../library/crypt.rst:27
msgid ""
"This module implements an interface to the :manpage:`crypt(3)` routine, "
"which is a one-way hash function based upon a modified DES algorithm; see "
"the Unix man page for further details.  Possible uses include storing hashed"
" passwords so you can check passwords without storing the actual password, "
"or attempting to crack Unix passwords with a dictionary."
msgstr ""

#: ../../library/crypt.rst:35
msgid ""
"Notice that the behavior of this module depends on the actual implementation"
"  of the :manpage:`crypt(3)` routine in the running system.  Therefore, any "
"extensions available on the current implementation will also  be available "
"on this module."
msgstr ""

#: ../../library/crypt.rst:40
msgid ":ref:`Availability <availability>`: Unix, not VxWorks."
msgstr ""

#: ../../includes/wasm-notavail.rst:3
msgid ":ref:`Availability <availability>`: not Emscripten, not WASI."
msgstr ""

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""

#: ../../library/crypt.rst:45
msgid "Hashing Methods"
msgstr ""

#: ../../library/crypt.rst:49
msgid ""
"The :mod:`crypt` module defines the list of hashing methods (not all methods"
" are available on all platforms):"
msgstr ""

#: ../../library/crypt.rst:54
msgid ""
"A Modular Crypt Format method with 16 character salt and 86 character hash "
"based on the SHA-512 hash function.  This is the strongest method."
msgstr ""

#: ../../library/crypt.rst:59
msgid ""
"Another Modular Crypt Format method with 16 character salt and 43 character "
"hash based on the SHA-256 hash function."
msgstr ""

#: ../../library/crypt.rst:64
msgid ""
"Another Modular Crypt Format method with 22 character salt and 31 character "
"hash based on the Blowfish cipher."
msgstr ""

#: ../../library/crypt.rst:71
msgid ""
"Another Modular Crypt Format method with 8 character salt and 22 character "
"hash based on the MD5 hash function."
msgstr ""

#: ../../library/crypt.rst:76
msgid ""
"The traditional method with a 2 character salt and 13 characters of hash.  "
"This is the weakest method."
msgstr ""

#: ../../library/crypt.rst:81
msgid "Module Attributes"
msgstr ""

#: ../../library/crypt.rst:87
msgid ""
"A list of available password hashing algorithms, as ``crypt.METHOD_*`` "
"objects.  This list is sorted from strongest to weakest."
msgstr ""

#: ../../library/crypt.rst:93
msgid "Module Functions"
msgstr ""

#: ../../library/crypt.rst:95
msgid "The :mod:`crypt` module defines the following functions:"
msgstr ""

#: ../../library/crypt.rst:99
msgid ""
"*word* will usually be a user's password as typed at a prompt or  in a "
"graphical interface.  The optional *salt* is either a string as returned "
"from :func:`mksalt`, one of the ``crypt.METHOD_*`` values (though not all "
"may be available on all platforms), or a full encrypted password including "
"salt, as returned by this function.  If *salt* is not provided, the "
"strongest method available in :attr:`methods` will be used."
msgstr ""

#: ../../library/crypt.rst:106
msgid ""
"Checking a password is usually done by passing the plain-text password as "
"*word* and the full results of a previous :func:`crypt` call, which should "
"be the same as the results of this call."
msgstr ""

#: ../../library/crypt.rst:110
msgid ""
"*salt* (either a random 2 or 16 character string, possibly prefixed with "
"``$digit$`` to indicate the method) which will be used to perturb the "
"encryption algorithm.  The characters in *salt* must be in the set "
"``[./a-zA-Z0-9]``, with the exception of Modular Crypt Format which prefixes"
" a ``$digit$``."
msgstr ""

#: ../../library/crypt.rst:116
msgid ""
"Returns the hashed password as a string, which will be composed of "
"characters from the same alphabet as the salt."
msgstr ""

#: ../../library/crypt.rst:121
msgid ""
"Since a few :manpage:`crypt(3)` extensions allow different values, with "
"different sizes in the *salt*, it is recommended to use  the full crypted "
"password as salt when checking for a password."
msgstr ""

#: ../../library/crypt.rst:125
msgid "Accept ``crypt.METHOD_*`` values in addition to strings for *salt*."
msgstr ""

#: ../../library/crypt.rst:131
msgid ""
"Return a randomly generated salt of the specified method.  If no *method* is"
" given, the strongest method available in :attr:`methods` is used."
msgstr ""

#: ../../library/crypt.rst:135
msgid ""
"The return value is a string suitable for passing as the *salt* argument to "
":func:`crypt`."
msgstr ""

#: ../../library/crypt.rst:138
msgid ""
"*rounds* specifies the number of rounds for ``METHOD_SHA256``, "
"``METHOD_SHA512`` and ``METHOD_BLOWFISH``. For ``METHOD_SHA256`` and "
"``METHOD_SHA512`` it must be an integer between ``1000`` and "
"``999_999_999``, the default is ``5000``.  For ``METHOD_BLOWFISH`` it must "
"be a power of two between ``16`` (2\\ :sup:`4`) and ``2_147_483_648`` (2\\ "
":sup:`31`), the default is ``4096`` (2\\ :sup:`12`)."
msgstr ""

#: ../../library/crypt.rst:148
msgid "Added the *rounds* parameter."
msgstr ""

#: ../../library/crypt.rst:153
msgid "Examples"
msgstr ""

#: ../../library/crypt.rst:155
msgid ""
"A simple example illustrating typical use (a constant-time comparison "
"operation is needed to limit exposure to timing attacks. "
":func:`hmac.compare_digest` is suitable for this purpose)::"
msgstr ""

#: ../../library/crypt.rst:175
msgid ""
"To generate a hash of a password using the strongest available method and "
"check it against the original::"
msgstr ""

#: ../../library/crypt.rst:15 ../../library/crypt.rst:33
#: ../../library/crypt.rst:119
msgid "crypt(3)"
msgstr ""

#: ../../library/crypt.rst:15
msgid "cipher"
msgstr ""

#: ../../library/crypt.rst:15
msgid "DES"
msgstr ""
