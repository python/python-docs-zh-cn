# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-subprocess.rst:7
msgid "Subprocesses"
msgstr ""

#: ../../library/asyncio-subprocess.rst:9
msgid ""
"**Source code:** :source:`Lib/asyncio/subprocess.py`, "
":source:`Lib/asyncio/base_subprocess.py`"
msgstr ""

#: ../../library/asyncio-subprocess.rst:14
msgid ""
"This section describes high-level async/await asyncio APIs to create and "
"manage subprocesses."
msgstr ""

#: ../../library/asyncio-subprocess.rst:19
msgid ""
"Here's an example of how asyncio can run a shell command and obtain its "
"result::"
msgstr ""

#: ../../library/asyncio-subprocess.rst:40
msgid "will print::"
msgstr ""

#: ../../library/asyncio-subprocess.rst:46
msgid ""
"Because all asyncio subprocess functions are asynchronous and asyncio "
"provides many tools to work with such functions, it is easy to execute and "
"monitor multiple subprocesses in parallel.  It is indeed trivial to modify "
"the above example to run several commands simultaneously::"
msgstr ""

#: ../../library/asyncio-subprocess.rst:58
msgid "See also the `Examples`_ subsection."
msgstr ""

#: ../../library/asyncio-subprocess.rst:62
msgid "Creating Subprocesses"
msgstr ""

#: ../../library/asyncio-subprocess.rst:68
msgid "Create a subprocess."
msgstr ""

#: ../../library/asyncio-subprocess.rst:70
#: ../../library/asyncio-subprocess.rst:89
msgid ""
"The *limit* argument sets the buffer limit for :class:`StreamReader` "
"wrappers for :attr:`Process.stdout` and :attr:`Process.stderr` (if "
":attr:`subprocess.PIPE` is passed to *stdout* and *stderr* arguments)."
msgstr ""

#: ../../library/asyncio-subprocess.rst:74
#: ../../library/asyncio-subprocess.rst:93
msgid "Return a :class:`~asyncio.subprocess.Process` instance."
msgstr ""

#: ../../library/asyncio-subprocess.rst:76
msgid ""
"See the documentation of :meth:`loop.subprocess_exec` for other parameters."
msgstr ""

#: ../../library/asyncio-subprocess.rst:81
#: ../../library/asyncio-subprocess.rst:109
msgid "The *loop* parameter."
msgstr ""

#: ../../library/asyncio-subprocess.rst:87
msgid "Run the *cmd* shell command."
msgstr ""

#: ../../library/asyncio-subprocess.rst:95
msgid ""
"See the documentation of :meth:`loop.subprocess_shell` for other parameters."
msgstr ""

#: ../../library/asyncio-subprocess.rst:100
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly "
"escape whitespace and special shell characters in strings that are going to "
"be used to construct shell commands."
msgstr ""

#: ../../library/asyncio-subprocess.rst:113
msgid ""
"Subprocesses are available for Windows if a :class:`ProactorEventLoop` is "
"used. See :ref:`Subprocess Support on Windows <asyncio-windows-subprocess>` "
"for details."
msgstr ""

#: ../../library/asyncio-subprocess.rst:119
msgid ""
"asyncio also has the following *low-level* APIs to work with subprocesses: "
":meth:`loop.subprocess_exec`, :meth:`loop.subprocess_shell`, "
":meth:`loop.connect_read_pipe`, :meth:`loop.connect_write_pipe`, as well as "
"the :ref:`Subprocess Transports <asyncio-subprocess-transports>` and "
":ref:`Subprocess Protocols <asyncio-subprocess-protocols>`."
msgstr ""

#: ../../library/asyncio-subprocess.rst:127
msgid "Constants"
msgstr ""

#: ../../library/asyncio-subprocess.rst:132
msgid "Can be passed to the *stdin*, *stdout* or *stderr* parameters."
msgstr ""

#: ../../library/asyncio-subprocess.rst:134
msgid ""
"If *PIPE* is passed to *stdin* argument, the :attr:`Process.stdin "
"<asyncio.subprocess.Process.stdin>` attribute will point to a "
":class:`StreamWriter` instance."
msgstr ""

#: ../../library/asyncio-subprocess.rst:138
msgid ""
"If *PIPE* is passed to *stdout* or *stderr* arguments, the "
":attr:`Process.stdout <asyncio.subprocess.Process.stdout>` and "
":attr:`Process.stderr <asyncio.subprocess.Process.stderr>` attributes will "
"point to :class:`StreamReader` instances."
msgstr ""

#: ../../library/asyncio-subprocess.rst:146
msgid ""
"Special value that can be used as the *stderr* argument and indicates that "
"standard error should be redirected into standard output."
msgstr ""

#: ../../library/asyncio-subprocess.rst:152
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument"
" to process creation functions.  It indicates that the special file "
":data:`os.devnull` will be used for the corresponding subprocess stream."
msgstr ""

#: ../../library/asyncio-subprocess.rst:158
msgid "Interacting with Subprocesses"
msgstr ""

#: ../../library/asyncio-subprocess.rst:160
msgid ""
"Both :func:`create_subprocess_exec` and :func:`create_subprocess_shell` "
"functions return instances of the *Process* class.  *Process* is a high-"
"level wrapper that allows communicating with subprocesses and watching for "
"their completion."
msgstr ""

#: ../../library/asyncio-subprocess.rst:168
msgid ""
"An object that wraps OS processes created by the "
":func:`create_subprocess_exec` and :func:`create_subprocess_shell` "
"functions."
msgstr ""

#: ../../library/asyncio-subprocess.rst:172
msgid ""
"This class is designed to have a similar API to the "
":class:`subprocess.Popen` class, but there are some notable differences:"
msgstr ""

#: ../../library/asyncio-subprocess.rst:176
msgid ""
"unlike Popen, Process instances do not have an equivalent to the "
":meth:`~subprocess.Popen.poll` method;"
msgstr ""

#: ../../library/asyncio-subprocess.rst:179
msgid ""
"the :meth:`~asyncio.subprocess.Process.communicate` and "
":meth:`~asyncio.subprocess.Process.wait` methods don't have a *timeout* "
"parameter: use the :func:`wait_for` function;"
msgstr ""

#: ../../library/asyncio-subprocess.rst:183
msgid ""
"the :meth:`Process.wait() <asyncio.subprocess.Process.wait>` method is "
"asynchronous, whereas :meth:`subprocess.Popen.wait` method is implemented as"
" a blocking busy loop;"
msgstr ""

#: ../../library/asyncio-subprocess.rst:187
msgid "the *universal_newlines* parameter is not supported."
msgstr ""

#: ../../library/asyncio-subprocess.rst:189
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../../library/asyncio-subprocess.rst:191
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr ""

#: ../../library/asyncio-subprocess.rst:196
msgid "Wait for the child process to terminate."
msgstr ""

#: ../../library/asyncio-subprocess.rst:198
msgid "Set and return the :attr:`returncode` attribute."
msgstr ""

#: ../../library/asyncio-subprocess.rst:202
msgid ""
"This method can deadlock when using ``stdout=PIPE`` or ``stderr=PIPE`` and "
"the child process generates so much output that it blocks waiting for the OS"
" pipe buffer to accept more data. Use the :meth:`communicate` method when "
"using pipes to avoid this condition."
msgstr ""

#: ../../library/asyncio-subprocess.rst:210
msgid "Interact with process:"
msgstr ""

#: ../../library/asyncio-subprocess.rst:212
msgid "send data to *stdin* (if *input* is not ``None``);"
msgstr ""

#: ../../library/asyncio-subprocess.rst:213
msgid "read data from *stdout* and *stderr*, until EOF is reached;"
msgstr ""

#: ../../library/asyncio-subprocess.rst:214
msgid "wait for process to terminate."
msgstr ""

#: ../../library/asyncio-subprocess.rst:216
msgid ""
"The optional *input* argument is the data (:class:`bytes` object) that will "
"be sent to the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:219
msgid "Return a tuple ``(stdout_data, stderr_data)``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:221
msgid ""
"If either :exc:`BrokenPipeError` or :exc:`ConnectionResetError` exception is"
" raised when writing *input* into *stdin*, the exception is ignored.  This "
"condition occurs when the process exits before all data are written into "
"*stdin*."
msgstr ""

#: ../../library/asyncio-subprocess.rst:226
msgid ""
"If it is desired to send data to the process' *stdin*, the process needs to "
"be created with ``stdin=PIPE``.  Similarly, to get anything other than "
"``None`` in the result tuple, the process has to be created with "
"``stdout=PIPE`` and/or ``stderr=PIPE`` arguments."
msgstr ""

#: ../../library/asyncio-subprocess.rst:232
msgid ""
"Note, that the data read is buffered in memory, so do not use this method if"
" the data size is large or unlimited."
msgstr ""

#: ../../library/asyncio-subprocess.rst:237
msgid "Sends the signal *signal* to the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:241
msgid ""
"On Windows, :py:data:`SIGTERM` is an alias for :meth:`terminate`. "
"``CTRL_C_EVENT`` and ``CTRL_BREAK_EVENT`` can be sent to processes started "
"with a *creationflags* parameter which includes "
"``CREATE_NEW_PROCESS_GROUP``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:248
msgid "Stop the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:250
msgid ""
"On POSIX systems this method sends :py:data:`signal.SIGTERM` to the child "
"process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:253
msgid ""
"On Windows the Win32 API function :c:func:`TerminateProcess` is called to "
"stop the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:258
msgid "Kill the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:260
msgid ""
"On POSIX systems this method sends :py:data:`SIGKILL` to the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:263
msgid "On Windows this method is an alias for :meth:`terminate`."
msgstr ""

#: ../../library/asyncio-subprocess.rst:267
msgid ""
"Standard input stream (:class:`StreamWriter`) or ``None`` if the process was"
" created with ``stdin=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:272
msgid ""
"Standard output stream (:class:`StreamReader`) or ``None`` if the process "
"was created with ``stdout=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:277
msgid ""
"Standard error stream (:class:`StreamReader`) or ``None`` if the process was"
" created with ``stderr=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:282
msgid ""
"Use the :meth:`communicate` method rather than :attr:`process.stdin.write() "
"<stdin>`, :attr:`await process.stdout.read() <stdout>` or :attr:`await "
"process.stderr.read() <stderr>`. This avoids deadlocks due to streams "
"pausing reading or writing and blocking the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:291
msgid "Process identification number (PID)."
msgstr ""

#: ../../library/asyncio-subprocess.rst:293
msgid ""
"Note that for processes created by the :func:`create_subprocess_shell` "
"function, this attribute is the PID of the spawned shell."
msgstr ""

#: ../../library/asyncio-subprocess.rst:298
msgid "Return code of the process when it exits."
msgstr ""

#: ../../library/asyncio-subprocess.rst:300
msgid "A ``None`` value indicates that the process has not terminated yet."
msgstr ""

#: ../../library/asyncio-subprocess.rst:302
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (POSIX only)."
msgstr ""

#: ../../library/asyncio-subprocess.rst:309
msgid "Subprocess and Threads"
msgstr ""

#: ../../library/asyncio-subprocess.rst:311
msgid ""
"Standard asyncio event loop supports running subprocesses from different "
"threads by default."
msgstr ""

#: ../../library/asyncio-subprocess.rst:314
msgid ""
"On Windows subprocesses are provided by :class:`ProactorEventLoop` only "
"(default), :class:`SelectorEventLoop` has no subprocess support."
msgstr ""

#: ../../library/asyncio-subprocess.rst:317
msgid ""
"On UNIX *child watchers* are used for subprocess finish waiting, see "
":ref:`asyncio-watchers` for more info."
msgstr ""

#: ../../library/asyncio-subprocess.rst:323
msgid ""
"UNIX switched to use :class:`ThreadedChildWatcher` for spawning subprocesses"
" from different threads without any limitation."
msgstr ""

#: ../../library/asyncio-subprocess.rst:326
msgid ""
"Spawning a subprocess with *inactive* current child watcher raises "
":exc:`RuntimeError`."
msgstr ""

#: ../../library/asyncio-subprocess.rst:329
msgid ""
"Note that alternative event loop implementations might have own limitations;"
" please refer to their documentation."
msgstr ""

#: ../../library/asyncio-subprocess.rst:334
msgid ""
"The :ref:`Concurrency and multithreading in asyncio <asyncio-"
"multithreading>` section."
msgstr ""

#: ../../library/asyncio-subprocess.rst:339
msgid "Examples"
msgstr "例子"

#: ../../library/asyncio-subprocess.rst:341
msgid ""
"An example using the :class:`~asyncio.subprocess.Process` class to control a"
" subprocess and the :class:`StreamReader` class to read from its standard "
"output."
msgstr ""

#: ../../library/asyncio-subprocess.rst:347
msgid ""
"The subprocess is created by the :func:`create_subprocess_exec` function::"
msgstr ""

#: ../../library/asyncio-subprocess.rst:374
msgid ""
"See also the :ref:`same example <asyncio_example_subprocess_proto>` written "
"using low-level APIs."
msgstr ""
