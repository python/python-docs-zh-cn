# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Alpha Du <alphanow@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:09+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/modulefinder.rst:2
msgid ":mod:`!modulefinder` --- Find modules used by a script"
msgstr ":mod:`!modulefinder` --- 查找脚本使用的模块"

#: ../../library/modulefinder.rst:9
msgid "**Source code:** :source:`Lib/modulefinder.py`"
msgstr "**源码：** :source:`Lib/modulefinder.py`"

#: ../../library/modulefinder.rst:13
msgid ""
"This module provides a :class:`ModuleFinder` class that can be used to "
"determine the set of modules imported by a script. ``modulefinder.py`` can "
"also be run as a script, giving the filename of a Python script as its "
"argument, after which a report of the imported modules will be printed."
msgstr ""
"该模块提供了一个 :class:`ModuleFinder` 类，可用于确定脚本导入的模块集。 ``modulefinder.py`` "
"也可以作为脚本运行，给出 Python 脚本的文件名作为参数，之后将打印导入模块的报告。"

#: ../../library/modulefinder.rst:21
msgid ""
"Record that the package named *pkg_name* can be found in the specified "
"*path*."
msgstr "记录名为 *pkg_name* 的包可以在指定的 *path* 中找到。"

#: ../../library/modulefinder.rst:26
msgid ""
"Allows specifying that the module named *oldname* is in fact the package "
"named *newname*."
msgstr "允许指定名为 *oldname* 的模块实际上是名为 *newname* 的包。"

#: ../../library/modulefinder.rst:32
msgid ""
"This class provides :meth:`run_script` and :meth:`report` methods to "
"determine the set of modules imported by a script. *path* can be a list of "
"directories to search for modules; if not specified, ``sys.path`` is used.  "
"*debug* sets the debugging level; higher values make the class print "
"debugging messages about what it's doing. *excludes* is a list of module "
"names to exclude from the analysis. *replace_paths* is a list of ``(oldpath,"
" newpath)`` tuples that will be replaced in module paths."
msgstr ""
"该类提供 :meth:`run_script` 和 :meth:`report` 方法，用于确定脚本导入的模块集。 *path* "
"可以是搜索模块的目录列表；如果没有指定，则使用 ``sys.path`` 。  *debug* "
"设置调试级别；更高的值使类打印调试消息，关于它正在做什么。 *excludes* 是要从分析中排除的模块名称列表。 *replace_paths* "
"是将在模块路径中替换的 ``(oldpath, newpath)`` 元组的列表。"

#: ../../library/modulefinder.rst:43
msgid ""
"Print a report to standard output that lists the modules imported by the "
"script and their paths, as well as modules that are missing or seem to be "
"missing."
msgstr "将报告打印到标准输出，列出脚本导入的模块及其路径，以及缺少或似乎缺失的模块。"

#: ../../library/modulefinder.rst:49
msgid ""
"Analyze the contents of the *pathname* file, which must contain Python code."
msgstr "分析 *pathname* 文件的内容，该文件必须包含 Python 代码。"

#: ../../library/modulefinder.rst:54
msgid ""
"A dictionary mapping module names to modules. See :ref:`modulefinder-"
"example`."
msgstr "一个将模块名称映射到模块的字典。 请参阅 :ref:`modulefinder-example`。"

#: ../../library/modulefinder.rst:61
msgid "Example usage of :class:`ModuleFinder`"
msgstr ":class:`ModuleFinder` 的示例用法"

#: ../../library/modulefinder.rst:63
msgid "The script that is going to get analyzed later on (bacon.py)::"
msgstr "稍后将分析的脚本（bacon.py）::"

#: ../../library/modulefinder.rst:65
msgid ""
"import re, itertools\n"
"\n"
"try:\n"
"    import baconhameggs\n"
"except ImportError:\n"
"    pass\n"
"\n"
"try:\n"
"    import guido.python.ham\n"
"except ImportError:\n"
"    pass"
msgstr ""
"import re, itertools\n"
"\n"
"try:\n"
"    import baconhameggs\n"
"except ImportError:\n"
"    pass\n"
"\n"
"try:\n"
"    import guido.python.ham\n"
"except ImportError:\n"
"    pass"

#: ../../library/modulefinder.rst:78
msgid "The script that will output the report of bacon.py::"
msgstr "将输出 bacon.py 报告的脚本::"

#: ../../library/modulefinder.rst:80
msgid ""
"from modulefinder import ModuleFinder\n"
"\n"
"finder = ModuleFinder()\n"
"finder.run_script('bacon.py')\n"
"\n"
"print('Loaded modules:')\n"
"for name, mod in finder.modules.items():\n"
"    print('%s: ' % name, end='')\n"
"    print(','.join(list(mod.globalnames.keys())[:3]))\n"
"\n"
"print('-'*50)\n"
"print('Modules not imported:')\n"
"print('\\n'.join(finder.badmodules.keys()))"
msgstr ""
"from modulefinder import ModuleFinder\n"
"\n"
"finder = ModuleFinder()\n"
"finder.run_script('bacon.py')\n"
"\n"
"print('Loaded modules:')\n"
"for name, mod in finder.modules.items():\n"
"    print('%s: ' % name, end='')\n"
"    print(','.join(list(mod.globalnames.keys())[:3]))\n"
"\n"
"print('-'*50)\n"
"print('Modules not imported:')\n"
"print('\\n'.join(finder.badmodules.keys()))"

#: ../../library/modulefinder.rst:94
msgid "Sample output (may vary depending on the architecture)::"
msgstr "输出样例（可能因架构而异）::"

#: ../../library/modulefinder.rst:96
msgid ""
"Loaded modules:\n"
"_types:\n"
"copyreg:  _inverted_registry,_slotnames,__all__\n"
"re._compiler:  isstring,_sre,_optimize_unicode\n"
"_sre:\n"
"re._constants:  REPEAT_ONE,makedict,AT_END_LINE\n"
"sys:\n"
"re:  __module__,finditer,_expand\n"
"itertools:\n"
"__main__:  re,itertools,baconhameggs\n"
"re._parser:  _PATTERNENDERS,SRE_FLAG_UNICODE\n"
"array:\n"
"types:  __module__,IntType,TypeType\n"
"---------------------------------------------------\n"
"Modules not imported:\n"
"guido.python.ham\n"
"baconhameggs"
msgstr ""
"Loaded modules:\n"
"_types:\n"
"copyreg:  _inverted_registry,_slotnames,__all__\n"
"re._compiler:  isstring,_sre,_optimize_unicode\n"
"_sre:\n"
"re._constants:  REPEAT_ONE,makedict,AT_END_LINE\n"
"sys:\n"
"re:  __module__,finditer,_expand\n"
"itertools:\n"
"__main__:  re,itertools,baconhameggs\n"
"re._parser:  _PATTERNENDERS,SRE_FLAG_UNICODE\n"
"array:\n"
"types:  __module__,IntType,TypeType\n"
"---------------------------------------------------\n"
"Modules not imported:\n"
"guido.python.ham\n"
"baconhameggs"
