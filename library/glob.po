# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/glob.rst:2
msgid ":mod:`!glob` --- Unix style pathname pattern expansion"
msgstr ":mod:`!glob` --- Unix 风格的路径名模式扩展"

#: ../../library/glob.rst:7
msgid "**Source code:** :source:`Lib/glob.py`"
msgstr "**源代码:** :source:`Lib/glob.py`"

#: ../../library/glob.rst:21
msgid ""
"The :mod:`glob` module finds all the pathnames matching a specified pattern "
"according to the rules used by the Unix shell, although results are returned"
" in arbitrary order.  No tilde expansion is done, but ``*``, ``?``, and "
"character ranges expressed with ``[]`` will be correctly matched.  This is "
"done by using the :func:`os.scandir` and :func:`fnmatch.fnmatch` functions "
"in concert, and not by actually invoking a subshell."
msgstr ""
":mod:`glob` 模块会按照 Unix shell 所使用的规则找出所有匹配特定模式的路径名称，但返回结果的顺序是不确定的。 "
"波浪号扩展不会生效，但 ``*``, ``?`` 以及用 ``[]`` 表示的字符范围将被正确地匹配。 这是通过配合使用 "
":func:`os.scandir` 和 :func:`fnmatch.fnmatch` 函数来实现的，而不是通过实际唤起子 shell。"

#: ../../library/glob.rst:28
msgid ""
"Note that files beginning with a dot (``.``) can only be matched by patterns"
" that also start with a dot, unlike :func:`fnmatch.fnmatch` or "
":func:`pathlib.Path.glob`. (For tilde and shell variable expansion, use "
":func:`os.path.expanduser` and :func:`os.path.expandvars`.)"
msgstr ""
"请注意以点号 (``.``) 打头的文件只能用同样以点号打头的模式来匹配，这不同于 :func:`fnmatch.fnmatch` 或 "
":func:`pathlib.Path.glob`。 （对于波浪号和 shell 变量扩展，请使用 :func:`os.path.expanduser`"
" 和 :func:`os.path.expandvars`。）"

#: ../../library/glob.rst:34
msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``'[?]'`` matches the character ``'?'``."
msgstr "对于字面值匹配，请将原字符用方括号括起来。 例如，``'[?]'`` 将匹配字符 ``'?'``。"

#: ../../library/glob.rst:39
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ":mod:`pathlib` 模块提供高级路径对象。"

#: ../../library/glob.rst:45
msgid ""
"Return a possibly empty list of path names that match *pathname*, which must"
" be a string containing a path specification. *pathname* can be either "
"absolute (like :file:`/usr/src/Python-1.5/Makefile`) or relative (like "
":file:`../../Tools/\\*/\\*.gif`), and can contain shell-style wildcards. "
"Broken symlinks are included in the results (as in the shell). Whether or "
"not the results are sorted depends on the file system.  If a file that "
"satisfies conditions is removed or added during the call of this function, "
"whether a path name for that file will be included is unspecified."
msgstr ""
"返回一个匹配 *pathname* 的可能为空的路径名列表，其中的元素必须为包含路径信息的字符串。 *pathname* 可以是绝对路径 (如 "
":file:`/usr/src/Python-1.5/Makefile`) 或相对路径 (如 "
":file:`../../Tools/\\*/\\*.gif`)，并可包含 shell 风格的通配符。 无效的符号链接也将包括在结果中 (如像在 "
"shell 中一样)。 结果是否排序取决于具体文件系统。 如果某个符合条件的文件在调用此函数期间被移除或添加，是否包括该文件的路径是没有规定的。"

#: ../../library/glob.rst:54
msgid ""
"If *root_dir* is not ``None``, it should be a :term:`path-like object` "
"specifying the root directory for searching.  It has the same effect on "
":func:`glob` as changing the current directory before calling it.  If "
"*pathname* is relative, the result will contain paths relative to "
"*root_dir*."
msgstr ""
"如果 *root_dir* 不为 ``None``，则它应当是指明要搜索的根目录的 :term:`path-like object`。 它用在 "
":func:`glob` 上与在调用它之前改变当前目录有相同的效果。 如果 *pathname* 为相对路径，结果将包含相对于 *root_dir* "
"的路径。"

#: ../../library/glob.rst:60
msgid ""
"This function can support :ref:`paths relative to directory descriptors "
"<dir_fd>` with the *dir_fd* parameter."
msgstr "本函数带有 *dir_fd* 参数，支持 :ref:`基于目录描述符的相对路径 <dir_fd>`。"

#: ../../library/glob.rst:66
msgid ""
"If *recursive* is true, the pattern \"``**``\" will match any files and zero"
" or more directories, subdirectories and symbolic links to directories. If "
"the pattern is followed by an :data:`os.sep` or :data:`os.altsep` then files"
" will not match."
msgstr ""
"如果 *recursive* 为真值，则模式 \"``**``\" 将匹配目录中的任何文件以及零个或多个目录、子目录和符号链接。 如果模式加了一个 "
":data:`os.sep` 或 :data:`os.altsep` 则将不匹配文件。"

#: ../../library/glob.rst:71
msgid ""
"If *include_hidden* is true, \"``**``\" pattern will match hidden "
"directories."
msgstr "如果 *include_hidden* 为真值，\"``**``\" 模式将匹配隐藏目录。"

#: ../../library/glob.rst:73 ../../library/glob.rst:100
msgid ""
"Raises an :ref:`auditing event <auditing>` ``glob.glob`` with arguments "
"``pathname``, ``recursive``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``glob.glob`` 并附带参数 ``pathname``, ``recursive``。"

#: ../../library/glob.rst:74 ../../library/glob.rst:101
msgid ""
"Raises an :ref:`auditing event <auditing>` ``glob.glob/2`` with arguments "
"``pathname``, ``recursive``, ``root_dir``, ``dir_fd``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``glob.glob/2`` 并附带参数 ``pathname``, "
"``recursive``, ``root_dir``, ``dir_fd``。"

#: ../../library/glob.rst:77
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr "在一个较大的目录树中使用 \"``**``\" 模式可能会消耗非常多的时间。"

#: ../../library/glob.rst:81 ../../library/glob.rst:104
msgid ""
"This function may return duplicate path names if *pathname* contains "
"multiple \"``**``\" patterns and *recursive* is true."
msgstr "如果 *pathname* 包含多个 \"``**``\" 模式并且 *recursive* 为真值则此函数可能返回重复的路径名。"

#: ../../library/glob.rst:84 ../../library/glob.rst:107
msgid "Support for recursive globs using \"``**``\"."
msgstr "支持使用 \"``**``\" 的递归 glob。"

#: ../../library/glob.rst:87 ../../library/glob.rst:110
msgid "Added the *root_dir* and *dir_fd* parameters."
msgstr "添加了 *root_dir* 和 *dir_fd* 形参。"

#: ../../library/glob.rst:90 ../../library/glob.rst:113
msgid "Added the *include_hidden* parameter."
msgstr "增加了 *include_hidden* 形参。"

#: ../../library/glob.rst:97
msgid ""
"Return an :term:`iterator` which yields the same values as :func:`glob` "
"without actually storing them all simultaneously."
msgstr "返回一个 :term:`iterator`，它会产生与 :func:`glob` 相同的结果，但不会实际地同时保存它们。"

#: ../../library/glob.rst:119
msgid ""
"Escape all special characters (``'?'``, ``'*'`` and ``'['``). This is useful"
" if you want to match an arbitrary literal string that may have special "
"characters in it.  Special characters in drive/UNC sharepoints are not "
"escaped, e.g. on Windows ``escape('//?/c:/Quo vadis?.txt')`` returns "
"``'//?/c:/Quo vadis[?].txt'``."
msgstr ""
"转义所有特殊字符 (``'?'``, ``'*'`` 和 ``'['``)。 这适用于当你想要匹配可能带有特殊字符的任意字符串字面值的情况。 在 "
"drive/UNC 共享点中的特殊字符不会被转义，例如在 Windows 上 ``escape('//?/c:/Quo vadis?.txt')`` "
"将返回 ``'//?/c:/Quo vadis[?].txt'``。"

#: ../../library/glob.rst:128
msgid ""
"For example, consider a directory containing the following files: "
":file:`1.gif`, :file:`2.txt`, :file:`card.gif` and a subdirectory "
":file:`sub` which contains only the file :file:`3.txt`.  :func:`glob` will "
"produce the following results.  Notice how any leading components of the "
"path are preserved. ::"
msgstr ""
"例如，考虑一个包含以下内容的目录：文件 :file:`1.gif`, :file:`2.txt`, :file:`card.gif` 以及一个子目录 "
":file:`sub` 其中只包含一个文件 :file:`3.txt`.  :func:`glob` 将产生如下结果。 "
"请注意路径的任何开头部分都将被保留。::"

#: ../../library/glob.rst:134
msgid ""
">>> import glob\n"
">>> glob.glob('./[0-9].*')\n"
"['./1.gif', './2.txt']\n"
">>> glob.glob('*.gif')\n"
"['1.gif', 'card.gif']\n"
">>> glob.glob('?.gif')\n"
"['1.gif']\n"
">>> glob.glob('**/*.txt', recursive=True)\n"
"['2.txt', 'sub/3.txt']\n"
">>> glob.glob('./**/', recursive=True)\n"
"['./', './sub/']"
msgstr ""
">>> import glob\n"
">>> glob.glob('./[0-9].*')\n"
"['./1.gif', './2.txt']\n"
">>> glob.glob('*.gif')\n"
"['1.gif', 'card.gif']\n"
">>> glob.glob('?.gif')\n"
"['1.gif']\n"
">>> glob.glob('**/*.txt', recursive=True)\n"
"['2.txt', 'sub/3.txt']\n"
">>> glob.glob('./**/', recursive=True)\n"
"['./', './sub/']"

#: ../../library/glob.rst:146
msgid ""
"If the directory contains files starting with ``.`` they won't be matched by"
" default. For example, consider a directory containing :file:`card.gif` and "
":file:`.card.gif`::"
msgstr ""
"如果目录包含以 ``.`` 打头的文件，它们默认将不会被匹配。 例如，考虑一个包含 :file:`card.gif` 和 "
":file:`.card.gif` 的目录::"

#: ../../library/glob.rst:150
msgid ""
">>> import glob\n"
">>> glob.glob('*.gif')\n"
"['card.gif']\n"
">>> glob.glob('.c*')\n"
"['.card.gif']"
msgstr ""
">>> import glob\n"
">>> glob.glob('*.gif')\n"
"['card.gif']\n"
">>> glob.glob('.c*')\n"
"['.card.gif']"

#: ../../library/glob.rst:158
msgid "Module :mod:`fnmatch`"
msgstr "模块 :mod:`fnmatch`"

#: ../../library/glob.rst:159
msgid "Shell-style filename (not path) expansion"
msgstr "Shell 风格文件名（而非路径）扩展"

#: ../../library/glob.rst:9
msgid "filenames"
msgstr "文件名"

#: ../../library/glob.rst:9
msgid "pathname expansion"
msgstr "路径名扩展"

#: ../../library/glob.rst:13
msgid "* (asterisk)"
msgstr "* (星号)"

#: ../../library/glob.rst:13 ../../library/glob.rst:63
msgid "in glob-style wildcards"
msgstr "使用 glob 风格的通配符"

#: ../../library/glob.rst:13
msgid "? (question mark)"
msgstr "? (问号)"

#: ../../library/glob.rst:13
msgid "[] (square brackets)"
msgstr "[] (方括号)"

#: ../../library/glob.rst:13
msgid "! (exclamation)"
msgstr "! (感叹号)"

#: ../../library/glob.rst:13
msgid "- (minus)"
msgstr "- (减号)"

#: ../../library/glob.rst:13
msgid ". (dot)"
msgstr ". (点号)"

#: ../../library/glob.rst:63
msgid "**"
msgstr "**"
