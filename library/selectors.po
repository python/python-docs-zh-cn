# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/selectors.rst:2
msgid ":mod:`selectors` --- High-level I/O multiplexing"
msgstr ""

#: ../../library/selectors.rst:9
msgid "**Source code:** :source:`Lib/selectors.py`"
msgstr ""

#: ../../library/selectors.rst:14
msgid "Introduction"
msgstr "概述"

#: ../../library/selectors.rst:16
msgid ""
"This module allows high-level and efficient I/O multiplexing, built upon the"
" :mod:`select` module primitives. Users are encouraged to use this module "
"instead, unless they want precise control over the OS-level primitives used."
msgstr ""

#: ../../library/selectors.rst:20
msgid ""
"It defines a :class:`BaseSelector` abstract base class, along with several "
"concrete implementations (:class:`KqueueSelector`, "
":class:`EpollSelector`...), that can be used to wait for I/O readiness "
"notification on multiple file objects. In the following, \"file object\" "
"refers to any object with a :meth:`fileno()` method, or a raw file "
"descriptor. See :term:`file object`."
msgstr ""

#: ../../library/selectors.rst:26
msgid ""
":class:`DefaultSelector` is an alias to the most efficient implementation "
"available on the current platform: this should be the default choice for "
"most users."
msgstr ""

#: ../../library/selectors.rst:31
msgid ""
"The type of file objects supported depends on the platform: on Windows, "
"sockets are supported, but not pipes, whereas on Unix, both are supported "
"(some other types may be supported as well, such as fifos or special file "
"devices)."
msgstr ""

#: ../../library/selectors.rst:38
msgid ":mod:`select`"
msgstr ""

#: ../../library/selectors.rst:39
msgid "Low-level I/O multiplexing module."
msgstr ""

#: ../../library/selectors.rst:43
msgid "Classes"
msgstr ""

#: ../../library/selectors.rst:45
msgid "Classes hierarchy::"
msgstr ""

#: ../../library/selectors.rst:55
msgid ""
"In the following, *events* is a bitwise mask indicating which I/O events "
"should be waited for on a given file object. It can be a combination of the "
"modules constants below:"
msgstr ""

#: ../../library/selectors.rst:60
msgid "Constant"
msgstr "常量"

#: ../../library/selectors.rst:60
msgid "Meaning"
msgstr "含意"

#: ../../library/selectors.rst:62
msgid ":const:`EVENT_READ`"
msgstr ""

#: ../../library/selectors.rst:62
msgid "Available for read"
msgstr ""

#: ../../library/selectors.rst:64
msgid ":const:`EVENT_WRITE`"
msgstr ""

#: ../../library/selectors.rst:64
msgid "Available for write"
msgstr ""

#: ../../library/selectors.rst:70
msgid ""
"A :class:`SelectorKey` is a :class:`~collections.namedtuple` used to "
"associate a file object to its underlying file descriptor, selected event "
"mask and attached data. It is returned by several :class:`BaseSelector` "
"methods."
msgstr ""

#: ../../library/selectors.rst:77
msgid "File object registered."
msgstr ""

#: ../../library/selectors.rst:81
msgid "Underlying file descriptor."
msgstr ""

#: ../../library/selectors.rst:85
msgid "Events that must be waited for on this file object."
msgstr ""

#: ../../library/selectors.rst:89
msgid ""
"Optional opaque data associated to this file object: for example, this could"
" be used to store a per-client session ID."
msgstr ""

#: ../../library/selectors.rst:95
msgid ""
"A :class:`BaseSelector` is used to wait for I/O event readiness on multiple "
"file objects. It supports file stream registration, unregistration, and a "
"method to wait for I/O events on those streams, with an optional timeout. "
"It's an abstract base class, so cannot be instantiated. Use "
":class:`DefaultSelector` instead, or one of :class:`SelectSelector`, "
":class:`KqueueSelector` etc. if you want to specifically use an "
"implementation, and your platform supports it. :class:`BaseSelector` and its"
" concrete implementations support the :term:`context manager` protocol."
msgstr ""

#: ../../library/selectors.rst:107
msgid "Register a file object for selection, monitoring it for I/O events."
msgstr ""

#: ../../library/selectors.rst:109
msgid ""
"*fileobj* is the file object to monitor.  It may either be an integer file "
"descriptor or an object with a ``fileno()`` method. *events* is a bitwise "
"mask of events to monitor. *data* is an opaque object."
msgstr ""

#: ../../library/selectors.rst:114
msgid ""
"This returns a new :class:`SelectorKey` instance, or raises a "
":exc:`ValueError` in case of invalid event mask or file descriptor, or "
":exc:`KeyError` if the file object is already registered."
msgstr ""

#: ../../library/selectors.rst:120
msgid ""
"Unregister a file object from selection, removing it from monitoring. A file"
" object shall be unregistered prior to being closed."
msgstr ""

#: ../../library/selectors.rst:123
msgid "*fileobj* must be a file object previously registered."
msgstr ""

#: ../../library/selectors.rst:125
msgid ""
"This returns the associated :class:`SelectorKey` instance, or raises a "
":exc:`KeyError` if *fileobj* is not registered.  It will raise "
":exc:`ValueError` if *fileobj* is invalid (e.g. it has no ``fileno()`` "
"method or its ``fileno()`` method has an invalid return value)."
msgstr ""

#: ../../library/selectors.rst:132
msgid "Change a registered file object's monitored events or attached data."
msgstr ""

#: ../../library/selectors.rst:134
msgid ""
"This is equivalent to :meth:`BaseSelector.unregister(fileobj)` followed by "
":meth:`BaseSelector.register(fileobj, events, data)`, except that it can be "
"implemented more efficiently."
msgstr ""

#: ../../library/selectors.rst:138
msgid ""
"This returns a new :class:`SelectorKey` instance, or raises a "
":exc:`ValueError` in case of invalid event mask or file descriptor, or "
":exc:`KeyError` if the file object is not registered."
msgstr ""

#: ../../library/selectors.rst:144
msgid ""
"Wait until some registered file objects become ready, or the timeout "
"expires."
msgstr ""

#: ../../library/selectors.rst:147
msgid ""
"If ``timeout > 0``, this specifies the maximum wait time, in seconds. If "
"``timeout <= 0``, the call won't block, and will report the currently ready "
"file objects. If *timeout* is ``None``, the call will block until a "
"monitored file object becomes ready."
msgstr ""

#: ../../library/selectors.rst:153
msgid ""
"This returns a list of ``(key, events)`` tuples, one for each ready file "
"object."
msgstr ""

#: ../../library/selectors.rst:156
msgid ""
"*key* is the :class:`SelectorKey` instance corresponding to a ready file "
"object. *events* is a bitmask of events ready on this file object."
msgstr ""

#: ../../library/selectors.rst:161
msgid ""
"This method can return before any file object becomes ready or the timeout "
"has elapsed if the current process receives a signal: in this case, an empty"
" list will be returned."
msgstr ""

#: ../../library/selectors.rst:165
msgid ""
"The selector is now retried with a recomputed timeout when interrupted by a "
"signal if the signal handler did not raise an exception (see :pep:`475` for "
"the rationale), instead of returning an empty list of events before the "
"timeout."
msgstr ""

#: ../../library/selectors.rst:173
msgid "Close the selector."
msgstr ""

#: ../../library/selectors.rst:175
msgid ""
"This must be called to make sure that any underlying resource is freed. The "
"selector shall not be used once it has been closed."
msgstr ""

#: ../../library/selectors.rst:180
msgid "Return the key associated with a registered file object."
msgstr ""

#: ../../library/selectors.rst:182
msgid ""
"This returns the :class:`SelectorKey` instance associated to this file "
"object, or raises :exc:`KeyError` if the file object is not registered."
msgstr ""

#: ../../library/selectors.rst:187
msgid "Return a mapping of file objects to selector keys."
msgstr ""

#: ../../library/selectors.rst:189
msgid ""
"This returns a :class:`~collections.abc.Mapping` instance mapping registered"
" file objects to their associated :class:`SelectorKey` instance."
msgstr ""

#: ../../library/selectors.rst:196
msgid ""
"The default selector class, using the most efficient implementation "
"available on the current platform. This should be the default choice for "
"most users."
msgstr ""

#: ../../library/selectors.rst:203
msgid ":func:`select.select`-based selector."
msgstr ""

#: ../../library/selectors.rst:208
msgid ":func:`select.poll`-based selector."
msgstr ""

#: ../../library/selectors.rst:213
msgid ":func:`select.epoll`-based selector."
msgstr ""

#: ../../library/selectors.rst:217
msgid ""
"This returns the file descriptor used by the underlying :func:`select.epoll`"
" object."
msgstr ""

#: ../../library/selectors.rst:222
msgid ":func:`select.devpoll`-based selector."
msgstr ""

#: ../../library/selectors.rst:226
msgid ""
"This returns the file descriptor used by the underlying "
":func:`select.devpoll` object."
msgstr ""

#: ../../library/selectors.rst:233
msgid ":func:`select.kqueue`-based selector."
msgstr ""

#: ../../library/selectors.rst:237
msgid ""
"This returns the file descriptor used by the underlying "
":func:`select.kqueue` object."
msgstr ""

#: ../../library/selectors.rst:242
msgid "Examples"
msgstr "例子"

#: ../../library/selectors.rst:244
msgid "Here is a simple echo server implementation::"
msgstr ""
