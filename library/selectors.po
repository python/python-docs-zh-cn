# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/selectors.rst:2
msgid ":mod:`!selectors` --- High-level I/O multiplexing"
msgstr ":mod:`!selectors` --- 高层级 I/O 复用"

#: ../../library/selectors.rst:9
msgid "**Source code:** :source:`Lib/selectors.py`"
msgstr "**源码:** :source:`Lib/selectors.py`"

#: ../../library/selectors.rst:14
msgid "Introduction"
msgstr "概述"

#: ../../library/selectors.rst:16
msgid ""
"This module allows high-level and efficient I/O multiplexing, built upon the"
" :mod:`select` module primitives. Users are encouraged to use this module "
"instead, unless they want precise control over the OS-level primitives used."
msgstr ""
"此模块允许高层级且高效率的 I/O 复用，它建立在 :mod:`select` 模块原型的基础之上。 推荐用户改用此模块，除非他们希望对所使用的 OS "
"层级原型进行精确控制。"

#: ../../library/selectors.rst:20
msgid ""
"It defines a :class:`BaseSelector` abstract base class, along with several "
"concrete implementations (:class:`KqueueSelector`, "
":class:`EpollSelector`...), that can be used to wait for I/O readiness "
"notification on multiple file objects. In the following, \"file object\" "
"refers to any object with a :meth:`~io.IOBase.fileno` method, or a raw file "
"descriptor. See :term:`file object`."
msgstr ""
"它定义了一个 :class:`BaseSelector` 抽象基类，以及多个具体实现 (:class:`KqueueSelector`, "
":class:`EpollSelector`...)，它们可被用于在多个文件对象上等待 I/O 就绪通知。 在下文中，“文件对象”是指任何具有 "
":meth:`~io.IOBase.fileno` 方法的对象，或是一个原始文件描述符。 参见 :term:`file object`。"

#: ../../library/selectors.rst:26
msgid ""
":class:`DefaultSelector` is an alias to the most efficient implementation "
"available on the current platform: this should be the default choice for "
"most users."
msgstr ":class:`DefaultSelector` 是一个指向当前平台上可用的最高效实现的别名：这应为大多数用户的默认选择。"

#: ../../library/selectors.rst:31
msgid ""
"The type of file objects supported depends on the platform: on Windows, "
"sockets are supported, but not pipes, whereas on Unix, both are supported "
"(some other types may be supported as well, such as fifos or special file "
"devices)."
msgstr ""
"受支持的文件对象类型取决于具体平台：在 Windows 上，支持套接字但不支持管道，而在 Unix 上两者均受支持（某些其他类型也可能受支持，例如 "
"fifo 或特殊文件设备等）。"

#: ../../library/selectors.rst:38
msgid ":mod:`select`"
msgstr ":mod:`select`"

#: ../../library/selectors.rst:39
msgid "Low-level I/O multiplexing module."
msgstr "低层级的 I/O 多路复用模块。"

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Availability"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See "
":ref:`wasm-availability` for more information."
msgstr "此模块在 WebAssembly 平台上无效或不可用。 请参阅 :ref:`wasm-availability` 了解详情。"

#: ../../library/selectors.rst:44
msgid "Classes"
msgstr "类"

#: ../../library/selectors.rst:46
msgid "Classes hierarchy::"
msgstr "类的层次结构::"

#: ../../library/selectors.rst:48
msgid ""
"BaseSelector\n"
"+-- SelectSelector\n"
"+-- PollSelector\n"
"+-- EpollSelector\n"
"+-- DevpollSelector\n"
"+-- KqueueSelector"
msgstr ""
"BaseSelector\n"
"+-- SelectSelector\n"
"+-- PollSelector\n"
"+-- EpollSelector\n"
"+-- DevpollSelector\n"
"+-- KqueueSelector"

#: ../../library/selectors.rst:56
msgid ""
"In the following, *events* is a bitwise mask indicating which I/O events "
"should be waited for on a given file object. It can be a combination of the "
"modules constants below:"
msgstr "下文中，*events* 一个位掩码，指明哪些 I/O 事件要在给定的文件对象上执行等待。 它可以是以下模块级常量的组合:"

#: ../../library/selectors.rst:61
msgid "Constant"
msgstr "常量"

#: ../../library/selectors.rst:61
msgid "Meaning"
msgstr "含意"

#: ../../library/selectors.rst:63
msgid "Available for read"
msgstr "可读"

#: ../../library/selectors.rst:65
msgid "Available for write"
msgstr "可写"

#: ../../library/selectors.rst:71
msgid ""
"A :class:`SelectorKey` is a :class:`~collections.namedtuple` used to "
"associate a file object to its underlying file descriptor, selected event "
"mask and attached data. It is returned by several :class:`BaseSelector` "
"methods."
msgstr ""
":class:`SelectorKey` 是一个 "
":class:`~collections.namedtuple`，用来将文件对象关联到其下层的文件描述符、选定事件掩码和附加数据等。 它会被某些 "
":class:`BaseSelector` 方法返回。"

#: ../../library/selectors.rst:78
msgid "File object registered."
msgstr "已注册的文件对象。"

#: ../../library/selectors.rst:82
msgid "Underlying file descriptor."
msgstr "下层的文件描述符。"

#: ../../library/selectors.rst:86
msgid "Events that must be waited for on this file object."
msgstr "必须在此文件对象上被等待的事件。"

#: ../../library/selectors.rst:90
msgid ""
"Optional opaque data associated to this file object: for example, this could"
" be used to store a per-client session ID."
msgstr "可选的关联到此文件对象的不透明数据：例如，这可被用来存储各个客户端的会话 ID。"

#: ../../library/selectors.rst:96
msgid ""
"A :class:`BaseSelector` is used to wait for I/O event readiness on multiple "
"file objects. It supports file stream registration, unregistration, and a "
"method to wait for I/O events on those streams, with an optional timeout. "
"It's an abstract base class, so cannot be instantiated. Use "
":class:`DefaultSelector` instead, or one of :class:`SelectSelector`, "
":class:`KqueueSelector` etc. if you want to specifically use an "
"implementation, and your platform supports it. :class:`BaseSelector` and its"
" concrete implementations support the :term:`context manager` protocol."
msgstr ""
"一个 :class:`BaseSelector`，用来在多个文件对象上等待 I/O 事件就绪。 它支持文件流注册、注销，以及在这些流上等待 I/O "
"事件的方法。 它是一个抽象基类，因此不能被实例化。 请改用 :class:`DefaultSelector`，或者 "
":class:`SelectSelector`, :class:`KqueueSelector` 等。 "
"如果你想要指明使用某个实现，并且你的平台支持它的话。 :class:`BaseSelector` 及其具体实现支持 :term:`context "
"manager` 协议。"

#: ../../library/selectors.rst:109
msgid "Register a file object for selection, monitoring it for I/O events."
msgstr "注册一个用于选择的文件对象，在其上监视 I/O 事件。"

#: ../../library/selectors.rst:111
msgid ""
"*fileobj* is the file object to monitor.  It may either be an integer file "
"descriptor or an object with a ``fileno()`` method. *events* is a bitwise "
"mask of events to monitor. *data* is an opaque object."
msgstr ""
"*fileobj* 是要监视的文件对象。 它可以是整数形式的文件描述符或者具有 ``fileno()`` 方法的对象。 *events* "
"是要监视的事件的位掩码。 *data* 是一个不透明对象。"

#: ../../library/selectors.rst:116
msgid ""
"This returns a new :class:`SelectorKey` instance, or raises a "
":exc:`ValueError` in case of invalid event mask or file descriptor, or "
":exc:`KeyError` if the file object is already registered."
msgstr ""
"这将返回一个新的 :class:`SelectorKey` 实例，或在出现无效事件掩码或文件描述符时引发 "
":exc:`ValueError`，或在文件对象已被注册时引发 :exc:`KeyError`。"

#: ../../library/selectors.rst:123
msgid ""
"Unregister a file object from selection, removing it from monitoring. A file"
" object shall be unregistered prior to being closed."
msgstr "注销对一个文件对象的选择，移除对它的监视。 在文件对象被关闭之前应当先将其注销。"

#: ../../library/selectors.rst:126
msgid "*fileobj* must be a file object previously registered."
msgstr "*fileobj* 必须是之前已注册的文件对象。"

#: ../../library/selectors.rst:128
msgid ""
"This returns the associated :class:`SelectorKey` instance, or raises a "
":exc:`KeyError` if *fileobj* is not registered.  It will raise "
":exc:`ValueError` if *fileobj* is invalid (e.g. it has no ``fileno()`` "
"method or its ``fileno()`` method has an invalid return value)."
msgstr ""
"这将返回已关联的 :class:`SelectorKey` 实例，或者如果 *fileobj* 未注册则会引发 :exc:`KeyError`。 It "
"will raise :exc:`ValueError` 如果 *fileobj* 无效（例如它没有 ``fileno()`` 方法或其 "
"``fileno()`` 方法返回无效值）。"

#: ../../library/selectors.rst:135
msgid "Change a registered file object's monitored events or attached data."
msgstr "更改已注册文件对象所监视的事件或所附带的数据。"

#: ../../library/selectors.rst:137
msgid ""
"This is equivalent to ``BaseSelector.unregister(fileobj)`` followed by "
"``BaseSelector.register(fileobj, events, data)``, except that it can be "
"implemented more efficiently."
msgstr ""
"这等价于 ``BaseSelector.unregister(fileobj)`` 加 ``BaseSelector.register(fileobj,"
" events, data)``，区别在于它可以被更高效地实现。"

#: ../../library/selectors.rst:141
msgid ""
"This returns a new :class:`SelectorKey` instance, or raises a "
":exc:`ValueError` in case of invalid event mask or file descriptor, or "
":exc:`KeyError` if the file object is not registered."
msgstr ""
"这将返回一个新的 :class:`SelectorKey` 实例，或在出现无效事件掩码或文件描述符时引发 "
":exc:`ValueError`，或在文件对象未被注册时引发 :exc:`KeyError`。"

#: ../../library/selectors.rst:148
msgid ""
"Wait until some registered file objects become ready, or the timeout "
"expires."
msgstr "等待直到有已注册的文件对象就绪，或是超过时限。"

#: ../../library/selectors.rst:151
msgid ""
"If ``timeout > 0``, this specifies the maximum wait time, in seconds. If "
"``timeout <= 0``, the call won't block, and will report the currently ready "
"file objects. If *timeout* is ``None``, the call will block until a "
"monitored file object becomes ready."
msgstr ""
"如果 ``timeout > 0``，这指定以秒数表示的最大等待时间。 如果 ``timeout <= "
"0``，调用将不会阻塞，并将报告当前就绪的文件对象。 如果 *timeout* 为 ``None``，调用将阻塞直到某个被监视的文件对象就绪。"

#: ../../library/selectors.rst:157
msgid ""
"This returns a list of ``(key, events)`` tuples, one for each ready file "
"object."
msgstr "这将返回由 ``(key, events)`` 元组构成的列表，每项各表示一个就绪的文件对象。"

#: ../../library/selectors.rst:160
msgid ""
"*key* is the :class:`SelectorKey` instance corresponding to a ready file "
"object. *events* is a bitmask of events ready on this file object."
msgstr "*key* 是对应于就绪文件对象的 :class:`SelectorKey` 实例。 *events* 是在此文件对象上等待的事件位掩码。"

#: ../../library/selectors.rst:165
msgid ""
"This method can return before any file object becomes ready or the timeout "
"has elapsed if the current process receives a signal: in this case, an empty"
" list will be returned."
msgstr "如果当前进程收到一个信号，此方法可在任何文件对象就绪之前或超出时限时返回：在此情况下，将返回一个空列表。"

#: ../../library/selectors.rst:169
msgid ""
"The selector is now retried with a recomputed timeout when interrupted by a "
"signal if the signal handler did not raise an exception (see :pep:`475` for "
"the rationale), instead of returning an empty list of events before the "
"timeout."
msgstr ""
"现在当被某个信号中断时，如果信号处理程序没有引发异常，选择器会用重新计算的超时值进行重试（请查看 :pep:`475` "
"其理由），而不是在超时之前返回空的事件列表。"

#: ../../library/selectors.rst:177
msgid "Close the selector."
msgstr "关闭选择器。"

#: ../../library/selectors.rst:179
msgid ""
"This must be called to make sure that any underlying resource is freed. The "
"selector shall not be used once it has been closed."
msgstr "必须调用这个方法以确保下层资源会被释放。 选择器被关闭后将不可再使用。"

#: ../../library/selectors.rst:184
msgid "Return the key associated with a registered file object."
msgstr "返回关联到某个已注册文件对象的键。"

#: ../../library/selectors.rst:186
msgid ""
"This returns the :class:`SelectorKey` instance associated to this file "
"object, or raises :exc:`KeyError` if the file object is not registered."
msgstr "此方法将返回关联到文件对象的 :class:`SelectorKey` 实例，或在文件对象未注册时引发 :exc:`KeyError`。"

#: ../../library/selectors.rst:192
msgid "Return a mapping of file objects to selector keys."
msgstr "返回从文件对象到选择器键的映射。"

#: ../../library/selectors.rst:194
msgid ""
"This returns a :class:`~collections.abc.Mapping` instance mapping registered"
" file objects to their associated :class:`SelectorKey` instance."
msgstr ""
"这将返回一个将已注册文件对象映射到与其相关联的 :class:`SelectorKey` 实例的 "
":class:`~collections.abc.Mapping` 实例。"

#: ../../library/selectors.rst:201
msgid ""
"The default selector class, using the most efficient implementation "
"available on the current platform. This should be the default choice for "
"most users."
msgstr "默认的选择器类，使用当前平台上可用的最高效实现。 这应为大多数用户的默认选择。"

#: ../../library/selectors.rst:208
msgid ":func:`select.select`-based selector."
msgstr "基于 :func:`select.select` 的选择器。"

#: ../../library/selectors.rst:213
msgid ":func:`select.poll`-based selector."
msgstr "基于 :func:`select.poll` 的选择器。"

#: ../../library/selectors.rst:218
msgid ":func:`select.epoll`-based selector."
msgstr "基于 :func:`select.epoll` 的选择器。"

#: ../../library/selectors.rst:222
msgid ""
"This returns the file descriptor used by the underlying :func:`select.epoll`"
" object."
msgstr "此方法将返回由下层 :func:`select.epoll` 对象所使用的文件描述符。"

#: ../../library/selectors.rst:227
msgid ":func:`select.devpoll`-based selector."
msgstr "基于 :func:`select.devpoll` 的选择器。"

#: ../../library/selectors.rst:231
msgid ""
"This returns the file descriptor used by the underlying "
":func:`select.devpoll` object."
msgstr "此方法将返回由下层 :func:`select.devpoll` 对象所使用的文件描述符。"

#: ../../library/selectors.rst:238
msgid ":func:`select.kqueue`-based selector."
msgstr "基于 :func:`select.kqueue` 的选择器。"

#: ../../library/selectors.rst:242
msgid ""
"This returns the file descriptor used by the underlying "
":func:`select.kqueue` object."
msgstr "此方法将返回由下层 :func:`select.kqueue` 对象所使用的文件描述符。"

#: ../../library/selectors.rst:247
msgid "Examples"
msgstr "例子"

#: ../../library/selectors.rst:249
msgid "Here is a simple echo server implementation::"
msgstr "下面是一个简单的回显服务器实现::"

#: ../../library/selectors.rst:251
msgid ""
"import selectors\n"
"import socket\n"
"\n"
"sel = selectors.DefaultSelector()\n"
"\n"
"def accept(sock, mask):\n"
"    conn, addr = sock.accept()  # Should be ready\n"
"    print('accepted', conn, 'from', addr)\n"
"    conn.setblocking(False)\n"
"    sel.register(conn, selectors.EVENT_READ, read)\n"
"\n"
"def read(conn, mask):\n"
"    data = conn.recv(1000)  # Should be ready\n"
"    if data:\n"
"        print('echoing', repr(data), 'to', conn)\n"
"        conn.send(data)  # Hope it won't block\n"
"    else:\n"
"        print('closing', conn)\n"
"        sel.unregister(conn)\n"
"        conn.close()\n"
"\n"
"sock = socket.socket()\n"
"sock.bind(('localhost', 1234))\n"
"sock.listen(100)\n"
"sock.setblocking(False)\n"
"sel.register(sock, selectors.EVENT_READ, accept)\n"
"\n"
"while True:\n"
"    events = sel.select()\n"
"    for key, mask in events:\n"
"        callback = key.data\n"
"        callback(key.fileobj, mask)"
msgstr ""
"import selectors\n"
"import socket\n"
"\n"
"sel = selectors.DefaultSelector()\n"
"\n"
"def accept(sock, mask):\n"
"    conn, addr = sock.accept()  # 应当已就绪\n"
"    print('accepted', conn, 'from', addr)\n"
"    conn.setblocking(False)\n"
"    sel.register(conn, selectors.EVENT_READ, read)\n"
"\n"
"def read(conn, mask):\n"
"    data = conn.recv(1000)  # 应当已就绪\n"
"    if data:\n"
"        print('echoing', repr(data), 'to', conn)\n"
"        conn.send(data)  # 希望不会阻塞\n"
"    else:\n"
"        print('closing', conn)\n"
"        sel.unregister(conn)\n"
"        conn.close()\n"
"\n"
"sock = socket.socket()\n"
"sock.bind(('localhost', 1234))\n"
"sock.listen(100)\n"
"sock.setblocking(False)\n"
"sel.register(sock, selectors.EVENT_READ, accept)\n"
"\n"
"while True:\n"
"    events = sel.select()\n"
"    for key, mask in events:\n"
"        callback = key.data\n"
"        callback(key.fileobj, mask)"
