# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xmlrpc.server.rst:2
msgid ":mod:`xmlrpc.server` --- Basic XML-RPC servers"
msgstr ""

#: ../../library/xmlrpc.server.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/server.py`"
msgstr ""

#: ../../library/xmlrpc.server.rst:14
msgid ""
"The :mod:`xmlrpc.server` module provides a basic server framework for XML-"
"RPC servers written in Python.  Servers can either be free standing, using "
":class:`SimpleXMLRPCServer`, or embedded in a CGI environment, using "
":class:`CGIXMLRPCRequestHandler`."
msgstr ""

#: ../../library/xmlrpc.server.rst:22
msgid ""
"The :mod:`xmlrpc.server` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""

#: ../../includes/wasm-notavail.rst:3
msgid ":ref:`Availability <availability>`: not Emscripten, not WASI."
msgstr ""

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""

#: ../../library/xmlrpc.server.rst:32
msgid ""
"Create a new server instance.  This class provides methods for registration "
"of functions that can be called by the XML-RPC protocol.  The "
"*requestHandler* parameter should be a factory for request handler "
"instances; it defaults to :class:`SimpleXMLRPCRequestHandler`.  The *addr* "
"and *requestHandler* parameters are passed to the "
":class:`socketserver.TCPServer` constructor.  If *logRequests* is true (the "
"default), requests will be logged; setting this parameter to false will turn"
" off logging.   The *allow_none* and *encoding* parameters are passed on to "
":mod:`xmlrpc.client` and control the XML-RPC responses that will be returned"
" from the server. The *bind_and_activate* parameter controls whether "
":meth:`server_bind` and :meth:`server_activate` are called immediately by "
"the constructor; it defaults to true. Setting it to false allows code to "
"manipulate the *allow_reuse_address* class variable before the address is "
"bound. The *use_builtin_types* parameter is passed to the "
":func:`~xmlrpc.client.loads` function and controls which types are processed"
" when date/times values or binary data are received; it defaults to false."
msgstr ""

#: ../../library/xmlrpc.server.rst:48 ../../library/xmlrpc.server.rst:62
#: ../../library/xmlrpc.server.rst:374
msgid "The *use_builtin_types* flag was added."
msgstr ""

#: ../../library/xmlrpc.server.rst:55
msgid ""
"Create a new instance to handle XML-RPC requests in a CGI environment.  The "
"*allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client`"
" and control the XML-RPC responses that will be returned from the server. "
"The *use_builtin_types* parameter is passed to the "
":func:`~xmlrpc.client.loads` function and controls which types are processed"
" when date/times values or binary data are received; it defaults to false."
msgstr ""

#: ../../library/xmlrpc.server.rst:68
msgid ""
"Create a new request handler instance.  This request handler supports "
"``POST`` requests and modifies logging so that the *logRequests* parameter "
"to the :class:`SimpleXMLRPCServer` constructor parameter is honored."
msgstr ""

#: ../../library/xmlrpc.server.rst:76
msgid "SimpleXMLRPCServer Objects"
msgstr ""

#: ../../library/xmlrpc.server.rst:78
msgid ""
"The :class:`SimpleXMLRPCServer` class is based on "
":class:`socketserver.TCPServer` and provides a means of creating simple, "
"stand alone XML-RPC servers."
msgstr ""

#: ../../library/xmlrpc.server.rst:85 ../../library/xmlrpc.server.rst:299
msgid ""
"Register a function that can respond to XML-RPC requests.  If *name* is "
"given, it will be the method name associated with *function*, otherwise "
":attr:`function.__name__` will be used.  *name* is a string, and may contain"
" characters not legal in Python identifiers, including the period character."
msgstr ""

#: ../../library/xmlrpc.server.rst:90 ../../library/xmlrpc.server.rst:304
msgid ""
"This method can also be used as a decorator.  When used as a decorator, "
"*name* can only be given as a keyword argument to register *function* under "
"*name*.  If no *name* is given, :attr:`function.__name__` will be used."
msgstr ""

#: ../../library/xmlrpc.server.rst:94 ../../library/xmlrpc.server.rst:308
msgid ":meth:`register_function` can be used as a decorator."
msgstr ""

#: ../../library/xmlrpc.server.rst:100
msgid ""
"Register an object which is used to expose method names which have not been "
"registered using :meth:`register_function`.  If *instance* contains a "
":meth:`_dispatch` method, it is called with the requested method name and "
"the parameters from the request.  Its API is ``def _dispatch(self, method, "
"params)`` (note that *params* does not represent a variable argument list)."
"  If it calls an underlying function to perform its task, that function is "
"called as ``func(*params)``, expanding the parameter list. The return value "
"from :meth:`_dispatch` is returned to the client as the result.  If "
"*instance* does not have a :meth:`_dispatch` method, it is searched for an "
"attribute matching the name of the requested method."
msgstr ""

#: ../../library/xmlrpc.server.rst:111
msgid ""
"If the optional *allow_dotted_names* argument is true and the instance does "
"not have a :meth:`_dispatch` method, then if the requested method name "
"contains periods, each component of the method name is searched for "
"individually, with the effect that a simple hierarchical search is "
"performed.  The value found from this search is then called with the "
"parameters from the request, and the return value is passed back to the "
"client."
msgstr ""

#: ../../library/xmlrpc.server.rst:120
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this option on a secure, closed network."
msgstr ""

#: ../../library/xmlrpc.server.rst:127
msgid ""
"Registers the XML-RPC introspection functions ``system.listMethods``, "
"``system.methodHelp`` and ``system.methodSignature``."
msgstr ""

#: ../../library/xmlrpc.server.rst:133
msgid "Registers the XML-RPC multicall function system.multicall."
msgstr ""

#: ../../library/xmlrpc.server.rst:138
msgid ""
"An attribute value that must be a tuple listing valid path portions of the "
"URL for receiving XML-RPC requests.  Requests posted to other paths will "
"result in a 404 \"no such page\" HTTP error.  If this tuple is empty, all "
"paths will be considered valid. The default value is ``('/', '/RPC2')``."
msgstr ""

#: ../../library/xmlrpc.server.rst:147
msgid "SimpleXMLRPCServer Example"
msgstr ""

#: ../../library/xmlrpc.server.rst:148
msgid "Server code::"
msgstr ""

#: ../../library/xmlrpc.server.rst:182
msgid ""
"The following client code will call the methods made available by the "
"preceding server::"
msgstr ""

#: ../../library/xmlrpc.server.rst:195
msgid ""
":meth:`register_function` can also be used as a decorator. The previous "
"server example can register functions in a decorator way::"
msgstr ""

#: ../../library/xmlrpc.server.rst:226
msgid ""
"The following example included in the :file:`Lib/xmlrpc/server.py` module "
"shows a server allowing dotted names and registering a multicall function."
msgstr ""

#: ../../library/xmlrpc.server.rst:231
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this example only within a secure, closed "
"network."
msgstr ""

#: ../../library/xmlrpc.server.rst:260
msgid "This ExampleService demo can be invoked from the command line::"
msgstr ""

#: ../../library/xmlrpc.server.rst:265
msgid ""
"The client that interacts with the above server is included in "
"``Lib/xmlrpc/client.py``::"
msgstr ""

#: ../../library/xmlrpc.server.rst:285
msgid ""
"This client which interacts with the demo XMLRPC server can be invoked as::"
msgstr ""

#: ../../library/xmlrpc.server.rst:291
msgid "CGIXMLRPCRequestHandler"
msgstr ""

#: ../../library/xmlrpc.server.rst:293
msgid ""
"The :class:`CGIXMLRPCRequestHandler` class can be used to handle XML-RPC "
"requests sent to Python CGI scripts."
msgstr ""

#: ../../library/xmlrpc.server.rst:314
msgid ""
"Register an object which is used to expose method names  which have not been"
" registered using :meth:`register_function`. If  instance contains a "
":meth:`_dispatch` method, it is called with the  requested method name and "
"the parameters from the  request; the return value is returned to the client"
" as the result. If instance does not have a :meth:`_dispatch` method, it is "
"searched for an attribute matching the name of the requested method; if  the"
" requested method name contains periods, each  component of the method name "
"is searched for individually,  with the effect that a simple hierarchical "
"search is performed. The value found from this search is then called with "
"the  parameters from the request, and the return value is passed  back to "
"the client."
msgstr ""

#: ../../library/xmlrpc.server.rst:328
msgid ""
"Register the XML-RPC introspection functions  ``system.listMethods``, "
"``system.methodHelp`` and  ``system.methodSignature``."
msgstr ""

#: ../../library/xmlrpc.server.rst:334
msgid "Register the XML-RPC multicall function ``system.multicall``."
msgstr ""

#: ../../library/xmlrpc.server.rst:339
msgid ""
"Handle an XML-RPC request. If *request_text* is given, it should be the POST"
" data provided by the HTTP server,  otherwise the contents of stdin will be "
"used."
msgstr ""

#: ../../library/xmlrpc.server.rst:342
msgid "Example::"
msgstr ""

#: ../../library/xmlrpc.server.rst:358
msgid "Documenting XMLRPC server"
msgstr ""

#: ../../library/xmlrpc.server.rst:360
msgid ""
"These classes extend the above classes to serve HTML documentation in "
"response to HTTP GET requests.  Servers can either be free standing, using "
":class:`DocXMLRPCServer`, or embedded in a CGI environment, using "
":class:`DocCGIXMLRPCRequestHandler`."
msgstr ""

#: ../../library/xmlrpc.server.rst:370
msgid ""
"Create a new server instance. All parameters have the same meaning as for "
":class:`SimpleXMLRPCServer`; *requestHandler* defaults to "
":class:`DocXMLRPCRequestHandler`."
msgstr ""

#: ../../library/xmlrpc.server.rst:380
msgid "Create a new instance to handle XML-RPC requests in a CGI environment."
msgstr ""

#: ../../library/xmlrpc.server.rst:385
msgid ""
"Create a new request handler instance. This request handler supports XML-RPC"
" POST requests, documentation GET requests, and modifies logging so that the"
" *logRequests* parameter to the :class:`DocXMLRPCServer` constructor "
"parameter is honored."
msgstr ""

#: ../../library/xmlrpc.server.rst:394
msgid "DocXMLRPCServer Objects"
msgstr ""

#: ../../library/xmlrpc.server.rst:396
msgid ""
"The :class:`DocXMLRPCServer` class is derived from "
":class:`SimpleXMLRPCServer` and provides a means of creating self-"
"documenting, stand alone XML-RPC servers. HTTP POST requests are handled as "
"XML-RPC method calls. HTTP GET requests are handled by generating pydoc-"
"style HTML documentation. This allows a server to provide its own web-based "
"documentation."
msgstr ""

#: ../../library/xmlrpc.server.rst:405 ../../library/xmlrpc.server.rst:433
msgid ""
"Set the title used in the generated HTML documentation. This title will be "
"used inside the HTML \"title\" element."
msgstr ""

#: ../../library/xmlrpc.server.rst:411 ../../library/xmlrpc.server.rst:439
msgid ""
"Set the name used in the generated HTML documentation. This name will appear"
" at the top of the generated documentation inside a \"h1\" element."
msgstr ""

#: ../../library/xmlrpc.server.rst:417 ../../library/xmlrpc.server.rst:445
msgid ""
"Set the description used in the generated HTML documentation. This "
"description will appear as a paragraph, below the server name, in the "
"documentation."
msgstr ""

#: ../../library/xmlrpc.server.rst:422
msgid "DocCGIXMLRPCRequestHandler"
msgstr ""

#: ../../library/xmlrpc.server.rst:424
msgid ""
"The :class:`DocCGIXMLRPCRequestHandler` class is derived from "
":class:`CGIXMLRPCRequestHandler` and provides a means of creating self-"
"documenting, XML-RPC CGI scripts. HTTP POST requests are handled as XML-RPC "
"method calls. HTTP GET requests are handled by generating pydoc-style HTML "
"documentation. This allows a server to provide its own web-based "
"documentation."
msgstr ""
