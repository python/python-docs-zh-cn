# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/tracemalloc.rst:2
msgid ":mod:`!tracemalloc` --- Trace memory allocations"
msgstr ":mod:`!tracemalloc` --- 跟踪内存分配"

#: ../../library/tracemalloc.rst:9
msgid "**Source code:** :source:`Lib/tracemalloc.py`"
msgstr "**源代码：** :source:`Lib/tracemalloc.py`"

#: ../../library/tracemalloc.rst:13
msgid ""
"The tracemalloc module is a debug tool to trace memory blocks allocated by "
"Python. It provides the following information:"
msgstr "tracemalloc 模块是一个用于对 Python 已申请的内存块进行调试的工具。它能提供以下信息:"

#: ../../library/tracemalloc.rst:16
msgid "Traceback where an object was allocated"
msgstr "回溯对象分配内存的位置"

#: ../../library/tracemalloc.rst:17
msgid ""
"Statistics on allocated memory blocks per filename and per line number: "
"total size, number and average size of allocated memory blocks"
msgstr "按文件、按行统计 Python 的内存块分配情况: 内存块总大小、数量以及块平均大小。"

#: ../../library/tracemalloc.rst:19
msgid "Compute the differences between two snapshots to detect memory leaks"
msgstr "对比两个内存快照的差异，以便排查内存泄漏"

#: ../../library/tracemalloc.rst:21
msgid ""
"To trace most memory blocks allocated by Python, the module should be "
"started as early as possible by setting the :envvar:`PYTHONTRACEMALLOC` "
"environment variable to ``1``, or by using :option:`-X` ``tracemalloc`` "
"command line option. The :func:`tracemalloc.start` function can be called at"
" runtime to start tracing Python memory allocations."
msgstr ""
"要追踪 Python 所分配的大部分内存块，模块应当通过将 :envvar:`PYTHONTRACEMALLOC` 环境变量设置为 "
"``1``，或是通过使用 :option:`-X` ``tracemalloc`` 命令行选项来尽可能早地启动。 可以在运行时调用 "
":func:`tracemalloc.start` 函数来启动追踪 Python 内存分配。"

#: ../../library/tracemalloc.rst:27
msgid ""
"By default, a trace of an allocated memory block only stores the most recent"
" frame (1 frame). To store 25 frames at startup: set the "
":envvar:`PYTHONTRACEMALLOC` environment variable to ``25``, or use the "
":option:`-X` ``tracemalloc=25`` command line option."
msgstr ""
"在默认情况下，一个已分配内存块的追踪将只储存最新的帧 (1 帧)。 要要启动时储存 25 帧：将 :envvar:`PYTHONTRACEMALLOC`"
" 环境变量设为 ``25``，或使用 :option:`-X` ``tracemalloc=25`` 命令行选项。"

#: ../../library/tracemalloc.rst:34
msgid "Examples"
msgstr "例子"

#: ../../library/tracemalloc.rst:37
msgid "Display the top 10"
msgstr "显示前10项"

#: ../../library/tracemalloc.rst:39
msgid "Display the 10 files allocating the most memory::"
msgstr "显示内存分配最多的10个文件："

#: ../../library/tracemalloc.rst:41
msgid ""
"import tracemalloc\n"
"\n"
"tracemalloc.start()\n"
"\n"
"# ... run your application ...\n"
"\n"
"snapshot = tracemalloc.take_snapshot()\n"
"top_stats = snapshot.statistics('lineno')\n"
"\n"
"print(\"[ Top 10 ]\")\n"
"for stat in top_stats[:10]:\n"
"    print(stat)"
msgstr ""
"import tracemalloc\n"
"\n"
"tracemalloc.start()\n"
"\n"
"# ... 运行你的应用程序 ...\n"
"\n"
"snapshot = tracemalloc.take_snapshot()\n"
"top_stats = snapshot.statistics('lineno')\n"
"\n"
"print(\"[ Top 10 ]\")\n"
"for stat in top_stats[:10]:\n"
"    print(stat)"

#: ../../library/tracemalloc.rst:55 ../../library/tracemalloc.rst:225
msgid "Example of output of the Python test suite::"
msgstr "Python测试套件的输出示例："

#: ../../library/tracemalloc.rst:57
msgid ""
"[ Top 10 ]\n"
"<frozen importlib._bootstrap>:716: size=4855 KiB, count=39328, average=126 B\n"
"<frozen importlib._bootstrap>:284: size=521 KiB, count=3199, average=167 B\n"
"/usr/lib/python3.4/collections/__init__.py:368: size=244 KiB, count=2315, average=108 B\n"
"/usr/lib/python3.4/unittest/case.py:381: size=185 KiB, count=779, average=243 B\n"
"/usr/lib/python3.4/unittest/case.py:402: size=154 KiB, count=378, average=416 B\n"
"/usr/lib/python3.4/abc.py:133: size=88.7 KiB, count=347, average=262 B\n"
"<frozen importlib._bootstrap>:1446: size=70.4 KiB, count=911, average=79 B\n"
"<frozen importlib._bootstrap>:1454: size=52.0 KiB, count=25, average=2131 B\n"
"<string>:5: size=49.7 KiB, count=148, average=344 B\n"
"/usr/lib/python3.4/sysconfig.py:411: size=48.0 KiB, count=1, average=48.0 KiB"
msgstr ""
"[ Top 10 ]\n"
"<frozen importlib._bootstrap>:716: size=4855 KiB, count=39328, average=126 B\n"
"<frozen importlib._bootstrap>:284: size=521 KiB, count=3199, average=167 B\n"
"/usr/lib/python3.4/collections/__init__.py:368: size=244 KiB, count=2315, average=108 B\n"
"/usr/lib/python3.4/unittest/case.py:381: size=185 KiB, count=779, average=243 B\n"
"/usr/lib/python3.4/unittest/case.py:402: size=154 KiB, count=378, average=416 B\n"
"/usr/lib/python3.4/abc.py:133: size=88.7 KiB, count=347, average=262 B\n"
"<frozen importlib._bootstrap>:1446: size=70.4 KiB, count=911, average=79 B\n"
"<frozen importlib._bootstrap>:1454: size=52.0 KiB, count=25, average=2131 B\n"
"<string>:5: size=49.7 KiB, count=148, average=344 B\n"
"/usr/lib/python3.4/sysconfig.py:411: size=48.0 KiB, count=1, average=48.0 KiB"

#: ../../library/tracemalloc.rst:69
msgid ""
"We can see that Python loaded ``4855 KiB`` data (bytecode and constants) "
"from modules and that the :mod:`collections` module allocated ``244 KiB`` to"
" build :class:`~collections.namedtuple` types."
msgstr ""
"我们可以看到 Python 从模块载入了 ``4855 KiB`` 数据（字节码和常量）并且 :mod:`collections` 模块分配了 "
"``244 KiB`` 来构建 :class:`~collections.namedtuple` 类型。"

#: ../../library/tracemalloc.rst:73 ../../library/tracemalloc.rst:250
msgid "See :meth:`Snapshot.statistics` for more options."
msgstr "更多选项，请参见 :meth:`Snapshot.statistics`"

#: ../../library/tracemalloc.rst:77
msgid "Compute differences"
msgstr "计算差异"

#: ../../library/tracemalloc.rst:79
msgid "Take two snapshots and display the differences::"
msgstr "获取两个快照并显示差异："

#: ../../library/tracemalloc.rst:81
msgid ""
"import tracemalloc\n"
"tracemalloc.start()\n"
"# ... start your application ...\n"
"\n"
"snapshot1 = tracemalloc.take_snapshot()\n"
"# ... call the function leaking memory ...\n"
"snapshot2 = tracemalloc.take_snapshot()\n"
"\n"
"top_stats = snapshot2.compare_to(snapshot1, 'lineno')\n"
"\n"
"print(\"[ Top 10 differences ]\")\n"
"for stat in top_stats[:10]:\n"
"    print(stat)"
msgstr ""
"import tracemalloc\n"
"tracemalloc.start()\n"
"# ... 启动你的应用程序 ...\n"
"\n"
"snapshot1 = tracemalloc.take_snapshot()\n"
"# ... 调用函数泄漏内存 ...\n"
"snapshot2 = tracemalloc.take_snapshot()\n"
"\n"
"top_stats = snapshot2.compare_to(snapshot1, 'lineno')\n"
"\n"
"print(\"[ Top 10 differences ]\")\n"
"for stat in top_stats[:10]:\n"
"    print(stat)"

#: ../../library/tracemalloc.rst:95
msgid ""
"Example of output before/after running some tests of the Python test suite::"
msgstr "运行 Python 测试套件的部分测试之前/之后的输出样例::"

#: ../../library/tracemalloc.rst:97
msgid ""
"[ Top 10 differences ]\n"
"<frozen importlib._bootstrap>:716: size=8173 KiB (+4428 KiB), count=71332 (+39369), average=117 B\n"
"/usr/lib/python3.4/linecache.py:127: size=940 KiB (+940 KiB), count=8106 (+8106), average=119 B\n"
"/usr/lib/python3.4/unittest/case.py:571: size=298 KiB (+298 KiB), count=589 (+589), average=519 B\n"
"<frozen importlib._bootstrap>:284: size=1005 KiB (+166 KiB), count=7423 (+1526), average=139 B\n"
"/usr/lib/python3.4/mimetypes.py:217: size=112 KiB (+112 KiB), count=1334 (+1334), average=86 B\n"
"/usr/lib/python3.4/http/server.py:848: size=96.0 KiB (+96.0 KiB), count=1 (+1), average=96.0 KiB\n"
"/usr/lib/python3.4/inspect.py:1465: size=83.5 KiB (+83.5 KiB), count=109 (+109), average=784 B\n"
"/usr/lib/python3.4/unittest/mock.py:491: size=77.7 KiB (+77.7 KiB), count=143 (+143), average=557 B\n"
"/usr/lib/python3.4/urllib/parse.py:476: size=71.8 KiB (+71.8 KiB), count=969 (+969), average=76 B\n"
"/usr/lib/python3.4/contextlib.py:38: size=67.2 KiB (+67.2 KiB), count=126 (+126), average=546 B"
msgstr ""
"[ Top 10 differences ]\n"
"<frozen importlib._bootstrap>:716: size=8173 KiB (+4428 KiB), count=71332 (+39369), average=117 B\n"
"/usr/lib/python3.4/linecache.py:127: size=940 KiB (+940 KiB), count=8106 (+8106), average=119 B\n"
"/usr/lib/python3.4/unittest/case.py:571: size=298 KiB (+298 KiB), count=589 (+589), average=519 B\n"
"<frozen importlib._bootstrap>:284: size=1005 KiB (+166 KiB), count=7423 (+1526), average=139 B\n"
"/usr/lib/python3.4/mimetypes.py:217: size=112 KiB (+112 KiB), count=1334 (+1334), average=86 B\n"
"/usr/lib/python3.4/http/server.py:848: size=96.0 KiB (+96.0 KiB), count=1 (+1), average=96.0 KiB\n"
"/usr/lib/python3.4/inspect.py:1465: size=83.5 KiB (+83.5 KiB), count=109 (+109), average=784 B\n"
"/usr/lib/python3.4/unittest/mock.py:491: size=77.7 KiB (+77.7 KiB), count=143 (+143), average=557 B\n"
"/usr/lib/python3.4/urllib/parse.py:476: size=71.8 KiB (+71.8 KiB), count=969 (+969), average=76 B\n"
"/usr/lib/python3.4/contextlib.py:38: size=67.2 KiB (+67.2 KiB), count=126 (+126), average=546 B"

#: ../../library/tracemalloc.rst:109
msgid ""
"We can see that Python has loaded ``8173 KiB`` of module data (bytecode and "
"constants), and that this is ``4428 KiB`` more than had been loaded before "
"the tests, when the previous snapshot was taken. Similarly, the "
":mod:`linecache` module has cached ``940 KiB`` of Python source code to "
"format tracebacks, all of it since the previous snapshot."
msgstr ""
"我们可以看到 Python 已载入了 ``8173 KiB`` 模块数据（字节码和常量），并且这比测试之前，即保存前一个快照时载入的数据多出了 "
"``4428 KiB``。 类似地， :mod:`linecache` 模块已缓存 ``940 KiB`` 的 Python "
"源代码至格式回溯中，即从前一个快照开始的所有数据。"

#: ../../library/tracemalloc.rst:115
msgid ""
"If the system has little free memory, snapshots can be written on disk using"
" the :meth:`Snapshot.dump` method to analyze the snapshot offline. Then use "
"the :meth:`Snapshot.load` method reload the snapshot."
msgstr ""
"如果系统空闲内存太少，可以使用 :meth:`Snapshot.dump` 方法将快照写入磁盘来离线分析快照。 然后使用 "
":meth:`Snapshot.load` 方法重载快照。"

#: ../../library/tracemalloc.rst:121
msgid "Get the traceback of a memory block"
msgstr "获取一个内存块的溯源"

#: ../../library/tracemalloc.rst:123
msgid "Code to display the traceback of the biggest memory block::"
msgstr "找出程序中最大内存块的溯源的代码::"

#: ../../library/tracemalloc.rst:125
msgid ""
"import tracemalloc\n"
"\n"
"# Store 25 frames\n"
"tracemalloc.start(25)\n"
"\n"
"# ... run your application ...\n"
"\n"
"snapshot = tracemalloc.take_snapshot()\n"
"top_stats = snapshot.statistics('traceback')\n"
"\n"
"# pick the biggest memory block\n"
"stat = top_stats[0]\n"
"print(\"%s memory blocks: %.1f KiB\" % (stat.count, stat.size / 1024))\n"
"for line in stat.traceback.format():\n"
"    print(line)"
msgstr ""
"import tracemalloc\n"
"\n"
"# 存储 25 帧\n"
"tracemalloc.start(25)\n"
"\n"
"# ... 运行你的应用程序 ...\n"
"\n"
"snapshot = tracemalloc.take_snapshot()\n"
"top_stats = snapshot.statistics('traceback')\n"
"\n"
"# 挑出最大的内存块\n"
"stat = top_stats[0]\n"
"print(\"%s memory blocks: %.1f KiB\" % (stat.count, stat.size / 1024))\n"
"for line in stat.traceback.format():\n"
"    print(line)"

#: ../../library/tracemalloc.rst:141
msgid ""
"Example of output of the Python test suite (traceback limited to 25 "
"frames)::"
msgstr "一段Python单元测试的输出案例(限制最大25层堆栈)"

#: ../../library/tracemalloc.rst:143
msgid ""
"903 memory blocks: 870.1 KiB\n"
"  File \"<frozen importlib._bootstrap>\", line 716\n"
"  File \"<frozen importlib._bootstrap>\", line 1036\n"
"  File \"<frozen importlib._bootstrap>\", line 934\n"
"  File \"<frozen importlib._bootstrap>\", line 1068\n"
"  File \"<frozen importlib._bootstrap>\", line 619\n"
"  File \"<frozen importlib._bootstrap>\", line 1581\n"
"  File \"<frozen importlib._bootstrap>\", line 1614\n"
"  File \"/usr/lib/python3.4/doctest.py\", line 101\n"
"    import pdb\n"
"  File \"<frozen importlib._bootstrap>\", line 284\n"
"  File \"<frozen importlib._bootstrap>\", line 938\n"
"  File \"<frozen importlib._bootstrap>\", line 1068\n"
"  File \"<frozen importlib._bootstrap>\", line 619\n"
"  File \"<frozen importlib._bootstrap>\", line 1581\n"
"  File \"<frozen importlib._bootstrap>\", line 1614\n"
"  File \"/usr/lib/python3.4/test/support/__init__.py\", line 1728\n"
"    import doctest\n"
"  File \"/usr/lib/python3.4/test/test_pickletools.py\", line 21\n"
"    support.run_doctest(pickletools)\n"
"  File \"/usr/lib/python3.4/test/regrtest.py\", line 1276\n"
"    test_runner()\n"
"  File \"/usr/lib/python3.4/test/regrtest.py\", line 976\n"
"    display_failure=not verbose)\n"
"  File \"/usr/lib/python3.4/test/regrtest.py\", line 761\n"
"    match_tests=ns.match_tests)\n"
"  File \"/usr/lib/python3.4/test/regrtest.py\", line 1563\n"
"    main()\n"
"  File \"/usr/lib/python3.4/test/__main__.py\", line 3\n"
"    regrtest.main_in_temp_cwd()\n"
"  File \"/usr/lib/python3.4/runpy.py\", line 73\n"
"    exec(code, run_globals)\n"
"  File \"/usr/lib/python3.4/runpy.py\", line 160\n"
"    \"__main__\", fname, loader, pkg_name)"
msgstr ""
"903 memory blocks: 870.1 KiB\n"
"  File \"<frozen importlib._bootstrap>\", line 716\n"
"  File \"<frozen importlib._bootstrap>\", line 1036\n"
"  File \"<frozen importlib._bootstrap>\", line 934\n"
"  File \"<frozen importlib._bootstrap>\", line 1068\n"
"  File \"<frozen importlib._bootstrap>\", line 619\n"
"  File \"<frozen importlib._bootstrap>\", line 1581\n"
"  File \"<frozen importlib._bootstrap>\", line 1614\n"
"  File \"/usr/lib/python3.4/doctest.py\", line 101\n"
"    import pdb\n"
"  File \"<frozen importlib._bootstrap>\", line 284\n"
"  File \"<frozen importlib._bootstrap>\", line 938\n"
"  File \"<frozen importlib._bootstrap>\", line 1068\n"
"  File \"<frozen importlib._bootstrap>\", line 619\n"
"  File \"<frozen importlib._bootstrap>\", line 1581\n"
"  File \"<frozen importlib._bootstrap>\", line 1614\n"
"  File \"/usr/lib/python3.4/test/support/__init__.py\", line 1728\n"
"    import doctest\n"
"  File \"/usr/lib/python3.4/test/test_pickletools.py\", line 21\n"
"    support.run_doctest(pickletools)\n"
"  File \"/usr/lib/python3.4/test/regrtest.py\", line 1276\n"
"    test_runner()\n"
"  File \"/usr/lib/python3.4/test/regrtest.py\", line 976\n"
"    display_failure=not verbose)\n"
"  File \"/usr/lib/python3.4/test/regrtest.py\", line 761\n"
"    match_tests=ns.match_tests)\n"
"  File \"/usr/lib/python3.4/test/regrtest.py\", line 1563\n"
"    main()\n"
"  File \"/usr/lib/python3.4/test/__main__.py\", line 3\n"
"    regrtest.main_in_temp_cwd()\n"
"  File \"/usr/lib/python3.4/runpy.py\", line 73\n"
"    exec(code, run_globals)\n"
"  File \"/usr/lib/python3.4/runpy.py\", line 160\n"
"    \"__main__\", fname, loader, pkg_name)"

#: ../../library/tracemalloc.rst:178
msgid ""
"We can see that the most memory was allocated in the :mod:`importlib` module"
" to load data (bytecode and constants) from modules: ``870.1 KiB``. The "
"traceback is where the :mod:`importlib` loaded data most recently: on the "
"``import pdb`` line of the :mod:`doctest` module. The traceback may change "
"if a new module is loaded."
msgstr ""
"我们可以看到大部分内存都被分配到 :mod:`importlib` 模块中以便从模块中加载数据（字节码和常量）: ``870.1 KiB``。 "
"回溯位置是 :mod:`importlib` 最近加载数据的地方：在 :mod:`doctest` 模块的 ``import pdb`` 行。 "
"如果加载了新模块则回溯可能发生改变。line of the. The traceback may change if a new module is "
"loaded."

#: ../../library/tracemalloc.rst:186
msgid "Pretty top"
msgstr "美化的 top"

#: ../../library/tracemalloc.rst:188
msgid ""
"Code to display the 10 lines allocating the most memory with a pretty "
"output, ignoring ``<frozen importlib._bootstrap>`` and ``<unknown>`` files::"
msgstr ""
"使用美化输出显示分配最多内存的 10 行的代码，忽略 ``<frozen importlib._bootstrap>`` 和 ``<unknown>``"
" 文件::"

#: ../../library/tracemalloc.rst:191
msgid ""
"import linecache\n"
"import os\n"
"import tracemalloc\n"
"\n"
"def display_top(snapshot, key_type='lineno', limit=10):\n"
"    snapshot = snapshot.filter_traces((\n"
"        tracemalloc.Filter(False, \"<frozen importlib._bootstrap>\"),\n"
"        tracemalloc.Filter(False, \"<unknown>\"),\n"
"    ))\n"
"    top_stats = snapshot.statistics(key_type)\n"
"\n"
"    print(\"Top %s lines\" % limit)\n"
"    for index, stat in enumerate(top_stats[:limit], 1):\n"
"        frame = stat.traceback[0]\n"
"        print(\"#%s: %s:%s: %.1f KiB\"\n"
"              % (index, frame.filename, frame.lineno, stat.size / 1024))\n"
"        line = linecache.getline(frame.filename, frame.lineno).strip()\n"
"        if line:\n"
"            print('    %s' % line)\n"
"\n"
"    other = top_stats[limit:]\n"
"    if other:\n"
"        size = sum(stat.size for stat in other)\n"
"        print(\"%s other: %.1f KiB\" % (len(other), size / 1024))\n"
"    total = sum(stat.size for stat in top_stats)\n"
"    print(\"Total allocated size: %.1f KiB\" % (total / 1024))\n"
"\n"
"tracemalloc.start()\n"
"\n"
"# ... run your application ...\n"
"\n"
"snapshot = tracemalloc.take_snapshot()\n"
"display_top(snapshot)"
msgstr ""
"import linecache\n"
"import os\n"
"import tracemalloc\n"
"\n"
"def display_top(snapshot, key_type='lineno', limit=10):\n"
"    snapshot = snapshot.filter_traces((\n"
"        tracemalloc.Filter(False, \"<frozen importlib._bootstrap>\"),\n"
"        tracemalloc.Filter(False, \"<unknown>\"),\n"
"    ))\n"
"    top_stats = snapshot.statistics(key_type)\n"
"\n"
"    print(\"Top %s lines\" % limit)\n"
"    for index, stat in enumerate(top_stats[:limit], 1):\n"
"        frame = stat.traceback[0]\n"
"        print(\"#%s: %s:%s: %.1f KiB\"\n"
"              % (index, frame.filename, frame.lineno, stat.size / 1024))\n"
"        line = linecache.getline(frame.filename, frame.lineno).strip()\n"
"        if line:\n"
"            print('    %s' % line)\n"
"\n"
"    other = top_stats[limit:]\n"
"    if other:\n"
"        size = sum(stat.size for stat in other)\n"
"        print(\"%s other: %.1f KiB\" % (len(other), size / 1024))\n"
"    total = sum(stat.size for stat in top_stats)\n"
"    print(\"Total allocated size: %.1f KiB\" % (total / 1024))\n"
"\n"
"tracemalloc.start()\n"
"\n"
"# ... 运行你的应用程序 ...\n"
"\n"
"snapshot = tracemalloc.take_snapshot()\n"
"display_top(snapshot)"

#: ../../library/tracemalloc.rst:227
msgid ""
"Top 10 lines\n"
"#1: Lib/base64.py:414: 419.8 KiB\n"
"    _b85chars2 = [(a + b) for a in _b85chars for b in _b85chars]\n"
"#2: Lib/base64.py:306: 419.8 KiB\n"
"    _a85chars2 = [(a + b) for a in _a85chars for b in _a85chars]\n"
"#3: collections/__init__.py:368: 293.6 KiB\n"
"    exec(class_definition, namespace)\n"
"#4: Lib/abc.py:133: 115.2 KiB\n"
"    cls = super().__new__(mcls, name, bases, namespace)\n"
"#5: unittest/case.py:574: 103.1 KiB\n"
"    testMethod()\n"
"#6: Lib/linecache.py:127: 95.4 KiB\n"
"    lines = fp.readlines()\n"
"#7: urllib/parse.py:476: 71.8 KiB\n"
"    for a in _hexdig for b in _hexdig}\n"
"#8: <string>:5: 62.0 KiB\n"
"#9: Lib/_weakrefset.py:37: 60.0 KiB\n"
"    self.data = set()\n"
"#10: Lib/base64.py:142: 59.8 KiB\n"
"    _b32tab2 = [a + b for a in _b32tab for b in _b32tab]\n"
"6220 other: 3602.8 KiB\n"
"Total allocated size: 5303.1 KiB"
msgstr ""
"Top 10 lines\n"
"#1: Lib/base64.py:414: 419.8 KiB\n"
"    _b85chars2 = [(a + b) for a in _b85chars for b in _b85chars]\n"
"#2: Lib/base64.py:306: 419.8 KiB\n"
"    _a85chars2 = [(a + b) for a in _a85chars for b in _a85chars]\n"
"#3: collections/__init__.py:368: 293.6 KiB\n"
"    exec(class_definition, namespace)\n"
"#4: Lib/abc.py:133: 115.2 KiB\n"
"    cls = super().__new__(mcls, name, bases, namespace)\n"
"#5: unittest/case.py:574: 103.1 KiB\n"
"    testMethod()\n"
"#6: Lib/linecache.py:127: 95.4 KiB\n"
"    lines = fp.readlines()\n"
"#7: urllib/parse.py:476: 71.8 KiB\n"
"    for a in _hexdig for b in _hexdig}\n"
"#8: <string>:5: 62.0 KiB\n"
"#9: Lib/_weakrefset.py:37: 60.0 KiB\n"
"    self.data = set()\n"
"#10: Lib/base64.py:142: 59.8 KiB\n"
"    _b32tab2 = [a + b for a in _b32tab for b in _b32tab]\n"
"6220 other: 3602.8 KiB\n"
"Total allocated size: 5303.1 KiB"

#: ../../library/tracemalloc.rst:253
msgid "Record the current and peak size of all traced memory blocks"
msgstr "记录所有被追踪内存块的当前和峰值大小"

#: ../../library/tracemalloc.rst:255
msgid ""
"The following code computes two sums like ``0 + 1 + 2 + ...`` inefficiently,"
" by creating a list of those numbers. This list consumes a lot of memory "
"temporarily. We can use :func:`get_traced_memory` and :func:`reset_peak` to "
"observe the small memory usage after the sum is computed as well as the peak"
" memory usage during the computations::"
msgstr ""
"以下代码通过创建一个包含数字的列表来低效率地计算总计值如 ``0 + 1 + 2 + ...``。 该列表会临时消耗大量内存。 我们可以使用 "
":func:`get_traced_memory` 和 :func:`reset_peak` "
"来观察计算总计值之后的内存使用减少以及计算过程中的内存使用峰值::"

#: ../../library/tracemalloc.rst:261
msgid ""
"import tracemalloc\n"
"\n"
"tracemalloc.start()\n"
"\n"
"# Example code: compute a sum with a large temporary list\n"
"large_sum = sum(list(range(100000)))\n"
"\n"
"first_size, first_peak = tracemalloc.get_traced_memory()\n"
"\n"
"tracemalloc.reset_peak()\n"
"\n"
"# Example code: compute a sum with a small temporary list\n"
"small_sum = sum(list(range(1000)))\n"
"\n"
"second_size, second_peak = tracemalloc.get_traced_memory()\n"
"\n"
"print(f\"{first_size=}, {first_peak=}\")\n"
"print(f\"{second_size=}, {second_peak=}\")"
msgstr ""
"import tracemalloc\n"
"\n"
"tracemalloc.start()\n"
"\n"
"# 示例代码：对一个大临时列表计算总计值\n"
"large_sum = sum(list(range(100000)))\n"
"\n"
"first_size, first_peak = tracemalloc.get_traced_memory()\n"
"\n"
"tracemalloc.reset_peak()\n"
"\n"
"# 示例代码：对一个小临时列表计算总计值\n"
"small_sum = sum(list(range(1000)))\n"
"\n"
"second_size, second_peak = tracemalloc.get_traced_memory()\n"
"\n"
"print(f\"{first_size=}, {first_peak=}\")\n"
"print(f\"{second_size=}, {second_peak=}\")"

#: ../../library/tracemalloc.rst:280 ../../library/tracemalloc.rst:759
msgid "Output::"
msgstr "输出::"

#: ../../library/tracemalloc.rst:282
msgid ""
"first_size=664, first_peak=3592984\n"
"second_size=804, second_peak=29704"
msgstr ""
"first_size=664, first_peak=3592984\n"
"second_size=804, second_peak=29704"

#: ../../library/tracemalloc.rst:285
msgid ""
"Using :func:`reset_peak` ensured we could accurately record the peak during "
"the computation of ``small_sum``, even though it is much smaller than the "
"overall peak size of memory blocks since the :func:`start` call. Without the"
" call to :func:`reset_peak`, ``second_peak`` would still be the peak from "
"the computation ``large_sum`` (that is, equal to ``first_peak``). In this "
"case, both peaks are much higher than the final memory usage, and which "
"suggests we could optimise (by removing the unnecessary call to "
":class:`list`, and writing ``sum(range(...))``)."
msgstr ""
"使用 :func:`reset_peak` 将确保我们能够准确地记录 ``small_sum`` 计算期间的峰值，即使它远小于从 "
":func:`start` 调用以来内存块的总体峰值大小。 如果没有对 :func:`reset_peak` 的调用，``second_peak`` "
"将仍为计算 ``large_sum`` 时的峰值 (也就是说，等于 ``first_peak``)。 "
"在这种情况下，两个峰值都将比最终的内存使用量高得多，这表明我们可以进行优化 (通过移除不必要的对 :class:`list` 的调用，并改写为 "
"``sum(range(...))``)。"

#: ../../library/tracemalloc.rst:295
msgid "API"
msgstr "API"

#: ../../library/tracemalloc.rst:298
msgid "Functions"
msgstr "函数"

#: ../../library/tracemalloc.rst:302
msgid "Clear traces of memory blocks allocated by Python."
msgstr "清空 Python 所分配的内存块的追踪数据。"

#: ../../library/tracemalloc.rst:304
msgid "See also :func:`stop`."
msgstr "另见 :func:`stop`."

#: ../../library/tracemalloc.rst:309
msgid ""
"Get the traceback where the Python object *obj* was allocated. Return a "
":class:`Traceback` instance, or ``None`` if the :mod:`tracemalloc` module is"
" not tracing memory allocations or did not trace the allocation of the "
"object."
msgstr ""
"获取 Python 对象 *obj* 被分配位置的回溯。 返回一个 :class:`Traceback` 实例，或者如果 "
":mod:`tracemalloc` 模块未追踪任何内存分配或未追踪该对象的分配则返回 ``None``。"

#: ../../library/tracemalloc.rst:314
msgid "See also :func:`gc.get_referrers` and :func:`sys.getsizeof` functions."
msgstr "另请参阅 :func:`gc.get_referrers` 和 :func:`sys.getsizeof` 函数。"

#: ../../library/tracemalloc.rst:319
msgid "Get the maximum number of frames stored in the traceback of a trace."
msgstr "获取保存在一个追踪的回溯中的最大帧数。"

#: ../../library/tracemalloc.rst:321
msgid ""
"The :mod:`tracemalloc` module must be tracing memory allocations to get the "
"limit, otherwise an exception is raised."
msgstr ":mod:`tracemalloc` 模块必须正在追踪内存分配才能获得该限制值，否则将引发异常。"

#: ../../library/tracemalloc.rst:324
msgid "The limit is set by the :func:`start` function."
msgstr "该限制是由 :func:`start` 函数设置的。"

#: ../../library/tracemalloc.rst:329
msgid ""
"Get the current size and peak size of memory blocks traced by the "
":mod:`tracemalloc` module as a tuple: ``(current: int, peak: int)``."
msgstr ""
"获取一个元组形式的由 :mod:`tracemalloc` 模块所追踪的内存块的当前大小和峰值大小: ``(current: int, peak: "
"int)``。"

#: ../../library/tracemalloc.rst:335
msgid ""
"Set the peak size of memory blocks traced by the :mod:`tracemalloc` module "
"to the current size."
msgstr "将由 :mod:`tracemalloc` 模块所追踪的内存块的峰值大小设置为当前大小。"

#: ../../library/tracemalloc.rst:338
msgid ""
"Do nothing if the :mod:`tracemalloc` module is not tracing memory "
"allocations."
msgstr "如果 :mod:`tracemalloc` 模块未在追踪内存分配则不做任何事。"

#: ../../library/tracemalloc.rst:341
msgid ""
"This function only modifies the recorded peak size, and does not modify or "
"clear any traces, unlike :func:`clear_traces`. Snapshots taken with "
":func:`take_snapshot` before a call to :func:`reset_peak` can be "
"meaningfully compared to snapshots taken after the call."
msgstr ""
"此函数只修改已记录的峰值大小，而不会修改或清空任何追踪，这不同于 :func:`clear_traces`。 在调用 "
":func:`reset_peak` 之前使用 :func:`take_snapshot` 保存的快照可以与调用之后保存的快照进行有意义的比较。"

#: ../../library/tracemalloc.rst:346
msgid "See also :func:`get_traced_memory`."
msgstr "另请参阅 :func:`get_traced_memory`。"

#: ../../library/tracemalloc.rst:353
msgid ""
"Get the memory usage in bytes of the :mod:`tracemalloc` module used to store"
" traces of memory blocks. Return an :class:`int`."
msgstr "获取 :mod:`tracemalloc` 模块用于保存内存块追踪所使用的内存字节数。 返回一个 :class:`int`。"

#: ../../library/tracemalloc.rst:360
msgid ""
"``True`` if the :mod:`tracemalloc` module is tracing Python memory "
"allocations, ``False`` otherwise."
msgstr "如果 :mod:`tracemalloc` 模块正在追踪 Python 内存分配则返回 ``True``，否则返回 ``False``。"

#: ../../library/tracemalloc.rst:363
msgid "See also :func:`start` and :func:`stop` functions."
msgstr "另请参阅 :func:`start` 和 :func:`stop` 函数。"

#: ../../library/tracemalloc.rst:368
msgid ""
"Start tracing Python memory allocations: install hooks on Python memory "
"allocators. Collected tracebacks of traces will be limited to *nframe* "
"frames. By default, a trace of a memory block only stores the most recent "
"frame: the limit is ``1``. *nframe* must be greater or equal to ``1``."
msgstr ""
"开始追踪 Python 内存分配：在 Python 内存分配器上安装钩子。 收集的追踪回溯将被限制为 *nframe* 个帧。 "
"在默认情况下，一个内存块的追踪将只保存最近的帧：即限制为 ``1``。 *nframe* 必须大于等于 ``1``。"

#: ../../library/tracemalloc.rst:373
msgid ""
"You can still read the original number of total frames that composed the "
"traceback by looking at the :attr:`Traceback.total_nframe` attribute."
msgstr "你仍然可以通过访问 :attr:`Traceback.total_nframe` 属性来读取组成回溯的原始总帧数。"

#: ../../library/tracemalloc.rst:376
msgid ""
"Storing more than ``1`` frame is only useful to compute statistics grouped "
"by ``'traceback'`` or to compute cumulative statistics: see the "
":meth:`Snapshot.compare_to` and :meth:`Snapshot.statistics` methods."
msgstr ""
"保存 ``1`` 帧以上仅适用于计算由 ``'traceback'`` 分组的统计数据或计算累积的统计数据：请参阅 "
":meth:`Snapshot.compare_to` 和 :meth:`Snapshot.statistics` 方法。"

#: ../../library/tracemalloc.rst:380
msgid ""
"Storing more frames increases the memory and CPU overhead of the "
":mod:`tracemalloc` module. Use the :func:`get_tracemalloc_memory` function "
"to measure how much memory is used by the :mod:`tracemalloc` module."
msgstr ""
"保存更多帧会增加 :mod:`tracemalloc` 模块的内存和 CPU 开销。 请使用 "
":func:`get_tracemalloc_memory` 函数来检测 :mod:`tracemalloc` 模块消耗了多少内存。"

#: ../../library/tracemalloc.rst:384
msgid ""
"The :envvar:`PYTHONTRACEMALLOC` environment variable "
"(``PYTHONTRACEMALLOC=NFRAME``) and the :option:`-X` ``tracemalloc=NFRAME`` "
"command line option can be used to start tracing at startup."
msgstr ""
":envvar:`PYTHONTRACEMALLOC` 环境变量 (``PYTHONTRACEMALLOC=NFRAME``) 和 "
":option:`-X` ``tracemalloc=NFRAME`` 命令行选项可被用来在启动时开始追踪。"

#: ../../library/tracemalloc.rst:388
msgid ""
"See also :func:`stop`, :func:`is_tracing` and :func:`get_traceback_limit` "
"functions."
msgstr ""
"另请参阅 :func:`stop`, :func:`is_tracing` 和 :func:`get_traceback_limit` 等函数。"

#: ../../library/tracemalloc.rst:394
msgid ""
"Stop tracing Python memory allocations: uninstall hooks on Python memory "
"allocators. Also clears all previously collected traces of memory blocks "
"allocated by Python."
msgstr "停止追踪 Python 内存分配：卸载 Python 内存分配器上的钩子。 并清空之前收集的所有由 Python 分配的内存块的追踪。"

#: ../../library/tracemalloc.rst:398
msgid ""
"Call :func:`take_snapshot` function to take a snapshot of traces before "
"clearing them."
msgstr "调用 :func:`take_snapshot` 函数在清空追踪之前保存它们的快照。"

#: ../../library/tracemalloc.rst:401
msgid ""
"See also :func:`start`, :func:`is_tracing` and :func:`clear_traces` "
"functions."
msgstr "另请参阅 :func:`start`, :func:`is_tracing` 和 :func:`clear_traces` 等函数。"

#: ../../library/tracemalloc.rst:407
msgid ""
"Take a snapshot of traces of memory blocks allocated by Python. Return a new"
" :class:`Snapshot` instance."
msgstr "保存一个由 Python 分配的内存块的追踪的快照。 返回一个新的 :class:`Snapshot` 实例。"

#: ../../library/tracemalloc.rst:410
msgid ""
"The snapshot does not include memory blocks allocated before the "
":mod:`tracemalloc` module started to trace memory allocations."
msgstr "该快照不包括在 :mod:`tracemalloc` 模块开始追踪内存分配之前分配的内存块。"

#: ../../library/tracemalloc.rst:413
msgid ""
"Tracebacks of traces are limited to :func:`get_traceback_limit` frames. Use "
"the *nframe* parameter of the :func:`start` function to store more frames."
msgstr ""
"追踪的回溯被限制为 :func:`get_traceback_limit` 个帧。 可使用 :func:`start` 函数的 *nframe* "
"形参来保存更多的帧。"

#: ../../library/tracemalloc.rst:416
msgid ""
"The :mod:`tracemalloc` module must be tracing memory allocations to take a "
"snapshot, see the :func:`start` function."
msgstr ":mod:`tracemalloc` 模块必须正在追踪内存分配才能保存快照，参见 :func:`start` 函数。"

#: ../../library/tracemalloc.rst:419
msgid "See also the :func:`get_object_traceback` function."
msgstr "另请参阅 :func:`get_object_traceback` 函数。"

#: ../../library/tracemalloc.rst:423
msgid "DomainFilter"
msgstr "域过滤器"

#: ../../library/tracemalloc.rst:427
msgid "Filter traces of memory blocks by their address space (domain)."
msgstr "按地址空间（域）来过滤内存块的追踪。"

#: ../../library/tracemalloc.rst:433
msgid ""
"If *inclusive* is ``True`` (include), match memory blocks allocated in the "
"address space :attr:`domain`."
msgstr "如果 *inclusive* 为 ``True`` (包括)，则匹配分配于地址空间 :attr:`domain` 中的内存块。"

#: ../../library/tracemalloc.rst:436
msgid ""
"If *inclusive* is ``False`` (exclude), match memory blocks not allocated in "
"the address space :attr:`domain`."
msgstr "如果 *inclusive* 为 ``False`` (排除)，则匹配不是分配于地址空间 :attr:`domain` 中的内存块。"

#: ../../library/tracemalloc.rst:441 ../../library/tracemalloc.rst:693
msgid "Address space of a memory block (``int``). Read-only property."
msgstr "内存块的地址空间 (``int``)。 只读的特征属性。 Read-only property."

#: ../../library/tracemalloc.rst:445
msgid "Filter"
msgstr "过滤器"

#: ../../library/tracemalloc.rst:449
msgid "Filter on traces of memory blocks."
msgstr "对内存块的跟踪进行筛选。"

#: ../../library/tracemalloc.rst:451
msgid ""
"See the :func:`fnmatch.fnmatch` function for the syntax of "
"*filename_pattern*. The ``'.pyc'`` file extension is replaced with "
"``'.py'``."
msgstr ""
"请参阅 :func:`fnmatch.fnmatch` 函数来了解 *filename_pattern* 的语法。 ``'.pyc'`` 文件扩展名以 "
"``'.py'`` 替换。"

#: ../../library/tracemalloc.rst:455
msgid "Examples:"
msgstr "示例："

#: ../../library/tracemalloc.rst:457
msgid ""
"``Filter(True, subprocess.__file__)`` only includes traces of the "
":mod:`subprocess` module"
msgstr "``Filter(True, subprocess.__file__)`` 只包括 :mod:`subprocess` 模块的追踪数据"

#: ../../library/tracemalloc.rst:459
msgid ""
"``Filter(False, tracemalloc.__file__)`` excludes traces of the "
":mod:`tracemalloc` module"
msgstr ""
"``Filter(False, tracemalloc.__file__)`` 排除了 :mod:`tracemalloc` 模块的追踪数据"

#: ../../library/tracemalloc.rst:461
msgid "``Filter(False, \"<unknown>\")`` excludes empty tracebacks"
msgstr "``Filter(False, \"<unknown>\")`` 排除了空的回溯信息"

#: ../../library/tracemalloc.rst:464
msgid "The ``'.pyo'`` file extension is no longer replaced with ``'.py'``."
msgstr "``'.pyo'`` 文件扩展名不会再被替换为 ``'.py'``。"

#: ../../library/tracemalloc.rst:467 ../../library/tracemalloc.rst:688
msgid "Added the :attr:`domain` attribute."
msgstr "增加了 :attr:`domain` 属性。"

#: ../../library/tracemalloc.rst:473
msgid "Address space of a memory block (``int`` or ``None``)."
msgstr "内存块的地址空间 (``int`` 或 ``None``)。"

#: ../../library/tracemalloc.rst:475 ../../library/tracemalloc.rst:695
msgid ""
"tracemalloc uses the domain ``0`` to trace memory allocations made by "
"Python. C extensions can use other domains to trace other resources."
msgstr ""
"tracemalloc 使用 ``0`` 号域来追踪 Python 的内存分配操作。 C 扩展可以使用其他域来追踪其他资源。extensions can"
" use other domains to trace other resources."

#: ../../library/tracemalloc.rst:480
msgid ""
"If *inclusive* is ``True`` (include), only match memory blocks allocated in "
"a file with a name matching :attr:`filename_pattern` at line number "
":attr:`lineno`."
msgstr ""
"如果 *inclusive* 为 ``True`` (包括)，则只匹配名称与 :attr:`filename_pattern` 匹配的文件在行号为 "
":attr:`lineno` 的位置上分配的内存块。"

#: ../../library/tracemalloc.rst:484
msgid ""
"If *inclusive* is ``False`` (exclude), ignore memory blocks allocated in a "
"file with a name matching :attr:`filename_pattern` at line number "
":attr:`lineno`."
msgstr ""
"如果 *inclusive* 为 ``False`` (排除)，则忽略名称与 :attr:`filename_pattern` 匹配的文件在行号为 "
":attr:`lineno` 的位置上分配的内存块。"

#: ../../library/tracemalloc.rst:490
msgid ""
"Line number (``int``) of the filter. If *lineno* is ``None``, the filter "
"matches any line number."
msgstr "过滤器的行号 (``int``)。 如果 *lineno* 为 ``None``，则该过滤器将匹配任意行号。"

#: ../../library/tracemalloc.rst:495
msgid "Filename pattern of the filter (``str``). Read-only property."
msgstr "过滤器的文件名模型 (``str``)。 只读的特征属性。"

#: ../../library/tracemalloc.rst:499
msgid ""
"If *all_frames* is ``True``, all frames of the traceback are checked. If "
"*all_frames* is ``False``, only the most recent frame is checked."
msgstr ""
"如果 *all_frames* 为 ``True``，则回溯的所有帧都会被检查。 如果 *all_frames* 为 "
"``False``，则只有最近的帧会被检查。"

#: ../../library/tracemalloc.rst:502
msgid ""
"This attribute has no effect if the traceback limit is ``1``.  See the "
":func:`get_traceback_limit` function and :attr:`Snapshot.traceback_limit` "
"attribute."
msgstr ""
"如果回溯限制为 ``1`` 则该属性将没有效果。 参见 :func:`get_traceback_limit` 函数和 "
":attr:`Snapshot.traceback_limit` 属性。"

#: ../../library/tracemalloc.rst:508
msgid "Frame"
msgstr "帧"

#: ../../library/tracemalloc.rst:512
msgid "Frame of a traceback."
msgstr "回溯的帧。"

#: ../../library/tracemalloc.rst:514
msgid ""
"The :class:`Traceback` class is a sequence of :class:`Frame` instances."
msgstr ":class:`Traceback` 类是一个 :class:`Frame` 实例的序列。instances."

#: ../../library/tracemalloc.rst:518
msgid "Filename (``str``)."
msgstr "文件名（``字符串``）"

#: ../../library/tracemalloc.rst:522
msgid "Line number (``int``)."
msgstr "行号（``整形``）"

#: ../../library/tracemalloc.rst:526
msgid "Snapshot"
msgstr "快照"

#: ../../library/tracemalloc.rst:530
msgid "Snapshot of traces of memory blocks allocated by Python."
msgstr "由 Python 分配的内存块的追踪的快照。"

#: ../../library/tracemalloc.rst:532
msgid "The :func:`take_snapshot` function creates a snapshot instance."
msgstr ":func:`take_snapshot` 函数创建一个快照实例。"

#: ../../library/tracemalloc.rst:536
msgid ""
"Compute the differences with an old snapshot. Get statistics as a sorted "
"list of :class:`StatisticDiff` instances grouped by *key_type*."
msgstr ""
"计算与某个旧快照的差异。 获取按 *key_type* 分组的 :class:`StatisticDiff` 实例的已排序列表形式的统计信息。"

#: ../../library/tracemalloc.rst:539
msgid ""
"See the :meth:`Snapshot.statistics` method for *key_type* and *cumulative* "
"parameters."
msgstr "请参阅 :meth:`Snapshot.statistics` 方法了解 *key_type* 和 *cumulative* 形参。"

#: ../../library/tracemalloc.rst:542
msgid ""
"The result is sorted from the biggest to the smallest by: absolute value of "
":attr:`StatisticDiff.size_diff`, :attr:`StatisticDiff.size`, absolute value "
"of :attr:`StatisticDiff.count_diff`, :attr:`Statistic.count` and then by "
":attr:`StatisticDiff.traceback`."
msgstr ""
"结果将按以下值从大到小排序: :attr:`StatisticDiff.size_diff` 的绝对值, "
":attr:`StatisticDiff.size`, :attr:`StatisticDiff.count_diff` 的绝对值, "
":attr:`Statistic.count` 然后是 :attr:`StatisticDiff.traceback`。"

#: ../../library/tracemalloc.rst:550
msgid "Write the snapshot into a file."
msgstr "将快照写入文件"

#: ../../library/tracemalloc.rst:552
msgid "Use :meth:`load` to reload the snapshot."
msgstr "使用 :meth:`load` 重载快照。"

#: ../../library/tracemalloc.rst:557
msgid ""
"Create a new :class:`Snapshot` instance with a filtered :attr:`traces` "
"sequence, *filters* is a list of :class:`DomainFilter` and :class:`Filter` "
"instances.  If *filters* is an empty list, return a new :class:`Snapshot` "
"instance with a copy of the traces."
msgstr ""
"使用已过滤的 :attr:`traces` 序列新建一个 :class:`Snapshot` 实例，*filters* 是 "
":class:`DomainFilter` 和 :class:`Filter` 实例的列表。 如果 *filters* "
"为空列表，则返回一个包含追踪的副本的新的 :class:`Snapshot` 实例。"

#: ../../library/tracemalloc.rst:562
msgid ""
"All inclusive filters are applied at once, a trace is ignored if no "
"inclusive filters match it. A trace is ignored if at least one exclusive "
"filter matches it."
msgstr "包括的所有过滤器将同时被应用，一个追踪如果没有任何包括的过滤器与其匹配则会被忽略。 一个追踪如果有至少一个排除的过滤器与其匹配将会被忽略。"

#: ../../library/tracemalloc.rst:566
msgid ":class:`DomainFilter` instances are now also accepted in *filters*."
msgstr ":class:`DomainFilter` 实例现在同样被 *filters* 所接受。"

#: ../../library/tracemalloc.rst:572
msgid "Load a snapshot from a file."
msgstr "从文件载入快照。"

#: ../../library/tracemalloc.rst:574
msgid "See also :meth:`dump`."
msgstr "另见 :meth:`dump`."

#: ../../library/tracemalloc.rst:579
msgid ""
"Get statistics as a sorted list of :class:`Statistic` instances grouped by "
"*key_type*:"
msgstr "获取 :class:`Statistic` 信息列表，按 *key_type* 分组排序："

#: ../../library/tracemalloc.rst:583
msgid "key_type"
msgstr "key_type"

#: ../../library/tracemalloc.rst:583
msgid "description"
msgstr "description"

#: ../../library/tracemalloc.rst:585
msgid "``'filename'``"
msgstr "``'filename'``"

#: ../../library/tracemalloc.rst:585
msgid "filename"
msgstr "文件名"

#: ../../library/tracemalloc.rst:586
msgid "``'lineno'``"
msgstr "``'lineno'``"

#: ../../library/tracemalloc.rst:586
msgid "filename and line number"
msgstr "文件名和行号"

#: ../../library/tracemalloc.rst:587
msgid "``'traceback'``"
msgstr "``'traceback'``"

#: ../../library/tracemalloc.rst:587
msgid "traceback"
msgstr "回溯"

#: ../../library/tracemalloc.rst:590
msgid ""
"If *cumulative* is ``True``, cumulate size and count of memory blocks of all"
" frames of the traceback of a trace, not only the most recent frame. The "
"cumulative mode can only be used with *key_type* equals to ``'filename'`` "
"and ``'lineno'``."
msgstr ""
"如果 *cumulative* 为 ``True``，则累积一个追踪的回溯的所有帧的内存块的大小和数量，而不只是最近的帧。 累积模式只能在 "
"*key_type* 等于 ``'filename'`` 和 ``'lineno'`` 的情况下使用。"

#: ../../library/tracemalloc.rst:595
msgid ""
"The result is sorted from the biggest to the smallest by: "
":attr:`Statistic.size`, :attr:`Statistic.count` and then by "
":attr:`Statistic.traceback`."
msgstr ""
"结果将按以下值从大到小排序: :attr:`Statistic.size`, :attr:`Statistic.count` 然后是 "
":attr:`Statistic.traceback`。"

#: ../../library/tracemalloc.rst:602
msgid ""
"Maximum number of frames stored in the traceback of :attr:`traces`: result "
"of the :func:`get_traceback_limit` when the snapshot was taken."
msgstr ""
"保存在 :attr:`traces` 的回溯中的帧的最大数量：当快照被保存时 :func:`get_traceback_limit` 的结果。"

#: ../../library/tracemalloc.rst:607
msgid ""
"Traces of all memory blocks allocated by Python: sequence of :class:`Trace` "
"instances."
msgstr "由 Python 分配的所有内存块的追踪: :class:`Trace` 实例的序列。"

#: ../../library/tracemalloc.rst:610
msgid ""
"The sequence has an undefined order. Use the :meth:`Snapshot.statistics` "
"method to get a sorted list of statistics."
msgstr "该序列的顺序是未定义的。 请使用 :meth:`Snapshot.statistics` 方法来获取统计信息的已排序列表。"

#: ../../library/tracemalloc.rst:615
msgid "Statistic"
msgstr "统计"

#: ../../library/tracemalloc.rst:619
msgid "Statistic on memory allocations."
msgstr "统计内存分配"

#: ../../library/tracemalloc.rst:621
msgid ""
":func:`Snapshot.statistics` returns a list of :class:`Statistic` instances."
msgstr ":func:`Snapshot.statistics` 返回 :class:`Statistic` 实例的列表。."

#: ../../library/tracemalloc.rst:623
msgid "See also the :class:`StatisticDiff` class."
msgstr "参见 :class:`StatisticDiff` 类。"

#: ../../library/tracemalloc.rst:627
msgid "Number of memory blocks (``int``)."
msgstr "内存块数（``整形``）。"

#: ../../library/tracemalloc.rst:631
msgid "Total size of memory blocks in bytes (``int``)."
msgstr "以字节数表示的内存块总计大小 (``int``)。"

#: ../../library/tracemalloc.rst:635 ../../library/tracemalloc.rst:704
msgid ""
"Traceback where the memory block was allocated, :class:`Traceback` instance."
msgstr "内存块分配位置的回溯，:class:`Traceback` 实例。"

#: ../../library/tracemalloc.rst:640
msgid "StatisticDiff"
msgstr "StatisticDiff"

#: ../../library/tracemalloc.rst:644
msgid ""
"Statistic difference on memory allocations between an old and a new "
":class:`Snapshot` instance."
msgstr "在旧的和新的 :class:`Snapshot` 实例之间内存分配上的统计差异。"

#: ../../library/tracemalloc.rst:647
msgid ""
":func:`Snapshot.compare_to` returns a list of :class:`StatisticDiff` "
"instances. See also the :class:`Statistic` class."
msgstr ""
":func:`Snapshot.compare_to` 返回一个 :class:`StatisticDiff` 实例的列表。 另请参看 "
":class:`Statistic` 类。"

#: ../../library/tracemalloc.rst:652
msgid ""
"Number of memory blocks in the new snapshot (``int``): ``0`` if the memory "
"blocks have been released in the new snapshot."
msgstr "新快照中的内存块数量 (``int``): 如果在新快照中内存块已被释放则为 ``0``。"

#: ../../library/tracemalloc.rst:657
msgid ""
"Difference of number of memory blocks between the old and the new snapshots "
"(``int``): ``0`` if the memory blocks have been allocated in the new "
"snapshot."
msgstr "在旧的新的快照之间内存块数量之差 (``int``): 如果在新快照中内存块已被分配则为 ``0``。"

#: ../../library/tracemalloc.rst:663
msgid ""
"Total size of memory blocks in bytes in the new snapshot (``int``): ``0`` if"
" the memory blocks have been released in the new snapshot."
msgstr "新快速中以字节数表示的内存块总计大小 (``int``): 如果在新快照中内存块已被释放则为 ``0``。"

#: ../../library/tracemalloc.rst:668
msgid ""
"Difference of total size of memory blocks in bytes between the old and the "
"new snapshots (``int``): ``0`` if the memory blocks have been allocated in "
"the new snapshot."
msgstr "在旧的新的快照之间以字节数表示的内存块总计大小之差 (``int``): 如果在新快照中内存块已被分配则为 ``0``。"

#: ../../library/tracemalloc.rst:674
msgid ""
"Traceback where the memory blocks were allocated, :class:`Traceback` "
"instance."
msgstr "内存块分配位置的回溯，:class:`Traceback` 实例。"

#: ../../library/tracemalloc.rst:679
msgid "Trace"
msgstr "跟踪"

#: ../../library/tracemalloc.rst:683
msgid "Trace of a memory block."
msgstr "一个内存块的跟踪信息。"

#: ../../library/tracemalloc.rst:685
msgid ""
"The :attr:`Snapshot.traces` attribute is a sequence of :class:`Trace` "
"instances."
msgstr ":attr:`Snapshot.traces` 属性是一个 :class:`Trace` 实例的序列。"

#: ../../library/tracemalloc.rst:700
msgid "Size of the memory block in bytes (``int``)."
msgstr "以字节数表示的内存块大小 (``int``)。"

#: ../../library/tracemalloc.rst:709
msgid "Traceback"
msgstr "回溯"

#: ../../library/tracemalloc.rst:713
msgid ""
"Sequence of :class:`Frame` instances sorted from the oldest frame to the "
"most recent frame."
msgstr ":class:`Frame` 实例的序列将按从最旧的帧到最新的帧排序。"

#: ../../library/tracemalloc.rst:716
msgid ""
"A traceback contains at least ``1`` frame. If the ``tracemalloc`` module "
"failed to get a frame, the filename ``\"<unknown>\"`` at line number ``0`` "
"is used."
msgstr ""
"一个回溯包含至少 ``1`` 个帧。 如果 ``tracemalloc`` 模块无法获取帧，则会使用文件名 ``\"<unknown>\"`` 和行号 "
"``0``。"

#: ../../library/tracemalloc.rst:720
msgid ""
"When a snapshot is taken, tracebacks of traces are limited to "
":func:`get_traceback_limit` frames. See the :func:`take_snapshot` function. "
"The original number of frames of the traceback is stored in the "
":attr:`Traceback.total_nframe` attribute. That allows to know if a traceback"
" has been truncated by the traceback limit."
msgstr ""
"当保存一个快照时，追踪的回溯被限制为 :func:`get_traceback_limit` 个帧。 参见 :func:`take_snapshot` "
"函数。 回溯的原始帧数存放在 :attr:`Traceback.total_nframe` 属性中。 这可以让人了解一个回溯是否因回溯限制而被截断。"

#: ../../library/tracemalloc.rst:726
msgid ""
"The :attr:`Trace.traceback` attribute is an instance of :class:`Traceback` "
"instance."
msgstr ":attr:`Trace.traceback` 属性是一个 :class:`Traceback` 对象的实例。"

#: ../../library/tracemalloc.rst:729
msgid ""
"Frames are now sorted from the oldest to the most recent, instead of most "
"recent to oldest."
msgstr "现在帧的排序是从最旧到最新，而不是从最新到最旧。"

#: ../../library/tracemalloc.rst:734
msgid ""
"Total number of frames that composed the traceback before truncation. This "
"attribute can be set to ``None`` if the information is not available."
msgstr "在截断之前组成回溯的总帧数。 如果此信息不可用则该属性可被设为 ``None``。"

#: ../../library/tracemalloc.rst:738
msgid "The :attr:`Traceback.total_nframe` attribute was added."
msgstr "增加了 :attr:`Traceback.total_nframe` 属性。"

#: ../../library/tracemalloc.rst:743
msgid ""
"Format the traceback as a list of lines. Use the :mod:`linecache` module to "
"retrieve lines from the source code. If *limit* is set, format the *limit* "
"most recent frames if *limit* is positive. Otherwise, format the "
"``abs(limit)`` oldest frames. If *most_recent_first* is ``True``, the order "
"of the formatted frames is reversed, returning the most recent frame first "
"instead of last."
msgstr ""
"将回溯格式化为由行组成的列表。 使用 :mod:`linecache` 模块从源代码提取行。 如果设置了 *limit*，则当 *limit* "
"为正值时将格式化 *limit* 个最新的帧。 在其他情况下，则格式化 ``abs(limit)`` 个最新的帧。 如果 "
"*most_recent_first* 为 ``True``，则将反转已格式化帧的顺序，首先返回最新的帧而不是最旧的。"

#: ../../library/tracemalloc.rst:750
msgid ""
"Similar to the :func:`traceback.format_tb` function, except that "
":meth:`.format` does not include newlines."
msgstr "类似于 :func:`traceback.format_tb` 函数，不同之处是 :meth:`.format` 不包括换行符。"

#: ../../library/tracemalloc.rst:753
msgid "Example::"
msgstr "示例::"

#: ../../library/tracemalloc.rst:755
msgid ""
"print(\"Traceback (most recent call first):\")\n"
"for line in traceback:\n"
"    print(line)"
msgstr ""
"print(\"Traceback (most recent call first):\")\n"
"for line in traceback:\n"
"    print(line)"

#: ../../library/tracemalloc.rst:761
msgid ""
"Traceback (most recent call first):\n"
"  File \"test.py\", line 9\n"
"    obj = Object()\n"
"  File \"test.py\", line 12\n"
"    tb = tracemalloc.get_object_traceback(f())"
msgstr ""
"Traceback (most recent call first):\n"
"  File \"test.py\", line 9\n"
"    obj = Object()\n"
"  File \"test.py\", line 12\n"
"    tb = tracemalloc.get_object_traceback(f())"
