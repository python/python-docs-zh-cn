# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fileinput.rst:2
msgid ":mod:`fileinput` --- Iterate over lines from multiple input streams"
msgstr ""

#: ../../library/fileinput.rst:10
msgid "**Source code:** :source:`Lib/fileinput.py`"
msgstr ""

#: ../../library/fileinput.rst:14
msgid ""
"This module implements a helper class and functions to quickly write a loop "
"over standard input or a list of files. If you just want to read or write "
"one file see :func:`open`."
msgstr ""

#: ../../library/fileinput.rst:18
msgid "The typical use is::"
msgstr ""

#: ../../library/fileinput.rst:24
msgid ""
"This iterates over the lines of all files listed in ``sys.argv[1:]``, "
"defaulting to ``sys.stdin`` if the list is empty.  If a filename is ``'-'``,"
" it is also replaced by ``sys.stdin`` and the optional arguments *mode* and "
"*openhook* are ignored.  To specify an alternative list of filenames, pass "
"it as the first argument to :func:`.input`.  A single file name is also "
"allowed."
msgstr ""

#: ../../library/fileinput.rst:30
msgid ""
"All files are opened in text mode by default, but you can override this by "
"specifying the *mode* parameter in the call to :func:`.input` or "
":class:`FileInput`.  If an I/O error occurs during opening or reading a "
"file, :exc:`OSError` is raised."
msgstr ""

#: ../../library/fileinput.rst:35
msgid ""
":exc:`IOError` used to be raised; it is now an alias of :exc:`OSError`."
msgstr ""

#: ../../library/fileinput.rst:38
msgid ""
"If ``sys.stdin`` is used more than once, the second and further use will "
"return no lines, except perhaps for interactive use, or if it has been "
"explicitly reset (e.g. using ``sys.stdin.seek(0)``)."
msgstr ""

#: ../../library/fileinput.rst:42
msgid ""
"Empty files are opened and immediately closed; the only time their presence "
"in the list of filenames is noticeable at all is when the last file opened "
"is empty."
msgstr ""

#: ../../library/fileinput.rst:46
msgid ""
"Lines are returned with any newlines intact, which means that the last line "
"in a file may not have one."
msgstr ""

#: ../../library/fileinput.rst:49
msgid ""
"You can control how files are opened by providing an opening hook via the "
"*openhook* parameter to :func:`fileinput.input` or :class:`FileInput()`. The"
" hook must be a function that takes two arguments, *filename* and *mode*, "
"and returns an accordingly opened file-like object. Two useful hooks are "
"already provided by this module."
msgstr ""

#: ../../library/fileinput.rst:55
msgid "The following function is the primary interface of this module:"
msgstr ""

#: ../../library/fileinput.rst:60
msgid ""
"Create an instance of the :class:`FileInput` class.  The instance will be "
"used as global state for the functions of this module, and is also returned "
"to use during iteration.  The parameters to this function will be passed "
"along to the constructor of the :class:`FileInput` class."
msgstr ""

#: ../../library/fileinput.rst:65
msgid ""
"The :class:`FileInput` instance can be used as a context manager in the "
":keyword:`with` statement.  In this example, *input* is closed after the "
":keyword:`!with` statement is exited, even if an exception occurs::"
msgstr ""

#: ../../library/fileinput.rst:73 ../../library/fileinput.rst:166
msgid "Can be used as a context manager."
msgstr ""

#: ../../library/fileinput.rst:76
msgid "The keyword parameters *mode* and *openhook* are now keyword-only."
msgstr ""

#: ../../library/fileinput.rst:80
msgid ""
"The following functions use the global state created by "
":func:`fileinput.input`; if there is no active state, :exc:`RuntimeError` is"
" raised."
msgstr ""

#: ../../library/fileinput.rst:86
msgid ""
"Return the name of the file currently being read.  Before the first line has"
" been read, returns ``None``."
msgstr ""

#: ../../library/fileinput.rst:92
msgid ""
"Return the integer \"file descriptor\" for the current file. When no file is"
" opened (before the first line and between files), returns ``-1``."
msgstr ""

#: ../../library/fileinput.rst:98
msgid ""
"Return the cumulative line number of the line that has just been read.  "
"Before the first line has been read, returns ``0``.  After the last line of "
"the last file has been read, returns the line number of that line."
msgstr ""

#: ../../library/fileinput.rst:105
msgid ""
"Return the line number in the current file.  Before the first line has been "
"read, returns ``0``.  After the last line of the last file has been read, "
"returns the line number of that line within the file."
msgstr ""

#: ../../library/fileinput.rst:112
msgid ""
"Return ``True`` if the line just read is the first line of its file, "
"otherwise return ``False``."
msgstr ""

#: ../../library/fileinput.rst:118
msgid ""
"Return ``True`` if the last line was read from ``sys.stdin``, otherwise "
"return ``False``."
msgstr ""

#: ../../library/fileinput.rst:124
msgid ""
"Close the current file so that the next iteration will read the first line "
"from the next file (if any); lines not read from the file will not count "
"towards the cumulative line count.  The filename is not changed until after "
"the first line of the next file has been read.  Before the first line has "
"been read, this function has no effect; it cannot be used to skip the first "
"file.  After the last line of the last file has been read, this function has"
" no effect."
msgstr ""

#: ../../library/fileinput.rst:134
msgid "Close the sequence."
msgstr ""

#: ../../library/fileinput.rst:136
msgid ""
"The class which implements the sequence behavior provided by the module is "
"available for subclassing as well:"
msgstr ""

#: ../../library/fileinput.rst:142
msgid ""
"Class :class:`FileInput` is the implementation; its methods "
":meth:`filename`, :meth:`fileno`, :meth:`lineno`, :meth:`filelineno`, "
":meth:`isfirstline`, :meth:`isstdin`, :meth:`nextfile` and :meth:`close` "
"correspond to the functions of the same name in the module. In addition it "
"has a :meth:`~io.TextIOBase.readline` method which returns the next input "
"line, and a :meth:`__getitem__` method which implements the sequence "
"behavior. The sequence must be accessed in strictly sequential order; random"
" access and :meth:`~io.TextIOBase.readline` cannot be mixed."
msgstr ""

#: ../../library/fileinput.rst:151
msgid ""
"With *mode* you can specify which file mode will be passed to :func:`open`. "
"It must be one of ``'r'``, ``'rU'``, ``'U'`` and ``'rb'``."
msgstr ""

#: ../../library/fileinput.rst:154
msgid ""
"The *openhook*, when given, must be a function that takes two arguments, "
"*filename* and *mode*, and returns an accordingly opened file-like object. "
"You cannot use *inplace* and *openhook* together."
msgstr ""

#: ../../library/fileinput.rst:158
msgid ""
"A :class:`FileInput` instance can be used as a context manager in the "
":keyword:`with` statement.  In this example, *input* is closed after the "
":keyword:`!with` statement is exited, even if an exception occurs::"
msgstr ""

#: ../../library/fileinput.rst:169
msgid "The ``'rU'`` and ``'U'`` modes."
msgstr ""

#: ../../library/fileinput.rst:172
msgid "Support for :meth:`__getitem__` method is deprecated."
msgstr ""

#: ../../library/fileinput.rst:175
msgid "The keyword parameter *mode* and *openhook* are now keyword-only."
msgstr ""

#: ../../library/fileinput.rst:180
msgid ""
"**Optional in-place filtering:** if the keyword argument ``inplace=True`` is"
" passed to :func:`fileinput.input` or to the :class:`FileInput` constructor,"
" the file is moved to a backup file and standard output is directed to the "
"input file (if a file of the same name as the backup file already exists, it"
" will be replaced silently).  This makes it possible to write a filter that "
"rewrites its input file in place.  If the *backup* parameter is given "
"(typically as ``backup='.<some extension>'``), it specifies the extension "
"for the backup file, and the backup file remains around; by default, the "
"extension is ``'.bak'`` and it is deleted when the output file is closed.  "
"In-place filtering is disabled when standard input is read."
msgstr ""

#: ../../library/fileinput.rst:192
msgid "The two following opening hooks are provided by this module:"
msgstr ""

#: ../../library/fileinput.rst:196
msgid ""
"Transparently opens files compressed with gzip and bzip2 (recognized by the "
"extensions ``'.gz'`` and ``'.bz2'``) using the :mod:`gzip` and :mod:`bz2` "
"modules.  If the filename extension is not ``'.gz'`` or ``'.bz2'``, the file"
" is opened normally (ie, using :func:`open` without any decompression)."
msgstr ""

#: ../../library/fileinput.rst:201
msgid ""
"Usage example:  ``fi = "
"fileinput.FileInput(openhook=fileinput.hook_compressed)``"
msgstr ""

#: ../../library/fileinput.rst:206
msgid ""
"Returns a hook which opens each file with :func:`open`, using the given "
"*encoding* and *errors* to read the file."
msgstr ""

#: ../../library/fileinput.rst:209
msgid ""
"Usage example: ``fi = "
"fileinput.FileInput(openhook=fileinput.hook_encoded(\"utf-8\", "
"\"surrogateescape\"))``"
msgstr ""

#: ../../library/fileinput.rst:213
msgid "Added the optional *errors* parameter."
msgstr ""
