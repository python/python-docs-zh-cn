# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fileinput.rst:2
msgid ":mod:`fileinput` --- Iterate over lines from multiple input streams"
msgstr ":mod:`fileinput` --- 迭代来自多个输入流的行"

#: ../../library/fileinput.rst:10
msgid "**Source code:** :source:`Lib/fileinput.py`"
msgstr "**源代码:** :source:`Lib/fileinput.py`"

#: ../../library/fileinput.rst:14
msgid ""
"This module implements a helper class and functions to quickly write a loop "
"over standard input or a list of files. If you just want to read or write "
"one file see :func:`open`."
msgstr "此模块实现了一个辅助类和一些函数用来快速编写访问标准输入或文件列表的循环。 如果你只想要读写一个文件请参阅 :func:`open`。"

#: ../../library/fileinput.rst:18
msgid "The typical use is::"
msgstr "典型用法为::"

#: ../../library/fileinput.rst:24
msgid ""
"This iterates over the lines of all files listed in ``sys.argv[1:]``, "
"defaulting to ``sys.stdin`` if the list is empty.  If a filename is ``'-'``,"
" it is also replaced by ``sys.stdin`` and the optional arguments *mode* and "
"*openhook* are ignored.  To specify an alternative list of filenames, pass "
"it as the first argument to :func:`.input`.  A single file name is also "
"allowed."
msgstr ""
"此程序会迭代 ``sys.argv[1:]`` 中列出的所有文件内的行，如果列表为空则会使用 ``sys.stdin``。 如果有一个文件名为 "
"``'-'``，它也会被替换为 ``sys.stdin`` 并且可选参数 *mode* 和 *openhook* 会被忽略。 "
"要指定替代文件列表，请将其作为第一个参数传给 :func:`.input`。 也允许使用单个文件。"

#: ../../library/fileinput.rst:30
msgid ""
"All files are opened in text mode by default, but you can override this by "
"specifying the *mode* parameter in the call to :func:`.input` or "
":class:`FileInput`.  If an I/O error occurs during opening or reading a "
"file, :exc:`OSError` is raised."
msgstr ""
"所有文件都默认以文本模式打开，但你可以通过在调用 :func:`.input` 或 :class:`FileInput` 时指定 *mode* "
"形参来覆盖此行为。 如果在打开或读取文件时发生了 I/O 错误，将会引发 :exc:`OSError`。"

#: ../../library/fileinput.rst:35
msgid ""
":exc:`IOError` used to be raised; it is now an alias of :exc:`OSError`."
msgstr "原来会引发 :exc:`IOError`；现在它是 :exc:`OSError` 的别名。"

#: ../../library/fileinput.rst:38
msgid ""
"If ``sys.stdin`` is used more than once, the second and further use will "
"return no lines, except perhaps for interactive use, or if it has been "
"explicitly reset (e.g. using ``sys.stdin.seek(0)``)."
msgstr ""
"如果 ``sys.stdin`` 被使用超过一次，则第二次之后的使用将不返回任何行，除非是被交互式的使用，或都是被显式地重置 (例如使用 "
"``sys.stdin.seek(0)``)。"

#: ../../library/fileinput.rst:42
msgid ""
"Empty files are opened and immediately closed; the only time their presence "
"in the list of filenames is noticeable at all is when the last file opened "
"is empty."
msgstr "空文件打开后将立即被关闭；它们在文件列表中会被注意到的唯一情况只有当最后打开的文件为空的时候。"

#: ../../library/fileinput.rst:46
msgid ""
"Lines are returned with any newlines intact, which means that the last line "
"in a file may not have one."
msgstr "反回的行不会对换行符做任何处理，这意味着文件中的最后一行可能不带换行符。"

#: ../../library/fileinput.rst:49
msgid ""
"You can control how files are opened by providing an opening hook via the "
"*openhook* parameter to :func:`fileinput.input` or :class:`FileInput()`. The"
" hook must be a function that takes two arguments, *filename* and *mode*, "
"and returns an accordingly opened file-like object. If *encoding* and/or "
"*errors* are specified, they will be passed to the hook as additional "
"keyword arguments. This module provides a :func:`hook_compressed` to support"
" compressed files."
msgstr ""
"你可以通过将 *openhook* 形参传给 :func:`fileinput.input` 或 :class:`FileInput()` "
"来提供一个打开钩子以便控制文件的打开方式。 此钩子必须为一个函数，它接受两个参数 *filename* 和 "
"*mode*，并返回一个以相应模式打开的文件型对象。 如果指定了 *encoding* 和/或 "
"*errors*，它们将作为额外的关键字参数被传给这个钩子。 此模块提供了一个 :func:`hook_compressed` 来支持压缩文件。"

#: ../../library/fileinput.rst:56
msgid "The following function is the primary interface of this module:"
msgstr "以下函数是此模块的初始接口："

#: ../../library/fileinput.rst:61
msgid ""
"Create an instance of the :class:`FileInput` class.  The instance will be "
"used as global state for the functions of this module, and is also returned "
"to use during iteration.  The parameters to this function will be passed "
"along to the constructor of the :class:`FileInput` class."
msgstr ""
"创建一个 :class:`FileInput` 类的实例。 该实例将被用作此模块中函数的全局状态，并且还将在迭代期间被返回使用。 "
"此函数的形参将被继续传递给 :class:`FileInput` 类的构造器。"

#: ../../library/fileinput.rst:66
msgid ""
"The :class:`FileInput` instance can be used as a context manager in the "
":keyword:`with` statement.  In this example, *input* is closed after the "
":keyword:`!with` statement is exited, even if an exception occurs::"
msgstr ""
":class:`FileInput` 实例可以在 :keyword:`with` 语句中被用作上下文管理器。 在这个例子中，*input* 在 "
":keyword:`!with` 语句结束后将会被关闭，即使发生了异常也是如此::"

#: ../../library/fileinput.rst:74 ../../library/fileinput.rst:170
msgid "Can be used as a context manager."
msgstr "可以被用作上下文管理器。"

#: ../../library/fileinput.rst:77
msgid "The keyword parameters *mode* and *openhook* are now keyword-only."
msgstr "关键字形参 *mode* 和 *openhook* 现在是仅限关键字形参。"

#: ../../library/fileinput.rst:80 ../../library/fileinput.rst:176
#: ../../library/fileinput.rst:210
msgid "The keyword-only parameter *encoding* and *errors* are added."
msgstr "增加了仅限关键字形参 *encoding* 和 *errors*。"

#: ../../library/fileinput.rst:84
msgid ""
"The following functions use the global state created by "
":func:`fileinput.input`; if there is no active state, :exc:`RuntimeError` is"
" raised."
msgstr ""
"下列函数会使用 :func:`fileinput.input` 所创建的全局状态；如果没有活动的状态，则会引发 :exc:`RuntimeError`。"

#: ../../library/fileinput.rst:90
msgid ""
"Return the name of the file currently being read.  Before the first line has"
" been read, returns ``None``."
msgstr "返回当前被读取的文件名。 在第一行被读取之前，返回 ``None``。"

#: ../../library/fileinput.rst:96
msgid ""
"Return the integer \"file descriptor\" for the current file. When no file is"
" opened (before the first line and between files), returns ``-1``."
msgstr "返回以整数表示的当前文件“文件描述符”。 当未打开文件时（处在第一行和文件之间），返回 ``-1``。"

#: ../../library/fileinput.rst:102
msgid ""
"Return the cumulative line number of the line that has just been read.  "
"Before the first line has been read, returns ``0``.  After the last line of "
"the last file has been read, returns the line number of that line."
msgstr "返回已被读取的累计行号。 在第一行被读取之前，返回 ``0``。 在最后一个文件的最后一行被读取之后，返回该行的行号。"

#: ../../library/fileinput.rst:109
msgid ""
"Return the line number in the current file.  Before the first line has been "
"read, returns ``0``.  After the last line of the last file has been read, "
"returns the line number of that line within the file."
msgstr "返回当前文件中的行号。 在第一行被读取之前，返回 ``0``。 在最后一个文件的最后一行被读取之后，返回此文件中该行的行号。"

#: ../../library/fileinput.rst:116
msgid ""
"Return ``True`` if the line just read is the first line of its file, "
"otherwise return ``False``."
msgstr "如果刚读取的行是其所在文件的第一行则返回 ``True``，否则返回 ``False``。"

#: ../../library/fileinput.rst:122
msgid ""
"Return ``True`` if the last line was read from ``sys.stdin``, otherwise "
"return ``False``."
msgstr "如果最后读取的行来自 ``sys.stdin`` 则返回 ``True``，否则返回 ``False``。"

#: ../../library/fileinput.rst:128
msgid ""
"Close the current file so that the next iteration will read the first line "
"from the next file (if any); lines not read from the file will not count "
"towards the cumulative line count.  The filename is not changed until after "
"the first line of the next file has been read.  Before the first line has "
"been read, this function has no effect; it cannot be used to skip the first "
"file.  After the last line of the last file has been read, this function has"
" no effect."
msgstr ""
"关闭当前文件以使下次迭代将从下一个文件（如果存在）读取第一行；不是从该文件读取的行将不会被计入累计行数。 "
"直到下一个文件的第一行被读取之后文件名才会改变。 在第一行被读取之前，此函数将不会生效；它不能被用来跳过第一个文件。 "
"在最后一个文件的最后一行被读取之后，此函数将不再生效。"

#: ../../library/fileinput.rst:138
msgid "Close the sequence."
msgstr "关闭序列。"

#: ../../library/fileinput.rst:140
msgid ""
"The class which implements the sequence behavior provided by the module is "
"available for subclassing as well:"
msgstr "此模块所提供的实现了序列行为的类同样也可用于子类化："

#: ../../library/fileinput.rst:146
msgid ""
"Class :class:`FileInput` is the implementation; its methods "
":meth:`filename`, :meth:`fileno`, :meth:`lineno`, :meth:`filelineno`, "
":meth:`isfirstline`, :meth:`isstdin`, :meth:`nextfile` and :meth:`close` "
"correspond to the functions of the same name in the module. In addition it "
"is :term:`iterable` and has a :meth:`~io.TextIOBase.readline` method which "
"returns the next input line. The sequence must be accessed in strictly "
"sequential order; random access and :meth:`~io.TextIOBase.readline` cannot "
"be mixed."
msgstr ""
"类 :class:`FileInput` 是具体的实现；它的方法 :meth:`filename`, :meth:`fileno`, "
":meth:`lineno`, :meth:`filelineno`, :meth:`isfirstline`, :meth:`isstdin`, "
":meth:`nextfile` 和 :meth:`close` 对应于此模块具有相同名称的函数。 此外它还是一个 :term:`iterable` "
"并且具有可返回下一个输入行的 :meth:`~io.TextIOBase.readline` 方法。 此序列必须以严格的序列顺序来访问；随机访问和 "
":meth:`~io.TextIOBase.readline` 不可被混用。"

#: ../../library/fileinput.rst:154
msgid ""
"With *mode* you can specify which file mode will be passed to :func:`open`. "
"It must be one of ``'r'`` and ``'rb'``."
msgstr "通过 *mode* 你可以指定要传给 :func:`open` 的文件模式。 它必须为 ``'r'`` 和 ``'rb'`` 中的一个。"

#: ../../library/fileinput.rst:157
msgid ""
"The *openhook*, when given, must be a function that takes two arguments, "
"*filename* and *mode*, and returns an accordingly opened file-like object. "
"You cannot use *inplace* and *openhook* together."
msgstr ""
"*openhook* 如果给出则必须为一个函数，它接受两个参数 *filename* 和 *mode*，并相应地返回一个打开的文件型对象。 "
"你不能同时使用 *inplace* 和 *openhook*。"

#: ../../library/fileinput.rst:161
msgid ""
"You can specify *encoding* and *errors* that is passed to :func:`open` or "
"*openhook*."
msgstr "你可以指定 *encoding* 和 *errors* 来将其传给 :func:`open` 或 *openhook*。"

#: ../../library/fileinput.rst:163
msgid ""
"A :class:`FileInput` instance can be used as a context manager in the "
":keyword:`with` statement.  In this example, *input* is closed after the "
":keyword:`!with` statement is exited, even if an exception occurs::"
msgstr ""
":class:`FileInput` 实例可以在 :keyword:`with` 语句中被用作上下文管理器。 在这个例子中，*input* 在 "
":keyword:`!with` 语句结束后将会被关闭，即使发生了异常也是如此::"

#: ../../library/fileinput.rst:173
msgid "The keyword parameter *mode* and *openhook* are now keyword-only."
msgstr "关键字形参 *mode* 和 *openhook* 现在是仅限关键字形参。"

#: ../../library/fileinput.rst:179
msgid ""
"The ``'rU'`` and ``'U'`` modes and the :meth:`!__getitem__` method have been"
" removed."
msgstr "``'rU'`` 和 ``'U'`` 模式以及 :meth:`!__getitem__` 方法已被移除。"

#: ../../library/fileinput.rst:184
msgid ""
"**Optional in-place filtering:** if the keyword argument ``inplace=True`` is"
" passed to :func:`fileinput.input` or to the :class:`FileInput` constructor,"
" the file is moved to a backup file and standard output is directed to the "
"input file (if a file of the same name as the backup file already exists, it"
" will be replaced silently).  This makes it possible to write a filter that "
"rewrites its input file in place.  If the *backup* parameter is given "
"(typically as ``backup='.<some extension>'``), it specifies the extension "
"for the backup file, and the backup file remains around; by default, the "
"extension is ``'.bak'`` and it is deleted when the output file is closed.  "
"In-place filtering is disabled when standard input is read."
msgstr ""
"**可选的原地过滤:** 如果传递了关键字参数 ``inplace=True`` 给 :func:`fileinput.input` 或 "
":class:`FileInput` 构造器，则文件会被移至备份文件并将标准输出定向到输入文件（如果已存在与备份文件同名的文件，它将被静默地替换）。 "
"这使得编写一个能够原地重写其输入文件的过滤器成为可能。 如果给出了 *backup* 形参 (通常形式为 ``backup='.<some "
"extension>'``)，它将指定备份文件的扩展名，并且备份文件会被保留；默认情况下扩展名为 ``'.bak'`` 并且它会在输出文件关闭时被删除。"
" 在读取标准输入时原地过滤会被禁用。"

#: ../../library/fileinput.rst:196
msgid "The two following opening hooks are provided by this module:"
msgstr "此模块提供了以下两种打开文件钩子："

#: ../../library/fileinput.rst:200
msgid ""
"Transparently opens files compressed with gzip and bzip2 (recognized by the "
"extensions ``'.gz'`` and ``'.bz2'``) using the :mod:`gzip` and :mod:`bz2` "
"modules.  If the filename extension is not ``'.gz'`` or ``'.bz2'``, the file"
" is opened normally (ie, using :func:`open` without any decompression)."
msgstr ""
"使用 :mod:`gzip` 和 :mod:`bz2` 模块透明地打开 gzip 和 bzip2 压缩的文件（通过扩展名 ``'.gz'`` 和 "
"``'.bz2'`` 来识别）。 如果文件扩展名不是 ``'.gz'`` 或 ``'.bz2'``，文件会以正常方式打开（即使用 "
":func:`open` 并且不带任何解压操作）。"

#: ../../library/fileinput.rst:205
msgid ""
"The *encoding* and *errors* values are passed to :class:`io.TextIOWrapper` "
"for compressed files and open for normal files."
msgstr "*encoding* 和 *errors* 值会被传给 :class:`io.TextIOWrapper` 用于压缩文件以及打开普通文件。"

#: ../../library/fileinput.rst:208
msgid ""
"Usage example:  ``fi = "
"fileinput.FileInput(openhook=fileinput.hook_compressed, "
"encoding=\"utf-8\")``"
msgstr ""
"用法示例:  ``fi = fileinput.FileInput(openhook=fileinput.hook_compressed, "
"encoding=\"utf-8\")``"

#: ../../library/fileinput.rst:216
msgid ""
"Returns a hook which opens each file with :func:`open`, using the given "
"*encoding* and *errors* to read the file."
msgstr "返回一个通过 :func:`open` 打开每个文件的钩子，使用给定的 *encoding* 和 *errors* 来读取文件。"

#: ../../library/fileinput.rst:219
msgid ""
"Usage example: ``fi = "
"fileinput.FileInput(openhook=fileinput.hook_encoded(\"utf-8\", "
"\"surrogateescape\"))``"
msgstr ""
"使用示例: ``fi = fileinput.FileInput(openhook=fileinput.hook_encoded(\"utf-8\", "
"\"surrogateescape\"))``"

#: ../../library/fileinput.rst:223
msgid "Added the optional *errors* parameter."
msgstr "添加了可选的 *errors* 形参。"

#: ../../library/fileinput.rst:226
msgid ""
"This function is deprecated since :func:`fileinput.input` and "
":class:`FileInput` now have *encoding* and *errors* parameters."
msgstr ""
"此函数已被弃用，因为 :func:`fileinput.input` 和 :class:`FileInput` 现在有了 *encoding* 和 "
"*errors* 形参。"
