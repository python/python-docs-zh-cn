# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/multiprocessing.shared_memory.rst:2
msgid ""
":mod:`multiprocessing.shared_memory` --- Shared memory for direct access "
"across processes"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:7
msgid "**Source code:** :source:`Lib/multiprocessing/shared_memory.py`"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:18
msgid ""
"This module provides a class, :class:`SharedMemory`, for the allocation and "
"management of shared memory to be accessed by one or more processes on a "
"multicore or symmetric multiprocessor (SMP) machine.  To assist with the "
"life-cycle management of shared memory especially across distinct processes,"
" a :class:`~multiprocessing.managers.BaseManager` subclass, "
":class:`~multiprocessing.managers.SharedMemoryManager`, is also provided in "
"the :mod:`multiprocessing.managers` module."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:26
msgid ""
"In this module, shared memory refers to \"POSIX style\" shared memory blocks"
" (though is not necessarily implemented explicitly as such) and does not "
"refer to \"distributed shared memory\".  This style of shared memory permits"
" distinct processes to potentially read and write to a common (or shared) "
"region of volatile memory.  Processes are conventionally limited to only "
"have access to their own process memory space but shared memory permits the "
"sharing of data between processes, avoiding the need to instead send "
"messages between processes containing that data.  Sharing data directly via "
"memory can provide significant performance benefits compared to sharing data"
" via disk or socket or other communications requiring the "
"serialization/deserialization and copying of data."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:41
msgid ""
"Create an instance of the :class:`!SharedMemory` class for either creating a"
" new shared memory block or attaching to an existing shared memory block.  "
"Each shared memory block is assigned a unique name. In this way, one process"
" can create a shared memory block with a particular name and a different "
"process can attach to that same shared memory block using that same name."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:48
msgid ""
"As a resource for sharing data across processes, shared memory blocks may "
"outlive the original process that created them.  When one process no longer "
"needs access to a shared memory block that might still be needed by other "
"processes, the :meth:`close` method should be called. When a shared memory "
"block is no longer needed by any process, the :meth:`unlink` method should "
"be called to ensure proper cleanup."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:0
msgid "Parameters"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:55
msgid ""
"The unique name for the requested shared memory, specified as a string. When"
" creating a new shared memory block, if ``None`` (the default) is supplied "
"for the name, a novel name will be generated."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:61
msgid ""
"Control whether a new shared memory block is created (``True``) or an "
"existing shared memory block is attached (``False``)."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:65
msgid ""
"The requested number of bytes when creating a new shared memory block. "
"Because some platforms choose to allocate chunks of memory based upon that "
"platform's memory page size, the exact size of the shared memory block may "
"be larger or equal to the size requested. When attaching to an existing "
"shared memory block, the *size* parameter is ignored."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:75
msgid ""
"Close access to the shared memory from this instance.  In order to ensure "
"proper cleanup of resources, all instances should call :meth:`close` once "
"the instance is no longer needed.  Note that calling :meth:`!close` does not"
" cause the shared memory block itself to be destroyed."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:83
msgid ""
"Request that the underlying shared memory block be destroyed.  In order to "
"ensure proper cleanup of resources, :meth:`unlink` should be called once "
"(and only once) across all processes which have need for the shared memory "
"block.  After requesting its destruction, a shared memory block may or may "
"not be immediately destroyed and this behavior may differ across platforms."
"  Attempts to access data inside the shared memory block after "
":meth:`!unlink` has been called may result in memory access errors.  Note: "
"the last process relinquishing its hold on a shared memory block may call "
":meth:`!unlink` and :meth:`close` in either order."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:96
msgid "A memoryview of contents of the shared memory block."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:100
msgid "Read-only access to the unique name of the shared memory block."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:104
msgid "Read-only access to size in bytes of the shared memory block."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:107
msgid ""
"The following example demonstrates low-level use of :class:`SharedMemory` "
"instances::"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:133
msgid ""
"The following example demonstrates a practical use of the "
":class:`SharedMemory` class with `NumPy arrays <https://numpy.org/>`_, "
"accessing the same :class:`!numpy.ndarray` from two distinct Python shells:"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:187
msgid ""
"A subclass of :class:`multiprocessing.managers.BaseManager` which can be "
"used for the management of shared memory blocks across processes."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:190
msgid ""
"A call to :meth:`~multiprocessing.managers.BaseManager.start` on a "
":class:`!SharedMemoryManager` instance causes a new process to be started. "
"This new process's sole purpose is to manage the life cycle of all shared "
"memory blocks created through it.  To trigger the release of all shared "
"memory blocks managed by that process, call "
":meth:`~multiprocessing.managers.BaseManager.shutdown` on the instance. This"
" triggers a :meth:`~multiprocessing.shared_memory.SharedMemory.unlink` call "
"on all of the :class:`SharedMemory` objects managed by that process and then"
" stops the process itself.  By creating :class:`!SharedMemory` instances "
"through a :class:`!SharedMemoryManager`, we avoid the need to manually track"
" and trigger the freeing of shared memory resources."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:202
msgid ""
"This class provides methods for creating and returning :class:`SharedMemory`"
" instances and for creating a list-like object (:class:`ShareableList`) "
"backed by shared memory."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:206
msgid ""
"Refer to :class:`~multiprocessing.managers.BaseManager` for a description of"
" the inherited *address* and *authkey* optional input arguments and how they"
" may be used to connect to an existing :class:`!SharedMemoryManager` service"
" from other processes."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:213
msgid ""
"Create and return a new :class:`SharedMemory` object with the specified "
"*size* in bytes."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:218
msgid ""
"Create and return a new :class:`ShareableList` object, initialized by the "
"values from the input *sequence*."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:222
msgid ""
"The following example demonstrates the basic mechanisms of a "
":class:`~multiprocessing.managers.SharedMemoryManager`:"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:240
msgid ""
"The following example depicts a potentially more convenient pattern for "
"using :class:`~multiprocessing.managers.SharedMemoryManager` objects via the"
" :keyword:`with` statement to ensure that all shared memory blocks are "
"released after they are no longer needed:"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:259
msgid ""
"When using a :class:`~multiprocessing.managers.SharedMemoryManager` in a "
":keyword:`with` statement, the shared memory blocks created using that "
"manager are all released when the :keyword:`!with` statement's code block "
"finishes execution."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:267
msgid ""
"Provide a mutable list-like object where all values stored within are stored"
" in a shared memory block. This constrains storable values to the following "
"built-in data types:"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:271
msgid ":class:`int` (signed 64-bit)"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:272
msgid ":class:`float`"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:273
msgid ":class:`bool`"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:274
msgid ":class:`str` (less than 10M bytes each when encoded as UTF-8)"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:275
msgid ":class:`bytes` (less than 10M bytes each)"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:276
msgid "``None``"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:278
msgid ""
"It also notably differs from the built-in :class:`list` type in that these "
"lists can not change their overall length (i.e. no :meth:`!append`, "
":meth:`!insert`, etc.) and do not support the dynamic creation of new "
":class:`!ShareableList` instances via slicing."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:284
msgid ""
"*sequence* is used in populating a new :class:`!ShareableList` full of "
"values. Set to ``None`` to instead attach to an already existing "
":class:`!ShareableList` by its unique shared memory name."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:288
msgid ""
"*name* is the unique name for the requested shared memory, as described in "
"the definition for :class:`SharedMemory`.  When attaching to an existing "
":class:`!ShareableList`, specify its shared memory block's unique name while"
" leaving *sequence* set to ``None``."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:295
msgid ""
"A known issue exists for :class:`bytes` and :class:`str` values. If they end"
" with ``\\x00`` nul bytes or characters, those may be *silently stripped* "
"when fetching them by index from the :class:`!ShareableList`. This "
"``.rstrip(b'\\x00')`` behavior is considered a bug and may go away in the "
"future. See :gh:`106939`."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:301
msgid ""
"For applications where rstripping of trailing nulls is a problem, work "
"around it by always unconditionally appending an extra non-0 byte to the end"
" of such values when storing and unconditionally removing it when fetching:"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:324
msgid "Return the number of occurrences of *value*."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:328
msgid ""
"Return first index position of *value*. Raise :exc:`ValueError` if *value* "
"is not present."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:333
msgid ""
"Read-only attribute containing the :mod:`struct` packing format used by all "
"currently stored values."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:338
msgid "The :class:`SharedMemory` instance where the values are stored."
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:341
msgid ""
"The following example demonstrates basic use of a :class:`ShareableList` "
"instance:"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:374
msgid ""
"The following example depicts how one, two, or many processes may access the"
" same :class:`ShareableList` by supplying the name of the shared memory "
"block behind it:"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:389
msgid ""
"The following examples demonstrates that :class:`ShareableList` (and "
"underlying :class:`SharedMemory`) objects can be pickled and unpickled if "
"needed. Note, that it will still be the same shared object. This happens, "
"because the deserialized object has the same unique name and is just "
"attached to an existing object with the same name (if the object is still "
"alive):"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:11
msgid "Shared Memory"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:11
msgid "POSIX Shared Memory"
msgstr ""

#: ../../library/multiprocessing.shared_memory.rst:11
msgid "Named Shared Memory"
msgstr ""
