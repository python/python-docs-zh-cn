# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/importlib.metadata.rst:5
msgid ":mod:`!importlib.metadata` -- Accessing package metadata"
msgstr ":mod:`!importlib.metadata` -- 访问软件包元数据"

#: ../../library/importlib.metadata.rst:11
msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` 不再是暂定的。"

#: ../../library/importlib.metadata.rst:14
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr "**源代码:** :source:`Lib/importlib/metadata/__init__.py`"

#: ../../library/importlib.metadata.rst:16
msgid ""
"``importlib.metadata`` is a library that provides access to the metadata of "
"an installed `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_, such as its entry points or its top-level names (`Import Package"
" <https://packaging.python.org/en/latest/glossary/#term-Import-"
"Package>`_\\s, modules, if any). Built in part on Python's import system, "
"this library intends to replace similar functionality in the `entry point "
"API`_ and `metadata API`_ of ``pkg_resources``.  Along with "
":mod:`importlib.resources`, this package can eliminate the need to use the "
"older and less efficient ``pkg_resources`` package."
msgstr ""
"``importlib.metadata`` 是一个提供对已安装的 `分发包 "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ 的元数据的访问的库，如其入口点或其顶层名称 (`导入包 "
"<https://packaging.python.org/en/latest/glossary/#term-Import-Package>`_, "
"模块等，如果存在的话）。 这个库部分构建于 Python 的导入系统之上，其目标是取代 ``pkg_resources`` 的中的 `entry "
"point API`_ 和 `metadata API`_。 配合 :mod:`importlib.resources` ，这个包使得较老旧且低效的 "
"``pkg_resources`` 包不再必要。"

#: ../../library/importlib.metadata.rst:27
msgid ""
"``importlib.metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as `pip "
"<https://pypi.org/project/pip/>`_. Specifically, it works with distributions"
" with discoverable ``dist-info`` or ``egg-info`` directories, and metadata "
"defined by the `Core metadata specifications "
"<https://packaging.python.org/en/latest/specifications/core-metadata/#core-"
"metadata>`_."
msgstr ""
"``importlib.metadata`` 对通过 `pip <https://pypi.org/project/pip/>`_ 之类的工具安装到 "
"Python 的 ``site-packages`` 目录的第三方 *分发包* 进行操作。 具体来说，它适用于带有可发现 ``dist-info`` 或"
" ``egg-info`` 目录，以及由 `核心元数据规范说明 "
"<https://packaging.python.org/en/latest/specifications/core-metadata/#core-"
"metadata>`_ 所定义的元数据的分发包。"

#: ../../library/importlib.metadata.rst:36
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One "
"*distribution package* can contain multiple *import packages* (and single "
"modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use "
":ref:`package_distributions() <package-distributions>` to get a mapping "
"between them."
msgstr ""
"这些 *并不* 必须等同于或 1:1 对应于可在 Python 代码中导入的最高层级 *导入包* 名称。 一个 *分发包* 可以包含多个 *导入包* "
"(和单独模块)，而一个最高层级 *导入包* 如果是命名空间包则可以映射到多个 *分发包*。 你可以使用 "
":ref:`package_distributions() <package-distributions>` 来获取它们之间的映射关系。"

#: ../../library/importlib.metadata.rst:47
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`.  Through an extension mechanism, the metadata "
"can live almost anywhere."
msgstr ""
"分发包元数据默认可存在于 :data:`sys.path` 下的文件系统或 zip 归档文件中。通过一个扩展机制，元数据可以存在于几乎任何地方。"

#: ../../library/importlib.metadata.rst:62
msgid "https://importlib-metadata.readthedocs.io/"
msgstr "https://importlib-metadata.readthedocs.io/"

#: ../../library/importlib.metadata.rst:56
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport of "
"``importlib.metadata``. This includes an `API reference <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ for this module's classes and"
" functions, as well as a `migration guide <https://importlib-"
"metadata.readthedocs.io/en/latest/migration.html>`__ for existing users of "
"``pkg_resources``."
msgstr ""
"``importlib_metadata`` 的文档，它向下移植了 ``importlib.metadata``。它包含该模块的类和函数的 `API "
"参考 <https://importlib-metadata.readthedocs.io/en/latest/api.html>`__，以及针对 "
"``pkg_resources`` 现有用户的 `迁移指南 <https://importlib-"
"metadata.readthedocs.io/en/latest/migration.html>`__。"

#: ../../library/importlib.metadata.rst:67
msgid "Overview"
msgstr "概述"

#: ../../library/importlib.metadata.rst:69
msgid ""
"Let's say you wanted to get the version string for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ you've installed using ``pip``.  We start by creating a virtual "
"environment and installing something into it:"
msgstr ""
"让我们假设你想要获取你使用 ``pip`` 安装的某个 `分发包 "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ 的版本字符串。我们首先创建一个虚拟环境并在其中安装一些软件包："

#: ../../library/importlib.metadata.rst:80
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr "你可以通过运行以下代码得到 ``wheel`` 的版本字符串："

#: ../../library/importlib.metadata.rst:89
msgid ""
"You can also get a collection of entry points selectable by properties of "
"the EntryPoint (typically 'group' or 'name'), such as ``console_scripts``, "
"``distutils.commands`` and others.  Each group contains a collection of "
":ref:`EntryPoint <entry-points>` objects."
msgstr ""
"你还能得到可通过 EntryPoint 的属性 (通常为 'group' 或 'name') 来选择的入口点多项集，比如 "
"``console_scripts``, ``distutils.commands``。 每个 group 包含一个由 :ref:`EntryPoint"
" <entry-points>` 对象组成的多项集。"

#: ../../library/importlib.metadata.rst:93
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr "你可以获得 :ref:`分发的元数据 <metadata>`："

#: ../../library/importlib.metadata.rst:98
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its "
":ref:`constituent files <files>`, and get a list of the distribution's "
":ref:`requirements`."
msgstr ""
"你也可以获得 :ref:`分发包的版本号 <version>`，列出它的 :ref:`构成文件 <files>`，并且得到分发包的 "
":ref:`requirements` 列表。"

#: ../../library/importlib.metadata.rst:104
msgid "Functional API"
msgstr "函数式 API"

#: ../../library/importlib.metadata.rst:106
msgid "This package provides the following functionality via its public API."
msgstr "这个包的公开 API 提供了以下功能。"

#: ../../library/importlib.metadata.rst:112
msgid "Entry points"
msgstr "入口点"

#: ../../library/importlib.metadata.rst:114
msgid ""
"The ``entry_points()`` function returns a collection of entry points. Entry "
"points are represented by ``EntryPoint`` instances; each ``EntryPoint`` has "
"a ``.name``, ``.group``, and ``.value`` attributes and a ``.load()`` method "
"to resolve the value.  There are also ``.module``, ``.attr``, and "
"``.extras`` attributes for getting the components of the ``.value`` "
"attribute."
msgstr ""
"``entry_points()`` 函数返回入口点的字典。入口点表现为 ``EntryPoint`` 的实例；每个 ``EntryPoint`` "
"对象都有 ``.name`` ，``.group`` 与 ``.value`` 属性，用于解析值的 ``.load()`` 方法， 来自 "
"``.value`` 属性的对应部分的 ``.module``, ``.attr`` 与 ``.extras`` 属性。"

#: ../../library/importlib.metadata.rst:121
msgid "Query all entry points::"
msgstr "查询所有的入口点："

#: ../../library/importlib.metadata.rst:125
msgid ""
"The ``entry_points()`` function returns an ``EntryPoints`` object, a "
"collection of all ``EntryPoint`` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""
"``entry_points()`` 函数返回一个 ``EntryPoints`` 对象，即由带有 ``names`` 和 ``groups`` "
"属性的全部 ``EntryPoint`` 对象组成的多项集以方便使用::"

#: ../../library/importlib.metadata.rst:132
msgid ""
"``EntryPoints`` has a ``select`` method to select entry points matching "
"specific properties. Select entry points in the ``console_scripts`` group::"
msgstr ""
"``EntryPoints`` 的 ``select`` 方法用于选择匹配特性的入口点。要选择 ``console_scripts`` 组中的入口点："

#: ../../library/importlib.metadata.rst:138
msgid ""
"Equivalently, since ``entry_points`` passes keyword arguments through to "
"select::"
msgstr "你也可以向 ``entry_points`` 传递关键字参数 \"group\" 以实现相同的效果::"

#: ../../library/importlib.metadata.rst:143
msgid "Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr "选出命名为 “wheel” 的特定脚本（可以在 wheel 项目中找到）："

#: ../../library/importlib.metadata.rst:149
msgid "Equivalently, query for that entry point during selection::"
msgstr "等价地，在选择过程中查询对应的入口点："

#: ../../library/importlib.metadata.rst:154
msgid "Inspect the resolved entry point::"
msgstr "检查解析得到的入口点："

#: ../../library/importlib.metadata.rst:168
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs "
"<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_ for more"
" information on entry points, their definition, and usage."
msgstr ""
"``group`` 和 ``name`` 是由包作者定义的任意值并且通常来说客户端会想要解析特定 group 的所有入口点。 请参阅 `the "
"setuptools docs "
"<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_ "
"了解有关入口点，其定义和用法的更多信息。"

#: ../../library/importlib.metadata.rst:174
msgid "*Compatibility Note*"
msgstr "*兼容性说明*"

#: ../../library/importlib.metadata.rst:176
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group."
" For compatibility, if no parameters are passed to entry_points, a "
"``SelectableGroups`` object is returned, implementing that dict interface. "
"In the future, calling ``entry_points`` with no parameters will return an "
"``EntryPoints`` object. Users should rely on the selection interface to "
"retrieve entry points by group."
msgstr ""

#: ../../library/importlib.metadata.rst:189
msgid "Distribution metadata"
msgstr "分发的元数据"

#: ../../library/importlib.metadata.rst:191
msgid ""
"Every `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ includes some metadata, which you can extract using the "
"``metadata()`` function::"
msgstr ""
"每个 `分发包 <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ 都包括一些元数据，你可以使用 ``metadata()`` 函数来获取::"

#: ../../library/importlib.metadata.rst:197
msgid ""
"The keys of the returned data structure, a ``PackageMetadata``, name the "
"metadata keywords, and the values are returned unparsed from the "
"distribution metadata::"
msgstr "返回的数据结构 ``PackageMetadata`` 的键代表元数据的关键字，而值从分发的元数据中不被解析地返回："

#: ../../library/importlib.metadata.rst:204
msgid ""
"``PackageMetadata`` also presents a ``json`` attribute that returns all the "
"metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""
"``PackageMetadata`` 也提供了按照 :PEP:`566` 将所有元数据以 JSON 兼容的方式返回的 ``json`` 属性："

#: ../../library/importlib.metadata.rst:212
msgid ""
"The actual type of the object returned by ``metadata()`` is an "
"implementation detail and should be accessed only through the interface "
"described by the `PackageMetadata protocol <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_."
msgstr ""
"``metadata()`` 所返回的对象的实际类型是一个实现细节并且应当只能通过 `PackageMetadata 协议 "
"<https://importlib-"
"metadata.readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_"
" 所描述的接口来访问。"

#: ../../library/importlib.metadata.rst:217
msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr "当有效载荷中包含时，``Description`` 以去除续行符的形式被包含于元数据中。"

#: ../../library/importlib.metadata.rst:221
msgid "The ``json`` attribute was added."
msgstr "添加了 ``json`` 属性。"

#: ../../library/importlib.metadata.rst:227
msgid "Distribution versions"
msgstr "分发包的版本"

#: ../../library/importlib.metadata.rst:229
msgid ""
"The ``version()`` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_'s version number, as a string::"
msgstr ""
"``version()`` 函数可以最快捷地以字符串形式获取一个 `分发包 "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ 的版本号::"

#: ../../library/importlib.metadata.rst:240
msgid "Distribution files"
msgstr "分发包的文件"

#: ../../library/importlib.metadata.rst:242
msgid ""
"You can also get the full set of files contained within a distribution.  The"
" ``files()`` function takes a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ name and returns all of the files installed by this distribution."
"  Each file object returned is a ``PackagePath``, a "
":class:`pathlib.PurePath` derived object with additional ``dist``, ``size``,"
" and ``hash`` properties as indicated by the metadata.  For example::"
msgstr ""
"你还可以获取包含在分发包内的全部文件的集合。 ``files()`` 函数接受一个 `分发包 "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ 名称并返回此分发包所安装的全部文件。 每个返回的文件对象都是一个 ``PackagePath``，即带有由元数据指明的额外 "
"``dist``, ``size`` 和 ``hash`` 特征属性的派生自 :class:`pathlib.PurePath` 的对象。 例如::"

#: ../../library/importlib.metadata.rst:259
msgid "Once you have the file, you can also read its contents::"
msgstr "当你获得了文件对象，你可以读取其内容："

#: ../../library/importlib.metadata.rst:270
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr "你也可以使用 ``locate`` 方法来获得文件的绝对路径："

#: ../../library/importlib.metadata.rst:276
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is"
" missing, ``files()`` will return ``None``. The caller may wish to wrap "
"calls to ``files()`` in `always_iterable <https://more-"
"itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable>`_"
" or otherwise guard against this condition if the target distribution is not"
" known to have the metadata present."
msgstr ""
"当列出包含文件的元数据文件（RECORD 或 SOURCES.txt）不存在时， ``files()`` 函数将返回 ``None`` "
"。调用者可能会想要将对 ``files()`` 的调用封装在 `always_iterable <https://more-"
"itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable>`_"
" 中，或者用其他方法来应对目标分发元数据存在性未知的情况。"

#: ../../library/importlib.metadata.rst:287
msgid "Distribution requirements"
msgstr "分发包的依赖"

#: ../../library/importlib.metadata.rst:289
msgid ""
"To get the full set of requirements for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_, use the ``requires()`` function::"
msgstr ""
"要获取一个 `分发包 <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-Package>`_ 的完整需求集合，请使用 ``requires()`` 函数::"

#: ../../library/importlib.metadata.rst:301
msgid "Mapping import to distribution packages"
msgstr "将导入映射到分发包"

#: ../../library/importlib.metadata.rst:303
msgid ""
"A convenience method to resolve the `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ name (or names, in the case of a namespace package) that provide "
"each importable top-level Python module or `Import Package "
"<https://packaging.python.org/en/latest/glossary/#term-Import-Package>`_::"
msgstr ""
"解析每个提供可导入的最高层级 Python 模块或 `导入包 "
"<https://packaging.python.org/en/latest/glossary/#term-Import-Package>`_ 对应的"
" `分发包 <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ 名称（对于命名空间包可能有多个名称）的快捷方法::"

#: ../../library/importlib.metadata.rst:316
msgid "Distributions"
msgstr "分发包对象"

#: ../../library/importlib.metadata.rst:318
msgid ""
"While the above API is the most common and convenient usage, you can get all"
" of that information from the ``Distribution`` class.  A ``Distribution`` is"
" an abstract object that represents the metadata for a Python `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_.  You can get the ``Distribution`` instance::"
msgstr ""
"以上 API 是最常见且便捷的用法，但你也可以通过 ``Distribution`` 类来获得所有信息。 ``Distribution`` 是一个代表 "
"Python `分发包 <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-Package>`_ 元数据的抽象对象。 你可以这样获取 ``Distribution`` 实例::"

#: ../../library/importlib.metadata.rst:327
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr "因此，可以通过 ``Distribution`` 实例获得版本号："

#: ../../library/importlib.metadata.rst:333
msgid ""
"There are all kinds of additional metadata available on the ``Distribution``"
" instance::"
msgstr "``Distribution`` 实例具有所有可用的附加元数据："

#: ../../library/importlib.metadata.rst:341
msgid ""
"The full set of available metadata is not described here. See the `Core "
"metadata specifications "
"<https://packaging.python.org/en/latest/specifications/core-metadata/#core-"
"metadata>`_ for additional details."
msgstr ""
"此处并未描述可用元数据的完整集合。详见 `核心元数据规格说明 "
"<https://packaging.python.org/en/latest/specifications/core-metadata/#core-"
"metadata>`_。"

#: ../../library/importlib.metadata.rst:346
msgid "Distribution Discovery"
msgstr "分发包的发现"

#: ../../library/importlib.metadata.rst:348
msgid ""
"By default, this package provides built-in support for discovery of metadata"
" for file system and zip file `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_\\s. This metadata finder search defaults to ``sys.path``, but "
"varies slightly in how it interprets those values from how other import "
"machinery does. In particular:"
msgstr ""
"在默认情况下，这个包针对文件系统和 zip 文件 `分发包 "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ 的元数据发现提供了内置支持。 这个元数据查找器的搜索目标默认为 "
"``sys.path``，但它对来自其他导入机制行为方式的解读会略有变化。 特别地:"

#: ../../library/importlib.metadata.rst:352
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on "
"``sys.path``."
msgstr "``importlib.metadata`` 不会识别  ``sys.path`` 上的 :class:`bytes` 对象。"

#: ../../library/importlib.metadata.rst:353
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for imports."
msgstr ""
"``importlib.metadata`` 将顺带识别 ``sys.path`` 上的 :py:class:`pathlib.Path` "
"对象，即使这些值会被导入操作所忽略。"

#: ../../library/importlib.metadata.rst:357
msgid "Extending the search algorithm"
msgstr "扩展搜索算法"

#: ../../library/importlib.metadata.rst:359
msgid ""
"Because `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ metadata is not available through :data:`sys.path` searches, or "
"package loaders directly, the metadata for a distribution is found through "
"import system `finders`_.  To find a distribution package's metadata, "
"``importlib.metadata`` queries the list of :term:`meta path finders <meta "
"path finder>` on :data:`sys.meta_path`."
msgstr ""

#: ../../library/importlib.metadata.rst:367
msgid ""
"By default ``importlib.metadata`` installs a finder for distribution "
"packages found on the file system. This finder doesn't actually find any "
"*distributions*, but it can find their metadata."
msgstr ""
"在默认情况下 ``importlib.metadata`` 会安装在文件系统中找到的分发包的查找器。 这个查找器无法真正找出任何 "
"*分发包*，但它能找到它们的元数据。"

#: ../../library/importlib.metadata.rst:372
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. "
"``importlib.metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"抽象基类 :py:class:`importlib.abc.MetaPathFinder` 定义了 Python 导入系统期望的查找器接口。 "
"``importlib.metadata`` 通过寻找 :data:`sys.meta_path` 上查找器可选的 "
"``find_distributions`` 可调用的属性扩展这个协议，并将这个扩展接口作为 ``DistributionFinder`` "
"抽象基类提供，它定义了这个抽象方法："

#: ../../library/importlib.metadata.rst:386
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"``DistributionFinder.Context`` 对象提供了指示搜索路径和匹配名称的属性 ``.path`` 和 ``.name`` "
"，也可能提供其他相关的上下文。"

#: ../../library/importlib.metadata.rst:390
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"这在实践中意味着要支持在文件系统外的其他位置查找分发包的元数据，你需要子类化 ``Distribution`` 并实现抽象方法，之后从一个自定义查找器的"
" ``find_distributions()`` 方法返回这个派生的 ``Distribution`` 实例。"
