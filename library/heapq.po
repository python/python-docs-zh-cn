# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/heapq.rst:2
msgid ":mod:`!heapq` --- Heap queue algorithm"
msgstr ":mod:`!heapq` --- 堆队列算法"

#: ../../library/heapq.rst:12
msgid "**Source code:** :source:`Lib/heapq.py`"
msgstr "**源码：**:source:`Lib/heapq.py`"

#: ../../library/heapq.rst:16
msgid ""
"This module provides an implementation of the heap queue algorithm, also "
"known as the priority queue algorithm."
msgstr "这个模块实现了堆队列算法，即优先队列算法。"

#: ../../library/heapq.rst:19
msgid ""
"Min-heaps are binary trees for which every parent node has a value less than"
" or equal to any of its children. We refer to this condition as the heap "
"invariant."
msgstr "最小堆是一种二叉树，其中每个父节点的值都小于等于它的任何子节点。 我们将此条件称为堆的不变性。"

#: ../../library/heapq.rst:23
msgid ""
"For min-heaps, this implementation uses lists for which ``heap[k] <= "
"heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]`` for all *k* for which the "
"compared elements exist.  Elements are counted from zero.  The interesting "
"property of a min-heap is that its smallest element is always the root, "
"``heap[0]``."
msgstr ""
"对于最小堆，这个实现使用了列表，其中对于所有存在被比较元素的 *k* 都有 ``heap[k] <= heap[2*k+1]`` 且 ``heap[k]"
" <= heap[2*k+2]``。 元素是从零开始计数的。 最小堆最有趣的特征在于其最小的元素总是位于根节点，即 ``heap[0]``。"

#: ../../library/heapq.rst:29
msgid ""
"Max-heaps satisfy the reverse invariant: every parent node has a value "
"*greater* than any of its children.  These are implemented as lists for "
"which ``maxheap[2*k+1] <= maxheap[k]`` and ``maxheap[2*k+2] <= maxheap[k]`` "
"for all *k* for which the compared elements exist. The root, ``maxheap[0]``,"
" contains the *largest* element; ``heap.sort(reverse=True)`` maintains the "
"max-heap invariant."
msgstr ""
"最大堆满足反向不变性：每个父节点的值 *大于* 它的任何子节点。对于所有存在比较元素的 *k* ，它们被实现为 ``maxheap[2*k+1] <= "
"maxheap[k]`` 和 ``maxheap[2*k+2] <= maxheap[k]`` 的列表。 根结点 ``maxheap[0]`` 包含 "
"*最大的* 元素；``heap.sort(reverse=True)`` 维持最大堆的不变性。"

#: ../../library/heapq.rst:36
msgid ""
"The :mod:`!heapq` API differs from textbook heap algorithms in two aspects: "
"(a) We use zero-based indexing.  This makes the relationship between the "
"index for a node and the indexes for its children slightly less obvious, but"
" is more suitable since Python uses zero-based indexing. (b) Textbooks often"
" focus on max-heaps, due to their suitability for in-place sorting. Our "
"implementation favors min-heaps as they better correspond to Python "
":class:`lists <list>`."
msgstr ""
":mod:`!heapq` API与教科书中的堆算法在两个方面不同：（a）我们使用基于零的索引。 "
"这使得节点的索引与其子节点的索引之间的关系稍微不那么明显，但由于Python使用从零开始的索引，因此更合适。（b）教科书通常侧重于最大堆，因为它们适合原地排序。"
" 我们的实现倾向于最小堆，因为它们更好地对应于 Python 的 :class:`列表 <list>`。"

#: ../../library/heapq.rst:43
msgid ""
"These two aspects make it possible to view the heap as a regular Python list"
" without surprises: ``heap[0]`` is the smallest item, and ``heap.sort()`` "
"maintains the heap invariant!"
msgstr ""
"这两个方面使我们可以毫不意外地将堆视为常规的 Python 列表: ``heap[0]`` 是最小的项，而 ``heap.sort()`` "
"维护堆的不变性！"

#: ../../library/heapq.rst:47
msgid ""
"Like :meth:`list.sort`, this implementation uses only the ``<`` operator for"
" comparisons, for both min-heaps and max-heaps."
msgstr "像 :meth:`list.sort` 一样，这个实现只使用 ``<`` 操作符进行比较，对于最小堆和最大堆都是如此。"

#: ../../library/heapq.rst:50
msgid ""
"In the API below, and in this documentation, the unqualified term *heap* "
"generally refers to a min-heap. The API for max-heaps is named using a "
"``_max``  suffix."
msgstr "在下面的API和本文档中，非限定术语 *heap* 通常指的是最小堆。最大堆的API使用``_max``后缀命名。"

#: ../../library/heapq.rst:54
msgid ""
"To create a heap, use a list initialized as ``[]``, or transform an existing"
" list into a min-heap or max-heap using the :func:`heapify` or "
":func:`heapify_max` functions, respectively."
msgstr ""
"要创建堆，请使用初始化为 ``[]`` 的列表，或者使用 :func:`heapify` 或 :func:`heapify_max` "
"函数将现有列表转换为最小堆或最大堆。"

#: ../../library/heapq.rst:58
msgid "The following functions are provided for min-heaps:"
msgstr "最小堆提供了下列函数："

#: ../../library/heapq.rst:63
msgid ""
"Push the value *item* onto the *heap*, maintaining the min-heap invariant."
msgstr "将值 *item* 推至 *heap* 中，保持最小堆的不变性。"

#: ../../library/heapq.rst:68
msgid ""
"Pop and return the smallest item from the *heap*, maintaining the min-heap "
"invariant.  If the heap is empty, :exc:`IndexError` is raised.  To access "
"the smallest item without popping it, use ``heap[0]``."
msgstr ""
"从 *heap* 弹出并返回最小的项，保持最小堆的不变性。 如果堆为空，则会引发 :exc:`IndexError`。 "
"要访问最小的项而不弹出它，可以使用 ``heap[0]``。"

#: ../../library/heapq.rst:75
msgid ""
"Push *item* on the heap, then pop and return the smallest item from the "
"*heap*.  The combined action runs more efficiently than :func:`heappush` "
"followed by a separate call to :func:`heappop`."
msgstr ""
"将 *item* 放入堆中，然后弹出并返回 *heap* 的最小元素。该组合操作比先调用 :func:`heappush` 再调用 "
":func:`heappop` 运行起来更有效率。"

#: ../../library/heapq.rst:82
msgid "Transform list *x* into a min-heap, in-place, in linear time."
msgstr "将列表 *x* 转换为最小堆，在线性时间内原地修改。"

#: ../../library/heapq.rst:87
msgid ""
"Pop and return the smallest item from the *heap*, and also push the new "
"*item*. The heap size doesn't change. If the heap is empty, "
":exc:`IndexError` is raised."
msgstr ""
"弹出并返回 *heap* 中最小的一项，同时推入新的 *item*。 堆的大小不变。 如果堆为空则引发 :exc:`IndexError`。"

#: ../../library/heapq.rst:90
msgid ""
"This one step operation is more efficient than a :func:`heappop` followed by"
" :func:`heappush` and can be more appropriate when using a fixed-size heap. "
"The pop/push combination always returns an element from the heap and "
"replaces it with *item*."
msgstr ""
"这个单步骤操作比 :func:`heappop` 加 :func:`heappush` 更高效，并且在使用固定大小的堆时更为适宜。 pop/push "
"组合总是会从堆中返回一个元素并将其替换为 *item*。"

#: ../../library/heapq.rst:95
msgid ""
"The value returned may be larger than the *item* added.  If that isn't "
"desired, consider using :func:`heappushpop` instead.  Its push/pop "
"combination returns the smaller of the two values, leaving the larger value "
"on the heap."
msgstr ""
"返回的值可能会比新加入的值大。如果不希望如此，可改用 :func:`heappushpop`。它的 push/pop "
"组合返回两个值中较小的一个，将较大的留在堆中。"

#: ../../library/heapq.rst:101
msgid "For max-heaps, the following functions are provided:"
msgstr "对于最大堆，提供了下列函数："

#: ../../library/heapq.rst:106
msgid "Transform list *x* into a max-heap, in-place, in linear time."
msgstr "将列表 *x* 转换为最大堆，在线性时间内原地修改。"

#: ../../library/heapq.rst:113
msgid ""
"Push the value *item* onto the max-heap *heap*, maintaining the max-heap "
"invariant."
msgstr "将值 *item* 推至最大堆 *heap* 中，保持最大堆的不变性。"

#: ../../library/heapq.rst:121
msgid ""
"Pop and return the largest item from the max-heap *heap*, maintaining the "
"max-heap invariant.  If the max-heap is empty, :exc:`IndexError` is raised. "
"To access the largest item without popping it, use ``maxheap[0]``."
msgstr ""
"从 *heap* 弹出并返回最大的项，保持最大堆的不变性。 如果最大堆为空，则会引发 :exc:`IndexError`。 "
"要访问最大的项而不弹出它，可以使用 ``maxheap[0]``。"

#: ../../library/heapq.rst:130
msgid ""
"Push *item* on the max-heap *heap*, then pop and return the largest item "
"from *heap*. The combined action runs more efficiently than "
":func:`heappush_max` followed by a separate call to :func:`heappop_max`."
msgstr ""
"将 *item* 放入最大堆 *heap* 中，然后弹出并返回 *heap* 的最大元素。该组合操作比先调用 :func:`heappush_max` "
"再调用 :func:`heappop_max` 运行起来更有效率。"

#: ../../library/heapq.rst:140
msgid ""
"Pop and return the largest item from the max-heap *heap* and also push the "
"new *item*. The max-heap size doesn't change. If the max-heap is empty, "
":exc:`IndexError` is raised."
msgstr ""
"弹出并返回最大堆 *heap* 中最大的一项，同时放入新的 *item*。 最大堆的大小不变。 如果最大堆为空则引发 "
":exc:`IndexError`。"

#: ../../library/heapq.rst:145
msgid ""
"The value returned may be smaller than the *item* added.  Refer to the "
"analogous function :func:`heapreplace` for detailed usage notes."
msgstr "返回的值可能小于添加的 *item*。 参考类似的函数 :func:`heapreplace` 了解详细的用法说明。"

#: ../../library/heapq.rst:151
msgid "The module also offers three general purpose functions based on heaps."
msgstr "该模块还提供了三个基于堆的通用目的函数。"

#: ../../library/heapq.rst:156
msgid ""
"Merge multiple sorted inputs into a single sorted output (for example, merge"
" timestamped entries from multiple log files).  Returns an :term:`iterator` "
"over the sorted values."
msgstr ""
"将多个已排序的输入合并为一个已排序的输出（例如，合并来自多个日志文件的带时间戳的条目）。 返回已排序值的 :term:`iterator`。"

#: ../../library/heapq.rst:160
msgid ""
"Similar to ``sorted(itertools.chain(*iterables))`` but returns an iterable, "
"does not pull the data into memory all at once, and assumes that each of the"
" input streams is already sorted (smallest to largest)."
msgstr ""
"类似于 ``sorted(itertools.chain(*iterables))`` "
"但返回一个可迭代对象，不会一次性地将数据全部放入内存，并假定每个输入流都是已排序的（从小到大）。"

#: ../../library/heapq.rst:164
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr "具有两个可选参数，它们都必须指定为关键字参数。"

#: ../../library/heapq.rst:166
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each input element.  The default value is "
"``None`` (compare the elements directly)."
msgstr ""
"*key* 指定带有单个参数的 :term:`key function`，用于从每个输入元素中提取比较键。 默认值为 ``None`` "
"(直接比较元素)。"

#: ../../library/heapq.rst:170
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the input elements "
"are merged as if each comparison were reversed. To achieve behavior similar "
"to ``sorted(itertools.chain(*iterables), reverse=True)``, all iterables must"
" be sorted from largest to smallest."
msgstr ""
"*reverse* 为一个布尔值。 如果设为 ``True``，则输入元素将按比较结果逆序进行合并。 要达成与 "
"``sorted(itertools.chain(*iterables), reverse=True)`` "
"类似的行为，所有可迭代对象必须是已从大到小排序的。"

#: ../../library/heapq.rst:175
msgid "Added the optional *key* and *reverse* parameters."
msgstr "添加了可选的 *key* 和 *reverse* 形参。"

#: ../../library/heapq.rst:181
msgid ""
"Return a list with the *n* largest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key, "
"reverse=True)[:n]``."
msgstr ""
"从 *iterable* 所定义的数据集中返回前 *n* 个最大元素组成的列表。 如果提供了 *key* 则其应指定一个单参数的函数，用于从 "
"*iterable* 的每个元素中提取比较键 (例如 ``key=str.lower``)。 等价于:  ``sorted(iterable, "
"key=key, reverse=True)[:n]``。"

#: ../../library/heapq.rst:190
msgid ""
"Return a list with the *n* smallest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, "
"key=key)[:n]``."
msgstr ""
"从 *iterable* 所定义的数据集中返回前 *n* 个最小元素组成的列表。 如果提供了 *key* 则其应指定一个单参数的函数，用于从 "
"*iterable* 的每个元素中提取比较键 (例如 ``key=str.lower``)。 等价于: ``sorted(iterable, "
"key=key)[:n]``。"

#: ../../library/heapq.rst:196
msgid ""
"The latter two functions perform best for smaller values of *n*.  For larger"
" values, it is more efficient to use the :func:`sorted` function.  Also, "
"when ``n==1``, it is more efficient to use the built-in :func:`min` and "
":func:`max` functions.  If repeated usage of these functions is required, "
"consider turning the iterable into an actual heap."
msgstr ""
"后两个函数在 *n* 值较小时性能最好。 对于更大的值，使用 :func:`sorted` 函数会更有效率。 此外，当 ``n==1`` 时，使用内置的"
" :func:`min` 和 :func:`max` 函数会更有效率。 如果需要重复使用这些函数，请考虑将可迭代对象转为真正的堆。"

#: ../../library/heapq.rst:204
msgid "Basic Examples"
msgstr "基本示例"

#: ../../library/heapq.rst:206
msgid ""
"A `heapsort <https://en.wikipedia.org/wiki/Heapsort>`_ can be implemented by"
" pushing all values onto a heap and then popping off the smallest values one"
" at a time::"
msgstr ""
"`堆排序 <https://en.wikipedia.org/wiki/Heapsort>`_ 可以通过将所有值推入堆中然后每次弹出一个最小值项来实现。"

#: ../../library/heapq.rst:210
msgid ""
">>> def heapsort(iterable):\n"
"...     h = []\n"
"...     for value in iterable:\n"
"...         heappush(h, value)\n"
"...     return [heappop(h) for i in range(len(h))]\n"
"...\n"
">>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
msgstr ""
">>> def heapsort(iterable):\n"
"...     h = []\n"
"...     for value in iterable:\n"
"...         heappush(h, value)\n"
"...     return [heappop(h) for i in range(len(h))]\n"
"...\n"
">>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"

#: ../../library/heapq.rst:219
msgid ""
"This is similar to ``sorted(iterable)``, but unlike :func:`sorted`, this "
"implementation is not stable."
msgstr "这类似于 ``sorted(iterable)``，但与 :func:`sorted` 不同的是这个实现是不稳定的。"

#: ../../library/heapq.rst:222
msgid ""
"Heap elements can be tuples.  This is useful for assigning comparison values"
" (such as task priorities) alongside the main record being tracked::"
msgstr "堆元素可以为元组。这有利于以下做法——在被跟踪的主记录旁边添一个额外的值（例如任务的优先级）用于互相比较："

#: ../../library/heapq.rst:225
msgid ""
">>> h = []\n"
">>> heappush(h, (5, 'write code'))\n"
">>> heappush(h, (7, 'release product'))\n"
">>> heappush(h, (1, 'write spec'))\n"
">>> heappush(h, (3, 'create tests'))\n"
">>> heappop(h)\n"
"(1, 'write spec')"
msgstr ""
">>> h = []\n"
">>> heappush(h, (5, 'write code'))\n"
">>> heappush(h, (7, 'release product'))\n"
">>> heappush(h, (1, 'write spec'))\n"
">>> heappush(h, (3, 'create tests'))\n"
">>> heappop(h)\n"
"(1, 'write spec')"

#: ../../library/heapq.rst:235
msgid "Priority Queue Implementation Notes"
msgstr "优先队列实现说明"

#: ../../library/heapq.rst:237
msgid ""
"A `priority queue <https://en.wikipedia.org/wiki/Priority_queue>`_ is common"
" use for a heap, and it presents several implementation challenges:"
msgstr ""
"`优先队列 <https://en.wikipedia.org/wiki/Priority_queue>`_ "
"是堆的常用场合，并且它的实现包含了多个挑战："

#: ../../library/heapq.rst:240
msgid ""
"Sort stability:  how do you get two tasks with equal priorities to be "
"returned in the order they were originally added?"
msgstr "排序稳定性：如何让两个相同优先级的任务按它们最初被加入队列的顺序返回？"

#: ../../library/heapq.rst:243
msgid ""
"Tuple comparison breaks for (priority, task) pairs if the priorities are "
"equal and the tasks do not have a default comparison order."
msgstr "如果 priority 相同且 task 之间未定义默认比较顺序，则两个 (priority, task) 元组之间的比较会报错。"

#: ../../library/heapq.rst:246
msgid ""
"If the priority of a task changes, how do you move it to a new position in "
"the heap?"
msgstr "如果任务优先级发生改变，你该如何将其移至堆中的新位置？"

#: ../../library/heapq.rst:249
msgid ""
"Or if a pending task needs to be deleted, how do you find it and remove it "
"from the queue?"
msgstr "或者如果一个挂起的任务需要被删除，你该如何找到它并将其移出队列？"

#: ../../library/heapq.rst:252
msgid ""
"A solution to the first two challenges is to store entries as 3-element list"
" including the priority, an entry count, and the task.  The entry count "
"serves as a tie-breaker so that two tasks with the same priority are "
"returned in the order they were added. And since no two entry counts are the"
" same, the tuple comparison will never attempt to directly compare two "
"tasks."
msgstr ""
"针对前两项挑战的一种解决方案是将条目保存为包含优先级、条目计数和任务对象 3 个元素的列表。 "
"条目计数可用来打破平局，这样具有相同优先级的任务将按它们的添加顺序返回。 并且由于没有哪两个条目计数是相同的，元组比较将永远不会直接比较两个任务。"

#: ../../library/heapq.rst:258
msgid ""
"Another solution to the problem of non-comparable tasks is to create a "
"wrapper class that ignores the task item and only compares the priority "
"field::"
msgstr "两个 task 之间不可比的问题的另一种解决方案是——创建一个忽略 task，只比较 priority 字段的包装器类："

#: ../../library/heapq.rst:261
msgid ""
"from dataclasses import dataclass, field\n"
"from typing import Any\n"
"\n"
"@dataclass(order=True)\n"
"class PrioritizedItem:\n"
"    priority: int\n"
"    item: Any=field(compare=False)"
msgstr ""
"from dataclasses import dataclass, field\n"
"from typing import Any\n"
"\n"
"@dataclass(order=True)\n"
"class PrioritizedItem:\n"
"    priority: int\n"
"    item: Any=field(compare=False)"

#: ../../library/heapq.rst:269
msgid ""
"The remaining challenges revolve around finding a pending task and making "
"changes to its priority or removing it entirely.  Finding a task can be done"
" with a dictionary pointing to an entry in the queue."
msgstr "其余的挑战主要包括找到挂起的任务并修改其优先级或将其完全移除。 找到一个任务可使用一个指向队列中条目的字典来实现。"

#: ../../library/heapq.rst:273
msgid ""
"Removing the entry or changing its priority is more difficult because it "
"would break the heap structure invariants.  So, a possible solution is to "
"mark the entry as removed and add a new entry with the revised priority::"
msgstr ""
"移除条目或改变其优先级的操作实现起来更为困难，因为它会破坏堆结构不变量。 "
"因此，一种可能的解决方案是将条目标记为已移除，再添加一个改变了优先级的新条目::"

#: ../../library/heapq.rst:277
msgid ""
"pq = []                         # list of entries arranged in a heap\n"
"entry_finder = {}               # mapping of tasks to entries\n"
"REMOVED = '<removed-task>'      # placeholder for a removed task\n"
"counter = itertools.count()     # unique sequence count\n"
"\n"
"def add_task(task, priority=0):\n"
"    'Add a new task or update the priority of an existing task'\n"
"    if task in entry_finder:\n"
"        remove_task(task)\n"
"    count = next(counter)\n"
"    entry = [priority, count, task]\n"
"    entry_finder[task] = entry\n"
"    heappush(pq, entry)\n"
"\n"
"def remove_task(task):\n"
"    'Mark an existing task as REMOVED.  Raise KeyError if not found.'\n"
"    entry = entry_finder.pop(task)\n"
"    entry[-1] = REMOVED\n"
"\n"
"def pop_task():\n"
"    'Remove and return the lowest priority task. Raise KeyError if empty.'\n"
"    while pq:\n"
"        priority, count, task = heappop(pq)\n"
"        if task is not REMOVED:\n"
"            del entry_finder[task]\n"
"            return task\n"
"    raise KeyError('pop from an empty priority queue')"
msgstr ""
"pq = []                         # 由在堆中处理的条目组成的列表\n"
"entry_finder = {}               # 从任务到条目的映射\n"
"REMOVED = '<removed-task>'      # 已移除任务的占位符\n"
"counter = itertools.count()     # 唯一序列计数\n"
"\n"
"def add_task(task, priority=0):\n"
"    '新增任务或更新现有任务的优先级'\n"
"    if task in entry_finder:\n"
"        remove_task(task)\n"
"    count = next(counter)\n"
"    entry = [priority, count, task]\n"
"    entry_finder[task] = entry\n"
"    heappush(pq, entry)\n"
"\n"
"def remove_task(task):\n"
"    '将现有任务标记为已移除。 如未找到则引发 KeyError。'\n"
"    entry = entry_finder.pop(task)\n"
"    entry[-1] = REMOVED\n"
"\n"
"def pop_task():\n"
"    '移除并返回最低优先级的任务。 如为空则引发 KeyError。'\n"
"    while pq:\n"
"        priority, count, task = heappop(pq)\n"
"        if task is not REMOVED:\n"
"            del entry_finder[task]\n"
"            return task\n"
"    raise KeyError('pop from an empty priority queue')"

#: ../../library/heapq.rst:307
msgid "Theory"
msgstr "理论"

#: ../../library/heapq.rst:309
msgid ""
"Heaps are arrays for which ``a[k] <= a[2*k+1]`` and ``a[k] <= a[2*k+2]`` for"
" all *k*, counting elements from 0.  For the sake of comparison, non-"
"existing elements are considered to be infinite.  The interesting property "
"of a heap is that ``a[0]`` is always its smallest element."
msgstr ""
"堆是通过数组来实现的，其中的元素从 0 开始计数，对于所有的 *k* 都有 ``a[k] <= a[2*k+1]`` 且 ``a[k] <= "
"a[2*k+2]``。 为了便于比较，不存在的元素被视为无穷大。 堆最有趣的特性在于 ``a[0]`` 总是其中最小的元素。"

#: ../../library/heapq.rst:314
msgid ""
"The strange invariant above is meant to be an efficient memory "
"representation for a tournament.  The numbers below are *k*, not ``a[k]``::"
msgstr "上面的特殊不变量是用来作为一场锦标赛的高效内存表示。 下面的数字是 *k* 而不是 ``a[k]``::"

#: ../../library/heapq.rst:317
msgid ""
"                               0\n"
"\n"
"              1                                 2\n"
"\n"
"      3               4                5               6\n"
"\n"
"  7       8       9       10      11      12      13      14\n"
"\n"
"15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30"
msgstr ""
"                               0\n"
"\n"
"              1                                 2\n"
"\n"
"      3               4                5               6\n"
"\n"
"  7       8       9       10      11      12      13      14\n"
"\n"
"15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30"

#: ../../library/heapq.rst:327
msgid ""
"In the tree above, each cell *k* is topping ``2*k+1`` and ``2*k+2``. In a "
"usual binary tournament we see in sports, each cell is the winner over the "
"two cells it tops, and we can trace the winner down the tree to see all "
"opponents s/he had.  However, in many computer applications of such "
"tournaments, we do not need to trace the history of a winner. To be more "
"memory efficient, when a winner is promoted, we try to replace it by "
"something else at a lower level, and the rule becomes that a cell and the "
"two cells it tops contain three different items, but the top cell \"wins\" "
"over the two topped cells."
msgstr ""
"在上面的树中，每个 *k* 单元都位于 ``2*k+1`` 和 ``2*k+2`` 之上。 "
"体育运动中我们经常见到二元锦标赛模式，每个胜者单元都位于另两个单元之上，并且我们可以沿着树形图向下追溯胜者所遇到的所有对手。 "
"但是，在许多采用这种锦标赛模式的计算机应用程序中，我们并不需要追溯胜者的历史。 "
"为了获得更高的内存利用效率，当一个胜者晋级时，我们会用较低层级的另一条目来替代它，因此规则变为一个单元和它之下的两个单元包含三个不同条目，上方单元“胜过”了两个下方单元。"

#: ../../library/heapq.rst:336
msgid ""
"If this heap invariant is protected at all time, index 0 is clearly the "
"overall winner.  The simplest algorithmic way to remove it and find the "
"\"next\" winner is to move some loser (let's say cell 30 in the diagram "
"above) into the 0 position, and then percolate this new 0 down the tree, "
"exchanging values, until the invariant is re-established. This is clearly "
"logarithmic on the total number of items in the tree. By iterating over all "
"items, you get an *O*\\ (*n* log *n*) sort."
msgstr ""
"如果这个堆的不变性始终受到保护，则索引号 0 显然是最终胜出者。 移除它并找出“下一个”胜出者的最简单算法形式是将某个输家（让我们假定是上图中的 30 "
"号单元）移至 0 号位，然后将这个新的 0 号沿着树结构下行，不断进行值的交换，直到不变性得到重建。 这显然会是树中条目总数的对数。 "
"通过迭代所有条目，你将得到一个 *O*\\ (*n* log *n*) 复杂度的排序。"

#: ../../library/heapq.rst:343
msgid ""
"A nice feature of this sort is that you can efficiently insert new items "
"while the sort is going on, provided that the inserted items are not "
"\"better\" than the last 0'th element you extracted.  This is especially "
"useful in simulation contexts, where the tree holds all incoming events, and"
" the \"win\" condition means the smallest scheduled time.  When an event "
"schedules other events for execution, they are scheduled into the future, so"
" they can easily go into the heap.  So, a heap is a good structure for "
"implementing schedulers (this is what I used for my MIDI sequencer :-)."
msgstr ""
"此排序有一个很好的特性就是你可以在排序进行期间高效地插入新条目，前提是插入的条目不比你最近取出的 0 号元素“更好”。 "
"这在模拟上下文时特别有用，在这种情况下树保存的是所有传入事件，“胜出”条件是最小调度时间。 "
"当一个事件将其他事件排入执行计划时，它们的调试时间向未来方向延长，这样它们可方便地入堆。 因此，堆结构很适宜用来实现调度器，我的 MIDI "
"音序器就是用的这个 :-)。"

#: ../../library/heapq.rst:352
msgid ""
"Various structures for implementing schedulers have been extensively "
"studied, and heaps are good for this, as they are reasonably speedy, the "
"speed is almost constant, and the worst case is not much different than the "
"average case. However, there are other representations which are more "
"efficient overall, yet the worst cases might be terrible."
msgstr ""
"用于实现调度器的各种结构都得到了充分的研究，堆是非常适宜的一种，因为它们的速度相当快，并且几乎是恒定的，最坏的情况与平均情况没有太大差别。 "
"虽然还存在其他总体而言更高效的实现方式，但其最坏的情况却可能非常糟糕。"

#: ../../library/heapq.rst:358
msgid ""
"Heaps are also very useful in big disk sorts.  You most probably all know "
"that a big sort implies producing \"runs\" (which are pre-sorted sequences, "
"whose size is usually related to the amount of CPU memory), followed by a "
"merging passes for these runs, which merging is often very cleverly "
"organised [#]_. It is very important that the initial sort produces the "
"longest runs possible.  Tournaments are a good way to achieve that.  If, "
"using all the memory available to hold a tournament, you replace and "
"percolate items that happen to fit the current run, you'll produce runs "
"which are twice the size of the memory for random input, and much better for"
" input fuzzily ordered."
msgstr ""
"堆在大磁盘排序中也非常有用。 你应该已经了解大规模排序会有多个“运行轮次”（即预排序的序列，其大小通常与 CPU "
"内存容量相关），随后这些轮次会进入合并通道，轮次合并的组织往往非常巧妙 [#]_。 非常重要的一点是初始排序应产生尽可能长的运行轮次。 "
"锦标赛模式是达成此目标的好办法。 "
"如果你使用全部有用内存来进行锦标赛，替换和安排恰好适合当前运行轮次的条目，你将可以对于随机输入生成两倍于内存大小的运行轮次，对于模糊排序的输入还会有更好的效果。"

#: ../../library/heapq.rst:368
msgid ""
"Moreover, if you output the 0'th item on disk and get an input which may not"
" fit in the current tournament (because the value \"wins\" over the last "
"output value), it cannot fit in the heap, so the size of the heap decreases."
"  The freed memory could be cleverly reused immediately for progressively "
"building a second heap, which grows at exactly the same rate the first heap "
"is melting.  When the first heap completely vanishes, you switch heaps and "
"start a new run.  Clever and quite effective!"
msgstr ""
"另外，如果你输出磁盘上的第 0 个条目并获得一个可能不适合当前锦标赛的输入（因为其值要“胜过”上一个输出值），它无法被放入堆中，因此堆的尺寸将缩小。 "
"被释放的内存可以被巧妙地立即重用以逐步构建第二个堆，其增长速度与第一个堆的缩减速度正好相同。 当第一个堆完全消失时，你可以切换新堆并启动新的运行轮次。 "
"这样做既聪明又高效！"

#: ../../library/heapq.rst:376
msgid ""
"In a word, heaps are useful memory structures to know.  I use them in a few "
"applications, and I think it is good to keep a 'heap' module around. :-)"
msgstr "总之，堆是值得了解的有用内存结构。 我在一些应用中用到了它们，并且认为保留一个 'heap' 模块是很有意义的。 :-)"

#: ../../library/heapq.rst:380
msgid "Footnotes"
msgstr "备注"

#: ../../library/heapq.rst:381
msgid ""
"The disk balancing algorithms which are current, nowadays, are more annoying"
" than clever, and this is a consequence of the seeking capabilities of the "
"disks. On devices which cannot seek, like big tape drives, the story was "
"quite different, and one had to be very clever to ensure (far in advance) "
"that each tape movement will be the most effective possible (that is, will "
"best participate at \"progressing\" the merge).  Some tapes were even able "
"to read backwards, and this was also used to avoid the rewinding time. "
"Believe me, real good tape sorts were quite spectacular to watch! From all "
"times, sorting has always been a Great Art! :-)"
msgstr ""
"当前时代的磁盘平衡算法与其说是巧妙，不如说是麻烦，这是由磁盘的寻址能力导致的结果。 "
"在无法寻址的设备例如大型磁带机上，情况则相当不同，开发者必须非常聪明地（极为提前地）确保每次磁带转动都尽可能地高效（就是说能够最好地加入到合并“进程”中）。"
" 有些磁带甚至能够反向读取，这也被用来避免倒带的耗时。 请相信我，真正优秀的磁带机排序看起来是极其壮观的，排序从来都是一门伟大的艺术！ :-)"
