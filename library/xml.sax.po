# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.sax.rst:2
msgid ":mod:`!xml.sax` --- Support for SAX2 parsers"
msgstr ":mod:`!xml.sax` --- SAX2 解析器支持"

#: ../../library/xml.sax.rst:11
msgid "**Source code:** :source:`Lib/xml/sax/__init__.py`"
msgstr "**源代码:** :source:`Lib/xml/sax/__init__.py`"

#: ../../library/xml.sax.rst:15
msgid ""
"The :mod:`xml.sax` package provides a number of modules which implement the "
"Simple API for XML (SAX) interface for Python.  The package itself provides "
"the SAX exceptions and the convenience functions which will be most used by "
"users of the SAX API."
msgstr ""
":mod:`xml.sax` 包提供多个模块，它们在 Python 上实现了用于 XML (SAX)  接口的简单 API。 这个包本身为  SAX "
"API 用户提供了一些最常用的 SAX 异常和便捷函数。"

#: ../../library/xml.sax.rst:23
msgid ""
"The :mod:`xml.sax` module is not secure against maliciously constructed "
"data.  If you need to parse untrusted or unauthenticated data see :ref:`xml-"
"vulnerabilities`."
msgstr ""
":mod:`xml.sax` 模块对于恶意构建的数据是不安全的。 如果你需要解析不受信任或未经身份验证的数据，请参阅 :ref:`xml-"
"vulnerabilities`。"

#: ../../library/xml.sax.rst:29
msgid ""
"The SAX parser no longer processes general external entities by default to "
"increase security. Before, the parser created network connections to fetch "
"remote files or loaded local files from the file system for DTD and "
"entities. The feature can be enabled again with method "
":meth:`~xml.sax.xmlreader.XMLReader.setFeature` on the parser object and "
"argument :data:`~xml.sax.handler.feature_external_ges`."
msgstr ""
"SAX 解析器默认不会再处理通用外部实体以便提升安全性。 在此之前，解析器会创建网络连接来获取远程文件或是从 DTD 和实体文件系统中加载本地文件。 "
"此特性可通过在解析器对象上调用 :meth:`~xml.sax.xmlreader.XMLReader.setFeature` 对象并传入参数 "
":data:`~xml.sax.handler.feature_external_ges` 来重新启用。"

#: ../../library/xml.sax.rst:36
msgid "The convenience functions are:"
msgstr "可用的便捷函数如下所列:"

#: ../../library/xml.sax.rst:41
msgid ""
"Create and return a SAX :class:`~xml.sax.xmlreader.XMLReader` object.  The "
"first parser found will be used.  If *parser_list* is provided, it must be "
"an iterable of strings which name modules that have a function named "
":func:`create_parser`.  Modules listed in *parser_list* will be used before "
"modules in the default list of parsers."
msgstr ""
"创建并返回一个 SAX :class:`~xml.sax.xmlreader.XMLReader` 对象。 将返回第一个被找到的解析器。 如果提供了 "
"*parser_list*，它必须为一个包含字符串的可迭代对象，这些字符串指定了具有名为 :func:`create_parser` 函数的模块。 在 "
"*parser_list* 中列出的模块将在默认解析器列表中的模块之前被使用。"

#: ../../library/xml.sax.rst:47
msgid "The *parser_list* argument can be any iterable, not just a list."
msgstr "*parser_list* 参数可以是任意可迭代对象，而不一定是列表。"

#: ../../library/xml.sax.rst:53
msgid ""
"Create a SAX parser and use it to parse a document.  The document, passed in"
" as *filename_or_stream*, can be a filename or a file object.  The *handler*"
" parameter needs to be a SAX :class:`~handler.ContentHandler` instance.  If "
"*error_handler* is given, it must be a SAX :class:`~handler.ErrorHandler` "
"instance; if omitted,  :exc:`SAXParseException` will be raised on all "
"errors.  There is no return value; all work must be done by the *handler* "
"passed in."
msgstr ""
"创建一个 SAX 解析器并用它来解析文档。 用于传入文档的 *filename_or_stream* 可以是一个文件名或文件对象。 *handler* "
"形参必须是一个 SAX :class:`~handler.ContentHandler` 实例。 如果给出了 "
"*error_handler*，则它必须是一个 SAX :class:`~handler.ErrorHandler` "
"实例；如果省略，则对于任何错误都将引发  :exc:`SAXParseException`。 此函数没有返回值；所有操作必须由传入的 *handler*"
" 来完成。"

#: ../../library/xml.sax.rst:64
msgid ""
"Similar to :func:`parse`, but parses from a buffer *string* received as a "
"parameter.  *string* must be a :class:`str` instance or a :term:`bytes-like "
"object`."
msgstr ""
"类似于 :func:`parse`，但解析对象是作为形参传入的缓冲区 *string*。 *string* 必须为 :class:`str` 实例或者 "
":term:`bytes-like object`。"

#: ../../library/xml.sax.rst:68
msgid "Added support of :class:`str` instances."
msgstr "增加了对 :class:`str` 实例的支持。"

#: ../../library/xml.sax.rst:71
msgid ""
"A typical SAX application uses three kinds of objects: readers, handlers and"
" input sources.  \"Reader\" in this context is another term for parser, i.e."
" some piece of code that reads the bytes or characters from the input "
"source, and produces a sequence of events. The events then get distributed "
"to the handler objects, i.e. the reader invokes a method on the handler.  A "
"SAX application must therefore obtain a reader object, create or open the "
"input sources, create the handlers, and connect these objects all together."
"  As the final step of preparation, the reader is called to parse the input."
" During parsing, methods on the handler objects are called based on "
"structural and syntactic events from the input data."
msgstr ""
"典型的 SAX 应用程序会使用三种对象：读取器、处理器和输入源。 "
"“读取器”在此上下文中与解析器同义，即某个从输入源读取字节或字符，并产生事件序列的代码段。 "
"事件随后将被分发给处理器对象，即由读取器唤起处理器上的某个方法。 因此 SAX "
"应用程序必须获取一个读取器对象，创建或打开输入源，创建处理器，并一起连接到这些对象。 作为准备工作的最后一步，将调用读取器来解析输入内容。 "
"在解析过程中，会根据来自输入数据的结构化和语义化事件来调用处理器对象上的方法。"

#: ../../library/xml.sax.rst:82
msgid ""
"For these objects, only the interfaces are relevant; they are normally not "
"instantiated by the application itself.  Since Python does not have an "
"explicit notion of interface, they are formally introduced as classes, but "
"applications may use implementations which do not inherit from the provided "
"classes.  The :class:`~xml.sax.xmlreader.InputSource`, "
":class:`~xml.sax.xmlreader.Locator`, :class:`~xml.sax.xmlreader.Attributes`,"
" :class:`~xml.sax.xmlreader.AttributesNS`, and "
":class:`~xml.sax.xmlreader.XMLReader` interfaces are defined in the module "
":mod:`xml.sax.xmlreader`.  The handler interfaces are defined in "
":mod:`xml.sax.handler`.  For convenience, "
":class:`~xml.sax.xmlreader.InputSource` (which is often instantiated "
"directly) and the handler classes are also available from :mod:`xml.sax`.  "
"These interfaces are described below."
msgstr ""
"就这些对象而言，只有接口部分是需要关注的；它们通常不是由应用程序本身来实例化。 由于 Python "
"没有显式的接口标记法，它们的正式引入形式是类，但应用程序可能会使用并非从已提供的类继承而来的实现。 "
":class:`~xml.sax.xmlreader.InputSource`, "
":class:`~xml.sax.xmlreader.Locator`, :class:`~xml.sax.xmlreader.Attributes`,"
" :class:`~xml.sax.xmlreader.AttributesNS` 以及 "
":class:`~xml.sax.xmlreader.XMLReader` 接口是在 :mod:`xml.sax.xmlreader` 模块中定义的。 "
"处理器接口是在 :mod:`xml.sax.handler` 中定义的。 "
"为了方便起见，:class:`~xml.sax.xmlreader.InputSource` (它往往会被直接实例化) 和处理器类也可以从 "
":mod:`xml.sax` 获得。 这些接口的描述见下文。"

#: ../../library/xml.sax.rst:95
msgid ""
"In addition to these classes, :mod:`xml.sax` provides the following "
"exception classes."
msgstr "除了这些类，:mod:`xml.sax` 还提供了如下异常类。"

#: ../../library/xml.sax.rst:101
msgid ""
"Encapsulate an XML error or warning.  This class can contain basic error or "
"warning information from either the XML parser or the application: it can be"
" subclassed to provide additional functionality or to add localization.  "
"Note that although the handlers defined in the "
":class:`~xml.sax.handler.ErrorHandler` interface receive instances of this "
"exception, it is not required to actually raise the exception --- it is also"
" useful as a container for information."
msgstr ""
"封装某个 XML 错误或警告。 这个类可以包含来自 XML 解析器或应用程序的基本错误或警告信息：它可以被子类化以提供额外的功能或是添加本地化信息。 "
"请注意虽然在 :class:`~xml.sax.handler.ErrorHandler` "
"接口中定义的处理器可以接收该异常的实例，但是并不要求实际引发该异常 --- 它也可以被用作信息的容器。"

#: ../../library/xml.sax.rst:109
msgid ""
"When instantiated, *msg* should be a human-readable description of the "
"error. The optional *exception* parameter, if given, should be ``None`` or "
"an exception that was caught by the parsing code and is being passed along "
"as information."
msgstr ""
"当实例化时，*msg* 应当是适合人类阅读的错误描述。 如果给出了可选的 *exception* 形参，它应当为 ``None`` "
"或者解析代码所捕获的异常并会被作为信息传递出去。"

#: ../../library/xml.sax.rst:113
msgid "This is the base class for the other SAX exception classes."
msgstr "这是其他 SAX 异常类的基类。"

#: ../../library/xml.sax.rst:118
msgid ""
"Subclass of :exc:`SAXException` raised on parse errors. Instances of this "
"class are passed to the methods of the SAX "
":class:`~xml.sax.handler.ErrorHandler` interface to provide information "
"about the parse error.  This class supports the SAX "
":class:`~xml.sax.xmlreader.Locator` interface as well as the "
":class:`SAXException` interface."
msgstr ""
":exc:`SAXException` 的子类，针对解析错误引发。 这个类的实例会被传递给 SAX "
":class:`~xml.sax.handler.ErrorHandler` 接口的方法来提供关于解析错误的信息。 这个类支持 SAX "
":class:`~xml.sax.xmlreader.Locator` 接口以及 :class:`SAXException` 接口。"

#: ../../library/xml.sax.rst:128
msgid ""
"Subclass of :exc:`SAXException` raised when a SAX "
":class:`~xml.sax.xmlreader.XMLReader` is confronted with an unrecognized "
"feature or property.  SAX applications and extensions may use this class for"
" similar purposes."
msgstr ""
":exc:`SAXException` 的子类，当 SAX :class:`~xml.sax.xmlreader.XMLReader` "
"遇到不可识别的特性或属性时引发。 SAX 应用程序和扩展可能会出于类似目的而使用这个类。"

#: ../../library/xml.sax.rst:136
msgid ""
"Subclass of :exc:`SAXException` raised when a SAX "
":class:`~xml.sax.xmlreader.XMLReader` is asked to enable a feature that is "
"not supported, or to set a property to a value that the implementation does "
"not support.  SAX applications and extensions may use this class for similar"
" purposes."
msgstr ""
":exc:`SAXException` 的子类，当 SAX :class:`~xml.sax.xmlreader.XMLReader` "
"被要求启用某个不受支持的特性，或者将某个属性设为具体实现不支持的值时引发。 SAX 应用程序和扩展可能会出于类似目的而使用这个类。"

#: ../../library/xml.sax.rst:145
msgid "`SAX: The Simple API for XML <http://www.saxproject.org/>`_"
msgstr "`SAX: The Simple API for XML <http://www.saxproject.org/>`_"

#: ../../library/xml.sax.rst:146
msgid ""
"This site is the focal point for the definition of the SAX API.  It provides"
" a Java implementation and online documentation.  Links to implementations "
"and historical information are also available."
msgstr "这个网站是 SAX API 定义的焦点。 它提供了一个 Java 实现以及在线文档。 还包括其他实现的链接和历史信息。"

#: ../../library/xml.sax.rst:150
msgid "Module :mod:`xml.sax.handler`"
msgstr ":mod:`xml.sax.handler` 模块"

#: ../../library/xml.sax.rst:151
msgid "Definitions of the interfaces for application-provided objects."
msgstr "应用程序所提供对象的接口定义。"

#: ../../library/xml.sax.rst:153
msgid "Module :mod:`xml.sax.saxutils`"
msgstr ":mod:`xml.sax.saxutils` 模块"

#: ../../library/xml.sax.rst:154
msgid "Convenience functions for use in SAX applications."
msgstr "可在 SAX 应用程序中使用的便捷函数。"

#: ../../library/xml.sax.rst:156
msgid "Module :mod:`xml.sax.xmlreader`"
msgstr ":mod:`xml.sax.xmlreader` 模块"

#: ../../library/xml.sax.rst:157
msgid "Definitions of the interfaces for parser-provided objects."
msgstr "解析器所提供对象的接口定义。"

#: ../../library/xml.sax.rst:163
msgid "SAXException Objects"
msgstr "SAXException 对象"

#: ../../library/xml.sax.rst:165
msgid ""
"The :class:`SAXException` exception class supports the following methods:"
msgstr ":class:`SAXException` 异常类支持下列方法:"

#: ../../library/xml.sax.rst:170
msgid "Return a human-readable message describing the error condition."
msgstr "返回描述错误条件的适合人类阅读的消息。"

#: ../../library/xml.sax.rst:175
msgid "Return an encapsulated exception object, or ``None``."
msgstr "返回一个封装的异常对象或者 ``None``。"
