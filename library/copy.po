# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/copy.rst:2
msgid ":mod:`copy` --- Shallow and deep copy operations"
msgstr ""

#: ../../library/copy.rst:7
msgid "**Source code:** :source:`Lib/copy.py`"
msgstr ""

#: ../../library/copy.rst:11
msgid ""
"Assignment statements in Python do not copy objects, they create bindings "
"between a target and an object. For collections that are mutable or contain "
"mutable items, a copy is sometimes needed so one can change one copy without"
" changing the other. This module provides generic shallow and deep copy "
"operations (explained below)."
msgstr ""

#: ../../library/copy.rst:18
msgid "Interface summary:"
msgstr ""

#: ../../library/copy.rst:22
msgid "Return a shallow copy of *x*."
msgstr ""

#: ../../library/copy.rst:27
msgid "Return a deep copy of *x*."
msgstr ""

#: ../../library/copy.rst:32
msgid "Raised for module specific errors."
msgstr ""

#: ../../library/copy.rst:36
msgid ""
"The difference between shallow and deep copying is only relevant for "
"compound objects (objects that contain other objects, like lists or class "
"instances):"
msgstr ""

#: ../../library/copy.rst:39
msgid ""
"A *shallow copy* constructs a new compound object and then (to the extent "
"possible) inserts *references* into it to the objects found in the original."
msgstr ""

#: ../../library/copy.rst:42
msgid ""
"A *deep copy* constructs a new compound object and then, recursively, "
"inserts *copies* into it of the objects found in the original."
msgstr ""

#: ../../library/copy.rst:45
msgid ""
"Two problems often exist with deep copy operations that don't exist with "
"shallow copy operations:"
msgstr ""

#: ../../library/copy.rst:48
msgid ""
"Recursive objects (compound objects that, directly or indirectly, contain a "
"reference to themselves) may cause a recursive loop."
msgstr ""

#: ../../library/copy.rst:51
msgid ""
"Because deep copy copies everything it may copy too much, such as data which"
" is intended to be shared between copies."
msgstr ""

#: ../../library/copy.rst:54
msgid "The :func:`deepcopy` function avoids these problems by:"
msgstr ""

#: ../../library/copy.rst:56
msgid ""
"keeping a ``memo`` dictionary of objects already copied during the current "
"copying pass; and"
msgstr ""

#: ../../library/copy.rst:59
msgid ""
"letting user-defined classes override the copying operation or the set of "
"components copied."
msgstr ""

#: ../../library/copy.rst:62
msgid ""
"This module does not copy types like module, method, stack trace, stack "
"frame, file, socket, window, or any similar types.  It does \"copy\" "
"functions and classes (shallow and deeply), by returning the original object"
" unchanged; this is compatible with the way these are treated by the "
":mod:`pickle` module."
msgstr ""

#: ../../library/copy.rst:67
msgid ""
"Shallow copies of dictionaries can be made using :meth:`dict.copy`, and of "
"lists by assigning a slice of the entire list, for example, ``copied_list = "
"original_list[:]``."
msgstr ""

#: ../../library/copy.rst:73
msgid ""
"Classes can use the same interfaces to control copying that they use to "
"control pickling.  See the description of module :mod:`pickle` for "
"information on these methods.  In fact, the :mod:`copy` module uses the "
"registered pickle functions from the :mod:`copyreg` module."
msgstr ""

#: ../../library/copy.rst:82
msgid ""
"In order for a class to define its own copy implementation, it can define "
"special methods :meth:`__copy__` and :meth:`__deepcopy__`.  The former is "
"called to implement the shallow copy operation; no additional arguments are "
"passed. The latter is called to implement the deep copy operation; it is "
"passed one argument, the ``memo`` dictionary.  If the :meth:`__deepcopy__` "
"implementation needs to make a deep copy of a component, it should call the "
":func:`deepcopy` function with the component as first argument and the memo "
"dictionary as second argument."
msgstr ""

#: ../../library/copy.rst:94
msgid "Module :mod:`pickle`"
msgstr ""

#: ../../library/copy.rst:94
msgid ""
"Discussion of the special methods used to support object state retrieval and"
" restoration."
msgstr ""
