# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Freesand Leo <yuqinju@163.com>, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-task.rst:6
msgid "Coroutines and Tasks"
msgstr "协程与任务"

#: ../../library/asyncio-task.rst:8
msgid ""
"This section outlines high-level asyncio APIs to work with coroutines and "
"Tasks."
msgstr "本节将简述用于协程与任务的高层级 API。"

#: ../../library/asyncio-task.rst:19 ../../library/asyncio-task.rst:125
msgid "Coroutines"
msgstr "协程"

#: ../../library/asyncio-task.rst:21
msgid "**Source code:** :source:`Lib/asyncio/coroutines.py`"
msgstr "*源码：* :source:`Lib/asyncio/coroutines.py`"

#: ../../library/asyncio-task.rst:25
msgid ""
":term:`Coroutines <coroutine>` declared with the async/await syntax is the "
"preferred way of writing asyncio applications.  For example, the following "
"snippet of code prints \"hello\", waits 1 second, and then prints "
"\"world\"::"
msgstr ""
"通过 async/await 语法来声明 :term:`协程 <coroutine>` 是编写 asyncio 应用的推荐方式。 例如，以下代码段会打印"
" \"hello\"，等待 1 秒，再打印 \"world\"::"

#: ../../library/asyncio-task.rst:41
msgid ""
"Note that simply calling a coroutine will not schedule it to be executed::"
msgstr "注意：简单地调用一个协程并不会使其被调度执行"

#: ../../library/asyncio-task.rst:47
msgid "To actually run a coroutine, asyncio provides three main mechanisms:"
msgstr "要实际运行协程，asyncio 提供了三种主要机制:"

#: ../../library/asyncio-task.rst:49
msgid ""
"The :func:`asyncio.run` function to run the top-level entry point \"main()\""
" function (see the above example.)"
msgstr ":func:`asyncio.run` 函数用来运行最高层级的入口点 \"main()\" 函数 (参见上面的示例。)"

#: ../../library/asyncio-task.rst:52
msgid ""
"Awaiting on a coroutine.  The following snippet of code will print \"hello\""
" after waiting for 1 second, and then print \"world\" after waiting for "
"*another* 2 seconds::"
msgstr "对协程执行 await。以下代码段会在等待 1 秒后打印 \"hello\"，然后 *再次* 等待 2 秒后打印 \"world\"::"

#: ../../library/asyncio-task.rst:73
msgid "Expected output::"
msgstr "预期的输出::"

#: ../../library/asyncio-task.rst:80
msgid ""
"The :func:`asyncio.create_task` function to run coroutines concurrently as "
"asyncio :class:`Tasks <Task>`."
msgstr ""
":func:`asyncio.create_task` 函数用来并发运行作为 asyncio :class:`任务 <Task>` 的多个协程。"

#: ../../library/asyncio-task.rst:83
msgid ""
"Let's modify the above example and run two ``say_after`` coroutines "
"*concurrently*::"
msgstr "让我们修改以上示例，*并发* 运行两个 ``say_after`` 协程::"

#: ../../library/asyncio-task.rst:102
msgid ""
"Note that expected output now shows that the snippet runs 1 second faster "
"than before::"
msgstr "注意，预期的输出显示代码段的运行时间比之前快了 1 秒::"

#: ../../library/asyncio-task.rst:114
msgid "Awaitables"
msgstr "可等待对象"

#: ../../library/asyncio-task.rst:116
msgid ""
"We say that an object is an **awaitable** object if it can be used in an "
":keyword:`await` expression.  Many asyncio APIs are designed to accept "
"awaitables."
msgstr ""
"如果一个对象可以在 :keyword:`await`  语句中使用，那么它就是 **可等待** 对象。许多 asyncio API "
"都被设计为接受可等待对象。"

#: ../../library/asyncio-task.rst:120
msgid ""
"There are three main types of *awaitable* objects: **coroutines**, "
"**Tasks**, and **Futures**."
msgstr "*可等待* 对象有三种主要类型: **协程**, **任务** 和 **Future**."

#: ../../library/asyncio-task.rst:126
msgid ""
"Python coroutines are *awaitables* and therefore can be awaited from other "
"coroutines::"
msgstr "Python 协程属于 *可等待* 对象，因此可以在其他协程中被等待::"

#: ../../library/asyncio-task.rst:147
msgid ""
"In this documentation the term \"coroutine\" can be used for two closely "
"related concepts:"
msgstr "在本文档中 \"协程\" 可用来表示两个紧密关联的概念:"

#: ../../library/asyncio-task.rst:150
msgid "a *coroutine function*: an :keyword:`async def` function;"
msgstr "*协程函数*: 定义形式为 :keyword:`async def` 的函数;"

#: ../../library/asyncio-task.rst:152
msgid ""
"a *coroutine object*: an object returned by calling a *coroutine function*."
msgstr "*协程对象*: 调用 *协程函数* 所返回的对象。"

#: ../../library/asyncio-task.rst:155
msgid ""
"asyncio also supports legacy :ref:`generator-based "
"<asyncio_generator_based_coro>` coroutines."
msgstr "asyncio 也支持旧式的 :ref:`基于生成器的 <asyncio_generator_based_coro>` 协程。"

#: ../../library/asyncio-task.rst:160
msgid "Tasks"
msgstr "任务"

#: ../../library/asyncio-task.rst:161
msgid "*Tasks* are used to schedule coroutines *concurrently*."
msgstr "*任务* 被用来“并行的”调度协程"

#: ../../library/asyncio-task.rst:163
msgid ""
"When a coroutine is wrapped into a *Task* with functions like "
":func:`asyncio.create_task` the coroutine is automatically scheduled to run "
"soon::"
msgstr "当一个协程通过 :func:`asyncio.create_task` 等函数被封装为一个 *任务*，该协程会被自动调度执行::"

#: ../../library/asyncio-task.rst:185
msgid "Futures"
msgstr "Futures"

#: ../../library/asyncio-task.rst:186
msgid ""
"A :class:`Future` is a special **low-level** awaitable object that "
"represents an **eventual result** of an asynchronous operation."
msgstr ":class:`Future` 是一种特殊的 **低层级** 可等待对象，表示一个异步操作的 **最终结果**。"

#: ../../library/asyncio-task.rst:189
msgid ""
"When a Future object is *awaited* it means that the coroutine will wait "
"until the Future is resolved in some other place."
msgstr "当一个 Future 对象 *被等待*，这意味着协程将保持等待直到该 Future 对象在其他地方操作完毕。"

#: ../../library/asyncio-task.rst:192
msgid ""
"Future objects in asyncio are needed to allow callback-based code to be used"
" with async/await."
msgstr "在 asyncio 中需要 Future 对象以便允许通过 async/await 使用基于回调的代码。"

#: ../../library/asyncio-task.rst:195
msgid ""
"Normally **there is no need** to create Future objects at the application "
"level code."
msgstr "通常情况下 **没有必要** 在应用层级的代码中创建 Future 对象。"

#: ../../library/asyncio-task.rst:198
msgid ""
"Future objects, sometimes exposed by libraries and some asyncio APIs, can be"
" awaited::"
msgstr "Future 对象有时会由库和某些 asyncio API 暴露给用户，用作可等待对象::"

#: ../../library/asyncio-task.rst:210
msgid ""
"A good example of a low-level function that returns a Future object is "
":meth:`loop.run_in_executor`."
msgstr "一个很好的返回对象的低层级函数的示例是 :meth:`loop.run_in_executor`。"

#: ../../library/asyncio-task.rst:215
msgid "Running an asyncio Program"
msgstr "运行 asyncio 程序"

#: ../../library/asyncio-task.rst:219
msgid "Execute the :term:`coroutine` *coro* and return the result."
msgstr "执行 :term:`coroutine` *coro* 并返回结果。"

#: ../../library/asyncio-task.rst:221
msgid ""
"This function runs the passed coroutine, taking care of managing the asyncio"
" event loop, *finalizing asynchronous generators*, and closing the "
"threadpool."
msgstr "此函数会运行传入的协程，负责管理 asyncio 事件循环，*终结异步生成器*，并关闭线程池。"

#: ../../library/asyncio-task.rst:225
msgid ""
"This function cannot be called when another asyncio event loop is running in"
" the same thread."
msgstr "当有其他 asyncio 事件循环在同一线程中运行时，此函数不能被调用。"

#: ../../library/asyncio-task.rst:228
msgid "If *debug* is ``True``, the event loop will be run in debug mode."
msgstr "如果 *debug* 为 ``True``，事件循环将以调试模式运行。"

#: ../../library/asyncio-task.rst:230
msgid ""
"This function always creates a new event loop and closes it at the end.  It "
"should be used as a main entry point for asyncio programs, and should "
"ideally only be called once."
msgstr "此函数总是会创建一个新的事件循环并在结束时关闭之。它应当被用作  asyncio 程序的主入口点，理想情况下应当只被调用一次。"

#: ../../library/asyncio-task.rst:234 ../../library/asyncio-task.rst:382
#: ../../library/asyncio-task.rst:524 ../../library/asyncio-task.rst:657
msgid "Example::"
msgstr "示例::"

#: ../../library/asyncio-task.rst:244
msgid "Updated to use :meth:`loop.shutdown_default_executor`."
msgstr "更新为使用 :meth:`loop.shutdown_default_executor`。"

#: ../../library/asyncio-task.rst:248
msgid ""
"The source code for ``asyncio.run()`` can be found in "
":source:`Lib/asyncio/runners.py`."
msgstr "``asyncio.run()`` 的源代码可以在 :source:`Lib/asyncio/runners.py` 中找到。"

#: ../../library/asyncio-task.rst:252
msgid "Creating Tasks"
msgstr "创建任务"

#: ../../library/asyncio-task.rst:254
msgid "**Source code:** :source:`Lib/asyncio/tasks.py`"
msgstr "**源码：** :source:`Lib/asyncio/tasks.py`"

#: ../../library/asyncio-task.rst:260
msgid ""
"Wrap the *coro* :ref:`coroutine <coroutine>` into a :class:`Task` and "
"schedule its execution.  Return the Task object."
msgstr "将 *coro* :ref:`协程 <coroutine>` 封装为一个 :class:`Task` 并调度其执行。返回 Task 对象。"

#: ../../library/asyncio-task.rst:263
msgid ""
"If *name* is not ``None``, it is set as the name of the task using "
":meth:`Task.set_name`."
msgstr "*name* 不为 ``None``，它将使用 :meth:`Task.set_name` 来设为任务的名称。"

#: ../../library/asyncio-task.rst:266
msgid ""
"The task is executed in the loop returned by :func:`get_running_loop`, "
":exc:`RuntimeError` is raised if there is no running loop in current thread."
msgstr ""
"该任务会在 :func:`get_running_loop` 返回的循环中执行，如果当前线程没有在运行的循环则会引发 "
":exc:`RuntimeError`。"

#: ../../library/asyncio-task.rst:272
msgid ""
"Save a reference to the result of this function, to avoid a task "
"disappearing mid-execution. The event loop only keeps weak references to "
"tasks. A task that isn't referenced elsewhere may get garbage collected at "
"any time, even before it's done. For reliable \"fire-and-forget\" background"
" tasks, gather them in a collection::"
msgstr ""
"保存一个指向此函数的结果的引用，以避免任务在执行过程中消失。 事件循环将只保留对任务的弱引用。 "
"未在其他地方被引用的任务可能在任何时候被作为垃圾回收，即使是在它被完成之前。 如果需要可靠的“发射后不用管”后台任务，请将它们放到一个多项集中::"

#: ../../library/asyncio-task.rst:294 ../../library/asyncio-task.rst:846
msgid "Added the *name* parameter."
msgstr "增加了 *name* 形参。"

#: ../../library/asyncio-task.rst:299
msgid "Sleeping"
msgstr "休眠"

#: ../../library/asyncio-task.rst:303
msgid "Block for *delay* seconds."
msgstr "阻塞 *delay* 指定的秒数。"

#: ../../library/asyncio-task.rst:305
msgid ""
"If *result* is provided, it is returned to the caller when the coroutine "
"completes."
msgstr "如果指定了 *result*，则当协程完成时将其返回给调用者。"

#: ../../library/asyncio-task.rst:308
msgid ""
"``sleep()`` always suspends the current task, allowing other tasks to run."
msgstr "``sleep()`` 总是会挂起当前任务，以允许其他任务运行。"

#: ../../library/asyncio-task.rst:311
msgid ""
"Setting the delay to 0 provides an optimized path to allow other tasks to "
"run. This can be used by long-running functions to avoid blocking the event "
"loop for the full duration of the function call."
msgstr "将 delay 设为 0 将提供一个经优化的路径以允许其他任务运行。 这可供长期间运行的函数使用以避免在函数调用的全过程中阻塞事件循环。"

#: ../../library/asyncio-task.rst:320
msgid ""
"The ``loop`` parameter.  This function has been implicitly getting the "
"current running loop since 3.7.  See :ref:`What's New in 3.10's Removed "
"section <whatsnew310-removed>` for more information."
msgstr ""
"``loop`` 形参。 这个函数从 3.7 开始就会隐式地获取当前正在运行的事件循环。 更多信息请参阅 :ref:`3.10 "
"有什么新变化的“已移除内容”章节 <whatsnew310-removed>`。"

#: ../../library/asyncio-task.rst:323
msgid ""
"Example of coroutine displaying the current date every second for 5 "
"seconds::"
msgstr "以下协程示例运行 5 秒，每秒显示一次当前日期::"

#: ../../library/asyncio-task.rst:341 ../../library/asyncio-task.rst:377
#: ../../library/asyncio-task.rst:431 ../../library/asyncio-task.rst:485
#: ../../library/asyncio-task.rst:519 ../../library/asyncio-task.rst:549
#: ../../library/asyncio-task.rst:608 ../../library/asyncio-task.rst:643
#: ../../library/asyncio-task.rst:663
msgid "Removed the *loop* parameter."
msgstr "移除了 *loop* 形参。"

#: ../../library/asyncio-task.rst:346
msgid "Running Tasks Concurrently"
msgstr "并发运行任务"

#: ../../library/asyncio-task.rst:350
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* sequence "
"*concurrently*."
msgstr "*并发* 运行 *aws* 序列中的 :ref:`可等待对象 <asyncio-awaitables>`。"

#: ../../library/asyncio-task.rst:353
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a"
" Task."
msgstr "如果 *aws* 中的某个可等待对象为协程，它将自动被作为一个任务调度。"

#: ../../library/asyncio-task.rst:356
msgid ""
"If all awaitables are completed successfully, the result is an aggregate "
"list of returned values.  The order of result values corresponds to the "
"order of awaitables in *aws*."
msgstr "如果所有可等待对象都成功完成，结果将是一个由所有返回值聚合而成的列表。结果值的顺序与 *aws* 中可等待对象的顺序一致。"

#: ../../library/asyncio-task.rst:360
msgid ""
"If *return_exceptions* is ``False`` (default), the first raised exception is"
" immediately propagated to the task that awaits on ``gather()``.  Other "
"awaitables in the *aws* sequence **won't be cancelled** and will continue to"
" run."
msgstr ""
"如果 *return_exceptions* 为 ``False`` (默认)，所引发的首个异常会立即传播给等待 ``gather()`` "
"的任务。*aws* 序列中的其他可等待对象 **不会被取消** 并将继续运行。"

#: ../../library/asyncio-task.rst:365
msgid ""
"If *return_exceptions* is ``True``, exceptions are treated the same as "
"successful results, and aggregated in the result list."
msgstr "如果 *return_exceptions* 为 ``True``，异常会和成功的结果一样处理，并聚合至结果列表。"

#: ../../library/asyncio-task.rst:368
msgid ""
"If ``gather()`` is *cancelled*, all submitted awaitables (that have not "
"completed yet) are also *cancelled*."
msgstr "如果 ``gather()`` *被取消*，所有被提交 (尚未完成) 的可等待对象也会 *被取消*。"

#: ../../library/asyncio-task.rst:371
msgid ""
"If any Task or Future from the *aws* sequence is *cancelled*, it is treated "
"as if it raised :exc:`CancelledError` -- the ``gather()`` call is **not** "
"cancelled in this case.  This is to prevent the cancellation of one "
"submitted Task/Future to cause other Tasks/Futures to be cancelled."
msgstr ""
"如果 *aws* 序列中的任一 Task 或 Future 对象 *被取消*，它将被当作引发了 :exc:`CancelledError` 一样处理 "
"-- 在此情况下 ``gather()`` 调用 **不会** 被取消。这是为了防止一个已提交的 Task/Future 被取消导致其他 "
"Tasks/Future 也被取消。"

#: ../../library/asyncio-task.rst:420
msgid ""
"If *return_exceptions* is False, cancelling gather() after it has been "
"marked done won't cancel any submitted awaitables. For instance, gather can "
"be marked done after propagating an exception to the caller, therefore, "
"calling ``gather.cancel()`` after catching an exception (raised by one of "
"the awaitables) from gather won't cancel any other awaitables."
msgstr ""
"如果 *return_exceptions* 为 False，则在 gather() 被标记为已完成后取消它将不会取消任何已提交的可等待对象。 "
"例如，在将一个异常传播给调用者之后，gather 可被标记为已完成，因此，在从 gather 捕获一个（由可等待对象所引发的）异常之后调用 "
"``gather.cancel()`` 将不会取消任何其他可等待对象。"

#: ../../library/asyncio-task.rst:427
msgid ""
"If the *gather* itself is cancelled, the cancellation is propagated "
"regardless of *return_exceptions*."
msgstr "如果 *gather* 本身被取消，则无论 *return_exceptions* 取值为何，消息都会被传播。"

#: ../../library/asyncio-task.rst:434
msgid ""
"Deprecation warning is emitted if no positional arguments are provided or "
"not all positional arguments are Future-like objects and there is no running"
" event loop."
msgstr "如果未提供位置参数或者并非所有位置参数均为 Future 类对象并且没有正在运行的事件循环则会发出弃用警告。"

#: ../../library/asyncio-task.rst:441
msgid "Shielding From Cancellation"
msgstr "屏蔽取消操作"

#: ../../library/asyncio-task.rst:445
msgid ""
"Protect an :ref:`awaitable object <asyncio-awaitables>` from being "
":meth:`cancelled <Task.cancel>`."
msgstr "保护一个 :ref:`可等待对象 <asyncio-awaitables>` 防止其被 :meth:`取消 <Task.cancel>`。"

#: ../../library/asyncio-task.rst:448 ../../library/asyncio-task.rst:501
msgid "If *aw* is a coroutine it is automatically scheduled as a Task."
msgstr "如果 *aw* 是一个协程，它将自动被作为任务调度。"

#: ../../library/asyncio-task.rst:450
msgid "The statement::"
msgstr "以下语句::"

#: ../../library/asyncio-task.rst:455
msgid "is equivalent to::"
msgstr "相当于::"

#: ../../library/asyncio-task.rst:459
msgid ""
"*except* that if the coroutine containing it is cancelled, the Task running "
"in ``something()`` is not cancelled.  From the point of view of "
"``something()``, the cancellation did not happen. Although its caller is "
"still cancelled, so the \"await\" expression still raises a "
":exc:`CancelledError`."
msgstr ""
"*不同之处* 在于如果包含它的协程被取消，在 ``something()`` 中运行的任务不会被取消。从 ``something()`` "
"的角度看来，取消操作并没有发生。然而其调用者已被取消，因此 \"await\" 表达式仍然会引发 :exc:`CancelledError`。"

#: ../../library/asyncio-task.rst:465
msgid ""
"If ``something()`` is cancelled by other means (i.e. from within itself) "
"that would also cancel ``shield()``."
msgstr "如果通过其他方式取消 ``something()`` (例如在其内部操作) 则 ``shield()`` 也会取消。"

#: ../../library/asyncio-task.rst:468
msgid ""
"If it is desired to completely ignore cancellation (not recommended) the "
"``shield()`` function should be combined with a try/except clause, as "
"follows::"
msgstr "如果希望完全忽略取消操作 (不推荐) 则 ``shield()`` 函数需要配合一个 try/except 代码段，如下所示::"

#: ../../library/asyncio-task.rst:480
msgid ""
"Save a reference to tasks passed to this function, to avoid a task "
"disappearing mid-execution. The event loop only keeps weak references to "
"tasks. A task that isn't referenced elsewhere may get garbage collected at "
"any time, even before it's done."
msgstr ""
"保存一个传给此函数的任务的引用，以避免任务在执行过程中消失。 事件循环将只保留对任务的弱引用。 "
"未在其他地方被引用的任务可能在任何时候被作为垃圾回收，即使是在它被完成之前。"

#: ../../library/asyncio-task.rst:488
msgid ""
"Deprecation warning is emitted if *aw* is not Future-like object and there "
"is no running event loop."
msgstr "如果 *aw* 不是 Future 类对象并且没有正在运行的事件循环则会发出弃用警告。"

#: ../../library/asyncio-task.rst:494
msgid "Timeouts"
msgstr "超时"

#: ../../library/asyncio-task.rst:498
msgid ""
"Wait for the *aw* :ref:`awaitable <asyncio-awaitables>` to complete with a "
"timeout."
msgstr "等待 *aw* :ref:`可等待对象 <asyncio-awaitables>` 完成，指定 timeout 秒数后超时。"

#: ../../library/asyncio-task.rst:503
msgid ""
"*timeout* can either be ``None`` or a float or int number of seconds to wait"
" for.  If *timeout* is ``None``, block until the future completes."
msgstr ""
"*timeout* 可以为 ``None``，也可以为 float 或 int 型数值表示的等待秒数。如果 *timeout* 为 "
"``None``，则等待直到完成。"

#: ../../library/asyncio-task.rst:507
msgid ""
"If a timeout occurs, it cancels the task and raises "
":exc:`asyncio.TimeoutError`."
msgstr "如果发生超时，任务将取消并引发 :exc:`asyncio.TimeoutError`."

#: ../../library/asyncio-task.rst:510
msgid ""
"To avoid the task :meth:`cancellation <Task.cancel>`, wrap it in "
":func:`shield`."
msgstr "要避免任务 :meth:`取消 <Task.cancel>`，可以加上 :func:`shield`。"

#: ../../library/asyncio-task.rst:513
msgid ""
"The function will wait until the future is actually cancelled, so the total "
"wait time may exceed the *timeout*. If an exception happens during "
"cancellation, it is propagated."
msgstr "此函数将等待直到 Future 确实被取消，所以总等待时间可能超过 *timeout*。 如果在取消期间发生了异常，异常将会被传播。"

#: ../../library/asyncio-task.rst:517
msgid "If the wait is cancelled, the future *aw* is also cancelled."
msgstr "如果等待被取消，则 *aw* 指定的对象也会被取消。"

#: ../../library/asyncio-task.rst:544
msgid ""
"When *aw* is cancelled due to a timeout, ``wait_for`` waits for *aw* to be "
"cancelled.  Previously, it raised :exc:`asyncio.TimeoutError` immediately."
msgstr ""
"当 *aw* 因超时被取消，``wait_for`` 会等待 *aw* 被取消。之前版本则将立即引发 "
":exc:`asyncio.TimeoutError`。"

#: ../../library/asyncio-task.rst:554
msgid "Waiting Primitives"
msgstr "简单等待"

#: ../../library/asyncio-task.rst:558
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* iterable "
"concurrently and block until the condition specified by *return_when*."
msgstr ""
"并发地运行 *aws* 可迭代对象中的 :ref:`可等待对象 <asyncio-awaitables>` 并进入阻塞状态直到满足 "
"*return_when* 所指定的条件。"

#: ../../library/asyncio-task.rst:562
msgid "The *aws* iterable must not be empty."
msgstr "*aws* 可迭代对象必须不为空。"

#: ../../library/asyncio-task.rst:564
msgid "Returns two sets of Tasks/Futures: ``(done, pending)``."
msgstr "返回两个 Task/Future 集合: ``(done, pending)``。"

#: ../../library/asyncio-task.rst:566
msgid "Usage::"
msgstr "用法："

#: ../../library/asyncio-task.rst:570
msgid ""
"*timeout* (a float or int), if specified, can be used to control the maximum"
" number of seconds to wait before returning."
msgstr "如指定 *timeout* (float 或 int 类型) 则它将被用于控制返回之前等待的最长秒数。"

#: ../../library/asyncio-task.rst:573
msgid ""
"Note that this function does not raise :exc:`asyncio.TimeoutError`. Futures "
"or Tasks that aren't done when the timeout occurs are simply returned in the"
" second set."
msgstr ""
"请注意此函数不会引发 :exc:`asyncio.TimeoutError`。当超时发生时，未完成的 Future 或 Task 将在指定秒数后被返回。"

#: ../../library/asyncio-task.rst:577
msgid ""
"*return_when* indicates when this function should return.  It must be one of"
" the following constants:"
msgstr "*return_when* 指定此函数应在何时返回。它必须为以下常数之一:"

#: ../../library/asyncio-task.rst:583
msgid "Constant"
msgstr "常量"

#: ../../library/asyncio-task.rst:583
msgid "Description"
msgstr "描述"

#: ../../library/asyncio-task.rst:585
msgid ":const:`FIRST_COMPLETED`"
msgstr ":const:`FIRST_COMPLETED`"

#: ../../library/asyncio-task.rst:585
msgid "The function will return when any future finishes or is cancelled."
msgstr "函数将在任意可等待对象结束或取消时返回。"

#: ../../library/asyncio-task.rst:588
msgid ":const:`FIRST_EXCEPTION`"
msgstr ":const:`FIRST_EXCEPTION`"

#: ../../library/asyncio-task.rst:588
msgid ""
"The function will return when any future finishes by raising an exception.  "
"If no future raises an exception then it is equivalent to "
":const:`ALL_COMPLETED`."
msgstr "函数将在任意可等待对象因引发异常而结束时返回。当没有引发任何异常时它就相当于 :const:`ALL_COMPLETED`。"

#: ../../library/asyncio-task.rst:594
msgid ":const:`ALL_COMPLETED`"
msgstr ":const:`ALL_COMPLETED`"

#: ../../library/asyncio-task.rst:594
msgid "The function will return when all futures finish or are cancelled."
msgstr "函数将在所有可等待对象结束或取消时返回。"

#: ../../library/asyncio-task.rst:598
msgid ""
"Unlike :func:`~asyncio.wait_for`, ``wait()`` does not cancel the futures "
"when a timeout occurs."
msgstr "与 :func:`~asyncio.wait_for` 不同，``wait()`` 在超时发生时不会取消可等待对象。"

#: ../../library/asyncio-task.rst:603
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a"
" Task.  Passing coroutines objects to ``wait()`` directly is deprecated as "
"it leads to :ref:`confusing behavior <asyncio_example_wait_coroutine>`."
msgstr ""
"如果 *aws* 中的某个可等待对象为协程，它将自动被作为任务调度。直接向 ``wait()`` 传入协程对象已弃用，因为这会导致 "
":ref:`令人迷惑的行为 <asyncio_example_wait_coroutine>`。"

#: ../../library/asyncio-task.rst:614
msgid ""
"``wait()`` schedules coroutines as Tasks automatically and later returns "
"those implicitly created Task objects in ``(done, pending)`` sets.  "
"Therefore the following code won't work as expected::"
msgstr ""
"``wait()`` 会自动以任务的形式调度协程，之后将以 ``(done, pending)`` "
"集合形式返回显式创建的任务对象。因此以下代码并不会有预期的行为::"

#: ../../library/asyncio-task.rst:627
msgid "Here is how the above snippet can be fixed::"
msgstr "以上代码段的修正方法如下::"

#: ../../library/asyncio-task.rst:640
msgid "Passing coroutine objects to ``wait()`` directly is deprecated."
msgstr "直接向 ``wait()`` 传入协程对象的方式已弃用。"

#: ../../library/asyncio-task.rst:649
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* iterable "
"concurrently.  Return an iterator of coroutines. Each coroutine returned can"
" be awaited to get the earliest next result from the iterable of the "
"remaining awaitables."
msgstr ""
"并发地运行 *aws* 可迭代对象中的 :ref:`可等待对象 <asyncio-awaitables>`。 返回一个协程的迭代器。 "
"所返回的每个协程可被等待以从剩余的可等待对象的可迭代对象中获得最早的下一个结果。"

#: ../../library/asyncio-task.rst:654
msgid ""
"Raises :exc:`asyncio.TimeoutError` if the timeout occurs before all Futures "
"are done."
msgstr "如果在所有 Future 对象完成前发生超时则将引发 :exc:`asyncio.TimeoutError`。"

#: ../../library/asyncio-task.rst:666
msgid ""
"Deprecation warning is emitted if not all awaitable objects in the *aws* "
"iterable are Future-like objects and there is no running event loop."
msgstr "如果 *aws* 可迭代对象中的可等待对象不全为 Future 类对象并且没有正在运行的事件循环则会发出弃用警告。"

#: ../../library/asyncio-task.rst:672
msgid "Running in Threads"
msgstr "在线程中运行"

#: ../../library/asyncio-task.rst:676
msgid "Asynchronously run function *func* in a separate thread."
msgstr "在不同的线程中异步地运行函数 *func*。"

#: ../../library/asyncio-task.rst:678
msgid ""
"Any \\*args and \\*\\*kwargs supplied for this function are directly passed "
"to *func*. Also, the current :class:`contextvars.Context` is propagated, "
"allowing context variables from the event loop thread to be accessed in the "
"separate thread."
msgstr ""
"向此函数提供的任何 \\*args 和 \\*\\*kwargs 会被直接传给 *func*。 并且，当前 "
":class:`contextvars.Context` 会被传播，允许在不同的线程中访问来自事件循环的上下文变量。"

#: ../../library/asyncio-task.rst:683
msgid ""
"Return a coroutine that can be awaited to get the eventual result of *func*."
msgstr "返回一个可被等待以获取 *func* 的最终结果的协程。"

#: ../../library/asyncio-task.rst:685
msgid ""
"This coroutine function is primarily intended to be used for executing IO-"
"bound functions/methods that would otherwise block the event loop if they "
"were ran in the main thread. For example::"
msgstr "这个协程函数主要是用于执行在其他情况下会阻塞事件循环的 IO 密集型函数/方法。 例如::"

#: ../../library/asyncio-task.rst:715
msgid ""
"Directly calling ``blocking_io()`` in any coroutine would block the event "
"loop for its duration, resulting in an additional 1 second of run time. "
"Instead, by using ``asyncio.to_thread()``, we can run it in a separate "
"thread without blocking the event loop."
msgstr ""
"在任何协程中直接调用 ``blocking_io()`` 将会在调用期间阻塞事件循环，导致额外的 1 秒运行时间。 但是，通过改用 "
"``asyncio.to_thread()``，我们可以在单独的线程中运行它从而不会阻塞事件循环。"

#: ../../library/asyncio-task.rst:722
msgid ""
"Due to the :term:`GIL`, ``asyncio.to_thread()`` can typically only be used "
"to make IO-bound functions non-blocking. However, for extension modules that"
" release the GIL or alternative Python implementations that don't have one, "
"``asyncio.to_thread()`` can also be used for CPU-bound functions."
msgstr ""
"由于 :term:`GIL` 的存在，``asyncio.to_thread()`` 通常只能被用来将 IO 密集型函数变为非阻塞的。 但是，对于会释放"
" GIL 的扩展模块或无此限制的替代性 Python 实现来说，``asyncio.to_thread()`` 也可被用于 CPU 密集型函数。"

#: ../../library/asyncio-task.rst:731
msgid "Scheduling From Other Threads"
msgstr "跨线程调度"

#: ../../library/asyncio-task.rst:735
msgid "Submit a coroutine to the given event loop.  Thread-safe."
msgstr "向指定事件循环提交一个协程。（线程安全）"

#: ../../library/asyncio-task.rst:737
msgid ""
"Return a :class:`concurrent.futures.Future` to wait for the result from "
"another OS thread."
msgstr "返回一个 :class:`concurrent.futures.Future` 以等待来自其他 OS 线程的结果。"

#: ../../library/asyncio-task.rst:740
msgid ""
"This function is meant to be called from a different OS thread than the one "
"where the event loop is running.  Example::"
msgstr "此函数应该从另一个 OS 线程中调用，而非事件循环运行所在线程。示例::"

#: ../../library/asyncio-task.rst:752
msgid ""
"If an exception is raised in the coroutine, the returned Future will be "
"notified.  It can also be used to cancel the task in the event loop::"
msgstr "如果在协程内产生了异常，将会通知返回的 Future 对象。它也可被用来取消事件循环中的任务::"

#: ../../library/asyncio-task.rst:766
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""
"参见 :ref:`concurrency and multithreading <asyncio-multithreading>` 部分的文档。"

#: ../../library/asyncio-task.rst:769
msgid ""
"Unlike other asyncio functions this function requires the *loop* argument to"
" be passed explicitly."
msgstr "不同于其他 asyncio 函数，此函数要求显式地传入 *loop* 参数。"

#: ../../library/asyncio-task.rst:776
msgid "Introspection"
msgstr "内省"

#: ../../library/asyncio-task.rst:781
msgid ""
"Return the currently running :class:`Task` instance, or ``None`` if no task "
"is running."
msgstr "返回当前运行的 :class:`Task` 实例，如果没有正在运行的任务则返回 ``None``。"

#: ../../library/asyncio-task.rst:784
msgid ""
"If *loop* is ``None`` :func:`get_running_loop` is used to get the current "
"loop."
msgstr "如果 *loop* 为 ``None`` 则会使用 :func:`get_running_loop` 获取当前事件循环。"

#: ../../library/asyncio-task.rst:792
msgid ""
"Return a set of not yet finished :class:`Task` objects run by the loop."
msgstr "返回事件循环所运行的未完成的 :class:`Task` 对象的集合。"

#: ../../library/asyncio-task.rst:795
msgid ""
"If *loop* is ``None``, :func:`get_running_loop` is used for getting current "
"loop."
msgstr "如果 *loop* 为 ``None``，则会使用 :func:`get_running_loop` 获取当前事件循环。"

#: ../../library/asyncio-task.rst:802
msgid "Task Object"
msgstr "Task 对象"

#: ../../library/asyncio-task.rst:806
msgid ""
"A :class:`Future-like <Future>` object that runs a Python :ref:`coroutine "
"<coroutine>`.  Not thread-safe."
msgstr ""
"一个与 :class:`Future 类似 <Future>` 的对象，可运行 Python :ref:`协程 <coroutine>`。非线程安全。"

#: ../../library/asyncio-task.rst:809
msgid ""
"Tasks are used to run coroutines in event loops. If a coroutine awaits on a "
"Future, the Task suspends the execution of the coroutine and waits for the "
"completion of the Future.  When the Future is *done*, the execution of the "
"wrapped coroutine resumes."
msgstr ""
"Task 对象被用来在事件循环中运行协程。如果一个协程在等待一个 Future 对象，Task 对象会挂起该协程的执行并等待该 Future "
"对象完成。当该 Future 对象 *完成*，被打包的协程将恢复执行。"

#: ../../library/asyncio-task.rst:815
msgid ""
"Event loops use cooperative scheduling: an event loop runs one Task at a "
"time.  While a Task awaits for the completion of a Future, the event loop "
"runs other Tasks, callbacks, or performs IO operations."
msgstr ""
"事件循环使用协同日程调度: 一个事件循环每次运行一个 Task 对象。而一个 Task 对象会等待一个 Future 对象完成，该事件循环会运行其他 "
"Task、回调或执行 IO 操作。"

#: ../../library/asyncio-task.rst:820
msgid ""
"Use the high-level :func:`asyncio.create_task` function to create Tasks, or "
"the low-level :meth:`loop.create_task` or :func:`ensure_future` functions.  "
"Manual instantiation of Tasks is discouraged."
msgstr ""
"使用高层级的 :func:`asyncio.create_task` 函数来创建 Task 对象，也可用低层级的 "
":meth:`loop.create_task` 或 :func:`ensure_future` 函数。不建议手动实例化 Task 对象。"

#: ../../library/asyncio-task.rst:825
msgid ""
"To cancel a running Task use the :meth:`cancel` method.  Calling it will "
"cause the Task to throw a :exc:`CancelledError` exception into the wrapped "
"coroutine.  If a coroutine is awaiting on a Future object during "
"cancellation, the Future object will be cancelled."
msgstr ""
"要取消一个正在运行的 Task 对象可使用 :meth:`cancel` 方法。调用此方法将使该 Task 对象抛出一个 "
":exc:`CancelledError` 异常给打包的协程。如果取消期间一个协程正在对 Future 对象执行 await，该 Future "
"对象也将被取消。"

#: ../../library/asyncio-task.rst:830
msgid ""
":meth:`cancelled` can be used to check if the Task was cancelled. The method"
" returns ``True`` if the wrapped coroutine did not suppress the "
":exc:`CancelledError` exception and was actually cancelled."
msgstr ""
":meth:`cancelled` 可被用来检测 Task 对象是否被取消。如果打包的协程没有抑制 :exc:`CancelledError` "
"异常并且确实被取消，该方法将返回 ``True``。"

#: ../../library/asyncio-task.rst:835
msgid ""
":class:`asyncio.Task` inherits from :class:`Future` all of its APIs except "
":meth:`Future.set_result` and :meth:`Future.set_exception`."
msgstr ""
":class:`asyncio.Task` 从 :class:`Future` 继承了其除 :meth:`Future.set_result` 和 "
":meth:`Future.set_exception` 以外的所有 API。"

#: ../../library/asyncio-task.rst:839
msgid ""
"Tasks support the :mod:`contextvars` module.  When a Task is created it "
"copies the current context and later runs its coroutine in the copied "
"context."
msgstr ""
"Task 对象支持 :mod:`contextvars` 模块。当一个 Task 对象被创建，它将复制当前上下文，然后在复制的上下文中运行其协程。"

#: ../../library/asyncio-task.rst:843
msgid "Added support for the :mod:`contextvars` module."
msgstr "加入对 :mod:`contextvars` 模块的支持。"

#: ../../library/asyncio-task.rst:849
msgid ""
"Deprecation warning is emitted if *loop* is not specified and there is no "
"running event loop."
msgstr "如果未指定 *loop* 并且没有正在运行的事件循环则会发出弃用警告。"

#: ../../library/asyncio-task.rst:855
msgid "Request the Task to be cancelled."
msgstr "请求取消 Task 对象。"

#: ../../library/asyncio-task.rst:857
msgid ""
"This arranges for a :exc:`CancelledError` exception to be thrown into the "
"wrapped coroutine on the next cycle of the event loop."
msgstr "这将安排在下一轮事件循环中抛出一个 :exc:`CancelledError` 异常给被封包的协程。"

#: ../../library/asyncio-task.rst:860
msgid ""
"The coroutine then has a chance to clean up or even deny the request by "
"suppressing the exception with a :keyword:`try` ... ... ``except "
"CancelledError`` ... :keyword:`finally` block. Therefore, unlike "
":meth:`Future.cancel`, :meth:`Task.cancel` does not guarantee that the Task "
"will be cancelled, although suppressing cancellation completely is not "
"common and is actively discouraged."
msgstr ""
"协程在之后有机会进行清理甚至使用 :keyword:`try` ... ... ``except CancelledError`` ... "
":keyword:`finally` 代码块抑制异常来拒绝请求。不同于 "
":meth:`Future.cancel`，:meth:`Task.cancel` 不保证 Task "
"会被取消，虽然抑制完全取消并不常见，也很不鼓励这样做。"

#: ../../library/asyncio-task.rst:868
msgid "Added the *msg* parameter."
msgstr "增加了 *msg* 形参。"

#: ../../library/asyncio-task.rst:873
msgid ""
"The following example illustrates how coroutines can intercept the "
"cancellation request::"
msgstr "以下示例演示了协程是如何侦听取消请求的::"

#: ../../library/asyncio-task.rst:912
msgid "Return ``True`` if the Task is *cancelled*."
msgstr "如果 Task 对象 *被取消* 则返回 ``True``。"

#: ../../library/asyncio-task.rst:914
msgid ""
"The Task is *cancelled* when the cancellation was requested with "
":meth:`cancel` and the wrapped coroutine propagated the "
":exc:`CancelledError` exception thrown into it."
msgstr ""
"当使用 :meth:`cancel` 发出取消请求时 Task 会被 *取消*，其封包的协程将传播被抛入的 :exc:`CancelledError` "
"异常。"

#: ../../library/asyncio-task.rst:920
msgid "Return ``True`` if the Task is *done*."
msgstr "如果 Task 对象 *已完成* 则返回 ``True``。"

#: ../../library/asyncio-task.rst:922
msgid ""
"A Task is *done* when the wrapped coroutine either returned a value, raised "
"an exception, or the Task was cancelled."
msgstr "当 Task 所封包的协程返回一个值、引发一个异常或 Task 本身被取消时，则会被认为 *已完成*。"

#: ../../library/asyncio-task.rst:927
msgid "Return the result of the Task."
msgstr "返回 Task 的结果。"

#: ../../library/asyncio-task.rst:929
msgid ""
"If the Task is *done*, the result of the wrapped coroutine is returned (or "
"if the coroutine raised an exception, that exception is re-raised.)"
msgstr "如果 Task 对象 *已完成*，其封包的协程的结果会被返回 (或者当协程引发异常时，该异常会被重新引发。)"

#: ../../library/asyncio-task.rst:933 ../../library/asyncio-task.rst:947
msgid ""
"If the Task has been *cancelled*, this method raises a :exc:`CancelledError`"
" exception."
msgstr "如果 Task 对象 *被取消*，此方法会引发一个 :exc:`CancelledError` 异常。"

#: ../../library/asyncio-task.rst:936
msgid ""
"If the Task's result isn't yet available, this method raises a "
":exc:`InvalidStateError` exception."
msgstr "如果 Task 对象的结果还不可用，此方法会引发一个 :exc:`InvalidStateError` 异常。"

#: ../../library/asyncio-task.rst:941
msgid "Return the exception of the Task."
msgstr "返回 Task 对象的异常。"

#: ../../library/asyncio-task.rst:943
msgid ""
"If the wrapped coroutine raised an exception that exception is returned.  If"
" the wrapped coroutine returned normally this method returns ``None``."
msgstr "如果所封包的协程引发了一个异常，该异常将被返回。如果所封包的协程正常返回则该方法将返回 ``None``。"

#: ../../library/asyncio-task.rst:950
msgid ""
"If the Task isn't *done* yet, this method raises an :exc:`InvalidStateError`"
" exception."
msgstr "如果 Task 对象尚未 *完成*，此方法将引发一个 :exc:`InvalidStateError` 异常。"

#: ../../library/asyncio-task.rst:955
msgid "Add a callback to be run when the Task is *done*."
msgstr "添加一个回调，将在 Task 对象 *完成* 时被运行。"

#: ../../library/asyncio-task.rst:957 ../../library/asyncio-task.rst:966
msgid "This method should only be used in low-level callback-based code."
msgstr "此方法应该仅在低层级的基于回调的代码中使用。"

#: ../../library/asyncio-task.rst:959
msgid ""
"See the documentation of :meth:`Future.add_done_callback` for more details."
msgstr "要了解更多细节请查看 :meth:`Future.add_done_callback` 的文档。"

#: ../../library/asyncio-task.rst:964
msgid "Remove *callback* from the callbacks list."
msgstr "从回调列表中移除 *callback* 。"

#: ../../library/asyncio-task.rst:968
msgid ""
"See the documentation of :meth:`Future.remove_done_callback` for more "
"details."
msgstr "要了解更多细节请查看 :meth:`Future.remove_done_callback` 的文档。"

#: ../../library/asyncio-task.rst:973
msgid "Return the list of stack frames for this Task."
msgstr "返回此 Task 对象的栈框架列表。"

#: ../../library/asyncio-task.rst:975
msgid ""
"If the wrapped coroutine is not done, this returns the stack where it is "
"suspended.  If the coroutine has completed successfully or was cancelled, "
"this returns an empty list. If the coroutine was terminated by an exception,"
" this returns the list of traceback frames."
msgstr ""
"如果所封包的协程未完成，这将返回其挂起所在的栈。如果协程已成功完成或被取消，这将返回一个空列表。如果协程被一个异常终止，这将返回回溯框架列表。"

#: ../../library/asyncio-task.rst:981
msgid "The frames are always ordered from oldest to newest."
msgstr "框架总是从按从旧到新排序。"

#: ../../library/asyncio-task.rst:983
msgid "Only one stack frame is returned for a suspended coroutine."
msgstr "每个被挂起的协程只返回一个栈框架。"

#: ../../library/asyncio-task.rst:985
msgid ""
"The optional *limit* argument sets the maximum number of frames to return; "
"by default all available frames are returned. The ordering of the returned "
"list differs depending on whether a stack or a traceback is returned: the "
"newest frames of a stack are returned, but the oldest frames of a traceback "
"are returned.  (This matches the behavior of the traceback module.)"
msgstr ""
"可选的 *limit* "
"参数指定返回框架的数量上限；默认返回所有框架。返回列表的顺序要看是返回一个栈还是一个回溯：栈返回最新的框架，回溯返回最旧的框架。(这与 "
"traceback 模块的行为保持一致。)"

#: ../../library/asyncio-task.rst:994
msgid "Print the stack or traceback for this Task."
msgstr "打印此 Task 对象的栈或回溯。"

#: ../../library/asyncio-task.rst:996
msgid ""
"This produces output similar to that of the traceback module for the frames "
"retrieved by :meth:`get_stack`."
msgstr "此方法产生的输出类似于 traceback 模块通过 :meth:`get_stack` 所获取的框架。"

#: ../../library/asyncio-task.rst:999
msgid "The *limit* argument is passed to :meth:`get_stack` directly."
msgstr "*limit* 参数会直接传递给 :meth:`get_stack`。"

#: ../../library/asyncio-task.rst:1001
msgid ""
"The *file* argument is an I/O stream to which the output is written; by "
"default output is written to :data:`sys.stdout`."
msgstr "*file* 参数是输出所写入的 I/O 流；在默认情况下输出会写入到 :data:`sys.stdout`。"

#: ../../library/asyncio-task.rst:1006
msgid "Return the coroutine object wrapped by the :class:`Task`."
msgstr "返回由 :class:`Task` 包装的协程对象。"

#: ../../library/asyncio-task.rst:1012
msgid "Return the name of the Task."
msgstr "返回 Task 的名称。"

#: ../../library/asyncio-task.rst:1014
msgid ""
"If no name has been explicitly assigned to the Task, the default asyncio "
"Task implementation generates a default name during instantiation."
msgstr "如果没有一个 Task 名称被显式地赋值，默认的 asyncio Task 实现会在实例化期间生成一个默认名称。"

#: ../../library/asyncio-task.rst:1022
msgid "Set the name of the Task."
msgstr "设置 Task 的名称。"

#: ../../library/asyncio-task.rst:1024
msgid ""
"The *value* argument can be any object, which is then converted to a string."
msgstr "*value* 参数可以为任意对象，它随后会被转换为字符串。"

#: ../../library/asyncio-task.rst:1027
msgid ""
"In the default Task implementation, the name will be visible in the "
":func:`repr` output of a task object."
msgstr "在默认的 Task 实现中，名称将在任务对象的 :func:`repr` 输出中可见。"

#: ../../library/asyncio-task.rst:1036
msgid "Generator-based Coroutines"
msgstr "基于生成器的协程"

#: ../../library/asyncio-task.rst:1040
msgid ""
"Support for generator-based coroutines is **deprecated** and is removed in "
"Python 3.11."
msgstr "对基于生成器的协程的支持已被 **弃用** 并将在 Python 3.11 中被移除。"

#: ../../library/asyncio-task.rst:1043
msgid ""
"Generator-based coroutines predate async/await syntax.  They are Python "
"generators that use ``yield from`` expressions to await on Futures and other"
" coroutines."
msgstr ""
"基于生成器的协程是 async/await 语法的前身。它们是使用 ``yield from`` 语句创建的 Python 生成器，可以等待 "
"Future 和其他协程。"

#: ../../library/asyncio-task.rst:1047
msgid ""
"Generator-based coroutines should be decorated with "
":func:`@asyncio.coroutine <asyncio.coroutine>`, although this is not "
"enforced."
msgstr ""
"基于生成器的协程应该使用 :func:`@asyncio.coroutine <asyncio.coroutine>` 装饰，虽然这并非强制。"

#: ../../library/asyncio-task.rst:1054
msgid "Decorator to mark generator-based coroutines."
msgstr "用来标记基于生成器的协程的装饰器。"

#: ../../library/asyncio-task.rst:1056
msgid ""
"This decorator enables legacy generator-based coroutines to be compatible "
"with async/await code::"
msgstr "此装饰器使得旧式的基于生成器的协程能与 async/await 代码相兼容::"

#: ../../library/asyncio-task.rst:1066
msgid "This decorator should not be used for :keyword:`async def` coroutines."
msgstr "此装饰器不应该被用于 :keyword:`async def` 协程。"

#: ../../library/asyncio-task.rst:1071
msgid "Use :keyword:`async def` instead."
msgstr "请改用 :keyword:`async def`。"

#: ../../library/asyncio-task.rst:1075
msgid "Return ``True`` if *obj* is a :ref:`coroutine object <coroutine>`."
msgstr "如果 *obj* 是一个 :ref:`协程对象 <coroutine>` 则返回 ``True``。"

#: ../../library/asyncio-task.rst:1077
msgid ""
"This method is different from :func:`inspect.iscoroutine` because it returns"
" ``True`` for generator-based coroutines."
msgstr "此方法不同于 :func:`inspect.iscoroutine` 因为它对基于生成器的协程返回 ``True``。"

#: ../../library/asyncio-task.rst:1082
msgid "Return ``True`` if *func* is a :ref:`coroutine function <coroutine>`."
msgstr "如果 *func* 是一个 :ref:`协程函数 <coroutine>` 则返回 ``True``。"

#: ../../library/asyncio-task.rst:1085
msgid ""
"This method is different from :func:`inspect.iscoroutinefunction` because it"
" returns ``True`` for generator-based coroutine functions decorated with "
":func:`@coroutine <coroutine>`."
msgstr ""
"此方法不同于 :func:`inspect.iscoroutinefunction` 因为它对以 :func:`@coroutine "
"<coroutine>` 装饰的基于生成器的协程函数返回 ``True``。"
