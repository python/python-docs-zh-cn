# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-task.rst:6
msgid "Coroutines and Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:8
msgid ""
"This section outlines high-level asyncio APIs to work with coroutines and "
"Tasks."
msgstr ""

#: ../../library/asyncio-task.rst:19 ../../library/asyncio-task.rst:148
msgid "Coroutines"
msgstr ""

#: ../../library/asyncio-task.rst:21
msgid "**Source code:** :source:`Lib/asyncio/coroutines.py`"
msgstr ""

#: ../../library/asyncio-task.rst:25
msgid ""
":term:`Coroutines <coroutine>` declared with the async/await syntax is the "
"preferred way of writing asyncio applications.  For example, the following "
"snippet of code prints \"hello\", waits 1 second, and then prints "
"\"world\"::"
msgstr ""

#: ../../library/asyncio-task.rst:41
msgid ""
"Note that simply calling a coroutine will not schedule it to be executed::"
msgstr ""

#: ../../library/asyncio-task.rst:47
msgid ""
"To actually run a coroutine, asyncio provides the following mechanisms:"
msgstr ""

#: ../../library/asyncio-task.rst:49
msgid ""
"The :func:`asyncio.run` function to run the top-level entry point \"main()\""
" function (see the above example.)"
msgstr ""

#: ../../library/asyncio-task.rst:52
msgid ""
"Awaiting on a coroutine.  The following snippet of code will print \"hello\""
" after waiting for 1 second, and then print \"world\" after waiting for "
"*another* 2 seconds::"
msgstr ""

#: ../../library/asyncio-task.rst:73
msgid "Expected output::"
msgstr ""

#: ../../library/asyncio-task.rst:80
msgid ""
"The :func:`asyncio.create_task` function to run coroutines concurrently as "
"asyncio :class:`Tasks <Task>`."
msgstr ""

#: ../../library/asyncio-task.rst:83
msgid ""
"Let's modify the above example and run two ``say_after`` coroutines "
"*concurrently*::"
msgstr ""

#: ../../library/asyncio-task.rst:102
msgid ""
"Note that expected output now shows that the snippet runs 1 second faster "
"than before::"
msgstr ""

#: ../../library/asyncio-task.rst:110
msgid ""
"The :class:`asyncio.TaskGroup` class provides a more modern alternative to "
":func:`create_task`. Using this API, the last example becomes::"
msgstr ""

#: ../../library/asyncio-task.rst:128
msgid "The timing and output should be the same as for the previous version."
msgstr ""

#: ../../library/asyncio-task.rst:130
msgid ":class:`asyncio.TaskGroup`."
msgstr ""

#: ../../library/asyncio-task.rst:137
msgid "Awaitables"
msgstr ""

#: ../../library/asyncio-task.rst:139
msgid ""
"We say that an object is an **awaitable** object if it can be used in an "
":keyword:`await` expression.  Many asyncio APIs are designed to accept "
"awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:143
msgid ""
"There are three main types of *awaitable* objects: **coroutines**, "
"**Tasks**, and **Futures**."
msgstr ""

#: ../../library/asyncio-task.rst:149
msgid ""
"Python coroutines are *awaitables* and therefore can be awaited from other "
"coroutines::"
msgstr ""

#: ../../library/asyncio-task.rst:170
msgid ""
"In this documentation the term \"coroutine\" can be used for two closely "
"related concepts:"
msgstr ""

#: ../../library/asyncio-task.rst:173
msgid "a *coroutine function*: an :keyword:`async def` function;"
msgstr ""

#: ../../library/asyncio-task.rst:175
msgid ""
"a *coroutine object*: an object returned by calling a *coroutine function*."
msgstr ""

#: ../../library/asyncio-task.rst:180
msgid "Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:181
msgid "*Tasks* are used to schedule coroutines *concurrently*."
msgstr ""

#: ../../library/asyncio-task.rst:183
msgid ""
"When a coroutine is wrapped into a *Task* with functions like "
":func:`asyncio.create_task` the coroutine is automatically scheduled to run "
"soon::"
msgstr ""

#: ../../library/asyncio-task.rst:205
msgid "Futures"
msgstr ""

#: ../../library/asyncio-task.rst:206
msgid ""
"A :class:`Future` is a special **low-level** awaitable object that "
"represents an **eventual result** of an asynchronous operation."
msgstr ""

#: ../../library/asyncio-task.rst:209
msgid ""
"When a Future object is *awaited* it means that the coroutine will wait "
"until the Future is resolved in some other place."
msgstr ""

#: ../../library/asyncio-task.rst:212
msgid ""
"Future objects in asyncio are needed to allow callback-based code to be used"
" with async/await."
msgstr ""

#: ../../library/asyncio-task.rst:215
msgid ""
"Normally **there is no need** to create Future objects at the application "
"level code."
msgstr ""

#: ../../library/asyncio-task.rst:218
msgid ""
"Future objects, sometimes exposed by libraries and some asyncio APIs, can be"
" awaited::"
msgstr ""

#: ../../library/asyncio-task.rst:230
msgid ""
"A good example of a low-level function that returns a Future object is "
":meth:`loop.run_in_executor`."
msgstr ""

#: ../../library/asyncio-task.rst:235
msgid "Creating Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:237
msgid "**Source code:** :source:`Lib/asyncio/tasks.py`"
msgstr ""

#: ../../library/asyncio-task.rst:243
msgid ""
"Wrap the *coro* :ref:`coroutine <coroutine>` into a :class:`Task` and "
"schedule its execution.  Return the Task object."
msgstr ""

#: ../../library/asyncio-task.rst:246
msgid ""
"If *name* is not ``None``, it is set as the name of the task using "
":meth:`Task.set_name`."
msgstr ""

#: ../../library/asyncio-task.rst:249
msgid ""
"An optional keyword-only *context* argument allows specifying a custom "
":class:`contextvars.Context` for the *coro* to run in. The current context "
"copy is created when no *context* is provided."
msgstr ""

#: ../../library/asyncio-task.rst:253
msgid ""
"The task is executed in the loop returned by :func:`get_running_loop`, "
":exc:`RuntimeError` is raised if there is no running loop in current thread."
msgstr ""

#: ../../library/asyncio-task.rst:259
msgid ""
":meth:`asyncio.TaskGroup.create_task` is a newer alternative that allows for"
" convenient waiting for a group of related tasks."
msgstr ""

#: ../../library/asyncio-task.rst:264
msgid ""
"Save a reference to the result of this function, to avoid a task "
"disappearing mid-execution. The event loop only keeps weak references to "
"tasks. A task that isn't referenced elsewhere may get garbage collected at "
"any time, even before it's done. For reliable \"fire-and-forget\" background"
" tasks, gather them in a collection::"
msgstr ""

#: ../../library/asyncio-task.rst:286 ../../library/asyncio-task.rst:1012
msgid "Added the *name* parameter."
msgstr ""

#: ../../library/asyncio-task.rst:289 ../../library/asyncio-task.rst:1019
msgid "Added the *context* parameter."
msgstr ""

#: ../../library/asyncio-task.rst:294
msgid "Task Cancellation"
msgstr ""

#: ../../library/asyncio-task.rst:296
msgid ""
"Tasks can easily and safely be cancelled. When a task is cancelled, "
":exc:`asyncio.CancelledError` will be raised in the task at the next "
"opportunity."
msgstr ""

#: ../../library/asyncio-task.rst:300
msgid ""
"It is recommended that coroutines use ``try/finally`` blocks to robustly "
"perform clean-up logic. In case :exc:`asyncio.CancelledError` is explicitly "
"caught, it should generally be propagated when clean-up is complete. "
":exc:`asyncio.CancelledError` directly subclasses :exc:`BaseException` so "
"most code will not need to be aware of it."
msgstr ""

#: ../../library/asyncio-task.rst:306
msgid ""
"The asyncio components that enable structured concurrency, like "
":class:`asyncio.TaskGroup` and :func:`asyncio.timeout`, are implemented "
"using cancellation internally and might misbehave if a coroutine swallows "
":exc:`asyncio.CancelledError`. Similarly, user code should not generally "
"call :meth:`uncancel <asyncio.Task.uncancel>`. However, in cases when "
"suppressing :exc:`asyncio.CancelledError` is truly desired, it is necessary "
"to also call ``uncancel()`` to completely remove the cancellation state."
msgstr ""

#: ../../library/asyncio-task.rst:318
msgid "Task Groups"
msgstr ""

#: ../../library/asyncio-task.rst:320
msgid ""
"Task groups combine a task creation API with a convenient and reliable way "
"to wait for all tasks in the group to finish."
msgstr ""

#: ../../library/asyncio-task.rst:325
msgid ""
"An :ref:`asynchronous context manager <async-context-managers>` holding a "
"group of tasks. Tasks can be added to the group using :meth:`create_task`. "
"All tasks are awaited when the context manager exits."
msgstr ""

#: ../../library/asyncio-task.rst:334
msgid ""
"Create a task in this task group. The signature matches that of "
":func:`asyncio.create_task`."
msgstr ""

#: ../../library/asyncio-task.rst:337 ../../library/asyncio-task.rst:467
#: ../../library/asyncio-task.rst:595 ../../library/asyncio-task.rst:653
#: ../../library/asyncio-task.rst:679 ../../library/asyncio-task.rst:719
#: ../../library/asyncio-task.rst:815
msgid "Example::"
msgstr ""

#: ../../library/asyncio-task.rst:345
msgid ""
"The ``async with`` statement will wait for all tasks in the group to finish."
" While waiting, new tasks may still be added to the group (for example, by "
"passing ``tg`` into one of the coroutines and calling ``tg.create_task()`` "
"in that coroutine). Once the last task has finished and the ``async with`` "
"block is exited, no new tasks may be added to the group."
msgstr ""

#: ../../library/asyncio-task.rst:352
msgid ""
"The first time any of the tasks belonging to the group fails with an "
"exception other than :exc:`asyncio.CancelledError`, the remaining tasks in "
"the group are cancelled. No further tasks can then be added to the group. At"
" this point, if the body of the ``async with`` statement is still active "
"(i.e., :meth:`~object.__aexit__` hasn't been called yet), the task directly "
"containing the ``async with`` statement is also cancelled. The resulting "
":exc:`asyncio.CancelledError` will interrupt an ``await``, but it will not "
"bubble out of the containing ``async with`` statement."
msgstr ""

#: ../../library/asyncio-task.rst:362
msgid ""
"Once all tasks have finished, if any tasks have failed with an exception "
"other than :exc:`asyncio.CancelledError`, those exceptions are combined in "
"an :exc:`ExceptionGroup` or :exc:`BaseExceptionGroup` (as appropriate; see "
"their documentation) which is then raised."
msgstr ""

#: ../../library/asyncio-task.rst:369
msgid ""
"Two base exceptions are treated specially: If any task fails with "
":exc:`KeyboardInterrupt` or :exc:`SystemExit`, the task group still cancels "
"the remaining tasks and waits for them, but then the initial "
":exc:`KeyboardInterrupt` or :exc:`SystemExit` is re-raised instead of "
":exc:`ExceptionGroup` or :exc:`BaseExceptionGroup`."
msgstr ""

#: ../../library/asyncio-task.rst:375
msgid ""
"If the body of the ``async with`` statement exits with an exception (so "
":meth:`~object.__aexit__` is called with an exception set), this is treated "
"the same as if one of the tasks failed: the remaining tasks are cancelled "
"and then waited for, and non-cancellation exceptions are grouped into an "
"exception group and raised. The exception passed into "
":meth:`~object.__aexit__`, unless it is :exc:`asyncio.CancelledError`, is "
"also included in the exception group. The same special case is made for "
":exc:`KeyboardInterrupt` and :exc:`SystemExit` as in the previous paragraph."
msgstr ""

#: ../../library/asyncio-task.rst:389
msgid "Sleeping"
msgstr ""

#: ../../library/asyncio-task.rst:393
msgid "Block for *delay* seconds."
msgstr ""

#: ../../library/asyncio-task.rst:395
msgid ""
"If *result* is provided, it is returned to the caller when the coroutine "
"completes."
msgstr ""

#: ../../library/asyncio-task.rst:398
msgid ""
"``sleep()`` always suspends the current task, allowing other tasks to run."
msgstr ""

#: ../../library/asyncio-task.rst:401
msgid ""
"Setting the delay to 0 provides an optimized path to allow other tasks to "
"run. This can be used by long-running functions to avoid blocking the event "
"loop for the full duration of the function call."
msgstr ""

#: ../../library/asyncio-task.rst:407
msgid ""
"Example of coroutine displaying the current date every second for 5 "
"seconds::"
msgstr ""

#: ../../library/asyncio-task.rst:425 ../../library/asyncio-task.rst:516
#: ../../library/asyncio-task.rst:570 ../../library/asyncio-task.rst:744
#: ../../library/asyncio-task.rst:798 ../../library/asyncio-task.rst:821
msgid "Removed the *loop* parameter."
msgstr ""

#: ../../library/asyncio-task.rst:430
msgid "Running Tasks Concurrently"
msgstr ""

#: ../../library/asyncio-task.rst:434
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* sequence "
"*concurrently*."
msgstr ""

#: ../../library/asyncio-task.rst:437
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a"
" Task."
msgstr ""

#: ../../library/asyncio-task.rst:440
msgid ""
"If all awaitables are completed successfully, the result is an aggregate "
"list of returned values.  The order of result values corresponds to the "
"order of awaitables in *aws*."
msgstr ""

#: ../../library/asyncio-task.rst:444
msgid ""
"If *return_exceptions* is ``False`` (default), the first raised exception is"
" immediately propagated to the task that awaits on ``gather()``.  Other "
"awaitables in the *aws* sequence **won't be cancelled** and will continue to"
" run."
msgstr ""

#: ../../library/asyncio-task.rst:449
msgid ""
"If *return_exceptions* is ``True``, exceptions are treated the same as "
"successful results, and aggregated in the result list."
msgstr ""

#: ../../library/asyncio-task.rst:452
msgid ""
"If ``gather()`` is *cancelled*, all submitted awaitables (that have not "
"completed yet) are also *cancelled*."
msgstr ""

#: ../../library/asyncio-task.rst:455
msgid ""
"If any Task or Future from the *aws* sequence is *cancelled*, it is treated "
"as if it raised :exc:`CancelledError` -- the ``gather()`` call is **not** "
"cancelled in this case.  This is to prevent the cancellation of one "
"submitted Task/Future to cause other Tasks/Futures to be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:462
msgid ""
"A more modern way to create and run tasks concurrently and wait for their "
"completion is :class:`asyncio.TaskGroup`."
msgstr ""

#: ../../library/asyncio-task.rst:505
msgid ""
"If *return_exceptions* is False, cancelling gather() after it has been "
"marked done won't cancel any submitted awaitables. For instance, gather can "
"be marked done after propagating an exception to the caller, therefore, "
"calling ``gather.cancel()`` after catching an exception (raised by one of "
"the awaitables) from gather won't cancel any other awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:512
msgid ""
"If the *gather* itself is cancelled, the cancellation is propagated "
"regardless of *return_exceptions*."
msgstr ""

#: ../../library/asyncio-task.rst:519
msgid ""
"Deprecation warning is emitted if no positional arguments are provided or "
"not all positional arguments are Future-like objects and there is no running"
" event loop."
msgstr ""

#: ../../library/asyncio-task.rst:526
msgid "Shielding From Cancellation"
msgstr ""

#: ../../library/asyncio-task.rst:530
msgid ""
"Protect an :ref:`awaitable object <asyncio-awaitables>` from being "
":meth:`cancelled <Task.cancel>`."
msgstr ""

#: ../../library/asyncio-task.rst:533 ../../library/asyncio-task.rst:699
msgid "If *aw* is a coroutine it is automatically scheduled as a Task."
msgstr ""

#: ../../library/asyncio-task.rst:535
msgid "The statement::"
msgstr ""

#: ../../library/asyncio-task.rst:540
msgid "is equivalent to::"
msgstr ""

#: ../../library/asyncio-task.rst:544
msgid ""
"*except* that if the coroutine containing it is cancelled, the Task running "
"in ``something()`` is not cancelled.  From the point of view of "
"``something()``, the cancellation did not happen. Although its caller is "
"still cancelled, so the \"await\" expression still raises a "
":exc:`CancelledError`."
msgstr ""

#: ../../library/asyncio-task.rst:550
msgid ""
"If ``something()`` is cancelled by other means (i.e. from within itself) "
"that would also cancel ``shield()``."
msgstr ""

#: ../../library/asyncio-task.rst:553
msgid ""
"If it is desired to completely ignore cancellation (not recommended) the "
"``shield()`` function should be combined with a try/except clause, as "
"follows::"
msgstr ""

#: ../../library/asyncio-task.rst:565
msgid ""
"Save a reference to tasks passed to this function, to avoid a task "
"disappearing mid-execution. The event loop only keeps weak references to "
"tasks. A task that isn't referenced elsewhere may get garbage collected at "
"any time, even before it's done."
msgstr ""

#: ../../library/asyncio-task.rst:573
msgid ""
"Deprecation warning is emitted if *aw* is not Future-like object and there "
"is no running event loop."
msgstr ""

#: ../../library/asyncio-task.rst:579
msgid "Timeouts"
msgstr ""

#: ../../library/asyncio-task.rst:583
msgid ""
"Return an :ref:`asynchronous context manager <async-context-managers>` that "
"can be used to limit the amount of time spent waiting on something."
msgstr ""

#: ../../library/asyncio-task.rst:587
msgid ""
"*delay* can either be ``None``, or a float/int number of seconds to wait. If"
" *delay* is ``None``, no time limit will be applied; this can be useful if "
"the delay is unknown when the context manager is created."
msgstr ""

#: ../../library/asyncio-task.rst:592
msgid ""
"In either case, the context manager can be rescheduled after creation using "
":meth:`Timeout.reschedule`."
msgstr ""

#: ../../library/asyncio-task.rst:601
msgid ""
"If ``long_running_task`` takes more than 10 seconds to complete, the context"
" manager will cancel the current task and handle the resulting "
":exc:`asyncio.CancelledError` internally, transforming it into a "
":exc:`TimeoutError` which can be caught and handled."
msgstr ""

#: ../../library/asyncio-task.rst:608
msgid ""
"The :func:`asyncio.timeout` context manager is what transforms the "
":exc:`asyncio.CancelledError` into a :exc:`TimeoutError`, which means the "
":exc:`TimeoutError` can only be caught *outside* of the context manager."
msgstr ""

#: ../../library/asyncio-task.rst:613
msgid "Example of catching :exc:`TimeoutError`::"
msgstr ""

#: ../../library/asyncio-task.rst:624
msgid ""
"The context manager produced by :func:`asyncio.timeout` can be rescheduled "
"to a different deadline and inspected."
msgstr ""

#: ../../library/asyncio-task.rst:629
msgid ""
"An :ref:`asynchronous context manager <async-context-managers>` for "
"cancelling overdue coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:632
msgid ""
"``when`` should be an absolute time at which the context should time out, as"
" measured by the event loop's clock:"
msgstr ""

#: ../../library/asyncio-task.rst:635
msgid "If ``when`` is ``None``, the timeout will never trigger."
msgstr ""

#: ../../library/asyncio-task.rst:636
msgid ""
"If ``when < loop.time()``, the timeout will trigger on the next iteration of"
" the event loop."
msgstr ""

#: ../../library/asyncio-task.rst:641
msgid ""
"Return the current deadline, or ``None`` if the current deadline is not set."
msgstr ""

#: ../../library/asyncio-task.rst:646
msgid "Reschedule the timeout."
msgstr ""

#: ../../library/asyncio-task.rst:650
msgid ""
"Return whether the context manager has exceeded its deadline (expired)."
msgstr ""

#: ../../library/asyncio-task.rst:670
msgid "Timeout context managers can be safely nested."
msgstr ""

#: ../../library/asyncio-task.rst:676
msgid ""
"Similar to :func:`asyncio.timeout`, except *when* is the absolute time to "
"stop waiting, or ``None``."
msgstr ""

#: ../../library/asyncio-task.rst:696
msgid ""
"Wait for the *aw* :ref:`awaitable <asyncio-awaitables>` to complete with a "
"timeout."
msgstr ""

#: ../../library/asyncio-task.rst:701
msgid ""
"*timeout* can either be ``None`` or a float or int number of seconds to wait"
" for.  If *timeout* is ``None``, block until the future completes."
msgstr ""

#: ../../library/asyncio-task.rst:705
msgid ""
"If a timeout occurs, it cancels the task and raises :exc:`TimeoutError`."
msgstr ""

#: ../../library/asyncio-task.rst:708
msgid ""
"To avoid the task :meth:`cancellation <Task.cancel>`, wrap it in "
":func:`shield`."
msgstr ""

#: ../../library/asyncio-task.rst:711
msgid ""
"The function will wait until the future is actually cancelled, so the total "
"wait time may exceed the *timeout*. If an exception happens during "
"cancellation, it is propagated."
msgstr ""

#: ../../library/asyncio-task.rst:715
msgid "If the wait is cancelled, the future *aw* is also cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:739
msgid ""
"When *aw* is cancelled due to a timeout, ``wait_for`` waits for *aw* to be "
"cancelled.  Previously, it raised :exc:`TimeoutError` immediately."
msgstr ""

#: ../../library/asyncio-task.rst:747
msgid "Raises :exc:`TimeoutError` instead of :exc:`asyncio.TimeoutError`."
msgstr ""

#: ../../library/asyncio-task.rst:752
msgid "Waiting Primitives"
msgstr ""

#: ../../library/asyncio-task.rst:756
msgid ""
"Run :class:`~asyncio.Future` and :class:`~asyncio.Task` instances in the "
"*aws* iterable concurrently and block until the condition specified by "
"*return_when*."
msgstr ""

#: ../../library/asyncio-task.rst:760
msgid ""
"The *aws* iterable must not be empty and generators yielding tasks are not "
"accepted."
msgstr ""

#: ../../library/asyncio-task.rst:762
msgid "Returns two sets of Tasks/Futures: ``(done, pending)``."
msgstr ""

#: ../../library/asyncio-task.rst:764
msgid "Usage::"
msgstr ""

#: ../../library/asyncio-task.rst:768
msgid ""
"*timeout* (a float or int), if specified, can be used to control the maximum"
" number of seconds to wait before returning."
msgstr ""

#: ../../library/asyncio-task.rst:771
msgid ""
"Note that this function does not raise :exc:`TimeoutError`. Futures or Tasks"
" that aren't done when the timeout occurs are simply returned in the second "
"set."
msgstr ""

#: ../../library/asyncio-task.rst:775
msgid ""
"*return_when* indicates when this function should return.  It must be one of"
" the following constants:"
msgstr ""

#: ../../library/asyncio-task.rst:781
msgid "Constant"
msgstr ""

#: ../../library/asyncio-task.rst:782
msgid "Description"
msgstr ""

#: ../../library/asyncio-task.rst:785
msgid "The function will return when any future finishes or is cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:788
msgid ""
"The function will return when any future finishes by raising an exception. "
"If no future raises an exception then it is equivalent to "
":const:`ALL_COMPLETED`."
msgstr ""

#: ../../library/asyncio-task.rst:793
msgid "The function will return when all futures finish or are cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:795
msgid ""
"Unlike :func:`~asyncio.wait_for`, ``wait()`` does not cancel the futures "
"when a timeout occurs."
msgstr ""

#: ../../library/asyncio-task.rst:801
msgid "Passing coroutine objects to ``wait()`` directly is forbidden."
msgstr ""

#: ../../library/asyncio-task.rst:806
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* iterable "
"concurrently. Generators yielding tasks are not accepted as *aws* iterable. "
"Return an iterator of coroutines. Each coroutine returned can be awaited to "
"get the earliest next result from the iterable of the remaining awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:812
msgid ""
"Raises :exc:`TimeoutError` if the timeout occurs before all Futures are "
"done."
msgstr ""

#: ../../library/asyncio-task.rst:824
msgid ""
"Deprecation warning is emitted if not all awaitable objects in the *aws* "
"iterable are Future-like objects and there is no running event loop."
msgstr ""

#: ../../library/asyncio-task.rst:830
msgid "Running in Threads"
msgstr ""

#: ../../library/asyncio-task.rst:834
msgid "Asynchronously run function *func* in a separate thread."
msgstr ""

#: ../../library/asyncio-task.rst:836
msgid ""
"Any \\*args and \\*\\*kwargs supplied for this function are directly passed "
"to *func*. Also, the current :class:`contextvars.Context` is propagated, "
"allowing context variables from the event loop thread to be accessed in the "
"separate thread."
msgstr ""

#: ../../library/asyncio-task.rst:841
msgid ""
"Return a coroutine that can be awaited to get the eventual result of *func*."
msgstr ""

#: ../../library/asyncio-task.rst:843
msgid ""
"This coroutine function is primarily intended to be used for executing IO-"
"bound functions/methods that would otherwise block the event loop if they "
"were run in the main thread. For example::"
msgstr ""

#: ../../library/asyncio-task.rst:873
msgid ""
"Directly calling ``blocking_io()`` in any coroutine would block the event "
"loop for its duration, resulting in an additional 1 second of run time. "
"Instead, by using ``asyncio.to_thread()``, we can run it in a separate "
"thread without blocking the event loop."
msgstr ""

#: ../../library/asyncio-task.rst:880
msgid ""
"Due to the :term:`GIL`, ``asyncio.to_thread()`` can typically only be used "
"to make IO-bound functions non-blocking. However, for extension modules that"
" release the GIL or alternative Python implementations that don't have one, "
"``asyncio.to_thread()`` can also be used for CPU-bound functions."
msgstr ""

#: ../../library/asyncio-task.rst:889
msgid "Scheduling From Other Threads"
msgstr ""

#: ../../library/asyncio-task.rst:893
msgid "Submit a coroutine to the given event loop.  Thread-safe."
msgstr ""

#: ../../library/asyncio-task.rst:895
msgid ""
"Return a :class:`concurrent.futures.Future` to wait for the result from "
"another OS thread."
msgstr ""

#: ../../library/asyncio-task.rst:898
msgid ""
"This function is meant to be called from a different OS thread than the one "
"where the event loop is running.  Example::"
msgstr ""

#: ../../library/asyncio-task.rst:910
msgid ""
"If an exception is raised in the coroutine, the returned Future will be "
"notified.  It can also be used to cancel the task in the event loop::"
msgstr ""

#: ../../library/asyncio-task.rst:924
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""

#: ../../library/asyncio-task.rst:927
msgid ""
"Unlike other asyncio functions this function requires the *loop* argument to"
" be passed explicitly."
msgstr ""

#: ../../library/asyncio-task.rst:934
msgid "Introspection"
msgstr ""

#: ../../library/asyncio-task.rst:939
msgid ""
"Return the currently running :class:`Task` instance, or ``None`` if no task "
"is running."
msgstr ""

#: ../../library/asyncio-task.rst:942
msgid ""
"If *loop* is ``None`` :func:`get_running_loop` is used to get the current "
"loop."
msgstr ""

#: ../../library/asyncio-task.rst:950
msgid ""
"Return a set of not yet finished :class:`Task` objects run by the loop."
msgstr ""

#: ../../library/asyncio-task.rst:953
msgid ""
"If *loop* is ``None``, :func:`get_running_loop` is used for getting current "
"loop."
msgstr ""

#: ../../library/asyncio-task.rst:961
msgid "Return ``True`` if *obj* is a coroutine object."
msgstr ""

#: ../../library/asyncio-task.rst:967
msgid "Task Object"
msgstr ""

#: ../../library/asyncio-task.rst:971
msgid ""
"A :class:`Future-like <Future>` object that runs a Python :ref:`coroutine "
"<coroutine>`.  Not thread-safe."
msgstr ""

#: ../../library/asyncio-task.rst:974
msgid ""
"Tasks are used to run coroutines in event loops. If a coroutine awaits on a "
"Future, the Task suspends the execution of the coroutine and waits for the "
"completion of the Future.  When the Future is *done*, the execution of the "
"wrapped coroutine resumes."
msgstr ""

#: ../../library/asyncio-task.rst:980
msgid ""
"Event loops use cooperative scheduling: an event loop runs one Task at a "
"time.  While a Task awaits for the completion of a Future, the event loop "
"runs other Tasks, callbacks, or performs IO operations."
msgstr ""

#: ../../library/asyncio-task.rst:985
msgid ""
"Use the high-level :func:`asyncio.create_task` function to create Tasks, or "
"the low-level :meth:`loop.create_task` or :func:`ensure_future` functions.  "
"Manual instantiation of Tasks is discouraged."
msgstr ""

#: ../../library/asyncio-task.rst:990
msgid ""
"To cancel a running Task use the :meth:`cancel` method.  Calling it will "
"cause the Task to throw a :exc:`CancelledError` exception into the wrapped "
"coroutine.  If a coroutine is awaiting on a Future object during "
"cancellation, the Future object will be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:995
msgid ""
":meth:`cancelled` can be used to check if the Task was cancelled. The method"
" returns ``True`` if the wrapped coroutine did not suppress the "
":exc:`CancelledError` exception and was actually cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:1000
msgid ""
":class:`asyncio.Task` inherits from :class:`Future` all of its APIs except "
":meth:`Future.set_result` and :meth:`Future.set_exception`."
msgstr ""

#: ../../library/asyncio-task.rst:1004
msgid ""
"An optional keyword-only *context* argument allows specifying a custom "
":class:`contextvars.Context` for the *coro* to run in. If no *context* is "
"provided, the Task copies the current context and later runs its coroutine "
"in the copied context."
msgstr ""

#: ../../library/asyncio-task.rst:1009
msgid "Added support for the :mod:`contextvars` module."
msgstr ""

#: ../../library/asyncio-task.rst:1015
msgid ""
"Deprecation warning is emitted if *loop* is not specified and there is no "
"running event loop."
msgstr ""

#: ../../library/asyncio-task.rst:1024
msgid "Return ``True`` if the Task is *done*."
msgstr ""

#: ../../library/asyncio-task.rst:1026
msgid ""
"A Task is *done* when the wrapped coroutine either returned a value, raised "
"an exception, or the Task was cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:1031
msgid "Return the result of the Task."
msgstr ""

#: ../../library/asyncio-task.rst:1033
msgid ""
"If the Task is *done*, the result of the wrapped coroutine is returned (or "
"if the coroutine raised an exception, that exception is re-raised.)"
msgstr ""

#: ../../library/asyncio-task.rst:1037 ../../library/asyncio-task.rst:1051
msgid ""
"If the Task has been *cancelled*, this method raises a :exc:`CancelledError`"
" exception."
msgstr ""

#: ../../library/asyncio-task.rst:1040
msgid ""
"If the Task's result isn't yet available, this method raises a "
":exc:`InvalidStateError` exception."
msgstr ""

#: ../../library/asyncio-task.rst:1045
msgid "Return the exception of the Task."
msgstr ""

#: ../../library/asyncio-task.rst:1047
msgid ""
"If the wrapped coroutine raised an exception that exception is returned.  If"
" the wrapped coroutine returned normally this method returns ``None``."
msgstr ""

#: ../../library/asyncio-task.rst:1054
msgid ""
"If the Task isn't *done* yet, this method raises an :exc:`InvalidStateError`"
" exception."
msgstr ""

#: ../../library/asyncio-task.rst:1059
msgid "Add a callback to be run when the Task is *done*."
msgstr ""

#: ../../library/asyncio-task.rst:1061 ../../library/asyncio-task.rst:1070
msgid "This method should only be used in low-level callback-based code."
msgstr ""

#: ../../library/asyncio-task.rst:1063
msgid ""
"See the documentation of :meth:`Future.add_done_callback` for more details."
msgstr ""

#: ../../library/asyncio-task.rst:1068
msgid "Remove *callback* from the callbacks list."
msgstr ""

#: ../../library/asyncio-task.rst:1072
msgid ""
"See the documentation of :meth:`Future.remove_done_callback` for more "
"details."
msgstr ""

#: ../../library/asyncio-task.rst:1077
msgid "Return the list of stack frames for this Task."
msgstr ""

#: ../../library/asyncio-task.rst:1079
msgid ""
"If the wrapped coroutine is not done, this returns the stack where it is "
"suspended.  If the coroutine has completed successfully or was cancelled, "
"this returns an empty list. If the coroutine was terminated by an exception,"
" this returns the list of traceback frames."
msgstr ""

#: ../../library/asyncio-task.rst:1085
msgid "The frames are always ordered from oldest to newest."
msgstr ""

#: ../../library/asyncio-task.rst:1087
msgid "Only one stack frame is returned for a suspended coroutine."
msgstr ""

#: ../../library/asyncio-task.rst:1089
msgid ""
"The optional *limit* argument sets the maximum number of frames to return; "
"by default all available frames are returned. The ordering of the returned "
"list differs depending on whether a stack or a traceback is returned: the "
"newest frames of a stack are returned, but the oldest frames of a traceback "
"are returned.  (This matches the behavior of the traceback module.)"
msgstr ""

#: ../../library/asyncio-task.rst:1098
msgid "Print the stack or traceback for this Task."
msgstr ""

#: ../../library/asyncio-task.rst:1100
msgid ""
"This produces output similar to that of the traceback module for the frames "
"retrieved by :meth:`get_stack`."
msgstr ""

#: ../../library/asyncio-task.rst:1103
msgid "The *limit* argument is passed to :meth:`get_stack` directly."
msgstr ""

#: ../../library/asyncio-task.rst:1105
msgid ""
"The *file* argument is an I/O stream to which the output is written; by "
"default output is written to :data:`sys.stdout`."
msgstr ""

#: ../../library/asyncio-task.rst:1110
msgid "Return the coroutine object wrapped by the :class:`Task`."
msgstr ""

#: ../../library/asyncio-task.rst:1116
msgid "Return the name of the Task."
msgstr ""

#: ../../library/asyncio-task.rst:1118
msgid ""
"If no name has been explicitly assigned to the Task, the default asyncio "
"Task implementation generates a default name during instantiation."
msgstr ""

#: ../../library/asyncio-task.rst:1126
msgid "Set the name of the Task."
msgstr ""

#: ../../library/asyncio-task.rst:1128
msgid ""
"The *value* argument can be any object, which is then converted to a string."
msgstr ""

#: ../../library/asyncio-task.rst:1131
msgid ""
"In the default Task implementation, the name will be visible in the "
":func:`repr` output of a task object."
msgstr ""

#: ../../library/asyncio-task.rst:1138
msgid "Request the Task to be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:1140
msgid ""
"This arranges for a :exc:`CancelledError` exception to be thrown into the "
"wrapped coroutine on the next cycle of the event loop."
msgstr ""

#: ../../library/asyncio-task.rst:1143
msgid ""
"The coroutine then has a chance to clean up or even deny the request by "
"suppressing the exception with a :keyword:`try` ... ... ``except "
"CancelledError`` ... :keyword:`finally` block. Therefore, unlike "
":meth:`Future.cancel`, :meth:`Task.cancel` does not guarantee that the Task "
"will be cancelled, although suppressing cancellation completely is not "
"common and is actively discouraged.  Should the coroutine nevertheless "
"decide to suppress the cancellation, it needs to call :meth:`Task.uncancel` "
"in addition to catching the exception."
msgstr ""

#: ../../library/asyncio-task.rst:1153
msgid "Added the *msg* parameter."
msgstr ""

#: ../../library/asyncio-task.rst:1156
msgid ""
"The ``msg`` parameter is propagated from cancelled task to its awaiter."
msgstr ""

#: ../../library/asyncio-task.rst:1161
msgid ""
"The following example illustrates how coroutines can intercept the "
"cancellation request::"
msgstr ""

#: ../../library/asyncio-task.rst:1200
msgid "Return ``True`` if the Task is *cancelled*."
msgstr ""

#: ../../library/asyncio-task.rst:1202
msgid ""
"The Task is *cancelled* when the cancellation was requested with "
":meth:`cancel` and the wrapped coroutine propagated the "
":exc:`CancelledError` exception thrown into it."
msgstr ""

#: ../../library/asyncio-task.rst:1208
msgid "Decrement the count of cancellation requests to this Task."
msgstr ""

#: ../../library/asyncio-task.rst:1210
msgid "Returns the remaining number of cancellation requests."
msgstr ""

#: ../../library/asyncio-task.rst:1212
msgid ""
"Note that once execution of a cancelled task completed, further calls to "
":meth:`uncancel` are ineffective."
msgstr ""

#: ../../library/asyncio-task.rst:1217
msgid ""
"This method is used by asyncio's internals and isn't expected to be used by "
"end-user code.  In particular, if a Task gets successfully uncancelled, this"
" allows for elements of structured concurrency like :ref:`taskgroups` and "
":func:`asyncio.timeout` to continue running, isolating cancellation to the "
"respective structured block. For example::"
msgstr ""

#: ../../library/asyncio-task.rst:1235
msgid ""
"While the block with ``make_request()`` and ``make_another_request()`` might"
" get cancelled due to the timeout, ``unrelated_code()`` should continue "
"running even in case of the timeout.  This is implemented with "
":meth:`uncancel`.  :class:`TaskGroup` context managers use :func:`uncancel` "
"in a similar fashion."
msgstr ""

#: ../../library/asyncio-task.rst:1241
msgid ""
"If end-user code is, for some reason, suppresing cancellation by catching "
":exc:`CancelledError`, it needs to call this method to remove the "
"cancellation state."
msgstr ""

#: ../../library/asyncio-task.rst:1247
msgid ""
"Return the number of pending cancellation requests to this Task, i.e., the "
"number of calls to :meth:`cancel` less the number of :meth:`uncancel` calls."
msgstr ""

#: ../../library/asyncio-task.rst:1251
msgid ""
"Note that if this number is greater than zero but the Task is still "
"executing, :meth:`cancelled` will still return ``False``. This is because "
"this number can be lowered by calling :meth:`uncancel`, which can lead to "
"the task not being cancelled after all if the cancellation requests go down "
"to zero."
msgstr ""

#: ../../library/asyncio-task.rst:1257
msgid ""
"This method is used by asyncio's internals and isn't expected to be used by "
"end-user code.  See :meth:`uncancel` for more details."
msgstr ""
