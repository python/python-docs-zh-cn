# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-task.rst:6
msgid "Coroutines and Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:8
msgid ""
"This section outlines high-level asyncio APIs to work with coroutines and "
"Tasks."
msgstr ""

#: ../../library/asyncio-task.rst:19 ../../library/asyncio-task.rst:121
msgid "Coroutines"
msgstr ""

#: ../../library/asyncio-task.rst:21
msgid ""
":term:`Coroutines <coroutine>` declared with the async/await syntax is the "
"preferred way of writing asyncio applications.  For example, the following "
"snippet of code prints \"hello\", waits 1 second, and then prints "
"\"world\"::"
msgstr ""

#: ../../library/asyncio-task.rst:37
msgid ""
"Note that simply calling a coroutine will not schedule it to be executed::"
msgstr ""

#: ../../library/asyncio-task.rst:43
msgid "To actually run a coroutine, asyncio provides three main mechanisms:"
msgstr ""

#: ../../library/asyncio-task.rst:45
msgid ""
"The :func:`asyncio.run` function to run the top-level entry point \"main()\""
" function (see the above example.)"
msgstr ""

#: ../../library/asyncio-task.rst:48
msgid ""
"Awaiting on a coroutine.  The following snippet of code will print \"hello\""
" after waiting for 1 second, and then print \"world\" after waiting for "
"*another* 2 seconds::"
msgstr ""

#: ../../library/asyncio-task.rst:69
msgid "Expected output::"
msgstr ""

#: ../../library/asyncio-task.rst:76
msgid ""
"The :func:`asyncio.create_task` function to run coroutines concurrently as "
"asyncio :class:`Tasks <Task>`."
msgstr ""

#: ../../library/asyncio-task.rst:79
msgid ""
"Let's modify the above example and run two ``say_after`` coroutines "
"*concurrently*::"
msgstr ""

#: ../../library/asyncio-task.rst:98
msgid ""
"Note that expected output now shows that the snippet runs 1 second faster "
"than before::"
msgstr ""

#: ../../library/asyncio-task.rst:110
msgid "Awaitables"
msgstr ""

#: ../../library/asyncio-task.rst:112
msgid ""
"We say that an object is an **awaitable** object if it can be used in an "
":keyword:`await` expression.  Many asyncio APIs are designed to accept "
"awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:116
msgid ""
"There are three main types of *awaitable* objects: **coroutines**, "
"**Tasks**, and **Futures**."
msgstr ""

#: ../../library/asyncio-task.rst:122
msgid ""
"Python coroutines are *awaitables* and therefore can be awaited from other "
"coroutines::"
msgstr ""

#: ../../library/asyncio-task.rst:143
msgid ""
"In this documentation the term \"coroutine\" can be used for two closely "
"related concepts:"
msgstr ""

#: ../../library/asyncio-task.rst:146
msgid "a *coroutine function*: an :keyword:`async def` function;"
msgstr ""

#: ../../library/asyncio-task.rst:148
msgid ""
"a *coroutine object*: an object returned by calling a *coroutine function*."
msgstr ""

#: ../../library/asyncio-task.rst:151
msgid ""
"asyncio also supports legacy :ref:`generator-based "
"<asyncio_generator_based_coro>` coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:156
msgid "Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:157
msgid "*Tasks* are used to schedule coroutines *concurrently*."
msgstr ""

#: ../../library/asyncio-task.rst:159
msgid ""
"When a coroutine is wrapped into a *Task* with functions like "
":func:`asyncio.create_task` the coroutine is automatically scheduled to run "
"soon::"
msgstr ""

#: ../../library/asyncio-task.rst:181
msgid "Futures"
msgstr ""

#: ../../library/asyncio-task.rst:182
msgid ""
"A :class:`Future` is a special **low-level** awaitable object that "
"represents an **eventual result** of an asynchronous operation."
msgstr ""

#: ../../library/asyncio-task.rst:185
msgid ""
"When a Future object is *awaited* it means that the coroutine will wait "
"until the Future is resolved in some other place."
msgstr ""

#: ../../library/asyncio-task.rst:188
msgid ""
"Future objects in asyncio are needed to allow callback-based code to be used"
" with async/await."
msgstr ""

#: ../../library/asyncio-task.rst:191
msgid ""
"Normally **there is no need** to create Future objects at the application "
"level code."
msgstr ""

#: ../../library/asyncio-task.rst:194
msgid ""
"Future objects, sometimes exposed by libraries and some asyncio APIs, can be"
" awaited::"
msgstr ""

#: ../../library/asyncio-task.rst:206
msgid ""
"A good example of a low-level function that returns a Future object is "
":meth:`loop.run_in_executor`."
msgstr ""

#: ../../library/asyncio-task.rst:211
msgid "Running an asyncio Program"
msgstr ""

#: ../../library/asyncio-task.rst:215
msgid "Execute the :term:`coroutine` *coro* and return the result."
msgstr ""

#: ../../library/asyncio-task.rst:217
msgid ""
"This function runs the passed coroutine, taking care of managing the asyncio"
" event loop, *finalizing asynchronous generators*, and closing the "
"threadpool."
msgstr ""

#: ../../library/asyncio-task.rst:221
msgid ""
"This function cannot be called when another asyncio event loop is running in"
" the same thread."
msgstr ""

#: ../../library/asyncio-task.rst:224
msgid "If *debug* is ``True``, the event loop will be run in debug mode."
msgstr ""

#: ../../library/asyncio-task.rst:226
msgid ""
"This function always creates a new event loop and closes it at the end.  It "
"should be used as a main entry point for asyncio programs, and should "
"ideally only be called once."
msgstr ""

#: ../../library/asyncio-task.rst:230 ../../library/asyncio-task.rst:350
#: ../../library/asyncio-task.rst:471 ../../library/asyncio-task.rst:603
msgid "Example::"
msgstr "示例::"

#: ../../library/asyncio-task.rst:240
msgid "Updated to use :meth:`loop.shutdown_default_executor`."
msgstr ""

#: ../../library/asyncio-task.rst:244
msgid ""
"The source code for ``asyncio.run()`` can be found in "
":source:`Lib/asyncio/runners.py`."
msgstr ""

#: ../../library/asyncio-task.rst:248
msgid "Creating Tasks"
msgstr ""

#: ../../library/asyncio-task.rst:252
msgid ""
"Wrap the *coro* :ref:`coroutine <coroutine>` into a :class:`Task` and "
"schedule its execution.  Return the Task object."
msgstr ""

#: ../../library/asyncio-task.rst:255
msgid ""
"If *name* is not ``None``, it is set as the name of the task using "
":meth:`Task.set_name`."
msgstr ""

#: ../../library/asyncio-task.rst:258
msgid ""
"The task is executed in the loop returned by :func:`get_running_loop`, "
":exc:`RuntimeError` is raised if there is no running loop in current thread."
msgstr ""

#: ../../library/asyncio-task.rst:264
msgid ""
"Save a reference to the result of this function, to avoid a task "
"disappearing mid execution."
msgstr ""

#: ../../library/asyncio-task.rst:269 ../../library/asyncio-task.rst:785
msgid "Added the ``name`` parameter."
msgstr ""

#: ../../library/asyncio-task.rst:274
msgid "Sleeping"
msgstr ""

#: ../../library/asyncio-task.rst:278
msgid "Block for *delay* seconds."
msgstr ""

#: ../../library/asyncio-task.rst:280
msgid ""
"If *result* is provided, it is returned to the caller when the coroutine "
"completes."
msgstr ""

#: ../../library/asyncio-task.rst:283
msgid ""
"``sleep()`` always suspends the current task, allowing other tasks to run."
msgstr ""

#: ../../library/asyncio-task.rst:286
msgid ""
"Setting the delay to 0 provides an optimized path to allow other tasks to "
"run. This can be used by long-running functions to avoid blocking the event "
"loop for the full duration of the function call."
msgstr ""

#: ../../library/asyncio-task.rst:292 ../../library/asyncio-task.rst:347
#: ../../library/asyncio-task.rst:437 ../../library/asyncio-task.rst:468
#: ../../library/asyncio-task.rst:555 ../../library/asyncio-task.rst:602
#: ../../library/asyncio-task.rst:790
msgid "The *loop* parameter."
msgstr ""

#: ../../library/asyncio-task.rst:295
msgid ""
"Example of coroutine displaying the current date every second for 5 "
"seconds::"
msgstr ""

#: ../../library/asyncio-task.rst:314
msgid "Running Tasks Concurrently"
msgstr ""

#: ../../library/asyncio-task.rst:318
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* sequence "
"*concurrently*."
msgstr ""

#: ../../library/asyncio-task.rst:321
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a"
" Task."
msgstr ""

#: ../../library/asyncio-task.rst:324
msgid ""
"If all awaitables are completed successfully, the result is an aggregate "
"list of returned values.  The order of result values corresponds to the "
"order of awaitables in *aws*."
msgstr ""

#: ../../library/asyncio-task.rst:328
msgid ""
"If *return_exceptions* is ``False`` (default), the first raised exception is"
" immediately propagated to the task that awaits on ``gather()``.  Other "
"awaitables in the *aws* sequence **won't be cancelled** and will continue to"
" run."
msgstr ""

#: ../../library/asyncio-task.rst:333
msgid ""
"If *return_exceptions* is ``True``, exceptions are treated the same as "
"successful results, and aggregated in the result list."
msgstr ""

#: ../../library/asyncio-task.rst:336
msgid ""
"If ``gather()`` is *cancelled*, all submitted awaitables (that have not "
"completed yet) are also *cancelled*."
msgstr ""

#: ../../library/asyncio-task.rst:339
msgid ""
"If any Task or Future from the *aws* sequence is *cancelled*, it is treated "
"as if it raised :exc:`CancelledError` -- the ``gather()`` call is **not** "
"cancelled in this case.  This is to prevent the cancellation of one "
"submitted Task/Future to cause other Tasks/Futures to be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:388
msgid ""
"If *return_exceptions* is False, cancelling gather() after it has been "
"marked done won't cancel any submitted awaitables. For instance, gather can "
"be marked done after propagating an exception to the caller, therefore, "
"calling ``gather.cancel()`` after catching an exception (raised by one of "
"the awaitables) from gather won't cancel any other awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:395
msgid ""
"If the *gather* itself is cancelled, the cancellation is propagated "
"regardless of *return_exceptions*."
msgstr ""

#: ../../library/asyncio-task.rst:401
msgid "Shielding From Cancellation"
msgstr ""

#: ../../library/asyncio-task.rst:405
msgid ""
"Protect an :ref:`awaitable object <asyncio-awaitables>` from being "
":meth:`cancelled <Task.cancel>`."
msgstr ""

#: ../../library/asyncio-task.rst:408 ../../library/asyncio-task.rst:448
msgid "If *aw* is a coroutine it is automatically scheduled as a Task."
msgstr ""

#: ../../library/asyncio-task.rst:410
msgid "The statement::"
msgstr ""

#: ../../library/asyncio-task.rst:414
msgid "is equivalent to::"
msgstr ""

#: ../../library/asyncio-task.rst:418
msgid ""
"*except* that if the coroutine containing it is cancelled, the Task running "
"in ``something()`` is not cancelled.  From the point of view of "
"``something()``, the cancellation did not happen. Although its caller is "
"still cancelled, so the \"await\" expression still raises a "
":exc:`CancelledError`."
msgstr ""

#: ../../library/asyncio-task.rst:424
msgid ""
"If ``something()`` is cancelled by other means (i.e. from within itself) "
"that would also cancel ``shield()``."
msgstr ""

#: ../../library/asyncio-task.rst:427
msgid ""
"If it is desired to completely ignore cancellation (not recommended) the "
"``shield()`` function should be combined with a try/except clause, as "
"follows::"
msgstr ""

#: ../../library/asyncio-task.rst:441
msgid "Timeouts"
msgstr ""

#: ../../library/asyncio-task.rst:445
msgid ""
"Wait for the *aw* :ref:`awaitable <asyncio-awaitables>` to complete with a "
"timeout."
msgstr ""

#: ../../library/asyncio-task.rst:450
msgid ""
"*timeout* can either be ``None`` or a float or int number of seconds to wait"
" for.  If *timeout* is ``None``, block until the future completes."
msgstr ""

#: ../../library/asyncio-task.rst:454
msgid ""
"If a timeout occurs, it cancels the task and raises "
":exc:`asyncio.TimeoutError`."
msgstr ""

#: ../../library/asyncio-task.rst:457
msgid ""
"To avoid the task :meth:`cancellation <Task.cancel>`, wrap it in "
":func:`shield`."
msgstr ""

#: ../../library/asyncio-task.rst:460
msgid ""
"The function will wait until the future is actually cancelled, so the total "
"wait time may exceed the *timeout*. If an exception happens during "
"cancellation, it is propagated."
msgstr ""

#: ../../library/asyncio-task.rst:464
msgid "If the wait is cancelled, the future *aw* is also cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:491
msgid ""
"When *aw* is cancelled due to a timeout, ``wait_for`` waits for *aw* to be "
"cancelled.  Previously, it raised :exc:`asyncio.TimeoutError` immediately."
msgstr ""

#: ../../library/asyncio-task.rst:498
msgid "Waiting Primitives"
msgstr ""

#: ../../library/asyncio-task.rst:503
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* iterable "
"concurrently and block until the condition specified by *return_when*."
msgstr ""

#: ../../library/asyncio-task.rst:507
msgid "The *aws* iterable must not be empty."
msgstr ""

#: ../../library/asyncio-task.rst:509
msgid "Returns two sets of Tasks/Futures: ``(done, pending)``."
msgstr ""

#: ../../library/asyncio-task.rst:511
msgid "Usage::"
msgstr ""

#: ../../library/asyncio-task.rst:515
msgid ""
"*timeout* (a float or int), if specified, can be used to control the maximum"
" number of seconds to wait before returning."
msgstr ""

#: ../../library/asyncio-task.rst:518
msgid ""
"Note that this function does not raise :exc:`asyncio.TimeoutError`. Futures "
"or Tasks that aren't done when the timeout occurs are simply returned in the"
" second set."
msgstr ""

#: ../../library/asyncio-task.rst:522
msgid ""
"*return_when* indicates when this function should return.  It must be one of"
" the following constants:"
msgstr ""

#: ../../library/asyncio-task.rst:528
msgid "Constant"
msgstr "常量"

#: ../../library/asyncio-task.rst:528
msgid "Description"
msgstr "描述"

#: ../../library/asyncio-task.rst:530
msgid ":const:`FIRST_COMPLETED`"
msgstr ""

#: ../../library/asyncio-task.rst:530
msgid "The function will return when any future finishes or is cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:533
msgid ":const:`FIRST_EXCEPTION`"
msgstr ""

#: ../../library/asyncio-task.rst:533
msgid ""
"The function will return when any future finishes by raising an exception.  "
"If no future raises an exception then it is equivalent to "
":const:`ALL_COMPLETED`."
msgstr ""

#: ../../library/asyncio-task.rst:539
msgid ":const:`ALL_COMPLETED`"
msgstr ""

#: ../../library/asyncio-task.rst:539
msgid "The function will return when all futures finish or are cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:543
msgid ""
"Unlike :func:`~asyncio.wait_for`, ``wait()`` does not cancel the futures "
"when a timeout occurs."
msgstr ""

#: ../../library/asyncio-task.rst:548
msgid ""
"If any awaitable in *aws* is a coroutine, it is automatically scheduled as a"
" Task.  Passing coroutines objects to ``wait()`` directly is deprecated as "
"it leads to :ref:`confusing behavior <asyncio_example_wait_coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:560
msgid ""
"``wait()`` schedules coroutines as Tasks automatically and later returns "
"those implicitly created Task objects in ``(done, pending)`` sets.  "
"Therefore the following code won't work as expected::"
msgstr ""

#: ../../library/asyncio-task.rst:573
msgid "Here is how the above snippet can be fixed::"
msgstr ""

#: ../../library/asyncio-task.rst:586
msgid "Passing coroutine objects to ``wait()`` directly is deprecated."
msgstr ""

#: ../../library/asyncio-task.rst:592
msgid ""
"Run :ref:`awaitable objects <asyncio-awaitables>` in the *aws* iterable "
"concurrently.  Return an iterator of coroutines. Each coroutine returned can"
" be awaited to get the earliest next result from the iterable of the "
"remaining awaitables."
msgstr ""

#: ../../library/asyncio-task.rst:597
msgid ""
"Raises :exc:`asyncio.TimeoutError` if the timeout occurs before all Futures "
"are done."
msgstr ""

#: ../../library/asyncio-task.rst:611
msgid "Running in Threads"
msgstr ""

#: ../../library/asyncio-task.rst:615
msgid "Asynchronously run function *func* in a separate thread."
msgstr ""

#: ../../library/asyncio-task.rst:617
msgid ""
"Any \\*args and \\*\\*kwargs supplied for this function are directly passed "
"to *func*. Also, the current :class:`contextvars.Context` is propagated, "
"allowing context variables from the event loop thread to be accessed in the "
"separate thread."
msgstr ""

#: ../../library/asyncio-task.rst:622
msgid ""
"Return a coroutine that can be awaited to get the eventual result of *func*."
msgstr ""

#: ../../library/asyncio-task.rst:624
msgid ""
"This coroutine function is primarily intended to be used for executing IO-"
"bound functions/methods that would otherwise block the event loop if they "
"were ran in the main thread. For example::"
msgstr ""

#: ../../library/asyncio-task.rst:654
msgid ""
"Directly calling `blocking_io()` in any coroutine would block the event loop"
" for its duration, resulting in an additional 1 second of run time. Instead,"
" by using `asyncio.to_thread()`, we can run it in a separate thread without "
"blocking the event loop."
msgstr ""

#: ../../library/asyncio-task.rst:661
msgid ""
"Due to the :term:`GIL`, `asyncio.to_thread()` can typically only be used to "
"make IO-bound functions non-blocking. However, for extension modules that "
"release the GIL or alternative Python implementations that don't have one, "
"`asyncio.to_thread()` can also be used for CPU-bound functions."
msgstr ""

#: ../../library/asyncio-task.rst:670
msgid "Scheduling From Other Threads"
msgstr ""

#: ../../library/asyncio-task.rst:674
msgid "Submit a coroutine to the given event loop.  Thread-safe."
msgstr ""

#: ../../library/asyncio-task.rst:676
msgid ""
"Return a :class:`concurrent.futures.Future` to wait for the result from "
"another OS thread."
msgstr ""

#: ../../library/asyncio-task.rst:679
msgid ""
"This function is meant to be called from a different OS thread than the one "
"where the event loop is running.  Example::"
msgstr ""

#: ../../library/asyncio-task.rst:691
msgid ""
"If an exception is raised in the coroutine, the returned Future will be "
"notified.  It can also be used to cancel the task in the event loop::"
msgstr ""

#: ../../library/asyncio-task.rst:705
msgid ""
"See the :ref:`concurrency and multithreading <asyncio-multithreading>` "
"section of the documentation."
msgstr ""

#: ../../library/asyncio-task.rst:708
msgid ""
"Unlike other asyncio functions this function requires the *loop* argument to"
" be passed explicitly."
msgstr ""

#: ../../library/asyncio-task.rst:715
msgid "Introspection"
msgstr ""

#: ../../library/asyncio-task.rst:720
msgid ""
"Return the currently running :class:`Task` instance, or ``None`` if no task "
"is running."
msgstr ""

#: ../../library/asyncio-task.rst:723
msgid ""
"If *loop* is ``None`` :func:`get_running_loop` is used to get the current "
"loop."
msgstr ""

#: ../../library/asyncio-task.rst:731
msgid ""
"Return a set of not yet finished :class:`Task` objects run by the loop."
msgstr ""

#: ../../library/asyncio-task.rst:734
msgid ""
"If *loop* is ``None``, :func:`get_running_loop` is used for getting current "
"loop."
msgstr ""

#: ../../library/asyncio-task.rst:741
msgid "Task Object"
msgstr ""

#: ../../library/asyncio-task.rst:745
msgid ""
"A :class:`Future-like <Future>` object that runs a Python :ref:`coroutine "
"<coroutine>`.  Not thread-safe."
msgstr ""

#: ../../library/asyncio-task.rst:748
msgid ""
"Tasks are used to run coroutines in event loops. If a coroutine awaits on a "
"Future, the Task suspends the execution of the coroutine and waits for the "
"completion of the Future.  When the Future is *done*, the execution of the "
"wrapped coroutine resumes."
msgstr ""

#: ../../library/asyncio-task.rst:754
msgid ""
"Event loops use cooperative scheduling: an event loop runs one Task at a "
"time.  While a Task awaits for the completion of a Future, the event loop "
"runs other Tasks, callbacks, or performs IO operations."
msgstr ""

#: ../../library/asyncio-task.rst:759
msgid ""
"Use the high-level :func:`asyncio.create_task` function to create Tasks, or "
"the low-level :meth:`loop.create_task` or :func:`ensure_future` functions.  "
"Manual instantiation of Tasks is discouraged."
msgstr ""

#: ../../library/asyncio-task.rst:764
msgid ""
"To cancel a running Task use the :meth:`cancel` method.  Calling it will "
"cause the Task to throw a :exc:`CancelledError` exception into the wrapped "
"coroutine.  If a coroutine is awaiting on a Future object during "
"cancellation, the Future object will be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:769
msgid ""
":meth:`cancelled` can be used to check if the Task was cancelled. The method"
" returns ``True`` if the wrapped coroutine did not suppress the "
":exc:`CancelledError` exception and was actually cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:774
msgid ""
":class:`asyncio.Task` inherits from :class:`Future` all of its APIs except "
":meth:`Future.set_result` and :meth:`Future.set_exception`."
msgstr ""

#: ../../library/asyncio-task.rst:778
msgid ""
"Tasks support the :mod:`contextvars` module.  When a Task is created it "
"copies the current context and later runs its coroutine in the copied "
"context."
msgstr ""

#: ../../library/asyncio-task.rst:782
msgid "Added support for the :mod:`contextvars` module."
msgstr ""

#: ../../library/asyncio-task.rst:793
msgid "Request the Task to be cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:795
msgid ""
"This arranges for a :exc:`CancelledError` exception to be thrown into the "
"wrapped coroutine on the next cycle of the event loop."
msgstr ""

#: ../../library/asyncio-task.rst:798
msgid ""
"The coroutine then has a chance to clean up or even deny the request by "
"suppressing the exception with a :keyword:`try` ... ... ``except "
"CancelledError`` ... :keyword:`finally` block. Therefore, unlike "
":meth:`Future.cancel`, :meth:`Task.cancel` does not guarantee that the Task "
"will be cancelled, although suppressing cancellation completely is not "
"common and is actively discouraged."
msgstr ""

#: ../../library/asyncio-task.rst:806
msgid "Added the ``msg`` parameter."
msgstr ""

#: ../../library/asyncio-task.rst:811
msgid ""
"The following example illustrates how coroutines can intercept the "
"cancellation request::"
msgstr ""

#: ../../library/asyncio-task.rst:850
msgid "Return ``True`` if the Task is *cancelled*."
msgstr ""

#: ../../library/asyncio-task.rst:852
msgid ""
"The Task is *cancelled* when the cancellation was requested with "
":meth:`cancel` and the wrapped coroutine propagated the "
":exc:`CancelledError` exception thrown into it."
msgstr ""

#: ../../library/asyncio-task.rst:858
msgid "Return ``True`` if the Task is *done*."
msgstr ""

#: ../../library/asyncio-task.rst:860
msgid ""
"A Task is *done* when the wrapped coroutine either returned a value, raised "
"an exception, or the Task was cancelled."
msgstr ""

#: ../../library/asyncio-task.rst:865
msgid "Return the result of the Task."
msgstr ""

#: ../../library/asyncio-task.rst:867
msgid ""
"If the Task is *done*, the result of the wrapped coroutine is returned (or "
"if the coroutine raised an exception, that exception is re-raised.)"
msgstr ""

#: ../../library/asyncio-task.rst:871 ../../library/asyncio-task.rst:885
msgid ""
"If the Task has been *cancelled*, this method raises a :exc:`CancelledError`"
" exception."
msgstr ""

#: ../../library/asyncio-task.rst:874
msgid ""
"If the Task's result isn't yet available, this method raises a "
":exc:`InvalidStateError` exception."
msgstr ""

#: ../../library/asyncio-task.rst:879
msgid "Return the exception of the Task."
msgstr ""

#: ../../library/asyncio-task.rst:881
msgid ""
"If the wrapped coroutine raised an exception that exception is returned.  If"
" the wrapped coroutine returned normally this method returns ``None``."
msgstr ""

#: ../../library/asyncio-task.rst:888
msgid ""
"If the Task isn't *done* yet, this method raises an :exc:`InvalidStateError`"
" exception."
msgstr ""

#: ../../library/asyncio-task.rst:893
msgid "Add a callback to be run when the Task is *done*."
msgstr ""

#: ../../library/asyncio-task.rst:895 ../../library/asyncio-task.rst:904
msgid "This method should only be used in low-level callback-based code."
msgstr ""

#: ../../library/asyncio-task.rst:897
msgid ""
"See the documentation of :meth:`Future.add_done_callback` for more details."
msgstr ""

#: ../../library/asyncio-task.rst:902
msgid "Remove *callback* from the callbacks list."
msgstr ""

#: ../../library/asyncio-task.rst:906
msgid ""
"See the documentation of :meth:`Future.remove_done_callback` for more "
"details."
msgstr ""

#: ../../library/asyncio-task.rst:911
msgid "Return the list of stack frames for this Task."
msgstr ""

#: ../../library/asyncio-task.rst:913
msgid ""
"If the wrapped coroutine is not done, this returns the stack where it is "
"suspended.  If the coroutine has completed successfully or was cancelled, "
"this returns an empty list. If the coroutine was terminated by an exception,"
" this returns the list of traceback frames."
msgstr ""

#: ../../library/asyncio-task.rst:919
msgid "The frames are always ordered from oldest to newest."
msgstr ""

#: ../../library/asyncio-task.rst:921
msgid "Only one stack frame is returned for a suspended coroutine."
msgstr ""

#: ../../library/asyncio-task.rst:923
msgid ""
"The optional *limit* argument sets the maximum number of frames to return; "
"by default all available frames are returned. The ordering of the returned "
"list differs depending on whether a stack or a traceback is returned: the "
"newest frames of a stack are returned, but the oldest frames of a traceback "
"are returned.  (This matches the behavior of the traceback module.)"
msgstr ""

#: ../../library/asyncio-task.rst:932
msgid "Print the stack or traceback for this Task."
msgstr ""

#: ../../library/asyncio-task.rst:934
msgid ""
"This produces output similar to that of the traceback module for the frames "
"retrieved by :meth:`get_stack`."
msgstr ""

#: ../../library/asyncio-task.rst:937
msgid "The *limit* argument is passed to :meth:`get_stack` directly."
msgstr ""

#: ../../library/asyncio-task.rst:939
msgid ""
"The *file* argument is an I/O stream to which the output is written; by "
"default output is written to :data:`sys.stderr`."
msgstr ""

#: ../../library/asyncio-task.rst:944
msgid "Return the coroutine object wrapped by the :class:`Task`."
msgstr ""

#: ../../library/asyncio-task.rst:950
msgid "Return the name of the Task."
msgstr ""

#: ../../library/asyncio-task.rst:952
msgid ""
"If no name has been explicitly assigned to the Task, the default asyncio "
"Task implementation generates a default name during instantiation."
msgstr ""

#: ../../library/asyncio-task.rst:960
msgid "Set the name of the Task."
msgstr ""

#: ../../library/asyncio-task.rst:962
msgid ""
"The *value* argument can be any object, which is then converted to a string."
msgstr ""

#: ../../library/asyncio-task.rst:965
msgid ""
"In the default Task implementation, the name will be visible in the "
":func:`repr` output of a task object."
msgstr ""

#: ../../library/asyncio-task.rst:974
msgid "Generator-based Coroutines"
msgstr ""

#: ../../library/asyncio-task.rst:978
msgid ""
"Support for generator-based coroutines is **deprecated** and is removed in "
"Python 3.11."
msgstr ""

#: ../../library/asyncio-task.rst:981
msgid ""
"Generator-based coroutines predate async/await syntax.  They are Python "
"generators that use ``yield from`` expressions to await on Futures and other"
" coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:985
msgid ""
"Generator-based coroutines should be decorated with "
":func:`@asyncio.coroutine <asyncio.coroutine>`, although this is not "
"enforced."
msgstr ""

#: ../../library/asyncio-task.rst:992
msgid "Decorator to mark generator-based coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:994
msgid ""
"This decorator enables legacy generator-based coroutines to be compatible "
"with async/await code::"
msgstr ""

#: ../../library/asyncio-task.rst:1004
msgid "This decorator should not be used for :keyword:`async def` coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:1009
msgid "Use :keyword:`async def` instead."
msgstr ""

#: ../../library/asyncio-task.rst:1013
msgid "Return ``True`` if *obj* is a :ref:`coroutine object <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:1015
msgid ""
"This method is different from :func:`inspect.iscoroutine` because it returns"
" ``True`` for generator-based coroutines."
msgstr ""

#: ../../library/asyncio-task.rst:1020
msgid "Return ``True`` if *func* is a :ref:`coroutine function <coroutine>`."
msgstr ""

#: ../../library/asyncio-task.rst:1023
msgid ""
"This method is different from :func:`inspect.iscoroutinefunction` because it"
" returns ``True`` for generator-based coroutine functions decorated with "
":func:`@coroutine <coroutine>`."
msgstr ""
