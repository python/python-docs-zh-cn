# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 15:02+0000\n"
"PO-Revision-Date: 2025-05-08 05:10+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pyexpat.rst:2
msgid ":mod:`!xml.parsers.expat` --- Fast XML parsing using Expat"
msgstr ":mod:`!xml.parsers.expat` --- 使用 Expat 进行快速 XML 解析"

#: ../../library/pyexpat.rst:21
msgid ""
"If you need to parse untrusted or unauthenticated data, see :ref:`xml-"
"security`."
msgstr "如果你需要解析不受信任或未经身份验证的数据，请参阅 :ref:`xml-security`。"

#: ../../library/pyexpat.rst:27
msgid ""
"The :mod:`xml.parsers.expat` module is a Python interface to the Expat non-"
"validating XML parser. The module provides a single extension type, "
":class:`xmlparser`, that represents the current state of an XML parser.  "
"After an :class:`xmlparser` object has been created, various attributes of "
"the object can be set to handler functions.  When an XML document is then "
"fed to the parser, the handler functions are called for the character data "
"and markup in the XML document."
msgstr ""
":mod:`xml.parsers.expat` 模块是针对 Expat 非验证 XML 解析器的 Python 接口。 此模块提供了一个扩展类型 "
":class:`xmlparser`，它代表一个 XML 解析器的当前状态。 在创建一个 :class:`xmlparser` "
"对象之后，该对象的各个属性可被设置为相应的处理器函数。 随后当将一个 XML 文档送入解析器时，就会为该 XML 文档中的字符数据和标记调用处理器函数。"

#: ../../library/pyexpat.rst:37
msgid ""
"This module uses the :mod:`pyexpat` module to provide access to the Expat "
"parser.  Direct use of the :mod:`pyexpat` module is deprecated."
msgstr ""
"此模块使用 :mod:`pyexpat` 模块来提供对 Expat 解析器的访问。 直接使用 :mod:`pyexpat` 模块的方式已被弃用。"

#: ../../library/pyexpat.rst:40
msgid "This module provides one exception and one type object:"
msgstr "此模块提供了一个异常和一个类型对象:"

#: ../../library/pyexpat.rst:45
msgid ""
"The exception raised when Expat reports an error.  See section "
":ref:`expaterror-objects` for more information on interpreting Expat errors."
msgstr ""
"此异常会在 Expat 报错时被引发。 请参阅 :ref:`expaterror-objects` 一节了解有关解读 Expat 错误的更多信息。"

#: ../../library/pyexpat.rst:51
msgid "Alias for :exc:`ExpatError`."
msgstr ":exc:`ExpatError` 的别名。"

#: ../../library/pyexpat.rst:56
msgid "The type of the return values from the :func:`ParserCreate` function."
msgstr "来自 :func:`ParserCreate` 函数的返回值的类型。"

#: ../../library/pyexpat.rst:58
msgid "The :mod:`xml.parsers.expat` module contains two functions:"
msgstr ":mod:`xml.parsers.expat` 模块包含两个函数:"

#: ../../library/pyexpat.rst:63
msgid "Returns an explanatory string for a given error number *errno*."
msgstr "返回给定错误号 *errno* 的解释性字符串。"

#: ../../library/pyexpat.rst:68
msgid ""
"Creates and returns a new :class:`xmlparser` object.   *encoding*, if "
"specified, must be a string naming the encoding  used by the XML data.  "
"Expat doesn't support as many encodings as Python does, and its repertoire "
"of encodings can't be extended; it supports UTF-8, UTF-16, ISO-8859-1 "
"(Latin1), and ASCII.  If *encoding* [1]_ is given it will override the "
"implicit or explicit encoding of the document."
msgstr ""
"创建并返回一个新的 :class:`xmlparser` 对象。 如果指定了 *encoding*，它必须为指定 XML "
"数据所使用的编码格式名称的字符串。 Expat 支持的编码格式没有 Python 那样多，而且它的编码格式库也不能被扩展；它支持 UTF-8, "
"UTF-16, ISO-8859-1 (Latin1) 和 ASCII。 如果给出了 *encoding* [1]_ "
"则它将覆盖隐式或显式指定的文档编码格式。"

#: ../../library/pyexpat.rst:75
msgid ""
"Expat can optionally do XML namespace processing for you, enabled by "
"providing a value for *namespace_separator*.  The value must be a one-"
"character string; a :exc:`ValueError` will be raised if the string has an "
"illegal length (``None`` is considered the same as omission).  When "
"namespace processing is enabled, element type names and attribute names that"
" belong to a namespace will be expanded.  The element name passed to the "
"element handlers :attr:`StartElementHandler` and :attr:`EndElementHandler` "
"will be the concatenation of the namespace URI, the namespace separator "
"character, and the local part of the name.  If the namespace separator is a "
"zero byte (``chr(0)``) then the namespace URI and the local part will be "
"concatenated without any separator."
msgstr ""
"可以选择让 Expat 为你做 XML 命名空间处理，这是通过提供 *namespace_separator* 值来启用的。 "
"该值必须是一个单字符的字符串；如果字符串的长度不合法则将引发 :exc:`ValueError` (``None`` 被视为等同于省略)。 "
"当命名空间处理被启用时，属于特定命名空间的元素类型名称和属性名称将被展开。 传递给The element name passed to the "
"元素处理器 :attr:`StartElementHandler` 和 :attr:`EndElementHandler` 的元素名称将为命名空间 "
"URI，命名空间分隔符和名称的本地部分的拼接。 如果命名空间分隔符是一个零字节 (``chr(0)``) 则命名空间 URI "
"和本地部分将被直接拼接而不带任何分隔符。"

#: ../../library/pyexpat.rst:87
msgid ""
"For example, if *namespace_separator* is set to a space character (``' '``) "
"and the following document is parsed:"
msgstr "举例来说，如果 *namespace_separator* 被设为空格符 (``' '``) 并对以下文档进行解析:"

#: ../../library/pyexpat.rst:90
msgid ""
"<?xml version=\"1.0\"?>\n"
"<root xmlns    = \"http://default-namespace.org/\"\n"
"      xmlns:py = \"http://www.python.org/ns/\">\n"
"  <py:elem1 />\n"
"  <elem2 xmlns=\"\" />\n"
"</root>"
msgstr ""
"<?xml version=\"1.0\"?>\n"
"<root xmlns    = \"http://default-namespace.org/\"\n"
"      xmlns:py = \"http://www.python.org/ns/\">\n"
"  <py:elem1 />\n"
"  <elem2 xmlns=\"\" />\n"
"</root>"

#: ../../library/pyexpat.rst:99
msgid ""
":attr:`StartElementHandler` will receive the following strings for each "
"element::"
msgstr ":attr:`StartElementHandler` 将为每个元素获取以下字符串::"

#: ../../library/pyexpat.rst:102
msgid ""
"http://default-namespace.org/ root\n"
"http://www.python.org/ns/ elem1\n"
"elem2"
msgstr ""
"http://default-namespace.org/ root\n"
"http://www.python.org/ns/ elem1\n"
"elem2"

#: ../../library/pyexpat.rst:106
msgid ""
"Due to limitations in the ``Expat`` library used by :mod:`pyexpat`, the "
":class:`xmlparser` instance returned can only be used to parse a single XML "
"document.  Call ``ParserCreate`` for each document to provide unique parser "
"instances."
msgstr ""
"由于 :mod:`pyexpat` 所使用的 ``Expat`` 库的限制，被返回的 :class:`xmlparser` 实例只能被用来解析单个 "
"XML 文档。 请为每个文档调用 ``ParserCreate`` 来提供单独的解析器实例。"

#: ../../library/pyexpat.rst:114
msgid "`The Expat XML Parser <http://www.libexpat.org/>`_"
msgstr "`The Expat XML Parser <http://www.libexpat.org/>`_"

#: ../../library/pyexpat.rst:115
msgid "Home page of the Expat project."
msgstr "Expat 项目的主页。"

#: ../../library/pyexpat.rst:121
msgid "XMLParser Objects"
msgstr "XMLParser对象"

#: ../../library/pyexpat.rst:123
msgid ":class:`xmlparser` objects have the following methods:"
msgstr ":class:`xmlparser` 对象具有以下方法:"

#: ../../library/pyexpat.rst:128
msgid ""
"Parses the contents of the string *data*, calling the appropriate handler "
"functions to process the parsed data.  *isfinal* must be true on the final "
"call to this method; it allows the parsing of a single file in fragments, "
"not the submission of multiple files. *data* can be the empty string at any "
"time."
msgstr ""
"解析字符串 *data* 的内容，调用适当的处理函数来处理解析后的数据。 在对此方法的最后一次调用时 *isfinal* "
"必须为真值；它允许以片段形式解析单个文件，而不是提交多个文件。 *data* 在任何时候都可以为空字符串。"

#: ../../library/pyexpat.rst:137
msgid ""
"Parse XML data reading from the object *file*.  *file* only needs to provide"
" the ``read(nbytes)`` method, returning the empty string when there's no "
"more data."
msgstr ""
"解析从对象 *file* 读取的 XML 数据。 *file* 仅需提供 ``read(nbytes)`` 方法，当没有更多数据可读时将返回空字符串。"

#: ../../library/pyexpat.rst:144
msgid ""
"Sets the base to be used for resolving relative URIs in system identifiers "
"in declarations.  Resolving relative identifiers is left to the application:"
" this value will be passed through as the *base* argument to the "
":func:`ExternalEntityRefHandler`, :func:`NotationDeclHandler`, and "
":func:`UnparsedEntityDeclHandler` functions."
msgstr ""
"设置要用于解析声明中的系统标识符的相对 URI 的基准。 解析相对标识符的任务会留给应用程序进行：这个值将作为 *base* 参数传递给 "
":func:`ExternalEntityRefHandler`, :func:`NotationDeclHandler` 和 "
":func:`UnparsedEntityDeclHandler` 函数。"

#: ../../library/pyexpat.rst:153
msgid ""
"Returns a string containing the base set by a previous call to "
":meth:`SetBase`, or ``None`` if  :meth:`SetBase` hasn't been called."
msgstr ""
"返回包含之前调用 :meth:`SetBase` 所设置的基准位置的字符串，或者如果未调用 :meth:`SetBase` 则返回 ``None``。"

#: ../../library/pyexpat.rst:159
msgid ""
"Returns the input data that generated the current event as a string. The "
"data is in the encoding of the entity which contains the text. When called "
"while an event handler is not active, the return value is ``None``."
msgstr ""
"将生成当前事件的输入数据以字符串形式返回。 数据为包含文本的实体的编码格式。 如果被调用时未激活事件处理器，则返回值将为 ``None``。"

#: ../../library/pyexpat.rst:166
msgid ""
"Create a \"child\" parser which can be used to parse an external parsed "
"entity referred to by content parsed by the parent parser.  The *context* "
"parameter should be the string passed to the "
":meth:`ExternalEntityRefHandler` handler function, described below. The "
"child parser is created with the :attr:`ordered_attributes` and "
":attr:`specified_attributes` set to the values of this parser."
msgstr ""
"创建一个“子”解析器，可被用来解析由父解析器解析的内容所引用的外部解析实体。 *context* 形参应当是传递给 "
":meth:`ExternalEntityRefHandler` 处理函数的字符串，具体如下所述。 子解析器创建时 "
":attr:`ordered_attributes` 和 :attr:`specified_attributes` 会被设为此解析器的值。"

#: ../../library/pyexpat.rst:175
msgid ""
"Control parsing of parameter entities (including the external DTD subset). "
"Possible *flag* values are :const:`XML_PARAM_ENTITY_PARSING_NEVER`, "
":const:`XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE` and "
":const:`XML_PARAM_ENTITY_PARSING_ALWAYS`.  Return true if setting the flag "
"was successful."
msgstr ""
"控制参数实体（包括外部 DTD 子集）的解析。 可能的 *flag* 值有 "
":const:`XML_PARAM_ENTITY_PARSING_NEVER`, "
":const:`XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE` 和 "
":const:`XML_PARAM_ENTITY_PARSING_ALWAYS`。 如果该旗标设置成功则返回真值。"

#: ../../library/pyexpat.rst:183
msgid ""
"Calling this with a true value for *flag* (the default) will cause Expat to "
"call the :attr:`ExternalEntityRefHandler` with :const:`None` for all "
"arguments to allow an alternate DTD to be loaded.  If the document does not "
"contain a document type declaration, the :attr:`ExternalEntityRefHandler` "
"will still be called, but the :attr:`StartDoctypeDeclHandler` and "
":attr:`EndDoctypeDeclHandler` will not be called."
msgstr ""
"调用时将 *flag* 设为真值（默认）将导致 Expat 调用 :attr:`ExternalEntityRefHandler` 时将所有参数设为 "
":const:`None` 以允许加载替代的 DTD。 如果文档不包含文档类型声明，:attr:`ExternalEntityRefHandler` "
"仍然会被调用，但 :attr:`StartDoctypeDeclHandler` 和 :attr:`EndDoctypeDeclHandler` "
"将不会被调用。"

#: ../../library/pyexpat.rst:190
msgid ""
"Passing a false value for *flag* will cancel a previous call that passed a "
"true value, but otherwise has no effect."
msgstr "为 *flag* 传入假值将将撤消之前传入真值的调用，除此之外没有其他影响。"

#: ../../library/pyexpat.rst:193
msgid ""
"This method can only be called before the :meth:`Parse` or :meth:`ParseFile`"
" methods are called; calling it after either of those have been called "
"causes :exc:`ExpatError` to be raised with the :attr:`code` attribute set to"
" ``errors.codes[errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING]``."
msgstr ""
"此方法只能在调用 :meth:`Parse` 或 :meth:`ParseFile` 方法之前被调用；在已调用过这两个方法之后调用它会导致引发 "
":exc:`ExpatError` 且 :attr:`code` 属性被设为 "
"``errors.codes[errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING]``。"

#: ../../library/pyexpat.rst:202
msgid ""
"Calling ``SetReparseDeferralEnabled(False)`` has security implications, as "
"detailed below; please make sure to understand these consequences prior to "
"using the ``SetReparseDeferralEnabled`` method."
msgstr ""
"调用 ``SetReparseDeferralEnabled(False)`` 会对安全产生影响，详情见下文；在使用 "
"``SetReparseDeferralEnabled`` 方法之前请务必了解这些后果。"

#: ../../library/pyexpat.rst:206
msgid ""
"Expat 2.6.0 introduced a security mechanism called \"reparse deferral\" "
"where instead of causing denial of service through quadratic runtime from "
"reparsing large tokens, reparsing of unfinished tokens is now delayed by "
"default until a sufficient amount of input is reached. Due to this delay, "
"registered handlers may — depending of the sizing of input chunks pushed to "
"Expat — no longer be called right after pushing new input to the parser.  "
"Where immediate feedback and taking over responsibility of protecting "
"against denial of service from large tokens are both wanted, calling "
"``SetReparseDeferralEnabled(False)`` disables reparse deferral for the "
"current Expat parser instance, temporarily or altogether. Calling "
"``SetReparseDeferralEnabled(True)`` allows re-enabling reparse deferral."
msgstr ""
"Expat 2.6.0 "
"引入了一种名为“重新解析延迟”的安全机制，这种机制可避免因重新解析大量词元的指数级运行时间而导致的拒绝服务，而是会在默认情况下延迟对未完成词元的重新解析直至达到足够的输入量。"
" 由于这种延迟，已注册的处理器有可能 — 具体取决于推送到 Expat 的输入块大小 — 不会在向解析器推送新输入后立即被调用。 "
"如果希望获得即时反馈并接管防止大量词元因大量词元导致的拒绝服务的责任，可以调用 ``SetReparseDeferralEnabled(False)``"
" 暂时或完全禁用当前 Expat 解析器实例的重新解析延迟。 调用 ``SetReparseDeferralEnabled(True)`` "
"可以再次启用重新解析延迟。"

#: ../../library/pyexpat.rst:219
msgid ""
"Note that :meth:`SetReparseDeferralEnabled` has been backported to some "
"prior releases of CPython as a security fix.  Check for availability of "
":meth:`SetReparseDeferralEnabled` using :func:`hasattr` if used in code "
"running across a variety of Python versions."
msgstr ""
"请注意 :meth:`SetReparseDeferralEnabled` 已作为安全修正被向下移植到一些较早的 CPython 发布版。 "
"如果在运行于多个 Python 版本的代码中要用到 :meth:`SetReparseDeferralEnabled` 请使用 "
":func:`hasattr` 来检查其可用性。"

#: ../../library/pyexpat.rst:228
msgid ""
"Returns whether reparse deferral is currently enabled for the given Expat "
"parser instance."
msgstr "返回当前是否为给定的 Expat 解析器实例启用了重新解析延迟。"

#: ../../library/pyexpat.rst:234
msgid ":class:`xmlparser` objects have the following attributes:"
msgstr ":class:`xmlparser` 对象具有下列属性:"

#: ../../library/pyexpat.rst:239
msgid ""
"The size of the buffer used when :attr:`buffer_text` is true. A new buffer "
"size can be set by assigning a new integer value to this attribute. When the"
" size is changed, the buffer will be flushed."
msgstr ""
"当 :attr:`buffer_text` 为真值时所使用的缓冲区大小。 可以通过将此属性赋一个新的整数值来设置一个新的缓冲区大小。 "
"当大小发生改变时，缓冲区将被刷新。"

#: ../../library/pyexpat.rst:247
msgid ""
"Setting this to true causes the :class:`xmlparser` object to buffer textual "
"content returned by Expat to avoid multiple calls to the "
":meth:`CharacterDataHandler` callback whenever possible.  This can improve "
"performance substantially since Expat normally breaks character data into "
"chunks at every line ending.  This attribute is false by default, and may be"
" changed at any time. Note that when it is false, data that does not contain"
" newlines may be chunked too."
msgstr ""
"将此属性设为真值会使得 :class:`xmlparser` 对象缓冲 Expat 所返回的文本内容以尽可能地避免多次调用 "
":meth:`CharacterDataHandler` 回调。 这可以显著地提升性能，因为 Expat 通常会将字符数据在每个行结束的位置上进行分块。"
" 此属性默认为假值，并可在任何时候被更改。 请注意当其为假值时，不包含换行符的数据也可能被分块。"

#: ../../library/pyexpat.rst:258
msgid ""
"If :attr:`buffer_text` is enabled, the number of bytes stored in the buffer."
" These bytes represent UTF-8 encoded text.  This attribute has no meaningful"
" interpretation when :attr:`buffer_text` is false."
msgstr ""
"当 :attr:`buffer_text` 被启用时，缓冲区中存储的字节数。 这些字节数据表示以 UTF-8 编码的文本。  当 "
":attr:`buffer_text` 为假值时此属性没有任何实际意义。"

#: ../../library/pyexpat.rst:265
msgid ""
"Setting this attribute to a non-zero integer causes the attributes to be "
"reported as a list rather than a dictionary.  The attributes are presented "
"in the order found in the document text.  For each attribute, two list "
"entries are presented: the attribute name and the attribute value.  (Older "
"versions of this module also used this format.)  By default, this attribute "
"is false; it may be changed at any time."
msgstr ""
"将该属性设为非零整数会使得各个属性被报告为列表而非字典。 各个属性会按照在文档文本中的出现顺序显示。 对于每个属性，将显示两个列表条目：属性名和属性值。"
" （该模块的较旧版本也使用了此格式。） 默认情况下，该属性为假值；它可以在任何时候被更改。"

#: ../../library/pyexpat.rst:275
msgid ""
"If set to a non-zero integer, the parser will report only those attributes "
"which were specified in the document instance and not those which were "
"derived from attribute declarations.  Applications which set this need to be"
" especially careful to use what additional information is available from the"
" declarations as needed to comply with the standards for the behavior of XML"
" processors.  By default, this attribute is false; it may be changed at any "
"time."
msgstr ""
"如果设为非零整数，解析器将只报告在文档实例中指明的属性而不报告来自属性声明的属性。 设置此属性的应用程序需要特别小心地使用从声明中获得的附加信息以符合 "
"XML 处理程序的行为标准。 默认情况下，该属性为假值；它可以在任何时候被更改。"

#: ../../library/pyexpat.rst:283
msgid ""
"The following attributes contain values relating to the most recent error "
"encountered by an :class:`xmlparser` object, and will only have correct "
"values once a call to :meth:`Parse` or :meth:`ParseFile` has raised an "
":exc:`xml.parsers.expat.ExpatError` exception."
msgstr ""
"下列属性包含与 :class:`xmlparser` 对象遇到的最近发生的错误有关联的值，并且一旦对 :meth:`Parse` 或 "
":meth:`ParseFile` 的调用引发了 :exc:`xml.parsers.expat.ExpatError` 异常就将只包含正确的值。"

#: ../../library/pyexpat.rst:291
msgid "Byte index at which an error occurred."
msgstr "错误发生位置的字节索引号。"

#: ../../library/pyexpat.rst:296
msgid ""
"Numeric code specifying the problem.  This value can be passed to the "
":func:`ErrorString` function, or compared to one of the constants defined in"
" the ``errors`` object."
msgstr ""
"指明问题的的数字代码。 该值可被传给 :func:`ErrorString` 函数，或是与在 ``errors`` 对象中定义的常量之一进行比较。"

#: ../../library/pyexpat.rst:303
msgid "Column number at which an error occurred."
msgstr "错误发生位置的列号。"

#: ../../library/pyexpat.rst:308
msgid "Line number at which an error occurred."
msgstr "错误发生位置的行号。"

#: ../../library/pyexpat.rst:310
msgid ""
"The following attributes contain values relating to the current parse "
"location in an :class:`xmlparser` object.  During a callback reporting a "
"parse event they indicate the location of the first of the sequence of "
"characters that generated the event.  When called outside of a callback, the"
" position indicated will be just past the last parse event (regardless of "
"whether there was an associated callback)."
msgstr ""
"下列属性包含 :class:`xmlparser` 对象中关联到当前解析位置的值。 "
"在回调报告解析事件期间它们将指示生成事件的字符序列的第一个字符的位置。 "
"当在回调的外部被调用时，所指示的位置将恰好位于最后的解析事件之后（无论是否存在关联的回调）。"

#: ../../library/pyexpat.rst:320
msgid "Current byte index in the parser input."
msgstr "解析器输入的当前字节索引号。"

#: ../../library/pyexpat.rst:325
msgid "Current column number in the parser input."
msgstr "解析器输入的当前列号。"

#: ../../library/pyexpat.rst:330
msgid "Current line number in the parser input."
msgstr "解析器输入的当前行号。"

#: ../../library/pyexpat.rst:332
msgid ""
"Here is the list of handlers that can be set.  To set a handler on an "
":class:`xmlparser` object *o*, use ``o.handlername = func``.  *handlername* "
"must be taken from the following list, and *func* must be a callable object "
"accepting the correct number of arguments.  The arguments are all strings, "
"unless otherwise stated."
msgstr ""
"可被设置的处理器列表。 要在一个 :class:`xmlparser` 对象 *o* 上设置处理器，请使用 ``o.handlername = "
"func``。 *handlername* 必须从下面的列表中获取，而 *func* 必须为接受正确数量参数的可调用对象。 "
"所有参数均为字符串，除非另外指明。"

#: ../../library/pyexpat.rst:341
msgid ""
"Called when the XML declaration is parsed.  The XML declaration is the "
"(optional) declaration of the applicable version of the XML recommendation, "
"the encoding of the document text, and an optional \"standalone\" "
"declaration. *version* and *encoding* will be strings, and *standalone* will"
" be ``1`` if the document is declared standalone, ``0`` if it is declared "
"not to be standalone, or ``-1`` if the standalone clause was omitted. This "
"is only available with Expat version 1.95.0 or newer."
msgstr ""
"当解析 XML 声明时被调用。 XML 声明是 XML 建议适用版本、文档文本的编码格式，以及可选的“独立”声明的（可选）声明。 *version* 和"
" *encoding* 将为字符串，而 *standalone* 在文档被声明为独立时将为 ``1``，在文档被声明为非独立时将为 ``0``，或者在 "
"standalone 短语被省略时则为 ``-1``。 这仅适用于 Expat 的 1.95.0 或更新版本。"

#: ../../library/pyexpat.rst:352
msgid ""
"Called when Expat begins parsing the document type declaration (``<!DOCTYPE "
"...``).  The *doctypeName* is provided exactly as presented.  The *systemId*"
" and *publicId* parameters give the system and public identifiers if "
"specified, or ``None`` if omitted.  *has_internal_subset* will be true if "
"the document contains and internal document declaration subset. This "
"requires Expat version 1.2 or newer."
msgstr ""
"当 Expat 开始解析文档类型声明 (``<!DOCTYPE ...``) 时被调用。 *doctypeName* 会完全按所显示的被提供。 "
"*systemId* 和 *publicId* 形参给出所指定的系统和公有标识符，如果被省略则为 ``None``。 如果文档包含内部文档声明子集则 "
"*has_internal_subset* 将为真值。 这要求 Expat 1.2 或更新的版本。"

#: ../../library/pyexpat.rst:362
msgid ""
"Called when Expat is done parsing the document type declaration. This "
"requires Expat version 1.2 or newer."
msgstr "当 Expat 完成解析文档类型声明时被调用。 这要求 Expat 1.2 或更新版本。"

#: ../../library/pyexpat.rst:368
msgid ""
"Called once for each element type declaration.  *name* is the name of the "
"element type, and *model* is a representation of the content model."
msgstr "为每个元素类型声明调用一次。 *name* 为元素类型名称，而 *model* 为内容模型的表示形式。"

#: ../../library/pyexpat.rst:374
msgid ""
"Called for each declared attribute for an element type.  If an attribute "
"list declaration declares three attributes, this handler is called three "
"times, once for each attribute.  *elname* is the name of the element to "
"which the declaration applies and *attname* is the name of the attribute "
"declared.  The attribute type is a string passed as *type*; the possible "
"values are ``'CDATA'``, ``'ID'``, ``'IDREF'``, ... *default* gives the "
"default value for the attribute used when the attribute is not specified by "
"the document instance, or ``None`` if there is no default value "
"(``#IMPLIED`` values).  If the attribute is required to be given in the "
"document instance, *required* will be true. This requires Expat version "
"1.95.0 or newer."
msgstr ""
"为一个元素类型的每个已声明属性执行调用。 如果一个属性列表声明声明了三个属性，这个处理器会被调用三次，每个属性一次。 *elname* "
"是声明所适用的元素的名称而 *attname* 是已声明的属性的名称。 属性类型是作为 *type* 传入的字符串；可能的值有 ``'CDATA'``,"
" ``'ID'``, ``'IDREF'``, ... *default* 给出了当属性未被文档实例所指明时该属性的默认值，或是为 "
"``None``，如果没有默认值 (``#IMPLIED`` 值) 的话。 如果属性必须在文档实例中给出，则 *required* 将为真值。 这要求 "
"Expat 1.95.0 或更新的版本。"

#: ../../library/pyexpat.rst:388
msgid ""
"Called for the start of every element.  *name* is a string containing the "
"element name, and *attributes* is the element attributes. If "
":attr:`ordered_attributes` is true, this is a list (see "
":attr:`ordered_attributes` for a full description). Otherwise it's a "
"dictionary mapping names to values."
msgstr ""
"在每个元素开始时调用。 *name* 是包含元素名称的字符串，而 *attributes* 是元素的属性。 如果 "
":attr:`ordered_attributes` 为真值，则属性为列表形式 (完整描述参见 :attr:`ordered_attributes`)。"
" 否则为将名称映射到值的字典。"

#: ../../library/pyexpat.rst:397
msgid "Called for the end of every element."
msgstr "在每个元素结束时调用。"

#: ../../library/pyexpat.rst:402
msgid "Called for every processing instruction."
msgstr "在每次处理指令时调用。"

#: ../../library/pyexpat.rst:407
msgid ""
"Called for character data.  This will be called for normal character data, "
"CDATA marked content, and ignorable whitespace.  Applications which must "
"distinguish these cases can use the :attr:`StartCdataSectionHandler`, "
":attr:`EndCdataSectionHandler`, and :attr:`ElementDeclHandler` callbacks to "
"collect the required information. Note that the character data may be "
"chunked even if it is short and so you may receive more than one call to "
":meth:`CharacterDataHandler`. Set the :attr:`buffer_text` instance attribute"
" to ``True`` to avoid that."
msgstr ""
"针对字符数据调用。 此方法将被用于普通字符数据、CDATA 标记的内容以及可忽略的空白符。 需要区别这几种情况的应用程序可以使用 "
":attr:`StartCdataSectionHandler`, :attr:`EndCdataSectionHandler` 和 "
":attr:`ElementDeclHandler` 回调来收集必要的信息。 请注意字符数据即使很短可能会被分块并且你可能会收到多个对 "
":meth:`CharacterDataHandler` 的调用。 请将 :attr:`buffer_text` 实例属性设为 ``True`` "
"来避免此情况。"

#: ../../library/pyexpat.rst:419
msgid ""
"Called for unparsed (NDATA) entity declarations.  This is only present for "
"version 1.2 of the Expat library; for more recent versions, use "
":attr:`EntityDeclHandler` instead.  (The underlying function in the Expat "
"library has been declared obsolete.)"
msgstr ""
"针对未解析（NDATA）实体声明调用。 此方法仅存在于 Expat 库的 1. 2 版；对于更新的版本，请改用 "
":attr:`EntityDeclHandler`。 （下层 Expat 库中的对应函数已被声明为过时。）"

#: ../../library/pyexpat.rst:427
msgid ""
"Called for all entity declarations.  For parameter and internal entities, "
"*value* will be a string giving the declared contents of the entity; this "
"will be ``None`` for external entities.  The *notationName* parameter will "
"be ``None`` for parsed entities, and the name of the notation for unparsed "
"entities. *is_parameter_entity* will be true if the entity is a parameter "
"entity or false for general entities (most applications only need to be "
"concerned with general entities). This is only available starting with "
"version 1.95.0 of the Expat library."
msgstr ""
"针对所有实体声明被调用。 对于形参和内部实体，*value* 将为给出实体的声明内容的字符串；对于外部实体将为 ``None``。 "
"*notationName* 形参对于已解析实体将为 ``None``，对于未解析实体则为标注的名称。 如果实体为形参实体则 "
"*is_parameter_entity* 将为真值而如果为普通实体则为假值（大多数应用程序只需要关注普通实体）。 此方法仅从 1.95.0 版 "
"Expat 库开始才可用。"

#: ../../library/pyexpat.rst:439
msgid ""
"Called for notation declarations.  *notationName*, *base*, and *systemId*, "
"and *publicId* are strings if given.  If the public identifier is omitted, "
"*publicId* will be ``None``."
msgstr ""
"针对标注声明被调用。 *notationName*, *base*, *systemId* 和 *publicId* 如果给出则均应为字符串。 "
"如果省略公有标识符，则 *publicId* 将为 ``None``。"

#: ../../library/pyexpat.rst:446
msgid ""
"Called when an element contains a namespace declaration.  Namespace "
"declarations are processed before the :attr:`StartElementHandler` is called "
"for the element on which declarations are placed."
msgstr ""
"当一个元素包含命名空间声明时被调用。 命名空间声明会在为声明所在的元素调用 :attr:`StartElementHandler` 之前被处理。"

#: ../../library/pyexpat.rst:453
msgid ""
"Called when the closing tag is reached for an element  that contained a "
"namespace declaration.  This is called once for each namespace declaration "
"on the element in the reverse of the order for which the "
":attr:`StartNamespaceDeclHandler` was called to indicate the start of each "
"namespace declaration's scope.  Calls to this handler are made after the "
"corresponding :attr:`EndElementHandler` for the end of the element."
msgstr ""
"当到达包含命名空间声明的元素的关闭标记时被调用。 此方法会按照调用 :attr:`StartNamespaceDeclHandler` "
"以指明每个命名空间作用域的开始的逆顺序为元素上的每个命名空间声明调用一次。 对这个处理器的调用是在相应的 "
":attr:`EndElementHandler` 之后针对元素的结束而进行的。"

#: ../../library/pyexpat.rst:463
msgid ""
"Called for comments.  *data* is the text of the comment, excluding the "
"leading ``'<!-``\\ ``-'`` and trailing ``'-``\\ ``->'``."
msgstr "针对注释被调用。 *data* 是注释的文本，不包括开头的 ``'<!-``\\ ``-'`` 和末尾的 ``'-``\\ ``->'``。"

#: ../../library/pyexpat.rst:469
msgid ""
"Called at the start of a CDATA section.  This and "
":attr:`EndCdataSectionHandler` are needed to be able to identify the "
"syntactical start and end for CDATA sections."
msgstr ""
"在一个 CDATA 节的开头被调用。 需要此方法和 :attr:`EndCdataSectionHandler` 以便能够标识 CDATA "
"节的语法开始和结束。"

#: ../../library/pyexpat.rst:476
msgid "Called at the end of a CDATA section."
msgstr "在一个 CDATA 节的末尾被调用。"

#: ../../library/pyexpat.rst:481
msgid ""
"Called for any characters in the XML document for which no applicable "
"handler has been specified.  This means characters that are part of a "
"construct which could be reported, but for which no handler has been "
"supplied."
msgstr "针对 XML 文档中没有指定适用处理器的任何字符被调用。 这包括了所有属于可被报告的结构的一部分，但未提供处理器的字符。"

#: ../../library/pyexpat.rst:488
msgid ""
"This is the same as the :func:`DefaultHandler`,  but doesn't inhibit "
"expansion of internal entities. The entity reference will not be passed to "
"the default handler."
msgstr "这与 :func:`DefaultHandler` 相同，但不会抑制内部实体的扩展。 实体引用将不会被传递给默认处理器。"

#: ../../library/pyexpat.rst:495
msgid ""
"Called if the XML document hasn't been declared as being a standalone "
"document. This happens when there is an external subset or a reference to a "
"parameter entity, but the XML declaration does not set standalone to ``yes``"
" in an XML declaration.  If this handler returns ``0``, then the parser will"
" raise an :const:`XML_ERROR_NOT_STANDALONE` error.  If this handler is not "
"set, no exception is raised by the parser for this condition."
msgstr ""
"当 XML 文档未被声明为独立文档时被调用。 这种情况发生在出现外部子集或对参数实体的引用，但 XML 声明没有在 XML 声明中将 "
"standalone 设为 ``yes`` 的时候。 如果这个处理器返回 ``0``，那么解析器将引发 "
":const:`XML_ERROR_NOT_STANDALONE` 错误。 如果这个处理器没有被设置，那么解析器就不会为这个条件引发任何异常。"

#: ../../library/pyexpat.rst:505
msgid ""
"Called for references to external entities.  *base* is the current base, as "
"set by a previous call to :meth:`SetBase`.  The public and system "
"identifiers, *systemId* and *publicId*, are strings if given; if the public "
"identifier is not given, *publicId* will be ``None``.  The *context* value "
"is opaque and should only be used as described below."
msgstr ""
"为对外部实体的引用执行调用。 *base* 为当前的基准，由之前对 :meth:`SetBase` 的调用设置。 公有和系统标识符 *systemId*"
" 和 *publicId* 如果给出则圴为字符串；如果公有标识符未给出，则 *publicId* 将为 ``None``。 *context* "
"是仅根据以下说明来使用的不透明值。"

#: ../../library/pyexpat.rst:511
msgid ""
"For external entities to be parsed, this handler must be implemented. It is "
"responsible for creating the sub-parser using "
"``ExternalEntityParserCreate(context)``, initializing it with the "
"appropriate callbacks, and parsing the entity.  This handler should return "
"an integer; if it returns ``0``, the parser will raise an "
":const:`XML_ERROR_EXTERNAL_ENTITY_HANDLING` error, otherwise parsing will "
"continue."
msgstr ""
"对于要解析的外部实体，这个处理器必须被实现。 它负责使用 ``ExternalEntityParserCreate(context)`` "
"来创建子解析器，通过适当的回调将其初始化，并对实体进行解析。 这个处理器应当返回一个整数；如果它返回 ``0``，则解析器将引发 "
":const:`XML_ERROR_EXTERNAL_ENTITY_HANDLING` 错误，否则解析将会继续。"

#: ../../library/pyexpat.rst:519
msgid ""
"If this handler is not provided, external entities are reported by the "
":attr:`DefaultHandler` callback, if provided."
msgstr "如果未提供这个处理器，外部实体会由 :attr:`DefaultHandler` 回调来报告，如果提供了该回调的话。"

#: ../../library/pyexpat.rst:526
msgid "ExpatError Exceptions"
msgstr "ExpatError 异常"

#: ../../library/pyexpat.rst:531
msgid ":exc:`ExpatError` exceptions have a number of interesting attributes:"
msgstr ":exc:`ExpatError` 异常包含几个有趣的属性:"

#: ../../library/pyexpat.rst:536
msgid ""
"Expat's internal error number for the specific error.  The "
":data:`errors.messages <xml.parsers.expat.errors.messages>` dictionary maps "
"these error numbers to Expat's error messages.  For example::"
msgstr ""
"Expat 对于指定错误的内部错误号。 :data:`errors.messages "
"<xml.parsers.expat.errors.messages>` 字典会将这些错误号映射到 Expat 的错误消息。 例如::"

#: ../../library/pyexpat.rst:540
msgid ""
"from xml.parsers.expat import ParserCreate, ExpatError, errors\n"
"\n"
"p = ParserCreate()\n"
"try:\n"
"    p.Parse(some_xml_document)\n"
"except ExpatError as err:\n"
"    print(\"Error:\", errors.messages[err.code])"
msgstr ""
"from xml.parsers.expat import ParserCreate, ExpatError, errors\n"
"\n"
"p = ParserCreate()\n"
"try:\n"
"    p.Parse(some_xml_document)\n"
"except ExpatError as err:\n"
"    print(\"Error:\", errors.messages[err.code])"

#: ../../library/pyexpat.rst:548
msgid ""
"The :mod:`~xml.parsers.expat.errors` module also provides error message "
"constants and a dictionary :data:`~xml.parsers.expat.errors.codes` mapping "
"these messages back to the error codes, see below."
msgstr ""
":mod:`~xml.parsers.expat.errors` 模块也提供了一些错误消息常量和一个将这些消息映射回错误码的字典 "
":data:`~xml.parsers.expat.errors.codes`，参见下文。"

#: ../../library/pyexpat.rst:555
msgid ""
"Line number on which the error was detected.  The first line is numbered "
"``1``."
msgstr "检测到错误所在的行号。 首行的行号为 ``1``。"

#: ../../library/pyexpat.rst:560
msgid ""
"Character offset into the line where the error occurred.  The first column "
"is numbered ``0``."
msgstr "错误发生在行中的字符偏移量。 首列的列号为 ``0``。"

#: ../../library/pyexpat.rst:567
msgid "Example"
msgstr "示例"

#: ../../library/pyexpat.rst:569
msgid ""
"The following program defines three handlers that just print out their "
"arguments. ::"
msgstr "以下程序定义了三个处理器，会简单地打印出它们的参数。::"

#: ../../library/pyexpat.rst:572
msgid ""
"import xml.parsers.expat\n"
"\n"
"# 3 handler functions\n"
"def start_element(name, attrs):\n"
"    print('Start element:', name, attrs)\n"
"def end_element(name):\n"
"    print('End element:', name)\n"
"def char_data(data):\n"
"    print('Character data:', repr(data))\n"
"\n"
"p = xml.parsers.expat.ParserCreate()\n"
"\n"
"p.StartElementHandler = start_element\n"
"p.EndElementHandler = end_element\n"
"p.CharacterDataHandler = char_data\n"
"\n"
"p.Parse(\"\"\"<?xml version=\"1.0\"?>\n"
"<parent id=\"top\"><child1 name=\"paul\">Text goes here</child1>\n"
"<child2 name=\"fred\">More text</child2>\n"
"</parent>\"\"\", 1)"
msgstr ""
"import xml.parsers.expat\n"
"\n"
"# 3 处理器函数\n"
"def start_element(name, attrs):\n"
"    print('Start element:', name, attrs)\n"
"def end_element(name):\n"
"    print('End element:', name)\n"
"def char_data(data):\n"
"    print('Character data:', repr(data))\n"
"\n"
"p = xml.parsers.expat.ParserCreate()\n"
"\n"
"p.StartElementHandler = start_element\n"
"p.EndElementHandler = end_element\n"
"p.CharacterDataHandler = char_data\n"
"\n"
"p.Parse(\"\"\"<?xml version=\"1.0\"?>\n"
"<parent id=\"top\"><child1 name=\"paul\">Text goes here</child1>\n"
"<child2 name=\"fred\">More text</child2>\n"
"</parent>\"\"\", 1)"

#: ../../library/pyexpat.rst:593
msgid "The output from this program is::"
msgstr "来自这个程序的输出是::"

#: ../../library/pyexpat.rst:595
msgid ""
"Start element: parent {'id': 'top'}\n"
"Start element: child1 {'name': 'paul'}\n"
"Character data: 'Text goes here'\n"
"End element: child1\n"
"Character data: '\\n'\n"
"Start element: child2 {'name': 'fred'}\n"
"Character data: 'More text'\n"
"End element: child2\n"
"Character data: '\\n'\n"
"End element: parent"
msgstr ""
"Start element: parent {'id': 'top'}\n"
"Start element: child1 {'name': 'paul'}\n"
"Character data: 'Text goes here'\n"
"End element: child1\n"
"Character data: '\\n'\n"
"Start element: child2 {'name': 'fred'}\n"
"Character data: 'More text'\n"
"End element: child2\n"
"Character data: '\\n'\n"
"End element: parent"

#: ../../library/pyexpat.rst:610
msgid "Content Model Descriptions"
msgstr "内容模型描述"

#: ../../library/pyexpat.rst:616
msgid ""
"Content models are described using nested tuples.  Each tuple contains four "
"values: the type, the quantifier, the name, and a tuple of children.  "
"Children are simply additional content model descriptions."
msgstr "内容模型是使用嵌套的元组来描述的。 每个元素包含四个值：类型、限定符、名称和一个子元组。 子元组就是附加的内容模型描述。"

#: ../../library/pyexpat.rst:620
msgid ""
"The values of the first two fields are constants defined in the "
":mod:`xml.parsers.expat.model` module.  These constants can be collected in "
"two groups: the model type group and the quantifier group."
msgstr ""
"前两个字段的值是在 :mod:`xml.parsers.expat.model` 模块中定义的常量。 这些常量可分为两组：模型类型组和限定符组。"

#: ../../library/pyexpat.rst:624
msgid "The constants in the model type group are:"
msgstr "模型类型组中的常量有:"

#: ../../library/pyexpat.rst:630
msgid ""
"The element named by the model name was declared to have a content model of "
"``ANY``."
msgstr "模型名称所指定的元素被声明为具有 ``ANY`` 内容模型。"

#: ../../library/pyexpat.rst:637
msgid ""
"The named element allows a choice from a number of options; this is used for"
" content models such as ``(A | B | C)``."
msgstr "命名元素允许从几个选项中选择；这被用于 ``(A | B | C)`` 形式的内容模型。"

#: ../../library/pyexpat.rst:644
msgid "Elements which are declared to be ``EMPTY`` have this model type."
msgstr "被声明为 ``EMPTY`` 的元素具有此模型类型。"

#: ../../library/pyexpat.rst:658
msgid ""
"Models which represent a series of models which follow one after the other "
"are indicated with this model type.  This is used for models such as ``(A, "
"B, C)``."
msgstr "代表彼此相连的一系列模型的模型用此模型类型来指明。 这被用于 ``(A, B, C)`` 形式的模型。"

#: ../../library/pyexpat.rst:661
msgid "The constants in the quantifier group are:"
msgstr "限定符组中的常量有:"

#: ../../library/pyexpat.rst:667
msgid "No modifier is given, so it can appear exactly once, as for ``A``."
msgstr "未给出限定符，这样它可以只出现一次，例如 ``A``。"

#: ../../library/pyexpat.rst:673
msgid ""
"The model is optional: it can appear once or not at all, as for ``A?``."
msgstr "模型是可选的：它可以出现一次或完全不出现，例如 ``A?``。"

#: ../../library/pyexpat.rst:679
msgid "The model must occur one or more times (like ``A+``)."
msgstr "模型必须出现一次或多次 (例如 ``A+``)。"

#: ../../library/pyexpat.rst:685
msgid "The model must occur zero or more times, as for ``A*``."
msgstr "模型必须出现零次或多次，例如 ``A*``。"

#: ../../library/pyexpat.rst:691
msgid "Expat error constants"
msgstr "Expat 错误常量"

#: ../../library/pyexpat.rst:695
msgid ""
"The following constants are provided in the :mod:`xml.parsers.expat.errors` "
"module.  These constants are useful in interpreting some of the attributes "
"of the :exc:`ExpatError` exception objects raised when an error has "
"occurred. Since for backwards compatibility reasons, the constants' value is"
" the error *message* and not the numeric error *code*, you do this by "
"comparing its :attr:`code` attribute with "
":samp:`errors.codes[errors.XML_ERROR_{CONSTANT_NAME}]`."
msgstr ""
"下列常量是在 :mod:`xml.parsers.expat.errors` 模块中提供的。 这些常量在有错误发生时解读被引发的 "
":exc:`ExpatError` 异常对象的某些属性时很有用处。 出于保持向下兼容性的理由，这些常量的值是错误 *消息* 而不是数字形式的错误 "
"*代码*，为此你可以将它的 :attr:`code` 属性和 "
":samp:`errors.codes[errors.XML_ERROR_{CONSTANT_NAME}]` 进行比较。"

#: ../../library/pyexpat.rst:703
msgid "The ``errors`` module has the following attributes:"
msgstr "``errors`` 模块具有以下属性:"

#: ../../library/pyexpat.rst:707
msgid "A dictionary mapping string descriptions to their error codes."
msgstr "将字符串描述映射到其错误代码的字典。"

#: ../../library/pyexpat.rst:714
msgid "A dictionary mapping numeric error codes to their string descriptions."
msgstr "将数字形式的错误代码映射到其字符串描述的字典。"

#: ../../library/pyexpat.rst:724
msgid ""
"An entity reference in an attribute value referred to an external entity "
"instead of an internal entity."
msgstr "属性值中指向一个外部实体而非内部实体的实体引用。"

#: ../../library/pyexpat.rst:730
msgid ""
"A character reference referred to a character which is illegal in XML (for "
"example, character ``0``, or '``&#0;``')."
msgstr "指向一个在 XML 不合法的字符的字符引用 (例如，字符 ``0`` 或 '``&#0;``')。"

#: ../../library/pyexpat.rst:736
msgid ""
"An entity reference referred to an entity which was declared with a "
"notation, so cannot be parsed."
msgstr "指向一个使用标注声明，因而无法被解析的实体的实体引用。"

#: ../../library/pyexpat.rst:742
msgid "An attribute was used more than once in a start tag."
msgstr "一个属性在一个开始标记中被使用超过一次。"

#: ../../library/pyexpat.rst:750
msgid ""
"Raised when an input byte could not properly be assigned to a character; for"
" example, a NUL byte (value ``0``) in a UTF-8 input stream."
msgstr "当一个输入字节无法被正确分配给一个字符时引发；例如，在 UTF-8 输入流中的 NUL 字节 (值为 ``0``)。"

#: ../../library/pyexpat.rst:756
msgid "Something other than whitespace occurred after the document element."
msgstr "在文档元素之后出现空白符以外的内容。"

#: ../../library/pyexpat.rst:761
msgid ""
"An XML declaration was found somewhere other than the start of the input "
"data."
msgstr "在输入数据开始位置以外的地方发现 XML 声明。"

#: ../../library/pyexpat.rst:766
msgid ""
"The document contains no elements (XML requires all documents to contain "
"exactly one top-level element).."
msgstr "文档不包含任何元素（XML 要求所有文档都包含恰好一个最高层级元素）。"

#: ../../library/pyexpat.rst:772
msgid "Expat was not able to allocate memory internally."
msgstr "Expat 无法在内部分配内存。"

#: ../../library/pyexpat.rst:777
msgid "A parameter entity reference was found where it was not allowed."
msgstr "在不被允许的位置发现一个参数实体引用。"

#: ../../library/pyexpat.rst:782
msgid "An incomplete character was found in the input."
msgstr "在输入中发出一个不完整的字符。"

#: ../../library/pyexpat.rst:787
msgid ""
"An entity reference contained another reference to the same entity; possibly"
" via a different name, and possibly indirectly."
msgstr "一个实体引用包含了对同一实体的另一个引用；可能是通过不同的名称，并可能是间接的引用。"

#: ../../library/pyexpat.rst:793
msgid "Some unspecified syntax error was encountered."
msgstr "遇到了某个未指明的语法错误。"

#: ../../library/pyexpat.rst:798
msgid "An end tag did not match the innermost open start tag."
msgstr "一个结束标记不能匹配到最内层的未关闭开始标记。"

#: ../../library/pyexpat.rst:803
msgid ""
"Some token (such as a start tag) was not closed before the end of the stream"
" or the next token was encountered."
msgstr "某些记号（例如开始标记）在流结束或遇到下一个记号之前还未关闭。"

#: ../../library/pyexpat.rst:809
msgid "A reference was made to an entity which was not defined."
msgstr "对一个未定义的实体进行了引用。"

#: ../../library/pyexpat.rst:814
msgid "The document encoding is not supported by Expat."
msgstr "文档编码格式不被 Expat 所支持。"

#: ../../library/pyexpat.rst:819
msgid "A CDATA marked section was not closed."
msgstr "一个 CDATA 标记节还未关闭。"

#: ../../library/pyexpat.rst:827
msgid ""
"The parser determined that the document was not \"standalone\" though it "
"declared itself to be in the XML declaration, and the "
":attr:`NotStandaloneHandler` was set and returned ``0``."
msgstr ""
"解析器确定文档不是“独立的”但它却在 XML 声明中声明自己是独立的，并且 :attr:`NotStandaloneHandler` 被设置为返回 "
"``0``。"

#: ../../library/pyexpat.rst:840
msgid ""
"An operation was requested that requires DTD support to be compiled in, but "
"Expat was configured without DTD support.  This should never be reported by "
"a standard build of the :mod:`xml.parsers.expat` module."
msgstr ""
"请求了一个需要已编译 DTD 支持的操作，但 Expat 被配置为不带 DTD 支持。 此错误应当绝对不会被 "
":mod:`xml.parsers.expat` 模块的标准构建版本所报告。"

#: ../../library/pyexpat.rst:847
msgid ""
"A behavioral change was requested after parsing started that can only be "
"changed before parsing has started.  This is (currently) only raised by "
":meth:`UseForeignDTD`."
msgstr "在解析开始之后请求一个只能在解析开始之前执行的行为改变。 此错误（目前）只能由 :meth:`UseForeignDTD` 所引发。"

#: ../../library/pyexpat.rst:854
msgid "An undeclared prefix was found when namespace processing was enabled."
msgstr "当命名空间处理被启用时发现一个未声明的前缀。"

#: ../../library/pyexpat.rst:859
msgid ""
"The document attempted to remove the namespace declaration associated with a"
" prefix."
msgstr "文档试图移除与某个前缀相关联的命名空间声明。"

#: ../../library/pyexpat.rst:865
msgid "A parameter entity contained incomplete markup."
msgstr "一个参数实体包含不完整的标记。"

#: ../../library/pyexpat.rst:870
msgid "The document contained no document element at all."
msgstr "文档完全未包含任何文档元素。"

#: ../../library/pyexpat.rst:875
msgid "There was an error parsing a text declaration in an external entity."
msgstr "解析一个外部实体中的文本声明时出现错误。"

#: ../../library/pyexpat.rst:880
msgid "Characters were found in the public id that are not allowed."
msgstr "在公有 id 中发现不被允许的字符。"

#: ../../library/pyexpat.rst:885
msgid ""
"The requested operation was made on a suspended parser, but isn't allowed.  "
"This includes attempts to provide additional input or to stop the parser."
msgstr "在挂起的解析器上请求执行操作，但未获得允许。 这包括提供额外输入或停止解析器的尝试。"

#: ../../library/pyexpat.rst:891
msgid ""
"An attempt to resume the parser was made when the parser had not been "
"suspended."
msgstr "在解析器未被挂起的时候执行恢复解析器的尝试。"

#: ../../library/pyexpat.rst:896 ../../library/pyexpat.rst:929
#: ../../library/pyexpat.rst:934
msgid "This should not be reported to Python applications."
msgstr "此错误不应当被报告给 Python 应用程序。"

#: ../../library/pyexpat.rst:901
msgid ""
"The requested operation was made on a parser which was finished parsing "
"input, but isn't allowed.  This includes attempts to provide additional "
"input or to stop the parser."
msgstr "在一个已经完成解析输入的解析器上请求执行操作，但未获得允许。 这包括提供额外输入或停止解析器的尝试。"

#: ../../library/pyexpat.rst:911
msgid ""
"An attempt was made to undeclare reserved namespace prefix ``xml`` or to "
"bind it to another namespace URI."
msgstr "有人试图撤销保留的命名空间前缀 ``xml`` 或将其绑定到另一个命名空间 URI。"

#: ../../library/pyexpat.rst:918
msgid ""
"An attempt was made to declare or undeclare reserved namespace prefix "
"``xmlns``."
msgstr "有人试图声明或撤销保留的命名空间前缀 ``xmlns``。"

#: ../../library/pyexpat.rst:923
msgid ""
"An attempt was made to bind the URI of one the reserved namespace prefixes "
"``xml`` and ``xmlns`` to another namespace prefix."
msgstr "有人试图将一个保留的命名空间前缀 ``xml`` 和 ``xmlns`` 的 URI 绑定到另一个命名空间前缀。"

#: ../../library/pyexpat.rst:939
msgid ""
"The limit on input amplification factor (from DTD and entities) has been "
"breached."
msgstr "输入放大系数的限制（来自 DTD 和实体）已被突破。"

#: ../../library/pyexpat.rst:944
msgid "Footnotes"
msgstr "备注"

#: ../../library/pyexpat.rst:945
msgid ""
"The encoding string included in XML output should conform to the appropriate"
" standards. For example, \"UTF-8\" is valid, but \"UTF8\" is not. See "
"https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and "
"https://www.iana.org/assignments/character-sets/character-sets.xhtml."
msgstr ""
"包括在 XML 输出中的编码格式字符串应当符合适当的标准。 例如 \"UTF-8\" 是有效的，但 \"UTF8\" 是无效的。 请参阅 "
"https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl 和 "
"https://www.iana.org/assignments/character-sets/character-sets.xhtml。"

#: ../../library/pyexpat.rst:25
msgid "Expat"
msgstr "Expat"

#: ../../library/pyexpat.rst:35
msgid "module"
msgstr "module"

#: ../../library/pyexpat.rst:35
msgid "pyexpat"
msgstr "pyexpat"
