# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-11 14:21+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.dom.minidom.rst:2
msgid ":mod:`!xml.dom.minidom` --- Minimal DOM implementation"
msgstr ":mod:`!xml.dom.minidom` --- 最小化的 DOM 实现"

#: ../../library/xml.dom.minidom.rst:11
msgid "**Source code:** :source:`Lib/xml/dom/minidom.py`"
msgstr "**源代码:** :source:`Lib/xml/dom/minidom.py`"

#: ../../library/xml.dom.minidom.rst:15
msgid ""
":mod:`xml.dom.minidom` is a minimal implementation of the Document Object "
"Model interface, with an API similar to that in other languages.  It is "
"intended to be simpler than the full DOM and also significantly smaller.  "
"Users who are not already proficient with the DOM should consider using the "
":mod:`xml.etree.ElementTree` module for their XML processing instead."
msgstr ""
":mod:`xml.dom.minidom` 是文档对象模型接口的最小化实现，具有与其他语言类似的 API。 它的目标是比完整 DOM "
"更简单并且更为小巧。 对于 DOM 还不十分熟悉的用户则应当考虑改用 :mod:`xml.etree.ElementTree` 模块来进行 XML "
"处理。"

#: ../../library/xml.dom.minidom.rst:24
msgid ""
"If you need to parse untrusted or unauthenticated data, see :ref:`xml-"
"security`."
msgstr "如果你需要解析不受信任或未经身份验证的数据，请参阅 :ref:`xml-security`。"

#: ../../library/xml.dom.minidom.rst:28
msgid ""
"DOM applications typically start by parsing some XML into a DOM.  With "
":mod:`xml.dom.minidom`, this is done through the parse functions::"
msgstr ""
"DOM 应用程序通常会从将某个 XML 解析为 DOM 开始。 使用 :mod:`xml.dom.minidom` 时，这是通过各种解析函数来完成的::"

#: ../../library/xml.dom.minidom.rst:31
msgid ""
"from xml.dom.minidom import parse, parseString\n"
"\n"
"dom1 = parse('c:\\\\temp\\\\mydata.xml')  # parse an XML file by name\n"
"\n"
"datasource = open('c:\\\\temp\\\\mydata.xml')\n"
"dom2 = parse(datasource)  # parse an open file\n"
"\n"
"dom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')"
msgstr ""
"from xml.dom.minidom import parse, parseString\n"
"\n"
"dom1 = parse('c:\\\\temp\\\\mydata.xml')  # 解析指定名称的 XML 文件\n"
"\n"
"datasource = open('c:\\\\temp\\\\mydata.xml')\n"
"dom2 = parse(datasource)  # 解析打开的文件\n"
"\n"
"dom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')"

#: ../../library/xml.dom.minidom.rst:40
msgid ""
"The :func:`parse` function can take either a filename or an open file "
"object."
msgstr ":func:`parse` 函数可接受一个文件名或者打开的文件对象。"

#: ../../library/xml.dom.minidom.rst:45
msgid ""
"Return a :class:`Document` from the given input. *filename_or_file* may be "
"either a file name, or a file-like object. *parser*, if given, must be a "
"SAX2 parser object. This function will change the document handler of the "
"parser and activate namespace support; other parser configuration (like "
"setting an entity resolver) must have been done in advance."
msgstr ""
"根据给定的输入返回一个 :class:`Document`。 *filename_or_file* 可以是一个文件名，或是一个文件型对象。 如果给定 "
"*parser* 则它必须是一个 SAX2 解析器对象。 "
"此函数将修改解析器的处理程序并激活命名空间支持；其他解析器配置（例如设置一个实体求解器）必须已经提前完成。"

#: ../../library/xml.dom.minidom.rst:51
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr "如果你将 XML 存放为字符串形式，则可以改用 :func:`parseString` 函数:"

#: ../../library/xml.dom.minidom.rst:57
msgid ""
"Return a :class:`Document` that represents the *string*. This method creates"
" an :class:`io.StringIO` object for the string and passes that on to "
":func:`parse`."
msgstr ""
"返回一个代表 *string* 的 :class:`Document`。 此方法会为指定字符串创建一个 :class:`io.StringIO` "
"对象并将其传递给 :func:`parse`。"

#: ../../library/xml.dom.minidom.rst:60
msgid ""
"Both functions return a :class:`Document` object representing the content of"
" the document."
msgstr ""
"两个函数均返回一个代表文档内容的 :class:`Document` 对象。object representing the content of the"
" document."

#: ../../library/xml.dom.minidom.rst:63
msgid ""
"What the :func:`parse` and :func:`parseString` functions do is connect an "
"XML parser with a \"DOM builder\" that can accept parse events from any SAX "
"parser and convert them into a DOM tree.  The name of the functions are "
"perhaps misleading, but are easy to grasp when learning the interfaces.  The"
" parsing of the document will be completed before these functions return; "
"it's simply that these functions do not provide a parser implementation "
"themselves."
msgstr ""
":func:`parse` 和 :func:`parseString` 函数所做的是将 XML 解析器连接到一个 \"DOM 构建器\"，它可以从任意 "
"SAX 解析器接收解析事件并将其转换为 DOM 树结构。 这两个函数的名称可能有些误导性，但在学习此接口时是很容易掌握的。 "
"文档解析操作将在这两个函数返回之前完成；简单地说这两个函数本身并不提供解析器实现。"

#: ../../library/xml.dom.minidom.rst:70
msgid ""
"You can also create a :class:`Document` by calling a method on a \"DOM "
"Implementation\" object.  You can get this object either by calling the "
":func:`getDOMImplementation` function in the :mod:`xml.dom` package or the "
":mod:`xml.dom.minidom` module.  Once you have a :class:`Document`, you can "
"add child nodes to it to populate the DOM::"
msgstr ""
"你也可以通过在一个 \"DOM 实现\" 对象上调用方法来创建 :class:`Document`。 此对象可通过调用 :mod:`xml.dom` "
"包或者 :mod:`xml.dom.minidom` 模块中的 :func:`getDOMImplementation` 函数来获取。 一旦你获得了一个"
" :class:`Document`，你就可以向它添加子节点来填充 DOM::"

#: ../../library/xml.dom.minidom.rst:76
msgid ""
"from xml.dom.minidom import getDOMImplementation\n"
"\n"
"impl = getDOMImplementation()\n"
"\n"
"newdoc = impl.createDocument(None, \"some_tag\", None)\n"
"top_element = newdoc.documentElement\n"
"text = newdoc.createTextNode('Some textual content.')\n"
"top_element.appendChild(text)"
msgstr ""
"from xml.dom.minidom import getDOMImplementation\n"
"\n"
"impl = getDOMImplementation()\n"
"\n"
"newdoc = impl.createDocument(None, \"some_tag\", None)\n"
"top_element = newdoc.documentElement\n"
"text = newdoc.createTextNode('Some textual content.')\n"
"top_element.appendChild(text)"

#: ../../library/xml.dom.minidom.rst:85
msgid ""
"Once you have a DOM document object, you can access the parts of your XML "
"document through its properties and methods.  These properties are defined "
"in the DOM specification.  The main property of the document object is the "
":attr:`documentElement` property.  It gives you the main element in the XML "
"document: the one that holds all others.  Here is an example program::"
msgstr ""
"一旦你得到了 DOM 文档对象，你就可以通过其属性和方法访问对应 XML 文档的各个部分。 这些属性定义在 DOM "
"规格说明当中；文档对象的主要特征属性是 :attr:`documentElement`。 它给出了 XML 文档中的主元素：即包含了所有其他元素的元素。"
" 以下是一个示例程序::"

#: ../../library/xml.dom.minidom.rst:91
msgid ""
"dom3 = parseString(\"<myxml>Some data</myxml>\")\n"
"assert dom3.documentElement.tagName == \"myxml\""
msgstr ""
"dom3 = parseString(\"<myxml>Some data</myxml>\")\n"
"assert dom3.documentElement.tagName == \"myxml\""

#: ../../library/xml.dom.minidom.rst:94
msgid ""
"When you are finished with a DOM tree, you may optionally call the "
":meth:`unlink` method to encourage early cleanup of the now-unneeded "
"objects.  :meth:`unlink` is an :mod:`xml.dom.minidom`\\ -specific extension "
"to the DOM API that renders the node and its descendants essentially "
"useless.  Otherwise, Python's garbage collector will eventually take care of"
" the objects in the tree."
msgstr ""
"当你完成对一个 DOM 树的处理时，你可以选择调用 :meth:`unlink` 方法来鼓励尽早清除已不再需要的对象。 :meth:`unlink` "
"是针对 DOM API 的 :mod:`xml.dom.minidom` 专属扩展，它会将特定节点及其下级标记为不再有用。 在其他情况下，Python "
"的垃圾回收器将负责最终处理树结构中的对象。"

#: ../../library/xml.dom.minidom.rst:103
msgid ""
"`Document Object Model (DOM) Level 1 Specification "
"<https://www.w3.org/TR/REC-DOM-Level-1/>`_"
msgstr "`文档对象模型 (DOM) 第 1 层级规格说明 <https://www.w3.org/TR/REC-DOM-Level-1/>`_"

#: ../../library/xml.dom.minidom.rst:104
msgid ""
"The W3C recommendation for the DOM supported by :mod:`xml.dom.minidom`."
msgstr "被 :mod:`xml.dom.minidom` 所支持的 W3C 针对 DOM 的建议。"

#: ../../library/xml.dom.minidom.rst:110
msgid "DOM Objects"
msgstr "DOM 对象"

#: ../../library/xml.dom.minidom.rst:112
msgid ""
"The definition of the DOM API for Python is given as part of the "
":mod:`xml.dom` module documentation.  This section lists the differences "
"between the API and :mod:`xml.dom.minidom`."
msgstr ""
"Python 的 DOM API 定义被作为 :mod:`xml.dom` 模块文档的一部分给出。  这一节列出了该 API 和 "
":mod:`xml.dom.minidom` 之间的差异。"

#: ../../library/xml.dom.minidom.rst:119
msgid ""
"Break internal references within the DOM so that it will be garbage "
"collected on versions of Python without cyclic GC.  Even when cyclic GC is "
"available, using this can make large amounts of memory available sooner, so "
"calling this on DOM objects as soon as they are no longer needed is good "
"practice.  This only needs to be called on the :class:`Document` object, but"
" may be called on child nodes to discard children of that node."
msgstr ""
"破坏 DOM 的内部引用以便它能在没有循环 GC 的 Python 版本上垃圾回收器回收。 即使在循环 GC "
"可用的时候，使用此方法也可让大量内存更快变为可用，因此当 DOM 对象不再被需要时尽早调用它们的这个方法是很好的做法。 此方法只须在 "
":class:`Document` 对象上调用，但也可以在下级节点上调用以丢弃该节点的下级节点。"

#: ../../library/xml.dom.minidom.rst:126
msgid ""
"You can avoid calling this method explicitly by using the :keyword:`with` "
"statement. The following code will automatically unlink *dom* when the "
":keyword:`!with` block is exited::"
msgstr ""
"你可以通过使用 :keyword:`with` 语句来避免显式调用此方法。 以下代码会在 :keyword:`!with` 代码块退出时自动取消链接 "
"*dom*::"

#: ../../library/xml.dom.minidom.rst:130
msgid ""
"with xml.dom.minidom.parse(datasource) as dom:\n"
"    ... # Work with dom."
msgstr ""
"with xml.dom.minidom.parse(datasource) as dom:\n"
"    ... # 操作 dom。"

#: ../../library/xml.dom.minidom.rst:137
msgid ""
"Write XML to the writer object.  The writer receives texts but not bytes as "
"input, it should have a :meth:`write` method which matches that of the file "
"object interface.  The *indent* parameter is the indentation of the current "
"node. The *addindent* parameter is the incremental indentation to use for "
"subnodes of the current one.  The *newl* parameter specifies the string to "
"use to terminate newlines."
msgstr ""
"将 XML 写入到写入器对象。 写入器接受文本而非字节串作为输入，它应当具有与文件对象接口相匹配的 :meth:`write` 方法。 *indent*"
" 形参是当前节点的缩进层级。 *addindent* 形参是用于当前节点的下级节点的缩进量。 *newl* 形参指定用于一行结束的字符串。"

#: ../../library/xml.dom.minidom.rst:144
msgid ""
"For the :class:`Document` node, an additional keyword argument *encoding* "
"can be used to specify the encoding field of the XML header."
msgstr "对于 :class:`Document` 节点，可以使用附加的关键字参数 *encoding* 来指定 XML 标头的编码格式字段。"

#: ../../library/xml.dom.minidom.rst:147
msgid ""
"Similarly, explicitly stating the *standalone* argument causes the "
"standalone document declarations to be added to the prologue of the XML "
"document. If the value is set to ``True``, ``standalone=\"yes\"`` is added, "
"otherwise it is set to ``\"no\"``. Not stating the argument will omit the "
"declaration from the document."
msgstr ""
"类似地，显式指明 *standalone* 参数将会使单独的文档声明被添加到 XML 文档的开头部分。 如果将该值设为 ``True``，则会添加 "
"``standalone=\"yes\"``，否则它会被设为 ``\"no\"``。 未指明该参数将使文档声明被省略。"

#: ../../library/xml.dom.minidom.rst:154
msgid ""
"The :meth:`writexml` method now preserves the attribute order specified by "
"the user."
msgstr ":meth:`writexml` 方法现在会保留用户指定的属性顺序。"

#: ../../library/xml.dom.minidom.rst:158 ../../library/xml.dom.minidom.rst:179
#: ../../library/xml.dom.minidom.rst:198
msgid "The *standalone* parameter was added."
msgstr "增加了 *standalone* 形参。"

#: ../../library/xml.dom.minidom.rst:163
msgid ""
"Return a string or byte string containing the XML represented by the DOM "
"node."
msgstr "返回一个包含 XML DOM 节点所代表的 XML 的字符串或字节串。"

#: ../../library/xml.dom.minidom.rst:166
msgid ""
"With an explicit *encoding* [1]_ argument, the result is a byte string in "
"the specified encoding. With no *encoding* argument, the result is a Unicode"
" string, and the XML declaration in the resulting string does not specify an"
" encoding. Encoding this string in an encoding other than UTF-8 is likely "
"incorrect, since UTF-8 is the default encoding of XML."
msgstr ""
"带有显式的 *encoding* [1]_ 参数时，结果为使用指定编码格式的字节串。 没有 *encoding* 参数时，结果为 Unicode "
"字符串，并且结果字符串中的 XML 声明将不指定编码格式。 使用 UTF-8 以外的编码格式对此字符串进行编码通常是不正确的，因为 UTF-8 是 "
"XML 的默认编码格式。"

#: ../../library/xml.dom.minidom.rst:173 ../../library/xml.dom.minidom.rst:192
msgid "The *standalone* argument behaves exactly as in :meth:`writexml`."
msgstr "*standalone* 参数的行为与 :meth:`writexml` 中的完全一致。"

#: ../../library/xml.dom.minidom.rst:175
msgid ""
"The :meth:`toxml` method now preserves the attribute order specified by the "
"user."
msgstr ":meth:`toxml` 方法现在会保留用户指定的属性顺序。"

#: ../../library/xml.dom.minidom.rst:185
msgid ""
"Return a pretty-printed version of the document. *indent* specifies the "
"indentation string and defaults to a tabulator; *newl* specifies the string "
"emitted at the end of each line and defaults to ``\\n``."
msgstr "返回文档的美化打印版本。 *indent* 指定缩进字符串并默认为制表符；*newl* 指定标示每行结束的字符串并默认为 ``\\n``。"

#: ../../library/xml.dom.minidom.rst:189
msgid ""
"The *encoding* argument behaves like the corresponding argument of "
":meth:`toxml`."
msgstr "*encoding* 参数的行为类似于 :meth:`toxml` 的对应参数。"

#: ../../library/xml.dom.minidom.rst:194
msgid ""
"The :meth:`toprettyxml` method now preserves the attribute order specified "
"by the user."
msgstr ":meth:`toprettyxml` 方法现在会保留用户指定的属性顺序。"

#: ../../library/xml.dom.minidom.rst:204
msgid "DOM Example"
msgstr "DOM 示例"

#: ../../library/xml.dom.minidom.rst:206
msgid ""
"This example program is a fairly realistic example of a simple program. In "
"this particular case, we do not take much advantage of the flexibility of "
"the DOM."
msgstr "此示例程序是个相当实际的简单程序示例。 在这个特定情况中，我们没有过多地利用 DOM 的灵活性。"

#: ../../library/xml.dom.minidom.rst:209
msgid ""
"import xml.dom.minidom\n"
"\n"
"document = \"\"\"\\\n"
"<slideshow>\n"
"<title>Demo slideshow</title>\n"
"<slide><title>Slide title</title>\n"
"<point>This is a demo</point>\n"
"<point>Of a program for processing slides</point>\n"
"</slide>\n"
"\n"
"<slide><title>Another demo slide</title>\n"
"<point>It is important</point>\n"
"<point>To have more than</point>\n"
"<point>one slide</point>\n"
"</slide>\n"
"</slideshow>\n"
"\"\"\"\n"
"\n"
"dom = xml.dom.minidom.parseString(document)\n"
"\n"
"def getText(nodelist):\n"
"    rc = []\n"
"    for node in nodelist:\n"
"        if node.nodeType == node.TEXT_NODE:\n"
"            rc.append(node.data)\n"
"    return ''.join(rc)\n"
"\n"
"def handleSlideshow(slideshow):\n"
"    print(\"<html>\")\n"
"    handleSlideshowTitle(slideshow.getElementsByTagName(\"title\")[0])\n"
"    slides = slideshow.getElementsByTagName(\"slide\")\n"
"    handleToc(slides)\n"
"    handleSlides(slides)\n"
"    print(\"</html>\")\n"
"\n"
"def handleSlides(slides):\n"
"    for slide in slides:\n"
"        handleSlide(slide)\n"
"\n"
"def handleSlide(slide):\n"
"    handleSlideTitle(slide.getElementsByTagName(\"title\")[0])\n"
"    handlePoints(slide.getElementsByTagName(\"point\"))\n"
"\n"
"def handleSlideshowTitle(title):\n"
"    print(f\"<title>{getText(title.childNodes)}</title>\")\n"
"\n"
"def handleSlideTitle(title):\n"
"    print(f\"<h2>{getText(title.childNodes)}</h2>\")\n"
"\n"
"def handlePoints(points):\n"
"    print(\"<ul>\")\n"
"    for point in points:\n"
"        handlePoint(point)\n"
"    print(\"</ul>\")\n"
"\n"
"def handlePoint(point):\n"
"    print(f\"<li>{getText(point.childNodes)}</li>\")\n"
"\n"
"def handleToc(slides):\n"
"    for slide in slides:\n"
"        title = slide.getElementsByTagName(\"title\")[0]\n"
"        print(f\"<p>{getText(title.childNodes)}</p>\")\n"
"\n"
"handleSlideshow(dom)\n"
msgstr ""
"import xml.dom.minidom\n"
"\n"
"document = \"\"\"\\\n"
"<slideshow>\n"
"<title>Demo slideshow</title>\n"
"<slide><title>Slide title</title>\n"
"<point>This is a demo</point>\n"
"<point>Of a program for processing slides</point>\n"
"</slide>\n"
"\n"
"<slide><title>Another demo slide</title>\n"
"<point>It is important</point>\n"
"<point>To have more than</point>\n"
"<point>one slide</point>\n"
"</slide>\n"
"</slideshow>\n"
"\"\"\"\n"
"\n"
"dom = xml.dom.minidom.parseString(document)\n"
"\n"
"def getText(nodelist):\n"
"    rc = []\n"
"    for node in nodelist:\n"
"        if node.nodeType == node.TEXT_NODE:\n"
"            rc.append(node.data)\n"
"    return ''.join(rc)\n"
"\n"
"def handleSlideshow(slideshow):\n"
"    print(\"<html>\")\n"
"    handleSlideshowTitle(slideshow.getElementsByTagName(\"title\")[0])\n"
"    slides = slideshow.getElementsByTagName(\"slide\")\n"
"    handleToc(slides)\n"
"    handleSlides(slides)\n"
"    print(\"</html>\")\n"
"\n"
"def handleSlides(slides):\n"
"    for slide in slides:\n"
"        handleSlide(slide)\n"
"\n"
"def handleSlide(slide):\n"
"    handleSlideTitle(slide.getElementsByTagName(\"title\")[0])\n"
"    handlePoints(slide.getElementsByTagName(\"point\"))\n"
"\n"
"def handleSlideshowTitle(title):\n"
"    print(f\"<title>{getText(title.childNodes)}</title>\")\n"
"\n"
"def handleSlideTitle(title):\n"
"    print(f\"<h2>{getText(title.childNodes)}</h2>\")\n"
"\n"
"def handlePoints(points):\n"
"    print(\"<ul>\")\n"
"    for point in points:\n"
"        handlePoint(point)\n"
"    print(\"</ul>\")\n"
"\n"
"def handlePoint(point):\n"
"    print(f\"<li>{getText(point.childNodes)}</li>\")\n"
"\n"
"def handleToc(slides):\n"
"    for slide in slides:\n"
"        title = slide.getElementsByTagName(\"title\")[0]\n"
"        print(f\"<p>{getText(title.childNodes)}</p>\")\n"
"\n"
"handleSlideshow(dom)\n"

#: ../../library/xml.dom.minidom.rst:215
msgid "minidom and the DOM standard"
msgstr "minidom 和 DOM 标准"

#: ../../library/xml.dom.minidom.rst:217
msgid ""
"The :mod:`xml.dom.minidom` module is essentially a DOM 1.0-compatible DOM "
"with some DOM 2 features (primarily namespace features)."
msgstr ""
":mod:`xml.dom.minidom` 模块实际上是兼容 DOM 1.0 的 DOM 并带有部分 DOM 2 特性（主要是命名空间特性）。"

#: ../../library/xml.dom.minidom.rst:220
msgid ""
"Usage of the DOM interface in Python is straight-forward.  The following "
"mapping rules apply:"
msgstr "Python 中 DOM 接口的用法十分直观。 会应用下列映射规则:"

#: ../../library/xml.dom.minidom.rst:223
msgid ""
"Interfaces are accessed through instance objects. Applications should not "
"instantiate the classes themselves; they should use the creator functions "
"available on the :class:`Document` object. Derived interfaces support all "
"operations (and attributes) from the base interfaces, plus any new "
"operations."
msgstr ""
"接口是通过实例对象来访问的。 应用程序不应实例化这些类本身；它们应当使用 :class:`Document` 对象提供的创建器函数。 "
"派生的接口支持上级接口的所有操作（和属性），并添加了新的操作。"

#: ../../library/xml.dom.minidom.rst:228
msgid ""
"Operations are used as methods. Since the DOM uses only :keyword:`in` "
"parameters, the arguments are passed in normal order (from left to right). "
"There are no optional arguments. ``void`` operations return ``None``."
msgstr ""
"操作以方法的形式使用。 因由 DOM 只使用 :keyword:`in` 形参，参数是以正常顺序传入的（从左至右）。 不存在可选参数。 ``void``"
" 操作返回 ``None``。"

#: ../../library/xml.dom.minidom.rst:232
msgid ""
"IDL attributes map to instance attributes. For compatibility with the OMG "
"IDL language mapping for Python, an attribute ``foo`` can also be accessed "
"through accessor methods :meth:`_get_foo` and :meth:`_set_foo`.  "
"``readonly`` attributes must not be changed; this is not enforced at "
"runtime."
msgstr ""
"IDL 属性会映射到实例属性。 为了兼容针对 Python 的 OMG IDL 语言映射，属性 ``foo`` 也可通过访问器方法 "
":meth:`_get_foo` 和 :meth:`_set_foo` 来访问。 ``readonly`` 属性不可被修改；运行时并不强制要求这一点。"

#: ../../library/xml.dom.minidom.rst:237
msgid ""
"The types ``short int``, ``unsigned int``, ``unsigned long long``, and "
"``boolean`` all map to Python integer objects."
msgstr ""
"``short int``, ``unsigned int``, ``unsigned long long`` 和 ``boolean`` "
"类型都会映射为 Python 整数类型。"

#: ../../library/xml.dom.minidom.rst:240
msgid ""
"The type ``DOMString`` maps to Python strings. :mod:`xml.dom.minidom` "
"supports either bytes or strings, but will normally produce strings. Values "
"of type ``DOMString`` may also be ``None`` where allowed to have the IDL "
"``null`` value by the DOM specification from the W3C."
msgstr ""
"``DOMString`` 类型会映射为 Python 字符串。 :mod:`xml.dom.minidom` 支持字节串或字符串，但通常是产生字符串。"
" ``DOMString`` 类型的值也可以为 ``None``，W3C 的 DOM 规格说明允许其具有 IDL ``null`` 值。"

#: ../../library/xml.dom.minidom.rst:245
msgid ""
"``const`` declarations map to variables in their respective scope (e.g. "
"``xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE``); they must not be "
"changed."
msgstr ""
"``const`` 声明会映射为它们各自的作用域内的变量 (例如 "
"``xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE``)；它们不可被修改。"

#: ../../library/xml.dom.minidom.rst:248
msgid ""
"``DOMException`` is currently not supported in :mod:`xml.dom.minidom`. "
"Instead, :mod:`xml.dom.minidom` uses standard Python exceptions such as "
":exc:`TypeError` and :exc:`AttributeError`."
msgstr ""
"``DOMException`` 目前不被 :mod:`xml.dom.minidom` 所支持。 :mod:`xml.dom.minidom` "
"会改为使用标准 Python 异常例如 :exc:`TypeError` 和 :exc:`AttributeError`。"

#: ../../library/xml.dom.minidom.rst:252
msgid ""
":class:`NodeList` objects are implemented using Python's built-in list type."
" These objects provide the interface defined in the DOM specification, but "
"with earlier versions of Python they do not support the official API.  They "
"are, however, much more \"Pythonic\" than the interface defined in the W3C "
"recommendations."
msgstr ""
":class:`NodeList` 对象是使用 Python 内置列表类型来实现的。 这些对象提供了 DOM 规格说明中定义的接口，但在较早版本的 "
"Python 中它们不支持官方 API。 相比在 W3C 建议中定义的接口，它们要更加的 \"Pythonic\"。"

#: ../../library/xml.dom.minidom.rst:258
msgid ""
"The following interfaces have no implementation in :mod:`xml.dom.minidom`:"
msgstr "下列接口未在 :mod:`xml.dom.minidom` 中实现:"

#: ../../library/xml.dom.minidom.rst:260
msgid ":class:`DOMTimeStamp`"
msgstr ":class:`DOMTimeStamp`"

#: ../../library/xml.dom.minidom.rst:262
msgid ":class:`EntityReference`"
msgstr ":class:`EntityReference`"

#: ../../library/xml.dom.minidom.rst:264
msgid ""
"Most of these reflect information in the XML document that is not of general"
" utility to most DOM users."
msgstr "这些接口所反映的 XML 文档信息对于大多数 DOM 用户来说没有什么帮助。"

#: ../../library/xml.dom.minidom.rst:268
msgid "Footnotes"
msgstr "备注"

#: ../../library/xml.dom.minidom.rst:269
msgid ""
"The encoding name included in the XML output should conform to the "
"appropriate standards. For example, \"UTF-8\" is valid, but \"UTF8\" is not "
"valid in an XML document's declaration, even though Python accepts it as an "
"encoding name. See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-"
"EncodingDecl and https://www.iana.org/assignments/character-sets/character-"
"sets.xhtml."
msgstr ""
"包括在 XML 输出中的编码格式名称应当遵循适当的标准。 例如，\"UTF-8\" 是有效的，但 \"UTF8\" 在 XML "
"文档的声明中是无效的，即使 Python 接受其作为编码格式名称。 详情参见 https://www.w3.org/TR/2006/REC-"
"xml11-20060816/#NT-EncodingDecl 和 "
"https://www.iana.org/assignments/character-sets/character-sets.xhtml。"
