# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# MuSheng Chen <sheng.2179@gmail.com>, 2021
# ww song <sww4718168@gmail.com>, 2021
# Xu Siyuan, 2021
# jaystone776 <1732865113@qq.com>, 2021
# helloworldSB <warningfor163@foxmail.com>, 2022
# Jason Ren, 2023
# Dai Xu <daixu61@hotmail.com>, 2023
# ppcfish <ppcfish@gmail.com>, 2023
# Sefank <sefank@foxmail.com>, 2023
# 乐成 王, 2024
# F-park, 2024
# Nyuan Zhang, 2024
# Alpha Du <alphanow@gmail.com>, 2024
# Freesand Leo <yuqinju@163.com>, 2025
# cdarlint <cdarling@126.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-08 02:53-0300\n"
"PO-Revision-Date: 2021-06-28 01:16+0000\n"
"Last-Translator: cdarlint <cdarling@126.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/typing.rst:3
msgid ":mod:`!typing` --- Support for type hints"
msgstr ":mod:`!typing` --- 对类型提示的支持"

#: ../../library/typing.rst:16
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**源代码：** :source:`Lib/typing.py`"

#: ../../library/typing.rst:20
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as :term:`type checkers <static "
"type checker>`, IDEs, linters, etc."
msgstr ""
"Python 运行时不强制要求函数与变量类型标注。 它们可被 :term:`类型检查器 <static type "
"checker>`、IDE、语法检查器等第三方工具使用。"

#: ../../library/typing.rst:26
msgid "This module provides runtime support for type hints."
msgstr "本模块提供了对类型提示的运行时支持。"

#: ../../library/typing.rst:28
msgid "Consider the function below::"
msgstr "考虑下面的函数::"

#: ../../library/typing.rst:30
msgid ""
"def surface_area_of_cube(edge_length: float) -> str:\n"
"    return f\"The surface area of the cube is {6 * edge_length ** 2}.\""
msgstr ""
"def surface_area_of_cube(edge_length: float) -> str:\n"
"    return f\"The surface area of the cube is {6 * edge_length ** 2}.\""

#: ../../library/typing.rst:33
msgid ""
"The function ``surface_area_of_cube`` takes an argument expected to be an "
"instance of :class:`float`, as indicated by the :term:`type hint` "
"``edge_length: float``. The function is expected to return an instance of "
":class:`str`, as indicated by the ``-> str`` hint."
msgstr ""
"函数 ``surface_area_of_cube`` 接受一个预期为 :class:`float` 实例的参数，如 :term:`type hint`"
" ``edge_length: float`` 所指明的。 该函数预期返回一个 :class:`str` 实例，如 ``-> str`` 提示所指明的。"

#: ../../library/typing.rst:38
msgid ""
"While type hints can be simple classes like :class:`float` or :class:`str`, "
"they can also be more complex. The :mod:`typing` module provides a "
"vocabulary of more advanced type hints."
msgstr ""
"类型提示可以是简单的类比如 :class:`float` 或 :class:`str`，它们也可以更为复杂。 :mod:`typing` "
"模块提供了一套用于更高级类型提示的词汇。"

#: ../../library/typing.rst:42
msgid ""
"New features are frequently added to the ``typing`` module. The "
":pypi:`typing_extensions` package provides backports of these new features "
"to older versions of Python."
msgstr ""
"新特性被频繁添加到 ``typing`` 模块中。 :pypi:`typing_extensions` 包提供了这些新特性针对较旧版本 Python "
"的向下移植。"

#: ../../library/typing.rst:48
msgid ""
"`\"Typing cheat sheet\" "
"<https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html>`_"
msgstr ""
"`\"类型系统备忘单\" <https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html>`_"

#: ../../library/typing.rst:49
msgid "A quick overview of type hints (hosted at the mypy docs)"
msgstr "关于类型提示的概览（发布于 mypy 文档站点）"

#: ../../library/typing.rst:51
msgid ""
"\"Type System Reference\" section of `the mypy docs "
"<https://mypy.readthedocs.io/en/stable/index.html>`_"
msgstr ""
"`mypy 文档 <https://mypy.readthedocs.io/en/stable/index.html>`_ 的 \"Type "
"System Reference\" 章节"

#: ../../library/typing.rst:52
msgid ""
"The Python typing system is standardised via PEPs, so this reference should "
"broadly apply to most Python type checkers. (Some parts may still be "
"specific to mypy.)"
msgstr ""
"Python 类型系统是通过 PEP 来标准化的，因此该参考应当广泛适用于大多数 Python 类型检查器。 （但某些部分仍然是 mypy 专属的。）"

#: ../../library/typing.rst:56
msgid "`\"Static Typing with Python\" <https://typing.python.org/en/latest/>`_"
msgstr "`\"Static Typing with Python\" <https://typing.python.org/en/latest/>`_"

#: ../../library/typing.rst:57
msgid ""
"Type-checker-agnostic documentation written by the community detailing type "
"system features, useful typing related tools and typing best practices."
msgstr "由社区编写的不限定具体类型检查器的文档，详细讲解了类型系统特性，有用的类型相关工具以及类型的最佳实践。"

#: ../../library/typing.rst:64
msgid "Specification for the Python Type System"
msgstr "有关 Python 类型系统的规范说明"

#: ../../library/typing.rst:66
msgid ""
"The canonical, up-to-date specification of the Python type system can be "
"found at `\"Specification for the Python type system\" "
"<https://typing.python.org/en/latest/spec/index.html>`_."
msgstr ""
"Python 类型系统最新的标准规范说明可在 `\"Specification for the Python type system\" "
"<https://typing.python.org/en/latest/spec/index.html>`_ 查看。"

#: ../../library/typing.rst:72
msgid "Type aliases"
msgstr "类型别名"

#: ../../library/typing.rst:74
msgid ""
"A type alias is defined using the :keyword:`type` statement, which creates "
"an instance of :class:`TypeAliasType`. In this example, ``Vector`` and "
"``list[float]`` will be treated equivalently by static type checkers::"
msgstr ""
"类型别名是使用 :keyword:`type` 语句来定义的，它将创建一个 :class:`TypeAliasType` 的实例。 "
"在这个示例中，``Vector`` 和 ``list[float]`` 将被静态类型检查器等同处理::"

#: ../../library/typing.rst:79
msgid ""
"type Vector = list[float]\n"
"\n"
"def scale(scalar: float, vector: Vector) -> Vector:\n"
"    return [scalar * num for num in vector]\n"
"\n"
"# passes type checking; a list of floats qualifies as a Vector.\n"
"new_vector = scale(2.0, [1.0, -4.2, 5.4])"
msgstr ""
"type Vector = list[float]\n"
"\n"
"def scale(scalar: float, vector: Vector) -> Vector:\n"
"    return [scalar * num for num in vector]\n"
"\n"
"# 通过类型检查；浮点数列表是合格的 Vector。\n"
"new_vector = scale(2.0, [1.0, -4.2, 5.4])"

#: ../../library/typing.rst:87
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr "类型别名适用于简化复杂的类型签名。例如："

#: ../../library/typing.rst:89
msgid ""
"from collections.abc import Sequence\n"
"\n"
"type ConnectionOptions = dict[str, str]\n"
"type Address = tuple[str, int]\n"
"type Server = tuple[Address, ConnectionOptions]\n"
"\n"
"def broadcast_message(message: str, servers: Sequence[Server]) -> None:\n"
"    ...\n"
"\n"
"# The static type checker will treat the previous type signature as\n"
"# being exactly equivalent to this one.\n"
"def broadcast_message(\n"
"    message: str,\n"
"    servers: Sequence[tuple[tuple[str, int], dict[str, str]]]\n"
") -> None:\n"
"    ..."
msgstr ""
"from collections.abc import Sequence\n"
"\n"
"type ConnectionOptions = dict[str, str]\n"
"type Address = tuple[str, int]\n"
"type Server = tuple[Address, ConnectionOptions]\n"
"\n"
"def broadcast_message(message: str, servers: Sequence[Server]) -> None:\n"
"    ...\n"
"\n"
"# 静态类型检查器会认为上面的类型签名\n"
"# 完全等价于下面这个写法。\n"
"def broadcast_message(\n"
"    message: str,\n"
"    servers: Sequence[tuple[tuple[str, int], dict[str, str]]]\n"
") -> None:\n"
"    ..."

#: ../../library/typing.rst:106
msgid ""
"The :keyword:`type` statement is new in Python 3.12. For backwards "
"compatibility, type aliases can also be created through simple assignment::"
msgstr ":keyword:`type` 语句是在 Python 3.12 中新增加的。 为了向下兼容，类型别名也可以通过简单的赋值来创建::"

#: ../../library/typing.rst:109
msgid "Vector = list[float]"
msgstr "Vector = list[float]"

#: ../../library/typing.rst:111
msgid ""
"Or marked with :data:`TypeAlias` to make it explicit that this is a type "
"alias, not a normal variable assignment::"
msgstr "或者用 :data:`TypeAlias` 标记来显式说明这是一个类型别名，而非一般的变量赋值："

#: ../../library/typing.rst:114
msgid ""
"from typing import TypeAlias\n"
"\n"
"Vector: TypeAlias = list[float]"
msgstr ""
"from typing import TypeAlias\n"
"\n"
"Vector: TypeAlias = list[float]"

#: ../../library/typing.rst:121
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:123
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "用 :class:`NewType` 助手创建与原类型不同的类型："

#: ../../library/typing.rst:125
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"
msgstr ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"

#: ../../library/typing.rst:130
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr "静态类型检查器把新类型当作原始类型的子类，这种方式适用于捕捉逻辑错误："

#: ../../library/typing.rst:133
msgid ""
"def get_user_name(user_id: UserId) -> str:\n"
"    ...\n"
"\n"
"# passes type checking\n"
"user_a = get_user_name(UserId(42351))\n"
"\n"
"# fails type checking; an int is not a UserId\n"
"user_b = get_user_name(-1)"
msgstr ""
"def get_user_name(user_id: UserId) -> str:\n"
"    ...\n"
"\n"
"# 通过类型检查\n"
"user_a = get_user_name(UserId(42351))\n"
"\n"
"# 未通过类型检查；整数不能作为 UserId\n"
"user_b = get_user_name(-1)"

#: ../../library/typing.rst:142
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent"
" you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"``UserId`` 类型的变量可执行所有 ``int`` 操作，但返回结果都是 ``int`` 类型。这种方式允许在预期 ``int`` 时传入 "
"``UserId``，还能防止意外创建无效的 ``UserId``："

#: ../../library/typing.rst:147
msgid ""
"# 'output' is of type 'int', not 'UserId'\n"
"output = UserId(23413) + UserId(54341)"
msgstr ""
"# 'output' 的类型为 'int' 而非 'UserId'\n"
"output = UserId(23413) + UserId(54341)"

#: ../../library/typing.rst:150
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"注意，这些检查只由静态类型检查器强制执行。在运行时，语句 ``Derived = NewType('Derived', Base)`` 将产生一个 "
"``Derived`` 可调用对象，该对象立即返回你传递给它的任何参数。 这意味着语句 ``Derived(some_value)`` "
"不会创建一个新的类，也不会引入超出常规函数调用的很多开销。"

#: ../../library/typing.rst:156
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr "更确切地说，在运行时，``some_value is Derived(some_value)`` 表达式总为 True。"

#: ../../library/typing.rst:159
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "创建 ``Derived`` 的子类型是无效的::"

#: ../../library/typing.rst:161
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"# Fails at runtime and does not pass type checking\n"
"class AdminUserId(UserId): pass"
msgstr ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"# 将在运行时失败且无法通过类型检查\n"
"class AdminUserId(UserId): pass"

#: ../../library/typing.rst:168
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr "然而，我们可以在 \"派生的\" ``NewType`` 的基础上创建一个 :class:`NewType`。"

#: ../../library/typing.rst:170
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"ProUserId = NewType('ProUserId', UserId)"
msgstr ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"ProUserId = NewType('ProUserId', UserId)"

#: ../../library/typing.rst:176
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "同时，``ProUserId`` 的类型检查也可以按预期执行。"

#: ../../library/typing.rst:178
msgid "See :pep:`484` for more details."
msgstr "详见 :pep:`484`。"

#: ../../library/typing.rst:182
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to"
" one another. Doing ``type Alias = Original`` will make the static type "
"checker treat ``Alias`` as being *exactly equivalent* to ``Original`` in all"
" cases. This is useful when you want to simplify complex type signatures."
msgstr ""
"请记住使用类型别名将声明两个类型是相互 *等价* 的。 使用 ``type Alias = Original`` 将使静态类型检查器在任何情况下都把 "
"``Alias`` 视为与 ``Original`` *完全等价*。 这在你想要简化复杂的类型签名时会很有用处。"

#: ../../library/typing.rst:187
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"反之，``NewType`` 声明把一种类型当作另一种类型的 *子类型*。``Derived = NewType('Derived', "
"Original)`` 时，静态类型检查器把 ``Derived`` 当作 ``Original`` 的 *子类* ，即，``Original`` "
"类型的值不能用在预期 ``Derived`` 类型的位置。这种方式适用于以最小运行时成本防止逻辑错误。"

#: ../../library/typing.rst:196
msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr "``NewType`` 现在是一个类而不是一个函数。 因此，当调用 ``NewType`` 而非常规函数时会有一些额外的运行时开销。"

#: ../../library/typing.rst:201
msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr "调用 ``NewType`` 的性能已恢复到 Python 3.9 时的水平。"

#: ../../library/typing.rst:208
msgid "Annotating callable objects"
msgstr "标注可调用对象"

#: ../../library/typing.rst:210
msgid ""
"Functions -- or other :term:`callable` objects -- can be annotated using "
":class:`collections.abc.Callable` or deprecated :data:`typing.Callable`. "
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""
"函数 -- 或是其他 :term:`callable` 对象 -- 可以使用 :class:`collections.abc.Callable` "
"或已被弃用的 :data:`typing.Callable` 来标注。 ``Callable[[int], str]`` 表示一个接受 "
":class:`int` 类型的单个形参并返回一个 :class:`str` 的函数。"

#: ../../library/typing.rst:215 ../../library/typing.rst:3281
#: ../../library/typing.rst:3461
msgid "For example:"
msgstr "例如:"

#: ../../library/typing.rst:217
msgid ""
"from collections.abc import Callable, Awaitable\n"
"\n"
"def feeder(get_next_item: Callable[[], str]) -> None:\n"
"    ...  # Body\n"
"\n"
"def async_query(on_success: Callable[[int], None],\n"
"                on_error: Callable[[int, Exception], None]) -> None:\n"
"    ...  # Body\n"
"\n"
"async def on_update(value: str) -> None:\n"
"    ...  # Body\n"
"\n"
"callback: Callable[[str], Awaitable[None]] = on_update"
msgstr ""
"from collections.abc import Callable, Awaitable\n"
"\n"
"def feeder(get_next_item: Callable[[], str]) -> None:\n"
"    ...  # 函数体\n"
"\n"
"def async_query(on_success: Callable[[int], None],\n"
"                on_error: Callable[[int, Exception], None]) -> None:\n"
"    ...  # 函数体\n"
"\n"
"async def on_update(value: str) -> None:\n"
"    ...  # 函数体\n"
"\n"
"callback: Callable[[str], Awaitable[None]] = on_update"

#: ../../library/typing.rst:233
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return"
" type must be a single type."
msgstr ""
"下标语法总是要刚好使用两个值：参数列表和返回类型。 "
"参数列表必须是一个由类型组成的列表、:class:`ParamSpec`、:data:`Concatenate` 或省略号。 返回类型必须是单一类型。"

#: ../../library/typing.rst:238
msgid ""
"If a literal ellipsis ``...`` is given as the argument list, it indicates "
"that a callable with any arbitrary parameter list would be acceptable:"
msgstr "如果将一个省略号字面值 ``...`` 作为参数列表，则表示可以接受包含任意形参列表的可调用对象:"

#: ../../library/typing.rst:241
msgid ""
"def concat(x: str, y: str) -> str:\n"
"    return x + y\n"
"\n"
"x: Callable[..., str]\n"
"x = str     # OK\n"
"x = concat  # Also OK"
msgstr ""
"def concat(x: str, y: str) -> str:\n"
"    return x + y\n"
"\n"
"x: Callable[..., str]\n"
"x = str     # 可以\n"
"x = concat  # 同样可以"

#: ../../library/typing.rst:250
msgid ""
"``Callable`` cannot express complex signatures such as functions that take a"
" variadic number of arguments, :ref:`overloaded functions <overload>`, or "
"functions that have keyword-only parameters. However, these signatures can "
"be expressed by defining a :class:`Protocol` class with a "
":meth:`~object.__call__` method:"
msgstr ""
"``Callable`` 无法表达复杂的签名如接受可变数量参数的函数，:ref:`重载的函数 <overload>`，或具有仅限关键字形参的函数。 "
"但是，这些签名可通过自定义具有 :meth:`~object.__call__` 方法的 :class:`Protocol` 类来表达："

#: ../../library/typing.rst:256
msgid ""
"from collections.abc import Iterable\n"
"from typing import Protocol\n"
"\n"
"class Combiner(Protocol):\n"
"    def __call__(self, *vals: bytes, maxlen: int | None = None) -> list[bytes]: ...\n"
"\n"
"def batch_proc(data: Iterable[bytes], cb_results: Combiner) -> bytes:\n"
"    for item in data:\n"
"        ...\n"
"\n"
"def good_cb(*vals: bytes, maxlen: int | None = None) -> list[bytes]:\n"
"    ...\n"
"def bad_cb(*vals: bytes, maxitems: int | None) -> list[bytes]:\n"
"    ...\n"
"\n"
"batch_proc([], good_cb)  # OK\n"
"batch_proc([], bad_cb)   # Error! Argument 2 has incompatible type because of\n"
"                         # different name and kind in the callback"
msgstr ""
"from collections.abc import Iterable\n"
"from typing import Protocol\n"
"\n"
"class Combiner(Protocol):\n"
"    def __call__(self, *vals: bytes, maxlen: int | None = None) -> list[bytes]: ...\n"
"\n"
"def batch_proc(data: Iterable[bytes], cb_results: Combiner) -> bytes:\n"
"    for item in data:\n"
"        ...\n"
"\n"
"def good_cb(*vals: bytes, maxlen: int | None = None) -> list[bytes]:\n"
"    ...\n"
"def bad_cb(*vals: bytes, maxitems: int | None) -> list[bytes]:\n"
"    ...\n"
"\n"
"batch_proc([], good_cb)  # 可以\n"
"batch_proc([], bad_cb)   # 错误！参数 2 的类型不兼容\n"
"                         # 因为在回调中有不同的名称和类别"

#: ../../library/typing.rst:277
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form"
" ``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"以其他可调用对象为参数的可调用对象可以使用 :class:`ParamSpec` 来表明其参数类型是相互依赖的。 "
"此外，如果该可调用对象增加或删除了其他可调用对象的参数，可以使用 :data:`Concatenate` 操作符。 它们分别采取 "
"``Callable[ParamSpecVariable, ReturnType]`` 和 "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` 的形式。"

#: ../../library/typing.rst:285 ../../library/typing.rst:3970
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See "
":pep:`612` for more details."
msgstr ""
"``Callable`` 现在支持 :class:`ParamSpec` 和 :data:`Concatenate`。 详情见 :pep:`612`。"

#: ../../library/typing.rst:290
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
":class:`ParamSpec` 和 :class:`Concatenate` 的文档提供了在 ``Callable`` 中使用的例子。"

#: ../../library/typing.rst:296
msgid "Generics"
msgstr "泛型（Generic）"

#: ../../library/typing.rst:298
msgid ""
"Since type information about objects kept in containers cannot be statically"
" inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr "由于无法以通用方式静态地推断容器中保存的对象的类型信息，标准库中的许多容器类都支持下标操作来以表示容器元素的预期类型。"

#: ../../library/typing.rst:302
msgid ""
"from collections.abc import Mapping, Sequence\n"
"\n"
"class Employee: ...\n"
"\n"
"# Sequence[Employee] indicates that all elements in the sequence\n"
"# must be instances of \"Employee\".\n"
"# Mapping[str, str] indicates that all keys and all values in the mapping\n"
"# must be strings.\n"
"def notify_by_email(employees: Sequence[Employee],\n"
"                    overrides: Mapping[str, str]) -> None: ..."
msgstr ""
"from collections.abc import Mapping, Sequence\n"
"\n"
"class Employee: ...\n"
"\n"
"# Sequence[Employee] 表明该序列中的所有元素\n"
"# 都必须是 \"Employee\" 的实例。\n"
"# Mapping[str, str] 表明该映射中的所有键和所有值\n"
"# 都必须是字符串。\n"
"def notify_by_email(employees: Sequence[Employee],\n"
"                    overrides: Mapping[str, str]) -> None: ..."

#: ../../library/typing.rst:315
msgid ""
"Generic functions and classes can be parameterized by using :ref:`type "
"parameter syntax <type-params>`::"
msgstr "泛型函数和类可以通过使用 :ref:`类型形参语法 <type-params>` 来实现参数化::"

#: ../../library/typing.rst:318
msgid ""
"from collections.abc import Sequence\n"
"\n"
"def first[T](l: Sequence[T]) -> T:  # Function is generic over the TypeVar \"T\"\n"
"    return l[0]"
msgstr ""
"from collections.abc import Sequence\n"
"\n"
"def first[T](l: Sequence[T]) -> T:  # 函数是 TypeVar \"T\" 泛型\n"
"    return l[0]"

#: ../../library/typing.rst:323
msgid "Or by using the :class:`TypeVar` factory directly::"
msgstr "或直接使用 :class:`TypeVar` 工厂："

#: ../../library/typing.rst:325
msgid ""
"from collections.abc import Sequence\n"
"from typing import TypeVar\n"
"\n"
"U = TypeVar('U')                  # Declare type variable \"U\"\n"
"\n"
"def second(l: Sequence[U]) -> U:  # Function is generic over the TypeVar \"U\"\n"
"    return l[1]"
msgstr ""
"from collections.abc import Sequence\n"
"from typing import TypeVar\n"
"\n"
"U = TypeVar('U')                  # 声明类型变量 \"U\"\n"
"\n"
"def second(l: Sequence[U]) -> U:  # 函数是 TypeVar \"U\" 泛型\n"
"    return l[1]"

#: ../../library/typing.rst:333
msgid "Syntactic support for generics is new in Python 3.12."
msgstr "对泛型的语法支持是在 Python 3.12 中新增的。"

#: ../../library/typing.rst:339
msgid "Annotating tuples"
msgstr "标注元组"

#: ../../library/typing.rst:341
msgid ""
"For most containers in Python, the typing system assumes that all elements "
"in the container will be of the same type. For example::"
msgstr "对于 Python 中的大多数容器，类型系统会假定容器中的所有元素都是相同类型的。 例如::"

#: ../../library/typing.rst:344
msgid ""
"from collections.abc import Mapping\n"
"\n"
"# Type checker will infer that all elements in ``x`` are meant to be ints\n"
"x: list[int] = []\n"
"\n"
"# Type checker error: ``list`` only accepts a single type argument:\n"
"y: list[int, str] = [1, 'foo']\n"
"\n"
"# Type checker will infer that all keys in ``z`` are meant to be strings,\n"
"# and that all values in ``z`` are meant to be either strings or ints\n"
"z: Mapping[str, str | int] = {}"
msgstr ""
"from collections.abc import Mapping\n"
"\n"
"# 类型检查器将推断 ``x`` 中的所有元素均为整数\n"
"x: list[int] = []\n"
"\n"
"# 类型检查器错误: ``list`` 只接受单个类型参数：\n"
"y: list[int, str] = [1, 'foo']\n"
"\n"
"# 类型检查器将推断 ``z`` 中的所有键均为字符串，\n"
"# 并且 ``z`` 中的所有值均为字符串或整数\n"
"z: Mapping[str, str | int] = {}"

#: ../../library/typing.rst:356
msgid ""
":class:`list` only accepts one type argument, so a type checker would emit "
"an error on the ``y`` assignment above. Similarly, "
":class:`~collections.abc.Mapping` only accepts two type arguments: the first"
" indicates the type of the keys, and the second indicates the type of the "
"values."
msgstr ""
":class:`list` 只接受一个类型参数，因此类型检查器将在上述代码中对 ``y`` "
"赋值时报告错误。同样，:class:`~collections.abc.Mapping` 只接受两个类型参数：第一个给出键的类型，第二个则给出值的类型。"

#: ../../library/typing.rst:362
msgid ""
"Unlike most other Python containers, however, it is common in idiomatic "
"Python code for tuples to have elements which are not all of the same type. "
"For this reason, tuples are special-cased in Python's typing system. "
":class:`tuple` accepts *any number* of type arguments::"
msgstr ""
"然而，与大多数其它 Python 容器不同的是，在常见的 Python 代码中，元组中元素的类型并不相同。因此，在 Python "
"的类型系统中，元组是特殊情况。:class:`tuple` 可以接受 *任意数量* 的类型参数："

#: ../../library/typing.rst:367
msgid ""
"# OK: ``x`` is assigned to a tuple of length 1 where the sole element is an int\n"
"x: tuple[int] = (5,)\n"
"\n"
"# OK: ``y`` is assigned to a tuple of length 2;\n"
"# element 1 is an int, element 2 is a str\n"
"y: tuple[int, str] = (5, \"foo\")\n"
"\n"
"# Error: the type annotation indicates a tuple of length 1,\n"
"# but ``z`` has been assigned to a tuple of length 3\n"
"z: tuple[int] = (1, 2, 3)"
msgstr ""
"# 可以: ``x`` 被赋值为长度为 1 的元组，其中的唯一元素是个整数\n"
"x: tuple[int] = (5,)\n"
"\n"
"# 可以: ``y`` 被赋值为长度为 2 的元素；\n"
"# 第 1 个元素是个整数，第 2 个元素是个字符串\n"
"y: tuple[int, str] = (5, \"foo\")\n"
"\n"
"# 错误: 类型标注表明是长度为 1 的元组，\n"
"# 但 ``z`` 却被赋值为长度为 3 的元组\n"
"z: tuple[int] = (1, 2, 3)"

#: ../../library/typing.rst:378
msgid ""
"To denote a tuple which could be of *any* length, and in which all elements "
"are of the same type ``T``, use ``tuple[T, ...]``. To denote an empty tuple,"
" use ``tuple[()]``. Using plain ``tuple`` as an annotation is equivalent to "
"using ``tuple[Any, ...]``::"
msgstr ""
"要表示一个可以是 *任意* 长度的元组，并且其中的所有元素都是相同类型的 ``T``，请使用 ``tuple[T, ...]``。要表示空元组，请使用 "
"``tuple[()]``。只使用 ``tuple`` 作为注解等效于使用``tuple[Any, ...]``："

#: ../../library/typing.rst:383
msgid ""
"x: tuple[int, ...] = (1, 2)\n"
"# These reassignments are OK: ``tuple[int, ...]`` indicates x can be of any length\n"
"x = (1, 2, 3)\n"
"x = ()\n"
"# This reassignment is an error: all elements in ``x`` must be ints\n"
"x = (\"foo\", \"bar\")\n"
"\n"
"# ``y`` can only ever be assigned to an empty tuple\n"
"y: tuple[()] = ()\n"
"\n"
"z: tuple = (\"foo\", \"bar\")\n"
"# These reassignments are OK: plain ``tuple`` is equivalent to ``tuple[Any, ...]``\n"
"z = (1, 2, 3)\n"
"z = ()"
msgstr ""
"x: tuple[int, ...] = (1, 2)\n"
"# 这些赋值是可以的 OK: ``tuple[int, ...]`` 表明 x 可以为任意长度\n"
"x = (1, 2, 3)\n"
"x = ()\n"
"# 这个赋值是错误的: ``x`` 中的所有元素都必须为整数\n"
"x = (\"foo\", \"bar\")\n"
"\n"
"# ``y`` 只能被赋值为一个空元组\n"
"y: tuple[()] = ()\n"
"\n"
"z: tuple = (\"foo\", \"bar\")\n"
"# 这些重新赋值是可以的 OK: 简单的 ``tuple`` 等价于 ``tuple[Any, ...]``\n"
"z = (1, 2, 3)\n"
"z = ()"

#: ../../library/typing.rst:401
msgid "The type of class objects"
msgstr "类对象的类型"

#: ../../library/typing.rst:403
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` (or deprecated "
":class:`typing.Type[C] <Type>`) may accept values that are classes "
"themselves -- specifically, it will accept the *class object* of ``C``. For "
"example::"
msgstr ""
"带有 ``C`` 标注的变量可接受 ``C`` 类型的值。 反之，带有 ``type[C]`` (或已被弃用的 "
":class:`typing.Type[C] <Type>`) 标注的变量则可接受本身是类的值 -- 准确地说，它将接受 ``C`` 的 *类对象*。 "
"例如::"

#: ../../library/typing.rst:409
msgid ""
"a = 3         # Has type ``int``\n"
"b = int       # Has type ``type[int]``\n"
"c = type(a)   # Also has type ``type[int]``"
msgstr ""
"a = 3         # 为 ``int`` 类型\n"
"b = int       # 为 ``type[int]`` 类型\n"
"c = type(a)   # 同样为 ``type[int]`` 类型"

#: ../../library/typing.rst:413
msgid "Note that ``type[C]`` is covariant::"
msgstr "注意，``type[C]`` 是协变的："

#: ../../library/typing.rst:415
msgid ""
"class User: ...\n"
"class ProUser(User): ...\n"
"class TeamUser(User): ...\n"
"\n"
"def make_new_user(user_class: type[User]) -> User:\n"
"    # ...\n"
"    return user_class()\n"
"\n"
"make_new_user(User)      # OK\n"
"make_new_user(ProUser)   # Also OK: ``type[ProUser]`` is a subtype of ``type[User]``\n"
"make_new_user(TeamUser)  # Still fine\n"
"make_new_user(User())    # Error: expected ``type[User]`` but got ``User``\n"
"make_new_user(int)       # Error: ``type[int]`` is not a subtype of ``type[User]``"
msgstr ""
"class User: ...\n"
"class ProUser(User): ...\n"
"class TeamUser(User): ...\n"
"\n"
"def make_new_user(user_class: type[User]) -> User:\n"
"    # ...\n"
"    return user_class()\n"
"\n"
"make_new_user(User)      # 可以\n"
"make_new_user(ProUser)   # 同样可以: ``type[ProUser]`` 是 ``type[User]`` 的子类型\n"
"make_new_user(TeamUser)  # 仍然可以\n"
"make_new_user(User())    # 错误: 预期为 ``type[User]`` 但得到 ``User``\n"
"make_new_user(int)       # 错误: ``type[int]`` 不是 ``type[User]`` 的子类型"

#: ../../library/typing.rst:429
msgid ""
"The only legal parameters for :class:`type` are classes, :data:`Any`, "
":ref:`type variables <generics>`, and unions of any of these types. For "
"example::"
msgstr ""
":class:`type` 的合法形参只有类, :data:`Any`, :ref:`类型变量 <generics>` 以及前面这些类型的并集。 "
"例如::"

#: ../../library/typing.rst:433
msgid ""
"def new_non_team_user(user_class: type[BasicUser | ProUser]): ...\n"
"\n"
"new_non_team_user(BasicUser)  # OK\n"
"new_non_team_user(ProUser)    # OK\n"
"new_non_team_user(TeamUser)   # Error: ``type[TeamUser]`` is not a subtype\n"
"                              # of ``type[BasicUser | ProUser]``\n"
"new_non_team_user(User)       # Also an error"
msgstr ""
"def new_non_team_user(user_class: type[BasicUser | ProUser]): ...\n"
"\n"
"new_non_team_user(BasicUser)  # 可以\n"
"new_non_team_user(ProUser)    # 可以\n"
"new_non_team_user(TeamUser)   # 错误: ``type[TeamUser]`` 不是\n"
"                              # ``type[BasicUser | ProUser]`` 的子类型\n"
"new_non_team_user(User)       # 同样错误"

#: ../../library/typing.rst:441
msgid ""
"``type[Any]`` is equivalent to :class:`type`, which is the root of Python's "
":ref:`metaclass hierarchy <metaclasses>`."
msgstr ""
"``type[Any]`` 等价于 :class:`type`，它是 Python 的 :ref:`元类层级结构 <metaclasses>` "
"的根对象。"

#: ../../library/typing.rst:448
msgid "Annotating generators and coroutines"
msgstr "标注生成器和协程"

#: ../../library/typing.rst:450
msgid ""
"A generator can be annotated using the generic type "
":class:`Generator[YieldType, SendType, ReturnType] "
"<collections.abc.Generator>`. For example::"
msgstr ""
"生成器可以使用泛型类型 :class:`Generator[YieldType, SendType, ReturnType] "
"<collections.abc.Generator>` 来标。 例如::"

#: ../../library/typing.rst:454
msgid ""
"def echo_round() -> Generator[int, float, str]:\n"
"    sent = yield 0\n"
"    while sent >= 0:\n"
"        sent = yield round(sent)\n"
"    return 'Done'"
msgstr ""
"def echo_round() -> Generator[int, float, str]:\n"
"    sent = yield 0\n"
"    while sent >= 0:\n"
"        sent = yield round(sent)\n"
"    return 'Done'"

#: ../../library/typing.rst:460
msgid ""
"Note that unlike many other generic classes in the standard library, the "
"``SendType`` of :class:`~collections.abc.Generator` behaves contravariantly,"
" not covariantly or invariantly."
msgstr ""
"请注意与标准库里的许多其他泛型类不同，:class:`~collections.abc.Generator` 的 ``SendType`` "
"采用逆变行为，而不是协变或不变行为。"

#: ../../library/typing.rst:464
msgid ""
"The ``SendType`` and ``ReturnType`` parameters default to :const:`!None`::"
msgstr "``SendType`` 和 ``ReturnType`` 形参默认为 :const:`!None`："

#: ../../library/typing.rst:466
msgid ""
"def infinite_stream(start: int) -> Generator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""
"def infinite_stream(start: int) -> Generator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"

#: ../../library/typing.rst:471
msgid "It is also possible to set these types explicitly::"
msgstr "也可以显式设置这些类型："

#: ../../library/typing.rst:473
msgid ""
"def infinite_stream(start: int) -> Generator[int, None, None]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""
"def infinite_stream(start: int) -> Generator[int, None, None]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"

#: ../../library/typing.rst:478
msgid ""
"Simple generators that only ever yield values can also be annotated as "
"having a return type of either :class:`Iterable[YieldType] "
"<collections.abc.Iterable>` or :class:`Iterator[YieldType] "
"<collections.abc.Iterator>`::"
msgstr ""
"仅产生值的简单生成器可以被标注为具有 :class:`Iterable[YieldType] <collections.abc.Iterable>` 或"
" :class:`Iterator[YieldType] <collections.abc.Iterator>` 类型的返回值::"

#: ../../library/typing.rst:483
msgid ""
"def infinite_stream(start: int) -> Iterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""
"def infinite_stream(start: int) -> Iterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"

#: ../../library/typing.rst:488
msgid ""
"Async generators are handled in a similar fashion, but don't expect a "
"``ReturnType`` type argument (:class:`AsyncGenerator[YieldType, SendType] "
"<collections.abc.AsyncGenerator>`). The ``SendType`` argument defaults to "
":const:`!None`, so the following definitions are equivalent::"
msgstr ""
"异步生成器的处理方式类似，但不要指望有 ``ReturnType`` 类型参数 (:class:`AsyncGenerator[YieldType, "
"SendType] <collections.abc.AsyncGenerator>`)。 ``SendType`` 参数默认为 "
":const:`!None`，因此以下定义是等价的::"

#: ../../library/typing.rst:494
msgid ""
"async def infinite_stream(start: int) -> AsyncGenerator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)\n"
"\n"
"async def infinite_stream(start: int) -> AsyncGenerator[int, None]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"
msgstr ""
"async def infinite_stream(start: int) -> AsyncGenerator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)\n"
"\n"
"async def infinite_stream(start: int) -> AsyncGenerator[int, None]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"

#: ../../library/typing.rst:504
msgid ""
"As in the synchronous case, :class:`AsyncIterable[YieldType] "
"<collections.abc.AsyncIterable>` and :class:`AsyncIterator[YieldType] "
"<collections.abc.AsyncIterator>` are available as well::"
msgstr ""
"与同步情况一样，:class:`AsyncIterable[YieldType] <collections.abc.AsyncIterable>` 和 "
":class:`AsyncIterator[YieldType] <collections.abc.AsyncIterator>` 也可用::"

#: ../../library/typing.rst:509
msgid ""
"async def infinite_stream(start: int) -> AsyncIterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"
msgstr ""
"async def infinite_stream(start: int) -> AsyncIterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"

#: ../../library/typing.rst:514
msgid ""
"Coroutines can be annotated using :class:`Coroutine[YieldType, SendType, "
"ReturnType] <collections.abc.Coroutine>`. Generic arguments correspond to "
"those of :class:`~collections.abc.Generator`, for example::"
msgstr ""
"协程可使用 :class:`[YieldType, SendType, ReturnType] <collections.abc.Coroutine>`"
" 进行注释。 泛型参数对应于 :class:`~collections.abc.Generator` 的参数，例如::"

#: ../../library/typing.rst:519
msgid ""
"from collections.abc import Coroutine\n"
"c: Coroutine[list[str], str, int]  # Some coroutine defined elsewhere\n"
"x = c.send('hi')                   # Inferred type of 'x' is list[str]\n"
"async def bar() -> None:\n"
"    y = await c                    # Inferred type of 'y' is int"
msgstr ""
"from collections.abc import Coroutine\n"
"c: Coroutine[list[str], str, int]  # 在其他地方定义的协程\n"
"x = c.send('hi')                   # 推断 'x' 的类型为 list[str]\n"
"async def bar() -> None:\n"
"    y = await c                    # 推断 'y' 的类型为 int"

#: ../../library/typing.rst:528
msgid "User-defined generic types"
msgstr "用户定义的泛型类型"

#: ../../library/typing.rst:530
msgid "A user-defined class can be defined as a generic class."
msgstr "用户定义的类可以定义为泛型类。"

#: ../../library/typing.rst:534
msgid ""
"from logging import Logger\n"
"\n"
"class LoggedVar[T]:\n"
"    def __init__(self, value: T, name: str, logger: Logger) -> None:\n"
"        self.name = name\n"
"        self.logger = logger\n"
"        self.value = value\n"
"\n"
"    def set(self, new: T) -> None:\n"
"        self.log('Set ' + repr(self.value))\n"
"        self.value = new\n"
"\n"
"    def get(self) -> T:\n"
"        self.log('Get ' + repr(self.value))\n"
"        return self.value\n"
"\n"
"    def log(self, message: str) -> None:\n"
"        self.logger.info('%s: %s', self.name, message)"
msgstr ""
"from logging import Logger\n"
"\n"
"class LoggedVar[T]:\n"
"    def __init__(self, value: T, name: str, logger: Logger) -> None:\n"
"        self.name = name\n"
"        self.logger = logger\n"
"        self.value = value\n"
"\n"
"    def set(self, new: T) -> None:\n"
"        self.log('Set ' + repr(self.value))\n"
"        self.value = new\n"
"\n"
"    def get(self) -> T:\n"
"        self.log('Get ' + repr(self.value))\n"
"        return self.value\n"
"\n"
"    def log(self, message: str) -> None:\n"
"        self.logger.info('%s: %s', self.name, message)"

#: ../../library/typing.rst:553
msgid ""
"This syntax indicates that the class ``LoggedVar`` is parameterised around a"
" single :ref:`type variable <typevar>` ``T`` . This also makes ``T`` valid "
"as a type within the class body."
msgstr ""
"这种语法表示类 ``LoggedVar`` 是围绕单个 :ref:`类型变量 <typevar>` ``T`` 实现参数化的。 这也使得 ``T`` "
"成为类体内部有效的类型。"

#: ../../library/typing.rst:557
msgid ""
"Generic classes implicitly inherit from :class:`Generic`. For compatibility "
"with Python 3.11 and lower, it is also possible to inherit explicitly from "
":class:`Generic` to indicate a generic class::"
msgstr ""
"泛型类隐式继承自 :class:`Generic`。为了与 Python 3.11 及更低版本兼容，也允许显式地从 :class:`Generic` "
"继承以表示泛型类："

#: ../../library/typing.rst:561
msgid ""
"from typing import TypeVar, Generic\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class LoggedVar(Generic[T]):\n"
"    ..."
msgstr ""
"from typing import TypeVar, Generic\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class LoggedVar(Generic[T]):\n"
"    ..."

#: ../../library/typing.rst:568
msgid ""
"Generic classes have :meth:`~object.__class_getitem__` methods, meaning they"
" can be parameterised at runtime (e.g. ``LoggedVar[int]`` below)::"
msgstr ""
"泛型类具有 :meth:`~object.__class_getitem__` 方法，这意味着泛型类可在运行时进行参数化（例如下面的 "
"``LoggedVar[int]``）："

#: ../../library/typing.rst:571
msgid ""
"from collections.abc import Iterable\n"
"\n"
"def zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:\n"
"    for var in vars:\n"
"        var.set(0)"
msgstr ""
"from collections.abc import Iterable\n"
"\n"
"def zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:\n"
"    for var in vars:\n"
"        var.set(0)"

#: ../../library/typing.rst:577
msgid ""
"A generic type can have any number of type variables. All varieties of "
":class:`TypeVar` are permissible as parameters for a generic type::"
msgstr "一个泛型可以有任何数量的类型变量。所有种类的 :class:`TypeVar` 都可以作为泛型的参数::"

#: ../../library/typing.rst:580
msgid ""
"from typing import TypeVar, Generic, Sequence\n"
"\n"
"class WeirdTrio[T, B: Sequence[bytes], S: (int, str)]:\n"
"    ...\n"
"\n"
"OldT = TypeVar('OldT', contravariant=True)\n"
"OldB = TypeVar('OldB', bound=Sequence[bytes], covariant=True)\n"
"OldS = TypeVar('OldS', int, str)\n"
"\n"
"class OldWeirdTrio(Generic[OldT, OldB, OldS]):\n"
"    ..."
msgstr ""
"from typing import TypeVar, Generic, Sequence\n"
"\n"
"class WeirdTrio[T, B: Sequence[bytes], S: (int, str)]:\n"
"    ...\n"
"\n"
"OldT = TypeVar('OldT', contravariant=True)\n"
"OldB = TypeVar('OldB', bound=Sequence[bytes], covariant=True)\n"
"OldS = TypeVar('OldS', int, str)\n"
"\n"
"class OldWeirdTrio(Generic[OldT, OldB, OldS]):\n"
"    ..."

#: ../../library/typing.rst:592
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ":class:`Generic` 类型变量的参数应各不相同。下列代码就是无效的："

#: ../../library/typing.rst:595
msgid ""
"from typing import TypeVar, Generic\n"
"...\n"
"\n"
"class Pair[M, M]:  # SyntaxError\n"
"    ...\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class Pair(Generic[T, T]):   # INVALID\n"
"    ..."
msgstr ""
"from typing import TypeVar, Generic\n"
"...\n"
"\n"
"class Pair[M, M]:  # SyntaxError\n"
"    ...\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class Pair(Generic[T, T]):   # 无效\n"
"    ..."

#: ../../library/typing.rst:606
msgid "Generic classes can also inherit from other classes::"
msgstr "泛型类也可以从其他类继承："

#: ../../library/typing.rst:608
msgid ""
"from collections.abc import Sized\n"
"\n"
"class LinkedList[T](Sized):\n"
"    ..."
msgstr ""
"from collections.abc import Sized\n"
"\n"
"class LinkedList[T](Sized):\n"
"    ..."

#: ../../library/typing.rst:613
msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr "从泛型类继承时，某些类型参数可被固定："

#: ../../library/typing.rst:615
msgid ""
"from collections.abc import Mapping\n"
"\n"
"class MyDict[T](Mapping[str, T]):\n"
"    ..."
msgstr ""
"from collections.abc import Mapping\n"
"\n"
"class MyDict[T](Mapping[str, T]):\n"
"    ..."

#: ../../library/typing.rst:620
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "在这个例子中，``MyDict`` 就只有一个参数 ``T``。"

#: ../../library/typing.rst:622
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any`"
" for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""
"未指定泛型类的类型参数时，会假定每个位置的类型都为 :data:`Any`。在下面的例子中，``MyIterable`` 不是泛型，但却隐式继承了 "
"``Iterable[Any]``："

#: ../../library/typing.rst:626
msgid ""
"from collections.abc import Iterable\n"
"\n"
"class MyIterable(Iterable): # Same as Iterable[Any]\n"
"    ..."
msgstr ""
"from collections.abc import Iterable\n"
"\n"
"class MyIterable(Iterable): # 与 Iterable[Any] 相同\n"
"    ..."

#: ../../library/typing.rst:633
msgid "User-defined generic type aliases are also supported. Examples::"
msgstr "用户定义的泛型类型别名也同样受到支持。例如："

#: ../../library/typing.rst:635
msgid ""
"from collections.abc import Iterable\n"
"\n"
"type Response[S] = Iterable[S] | int\n"
"\n"
"# Return type here is same as Iterable[str] | int\n"
"def response(query: str) -> Response[str]:\n"
"    ...\n"
"\n"
"type Vec[T] = Iterable[tuple[T, T]]\n"
"\n"
"def inproduct[T: (int, float, complex)](v: Vec[T]) -> T: # Same as Iterable[tuple[T, T]]\n"
"    return sum(x*y for x, y in v)"
msgstr ""
"from collections.abc import Iterable\n"
"\n"
"type Response[S] = Iterable[S] | int\n"
"\n"
"# 这里的返回类型与 Iterable[str] | int 相同\n"
"def response(query: str) -> Response[str]:\n"
"    ...\n"
"\n"
"type Vec[T] = Iterable[tuple[T, T]]\n"
"\n"
"def inproduct[T: (int, float, complex)](v: Vec[T]) -> T: # 与 Iterable[tuple[T, T]] 相同\n"
"    return sum(x*y for x, y in v)"

#: ../../library/typing.rst:648
msgid ""
"For backward compatibility, generic type aliases can also be created through"
" a simple assignment::"
msgstr "出于向后兼容性的考虑，也允许使用简单的赋值来创建泛型类型别名："

#: ../../library/typing.rst:651
msgid ""
"from collections.abc import Iterable\n"
"from typing import TypeVar\n"
"\n"
"S = TypeVar(\"S\")\n"
"Response = Iterable[S] | int"
msgstr ""
"from collections.abc import Iterable\n"
"from typing import TypeVar\n"
"\n"
"S = TypeVar(\"S\")\n"
"Response = Iterable[S] | int"

#: ../../library/typing.rst:657
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` 不再支持自定义元类。"

#: ../../library/typing.rst:660
msgid ""
"Syntactic support for generics and type aliases is new in version 3.12. "
"Previously, generic classes had to explicitly inherit from :class:`Generic` "
"or contain a type variable in one of their bases."
msgstr ""
"3.12 版本新增了对泛型和类型别名的语法支持。在之前的版本中，泛型类必须显式继承自 "
":class:`Generic`，或者在其基类之一中包含有类型变量。"

#: ../../library/typing.rst:665
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``[**P]``.  The behavior is "
"consistent with type variables' described above as parameter specification "
"variables are treated by the :mod:`!typing` module as a specialized type "
"variable.  The one exception to this is that a list of types can be used to "
"substitute a :class:`ParamSpec`::"
msgstr ""
"针对形参表达式的用户自定义泛型也通过 ``[**P]`` 形式的形参规格变量受到支持。 此行为与上文描述的类型变量保持一致因为形参规格变量被 "
":mod:`!typing` 变量当作专门的类型变量来处理。 此处的一个例外情况是类型的列表可以被用于替代 :class:`ParamSpec`::"

#: ../../library/typing.rst:671
msgid ""
">>> class Z[T, **P]: ...  # T is a TypeVar; P is a ParamSpec\n"
"...\n"
">>> Z[int, [dict, float]]\n"
"__main__.Z[int, [dict, float]]"
msgstr ""
">>> class Z[T, **P]: ...  # T 为 TypeVar；P 为 ParamSpec\n"
"...\n"
">>> Z[int, [dict, float]]\n"
"__main__.Z[int, [dict, float]]"

#: ../../library/typing.rst:676
msgid ""
"Classes generic over a :class:`ParamSpec` can also be created using explicit"
" inheritance from :class:`Generic`. In this case, ``**`` is not used::"
msgstr ""
"带有 :class:`ParamSpec` 的泛型类也可以使用从 :class:`Generic` 显式继承的方式来创建。在这种情况下，不需要使用 "
"``**``："

#: ../../library/typing.rst:679
msgid ""
"from typing import ParamSpec, Generic\n"
"\n"
"P = ParamSpec('P')\n"
"\n"
"class Z(Generic[P]):\n"
"    ..."
msgstr ""
"from typing import ParamSpec, Generic\n"
"\n"
"P = ParamSpec('P')\n"
"\n"
"class Z(Generic[P]):\n"
"    ..."

#: ../../library/typing.rst:686
msgid ""
"Another difference between :class:`TypeVar` and :class:`ParamSpec` is that a"
" generic with only one parameter specification variable will accept "
"parameter lists in the forms ``X[[Type1, Type2, ...]]`` and also ``X[Type1, "
"Type2, ...]`` for aesthetic reasons.  Internally, the latter is converted to"
" the former, so the following are equivalent::"
msgstr ""
":class:`TypeVar` 与 :class:`ParamSpec` 的另一个区别在于只有单个参数规格变量的泛型会接受形如 ``X[[Type1,"
" Type2, ...]]`` 的参数列表，同时为了美观，也接受 ``X[Type1, Type2, ...]`` 这样的形式。 "
"在内部，后者被转换为前者，所以下面的内容是等价的："

#: ../../library/typing.rst:692
msgid ""
">>> class X[**P]: ...\n"
"...\n"
">>> X[int, str]\n"
"__main__.X[[int, str]]\n"
">>> X[[int, str]]\n"
"__main__.X[[int, str]]"
msgstr ""
">>> class X[**P]: ...\n"
"...\n"
">>> X[int, str]\n"
"__main__.X[[int, str]]\n"
">>> X[[int, str]]\n"
"__main__.X[[int, str]]"

#: ../../library/typing.rst:699
msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""
"请注意：在某些情况下，具有 :class:`ParamSpec` 的泛型在替换后可能不具有正确的 "
"``__parameters__``，因为参数规格主要用于静态类型检查。"

#: ../../library/typing.rst:703
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See "
":class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` 现在可以通过参数表达式进行参数化。参见 :class:`ParamSpec` 和 :pep:`612` "
"以了解更多细节。"

#: ../../library/typing.rst:707
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the :mod:`!typing` "
"module are :term:`hashable` and comparable for equality."
msgstr ""
"用户自定义泛型类可以将 ABC 作为基类而不会导致元类冲突。 泛型元类是不受支持的。 形参化泛型的结果会被缓存，且 :mod:`!typing` "
"模块中的大多数类型都是 :term:`hashable` 并可进行相等性比较。"

#: ../../library/typing.rst:714
msgid "The :data:`Any` type"
msgstr ":data:`Any` 类型"

#: ../../library/typing.rst:716
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
":data:`Any` 是一种特殊的类型。静态类型检查器认为所有类型均与 :data:`Any` 兼容，同样，:data:`Any` 也与所有类型兼容。"

#: ../../library/typing.rst:720
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr "也就是说，可对 :data:`Any` 类型的值执行任何操作或方法调用，并赋值给任意变量："

#: ../../library/typing.rst:723
msgid ""
"from typing import Any\n"
"\n"
"a: Any = None\n"
"a = []          # OK\n"
"a = 2           # OK\n"
"\n"
"s: str = ''\n"
"s = a           # OK\n"
"\n"
"def foo(item: Any) -> int:\n"
"    # Passes type checking; 'item' could be any type,\n"
"    # and that type might have a 'bar' method\n"
"    item.bar()\n"
"    ..."
msgstr ""
"from typing import Any\n"
"\n"
"a: Any = None\n"
"a = []          # 可以\n"
"a = 2           # 可以\n"
"\n"
"s: str = ''\n"
"s = a           # 可以\n"
"\n"
"def foo(item: Any) -> int:\n"
"    # 通过类型检查；'item' 可以为任意类型，\n"
"    # 并且其类型会具有 'bar' 方法\n"
"    item.bar()\n"
"    ..."

#: ../../library/typing.rst:738
msgid ""
"Notice that no type checking is performed when assigning a value of type "
":data:`Any` to a more precise type. For example, the static type checker did"
" not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"注意，:data:`Any` 类型的值赋给更精确的类型时，不执行类型检查。例如，把 ``a`` 赋给 ``s``，在运行时，即便 ``s`` 已声明为 "
":class:`str` 类型，但接收 :class:`int` 值时，静态类型检查器也不会报错。"

#: ../../library/typing.rst:744
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr "此外，未指定返回值与参数类型的函数，都隐式地默认使用 :data:`Any`："

#: ../../library/typing.rst:747
msgid ""
"def legacy_parser(text):\n"
"    ...\n"
"    return data\n"
"\n"
"# A static type checker will treat the above\n"
"# as having the same signature as:\n"
"def legacy_parser(text: Any) -> Any:\n"
"    ...\n"
"    return data"
msgstr ""
"def legacy_parser(text):\n"
"    ...\n"
"    return data\n"
"\n"
"# 静态类型检查器将认为上面的函数\n"
"# 具有与下面的函数相同的签名：\n"
"def legacy_parser(text: Any) -> Any:\n"
"    ...\n"
"    return data"

#: ../../library/typing.rst:757
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr "需要混用动态与静态类型代码时，此操作把 :data:`Any` 当作 *应急出口*。"

#: ../../library/typing.rst:760
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However,"
" unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
":data:`Any` 和 :class:`object` 的区别。与 :data:`Any` 相似，所有类型都是 :class:`object` "
"的子类型。然而，与 :data:`Any` 不同，object 不可逆：:class:`object` *不是* 其它类型的子类型。"

#: ../../library/typing.rst:765
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using"
" it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"就是说，值的类型是 :class:`object` "
"时，类型检查器几乎会拒绝所有对它的操作，并且，把它赋给更精确的类型变量（或返回值）属于类型错误。例如："

#: ../../library/typing.rst:769
msgid ""
"def hash_a(item: object) -> int:\n"
"    # Fails type checking; an object does not have a 'magic' method.\n"
"    item.magic()\n"
"    ...\n"
"\n"
"def hash_b(item: Any) -> int:\n"
"    # Passes type checking\n"
"    item.magic()\n"
"    ...\n"
"\n"
"# Passes type checking, since ints and strs are subclasses of object\n"
"hash_a(42)\n"
"hash_a(\"foo\")\n"
"\n"
"# Passes type checking, since Any is compatible with all types\n"
"hash_b(42)\n"
"hash_b(\"foo\")"
msgstr ""
"def hash_a(item: object) -> int:\n"
"    # 不能通过类型检查；对象没有 'magic' 方法。\n"
"    item.magic()\n"
"    ...\n"
"\n"
"def hash_b(item: Any) -> int:\n"
"    # 通过类型检查\n"
"    item.magic()\n"
"    ...\n"
"\n"
"# 通过类型检查，因为整数和字符串都是 object 的子类\n"
"hash_a(42)\n"
"hash_a(\"foo\")\n"
"\n"
"# 通过类型检查，因为 Any 可以兼容所有类型\n"
"hash_b(42)\n"
"hash_b(\"foo\")"

#: ../../library/typing.rst:787
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe"
" manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr "使用 :class:`object`，说明值能以类型安全的方式转为任何类型。使用 :data:`Any`，说明值是动态类型。"

#: ../../library/typing.rst:792
msgid "Nominal vs structural subtyping"
msgstr "名义子类型 vs 结构子类型"

#: ../../library/typing.rst:794
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal"
" subtyping*. This means that a class ``A`` is allowed where a class ``B`` is"
" expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"最初 :pep:`484` 将 Python 静态类型系统定义为使用 *名义子类型*。这意味着当且仅当类 ``A`` 是 ``B`` "
"的子类时，才满足有类 ``B`` 预期时使用类 ``A`` 。"

#: ../../library/typing.rst:798
msgid ""
"This requirement previously also applied to abstract base classes, such as "
":class:`~collections.abc.Iterable`. The problem with this approach is that a"
" class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"此项要求以前也适用于抽象基类，例如，:class:`~collections.abc.Iterable` "
"。这种方式的问题在于，定义类时必须显式说明，既不 Pythonic，也不是动态类型式 Python 代码的惯用写法。例如，下列代码就遵从了 "
":pep:`484` 的规范："

#: ../../library/typing.rst:804
msgid ""
"from collections.abc import Sized, Iterable, Iterator\n"
"\n"
"class Bucket(Sized, Iterable[int]):\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ..."
msgstr ""
"from collections.abc import Sized, Iterable, Iterator\n"
"\n"
"class Bucket(Sized, Iterable[int]):\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ..."

#: ../../library/typing.rst:811
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above"
" code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` 允许用户在类定义时不显式说明基类，从而解决了这一问题，静态类型检查器隐式认为 ``Bucket`` 既是 ``Sized`` "
"的子类型，又是 ``Iterable[int]`` 的子类型。这就是 *结构子类型* （又称为静态鸭子类型）："

#: ../../library/typing.rst:817
msgid ""
"from collections.abc import Iterator, Iterable\n"
"\n"
"class Bucket:  # Note: no base classes\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ...\n"
"\n"
"def collect(items: Iterable[int]) -> int: ...\n"
"result = collect(Bucket())  # Passes type check"
msgstr ""
"from collections.abc import Iterator, Iterable\n"
"\n"
"class Bucket:  # 注意：没有基类\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ...\n"
"\n"
"def collect(items: Iterable[int]) -> int: ...\n"
"result = collect(Bucket())  # 通过类型检查"

#: ../../library/typing.rst:827
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr "此外，结构子类型的优势在于，通过继承特殊类 :class:`Protocol` ，用户可以定义新的自定义协议（见下文中的例子）。"

#: ../../library/typing.rst:832
msgid "Module contents"
msgstr "模块内容"

#: ../../library/typing.rst:834
msgid ""
"The ``typing`` module defines the following classes, functions and "
"decorators."
msgstr "``typing`` 模块定义了下列类、函数和装饰器。"

#: ../../library/typing.rst:837
msgid "Special typing primitives"
msgstr "特殊类型原语"

#: ../../library/typing.rst:840
msgid "Special types"
msgstr "特殊类型"

#: ../../library/typing.rst:842
msgid ""
"These can be used as types in annotations. They do not support subscription "
"using ``[]``."
msgstr "这些类型可用于在注解中表示类型，但不支持下标用法（``[]``）。"

#: ../../library/typing.rst:847
msgid "Special type indicating an unconstrained type."
msgstr "特殊类型，表示没有约束的类型。"

#: ../../library/typing.rst:849
msgid "Every type is compatible with :data:`Any`."
msgstr "所有类型都与 :data:`Any` 兼容。"

#: ../../library/typing.rst:850
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` 与所有类型都兼容。"

#: ../../library/typing.rst:852
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding"
" type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ":data:`Any` 现在可以用作基类。这有助于避免类型检查器在高度动态或可通过鸭子类型使用的类上报错。"

#: ../../library/typing.rst:859
msgid "A :ref:`constrained type variable <typing-constrained-typevar>`."
msgstr ":ref:`受约束的类型变量 <typing-constrained-typevar>`。"

#: ../../library/typing.rst:861
msgid "Definition::"
msgstr "定义："

#: ../../library/typing.rst:863
msgid "AnyStr = TypeVar('AnyStr', str, bytes)"
msgstr "AnyStr = TypeVar('AnyStr', str, bytes)"

#: ../../library/typing.rst:865
msgid ""
"``AnyStr`` is meant to be used for functions that may accept :class:`str` or"
" :class:`bytes` arguments but cannot allow the two to mix."
msgstr "``AnyStr`` 用于可接受 :class:`str` 或 :class:`bytes` 参数但不允许两者混用的函数。"

#: ../../library/typing.rst:868 ../../library/typing.rst:986
#: ../../library/typing.rst:1043 ../../library/typing.rst:1223
#: ../../library/typing.rst:1310 ../../library/typing.rst:1352
#: ../../library/typing.rst:1561 ../../library/typing.rst:1622
#: ../../library/typing.rst:3218 ../../library/typing.rst:3446
msgid "For example::"
msgstr "例如："

#: ../../library/typing.rst:870
msgid ""
"def concat(a: AnyStr, b: AnyStr) -> AnyStr:\n"
"    return a + b\n"
"\n"
"concat(\"foo\", \"bar\")    # OK, output has type 'str'\n"
"concat(b\"foo\", b\"bar\")  # OK, output has type 'bytes'\n"
"concat(\"foo\", b\"bar\")   # Error, cannot mix str and bytes"
msgstr ""
"def concat(a: AnyStr, b: AnyStr) -> AnyStr:\n"
"    return a + b\n"
"\n"
"concat(\"foo\", \"bar\")    # 可以，输出为 'str' 类型\n"
"concat(b\"foo\", b\"bar\")  # 可以，输出为 'bytes' 类型\n"
"concat(\"foo\", b\"bar\")   # 错误，不可混用 str 和 bytes"

#: ../../library/typing.rst:877
msgid ""
"Note that, despite its name, ``AnyStr`` has nothing to do with the "
":class:`Any` type, nor does it mean \"any string\". In particular, "
"``AnyStr`` and ``str | bytes`` are different from each other and have "
"different use cases::"
msgstr ""
"请注意：尽管名为 ``AnyStr``，但它与 :class:`Any` 类型毫无关系，也不是指“任何字符串”。而且，``AnyStr`` 更是和 "
"``str | bytes`` 彼此互不相同，各有各的使用场景："

#: ../../library/typing.rst:882
msgid ""
"# Invalid use of AnyStr:\n"
"# The type variable is used only once in the function signature,\n"
"# so cannot be \"solved\" by the type checker\n"
"def greet_bad(cond: bool) -> AnyStr:\n"
"    return \"hi there!\" if cond else b\"greetings!\"\n"
"\n"
"# The better way of annotating this function:\n"
"def greet_proper(cond: bool) -> str | bytes:\n"
"    return \"hi there!\" if cond else b\"greetings!\""
msgstr ""
"# AnyStr 的无效使用:\n"
"# 类型变量在函数签名中仅使用一次，\n"
"# 因此无法通过类型检查器“解决”\n"
"def greet_bad(cond: bool) -> AnyStr:\n"
"    return \"hi there!\" if cond else b\"greetings!\"\n"
"\n"
"# 注释此函数的更好方法:\n"
"def greet_proper(cond: bool) -> str | bytes:\n"
"    return \"hi there!\" if cond else b\"greetings!\""

#: ../../library/typing.rst:892
msgid ""
"Deprecated in favor of the new :ref:`type parameter syntax <type-params>`. "
"Use ``class A[T: (str, bytes)]: ...`` instead of importing ``AnyStr``. See "
":pep:`695` for more details."
msgstr ""
"已被弃用而应改用新的 :ref:`类型形参语法 <type-params>`。 使用 ``class A[T: (str, bytes)]: ...``"
" 而不是导入 ``AnyStr``。 详情参见 :pep:`695`。"

#: ../../library/typing.rst:897
msgid ""
"In Python 3.16, ``AnyStr`` will be removed from ``typing.__all__``, and "
"deprecation warnings will be emitted at runtime when it is accessed or "
"imported from ``typing``. ``AnyStr`` will be removed from ``typing`` in "
"Python 3.18."
msgstr ""
"在 Python 3.16 中，``AnyStr`` 将从 ``typing.__all__`` 中被移除，在运行时当它被访问或从 ``typing``"
" 导入时将发出弃用警告。 在 Python 3.18 中 ``AnyStr`` 将从 ``typing`` 中被移除。"

#: ../../library/typing.rst:904
msgid "Special type that includes only literal strings."
msgstr "只包括字符串字面值的的特殊类型。"

#: ../../library/typing.rst:906
msgid ""
"Any string literal is compatible with ``LiteralString``, as is another "
"``LiteralString``. However, an object typed as just ``str`` is not. A string"
" created by composing ``LiteralString``-typed objects is also acceptable as "
"a ``LiteralString``."
msgstr ""
"任何字符串字面值或其他 ``LiteralString`` 都与 ``LiteralString`` 兼容。但 ``str`` "
"类型的对象不与其兼容。组合 ``LiteralString`` 类型的对象产生的字符串也被认为是 ``LiteralString``。"

#: ../../library/typing.rst:912 ../../library/typing.rst:2243
msgid "Example:"
msgstr "示例:"

#: ../../library/typing.rst:914
msgid ""
"def run_query(sql: LiteralString) -> None:\n"
"    ...\n"
"\n"
"def caller(arbitrary_string: str, literal_string: LiteralString) -> None:\n"
"    run_query(\"SELECT * FROM students\")  # OK\n"
"    run_query(literal_string)  # OK\n"
"    run_query(\"SELECT * FROM \" + literal_string)  # OK\n"
"    run_query(arbitrary_string)  # type checker error\n"
"    run_query(  # type checker error\n"
"        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n"
"    )"
msgstr ""
"def run_query(sql: LiteralString) -> None:\n"
"    ...\n"
"\n"
"def caller(arbitrary_string: str, literal_string: LiteralString) -> None:\n"
"    run_query(\"SELECT * FROM students\")  # 可以\n"
"    run_query(literal_string)  # 可以\n"
"    run_query(\"SELECT * FROM \" + literal_string)  # 可以\n"
"    run_query(arbitrary_string)  # 类型检查器错误\n"
"    run_query(  # 类型检查器错误\n"
"        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n"
"    )"

#: ../../library/typing.rst:928
msgid ""
"``LiteralString`` is useful for sensitive APIs where arbitrary user-"
"generated strings could generate problems. For example, the two cases above "
"that generate type checker errors could be vulnerable to an SQL injection "
"attack."
msgstr ""
"``LiteralString`` 对于会因用户可输入任意字符串而导致问题的敏感 API 很有用。例如，上述两处导致类型检查器报错的代码可能容易被 "
"SQL 注入攻击。"

#: ../../library/typing.rst:933
msgid "See :pep:`675` for more details."
msgstr "请参阅 :pep:`675` 了解详情。"

#: ../../library/typing.rst:940
msgid ""
":data:`!Never` and :data:`!NoReturn` represent the `bottom type "
"<https://en.wikipedia.org/wiki/Bottom_type>`_, a type that has no members."
msgstr ""
":data:`!Never` 和 :data:`!NoReturn` 代表 `底类型 "
"<https://en.wikipedia.org/wiki/Bottom_type>`_，一种没有成员的类型。"

#: ../../library/typing.rst:944
msgid ""
"They can be used to indicate that a function never returns, such as "
":func:`sys.exit`::"
msgstr "它们可被用于指明一个函数绝不会返回，例如 :func:`sys.exit`::"

#: ../../library/typing.rst:947
msgid ""
"from typing import Never  # or NoReturn\n"
"\n"
"def stop() -> Never:\n"
"    raise RuntimeError('no way')"
msgstr ""
"from typing import Never  # 或 NoReturn\n"
"\n"
"def stop() -> Never:\n"
"    raise RuntimeError('no way')"

#: ../../library/typing.rst:952
msgid ""
"Or to define a function that should never be called, as there are no valid "
"arguments, such as :func:`assert_never`::"
msgstr "或者用于定义一个绝不应被调用的函数，因为不存在有效的参数，例如 :func:`assert_never`::"

#: ../../library/typing.rst:956
msgid ""
"from typing import Never  # or NoReturn\n"
"\n"
"def never_call_me(arg: Never) -> None:\n"
"    pass\n"
"\n"
"def int_or_str(arg: int | str) -> None:\n"
"    never_call_me(arg)  # type checker error\n"
"    match arg:\n"
"        case int():\n"
"            print(\"It's an int\")\n"
"        case str():\n"
"            print(\"It's a str\")\n"
"        case _:\n"
"            never_call_me(arg)  # OK, arg is of type Never (or NoReturn)"
msgstr ""
"from typing import Never  # 或 NoReturn\n"
"\n"
"def never_call_me(arg: Never) -> None:\n"
"    pass\n"
"\n"
"def int_or_str(arg: int | str) -> None:\n"
"    never_call_me(arg)  # 类型检查器错误\n"
"    match arg:\n"
"        case int():\n"
"            print(\"It's an int\")\n"
"        case str():\n"
"            print(\"It's a str\")\n"
"        case _:\n"
"            never_call_me(arg)  # OK, arg is of type Never (or NoReturn)"

#: ../../library/typing.rst:971
msgid ""
":data:`!Never` and :data:`!NoReturn` have the same meaning in the type "
"system and static type checkers treat both equivalently."
msgstr ""
":data:`!Never` 和 :data:`!NoReturn` 在类型系统中具有相同的含义并且静态类型检查器会以相同的方式对待这两者。"

#: ../../library/typing.rst:976
msgid "Added :data:`NoReturn`."
msgstr "增加了 :data:`NoReturn`。"

#: ../../library/typing.rst:980
msgid "Added :data:`Never`."
msgstr "增加了 :data:`Never`。"

#: ../../library/typing.rst:984
msgid "Special type to represent the current enclosed class."
msgstr "特殊类型，表示当前闭包内的类。"

#: ../../library/typing.rst:988
msgid ""
"from typing import Self, reveal_type\n"
"\n"
"class Foo:\n"
"    def return_self(self) -> Self:\n"
"        ...\n"
"        return self\n"
"\n"
"class SubclassOfFoo(Foo): pass\n"
"\n"
"reveal_type(Foo().return_self())  # Revealed type is \"Foo\"\n"
"reveal_type(SubclassOfFoo().return_self())  # Revealed type is \"SubclassOfFoo\""
msgstr ""
"from typing import Self, reveal_type\n"
"\n"
"class Foo:\n"
"    def return_self(self) -> Self:\n"
"        ...\n"
"        return self\n"
"\n"
"class SubclassOfFoo(Foo): pass\n"
"\n"
"reveal_type(Foo().return_self())  # 揭示的类型为 \"Foo\"\n"
"reveal_type(SubclassOfFoo().return_self())  # 揭示的类型为 \"SubclassOfFoo\""

#: ../../library/typing.rst:1000
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr "此注解在语法上等价于以下代码，但形式更为简洁："

#: ../../library/typing.rst:1003
msgid ""
"from typing import TypeVar\n"
"\n"
"Self = TypeVar(\"Self\", bound=\"Foo\")\n"
"\n"
"class Foo:\n"
"    def return_self(self: Self) -> Self:\n"
"        ...\n"
"        return self"
msgstr ""
"from typing import TypeVar\n"
"\n"
"Self = TypeVar(\"Self\", bound=\"Foo\")\n"
"\n"
"class Foo:\n"
"    def return_self(self: Self) -> Self:\n"
"        ...\n"
"        return self"

#: ../../library/typing.rst:1012
msgid ""
"In general, if something returns ``self``, as in the above examples, you "
"should use ``Self`` as the return annotation. If ``Foo.return_self`` was "
"annotated as returning ``\"Foo\"``, then the type checker would infer the "
"object returned from ``SubclassOfFoo.return_self`` as being of type ``Foo`` "
"rather than ``SubclassOfFoo``."
msgstr ""
"通常来说，如果某些内容返回 ``self``，如上面的示例所示，您应该使用 ``Self`` 作为返回值注解。如果 "
"``Foo.return_self`` 被注解为返回 ``\"Foo\"``，那么类型检查器将推断从 "
"``SubclassOfFoo.return_self`` 返回的对象是 ``Foo`` 类型，而不是 ``SubclassOfFoo``。"

#: ../../library/typing.rst:1018
msgid "Other common use cases include:"
msgstr "其它常见用例包括："

#: ../../library/typing.rst:1020
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return"
" instances of the ``cls`` parameter."
msgstr "被用作替代构造器的 :class:`classmethod`，它将返回 ``cls`` 形参的实例。"

#: ../../library/typing.rst:1022
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr "标注一个返回自身的 :meth:`~object.__enter__` 方法。"

#: ../../library/typing.rst:1024
msgid ""
"You should not use ``Self`` as the return annotation if the method is not "
"guaranteed to return an instance of a subclass when the class is "
"subclassed::"
msgstr "如果不能保证在子类中方法会返回子类的实例（而非父类的实例），则不应使用 ``Self`` 作为返回值注解："

#: ../../library/typing.rst:1028
msgid ""
"class Eggs:\n"
"    # Self would be an incorrect return annotation here,\n"
"    # as the object returned is always an instance of Eggs,\n"
"    # even in subclasses\n"
"    def returns_eggs(self) -> \"Eggs\":\n"
"        return Eggs()"
msgstr ""
"class Eggs:\n"
"    # 在这里 self 是一个不正确的返回注释,\n"
"    # 因为返回的对象始终是 Eggs 的一个实例,\n"
"    # 即使在子类中\n"
"    def returns_eggs(self) -> \"Eggs\":\n"
"        return Eggs()"

#: ../../library/typing.rst:1035
msgid "See :pep:`673` for more details."
msgstr "更多细节请参见 :pep:`673`。"

#: ../../library/typing.rst:1041
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr "特殊注解，用于显式声明 :ref:`类型别名 <type-aliases>`."

#: ../../library/typing.rst:1045
msgid ""
"from typing import TypeAlias\n"
"\n"
"Factors: TypeAlias = list[int]"
msgstr ""
"from typing import TypeAlias\n"
"\n"
"Factors: TypeAlias = list[int]"

#: ../../library/typing.rst:1049
msgid ""
"``TypeAlias`` is particularly useful on older Python versions for annotating"
" aliases that make use of forward references, as it can be hard for type "
"checkers to distinguish these from normal variable assignments:"
msgstr ""
"在较早的 Python 版本上，``TypeAlias`` "
"对注解使用前向引用的别名时特别有用，因为类型检查器可能很难将这些别名与正常的变量赋值区分开来："

#: ../../library/typing.rst:1053
msgid ""
"from typing import Generic, TypeAlias, TypeVar\n"
"\n"
"T = TypeVar(\"T\")\n"
"\n"
"# \"Box\" does not exist yet,\n"
"# so we have to use quotes for the forward reference on Python <3.12.\n"
"# Using ``TypeAlias`` tells the type checker that this is a type alias declaration,\n"
"# not a variable assignment to a string.\n"
"BoxOfStrings: TypeAlias = \"Box[str]\"\n"
"\n"
"class Box(Generic[T]):\n"
"    @classmethod\n"
"    def make_box_of_strings(cls) -> BoxOfStrings: ..."
msgstr ""
"from typing import Generic, TypeAlias, TypeVar\n"
"\n"
"T = TypeVar(\"T\")\n"
"\n"
"# \"Box\" 还不存在,\n"
"# 因此我们必须在 Python <3.12 版本中使用引号进行前向引用。\n"
"# 使用 ``TypeAlias`` 告诉类型检查器这是一个类型别名声明，\n"
"# 而不是对字符串的变量赋值。\n"
"BoxOfStrings: TypeAlias = \"Box[str]\"\n"
"\n"
"class Box(Generic[T]):\n"
"    @classmethod\n"
"    def make_box_of_strings(cls) -> BoxOfStrings: ..."

#: ../../library/typing.rst:1069
msgid "See :pep:`613` for more details."
msgstr "请参阅 :pep:`613` 了解详情。"

#: ../../library/typing.rst:1073
msgid ""
":data:`TypeAlias` is deprecated in favor of the :keyword:`type` statement, "
"which creates instances of :class:`TypeAliasType` and which natively "
"supports forward references. Note that while :data:`TypeAlias` and "
":class:`TypeAliasType` serve similar purposes and have similar names, they "
"are distinct and the latter is not the type of the former. Removal of "
":data:`TypeAlias` is not currently planned, but users are encouraged to "
"migrate to :keyword:`type` statements."
msgstr ""
":data:`TypeAlias` 被弃用，请使用 :keyword:`type` 语句，后者创建 :class:`TypeAliasType` "
"的实例，并且天然支持正向引用。请注意，虽然 :data:`TypeAlias` 和 :class:`TypeAliasType` "
"具有相似的用途和名称，但它们是不同的，后者并不是前者的类型。目前还没有移除 :data:`TypeAlias` 的计划，但鼓励用户迁移到 "
":keyword:`type` 语句。"

#: ../../library/typing.rst:1084
msgid "Special forms"
msgstr "特殊形式"

#: ../../library/typing.rst:1086
msgid ""
"These can be used as types in annotations. They all support subscription "
"using ``[]``, but each has a unique syntax."
msgstr "这些内容在注解中可以视为类型，且都支持下标用法（``[]``），但每个都有唯一的语法。"

#: ../../library/typing.rst:1091
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or"
" Y."
msgstr "联合类型； ``Union[X, Y]`` 等价于 ``X | Y`` ，意味着满足 X 或 Y 之一。"

#: ../../library/typing.rst:1093
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr "要定义一个联合类型，可以使用类似 ``Union[int, str]`` 或简写 ``int | str``。建议使用这种简写。细节:"

#: ../../library/typing.rst:1095
msgid "The arguments must be types and there must be at least one."
msgstr "参数必须是某种类型，且至少有一个。"

#: ../../library/typing.rst:1097
msgid "Unions of unions are flattened, e.g.::"
msgstr "联合类型之联合类型会被展平，例如："

#: ../../library/typing.rst:1099
msgid "Union[Union[int, str], float] == Union[int, str, float]"
msgstr "Union[Union[int, str], float] == Union[int, str, float]"

#: ../../library/typing.rst:1101
msgid ""
"However, this does not apply to unions referenced through a type alias, to "
"avoid forcing evaluation of the underlying :class:`TypeAliasType`::"
msgstr ""

#: ../../library/typing.rst:1104
msgid ""
"type A = Union[int, str]\n"
"Union[A, float] != Union[int, str, float]"
msgstr ""

#: ../../library/typing.rst:1107
msgid "Unions of a single argument vanish, e.g.::"
msgstr "单参数之联合类型就是该参数自身，例如："

#: ../../library/typing.rst:1109
msgid "Union[int] == int  # The constructor actually returns int"
msgstr "Union[int] == int  # 该构造器确实返回 int"

#: ../../library/typing.rst:1111 ../../library/typing.rst:1253
msgid "Redundant arguments are skipped, e.g.::"
msgstr "冗余的参数会被跳过，例如："

#: ../../library/typing.rst:1113
msgid "Union[int, str, int] == Union[int, str] == int | str"
msgstr "Union[int, str, int] == Union[int, str] == int | str"

#: ../../library/typing.rst:1115
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "比较联合类型，不涉及参数顺序，例如："

#: ../../library/typing.rst:1117
msgid "Union[int, str] == Union[str, int]"
msgstr "Union[int, str] == Union[str, int]"

#: ../../library/typing.rst:1119
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "不可创建 ``Union`` 的子类或实例。"

#: ../../library/typing.rst:1121
msgid "You cannot write ``Union[X][Y]``."
msgstr "没有 ``Union[X][Y]`` 这种写法。"

#: ../../library/typing.rst:1123
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "在运行时，不要移除联合类型中的显式子类。"

#: ../../library/typing.rst:1126
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr "联合类型现在可以写成 ``X | Y``。 参见 :ref:`联合类型表达式 <types-union>`。"

#: ../../library/typing.rst:1130
msgid ""
":class:`types.UnionType` is now an alias for :class:`Union`, and both "
"``Union[int, str]`` and ``int | str`` create instances of the same class. To"
" check whether an object is a ``Union`` at runtime, use ``isinstance(obj, "
"Union)``. For compatibility with earlier versions of Python, use "
"``get_origin(obj) is typing.Union or get_origin(obj) is types.UnionType``."
msgstr ""

#: ../../library/typing.rst:1140
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr "``Optional[X]`` 等价于 ``X | None`` （或 ``Union[X, None]`` ） 。"

#: ../../library/typing.rst:1142
msgid ""
"Note that this is not the same concept as an optional argument, which is one"
" that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"注意，可选类型与含默认值的可选参数不同。含默认值的可选参数不需要在类型注解上添加 ``Optional`` 限定符，因为它仅是可选的。例如："

#: ../../library/typing.rst:1147
msgid ""
"def foo(arg: int = 0) -> None:\n"
"    ..."
msgstr ""
"def foo(arg: int = 0) -> None:\n"
"    ..."

#: ../../library/typing.rst:1150
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr "另一方面，显式应用 ``None`` 值时，不管该参数是否可选， ``Optional`` 都适用。例如："

#: ../../library/typing.rst:1154
msgid ""
"def foo(arg: Optional[int] = None) -> None:\n"
"    ..."
msgstr ""
"def foo(arg: Optional[int] = None) -> None:\n"
"    ..."

#: ../../library/typing.rst:1157
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr "可选参数现在可以写成 ``X | None``。 参见 :ref:`联合类型表达式 <types-union>`。"

#: ../../library/typing.rst:1163
msgid "Special form for annotating higher-order functions."
msgstr "特殊形式，用于注解高阶函数。"

#: ../../library/typing.rst:1165
msgid ""
"``Concatenate`` can be used in conjunction with :ref:`Callable <annotating-"
"callables>` and :class:`ParamSpec` to annotate a higher-order callable which"
" adds, removes, or transforms parameters of another callable.  Usage is in "
"the form ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. "
"``Concatenate`` is currently only valid when used as the first argument to a"
" :ref:`Callable <annotating-callables>`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""
"``Concatenate`` 可用于与 :ref:`Callable <annotating-callables>` 和 "
":class:`ParamSpec` 连用来注解高阶可调用对象，该可象可以添加、移除或转换另一个可调用对象的形参。  使用形式为 "
"``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``。 ``Concatenate``"
" 目前仅可用作传给 :ref:`Callable <annotating-callables>` 的第一个参数。传给 ``Concatenate`` "
"的最后一个形参必须是 :class:`ParamSpec` 或省略号（ ``...`` ）。"

#: ../../library/typing.rst:1174
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a "
":class:`threading.Lock` to the decorated function,  ``Concatenate`` can be "
"used to indicate that ``with_lock`` expects a callable which takes in a "
"``Lock`` as the first argument, and returns a callable with a different type"
" signature.  In this case, the :class:`ParamSpec` indicates that the "
"returned callable's parameter types are dependent on the parameter types of "
"the callable being passed in::"
msgstr ""
"例如，为了注释一个装饰器 ``with_lock``，它为被装饰的函数提供了 "
":class:`threading.Lock`，``Concatenate`` 可以用来表示 ``with_lock`` "
"期望一个可调用对象，该对象接收一个 ``Lock`` 作为第一个参数，并返回一个具有不同类型签名的可调用对象。 "
"在这种情况下，:class:`ParamSpec` 表示返回的可调用对象的参数类型取决于被传入的可调用程序的参数类型::"

#: ../../library/typing.rst:1182
msgid ""
"from collections.abc import Callable\n"
"from threading import Lock\n"
"from typing import Concatenate\n"
"\n"
"# Use this lock to ensure that only one thread is executing a function\n"
"# at any time.\n"
"my_lock = Lock()\n"
"\n"
"def with_lock[**P, R](f: Callable[Concatenate[Lock, P], R]) -> Callable[P, R]:\n"
"    '''A type-safe decorator which provides a lock.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> R:\n"
"        # Provide the lock as the first argument.\n"
"        return f(my_lock, *args, **kwargs)\n"
"    return inner\n"
"\n"
"@with_lock\n"
"def sum_threadsafe(lock: Lock, numbers: list[float]) -> float:\n"
"    '''Add a list of numbers together in a thread-safe manner.'''\n"
"    with lock:\n"
"        return sum(numbers)\n"
"\n"
"# We don't need to pass in the lock ourselves thanks to the decorator.\n"
"sum_threadsafe([1.1, 2.2, 3.3])"
msgstr ""
"from collections.abc import Callable\n"
"from threading import Lock\n"
"from typing import Concatenate\n"
"\n"
"# 使用此锁来确保在任何时候只有一个线程正在执行某个函数。\n"
"my_lock = Lock()\n"
"\n"
"def with_lock[**P, R](f: Callable[Concatenate[Lock, P], R]) -> Callable[P, R]:\n"
"    '''A type-safe decorator which provides a lock.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> R:\n"
"        # Provide the lock as the first argument.\n"
"        return f(my_lock, *args, **kwargs)\n"
"    return inner\n"
"\n"
"@with_lock\n"
"def sum_threadsafe(lock: Lock, numbers: list[float]) -> float:\n"
"    '''Add a list of numbers together in a thread-safe manner.'''\n"
"    with lock:\n"
"        return sum(numbers)\n"
"\n"
"# 由于装饰器的存在，我们不需要自己传递锁。\n"
"sum_threadsafe([1.1, 2.2, 3.3])"

#: ../../library/typing.rst:1210 ../../library/typing.rst:2211
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)"
msgstr ":pep:`612` -- 参数规范变量（引入 ``ParamSpec`` 和 ``Concatenate`` 的 PEP）"

#: ../../library/typing.rst:1212
msgid ":class:`ParamSpec`"
msgstr ":class:`ParamSpec`"

#: ../../library/typing.rst:1213 ../../library/typing.rst:2214
msgid ":ref:`annotating-callables`"
msgstr ":ref:`annotating-callables`"

#: ../../library/typing.rst:1217
msgid "Special typing form to define \"literal types\"."
msgstr "特殊类型注解形式，用于定义“字面值类型”。"

#: ../../library/typing.rst:1219
msgid ""
"``Literal`` can be used to indicate to type checkers that the annotated "
"object has a value equivalent to one of the provided literals."
msgstr "``Literal`` 可以用来向类型检查器说明被注解的对象具有与所提供的字面量之一相同的值。"

#: ../../library/typing.rst:1225
msgid ""
"def validate_simple(data: Any) -> Literal[True]:  # always returns True\n"
"    ...\n"
"\n"
"type Mode = Literal['r', 'rb', 'w', 'wb']\n"
"def open_helper(file: str, mode: Mode) -> str:\n"
"    ...\n"
"\n"
"open_helper('/some/path', 'r')      # Passes type check\n"
"open_helper('/other/path', 'typo')  # Error in type checker"
msgstr ""
"def validate_simple(data: Any) -> Literal[True]:  # 总是返回 True\n"
"    ...\n"
"\n"
"type Mode = Literal['r', 'rb', 'w', 'wb']\n"
"def open_helper(file: str, mode: Mode) -> str:\n"
"    ...\n"
"\n"
"open_helper('/some/path', 'r')      # 通过类型检查\n"
"open_helper('/other/path', 'typo')  # 类型检查错误"

#: ../../library/typing.rst:1235
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` 不能创建子类。在运行时，任意值均可作为 ``Literal[...]`` "
"的类型参数，但类型检查器可以对此加以限制。字面量类型详见 :pep:`586` 。"

#: ../../library/typing.rst:1239
msgid "Additional details:"
msgstr ""

#: ../../library/typing.rst:1241
msgid "The arguments must be literal values and there must be at least one."
msgstr ""

#: ../../library/typing.rst:1243
msgid "Nested ``Literal`` types are flattened, e.g.::"
msgstr ""

#: ../../library/typing.rst:1245
msgid "assert Literal[Literal[1, 2], 3] == Literal[1, 2, 3]"
msgstr ""

#: ../../library/typing.rst:1247
msgid ""
"However, this does not apply to ``Literal`` types referenced through a type "
"alias, to avoid forcing evaluation of the underlying "
":class:`TypeAliasType`::"
msgstr ""

#: ../../library/typing.rst:1250
msgid ""
"type A = Literal[1, 2]\n"
"assert Literal[A, 3] != Literal[1, 2, 3]"
msgstr ""

#: ../../library/typing.rst:1255
msgid "assert Literal[1, 2, 1] == Literal[1, 2]"
msgstr ""

#: ../../library/typing.rst:1257
msgid "When comparing literals, the argument order is ignored, e.g.::"
msgstr ""

#: ../../library/typing.rst:1259
msgid "assert Literal[1, 2] == Literal[2, 1]"
msgstr ""

#: ../../library/typing.rst:1261
msgid "You cannot subclass or instantiate a ``Literal``."
msgstr ""

#: ../../library/typing.rst:1263
msgid "You cannot write ``Literal[X][Y]``."
msgstr ""

#: ../../library/typing.rst:1267
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of"
" their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` 现在能去除形参的重复。 ``Literal`` 对象的相等性比较不再依赖顺序。 现在如果有某个参数不为 "
":term:`hashable`，``Literal`` 对象在相等性比较期间将引发 :exc:`TypeError`。"

#: ../../library/typing.rst:1275
msgid "Special type construct to mark class variables."
msgstr "特殊类型注解构造，用于标注类变量。"

#: ../../library/typing.rst:1277
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr "如 :pep:`526` 所述，打包在 ClassVar 内的变量注解是指，给定属性应当用作类变量，而不应设置在类实例上。用法如下："

#: ../../library/typing.rst:1281
msgid ""
"class Starship:\n"
"    stats: ClassVar[dict[str, int]] = {} # class variable\n"
"    damage: int = 10                     # instance variable"
msgstr ""
"class Starship:\n"
"    stats: ClassVar[dict[str, int]] = {} # 类变量\n"
"    damage: int = 10                     # 实例变量"

#: ../../library/typing.rst:1285
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ":data:`ClassVar` 仅接受类型，也不能使用下标。"

#: ../../library/typing.rst:1287
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with "
":func:`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change "
"Python runtime behavior, but it can be used by third-party type checkers. "
"For example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` 本身不是类，不应用于 :func:`isinstance` 或 "
":func:`issubclass`。:data:`ClassVar` 不改变 Python "
"运行时行为，但可以用于第三方类型检查器。例如，类型检查器会认为以下代码有错："

#: ../../library/typing.rst:1293
msgid ""
"enterprise_d = Starship(3000)\n"
"enterprise_d.stats = {} # Error, setting class variable on instance\n"
"Starship.stats = {}     # This is OK"
msgstr ""
"enterprise_d = Starship(3000)\n"
"enterprise_d.stats = {} # 错误，在实例上设置类变量\n"
"Starship.stats = {}     # 这是可以的"

#: ../../library/typing.rst:1301
msgid ":data:`ClassVar` can now be nested in :data:`Final` and vice versa."
msgstr "现在 :data:`ClassVar` 可以被嵌套在 :data:`Final` 中，反之亦然。"

#: ../../library/typing.rst:1305
msgid "Special typing construct to indicate final names to type checkers."
msgstr "特殊类型注解构造，用于向类型检查器表示最终名称。"

#: ../../library/typing.rst:1307
msgid ""
"Final names cannot be reassigned in any scope. Final names declared in class"
" scopes cannot be overridden in subclasses."
msgstr "不能在任何作用域中重新分配最终名称。类作用域中声明的最终名称不能在子类中重写。"

#: ../../library/typing.rst:1312
msgid ""
"MAX_SIZE: Final = 9000\n"
"MAX_SIZE += 1  # Error reported by type checker\n"
"\n"
"class Connection:\n"
"    TIMEOUT: Final[int] = 10\n"
"\n"
"class FastConnector(Connection):\n"
"    TIMEOUT = 1  # Error reported by type checker"
msgstr ""
"MAX_SIZE: Final = 9000\n"
"MAX_SIZE += 1  # 类型检查器将报告错误\n"
"\n"
"class Connection:\n"
"    TIMEOUT: Final[int] = 10\n"
"\n"
"class FastConnector(Connection):\n"
"    TIMEOUT = 1  # 类型检查器将报告错误"

#: ../../library/typing.rst:1321 ../../library/typing.rst:3234
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr "这些属性没有运行时检查。详见 :pep:`591`。"

#: ../../library/typing.rst:1328
msgid ":data:`Final` can now be nested in :data:`ClassVar` and vice versa."
msgstr "现在 :data:`Final` 可以被嵌套在 :data:`ClassVar` 中，反之亦然。"

#: ../../library/typing.rst:1332
msgid "Special typing construct to mark a :class:`TypedDict` key as required."
msgstr "特殊类型注解构造，用于标记 :class:`TypedDict` 键为必填项。"

#: ../../library/typing.rst:1334
msgid ""
"This is mainly useful for ``total=False`` TypedDicts. See :class:`TypedDict`"
" and :pep:`655` for more details."
msgstr ""
"这主要用于 ``total=False`` 的 TypedDict。有关更多详细信息，请参阅 :class:`TypedDict` 和 "
":pep:`655` 。"

#: ../../library/typing.rst:1341
msgid ""
"Special typing construct to mark a :class:`TypedDict` key as potentially "
"missing."
msgstr "特殊类型注解构造，用于标记 :class:`TypedDict` 键为可能不存在的键。"

#: ../../library/typing.rst:1344
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr "详情参见 :class:`TypedDict` 和 :pep:`655`。"

#: ../../library/typing.rst:1350
msgid ""
"A special typing construct to mark an item of a :class:`TypedDict` as read-"
"only."
msgstr "一个特殊的类型标注构造，用于将 :class:`TypedDict` 的项标记为只读。"

#: ../../library/typing.rst:1354
msgid ""
"class Movie(TypedDict):\n"
"   title: ReadOnly[str]\n"
"   year: int\n"
"\n"
"def mutate_movie(m: Movie) -> None:\n"
"   m[\"year\"] = 1999  # allowed\n"
"   m[\"title\"] = \"The Matrix\"  # typechecker error"
msgstr ""
"class Movie(TypedDict):\n"
"   title: ReadOnly[str]\n"
"   year: int\n"
"\n"
"def mutate_movie(m: Movie) -> None:\n"
"   m[\"year\"] = 1999  # allowed\n"
"   m[\"title\"] = \"The Matrix\"  # 类型检查错误"

#: ../../library/typing.rst:1362
msgid "There is no runtime checking for this property."
msgstr "这个属性没有运行时检查。"

#: ../../library/typing.rst:1364
msgid "See :class:`TypedDict` and :pep:`705` for more details."
msgstr "详见 :class:`TypedDict` 和 :pep:`705`。"

#: ../../library/typing.rst:1370
msgid "Special typing form to add context-specific metadata to an annotation."
msgstr "特殊类型注解形式，用于向注解添加特定于上下文的元数据。"

#: ../../library/typing.rst:1372
msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in a"
" :attr:`!__metadata__` attribute."
msgstr ""
"使用注解 ``Annotated[T, x]`` 将元数据 ``x`` 添加到给定类型 ``T`` 。使用 ``Annotated`` "
"添加的元数据可以被静态分析工具使用，也可以在运行时使用。在运行时使用的情况下，元数据存储在 :attr:`!__metadata__` 属性中。"

#: ../../library/typing.rst:1377
msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no"
" special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code"
" that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""
"如果库或工具遇到注解 ``Annotated[T, x]`` ，并且没有针对这一元数据的特殊处理逻辑，则应该忽略该元数据，简单地将注解视为 ``T`` "
"。因此， ``Annotated`` 对于希望将注解用于 Python 的静态类型注解系统之外的目的的代码很有用。"

#: ../../library/typing.rst:1383
msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking"
" for a function or class."
msgstr ""
"使用 ``Annotated[T, x]`` 作为注解仍然允许对 ``T`` 进行静态类型检查，因为类型检查器将简单地忽略元数据 ``x`` "
"。因此，``Annotated`` 不同于 :func:`@no_type_check <no_type_check>` "
"装饰器，后者虽然也可以用于在类型注解系统范围之外添加注解，但是会完全禁用对函数或类的类型检查。"

#: ../../library/typing.rst:1390
msgid ""
"The responsibility of how to interpret the metadata lies with the tool or "
"library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to"
" determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""
"具体解释元数据的方式由遇到 ``Annotated`` 注解的工具或库来负责。遇到 ``Annotated`` "
"类型的工具或库可以扫描元数据的各个元素以确定其是否有意处理（比如使用 :func:`isinstance` ）。"

#: ../../library/typing.rst:1398
msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr "以下示例演示在进行区间范围分析时使用 ``Annotated`` 将元数据添加到类型注解的方法："

#: ../../library/typing.rst:1401
msgid ""
"@dataclass\n"
"class ValueRange:\n"
"    lo: int\n"
"    hi: int\n"
"\n"
"T1 = Annotated[int, ValueRange(-10, 5)]\n"
"T2 = Annotated[T1, ValueRange(-20, 3)]"
msgstr ""
"@dataclass\n"
"class ValueRange:\n"
"    lo: int\n"
"    hi: int\n"
"\n"
"T1 = Annotated[int, ValueRange(-10, 5)]\n"
"T2 = Annotated[T1, ValueRange(-20, 3)]"

#: ../../library/typing.rst:1411
msgid ""
"The first argument to ``Annotated`` must be a valid type. Multiple metadata "
"elements can be supplied as ``Annotated`` supports variadic arguments. The "
"order of the metadata elements is preserved and matters for equality "
"checks::"
msgstr ""
"传给 ``Annotated`` 的第一个参数必须是合法的类型。 可以将多个元数据元素作为支持可变参数的 ``Annotated`` 来提供。 "
"元数据元素的顺序将被保留并会影响相等性检测::"

#: ../../library/typing.rst:1415
msgid ""
"@dataclass\n"
"class ctype:\n"
"     kind: str\n"
"\n"
"a1 = Annotated[int, ValueRange(3, 10), ctype(\"char\")]\n"
"a2 = Annotated[int, ctype(\"char\"), ValueRange(3, 10)]\n"
"\n"
"assert a1 != a2  # Order matters"
msgstr ""
"@dataclass\n"
"class ctype:\n"
"     kind: str\n"
"\n"
"a1 = Annotated[int, ValueRange(3, 10), ctype(\"char\")]\n"
"a2 = Annotated[int, ctype(\"char\"), ValueRange(3, 10)]\n"
"\n"
"assert a1 != a2  # 顺序会有影响"

#: ../../library/typing.rst:1424
msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr "由处理注解的工具决定是否允许向一个注解中添加多个元数据元素，以及如何合并这些注解。"

#: ../../library/typing.rst:1428
msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements"
" starts with the innermost annotation::"
msgstr "嵌套的 ``Annotated`` 类型会被展平。元数据元素从最内层的注解开始依次展开："

#: ../../library/typing.rst:1431
msgid ""
"assert Annotated[Annotated[int, ValueRange(3, 10)], ctype(\"char\")] == Annotated[\n"
"    int, ValueRange(3, 10), ctype(\"char\")\n"
"]"
msgstr ""
"assert Annotated[Annotated[int, ValueRange(3, 10)], ctype(\"char\")] == Annotated[\n"
"    int, ValueRange(3, 10), ctype(\"char\")\n"
"]"

#: ../../library/typing.rst:1435
msgid ""
"However, this does not apply to ``Annotated`` types referenced through a "
"type alias, to avoid forcing evaluation of the underlying "
":class:`TypeAliasType`::"
msgstr ""

#: ../../library/typing.rst:1438
msgid ""
"type From3To10[T] = Annotated[T, ValueRange(3, 10)]\n"
"assert Annotated[From3To10[int], ctype(\"char\")] != Annotated[\n"
"   int, ValueRange(3, 10), ctype(\"char\")\n"
"]"
msgstr ""

#: ../../library/typing.rst:1443
msgid "Duplicated metadata elements are not removed::"
msgstr "元数据中的重复元素不会被移除："

#: ../../library/typing.rst:1445
msgid ""
"assert Annotated[int, ValueRange(3, 10)] != Annotated[\n"
"    int, ValueRange(3, 10), ValueRange(3, 10)\n"
"]"
msgstr ""
"assert Annotated[int, ValueRange(3, 10)] != Annotated[\n"
"    int, ValueRange(3, 10), ValueRange(3, 10)\n"
"]"

#: ../../library/typing.rst:1449
msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr "``Annotated`` 可以与嵌套别名和泛型别名一起使用："

#: ../../library/typing.rst:1451
msgid ""
"@dataclass\n"
"class MaxLen:\n"
"    value: int\n"
"\n"
"type Vec[T] = Annotated[list[tuple[T, T]], MaxLen(10)]\n"
"\n"
"# When used in a type annotation, a type checker will treat \"V\" the same as\n"
"# ``Annotated[list[tuple[int, int]], MaxLen(10)]``:\n"
"type V = Vec[int]"
msgstr ""
"@dataclass\n"
"class MaxLen:\n"
"    value: int\n"
"\n"
"type Vec[T] = Annotated[list[tuple[T, T]], MaxLen(10)]\n"
"\n"
"# 当在类型注释中使用时，类型检查器会将“V”视为\n"
"# ``Annotated[list[tuple[int, int]], MaxLen(10)]``:\n"
"type V = Vec[int]"

#: ../../library/typing.rst:1463
msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr "``Annotated`` 不能与已解包的 :class:`TypeVarTuple` 一起使用::"

#: ../../library/typing.rst:1465
msgid ""
"type Variadic[*Ts] = Annotated[*Ts, Ann1] = Annotated[T1, T2, T3, ..., Ann1]"
"  # NOT valid"
msgstr ""
"type Variadic[*Ts] = Annotated[*Ts, Ann1] = Annotated[T1, T2, T3, ..., Ann1]"
"  # 不合法"

#: ../../library/typing.rst:1467
msgid ""
"where ``T1``, ``T2``, ... are :class:`TypeVars <TypeVar>`. This is invalid "
"as only one type should be passed to Annotated."
msgstr ""
"其中 ``T1``, ``T2`` ... 都是 :class:`TypeVars <TypeVar>`。 这是不合法的因为只能传递一种类型给 "
"Annotated。"

#: ../../library/typing.rst:1470
msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""
"默认情况下， :func:`get_type_hints` 会去除注解中的元数据。传入 ``include_extras=True`` 可以保留元数据："

#: ../../library/typing.rst:1473
msgid ""
">>> from typing import Annotated, get_type_hints\n"
">>> def func(x: Annotated[int, \"metadata\"]) -> None: pass\n"
"...\n"
">>> get_type_hints(func)\n"
"{'x': <class 'int'>, 'return': <class 'NoneType'>}\n"
">>> get_type_hints(func, include_extras=True)\n"
"{'x': typing.Annotated[int, 'metadata'], 'return': <class 'NoneType'>}"
msgstr ""
">>> from typing import Annotated, get_type_hints\n"
">>> def func(x: Annotated[int, \"metadata\"]) -> None: pass\n"
"...\n"
">>> get_type_hints(func)\n"
"{'x': <class 'int'>, 'return': <class 'NoneType'>}\n"
">>> get_type_hints(func, include_extras=True)\n"
"{'x': typing.Annotated[int, 'metadata'], 'return': <class 'NoneType'>}"

#: ../../library/typing.rst:1483
msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr "在运行时，与特定 ``Annotated`` 类型相关联的元数据可通过 :attr:`!__metadata__` 属性来获取："

#: ../../library/typing.rst:1486
msgid ""
">>> from typing import Annotated\n"
">>> X = Annotated[int, \"very\", \"important\", \"metadata\"]\n"
">>> X\n"
"typing.Annotated[int, 'very', 'important', 'metadata']\n"
">>> X.__metadata__\n"
"('very', 'important', 'metadata')"
msgstr ""
">>> from typing import Annotated\n"
">>> X = Annotated[int, \"very\", \"important\", \"metadata\"]\n"
">>> X\n"
"typing.Annotated[int, 'very', 'important', 'metadata']\n"
">>> X.__metadata__\n"
"('very', 'important', 'metadata')"

#: ../../library/typing.rst:1495
msgid ""
"If you want to retrieve the original type wrapped by ``Annotated``, use the "
":attr:`!__origin__` attribute:"
msgstr "如果你想要获取由 ``Annotated`` 包装的原始类型，请使用 :attr:`!__origin__` 属性："

#: ../../library/typing.rst:1498
msgid ""
">>> from typing import Annotated, get_origin\n"
">>> Password = Annotated[str, \"secret\"]\n"
">>> Password.__origin__\n"
"<class 'str'>"
msgstr ""
">>> from typing import Annotated, get_origin\n"
">>> Password = Annotated[str, \"secret\"]\n"
">>> Password.__origin__\n"
"<class 'str'>"

#: ../../library/typing.rst:1505
msgid "Note that using :func:`get_origin` will return ``Annotated`` itself:"
msgstr "请注意使用 :func:`get_origin` 将返回 ``Annotated`` 本身："

#: ../../library/typing.rst:1507
msgid ""
">>> get_origin(Password)\n"
"typing.Annotated"
msgstr ""
">>> get_origin(Password)\n"
"typing.Annotated"

#: ../../library/typing.rst:1514
msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ":pep:`593` - 灵活的函数与变量标注"

#: ../../library/typing.rst:1515
msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr "该 PEP 将 ``Annotated`` 引入到标准库中。"

#: ../../library/typing.rst:1522 ../../library/typing.rst:1606
msgid ""
"Special typing construct for marking user-defined type predicate functions."
msgstr "特殊类型注解构造，用于标记用户定义的谓词函数。"

#: ../../library/typing.rst:1524
msgid ""
"``TypeIs`` can be used to annotate the return type of a user-defined type "
"predicate function.  ``TypeIs`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean and take at least"
" one positional argument."
msgstr ""
"``TypeIs`` 能用来注解用户定义的谓词函数的返回值类型。``TypeIs`` "
"接受单个类型参数。如此标注的函数在运行时应当有至少一个位置参数，并且返回一个布尔值。"

#: ../../library/typing.rst:1529
msgid ""
"``TypeIs`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type "
"predicate\"::"
msgstr ""
"``TypeIs`` 旨在方便 *类型收窄* -- "
"一个被静态类型检查器使用，用来更精准地决定程序代码流中表达式类型的技巧。通常类型收窄通过分析有条件的代码流并对代码块执行类型收窄实现。此处的条件表达式有时也被称为“类型谓词”。"

#: ../../library/typing.rst:1535
msgid ""
"def is_str(val: str | float):\n"
"    # \"isinstance\" type predicate\n"
"    if isinstance(val, str):\n"
"        # Type of ``val`` is narrowed to ``str``\n"
"        ...\n"
"    else:\n"
"        # Else, type of ``val`` is narrowed to ``float``.\n"
"        ..."
msgstr ""
"def is_str(val: str | float):\n"
"    # \"isinstance\" 类型谓词\n"
"    if isinstance(val, str):\n"
"        #  ``val`` 的类型缩小为 ``str``\n"
"        ...\n"
"    else:\n"
"        # 否则， ``val`` 的类型缩小为 ``float``。\n"
"        ..."

#: ../../library/typing.rst:1544
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a"
" type predicate.  Such a function should use ``TypeIs[...]`` or "
":data:`TypeGuard` as its return type to alert static type checkers to this "
"intention.  ``TypeIs`` usually has more intuitive behavior than "
"``TypeGuard``, but it cannot be used when the input and output types are "
"incompatible (e.g., ``list[object]`` to ``list[int]``) or when the function "
"does not return ``True`` for all instances of the narrowed type."
msgstr ""
"使用一个用户定义的布尔函数作为类型谓词有时很方便。这样的函数应当将 ``TypeIs[...]`` 或 :data:`TypeGuard` "
"作为它的返回类型，以向静态类型检查器传达这个意图。``TypeIs`` 的行为通常比 ``TypeGuard`` 更直观，但在函数的输入与输出类型不兼容"
" (例如从 ``list[object]`` 到 ``list[int]``) 或函数不会对所有收窄后类型的实例返回 ``True`` 时不能使用。"

#: ../../library/typing.rst:1552
msgid ""
"Using  ``-> TypeIs[NarrowedType]`` tells the static type checker that for a "
"given function:"
msgstr "使用 ``-> TypeIs[NarrowedType]`` 告诉静态类型检查器对于给定的函数："

#: ../../library/typing.rst:1555 ../../library/typing.rst:1616
msgid "The return value is a boolean."
msgstr "返回一个布尔值。"

#: ../../library/typing.rst:1556
msgid ""
"If the return value is ``True``, the type of its argument is the "
"intersection of the argument's original type and ``NarrowedType``."
msgstr "如果返回值是 ``True``，那么其参数的类型收窄到参数本身类型与 ``NarrowedType`` 的并。"

#: ../../library/typing.rst:1558
msgid ""
"If the return value is ``False``, the type of its argument is narrowed to "
"exclude ``NarrowedType``."
msgstr "如果返回值是 ``False``，那么其参数的类型收窄到排除 ``NarrowedType``。"

#: ../../library/typing.rst:1563
msgid ""
"from typing import assert_type, final, TypeIs\n"
"\n"
"class Parent: pass\n"
"class Child(Parent): pass\n"
"@final\n"
"class Unrelated: pass\n"
"\n"
"def is_parent(val: object) -> TypeIs[Parent]:\n"
"    return isinstance(val, Parent)\n"
"\n"
"def run(arg: Child | Unrelated):\n"
"    if is_parent(arg):\n"
"        # Type of ``arg`` is narrowed to the intersection\n"
"        # of ``Parent`` and ``Child``, which is equivalent to\n"
"        # ``Child``.\n"
"        assert_type(arg, Child)\n"
"    else:\n"
"        # Type of ``arg`` is narrowed to exclude ``Parent``,\n"
"        # so only ``Unrelated`` is left.\n"
"        assert_type(arg, Unrelated)"
msgstr ""
"from typing import assert_type, final, TypeIs\n"
"\n"
"class Parent: pass\n"
"class Child(Parent): pass\n"
"@final\n"
"class Unrelated: pass\n"
"\n"
"def is_parent(val: object) -> TypeIs[Parent]:\n"
"    return isinstance(val, Parent)\n"
"\n"
"def run(arg: Child | Unrelated):\n"
"    if is_parent(arg):\n"
"        # ``arg`` 的类型缩小为 ``Parent`` 和 ```Child`` 的交集， \n"
"        # 相当于 ``Child``.\n"
"        assert_type(arg, Child)\n"
"    else:\n"
"        # ``arg`` 的类型缩小为 ``Parent`` 除外，所以仅剩 ``Unrelated``。\n"
"        assert_type(arg, Unrelated)"

#: ../../library/typing.rst:1584
msgid ""
"The type inside ``TypeIs`` must be consistent with the type of the "
"function's argument; if it is not, static type checkers will raise an error."
"  An incorrectly written ``TypeIs`` function can lead to unsound behavior in"
" the type system; it is the user's responsibility to write such functions in"
" a type-safe manner."
msgstr ""
"``TypeIs`` 内的类型必须与函数参数类型契合，否则静态类型检查器会引发错误。编写不正确的 ``TypeIs`` "
"可能导致类型系统中出现不健全行为，以类型安全的方式编写这些函数是用户的责任。"

#: ../../library/typing.rst:1590
msgid ""
"If a ``TypeIs`` function is a class or instance method, then the type in "
"``TypeIs`` maps to the type of the second parameter (after ``cls`` or "
"``self``)."
msgstr ""
"如果 ``TypeIs`` 函数是一个类或实例方法，那么 ``TypeIs`` 中的类型将映射到（在 ``cls`` 或 ``self`` "
"之后）第二个形参的类型。"

#: ../../library/typing.rst:1594
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeIs[TypeB]: ...``, means that"
" if ``foo(arg)`` returns ``True``, then ``arg`` is an instance of ``TypeB``,"
" and if it returns ``False``, it is not an instance of ``TypeB``."
msgstr ""
"简单来说，``def foo(arg: TypeA) -> TypeIs[TypeB]: ...`` 意味着如果 ``foo(arg)`` 返回 "
"``True``，那么 ``arg`` 就是 ``TypeB`` 的实例，如果返回 ``False``，它就不是 ``TypeB``.的实例。"

#: ../../library/typing.rst:1598
msgid ""
"``TypeIs`` also works with type variables.  For more information, see "
":pep:`742` (Narrowing types with ``TypeIs``)."
msgstr "``TypeIs`` 同样可作用于类型变量，详见 :pep:`742` (使用 ``TypeIs`` 收窄类型) 。"

#: ../../library/typing.rst:1608
msgid ""
"Type predicate functions are user-defined functions that return whether "
"their argument is an instance of a particular type. ``TypeGuard`` works "
"similarly to :data:`TypeIs`, but has subtly different effects on type "
"checking behavior (see below)."
msgstr ""
"类型谓词函数是由用户定义的函数，它的返回值指示参数是否为某个特定类型的实例。``TypeGuard`` 和 :data:`TypeIs` "
"用法相近，但是对类型检查行为有不同的影响（如下）。"

#: ../../library/typing.rst:1613
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr "``-> TypeGuard`` 告诉静态类型检查器，某函数："

#: ../../library/typing.rst:1617
msgid ""
"If the return value is ``True``, the type of its argument is the type inside"
" ``TypeGuard``."
msgstr "如果返回值是 ``True``，那么其参数的类型是 ``TypeGuard`` 内的类型。"

#: ../../library/typing.rst:1620
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr "``TypeGuard`` 也适用于类型变量。 详情参见 :pep:`647`。"

#: ../../library/typing.rst:1624
msgid ""
"def is_str_list(val: list[object]) -> TypeGuard[list[str]]:\n"
"    '''Determines whether all objects in the list are strings'''\n"
"    return all(isinstance(x, str) for x in val)\n"
"\n"
"def func1(val: list[object]):\n"
"    if is_str_list(val):\n"
"        # Type of ``val`` is narrowed to ``list[str]``.\n"
"        print(\" \".join(val))\n"
"    else:\n"
"        # Type of ``val`` remains as ``list[object]``.\n"
"        print(\"Not a list of strings!\")"
msgstr ""
"def is_str_list(val: list[object]) -> TypeGuard[list[str]]:\n"
"    '''Determines whether all objects in the list are strings'''\n"
"    return all(isinstance(x, str) for x in val)\n"
"\n"
"def func1(val: list[object]):\n"
"    if is_str_list(val):\n"
"        # ``val`` 的类型缩小为 ``list[str]``.\n"
"        print(\" \".join(val))\n"
"    else:\n"
"        # ``val`` 的类型仍为 ``list[object]``.\n"
"        print(\"Not a list of strings!\")"

#: ../../library/typing.rst:1636
msgid "``TypeIs`` and ``TypeGuard`` differ in the following ways:"
msgstr "``TypeIs`` 和 ``TypeGuard`` 有以下不同："

#: ../../library/typing.rst:1638
msgid ""
"``TypeIs`` requires the narrowed type to be a subtype of the input type, "
"while ``TypeGuard`` does not.  The main reason is to allow for things like "
"narrowing ``list[object]`` to ``list[str]`` even though the latter is not a "
"subtype of the former, since ``list`` is invariant."
msgstr ""
"``TypeIs`` 要求收窄的类型是输入类型的子类型，但 ``TypeGuard`` 不要求。这主要是为了允许将 ``list[object]`` "
"缩小为 ``list[str]``，即使后者不是前者的子类型，因为 ``list`` 是不变的。"

#: ../../library/typing.rst:1642
msgid ""
"When a ``TypeGuard`` function returns ``True``, type checkers narrow the "
"type of the variable to exactly the ``TypeGuard`` type. When a ``TypeIs`` "
"function returns ``True``, type checkers can infer a more precise type "
"combining the previously known type of the variable with the ``TypeIs`` "
"type. (Technically, this is known as an intersection type.)"
msgstr ""
"当 ``TypeGuard`` 函数返回 ``True`` 时，类型检查器会将变量的类型精确地收窄到 ``TypeGuard`` 类型。当 "
"``TypeIs`` 函数返回 ``True`` 时，类型检查程序可以结合先前已知的变量类型和 ``TypeIs`` "
"类型推断出更精确的类型。（从技术上讲，这叫做交类型。）"

#: ../../library/typing.rst:1646
msgid ""
"When a ``TypeGuard`` function returns ``False``, type checkers cannot narrow"
" the type of the variable at all. When a ``TypeIs`` function returns "
"``False``, type checkers can narrow the type of the variable to exclude the "
"``TypeIs`` type."
msgstr ""
"当 ``TypeGuard`` 函数返回 ``False`` 时，类型检查器不会收窄变量的类型范围。当 ``TypeIs`` 函数返回 "
"``False`` 时，类型检查器可以收窄变量的类型范围至排除 ``TypeIs`` 类型。"

#: ../../library/typing.rst:1655
msgid ""
"Typing operator to conceptually mark an object as having been unpacked."
msgstr "在概念上将对象标记为已解包的类型运算符。"

#: ../../library/typing.rst:1657
msgid ""
"For example, using the unpack operator ``*`` on a :ref:`type variable tuple "
"<typevartuple>` is equivalent to using ``Unpack`` to mark the type variable "
"tuple as having been unpacked::"
msgstr ""
"例如，在一个 :ref:`类型变量元组 <typevartuple>` 上使用解包运算符 ``*`` 就等价于使用 ``Unpack`` "
"来将该类型变量元组标记为已被解包::"

#: ../../library/typing.rst:1661
msgid ""
"Ts = TypeVarTuple('Ts')\n"
"tup: tuple[*Ts]\n"
"# Effectively does:\n"
"tup: tuple[Unpack[Ts]]"
msgstr ""
"Ts = TypeVarTuple('Ts')\n"
"tup: tuple[*Ts]\n"
"# 实际所做的：\n"
"tup: tuple[Unpack[Ts]]"

#: ../../library/typing.rst:1666
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context of"
" :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""
"实际上，``Unpack`` 在 :class:`typing.TypeVarTuple <TypeVarTuple>` 和 "
":class:`builtins.tuple <tuple>` 类型的上下文中可以和 ``*`` 互换使用。 你可能会看到 ``Unpack`` "
"在较旧版本的 Python 中被显式地使用，这时 ``*`` 在特定场合则是无法使用的::"

#: ../../library/typing.rst:1672
msgid ""
"# In older versions of Python, TypeVarTuple and Unpack\n"
"# are located in the `typing_extensions` backports package.\n"
"from typing_extensions import TypeVarTuple, Unpack\n"
"\n"
"Ts = TypeVarTuple('Ts')\n"
"tup: tuple[*Ts]         # Syntax error on Python <= 3.10!\n"
"tup: tuple[Unpack[Ts]]  # Semantically equivalent, and backwards-compatible"
msgstr ""
"# 在旧版本的 Python 中，TypeVarTuple 和 Unpack 位于\n"
"# `typing_extensions` 反向移植包中。\n"
"from typing_extensions import TypeVarTuple, Unpack\n"
"\n"
"Ts = TypeVarTuple('Ts')\n"
"tup: tuple[*Ts]         # Python <= 3.10 时的语法错误！\n"
"tup: tuple[Unpack[Ts]]  # 语义等效且向后兼容"

#: ../../library/typing.rst:1680
msgid ""
"``Unpack`` can also be used along with :class:`typing.TypedDict` for typing "
"``**kwargs`` in a function signature::"
msgstr ""
"``Unpack`` 也可以与 :class:`typing.TypedDict` 一起使用以便在函数签名中对 ``**kwargs`` "
"进行类型标注::"

#: ../../library/typing.rst:1683
msgid ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"    name: str\n"
"    year: int\n"
"\n"
"# This function expects two keyword arguments - `name` of type `str`\n"
"# and `year` of type `int`.\n"
"def foo(**kwargs: Unpack[Movie]): ..."
msgstr ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"    name: str\n"
"    year: int\n"
"\n"
"# 此函数需要两个关键字参数 - \n"
"# 类型为 `str` 的 `name` 和类型为 `int` 的 `year`。\n"
"def foo(**kwargs: Unpack[Movie]): ..."

#: ../../library/typing.rst:1693
msgid ""
"See :pep:`692` for more details on using ``Unpack`` for ``**kwargs`` typing."
msgstr "请参阅 :pep:`692` 了解将 ``Unpack`` 用于 ``**kwargs`` 类型标注的更多细节。"

#: ../../library/typing.rst:1698
msgid "Building generic types and type aliases"
msgstr "构造泛型类型与类型别名"

#: ../../library/typing.rst:1700
msgid ""
"The following classes should not be used directly as annotations. Their "
"intended purpose is to be building blocks for creating generic types and "
"type aliases."
msgstr "下列类不应被直接用作标注。 它们的设计目标是作为创建泛型类型和类型别名的构件。"

#: ../../library/typing.rst:1704
msgid ""
"These objects can be created through special syntax (:ref:`type parameter "
"lists <type-params>` and the :keyword:`type` statement). For compatibility "
"with Python 3.11 and earlier, they can also be created without the dedicated"
" syntax, as documented below."
msgstr ""
"这些对象可通过特殊语法 (:ref:`类型形参列表 <type-params>` 和 :keyword:`type` 语句) 来创建。 为了与 "
"Python 3.11 及更早版本的兼容性，它们也可不用专门的语法来创建，如下文所述。"

#: ../../library/typing.rst:1711
msgid "Abstract base class for generic types."
msgstr "用于泛型类型的抽象基类。"

#: ../../library/typing.rst:1713
msgid ""
"A generic type is typically declared by adding a list of type parameters "
"after the class name::"
msgstr "泛型类型通常是通过在类名后添加一个类型形参列表来声明的::"

#: ../../library/typing.rst:1716
msgid ""
"class Mapping[KT, VT]:\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # Etc."
msgstr ""
"class Mapping[KT, VT]:\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # 其他"

#: ../../library/typing.rst:1721
msgid ""
"Such a class implicitly inherits from ``Generic``. The runtime semantics of "
"this syntax are discussed in the :ref:`Language Reference <generic-"
"classes>`."
msgstr ""
"这样的类将隐式地继承自 ``Generic``。 对于该语法的运行语义的讨论参见 :ref:`语言参考 <generic-classes>`。"

#: ../../library/typing.rst:1725
msgid "This class can then be used as follows::"
msgstr "该类的用法如下："

#: ../../library/typing.rst:1727
msgid ""
"def lookup_name[X, Y](mapping: Mapping[X, Y], key: X, default: Y) -> Y:\n"
"    try:\n"
"        return mapping[key]\n"
"    except KeyError:\n"
"        return default"
msgstr ""
"def lookup_name[X, Y](mapping: Mapping[X, Y], key: X, default: Y) -> Y:\n"
"    try:\n"
"        return mapping[key]\n"
"    except KeyError:\n"
"        return default"

#: ../../library/typing.rst:1733
msgid ""
"Here the brackets after the function name indicate a :ref:`generic function "
"<generic-functions>`."
msgstr "此处函数名之后的圆括号是表示 :ref:`泛型函数 <generic-functions>`。"

#: ../../library/typing.rst:1736
msgid ""
"For backwards compatibility, generic classes can also be declared by "
"explicitly inheriting from ``Generic``. In this case, the type parameters "
"must be declared separately::"
msgstr "为了保持向下兼容性，泛型类也可通过显式地继承自 ``Generic`` 来声明。 在此情况下，类型形参必须单独声明::"

#: ../../library/typing.rst:1741
msgid ""
"KT = TypeVar('KT')\n"
"VT = TypeVar('VT')\n"
"\n"
"class Mapping(Generic[KT, VT]):\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # Etc."
msgstr ""
"KT = TypeVar('KT')\n"
"VT = TypeVar('VT')\n"
"\n"
"class Mapping(Generic[KT, VT]):\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # 其他"

#: ../../library/typing.rst:1753
msgid "Type variable."
msgstr "类型变量。"

#: ../../library/typing.rst:1755
msgid ""
"The preferred way to construct a type variable is via the dedicated syntax "
"for :ref:`generic functions <generic-functions>`, :ref:`generic classes "
"<generic-classes>`, and :ref:`generic type aliases <generic-type-aliases>`::"
msgstr ""
"构造类型变量的推荐方式是使用针对 :ref:`泛型函数 <generic-functions>`, :ref:`泛型类 <generic-"
"classes>` 和 :ref:`泛型类型别名 <generic-type-aliases>` 的专门语法::"

#: ../../library/typing.rst:1760
msgid ""
"class Sequence[T]:  # T is a TypeVar\n"
"    ..."
msgstr ""
"class Sequence[T]:  # T 是一个 TypeVar\n"
"    ..."

#: ../../library/typing.rst:1763
msgid ""
"This syntax can also be used to create bounded and constrained type "
"variables::"
msgstr "此语法也可被用于创建绑定和约束类型变量::"

#: ../../library/typing.rst:1766
msgid ""
"class StrSequence[S: str]:  # S is a TypeVar with a `str` upper bound;\n"
"    ...                     # we can say that S is \"bounded by `str`\"\n"
"\n"
"\n"
"class StrOrBytesSequence[A: (str, bytes)]:  # A is a TypeVar constrained to str or bytes\n"
"    ..."
msgstr ""
"class StrSequence[S: str]:  # S 是具有 `str` 上方绑定的 TypeVar；\n"
"    ...                     # 我们可以说 S 是 \"被 `str` 绑定\"\n"
"\n"
"\n"
"class StrOrBytesSequence[A: (str, bytes)]:  # A 是约束为 str 或 bytes 的 TypeVar\n"
"    ..."

#: ../../library/typing.rst:1773
msgid ""
"However, if desired, reusable type variables can also be constructed "
"manually, like so::"
msgstr "不过，如有需要，也可通过手动方式来构造可重用的类型变量，就像这样::"

#: ../../library/typing.rst:1775
msgid ""
"T = TypeVar('T')  # Can be anything\n"
"S = TypeVar('S', bound=str)  # Can be any subtype of str\n"
"A = TypeVar('A', str, bytes)  # Must be exactly str or bytes"
msgstr ""
"T = TypeVar('T')  # 可以是任意类型\n"
"S = TypeVar('S', bound=str)  # 可以是任意 str 的子类型\n"
"A = TypeVar('A', str, bytes)  # 必须是 str 或 bytes"

#: ../../library/typing.rst:1779
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""
"类型变量的主要用处是为静态类型检查器提供支持。 它们可作为泛型类型以及泛型函数和类型别名定义的形参。 请参阅 :class:`Generic` "
"了解有关泛型类型的更多信息。 泛型函数的作用方式如下::"

#: ../../library/typing.rst:1785
msgid ""
"def repeat[T](x: T, n: int) -> Sequence[T]:\n"
"    \"\"\"Return a list containing n references to x.\"\"\"\n"
"    return [x]*n\n"
"\n"
"\n"
"def print_capitalized[S: str](x: S) -> S:\n"
"    \"\"\"Print x capitalized, and return x.\"\"\"\n"
"    print(x.capitalize())\n"
"    return x\n"
"\n"
"\n"
"def concatenate[A: (str, bytes)](x: A, y: A) -> A:\n"
"    \"\"\"Add two strings or bytes objects together.\"\"\"\n"
"    return x + y"
msgstr ""
"def repeat[T](x: T, n: int) -> Sequence[T]:\n"
"    \"\"\"Return a list containing n references to x.\"\"\"\n"
"    return [x]*n\n"
"\n"
"\n"
"def print_capitalized[S: str](x: S) -> S:\n"
"    \"\"\"Print x capitalized, and return x.\"\"\"\n"
"    print(x.capitalize())\n"
"    return x\n"
"\n"
"\n"
"def concatenate[A: (str, bytes)](x: A, y: A) -> A:\n"
"    \"\"\"Add two strings or bytes objects together.\"\"\"\n"
"    return x + y"

#: ../../library/typing.rst:1800
msgid ""
"Note that type variables can be *bounded*, *constrained*, or neither, but "
"cannot be both bounded *and* constrained."
msgstr "请注意类型变量可以为 *已绑定*, *已约束*，或两者都不是，但不能同时为已绑定 *并且* 已约束。"

#: ../../library/typing.rst:1803
msgid ""
"The variance of type variables is inferred by type checkers when they are "
"created through the :ref:`type parameter syntax <type-params>` or when "
"``infer_variance=True`` is passed. Manually created type variables may be "
"explicitly marked covariant or contravariant by passing ``covariant=True`` "
"or ``contravariant=True``. By default, manually created type variables are "
"invariant. See :pep:`484` and :pep:`695` for more details."
msgstr ""
"类型变量的种类是在其通过 :ref:`类型形参语法 <type-params>` 创建时或是在传入 ``infer_variance=True`` "
"时由类型检查器推断得到的。 手动创建的类型变量可通过传入 ``covariant=True`` 或 ``contravariant=True`` "
"被显式地标记为协变或逆变。 在默认情况下，手动创建的类型变量为不变。 请参阅 :pep:`484` 和 :pep:`695` 了解更多细节。"

#: ../../library/typing.rst:1811
msgid ""
"Bounded type variables and constrained type variables have different "
"semantics in several important ways. Using a *bounded* type variable means "
"that the ``TypeVar`` will be solved using the most specific type possible::"
msgstr ""
"已绑定类型变量和已约束类型变量在一些重要的方面具有不同的语义。 使用 *已绑定* 类型变量意味着 ``TypeVar`` "
"将尽可能使用最专属的类型来解析::"

#: ../../library/typing.rst:1815
msgid ""
"x = print_capitalized('a string')\n"
"reveal_type(x)  # revealed type is str\n"
"\n"
"class StringSubclass(str):\n"
"    pass\n"
"\n"
"y = print_capitalized(StringSubclass('another string'))\n"
"reveal_type(y)  # revealed type is StringSubclass\n"
"\n"
"z = print_capitalized(45)  # error: int is not a subtype of str"
msgstr ""
"x = print_capitalized('a string')\n"
"reveal_type(x)  # 显示的类型是 str\n"
"\n"
"class StringSubclass(str):\n"
"    pass\n"
"\n"
"y = print_capitalized(StringSubclass('another string'))\n"
"reveal_type(y)  # 显示的类型是 StringSubclass\n"
"\n"
"z = print_capitalized(45)  # 错误：int 不是 str 的子类型"

#: ../../library/typing.rst:1826
msgid ""
"The upper bound of a type variable can be a concrete type, abstract type "
"(ABC or Protocol), or even a union of types::"
msgstr "类型变量的上层绑定可以是一个具体类型、抽象类型（ABC 或 Protocol），甚至是多个类型的联合::"

#: ../../library/typing.rst:1829
msgid ""
"# Can be anything with an __abs__ method\n"
"def print_abs[T: SupportsAbs](arg: T) -> None:\n"
"    print(\"Absolute value:\", abs(arg))\n"
"\n"
"U = TypeVar('U', bound=str|bytes)  # Can be any subtype of the union str|bytes\n"
"V = TypeVar('V', bound=SupportsAbs)  # Can be anything with an __abs__ method"
msgstr ""
"# 可以是任何具有 __abs__ 方法的内容\n"
"def print_abs[T: SupportsAbs](arg: T) -> None:\n"
"    print(\"Absolute value:\", abs(arg))\n"
"\n"
"U = TypeVar('U', bound=str|bytes)  # 可以是联合 str|bytes 的任何子类型\n"
"V = TypeVar('V', bound=SupportsAbs)  # 可以是任何具有 __abs__ 方法的内容"

#: ../../library/typing.rst:1838
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can"
" only ever be solved as being exactly one of the constraints given::"
msgstr "但是，如果使用 *约束* 类型变量，则意味着 ``TypeVar`` 只能被解析为恰好是给定的约束之一::"

#: ../../library/typing.rst:1841
msgid ""
"a = concatenate('one', 'two')\n"
"reveal_type(a)  # revealed type is str\n"
"\n"
"b = concatenate(StringSubclass('one'), StringSubclass('two'))\n"
"reveal_type(b)  # revealed type is str, despite StringSubclass being passed in\n"
"\n"
"c = concatenate('one', b'two')  # error: type variable 'A' can be either str or bytes in a function call, but not both"
msgstr ""
"a = concatenate('one', 'two')\n"
"reveal_type(a)  # 揭示的类型为 str\n"
"\n"
"b = concatenate(StringSubclass('one'), StringSubclass('two'))\n"
"reveal_type(b)  # 揭示的类型为 str，虽然传入的是 StringSubclass\n"
"\n"
"c = concatenate('one', b'two')  # 错误：在一个函数调用中类型变量 'A' 可以为 str 或 bytes，但不可同时使用"

#: ../../library/typing.rst:1849
msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr "在运行时，``isinstance(x, T)`` 将引发 :exc:`TypeError`。"

#: ../../library/typing.rst:1853
msgid "The name of the type variable."
msgstr "类型变量的名称。"

#: ../../library/typing.rst:1857
msgid "Whether the type var has been explicitly marked as covariant."
msgstr "类型变量是否已被显式地标记为 covariant。"

#: ../../library/typing.rst:1861
msgid "Whether the type var has been explicitly marked as contravariant."
msgstr "类型变量是否已被显式地标记为 contravariant。"

#: ../../library/typing.rst:1865
msgid ""
"Whether the type variable's variance should be inferred by type checkers."
msgstr "类型变量的种类是否应由类型检查器来推断。"

#: ../../library/typing.rst:1871
msgid "The upper bound of the type variable, if any."
msgstr "类型变量的上层绑定，如果有的话。"

#: ../../library/typing.rst:1875
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the bound is evaluated only when the attribute is accessed, not "
"when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""
"对于通过 :ref:`类型形参语法 <type-params>` 创建的类型变量，只有在属性被访问的时候才会对绑定求值，而不是在类型变量被创建的时候 "
"(参见 :ref:`lazy-evaluation`)。"

#: ../../library/typing.rst:1881
msgid ""
"An :term:`evaluate function` corresponding to the :attr:`~TypeVar.__bound__`"
" attribute. When called directly, this method supports only the "
":attr:`~annotationlib.Format.VALUE` format, which is equivalent to accessing"
" the :attr:`~TypeVar.__bound__` attribute directly, but the method object "
"can be passed to :func:`annotationlib.call_evaluate_function` to evaluate "
"the value in a different format."
msgstr ""

#: ../../library/typing.rst:1891
msgid "A tuple containing the constraints of the type variable, if any."
msgstr ""
"一个包含对类型变量的约束的元组，如果有的话。A tuple containing the constraints of the type "
"variable, if any."

#: ../../library/typing.rst:1895
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the constraints are evaluated only when the attribute is accessed,"
" not when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""
"对于通过 :ref:`类型形参语法 <type-params>` 创建的类型变量，只有在属性被访问的时候才会对约束求值，而不是在类型变量被创建的时候 "
"(参见 :ref:`lazy-evaluation`)。"

#: ../../library/typing.rst:1901
msgid ""
"An :term:`evaluate function` corresponding to the "
":attr:`~TypeVar.__constraints__` attribute. When called directly, this "
"method supports only the :attr:`~annotationlib.Format.VALUE` format, which "
"is equivalent to accessing the :attr:`~TypeVar.__constraints__` attribute "
"directly, but the method object can be passed to "
":func:`annotationlib.call_evaluate_function` to evaluate the value in a "
"different format."
msgstr ""

#: ../../library/typing.rst:1911
msgid ""
"The default value of the type variable, or :data:`typing.NoDefault` if it "
"has no default."
msgstr "类型变量的默认值，如果没有默认值，则为 :data:`typing.NoDefault`。"

#: ../../library/typing.rst:1918
msgid ""
"An :term:`evaluate function` corresponding to the "
":attr:`~TypeVar.__default__` attribute. When called directly, this method "
"supports only the :attr:`~annotationlib.Format.VALUE` format, which is "
"equivalent to accessing the :attr:`~TypeVar.__default__` attribute directly,"
" but the method object can be passed to "
":func:`annotationlib.call_evaluate_function` to evaluate the value in a "
"different format."
msgstr ""

#: ../../library/typing.rst:1928
msgid ""
"Return whether or not the type variable has a default value. This is "
"equivalent to checking whether :attr:`__default__` is not the "
":data:`typing.NoDefault` singleton, except that it does not force evaluation"
" of the :ref:`lazily evaluated <lazy-evaluation>` default value."
msgstr ""
"返回类型变量是否有默认值。它等价于检查 :attr:`__default__` 是否为 :data:`typing.NoDefault` "
"单例，但它不要求对 :ref:`惰性求值 <lazy-evaluation>` 的默认值求值。"

#: ../../library/typing.rst:1937
msgid ""
"Type variables can now be declared using the :ref:`type parameter <type-"
"params>` syntax introduced by :pep:`695`. The ``infer_variance`` parameter "
"was added."
msgstr ""
"类型变量现在可以通过使用 :pep:`695` 引入的 :ref:`类型形参 <type-params>` 语法来声明。 增加了 "
"``infer_variance`` 形参。"

#: ../../library/typing.rst:1943 ../../library/typing.rst:2092
#: ../../library/typing.rst:2204
msgid "Support for default values was added."
msgstr "增加了对默认值的支持。"

#: ../../library/typing.rst:1949
msgid ""
"Type variable tuple. A specialized form of :ref:`type variable <typevar>` "
"that enables *variadic* generics."
msgstr "类型变量元组。 一种启用了 *variadic* 泛型的专属 :ref:`类型变量 <typevar>` 形式。"

#: ../../library/typing.rst:1952
msgid ""
"Type variable tuples can be declared in :ref:`type parameter lists <type-"
"params>` using a single asterisk (``*``) before the name::"
msgstr "类型变量元组可以通过在 :ref:`类型形参列表 <type-params>` 中使用名称前的单个星号 (``*``) 来声明::"

#: ../../library/typing.rst:1955
msgid ""
"def move_first_element_to_last[T, *Ts](tup: tuple[T, *Ts]) -> tuple[*Ts, T]:\n"
"    return (*tup[1:], tup[0])"
msgstr ""
"def move_first_element_to_last[T, *Ts](tup: tuple[T, *Ts]) -> tuple[*Ts, T]:\n"
"    return (*tup[1:], tup[0])"

#: ../../library/typing.rst:1958
msgid "Or by explicitly invoking the ``TypeVarTuple`` constructor::"
msgstr "或者通过显式地唤起 ``TypeVarTuple`` 构造器::"

#: ../../library/typing.rst:1960
msgid ""
"T = TypeVar(\"T\")\n"
"Ts = TypeVarTuple(\"Ts\")\n"
"\n"
"def move_first_element_to_last(tup: tuple[T, *Ts]) -> tuple[*Ts, T]:\n"
"    return (*tup[1:], tup[0])"
msgstr ""
"T = TypeVar(\"T\")\n"
"Ts = TypeVarTuple(\"Ts\")\n"
"\n"
"def move_first_element_to_last(tup: tuple[T, *Ts]) -> tuple[*Ts, T]:\n"
"    return (*tup[1:], tup[0])"

#: ../../library/typing.rst:1966
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""
"一个普通类型变量将启用单个类型的形参化。 作为对比，一个类型变量元组通过将 *任意* 数量的类型变量封包在一个元组中来允许 *任意* 数量类型的形参化。"
" 例如::"

#: ../../library/typing.rst:1971
msgid ""
"# T is bound to int, Ts is bound to ()\n"
"# Return value is (1,), which has type tuple[int]\n"
"move_first_element_to_last(tup=(1,))\n"
"\n"
"# T is bound to int, Ts is bound to (str,)\n"
"# Return value is ('spam', 1), which has type tuple[str, int]\n"
"move_first_element_to_last(tup=(1, 'spam'))\n"
"\n"
"# T is bound to int, Ts is bound to (str, float)\n"
"# Return value is ('spam', 3.0, 1), which has type tuple[str, float, int]\n"
"move_first_element_to_last(tup=(1, 'spam', 3.0))\n"
"\n"
"# This fails to type check (and fails at runtime)\n"
"# because tuple[()] is not compatible with tuple[T, *Ts]\n"
"# (at least one element is required)\n"
"move_first_element_to_last(tup=())"
msgstr ""
"# T 绑定到 int，Ts 绑定到 ()\n"
"# 返回值为 (1,)，其类型为 tuple[int]\n"
"move_first_element_to_last(tup=(1,))\n"
"\n"
"# T 绑定到 int，Ts 绑定到 (str,)\n"
"# 返回值为 ('spam', 1)，其类型为 tuple[str, int]\n"
"move_first_element_to_last(tup=(1, 'spam'))\n"
"\n"
"# T 绑定到 int，Ts 绑定到 (str, float)\n"
"# 返回值为 ('spam', 3.0, 1)，其类型为 tuple[str, float, int]\n"
"move_first_element_to_last(tup=(1, 'spam', 3.0))\n"
"\n"
"# 这不能通过类型检查（并会在运行时执行失败）\n"
"# 因为 tuple[()] 与 tuple[T, *Ts] 不兼容\n"
"# （至少需要有一个元素）\n"
"move_first_element_to_last(tup=())"

#: ../../library/typing.rst:1988
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, T2, "
"...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""
"请注意解包运算符 ``*`` 在 ``tuple[T, *Ts]`` 中的使用。 在概念上，你可以将 ``Ts`` 当作一个由类型变量组成的元组 "
"``(T1, T2, ...)``。 那么 ``tuple[T, *Ts]`` 就将变为 ``tuple[T, *(T1, T2, "
"...)]``，这等价于 ``tuple[T, T1, T2, ...]``。 （请注意在旧版本 Python 中，你可能会看到改用 "
":data:`Unpack <Unpack>` 的写法，如 ``Unpack[Ts]``。）"

#: ../../library/typing.rst:1996
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr "类型变量元组 *总是* 要被解包。 这有助于区分类型变量元组和普通类型变量::"

#: ../../library/typing.rst:1999
msgid ""
"x: Ts          # Not valid\n"
"x: tuple[Ts]   # Not valid\n"
"x: tuple[*Ts]  # The correct way to do it"
msgstr ""
"x: Ts          # 不可用\n"
"x: tuple[Ts]   # 不可用\n"
"x: tuple[*Ts]  # 正确的做法"

#: ../../library/typing.rst:2003
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr "类型变量元组可被用在与普通类型变量相同的上下文中。 例如，在类定义、参数和返回类型中::"

#: ../../library/typing.rst:2006
msgid ""
"class Array[*Shape]:\n"
"    def __getitem__(self, key: tuple[*Shape]) -> float: ...\n"
"    def __abs__(self) -> \"Array[*Shape]\": ...\n"
"    def get_shape(self) -> tuple[*Shape]: ..."
msgstr ""
"class Array[*Shape]:\n"
"    def __getitem__(self, key: tuple[*Shape]) -> float: ...\n"
"    def __abs__(self) -> \"Array[*Shape]\": ...\n"
"    def get_shape(self) -> tuple[*Shape]: ..."

#: ../../library/typing.rst:2011
msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr "类型变量元组可以很好地与普通类型变量结合在一起："

#: ../../library/typing.rst:2013
msgid ""
"class Array[DType, *Shape]:  # This is fine\n"
"    pass\n"
"\n"
"class Array2[*Shape, DType]:  # This would also be fine\n"
"    pass\n"
"\n"
"class Height: ...\n"
"class Width: ...\n"
"\n"
"float_array_1d: Array[float, Height] = Array()     # Totally fine\n"
"int_array_2d: Array[int, Height, Width] = Array()  # Yup, fine too"
msgstr ""
"class Array[DType, *Shape]:  # 这样可以\n"
"    pass\n"
"\n"
"class Array2[*Shape, DType]:  # 这样也可以\n"
"    pass\n"
"\n"
"class Height: ...\n"
"class Width: ...\n"
"\n"
"float_array_1d: Array[float, Height] = Array()     # 完全可以\n"
"int_array_2d: Array[int, Height, Width] = Array()  # 是的，同样可以"

#: ../../library/typing.rst:2027
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr "但是，请注意在一个类型参数或类型形参列表中最多只能有一个类型变量元组::"

#: ../../library/typing.rst:2030
msgid ""
"x: tuple[*Ts, *Ts]            # Not valid\n"
"class Array[*Shape, *Shape]:  # Not valid\n"
"    pass"
msgstr ""
"x: tuple[*Ts, *Ts]            # 不可用\n"
"class Array[*Shape, *Shape]:  # 不可用\n"
"    pass"

#: ../../library/typing.rst:2034
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr "最后，一个已解包的类型变量元组可以被用作 ``*args`` 的类型标注::"

#: ../../library/typing.rst:2037
msgid ""
"def call_soon[*Ts](\n"
"    callback: Callable[[*Ts], None],\n"
"    *args: *Ts\n"
") -> None:\n"
"    ...\n"
"    callback(*args)"
msgstr ""
"def call_soon[*Ts](\n"
"    callback: Callable[[*Ts], None],\n"
"    *args: *Ts\n"
") -> None:\n"
"    ...\n"
"    callback(*args)"

#: ../../library/typing.rst:2044
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""
"相比非解包的 ``*args`` 标注 —— 例如 ``*args: int``，它将指明 *所有* 参数均为 ``int`` —— ``*args: "
"*Ts`` 启用了对 ``*args`` 中 *单个* 参数的类型的引用。 在此，这允许我们确保传入 ``call_soon`` 的 ``*args``"
" 的类型与 ``callback`` 的（位置）参数的类型相匹配。"

#: ../../library/typing.rst:2051
msgid "See :pep:`646` for more details on type variable tuples."
msgstr "关于类型变量元组的更多细节，请参见 :pep:`646`。"

#: ../../library/typing.rst:2055
msgid "The name of the type variable tuple."
msgstr "类型变量元组的名称。"

#: ../../library/typing.rst:2059
msgid ""
"The default value of the type variable tuple, or :data:`typing.NoDefault` if"
" it has no default."
msgstr "类型变量元组的默认值，如果没有默认值，则为 :data:`typing.NoDefault`。"

#: ../../library/typing.rst:2066
msgid ""
"An :term:`evaluate function` corresponding to the "
":attr:`~TypeVarTuple.__default__` attribute. When called directly, this "
"method supports only the :attr:`~annotationlib.Format.VALUE` format, which "
"is equivalent to accessing the :attr:`~TypeVarTuple.__default__` attribute "
"directly, but the method object can be passed to "
":func:`annotationlib.call_evaluate_function` to evaluate the value in a "
"different format."
msgstr ""

#: ../../library/typing.rst:2076
msgid ""
"Return whether or not the type variable tuple has a default value. This is "
"equivalent to checking whether :attr:`__default__` is not the "
":data:`typing.NoDefault` singleton, except that it does not force evaluation"
" of the :ref:`lazily evaluated <lazy-evaluation>` default value."
msgstr ""
"返回类型变量元组是否有默认值。它等价于检查 :attr:`__default__` 是否为 :data:`typing.NoDefault` "
"单例，但它不要求对 :ref:`惰性求值 <lazy-evaluation>` 的默认值求值。"

#: ../../library/typing.rst:2087
msgid ""
"Type variable tuples can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr "类型变量元组现在可以使用 :pep:`695` 所引入的 :ref:`类型形参 <type-params>` 语法来声明。"

#: ../../library/typing.rst:2096
msgid ""
"Parameter specification variable.  A specialized version of :ref:`type "
"variables <typevar>`."
msgstr "形参专属变量。 :ref:`类型变量 <typevar>` 的一个专用版本。"

#: ../../library/typing.rst:2099
msgid ""
"In :ref:`type parameter lists <type-params>`, parameter specifications can "
"be declared with two asterisks (``**``)::"
msgstr "In :ref:`类型形参列表 <type-params>`，形参规格可以使用两个星号 (``**``) 来声明::"

#: ../../library/typing.rst:2102
msgid "type IntFunc[**P] = Callable[P, int]"
msgstr "type IntFunc[**P] = Callable[P, int]"

#: ../../library/typing.rst:2104
msgid ""
"For compatibility with Python 3.11 and earlier, ``ParamSpec`` objects can "
"also be created as follows::"
msgstr "为了保持与 Python 3.11 及更早版本的兼容性，``ParamSpec`` 对象也可以这样创建::"

#: ../../library/typing.rst:2107
msgid "P = ParamSpec('P')"
msgstr "P = ParamSpec('P')"

#: ../../library/typing.rst:2109
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable"
" to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the"
" first argument to ``Callable``, or as parameters for user-defined Generics."
"  See :class:`Generic` for more information on generic types."
msgstr ""
"参数规范变量的存在主要是为了使静态类型检查器受益。 "
"它们被用来将一个可调用对象的参数类型转发给另一个可调用对象的参数类型——这种模式通常出现在高阶函数和装饰器中。 它们只有在 "
"``Concatenate`` 中使用时才有效，或者作为 ``Callable`` 的第一个参数，或者作为用户定义的泛型的参数。 参见 "
":class:`Generic` 以了解更多关于泛型的信息。"

#: ../../library/typing.rst:2116
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable"
" tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""
"例如，为了给一个函数添加基本的日志记录，我们可以创建一个装饰器 ``add_logging`` 来记录函数调用。 "
"参数规范变量告诉类型检查器，传入装饰器的可调用对象和由其返回的新可调用对象有相互依赖的类型参数::"

#: ../../library/typing.rst:2121
msgid ""
"from collections.abc import Callable\n"
"import logging\n"
"\n"
"def add_logging[T, **P](f: Callable[P, T]) -> Callable[P, T]:\n"
"    '''A type-safe decorator to add logging to a function.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n"
"        logging.info(f'{f.__name__} was called')\n"
"        return f(*args, **kwargs)\n"
"    return inner\n"
"\n"
"@add_logging\n"
"def add_two(x: float, y: float) -> float:\n"
"    '''Add two numbers together.'''\n"
"    return x + y"
msgstr ""
"from collections.abc import Callable\n"
"import logging\n"
"\n"
"def add_logging[T, **P](f: Callable[P, T]) -> Callable[P, T]:\n"
"    '''A type-safe decorator to add logging to a function.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n"
"        logging.info(f'{f.__name__} was called')\n"
"        return f(*args, **kwargs)\n"
"    return inner\n"
"\n"
"@add_logging\n"
"def add_two(x: float, y: float) -> float:\n"
"    '''Add two numbers together.'''\n"
"    return x + y"

#: ../../library/typing.rst:2136
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with upper bound ``Callable[..., Any]``.  However "
"this causes two problems:"
msgstr ""
"如果没有 ``ParamSpec``，之前标注这个的最简单方式是使用一个 :class:`TypeVar` 并附带上层绑定 "
"``Callable[..., Any]``。 不过这会导致两个问题："

#: ../../library/typing.rst:2140
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"类型检查器不能对 ``inner`` 函数进行类型检查，因为 ``*args`` 和 ``**kwargs`` 的类型必须是 :data:`Any`。"

#: ../../library/typing.rst:2142
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""
":func:`~cast` 在返回 ``inner`` 函数时，可能需要在 ``add_logging`` "
"装饰器的主体中进行，或者必须告诉静态类型检查器忽略 ``return inner``。"

#: ../../library/typing.rst:2149
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, "
"``P.args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and "
":class:`ParamSpecKwargs`."
msgstr ""
"由于 ``ParamSpec`` 同时捕获了位置参数和关键字参数，``P.args`` 和 ``P.kwargs`` 可以用来将 "
"``ParamSpec`` 分割成其组成部分。 ``P.args`` 代表给定调用中的位置参数的元组，只能用于注释 ``*args``。 "
"``P.kwargs`` 代表给定调用中的关键字参数到其值的映射，只能用于注释 ``**kwargs``。在运行时，``P.args`` 和 "
"``P.kwargs`` 分别是 :class:`ParamSpecArgs` 和 :class:`ParamSpecKwargs` 的实例。"

#: ../../library/typing.rst:2161
msgid "The name of the parameter specification."
msgstr "形参规格的名称。"

#: ../../library/typing.rst:2165
msgid ""
"The default value of the parameter specification, or "
":data:`typing.NoDefault` if it has no default."
msgstr "形参规格的默认值，如果没有默认值，则为 :data:`typing.NoDefault`。"

#: ../../library/typing.rst:2172
msgid ""
"An :term:`evaluate function` corresponding to the "
":attr:`~ParamSpec.__default__` attribute. When called directly, this method "
"supports only the :attr:`~annotationlib.Format.VALUE` format, which is "
"equivalent to accessing the :attr:`~ParamSpec.__default__` attribute "
"directly, but the method object can be passed to "
":func:`annotationlib.call_evaluate_function` to evaluate the value in a "
"different format."
msgstr ""

#: ../../library/typing.rst:2182
msgid ""
"Return whether or not the parameter specification has a default value. This "
"is equivalent to checking whether :attr:`__default__` is not the "
":data:`typing.NoDefault` singleton, except that it does not force evaluation"
" of the :ref:`lazily evaluated <lazy-evaluation>` default value."
msgstr ""
"返回形参规格是否有默认值。它等价于检查 :attr:`__default__` 是否为 :data:`typing.NoDefault` "
"单例，但它不要求对 :ref:`惰性求值 <lazy-evaluation>` 的默认值求值。"

#: ../../library/typing.rst:2189
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to "
":class:`TypeVar`.  However the actual semantics of these keywords are yet to"
" be decided."
msgstr ""
"用 ``covariant=True`` 或 ``contravariant=True`` 创建的参数规范变量可以用来声明协变或逆变泛型类型。 参数 "
"``bound`` 也被接受，类似于 :class:`TypeVar`。 然而这些关键字的实际语义还有待决定。"

#: ../../library/typing.rst:2199
msgid ""
"Parameter specifications can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr "形参说明现在可以使用 :pep:`695` 所引入的 :ref:`类型形参 <type-params>` 语法来声明。"

#: ../../library/typing.rst:2207
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr "只有在全局范围内定义的参数规范变量可以被 pickle。"

#: ../../library/typing.rst:2213
msgid ":data:`Concatenate`"
msgstr ":data:`Concatenate`"

#: ../../library/typing.rst:2219
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The "
"``P.args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``,"
" and ``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended "
"for runtime introspection and have no special meaning to static type "
"checkers."
msgstr ""
":class:`ParamSpec`的参数和关键字参数属性。``ParamSpec`` 的 ``P.args`` 属性是 "
"``ParamSpecArgs`` 的一个实例，``P.kwargs`` 是 ``ParamSpecKwargs`` 的一个实例。 "
"它们的目的是用于运行时内部检查的，对静态类型检查器没有特殊意义。"

#: ../../library/typing.rst:2224
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``:"
msgstr "在这些对象中的任何一个上调用 :func:`get_origin` 将返回原始的 ``ParamSpec``:"

#: ../../library/typing.rst:2227
msgid ""
">>> from typing import ParamSpec, get_origin\n"
">>> P = ParamSpec(\"P\")\n"
">>> get_origin(P.args) is P\n"
"True\n"
">>> get_origin(P.kwargs) is P\n"
"True"
msgstr ""
">>> from typing import ParamSpec, get_origin\n"
">>> P = ParamSpec(\"P\")\n"
">>> get_origin(P.args) is P\n"
"True\n"
">>> get_origin(P.kwargs) is P\n"
"True"

#: ../../library/typing.rst:2241
msgid ""
"The type of type aliases created through the :keyword:`type` statement."
msgstr "通过 :keyword:`type` 语句创建的类型别名的类型。"

#: ../../library/typing.rst:2245
msgid ""
">>> type Alias = int\n"
">>> type(Alias)\n"
"<class 'typing.TypeAliasType'>"
msgstr ""
">>> type Alias = int\n"
">>> type(Alias)\n"
"<class 'typing.TypeAliasType'>"

#: ../../library/typing.rst:2255
msgid "The name of the type alias:"
msgstr "类型别名的名称："

#: ../../library/typing.rst:2257
msgid ""
">>> type Alias = int\n"
">>> Alias.__name__\n"
"'Alias'"
msgstr ""
">>> type Alias = int\n"
">>> Alias.__name__\n"
"'Alias'"

#: ../../library/typing.rst:2265
msgid "The module in which the type alias was defined::"
msgstr "类型别名定义所在的模块名称::"

#: ../../library/typing.rst:2267
msgid ""
">>> type Alias = int\n"
">>> Alias.__module__\n"
"'__main__'"
msgstr ""
">>> type Alias = int\n"
">>> Alias.__module__\n"
"'__main__'"

#: ../../library/typing.rst:2273
msgid ""
"The type parameters of the type alias, or an empty tuple if the alias is not"
" generic:"
msgstr "类型别名的类型形参，或者如果别名不属于泛型则为一个空元组:"

#: ../../library/typing.rst:2276
msgid ""
">>> type ListOrSet[T] = list[T] | set[T]\n"
">>> ListOrSet.__type_params__\n"
"(T,)\n"
">>> type NotGeneric = int\n"
">>> NotGeneric.__type_params__\n"
"()"
msgstr ""
">>> type ListOrSet[T] = list[T] | set[T]\n"
">>> ListOrSet.__type_params__\n"
"(T,)\n"
">>> type NotGeneric = int\n"
">>> NotGeneric.__type_params__\n"
"()"

#: ../../library/typing.rst:2287
msgid ""
"The type alias's value. This is :ref:`lazily evaluated <lazy-evaluation>`, "
"so names used in the definition of the alias are not resolved until the "
"``__value__`` attribute is accessed:"
msgstr ""
"类型别名的值。 它将被 :ref:`惰性求值 <lazy-evaluation>`，因此别名定义中使用的名称将直到 ``__value__`` "
"属性被访问时才会被解析:"

#: ../../library/typing.rst:2291
msgid ""
">>> type Mutually = Recursive\n"
">>> type Recursive = Mutually\n"
">>> Mutually\n"
"Mutually\n"
">>> Recursive\n"
"Recursive\n"
">>> Mutually.__value__\n"
"Recursive\n"
">>> Recursive.__value__\n"
"Mutually"
msgstr ""
">>> type Mutually = Recursive\n"
">>> type Recursive = Mutually\n"
">>> Mutually\n"
"Mutually\n"
">>> Recursive\n"
"Recursive\n"
">>> Mutually.__value__\n"
"Recursive\n"
">>> Recursive.__value__\n"
"Mutually"

#: ../../library/typing.rst:2306
msgid ""
"An :term:`evaluate function` corresponding to the :attr:`__value__` "
"attribute. When called directly, this method supports only the "
":attr:`~annotationlib.Format.VALUE` format, which is equivalent to accessing"
" the :attr:`__value__` attribute directly, but the method object can be "
"passed to :func:`annotationlib.call_evaluate_function` to evaluate the value"
" in a different format:"
msgstr ""

#: ../../library/typing.rst:2312
msgid ""
">>> type Alias = undefined\n"
">>> Alias.__value__\n"
"Traceback (most recent call last):\n"
"...\n"
"NameError: name 'undefined' is not defined\n"
">>> from annotationlib import Format, call_evaluate_function\n"
">>> Alias.evaluate_value(Format.VALUE)\n"
"Traceback (most recent call last):\n"
"...\n"
"NameError: name 'undefined' is not defined\n"
">>> call_evaluate_function(Alias.evaluate_value, Format.FORWARDREF)\n"
"ForwardRef('undefined')"
msgstr ""

#: ../../library/typing.rst:2330
msgid "Unpacking"
msgstr "解压缩"

#: ../../library/typing.rst:2331
msgid ""
"Type aliases support star unpacking using the ``*Alias`` syntax. This is "
"equivalent to using ``Unpack[Alias]`` directly:"
msgstr ""

#: ../../library/typing.rst:2334
msgid ""
">>> type Alias = tuple[int, str]\n"
">>> type Unpacked = tuple[bool, *Alias]\n"
">>> Unpacked.__value__\n"
"tuple[bool, typing.Unpack[Alias]]"
msgstr ""

#: ../../library/typing.rst:2345
msgid "Other special directives"
msgstr "其他特殊指令"

#: ../../library/typing.rst:2347
msgid ""
"These functions and classes should not be used directly as annotations. "
"Their intended purpose is to be building blocks for creating and declaring "
"types."
msgstr "这些函数和类不应被直接用作标注。 它们的设计目标是作为创建和声明类型的构件。"

#: ../../library/typing.rst:2353
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ":func:`collections.namedtuple` 的类型版本。"

#: ../../library/typing.rst:2355 ../../library/typing.rst:2451
#: ../../library/typing.rst:3544
msgid "Usage::"
msgstr "用法："

#: ../../library/typing.rst:2357
msgid ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int"
msgstr ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int"

#: ../../library/typing.rst:2361
msgid "This is equivalent to::"
msgstr "这相当于："

#: ../../library/typing.rst:2363
msgid "Employee = collections.namedtuple('Employee', ['name', 'id'])"
msgstr "Employee = collections.namedtuple('Employee', ['name', 'id'])"

#: ../../library/typing.rst:2365
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr "为字段提供默认值，要在类体内赋值："

#: ../../library/typing.rst:2367
msgid ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"employee = Employee('Guido')\n"
"assert employee.id == 3"
msgstr ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"employee = Employee('Guido')\n"
"assert employee.id == 3"

#: ../../library/typing.rst:2374
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr "带默认值的字段必须在不带默认值的字段后面。"

#: ../../library/typing.rst:2376
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict"
" that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""
"由此产生的类有一个额外的属性 ``__annotations__`` ，给出一个 dict ，将字段名映射到字段类型。（字段名在 ``_fields``"
" 属性中，默认值在 ``_field_defaults`` 属性中，这两者都是 :func:`~collections.namedtuple` API "
"的一部分。）"

#: ../../library/typing.rst:2382
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "``NamedTuple`` 子类也支持文档字符串与方法："

#: ../../library/typing.rst:2384
msgid ""
"class Employee(NamedTuple):\n"
"    \"\"\"Represents an employee.\"\"\"\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"    def __repr__(self) -> str:\n"
"        return f'<Employee {self.name}, id={self.id}>'"
msgstr ""
"class Employee(NamedTuple):\n"
"    \"\"\"代表一位雇员。\"\"\"\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"    def __repr__(self) -> str:\n"
"        return f'<Employee {self.name}, id={self.id}>'"

#: ../../library/typing.rst:2392
msgid "``NamedTuple`` subclasses can be generic::"
msgstr "``NamedTuple`` 子类也可以为泛型："

#: ../../library/typing.rst:2394
msgid ""
"class Group[T](NamedTuple):\n"
"    key: T\n"
"    group: list[T]"
msgstr ""
"class Group[T](NamedTuple):\n"
"    key: T\n"
"    group: list[T]"

#: ../../library/typing.rst:2398
msgid "Backward-compatible usage::"
msgstr "反向兼容用法："

#: ../../library/typing.rst:2400
msgid ""
"# For creating a generic NamedTuple on Python 3.11\n"
"T = TypeVar(\"T\")\n"
"\n"
"class Group(NamedTuple, Generic[T]):\n"
"    key: T\n"
"    group: list[T]\n"
"\n"
"# A functional syntax is also supported\n"
"Employee = NamedTuple('Employee', [('name', str), ('id', int)])"
msgstr ""
"# 在 Python 3.11 上创建通用 NamedTuple\n"
"T = TypeVar(\"T\")\n"
"\n"
"class Group(NamedTuple, Generic[T]):\n"
"    key: T\n"
"    group: list[T]\n"
"\n"
"# 函数语法也支持\n"
"Employee = NamedTuple('Employee', [('name', str), ('id', int)])"

#: ../../library/typing.rst:2410
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr "添加了对 :pep:`526` 中变量注解句法的支持。"

#: ../../library/typing.rst:2413
msgid "Added support for default values, methods, and docstrings."
msgstr "添加了对默认值、方法、文档字符串的支持。"

#: ../../library/typing.rst:2416
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"``_field_types`` 和 ``__annotations__`` 属性现已使用常规字典，不再使用 ``OrderedDict`` 实例。"

#: ../../library/typing.rst:2420
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr "移除了 ``_field_types`` 属性， 改用具有相同信息，但更标准的  ``__annotations__`` 属性。"

#: ../../library/typing.rst:2424
msgid "Added support for generic namedtuples."
msgstr "添加对泛型命名元组的支持。"

#: ../../library/typing.rst:2427
msgid ""
"Using :func:`super` (and the ``__class__`` :term:`closure variable`) in "
"methods of ``NamedTuple`` subclasses is unsupported and causes a "
":class:`TypeError`."
msgstr ""

#: ../../library/typing.rst:2431
msgid ""
"The undocumented keyword argument syntax for creating NamedTuple classes "
"(``NT = NamedTuple(\"NT\", x=int)``) is deprecated, and will be disallowed "
"in 3.15. Use the class-based syntax or the functional syntax instead."
msgstr ""
"创建命名元组 NamedTuple 的关键字参数语法 (``NT = NamedTuple(\"NT\", x=int)``) "
"未被写入文档且已被弃用，它将在 3.15 中被禁止。使用基于类的语法或函数式语法作为替代。"

#: ../../library/typing.rst:2436
msgid ""
"When using the functional syntax to create a NamedTuple class, failing to "
"pass a value to the 'fields' parameter (``NT = NamedTuple(\"NT\")``) is "
"deprecated. Passing ``None`` to the 'fields' parameter (``NT = "
"NamedTuple(\"NT\", None)``) is also deprecated. Both will be disallowed in "
"Python 3.15. To create a NamedTuple class with 0 fields, use ``class "
"NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", [])``."
msgstr ""
"使用函数式语法创建 NamedTuple 类时，不向 'fields' 形参传值(``NT = NamedTuple(\"NT\")``) 或向 "
"'fields' 形参传递 ``None`` (``NT = NamedTuple(\"NT\", None)``) 的行为已被弃用，且在 Python"
" 3.15 中都将被禁止。要创建一个无字段的 NamedTuple 类，请使用 ``class NT(NamedTuple): pass`` 或 "
"``NT = NamedTuple(\"NT\", [])``。"

#: ../../library/typing.rst:2446
msgid "Helper class to create low-overhead :ref:`distinct types <distinct>`."
msgstr "用于创建低开销的 :ref:`独有类型 <distinct>` 的辅助类。"

#: ../../library/typing.rst:2448
msgid ""
"A ``NewType`` is considered a distinct type by a typechecker. At runtime, "
"however, calling a ``NewType`` returns its argument unchanged."
msgstr "``NewType`` 将被类型检查器视为一个独有类型。 但是，在运行时，调用 ``NewType`` 将原样返回其参数。"

#: ../../library/typing.rst:2453
msgid ""
"UserId = NewType('UserId', int)  # Declare the NewType \"UserId\"\n"
"first_user = UserId(1)  # \"UserId\" returns the argument unchanged at runtime"
msgstr ""
"UserId = NewType('UserId', int)  # 声明 NewType \"UserId\"\n"
"first_user = UserId(1)  # 在运行时 \"UserId\" 将原样返回参数"

#: ../../library/typing.rst:2458
msgid "The module in which the new type is defined."
msgstr "新类型定义所在的模块。"

#: ../../library/typing.rst:2462
msgid "The name of the new type."
msgstr "新类型的名称。"

#: ../../library/typing.rst:2466
msgid "The type that the new type is based on."
msgstr "新类型所基于的类型。"

#: ../../library/typing.rst:2470
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` 现在是一个类而不是函数。"

#: ../../library/typing.rst:2475
msgid "Base class for protocol classes."
msgstr "协议类的基类。"

#: ../../library/typing.rst:2477
msgid "Protocol classes are defined like this::"
msgstr "协议类是这样定义的::"

#: ../../library/typing.rst:2479
msgid ""
"class Proto(Protocol):\n"
"    def meth(self) -> int:\n"
"        ..."
msgstr ""
"class Proto(Protocol):\n"
"    def meth(self) -> int:\n"
"        ..."

#: ../../library/typing.rst:2483
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr "这些类主要与静态类型检查器搭配使用，用来识别结构子类型（静态鸭子类型），例如："

#: ../../library/typing.rst:2486
msgid ""
"class C:\n"
"    def meth(self) -> int:\n"
"        return 0\n"
"\n"
"def func(x: Proto) -> int:\n"
"    return x.meth()\n"
"\n"
"func(C())  # Passes static type check"
msgstr ""
"class C:\n"
"    def meth(self) -> int:\n"
"        return 0\n"
"\n"
"def func(x: Proto) -> int:\n"
"    return x.meth()\n"
"\n"
"func(C())  # 通过静态类型检查"

#: ../../library/typing.rst:2495
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with "
":func:`runtime_checkable` (described later) act as simple-minded runtime "
"protocols that check only the presence of given attributes, ignoring their "
"type signatures. Protocol classes without this decorator cannot be used as "
"the second argument to :func:`isinstance` or :func:`issubclass`."
msgstr ""
"请参阅 :pep:`544` 了解详情。 使用 :func:`runtime_checkable` "
"装饰的协议类（稍后介绍）将被用作只检查给定属性是否存在，而忽略其类型签名的简单运行时协议。 没有此装饰器的协议类不可被用作传给 "
":func:`isinstance` 或 :func:`issubclass` 的第二个参数。"

#: ../../library/typing.rst:2501
msgid "Protocol classes can be generic, for example::"
msgstr "Protocol 类可以是泛型，例如："

#: ../../library/typing.rst:2503
msgid ""
"class GenProto[T](Protocol):\n"
"    def meth(self) -> T:\n"
"        ..."
msgstr ""
"class GenProto[T](Protocol):\n"
"    def meth(self) -> T:\n"
"        ..."

#: ../../library/typing.rst:2507
msgid ""
"In code that needs to be compatible with Python 3.11 or older, generic "
"Protocols can be written as follows::"
msgstr "在需要兼容 Python 3.11 或更早版本的代码中，可以这样编写泛型协议::"

#: ../../library/typing.rst:2510
msgid ""
"T = TypeVar(\"T\")\n"
"\n"
"class GenProto(Protocol[T]):\n"
"    def meth(self) -> T:\n"
"        ..."
msgstr ""
"T = TypeVar(\"T\")\n"
"\n"
"class GenProto(Protocol[T]):\n"
"    def meth(self) -> T:\n"
"        ..."

#: ../../library/typing.rst:2520
msgid "Mark a protocol class as a runtime protocol."
msgstr "用于把 Protocol 类标记为运行时协议。"

#: ../../library/typing.rst:2522
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as "
":class:`~collections.abc.Iterable`.  For example::"
msgstr ""
"这样的协议可以配合 :func:`isinstance` 和 :func:`issubclass` 使用。 这允许简单的结构化检查，非常类似于 "
":mod:`collections.abc` 中 :class:`~collections.abc.Iterable` 这样特别擅长做一件事的对象。 "
"例如::"

#: ../../library/typing.rst:2526
msgid ""
"@runtime_checkable\n"
"class Closable(Protocol):\n"
"    def close(self): ...\n"
"\n"
"assert isinstance(open('/some/file'), Closable)\n"
"\n"
"@runtime_checkable\n"
"class Named(Protocol):\n"
"    name: str\n"
"\n"
"import threading\n"
"assert isinstance(threading.Thread(name='Bob'), Named)"
msgstr ""
"@runtime_checkable\n"
"class Closable(Protocol):\n"
"    def close(self): ...\n"
"\n"
"assert isinstance(open('/some/file'), Closable)\n"
"\n"
"@runtime_checkable\n"
"class Named(Protocol):\n"
"    name: str\n"
"\n"
"import threading\n"
"assert isinstance(threading.Thread(name='Bob'), Named)"

#: ../../library/typing.rst:2539
msgid ""
"This decorator raises :exc:`TypeError` when applied to a non-protocol class."
msgstr "当应用于非协议类时此装饰器将引发 :exc:`TypeError`。"

#: ../../library/typing.rst:2543
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, "
":class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass`"
" check against :ref:`Callable <annotating-callables>`. However, the "
"``ssl.SSLObject.__init__`` method exists only to raise a :exc:`TypeError` "
"with a more informative message, therefore making it impossible to call "
"(instantiate) :class:`ssl.SSLObject`."
msgstr ""
":func:`!runtime_checkable` 将只检查所需方法或属性是否存在，而不检查它们的类型签名或类型。 "
"例如，:class:`ssl.SSLObject` 是一个类，因此它通过了针对 :ref:`Callable <annotating-"
"callables>` 的 :func:`issubclass` 检查。 但是，``ssl.SSLObject.__init__`` 方法的存在只是引发"
" :exc:`TypeError` 并附带更具信息量的消息，因此它无法调用 (实例化) :class:`ssl.SSLObject`。"

#: ../../library/typing.rst:2554
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""
"针对运行时可检查协议的 :func:`isinstance` 检查相比针对非协议类的 ``isinstance()`` 检查可能会惊人的缓慢。 "
"请考虑在性能敏感的代码中使用替代性写法如 :func:`hasattr` 调用进行结构检查。"

#: ../../library/typing.rst:2562
msgid ""
"The internal implementation of :func:`isinstance` checks against runtime-"
"checkable protocols now uses :func:`inspect.getattr_static` to look up "
"attributes (previously, :func:`hasattr` was used). As a result, some objects"
" which used to be considered instances of a runtime-checkable protocol may "
"no longer be considered instances of that protocol on Python 3.12+, and vice"
" versa. Most users are unlikely to be affected by this change."
msgstr ""
"现在 :func:`isinstance` 的内部实现对于运行时可检查协议的检查会使用 :func:`inspect.getattr_static` "
"来查找属性 (在之前版本中，会使用 :func:`hasattr`)。 因此，在 Python 3.12+ "
"上一些以前被认为是运行时可检查协议的实例的对象可能不再被认为是该协议的实例，反之亦反。 大多数用户不太可能受到这一变化的影响。"

#: ../../library/typing.rst:2571
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at"
" runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. See "
":ref:`\"What's new in Python 3.12\" <whatsnew-typing-py312>` for more "
"details."
msgstr ""
"一旦类被创建则运行时可检查协议的成员就会被视为在运行时“已冻结”。 在运行时可检查协议上打上猴子补丁属性仍然有效，但不会影响将对象与协议进行比较的 "
":func:`isinstance` 检查。 请参阅 :ref:`\"Python 3.12 有什么新变化 <whatsnew-typing-"
"py312>` 了解更多细节。"

#: ../../library/typing.rst:2582
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr "把类型提示添加至字典的特殊构造器。在运行时，它是纯 :class:`dict`。"

#: ../../library/typing.rst:2585
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` "
"声明一个字典类型，该类型预期所有实例都具有一组键集，其中，每个键都与对应类型的值关联。运行时不检查此预期，而是由类型检查器强制执行。用法如下："

#: ../../library/typing.rst:2591
msgid ""
"class Point2D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    label: str\n"
"\n"
"a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n"
"b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n"
"\n"
"assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')"
msgstr ""
"class Point2D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    label: str\n"
"\n"
"a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # 可以\n"
"b: Point2D = {'z': 3, 'label': 'bad'}           # 不能通过类型检查\n"
"\n"
"assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')"

#: ../../library/typing.rst:2601
msgid ""
"An alternative way to create a ``TypedDict`` is by using function-call "
"syntax. The second argument must be a literal :class:`dict`::"
msgstr "另一种创建 ``TypedDict`` 的方法是使用函数调用语法。第二个参数必须是一个 :class:`dict` 字面值："

#: ../../library/typing.rst:2604
msgid "Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})"
msgstr "Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})"

#: ../../library/typing.rst:2606
msgid ""
"This functional syntax allows defining keys which are not valid "
":ref:`identifiers <identifiers>`, for example because they are keywords or "
"contain hyphens, or when key names must not be :ref:`mangled <private-name-"
"mangling>` like regular private names::"
msgstr ""
"这种函数式语法允许定义不是合法 :ref:`标识符 <identifiers>` 的键，例如关键字或包含连字符，或者当键名不可被 :ref:`并入 "
"<private-name-mangling>` 像是常规私有名称等::"

#: ../../library/typing.rst:2611
msgid ""
"# raises SyntaxError\n"
"class Point2D(TypedDict):\n"
"    in: int  # 'in' is a keyword\n"
"    x-y: int  # name with hyphens\n"
"\n"
"class Definition(TypedDict):\n"
"    __schema: str  # mangled to `_Definition__schema`\n"
"\n"
"# OK, functional syntax\n"
"Point2D = TypedDict('Point2D', {'in': int, 'x-y': int})\n"
"Definition = TypedDict('Definition', {'__schema': str})  # not mangled"
msgstr ""
"# 引发 SyntaxError\n"
"class Point2D(TypedDict):\n"
"    in: int  # 'in' 是关键字\n"
"    x-y: int  # 名称中有连字符\n"
"\n"
"class Definition(TypedDict):\n"
"    __schema: str  # 并入 `_Definition__schema`\n"
"\n"
"# 可以，函数式语法\n"
"Point2D = TypedDict('Point2D', {'in': int, 'x-y': int})\n"
"Definition = TypedDict('Definition', {'__schema': str})  # 未并入"

#: ../../library/typing.rst:2623
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""
"默认情况下，所有的键都必须出现在一个 ``TypedDict`` 中。 可以使用 :data:`NotRequired` 将单独的键标记为非必要的::"

#: ../../library/typing.rst:2626
msgid ""
"class Point2D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    label: NotRequired[str]\n"
"\n"
"# Alternative syntax\n"
"Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': NotRequired[str]})"
msgstr ""
"class Point2D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    label: NotRequired[str]\n"
"\n"
"# 替代语法\n"
"Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': NotRequired[str]})"

#: ../../library/typing.rst:2634
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr "这意味着一个 ``Point2D`` ``TypedDict`` 可以省略 ``label`` 键。"

#: ../../library/typing.rst:2637
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr "也可以通过全部指定 ``False`` 将所有键都标记为默认非必要的::"

#: ../../library/typing.rst:2640
msgid ""
"class Point2D(TypedDict, total=False):\n"
"    x: int\n"
"    y: int\n"
"\n"
"# Alternative syntax\n"
"Point2D = TypedDict('Point2D', {'x': int, 'y': int}, total=False)"
msgstr ""
"class Point2D(TypedDict, total=False):\n"
"    x: int\n"
"    y: int\n"
"\n"
"# 替代语法\n"
"Point2D = TypedDict('Point2D', {'x': int, 'y': int}, total=False)"

#: ../../library/typing.rst:2647
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""
"这意味着一个 ``Point2D`` ``TypedDict`` 可以省略任何一个键。 类型检查器只需要支持一个字面的 ``False`` 或 "
"``True`` 作为 ``total`` 参数的值。 ``True`` 是默认的，它使类主体中定义的所有项目都是必需的。"

#: ../../library/typing.rst:2652
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required"
" using :data:`Required`::"
msgstr "一个 ``total=False`` ``TypedDict`` 中单独的键可以使用 :data:`Required` 标记为必要的::"

#: ../../library/typing.rst:2655
msgid ""
"class Point2D(TypedDict, total=False):\n"
"    x: Required[int]\n"
"    y: Required[int]\n"
"    label: str\n"
"\n"
"# Alternative syntax\n"
"Point2D = TypedDict('Point2D', {\n"
"    'x': Required[int],\n"
"    'y': Required[int],\n"
"    'label': str\n"
"}, total=False)"
msgstr ""
"class Point2D(TypedDict, total=False):\n"
"    x: Required[int]\n"
"    y: Required[int]\n"
"    label: str\n"
"\n"
"# 替代语法\n"
"Point2D = TypedDict('Point2D', {\n"
"    'x': Required[int],\n"
"    'y': Required[int],\n"
"    'label': str\n"
"}, total=False)"

#: ../../library/typing.rst:2667
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr "一个 ``TypedDict`` 类型有可能使用基于类的语法从一个或多个其他 ``TypedDict`` 类型继承。用法::"

#: ../../library/typing.rst:2671
msgid ""
"class Point3D(Point2D):\n"
"    z: int"
msgstr ""
"class Point3D(Point2D):\n"
"    z: int"

#: ../../library/typing.rst:2674
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr "``Point3D`` 有三个项目 : ``x`` , ``y`` 和 ``z`` 。 其等价于定义::"

#: ../../library/typing.rst:2677
msgid ""
"class Point3D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    z: int"
msgstr ""
"class Point3D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    z: int"

#: ../../library/typing.rst:2682
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except for"
" :class:`Generic`. For example::"
msgstr "``TypedDict`` 不能从非 ``TypedDict`` 类继承，除了 :class:`Generic`。 例如::"

#: ../../library/typing.rst:2685
msgid ""
"class X(TypedDict):\n"
"    x: int\n"
"\n"
"class Y(TypedDict):\n"
"    y: int\n"
"\n"
"class Z(object): pass  # A non-TypedDict class\n"
"\n"
"class XY(X, Y): pass  # OK\n"
"\n"
"class XZ(X, Z): pass  # raises TypeError"
msgstr ""
"class X(TypedDict):\n"
"    x: int\n"
"\n"
"class Y(TypedDict):\n"
"    y: int\n"
"\n"
"class Z(object): pass  # 非 TypedDict 类\n"
"\n"
"class XY(X, Y): pass  # 可以\n"
"\n"
"class XZ(X, Z): pass  # 引发 TypeError"

#: ../../library/typing.rst:2697
msgid "A ``TypedDict`` can be generic::"
msgstr "``TypedDict`` 也可以为泛型的："

#: ../../library/typing.rst:2699
msgid ""
"class Group[T](TypedDict):\n"
"    key: T\n"
"    group: list[T]"
msgstr ""
"class Group[T](TypedDict):\n"
"    key: T\n"
"    group: list[T]"

#: ../../library/typing.rst:2703
msgid ""
"To create a generic ``TypedDict`` that is compatible with Python 3.11 or "
"lower, inherit from :class:`Generic` explicitly:"
msgstr "要创建与 Python 3.11 或更低版本兼容的泛型 ``TypedDict``，请显式地从 :class:`Generic` 继承："

#: ../../library/typing.rst:2706
msgid ""
"T = TypeVar(\"T\")\n"
"\n"
"class Group(TypedDict, Generic[T]):\n"
"    key: T\n"
"    group: list[T]"
msgstr ""
"T = TypeVar(\"T\")\n"
"\n"
"class Group(TypedDict, Generic[T]):\n"
"    key: T\n"
"    group: list[T]"

#: ../../library/typing.rst:2714
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see "
":ref:`annotations-howto` for more information on annotations best "
"practices), :attr:`__total__`, :attr:`__required_keys__`, and "
":attr:`__optional_keys__`."
msgstr ""
"``TypedDict`` 可以通过注解字典（参见 :ref:`annotations-howto` 了解更多关于注解的最佳实践）、 "
":attr:`__total__` 、 :attr:`__required_keys__` 和 :attr:`__optional_keys__` "
"进行内省。"

#: ../../library/typing.rst:2720
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr "``Point2D.__total__`` 给出了 ``total`` 参数的值。 例如："

#: ../../library/typing.rst:2723
msgid ""
">>> from typing import TypedDict\n"
">>> class Point2D(TypedDict): pass\n"
">>> Point2D.__total__\n"
"True\n"
">>> class Point2D(TypedDict, total=False): pass\n"
">>> Point2D.__total__\n"
"False\n"
">>> class Point3D(Point2D): pass\n"
">>> Point3D.__total__\n"
"True"
msgstr ""
">>> from typing import TypedDict\n"
">>> class Point2D(TypedDict): pass\n"
">>> Point2D.__total__\n"
"True\n"
">>> class Point2D(TypedDict, total=False): pass\n"
">>> Point2D.__total__\n"
"False\n"
">>> class Point3D(Point2D): pass\n"
">>> Point3D.__total__\n"
"True"

#: ../../library/typing.rst:2736
msgid ""
"This attribute reflects *only* the value of the ``total`` argument to the "
"current ``TypedDict`` class, not whether the class is semantically total. "
"For example, a ``TypedDict`` with ``__total__`` set to ``True`` may have "
"keys marked with :data:`NotRequired`, or it may inherit from another "
"``TypedDict`` with ``total=False``. Therefore, it is generally better to use"
" :attr:`__required_keys__` and :attr:`__optional_keys__` for introspection."
msgstr ""
"该属性 *只* 反映传给当前 ``TypedDict`` 类的 ``total`` 参数的值，而不反映这个类在语义上是否完整。 例如，一个 "
"``__total__`` 被设为 ``True`` 的 ``TypedDict`` 可能有用 :data:`NotRequired` "
"标记的键，或者它可能继承自另一个设置了 ``total=False`` 的 ``TypedDict``。 因此，使用 "
":attr:`__required_keys__` 和 :attr:`__optional_keys__` 进行内省通常会更好。"

#: ../../library/typing.rst:2749
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return "
":class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""
"``Point2D.__required_keys__`` 和 ``Point2D.__optional_keys__`` "
"返回分别包含必要的和非必要的键的 :class:`frozenset` 对象。"

#: ../../library/typing.rst:2752
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""
"标记为 :data:`Required` 的键总是会出现在 ``__required_keys__`` 中而标记为 "
":data:`NotRequired` 的键总是会出现在 ``__optional_keys__`` 中。"

#: ../../library/typing.rst:2755
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""
"为了向下兼容 Python 3.10 及更老的版本，还可以使用继承机制在同一个 ``TypedDict`` 中同时声明必要和非必要的键。 "
"这是通过声明一个具有 ``total`` 参数值的 ``TypedDict`` 然后在另一个 ``TypedDict`` 中继承它并使用不同的 "
"``total`` 值来实现的："

#: ../../library/typing.rst:2762
msgid ""
">>> class Point2D(TypedDict, total=False):\n"
"...     x: int\n"
"...     y: int\n"
"...\n"
">>> class Point3D(Point2D):\n"
"...     z: int\n"
"...\n"
">>> Point3D.__required_keys__ == frozenset({'z'})\n"
"True\n"
">>> Point3D.__optional_keys__ == frozenset({'x', 'y'})\n"
"True"
msgstr ""
">>> class Point2D(TypedDict, total=False):\n"
"...     x: int\n"
"...     y: int\n"
"...\n"
">>> class Point3D(Point2D):\n"
"...     z: int\n"
"...\n"
">>> Point3D.__required_keys__ == frozenset({'z'})\n"
"True\n"
">>> Point3D.__optional_keys__ == frozenset({'x', 'y'})\n"
"True"

#: ../../library/typing.rst:2780
msgid ""
"If ``from __future__ import annotations`` is used or if annotations are "
"given as strings, annotations are not evaluated when the ``TypedDict`` is "
"defined. Therefore, the runtime introspection that ``__required_keys__`` and"
" ``__optional_keys__`` rely on may not work properly, and the values of the "
"attributes may be incorrect."
msgstr ""
"如果使用了 ``from __future__ import annotations`` 或者如果以字符串形式给出标注，那么标注不会在定义 "
"``TypedDict`` 时被求值。 因此，``__required_keys__`` 和 ``__optional_keys__`` "
"所依赖的运行时内省可能无法正常工作，这些属性的值也可能不正确。"

#: ../../library/typing.rst:2786
msgid "Support for :data:`ReadOnly` is reflected in the following attributes:"
msgstr "对 :data:`ReadOnly` 的支持反映在下列属性中："

#: ../../library/typing.rst:2790
msgid ""
"A :class:`frozenset` containing the names of all read-only keys. Keys are "
"read-only if they carry the :data:`ReadOnly` qualifier."
msgstr ""
"一个包含所有只读键名称的 :class:`frozenset`。\n"
"带有 :data:`ReadOnly` 限定符的键被认为是只读的。"

#: ../../library/typing.rst:2797
msgid ""
"A :class:`frozenset` containing the names of all mutable keys. Keys are "
"mutable if they do not carry the :data:`ReadOnly` qualifier."
msgstr ""
"一个包含所有可变键名称的 :class:`frozenset`。\n"
"不带有 :data:`ReadOnly` 限定符的键被认为是可变的。"

#: ../../library/typing.rst:2802
msgid ""
"See the `TypedDict "
"<https://typing.python.org/en/latest/spec/typeddict.html#typeddict>`_ "
"section in the typing documentation for more examples and detailed rules."
msgstr ""

#: ../../library/typing.rst:2806
msgid ""
"Added support for marking individual keys as :data:`Required` or "
":data:`NotRequired`. See :pep:`655`."
msgstr ""
"增加了对将单独的键标记为 :data:`Required` 或 :data:`NotRequired` 的支持。 参见 :pep:`655`。"

#: ../../library/typing.rst:2810
msgid "Added support for generic ``TypedDict``\\ s."
msgstr "添加对泛型 ``TypedDict`` 的支持。"

#: ../../library/typing.rst:2813
msgid ""
"Removed support for the keyword-argument method of creating ``TypedDict``\\ "
"s."
msgstr "移除了对使用关键字参数方法创建 ``TypedDict`` 的支持。"

#: ../../library/typing.rst:2816
msgid "Support for the :data:`ReadOnly` qualifier was added."
msgstr "添加了对 :data:`ReadOnly` 限定符的支持。"

#: ../../library/typing.rst:2819
msgid ""
"When using the functional syntax to create a TypedDict class, failing to "
"pass a value to the 'fields' parameter (``TD = TypedDict(\"TD\")``) is "
"deprecated. Passing ``None`` to the 'fields' parameter (``TD = "
"TypedDict(\"TD\", None)``) is also deprecated. Both will be disallowed in "
"Python 3.15. To create a TypedDict class with 0 fields, use ``class "
"TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``."
msgstr ""
"使用函数式语法创建 TypedDict 类时，不向 'fields' 形参传值(``TD = TypedDict(\"TD\")``) 或向 "
"'fields' 形参传递 ``None`` (``TD = TypedDict (\"TD\", None)``) 的行为已被弃用，且在 Python"
" 3.15 中都将被禁止。要创建一个无字段的 TypedDict 类，请使用 ``class TD(TypedDict ): pass`` 或 ``TD"
" = TypedDict (\"TD\", {})``。"

#: ../../library/typing.rst:2828
msgid "Protocols"
msgstr "协议"

#: ../../library/typing.rst:2830
msgid ""
"The following protocols are provided by the :mod:`!typing` module. All are "
"decorated with :func:`@runtime_checkable <runtime_checkable>`."
msgstr ""
"下列协议由 :mod:`!typing` 模块提供。 它们全都使用 :func:`@runtime_checkable "
"<runtime_checkable>` 装饰器。"

#: ../../library/typing.rst:2835
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr "一个抽象基类，含一个抽象方法 ``__abs__``，该方法与其返回类型协变。"

#: ../../library/typing.rst:2840
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "一个抽象基类，含一个抽象方法 ``__bytes__``。"

#: ../../library/typing.rst:2844
msgid "An ABC with one abstract method ``__complex__``."
msgstr "一个抽象基类，含一个抽象方法 ``__complex__``。"

#: ../../library/typing.rst:2848
msgid "An ABC with one abstract method ``__float__``."
msgstr "一个抽象基类，含一个抽象方法 ``__float__``。"

#: ../../library/typing.rst:2852
msgid "An ABC with one abstract method ``__index__``."
msgstr "一个抽象基类，含一个抽象方法 ``__index__``。"

#: ../../library/typing.rst:2858
msgid "An ABC with one abstract method ``__int__``."
msgstr "一个抽象基类，含一个抽象方法 ``__int__``。"

#: ../../library/typing.rst:2862
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr "一个抽象基类，含一个抽象方法 ``__round__``，该方法与其返回类型协变。"

#: ../../library/typing.rst:2868
msgid "ABCs and Protocols for working with I/O"
msgstr ""

#: ../../library/typing.rst:2874
msgid ""
"Generic class ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`. Please note that these classes are not protocols, and their"
" interface is fairly broad."
msgstr ""

#: ../../library/typing.rst:2880
msgid ""
"The protocols :class:`io.Reader` and :class:`io.Writer` offer a simpler "
"alternative for argument types, when only the ``read()`` or ``write()`` "
"methods are accessed, respectively::"
msgstr ""

#: ../../library/typing.rst:2884
msgid ""
"def read_and_write(reader: Reader[str], writer: Writer[bytes]):\n"
"    data = reader.read()\n"
"    writer.write(data.encode())"
msgstr ""

#: ../../library/typing.rst:2888
msgid ""
"Also consider using :class:`collections.abc.Iterable` for iterating over the"
" lines of an input stream::"
msgstr ""

#: ../../library/typing.rst:2891
msgid ""
"def read_config(stream: Iterable[str]):\n"
"    for line in stream:\n"
"        ..."
msgstr ""

#: ../../library/typing.rst:2896
msgid "Functions and decorators"
msgstr "函数与装饰器"

#: ../../library/typing.rst:2900
msgid "Cast a value to a type."
msgstr "把一个值转换为指定的类型。"

#: ../../library/typing.rst:2902
msgid ""
"This returns the value unchanged.  To the type checker this signals that the"
" return value has the designated type, but at runtime we intentionally don't"
" check anything (we want this to be as fast as possible)."
msgstr "这会把值原样返回。对类型检查器而言这代表了返回值具有指定的类型，在运行时我们故意没有设计任何检查（我们希望让这尽量快）。"

#: ../../library/typing.rst:2909
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr "让静态类型检查器确认 *val* 具有推断为 *typ* 的类型。"

#: ../../library/typing.rst:2911
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr "在运行时这将不做任何事：它会原样返回第一个参数而没有任何检查或附带影响，无论参数的实际类型是什么。"

#: ../../library/typing.rst:2914
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr "当静态类型检查器遇到对 ``assert_type()`` 的调用时，如果该值不是指定的类型则会报错::"

#: ../../library/typing.rst:2917
msgid ""
"def greet(name: str) -> None:\n"
"    assert_type(name, str)  # OK, inferred type of `name` is `str`\n"
"    assert_type(name, int)  # type checker error"
msgstr ""
"def greet(name: str) -> None:\n"
"    assert_type(name, str)  # OK，推断 `name` 的类型是 `str`\n"
"    assert_type(name, int)  # 类型检查器错误"

#: ../../library/typing.rst:2921
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr "此函数适用于确保类型检查器对脚本的理解符合开发者的意图::"

#: ../../library/typing.rst:2924
msgid ""
"def complex_function(arg: object):\n"
"    # Do some complex type-narrowing logic,\n"
"    # after which we hope the inferred type will be `int`\n"
"    ...\n"
"    # Test whether the type checker correctly understands our function\n"
"    assert_type(arg, int)"
msgstr ""
"def complex_function(arg: object):\n"
"    # 执行某些复杂的类型细化逻辑，\n"
"    # 在此之后我们希望推断出的类型为 `int`\n"
"    ...\n"
"    # 测试类型检查器能否正确理解我们的函数\n"
"    assert_type(arg, int)"

#: ../../library/typing.rst:2935
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr "让静态类型检查器确认一行代码是不可达的。"

#: ../../library/typing.rst:2937
msgid "Example::"
msgstr "示例："

#: ../../library/typing.rst:2939
msgid ""
"def int_or_str(arg: int | str) -> None:\n"
"    match arg:\n"
"        case int():\n"
"            print(\"It's an int\")\n"
"        case str():\n"
"            print(\"It's a str\")\n"
"        case _ as unreachable:\n"
"            assert_never(unreachable)"
msgstr ""
"def int_or_str(arg: int | str) -> None:\n"
"    match arg:\n"
"        case int():\n"
"            print(\"It's an int\")\n"
"        case str():\n"
"            print(\"It's a str\")\n"
"        case _ as unreachable:\n"
"            assert_never(unreachable)"

#: ../../library/typing.rst:2948
msgid ""
"Here, the annotations allow the type checker to infer that the last case can"
" never execute, because ``arg`` is either an :class:`int` or a :class:`str`,"
" and both options are covered by earlier cases."
msgstr ""
"在这里，标注允许类型检查器推断最后一种情况永远不会执行，因为 ``arg`` 要么是 :class:`int` 要么是 "
":class:`str`，而这两种选项都已被之前的情况覆盖了。"

#: ../../library/typing.rst:2953
msgid ""
"If a type checker finds that a call to ``assert_never()`` is reachable, it "
"will emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error pointing"
" out that ``unreachable`` is of type :class:`float`. For a call to "
"``assert_never`` to pass type checking, the inferred type of the argument "
"passed in must be the bottom type, :data:`Never`, and nothing else."
msgstr ""
"如果类型检查器发现对 ``assert_never()`` 的调用是可达的，它将报告一个错误。 举例来说，如果 ``arg`` 的类型标注改为 "
"``int | str | float``，则类型检查器将报告一个错误指出 ``unreachable`` 为 :class:`float` 类型。 "
"对于通过类型检查的 ``assert_never`` 调用，参数传入的推断类型必须为兜底类型 :data:`Never`，而不能为任何其他类型。"

#: ../../library/typing.rst:2961
msgid "At runtime, this throws an exception when called."
msgstr "在运行时，如果调用此函数将抛出一个异常。"

#: ../../library/typing.rst:2964
msgid ""
"`Unreachable Code and Exhaustiveness Checking "
"<https://typing.python.org/en/latest/guides/unreachable.html>`__ has more "
"information about exhaustiveness checking with static typing."
msgstr ""
"`Unreachable Code and Exhaustiveness Checking "
"<https://typing.python.org/en/latest/guides/unreachable.html>`__ "
"提供了更多有关表达类型穷举检查的信息。"

#: ../../library/typing.rst:2972
msgid ""
"Ask a static type checker to reveal the inferred type of an expression."
msgstr "让静态类型检查器显示推测的表达式类型。"

#: ../../library/typing.rst:2974
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the inferred type of the argument. For example::"
msgstr "当静态类型检查器遇到一个对此函数的调用时，它将发出带有所推测参数类型的诊断信息。 例如::"

#: ../../library/typing.rst:2977
msgid ""
"x: int = 1\n"
"reveal_type(x)  # Revealed type is \"builtins.int\""
msgstr ""
"x: int = 1\n"
"reveal_type(x)  # 揭示的类型为 \"builtins.int\""

#: ../../library/typing.rst:2980
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr "这在你想要调试你的类型检查器如何处理一段特定代码时很有用处。"

#: ../../library/typing.rst:2983
msgid ""
"At runtime, this function prints the runtime type of its argument to "
":data:`sys.stderr` and returns the argument unchanged (allowing the call to "
"be used within an expression)::"
msgstr "在运行时，此函数会将其参数类型打印到 :data:`sys.stderr` 并不加修改地返回该参数 (以允许该调用在表达式中使用)::"

#: ../../library/typing.rst:2987
msgid ""
"x = reveal_type(1)  # prints \"Runtime type is int\"\n"
"print(x)  # prints \"1\""
msgstr ""
"x = reveal_type(1)  # 打印 \"Runtime type is int\"\n"
"print(x)  # 打印 \"1\""

#: ../../library/typing.rst:2990
msgid ""
"Note that the runtime type may be different from (more or less specific "
"than) the type statically inferred by a type checker."
msgstr "请注意在运行时类型可能不同于类型静态检查器所推测的类型（明确程度可能更高也可能更低）。"

#: ../../library/typing.rst:2993
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing``, however, "
"allows your code to run without runtime errors and communicates intent more "
"clearly."
msgstr ""
"大多数类型检查器都能在任何地方支持 ``reveal_type()``，即使并未从 ``typing`` 导入该名称。 不过，从 ``typing`` "
"导入该名称将允许你的代码在运行时不会出现运行时错误并能更清晰地传递意图。"

#: ../../library/typing.rst:3004
msgid ""
"Decorator to mark an object as providing :func:`dataclass "
"<dataclasses.dataclass>`-like behavior."
msgstr "将一个对象标记为提供类似 :func:`dataclass <dataclasses.dataclass>` 行为的装饰器。"

#: ../../library/typing.rst:3007
msgid ""
"``dataclass_transform`` may be used to decorate a class, metaclass, or a "
"function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class in a similar way "
"to :func:`@dataclasses.dataclass <dataclasses.dataclass>`."
msgstr ""
"``dataclass_transform`` 可被用于装饰类、元类或本身为装饰器的函数。 使用 ``@dataclass_transform()`` "
"将让静态类型检查器知道被装饰的对象会执行以类似 :func:`@dataclasses.dataclass "
"<dataclasses.dataclass>` 的方式来转换类的运行时“魔法”。"

#: ../../library/typing.rst:3014
msgid "Example usage with a decorator function:"
msgstr "装饰器函数使用方式的例子："

#: ../../library/typing.rst:3016
msgid ""
"@dataclass_transform()\n"
"def create_model[T](cls: type[T]) -> type[T]:\n"
"    ...\n"
"    return cls\n"
"\n"
"@create_model\n"
"class CustomerModel:\n"
"    id: int\n"
"    name: str"
msgstr ""
"@dataclass_transform()\n"
"def create_model[T](cls: type[T]) -> type[T]:\n"
"    ...\n"
"    return cls\n"
"\n"
"@create_model\n"
"class CustomerModel:\n"
"    id: int\n"
"    name: str"

#: ../../library/typing.rst:3028
msgid "On a base class::"
msgstr "在基类上::"

#: ../../library/typing.rst:3030
msgid ""
"@dataclass_transform()\n"
"class ModelBase: ...\n"
"\n"
"class CustomerModel(ModelBase):\n"
"    id: int\n"
"    name: str"
msgstr ""
"@dataclass_transform()\n"
"class ModelBase: ...\n"
"\n"
"class CustomerModel(ModelBase):\n"
"    id: int\n"
"    name: str"

#: ../../library/typing.rst:3037
msgid "On a metaclass::"
msgstr "在元类上::"

#: ../../library/typing.rst:3039
msgid ""
"@dataclass_transform()\n"
"class ModelMeta(type): ...\n"
"\n"
"class ModelBase(metaclass=ModelMeta): ...\n"
"\n"
"class CustomerModel(ModelBase):\n"
"    id: int\n"
"    name: str"
msgstr ""
"@dataclass_transform()\n"
"class ModelMeta(type): ...\n"
"\n"
"class ModelBase(metaclass=ModelMeta): ...\n"
"\n"
"class CustomerModel(ModelBase):\n"
"    id: int\n"
"    name: str"

#: ../../library/typing.rst:3048
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers"
" similarly to classes created with :func:`@dataclasses.dataclass "
"<dataclasses.dataclass>`. For example, type checkers will assume these "
"classes have ``__init__`` methods that accept ``id`` and ``name``."
msgstr ""
"上面定义的 ``CustomerModel`` 类将被类型检查器视为类似于使用 :func:`@dataclasses.dataclass "
"<dataclasses.dataclass>` 创建的类。 例如，类型检查器将假定这些类具有接受 ``id`` 和 ``name`` 的 "
"``__init__`` 方法。"

#: ../../library/typing.rst:3054
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would"
" have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` "
"decorator: ``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, "
"``match_args``, ``kw_only``, and ``slots``. It must be possible for the "
"value of these arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""
"被装饰的类、元类或函数可以接受以下布尔值参数，类型检查器将假定它们具有与 "
":func:`@dataclasses.dataclass<dataclasses.dataclass>` 装饰器相同的效果: ``init``, "
"``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, ``kw_only`` "
"和 ``slots``。 这些参数的值 (``True`` 或 ``False``) 必须可以被静态地求值。"

#: ../../library/typing.rst:3062
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr "传给 ``dataclass_transform`` 装饰器的参数可以被用来定制被装饰的类、元类或函数的默认行为:"

#: ../../library/typing.rst:0
msgid "Parameters"
msgstr "参数"

#: ../../library/typing.rst:3066
msgid ""
"Indicates whether the ``eq`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``True``."
msgstr "指明如果调用方省略了 ``eq`` 形参则应将其假定为 ``True`` 还是 ``False``。 默认为 ``True``。"

#: ../../library/typing.rst:3071
msgid ""
"Indicates whether the ``order`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr "指明如果调用方省略了 ``order`` 形参则应将其假定为 ``True`` 还是 ``False``。 默认为 ``False``。"

#: ../../library/typing.rst:3076
msgid ""
"Indicates whether the ``kw_only`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""
"指明如果调用方省略了 ``kw_only`` 形参则应将其假定为 ``True`` 还是 ``False``。 默认为 ``False``。"

#: ../../library/typing.rst:3081
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``.  .. "
"versionadded:: 3.12"
msgstr ""
"指明如果调用方省略了 ``frozen`` 形参则应将其假定为 ``True`` 还是 ``False``。 默认为 ``False``。 .. "
"versionadded:: 3.12"

#: ../../library/typing.rst:3082
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr "指明如果省略了 ``frozen`` 形参则应将其假定为 ``True`` 还是 ``False``。 默认为 ``False``。"

#: ../../library/typing.rst:3088
msgid ""
"Specifies a static list of supported classes or functions that describe "
"fields, similar to :func:`dataclasses.field`. Defaults to ``()``."
msgstr "指定一个受支持的类或描述字段的函数的静态列表，类似于 :func:`dataclasses.field`。 默认为 ``()``。"

#: ../../library/typing.rst:3094
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr "接受任何其他关键字以便允许可能的未来扩展。"

#: ../../library/typing.rst:3098
msgid ""
"Type checkers recognize the following optional parameters on field "
"specifiers:"
msgstr "类型检查器能识别下列字段设定器的可选形参:"

#: ../../library/typing.rst:3101
msgid "**Recognised parameters for field specifiers**"
msgstr "**字段设定器的可识别形参**"

#: ../../library/typing.rst:3105
msgid "Parameter name"
msgstr "形参名称"

#: ../../library/typing.rst:3106
msgid "Description"
msgstr "描述"

#: ../../library/typing.rst:3107
msgid "``init``"
msgstr "``init``"

#: ../../library/typing.rst:3108
msgid ""
"Indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr "指明字段是否应当被包括在合成的 ``__init__`` 方法中。 如果未指明，则 ``init`` 默认为 ``True``。"

#: ../../library/typing.rst:3111
msgid "``default``"
msgstr "``default``"

#: ../../library/typing.rst:3112
msgid "Provides the default value for the field."
msgstr "为字段提供默认值。"

#: ../../library/typing.rst:3113
msgid "``default_factory``"
msgstr "``default_factory``"

#: ../../library/typing.rst:3114
msgid ""
"Provides a runtime callback that returns the default value for the field. If"
" neither ``default`` nor ``default_factory`` are specified, the field is "
"assumed to have no default value and must be provided a value when the class"
" is instantiated."
msgstr ""
"提供一个返回字段默认值的运行时回调。 如果 ``default`` 或 ``default_factory`` "
"均未指定，则会假定字段没有默认值而在类被实例化时必须提供一个值。"

#: ../../library/typing.rst:3119
msgid "``factory``"
msgstr "``factory``"

#: ../../library/typing.rst:3120
msgid "An alias for the ``default_factory`` parameter on field specifiers."
msgstr "字段说明符上 ``default_factory`` 形参的别名。"

#: ../../library/typing.rst:3121
msgid "``kw_only``"
msgstr "``kw_only``"

#: ../../library/typing.rst:3122
msgid ""
"Indicates whether the field should be marked as keyword-only. If ``True``, "
"the field will be keyword-only. If ``False``, it will not be keyword-only. "
"If unspecified, the value of the ``kw_only`` parameter on the object "
"decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""
"指明字段是否应被标记为仅限关键字的。 如为 ``True``，字段将是仅限关键字的。 如为 ``False``，它将不是仅限关键字的。 "
"如未指明，则将使用以 ``dataclass_transform`` 装饰的对象的 ``kw_only`` 形参的值，或者如果该值也未指明，则将使用 "
"``dataclass_transform`` 上 ``kw_only_default`` 的值。"

#: ../../library/typing.rst:3128
msgid "``alias``"
msgstr "``alias``"

#: ../../library/typing.rst:3129
msgid ""
"Provides an alternative name for the field. This alternative name is used in"
" the synthesized ``__init__`` method."
msgstr "提供字段的替代名称。 该替代名称会被用于合成的 ``__init__`` 方法。"

#: ../../library/typing.rst:3132
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr "在运行时，该装饰器会将其参数记录到被装饰对象的 ``__dataclass_transform__`` 属性。 它没有其他的运行时影响。"

#: ../../library/typing.rst:3136
msgid "See :pep:`681` for more details."
msgstr "更多细节请参见 :pep:`681`。"

#: ../../library/typing.rst:3144
msgid "Decorator for creating overloaded functions and methods."
msgstr "用于创建重载函数和方法的装饰器。"

#: ../../library/typing.rst:3146
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one "
"non-``@overload``-decorated definition (for the same function/method)."
msgstr ""
"``@overload`` 装饰器允许描述支持多参数类型不同组合的函数和方法。 一系列以 ``@overload`` 装饰的定义必须带上恰好一个非 "
"``@overload`` 装饰的定义（用于同一个函数/方法）。"

#: ../../library/typing.rst:3151
msgid ""
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition. The non-``@overload``-decorated definition, meanwhile, will be "
"used at runtime but should be ignored by a type checker.  At runtime, "
"calling an ``@overload``-decorated function directly will raise "
":exc:`NotImplementedError`."
msgstr ""
"以 ``@overload`` 装饰的定义仅对类型检查器有用，因为它们将被非 ``@overload`` 装饰的定义覆盖。 与此同时，非 "
"``@overload`` 装饰的定义将在运行时使用但应被类型检查器忽略。 在运行时，直接调用以 ``@overload`` 装饰的函数将引发 "
":exc:`NotImplementedError`。"

#: ../../library/typing.rst:3159
msgid ""
"An example of overload that gives a more precise type than can be expressed "
"using a union or a type variable:"
msgstr "一个提供了比使用联合或类型变量更精确的类型的重载的示例："

#: ../../library/typing.rst:3162
msgid ""
"@overload\n"
"def process(response: None) -> None:\n"
"    ...\n"
"@overload\n"
"def process(response: int) -> tuple[int, str]:\n"
"    ...\n"
"@overload\n"
"def process(response: bytes) -> str:\n"
"    ...\n"
"def process(response):\n"
"    ...  # actual implementation goes here"
msgstr ""
"@overload\n"
"def process(response: None) -> None:\n"
"    ...\n"
"@overload\n"
"def process(response: int) -> tuple[int, str]:\n"
"    ...\n"
"@overload\n"
"def process(response: bytes) -> str:\n"
"    ...\n"
"def process(response):\n"
"    ...  # 以下为真正的实现"

#: ../../library/typing.rst:3176
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr "请参阅 :pep:`484` 了解更多细节以及与其他类型语义的比较。"

#: ../../library/typing.rst:3178
msgid ""
"Overloaded functions can now be introspected at runtime using "
":func:`get_overloads`."
msgstr "现在可以使用 :func:`get_overloads` 在运行时内省有重载的函数。"

#: ../../library/typing.rst:3185
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*."
msgstr "为 *func* 返回以 :func:`@overload <overload>` 装饰的定义的序列。"

#: ../../library/typing.rst:3188
msgid ""
"*func* is the function object for the implementation of the overloaded "
"function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""
"*func* 是用于实现过载函数的函数对象。 例如，根据文档中为 :func:`@overload <overload>` 给出的 "
"``process`` 定义，``get_overloads(process)`` 将为所定义的三个过载函数返回由三个函数对象组成的序列。 "
"如果在不带过载的函数上调用，``get_overloads()`` 将返回一个空序列。"

#: ../../library/typing.rst:3195
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr "``get_overloads()`` 可被用来在运行时内省一个过载函数。"

#: ../../library/typing.rst:3203
msgid "Clear all registered overloads in the internal registry."
msgstr "清空内部注册表中所有已注册的重载。"

#: ../../library/typing.rst:3205
msgid "This can be used to reclaim the memory used by the registry."
msgstr "这可用于回收注册表所使用的内存。"

#: ../../library/typing.rst:3212
msgid "Decorator to indicate final methods and final classes."
msgstr "表示最终化方法和最终化类的装饰器。"

#: ../../library/typing.rst:3214
msgid ""
"Decorating a method with ``@final`` indicates to a type checker that the "
"method cannot be overridden in a subclass. Decorating a class with "
"``@final`` indicates that it cannot be subclassed."
msgstr ""
"以 ``@final`` 装饰一个方法将向类型检查器指明该方法不可在子类中被重载。 以 ``@final`` 装饰一个类表示它不可被子类化。"

#: ../../library/typing.rst:3220
msgid ""
"class Base:\n"
"    @final\n"
"    def done(self) -> None:\n"
"        ...\n"
"class Sub(Base):\n"
"    def done(self) -> None:  # Error reported by type checker\n"
"        ...\n"
"\n"
"@final\n"
"class Leaf:\n"
"    ...\n"
"class Other(Leaf):  # Error reported by type checker\n"
"    ..."
msgstr ""
"class Base:\n"
"    @final\n"
"    def done(self) -> None:\n"
"        ...\n"
"class Sub(Base):\n"
"    def done(self) -> None:  # 类型检查器报告错误\n"
"        ...\n"
"\n"
"@final\n"
"class Leaf:\n"
"    ...\n"
"class Other(Leaf):  # 类型检查器报告错误\n"
"    ..."

#: ../../library/typing.rst:3239
msgid ""
"The decorator will now attempt to set a ``__final__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, \"__final__\","
" False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""
"该装饰器现在将尝试在被装饰的对象上设置 ``__final__`` 属性为 ``True``。 这样，可以在运行时使用 ``if "
"getattr(obj, \"__final__\", False)`` 这样的检查来确定对象 ``obj`` 是否已被标记为终结。 "
"如果被装饰的对象不支持设置属性，该装饰器将不加修改地返回对象而不会引发异常。"

#: ../../library/typing.rst:3250
msgid "Decorator to indicate that annotations are not type hints."
msgstr "标明注解不是类型提示的装饰器。"

#: ../../library/typing.rst:3252
msgid ""
"This works as a class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but "
"not to methods defined in its superclasses or subclasses). Type checkers "
"will ignore all annotations in a function or class with this decorator."
msgstr ""
"此作用方式类似于类或函数的 :term:`decorator`。 "
"对于类，它将递归地应用到该类中定义的所有方法和类（但不包括在其超类或子类中定义的方法）。 类型检查器将忽略带有此装饰器的函数或类的所有标注。"

#: ../../library/typing.rst:3258
msgid "``@no_type_check`` mutates the decorated object in place."
msgstr "``@no_type_check`` 将原地改变被装饰的对象。"

#: ../../library/typing.rst:3262
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "让其他装饰器具有 :func:`no_type_check` 效果的装饰器。"

#: ../../library/typing.rst:3264
msgid ""
"This wraps the decorator with something that wraps the decorated function in"
" :func:`no_type_check`."
msgstr "本装饰器用 :func:`no_type_check` 里的装饰函数打包其他装饰器。"

#: ../../library/typing.rst:3267
msgid ""
"No type checker ever added support for ``@no_type_check_decorator``. It is "
"therefore deprecated, and will be removed in Python 3.15."
msgstr ""
"``@no_type_check_decorator`` 没有任何类型检查器支持过，所以它被弃用，并将在 Python 3.15 中被移除。"

#: ../../library/typing.rst:3273
msgid ""
"Decorator to indicate that a method in a subclass is intended to override a "
"method or attribute in a superclass."
msgstr "该装饰器指明子类中的某个方法是重载超类中的方法或属性。"

#: ../../library/typing.rst:3276
msgid ""
"Type checkers should emit an error if a method decorated with ``@override`` "
"does not, in fact, override anything. This helps prevent bugs that may occur"
" when a base class is changed without an equivalent change to a child class."
msgstr ""
"如果一个以 ``@override`` 装饰的方法实际未重载任何东西则类型检查器应当报告错误。 "
"这有助于防止当基类发生修改而子类未进行相应修改而导致的问题。"

#: ../../library/typing.rst:3283
msgid ""
"class Base:\n"
"    def log_status(self) -> None:\n"
"        ...\n"
"\n"
"class Sub(Base):\n"
"    @override\n"
"    def log_status(self) -> None:  # Okay: overrides Base.log_status\n"
"        ...\n"
"\n"
"    @override\n"
"    def done(self) -> None:  # Error reported by type checker\n"
"        ..."
msgstr ""
"class Base:\n"
"    def log_status(self) -> None:\n"
"        ...\n"
"\n"
"class Sub(Base):\n"
"    @override\n"
"    def log_status(self) -> None:  # 可以：重写 Base.log_status\n"
"        ...\n"
"\n"
"    @override\n"
"    def done(self) -> None:  # 类型检查器报告错误\n"
"        ..."

#: ../../library/typing.rst:3298
msgid "There is no runtime checking of this property."
msgstr "没有对此特征属性的运行时检查。"

#: ../../library/typing.rst:3300
msgid ""
"The decorator will attempt to set an ``__override__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, "
"\"__override__\", False)`` can be used at runtime to determine whether an "
"object ``obj`` has been marked as an override.  If the decorated object does"
" not support setting attributes, the decorator returns the object unchanged "
"without raising an exception."
msgstr ""
"该装饰器将尝试在被装饰的对象上设置 ``__override__`` 属性为 ``True``。 这样，可以在运行时使用 ``if "
"getattr(obj, \"__override__\", False)`` 这样的检查来确定对象 ``obj`` 是否已被标记为重载。 "
"如果被装饰的对象不支持设置属性，该装饰器将不加修改地返回对象而不会引发异常。"

#: ../../library/typing.rst:3307
msgid "See :pep:`698` for more details."
msgstr "更多细节参见 :pep:`698`。"

#: ../../library/typing.rst:3314
msgid "Decorator to mark a class or function as unavailable at runtime."
msgstr "将类或函数标记为在运行时不可用的装饰器。"

#: ../../library/typing.rst:3316
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr "在运行时，该装饰器本身不可用。实现返回的是私有类实例时，它主要是用于标记在类型存根文件中定义的类。"

#: ../../library/typing.rst:3320
msgid ""
"@type_check_only\n"
"class Response:  # private or not available at runtime\n"
"    code: int\n"
"    def get_header(self, name: str) -> str: ...\n"
"\n"
"def fetch_response() -> Response: ..."
msgstr ""
"@type_check_only\n"
"class Response:  # 私有或在运行时不可用\n"
"    code: int\n"
"    def get_header(self, name: str) -> str: ...\n"
"\n"
"def fetch_response() -> Response: ..."

#: ../../library/typing.rst:3327
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr "注意，建议不要返回私有类实例，最好将之设为公共类。"

#: ../../library/typing.rst:3331
msgid "Introspection helpers"
msgstr "内省辅助器"

#: ../../library/typing.rst:3335
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr "返回函数、方法、模块、类对象的类型提示的字典。"

#: ../../library/typing.rst:3338
msgid ""
"This is often the same as ``obj.__annotations__``, but this function makes "
"the following changes to the annotations dictionary:"
msgstr "该函数通常与 ``obj.__annotations__`` 相同，但会对注解字典进行以下更改："

#: ../../library/typing.rst:3341
msgid ""
"Forward references encoded as string literals or :class:`ForwardRef` objects"
" are handled by evaluating them in *globalns*, *localns*, and (where "
"applicable) *obj*'s :ref:`type parameter <type-params>` namespace. If "
"*globalns* or *localns* is not given, appropriate namespace dictionaries are"
" inferred from *obj*."
msgstr ""
"以字符串字面形式或 :class:`ForwardRef` 对象编码的前向引用会在 *globalns*, *localns* 和 (如适用) "
"*obj* 的 :ref:`类型形参 <type-params>` 命名空间中求值。如果没有传入 *globalns* 或 *localns*，则会从 "
"*obj* 中推断出适当的命名空间字典。"

#: ../../library/typing.rst:3346
msgid "``None`` is replaced with :class:`types.NoneType`."
msgstr "``None`` 被替换为 :class:`types.NoneType`。"

#: ../../library/typing.rst:3347
msgid ""
"If :func:`@no_type_check <no_type_check>` has been applied to *obj*, an "
"empty dictionary is returned."
msgstr "如果在 *obj* 上应用了 :func:`@no_type_check <no_type_check>`，返回一个空字典。"

#: ../../library/typing.rst:3349
msgid ""
"If *obj* is a class ``C``, the function returns a dictionary that merges "
"annotations from ``C``'s base classes with those on ``C`` directly. This is "
"done by traversing :attr:`C.__mro__ <type.__mro__>` and iteratively "
"combining ``__annotations__`` dictionaries. Annotations on classes appearing"
" earlier in the :term:`method resolution order` always take precedence over "
"annotations on classes appearing later in the method resolution order."
msgstr ""
"如果 *obj* 是一个类 ``C``，则函数返回一个合并了 ``C`` 的基类与 ``C`` 上的基类的字典。 这是通过遍历 "
":attr:`C.__mro__ <type.__mro__>` 并迭代地合并 ``__annotations__`` 字典来实现的。 在 "
":term:`method resolution order` 中较早出现的类上的标注总是会优先于在方法解析顺序中较晚出现的类的标注。"

#: ../../library/typing.rst:3356
msgid ""
"The function recursively replaces all occurrences of ``Annotated[T, ...]`` "
"with ``T``, unless *include_extras* is set to ``True`` (see "
":class:`Annotated` for more information)."
msgstr ""
"除非 *include_extras* 设置为 ``True``，否则函数会递归地将所有出现的 ``Annotated[T, ...]`` 替换为 "
"``T`` (详见 :class:`Annotated`)。"

#: ../../library/typing.rst:3360
msgid ""
"See also :func:`inspect.get_annotations`, a lower-level function that "
"returns annotations more directly."
msgstr "另请参阅 :func:`inspect.get_annotations`，这是一个以更直接方式返回注解的低级函数。"

#: ../../library/typing.rst:3365
msgid ""
"If any forward references in the annotations of *obj* are not resolvable or "
"are not valid Python code, this function will raise an exception such as "
":exc:`NameError`. For example, this can happen with imported :ref:`type "
"aliases <type-aliases>` that include forward references, or with names "
"imported under :data:`if TYPE_CHECKING <TYPE_CHECKING>`."
msgstr ""
"如果 *obj* 注解中的任何前向引用不可解析或不是有效的 Python 代码，此函数将引发 :exc:`NameError` 等异常。例如导入的 "
":ref:`类型别名 <type-aliases>` 包含正向引用，或名称在 :data:`if TYPE_CHECKING "
"<TYPE_CHECKING>` 下导入。"

#: ../../library/typing.rst:3371
msgid ""
"Added ``include_extras`` parameter as part of :pep:`593`. See the "
"documentation on :data:`Annotated` for more information."
msgstr ""
"增加了作为 :pep:`593` 组成部分的 ``include_extras`` 形参。 请参阅 :data:`Annotated` 文档了解详情。"

#: ../../library/typing.rst:3375
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if"
" a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr "在之前，如果设置了等于 ``None`` 的默认值则会为函数和方法标注添加 ``Optional[t]``。 现在标注将被不加修改地返回。"

#: ../../library/typing.rst:3382
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``."
msgstr "获取一个类型的不带下标的版本：对于 ``X[Y, Z, ...]`` 形式的类型对象将返回 ``X``。"

#: ../../library/typing.rst:3385
msgid ""
"If ``X`` is a typing-module alias for a builtin or :mod:`collections` class,"
" it will be normalized to the original class. If ``X`` is an instance of "
":class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return the underlying "
":class:`ParamSpec`. Return ``None`` for unsupported objects."
msgstr ""
"如果 ``X`` 是一个内置类型或 :mod:`collections` 类在 typing 模块中的别名，它将被正规化为原始的类。 如果 ``X`` "
"是 :class:`ParamSpecArgs` 或 :class:`ParamSpecKwargs` 的实例，则返回下层的 "
":class:`ParamSpec`。 对于不受支持的对象将返回 ``None``。"

#: ../../library/typing.rst:3391 ../../library/typing.rst:3415
msgid "Examples:"
msgstr "示例："

#: ../../library/typing.rst:3393
msgid ""
"assert get_origin(str) is None\n"
"assert get_origin(Dict[str, int]) is dict\n"
"assert get_origin(Union[int, str]) is Union\n"
"assert get_origin(Annotated[str, \"metadata\"]) is Annotated\n"
"P = ParamSpec('P')\n"
"assert get_origin(P.args) is P\n"
"assert get_origin(P.kwargs) is P"
msgstr ""
"assert get_origin(str) is None\n"
"assert get_origin(Dict[str, int]) is dict\n"
"assert get_origin(Union[int, str]) is Union\n"
"assert get_origin(Annotated[str, \"metadata\"]) is Annotated\n"
"P = ParamSpec('P')\n"
"assert get_origin(P.args) is P\n"
"assert get_origin(P.kwargs) is P"

#: ../../library/typing.rst:3407
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``."
msgstr "获取已执行所有下标的类型参数：对于 ``X[Y, Z, ...]`` 形式的类型对象将返回 ``(Y, Z, ...)``。"

#: ../../library/typing.rst:3410
msgid ""
"If ``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original"
" arguments ``[Y, Z, ...]`` due to type caching. Return ``()`` for "
"unsupported objects."
msgstr ""
"如果 ``X`` 是一个并集或是包含在另一个泛型类型中的 :class:`Literal`，则 ``(Y, Z, ...)`` "
"的顺序可能因类型缓存而与原始参数 ``[Y, Z, ...]`` 存在差异。 对于不受支持的对象将返回 ``()``。"

#: ../../library/typing.rst:3417
msgid ""
"assert get_args(int) == ()\n"
"assert get_args(Dict[int, str]) == (int, str)\n"
"assert get_args(Union[int, str]) == (int, str)"
msgstr ""
"assert get_args(int) == ()\n"
"assert get_args(Dict[int, str]) == (int, str)\n"
"assert get_args(Union[int, str]) == (int, str)"

#: ../../library/typing.rst:3427
msgid "Return the set of members defined in a :class:`Protocol`."
msgstr "返回 :class:`Protocol` 中定义的成员构成的集合。"

#: ../../library/typing.rst:3429
msgid ""
">>> from typing import Protocol, get_protocol_members\n"
">>> class P(Protocol):\n"
"...     def a(self) -> str: ...\n"
"...     b: int\n"
">>> get_protocol_members(P) == frozenset({'a', 'b'})\n"
"True"
msgstr ""
">>> from typing import Protocol, get_protocol_members\n"
">>> class P(Protocol):\n"
"...     def a(self) -> str: ...\n"
"...     b: int\n"
">>> get_protocol_members(P) == frozenset({'a', 'b'})\n"
"True"

#: ../../library/typing.rst:3438
msgid "Raise :exc:`TypeError` for arguments that are not Protocols."
msgstr "如果参数不是协议，引发 :exc:`TypeError`。"

#: ../../library/typing.rst:3444
msgid "Determine if a type is a :class:`Protocol`."
msgstr "检查一个类型是否为 :class:`Protocol`。"

#: ../../library/typing.rst:3448
msgid ""
"class P(Protocol):\n"
"    def a(self) -> str: ...\n"
"    b: int\n"
"\n"
"is_protocol(P)    # => True\n"
"is_protocol(int)  # => False"
msgstr ""
"class P(Protocol):\n"
"    def a(self) -> str: ...\n"
"    b: int\n"
"\n"
"is_protocol(P)    # => True\n"
"is_protocol(int)  # => False"

#: ../../library/typing.rst:3459
msgid "Check if a type is a :class:`TypedDict`."
msgstr "检查一个类型是否为 :class:`TypedDict`。"

#: ../../library/typing.rst:3463
msgid ""
"class Film(TypedDict):\n"
"    title: str\n"
"    year: int\n"
"\n"
"assert is_typeddict(Film)\n"
"assert not is_typeddict(list | str)\n"
"\n"
"# TypedDict is a factory for creating typed dicts,\n"
"# not a typed dict itself\n"
"assert not is_typeddict(TypedDict)"
msgstr ""
"class Film(TypedDict):\n"
"    title: str\n"
"    year: int\n"
"\n"
"assert is_typeddict(Film)\n"
"assert not is_typeddict(list | str)\n"
"\n"
"# TypedDict 是创建类型化字典的工厂， \n"
"# 不是类型化字典\n"
"assert not is_typeddict(TypedDict)"

#: ../../library/typing.rst:3480
msgid ""
"Class used for internal typing representation of string forward references."
msgstr "用于字符串前向引用的内部类型表示的类。"

#: ../../library/typing.rst:3482
msgid ""
"For example, ``List[\"SomeClass\"]`` is implicitly transformed into "
"``List[ForwardRef(\"SomeClass\")]``.  :class:`!ForwardRef` should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

#: ../../library/typing.rst:3487
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
":pep:`585` 泛型类型例如 ``list[\"SomeClass\"]`` 将不会被隐式地转换为 "
"``list[ForwardRef(\"SomeClass\")]`` 因而将不会自动解析为 ``list[SomeClass]``。"

#: ../../library/typing.rst:3493
msgid ""
"This is now an alias for :class:`annotationlib.ForwardRef`. Several "
"undocumented behaviors of this class have been changed; for example, after a"
" ``ForwardRef`` has been evaluated, the evaluated value is no longer cached."
msgstr ""

#: ../../library/typing.rst:3500
msgid "Evaluate an :class:`annotationlib.ForwardRef` as a :term:`type hint`."
msgstr ""

#: ../../library/typing.rst:3502
msgid ""
"This is similar to calling :meth:`annotationlib.ForwardRef.evaluate`, but "
"unlike that method, :func:`!evaluate_forward_ref` also:"
msgstr ""

#: ../../library/typing.rst:3505
msgid "Recursively evaluates forward references nested within the type hint."
msgstr ""

#: ../../library/typing.rst:3506
msgid ""
"Raises :exc:`TypeError` when it encounters certain objects that are not "
"valid type hints."
msgstr ""

#: ../../library/typing.rst:3508
msgid ""
"Replaces type hints that evaluate to :const:`!None` with "
":class:`types.NoneType`."
msgstr ""

#: ../../library/typing.rst:3510
msgid ""
"Supports the :attr:`~annotationlib.Format.FORWARDREF` and "
":attr:`~annotationlib.Format.STRING` formats."
msgstr ""

#: ../../library/typing.rst:3513
msgid ""
"See the documentation for :meth:`annotationlib.ForwardRef.evaluate` for the "
"meaning of the *owner*, *globals*, *locals*, and *type_params* parameters. "
"*format* specifies the format of the annotation and is a member of the "
":class:`annotationlib.Format` enum."
msgstr ""

#: ../../library/typing.rst:3522
msgid ""
"A sentinel object used to indicate that a type parameter has no default "
"value. For example:"
msgstr "一个用于指示类型形参没有默认值的哨兵对象。例如："

#: ../../library/typing.rst:3525
msgid ""
">>> T = TypeVar(\"T\")\n"
">>> T.__default__ is typing.NoDefault\n"
"True\n"
">>> S = TypeVar(\"S\", default=None)\n"
">>> S.__default__ is None\n"
"True"
msgstr ""
">>> T = TypeVar(\"T\")\n"
">>> T.__default__ is typing.NoDefault\n"
"True\n"
">>> S = TypeVar(\"S\", default=None)\n"
">>> S.__default__ is None\n"
"True"

#: ../../library/typing.rst:3537
msgid "Constant"
msgstr "常量"

#: ../../library/typing.rst:3541
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime."
msgstr "会被第 3 方静态类型检查器假定为 ``True`` 的特殊常量。 在运行时将为 ``False``。"

#: ../../library/typing.rst:3546
msgid ""
"if TYPE_CHECKING:\n"
"    import expensive_mod\n"
"\n"
"def fun(arg: 'expensive_mod.SomeType') -> None:\n"
"    local_var: expensive_mod.AnotherType = other_fun()"
msgstr ""
"if TYPE_CHECKING:\n"
"    import expensive_mod\n"
"\n"
"def fun(arg: 'expensive_mod.SomeType') -> None:\n"
"    local_var: expensive_mod.AnotherType = other_fun()"

#: ../../library/typing.rst:3552
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""
"第一个类型注解必须用引号标注，才能把它当作“前向引用”，从而在解释器运行时中隐藏 ``expensive_mod`` "
"引用。局部变量的类型注释不会被评估，因此，第二个注解不需要用引号引起来。"

#: ../../library/typing.rst:3559
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""
"若用了 ``from __future__ import annotations``，函数定义时则不求值注解，直接把注解以字符串形式存在 "
"``__annotations__`` 里。这时毋需为注解打引号（见 :pep:`563`）。"

#: ../../library/typing.rst:3571
msgid "Deprecated aliases"
msgstr "一些已被弃用的别名"

#: ../../library/typing.rst:3573
msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the :mod:`!typing` module"
" in order to support parameterizing these generic classes using ``[]``. "
"However, the aliases became redundant in Python 3.9 when the corresponding "
"pre-existing classes were enhanced to support ``[]`` (see :pep:`585`)."
msgstr ""
"本模块给已存在的标准库类定义了一些已被弃用的别名。 这些别名当初包括在 :mod:`!typing` 模块中是为了支持使用 ``[]`` "
"来对这些泛型类进行形参化。 然而，在 Python 3.9 对应的已存在类都被增强为支持 ``[]`` 使得这些别名变得多余了 (参见 "
":pep:`585`)。"

#: ../../library/typing.rst:3580
msgid ""
"The redundant types are deprecated as of Python 3.9. However, while the "
"aliases may be removed at some point, removal of these aliases is not "
"currently planned. As such, no deprecation warnings are currently issued by "
"the interpreter for these aliases."
msgstr ""
"这些多余的类型从 Python 3.9 "
"起被弃用。然而，虽然它们可能会在某一时刻被移除，但目前还没有移除它们的计划。因此，解释器目前不会对这些别名发出弃用警告。"

#: ../../library/typing.rst:3585
msgid ""
"If at some point it is decided to remove these deprecated aliases, a "
"deprecation warning will be issued by the interpreter for at least two "
"releases prior to removal. The aliases are guaranteed to remain in the "
":mod:`!typing` module without deprecation warnings until at least Python "
"3.14."
msgstr ""
"如果在某一时刻这些已弃用的别名确定要被移除，解释器将早于实际移除至少两个发布版发出弃用警告。 至少在 Python 3.14 之前都会保证让这些别名留在"
" :mod:`!typing` 模块中并且不会发出弃用警告。"

#: ../../library/typing.rst:3590
msgid ""
"Type checkers are encouraged to flag uses of the deprecated types if the "
"program they are checking targets a minimum Python version of 3.9 or newer."
msgstr "如果被类型检查器检查的程序旨在运行于 Python 3.9 或更高版本，则鼓励类型检查器标记出这些不建议使用的类型。"

#: ../../library/typing.rst:3596
msgid "Aliases to built-in types"
msgstr "内置类型的别名"

#: ../../library/typing.rst:3600
msgid "Deprecated alias to :class:`dict`."
msgstr ":class:`dict` 的已弃用的别名。"

#: ../../library/typing.rst:3602
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`~collections.abc.Mapping` rather than to use"
" :class:`dict` or :class:`!typing.Dict`."
msgstr ""
"请注意，注释参数时，最好使用抽象的多项集类型，如 :class:`~collections.abc.Mapping`，而不是使用 "
":class:`dict` 或 :class:`!typing.Dict`。"

#: ../../library/typing.rst:3606
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3612
msgid "Deprecated alias to :class:`list`."
msgstr ":class:`list` 的已弃用的别名。"

#: ../../library/typing.rst:3614
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`~collections.abc.Sequence` or "
":class:`~collections.abc.Iterable` rather than to use :class:`list` or "
":class:`!typing.List`."
msgstr ""
"请注意，注释参数时，最好使用抽象的多项集类型，如 :class:`~collections.abc.Sequence` 或 "
":class:`~collections.abc.Iterable`，而不是使用 :class:`list` 或 "
":class:`!typing.List`。"

#: ../../library/typing.rst:3619
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3625
msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr ":class:`builtins.set <set>` 的已弃用的别名。"

#: ../../library/typing.rst:3627
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`collections.abc.Set` rather than to use "
":class:`set` or :class:`typing.Set`."
msgstr ""
"请注意，注释参数时，最好使用抽象的多项集类型，如 :class:`collections.abc.Set`，而不是使用 :class:`set` 或 "
":class:`typing.Set`。"

#: ../../library/typing.rst:3631
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:3637
msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr ":class:`builtins.frozenset <frozenset>` 的已弃用的别名。"

#: ../../library/typing.rst:3639
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3646
msgid "Deprecated alias for :class:`tuple`."
msgstr ":class:`tuple` 的已弃用的别名。"

#: ../../library/typing.rst:3648
msgid ""
":class:`tuple` and ``Tuple`` are special-cased in the type system; see "
":ref:`annotating-tuples` for more details."
msgstr ""
":class:`tuple` 和 ``Tuple`` 是类型系统中的特例；更多详细信息请参见 :ref:`annotating-tuples`。"

#: ../../library/typing.rst:3651
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` 现在支持下标操作（``[]``）。参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3657
msgid "Deprecated alias to :class:`type`."
msgstr ":class:`type` 的已弃用的别名。"

#: ../../library/typing.rst:3659
msgid ""
"See :ref:`type-of-class-objects` for details on using :class:`type` or "
"``typing.Type`` in type annotations."
msgstr ""
"有关在类型注解中使用 :class:`type` 或 ``typing.Type`` 的详细信息，请参阅 :ref:`type-of-class-"
"objects` 。"

#: ../../library/typing.rst:3664
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3671
msgid "Aliases to types in :mod:`collections`"
msgstr ":mod:`collections` 中的类型的别名。"

#: ../../library/typing.rst:3675
msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr ":class:`collections.defaultdict` 的已弃用的别名。"

#: ../../library/typing.rst:3679
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3685
msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr ":class:`collections.OrderedDict` 的已弃用的别名。"

#: ../../library/typing.rst:3689
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3695
msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr ":class:`collections.ChainMap` 的已弃用的别名。"

#: ../../library/typing.rst:3699
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3705
msgid "Deprecated alias to :class:`collections.Counter`."
msgstr ":class:`collections.Counter` 的已弃用的别名。"

#: ../../library/typing.rst:3709
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.Counter` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:3715
msgid "Deprecated alias to :class:`collections.deque`."
msgstr ":class:`collections.deque` 的已弃用的别名。"

#: ../../library/typing.rst:3719
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.deque` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:3726
msgid "Aliases to other concrete types"
msgstr "其他具体类型的别名"

#: ../../library/typing.rst:3731
msgid ""
"Deprecated aliases corresponding to the return types from :func:`re.compile`"
" and :func:`re.match`."
msgstr ":func:`re.compile` 和 :func:`re.match` 的返回类型的已弃用的别名。"

#: ../../library/typing.rst:3734
msgid ""
"These types (and the corresponding functions) are generic over "
":data:`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."
msgstr ""
"这些类型（与对应的函数）是 :data:`AnyStr` 上的泛型。 ``Pattern`` 可以被特化为 ``Pattern[str]`` 或 "
"``Pattern[bytes]``；``Match`` 可以被特化为 ``Match[str]`` 或 ``Match[bytes]``。"

#: ../../library/typing.rst:3739
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":mod:`re` 模块中的 ``Pattern`` 与 ``Match`` 类现已支持 ``[]``。详见 :pep:`585` 与 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3745
msgid "Deprecated alias for :class:`str`."
msgstr ":class:`str` 的已弃用的别名。"

#: ../../library/typing.rst:3747
msgid ""
"``Text`` is provided to supply a forward compatible path for Python 2 code: "
"in Python 2, ``Text`` is an alias for ``unicode``."
msgstr ""
"``Text`` 被用来为 Python 2 代码提供向上兼容的路径：在 Python 2 中，``Text`` 是 ``unicode`` 的别名。"

#: ../../library/typing.rst:3751
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr "使用 ``Text`` 时，值中必须包含 unicode 字符串，以兼容 Python 2 和 Python 3："

#: ../../library/typing.rst:3754
msgid ""
"def add_unicode_checkmark(text: Text) -> Text:\n"
"    return text + u' \\u2713'"
msgstr ""
"def add_unicode_checkmark(text: Text) -> Text:\n"
"    return text + u' \\u2713'"

#: ../../library/typing.rst:3759
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""
"Python 2 已不再受支持，并且大部分类型检查器也都不再支持 Python 2 代码的类型检查。 目前还没有计划移除该别名，但建议用户使用 "
":class:`str` 来代替 ``Text``。"

#: ../../library/typing.rst:3769
msgid "Aliases to container ABCs in :mod:`collections.abc`"
msgstr ":mod:`collections.abc` 中容器 ABC 的别名"

#: ../../library/typing.rst:3773
msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr ":class:`collections.abc.Set` 的已弃用的别名。"

#: ../../library/typing.rst:3775
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 :ref:`types-"
"genericalias`。"

#: ../../library/typing.rst:3781
msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr ":class:`collections.abc.Collection` 的已弃用的别名。"

#: ../../library/typing.rst:3785
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3791
msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr ":class:`collections.abc.Container` 的已弃用的别名。"

#: ../../library/typing.rst:3793
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3799
msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr ":class:`collections.abc.ItemsView` 的已弃用的别名。"

#: ../../library/typing.rst:3801
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3807
msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr ":class:`collections.abc.KeysView` 的已弃用的别名。"

#: ../../library/typing.rst:3809
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3815
msgid "Deprecated alias to :class:`collections.abc.Mapping`."
msgstr ":class:`collections.abc.Mapping` 的已弃用的别名。"

#: ../../library/typing.rst:3817
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3823
msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr ":class:`collections.abc.MappingView` 的已弃用的别名。"

#: ../../library/typing.rst:3825
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). See"
" :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3831
msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr ":class:`collections.abc.MutableMapping` 的已弃用的别名。"

#: ../../library/typing.rst:3833
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3840
msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr ":class:`collections.abc.MutableSequence` 的已弃用的别名。"

#: ../../library/typing.rst:3842
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``)."
" See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3849
msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr ":class:`collections.abc.MutableSet` 的已弃用的别名。"

#: ../../library/typing.rst:3851
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3857
msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr ":class:`collections.abc.Sequence` 的已弃用的别名。"

#: ../../library/typing.rst:3859
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3865
msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr ":class:`collections.abc.ValuesView` 的已弃用的别名。"

#: ../../library/typing.rst:3867
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3874
msgid "Aliases to asynchronous ABCs in :mod:`collections.abc`"
msgstr ":mod:`collections.abc` 中异步 ABC 的别名"

#: ../../library/typing.rst:3878
msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr ":class:`collections.abc.Coroutine` 的已弃用的别名。"

#: ../../library/typing.rst:3880
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using "
":class:`collections.abc.Coroutine` and ``typing.Coroutine`` in type "
"annotations."
msgstr ""
"有关在注解类型中使用 :class:`collections.abc.Coroutine` 和 ``typing.Coroutine`` "
"的详细信息，请参见 :ref:`annotating-generators-and-coroutines`。"

#: ../../library/typing.rst:3886
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` 现在支持下标操作（``[]``）。参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3892
msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr ":class:`collections.abc.AsyncGenerator` 的已弃用的别名。"

#: ../../library/typing.rst:3894
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using "
":class:`collections.abc.AsyncGenerator` and ``typing.AsyncGenerator`` in "
"type annotations."
msgstr ""
"有关在注解类型中使用 :class:`collections.abc.AsyncGenerator` 和 "
"``typing.AsyncGenerator`` 的详细信息，请参见 :ref:`annotating-generators-and-"
"coroutines`。"

#: ../../library/typing.rst:3900
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncGenerator` 现在支持下标操作（``[]``）。参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3905
msgid "The ``SendType`` parameter now has a default."
msgstr "``SendType`` 形参现在有默认值。"

#: ../../library/typing.rst:3910
msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr ":class:`collections.abc.AsyncIterable` 的已弃用的别名。"

#: ../../library/typing.rst:3914
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3920
msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr ":class:`collections.abc.AsyncIterator` 的已弃用的别名。"

#: ../../library/typing.rst:3924
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3930
msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr ":class:`collections.abc.Awaitable` 的已弃用的别名。"

#: ../../library/typing.rst:3934
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3941
msgid "Aliases to other ABCs in :mod:`collections.abc`"
msgstr ":mod:`collections.abc` 中其他 ABC 的别名"

#: ../../library/typing.rst:3945
msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr ":class:`collections.abc.Iterable` 的已弃用的别名"

#: ../../library/typing.rst:3947
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3953
msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr ":class:`collections.abc.Iterator` 的已弃用的别名。"

#: ../../library/typing.rst:3955
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3961
msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr ":class:`collections.abc.Callable` 的已弃用的别名。"

#: ../../library/typing.rst:3963
msgid ""
"See :ref:`annotating-callables` for details on how to use "
":class:`collections.abc.Callable` and ``typing.Callable`` in type "
"annotations."
msgstr ""
"有关如何在类型标注中使用 :class:`collections.abc.Callable` 和 ``typing.Callable`` "
"的详细信息请参阅 :ref:`annotating-callables`。"

#: ../../library/typing.rst:3966
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` 现在支持下标操作（``[]``）。参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3976
msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr ":class:`collections.abc.Generator` 的已弃用的别名。"

#: ../../library/typing.rst:3978
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using "
":class:`collections.abc.Generator` and ``typing.Generator`` in type "
"annotations."
msgstr ""
"有关在注解类型中使用 :class:`collections.abc.Generator` 和 ``typing.Generator`` "
"的详细信息，请参见 :ref:`annotating-generators-and-coroutines`。"

#: ../../library/typing.rst:3982
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:3986
msgid "Default values for the send and return types were added."
msgstr "添加了发送和返回类型的默认值。"

#: ../../library/typing.rst:3991
msgid "Deprecated alias to :class:`collections.abc.Hashable`."
msgstr ":class:`collections.abc.Hashable` 的已弃用的别名。"

#: ../../library/typing.rst:3993
msgid "Use :class:`collections.abc.Hashable` directly instead."
msgstr "请改为直接使用 :class:`collections.abc.Hashable`。"

#: ../../library/typing.rst:3998
msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr ":class:`collections.abc.Reversible` 的已弃用的别名。"

#: ../../library/typing.rst:4000
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See "
":pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` 现在支持下标操作 (``[]``)。 参见 :pep:`585` 和 "
":ref:`types-genericalias`。"

#: ../../library/typing.rst:4006
msgid "Deprecated alias to :class:`collections.abc.Sized`."
msgstr ":class:`collections.abc.Sized` 的已弃用的别名。"

#: ../../library/typing.rst:4008
msgid "Use :class:`collections.abc.Sized` directly instead."
msgstr "请改为直接使用 :class:`collections.abc.Sized`。"

#: ../../library/typing.rst:4014
msgid "Aliases to :mod:`contextlib` ABCs"
msgstr ":mod:`contextlib` ABC 的别名"

#: ../../library/typing.rst:4018
msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr ":class:`contextlib.AbstractContextManager` 的已弃用的别名。"

#: ../../library/typing.rst:4020
msgid ""
"The first type parameter, ``T_co``, represents the type returned by the "
":meth:`~object.__enter__` method. The optional second type parameter, "
"``ExitT_co``, which defaults to ``bool | None``, represents the type "
"returned by the :meth:`~object.__exit__` method."
msgstr ""
"第一个类型形参 ``T_co`` 表示 :meth:`~object.__enter__` 方法返回值的类型。可选的第二个类型形参 "
"``ExitT_co`` 默认为 ``bool | None``，它表示 :meth:`~object.__exit__` 方法返回的类型。"

#: ../../library/typing.rst:4027
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` 现在支持下标操作 (``[]``)。 参见 :pep:`585` "
"和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:4032
msgid "Added the optional second type parameter, ``ExitT_co``."
msgstr "添加了可选的第二个类型形参，``ExitT_co``。"

#: ../../library/typing.rst:4037
msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr ":class:`contextlib.AbstractAsyncContextManager` 的已弃用的别名。"

#: ../../library/typing.rst:4039
msgid ""
"The first type parameter, ``T_co``, represents the type returned by the "
":meth:`~object.__aenter__` method. The optional second type parameter, "
"``AExitT_co``, which defaults to ``bool | None``, represents the type "
"returned by the :meth:`~object.__aexit__` method."
msgstr ""
"第一个类型形参 ``T_co`` 表示 :meth:`~object.__aenter__` 方法返回值的类型。可选的第二个类型形参 "
"``AExitT_co`` 默认为 ``bool | None``，它表示 :meth:`~object.__aexit__` 方法返回的类型。"

#: ../../library/typing.rst:4046
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` 现在 支持下标操作 (``[]``)。 参见 "
":pep:`585` 和 :ref:`types-genericalias`。"

#: ../../library/typing.rst:4051
msgid "Added the optional second type parameter, ``AExitT_co``."
msgstr "添加了可选的第二个类型形参，``AExitT_co``。"

#: ../../library/typing.rst:4055
msgid "Deprecation Timeline of Major Features"
msgstr "主要特性的弃用时间线"

#: ../../library/typing.rst:4057
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future"
" version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""
"``typing`` 的某些特性被弃用，并且可能在将来的 Python "
"版本中被移除。下表总结了主要的弃用特性。该表可能会被更改，而且并没有列出所有的弃用特性。"

#: ../../library/typing.rst:4064
msgid "Feature"
msgstr "特性"

#: ../../library/typing.rst:4065
msgid "Deprecated in"
msgstr "弃用于"

#: ../../library/typing.rst:4066
msgid "Projected removal"
msgstr "计划移除"

#: ../../library/typing.rst:4067
msgid "PEP/issue"
msgstr "PEP/问题"

#: ../../library/typing.rst:4068
msgid "``typing`` versions of standard collections"
msgstr "标准容器的 ``typing`` 版本"

#: ../../library/typing.rst:4069
msgid "3.9"
msgstr "3.9"

#: ../../library/typing.rst:4070
msgid "Undecided (see :ref:`deprecated-aliases` for more information)"
msgstr "未定（请参阅 :ref:`deprecated-aliases` 了解详情）"

#: ../../library/typing.rst:4071
msgid ":pep:`585`"
msgstr ":pep:`585`"

#: ../../library/typing.rst:4072
msgid ":data:`typing.Text`"
msgstr ":data:`typing.Text`"

#: ../../library/typing.rst:4073
msgid "3.11"
msgstr "3.11"

#: ../../library/typing.rst:4074 ../../library/typing.rst:4078
#: ../../library/typing.rst:4082
msgid "Undecided"
msgstr "未确定"

#: ../../library/typing.rst:4075
msgid ":gh:`92332`"
msgstr ":gh:`92332`"

#: ../../library/typing.rst:4076
msgid ":class:`typing.Hashable` and :class:`typing.Sized`"
msgstr ":class:`typing.Hashable` 和 :class:`typing.Sized`"

#: ../../library/typing.rst:4077 ../../library/typing.rst:4081
msgid "3.12"
msgstr "3.12"

#: ../../library/typing.rst:4079
msgid ":gh:`94309`"
msgstr ":gh:`94309`"

#: ../../library/typing.rst:4080
msgid ":data:`typing.TypeAlias`"
msgstr ":data:`typing.TypeAlias`"

#: ../../library/typing.rst:4083
msgid ":pep:`695`"
msgstr ":pep:`695`"

#: ../../library/typing.rst:4084
msgid ":func:`@typing.no_type_check_decorator <no_type_check_decorator>`"
msgstr ":func:`@typing.no_type_check_decorator <no_type_check_decorator>`"

#: ../../library/typing.rst:4085 ../../library/typing.rst:4089
msgid "3.13"
msgstr "3.13"

#: ../../library/typing.rst:4086
msgid "3.15"
msgstr "3.15"

#: ../../library/typing.rst:4087
msgid ":gh:`106309`"
msgstr ":gh:`106309`"

#: ../../library/typing.rst:4088
msgid ":data:`typing.AnyStr`"
msgstr ":data:`typing.AnyStr`"

#: ../../library/typing.rst:4090
msgid "3.18"
msgstr "3.18"

#: ../../library/typing.rst:4091
msgid ":gh:`105578`"
msgstr ":gh:`105578`"
