# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pickletools.rst:2
msgid ":mod:`!pickletools` --- Tools for pickle developers"
msgstr ":mod:`!pickletools` --- pickle 开发者工具"

#: ../../library/pickletools.rst:8
msgid "**Source code:** :source:`Lib/pickletools.py`"
msgstr "**源代码:** :source:`Lib/pickletools.py`"

#: ../../library/pickletools.rst:13
msgid ""
"This module contains various constants relating to the intimate details of "
"the :mod:`pickle` module, some lengthy comments about the implementation, "
"and a few useful functions for analyzing pickled data.  The contents of this"
" module are useful for Python core developers who are working on the "
":mod:`pickle`; ordinary users of the :mod:`pickle` module probably won't "
"find the :mod:`pickletools` module relevant."
msgstr ""
"此模块包含与 :mod:`pickle` 模块内部细节有关的多个常量，一些关于具体实现的详细注释，以及一些能够分析封存数据的有用函数。 "
"此模块的内容对需要操作 :mod:`pickle` 的 Python 核心开发者来说很有用处；:mod:`pickle` 的一般用户则可能会感觉 "
":mod:`pickletools` 模块与他们无关。"

#: ../../library/pickletools.rst:23
msgid "Command-line usage"
msgstr "命令行用法"

#: ../../library/pickletools.rst:27
msgid ""
"When invoked from the command line, ``python -m pickletools`` will "
"disassemble the contents of one or more pickle files.  Note that if you want"
" to see the Python object stored in the pickle rather than the details of "
"pickle format, you may want to use ``-m pickle`` instead. However, when the "
"pickle file that you want to examine comes from an untrusted source, ``-m "
"pickletools`` is a safer option because it does not execute pickle bytecode."
msgstr ""
"当从命令行唤起时，``python -m pickletools`` 将对一个或更多 pickle 文件的内容进行拆解。 请注意如果你查看 pickle"
" 中保存的 Python 对象而非 pickle 格式的细节，你可能需要改用 ``-m pickle``。 但是，当你想检查的 pickle "
"文件来自某个不受信任的源时，``-m pickletools`` 是更安全的选择，因为它不会执行 pickle 字节码。"

#: ../../library/pickletools.rst:35
msgid "For example, with a tuple ``(1, 2)`` pickled in file ``x.pickle``:"
msgstr "例如，对于一个封存在文件 ``x.pickle`` 中的元组 ``(1, 2)``:"

#: ../../library/pickletools.rst:37
msgid ""
"$ python -m pickle x.pickle\n"
"(1, 2)\n"
"\n"
"$ python -m pickletools x.pickle\n"
"    0: \\x80 PROTO      3\n"
"    2: K    BININT1    1\n"
"    4: K    BININT1    2\n"
"    6: \\x86 TUPLE2\n"
"    7: q    BINPUT     0\n"
"    9: .    STOP\n"
"highest protocol among opcodes = 2"
msgstr ""
"$ python -m pickle x.pickle\n"
"(1, 2)\n"
"\n"
"$ python -m pickletools x.pickle\n"
"    0: \\x80 PROTO      3\n"
"    2: K    BININT1    1\n"
"    4: K    BININT1    2\n"
"    6: \\x86 TUPLE2\n"
"    7: q    BINPUT     0\n"
"    9: .    STOP\n"
"highest protocol among opcodes = 2"

#: ../../library/pickletools.rst:52
msgid "Command-line options"
msgstr "命令行选项"

#: ../../library/pickletools.rst:58
msgid "Annotate each line with a short opcode description."
msgstr "使用简短的操作码描述来标注每一行。"

#: ../../library/pickletools.rst:62
msgid "Name of a file where the output should be written."
msgstr "输出应当写入到的文件名称。"

#: ../../library/pickletools.rst:66
msgid "The number of blanks by which to indent a new MARK level."
msgstr "一个新的 MARK 层级所需缩进的空格数。"

#: ../../library/pickletools.rst:70
msgid ""
"When multiple objects are disassembled, preserve memo between disassemblies."
msgstr "当反汇编多个对象时，保留各个反汇编的备忘记录。"

#: ../../library/pickletools.rst:75
msgid ""
"When more than one pickle file is specified, print given preamble before "
"each disassembly."
msgstr "当指定了多个 pickle 文件时，在每次反汇编之前将打印给定的前言。"

#: ../../library/pickletools.rst:80
msgid ""
"A pickle file to read, or ``-`` to indicate reading from standard input."
msgstr "一个要读取的 pickle 文件，或者为 ``-`` 表示从标准输入读取。"

#: ../../library/pickletools.rst:85
msgid "Programmatic interface"
msgstr "编程接口"

#: ../../library/pickletools.rst:90
msgid ""
"Outputs a symbolic disassembly of the pickle to the file-like object *out*, "
"defaulting to ``sys.stdout``.  *pickle* can be a string or a file-like "
"object.  *memo* can be a Python dictionary that will be used as the pickle's"
" memo; it can be used to perform disassemblies across multiple pickles "
"created by the same pickler. Successive levels, indicated by ``MARK`` "
"opcodes in the stream, are indented by *indentlevel* spaces.  If a nonzero "
"value is given to *annotate*, each opcode in the output is annotated with a "
"short description.  The value of *annotate* is used as a hint for the column"
" where annotation should start."
msgstr ""
"将 pickle 的符号化反汇编数据输出到文件型对象 *out*，默认为 ``sys.stdout``。 *pickle* "
"可以是一个字符串或一个文件型对象。 *memo* 可以是一个将被用作 pickle 的备忘记录的 Python "
"字典；它可被用来对由同一封存器创建的多个封存对象执行反汇编。 由 ``MARK`` 操作码指明的每个连续级别将会缩进 *indentlevel* "
"个空格。 如果为 *annotate* 指定了一个非零值，则输出中的每个操作码将以一个简短描述来标注。 *annotate* "
"的值会被用作标注所应开始的列的提示。"

#: ../../library/pickletools.rst:101
msgid "Added the *annotate* parameter."
msgstr "增加了 *annotate* 形参。"

#: ../../library/pickletools.rst:106
msgid ""
"Provides an :term:`iterator` over all of the opcodes in a pickle, returning "
"a sequence of ``(opcode, arg, pos)`` triples.  *opcode* is an instance of an"
" :class:`OpcodeInfo` class; *arg* is the decoded value, as a Python object, "
"of the opcode's argument; *pos* is the position at which this opcode is "
"located. *pickle* can be a string or a file-like object."
msgstr ""
"提供包含 pickle 中所有操作码的 :term:`iterator`，返回一个 ``(opcode, arg, pos)`` 三元组的序列。 "
"*opcode* 是 :class:`OpcodeInfo` 类的一个实例；*arg* 是 Python 对象形式的 opcode "
"参数的已解码值；*pos* 是 opcode 所在的位置。 *pickle* 可以是一个字符串或一个文件型对象。"

#: ../../library/pickletools.rst:114
msgid ""
"Returns a new equivalent pickle string after eliminating unused ``PUT`` "
"opcodes. The optimized pickle is shorter, takes less transmission time, "
"requires less storage space, and unpickles more efficiently."
msgstr ""
"在消除未使用的 ``PUT`` 操作码之后返回一个新的等效 pickle 字符串。 优化后的 pickle "
"将更为简短，耗费更少的传输时间，要求更少的存储空间并能更高效地解封。"
