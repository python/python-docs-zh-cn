# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/http.client.rst:2
msgid ":mod:`http.client` --- HTTP protocol client"
msgstr ":mod:`http.client` --- HTTP 协议客户端"

#: ../../library/http.client.rst:7
msgid "**Source code:** :source:`Lib/http/client.py`"
msgstr "**源代码：** :source:`Lib/http/client.py`"

#: ../../library/http.client.rst:17
msgid ""
"This module defines classes that implement the client side of the HTTP and "
"HTTPS protocols.  It is normally not used directly --- the module "
":mod:`urllib.request` uses it to handle URLs that use HTTP and HTTPS."
msgstr ""
"这个模块定义了实现 HTTP 和 HTTPS 协议客户端的类。 它通常不直接使用 --- 模块 :mod:`urllib.request` "
"会用它来处理使用 HTTP 和 HTTPS 的 URL。"

#: ../../library/http.client.rst:23
msgid ""
"The `Requests package <https://requests.readthedocs.io/en/master/>`_ is "
"recommended for a higher-level HTTP client interface."
msgstr ""
"对于更高级别的 HTTP 客户端接口，建议使用 `Requests "
"<https://requests.readthedocs.io/en/master/>`_  。"

#: ../../library/http.client.rst:28
msgid ""
"HTTPS support is only available if Python was compiled with SSL support "
"(through the :mod:`ssl` module)."
msgstr "HTTPS 支持仅在编译 Python 时启用了 SSL 支持的情况下（通过 :mod:`ssl` 模块）可用。"

#: ../../library/http.client.rst:31
msgid "The module provides the following classes:"
msgstr "该模块支持以下类："

#: ../../library/http.client.rst:37
msgid ""
"An :class:`HTTPConnection` instance represents one transaction with an HTTP "
"server.  It should be instantiated by passing it a host and optional port "
"number.  If no port number is passed, the port is extracted from the host "
"string if it has the form ``host:port``, else the default HTTP port (80) is "
"used.  If the optional *timeout* parameter is given, blocking operations "
"(like connection attempts) will timeout after that many seconds (if it is "
"not given, the global default timeout setting is used). The optional "
"*source_address* parameter may be a tuple of a (host, port) to use as the "
"source address the HTTP connection is made from. The optional *blocksize* "
"parameter sets the buffer size in bytes for sending a file-like message "
"body."
msgstr ""
":class:`HTTPConnection` 的实例代表与 HTTP 服务器的一个连接事务。 它在实例化时应当传入一个主机和可选的端口号。 "
"若未传入端口号，则如果主机字符串的形式为 ``host:port`` 则会从中提取端口，否则将使用默认的 HTTP 端口（80）。 如果给出了可选的 "
"*timeout* 形参，则阻塞操作（如连接尝试）将在指定的秒数之后超时（如果未给出，则使用全局默认超时设置）。 可选的 "
"*source_address* 形参可以是一个 (host, port) 元组，用作进行 HTTP 连接的源地址。 可选的 *blocksize* "
"形参以字节为单位设置缓冲区的大小，用来发送文件类消息体。"

#: ../../library/http.client.rst:49
msgid ""
"For example, the following calls all create instances that connect to the "
"server at the same host and port::"
msgstr "举个例子，以下调用都是创建连接到同一主机和端口的服务器的实例："

#: ../../library/http.client.rst:57
msgid "*source_address* was added."
msgstr "添加了*source_address* 参数"

#: ../../library/http.client.rst:60
msgid ""
"The  *strict* parameter was removed. HTTP 0.9-style \"Simple Responses\" are"
" no longer supported."
msgstr "移除了 *strict* 形参。 不再支持 HTTP 0.9 风格的“简单响应”。"

#: ../../library/http.client.rst:64
msgid "*blocksize* parameter was added."
msgstr "添加了 *blocksize* 参数。"

#: ../../library/http.client.rst:73
msgid ""
"A subclass of :class:`HTTPConnection` that uses SSL for communication with "
"secure servers.  Default port is ``443``.  If *context* is specified, it "
"must be a :class:`ssl.SSLContext` instance describing the various SSL "
"options."
msgstr ""
":class:`HTTPConnection` 的子类，使用 SSL 与安全服务器进行通信。 默认端口为 ``443``。 如果指定了 "
"*context*，它必须为一个描述 SSL 各选项的 :class:`ssl.SSLContext` 实例。"

#: ../../library/http.client.rst:78
msgid ""
"Please read :ref:`ssl-security` for more information on best practices."
msgstr "请参阅 :ref:`ssl-security` 了解有关最佳实践的更多信息。"

#: ../../library/http.client.rst:80
msgid "*source_address*, *context* and *check_hostname* were added."
msgstr "添加了 *source_address*, *context* 和 *check_hostname*。"

#: ../../library/http.client.rst:83
msgid ""
"This class now supports HTTPS virtual hosts if possible (that is, if "
":data:`ssl.HAS_SNI` is true)."
msgstr "这个类目前会在可能的情况下（即如果 :data:`ssl.HAS_SNI` 为真值）支持 HTTPS 虚拟主机。"

#: ../../library/http.client.rst:87
msgid ""
"The *strict* parameter was removed. HTTP 0.9-style \"Simple Responses\" are "
"no longer supported."
msgstr "删除了 *strict* 参数，不再支持 HTTP 0.9 风格的“简单响应”。"

#: ../../library/http.client.rst:91
msgid ""
"This class now performs all the necessary certificate and hostname checks by"
" default. To revert to the previous, unverified, behavior "
":func:`ssl._create_unverified_context` can be passed to the *context* "
"parameter."
msgstr ""
"目前这个类在默认情况下会执行所有必要的证书和主机检查。 要回复到先前的非验证行为，可以将 "
":func:`ssl._create_unverified_context` 传递给 *context* 参数。"

#: ../../library/http.client.rst:97
msgid ""
"This class now enables TLS 1.3 :attr:`ssl.SSLContext.post_handshake_auth` "
"for the default *context* or when *cert_file* is passed with a custom "
"*context*."
msgstr ""
"该类现在对于默认的 *context* 或在传入 *cert_file* 并附带自定义 *context* 时会启用 TLS 1.3 "
":attr:`ssl.SSLContext.post_handshake_auth`。"

#: ../../library/http.client.rst:102
msgid ""
"This class now sends an ALPN extension with protocol indicator ``http/1.1`` "
"when no *context* is given. Custom *context* should set ALPN protocols with "
":meth:`~ssl.SSLContext.set_alpn_protocol`."
msgstr ""
"现在，若未给出 *context*，则会发送一个带有协议指示器 ``http/1.1`` 的ALPN 扩展。自定义 *context* 应用 "
":meth:`~ssl.SSLContext.set_alpn_protocol` 设置 ALPN 协议。"

#: ../../library/http.client.rst:109
msgid ""
"*key_file* and *cert_file* are deprecated in favor of *context*. Please use "
":meth:`ssl.SSLContext.load_cert_chain` instead, or let "
":func:`ssl.create_default_context` select the system's trusted CA "
"certificates for you."
msgstr ""
"*key_file* 和 *cert_file* 已弃用并转而推荐 *context*。 请改用 "
":meth:`ssl.SSLContext.load_cert_chain` 或让 :func:`ssl.create_default_context`"
" 为你选择系统所信任的 CA 证书。"

#: ../../library/http.client.rst:114
msgid ""
"The *check_hostname* parameter is also deprecated; the "
":attr:`ssl.SSLContext.check_hostname` attribute of *context* should be used "
"instead."
msgstr ""
"*check_hostname* 参数也已弃用；应当改用 *context* 的 "
":attr:`ssl.SSLContext.check_hostname` 属性。"

#: ../../library/http.client.rst:121
msgid ""
"Class whose instances are returned upon successful connection.  Not "
"instantiated directly by user."
msgstr "在成功连接后返回类的实例，而不是由用户直接实例化。"

#: ../../library/http.client.rst:124
msgid ""
"The *strict* parameter was removed. HTTP 0.9 style \"Simple Responses\" are "
"no longer supported."
msgstr "删除了 *strict* 参数，不再支持HTTP 0.9 风格的“简单响应”。"

#: ../../library/http.client.rst:128
msgid "This module provides the following function:"
msgstr "这个模块定义了以下函数："

#: ../../library/http.client.rst:132
msgid ""
"Parse the headers from a file pointer *fp* representing a HTTP "
"request/response. The file has to be a :class:`BufferedIOBase` reader (i.e. "
"not text) and must provide a valid :rfc:`2822` style header."
msgstr ""
"从文件指针 *fp* 中解析头部信息，该文件代表 HTTP 请求/响应。该文件必须是 :class:`BufferedIOBase`  reader "
"对象（即不是文本），并且必须提供符合 :rfc:`2822` 格式的头部。"

#: ../../library/http.client.rst:136
msgid ""
"This function returns an instance of :class:`http.client.HTTPMessage` that "
"holds the header fields, but no payload (the same as "
":attr:`HTTPResponse.msg` and "
":attr:`http.server.BaseHTTPRequestHandler.headers`). After returning, the "
"file pointer *fp* is ready to read the HTTP body."
msgstr ""
"该函数返回 :class:`http.client.HTTPMessage` 的实例，带有头部各个字段，但不带正文数据（与 "
":attr:`HTTPResponse.msg` 和 "
":attr:`http.server.BaseHTTPRequestHandler.headers` 一样）。返回之后，文件指针 *fp* 已为读取 "
"HTTP 正文做好准备了。"

#: ../../library/http.client.rst:143
msgid ""
":meth:`parse_headers` does not parse the start-line of a HTTP message; it "
"only parses the ``Name: value`` lines. The file has to be ready to read "
"these field lines, so the first line should already be consumed before "
"calling the function."
msgstr ""
":meth:`parse_headers` 不会解析 HTTP 消息的开始行；只会解析各 ``Name: value`` "
"行。文件必须为读取这些字段做好准备，所以在调用该函数之前，第一行应该已经被读取过了。"

#: ../../library/http.client.rst:148
msgid "The following exceptions are raised as appropriate:"
msgstr "下列异常可以适当地被引发:"

#: ../../library/http.client.rst:153
msgid ""
"The base class of the other exceptions in this module.  It is a subclass of "
":exc:`Exception`."
msgstr "此模块中其他异常的基类。 它是 :exc:`Exception` 的一个子类。"

#: ../../library/http.client.rst:159 ../../library/http.client.rst:170
#: ../../library/http.client.rst:175 ../../library/http.client.rst:180
#: ../../library/http.client.rst:185 ../../library/http.client.rst:190
msgid "A subclass of :exc:`HTTPException`."
msgstr ":exc:`HTTPException` 的一个子类。"

#: ../../library/http.client.rst:164
msgid ""
"A subclass of :exc:`HTTPException`, raised if a port is given and is either "
"non-numeric or empty."
msgstr ":exc:`HTTPException` 的一个子类，如果给出了一个非数字或为空值的端口就会被引发。"

#: ../../library/http.client.rst:195 ../../library/http.client.rst:200
#: ../../library/http.client.rst:205
msgid "A subclass of :exc:`ImproperConnectionState`."
msgstr ":exc:`ImproperConnectionState` 的一个子类。"

#: ../../library/http.client.rst:210
msgid ""
"A subclass of :exc:`HTTPException`.  Raised if a server responds with a HTTP"
" status code that we don't understand."
msgstr ":exc:`HTTPException` 的一个子类。 如果服务器反馈了一个我们不理解的 HTTP 状态码就会被引发。"

#: ../../library/http.client.rst:216
msgid ""
"A subclass of :exc:`HTTPException`.  Raised if an excessively long line is "
"received in the HTTP protocol from the server."
msgstr ":exc:`HTTPException` 的一个子类。 如果在 HTTP 协议中从服务器接收到过长的行就会被引发。"

#: ../../library/http.client.rst:222
msgid ""
"A subclass of :exc:`ConnectionResetError` and :exc:`BadStatusLine`.  Raised "
"by :meth:`HTTPConnection.getresponse` when the attempt to read the response "
"results in no data read from the connection, indicating that the remote end "
"has closed the connection."
msgstr ""
":exc:`ConnectionResetError` 和 :exc:`BadStatusLine` 的一个子类。 "
"当尝试读取响应时的结果是未从连接读取到数据时由 :meth:`HTTPConnection.getresponse` 引发，表明远端已关闭连接。"

#: ../../library/http.client.rst:227
msgid "Previously, :exc:`BadStatusLine`\\ ``('')`` was raised."
msgstr "在此之前引发的异常为 :exc:`BadStatusLine`\\ ``('')``。"

#: ../../library/http.client.rst:231
msgid "The constants defined in this module are:"
msgstr "此模块中定义的常量为："

#: ../../library/http.client.rst:235
msgid "The default port for the HTTP protocol (always ``80``)."
msgstr "HTTP 协议默认的端口号 (总是 ``80``)。"

#: ../../library/http.client.rst:239
msgid "The default port for the HTTPS protocol (always ``443``)."
msgstr "HTTPS 协议默认的端口号 (总是 ``443``)。"

#: ../../library/http.client.rst:243
msgid "This dictionary maps the HTTP 1.1 status codes to the W3C names."
msgstr "这个字典把 HTTP 1.1 状态码映射到 W3C 名称。"

#: ../../library/http.client.rst:245
msgid ""
"Example: ``http.client.responses[http.client.NOT_FOUND]`` is ``'Not "
"Found'``."
msgstr ""
"例如：``http.client.responses[http.client.NOT_FOUND]`` 是 ``'NOT FOUND`` （未发现）。"

#: ../../library/http.client.rst:247
msgid ""
"See :ref:`http-status-codes` for a list of HTTP status codes that are "
"available in this module as constants."
msgstr "本模块中可用的 HTTP 状态码常量可以参见 :ref:`http-status-codes` 。"

#: ../../library/http.client.rst:254
msgid "HTTPConnection Objects"
msgstr "HTTPConnection 对象"

#: ../../library/http.client.rst:256
msgid ":class:`HTTPConnection` instances have the following methods:"
msgstr ":class:`HTTPConnection` 实例拥有以下方法："

#: ../../library/http.client.rst:262
msgid ""
"This will send a request to the server using the HTTP request method "
"*method* and the selector *url*."
msgstr "这会使用 HTTP 请求方法 *method* 和选择器 *url* 向服务器发送请求。"

#: ../../library/http.client.rst:265
msgid ""
"If *body* is specified, the specified data is sent after the headers are "
"finished.  It may be a :class:`str`, a :term:`bytes-like object`, an open "
":term:`file object`, or an iterable of :class:`bytes`.  If *body* is a "
"string, it is encoded as ISO-8859-1, the default for HTTP.  If it is a "
"bytes-like object, the bytes are sent as is.  If it is a :term:`file "
"object`, the contents of the file is sent; this file object should support "
"at least the ``read()`` method.  If the file object is an instance of "
":class:`io.TextIOBase`, the data returned by the ``read()`` method will be "
"encoded as ISO-8859-1, otherwise the data returned by ``read()`` is sent as "
"is.  If *body* is an iterable, the elements of the iterable are sent as is "
"until the iterable is exhausted."
msgstr ""
"如果给定 *body*，那么给定的数据会在信息头完成之后发送。它可能是一个 :class:`字符串`，一个 :term:`bytes-like "
"object`，一个打开的 :term:`file object`，或者 :class:`bytes` 迭代器。如果 *body* 是字符串，它会按 "
"HTTP 默认的 ISO-8859-1 编码。如果是一个字节类对象，它会按原样发送。如果是 :term:`file "
"object`，文件的内容会被发送，这个文件对象应该至少支持 ``read()`` 方法。如果这个文件对象是一个 "
":class:`io.TextIOBase` 实例，由 ``read()`` 方法返回的数据会按 ISO-8859-1 编码，否则由 "
"``read()`` 方法返回的数据会按原样发送。如果 *body* 是一个迭代器，迭代器中的元素会被发送，直到迭代器耗尽。"

#: ../../library/http.client.rst:277
msgid ""
"The *headers* argument should be a mapping of extra HTTP headers to send "
"with the request."
msgstr "*headers* 参数应是额外的随请求发送的 HTTP 信息头的字典。"

#: ../../library/http.client.rst:280
msgid ""
"If *headers* contains neither Content-Length nor Transfer-Encoding, but "
"there is a request body, one of those header fields will be added "
"automatically.  If *body* is ``None``, the Content-Length header is set to "
"``0`` for methods that expect a body (``PUT``, ``POST``, and ``PATCH``).  If"
" *body* is a string or a bytes-like object that is not also a :term:`file "
"<file object>`, the Content-Length header is set to its length.  Any other "
"type of *body* (files and iterables in general) will be chunk-encoded, and "
"the Transfer-Encoding header will automatically be set instead of Content-"
"Length."
msgstr ""
"如果 *headers* 既不包含 Content-Length 也没有 Transfer-"
"Encoding，但存在请求正文，那么这些头字段中的一个会自动设定。如果 *body* 是 ``None``，那么对于要求正文的方法 "
"(``PUT``，``POST``，和 ``PATCH``)，Content-Length 头会被设为 ``0``。如果 *body* "
"是字符串或者类似字节的对象，并且也不是 :term:`文件<file object>`，Content-Length 头会设为正文的长度。任何其他类型的"
" *body* （一般是文件或迭代器）会按块编码，这时会自动设定 Transfer-Encoding 头以代替 Content-Length。"

#: ../../library/http.client.rst:292
msgid ""
"The *encode_chunked* argument is only relevant if Transfer-Encoding is "
"specified in *headers*.  If *encode_chunked* is ``False``, the "
"HTTPConnection object assumes that all encoding is handled by the calling "
"code.  If it is ``True``, the body will be chunk-encoded."
msgstr ""
"在 *headers* 中指定 Transfer-Encoding 时， *encode_chunked* 是唯一相关的参数。如果 "
"*encode_chunked* 为 ``False``，HTTPConnection 对象会假定所有的编码都由调用代码处理。如果为 "
"``True``，正文会按块编码。"

#: ../../library/http.client.rst:298
msgid ""
"Chunked transfer encoding has been added to the HTTP protocol version 1.1.  "
"Unless the HTTP server is known to handle HTTP 1.1, the caller must either "
"specify the Content-Length, or must pass a :class:`str` or bytes-like object"
" that is not also a file as the body representation."
msgstr ""
"HTTP 协议在 1.1 版中添加了块传输编码。除非明确知道 HTTP 服务器可以处理 HTTP 1.1，调用者要么必须指定 Content-"
"Length，要么必须传入 :class:`str` 或字节类对象，注意该对象不能是表达 body 的文件。"

#: ../../library/http.client.rst:304
msgid "*body* can now be an iterable."
msgstr "*body* 现在可以是可迭代对象了。"

#: ../../library/http.client.rst:307
msgid ""
"If neither Content-Length nor Transfer-Encoding are set in *headers*, file "
"and iterable *body* objects are now chunk-encoded. The *encode_chunked* "
"argument was added. No attempt is made to determine the Content-Length for "
"file objects."
msgstr ""
"如果 Content-Length 和 Transfer-Encoding 都没有在 *headers* 中设置，文件和可迭代的 *body* "
"对象现在会按块编码。添加了 *encode_chunked* 参数。不会尝试去确定文件对象的 Content-Length。"

#: ../../library/http.client.rst:316
msgid ""
"Should be called after a request is sent to get the response from the "
"server. Returns an :class:`HTTPResponse` instance."
msgstr "应当在发送一个请求从服务器获取响应时被调用。 返回一个 :class:`HTTPResponse` 的实例。"

#: ../../library/http.client.rst:321
msgid ""
"Note that you must have read the whole response before you can send a new "
"request to the server."
msgstr "请注意你必须在读取了整个响应之后才能向服务器发送新的请求。"

#: ../../library/http.client.rst:324
msgid ""
"If a :exc:`ConnectionError` or subclass is raised, the "
":class:`HTTPConnection` object will be ready to reconnect when a new request"
" is sent."
msgstr ""
"如果引发了 :exc:`ConnectionError` 或其子类， :class:`HTTPConnection` "
"对象将在发送新的请求时准备好重新连接。"

#: ../../library/http.client.rst:332
msgid ""
"Set the debugging level.  The default debug level is ``0``, meaning no "
"debugging output is printed.  Any value greater than ``0`` will cause all "
"currently defined debug output to be printed to stdout.  The ``debuglevel`` "
"is passed to any new :class:`HTTPResponse` objects that are created."
msgstr ""
"设置调试等级。 默认的调试等级为 ``0``，意味着不会打印调试输出。 任何大于 ``0`` 的值将使得所有当前定义的调试输出被打印到 stdout。 "
"``debuglevel`` 会被传给任何新创建的 :class:`HTTPResponse` 对象。"

#: ../../library/http.client.rst:342
msgid ""
"Set the host and the port for HTTP Connect Tunnelling. This allows running "
"the connection through a proxy server."
msgstr "为 HTTP 连接隧道设置主机和端口。 这将允许通过代理服务器运行连接。"

#: ../../library/http.client.rst:345
msgid ""
"The host and port arguments specify the endpoint of the tunneled connection "
"(i.e. the address included in the CONNECT request, *not* the address of the "
"proxy server)."
msgstr "host 和 port 参数指明隧道连接的位置（即 CONNECT 请求所包含的地址，而 *不是* 代理服务器的地址）。"

#: ../../library/http.client.rst:349
msgid ""
"The headers argument should be a mapping of extra HTTP headers to send with "
"the CONNECT request."
msgstr "headers 参数应为一个随 CONNECT 请求发送的额外 HTTP 标头的映射。"

#: ../../library/http.client.rst:352
msgid ""
"For example, to tunnel through a HTTPS proxy server running locally on port "
"8080, we would pass the address of the proxy to the :class:`HTTPSConnection`"
" constructor, and the address of the host that we eventually want to reach "
"to the :meth:`~HTTPConnection.set_tunnel` method::"
msgstr ""
"例如，要通过一个运行于本机 8080 端口的 HTTPS 代理服务器隧道，我们应当向 :class:`HTTPSConnection` "
"构造器传入代理的地址，并将我们最终想要访问的主机地址传给 :meth:`~HTTPConnection.set_tunnel` 方法::"

#: ../../library/http.client.rst:367
msgid ""
"Connect to the server specified when the object was created.  By default, "
"this is called automatically when making a request if the client does not "
"already have a connection."
msgstr "当对象被创建后连接到指定的服务器。 默认情况下，如果客户端还未建立连接，此函数会在发送请求时自动被调用。"

#: ../../library/http.client.rst:371
msgid ""
"Raises an :ref:`auditing event <auditing>` ``http.client.connect`` with "
"arguments ``self``, ``host``, ``port``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``http.client.connect`` 并附带参数 ``self``, "
"``host``, ``port``。"

#: ../../library/http.client.rst:376
msgid "Close the connection to the server."
msgstr "关闭到服务器的连接。"

#: ../../library/http.client.rst:381
msgid "Buffer size in bytes for sending a file-like message body."
msgstr "用于发送文件类消息体的缓冲区大小。"

#: ../../library/http.client.rst:386
msgid ""
"As an alternative to using the :meth:`request` method described above, you "
"can also send your request step by step, by using the four functions below."
msgstr "作为对使用上述 :meth:`request` 方法的替代同，你也可以通过使用下面的四个函数，分步骤发送请的请求。"

#: ../../library/http.client.rst:393
msgid ""
"This should be the first call after the connection to the server has been "
"made. It sends a line to the server consisting of the *method* string, the "
"*url* string, and the HTTP version (``HTTP/1.1``).  To disable automatic "
"sending of ``Host:`` or ``Accept-Encoding:`` headers (for example to accept "
"additional content encodings), specify *skip_host* or *skip_accept_encoding*"
" with non-False values."
msgstr ""
"应为连接服务器之后首先调用的函数。将向服务器发送一行数据，包含 *method* 字符串、*url* 字符串和 HTTP "
"版本（``HTTP/1.1``）。若要禁止自动发送 ``Host:`` 或 ``Accept-Encoding:`` "
"头部信息（比如需要接受其他编码格式的内容），请将 *skip_host* 或 *skip_accept_encoding* 设为非 False 值。"

#: ../../library/http.client.rst:403
msgid ""
"Send an :rfc:`822`\\ -style header to the server.  It sends a line to the "
"server consisting of the header, a colon and a space, and the first "
"argument.  If more arguments are given, continuation lines are sent, each "
"consisting of a tab and an argument."
msgstr ""
"向服务器发送一个 :rfc:`822` 格式的头部。将向服务器发送一行由头、冒号和空格以及第一个参数组成的数据。 "
"如果还给出了其他参数，将在后续行中发送，每行由一个制表符和一个参数组成。"

#: ../../library/http.client.rst:411
msgid ""
"Send a blank line to the server, signalling the end of the headers. The "
"optional *message_body* argument can be used to pass a message body "
"associated with the request."
msgstr "向服务器发送一个空行，表示头部文件结束。可选的 *message_body* 参数可用于传入一个与请求相关的消息体。"

#: ../../library/http.client.rst:415
msgid ""
"If *encode_chunked* is ``True``, the result of each iteration of "
"*message_body* will be chunk-encoded as specified in :rfc:`7230`, Section "
"3.3.1.  How the data is encoded is dependent on the type of *message_body*."
"  If *message_body* implements the :ref:`buffer interface <bufferobjects>` "
"the encoding will result in a single chunk. If *message_body* is a "
":class:`collections.abc.Iterable`, each iteration of *message_body* will "
"result in a chunk.  If *message_body* is a :term:`file object`, each call to"
" ``.read()`` will result in a chunk. The method automatically signals the "
"end of the chunk-encoded data immediately after *message_body*."
msgstr ""
"如果 *encode_chunked* 为 ``True``，则对 *message_body* 的每次迭代结果将依照 :rfc:`7230` "
"3.3.1 节的规范进行分块编码。数据如何编码取决于 *message_body* 的类型。 如果 *message_body* 实现了 "
":ref:`buffer 接口 <bufferobjects>`，编码将生成一个数据块。如果 *message_body* 是  "
":class:`collections.abc.Iterable`，则 *message_body* 的每次迭代都会产生一个块。 如果 "
"*message_body* 为  :term:`file object`，那么每次调用 ``.read()`` 都会产生一个数据块。在 "
"*message_body* 结束后，本方法立即会自动标记分块编码数据的结束。"

#: ../../library/http.client.rst:426
msgid ""
"Due to the chunked encoding specification, empty chunks yielded by an "
"iterator body will be ignored by the chunk-encoder. This is to avoid "
"premature termination of the read of the request by the target server due to"
" malformed encoding."
msgstr "由于分块编码的规范要求，迭代器本身产生的空块将被分块编码器忽略。这是为了避免目标服务器因错误编码而过早终止对请求的读取。"

#: ../../library/http.client.rst:431
msgid "Chunked encoding support.  The *encode_chunked* parameter was added."
msgstr "支持分块编码。加入了 *encode_chunked* 参数。"

#: ../../library/http.client.rst:438
msgid ""
"Send data to the server.  This should be used directly only after the "
":meth:`endheaders` method has been called and before :meth:`getresponse` is "
"called."
msgstr ""
"发送数据到服务器。本函数只应在调用 :meth:`endheaders` 方法之后且调用  :meth:`getresponse` 之前直接调用。"

#: ../../library/http.client.rst:442
msgid ""
"Raises an :ref:`auditing event <auditing>` ``http.client.send`` with "
"arguments ``self``, ``data``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``http.client.send`` 并附带参数 ``self``, ``data``。"

#: ../../library/http.client.rst:448
msgid "HTTPResponse Objects"
msgstr "HTTPResponse 对象"

#: ../../library/http.client.rst:450
msgid ""
"An :class:`HTTPResponse` instance wraps the HTTP response from the server.  "
"It provides access to the request headers and the entity body.  The response"
" is an iterable object and can be used in a with statement."
msgstr ""
":class:`HTTPResponse` 实例封装了来自服务器的 HTTP 响应。通过它可以访问请求头和响应体。响应是可迭代对象，可在 with "
"语句中使用。"

#: ../../library/http.client.rst:455
msgid ""
"The :class:`io.BufferedIOBase` interface is now implemented and all of its "
"reader operations are supported."
msgstr "现在已实现了 :class:`io.BufferedIOBase` 接口，并且支持所有的读取操作。"

#: ../../library/http.client.rst:462
msgid "Reads and returns the response body, or up to the next *amt* bytes."
msgstr "读取并返回响应体，或后续 *amt* 个字节。"

#: ../../library/http.client.rst:466
msgid ""
"Reads up to the next len(b) bytes of the response body into the buffer *b*. "
"Returns the number of bytes read."
msgstr "读取响应体的后续 len(b) 个字节到缓冲区 *b*。返回读取的字节数。"

#: ../../library/http.client.rst:473
msgid ""
"Return the value of the header *name*, or *default* if there is no header "
"matching *name*.  If there is more than one  header with the name *name*, "
"return all of the values joined by ', '.  If *default* is any iterable other"
" than a single string, its elements are similarly returned joined by commas."
msgstr ""
"返回标头 *name* 的值，或者如果没有匹配 *name* 的标头则返回 *default*。 如果名为 *name* 的标头不止一个，则返回以 ',"
" ' 连接的所有值。 如果 *default* 是任何不为单个字符串的可迭代对象，则其元素同样会以逗号连接的形式返回。"

#: ../../library/http.client.rst:480
msgid "Return a list of (header, value) tuples."
msgstr "返回  (header, value) 元组构成的列表。"

#: ../../library/http.client.rst:484
msgid "Return the ``fileno`` of the underlying socket."
msgstr "返回底层套接字的 ``fileno``。"

#: ../../library/http.client.rst:488
msgid ""
"A :class:`http.client.HTTPMessage` instance containing the response headers."
"  :class:`http.client.HTTPMessage` is a subclass of "
":class:`email.message.Message`."
msgstr ""
"包含响应头的 :class:`http.client.HTTPMessage` 实例。:class:`http.client.HTTPMessage` "
"是 :class:`email.message` 的子类。"

#: ../../library/http.client.rst:494
msgid ""
"HTTP protocol version used by server.  10 for HTTP/1.0, 11 for HTTP/1.1."
msgstr "服务器采用的 HTTP 协议版本。10 代表 HTTP/1.0，11 代表 HTTP/1.1。"

#: ../../library/http.client.rst:498
msgid ""
"URL of the resource retrieved, commonly used to determine if a redirect was "
"followed."
msgstr "已读取资源的 URL，通常用于确定是否进行了重定向。"

#: ../../library/http.client.rst:502
msgid ""
"Headers of the response in the form of an "
":class:`email.message.EmailMessage` instance."
msgstr "响应的头部信息，形式为 :class:`email.message.EmailMessage` 的实例。"

#: ../../library/http.client.rst:506
msgid "Status code returned by server."
msgstr "由服务器返回的状态码。"

#: ../../library/http.client.rst:510
msgid "Reason phrase returned by server."
msgstr "服务器返回的原因短语。"

#: ../../library/http.client.rst:514
msgid ""
"A debugging hook.  If :attr:`debuglevel` is greater than zero, messages will"
" be printed to stdout as the response is read and parsed."
msgstr "一个调试钩子。如果 :attr:`debuglevel` 大于零，状态信息将在读取和解析响应数据时打印输出到 stdout。"

#: ../../library/http.client.rst:519
msgid "Is ``True`` if the stream is closed."
msgstr "如果流被关闭，则为 ``True``。"

#: ../../library/http.client.rst:523
msgid "Deprecated in favor of :attr:`~HTTPResponse.url`."
msgstr "已弃用，建议用 :attr:`~HTTPResponse.url`。"

#: ../../library/http.client.rst:528
msgid "Deprecated in favor of :attr:`~HTTPResponse.headers`."
msgstr "已弃用，建议用 :attr:`~HTTPResponse.headers`。"

#: ../../library/http.client.rst:533
msgid "Deprecated in favor of :attr:`~HTTPResponse.status`."
msgstr "已弃用，建议用 :attr:`~HTTPResponse.status` 。"

#: ../../library/http.client.rst:537
msgid "Examples"
msgstr "例子"

#: ../../library/http.client.rst:539
msgid "Here is an example session that uses the ``GET`` method::"
msgstr "下面是使用 ``GET`` 方法的会话示例："

#: ../../library/http.client.rst:564
msgid ""
"Here is an example session that uses the ``HEAD`` method.  Note that the "
"``HEAD`` method never returns any data. ::"
msgstr "以下是使用 ``HEAD`` 方法的会话示例。 请注意，``HEAD`` 方法从不返回任何数据。"

#: ../../library/http.client.rst:579
msgid "Here is an example session that uses the ``POST`` method::"
msgstr "下面是一个使用 ``POST`` 方法的会话示例::"

#: ../../library/http.client.rst:595
msgid ""
"Client side HTTP ``PUT`` requests are very similar to ``POST`` requests. The"
" difference lies only on the server side where HTTP servers will allow "
"resources to be created via ``PUT`` requests. It should be noted that custom"
" HTTP methods are also handled in :class:`urllib.request.Request` by setting"
" the appropriate method attribute. Here is an example session that uses the "
"``PUT`` method::"
msgstr ""
"客户端 HTTP ``PUT`` 请求与 ``POST`` 请求非常相似。 区别仅在于服务器端 HTTP 服务器将允许通过 ``PUT`` "
"请求创建资源。 应该注意自定义的 HTTP 方法也可以在 :class:`urllib.request.Request` "
"中通过设置适当的方法属性来进行处理。 下面是一个使用 ``PUT`` 方法的会话示例::"

#: ../../library/http.client.rst:616
msgid "HTTPMessage Objects"
msgstr "HTTPMessage 对象"

#: ../../library/http.client.rst:618
msgid ""
"An :class:`http.client.HTTPMessage` instance holds the headers from an HTTP "
"response.  It is implemented using the :class:`email.message.Message` class."
msgstr ""
":class:`http.client.HTTPMessage` 的实例存有 HTTP 响应的头部信息。利用 "
":class:`email.message.Message` 类实现。"
