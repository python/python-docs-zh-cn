# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/re.rst:2
msgid ":mod:`!re` --- Regular expression operations"
msgstr ":mod:`!re` --- 正则表达式操作"

#: ../../library/re.rst:10
msgid "**Source code:** :source:`Lib/re/`"
msgstr "**源代码:** :source:`Lib/re/`"

#: ../../library/re.rst:14
msgid ""
"This module provides regular expression matching operations similar to those"
" found in Perl."
msgstr "本模块提供了与 Perl 语言类似的正则表达式匹配操作。"

#: ../../library/re.rst:17
msgid ""
"Both patterns and strings to be searched can be Unicode strings "
"(:class:`str`) as well as 8-bit strings (:class:`bytes`). However, Unicode "
"strings and 8-bit strings cannot be mixed: that is, you cannot match a "
"Unicode string with a bytes pattern or vice-versa; similarly, when asking "
"for a substitution, the replacement string must be of the same type as both "
"the pattern and the search string."
msgstr ""
"模式和被搜索的字符串即可以是 Unicode 字符串 (:class:`str`)，也可以是 8 位字节串 (:class:`bytes`)。 "
"但是，Unicode 字符串与 8 位字节串不能混用：也就是说，不能将 Unicode "
"字符串与字节串模式进行匹配，反之亦然；同样地，在执行替换时，替换字串的类型也必须与所用的模式和搜索字串的类型一致。"

#: ../../library/re.rst:24
msgid ""
"Regular expressions use the backslash character (``'\\'``) to indicate "
"special forms or to allow special characters to be used without invoking "
"their special meaning.  This collides with Python's usage of the same "
"character for the same purpose in string literals; for example, to match a "
"literal backslash, one might have to write ``'\\\\\\\\'`` as the pattern "
"string, because the regular expression must be ``\\\\``, and each backslash "
"must be expressed as ``\\\\`` inside a regular Python string literal. Also, "
"please note that any invalid escape sequences in Python's usage of the "
"backslash in string literals now generate a :exc:`SyntaxWarning` and in the "
"future this will become a :exc:`SyntaxError`. This behaviour will happen "
"even if it is a valid escape sequence for a regular expression."
msgstr ""
"正则表达式使用反斜杠字符 (``'\\'``) 表示特殊形式或是允许在使用特殊字符时不引发它们的特殊含义。 这会与 Python "
"在字符串字面值中对于相同字符出于相同目的规定的用法发生冲突；例如，要匹配一个反斜杠字面值，用户将必须写成 ``'\\\\\\\\'`` "
"因为正则表达式必须为 ``\\\\``，而每个反斜杠在普通 Python 字符串字面值中又必须表示为 ``\\\\``。 而且，还要注意在 Python"
" 的字符串字面值中使用的反斜杠现在如果有任何无效的转义序列将会产生 :exc:`SyntaxWarning` 并将在未来改为 "
":exc:`SyntaxError`。 此行为即使对于正则表达式来说有效的转义字符同样会发生。"

#: ../../library/re.rst:36
msgid ""
"The solution is to use Python's raw string notation for regular expression "
"patterns; backslashes are not handled in any special way in a string literal"
" prefixed with ``'r'``.  So ``r\"\\n\"`` is a two-character string "
"containing ``'\\'`` and ``'n'``, while ``\"\\n\"`` is a one-character string"
" containing a newline.  Usually patterns will be expressed in Python code "
"using this raw string notation."
msgstr ""
"解决办法是对于正则表达式模式（patterns）使用 Python 的原始字符串表示法；在带有 ``'r'`` "
"前缀的字符串字面值中，反斜杠不必做任何特殊处理。 因此 ``r\"\\n\"`` 表示包含 ``'\\'`` 和 ``'n'`` 两个字符的字符串，而 "
"``\"\\n\"`` 则表示只包含一个换行符的字符串。 模式在 Python 代码中通常都使用原始字符串表示法。"

#: ../../library/re.rst:43
msgid ""
"It is important to note that most regular expression operations are "
"available as module-level functions and methods on :ref:`compiled regular "
"expressions <re-objects>`.  The functions are shortcuts that don't require "
"you to compile a regex object first, but miss some fine-tuning parameters."
msgstr ""
"绝大多数正则表达式操作都提供为模块函数和方法，在 :ref:`编译正则表达式 <re-objects>`.  "
"这些函数是一个捷径，不需要先编译正则对象，但是损失了一些优化参数。"

#: ../../library/re.rst:51
msgid ""
"The third-party :pypi:`regex` module, which has an API compatible with the "
"standard library :mod:`re` module, but offers additional functionality and a"
" more thorough Unicode support."
msgstr ""
"第三方模块 :pypi:`regex` 提供了与标准库 :mod:`re` 模块兼容的 API，还提供了附加功能和更全面的 Unicode 支持。"

#: ../../library/re.rst:59
msgid "Regular Expression Syntax"
msgstr "正则表达式语法"

#: ../../library/re.rst:61
msgid ""
"A regular expression (or RE) specifies a set of strings that matches it; the"
" functions in this module let you check if a particular string matches a "
"given regular expression (or if a given regular expression matches a "
"particular string, which comes down to the same thing)."
msgstr ""
"正则表达式（或 "
"RE）指定了一组与之匹配的字符串；模块内的函数可以检查某个字符串是否与给定的正则表达式匹配（或者正则表达式是否匹配到字符串，这两种说法含义相同）。"

#: ../../library/re.rst:66
msgid ""
"Regular expressions can be concatenated to form new regular expressions; if "
"*A* and *B* are both regular expressions, then *AB* is also a regular "
"expression. In general, if a string *p* matches *A* and another string *q* "
"matches *B*, the string *pq* will match AB.  This holds unless *A* or *B* "
"contain low precedence operations; boundary conditions between *A* and *B*; "
"or have numbered group references.  Thus, complex expressions can easily be "
"constructed from simpler primitive expressions like the ones described here."
"  For details of the theory and implementation of regular expressions, "
"consult the Friedl book [Frie09]_, or almost any textbook about compiler "
"construction."
msgstr ""
"正则表达式可以拼接；如果 *A* 和 *B* 都是正则表达式，则 *AB* 也是正则表达式。通常，如果字符串 *p* 匹配 *A*，并且另一个字符串 "
"*q* 匹配 *B*，那么 *pq* 可以匹配 AB。除非 *A* 或者 *B* 包含低优先级操作，*A* 和 *B* "
"存在边界条件；或者命名组引用。所以，复杂表达式可以很容易的从这里描述的简单源语表达式构建。更多正则表达式理论和实现，详见 the Friedl book"
" [Frie09]_ ，或者其他构建编译器的书籍。"

#: ../../library/re.rst:76
msgid ""
"A brief explanation of the format of regular expressions follows.  For "
"further information and a gentler presentation, consult the :ref:`regex-"
"howto`."
msgstr "以下是正则表达式格式的简要说明。更详细的信息和演示，参考  :ref:`regex-howto`。"

#: ../../library/re.rst:79
msgid ""
"Regular expressions can contain both special and ordinary characters. Most "
"ordinary characters, like ``'A'``, ``'a'``, or ``'0'``, are the simplest "
"regular expressions; they simply match themselves.  You can concatenate "
"ordinary characters, so ``last`` matches the string ``'last'``.  (In the "
"rest of this section, we'll write RE's in ``this special style``, usually "
"without quotes, and strings to be matched ``'in single quotes'``.)"
msgstr ""
"正则表达式可以包含普通或者特殊字符。绝大部分普通字符，比如 ``'A'``, ``'a'``, 或者 "
"``'0'``，都是最简单的正则表达式。它们就匹配自身。你可以拼接普通字符，所以 ``last`` 匹配字符串 ``'last'``.  "
"（在这一节的其他部分，我们将用 ``this special style`` 这种方式表示正则表达式，通常不带引号，要匹配的字符串用 ``'in "
"single quotes'`` ，单引号形式。）"

#: ../../library/re.rst:86
msgid ""
"Some characters, like ``'|'`` or ``'('``, are special. Special characters "
"either stand for classes of ordinary characters, or affect how the regular "
"expressions around them are interpreted."
msgstr ""
"有些字符，比如 ``'|'`` 或者 ``'('``，属于特殊字符。 特殊字符既可以表示它的普通含义， 也可以影响它旁边的正则表达式的解释。"

#: ../../library/re.rst:90
msgid ""
"Repetition operators or quantifiers (``*``, ``+``, ``?``, ``{m,n}``, etc) "
"cannot be directly nested. This avoids ambiguity with the non-greedy "
"modifier suffix ``?``, and with other modifiers in other implementations. To"
" apply a second repetition to an inner repetition, parentheses may be used. "
"For example, the expression ``(?:a{6})*`` matches any multiple of six "
"``'a'`` characters."
msgstr ""
"重复运算符或数量限定符 (``*``, ``+``, ``?``, ``{m,n}`` 等) 不能被直接嵌套。 这避免了非贪婪修饰符后缀 ``?`` "
"的歧义，也避免了其他实现中其他修饰符的歧义。 要将第二层重复应用到内层的重复中，可以使用圆括号。 例如，表达式 ``(?:a{6})*`` 将匹配六个 "
"``'a'`` 字符的任意多次重复。"

#: ../../library/re.rst:97
msgid "The special characters are:"
msgstr "特殊字符有："

#: ../../library/re.rst:101 ../../library/re.rst:1660
msgid "``.``"
msgstr "``.``"

#: ../../library/re.rst:102
msgid ""
"(Dot.)  In the default mode, this matches any character except a newline.  "
"If the :const:`DOTALL` flag has been specified, this matches any character "
"including a newline.  ``(?s:.)`` matches any character regardless of flags."
msgstr ""
"（点号.） 在默认模式下，匹配除换行符以外的任意字符。 如果指定了旗标 :const:`DOTALL`，它将匹配包括换行符在内的任意字符。 "
"``(?s:.)`` 将匹配任意字符而无视相关旗标。"

#: ../../library/re.rst:108
msgid "``^``"
msgstr "``^``"

#: ../../library/re.rst:109
msgid ""
"(Caret.)  Matches the start of the string, and in :const:`MULTILINE` mode "
"also matches immediately after each newline."
msgstr "(插入符)  匹配字符串的开头， 并且在 :const:`MULTILINE` 模式下也匹配换行后的首个符号。"

#: ../../library/re.rst:114
msgid "``$``"
msgstr "``$``"

#: ../../library/re.rst:115
msgid ""
"Matches the end of the string or just before the newline at the end of the "
"string, and in :const:`MULTILINE` mode also matches before a newline.  "
"``foo`` matches both 'foo' and 'foobar', while the regular expression "
"``foo$`` matches only 'foo'.  More interestingly, searching for ``foo.$`` in"
" ``'foo1\\nfoo2\\n'`` matches 'foo2' normally, but 'foo1' in "
":const:`MULTILINE` mode; searching for a single ``$`` in ``'foo\\n'`` will "
"find two (empty) matches: one just before the newline, and one at the end of"
" the string."
msgstr ""
"匹配字符串尾或者在字符串尾的换行符的前一个字符，在 :const:`MULTILINE` 模式下也会匹配换行符之前的文本。 ``foo`` 匹配 "
"'foo' 和 'foobar'，但正则表达式 ``foo$`` 只匹配 'foo'。 更有趣的是，在 ``'foo1\\nfoo2\\n'`` 中搜索"
" ``foo.$``，通常匹配  'foo2'，但在 :const:`MULTILINE` 模式下可以匹配到 'foo1'；在 ``'foo\\n'``"
" 中搜索 ``$`` 会找到两个（空的）匹配：一个在换行符之前，一个在字符串的末尾。"

#: ../../library/re.rst:125
msgid "``*``"
msgstr "``*``"

#: ../../library/re.rst:126
msgid ""
"Causes the resulting RE to match 0 or more repetitions of the preceding RE, "
"as many repetitions as are possible.  ``ab*`` will match 'a', 'ab', or 'a' "
"followed by any number of 'b's."
msgstr ""
"对它前面的正则式匹配0到任意次重复， 尽量多的匹配字符串。  ``ab*`` 会匹配 ``'a'``，``'ab'``，或者 ``'a'`` "
"后面跟随任意个 ``'b'``。"

#: ../../library/re.rst:132
msgid "``+``"
msgstr "``+``"

#: ../../library/re.rst:133
msgid ""
"Causes the resulting RE to match 1 or more repetitions of the preceding RE. "
"``ab+`` will match 'a' followed by any non-zero number of 'b's; it will not "
"match just 'a'."
msgstr ""
"对它前面的正则式匹配1到任意次重复。 ``ab+`` 会匹配 ``'a'`` 后面跟随1个以上到任意个 ``'b'``，它不会匹配 ``'a'``。"

#: ../../library/re.rst:139
msgid "``?``"
msgstr "``?``"

#: ../../library/re.rst:140
msgid ""
"Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. "
"``ab?`` will match either 'a' or 'ab'."
msgstr "对它前面的正则式匹配0到1次重复。 ``ab?`` 会匹配 ``'a'`` 或者 ``'ab'``。"

#: ../../library/re.rst:148
msgid "``*?``, ``+?``, ``??``"
msgstr "``*?``, ``+?``, ``??``"

#: ../../library/re.rst:149
msgid ""
"The ``'*'``, ``'+'``, and ``'?'`` quantifiers are all :dfn:`greedy`; they "
"match as much text as possible.  Sometimes this behaviour isn't desired; if "
"the RE ``<.*>`` is matched against ``'<a> b <c>'``, it will match the entire"
" string, and not just ``'<a>'``.  Adding ``?`` after the quantifier makes it"
" perform the match in :dfn:`non-greedy` or :dfn:`minimal` fashion; as *few* "
"characters as possible will be matched.  Using the RE ``<.*?>`` will match "
"only ``'<a>'``."
msgstr ""
"``'*'``, ``'+'`` 和 ``'?'`` 数量限定符都是 :dfn:`贪婪的`；它们会匹配尽可能多的文本。 有时这种行为并不被需要；如果 "
"RE ``<.*>`` 针对 ``'<a> b <c>'`` 进行匹配，它将匹配整个字符串，而不只是 ``'<a>'``。 在数量限定符之后添加 "
"``?`` 将使其以 :dfn:`非贪婪` 或 :dfn:`最小` 风格来执行匹配；也就是将匹配数量尽可能 *少的* 字符。 使用 RE "
"``<.*?>`` 将只匹配 ``'<a>'``。"

#: ../../library/re.rst:162
msgid "``*+``, ``++``, ``?+``"
msgstr "``*+``, ``++``, ``?+``"

#: ../../library/re.rst:163
msgid ""
"Like the ``'*'``, ``'+'``, and ``'?'`` quantifiers, those where ``'+'`` is "
"appended also match as many times as possible. However, unlike the true "
"greedy quantifiers, these do not allow back-tracking when the expression "
"following it fails to match. These are known as :dfn:`possessive` "
"quantifiers. For example, ``a*a`` will match ``'aaaa'`` because the ``a*`` "
"will match all 4 ``'a'``\\ s, but, when the final ``'a'`` is encountered, "
"the expression is backtracked so that in the end the ``a*`` ends up matching"
" 3 ``'a'``\\ s total, and the fourth ``'a'`` is matched by the final "
"``'a'``. However, when ``a*+a`` is used to match ``'aaaa'``, the ``a*+`` "
"will match all 4 ``'a'``, but when the final ``'a'`` fails to find any more "
"characters to match, the expression cannot be backtracked and will thus fail"
" to match. ``x*+``, ``x++`` and ``x?+`` are equivalent to ``(?>x*)``, "
"``(?>x+)`` and ``(?>x?)`` correspondingly."
msgstr ""
"类似于 ``'*'``, ``'+'`` 和 ``'?'`` 数量限定符，添加了 ``'+'`` 的形式也将匹配尽可能多的次数。 "
"但是，不同于真正的贪婪型数量限定符，这些形式在之后的表达式匹配失败时不允许反向追溯。 这些形式被称为 :dfn:`占有型` 数量限定符。 "
"例如，``a*a`` 将匹配 ``'aaaa'`` 因为 ``a*`` 将匹配所有的 4 个 ``'a'``，但是，当遇到最后一个 ``'a'`` "
"时，表达式将执行反向追溯以便最终 ``a*`` 最后变为匹配总计 3 个 ``'a'``，而第四个 ``'a'`` 将由最后一个 ``'a'`` "
"来匹配。 然而，当使用 ``a*+a`` 时如果要匹配 ``'aaaa'``，``a*+`` 将匹配所有的 4 个 ``'a'``，但是在最后一个 "
"``'a'`` 无法找到更多字符来匹配时，表达式将无法被反向追溯并将因此匹配失败。 ``x*+``, ``x++`` 和 ``x?+`` 分别等价于 "
"``(?>x*)``, ``(?>x+)`` 和 ``(?>x?)``。"

#: ../../library/re.rst:184
msgid "``{m}``"
msgstr "``{m}``"

#: ../../library/re.rst:185
msgid ""
"Specifies that exactly *m* copies of the previous RE should be matched; "
"fewer matches cause the entire RE not to match.  For example, ``a{6}`` will "
"match exactly six ``'a'`` characters, but not five."
msgstr ""
"对其之前的正则式指定匹配 *m* 个重复；少于 *m* 的话就会导致匹配失败。比如， ``a{6}`` 将匹配6个 ``'a'`` , 但是不能是5个。"

#: ../../library/re.rst:189
msgid "``{m,n}``"
msgstr "``{m,n}``"

#: ../../library/re.rst:190
msgid ""
"Causes the resulting RE to match from *m* to *n* repetitions of the "
"preceding RE, attempting to match as many repetitions as possible.  For "
"example, ``a{3,5}`` will match from 3 to 5 ``'a'`` characters.  Omitting *m*"
" specifies a lower bound of zero,  and omitting *n* specifies an infinite "
"upper bound.  As an example, ``a{4,}b`` will match ``'aaaab'`` or a thousand"
" ``'a'`` characters followed by a ``'b'``, but not ``'aaab'``. The comma may"
" not be omitted or the modifier would be confused with the previously "
"described form."
msgstr ""
"对正则式进行 *m* 到 *n* 次匹配，在 *m* 和 *n* 之间取尽量多。 比如，``a{3,5}`` 将匹配 3 到 5个 ``'a'``。忽略"
" *m* 意为指定下界为0，忽略 *n* 指定上界为无限次。 比如 ``a{4,}b`` 将匹配 ``'aaaab'`` 或者1000个 ``'a'``"
" 尾随一个 ``'b'``，但不能匹配 ``'aaab'``。逗号不能省略，否则无法辨别修饰符应该忽略哪个边界。"

#: ../../library/re.rst:198
msgid "``{m,n}?``"
msgstr "``{m,n}?``"

#: ../../library/re.rst:199
msgid ""
"Causes the resulting RE to match from *m* to *n* repetitions of the "
"preceding RE, attempting to match as *few* repetitions as possible.  This is"
" the non-greedy version of the previous quantifier.  For example, on the "
"6-character string ``'aaaaaa'``, ``a{3,5}`` will match 5 ``'a'`` characters,"
" while ``a{3,5}?`` will only match 3 characters."
msgstr ""
"将导致结果 RE 匹配之前 RE 的 *m* 至 *n* 次重复，尝试匹配尽可能 *少的* 重复次数。 这是之前数量限定符的非贪婪版本。 例如，在 6 "
"个字符的字符串 ``'aaaaaa'`` 上，``a{3,5}`` 将匹配 5 个 ``'a'`` 字符，而 ``a{3,5}?`` 将只匹配 3 "
"个字符。"

#: ../../library/re.rst:205
msgid "``{m,n}+``"
msgstr "``{m,n}+``"

#: ../../library/re.rst:206
msgid ""
"Causes the resulting RE to match from *m* to *n* repetitions of the "
"preceding RE, attempting to match as many repetitions as possible *without* "
"establishing any backtracking points. This is the possessive version of the "
"quantifier above. For example, on the 6-character string ``'aaaaaa'``, "
"``a{3,5}+aa`` attempt to match 5 ``'a'`` characters, then, requiring 2 more "
"``'a'``\\ s, will need more characters than available and thus fail, while "
"``a{3,5}aa`` will match with ``a{3,5}`` capturing 5, then 4 ``'a'``\\ s by "
"backtracking and then the final 2 ``'a'``\\ s are matched by the final "
"``aa`` in the pattern. ``x{m,n}+`` is equivalent to ``(?>x{m,n})``."
msgstr ""
"将导致结果 RE 匹配之前 RE 的 *m* 至 *n* 次重复，尝试匹配尽可能多的重复而 *不会* 建立任何反向追溯点。 "
"这是上述数量限定符的占有型版本。 例如，在 6 个字符的字符串 ``'aaaaaa'`` 上，``a{3,5}+aa`` 将尝试匹配 5 个 "
"``'a'`` 字符，然后，要求再有 2 个 ``'a'``，这将需要比可用的更多的字符因而会失败，而 ``a{3,5}aa`` 的匹配将使 "
"``a{3,5}`` 先捕获 5 个，然后通过反向追溯再匹配 4 个 ``'a'``，然后用模式中最后的 ``aa`` 来匹配最后的 2 个 "
"``'a'``。 ``x{m,n}+`` 就等同于 ``(?>x{m,n})``。"

#: ../../library/re.rst:222
msgid "``\\``"
msgstr "``\\``"

#: ../../library/re.rst:223
msgid ""
"Either escapes special characters (permitting you to match characters like "
"``'*'``, ``'?'``, and so forth), or signals a special sequence; special "
"sequences are discussed below."
msgstr "转义特殊字符（允许你匹配 ``'*'``, ``'?'``, 或者此类其他），或者表示一个特殊序列；特殊序列之后进行讨论。"

#: ../../library/re.rst:227
msgid ""
"If you're not using a raw string to express the pattern, remember that "
"Python also uses the backslash as an escape sequence in string literals; if "
"the escape sequence isn't recognized by Python's parser, the backslash and "
"subsequent character are included in the resulting string.  However, if "
"Python would recognize the resulting sequence, the backslash should be "
"repeated twice.  This is complicated and hard to understand, so it's highly "
"recommended that you use raw strings for all but the simplest expressions."
msgstr ""
"如果你没有使用原始字符串（ ``r'raw'`` "
"）来表达样式，要牢记Python也使用反斜杠作为转义序列；如果转义序列不被Python的分析器识别，反斜杠和字符才能出现在字符串中。如果Python可以识别这个序列，那么反斜杠就应该重复两次。这将导致理解障碍，所以高度推荐，就算是最简单的表达式，也要使用原始字符串。"

#: ../../library/re.rst:238
msgid "``[]``"
msgstr "``[]``"

#: ../../library/re.rst:239
msgid "Used to indicate a set of characters.  In a set:"
msgstr "用于表示一个字符集合。在一个集合中："

#: ../../library/re.rst:241
msgid ""
"Characters can be listed individually, e.g. ``[amk]`` will match ``'a'``, "
"``'m'``, or ``'k'``."
msgstr "字符可以单独列出，比如 ``[amk]`` 匹配 ``'a'``， ``'m'``， 或者 ``'k'``。"

#: ../../library/re.rst:246
msgid ""
"Ranges of characters can be indicated by giving two characters and "
"separating them by a ``'-'``, for example ``[a-z]`` will match any lowercase"
" ASCII letter, ``[0-5][0-9]`` will match all the two-digits numbers from "
"``00`` to ``59``, and ``[0-9A-Fa-f]`` will match any hexadecimal digit.  If "
"``-`` is escaped (e.g. ``[a\\-z]``) or if it's placed as the first or last "
"character (e.g. ``[-a]`` or ``[a-]``), it will match a literal ``'-'``."
msgstr ""
"可以表示字符范围，通过用 ``'-'`` 将两个字符连起来。比如 ``[a-z]`` 将匹配任何小写ASCII字符， ``[0-5][0-9]`` "
"将匹配从 ``00`` 到 ``59`` 的两位数字， ``[0-9A-Fa-f]`` 将匹配任何十六进制数位。 如果 ``-`` 进行了转义 （比如 "
"``[a\\-z]``）或者它的位置在首位或者末尾（如 ``[-a]`` 或 ``[a-]``），它就只表示普通字符 ``'-'``。"

#: ../../library/re.rst:253
msgid ""
"Special characters except backslash lose their special meaning inside sets. "
"For example, ``[(+*)]`` will match any of the literal characters ``'('``, "
"``'+'``, ``'*'``, or ``')'``."
msgstr ""
"除反斜杠外的特殊字符在集中中会失去其特殊含义。 例如，``[(+*)]`` 将匹配字符字面值 ``'('``, ``'+'``, ``'*'``, 或 "
"``')'`` 中的任何一个。"

#: ../../library/re.rst:260
msgid ""
"Backslash either escapes characters which have special meaning in a set such"
" as ``'-'``, ``']'``, ``'^'`` and ``'\\\\'`` itself or signals a special "
"sequence which represents a single character such as ``\\xa0`` or ``\\n`` or"
" a character class such as ``\\w`` or ``\\S`` (defined below). Note that "
"``\\b`` represents a single \"backspace\" character, not a word boundary as "
"outside a set, and numeric escapes such as ``\\1`` are always octal escapes,"
" not group references. Special sequences which do not match a single "
"character such as ``\\A`` and ``\\Z`` are not allowed."
msgstr ""
"反斜杠或者用于转义集合中具有特殊含义的字符如 ``'-'``, ``']'``, ``'^'`` 及 ``'\\\\'`` "
"本身或者用于提示代表单个字符的特殊序列如 ``\\xa0`` 或 ``\\n`` 或者用于字符类如 ``\\w`` 或 ``\\S`` (定义见下文)。"
" 请注意 ``\\b`` 是表示单个 \"backspace\" 字符，而不是如在集合以外那样表示单词边界，还有数字转义符如 ``\\1`` "
"将总是为八进制形式的转义，而不是分组引用。 不匹配单个字符的特殊转义符如 ``\\A`` 和 ``\\Z`` 是不被允许的。are not "
"allowed."

#: ../../library/re.rst:273
msgid ""
"Characters that are not within a range can be matched by "
":dfn:`complementing` the set.  If the first character of the set is ``'^'``,"
" all the characters that are *not* in the set will be matched.  For example,"
" ``[^5]`` will match any character except ``'5'``, and ``[^^]`` will match "
"any character except ``'^'``.  ``^`` has no special meaning if it's not the "
"first character in the set."
msgstr ""
"不在集合范围内的字符可以通过 :dfn:`取反` 来进行匹配。如果集合首字符是 ``'^'`` ，所有 *不* 在集合内的字符将会被匹配，比如 "
"``[^5]`` 将匹配所有字符，除了 ``'5'``， ``[^^]`` 将匹配所有字符，除了 ``'^'``.  ``^`` "
"如果不在集合首位，就没有特殊含义。"

#: ../../library/re.rst:280
msgid ""
"To match a literal ``']'`` inside a set, precede it with a backslash, or "
"place it at the beginning of the set.  For example, both ``[()[\\]{}]`` and "
"``[]()[{}]`` will match a right bracket, as well as left bracket, braces, "
"and parentheses."
msgstr ""
"要在集合内匹配一个 ``']'`` 字面值，可以在它前面加上反斜杠，或是将它放到集合的开头。 例如，``[()[\\]{}]`` 和 "
"``[]()[{}]`` 都可以匹配右方括号，以及左方括号，花括号和圆括号。"

#: ../../library/re.rst:290
msgid ""
"Support of nested sets and set operations as in `Unicode Technical Standard "
"#18`_ might be added in the future.  This would change the syntax, so to "
"facilitate this change a :exc:`FutureWarning` will be raised in ambiguous "
"cases for the time being. That includes sets starting with a literal ``'['``"
" or containing literal character sequences ``'--'``, ``'&&'``, ``'~~'``, and"
" ``'||'``.  To avoid a warning escape them with a backslash."
msgstr ""
"`Unicode Technical Standard #18`_ 里的嵌套集合和集合操作支持可能在未来添加。这将会改变语法，所以为了帮助这个改变，一个"
" :exc:`FutureWarning` 将会在有多义的情况里被 ``raise``，包含以下几种情况，集合由 ``'['`` "
"开始，或者包含下列字符序列  ``'--'``, ``'&&'``, ``'~~'``, 和 ``'||'``。为了避免警告，需要将它们用反斜杠转义。"

#: ../../library/re.rst:300
msgid ""
":exc:`FutureWarning` is raised if a character set contains constructs that "
"will change semantically in the future."
msgstr "如果一个字符串构建的语义在未来会改变的话，一个 :exc:`FutureWarning` 会 ``raise`` 。"

#: ../../library/re.rst:306
msgid "``|``"
msgstr "``|``"

#: ../../library/re.rst:307
msgid ""
"``A|B``, where *A* and *B* can be arbitrary REs, creates a regular "
"expression that will match either *A* or *B*.  An arbitrary number of REs "
"can be separated by the ``'|'`` in this way.  This can be used inside groups"
" (see below) as well.  As the target string is scanned, REs separated by "
"``'|'`` are tried from left to right. When one pattern completely matches, "
"that branch is accepted. This means that once *A* matches, *B* will not be "
"tested further, even if it would produce a longer overall match.  In other "
"words, the ``'|'`` operator is never greedy.  To match a literal ``'|'``, "
"use ``\\|``, or enclose it inside a character class, as in ``[|]``."
msgstr ""
"``A|B``， *A* 和 *B* 可以是任意正则表达式，创建一个正则表达式，匹配 *A* 或者 *B*.  任意个正则表达式可以用 ``'|'`` "
"连接。它也可以在组合（见下列）内使用。扫描目标字符串时， ``'|'`` "
"分隔开的正则样式从左到右进行匹配。当一个样式完全匹配时，这个分支就被接受。意思就是，一旦 *A* 匹配成功， *B* "
"就不再进行匹配，即便它能产生一个更好的匹配。或者说，``'|'`` 操作符绝不贪婪。  如果要匹配 ``'|'`` 字符，使用 ``\\|``， "
"或者把它包含在字符集里，比如 ``[|]``."

#: ../../library/re.rst:320
msgid "``(...)``"
msgstr "``(...)``"

#: ../../library/re.rst:321
msgid ""
"Matches whatever regular expression is inside the parentheses, and indicates"
" the start and end of a group; the contents of a group can be retrieved "
"after a match has been performed, and can be matched later in the string "
"with the ``\\number`` special sequence, described below.  To match the "
"literals ``'('`` or ``')'``, use ``\\(`` or ``\\)``, or enclose them inside "
"a character class: ``[(]``, ``[)]``."
msgstr ""
"（组合），匹配括号内的任意正则表达式，并标识出组合的开始和结尾。匹配完成后，组合的内容可以被获取，并可以在之后用  ``\\number`` "
"转义序列进行再次匹配，之后进行详细说明。要匹配字符 ``'('`` 或者 ``')'``, 用 ``\\(`` 或 ``\\)``, "
"或者把它们包含在字符集合里: ``[(]``, ``[)]``."

#: ../../library/re.rst:329
msgid "``(?...)``"
msgstr "``(?…)``"

#: ../../library/re.rst:330
msgid ""
"This is an extension notation (a ``'?'`` following a ``'('`` is not "
"meaningful otherwise).  The first character after the ``'?'`` determines "
"what the meaning and further syntax of the construct is. Extensions usually "
"do not create a new group; ``(?P<name>...)`` is the only exception to this "
"rule. Following are the currently supported extensions."
msgstr ""
"这是个扩展标记法 （一个 ``'?'`` 跟随 ``'('`` 并无含义）。  ``'?'`` "
"后面的第一个字符决定了这个构建采用什么样的语法。这种扩展通常并不创建新的组合； ``(?P<name>...)`` 是唯一的例外。 "
"以下是目前支持的扩展。"

#: ../../library/re.rst:336
msgid "``(?aiLmsux)``"
msgstr "``(?aiLmsux)``"

#: ../../library/re.rst:337
msgid ""
"(One or more letters from the set ``'a'``, ``'i'``, ``'L'``, ``'m'``, "
"``'s'``, ``'u'``, ``'x'``.) The group matches the empty string; the letters "
"set the corresponding flags for the entire regular expression:"
msgstr ""
"（一个或多个来自 ``'a'``, ``'i'``, ``'L'``, ``'m'``, ``'s'``, ``'u'``, ``'x'`` "
"集合的字母。） 分组将与空字符串相匹配；这些字母将为整个正则表达式设置相应的旗标："

#: ../../library/re.rst:342 ../../library/re.rst:374
msgid ":const:`re.A` (ASCII-only matching)"
msgstr ":const:`re.A` (仅限 ASCII 匹配)"

#: ../../library/re.rst:343 ../../library/re.rst:375
msgid ":const:`re.I` (ignore case)"
msgstr ":const:`re.I` (忽略大小写)"

#: ../../library/re.rst:344 ../../library/re.rst:376
msgid ":const:`re.L` (locale dependent)"
msgstr ":const:`re.L` (依赖于语言区域)"

#: ../../library/re.rst:345 ../../library/re.rst:377
msgid ":const:`re.M` (multi-line)"
msgstr ":const:`re.M` (多行)"

#: ../../library/re.rst:346 ../../library/re.rst:378
msgid ":const:`re.S` (dot matches all)"
msgstr ":const:`re.S` (点号匹配所有字符)"

#: ../../library/re.rst:347 ../../library/re.rst:379
msgid ":const:`re.U` (Unicode matching)"
msgstr ":const:`re.U` (Unicode 匹配)"

#: ../../library/re.rst:348 ../../library/re.rst:380
msgid ":const:`re.X` (verbose)"
msgstr ":const:`re.X` (详细)"

#: ../../library/re.rst:350
msgid ""
"(The flags are described in :ref:`contents-of-module-re`.) This is useful if"
" you wish to include the flags as part of the regular expression, instead of"
" passing a *flag* argument to the :func:`re.compile` function. Flags should "
"be used first in the expression string."
msgstr ""
"（该旗标在 :ref:`contents-of-module-re` 中有介绍。） 这适用于当你希望将该旗标包括为正则表达式的一部分，而不是向 "
":func:`re.compile` 函数传入 *flag* 参数的情况。 旗标应当在表达式字符串的开头使用。"

#: ../../library/re.rst:356
msgid "This construction can only be used at the start of the expression."
msgstr "此构造只能在表达式的开头使用。"

#: ../../library/re.rst:361
msgid "``(?:...)``"
msgstr "``(?:…)``"

#: ../../library/re.rst:362
msgid ""
"A non-capturing version of regular parentheses.  Matches whatever regular "
"expression is inside the parentheses, but the substring matched by the group"
" *cannot* be retrieved after performing a match or referenced later in the "
"pattern."
msgstr "正则括号的非捕获版本。 匹配在括号内的任何正则表达式，但该分组所匹配的子字符串 *不能* 在执行匹配后被获取或是之后在模式中被引用。"

#: ../../library/re.rst:367
msgid "``(?aiLmsux-imsx:...)``"
msgstr "``(?aiLmsux-imsx:…)``"

#: ../../library/re.rst:368
msgid ""
"(Zero or more letters from the set ``'a'``, ``'i'``, ``'L'``, ``'m'``, "
"``'s'``, ``'u'``, ``'x'``, optionally followed by ``'-'`` followed by one or"
" more letters from the ``'i'``, ``'m'``, ``'s'``, ``'x'``.) The letters set "
"or remove the corresponding flags for the part of the expression:"
msgstr ""
"（零个或多个来自 ``'a'``, ``'i'``, ``'L'``, ``'m'``, ``'s'``, ``'u'``, ``'x'`` "
"集合的字母，后面可以带 ``'-'`` 再跟一个或多个来自 ``'i'``, ``'m'``, ``'s'``, ``'x'`` 集合的字母。） "
"这些字母将为这部分表达式设置或移除相应的旗标："

#: ../../library/re.rst:382
msgid "(The flags are described in :ref:`contents-of-module-re`.)"
msgstr "（这些旗标在 :ref:`contents-of-module-re` 中有介绍。）"

#: ../../library/re.rst:384
msgid ""
"The letters ``'a'``, ``'L'`` and ``'u'`` are mutually exclusive when used as"
" inline flags, so they can't be combined or follow ``'-'``.  Instead, when "
"one of them appears in an inline group, it overrides the matching mode in "
"the enclosing group.  In Unicode patterns ``(?a:...)`` switches to ASCII-"
"only matching, and ``(?u:...)`` switches to Unicode matching (default).  In "
"bytes patterns ``(?L:...)`` switches to locale dependent matching, and "
"``(?a:...)`` switches to ASCII-only matching (default). This override is "
"only in effect for the narrow inline group, and the original matching mode "
"is restored outside of the group."
msgstr ""
"字母 ``'a'``, ``'L'`` 和 ``'u'`` 在用作内联旗标时是互斥的，所以它们不能相互组合或者带 ``'-'``。 "
"相反，当它们中的某一个出现于内联的分组时，它将覆盖外层分组中匹配的模式。 在 Unicode 模式中 ``(?a:...)`` 将切换至仅限 ASCII"
" 匹配，而 ``(?u:...)`` 将切换至 Unicode 匹配（默认）。 在字节串模式中 ``(?L:...)`` 将切换为基于语言区域的匹配，而"
" ``(?a:...)`` 将切换为仅限 ASCII 匹配（默认）。 这种覆盖将只在内联分组范围内生效，而在分组之外将恢复为原始的匹配模式。"

#: ../../library/re.rst:396
msgid "The letters ``'a'``, ``'L'`` and ``'u'`` also can be used in a group."
msgstr "符号 ``'a'``, ``'L'`` 和 ``'u'`` 同样可以用在一个组合内。"

#: ../../library/re.rst:399
msgid "``(?>...)``"
msgstr "``(?>...)``"

#: ../../library/re.rst:400
msgid ""
"Attempts to match ``...`` as if it was a separate regular expression, and if"
" successful, continues to match the rest of the pattern following it. If the"
" subsequent pattern fails to match, the stack can only be unwound to a point"
" *before* the ``(?>...)`` because once exited, the expression, known as an "
":dfn:`atomic group`, has thrown away all stack points within itself. Thus, "
"``(?>.*).`` would never match anything because first the ``.*`` would match "
"all characters possible, then, having nothing left to match, the final ``.``"
" would fail to match. Since there are no stack points saved in the Atomic "
"Group, and there is no stack point before it, the entire expression would "
"thus fail to match."
msgstr ""
"尝试匹配 ``...`` 就像它是一个单独的正则表达式，如果匹配成功，则继续匹配在它之后的剩余表达式。 如果之后的表达式匹配失败，则栈只能回溯到 "
"``(?>...)`` *之前* 的点，因为一旦退出，这个被称为 :dfn:`原子化分组` 的表达式将会丢弃其自身所有的栈点位。 "
"因此，``(?>.*).`` 将永远不会匹配任何东西因为首先 ``.*`` 将匹配所有可能的字符，然后，由于没有任何剩余的字符可供匹配，最后的 "
"``.`` 将匹配失败。 由于原子化分组中没有保存任何栈点位，并且在它之前也没有任何栈点位，因此整个表达式将匹配失败。"

#: ../../library/re.rst:416
msgid "``(?P<name>...)``"
msgstr "``(?P<name>…)``"

#: ../../library/re.rst:417
msgid ""
"Similar to regular parentheses, but the substring matched by the group is "
"accessible via the symbolic group name *name*.  Group names must be valid "
"Python identifiers, and in :class:`bytes` patterns they can only contain "
"bytes in the ASCII range.  Each group name must be defined only once within "
"a regular expression.  A symbolic group is also a numbered group, just as if"
" the group were not named."
msgstr ""
"与常规的圆括号类似，但分组所匹配到了子字符串可通过符号分组名称 *name* 来访问。 分组名称必须是有效的 Python 标识符，并且在 "
":class:`bytes` 模式中它们只能包含 ASCII 范围内的字节值。 每个分组名称在一个正则表达式中只能定义一次。 "
"一个符号分组同时也是一个编号分组，就像这个分组没有被命名过一样。"

#: ../../library/re.rst:424
msgid ""
"Named groups can be referenced in three contexts.  If the pattern is "
"``(?P<quote>['\"]).*?(?P=quote)`` (i.e. matching a string quoted with either"
" single or double quotes):"
msgstr ""
"命名组合可以在三种上下文中引用。如果样式是 ``(?P<quote>['\"]).*?(?P=quote)`` "
"（也就是说，匹配单引号或者双引号括起来的字符串)："

#: ../../library/re.rst:429
msgid "Context of reference to group \"quote\""
msgstr "引用组合 \"quote\" 的上下文"

#: ../../library/re.rst:429
msgid "Ways to reference it"
msgstr "引用方法"

#: ../../library/re.rst:431
msgid "in the same pattern itself"
msgstr "在正则式自身内"

#: ../../library/re.rst:431
msgid "``(?P=quote)`` (as shown)"
msgstr "``(?P=quote)`` (如示)"

#: ../../library/re.rst:432 ../../library/re.rst:439
msgid "``\\1``"
msgstr "``\\1``"

#: ../../library/re.rst:434
msgid "when processing match object *m*"
msgstr "处理匹配对象 *m*"

#: ../../library/re.rst:434
msgid "``m.group('quote')``"
msgstr "``m.group('quote')``"

#: ../../library/re.rst:435
msgid "``m.end('quote')`` (etc.)"
msgstr "``m.end('quote')`` (等)"

#: ../../library/re.rst:437
msgid "in a string passed to the *repl* argument of ``re.sub()``"
msgstr "传递到 ``re.sub()`` 里的 *repl* 参数中"

#: ../../library/re.rst:437
msgid "``\\g<quote>``"
msgstr "``\\g<quote>``"

#: ../../library/re.rst:438
msgid "``\\g<1>``"
msgstr "``\\g<1>``"

#: ../../library/re.rst:442
msgid ""
"In :class:`bytes` patterns, group *name* can only contain bytes in the ASCII"
" range (``b'\\x00'``-``b'\\x7f'``)."
msgstr ""
"在 :class:`bytes` 模式中，分组 *name* 只能包含 ASCII 范围内的字节值 "
"(``b'\\x00'``-``b'\\x7f'``)。"

#: ../../library/re.rst:448
msgid "``(?P=name)``"
msgstr "``(?P=name)``"

#: ../../library/re.rst:449
msgid ""
"A backreference to a named group; it matches whatever text was matched by "
"the earlier group named *name*."
msgstr "反向引用一个命名组合；它匹配前面那个叫 *name* 的命名组中匹配到的串同样的字串。"

#: ../../library/re.rst:454
msgid "``(?#...)``"
msgstr "``(?#…)``"

#: ../../library/re.rst:455
msgid "A comment; the contents of the parentheses are simply ignored."
msgstr "注释；里面的内容会被忽略。"

#: ../../library/re.rst:459
msgid "``(?=...)``"
msgstr "``(?=…)``"

#: ../../library/re.rst:460
msgid ""
"Matches if ``...`` matches next, but doesn't consume any of the string.  "
"This is called a :dfn:`lookahead assertion`.  For example, ``Isaac "
"(?=Asimov)`` will match ``'Isaac '`` only if it's followed by ``'Asimov'``."
msgstr ""
"当 ``…`` 匹配时，匹配成功，但不消耗字符串中的任何字符。这个叫做 :dfn:`前视断言` （lookahead assertion）。比如， "
"``Isaac (?=Asimov)`` 将会匹配 ``'Isaac '`` ，仅当其后紧跟  ``'Asimov'`` 。"

#: ../../library/re.rst:466
msgid "``(?!...)``"
msgstr "``(?!…)``"

#: ../../library/re.rst:467
msgid ""
"Matches if ``...`` doesn't match next.  This is a :dfn:`negative lookahead "
"assertion`. For example, ``Isaac (?!Asimov)`` will match ``'Isaac '`` only "
"if it's *not* followed by ``'Asimov'``."
msgstr ""
"当 ``…`` 不匹配时，匹配成功。这个叫 :dfn:`否定型前视断言` （negative lookahead assertion）。例如， "
"``Isaac (?!Asimov)`` 将会匹配 ``'Isaac '`` ，仅当它后面 *不是* ``'Asimov'``   。"

#: ../../library/re.rst:473
msgid "``(?<=...)``"
msgstr "``(?<=…)``"

#: ../../library/re.rst:474
msgid ""
"Matches if the current position in the string is preceded by a match for "
"``...`` that ends at the current position.  This is called a :dfn:`positive "
"lookbehind assertion`. ``(?<=abc)def`` will find a match in ``'abcdef'``, "
"since the lookbehind will back up 3 characters and check if the contained "
"pattern matches. The contained pattern must only match strings of some fixed"
" length, meaning that ``abc`` or ``a|b`` are allowed, but ``a*`` and "
"``a{3,4}`` are not.  Note that patterns which start with positive lookbehind"
" assertions will not match at the beginning of the string being searched; "
"you will most likely want to use the :func:`search` function rather than the"
" :func:`match` function:"
msgstr ""
"如果 ``...`` 的匹配内容出现在当前位置的左侧，则匹配。这叫做 :dfn:`肯定型后视断言` （positive lookbehind "
"assertion）。 ``(?<=abc)def`` 将会在 ``'abcdef'`` "
"中找到一个匹配，因为后视会回退3个字符并检查内部表达式是否匹配。内部表达式（匹配的内容）必须是固定长度的，意思就是 ``abc`` 或 ``a|b`` "
"是允许的，但是 ``a*`` 和 ``a{3,4}`` "
"不可以。注意，以肯定型后视断言开头的正则表达式，匹配项一般不会位于搜索字符串的开头。很可能你应该使用 :func:`search` 函数，而不是 "
":func:`match` 函数："

#: ../../library/re.rst:489
msgid "This example looks for a word following a hyphen:"
msgstr "这个例子搜索一个跟随在连字符后的单词："

#: ../../library/re.rst:495
msgid "Added support for group references of fixed length."
msgstr "添加定长组合引用的支持。"

#: ../../library/re.rst:500
msgid "``(?<!...)``"
msgstr "``(?<!…)``"

#: ../../library/re.rst:501
msgid ""
"Matches if the current position in the string is not preceded by a match for"
" ``...``.  This is called a :dfn:`negative lookbehind assertion`.  Similar "
"to positive lookbehind assertions, the contained pattern must only match "
"strings of some fixed length.  Patterns which start with negative lookbehind"
" assertions may match at the beginning of the string being searched."
msgstr ""
"如果 ``...`` 的匹配内容没有出现在当前位置的左侧，则匹配。这个叫做 :dfn:`否定型后视断言` （negative lookbehind "
"assertion）。类似于肯定型后视断言，内部表达式（匹配的内容）必须是固定长度的。以否定型后视断言开头的正则表达式，匹配项可能位于搜索字符串的开头。"

#: ../../library/re.rst:510
msgid "``(?(id/name)yes-pattern|no-pattern)``"
msgstr "``(?(id/name)yes-pattern|no-pattern)``"

#: ../../library/re.rst:511
msgid ""
"Will try to match with ``yes-pattern`` if the group with given *id* or "
"*name* exists, and with ``no-pattern`` if it doesn't. ``no-pattern`` is "
"optional and can be omitted. For example, "
"``(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)`` is a poor email matching pattern, "
"which will match with ``'<user@host.com>'`` as well as ``'user@host.com'``, "
"but not with ``'<user@host.com'`` nor ``'user@host.com>'``."
msgstr ""
"如果给定的  *id* 或 *name* 存在，将会尝试匹配 ``yes-pattern`` ，否则就尝试匹配 ``no-pattern``，``no-"
"pattern`` 可选，也可以被忽略。比如， ``(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)`` "
"是一个email样式匹配，将匹配 ``'<user@host.com>'`` 或 ``'user@host.com'`` ，但不会匹配 "
"``'<user@host.com'`` ，也不会匹配 ``'user@host.com>'``。"

#: ../../library/re.rst:518
msgid ""
"Group *id* can only contain ASCII digits. In :class:`bytes` patterns, group "
"*name* can only contain bytes in the ASCII range "
"(``b'\\x00'``-``b'\\x7f'``)."
msgstr ""
"分组 *id* 只能包含 ASCII 数码。 在 :class:`bytes` 模式中，分组 *name* 只能包含 ASCII 范围内的字节值 "
"(``b'\\x00'``-``b'\\x7f'``)。"

#: ../../library/re.rst:526
msgid ""
"The special sequences consist of ``'\\'`` and a character from the list "
"below. If the ordinary character is not an ASCII digit or an ASCII letter, "
"then the resulting RE will match the second character.  For example, ``\\$``"
" matches the character ``'$'``."
msgstr ""
"由 ``'\\'`` 和一个字符组成的特殊序列在以下列出。 "
"如果普通字符不是ASCII数位或者ASCII字母，那么正则样式将匹配第二个字符。比如，``\\$`` 匹配字符 ``'$'``."

#: ../../library/re.rst:533
msgid "``\\number``"
msgstr "``\\number``"

#: ../../library/re.rst:534
msgid ""
"Matches the contents of the group of the same number.  Groups are numbered "
"starting from 1.  For example, ``(.+) \\1`` matches ``'the the'`` or ``'55 "
"55'``, but not ``'thethe'`` (note the space after the group).  This special "
"sequence can only be used to match one of the first 99 groups.  If the first"
" digit of *number* is 0, or *number* is 3 octal digits long, it will not be "
"interpreted as a group match, but as the character with octal value "
"*number*. Inside the ``'['`` and ``']'`` of a character class, all numeric "
"escapes are treated as characters."
msgstr ""
"匹配数字代表的组合。每个括号是一个组合，组合从1开始编号。比如 ``(.+) \\1`` 匹配 ``'the the'`` 或者 ``'55 "
"55'``, 但不会匹配 ``'thethe'`` (注意组合后面的空格)。这个特殊序列只能用于匹配前面99个组合。如果  *number* "
"的第一个数位是0， 或者 *number* 是三个八进制数，它将不会被看作是一个组合，而是八进制的数字值。在 ``'['`` 和 ``']'`` "
"字符集合内，任何数字转义都被看作是字符。"

#: ../../library/re.rst:545
msgid "``\\A``"
msgstr "``\\A``"

#: ../../library/re.rst:546
msgid "Matches only at the start of the string."
msgstr "只匹配字符串开始。"

#: ../../library/re.rst:550
msgid "``\\b``"
msgstr "``\\b``"

#: ../../library/re.rst:551
msgid ""
"Matches the empty string, but only at the beginning or end of a word. A word"
" is defined as a sequence of word characters. Note that formally, ``\\b`` is"
" defined as the boundary between a ``\\w`` and a ``\\W`` character (or vice "
"versa), or between ``\\w`` and the beginning or end of the string. This "
"means that ``r'\\bat\\b'`` matches ``'at'``, ``'at.'``, ``'(at)'``, and "
"``'as at ay'`` but not ``'attempt'`` or ``'atlas'``."
msgstr ""
"匹配空字符串，但只在单词开始或结尾的位置。 一个单词被定义为一个单词字符的序列。 注意在通常情况下，``\\b`` 被定义为 ``\\w`` 和 "
"``\\W`` 字符之间的边界（反之亦然），或是 ``\\w`` 和字符串开始或结尾之间的边界。 这意味着 ``r'\\bat\\b'`` 将匹配 "
"``'at'``, ``'at.'``, ``'(at)'`` 和 ``'as at ay'`` 但不匹配 ``'attempt'`` 或 "
"``'atlas'``。"

#: ../../library/re.rst:559
msgid ""
"The default word characters in Unicode (str) patterns are Unicode "
"alphanumerics and the underscore, but this can be changed by using the "
":py:const:`~re.ASCII` flag. Word boundaries are determined by the current "
"locale if the :py:const:`~re.LOCALE` flag is used."
msgstr ""
"Unicode (str) 模式中默认的单词类字符是 Unicode 字母数字和下划线，但这可以通过使用 :py:const:`~re.ASCII` "
"旗标来改变。 如果使用了 :py:const:`~re.LOCALE` 旗标则单词边界将根据当前语言区域来确定。"

#: ../../library/re.rst:567
msgid ""
"Inside a character range, ``\\b`` represents the backspace character, for "
"compatibility with Python's string literals."
msgstr "在一个字符范围内，``\\b`` 代表退格符，以便与 Python 的字符串字面值保持兼容。"

#: ../../library/re.rst:572
msgid "``\\B``"
msgstr "``\\B``"

#: ../../library/re.rst:573
msgid ""
"Matches the empty string, but only when it is *not* at the beginning or end "
"of a word. This means that ``r'at\\B'`` matches ``'athens'``, ``'atom'``, "
"``'attorney'``, but not ``'at'``, ``'at.'``, or ``'at!'``. ``\\B`` is the "
"opposite of ``\\b``, so word characters in Unicode (str) patterns are "
"Unicode alphanumerics or the underscore, although this can be changed by "
"using the :py:const:`~re.ASCII` flag. Word boundaries are determined by the "
"current locale if the :py:const:`~re.LOCALE` flag is used."
msgstr ""
"匹配空字符串，但仅限于它 *不在* 单词的开头或结尾的情况。 这意味着 ``r'at\\B'`` 将匹配 ``'athens'``, "
"``'atom'``, ``'attorney'``，但不匹配 ``'at'``, ``'at.'`` 或 ``'at!'``。 ``\\B`` 与 "
"``\\b`` 正相反，这样 Unicode (str) 模式中的单词类字符是 Unicode 字母数字或下划线，但这可以通过使用 "
":py:const:`~re.ASCII` 旗标来改变。 如果使用了 :py:const:`~re.LOCALE` "
"旗标则单词边界将根据当前语言区域来确定。"

#: ../../library/re.rst:586
msgid ""
"Note that ``\\B`` does not match an empty string, which differs from RE "
"implementations in other programming languages such as Perl. This behavior "
"is kept for compatibility reasons."
msgstr "请注意 ``\\B`` 不会匹配空字符串，这与其他编程语言如 Perl 的 RE 实现不同。 此行为是出于兼容性考虑而保留的。"

#: ../../library/re.rst:592
msgid "``\\d``"
msgstr "``\\d``"

#: ../../library/re.rst:593 ../../library/re.rst:617 ../../library/re.rst:639
msgid "For Unicode (str) patterns:"
msgstr "对于 Unicode (str) 样式："

#: ../../library/re.rst:594
msgid ""
"Matches any Unicode decimal digit (that is, any character in Unicode "
"character category `[Nd]`__). This includes ``[0-9]``, and also many other "
"digit characters."
msgstr ""
"匹配任意 Unicode 十进制数码（也就是说，任何属于 Unicode 字符类别 `[Nd]`__ 的字符）。 这包括 "
"``[0-9]``，还包括许多其他的数码类字符。"

#: ../../library/re.rst:598
msgid "Matches ``[0-9]`` if the :py:const:`~re.ASCII` flag is used."
msgstr "如果使用了 :py:const:`~re.ASCII` 旗标则匹配 ``[0-9]``"

#: ../../library/re.rst:602 ../../library/re.rst:624 ../../library/re.rst:647
msgid "For 8-bit (bytes) patterns:"
msgstr "对于8位(bytes)样式："

#: ../../library/re.rst:603
msgid ""
"Matches any decimal digit in the ASCII character set; this is equivalent to "
"``[0-9]``."
msgstr "匹配 ASCII 字符集内的任意十进制数码；这等价于 ``[0-9]``。"

#: ../../library/re.rst:608
msgid "``\\D``"
msgstr "``\\D``"

#: ../../library/re.rst:609
msgid ""
"Matches any character which is not a decimal digit. This is the opposite of "
"``\\d``."
msgstr "匹配不属于十进制数码的任意字符。 这与 ``\\d`` 正相反。"

#: ../../library/re.rst:612
msgid "Matches ``[^0-9]`` if the :py:const:`~re.ASCII` flag is used."
msgstr "如果使用了 :py:const:`~re.ASCII` 旗标则匹配 ``[^0-9]``"

#: ../../library/re.rst:616
msgid "``\\s``"
msgstr "``\\s``"

#: ../../library/re.rst:618
msgid ""
"Matches Unicode whitespace characters (as defined by "
":py:meth:`str.isspace`). This includes ``[ \\t\\n\\r\\f\\v]``, and also many"
" other characters, for example the non-breaking spaces mandated by "
"typography rules in many languages."
msgstr ""
"匹配 Unicode 空白字符（如 :py:meth:`str.isspace` 所定义的）。 这包括 ``[ "
"\\t\\n\\r\\f\\v]``，还包括许多其他字符，例如许多语言中由排版规则约定的非中断空白字符。"

#: ../../library/re.rst:622
msgid "Matches ``[ \\t\\n\\r\\f\\v]`` if the :py:const:`~re.ASCII` flag is used."
msgstr "如果使用了 :py:const:`~re.ASCII` 旗标则匹配 ``[ \\t\\n\\r\\f\\v]``。"

#: ../../library/re.rst:625
msgid ""
"Matches characters considered whitespace in the ASCII character set; this is"
" equivalent to ``[ \\t\\n\\r\\f\\v]``."
msgstr "匹配ASCII中的空白字符，就是 ``[ \\t\\n\\r\\f\\v]`` 。"

#: ../../library/re.rst:630
msgid "``\\S``"
msgstr "``\\S``"

#: ../../library/re.rst:631
msgid ""
"Matches any character which is not a whitespace character. This is the "
"opposite of ``\\s``."
msgstr "匹配不属于空白字符的任意字符。 这与 ``\\s`` 正相反。"

#: ../../library/re.rst:634
msgid "Matches ``[^ \\t\\n\\r\\f\\v]`` if the :py:const:`~re.ASCII` flag is used."
msgstr "如果使用了 :py:const:`~re.ASCII` 旗标则匹配 ``[^ \\t\\n\\r\\f\\v]``"

#: ../../library/re.rst:638
msgid "``\\w``"
msgstr "``\\w``"

#: ../../library/re.rst:640
msgid ""
"Matches Unicode word characters; this includes all Unicode alphanumeric "
"characters (as defined by :py:meth:`str.isalnum`), as well as the underscore"
" (``_``)."
msgstr ""
"匹配 Unicode 单词类字符；这包括所有 Unicode 字母数字类字符 (由 :py:meth:`str.isalnum` 定义)，以及下划线 "
"(``_``)。"

#: ../../library/re.rst:645
msgid "Matches ``[a-zA-Z0-9_]`` if the :py:const:`~re.ASCII` flag is used."
msgstr "如果使用了 :py:const:`~re.ASCII` 旗标则匹配 ``[a-zA-Z0-9_]``。"

#: ../../library/re.rst:648
msgid ""
"Matches characters considered alphanumeric in the ASCII character set; this "
"is equivalent to ``[a-zA-Z0-9_]``. If the :py:const:`~re.LOCALE` flag is "
"used, matches characters considered alphanumeric in the current locale and "
"the underscore."
msgstr ""
"匹配在 ASCII 字符集中被视为字母数字的字符；这等价于 ``[a-zA-Z0-9_]``。 如果使用了 :py:const:`~re.LOCALE`"
" 旗标，则匹配在当前语言区域中被视为字母数字的字符以及下划线。"

#: ../../library/re.rst:655
msgid "``\\W``"
msgstr "``\\W``"

#: ../../library/re.rst:656
msgid ""
"Matches any character which is not a word character. This is the opposite of"
" ``\\w``. By default, matches non-underscore (``_``) characters for which "
":py:meth:`str.isalnum` returns ``False``."
msgstr ""
"匹配不属于单词类字符的任意字符。 这与 ``\\w`` 正相反。 在默认情况下，将匹配除下划线 (``_``) 以外的 "
":py:meth:`str.isalnum` 返回 ``False`` 的字符。"

#: ../../library/re.rst:661
msgid "Matches ``[^a-zA-Z0-9_]`` if the :py:const:`~re.ASCII` flag is used."
msgstr "如果使用了 :py:const:`~re.ASCII` 旗标则匹配 ``[^a-zA-Z0-9_]``。"

#: ../../library/re.rst:663
msgid ""
"If the :py:const:`~re.LOCALE` flag is used, matches characters which are "
"neither alphanumeric in the current locale nor the underscore."
msgstr "如果使用了 :py:const:`~re.LOCALE` 旗标，则匹配在当前语言区域中不属于字母数字且不为下划线的字符。"

#: ../../library/re.rst:669
msgid "``\\Z``"
msgstr "``\\Z``"

#: ../../library/re.rst:670
msgid "Matches only at the end of the string."
msgstr "只匹配字符串尾。"

#: ../../library/re.rst:686
msgid ""
"Most of the :ref:`escape sequences <escape-sequences>` supported by Python "
"string literals are also accepted by the regular expression parser::"
msgstr "Python 字符串字面值支持的大多数 :ref:`转义序列 <escape-sequences>` 也被正则表达式解析器所接受::"

#: ../../library/re.rst:689
msgid ""
"\\a      \\b      \\f      \\n\n"
"\\N      \\r      \\t      \\u\n"
"\\U      \\v      \\x      \\\\"
msgstr ""
"\\a      \\b      \\f      \\n\n"
"\\N      \\r      \\t      \\u\n"
"\\U      \\v      \\x      \\\\"

#: ../../library/re.rst:693
msgid ""
"(Note that ``\\b`` is used to represent word boundaries, and means "
"\"backspace\" only inside character classes.)"
msgstr "（注意 ``\\b`` 被用于表示词语的边界，它只在字符集合内表示退格，比如 ``[\\b]`` 。）"

#: ../../library/re.rst:696
msgid ""
"``'\\u'``, ``'\\U'``, and ``'\\N'`` escape sequences are only recognized in "
"Unicode (str) patterns. In bytes patterns they are errors. Unknown escapes "
"of ASCII letters are reserved for future use and treated as errors."
msgstr ""
"``'\\u'``, ``'\\U'`` 和 ``'\\N'`` 转义序列仅在 Unicode (str) 模式中可被识别。 "
"在字节串模式中它们会导致错误。 未知的 ASCII 字母转义符被保留在未来使用并会被视为错误。"

#: ../../library/re.rst:702
msgid ""
"Octal escapes are included in a limited form.  If the first digit is a 0, or"
" if there are three octal digits, it is considered an octal escape. "
"Otherwise, it is a group reference.  As for string literals, octal escapes "
"are always at most three digits in length."
msgstr ""
"八进制转义包含为一个有限形式。如果首位数字是 0， "
"或者有三个八进制数位，那么就认为它是八进制转义。其他的情况，就看作是组引用。对于字符串文本，八进制转义最多有三个数位长。"

#: ../../library/re.rst:707
msgid "The ``'\\u'`` and ``'\\U'`` escape sequences have been added."
msgstr "增加了 ``'\\u'`` 和 ``'\\U'`` 转义序列。"

#: ../../library/re.rst:710
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter now are errors."
msgstr "由 ``'\\'`` 和一个ASCII字符组成的未知转义会被看成错误。"

#: ../../library/re.rst:713
msgid ""
"The :samp:`'\\\\N\\\\{{name}\\\\}'` escape sequence has been added. As in "
"string literals, it expands to the named Unicode character (e.g. ``'\\N{EM "
"DASH}'``)."
msgstr ""
"增加了 :samp:`'\\\\N\\\\{{name}\\\\}'` 转义序列。 与在字符串字面值中一样，它扩展了指定的 Unicode 字符 (例如"
" ``'\\N{EM DASH}'``)。"

#: ../../library/re.rst:721
msgid "Module Contents"
msgstr "模块内容"

#: ../../library/re.rst:723
msgid ""
"The module defines several functions, constants, and an exception. Some of "
"the functions are simplified versions of the full featured methods for "
"compiled regular expressions.  Most non-trivial applications always use the "
"compiled form."
msgstr ""
"模块定义了几个函数、常量，和一个异常。有些函数是编译后的正则表达式方法的简化版本（少了一些特性）。重要的应用程序大多会在使用前先编译正则表达式。"

#: ../../library/re.rst:730
msgid "Flags"
msgstr "标志"

#: ../../library/re.rst:732
msgid ""
"Flag constants are now instances of :class:`RegexFlag`, which is a subclass "
"of :class:`enum.IntFlag`."
msgstr "标志常量现在是 :class:`RegexFlag` 类的实例，这个类是 :class:`enum.IntFlag` 的子类。"

#: ../../library/re.rst:739
msgid ""
"An :class:`enum.IntFlag` class containing the regex options listed below."
msgstr "包含以下列出的正则表达式选项的 :class:`enum.IntFlag` 类。"

#: ../../library/re.rst:741
msgid "- added to ``__all__``"
msgstr "- 添加到 ``__all__``"

#: ../../library/re.rst:746
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\d``, ``\\D``, ``\\s`` and "
"``\\S`` perform ASCII-only matching instead of full Unicode matching.  This "
"is only meaningful for Unicode (str) patterns, and is ignored for bytes "
"patterns."
msgstr ""
"使 ``\\w``, ``\\W``, ``\\b``, ``\\B``, ``\\d``, ``\\D``, ``\\s`` 和 ``\\S`` "
"执行仅限 ASCII 匹配而不是完整的 Unicode 匹配。 这仅对 Unicode (str) 模式有意义，而对字节串模式将被忽略。"

#: ../../library/re.rst:750
msgid "Corresponds to the inline flag ``(?a)``."
msgstr "对应于内联旗标 ``(?a)``。"

#: ../../library/re.rst:754
msgid ""
"The :py:const:`~re.U` flag still exists for backward compatibility, but is "
"redundant in Python 3 since matches are Unicode by default for ``str`` "
"patterns, and Unicode matching isn't allowed for bytes patterns. "
":py:const:`~re.UNICODE` and the inline flag ``(?u)`` are similarly "
"redundant."
msgstr ""
":py:const:`~re.U` 旗标仍然存在以保持下向兼容性，但在 Python 3 中是多余的因为对于 ``str`` 模式默认使用 "
"Unicode，并且 Unicode 匹配对于 bytes 模式则是不允许的。 :py:const:`~re.UNICODE` 和内联旗标 "
"``(?u)`` 同样也是多余的。"

#: ../../library/re.rst:763
msgid "Display debug information about compiled expression."
msgstr "显示有关被编译表达式的调试信息。"

#: ../../library/re.rst:765
msgid "No corresponding inline flag."
msgstr "没有对应的内联旗标。"

#: ../../library/re.rst:771
msgid ""
"Perform case-insensitive matching; expressions like ``[A-Z]`` will also  "
"match lowercase letters. Full Unicode matching (such as ``Ü`` matching "
"``ü``) also works unless the :py:const:`~re.ASCII` flag is used to disable "
"non-ASCII matches. The current locale does not change the effect of this "
"flag unless the :py:const:`~re.LOCALE` flag is also used."
msgstr ""
"执行忽略大小写的匹配；``[A-Z]`` 这样的表达式也将匹配小写字母。 完全的 Unicode 匹配 (如 ``Ü`` 将匹配 ``ü``) "
"同样适用，除非使用了 :py:const:`~re.ASCII` 旗标来禁用非 ASCII 匹配。 当前语言区域不会改变该旗标的效果，除非还使用了 "
":py:const:`~re.LOCALE` 旗标。"

#: ../../library/re.rst:779
msgid "Corresponds to the inline flag ``(?i)``."
msgstr "对应于内联旗标 ``(?i)``。"

#: ../../library/re.rst:781
msgid ""
"Note that when the Unicode patterns ``[a-z]`` or ``[A-Z]`` are used in "
"combination with the :const:`IGNORECASE` flag, they will match the 52 ASCII "
"letters and 4 additional non-ASCII letters: 'İ' (U+0130, Latin capital "
"letter I with dot above), 'ı' (U+0131, Latin small letter dotless i), 'ſ' "
"(U+017F, Latin small letter long s) and 'K' (U+212A, Kelvin sign). If the "
":py:const:`~re.ASCII` flag is used, only letters 'a' to 'z' and 'A' to 'Z' "
"are matched."
msgstr ""
"请注意当 Unicode 模式 ``[a-z]`` 或 ``[A-Z]`` 与 :const:`IGNORECASE` 旗标一起使用时，它们将匹配 52"
" 个 ASCII 字母和 4 个额外的非 ASCII 字母: 'İ' (U+0130, 大写拉丁字母 I 带有上方的点), 'ı' (U+0131, "
"小写拉丁字母 i 不带上方的点), 'ſ' (U+017F, 小写拉丁字母长 s) 和 'K' (U+212A, 开尔文标记)。 如果使用了 "
":py:const:`~re.ASCII` 旗标，则只匹配字母 'a' 到 'z' 和 'A' 到 'Z'。"

#: ../../library/re.rst:792
msgid ""
"Make ``\\w``, ``\\W``, ``\\b``, ``\\B`` and case-insensitive matching "
"dependent on the current locale. This flag can be used only with bytes "
"patterns."
msgstr "使 ``\\w``, ``\\W``, ``\\b``, ``\\B`` 和忽略大小写的匹配依赖于当前语言区域。 该旗标仅适用于 bytes 模式。"

#: ../../library/re.rst:796
msgid "Corresponds to the inline flag ``(?L)``."
msgstr "对应于内联旗标 ``(?L)``。"

#: ../../library/re.rst:800
msgid ""
"This flag is discouraged; consider Unicode matching instead. The locale "
"mechanism is very unreliable as it only handles one \"culture\" at a time "
"and only works with 8-bit locales. Unicode matching is enabled by default "
"for Unicode (str) patterns and it is able to handle different locales and "
"languages."
msgstr ""
"该旗标已不建议使用；请考虑改用 Unicode 匹配。 语言区域机制相当不可靠因为它每次只能处理一种“文化”并且只适用于 8 位语言区域。 "
"Unicode (str) 模式默认启用 Unicode 匹配并且能够处理不同的语言区域和语言。"

#: ../../library/re.rst:807
msgid ""
":py:const:`~re.LOCALE` can be used only with bytes patterns and is not "
"compatible with :py:const:`~re.ASCII`."
msgstr ":py:const:`~re.LOCALE` 仅适用于 bytes 模式并且不能兼容 :py:const:`~re.ASCII`。"

#: ../../library/re.rst:811
msgid ""
"Compiled regular expression objects with the :py:const:`~re.LOCALE` flag no "
"longer depend on the locale at compile time. Only the locale at matching "
"time affects the result of matching."
msgstr ""
"设置了 :py:const:`~re.LOCALE` 旗标的已编译正则表达式对象不会再依赖于编译时的语言区域。 只有在匹配时的语言区域才会影响匹配结果。"

#: ../../library/re.rst:820
msgid ""
"When specified, the pattern character ``'^'`` matches at the beginning of "
"the string and at the beginning of each line (immediately following each "
"newline); and the pattern character ``'$'`` matches at the end of the string"
" and at the end of each line (immediately preceding each newline).  By "
"default, ``'^'`` matches only at the beginning of the string, and ``'$'`` "
"only at the end of the string and immediately before the newline (if any) at"
" the end of the string."
msgstr ""
"在指定之后，模式字符 ``'^'`` 将匹配字符串的开始和每一行的开头（紧随在换行符之后）；而模式字符 ``'$'`` "
"将匹配字符串的末尾和每一行的末尾（紧接在换行符之前）。 在默认情况下，``'^'`` 只匹配字符串的开头，而``'$'`` "
"只匹配字符串的末尾和紧接在字符串末尾（可能存在的）换行符之前。"

#: ../../library/re.rst:827
msgid "Corresponds to the inline flag ``(?m)``."
msgstr "对应于内联旗标 ``(?m)``。"

#: ../../library/re.rst:831
msgid ""
"Indicates no flag being applied, the value is ``0``.  This flag may be used "
"as a default value for a function keyword argument or as a base value that "
"will be conditionally ORed with other flags.  Example of use as a default "
"value::"
msgstr ""
"表示未应用任何旗标，该值为 ``0``。 该旗标可被用作某个函数关键字参数的默认值或者用作将与其他旗标进行有条件 OR 运算的基准值。 "
"用作默认值的例子::"

#: ../../library/re.rst:836
msgid ""
"def myfunc(text, flag=re.NOFLAG):\n"
"    return re.match(text, flag)"
msgstr ""
"def myfunc(text, flag=re.NOFLAG):\n"
"    return re.match(text, flag)"

#: ../../library/re.rst:844
msgid ""
"Make the ``'.'`` special character match any character at all, including a "
"newline; without this flag, ``'.'`` will match anything *except* a newline."
msgstr "使 ``'.'`` 特殊字符匹配任意字符，包括换行符；如果没有这个旗标，``'.'`` 将匹配 *除去* 换行符以外的任意字符。"

#: ../../library/re.rst:847
msgid "Corresponds to the inline flag ``(?s)``."
msgstr "对应于内联旗标 ``(?s)``。"

#: ../../library/re.rst:853
msgid ""
"In Python 3, Unicode characters are matched by default for ``str`` patterns."
" This flag is therefore redundant with **no effect** and is only kept for "
"backward compatibility."
msgstr ""
"在 Python 3 中，``str`` 模式默认将匹配 Unicode 字符。 因此这个旗标多余且 **无任何效果**，仅保留用于向下兼容。"

#: ../../library/re.rst:858
msgid ""
"See :py:const:`~re.ASCII` to restrict matching to ASCII characters instead."
msgstr "请参阅 :py:const:`~re.ASCII` 了解如何改为仅限匹配 ASCII 字符。"

#: ../../library/re.rst:865
msgid ""
"This flag allows you to write regular expressions that look nicer and are "
"more readable by allowing you to visually separate logical sections of the "
"pattern and add comments. Whitespace within the pattern is ignored, except "
"when in a character class, or when preceded by an unescaped backslash, or "
"within tokens like ``*?``, ``(?:`` or ``(?P<...>``. For example, ``(? :`` "
"and ``* ?`` are not allowed. When a line contains a ``#`` that is not in a "
"character class and is not preceded by an unescaped backslash, all "
"characters from the leftmost such ``#`` through the end of the line are "
"ignored."
msgstr ""
"这个旗标允许你通过在视觉上分隔表达式的逻辑段落和添加注释来编写更为友好并更具可读性的正则表达式。 "
"表达式中的空白符会被忽略，除非是在字符类中，或前面有一个未转义的反斜杠，或者是在 ``*?``, ``(?:`` 或 ``(?P<...>`` "
"等形符之内。 例如，``(? :`` 和 ``* ?`` 是不被允许的。 当一个行内包含不在字符类中并且前面没有未转义反斜杠的 ``#`` "
"时，则从最左边的此 ``#`` 直至行尾的所有字符都会被忽略。"

#: ../../library/re.rst:875
msgid ""
"This means that the two following regular expression objects that match a "
"decimal number are functionally equal::"
msgstr "意思就是下面两个正则表达式等价地匹配一个十进制数字："

#: ../../library/re.rst:878
msgid ""
"a = re.compile(r\"\"\"\\d +  # the integral part\n"
"                   \\.    # the decimal point\n"
"                   \\d *  # some fractional digits\"\"\", re.X)\n"
"b = re.compile(r\"\\d+\\.\\d*\")"
msgstr ""
"a = re.compile(r\"\"\"\\d +  # 整数部分\n"
"                   \\.    # 小数点\n"
"                   \\d *  # 几个小数位\"\"\", re.X)\n"
"b = re.compile(r\"\\d+\\.\\d*\")"

#: ../../library/re.rst:883
msgid "Corresponds to the inline flag ``(?x)``."
msgstr "对应内联标记 ``(?x)`` 。"

#: ../../library/re.rst:887
msgid "Functions"
msgstr "函数"

#: ../../library/re.rst:891
msgid ""
"Compile a regular expression pattern into a :ref:`regular expression object "
"<re-objects>`, which can be used for matching using its "
":func:`~Pattern.match`, :func:`~Pattern.search` and other methods, described"
" below."
msgstr ""
"将正则表达式的样式编译为一个 :ref:`正则表达式对象 <re-objects>`  （正则对象），可以用于匹配，通过这个对象的方法  "
":func:`~Pattern.match`, :func:`~Pattern.search` 以及其他如下描述。"

#: ../../library/re.rst:896 ../../library/re.rst:928 ../../library/re.rst:946
#: ../../library/re.rst:957 ../../library/re.rst:1003
#: ../../library/re.rst:1037 ../../library/re.rst:1052
#: ../../library/re.rst:1114 ../../library/re.rst:1149
msgid ""
"The expression's behaviour can be modified by specifying a *flags* value. "
"Values can be any of the `flags`_ variables, combined using bitwise OR (the "
"``|`` operator)."
msgstr ""
"表达式的行为可通过指定 *flags* 值来修改。 值可以是任意 `flags`_ 变量，可使用按位 OR (``|`` 运算符) 进行组合。"

#: ../../library/re.rst:900
msgid "The sequence ::"
msgstr "序列 ::"

#: ../../library/re.rst:902
msgid ""
"prog = re.compile(pattern)\n"
"result = prog.match(string)"
msgstr ""
"prog = re.compile(pattern)\n"
"result = prog.match(string)"

#: ../../library/re.rst:905
msgid "is equivalent to ::"
msgstr "等价于 ::"

#: ../../library/re.rst:907
msgid "result = re.match(pattern, string)"
msgstr "result = re.match(pattern, string)"

#: ../../library/re.rst:909
msgid ""
"but using :func:`re.compile` and saving the resulting regular expression "
"object for reuse is more efficient when the expression will be used several "
"times in a single program."
msgstr "如果需要多次使用这个正则表达式的话，使用 :func:`re.compile` 和保存这个正则对象以便复用，可以让程序更加高效。"

#: ../../library/re.rst:915
msgid ""
"The compiled versions of the most recent patterns passed to "
":func:`re.compile` and the module-level matching functions are cached, so "
"programs that use only a few regular expressions at a time needn't worry "
"about compiling regular expressions."
msgstr "通过 :func:`re.compile` 编译后的样式，和模块级的函数会被缓存， 所以少数的正则表达式使用无需考虑编译的问题。"

#: ../../library/re.rst:923
msgid ""
"Scan through *string* looking for the first location where the regular "
"expression *pattern* produces a match, and return a corresponding "
":class:`~re.Match`. Return ``None`` if no position in the string matches the"
" pattern; note that this is different from finding a zero-length match at "
"some point in the string."
msgstr ""
"扫描整个 *string* 查找正则表达式 *pattern* 产生匹配的第一个位置，并返回相应的 :class:`~re.Match`。 "
"如果字符串中没有与模式匹配的位置则返回 ``None``；请注意这不同于在字符串的某个位置上找到零长度匹配。"

#: ../../library/re.rst:935
msgid ""
"If zero or more characters at the beginning of *string* match the regular "
"expression *pattern*, return a corresponding :class:`~re.Match`.  Return "
"``None`` if the string does not match the pattern; note that this is "
"different from a zero-length match."
msgstr ""
"如果 *string* 开头的零个或多个字符与正则表达式 *pattern* 匹配，则返回相应的 :class:`~re.Match`。 "
"如果字符串与模式不匹配则返回 ``None``；请注意这与零长度匹配是不同的。"

#: ../../library/re.rst:940
msgid ""
"Note that even in :const:`MULTILINE` mode, :func:`re.match` will only match "
"at the beginning of the string and not at the beginning of each line."
msgstr ""
"注意即便是 :const:`MULTILINE` 多行模式， :func:`re.match` 也只匹配字符串的开始位置，而不匹配每行开始。"

#: ../../library/re.rst:943
msgid ""
"If you want to locate a match anywhere in *string*, use :func:`search` "
"instead (see also :ref:`search-vs-match`)."
msgstr ""
"如果你想定位 *string* 的任何位置，使用 :func:`search` 来替代（也可参考 :ref:`search-vs-match` ）"

#: ../../library/re.rst:953
msgid ""
"If the whole *string* matches the regular expression *pattern*, return a "
"corresponding :class:`~re.Match`.  Return ``None`` if the string does not "
"match the pattern; note that this is different from a zero-length match."
msgstr ""
"如果整个 *string* 与正则表达式 *pattern* 匹配，则返回相应的 :class:`~re.Match`。 如果字符串与模式不匹配则返回 "
"``None``；请注意这与零长度匹配是不同的。"

#: ../../library/re.rst:966
msgid ""
"Split *string* by the occurrences of *pattern*.  If capturing parentheses "
"are used in *pattern*, then the text of all groups in the pattern are also "
"returned as part of the resulting list. If *maxsplit* is nonzero, at most "
"*maxsplit* splits occur, and the remainder of the string is returned as the "
"final element of the list. ::"
msgstr ""
"用 *pattern* 分开  *string* 。 如果在 *pattern* 中捕获到括号，那么所有的组里的文字也会包含在列表里。如果 "
"*maxsplit* 非零， 最多进行 *maxsplit* 次分隔， 剩下的字符全部返回到列表的最后一个元素。 ::"

#: ../../library/re.rst:972
msgid ""
">>> re.split(r'\\W+', 'Words, words, words.')\n"
"['Words', 'words', 'words', '']\n"
">>> re.split(r'(\\W+)', 'Words, words, words.')\n"
"['Words', ', ', 'words', ', ', 'words', '.', '']\n"
">>> re.split(r'\\W+', 'Words, words, words.', maxsplit=1)\n"
"['Words', 'words, words.']\n"
">>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)\n"
"['0', '3', '9']"
msgstr ""
">>> re.split(r'\\W+', 'Words, words, words.')\n"
"['Words', 'words', 'words', '']\n"
">>> re.split(r'(\\W+)', 'Words, words, words.')\n"
"['Words', ', ', 'words', ', ', 'words', '.', '']\n"
">>> re.split(r'\\W+', 'Words, words, words.', maxsplit=1)\n"
"['Words', 'words, words.']\n"
">>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)\n"
"['0', '3', '9']"

#: ../../library/re.rst:981
msgid ""
"If there are capturing groups in the separator and it matches at the start "
"of the string, the result will start with an empty string.  The same holds "
"for the end of the string::"
msgstr "如果分隔符里有捕获组合，并且匹配到字符串的开始，那么结果将会以一个空字符串开始。对于结尾也是一样 ::"

#: ../../library/re.rst:985
msgid ""
">>> re.split(r'(\\W+)', '...words, words...')\n"
"['', '...', 'words', ', ', 'words', '...', '']"
msgstr ""
">>> re.split(r'(\\W+)', '...words, words...')\n"
"['', '...', 'words', ', ', 'words', '...', '']"

#: ../../library/re.rst:988
msgid ""
"That way, separator components are always found at the same relative indices"
" within the result list."
msgstr "这样的话，分隔组将会出现在结果列表中同样的位置。"

#: ../../library/re.rst:991
msgid ""
"Adjacent empty matches are not possible, but an empty match can occur "
"immediately after a non-empty match."
msgstr "相邻的空匹配没有可能，但一个空匹配可以在一个非空匹配之后立即发生。"

#: ../../library/re.rst:994
msgid ""
">>> re.split(r'\\b', 'Words, words, words.')\n"
"['', 'Words', ', ', 'words', ', ', 'words', '.']\n"
">>> re.split(r'\\W*', '...words...')\n"
"['', '', 'w', 'o', 'r', 'd', 's', '', '']\n"
">>> re.split(r'(\\W*)', '...words...')\n"
"['', '...', '', '', 'w', '', 'o', '', 'r', '', 'd', '', 's', '...', '', '', '']"
msgstr ""
">>> re.split(r'\\b', 'Words, words, words.')\n"
"['', 'Words', ', ', 'words', ', ', 'words', '.']\n"
">>> re.split(r'\\W*', '...words...')\n"
"['', '', 'w', 'o', 'r', 'd', 's', '', '']\n"
">>> re.split(r'(\\W*)', '...words...')\n"
"['', '...', '', '', 'w', '', 'o', '', 'r', '', 'd', '', 's', '...', '', '', '']"

#: ../../library/re.rst:1007 ../../library/re.rst:1118
msgid "Added the optional flags argument."
msgstr "增加了可选标记参数。"

#: ../../library/re.rst:1010
msgid ""
"Added support of splitting on a pattern that could match an empty string."
msgstr "增加了空字符串的样式分隔。"

#: ../../library/re.rst:1013
msgid ""
"Passing *maxsplit* and *flags* as positional arguments is deprecated. In "
"future Python versions they will be :ref:`keyword-only parameters <keyword-"
"only_parameter>`."
msgstr ""
"以位置参数形式传入 *maxsplit* 和 *flags* 的做法已被弃用。 在未来的 Python 版本中它们将为 :ref:`仅限关键字形参 "
"<keyword-only_parameter>`。"

#: ../../library/re.rst:1021
msgid ""
"Return all non-overlapping matches of *pattern* in *string*, as a list of "
"strings or tuples.  The *string* is scanned left-to-right, and matches are "
"returned in the order found.  Empty matches are included in the result."
msgstr ""
"返回 *pattern* 在 *string* 中的所有非重叠匹配，以字符串列表或字符串元组列表的形式。对 *string* "
"的扫描从左至右，匹配结果按照找到的顺序返回。 空匹配也包括在结果中。"

#: ../../library/re.rst:1025
msgid ""
"The result depends on the number of capturing groups in the pattern. If "
"there are no groups, return a list of strings matching the whole pattern.  "
"If there is exactly one group, return a list of strings matching that group."
"  If multiple groups are present, return a list of tuples of strings "
"matching the groups.  Non-capturing groups do not affect the form of the "
"result."
msgstr ""
"返回结果取决于模式中捕获组的数量。如果没有组，返回与整个模式匹配的字符串列表。如果有且仅有一个组，返回与该组匹配的字符串列表。如果有多个组，返回与这些组匹配的字符串元组列表。非捕获组不影响结果。"

#: ../../library/re.rst:1041 ../../library/re.rst:1056
msgid "Non-empty matches can now start just after a previous empty match."
msgstr "非空匹配现在可以在前一个空匹配之后出现了。"

#: ../../library/re.rst:1047
msgid ""
"Return an :term:`iterator` yielding :class:`~re.Match` objects over all non-"
"overlapping matches for the RE *pattern* in *string*.  The *string* is "
"scanned left-to-right, and matches are returned in the order found.  Empty "
"matches are included in the result."
msgstr ""
"针对正则表达式 *pattern* 在 *string* 里的所有非重叠匹配返回一个产生 :class:`~re.Match` 对象的 "
":term:`iterator`。 *string* 将被从左至右地扫描，并且匹配也将按被找到的顺序返回。 空匹配也会被包括在结果中。"

#: ../../library/re.rst:1062
msgid ""
"Return the string obtained by replacing the leftmost non-overlapping "
"occurrences of *pattern* in *string* by the replacement *repl*.  If the "
"pattern isn't found, *string* is returned unchanged.  *repl* can be a string"
" or a function; if it is a string, any backslash escapes in it are "
"processed.  That is, ``\\n`` is converted to a single newline character, "
"``\\r`` is converted to a carriage return, and so forth.  Unknown escapes of"
" ASCII letters are reserved for future use and treated as errors.  Other "
"unknown escapes such as ``\\&`` are left alone. Backreferences, such as "
"``\\6``, are replaced with the substring matched by group 6 in the pattern. "
"For example::"
msgstr ""
"返回通过使用 *repl* 替换在 *string* 最左边非重叠出现的 *pattern* 而获得的字符串。 如果样式没有找到，则不加改变地返回 "
"*string*。 *repl* 可以是字符串或函数；如为字符串，则其中任何反斜杠转义序列都会被处理。 也就是说，``\\n`` "
"会被转换为一个换行符，``\\r`` 会被转换为一个回车符，依此类推。 未知的 ASCII 字符转义序列保留在未来使用，会被当作错误来处理。 "
"其他未知转义序列例如 ``\\&`` 会保持原样。 向后引用像是 ``\\6`` 会用样式中第 6 组所匹配到的子字符串来替换。 例如::"

#: ../../library/re.rst:1073
msgid ""
">>> re.sub(r'def\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(\\s*\\):',\n"
"...        r'static PyObject*\\npy_\\1(void)\\n{',\n"
"...        'def myfunc():')\n"
"'static PyObject*\\npy_myfunc(void)\\n{'"
msgstr ""
">>> re.sub(r'def\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(\\s*\\):',\n"
"...        r'static PyObject*\\npy_\\1(void)\\n{',\n"
"...        'def myfunc():')\n"
"'static PyObject*\\npy_myfunc(void)\\n{'"

#: ../../library/re.rst:1078
msgid ""
"If *repl* is a function, it is called for every non-overlapping occurrence "
"of *pattern*.  The function takes a single :class:`~re.Match` argument, and "
"returns the replacement string.  For example::"
msgstr ""
"如果 *repl* 是一个函数，则它会针对每次 *pattern* 的非重叠出现的情况被调用。 该函数接受单个 :class:`~re.Match` "
"参数，并返回替换字符串。 例如::"

#: ../../library/re.rst:1082
msgid ""
">>> def dashrepl(matchobj):\n"
"...     if matchobj.group(0) == '-': return ' '\n"
"...     else: return '-'\n"
"...\n"
">>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')\n"
"'pro--gram files'\n"
">>> re.sub(r'\\sAND\\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)\n"
"'Baked Beans & Spam'"
msgstr ""
">>> def dashrepl(matchobj):\n"
"...     if matchobj.group(0) == '-': return ' '\n"
"...     else: return '-'\n"
"...\n"
">>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')\n"
"'pro--gram files'\n"
">>> re.sub(r'\\sAND\\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)\n"
"'Baked Beans & Spam'"

#: ../../library/re.rst:1091
msgid "The pattern may be a string or a :class:`~re.Pattern`."
msgstr "模式可以是一个字符串或者 :class:`~re.Pattern`。"

#: ../../library/re.rst:1093
msgid ""
"The optional argument *count* is the maximum number of pattern occurrences "
"to be replaced; *count* must be a non-negative integer.  If omitted or zero,"
" all occurrences will be replaced."
msgstr "可选参数 *count* 是要替换的模式的最大出现次数；*count* 必须是一个非负整数。 如果省略或为零，则将全部替换。"

#: ../../library/re.rst:1097
msgid ""
"Adjacent empty matches are not possible, but an empty match can occur "
"immediately after a non-empty match. As a result, ``sub('x*', '-', 'abxd')``"
" returns ``'-a-b--d-'`` instead of ``'-a-b-d-'``."
msgstr ""
"相邻的空匹配没有可能，但一个空匹配可以在一个非空匹配之后立即发生。 因此，``sub('x*', '-', 'abxd')`` 将返回 ``'-a-b"
"--d-'`` 而不是 ``'-a-b-d-'``。"

#: ../../library/re.rst:1104
msgid ""
"In string-type *repl* arguments, in addition to the character escapes and "
"backreferences described above, ``\\g<name>`` will use the substring matched"
" by the group named ``name``, as defined by the ``(?P<name>...)`` syntax. "
"``\\g<number>`` uses the corresponding group number; ``\\g<2>`` is therefore"
" equivalent to ``\\2``, but isn't ambiguous in a replacement such as "
"``\\g<2>0``.  ``\\20`` would be interpreted as a reference to group 20, not "
"a reference to group 2 followed by the literal character ``'0'``.  The "
"backreference ``\\g<0>`` substitutes in the entire substring matched by the "
"RE."
msgstr ""
"在字符串类型的 *repl* 参数里，如上所述的转义和向后引用中，``\\g<name>`` 会使用命名组合 ``name``，（在  "
"``(?P<name>…)`` 语法中定义） ``\\g<number>`` 会使用数字组；``\\g<2>`` 就是 "
"``\\2``，但它避免了二义性，如 ``\\g<2>0``。 ``\\20`` 就会被解释为组20，而不是组2后面跟随一个字符 "
"``'0'``。向后引用 ``\\g<0>`` 把 *pattern* 作为一整个组进行引用。"

#: ../../library/re.rst:1121 ../../library/re.rst:1398
msgid "Unmatched groups are replaced with an empty string."
msgstr "不匹配的组合替换为空字符串。"

#: ../../library/re.rst:1124
msgid ""
"Unknown escapes in *pattern* consisting of ``'\\'`` and an ASCII letter now "
"are errors."
msgstr "*pattern* 中的未知转义（由 ``'\\'`` 和一个 ASCII 字符组成）被视为错误。"

#: ../../library/re.rst:1128
msgid ""
"Unknown escapes in *repl* consisting of ``'\\'`` and an ASCII letter now are"
" errors. An empty match can occur immediately after a non-empty match."
msgstr ""
"在 *repl* 中由 ``'\\'`` 加一个 ASCII 字母组成的未知转义序列现在将导致错误。 一个空匹配可以在一个非空匹配之后立即发生。"

#: ../../library/re.rst:1133
msgid ""
"Group *id* can only contain ASCII digits. In :class:`bytes` replacement "
"strings, group *name* can only contain bytes in the ASCII range "
"(``b'\\x00'``-``b'\\x7f'``)."
msgstr ""
"分组 *id* 只能包含 ASCII 数码。 在 :class:`bytes` 替换字符串中，分组 *name* 只能包含 ASCII 范围内的字节值 "
"(``b'\\x00'``-``b'\\x7f'``)。"

#: ../../library/re.rst:1138
msgid ""
"Passing *count* and *flags* as positional arguments is deprecated. In future"
" Python versions they will be :ref:`keyword-only parameters <keyword-"
"only_parameter>`."
msgstr ""
"以位置参数形式传入 *count* 和 *flags* 的做法已被弃用。 在未来的 Python 版本中它们将为 :ref:`仅限关键字形参 "
"<keyword-only_parameter>`。"

#: ../../library/re.rst:1146
msgid ""
"Perform the same operation as :func:`sub`, but return a tuple ``(new_string,"
" number_of_subs_made)``."
msgstr "行为与 :func:`sub` 相同，但是返回一个元组 ``(字符串, 替换次数)``."

#: ../../library/re.rst:1156
msgid ""
"Escape special characters in *pattern*. This is useful if you want to match "
"an arbitrary literal string that may have regular expression metacharacters "
"in it.  For example::"
msgstr "转义 *pattern* 中的特殊字符。如果你想对任意可能包含正则表达式元字符的文本字符串进行匹配，它就是有用的。比如 ::"

#: ../../library/re.rst:1160
msgid ""
">>> print(re.escape('https://www.python.org'))\n"
"https://www\\.python\\.org\n"
"\n"
">>> legal_chars = string.ascii_lowercase + string.digits + \"!#$%&'*+-.^_`|~:\"\n"
">>> print('[%s]+' % re.escape(legal_chars))\n"
"[abcdefghijklmnopqrstuvwxyz0123456789!\\#\\$%\\&'\\*\\+\\-\\.\\^_`\\|\\~:]+\n"
"\n"
">>> operators = ['+', '-', '*', '/', '**']\n"
">>> print('|'.join(map(re.escape, sorted(operators, reverse=True))))\n"
"/|\\-|\\+|\\*\\*|\\*"
msgstr ""
">>> print(re.escape('https://www.python.org'))\n"
"https://www\\.python\\.org\n"
"\n"
">>> legal_chars = string.ascii_lowercase + string.digits + \"!#$%&'*+-.^_`|~:\"\n"
">>> print('[%s]+' % re.escape(legal_chars))\n"
"[abcdefghijklmnopqrstuvwxyz0123456789!\\#\\$%\\&'\\*\\+\\-\\.\\^_`\\|\\~:]+\n"
"\n"
">>> operators = ['+', '-', '*', '/', '**']\n"
">>> print('|'.join(map(re.escape, sorted(operators, reverse=True))))\n"
"/|\\-|\\+|\\*\\*|\\*"

#: ../../library/re.rst:1171
msgid ""
"This function must not be used for the replacement string in :func:`sub` and"
" :func:`subn`, only backslashes should be escaped.  For example::"
msgstr "这个函数不能被用于 :func:`sub` 和 :func:`subn` 的替换字符串，只有反斜杠应该被转义。 例如::"

#: ../../library/re.rst:1174
msgid ""
">>> digits_re = r'\\d+'\n"
">>> sample = '/usr/sbin/sendmail - 0 errors, 12 warnings'\n"
">>> print(re.sub(digits_re, digits_re.replace('\\\\', r'\\\\'), sample))\n"
"/usr/sbin/sendmail - \\d+ errors, \\d+ warnings"
msgstr ""
">>> digits_re = r'\\d+'\n"
">>> sample = '/usr/sbin/sendmail - 0 errors, 12 warnings'\n"
">>> print(re.sub(digits_re, digits_re.replace('\\\\', r'\\\\'), sample))\n"
"/usr/sbin/sendmail - \\d+ errors, \\d+ warnings"

#: ../../library/re.rst:1179
msgid "The ``'_'`` character is no longer escaped."
msgstr "``'_'`` 不再被转义。"

#: ../../library/re.rst:1182
msgid ""
"Only characters that can have special meaning in a regular expression are "
"escaped. As a result, ``'!'``, ``'\"'``, ``'%'``, ``\"'\"``, ``','``, "
"``'/'``, ``':'``, ``';'``, ``'<'``, ``'='``, ``'>'``, ``'@'``, and ``\"`\"``"
" are no longer escaped."
msgstr ""
"只有在正则表达式中具有特殊含义的字符才会被转义。 因此， ``'!'``, ``'\"'``, ``'%'``, ``\"'\"``, ``','``,"
" ``'/'``, ``':'``, ``';'``, ``'<'``, ``'='``, ``'>'``, ``'@'`` 和 ``\"`\"`` "
"将不再会被转义。"

#: ../../library/re.rst:1191
msgid "Clear the regular expression cache."
msgstr "清除正则表达式的缓存。"

#: ../../library/re.rst:1195
msgid "Exceptions"
msgstr "异常"

#: ../../library/re.rst:1199
msgid ""
"Exception raised when a string passed to one of the functions here is not a "
"valid regular expression (for example, it might contain unmatched "
"parentheses) or when some other error occurs during compilation or matching."
"  It is never an error if a string contains no match for a pattern.  The "
"``PatternError`` instance has the following additional attributes:"
msgstr ""
"当传递给某个函数的字符串不是合法的正则表达式（例如，它可能包含不匹配的圆括号）或者当在编译或匹配期间出现其他错误时所引发的异常。 "
"如果字符串未包含对某个模式的匹配绝不会导致错误。 ``PatternError`` 实例具有下列附加属性："

#: ../../library/re.rst:1207
msgid "The unformatted error message."
msgstr "未格式化的错误消息。"

#: ../../library/re.rst:1211
msgid "The regular expression pattern."
msgstr "正则表达式的模式串。"

#: ../../library/re.rst:1215
msgid "The index in *pattern* where compilation failed (may be ``None``)."
msgstr "编译失败的 *pattern* 的位置索引（可以是 ``None`` ）。"

#: ../../library/re.rst:1219
msgid "The line corresponding to *pos* (may be ``None``)."
msgstr "对应 *pos* (可以是 ``None``) 的行号。"

#: ../../library/re.rst:1223
msgid "The column corresponding to *pos* (may be ``None``)."
msgstr "对应 *pos* (可以是 ``None``) 的列号。"

#: ../../library/re.rst:1225
msgid "Added additional attributes."
msgstr "增加了额外的属性。"

#: ../../library/re.rst:1228
msgid ""
"``PatternError`` was originally named ``error``; the latter is kept as an "
"alias for backward compatibility."
msgstr "``PatternError`` 原名为 ``error``；后者被保留作为一个别名用于向下兼容。"

#: ../../library/re.rst:1235
msgid "Regular Expression Objects"
msgstr "正则表达式对象 （正则对象）"

#: ../../library/re.rst:1239
msgid "Compiled regular expression object returned by :func:`re.compile`."
msgstr "由 :func:`re.compile` 返回的已编译正则表达式对象。"

#: ../../library/re.rst:1241
msgid ""
":py:class:`re.Pattern` supports ``[]`` to indicate a Unicode (str) or bytes "
"pattern. See :ref:`types-genericalias`."
msgstr ""
":py:class:`re.Pattern` 支持用 ``[]`` 表示 Unicode (str) 或字节串类型的模式。 参见 "
":ref:`types-genericalias`。"

#: ../../library/re.rst:1247
msgid ""
"Scan through *string* looking for the first location where this regular "
"expression produces a match, and return a corresponding :class:`~re.Match`. "
"Return ``None`` if no position in the string matches the pattern; note that "
"this is different from finding a zero-length match at some point in the "
"string."
msgstr ""
"扫描整个 *string* 查找该正则表达式产生匹配的第一个位置，并返回相应的 :class:`~re.Match`。 "
"如果字符串中没有与模式匹配的位置则返回 ``None``；请注意这不同于在字符串的某个位置上找到零长度匹配。"

#: ../../library/re.rst:1252
msgid ""
"The optional second parameter *pos* gives an index in the string where the "
"search is to start; it defaults to ``0``.  This is not completely equivalent"
" to slicing the string; the ``'^'`` pattern character matches at the real "
"beginning of the string and at positions just after a newline, but not "
"necessarily at the index where the search is to start."
msgstr ""
"可选的第二个参数 *pos* 给出了字符串中开始搜索的位置索引；默认为 ``0``，它不完全等价于字符串切片； ``'^'`` "
"样式字符匹配字符串真正的开头，和换行符后面的第一个字符，但不会匹配索引规定开始的位置。"

#: ../../library/re.rst:1258
msgid ""
"The optional parameter *endpos* limits how far the string will be searched; "
"it will be as if the string is *endpos* characters long, so only the "
"characters from *pos* to ``endpos - 1`` will be searched for a match.  If "
"*endpos* is less than *pos*, no match will be found; otherwise, if *rx* is a"
" compiled regular expression object, ``rx.search(string, 0, 50)`` is "
"equivalent to ``rx.search(string[:50], 0)``. ::"
msgstr ""
"可选参数 *endpos* 限定了字符串搜索的结束；它假定字符串长度到 *endpos* ， 所以只有从 ``pos`` 到 ``endpos - "
"1`` 的字符会被匹配。如果 *endpos* 小于 *pos*，就不会有匹配产生；另外，如果 *rx* 是一个编译后的正则对象， "
"``rx.search(string, 0, 50)`` 等价于 ``rx.search(string[:50], 0)``。 ::"

#: ../../library/re.rst:1265
msgid ""
">>> pattern = re.compile(\"d\")\n"
">>> pattern.search(\"dog\")     # Match at index 0\n"
"<re.Match object; span=(0, 1), match='d'>\n"
">>> pattern.search(\"dog\", 1)  # No match; search doesn't include the \"d\""
msgstr ""
">>> pattern = re.compile(\"d\")\n"
">>> pattern.search(\"dog\")     # 在索引0处匹配\n"
"<re.Match object; span=(0, 1), match='d'>\n"
">>> pattern.search(\"dog\", 1)  # 没有匹配项；搜索不包括“D”"

#: ../../library/re.rst:1273
msgid ""
"If zero or more characters at the *beginning* of *string* match this regular"
" expression, return a corresponding :class:`~re.Match`. Return ``None`` if "
"the string does not match the pattern; note that this is different from a "
"zero-length match."
msgstr ""
"如果字符串 *开头* 的零个或多个字符与此正则表达式匹配，则返回相应的 :class:`~re.Match`。 如果字符串与模式不匹配则返回 "
"``None``；请注意这与零长度匹配是不同的。"

#: ../../library/re.rst:1278 ../../library/re.rst:1296
msgid ""
"The optional *pos* and *endpos* parameters have the same meaning as for the "
":meth:`~Pattern.search` method. ::"
msgstr "可选参数 *pos* 和 *endpos* 与 :meth:`~Pattern.search` 含义相同。 ::"

#: ../../library/re.rst:1281
msgid ""
">>> pattern = re.compile(\"o\")\n"
">>> pattern.match(\"dog\")      # No match as \"o\" is not at the start of \"dog\".\n"
">>> pattern.match(\"dog\", 1)   # Match as \"o\" is the 2nd character of \"dog\".\n"
"<re.Match object; span=(1, 2), match='o'>"
msgstr ""
">>> pattern = re.compile(\"o\")\n"
">>> pattern.match(\"dog\")      # 不匹配因为 \"o\" 不在 \"dog\" 的开头。\n"
">>> pattern.match(\"dog\", 1)   # 匹配因为 \"o\" 是 \"dog\" 的第 2 个字符。\n"
"<re.Match object; span=(1, 2), match='o'>"

#: ../../library/re.rst:1286
msgid ""
"If you want to locate a match anywhere in *string*, use "
":meth:`~Pattern.search` instead (see also :ref:`search-vs-match`)."
msgstr ""
"如果你想定位匹配在 *string* 中的位置，使用 :meth:`~Pattern.search` 来替代（另参考  :ref:`search-vs-"
"match`）。"

#: ../../library/re.rst:1292
msgid ""
"If the whole *string* matches this regular expression, return a "
"corresponding :class:`~re.Match`.  Return ``None`` if the string does not "
"match the pattern; note that this is different from a zero-length match."
msgstr ""
"如果整个 *string* 与此正则表达式匹配，则返回相应的 :class:`~re.Match`。 如果字符串与模式不匹配则返回 "
"``None``；请注意这与零长度匹配是不同的。"

#: ../../library/re.rst:1299
msgid ""
">>> pattern = re.compile(\"o[gh]\")\n"
">>> pattern.fullmatch(\"dog\")      # No match as \"o\" is not at the start of \"dog\".\n"
">>> pattern.fullmatch(\"ogre\")     # No match as not the full string matches.\n"
">>> pattern.fullmatch(\"doggie\", 1, 3)   # Matches within given limits.\n"
"<re.Match object; span=(1, 3), match='og'>"
msgstr ""
">>> pattern = re.compile(\"o[gh]\")\n"
">>> pattern.fullmatch(\"dog\")      # 不匹配因为 \"o\" 不在 \"dog\" 的开头。\n"
">>> pattern.fullmatch(\"ogre\")     # 不匹配因为不是整个字符串都匹配。\n"
">>> pattern.fullmatch(\"doggie\", 1, 3)   # 在给定的限制下匹配。\n"
"<re.Match object; span=(1, 3), match='og'>"

#: ../../library/re.rst:1310
msgid "Identical to the :func:`split` function, using the compiled pattern."
msgstr "等价于 :func:`split` 函数，使用了编译后的样式。"

#: ../../library/re.rst:1315
msgid ""
"Similar to the :func:`findall` function, using the compiled pattern, but "
"also accepts optional *pos* and *endpos* parameters that limit the search "
"region like for :meth:`search`."
msgstr ""
"类似函数 :func:`findall` ， 使用了编译后样式，但也可以接收可选参数 *pos* 和 *endpos* ，限制搜索范围，就像 "
":meth:`search`。"

#: ../../library/re.rst:1322
msgid ""
"Similar to the :func:`finditer` function, using the compiled pattern, but "
"also accepts optional *pos* and *endpos* parameters that limit the search "
"region like for :meth:`search`."
msgstr ""
"类似函数 :func:`finditer` ， 使用了编译后样式，但也可以接收可选参数 *pos* 和 *endpos* ，限制搜索范围，就像 "
":meth:`search`。"

#: ../../library/re.rst:1329
msgid "Identical to the :func:`sub` function, using the compiled pattern."
msgstr "等价于 :func:`sub` 函数，使用了编译后的样式。"

#: ../../library/re.rst:1334
msgid "Identical to the :func:`subn` function, using the compiled pattern."
msgstr "等价于 :func:`subn` 函数，使用了编译后的样式。"

#: ../../library/re.rst:1339
msgid ""
"The regex matching flags.  This is a combination of the flags given to "
":func:`.compile`, any ``(?...)`` inline flags in the pattern, and implicit "
"flags such as :py:const:`~re.UNICODE` if the pattern is a Unicode string."
msgstr ""
"正则表达式匹配旗标。 这是一个传给 :func:`.compile` 的旗标组合，模式中的任何 ``(?...)`` 内联旗标，以及隐式旗标如当模式为 "
"Unicode 字符串时的 :py:const:`~re.UNICODE`。"

#: ../../library/re.rst:1346
msgid "The number of capturing groups in the pattern."
msgstr "捕获到的模式串中组的数量。"

#: ../../library/re.rst:1351
msgid ""
"A dictionary mapping any symbolic group names defined by ``(?P<id>)`` to "
"group numbers.  The dictionary is empty if no symbolic groups were used in "
"the pattern."
msgstr "映射由 ``(?P<id>)`` 定义的命名符号组合和数字组合的字典。如果没有符号组，那字典就是空的。"

#: ../../library/re.rst:1358
msgid "The pattern string from which the pattern object was compiled."
msgstr "编译对象的原始样式字符串。"

#: ../../library/re.rst:1361
msgid ""
"Added support of :func:`copy.copy` and :func:`copy.deepcopy`.  Compiled "
"regular expression objects are considered atomic."
msgstr ""
"添加 :func:`copy.copy` 和 :func:`copy.deepcopy` 函数的支持。编译后的正则表达式对象被认为是原子性的。"

#: ../../library/re.rst:1369
msgid "Match Objects"
msgstr "匹配对象"

#: ../../library/re.rst:1371
msgid ""
"Match objects always have a boolean value of ``True``. Since "
":meth:`~Pattern.match` and :meth:`~Pattern.search` return ``None`` when "
"there is no match, you can test whether there was a match with a simple "
"``if`` statement::"
msgstr ""
"匹配对象总是有一个布尔值 ``True``。如果没有匹配的话 :meth:`~Pattern.match` 和 "
":meth:`~Pattern.search` 返回 ``None`` 所以你可以简单的用 ``if`` 语句来判断是否匹配 ::"

#: ../../library/re.rst:1376
msgid ""
"match = re.search(pattern, string)\n"
"if match:\n"
"    process(match)"
msgstr ""
"match = re.search(pattern, string)\n"
"if match:\n"
"    process(match)"

#: ../../library/re.rst:1382
msgid "Match object returned by successful ``match``\\ es and ``search``\\ es."
msgstr "由成功的 ``match`` 和 ``search`` 所返回的匹配对象。"

#: ../../library/re.rst:1384
msgid ""
":py:class:`re.Match` supports ``[]`` to indicate a Unicode (str) or bytes "
"match. See :ref:`types-genericalias`."
msgstr ""
":py:class:`re.Match` 支持用 ``[]`` 表示 Unicode (str) 或字节串类型的匹配。 参见 :ref:`types-"
"genericalias`。"

#: ../../library/re.rst:1390
msgid ""
"Return the string obtained by doing backslash substitution on the template "
"string *template*, as done by the :meth:`~Pattern.sub` method. Escapes such "
"as ``\\n`` are converted to the appropriate characters, and numeric "
"backreferences (``\\1``, ``\\2``) and named backreferences (``\\g<1>``, "
"``\\g<name>``) are replaced by the contents of the corresponding group. The "
"backreference ``\\g<0>`` will be replaced by the entire match."
msgstr ""
"返回通过在模板字符串 *template* 上执行反斜杠替换所获得的字符串，就像 :meth:`~Pattern.sub` 方法所做的那样。 转义符例如"
" ``\\n`` 将被转换为适当的字符，而数字反向引用 (``\\1``, ``\\2``) 和命名反向引用 (``\\g<1>``, "
"``\\g<name>``) 将被替换为相应分组的内容。 反向引用 ``\\g<0>`` 将被替换为整个匹配的内容。"

#: ../../library/re.rst:1403
msgid ""
"Returns one or more subgroups of the match.  If there is a single argument, "
"the result is a single string; if there are multiple arguments, the result "
"is a tuple with one item per argument. Without arguments, *group1* defaults "
"to zero (the whole match is returned). If a *groupN* argument is zero, the "
"corresponding return value is the entire matching string; if it is in the "
"inclusive range [1..99], it is the string matching the corresponding "
"parenthesized group.  If a group number is negative or larger than the "
"number of groups defined in the pattern, an :exc:`IndexError` exception is "
"raised. If a group is contained in a part of the pattern that did not match,"
" the corresponding result is ``None``. If a group is contained in a part of "
"the pattern that matched multiple times, the last match is returned. ::"
msgstr ""
"返回一个或者多个匹配的子组。如果只有一个参数，结果就是一个字符串，如果有多个参数，结果就是一个元组（每个参数对应一个项），如果没有参数，组1默认到0（整个匹配都被返回）。"
" 如果一个组N 参数值为 0，相应的返回值就是整个匹配字符串；如果它是一个范围 "
"[1..99]，结果就是相应的括号组字符串。如果一个组号是负数，或者大于样式中定义的组数，就引发一个 :exc:`IndexError` "
"异常。如果一个组包含在样式的一部分，并被匹配多次，就返回最后一个匹配。::"

#: ../../library/re.rst:1415
msgid ""
">>> m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\n"
">>> m.group(0)       # The entire match\n"
"'Isaac Newton'\n"
">>> m.group(1)       # The first parenthesized subgroup.\n"
"'Isaac'\n"
">>> m.group(2)       # The second parenthesized subgroup.\n"
"'Newton'\n"
">>> m.group(1, 2)    # Multiple arguments give us a tuple.\n"
"('Isaac', 'Newton')"
msgstr ""
">>> m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\n"
">>> m.group(0)       # 整个匹配\n"
"'Isaac Newton'\n"
">>> m.group(1)       # 第一个圆括号标记的子分组。\n"
"'Isaac'\n"
">>> m.group(2)       # 第二个圆括号标记的子分组。\n"
"'Newton'\n"
">>> m.group(1, 2)    # 使用多个参数则返回一个元组。\n"
"('Isaac', 'Newton')"

#: ../../library/re.rst:1425
msgid ""
"If the regular expression uses the ``(?P<name>...)`` syntax, the *groupN* "
"arguments may also be strings identifying groups by their group name.  If a "
"string argument is not used as a group name in the pattern, an "
":exc:`IndexError` exception is raised."
msgstr ""
"如果正则表达式使用了 ``(?P<name>...)`` 语法， *groupN* "
"参数就也可能是命名组合的名字。如果一个字符串参数在样式中未定义为组合名，就引发一个 :exc:`IndexError` 异常。"

#: ../../library/re.rst:1430
msgid "A moderately complicated example::"
msgstr "一个相对复杂的例子 ::"

#: ../../library/re.rst:1432
msgid ""
">>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\")\n"
">>> m.group('first_name')\n"
"'Malcolm'\n"
">>> m.group('last_name')\n"
"'Reynolds'"
msgstr ""
">>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\")\n"
">>> m.group('first_name')\n"
"'Malcolm'\n"
">>> m.group('last_name')\n"
"'Reynolds'"

#: ../../library/re.rst:1438
msgid "Named groups can also be referred to by their index::"
msgstr "命名组合同样可以通过索引值引用 ::"

#: ../../library/re.rst:1440
msgid ""
">>> m.group(1)\n"
"'Malcolm'\n"
">>> m.group(2)\n"
"'Reynolds'"
msgstr ""
">>> m.group(1)\n"
"'Malcolm'\n"
">>> m.group(2)\n"
"'Reynolds'"

#: ../../library/re.rst:1445
msgid "If a group matches multiple times, only the last match is accessible::"
msgstr "如果一个组匹配成功多次，就只返回最后一个匹配 ::"

#: ../../library/re.rst:1447
msgid ""
">>> m = re.match(r\"(..)+\", \"a1b2c3\")  # Matches 3 times.\n"
">>> m.group(1)                        # Returns only the last match.\n"
"'c3'"
msgstr ""
">>> m = re.match(r\"(..)+\", \"a1b2c3\")  # 匹配 3 次。\n"
">>> m.group(1)                        # 只返回最后一个匹配。\n"
"'c3'"

#: ../../library/re.rst:1454
msgid ""
"This is identical to ``m.group(g)``.  This allows easier access to an "
"individual group from a match::"
msgstr "这个等价于 ``m.group(g)``。这允许更方便的引用一个匹配 ::"

#: ../../library/re.rst:1457
msgid ""
">>> m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\n"
">>> m[0]       # The entire match\n"
"'Isaac Newton'\n"
">>> m[1]       # The first parenthesized subgroup.\n"
"'Isaac'\n"
">>> m[2]       # The second parenthesized subgroup.\n"
"'Newton'"
msgstr ""
">>> m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\n"
">>> m[0]       # 整个匹配\n"
"'Isaac Newton'\n"
">>> m[1]       # 第一个圆括号标记的子分组。\n"
"'Isaac'\n"
">>> m[2]       # 第二个圆括号标记的子分组。\n"
"'Newton'"

#: ../../library/re.rst:1465
msgid "Named groups are supported as well::"
msgstr "命名分组也是受支持的::"

#: ../../library/re.rst:1467
msgid ""
">>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Isaac Newton\")\n"
">>> m['first_name']\n"
"'Isaac'\n"
">>> m['last_name']\n"
"'Newton'"
msgstr ""
">>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Isaac Newton\")\n"
">>> m['first_name']\n"
"'Isaac'\n"
">>> m['last_name']\n"
"'Newton'"

#: ../../library/re.rst:1478
msgid ""
"Return a tuple containing all the subgroups of the match, from 1 up to "
"however many groups are in the pattern.  The *default* argument is used for "
"groups that did not participate in the match; it defaults to ``None``."
msgstr ""
"返回一个元组，包含所有匹配的子组，在样式中出现的从1到任意多的组合。 *default* 参数用于不参与匹配的情况，默认为 ``None``。"

#: ../../library/re.rst:1482 ../../library/re.rst:1707
msgid "For example::"
msgstr "例如："

#: ../../library/re.rst:1484
msgid ""
">>> m = re.match(r\"(\\d+)\\.(\\d+)\", \"24.1632\")\n"
">>> m.groups()\n"
"('24', '1632')"
msgstr ""
">>> m = re.match(r\"(\\d+)\\.(\\d+)\", \"24.1632\")\n"
">>> m.groups()\n"
"('24', '1632')"

#: ../../library/re.rst:1488
msgid ""
"If we make the decimal place and everything after it optional, not all "
"groups might participate in the match.  These groups will default to "
"``None`` unless the *default* argument is given::"
msgstr ""
"如果我们使小数点可选，那么不是所有的组都会参与到匹配当中。这些组合默认会返回一个 ``None`` ，除非指定了 *default* 参数。 ::"

#: ../../library/re.rst:1492
msgid ""
">>> m = re.match(r\"(\\d+)\\.?(\\d+)?\", \"24\")\n"
">>> m.groups()      # Second group defaults to None.\n"
"('24', None)\n"
">>> m.groups('0')   # Now, the second group defaults to '0'.\n"
"('24', '0')"
msgstr ""
">>> m = re.match(r\"(\\d+)\\.?(\\d+)?\", \"24\")\n"
">>> m.groups()      # 第二个分组默认为 None。\n"
"('24', None)\n"
">>> m.groups('0')   # 现在，第二个分组默认为 '0'。\n"
"('24', '0')"

#: ../../library/re.rst:1501
msgid ""
"Return a dictionary containing all the *named* subgroups of the match, keyed"
" by the subgroup name.  The *default* argument is used for groups that did "
"not participate in the match; it defaults to ``None``.  For example::"
msgstr ""
"返回一个字典，包含了所有的 *命名* 子组。key就是组名。 *default* 参数用于不参与匹配的组合；默认为 ``None``。 例如 ::"

#: ../../library/re.rst:1505
msgid ""
">>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\")\n"
">>> m.groupdict()\n"
"{'first_name': 'Malcolm', 'last_name': 'Reynolds'}"
msgstr ""
">>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\")\n"
">>> m.groupdict()\n"
"{'first_name': 'Malcolm', 'last_name': 'Reynolds'}"

#: ../../library/re.rst:1513
msgid ""
"Return the indices of the start and end of the substring matched by *group*;"
" *group* defaults to zero (meaning the whole matched substring). Return "
"``-1`` if *group* exists but did not contribute to the match.  For a match "
"object *m*, and a group *g* that did contribute to the match, the substring "
"matched by group *g* (equivalent to ``m.group(g)``) is ::"
msgstr ""
"返回 *group* 匹配到的字串的开始和结束标号。*group* 默认为0（意思是整个匹配的子串）。如果  *group* 存在，但未产生匹配，就返回"
" ``-1`` 。对于一个匹配对象 *m*， 和一个未参与匹配的组 *g* ，组 *g* (等价于 ``m.group(g)``)产生的匹配是 ::"

#: ../../library/re.rst:1519
msgid "m.string[m.start(g):m.end(g)]"
msgstr "m.string[m.start(g):m.end(g)]"

#: ../../library/re.rst:1521
msgid ""
"Note that ``m.start(group)`` will equal ``m.end(group)`` if *group* matched "
"a null string.  For example, after ``m = re.search('b(c?)', 'cba')``, "
"``m.start(0)`` is 1, ``m.end(0)`` is 2, ``m.start(1)`` and ``m.end(1)`` are "
"both 2, and ``m.start(2)`` raises an :exc:`IndexError` exception."
msgstr ""
"注意 ``m.start(group)`` 将会等于 ``m.end(group)`` ，如果 *group* 匹配一个空字符串的话。比如，在 ``m "
"= re.search('b(c?)', 'cba')`` 之后，``m.start(0)`` 为 1, ``m.end(0)`` 为 2, "
"``m.start(1)`` 和 ``m.end(1)`` 都是 2, ``m.start(2)`` 引发一个 :exc:`IndexError` "
"异常。"

#: ../../library/re.rst:1526
msgid "An example that will remove *remove_this* from email addresses::"
msgstr "这个例子会从email地址中移除掉 *remove_this* ::"

#: ../../library/re.rst:1528
msgid ""
">>> email = \"tony@tiremove_thisger.net\"\n"
">>> m = re.search(\"remove_this\", email)\n"
">>> email[:m.start()] + email[m.end():]\n"
"'tony@tiger.net'"
msgstr ""
">>> email = \"tony@tiremove_thisger.net\"\n"
">>> m = re.search(\"remove_this\", email)\n"
">>> email[:m.start()] + email[m.end():]\n"
"'tony@tiger.net'"

#: ../../library/re.rst:1536
msgid ""
"For a match *m*, return the 2-tuple ``(m.start(group), m.end(group))``. Note"
" that if *group* did not contribute to the match, this is ``(-1, -1)``. "
"*group* defaults to zero, the entire match."
msgstr ""
"对于一个匹配 *m* ， 返回一个二元组 ``(m.start(group), m.end(group))`` 。 注意如果 *group* "
"没有在这个匹配中，就返回 ``(-1, -1)`` 。*group* 默认为0，就是整个匹配。"

#: ../../library/re.rst:1543
msgid ""
"The value of *pos* which was passed to the :meth:`~Pattern.search` or "
":meth:`~Pattern.match` method of a :ref:`regex object <re-objects>`.  This "
"is the index into the string at which the RE engine started looking for a "
"match."
msgstr ""
"*pos* 的值，会传递给 :meth:`~Pattern.search` 或 :meth:`~Pattern.match` 的方法 a "
":ref:`正则对象 <re-objects>` 。这个是正则引擎开始在字符串搜索一个匹配的索引位置。"

#: ../../library/re.rst:1550
msgid ""
"The value of *endpos* which was passed to the :meth:`~Pattern.search` or "
":meth:`~Pattern.match` method of a :ref:`regex object <re-objects>`.  This "
"is the index into the string beyond which the RE engine will not go."
msgstr ""
"*endpos* 的值，会传递给 :meth:`~Pattern.search` 或 :meth:`~Pattern.match` 的方法 a "
":ref:`正则对象 <re-objects>` 。这个是正则引擎停止在字符串搜索一个匹配的索引位置。"

#: ../../library/re.rst:1557
msgid ""
"The integer index of the last matched capturing group, or ``None`` if no "
"group was matched at all. For example, the expressions ``(a)b``, "
"``((a)(b))``, and ``((ab))`` will have ``lastindex == 1`` if applied to the "
"string ``'ab'``, while the expression ``(a)(b)`` will have ``lastindex == "
"2``, if applied to the same string."
msgstr ""
"捕获组的最后一个匹配的整数索引值，或者 ``None`` 如果没有匹配产生的话。比如，对于字符串 ``'ab'``，表达式 ``(a)b``, "
"``((a)(b))``, 和 ``((ab))`` 将得到 ``lastindex == 1`` ， 而 ``(a)(b)`` 会得到 "
"``lastindex == 2`` 。"

#: ../../library/re.rst:1566
msgid ""
"The name of the last matched capturing group, or ``None`` if the group "
"didn't have a name, or if no group was matched at all."
msgstr "最后一个匹配的命名组名字，或者 ``None`` 如果没有产生匹配的话。"

#: ../../library/re.rst:1572
msgid ""
"The :ref:`regular expression object <re-objects>` whose "
":meth:`~Pattern.match` or :meth:`~Pattern.search` method produced this match"
" instance."
msgstr ""
"返回产生这个实例的 :ref:`正则对象 <re-objects>` ， 这个实例是由 正则对象的 :meth:`~Pattern.match` 或 "
":meth:`~Pattern.search` 方法产生的。"

#: ../../library/re.rst:1578
msgid ""
"The string passed to :meth:`~Pattern.match` or :meth:`~Pattern.search`."
msgstr "传递到 :meth:`~Pattern.match` 或 :meth:`~Pattern.search` 的字符串。"

#: ../../library/re.rst:1581
msgid ""
"Added support of :func:`copy.copy` and :func:`copy.deepcopy`.  Match objects"
" are considered atomic."
msgstr "添加了对 :func:`copy.copy` 和 :func:`copy.deepcopy` 的支持。匹配对象被看作是原子性的。"

#: ../../library/re.rst:1589
msgid "Regular Expression Examples"
msgstr "正则表达式例子"

#: ../../library/re.rst:1593
msgid "Checking for a Pair"
msgstr "检查对子"

#: ../../library/re.rst:1595
msgid ""
"In this example, we'll use the following helper function to display match "
"objects a little more gracefully::"
msgstr "在这个例子里，我们使用以下辅助函数来更好地显示匹配对象::"

#: ../../library/re.rst:1598
msgid ""
"def displaymatch(match):\n"
"    if match is None:\n"
"        return None\n"
"    return '<Match: %r, groups=%r>' % (match.group(), match.groups())"
msgstr ""
"def displaymatch(match):\n"
"    if match is None:\n"
"        return None\n"
"    return '<Match: %r, groups=%r>' % (match.group(), match.groups())"

#: ../../library/re.rst:1603
msgid ""
"Suppose you are writing a poker program where a player's hand is represented"
" as a 5-character string with each character representing a card, \"a\" for "
"ace, \"k\" for king, \"q\" for queen, \"j\" for jack, \"t\" for 10, and "
"\"2\" through \"9\" representing the card with that value."
msgstr ""
"假设你在写一个扑克程序，一个玩家的一手牌为五个字符的串，每个字符表示一张牌，\"a\" 就是 A, \"k\"  K， \"q\"  Q, \"j\" "
"J, \"t\" 为 10, \"2\" 到 \"9\" 表示2 到 9。"

#: ../../library/re.rst:1608
msgid "To see if a given string is a valid hand, one could do the following::"
msgstr "要看给定的字符串是否有效，我们可以按照以下步骤 ::"

#: ../../library/re.rst:1610
msgid ""
">>> valid = re.compile(r\"^[a2-9tjqk]{5}$\")\n"
">>> displaymatch(valid.match(\"akt5q\"))  # Valid.\n"
"\"<Match: 'akt5q', groups=()>\"\n"
">>> displaymatch(valid.match(\"akt5e\"))  # Invalid.\n"
">>> displaymatch(valid.match(\"akt\"))    # Invalid.\n"
">>> displaymatch(valid.match(\"727ak\"))  # Valid.\n"
"\"<Match: '727ak', groups=()>\""
msgstr ""
">>> valid = re.compile(r\"^[a2-9tjqk]{5}$\")\n"
">>> displaymatch(valid.match(\"akt5q\"))  # 有效。\n"
"\"<Match: 'akt5q', groups=()>\"\n"
">>> displaymatch(valid.match(\"akt5e\"))  # 无效。\n"
">>> displaymatch(valid.match(\"akt\"))    # 无效。\n"
">>> displaymatch(valid.match(\"727ak\"))  # 有效。\n"
"\"<Match: '727ak', groups=()>\""

#: ../../library/re.rst:1618
msgid ""
"That last hand, ``\"727ak\"``, contained a pair, or two of the same valued "
"cards. To match this with a regular expression, one could use backreferences"
" as such::"
msgstr "最后一手牌，``\"727ak\"`` ，包含了一个对子，或者两张同样数值的牌。要用正则表达式匹配它，应该使用向后引用如下 ::"

#: ../../library/re.rst:1621
msgid ""
">>> pair = re.compile(r\".*(.).*\\1\")\n"
">>> displaymatch(pair.match(\"717ak\"))     # Pair of 7s.\n"
"\"<Match: '717', groups=('7',)>\"\n"
">>> displaymatch(pair.match(\"718ak\"))     # No pairs.\n"
">>> displaymatch(pair.match(\"354aa\"))     # Pair of aces.\n"
"\"<Match: '354aa', groups=('a',)>\""
msgstr ""
">>> pair = re.compile(r\".*(.).*\\1\")\n"
">>> displaymatch(pair.match(\"717ak\"))     # 成对的 7。\n"
"\"<Match: '717', groups=('7',)>\"\n"
">>> displaymatch(pair.match(\"718ak\"))     # 没有成对。\n"
">>> displaymatch(pair.match(\"354aa\"))     # 成对的 a。\n"
"\"<Match: '354aa', groups=('a',)>\""

#: ../../library/re.rst:1628
msgid ""
"To find out what card the pair consists of, one could use the "
":meth:`~Match.group` method of the match object in the following manner::"
msgstr "要找出对子由什么牌组成，开发者可以按照下面的方式来使用匹配对象的 :meth:`~Match.group` 方法::"

#: ../../library/re.rst:1631
msgid ""
">>> pair = re.compile(r\".*(.).*\\1\")\n"
">>> pair.match(\"717ak\").group(1)\n"
"'7'\n"
"\n"
"# Error because re.match() returns None, which doesn't have a group() method:\n"
">>> pair.match(\"718ak\").group(1)\n"
"Traceback (most recent call last):\n"
"  File \"<pyshell#23>\", line 1, in <module>\n"
"    re.match(r\".*(.).*\\1\", \"718ak\").group(1)\n"
"AttributeError: 'NoneType' object has no attribute 'group'\n"
"\n"
">>> pair.match(\"354aa\").group(1)\n"
"'a'"
msgstr ""
">>> pair = re.compile(r\".*(.).*\\1\")\n"
">>> pair.match(\"717ak\").group(1)\n"
"'7'\n"
"\n"
"# 会报错因为 re.match() 返回 None，它没有 group() 方法。\n"
">>> pair.match(\"718ak\").group(1)\n"
"Traceback (most recent call last):\n"
"  File \"<pyshell#23>\", line 1, in <module>\n"
"    re.match(r\".*(.).*\\1\", \"718ak\").group(1)\n"
"AttributeError: 'NoneType' object has no attribute 'group'\n"
"\n"
">>> pair.match(\"354aa\").group(1)\n"
"'a'"

#: ../../library/re.rst:1647
msgid "Simulating scanf()"
msgstr "模拟 scanf()"

#: ../../library/re.rst:1651
msgid ""
"Python does not currently have an equivalent to :c:func:`!scanf`.  Regular "
"expressions are generally more powerful, though also more verbose, than "
":c:func:`!scanf` format strings.  The table below offers some more-or-less "
"equivalent mappings between :c:func:`!scanf` format tokens and regular "
"expressions."
msgstr ""
"目前 Python 没有 :c:func:`!scanf` 的等价物。 正则表达式通常比 :c:func:`!scanf` "
"格式字符串更强大，但也更冗长。 下表提供了 :c:func:`!scanf` 格式符和正则表达式之间一些大致等价的映射。"

#: ../../library/re.rst:1658
msgid ":c:func:`!scanf` Token"
msgstr ":c:func:`!scanf` 形符"

#: ../../library/re.rst:1658
msgid "Regular Expression"
msgstr "正则表达式"

#: ../../library/re.rst:1660
msgid "``%c``"
msgstr "``%c``"

#: ../../library/re.rst:1662
msgid "``%5c``"
msgstr "``%5c``"

#: ../../library/re.rst:1662
msgid "``.{5}``"
msgstr "``.{5}``"

#: ../../library/re.rst:1664
msgid "``%d``"
msgstr "``%d``"

#: ../../library/re.rst:1664
msgid "``[-+]?\\d+``"
msgstr "``[-+]?\\d+``"

#: ../../library/re.rst:1666
msgid "``%e``, ``%E``, ``%f``, ``%g``"
msgstr "``%e``, ``%E``, ``%f``, ``%g``"

#: ../../library/re.rst:1666
msgid "``[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?``"
msgstr "``[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?``"

#: ../../library/re.rst:1668
msgid "``%i``"
msgstr "``%i``"

#: ../../library/re.rst:1668
msgid "``[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)``"
msgstr "``[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)``"

#: ../../library/re.rst:1670
msgid "``%o``"
msgstr "``%o``"

#: ../../library/re.rst:1670
msgid "``[-+]?[0-7]+``"
msgstr "``[-+]?[0-7]+``"

#: ../../library/re.rst:1672
msgid "``%s``"
msgstr "``%s``"

#: ../../library/re.rst:1672
msgid "``\\S+``"
msgstr "``\\S+``"

#: ../../library/re.rst:1674
msgid "``%u``"
msgstr "``%u``"

#: ../../library/re.rst:1674
msgid "``\\d+``"
msgstr "``\\d+``"

#: ../../library/re.rst:1676
msgid "``%x``, ``%X``"
msgstr "``%x``, ``%X``"

#: ../../library/re.rst:1676
msgid "``[-+]?(0[xX])?[\\dA-Fa-f]+``"
msgstr "``[-+]?(0[xX])?[\\dA-Fa-f]+``"

#: ../../library/re.rst:1679
msgid "To extract the filename and numbers from a string like ::"
msgstr "从文件名和数字提取字符串 ::"

#: ../../library/re.rst:1681
msgid "/usr/sbin/sendmail - 0 errors, 4 warnings"
msgstr "/usr/sbin/sendmail - 0 errors, 4 warnings"

#: ../../library/re.rst:1683
msgid "you would use a :c:func:`!scanf` format like ::"
msgstr "你应当这样使用 :c:func:`!scanf` 格式 ::"

#: ../../library/re.rst:1685
msgid "%s - %d errors, %d warnings"
msgstr "%s - %d errors, %d warnings"

#: ../../library/re.rst:1687
msgid "The equivalent regular expression would be ::"
msgstr "等价的正则表达式是："

#: ../../library/re.rst:1689
msgid "(\\S+) - (\\d+) errors, (\\d+) warnings"
msgstr "(\\S+) - (\\d+) errors, (\\d+) warnings"

#: ../../library/re.rst:1695
msgid "search() vs. match()"
msgstr "search() vs. match()"

#: ../../library/re.rst:1699
msgid ""
"Python offers different primitive operations based on regular expressions:"
msgstr "Python 基于正则表达式提供了不同的原始操作:"

#: ../../library/re.rst:1701
msgid ""
":func:`re.match` checks for a match only at the beginning of the string"
msgstr ":func:`re.match` 只在字符串的开头位置检测匹配。"

#: ../../library/re.rst:1702
msgid ""
":func:`re.search` checks for a match anywhere in the string (this is what "
"Perl does by default)"
msgstr ":func:`re.search` 在字符串中的任何位置检测匹配（这也是 Perl 在默认情况下所做的）"

#: ../../library/re.rst:1704
msgid ":func:`re.fullmatch` checks for entire string to be a match"
msgstr ":func:`re.fullmatch` 检测整个字符串是否匹配"

#: ../../library/re.rst:1709
msgid ""
">>> re.match(\"c\", \"abcdef\")    # No match\n"
">>> re.search(\"c\", \"abcdef\")   # Match\n"
"<re.Match object; span=(2, 3), match='c'>\n"
">>> re.fullmatch(\"p.*n\", \"python\") # Match\n"
"<re.Match object; span=(0, 6), match='python'>\n"
">>> re.fullmatch(\"r.*n\", \"python\") # No match"
msgstr ""
">>> re.match(\"c\", \"abcdef\")    # 不匹配\n"
">>> re.search(\"c\", \"abcdef\")   # 匹配\n"
"<re.Match object; span=(2, 3), match='c'>\n"
">>> re.fullmatch(\"p.*n\", \"python\") # 匹配\n"
"<re.Match object; span=(0, 6), match='python'>\n"
">>> re.fullmatch(\"r.*n\", \"python\") # 不匹配"

#: ../../library/re.rst:1716
msgid ""
"Regular expressions beginning with ``'^'`` can be used with :func:`search` "
"to restrict the match at the beginning of the string::"
msgstr "在 :func:`search` 中，可以用 ``'^'`` 作为开始来限制匹配到字符串的首位 ::"

#: ../../library/re.rst:1719
msgid ""
">>> re.match(\"c\", \"abcdef\")    # No match\n"
">>> re.search(\"^c\", \"abcdef\")  # No match\n"
">>> re.search(\"^a\", \"abcdef\")  # Match\n"
"<re.Match object; span=(0, 1), match='a'>"
msgstr ""
">>> re.match(\"c\", \"abcdef\")    # 不匹配\n"
">>> re.search(\"^c\", \"abcdef\")  # 不匹配\n"
">>> re.search(\"^a\", \"abcdef\")  # 匹配\n"
"<re.Match object; span=(0, 1), match='a'>"

#: ../../library/re.rst:1724
msgid ""
"Note however that in :const:`MULTILINE` mode :func:`match` only matches at "
"the beginning of the string, whereas using :func:`search` with a regular "
"expression beginning with ``'^'`` will match at the beginning of each line. "
"::"
msgstr ""
"注意 :const:`MULTILINE` 多行模式中函数 :func:`match` 只匹配字符串的开始，但使用 :func:`search` 和以 "
"``'^'`` 开始的正则表达式会匹配每行的开始 ::"

#: ../../library/re.rst:1728
msgid ""
">>> re.match(\"X\", \"A\\nB\\nX\", re.MULTILINE)  # No match\n"
">>> re.search(\"^X\", \"A\\nB\\nX\", re.MULTILINE)  # Match\n"
"<re.Match object; span=(4, 5), match='X'>"
msgstr ""
">>> re.match(\"X\", \"A\\nB\\nX\", re.MULTILINE)  # 不匹配\n"
">>> re.search(\"^X\", \"A\\nB\\nX\", re.MULTILINE)  # 匹配\n"
"<re.Match object; span=(4, 5), match='X'>"

#: ../../library/re.rst:1734
msgid "Making a Phonebook"
msgstr "制作一个电话本"

#: ../../library/re.rst:1736
msgid ""
":func:`split` splits a string into a list delimited by the passed pattern.  "
"The method is invaluable for converting textual data into data structures "
"that can be easily read and modified by Python as demonstrated in the "
"following example that creates a phonebook."
msgstr ""
":func:`split` 将字符串用参数传递的样式分隔开。这个方法对于转换文本数据到易读而且容易修改的数据结构，是很有用的，如下面的例子证明。"

#: ../../library/re.rst:1741
msgid ""
"First, here is the input.  Normally it may come from a file, here we are "
"using triple-quoted string syntax"
msgstr "首先，这里是输入。 它通常来自一个文件，这里我们使用三重引号字符串语法"

#: ../../library/re.rst:1744
msgid ""
">>> text = \"\"\"Ross McFluff: 834.345.1254 155 Elm Street\n"
"...\n"
"... Ronald Heathmore: 892.345.3428 436 Finley Avenue\n"
"... Frank Burger: 925.541.7625 662 South Dogwood Way\n"
"...\n"
"...\n"
"... Heather Albrecht: 548.326.4584 919 Park Place\"\"\""
msgstr ""
">>> text = \"\"\"Ross McFluff: 834.345.1254 155 Elm Street\n"
"...\n"
"... Ronald Heathmore: 892.345.3428 436 Finley Avenue\n"
"... Frank Burger: 925.541.7625 662 South Dogwood Way\n"
"...\n"
"...\n"
"... Heather Albrecht: 548.326.4584 919 Park Place\"\"\""

#: ../../library/re.rst:1754
msgid ""
"The entries are separated by one or more newlines. Now we convert the string"
" into a list with each nonempty line having its own entry:"
msgstr "条目用一个或者多个换行符分开。现在我们将字符串转换为一个列表，每个非空行都有一个条目:"

#: ../../library/re.rst:1757
msgid ""
">>> entries = re.split(\"\\n+\", text)\n"
">>> entries\n"
"['Ross McFluff: 834.345.1254 155 Elm Street',\n"
"'Ronald Heathmore: 892.345.3428 436 Finley Avenue',\n"
"'Frank Burger: 925.541.7625 662 South Dogwood Way',\n"
"'Heather Albrecht: 548.326.4584 919 Park Place']"
msgstr ""
">>> entries = re.split(\"\\n+\", text)\n"
">>> entries\n"
"['Ross McFluff: 834.345.1254 155 Elm Street',\n"
"'Ronald Heathmore: 892.345.3428 436 Finley Avenue',\n"
"'Frank Burger: 925.541.7625 662 South Dogwood Way',\n"
"'Heather Albrecht: 548.326.4584 919 Park Place']"

#: ../../library/re.rst:1767
msgid ""
"Finally, split each entry into a list with first name, last name, telephone "
"number, and address.  We use the ``maxsplit`` parameter of :func:`split` "
"because the address has spaces, our splitting pattern, in it:"
msgstr ""
"最终，将每个条目分割为一个由名字、姓氏、电话号码和地址组成的列表。我们为 :func:`split` 使用了 ``maxsplit`` "
"形参，因为地址中包含有被我们作为分割模式的空格符:"

#: ../../library/re.rst:1771
msgid ""
">>> [re.split(\":? \", entry, maxsplit=3) for entry in entries]\n"
"[['Ross', 'McFluff', '834.345.1254', '155 Elm Street'],\n"
"['Ronald', 'Heathmore', '892.345.3428', '436 Finley Avenue'],\n"
"['Frank', 'Burger', '925.541.7625', '662 South Dogwood Way'],\n"
"['Heather', 'Albrecht', '548.326.4584', '919 Park Place']]"
msgstr ""
">>> [re.split(\":? \", entry, maxsplit=3) for entry in entries]\n"
"[['Ross', 'McFluff', '834.345.1254', '155 Elm Street'],\n"
"['Ronald', 'Heathmore', '892.345.3428', '436 Finley Avenue'],\n"
"['Frank', 'Burger', '925.541.7625', '662 South Dogwood Way'],\n"
"['Heather', 'Albrecht', '548.326.4584', '919 Park Place']]"

#: ../../library/re.rst:1780
msgid ""
"The ``:?`` pattern matches the colon after the last name, so that it does "
"not occur in the result list.  With a ``maxsplit`` of ``4``, we could "
"separate the house number from the street name:"
msgstr ""
"``:?`` 样式匹配姓后面的冒号，因此它不出现在结果列表中。如果 ``maxsplit`` 设置为 ``4`` ，我们还可以从地址中获取到房间号:"

#: ../../library/re.rst:1784
msgid ""
">>> [re.split(\":? \", entry, maxsplit=4) for entry in entries]\n"
"[['Ross', 'McFluff', '834.345.1254', '155', 'Elm Street'],\n"
"['Ronald', 'Heathmore', '892.345.3428', '436', 'Finley Avenue'],\n"
"['Frank', 'Burger', '925.541.7625', '662', 'South Dogwood Way'],\n"
"['Heather', 'Albrecht', '548.326.4584', '919', 'Park Place']]"
msgstr ""
">>> [re.split(\":? \", entry, maxsplit=4) for entry in entries]\n"
"[['Ross', 'McFluff', '834.345.1254', '155', 'Elm Street'],\n"
"['Ronald', 'Heathmore', '892.345.3428', '436', 'Finley Avenue'],\n"
"['Frank', 'Burger', '925.541.7625', '662', 'South Dogwood Way'],\n"
"['Heather', 'Albrecht', '548.326.4584', '919', 'Park Place']]"

#: ../../library/re.rst:1795
msgid "Text Munging"
msgstr "文字整理"

#: ../../library/re.rst:1797
msgid ""
":func:`sub` replaces every occurrence of a pattern with a string or the "
"result of a function.  This example demonstrates using :func:`sub` with a "
"function to \"munge\" text, or randomize the order of all the characters in "
"each word of a sentence except for the first and last characters::"
msgstr ""
":func:`sub` 替换字符串中出现的样式的每一个实例。这个例子证明了使用  :func:`sub` "
"来整理文字，或者随机化每个字符的位置，除了首位和末尾字符 ::"

#: ../../library/re.rst:1802
msgid ""
">>> def repl(m):\n"
"...     inner_word = list(m.group(2))\n"
"...     random.shuffle(inner_word)\n"
"...     return m.group(1) + \"\".join(inner_word) + m.group(3)\n"
"...\n"
">>> text = \"Professor Abdolmalek, please report your absences promptly.\"\n"
">>> re.sub(r\"(\\w)(\\w+)(\\w)\", repl, text)\n"
"'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.'\n"
">>> re.sub(r\"(\\w)(\\w+)(\\w)\", repl, text)\n"
"'Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.'"
msgstr ""
">>> def repl(m):\n"
"...     inner_word = list(m.group(2))\n"
"...     random.shuffle(inner_word)\n"
"...     return m.group(1) + \"\".join(inner_word) + m.group(3)\n"
"...\n"
">>> text = \"Professor Abdolmalek, please report your absences promptly.\"\n"
">>> re.sub(r\"(\\w)(\\w+)(\\w)\", repl, text)\n"
"'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.'\n"
">>> re.sub(r\"(\\w)(\\w+)(\\w)\", repl, text)\n"
"'Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.'"

#: ../../library/re.rst:1815
msgid "Finding all Adverbs"
msgstr "查找所有副词"

#: ../../library/re.rst:1817
msgid ""
":func:`findall` matches *all* occurrences of a pattern, not just the first "
"one as :func:`search` does.  For example, if a writer wanted to find all of "
"the adverbs in some text, they might use :func:`findall` in the following "
"manner::"
msgstr ""
":func:`findall` 匹配样式 *所有* 的出现，不仅是像 :func:`search` "
"中的第一个匹配。比如，如果一个作者希望找到文字中的所有副词，他可能会按照以下方法用 :func:`findall` ::"

#: ../../library/re.rst:1822
msgid ""
">>> text = \"He was carefully disguised but captured quickly by police.\"\n"
">>> re.findall(r\"\\w+ly\\b\", text)\n"
"['carefully', 'quickly']"
msgstr ""
">>> text = \"He was carefully disguised but captured quickly by police.\"\n"
">>> re.findall(r\"\\w+ly\\b\", text)\n"
"['carefully', 'quickly']"

#: ../../library/re.rst:1828
msgid "Finding all Adverbs and their Positions"
msgstr "查找所有的副词及其位置"

#: ../../library/re.rst:1830
msgid ""
"If one wants more information about all matches of a pattern than the "
"matched text, :func:`finditer` is useful as it provides :class:`~re.Match` "
"objects instead of strings.  Continuing with the previous example, if a "
"writer wanted to find all of the adverbs *and their positions* in some text,"
" they would use :func:`finditer` in the following manner::"
msgstr ""
"如果想要获得比匹配文本更多的关于模式的所有匹配信息，则 :func:`finditer` 会很有用处因为它提供了 :class:`~re.Match` "
"对象而不是字符串。 继续前面的例子，如果某位作者想要查找某段文本中的所有副词 *以及它们的位置*，可以按以下方式使用 "
":func:`finditer`::"

#: ../../library/re.rst:1836
msgid ""
">>> text = \"He was carefully disguised but captured quickly by police.\"\n"
">>> for m in re.finditer(r\"\\w+ly\\b\", text):\n"
"...     print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n"
"07-16: carefully\n"
"40-47: quickly"
msgstr ""
">>> text = \"He was carefully disguised but captured quickly by police.\"\n"
">>> for m in re.finditer(r\"\\w+ly\\b\", text):\n"
"...     print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n"
"07-16: carefully\n"
"40-47: quickly"

#: ../../library/re.rst:1844
msgid "Raw String Notation"
msgstr "原始字符串标记"

#: ../../library/re.rst:1846
msgid ""
"Raw string notation (``r\"text\"``) keeps regular expressions sane.  Without"
" it, every backslash (``'\\'``) in a regular expression would have to be "
"prefixed with another one to escape it.  For example, the two following "
"lines of code are functionally identical::"
msgstr ""
"原始字符串记法 (``r\"text\"``) 保持正则表达式正常。否则，每个正则式里的反斜杠(``'\\'``) "
"都必须前缀一个反斜杠来转义。比如，下面两行代码功能就是完全一致的 ::"

#: ../../library/re.rst:1851
msgid ""
">>> re.match(r\"\\W(.)\\1\\W\", \" ff \")\n"
"<re.Match object; span=(0, 4), match=' ff '>\n"
">>> re.match(\"\\\\W(.)\\\\1\\\\W\", \" ff \")\n"
"<re.Match object; span=(0, 4), match=' ff '>"
msgstr ""
">>> re.match(r\"\\W(.)\\1\\W\", \" ff \")\n"
"<re.Match object; span=(0, 4), match=' ff '>\n"
">>> re.match(\"\\\\W(.)\\\\1\\\\W\", \" ff \")\n"
"<re.Match object; span=(0, 4), match=' ff '>"

#: ../../library/re.rst:1856
msgid ""
"When one wants to match a literal backslash, it must be escaped in the "
"regular expression.  With raw string notation, this means ``r\"\\\\\"``.  "
"Without raw string notation, one must use ``\"\\\\\\\\\"``, making the "
"following lines of code functionally identical::"
msgstr "当需要匹配一个字符反斜杠，它必须在正则表达式中转义。在原始字符串记法，就是 ``r\"\\\\\"``。否则就必须用 ``\"\\\\\\\\\"``，来表示同样的意思 ::"

#: ../../library/re.rst:1861
msgid ""
">>> re.match(r\"\\\\\", r\"\\\\\")\n"
"<re.Match object; span=(0, 1), match='\\\\'>\n"
">>> re.match(\"\\\\\\\\\", r\"\\\\\")\n"
"<re.Match object; span=(0, 1), match='\\\\'>"
msgstr ""
">>> re.match(r\"\\\\\", r\"\\\\\")\n"
"<re.Match object; span=(0, 1), match='\\\\'>\n"
">>> re.match(\"\\\\\\\\\", r\"\\\\\")\n"
"<re.Match object; span=(0, 1), match='\\\\'>"

#: ../../library/re.rst:1868
msgid "Writing a Tokenizer"
msgstr "写一个词法分析器"

#: ../../library/re.rst:1870
msgid ""
"A `tokenizer or scanner <https://en.wikipedia.org/wiki/Lexical_analysis>`_ "
"analyzes a string to categorize groups of characters.  This is a useful "
"first step in writing a compiler or interpreter."
msgstr ""
"一个 `词法器或词法分析器 <https://en.wikipedia.org/wiki/Lexical_analysis>`_ "
"分析字符串，并分类成目录组。 这是写一个编译器或解释器的第一步。"

#: ../../library/re.rst:1874
msgid ""
"The text categories are specified with regular expressions.  The technique "
"is to combine those into a single master regular expression and to loop over"
" successive matches::"
msgstr "文字目录是由正则表达式指定的。这个技术是通过将这些样式合并为一个主正则式，并且循环匹配来实现的 ::"

#: ../../library/re.rst:1878
msgid ""
"from typing import NamedTuple\n"
"import re\n"
"\n"
"class Token(NamedTuple):\n"
"    type: str\n"
"    value: str\n"
"    line: int\n"
"    column: int\n"
"\n"
"def tokenize(code):\n"
"    keywords = {'IF', 'THEN', 'ENDIF', 'FOR', 'NEXT', 'GOSUB', 'RETURN'}\n"
"    token_specification = [\n"
"        ('NUMBER',   r'\\d+(\\.\\d*)?'),  # Integer or decimal number\n"
"        ('ASSIGN',   r':='),           # Assignment operator\n"
"        ('END',      r';'),            # Statement terminator\n"
"        ('ID',       r'[A-Za-z]+'),    # Identifiers\n"
"        ('OP',       r'[+\\-*/]'),      # Arithmetic operators\n"
"        ('NEWLINE',  r'\\n'),           # Line endings\n"
"        ('SKIP',     r'[ \\t]+'),       # Skip over spaces and tabs\n"
"        ('MISMATCH', r'.'),            # Any other character\n"
"    ]\n"
"    tok_regex = '|'.join('(?P<%s>%s)' % pair for pair in token_specification)\n"
"    line_num = 1\n"
"    line_start = 0\n"
"    for mo in re.finditer(tok_regex, code):\n"
"        kind = mo.lastgroup\n"
"        value = mo.group()\n"
"        column = mo.start() - line_start\n"
"        if kind == 'NUMBER':\n"
"            value = float(value) if '.' in value else int(value)\n"
"        elif kind == 'ID' and value in keywords:\n"
"            kind = value\n"
"        elif kind == 'NEWLINE':\n"
"            line_start = mo.end()\n"
"            line_num += 1\n"
"            continue\n"
"        elif kind == 'SKIP':\n"
"            continue\n"
"        elif kind == 'MISMATCH':\n"
"            raise RuntimeError(f'{value!r} unexpected on line {line_num}')\n"
"        yield Token(kind, value, line_num, column)\n"
"\n"
"statements = '''\n"
"    IF quantity THEN\n"
"        total := total + price * quantity;\n"
"        tax := price * 0.05;\n"
"    ENDIF;\n"
"'''\n"
"\n"
"for token in tokenize(statements):\n"
"    print(token)"
msgstr ""
"from typing import NamedTuple\n"
"import re\n"
"\n"
"class Token(NamedTuple):\n"
"    type: str\n"
"    value: str\n"
"    line: int\n"
"    column: int\n"
"\n"
"def tokenize(code):\n"
"    keywords = {'IF', 'THEN', 'ENDIF', 'FOR', 'NEXT', 'GOSUB', 'RETURN'}\n"
"    token_specification = [\n"
"        ('NUMBER',   r'\\d+(\\.\\d*)?'),  # 整数或小数\n"
"        ('ASSIGN',   r':='),           # 赋值运算符\n"
"        ('END',      r';'),            # 语句结束符\n"
"        ('ID',       r'[A-Za-z]+'),    # 标识符\n"
"        ('OP',       r'[+\\-*/]'),      # 算术运算符\n"
"        ('NEWLINE',  r'\\n'),           # 行结束符\n"
"        ('SKIP',     r'[ \\t]+'),       # 跳过空格和制表符\n"
"        ('MISMATCH', r'.'),            # 任何其他字符\n"
"    ]\n"
"    tok_regex = '|'.join('(?P<%s>%s)' % pair for pair in token_specification)\n"
"    line_num = 1\n"
"    line_start = 0\n"
"    for mo in re.finditer(tok_regex, code):\n"
"        kind = mo.lastgroup\n"
"        value = mo.group()\n"
"        column = mo.start() - line_start\n"
"        if kind == 'NUMBER':\n"
"            value = float(value) if '.' in value else int(value)\n"
"        elif kind == 'ID' and value in keywords:\n"
"            kind = value\n"
"        elif kind == 'NEWLINE':\n"
"            line_start = mo.end()\n"
"            line_num += 1\n"
"            continue\n"
"        elif kind == 'SKIP':\n"
"            continue\n"
"        elif kind == 'MISMATCH':\n"
"            raise RuntimeError(f'{value!r} unexpected on line {line_num}')\n"
"        yield Token(kind, value, line_num, column)\n"
"\n"
"statements = '''\n"
"    IF quantity THEN\n"
"        total := total + price * quantity;\n"
"        tax := price * 0.05;\n"
"    ENDIF;\n"
"'''\n"
"\n"
"for token in tokenize(statements):\n"
"    print(token)"

#: ../../library/re.rst:1930
msgid "The tokenizer produces the following output::"
msgstr "该词法器产生以下的输出 ::"

#: ../../library/re.rst:1932
msgid ""
"Token(type='IF', value='IF', line=2, column=4)\n"
"Token(type='ID', value='quantity', line=2, column=7)\n"
"Token(type='THEN', value='THEN', line=2, column=16)\n"
"Token(type='ID', value='total', line=3, column=8)\n"
"Token(type='ASSIGN', value=':=', line=3, column=14)\n"
"Token(type='ID', value='total', line=3, column=17)\n"
"Token(type='OP', value='+', line=3, column=23)\n"
"Token(type='ID', value='price', line=3, column=25)\n"
"Token(type='OP', value='*', line=3, column=31)\n"
"Token(type='ID', value='quantity', line=3, column=33)\n"
"Token(type='END', value=';', line=3, column=41)\n"
"Token(type='ID', value='tax', line=4, column=8)\n"
"Token(type='ASSIGN', value=':=', line=4, column=12)\n"
"Token(type='ID', value='price', line=4, column=15)\n"
"Token(type='OP', value='*', line=4, column=21)\n"
"Token(type='NUMBER', value=0.05, line=4, column=23)\n"
"Token(type='END', value=';', line=4, column=27)\n"
"Token(type='ENDIF', value='ENDIF', line=5, column=4)\n"
"Token(type='END', value=';', line=5, column=9)"
msgstr ""
"Token(type='IF', value='IF', line=2, column=4)\n"
"Token(type='ID', value='quantity', line=2, column=7)\n"
"Token(type='THEN', value='THEN', line=2, column=16)\n"
"Token(type='ID', value='total', line=3, column=8)\n"
"Token(type='ASSIGN', value=':=', line=3, column=14)\n"
"Token(type='ID', value='total', line=3, column=17)\n"
"Token(type='OP', value='+', line=3, column=23)\n"
"Token(type='ID', value='price', line=3, column=25)\n"
"Token(type='OP', value='*', line=3, column=31)\n"
"Token(type='ID', value='quantity', line=3, column=33)\n"
"Token(type='END', value=';', line=3, column=41)\n"
"Token(type='ID', value='tax', line=4, column=8)\n"
"Token(type='ASSIGN', value=':=', line=4, column=12)\n"
"Token(type='ID', value='price', line=4, column=15)\n"
"Token(type='OP', value='*', line=4, column=21)\n"
"Token(type='NUMBER', value=0.05, line=4, column=23)\n"
"Token(type='END', value=';', line=4, column=27)\n"
"Token(type='ENDIF', value='ENDIF', line=5, column=4)\n"
"Token(type='END', value=';', line=5, column=9)"

#: ../../library/re.rst:1953
msgid ""
"Friedl, Jeffrey. Mastering Regular Expressions. 3rd ed., O'Reilly Media, "
"2009. The third edition of the book no longer covers Python at all, but the "
"first edition covered writing good regular expression patterns in great "
"detail."
msgstr ""
"Friedl, Jeffrey. Mastering Regular Expressions. 3rd ed., O'Reilly Media, "
"2009. 该书的第三版不再包含 Python，但第一版极详细地覆盖了正则表达式模式串的编写。"

#: ../../library/re.rst:99
msgid ". (dot)"
msgstr ". (点号)"

#: ../../library/re.rst:99 ../../library/re.rst:106 ../../library/re.rst:112
#: ../../library/re.rst:123 ../../library/re.rst:130 ../../library/re.rst:137
#: ../../library/re.rst:143 ../../library/re.rst:157 ../../library/re.rst:181
#: ../../library/re.rst:220 ../../library/re.rst:235 ../../library/re.rst:244
#: ../../library/re.rst:258 ../../library/re.rst:271 ../../library/re.rst:304
#: ../../library/re.rst:317 ../../library/re.rst:327 ../../library/re.rst:359
#: ../../library/re.rst:414 ../../library/re.rst:446 ../../library/re.rst:452
#: ../../library/re.rst:457 ../../library/re.rst:464 ../../library/re.rst:471
#: ../../library/re.rst:498 ../../library/re.rst:508 ../../library/re.rst:531
#: ../../library/re.rst:543 ../../library/re.rst:548 ../../library/re.rst:570
#: ../../library/re.rst:590 ../../library/re.rst:606 ../../library/re.rst:614
#: ../../library/re.rst:628 ../../library/re.rst:636 ../../library/re.rst:653
#: ../../library/re.rst:667 ../../library/re.rst:672 ../../library/re.rst:863
#: ../../library/re.rst:1102
msgid "in regular expressions"
msgstr "在正则表达式中"

#: ../../library/re.rst:106 ../../library/re.rst:271
msgid "^ (caret)"
msgstr "^ (脱字号)"

#: ../../library/re.rst:112
msgid "$ (dollar)"
msgstr "$ (货币符号)"

#: ../../library/re.rst:123
msgid "* (asterisk)"
msgstr "* (星号)"

#: ../../library/re.rst:130
msgid "+ (plus)"
msgstr "+ (加号)"

#: ../../library/re.rst:137
msgid "? (question mark)"
msgstr "? (问号)"

#: ../../library/re.rst:143
msgid "*?"
msgstr "*?"

#: ../../library/re.rst:143
msgid "+?"
msgstr "+?"

#: ../../library/re.rst:143
msgid "??"
msgstr "??"

#: ../../library/re.rst:157
msgid "*+"
msgstr "*+"

#: ../../library/re.rst:157
msgid "++"
msgstr "++"

#: ../../library/re.rst:157
msgid "?+"
msgstr "?+"

#: ../../library/re.rst:181
msgid "{} (curly brackets)"
msgstr "{} (花括号)"

#: ../../library/re.rst:220 ../../library/re.rst:258 ../../library/re.rst:531
msgid "\\ (backslash)"
msgstr "\\ (反斜杠)"

#: ../../library/re.rst:235
msgid "[] (square brackets)"
msgstr "[] (方括号)"

#: ../../library/re.rst:244
msgid "- (minus)"
msgstr "- (减号)"

#: ../../library/re.rst:304
msgid "| (vertical bar)"
msgstr "| (竖线)"

#: ../../library/re.rst:317
msgid "() (parentheses)"
msgstr "() (圆括号)"

#: ../../library/re.rst:327
msgid "(?"
msgstr "(?"

#: ../../library/re.rst:359
msgid "(?:"
msgstr "(?:"

#: ../../library/re.rst:414
msgid "(?P<"
msgstr "(?P<"

#: ../../library/re.rst:446
msgid "(?P="
msgstr "(?P="

#: ../../library/re.rst:452
msgid "(?#"
msgstr "(?#"

#: ../../library/re.rst:457
msgid "(?="
msgstr "(?="

#: ../../library/re.rst:464
msgid "(?!"
msgstr "(?!"

#: ../../library/re.rst:471
msgid "(?<="
msgstr "(?<="

#: ../../library/re.rst:498
msgid "(?<!"
msgstr "(?<!"

#: ../../library/re.rst:508
msgid "(?("
msgstr "(?("

#: ../../library/re.rst:543
msgid "\\A"
msgstr "\\A"

#: ../../library/re.rst:548 ../../library/re.rst:672
msgid "\\b"
msgstr "\\b"

#: ../../library/re.rst:570
msgid "\\B"
msgstr "\\B"

#: ../../library/re.rst:590
msgid "\\d"
msgstr "\\d"

#: ../../library/re.rst:606
msgid "\\D"
msgstr "\\D"

#: ../../library/re.rst:614
msgid "\\s"
msgstr "\\s"

#: ../../library/re.rst:628
msgid "\\S"
msgstr "\\S"

#: ../../library/re.rst:636
msgid "\\w"
msgstr "\\w"

#: ../../library/re.rst:653
msgid "\\W"
msgstr "\\W"

#: ../../library/re.rst:667
msgid "\\Z"
msgstr "\\Z"

#: ../../library/re.rst:672
msgid "\\a"
msgstr "\\a"

#: ../../library/re.rst:672
msgid "\\f"
msgstr "\\f"

#: ../../library/re.rst:672
msgid "\\n"
msgstr "\\n"

#: ../../library/re.rst:672
msgid "\\r"
msgstr "\\r"

#: ../../library/re.rst:672
msgid "\\t"
msgstr "\\t"

#: ../../library/re.rst:672
msgid "\\u"
msgstr "\\u"

#: ../../library/re.rst:672
msgid "\\U"
msgstr "\\U"

#: ../../library/re.rst:672
msgid "\\v"
msgstr "\\v"

#: ../../library/re.rst:672
msgid "\\x"
msgstr "\\x"

#: ../../library/re.rst:672
msgid "\\\\"
msgstr "\\\\"

#: ../../library/re.rst:863
msgid "# (hash)"
msgstr "# (hash)"

#: ../../library/re.rst:1102
msgid "\\g"
msgstr "\\g"

#: ../../library/re.rst:1649
msgid "scanf (C function)"
msgstr "scanf (C 函数)"
