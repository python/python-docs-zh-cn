# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/venv.rst:2
msgid ":mod:`venv` --- Creation of virtual environments"
msgstr ""

#: ../../library/venv.rst:12
msgid "**Source code:** :source:`Lib/venv/`"
msgstr ""

#: ../../library/venv.rst:21
msgid ""
"The :mod:`!venv` module supports creating lightweight \"virtual "
"environments\", each with their own independent set of Python packages "
"installed in their :mod:`site` directories. A virtual environment is created"
" on top of an existing Python installation, known as the virtual "
"environment's \"base\" Python, and may optionally be isolated from the "
"packages in the base environment, so only those explicitly installed in the "
"virtual environment are available."
msgstr ""

#: ../../library/venv.rst:29
msgid ""
"When used from within a virtual environment, common installation tools such "
"as `pip`_ will install Python packages into a virtual environment without "
"needing to be told to do so explicitly."
msgstr ""

#: ../../library/venv.rst:33
msgid "A virtual environment is (amongst other things):"
msgstr ""

#: ../../library/venv.rst:35
msgid ""
"Used to contain a specific Python interpreter and software libraries and "
"binaries which are needed to support a project (library or application). "
"These are by default isolated from software in other virtual environments "
"and Python interpreters and libraries installed in the operating system."
msgstr ""

#: ../../library/venv.rst:40
msgid ""
"Contained in a directory, conventionally either named ``venv`` or ``.venv`` "
"in the project directory, or under a container directory for lots of virtual"
" environments, such as ``~/.virtualenvs``."
msgstr ""

#: ../../library/venv.rst:44
msgid "Not checked into source control systems such as Git."
msgstr ""

#: ../../library/venv.rst:46
msgid ""
"Considered as disposable -- it should be simple to delete and recreate it "
"from scratch. You don't place any project code in the environment"
msgstr ""

#: ../../library/venv.rst:49
msgid ""
"Not considered as movable or copyable -- you just recreate the same "
"environment in the target location."
msgstr ""

#: ../../library/venv.rst:52
msgid "See :pep:`405` for more background on Python virtual environments."
msgstr ""

#: ../../library/venv.rst:56
msgid ""
"`Python Packaging User Guide: Creating and using virtual environments "
"<https://packaging.python.org/guides/installing-using-pip-and-virtual-"
"environments/#create-and-use-virtual-environments>`__"
msgstr ""

#: ../../includes/wasm-notavail.rst:3
msgid ":ref:`Availability <availability>`: not Emscripten, not WASI."
msgstr ""

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms "
"``wasm32-emscripten`` and ``wasm32-wasi``. See :ref:`wasm-availability` for "
"more information."
msgstr ""

#: ../../library/venv.rst:62
msgid "Creating virtual environments"
msgstr ""

#: ../../using/venv-create.inc:1
msgid ""
"Creation of :ref:`virtual environments <venv-def>` is done by executing the "
"command ``venv``::"
msgstr ""

#: ../../using/venv-create.inc:6
msgid ""
"Running this command creates the target directory (creating any parent "
"directories that don't exist already) and places a ``pyvenv.cfg`` file in it"
" with a ``home`` key pointing to the Python installation from which the "
"command was run (a common name for the target directory is ``.venv``).  It "
"also creates a ``bin`` (or ``Scripts`` on Windows) subdirectory containing a"
" copy/symlink of the Python binary/binaries (as appropriate for the platform"
" or arguments used at environment creation time). It also creates an "
"(initially empty) ``lib/pythonX.Y/site-packages`` subdirectory (on Windows, "
"this is ``Lib\\site-packages``). If an existing directory is specified, it "
"will be re-used."
msgstr ""

#: ../../using/venv-create.inc:17
msgid ""
"The use of ``venv`` is now recommended for creating virtual environments."
msgstr ""

#: ../../using/venv-create.inc:20
msgid ""
"``pyvenv`` was the recommended tool for creating virtual environments for "
"Python 3.3 and 3.4, and is :ref:`deprecated in Python 3.6 "
"<whatsnew36-venv>`."
msgstr ""

#: ../../using/venv-create.inc:27
msgid "On Windows, invoke the ``venv`` command as follows::"
msgstr ""

#: ../../using/venv-create.inc:31
msgid ""
"Alternatively, if you configured the ``PATH`` and ``PATHEXT`` variables for "
"your :ref:`Python installation <using-on-windows>`::"
msgstr ""

#: ../../using/venv-create.inc:36
msgid "The command, if run with ``-h``, will show the available options::"
msgstr ""

#: ../../using/venv-create.inc:70
msgid ""
"Add ``--upgrade-deps`` option to upgrade pip + setuptools to the latest on "
"PyPI"
msgstr ""

#: ../../using/venv-create.inc:73
msgid ""
"Installs pip by default, added the ``--without-pip``  and ``--copies`` "
"options"
msgstr ""

#: ../../using/venv-create.inc:77
msgid ""
"In earlier versions, if the target directory already existed, an error was "
"raised, unless the ``--clear`` or ``--upgrade`` option was provided."
msgstr ""

#: ../../using/venv-create.inc:82
msgid ""
"While symlinks are supported on Windows, they are not recommended. Of "
"particular note is that double-clicking ``python.exe`` in File Explorer will"
" resolve the symlink eagerly and ignore the virtual environment."
msgstr ""

#: ../../using/venv-create.inc:87
msgid ""
"On Microsoft Windows, it may be required to enable the ``Activate.ps1`` "
"script by setting the execution policy for the user. You can do this by "
"issuing the following PowerShell command:"
msgstr ""

#: ../../using/venv-create.inc:91
msgid ""
"PS C:\\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope "
"CurrentUser"
msgstr ""

#: ../../using/venv-create.inc:93
msgid ""
"See `About Execution Policies "
"<https://go.microsoft.com/fwlink/?LinkID=135170>`_ for more information."
msgstr ""

#: ../../using/venv-create.inc:97
msgid ""
"The created ``pyvenv.cfg`` file also includes the ``include-system-site-"
"packages`` key, set to ``true`` if ``venv`` is run with the ``--system-site-"
"packages`` option, ``false`` otherwise."
msgstr ""

#: ../../using/venv-create.inc:101
msgid ""
"Unless the ``--without-pip`` option is given, :mod:`ensurepip` will be "
"invoked to bootstrap ``pip`` into the virtual environment."
msgstr ""

#: ../../using/venv-create.inc:104
msgid ""
"Multiple paths can be given to ``venv``, in which case an identical virtual "
"environment will be created, according to the given options, at each "
"provided path."
msgstr ""

#: ../../library/venv.rst:69
msgid "How venvs work"
msgstr ""

#: ../../library/venv.rst:71
msgid ""
"When a Python interpreter is running from a virtual environment, "
":data:`sys.prefix` and :data:`sys.exec_prefix` point to the directories of "
"the virtual environment, whereas :data:`sys.base_prefix` and "
":data:`sys.base_exec_prefix` point to those of the base Python used to "
"create the environment. It is sufficient to check ``sys.prefix != "
"sys.base_prefix`` to determine if the current interpreter is running from a "
"virtual environment."
msgstr ""

#: ../../library/venv.rst:80
msgid ""
"A virtual environment may be \"activated\" using a script in its binary "
"directory (``bin`` on POSIX; ``Scripts`` on Windows). This will prepend that"
" directory to your :envvar:`PATH`, so that running :program:`python` will "
"invoke the environment's Python interpreter and you can run installed "
"scripts without having to use their full path. The invocation of the "
"activation script is platform-specific (:samp:`{<venv>}` must be replaced by"
" the path to the directory containing the virtual environment):"
msgstr ""

#: ../../library/venv.rst:90
msgid "Platform"
msgstr ""

#: ../../library/venv.rst:90
msgid "Shell"
msgstr ""

#: ../../library/venv.rst:90
msgid "Command to activate virtual environment"
msgstr ""

#: ../../library/venv.rst:92
msgid "POSIX"
msgstr ""

#: ../../library/venv.rst:92
msgid "bash/zsh"
msgstr ""

#: ../../library/venv.rst:92
msgid ":samp:`$ source {<venv>}/bin/activate`"
msgstr ""

#: ../../library/venv.rst:94
msgid "fish"
msgstr ""

#: ../../library/venv.rst:94
msgid ":samp:`$ source {<venv>}/bin/activate.fish`"
msgstr ""

#: ../../library/venv.rst:96
msgid "csh/tcsh"
msgstr ""

#: ../../library/venv.rst:96
msgid ":samp:`$ source {<venv>}/bin/activate.csh`"
msgstr ""

#: ../../library/venv.rst:98 ../../library/venv.rst:102
msgid "PowerShell"
msgstr ""

#: ../../library/venv.rst:98
msgid ":samp:`$ {<venv>}/bin/Activate.ps1`"
msgstr ""

#: ../../library/venv.rst:100
msgid "Windows"
msgstr ""

#: ../../library/venv.rst:100
msgid "cmd.exe"
msgstr ""

#: ../../library/venv.rst:100
msgid ":samp:`C:\\\\> {<venv>}\\\\Scripts\\\\activate.bat`"
msgstr ""

#: ../../library/venv.rst:102
msgid ":samp:`PS C:\\\\> {<venv>}\\\\Scripts\\\\Activate.ps1`"
msgstr ""

#: ../../library/venv.rst:105
msgid ":program:`fish` and :program:`csh` activation scripts."
msgstr ""

#: ../../library/venv.rst:108
msgid ""
"PowerShell activation scripts installed under POSIX for PowerShell Core "
"support."
msgstr ""

#: ../../library/venv.rst:112
msgid ""
"You don't specifically *need* to activate a virtual environment, as you can "
"just specify the full path to that environment's Python interpreter when "
"invoking Python. Furthermore, all scripts installed in the environment "
"should be runnable without activating it."
msgstr ""

#: ../../library/venv.rst:118
msgid ""
"In order to achieve this, scripts installed into virtual environments have a"
" \"shebang\" line which points to the environment's Python interpreter, i.e."
" :samp:`#!/{<path-to-venv>}/bin/python`. This means that the script will run"
" with that interpreter regardless of the value of :envvar:`PATH`. On "
"Windows, \"shebang\" line processing is supported if you have the "
":ref:`launcher` installed. Thus, double-clicking an installed script in a "
"Windows Explorer window should run it with the correct interpreter without "
"the environment needing to be activated or on the :envvar:`PATH`."
msgstr ""

#: ../../library/venv.rst:127
msgid ""
"When a virtual environment has been activated, the :envvar:`!VIRTUAL_ENV` "
"environment variable is set to the path of the environment. Since explicitly"
" activating a virtual environment is not required to use it, "
":envvar:`!VIRTUAL_ENV` cannot be relied upon to determine whether a virtual "
"environment is being used."
msgstr ""

#: ../../library/venv.rst:133
msgid ""
"Because scripts installed in environments should not expect the environment "
"to be activated, their shebang lines contain the absolute paths to their "
"environment's interpreters. Because of this, environments are inherently "
"non-portable, in the general case. You should always have a simple means of "
"recreating an environment (for example, if you have a requirements file "
"``requirements.txt``, you can invoke ``pip install -r requirements.txt`` "
"using the environment's ``pip`` to install all of the packages needed by the"
" environment). If for any reason you need to move the environment to a new "
"location, you should recreate it at the desired location and delete the one "
"at the old location. If you move an environment because you moved a parent "
"directory of it, you should recreate the environment in its new location. "
"Otherwise, software installed into the environment may not work as expected."
msgstr ""

#: ../../library/venv.rst:147
msgid ""
"You can deactivate a virtual environment by typing ``deactivate`` in your "
"shell. The exact mechanism is platform-specific and is an internal "
"implementation detail (typically, a script or shell function will be used)."
msgstr ""

#: ../../library/venv.rst:155
msgid "API"
msgstr ""

#: ../../library/venv.rst:159
msgid ""
"The high-level method described above makes use of a simple API which "
"provides mechanisms for third-party virtual environment creators to "
"customize environment creation according to their needs, the "
":class:`EnvBuilder` class."
msgstr ""

#: ../../library/venv.rst:167
msgid ""
"The :class:`EnvBuilder` class accepts the following keyword arguments on "
"instantiation:"
msgstr ""

#: ../../library/venv.rst:170
msgid ""
"``system_site_packages`` -- a Boolean value indicating that the system "
"Python site-packages should be available to the environment (defaults to "
"``False``)."
msgstr ""

#: ../../library/venv.rst:173
msgid ""
"``clear`` -- a Boolean value which, if true, will delete the contents of any"
" existing target directory, before creating the environment."
msgstr ""

#: ../../library/venv.rst:176
msgid ""
"``symlinks`` -- a Boolean value indicating whether to attempt to symlink the"
" Python binary rather than copying."
msgstr ""

#: ../../library/venv.rst:179
msgid ""
"``upgrade`` -- a Boolean value which, if true, will upgrade an existing "
"environment with the running Python - for use when that Python has been "
"upgraded in-place (defaults to ``False``)."
msgstr ""

#: ../../library/venv.rst:183
msgid ""
"``with_pip`` -- a Boolean value which, if true, ensures pip is installed in "
"the virtual environment. This uses :mod:`ensurepip` with the ``--default-"
"pip`` option."
msgstr ""

#: ../../library/venv.rst:187
msgid ""
"``prompt`` -- a String to be used after virtual environment is activated "
"(defaults to ``None`` which means directory name of the environment would be"
" used). If the special string ``\".\"`` is provided, the basename of the "
"current directory is used as the prompt."
msgstr ""

#: ../../library/venv.rst:192
msgid "``upgrade_deps`` -- Update the base venv modules to the latest on PyPI"
msgstr ""

#: ../../library/venv.rst:194 ../../library/venv.rst:365
msgid "Added the ``with_pip`` parameter"
msgstr ""

#: ../../library/venv.rst:197 ../../library/venv.rst:368
msgid "Added the ``prompt`` parameter"
msgstr ""

#: ../../library/venv.rst:200 ../../library/venv.rst:371
msgid "Added the ``upgrade_deps`` parameter"
msgstr ""

#: ../../library/venv.rst:203
msgid ""
"Creators of third-party virtual environment tools will be free to use the "
"provided :class:`EnvBuilder` class as a base class."
msgstr ""

#: ../../library/venv.rst:206
msgid "The returned env-builder is an object which has a method, ``create``:"
msgstr ""

#: ../../library/venv.rst:210
msgid ""
"Create a virtual environment by specifying the target directory (absolute or"
" relative to the current directory) which is to contain the virtual "
"environment.  The ``create`` method will either create the environment in "
"the specified directory, or raise an appropriate exception."
msgstr ""

#: ../../library/venv.rst:216
msgid ""
"The ``create`` method of the :class:`EnvBuilder` class illustrates the hooks"
" available for subclass customization::"
msgstr ""

#: ../../library/venv.rst:231
msgid ""
"Each of the methods :meth:`ensure_directories`, "
":meth:`create_configuration`, :meth:`setup_python`, :meth:`setup_scripts` "
"and :meth:`post_setup` can be overridden."
msgstr ""

#: ../../library/venv.rst:237
msgid ""
"Creates the environment directory and all necessary subdirectories that "
"don't already exist, and returns a context object.  This context object is "
"just a holder for attributes (such as paths) for use by the other methods.  "
"If the :class:`EnvBuilder` is created with the arg ``clear=True``, contents "
"of the environment directory will be cleared and then all necessary "
"subdirectories will be recreated."
msgstr ""

#: ../../library/venv.rst:244
msgid ""
"The returned context object is a :class:`types.SimpleNamespace` with the "
"following attributes:"
msgstr ""

#: ../../library/venv.rst:247
msgid ""
"``env_dir`` - The location of the virtual environment. Used for "
"``__VENV_DIR__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""

#: ../../library/venv.rst:250
msgid ""
"``env_name`` - The name of the virtual environment. Used for "
"``__VENV_NAME__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""

#: ../../library/venv.rst:253
msgid ""
"``prompt`` - The prompt to be used by the activation scripts. Used for "
"``__VENV_PROMPT__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""

#: ../../library/venv.rst:256
msgid ""
"``executable`` - The underlying Python executable used by the virtual "
"environment. This takes into account the case where a virtual environment is"
" created from another virtual environment."
msgstr ""

#: ../../library/venv.rst:260
msgid "``inc_path`` - The include path for the virtual environment."
msgstr ""

#: ../../library/venv.rst:262
msgid "``lib_path`` - The purelib path for the virtual environment."
msgstr ""

#: ../../library/venv.rst:264
msgid "``bin_path`` - The script path for the virtual environment."
msgstr ""

#: ../../library/venv.rst:266
msgid ""
"``bin_name`` - The name of the script path relative to the virtual "
"environment location. Used for ``__VENV_BIN_NAME__`` in activation scripts "
"(see :meth:`install_scripts`)."
msgstr ""

#: ../../library/venv.rst:270
msgid ""
"``env_exe`` - The name of the Python interpreter in the virtual environment."
" Used for ``__VENV_PYTHON__`` in activation scripts (see "
":meth:`install_scripts`)."
msgstr ""

#: ../../library/venv.rst:274
msgid ""
"``env_exec_cmd`` - The name of the Python interpreter, taking into account "
"filesystem redirections. This can be used to run Python in the virtual "
"environment."
msgstr ""

#: ../../library/venv.rst:279
msgid ""
"The *venv* :ref:`sysconfig installation scheme <installation_paths>` is used"
" to construct the paths of the created directories."
msgstr ""

#: ../../library/venv.rst:286
msgid "Creates the ``pyvenv.cfg`` configuration file in the environment."
msgstr ""

#: ../../library/venv.rst:290
msgid ""
"Creates a copy or symlink to the Python executable in the environment. On "
"POSIX systems, if a specific executable ``python3.x`` was used, symlinks to "
"``python`` and ``python3`` will be created pointing to that executable, "
"unless files with those names already exist."
msgstr ""

#: ../../library/venv.rst:297
msgid ""
"Installs activation scripts appropriate to the platform into the virtual "
"environment."
msgstr ""

#: ../../library/venv.rst:302
msgid ""
"Upgrades the core venv dependency packages (currently ``pip`` and "
"``setuptools``) in the environment. This is done by shelling out to the "
"``pip`` executable in the environment."
msgstr ""

#: ../../library/venv.rst:310
msgid ""
"A placeholder method which can be overridden in third party implementations "
"to pre-install packages in the virtual environment or perform other post-"
"creation steps."
msgstr ""

#: ../../library/venv.rst:314
msgid ""
"Windows now uses redirector scripts for ``python[w].exe`` instead of copying"
" the actual binaries. In 3.7.2 only :meth:`setup_python` does nothing unless"
" running from a build in the source tree."
msgstr ""

#: ../../library/venv.rst:319
msgid ""
"Windows copies the redirector scripts as part of :meth:`setup_python` "
"instead of :meth:`setup_scripts`. This was not the case in 3.7.2. When using"
" symlinks, the original executables will be linked."
msgstr ""

#: ../../library/venv.rst:324
msgid ""
"In addition, :class:`EnvBuilder` provides this utility method that can be "
"called from :meth:`setup_scripts` or :meth:`post_setup` in subclasses to "
"assist in installing custom scripts into the virtual environment."
msgstr ""

#: ../../library/venv.rst:330
msgid ""
"*path* is the path to a directory that should contain subdirectories "
"\"common\", \"posix\", \"nt\", each containing scripts destined for the bin "
"directory in the environment.  The contents of \"common\" and the directory "
"corresponding to :data:`os.name` are copied after some text replacement of "
"placeholders:"
msgstr ""

#: ../../library/venv.rst:336
msgid ""
"``__VENV_DIR__`` is replaced with the absolute path of the environment "
"directory."
msgstr ""

#: ../../library/venv.rst:339
msgid ""
"``__VENV_NAME__`` is replaced with the environment name (final path segment "
"of environment directory)."
msgstr ""

#: ../../library/venv.rst:342
msgid ""
"``__VENV_PROMPT__`` is replaced with the prompt (the environment name "
"surrounded by parentheses and with a following space)"
msgstr ""

#: ../../library/venv.rst:345
msgid ""
"``__VENV_BIN_NAME__`` is replaced with the name of the bin directory (either"
" ``bin`` or ``Scripts``)."
msgstr ""

#: ../../library/venv.rst:348
msgid ""
"``__VENV_PYTHON__`` is replaced with the absolute path of the environment's "
"executable."
msgstr ""

#: ../../library/venv.rst:351
msgid ""
"The directories are allowed to exist (for when an existing environment is "
"being upgraded)."
msgstr ""

#: ../../library/venv.rst:354
msgid "There is also a module-level convenience function:"
msgstr ""

#: ../../library/venv.rst:360
msgid ""
"Create an :class:`EnvBuilder` with the given keyword arguments, and call its"
" :meth:`~EnvBuilder.create` method with the *env_dir* argument."
msgstr ""

#: ../../library/venv.rst:375
msgid "An example of extending ``EnvBuilder``"
msgstr ""

#: ../../library/venv.rst:377
msgid ""
"The following script shows how to extend :class:`EnvBuilder` by implementing"
" a subclass which installs setuptools and pip into a created virtual "
"environment::"
msgstr ""

#: ../../library/venv.rst:596
msgid ""
"This script is also available for download `online "
"<https://gist.github.com/vsajip/4673395>`_."
msgstr ""

#: ../../library/venv.rst:14
msgid "Environments"
msgstr ""

#: ../../library/venv.rst:14
msgid "virtual"
msgstr ""
