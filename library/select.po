# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Zombie110year <zombie110year@gmail.com>, 2021
# 林行众 <linxzh1989@gmail.com>, 2021
# Arisaka97 <solitaire2312@gmail.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# ProgramRipper, 2023
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-04 14:20+0000\n"
"PO-Revision-Date: 2021-06-28 01:12+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/select.rst:2
msgid ":mod:`!select` --- Waiting for I/O completion"
msgstr ":mod:`!select` --- 等待 I/O 完成"

#: ../../library/select.rst:9
msgid ""
"This module provides access to the :c:func:`!select` and :c:func:`!poll` "
"functions available in most operating systems, :c:func:`!devpoll` available "
"on Solaris and derivatives, :c:func:`!epoll` available on Linux 2.5+ and "
":c:func:`!kqueue` available on most BSD. Note that on Windows, it only works"
" for sockets; on other operating systems, it also works for other file types"
" (in particular, on Unix, it works on pipes). It cannot be used on regular "
"files to determine whether a file has grown since it was last read."
msgstr ""
"该模块提供了对 :c:func:`!select` 和 :c:func:`!poll` "
"函数的访问，这在大多数操作系统上都是可用的，:c:func:`!devpoll` 在 Solaris "
"及其衍生系统上可用，:c:func:`!epoll` 在 Linux 2.5+ 上可用，而 :c:func:`!kqueue` 在大多数 BSD "
"上可用。 注意在 Windows 上，它仅适用于套接字；在其他操作系统上，它还适用于其他文件类型（特别是在 Unix 上，它还适用于管道）。 "
"它不能被用在常规文件上确定一个文件自其最后一次被读取后大小是否有增长。"

#: ../../library/select.rst:20
msgid ""
"The :mod:`selectors` module allows high-level and efficient I/O "
"multiplexing, built upon the :mod:`select` module primitives. Users are "
"encouraged to use the :mod:`selectors` module instead, unless they want "
"precise control over the OS-level primitives used."
msgstr ""
":mod:`selectors` 模块是在 :mod:`select` 模块原型的基础上进行高级且高效的 I/O 复用。推荐用户改用 "
":mod:`selectors` 模块，除非用户希望对 OS 级的函数原型进行精确控制。"

#: ../../library/select.rst:177 ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Availability"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See "
":ref:`wasm-availability` for more information."
msgstr "此模块在 WebAssembly 平台上无效或不可用。 请参阅 :ref:`wasm-availability` 了解详情。"

#: ../../library/select.rst:27
msgid "The module defines the following:"
msgstr "该模块定义以下内容："

#: ../../library/select.rst:32
msgid "A deprecated alias of :exc:`OSError`."
msgstr "一个被弃用的 :exc:`OSError` 的别名。"

#: ../../library/select.rst:34
msgid "Following :pep:`3151`, this class was made an alias of :exc:`OSError`."
msgstr "根据 :pep:`3151`，这个类是 :exc:`OSError` 的别名。"

#: ../../library/select.rst:40
msgid ""
"(Only supported on Solaris and derivatives.)  Returns a ``/dev/poll`` "
"polling object; see section :ref:`devpoll-objects` below for the methods "
"supported by devpoll objects."
msgstr ""
"（仅支持 Solaris 及其衍生版本）返回一个 ``/dev/poll`` 轮询对象，请参阅下方 :ref:`devpoll-objects` 获取 "
"devpoll 对象所支持的方法。"

#: ../../library/select.rst:44
msgid ""
":c:func:`!devpoll` objects are linked to the number of file descriptors "
"allowed at the time of instantiation. If your program reduces this value, "
":c:func:`!devpoll` will fail. If your program increases this value, "
":c:func:`!devpoll` may return an incomplete list of active file descriptors."
msgstr ""
":c:func:`!devpoll` 对象与实例化时允许的文件描述符数量相关联。 如果你的程序减少该值，:c:func:`!devpoll` 将会失败。"
" 如果你的程序增加该值，:c:func:`!devpoll` 可能会返回不完整的活动文件描述符列表。"

#: ../../library/select.rst:50 ../../library/select.rst:79
#: ../../library/select.rst:106
msgid "The new file descriptor is :ref:`non-inheritable <fd_inheritance>`."
msgstr "新的文件描述符是 :ref:`不可继承的 <fd_inheritance>`。"

#: ../../library/select.rst:54 ../../library/select.rst:108
msgid "The new file descriptor is now non-inheritable."
msgstr "新的文件描述符现在是不可继承的。"

#: ../../library/select.rst:59
msgid ""
"(Only supported on Linux 2.5.44 and newer.) Return an edge polling object, "
"which can be used as Edge or Level Triggered interface for I/O events."
msgstr "（仅支持 Linux 2.5.44 或更高版本）返回一个 edge poll 对象，该对象可作为 I/O 事件的边缘触发或水平触发接口。"

#: ../../library/select.rst:63
msgid ""
"*sizehint* informs epoll about the expected number of events to be "
"registered.  It must be positive, or ``-1`` to use the default. It is only "
"used on older systems where :c:func:`!epoll_create1` is not available; "
"otherwise it has no effect (though its value is still checked)."
msgstr ""
"*sizehint* 通知 epoll 预计要注册的事件数量。 该值必须为正数，或为 ``-1`` 以使用默认值。 它仅在 "
":c:func:`!epoll_create1` 不可用的旧系统上会被使用，在其他情况下它没有任何作用（尽管仍会检查其值）。"

#: ../../library/select.rst:68
msgid ""
"*flags* is deprecated and completely ignored.  However, when supplied, its "
"value must be ``0`` or ``select.EPOLL_CLOEXEC``, otherwise ``OSError`` is "
"raised."
msgstr ""
"*flags* 已经弃用且完全被忽略。但是，如果提供该值，则它必须是 ``0`` 或 ``select.EPOLL_CLOEXEC``，否则会抛出 "
"``OSError`` 异常。"

#: ../../library/select.rst:72
msgid ""
"See the :ref:`epoll-objects` section below for the methods supported by "
"epolling objects."
msgstr "请参阅下方 :ref:`epoll-objects` 获取 epoll 对象所支持的方法。"

#: ../../library/select.rst:75
msgid ""
"``epoll`` objects support the context management protocol: when used in a "
":keyword:`with` statement, the new file descriptor is automatically closed "
"at the end of the block."
msgstr ""
"``epoll`` 对象支持上下文管理器：当在 :keyword:`with` 语句中使用时，新建的文件描述符会在运行至语句块结束时自动关闭。"

#: ../../library/select.rst:81
msgid "Added the *flags* parameter."
msgstr "增加了 *flags* 参数。"

#: ../../library/select.rst:84
msgid ""
"Support for the :keyword:`with` statement was added. The new file descriptor"
" is now non-inheritable."
msgstr "增加了对 :keyword:`with` 语句的支持。新的文件描述符现在是不可继承的。"

#: ../../library/select.rst:88
msgid ""
"The *flags* parameter.  ``select.EPOLL_CLOEXEC`` is used by default now. Use"
" :func:`os.set_inheritable` to make the file descriptor inheritable."
msgstr ""
"*flags* 参数。现在默认采用 ``select.EPOLL_CLOEXEC`` 标志。使用 :func:`os.set_inheritable` "
"来让文件描述符可继承。"

#: ../../library/select.rst:95
msgid ""
"(Not supported by all operating systems.)  Returns a polling object, which "
"supports registering and unregistering file descriptors, and then polling "
"them for I/O events; see section :ref:`poll-objects` below for the methods "
"supported by polling objects."
msgstr ""
"（部分操作系统不支持）返回一个 poll 对象，该对象支持注册和注销文件描述符，支持对描述符进行轮询以获取 I/O 事件。请参阅下方 "
":ref:`poll-objects` 获取 poll 对象所支持的方法。"

#: ../../library/select.rst:103
msgid ""
"(Only supported on BSD.)  Returns a kernel queue object; see section "
":ref:`kqueue-objects` below for the methods supported by kqueue objects."
msgstr "（仅支持 BSD）返回一个内核队列对象，请参阅下方 :ref:`kqueue-objects` 获取 kqueue 对象所支持的方法。"

#: ../../library/select.rst:114
msgid ""
"(Only supported on BSD.)  Returns a kernel event object; see section "
":ref:`kevent-objects` below for the methods supported by kevent objects."
msgstr "（仅支持 BSD）返回一个内核事件对象，请参阅下方 :ref:`kevent-objects` 获取 kevent 对象所支持的方法。"

#: ../../library/select.rst:120
msgid ""
"This is a straightforward interface to the Unix :c:func:`!select` system "
"call. The first three arguments are iterables of 'waitable objects': either "
"integers representing file descriptors or objects with a parameterless "
"method named :meth:`~io.IOBase.fileno` returning such an integer:"
msgstr ""
"这是一个明白直观的 Unix :c:func:`!select` 系统调用接口。 "
"前三个参数是产生“可等待对象”的可迭代对象：可以是代表文件描述符的整数，或是带有名为 :meth:`~io.IOBase.fileno` "
"的返回这样的整数的无形参方法的对象:"

#: ../../library/select.rst:125
msgid "*rlist*: wait until ready for reading"
msgstr "*rlist*：等待，直到可以开始读取"

#: ../../library/select.rst:126
msgid "*wlist*: wait until ready for writing"
msgstr "*wlist*：等待，直到可以开始写入"

#: ../../library/select.rst:127
msgid ""
"*xlist*: wait for an \"exceptional condition\" (see the manual page for what"
" your system considers such a condition)"
msgstr "*xlist*：等待“异常情况”（请参阅当前系统的手册，以获取哪些情况称为异常情况）"

#: ../../library/select.rst:130
msgid ""
"Empty iterables are allowed, but acceptance of three empty iterables is "
"platform-dependent. (It is known to work on Unix but not on Windows.)  The "
"optional *timeout* argument specifies a time-out as a floating-point number "
"in seconds.  When the *timeout* argument is omitted the function blocks "
"until at least one file descriptor is ready.  A time-out value of zero "
"specifies a poll and never blocks."
msgstr ""
"允许空的可迭代对象，但是否接受三个空的可迭代对象则取决于具体平台。 （已知在 Unix 上可行但在 Windows 上不可行。） 可选的 "
"*timeout* 参数以一个浮点数表示超时秒数。 当省略 *timeout* 参数时该函数将阻塞直到至少有一个文件描述符准备就绪。 "
"超时值为零表示执行轮询且永不阻塞。"

#: ../../library/select.rst:137
msgid ""
"The return value is a triple of lists of objects that are ready: subsets of "
"the first three arguments.  When the time-out is reached without a file "
"descriptor becoming ready, three empty lists are returned."
msgstr "返回值是三个列表，包含已就绪对象，返回的三个列表是前三个参数的子集。当超时时间已到且没有文件描述符就绪时，返回三个空列表。"

#: ../../library/select.rst:145
msgid ""
"Among the acceptable object types in the iterables are Python :term:`file "
"objects <file object>` (e.g. ``sys.stdin``, or objects returned by "
":func:`open` or :func:`os.popen`), socket objects returned by "
":func:`socket.socket`.  You may also define a :dfn:`wrapper` class yourself,"
" as long as it has an appropriate :meth:`~io.IOBase.fileno` method (that "
"really returns a file descriptor, not just a random integer)."
msgstr ""
"可迭代对象中可接受的对象类型有 Python :term:`文件对象 <file object>` (例如 ``sys.stdin`` 以及 "
":func:`open` 或 :func:`os.popen` 所返回的对象)，由 :func:`socket.socket` 返回的套接字对象等。 "
"你也可以自定义一个 :dfn:`wrapper` 类，只要它具有适当的 :meth:`~io.IOBase.fileno` "
"方法（该方法要确实返回一个文件描述符，而不能只是一个随机整数）。"

#: ../../library/select.rst:156
msgid ""
"File objects on Windows are not acceptable, but sockets are.  On Windows, "
"the underlying :c:func:`!select` function is provided by the WinSock "
"library, and does not handle file descriptors that don't originate from "
"WinSock."
msgstr ""
"在 Windows 上不接受文件对象，但可以接受套接字。 在 Windows 上，底层的 :c:func:`!select` 函数由 WinSock "
"库提供，且不会处理不是源自 WinSock 的文件描述符。"

#: ../../library/select.rst:161 ../../library/select.rst:267
#: ../../library/select.rst:373 ../../library/select.rst:461
#: ../../library/select.rst:502
msgid ""
"The function is now retried with a recomputed timeout when interrupted by a "
"signal, except if the signal handler raises an exception (see :pep:`475` for"
" the rationale), instead of raising :exc:`InterruptedError`."
msgstr ""
"现在，当本函数被信号中断时，重试超时将从头开始计时，不会抛出 :exc:`InterruptedError` "
"异常。除非信号处理程序抛出异常（相关原理请参阅 :pep:`475`）。"

#: ../../library/select.rst:170
msgid ""
"The minimum number of bytes which can be written without blocking to a pipe "
"when the pipe has been reported as ready for writing by "
":func:`~select.select`, :func:`!poll` or another interface in this module.  "
"This doesn't apply to other kind of file-like objects such as sockets."
msgstr ""
"当 :func:`~select.select`、:func:`!poll` "
"或本模块中的其他接口报告管道已准备就绪可以写入时，可以在不阻塞该管道的情况下的最小字节数。 它这不适用于其他文件型对象，例如如套接字。"

#: ../../library/select.rst:175
msgid "This value is guaranteed by POSIX to be at least 512."
msgstr "POSIX 上须保证该值不小于 512。"

#: ../../library/select.rst:185
msgid "``/dev/poll`` Polling Objects"
msgstr "``/dev/poll`` 轮询对象"

#: ../../library/select.rst:187
msgid ""
"Solaris and derivatives have ``/dev/poll``. While :c:func:`!select` is *O*\\"
" (*highest file descriptor*) and :c:func:`!poll` is *O*\\ (*number of file "
"descriptors*), ``/dev/poll`` is *O*\\ (*active file descriptors*)."
msgstr ""
"Solaris 及其衍生版本具有 ``/dev/poll``。 而 :c:func:`!select` 为 *O*\\ (*最高文件描述符*) 并且 "
":c:func:`!poll` 为 *O*\\ (*文件描述符数量*), ``/dev/poll`` 为 *O*\\ (*活动的文件描述符*)。"

#: ../../library/select.rst:191
msgid ""
"``/dev/poll`` behaviour is very close to the standard :c:func:`!poll` "
"object."
msgstr "``/dev/poll`` 的行为非常接近标准 :c:func:`!poll` 对象。"

#: ../../library/select.rst:197
msgid "Close the file descriptor of the polling object."
msgstr "关闭轮询对象的文件描述符。"

#: ../../library/select.rst:204
msgid "``True`` if the polling object is closed."
msgstr "如果轮询对象已关闭，则返回 ``True``。"

#: ../../library/select.rst:211
msgid "Return the file descriptor number of the polling object."
msgstr "返回轮询对象的文件描述符对应的数字。"

#: ../../library/select.rst:218 ../../library/select.rst:396
msgid ""
"Register a file descriptor with the polling object.  Future calls to the "
":meth:`poll` method will then check whether the file descriptor has any "
"pending I/O events.  *fd* can be either an integer, or an object with a "
":meth:`~io.IOBase.fileno` method that returns an integer.  File objects "
"implement :meth:`!fileno`, so they can also be used as the argument."
msgstr ""
"在轮询对象中注册文件描述符。这样，将来调用 :meth:`poll` 方法时将检查文件描述符是否有未处理的 I/O 事件。*fd* "
"可以是整数，也可以是带有 :meth:`~io.IOBase.fileno` 方法的对象（该方法返回一个整数）。文件对象已经实现了 "
":meth:`!fileno`，因此它们也可以用作参数。"

#: ../../library/select.rst:224
msgid ""
"*eventmask* is an optional bitmask describing the type of events you want to"
" check for. The constants are the same that with :c:func:`!poll` object. The"
" default value is a combination of the constants :const:`POLLIN`, "
":const:`POLLPRI`, and :const:`POLLOUT`."
msgstr ""
"*eventmask* 是可选的位掩码，用于描述要检查的事件类型。 这些常量与 :c:func:`!poll` 对象的相同。 默认值是常量 "
":const:`POLLIN`、:const:`POLLPRI` 和 :const:`POLLOUT` 的组合。"

#: ../../library/select.rst:231
msgid ""
"Registering a file descriptor that's already registered is not an error, but"
" the result is undefined. The appropriate action is to unregister or modify "
"it first. This is an important difference compared with :c:func:`!poll`."
msgstr "注册已注册的文件描述符不会报错，但结果是未定义的。 适当的做法是先注销或修改它。 这是与 :c:func:`!poll` 的一个重要区别。"

#: ../../library/select.rst:239
msgid ""
"This method does an :meth:`unregister` followed by a :meth:`register`. It is"
" (a bit) more efficient that doing the same explicitly."
msgstr "此方法先执行 :meth:`unregister` 后执行 :meth:`register`。直接执行此操作效率（稍微）高一些。"

#: ../../library/select.rst:246 ../../library/select.rst:440
msgid ""
"Remove a file descriptor being tracked by a polling object.  Just like the "
":meth:`register` method, *fd* can be an integer or an object with a "
":meth:`~io.IOBase.fileno` method that returns an integer."
msgstr ""
"删除轮询对象正在跟踪的某个文件描述符。与 :meth:`register` 方法类似，*fd* 可以是整数，也可以是带有 "
":meth:`~io.IOBase.fileno` 方法的对象（该方法返回一个整数）。"

#: ../../library/select.rst:250
msgid ""
"Attempting to remove a file descriptor that was never registered is safely "
"ignored."
msgstr "尝试删除从未注册过的文件描述符将被安全地忽略。"

#: ../../library/select.rst:256
msgid ""
"Polls the set of registered file descriptors, and returns a possibly empty "
"list containing ``(fd, event)`` 2-tuples for the descriptors that have "
"events or errors to report. *fd* is the file descriptor, and *event* is a "
"bitmask with bits set for the reported events for that descriptor --- "
":const:`POLLIN` for waiting input, :const:`POLLOUT` to indicate that the "
"descriptor can be written to, and so forth. An empty list indicates that the"
" call timed out and no file descriptors had any events to report. If "
"*timeout* is given, it specifies the length of time in milliseconds which "
"the system will wait for events before returning. If *timeout* is omitted, "
"-1, or :const:`None`, the call will block until there is an event for this "
"poll object."
msgstr ""
"轮询已注册的文件描述符的集合，并返回一个列表，列表可能为空，也可能有多个 ``(fd, event)`` 2元组，其中包含了要报告事件或错误的描述符。 "
"*fd* 是文件描述符，*event* 是一个位掩码，表示该描述符所报告的事件 --- :const:`POLLIN` "
"表示等待输入，:const:`POLLOUT` 表示该描述符可以写入，依此类推。 空列表表示调用超时，没有任何文件描述符报告事件。 如果指定了 "
"*timeout*，它将指定系统等待事件时，等待多长时间后返回（以毫秒为单位）。如果 *timeout* 被省略、为 -1 或为 "
":const:`None`，则本调用将阻塞，直到轮询对象发生事件为止。"

#: ../../library/select.rst:277
msgid "Edge and Level Trigger Polling (epoll) Objects"
msgstr "边缘触发和水平触发的轮询 (epoll) 对象"

#: ../../library/select.rst:279
msgid "https://linux.die.net/man/4/epoll"
msgstr "https://linux.die.net/man/4/epoll"

#: ../../library/select.rst:281
msgid "*eventmask*"
msgstr "*eventmask*"

#: ../../library/select.rst:284 ../../library/select.rst:408
#: ../../library/select.rst:528 ../../library/select.rst:557
#: ../../library/select.rst:588 ../../library/select.rst:596
#: ../../library/select.rst:616 ../../library/select.rst:639
msgid "Constant"
msgstr "常量"

#: ../../library/select.rst:284 ../../library/select.rst:408
#: ../../library/select.rst:528 ../../library/select.rst:557
#: ../../library/select.rst:588 ../../library/select.rst:596
#: ../../library/select.rst:616 ../../library/select.rst:639
msgid "Meaning"
msgstr "含意"

#: ../../library/select.rst:286
msgid ":const:`EPOLLIN`"
msgstr ":const:`EPOLLIN`"

#: ../../library/select.rst:286
msgid "Available for read"
msgstr "可读"

#: ../../library/select.rst:288
msgid ":const:`EPOLLOUT`"
msgstr ":const:`EPOLLOUT`"

#: ../../library/select.rst:288
msgid "Available for write"
msgstr "可写"

#: ../../library/select.rst:290
msgid ":const:`EPOLLPRI`"
msgstr ":const:`EPOLLPRI`"

#: ../../library/select.rst:290
msgid "Urgent data for read"
msgstr "紧急数据读取"

#: ../../library/select.rst:292
msgid ":const:`EPOLLERR`"
msgstr ":const:`EPOLLERR`"

#: ../../library/select.rst:292
msgid "Error condition happened on the assoc. fd"
msgstr "在关联的文件描述符上有错误情况发生"

#: ../../library/select.rst:294
msgid ":const:`EPOLLHUP`"
msgstr ":const:`EPOLLHUP`"

#: ../../library/select.rst:294
msgid "Hang up happened on the assoc. fd"
msgstr "关联的文件描述符已挂起"

#: ../../library/select.rst:296
msgid ":const:`EPOLLET`"
msgstr ":const:`EPOLLET`"

#: ../../library/select.rst:296
msgid "Set Edge Trigger behavior, the default is Level Trigger behavior"
msgstr "设置触发方式为边缘触发，默认为水平触发"

#: ../../library/select.rst:299
msgid ":const:`EPOLLONESHOT`"
msgstr ":const:`EPOLLONESHOT`"

#: ../../library/select.rst:299
msgid ""
"Set one-shot behavior. After one event is pulled out, the fd is internally "
"disabled"
msgstr "设置 one-shot 模式。触发一次事件后，该描述符会在轮询对象内部被禁用。"

#: ../../library/select.rst:302
msgid ":const:`EPOLLEXCLUSIVE`"
msgstr ":const:`EPOLLEXCLUSIVE`"

#: ../../library/select.rst:302
msgid ""
"Wake only one epoll object when the associated fd has an event. The default "
"(if this flag is not set) is to wake all epoll objects polling on a fd."
msgstr "当已关联的描述符发生事件时，仅唤醒一个 epoll 对象。默认（如果未设置此标志）是唤醒所有轮询该描述符的 epoll 对象。"

#: ../../library/select.rst:307
msgid ":const:`EPOLLRDHUP`"
msgstr ":const:`EPOLLRDHUP`"

#: ../../library/select.rst:307
msgid ""
"Stream socket peer closed connection or shut down writing half of "
"connection."
msgstr "流套接字的对侧关闭了连接或关闭了写入到一半的连接。"

#: ../../library/select.rst:310
msgid ":const:`EPOLLRDNORM`"
msgstr ":const:`EPOLLRDNORM`"

#: ../../library/select.rst:310
msgid "Equivalent to :const:`EPOLLIN`"
msgstr "等同于 :const:`EPOLLIN`"

#: ../../library/select.rst:312
msgid ":const:`EPOLLRDBAND`"
msgstr ":const:`EPOLLRDBAND`"

#: ../../library/select.rst:312
msgid "Priority data band can be read."
msgstr "可以读取优先数据带。"

#: ../../library/select.rst:314
msgid ":const:`EPOLLWRNORM`"
msgstr ":const:`EPOLLWRNORM`"

#: ../../library/select.rst:314
msgid "Equivalent to :const:`EPOLLOUT`"
msgstr "等同于 :const:`EPOLLOUT`"

#: ../../library/select.rst:316
msgid ":const:`EPOLLWRBAND`"
msgstr ":const:`EPOLLWRBAND`"

#: ../../library/select.rst:316
msgid "Priority data may be written."
msgstr "可以写入优先级数据。"

#: ../../library/select.rst:318
msgid ":const:`EPOLLMSG`"
msgstr ":const:`EPOLLMSG`"

#: ../../library/select.rst:318
msgid "Ignored."
msgstr "忽略"

#: ../../library/select.rst:320
msgid ":const:`EPOLLWAKEUP`"
msgstr ":const:`EPOLLWAKEUP`"

#: ../../library/select.rst:320
msgid "Prevents sleep during event waiting."
msgstr "防止在事件等待期间休眠。"

#: ../../library/select.rst:323
msgid ""
":const:`EPOLLEXCLUSIVE` was added.  It's only supported by Linux Kernel 4.5 "
"or later."
msgstr "增加了 :const:`EPOLLEXCLUSIVE`。仅支持 Linux Kernel 4.5 或更高版本。"

#: ../../library/select.rst:327
msgid ""
":const:`EPOLLWAKEUP` was added. It's only supported by Linux Kernel 3.5 or "
"later."
msgstr "增加了 :const:`EPOLLWAKEUP`。 仅受 Linux 3.5 或更新的内核支持。"

#: ../../library/select.rst:333
msgid "Close the control file descriptor of the epoll object."
msgstr "关闭用于控制 epoll 对象的文件描述符。"

#: ../../library/select.rst:338
msgid "``True`` if the epoll object is closed."
msgstr "如果 epoll 对象已关闭，则返回 ``True``。"

#: ../../library/select.rst:343 ../../library/select.rst:485
msgid "Return the file descriptor number of the control fd."
msgstr "返回文件描述符对应的数字，该描述符用于控制 epoll 对象。"

#: ../../library/select.rst:348
msgid "Create an epoll object from a given file descriptor."
msgstr "根据给定的文件描述符创建 epoll 对象。"

#: ../../library/select.rst:353
msgid "Register a fd descriptor with the epoll object."
msgstr "在 epoll 对象中注册一个文件描述符。"

#: ../../library/select.rst:358
msgid "Modify a registered file descriptor."
msgstr "修改一个已注册的文件描述符。"

#: ../../library/select.rst:363
msgid "Remove a registered file descriptor from the epoll object."
msgstr "从 epoll 对象中删除一个已注册的文件描述符。"

#: ../../library/select.rst:365
msgid "The method no longer ignores the :data:`~errno.EBADF` error."
msgstr "此方法不会再忽略 :data:`~errno.EBADF` 错误。"

#: ../../library/select.rst:371
msgid "Wait for events. timeout in seconds (float)"
msgstr "等待事件发生，timeout 是浮点数，单位为秒。"

#: ../../library/select.rst:383
msgid "Polling Objects"
msgstr "Poll 对象"

#: ../../library/select.rst:385
msgid ""
"The :c:func:`!poll` system call, supported on most Unix systems, provides "
"better scalability for network servers that service many, many clients at "
"the same time. :c:func:`!poll` scales better because the system call only "
"requires listing the file descriptors of interest, while :c:func:`!select` "
"builds a bitmap, turns on bits for the fds of interest, and then afterward "
"the whole bitmap has to be linearly scanned again. :c:func:`!select` is "
"*O*\\ (*highest file descriptor*), while :c:func:`!poll` is *O*\\ (*number "
"of file descriptors*)."
msgstr ""
"大多数 Unix 系统都支持 :c:func:`!poll` 系统调用，它为网络服务器提供了更好的可伸缩性，可以同时为大量客户端提供服务。 "
":c:func:`!poll` 的可伸缩性更好是因为该系统只须列出要关注的文件描述符，而 :c:func:`!select` "
"则会构建一个位映射表，打开这个要关注的描述符所对应的比特位，然后再次线性扫描整个位映射表。 :c:func:`!select` 的复杂度为 *O*\\ "
"(*最高文件描述符*)，而 :c:func:`!poll` 则为 *O*\\ (*文件描述符的数量*)。"

#: ../../library/select.rst:402
msgid ""
"*eventmask* is an optional bitmask describing the type of events you want to"
" check for, and can be a combination of the constants :const:`POLLIN`, "
":const:`POLLPRI`, and :const:`POLLOUT`, described in the table below.  If "
"not specified, the default value used will check for all 3 types of events."
msgstr ""
"*eventmask* 是可选的位掩码，用于指定要检查的事件类型，它可以是常量 :const:`POLLIN`、:const:`POLLPRI` 和 "
":const:`POLLOUT` 的组合，如下表所述。如果未指定本参数，默认将会检查所有 3 种类型的事件。"

#: ../../library/select.rst:410
msgid ":const:`POLLIN`"
msgstr ":const:`POLLIN`"

#: ../../library/select.rst:410
msgid "There is data to read"
msgstr "有要读取的数据"

#: ../../library/select.rst:412
msgid ":const:`POLLPRI`"
msgstr ":const:`POLLPRI`"

#: ../../library/select.rst:412
msgid "There is urgent data to read"
msgstr "有紧急数据需要读取"

#: ../../library/select.rst:414
msgid ":const:`POLLOUT`"
msgstr ":const:`POLLOUT`"

#: ../../library/select.rst:414
msgid "Ready for output: writing will not block"
msgstr "准备输出：写不会阻塞"

#: ../../library/select.rst:416
msgid ":const:`POLLERR`"
msgstr ":const:`POLLERR`"

#: ../../library/select.rst:416
msgid "Error condition of some sort"
msgstr "某种错误条件"

#: ../../library/select.rst:418
msgid ":const:`POLLHUP`"
msgstr ":const:`POLLHUP`"

#: ../../library/select.rst:418
msgid "Hung up"
msgstr "挂起"

#: ../../library/select.rst:420
msgid ":const:`POLLRDHUP`"
msgstr ":const:`POLLRDHUP`"

#: ../../library/select.rst:420
msgid ""
"Stream socket peer closed connection, or shut down writing half of "
"connection"
msgstr "流套接字的对侧关闭了连接，或关闭了写入到一半的连接"

#: ../../library/select.rst:423
msgid ":const:`POLLNVAL`"
msgstr ":const:`POLLNVAL`"

#: ../../library/select.rst:423
msgid "Invalid request: descriptor not open"
msgstr "无效的请求：描述符未打开"

#: ../../library/select.rst:426
msgid ""
"Registering a file descriptor that's already registered is not an error, and"
" has the same effect as registering the descriptor exactly once."
msgstr "注册已注册过的文件描述符不会报错，且等同于只注册一次该描述符。"

#: ../../library/select.rst:432
msgid ""
"Modifies an already registered fd. This has the same effect as "
"``register(fd, eventmask)``.  Attempting to modify a file descriptor that "
"was never registered causes an :exc:`OSError` exception with errno "
":const:`ENOENT` to be raised."
msgstr ""
"修改一个已注册的文件描述符，等同于 ``register(fd, eventmask)``。尝试修改未注册的文件描述符会抛出 "
":exc:`OSError` 异常，错误码为 :const:`ENOENT`。"

#: ../../library/select.rst:444
msgid ""
"Attempting to remove a file descriptor that was never registered causes a "
":exc:`KeyError` exception to be raised."
msgstr "尝试删除从未注册过的文件描述符会抛出 :exc:`KeyError` 异常。"

#: ../../library/select.rst:450
msgid ""
"Polls the set of registered file descriptors, and returns a possibly empty "
"list containing ``(fd, event)`` 2-tuples for the descriptors that have "
"events or errors to report. *fd* is the file descriptor, and *event* is a "
"bitmask with bits set for the reported events for that descriptor --- "
":const:`POLLIN` for waiting input, :const:`POLLOUT` to indicate that the "
"descriptor can be written to, and so forth. An empty list indicates that the"
" call timed out and no file descriptors had any events to report. If "
"*timeout* is given, it specifies the length of time in milliseconds which "
"the system will wait for events before returning. If *timeout* is omitted, "
"negative, or :const:`None`, the call will block until there is an event for "
"this poll object."
msgstr ""
"轮询已注册的文件描述符的集合，并返回一个列表，列表可能为空，也可能有多个 ``(fd, event)`` 2元组，其中包含了要报告事件或错误的描述符。 "
"*fd* 是文件描述符，*event* 是一个位掩码，表示该描述符所报告的事件 --- :const:`POLLIN` "
"表示等待输入，:const:`POLLOUT` 表示该描述符可以写入，依此类推。 空列表表示调用超时，没有任何文件描述符报告事件。 如果指定了 "
"*timeout*，它将指定系统等待事件时，等待多长时间后返回（以毫秒为单位）。如果 *timeout* 被省略、为 -1 或为 "
":const:`None`，则本调用将阻塞，直到轮询对象发生事件为止。"

#: ../../library/select.rst:471
msgid "Kqueue Objects"
msgstr "Kqueue 对象"

#: ../../library/select.rst:475
msgid "Close the control file descriptor of the kqueue object."
msgstr "关闭用于控制 kqueue 对象的文件描述符。"

#: ../../library/select.rst:480
msgid "``True`` if the kqueue object is closed."
msgstr "如果 kqueue 对象已关闭，则返回 ``True``。"

#: ../../library/select.rst:490
msgid "Create a kqueue object from a given file descriptor."
msgstr "根据给定的文件描述符创建 kqueue 对象。"

#: ../../library/select.rst:495
msgid "Low level interface to kevent"
msgstr "Kevent 的低级接口"

#: ../../library/select.rst:497
msgid "changelist must be an iterable of kevent objects or ``None``"
msgstr "changelist 必须是一个可迭代对象，迭代出 kevent 对象，否则置为 ``None``。"

#: ../../library/select.rst:498
msgid "max_events must be 0 or a positive integer"
msgstr "max_events 必须是 0 或一个正整数。"

#: ../../library/select.rst:499
msgid ""
"timeout in seconds (floats possible); the default is ``None``, to wait "
"forever"
msgstr "timeout 单位为秒（一般为浮点数），默认为 ``None``，即永不超时。"

#: ../../library/select.rst:512
msgid "Kevent Objects"
msgstr "Kevent 对象"

#: ../../library/select.rst:514
msgid "https://man.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2"
msgstr "https://man.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2"

#: ../../library/select.rst:518
msgid ""
"Value used to identify the event. The interpretation depends on the filter "
"but it's usually the file descriptor. In the constructor ident can either be"
" an int or an object with a :meth:`~io.IOBase.fileno` method. kevent stores "
"the integer internally."
msgstr ""
"用于区分事件的标识值。其解释取决于筛选器，但该值通常是文件描述符。在构造函数中，该标识值可以是整数或带有 "
":meth:`~io.IOBase.fileno` 方法的对象。kevent 在内部存储整数。"

#: ../../library/select.rst:525
msgid "Name of the kernel filter."
msgstr "内核筛选器的名称。"

#: ../../library/select.rst:530
msgid ":const:`KQ_FILTER_READ`"
msgstr ":const:`KQ_FILTER_READ`"

#: ../../library/select.rst:530
msgid ""
"Takes a descriptor and returns whenever there is data available to read"
msgstr "获取描述符，并在有数据可读时返回"

#: ../../library/select.rst:533
msgid ":const:`KQ_FILTER_WRITE`"
msgstr ":const:`KQ_FILTER_WRITE`"

#: ../../library/select.rst:533
msgid ""
"Takes a descriptor and returns whenever there is data available to write"
msgstr "获取描述符，并在有数据可写时返回"

#: ../../library/select.rst:536
msgid ":const:`KQ_FILTER_AIO`"
msgstr ":const:`KQ_FILTER_AIO`"

#: ../../library/select.rst:536
msgid "AIO requests"
msgstr "AIO 请求"

#: ../../library/select.rst:538
msgid ":const:`KQ_FILTER_VNODE`"
msgstr ":const:`KQ_FILTER_VNODE`"

#: ../../library/select.rst:538
msgid ""
"Returns when one or more of the requested events watched in *fflag* occurs"
msgstr "当在 *fflag* 中监视的一个或多个请求事件发生时返回"

#: ../../library/select.rst:541
msgid ":const:`KQ_FILTER_PROC`"
msgstr ":const:`KQ_FILTER_PROC`"

#: ../../library/select.rst:541
msgid "Watch for events on a process id"
msgstr "监视进程ID上的事件"

#: ../../library/select.rst:543
msgid ":const:`KQ_FILTER_NETDEV`"
msgstr ":const:`KQ_FILTER_NETDEV`"

#: ../../library/select.rst:543
msgid "Watch for events on a network device [not available on macOS]"
msgstr "观察网络设备上的事件 [在 macOS 上不可用]"

#: ../../library/select.rst:546
msgid ":const:`KQ_FILTER_SIGNAL`"
msgstr ":const:`KQ_FILTER_SIGNAL`"

#: ../../library/select.rst:546
msgid "Returns whenever the watched signal is delivered to the process"
msgstr "每当监视的信号传递到进程时返回"

#: ../../library/select.rst:549
msgid ":const:`KQ_FILTER_TIMER`"
msgstr ":const:`KQ_FILTER_TIMER`"

#: ../../library/select.rst:549
msgid "Establishes an arbitrary timer"
msgstr "建立一个任意的计时器"

#: ../../library/select.rst:554
msgid "Filter action."
msgstr "筛选器操作。"

#: ../../library/select.rst:559
msgid ":const:`KQ_EV_ADD`"
msgstr ":const:`KQ_EV_ADD`"

#: ../../library/select.rst:559
msgid "Adds or modifies an event"
msgstr "添加或修改事件"

#: ../../library/select.rst:561
msgid ":const:`KQ_EV_DELETE`"
msgstr ":const:`KQ_EV_DELETE`"

#: ../../library/select.rst:561
msgid "Removes an event from the queue"
msgstr "从队列中删除事件"

#: ../../library/select.rst:563
msgid ":const:`KQ_EV_ENABLE`"
msgstr ":const:`KQ_EV_ENABLE`"

#: ../../library/select.rst:563
msgid "Permitscontrol() to returns the event"
msgstr "Permitscontrol() 返回事件"

#: ../../library/select.rst:565
msgid ":const:`KQ_EV_DISABLE`"
msgstr ":const:`KQ_EV_DISABLE`"

#: ../../library/select.rst:565
msgid "Disablesevent"
msgstr "禁用事件"

#: ../../library/select.rst:567
msgid ":const:`KQ_EV_ONESHOT`"
msgstr ":const:`KQ_EV_ONESHOT`"

#: ../../library/select.rst:567
msgid "Removes event after first occurrence"
msgstr "在第一次发生后删除事件"

#: ../../library/select.rst:569
msgid ":const:`KQ_EV_CLEAR`"
msgstr ":const:`KQ_EV_CLEAR`"

#: ../../library/select.rst:569
msgid "Reset the state after an event is retrieved"
msgstr "检索事件后重置状态"

#: ../../library/select.rst:571
msgid ":const:`KQ_EV_SYSFLAGS`"
msgstr ":const:`KQ_EV_SYSFLAGS`"

#: ../../library/select.rst:571 ../../library/select.rst:573
msgid "internal event"
msgstr "内部事件"

#: ../../library/select.rst:573
msgid ":const:`KQ_EV_FLAG1`"
msgstr ":const:`KQ_EV_FLAG1`"

#: ../../library/select.rst:575
msgid ":const:`KQ_EV_EOF`"
msgstr ":const:`KQ_EV_EOF`"

#: ../../library/select.rst:575
msgid "Filter specific EOF condition"
msgstr "筛选特定EOF条件"

#: ../../library/select.rst:577
msgid ":const:`KQ_EV_ERROR`"
msgstr ":const:`KQ_EV_ERROR`"

#: ../../library/select.rst:577
msgid "See return values"
msgstr "请参阅返回值"

#: ../../library/select.rst:583
msgid "Filter specific flags."
msgstr "筛选特定标志。"

#: ../../library/select.rst:585
msgid ":const:`KQ_FILTER_READ` and  :const:`KQ_FILTER_WRITE` filter flags:"
msgstr ":const:`KQ_FILTER_READ` 和  :const:`KQ_FILTER_WRITE` 筛选标志："

#: ../../library/select.rst:590
msgid ":const:`KQ_NOTE_LOWAT`"
msgstr ":const:`KQ_NOTE_LOWAT`"

#: ../../library/select.rst:590
msgid "low water mark of a socket buffer"
msgstr "套接字缓冲区的低水线"

#: ../../library/select.rst:593
msgid ":const:`KQ_FILTER_VNODE` filter flags:"
msgstr ":const:`KQ_FILTER_VNODE` 筛选标志："

#: ../../library/select.rst:598
msgid ":const:`KQ_NOTE_DELETE`"
msgstr ":const:`KQ_NOTE_DELETE`"

#: ../../library/select.rst:598
msgid "*unlink()* was called"
msgstr "已调用 *unlink()*"

#: ../../library/select.rst:600
msgid ":const:`KQ_NOTE_WRITE`"
msgstr ":const:`KQ_NOTE_WRITE`"

#: ../../library/select.rst:600
msgid "a write occurred"
msgstr "发生写入"

#: ../../library/select.rst:602
msgid ":const:`KQ_NOTE_EXTEND`"
msgstr ":const:`KQ_NOTE_EXTEND`"

#: ../../library/select.rst:602
msgid "the file was extended"
msgstr "文件已扩展"

#: ../../library/select.rst:604
msgid ":const:`KQ_NOTE_ATTRIB`"
msgstr ":const:`KQ_NOTE_ATTRIB`"

#: ../../library/select.rst:604
msgid "an attribute was changed"
msgstr "属性已更改"

#: ../../library/select.rst:606
msgid ":const:`KQ_NOTE_LINK`"
msgstr ":const:`KQ_NOTE_LINK`"

#: ../../library/select.rst:606
msgid "the link count has changed"
msgstr "链接计数已更改"

#: ../../library/select.rst:608
msgid ":const:`KQ_NOTE_RENAME`"
msgstr ":const:`KQ_NOTE_RENAME`"

#: ../../library/select.rst:608
msgid "the file was renamed"
msgstr "文件已重命名"

#: ../../library/select.rst:610
msgid ":const:`KQ_NOTE_REVOKE`"
msgstr ":const:`KQ_NOTE_REVOKE`"

#: ../../library/select.rst:610
msgid "access to the file was revoked"
msgstr "对文件的访问权限已被撤销"

#: ../../library/select.rst:613
msgid ":const:`KQ_FILTER_PROC` filter flags:"
msgstr ":const:`KQ_FILTER_PROC` filter flags:"

#: ../../library/select.rst:618
msgid ":const:`KQ_NOTE_EXIT`"
msgstr ":const:`KQ_NOTE_EXIT`"

#: ../../library/select.rst:618
msgid "the process has exited"
msgstr "进程已退出"

#: ../../library/select.rst:620
msgid ":const:`KQ_NOTE_FORK`"
msgstr ":const:`KQ_NOTE_FORK`"

#: ../../library/select.rst:620
msgid "the process has called *fork()*"
msgstr "该进程调用了 *fork()*"

#: ../../library/select.rst:622
msgid ":const:`KQ_NOTE_EXEC`"
msgstr ":const:`KQ_NOTE_EXEC`"

#: ../../library/select.rst:622
msgid "the process has executed a new process"
msgstr "进程已执行新进程"

#: ../../library/select.rst:624
msgid ":const:`KQ_NOTE_PCTRLMASK`"
msgstr ":const:`KQ_NOTE_PCTRLMASK`"

#: ../../library/select.rst:624 ../../library/select.rst:626
msgid "internal filter flag"
msgstr "内部筛选器标志"

#: ../../library/select.rst:626
msgid ":const:`KQ_NOTE_PDATAMASK`"
msgstr ":const:`KQ_NOTE_PDATAMASK`"

#: ../../library/select.rst:628
msgid ":const:`KQ_NOTE_TRACK`"
msgstr ":const:`KQ_NOTE_TRACK`"

#: ../../library/select.rst:628
msgid "follow a process across *fork()*"
msgstr "跨  *fork()* 执行进程"

#: ../../library/select.rst:630
msgid ":const:`KQ_NOTE_CHILD`"
msgstr ":const:`KQ_NOTE_CHILD`"

#: ../../library/select.rst:630
msgid "returned on the child process for *NOTE_TRACK*"
msgstr "在  *NOTE_TRACK* 的子进程上返回"

#: ../../library/select.rst:633
msgid ":const:`KQ_NOTE_TRACKERR`"
msgstr ":const:`KQ_NOTE_TRACKERR`"

#: ../../library/select.rst:633
msgid "unable to attach to a child"
msgstr "无法附加到子对象"

#: ../../library/select.rst:636
msgid ":const:`KQ_FILTER_NETDEV` filter flags (not available on macOS):"
msgstr ":const:`KQ_FILTER_NETDEV` 过滤器旗标 (在 macOS 上不可用):"

#: ../../library/select.rst:641
msgid ":const:`KQ_NOTE_LINKUP`"
msgstr ":const:`KQ_NOTE_LINKUP`"

#: ../../library/select.rst:641
msgid "link is up"
msgstr "链接已建立"

#: ../../library/select.rst:643
msgid ":const:`KQ_NOTE_LINKDOWN`"
msgstr ":const:`KQ_NOTE_LINKDOWN`"

#: ../../library/select.rst:643
msgid "link is down"
msgstr "链接已断开"

#: ../../library/select.rst:645
msgid ":const:`KQ_NOTE_LINKINV`"
msgstr ":const:`KQ_NOTE_LINKINV`"

#: ../../library/select.rst:645
msgid "link state is invalid"
msgstr "链接状态无效"

#: ../../library/select.rst:651
msgid "Filter specific data."
msgstr "筛选特定数据。"

#: ../../library/select.rst:656
msgid "User defined value."
msgstr "用户自定义值。"

#: ../../library/select.rst:141
msgid "socket() (in module socket)"
msgstr "socket() (在 socket 模块中)"

#: ../../library/select.rst:141
msgid "popen() (in module os)"
msgstr "popen() (在 os 模块中)"

#: ../../library/select.rst:154
msgid "WinSock"
msgstr "WinSock"
