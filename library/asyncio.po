# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Alpha Du <alphanow@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio.rst:91
msgid "High-level APIs"
msgstr "高层级 API"

#: ../../library/asyncio.rst:104
msgid "Low-level APIs"
msgstr "低层级 API"

#: ../../library/asyncio.rst:115
msgid "Guides and Tutorials"
msgstr "指南与教程"

#: ../../library/asyncio.rst:2
msgid ":mod:`!asyncio` --- Asynchronous I/O"
msgstr ":mod:`!asyncio` --- 异步 I/O"

#: ../../library/asyncio.rst-1
msgid "Hello World!"
msgstr "Hello World!"

#: ../../library/asyncio.rst:13
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    print('Hello ...')\n"
"    await asyncio.sleep(1)\n"
"    print('... World!')\n"
"\n"
"asyncio.run(main())"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    print('Hello ...')\n"
"    await asyncio.sleep(1)\n"
"    print('... World!')\n"
"\n"
"asyncio.run(main())"

#: ../../library/asyncio.rst:22
msgid ""
"asyncio is a library to write **concurrent** code using the **async/await** "
"syntax."
msgstr "asyncio 是用来编写 **并发** 代码的库，使用 **async/await** 语法。"

#: ../../library/asyncio.rst:25
msgid ""
"asyncio is used as a foundation for multiple Python asynchronous frameworks "
"that provide high-performance network and web-servers, database connection "
"libraries, distributed task queues, etc."
msgstr "asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。"

#: ../../library/asyncio.rst:29
msgid ""
"asyncio is often a perfect fit for IO-bound and high-level **structured** "
"network code."
msgstr "asyncio 往往是构建 IO 密集型和高层级 **结构化** 网络代码的最佳选择。"

#: ../../library/asyncio.rst:32
msgid "asyncio provides a set of **high-level** APIs to:"
msgstr "asyncio 提供一组 **高层级** API 用于:"

#: ../../library/asyncio.rst:34
msgid ""
":ref:`run Python coroutines <coroutine>` concurrently and have full control "
"over their execution;"
msgstr "并发地 :ref:`运行 Python 协程 <coroutine>` 并对其执行过程实现完全控制;"

#: ../../library/asyncio.rst:37
msgid "perform :ref:`network IO and IPC <asyncio-streams>`;"
msgstr "执行 :ref:`网络 IO 和 IPC <asyncio-streams>`;"

#: ../../library/asyncio.rst:39
msgid "control :ref:`subprocesses <asyncio-subprocess>`;"
msgstr "控制 :ref:`子进程 <asyncio-subprocess>`;"

#: ../../library/asyncio.rst:41
msgid "distribute tasks via :ref:`queues <asyncio-queues>`;"
msgstr "通过 :ref:`队列 <asyncio-queues>` 实现分布式任务;"

#: ../../library/asyncio.rst:43
msgid ":ref:`synchronize <asyncio-sync>` concurrent code;"
msgstr ":ref:`同步 <asyncio-sync>` 并发代码;"

#: ../../library/asyncio.rst:45
msgid ""
"Additionally, there are **low-level** APIs for *library and framework "
"developers* to:"
msgstr "此外，还有一些 **低层级** API 以支持 *库和框架的开发者* 实现:"

#: ../../library/asyncio.rst:48
msgid ""
"create and manage :ref:`event loops <asyncio-event-loop>`, which provide "
"asynchronous APIs for :ref:`networking <loop_create_server>`, running "
":ref:`subprocesses <loop_subprocess_exec>`, handling :ref:`OS signals "
"<loop_add_signal_handler>`, etc;"
msgstr ""
"创建和管理 :ref:`事件循环 <asyncio-event-loop>`，它提供用于 :ref:`连接网络 "
"<loop_create_server>`, 运行 :ref:`子进程 <loop_subprocess_exec>`, 处理 :ref:`OS 信号 "
"<loop_add_signal_handler>` 等功能的异步 API；"

#: ../../library/asyncio.rst:53
msgid ""
"implement efficient protocols using :ref:`transports <asyncio-transports-"
"protocols>`;"
msgstr "使用 :ref:`transports <asyncio-transports-protocols>` 实现高效率协议;"

#: ../../library/asyncio.rst:56
msgid ""
":ref:`bridge <asyncio-futures>` callback-based libraries and code with "
"async/await syntax."
msgstr "通过 async/await 语法 :ref:`桥接 <asyncio-futures>` 基于回调的库和代码。"

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Availability"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See "
":ref:`wasm-availability` for more information."
msgstr "此模块在 WebAssembly 平台上无效或不可用。 请参阅 :ref:`wasm-availability` 了解详情。"

#: ../../library/asyncio.rst:64
msgid "asyncio REPL"
msgstr "asyncio REPL"

#: ../../library/asyncio.rst:65
msgid ""
"You can experiment with an ``asyncio`` concurrent context in the "
":term:`REPL`:"
msgstr "你可以在 :term:`REPL` 中尝试使用 ``asyncio`` 并发上下文："

#: ../../library/asyncio.rst:67
msgid ""
"$ python -m asyncio\n"
"asyncio REPL ...\n"
"Use \"await\" directly instead of \"asyncio.run()\".\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n"
">>> import asyncio\n"
">>> await asyncio.sleep(10, result='hello')\n"
"'hello'"
msgstr ""
"$ python -m asyncio\n"
"asyncio REPL ...\n"
"Use \"await\" directly instead of \"asyncio.run()\".\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n"
">>> import asyncio\n"
">>> await asyncio.sleep(10, result='hello')\n"
"'hello'"

#: ../../library/asyncio.rst:77
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_stdin`` with no "
"arguments."
msgstr "引发一个不带参数的 :ref:`审计事件 <auditing>` ``cpython.run_stdin``。"

#: ../../library/asyncio.rst:79
msgid "(also 3.11.10, 3.10.15, 3.9.20, and 3.8.20) Emits audit events."
msgstr "（还有 3.11.10, 3.10.15, 3.9.20 和 3.8.20） 将发出审计事件。"

#: ../../library/asyncio.rst:82
msgid ""
"Uses PyREPL if possible, in which case :envvar:`PYTHONSTARTUP` is also "
"executed. Emits audit events."
msgstr "如果无法做到则使用 PyREPL，在此情况下 :envvar:`PYTHONSTARTUP` 也会被执行。 将发出审计事件。"

#: ../../library/asyncio.rst:90
msgid "Reference"
msgstr "参考"

#: ../../library/asyncio.rst:124
msgid "The source code for asyncio can be found in :source:`Lib/asyncio/`."
msgstr "asyncio 的源代码可以在 :source:`Lib/asyncio/` 中找到。"
