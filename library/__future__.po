# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/__future__.rst:2
msgid ":mod:`__future__` --- Future statement definitions"
msgstr ":mod:`__future__` --- Future 语句定义"

#: ../../library/__future__.rst:7
msgid "**Source code:** :source:`Lib/__future__.py`"
msgstr "**源代码：** :source:`Lib/__future__.py`"

#: ../../library/__future__.rst:11
msgid ":mod:`__future__` is a real module, and serves three purposes:"
msgstr ":mod:`__future__` 是一个真正的模块，这主要有 3 个原因："

#: ../../library/__future__.rst:13
msgid ""
"To avoid confusing existing tools that analyze import statements and expect "
"to find the modules they're importing."
msgstr "避免混淆已有的分析 import 语句并查找 import 的模块的工具。"

#: ../../library/__future__.rst:16
msgid ""
"To ensure that :ref:`future statements <future>` run under releases prior to"
" 2.1 at least yield runtime exceptions (the import of :mod:`__future__` will"
" fail, because there was no module of that name prior to 2.1)."
msgstr ""
"确保 :ref:`future 语句 <future>` 在 2.1 之前的版本运行时至少能抛出 runtime 异常（import "
":mod:`__future__` 会失败，因为 2.1 版本之前没有这个模块）。"

#: ../../library/__future__.rst:20
msgid ""
"To document when incompatible changes were introduced, and when they will be"
" --- or were --- made mandatory.  This is a form of executable "
"documentation, and can be inspected programmatically via importing "
":mod:`__future__` and examining its contents."
msgstr ""
"当引入不兼容的修改时，可以记录其引入的时间以及强制使用的时间。这是一种可执行的文档，并且可以通过 import :mod:`__future__` "
"来做程序性的检查。"

#: ../../library/__future__.rst:25
msgid "Each statement in :file:`__future__.py` is of the form::"
msgstr ":file:`__future__.py` 中的每一条语句都是以下格式的："

#: ../../library/__future__.rst:31
msgid ""
"where, normally, *OptionalRelease* is less than *MandatoryRelease*, and both"
" are 5-tuples of the same form as :data:`sys.version_info`::"
msgstr ""
"通常 *OptionalRelease* 要比 *MandatoryRelease* 小，并且都是和 :data:`sys.version_info` "
"格式一致的 5 元素元组。"

#: ../../library/__future__.rst:41
msgid ""
"*OptionalRelease* records the first release in which the feature was "
"accepted."
msgstr "*OptionalRelease* 记录了一个特性首次发布时的 Python 版本。"

#: ../../library/__future__.rst:43
msgid ""
"In the case of a *MandatoryRelease* that has not yet occurred, "
"*MandatoryRelease* predicts the release in which the feature will become "
"part of the language."
msgstr "在 *MandatoryRelases* 还没有发布时，*MandatoryRelease* 表示该特性会变成语言的一部分的预测时间。"

#: ../../library/__future__.rst:47
msgid ""
"Else *MandatoryRelease* records when the feature became part of the "
"language; in releases at or after that, modules no longer need a future "
"statement to use the feature in question, but may continue to use such "
"imports."
msgstr ""
"其他情况下，*MandatoryRelease* 用来记录这个特性是何时成为语言的一部分的。从该版本往后，使用该特性将不需要 future "
"语句，不过很多人还是会加上对应的 import。"

#: ../../library/__future__.rst:51
msgid ""
"*MandatoryRelease* may also be ``None``, meaning that a planned feature got "
"dropped."
msgstr "*MandatoryRelease* 也可能是 ``None``, 表示这个特性已经被撤销。"

#: ../../library/__future__.rst:54
msgid ""
"Instances of class :class:`_Feature` have two corresponding methods, "
":meth:`getOptionalRelease` and :meth:`getMandatoryRelease`."
msgstr ""
":class:`_Feature` 类的实例有两个对应的方法，:meth:`getOptionalRelease` 和 "
":meth:`getMandatoryRelease`。"

#: ../../library/__future__.rst:57
msgid ""
"*CompilerFlag* is the (bitfield) flag that should be passed in the fourth "
"argument to the built-in function :func:`compile` to enable the feature in "
"dynamically compiled code.  This flag is stored in the :attr:`compiler_flag`"
" attribute on :class:`_Feature` instances."
msgstr ""
"*CompilerFlag* 是一个（位）标记，对于动态编译的代码，需要将这个标记作为第四个参数传入内建函数 :func:`compile` "
"中以开启对应的特性。这个标记存储在 :class:`_Feature` 类实例的 :attr:`compiler_flag` 属性中。"

#: ../../library/__future__.rst:62
msgid ""
"No feature description will ever be deleted from :mod:`__future__`. Since "
"its introduction in Python 2.1 the following features have found their way "
"into the language using this mechanism:"
msgstr ":mod:`__future__` 中不会删除特性的描述。从 Python 2.1 中首次加入以来，通过这种方式引入了以下特性："

#: ../../library/__future__.rst:67
msgid "feature"
msgstr "特性"

#: ../../library/__future__.rst:67
msgid "optional in"
msgstr "可选版本"

#: ../../library/__future__.rst:67
msgid "mandatory in"
msgstr "强制加入版本"

#: ../../library/__future__.rst:67
msgid "effect"
msgstr "效果"

#: ../../library/__future__.rst:69
msgid "nested_scopes"
msgstr "nested_scopes"

#: ../../library/__future__.rst:69
msgid "2.1.0b1"
msgstr "2.1.0b1"

#: ../../library/__future__.rst:69
msgid "2.2"
msgstr "2.2"

#: ../../library/__future__.rst:69
msgid ":pep:`227`: *Statically Nested Scopes*"
msgstr ":pep:`227`: *静态嵌套作用域*"

#: ../../library/__future__.rst:72
msgid "generators"
msgstr "generators"

#: ../../library/__future__.rst:72
msgid "2.2.0a1"
msgstr "2.2.0a1"

#: ../../library/__future__.rst:72
msgid "2.3"
msgstr "2.3"

#: ../../library/__future__.rst:72
msgid ":pep:`255`: *Simple Generators*"
msgstr ":pep:`255`: *简单生成器*"

#: ../../library/__future__.rst:75
msgid "division"
msgstr "division"

#: ../../library/__future__.rst:75
msgid "2.2.0a2"
msgstr "2.2.0a2"

#: ../../library/__future__.rst:75 ../../library/__future__.rst:78
#: ../../library/__future__.rst:84 ../../library/__future__.rst:87
msgid "3.0"
msgstr "3.0"

#: ../../library/__future__.rst:75
msgid ":pep:`238`: *Changing the Division Operator*"
msgstr ":pep:`238`: *修改除法运算符*"

#: ../../library/__future__.rst:78
msgid "absolute_import"
msgstr "absolute_import"

#: ../../library/__future__.rst:78 ../../library/__future__.rst:81
msgid "2.5.0a1"
msgstr "2.5.0a1"

#: ../../library/__future__.rst:78
msgid ":pep:`328`: *Imports: Multi-Line and Absolute/Relative*"
msgstr ":pep:`328`: *导入：多行与绝对/相对*"

#: ../../library/__future__.rst:81
msgid "with_statement"
msgstr "with_statement"

#: ../../library/__future__.rst:81
msgid "2.6"
msgstr "2.6"

#: ../../library/__future__.rst:81
msgid ":pep:`343`: *The \"with\" Statement*"
msgstr ":pep:`343`: * \"with\" 语句*"

#: ../../library/__future__.rst:84
msgid "print_function"
msgstr "print_function"

#: ../../library/__future__.rst:84 ../../library/__future__.rst:87
msgid "2.6.0a2"
msgstr "2.6.0a2"

#: ../../library/__future__.rst:84
msgid ":pep:`3105`: *Make print a function*"
msgstr ":pep:`3105`: *print 改为函数*"

#: ../../library/__future__.rst:87
msgid "unicode_literals"
msgstr "unicode_literals"

#: ../../library/__future__.rst:87
msgid ":pep:`3112`: *Bytes literals in Python 3000*"
msgstr ":pep:`3112`: *Python 3000 中的字节字面值*"

#: ../../library/__future__.rst:90
msgid "generator_stop"
msgstr "generator_stop"

#: ../../library/__future__.rst:90
msgid "3.5.0b1"
msgstr "3.5.0b1"

#: ../../library/__future__.rst:90
msgid "3.7"
msgstr "3.7"

#: ../../library/__future__.rst:90
msgid ":pep:`479`: *StopIteration handling inside generators*"
msgstr ":pep:`479`: *在生成器中处理 StopIteration*"

#: ../../library/__future__.rst:93
msgid "annotations"
msgstr "annotations"

#: ../../library/__future__.rst:93
msgid "3.7.0b1"
msgstr "3.7.0b1"

#: ../../library/__future__.rst:93
msgid "TBD [1]_"
msgstr "TBD [1]_"

#: ../../library/__future__.rst:93
msgid ":pep:`563`: *Postponed evaluation of annotations*"
msgstr ":pep:`563`: *Postponed evaluation of annotations*"

#: ../../library/__future__.rst:100
msgid ""
"``from __future__ import annotations`` was previously scheduled to become "
"mandatory in Python 3.10, but the Python Steering Council twice decided to "
"delay the change (`announcement for Python 3.10 "
"<https://mail.python.org/archives/list/python-"
"dev@python.org/message/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/>`__; `announcement "
"for Python 3.11 <https://mail.python.org/archives/list/python-"
"dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__). No final "
"decision has been made yet. See also :pep:`563` and :pep:`649`."
msgstr ""
"先前计划在 Python 3.10 中强制使用 ``from __future__ import annotations`` "
"，但Python指导委员会两次决定推迟这一改变（ `Python 3.10 的公告 "
"<https://mail.python.org/archives/list/python-"
"dev@python.org/message/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/>`__ ； `Python 3.11 "
"的公告 <https://mail.python.org/archives/list/python-"
"dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__ "
"）。目前还没有做出最终决定。参见 :pep:`563` 和 :pep:`649` 。"

#: ../../library/__future__.rst:110
msgid ":ref:`future`"
msgstr ":ref:`future`"

#: ../../library/__future__.rst:111
msgid "How the compiler treats future imports."
msgstr "编译器怎样处理 future import。"
