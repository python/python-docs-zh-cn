# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/rlcompleter.rst:2
msgid ":mod:`!rlcompleter` --- Completion function for GNU readline"
msgstr ":mod:`!rlcompleter` --- 用于 GNU readline 的补全函数"

#: ../../library/rlcompleter.rst:9
msgid "**Source code:** :source:`Lib/rlcompleter.py`"
msgstr "**源代码:** :source:`Lib/rlcompleter.py`"

#: ../../library/rlcompleter.rst:13
msgid ""
"The :mod:`!rlcompleter` module defines a completion function suitable to be "
"passed to :func:`~readline.set_completer` in the :mod:`readline` module."
msgstr ""
":mod:`!rlcompleter` 模块定义了一个适合被传给 :mod:`readline` 模块中 "
":func:`~readline.set_completer` 的补全函数。"

#: ../../library/rlcompleter.rst:16
msgid ""
"When this module is imported on a Unix platform with the :mod:`readline` "
"module available, an instance of the :class:`Completer` class is "
"automatically created and its :meth:`~Completer.complete` method is set as "
"the :ref:`readline completer <readline-completion>`. The method provides "
"completion of valid Python :ref:`identifiers and keywords <identifiers>`."
msgstr ""
"当此模块在具有 :mod:`readline` 模块的 Unix 平台上被导入时，会自动创建一个 :class:`Completer` 实例并将其 "
":meth:`~Completer.complete` 方法设为 :ref:`readline completer <readline-"
"completion>`。 该方法提供了对有效的 Python :ref:`标识符和关键字 <identifiers>` 的补全功能。"

#: ../../library/rlcompleter.rst:22
msgid "Example::"
msgstr "示例::"

#: ../../library/rlcompleter.rst:24
msgid ""
">>> import rlcompleter\n"
">>> import readline\n"
">>> readline.parse_and_bind(\"tab: complete\")\n"
">>> readline. <TAB PRESSED>\n"
"readline.__doc__          readline.get_line_buffer(  readline.read_init_file(\n"
"readline.__file__         readline.insert_text(      readline.set_completer(\n"
"readline.__name__         readline.parse_and_bind(\n"
">>> readline."
msgstr ""
">>> import rlcompleter\n"
">>> import readline\n"
">>> readline.parse_and_bind(\"tab: complete\")\n"
">>> readline. <TAB PRESSED>\n"
"readline.__doc__          readline.get_line_buffer(  readline.read_init_file(\n"
"readline.__file__         readline.insert_text(      readline.set_completer(\n"
"readline.__name__         readline.parse_and_bind(\n"
">>> readline."

#: ../../library/rlcompleter.rst:33
msgid ""
"The :mod:`!rlcompleter` module is designed for use with Python's "
":ref:`interactive mode <tut-interactive>`.  Unless Python is run with the "
":option:`-S` option, the module is automatically imported and configured "
"(see :ref:`rlcompleter-config`)."
msgstr ""
":mod:`!rlcompleter` 模块是为 Python 的 :ref:`交互模式 <tut-interactive>` 而设计的。 除非 "
"Python 是附带 :option:`-S` 选项运行的，这个模块总是会被自动地导入并配置 (参见 :ref:`rlcompleter-"
"config`)。"

#: ../../library/rlcompleter.rst:38
msgid ""
"On platforms without :mod:`readline`, the :class:`Completer` class defined "
"by this module can still be used for custom purposes."
msgstr "在没有 :mod:`readline` 的平台, 此模块定义的 :class:`Completer` 类仍然可以用于自定义行为."

#: ../../library/rlcompleter.rst:46
msgid "Completer objects have the following method:"
msgstr "Completer 对象具有以下方法："

#: ../../library/rlcompleter.rst:50
msgid "Return the next possible completion for *text*."
msgstr "返回针对 *text* 的下一个可能的补全项。"

#: ../../library/rlcompleter.rst:52
msgid ""
"When called by the :mod:`readline` module, this method is called "
"successively with ``state == 0, 1, 2, ...`` until the method returns "
"``None``."
msgstr ""
"当被 :mod:`readline` 模块调用时，此方法将被连续调用并附带 ``state == 0, 1, 2, ...`` 直到该方法返回 "
"``None``。"

#: ../../library/rlcompleter.rst:56
msgid ""
"If called for *text* that doesn't include a period character (``'.'``), it "
"will complete from names currently defined in :mod:`__main__`, "
":mod:`builtins` and keywords (as defined by the :mod:`keyword` module)."
msgstr ""
"如果指定的 *text* 不包含句点字符 (``'.'``)，它将根据当前 :mod:`__main__`, :mod:`builtins` "
"和保留关键字（定义于 :mod:`keyword` 模块）所定义的名称进行补全。"

#: ../../library/rlcompleter.rst:60
msgid ""
"If called for a dotted name, it will try to evaluate anything without "
"obvious side-effects (functions will not be evaluated, but it can generate "
"calls to :meth:`~object.__getattr__`) up to the last part, and find matches "
"for the rest via the :func:`dir` function.  Any exception raised during the "
"evaluation of the expression is caught, silenced and :const:`None` is "
"returned."
msgstr ""
"如果为带有点号的名称执行调用，它将尝试尽量求值直到最后一部分为止而产生附带影响（函数不会被求值，但它可以生成对 "
":meth:`~object.__getattr__` 的调用），并通过 :func:`dir` 函数来匹配剩余部分。 "
"在对表达式求值期间引发的任何异常都会被捕获、静默处理并返回 :const:`None`。"
