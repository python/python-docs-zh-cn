# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sysconfig.rst:2
msgid ""
":mod:`!sysconfig` --- Provide access to Python's configuration information"
msgstr ":mod:`!sysconfig` --- 提供对 Python 配置信息的访问"

#: ../../library/sysconfig.rst:12
msgid "**Source code:** :source:`Lib/sysconfig`"
msgstr "**源代码:** :source:`Lib/sysconfig`"

#: ../../library/sysconfig.rst:19
msgid ""
"The :mod:`sysconfig` module provides access to Python's configuration "
"information like the list of installation paths and the configuration "
"variables relevant for the current platform."
msgstr ":mod:`sysconfig` 模块提供了对 Python 配置信息的访问支持，比如安装路径列表和有关当前平台的配置变量。"

#: ../../library/sysconfig.rst:25
msgid "Configuration variables"
msgstr "配置变量"

#: ../../library/sysconfig.rst:27
msgid ""
"A Python distribution contains a :file:`Makefile` and a :file:`pyconfig.h` "
"header file that are necessary to build both the Python binary itself and "
"third-party C extensions compiled using ``setuptools``."
msgstr ""
"一个包含 :file:`Makefile` 和 :file:`pyconfig.h` 头文件的 Python 分发版，这是构建 Python "
"二进制文件本身和用 ``setuptools`` 编译的第三方 C 扩展所必需的。"

#: ../../library/sysconfig.rst:31
msgid ""
":mod:`sysconfig` puts all variables found in these files in a dictionary "
"that can be accessed using :func:`get_config_vars` or "
":func:`get_config_var`."
msgstr ""
":mod:`sysconfig` 将这些文件中的所有变量放在一个字典对象中，可用 :func:`get_config_vars` 或 "
":func:`get_config_var` 访问。"

#: ../../library/sysconfig.rst:34
msgid "Notice that on Windows, it's a much smaller set."
msgstr "请注意在 Windows 上，这是一个小得多的集合。"

#: ../../library/sysconfig.rst:38
msgid ""
"With no arguments, return a dictionary of all configuration variables "
"relevant for the current platform."
msgstr "不带参数时，返回一个与当前平台相关的所有配置变量的字典。"

#: ../../library/sysconfig.rst:41
msgid ""
"With arguments, return a list of values that result from looking up each "
"argument in the configuration variable dictionary."
msgstr "带参数时，返回一个由在配置变量字典中查找每个参数的结果的值组成的列表。"

#: ../../library/sysconfig.rst:44
msgid "For each argument, if the value is not found, return ``None``."
msgstr "对于每个参数，如果未找到值，则返回 ``None``。"

#: ../../library/sysconfig.rst:49
msgid ""
"Return the value of a single variable *name*. Equivalent to "
"``get_config_vars().get(name)``."
msgstr "返回单个变量 *name* 的值。 等价于 ``get_config_vars().get(name)``。"

#: ../../library/sysconfig.rst:52
msgid "If *name* is not found, return ``None``."
msgstr "如果未找到 *name*，则返回 ``None``。"

#: ../../library/sysconfig.rst:54
msgid "Example of usage::"
msgstr "用法示例::"

#: ../../library/sysconfig.rst:56
msgid ""
">>> import sysconfig\n"
">>> sysconfig.get_config_var('Py_ENABLE_SHARED')\n"
"0\n"
">>> sysconfig.get_config_var('LIBDIR')\n"
"'/usr/local/lib'\n"
">>> sysconfig.get_config_vars('AR', 'CXX')\n"
"['ar', 'g++']"
msgstr ""
">>> import sysconfig\n"
">>> sysconfig.get_config_var('Py_ENABLE_SHARED')\n"
"0\n"
">>> sysconfig.get_config_var('LIBDIR')\n"
"'/usr/local/lib'\n"
">>> sysconfig.get_config_vars('AR', 'CXX')\n"
"['ar', 'g++']"

#: ../../library/sysconfig.rst:68
msgid "Installation paths"
msgstr "安装路径"

#: ../../library/sysconfig.rst:70
msgid ""
"Python uses an installation scheme that differs depending on the platform "
"and on the installation options.  These schemes are stored in "
":mod:`sysconfig` under unique identifiers based on the value returned by "
":const:`os.name`. The schemes are used by package installers to determine "
"where to copy files to."
msgstr ""
"Python 会使用根据平台和安装选项区别处理的安装方案。 这些方案被存储在 :mod:`sysconfig` 中基于 :const:`os.name`"
" 返回的值来确定的唯一标识符下。 软件包安装程序使用这些方案来确定将文件复制到何处。"

#: ../../library/sysconfig.rst:75
msgid "Python currently supports nine schemes:"
msgstr "Python 目前支持九种方案:"

#: ../../library/sysconfig.rst:77
msgid ""
"*posix_prefix*: scheme for POSIX platforms like Linux or macOS.  This is the"
" default scheme used when Python or a component is installed."
msgstr ""
"*posix_prefix*: 针对 POSIX 平台如 Linux 或 macOS 的方案。 这是在安装 Python 或者组件时的默认方案。"

#: ../../library/sysconfig.rst:79
msgid ""
"*posix_home*: scheme for POSIX platforms, when the *home* option is used. "
"This scheme defines paths located under a specific home prefix."
msgstr "*posix_home*: 当使用 *home* 选项时，针对 POSIX 平台的方案。 该方案定义了位于特定 home 前缀下的路径。"

#: ../../library/sysconfig.rst:81
msgid ""
"*posix_user*: scheme for POSIX platforms, when the *user* option is used. "
"This scheme defines paths located under the user's home directory "
"(:const:`site.USER_BASE`)."
msgstr ""
"*posix_user*: 当使用 *user* 选项时，针对 POSIX 平台的方案。 该方案定义了位于用户主目录 "
"(:const:`site.USER_BASE`) 下的路径。"

#: ../../library/sysconfig.rst:84
msgid ""
"*posix_venv*: scheme for :mod:`Python virtual environments <venv>` on POSIX "
"platforms; by default it is the same as *posix_prefix*."
msgstr ""
"*posix_venv*: 针对 POSIX 平台上 :mod:`Python 虚拟环境 <venv>` 的方案；在默认情况下与 "
"*posix_prefix* 相同。"

#: ../../library/sysconfig.rst:86
msgid ""
"*nt*: scheme for Windows. This is the default scheme used when Python or a "
"component is installed."
msgstr "*nt*: 针对 Windows 的方案。 这是在安装 Python 或其组件时的默认方案。"

#: ../../library/sysconfig.rst:88
msgid "*nt_user*: scheme for Windows, when the *user* option is used."
msgstr "*nt_user*: 针对 Windows,当使用了 *user* 选项时的方案。"

#: ../../library/sysconfig.rst:89
msgid ""
"*nt_venv*: scheme for :mod:`Python virtual environments <venv>` on Windows; "
"by default it is the same as *nt*."
msgstr ""
"*nt_venv*: 针对 Windows 上 :mod:`Python 虚拟环境 <venv>` 的方案；在默认情况下与 *nt* 相同。"

#: ../../library/sysconfig.rst:91
msgid ""
"*venv*: a scheme with values from either *posix_venv* or *nt_venv* depending"
" on the platform Python runs on."
msgstr "*venv*: 根据 Python 运行所在平台的不同来设置 *posix_venv* 或 *nt_venv* 的值的方案。"

#: ../../library/sysconfig.rst:93
msgid ""
"*osx_framework_user*: scheme for macOS, when the *user* option is used."
msgstr "*osx_framework_user*: 针对 macOS，当使用了 *user* 选项时的方案。"

#: ../../library/sysconfig.rst:95
msgid ""
"Each scheme is itself composed of a series of paths and each path has a "
"unique identifier.  Python currently uses eight paths:"
msgstr "每个方案本身由一系列路径组成并且每个路径都有唯一的标识符。 Python 目前使用了八个路径:"

#: ../../library/sysconfig.rst:98
msgid ""
"*stdlib*: directory containing the standard Python library files that are "
"not platform-specific."
msgstr "*stdlib*: 包含非平台专属的标准 Python 库文件的目录。"

#: ../../library/sysconfig.rst:100
msgid ""
"*platstdlib*: directory containing the standard Python library files that "
"are platform-specific."
msgstr "*platstdlib*: 包含平台专属的标准 Python 库文件的目录。"

#: ../../library/sysconfig.rst:102
msgid "*platlib*: directory for site-specific, platform-specific files."
msgstr "*platlib*: 用于站点专属、平台专属的文件的目录。"

#: ../../library/sysconfig.rst:103
msgid ""
"*purelib*: directory for site-specific, non-platform-specific files ('pure' "
"Python)."
msgstr "*purelib*: 用于站点专属、非平台专属的文件（‘纯’ Python）的目录。"

#: ../../library/sysconfig.rst:104
msgid ""
"*include*: directory for non-platform-specific header files for the Python "
"C-API."
msgstr "*include*: 针对用于 Python C-API 的非平台专属头文件的目录。"

#: ../../library/sysconfig.rst:106
msgid ""
"*platinclude*: directory for platform-specific header files for the Python "
"C-API."
msgstr "*platinclude*: 针对用于 Python C-API 的平台专属头文件的目录。"

#: ../../library/sysconfig.rst:108
msgid "*scripts*: directory for script files."
msgstr "*scripts*: 用于脚本文件的目录。"

#: ../../library/sysconfig.rst:109
msgid "*data*: directory for data files."
msgstr "*data*: 用于数据文件的目录。"

#: ../../library/sysconfig.rst:115
msgid "User scheme"
msgstr "用户方案"

#: ../../library/sysconfig.rst:117
msgid ""
"This scheme is designed to be the most convenient solution for users that "
"don't have write permission to the global site-packages directory or don't "
"want to install into it."
msgstr "此方案被设计为针对没有全局 site-packages 目录写入权限或不想安装到该目录的用户的最便捷解决方案。"

#: ../../library/sysconfig.rst:121
msgid ""
"Files will be installed into subdirectories of :const:`site.USER_BASE` "
"(written as :file:`{userbase}` hereafter).  This scheme installs pure Python"
" modules and extension modules in the same location (also known as "
":const:`site.USER_SITE`)."
msgstr ""
"文件将被安装到 :const:`site.USER_BASE` (以下称为 :file:`{userbase}`) 的子目录中。 此方案将在同一个位置 "
"(或称 :const:`site.USER_SITE`) 中安装纯 Python 模块和扩展模块。"

#: ../../library/sysconfig.rst:126
msgid "``posix_user``"
msgstr "``posix_user``"

#: ../../library/sysconfig.rst:129 ../../library/sysconfig.rst:144
#: ../../library/sysconfig.rst:159 ../../library/sysconfig.rst:187
#: ../../library/sysconfig.rst:229 ../../library/sysconfig.rst:245
msgid "Path"
msgstr "Path"

#: ../../library/sysconfig.rst:129 ../../library/sysconfig.rst:144
#: ../../library/sysconfig.rst:159 ../../library/sysconfig.rst:187
#: ../../library/sysconfig.rst:229 ../../library/sysconfig.rst:245
msgid "Installation directory"
msgstr "安装目录"

#: ../../library/sysconfig.rst:131 ../../library/sysconfig.rst:146
#: ../../library/sysconfig.rst:161 ../../library/sysconfig.rst:189
#: ../../library/sysconfig.rst:231 ../../library/sysconfig.rst:247
msgid "*stdlib*"
msgstr "*stdlib*"

#: ../../library/sysconfig.rst:131 ../../library/sysconfig.rst:132
msgid ":file:`{userbase}/lib/python{X.Y}`"
msgstr ":file:`{userbase}/lib/python{X.Y}`"

#: ../../library/sysconfig.rst:132 ../../library/sysconfig.rst:147
#: ../../library/sysconfig.rst:162 ../../library/sysconfig.rst:190
#: ../../library/sysconfig.rst:232 ../../library/sysconfig.rst:248
msgid "*platstdlib*"
msgstr "*platstdlib*"

#: ../../library/sysconfig.rst:133 ../../library/sysconfig.rst:148
#: ../../library/sysconfig.rst:163 ../../library/sysconfig.rst:191
#: ../../library/sysconfig.rst:233 ../../library/sysconfig.rst:249
msgid "*platlib*"
msgstr "*platlib*"

#: ../../library/sysconfig.rst:133 ../../library/sysconfig.rst:134
msgid ":file:`{userbase}/lib/python{X.Y}/site-packages`"
msgstr ":file:`{userbase}/lib/python{X.Y}/site-packages`"

#: ../../library/sysconfig.rst:134 ../../library/sysconfig.rst:149
#: ../../library/sysconfig.rst:164 ../../library/sysconfig.rst:192
#: ../../library/sysconfig.rst:234 ../../library/sysconfig.rst:250
msgid "*purelib*"
msgstr "*purelib*"

#: ../../library/sysconfig.rst:135 ../../library/sysconfig.rst:150
#: ../../library/sysconfig.rst:165 ../../library/sysconfig.rst:193
#: ../../library/sysconfig.rst:235 ../../library/sysconfig.rst:251
msgid "*include*"
msgstr "*include*"

#: ../../library/sysconfig.rst:135 ../../library/sysconfig.rst:165
msgid ":file:`{userbase}/include/python{X.Y}`"
msgstr ":file:`{userbase}/include/python{X.Y}`"

#: ../../library/sysconfig.rst:136 ../../library/sysconfig.rst:151
#: ../../library/sysconfig.rst:166 ../../library/sysconfig.rst:195
#: ../../library/sysconfig.rst:237 ../../library/sysconfig.rst:253
msgid "*scripts*"
msgstr "*scripts*"

#: ../../library/sysconfig.rst:136 ../../library/sysconfig.rst:166
msgid ":file:`{userbase}/bin`"
msgstr ":file:`{userbase}/bin`"

#: ../../library/sysconfig.rst:137 ../../library/sysconfig.rst:152
#: ../../library/sysconfig.rst:167 ../../library/sysconfig.rst:196
#: ../../library/sysconfig.rst:238 ../../library/sysconfig.rst:254
msgid "*data*"
msgstr "*data*"

#: ../../library/sysconfig.rst:137 ../../library/sysconfig.rst:152
#: ../../library/sysconfig.rst:167
msgid ":file:`{userbase}`"
msgstr ":file:`{userbase}`"

#: ../../library/sysconfig.rst:141
msgid "``nt_user``"
msgstr "``nt_user``"

#: ../../library/sysconfig.rst:146 ../../library/sysconfig.rst:147
msgid ":file:`{userbase}\\\\Python{XY}`"
msgstr ":file:`{userbase}\\\\Python{XY}`"

#: ../../library/sysconfig.rst:148 ../../library/sysconfig.rst:149
msgid ":file:`{userbase}\\\\Python{XY}\\\\site-packages`"
msgstr ":file:`{userbase}\\\\Python{XY}\\\\site-packages`"

#: ../../library/sysconfig.rst:150
msgid ":file:`{userbase}\\\\Python{XY}\\\\Include`"
msgstr ":file:`{userbase}\\\\Python{XY}\\\\Include`"

#: ../../library/sysconfig.rst:151
msgid ":file:`{userbase}\\\\Python{XY}\\\\Scripts`"
msgstr ":file:`{userbase}\\\\Python{XY}\\\\Scripts`"

#: ../../library/sysconfig.rst:156
msgid "``osx_framework_user``"
msgstr "``osx_framework_user``"

#: ../../library/sysconfig.rst:161 ../../library/sysconfig.rst:162
msgid ":file:`{userbase}/lib/python`"
msgstr ":file:`{userbase}/lib/python`"

#: ../../library/sysconfig.rst:163 ../../library/sysconfig.rst:164
msgid ":file:`{userbase}/lib/python/site-packages`"
msgstr ":file:`{userbase}/lib/python/site-packages`"

#: ../../library/sysconfig.rst:174
msgid "Home scheme"
msgstr "主方案"

#: ../../library/sysconfig.rst:176
msgid ""
"The idea behind the \"home scheme\" is that you build and maintain a "
"personal stash of Python modules.  This scheme's name is derived from the "
"idea of a \"home\" directory on Unix, since it's not unusual for a Unix user"
" to make their home directory have a layout similar to :file:`/usr/` or "
":file:`/usr/local/`. This scheme can be used by anyone, regardless of the "
"operating system they are installing for."
msgstr ""
"“主方案”背后的理念是你可以构建并维护个人的 Python 模块集。 该方案的名称源自 Unix 上“主目录”的概念，因为通常 Unix "
"用户会将其主目录的布局设置为与 :file:`/usr/` 或 :file:`/usr/local/` 相似。 "
"任何人都可以使用该方案，无论其安装的操作系统是什么。"

#: ../../library/sysconfig.rst:184
msgid "``posix_home``"
msgstr "``posix_home``"

#: ../../library/sysconfig.rst:189 ../../library/sysconfig.rst:190
#: ../../library/sysconfig.rst:191 ../../library/sysconfig.rst:192
msgid ":file:`{home}/lib/python`"
msgstr ":file:`{home}/lib/python`"

#: ../../library/sysconfig.rst:193 ../../library/sysconfig.rst:194
msgid ":file:`{home}/include/python`"
msgstr ":file:`{home}/include/python`"

#: ../../library/sysconfig.rst:194 ../../library/sysconfig.rst:236
#: ../../library/sysconfig.rst:252
msgid "*platinclude*"
msgstr "*platinclude*"

#: ../../library/sysconfig.rst:195
msgid ":file:`{home}/bin`"
msgstr ":file:`{home}/bin`"

#: ../../library/sysconfig.rst:196
msgid ":file:`{home}`"
msgstr ":file:`{home}`"

#: ../../library/sysconfig.rst:203
msgid "Prefix scheme"
msgstr "前缀方案"

#: ../../library/sysconfig.rst:205
msgid ""
"The \"prefix scheme\" is useful when you wish to use one Python installation"
" to perform the build/install (i.e., to run the setup script), but install "
"modules into the third-party module directory of a different Python "
"installation (or something that looks like a different Python installation)."
"  If this sounds a trifle unusual, it is---that's why the user and home "
"schemes come before.  However, there are at least two known cases where the "
"prefix scheme will be useful."
msgstr ""
"“前缀方案”适用于当你希望使用一个 Python 安装程序来执行构建/安装（即运行 setup 脚本），但需要将模块安装到另一个 Python "
"安装版（或看起来类似于另一个 Python 安装版）的第三方模块目录中的情况。 如果这听起来有点不寻常，确实如此 --- "
"这就是为什么要先介绍用户和主目录方案的原因。 然而，至少有两种已知的情况会用到前缀方案。"

#: ../../library/sysconfig.rst:212
msgid ""
"First, consider that many Linux distributions put Python in :file:`/usr`, "
"rather than the more traditional :file:`/usr/local`.  This is entirely "
"appropriate, since in those cases Python is part of \"the system\" rather "
"than a local add-on. However, if you are installing Python modules from "
"source, you probably want them to go in :file:`/usr/local/lib/python2.{X}` "
"rather than :file:`/usr/lib/python2.{X}`."
msgstr ""
"首先，许多 Linux 发行版都会将 Python 放在 :file:`/usr` 中，而不是传统的 :file:`/usr/local` 中。 "
"这是完全适当的，因为在这些情况下，Python 是“系统”的一部分而不是本地的附加组件。 但是，如果你从源代码安装 Python模块 "
"，您可能会想要将它们放在 :file:`/usr/local/lib/python2.{X}` 而不是 "
":file:`/usr/lib/python2.{X}` 中。"

#: ../../library/sysconfig.rst:219
msgid ""
"Another possibility is a network filesystem where the name used to write to "
"a remote directory is different from the name used to read it: for example, "
"the Python interpreter accessed as :file:`/usr/local/bin/python` might "
"search for modules in :file:`/usr/local/lib/python2.{X}`, but those modules "
"would have to be installed to, say, "
":file:`/mnt/{@server}/export/lib/python2.{X}`."
msgstr ""
"另一种可能性是在用于写入远程目录的名称与用于读取该目录的名称不同的网络文件系统：例如，作为 :file:`/usr/local/bin/python` "
"访问的 Python 解释器可能会在 :file:`/usr/local/lib/python2.{X}` 中搜索模块，但这些模块又必须安装到 "
":file:`/mnt/{@server}/export/lib/python2.{X}` 这样的地方。"

#: ../../library/sysconfig.rst:226
msgid "``posix_prefix``"
msgstr "``posix_prefix``"

#: ../../library/sysconfig.rst:231 ../../library/sysconfig.rst:232
msgid ":file:`{prefix}/lib/python{X.Y}`"
msgstr ":file:`{prefix}/lib/python{X.Y}`"

#: ../../library/sysconfig.rst:233 ../../library/sysconfig.rst:234
msgid ":file:`{prefix}/lib/python{X.Y}/site-packages`"
msgstr ":file:`{prefix}/lib/python{X.Y}/site-packages`"

#: ../../library/sysconfig.rst:235 ../../library/sysconfig.rst:236
msgid ":file:`{prefix}/include/python{X.Y}`"
msgstr ":file:`{prefix}/include/python{X.Y}`"

#: ../../library/sysconfig.rst:237
msgid ":file:`{prefix}/bin`"
msgstr ":file:`{prefix}/bin`"

#: ../../library/sysconfig.rst:238 ../../library/sysconfig.rst:254
msgid ":file:`{prefix}`"
msgstr ":file:`{prefix}`"

#: ../../library/sysconfig.rst:242
msgid "``nt``"
msgstr "``nt``"

#: ../../library/sysconfig.rst:247 ../../library/sysconfig.rst:248
msgid ":file:`{prefix}\\\\Lib`"
msgstr ":file:`{prefix}\\\\Lib`"

#: ../../library/sysconfig.rst:249 ../../library/sysconfig.rst:250
msgid ":file:`{prefix}\\\\Lib\\\\site-packages`"
msgstr ":file:`{prefix}\\\\Lib\\\\site-packages`"

#: ../../library/sysconfig.rst:251 ../../library/sysconfig.rst:252
msgid ":file:`{prefix}\\\\Include`"
msgstr ":file:`{prefix}\\\\Include`"

#: ../../library/sysconfig.rst:253
msgid ":file:`{prefix}\\\\Scripts`"
msgstr ":file:`{prefix}\\\\Scripts`"

#: ../../library/sysconfig.rst:259
msgid "Installation path functions"
msgstr "安装路径函数"

#: ../../library/sysconfig.rst:261
msgid ""
":mod:`sysconfig` provides some functions to determine these installation "
"paths."
msgstr ":mod:`sysconfig` 提供了一些函数来确定这些安装路径。"

#: ../../library/sysconfig.rst:265
msgid ""
"Return a tuple containing all schemes currently supported in "
":mod:`sysconfig`."
msgstr "返回一个包含 :mod:`sysconfig` 目前支持的所有方案的元组。"

#: ../../library/sysconfig.rst:271
msgid "Return the default scheme name for the current platform."
msgstr "返回针对当前平台的默认方案的名称。"

#: ../../library/sysconfig.rst:273
msgid ""
"This function was previously named ``_get_default_scheme()`` and considered "
"an implementation detail."
msgstr "此函数之前被命名为 ``_get_default_scheme()`` 并被认为属性实现细节。"

#: ../../library/sysconfig.rst:277
msgid ""
"When Python runs from a virtual environment, the *venv* scheme is returned."
msgstr "当 Python 运行于虚拟环境时，将返回 *venv* 方案。"

#: ../../library/sysconfig.rst:283
msgid ""
"Return a preferred scheme name for an installation layout specified by "
"*key*."
msgstr "返回针对由 *key* 所指定的安装布局的推荐方案的名称。"

#: ../../library/sysconfig.rst:285
msgid "*key* must be either ``\"prefix\"``, ``\"home\"``, or ``\"user\"``."
msgstr "*key* 必须为 ``\"prefix\"``, ``\"home\"`` 或 ``\"user\"``。"

#: ../../library/sysconfig.rst:287
msgid ""
"The return value is a scheme name listed in :func:`get_scheme_names`. It can"
" be passed to :mod:`sysconfig` functions that take a *scheme* argument, such"
" as :func:`get_paths`."
msgstr ""
"该返回值是 :func:`get_scheme_names` 中列出的一个方案名称。 它可以被传给接受 *scheme* 参数的 "
":mod:`sysconfig` 函数，如 :func:`get_paths`。"

#: ../../library/sysconfig.rst:293
msgid ""
"When Python runs from a virtual environment and ``key=\"prefix\"``, the "
"*venv* scheme is returned."
msgstr "当 Python 运行于虚拟环境且 ``key=\"prefix\"`` 时，将返回 *venv* 方案。"

#: ../../library/sysconfig.rst:300
msgid ""
"Return a dict containing preferred scheme names on the current platform. "
"Python implementers and redistributors may add their preferred schemes to "
"the ``_INSTALL_SCHEMES`` module-level global value, and modify this function"
" to return those scheme names, to e.g. provide different schemes for system "
"and language package managers to use, so packages installed by either do not"
" mix with those by the other."
msgstr ""
"返回一个包含当前平台推荐的方案名称的字典。 Python 的实现方和再分发方可以将他们推荐的方案添加到 ``_INSTALL_SCHEMES`` "
"模块层级全局值，并修改此函数以返回这些方案名称，例如为各种系统和语言的包管理器提供不同的方案，这样它们各自安装的包就不会彼此混淆。"

#: ../../library/sysconfig.rst:307
msgid ""
"End users should not use this function, but :func:`get_default_scheme` and "
":func:`get_preferred_scheme` instead."
msgstr ""
"最终用户不应使用此函数，而应改用 :func:`get_default_scheme` 和 :func:`get_preferred_scheme`。"

#: ../../library/sysconfig.rst:315
msgid ""
"Return a tuple containing all path names currently supported in "
":mod:`sysconfig`."
msgstr "返回一个包含在 :mod:`sysconfig` 中目前支持的所有路径名称的元组。"

#: ../../library/sysconfig.rst:321
msgid ""
"Return an installation path corresponding to the path *name*, from the "
"install scheme named *scheme*."
msgstr "返回一个对应于路径 *name*，来自名为 *scheme* 的安装方案的安装路径。"

#: ../../library/sysconfig.rst:324
msgid ""
"*name* has to be a value from the list returned by :func:`get_path_names`."
msgstr "*name* 必须是一个来自 :func:`get_path_names` 所返回的列表的值。"

#: ../../library/sysconfig.rst:326
msgid ""
":mod:`sysconfig` stores installation paths corresponding to each path name, "
"for each platform, with variables to be expanded.  For instance the *stdlib*"
" path for the *nt* scheme is: ``{base}/Lib``."
msgstr ""
":mod:`sysconfig` 会针对每个平台保存与每个路径名称相对应的安装路径，并带有可扩展的变量。 例如针对 *nt* 方案的 *stdlib* "
"路径是: ``{base}/Lib``。"

#: ../../library/sysconfig.rst:330
msgid ""
":func:`get_path` will use the variables returned by :func:`get_config_vars` "
"to expand the path.  All variables have default values for each platform so "
"one may call this function and get the default value."
msgstr ""
":func:`get_path` 将使用 :func:`get_config_vars` 所返回的变量来扩展路径。 "
"所有变量对于每种平台都有相应的默认值因此使用者可以调用此函数来获取默认值。"

#: ../../library/sysconfig.rst:334
msgid ""
"If *scheme* is provided, it must be a value from the list returned by "
":func:`get_scheme_names`.  Otherwise, the default scheme for the current "
"platform is used."
msgstr ""
"如果提供了 *scheme*，则它必须是一个来自 :func:`get_scheme_names` 所返回的列表的值。 "
"在其他情况下，将会使用针对当前平台的默认方案。"

#: ../../library/sysconfig.rst:338
msgid ""
"If *vars* is provided, it must be a dictionary of variables that will update"
" the dictionary returned by :func:`get_config_vars`."
msgstr "如果提供了 *vars*，则它必须是一个将要更新 :func:`get_config_vars` 所返回的字典的变量字典。"

#: ../../library/sysconfig.rst:341
msgid ""
"If *expand* is set to ``False``, the path will not be expanded using the "
"variables."
msgstr "如果 *expand* 被设为 ``False``，则将不使用这些变量来扩展路径。"

#: ../../library/sysconfig.rst:344
msgid "If *name* is not found, raise a :exc:`KeyError`."
msgstr "如果 *name* 未找到，则会引发 :exc:`KeyError`。"

#: ../../library/sysconfig.rst:349
msgid ""
"Return a dictionary containing all installation paths corresponding to an "
"installation scheme. See :func:`get_path` for more information."
msgstr "返回一个包含与特定安装方案对应的安装路径的字典。 请参阅 :func:`get_path` 了解详情。"

#: ../../library/sysconfig.rst:352
msgid ""
"If *scheme* is not provided, will use the default scheme for the current "
"platform."
msgstr "如果未提供 *scheme*，则将使用针对当前平台的默认方案。"

#: ../../library/sysconfig.rst:355
msgid ""
"If *vars* is provided, it must be a dictionary of variables that will update"
" the dictionary used to expand the paths."
msgstr "如果提供了 *vars*，则它必须是一个将要更新用于扩展的字典的变量字典。"

#: ../../library/sysconfig.rst:358
msgid "If *expand* is set to false, the paths will not be expanded."
msgstr "如果 *expand* 被设为假值，则路径将不会被扩展。"

#: ../../library/sysconfig.rst:360
msgid ""
"If *scheme* is not an existing scheme, :func:`get_paths` will raise a "
":exc:`KeyError`."
msgstr "如果 *scheme* 不是一个现有的方案，则 :func:`get_paths` 将引发 :exc:`KeyError`。"

#: ../../library/sysconfig.rst:365
msgid "Other functions"
msgstr "其他功能"

#: ../../library/sysconfig.rst:369
msgid ""
"Return the ``MAJOR.MINOR`` Python version number as a string.  Similar to "
"``'%d.%d' % sys.version_info[:2]``."
msgstr ""
"以字符串形式 ``MAJOR.MINOR`` 返回 Python 版本号。 类似于 ``'%d.%d' % "
"sys.version_info[:2]``。"

#: ../../library/sysconfig.rst:375
msgid "Return a string that identifies the current platform."
msgstr "返回一个标识当前平台的字符串。"

#: ../../library/sysconfig.rst:377
msgid ""
"This is used mainly to distinguish platform-specific build directories and "
"platform-specific built distributions.  Typically includes the OS name and "
"version and the architecture (as supplied by :func:`os.uname`), although the"
" exact information included depends on the OS; e.g., on Linux, the kernel "
"version isn't particularly important."
msgstr ""
"这主要被用来区分平台专属的构建目录和平台专属的构建分发版。 通常包括 OS 名称和版本以及架构（即 :func:`os.uname` "
"所提供的信息），但是实际包括的信息取决于具体 OS；例如，在 Linux 上，内核版本并不是特别重要。"

#: ../../library/sysconfig.rst:383
msgid "Examples of returned values:"
msgstr "返回值的示例："

#: ../../library/sysconfig.rst:385
msgid "linux-i586"
msgstr "linux-i586"

#: ../../library/sysconfig.rst:386
msgid "linux-alpha (?)"
msgstr "linux-alpha (?)"

#: ../../library/sysconfig.rst:387
msgid "solaris-2.6-sun4u"
msgstr "solaris-2.6-sun4u"

#: ../../library/sysconfig.rst:389
msgid "Windows will return one of:"
msgstr "Windows将返回以下之一："

#: ../../library/sysconfig.rst:391
msgid "win-amd64 (64-bit Windows on AMD64, aka x86_64, Intel64, and EM64T)"
msgstr "win-amd64 (在 AMD64 即 x86_64, Intel64 和 EM64T 上的 64 位 Windows)"

#: ../../library/sysconfig.rst:392
msgid "win-arm64 (64-bit Windows on ARM64, aka AArch64)"
msgstr "win-arm64 (在 ARM64 即 AArch64 上的 64 位 Windows)"

#: ../../library/sysconfig.rst:393
msgid "win32 (all others - specifically, sys.platform is returned)"
msgstr "win32（所有其他的 —— 确切地说，返回 sys.platform）"

#: ../../library/sysconfig.rst:395
msgid "macOS can return:"
msgstr "macOS 可以返回:"

#: ../../library/sysconfig.rst:397
msgid "macosx-10.6-ppc"
msgstr "macosx-10.6-ppc"

#: ../../library/sysconfig.rst:398
msgid "macosx-10.4-ppc64"
msgstr "macosx-10.4-ppc64"

#: ../../library/sysconfig.rst:399
msgid "macosx-10.3-i386"
msgstr "macosx-10.3-i386"

#: ../../library/sysconfig.rst:400
msgid "macosx-10.4-fat"
msgstr "macosx-10.4-fat"

#: ../../library/sysconfig.rst:402
msgid ""
"For other non-POSIX platforms, currently just returns :data:`sys.platform`."
msgstr "对于其他非-POSIX 平台， 目前只是返回 :data:`sys.platform` 。"

#: ../../library/sysconfig.rst:407
msgid ""
"Return ``True`` if the running Python interpreter was built from source and "
"is being run from its built location, and not from a location resulting from"
" e.g. running ``make install`` or installing via a binary installer."
msgstr ""
"如果正在运行的 Python 解释器是使用源代码构建的并在其构建位置上运行，而不是在其他位置例如通过运行 ``make install`` "
"或通过二进制机器码安装程序安装则返回 ``True``。"

#: ../../library/sysconfig.rst:414
msgid "Parse a :file:`config.h`\\-style file."
msgstr "解析一个 :file:`config.h` 风格的文件。"

#: ../../library/sysconfig.rst:416
msgid "*fp* is a file-like object pointing to the :file:`config.h`\\-like file."
msgstr "*fp* 是一个指向 :file:`config.h` 风格的文件的文件型对象。"

#: ../../library/sysconfig.rst:418
msgid ""
"A dictionary containing name/value pairs is returned.  If an optional "
"dictionary is passed in as the second argument, it is used instead of a new "
"dictionary, and updated with the values read in the file."
msgstr "返回一个包含名称/值对的字典。 如果传入一个可选的字典作为第二个参数，则将使用它而不是新的字典，并使用从文件中读取的值更新它。"

#: ../../library/sysconfig.rst:425
msgid "Return the path of :file:`pyconfig.h`."
msgstr "返回  :file:`pyconfig.h` 的目录"

#: ../../library/sysconfig.rst:429
msgid "Return the path of :file:`Makefile`."
msgstr "返回 :file:`Makefile` 的目录"

#: ../../library/sysconfig.rst:435
msgid "Command-line usage"
msgstr "命令行用法"

#: ../../library/sysconfig.rst:437
msgid "You can use :mod:`sysconfig` as a script with Python's *-m* option:"
msgstr " 你可以通过 Python 的 *-m* 选项将 :mod:`sysconfig` 作为脚本使用:"

#: ../../library/sysconfig.rst:439
msgid ""
"$ python -m sysconfig\n"
"Platform: \"macosx-10.4-i386\"\n"
"Python version: \"3.2\"\n"
"Current installation scheme: \"posix_prefix\"\n"
"\n"
"Paths:\n"
"        data = \"/usr/local\"\n"
"        include = \"/Users/tarek/Dev/svn.python.org/py3k/Include\"\n"
"        platinclude = \".\"\n"
"        platlib = \"/usr/local/lib/python3.2/site-packages\"\n"
"        platstdlib = \"/usr/local/lib/python3.2\"\n"
"        purelib = \"/usr/local/lib/python3.2/site-packages\"\n"
"        scripts = \"/usr/local/bin\"\n"
"        stdlib = \"/usr/local/lib/python3.2\"\n"
"\n"
"Variables:\n"
"        AC_APPLE_UNIVERSAL_BUILD = \"0\"\n"
"        AIX_GENUINE_CPLUSPLUS = \"0\"\n"
"        AR = \"ar\"\n"
"        ARFLAGS = \"rc\"\n"
"        ..."
msgstr ""
"$ python -m sysconfig\n"
"Platform: \"macosx-10.4-i386\"\n"
"Python version: \"3.2\"\n"
"Current installation scheme: \"posix_prefix\"\n"
"\n"
"Paths:\n"
"        data = \"/usr/local\"\n"
"        include = \"/Users/tarek/Dev/svn.python.org/py3k/Include\"\n"
"        platinclude = \".\"\n"
"        platlib = \"/usr/local/lib/python3.2/site-packages\"\n"
"        platstdlib = \"/usr/local/lib/python3.2\"\n"
"        purelib = \"/usr/local/lib/python3.2/site-packages\"\n"
"        scripts = \"/usr/local/bin\"\n"
"        stdlib = \"/usr/local/lib/python3.2\"\n"
"\n"
"Variables:\n"
"        AC_APPLE_UNIVERSAL_BUILD = \"0\"\n"
"        AIX_GENUINE_CPLUSPLUS = \"0\"\n"
"        AR = \"ar\"\n"
"        ARFLAGS = \"rc\"\n"
"        ..."

#: ../../library/sysconfig.rst:463
msgid ""
"This call will print in the standard output the information returned by "
":func:`get_platform`, :func:`get_python_version`, :func:`get_path` and "
":func:`get_config_vars`."
msgstr ""
"此调用将把 :func:`get_platform`, :func:`get_python_version`, :func:`get_path` 和 "
":func:`get_config_vars` 所返回的信息打印至标准输出。"

#: ../../library/sysconfig.rst:14
msgid "configuration information"
msgstr "配置信息"
