# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:09+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sysconfig.rst:2
msgid ""
":mod:`sysconfig` --- Provide access to Python's configuration information"
msgstr ":mod:`sysconfig` —— 提供对 Python 配置信息的访问支持"

#: ../../library/sysconfig.rst:12
msgid "**Source code:** :source:`Lib/sysconfig.py`"
msgstr "**源代码：** :source:`Lib/sysconfig.py`"

#: ../../library/sysconfig.rst:19
msgid ""
"The :mod:`sysconfig` module provides access to Python's configuration "
"information like the list of installation paths and the configuration "
"variables relevant for the current platform."
msgstr ":mod:`sysconfig` 模块提供了对 Python 配置信息的访问支持，比如安装路径列表和有关当前平台的配置变量。"

#: ../../library/sysconfig.rst:24
msgid "Configuration variables"
msgstr "配置变量"

#: ../../library/sysconfig.rst:26
msgid ""
"A Python distribution contains a :file:`Makefile` and a :file:`pyconfig.h` "
"header file that are necessary to build both the Python binary itself and "
"third-party C extensions compiled using :mod:`distutils`."
msgstr ""
"Python 的发行版中包含一个 :file:`Makefile` 和一个 :file:`pyconfig.h` 头文件，这是构建 Python "
"二进制文件本身和用 :mod:`distutils` 编译的第三方 C 语言扩展所必需的。"

#: ../../library/sysconfig.rst:30
msgid ""
":mod:`sysconfig` puts all variables found in these files in a dictionary "
"that can be accessed using :func:`get_config_vars` or "
":func:`get_config_var`."
msgstr ""
":mod:`sysconfig` 将这些文件中的所有变量放在一个字典对象中，可用 :func:`get_config_vars` 或 "
":func:`get_config_var` 访问。"

#: ../../library/sysconfig.rst:33
msgid "Notice that on Windows, it's a much smaller set."
msgstr "请注意在 Windows 上，这是一个小得多的集合。"

#: ../../library/sysconfig.rst:37
msgid ""
"With no arguments, return a dictionary of all configuration variables "
"relevant for the current platform."
msgstr "不带参数时，返回一个与当前平台相关的所有配置变量的字典。"

#: ../../library/sysconfig.rst:40
msgid ""
"With arguments, return a list of values that result from looking up each "
"argument in the configuration variable dictionary."
msgstr "带参数时，返回一个由在配置变量字典中查找每个参数的结果的值组成的列表。"

#: ../../library/sysconfig.rst:43
msgid "For each argument, if the value is not found, return ``None``."
msgstr "对于每个参数，如果未找到值，则返回 ``None``。"

#: ../../library/sysconfig.rst:48
msgid ""
"Return the value of a single variable *name*. Equivalent to "
"``get_config_vars().get(name)``."
msgstr "返回单个变量 *name* 的值。 等价于 ``get_config_vars().get(name)``。"

#: ../../library/sysconfig.rst:51
msgid "If *name* is not found, return ``None``."
msgstr "如果未找到 *name*，则返回 ``None``。"

#: ../../library/sysconfig.rst:53
msgid "Example of usage::"
msgstr "用法示例::"

#: ../../library/sysconfig.rst:66
msgid "Installation paths"
msgstr "安装路径"

#: ../../library/sysconfig.rst:68
msgid ""
"Python uses an installation scheme that differs depending on the platform "
"and on the installation options.  These schemes are stored in "
":mod:`sysconfig` under unique identifiers based on the value returned by "
":const:`os.name`."
msgstr ""
"Python 会使用根据平台和安装选项区别处理的安装方案。 这些方案保存在 :mod:`sysconfig` 中基于 :const:`os.name` "
"的返回值来确定的唯一标识符下。"

#: ../../library/sysconfig.rst:72
msgid ""
"Every new component that is installed using :mod:`distutils` or a Distutils-"
"based system will follow the same scheme to copy its file in the right "
"places."
msgstr "每个使用 :mod:`distutils` 或基于 Distutils 的系统安装的新组件都将遵循同样的方案将其文件拷贝到正确的位置。"

#: ../../library/sysconfig.rst:76
msgid "Python currently supports six schemes:"
msgstr "Python 目前支持六种方案:"

#: ../../library/sysconfig.rst:78
msgid ""
"*posix_prefix*: scheme for POSIX platforms like Linux or macOS.  This is the"
" default scheme used when Python or a component is installed."
msgstr ""
"*posix_prefix*: 针对 POSIX 平台如 Linux 或 macOS 的方案。 这是在安装 Python 或者组件时的默认方案。"

#: ../../library/sysconfig.rst:80
msgid ""
"*posix_home*: scheme for POSIX platforms used when a *home* option is used "
"upon installation.  This scheme is used when a component is installed "
"through Distutils with a specific home prefix."
msgstr ""
"*posix_home*: 当在安装时使用了 *home* 选项时针对 POSIX 平台所使用的方案。 此方案会在通过 Distutils "
"附带指定的前缀安装组件时被使用。"

#: ../../library/sysconfig.rst:83
msgid ""
"*posix_user*: scheme for POSIX platforms used when a component is installed "
"through Distutils and the *user* option is used.  This scheme defines paths "
"located under the user home directory."
msgstr ""
"*posix_user*: 当通过 Distutils 安装组件并且使用了 *user* 选项时针对 POSIX 平台所使用的方案。 "
"此方案会在用户家目录下定义路径位置。"

#: ../../library/sysconfig.rst:86
msgid "*nt*: scheme for NT platforms like Windows."
msgstr "*nt*: 针对 NT 平台如 Windows 的方案。"

#: ../../library/sysconfig.rst:87
msgid "*nt_user*: scheme for NT platforms, when the *user* option is used."
msgstr "*nt_user*: 针对 NT 平台，当使用了 *user* 选项时的方案。"

#: ../../library/sysconfig.rst:88
msgid ""
"*osx_framework_user*: scheme for macOS, when the *user* option is used."
msgstr "*osx_framework_user*: 针对 macOS，当使用了 *user* 选项时的方案。"

#: ../../library/sysconfig.rst:90
msgid ""
"Each scheme is itself composed of a series of paths and each path has a "
"unique identifier.  Python currently uses eight paths:"
msgstr "每个方案本身由一系列路径组成并且每个路径都有唯一的标识符。 Python 目前使用了八个路径:"

#: ../../library/sysconfig.rst:93
msgid ""
"*stdlib*: directory containing the standard Python library files that are "
"not platform-specific."
msgstr "*stdlib*: 包含非平台专属的标准 Python 库文件的目录。"

#: ../../library/sysconfig.rst:95
msgid ""
"*platstdlib*: directory containing the standard Python library files that "
"are platform-specific."
msgstr "*platstdlib*: 包含平台专属的标准 Python 库文件的目录。"

#: ../../library/sysconfig.rst:97
msgid "*platlib*: directory for site-specific, platform-specific files."
msgstr "*platlib*: 用于站点专属、平台专属的文件的目录。"

#: ../../library/sysconfig.rst:98
msgid "*purelib*: directory for site-specific, non-platform-specific files."
msgstr "*purelib*: 用于站点专属、非平台专属的文件的目录。"

#: ../../library/sysconfig.rst:99
msgid "*include*: directory for non-platform-specific header files."
msgstr "*include*: 用于非平台专属的头文件的目录。"

#: ../../library/sysconfig.rst:100
msgid "*platinclude*: directory for platform-specific header files."
msgstr "*platinclude*: 用于平台专属的头文件的目录。"

#: ../../library/sysconfig.rst:101
msgid "*scripts*: directory for script files."
msgstr "*scripts*: 用于脚本文件的目录。"

#: ../../library/sysconfig.rst:102
msgid "*data*: directory for data files."
msgstr "*data*: 用于数据文件的目录。"

#: ../../library/sysconfig.rst:104
msgid ":mod:`sysconfig` provides some functions to determine these paths."
msgstr ":mod:`sysconfig` 提供了一些函数来确定这些路径。"

#: ../../library/sysconfig.rst:108
msgid ""
"Return a tuple containing all schemes currently supported in "
":mod:`sysconfig`."
msgstr "返回一个包含 :mod:`sysconfig` 目前支持的所有方案的元组。"

#: ../../library/sysconfig.rst:114
msgid "Return the default scheme name for the current platform."
msgstr "返回针对当前平台的默认方案的名称。"

#: ../../library/sysconfig.rst:116
msgid ""
"This function was previously named ``_get_default_scheme()`` and considered "
"an implementation detail."
msgstr "此函数之前被命名为 ``_get_default_scheme()`` 并被认为属性实现细节。"

#: ../../library/sysconfig.rst:123
msgid ""
"Return a preferred scheme name for an installation layout specified by "
"*key*."
msgstr "返回针对由 *key* 所指定的安装布局的推荐方案的名称。"

#: ../../library/sysconfig.rst:125
msgid "*key* must be either ``\"prefix\"``, ``\"home\"``, or ``\"user\"``."
msgstr "*key* 必须为 ``\"prefix\"``, ``\"home\"`` 或 ``\"user\"``。"

#: ../../library/sysconfig.rst:127
msgid ""
"The return value is a scheme name listed in :func:`get_scheme_names`. It can"
" be passed to :mod:`sysconfig` functions that take a *scheme* argument, such"
" as :func:`get_paths`."
msgstr ""
"该返回值是 :func:`get_scheme_names` 中列出的一个方案名称。 它可以被传给接受 *scheme* 参数的 "
":mod:`sysconfig` 函数，如 :func:`get_paths`。"

#: ../../library/sysconfig.rst:136
msgid ""
"Return a dict containing preferred scheme names on the current platform. "
"Python implementers and redistributors may add their preferred schemes to "
"the ``_INSTALL_SCHEMES`` module-level global value, and modify this function"
" to return those scheme names, to e.g. provide different schemes for system "
"and language package managers to use, so packages installed by either do not"
" mix with those by the other."
msgstr ""
"返回一个包含当前平台推荐的方案名称的字典。 Python 的实现方和再分发方可以将他们推荐的方案添加到 ``_INSTALL_SCHEMES`` "
"模块层级全局值，并修改此函数以返回这些方案名称，例如为各种系统和语言的包管理器提供不同的方案，这样它们各自安装的包就不会彼此混淆。"

#: ../../library/sysconfig.rst:143
msgid ""
"End users should not use this function, but :func:`get_default_scheme` and "
":func:`get_preferred_scheme()` instead."
msgstr ""
"最终用户不应使用此函数，而应改用 :func:`get_default_scheme` 和 "
":func:`get_preferred_scheme()`。"

#: ../../library/sysconfig.rst:151
msgid ""
"Return a tuple containing all path names currently supported in "
":mod:`sysconfig`."
msgstr "返回一个包含在 :mod:`sysconfig` 中目前支持的所有路径名称的元组。"

#: ../../library/sysconfig.rst:157
msgid ""
"Return an installation path corresponding to the path *name*, from the "
"install scheme named *scheme*."
msgstr "返回一个对应于路径 *name*，来自名为 *scheme* 的安装方案的安装路径。"

#: ../../library/sysconfig.rst:160
msgid ""
"*name* has to be a value from the list returned by :func:`get_path_names`."
msgstr "*name* 必须是一个来自 :func:`get_path_names` 所返回的列表的值。"

#: ../../library/sysconfig.rst:162
msgid ""
":mod:`sysconfig` stores installation paths corresponding to each path name, "
"for each platform, with variables to be expanded.  For instance the *stdlib*"
" path for the *nt* scheme is: ``{base}/Lib``."
msgstr ""
":mod:`sysconfig` 会针对每个平台保存与每个路径名称相对应的安装路径，并带有可扩展的变量。 例如针对 *nt* 方案的 *stdlib* "
"路径是: ``{base}/Lib``。"

#: ../../library/sysconfig.rst:166
msgid ""
":func:`get_path` will use the variables returned by :func:`get_config_vars` "
"to expand the path.  All variables have default values for each platform so "
"one may call this function and get the default value."
msgstr ""
":func:`get_path` 将使用 :func:`get_config_vars` 所返回的变量来扩展路径。 "
"所有变量对于每种平台都有相应的默认值因此使用者可以调用此函数来获取默认值。"

#: ../../library/sysconfig.rst:170
msgid ""
"If *scheme* is provided, it must be a value from the list returned by "
":func:`get_scheme_names`.  Otherwise, the default scheme for the current "
"platform is used."
msgstr ""
"如果提供了 *scheme*，则它必须是一个来自 :func:`get_scheme_names` 所返回的列表的值。 "
"在其他情况下，将会使用针对当前平台的默认方案。"

#: ../../library/sysconfig.rst:174
msgid ""
"If *vars* is provided, it must be a dictionary of variables that will update"
" the dictionary return by :func:`get_config_vars`."
msgstr "如果提供了 *vars*，则它必须是一个将要更新 :func:`get_config_vars` 所返回的字典的字典。"

#: ../../library/sysconfig.rst:177
msgid ""
"If *expand* is set to ``False``, the path will not be expanded using the "
"variables."
msgstr "如果 *expand* 被设为 ``False``，则将不使用这些变量来扩展路径。"

#: ../../library/sysconfig.rst:180
msgid "If *name* is not found, raise a :exc:`KeyError`."
msgstr "如果 *name* 未找到，则会引发 :exc:`KeyError`。"

#: ../../library/sysconfig.rst:185
msgid ""
"Return a dictionary containing all installation paths corresponding to an "
"installation scheme. See :func:`get_path` for more information."
msgstr "返回一个包含与特定安装方案对应的安装路径的字典。 请参阅 :func:`get_path` 了解详情。"

#: ../../library/sysconfig.rst:188
msgid ""
"If *scheme* is not provided, will use the default scheme for the current "
"platform."
msgstr "如果未提供 *scheme*，则将使用针对当前平台的默认方案。"

#: ../../library/sysconfig.rst:191
msgid ""
"If *vars* is provided, it must be a dictionary of variables that will update"
" the dictionary used to expand the paths."
msgstr "如果提供了 *vars*，则它必须是一个将要更新用于扩展的字典的变量字典。"

#: ../../library/sysconfig.rst:194
msgid "If *expand* is set to false, the paths will not be expanded."
msgstr "如果 *expand* 被设为假值，则路径将不会被扩展。"

#: ../../library/sysconfig.rst:196
msgid ""
"If *scheme* is not an existing scheme, :func:`get_paths` will raise a "
":exc:`KeyError`."
msgstr "如果 *scheme* 不是一个现有的方案，则 :func:`get_paths` 将引发 :exc:`KeyError`。"

#: ../../library/sysconfig.rst:201
msgid "Other functions"
msgstr "其他功能"

#: ../../library/sysconfig.rst:205
msgid ""
"Return the ``MAJOR.MINOR`` Python version number as a string.  Similar to "
"``'%d.%d' % sys.version_info[:2]``."
msgstr ""
"以字符串形式 ``MAJOR.MINOR`` 返回 Python 版本号。 类似于 ``'%d.%d' % "
"sys.version_info[:2]``。"

#: ../../library/sysconfig.rst:211
msgid "Return a string that identifies the current platform."
msgstr "返回一个标识当前平台的字符串。"

#: ../../library/sysconfig.rst:213
msgid ""
"This is used mainly to distinguish platform-specific build directories and "
"platform-specific built distributions.  Typically includes the OS name and "
"version and the architecture (as supplied by 'os.uname()'), although the "
"exact information included depends on the OS; e.g., on Linux, the kernel "
"version isn't particularly important."
msgstr ""
"这主要被用来区分平台专属的构建目录和平台专属的构建分发版。 通常包括 OS 名称和版本以及架构（即 'os.uname()' "
"所提供的信息)，但是实际包括的信息取决于具体 OS；例如，在 Linux 上，内核版本号并不是特别重要。"

#: ../../library/sysconfig.rst:219
msgid "Examples of returned values:"
msgstr "返回值的示例："

#: ../../library/sysconfig.rst:221
msgid "linux-i586"
msgstr "linux-i586"

#: ../../library/sysconfig.rst:222
msgid "linux-alpha (?)"
msgstr "linux-alpha (?)"

#: ../../library/sysconfig.rst:223
msgid "solaris-2.6-sun4u"
msgstr "solaris-2.6-sun4u"

#: ../../library/sysconfig.rst:225
msgid "Windows will return one of:"
msgstr "Windows将返回以下之一："

#: ../../library/sysconfig.rst:227
msgid "win-amd64 (64bit Windows on AMD64, aka x86_64, Intel64, and EM64T)"
msgstr "win-amd64 (在 AMD64, aka x86_64, Intel64, 和 EM64T上的64位 Windows )"

#: ../../library/sysconfig.rst:228
msgid "win32 (all others - specifically, sys.platform is returned)"
msgstr "win32（所有其他的 —— 确切地说，返回 sys.platform）"

#: ../../library/sysconfig.rst:230
msgid "macOS can return:"
msgstr "macOS 可以返回:"

#: ../../library/sysconfig.rst:232
msgid "macosx-10.6-ppc"
msgstr "macosx-10.6-ppc"

#: ../../library/sysconfig.rst:233
msgid "macosx-10.4-ppc64"
msgstr "macosx-10.4-ppc64"

#: ../../library/sysconfig.rst:234
msgid "macosx-10.3-i386"
msgstr "macosx-10.3-i386"

#: ../../library/sysconfig.rst:235
msgid "macosx-10.4-fat"
msgstr "macosx-10.4-fat"

#: ../../library/sysconfig.rst:237
msgid ""
"For other non-POSIX platforms, currently just returns :data:`sys.platform`."
msgstr "对于其他非-POSIX 平台， 目前只是返回 :data:`sys.platform` 。"

#: ../../library/sysconfig.rst:242
msgid ""
"Return ``True`` if the running Python interpreter was built from source and "
"is being run from its built location, and not from a location resulting from"
" e.g. running ``make install`` or installing via a binary installer."
msgstr ""
"如果正在运行的 Python 解释器是使用源代码构建的并在其构建位置上运行，而不是在其他位置例如通过运行 ``make install`` "
"或通过二进制机器码安装程序安装则返回 ``True``。"

#: ../../library/sysconfig.rst:249
msgid "Parse a :file:`config.h`\\-style file."
msgstr "解析一个 :file:`config.h` 风格的文件。"

#: ../../library/sysconfig.rst:251
msgid "*fp* is a file-like object pointing to the :file:`config.h`\\-like file."
msgstr "*fp* 是一个指向 :file:`config.h` 风格的文件的文件型对象。"

#: ../../library/sysconfig.rst:253
msgid ""
"A dictionary containing name/value pairs is returned.  If an optional "
"dictionary is passed in as the second argument, it is used instead of a new "
"dictionary, and updated with the values read in the file."
msgstr "返回一个包含名称/值对的字典。 如果传入一个可选的字典作为第二个参数，则将使用它而不是新的字典，并使用从文件中读取的值更新它。"

#: ../../library/sysconfig.rst:260
msgid "Return the path of :file:`pyconfig.h`."
msgstr "返回  :file:`pyconfig.h` 的目录"

#: ../../library/sysconfig.rst:264
msgid "Return the path of :file:`Makefile`."
msgstr "返回 :file:`Makefile` 的目录"

#: ../../library/sysconfig.rst:268
msgid "Using :mod:`sysconfig` as a script"
msgstr "将 :mod:`sysconfig` 作为脚本使用"

#: ../../library/sysconfig.rst:270
msgid "You can use :mod:`sysconfig` as a script with Python's *-m* option:"
msgstr " 你可以通过 Python 的 *-m* 选项将 :mod:`sysconfig` 作为脚本使用:"

#: ../../library/sysconfig.rst:296
msgid ""
"This call will print in the standard output the information returned by "
":func:`get_platform`, :func:`get_python_version`, :func:`get_path` and "
":func:`get_config_vars`."
msgstr ""
"此调用将把 :func:`get_platform`, :func:`get_python_version`, :func:`get_path` 和 "
":func:`get_config_vars` 所返回的信息打印至标准输出。"
