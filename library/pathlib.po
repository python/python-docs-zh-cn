# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# jaystone776 <1732865113@qq.com>, 2021
# Zombie110year <zombie110year@gmail.com>, 2021
# walkinrain <walkinrain2008@outlook.com>, 2022
# Arisaka97 <solitaire2312@gmail.com>, 2023
# ww song <sww4718168@gmail.com>, 2024
# dannyvi <dannyvis@icloud.com>, 2024
# ppcfish <ppcfish@gmail.com>, 2024
# lit, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Kevin Deng <kevindeng55+transifex@gmail.com>, 2024
# MuSheng Chen <sheng.2179@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:11+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pathlib.rst:2
msgid ":mod:`!pathlib` --- Object-oriented filesystem paths"
msgstr ":mod:`!pathlib` --- 面向对象的文件系统路径"

#: ../../library/pathlib.rst:9
msgid "**Source code:** :source:`Lib/pathlib/`"
msgstr "**源代码:** :source:`Lib/pathlib/`"

#: ../../library/pathlib.rst:15
msgid ""
"This module offers classes representing filesystem paths with semantics "
"appropriate for different operating systems.  Path classes are divided "
"between :ref:`pure paths <pure-paths>`, which provide purely computational "
"operations without I/O, and :ref:`concrete paths <concrete-paths>`, which "
"inherit from pure paths but also provide I/O operations."
msgstr ""
"该模块提供表示文件系统路径的类，其语义适用于不同的操作系统。路径类被分为提供纯计算操作而没有 I/O 的 :ref:`纯路径 <pure-"
"paths>`，以及从纯路径继承而来但提供 I/O 操作的 :ref:`具体路径 <concrete-paths>`。"

#: ../../library/pathlib.rst:21
msgid ""
"Inheritance diagram showing the classes available in pathlib. The\n"
"most basic class is PurePath, which has three direct subclasses:\n"
"PurePosixPath, PureWindowsPath, and Path. Further to these four\n"
"classes, there are two classes that use multiple inheritance:\n"
"PosixPath subclasses PurePosixPath and Path, and WindowsPath\n"
"subclasses PureWindowsPath and Path."
msgstr ""
"继承关系图显示了 pathlib 中所有可用的类。\n"
"最基础的类是 PurePath，它有三个直接子类：\n"
"PurePosixPath, PureWindowsPath 和 Path。\n"
"在这四个类之外，还有两个使用多重继承的类：\n"
"PosixPath 子类 PurePosixPath 和 Path，以及\n"
"WindowsPath 子类 PureWindowsPath 和 Path。"

#: ../../library/pathlib.rst:31
msgid ""
"If you've never used this module before or just aren't sure which class is "
"right for your task, :class:`Path` is most likely what you need. It "
"instantiates a :ref:`concrete path <concrete-paths>` for the platform the "
"code is running on."
msgstr ""
"如果以前从未用过此模块，或不确定哪个类适合完成任务，那要用的可能就是 :class:`Path`。它在运行代码的平台上实例化为 :ref:`具体路径 "
"<concrete-paths>`。"

#: ../../library/pathlib.rst:35
msgid "Pure paths are useful in some special cases; for example:"
msgstr "在一些用例中纯路径很有用，例如："

#: ../../library/pathlib.rst:37
msgid ""
"If you want to manipulate Windows paths on a Unix machine (or vice versa). "
"You cannot instantiate a :class:`WindowsPath` when running on Unix, but you "
"can instantiate :class:`PureWindowsPath`."
msgstr ""
"如果你想要在 Unix 设备上操作 Windows 路径（或者相反）。你不应在 Unix 上实例化一个 "
":class:`WindowsPath`，但是你可以实例化 :class:`PureWindowsPath`。"

#: ../../library/pathlib.rst:40
msgid ""
"You want to make sure that your code only manipulates paths without actually"
" accessing the OS. In this case, instantiating one of the pure classes may "
"be useful since those simply don't have any OS-accessing operations."
msgstr "你只想操作路径但不想实际访问操作系统。在这种情况下，实例化一个纯路径是有用的，因为它们没有任何访问操作系统的操作。"

#: ../../library/pathlib.rst:45
msgid ":pep:`428`: The pathlib module -- object-oriented filesystem paths."
msgstr ":pep:`428`：pathlib 模块 -- 面向对象的文件系统路径。"

#: ../../library/pathlib.rst:48
msgid ""
"For low-level path manipulation on strings, you can also use the "
":mod:`os.path` module."
msgstr "对于底层的路径字符串操作，你也可以使用 :mod:`os.path` 模块。"

#: ../../library/pathlib.rst:53
msgid "Basic use"
msgstr "基础使用"

#: ../../library/pathlib.rst:55
msgid "Importing the main class::"
msgstr "导入主类::"

#: ../../library/pathlib.rst:57
msgid ">>> from pathlib import Path"
msgstr ">>> from pathlib import Path"

#: ../../library/pathlib.rst:59
msgid "Listing subdirectories::"
msgstr "列出子目录::"

#: ../../library/pathlib.rst:61
msgid ""
">>> p = Path('.')\n"
">>> [x for x in p.iterdir() if x.is_dir()]\n"
"[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),\n"
" PosixPath('__pycache__'), PosixPath('build')]"
msgstr ""
">>> p = Path('.')\n"
">>> [x for x in p.iterdir() if x.is_dir()]\n"
"[PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),\n"
" PosixPath('__pycache__'), PosixPath('build')]"

#: ../../library/pathlib.rst:66
msgid "Listing Python source files in this directory tree::"
msgstr "列出当前目录树下的所有 Python 源代码文件::"

#: ../../library/pathlib.rst:68
msgid ""
">>> list(p.glob('**/*.py'))\n"
"[PosixPath('test_pathlib.py'), PosixPath('setup.py'),\n"
" PosixPath('pathlib.py'), PosixPath('docs/conf.py'),\n"
" PosixPath('build/lib/pathlib.py')]"
msgstr ""
">>> list(p.glob('**/*.py'))\n"
"[PosixPath('test_pathlib.py'), PosixPath('setup.py'),\n"
" PosixPath('pathlib.py'), PosixPath('docs/conf.py'),\n"
" PosixPath('build/lib/pathlib.py')]"

#: ../../library/pathlib.rst:73
msgid "Navigating inside a directory tree::"
msgstr "在目录树中移动::"

#: ../../library/pathlib.rst:75
msgid ""
">>> p = Path('/etc')\n"
">>> q = p / 'init.d' / 'reboot'\n"
">>> q\n"
"PosixPath('/etc/init.d/reboot')\n"
">>> q.resolve()\n"
"PosixPath('/etc/rc.d/init.d/halt')"
msgstr ""
">>> p = Path('/etc')\n"
">>> q = p / 'init.d' / 'reboot'\n"
">>> q\n"
"PosixPath('/etc/init.d/reboot')\n"
">>> q.resolve()\n"
"PosixPath('/etc/rc.d/init.d/halt')"

#: ../../library/pathlib.rst:82
msgid "Querying path properties::"
msgstr "查询路径的属性::"

#: ../../library/pathlib.rst:84
msgid ""
">>> q.exists()\n"
"True\n"
">>> q.is_dir()\n"
"False"
msgstr ""
">>> q.exists()\n"
"True\n"
">>> q.is_dir()\n"
"False"

#: ../../library/pathlib.rst:89
msgid "Opening a file::"
msgstr "打开一个文件::"

#: ../../library/pathlib.rst:91
msgid ""
">>> with q.open() as f: f.readline()\n"
"...\n"
"'#!/bin/bash\\n'"
msgstr ""
">>> with q.open() as f: f.readline()\n"
"...\n"
"'#!/bin/bash\\n'"

#: ../../library/pathlib.rst:97
msgid "Exceptions"
msgstr "异常"

#: ../../library/pathlib.rst:101
msgid ""
"An exception inheriting :exc:`NotImplementedError` that is raised when an "
"unsupported operation is called on a path object."
msgstr "一个继承自 :exc:`NotImplementedError` 的异常，当在路径对象上调用不受支持的操作时它将被引发。"

#: ../../library/pathlib.rst:110
msgid "Pure paths"
msgstr "纯路径"

#: ../../library/pathlib.rst:112
msgid ""
"Pure path objects provide path-handling operations which don't actually "
"access a filesystem.  There are three ways to access these classes, which we"
" also call *flavours*:"
msgstr "纯路径对象提供了不实际访问文件系统的路径处理操作。有三种方式来访问这些类，也是不同的风格："

#: ../../library/pathlib.rst:118
msgid ""
"A generic class that represents the system's path flavour (instantiating it "
"creates either a :class:`PurePosixPath` or a :class:`PureWindowsPath`)::"
msgstr ""
"一个通用的类，代表当前系统的路径风格（实例化为 :class:`PurePosixPath` 或者 "
":class:`PureWindowsPath`）::"

#: ../../library/pathlib.rst:121
msgid ""
">>> PurePath('setup.py')      # Running on a Unix machine\n"
"PurePosixPath('setup.py')"
msgstr ""
">>> PurePath('setup.py')      # 在 Unix 机器上运行\n"
"PurePosixPath('setup.py')"

#: ../../library/pathlib.rst:124
msgid ""
"Each element of *pathsegments* can be either a string representing a path "
"segment, or an object implementing the :class:`os.PathLike` interface where "
"the :meth:`~os.PathLike.__fspath__` method returns a string, such as another"
" path object::"
msgstr ""
"*pathsegments* 的每个元素既可以是代表一个路径段的字符串，也可以是实现了 :class:`os.PathLike` 接口的对象，其中 "
":meth:`~os.PathLike.__fspath__` 方法返回一个字符串，例如另一个路径对象::"

#: ../../library/pathlib.rst:129
msgid ""
">>> PurePath('foo', 'some/path', 'bar')\n"
"PurePosixPath('foo/some/path/bar')\n"
">>> PurePath(Path('foo'), Path('bar'))\n"
"PurePosixPath('foo/bar')"
msgstr ""
">>> PurePath('foo', 'some/path', 'bar')\n"
"PurePosixPath('foo/some/path/bar')\n"
">>> PurePath(Path('foo'), Path('bar'))\n"
"PurePosixPath('foo/bar')"

#: ../../library/pathlib.rst:134
msgid "When *pathsegments* is empty, the current directory is assumed::"
msgstr "当 *pathsegments* 为空的时候，假定为当前目录::"

#: ../../library/pathlib.rst:136
msgid ""
">>> PurePath()\n"
"PurePosixPath('.')"
msgstr ""
">>> PurePath()\n"
"PurePosixPath('.')"

#: ../../library/pathlib.rst:139
msgid ""
"If a segment is an absolute path, all previous segments are ignored (like "
":func:`os.path.join`)::"
msgstr "如果某个段为绝对路径，则其前面的所有段都会被忽略 (类似 :func:`os.path.join`)::"

#: ../../library/pathlib.rst:142
msgid ""
">>> PurePath('/etc', '/usr', 'lib64')\n"
"PurePosixPath('/usr/lib64')\n"
">>> PureWindowsPath('c:/Windows', 'd:bar')\n"
"PureWindowsPath('d:bar')"
msgstr ""
">>> PurePath('/etc', '/usr', 'lib64')\n"
"PurePosixPath('/usr/lib64')\n"
">>> PureWindowsPath('c:/Windows', 'd:bar')\n"
"PureWindowsPath('d:bar')"

#: ../../library/pathlib.rst:147
msgid ""
"On Windows, the drive is not reset when a rooted relative path segment "
"(e.g., ``r'\\foo'``) is encountered::"
msgstr "在 Windows 上，当遇到带根符号的路径段 (如 ``r'\\foo'``) 时驱动器将不会被重置::"

#: ../../library/pathlib.rst:150
msgid ""
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"

#: ../../library/pathlib.rst:153
msgid ""
"Spurious slashes and single dots are collapsed, but double dots (``'..'``) "
"and leading double slashes (``'//'``) are not, since this would change the "
"meaning of a path for various reasons (e.g. symbolic links, UNC paths)::"
msgstr ""
"假斜杠和单个点号会被消除，但双点号 (``'..'``) 和打头的双斜杠 (``'//'``) 不会，因为这会出于各种原因改变路径的实际含义 "
"(例如符号链接、UNC 路径等)::"

#: ../../library/pathlib.rst:157
msgid ""
">>> PurePath('foo//bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('//foo/bar')\n"
"PurePosixPath('//foo/bar')\n"
">>> PurePath('foo/./bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('foo/../bar')\n"
"PurePosixPath('foo/../bar')"
msgstr ""
">>> PurePath('foo//bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('//foo/bar')\n"
"PurePosixPath('//foo/bar')\n"
">>> PurePath('foo/./bar')\n"
"PurePosixPath('foo/bar')\n"
">>> PurePath('foo/../bar')\n"
"PurePosixPath('foo/../bar')"

#: ../../library/pathlib.rst:166
msgid ""
"(a naïve approach would make ``PurePosixPath('foo/../bar')`` equivalent to "
"``PurePosixPath('bar')``, which is wrong if ``foo`` is a symbolic link to "
"another directory)"
msgstr ""
"（一个很 naïve 的做法是让 ``PurePosixPath('foo/../bar')`` 等同于 "
"``PurePosixPath('bar')``，如果 ``foo`` 是一个指向其他目录的符号链接那么这个做法就将出错）"

#: ../../library/pathlib.rst:170
msgid ""
"Pure path objects implement the :class:`os.PathLike` interface, allowing "
"them to be used anywhere the interface is accepted."
msgstr "纯路径对象实现了 :class:`os.PathLike` 接口，允许它们在任何接受此接口的地方使用。"

#: ../../library/pathlib.rst:173
msgid "Added support for the :class:`os.PathLike` interface."
msgstr "添加了 :class:`os.PathLike` 接口支持。"

#: ../../library/pathlib.rst:178
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents non-Windows "
"filesystem paths::"
msgstr "一个 :class:`PurePath` 的子类，路径风格不同于 Windows 文件系统::"

#: ../../library/pathlib.rst:181
msgid ""
">>> PurePosixPath('/etc/hosts')\n"
"PurePosixPath('/etc/hosts')"
msgstr ""
">>> PurePosixPath('/etc/hosts')\n"
"PurePosixPath('/etc/hosts')"

#: ../../library/pathlib.rst:184 ../../library/pathlib.rst:196
#: ../../library/pathlib.rst:779 ../../library/pathlib.rst:789
#: ../../library/pathlib.rst:804
msgid "*pathsegments* is specified similarly to :class:`PurePath`."
msgstr "*pathsegments* 参数的指定和 :class:`PurePath` 相同。"

#: ../../library/pathlib.rst:188
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents Windows "
"filesystem paths, including `UNC paths`_::"
msgstr ":class:`PurePath` 的一个子类，此路径风格代表 Windows 文件系统路径，包括 `UNC paths`_::"

#: ../../library/pathlib.rst:191
msgid ""
">>> PureWindowsPath('c:/', 'Users', 'Ximénez')\n"
"PureWindowsPath('c:/Users/Ximénez')\n"
">>> PureWindowsPath('//server/share/file')\n"
"PureWindowsPath('//server/share/file')"
msgstr ""
">>> PureWindowsPath('c:/', 'Users', 'Ximénez')\n"
"PureWindowsPath('c:/Users/Ximénez')\n"
">>> PureWindowsPath('//server/share/file')\n"
"PureWindowsPath('//server/share/file')"

#: ../../library/pathlib.rst:200
msgid ""
"Regardless of the system you're running on, you can instantiate all of these"
" classes, since they don't provide any operation that does system calls."
msgstr "无论你正运行什么系统，你都可以实例化这些类，因为它们提供的操作不做任何系统调用。"

#: ../../library/pathlib.rst:205
msgid "General properties"
msgstr "通用性质"

#: ../../library/pathlib.rst:207
msgid ""
"Paths are immutable and :term:`hashable`.  Paths of a same flavour are "
"comparable and orderable.  These properties respect the flavour's case-"
"folding semantics::"
msgstr "路径是不可变并且 :term:`hashable`。 相同风格的路径可以排序和比较。 这此特性会尊重对应风格的大小写转换语义。::"

#: ../../library/pathlib.rst:211
msgid ""
">>> PurePosixPath('foo') == PurePosixPath('FOO')\n"
"False\n"
">>> PureWindowsPath('foo') == PureWindowsPath('FOO')\n"
"True\n"
">>> PureWindowsPath('FOO') in { PureWindowsPath('foo') }\n"
"True\n"
">>> PureWindowsPath('C:') < PureWindowsPath('d:')\n"
"True"
msgstr ""
">>> PurePosixPath('foo') == PurePosixPath('FOO')\n"
"False\n"
">>> PureWindowsPath('foo') == PureWindowsPath('FOO')\n"
"True\n"
">>> PureWindowsPath('FOO') in { PureWindowsPath('foo') }\n"
"True\n"
">>> PureWindowsPath('C:') < PureWindowsPath('d:')\n"
"True"

#: ../../library/pathlib.rst:220
msgid "Paths of a different flavour compare unequal and cannot be ordered::"
msgstr "不同风格的路径比较得到不等的结果并且无法被排序::"

#: ../../library/pathlib.rst:222
msgid ""
">>> PureWindowsPath('foo') == PurePosixPath('foo')\n"
"False\n"
">>> PureWindowsPath('foo') < PurePosixPath('foo')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: '<' not supported between instances of 'PureWindowsPath' and 'PurePosixPath'"
msgstr ""
">>> PureWindowsPath('foo') == PurePosixPath('foo')\n"
"False\n"
">>> PureWindowsPath('foo') < PurePosixPath('foo')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: '<' not supported between instances of 'PureWindowsPath' and 'PurePosixPath'"

#: ../../library/pathlib.rst:231
msgid "Operators"
msgstr "运算符"

#: ../../library/pathlib.rst:233
msgid ""
"The slash operator helps create child paths, like :func:`os.path.join`. If "
"the argument is an absolute path, the previous path is ignored. On Windows, "
"the drive is not reset when the argument is a rooted relative path (e.g., "
"``r'\\foo'``)::"
msgstr ""
"斜杠操作符可以帮助创建子路径，如 :func:`os.path.join`。 如果参数为一个绝对路径，则之前的路径会被忽略。 在 Windows "
"上，当参数为一个带根符号的相对路径 (如 ``r'\\foo'``) 时驱动器将不会被重置::"

#: ../../library/pathlib.rst:238
msgid ""
">>> p = PurePath('/etc')\n"
">>> p\n"
"PurePosixPath('/etc')\n"
">>> p / 'init.d' / 'apache2'\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> q = PurePath('bin')\n"
">>> '/usr' / q\n"
"PurePosixPath('/usr/bin')\n"
">>> p / '/an_absolute_path'\n"
"PurePosixPath('/an_absolute_path')\n"
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""
">>> p = PurePath('/etc')\n"
">>> p\n"
"PurePosixPath('/etc')\n"
">>> p / 'init.d' / 'apache2'\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> q = PurePath('bin')\n"
">>> '/usr' / q\n"
"PurePosixPath('/usr/bin')\n"
">>> p / '/an_absolute_path'\n"
"PurePosixPath('/an_absolute_path')\n"
">>> PureWindowsPath('c:/Windows', '/Program Files')\n"
"PureWindowsPath('c:/Program Files')"

#: ../../library/pathlib.rst:251
msgid ""
"A path object can be used anywhere an object implementing "
":class:`os.PathLike` is accepted::"
msgstr "文件对象可用于任何接受 :class:`os.PathLike` 接口实现的地方。"

#: ../../library/pathlib.rst:254
msgid ""
">>> import os\n"
">>> p = PurePath('/etc')\n"
">>> os.fspath(p)\n"
"'/etc'"
msgstr ""
">>> import os\n"
">>> p = PurePath('/etc')\n"
">>> os.fspath(p)\n"
"'/etc'"

#: ../../library/pathlib.rst:259
msgid ""
"The string representation of a path is the raw filesystem path itself (in "
"native form, e.g. with backslashes under Windows), which you can pass to any"
" function taking a file path as a string::"
msgstr ""
"路径的字符串表示法为它自己原始的文件系统路径（以原生形式，例如在 Windows 下使用反斜杠）。你可以传递给任何需要字符串形式路径的函数。"

#: ../../library/pathlib.rst:263
msgid ""
">>> p = PurePath('/etc')\n"
">>> str(p)\n"
"'/etc'\n"
">>> p = PureWindowsPath('c:/Program Files')\n"
">>> str(p)\n"
"'c:\\\\Program Files'"
msgstr ""
">>> p = PurePath('/etc')\n"
">>> str(p)\n"
"'/etc'\n"
">>> p = PureWindowsPath('c:/Program Files')\n"
">>> str(p)\n"
"'c:\\\\Program Files'"

#: ../../library/pathlib.rst:270
msgid ""
"Similarly, calling :class:`bytes` on a path gives the raw filesystem path as"
" a bytes object, as encoded by :func:`os.fsencode`::"
msgstr ""
"类似地，在路径上调用 :class:`bytes` 将原始文件系统路径作为字节对象给出，就像被 :func:`os.fsencode` 编码一样::"

#: ../../library/pathlib.rst:273
msgid ""
">>> bytes(p)\n"
"b'/etc'"
msgstr ""
">>> bytes(p)\n"
"b'/etc'"

#: ../../library/pathlib.rst:277
msgid ""
"Calling :class:`bytes` is only recommended under Unix.  Under Windows, the "
"unicode form is the canonical representation of filesystem paths."
msgstr "只推荐在 Unix 下调用 :class:`bytes`。在 Windows， unicode 形式是文件系统路径的规范表示法。"

#: ../../library/pathlib.rst:282
msgid "Accessing individual parts"
msgstr "访问个别部分"

#: ../../library/pathlib.rst:284
msgid ""
"To access the individual \"parts\" (components) of a path, use the following"
" property:"
msgstr "为了访问路径独立的部分 （组件），使用以下特征属性："

#: ../../library/pathlib.rst:289
msgid "A tuple giving access to the path's various components::"
msgstr "一个元组，可以访问路径的多个组件::"

#: ../../library/pathlib.rst:291
msgid ""
">>> p = PurePath('/usr/bin/python3')\n"
">>> p.parts\n"
"('/', 'usr', 'bin', 'python3')\n"
"\n"
">>> p = PureWindowsPath('c:/Program Files/PSF')\n"
">>> p.parts\n"
"('c:\\\\', 'Program Files', 'PSF')"
msgstr ""
">>> p = PurePath('/usr/bin/python3')\n"
">>> p.parts\n"
"('/', 'usr', 'bin', 'python3')\n"
"\n"
">>> p = PureWindowsPath('c:/Program Files/PSF')\n"
">>> p.parts\n"
"('c:\\\\', 'Program Files', 'PSF')"

#: ../../library/pathlib.rst:299
msgid "(note how the drive and local root are regrouped in a single part)"
msgstr "（注意盘符和本地根目录是如何重组的）"

#: ../../library/pathlib.rst:303
msgid "Methods and properties"
msgstr "方法和特征属性"

#: ../../library/pathlib.rst:309
msgid "Pure paths provide the following methods and properties:"
msgstr "纯路径提供以下方法和特征属性："

#: ../../library/pathlib.rst:313
msgid ""
"The implementation of the :mod:`os.path` module used for low-level path "
"parsing and joining: either :mod:`posixpath` or :mod:`ntpath`."
msgstr "用于低层级路径解析与合并的 :mod:`os.path` 模块的实现: :mod:`posixpath` 或 :mod:`ntpath`。"

#: ../../library/pathlib.rst:320
msgid "A string representing the drive letter or name, if any::"
msgstr "一个表示驱动器盘符或命名的字符串，如果存在::"

#: ../../library/pathlib.rst:322
msgid ""
">>> PureWindowsPath('c:/Program Files/').drive\n"
"'c:'\n"
">>> PureWindowsPath('/Program Files/').drive\n"
"''\n"
">>> PurePosixPath('/etc').drive\n"
"''"
msgstr ""
">>> PureWindowsPath('c:/Program Files/').drive\n"
"'c:'\n"
">>> PureWindowsPath('/Program Files/').drive\n"
"''\n"
">>> PurePosixPath('/etc').drive\n"
"''"

#: ../../library/pathlib.rst:329
msgid "UNC shares are also considered drives::"
msgstr "UNC 分享也被认作驱动器::"

#: ../../library/pathlib.rst:331
msgid ""
">>> PureWindowsPath('//host/share/foo.txt').drive\n"
"'\\\\\\\\host\\\\share'"
msgstr ""
">>> PureWindowsPath('//host/share/foo.txt').drive\n"
"'\\\\\\\\host\\\\share'"

#: ../../library/pathlib.rst:336
msgid "A string representing the (local or global) root, if any::"
msgstr "一个表示（本地或全局）根的字符串，如果存在::"

#: ../../library/pathlib.rst:338
msgid ""
">>> PureWindowsPath('c:/Program Files/').root\n"
"'\\\\'\n"
">>> PureWindowsPath('c:Program Files/').root\n"
"''\n"
">>> PurePosixPath('/etc').root\n"
"'/'"
msgstr ""
">>> PureWindowsPath('c:/Program Files/').root\n"
"'\\\\'\n"
">>> PureWindowsPath('c:Program Files/').root\n"
"''\n"
">>> PurePosixPath('/etc').root\n"
"'/'"

#: ../../library/pathlib.rst:345
msgid "UNC shares always have a root::"
msgstr "UNC 分享一样拥有根::"

#: ../../library/pathlib.rst:347
msgid ""
">>> PureWindowsPath('//host/share').root\n"
"'\\\\'"
msgstr ""
">>> PureWindowsPath('//host/share').root\n"
"'\\\\'"

#: ../../library/pathlib.rst:350
msgid ""
"If the path starts with more than two successive slashes, "
":class:`~pathlib.PurePosixPath` collapses them::"
msgstr "如果路径以超过两个连续斜框打头，:class:`~pathlib.PurePosixPath` 会合并它们::"

#: ../../library/pathlib.rst:353
msgid ""
">>> PurePosixPath('//etc').root\n"
"'//'\n"
">>> PurePosixPath('///etc').root\n"
"'/'\n"
">>> PurePosixPath('////etc').root\n"
"'/'"
msgstr ""
">>> PurePosixPath('//etc').root\n"
"'//'\n"
">>> PurePosixPath('///etc').root\n"
"'/'\n"
">>> PurePosixPath('////etc').root\n"
"'/'"

#: ../../library/pathlib.rst:362
msgid ""
"This behavior conforms to *The Open Group Base Specifications Issue 6*, "
"paragraph `4.11 Pathname Resolution "
"<https://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11>`_:"
msgstr ""
"此行为符合 *The Open Group Base Specifications Issue 6*, paragraph `4.11 Pathname"
" Resolution "
"<https://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11>`_:"

#: ../../library/pathlib.rst:366
msgid ""
"*\"A pathname that begins with two successive slashes may be interpreted in "
"an implementation-defined manner, although more than two leading slashes "
"shall be treated as a single slash.\"*"
msgstr "*\"以连续两个斜杠打头的路径名可能会以具体实现所定义的方式被解读，但是两个以上的前缀斜杠则应当被当作一个斜杠来处理。\"*"

#: ../../library/pathlib.rst:372
msgid "The concatenation of the drive and root::"
msgstr "驱动器和根的联合::"

#: ../../library/pathlib.rst:374
msgid ""
">>> PureWindowsPath('c:/Program Files/').anchor\n"
"'c:\\\\'\n"
">>> PureWindowsPath('c:Program Files/').anchor\n"
"'c:'\n"
">>> PurePosixPath('/etc').anchor\n"
"'/'\n"
">>> PureWindowsPath('//host/share').anchor\n"
"'\\\\\\\\host\\\\share\\\\'"
msgstr ""
">>> PureWindowsPath('c:/Program Files/').anchor\n"
"'c:\\\\'\n"
">>> PureWindowsPath('c:Program Files/').anchor\n"
"'c:'\n"
">>> PurePosixPath('/etc').anchor\n"
"'/'\n"
">>> PureWindowsPath('//host/share').anchor\n"
"'\\\\\\\\host\\\\share\\\\'"

#: ../../library/pathlib.rst:386
msgid ""
"An immutable sequence providing access to the logical ancestors of the "
"path::"
msgstr "提供访问此路径的逻辑祖先的不可变序列::"

#: ../../library/pathlib.rst:389
msgid ""
">>> p = PureWindowsPath('c:/foo/bar/setup.py')\n"
">>> p.parents[0]\n"
"PureWindowsPath('c:/foo/bar')\n"
">>> p.parents[1]\n"
"PureWindowsPath('c:/foo')\n"
">>> p.parents[2]\n"
"PureWindowsPath('c:/')"
msgstr ""
">>> p = PureWindowsPath('c:/foo/bar/setup.py')\n"
">>> p.parents[0]\n"
"PureWindowsPath('c:/foo/bar')\n"
">>> p.parents[1]\n"
"PureWindowsPath('c:/foo')\n"
">>> p.parents[2]\n"
"PureWindowsPath('c:/')"

#: ../../library/pathlib.rst:397
msgid ""
"The parents sequence now supports :term:`slices <slice>` and negative index "
"values."
msgstr "parents 序列现在支持 :term:`切片 <slice>` 和负的索引值。"

#: ../../library/pathlib.rst:402
msgid "The logical parent of the path::"
msgstr "此路径的逻辑父路径::"

#: ../../library/pathlib.rst:404
msgid ""
">>> p = PurePosixPath('/a/b/c/d')\n"
">>> p.parent\n"
"PurePosixPath('/a/b/c')"
msgstr ""
">>> p = PurePosixPath('/a/b/c/d')\n"
">>> p.parent\n"
"PurePosixPath('/a/b/c')"

#: ../../library/pathlib.rst:408
msgid "You cannot go past an anchor, or empty path::"
msgstr "你不能超过一个 anchor 或空路径::"

#: ../../library/pathlib.rst:410
msgid ""
">>> p = PurePosixPath('/')\n"
">>> p.parent\n"
"PurePosixPath('/')\n"
">>> p = PurePosixPath('.')\n"
">>> p.parent\n"
"PurePosixPath('.')"
msgstr ""
">>> p = PurePosixPath('/')\n"
">>> p.parent\n"
"PurePosixPath('/')\n"
">>> p = PurePosixPath('.')\n"
">>> p.parent\n"
"PurePosixPath('.')"

#: ../../library/pathlib.rst:418
msgid "This is a purely lexical operation, hence the following behaviour::"
msgstr "这是一个单纯的词法操作，因此有以下行为::"

#: ../../library/pathlib.rst:420
msgid ""
">>> p = PurePosixPath('foo/..')\n"
">>> p.parent\n"
"PurePosixPath('foo')"
msgstr ""
">>> p = PurePosixPath('foo/..')\n"
">>> p.parent\n"
"PurePosixPath('foo')"

#: ../../library/pathlib.rst:424
msgid ""
"If you want to walk an arbitrary filesystem path upwards, it is recommended "
"to first call :meth:`Path.resolve` so as to resolve symlinks and eliminate "
"``\"..\"`` components."
msgstr "如果你想要向上遍历任意文件系统路径，建议首先调用 :meth:`Path.resolve` 以便解析符号链接并消除 ``\"..\"`` 部分。"

#: ../../library/pathlib.rst:431
msgid ""
"A string representing the final path component, excluding the drive and "
"root, if any::"
msgstr "一个表示最后路径组件的字符串，排除了驱动器与根目录，如果存在的话::"

#: ../../library/pathlib.rst:434
msgid ""
">>> PurePosixPath('my/library/setup.py').name\n"
"'setup.py'"
msgstr ""
">>> PurePosixPath('my/library/setup.py').name\n"
"'setup.py'"

#: ../../library/pathlib.rst:437
msgid "UNC drive names are not considered::"
msgstr "UNC 驱动器名不被考虑::"

#: ../../library/pathlib.rst:439
msgid ""
">>> PureWindowsPath('//some/share/setup.py').name\n"
"'setup.py'\n"
">>> PureWindowsPath('//some/share').name\n"
"''"
msgstr ""
">>> PureWindowsPath('//some/share/setup.py').name\n"
"'setup.py'\n"
">>> PureWindowsPath('//some/share').name\n"
"''"

#: ../../library/pathlib.rst:447
msgid "The last dot-separated portion of the final component, if any::"
msgstr "最后一个路径组件中以点分割的后一部分（如果有） ::"

#: ../../library/pathlib.rst:449
msgid ""
">>> PurePosixPath('my/library/setup.py').suffix\n"
"'.py'\n"
">>> PurePosixPath('my/library.tar.gz').suffix\n"
"'.gz'\n"
">>> PurePosixPath('my/library').suffix\n"
"''"
msgstr ""
">>> PurePosixPath('my/library/setup.py').suffix\n"
"'.py'\n"
">>> PurePosixPath('my/library.tar.gz').suffix\n"
"'.gz'\n"
">>> PurePosixPath('my/library').suffix\n"
"''"

#: ../../library/pathlib.rst:456
msgid "This is commonly called the file extension."
msgstr "这通常被称作文件扩展名。"

#: ../../library/pathlib.rst:460 ../../library/pathlib.rst:475
msgid "A single dot (\"``.``\") is considered a valid suffix."
msgstr "一个单独点号 (\"``.``\") 会被视为有效的前缀。"

#: ../../library/pathlib.rst:464
msgid "A list of the path's suffixes, often called file extensions::"
msgstr "由路径后缀组成的列表，经常被称作文件扩展名::"

#: ../../library/pathlib.rst:466
msgid ""
">>> PurePosixPath('my/library.tar.gar').suffixes\n"
"['.tar', '.gar']\n"
">>> PurePosixPath('my/library.tar.gz').suffixes\n"
"['.tar', '.gz']\n"
">>> PurePosixPath('my/library').suffixes\n"
"[]"
msgstr ""
">>> PurePosixPath('my/library.tar.gar').suffixes\n"
"['.tar', '.gar']\n"
">>> PurePosixPath('my/library.tar.gz').suffixes\n"
"['.tar', '.gz']\n"
">>> PurePosixPath('my/library').suffixes\n"
"[]"

#: ../../library/pathlib.rst:480
msgid "The final path component, without its suffix::"
msgstr "最后一个路径组件，除去后缀::"

#: ../../library/pathlib.rst:482
msgid ""
">>> PurePosixPath('my/library.tar.gz').stem\n"
"'library.tar'\n"
">>> PurePosixPath('my/library.tar').stem\n"
"'library'\n"
">>> PurePosixPath('my/library').stem\n"
"'library'"
msgstr ""
">>> PurePosixPath('my/library.tar.gz').stem\n"
"'library.tar'\n"
">>> PurePosixPath('my/library.tar').stem\n"
"'library'\n"
">>> PurePosixPath('my/library').stem\n"
"'library'"

#: ../../library/pathlib.rst:492
msgid ""
"Return a string representation of the path with forward slashes (``/``)::"
msgstr "返回使用正斜杠（``/``）的路径字符串::"

#: ../../library/pathlib.rst:494
msgid ""
">>> p = PureWindowsPath('c:\\\\windows')\n"
">>> str(p)\n"
"'c:\\\\windows'\n"
">>> p.as_posix()\n"
"'c:/windows'"
msgstr ""
">>> p = PureWindowsPath('c:\\\\windows')\n"
">>> str(p)\n"
"'c:\\\\windows'\n"
">>> p.as_posix()\n"
"'c:/windows'"

#: ../../library/pathlib.rst:503
msgid ""
"Return whether the path is absolute or not.  A path is considered absolute "
"if it has both a root and (if the flavour allows) a drive::"
msgstr "返回此路径是否为绝对路径。如果路径同时拥有驱动器符与根路径（如果风格允许）则将被认作绝对路径。"

#: ../../library/pathlib.rst:506
msgid ""
">>> PurePosixPath('/a/b').is_absolute()\n"
"True\n"
">>> PurePosixPath('a/b').is_absolute()\n"
"False\n"
"\n"
">>> PureWindowsPath('c:/a/b').is_absolute()\n"
"True\n"
">>> PureWindowsPath('/a/b').is_absolute()\n"
"False\n"
">>> PureWindowsPath('c:').is_absolute()\n"
"False\n"
">>> PureWindowsPath('//some/share').is_absolute()\n"
"True"
msgstr ""
">>> PurePosixPath('/a/b').is_absolute()\n"
"True\n"
">>> PurePosixPath('a/b').is_absolute()\n"
"False\n"
"\n"
">>> PureWindowsPath('c:/a/b').is_absolute()\n"
"True\n"
">>> PureWindowsPath('/a/b').is_absolute()\n"
"False\n"
">>> PureWindowsPath('c:').is_absolute()\n"
"False\n"
">>> PureWindowsPath('//some/share').is_absolute()\n"
"True"

#: ../../library/pathlib.rst:523
msgid "Return whether or not this path is relative to the *other* path."
msgstr "返回此路径是否相对于 *other* 的路径。"

#: ../../library/pathlib.rst:531
msgid ""
"This method is string-based; it neither accesses the filesystem nor treats "
"\"``..``\" segments specially. The following code is equivalent:"
msgstr "此方法是基于字符串的；它不会访问文件系统也不会对 \"``..``\" 部分进行特殊处理。 以下代码是等价的："

#: ../../library/pathlib.rst:542
msgid ""
"Passing additional arguments is deprecated; if supplied, they are joined "
"with *other*."
msgstr "传入附加参数的做法已被弃用；如果提供了附加参数，它们将与 *other* 合并。"

#: ../../library/pathlib.rst:547
msgid ""
"With :class:`PureWindowsPath`, return ``True`` if the path is considered "
"reserved under Windows, ``False`` otherwise.  With :class:`PurePosixPath`, "
"``False`` is always returned."
msgstr ""
"在 :class:`PureWindowsPath`，如果路径是被 Windows 保留的则返回 ``True``，否则 ``False``。在 "
":class:`PurePosixPath`，总是返回 ``False``。"

#: ../../library/pathlib.rst:551
msgid ""
"Windows path names that contain a colon, or end with a dot or a space, are "
"considered reserved. UNC paths may be reserved."
msgstr "Windows 的含有一个冒号或以点或空格结尾的路径名是被认为是被保留的。 UNC 路径也可能被保留。"

#: ../../library/pathlib.rst:555
msgid ""
"This method is deprecated; use :func:`os.path.isreserved` to detect reserved"
" paths on Windows."
msgstr "此方法已被弃用；使用 :func:`os.path.isreserved` 以鉴别在 Windows 下的保留路径。"

#: ../../library/pathlib.rst:561
msgid ""
"Calling this method is equivalent to combining the path with each of the "
"given *pathsegments* in turn::"
msgstr "调用此方法等同于依次将路径与给定的每个 *pathsegments* 组合到一起::"

#: ../../library/pathlib.rst:564
msgid ""
">>> PurePosixPath('/etc').joinpath('passwd')\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath(PurePosixPath('passwd'))\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath('init.d', 'apache2')\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> PureWindowsPath('c:').joinpath('/Program Files')\n"
"PureWindowsPath('c:/Program Files')"
msgstr ""
">>> PurePosixPath('/etc').joinpath('passwd')\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath(PurePosixPath('passwd'))\n"
"PurePosixPath('/etc/passwd')\n"
">>> PurePosixPath('/etc').joinpath('init.d', 'apache2')\n"
"PurePosixPath('/etc/init.d/apache2')\n"
">>> PureWindowsPath('c:').joinpath('/Program Files')\n"
"PureWindowsPath('c:/Program Files')"

#: ../../library/pathlib.rst:576
msgid ""
"Match this path against the provided glob-style pattern.  Return ``True`` if"
" matching is successful, ``False`` otherwise.  For example::"
msgstr "将此路径与所提供的 glob 样式匹配。如果匹配成功，则返回``True``，否则返回``False``。例如::"

#: ../../library/pathlib.rst:579
msgid ""
">>> PurePath('a/b.py').full_match('a/*.py')\n"
"True\n"
">>> PurePath('a/b.py').full_match('*.py')\n"
"False\n"
">>> PurePath('/a/b/c.py').full_match('/a/**')\n"
"True\n"
">>> PurePath('/a/b/c.py').full_match('**/*.py')\n"
"True"
msgstr ""
">>> PurePath('a/b.py').full_match('a/*.py')\n"
"True\n"
">>> PurePath('a/b.py').full_match('*.py')\n"
"False\n"
">>> PurePath('/a/b/c.py').full_match('/a/**')\n"
"True\n"
">>> PurePath('/a/b/c.py').full_match('**/*.py')\n"
"True"

#: ../../library/pathlib.rst:589 ../../library/pathlib.rst:1349
msgid ":ref:`pathlib-pattern-language` documentation."
msgstr ":ref:`pathlib-pattern-language` 文档。"

#: ../../library/pathlib.rst:591
msgid "As with other methods, case-sensitivity follows platform defaults::"
msgstr "与其他方法一样，是否大小写敏感遵循平台的默认规则::"

#: ../../library/pathlib.rst:593
msgid ""
">>> PurePosixPath('b.py').full_match('*.PY')\n"
"False\n"
">>> PureWindowsPath('b.py').full_match('*.PY')\n"
"True"
msgstr ""
">>> PurePosixPath('b.py').full_match('*.PY')\n"
"False\n"
">>> PureWindowsPath('b.py').full_match('*.PY')\n"
"True"

#: ../../library/pathlib.rst:598
msgid ""
"Set *case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr "将 *case_sensitive* 设为 ``True`` 或 ``False`` 来覆盖此行为。"

#: ../../library/pathlib.rst:605
msgid ""
"Match this path against the provided non-recursive glob-style pattern. "
"Return ``True`` if matching is successful, ``False`` otherwise."
msgstr "将此路径与所提供的非递归 glob 样式匹配。如果匹配成功，则返回``True``，否则返回``False``。"

#: ../../library/pathlib.rst:608
msgid ""
"This method is similar to :meth:`~PurePath.full_match`, but empty patterns "
"aren't allowed (:exc:`ValueError` is raised), the recursive wildcard "
"\"``**``\" isn't supported (it acts like non-recursive \"``*``\"), and if a "
"relative pattern is provided, then matching is done from the right::"
msgstr ""
"此方法与 :meth:`~PurePath.full_match` 类似，但不允许空模式 (将引发 "
":exc:`ValueError`)，也不支持递归通配符 \"``**``\" (将视为非递归的 "
"\"``*``\")，并且如果提供了一个相对格式，则将从右开始匹配::"

#: ../../library/pathlib.rst:613
msgid ""
">>> PurePath('a/b.py').match('*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('b/*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('a/*.py')\n"
"False"
msgstr ""
">>> PurePath('a/b.py').match('*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('b/*.py')\n"
"True\n"
">>> PurePath('/a/b/c.py').match('a/*.py')\n"
"False"

#: ../../library/pathlib.rst:620 ../../library/pathlib.rst:1368
#: ../../library/pathlib.rst:1393
msgid "The *pattern* parameter accepts a :term:`path-like object`."
msgstr "*pattern* 形参接受一个 :term:`path-like object`。"

#: ../../library/pathlib.rst:623 ../../library/pathlib.rst:1362
#: ../../library/pathlib.rst:1387
msgid "The *case_sensitive* parameter was added."
msgstr "增加了 *case_sensitive* 形参。"

#: ../../library/pathlib.rst:629
msgid ""
"Compute a version of this path relative to the path represented by *other*."
"  If it's impossible, :exc:`ValueError` is raised::"
msgstr "计算此路径相对于 *other* 所表示路径的版本。 如果不可计算，则引发 :exc:`ValueError`::"

#: ../../library/pathlib.rst:632
msgid ""
">>> p = PurePosixPath('/etc/passwd')\n"
">>> p.relative_to('/')\n"
"PurePosixPath('etc/passwd')\n"
">>> p.relative_to('/etc')\n"
"PurePosixPath('passwd')\n"
">>> p.relative_to('/usr')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not in the subpath of '/usr' OR one path is relative and the other is absolute."
msgstr ""
">>> p = PurePosixPath('/etc/passwd')\n"
">>> p.relative_to('/')\n"
"PurePosixPath('etc/passwd')\n"
">>> p.relative_to('/etc')\n"
"PurePosixPath('passwd')\n"
">>> p.relative_to('/usr')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not in the subpath of '/usr' OR one path is relative and the other is absolute."

#: ../../library/pathlib.rst:644
msgid ""
"When *walk_up* is false (the default), the path must start with *other*. "
"When the argument is true, ``..`` entries may be added to form the relative "
"path. In all other cases, such as the paths referencing different drives, "
":exc:`ValueError` is raised.::"
msgstr ""
"当 *walk_up* 为（默认的）假值时，路径必须以 *other* 开始。 当参数为真值时，可能会添加 ``..`` 条目以形成相对路径。 "
"在所有其他情况下，例如路径引用了不同的驱动器，则会引发 :exc:`ValueError`。::"

#: ../../library/pathlib.rst:649
msgid ""
">>> p.relative_to('/usr', walk_up=True)\n"
"PurePosixPath('../etc/passwd')\n"
">>> p.relative_to('foo', walk_up=True)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not on the same drive as 'foo' OR one path is relative and the other is absolute."
msgstr ""
">>> p.relative_to('/usr', walk_up=True)\n"
"PurePosixPath('../etc/passwd')\n"
">>> p.relative_to('foo', walk_up=True)\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 941, in relative_to\n"
"    raise ValueError(error_message.format(str(self), str(formatted)))\n"
"ValueError: '/etc/passwd' is not on the same drive as 'foo' OR one path is relative and the other is absolute."

#: ../../library/pathlib.rst:659
msgid ""
"This function is part of :class:`PurePath` and works with strings. It does "
"not check or access the underlying file structure. This can impact the "
"*walk_up* option as it assumes that no symlinks are present in the path; "
"call :meth:`~Path.resolve` first if necessary to resolve symlinks."
msgstr ""
"该函数是 :class:`PurePath` 的一部分并适用于字符串。 它不会检查或访问下层的文件结构体。 这可能会影响 *walk_up* "
"选项因为它假定路径中不存在符号链接；如果需要处理符号链接请先调用 :meth:`~Path.resolve`。"

#: ../../library/pathlib.rst:665
msgid ""
"The *walk_up* parameter was added (old behavior is the same as "
"``walk_up=False``)."
msgstr "增加了 *walk_up* 形参数（原本的行为与 ``walk_up=False`` 相同）。"

#: ../../library/pathlib.rst:670
msgid ""
"Passing additional positional arguments is deprecated; if supplied, they are"
" joined with *other*."
msgstr "传入附加位置参数的做法已被弃用；如果提供的话，它们将与 *other* 合并。"

#: ../../library/pathlib.rst:675
msgid ""
"Return a new path with the :attr:`name` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr "返回一个新的路径并修改 :attr:`name`。如果原本路径没有 name，ValueError 被抛出::"

#: ../../library/pathlib.rst:678
msgid ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_name('setup.py')\n"
"PureWindowsPath('c:/Downloads/setup.py')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_name('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 751, in with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"
msgstr ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_name('setup.py')\n"
"PureWindowsPath('c:/Downloads/setup.py')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_name('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 751, in with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"

#: ../../library/pathlib.rst:692
msgid ""
"Return a new path with the :attr:`stem` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr "返回一个带有修改后 :attr:`stem` 的新路径。 如果原路径没有名称，则会引发 ValueError::"

#: ../../library/pathlib.rst:695
msgid ""
">>> p = PureWindowsPath('c:/Downloads/draft.txt')\n"
">>> p.with_stem('final')\n"
"PureWindowsPath('c:/Downloads/final.txt')\n"
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_stem('lib')\n"
"PureWindowsPath('c:/Downloads/lib.gz')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_stem('')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 861, in with_stem\n"
"    return self.with_name(stem + self.suffix)\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 851, in with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"
msgstr ""
">>> p = PureWindowsPath('c:/Downloads/draft.txt')\n"
">>> p.with_stem('final')\n"
"PureWindowsPath('c:/Downloads/final.txt')\n"
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_stem('lib')\n"
"PureWindowsPath('c:/Downloads/lib.gz')\n"
">>> p = PureWindowsPath('c:/')\n"
">>> p.with_stem('')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 861, in with_stem\n"
"    return self.with_name(stem + self.suffix)\n"
"  File \"/home/antoine/cpython/default/Lib/pathlib.py\", line 851, in with_name\n"
"    raise ValueError(\"%r has an empty name\" % (self,))\n"
"ValueError: PureWindowsPath('c:/') has an empty name"

#: ../../library/pathlib.rst:716
msgid ""
"Return a new path with the :attr:`suffix` changed.  If the original path "
"doesn't have a suffix, the new *suffix* is appended instead.  If the "
"*suffix* is an empty string, the original suffix is removed::"
msgstr ""
"返回一个新的路径并修改 :attr:`suffix`。如果原本的路径没有后缀，新的 *suffix* 则被追加以代替。如果 *suffix* "
"是空字符串，则原本的后缀被移除::"

#: ../../library/pathlib.rst:720
msgid ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_suffix('.bz2')\n"
"PureWindowsPath('c:/Downloads/pathlib.tar.bz2')\n"
">>> p = PureWindowsPath('README')\n"
">>> p.with_suffix('.txt')\n"
"PureWindowsPath('README.txt')\n"
">>> p = PureWindowsPath('README.txt')\n"
">>> p.with_suffix('')\n"
"PureWindowsPath('README')"
msgstr ""
">>> p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\n"
">>> p.with_suffix('.bz2')\n"
"PureWindowsPath('c:/Downloads/pathlib.tar.bz2')\n"
">>> p = PureWindowsPath('README')\n"
">>> p.with_suffix('.txt')\n"
"PureWindowsPath('README.txt')\n"
">>> p = PureWindowsPath('README.txt')\n"
">>> p.with_suffix('')\n"
"PureWindowsPath('README')"

#: ../../library/pathlib.rst:732
msgid ""
"A single dot (\"``.``\") is considered a valid suffix. In previous versions,"
" :exc:`ValueError` is raised if a single dot is supplied."
msgstr "单个点号 (\"``.``\") 会被视为合法的后缀。 在之前版本中，如果提供单个点号则会引发 :exc:`ValueError`。"

#: ../../library/pathlib.rst:738
msgid ""
"Create a new path object of the same type by combining the given "
"*pathsegments*. This method is called whenever a derivative path is created,"
" such as from :attr:`parent` and :meth:`relative_to`. Subclasses may "
"override this method to pass information to derivative paths, for example::"
msgstr ""
"通过组合给定的 *pathsegments* 创建一个相同类型的新路径对象。 每当创建派生路径，如从 :attr:`parent` 和 "
":meth:`relative_to` 创建时都会调用此方法。 子类可以覆盖此方法以便向派生路径传递信息，例如::"

#: ../../library/pathlib.rst:743
msgid ""
"from pathlib import PurePosixPath\n"
"\n"
"class MyPath(PurePosixPath):\n"
"    def __init__(self, *pathsegments, session_id):\n"
"        super().__init__(*pathsegments)\n"
"        self.session_id = session_id\n"
"\n"
"    def with_segments(self, *pathsegments):\n"
"        return type(self)(*pathsegments, session_id=self.session_id)\n"
"\n"
"etc = MyPath('/etc', session_id=42)\n"
"hosts = etc / 'hosts'\n"
"print(hosts.session_id)  # 42"
msgstr ""
"from pathlib import PurePosixPath\n"
"\n"
"class MyPath(PurePosixPath):\n"
"    def __init__(self, *pathsegments, session_id):\n"
"        super().__init__(*pathsegments)\n"
"        self.session_id = session_id\n"
"\n"
"    def with_segments(self, *pathsegments):\n"
"        return type(self)(*pathsegments, session_id=self.session_id)\n"
"\n"
"etc = MyPath('/etc', session_id=42)\n"
"hosts = etc / 'hosts'\n"
"print(hosts.session_id)  # 42"

#: ../../library/pathlib.rst:764
msgid "Concrete paths"
msgstr "具体路径"

#: ../../library/pathlib.rst:766
msgid ""
"Concrete paths are subclasses of the pure path classes.  In addition to "
"operations provided by the latter, they also provide methods to do system "
"calls on path objects.  There are three ways to instantiate concrete paths:"
msgstr "具体路径是纯路径的子类。除了后者提供的操作之外，它们还提供了对路径对象进行系统调用的方法。有三种方法可以实例化具体路径::"

#: ../../library/pathlib.rst:772
msgid ""
"A subclass of :class:`PurePath`, this class represents concrete paths of the"
" system's path flavour (instantiating it creates either a :class:`PosixPath`"
" or a :class:`WindowsPath`)::"
msgstr ""
"一个 :class:`PurePath` 的子类，此类以当前系统的路径风格表示路径（实例化为 :class:`PosixPath` 或 "
":class:`WindowsPath`）::"

#: ../../library/pathlib.rst:776
msgid ""
">>> Path('setup.py')\n"
"PosixPath('setup.py')"
msgstr ""
">>> Path('setup.py')\n"
"PosixPath('setup.py')"

#: ../../library/pathlib.rst:783
msgid ""
"A subclass of :class:`Path` and :class:`PurePosixPath`, this class "
"represents concrete non-Windows filesystem paths::"
msgstr ""
"一个 :class:`Path` 和 :class:`PurePosixPath` 的子类，此类表示一个非 Windows 文件系统的具体路径::"

#: ../../library/pathlib.rst:786
msgid ""
">>> PosixPath('/etc/hosts')\n"
"PosixPath('/etc/hosts')"
msgstr ""
">>> PosixPath('/etc/hosts')\n"
"PosixPath('/etc/hosts')"

#: ../../library/pathlib.rst:791
msgid ""
"Raises :exc:`UnsupportedOperation` on Windows. In previous versions, "
":exc:`NotImplementedError` was raised instead."
msgstr ""
"在 Windows 上引发 :exc:`UnsupportedOperation`。 在之前版本中，则为引发 "
":exc:`NotImplementedError`。"

#: ../../library/pathlib.rst:798
msgid ""
"A subclass of :class:`Path` and :class:`PureWindowsPath`, this class "
"represents concrete Windows filesystem paths::"
msgstr ""
":class:`Path` 和 :class:`PureWindowsPath` 的子类，从类表示一个 Windows 文件系统的具体路径::"

#: ../../library/pathlib.rst:801
msgid ""
">>> WindowsPath('c:/', 'Users', 'Ximénez')\n"
"WindowsPath('c:/Users/Ximénez')"
msgstr ""
">>> WindowsPath('c:/', 'Users', 'Ximénez')\n"
"WindowsPath('c:/Users/Ximénez')"

#: ../../library/pathlib.rst:806
msgid ""
"Raises :exc:`UnsupportedOperation` on non-Windows platforms. In previous "
"versions, :exc:`NotImplementedError` was raised instead."
msgstr ""
"在非 Windows 平台上引发 :exc:`UnsupportedOperation`。 在之前版本中，则为引发 "
":exc:`NotImplementedError`。"

#: ../../library/pathlib.rst:811
msgid ""
"You can only instantiate the class flavour that corresponds to your system "
"(allowing system calls on non-compatible path flavours could lead to bugs or"
" failures in your application)::"
msgstr "你只能实例化与当前系统风格相同的类（允许系统调用作用于不兼容的路径风格可能在应用程序中导致缺陷或失败）::"

#: ../../library/pathlib.rst:815
msgid ""
">>> import os\n"
">>> os.name\n"
"'posix'\n"
">>> Path('setup.py')\n"
"PosixPath('setup.py')\n"
">>> PosixPath('setup.py')\n"
"PosixPath('setup.py')\n"
">>> WindowsPath('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 798, in __new__\n"
"    % (cls.__name__,))\n"
"UnsupportedOperation: cannot instantiate 'WindowsPath' on your system"
msgstr ""
">>> import os\n"
">>> os.name\n"
"'posix'\n"
">>> Path('setup.py')\n"
"PosixPath('setup.py')\n"
">>> PosixPath('setup.py')\n"
"PosixPath('setup.py')\n"
">>> WindowsPath('setup.py')\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"pathlib.py\", line 798, in __new__\n"
"    % (cls.__name__,))\n"
"UnsupportedOperation: cannot instantiate 'WindowsPath' on your system"

#: ../../library/pathlib.rst:829
msgid ""
"Some concrete path methods can raise an :exc:`OSError` if a system call "
"fails (for example because the path doesn't exist)."
msgstr "某些具体路径方法在一个系统调用失败时（例如由于路径不存在）可能引发 :exc:`OSError`。"

#: ../../library/pathlib.rst:834
msgid "Parsing and generating URIs"
msgstr "解析和生成 URI"

#: ../../library/pathlib.rst:836
msgid ""
"Concrete path objects can be created from, and represented as, 'file' URIs "
"conforming to :rfc:`8089`."
msgstr "具体路径对象可基于符合 :rfc:`8089` 的 '文件' URI 来创建，并可用它来表示。"

#: ../../library/pathlib.rst:841
msgid ""
"File URIs are not portable across machines with different :ref:`filesystem "
"encodings <filesystem-encoding>`."
msgstr "文件 URI 不能在具有不同 :ref:`文件系统编码格式 <filesystem-encoding>` 的机器之间进行移植。"

#: ../../library/pathlib.rst:846
msgid "Return a new path object from parsing a 'file' URI. For example::"
msgstr "通过解析一个 '文件' URI 来返回新的路径对象。 例如::"

#: ../../library/pathlib.rst:848
msgid ""
">>> p = Path.from_uri('file:///etc/hosts')\n"
"PosixPath('/etc/hosts')"
msgstr ""
">>> p = Path.from_uri('file:///etc/hosts')\n"
"PosixPath('/etc/hosts')"

#: ../../library/pathlib.rst:851
msgid "On Windows, DOS device and UNC paths may be parsed from URIs::"
msgstr "在 Windows 上，可以基于 URI 来解析 DOS 设备和 UNC 路径::"

#: ../../library/pathlib.rst:853
msgid ""
">>> p = Path.from_uri('file:///c:/windows')\n"
"WindowsPath('c:/windows')\n"
">>> p = Path.from_uri('file://server/share')\n"
"WindowsPath('//server/share')"
msgstr ""
">>> p = Path.from_uri('file:///c:/windows')\n"
"WindowsPath('c:/windows')\n"
">>> p = Path.from_uri('file://server/share')\n"
"WindowsPath('//server/share')"

#: ../../library/pathlib.rst:858
msgid "Several variant forms are supported::"
msgstr "某些变化形式也是受支持的::"

#: ../../library/pathlib.rst:860
msgid ""
">>> p = Path.from_uri('file:////server/share')\n"
"WindowsPath('//server/share')\n"
">>> p = Path.from_uri('file://///server/share')\n"
"WindowsPath('//server/share')\n"
">>> p = Path.from_uri('file:c:/windows')\n"
"WindowsPath('c:/windows')\n"
">>> p = Path.from_uri('file:/c|/windows')\n"
"WindowsPath('c:/windows')"
msgstr ""
">>> p = Path.from_uri('file:////server/share')\n"
"WindowsPath('//server/share')\n"
">>> p = Path.from_uri('file://///server/share')\n"
"WindowsPath('//server/share')\n"
">>> p = Path.from_uri('file:c:/windows')\n"
"WindowsPath('c:/windows')\n"
">>> p = Path.from_uri('file:/c|/windows')\n"
"WindowsPath('c:/windows')"

#: ../../library/pathlib.rst:869
msgid ""
":exc:`ValueError` is raised if the URI does not start with ``file:``, or the"
" parsed path isn't absolute."
msgstr "如果 URI 不是以 ``file:`` 开头，或者被解析的不是绝对路径则会引发 :exc:`ValueError`。"

#: ../../library/pathlib.rst:874
msgid ""
"The URL authority is discarded if it matches the local hostname. Otherwise, "
"if the authority isn't empty or ``localhost``, then on Windows a UNC path is"
" returned (as before), and on other platforms a :exc:`ValueError` is raised."
msgstr ""

#: ../../library/pathlib.rst:883
msgid ""
"Represent the path as a 'file' URI.  :exc:`ValueError` is raised if the path"
" isn't absolute."
msgstr "将路径表示为 'file' URI。 如果路径不是绝对路径则会引发 :exc:`ValueError`。"

#: ../../library/pathlib.rst:886
msgid ""
">>> p = PosixPath('/etc/passwd')\n"
">>> p.as_uri()\n"
"'file:///etc/passwd'\n"
">>> p = WindowsPath('c:/Windows')\n"
">>> p.as_uri()\n"
"'file:///c:/Windows'"
msgstr ""
">>> p = PosixPath('/etc/passwd')\n"
">>> p.as_uri()\n"
"'file:///etc/passwd'\n"
">>> p = WindowsPath('c:/Windows')\n"
">>> p.as_uri()\n"
"'file:///c:/Windows'"

#: ../../library/pathlib.rst:897
msgid ""
"Calling this method from :class:`PurePath` rather than :class:`Path` is "
"possible but deprecated. The method's use of :func:`os.fsencode` makes it "
"strictly impure."
msgstr ""

#: ../../library/pathlib.rst:903
msgid "Expanding and resolving paths"
msgstr "扩展和计算路径"

#: ../../library/pathlib.rst:907
msgid ""
"Return a new path object representing the user's home directory (as returned"
" by :func:`os.path.expanduser` with ``~`` construct). If the home directory "
"can't be resolved, :exc:`RuntimeError` is raised."
msgstr ""
"返回一个表示用户家目录的新路径对象（与带 ``~`` 构造的 :func:`os.path.expanduser` 所返回的相同）。 "
"如果无法解析家目录，则会引发 :exc:`RuntimeError`。"

#: ../../library/pathlib.rst:913
msgid ""
">>> Path.home()\n"
"PosixPath('/home/antoine')"
msgstr ""
">>> Path.home()\n"
"PosixPath('/home/antoine')"

#: ../../library/pathlib.rst:921
msgid ""
"Return a new path with expanded ``~`` and ``~user`` constructs, as returned "
"by :meth:`os.path.expanduser`. If a home directory can't be resolved, "
":exc:`RuntimeError` is raised."
msgstr ""
"返回带有扩展 ``~`` 和 ``~user`` 构造的新路径，与 :meth:`os.path.expanduser` 所返回的相同。 "
"如果无法解析家目录，则会引发 :exc:`RuntimeError`。"

#: ../../library/pathlib.rst:927
msgid ""
">>> p = PosixPath('~/films/Monty Python')\n"
">>> p.expanduser()\n"
"PosixPath('/home/eric/films/Monty Python')"
msgstr ""
">>> p = PosixPath('~/films/Monty Python')\n"
">>> p.expanduser()\n"
"PosixPath('/home/eric/films/Monty Python')"

#: ../../library/pathlib.rst:936
msgid ""
"Return a new path object representing the current directory (as returned by "
":func:`os.getcwd`)::"
msgstr "返回一个新的表示当前目录的路径对象（和 :func:`os.getcwd` 返回的相同）::"

#: ../../library/pathlib.rst:939
msgid ""
">>> Path.cwd()\n"
"PosixPath('/home/antoine/pathlib')"
msgstr ""
">>> Path.cwd()\n"
"PosixPath('/home/antoine/pathlib')"

#: ../../library/pathlib.rst:945
msgid ""
"Make the path absolute, without normalization or resolving symlinks. Returns"
" a new path object::"
msgstr "改为绝对路径，不会执行正规化或解析符号链接。 返回一个新的路径对象::"

#: ../../library/pathlib.rst:948
msgid ""
">>> p = Path('tests')\n"
">>> p\n"
"PosixPath('tests')\n"
">>> p.absolute()\n"
"PosixPath('/home/antoine/pathlib/tests')"
msgstr ""
">>> p = Path('tests')\n"
">>> p\n"
"PosixPath('tests')\n"
">>> p.absolute()\n"
"PosixPath('/home/antoine/pathlib/tests')"

#: ../../library/pathlib.rst:957
msgid ""
"Make the path absolute, resolving any symlinks.  A new path object is "
"returned::"
msgstr "将路径绝对化，解析任何符号链接。返回新的路径对象::"

#: ../../library/pathlib.rst:960
msgid ""
">>> p = Path()\n"
">>> p\n"
"PosixPath('.')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib')"
msgstr ""
">>> p = Path()\n"
">>> p\n"
"PosixPath('.')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib')"

#: ../../library/pathlib.rst:966
msgid ""
"\"``..``\" components are also eliminated (this is the only method to do "
"so)::"
msgstr "\"``..``\" 组件也将被消除（只有这一种方法这么做）::"

#: ../../library/pathlib.rst:968
msgid ""
">>> p = Path('docs/../setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')"
msgstr ""
">>> p = Path('docs/../setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')"

#: ../../library/pathlib.rst:972
msgid ""
"If a path doesn't exist or a symlink loop is encountered, and *strict* is "
"``True``, :exc:`OSError` is raised.  If *strict* is ``False``, the path is "
"resolved as far as possible and any remainder is appended without checking "
"whether it exists."
msgstr ""
"如果一个路径不存在或是遇到了符号链接循环，并且 *strict* 为 ``True``，则会引发 :exc:`OSError`。 如果 *strict*"
" 为 ``False``，则会尽可能地解析路径并添加任何剩余部分而不会检查其是否存在。"

#: ../../library/pathlib.rst:977
msgid "The *strict* parameter was added (pre-3.6 behavior is strict)."
msgstr "增加了 *strict* 参数（3.6 之前的行为是默认采用 strict 模式）。"

#: ../../library/pathlib.rst:980
msgid ""
"Symlink loops are treated like other errors: :exc:`OSError` is raised in "
"strict mode, and no exception is raised in non-strict mode. In previous "
"versions, :exc:`RuntimeError` is raised no matter the value of *strict*."
msgstr ""
"符号链接循环将像其他错误一样处理：在严格模式下会引发 :exc:`OSError`，而在非严格模式下不会引发异常。 在之前版本中，无论 *strict*"
" 的值是什么都会引发 :exc:`RuntimeError`。"

#: ../../library/pathlib.rst:988
msgid ""
"Return the path to which the symbolic link points (as returned by "
":func:`os.readlink`)::"
msgstr "返回符号链接所指向的路径（即 :func:`os.readlink` 的返回值）::"

#: ../../library/pathlib.rst:991
msgid ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.readlink()\n"
"PosixPath('setup.py')"
msgstr ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.readlink()\n"
"PosixPath('setup.py')"

#: ../../library/pathlib.rst:998
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.readlink` is not available. "
"In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""
"如果 :func:`os.readlink` 不可用则会引发 :exc:`UnsupportedOperation`。 在之前版本中，则是引发 "
":exc:`NotImplementedError`。"

#: ../../library/pathlib.rst:1004
msgid "Querying file type and status"
msgstr "查询文件类型和状态"

#: ../../library/pathlib.rst:1008
msgid ""
":meth:`~Path.exists`, :meth:`~Path.is_dir`, :meth:`~Path.is_file`, "
":meth:`~Path.is_mount`, :meth:`~Path.is_symlink`, "
":meth:`~Path.is_block_device`, :meth:`~Path.is_char_device`, "
":meth:`~Path.is_fifo`, :meth:`~Path.is_socket` now return ``False`` instead "
"of raising an exception for paths that contain characters unrepresentable at"
" the OS level."
msgstr ""
"现在对于包含在 OS 层级上无法表示的字符的路径 :meth:`~Path.exists`, :meth:`~Path.is_dir`, "
":meth:`~Path.is_file`, :meth:`~Path.is_mount`, :meth:`~Path.is_symlink`, "
":meth:`~Path.is_block_device`, :meth:`~Path.is_char_device`, "
":meth:`~Path.is_fifo`, :meth:`~Path.is_socket` 将返回 ``False`` 而不是引发异常。"

#: ../../library/pathlib.rst:1017
msgid ""
"The methods given above now return ``False`` instead of raising any "
":exc:`OSError` exception from the operating system. In previous versions, "
"some kinds of :exc:`OSError` exception are raised, and others suppressed. "
"The new behaviour is consistent with :func:`os.path.exists`, "
":func:`os.path.isdir`, etc. Use :meth:`~Path.stat` to retrieve the file "
"status without suppressing exceptions."
msgstr ""

#: ../../library/pathlib.rst:1027
msgid ""
"Return an :class:`os.stat_result` object containing information about this "
"path, like :func:`os.stat`. The result is looked up at each call to this "
"method."
msgstr ""
"返回一个 :class:`os.stat_result` 对象，其中包含有关此路径的信息，就像 :func:`os.stat`。 "
"结果会在每次调用此方法时被查找。"

#: ../../library/pathlib.rst:1030
msgid ""
"This method normally follows symlinks; to stat a symlink add the argument "
"``follow_symlinks=False``, or use :meth:`~Path.lstat`."
msgstr ""
"此方法通常会跟随符号链接；要对 symlink 使用 stat 请添加参数 ``follow_symlinks=False``，或者使用 "
":meth:`~Path.lstat`。"

#: ../../library/pathlib.rst:1035
msgid ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.stat().st_mtime\n"
"1327883547.852554"
msgstr ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.stat().st_mtime\n"
"1327883547.852554"

#: ../../library/pathlib.rst:1041 ../../library/pathlib.rst:1071
#: ../../library/pathlib.rst:1085 ../../library/pathlib.rst:1099
#: ../../library/pathlib.rst:1720 ../../library/pathlib.rst:1736
#: ../../library/pathlib.rst:1757
msgid "The *follow_symlinks* parameter was added."
msgstr "增加了 *follow_symlinks* 形参。"

#: ../../library/pathlib.rst:1047
msgid ""
"Like :meth:`Path.stat` but, if the path points to a symbolic link, return "
"the symbolic link's information rather than its target's."
msgstr "就和 :meth:`Path.stat` 一样，但是如果路径指向符号链接，则是返回符号链接而不是目标的信息。"

#: ../../library/pathlib.rst:1053
msgid ""
"Return ``True`` if the path points to an existing file or directory. "
"``False`` will be returned if the path is invalid, inaccessible or missing. "
"Use :meth:`Path.stat` to distinguish between these cases."
msgstr ""

#: ../../library/pathlib.rst:1057
msgid ""
"This method normally follows symlinks; to check if a symlink exists, add the"
" argument ``follow_symlinks=False``."
msgstr "此方法通常会跟随符号链接；要检查符号链接是否存在，请添加参数 ``follow_symlinks=False``。"

#: ../../library/pathlib.rst:1062
msgid ""
">>> Path('.').exists()\n"
"True\n"
">>> Path('setup.py').exists()\n"
"True\n"
">>> Path('/etc').exists()\n"
"True\n"
">>> Path('nonexistentfile').exists()\n"
"False"
msgstr ""
">>> Path('.').exists()\n"
"True\n"
">>> Path('setup.py').exists()\n"
"True\n"
">>> Path('/etc').exists()\n"
"True\n"
">>> Path('nonexistentfile').exists()\n"
"False"

#: ../../library/pathlib.rst:1077
msgid ""
"Return ``True`` if the path points to a regular file. ``False`` will be "
"returned if the path is invalid, inaccessible or missing, or if it points to"
" something other than a regular file. Use :meth:`Path.stat` to distinguish "
"between these cases."
msgstr ""

#: ../../library/pathlib.rst:1082
msgid ""
"This method normally follows symlinks; to exclude symlinks, add the argument"
" ``follow_symlinks=False``."
msgstr "此方法通常会跟随符号链接；要排除符号链接，请添加参数 ``follow_symlinks=False``。"

#: ../../library/pathlib.rst:1091
msgid ""
"Return ``True`` if the path points to a directory. ``False`` will be "
"returned if the path is invalid, inaccessible or missing, or if it points to"
" something other than a directory. Use :meth:`Path.stat` to distinguish "
"between these cases."
msgstr ""

#: ../../library/pathlib.rst:1096
msgid ""
"This method normally follows symlinks; to exclude symlinks to directories, "
"add the argument ``follow_symlinks=False``."
msgstr "此方法通常会跟随符号链接；要排除指向目录的符号链接，请添加参数 ``follow_symlinks=False``。"

#: ../../library/pathlib.rst:1105
msgid ""
"Return ``True`` if the path points to a symbolic link, even if that symlink "
"is broken. ``False`` will be returned if the path is invalid, inaccessible "
"or missing, or if it points to something other than a symbolic link. Use "
":meth:`Path.stat` to distinguish between these cases."
msgstr ""

#: ../../library/pathlib.rst:1113
msgid ""
"Return ``True`` if the path points to a junction, and ``False`` for any "
"other type of file. Currently only Windows supports junctions."
msgstr "如果路径是指向一个接合点则返回 ``True``，如果是其他文件类型则返回 ``False``。 目前只有 Windows 支持接合点。"

#: ../../library/pathlib.rst:1121
msgid ""
"Return ``True`` if the path is a :dfn:`mount point`: a point in a file "
"system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`path/..`, is on a different "
"device than *path*, or whether :file:`path/..` and *path* point to the same "
"i-node on the same device --- this should detect mount points for all Unix "
"and POSIX variants.  On Windows, a mount point is considered to be a drive "
"letter root (e.g. ``c:\\``), a UNC share (e.g. ``\\\\server\\share``), or a "
"mounted filesystem directory."
msgstr ""
"如果路径是一个 :dfn:`挂载点`: 在文件系统中被其他不同文件系统挂载的位置则返回 ``True``。 在 POSIX 上，此函数将检查 "
"*path* 的上一级 :file:`path/..` 是否位于和 *path* 不同的设备中，或者 :file:`path/..` 和 *path* "
"是否指向位于相同设置的相同 i-node --- 这应当能检测所有 Unix 和 POSIX 变种上的挂载点。 在 Windows "
"上，挂载点是被视为驱动器盘符的根目录 (例如 ``c:\\``)、UNC 共享目录 (例如 ``\\\\server\\share``) "
"或已挂载的文件系统目录。"

#: ../../library/pathlib.rst:1132
msgid "Windows support was added."
msgstr "添加了 Windows 支持。"

#: ../../library/pathlib.rst:1137
msgid ""
"Return ``True`` if the path points to a Unix socket. ``False`` will be "
"returned if the path is invalid, inaccessible or missing, or if it points to"
" something other than a Unix socket. Use :meth:`Path.stat` to distinguish "
"between these cases."
msgstr ""

#: ../../library/pathlib.rst:1145
msgid ""
"Return ``True`` if the path points to a FIFO. ``False`` will be returned if "
"the path is invalid, inaccessible or missing, or if it points to something "
"other than a FIFO. Use :meth:`Path.stat` to distinguish between these cases."
msgstr ""

#: ../../library/pathlib.rst:1153
msgid ""
"Return ``True`` if the path points to a block device. ``False`` will be "
"returned if the path is invalid, inaccessible or missing, or if it points to"
" something other than a block device. Use :meth:`Path.stat` to distinguish "
"between these cases."
msgstr ""

#: ../../library/pathlib.rst:1161
msgid ""
"Return ``True`` if the path points to a character device. ``False`` will be "
"returned if the path is invalid, inaccessible or missing, or if it points to"
" something other than a character device. Use :meth:`Path.stat` to "
"distinguish between these cases."
msgstr ""

#: ../../library/pathlib.rst:1169
msgid ""
"Return whether this path points to the same file as *other_path*, which can "
"be either a Path object, or a string.  The semantics are similar to "
":func:`os.path.samefile` and :func:`os.path.samestat`."
msgstr ""
"返回此目录是否指向与可能是字符串或者另一个路径对象的 *other_path* 相同的文件。语义类似于 :func:`os.path.samefile`"
" 与 :func:`os.path.samestat`。"

#: ../../library/pathlib.rst:1173
msgid ""
"An :exc:`OSError` can be raised if either file cannot be accessed for some "
"reason."
msgstr "如果两者都以同一原因无法访问，则抛出 :exc:`OSError`。"

#: ../../library/pathlib.rst:1178
msgid ""
">>> p = Path('spam')\n"
">>> q = Path('eggs')\n"
">>> p.samefile(q)\n"
"False\n"
">>> p.samefile('spam')\n"
"True"
msgstr ""
">>> p = Path('spam')\n"
">>> q = Path('eggs')\n"
">>> p.samefile(q)\n"
"False\n"
">>> p.samefile('spam')\n"
"True"

#: ../../library/pathlib.rst:1190
msgid ""
"A :class:`~pathlib.types.PathInfo` object that supports querying file type "
"information. The object exposes methods that cache their results, which can "
"help reduce the number of system calls needed when switching on file type. "
"For example::"
msgstr ""

#: ../../library/pathlib.rst:1195
msgid ""
">>> p = Path('src')\n"
">>> if p.info.is_symlink():\n"
"...     print('symlink')\n"
"... elif p.info.is_dir():\n"
"...     print('directory')\n"
"... elif p.info.exists():\n"
"...     print('something else')\n"
"... else:\n"
"...     print('not found')\n"
"...\n"
"directory"
msgstr ""
">>> p = Path('src')\n"
">>> if p.info.is_symlink():\n"
"...     print('symlink')\n"
"... elif p.info.is_dir():\n"
"...     print('directory')\n"
"... elif p.info.exists():\n"
"...     print('something else')\n"
"... else:\n"
"...     print('not found')\n"
"...\n"
"directory"

#: ../../library/pathlib.rst:1207
msgid ""
"If the path was generated from :meth:`Path.iterdir` then this attribute is "
"initialized with some information about the file type gleaned from scanning "
"the parent directory. Merely accessing :attr:`Path.info` does not perform "
"any filesystem queries."
msgstr ""

#: ../../library/pathlib.rst:1212
msgid ""
"To fetch up-to-date information, it's best to call :meth:`Path.is_dir`, "
":meth:`~Path.is_file` and :meth:`~Path.is_symlink` rather than methods of "
"this attribute. There is no way to reset the cache; instead you can create a"
" new path object with an empty info cache via ``p = Path(p)``."
msgstr ""

#: ../../library/pathlib.rst:1221
msgid "Reading and writing files"
msgstr "读写文件"

#: ../../library/pathlib.rst:1226
msgid ""
"Open the file pointed to by the path, like the built-in :func:`open` "
"function does::"
msgstr "打开路径指向的文件，就像内置的 :func:`open` 函数所做的一样::"

#: ../../library/pathlib.rst:1229
msgid ""
">>> p = Path('setup.py')\n"
">>> with p.open() as f:\n"
"...     f.readline()\n"
"...\n"
"'#!/usr/bin/env python3\\n'"
msgstr ""
">>> p = Path('setup.py')\n"
">>> with p.open() as f:\n"
"...     f.readline()\n"
"...\n"
"'#!/usr/bin/env python3\\n'"

#: ../../library/pathlib.rst:1238
msgid "Return the decoded contents of the pointed-to file as a string::"
msgstr "以字符串形式返回路径指向的文件的解码后文本内容。"

#: ../../library/pathlib.rst:1240 ../../library/pathlib.rst:1273
msgid ""
">>> p = Path('my_text_file')\n"
">>> p.write_text('Text file contents')\n"
"18\n"
">>> p.read_text()\n"
"'Text file contents'"
msgstr ""
">>> p = Path('my_text_file')\n"
">>> p.write_text('Text file contents')\n"
"18\n"
">>> p.read_text()\n"
"'Text file contents'"

#: ../../library/pathlib.rst:1246
msgid ""
"The file is opened and then closed. The optional parameters have the same "
"meaning as in :func:`open`."
msgstr "文件先被打开然后关闭。有和 :func:`open` 一样的可选形参。"

#: ../../library/pathlib.rst:1251 ../../library/pathlib.rst:1284
msgid "The *newline* parameter was added."
msgstr "增加了 *newline* 形参。"

#: ../../library/pathlib.rst:1257
msgid "Return the binary contents of the pointed-to file as a bytes object::"
msgstr "以字节对象的形式返回路径指向的文件的二进制内容::"

#: ../../library/pathlib.rst:1259 ../../library/pathlib.rst:1293
msgid ""
">>> p = Path('my_binary_file')\n"
">>> p.write_bytes(b'Binary file contents')\n"
"20\n"
">>> p.read_bytes()\n"
"b'Binary file contents'"
msgstr ""
">>> p = Path('my_binary_file')\n"
">>> p.write_bytes(b'Binary file contents')\n"
"20\n"
">>> p.read_bytes()\n"
"b'Binary file contents'"

#: ../../library/pathlib.rst:1270
msgid ""
"Open the file pointed to in text mode, write *data* to it, and close the "
"file::"
msgstr "将文件以文本模式打开，写入 *data* 并关闭::"

#: ../../library/pathlib.rst:1279
msgid ""
"An existing file of the same name is overwritten. The optional parameters "
"have the same meaning as in :func:`open`."
msgstr "同名的现有文件会被覆盖。 可选形参的含义与 :func:`open` 的相同。"

#: ../../library/pathlib.rst:1290
msgid ""
"Open the file pointed to in bytes mode, write *data* to it, and close the "
"file::"
msgstr "将文件以二进制模式打开，写入 *data* 并关闭::"

#: ../../library/pathlib.rst:1299
msgid "An existing file of the same name is overwritten."
msgstr "一个同名的现存文件将被覆盖。"

#: ../../library/pathlib.rst:1305
msgid "Reading directories"
msgstr "读取目录"

#: ../../library/pathlib.rst:1309
msgid ""
"When the path points to a directory, yield path objects of the directory "
"contents::"
msgstr "当路径指向一个目录时，产生该路径下的对象的路径::"

#: ../../library/pathlib.rst:1312
msgid ""
">>> p = Path('docs')\n"
">>> for child in p.iterdir(): child\n"
"...\n"
"PosixPath('docs/conf.py')\n"
"PosixPath('docs/_templates')\n"
"PosixPath('docs/make.bat')\n"
"PosixPath('docs/index.rst')\n"
"PosixPath('docs/_build')\n"
"PosixPath('docs/_static')\n"
"PosixPath('docs/Makefile')"
msgstr ""
">>> p = Path('docs')\n"
">>> for child in p.iterdir(): child\n"
"...\n"
"PosixPath('docs/conf.py')\n"
"PosixPath('docs/_templates')\n"
"PosixPath('docs/make.bat')\n"
"PosixPath('docs/index.rst')\n"
"PosixPath('docs/_build')\n"
"PosixPath('docs/_static')\n"
"PosixPath('docs/Makefile')"

#: ../../library/pathlib.rst:1323
msgid ""
"The children are yielded in arbitrary order, and the special entries ``'.'``"
" and ``'..'`` are not included.  If a file is removed from or added to the "
"directory after creating the iterator, it is unspecified whether a path "
"object for that file is included."
msgstr ""
"子条目会以任意顺序产生，并且不包括特殊条目 ``'.'`` 和 ``'..'``。 "
"如果迭代器创建之后有文件在目录中被移除或添加，是否要包括该文件所对应的路径对象并没有明确规定。"

#: ../../library/pathlib.rst:1328
msgid ""
"If the path is not a directory or otherwise inaccessible, :exc:`OSError` is "
"raised."
msgstr "如果该路径不是一个目录或是无法访问，则会引发 :exc:`OSError`。"

#: ../../library/pathlib.rst:1334
msgid ""
"Glob the given relative *pattern* in the directory represented by this path,"
" yielding all matching files (of any kind)::"
msgstr "解析相对于此路径的通配符 *pattern*，产生所有匹配的文件::"

#: ../../library/pathlib.rst:1337
msgid ""
">>> sorted(Path('.').glob('*.py'))\n"
"[PosixPath('pathlib.py'), PosixPath('setup.py'), PosixPath('test_pathlib.py')]\n"
">>> sorted(Path('.').glob('*/*.py'))\n"
"[PosixPath('docs/conf.py')]\n"
">>> sorted(Path('.').glob('**/*.py'))\n"
"[PosixPath('build/lib/pathlib.py'),\n"
" PosixPath('docs/conf.py'),\n"
" PosixPath('pathlib.py'),\n"
" PosixPath('setup.py'),\n"
" PosixPath('test_pathlib.py')]"
msgstr ""
">>> sorted(Path('.').glob('*.py'))\n"
"[PosixPath('pathlib.py'), PosixPath('setup.py'), PosixPath('test_pathlib.py')]\n"
">>> sorted(Path('.').glob('*/*.py'))\n"
"[PosixPath('docs/conf.py')]\n"
">>> sorted(Path('.').glob('**/*.py'))\n"
"[PosixPath('build/lib/pathlib.py'),\n"
" PosixPath('docs/conf.py'),\n"
" PosixPath('pathlib.py'),\n"
" PosixPath('setup.py'),\n"
" PosixPath('test_pathlib.py')]"

#: ../../library/pathlib.rst:1351
msgid ""
"By default, or when the *case_sensitive* keyword-only argument is set to "
"``None``, this method matches paths using platform-specific casing rules: "
"typically, case-sensitive on POSIX, and case-insensitive on Windows. Set "
"*case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""
"在默认情况下，或当 *case_sensitive* 关键字参数被设为 ``None`` 时，该方法将使用特定平台的大小写规则匹配路径：通常，在 "
"POSIX 上区分大小写，而在 Windows 上不区分大小写。将 *case_sensitive* 设为 ``True`` 或 ``False`` "
"可覆盖此行为。"

#: ../../library/pathlib.rst:1356
msgid ""
"By default, or when the *recurse_symlinks* keyword-only argument is set to "
"``False``, this method follows symlinks except when expanding \"``**``\" "
"wildcards. Set *recurse_symlinks* to ``True`` to always follow symlinks."
msgstr ""
"在默认情况下，或是当 *recurse_symlinks* 关键字参数被设为 ``False`` 时，此方法将跟随符号链接但在扩展 \"``**``\""
" 通配符时除外。 将 *recurse_symlinks* 设为 ``True`` 将总是跟随符号链接。"

#: ../../library/pathlib.rst:1360
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.glob`` with "
"arguments ``self``, ``pattern``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``pathlib.Path.glob`` 并附带参数 ``self``, "
"``pattern``。"

#: ../../library/pathlib.rst:1365 ../../library/pathlib.rst:1390
msgid "The *recurse_symlinks* parameter was added."
msgstr "增加了 *recurse_symlinks* 形参。"

#: ../../library/pathlib.rst:1371
msgid ""
"Any :exc:`OSError` exceptions raised from scanning the filesystem are "
"suppressed. In previous versions, such exceptions are suppressed in many "
"cases, but not all."
msgstr ""
"任何因扫描文件系统而引发的 :exc:`OSError` 异常都会被抑制。 在之前的版本中，此类异常在许多情况下都会被抑制，但并非全部情况。"

#: ../../library/pathlib.rst:1379
msgid ""
"Glob the given relative *pattern* recursively.  This is like calling "
":func:`Path.glob` with \"``**/``\" added in front of the *pattern*."
msgstr ""
"递归地对给定的相对 *pattern* 执行 glob 通配。 这类似于调用 :func:`Path.glob` 时在 *pattern* 之前加上 "
"\"``**/``\"。"

#: ../../library/pathlib.rst:1383
msgid ":ref:`pathlib-pattern-language` and :meth:`Path.glob` documentation."
msgstr ":ref:`pathlib-pattern-language` 和 :meth:`Path.glob` 文档。"

#: ../../library/pathlib.rst:1385
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.rglob`` with "
"arguments ``self``, ``pattern``."
msgstr ""
"引发一个 :ref:`审计事件 <auditing>` ``pathlib.Path.rglob`` 并附带参数 ``self``, "
"``pattern``。"

#: ../../library/pathlib.rst:1399
msgid ""
"Generate the file names in a directory tree by walking the tree either top-"
"down or bottom-up."
msgstr "通过对目录树自上而下或自下而上的遍历来生成其中的文件名。"

#: ../../library/pathlib.rst:1402
msgid ""
"For each directory in the directory tree rooted at *self* (including *self* "
"but excluding '.' and '..'), the method yields a 3-tuple of ``(dirpath, "
"dirnames, filenames)``."
msgstr ""
"对于根位置为 *self* 的目录树中的每个目录（包括 *self* 但不包括 '.' 和 '..'），该方法会产生一个 3 元组 "
"``(dirpath, dirnames, filenames)``。"

#: ../../library/pathlib.rst:1406
msgid ""
"*dirpath* is a :class:`Path` to the directory currently being walked, "
"*dirnames* is a list of strings for the names of subdirectories in *dirpath*"
" (excluding ``'.'`` and ``'..'``), and *filenames* is a list of strings for "
"the names of the non-directory files in *dirpath*. To get a full path (which"
" begins with *self*) to a file or directory in *dirpath*, do ``dirpath / "
"name``. Whether or not the lists are sorted is file system-dependent."
msgstr ""
"*dirpath* 是指向当前正被遍历到的目录的 :class:`Path`，*dirnames* 是由表示 *dirpath* "
"中子目录名称的字符串组成的列表 (不包括 ``'.'`` 和 ``'..'``)，*filenames* 是由表示 *dirpath* "
"中非目录文件名称的字符串组成的列表。 要获取 *dirpath* 中文件或目录的完整路径 (以 *self* 开头)，可使用 ``dirpath / "
"name``。 这些列表是否排序取决于具体的文件系统。"

#: ../../library/pathlib.rst:1414
msgid ""
"If the optional argument *top_down* is true (which is the default), the "
"triple for a directory is generated before the triples for any of its "
"subdirectories (directories are walked top-down).  If *top_down* is false, "
"the triple for a directory is generated after the triples for all of its "
"subdirectories (directories are walked bottom-up). No matter the value of "
"*top_down*, the list of subdirectories is retrieved before the triples for "
"the directory and its subdirectories are walked."
msgstr ""
"如果可选参数 *top_down* 为（默认的）真值，则会在所有子目录的三元组生成之前生成父目录的三元组（目录是自上而下遍历的）。 如果 "
"*top_down* 为假值，则会在所有子目录的三元组生成之后再生成父目录的三元组（目录是是自下而上遍历的）。无论 *top_down* "
"的值是什么，都会在遍历目录及其子目录的三元组之前提取子目录列表。"

#: ../../library/pathlib.rst:1422
msgid ""
"When *top_down* is true, the caller can modify the *dirnames* list in-place "
"(for example, using :keyword:`del` or slice assignment), and "
":meth:`Path.walk` will only recurse into the subdirectories whose names "
"remain in *dirnames*. This can be used to prune the search, or to impose a "
"specific order of visiting, or even to inform :meth:`Path.walk` about "
"directories the caller creates or renames before it resumes "
":meth:`Path.walk` again. Modifying *dirnames* when *top_down* is false has "
"no effect on the behavior of :meth:`Path.walk` since the directories in "
"*dirnames* have already been generated by the time *dirnames* is yielded to "
"the caller."
msgstr ""
"当 *top_down* 为真值时，调用方可以原地修改 *dirnames* 列表（例如，使用 :keyword:`del` 或切片赋值），而 "
":meth:`Path.walk` 只会向名称保留在 *dirnames* 中的子目录递归。 "
"这可被用于搜索剪枝，或强制应用特定的访问顺序，或者甚至是在重新恢复执行 :meth:`Path.walk` 之前告知 :meth:`Path.walk`"
" 调用方所创建或重命名的目录。 当 *top_down* 为假值时修改 *dirnames* 不会对 :meth:`Path.walk` "
"的的行为造成影响，因为在 *dirnames* 被提供给调用方时 *dirnames* 中的目录已经被生成了。"

#: ../../library/pathlib.rst:1432
msgid ""
"By default, errors from :func:`os.scandir` are ignored.  If the optional "
"argument *on_error* is specified, it should be a callable; it will be called"
" with one argument, an :exc:`OSError` instance. The callable can handle the "
"error to continue the walk or re-raise it to stop the walk. Note that the "
"filename is available as the ``filename`` attribute of the exception object."
msgstr ""
"在默认情况下，来自 :func:`os.scandir` 的错误将被忽略。 如果指定了可选参数 "
"*on_error*，则它应为一个可调用对象；调用它需要传入一个参数，即 :exc:`OSError` 的实例。 "
"该可调用对象能处理错误以继续执行遍历或是重新引发错误以停止遍历。 请注意可以通过异常对象的 ``filename`` 属性来获取文件名。"

#: ../../library/pathlib.rst:1438
msgid ""
"By default, :meth:`Path.walk` does not follow symbolic links, and instead "
"adds them to the *filenames* list. Set *follow_symlinks* to true to resolve "
"symlinks and place them in *dirnames* and *filenames* as appropriate for "
"their targets, and consequently visit directories pointed to by symlinks "
"(where supported)."
msgstr ""
"在默认情况下，:meth:`Path.walk` 不会跟踪符号链接，而是将其添加到 *filenames* 列表中。 将 "
"*follow_symlinks*设为真值可解析符号链接并根据它们的目标将其放入*dirnames* 和 *filenames* "
"中，从而（在受支持的系统上）访问符号链接所指向的目录。"

#: ../../library/pathlib.rst:1445
msgid ""
"Be aware that setting *follow_symlinks* to true can lead to infinite "
"recursion if a link points to a parent directory of itself. "
":meth:`Path.walk` does not keep track of the directories it has already "
"visited."
msgstr ""
"请注意将 *follow_symlinks* 设为真值会在链接指向自身的父目录时导致无限递归。 :meth:`Path.walk` "
"不会跟踪已它访问过的目录。"

#: ../../library/pathlib.rst:1450
msgid ""
":meth:`Path.walk` assumes the directories it walks are not modified during "
"execution. For example, if a directory from *dirnames* has been replaced "
"with a symlink and *follow_symlinks* is false, :meth:`Path.walk` will still "
"try to descend into it. To prevent such behavior, remove directories from "
"*dirnames* as appropriate."
msgstr ""
":meth:`Path.walk` 会假定在执行过程中它所遍历的目录没有被修改。 例如，如果 *dirnames* 中的某个目录已被替换为符号链接并且 "
"*follow_symlinks* 为假值，则 :meth:`Path.walk` 仍会尝试进入该目录。 为防止出现这种行为，请相应地移除 "
"*dirnames* 中的目录。"

#: ../../library/pathlib.rst:1458
msgid ""
"Unlike :func:`os.walk`, :meth:`Path.walk` lists symlinks to directories in "
"*filenames* if *follow_symlinks* is false."
msgstr ""
"与 :func:`os.walk` 不同，当 *follow_symlinks* 为假值时 :meth:`Path.walk` 会在 "
"*filenames* 中列出指向目录的符号链接。"

#: ../../library/pathlib.rst:1461
msgid ""
"This example displays the number of bytes used by all files in each "
"directory, while ignoring ``__pycache__`` directories::"
msgstr "这个例子显示每个目录中所有文件使用的总字节数，忽略其中的 ``__pycache__`` 目录::"

#: ../../library/pathlib.rst:1464
msgid ""
"from pathlib import Path\n"
"for root, dirs, files in Path(\"cpython/Lib/concurrent\").walk(on_error=print):\n"
"  print(\n"
"      root,\n"
"      \"consumes\",\n"
"      sum((root / file).stat().st_size for file in files),\n"
"      \"bytes in\",\n"
"      len(files),\n"
"      \"non-directory files\"\n"
"  )\n"
"  if '__pycache__' in dirs:\n"
"        dirs.remove('__pycache__')"
msgstr ""
"from pathlib import Path\n"
"for root, dirs, files in Path(\"cpython/Lib/concurrent\").walk(on_error=print):\n"
"  print(\n"
"      root,\n"
"      \"consumes\",\n"
"      sum((root / file).stat().st_size for file in files),\n"
"      \"bytes in\",\n"
"      len(files),\n"
"      \"non-directory files\"\n"
"  )\n"
"  if '__pycache__' in dirs:\n"
"        dirs.remove('__pycache__')"

#: ../../library/pathlib.rst:1477
msgid ""
"This next example is a simple implementation of :func:`shutil.rmtree`. "
"Walking the tree bottom-up is essential as :func:`rmdir` doesn't allow "
"deleting a directory before it is empty::"
msgstr ""
"下一个例子是 :func:`shutil.rmtree` 的一个简单实现。 由于 :func:`rmdir` "
"不允许在目录为空之前删除该目录因此自下而上地遍历目录树是至关重要的::"

#: ../../library/pathlib.rst:1481
msgid ""
"# Delete everything reachable from the directory \"top\".\n"
"# CAUTION:  This is dangerous! For example, if top == Path('/'),\n"
"# it could delete all of your files.\n"
"for root, dirs, files in top.walk(top_down=False):\n"
"    for name in files:\n"
"        (root / name).unlink()\n"
"    for name in dirs:\n"
"        (root / name).rmdir()"
msgstr ""
"# 删除可从目录 \"top\" 进入的所有东西。\n"
"# 小心：这很危险！举例来说，如果 top == Path('/')，\n"
"# 它可能会删除你的全部文件。\n"
"for root, dirs, files in top.walk(top_down=False):\n"
"    for name in files:\n"
"        (root / name).unlink()\n"
"    for name in dirs:\n"
"        (root / name).rmdir()"

#: ../../library/pathlib.rst:1494
msgid "Creating files and directories"
msgstr "创建文件和目录"

#: ../../library/pathlib.rst:1498
msgid ""
"Create a file at this given path.  If *mode* is given, it is combined with "
"the process's ``umask`` value to determine the file mode and access flags.  "
"If the file already exists, the function succeeds when *exist_ok* is true "
"(and its modification time is updated to the current time), otherwise "
":exc:`FileExistsError` is raised."
msgstr ""
"使用给定的路径创建文件。 如果给出了 *mode*，它将与进程的 ``umask`` 值合并以确定文件模式和访问旗标。 如果文件已存在，则当 "
"*exist_ok* 为真值时函数将成功执行（并且其修改时间将更新为当前时间），在其他情况下则会引发 :exc:`FileExistsError`。"

#: ../../library/pathlib.rst:1505
msgid ""
"The :meth:`~Path.open`, :meth:`~Path.write_text` and "
":meth:`~Path.write_bytes` methods are often used to create files."
msgstr ""
":meth:`~Path.open`, :meth:`~Path.write_text` 和 :meth:`~Path.write_bytes` "
"方法经常被用来创建文件。"

#: ../../library/pathlib.rst:1511
msgid ""
"Create a new directory at this given path.  If *mode* is given, it is "
"combined with the process's ``umask`` value to determine the file mode and "
"access flags.  If the path already exists, :exc:`FileExistsError` is raised."
msgstr ""
"使用给定的路径新建目录。 如果给出了 *mode*，它将与进程的 ``umask`` 值合并来决定文件模式和访问旗标。 如果路径已存在，则会引发 "
":exc:`FileExistsError`。"

#: ../../library/pathlib.rst:1516
msgid ""
"If *parents* is true, any missing parents of this path are created as "
"needed; they are created with the default permissions without taking *mode* "
"into account (mimicking the POSIX ``mkdir -p`` command)."
msgstr ""
"如果 *parents* 为真值，任何找不到的父目录都会伴随着此路径被创建；它们会以默认权限被创建，而不考虑 *mode* 设置（模仿 POSIX 的 "
"``mkdir -p`` 命令）。"

#: ../../library/pathlib.rst:1520
msgid ""
"If *parents* is false (the default), a missing parent raises "
":exc:`FileNotFoundError`."
msgstr "如果 *parents* 为假值（默认），则找不到的父级目录会引发 :exc:`FileNotFoundError`。"

#: ../../library/pathlib.rst:1523
msgid ""
"If *exist_ok* is false (the default), :exc:`FileExistsError` is raised if "
"the target directory already exists."
msgstr "如果 *exist_ok* 为 false（默认），则在目标已存在的情况下抛出 :exc:`FileExistsError`。"

#: ../../library/pathlib.rst:1526
msgid ""
"If *exist_ok* is true, :exc:`FileExistsError` will not be raised unless the "
"given path already exists in the file system and is not a directory (same "
"behavior as the POSIX ``mkdir -p`` command)."
msgstr ""
"如果 *exist_ok* 为真值，则 :exc:`FileExistsError` 将不会被引发除非给定的路径在文件系统中已存在并且不是目录（与 "
"POSIX ``mkdir -p`` 命令的行为相同）。"

#: ../../library/pathlib.rst:1530
msgid "The *exist_ok* parameter was added."
msgstr "*exist_ok* 形参被加入。"

#: ../../library/pathlib.rst:1536
msgid "Make this path a symbolic link pointing to *target*."
msgstr "使该路径成为一个指向 *target* 的符号连接。"

#: ../../library/pathlib.rst:1538
msgid ""
"On Windows, a symlink represents either a file or a directory, and does not "
"morph to the target dynamically.  If the target is present, the type of the "
"symlink will be created to match. Otherwise, the symlink will be created as "
"a directory if *target_is_directory* is true or a file symlink (the default)"
" otherwise.  On non-Windows platforms, *target_is_directory* is ignored."
msgstr ""
"在 Windows，符号链接可以代表文件或者目录，并且不会动态适应目标。 如果目标存在，则将创建相匹配的符号链接类型。 在其他情况下，如果 "
"*target_is_directory* 为真值则符号链接将创建为目录类型否则将创建为文件符号链接。 在非 Windows "
"平台上，*target_is_directory* 将被忽略。"

#: ../../library/pathlib.rst:1546
msgid ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.lstat().st_size\n"
"8"
msgstr ""
">>> p = Path('mylink')\n"
">>> p.symlink_to('setup.py')\n"
">>> p.resolve()\n"
"PosixPath('/home/antoine/pathlib/setup.py')\n"
">>> p.stat().st_size\n"
"956\n"
">>> p.lstat().st_size\n"
"8"

#: ../../library/pathlib.rst:1556
msgid ""
"The order of arguments (link, target) is the reverse of "
":func:`os.symlink`'s."
msgstr "参数的顺序（link, target) 和 :func:`os.symlink` 是相反的。"

#: ../../library/pathlib.rst:1559
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.symlink` is not available. "
"In previous versions, :exc:`NotImplementedError` was raised."
msgstr ""
"如果 :func:`os.symlink` 不可用则会引发 :exc:`UnsupportedOperation`。 在之前版本中，则是引发 "
":exc:`NotImplementedError`。"

#: ../../library/pathlib.rst:1566
msgid "Make this path a hard link to the same file as *target*."
msgstr "将此路径设为一个指向与 *target* 相同文件的硬链接。"

#: ../../library/pathlib.rst:1569
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.link`'s."
msgstr "参数顺序 (link, target) 和 :func:`os.link` 是相反的。"

#: ../../library/pathlib.rst:1574
msgid ""
"Raises :exc:`UnsupportedOperation` if :func:`os.link` is not available. In "
"previous versions, :exc:`NotImplementedError` was raised."
msgstr ""
"如果 :func:`os.link` 不可用则会引发 :exc:`UnsupportedOperation`。 在之前版本中，则是引发 "
":exc:`NotImplementedError`。"

#: ../../library/pathlib.rst:1580
msgid "Copying, moving and deleting"
msgstr "拷贝、移动和删除"

#: ../../library/pathlib.rst:1584
msgid ""
"Copy this file or directory tree to the given *target*, and return a new "
":class:`!Path` instance pointing to *target*."
msgstr "将此文件或目录树拷贝到给定的 *target*，并返回一个指向 *target* 的新的 :class:`!Path` 实例。"

#: ../../library/pathlib.rst:1587
msgid ""
"If the source is a file, the target will be replaced if it is an existing "
"file. If the source is a symlink and *follow_symlinks* is true (the "
"default), the symlink's target is copied. Otherwise, the symlink is "
"recreated at the destination."
msgstr ""

#: ../../library/pathlib.rst:1592
msgid ""
"If *preserve_metadata* is false (the default), only directory structures and"
" file data are guaranteed to be copied. Set *preserve_metadata* to true to "
"ensure that file and directory permissions, flags, last access and "
"modification times, and extended attributes are copied where supported. This"
" argument has no effect when copying files on Windows (where metadata is "
"always preserved)."
msgstr ""

#: ../../library/pathlib.rst:1600
msgid ""
"Where supported by the operating system and file system, this method "
"performs a lightweight copy, where data blocks are only copied when "
"modified. This is known as copy-on-write."
msgstr ""

#: ../../library/pathlib.rst:1610
msgid ""
"Copy this file or directory tree into the given *target_dir*, which should "
"be an existing directory. Other arguments are handled identically to "
":meth:`Path.copy`. Returns a new :class:`!Path` instance pointing to the "
"copy."
msgstr ""

#: ../../library/pathlib.rst:1620
msgid ""
"Rename this file or directory to the given *target*, and return a new "
":class:`!Path` instance pointing to *target*.  On Unix, if *target* exists "
"and is a file, it will be replaced silently if the user has permission. On "
"Windows, if *target* exists, :exc:`FileExistsError` will be raised. *target*"
" can be either a string or another path object::"
msgstr ""
"将此文件或目录重命名为给定的 *target*，并返回一个新的指向 *target* 的 :class:`!Path` 实例。 在 Unix 上，如果 "
"*target* 存在且为一个文件，那么如果用户具有相应权限则它将静默地替换。 在 Windows 上，如果 *target* 存在，则会引发 "
":exc:`FileExistsError`。 *target* 可以是一个字符串或者另一个路径对象::"

#: ../../library/pathlib.rst:1626
msgid ""
">>> p = Path('foo')\n"
">>> p.open('w').write('some text')\n"
"9\n"
">>> target = Path('bar')\n"
">>> p.rename(target)\n"
"PosixPath('bar')\n"
">>> target.open().read()\n"
"'some text'"
msgstr ""
">>> p = Path('foo')\n"
">>> p.open('w').write('some text')\n"
"9\n"
">>> target = Path('bar')\n"
">>> p.rename(target)\n"
"PosixPath('bar')\n"
">>> target.open().read()\n"
"'some text'"

#: ../../library/pathlib.rst:1635 ../../library/pathlib.rst:1651
msgid ""
"The target path may be absolute or relative. Relative paths are interpreted "
"relative to the current working directory, *not* the directory of the "
":class:`!Path` object."
msgstr "目标路径可能为绝对或相对路径。 相对路径将被解读为相对于当前工作目录，而 *不是* 相对于 :class:`!Path` 对象的目录。"

#: ../../library/pathlib.rst:1639
msgid ""
"It is implemented in terms of :func:`os.rename` and gives the same "
"guarantees."
msgstr "它根据 :func:`os.rename` 实现并给出了同样的保证。"

#: ../../library/pathlib.rst:1641 ../../library/pathlib.rst:1655
msgid "Added return value, return the new :class:`!Path` instance."
msgstr "添加了返回值，将返回新的 :class:`!Path` 实例。"

#: ../../library/pathlib.rst:1647
msgid ""
"Rename this file or directory to the given *target*, and return a new "
":class:`!Path` instance pointing to *target*.  If *target* points to an "
"existing file or empty directory, it will be unconditionally replaced."
msgstr ""
"将此文件或目录重命名为给定的 *target*，并返回一个新的指向 *target* 的 :class:`!Path` 实例。 如果 *target* "
"指向一个现有文件或空目录，则它将被无条件地替换。"

#: ../../library/pathlib.rst:1661
msgid ""
"Move this file or directory tree to the given *target*, and return a new "
":class:`!Path` instance pointing to *target*."
msgstr ""

#: ../../library/pathlib.rst:1664
msgid ""
"If the *target* doesn't exist it will be created. If both this path and the "
"*target* are existing files, then the target is overwritten. If both paths "
"point to the same file or directory, or the *target* is a non-empty "
"directory, then :exc:`OSError` is raised."
msgstr ""

#: ../../library/pathlib.rst:1669
msgid ""
"If both paths are on the same filesystem, the move is performed with "
":func:`os.replace`. Otherwise, this path is copied (preserving metadata and "
"symlinks) and then deleted."
msgstr ""

#: ../../library/pathlib.rst:1678
msgid ""
"Move this file or directory tree into the given *target_dir*, which should "
"be an existing directory. Returns a new :class:`!Path` instance pointing to "
"the moved path."
msgstr ""

#: ../../library/pathlib.rst:1687
msgid ""
"Remove this file or symbolic link.  If the path points to a directory, use "
":func:`Path.rmdir` instead."
msgstr "移除此文件或符号链接。如果路径指向目录，则用 :func:`Path.rmdir` 代替。"

#: ../../library/pathlib.rst:1690
msgid ""
"If *missing_ok* is false (the default), :exc:`FileNotFoundError` is raised "
"if the path does not exist."
msgstr "如果 *missing_ok* 为假值（默认），则如果路径不存在将会引发 :exc:`FileNotFoundError`。"

#: ../../library/pathlib.rst:1693
msgid ""
"If *missing_ok* is true, :exc:`FileNotFoundError` exceptions will be ignored"
" (same behavior as the POSIX ``rm -f`` command)."
msgstr ""
"如果 *missing_ok* 为真值，则 :exc:`FileNotFoundError` 异常将被忽略（和 POSIX ``rm -f`` "
"命令的行为相同）。"

#: ../../library/pathlib.rst:1696
msgid "The *missing_ok* parameter was added."
msgstr "增加了 *missing_ok* 形参。"

#: ../../library/pathlib.rst:1702
msgid "Remove this directory.  The directory must be empty."
msgstr "移除此目录。此目录必须为空的。"

#: ../../library/pathlib.rst:1706
msgid "Permissions and ownership"
msgstr "访问权限与所有权"

#: ../../library/pathlib.rst:1710
msgid ""
"Return the name of the user owning the file. :exc:`KeyError` is raised if "
"the file's user identifier (UID) isn't found in the system database."
msgstr "返拥有此文件的用户名。 如果文件的用户标识 (UID) 无法在系统数据库中找到则会引发 :exc:`KeyError`。"

#: ../../library/pathlib.rst:1713
msgid ""
"This method normally follows symlinks; to get the owner of the symlink, add "
"the argument ``follow_symlinks=False``."
msgstr "此方法通常会跟随符号链接；要获取符号链接的所有者，请添加参数 ``follow_symlinks=False``。"

#: ../../library/pathlib.rst:1716
msgid ""
"Raises :exc:`UnsupportedOperation` if the :mod:`pwd` module is not "
"available. In earlier versions, :exc:`NotImplementedError` was raised."
msgstr ""
"如果 :mod:`pwd` 模块不可用则会引发 :exc:`UnsupportedOperation`。 在之前的版本中，则是引发 "
":exc:`NotImplementedError`。"

#: ../../library/pathlib.rst:1726
msgid ""
"Return the name of the group owning the file. :exc:`KeyError` is raised if "
"the file's group identifier (GID) isn't found in the system database."
msgstr "返回拥有此文件的用户组名。 如果文件的用户组标识 (GID) 无法在系统数据库中找到则会引发 :exc:`KeyError`。"

#: ../../library/pathlib.rst:1729
msgid ""
"This method normally follows symlinks; to get the group of the symlink, add "
"the argument ``follow_symlinks=False``."
msgstr "此方法通常会跟随符号链接；要获取符号链接的用户组，请添加参数 ``follow_symlinks=False``。"

#: ../../library/pathlib.rst:1732
msgid ""
"Raises :exc:`UnsupportedOperation` if the :mod:`grp` module is not "
"available. In earlier versions, :exc:`NotImplementedError` was raised."
msgstr ""
"如果 :mod:`grp` 模块不可用则会引发 :exc:`UnsupportedOperation`。 在较早的版本中，则是引发 "
":exc:`NotImplementedError`。"

#: ../../library/pathlib.rst:1742
msgid "Change the file mode and permissions, like :func:`os.chmod`."
msgstr "改变文件模式和权限，和 :func:`os.chmod` 一样。"

#: ../../library/pathlib.rst:1744
msgid ""
"This method normally follows symlinks. Some Unix flavours support changing "
"permissions on the symlink itself; on these platforms you may add the "
"argument ``follow_symlinks=False``, or use :meth:`~Path.lchmod`."
msgstr ""
"此方法通常会跟随符号链接。 某些 Unix 变种支持改变 symlink 本身的权限；在这些平台上你可以添加参数 "
"``follow_symlinks=False``，或者使用 :meth:`~Path.lchmod`。"

#: ../../library/pathlib.rst:1750
msgid ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_mode\n"
"33277\n"
">>> p.chmod(0o444)\n"
">>> p.stat().st_mode\n"
"33060"
msgstr ""
">>> p = Path('setup.py')\n"
">>> p.stat().st_mode\n"
"33277\n"
">>> p.chmod(0o444)\n"
">>> p.stat().st_mode\n"
"33060"

#: ../../library/pathlib.rst:1763
msgid ""
"Like :meth:`Path.chmod` but, if the path points to a symbolic link, the "
"symbolic link's mode is changed rather than its target's."
msgstr "就像 :meth:`Path.chmod` 但是如果路径指向符号链接则是修改符号链接的模式，而不是修改符号链接的目标。"

#: ../../library/pathlib.rst:1770
msgid "Pattern language"
msgstr "模式语言"

#: ../../library/pathlib.rst:1772
msgid ""
"The following wildcards are supported in patterns for "
":meth:`~PurePath.full_match`, :meth:`~Path.glob` and :meth:`~Path.rglob`:"
msgstr ""
"以下通配符在用于 :meth:`~PurePath.full_match`, :meth:`~Path.glob` 和 "
":meth:`~Path.rglob` 的模式中是受支持的："

#: ../../library/pathlib.rst:1775
msgid "``**`` (entire segment)"
msgstr "``**`` (整个分段)"

#: ../../library/pathlib.rst:1776
msgid "Matches any number of file or directory segments, including zero."
msgstr "匹配任意数量的文件或目录分段，包括零个。"

#: ../../library/pathlib.rst:1777
msgid "``*`` (entire segment)"
msgstr "``*`` (整个分段)"

#: ../../library/pathlib.rst:1778
msgid "Matches one file or directory segment."
msgstr "匹配一个文件或目录分段。"

#: ../../library/pathlib.rst:1779
msgid "``*`` (part of a segment)"
msgstr "``*`` (分段的一部分)"

#: ../../library/pathlib.rst:1780
msgid "Matches any number of non-separator characters, including zero."
msgstr "匹配任意数量的非分隔符型字符，包括零个。"

#: ../../library/pathlib.rst:1781
msgid "``?``"
msgstr "``?``"

#: ../../library/pathlib.rst:1782
msgid "Matches one non-separator character."
msgstr "匹配一个不是分隔符的字符。"

#: ../../library/pathlib.rst:1783
msgid "``[seq]``"
msgstr "``[seq]``"

#: ../../library/pathlib.rst:1784
msgid "Matches one character in *seq*."
msgstr "匹配在 *seq* 中的一个字符。"

#: ../../library/pathlib.rst:1785
msgid "``[!seq]``"
msgstr "``[!seq]``"

#: ../../library/pathlib.rst:1786
msgid "Matches one character not in *seq*."
msgstr "匹配不在 *seq* 中的一个字符。"

#: ../../library/pathlib.rst:1788
msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``\"[?]\"`` matches the character ``\"?\"``."
msgstr "对于字面值匹配，请将元字符用方括号括起来。 例如，``\"[?]\"`` 将匹配字符 ``\"?\"``。"

#: ../../library/pathlib.rst:1791
msgid "The \"``**``\" wildcard enables recursive globbing. A few examples:"
msgstr "\"``**``\" 通配符将启用递归 glob。 下面是几个例子："

#: ../../library/pathlib.rst:1794
msgid "Pattern"
msgstr "模式"

#: ../../library/pathlib.rst:1794
msgid "Meaning"
msgstr "含意"

#: ../../library/pathlib.rst:1796
msgid "\"``**/*``\""
msgstr "\"``**/*``\""

#: ../../library/pathlib.rst:1796
msgid "Any path with at least one segment."
msgstr "任何具有至少一个分段的路径。"

#: ../../library/pathlib.rst:1797
msgid "\"``**/*.py``\""
msgstr "\"``**/*.py``\""

#: ../../library/pathlib.rst:1797
msgid "Any path with a final segment ending \"``.py``\"."
msgstr "最后部分以 \"``.py``\" 结尾的任意路径。"

#: ../../library/pathlib.rst:1798
msgid "\"``assets/**``\""
msgstr "\"``assets/**``\""

#: ../../library/pathlib.rst:1798
msgid "Any path starting with \"``assets/``\"."
msgstr "以 \"``assets/``\" 开头的任意路径。"

#: ../../library/pathlib.rst:1799
msgid "\"``assets/**/*``\""
msgstr "\"``assets/**/*``\""

#: ../../library/pathlib.rst:1799
msgid "Any path starting with \"``assets/``\", excluding \"``assets/``\" itself."
msgstr "以 \"``assets/``\" 开头，但不包括 \"``assets/``\" 本身的任意路径。"

#: ../../library/pathlib.rst:1803
msgid ""
"Globbing with the \"``**``\" wildcard visits every directory in the tree. "
"Large directory trees may take a long time to search."
msgstr "使用 \"``**``\" 通配符执行 glob 操作将访问目录树中的每个目录。 非常大的目录树可能要花费非常长的时间来搜索。"

#: ../../library/pathlib.rst:1806
msgid ""
"Globbing with a pattern that ends with \"``**``\" returns both files and "
"directories. In previous versions, only directories were returned."
msgstr "使用以 \"``**``\" 结尾的模式执行 glob 操作将同时返回文件和目录。 在之前的版本中，只有目录会被返回。"

#: ../../library/pathlib.rst:1810
msgid ""
"In :meth:`Path.glob` and :meth:`~Path.rglob`, a trailing slash may be added "
"to the pattern to match only directories."
msgstr "在 :meth:`Path.glob` 和 :meth:`~Path.rglob` 中，可以向模式添加一个末尾斜杠以只匹配目录。"

#: ../../library/pathlib.rst:1813
msgid ""
"Globbing with a pattern that ends with a pathname components separator "
"(:data:`~os.sep` or :data:`~os.altsep`) returns only directories."
msgstr ""
"使用以一个路径名称组件分隔符 (:data:`~os.sep` or :data:`~os.altsep`) 结尾的模式执行 glob "
"操作将只返回目录。"

#: ../../library/pathlib.rst:1819
msgid "Comparison to the :mod:`glob` module"
msgstr "与 :mod:`glob` 模块的比较"

#: ../../library/pathlib.rst:1821
msgid ""
"The patterns accepted and results generated by :meth:`Path.glob` and "
":meth:`Path.rglob` differ slightly from those by the :mod:`glob` module:"
msgstr ""
":meth:`Path.glob` 和 :meth:`Path.rglob` 所接受的模式和所生成的结果相比 :mod:`glob` 模式的略有不同："

#: ../../library/pathlib.rst:1824
msgid ""
"Files beginning with a dot are not special in pathlib. This is like passing "
"``include_hidden=True`` to :func:`glob.glob`."
msgstr ""
"以点号打点的文件在 pathlib 中没有特殊含义。 这类似于向 :func:`glob.glob` 传入 "
"``include_hidden=True``。"

#: ../../library/pathlib.rst:1826
msgid ""
"\"``**``\" pattern components are always recursive in pathlib. This is like "
"passing ``recursive=True`` to :func:`glob.glob`."
msgstr ""
"\"``**``\" 模式组件在 pathlib 总是递归的。 这类似于向 :func:`glob.glob` 传入 "
"``recursive=True``。"

#: ../../library/pathlib.rst:1828
msgid ""
"\"``**``\" pattern components do not follow symlinks by default in pathlib. "
"This behaviour has no equivalent in :func:`glob.glob`, but you can pass "
"``recurse_symlinks=True`` to :meth:`Path.glob` for compatible behaviour."
msgstr ""
"\"``**``\" 模式组件在 pathlib 中默认不会跟随符号链接。 此行为在 :func:`glob.glob` 中没有对应物，但你可以向 "
":meth:`Path.glob` 传入 ``recurse_symlinks=True`` 以获得兼容的行为。"

#: ../../library/pathlib.rst:1831
msgid ""
"Like all :class:`PurePath` and :class:`Path` objects, the values returned "
"from :meth:`Path.glob` and :meth:`Path.rglob` don't include trailing "
"slashes."
msgstr ""
"与所有 :class:`PurePath` 和 :class:`Path` 对象类似，从 :meth:`Path.glob` 和 "
":meth:`Path.rglob` 返回的值都不包括末尾斜杠。"

#: ../../library/pathlib.rst:1834
msgid ""
"The values returned from pathlib's ``path.glob()`` and ``path.rglob()`` "
"include the *path* as a prefix, unlike the results of "
"``glob.glob(root_dir=path)``."
msgstr ""
"从 pathlib 的 ``path.glob()`` 和 ``path.rglob()`` 返回的值包括作为前缀的 *path*，这不同于 "
"``glob.glob(root_dir=path)`` 的结果。"

#: ../../library/pathlib.rst:1837
msgid ""
"The values returned from pathlib's ``path.glob()`` and ``path.rglob()`` may "
"include *path* itself, for example when globbing \"``**``\", whereas the "
"results of ``glob.glob(root_dir=path)`` never include an empty string that "
"would correspond to *path*."
msgstr ""
"从 pathlib 的 ``path.glob()`` 和 ``path.rglob()`` 返回的值可能包括 *path* 本身，例如当对 "
"\"``**``\" 执行 glob 操作的时候，而 ``glob.glob(root_dir=path)`` 的结果绝不会包括与 *path* "
"对应的空字符串。"

#: ../../library/pathlib.rst:1844
msgid "Comparison to the :mod:`os` and :mod:`os.path` modules"
msgstr "与 :mod:`os` 和 :mod:`os.path` 模块的比较"

#: ../../library/pathlib.rst:1846
msgid ""
"pathlib implements path operations using :class:`PurePath` and :class:`Path`"
" objects, and so it's said to be *object-oriented*. On the other hand, the "
":mod:`os` and :mod:`os.path` modules supply functions that work with low-"
"level ``str`` and ``bytes`` objects, which is a more *procedural* approach. "
"Some users consider the object-oriented style to be more readable."
msgstr ""
"pathlib 使用 :class:`PurePath` 和 :class:`Path` 对象来实现路径操作，因此它被认为是 *面向对象的*。 "
"而在另一方面，:mod:`os` 和 :mod:`os.path` 模块提供与低层级 ``str`` 和 ``bytes`` "
"对象配合使用的函数，它更接近于 *面向过程的* 方式。 某些用户认为面向对象的风格可读性更好。"

#: ../../library/pathlib.rst:1852
msgid ""
"Many functions in :mod:`os` and :mod:`os.path` support ``bytes`` paths and "
":ref:`paths relative to directory descriptors <dir_fd>`. These features "
"aren't available in pathlib."
msgstr ""
":mod:`os` 和 :mod:`os.path` 中的许多函数都支持 ``bytes`` 路径和 :ref:`相对于目录描述符的路径 "
"<dir_fd>`。 这些特性在 pathlib 中均不可用。"

#: ../../library/pathlib.rst:1856
msgid ""
"Python's ``str`` and ``bytes`` types, and portions of the :mod:`os` and "
":mod:`os.path` modules, are written in C and are very speedy. pathlib is "
"written in pure Python and is often slower, but rarely slow enough to "
"matter."
msgstr ""
"Python 的 ``str`` 和 ``bytes`` 类型，以及 :mod:`os` 和 :mod:`os.path` 模块的各个部分都是用 C "
"编写的因而非常快速。 pathlib 是用纯 Python 编写的因而往往较慢，但很少会慢到引人注意。"

#: ../../library/pathlib.rst:1860
msgid ""
"pathlib's path normalization is slightly more opinionated and consistent "
"than :mod:`os.path`. For example, whereas :func:`os.path.abspath` eliminates"
" \"``..``\" segments from a path, which may change its meaning if symlinks "
"are involved, :meth:`Path.absolute` preserves these segments for greater "
"safety."
msgstr ""
"pathlib 的路径规范化比 :mod:`os.path` 更有主见也更一致。 例如，:func:`os.path.abspath` 会删除路径中的 "
"\"``..``\" 段，因为当涉及符号链接时这可能会改变其含义；而 :meth:`Path.absolute` 则会保留这些段以提高安全性。"

#: ../../library/pathlib.rst:1865
msgid ""
"pathlib's path normalization may render it unsuitable for some applications:"
msgstr "pathlib 的路径规范化可能使其不适合某些应用程序："

#: ../../library/pathlib.rst:1867
msgid ""
"pathlib normalizes ``Path(\"my_folder/\")`` to ``Path(\"my_folder\")``, "
"which changes a path's meaning when supplied to various operating system "
"APIs and command-line utilities. Specifically, the absence of a trailing "
"separator may allow the path to be resolved as either a file or directory, "
"rather than a directory only."
msgstr ""
"pathlib 会将 ``Path(\"my_folder/\")`` 规范化为 "
"``Path(\"my_folder\")``，这改变了路径在提供给各种操作系统 API 和命令行工具时的含义。 "
"具体来说，缺少末尾分隔符可能会使路径被解析为文件或目录，而非只是目录。"

#: ../../library/pathlib.rst:1872
msgid ""
"pathlib normalizes ``Path(\"./my_program\")`` to ``Path(\"my_program\")``, "
"which changes a path's meaning when used as an executable search path, such "
"as in a shell or when spawning a child process. Specifically, the absence of"
" a separator in the path may force it to be looked up in :envvar:`PATH` "
"rather than the current directory."
msgstr ""
"pathlib 会将 ``Path(\"./my_program\")`` 规范化为 "
"``Path(\"my_program\")``，这改变了路径在被用作可执行文件搜索路径，例如在 shell 中或者在产生子进程时的含义。 "
"具体来说，缺少路径中的分隔符可能会迫使其在 :envvar:`PATH` 而不是在当前目录中查找。"

#: ../../library/pathlib.rst:1878
msgid ""
"As a consequence of these differences, pathlib is not a drop-in replacement "
"for :mod:`os.path`."
msgstr "由于这些差异的影响，pathlib 并不是 :mod:`os.path` 的直接替代品。"

#: ../../library/pathlib.rst:1883
msgid "Corresponding tools"
msgstr "相关工具"

#: ../../library/pathlib.rst:1885
msgid ""
"Below is a table mapping various :mod:`os` functions to their corresponding "
":class:`PurePath`/:class:`Path` equivalent."
msgstr "以下是一个映射了 :mod:`os` 与 :class:`PurePath`/:class:`Path` 对应相同的函数的表。"

#: ../../library/pathlib.rst:1889
msgid ":mod:`os` and :mod:`os.path`"
msgstr ":mod:`os` 和 :mod:`os.path`"

#: ../../library/pathlib.rst:1889
msgid ":mod:`pathlib`"
msgstr ":mod:`pathlib`"

#: ../../library/pathlib.rst:1891
msgid ":func:`os.path.dirname`"
msgstr ":func:`os.path.dirname`"

#: ../../library/pathlib.rst:1891
msgid ":attr:`PurePath.parent`"
msgstr ":attr:`PurePath.parent`"

#: ../../library/pathlib.rst:1892
msgid ":func:`os.path.basename`"
msgstr ":func:`os.path.basename`"

#: ../../library/pathlib.rst:1892
msgid ":attr:`PurePath.name`"
msgstr ":attr:`PurePath.name`"

#: ../../library/pathlib.rst:1893
msgid ":func:`os.path.splitext`"
msgstr ":func:`os.path.splitext`"

#: ../../library/pathlib.rst:1893
msgid ":attr:`PurePath.stem`, :attr:`PurePath.suffix`"
msgstr ":attr:`PurePath.stem`, :attr:`PurePath.suffix`"

#: ../../library/pathlib.rst:1894
msgid ":func:`os.path.join`"
msgstr ":func:`os.path.join`"

#: ../../library/pathlib.rst:1894
msgid ":meth:`PurePath.joinpath`"
msgstr ":meth:`PurePath.joinpath`"

#: ../../library/pathlib.rst:1895
msgid ":func:`os.path.isabs`"
msgstr ":func:`os.path.isabs`"

#: ../../library/pathlib.rst:1895
msgid ":meth:`PurePath.is_absolute`"
msgstr ":meth:`PurePath.is_absolute`"

#: ../../library/pathlib.rst:1896
msgid ":func:`os.path.relpath`"
msgstr ":func:`os.path.relpath`"

#: ../../library/pathlib.rst:1896
msgid ":meth:`PurePath.relative_to` [1]_"
msgstr ":meth:`PurePath.relative_to` [1]_"

#: ../../library/pathlib.rst:1897
msgid ":func:`os.path.expanduser`"
msgstr ":func:`os.path.expanduser`"

#: ../../library/pathlib.rst:1897
msgid ":meth:`Path.expanduser` [2]_"
msgstr ":meth:`Path.expanduser` [2]_"

#: ../../library/pathlib.rst:1898
msgid ":func:`os.path.realpath`"
msgstr ":func:`os.path.realpath`"

#: ../../library/pathlib.rst:1898
msgid ":meth:`Path.resolve`"
msgstr ":meth:`Path.resolve`"

#: ../../library/pathlib.rst:1899
msgid ":func:`os.path.abspath`"
msgstr ":func:`os.path.abspath`"

#: ../../library/pathlib.rst:1899
msgid ":meth:`Path.absolute` [3]_"
msgstr ":meth:`Path.absolute` [3]_"

#: ../../library/pathlib.rst:1900
msgid ":func:`os.path.exists`"
msgstr ":func:`os.path.exists`"

#: ../../library/pathlib.rst:1900
msgid ":meth:`Path.exists`"
msgstr ":meth:`Path.exists`"

#: ../../library/pathlib.rst:1901
msgid ":func:`os.path.isfile`"
msgstr ":func:`os.path.isfile`"

#: ../../library/pathlib.rst:1901
msgid ":meth:`Path.is_file`"
msgstr ":meth:`Path.is_file`"

#: ../../library/pathlib.rst:1902
msgid ":func:`os.path.isdir`"
msgstr ":func:`os.path.isdir`"

#: ../../library/pathlib.rst:1902
msgid ":meth:`Path.is_dir`"
msgstr ":meth:`Path.is_dir`"

#: ../../library/pathlib.rst:1903
msgid ":func:`os.path.islink`"
msgstr ":func:`os.path.islink`"

#: ../../library/pathlib.rst:1903
msgid ":meth:`Path.is_symlink`"
msgstr ":meth:`Path.is_symlink`"

#: ../../library/pathlib.rst:1904
msgid ":func:`os.path.isjunction`"
msgstr ":func:`os.path.isjunction`"

#: ../../library/pathlib.rst:1904
msgid ":meth:`Path.is_junction`"
msgstr ":meth:`Path.is_junction`"

#: ../../library/pathlib.rst:1905
msgid ":func:`os.path.ismount`"
msgstr ":func:`os.path.ismount`"

#: ../../library/pathlib.rst:1905
msgid ":meth:`Path.is_mount`"
msgstr ":meth:`Path.is_mount`"

#: ../../library/pathlib.rst:1906
msgid ":func:`os.path.samefile`"
msgstr ":func:`os.path.samefile`"

#: ../../library/pathlib.rst:1906
msgid ":meth:`Path.samefile`"
msgstr ":meth:`Path.samefile`"

#: ../../library/pathlib.rst:1907
msgid ":func:`os.getcwd`"
msgstr ":func:`os.getcwd`"

#: ../../library/pathlib.rst:1907
msgid ":meth:`Path.cwd`"
msgstr ":meth:`Path.cwd`"

#: ../../library/pathlib.rst:1908
msgid ":func:`os.stat`"
msgstr ":func:`os.stat`"

#: ../../library/pathlib.rst:1908
msgid ":meth:`Path.stat`"
msgstr ":meth:`Path.stat`"

#: ../../library/pathlib.rst:1909
msgid ":func:`os.lstat`"
msgstr ":func:`os.lstat`"

#: ../../library/pathlib.rst:1909
msgid ":meth:`Path.lstat`"
msgstr ":meth:`Path.lstat`"

#: ../../library/pathlib.rst:1910
msgid ":func:`os.listdir`"
msgstr ":func:`os.listdir`"

#: ../../library/pathlib.rst:1910
msgid ":meth:`Path.iterdir`"
msgstr ":meth:`Path.iterdir`"

#: ../../library/pathlib.rst:1911
msgid ":func:`os.walk`"
msgstr ":func:`os.walk`"

#: ../../library/pathlib.rst:1911
msgid ":meth:`Path.walk` [4]_"
msgstr ":meth:`Path.walk` [4]_"

#: ../../library/pathlib.rst:1912
msgid ":func:`os.mkdir`, :func:`os.makedirs`"
msgstr ":func:`os.mkdir`, :func:`os.makedirs`"

#: ../../library/pathlib.rst:1912
msgid ":meth:`Path.mkdir`"
msgstr ":meth:`Path.mkdir`"

#: ../../library/pathlib.rst:1913
msgid ":func:`os.link`"
msgstr ":func:`os.link`"

#: ../../library/pathlib.rst:1913
msgid ":meth:`Path.hardlink_to`"
msgstr ":meth:`Path.hardlink_to`"

#: ../../library/pathlib.rst:1914
msgid ":func:`os.symlink`"
msgstr ":func:`os.symlink`"

#: ../../library/pathlib.rst:1914
msgid ":meth:`Path.symlink_to`"
msgstr ":meth:`Path.symlink_to`"

#: ../../library/pathlib.rst:1915
msgid ":func:`os.readlink`"
msgstr ":func:`os.readlink`"

#: ../../library/pathlib.rst:1915
msgid ":meth:`Path.readlink`"
msgstr ":meth:`Path.readlink`"

#: ../../library/pathlib.rst:1916
msgid ":func:`os.rename`"
msgstr ":func:`os.rename`"

#: ../../library/pathlib.rst:1916
msgid ":meth:`Path.rename`"
msgstr ":meth:`Path.rename`"

#: ../../library/pathlib.rst:1917
msgid ":func:`os.replace`"
msgstr ":func:`os.replace`"

#: ../../library/pathlib.rst:1917
msgid ":meth:`Path.replace`"
msgstr ":meth:`Path.replace`"

#: ../../library/pathlib.rst:1918
msgid ":func:`os.remove`, :func:`os.unlink`"
msgstr ":func:`os.remove`, :func:`os.unlink`"

#: ../../library/pathlib.rst:1918
msgid ":meth:`Path.unlink`"
msgstr ":meth:`Path.unlink`"

#: ../../library/pathlib.rst:1919
msgid ":func:`os.rmdir`"
msgstr ":func:`os.rmdir`"

#: ../../library/pathlib.rst:1919
msgid ":meth:`Path.rmdir`"
msgstr ":meth:`Path.rmdir`"

#: ../../library/pathlib.rst:1920
msgid ":func:`os.chmod`"
msgstr ":func:`os.chmod`"

#: ../../library/pathlib.rst:1920
msgid ":meth:`Path.chmod`"
msgstr ":meth:`Path.chmod`"

#: ../../library/pathlib.rst:1921
msgid ":func:`os.lchmod`"
msgstr ":func:`os.lchmod`"

#: ../../library/pathlib.rst:1921
msgid ":meth:`Path.lchmod`"
msgstr ":meth:`Path.lchmod`"

#: ../../library/pathlib.rst:1925
msgid "Footnotes"
msgstr "备注"

#: ../../library/pathlib.rst:1926
msgid ""
":func:`os.path.relpath` calls :func:`~os.path.abspath` to make paths "
"absolute and remove \"``..``\" parts, whereas :meth:`PurePath.relative_to` "
"is a lexical operation that raises :exc:`ValueError` when its inputs' "
"anchors differ (e.g. if one path is absolute and the other relative.)"
msgstr ""
":func:`os.path.relpath` 会调用 :func:`~os.path.abspath` 以使路径变为绝对路径并移除 "
"\"``..``\" 部分，而 :meth:`PurePath.relative_to` "
"是一个词法操作，当其输入的锚点不同时（例如当一个路径为绝对路径而另一个为相对路径时）将引发 :exc:`ValueError`。"

#: ../../library/pathlib.rst:1930
msgid ""
":func:`os.path.expanduser` returns the path unchanged if the home directory "
"can't be resolved, whereas :meth:`Path.expanduser` raises "
":exc:`RuntimeError`."
msgstr ""
"若无法解析家目录， :func:`os.path.expanduser` 会原封不动地返回输入的路径，但 :meth:`Path.expanduser`"
" 会抛出 :exc:`RuntimeError` 异常。"

#: ../../library/pathlib.rst:1933
msgid ""
":func:`os.path.abspath` removes \"``..``\" components without resolving "
"symlinks, which may change the meaning of the path, whereas "
":meth:`Path.absolute` leaves any \"``..``\" components in the path."
msgstr ""
":func:`os.path.abspath` 会移除 \"``..``\" 组件而不解析符号链接，这可能改变路径的含义，而 "
":meth:`Path.absolute` 则会让路径中的任何 \"``..``\" 组件保持原样。"

#: ../../library/pathlib.rst:1936
msgid ""
":func:`os.walk` always follows symlinks when categorizing paths into "
"*dirnames* and *filenames*, whereas :meth:`Path.walk` categorizes all "
"symlinks into *filenames* when *follow_symlinks* is false (the default.)"
msgstr ""
":func:`os.walk` 在将路径分类为 *dirnames* 和 *filenames* 时总是会跟随符号链接，而 "
":meth:`Path.walk` 当 *follow_symlinks* 为（默认的）假值时会将符号链接分类为 *filenames*。"

#: ../../library/pathlib.rst:1942
msgid "Protocols"
msgstr "协议"

#: ../../library/pathlib.rst:1948
msgid ""
"The :mod:`pathlib.types` module provides types for static type checking."
msgstr ""

#: ../../library/pathlib.rst:1955
msgid ""
"A :class:`typing.Protocol` describing the :attr:`Path.info "
"<pathlib.Path.info>` attribute. Implementations may return cached results "
"from their methods."
msgstr ""

#: ../../library/pathlib.rst:1961
msgid ""
"Return ``True`` if the path is an existing file or directory, or any other "
"kind of file; return ``False`` if the path doesn't exist."
msgstr ""

#: ../../library/pathlib.rst:1964
msgid ""
"If *follow_symlinks* is ``False``, return ``True`` for symlinks without "
"checking if their targets exist."
msgstr ""

#: ../../library/pathlib.rst:1969
msgid ""
"Return ``True`` if the path is a directory, or a symbolic link pointing to a"
" directory; return ``False`` if the path is (or points to) any other kind of"
" file, or if it doesn't exist."
msgstr ""

#: ../../library/pathlib.rst:1973
msgid ""
"If *follow_symlinks* is ``False``, return ``True`` only if the path is a "
"directory (without following symlinks); return ``False`` if the path is any "
"other kind of file, or if it doesn't exist."
msgstr ""

#: ../../library/pathlib.rst:1979
msgid ""
"Return ``True`` if the path is a file, or a symbolic link pointing to a "
"file; return ``False`` if the path is (or points to) a directory or other "
"non-file, or if it doesn't exist."
msgstr ""

#: ../../library/pathlib.rst:1983
msgid ""
"If *follow_symlinks* is ``False``, return ``True`` only if the path is a "
"file (without following symlinks); return ``False`` if the path is a "
"directory or other other non-file, or if it doesn't exist."
msgstr ""

#: ../../library/pathlib.rst:1989
msgid ""
"Return ``True`` if the path is a symbolic link (even if broken); return "
"``False`` if the path is a directory or any kind of file, or if it doesn't "
"exist."
msgstr "如果该路径是符号链接（即使已断开）则返回 ``True``；如果该路径是目录或任何种类的文件，或者已不存在则返回 ``False``。"

#: ../../library/pathlib.rst:11
msgid "path"
msgstr "path"

#: ../../library/pathlib.rst:11
msgid "operations"
msgstr "操作"
