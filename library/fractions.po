# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 14:21+0000\n"
"PO-Revision-Date: 2025-07-18 18:49+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fractions.rst:2
msgid ":mod:`!fractions` --- Rational numbers"
msgstr ":mod:`!fractions` --- 有理数"

#: ../../library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**源代码** :source:`Lib/fractions.py`"

#: ../../library/fractions.rst:14
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ":mod:`fractions` 模块支持分数运算。"

#: ../../library/fractions.rst:17
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another"
" rational number, or from a string."
msgstr "分数实例可以由一对整数，一个分数，或者一个字符串构建而成。"

#: ../../library/fractions.rst:26
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is ``0``, it raises a"
" :exc:`ZeroDivisionError`."
msgstr ""
"第一个版本要求 *numerator* 和 *denominator* 是 :class:`numbers.Rational` 的实例，并返回一个新的 "
":class:`Fraction` 实例，其值为 ``numerator/denominator``。 如果 *denominator* 为 "
"``0``，则会引发 :exc:`ZeroDivisionError`。"

#: ../../library/fractions.rst:31
msgid ""
"The second version requires that *number* is an instance of "
":class:`numbers.Rational` or has the :meth:`!as_integer_ratio` method (this "
"includes :class:`float` and :class:`decimal.Decimal`). It returns a "
":class:`Fraction` instance with exactly the same value. Assumed, that the "
":meth:`!as_integer_ratio` method returns a pair of coprime integers and last"
" one is positive. Note that due to the usual issues with binary point (see "
":ref:`tut-fp-issues`), the argument to ``Fraction(1.1)`` is not exactly "
"equal to 11/10, and so ``Fraction(1.1)`` does *not* return ``Fraction(11, "
"10)`` as one might expect. (But see the documentation for the "
":meth:`limit_denominator` method below.)"
msgstr ""
"第二个版本要求 *number* 是 :class:`numbers.Rational` 的实例，或有 "
":meth:`!as_integer_ratio` 方法 (这包括 :class:`float` 和 "
":class:`decimal.Decimal`)。 它返回一个具有完全相同值的 :class:`Fraction` 实例。 假设 "
":meth:`!as_integer_ratio` 方法返回一对互质整数，后一个是正整数。 请注意，由于二进制浮点数的常见问题 (参见 "
":ref:`tut-fp-issues`)，``Fraction(1.1)`` 的参数并不完全等于 11/10，因此 ``Fraction(1.1)``"
" 不会像人们所期望的那样返回 ``Fraction(11, 10)``。 （但请参阅下面的 :meth:`limit_denominator` "
"方法的文档。）"

#: ../../library/fractions.rst:43
msgid ""
"The last version of the constructor expects a string. The usual form for "
"this instance is::"
msgstr "构造器的最后一个版本需要一个字符串。此实例的常见形式是::"

#: ../../library/fractions.rst:46
msgid "[sign] numerator ['/' denominator]"
msgstr "[sign] numerator ['/' denominator]"

#: ../../library/fractions.rst:48
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits (underscores may "
"be used to delimit digits as with integral literals in code).  In addition, "
"any string that represents a finite value and is accepted by the "
":class:`float` constructor is also accepted by the :class:`Fraction` "
"constructor.  In either form the input string may also have leading and/or "
"trailing whitespace. Here are some examples::"
msgstr ""
"其中的可选项 ``sign`` 可能为 '+' 或 '-' 且 ``numerator`` 和 ``denominator`` (如果存在) "
"是十进制数码的字符串 (可以如代码中的整数字面值一样使用下划线来分隔数码)。 此外，:class:`float` "
"构造器所接受的任何代表一个有限值的字符串也都为 :class:`Fraction` 构造器所接受。 不论哪 "
"种形式的输入字符串也都可以带有开头和/或末尾空格符。 这里是一些示例::"

#: ../../library/fractions.rst:57
msgid ""
">>> from fractions import Fraction\n"
">>> Fraction(16, -10)\n"
"Fraction(-8, 5)\n"
">>> Fraction(123)\n"
"Fraction(123, 1)\n"
">>> Fraction()\n"
"Fraction(0, 1)\n"
">>> Fraction('3/7')\n"
"Fraction(3, 7)\n"
">>> Fraction(' -3/7 ')\n"
"Fraction(-3, 7)\n"
">>> Fraction('1.414213 \\t\\n')\n"
"Fraction(1414213, 1000000)\n"
">>> Fraction('-.125')\n"
"Fraction(-1, 8)\n"
">>> Fraction('7e-6')\n"
"Fraction(7, 1000000)\n"
">>> Fraction(2.25)\n"
"Fraction(9, 4)\n"
">>> Fraction(1.1)\n"
"Fraction(2476979795053773, 2251799813685248)\n"
">>> from decimal import Decimal\n"
">>> Fraction(Decimal('1.1'))\n"
"Fraction(11, 10)"
msgstr ""
">>> from fractions import Fraction\n"
">>> Fraction(16, -10)\n"
"Fraction(-8, 5)\n"
">>> Fraction(123)\n"
"Fraction(123, 1)\n"
">>> Fraction()\n"
"Fraction(0, 1)\n"
">>> Fraction('3/7')\n"
"Fraction(3, 7)\n"
">>> Fraction(' -3/7 ')\n"
"Fraction(-3, 7)\n"
">>> Fraction('1.414213 \\t\\n')\n"
"Fraction(1414213, 1000000)\n"
">>> Fraction('-.125')\n"
"Fraction(-1, 8)\n"
">>> Fraction('7e-6')\n"
"Fraction(7, 1000000)\n"
">>> Fraction(2.25)\n"
"Fraction(9, 4)\n"
">>> Fraction(1.1)\n"
"Fraction(2476979795053773, 2251799813685248)\n"
">>> from decimal import Decimal\n"
">>> Fraction(Decimal('1.1'))\n"
"Fraction(11, 10)"

#: ../../library/fractions.rst:83
msgid ""
"The :class:`Fraction` class inherits from the abstract base class "
":class:`numbers.Rational`, and implements all of the methods and operations "
"from that class.  :class:`Fraction` instances are :term:`hashable`, and "
"should be treated as immutable.  In addition, :class:`Fraction` has the "
"following properties and methods:"
msgstr ""
":class:`Fraction` 类继承自抽象基类 :class:`numbers.Rational`，并实现了该类的所有方法和操作。 "
":class:`Fraction` 实例是 :term:`hashable` 对象，并应当被视为不可变对象。 此外，:class:`Fraction` "
"还具有以下特征属性和方法:"

#: ../../library/fractions.rst:89
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and "
":class:`decimal.Decimal` instances."
msgstr ""
":class:`Fraction` 构造器现在接受 :class:`float` 和 :class:`decimal.Decimal` 实例。"

#: ../../library/fractions.rst:93
msgid ""
"The :func:`math.gcd` function is now used to normalize the *numerator* and "
"*denominator*. :func:`math.gcd` always returns an :class:`int` type. "
"Previously, the GCD type depended on *numerator* and *denominator*."
msgstr ""
"现在会使用 :func:`math.gcd` 函数来正规化 *numerator* 和 *denominator*。 :func:`math.gcd` "
"总是返回 :class:`int` 类型。 在之前版本中，GCD 的类型取决于 *numerator* 和 *denominator* 的类型。"

#: ../../library/fractions.rst:98
msgid ""
"Underscores are now permitted when creating a :class:`Fraction` instance "
"from a string, following :PEP:`515` rules."
msgstr "现在当使用字符串创建 :class:`Fraction` 实例时已允许使用下划线，遵循 :PEP:`515` 规则。"

#: ../../library/fractions.rst:102
msgid ""
":class:`Fraction` implements ``__int__`` now to satisfy "
"``typing.SupportsInt`` instance checks."
msgstr ":class:`Fraction` 现在实现了 ``__int__`` 以满足 ``typing.SupportsInt`` 实例检测。"

#: ../../library/fractions.rst:106
msgid ""
"Space is allowed around the slash for string inputs: ``Fraction('2 / 3')``."
msgstr "允许字符串输入在斜杠两边添加空格: ``Fraction('2 / 3')``。"

#: ../../library/fractions.rst:109
msgid ""
":class:`Fraction` instances now support float-style formatting, with "
"presentation types ``\"e\"``, ``\"E\"``, ``\"f\"``, ``\"F\"``, ``\"g\"``, "
"``\"G\"`` and ``\"%\"\"``."
msgstr ""
":class:`Fraction` 实例现在支持浮点风格的格式化，使用 ``\"e\"``, ``\"E\"``, ``\"f\"``, "
"``\"F\"``, ``\"g\"``, ``\"G\"`` 和 ``\"%\"\"`` 等表示类型。."

#: ../../library/fractions.rst:114
msgid ""
"Formatting of :class:`Fraction` instances without a presentation type now "
"supports fill, alignment, sign handling, minimum width and grouping."
msgstr "没有表示类型的 :class:`Fraction` 实例的格式化现在支持填充、对齐、正负号处理、最小宽度和分组。"

#: ../../library/fractions.rst:118
msgid ""
"The :class:`Fraction` constructor now accepts any objects with the "
":meth:`!as_integer_ratio` method."
msgstr ":class:`Fraction` 构造器现在接受任何有 :meth:`!as_integer_ratio` 方法的对象。"

#: ../../library/fractions.rst:124
msgid "Numerator of the Fraction in lowest term."
msgstr "最简分数形式的分子。"

#: ../../library/fractions.rst:128
msgid "Denominator of the Fraction in lowest term."
msgstr "最简分数形式的分母。"

#: ../../library/fractions.rst:133
msgid ""
"Return a tuple of two integers, whose ratio is equal to the original "
"Fraction.  The ratio is in lowest terms and has a positive denominator."
msgstr "返回由两个整数组成的元组，两数之比等于原 Fraction 的值且其分母为正数。"

#: ../../library/fractions.rst:141
msgid "Return ``True`` if the Fraction is an integer."
msgstr "如果 Fraction 为整数则返回 ``True``。"

#: ../../library/fractions.rst:147
msgid ""
"Alternative constructor which only accepts instances of :class:`float` or "
":class:`numbers.Integral`. Beware that ``Fraction.from_float(0.3)`` is not "
"the same value as ``Fraction(3, 10)``."
msgstr ""
"只接受 :class:`float` 或 :class:`numbers.Integral` 实例的替代性构造器。 请注意 "
"``Fraction.from_float(0.3)`` 与 ``Fraction(3, 10)`` 的值是不同的。"

#: ../../library/fractions.rst:153
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance"
" directly from a :class:`float`."
msgstr "从 Python 3.2 开始，在构造 :class:`Fraction` 实例时可以直接使用 :class:`float`。"

#: ../../library/fractions.rst:159
msgid ""
"Alternative constructor which only accepts instances of "
":class:`decimal.Decimal` or :class:`numbers.Integral`."
msgstr "只接受 :class:`decimal.Decimal` 或 :class:`numbers.Integral` 实例的替代性构造器。"

#: ../../library/fractions.rst:164
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance"
" directly from a :class:`decimal.Decimal` instance."
msgstr ""
"从 Python 3.2 开始，在构造 :class:`Fraction` 实例时可以直接使用 :class:`decimal.Decimal` 实例。"

#: ../../library/fractions.rst:171
msgid ""
"Alternative constructor which only accepts instances of "
":class:`numbers.Integral`, :class:`numbers.Rational`, :class:`float` or "
":class:`decimal.Decimal`, and objects with the :meth:`!as_integer_ratio` "
"method, but not strings."
msgstr ""
"另一种构造器，只接受 "
":class:`numbers.Integral`、:class:`numbers.Rational`、:class:`float` 或 "
":class:`decimal.Decimal` 的实例，以及带有 :meth:`!as_integer_ratio` 方法但不是字符串的对象。"

#: ../../library/fractions.rst:181
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"找到并返回一个 :class:`Fraction` 使得其值最接近 ``self`` 并且分母不大于 max_denominator。 "
"此方法适用于找出给定浮点数的有理数近似值："

#: ../../library/fractions.rst:189
msgid "or for recovering a rational number that's represented as a float:"
msgstr "或是用来恢复被表示为一个浮点数的有理数："

#: ../../library/fractions.rst:202
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr "返回最大的 :class:`int` ``<= self``。 此方法也可通过 :func:`math.floor` 函数来使用："

#: ../../library/fractions.rst:212
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr "返回最小的 :class:`int` ``>= self``。 此方法也可通过 :func:`math.ceil` 函数来使用。"

#: ../../library/fractions.rst:219
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the "
":func:`round` function."
msgstr ""
"第一个版本返回一个 :class:`int` 使得其值最接近 ``self``，位值为二分之一时只对偶数舍入。第二个版本会将 ``self`` "
"舍入到最接近 ``Fraction(1, 10**ndigits)`` 的倍数（如果 ``ndigits`` "
"为负值则为逻辑运算），位值为二分之一时同样只对偶数舍入。 此方法也可通过 :func:`round` 函数来使用。"

#: ../../library/fractions.rst:227
msgid ""
"Provides support for formatting of :class:`Fraction` instances via the "
":meth:`str.format` method, the :func:`format` built-in function, or "
":ref:`Formatted string literals <f-strings>`."
msgstr ""
"通过 :meth:`str.format` 方法、:func:`format` 内置函数或 :ref:`格式化字符串字面值 <f-strings>` "
"提供对 :class:`Fraction` 实例格式化的支持。"

#: ../../library/fractions.rst:231
msgid ""
"If the ``format_spec`` format specification string does not end with one of "
"the presentation types ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, ``'G'`` "
"or ``'%'`` then formatting follows the general rules for fill, alignment, "
"sign handling, minimum width, and grouping as described in the :ref:`format "
"specification mini-language <formatspec>`. The \"alternate form\" flag "
"``'#'`` is supported: if present, it forces the output string to always "
"include an explicit denominator, even when the value being formatted is an "
"exact integer. The zero-fill flag ``'0'`` is not supported."
msgstr ""
"如果 ``format_spec`` 格式说明字符串末尾不带表示类型 ``'e'``, ``'E'``, ``'f'``, ``'F'``, "
"``'g'``, ``'G'`` 或 ``'%'`` 之一则格式化操作将遵循在 :ref:`格式说明微语言 <formatspec>` "
"中描述的有关填充、对齐、正负号处理、最小宽度和分组的一般规则。 “替代形式”旗标 ``'#'`` "
"也是受支持的：如果提供，将强制输出字符串始终包括一个显式的分母，即使被格式化的值恰好为整数也是如此。 表示填充零值的旗标 ``'0'`` 是不被支持的。"

#: ../../library/fractions.rst:241
msgid ""
"If the ``format_spec`` format specification string ends with one of the "
"presentation types ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, ``'G'`` or "
"``'%'`` then formatting follows the rules outlined for the :class:`float` "
"type in the :ref:`formatspec` section."
msgstr ""
"如果 ``format_spec`` 格式说明字符串末尾带有表示类型 ``'e'``, ``'E'``, ``'f'``, ``'F'``, "
"``'g'``, ``'G'`` 或 ``'%'`` 之一那么格式化操作将遵循在 :ref:`formatspec` 小节中针对 "
":class:`float` 类型所描述的规则。"

#: ../../library/fractions.rst:246
msgid "Here are some examples::"
msgstr "这是一些例子::"

#: ../../library/fractions.rst:248
msgid ""
">>> from fractions import Fraction\n"
">>> format(Fraction(103993, 33102), '_')\n"
"'103_993/33_102'\n"
">>> format(Fraction(1, 7), '.^+10')\n"
"'...+1/7...'\n"
">>> format(Fraction(3, 1), '')\n"
"'3'\n"
">>> format(Fraction(3, 1), '#')\n"
"'3/1'\n"
">>> format(Fraction(1, 7), '.40g')\n"
"'0.1428571428571428571428571428571428571429'\n"
">>> format(Fraction('1234567.855'), '_.2f')\n"
"'1_234_567.86'\n"
">>> f\"{Fraction(355, 113):*>20.6e}\"\n"
"'********3.141593e+00'\n"
">>> old_price, new_price = 499, 672\n"
">>> \"{:.2%} price increase\".format(Fraction(new_price, old_price) - 1)\n"
"'34.67% price increase'"
msgstr ""
">>> from fractions import Fraction\n"
">>> format(Fraction(103993, 33102), '_')\n"
"'103_993/33_102'\n"
">>> format(Fraction(1, 7), '.^+10')\n"
"'...+1/7...'\n"
">>> format(Fraction(3, 1), '')\n"
"'3'\n"
">>> format(Fraction(3, 1), '#')\n"
"'3/1'\n"
">>> format(Fraction(1, 7), '.40g')\n"
"'0.1428571428571428571428571428571428571429'\n"
">>> format(Fraction('1234567.855'), '_.2f')\n"
"'1_234_567.86'\n"
">>> f\"{Fraction(355, 113):*>20.6e}\"\n"
"'********3.141593e+00'\n"
">>> old_price, new_price = 499, 672\n"
">>> \"{:.2%} price increase\".format(Fraction(new_price, old_price) - 1)\n"
"'34.67% price increase'"

#: ../../library/fractions.rst:270
msgid "Module :mod:`numbers`"
msgstr ":mod:`numbers` 模块"

#: ../../library/fractions.rst:271
msgid "The abstract base classes making up the numeric tower."
msgstr "构成数字塔的所有抽象基类。"

#: ../../library/fractions.rst:20
msgid "as_integer_ratio()"
msgstr "as_integer_ratio()"
