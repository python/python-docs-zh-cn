# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fractions.rst:2
msgid ":mod:`fractions` --- Rational numbers"
msgstr ":mod:`fractions` --- 分数"

#: ../../library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**源代码** :source:`Lib/fractions.py`"

#: ../../library/fractions.rst:14
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ":mod:`fractions` 模块支持分数运算。"

#: ../../library/fractions.rst:17
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another"
" rational number, or from a string."
msgstr "分数实例可以由一对整数，一个分数，或者一个字符串构建而成。"

#: ../../library/fractions.rst:26
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is ``0``, it raises a"
" :exc:`ZeroDivisionError`. The second version requires that *other_fraction*"
" is an instance of :class:`numbers.Rational` and returns a :class:`Fraction`"
" instance with the same value.  The next two versions accept either a "
":class:`float` or a :class:`decimal.Decimal` instance, and return a "
":class:`Fraction` instance with exactly the same value.  Note that due to "
"the usual issues with binary floating-point (see :ref:`tut-fp-issues`), the "
"argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so "
"``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might "
"expect. (But see the documentation for the :meth:`limit_denominator` method "
"below.) The last version of the constructor expects a string or unicode "
"instance. The usual form for this instance is::"
msgstr ""
"第一个版本要求 *numerator* 和 *denominator* 是 :class:`numbers.Rational` 的实例，并返回一个值为 "
"``numerator/denominator`` 的新 :class:`Fraction` 实例。 如果 *denominator* 是 ``0`` "
"则会引发 :exc:`ZeroDivisionError`。 第二个版本要求 *other_fraction* 是 "
":class:`numbers.Rational` 的实例，并返回具有相同值的 :class:`Fraction` 实例。 接下来的两个版本接受 "
":class:`float` 或 :class:`decimal.Decimal` 实例，并返回具有完全相同值的 :class:`Fraction` "
"实例。 请注意由于二进制浮点运算通常存在的问题 (参见 :ref:`tut-fp-issues`)，``Fraction(1.1)`` "
"的参数并不完全等于 11/10，因此 ``Fraction(1.1)`` 也 *不会* 像人们所期望的那样返回 ``Fraction(11, "
"10)``。 （请参阅下面 :meth:`limit_denominator` 方法的文档。） 最后一个版本的构造器接受一个字符串或 unicode "
"实例。 该实例的通常形式为::"

#: ../../library/fractions.rst:43
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits (underscores may "
"be used to delimit digits as with integral literals in code).  In addition, "
"any string that represents a finite value and is accepted by the "
":class:`float` constructor is also accepted by the :class:`Fraction` "
"constructor.  In either form the input string may also have leading and/or "
"trailing whitespace. Here are some examples::"
msgstr ""
"其中的可选项 ``sign`` 可能为 '+' 或 '-' 且 ``numerator`` 和 ``denominator`` (如果存在) "
"是十进制数码的字符串 (可以如代码中的整数字面值一样使用下划线来分隔数码)。 此外，:class:`float` "
"构造器所接受的任何代表一个有限值的字符串也都为 :class:`Fraction` 构造器所接受。 不论哪 "
"种形式的输入字符串也都可以带有开头和/或末尾空格符。 这里是一些示例::"

#: ../../library/fractions.rst:78
msgid ""
"The :class:`Fraction` class inherits from the abstract base class "
":class:`numbers.Rational`, and implements all of the methods and operations "
"from that class.  :class:`Fraction` instances are :term:`hashable`, and "
"should be treated as immutable.  In addition, :class:`Fraction` has the "
"following properties and methods:"
msgstr ""
":class:`Fraction` 类继承自抽象基类 :class:`numbers.Rational`，并实现了该类的所有方法和操作。 "
":class:`Fraction` 实例是 :term:`hashable` 对象，并应当被视为不可变对象。 此外，:class:`Fraction` "
"还具有以下特征属性和方法:"

#: ../../library/fractions.rst:84
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and "
":class:`decimal.Decimal` instances."
msgstr ""
":class:`Fraction` 构造器现在接受 :class:`float` 和 :class:`decimal.Decimal` 实例。"

#: ../../library/fractions.rst:88
msgid ""
"The :func:`math.gcd` function is now used to normalize the *numerator* and "
"*denominator*. :func:`math.gcd` always return a :class:`int` type. "
"Previously, the GCD type depended on *numerator* and *denominator*."
msgstr ""
"现在会使用 :func:`math.gcd` 函数来正规化 *numerator* 和 *denominator*。 :func:`math.gcd` "
"总是返回 :class:`int` 类型。 在之前版本中，GCD 的类型取决于 *numerator* 和 *denominator* 的类型。"

#: ../../library/fractions.rst:93
msgid ""
"Underscores are now permitted when creating a :class:`Fraction` instance "
"from a string, following :PEP:`515` rules."
msgstr "现在当使用字符串创建 :class:`Fraction` 实例时已允许使用下划线，遵循 :PEP:`515` 规则。"

#: ../../library/fractions.rst:97
msgid ""
":class:`Fraction` implements ``__int__`` now to satisfy "
"``typing.SupportsInt`` instance checks."
msgstr ":class:`Fraction` 现在实现了 ``__int__`` 以满足 ``typing.SupportsInt`` 实例检测。"

#: ../../library/fractions.rst:103
msgid "Numerator of the Fraction in lowest term."
msgstr "最简分数形式的分子。"

#: ../../library/fractions.rst:107
msgid "Denominator of the Fraction in lowest term."
msgstr "最简分数形式的分母。"

#: ../../library/fractions.rst:112
msgid ""
"Return a tuple of two integers, whose ratio is equal to the Fraction and "
"with a positive denominator."
msgstr ""

#: ../../library/fractions.rst:119
msgid ""
"Alternative constructor which only accepts instances of :class:`float` or "
":class:`numbers.Integral`. Beware that ``Fraction.from_float(0.3)`` is not "
"the same value as ``Fraction(3, 10)``."
msgstr ""
"只接受 :class:`float` 或 :class:`numbers.Integral` 实例的替代性构造器。 请注意 "
"``Fraction.from_float(0.3)`` 与 ``Fraction(3, 10)`` 的值是不同的。"

#: ../../library/fractions.rst:125
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance"
" directly from a :class:`float`."
msgstr "从 Python 3.2 开始，在构造 :class:`Fraction` 实例时可以直接使用 :class:`float`。"

#: ../../library/fractions.rst:131
msgid ""
"Alternative constructor which only accepts instances of "
":class:`decimal.Decimal` or :class:`numbers.Integral`."
msgstr "只接受 :class:`decimal.Decimal` 或 :class:`numbers.Integral` 实例的替代性构造器。"

#: ../../library/fractions.rst:136
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance"
" directly from a :class:`decimal.Decimal` instance."
msgstr ""
"从 Python 3.2 开始，在构造 :class:`Fraction` 实例时可以直接使用 :class:`decimal.Decimal` 实例。"

#: ../../library/fractions.rst:143
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"找到并返回一个 :class:`Fraction` 使得其值最接近 ``self`` 并且分母不大于 max_denominator。 "
"此方法适用于找出给定浮点数的有理数近似值："

#: ../../library/fractions.rst:151
msgid "or for recovering a rational number that's represented as a float:"
msgstr "或是用来恢复被表示为一个浮点数的有理数："

#: ../../library/fractions.rst:164
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr "返回最大的 :class:`int` ``<= self``。 此方法也可通过 :func:`math.floor` 函数来使用："

#: ../../library/fractions.rst:174
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr "返回最小的 :class:`int` ``>= self``。 此方法也可通过 :func:`math.ceil` 函数来使用。"

#: ../../library/fractions.rst:181
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the "
":func:`round` function."
msgstr ""
"第一个版本返回一个 :class:`int` 使得其值最接近 ``self``，位值为二分之一时只对偶数舍入。第二个版本会将 ``self`` "
"舍入到最接近 ``Fraction(1, 10**ndigits)`` 的倍数（如果 ``ndigits`` "
"为负值则为逻辑运算），位值为二分之一时同样只对偶数舍入。 此方法也可通过 :func:`round` 函数来使用。"

#: ../../library/fractions.rst:190
msgid "Module :mod:`numbers`"
msgstr ":mod:`numbers` 模块"

#: ../../library/fractions.rst:191
msgid "The abstract base classes making up the numeric tower."
msgstr "构成数字塔的所有抽象基类。"
