# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# Stan Ulbrych, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-05 17:03+0000\n"
"PO-Revision-Date: 2025-07-18 20:05+0000\n"
"Last-Translator: Stan Ulbrych, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/intro.rst:5
msgid "Introduction"
msgstr "概述"

#: ../../library/intro.rst:7
msgid "The \"Python library\" contains several different kinds of components."
msgstr "\"Python 库\"中包含了几种不同的组件。"

#: ../../library/intro.rst:9
msgid ""
"It contains data types that would normally be considered part of the "
"\"core\" of a language, such as numbers and lists.  For these types, the "
"Python language core defines the form of literals and places some "
"constraints on their semantics, but does not fully define the semantics.  "
"(On the other hand, the language core does define syntactic properties like "
"the spelling and priorities of operators.)"
msgstr ""
"它包含通常被视为语言“核心”中的一部分的数据类型，例如数字和列表。对于这些类型，Python语言核心定义了文字的形式，并对它们的语义设置了一些约束，但没有完全定义语义。（另一方面，语言核心确实定义了语法属性，如操作符的拼写和优先级。）"

#: ../../library/intro.rst:15
msgid ""
"The library also contains built-in functions and exceptions --- objects that"
" can be used by all Python code without the need of an :keyword:`import` "
"statement. Some of these are defined by the core language, but many are not "
"essential for the core semantics and are only described here."
msgstr ""
"这个库也包含了内置函数和异常 --- 不需要 :keyword:`import` "
"语句就可以在所有Python代码中使用的对象。有一些是由语言核心定义的，但是许多对于核心语义不是必需的，并且仅在这里描述。"

#: ../../library/intro.rst:20
msgid ""
"The bulk of the library, however, consists of a collection of modules. There"
" are many ways to dissect this collection.  Some modules are written in C "
"and built in to the Python interpreter; others are written in Python and "
"imported in source form.  Some modules provide interfaces that are highly "
"specific to Python, like printing a stack trace; some provide interfaces "
"that are specific to particular operating systems, such as access to "
"specific hardware; others provide interfaces that are specific to a "
"particular application domain, like the World Wide Web. Some modules are "
"available in all versions and ports of Python; others are only available "
"when the underlying system supports or requires them; yet others are "
"available only when a particular configuration option was chosen at the time"
" when Python was compiled and installed."
msgstr ""
"不过这个库主要是由一系列的模块组成。这些模块集可以不同方式分类。有些模块是用 C 编写并内置于 Python 解释器中；另一些模块则是用 Python "
"编写并以源码形式导入。有些模块提供专用于 Python "
"的接口，例如打印栈追踪信息；有些模块提供专用于特定操作系统的接口，例如操作特定的硬件；另一些模块则提供针对特定应用领域的接口，例如万维网。有些模块在所有更新和移植版本的"
" Python 中可用；另一些模块仅在底层系统支持或要求时可用；还有些模块则仅当编译和安装 Python 时选择了特定配置选项时才可用。"

#: ../../library/intro.rst:32
msgid ""
"This manual is organized \"from the inside out:\" it first describes the "
"built-in functions, data types and exceptions, and finally the modules, "
"grouped in chapters of related modules."
msgstr "本手册以 \"从内到外\" 的顺序组织：首先描述内置函数、数据类型和异常，最后是根据相关性进行分组的各种模块。"

#: ../../library/intro.rst:36
msgid ""
"This means that if you start reading this manual from the start, and skip to"
" the next chapter when you get bored, you will get a reasonable overview of "
"the available modules and application areas that are supported by the Python"
" library.  Of course, you don't *have* to read it like a novel --- you can "
"also browse the table of contents (in front of the manual), or look for a "
"specific function, module or term in the index (in the back).  And finally, "
"if you enjoy learning about random subjects, you choose a random page number"
" (see module :mod:`random`) and read a section or two.  Regardless of the "
"order in which you read the sections of this manual, it helps to start with "
"chapter :ref:`built-in-funcs`, as the remainder of the manual assumes "
"familiarity with this material."
msgstr ""
"这意味着如果你从头开始阅读本手册，并在感到厌烦时跳到下一章，你仍能对 Python 库的可用模块和所支持的应用领域有个大致了解。当然，你并非 *必须* "
"如同读小说一样从头读到尾 --- 你也可以先浏览内容目录 (在手册开头)，或在索引 (在手册末尾) "
"中查找某个特定函数、模块或条目。最后，如果你喜欢随意学习某个主题，你可以选择一个随机页码 (参见 :mod:`random` 模块) "
"并读上一两小节。无论你想以怎样的顺序阅读本手册，还是建议先从 :ref:`built-in-funcs` "
"这一章开始，因为本手册的其余内容都需要你熟悉其中的基本概念。"

#: ../../library/intro.rst:48
msgid "Let the show begin!"
msgstr "让我们开始吧！"

#: ../../library/intro.rst:54
msgid "Notes on availability"
msgstr "可用性注释"

#: ../../library/intro.rst:56
msgid ""
"An \"Availability: Unix\" note means that this function is commonly found on"
" Unix systems.  It does not make any claims about its existence on a "
"specific operating system."
msgstr "如果出现“适用：Unix”注释，意味着相应函数通常存在于 Unix 系统中。 但这并不保证其存在于某个特定的操作系统中。"

#: ../../library/intro.rst:60
msgid ""
"If not separately noted, all functions that claim \"Availability: Unix\" are"
" supported on macOS, which builds on a Unix core."
msgstr "如果没有单独说明，所有注明 \"可用性: Unix\" 的函数都在 macOS 上受到支持，因为此系统是基于 Unix 内核的。"

#: ../../library/intro.rst:63
msgid ""
"If an availability note contains both a minimum Kernel version and a minimum"
" libc version, then both conditions must hold. For example a feature with "
"note *Availability: Linux >= 3.17 with glibc >= 2.27* requires both Linux "
"3.17 or newer and glibc 2.27 or newer."
msgstr ""
"如果一条可用性注释同时包含最低 Kernel 版本和最低 libc 版本，则两个条件都必须满足。 例如当某个特性带有注释 *可用性: Linux >= "
"3.17 且 glibc >= 2.27* 则表示同时要求 Linux 3.17 以上版本和 glibc 2.27 以上版本。"

#: ../../library/intro.rst:71
msgid "WebAssembly platforms"
msgstr "WebAssembly 平台"

#: ../../library/intro.rst:73
msgid ""
"The `WebAssembly`_ platforms ``wasm32-emscripten`` (`Emscripten`_) and "
"``wasm32-wasi`` (`WASI`_) provide a subset of POSIX APIs. WebAssembly "
"runtimes and browsers are sandboxed and have limited access to the host and "
"external resources. Any Python standard library module that uses processes, "
"threading, networking, signals, or other forms of inter-process "
"communication (IPC), is either not available or may not work as on other "
"Unix-like systems. File I/O, file system, and Unix permission-related "
"functions are restricted, too. Emscripten does not permit blocking I/O. "
"Other blocking operations like :func:`~time.sleep` block the browser event "
"loop."
msgstr ""
"`WebAssembly`_ 平台 ``wasm32-emscripten`` (`Emscripten`_) 和 ``wasm32-wasi`` "
"(`WASI`_) 分别提供了 POSIX API 的一个子集。 WebAssembly "
"运行时和浏览器都处于沙盒模式中并具有对主机和外部资源的受限访问权。 任何使用了进程、线程、网络、信号或其他形式的进程间通信 (IPC) 的 Python"
" 标准库模块都或者不可用，或者其作用方式与在其他类 Unix 系统上不同。 文件 I/O, 文件系统和 Unix 权限相关的函数也同样会受限。 "
"Emscripten 不允许阻塞式 I/O。 其他阻塞式操作如 :func:`~time.sleep` 则会阻塞浏览器的事件循环。"

#: ../../library/intro.rst:83
msgid ""
"The properties and behavior of Python on WebAssembly platforms depend on the"
" `Emscripten`_-SDK or `WASI`_-SDK version, WASM runtimes (browser, NodeJS, "
"`wasmtime`_), and Python build time flags. WebAssembly, Emscripten, and WASI"
" are evolving standards; some features like networking may be supported in "
"the future."
msgstr ""
"Python 在 WebAssembly 平台上的特性与行为依赖于 `Emscripten`_-SDK 或 `WASI`_-SDK 的版本, WASM "
"运行时 (浏览器, NodeJS, `wasmtime`_) 以及 Python 编译时旗标。 WebAssembly, Emscripten 和 "
"WASI 都是尚在不断演化中的标准；某些特性例如网络可能会在未来被支持。"

#: ../../library/intro.rst:89
msgid ""
"For Python in the browser, users should consider `Pyodide`_ or `PyScript`_. "
"PyScript is built on top of Pyodide, which itself is built on top of CPython"
" and Emscripten. Pyodide provides access to browsers' JavaScript and DOM "
"APIs as well as limited networking capabilities with JavaScript's "
"``XMLHttpRequest`` and ``Fetch`` APIs."
msgstr ""
"对于在浏览器上运行的 Python，用户可以考虑 `Pyodide`_ 或 `PyScript`_。 PyScript 是在 Pyodide "
"之上构建的，后者本身则是在 CPython 和 Emscripten 之上构建的。 Pyodide 提供了对浏览器的 JavaScript 和 DOM "
"API 的访问并通过 JavaScript 的 ``XMLHttpRequest`` 和 ``Fetch`` API 提供了受限的网络功能。"

#: ../../library/intro.rst:95
msgid ""
"Process-related APIs are not available or always fail with an error. That "
"includes APIs that spawn new processes (:func:`~os.fork`, "
":func:`~os.execve`), wait for processes (:func:`~os.waitpid`), send signals "
"(:func:`~os.kill`), or otherwise interact with processes. The "
":mod:`subprocess` is importable but does not work."
msgstr ""
"进程相关的 API 或者不可用或者将始终报错失败。 这包括生成新进程 (:func:`~os.fork`, :func:`~os.execve`), "
"等待进程 (:func:`~os.waitpid`), 发送信号 (:func:`~os.kill`) 或者以其他方式与进程交互的 API。 "
":mod:`subprocess` 可以被导入但将没有任何作用。"

#: ../../library/intro.rst:101
msgid ""
"The :mod:`socket` module is available, but is limited and behaves "
"differently from other platforms. On Emscripten, sockets are always non-"
"blocking and require additional JavaScript code and helpers on the server to"
" proxy TCP through WebSockets; see `Emscripten Networking`_ for more "
"information. WASI snapshot preview 1 only permits sockets from an existing "
"file descriptor."
msgstr ""
":mod:`socket` 模块可以使用，但将会受限而使其行为与在其他平台上不一致。 在 Emscripten "
"上，套接字将始终为非阻塞式的并且要求额外的 JavaScript 代码和服务器上的辅助工具来代理通过 WebSockets 的 TCP；请参阅 "
"`Emscripten Networking`_ 了解详情。 WASI snapshot preview 1 只允许来自现有文件描述符的套接字。"

#: ../../library/intro.rst:108
msgid ""
"Some functions are stubs that either don't do anything and always return "
"hardcoded values."
msgstr "某些函数是不执行任何操作的空壳或是始终返回硬编码的值。"

#: ../../library/intro.rst:111
msgid ""
"Functions related to file descriptors, file permissions, file ownership, and"
" links are limited and don't support some operations. For example, WASI does"
" not permit symlinks with absolute file names."
msgstr "有关文件描述符、文件访问权、文件所有权和链接的函数均受到限制并且不支持某些操作。 例如，WASI 不允许具有绝对文件名的符号链接。"
