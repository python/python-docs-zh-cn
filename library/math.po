# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/math.rst:2
msgid ":mod:`!math` --- Mathematical functions"
msgstr ":mod:`!math` --- 数学函数"

#: ../../library/math.rst:13
msgid ""
"This module provides access to the mathematical functions defined by the C "
"standard."
msgstr "该模块提供了对C标准定义的数学函数的访问。"

#: ../../library/math.rst:16
msgid ""
"These functions cannot be used with complex numbers; use the functions of "
"the same name from the :mod:`cmath` module if you require support for "
"complex numbers.  The distinction between functions which support complex "
"numbers and those which don't is made since most users do not want to learn "
"quite as much mathematics as required to understand complex numbers.  "
"Receiving an exception instead of a complex result allows earlier detection "
"of the unexpected complex number used as a parameter, so that the programmer"
" can determine how and why it was generated in the first place."
msgstr ""
"这些函数不适用于复数；如果你需要计算复数，请使用 :mod:`cmath` "
"模块中的同名函数。将支持计算复数的函数区分开的目的，在于大多数用户并不愿意为了理解复数而去学习太多数学知识。得到一个异常而不是一个复数结果能让复数当作参数的情况更早被监测到，进而程序员可以第一时间调查其产生的原因。"

#: ../../library/math.rst:25
msgid ""
"The following functions are provided by this module.  Except when explicitly"
" noted otherwise, all return values are floats."
msgstr "该模块提供了以下函数。除非另有明确说明，否则所有返回值均为浮点数。"

#: ../../library/math.rst:30
msgid "Number-theoretic and representation functions"
msgstr "数论与表示函数"

#: ../../library/math.rst:34
msgid ""
"Return the ceiling of *x*, the smallest integer greater than or equal to "
"*x*. If *x* is not a float, delegates to :meth:`x.__ceil__ "
"<object.__ceil__>`, which should return an :class:`~numbers.Integral` value."
msgstr ""
"返回 *x* 的向上取整，即大于或等于 *x* 的最小的整数。如果 *x* 不是浮点数，委托给 :meth:`x.__ceil__ "
"<object.__ceil__>` ，它应该返回一个 :class:`~numbers.Integral` 的值。"

#: ../../library/math.rst:41
msgid ""
"Return the number of ways to choose *k* items from *n* items without "
"repetition and without order."
msgstr "返回不重复且无顺序地从 *n* 项中选择 *k* 项的方式总数。"

#: ../../library/math.rst:44
msgid ""
"Evaluates to ``n! / (k! * (n - k)!)`` when ``k <= n`` and evaluates to zero "
"when ``k > n``."
msgstr "当 ``k <= n`` 时取值为 ``n! / (k! * (n - k)!)``；当 ``k > n`` 时取值为零。"

#: ../../library/math.rst:47
msgid ""
"Also called the binomial coefficient because it is equivalent to the "
"coefficient of k-th term in polynomial expansion of ``(1 + x)ⁿ``."
msgstr "也称为二项式系数，因为它等价于 ``(1 + x)ⁿ`` 的多项式展开中第 k 项的系数。"

#: ../../library/math.rst:51 ../../library/math.rst:261
msgid ""
"Raises :exc:`TypeError` if either of the arguments are not integers. Raises "
":exc:`ValueError` if either of the arguments are negative."
msgstr "如果任一参数不为整数则会引发 :exc:`TypeError`。 如果任一参数为负数则会引发 :exc:`ValueError`。"

#: ../../library/math.rst:59
msgid ""
"Return a float with the magnitude (absolute value) of *x* but the sign of "
"*y*.  On platforms that support signed zeros, ``copysign(1.0, -0.0)`` "
"returns *-1.0*."
msgstr ""
"返回一个基于 *x* 的绝对值和 *y* 的符号的浮点数。在支持带符号零的平台上，``copysign(1.0, -0.0)`` 返回 *-1.0*."

#: ../../library/math.rst:66
msgid "Return the absolute value of *x*."
msgstr "返回 *x* 的绝对值。"

#: ../../library/math.rst:71
msgid ""
"Return *n* factorial as an integer.  Raises :exc:`ValueError` if *n* is not "
"integral or is negative."
msgstr "将 *n* 的阶乘作为整数返回。 如果 *n* 不是正数或为负值则会引发 :exc:`ValueError`。"

#: ../../library/math.rst:74
msgid "Accepting floats with integral values (like ``5.0``) is deprecated."
msgstr "接受具有整数值的浮点数 (例如 ``5.0``) 的行为已被弃用。"

#: ../../library/math.rst:80
msgid ""
"Return the floor of *x*, the largest integer less than or equal to *x*.  If "
"*x* is not a float, delegates to :meth:`x.__floor__ <object.__floor__>`, "
"which should return an :class:`~numbers.Integral` value."
msgstr ""
"返回 *x* 的向下取整，小于或等于 *x* 的最大整数。如果 *x* 不是浮点数，则委托给 :meth:`x.__floor__ "
"<object.__floor__>` ，它应返回一个 :class:`~numbers.Integral` 值。"

#: ../../library/math.rst:87
msgid ""
"Return the floating-point remainder of ``x / y``, as defined by the platform"
" C library function ``fmod(x, y)``. Note that the Python expression ``x % "
"y`` may not return the same result.  The intent of the C standard is that "
"``fmod(x, y)`` be exactly (mathematically; to infinite precision) equal to "
"``x - n*y`` for some integer *n* such that the result has the same sign as "
"*x* and magnitude less than ``abs(y)``.  Python's ``x % y`` returns a result"
" with the sign of *y* instead, and may not be exactly computable for float "
"arguments. For example, ``fmod(-1e-100, 1e100)`` is ``-1e-100``, but the "
"result of Python's ``-1e-100 % 1e100`` is ``1e100-1e-100``, which cannot be "
"represented exactly as a float, and rounds to the surprising ``1e100``.  For"
" this reason, function :func:`fmod` is generally preferred when working with"
" floats, while Python's ``x % y`` is preferred when working with integers."
msgstr ""
"返回 ``x / y`` 的以浮点表示的余数，如平台的 C 库函数 ``fmod(x, y)`` 所定义的。 请注意 Python 表达式 ``x % "
"y`` 可能不会返回相同的结果。 C 标准的目的是 ``fmod(x, y)`` 完全地（在数学概念中；精度无限）等于 ``x - n*y`` 对于整数"
" *n* 使得结果具有与 *x* 相同的正负号和小于 ``abs(y)`` 的量级。 Python 的 ``x % y`` 则返回与具有 *y* "
"相同的正负号的结果，而对浮点参数来说可能不是完全可计算的。 例如，``fmod(-1e-100, 1e100)`` 是 ``-1e-100``，但 "
"Python 的 ``-1e-100 % 1e100`` 则是 ``1e100-1e-100``，它不能准确表示为一个浮点数，并会舍入为令人惊讶的 "
"``1e100``。 出于这个原因，函数 :func:`fmod` 在处理浮点数时通常都是首选，而 Python 的 ``x % y`` "
"则在处理整数时是首选。"

#: ../../library/math.rst:103
msgid ""
"Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a "
"float and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* is "
"zero, returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is used "
"to \"pick apart\" the internal representation of a float in a portable way."
msgstr ""
"以 ``(m, e)`` 对的形式返回 *x* 的尾数和指数。 *m* 是一个浮点数， *e* 是一个整数，正好是 ``x == m * 2**e`` "
"。 如果 *x* 为零，则返回 ``(0.0, 0)`` ，否则返回 ``0.5 <= abs(m) < 1`` "
"。这用于以可移植方式“分离”浮点数的内部表示。"

#: ../../library/math.rst:111
msgid ""
"Return an accurate floating-point sum of values in the iterable.  Avoids "
"loss of precision by tracking multiple intermediate partial sums."
msgstr "返回可迭代对象中的值的精确浮点总计值。 通过跟踪多个中间部分和来避免精度损失。"

#: ../../library/math.rst:114
msgid ""
"The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the "
"typical case where the rounding mode is half-even.  On some non-Windows "
"builds, the underlying C library uses extended precision addition and may "
"occasionally double-round an intermediate sum causing it to be off in its "
"least significant bit."
msgstr ""
"该算法的准确性取决于IEEE-754算术保证和舍入模式为半偶的典型情况。在某些非Windows版本中，底层C库使用扩展精度添加，并且有时可能会使中间和加倍，导致它在最低有效位中关闭。"

#: ../../library/math.rst:120
msgid ""
"For further discussion and two alternative approaches, see the `ASPN "
"cookbook recipes for accurate floating-point summation "
"<https://code.activestate.com/recipes/393090-binary-floating-point-"
"summation-accurate-to-full-p/>`_\\."
msgstr ""
"有关进一步的讨论和两种替代方式，请参阅 `ASPN cookbook recipes for accurate floating-point "
"summation <https://code.activestate.com/recipes/393090-binary-floating-"
"point-summation-accurate-to-full-p/>`_。"

#: ../../library/math.rst:127
msgid ""
"Return the greatest common divisor of the specified integer arguments. If "
"any of the arguments is nonzero, then the returned value is the largest "
"positive integer that is a divisor of all arguments.  If all arguments are "
"zero, then the returned value is ``0``.  ``gcd()`` without arguments returns"
" ``0``."
msgstr ""
"返回给定的整数参数的最大公约数。 如果有一个参数非零，则返回值将是能同时整除所有参数的最大正整数。 如果所有参数为零，则返回值为 ``0``。 "
"不带参数的 ``gcd()`` 返回 ``0``。"

#: ../../library/math.rst:135
msgid ""
"Added support for an arbitrary number of arguments. Formerly, only two "
"arguments were supported."
msgstr "添加了对任意数量的参数的支持。 之前的版本只支持两个参数。"

#: ../../library/math.rst:142
msgid ""
"Return ``True`` if the values *a* and *b* are close to each other and "
"``False`` otherwise."
msgstr "若 *a* 和 *b* 的值比较接近则返回 ``True``，否则返回 ``False``。"

#: ../../library/math.rst:145
msgid ""
"Whether or not two values are considered close is determined according to "
"given absolute and relative tolerances.  If no errors occur, the result will"
" be: ``abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)``."
msgstr ""
"两个值是否会被视为相近是根据给定的绝对和相对可接受差异度来确定的。 如果未发生错误，结果将为: ``abs(a-b) <= max(rel_tol * "
"max(abs(a), abs(b)), abs_tol)``。"

#: ../../library/math.rst:149
msgid ""
"*rel_tol* is the relative tolerance -- it is the maximum allowed difference "
"between *a* and *b*, relative to the larger absolute value of *a* or *b*. "
"For example, to set a tolerance of 5%, pass ``rel_tol=0.05``.  The default "
"tolerance is ``1e-09``, which assures that the two values are the same "
"within about 9 decimal digits.  *rel_tol* must be nonnegative and less than "
"``1.0``."
msgstr ""
"*rel_tol* 是相对容差 -- 它是 *a* 和 *b* 之间的最大允许差值，相对于 *a* 或 *b* 中绝对值较大的一个而言。 例如，要设置 "
"5% 的容差，则传入 ``rel_tol=0.05``。 默认的容差为 ``1e-09``，这将确保两个值在大约 9 个十进制数位内是相同的。 "
"*rel_tol* 必须为非零值并且小于 ``1.0``。"

#: ../../library/math.rst:156
msgid ""
"*abs_tol* is the absolute tolerance; it defaults to ``0.0`` and it must be "
"nonnegative.  When comparing ``x`` to ``0.0``, ``isclose(x, 0)`` is computed"
" as ``abs(x) <= rel_tol  * abs(x)``, which is ``False`` for any nonzero "
"``x`` and *rel_tol* less than ``1.0``.  So add an appropriate positive "
"*abs_tol* argument to the call."
msgstr ""
"*abs_tol* 是绝对容差；其默认值为 ``0.0`` 且必须为非负数。 当将 ``x`` 与 ``0.0`` 比较时，``isclose(x, "
"0)`` 将按 ``abs(x) <= rel_tol  * abs(x)`` 来计算，对于任何非零的 ``x`` 和小于 ``1.0`` 的 "
"*rel_tol* 来说均为 ``False``。 因此请为该调用添加一个适当的正数 *abs_tol* 参数。"

#: ../../library/math.rst:162
msgid ""
"The IEEE 754 special values of ``NaN``, ``inf``, and ``-inf`` will be "
"handled according to IEEE rules.  Specifically, ``NaN`` is not considered "
"close to any other value, including ``NaN``.  ``inf`` and ``-inf`` are only "
"considered close to themselves."
msgstr ""
"IEEE 754特殊值 ``NaN`` ， ``inf`` 和 ``-inf`` 将根据IEEE规则处理。具体来说， ``NaN`` "
"不被认为接近任何其他值，包括 ``NaN`` 。 ``inf`` 和 ``-inf`` 只被认为接近自己。"

#: ../../library/math.rst:171
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` —— 用于测试近似相等的函数"

#: ../../library/math.rst:176
msgid ""
"Return ``True`` if *x* is neither an infinity nor a NaN, and ``False`` "
"otherwise.  (Note that ``0.0`` *is* considered finite.)"
msgstr ""
"如果 *x* 既不是无穷大也不是NaN，则返回 ``True`` ，否则返回 ``False`` 。 （注意 ``0.0`` 被认为 *是* 有限的。）"

#: ../../library/math.rst:184
msgid ""
"Return ``True`` if *x* is a positive or negative infinity, and ``False`` "
"otherwise."
msgstr "如果 *x* 是正或负无穷大，则返回 ``True`` ，否则返回 ``False`` 。"

#: ../../library/math.rst:190
msgid ""
"Return ``True`` if *x* is a NaN (not a number), and ``False`` otherwise."
msgstr "如果 *x* 是 NaN（不是数字），则返回 ``True`` ，否则返回 ``False`` 。"

#: ../../library/math.rst:195
msgid ""
"Return the integer square root of the nonnegative integer *n*. This is the "
"floor of the exact square root of *n*, or equivalently the greatest integer "
"*a* such that *a*\\ ² |nbsp| ≤ |nbsp| *n*."
msgstr ""
"返回非负整数 *n* 的整数平方根。 这就是对 *n* 的实际平方根向下取整，或者相当于使得 *a*\\ ² |nbsp| ≤ |nbsp| *n* "
"的最大整数 *a*。"

#: ../../library/math.rst:199
msgid ""
"For some applications, it may be more convenient to have the least integer "
"*a* such that *n* |nbsp| ≤ |nbsp| *a*\\ ², or in other words the ceiling of "
"the exact square root of *n*. For positive *n*, this can be computed using "
"``a = 1 + isqrt(n - 1)``."
msgstr ""
"对于某些应用来说，可以更适合取值为使得 *n* |nbsp| ≤ |nbsp| *a*\\ ² 的最小整数 *a* ，或者换句话说就是 *n* "
"的实际平方根向上取整。 对于正数 *n*，这可以使用 ``a = 1 + isqrt(n - 1)`` 来计算。"

#: ../../library/math.rst:209
msgid ""
"Return the least common multiple of the specified integer arguments. If all "
"arguments are nonzero, then the returned value is the smallest positive "
"integer that is a multiple of all arguments.  If any of the arguments is "
"zero, then the returned value is ``0``.  ``lcm()`` without arguments returns"
" ``1``."
msgstr ""
"返回给定的整数参数的最小公倍数。 如果所有参数均非零，则返回值将是为所有参数的整数倍的最小正整数。 如果参数之一为零，则返回值为 ``0``。 "
"不带参数的 ``lcm()`` 返回 ``1``。"

#: ../../library/math.rst:220
msgid ""
"Return ``x * (2**i)``.  This is essentially the inverse of function "
":func:`frexp`."
msgstr "返回 ``x * (2**i)`` 。 这基本上是函数  :func:`frexp`  的反函数。"

#: ../../library/math.rst:226
msgid ""
"Return the fractional and integer parts of *x*.  Both results carry the sign"
" of *x* and are floats."
msgstr "返回 *x* 的小数和整数部分。两个结果都带有 *x* 的符号并且是浮点数。"

#: ../../library/math.rst:232
msgid "Return the floating-point value *steps* steps after *x* towards *y*."
msgstr "返回从 *x* 到 *y* 的步数的浮点值 *steps*。"

#: ../../library/math.rst:234
msgid "If *x* is equal to *y*, return *y*, unless *steps* is zero."
msgstr "如果 *x* 等于 *y*，则返回 *y*，除非 *steps* 值为零。"

#: ../../library/math.rst:236
msgid "Examples:"
msgstr "示例："

#: ../../library/math.rst:238
msgid "``math.nextafter(x, math.inf)`` goes up: towards positive infinity."
msgstr "``math.nextafter(x, math.inf)`` 的方向朝上：趋向于正无穷。"

#: ../../library/math.rst:239
msgid "``math.nextafter(x, -math.inf)`` goes down: towards minus infinity."
msgstr "``math.nextafter(x, -math.inf)`` 的方向朝下：趋向于负无穷。"

#: ../../library/math.rst:240
msgid "``math.nextafter(x, 0.0)`` goes towards zero."
msgstr "``math.nextafter(x, 0.0)`` 趋向于零。"

#: ../../library/math.rst:241
msgid "``math.nextafter(x, math.copysign(math.inf, x))`` goes away from zero."
msgstr "``math.nextafter(x, math.copysign(math.inf, x))`` 趋向于零的反方向。"

#: ../../library/math.rst:243
msgid "See also :func:`math.ulp`."
msgstr "另请参阅 :func:`math.ulp`。"

#: ../../library/math.rst:247
msgid "Added the *steps* argument."
msgstr "增加了 *steps* 参数。"

#: ../../library/math.rst:252
msgid ""
"Return the number of ways to choose *k* items from *n* items without "
"repetition and with order."
msgstr "返回不重复且有顺序地从 *n* 项中选择 *k* 项的方式总数。"

#: ../../library/math.rst:255
msgid ""
"Evaluates to ``n! / (n - k)!`` when ``k <= n`` and evaluates to zero when "
"``k > n``."
msgstr "当 ``k <= n`` 时取值为 ``n! / (n - k)!``；当 ``k > n`` 时取值为零。"

#: ../../library/math.rst:258
msgid ""
"If *k* is not specified or is ``None``, then *k* defaults to *n* and the "
"function returns ``n!``."
msgstr "如果 *k* 未指定或为 ``None``，则 *k* 默认值为 *n* 并且函数将返回 ``n!``。"

#: ../../library/math.rst:269
msgid ""
"Calculate the product of all the elements in the input *iterable*. The "
"default *start* value for the product is ``1``."
msgstr "计算输入的 *iterable* 中所有元素的积。 积的默认 *start* 值为 ``1``。"

#: ../../library/math.rst:272
msgid ""
"When the iterable is empty, return the start value.  This function is "
"intended specifically for use with numeric values and may reject non-numeric"
" types."
msgstr "当可迭代对象为空时，返回起始值。 此函数特别针对数字值使用，并会拒绝非数字类型。"

#: ../../library/math.rst:281
msgid ""
"Return the IEEE 754-style remainder of *x* with respect to *y*.  For finite "
"*x* and finite nonzero *y*, this is the difference ``x - n*y``, where ``n`` "
"is the closest integer to the exact value of the quotient ``x / y``.  If ``x"
" / y`` is exactly halfway between two consecutive integers, the nearest "
"*even* integer is used for ``n``.  The remainder ``r = remainder(x, y)`` "
"thus always satisfies ``abs(r) <= 0.5 * abs(y)``."
msgstr ""
"返回 IEEE 754 风格的 *x* 相对于 *y* 的余数。对于有限 *x* 和有限非零 *y* ，这是差异 ``x - n*y`` ，其中 "
"``n`` 是与商 ``x / y`` 的精确值最接近的整数。如果 ``x / y`` 恰好位于两个连续整数之间，则将最接近的 *偶数* 用作 "
"``n`` 。 余数 ``r = remainder(x, y)`` 因此总是满足 ``abs(r) <= 0.5 * abs(y)``。"

#: ../../library/math.rst:288
msgid ""
"Special cases follow IEEE 754: in particular, ``remainder(x, math.inf)`` is "
"*x* for any finite *x*, and ``remainder(x, 0)`` and ``remainder(math.inf, "
"x)`` raise :exc:`ValueError` for any non-NaN *x*. If the result of the "
"remainder operation is zero, that zero will have the same sign as *x*."
msgstr ""
"特殊情况遵循IEEE 754：特别是 ``remainder(x, math.inf)`` 对于任何有限 *x* 都是 *x* ，而 "
"``remainder(x, 0)`` 和 ``remainder(math.inf, x)`` 引发  :exc:`ValueError` "
"适用于任何非NaN的 *x* 。如果余数运算的结果为零，则该零将具有与 *x* 相同的符号。"

#: ../../library/math.rst:294
msgid ""
"On platforms using IEEE 754 binary floating point, the result of this "
"operation is always exactly representable: no rounding error is introduced."
msgstr "在使用IEEE 754二进制浮点的平台上，此操作的结果始终可以完全表示：不会引入舍入错误。"

#: ../../library/math.rst:302
msgid "Return the sum of products of values from two iterables *p* and *q*."
msgstr "两个可迭代对象 *p* 和 *q* 中的值的乘积的总计值。"

#: ../../library/math.rst:304
msgid "Raises :exc:`ValueError` if the inputs do not have the same length."
msgstr "如果输入值的长度不相等则会引发 :exc:`ValueError`。"

#: ../../library/math.rst:306 ../../library/math.rst:501
msgid "Roughly equivalent to::"
msgstr "大致相当于："

#: ../../library/math.rst:308
msgid "sum(itertools.starmap(operator.mul, zip(p, q, strict=True)))"
msgstr "sum(itertools.starmap(operator.mul, zip(p, q, strict=True)))"

#: ../../library/math.rst:310
msgid ""
"For float and mixed int/float inputs, the intermediate products and sums are"
" computed with extended precision."
msgstr "对于浮点数或混合整数/浮点数的输入，中间的乘积和总计值将使用扩展精度来计算。"

#: ../../library/math.rst:318
msgid ""
"Return *x* with the fractional part removed, leaving the integer part.  This"
" rounds toward 0: ``trunc()`` is equivalent to :func:`floor` for positive "
"*x*, and equivalent to :func:`ceil` for negative *x*. If *x* is not a float,"
" delegates to :meth:`x.__trunc__ <object.__trunc__>`, which should return an"
" :class:`~numbers.Integral` value."
msgstr ""
"返回去除小数部分的 *x* ，只留下整数部分。 这样就可以四舍五入到0了： ``trunc()`` 对于正的 *x* 相当于 :func:`floor`"
" ，对于负的 *x* 相当于 :func:`ceil` 。如果 *x* 不是浮点数，委托给 :meth:`x.__trunc__ "
"<object.__trunc__>` ，它应该返回一个 :class:`~numbers.Integral` 值。"

#: ../../library/math.rst:326
msgid "Return the value of the least significant bit of the float *x*:"
msgstr "返回浮点数 *x* 的最小有效比特位的值:"

#: ../../library/math.rst:328
msgid "If *x* is a NaN (not a number), return *x*."
msgstr "如果 *x* 是 NaN (非数字)，则返回 *x*。"

#: ../../library/math.rst:329
msgid "If *x* is negative, return ``ulp(-x)``."
msgstr "如果 *x* 为负数，则返回 ``ulp(-x)``。"

#: ../../library/math.rst:330
msgid "If *x* is a positive infinity, return *x*."
msgstr "如果 *x* 为正数，则返回 *x*。"

#: ../../library/math.rst:331
msgid ""
"If *x* is equal to zero, return the smallest positive *denormalized* "
"representable float (smaller than the minimum positive *normalized* float, "
":data:`sys.float_info.min <sys.float_info>`)."
msgstr ""
"如果 *x* 等于零，则返回 *去正规化的* 可表示最小正浮点数 (小于 *正规化的* 最小正浮点数 :data:`sys.float_info.min"
" <sys.float_info>`)。"

#: ../../library/math.rst:334
msgid ""
"If *x* is equal to the largest positive representable float, return the "
"value of the least significant bit of *x*, such that the first float smaller"
" than *x* is ``x - ulp(x)``."
msgstr ""
"如果 *x* 等于可表示最大正浮点数，则返回 *x* 的最低有效比特位的值，使得小于 *x* 的第一个浮点数为 ``x - ulp(x)``。"

#: ../../library/math.rst:337
msgid ""
"Otherwise (*x* is a positive finite number), return the value of the least "
"significant bit of *x*, such that the first float bigger than *x* is ``x + "
"ulp(x)``."
msgstr ""
"在其他情况下 (*x* 是一个有限的正数)，则返回 *x* 的最低有效比特位的值，使得大于 *x* 的第一个浮点数为 ``x + ulp(x)``。"

#: ../../library/math.rst:341
msgid "ULP stands for \"Unit in the Last Place\"."
msgstr "ULP 即 \"Unit in the Last Place\" 的缩写。"

#: ../../library/math.rst:343
msgid ""
"See also :func:`math.nextafter` and :data:`sys.float_info.epsilon "
"<sys.float_info>`."
msgstr ""
"另请参阅 :func:`math.nextafter` 和 :data:`sys.float_info.epsilon "
"<sys.float_info>`。"

#: ../../library/math.rst:349
msgid ""
"Note that :func:`frexp` and :func:`modf` have a different call/return "
"pattern than their C equivalents: they take a single argument and return a "
"pair of values, rather than returning their second return value through an "
"'output parameter' (there is no such thing in Python)."
msgstr ""
"注意 :func:`frexp` 和 :func:`modf` 具有与它们的C等价函数不同的调用/返回模式：它们采用单个参数并返回一对值，而不是通过 "
"'输出形参' 返回它们的第二个返回参数（Python中没有这样的东西）。"

#: ../../library/math.rst:354
msgid ""
"For the :func:`ceil`, :func:`floor`, and :func:`modf` functions, note that "
"*all* floating-point numbers of sufficiently large magnitude are exact "
"integers. Python floats typically carry no more than 53 bits of precision "
"(the same as the platform C double type), in which case any float *x* with "
"``abs(x) >= 2**52`` necessarily has no fractional bits."
msgstr ""
"对于 :func:`ceil` ， :func:`floor` 和 :func:`modf` 函数，请注意 *所有* "
"足够大的浮点数都是精确整数。Python浮点数通常不超过53位的精度（与平台C double类型相同），在这种情况下，任何浮点 *x* 与 "
"``abs(x) >= 2**52`` 必然没有小数位。"

#: ../../library/math.rst:362
msgid "Power and logarithmic functions"
msgstr "幂函数与对数函数"

#: ../../library/math.rst:366
msgid "Return the cube root of *x*."
msgstr "返回 *x* 的立方根。"

#: ../../library/math.rst:373
msgid ""
"Return *e* raised to the power *x*, where *e* = 2.718281... is the base of "
"natural logarithms.  This is usually more accurate than ``math.e ** x`` or "
"``pow(math.e, x)``."
msgstr ""
"返回 *e* 的 *x* 次幂，其中 *e* = 2.718281... 是自然对数的基数。这通常比 ``math.e ** x`` 或 "
"``pow(math.e, x)`` 更精确。"

#: ../../library/math.rst:380
msgid "Return *2* raised to the power *x*."
msgstr "返回 *2* 的 *x* 次幂。"

#: ../../library/math.rst:387
msgid ""
"Return *e* raised to the power *x*, minus 1.  Here *e* is the base of "
"natural logarithms.  For small floats *x*, the subtraction in ``exp(x) - 1``"
" can result in a `significant loss of precision "
"<https://en.wikipedia.org/wiki/Loss_of_significance>`_\\; the :func:`expm1` "
"function provides a way to compute this quantity to full precision:"
msgstr ""
"返回 *e* 的 *x* 次方减 1。 这里 *e* 是自然对数的底。 对于小浮点数 *x*，在 ``exp(x) - 1`` 中的减法运算可能导致 "
"`明显的精度损失 <https://en.wikipedia.org/wiki/Loss_of_significance>`_\\； "
":func:`expm1` 函数提供了一种以完整精度计算此数量的办法："

#: ../../library/math.rst:404
msgid "With one argument, return the natural logarithm of *x* (to base *e*)."
msgstr "使用一个参数，返回 *x* 的自然对数（底为 *e* ）。"

#: ../../library/math.rst:406
msgid ""
"With two arguments, return the logarithm of *x* to the given *base*, "
"calculated as ``log(x)/log(base)``."
msgstr "使用两个参数，返回给定的 *base* 的对数 *x* ，计算为 ``log(x)/log(base)`` 。"

#: ../../library/math.rst:412
msgid ""
"Return the natural logarithm of *1+x* (base *e*). The result is calculated "
"in a way which is accurate for *x* near zero."
msgstr "返回 *1+x* 的自然对数（以 *e* 为底）。 以对于接近零的 *x* 精确的方式计算结果。"

#: ../../library/math.rst:418
msgid ""
"Return the base-2 logarithm of *x*. This is usually more accurate than "
"``log(x, 2)``."
msgstr "返回 *x* 以2为底的对数。这通常比 ``log(x, 2)`` 更准确。"

#: ../../library/math.rst:425
msgid ""
":meth:`int.bit_length` returns the number of bits necessary to represent an "
"integer in binary, excluding the sign and leading zeros."
msgstr ":meth:`int.bit_length` 返回表示二进制整数所需的位数，不包括符号和前导零。"

#: ../../library/math.rst:431
msgid ""
"Return the base-10 logarithm of *x*.  This is usually more accurate than "
"``log(x, 10)``."
msgstr "返回 *x* 底为10的对数。这通常比 ``log(x, 10)`` 更准确。"

#: ../../library/math.rst:437
msgid ""
"Return ``x`` raised to the power ``y``.  Exceptional cases follow the IEEE "
"754 standard as far as possible.  In particular, ``pow(1.0, x)`` and "
"``pow(x, 0.0)`` always return ``1.0``, even when ``x`` is a zero or a NaN.  "
"If both ``x`` and ``y`` are finite, ``x`` is negative, and ``y`` is not an "
"integer then ``pow(x, y)`` is undefined, and raises :exc:`ValueError`."
msgstr ""
"返回 ``x`` 的 ``y`` 次幂。 特殊情况将尽可能遵循 IEEE 754 标准。 特别地，``pow(1.0, x)`` 和 ``pow(x, "
"0.0)`` 总是返回 ``1.0``，即使当 ``x`` 为零或 NaN 也是如此。 如果 ``x`` 和 ``y`` 均为有限值，``x`` "
"为负数，而 ``y`` 不是整数则 ``pow(x, y)`` 是未定义的，并将引发 :exc:`ValueError`。"

#: ../../library/math.rst:444
msgid ""
"Unlike the built-in ``**`` operator, :func:`math.pow` converts both its "
"arguments to type :class:`float`.  Use ``**`` or the built-in :func:`pow` "
"function for computing exact integer powers."
msgstr ""
"与内置的 ``**`` 运算符不同， :func:`math.pow` 将其参数转换为 :class:`float` 类型。使用 ``**`` 或内置的"
" :func:`pow` 函数来计算精确的整数幂。"

#: ../../library/math.rst:448
msgid ""
"The special cases ``pow(0.0, -inf)`` and ``pow(-0.0, -inf)`` were changed to"
" return ``inf`` instead of raising :exc:`ValueError`, for consistency with "
"IEEE 754."
msgstr ""
"特殊情况 ``pow(0.0, -inf)`` 和 ``pow(-0.0, -inf)`` 已改为返回 ``inf`` 而不是引发 "
":exc:`ValueError`，以便同 IEEE 754 保持一致。"

#: ../../library/math.rst:456
msgid "Return the square root of *x*."
msgstr "返回 *x* 的平方根。"

#: ../../library/math.rst:460
msgid "Trigonometric functions"
msgstr "三角函数"

#: ../../library/math.rst:464
msgid ""
"Return the arc cosine of *x*, in radians. The result is between ``0`` and "
"``pi``."
msgstr "返回以弧度为单位的 *x* 的反余弦值。 结果范围在 ``0`` 到 ``pi`` 之间。"

#: ../../library/math.rst:470
msgid ""
"Return the arc sine of *x*, in radians. The result is between ``-pi/2`` and "
"``pi/2``."
msgstr "返回以弧度为单位的 *x* 的反正弦值。 结果范围在 ``-pi/2`` 到 ``pi/2`` 之间。"

#: ../../library/math.rst:476
msgid ""
"Return the arc tangent of *x*, in radians. The result is between ``-pi/2`` "
"and ``pi/2``."
msgstr "返回以弧度为单位的 *x* 的反正切值。 结果范围在 ``-pi/2`` 到 ``pi/2`` 之间。."

#: ../../library/math.rst:482
msgid ""
"Return ``atan(y / x)``, in radians. The result is between ``-pi`` and "
"``pi``. The vector in the plane from the origin to point ``(x, y)`` makes "
"this angle with the positive X axis. The point of :func:`atan2` is that the "
"signs of both inputs are known to it, so it can compute the correct quadrant"
" for the angle. For example, ``atan(1)`` and ``atan2(1, 1)`` are both "
"``pi/4``, but ``atan2(-1, -1)`` is ``-3*pi/4``."
msgstr ""
"以弧度为单位返回 ``atan(y / x)`` 。结果是在 ``-pi`` 和 ``pi`` 之间。从原点到点 ``(x, y)``  "
"的平面矢量使该角度与正X轴成正比。 :func:`atan2` 的点的两个输入的符号都是已知的，因此它可以计算角度的正确象限。 例如， "
"``atan(1)`` 和 ``atan2(1, 1)``  都是 ``pi/4`` ，但 ``atan2(-1, -1)`` 是 "
"``-3*pi/4`` 。"

#: ../../library/math.rst:492
msgid "Return the cosine of *x* radians."
msgstr "返回 *x* 弧度的余弦值。"

#: ../../library/math.rst:497
msgid ""
"Return the Euclidean distance between two points *p* and *q*, each given as "
"a sequence (or iterable) of coordinates.  The two points must have the same "
"dimension."
msgstr "返回 *p* 与 *q* 两点之间的欧几里得距离，以一个坐标序列（或可迭代对象）的形式给出。 两个点必须具有相同的维度。"

#: ../../library/math.rst:503
msgid "sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))"
msgstr "sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))"

#: ../../library/math.rst:510
msgid ""
"Return the Euclidean norm, ``sqrt(sum(x**2 for x in coordinates))``. This is"
" the length of the vector from the origin to the point given by the "
"coordinates."
msgstr "返回欧几里得范数，``sqrt(sum(x**2 for x in coordinates))``。 这是从原点到坐标给定点的向量长度。"

#: ../../library/math.rst:514
msgid ""
"For a two dimensional point ``(x, y)``, this is equivalent to computing the "
"hypotenuse of a right triangle using the Pythagorean theorem, ``sqrt(x*x + "
"y*y)``."
msgstr "对于一个二维点 ``(x, y)``，这等价于使用毕达哥拉斯定义 ``sqrt(x*x + y*y)`` 计算一个直角三角形的斜边。"

#: ../../library/math.rst:518
msgid ""
"Added support for n-dimensional points. Formerly, only the two dimensional "
"case was supported."
msgstr "添加了对 n 维点的支持。 之前的版本只支持二维点。"

#: ../../library/math.rst:522
msgid ""
"Improved the algorithm's accuracy so that the maximum error is under 1 ulp "
"(unit in the last place).  More typically, the result is almost always "
"correctly rounded to within 1/2 ulp."
msgstr ""
"改进了算法的精确性，使得最大误差在 1 ulp (最后一位的单位数值) 以下。 更为常见的情况是，结果几乎总是能正确地舍入到 1/2 ulp 范围之内。"

#: ../../library/math.rst:530
msgid "Return the sine of *x* radians."
msgstr "返回 *x* 弧度的正弦值。"

#: ../../library/math.rst:535
msgid "Return the tangent of *x* radians."
msgstr "返回 *x* 弧度的正切值。"

#: ../../library/math.rst:539
msgid "Angular conversion"
msgstr "角度转换"

#: ../../library/math.rst:543
msgid "Convert angle *x* from radians to degrees."
msgstr "将角度 *x* 从弧度转换为度数。"

#: ../../library/math.rst:548
msgid "Convert angle *x* from degrees to radians."
msgstr "将角度 *x* 从度数转换为弧度。"

#: ../../library/math.rst:552
msgid "Hyperbolic functions"
msgstr "双曲函数"

#: ../../library/math.rst:554
msgid ""
"`Hyperbolic functions <https://en.wikipedia.org/wiki/Hyperbolic_functions>`_"
" are analogs of trigonometric functions that are based on hyperbolas instead"
" of circles."
msgstr ""
"`双曲函数 <https://en.wikipedia.org/wiki/Hyperbolic_functions>`_ "
"是基于双曲线而非圆来对三解函数进行的模拟。"

#: ../../library/math.rst:560
msgid "Return the inverse hyperbolic cosine of *x*."
msgstr "返回 *x* 的反双曲余弦值。"

#: ../../library/math.rst:565
msgid "Return the inverse hyperbolic sine of *x*."
msgstr "返回 *x* 的反双曲正弦值。"

#: ../../library/math.rst:570
msgid "Return the inverse hyperbolic tangent of *x*."
msgstr "返回 *x* 的反双曲正切值。"

#: ../../library/math.rst:575
msgid "Return the hyperbolic cosine of *x*."
msgstr "返回 *x* 的双曲余弦值。"

#: ../../library/math.rst:580
msgid "Return the hyperbolic sine of *x*."
msgstr "返回 *x* 的双曲正弦值。"

#: ../../library/math.rst:585
msgid "Return the hyperbolic tangent of *x*."
msgstr "返回 *x* 的双曲正切值。"

#: ../../library/math.rst:589
msgid "Special functions"
msgstr "特殊函数"

#: ../../library/math.rst:593
msgid ""
"Return the `error function <https://en.wikipedia.org/wiki/Error_function>`_ "
"at *x*."
msgstr "返回 *x* 处的 `误差函数 <https://en.wikipedia.org/wiki/Error_function>`_ 。"

#: ../../library/math.rst:596
msgid ""
"The :func:`erf` function can be used to compute traditional statistical "
"functions such as the `cumulative standard normal distribution "
"<https://en.wikipedia.org/wiki/Cumulative_distribution_function>`_::"
msgstr ""
"可以使用 :func:`erf` 函数来计算传统的统计函数如 `累积标准正态分布 "
"<https://en.wikipedia.org/wiki/Cumulative_distribution_function>`_::"

#: ../../library/math.rst:600
msgid ""
"def phi(x):\n"
"    'Cumulative distribution function for the standard normal distribution'\n"
"    return (1.0 + erf(x / sqrt(2.0))) / 2.0"
msgstr ""
"def phi(x):\n"
"    '标准正态分布的累积分布函数'\n"
"    return (1.0 + erf(x / sqrt(2.0))) / 2.0"

#: ../../library/math.rst:609
msgid ""
"Return the complementary error function at *x*.  The `complementary error "
"function <https://en.wikipedia.org/wiki/Error_function>`_ is defined as "
"``1.0 - erf(x)``.  It is used for large values of *x* where a subtraction "
"from one would cause a `loss of significance "
"<https://en.wikipedia.org/wiki/Loss_of_significance>`_\\."
msgstr ""
"返回 *x* 处的互补误差函数。 `互补误差函数 <https://en.wikipedia.org/wiki/Error_function>`_ "
"定义为 ``1.0 - erf(x)``。 它用于大的 *x* 取值，以避免直接用 1 减其误差函数值导致的 `有效位数损失 "
"<https://en.wikipedia.org/wiki/Loss_of_significance>`_\\。"

#: ../../library/math.rst:620
msgid ""
"Return the `Gamma function <https://en.wikipedia.org/wiki/Gamma_function>`_ "
"at *x*."
msgstr "返回 *x* 处的 `伽马函数 <https://en.wikipedia.org/wiki/Gamma_function>`_ 值。"

#: ../../library/math.rst:628
msgid ""
"Return the natural logarithm of the absolute value of the Gamma function at "
"*x*."
msgstr "返回Gamma函数在 *x* 绝对值的自然对数。"

#: ../../library/math.rst:635
msgid "Constants"
msgstr "常量"

#: ../../library/math.rst:639
msgid "The mathematical constant *π* = 3.141592..., to available precision."
msgstr "数学常数 *π* = 3.141592...，精确到可用精度。"

#: ../../library/math.rst:644
msgid "The mathematical constant *e* = 2.718281..., to available precision."
msgstr "数学常数 *e* = 2.718281...，精确到可用精度。"

#: ../../library/math.rst:649
msgid ""
"The mathematical constant *τ* = 6.283185..., to available precision. Tau is "
"a circle constant equal to 2\\ *π*, the ratio of a circle's circumference to"
" its radius. To learn more about Tau, check out Vi Hart's video `Pi is "
"(still) Wrong <https://www.youtube.com/watch?v=jG7vhMMXagQ>`_, and start "
"celebrating `Tau day <https://tauday.com/>`_ by eating twice as much pie!"
msgstr ""
"数学常数 *τ* = 6.283185...，精确到可用精度。Tau 是一个圆周常数，等于 2\\ *π*，圆的周长与半径之比。更多关于 Tau "
"的信息可参考 Vi Hart 的视频 `Pi is (still) Wrong "
"<https://www.youtube.com/watch?v=jG7vhMMXagQ>`_。吃两倍多的派来庆祝 `Tau 日 "
"<https://tauday.com/>`_ 吧！"

#: ../../library/math.rst:660
msgid ""
"A floating-point positive infinity.  (For negative infinity, use "
"``-math.inf``.)  Equivalent to the output of ``float('inf')``."
msgstr "浮点正无穷大。 （对于负无穷大，使用 ``-math.inf`` 。）相当于 ``float('inf')`` 的输出。"

#: ../../library/math.rst:668
msgid ""
"A floating-point \"not a number\" (NaN) value. Equivalent to the output of "
"``float('nan')``. Due to the requirements of the `IEEE-754 standard "
"<https://en.wikipedia.org/wiki/IEEE_754>`_, ``math.nan`` and "
"``float('nan')`` are not considered to equal to any other numeric value, "
"including themselves. To check whether a number is a NaN, use the "
":func:`isnan` function to test for NaNs instead of ``is`` or ``==``. "
"Example:"
msgstr ""
"一个浮点数值 \"Not a Number\" (NaN)。 相当于 ``float('nan')`` 的输出。 根据 `IEEE-754 标准 "
"<https://en.wikipedia.org/wiki/IEEE_754>`_ 要求，``math.nan`` 和 "
"``float('nan')`` 不会被视为等于任何其他数值，包括其本身。 要检查一个数字是否为 NaN，请使用 :func:`isnan` 函数来测试"
" NaN 而不能使用 ``is`` 或 ``==``。 例如:"

#: ../../library/math.rst:688
msgid "It is now always available."
msgstr "该常量现在总是可用。"

#: ../../library/math.rst:694
msgid ""
"The :mod:`math` module consists mostly of thin wrappers around the platform "
"C math library functions.  Behavior in exceptional cases follows Annex F of "
"the C99 standard where appropriate.  The current implementation will raise "
":exc:`ValueError` for invalid operations like ``sqrt(-1.0)`` or ``log(0.0)``"
" (where C99 Annex F recommends signaling invalid operation or divide-by-"
"zero), and :exc:`OverflowError` for results that overflow (for example, "
"``exp(1000.0)``).  A NaN will not be returned from any of the functions "
"above unless one or more of the input arguments was a NaN; in that case, "
"most functions will return a NaN, but (again following C99 Annex F) there "
"are some exceptions to this rule, for example ``pow(float('nan'), 0.0)`` or "
"``hypot(float('nan'), float('inf'))``."
msgstr ""
":mod:`math` 模块主要包含围绕平台C数学库函数的简单包装器。特殊情况下的行为在适当情况下遵循C99标准的附录F。当前的实现将引发 "
":exc:`ValueError` 用于无效操作，如 ``sqrt(-1.0)`` 或 ``log(0.0)`` "
"（其中C99附件F建议发出无效操作信号或被零除）， 和 :exc:`OverflowError` 用于溢出的结果（例如， ``exp(1000.0)``"
" "
"）。除非一个或多个输入参数是NaN，否则不会从上述任何函数返回NaN；在这种情况下，大多数函数将返回一个NaN，但是（再次遵循C99附件F）这个规则有一些例外，例如"
" ``pow(float('nan'), 0.0)`` 或 ``hypot(float('nan'), float('inf'))`` 。"

#: ../../library/math.rst:706
msgid ""
"Note that Python makes no effort to distinguish signaling NaNs from quiet "
"NaNs, and behavior for signaling NaNs remains unspecified. Typical behavior "
"is to treat all NaNs as though they were quiet."
msgstr "请注意，Python不会将显式NaN与静默NaN区分开来，并且显式NaN的行为仍未明确。典型的行为是将所有NaN视为静默的。"

#: ../../library/math.rst:713
msgid "Module :mod:`cmath`"
msgstr ":mod:`cmath` 模块"

#: ../../library/math.rst:714
msgid "Complex number versions of many of these functions."
msgstr "这里很多函数的复数版本。"
