# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:58+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/shlex.rst:2
msgid ":mod:`!shlex` --- Simple lexical analysis"
msgstr ":mod:`!shlex` --- 简单词法分析"

#: ../../library/shlex.rst:12
msgid "**Source code:** :source:`Lib/shlex.py`"
msgstr "**源代码：** :source:`Lib/shlex.py`"

#: ../../library/shlex.rst:16
msgid ""
"The :class:`~shlex.shlex` class makes it easy to write lexical analyzers for"
" simple syntaxes resembling that of the Unix shell.  This will often be "
"useful for writing minilanguages, (for example, in run control files for "
"Python applications) or for parsing quoted strings."
msgstr ""
":class:`~shlex.shlex` 类可用于编写类似 Unix shell 的简单词法分析程序。通常可用于编写“迷你语言”（如 Python "
"应用程序的运行控制文件）或解析带引号的字符串。"

#: ../../library/shlex.rst:21
msgid "The :mod:`shlex` module defines the following functions:"
msgstr ":mod:`shlex` 模块中定义了以下函数："

#: ../../library/shlex.rst:26
msgid ""
"Split the string *s* using shell-like syntax. If *comments* is "
":const:`False` (the default), the parsing of comments in the given string "
"will be disabled (setting the :attr:`~shlex.commenters` attribute of the "
":class:`~shlex.shlex` instance to the empty string).  This function operates"
" in POSIX mode by default, but uses non-POSIX mode if the *posix* argument "
"is false."
msgstr ""
"用类似 shell 的语法拆分字符串 *s*。如果 *comments* 为 :const:`False` (默认值)，则不会解析给定字符串中的注释 "
"(:attr:`~shlex.commenters` 属性的 :class:`~shlex.shlex` 实例设为空字符串)。 本函数默认工作于 "
"POSIX 模式下，但若 *posix* 参数为 False，则采用非 POSIX 模式。"

#: ../../library/shlex.rst:33
msgid ""
"Passing ``None`` for *s* argument now raises an exception, rather than "
"reading :data:`sys.stdin`."
msgstr "传入 ``None`` 作为 *s* 参数现在会引发异常，而不是读取 :data:`sys.stdin`。"

#: ../../library/shlex.rst:39
msgid ""
"Concatenate the tokens of the list *split_command* and return a string. This"
" function is the inverse of :func:`split`."
msgstr ""
"将列表 *split_command* 中的词法单元（token）串联起来，返回一个字符串。本函数是 :func:`split` 的逆运算。"

#: ../../library/shlex.rst:46
msgid ""
"The returned value is shell-escaped to protect against injection "
"vulnerabilities (see :func:`quote`)."
msgstr "为防止注入漏洞，返回值是经过 shell 转义的（参见 :func:`quote` ）。"

#: ../../library/shlex.rst:54
msgid ""
"Return a shell-escaped version of the string *s*.  The returned value is a "
"string that can safely be used as one token in a shell command line, for "
"cases where you cannot use a list."
msgstr "返回经过  shell 转义的字符串 *s* 。返回值为字符串，可以安全地用作 shell 命令行中的词法单元，可用于不能使用列表的场合。"

#: ../../library/shlex.rst:62
msgid "The ``shlex`` module is **only designed for Unix shells**."
msgstr "``shlex`` 模块 **仅适用于 Unix shell**。"

#: ../../library/shlex.rst:64
msgid ""
"The :func:`quote` function is not guaranteed to be correct on non-POSIX "
"compliant shells or shells from other operating systems such as Windows. "
"Executing commands quoted by this module on such shells can open up the "
"possibility of a command injection vulnerability."
msgstr ""
"在不兼容 POSIX 的 shell 或其他操作系统（如Windows）的shell上，并不保证 :func:`quote` 函数能够正常使用。在这种 "
"shell 中执行用本模块包装过的命令，有可能会存在命令注入漏洞。"

#: ../../library/shlex.rst:69
msgid ""
"Consider using functions that pass command arguments with lists such as "
":func:`subprocess.run` with ``shell=False``."
msgstr "请考虑采用命令参数以列表形式给出的函数，比如带了 ``shell=False`` 参数的 :func:`subprocess.run` 。"

#: ../../library/shlex.rst:72
msgid "This idiom would be unsafe:"
msgstr "以下用法是不安全的："

#: ../../library/shlex.rst:79
msgid ":func:`quote` lets you plug the security hole:"
msgstr "用 :func:`quote` 可以堵住这种安全漏洞："

#: ../../library/shlex.rst:89
msgid "The quoting is compatible with UNIX shells and with :func:`split`:"
msgstr "这种包装方式兼容于 UNIX shell 和 :func:`split` 。"

#: ../../library/shlex.rst:101
msgid "The :mod:`shlex` module defines the following class:"
msgstr ":mod:`shlex` 模块中定义了以下类："

#: ../../library/shlex.rst:106
msgid ""
"A :class:`~shlex.shlex` instance or subclass instance is a lexical analyzer "
"object.  The initialization argument, if present, specifies where to read "
"characters from.  It must be a file-/stream-like object with "
":meth:`~io.TextIOBase.read` and :meth:`~io.TextIOBase.readline` methods, or "
"a string.  If no argument is given, input will be taken from ``sys.stdin``. "
"The second optional argument is a filename string, which sets the initial "
"value of the :attr:`~shlex.infile` attribute.  If the *instream* argument is"
" omitted or equal to ``sys.stdin``, this second argument defaults to "
"\"stdin\".  The *posix* argument defines the operational mode: when *posix* "
"is not true (default), the :class:`~shlex.shlex` instance will operate in "
"compatibility mode.  When operating in POSIX mode, :class:`~shlex.shlex` "
"will try to be as close as possible to the POSIX shell parsing rules.  The "
"*punctuation_chars* argument provides a way to make the behaviour even "
"closer to how real shells parse.  This can take a number of values: the "
"default value, ``False``, preserves the behaviour seen under Python 3.5 and "
"earlier.  If set to ``True``, then parsing of the characters ``();<>|&`` is "
"changed: any run of these characters (considered punctuation characters) is "
"returned as a single token.  If set to a non-empty string of characters, "
"those characters will be used as the punctuation characters.  Any characters"
" in the :attr:`wordchars` attribute that appear in *punctuation_chars* will "
"be removed from :attr:`wordchars`.  See :ref:`improved-shell-compatibility` "
"for more information. *punctuation_chars* can be set only upon "
":class:`~shlex.shlex` instance creation and can't be modified later."
msgstr ""
":class:`~shlex.shlex` 及其子类的实例是一种词义分析器对象。 利用初始化参数可指定从哪里读取字符。 初始化参数必须是具备 "
":meth:`~io.TextIOBase.read` 和 :meth:`~io.TextIOBase.readline` "
"方法的文件/流对象，或者是一个字符串。 如果没有给出初始化参数，则会从 ``sys.stdin`` 获取输入。 第二个可选参数是个文件名字符串，用于设置"
" :attr:`~shlex.infile` 属性的初始值。 如果 *instream* 参数被省略或等于 "
"``sys.stdin``，则第二个参数默认为 \"stdin\"。 *posix* 参数定义了操作的模式：若 *posix* 不为真值（默认），则 "
":class:`~shlex.shlex` 实例将工作于兼容模式。 若运行于 POSIX 模式下，则 :class:`~shlex.shlex` "
"会尽可能地应用 POSIX shell 解析规则。 *punctuation_chars* 参数提供了一种使行为更接近于真正的 shell 解析的方式。"
" 该参数可接受多种值：默认值、``False``、保持 Python 3.5 及更早版本的行为。 如果设为 ``True``，则会改变对字符 "
"``();<>|&`` 的解析方式：这些字符将作为独立的词法单元被返回（视作标点符号）。 如果设为非空字符串，则这些字符将被用作标点符号。 出现在 "
"*punctuation_chars* 中的 :attr:`wordchars` 属性中的任何字符都会从 :attr:`wordchars` 中被删除。"
" 请参阅 :ref:`improved-shell-compatibility` 了解详情。 *punctuation_chars* 只能在创建 "
":class:`~shlex.shlex` 实例时设置，以后不能再作修改。"

#: ../../library/shlex.rst:131
msgid "The *punctuation_chars* parameter was added."
msgstr "加入 *punctuation_chars* 参数。"

#: ../../library/shlex.rst:136
msgid "Module :mod:`configparser`"
msgstr ":mod:`configparser` 模块"

#: ../../library/shlex.rst:137
msgid ""
"Parser for configuration files similar to the Windows :file:`.ini` files."
msgstr "配置文件解析器，类似于 Windows 的 :file:`.ini` 文件。"

#: ../../library/shlex.rst:143
msgid "shlex Objects"
msgstr "shlex 对象"

#: ../../library/shlex.rst:145
msgid "A :class:`~shlex.shlex` instance has the following methods:"
msgstr ":class:`~shlex.shlex` 实例具备以下方法："

#: ../../library/shlex.rst:150
msgid ""
"Return a token.  If tokens have been stacked using :meth:`push_token`, pop a"
" token off the stack.  Otherwise, read one from the input stream.  If "
"reading encounters an immediate end-of-file, :attr:`eof` is returned (the "
"empty string (``''``) in non-POSIX mode, and ``None`` in POSIX mode)."
msgstr ""
"返回一个词法单元。如果所有单词已用 :meth:`push_token` "
"堆叠在一起了，则从堆栈中弹出一个词法单元。否则就从输入流中读取一个。如果读取时遇到文件结束符，则会返回 :attr:`eof`（在非 POSIX "
"模式下为空字符串 ``''``，在 POSIX 模式下为 ``None``）。"

#: ../../library/shlex.rst:158
msgid "Push the argument onto the token stack."
msgstr "将参数值压入词法单元堆栈。"

#: ../../library/shlex.rst:163
msgid ""
"Read a raw token.  Ignore the pushback stack, and do not interpret source "
"requests.  (This is not ordinarily a useful entry point, and is documented "
"here only for the sake of completeness.)"
msgstr "读取一个原始词法单元。忽略堆栈，且不解释源请求。（通常没什么用，只是为了完整起见。）"

#: ../../library/shlex.rst:170
msgid ""
"When :class:`~shlex.shlex` detects a source request (see :attr:`source` "
"below) this method is given the following token as argument, and expected to"
" return a tuple consisting of a filename and an open file-like object."
msgstr ""
"当 :class:`~shlex.shlex` 检测到源请求（见下面的 "
":attr:`source`），以下词法单元可作为参数，并应返回一个由文件名和打开的文件对象组成的元组。"

#: ../../library/shlex.rst:174
msgid ""
"Normally, this method first strips any quotes off the argument.  If the "
"result is an absolute pathname, or there was no previous source request in "
"effect, or the previous source was a stream (such as ``sys.stdin``), the "
"result is left alone.  Otherwise, if the result is a relative pathname, the "
"directory part of the name of the file immediately before it on the source "
"inclusion stack is prepended (this behavior is like the way the C "
"preprocessor handles ``#include \"file.h\"``)."
msgstr ""
"通常本方法会先移除参数中的引号。如果结果为绝对路径名，或者之前没有有效的源请求，或者之前的源请求是一个流对象（比如 "
"``sys.stdin``），那么结果将不做处理。否则，如果结果是相对路径名，那么前面将会加上目录部分，目录名来自于源堆栈中前一个文件名（类似于 C "
"预处理器对 ``#include \"file.h\"`` 的处理方式）。"

#: ../../library/shlex.rst:182
msgid ""
"The result of the manipulations is treated as a filename, and returned as "
"the first component of the tuple, with :func:`open` called on it to yield "
"the second component. (Note: this is the reverse of the order of arguments "
"in instance initialization!)"
msgstr ""
"结果被视为一个文件名，并作为元组的第一部分返回，元组的第二部分以此为基础调用 :func:`open` "
"获得。（注意：这与实例初始化过程中的参数顺序相反！)"

#: ../../library/shlex.rst:187
msgid ""
"This hook is exposed so that you can use it to implement directory search "
"paths, addition of file extensions, and other namespace hacks. There is no "
"corresponding 'close' hook, but a shlex instance will call the "
":meth:`~io.IOBase.close` method of the sourced input stream when it returns "
"EOF."
msgstr ""
"此钩子函数是公开的，可用于实现路径搜索、添加文件扩展名或黑入其他命名空间。没有对应的“关闭”钩子函数，但 shlex 实例在返回 EOF "
"时会调用源输入流的 :meth:`~io.IOBase.close` 方法。"

#: ../../library/shlex.rst:193
msgid ""
"For more explicit control of source stacking, use the :meth:`push_source` "
"and :meth:`pop_source` methods."
msgstr "若要更明确地控制源堆栈，请采用 :meth:`push_source` 和 :meth:`pop_source` 方法。"

#: ../../library/shlex.rst:199
msgid ""
"Push an input source stream onto the input stack.  If the filename argument "
"is specified it will later be available for use in error messages.  This is "
"the same method used internally by the :meth:`sourcehook` method."
msgstr "将输入源流压入输入堆栈。如果指定了文件名参数，以后错误信息中将会用到。:meth:`sourcehook` 内部同样使用了本方法。"

#: ../../library/shlex.rst:206
msgid ""
"Pop the last-pushed input source from the input stack. This is the same "
"method used internally when the lexer reaches EOF on a stacked input stream."
msgstr "从输入堆栈中弹出最后一条输入源。当遇到输入流的 EOF 时，内部也使用同一方法。"

#: ../../library/shlex.rst:212
msgid ""
"This method generates an error message leader in the format of a Unix C "
"compiler error label; the format is ``'\"%s\", line %d: '``, where the "
"``%s`` is replaced with the name of the current source file and the ``%d`` "
"with the current input line number (the optional arguments can be used to "
"override these)."
msgstr ""
"本方法生成一条错误信息的首部，以 Unix C 编译器错误标签的形式；格式为 ``'\"%s\", line %d: '``，其中 ``%s`` "
"被替换为当前源文件的名称，``%d`` 被替换为当前输入行号（可用可选参数覆盖）。"

#: ../../library/shlex.rst:217
msgid ""
"This convenience is provided to encourage :mod:`shlex` users to generate "
"error messages in the standard, parseable format understood by Emacs and "
"other Unix tools."
msgstr "这是个快捷函数，旨在鼓励 :mod:`shlex` 用户以标准的、可解析的格式生成错误信息，以便 Emacs 和其他 Unix 工具理解。"

#: ../../library/shlex.rst:221
msgid ""
"Instances of :class:`~shlex.shlex` subclasses have some public instance "
"variables which either control lexical analysis or can be used for "
"debugging:"
msgstr ":class:`~shlex.shlex` 子类的实例有一些公共实例变量，这些变量可以控制词义分析，也可用于调试。"

#: ../../library/shlex.rst:227
msgid ""
"The string of characters that are recognized as comment beginners. All "
"characters from the comment beginner to end of line are ignored. Includes "
"just ``'#'`` by default."
msgstr "将被视为注释起始字符串。从注释起始字符串到行尾的所有字符都将被忽略。默认情况下只包括 ``'#'``。"

#: ../../library/shlex.rst:234
msgid ""
"The string of characters that will accumulate into multi-character tokens.  "
"By default, includes all ASCII alphanumerics and underscore.  In POSIX mode,"
" the accented characters in the Latin-1 set are also included.  If "
":attr:`punctuation_chars` is not empty, the characters ``~-./*?=``, which "
"can appear in filename specifications and command line parameters, will also"
" be included in this attribute, and any characters which appear in "
"``punctuation_chars`` will be removed from ``wordchars`` if they are present"
" there. If :attr:`whitespace_split` is set to ``True``, this will have no "
"effect."
msgstr ""
"可连成多字符词法单元的字符串。默认包含所有 ASCII 字母数字和下划线。在 POSIX 模式下，Latin-1 字符集的重音字符也被包括在内。如果  "
":attr:`punctuation_chars` 不为空，则可出现在文件名规范和命令行参数中的 ``~-./*?=`` 字符也将包含在内，任何 "
"``punctuation_chars`` 中的字符将从 ``wordchars`` 中移除。如果 :attr:`whitespace_split` "
"设为 ``True``，则本规则无效。"

#: ../../library/shlex.rst:247
msgid ""
"Characters that will be considered whitespace and skipped.  Whitespace "
"bounds tokens.  By default, includes space, tab, linefeed and carriage-"
"return."
msgstr "将被视为空白符并跳过的字符。空白符是词法单元的边界。默认包含空格、制表符、换行符和回车符。"

#: ../../library/shlex.rst:253
msgid ""
"Characters that will be considered as escape. This will be only used in "
"POSIX mode, and includes just ``'\\'`` by default."
msgstr "将视为转义字符。仅适用于 POSIX 模式，默认只包含 ``'\\'``。"

#: ../../library/shlex.rst:259
msgid ""
"Characters that will be considered string quotes.  The token accumulates "
"until the same quote is encountered again (thus, different quote types "
"protect each other as in the shell.)  By default, includes ASCII single and "
"double quotes."
msgstr ""
"将视为引号的字符。词法单元中的字符将会累至再次遇到同样的引号（因此，不同的引号会像在 shell 中一样相互包含。）默认包含 ASCII "
"单引号和双引号。"

#: ../../library/shlex.rst:266
msgid ""
"Characters in :attr:`quotes` that will interpret escape characters defined "
"in :attr:`escape`.  This is only used in POSIX mode, and includes just "
"``'\"'`` by default."
msgstr ""
":attr:`quotes` 中的字符将会解析 :attr:`escape` 定义的转义字符。这只在 POSIX 模式下使用，默认只包含 "
"``'\"'``。"

#: ../../library/shlex.rst:273
msgid ""
"If ``True``, tokens will only be split in whitespaces.  This is useful, for "
"example, for parsing command lines with :class:`~shlex.shlex`, getting "
"tokens in a similar way to shell arguments.  When used in combination with "
":attr:`punctuation_chars`, tokens will be split on whitespace in addition to"
" those characters."
msgstr ""
"若为 ``True``，则只根据空白符拆分词法单元。这很有用，比如用 :class:`~shlex.shlex` 解析命令行，用类似 shell "
"参数的方式读取各个词法单元。当与 :attr:`punctuation_chars` 一起使用时，将根据空白符和这些字符拆分词法单元。"

#: ../../library/shlex.rst:279
msgid ""
"The :attr:`punctuation_chars` attribute was made compatible with the "
":attr:`whitespace_split` attribute."
msgstr ":attr:`punctuation_chars` 属性已与 :attr:`whitespace_split` 属性兼容。"

#: ../../library/shlex.rst:286
msgid ""
"The name of the current input file, as initially set at class instantiation "
"time or stacked by later source requests.  It may be useful to examine this "
"when constructing error messages."
msgstr "当前输入的文件名，可能是在类实例化时设置的，或者是由后来的源请求堆栈生成的。在构建错误信息时可能会用到本属性。"

#: ../../library/shlex.rst:293
msgid ""
"The input stream from which this :class:`~shlex.shlex` instance is reading "
"characters."
msgstr ":class:`~shlex.shlex` 实例正从中读取字符的输入流。"

#: ../../library/shlex.rst:299
msgid ""
"This attribute is ``None`` by default.  If you assign a string to it, that "
"string will be recognized as a lexical-level inclusion request similar to "
"the ``source`` keyword in various shells.  That is, the immediately "
"following token will be opened as a filename and input will be taken from "
"that stream until EOF, at which point the :meth:`~io.IOBase.close` method of"
" that stream will be called and the input source will again become the "
"original input stream.  Source requests may be stacked any number of levels "
"deep."
msgstr ""
"本属性默认值为 ``None``。 如果给定一个字符串，则会识别为包含请求，类似于各种 shell 中的 ``source`` 关键字。 "
"也就是说，紧随其后的词法单元将作为文件名打开，作为输入流，直至遇到 EOF 后调用流的 :meth:`~io.IOBase.close` "
"方法，然后原输入流仍变回输入源。Source 请求可以在词义堆栈中嵌套任意深度。"

#: ../../library/shlex.rst:310
msgid ""
"If this attribute is numeric and ``1`` or more, a :class:`~shlex.shlex` "
"instance will print verbose progress output on its behavior.  If you need to"
" use this, you can read the module source code to learn the details."
msgstr ""
"如果本属性为大于 ``1`` 的数字，则 :class:`~shlex.shlex` "
"实例会把动作进度详细地输出出来。若需用到本属性，可阅读源代码来了解细节。"

#: ../../library/shlex.rst:317
msgid "Source line number (count of newlines seen so far plus one)."
msgstr "源的行数（到目前为止读到的换行符数量加 1）。"

#: ../../library/shlex.rst:322
msgid ""
"The token buffer.  It may be useful to examine this when catching "
"exceptions."
msgstr "词法单元的缓冲区。在捕获异常时可能会用到。"

#: ../../library/shlex.rst:327
msgid ""
"Token used to determine end of file. This will be set to the empty string "
"(``''``), in non-POSIX mode, and to ``None`` in POSIX mode."
msgstr "用于确定文件结束的词法单元。在非 POSIX 模式下，将设为空字符串 ``''``，在 POSIX 模式下被设为 ``None``。"

#: ../../library/shlex.rst:333
msgid ""
"A read-only property. Characters that will be considered punctuation. Runs "
"of punctuation characters will be returned as a single token. However, note "
"that no semantic validity checking will be performed: for example, '>>>' "
"could be returned as a token, even though it may not be recognised as such "
"by shells."
msgstr ""
"只读属性。表示应视作标点符号的字符。标点符号将作为单个词法单元返回。然而，请注意不会进行语义有效性检查：比如 “>>>” "
"可能会作为一个词法单元返回，虽然 shell 可能无法识别。"

#: ../../library/shlex.rst:344
msgid "Parsing Rules"
msgstr "解析规则"

#: ../../library/shlex.rst:346
msgid ""
"When operating in non-POSIX mode, :class:`~shlex.shlex` will try to obey to "
"the following rules."
msgstr "在非 POSIX 模式下时，:class:`~shlex.shlex` 会试图遵守以下规则："

#: ../../library/shlex.rst:349
msgid ""
"Quote characters are not recognized within words (``Do\"Not\"Separate`` is "
"parsed as the single word ``Do\"Not\"Separate``);"
msgstr "不识别单词中的引号（``Do\"Not\"Separate`` 解析为一个单词 ``Do\"Not\"Separate``）；"

#: ../../library/shlex.rst:352
msgid "Escape characters are not recognized;"
msgstr "不识别转义字符；"

#: ../../library/shlex.rst:354
msgid ""
"Enclosing characters in quotes preserve the literal value of all characters "
"within the quotes;"
msgstr "引号包裹的字符保留字面意思；"

#: ../../library/shlex.rst:357
msgid ""
"Closing quotes separate words (``\"Do\"Separate`` is parsed as ``\"Do\"`` "
"and ``Separate``);"
msgstr "成对的引号会将单词分离（``\"Do\"Separate`` 解析为 ``\"Do\"`` 和 ``Separate``）；"

#: ../../library/shlex.rst:360
msgid ""
"If :attr:`~shlex.whitespace_split` is ``False``, any character not declared "
"to be a word character, whitespace, or a quote will be returned as a single-"
"character token. If it is ``True``, :class:`~shlex.shlex` will only split "
"words in whitespaces;"
msgstr ""
"如果 :attr:`~shlex.whitespace_split` 为 "
"``False``，则未声明为单词字符、空白或引号的字符将作为单字符的词法单元返回。若为 ``True``， 则 "
":class:`~shlex.shlex` 只根据空白符拆分单词。"

#: ../../library/shlex.rst:365
msgid "EOF is signaled with an empty string (``''``);"
msgstr "EOF 用空字符串（``''``）表示；"

#: ../../library/shlex.rst:367
msgid "It's not possible to parse empty strings, even if quoted."
msgstr "空字符串无法解析，即便是加了引号。"

#: ../../library/shlex.rst:369
msgid ""
"When operating in POSIX mode, :class:`~shlex.shlex` will try to obey to the "
"following parsing rules."
msgstr "在 POSIX 模式时，:class:`~shlex.shlex` 将尝试遵守以下解析规则："

#: ../../library/shlex.rst:372
msgid ""
"Quotes are stripped out, and do not separate words "
"(``\"Do\"Not\"Separate\"`` is parsed as the single word ``DoNotSeparate``);"
msgstr "引号会被剔除，且不会拆分单词（ ``\"Do\"Not\"Separate\"`` 将解析为单个单词 ``DoNotSeparate``）；"

#: ../../library/shlex.rst:375
msgid ""
"Non-quoted escape characters (e.g. ``'\\'``) preserve the literal value of "
"the next character that follows;"
msgstr "未加引号包裹的转义字符（如 ``'\\'`` ）保留后一个字符的字面意思；"

#: ../../library/shlex.rst:378
msgid ""
"Enclosing characters in quotes which are not part of "
":attr:`~shlex.escapedquotes` (e.g. ``\"'\"``) preserve the literal value of "
"all characters within the quotes;"
msgstr "引号中的字符不属于 :attr:`~shlex.escapedquotes` （例如，``\"'\"``），则保留引号中所有字符的字面值；"

#: ../../library/shlex.rst:382
msgid ""
"Enclosing characters in quotes which are part of "
":attr:`~shlex.escapedquotes` (e.g. ``'\"'``) preserves the literal value of "
"all characters within the quotes, with the exception of the characters "
"mentioned in :attr:`~shlex.escape`.  The escape characters retain its "
"special meaning only when followed by the quote in use, or the escape "
"character itself. Otherwise the escape character will be considered a normal"
" character."
msgstr ""
"若引号包裹的字符属于 :attr:`~shlex.escapedquotes` （例如 ``'\"'``），则保留引号中所有字符的字面意思，属于 "
":attr:`~shlex.escape` 中的字符除外。仅当后跟后半个引号或转义字符本身时，转义字符才保留其特殊含义。否则，转义字符将视作普通字符；"

#: ../../library/shlex.rst:390
msgid "EOF is signaled with a :const:`None` value;"
msgstr "EOF 用 :const:`None` 表示；"

#: ../../library/shlex.rst:392
msgid "Quoted empty strings (``''``) are allowed."
msgstr "允许出现引号包裹的空字符串（``''``）。"

#: ../../library/shlex.rst:397
msgid "Improved Compatibility with Shells"
msgstr "改进的 shell 兼容性"

#: ../../library/shlex.rst:401
msgid ""
"The :class:`shlex` class provides compatibility with the parsing performed "
"by common Unix shells like ``bash``, ``dash``, and ``sh``.  To take "
"advantage of this compatibility, specify the ``punctuation_chars`` argument "
"in the constructor.  This defaults to ``False``, which preserves pre-3.6 "
"behaviour. However, if it is set to ``True``, then parsing of the characters"
" ``();<>|&`` is changed: any run of these characters is returned as a single"
" token.  While this is short of a full parser for shells (which would be out"
" of scope for the standard library, given the multiplicity of shells out "
"there), it does allow you to perform processing of command lines more easily"
" than you could otherwise.  To illustrate, you can see the difference in the"
" following snippet:"
msgstr ""
":class:`shlex` 类提供了与常见 Unix shell（如 ``bash``、 ``dash`` 和 "
"``sh``）的解析兼容性。为了充分利用这种兼容性，请在构造函数中设定 ``punctuation_chars`` 参数。该参数默认为 "
"``False``，维持 3.6 以下版本的行为。如果设为 ``True``，则会改变对 ``();<>|&`` "
"字符的解析方式：这些字符都将视为单个的词法单元返回。虽然不算是完整的 shell 解析程序（考虑到 shell "
"的多样性，超出了标准库的范围），但确实能比其他方式更容易进行命令行的处理。以下代码段演示了两者的差异："

#: ../../library/shlex.rst:412
msgid ""
">>> import shlex\n"
">>> text = \"a && b; c && d || e; f >'abc'; (def \\\"ghi\\\")\"\n"
">>> s = shlex.shlex(text, posix=True)\n"
">>> s.whitespace_split = True\n"
">>> list(s)\n"
"['a', '&&', 'b;', 'c', '&&', 'd', '||', 'e;', 'f', '>abc;', '(def', 'ghi)']\n"
">>> s = shlex.shlex(text, posix=True, punctuation_chars=True)\n"
">>> s.whitespace_split = True\n"
">>> list(s)\n"
"['a', '&&', 'b', ';', 'c', '&&', 'd', '||', 'e', ';', 'f', '>', 'abc', ';',\n"
"'(', 'def', 'ghi', ')']"
msgstr ""
">>> import shlex\n"
">>> text = \"a && b; c && d || e; f >'abc'; (def \\\"ghi\\\")\"\n"
">>> s = shlex.shlex(text, posix=True)\n"
">>> s.whitespace_split = True\n"
">>> list(s)\n"
"['a', '&&', 'b;', 'c', '&&', 'd', '||', 'e;', 'f', '>abc;', '(def', 'ghi)']\n"
">>> s = shlex.shlex(text, posix=True, punctuation_chars=True)\n"
">>> s.whitespace_split = True\n"
">>> list(s)\n"
"['a', '&&', 'b', ';', 'c', '&&', 'd', '||', 'e', ';', 'f', '>', 'abc', ';',\n"
"'(', 'def', 'ghi', ')']"

#: ../../library/shlex.rst:427
msgid ""
"Of course, tokens will be returned which are not valid for shells, and "
"you'll need to implement your own error checks on the returned tokens."
msgstr "当然，返回的词法单元对 shell 无效，需要对返回的词法单元自行进行错误检查。"

#: ../../library/shlex.rst:430
msgid ""
"Instead of passing ``True`` as the value for the punctuation_chars "
"parameter, you can pass a string with specific characters, which will be "
"used to determine which characters constitute punctuation. For example::"
msgstr ""
"punctuation_chars 参数可以不传入 ``True`` ，而是传入包含特定字符的字符串，用于确定由哪些字符构成标点符号。例如："

#: ../../library/shlex.rst:434
msgid ""
">>> import shlex\n"
">>> s = shlex.shlex(\"a && b || c\", punctuation_chars=\"|\")\n"
">>> list(s)\n"
"['a', '&', '&', 'b', '||', 'c']"
msgstr ""
">>> import shlex\n"
">>> s = shlex.shlex(\"a && b || c\", punctuation_chars=\"|\")\n"
">>> list(s)\n"
"['a', '&', '&', 'b', '||', 'c']"

#: ../../library/shlex.rst:439
msgid ""
"When ``punctuation_chars`` is specified, the :attr:`~shlex.wordchars` "
"attribute is augmented with the characters ``~-./*?=``.  That is because "
"these characters can appear in file names (including wildcards) and command-"
"line arguments (e.g. ``--color=auto``). Hence::"
msgstr ""
"如果指定了 ``punctuation_chars``，则 :attr:`~shlex.wordchars` 属性的参数会是 "
"``~-./*?=``。因为这些字符可以出现在文件名（包括通配符）和命令行参数中（如 ``--color=auto``）。因此："

#: ../../library/shlex.rst:444
msgid ""
">>> import shlex\n"
">>> s = shlex.shlex('~/a && b-c --color=auto || d *.py?',\n"
"...                 punctuation_chars=True)\n"
">>> list(s)\n"
"['~/a', '&&', 'b-c', '--color=auto', '||', 'd', '*.py?']"
msgstr ""
">>> import shlex\n"
">>> s = shlex.shlex('~/a && b-c --color=auto || d *.py?',\n"
"...                 punctuation_chars=True)\n"
">>> list(s)\n"
"['~/a', '&&', 'b-c', '--color=auto', '||', 'd', '*.py?']"

#: ../../library/shlex.rst:450
msgid ""
"However, to match the shell as closely as possible, it is recommended to "
"always use ``posix`` and :attr:`~shlex.whitespace_split` when using "
":attr:`~shlex.punctuation_chars`, which will negate :attr:`~shlex.wordchars`"
" entirely."
msgstr ""
"不过为了尽可能接近于 shell ，建议在使用  :attr:`~shlex.punctuation_chars`  时始终使用 ``posix`` 和"
" :attr:`~shlex.whitespace_split` ，这将完全否定 :attr:`~shlex.wordchars` 。"

#: ../../library/shlex.rst:455
msgid ""
"For best effect, ``punctuation_chars`` should be set in conjunction with "
"``posix=True``. (Note that ``posix=False`` is the default for "
":class:`~shlex.shlex`.)"
msgstr ""
"为了达到最佳效果，``punctuation_chars`` 应与 ``posix=True`` 一起设置。（注意 ``posix=False`` 是 "
":class:`~shlex.shlex` 的默认设置)。"
