# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:17+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/binascii.rst:2
msgid ":mod:`binascii` --- Convert between binary and ASCII"
msgstr ""

#: ../../library/binascii.rst:15
msgid ""
"The :mod:`binascii` module contains a number of methods to convert between "
"binary and various ASCII-encoded binary representations. Normally, you will "
"not use these functions directly but use wrapper modules like :mod:`uu`, "
":mod:`base64`, or :mod:`binhex` instead. The :mod:`binascii` module contains"
" low-level functions written in C for greater speed that are used by the "
"higher-level modules."
msgstr ""

#: ../../library/binascii.rst:24
msgid ""
"``a2b_*`` functions accept Unicode strings containing only ASCII characters."
" Other functions only accept :term:`bytes-like objects <bytes-like object>` "
"(such as :class:`bytes`, :class:`bytearray` and other objects that support "
"the buffer protocol)."
msgstr ""

#: ../../library/binascii.rst:29
msgid ""
"ASCII-only unicode strings are now accepted by the ``a2b_*`` functions."
msgstr ""

#: ../../library/binascii.rst:33
msgid "The :mod:`binascii` module defines the following functions:"
msgstr ""

#: ../../library/binascii.rst:38
msgid ""
"Convert a single line of uuencoded data back to binary and return the binary"
" data. Lines normally contain 45 (binary) bytes, except for the last line. "
"Line data may be followed by whitespace."
msgstr ""

#: ../../library/binascii.rst:45
msgid ""
"Convert binary data to a line of ASCII characters, the return value is the "
"converted line, including a newline char. The length of *data* should be at "
"most 45. If *backtick* is true, zeros are represented by ``'`'`` instead of "
"spaces."
msgstr ""

#: ../../library/binascii.rst:49
msgid "Added the *backtick* parameter."
msgstr ""

#: ../../library/binascii.rst:55
msgid ""
"Convert a block of base64 data back to binary and return the binary data. "
"More than one line may be passed at a time."
msgstr ""

#: ../../library/binascii.rst:61
msgid ""
"Convert binary data to a line of ASCII characters in base64 coding. The "
"return value is the converted line, including a newline char if *newline* is"
" true.  The output of this function conforms to :rfc:`3548`."
msgstr ""

#: ../../library/binascii.rst:65
msgid "Added the *newline* parameter."
msgstr ""

#: ../../library/binascii.rst:71
msgid ""
"Convert a block of quoted-printable data back to binary and return the "
"binary data. More than one line may be passed at a time. If the optional "
"argument *header* is present and true, underscores will be decoded as "
"spaces."
msgstr ""

#: ../../library/binascii.rst:78
msgid ""
"Convert binary data to a line(s) of ASCII characters in quoted-printable "
"encoding.  The return value is the converted line(s). If the optional "
"argument *quotetabs* is present and true, all tabs and spaces will be "
"encoded.   If the optional argument *istext* is present and true, newlines "
"are not encoded but trailing whitespace will be encoded. If the optional "
"argument *header* is present and true, spaces will be encoded as underscores"
" per :rfc:`1522`. If the optional argument *header* is present and false, "
"newline characters will be encoded as well; otherwise linefeed conversion "
"might corrupt the binary data stream."
msgstr ""

#: ../../library/binascii.rst:91
msgid ""
"Convert binhex4 formatted ASCII data to binary, without doing RLE-"
"decompression. The string should contain a complete number of binary bytes, "
"or (in case of the last portion of the binhex4 data) have the remaining bits"
" zero."
msgstr ""

#: ../../library/binascii.rst:100
msgid ""
"Perform RLE-decompression on the data, as per the binhex4 standard. The "
"algorithm uses ``0x90`` after a byte as a repeat indicator, followed by a "
"count. A count of ``0`` specifies a byte value of ``0x90``. The routine "
"returns the decompressed data, unless data input data ends in an orphaned "
"repeat indicator, in which case the :exc:`Incomplete` exception is raised."
msgstr ""

#: ../../library/binascii.rst:106
msgid "Accept only bytestring or bytearray objects as input."
msgstr ""

#: ../../library/binascii.rst:114
msgid "Perform binhex4 style RLE-compression on *data* and return the result."
msgstr ""

#: ../../library/binascii.rst:121
msgid ""
"Perform hexbin4 binary-to-ASCII translation and return the resulting string."
" The argument should already be RLE-coded, and have a length divisible by 3 "
"(except possibly the last fragment)."
msgstr ""

#: ../../library/binascii.rst:130
msgid ""
"Compute a 16-bit CRC value of *data*, starting with *value* as the initial "
"CRC, and return the result.  This uses the CRC-CCITT polynomial *x*:sup:`16`"
" + *x*:sup:`12` + *x*:sup:`5` + 1, often represented as 0x1021.  This CRC is"
" used in the binhex4 format."
msgstr ""

#: ../../library/binascii.rst:138
msgid ""
"Compute CRC-32, the unsigned 32-bit checksum of *data*, starting with an "
"initial CRC of *value*.  The default initial CRC is zero.  The algorithm is "
"consistent with the ZIP file checksum.  Since the algorithm is designed for "
"use as a checksum algorithm, it is not suitable for use as a general hash "
"algorithm.  Use as follows::"
msgstr ""

#: ../../library/binascii.rst:150
msgid ""
"The result is always unsigned. To generate the same numeric value when using"
" Python 2 or earlier, use ``crc32(data) & 0xffffffff``."
msgstr ""

#: ../../library/binascii.rst:158
msgid ""
"Return the hexadecimal representation of the binary *data*.  Every byte of "
"*data* is converted into the corresponding 2-digit hex representation.  The "
"returned bytes object is therefore twice as long as the length of *data*."
msgstr ""

#: ../../library/binascii.rst:162
msgid ""
"Similar functionality (but returning a text string) is also conveniently "
"accessible using the :meth:`bytes.hex` method."
msgstr ""

#: ../../library/binascii.rst:165
msgid ""
"If *sep* is specified, it must be a single character str or bytes object. It"
" will be inserted in the output after every *bytes_per_sep* input bytes. "
"Separator placement is counted from the right end of the output by default, "
"if you wish to count from the left, supply a negative *bytes_per_sep* value."
msgstr ""

#: ../../library/binascii.rst:180
msgid "The *sep* and *bytes_per_sep* parameters were added."
msgstr ""

#: ../../library/binascii.rst:186
msgid ""
"Return the binary data represented by the hexadecimal string *hexstr*.  This"
" function is the inverse of :func:`b2a_hex`. *hexstr* must contain an even "
"number of hexadecimal digits (which can be upper or lower case), otherwise "
"an :exc:`Error` exception is raised."
msgstr ""

#: ../../library/binascii.rst:191
msgid ""
"Similar functionality (accepting only text string arguments, but more "
"liberal towards whitespace) is also accessible using the "
":meth:`bytes.fromhex` class method."
msgstr ""

#: ../../library/binascii.rst:197
msgid "Exception raised on errors. These are usually programming errors."
msgstr ""

#: ../../library/binascii.rst:202
msgid ""
"Exception raised on incomplete data. These are usually not programming "
"errors, but may be handled by reading a little more data and trying again."
msgstr ""

#: ../../library/binascii.rst:210
msgid "Module :mod:`base64`"
msgstr ""

#: ../../library/binascii.rst:209
msgid ""
"Support for RFC compliant base64-style encoding in base 16, 32, 64, and 85."
msgstr ""

#: ../../library/binascii.rst:213
msgid "Module :mod:`binhex`"
msgstr ""

#: ../../library/binascii.rst:213
msgid "Support for the binhex format used on the Macintosh."
msgstr ""

#: ../../library/binascii.rst:216
msgid "Module :mod:`uu`"
msgstr ""

#: ../../library/binascii.rst:216
msgid "Support for UU encoding used on Unix."
msgstr ""

#: ../../library/binascii.rst:218
msgid "Module :mod:`quopri`"
msgstr ""

#: ../../library/binascii.rst:219
msgid "Support for quoted-printable encoding used in MIME email messages."
msgstr ""
