# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Freesand Leo <yuqinju@163.com>, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/zoneinfo.rst:2
msgid ":mod:`!zoneinfo` --- IANA time zone support"
msgstr ":mod:`!zoneinfo` --- IANA 时区支持"

#: ../../library/zoneinfo.rst:12
msgid "**Source code:** :source:`Lib/zoneinfo`"
msgstr "**源代码:** :source:`Lib/zoneinfo`"

#: ../../library/zoneinfo.rst:16
msgid ""
"The :mod:`zoneinfo` module provides a concrete time zone implementation to "
"support the IANA time zone database as originally specified in :pep:`615`. "
"By default, :mod:`zoneinfo` uses the system's time zone data if available; "
"if no system time zone data is available, the library will fall back to "
"using the first-party :pypi:`tzdata` package available on PyPI."
msgstr ""
":mod:`zoneinfo` 模块根据 :pep:`615` 中的原始规范说明提供了一个具体的时区实现来支持 IANA 时区数据库。 "
"在默认情况下，:mod:`zoneinfo` 会在可能的情况下使用系统的时区数据；如果系统时区数据不可用，该库将回退为使用 PyPI 上提供的 "
":pypi:`tzdata` 第一方包。"

#: ../../library/zoneinfo.rst:24
msgid "Module: :mod:`datetime`"
msgstr "模块: :mod:`datetime`"

#: ../../library/zoneinfo.rst:25
msgid ""
"Provides the :class:`~datetime.time` and :class:`~datetime.datetime` types "
"with which the :class:`ZoneInfo` class is designed to be used."
msgstr ""
"提供 :class:`~datetime.time` 和 :class:`~datetime.datetime` "
"类型，:class:`ZoneInfo` 类被设计为可配合这两个类型使用。"

#: ../../library/zoneinfo.rst:28
msgid "Package :pypi:`tzdata`"
msgstr "包 :pypi:`tzdata`"

#: ../../library/zoneinfo.rst:29
msgid ""
"First-party package maintained by the CPython core developers to supply time"
" zone data via PyPI."
msgstr "由 CPython 核心开发者维护以通过 PyPI 提供时区数据的第一方包。"

#: ../../includes/wasm-notavail.rst:3
msgid "Availability"
msgstr "Availability"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See "
":ref:`wasm-availability` for more information."
msgstr "此模块在 WebAssembly 平台上无效或不可用。 请参阅 :ref:`wasm-availability` 了解详情。"

#: ../../library/zoneinfo.rst:35
msgid "Using ``ZoneInfo``"
msgstr "使用 ``ZoneInfo``"

#: ../../library/zoneinfo.rst:37
msgid ""
":class:`ZoneInfo` is a concrete implementation of the "
":class:`datetime.tzinfo` abstract base class, and is intended to be attached"
" to ``tzinfo``, either via the constructor, the :meth:`datetime.replace "
"<datetime.datetime.replace>` method or :meth:`datetime.astimezone "
"<datetime.datetime.astimezone>`::"
msgstr ""
":class:`ZoneInfo` 是 :class:`datetime.tzinfo` 抽象基类的具体实现，其目标是通过构造器、 "
":meth:`datetime.replace <datetime.datetime.replace>` 方法或 "
":meth:`datetime.astimezone <datetime.datetime.astimezone>` 来与 ``tzinfo`` "
"建立关联::"

#: ../../library/zoneinfo.rst:42
msgid ""
">>> from zoneinfo import ZoneInfo\n"
">>> from datetime import datetime, timedelta\n"
"\n"
">>> dt = datetime(2020, 10, 31, 12, tzinfo=ZoneInfo(\"America/Los_Angeles\"))\n"
">>> print(dt)\n"
"2020-10-31 12:00:00-07:00\n"
"\n"
">>> dt.tzname()\n"
"'PDT'"
msgstr ""
">>> from zoneinfo import ZoneInfo\n"
">>> from datetime import datetime, timedelta\n"
"\n"
">>> dt = datetime(2020, 10, 31, 12, tzinfo=ZoneInfo(\"America/Los_Angeles\"))\n"
">>> print(dt)\n"
"2020-10-31 12:00:00-07:00\n"
"\n"
">>> dt.tzname()\n"
"'PDT'"

#: ../../library/zoneinfo.rst:52
msgid ""
"Datetimes constructed in this way are compatible with datetime arithmetic "
"and handle daylight saving time transitions with no further intervention::"
msgstr "以此方式构造的日期时间对象可兼容日期时间运算并可在无需进一步干预的情况下处理夏令时转换::"

#: ../../library/zoneinfo.rst:55
msgid ""
">>> dt_add = dt + timedelta(days=1)\n"
"\n"
">>> print(dt_add)\n"
"2020-11-01 12:00:00-08:00\n"
"\n"
">>> dt_add.tzname()\n"
"'PST'"
msgstr ""
">>> dt_add = dt + timedelta(days=1)\n"
"\n"
">>> print(dt_add)\n"
"2020-11-01 12:00:00-08:00\n"
"\n"
">>> dt_add.tzname()\n"
"'PST'"

#: ../../library/zoneinfo.rst:63
msgid ""
"These time zones also support the :attr:`~datetime.datetime.fold` attribute "
"introduced in :pep:`495`.  During offset transitions which induce ambiguous "
"times (such as a daylight saving time to standard time transition), the "
"offset from *before* the transition is used when ``fold=0``, and the offset "
"*after* the transition is used when ``fold=1``, for example::"
msgstr ""
"这些时区还支持在 :pep:`495` 中引入的 :attr:`~datetime.datetime.fold`。 "
"在可能导致时间歧义的时差转换中（例如夏令时到标准时的转换），当 ``fold=0`` 时会使用转换 *之前* 的时差，而当 ``fold=1`` "
"时则使用转换 *之后* 的时差，例如::"

#: ../../library/zoneinfo.rst:69
msgid ""
">>> dt = datetime(2020, 11, 1, 1, tzinfo=ZoneInfo(\"America/Los_Angeles\"))\n"
">>> print(dt)\n"
"2020-11-01 01:00:00-07:00\n"
"\n"
">>> print(dt.replace(fold=1))\n"
"2020-11-01 01:00:00-08:00"
msgstr ""
">>> dt = datetime(2020, 11, 1, 1, tzinfo=ZoneInfo(\"America/Los_Angeles\"))\n"
">>> print(dt)\n"
"2020-11-01 01:00:00-07:00\n"
"\n"
">>> print(dt.replace(fold=1))\n"
"2020-11-01 01:00:00-08:00"

#: ../../library/zoneinfo.rst:76
msgid ""
"When converting from another time zone, the fold will be set to the correct "
"value::"
msgstr "当执行来自另一时区的转换时，fold 将被设置为正确的值::"

#: ../../library/zoneinfo.rst:79
msgid ""
">>> from datetime import timezone\n"
">>> LOS_ANGELES = ZoneInfo(\"America/Los_Angeles\")\n"
">>> dt_utc = datetime(2020, 11, 1, 8, tzinfo=timezone.utc)\n"
"\n"
">>> # Before the PDT -> PST transition\n"
">>> print(dt_utc.astimezone(LOS_ANGELES))\n"
"2020-11-01 01:00:00-07:00\n"
"\n"
">>> # After the PDT -> PST transition\n"
">>> print((dt_utc + timedelta(hours=1)).astimezone(LOS_ANGELES))\n"
"2020-11-01 01:00:00-08:00"
msgstr ""
">>> from datetime import timezone\n"
">>> LOS_ANGELES = ZoneInfo(\"America/Los_Angeles\")\n"
">>> dt_utc = datetime(2020, 11, 1, 8, tzinfo=timezone.utc)\n"
"\n"
">>> # 在 PDT -> PST 转换之前\n"
">>> print(dt_utc.astimezone(LOS_ANGELES))\n"
"2020-11-01 01:00:00-07:00\n"
"\n"
">>> # 在 PDT -> PST 转换之后\n"
">>> print((dt_utc + timedelta(hours=1)).astimezone(LOS_ANGELES))\n"
"2020-11-01 01:00:00-08:00"

#: ../../library/zoneinfo.rst:92
msgid "Data sources"
msgstr "数据源"

#: ../../library/zoneinfo.rst:94
msgid ""
"The ``zoneinfo`` module does not directly provide time zone data, and "
"instead pulls time zone information from the system time zone database or "
"the first-party PyPI package :pypi:`tzdata`, if available. Some systems, "
"including notably Windows systems, do not have an IANA database available, "
"and so for projects targeting cross-platform compatibility that require time"
" zone data, it is recommended to declare a dependency on tzdata. If neither "
"system data nor tzdata are available, all calls to :class:`ZoneInfo` will "
"raise :exc:`ZoneInfoNotFoundError`."
msgstr ""
"``zoneinfo`` 模块不直接提供时区数据，而是在可能的情况下从系统时区数据库或使用 PyPI 上的第一方包 :pypi:`tzdata` "
"来获取时区信息。 某些系统，特别是 Windows 系统也包括在内，并没有可用的 IANA "
"数据库，因此对于要保证获取时区信息的跨平台兼容性的项目，推荐针对 tzdata 声明依赖。 如果系统数据和 tzdata 均不可用，则所有对 "
":class:`ZoneInfo` 的调用都将引发 :exc:`ZoneInfoNotFoundError`。"

#: ../../library/zoneinfo.rst:106
msgid "Configuring the data sources"
msgstr "配置数据源"

#: ../../library/zoneinfo.rst:108
msgid ""
"When ``ZoneInfo(key)`` is called, the constructor first searches the "
"directories specified in :data:`TZPATH` for a file matching ``key``, and on "
"failure looks for a match in the tzdata package. This behavior can be "
"configured in three ways:"
msgstr ""
"当 ``ZoneInfo(key)`` 被调用时，此构造器首先会在 :data:`TZPATH` 所指定的目录下搜索匹配 ``key`` "
"的文件，失败时则会在 tzdata 包中查找匹配。 此行为可通过三种方式来配置:"

#: ../../library/zoneinfo.rst:113
msgid ""
"The default :data:`TZPATH` when not otherwise specified can be configured at"
" :ref:`compile time <zoneinfo_data_compile_time_config>`."
msgstr ""
"默认的 :data:`TZPATH` 未通过其他方式指定时可在 :ref:`编译时 "
"<zoneinfo_data_compile_time_config>` 进行配置。"

#: ../../library/zoneinfo.rst:115
msgid ""
":data:`TZPATH` can be configured using :ref:`an environment variable "
"<zoneinfo_data_environment_var>`."
msgstr ":data:`TZPATH` 可使用 :ref:`环境变量 <zoneinfo_data_environment_var>` 进行配置。"

#: ../../library/zoneinfo.rst:117
msgid ""
"At :ref:`runtime <zoneinfo_data_runtime_config>`, the search path can be "
"manipulated using the :func:`reset_tzpath` function."
msgstr ""
"在 :ref:`运行时 <zoneinfo_data_runtime_config>`，搜索路径可使用 :func:`reset_tzpath` "
"函数来修改。"

#: ../../library/zoneinfo.rst:123
msgid "Compile-time configuration"
msgstr "编译时配置"

#: ../../library/zoneinfo.rst:125
msgid ""
"The default :data:`TZPATH` includes several common deployment locations for "
"the time zone database (except on Windows, where there are no \"well-known\""
" locations for time zone data). On POSIX systems, downstream distributors "
"and those building Python from source who know where their system time zone "
"data is deployed may change the default time zone path by specifying the "
"compile-time option ``TZPATH`` (or, more likely, the :option:`configure flag"
" --with-tzpath <--with-tzpath>`), which should be a string delimited by "
":data:`os.pathsep`."
msgstr ""
"默认的 :data:`TZPATH` 包括一些时区数据库的通用部署位置（Windows 除外，该系统没有时区数据的“通用”位置）。 在 POSIX "
"系统中，下游分发者和从源码编译 Python 的开发者知道系统时区数据部署位置，它们可以通过指定编译时选项 ``TZPATH`` (或者更常见的是通过 "
":option:`配置旗标 --with-tzpath <--with-tzpath>`) 来改变默认的时区路径，该选项应当是一个由 "
":data:`os.pathsep` 分隔的字符串。"

#: ../../library/zoneinfo.rst:134
msgid ""
"On all platforms, the configured value is available as the ``TZPATH`` key in"
" :func:`sysconfig.get_config_var`."
msgstr "在所有平台上，配置值会在 :func:`sysconfig.get_config_var` 中以 ``TZPATH`` 键的形式提供。"

#: ../../library/zoneinfo.rst:140
msgid "Environment configuration"
msgstr "环境配置"

#: ../../library/zoneinfo.rst:142
msgid ""
"When initializing :data:`TZPATH` (either at import time or whenever "
":func:`reset_tzpath` is called with no arguments), the ``zoneinfo`` module "
"will use the environment variable ``PYTHONTZPATH``, if it exists, to set the"
" search path."
msgstr ""
"当初始化 :data:`TZPATH` 时（在导入时或不带参数调用 :func:`reset_tzpath` 时），``zoneinfo`` "
"模块将使用环境变量 ``PYTHONTZPATH``，如果变量存在则会设置搜索路径。"

#: ../../library/zoneinfo.rst:149
msgid ""
"This is an :data:`os.pathsep`-separated string containing the time zone "
"search path to use. It must consist of only absolute rather than relative "
"paths. Relative components specified in ``PYTHONTZPATH`` will not be used, "
"but otherwise the behavior when a relative path is specified is "
"implementation-defined; CPython will raise :exc:`InvalidTZPathWarning`, but "
"other implementations are free to silently ignore the erroneous component or"
" raise an exception."
msgstr ""
"这是一个以 :data:`os.pathsep` 分隔的字符串，其中包含要使用的时区搜索路径。 它必须仅由绝对路径而非相对路径组成。 在 "
"``PYTHONTZPATH`` 中指定的相对路径部分将不会被使用，但在其他情况下当指定相对路径时的行为该实现是有定义的；CPython 将引发 "
":exc:`InvalidTZPathWarning`，而其他实现可自由地忽略错误部分或是引发异常。"

#: ../../library/zoneinfo.rst:157
msgid ""
"To set the system to ignore the system data and use the tzdata package "
"instead, set ``PYTHONTZPATH=\"\"``."
msgstr "要设置让系统忽略系统数据并改用 tzdata 包，请设置 ``PYTHONTZPATH=\"\"``。"

#: ../../library/zoneinfo.rst:163
msgid "Runtime configuration"
msgstr "运行时配置"

#: ../../library/zoneinfo.rst:165
msgid ""
"The TZ search path can also be configured at runtime using the "
":func:`reset_tzpath` function. This is generally not an advisable operation,"
" though it is reasonable to use it in test functions that require the use of"
" a specific time zone path (or require disabling access to the system time "
"zones)."
msgstr ""
"TZ 搜索路径也可在运行时使用 :func:`reset_tzpath` 函数来配置。 "
"通常并不建议如此操作，不过在需要使用指定时区路径（或者需要禁止访问系统时区）的测试函数中使用它则是合理的。"

#: ../../library/zoneinfo.rst:172
msgid "The ``ZoneInfo`` class"
msgstr "``ZoneInfo`` 类"

#: ../../library/zoneinfo.rst:176
msgid ""
"A concrete :class:`datetime.tzinfo` subclass that represents an IANA time "
"zone specified by the string ``key``. Calls to the primary constructor will "
"always return objects that compare identically; put another way, barring "
"cache invalidation via :meth:`ZoneInfo.clear_cache`, for all values of "
"``key``, the following assertion will always be true:"
msgstr ""
"一个具体的 :class:`datetime.tzinfo` 子类，它代表一个由字符串 ``key`` 所指定的 IANA 时区。 "
"对主构造器的调用将总是返回可进行标识比较的对象；但是另一种方式，对所有的 ``key`` 值通过 "
":meth:`ZoneInfo.clear_cache` 禁止缓存失效，对以下断言将总是为真值:"

#: ../../library/zoneinfo.rst:182
msgid ""
"a = ZoneInfo(key)\n"
"b = ZoneInfo(key)\n"
"assert a is b"
msgstr ""
"a = ZoneInfo(key)\n"
"b = ZoneInfo(key)\n"
"assert a is b"

#: ../../library/zoneinfo.rst:188
msgid ""
"``key`` must be in the form of a relative, normalized POSIX path, with no "
"up-level references. The constructor will raise :exc:`ValueError` if a non-"
"conforming key is passed."
msgstr ""
"``key`` 必须采用相对的标准化 POSIX 路径的形式，其中没有对上一层级的引用。 如果传入了不合要求的键则构造器将引发 "
":exc:`ValueError`。"

#: ../../library/zoneinfo.rst:192
msgid ""
"If no file matching ``key`` is found, the constructor will raise "
":exc:`ZoneInfoNotFoundError`."
msgstr "如果没有找到匹配 ``key`` 的文件，构造器将引发 :exc:`ZoneInfoNotFoundError`。"

#: ../../library/zoneinfo.rst:196
msgid "The ``ZoneInfo`` class has two alternate constructors:"
msgstr "``ZoneInfo`` 类具有两个替代构造器:"

#: ../../library/zoneinfo.rst:200
msgid ""
"Constructs a ``ZoneInfo`` object from a file-like object returning bytes "
"(e.g. a file opened in binary mode or an :class:`io.BytesIO` object). Unlike"
" the primary constructor, this always constructs a new object."
msgstr ""
"基于一个返回字节串的文件型对象（例如一个以二进制模式打开的文件或是一个 :class:`io.BytesIO` 对象）构造 ``ZoneInfo`` "
"对象。 不同于主构造器，此构造器总是会构造一个新对象。"

#: ../../library/zoneinfo.rst:204
msgid ""
"The ``key`` parameter sets the name of the zone for the purposes of "
":py:meth:`~object.__str__` and :py:meth:`~object.__repr__`."
msgstr ""
"``key`` 形参设置时区名称以供 :py:meth:`~object.__str__` 和 :py:meth:`~object.__repr__` "
"使用。"

#: ../../library/zoneinfo.rst:207
msgid ""
"Objects created via this constructor cannot be pickled (see `pickling`_)."
msgstr "由此构造器创建的对象不可被封存 (参见 `pickling`_)。"

#: ../../library/zoneinfo.rst:211
msgid ""
"An alternate constructor that bypasses the constructor's cache. It is "
"identical to the primary constructor, but returns a new object on each call."
" This is most likely to be useful for testing or demonstration purposes, but"
" it can also be used to create a system with a different cache invalidation "
"strategy."
msgstr ""
"一个绕过构造器缓存的替代构造器。 它与主构造器很相似，但每次调用都会返回一个新对象。 "
"此构造器在进行测试或演示时最为适用，但它也可以被用来创建具有不同缓存失效策略的系统。"

#: ../../library/zoneinfo.rst:217
msgid ""
"Objects created via this constructor will also bypass the cache of a "
"deserializing process when unpickled."
msgstr "由此构造器创建的对象在被解封时也会绕过反序列化进程的缓存。"

#: ../../library/zoneinfo.rst:224
msgid ""
"Using this constructor may change the semantics of your datetimes in "
"surprising ways, only use it if you know that you need to."
msgstr "使用此构造器可以会以令人惊讶的方式改变日期时间对象的语义，只有在你确定你的需求时才使用它。"

#: ../../library/zoneinfo.rst:227
msgid "The following class methods are also available:"
msgstr "也可以使用以下的类方法:"

#: ../../library/zoneinfo.rst:231
msgid ""
"A method for invalidating the cache on the ``ZoneInfo`` class. If no "
"arguments are passed, all caches are invalidated and the next call to the "
"primary constructor for each key will return a new instance."
msgstr "一个可在 ``ZoneInfo`` 类上禁用缓存的方法。 如果不传入参数，则会禁用所有缓存并且下次对每个键调用主构造器将返回一个新实例。"

#: ../../library/zoneinfo.rst:235
msgid ""
"If an iterable of key names is passed to the ``only_keys`` parameter, only "
"the specified keys will be removed from the cache. Keys passed to "
"``only_keys`` but not found in the cache are ignored."
msgstr ""
"如果将一个键名称的可迭代对象传给 ``only_keys`` 形参，则将只有指定的键会被从缓存中移除。 传给 ``only_keys`` "
"但在缓存中找不到的键会被忽略。"

#: ../../library/zoneinfo.rst:243
msgid ""
"Invoking this function may change the semantics of datetimes using "
"``ZoneInfo`` in surprising ways; this modifies module state and thus may "
"have wide-ranging effects. Only use it if you know that you need to."
msgstr ""
"唤起此函数可能会以令人惊讶的方式改变使用 ``ZoneInfo`` 的日期时间对象的语义；这会修改模块的状态并因此可能产生大范围的影响。 "
"你只有在确定有必要时才可以使用它。"

#: ../../library/zoneinfo.rst:248
msgid "The class has one attribute:"
msgstr "该类具有一个属性:"

#: ../../library/zoneinfo.rst:252
msgid ""
"This is a read-only :term:`attribute` that returns the value of ``key`` "
"passed to the constructor, which should be a lookup key in the IANA time "
"zone database (e.g. ``America/New_York``, ``Europe/Paris`` or "
"``Asia/Tokyo``)."
msgstr ""
"这是一个只读的 :term:`attribute`，它返回传给构造器的 ``key`` 的值，该值应为一个 IANA 时区数据库的查找键 (例如 "
"``America/New_York``, ``Europe/Paris`` 或 ``Asia/Tokyo``)。"

#: ../../library/zoneinfo.rst:257
msgid ""
"For zones constructed from file without specifying a ``key`` parameter, this"
" will be set to ``None``."
msgstr "对于不指定 ``key`` 形参而是基于文件构造时区，该属性将设为 ``None``。"

#: ../../library/zoneinfo.rst:262
msgid ""
"Although it is a somewhat common practice to expose these to end users, "
"these values are designed to be primary keys for representing the relevant "
"zones and not necessarily user-facing elements.  Projects like CLDR (the "
"Unicode Common Locale Data Repository) can be used to get more user-friendly"
" strings from these keys."
msgstr ""
"尽管将这些信息暴露给最终用户是一种比较普通的做法，但是这些值被设计作为代表相关时区的主键而不一定是面向用户的元素。 CLDR (Unicode "
"通用区域数据存储库) 之类的项目可被用来根据这些键获取更为用户友好的字符串。"

#: ../../library/zoneinfo.rst:269
msgid "String representations"
msgstr "字符串表示"

#: ../../library/zoneinfo.rst:271
msgid ""
"The string representation returned when calling :py:class:`str` on a "
":class:`ZoneInfo` object defaults to using the :attr:`ZoneInfo.key` "
"attribute (see the note on usage in the attribute documentation)::"
msgstr ""
"当在 :class:`ZoneInfo` 对象上调用 :py:class:`str` 时返回的字符串表示默认会使用 "
":attr:`ZoneInfo.key` 属性（参见该属性文档中的用法注释）::"

#: ../../library/zoneinfo.rst:275
msgid ""
">>> zone = ZoneInfo(\"Pacific/Kwajalein\")\n"
">>> str(zone)\n"
"'Pacific/Kwajalein'\n"
"\n"
">>> dt = datetime(2020, 4, 1, 3, 15, tzinfo=zone)\n"
">>> f\"{dt.isoformat()} [{dt.tzinfo}]\"\n"
"'2020-04-01T03:15:00+12:00 [Pacific/Kwajalein]'"
msgstr ""
">>> zone = ZoneInfo(\"Pacific/Kwajalein\")\n"
">>> str(zone)\n"
"'Pacific/Kwajalein'\n"
"\n"
">>> dt = datetime(2020, 4, 1, 3, 15, tzinfo=zone)\n"
">>> f\"{dt.isoformat()} [{dt.tzinfo}]\"\n"
"'2020-04-01T03:15:00+12:00 [Pacific/Kwajalein]'"

#: ../../library/zoneinfo.rst:283
msgid ""
"For objects constructed from a file without specifying a ``key`` parameter, "
"``str`` falls back to calling :func:`repr`. ``ZoneInfo``'s ``repr`` is "
"implementation-defined and not necessarily stable between versions, but it "
"is guaranteed not to be a valid ``ZoneInfo`` key."
msgstr ""
"对于基于文件而非指定 ``key`` 形参所构建的对象，``str`` 会回退为调用 :func:`repr`。 ``ZoneInfo`` 的 "
"``repr`` 是由具体实现定义的并且不一定会在不同版本间保持稳定，但它保证不会是一个有效的 ``ZoneInfo`` 键。"

#: ../../library/zoneinfo.rst:291
msgid "Pickle serialization"
msgstr "封存序列化"

#: ../../library/zoneinfo.rst:293
msgid ""
"Rather than serializing all transition data, ``ZoneInfo`` objects are "
"serialized by key, and ``ZoneInfo`` objects constructed from files (even "
"those with a value for ``key`` specified) cannot be pickled."
msgstr ""
"``ZoneInfo`` 对象的序列化是基于键的，而不是序列化所有过渡数据，并且基于文件构造的 ``ZoneInfo`` 对象（即使是指定了 "
"``key`` 值的对象）不能被封存。"

#: ../../library/zoneinfo.rst:297
msgid "The behavior of a ``ZoneInfo`` file depends on how it was constructed:"
msgstr "``ZoneInfo`` 文件的行为取决于它的构造方式:"

#: ../../library/zoneinfo.rst:299
msgid ""
"``ZoneInfo(key)``: When constructed with the primary constructor, a "
"``ZoneInfo`` object is serialized by key, and when deserialized, the "
"deserializing process uses the primary and thus it is expected that these "
"are expected to be the same object as other references to the same time "
"zone.  For example, if ``europe_berlin_pkl`` is a string containing a pickle"
" constructed from ``ZoneInfo(\"Europe/Berlin\")``, one would expect the "
"following behavior:"
msgstr ""
"``ZoneInfo(key)``: 当使用主构造器构造时，会基于键序列化一个 ``ZoneInfo`` "
"对象，而当反序列化时，反序列化过程会使用主构造器，因此预期它们与其他对同一时区的引用会是同一对象。 例如，如果 "
"``europe_berlin_pkl`` 是一个包含基于 ``ZoneInfo(\"Europe/Berlin\")`` "
"构建的封存数据的字符串，你可以预期出现以下的行为:"

#: ../../library/zoneinfo.rst:307
msgid ""
">>> a = ZoneInfo(\"Europe/Berlin\")\n"
">>> b = pickle.loads(europe_berlin_pkl)\n"
">>> a is b\n"
"True"
msgstr ""
">>> a = ZoneInfo(\"Europe/Berlin\")\n"
">>> b = pickle.loads(europe_berlin_pkl)\n"
">>> a is b\n"
"True"

#: ../../library/zoneinfo.rst:314
msgid ""
"``ZoneInfo.no_cache(key)``: When constructed from the cache-bypassing "
"constructor, the ``ZoneInfo`` object is also serialized by key, but when "
"deserialized, the deserializing process uses the cache bypassing "
"constructor. If ``europe_berlin_pkl_nc`` is a string containing a pickle "
"constructed from ``ZoneInfo.no_cache(\"Europe/Berlin\")``, one would expect "
"the following behavior:"
msgstr ""
"``ZoneInfo.no_cache(key)``: 当通过绕过缓存的构造器构造时，``ZoneInfo`` "
"对象也会基于键序列化，但当反序列化时，反序列化过程会使用绕过缓存的构造器。 如果 ``europe_berlin_pkl_nc`` 是一个包含基于 "
"``ZoneInfo.no_cache(\"Europe/Berlin\")`` 构造的封存数据的字符串，你可以预期出现以下的行为:"

#: ../../library/zoneinfo.rst:321
msgid ""
">>> a = ZoneInfo(\"Europe/Berlin\")\n"
">>> b = pickle.loads(europe_berlin_pkl_nc)\n"
">>> a is b\n"
"False"
msgstr ""
">>> a = ZoneInfo(\"Europe/Berlin\")\n"
">>> b = pickle.loads(europe_berlin_pkl_nc)\n"
">>> a is b\n"
"False"

#: ../../library/zoneinfo.rst:328
msgid ""
"``ZoneInfo.from_file(file_obj, /, key=None)``: When constructed from a file,"
" the ``ZoneInfo`` object raises an exception on pickling. If an end user "
"wants to pickle a ``ZoneInfo`` constructed from a file, it is recommended "
"that they use a wrapper type or a custom serialization function: either "
"serializing by key or storing the contents of the file object and "
"serializing that."
msgstr ""
"``ZoneInfo.from_file(file_obj, /, key=None)``: 当通过文件构造时，``ZoneInfo`` "
"对象会在封存时引发异常。 如果最终用户想要封存通过文件构造的 "
"``ZoneInfo``，则推荐他们使用包装类型或自定义序列化函数：或者基于键序列化，或者存储文件对象的内容并将其序列化。"

#: ../../library/zoneinfo.rst:334
msgid ""
"This method of serialization requires that the time zone data for the "
"required key be available on both the serializing and deserializing side, "
"similar to the way that references to classes and functions are expected to "
"exist in both the serializing and deserializing environments. It also means "
"that no guarantees are made about the consistency of results when unpickling"
" a ``ZoneInfo`` pickled in an environment with a different version of the "
"time zone data."
msgstr ""
"该序列化方法要求所需键的时区数据在序列化和反序列化中均可用，类似于在序列化和反序列化环境中都预期存在对类和函数的引用的方式。 "
"这还意味着在具有不同时区数据版本的环境中当解封被封存的 ``ZoneInfo`` 时并不会保证结果的一致性。"

#: ../../library/zoneinfo.rst:342
msgid "Functions"
msgstr "函数"

#: ../../library/zoneinfo.rst:346
msgid ""
"Get a set containing all the valid keys for IANA time zones available "
"anywhere on the time zone path. This is recalculated on every call to the "
"function."
msgstr "获取一个包含可用 IANA 时区的在时区路径的任何位置均可用的全部有效键的集合。 每次调用该函数时都会重新计算。"

#: ../../library/zoneinfo.rst:350
msgid ""
"This function only includes canonical zone names and does not include "
"\"special\" zones such as those under the ``posix/`` and ``right/`` "
"directories, or the ``posixrules`` zone."
msgstr ""
"此函数仅包括规范时区名称而不包括“特殊”时区如位于 ``posix/`` 和 ``right/`` 目录下的时区或 ``posixrules`` 时区。"

#: ../../library/zoneinfo.rst:356
msgid ""
"This function may open a large number of files, as the best way to determine"
" if a file on the time zone path is a valid time zone is to read the \"magic"
" string\" at the beginning."
msgstr "此函数可能会打开大量的文件，因为确定时区路径上某个文件是否为有效时区的最佳方式是读取开头位置的“魔术字符串”。"

#: ../../library/zoneinfo.rst:362
msgid ""
"These values are not designed to be exposed to end-users; for user facing "
"elements, applications should use something like CLDR (the Unicode Common "
"Locale Data Repository) to get more user-friendly strings. See also the "
"cautionary note on :attr:`ZoneInfo.key`."
msgstr ""
"这些值并不被设计用来对外公开给最终用户；对于面向用户的元素，应用程序应当使用 CLDR (Unicode 通用区域数据存储库) "
"之类来获取更为用户友好的字符串。 另请参阅 :attr:`ZoneInfo.key` 中的提示性说明。"

#: ../../library/zoneinfo.rst:369
msgid ""
"Sets or resets the time zone search path (:data:`TZPATH`) for the module. "
"When called with no arguments, :data:`TZPATH` is set to the default value."
msgstr "设置或重置模块的时区搜索路径 (:data:`TZPATH`)。 当不带参数调用时，:data:`TZPATH` 会被设为默认值。"

#: ../../library/zoneinfo.rst:372
msgid ""
"Calling ``reset_tzpath`` will not invalidate the :class:`ZoneInfo` cache, "
"and so calls to the primary ``ZoneInfo`` constructor will only use the new "
"``TZPATH`` in the case of a cache miss."
msgstr ""
"调用 ``reset_tzpath`` 将不会使 :class:`ZoneInfo` 缓存失效，因而在缓存未命中的情况下对主 ``ZoneInfo`` "
"构造器的调用将只使用新的 ``TZPATH``。"

#: ../../library/zoneinfo.rst:376
msgid ""
"The ``to`` parameter must be a :term:`sequence` of strings or "
":class:`os.PathLike` and not a string, all of which must be absolute paths. "
":exc:`ValueError` will be raised if something other than an absolute path is"
" passed."
msgstr ""
"``to`` 形参必须是由字符串或 :class:`os.PathLike` 组成的 :term:`sequence` "
"或而不是字符串，它们必须都是绝对路径。 如果所传入的不是绝对路径则将引发 :exc:`ValueError`。"

#: ../../library/zoneinfo.rst:382
msgid "Globals"
msgstr "全局变量"

#: ../../library/zoneinfo.rst:386
msgid ""
"A read-only sequence representing the time zone search path -- when "
"constructing a ``ZoneInfo`` from a key, the key is joined to each entry in "
"the ``TZPATH``, and the first file found is used."
msgstr ""
"一个表示时区搜索路径的只读序列 -- 当通过键构造 ``ZoneInfo`` 时，键会与 ``TZPATH`` "
"中的每个条目进行合并，并使用所找到的第一个文件。"

#: ../../library/zoneinfo.rst:390
msgid ""
"``TZPATH`` may contain only absolute paths, never relative paths, regardless"
" of how it is configured."
msgstr "``TZPATH`` 可以只包含绝对路径，绝不包含相对路径，无论它是如何配置的。"

#: ../../library/zoneinfo.rst:393
msgid ""
"The object that ``zoneinfo.TZPATH`` points to may change in response to a "
"call to :func:`reset_tzpath`, so it is recommended to use "
"``zoneinfo.TZPATH`` rather than importing ``TZPATH`` from ``zoneinfo`` or "
"assigning a long-lived variable to ``zoneinfo.TZPATH``."
msgstr ""
"``zoneinfo.TZPATH`` 所指向的对象可能随着对 :func:`reset_tzpath` 的调用而改变，因此推荐使用 "
"``zoneinfo.TZPATH`` 而不是从 ``zoneinfo`` 导入 ``TZPATH`` 或是将 ``zoneinfo.TZPATH`` "
"赋值给一个长期变量。"

#: ../../library/zoneinfo.rst:398
msgid ""
"For more information on configuring the time zone search path, see "
":ref:`zoneinfo_data_configuration`."
msgstr "有关配置时区搜索路径的更多信息，请参阅 :ref:`zoneinfo_data_configuration`。"

#: ../../library/zoneinfo.rst:402
msgid "Exceptions and warnings"
msgstr "异常与警告"

#: ../../library/zoneinfo.rst:406
msgid ""
"Raised when construction of a :class:`ZoneInfo` object fails because the "
"specified key could not be found on the system. This is a subclass of "
":exc:`KeyError`."
msgstr ""
"当一个 :class:`ZoneInfo` 对象的构造由于在系统中找不到指定的键而失败时引发。 这是 :exc:`KeyError` 的一个子类。"

#: ../../library/zoneinfo.rst:412
msgid ""
"Raised when :envvar:`PYTHONTZPATH` contains an invalid component that will "
"be filtered out, such as a relative path."
msgstr "当 :envvar:`PYTHONTZPATH` 包含将被过滤掉的无效组件，例如一个相对路径时引发。"
