# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.etree.elementtree.rst:2
msgid ":mod:`xml.etree.ElementTree` --- The ElementTree XML API"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:9
msgid "**Source code:** :source:`Lib/xml/etree/ElementTree.py`"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:13
msgid ""
"The :mod:`xml.etree.ElementTree` module implements a simple and efficient "
"API for parsing and creating XML data."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:16
msgid "This module will use a fast implementation whenever available."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:19
msgid "The :mod:`!xml.etree.cElementTree` module is deprecated."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:25
msgid ""
"The :mod:`xml.etree.ElementTree` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:30
msgid "Tutorial"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:32
msgid ""
"This is a short tutorial for using :mod:`xml.etree.ElementTree` (``ET`` in "
"short).  The goal is to demonstrate some of the building blocks and basic "
"concepts of the module."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:37
msgid "XML tree and elements"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:39
msgid ""
"XML is an inherently hierarchical data format, and the most natural way to "
"represent it is with a tree.  ``ET`` has two classes for this purpose - "
":class:`ElementTree` represents the whole XML document as a tree, and "
":class:`Element` represents a single node in this tree.  Interactions with "
"the whole document (reading and writing to/from files) are usually done on "
"the :class:`ElementTree` level.  Interactions with a single XML element and "
"its sub-elements are done on the :class:`Element` level."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:50
msgid "Parsing XML"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:52
msgid ""
"We'll be using the fictive :file:`country_data.xml` XML document as the "
"sample data for this section:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:80
msgid "We can import this data by reading from a file::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:86
msgid "Or directly from a string::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:90
msgid ""
":func:`fromstring` parses XML from a string directly into an "
":class:`Element`, which is the root element of the parsed tree.  Other "
"parsing functions may create an :class:`ElementTree`.  Check the "
"documentation to be sure."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:94
msgid ""
"As an :class:`Element`, ``root`` has a tag and a dictionary of attributes::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:101
msgid "It also has children nodes over which we can iterate::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:110
msgid "Children are nested, and we can access specific child nodes by index::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:118
msgid ""
"Not all elements of the XML input will end up as elements of the parsed "
"tree. Currently, this module skips over any XML comments, processing "
"instructions, and document type declarations in the input. Nevertheless, "
"trees built using this module's API rather than parsing from XML text can "
"have comments and processing instructions in them; they will be included "
"when generating XML output. A document type declaration may be accessed by "
"passing a custom :class:`TreeBuilder` instance to the :class:`XMLParser` "
"constructor."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:132
msgid "Pull API for non-blocking parsing"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:134
msgid ""
"Most parsing functions provided by this module require the whole document to"
" be read at once before returning any result.  It is possible to use an "
":class:`XMLParser` and feed data into it incrementally, but it is a push API"
" that calls methods on a callback target, which is too low-level and "
"inconvenient for most needs.  Sometimes what the user really wants is to be "
"able to parse XML incrementally, without blocking operations, while enjoying"
" the convenience of fully constructed :class:`Element` objects."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:142
msgid ""
"The most powerful tool for doing this is :class:`XMLPullParser`.  It does "
"not require a blocking read to obtain the XML data, and is instead fed with "
"data incrementally with :meth:`XMLPullParser.feed` calls.  To get the parsed"
" XML elements, call :meth:`XMLPullParser.read_events`.  Here is an example::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:159
msgid ""
"The obvious use case is applications that operate in a non-blocking fashion "
"where the XML data is being received from a socket or read incrementally "
"from some storage device.  In such cases, blocking reads are unacceptable."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:163
msgid ""
"Because it's so flexible, :class:`XMLPullParser` can be inconvenient to use "
"for simpler use-cases.  If you don't mind your application blocking on "
"reading XML data but would still like to have incremental parsing "
"capabilities, take a look at :func:`iterparse`.  It can be useful when "
"you're reading a large XML document and don't want to hold it wholly in "
"memory."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:169
msgid ""
"Where *immediate* feedback through events is wanted, calling method "
":meth:`XMLPullParser.flush` can help reduce delay; please make sure to study"
" the related security notes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:175
msgid "Finding interesting elements"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:177
msgid ""
":class:`Element` has some useful methods that help iterate recursively over "
"all the sub-tree below it (its children, their children, and so on).  For "
"example, :meth:`Element.iter`::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:190
msgid ""
":meth:`Element.findall` finds only elements with a tag which are direct "
"children of the current element.  :meth:`Element.find` finds the *first* "
"child with a particular tag, and :attr:`Element.text` accesses the element's"
" text content.  :meth:`Element.get` accesses the element's attributes::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:204
msgid ""
"More sophisticated specification of which elements to look for is possible "
"by using :ref:`XPath <elementtree-xpath>`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:208
msgid "Modifying an XML File"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:210
msgid ""
":class:`ElementTree` provides a simple way to build XML documents and write "
"them to files. The :meth:`ElementTree.write` method serves this purpose."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:213
msgid ""
"Once created, an :class:`Element` object may be manipulated by directly "
"changing its fields (such as :attr:`Element.text`), adding and modifying "
"attributes (:meth:`Element.set` method), as well as adding new children (for"
" example with :meth:`Element.append`)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:218
msgid ""
"Let's say we want to add one to each country's rank, and add an ``updated`` "
"attribute to the rank element::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:228
#: ../../library/xml.etree.elementtree.rst:272
msgid "Our XML now looks like this:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:256
msgid ""
"We can remove elements using :meth:`Element.remove`.  Let's say we want to "
"remove all countries with a rank higher than 50::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:267
msgid ""
"Note that concurrent modification while iterating can lead to problems, just"
" like when iterating and modifying Python lists or dicts. Therefore, the "
"example first collects all matching elements with ``root.findall()``, and "
"only then iterates over the list of matches."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:294
msgid "Building XML documents"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:296
msgid ""
"The :func:`SubElement` function also provides a convenient way to create new"
" sub-elements for a given element::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:307
msgid "Parsing XML with Namespaces"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:309
msgid ""
"If the XML input has `namespaces "
"<https://en.wikipedia.org/wiki/XML_namespace>`__, tags and attributes with "
"prefixes in the form ``prefix:sometag`` get expanded to ``{uri}sometag`` "
"where the *prefix* is replaced by the full *URI*. Also, if there is a "
"`default namespace <https://www.w3.org/TR/xml-names/#defaulting>`__, that "
"full URI gets prepended to all of the non-prefixed tags."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:317
msgid ""
"Here is an XML example that incorporates two namespaces, one with the prefix"
" \"fictional\" and the other serving as the default namespace:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:338
msgid ""
"One way to search and explore this XML example is to manually add the URI to"
" every tag or attribute in the xpath of a :meth:`~Element.find` or "
":meth:`~Element.findall`::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:349
msgid ""
"A better way to search the namespaced XML example is to create a dictionary "
"with your own prefixes and use those in the search functions::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:361
msgid "These two approaches both output::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:375
msgid "XPath support"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:377
msgid ""
"This module provides limited support for `XPath expressions "
"<https://www.w3.org/TR/xpath>`_ for locating elements in a tree.  The goal "
"is to support a small subset of the abbreviated syntax; a full XPath engine "
"is outside the scope of the module."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:383
#: ../../library/xml.etree.elementtree.rst:777
msgid "Example"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:385
msgid ""
"Here's an example that demonstrates some of the XPath capabilities of the "
"module.  We'll be using the ``countrydata`` XML document from the "
":ref:`Parsing XML <elementtree-parsing-xml>` section::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:409
msgid ""
"For XML with namespaces, use the usual qualified ``{namespace}tag`` "
"notation::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:416
msgid "Supported XPath syntax"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:421
msgid "Syntax"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:421
msgid "Meaning"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:423
msgid "``tag``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:423
msgid ""
"Selects all child elements with the given tag. For example, ``spam`` selects"
" all child elements named ``spam``, and ``spam/egg`` selects all "
"grandchildren named ``egg`` in all children named ``spam``.  "
"``{namespace}*`` selects all tags in the given namespace, ``{*}spam`` "
"selects tags named ``spam`` in any (or no) namespace, and ``{}*`` only "
"selects tags that are not in a namespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:432
msgid "Support for star-wildcards was added."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:435
msgid "``*``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:435
msgid ""
"Selects all child elements, including comments and processing instructions."
"  For example, ``*/egg`` selects all grandchildren named ``egg``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:439
msgid "``.``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:439
msgid ""
"Selects the current node.  This is mostly useful at the beginning of the "
"path, to indicate that it's a relative path."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:443
msgid "``//``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:443
msgid ""
"Selects all subelements, on all levels beneath the current  element.  For "
"example, ``.//egg`` selects all ``egg`` elements in the entire tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:447
msgid "``..``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:447
msgid ""
"Selects the parent element.  Returns ``None`` if the path attempts to reach "
"the ancestors of the start element (the element ``find`` was called on)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:451
msgid "``[@attrib]``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:451
msgid "Selects all elements that have the given attribute."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:453
msgid "``[@attrib='value']``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:453
msgid ""
"Selects all elements for which the given attribute has the given value.  The"
" value cannot contain quotes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:457
msgid "``[@attrib!='value']``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:457
msgid ""
"Selects all elements for which the given attribute does not have the given "
"value. The value cannot contain quotes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:463
msgid "``[tag]``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:463
msgid ""
"Selects all elements that have a child named ``tag``.  Only immediate "
"children are supported."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:466
msgid "``[.='text']``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:466
msgid ""
"Selects all elements whose complete text content, including descendants, "
"equals the given ``text``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:471
msgid "``[.!='text']``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:471
msgid ""
"Selects all elements whose complete text content, including descendants, "
"does not equal the given ``text``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:477
msgid "``[tag='text']``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:477
msgid ""
"Selects all elements that have a child named ``tag`` whose complete text "
"content, including descendants, equals the given ``text``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:481
msgid "``[tag!='text']``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:481
msgid ""
"Selects all elements that have a child named ``tag`` whose complete text "
"content, including descendants, does not equal the given ``text``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:487
msgid "``[position]``"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:487
msgid ""
"Selects all elements that are located at the given position.  The position "
"can be either an integer (1 is the first position), the expression "
"``last()`` (for the last position), or a position relative to the last "
"position (e.g. ``last()-1``)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:494
msgid ""
"Predicates (expressions within square brackets) must be preceded by a tag "
"name, an asterisk, or another predicate.  ``position`` predicates must be "
"preceded by a tag name."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:499
#: ../../library/xml.etree.elementtree.rst:829
msgid "Reference"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:504
#: ../../library/xml.etree.elementtree.rst:834
msgid "Functions"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:508
msgid ""
"`C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ transformation function."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:510
msgid ""
"Canonicalization is a way to normalise XML output in a way that allows byte-"
"by-byte comparisons and digital signatures.  It reduced the freedom that XML"
" serializers have and instead generates a more constrained XML "
"representation.  The main restrictions regard the placement of namespace "
"declarations, the ordering of attributes, and ignorable whitespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:516
msgid ""
"This function takes an XML data string (*xml_data*) or a file path or file-"
"like object (*from_file*) as input, converts it to the canonical form, and "
"writes it out using the *out* file(-like) object, if provided, or returns it"
" as a text string if not.  The output file receives text, not bytes.  It "
"should therefore be opened in text mode with ``utf-8`` encoding."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:523
msgid "Typical uses::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:534
msgid "The configuration *options* are as follows:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:536
msgid "*with_comments*: set to true to include comments (default: false)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:537
msgid ""
"*strip_text*: set to true to strip whitespace before and after text content"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:538
#: ../../library/xml.etree.elementtree.rst:540
msgid "(default: false)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:539
msgid ""
"*rewrite_prefixes*: set to true to replace namespace prefixes by "
"\"n{number}\""
msgstr ""

#: ../../library/xml.etree.elementtree.rst:541
msgid "*qname_aware_tags*: a set of qname aware tag names in which prefixes"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:542
#: ../../library/xml.etree.elementtree.rst:544
msgid "should be replaced in text content (default: empty)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:543
msgid ""
"*qname_aware_attrs*: a set of qname aware attribute names in which prefixes"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:545
msgid ""
"*exclude_attrs*: a set of attribute names that should not be serialised"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:546
msgid "*exclude_tags*: a set of tag names that should not be serialised"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:548
msgid ""
"In the option list above, \"a set\" refers to any collection or iterable of "
"strings, no ordering is expected."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:556
msgid ""
"Comment element factory.  This factory function creates a special element "
"that will be serialized as an XML comment by the standard serializer.  The "
"comment string can be either a bytestring or a Unicode string.  *text* is a "
"string containing the comment string.  Returns an element instance "
"representing a comment."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:562
msgid ""
"Note that :class:`XMLParser` skips over comments in the input instead of "
"creating comment objects for them. An :class:`ElementTree` will only contain"
" comment nodes if they have been inserted into to the tree using one of the "
":class:`Element` methods."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:569
msgid ""
"Writes an element tree or element structure to sys.stdout.  This function "
"should be used for debugging only."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:572
msgid ""
"The exact output format is implementation dependent.  In this version, it's "
"written as an ordinary XML file."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:575
msgid "*elem* is an element tree or an individual element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:577
msgid ""
"The :func:`dump` function now preserves the attribute order specified by the"
" user."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:584
msgid ""
"Parses an XML section from a string constant.  Same as :func:`XML`.  *text* "
"is a string containing XML data.  *parser* is an optional parser instance. "
"If not given, the standard :class:`XMLParser` parser is used. Returns an "
":class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:592
msgid ""
"Parses an XML document from a sequence of string fragments.  *sequence* is a"
" list or other sequence containing XML data fragments.  *parser* is an "
"optional parser instance.  If not given, the standard :class:`XMLParser` "
"parser is used.  Returns an :class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:602
msgid ""
"Appends whitespace to the subtree to indent the tree visually. This can be "
"used to generate pretty-printed XML output. *tree* can be an Element or "
"ElementTree.  *space* is the whitespace string that will be inserted for "
"each indentation level, two space characters by default.  For indenting "
"partial subtrees inside of an already indented tree, pass the initial "
"indentation level as *level*."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:614
msgid ""
"Check if an object appears to be a valid element object.  *element* is an "
"element instance.  Return ``True`` if this is an element object."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:620
msgid ""
"Parses an XML section into an element tree incrementally, and reports what's"
" going on to the user.  *source* is a filename or :term:`file object` "
"containing XML data.  *events* is a sequence of events to report back.  The "
"supported events are the strings ``\"start\"``, ``\"end\"``, "
"``\"comment\"``, ``\"pi\"``, ``\"start-ns\"`` and ``\"end-ns\"`` (the \"ns\""
" events are used to get detailed namespace information).  If *events* is "
"omitted, only ``\"end\"`` events are reported. *parser* is an optional "
"parser instance.  If not given, the standard :class:`XMLParser` parser is "
"used.  *parser* must be a subclass of :class:`XMLParser` and can only use "
"the default :class:`TreeBuilder` as a target. Returns an :term:`iterator` "
"providing ``(event, elem)`` pairs; it has a ``root`` attribute that "
"references the root element of the resulting XML tree once *source* is fully"
" read."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:634
msgid ""
"Note that while :func:`iterparse` builds the tree incrementally, it issues "
"blocking reads on *source* (or the file it names).  As such, it's unsuitable"
" for applications where blocking reads can't be made.  For fully non-"
"blocking parsing, see :class:`XMLPullParser`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:641
msgid ""
":func:`iterparse` only guarantees that it has seen the \">\" character of a "
"starting tag when it emits a \"start\" event, so the attributes are defined,"
" but the contents of the text and tail attributes are undefined at that "
"point.  The same applies to the element children; they may or may not be "
"present."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:647
#: ../../library/xml.etree.elementtree.rst:1516
msgid "If you need a fully populated element, look for \"end\" events instead."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:649
msgid "The *parser* argument."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:652
#: ../../library/xml.etree.elementtree.rst:1520
msgid "The ``comment`` and ``pi`` events were added."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:658
msgid ""
"Parses an XML section into an element tree.  *source* is a filename or file "
"object containing XML data.  *parser* is an optional parser instance.  If "
"not given, the standard :class:`XMLParser` parser is used.  Returns an "
":class:`ElementTree` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:666
msgid ""
"PI element factory.  This factory function creates a special element that "
"will be serialized as an XML processing instruction.  *target* is a string "
"containing the PI target.  *text* is a string containing the PI contents, if"
" given.  Returns an element instance, representing a processing instruction."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:671
msgid ""
"Note that :class:`XMLParser` skips over processing instructions in the input"
" instead of creating PI objects for them. An :class:`ElementTree` will only "
"contain processing instruction nodes if they have been inserted into to the "
"tree using one of the :class:`Element` methods."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:679
msgid ""
"Registers a namespace prefix.  The registry is global, and any existing "
"mapping for either the given prefix or the namespace URI will be removed. "
"*prefix* is a namespace prefix.  *uri* is a namespace uri.  Tags and "
"attributes in this namespace will be serialized with the given prefix, if at"
" all possible."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:690
msgid ""
"Subelement factory.  This function creates an element instance, and appends "
"it to an existing element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:693
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *parent* is the parent element.  *tag* is "
"the subelement name.  *attrib* is an optional dictionary, containing element"
" attributes.  *extra* contains additional attributes, given as keyword "
"arguments.  Returns an element instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:704
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is"
" the output encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to"
" generate a Unicode string (otherwise, a bytestring is generated).  *method*"
" is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is "
"``\"xml\"``). *xml_declaration*, *default_namespace* and "
"*short_empty_elements* has the same meaning as in :meth:`ElementTree.write`."
" Returns an (optionally) encoded string containing the XML data."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:713
#: ../../library/xml.etree.elementtree.rst:740
#: ../../library/xml.etree.elementtree.rst:1194
msgid "Added the *short_empty_elements* parameter."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:716
#: ../../library/xml.etree.elementtree.rst:743
msgid "Added the *xml_declaration* and *default_namespace* parameters."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:719
msgid ""
"The :func:`tostring` function now preserves the attribute order specified by"
" the user."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:728
msgid ""
"Generates a string representation of an XML element, including all "
"subelements.  *element* is an :class:`Element` instance.  *encoding* [1]_ is"
" the output encoding (default is US-ASCII).  Use ``encoding=\"unicode\"`` to"
" generate a Unicode string (otherwise, a bytestring is generated).  *method*"
" is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` (default is "
"``\"xml\"``). *xml_declaration*, *default_namespace* and "
"*short_empty_elements* has the same meaning as in :meth:`ElementTree.write`."
" Returns a list of (optionally) encoded strings containing the XML data. It "
"does not guarantee any specific sequence, except that "
"``b\"\".join(tostringlist(element)) == tostring(element)``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:746
msgid ""
"The :func:`tostringlist` function now preserves the attribute order "
"specified by the user."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:753
msgid ""
"Parses an XML section from a string constant.  This function can be used to "
"embed \"XML literals\" in Python code.  *text* is a string containing XML "
"data.  *parser* is an optional parser instance.  If not given, the standard "
":class:`XMLParser` parser is used.  Returns an :class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:761
msgid ""
"Parses an XML section from a string constant, and also returns a dictionary "
"which maps from element id:s to elements.  *text* is a string containing XML"
" data.  *parser* is an optional parser instance.  If not given, the standard"
" :class:`XMLParser` parser is used.  Returns a tuple containing an "
":class:`Element` instance and a dictionary."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:771
msgid "XInclude support"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:773
msgid ""
"This module provides limited support for `XInclude directives "
"<https://www.w3.org/TR/xinclude/>`_, via the :mod:`xml.etree.ElementInclude`"
" helper module.  This module can be used to insert subtrees and text strings"
" into element trees, based on information in the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:779
msgid ""
"Here's an example that demonstrates use of the XInclude module. To include "
"an XML document in the current document, use the "
"``{http://www.w3.org/2001/XInclude}include`` element and set the **parse** "
"attribute to ``\"xml\"``, and use the **href** attribute to specify the "
"document to include."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:788
msgid ""
"By default, the **href** attribute is treated as a file name. You can use "
"custom loaders to override this behaviour. Also note that the standard "
"helper does not support XPointer syntax."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:790
msgid ""
"To process this file, load it as usual, and pass the root element to the "
":mod:`xml.etree.ElementTree` module:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:801
msgid ""
"The ElementInclude module replaces the "
"``{http://www.w3.org/2001/XInclude}include`` element with the root element "
"from the **source.xml** document. The result might look something like this:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:809
msgid ""
"If the **parse** attribute is omitted, it defaults to \"xml\". The href "
"attribute is required."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:811
msgid ""
"To include a text document, use the "
"``{http://www.w3.org/2001/XInclude}include`` element, and set the **parse** "
"attribute to \"text\":"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:820
msgid "The result might look something like:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:841
msgid ""
"Default loader. This default loader reads an included resource from disk.  "
"*href* is a URL. *parse* is for parse mode either \"xml\" or \"text\".  "
"*encoding* is an optional text encoding.  If not given, encoding is "
"``utf-8``.  Returns the expanded resource.  If the parse mode is "
"``\"xml\"``, this is an ElementTree instance.  If the parse mode is "
"\"text\", this is a Unicode string.  If the loader fails, it can return None"
" or raise an exception."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:853
msgid ""
"This function expands XInclude directives.  *elem* is the root element.  "
"*loader* is an optional resource loader.  If omitted, it defaults to "
":func:`default_loader`. If given, it should be a callable that implements "
"the same interface as :func:`default_loader`.  *base_url* is base URL of the"
" original file, to resolve relative include file references.  *max_depth* is"
" the maximum number of recursive inclusions.  Limited to reduce the risk of "
"malicious content explosion. Pass a negative value to disable the "
"limitation."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:861
msgid ""
"Returns the expanded resource.  If the parse mode is ``\"xml\"``, this is an"
" ElementTree instance.  If the parse mode is \"text\", this is a Unicode "
"string.  If the loader fails, it can return None or raise an exception."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:866
msgid "Added the *base_url* and *max_depth* parameters."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:873
msgid "Element Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:880
msgid ""
"Element class.  This class defines the Element interface, and provides a "
"reference implementation of this interface."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:883
msgid ""
"The element name, attribute names, and attribute values can be either "
"bytestrings or Unicode strings.  *tag* is the element name.  *attrib* is an "
"optional dictionary, containing element attributes.  *extra* contains "
"additional attributes, given as keyword arguments."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:891
msgid ""
"A string identifying what kind of data this element represents (the element "
"type, in other words)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:898
msgid ""
"These attributes can be used to hold additional data associated with the "
"element.  Their values are usually strings but may be any application-"
"specific object.  If the element is created from an XML file, the *text* "
"attribute holds either the text between the element's start tag and its "
"first child or end tag, or ``None``, and the *tail* attribute holds either "
"the text between the element's end tag and the next tag, or ``None``.  For "
"the XML data"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:910
msgid ""
"the *a* element has ``None`` for both *text* and *tail* attributes, the *b* "
"element has *text* ``\"1\"`` and *tail* ``\"4\"``, the *c* element has "
"*text* ``\"2\"`` and *tail* ``None``, and the *d* element has *text* "
"``None`` and *tail* ``\"3\"``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:915
msgid ""
"To collect the inner text of an element, see :meth:`itertext`, for example "
"``\"\".join(element.itertext())``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:918
msgid "Applications may store arbitrary objects in these attributes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:923
msgid ""
"A dictionary containing the element's attributes.  Note that while the "
"*attrib* value is always a real mutable Python dictionary, an ElementTree "
"implementation may choose to use another internal representation, and create"
" the dictionary only if someone asks for it.  To take advantage of such "
"implementations, use the dictionary methods below whenever possible."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:929
msgid "The following dictionary-like methods work on the element attributes."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:934
msgid ""
"Resets an element.  This function removes all subelements, clears all "
"attributes, and sets the text and tail attributes to ``None``."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:940
msgid "Gets the element attribute named *key*."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:942
msgid ""
"Returns the attribute value, or *default* if the attribute was not found."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:947
msgid ""
"Returns the element attributes as a sequence of (name, value) pairs.  The "
"attributes are returned in an arbitrary order."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:953
msgid ""
"Returns the elements attribute names as a list.  The names are returned in "
"an arbitrary order."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:959
msgid "Set the attribute *key* on the element to *value*."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:961
msgid "The following methods work on the element's children (subelements)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:966
msgid ""
"Adds the element *subelement* to the end of this element's internal list of "
"subelements.  Raises :exc:`TypeError` if *subelement* is not an "
":class:`Element`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:973
msgid ""
"Appends *subelements* from a sequence object with zero or more elements. "
"Raises :exc:`TypeError` if a subelement is not an :class:`Element`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:981
msgid ""
"Finds the first subelement matching *match*.  *match* may be a tag name or a"
" :ref:`path <elementtree-xpath>`.  Returns an element instance or ``None``."
"  *namespaces* is an optional mapping from namespace prefix to full name.  "
"Pass ``''`` as prefix to move all unprefixed tag names in the expression "
"into the given namespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:990
msgid ""
"Finds all matching subelements, by tag name or :ref:`path <elementtree-"
"xpath>`.  Returns a list containing all matching elements in document order."
"  *namespaces* is an optional mapping from namespace prefix to full name.  "
"Pass ``''`` as prefix to move all unprefixed tag names in the expression "
"into the given namespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:999
msgid ""
"Finds text for the first subelement matching *match*.  *match* may be a tag "
"name or a :ref:`path <elementtree-xpath>`.  Returns the text content of the "
"first matching element, or *default* if no element was found. Note that if "
"the matching element has no text content an empty string is returned. "
"*namespaces* is an optional mapping from namespace prefix to full name.  "
"Pass ``''`` as prefix to move all unprefixed tag names in the expression "
"into the given namespace."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1010
msgid ""
"Inserts *subelement* at the given position in this element.  Raises "
":exc:`TypeError` if *subelement* is not an :class:`Element`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1016
msgid ""
"Creates a tree :term:`iterator` with the current element as the root. The "
"iterator iterates over this element and all elements below it, in document "
"(depth first) order.  If *tag* is not ``None`` or ``'*'``, only elements "
"whose tag equals *tag* are returned from the iterator.  If the tree "
"structure is modified during iteration, the result is undefined."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1027
msgid ""
"Finds all matching subelements, by tag name or :ref:`path <elementtree-"
"xpath>`.  Returns an iterable yielding all matching elements in document "
"order. *namespaces* is an optional mapping from namespace prefix to full "
"name."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1038
msgid ""
"Creates a text iterator.  The iterator loops over this element and all "
"subelements, in document order, and returns all inner text."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1046
msgid ""
"Creates a new element object of the same type as this element.  Do not call "
"this method, use the :func:`SubElement` factory function instead."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1052
msgid ""
"Removes *subelement* from the element.  Unlike the find\\* methods this "
"method compares elements based on the instance identity, not on tag value or"
" contents."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1056
msgid ""
":class:`Element` objects also support the following sequence type methods "
"for working with subelements: :meth:`~object.__delitem__`, "
":meth:`~object.__getitem__`, :meth:`~object.__setitem__`, "
":meth:`~object.__len__`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1061
msgid ""
"Caution: Elements with no subelements will test as ``False``.  This behavior"
" will change in future versions.  Use specific ``len(elem)`` or ``elem is "
"None`` test instead. ::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1073
msgid ""
"Prior to Python 3.8, the serialisation order of the XML attributes of "
"elements was artificially made predictable by sorting the attributes by "
"their name. Based on the now guaranteed ordering of dicts, this arbitrary "
"reordering was removed in Python 3.8 to preserve the order in which "
"attributes were originally parsed or created by user code."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1079
msgid ""
"In general, user code should try not to depend on a specific ordering of "
"attributes, given that the `XML Information Set <https://www.w3.org/TR/xml-"
"infoset/>`_ explicitly excludes the attribute order from conveying "
"information. Code should be prepared to deal with any ordering on input. In "
"cases where deterministic XML output is required, e.g. for cryptographic "
"signing or test data sets, canonical serialisation is available with the "
":func:`canonicalize` function."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1087
msgid ""
"In cases where canonical output is not applicable but a specific attribute "
"order is still desirable on output, code should aim for creating the "
"attributes directly in the desired order, to avoid perceptual mismatches for"
" readers of the code. In cases where this is difficult to achieve, a recipe "
"like the following can be applied prior to serialisation to enforce an order"
" independently from the Element creation::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1107
msgid "ElementTree Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1112
msgid ""
"ElementTree wrapper class.  This class represents an entire element "
"hierarchy, and adds some extra support for serialization to and from "
"standard XML."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1116
msgid ""
"*element* is the root element.  The tree is initialized with the contents of"
" the XML *file* if given."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1122
msgid ""
"Replaces the root element for this tree.  This discards the current contents"
" of the tree, and replaces it with the given element.  Use with care.  "
"*element* is an element instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1129
msgid "Same as :meth:`Element.find`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1134
msgid "Same as :meth:`Element.findall`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1139
msgid "Same as :meth:`Element.findtext`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1144
msgid "Returns the root element for this tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1149
msgid ""
"Creates and returns a tree iterator for the root element.  The iterator "
"loops over all elements in this tree, in section order.  *tag* is the tag to"
" look for (default is to return all elements)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1156
msgid "Same as :meth:`Element.iterfind`, starting at the root of the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1163
msgid ""
"Loads an external XML section into this element tree.  *source* is a file "
"name or :term:`file object`.  *parser* is an optional parser instance. If "
"not given, the standard :class:`XMLParser` parser is used.  Returns the "
"section root element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1173
msgid ""
"Writes the element tree to a file, as XML.  *file* is a file name, or a "
":term:`file object` opened for writing.  *encoding* [1]_ is the output "
"encoding (default is US-ASCII). *xml_declaration* controls if an XML "
"declaration should be added to the file.  Use ``False`` for never, ``True`` "
"for always, ``None`` for only if not US-ASCII or UTF-8 or Unicode (default "
"is ``None``). *default_namespace* sets the default XML namespace (for "
"\"xmlns\"). *method* is either ``\"xml\"``, ``\"html\"`` or ``\"text\"`` "
"(default is ``\"xml\"``). The keyword-only *short_empty_elements* parameter "
"controls the formatting of elements that contain no content.  If ``True`` "
"(the default), they are emitted as a single self-closed tag, otherwise they "
"are emitted as a pair of start/end tags."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1187
msgid ""
"The output is either a string (:class:`str`) or binary (:class:`bytes`). "
"This is controlled by the *encoding* argument.  If *encoding* is "
"``\"unicode\"``, the output is a string; otherwise, it's binary.  Note that "
"this may conflict with the type of *file* if it's an open :term:`file "
"object`; make sure you do not try to write a string to a binary stream and "
"vice versa."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1197
msgid ""
"The :meth:`write` method now preserves the attribute order specified by the "
"user."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1202
msgid "This is the XML file that is going to be manipulated::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1214
msgid ""
"Example of changing the attribute \"target\" of every link in first "
"paragraph::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1233
msgid "QName Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1238
msgid ""
"QName wrapper.  This can be used to wrap a QName attribute value, in order "
"to get proper namespace handling on output.  *text_or_uri* is a string "
"containing the QName value, in the form {uri}local, or, if the tag argument "
"is given, the URI part of a QName.  If *tag* is given, the first argument is"
" interpreted as a URI, and this argument is interpreted as a local name. "
":class:`QName` instances are opaque."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1250
msgid "TreeBuilder Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1256
msgid ""
"Generic element structure builder.  This builder converts a sequence of "
"start, data, end, comment and pi method calls to a well-formed element "
"structure.  You can use this class to build an element structure using a "
"custom XML parser, or a parser for some other XML-like format."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1261
msgid ""
"*element_factory*, when given, must be a callable accepting two positional "
"arguments: a tag and a dict of attributes.  It is expected to return a new "
"element instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1265
msgid ""
"The *comment_factory* and *pi_factory* functions, when given, should behave "
"like the :func:`Comment` and :func:`ProcessingInstruction` functions to "
"create comments and processing instructions.  When not given, the default "
"factories will be used.  When *insert_comments* and/or *insert_pis* is true,"
" comments/pis will be inserted into the tree if they appear within the root "
"element (but not outside of it)."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1274
msgid ""
"Flushes the builder buffers, and returns the toplevel document element.  "
"Returns an :class:`Element` instance."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1280
msgid ""
"Adds text to the current element.  *data* is a string.  This should be "
"either a bytestring, or a Unicode string."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1286
msgid ""
"Closes the current element.  *tag* is the element name.  Returns the closed "
"element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1292
msgid ""
"Opens a new element.  *tag* is the element name.  *attrs* is a dictionary "
"containing element attributes.  Returns the opened element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1298
msgid ""
"Creates a comment with the given *text*.  If ``insert_comments`` is true, "
"this will also add it to the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1306
msgid ""
"Creates a process instruction with the given *target* name and *text*. If "
"``insert_pis`` is true, this will also add it to the tree."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1312
msgid ""
"In addition, a custom :class:`TreeBuilder` object can provide the following "
"methods:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1317
msgid ""
"Handles a doctype declaration.  *name* is the doctype name.  *pubid* is the "
"public identifier.  *system* is the system identifier.  This method does not"
" exist on the default :class:`TreeBuilder` class."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1325
msgid ""
"Is called whenever the parser encounters a new namespace declaration, before"
" the ``start()`` callback for the opening element that defines it. *prefix* "
"is ``''`` for the default namespace and the declared namespace prefix name "
"otherwise.  *uri* is the namespace URI."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1334
msgid ""
"Is called after the ``end()`` callback of an element that declared a "
"namespace prefix mapping, with the name of the *prefix* that went out of "
"scope."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1346
msgid ""
"A `C14N 2.0 <https://www.w3.org/TR/xml-c14n2/>`_ writer.  Arguments are the "
"same as for the :func:`canonicalize` function.  This class does not build a "
"tree but translates the callback events directly into a serialised form "
"using the *write* function."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1357
msgid "XMLParser Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1362
msgid ""
"This class is the low-level building block of the module.  It uses "
":mod:`xml.parsers.expat` for efficient, event-based parsing of XML.  It can "
"be fed XML data incrementally with the :meth:`feed` method, and parsing "
"events are translated to a push API - by invoking callbacks on the *target* "
"object.  If *target* is omitted, the standard :class:`TreeBuilder` is used. "
"If *encoding* [1]_ is given, the value overrides the encoding specified in "
"the XML file."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1370
msgid ""
"Parameters are now :ref:`keyword-only <keyword-only_parameter>`. The *html* "
"argument no longer supported."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1377
msgid ""
"Finishes feeding data to the parser.  Returns the result of calling the "
"``close()`` method of the *target* passed during construction; by default, "
"this is the toplevel document element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1384
msgid "Feeds data to the parser.  *data* is encoded data."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1389
#: ../../library/xml.etree.elementtree.rst:1467
msgid ""
"Triggers parsing of any previously fed unparsed data, which can be used to "
"ensure more immediate feedback, in particular with Expat >=2.6.0. The "
"implementation of :meth:`flush` temporarily disables reparse deferral with "
"Expat (if currently enabled) and triggers a reparse. Disabling reparse "
"deferral has security consequences; please see "
":meth:`xml.parsers.expat.xmlparser.SetReparseDeferralEnabled` for details."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1396
#: ../../library/xml.etree.elementtree.rst:1474
msgid ""
"Note that :meth:`flush` has been backported to some prior releases of "
"CPython as a security fix.  Check for availability of :meth:`flush` using "
":func:`hasattr` if used in code running across a variety of Python versions."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1404
msgid ""
":meth:`XMLParser.feed` calls *target*\\'s ``start(tag, attrs_dict)`` method "
"for each opening tag, its ``end(tag)`` method for each closing tag, and data"
" is processed by method ``data(data)``.  For further supported callback "
"methods, see the :class:`TreeBuilder` class.  :meth:`XMLParser.close` calls "
"*target*\\'s method ``close()``. :class:`XMLParser` can be used not only for"
" building a tree structure. This is an example of counting the maximum depth"
" of an XML file::"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1448
msgid "XMLPullParser Objects"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1452
msgid ""
"A pull parser suitable for non-blocking applications.  Its input-side API is"
" similar to that of :class:`XMLParser`, but instead of pushing calls to a "
"callback target, :class:`XMLPullParser` collects an internal list of parsing"
" events and lets the user read from it. *events* is a sequence of events to "
"report back.  The supported events are the strings ``\"start\"``, "
"``\"end\"``, ``\"comment\"``, ``\"pi\"``, ``\"start-ns\"`` and ``\"end-"
"ns\"`` (the \"ns\" events are used to get detailed namespace information).  "
"If *events* is omitted, only ``\"end\"`` events are reported."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1463
msgid "Feed the given bytes data to the parser."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1483
msgid ""
"Signal the parser that the data stream is terminated. Unlike "
":meth:`XMLParser.close`, this method always returns :const:`None`. Any "
"events not yet retrieved when the parser is closed can still be read with "
":meth:`read_events`."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1490
msgid ""
"Return an iterator over the events which have been encountered in the data "
"fed to the parser.  The iterator yields ``(event, elem)`` pairs, where "
"*event* is a string representing the type of event (e.g. ``\"end\"``) and "
"*elem* is the encountered :class:`Element` object, or other context value as"
" follows."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1496
msgid "``start``, ``end``: the current Element."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1497
msgid "``comment``, ``pi``: the current comment / processing instruction"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1498
msgid ""
"``start-ns``: a tuple ``(prefix, uri)`` naming the declared namespace "
"mapping."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1500
msgid "``end-ns``: :const:`None` (this may change in a future version)"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1502
msgid ""
"Events provided in a previous call to :meth:`read_events` will not be "
"yielded again.  Events are consumed from the internal queue only when they "
"are retrieved from the iterator, so multiple readers iterating in parallel "
"over iterators obtained from :meth:`read_events` will have unpredictable "
"results."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1510
msgid ""
":class:`XMLPullParser` only guarantees that it has seen the \">\" character "
"of a starting tag when it emits a \"start\" event, so the attributes are "
"defined, but the contents of the text and tail attributes are undefined at "
"that point.  The same applies to the element children; they may or may not "
"be present."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1525
msgid "Exceptions"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1529
msgid ""
"XML parse error, raised by the various parsing methods in this module when "
"parsing fails.  The string representation of an instance of this exception "
"will contain a user-friendly error message.  In addition, it will have the "
"following attributes available:"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1536
msgid ""
"A numeric error code from the expat parser. See the documentation of "
":mod:`xml.parsers.expat` for the list of error codes and their meanings."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1541
msgid ""
"A tuple of *line*, *column* numbers, specifying where the error occurred."
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1544
msgid "Footnotes"
msgstr ""

#: ../../library/xml.etree.elementtree.rst:1545
msgid ""
"The encoding string included in XML output should conform to the appropriate"
" standards.  For example, \"UTF-8\" is valid, but \"UTF8\" is not.  See "
"https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and "
"https://www.iana.org/assignments/character-sets/character-sets.xhtml."
msgstr ""
