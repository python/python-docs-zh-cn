# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:57+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/cmath.rst:2
msgid ":mod:`!cmath` --- Mathematical functions for complex numbers"
msgstr ":mod:`!cmath` --- 针对复数的数学函数"

#: ../../library/cmath.rst:9
msgid ""
"This module provides access to mathematical functions for complex numbers.  "
"The functions in this module accept integers, floating-point numbers or "
"complex numbers as arguments. They will also accept any Python object that "
"has either a :meth:`~object.__complex__` or a :meth:`~object.__float__` "
"method: these methods are used to convert the object to a complex or "
"floating-point number, respectively, and the function is then applied to the"
" result of the conversion."
msgstr ""
"本模块提供了一些适用于复数的数学函数。 本模块中的函数接受整数、浮点数或复数作为参数。 它们也接受任意具有 "
":meth:`~object.__complex__` 或 :meth:`~object.__float__` 方法的 Python "
"对象：这些方法分别用于将对象转换为复数或浮点数，然后再将函数应用于转换后的结果。"

#: ../../library/cmath.rst:18
msgid ""
"For functions involving branch cuts, we have the problem of deciding how to "
"define those functions on the cut itself. Following Kahan's \"Branch cuts "
"for complex elementary functions\" paper, as well as Annex G of C99 and "
"later C standards, we use the sign of zero to distinguish one side of the "
"branch cut from the other: for a branch cut along (a portion of) the real "
"axis we look at the sign of the imaginary part, while for a branch cut along"
" the imaginary axis we look at the sign of the real part."
msgstr ""
"对于涉及分支切割的函数，我们会有确定如何在切割本身上定义这些函数的问题。 根据 Kahan 的论文 \"Branch cuts for complex "
"elementary functions\"，以及 C99 的附录 G 和之后的 C "
"标准，我们使用零符号来区别分支切割的一侧和另一侧：对于沿实轴（一部分）的分支切割我们要看虚部的符号，而对于沿虚轴的分支切割我们则要看实部的符号。"

#: ../../library/cmath.rst:26
msgid ""
"For example, the :func:`cmath.sqrt` function has a branch cut along the "
"negative real axis. An argument of ``complex(-2.0, -0.0)`` is treated as "
"though it lies *below* the branch cut, and so gives a result on the negative"
" imaginary axis::"
msgstr ""
"例如，:func:`cmath.sqrt` 函数有一个沿着负实轴的分支切割。 参数 ``complex(-2.0, -0.0)`` "
"会被当作位于切支切割的 *下方* 来处理，因而将给出一个负虚轴上的结果。"

#: ../../library/cmath.rst:31
msgid ""
">>> cmath.sqrt(complex(-2.0, -0.0))\n"
"-1.4142135623730951j"
msgstr ""
">>> cmath.sqrt(complex(-2.0, -0.0))\n"
"-1.4142135623730951j"

#: ../../library/cmath.rst:34
msgid ""
"But an argument of ``complex(-2.0, 0.0)`` is treated as though it lies above"
" the branch cut::"
msgstr "但是参数 ``complex(-2.0, 0.0)`` 则会被当作是位于支割线的上方来处理::"

#: ../../library/cmath.rst:37
msgid ""
">>> cmath.sqrt(complex(-2.0, 0.0))\n"
"1.4142135623730951j"
msgstr ""
">>> cmath.sqrt(complex(-2.0, 0.0))\n"
"1.4142135623730951j"

#: ../../library/cmath.rst:42
msgid "**Conversions to and from polar coordinates**"
msgstr "**针对极坐标的转换**"

#: ../../library/cmath.rst:44
msgid ":func:`phase(z) <phase>`"
msgstr ":func:`phase(z) <phase>`"

#: ../../library/cmath.rst:44
msgid "Return the phase of *z*"
msgstr "返回 *z* 的相位"

#: ../../library/cmath.rst:45
msgid ":func:`polar(z) <polar>`"
msgstr ":func:`polar(z) <polar>`"

#: ../../library/cmath.rst:45
msgid "Return the representation of *z* in polar coordinates"
msgstr "返回 *z* 的极坐标表示形式"

#: ../../library/cmath.rst:46
msgid ":func:`rect(r, phi) <rect>`"
msgstr ":func:`rect(r, phi) <rect>`"

#: ../../library/cmath.rst:46
msgid "Return the complex number *z* with polar coordinates *r* and *phi*"
msgstr "返回复数 *z* 的极坐标值 *r* 和 *phi*"

#: ../../library/cmath.rst:48
msgid "**Power and logarithmic functions**"
msgstr "**幂函数与对数函数**"

#: ../../library/cmath.rst:50
msgid ":func:`exp(z) <exp>`"
msgstr ":func:`exp(z) <exp>`"

#: ../../library/cmath.rst:50
msgid "Return *e* raised to the power *z*"
msgstr "返回 *e* 的 *z* 次幂"

#: ../../library/cmath.rst:51
msgid ":func:`log(z[, base]) <log>`"
msgstr ":func:`log(z[, base]) <log>`"

#: ../../library/cmath.rst:51
msgid "Return the logarithm of *z* to the given *base* (*e* by default)"
msgstr "返回 *z* 的指定底数 *base* (默认为 *e*) 的对数"

#: ../../library/cmath.rst:52
msgid ":func:`log10(z) <log10>`"
msgstr ":func:`log10(z) <log10>`"

#: ../../library/cmath.rst:52
msgid "Return the base-10 logarithm of *z*"
msgstr "返回 *z* 的以 10 为底的对数"

#: ../../library/cmath.rst:53
msgid ":func:`sqrt(z) <sqrt>`"
msgstr ":func:`sqrt(z) <sqrt>`"

#: ../../library/cmath.rst:53
msgid "Return the square root of *z*"
msgstr "返回 *z* 的平方根"

#: ../../library/cmath.rst:55
msgid "**Trigonometric functions**"
msgstr "**三角函数**"

#: ../../library/cmath.rst:57
msgid ":func:`acos(z) <acos>`"
msgstr ":func:`acos(z) <acos>`"

#: ../../library/cmath.rst:57
msgid "Return the arc cosine of *z*"
msgstr "返回 *z* 的反余弦"

#: ../../library/cmath.rst:58
msgid ":func:`asin(z) <asin>`"
msgstr ":func:`asin(z) <asin>`"

#: ../../library/cmath.rst:58
msgid "Return the arc sine of *z*"
msgstr "返回 *z* 的反正弦"

#: ../../library/cmath.rst:59
msgid ":func:`atan(z) <atan>`"
msgstr ":func:`atan(z) <atan>`"

#: ../../library/cmath.rst:59
msgid "Return the arc tangent of *z*"
msgstr "返回 *z* 的反正切"

#: ../../library/cmath.rst:60
msgid ":func:`cos(z) <cos>`"
msgstr ":func:`cos(z) <cos>`"

#: ../../library/cmath.rst:60
msgid "Return the cosine of *z*"
msgstr "返回 *z* 的余弦"

#: ../../library/cmath.rst:61
msgid ":func:`sin(z) <sin>`"
msgstr ":func:`sin(z) <sin>`"

#: ../../library/cmath.rst:61
msgid "Return the sine of *z*"
msgstr "返回 *z* 的正弦"

#: ../../library/cmath.rst:62
msgid ":func:`tan(z) <tan>`"
msgstr ":func:`tan(z) <tan>`"

#: ../../library/cmath.rst:62
msgid "Return the tangent of *z*"
msgstr "返回 *z* 的正切"

#: ../../library/cmath.rst:64
msgid "**Hyperbolic functions**"
msgstr "**双曲函数**"

#: ../../library/cmath.rst:66
msgid ":func:`acosh(z) <acosh>`"
msgstr ":func:`acosh(z) <acosh>`"

#: ../../library/cmath.rst:66
msgid "Return the inverse hyperbolic cosine of *z*"
msgstr "返回 *z* 的反双曲余弦"

#: ../../library/cmath.rst:67
msgid ":func:`asinh(z) <asinh>`"
msgstr ":func:`asinh(z) <asinh>`"

#: ../../library/cmath.rst:67
msgid "Return the inverse hyperbolic sine of *z*"
msgstr "返回 *z* 的反双曲正弦"

#: ../../library/cmath.rst:68
msgid ":func:`atanh(z) <atanh>`"
msgstr ":func:`atanh(z) <atanh>`"

#: ../../library/cmath.rst:68
msgid "Return the inverse hyperbolic tangent of *z*"
msgstr "返回 *z* 反双曲正切"

#: ../../library/cmath.rst:69
msgid ":func:`cosh(z) <cosh>`"
msgstr ":func:`cosh(z) <cosh>`"

#: ../../library/cmath.rst:69
msgid "Return the hyperbolic cosine of *z*"
msgstr "返回 *z* 的双曲余弦"

#: ../../library/cmath.rst:70
msgid ":func:`sinh(z) <sinh>`"
msgstr ":func:`sinh(z) <sinh>`"

#: ../../library/cmath.rst:70
msgid "Return the hyperbolic sine of *z*"
msgstr "返回 *z* 的双曲正弦"

#: ../../library/cmath.rst:71
msgid ":func:`tanh(z) <tanh>`"
msgstr ":func:`tanh(z) <tanh>`"

#: ../../library/cmath.rst:71
msgid "Return the hyperbolic tangent of *z*"
msgstr "返回 *z* 的双曲正切"

#: ../../library/cmath.rst:73
msgid "**Classification functions**"
msgstr "**分类函数**"

#: ../../library/cmath.rst:75
msgid ":func:`isfinite(z) <isfinite>`"
msgstr ":func:`isfinite(z) <isfinite>`"

#: ../../library/cmath.rst:75
msgid "Check if all components of *z* are finite"
msgstr "检测是否 *z* 的所有部分均为有限值"

#: ../../library/cmath.rst:76
msgid ":func:`isinf(z) <isinf>`"
msgstr ":func:`isinf(z) <isinf>`"

#: ../../library/cmath.rst:76
msgid "Check if any component of *z* is infinite"
msgstr "检测是否 *z* 的每个部分均为无穷大"

#: ../../library/cmath.rst:77
msgid ":func:`isnan(z) <isnan>`"
msgstr ":func:`isnan(z) <isnan>`"

#: ../../library/cmath.rst:77
msgid "Check if any component of *z* is a NaN"
msgstr "检测是否 *z* 的每个部分均为 NaN"

#: ../../library/cmath.rst:78
msgid ":func:`isclose(a, b, *, rel_tol, abs_tol) <isclose>`"
msgstr ":func:`isclose(a, b, *, rel_tol, abs_tol) <isclose>`"

#: ../../library/cmath.rst:78
msgid "Check if the values *a* and *b* are close to each other"
msgstr "检查 *a* 和 *b* 的值是否彼此接近"

#: ../../library/cmath.rst:80
msgid "**Constants**"
msgstr "**常量**"

#: ../../library/cmath.rst:82
msgid ":data:`pi`"
msgstr ":data:`pi`"

#: ../../library/cmath.rst:82
msgid "*π* = 3.141592..."
msgstr "*π* = 3.141592..."

#: ../../library/cmath.rst:83
msgid ":data:`e`"
msgstr ":data:`e`"

#: ../../library/cmath.rst:83
msgid "*e* = 2.718281..."
msgstr "*e* = 2.718281..."

#: ../../library/cmath.rst:84
msgid ":data:`tau`"
msgstr ":data:`tau`"

#: ../../library/cmath.rst:84
msgid "*τ* = 2\\ *π* = 6.283185..."
msgstr "*τ* = 2\\ *π* = 6.283185..."

#: ../../library/cmath.rst:85
msgid ":data:`inf`"
msgstr ":data:`inf`"

#: ../../library/cmath.rst:85
msgid "Positive infinity"
msgstr "正无穷"

#: ../../library/cmath.rst:86
msgid ":data:`infj`"
msgstr ":data:`infj`"

#: ../../library/cmath.rst:86
msgid "Pure imaginary infinity"
msgstr "纯虚部无穷"

#: ../../library/cmath.rst:87
msgid ":data:`nan`"
msgstr ":data:`nan`"

#: ../../library/cmath.rst:87
msgid "\"Not a number\" (NaN)"
msgstr "\"非数字\" (NaN)"

#: ../../library/cmath.rst:88
msgid ":data:`nanj`"
msgstr ":data:`nanj`"

#: ../../library/cmath.rst:88
msgid "Pure imaginary NaN"
msgstr "纯实部 NaN"

#: ../../library/cmath.rst:93
msgid "Conversions to and from polar coordinates"
msgstr "到极坐标和从极坐标的转换"

#: ../../library/cmath.rst:95
msgid ""
"A Python complex number ``z`` is stored internally using *rectangular* or "
"*Cartesian* coordinates.  It is completely determined by its *real part* "
"``z.real`` and its *imaginary part* ``z.imag``."
msgstr ""
"Python 复数 ``z`` 是使用 *直角* 或 *笛卡尔* 坐标在内部存储的。 这完全取决于其 *实部* ``z.real`` 及其 *虚部* "
"``z.imag`` 的值。"

#: ../../library/cmath.rst:99
msgid ""
"*Polar coordinates* give an alternative way to represent a complex number.  "
"In polar coordinates, a complex number *z* is defined by the modulus *r* and"
" the phase angle *phi*. The modulus *r* is the distance from *z* to the "
"origin, while the phase *phi* is the counterclockwise angle, measured in "
"radians, from the positive x-axis to the line segment that joins the origin "
"to *z*."
msgstr ""
"*极坐标* 提供了另一种复数的表示方法。在极坐标中，一个复数 *z* 由模量 *r* 和相位角 *phi* 来定义。模量 *r* 是从 *z* "
"到坐标原点的距离，而相位角 *phi* 是以弧度为单位的，逆时针的，从正X轴到连接原点和 *z* 的线段间夹角的角度。"

#: ../../library/cmath.rst:106
msgid ""
"The following functions can be used to convert from the native rectangular "
"coordinates to polar coordinates and back."
msgstr "下面的函数可用于原生直角坐标与极坐标的相互转换。"

#: ../../library/cmath.rst:111
msgid ""
"Return the phase of *z* (also known as the *argument* of *z*), as a float. "
"``phase(z)`` is equivalent to ``math.atan2(z.imag, z.real)``.  The result "
"lies in the range [-\\ *π*, *π*], and the branch cut for this operation lies"
" along the negative real axis.  The sign of the result is the same as the "
"sign of ``z.imag``, even when ``z.imag`` is zero::"
msgstr ""
"将 *z* 的相位 (或称 *z* 的 *参数*) 作为一个浮点数返回。 ``phase(z)`` 等价于 ``math.atan2(z.imag, "
"z.real)``。 结果将位于 [-\\ *π*, *π*] 范围内，且此操作的支割线将位于负实轴上。 结果的正负号将与 ``z.imag`` "
"的正负号相同，即使 ``z.imag`` 值为零::"

#: ../../library/cmath.rst:117
msgid ""
">>> phase(complex(-1.0, 0.0))\n"
"3.141592653589793\n"
">>> phase(complex(-1.0, -0.0))\n"
"-3.141592653589793"
msgstr ""
">>> phase(complex(-1.0, 0.0))\n"
"3.141592653589793\n"
">>> phase(complex(-1.0, -0.0))\n"
"-3.141592653589793"

#: ../../library/cmath.rst:125
msgid ""
"The modulus (absolute value) of a complex number *z* can be computed using "
"the built-in :func:`abs` function.  There is no separate :mod:`cmath` module"
" function for this operation."
msgstr ""
"一个复数 *z* 的模数（绝对值）可以使用内置的 :func:`abs` 函数来计算。 没有用于此操作的单独的 :mod:`cmath` 模块函数。"

#: ../../library/cmath.rst:132
msgid ""
"Return the representation of *z* in polar coordinates.  Returns a pair ``(r,"
" phi)`` where *r* is the modulus of *z* and *phi* is the phase of *z*.  "
"``polar(z)`` is equivalent to ``(abs(z), phase(z))``."
msgstr ""
"返回在极坐标中 *z* 的表示形式。 返回一个数值对 ``(r, phi)`` 其中 *r* 是 *z* 的模数而 *phi* 是 *z* 的相位。 "
"``polar(z)`` 等价于 ``(abs(z), phase(z))``。"

#: ../../library/cmath.rst:140
msgid ""
"Return the complex number *z* with polar coordinates *r* and *phi*. "
"Equivalent to ``complex(r * math.cos(phi), r * math.sin(phi))``."
msgstr ""
"将复数 *z* 返回为极坐标 *r* 和 *phi* 形式。 等价于 ``complex(r * math.cos(phi), r * "
"math.sin(phi))``。"

#: ../../library/cmath.rst:145
msgid "Power and logarithmic functions"
msgstr "幂函数与对数函数"

#: ../../library/cmath.rst:149
msgid ""
"Return *e* raised to the power *z*, where *e* is the base of natural "
"logarithms."
msgstr "返回 *e* 的 *z* 次方，其中 *e* 是自然对数的底数。"

#: ../../library/cmath.rst:155
msgid ""
"Return the logarithm of *z* to the given *base*. If the *base* is not "
"specified, returns the natural logarithm of *z*. There is one branch cut, "
"from 0 along the negative real axis to -∞."
msgstr ""
"返回 *z* 的以给定的 *base* 为底的对数。 如果没有指定 *base*，则返回 *z* 的自然对数。 存在一条支割线，即沿着负实轴从 0 到 "
"-∞。"

#: ../../library/cmath.rst:162
msgid ""
"Return the base-10 logarithm of *z*. This has the same branch cut as "
":func:`log`."
msgstr "返回 *z* 的以 10 为底的对数。 它具有与 :func:`log` 相同的支割线。"

#: ../../library/cmath.rst:168
msgid ""
"Return the square root of *z*. This has the same branch cut as :func:`log`."
msgstr "返回 *z* 的平方根。 它具有与 :func:`log` 相同的支割线。"

#: ../../library/cmath.rst:172
msgid "Trigonometric functions"
msgstr "三角函数"

#: ../../library/cmath.rst:176
msgid ""
"Return the arc cosine of *z*. There are two branch cuts: One extends right "
"from 1 along the real axis to ∞. The other extends left from -1 along the "
"real axis to -∞."
msgstr "返回 *z* 的反余弦。 存在两条支割线：一条沿着实轴从 1 到 ∞。 另一条沿着实轴从 -1 向左延伸到 -∞。"

#: ../../library/cmath.rst:183
msgid ""
"Return the arc sine of *z*. This has the same branch cuts as :func:`acos`."
msgstr "返回 *z* 的反正弦。 它具有与 :func:`acos` 相同的支割线。"

#: ../../library/cmath.rst:188
msgid ""
"Return the arc tangent of *z*. There are two branch cuts: One extends from "
"``1j`` along the imaginary axis to ``∞j``. The other extends from ``-1j`` "
"along the imaginary axis to ``-∞j``."
msgstr ""
"返回 *z* 的反正切。 存在两条支割线：一条沿着虚轴从 ``1j`` 到 ``∞j``。 另一条沿着虚轴从 ``-1j`` 延伸到 ``-∞j``。"

#: ../../library/cmath.rst:195
msgid "Return the cosine of *z*."
msgstr "返回 *z* 的余弦。"

#: ../../library/cmath.rst:200
msgid "Return the sine of *z*."
msgstr "返回 *z* 的正弦。"

#: ../../library/cmath.rst:205
msgid "Return the tangent of *z*."
msgstr "返回 *z* 的正切。"

#: ../../library/cmath.rst:209
msgid "Hyperbolic functions"
msgstr "双曲函数"

#: ../../library/cmath.rst:213
msgid ""
"Return the inverse hyperbolic cosine of *z*. There is one branch cut, "
"extending left from 1 along the real axis to -∞."
msgstr "返回 *z* 的反双曲余弦。 存在一条支割线，沿着实轴从 1 向左延伸到 -∞。"

#: ../../library/cmath.rst:219
msgid ""
"Return the inverse hyperbolic sine of *z*. There are two branch cuts: One "
"extends from ``1j`` along the imaginary axis to ``∞j``.  The other extends "
"from ``-1j`` along the imaginary axis to ``-∞j``."
msgstr ""
"返回 *z* 的反双曲正弦。 存在两条支割线：一条沿着虚轴从 ``1j`` 注册会计师到 ``∞j``。 另一条沿着虚轴从 ``-1j`` 延伸到 "
"``-∞j``。"

#: ../../library/cmath.rst:226
msgid ""
"Return the inverse hyperbolic tangent of *z*. There are two branch cuts: One"
" extends from ``1`` along the real axis to ``∞``. The other extends from "
"``-1`` along the real axis to ``-∞``."
msgstr ""
"返回 *z* 的反双曲正切。 存在两条支割线：一条沿着实轴从 ``1`` 延伸到 ``∞``。 另一条沿着实轴从 ``-1`` 延伸到 ``-∞``。"

#: ../../library/cmath.rst:233
msgid "Return the hyperbolic cosine of *z*."
msgstr "返回 *z* 的双曲余弦。"

#: ../../library/cmath.rst:238
msgid "Return the hyperbolic sine of *z*."
msgstr "返回 *z* 的双曲正弦。"

#: ../../library/cmath.rst:243
msgid "Return the hyperbolic tangent of *z*."
msgstr "返回 *z* 的双曲正切。"

#: ../../library/cmath.rst:247
msgid "Classification functions"
msgstr "分类函数"

#: ../../library/cmath.rst:251
msgid ""
"Return ``True`` if both the real and imaginary parts of *z* are finite, and "
"``False`` otherwise."
msgstr "如果 *z* 的实部和虚部均为有限值则返回 ``True``，否则返回 ``False``。"

#: ../../library/cmath.rst:259
msgid ""
"Return ``True`` if either the real or the imaginary part of *z* is an "
"infinity, and ``False`` otherwise."
msgstr "如果 *z* 的实部或虚部为无穷大则返回 ``True``，否则返回 ``False``。"

#: ../../library/cmath.rst:265
msgid ""
"Return ``True`` if either the real or the imaginary part of *z* is a NaN, "
"and ``False`` otherwise."
msgstr "如果 *z* 的实部或虚部为 NaN 则返回 ``True``，否则返回 ``False``。"

#: ../../library/cmath.rst:271
msgid ""
"Return ``True`` if the values *a* and *b* are close to each other and "
"``False`` otherwise."
msgstr "若 *a* 和 *b* 的值比较接近则返回 ``True``，否则返回 ``False``。"

#: ../../library/cmath.rst:274
msgid ""
"Whether or not two values are considered close is determined according to "
"given absolute and relative tolerances.  If no errors occur, the result will"
" be: ``abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)``."
msgstr ""
"两个值是否会被视为相近是根据给定的绝对和相对可接受差异度来确定的。 如果未发生错误，结果将为: ``abs(a-b) <= max(rel_tol * "
"max(abs(a), abs(b)), abs_tol)``。"

#: ../../library/cmath.rst:278
msgid ""
"*rel_tol* is the relative tolerance -- it is the maximum allowed difference "
"between *a* and *b*, relative to the larger absolute value of *a* or *b*. "
"For example, to set a tolerance of 5%, pass ``rel_tol=0.05``.  The default "
"tolerance is ``1e-09``, which assures that the two values are the same "
"within about 9 decimal digits.  *rel_tol* must be nonnegative and less than "
"``1.0``."
msgstr ""
"*rel_tol* 是相对容差 -- 它是 *a* 和 *b* 之间的最大允许差值，相对于 *a* 或 *b* 中绝对值较大的一个而言。 例如，要设置 "
"5% 的容差，则传入 ``rel_tol=0.05``。 默认的容差为 ``1e-09``，这将确保两个值在大约 9 个十进制数位内是相同的。 "
"*rel_tol* 必须为非零值并且小于 ``1.0``。"

#: ../../library/cmath.rst:285
msgid ""
"*abs_tol* is the absolute tolerance; it defaults to ``0.0`` and it must be "
"nonnegative.  When comparing ``x`` to ``0.0``, ``isclose(x, 0)`` is computed"
" as ``abs(x) <= rel_tol  * abs(x)``, which is ``False`` for any ``x`` and "
"rel_tol less than ``1.0``.  So add an appropriate positive abs_tol argument "
"to the call."
msgstr ""
"*abs_tol* 是绝对容差；其默认值为 ``0.0`` 并且必须为非负值。 当将 ``x`` 与 ``0.0`` 比较时，``isclose(x, "
"0)`` 将按 ``abs(x) <= rel_tol  * abs(x)`` 来计算，对于 ``x`` 和小于 ``1.0`` 的 rel_tol "
"来说均为 ``False``。 因此请为该调用添一个为适当正值的 abs_tol。"

#: ../../library/cmath.rst:291
msgid ""
"The IEEE 754 special values of ``NaN``, ``inf``, and ``-inf`` will be "
"handled according to IEEE rules.  Specifically, ``NaN`` is not considered "
"close to any other value, including ``NaN``.  ``inf`` and ``-inf`` are only "
"considered close to themselves."
msgstr ""
"IEEE 754特殊值 ``NaN`` ， ``inf`` 和 ``-inf`` 将根据IEEE规则处理。具体来说， ``NaN`` "
"不被认为接近任何其他值，包括 ``NaN`` 。 ``inf`` 和 ``-inf`` 只被认为接近自己。"

#: ../../library/cmath.rst:300
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` —— 用于测试近似相等的函数"

#: ../../library/cmath.rst:304
msgid "Constants"
msgstr "常量"

#: ../../library/cmath.rst:308
msgid "The mathematical constant *π*, as a float."
msgstr "数学常数 *π* ，作为一个浮点数。"

#: ../../library/cmath.rst:313
msgid "The mathematical constant *e*, as a float."
msgstr "数学常数 *e* ，作为一个浮点数。"

#: ../../library/cmath.rst:318
msgid "The mathematical constant *τ*, as a float."
msgstr "数学常数 *τ* ，作为一个浮点数。"

#: ../../library/cmath.rst:325
msgid "Floating-point positive infinity. Equivalent to ``float('inf')``."
msgstr "浮点正无穷大。相当于 ``float('inf')``。"

#: ../../library/cmath.rst:332
msgid ""
"Complex number with zero real part and positive infinity imaginary part. "
"Equivalent to ``complex(0.0, float('inf'))``."
msgstr "具有零实部和正无穷虚部的复数。相当于 ``complex(0.0, float('inf'))``。"

#: ../../library/cmath.rst:340
msgid ""
"A floating-point \"not a number\" (NaN) value.  Equivalent to "
"``float('nan')``."
msgstr "浮点“非数字”（NaN）值。相当于 ``float('nan')``。"

#: ../../library/cmath.rst:348
msgid ""
"Complex number with zero real part and NaN imaginary part. Equivalent to "
"``complex(0.0, float('nan'))``."
msgstr "具有零实部和 NaN 虚部的复数。相当于 ``complex(0.0, float('nan'))``。"

#: ../../library/cmath.rst:356
msgid ""
"Note that the selection of functions is similar, but not identical, to that "
"in module :mod:`math`.  The reason for having two modules is that some users"
" aren't interested in complex numbers, and perhaps don't even know what they"
" are.  They would rather have ``math.sqrt(-1)`` raise an exception than "
"return a complex number. Also note that the functions defined in "
":mod:`cmath` always return a complex number, even if the answer can be "
"expressed as a real number (in which case the complex number has an "
"imaginary part of zero)."
msgstr ""
"请注意，函数的选择与模块 :mod:`math` 中的函数选择相似，但不完全相同。 "
"拥有两个模块的原因是因为有些用户对复数不感兴趣，甚至根本不知道它们是什么。它们宁愿 ``math.sqrt(-1)`` 引发异常，也不想返回一个复数。 "
"另请注意，被 :mod:`cmath` 定义的函数始终会返回一个复数，尽管答案可以表示为一个实数（在这种情况下，复数的虚数部分为零）。"

#: ../../library/cmath.rst:364
msgid ""
"A note on branch cuts: They are curves along which the given function fails "
"to be continuous.  They are a necessary feature of many complex functions.  "
"It is assumed that if you need to compute with complex functions, you will "
"understand about branch cuts.  Consult almost any (not too elementary) book "
"on complex variables for enlightenment.  For information of the proper "
"choice of branch cuts for numerical purposes, a good reference should be the"
" following:"
msgstr ""
"关于支割线的注释：它们是沿着给定函数无法连续的曲线。它们是许多复变函数的必要特征。 假设您需要使用复变函数进行计算，您将会了解支割线的概念。 "
"请参阅几乎所有关于复变函数的（不太基本）的书来获得启发。 对于如何正确地基于数值目的来选择支割线的相关信息，一个良好的参考如下："

#: ../../library/cmath.rst:374
msgid ""
"Kahan, W:  Branch cuts for complex elementary functions; or, Much ado about "
"nothing's sign bit.  In Iserles, A., and Powell, M. (eds.), The state of the"
" art in numerical analysis. Clarendon Press (1987) pp165--211."
msgstr ""
"Kahan, W: Branch cuts for complex elementary functions; or, Much ado about "
"nothing's sign bit. In Iserles, A., and Powell, M. (eds.), The state of the "
"art in numerical analysis. Clarendon Press (1987) pp165--211."

#: ../../library/cmath.rst:354
msgid "module"
msgstr "module"

#: ../../library/cmath.rst:354
msgid "math"
msgstr "math"
