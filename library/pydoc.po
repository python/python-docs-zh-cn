# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Alpha Du <alphanow@gmail.com>, 2021
# 汪心禾 <wangxinhe06@gmail.com>, 2023
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:12+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pydoc.rst:2
msgid ":mod:`!pydoc` --- Documentation generator and online help system"
msgstr ":mod:`!pydoc` --- 文档生成器和在线帮助系统"

#: ../../library/pydoc.rst:10
msgid "**Source code:** :source:`Lib/pydoc.py`"
msgstr "**源代码:** :source:`Lib/pydoc.py`"

#: ../../library/pydoc.rst:19
msgid ""
"The :mod:`!pydoc` module automatically generates documentation from Python "
"modules.  The documentation can be presented as pages of text on the "
"console, served to a web browser, or saved to HTML files."
msgstr ""
":mod:`!pydoc` 模块会根据 Python 模块自动生成文档。 生成的文档可在控制台中显示为文本页面，提供给 Web 浏览器或者保存为 "
"HTML 文件。"

#: ../../library/pydoc.rst:23
msgid ""
"For modules, classes, functions and methods, the displayed documentation is "
"derived from the docstring (i.e. the :attr:`~definition.__doc__` attribute) "
"of the object, and recursively of its documentable members.  If there is no "
"docstring, :mod:`!pydoc` tries to obtain a description from the block of "
"comment lines just above the definition of the class, function or method in "
"the source file, or at the top of the module (see "
":func:`inspect.getcomments`)."
msgstr ""
"对于模块、类、函数和方法，显示的文档内容取自对象的文档字符串（即 the :attr:`~definition.__doc__` "
"属性），并会递归地从其带有文档的成员中获取。  如果没有文档字符串，则 :mod:`!pydoc` "
"会尝试从源文件中类、函数或方法的定义上方，或者模块最上方的注释行代码块获取描述文本（参见 :func:`inspect.getcomments`。）"

#: ../../library/pydoc.rst:30
msgid ""
"The built-in function :func:`help` invokes the online help system in the "
"interactive interpreter, which uses :mod:`!pydoc` to generate its "
"documentation as text on the console.  The same text documentation can also "
"be viewed from outside the Python interpreter by running :program:`pydoc` as"
" a script at the operating system's command prompt. For example, running ::"
msgstr ""
"内置函数 :func:`help` 会唤起交互式解释器的在线帮助系统，该系统使用 :mod:`!pydoc` 在控制台上生成文本形式的文档内容。 "
"同样的文本文档也可以在 Python 解释器以外通过在操作系统的命令提示符中以脚本方式运行 :program:`pydoc` 来查看。 例如，运行 ::"

#: ../../library/pydoc.rst:36
msgid "python -m pydoc sys"
msgstr "python -m pydoc sys"

#: ../../library/pydoc.rst:38
msgid ""
"at a shell prompt will display documentation on the :mod:`sys` module, in a "
"style similar to the manual pages shown by the Unix :program:`man` command."
"  The argument to :program:`pydoc` can be the name of a function, module, or"
" package, or a dotted reference to a class, method, or function within a "
"module or module in a package.  If the argument to :program:`pydoc` looks "
"like a path (that is, it contains the path separator for your operating "
"system, such as a slash in Unix), and refers to an existing Python source "
"file, then documentation is produced for that file."
msgstr ""
"在终端提示符下将通过 :mod:`sys` 模块显示文档内容，其样式类似于 Unix :program:`man` 命令所显示的指南页面。 "
":program:`pydoc` 的参数可以为函数、模块、包，或带点号的对模块中的类、方法或函数以及包中的模块的引用。 如果传给 "
":program:`pydoc` 的参数像是一个路径（即包含所在操作系统的路径分隔符，例如 Unix 的正斜杠），并且其指向一个现有的 Python "
"源文件，则会为该文件生成文档内容。"

#: ../../library/pydoc.rst:49
msgid ""
"In order to find objects and their documentation, :mod:`!pydoc` imports the "
"module(s) to be documented.  Therefore, any code on module level will be "
"executed on that occasion.  Use an ``if __name__ == '__main__':`` guard to "
"only execute code when a file is invoked as a script and not just imported."
msgstr ""
"为了找到对象及其文档的内容，:mod:`!pydoc` 会导入文档所属的模块。 因而，在此情况下任何模块层级的代码都将被执行。 请使用 ``if "
"__name__ == '__main__':`` 来确保特定代码仅在文件是作为脚本被唤起而不是被导入时执行。"

#: ../../library/pydoc.rst:54
msgid ""
"When printing output to the console, :program:`pydoc` attempts to paginate "
"the output for easier reading.  If either the :envvar:`MANPAGER` or the "
":envvar:`PAGER` environment variable is set, :program:`pydoc` will use its "
"value as a pagination program. When both are set, :envvar:`MANPAGER` is "
"used."
msgstr ""
"当将输出打印到控制台时，:program:`pydoc` 会尝试对输出进行分页以更容易阅读。 如果设置了 :envvar:`MANPAGER` 或 "
":envvar:`PAGER` 环境变量，:program:`pydoc` 将使用其值作为分页程序。 当两者均被设置时，将使用 "
":envvar:`MANPAGER`。"

#: ../../library/pydoc.rst:59
msgid ""
"Specifying a ``-w`` flag before the argument will cause HTML documentation "
"to be written out to a file in the current directory, instead of displaying "
"text on the console."
msgstr "在参数前指定 ``-w`` 旗标将把 HTML 文档写入到当前目录下的一个文件中，而不是在控制台中显示文本。"

#: ../../library/pydoc.rst:63
msgid ""
"Specifying a ``-k`` flag before the argument will search the synopsis lines "
"of all available modules for the keyword given as the argument, again in a "
"manner similar to the Unix :program:`man` command.  The synopsis line of a "
"module is the first line of its documentation string."
msgstr ""
"在参数前指定 ``-k`` 旗标将在全部可用模块的提要行中搜索参数所给定的关键字，具体方式同样类似于 Unix :program:`man` 命令。 "
"模块的提要行就是其文档字符串的第一行。"

#: ../../library/pydoc.rst:68
msgid ""
"You can also use :program:`pydoc` to start an HTTP server on the local "
"machine that will serve documentation to visiting web browsers.  "
":program:`python -m pydoc -p 1234` will start a HTTP server on port 1234, "
"allowing you to browse the documentation at ``http://localhost:1234/`` in "
"your preferred web browser. Specifying ``0`` as the port number will select "
"an arbitrary unused port."
msgstr ""
"你还可以使用 :program:`pydoc` 在本机上启动一个 HTTP 服务器并向来访的 Web 浏览器展示文档。 :program:`python"
" -m pydoc -p 1234` 将在 1234 端口上启动 HTTP 服务器，允许在你所用的 Web 浏览器上通过 "
"``http://localhost:1234/`` 来浏览文档。 指定 ``0`` 作为端口号将任意选择一个未使用的端口。"

#: ../../library/pydoc.rst:74
msgid ""
":program:`python -m pydoc -n <hostname>` will start the server listening at "
"the given hostname.  By default the hostname is 'localhost' but if you want "
"the server to be reached from other machines, you may want to change the "
"host name that the server responds to.  During development this is "
"especially useful if you want to run pydoc from within a container."
msgstr ""
":program:`python -m pydoc -n <hostname>` 将启动在给定主机名上监听的服务器。 默认的主机名为 "
"'localhost' 但是如果你希望能从其他机器上搜索该服务器，你可能会想要改变服务器所响应的主机名。 "
"在开发阶段此特性会特别有用，如果你想要在一个容器中运行 pydoc 的话。"

#: ../../library/pydoc.rst:80
msgid ""
":program:`python -m pydoc -b` will start the server and additionally open a "
"web browser to a module index page.  Each served page has a navigation bar "
"at the top where you can *Get* help on an individual item, *Search* all "
"modules with a keyword in their synopsis line, and go to the *Module index*,"
" *Topics* and *Keywords* pages."
msgstr ""
":program:`python -m pydoc -b` 将启动服务器并额外打开一个 Web 浏览器访问模块索引页。 "
"所发布的每个页面顶端都带有导航栏，你可以点击 *Get* 来获取特定条目的帮助信息，点击 *Search* 在所有模块的摘要行中搜索某个关键词，或点击 "
"*Module index*, *Topics* 和 *Keywords* 前往相应的页面。"

#: ../../library/pydoc.rst:86
msgid ""
"When :program:`pydoc` generates documentation, it uses the current "
"environment and path to locate modules.  Thus, invoking :program:`pydoc "
"spam` documents precisely the version of the module you would get if you "
"started the Python interpreter and typed ``import spam``."
msgstr ""
"当 :program:`pydoc` 生成文档内容时，它会使用当前环境和路径来定位模块。 因此，唤起 :program:`pydoc spam` "
"得到的文档版本会与你启动 Python 解释器并输入 ``import spam`` 时得到的模块版本完全相同。"

#: ../../library/pydoc.rst:91
msgid ""
"Module docs for core modules are assumed to reside in "
"``https://docs.python.org/X.Y/library/`` where ``X`` and ``Y`` are the major"
" and minor version numbers of the Python interpreter.  This can be "
"overridden by setting the :envvar:`!PYTHONDOCS` environment variable to a "
"different URL or to a local directory containing the Library Reference "
"Manual pages."
msgstr ""
"核心模块的模块文档应当位于 ``https://docs.python.org/X.Y/library/`` 其中 ``X`` 和 ``Y`` 是 "
"Python 解释器的主要和次要版本号。 这可以通过将 :envvar:`!PYTHONDOCS` 环境变量设为不同的 URL "
"或包含标准库参考指南页面的本地目录来覆盖。"

#: ../../library/pydoc.rst:98
msgid "Added the ``-b`` option."
msgstr "添加 ``-b`` 选项。"

#: ../../library/pydoc.rst:101
msgid "The ``-g`` command line option was removed."
msgstr "命令行选项 ``-g`` 已经移除。"

#: ../../library/pydoc.rst:104
msgid ""
":mod:`!pydoc` now uses :func:`inspect.signature` rather than "
":func:`inspect.getfullargspec` to extract signature information from "
"callables."
msgstr ""
"现在 :mod:`!pydoc` 会使用 :func:`inspect.signature` 而不是 "
":func:`inspect.getfullargspec` 来从可调用对象中提取签名信息。"

#: ../../library/pydoc.rst:109
msgid "Added the ``-n`` option."
msgstr "添加 ``-n`` 选项。"

#: ../../library/pydoc.rst:12
msgid "documentation"
msgstr "文档"

#: ../../library/pydoc.rst:12
msgid "generation"
msgstr "生成"

#: ../../library/pydoc.rst:12
msgid "online"
msgstr "在线"

#: ../../library/pydoc.rst:12
msgid "help"
msgstr "help"
