# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:18+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/threading.rst:2
msgid ":mod:`threading` --- Thread-based parallelism"
msgstr ""

#: ../../library/threading.rst:7
msgid "**Source code:** :source:`Lib/threading.py`"
msgstr ""

#: ../../library/threading.rst:11
msgid ""
"This module constructs higher-level threading interfaces on top of the lower"
" level :mod:`_thread` module.  See also the :mod:`queue` module."
msgstr ""

#: ../../library/threading.rst:14
msgid "This module used to be optional, it is now always available."
msgstr ""

#: ../../library/threading.rst:19
msgid ""
"While they are not listed below, the ``camelCase`` names used for some "
"methods and functions in this module in the Python 2.x series are still "
"supported by this module."
msgstr ""

#: ../../library/threading.rst:26
msgid ""
"In CPython, due to the :term:`Global Interpreter Lock <global interpreter "
"lock>`, only one thread can execute Python code at once (even though certain"
" performance-oriented libraries might overcome this limitation). If you want"
" your application to make better use of the computational resources of "
"multi-core machines, you are advised to use :mod:`multiprocessing` or "
":class:`concurrent.futures.ProcessPoolExecutor`. However, threading is still"
" an appropriate model if you want to run multiple I/O-bound tasks "
"simultaneously."
msgstr ""

#: ../../library/threading.rst:37
msgid "This module defines the following functions:"
msgstr ""

#: ../../library/threading.rst:42
msgid ""
"Return the number of :class:`Thread` objects currently alive.  The returned "
"count is equal to the length of the list returned by :func:`.enumerate`."
msgstr ""

#: ../../library/threading.rst:48
msgid ""
"Return the current :class:`Thread` object, corresponding to the caller's "
"thread of control.  If the caller's thread of control was not created "
"through the :mod:`threading` module, a dummy thread object with limited "
"functionality is returned."
msgstr ""

#: ../../library/threading.rst:56
msgid "Handle uncaught exception raised by :func:`Thread.run`."
msgstr ""

#: ../../library/threading.rst:58
msgid "The *args* argument has the following attributes:"
msgstr ""

#: ../../library/threading.rst:60
msgid "*exc_type*: Exception type."
msgstr ""

#: ../../library/threading.rst:61
msgid "*exc_value*: Exception value, can be ``None``."
msgstr ""

#: ../../library/threading.rst:62
msgid "*exc_traceback*: Exception traceback, can be ``None``."
msgstr ""

#: ../../library/threading.rst:63
msgid "*thread*: Thread which raised the exception, can be ``None``."
msgstr ""

#: ../../library/threading.rst:65
msgid ""
"If *exc_type* is :exc:`SystemExit`, the exception is silently ignored. "
"Otherwise, the exception is printed out on :data:`sys.stderr`."
msgstr ""

#: ../../library/threading.rst:68
msgid ""
"If  this function raises an exception, :func:`sys.excepthook` is called to "
"handle it."
msgstr ""

#: ../../library/threading.rst:71
msgid ""
":func:`threading.excepthook` can be overridden to control how uncaught "
"exceptions raised by :func:`Thread.run` are handled."
msgstr ""

#: ../../library/threading.rst:74
msgid ""
"Storing *exc_value* using a custom hook can create a reference cycle. It "
"should be cleared explicitly to break the reference cycle when the exception"
" is no longer needed."
msgstr ""

#: ../../library/threading.rst:78
msgid ""
"Storing *thread* using a custom hook can resurrect it if it is set to an "
"object which is being finalized. Avoid storing *thread* after the custom "
"hook completes to avoid resurrecting objects."
msgstr ""

#: ../../library/threading.rst:83
msgid ":func:`sys.excepthook` handles uncaught exceptions."
msgstr ""

#: ../../library/threading.rst:90
msgid ""
"Return the 'thread identifier' of the current thread.  This is a nonzero "
"integer.  Its value has no direct meaning; it is intended as a magic cookie "
"to be used e.g. to index a dictionary of thread-specific data.  Thread "
"identifiers may be recycled when a thread exits and another thread is "
"created."
msgstr ""

#: ../../library/threading.rst:101
msgid ""
"Return the native integral Thread ID of the current thread assigned by the "
"kernel. This is a non-negative integer. Its value may be used to uniquely "
"identify this particular thread system-wide (until the thread terminates, "
"after which the value may be recycled by the OS)."
msgstr ""

#: ../../library/threading.rst:107
msgid ""
":ref:`Availability <availability>`: Windows, FreeBSD, Linux, macOS, OpenBSD,"
" NetBSD, AIX."
msgstr ""

#: ../../library/threading.rst:113
msgid ""
"Return a list of all :class:`Thread` objects currently active.  The list "
"includes daemonic threads and dummy thread objects created by "
":func:`current_thread`.  It excludes terminated threads and threads that "
"have not yet been started.  However, the main thread is always part of the "
"result, even when terminated."
msgstr ""

#: ../../library/threading.rst:122
msgid ""
"Return the main :class:`Thread` object.  In normal conditions, the main "
"thread is the thread from which the Python interpreter was started."
msgstr ""

#: ../../library/threading.rst:133
msgid ""
"Set a trace function for all threads started from the :mod:`threading` "
"module. The *func* will be passed to  :func:`sys.settrace` for each thread, "
"before its :meth:`~Thread.run` method is called."
msgstr ""

#: ../../library/threading.rst:142
msgid ""
"Set a profile function for all threads started from the :mod:`threading` "
"module. The *func* will be passed to  :func:`sys.setprofile` for each "
"thread, before its :meth:`~Thread.run` method is called."
msgstr ""

#: ../../library/threading.rst:149
msgid ""
"Return the thread stack size used when creating new threads.  The optional "
"*size* argument specifies the stack size to be used for subsequently created"
" threads, and must be 0 (use platform or configured default) or a positive "
"integer value of at least 32,768 (32 KiB). If *size* is not specified, 0 is "
"used.  If changing the thread stack size is unsupported, a "
":exc:`RuntimeError` is raised.  If the specified stack size is invalid, a "
":exc:`ValueError` is raised and the stack size is unmodified.  32 KiB is "
"currently the minimum supported stack size value to guarantee sufficient "
"stack space for the interpreter itself.  Note that some platforms may have "
"particular restrictions on values for the stack size, such as requiring a "
"minimum stack size > 32 KiB or requiring allocation in multiples of the "
"system memory page size - platform documentation should be referred to for "
"more information (4 KiB pages are common; using multiples of 4096 for the "
"stack size is the suggested approach in the absence of more specific "
"information)."
msgstr ""

#: ../../library/threading.rst:164
msgid ""
":ref:`Availability <availability>`: Windows, systems with POSIX threads."
msgstr ""

#: ../../library/threading.rst:167
msgid "This module also defines the following constant:"
msgstr ""

#: ../../library/threading.rst:171
msgid ""
"The maximum value allowed for the *timeout* parameter of blocking functions "
"(:meth:`Lock.acquire`, :meth:`RLock.acquire`, :meth:`Condition.wait`, etc.)."
" Specifying a timeout greater than this value will raise an "
":exc:`OverflowError`."
msgstr ""

#: ../../library/threading.rst:179
msgid ""
"This module defines a number of classes, which are detailed in the sections "
"below."
msgstr ""

#: ../../library/threading.rst:182
msgid ""
"The design of this module is loosely based on Java's threading model. "
"However, where Java makes locks and condition variables basic behavior of "
"every object, they are separate objects in Python.  Python's :class:`Thread`"
" class supports a subset of the behavior of Java's Thread class; currently, "
"there are no priorities, no thread groups, and threads cannot be destroyed, "
"stopped, suspended, resumed, or interrupted.  The static methods of Java's "
"Thread class, when implemented, are mapped to module-level functions."
msgstr ""

#: ../../library/threading.rst:190
msgid "All of the methods described below are executed atomically."
msgstr ""

#: ../../library/threading.rst:194
msgid "Thread-Local Data"
msgstr ""

#: ../../library/threading.rst:196
msgid ""
"Thread-local data is data whose values are thread specific.  To manage "
"thread-local data, just create an instance of :class:`local` (or a subclass)"
" and store attributes on it::"
msgstr ""

#: ../../library/threading.rst:203
msgid "The instance's values will be different for separate threads."
msgstr ""

#: ../../library/threading.rst:208
msgid "A class that represents thread-local data."
msgstr ""

#: ../../library/threading.rst:210
msgid ""
"For more details and extensive examples, see the documentation string of the"
" :mod:`_threading_local` module."
msgstr ""

#: ../../library/threading.rst:217
msgid "Thread Objects"
msgstr ""

#: ../../library/threading.rst:219
msgid ""
"The :class:`Thread` class represents an activity that is run in a separate "
"thread of control.  There are two ways to specify the activity: by passing a"
" callable object to the constructor, or by overriding the "
":meth:`~Thread.run` method in a subclass.  No other methods (except for the "
"constructor) should be overridden in a subclass.  In other words, *only*  "
"override the :meth:`~Thread.__init__` and :meth:`~Thread.run` methods of "
"this class."
msgstr ""

#: ../../library/threading.rst:226
msgid ""
"Once a thread object is created, its activity must be started by calling the"
" thread's :meth:`~Thread.start` method.  This invokes the "
":meth:`~Thread.run` method in a separate thread of control."
msgstr ""

#: ../../library/threading.rst:230
msgid ""
"Once the thread's activity is started, the thread is considered 'alive'. It "
"stops being alive when its :meth:`~Thread.run` method terminates -- either "
"normally, or by raising an unhandled exception.  The "
":meth:`~Thread.is_alive` method tests whether the thread is alive."
msgstr ""

#: ../../library/threading.rst:235
msgid ""
"Other threads can call a thread's :meth:`~Thread.join` method.  This blocks "
"the calling thread until the thread whose :meth:`~Thread.join` method is "
"called is terminated."
msgstr ""

#: ../../library/threading.rst:239
msgid ""
"A thread has a name.  The name can be passed to the constructor, and read or"
" changed through the :attr:`~Thread.name` attribute."
msgstr ""

#: ../../library/threading.rst:242
msgid ""
"If the :meth:`~Thread.run` method raises an exception, "
":func:`threading.excepthook` is called to handle it. By default, "
":func:`threading.excepthook` ignores silently :exc:`SystemExit`."
msgstr ""

#: ../../library/threading.rst:246
msgid ""
"A thread can be flagged as a \"daemon thread\".  The significance of this "
"flag is that the entire Python program exits when only daemon threads are "
"left.  The initial value is inherited from the creating thread.  The flag "
"can be set through the :attr:`~Thread.daemon` property or the *daemon* "
"constructor argument."
msgstr ""

#: ../../library/threading.rst:253
msgid ""
"Daemon threads are abruptly stopped at shutdown.  Their resources (such as "
"open files, database transactions, etc.) may not be released properly. If "
"you want your threads to stop gracefully, make them non-daemonic and use a "
"suitable signalling mechanism such as an :class:`Event`."
msgstr ""

#: ../../library/threading.rst:258
msgid ""
"There is a \"main thread\" object; this corresponds to the initial thread of"
" control in the Python program.  It is not a daemon thread."
msgstr ""

#: ../../library/threading.rst:261
msgid ""
"There is the possibility that \"dummy thread objects\" are created. These "
"are thread objects corresponding to \"alien threads\", which are threads of "
"control started outside the threading module, such as directly from C code."
"  Dummy thread objects have limited functionality; they are always "
"considered alive and daemonic, and cannot be :meth:`~Thread.join`\\ ed.  "
"They are never deleted, since it is impossible to detect the termination of "
"alien threads."
msgstr ""

#: ../../library/threading.rst:272
msgid ""
"This constructor should always be called with keyword arguments.  Arguments "
"are:"
msgstr ""

#: ../../library/threading.rst:275
msgid ""
"*group* should be ``None``; reserved for future extension when a "
":class:`ThreadGroup` class is implemented."
msgstr ""

#: ../../library/threading.rst:278
msgid ""
"*target* is the callable object to be invoked by the :meth:`run` method. "
"Defaults to ``None``, meaning nothing is called."
msgstr ""

#: ../../library/threading.rst:281
msgid ""
"*name* is the thread name.  By default, a unique name is constructed of the "
"form \"Thread-*N*\" where *N* is a small decimal number."
msgstr ""

#: ../../library/threading.rst:284
msgid ""
"*args* is the argument tuple for the target invocation.  Defaults to ``()``."
msgstr ""

#: ../../library/threading.rst:286
msgid ""
"*kwargs* is a dictionary of keyword arguments for the target invocation. "
"Defaults to ``{}``."
msgstr ""

#: ../../library/threading.rst:289
msgid ""
"If not ``None``, *daemon* explicitly sets whether the thread is daemonic. If"
" ``None`` (the default), the daemonic property is inherited from the current"
" thread."
msgstr ""

#: ../../library/threading.rst:293
msgid ""
"If the subclass overrides the constructor, it must make sure to invoke the "
"base class constructor (``Thread.__init__()``) before doing anything else to"
" the thread."
msgstr ""

#: ../../library/threading.rst:297
msgid "Added the *daemon* argument."
msgstr ""

#: ../../library/threading.rst:302
msgid "Start the thread's activity."
msgstr ""

#: ../../library/threading.rst:304
msgid ""
"It must be called at most once per thread object.  It arranges for the "
"object's :meth:`~Thread.run` method to be invoked in a separate thread of "
"control."
msgstr ""

#: ../../library/threading.rst:308
msgid ""
"This method will raise a :exc:`RuntimeError` if called more than once on the"
" same thread object."
msgstr ""

#: ../../library/threading.rst:313
msgid "Method representing the thread's activity."
msgstr ""

#: ../../library/threading.rst:315
msgid ""
"You may override this method in a subclass.  The standard :meth:`run` method"
" invokes the callable object passed to the object's constructor as the "
"*target* argument, if any, with positional and keyword arguments taken from "
"the *args* and *kwargs* arguments, respectively."
msgstr ""

#: ../../library/threading.rst:322
msgid ""
"Wait until the thread terminates. This blocks the calling thread until the "
"thread whose :meth:`~Thread.join` method is called terminates -- either "
"normally or through an unhandled exception -- or until the optional timeout "
"occurs."
msgstr ""

#: ../../library/threading.rst:327
msgid ""
"When the *timeout* argument is present and not ``None``, it should be a "
"floating point number specifying a timeout for the operation in seconds (or "
"fractions thereof). As :meth:`~Thread.join` always returns ``None``, you "
"must call :meth:`~Thread.is_alive` after :meth:`~Thread.join` to decide "
"whether a timeout happened -- if the thread is still alive, the "
":meth:`~Thread.join` call timed out."
msgstr ""

#: ../../library/threading.rst:334
msgid ""
"When the *timeout* argument is not present or ``None``, the operation will "
"block until the thread terminates."
msgstr ""

#: ../../library/threading.rst:337
msgid "A thread can be :meth:`~Thread.join`\\ ed many times."
msgstr ""

#: ../../library/threading.rst:339
msgid ""
":meth:`~Thread.join` raises a :exc:`RuntimeError` if an attempt is made to "
"join the current thread as that would cause a deadlock. It is also an error "
"to :meth:`~Thread.join` a thread before it has been started and attempts to "
"do so raise the same exception."
msgstr ""

#: ../../library/threading.rst:346
msgid ""
"A string used for identification purposes only. It has no semantics. "
"Multiple threads may be given the same name.  The initial name is set by the"
" constructor."
msgstr ""

#: ../../library/threading.rst:353
msgid ""
"Old getter/setter API for :attr:`~Thread.name`; use it directly as a "
"property instead."
msgstr ""

#: ../../library/threading.rst:358
msgid ""
"The 'thread identifier' of this thread or ``None`` if the thread has not "
"been started.  This is a nonzero integer.  See the :func:`get_ident` "
"function.  Thread identifiers may be recycled when a thread exits and "
"another thread is created.  The identifier is available even after the "
"thread has exited."
msgstr ""

#: ../../library/threading.rst:366
msgid ""
"The native integral thread ID of this thread. This is a non-negative "
"integer, or ``None`` if the thread has not been started. See the "
":func:`get_native_id` function. This represents the Thread ID (``TID``) as "
"assigned to the thread by the OS (kernel).  Its value may be used to "
"uniquely identify this particular thread system-wide (until the thread "
"terminates, after which the value may be recycled by the OS)."
msgstr ""

#: ../../library/threading.rst:376
msgid ""
"Similar to Process IDs, Thread IDs are only valid (guaranteed unique system-"
"wide) from the time the thread is created until the thread has been "
"terminated."
msgstr ""

#: ../../library/threading.rst:381
msgid ""
":ref:`Availability <availability>`: Requires :func:`get_native_id` function."
msgstr ""

#: ../../library/threading.rst:386
msgid "Return whether the thread is alive."
msgstr ""

#: ../../library/threading.rst:388
msgid ""
"This method returns ``True`` just before the :meth:`~Thread.run` method "
"starts until just after the :meth:`~Thread.run` method terminates.  The "
"module function :func:`.enumerate` returns a list of all alive threads."
msgstr ""

#: ../../library/threading.rst:394
msgid ""
"A boolean value indicating whether this thread is a daemon thread (True) or "
"not (False).  This must be set before :meth:`~Thread.start` is called, "
"otherwise :exc:`RuntimeError` is raised.  Its initial value is inherited "
"from the creating thread; the main thread is not a daemon thread and "
"therefore all threads created in the main thread default to "
":attr:`~Thread.daemon` = ``False``."
msgstr ""

#: ../../library/threading.rst:401
msgid ""
"The entire Python program exits when no alive non-daemon threads are left."
msgstr ""

#: ../../library/threading.rst:406
msgid ""
"Old getter/setter API for :attr:`~Thread.daemon`; use it directly as a "
"property instead."
msgstr ""

#: ../../library/threading.rst:413
msgid "Lock Objects"
msgstr ""

#: ../../library/threading.rst:415
msgid ""
"A primitive lock is a synchronization primitive that is not owned by a "
"particular thread when locked.  In Python, it is currently the lowest level "
"synchronization primitive available, implemented directly by the "
":mod:`_thread` extension module."
msgstr ""

#: ../../library/threading.rst:420
msgid ""
"A primitive lock is in one of two states, \"locked\" or \"unlocked\". It is "
"created in the unlocked state.  It has two basic methods, "
":meth:`~Lock.acquire` and :meth:`~Lock.release`.  When the state is "
"unlocked, :meth:`~Lock.acquire` changes the state to locked and returns "
"immediately.  When the state is locked, :meth:`~Lock.acquire` blocks until a"
" call to :meth:`~Lock.release` in another thread changes it to unlocked, "
"then the :meth:`~Lock.acquire` call resets it to locked and returns.  The "
":meth:`~Lock.release` method should only be called in the locked state; it "
"changes the state to unlocked and returns immediately. If an attempt is made"
" to release an unlocked lock, a :exc:`RuntimeError` will be raised."
msgstr ""

#: ../../library/threading.rst:431
msgid ""
"Locks also support the :ref:`context management protocol <with-locks>`."
msgstr ""

#: ../../library/threading.rst:433
msgid ""
"When more than one thread is blocked in :meth:`~Lock.acquire` waiting for "
"the state to turn to unlocked, only one thread proceeds when a "
":meth:`~Lock.release` call resets the state to unlocked; which one of the "
"waiting threads proceeds is not defined, and may vary across "
"implementations."
msgstr ""

#: ../../library/threading.rst:438
msgid "All methods are executed atomically."
msgstr ""

#: ../../library/threading.rst:443
msgid ""
"The class implementing primitive lock objects.  Once a thread has acquired a"
" lock, subsequent attempts to acquire it block, until it is released; any "
"thread may release it."
msgstr ""

#: ../../library/threading.rst:447
msgid ""
"Note that ``Lock`` is actually a factory function which returns an instance "
"of the most efficient version of the concrete Lock class that is supported "
"by the platform."
msgstr ""

#: ../../library/threading.rst:454 ../../library/threading.rst:534
msgid "Acquire a lock, blocking or non-blocking."
msgstr ""

#: ../../library/threading.rst:456
msgid ""
"When invoked with the *blocking* argument set to ``True`` (the default), "
"block until the lock is unlocked, then set it to locked and return ``True``."
msgstr ""

#: ../../library/threading.rst:459
msgid ""
"When invoked with the *blocking* argument set to ``False``, do not block. If"
" a call with *blocking* set to ``True`` would block, return ``False`` "
"immediately; otherwise, set the lock to locked and return ``True``."
msgstr ""

#: ../../library/threading.rst:463
msgid ""
"When invoked with the floating-point *timeout* argument set to a positive "
"value, block for at most the number of seconds specified by *timeout* and as"
" long as the lock cannot be acquired.  A *timeout* argument of ``-1`` "
"specifies an unbounded wait.  It is forbidden to specify a *timeout* when "
"*blocking* is false."
msgstr ""

#: ../../library/threading.rst:469
msgid ""
"The return value is ``True`` if the lock is acquired successfully, ``False``"
" if not (for example if the *timeout* expired)."
msgstr ""

#: ../../library/threading.rst:472 ../../library/threading.rst:556
#: ../../library/threading.rst:801
msgid "The *timeout* parameter is new."
msgstr ""

#: ../../library/threading.rst:475
msgid ""
"Lock acquisition can now be interrupted by signals on POSIX if the "
"underlying threading implementation supports it."
msgstr ""

#: ../../library/threading.rst:482
msgid ""
"Release a lock.  This can be called from any thread, not only the thread "
"which has acquired the lock."
msgstr ""

#: ../../library/threading.rst:485
msgid ""
"When the lock is locked, reset it to unlocked, and return.  If any other "
"threads are blocked waiting for the lock to become unlocked, allow exactly "
"one of them to proceed."
msgstr ""

#: ../../library/threading.rst:489
msgid "When invoked on an unlocked lock, a :exc:`RuntimeError` is raised."
msgstr ""

#: ../../library/threading.rst:491 ../../library/threading.rst:572
msgid "There is no return value."
msgstr ""

#: ../../library/threading.rst:495
msgid "Return true if the lock is acquired."
msgstr ""

#: ../../library/threading.rst:502
msgid "RLock Objects"
msgstr ""

#: ../../library/threading.rst:504
msgid ""
"A reentrant lock is a synchronization primitive that may be acquired "
"multiple times by the same thread.  Internally, it uses the concepts of "
"\"owning thread\" and \"recursion level\" in addition to the locked/unlocked"
" state used by primitive locks.  In the locked state, some thread owns the "
"lock; in the unlocked state, no thread owns it."
msgstr ""

#: ../../library/threading.rst:510
msgid ""
"To lock the lock, a thread calls its :meth:`~RLock.acquire` method; this "
"returns once the thread owns the lock.  To unlock the lock, a thread calls "
"its :meth:`~Lock.release` method. "
":meth:`~Lock.acquire`/:meth:`~Lock.release` call pairs may be nested; only "
"the final :meth:`~Lock.release` (the :meth:`~Lock.release` of the outermost "
"pair) resets the lock to unlocked and allows another thread blocked in "
":meth:`~Lock.acquire` to proceed."
msgstr ""

#: ../../library/threading.rst:517
msgid ""
"Reentrant locks also support the :ref:`context management protocol <with-"
"locks>`."
msgstr ""

#: ../../library/threading.rst:522
msgid ""
"This class implements reentrant lock objects.  A reentrant lock must be "
"released by the thread that acquired it.  Once a thread has acquired a "
"reentrant lock, the same thread may acquire it again without blocking; the "
"thread must release it once for each time it has acquired it."
msgstr ""

#: ../../library/threading.rst:527
msgid ""
"Note that ``RLock`` is actually a factory function which returns an instance"
" of the most efficient version of the concrete RLock class that is supported"
" by the platform."
msgstr ""

#: ../../library/threading.rst:536
msgid ""
"When invoked without arguments: if this thread already owns the lock, "
"increment the recursion level by one, and return immediately.  Otherwise, if"
" another thread owns the lock, block until the lock is unlocked.  Once the "
"lock is unlocked (not owned by any thread), then grab ownership, set the "
"recursion level to one, and return.  If more than one thread is blocked "
"waiting until the lock is unlocked, only one at a time will be able to grab "
"ownership of the lock. There is no return value in this case."
msgstr ""

#: ../../library/threading.rst:544
msgid ""
"When invoked with the *blocking* argument set to true, do the same thing as "
"when called without arguments, and return ``True``."
msgstr ""

#: ../../library/threading.rst:547
msgid ""
"When invoked with the *blocking* argument set to false, do not block.  If a "
"call without an argument would block, return ``False`` immediately; "
"otherwise, do the same thing as when called without arguments, and return "
"``True``."
msgstr ""

#: ../../library/threading.rst:551
msgid ""
"When invoked with the floating-point *timeout* argument set to a positive "
"value, block for at most the number of seconds specified by *timeout* and as"
" long as the lock cannot be acquired.  Return ``True`` if the lock has been "
"acquired, false if the timeout has elapsed."
msgstr ""

#: ../../library/threading.rst:562
msgid ""
"Release a lock, decrementing the recursion level.  If after the decrement it"
" is zero, reset the lock to unlocked (not owned by any thread), and if any "
"other threads are blocked waiting for the lock to become unlocked, allow "
"exactly one of them to proceed.  If after the decrement the recursion level "
"is still nonzero, the lock remains locked and owned by the calling thread."
msgstr ""

#: ../../library/threading.rst:568
msgid ""
"Only call this method when the calling thread owns the lock. A "
":exc:`RuntimeError` is raised if this method is called when the lock is "
"unlocked."
msgstr ""

#: ../../library/threading.rst:578
msgid "Condition Objects"
msgstr ""

#: ../../library/threading.rst:580
msgid ""
"A condition variable is always associated with some kind of lock; this can "
"be passed in or one will be created by default.  Passing one in is useful "
"when several condition variables must share the same lock.  The lock is part"
" of the condition object: you don't have to track it separately."
msgstr ""

#: ../../library/threading.rst:585
msgid ""
"A condition variable obeys the :ref:`context management protocol <with-"
"locks>`: using the ``with`` statement acquires the associated lock for the "
"duration of the enclosed block.  The :meth:`~Condition.acquire` and "
":meth:`~Condition.release` methods also call the corresponding methods of "
"the associated lock."
msgstr ""

#: ../../library/threading.rst:591
msgid ""
"Other methods must be called with the associated lock held.  The "
":meth:`~Condition.wait` method releases the lock, and then blocks until "
"another thread awakens it by calling :meth:`~Condition.notify` or "
":meth:`~Condition.notify_all`.  Once awakened, :meth:`~Condition.wait` re-"
"acquires the lock and returns.  It is also possible to specify a timeout."
msgstr ""

#: ../../library/threading.rst:597
msgid ""
"The :meth:`~Condition.notify` method wakes up one of the threads waiting for"
" the condition variable, if any are waiting.  The "
":meth:`~Condition.notify_all` method wakes up all threads waiting for the "
"condition variable."
msgstr ""

#: ../../library/threading.rst:601
msgid ""
"Note: the :meth:`~Condition.notify` and :meth:`~Condition.notify_all` "
"methods don't release the lock; this means that the thread or threads "
"awakened will not return from their :meth:`~Condition.wait` call "
"immediately, but only when the thread that called :meth:`~Condition.notify` "
"or :meth:`~Condition.notify_all` finally relinquishes ownership of the lock."
msgstr ""

#: ../../library/threading.rst:607
msgid ""
"The typical programming style using condition variables uses the lock to "
"synchronize access to some shared state; threads that are interested in a "
"particular change of state call :meth:`~Condition.wait` repeatedly until "
"they see the desired state, while threads that modify the state call "
":meth:`~Condition.notify` or :meth:`~Condition.notify_all` when they change "
"the state in such a way that it could possibly be a desired state for one of"
" the waiters.  For example, the following code is a generic producer-"
"consumer situation with unlimited buffer capacity::"
msgstr ""

#: ../../library/threading.rst:627
msgid ""
"The ``while`` loop checking for the application's condition is necessary "
"because :meth:`~Condition.wait` can return after an arbitrary long time, and"
" the condition which prompted the :meth:`~Condition.notify` call may no "
"longer hold true.  This is inherent to multi-threaded programming.  The "
":meth:`~Condition.wait_for` method can be used to automate the condition "
"checking, and eases the computation of timeouts::"
msgstr ""

#: ../../library/threading.rst:639
msgid ""
"To choose between :meth:`~Condition.notify` and "
":meth:`~Condition.notify_all`, consider whether one state change can be "
"interesting for only one or several waiting threads.  E.g. in a typical "
"producer-consumer situation, adding one item to the buffer only needs to "
"wake up one consumer thread."
msgstr ""

#: ../../library/threading.rst:647
msgid ""
"This class implements condition variable objects.  A condition variable "
"allows one or more threads to wait until they are notified by another "
"thread."
msgstr ""

#: ../../library/threading.rst:650
msgid ""
"If the *lock* argument is given and not ``None``, it must be a :class:`Lock`"
" or :class:`RLock` object, and it is used as the underlying lock.  "
"Otherwise, a new :class:`RLock` object is created and used as the underlying"
" lock."
msgstr ""

#: ../../library/threading.rst:654 ../../library/threading.rst:776
#: ../../library/threading.rst:822 ../../library/threading.rst:874
#: ../../library/threading.rst:943
msgid "changed from a factory function to a class."
msgstr ""

#: ../../library/threading.rst:659
msgid ""
"Acquire the underlying lock. This method calls the corresponding method on "
"the underlying lock; the return value is whatever that method returns."
msgstr ""

#: ../../library/threading.rst:664
msgid ""
"Release the underlying lock. This method calls the corresponding method on "
"the underlying lock; there is no return value."
msgstr ""

#: ../../library/threading.rst:669
msgid ""
"Wait until notified or until a timeout occurs. If the calling thread has not"
" acquired the lock when this method is called, a :exc:`RuntimeError` is "
"raised."
msgstr ""

#: ../../library/threading.rst:673
msgid ""
"This method releases the underlying lock, and then blocks until it is "
"awakened by a :meth:`notify` or :meth:`notify_all` call for the same "
"condition variable in another thread, or until the optional timeout occurs."
"  Once awakened or timed out, it re-acquires the lock and returns."
msgstr ""

#: ../../library/threading.rst:678
msgid ""
"When the *timeout* argument is present and not ``None``, it should be a "
"floating point number specifying a timeout for the operation in seconds (or "
"fractions thereof)."
msgstr ""

#: ../../library/threading.rst:682
msgid ""
"When the underlying lock is an :class:`RLock`, it is not released using its "
":meth:`release` method, since this may not actually unlock the lock when it "
"was acquired multiple times recursively.  Instead, an internal interface of "
"the :class:`RLock` class is used, which really unlocks it even when it has "
"been recursively acquired several times. Another internal interface is then "
"used to restore the recursion level when the lock is reacquired."
msgstr ""

#: ../../library/threading.rst:690
msgid ""
"The return value is ``True`` unless a given *timeout* expired, in which case"
" it is ``False``."
msgstr ""

#: ../../library/threading.rst:693 ../../library/threading.rst:908
msgid "Previously, the method always returned ``None``."
msgstr ""

#: ../../library/threading.rst:698
msgid ""
"Wait until a condition evaluates to true.  *predicate* should be a callable "
"which result will be interpreted as a boolean value. A *timeout* may be "
"provided giving the maximum time to wait."
msgstr ""

#: ../../library/threading.rst:702
msgid ""
"This utility method may call :meth:`wait` repeatedly until the predicate is "
"satisfied, or until a timeout occurs. The return value is the last return "
"value of the predicate and will evaluate to ``False`` if the method timed "
"out."
msgstr ""

#: ../../library/threading.rst:707
msgid ""
"Ignoring the timeout feature, calling this method is roughly equivalent to "
"writing::"
msgstr ""

#: ../../library/threading.rst:713
msgid ""
"Therefore, the same rules apply as with :meth:`wait`: The lock must be held "
"when called and is re-acquired on return.  The predicate is evaluated with "
"the lock held."
msgstr ""

#: ../../library/threading.rst:721
msgid ""
"By default, wake up one thread waiting on this condition, if any.  If the "
"calling thread has not acquired the lock when this method is called, a "
":exc:`RuntimeError` is raised."
msgstr ""

#: ../../library/threading.rst:725
msgid ""
"This method wakes up at most *n* of the threads waiting for the condition "
"variable; it is a no-op if no threads are waiting."
msgstr ""

#: ../../library/threading.rst:728
msgid ""
"The current implementation wakes up exactly *n* threads, if at least *n* "
"threads are waiting.  However, it's not safe to rely on this behavior. A "
"future, optimized implementation may occasionally wake up more than *n* "
"threads."
msgstr ""

#: ../../library/threading.rst:733
msgid ""
"Note: an awakened thread does not actually return from its :meth:`wait` call"
" until it can reacquire the lock.  Since :meth:`notify` does not release the"
" lock, its caller should."
msgstr ""

#: ../../library/threading.rst:739
msgid ""
"Wake up all threads waiting on this condition.  This method acts like "
":meth:`notify`, but wakes up all waiting threads instead of one. If the "
"calling thread has not acquired the lock when this method is called, a "
":exc:`RuntimeError` is raised."
msgstr ""

#: ../../library/threading.rst:748
msgid "Semaphore Objects"
msgstr ""

#: ../../library/threading.rst:750
msgid ""
"This is one of the oldest synchronization primitives in the history of "
"computer science, invented by the early Dutch computer scientist Edsger W. "
"Dijkstra (he used the names ``P()`` and ``V()`` instead of "
":meth:`~Semaphore.acquire` and :meth:`~Semaphore.release`)."
msgstr ""

#: ../../library/threading.rst:755
msgid ""
"A semaphore manages an internal counter which is decremented by each "
":meth:`~Semaphore.acquire` call and incremented by each "
":meth:`~Semaphore.release` call.  The counter can never go below zero; when "
":meth:`~Semaphore.acquire` finds that it is zero, it blocks, waiting until "
"some other thread calls :meth:`~Semaphore.release`."
msgstr ""

#: ../../library/threading.rst:761
msgid ""
"Semaphores also support the :ref:`context management protocol <with-locks>`."
msgstr ""

#: ../../library/threading.rst:766
msgid ""
"This class implements semaphore objects.  A semaphore manages an atomic "
"counter representing the number of :meth:`release` calls minus the number of"
" :meth:`acquire` calls, plus an initial value.  The :meth:`acquire` method "
"blocks if necessary until it can return without making the counter negative."
" If not given, *value* defaults to 1."
msgstr ""

#: ../../library/threading.rst:772
msgid ""
"The optional argument gives the initial *value* for the internal counter; it"
" defaults to ``1``. If the *value* given is less than 0, :exc:`ValueError` "
"is raised."
msgstr ""

#: ../../library/threading.rst:781
msgid "Acquire a semaphore."
msgstr ""

#: ../../library/threading.rst:783
msgid "When invoked without arguments:"
msgstr ""

#: ../../library/threading.rst:785
msgid ""
"If the internal counter is larger than zero on entry, decrement it by one "
"and return ``True`` immediately."
msgstr ""

#: ../../library/threading.rst:787
msgid ""
"If the internal counter is zero on entry, block until awoken by a call to "
":meth:`~Semaphore.release`.  Once awoken (and the counter is greater than "
"0), decrement the counter by 1 and return ``True``.  Exactly one thread will"
" be awoken by each call to :meth:`~Semaphore.release`.  The order in which "
"threads are awoken should not be relied on."
msgstr ""

#: ../../library/threading.rst:793
msgid ""
"When invoked with *blocking* set to false, do not block.  If a call without "
"an argument would block, return ``False`` immediately; otherwise, do the "
"same thing as when called without arguments, and return ``True``."
msgstr ""

#: ../../library/threading.rst:797
msgid ""
"When invoked with a *timeout* other than ``None``, it will block for at most"
" *timeout* seconds.  If acquire does not complete successfully in that "
"interval, return ``False``.  Return ``True`` otherwise."
msgstr ""

#: ../../library/threading.rst:806
msgid ""
"Release a semaphore, incrementing the internal counter by *n*.  When it was "
"zero on entry and other threads are waiting for it to become larger than "
"zero again, wake up *n* of those threads."
msgstr ""

#: ../../library/threading.rst:810
msgid "Added the *n* parameter to release multiple waiting threads at once."
msgstr ""

#: ../../library/threading.rst:816
msgid ""
"Class implementing bounded semaphore objects.  A bounded semaphore checks to"
" make sure its current value doesn't exceed its initial value.  If it does, "
":exc:`ValueError` is raised. In most situations semaphores are used to guard"
" resources with limited capacity.  If the semaphore is released too many "
"times it's a sign of a bug.  If not given, *value* defaults to 1."
msgstr ""

#: ../../library/threading.rst:829
msgid ":class:`Semaphore` Example"
msgstr ""

#: ../../library/threading.rst:831
msgid ""
"Semaphores are often used to guard resources with limited capacity, for "
"example, a database server.  In any situation where the size of the resource"
" is fixed, you should use a bounded semaphore.  Before spawning any worker "
"threads, your main thread would initialize the semaphore::"
msgstr ""

#: ../../library/threading.rst:840
msgid ""
"Once spawned, worker threads call the semaphore's acquire and release "
"methods when they need to connect to the server::"
msgstr ""

#: ../../library/threading.rst:850
msgid ""
"The use of a bounded semaphore reduces the chance that a programming error "
"which causes the semaphore to be released more than it's acquired will go "
"undetected."
msgstr ""

#: ../../library/threading.rst:857
msgid "Event Objects"
msgstr ""

#: ../../library/threading.rst:859
msgid ""
"This is one of the simplest mechanisms for communication between threads: "
"one thread signals an event and other threads wait for it."
msgstr ""

#: ../../library/threading.rst:862
msgid ""
"An event object manages an internal flag that can be set to true with the "
":meth:`~Event.set` method and reset to false with the :meth:`~Event.clear` "
"method.  The :meth:`~Event.wait` method blocks until the flag is true."
msgstr ""

#: ../../library/threading.rst:869
msgid ""
"Class implementing event objects.  An event manages a flag that can be set "
"to true with the :meth:`~Event.set` method and reset to false with the "
":meth:`clear` method.  The :meth:`wait` method blocks until the flag is "
"true. The flag is initially false."
msgstr ""

#: ../../library/threading.rst:879
msgid "Return ``True`` if and only if the internal flag is true."
msgstr ""

#: ../../library/threading.rst:883
msgid ""
"Set the internal flag to true. All threads waiting for it to become true are"
" awakened. Threads that call :meth:`wait` once the flag is true will not "
"block at all."
msgstr ""

#: ../../library/threading.rst:889
msgid ""
"Reset the internal flag to false. Subsequently, threads calling :meth:`wait`"
" will block until :meth:`.set` is called to set the internal flag to true "
"again."
msgstr ""

#: ../../library/threading.rst:895
msgid ""
"Block until the internal flag is true.  If the internal flag is true on "
"entry, return immediately.  Otherwise, block until another thread calls "
":meth:`.set` to set the flag to true, or until the optional timeout occurs."
msgstr ""

#: ../../library/threading.rst:899
msgid ""
"When the timeout argument is present and not ``None``, it should be a "
"floating point number specifying a timeout for the operation in seconds (or "
"fractions thereof)."
msgstr ""

#: ../../library/threading.rst:903
msgid ""
"This method returns ``True`` if and only if the internal flag has been set "
"to true, either before the wait call or after the wait starts, so it will "
"always return ``True`` except if a timeout is given and the operation times "
"out."
msgstr ""

#: ../../library/threading.rst:915
msgid "Timer Objects"
msgstr ""

#: ../../library/threading.rst:917
msgid ""
"This class represents an action that should be run only after a certain "
"amount of time has passed --- a timer.  :class:`Timer` is a subclass of "
":class:`Thread` and as such also functions as an example of creating custom "
"threads."
msgstr ""

#: ../../library/threading.rst:921
msgid ""
"Timers are started, as with threads, by calling their :meth:`~Timer.start` "
"method.  The timer can be stopped (before its action has begun) by calling "
"the :meth:`~Timer.cancel` method.  The interval the timer will wait before "
"executing its action may not be exactly the same as the interval specified "
"by the user."
msgstr ""

#: ../../library/threading.rst:927
msgid "For example::"
msgstr "例如："

#: ../../library/threading.rst:938
msgid ""
"Create a timer that will run *function* with arguments *args* and  keyword "
"arguments *kwargs*, after *interval* seconds have passed. If *args* is "
"``None`` (the default) then an empty list will be used. If *kwargs* is "
"``None`` (the default) then an empty dict will be used."
msgstr ""

#: ../../library/threading.rst:948
msgid ""
"Stop the timer, and cancel the execution of the timer's action.  This will "
"only work if the timer is still in its waiting stage."
msgstr ""

#: ../../library/threading.rst:953
msgid "Barrier Objects"
msgstr ""

#: ../../library/threading.rst:957
msgid ""
"This class provides a simple synchronization primitive for use by a fixed "
"number of threads that need to wait for each other.  Each of the threads "
"tries to pass the barrier by calling the :meth:`~Barrier.wait` method and "
"will block until all of the threads have made their :meth:`~Barrier.wait` "
"calls. At this point, the threads are released simultaneously."
msgstr ""

#: ../../library/threading.rst:963
msgid ""
"The barrier can be reused any number of times for the same number of "
"threads."
msgstr ""

#: ../../library/threading.rst:965
msgid ""
"As an example, here is a simple way to synchronize a client and server "
"thread::"
msgstr ""

#: ../../library/threading.rst:985
msgid ""
"Create a barrier object for *parties* number of threads.  An *action*, when "
"provided, is a callable to be called by one of the threads when they are "
"released.  *timeout* is the default timeout value if none is specified for "
"the :meth:`wait` method."
msgstr ""

#: ../../library/threading.rst:992
msgid ""
"Pass the barrier.  When all the threads party to the barrier have called "
"this function, they are all released simultaneously.  If a *timeout* is "
"provided, it is used in preference to any that was supplied to the class "
"constructor."
msgstr ""

#: ../../library/threading.rst:997
msgid ""
"The return value is an integer in the range 0 to *parties* -- 1, different "
"for each thread.  This can be used to select a thread to do some special "
"housekeeping, e.g.::"
msgstr ""

#: ../../library/threading.rst:1006
msgid ""
"If an *action* was provided to the constructor, one of the threads will have"
" called it prior to being released.  Should this call raise an error, the "
"barrier is put into the broken state."
msgstr ""

#: ../../library/threading.rst:1010
msgid "If the call times out, the barrier is put into the broken state."
msgstr ""

#: ../../library/threading.rst:1012
msgid ""
"This method may raise a :class:`BrokenBarrierError` exception if the barrier"
" is broken or reset while a thread is waiting."
msgstr ""

#: ../../library/threading.rst:1017
msgid ""
"Return the barrier to the default, empty state.  Any threads waiting on it "
"will receive the :class:`BrokenBarrierError` exception."
msgstr ""

#: ../../library/threading.rst:1020
msgid ""
"Note that using this function may require some external synchronization if "
"there are other threads whose state is unknown.  If a barrier is broken it "
"may be better to just leave it and create a new one."
msgstr ""

#: ../../library/threading.rst:1026
msgid ""
"Put the barrier into a broken state.  This causes any active or future calls"
" to :meth:`wait` to fail with the :class:`BrokenBarrierError`.  Use this for"
" example if one of the threads needs to abort, to avoid deadlocking the "
"application."
msgstr ""

#: ../../library/threading.rst:1031
msgid ""
"It may be preferable to simply create the barrier with a sensible *timeout* "
"value to automatically guard against one of the threads going awry."
msgstr ""

#: ../../library/threading.rst:1037
msgid "The number of threads required to pass the barrier."
msgstr ""

#: ../../library/threading.rst:1041
msgid "The number of threads currently waiting in the barrier."
msgstr ""

#: ../../library/threading.rst:1045
msgid "A boolean that is ``True`` if the barrier is in the broken state."
msgstr ""

#: ../../library/threading.rst:1050
msgid ""
"This exception, a subclass of :exc:`RuntimeError`, is raised when the "
":class:`Barrier` object is reset or broken."
msgstr ""

#: ../../library/threading.rst:1057
msgid ""
"Using locks, conditions, and semaphores in the :keyword:`!with` statement"
msgstr ""

#: ../../library/threading.rst:1059
msgid ""
"All of the objects provided by this module that have :meth:`acquire` and "
":meth:`release` methods can be used as context managers for a "
":keyword:`with` statement.  The :meth:`acquire` method will be called when "
"the block is entered, and :meth:`release` will be called when the block is "
"exited.  Hence, the following snippet::"
msgstr ""

#: ../../library/threading.rst:1068
msgid "is equivalent to::"
msgstr ""

#: ../../library/threading.rst:1076
msgid ""
"Currently, :class:`Lock`, :class:`RLock`, :class:`Condition`, "
":class:`Semaphore`, and :class:`BoundedSemaphore` objects may be used as "
":keyword:`with` statement context managers."
msgstr ""
