# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.dom.rst:2
msgid ":mod:`xml.dom` --- The Document Object Model API"
msgstr ":mod:`xml.dom` --- 文档对象模型 API"

#: ../../library/xml.dom.rst:10
msgid "**Source code:** :source:`Lib/xml/dom/__init__.py`"
msgstr "**源代码:** :source:`Lib/xml/dom/__init__.py`"

#: ../../library/xml.dom.rst:14
msgid ""
"The Document Object Model, or \"DOM,\" is a cross-language API from the "
"World Wide Web Consortium (W3C) for accessing and modifying XML documents.  "
"A DOM implementation presents an XML document as a tree structure, or allows"
" client code to build such a structure from scratch.  It then gives access "
"to the structure through a set of objects which provided well-known "
"interfaces."
msgstr ""
"文档对象模型“DOM”是一个来自万维网联盟（W3C）的跨语言 API，用于访问和修改 XML 文档。 DOM 的实现将 XML "
"文档以树结构表示，或者允许客户端代码从头构建这样的结构。 然后它会通过一组提供通用接口的对象赋予对结构的访问权。"

#: ../../library/xml.dom.rst:20
msgid ""
"The DOM is extremely useful for random-access applications.  SAX only allows"
" you a view of one bit of the document at a time.  If you are looking at one"
" SAX element, you have no access to another.  If you are looking at a text "
"node, you have no access to a containing element. When you write a SAX "
"application, you need to keep track of your program's position in the "
"document somewhere in your own code.  SAX does not do it for you.  Also, if "
"you need to look ahead in the XML document, you are just out of luck."
msgstr ""
"DOM 特别适用于进行随机访问的应用。 SAX 仅允许你每次查看文档的一小部分。 如果你正在查看一个 SAX 元素，你将不能访问其他元素。 "
"如果你正在查看一个文本节点，你将不能访问包含它的元素。 当你编写一个 SAX 应用时，你需要在你自己的代码的某个地方记住你的程序在文档中的位置。 SAX"
" 不会帮你做这件事。 并且，如果你想要在 XML 文档中向前查看，你是绝对办不到的。"

#: ../../library/xml.dom.rst:28
msgid ""
"Some applications are simply impossible in an event driven model with no "
"access to a tree.  Of course you could build some sort of tree yourself in "
"SAX events, but the DOM allows you to avoid writing that code.  The DOM is a"
" standard tree representation for XML data."
msgstr ""
"有些应用程序在不能访问树的事件驱动模型中是根本无法编写的。 当然你可以在 SAX 事件中自行构建某种树，但是 DOM 可以使你避免编写这样的代码。 "
"DOM 是针对 XML 数据的标准树表示形式。"

#: ../../library/xml.dom.rst:33
msgid ""
"The Document Object Model is being defined by the W3C in stages, or "
"\"levels\" in their terminology.  The Python mapping of the API is "
"substantially based on the DOM Level 2 recommendation."
msgstr ""
"文档对象模型是由 W3C 分阶段定义的，在其术语中称为“层级”。 Python 中该 API 的映射大致是基于 DOM 第 2 层级的建议。"

#: ../../library/xml.dom.rst:45
msgid ""
"DOM applications typically start by parsing some XML into a DOM.  How this "
"is accomplished is not covered at all by DOM Level 1, and Level 2 provides "
"only limited improvements: There is a :class:`DOMImplementation` object "
"class which provides access to :class:`Document` creation methods, but no "
"way to access an XML reader/parser/Document builder in an implementation-"
"independent way. There is also no well-defined way to access these methods "
"without an existing :class:`Document` object.  In Python, each DOM "
"implementation will provide a function :func:`getDOMImplementation`. DOM "
"Level 3 adds a Load/Store specification, which defines an interface to the "
"reader, but this is not yet available in the Python standard library."
msgstr ""
"DOM 应用程序通常从将某些 XML 解析为 DOM 开始。 此操作如何实现完全未被 DOM 第 1 层级所涉及，而第 2 "
"层级也只提供了有限的改进：有一个 :class:`DOMImplementation` 对象类，它提供对 :class:`Document` "
"创建方法的访问，但却没有办法以不依赖具体实现的方式访问 XML 读取器/解析器/文档创建器。 也没有当不存在 :class:`Document` "
"对象的情况下访问这些方法的定义良好的方式。 在 Python 中，每个 DOM 实现将提供一个函数 "
":func:`getDOMImplementation`。 DOM 第 3 层级增加了一个载入/存储规格说明，它定义了与读取器的接口，但这在 "
"Python 标准库中尚不可用。"

#: ../../library/xml.dom.rst:56
msgid ""
"Once you have a DOM document object, you can access the parts of your XML "
"document through its properties and methods.  These properties are defined "
"in the DOM specification; this portion of the reference manual describes the"
" interpretation of the specification in Python."
msgstr ""
"一旦你得到了 DOM 文档对象，你就可以通过 XML 文档的属性和方法访问它的各个部分。 这些属性定义在 DOM 规格说明当中；参考指南的这一部分描述了"
" Python 对此规格说明的解读。"

#: ../../library/xml.dom.rst:61
msgid ""
"The specification provided by the W3C defines the DOM API for Java, "
"ECMAScript, and OMG IDL.  The Python mapping defined here is based in large "
"part on the IDL version of the specification, but strict compliance is not "
"required (though implementations are free to support the strict mapping from"
" IDL).  See section :ref:`dom-conformance` for a detailed discussion of "
"mapping requirements."
msgstr ""
"W3C 提供的规格说明定义了适用于 Java, ECMAScript 和 OMG IDL 的 DOM API。 这里定义的 Python "
"映射很大程度上是基于此规格说明的 IDL 版本，但并不要求严格映射（但具体实现可以自由地支持对 IDL 的严格映射）。 请参阅 :ref:`dom-"
"conformance` 一节查看有关映射要求的详细讨论。"

#: ../../library/xml.dom.rst:71
msgid ""
"`Document Object Model (DOM) Level 2 Specification "
"<https://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/>`_"
msgstr ""
"`文档对象模型 (DOM) 第 2 层级规格说明 <https://www.w3.org/TR/2000/REC-DOM-"
"Level-2-Core-20001113/>`_"

#: ../../library/xml.dom.rst:71
msgid "The W3C recommendation upon which the Python DOM API is based."
msgstr "被 Python DOM API 作为基础的 W3C 建议。"

#: ../../library/xml.dom.rst:74
msgid ""
"`Document Object Model (DOM) Level 1 Specification "
"<https://www.w3.org/TR/REC-DOM-Level-1/>`_"
msgstr "`文档对象模型 (DOM) 第 1 层级规格说明 <https://www.w3.org/TR/REC-DOM-Level-1/>`_"

#: ../../library/xml.dom.rst:74
msgid ""
"The W3C recommendation for the DOM supported by :mod:`xml.dom.minidom`."
msgstr "被 :mod:`xml.dom.minidom` 所支持的 W3C 针对 DOM 的建议。"

#: ../../library/xml.dom.rst:76
msgid ""
"`Python Language Mapping Specification "
"<https://www.omg.org/spec/PYTH/1.2/PDF>`_"
msgstr "`Python 语言映射规格说明 <https://www.omg.org/spec/PYTH/1.2/PDF>`_"

#: ../../library/xml.dom.rst:77
msgid "This specifies the mapping from OMG IDL to Python."
msgstr "此文档指明了从 OMG IDL 到 Python 的映射。"

#: ../../library/xml.dom.rst:81
msgid "Module Contents"
msgstr "模块内容"

#: ../../library/xml.dom.rst:83
msgid "The :mod:`xml.dom` contains the following functions:"
msgstr ":mod:`xml.dom` 包含下列函数:"

#: ../../library/xml.dom.rst:88
msgid ""
"Register the *factory* function with the name *name*.  The factory function "
"should return an object which implements the :class:`DOMImplementation` "
"interface.  The factory function can return the same object every time, or a"
" new one for each call, as appropriate for the specific implementation (e.g."
" if that implementation supports some customization)."
msgstr ""
"注册 *factory* 函数并使用名称 *name*。 该工厂函数应当返回一个实现了 :class:`DOMImplementation` "
"接口的对象。 该工厂函数可每次都返回相同对象，或每次调用都返回新的对象，视具体实现的要求而定（例如该实现是否支持某些定制功能）。"

#: ../../library/xml.dom.rst:97
msgid ""
"Return a suitable DOM implementation. The *name* is either well-known, the "
"module name of a DOM implementation, or ``None``. If it is not ``None``, "
"imports the corresponding module and returns a :class:`DOMImplementation` "
"object if the import succeeds.  If no name is given, and if the environment "
"variable :envvar:`PYTHON_DOM` is set, this variable is used to find the "
"implementation."
msgstr ""
"返回一个适当的 DOM 实现。 *name* 是通用名称、DOM 实现的模块名称或者 ``None``。 如果它不为 "
"``None``，则会导入相应模块并在导入成功时返回一个 :class:`DOMImplementation` 对象。 如果没有给出名称，并且如果设置了"
" :envvar:`PYTHON_DOM` 环境变量，此变量会被用来查找相应的实现。"

#: ../../library/xml.dom.rst:103
msgid ""
"If name is not given, this examines the available implementations to find "
"one with the required feature set.  If no implementation can be found, raise"
" an :exc:`ImportError`.  The features list must be a sequence of ``(feature,"
" version)`` pairs which are passed to the :meth:`hasFeature` method on "
"available :class:`DOMImplementation` objects."
msgstr ""
"如果未给出 name，此函数会检查可用的实现来查找具有所需特性集的一个。 如果找不到任何实现，则会引发 :exc:`ImportError`。 "
"features 集必须是包含 ``(feature, version)`` 对的序列，它会被传给可用的 "
":class:`DOMImplementation` 对象上的 :meth:`hasFeature` 方法。"

#: ../../library/xml.dom.rst:109
msgid "Some convenience constants are also provided:"
msgstr "还提供了一些便捷常量:"

#: ../../library/xml.dom.rst:114
msgid ""
"The value used to indicate that no namespace is associated with a node in "
"the DOM.  This is typically found as the :attr:`namespaceURI` of a node, or "
"used as the *namespaceURI* parameter to a namespaces-specific method."
msgstr ""
"该值用于指明没有命名空间被关联到 DOM 中的某个节点。 它通常被作为某个节点的 "
":attr:`namespaceURI`，或者被用作某个命名空间专属方法的 *namespaceURI* 参数。"

#: ../../library/xml.dom.rst:121
msgid ""
"The namespace URI associated with the reserved prefix ``xml``, as defined by"
" `Namespaces in XML <https://www.w3.org/TR/REC-xml-names/>`_ (section 4)."
msgstr ""
"关联到保留前缀 ``xml`` 的命名空间 URI，如 `XML 中的命名空间 <https://www.w3.org/TR/REC-xml-"
"names/>`_ （第 4 节） 所定义的。"

#: ../../library/xml.dom.rst:127
msgid ""
"The namespace URI for namespace declarations, as defined by `Document Object"
" Model (DOM) Level 2 Core Specification <https://www.w3.org/TR/DOM-"
"Level-2-Core/core.html>`_ (section 1.1.8)."
msgstr ""
"命名空间声明的命名空间 URI，如 `文档对象模型 (DOM) 第 2 层级核心规格说明 <https://www.w3.org/TR/DOM-"
"Level-2-Core/core.html>`_ (第 1.1.8节) 所定义的。"

#: ../../library/xml.dom.rst:134
msgid ""
"The URI of the XHTML namespace as defined by `XHTML 1.0: The Extensible "
"HyperText Markup Language <https://www.w3.org/TR/xhtml1/>`_ (section 3.1.1)."
msgstr ""
"XHTML 命名空间的 URI，如 `XHTML 1.0: 扩展超文本标记语言 <https://www.w3.org/TR/xhtml1/>`_ (第"
" 3.1.1 节) 所定义的。"

#: ../../library/xml.dom.rst:138
msgid ""
"In addition, :mod:`xml.dom` contains a base :class:`Node` class and the DOM "
"exception classes.  The :class:`Node` class provided by this module does not"
" implement any of the methods or attributes defined by the DOM "
"specification; concrete DOM implementations must provide those.  The "
":class:`Node` class provided as part of this module does provide the "
"constants used for the :attr:`nodeType` attribute on concrete :class:`Node` "
"objects; they are located within the class rather than at the module level "
"to conform with the DOM specifications."
msgstr ""
"此外，:mod:`xml.dom` 还包含一个基本 :class:`Node` 类和一些 DOM 异常类。 此模块提供的 :class:`Node` "
"类未实现 DOM 规格描述所定义的任何方法和属性；实际的 DOM 实现必须提供它们。 提供 :class:`Node` "
"类作为此模块的一部分并没有提供用于实际的 :class:`Node` 对象的 :attr:`nodeType` "
"属性的常量；它们是位于类内而不是位于模块层级以符合 DOM 规格描述。"

#: ../../library/xml.dom.rst:153
msgid "Objects in the DOM"
msgstr "DOM 中的对象"

#: ../../library/xml.dom.rst:155
msgid ""
"The definitive documentation for the DOM is the DOM specification from the "
"W3C."
msgstr "DOM 的权威文档是来自 W3C 的 DOM 规格描述。"

#: ../../library/xml.dom.rst:157
msgid ""
"Note that DOM attributes may also be manipulated as nodes instead of as "
"simple strings.  It is fairly rare that you must do this, however, so this "
"usage is not yet documented."
msgstr "请注意，DOM 属性也可以作为节点而不是简单的字符串进行操作。 然而，必须这样做的情况相当少见，所以这种用法还没有被写入文档。"

#: ../../library/xml.dom.rst:162
msgid "Interface"
msgstr "接口"

#: ../../library/xml.dom.rst:162
msgid "Section"
msgstr "部件"

#: ../../library/xml.dom.rst:162
msgid "Purpose"
msgstr "目的"

#: ../../library/xml.dom.rst:164
msgid ":class:`DOMImplementation`"
msgstr ":class:`DOMImplementation`"

#: ../../library/xml.dom.rst:164
msgid ":ref:`dom-implementation-objects`"
msgstr ":ref:`dom-implementation-objects`"

#: ../../library/xml.dom.rst:164
msgid "Interface to the underlying implementation."
msgstr "底层实现的接口。"

#: ../../library/xml.dom.rst:167
msgid ":class:`Node`"
msgstr ":class:`Node`"

#: ../../library/xml.dom.rst:167
msgid ":ref:`dom-node-objects`"
msgstr ":ref:`dom-node-objects`"

#: ../../library/xml.dom.rst:167
msgid "Base interface for most objects in a document."
msgstr "文档中大多数对象的基本接口。"

#: ../../library/xml.dom.rst:170
msgid ":class:`NodeList`"
msgstr ":class:`NodeList`"

#: ../../library/xml.dom.rst:170
msgid ":ref:`dom-nodelist-objects`"
msgstr ":ref:`dom-nodelist-objects`"

#: ../../library/xml.dom.rst:170
msgid "Interface for a sequence of nodes."
msgstr "节点序列的接口。"

#: ../../library/xml.dom.rst:173
msgid ":class:`DocumentType`"
msgstr ":class:`DocumentType`"

#: ../../library/xml.dom.rst:173
msgid ":ref:`dom-documenttype-objects`"
msgstr ":ref:`dom-documenttype-objects`"

#: ../../library/xml.dom.rst:173
msgid "Information about the declarations needed to process a document."
msgstr "有关处理文档所需声明的信息。"

#: ../../library/xml.dom.rst:177
msgid ":class:`Document`"
msgstr ":class:`Document`"

#: ../../library/xml.dom.rst:177
msgid ":ref:`dom-document-objects`"
msgstr ":ref:`dom-document-objects`"

#: ../../library/xml.dom.rst:177
msgid "Object which represents an entire document."
msgstr "表示整个文档的对象。"

#: ../../library/xml.dom.rst:180
msgid ":class:`Element`"
msgstr ":class:`Element`"

#: ../../library/xml.dom.rst:180
msgid ":ref:`dom-element-objects`"
msgstr ":ref:`dom-element-objects`"

#: ../../library/xml.dom.rst:180
msgid "Element nodes in the document hierarchy."
msgstr "文档层次结构中的元素节点。"

#: ../../library/xml.dom.rst:183
msgid ":class:`Attr`"
msgstr ":class:`Attr`"

#: ../../library/xml.dom.rst:183
msgid ":ref:`dom-attr-objects`"
msgstr ":ref:`dom-attr-objects`"

#: ../../library/xml.dom.rst:183
msgid "Attribute value nodes on element nodes."
msgstr "元素节点上的属性值节点。"

#: ../../library/xml.dom.rst:186
msgid ":class:`Comment`"
msgstr ":class:`Comment`"

#: ../../library/xml.dom.rst:186
msgid ":ref:`dom-comment-objects`"
msgstr ":ref:`dom-comment-objects`"

#: ../../library/xml.dom.rst:186
msgid "Representation of comments in the source document."
msgstr "源文档中注释的表示形式。"

#: ../../library/xml.dom.rst:189
msgid ":class:`Text`"
msgstr ":class:`Text`"

#: ../../library/xml.dom.rst:189
msgid ":ref:`dom-text-objects`"
msgstr ":ref:`dom-text-objects`"

#: ../../library/xml.dom.rst:189
msgid "Nodes containing textual content from the document."
msgstr "包含文档中文本内容的节点。"

#: ../../library/xml.dom.rst:192
msgid ":class:`ProcessingInstruction`"
msgstr ":class:`ProcessingInstruction`"

#: ../../library/xml.dom.rst:192
msgid ":ref:`dom-pi-objects`"
msgstr ":ref:`dom-pi-objects`"

#: ../../library/xml.dom.rst:192
msgid "Processing instruction representation."
msgstr "处理指令表示形式。"

#: ../../library/xml.dom.rst:196
msgid ""
"An additional section describes the exceptions defined for working with the "
"DOM in Python."
msgstr "描述在 Python 中使用 DOM 定义的异常的小节。"

#: ../../library/xml.dom.rst:203
msgid "DOMImplementation Objects"
msgstr "DOMImplementation 对象"

#: ../../library/xml.dom.rst:205
msgid ""
"The :class:`DOMImplementation` interface provides a way for applications to "
"determine the availability of particular features in the DOM they are using."
" DOM Level 2 added the ability to create new :class:`Document` and "
":class:`DocumentType` objects using the :class:`DOMImplementation` as well."
msgstr ""
":class:`DOMImplementation` 接口提供了一种让应用程序确定他们所使用的 DOM 中某一特性可用性的方式。 DOM 第 2 "
"级还添加了使用 :class:`DOMImplementation` 来创建新的 :class:`Document` 和 "
":class:`DocumentType` 对象的能力。"

#: ../../library/xml.dom.rst:213
msgid ""
"Return ``True`` if the feature identified by the pair of strings *feature* "
"and *version* is implemented."
msgstr "如果字符串对 *feature* 和 *version* 所标识的特性已被实现则返回 ``True``。"

#: ../../library/xml.dom.rst:219
msgid ""
"Return a new :class:`Document` object (the root of the DOM), with a child "
":class:`Element` object having the given *namespaceUri* and *qualifiedName*."
" The *doctype* must be a :class:`DocumentType` object created by "
":meth:`createDocumentType`, or ``None``. In the Python DOM API, the first "
"two arguments can also be ``None`` in order to indicate that no "
":class:`Element` child is to be created."
msgstr ""
"返回一个新的 :class:`Document` 对象 (DOM 的根节点)，包含一个具有给定 *namespaceUri* 和 "
"*qualifiedName* 的下级 :class:`Element` 对象。 *doctype* 必须为由 "
":meth:`createDocumentType` 创建的 :class:`DocumentType` 对象，或者为 ``None``。 在 "
"Python DOM API 中，前两个参数也可为 ``None`` 以表示不要创建任何下级 :class:`Element`。"

#: ../../library/xml.dom.rst:229
msgid ""
"Return a new :class:`DocumentType` object that encapsulates the given "
"*qualifiedName*, *publicId*, and *systemId* strings, representing the "
"information contained in an XML document type declaration."
msgstr ""
"返回一个新的封装了给定 *qualifiedName*, *publicId* 和 *systemId* 字符串的 "
":class:`DocumentType` 对象，它表示包含在 XML 文档类型声明中的信息。"

#: ../../library/xml.dom.rst:237
msgid "Node Objects"
msgstr "节点对象"

#: ../../library/xml.dom.rst:239
msgid ""
"All of the components of an XML document are subclasses of :class:`Node`."
msgstr "XML 文档的所有组成部分都是 :class:`Node` 的子类。"

#: ../../library/xml.dom.rst:244
msgid ""
"An integer representing the node type.  Symbolic constants for the types are"
" on the :class:`Node` object: :const:`ELEMENT_NODE`, "
":const:`ATTRIBUTE_NODE`, :const:`TEXT_NODE`, :const:`CDATA_SECTION_NODE`, "
":const:`ENTITY_NODE`, :const:`PROCESSING_INSTRUCTION_NODE`, "
":const:`COMMENT_NODE`, :const:`DOCUMENT_NODE`, :const:`DOCUMENT_TYPE_NODE`, "
":const:`NOTATION_NODE`. This is a read-only attribute."
msgstr ""
"一个代表节点类型的整数。 类型符号常量在 :class:`Node` 对象上: :const:`ELEMENT_NODE`, "
":const:`ATTRIBUTE_NODE`, :const:`TEXT_NODE`, :const:`CDATA_SECTION_NODE`, "
":const:`ENTITY_NODE`, :const:`PROCESSING_INSTRUCTION_NODE`, "
":const:`COMMENT_NODE`, :const:`DOCUMENT_NODE`, :const:`DOCUMENT_TYPE_NODE`, "
":const:`NOTATION_NODE`。 这是个只读属性。"

#: ../../library/xml.dom.rst:254
msgid ""
"The parent of the current node, or ``None`` for the document node. The value"
" is always a :class:`Node` object or ``None``.  For :class:`Element` nodes, "
"this will be the parent element, except for the root element, in which case "
"it will be the :class:`Document` object. For :class:`Attr` nodes, this is "
"always ``None``. This is a read-only attribute."
msgstr ""
"当前节点的上级，或者对于文档节点则为 ``None``。 该值总是一个 :class:`Node` 对象或者 ``None``。 对于 "
":class:`Element` 节点，这将为上级元素，但对于根元素例外，在此情况下它将为 :class:`Document` 对象。 对于 "
":class:`Attr` 节点，它将总是为 ``None``。 这是个只读属性。"

#: ../../library/xml.dom.rst:263
msgid ""
"A :class:`NamedNodeMap` of attribute objects.  Only elements have actual "
"values for this; others provide ``None`` for this attribute. This is a read-"
"only attribute."
msgstr ""
"属性对象的 :class:`NamedNodeMap`。 这仅对元素才有实际值；其它对象会为该属性提供 ``None`` 值。 这是个只读属性。"

#: ../../library/xml.dom.rst:270
msgid ""
"The node that immediately precedes this one with the same parent.  For "
"instance the element with an end-tag that comes just before the *self* "
"element's start-tag.  Of course, XML documents are made up of more than just"
" elements so the previous sibling could be text, a comment, or something "
"else. If this node is the first child of the parent, this attribute will be "
"``None``. This is a read-only attribute."
msgstr ""
"在此节点之前具有相同上级的相邻节点。 例如结束标记紧接在在 *self* 元素的开始标记之前的元素。 当然，XML "
"文档并非只是由元素组成，因此之前相邻节点可以是文本、注释或者其他内容。 如果此节点是上级的第一个子节点，则该属性将为 ``None``。 "
"这是一个只读属性。"

#: ../../library/xml.dom.rst:280
msgid ""
"The node that immediately follows this one with the same parent.  See also "
":attr:`previousSibling`.  If this is the last child of the parent, this "
"attribute will be ``None``. This is a read-only attribute."
msgstr ""
"在此节点之后具有相同上级的相邻节点。 另请参见 :attr:`previousSibling`。 如果此节点是上级的最后一个子节点，则该属性将为 "
"``None``。 这是一个只读属性。"

#: ../../library/xml.dom.rst:287
msgid ""
"A list of nodes contained within this node. This is a read-only attribute."
msgstr "包含在此节点中的节点列表。 这是一个只读属性。"

#: ../../library/xml.dom.rst:292
msgid ""
"The first child of the node, if there are any, or ``None``. This is a read-"
"only attribute."
msgstr "节点的第一个下级，如果有的话，否则为 ``None``。 这是个只读属性。"

#: ../../library/xml.dom.rst:298
msgid ""
"The last child of the node, if there are any, or ``None``. This is a read-"
"only attribute."
msgstr "节点的最后一个下级，如果有的话，否则为 ``None``。 这是个只读属性。"

#: ../../library/xml.dom.rst:304
msgid ""
"The part of the :attr:`tagName` following the colon if there is one, else "
"the entire :attr:`tagName`.  The value is a string."
msgstr ":attr:`tagName` 在冒号之后的部分，如果有冒号的话，否则为整个 :attr:`tagName`。 该值为一个字符串。"

#: ../../library/xml.dom.rst:310
msgid ""
"The part of the :attr:`tagName` preceding the colon if there is one, else "
"the empty string.  The value is a string, or ``None``."
msgstr ":attr:`tagName` 在冒号之前的部分，如果有冒号的话，否则为空字符串。 该值为一个字符串或者为 ``None``。"

#: ../../library/xml.dom.rst:316
msgid ""
"The namespace associated with the element name.  This will be a string or "
"``None``.  This is a read-only attribute."
msgstr "关联到元素名称的命名空间。 这将是一个字符串或为 ``None``。 这是个只读属性。"

#: ../../library/xml.dom.rst:322
msgid ""
"This has a different meaning for each node type; see the DOM specification "
"for details.  You can always get the information you would get here from "
"another property such as the :attr:`tagName` property for elements or the "
":attr:`name` property for attributes. For all node types, the value of this "
"attribute will be either a string or ``None``.  This is a read-only "
"attribute."
msgstr ""
"这对于每种节点类型具有不同的含义；请查看 DOM 规格说明来了解详情。 你总是可以从其他特征属性例如元素的 :attr:`tagName` "
"特征属性或属性的 :attr:`name` 特征属性获取你能从这里获取的信息。 对于所有节点类型，这个属性的值都将是一个字符串或为 ``None``。 "
"这是一个只读属性。"

#: ../../library/xml.dom.rst:331
msgid ""
"This has a different meaning for each node type; see the DOM specification "
"for details.  The situation is similar to that with :attr:`nodeName`.  The "
"value is a string or ``None``."
msgstr ""
"这对于每种节点类型具有不同的含义；请查看 DOM 规格说明来了解详情。 具体情况与 :attr:`nodeName` 的类似。 该值是一个字符串或为 "
"``None``。"

#: ../../library/xml.dom.rst:338
msgid "Return ``True`` if the node has any attributes."
msgstr "如果该节点具有任何属性则返回 ``True``。"

#: ../../library/xml.dom.rst:343
msgid "Return ``True`` if the node has any child nodes."
msgstr "如果该节点具有任何子节点则返回 ``True``。"

#: ../../library/xml.dom.rst:348
msgid ""
"Return ``True`` if *other* refers to the same node as this node. This is "
"especially useful for DOM implementations which use any sort of proxy "
"architecture (because more than one object can refer to the same node)."
msgstr ""
"如果 *other* 指向的节点就是此节点则返回 ``True``。 这对于使用了任何代理架构的 DOM "
"实现来说特别有用（因为多个对象可能指向相同节点）。"

#: ../../library/xml.dom.rst:354
msgid ""
"This is based on a proposed DOM Level 3 API which is still in the \"working "
"draft\" stage, but this particular interface appears uncontroversial.  "
"Changes from the W3C will not necessarily affect this method in the Python "
"DOM interface (though any new W3C API for this would also be supported)."
msgstr ""
"这是基于已提议的 DOM 第 3 等级 API，目前尚处于“起草”阶段，但这个特定接口看来并不存在争议。 来自 W3C 的修改将不会影响 Python "
"DOM 接口中的这个方法（不过针对它的任何新 W3C API 也将受到支持）。"

#: ../../library/xml.dom.rst:362
msgid ""
"Add a new child node to this node at the end of the list of children, "
"returning *newChild*. If the node was already in the tree, it is removed "
"first."
msgstr "在子节点列表末尾添加一个新的子节点，返回 *newChild*。 如果节点已存在于树结构中，它将先被移除。"

#: ../../library/xml.dom.rst:369
msgid ""
"Insert a new child node before an existing child.  It must be the case that "
"*refChild* is a child of this node; if not, :exc:`ValueError` is raised. "
"*newChild* is returned. If *refChild* is ``None``, it inserts *newChild* at "
"the end of the children's list."
msgstr ""
"在现有的子节点之前插入一个新的子节点。 它必须属于 *refChild* 是这个节点的子节点的情况；如果不是，则会引发 "
":exc:`ValueError`。*newChild* 会被返回。 如果 *refChild* 为 ``None``，它会将 *newChild* "
"插入到子节点列表的末尾。"

#: ../../library/xml.dom.rst:377
msgid ""
"Remove a child node.  *oldChild* must be a child of this node; if not, "
":exc:`ValueError` is raised.  *oldChild* is returned on success.  If "
"*oldChild* will not be used further, its :meth:`unlink` method should be "
"called."
msgstr ""
"移除一个子节点。 *oldChild* 必须是这个节点的子节点；如果不是，则会引发 :exc:`ValueError`。 成功时 *oldChild* "
"会被返回。 如果 *oldChild* 将不再被继续使用，则将调用它的 :meth:`unlink` 方法。"

#: ../../library/xml.dom.rst:384
msgid ""
"Replace an existing node with a new node. It must be the case that  "
"*oldChild* is a child of this node; if not, :exc:`ValueError` is raised."
msgstr ""
"将一个现有节点替换为新的节点。 这必须属于 *oldChild* 是该节点的子节点的情况；如果不是，则会引发 :exc:`ValueError`。"

#: ../../library/xml.dom.rst:390
msgid ""
"Join adjacent text nodes so that all stretches of text are stored as single "
":class:`Text` instances.  This simplifies processing text from a DOM tree "
"for many applications."
msgstr "合并相邻的文本节点以便将所有文本段存储为单个 :class:`Text` 实例。 这可以简化许多应用程序处理来自 DOM 树文本的操作。"

#: ../../library/xml.dom.rst:397
msgid ""
"Clone this node.  Setting *deep* means to clone all child nodes as well.  "
"This returns the clone."
msgstr "克隆此节点。 设置 *deep* 表示也克隆所有子节点。 此方法将返回克隆的节点。"

#: ../../library/xml.dom.rst:404
msgid "NodeList Objects"
msgstr "节点列表对象"

#: ../../library/xml.dom.rst:406
msgid ""
"A :class:`NodeList` represents a sequence of nodes.  These objects are used "
"in two ways in the DOM Core recommendation:  an :class:`Element` object "
"provides one as its list of child nodes, and the "
":meth:`getElementsByTagName` and :meth:`getElementsByTagNameNS` methods of "
":class:`Node` return objects with this interface to represent query results."
msgstr ""
":class:`NodeList` 代表一个节点列表。 在 DOM 核心建议中这些对象有两种使用方式: 由 :class:`Element` "
"对象提供作为其子节点列表，以及由 :class:`Node` 的 :meth:`getElementsByTagName` 和 "
":meth:`getElementsByTagNameNS` 方法通过此接口返回对象来表示查询结果。"

#: ../../library/xml.dom.rst:412
msgid ""
"The DOM Level 2 recommendation defines one method and one attribute for "
"these objects:"
msgstr "DOM 第 2 层级建议为这些对象定义一个方法和一个属性:"

#: ../../library/xml.dom.rst:418
msgid ""
"Return the *i*'th item from the sequence, if there is one, or ``None``.  The"
" index *i* is not allowed to be less than zero or greater than or equal to "
"the length of the sequence."
msgstr "从序列中返回第 *i* 项，如果序列不为空的话，否则返回 ``None``。 索引号 *i* 不允许小于零或大于等于序列的长度。"

#: ../../library/xml.dom.rst:425
msgid "The number of nodes in the sequence."
msgstr "序列中的节点数量。"

#: ../../library/xml.dom.rst:427
msgid ""
"In addition, the Python DOM interface requires that some additional support "
"is provided to allow :class:`NodeList` objects to be used as Python "
"sequences.  All :class:`NodeList` implementations must include support for "
":meth:`~object.__len__` and :meth:`~object.__getitem__`; this allows "
"iteration over the :class:`NodeList` in :keyword:`for` statements and proper"
" support for the :func:`len` built-in function."
msgstr ""
"此外，Python DOM 接口还要求提供一些额外支持来允许将 :class:`NodeList` 对象用作 Python 序列。 所有 "
":class:`NodeList` 实现都必须包括对 :meth:`~object.__len__` 和 "
":meth:`~object.__getitem__` 的支持；这样 :class:`NodeList` 就允许使用 :keyword:`for` "
"语句进行迭代并能正确地支持 :func:`len` 内置函数。"

#: ../../library/xml.dom.rst:435
msgid ""
"If a DOM implementation supports modification of the document, the "
":class:`NodeList` implementation must also support the "
":meth:`~object.__setitem__` and :meth:`~object.__delitem__` methods."
msgstr ""
"如果一个 DOM 实现支持文档的修改，则 :class:`NodeList` 实现还必须支持 :meth:`~object.__setitem__` 和"
" :meth:`~object.__delitem__` 方法。"

#: ../../library/xml.dom.rst:443
msgid "DocumentType Objects"
msgstr "文档类型对象"

#: ../../library/xml.dom.rst:445
msgid ""
"Information about the notations and entities declared by a document "
"(including the external subset if the parser uses it and can provide the "
"information) is available from a :class:`DocumentType` object.  The "
":class:`DocumentType` for a document is available from the :class:`Document`"
" object's :attr:`doctype` attribute; if there is no ``DOCTYPE`` declaration "
"for the document, the document's :attr:`doctype` attribute will be set to "
"``None`` instead of an instance of this interface."
msgstr ""
"有关一个文档所声明的标注和实体的信息（包括解析器所使用并能提供信息的外部子集）可以从 :class:`DocumentType` 对象获取。 文档的 "
":class:`DocumentType` 可从 :class:`Document` 对象的 :attr:`doctype` "
"属性中获取；如果一个文档没有 ``DOCTYPE`` 声明，则该文档的 :attr:`doctype` 属性将被设为 ``None`` "
"而非此接口的一个实例。"

#: ../../library/xml.dom.rst:453
msgid ""
":class:`DocumentType` is a specialization of :class:`Node`, and adds the "
"following attributes:"
msgstr ":class:`DocumentType` 是 :class:`Node` 是专门化，并增加了下列属性:"

#: ../../library/xml.dom.rst:459
msgid ""
"The public identifier for the external subset of the document type "
"definition. This will be a string or ``None``."
msgstr "文档类型定义的外部子集的公有标识。 这将为一个字符串或者为 ``None``。"

#: ../../library/xml.dom.rst:465
msgid ""
"The system identifier for the external subset of the document type "
"definition. This will be a URI as a string, or ``None``."
msgstr "文档类型定义的外部子集的系统标识。 这将为一个字符串形式的 URI，或者为 ``None``。"

#: ../../library/xml.dom.rst:471
msgid ""
"A string giving the complete internal subset from the document. This does "
"not include the brackets which enclose the subset.  If the document has no "
"internal subset, this should be ``None``."
msgstr "一个给出来自文档的完整内部子集的字符串。 这不包括子集外面的圆括号。 如果文档没有内部子集，则应为 ``None``。"

#: ../../library/xml.dom.rst:478
msgid ""
"The name of the root element as given in the ``DOCTYPE`` declaration, if "
"present."
msgstr "``DOCTYPE`` 声明中给出的根元素名称，如果有的话。"

#: ../../library/xml.dom.rst:484
msgid ""
"This is a :class:`NamedNodeMap` giving the definitions of external entities."
" For entity names defined more than once, only the first definition is "
"provided (others are ignored as required by the XML recommendation).  This "
"may be ``None`` if the information is not provided by the parser, or if no "
"entities are defined."
msgstr ""
"这是给出外部实体定义的 :class:`NamedNodeMap`。 对于多次定义的实体名称，则只提供第一次的定义（其他的会按照 XML 建议被忽略）。"
" 这可能为 ``None``，如果解析器未提供此信息，或者如果未定义任何实体的话。"

#: ../../library/xml.dom.rst:493
msgid ""
"This is a :class:`NamedNodeMap` giving the definitions of notations. For "
"notation names defined more than once, only the first definition is provided"
" (others are ignored as required by the XML recommendation).  This may be "
"``None`` if the information is not provided by the parser, or if no "
"notations are defined."
msgstr ""
"这是给出标注定义的 :class:`NamedNodeMap`。 对于多次定义的标注，则只提供第一次的定义（其他的会按照 XML 建议被忽略）。 "
"这可能为 ``None``，如果解析器未提供此信息，或者如果未定义任何标注的话。"

#: ../../library/xml.dom.rst:503
msgid "Document Objects"
msgstr "Document 对象"

#: ../../library/xml.dom.rst:505
msgid ""
"A :class:`Document` represents an entire XML document, including its "
"constituent elements, attributes, processing instructions, comments etc.  "
"Remember that it inherits properties from :class:`Node`."
msgstr ""
":class:`Document` 代表一个完整的 XML 文档，包括其组成元素、属性、处理指令和注释等。 请记住它会继承来自 "
":class:`Node` 的属性。"

#: ../../library/xml.dom.rst:512
msgid "The one and only root element of the document."
msgstr "文档唯一的根元素。"

#: ../../library/xml.dom.rst:517
msgid ""
"Create and return a new element node.  The element is not inserted into the "
"document when it is created.  You need to explicitly insert it with one of "
"the other methods such as :meth:`insertBefore` or :meth:`appendChild`."
msgstr ""
"创建并返回一个新的元素节点。 当元素被创建时不会被插入到文档中。 你需要通过某个其他方法例如 :meth:`insertBefore` 或 "
":meth:`appendChild` 来显示地插入它。"

#: ../../library/xml.dom.rst:524
msgid ""
"Create and return a new element with a namespace.  The *tagName* may have a "
"prefix.  The element is not inserted into the document when it is created.  "
"You need to explicitly insert it with one of the other methods such as "
":meth:`insertBefore` or :meth:`appendChild`."
msgstr ""
"创建并返回一个新的带有命名空间的元素。 *tagName* 可以带有前缀。 当元素被创建时不会被插入到文档中。 你需要通过某个其他方法例如 "
":meth:`insertBefore` 或 :meth:`appendChild` 来显式地插入它。"

#: ../../library/xml.dom.rst:532
msgid ""
"Create and return a text node containing the data passed as a parameter.  As"
" with the other creation methods, this one does not insert the node into the"
" tree."
msgstr "创建并返回一个包含作为形参被传入的数据的文本节点。 与其他创建方法一样，此方法不会将节点插入到树中。"

#: ../../library/xml.dom.rst:539
msgid ""
"Create and return a comment node containing the data passed as a parameter."
"  As with the other creation methods, this one does not insert the node into"
" the tree."
msgstr "创建并返回一个包含作为形参被传入的数据的注释节点。 与其他创建方法一样，此方法不会将节点插入到树中。"

#: ../../library/xml.dom.rst:546
msgid ""
"Create and return a processing instruction node containing the *target* and "
"*data* passed as parameters.  As with the other creation methods, this one "
"does not insert the node into the tree."
msgstr "创建并返回一个包含作为形参被传入的 *target* 和 *data* 的处理指令节点。 与其他创建方法一样，此方法不会将节点插入到树中。"

#: ../../library/xml.dom.rst:553
msgid ""
"Create and return an attribute node.  This method does not associate the "
"attribute node with any particular element.  You must use "
":meth:`setAttributeNode` on the appropriate :class:`Element` object to use "
"the newly created attribute instance."
msgstr ""
"创建并返回一个属性节点。 此方法不会将属性节点关联到任何特定的元素。 你必须在正确的 :class:`Element` 对象上使用 "
":meth:`setAttributeNode` 来使用新创建的属性实例。"

#: ../../library/xml.dom.rst:561
msgid ""
"Create and return an attribute node with a namespace.  The *tagName* may "
"have a prefix.  This method does not associate the attribute node with any "
"particular element.  You must use :meth:`setAttributeNode` on the "
"appropriate :class:`Element` object to use the newly created attribute "
"instance."
msgstr ""
"创建并返回一个带有命名空间的属性节点。 *tagName* 可以带有前缀。 此方法不会将属性节点关联到任何特定的元素。 你必须在正确的 "
":class:`Element` 对象上使用 :meth:`setAttributeNode` 来使用新创建的属性实例。"

#: ../../library/xml.dom.rst:569
msgid ""
"Search for all descendants (direct children, children's children, etc.) with"
" a particular element type name."
msgstr "搜索全部具有特定元素类型名称的后继元素（直接下级、下级的下级等等）。"

#: ../../library/xml.dom.rst:575
msgid ""
"Search for all descendants (direct children, children's children, etc.) with"
" a particular namespace URI and localname.  The localname is the part of the"
" namespace after the prefix."
msgstr ""
"搜索全部具有特定命名空间 URI 和 localname 的后继元素（直接下级、下级的下级等等）。 localname 是命名空间在前缀之后的部分。"

#: ../../library/xml.dom.rst:583
msgid "Element Objects"
msgstr "元素对象"

#: ../../library/xml.dom.rst:585
msgid ""
":class:`Element` is a subclass of :class:`Node`, so inherits all the "
"attributes of that class."
msgstr ":class:`Element` 是 :class:`Node` 的子类，因此会继承该类的全部属性。"

#: ../../library/xml.dom.rst:591
msgid ""
"The element type name.  In a namespace-using document it may have colons in "
"it. The value is a string."
msgstr "元素类型名称。 在使用命名空间的文档中它可能包含冒号。 该值是一个字符串。"

#: ../../library/xml.dom.rst:597 ../../library/xml.dom.rst:602
msgid "Same as equivalent method in the :class:`Document` class."
msgstr "与 :class:`Document` 类中的对应方法相同。"

#: ../../library/xml.dom.rst:607
msgid "Return ``True`` if the element has an attribute named by *name*."
msgstr "如果元素带有名称为 *name* 的属性则返回 ``True``。"

#: ../../library/xml.dom.rst:612
msgid ""
"Return ``True`` if the element has an attribute named by *namespaceURI* and "
"*localName*."
msgstr "如果元素带有名称为 *namespaceURI* 加 *localName* 的属性则返回 ``True``。"

#: ../../library/xml.dom.rst:618
msgid ""
"Return the value of the attribute named by *name* as a string. If no such "
"attribute exists, an empty string is returned, as if the attribute had no "
"value."
msgstr "将名称为 *name* 的属性的值作为字符串返回。 如果指定属性不存在，则返回空字符串，就像该属性没有对应的值一样。"

#: ../../library/xml.dom.rst:624
msgid "Return the :class:`Attr` node for the attribute named by *attrname*."
msgstr "返回名称为 *attrname* 的属性对应的 :class:`Attr` 节点。"

#: ../../library/xml.dom.rst:629
msgid ""
"Return the value of the attribute named by *namespaceURI* and *localName* as"
" a string. If no such attribute exists, an empty string is returned, as if "
"the attribute had no value."
msgstr ""
"将名称为 *namespaceURI* 加 *localName* 的属性的值作为字符串返回。 "
"如果指定属性不存在，则返回空字符串，就像该属性没有对应的值一样。"

#: ../../library/xml.dom.rst:636
msgid ""
"Return an attribute value as a node, given a *namespaceURI* and *localName*."
msgstr "将给定 *namespaceURI* 加 *localName* 的属性的值作为节点返回。"

#: ../../library/xml.dom.rst:641
msgid ""
"Remove an attribute by name.  If there is no matching attribute, a "
":exc:`NotFoundErr` is raised."
msgstr "移除指定名称的节点。 如果没有匹配的属性，则会引发 :exc:`NotFoundErr`。"

#: ../../library/xml.dom.rst:647
msgid ""
"Remove and return *oldAttr* from the attribute list, if present. If "
"*oldAttr* is not present, :exc:`NotFoundErr` is raised."
msgstr ""
"从属性列表中移除并返回 *oldAttr*，如果该属性存在的话。 如果 *oldAttr* 不存在，则会引发 :exc:`NotFoundErr`。"

#: ../../library/xml.dom.rst:653
msgid ""
"Remove an attribute by name.  Note that it uses a localName, not a qname.  "
"No exception is raised if there is no matching attribute."
msgstr "移除指定名称的属性。 请注意它是使用 localName 而不是 qname。 如果没有匹配的属性也不会引发异常。"

#: ../../library/xml.dom.rst:659
msgid "Set an attribute value from a string."
msgstr "将属性值设为指定的字符串。"

#: ../../library/xml.dom.rst:664
msgid ""
"Add a new attribute node to the element, replacing an existing attribute if "
"necessary if the :attr:`name` attribute matches.  If a replacement occurs, "
"the old attribute node will be returned.  If *newAttr* is already in use, "
":exc:`InuseAttributeErr` will be raised."
msgstr ""
"将一个新的属性节点添加到元素，当匹配到 :attr:`name` 属性时如有必要会替换现有的属性。 如果发生了替换，将返回原有属性节点。 如果 "
"*newAttr* 已经被使用，则会引发 :exc:`InuseAttributeErr`。"

#: ../../library/xml.dom.rst:672
msgid ""
"Add a new attribute node to the element, replacing an existing attribute if "
"necessary if the :attr:`namespaceURI` and :attr:`localName` attributes "
"match. If a replacement occurs, the old attribute node will be returned.  If"
" *newAttr* is already in use, :exc:`InuseAttributeErr` will be raised."
msgstr ""
"将一个新的属性节点添加到元素，当匹配到 :attr:`namespaceURI` 和 :attr:`localName` "
"属性时如有必要会替换现有的属性。 如果发生了替换，将返回原有属性节点。 如果 *newAttr* 已经被使用，则会引发 "
":exc:`InuseAttributeErr`。"

#: ../../library/xml.dom.rst:680
msgid ""
"Set an attribute value from a string, given a *namespaceURI* and a *qname*. "
"Note that a qname is the whole attribute name.  This is different than "
"above."
msgstr ""
"将属性值设为 *namespaceURI* 和 *qname* 所给出的字符串。 请注意 qname 是整个属性名称。  这与上面的方法不同。"

#: ../../library/xml.dom.rst:687
msgid "Attr Objects"
msgstr "Attr 对象"

#: ../../library/xml.dom.rst:689
msgid ""
":class:`Attr` inherits from :class:`Node`, so inherits all its attributes."
msgstr ":class:`Attr` 继承自 :class:`Node`，因此会继承其全部属性。"

#: ../../library/xml.dom.rst:694
msgid ""
"The attribute name. In a namespace-using document it may include a colon."
msgstr "属性名称。 在使用命名空间的文档中可能会包括冒号。"

#: ../../library/xml.dom.rst:700
msgid ""
"The part of the name following the colon if there is one, else the entire "
"name. This is a read-only attribute."
msgstr "名称在冒号之后的部分，如果有的话，否则为完整名称。 这是个只读属性。"

#: ../../library/xml.dom.rst:707
msgid ""
"The part of the name preceding the colon if there is one, else the empty "
"string."
msgstr "名称在冒号之前的部分，如果有冒号的话，否则为空字符串。"

#: ../../library/xml.dom.rst:713
msgid ""
"The text value of the attribute.  This is a synonym for the "
":attr:`nodeValue` attribute."
msgstr "属性的文本值。 这与 :attr:`nodeValue` 属性同义。"

#: ../../library/xml.dom.rst:720
msgid "NamedNodeMap Objects"
msgstr "NamedNodeMap 对象"

#: ../../library/xml.dom.rst:722
msgid ":class:`NamedNodeMap` does *not* inherit from :class:`Node`."
msgstr ":class:`NamedNodeMap` *不是* 继承自 :class:`Node`。"

#: ../../library/xml.dom.rst:727
msgid "The length of the attribute list."
msgstr "属性列表的长度。"

#: ../../library/xml.dom.rst:732
msgid ""
"Return an attribute with a particular index.  The order you get the "
"attributes in is arbitrary but will be consistent for the life of a DOM.  "
"Each item is an attribute node.  Get its value with the :attr:`value` "
"attribute."
msgstr ""
"返回特定带有索引号的属性。 获取属性的顺序是强制规定的，但在 DOM 的生命期内会保持一致。 其中每一项均为属性节点。 可使用 "
":attr:`value` 属性获取其值。"

#: ../../library/xml.dom.rst:736
msgid ""
"There are also experimental methods that give this class more mapping "
"behavior. You can use them or you can use the standardized "
":meth:`getAttribute\\*` family of methods on the :class:`Element` objects."
msgstr ""
"还有一些试验性方法给予这个类更多的映射行为。 你可以使用这些方法或者使用 :class:`Element` 对象上标准化的 "
":meth:`getAttribute\\*` 方法族。"

#: ../../library/xml.dom.rst:744
msgid "Comment Objects"
msgstr "注释对象"

#: ../../library/xml.dom.rst:746
msgid ""
":class:`Comment` represents a comment in the XML document.  It is a subclass"
" of :class:`Node`, but cannot have child nodes."
msgstr ":class:`Comment` 代表 XML 文档中的注释。 它是 :class:`Node` 的子类，但不能拥有下级节点。"

#: ../../library/xml.dom.rst:752
msgid ""
"The content of the comment as a string.  The attribute contains all "
"characters between the leading ``<!-``\\ ``-`` and trailing ``-``\\ ``->``, "
"but does not include them."
msgstr ""
"注释的内容是一个字符串。 该属性包含在开头 ``<!-``\\ ``-`` 和末尾 ``-``\\ ``->`` 之间的所有字符，但不包括这两个符号。"

#: ../../library/xml.dom.rst:760
msgid "Text and CDATASection Objects"
msgstr "Text 和 CDATASection 对象"

#: ../../library/xml.dom.rst:762
msgid ""
"The :class:`Text` interface represents text in the XML document.  If the "
"parser and DOM implementation support the DOM's XML extension, portions of "
"the text enclosed in CDATA marked sections are stored in "
":class:`CDATASection` objects. These two interfaces are identical, but "
"provide different values for the :attr:`nodeType` attribute."
msgstr ""
":class:`Text` 接口代表 XML 文档中的文本。 如果解析器和 DOM 实现支持 DOM 的 XML 扩展，则包裹在 CDATA "
"标记的节中的部分会被存储到 :class:`CDATASection` 对象中。 这两个接口很相似，但是提供了不同的 :attr:`nodeType` "
"属性值。"

#: ../../library/xml.dom.rst:768
msgid ""
"These interfaces extend the :class:`Node` interface.  They cannot have child"
" nodes."
msgstr "这些接口扩展了 :class:`Node` 接口。 它们不能拥有下级节点。"

#: ../../library/xml.dom.rst:774
msgid "The content of the text node as a string."
msgstr "字符串形式的文本节点内容。"

#: ../../library/xml.dom.rst:778
msgid ""
"The use of a :class:`CDATASection` node does not indicate that the node "
"represents a complete CDATA marked section, only that the content of the "
"node was part of a CDATA section.  A single CDATA section may be represented"
" by more than one node in the document tree.  There is no way to determine "
"whether two adjacent :class:`CDATASection` nodes represent different CDATA "
"marked sections."
msgstr ""
":class:`CDATASection` 节点的使用并不表示该节点代表一个完整的 CDATA 标记节，只是表示该节点的内容是 CDATA 节的一部分。"
" 单个 CDATA 节可以由文档树中的多个节点来表示。 没有什么办法能确定两个相邻的 :class:`CDATASection` 节点是否代表不同的 "
"CDATA 标记节。"

#: ../../library/xml.dom.rst:788
msgid "ProcessingInstruction Objects"
msgstr "ProcessingInstruction 对象"

#: ../../library/xml.dom.rst:790
msgid ""
"Represents a processing instruction in the XML document; this inherits from "
"the :class:`Node` interface and cannot have child nodes."
msgstr "代表 XML 文档中的处理指令。 它继承自 :class:`Node` 接口并且不能拥有下级节点。"

#: ../../library/xml.dom.rst:796
msgid ""
"The content of the processing instruction up to the first whitespace "
"character. This is a read-only attribute."
msgstr "到第一个空格符为止的处理指令内容。 这是个只读属性。"

#: ../../library/xml.dom.rst:802
msgid ""
"The content of the processing instruction following the first whitespace "
"character."
msgstr "在第一个空格符之后的处理指令内容。"

#: ../../library/xml.dom.rst:809
msgid "Exceptions"
msgstr "异常"

#: ../../library/xml.dom.rst:811
msgid ""
"The DOM Level 2 recommendation defines a single exception, "
":exc:`DOMException`, and a number of constants that allow applications to "
"determine what sort of error occurred. :exc:`DOMException` instances carry a"
" :attr:`code` attribute that provides the appropriate value for the specific"
" exception."
msgstr ""
"DOM 第 2 层级推荐定义一个异常 :exc:`DOMException`，以及多个变量用来允许应用程序确定发生了何种错误。 "
":exc:`DOMException` 实例带有 :attr:`code` 属性用来提供特定异常所对应的值。"

#: ../../library/xml.dom.rst:816
msgid ""
"The Python DOM interface provides the constants, but also expands the set of"
" exceptions so that a specific exception exists for each of the exception "
"codes defined by the DOM.  The implementations must raise the appropriate "
"specific exception, each of which carries the appropriate value for the "
":attr:`code` attribute."
msgstr ""
"Python DOM 接口提供了一些常量，但还扩展了异常集以使 DOM 所定义的每个异常代码都存在特定的异常。 "
"接口的具体实现必须引发正确的特定异常，它们各自带有正确的 :attr:`code` 属性值。"

#: ../../library/xml.dom.rst:825
msgid ""
"Base exception class used for all specific DOM exceptions.  This exception "
"class cannot be directly instantiated."
msgstr "所有特定 DOM 异常所使用的异常基类。 该异常类不可被直接实例化。"

#: ../../library/xml.dom.rst:831
msgid ""
"Raised when a specified range of text does not fit into a string. This is "
"not known to be used in the Python DOM implementations, but may be received "
"from DOM implementations not written in Python."
msgstr ""
"当指定范围的文本不能适配一个字符串时被引发。 此异常在 Python DOM 实现中尚不可用，但可从不是以 Python 编写的 DOM 实现中接收。"

#: ../../library/xml.dom.rst:838
msgid ""
"Raised when an attempt is made to insert a node where the node type is not "
"allowed."
msgstr "当尝试插入一个节点但该节点类型不被允许时被引发。"

#: ../../library/xml.dom.rst:844
msgid ""
"Raised when an index or size parameter to a method is negative or exceeds "
"the allowed values."
msgstr "当一个方法的索引或大小参数为负值或超出允许的值范围时被引发。"

#: ../../library/xml.dom.rst:850
msgid ""
"Raised when an attempt is made to insert an :class:`Attr` node that is "
"already present elsewhere in the document."
msgstr "当尝试插入一个 :class:`Attr` 节点但该节点已存在于文档中的某处时被引发。"

#: ../../library/xml.dom.rst:856
msgid ""
"Raised if a parameter or an operation is not supported on the underlying "
"object."
msgstr "当某个参数或操作在底层对象中不受支持时被引发。"

#: ../../library/xml.dom.rst:861
msgid ""
"This exception is raised when a string parameter contains a character that "
"is not permitted in the context it's being used in by the XML 1.0 "
"recommendation. For example, attempting to create an :class:`Element` node "
"with a space in the element type name will cause this error to be raised."
msgstr ""
"当某个字符串参数包含的字符在使用它的上下文中不被 XML 1.0 标准建议所允许时引发。 例如，尝试创建一个元素类型名称中带有空格的 "
":class:`Element` 节点将导致此错误被引发。"

#: ../../library/xml.dom.rst:869
msgid "Raised when an attempt is made to modify the type of a node."
msgstr "当尝试修改某个节点的类型时被引发。"

#: ../../library/xml.dom.rst:874
msgid ""
"Raised when an attempt is made to use an object that is not defined or is no"
" longer usable."
msgstr "当尝试使用未定义或不再可用的的对象时被引发。"

#: ../../library/xml.dom.rst:880
msgid ""
"If an attempt is made to change any object in a way that is not permitted "
"with regard to the `Namespaces in XML <https://www.w3.org/TR/REC-xml-"
"names/>`_ recommendation, this exception is raised."
msgstr ""
"如果试图以 `XML 中的命名空间 <https://www.w3.org/TR/REC-xml-names/>`_ "
"建议所不允许的方式修改任何对象，则会引发此异常。"

#: ../../library/xml.dom.rst:887
msgid ""
"Exception when a node does not exist in the referenced context.  For "
"example, :meth:`NamedNodeMap.removeNamedItem` will raise this if the node "
"passed in does not exist in the map."
msgstr ""
"当某个节点不存在于被引用的上下文中时引发的异常。 例如，:meth:`NamedNodeMap.removeNamedItem` "
"将在所传入的节点不在于于映射中时引发此异常。"

#: ../../library/xml.dom.rst:894
msgid ""
"Raised when the implementation does not support the requested type of object"
" or operation."
msgstr "当具体实现不支持所请求的对象类型或操作时被引发。"

#: ../../library/xml.dom.rst:900
msgid ""
"This is raised if data is specified for a node which does not support data."
msgstr "当为某个不支持数据 的节点指定数据时被引发。"

#: ../../library/xml.dom.rst:907
msgid ""
"Raised on attempts to modify an object where modifications are not allowed "
"(such as for read-only nodes)."
msgstr "当尝试修改某个不允许修改的对象（例如只读节点）时被引发。"

#: ../../library/xml.dom.rst:913
msgid "Raised when an invalid or illegal string is specified."
msgstr "当指定了无效或非法的字符串时被引发。"

#: ../../library/xml.dom.rst:920
msgid ""
"Raised when a node is inserted in a different document than it currently "
"belongs to, and the implementation does not support migrating the node from "
"one document to the other."
msgstr "当将某个节点插入非其当前所属的另一个文档，并且具体实现不支持从一个文档向一个文档迁移节点时被引发。"

#: ../../library/xml.dom.rst:924
msgid ""
"The exception codes defined in the DOM recommendation map to the exceptions "
"described above according to this table:"
msgstr "DOM 建议映射中针对上述异常而定义的异常代码如下表所示:"

#: ../../library/xml.dom.rst:928
msgid "Constant"
msgstr "常量"

#: ../../library/xml.dom.rst:928
msgid "Exception"
msgstr "异常"

#: ../../library/xml.dom.rst:930
msgid ":const:`DOMSTRING_SIZE_ERR`"
msgstr ":const:`DOMSTRING_SIZE_ERR`"

#: ../../library/xml.dom.rst:930
msgid ":exc:`DomstringSizeErr`"
msgstr ":exc:`DomstringSizeErr`"

#: ../../library/xml.dom.rst:932
msgid ":const:`HIERARCHY_REQUEST_ERR`"
msgstr ":const:`HIERARCHY_REQUEST_ERR`"

#: ../../library/xml.dom.rst:932
msgid ":exc:`HierarchyRequestErr`"
msgstr ":exc:`HierarchyRequestErr`"

#: ../../library/xml.dom.rst:934
msgid ":const:`INDEX_SIZE_ERR`"
msgstr ":const:`INDEX_SIZE_ERR`"

#: ../../library/xml.dom.rst:934
msgid ":exc:`IndexSizeErr`"
msgstr ":exc:`IndexSizeErr`"

#: ../../library/xml.dom.rst:936
msgid ":const:`INUSE_ATTRIBUTE_ERR`"
msgstr ":const:`INUSE_ATTRIBUTE_ERR`"

#: ../../library/xml.dom.rst:936
msgid ":exc:`InuseAttributeErr`"
msgstr ":exc:`InuseAttributeErr`"

#: ../../library/xml.dom.rst:938
msgid ":const:`INVALID_ACCESS_ERR`"
msgstr ":const:`INVALID_ACCESS_ERR`"

#: ../../library/xml.dom.rst:938
msgid ":exc:`InvalidAccessErr`"
msgstr ":exc:`InvalidAccessErr`"

#: ../../library/xml.dom.rst:940
msgid ":const:`INVALID_CHARACTER_ERR`"
msgstr ":const:`INVALID_CHARACTER_ERR`"

#: ../../library/xml.dom.rst:940
msgid ":exc:`InvalidCharacterErr`"
msgstr ":exc:`InvalidCharacterErr`"

#: ../../library/xml.dom.rst:942
msgid ":const:`INVALID_MODIFICATION_ERR`"
msgstr ":const:`INVALID_MODIFICATION_ERR`"

#: ../../library/xml.dom.rst:942
msgid ":exc:`InvalidModificationErr`"
msgstr ":exc:`InvalidModificationErr`"

#: ../../library/xml.dom.rst:944
msgid ":const:`INVALID_STATE_ERR`"
msgstr ":const:`INVALID_STATE_ERR`"

#: ../../library/xml.dom.rst:944
msgid ":exc:`InvalidStateErr`"
msgstr ":exc:`InvalidStateErr`"

#: ../../library/xml.dom.rst:946
msgid ":const:`NAMESPACE_ERR`"
msgstr ":const:`NAMESPACE_ERR`"

#: ../../library/xml.dom.rst:946
msgid ":exc:`NamespaceErr`"
msgstr ":exc:`NamespaceErr`"

#: ../../library/xml.dom.rst:948
msgid ":const:`NOT_FOUND_ERR`"
msgstr ":const:`NOT_FOUND_ERR`"

#: ../../library/xml.dom.rst:948
msgid ":exc:`NotFoundErr`"
msgstr ":exc:`NotFoundErr`"

#: ../../library/xml.dom.rst:950
msgid ":const:`NOT_SUPPORTED_ERR`"
msgstr ":const:`NOT_SUPPORTED_ERR`"

#: ../../library/xml.dom.rst:950
msgid ":exc:`NotSupportedErr`"
msgstr ":exc:`NotSupportedErr`"

#: ../../library/xml.dom.rst:952
msgid ":const:`NO_DATA_ALLOWED_ERR`"
msgstr ":const:`NO_DATA_ALLOWED_ERR`"

#: ../../library/xml.dom.rst:952
msgid ":exc:`NoDataAllowedErr`"
msgstr ":exc:`NoDataAllowedErr`"

#: ../../library/xml.dom.rst:954
msgid ":const:`NO_MODIFICATION_ALLOWED_ERR`"
msgstr ":const:`NO_MODIFICATION_ALLOWED_ERR`"

#: ../../library/xml.dom.rst:954
msgid ":exc:`NoModificationAllowedErr`"
msgstr ":exc:`NoModificationAllowedErr`"

#: ../../library/xml.dom.rst:956
msgid ":const:`SYNTAX_ERR`"
msgstr ":const:`SYNTAX_ERR`"

#: ../../library/xml.dom.rst:956
msgid ":exc:`SyntaxErr`"
msgstr ":exc:`SyntaxErr`"

#: ../../library/xml.dom.rst:958
msgid ":const:`WRONG_DOCUMENT_ERR`"
msgstr ":const:`WRONG_DOCUMENT_ERR`"

#: ../../library/xml.dom.rst:958
msgid ":exc:`WrongDocumentErr`"
msgstr ":exc:`WrongDocumentErr`"

#: ../../library/xml.dom.rst:965
msgid "Conformance"
msgstr "一致性"

#: ../../library/xml.dom.rst:967
msgid ""
"This section describes the conformance requirements and relationships "
"between the Python DOM API, the W3C DOM recommendations, and the OMG IDL "
"mapping for Python."
msgstr "本节描述了 Python DOM API、W3C DOM 建议以及 Python 的 OMG IDL 映射之间的一致性要求和关系。"

#: ../../library/xml.dom.rst:975
msgid "Type Mapping"
msgstr "类型映射"

#: ../../library/xml.dom.rst:977
msgid ""
"The IDL types used in the DOM specification are mapped to Python types "
"according to the following table."
msgstr "将根据下表，将DOM规范中使用的IDL类型映射为Python类型。"

#: ../../library/xml.dom.rst:981
msgid "IDL Type"
msgstr "IDL  类型"

#: ../../library/xml.dom.rst:981
msgid "Python Type"
msgstr "Python 类型"

#: ../../library/xml.dom.rst:983
msgid "``boolean``"
msgstr "``boolean``"

#: ../../library/xml.dom.rst:983
msgid "``bool`` or ``int``"
msgstr "``bool`` 或 ``int``"

#: ../../library/xml.dom.rst:985 ../../library/xml.dom.rst:985
#: ../../library/xml.dom.rst:987 ../../library/xml.dom.rst:989
msgid "``int``"
msgstr "``int``"

#: ../../library/xml.dom.rst:987
msgid "``long int``"
msgstr "``long int``"

#: ../../library/xml.dom.rst:989
msgid "``unsigned int``"
msgstr "``unsigned int``"

#: ../../library/xml.dom.rst:991
msgid "``DOMString``"
msgstr "``DOMString``"

#: ../../library/xml.dom.rst:991
msgid "``str`` or ``bytes``"
msgstr "``str`` 或 ``bytes``"

#: ../../library/xml.dom.rst:993
msgid "``null``"
msgstr "``null``"

#: ../../library/xml.dom.rst:993
msgid "``None``"
msgstr "``None``"

#: ../../library/xml.dom.rst:999
msgid "Accessor Methods"
msgstr "访问器方法"

#: ../../library/xml.dom.rst:1001
msgid ""
"The mapping from OMG IDL to Python defines accessor functions for IDL "
"``attribute`` declarations in much the way the Java mapping does. Mapping "
"the IDL declarations ::"
msgstr ""
"从 OMG IDL 到 Python 的映射以类似于 Java 映射的方式定义了针对 IDL ``attribute`` 声明的访问器函数。 映射以下 "
"IDL 声明 ::"

#: ../../library/xml.dom.rst:1008
msgid ""
"yields three accessor functions:  a \"get\" method for :attr:`someValue` "
"(:meth:`_get_someValue`), and \"get\" and \"set\" methods for "
":attr:`anotherValue` (:meth:`_get_anotherValue` and "
":meth:`_set_anotherValue`).  The mapping, in particular, does not require "
"that the IDL attributes are accessible as normal Python attributes:  "
"``object.someValue`` is *not* required to work, and may raise an "
":exc:`AttributeError`."
msgstr ""
"会产生三个访问器函数:  :attr:`someValue` 的 \"get\" 方法 (:meth:`_get_someValue`)，以及 "
":attr:`anotherValue` 的 \"get\" 和 \"set\" 方法 (:meth:`_get_anotherValue` 和 "
":meth:`_set_anotherValue`)。 特别地，该映射不要求 IDL 属性像普通 Python 属性那样可访问:  "
"``object.someValue`` *并非* 必须可用，并可能引发 :exc:`AttributeError`。"

#: ../../library/xml.dom.rst:1015
msgid ""
"The Python DOM API, however, *does* require that normal attribute access "
"work. This means that the typical surrogates generated by Python IDL "
"compilers are not likely to work, and wrapper objects may be needed on the "
"client if the DOM objects are accessed via CORBA. While this does require "
"some additional consideration for CORBA DOM clients, the implementers with "
"experience using DOM over CORBA from Python do not consider this a problem."
"  Attributes that are declared ``readonly`` may not restrict write access in"
" all DOM implementations."
msgstr ""
"但是，Python DOM API 则 *确实* 要求普通属性访问可用。 这意味着由 Python IDL 解译器生成的典型代理有可能会不可用，如果 "
"DOM 对象是通过 CORBA 来访问则在客户端可能需要有包装对象。 虽然这确实要求为 CORBA DOM 客户端进行额外的考虑，但具有从 Python"
" 通过 CORBA 使用 DOM 经验的实现并不会认为这是个问题。 已经声明了 ``readonly`` 的属性不必在所有 DOM 实现中限制写入访问。"

#: ../../library/xml.dom.rst:1024
msgid ""
"In the Python DOM API, accessor functions are not required.  If provided, "
"they should take the form defined by the Python IDL mapping, but these "
"methods are considered unnecessary since the attributes are accessible "
"directly from Python. \"Set\" accessors should never be provided for "
"``readonly`` attributes."
msgstr ""
"在 Python DOM API 中，访问器函数不是必须的。 如果提供，则它们应当采用由 Python IDL "
"映射所定义的形式，但这些方法会被认为不必要，因为这些属性可以从 Python 直接访问。 永远都不要为 ``readonly`` 属性提供 "
"\"set\" 访问器。"

#: ../../library/xml.dom.rst:1029
msgid ""
"The IDL definitions do not fully embody the requirements of the W3C DOM API,"
" such as the notion of certain objects, such as the return value of "
":meth:`getElementsByTagName`, being \"live\".  The Python DOM API does not "
"require implementations to enforce such requirements."
msgstr ""
"IDL 定义没有完全体现 W3C DOM API 的要求，如特定对象的概念，又如 :meth:`getElementsByTagName` 的返回值为 "
"\"live\" 等。 Python DOM API 并不强制具体实现执行这些要求。"
