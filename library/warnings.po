# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 15:05+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/warnings.rst:2
msgid ":mod:`!warnings` --- Warning control"
msgstr ":mod:`!warnings` --- 警告信息控制"

#: ../../library/warnings.rst:7
msgid "**Source code:** :source:`Lib/warnings.py`"
msgstr "**源代码：** :source:`Lib/warnings.py`"

#: ../../library/warnings.rst:13
msgid ""
"Warning messages are typically issued in situations where it is useful to "
"alert the user of some condition in a program, where that condition "
"(normally) doesn't warrant raising an exception and terminating the program."
"  For example, one might want to issue a warning when a program uses an "
"obsolete module."
msgstr ""
"通常以下情况会引发警告：提醒用户注意程序中的某些情况，而这些情况（通常）还不值得触发异常并终止程序。例如，当程序用到了某个过时的模块时，就可能需要发出一条警告。"

#: ../../library/warnings.rst:18
msgid ""
"Python programmers issue warnings by calling the :func:`warn` function "
"defined in this module.  (C programmers use :c:func:`PyErr_WarnEx`; see "
":ref:`exceptionhandling` for details)."
msgstr ""
"Python 程序员可调用本模块中定义的 :func:`warn` 函数来发布警告。（C 语言程序员则用 :c:func:`PyErr_WarnEx` "
"； 详见 :ref:`exceptionhandling` ）。"

#: ../../library/warnings.rst:22
msgid ""
"Warning messages are normally written to :data:`sys.stderr`, but their "
"disposition can be changed flexibly, from ignoring all warnings to turning "
"them into exceptions.  The disposition of warnings can vary based on the "
":ref:`warning category <warning-categories>`, the text of the warning "
"message, and the source location where it is issued.  Repetitions of a "
"particular warning for the same source location are typically suppressed."
msgstr ""
"警告信息通常会写入 :data:`sys.stderr` ，但可以灵活改变，从忽略所有警告到变成异常都可以。警告的处理方式可以依据 "
":ref:`警告类型<warning-categories>` 、警告信息的文本和发出警告的源位置而进行变化。同一源位置重复出现的警告通常会被抑制。"

#: ../../library/warnings.rst:29
msgid ""
"There are two stages in warning control: first, each time a warning is "
"issued, a determination is made whether a message should be issued or not; "
"next, if a message is to be issued, it is formatted and printed using a "
"user-settable hook."
msgstr "控制警告信息有两个阶段：首先，每次引发警告时，决定信息是否要发出；然后，如果要发出信息，就用可由用户设置的钩子进行格式化并打印输出。"

#: ../../library/warnings.rst:33
msgid ""
"The determination whether to issue a warning message is controlled by the "
":ref:`warning filter <warning-filter>`, which is a sequence of matching "
"rules and actions. Rules can be added to the filter by calling "
":func:`filterwarnings` and reset to its default state by calling "
":func:`resetwarnings`."
msgstr ""
":ref:`警告过滤器 <warning-filter>` 控制着是否发出警告信息，也即一系列的匹配规则和动作。调用 "
":func:`filterwarnings` 可将规则加入过滤器，调用  :func:`resetwarnings` 则可重置为默认状态。"

#: ../../library/warnings.rst:38
msgid ""
"The printing of warning messages is done by calling :func:`showwarning`, "
"which may be overridden; the default implementation of this function formats"
" the message by calling :func:`formatwarning`, which is also available for "
"use by custom implementations."
msgstr ""
"警告信息的打印输出是通过调用 :func:`showwarning` 完成的，该函数可被重写；默认的实现代码是调用 "
":func:`formatwarning` 进行格式化，自己编写的代码也可以调用此格式化函数。"

#: ../../library/warnings.rst:44
msgid ""
":func:`logging.captureWarnings` allows you to handle all warnings with the "
"standard logging infrastructure."
msgstr "利用 :func:`logging.captureWarnings` 可以采用标准的日志架构处理所有警告。"

#: ../../library/warnings.rst:51
msgid "Warning Categories"
msgstr "警告类别"

#: ../../library/warnings.rst:53
msgid ""
"There are a number of built-in exceptions that represent warning categories."
" This categorization is useful to be able to filter out groups of warnings."
msgstr "警告的类别由一些内置的异常表示。这种分类有助于对警告信息进行分组过滤。"

#: ../../library/warnings.rst:56
msgid ""
"While these are technically :ref:`built-in exceptions <warning-categories-"
"as-exceptions>`, they are documented here, because conceptually they belong "
"to the warnings mechanism."
msgstr ""
"虽然在技术上警告类别属于 :ref:`内置异常 <warning-categories-as-"
"exceptions>`，但也只是在此记录一下而已，因为在概念上他们属于警告机制的一部分。"

#: ../../library/warnings.rst:60
msgid ""
"User code can define additional warning categories by subclassing one of the"
" standard warning categories.  A warning category must always be a subclass "
"of the :exc:`Warning` class."
msgstr "通过对某个标准的警告类别进行派生，用户代码可以定义其他的警告类别。 警告类别必须是 :exc:`Warning` 类的子类。"

#: ../../library/warnings.rst:64
msgid "The following warnings category classes are currently defined:"
msgstr "目前已定义了以下警告类别的类："

#: ../../library/warnings.rst:69
msgid "Class"
msgstr "类"

#: ../../library/warnings.rst:69
msgid "Description"
msgstr "描述"

#: ../../library/warnings.rst:71
msgid ":exc:`Warning`"
msgstr ":exc:`Warning`"

#: ../../library/warnings.rst:71
msgid ""
"This is the base class of all warning category classes.  It is a subclass of"
" :exc:`Exception`."
msgstr "这是所有警告类别的基类。它是 :exc:`Exception` 的子类。"

#: ../../library/warnings.rst:75
msgid ":exc:`UserWarning`"
msgstr ":exc:`UserWarning`"

#: ../../library/warnings.rst:75
msgid "The default category for :func:`warn`."
msgstr " :func:`warn` 的默认类别。"

#: ../../library/warnings.rst:77
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/warnings.rst:77
msgid ""
"Base category for warnings about deprecated features when those warnings are"
" intended for other Python developers (ignored by default, unless triggered "
"by code in ``__main__``)."
msgstr "已废弃特性警告的基类，这些警告是为其他 Python 开发者准备的（默认会忽略，除非在 ``__main__`` 中用代码触发）。"

#: ../../library/warnings.rst:82
msgid ":exc:`SyntaxWarning`"
msgstr ":exc:`SyntaxWarning`"

#: ../../library/warnings.rst:82
msgid "Base category for warnings about dubious syntactic features."
msgstr "用于警告可疑语法的基类。"

#: ../../library/warnings.rst:85
msgid ":exc:`RuntimeWarning`"
msgstr ":exc:`RuntimeWarning`"

#: ../../library/warnings.rst:85
msgid "Base category for warnings about dubious runtime features."
msgstr "用于警告可疑运行时特性的基类。"

#: ../../library/warnings.rst:88
msgid ":exc:`FutureWarning`"
msgstr ":exc:`FutureWarning`"

#: ../../library/warnings.rst:88
msgid ""
"Base category for warnings about deprecated features when those warnings are"
" intended for end users of applications that are written in Python."
msgstr "用于警告已废弃特性的基类，这些警告是为 Python 应用程序的最终用户准备的。"

#: ../../library/warnings.rst:93
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/warnings.rst:93
msgid ""
"Base category for warnings about features that will be deprecated in the "
"future (ignored by default)."
msgstr "用于警告即将废弃功能的基类（默认忽略）。"

#: ../../library/warnings.rst:97
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/warnings.rst:97
msgid ""
"Base category for warnings triggered during the process of importing a "
"module (ignored by default)."
msgstr "导入模块时触发的警告的基类（默认忽略）。"

#: ../../library/warnings.rst:101
msgid ":exc:`UnicodeWarning`"
msgstr ":exc:`UnicodeWarning`"

#: ../../library/warnings.rst:101
msgid "Base category for warnings related to Unicode."
msgstr "用于 Unicode 相关警告的基类。"

#: ../../library/warnings.rst:104
msgid ":exc:`BytesWarning`"
msgstr ":exc:`BytesWarning`"

#: ../../library/warnings.rst:104
msgid ""
"Base category for warnings related to :class:`bytes` and :class:`bytearray`."
msgstr ":class:`bytes` 和 :class:`bytearray` 相关警告的基类。"

#: ../../library/warnings.rst:107
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../library/warnings.rst:107
msgid ""
"Base category for warnings related to resource usage (ignored by default)."
msgstr "资源使用相关警告的基础类别（默认会被忽略）。ignored by default)."

#: ../../library/warnings.rst:111
msgid ""
"Previously :exc:`DeprecationWarning` and :exc:`FutureWarning` were "
"distinguished based on whether a feature was being removed entirely or "
"changing its behaviour. They are now distinguished based on their intended "
"audience and the way they're handled by the default warnings filters."
msgstr ""
"以前 :exc:`DeprecationWarning` 和 :exc:`FutureWarning` "
"是根据某个功能是否完全删除或改变其行为来区分的。现在是根据受众和默认警告过滤器的处理方式来区分的。"

#: ../../library/warnings.rst:122
msgid "The Warnings Filter"
msgstr "警告过滤器"

#: ../../library/warnings.rst:124
msgid ""
"The warnings filter controls whether warnings are ignored, displayed, or "
"turned into errors (raising an exception)."
msgstr "警告过滤器控制着警告是否被忽略、显示或转为错误（触发异常）。"

#: ../../library/warnings.rst:127
msgid ""
"Conceptually, the warnings filter maintains an ordered list of filter "
"specifications; any specific warning is matched against each filter "
"specification in the list in turn until a match is found; the filter "
"determines the disposition of the match.  Each entry is a tuple of the form "
"(*action*, *message*, *category*, *module*, *lineno*), where:"
msgstr ""
"从概念上讲，警告过滤器维护着一个经过排序的过滤器类别列表；任何具体的警告都会依次与列表中的每种过滤器进行匹配，直到找到一个匹配项；过滤器决定了匹配项的处理方式。每个列表项均为"
" ( *action* ,  *message* ,  *category* ,  *module* ,  *lineno* ) 格式的元组，其中："

#: ../../library/warnings.rst:133
msgid "*action* is one of the following strings:"
msgstr "*action* 是以下字符串之一："

#: ../../library/warnings.rst:136
msgid "Value"
msgstr "值"

#: ../../library/warnings.rst:136
msgid "Disposition"
msgstr "处置"

#: ../../library/warnings.rst:138
msgid "``\"default\"``"
msgstr "``\"default\"``"

#: ../../library/warnings.rst:138
msgid ""
"print the first occurrence of matching warnings for each location (module + "
"line number) where the warning is issued"
msgstr "为发出警告的每个位置（模块+行号）打印第一个匹配警告"

#: ../../library/warnings.rst:142
msgid "``\"error\"``"
msgstr "``\"error\"``"

#: ../../library/warnings.rst:142
msgid "turn matching warnings into exceptions"
msgstr "将匹配警告转换为异常"

#: ../../library/warnings.rst:144
msgid "``\"ignore\"``"
msgstr "``\"ignore\"``"

#: ../../library/warnings.rst:144
msgid "never print matching warnings"
msgstr "从不打印匹配的警告"

#: ../../library/warnings.rst:146
msgid "``\"always\"``"
msgstr "``\"always\"``"

#: ../../library/warnings.rst:146
msgid "always print matching warnings"
msgstr "总是打印匹配的警告"

#: ../../library/warnings.rst:148
msgid "``\"module\"``"
msgstr "``\"module\"``"

#: ../../library/warnings.rst:148
msgid ""
"print the first occurrence of matching warnings for each module where the "
"warning is issued (regardless of line number)"
msgstr "为发出警告的每个模块打印第一次匹配警告（无论行号如何）"

#: ../../library/warnings.rst:152
msgid "``\"once\"``"
msgstr "``\"once\"``"

#: ../../library/warnings.rst:152
msgid ""
"print only the first occurrence of matching warnings, regardless of location"
msgstr "无论位置如何，仅打印第一次出现的匹配警告"

#: ../../library/warnings.rst:156
msgid ""
"*message* is a string containing a regular expression that the start of the "
"warning message must match, case-insensitively.  In :option:`-W` and "
":envvar:`PYTHONWARNINGS`, *message* is a literal string that the start of "
"the warning message must contain (case-insensitively), ignoring any "
"whitespace at the start or end of *message*."
msgstr ""
"*message* 是一个包含警告消息的开头需要匹配的正则表达式的字符串，对大小写不敏感。 在 :option:`-W` 和 "
":envvar:`PYTHONWARNINGS` 中，*message* 是警告消息的开头需要包含的字符串字面值（对大小写不敏感），将忽略 "
"*message* 开头和末尾的任何空格。"

#: ../../library/warnings.rst:162
msgid ""
"*category* is a class (a subclass of :exc:`Warning`) of which the warning "
"category must be a subclass in order to match."
msgstr "*category* 是警告类别的类（:exc:`Warning` 的子类），警告类别必须是其子类，才能匹配。"

#: ../../library/warnings.rst:165
msgid ""
"*module* is a string containing a regular expression that the start of the "
"fully qualified module name must match, case-sensitively.  In :option:`-W` "
"and :envvar:`PYTHONWARNINGS`, *module* is a literal string that the fully "
"qualified module name must be equal to (case-sensitively), ignoring any "
"whitespace at the start or end of *module*."
msgstr ""
"*module* 是一个包含完整限定模块名称的开头需要匹配的正则表达式的字符串，对大小写敏感。 在 :option:`-W` 和 "
":envvar:`PYTHONWARNINGS` 中，*module* 是完整限定模块名称需要与之相等的字符串字面值（对大小写敏感），将忽略 "
"*module* 开头和末尾的任何空格。"

#: ../../library/warnings.rst:171
msgid ""
"*lineno* is an integer that the line number where the warning occurred must "
"match, or ``0`` to match all line numbers."
msgstr "*lineno* 是个整数，发生警告的行号必须与之匹配，或为 ``0`` 表示与所有行号匹配。"

#: ../../library/warnings.rst:174
msgid ""
"Since the :exc:`Warning` class is derived from the built-in :exc:`Exception`"
" class, to turn a warning into an error we simply raise "
"``category(message)``."
msgstr ""
"由于 :exc:`Warning` 类是由内置类 :exc:`Exception` 派生出来的，要把某个警告变成错误，只要触发 "
"``category(message)`` 即可。"

#: ../../library/warnings.rst:177
msgid ""
"If a warning is reported and doesn't match any registered filter then the "
"\"default\" action is applied (hence its name)."
msgstr "如果警告不匹配所有已注册的过滤器，那就会应用 “default” 动作（正如其名）。"

#: ../../library/warnings.rst:185
msgid "Repeated Warning Suppression Criteria"
msgstr "重复警告的屏蔽准则"

#: ../../library/warnings.rst:187
msgid ""
"The filters that suppress repeated warnings apply the following criteria to "
"determine if a warning is considered a repeat:"
msgstr "屏蔽重复警告的过滤器将应用以下准则来确定一个警告是否会被视为重复:"

#: ../../library/warnings.rst:189
msgid ""
"``\"default\"``: A warning is considered a repeat only if the (*message*, "
"*category*, *module*, *lineno*) are all the same."
msgstr ""
"``\"default\"``: 一个警告仅在 (*message*, *category*, *module*, *lineno*) "
"全部相同时会被视为重复。"

#: ../../library/warnings.rst:190
msgid ""
"``\"module\"``: A warning is considered a repeat if the (*message*, "
"*category*, *module*) are the same, ignoring the line number."
msgstr "``\"module\"``: 一个警告将在 (*message*, *category*, *module*) 相同时会被视为重复，即忽略行号。"

#: ../../library/warnings.rst:191
msgid ""
"``\"once\"``: A warning is considered a repeat if the (*message*, "
"*category*) are the same, ignoring the module and line number."
msgstr "``\"once\"``: 一个警告将在 (*message*, *category*) 相同时会被视为重复，即忽略模块和行号。"

#: ../../library/warnings.rst:197
msgid "Describing Warning Filters"
msgstr "警告过滤器的介绍"

#: ../../library/warnings.rst:199
msgid ""
"The warnings filter is initialized by :option:`-W` options passed to the "
"Python interpreter command line and the :envvar:`PYTHONWARNINGS` environment"
" variable. The interpreter saves the arguments for all supplied entries "
"without interpretation in :data:`sys.warnoptions`; the :mod:`warnings` "
"module parses these when it is first imported (invalid options are ignored, "
"after printing a message to :data:`sys.stderr`)."
msgstr ""
"警告过滤器由传给 Python 解释器的命令行 :option:`-W` 选项和 :envvar:`PYTHONWARNINGS` "
"环境变量初始化。解释器在  :data:`sys.warningoptions` 中保存了所有给出的参数，但不作解释；:mod:`warnings` "
"模块在第一次导入时会解析这些参数（无效的选项被忽略，并会先向 :data:`sys.stderr` 打印一条信息）。"

#: ../../library/warnings.rst:206
msgid ""
"Individual warnings filters are specified as a sequence of fields separated "
"by colons::"
msgstr "每个警告过滤器的设定格式为冒号分隔的字段序列："

#: ../../library/warnings.rst:209
msgid "action:message:category:module:line"
msgstr "action:message:category:module:line"

#: ../../library/warnings.rst:211
msgid ""
"The meaning of each of these fields is as described in :ref:`warning-"
"filter`. When listing multiple filters on a single line (as for "
":envvar:`PYTHONWARNINGS`), the individual filters are separated by commas "
"and the filters listed later take precedence over those listed before them "
"(as they're applied left-to-right, and the most recently applied filters "
"take precedence over earlier ones)."
msgstr ""
"这些字段的含义在 :ref:`warning-filter` 中描述。当一行中列出多个过滤器时（如 "
":envvar:`PYTHONWARNINGS`），过滤器间用逗号隔开，后面的优先于前面的（因为是从左到右应用的，最近应用的过滤器优先于前面的）。"

#: ../../library/warnings.rst:218
msgid ""
"Commonly used warning filters apply to either all warnings, warnings in a "
"particular category, or warnings raised by particular modules or packages. "
"Some examples::"
msgstr "常用的警告过滤器适用于所有的警告、特定类别的警告、由特定模块和包引发的警告。下面是一些例子："

#: ../../library/warnings.rst:222
msgid ""
"default                      # Show all warnings (even those ignored by default)\n"
"ignore                       # Ignore all warnings\n"
"error                        # Convert all warnings to errors\n"
"error::ResourceWarning       # Treat ResourceWarning messages as errors\n"
"default::DeprecationWarning  # Show DeprecationWarning messages\n"
"ignore,default:::mymodule    # Only report warnings triggered by \"mymodule\"\n"
"error:::mymodule             # Convert warnings to errors in \"mymodule\""
msgstr ""
"default                      # 显示所有警告（即使是默认被忽略的）\n"
"ignore                       # 忽略所有警告\n"
"error                        # 将所有警告转换为错误\n"
"error::ResourceWarning       # 将 ResourceWarning 消息视为错误\n"
"default::DeprecationWarning  # 显示 DeprecationWarning 消息\n"
"ignore,default:::mymodule    # 只报告由 \"mymodule\" 触发的警告\n"
"error:::mymodule             # 将 \"mymodule\" 中的警告转换为错误"

#: ../../library/warnings.rst:234
msgid "Default Warning Filter"
msgstr "默认警告过滤器"

#: ../../library/warnings.rst:236
msgid ""
"By default, Python installs several warning filters, which can be overridden"
" by the :option:`-W` command-line option, the :envvar:`PYTHONWARNINGS` "
"environment variable and calls to :func:`filterwarnings`."
msgstr ""
"Python 默认安装了几个警告过滤器，可以通过 :option:`-W` 命令行参数、 :envvar:`PYTHONWARNINGS` "
"环境变量及调用 :func:`filterwarnings` 进行覆盖。"

#: ../../library/warnings.rst:240
msgid ""
"In regular release builds, the default warning filter has the following "
"entries (in order of precedence)::"
msgstr "在常规发布的版本中，默认的警告过滤器包括（按优先顺序排列）："

#: ../../library/warnings.rst:243
msgid ""
"default::DeprecationWarning:__main__\n"
"ignore::DeprecationWarning\n"
"ignore::PendingDeprecationWarning\n"
"ignore::ImportWarning\n"
"ignore::ResourceWarning"
msgstr ""
"default::DeprecationWarning:__main__\n"
"ignore::DeprecationWarning\n"
"ignore::PendingDeprecationWarning\n"
"ignore::ImportWarning\n"
"ignore::ResourceWarning"

#: ../../library/warnings.rst:249
msgid ""
"In a :ref:`debug build <debug-build>`, the list of default warning filters "
"is empty."
msgstr "在 :ref:`调试版本 <debug-build>` 中，默认警告过滤器的列表是空的。"

#: ../../library/warnings.rst:251
msgid ""
":exc:`DeprecationWarning` is now ignored by default in addition to "
":exc:`PendingDeprecationWarning`."
msgstr ""
"除了 :exc:`PendingDeprecationWarning` 之外，:exc:`DeprecationWarning` 现在默认会被忽略。"

#: ../../library/warnings.rst:255
msgid ""
":exc:`DeprecationWarning` is once again shown by default when triggered "
"directly by code in ``__main__``."
msgstr ":exc:`DeprecationWarning` 在被 ``__main__`` 中的代码直接触发时，默认会再次显示。"

#: ../../library/warnings.rst:259
msgid ""
":exc:`BytesWarning` no longer appears in the default filter list and is "
"instead configured via :data:`sys.warnoptions` when :option:`-b` is "
"specified twice."
msgstr ""
"如果指定两次 :option:`-b`，则 :exc:`BytesWarning` 不再出现在默认的过滤器列表中，而是通过 "
":data:`sys.warningoptions` 进行配置。"

#: ../../library/warnings.rst:268
msgid "Overriding the default filter"
msgstr "重写默认的过滤器"

#: ../../library/warnings.rst:270
msgid ""
"Developers of applications written in Python may wish to hide *all* Python "
"level warnings from their users by default, and only display them when "
"running tests or otherwise working on the application. The "
":data:`sys.warnoptions` attribute used to pass filter configurations to the "
"interpreter can be used as a marker to indicate whether or not warnings "
"should be disabled::"
msgstr ""
"Python 应用程序的开发人员可能希望在默认情况下向用户隐藏 *所有* "
"Python级别的警告，而只在运行测试或其他调试时显示这些警告。用于向解释器传递过滤器配置的 :data:`sys.warningoptions` "
"属性可以作为一个标记，表示是否应该禁用警告："

#: ../../library/warnings.rst:276
msgid ""
"import sys\n"
"\n"
"if not sys.warnoptions:\n"
"    import warnings\n"
"    warnings.simplefilter(\"ignore\")"
msgstr ""
"import sys\n"
"\n"
"if not sys.warnoptions:\n"
"    import warnings\n"
"    warnings.simplefilter(\"ignore\")"

#: ../../library/warnings.rst:282
msgid ""
"Developers of test runners for Python code are advised to instead ensure "
"that *all* warnings are displayed by default for the code under test, using "
"code like::"
msgstr "建议 Python 代码测试的开发者使用如下代码，以确保被测代码默认显示 *所有* 警告："

#: ../../library/warnings.rst:286
msgid ""
"import sys\n"
"\n"
"if not sys.warnoptions:\n"
"    import os, warnings\n"
"    warnings.simplefilter(\"default\") # Change the filter in this process\n"
"    os.environ[\"PYTHONWARNINGS\"] = \"default\" # Also affect subprocesses"
msgstr ""
"import sys\n"
"\n"
"if not sys.warnoptions:\n"
"    import os, warnings\n"
"    warnings.simplefilter(\"default\") # 更改此进程中的过滤器\n"
"    os.environ[\"PYTHONWARNINGS\"] = \"default\" # 也会影响子进程"

#: ../../library/warnings.rst:293
msgid ""
"Finally, developers of interactive shells that run user code in a namespace "
"other than ``__main__`` are advised to ensure that :exc:`DeprecationWarning`"
" messages are made visible by default, using code like the following (where "
"``user_ns`` is the module used to execute code entered interactively)::"
msgstr ""
"最后，建议在 ``__main__`` 以外的命名空间运行用户代码的交互式开发者，请确保 :exc:`DeprecationWarning` "
"在默认情况下是可见的，可采用如下代码（这里 ``user_ns`` 是用于执行交互式输入代码的模块）："

#: ../../library/warnings.rst:298
msgid ""
"import warnings\n"
"warnings.filterwarnings(\"default\", category=DeprecationWarning,\n"
"                                   module=user_ns.get(\"__name__\"))"
msgstr ""
"import warnings\n"
"warnings.filterwarnings(\"default\", category=DeprecationWarning,\n"
"                                   module=user_ns.get(\"__name__\"))"

#: ../../library/warnings.rst:306
msgid "Temporarily Suppressing Warnings"
msgstr "暂时禁止警告"

#: ../../library/warnings.rst:308
msgid ""
"If you are using code that you know will raise a warning, such as a "
"deprecated function, but do not want to see the warning (even when warnings "
"have been explicitly configured via the command line), then it is possible "
"to suppress the warning using the :class:`catch_warnings` context manager::"
msgstr ""
"如果明知正在使用会引起警告的代码，比如某个废弃函数，但不想看到警告（即便警告已经通过命令行作了显式配置），那么可以使用 "
":class:`catch_warnings` 上下文管理器来抑制警告。"

#: ../../library/warnings.rst:313
msgid ""
"import warnings\n"
"\n"
"def fxn():\n"
"    warnings.warn(\"deprecated\", DeprecationWarning)\n"
"\n"
"with warnings.catch_warnings():\n"
"    warnings.simplefilter(\"ignore\")\n"
"    fxn()"
msgstr ""
"import warnings\n"
"\n"
"def fxn():\n"
"    warnings.warn(\"deprecated\", DeprecationWarning)\n"
"\n"
"with warnings.catch_warnings():\n"
"    warnings.simplefilter(\"ignore\")\n"
"    fxn()"

#: ../../library/warnings.rst:322
msgid ""
"While within the context manager all warnings will simply be ignored. This "
"allows you to use known-deprecated code without having to see the warning "
"while not suppressing the warning for other code that might not be aware of "
"its use of deprecated code.  Note: this can only be guaranteed in a single-"
"threaded application. If two or more threads use the :class:`catch_warnings`"
" context manager at the same time, the behavior is undefined."
msgstr ""
"在上下文管理器中，所有的警告将被简单地忽略。这样就能使用已知的过时代码而又不必看到警告，同时也不会限制警告其他可能不知过时的代码。注意：只能保证在单线程应用程序中生效。如果两个以上的线程同时使用"
" :class:`catch_warnings` 上下文管理器，行为不可预知。"

#: ../../library/warnings.rst:334
msgid "Testing Warnings"
msgstr "测试警告"

#: ../../library/warnings.rst:336
msgid ""
"To test warnings raised by code, use the :class:`catch_warnings` context "
"manager. With it you can temporarily mutate the warnings filter to "
"facilitate your testing. For instance, do the following to capture all "
"raised warnings to check::"
msgstr ""
"要测试由代码引发的警告，请采用 :class:`catch_warnings` "
"上下文管理器。有了它，就可以临时改变警告过滤器以方便测试。例如，以下代码可捕获所有的警告以便查看："

#: ../../library/warnings.rst:341
msgid ""
"import warnings\n"
"\n"
"def fxn():\n"
"    warnings.warn(\"deprecated\", DeprecationWarning)\n"
"\n"
"with warnings.catch_warnings(record=True) as w:\n"
"    # Cause all warnings to always be triggered.\n"
"    warnings.simplefilter(\"always\")\n"
"    # Trigger a warning.\n"
"    fxn()\n"
"    # Verify some things\n"
"    assert len(w) == 1\n"
"    assert issubclass(w[-1].category, DeprecationWarning)\n"
"    assert \"deprecated\" in str(w[-1].message)"
msgstr ""
"import warnings\n"
"\n"
"def fxn():\n"
"    warnings.warn(\"deprecated\", DeprecationWarning)\n"
"\n"
"with warnings.catch_warnings(record=True) as w:\n"
"    # 使得所有警告总是会被触发。\n"
"    warnings.simplefilter(\"always\")\n"
"    # 触发一个警告。\n"
"    fxn()\n"
"    # 执行一些查验\n"
"    assert len(w) == 1\n"
"    assert issubclass(w[-1].category, DeprecationWarning)\n"
"    assert \"deprecated\" in str(w[-1].message)"

#: ../../library/warnings.rst:356
msgid ""
"One can also cause all warnings to be exceptions by using ``error`` instead "
"of ``always``. One thing to be aware of is that if a warning has already "
"been raised because of a ``once``/``default`` rule, then no matter what "
"filters are set the warning will not be seen again unless the warnings "
"registry related to the warning has been cleared."
msgstr ""
"也可以用 ``error`` 取代 ``always`` ，让所有的警告都成为异常。需要注意的是，如果某条警告已经因为 ``once`` / "
"``default`` 规则而被引发，那么无论设置什么过滤器，该条警告都不会再出现，除非该警告有关的注册数据被清除。"

#: ../../library/warnings.rst:362
msgid ""
"Once the context manager exits, the warnings filter is restored to its state"
" when the context was entered. This prevents tests from changing the "
"warnings filter in unexpected ways between tests and leading to "
"indeterminate test results. The :func:`showwarning` function in the module "
"is also restored to its original value.  Note: this can only be guaranteed "
"in a single-threaded application. If two or more threads use the "
":class:`catch_warnings` context manager at the same time, the behavior is "
"undefined."
msgstr ""
"一旦上下文管理器退出，警告过滤器将恢复到刚进此上下文时的状态。这样在多次测试时可防止意外改变警告过滤器，从而导致不确定的测试结果。模块中的 "
":func:`showwarning` 函数也被恢复到初始值。注意：这只能在单线程应用程序中得到保证。如果两个以上的线程同时使用 "
":class:`catch_warnings` 上下文管理器，行为未定义。"

#: ../../library/warnings.rst:370
msgid ""
"When testing multiple operations that raise the same kind of warning, it is "
"important to test them in a manner that confirms each operation is raising a"
" new warning (e.g. set warnings to be raised as exceptions and check the "
"operations raise exceptions, check that the length of the warning list "
"continues to increase after each operation, or else delete the previous "
"entries from the warnings list before each new operation)."
msgstr ""
"当测试多项操作会引发同类警告时，重点是要确保每次操作都会触发新的警告（比如，将警告设置为异常并检查操作是否触发异常，检查每次操作后警告列表的长度是否有增加，否则就在每次新操作前将以前的警告列表项删除）。"

#: ../../library/warnings.rst:381
msgid "Updating Code For New Versions of Dependencies"
msgstr "为新版本的依赖关系更新代码"

#: ../../library/warnings.rst:383
msgid ""
"Warning categories that are primarily of interest to Python developers "
"(rather than end users of applications written in Python) are ignored by "
"default."
msgstr "在默认情况下，主要针对 Python 开发者（而不是 Python 应用程序的最终用户）的警告类别，会被忽略。"

#: ../../library/warnings.rst:386
msgid ""
"Notably, this \"ignored by default\" list includes :exc:`DeprecationWarning`"
" (for every module except ``__main__``), which means developers should make "
"sure to test their code with typically ignored warnings made visible in "
"order to receive timely notifications of future breaking API changes "
"(whether in the standard library or third party packages)."
msgstr ""
"值得注意的是，这个“默认忽略”的列表包含 :exc:`DeprecationWarning` （适用于每个模块，除了 "
"``__main__``），这意味着开发人员应该确保在测试代码时应将通常忽略的警告显示出来，以便未来破坏性 API "
"变化时及时收到通知（无论是在标准库还是第三方包）。"

#: ../../library/warnings.rst:392
msgid ""
"In the ideal case, the code will have a suitable test suite, and the test "
"runner will take care of implicitly enabling all warnings when running tests"
" (the test runner provided by the :mod:`unittest` module does this)."
msgstr ""
"理想情况下，代码会有一个合适的测试套件，在运行测试时会隐含地启用所有警告（由 :mod:`unittest` 模块提供的测试运行程序就是如此）。"

#: ../../library/warnings.rst:396
msgid ""
"In less ideal cases, applications can be checked for use of deprecated "
"interfaces by passing :option:`-Wd <-W>` to the Python interpreter (this is "
"shorthand for :option:`!-W default`) or setting ``PYTHONWARNINGS=default`` "
"in the environment. This enables default handling for all warnings, "
"including those that are ignored by default. To change what action is taken "
"for encountered warnings you can change what argument is passed to "
":option:`-W` (e.g. :option:`!-W error`). See the :option:`-W` flag for more "
"details on what is possible."
msgstr ""
"在不太理想的情况下，可以通过向 Python 解释器传入 :option:`-Wd <-W>`  (这是 :option:`!-W default` "
"的简写) 或设置环境变量 ``PYTHONWARNINGS=default`` 来检查应用程序是否用到了已弃用的接口。 "
"这样可以启用对所有警告的默认处理操作，包括那些默认忽略的警告。 要改变遇到警告后执行的动作，可以改变传给 :option:`-W` 的参数 (例如 "
":option:`!-W error`)。 请参阅 :option:`-W` 旗标来了解更多的细节。"

#: ../../library/warnings.rst:409
msgid "Available Functions"
msgstr "可用的函数"

#: ../../library/warnings.rst:414
msgid ""
"Issue a warning, or maybe ignore it or raise an exception.  The *category* "
"argument, if given, must be a :ref:`warning category class <warning-"
"categories>`; it defaults to :exc:`UserWarning`.  Alternatively, *message* "
"can be a :exc:`Warning` instance, in which case *category* will be ignored "
"and ``message.__class__`` will be used. In this case, the message text will "
"be ``str(message)``. This function raises an exception if the particular "
"warning issued is changed into an error by the :ref:`warnings filter "
"<warning-filter>`.  The *stacklevel* argument can be used by wrapper "
"functions written in Python, like this::"
msgstr ""
"引发警告、忽略或者触发异常。 如果给出 *category* 参数，则必须是  :ref:`警告类别类 <warning-categories>` "
"；默认为 :exc:`UserWarning`。 或者 *message* 可为 :exc:`Warning` 的实例，这时 *category* "
"将被忽略，转而采用 ``message.__class__``。 在这种情况下，错误信息文本将是 ``str(message)``。 如果某条警告被 "
":ref:`警告过滤器 <warning-filter>` 改成了错误，本函数将触发一条异常。 参数 *stacklevel* 可供 Python "
"包装函数使用，比如::"

#: ../../library/warnings.rst:423
msgid ""
"def deprecated_api(message):\n"
"    warnings.warn(message, DeprecationWarning, stacklevel=2)"
msgstr ""
"def deprecated_api(message):\n"
"    warnings.warn(message, DeprecationWarning, stacklevel=2)"

#: ../../library/warnings.rst:426
msgid ""
"This makes the warning refer to ``deprecated_api``'s caller, rather than to "
"the source of ``deprecated_api`` itself (since the latter would defeat the "
"purpose of the warning message)."
msgstr ""
"这会让警告指向 ``deprecated_api`` 的调用者，而不是 ``deprecated_api`` "
"本身的来源（因为后者会破坏警告消息的目的）。"

#: ../../library/warnings.rst:430
msgid ""
"The *skip_file_prefixes* keyword argument can be used to indicate which "
"stack frames are ignored when counting stack levels. This can be useful when"
" you want the warning to always appear at call sites outside of a package "
"when a constant *stacklevel* does not fit all call paths or is otherwise "
"challenging to maintain. If supplied, it must be a tuple of strings. When "
"prefixes are supplied, stacklevel is implicitly overridden to be ``max(2, "
"stacklevel)``. To cause a warning to be attributed to the caller from "
"outside of the current package you might write::"
msgstr ""
"*skip_file_prefixes* 关键字参数可被用来指明在栈层级计数时哪些栈帧要被忽略。 当常数 *stacklevel* "
"不能适应所有调用路径或在其他情况下难以维护如果你希望警告总是在一个包以外的调用位置上出现这将会很有用处。 如果提供，则它必须是一个字符串元组。 当提供了"
" prefixes 前缀时，stacklevel 会被隐式地覆盖为 ``max(2, stacklevel)``。 "
"要使得一个警告被归因至当前包以外的调用方你可以这样写::"

#: ../../library/warnings.rst:439
msgid ""
"# example/lower.py\n"
"_warn_skips = (os.path.dirname(__file__),)\n"
"\n"
"def one_way(r_luxury_yacht=None, t_wobbler_mangrove=None):\n"
"    if r_luxury_yacht:\n"
"        warnings.warn(\"Please migrate to t_wobbler_mangrove=.\",\n"
"                      skip_file_prefixes=_warn_skips)\n"
"\n"
"# example/higher.py\n"
"from . import lower\n"
"\n"
"def another_way(**kw):\n"
"    lower.one_way(**kw)"
msgstr ""
"# example/lower.py\n"
"_warn_skips = (os.path.dirname(__file__),)\n"
"\n"
"def one_way(r_luxury_yacht=None, t_wobbler_mangrove=None):\n"
"    if r_luxury_yacht:\n"
"        warnings.warn(\"Please migrate to t_wobbler_mangrove=.\",\n"
"                      skip_file_prefixes=_warn_skips)\n"
"\n"
"# example/higher.py\n"
"from . import lower\n"
"\n"
"def another_way(**kw):\n"
"    lower.one_way(**kw)"

#: ../../library/warnings.rst:453
msgid ""
"This makes the warning refer to both the ``example.lower.one_way()`` and "
"``example.higher.another_way()`` call sites only from calling code living "
"outside of ``example`` package."
msgstr ""

#: ../../library/warnings.rst:457 ../../library/warnings.rst:483
msgid ""
"*source*, if supplied, is the destroyed object which emitted a "
":exc:`ResourceWarning`."
msgstr "*source* 是发出 :exc:`ResourceWarning` 的被销毁对象。"

#: ../../library/warnings.rst:460
msgid "Added *source* parameter."
msgstr "加入  *source*  参数。"

#: ../../library/warnings.rst:463
msgid "Added *skip_file_prefixes*."
msgstr "增加了 *skip_file_prefixes*。"

#: ../../library/warnings.rst:469
msgid ""
"This is a low-level interface to the functionality of :func:`warn`, passing "
"in explicitly the message, category, filename and line number, and "
"optionally the module name and the registry (which should be the "
"``__warningregistry__`` dictionary of the module).  The module name defaults"
" to the filename with ``.py`` stripped; if no registry is passed, the "
"warning is never suppressed. *message* must be a string and *category* a "
"subclass of :exc:`Warning` or *message* may be a :exc:`Warning` instance, in"
" which case *category* will be ignored."
msgstr ""
"这是 :func:`warn` 函数的底层接口，显式传入消息、类别、文件名和行号，以及可选的模块名和注册表（应为模块的 "
"``__warningregistry__`` 字典）。 模块名称默认为去除了 ``.py`` 的文件名；如果未传递注册表，警告就不会被抑制。 "
"*message* 必须是个字符串，*category* 是 :exc:`Warning` 的子类；或者*message* 可为 "
":exc:`Warning` 的实例，且 *category* 将被忽略。"

#: ../../library/warnings.rst:478
msgid ""
"*module_globals*, if supplied, should be the global namespace in use by the "
"code for which the warning is issued.  (This argument is used to support "
"displaying source for modules found in zipfiles or other non-filesystem "
"import sources)."
msgstr "*module_globals* 应为发出警告的代码所用的全局命名空间。（该参数用于从 zip 文件或其他非文件系统导入模块时显式源码）。"

#: ../../library/warnings.rst:486
msgid "Add the *source* parameter."
msgstr "加入  *source* 参数。"

#: ../../library/warnings.rst:492
msgid ""
"Write a warning to a file.  The default implementation calls "
"``formatwarning(message, category, filename, lineno, line)`` and writes the "
"resulting string to *file*, which defaults to :data:`sys.stderr`.  You may "
"replace this function with any callable by assigning to "
"``warnings.showwarning``. *line* is a line of source code to be included in "
"the warning message; if *line* is not supplied, :func:`showwarning` will try"
" to read the line specified by *filename* and *lineno*."
msgstr ""
"将警告信息写入文件。默认的实现代码是调用 ``formatwarning(message, category, filename, lineno, "
"line)`` 并将结果字符串写入 *file* ，默认文件为 :data:`sys.stderr`。通过将任何可调用对象赋给 "
"``warnings.showwarning`` 可替换掉该函数。*line* 是要包含在警告信息中的一行源代码；如果未提供 "
"*line*，:func:`showwarning` 将尝试读取由*filename* 和 *lineno* 指定的行。"

#: ../../library/warnings.rst:503
msgid ""
"Format a warning the standard way.  This returns a string which may contain "
"embedded newlines and ends in a newline.  *line* is a line of source code to"
" be included in the warning message; if *line* is not supplied, "
":func:`formatwarning` will try to read the line specified by *filename* and "
"*lineno*."
msgstr ""
"以标准方式格式化一条警告信息。将返回一个字符串，可能包含内嵌的换行符，并以换行符结束。如果未提供 "
"*line*，:func:`formatwarning` 将尝试读取由 *filename* 和 *lineno* 指定的行。"

#: ../../library/warnings.rst:512
msgid ""
"Insert an entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The entry is inserted at the front by default; if "
"*append* is true, it is inserted at the end.  This checks the types of the "
"arguments, compiles the *message* and *module* regular expressions, and "
"inserts them as a tuple in the list of warnings filters.  Entries closer to "
"the front of the list override entries later in the list, if both match a "
"particular warning.  Omitted arguments default to a value that matches "
"everything."
msgstr ""
"在 :ref:`警告过滤器种类 <warning-filter>` 列表中插入一条数据项。默认情况下，该数据项将被插到前面；如果 *append* 为 "
"True，则会插到后面。这里会检查参数的类型，编译 *message* 和 *module* "
"正则表达式，并将他们作为一个元组插入警告过滤器的列表中。如果两者都与某种警告匹配，那么靠近列表前面的数据项就会覆盖后面的项。省略的参数默认匹配任意值。"

#: ../../library/warnings.rst:524
msgid ""
"Insert a simple entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The meaning of the function parameters is as for "
":func:`filterwarnings`, but regular expressions are not needed as the filter"
" inserted always matches any message in any module as long as the category "
"and line number match."
msgstr ""
"在 :ref:`警告过滤器种类 <warning-filter>` 列表中插入一条简单数据项。函数参数的含义与 "
":func:`filterwarnings` 相同，但不需要正则表达式，因为插入的过滤器总是匹配任何模块中的任何信息，只要类别和行号匹配即可。"

#: ../../library/warnings.rst:533
msgid ""
"Reset the warnings filter.  This discards the effect of all previous calls "
"to :func:`filterwarnings`, including that of the :option:`-W` command line "
"options and calls to :func:`simplefilter`."
msgstr ""
"重置警告过滤器。这将丢弃之前对 :func:`filterwarnings` 的所有调用，包括 :option:`-W` 命令行选项和对 "
":func:`simplefilter` 的调用效果。"

#: ../../library/warnings.rst:540
msgid ""
"Decorator to indicate that a class, function or overload is deprecated."
msgstr "指明某个类、函数或重载已被弃用的装饰器。"

#: ../../library/warnings.rst:542
msgid ""
"When this decorator is applied to an object, deprecation warnings may be "
"emitted at runtime when the object is used. :term:`static type checkers "
"<static type checker>` will also generate a diagnostic on usage of the "
"deprecated object."
msgstr ""
"当此装饰器被应用于某个对象时，在运行时当该对象被使用时将会发出弃用警告。 :term:`静态类型检查器 <static type checker>` "
"也会生成已弃用对象的使用情况诊断报告。"

#: ../../library/warnings.rst:547
msgid "Usage::"
msgstr "用法："

#: ../../library/warnings.rst:549
msgid ""
"from warnings import deprecated\n"
"from typing import overload\n"
"\n"
"@deprecated(\"Use B instead\")\n"
"class A:\n"
"    pass\n"
"\n"
"@deprecated(\"Use g instead\")\n"
"def f():\n"
"    pass\n"
"\n"
"@overload\n"
"@deprecated(\"int support is deprecated\")\n"
"def g(x: int) -> int: ...\n"
"@overload\n"
"def g(x: str) -> int: ..."
msgstr ""
"from warnings import deprecated\n"
"from typing import overload\n"
"\n"
"@deprecated(\"Use B instead\")\n"
"class A:\n"
"    pass\n"
"\n"
"@deprecated(\"Use g instead\")\n"
"def f():\n"
"    pass\n"
"\n"
"@overload\n"
"@deprecated(\"int support is deprecated\")\n"
"def g(x: int) -> int: ...\n"
"@overload\n"
"def g(x: str) -> int: ..."

#: ../../library/warnings.rst:566
msgid ""
"The warning specified by *category* will be emitted at runtime on use of "
"deprecated objects. For functions, that happens on calls; for classes, on "
"instantiation and on creation of subclasses. If the *category* is ``None``, "
"no warning is emitted at runtime. The *stacklevel* determines where the "
"warning is emitted. If it is ``1`` (the default), the warning is emitted at "
"the direct caller of the deprecated object; if it is higher, it is emitted "
"further up the stack. Static type checker behavior is not affected by the "
"*category* and *stacklevel* arguments."
msgstr ""
"在运行时当已弃用对象被使用时将发出由 *category* 所指明的警告。 对于函数，这会在执行调用时发生；对于类，则会在实例化或创建子类时发生。 如果"
" *category* 为 ``None``，则不会在运行时发出警告。 *stacklevel* 确定要在哪里发出警告。 如为 ``1`` "
"(默认值)，警告将在已弃用对象的直接调用方那里发出；如为更高的值，它将在栈的更高层级上发出。 静态类型检查器的行为不会受到 *category* 和 "
"*stacklevel* 参数的影响。"

#: ../../library/warnings.rst:577
msgid ""
"The deprecation message passed to the decorator is saved in the "
"``__deprecated__`` attribute on the decorated object. If applied to an "
"overload, the decorator must be after the :func:`@overload "
"<typing.overload>` decorator for the attribute to exist on the overload as "
"returned by :func:`typing.get_overloads`."
msgstr ""
"传给该装饰器的弃用消息保存在被装饰对象的 ``__deprecated__`` 属性中。 如果应用于重载，该装饰器必须位于 "
":func:`@overload <typing.overload>` 装饰器之后以使该属性存在于 "
":func:`typing.get_overloads` 所返回的重载之中。"

#: ../../library/warnings.rst:584
msgid "See :pep:`702`."
msgstr "参见 :pep:`702`。"

#: ../../library/warnings.rst:589
msgid "Available Context Managers"
msgstr "可用的上下文管理器"

#: ../../library/warnings.rst:593
msgid ""
"A context manager that copies and, upon exit, restores the warnings filter "
"and the :func:`showwarning` function. If the *record* argument is "
":const:`False` (the default) the context manager returns :class:`None` on "
"entry. If *record* is :const:`True`, a list is returned that is "
"progressively populated with objects as seen by a custom :func:`showwarning`"
" function (which also suppresses output to ``sys.stdout``). Each object in "
"the list has attributes with the same names as the arguments to "
":func:`showwarning`."
msgstr ""
"该上下文管理器会复制警告过滤器和 :func:`showwarning` 函数，并在退出时恢复。 如果 *record* 参数是 "
":const:`False` (默认)，则在进入时会返回 :class:`None`。 如果 *record* 为 "
":const:`True`，则返回一个列表，列表由自定义 :func:`showwarning` 函数所用对象逐步填充（该函数还会抑制 "
"``sys.stdout`` 的输出）。 列表中每个对象的属性与 :func:`showwarning` 的参数名称相同。"

#: ../../library/warnings.rst:602
msgid ""
"The *module* argument takes a module that will be used instead of the module"
" returned when you import :mod:`warnings` whose filter will be protected. "
"This argument exists primarily for testing the :mod:`warnings` module "
"itself."
msgstr ""
"*module* 参数代表一个模块，当导入 :mod:`warnings` 时，将被用于代替返回的模块，其过滤器将被保护。该参数主要是为了测试 "
":mod:`warnings` 模块自身。"

#: ../../library/warnings.rst:607
msgid ""
"If the *action* argument is not ``None``, the remaining arguments are passed"
" to :func:`simplefilter` as if it were called immediately on entering the "
"context."
msgstr ""
"如果 *action* 参数不为 ``None``，则剩余的参数会被传递给 :func:`simplefilter` "
"就如同它在进入上下文时被立即调用一样。"

#: ../../library/warnings.rst:611
msgid ""
"See :ref:`warning-filter` for the meaning of the *category* and *lineno* "
"parameters."
msgstr "请参阅 :ref:`warning-filter` 了解 *category* 和 *lineno* 形参的含义。"

#: ../../library/warnings.rst:616
msgid ""
"The :class:`catch_warnings` manager works by replacing and then later "
"restoring the module's :func:`showwarning` function and internal list of "
"filter specifications.  This means the context manager is modifying global "
"state and therefore is not thread-safe."
msgstr ""
":class:`catch_warnings` 管理器的工作方式，是替换并随后恢复模块的 :func:`showwarning` "
"函数和内部的过滤器种类列表。这意味着上下文管理器将会修改全局状态，因此不是线程安全的。"

#: ../../library/warnings.rst:624
msgid "Added the *action*, *category*, *lineno*, and *append* parameters."
msgstr "增加了 *action*, *category*, *lineno* 和 *append* 形参。"

#: ../../library/warnings.rst:9
msgid "warnings"
msgstr "warnings"
