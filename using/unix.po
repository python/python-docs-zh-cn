# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# wevsty <ty@wevs.org>, 2021
# 陈也在哦 <wenbinchen150@icloud.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-02 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:51+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/unix.rst:7
msgid "Using Python on Unix platforms"
msgstr "在类Unix环境下使用Python"

#: ../../using/unix.rst:13
msgid "Getting and installing the latest version of Python"
msgstr "获得并安装Python的最新版本"

#: ../../using/unix.rst:16
msgid "On Linux"
msgstr "在Linux中"

#: ../../using/unix.rst:18
msgid ""
"Python comes preinstalled on most Linux distributions, and is available as a"
" package on all others.  However there are certain features you might want "
"to use that are not available on your distro's package.  You can compile the"
" latest version of Python from source."
msgstr ""
"Python 预装在大多数 Linux 发行版上，并在它们以外的发行版上以软件包的形式提供。 "
"不过在你所用的发行版的软件包中可能没有某些你需要使用的功能。 这时你可以用源代码来编译最新版本的 Python。"

#: ../../using/unix.rst:23
msgid ""
"In the event that the latest version of Python doesn't come preinstalled and"
" isn't in the repositories as well, you can make packages for your own "
"distro.  Have a look at the following links:"
msgstr "对于最新版本的 Python 未预装也不在软件仓库中的情况，你可以为你的发行版制作软件包。 请参阅下面的链接："

#: ../../using/unix.rst:29
msgid "https://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr "https://www.debian.org/doc/manuals/maint-guide/first.en.html"

#: ../../using/unix.rst:30
msgid "for Debian users"
msgstr "对于Debian用户"

#: ../../using/unix.rst:31
msgid "https://en.opensuse.org/Portal:Packaging"
msgstr "https://en.opensuse.org/Portal:Packaging"

#: ../../using/unix.rst:32
msgid "for OpenSuse users"
msgstr "对于OpenSuse用户"

#: ../../using/unix.rst:33
msgid ""
"https://docs.fedoraproject.org/en-US/package-"
"maintainers/Packaging_Tutorial_GNU_Hello/"
msgstr ""
"https://docs.fedoraproject.org/en-US/package-"
"maintainers/Packaging_Tutorial_GNU_Hello/"

#: ../../using/unix.rst:34
msgid "for Fedora users"
msgstr "对于Fedora用户"

#: ../../using/unix.rst:35
msgid "https://slackbook.org/html/package-management-making-packages.html"
msgstr "https://slackbook.org/html/package-management-making-packages.html"

#: ../../using/unix.rst:36
msgid "for Slackware users"
msgstr "对于Slackware用户"

#: ../../using/unix.rst:41
msgid "Installing IDLE"
msgstr "安装 IDLE"

#: ../../using/unix.rst:43
msgid "In some cases, IDLE might not be included in your Python installation."
msgstr "在某些情况下，IDLE 可能未被包括在你的 Python 安装版中。"

#: ../../using/unix.rst:45
msgid "For Debian and Ubuntu users::"
msgstr "对于 Debian 和 Ubuntu 用户::"

#: ../../using/unix.rst:47
msgid ""
"sudo apt update\n"
"sudo apt install idle"
msgstr ""
"sudo apt update\n"
"sudo apt install idle"

#: ../../using/unix.rst:50
msgid "For Fedora, RHEL, and CentOS users::"
msgstr "对于 Fedora, RHEL 和 CentOS 用户::"

#: ../../using/unix.rst:52
msgid "sudo dnf install python3-idle"
msgstr "sudo dnf install python3-idle"

#: ../../using/unix.rst:54
msgid "For SUSE and OpenSUSE users::"
msgstr "对于 SUSE 和 OpenSUSE 用户::"

#: ../../using/unix.rst:56
msgid "sudo zypper install python3-idle"
msgstr "sudo zypper install python3-idle"

#: ../../using/unix.rst:58
msgid "For Alpine Linux users::"
msgstr "对于 Alpine Linux 用户::"

#: ../../using/unix.rst:60
msgid "sudo apk add python3-idle"
msgstr "sudo apk add python3-idle"

#: ../../using/unix.rst:65
msgid "On FreeBSD and OpenBSD"
msgstr "在FreeBSD和OpenBSD上"

#: ../../using/unix.rst:67
msgid "FreeBSD users, to add the package use::"
msgstr "FreeBSD用户，使用以下命令添加包::"

#: ../../using/unix.rst:69
msgid "pkg install python3"
msgstr "pkg install python3"

#: ../../using/unix.rst:71
msgid "OpenBSD users, to add the package use::"
msgstr "OpenBSD用户，使用以下命令添加包::"

#: ../../using/unix.rst:73
msgid ""
"pkg_add -r python\n"
"\n"
"pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your architecture here>/python-<version>.tgz"
msgstr ""
"pkg_add -r python\n"
"\n"
"pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your architecture here>/python-<version>.tgz"

#: ../../using/unix.rst:77
msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr "例如：i386用户获取Python 2.5.1的可用版本::"

#: ../../using/unix.rst:79
msgid ""
"pkg_add "
"ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2.tgz"
msgstr ""
"pkg_add "
"ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2.tgz"

#: ../../using/unix.rst:85
msgid "Building Python"
msgstr "构建Python"

#: ../../using/unix.rst:87
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `clone "
"<https://devguide.python.org/setup/#get-the-source-code>`_.  (If you want to"
" contribute patches, you will need a clone.)"
msgstr ""
"如果你想自己编译 CPython，首先要做的是获取 `源代码 <https://www.python.org/downloads/source/>`_。"
" 你可以下载最新发布版的 source 或是直接抓取最新的 `clone "
"<https://devguide.python.org/setup/#get-the-source-code>`_。 "
"（如果你想要贡献补丁，那么你就必须先 clone。）"

#: ../../using/unix.rst:93
msgid "The build process consists of the usual commands::"
msgstr "构建过程由常用命令组成："

#: ../../using/unix.rst:95
msgid ""
"./configure\n"
"make\n"
"make install"
msgstr ""
"./configure\n"
"make\n"
"make install"

#: ../../using/unix.rst:99
msgid ""
":ref:`Configuration options <configure-options>` and caveats for specific "
"Unix platforms are extensively documented in the :source:`README.rst` file "
"in the root of the Python source tree."
msgstr ""
"特定 Unix 平台的 :ref:`配置选项 <configure-options>` 和注意事项通常会详细地记录在 Python 源代码树的根目录下的"
" :source:`README.rst` 文件中。"

#: ../../using/unix.rst:105
msgid ""
"``make install`` can overwrite or masquerade the :file:`python3` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""
"``make install`` 可以覆盖或伪装 :file:`python3` 二进制文件。因此，建议使用 ``make altinstall`` "
"而不是 ``make install`` ，因为后者只安装了 :file:`{exec_prefix}/bin/python{version}` 。"

#: ../../using/unix.rst:111
msgid "Python-related paths and files"
msgstr "与Python相关的路径和文件"

#: ../../using/unix.rst:113
msgid ""
"These are subject to difference depending on local installation conventions;"
" :option:`prefix <--prefix>` and :option:`exec_prefix <--exec-prefix>` are "
"installation-dependent and should be interpreted as for GNU software; they "
"may be the same."
msgstr ""
"这些取决于本机安装惯例的不同；:option:`prefix <--prefix>` 和 :option:`exec_prefix <--exec-"
"prefix>` 依赖于具体安装并且应当被解读为针对 GNU 软件；它们可能具有相同的含义。"

#: ../../using/unix.rst:118
msgid ""
"For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr "例如，在大多数Linux系统上，两者的默认值是 :file:`/usr` 。"

#: ../../using/unix.rst:121
msgid "File/directory"
msgstr "文件/目录"

#: ../../using/unix.rst:121
msgid "Meaning"
msgstr "含意"

#: ../../using/unix.rst:123
msgid ":file:`{exec_prefix}/bin/python3`"
msgstr ":file:`{exec_prefix}/bin/python3`"

#: ../../using/unix.rst:123
msgid "Recommended location of the interpreter."
msgstr "解释器的推荐位置"

#: ../../using/unix.rst:125
msgid ""
":file:`{prefix}/lib/python{version}`, "
":file:`{exec_prefix}/lib/python{version}`"
msgstr ""
":file:`{prefix}/lib/python{version}`, "
":file:`{exec_prefix}/lib/python{version}`"

#: ../../using/unix.rst:125
msgid ""
"Recommended locations of the directories containing the standard modules."
msgstr "包含标准模块的目录的推荐位置"

#: ../../using/unix.rst:128
msgid ""
":file:`{prefix}/include/python{version}`, "
":file:`{exec_prefix}/include/python{version}`"
msgstr ""
":file:`{prefix}/include/python{version}`, "
":file:`{exec_prefix}/include/python{version}`"

#: ../../using/unix.rst:128
msgid ""
"Recommended locations of the directories containing the include files needed"
" for developing Python extensions and embedding the interpreter."
msgstr "包含开发Python扩展和嵌入解释器所需的include文件的目录的推荐位置"

#: ../../using/unix.rst:136
msgid "Miscellaneous"
msgstr "杂项"

#: ../../using/unix.rst:138
msgid ""
"To easily use Python scripts on Unix, you need to make them executable, e.g."
" with"
msgstr "要在Unix上使用Python脚本，需要添加可执行权限，例如："

#: ../../using/unix.rst:141
msgid "$ chmod +x script"
msgstr "$ chmod +x script"

#: ../../using/unix.rst:145
msgid ""
"and put an appropriate Shebang line at the top of the script.  A good choice"
" is usually ::"
msgstr "并在脚本的顶部放置一个合适的Shebang线。一个很好的选择通常是::"

#: ../../using/unix.rst:148
msgid "#!/usr/bin/env python3"
msgstr "#!/usr/bin/env python3"

#: ../../using/unix.rst:150
msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python3`` as the interpreter path."
msgstr ""
"将在整个 :envvar:`PATH` 中搜索Python解释器。但是，某些Unix系统可能没有 :program:`env` 命令，因此可能需要将 "
"``/usr/bin/python3`` 硬编码为解释器路径。"

#: ../../using/unix.rst:154
msgid ""
"To use shell commands in your Python scripts, look at the :mod:`subprocess` "
"module."
msgstr "要在Python脚本中使用shell命令，请查看 :mod:`subprocess` 模块。"

#: ../../using/unix.rst:159
msgid "Custom OpenSSL"
msgstr "自定义 OpenSSL"

#: ../../using/unix.rst:161
msgid ""
"To use your vendor's OpenSSL configuration and system trust store, locate "
"the directory with ``openssl.cnf`` file or symlink in ``/etc``. On most "
"distribution the file is either in ``/etc/ssl`` or ``/etc/pki/tls``. The "
"directory should also contain a ``cert.pem`` file and/or a ``certs`` "
"directory."
msgstr ""
"要使用发行商的 OpenSSL 配置和系统信任存储库，请找到包含 ``openssl.cnf`` 文件或符号链接的目录，它位于 ``/etc`` 中。 "
"在大多数发行版上该文件是在 ``/etc/ssl`` 或者 ``/etc/pki/tls`` 中。 该目录还应当包含一个 ``cert.pem`` "
"文件和/或一个 ``certs`` 目录。"

#: ../../using/unix.rst:167
msgid ""
"$ find /etc/ -name openssl.cnf -printf \"%h\\n\"\n"
"/etc/ssl"
msgstr ""
"$ find /etc/ -name openssl.cnf -printf \"%h\\n\"\n"
"/etc/ssl"

#: ../../using/unix.rst:172
msgid ""
"Download, build, and install OpenSSL. Make sure you use ``install_sw`` and "
"not ``install``. The ``install_sw`` target does not override "
"``openssl.cnf``."
msgstr ""
"下载、编译并安装 OpenSSL。 请确保你使用 ``install_sw`` 而不是 ``install``。 ``install_sw`` "
"的目标不会覆盖 ``openssl.cnf``。"

#: ../../using/unix.rst:176
msgid ""
"$ curl -O https://www.openssl.org/source/openssl-VERSION.tar.gz\n"
"$ tar xzf openssl-VERSION\n"
"$ pushd openssl-VERSION\n"
"$ ./config \\\n"
"    --prefix=/usr/local/custom-openssl \\\n"
"    --libdir=lib \\\n"
"    --openssldir=/etc/ssl\n"
"$ make -j1 depend\n"
"$ make -j8\n"
"$ make install_sw\n"
"$ popd"
msgstr ""
"$ curl -O https://www.openssl.org/source/openssl-VERSION.tar.gz\n"
"$ tar xzf openssl-VERSION\n"
"$ pushd openssl-VERSION\n"
"$ ./config \\\n"
"    --prefix=/usr/local/custom-openssl \\\n"
"    --libdir=lib \\\n"
"    --openssldir=/etc/ssl\n"
"$ make -j1 depend\n"
"$ make -j8\n"
"$ make install_sw\n"
"$ popd"

#: ../../using/unix.rst:190
msgid ""
"Build Python with custom OpenSSL (see the configure ``--with-openssl`` and "
"``--with-openssl-rpath`` options)"
msgstr ""
"使用自定义的 OpenSSL 编译 Python （参考配置 ``--with-openssl`` 和 ``--with-openssl-rpath``"
" 选项）"

#: ../../using/unix.rst:193
msgid ""
"$ pushd python-3.x.x\n"
"$ ./configure -C \\\n"
"    --with-openssl=/usr/local/custom-openssl \\\n"
"    --with-openssl-rpath=auto \\\n"
"    --prefix=/usr/local/python-3.x.x\n"
"$ make -j8\n"
"$ make altinstall"
msgstr ""
"$ pushd python-3.x.x\n"
"$ ./configure -C \\\n"
"    --with-openssl=/usr/local/custom-openssl \\\n"
"    --with-openssl-rpath=auto \\\n"
"    --prefix=/usr/local/python-3.x.x\n"
"$ make -j8\n"
"$ make altinstall"

#: ../../using/unix.rst:205
msgid ""
"Patch releases of OpenSSL have a backwards compatible ABI. You don't need to"
" recompile Python to update OpenSSL. It's sufficient to replace the custom "
"OpenSSL installation with a newer version."
msgstr ""
"OpenSSL 的补丁发布版具有向下兼容的 ABI。 你不需要重新编译 Python 来更新 OpenSSL。 使用一个新的版本来替代自定义 "
"OpenSSL 安装版就可以了。"
