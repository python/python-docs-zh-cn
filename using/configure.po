# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Alpha Du <alphanow@gmail.com>, 2021
# Sefank <sefank@foxmail.com>, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Dai Xu <daixu61@hotmail.com>, 2024
# ProgramRipper, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/configure.rst:3
msgid "Configure Python"
msgstr "配置 Python"

#: ../../using/configure.rst:8
msgid "Build Requirements"
msgstr "构建要求"

#: ../../using/configure.rst:10
msgid "Features and minimum versions required to build CPython:"
msgstr "编译 CPython 所需要的特性和最低版本:"

#: ../../using/configure.rst:12
msgid ""
"A `C11 <https://en.cppreference.com/w/c/11>`_ compiler. `Optional C11 "
"features "
"<https://en.wikipedia.org/wiki/C11_(C_standard_revision)#Optional_features>`_"
" are not required."
msgstr ""
"`C11 <https://en.cppreference.com/w/c/11>`_ 编译器。 `可选的 C11 特性 "
"<https://en.wikipedia.org/wiki/C11_(C_standard_revision)#Optional_features>`_"
" 不是必须的。"

#: ../../using/configure.rst:17
msgid "On Windows, Microsoft Visual Studio 2017 or later is required."
msgstr "在 Windows 上，需要 Microsoft Visual Studio 2017 或更新版本。"

#: ../../using/configure.rst:19
msgid ""
"Support for `IEEE 754 <https://en.wikipedia.org/wiki/IEEE_754>`_ floating-"
"point numbers and `floating-point Not-a-Number (NaN) "
"<https://en.wikipedia.org/wiki/NaN#Floating_point>`_."
msgstr ""
"对 `IEEE 754 <https://en.wikipedia.org/wiki/IEEE_754>`_ 浮点数和 `浮点 Not-a-Number"
" (NaN) <https://en.wikipedia.org/wiki/NaN#Floating_point>`_ 的支持。"

#: ../../using/configure.rst:23
msgid "Support for threads."
msgstr "对线程的支持。"

#: ../../using/configure.rst:25
msgid ""
"OpenSSL 1.1.1 is the minimum version and OpenSSL 3.0.16 is the recommended "
"minimum version for the :mod:`ssl` and :mod:`hashlib` extension modules."
msgstr ""

#: ../../using/configure.rst:28
msgid "SQLite 3.15.2 for the :mod:`sqlite3` extension module."
msgstr "SQLite 3.15.2 用于 :mod:`sqlite3` 扩展模块。"

#: ../../using/configure.rst:30
msgid "Tcl/Tk 8.5.12 for the :mod:`tkinter` module."
msgstr "Tcl/Tk 8.5.12 用于 :mod:`tkinter` 模块。"

#: ../../using/configure.rst:32
msgid ""
"Autoconf 2.72 and aclocal 1.16.5 are required to regenerate the "
":file:`configure` script."
msgstr ""

#: ../../using/configure.rst:35
msgid "Tcl/Tk version 8.3.1 is now required."
msgstr "现在需要 Tcl/Tk 8.3.1 版本。"

#: ../../using/configure.rst:38
msgid ""
"On Windows, Visual Studio 2015 or later is now required. Tcl/Tk version 8.4 "
"is now required."
msgstr "在 Windows 上，现在需要 Visual Studio 2015 或更新的版本。 现在需要 Tcl/Tk 8.4 版本。"

#: ../../using/configure.rst:42
msgid ""
"Selected C99 features are now required, like ``<stdint.h>`` and ``static "
"inline`` functions."
msgstr "现在要求选定的 C99 特性，如 ``<stdint.h>`` 和 ``static inline`` 函数。"

#: ../../using/configure.rst:46
msgid "Thread support and OpenSSL 1.0.2 are now required."
msgstr "现在要求线程支持和 OpenSSL 1.0.2。"

#: ../../using/configure.rst:49
msgid "OpenSSL 1.1.1 is now required. Require SQLite 3.7.15."
msgstr "现在需要 OpenSSL 1.1.1。 需要 SQLite 3.7.15。"

#: ../../using/configure.rst:53
msgid ""
"C11 compiler, IEEE 754 and NaN support are now required. On Windows, Visual "
"Studio 2017 or later is required. Tcl/Tk version 8.5.12 is now required for "
"the :mod:`tkinter` module."
msgstr ""
"C11 编译器，现在需要 IEEE 754 和 NaN 支持。 在 Windows 上，需要 Visual Studio 2017 或更新的版本。 "
"现在需要 Tcl/Tk version 8.5.12 用于 :mod:`tkinter` 模块。"

#: ../../using/configure.rst:58
msgid "Autoconf 2.71, aclocal 1.16.5 and SQLite 3.15.2 are now required."
msgstr "现在需要 autoconf 2.71, aclocal 1.16.5 和 SQLite 3.15.2。"

#: ../../using/configure.rst:61
msgid "Autoconf 2.72 is now required."
msgstr "现在要求 Autoconf 2.72。"

#: ../../using/configure.rst:64
msgid ""
"See also :pep:`7` \"Style Guide for C Code\" and :pep:`11` \"CPython "
"platform support\"."
msgstr ""
"另请参阅 :pep:`7` \"Style Guide for C Code\" 和 :pep:`11` \"CPython platform "
"support\"。"

#: ../../using/configure.rst:69
msgid "Generated files"
msgstr "已生成的文件"

#: ../../using/configure.rst:71
msgid ""
"To reduce build dependencies, Python source code contains multiple generated"
" files. Commands to regenerate all generated files::"
msgstr "为了减少构建依赖性，Python 源代码包含多个已生成的文件。 重新生成所有已生成文件的命令如下::"

#: ../../using/configure.rst:74
msgid ""
"make regen-all\n"
"make regen-stdlib-module-names\n"
"make regen-limited-abi\n"
"make regen-configure"
msgstr ""
"make regen-all\n"
"make regen-stdlib-module-names\n"
"make regen-limited-abi\n"
"make regen-configure"

#: ../../using/configure.rst:79
msgid ""
"The ``Makefile.pre.in`` file documents generated files, their inputs, and "
"tools used to regenerate them. Search for ``regen-*`` make targets."
msgstr ""
"``Makefile.pre.in`` 文件记录了已生成的文件、它们的输入以及用于重新生成它们的工具。 搜索 ``regen-*`` make "
"target。"

#: ../../using/configure.rst:83
msgid "configure script"
msgstr "配置脚本"

#: ../../using/configure.rst:85
msgid ""
"The ``make regen-configure`` command regenerates the ``aclocal.m4`` file and"
" the ``configure`` script using the ``Tools/build/regen-configure.sh`` shell"
" script which uses an Ubuntu container to get the same tools versions and "
"have a reproducible output."
msgstr ""
"``make regen-configure`` 命令将使用 ``Tools/build/regen-configure.sh`` shell 脚本生成"
" ``aclocal.m4`` 文件和 ``configure`` 脚本，它通过使用一个 Ubuntu 容器来获取同样的工具版本并具有可复现的输出。"

#: ../../using/configure.rst:90
msgid "The container is optional, the following command can be run locally::"
msgstr "容器是可选的，以下命令可以在本地运行::"

#: ../../using/configure.rst:92
msgid "autoreconf -ivf -Werror"
msgstr "autoreconf -ivf -Werror"

#: ../../using/configure.rst:94
msgid ""
"The generated files can change depending on the exact ``autoconf-archive``, "
"``aclocal`` and ``pkg-config`` versions."
msgstr ""
"生成的文件可根据实际的 ``autoconf-archive``, ``aclocal`` 和 ``pkg-config`` 版本进行改变。"

#: ../../using/configure.rst:101
msgid "Configure Options"
msgstr "配置选项"

#: ../../using/configure.rst:103
msgid "List all :file:`configure` script options using::"
msgstr "用以下方式列出所有 :file:`configure` 脚本选项::"

#: ../../using/configure.rst:105
msgid "./configure --help"
msgstr "./configure --help"

#: ../../using/configure.rst:107
msgid ""
"See also the :file:`Misc/SpecialBuilds.txt` in the Python source "
"distribution."
msgstr "参阅 Python 源代码中的 :file:`Misc/SpecialBuilds.txt` 。"

#: ../../using/configure.rst:110
msgid "General Options"
msgstr "通用选项"

#: ../../using/configure.rst:114
msgid ""
"Support loadable extensions in the :mod:`!_sqlite` extension module (default"
" is no) of the :mod:`sqlite3` module."
msgstr "在 :mod:`sqlite3` 模块的 :mod:`!_sqlite` 扩展模块中是否支持可加载扩展（默认为否）。"

#: ../../using/configure.rst:117
msgid ""
"See the :meth:`sqlite3.Connection.enable_load_extension` method of the "
":mod:`sqlite3` module."
msgstr ""
"参见 :meth:`sqlite3.Connection.enable_load_extension` 方法的 :mod:`sqlite3` 模块。"

#: ../../using/configure.rst:124
msgid ""
"Disable IPv6 support (enabled by default if supported), see the "
":mod:`socket` module."
msgstr "禁用 IPv6 支持（若开启支持则默认启用），见 :mod:`socket` 模块。"

#: ../../using/configure.rst:129
msgid "Define the size in bits of Python :class:`int` digits: 15 or 30 bits."
msgstr "定义 Python :class:`int` 数字的比特大小：15或30比特"

#: ../../using/configure.rst:131
msgid "By default, the digit size is 30."
msgstr "在默认情况下，数位大小为 30。"

#: ../../using/configure.rst:133
msgid "Define the ``PYLONG_BITS_IN_DIGIT`` to ``15`` or ``30``."
msgstr "定义 ``PYLONG_BITS_IN_DIGIT`` 为 ``15`` 或 ``30``。"

#: ../../using/configure.rst:135
msgid "See :data:`sys.int_info.bits_per_digit <sys.int_info>`."
msgstr "参见  :data:`sys.int_info.bits_per_digit <sys.int_info>` 。"

#: ../../using/configure.rst:139
msgid "Set the Python executable suffix to *SUFFIX*."
msgstr "将 Python 的可执行文件后缀设置为 *SUFFIX*。"

#: ../../using/configure.rst:141
msgid ""
"The default suffix is ``.exe`` on Windows and macOS (``python.exe`` "
"executable), ``.js`` on Emscripten node, ``.html`` on Emscripten browser, "
"``.wasm`` on WASI, and an empty string on other platforms (``python`` "
"executable)."
msgstr ""
"在 Windows 和 macOS 上默认后缀为 ``.exe`` (可执行文件为 ``python.exe``)，在 Emscripten node "
"上为 ``.js``，在 Emscripten 浏览器上为 ``.html``，在 WASI 上为 ``.wasm``，而在其他平台上为一个空字符串 "
"(可执行文件为 ``python``)。"

#: ../../using/configure.rst:146
msgid ""
"The default suffix on WASM platform is one of ``.js``, ``.html`` or "
"``.wasm``."
msgstr "在 WASM 平台上默认后缀为 ``.js``, ``.html`` 或 ``.wasm`` 之一。"

#: ../../using/configure.rst:152
msgid ""
"Select the default time zone search path for :const:`zoneinfo.TZPATH`. See "
"the :ref:`Compile-time configuration <zoneinfo_data_compile_time_config>` of"
" the :mod:`zoneinfo` module."
msgstr ""
"Select the default time zone search path for为 :const:`zoneinfo.TZPATH` "
"选择默认的时区搜索路径。 参见 :mod:`zoneinfo` 模块的 :ref:`编译时配置 "
"<zoneinfo_data_compile_time_config>`。"

#: ../../using/configure.rst:156
msgid ""
"Default: "
"``/usr/share/zoneinfo:/usr/lib/zoneinfo:/usr/share/lib/zoneinfo:/etc/zoneinfo``."
msgstr ""
"默认：``/usr/share/zoneinfo:/usr/lib/zoneinfo:/usr/share/lib/zoneinfo:/etc/zoneinfo``"

#: ../../using/configure.rst:158
msgid "See :data:`os.pathsep` path separator."
msgstr "参阅 :data:`os.pathsep` 路径分隔符。"

#: ../../using/configure.rst:164
msgid ""
"Build the ``_decimal`` extension module using a thread-local context rather "
"than a coroutine-local context (default), see the :mod:`decimal` module."
msgstr "编译 ``_decimal`` 扩展模块时使用线程本地上下文，而不是协程本地上下文（默认），参见 :mod:`decimal`  模块。"

#: ../../using/configure.rst:167
msgid ""
"See :const:`decimal.HAVE_CONTEXTVAR` and the :mod:`contextvars` module."
msgstr "参见 :const:`decimal.HAVE_CONTEXTVAR` 和 :mod:`contextvars` 模块。"

#: ../../using/configure.rst:173
msgid "Override order to check db backends for the :mod:`dbm` module"
msgstr "覆盖 :mod:`dbm` 模块的 db 后端检查顺序。"

#: ../../using/configure.rst:175
msgid ""
"A valid value is a colon (``:``) separated string with the backend names:"
msgstr "合法值是用冒号（``:``）分隔的字符串，包含后端名称。"

#: ../../using/configure.rst:177
msgid "``ndbm``;"
msgstr "``ndbm`` ；"

#: ../../using/configure.rst:178
msgid "``gdbm``;"
msgstr "``gdbm`` ；"

#: ../../using/configure.rst:179
msgid "``bdb``."
msgstr "``bdb`` 。"

#: ../../using/configure.rst:183
msgid ""
"Disable C locale coercion to a UTF-8 based locale (enabled by default)."
msgstr "禁用 C 语言对 UTF-8 的强制要求（默认为启用）。"

#: ../../using/configure.rst:185
msgid "Don't define the ``PY_COERCE_C_LOCALE`` macro."
msgstr "不定义 ``PY_COERCE_C_LOCALE`` 宏。"

#: ../../using/configure.rst:187
msgid "See :envvar:`PYTHONCOERCECLOCALE` and the :pep:`538`."
msgstr "参阅  :envvar:`PYTHONCOERCECLOCALE` 和 :pep:`538`。"

#: ../../using/configure.rst:191
msgid "Python library directory name (default is ``lib``)."
msgstr "Python 库目录名（默认为 ``lib``）。"

#: ../../using/configure.rst:193
msgid "Fedora and SuSE use ``lib64`` on 64-bit platforms."
msgstr "Fedora 和 SuSE 在64 位平台用 ``lib64`` 。"

#: ../../using/configure.rst:195
msgid "See :data:`sys.platlibdir`."
msgstr "参阅  :data:`sys.platlibdir` 。"

#: ../../using/configure.rst:201
msgid ""
"Directory of wheel packages used by the :mod:`ensurepip` module (none by "
"default)."
msgstr ":mod:`ensurepip` 模块用到的 wheel  包目录（默认为无）。"

#: ../../using/configure.rst:204
msgid ""
"Some Linux distribution packaging policies recommend against bundling "
"dependencies. For example, Fedora installs wheel packages in the "
"``/usr/share/python-wheels/`` directory and don't install the "
":mod:`!ensurepip._bundled` package."
msgstr ""
"某些 Linux 发行版的打包策略建议不要捆绑依赖关系。如 Fedora 在 ``/usr/share/python-wheels/`` 目录下安装 "
"wheel 包，而不安装 :mod:`!ensurepip._bundled` 包。"

#: ../../using/configure.rst:213
msgid ""
"Whether configure should use :program:`pkg-config` to detect build "
"dependencies."
msgstr "配置是否应当使用 :program:`pkg-config` 来检测构建依赖。"

#: ../../using/configure.rst:216
msgid "``check`` (default): :program:`pkg-config` is optional"
msgstr "``check`` (默认值): :program:`pkg-config` 为可选项"

#: ../../using/configure.rst:217
msgid "``yes``: :program:`pkg-config` is mandatory"
msgstr "``yes``: :program:`pkg-config` 为必选项。"

#: ../../using/configure.rst:218
msgid "``no``: configure does not use :program:`pkg-config` even when present"
msgstr "``no``: 配置不使用 :program:`pkg-config` 即使其存在"

#: ../../using/configure.rst:224
msgid "Turn on internal Python performance statistics gathering."
msgstr "启用内部 Python 性能统计数据收集。"

#: ../../using/configure.rst:226
msgid ""
"By default, statistics gathering is off. Use ``python3 -X pystats`` command "
"or set ``PYTHONSTATS=1`` environment variable to turn on statistics "
"gathering at Python startup."
msgstr ""
"在默认情况下，将关闭统计数据收集。 使用 ``python3 -X pystats`` 命令或设置 ``PYTHONSTATS=1`` 环境变量在 "
"Python 启动时启用统计数据收集。"

#: ../../using/configure.rst:230
msgid ""
"At Python exit, dump statistics if statistics gathering was on and not "
"cleared."
msgstr "在 Python 退出时，如果统计数据收集已启用且未清除则会转储统计数据。"

#: ../../using/configure.rst:233 ../../using/configure.rst:741
msgid "Effects:"
msgstr "效果如下："

#: ../../using/configure.rst:235
msgid "Add :option:`-X pystats <-X>` command line option."
msgstr "增加了 :option:`-X pystats <-X>` 命令行选项。"

#: ../../using/configure.rst:236
msgid "Add :envvar:`!PYTHONSTATS` environment variable."
msgstr "增加了 :envvar:`!PYTHONSTATS` 环境变量。"

#: ../../using/configure.rst:237
msgid "Define the ``Py_STATS`` macro."
msgstr "定义 ``Py_STATS`` 宏。"

#: ../../using/configure.rst:238
msgid "Add functions to the :mod:`sys` module:"
msgstr "为 :mod:`sys` 模块增加函数："

#: ../../using/configure.rst:240
msgid ":func:`!sys._stats_on`: Turns on statistics gathering."
msgstr ":func:`!sys._stats_on`: 启用统计数据收集。"

#: ../../using/configure.rst:241
msgid ":func:`!sys._stats_off`: Turns off statistics gathering."
msgstr ":func:`!sys._stats_off`: 关闭统计数据收集。"

#: ../../using/configure.rst:242
msgid ":func:`!sys._stats_clear`: Clears the statistics."
msgstr ":func:`!sys._stats_clear`: 清除统计数据。"

#: ../../using/configure.rst:243
msgid ""
":func:`!sys._stats_dump`: Dump statistics to file, and clears the "
"statistics."
msgstr ":func:`!sys._stats_dump`: 将统计数据转储到文件，并清除统计数据。"

#: ../../using/configure.rst:245
msgid ""
"The statistics will be dumped to a arbitrary (probably unique) file in "
"``/tmp/py_stats/`` (Unix) or ``C:\\temp\\py_stats\\`` (Windows). If that "
"directory does not exist, results will be printed on stderr."
msgstr ""
"统计数据将被转储至 ``/tmp/py_stats/`` (Unix) 或 ``C:\\temp\\py_stats\\`` (Windows) "
"中的任意（可能唯一）文件。 如果该目录不存在，结果将被打印到 stderr。"

#: ../../using/configure.rst:249
msgid "Use ``Tools/scripts/summarize_stats.py`` to read the stats."
msgstr "使用 ``Tools/scripts/summarize_stats.py`` 来读取统计数据。"

#: ../../using/configure.rst:251
msgid "Statistics:"
msgstr "统计数据："

#: ../../using/configure.rst:253
msgid "Opcode:"
msgstr "操作码："

#: ../../using/configure.rst:255
msgid ""
"Specialization: success, failure, hit, deferred, miss, deopt, failures;"
msgstr "专门类别: success, failure, hit, deferred, miss, deopt, failures；"

#: ../../using/configure.rst:256
msgid "Execution count;"
msgstr "执行计数；"

#: ../../using/configure.rst:257
msgid "Pair count."
msgstr "对应计数。"

#: ../../using/configure.rst:259
msgid "Call:"
msgstr "调用："

#: ../../using/configure.rst:261
msgid "Inlined Python calls;"
msgstr "内联 Python 调用；"

#: ../../using/configure.rst:262
msgid "PyEval calls;"
msgstr "PyEval 调用；"

#: ../../using/configure.rst:263
msgid "Frames pushed;"
msgstr "推入的帧；"

#: ../../using/configure.rst:264
msgid "Frame object created;"
msgstr "创建的帧对象；"

#: ../../using/configure.rst:265
msgid ""
"Eval calls: vector, generator, legacy, function VECTORCALL, build class, "
"slot, function \"ex\", API, method."
msgstr ""
"Eval 调用: vector, generator, legacy, function VECTORCALL, build class, slot, "
"function \"ex\", API, method。"

#: ../../using/configure.rst:268
msgid "Object:"
msgstr "对象："

#: ../../using/configure.rst:270
msgid "incref and decref;"
msgstr "incref 和 decref；"

#: ../../using/configure.rst:271
msgid "interpreter incref and decref;"
msgstr "解释器 incref 和 decref；"

#: ../../using/configure.rst:272
msgid "allocations: all, 512 bytes, 4 kiB, big;"
msgstr "分配: all, 512 bytes, 4 kiB, big；"

#: ../../using/configure.rst:273
msgid "free;"
msgstr "空闲；"

#: ../../using/configure.rst:274
msgid "to/from free lists;"
msgstr "去向/来自空闲列表；"

#: ../../using/configure.rst:275
msgid "dictionary materialized/dematerialized;"
msgstr "实体化/非实体化的字典；"

#: ../../using/configure.rst:276
msgid "type cache;"
msgstr "类型缓存；"

#: ../../using/configure.rst:277
msgid "optimization attempts;"
msgstr "优化尝试；"

#: ../../using/configure.rst:278
msgid "optimization traces created/executed;"
msgstr "已创建/已执行的优化跟踪；"

#: ../../using/configure.rst:279
msgid "uops executed."
msgstr "已执行的 uop。"

#: ../../using/configure.rst:281
msgid "Garbage collector:"
msgstr "垃圾回收器："

#: ../../using/configure.rst:283
msgid "Garbage collections;"
msgstr "垃圾回收；"

#: ../../using/configure.rst:284
msgid "Objects visited;"
msgstr "已访问的对象；"

#: ../../using/configure.rst:285
msgid "Objects collected."
msgstr "已收集的对象。"

#: ../../using/configure.rst:293
msgid ""
"Enables **experimental** support for running Python without the "
":term:`global interpreter lock` (GIL): free threading build."
msgstr ""
"启用对不带 :term:`global interpreter lock` (GIL) 运行 Python 的 **实验性** 支持：自由线程构建版。"

#: ../../using/configure.rst:296
msgid ""
"Defines the ``Py_GIL_DISABLED`` macro and adds ``\"t\"`` to "
":data:`sys.abiflags`."
msgstr "定义 ``Py_GIL_DISABLED`` 宏并向 :data:`sys.abiflags` 添加 ``\"t\"``。"

#: ../../using/configure.rst:299
msgid "See :ref:`whatsnew313-free-threaded-cpython` for more detail."
msgstr "请参阅 :ref:`whatsnew313-free-threaded-cpython` 了解详情。"

#: ../../using/configure.rst:305
msgid ""
"Indicate how to integrate the :ref:`experimental just-in-time compiler "
"<whatsnew314-jit-compiler>`."
msgstr ""

#: ../../using/configure.rst:307
msgid "``no``: Don't build the JIT."
msgstr ""

#: ../../using/configure.rst:308
msgid ""
"``yes``: Enable the JIT. To disable it at runtime, set the environment "
"variable :envvar:`PYTHON_JIT=0 <PYTHON_JIT>`."
msgstr ""

#: ../../using/configure.rst:310
msgid ""
"``yes-off``: Build the JIT, but disable it by default. To enable it at "
"runtime, set the environment variable :envvar:`PYTHON_JIT=1 <PYTHON_JIT>`."
msgstr ""

#: ../../using/configure.rst:312
msgid ""
"``interpreter``: Enable the \"JIT interpreter\" (only useful for those "
"debugging the JIT itself). To disable it at runtime, set the environment "
"variable :envvar:`PYTHON_JIT=0 <PYTHON_JIT>`."
msgstr ""

#: ../../using/configure.rst:316
msgid ""
"``--enable-experimental-jit=no`` is the default behavior if the option is "
"not provided, and ``--enable-experimental-jit`` is shorthand for ``--enable-"
"experimental-jit=yes``.  See :file:`Tools/jit/README.md` for more "
"information, including how to install the necessary build-time dependencies."
msgstr ""

#: ../../using/configure.rst:323
msgid ""
"When building CPython with JIT enabled, ensure that your system has Python "
"3.11 or later installed."
msgstr "当构建启用的 JIT 的 CPython 时，请确保你的系统已安装了 Python 3.11 或更新的版本。"

#: ../../using/configure.rst:329
msgid "Path to ``pkg-config`` utility."
msgstr "指向 ``pkg-config`` 工具的路径。"

#: ../../using/configure.rst:334
msgid "``pkg-config`` options."
msgstr "``pkg-config`` 选项。"

#: ../../using/configure.rst:338
msgid "C compiler options"
msgstr "C 编译器选项"

#: ../../using/configure.rst:342 ../../using/configure.rst:1308
msgid "C compiler command."
msgstr "C 编译器指令。"

#: ../../using/configure.rst:346 ../../using/configure.rst:1320
msgid "C compiler flags."
msgstr "C 编译器标志。"

#: ../../using/configure.rst:350
msgid "C preprocessor command."
msgstr "C 预处理器命令。"

#: ../../using/configure.rst:354
msgid "C preprocessor flags, e.g. :samp:`-I{include_dir}`."
msgstr "C 预处理器旗标，例如 :samp:`-I{include_dir}`。"

#: ../../using/configure.rst:358 ../../using/configure.rst:812
msgid "Linker options"
msgstr "链接器选项"

#: ../../using/configure.rst:362
msgid "Linker flags, e.g. :samp:`-L{library_directory}`."
msgstr "链接器旗标，例如 :samp:`-L{library_directory}`。"

#: ../../using/configure.rst:366
msgid "Libraries to pass to the linker, e.g. :samp:`-l{library}`."
msgstr "要传给链接器的库，例如 :samp:`-l{library}`。"

#: ../../using/configure.rst:370
msgid "Name for machine-dependent library files."
msgstr "依赖具体机器的库文件名称。"

#: ../../using/configure.rst:374
msgid "Options for third-party dependencies"
msgstr "用于第三方依赖的选项"

#: ../../using/configure.rst:381
msgid ""
"C compiler and linker flags to link Python to ``libbz2``, used by :mod:`bz2`"
" module, overriding ``pkg-config``."
msgstr ""
"将 Python 链接到 ``libbz2`` 的 C 编译器和链接器旗标，由 :mod:`bz2` 模块使用，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:387
msgid ""
"C compiler and linker flags for ``libncurses`` or ``libncursesw``, used by "
":mod:`curses` module, overriding ``pkg-config``."
msgstr ""
"针对 ``libncurses`` 或 ``libncursesw`` 的 C 编译器和链接器旗标，由 :mod:`curses` 模块使用，覆盖 "
"``pkg-config``。"

#: ../../using/configure.rst:393
msgid "C compiler and linker flags for ``gdbm``."
msgstr "针对 ``gdbm`` 的 C 编译器和链接器旗标。"

#: ../../using/configure.rst:398
msgid ""
"C compiler and linker flags for ``libb2`` (:ref:`BLAKE2 <hashlib-blake2>`), "
"used by :mod:`hashlib` module, overriding ``pkg-config``."
msgstr ""
"针对 ``libb2`` (:ref:`BLAKE2 <hashlib-blake2>`) 的 C 编译器和链接器旗标，由 :mod:`hashlib`"
" 模块使用，覆盖  ``pkg-config``。"

#: ../../using/configure.rst:404
msgid ""
"C compiler and linker flags for ``libedit``, used by :mod:`readline` module,"
" overriding ``pkg-config``."
msgstr ""
"针对 ``libedit`` 的 C 编译器和链接器旗标，由 :mod:`readline` 模块使用，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:410
msgid ""
"C compiler and linker flags for ``libffi``, used by :mod:`ctypes` module, "
"overriding ``pkg-config``."
msgstr "针对 ``libffi`` 的 C 编译器和链接器旗标，由 :mod:`ctypes` 模块使用，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:416
msgid ""
"C compiler and linker flags for ``libmpdec``, used by :mod:`decimal` module,"
" overriding ``pkg-config``."
msgstr ""
"针对 ``libmpdec`` 的 C 编译器和链接器旗标，由 :mod:`decimal` 模块使用，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:421
msgid ""
"These environment variables have no effect unless :option:`--with-system-"
"libmpdec` is specified."
msgstr "除非指定了 :option:`--with-system-libmpdec` 否则这些环境变量将没有效果。"

#: ../../using/configure.rst:427
msgid ""
"C compiler and linker flags for ``liblzma``, used by :mod:`lzma` module, "
"overriding ``pkg-config``."
msgstr "针对 ``liblzma`` 的 C 编译器和链接器旗标，由 :mod:`lzma` 模块使用，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:433
msgid ""
"C compiler and linker flags for ``libreadline``, used by :mod:`readline` "
"module, overriding ``pkg-config``."
msgstr ""
"针对 ``libreadline`` 的 C 编译器和链接器旗标，由 :mod:`readline` 模块使用，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:439
msgid ""
"C compiler and linker flags for ``libsqlite3``, used by :mod:`sqlite3` "
"module, overriding ``pkg-config``."
msgstr ""
"针对 ``libsqlite3`` 的 C 编译器和链接器旗标，由 :mod:`sqlite3` 模块使用，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:445
msgid ""
"C compiler and linker flags for ``libuuid``, used by :mod:`uuid` module, "
"overriding ``pkg-config``."
msgstr "针对 ``libuuid`` 的 C 编译器和链接器旗标，由 :mod:`uuid` 模块使用，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:451
msgid "C compiler and linker flags for PANEL, overriding ``pkg-config``."
msgstr "针对 PANEL 的 C 编译器和链接器旗标，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:453
msgid ""
"C compiler and linker flags for ``libpanel`` or ``libpanelw``, used by "
":mod:`curses.panel` module, overriding ``pkg-config``."
msgstr ""
"针对 ``libpanel`` 或 ``libpanelw`` 的 C 编译器和链接器旗标，由 :mod:`curses.panel` 模块使用，覆盖 "
"``pkg-config``。"

#: ../../using/configure.rst:459
msgid "C compiler and linker flags for TCLTK, overriding ``pkg-config``."
msgstr "针对 TCLTK 的 C 编译器和链接器旗标，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:464
msgid ""
"C compiler and linker flags for ``libzlib``, used by :mod:`gzip` module, "
"overriding ``pkg-config``."
msgstr "针对 ``libzlib`` 的 C 编译器和链接器旗标，由 :mod:`gzip` 模块使用，覆盖 ``pkg-config``。"

#: ../../using/configure.rst:469
msgid "WebAssembly Options"
msgstr "WebAssembly 选项。"

#: ../../using/configure.rst:473
msgid "Turn on dynamic linking support for WASM."
msgstr "为 WASM 启用动态链接支持。"

#: ../../using/configure.rst:475
msgid ""
"Dynamic linking enables ``dlopen``. File size of the executable increases "
"due to limited dead code elimination and additional features."
msgstr "动态链接启用 ``dlopen``。 可执行文件的大小将由于限制死代码清理和附加特性而增加。"

#: ../../using/configure.rst:482
msgid "Turn on pthreads support for WASM."
msgstr "为 WASM 启用 pthreads 支持。"

#: ../../using/configure.rst:488
msgid "Install Options"
msgstr "安装时的选项"

#: ../../using/configure.rst:492
msgid ""
"Install architecture-independent files in PREFIX. On Unix, it defaults to "
":file:`/usr/local`."
msgstr "在 PREFIX 中安装架构无关的文件。 在 Unix 上，它默认为 :file:`/usr/local`。"

#: ../../using/configure.rst:495
msgid "This value can be retrieved at runtime using :data:`sys.prefix`."
msgstr "该值可在运行时使用 :data:`sys.prefix` 获取。"

#: ../../using/configure.rst:497
msgid ""
"As an example, one can use ``--prefix=\"$HOME/.local/\"`` to install a "
"Python in its home directory."
msgstr "作为示例，用户可以使用 ``--prefix=\"$HOME/.local/\"`` 在其家目录中安装 Python。"

#: ../../using/configure.rst:502
msgid ""
"Install architecture-dependent files in EPREFIX, defaults to "
":option:`--prefix`."
msgstr "在 EPREFIX 中安装架构无关的文件，默认为 :option:`--prefix`。"

#: ../../using/configure.rst:504
msgid "This value can be retrieved at runtime using :data:`sys.exec_prefix`."
msgstr "该值可在运行时使用 :data:`sys.exec_prefix` 获取。"

#: ../../using/configure.rst:508
msgid ""
"Don't build nor install test modules, like the :mod:`test` package or the "
":mod:`!_testcapi` extension module (built and installed by default)."
msgstr "不编译和安装 test 模块，如 :mod:`test` 包或 :mod:`!_testcapi` 扩展模块（默认会编译并安装）。"

#: ../../using/configure.rst:515
msgid "Select the :mod:`ensurepip` command run on Python installation:"
msgstr "选择 Python 安装时运行的 :mod:`ensurepip` 命令。"

#: ../../using/configure.rst:517
msgid ""
"``upgrade`` (default): run ``python -m ensurepip --altinstall --upgrade`` "
"command."
msgstr ""
"``upgrade`` （默认）：运行 ``python -m ensurepip --altinstall --upgrade`` 命令。"

#: ../../using/configure.rst:519
msgid "``install``: run ``python -m ensurepip --altinstall`` command;"
msgstr "``install`` ：运行 ``python -m ensurepip --altinstall`` 命令。"

#: ../../using/configure.rst:520
msgid "``no``: don't run ensurepip;"
msgstr "``no`` ：不运行 ensurepip。"

#: ../../using/configure.rst:526
msgid "Performance options"
msgstr "性能选项"

#: ../../using/configure.rst:528
msgid ""
"Configuring Python using ``--enable-optimizations --with-lto`` (PGO + LTO) "
"is recommended for best performance. The experimental ``--enable-bolt`` flag"
" can also be used to improve performance."
msgstr ""
"为获得最佳性能推荐使用 ``--enable-optimizations --with-lto`` (PGO + LTO) 来配置 Python。 "
"试验性的 ``--enable-bolt`` 旗标也可被用来提升性能。"

#: ../../using/configure.rst:534
msgid ""
"Enable Profile Guided Optimization (PGO) using :envvar:`PROFILE_TASK` "
"(disabled by default)."
msgstr "用 :envvar:`PROFILE_TASK` 启用以配置文件主导的优化（PGO）（默认为禁用）。"

#: ../../using/configure.rst:537
msgid ""
"The C compiler Clang requires ``llvm-profdata`` program for PGO. On macOS, "
"GCC also requires it: GCC is just an alias to Clang on macOS."
msgstr ""
"C 编译器 Clang 需要用到 ``llvm-profdata`` 程序进行 PGO。在 macOS 上，GCC 也需要用到它：在 macOS 上 "
"GCC 只是 Clang 的别名而已。"

#: ../../using/configure.rst:540
msgid ""
"Disable also semantic interposition in libpython if ``--enable-shared`` and "
"GCC is used: add ``-fno-semantic-interposition`` to the compiler and linker "
"flags."
msgstr ""
"如果使用 ``--enable-shared`` 和 GCC ，还可以禁用 libpython 中的语义插值：在编译器和链接器的标志中加入 "
"``-fno-semantic-interposition`` 。"

#: ../../using/configure.rst:546
msgid ""
"During the build, you may encounter compiler warnings about profile data not"
" being available for some source files. These warnings are harmless, as only"
" a subset of the code is exercised during profile data acquisition. To "
"disable these warnings on Clang, manually suppress them by adding ``-Wno-"
"profile-instr-unprofiled`` to :envvar:`CFLAGS`."
msgstr ""
"在构建期间，你可能会遇到编译器警告提示某些源文件的配置数据不可用。 这些警告是无害的，因为在获取配置数据时只有一部分代码会被使用。 要在 Clang "
"上禁用这些警告，可通过在 :envvar:`CFLAGS` 中添加 ``-Wno-profile-instr-unprofiled`` 来手动抑制它们。"

#: ../../using/configure.rst:555
msgid "Use ``-fno-semantic-interposition`` on GCC."
msgstr "在 GCC 上使用 ``-fno-semantic-interposition`` 。"

#: ../../using/configure.rst:560
msgid ""
"Environment variable used in the Makefile: Python command line arguments for"
" the PGO generation task."
msgstr "Makefile 用到的环境变量：PGO 用到的 Python 命令行参数。"

#: ../../using/configure.rst:563
msgid "Default: ``-m test --pgo --timeout=$(TESTTIMEOUT)``."
msgstr "默认为：``-m test --pgo --timeout=$(TESTTIMEOUT)`` 。"

#: ../../using/configure.rst:567
msgid "Task failure is no longer ignored silently."
msgstr "任务失败将不会再被静默地忽略。"

#: ../../using/configure.rst:572
msgid ""
"Enable Link Time Optimization (LTO) in any build (disabled by default)."
msgstr "在编译过程中启用链接时间优化（LTO）（默认为禁用）。"

#: ../../using/configure.rst:574
msgid ""
"The C compiler Clang requires ``llvm-ar`` for LTO (``ar`` on macOS), as well"
" as an LTO-aware linker (``ld.gold`` or ``lld``)."
msgstr ""
"LTO 时 C 编译器 Clang 需要用到 ``llvm-ar`` 参数（在 macOS 则为 ``ar``），以及支持 LTO "
"的链接器（``ld.gold`` 或 ``lld``）。"

#: ../../using/configure.rst:579
msgid "To use ThinLTO feature, use ``--with-lto=thin`` on Clang."
msgstr "要使用 ThinLTO 特性，请在 Clang 上使用 ``--with-lto=thin``。"

#: ../../using/configure.rst:582
msgid ""
"Use ThinLTO as the default optimization policy on Clang if the compiler "
"accepts the flag."
msgstr "如果编译器支持将使用 ThinLTO 旗标作为 Clang 上的默认优化策略。"

#: ../../using/configure.rst:587
msgid ""
"Enable usage of the `BOLT post-link binary optimizer "
"<https://github.com/llvm/llvm-project/tree/main/bolt>`_ (disabled by "
"default)."
msgstr ""
"允许启用 `BOLT 链接后二进制优化器 <https://github.com/llvm/llvm-project/tree/main/bolt>`_"
" (默认为禁用)。"

#: ../../using/configure.rst:591
msgid ""
"BOLT is part of the LLVM project but is not always included in their binary "
"distributions. This flag requires that ``llvm-bolt`` and ``merge-fdata`` are"
" available."
msgstr ""
"BOLT 是 LLVM 项目的一部分但并不总是包括在其二进制分发包中。 该旗标要求 ``llvm-bolt`` 和 ``merge-fdata`` "
"可用。"

#: ../../using/configure.rst:595
msgid ""
"BOLT is still a fairly new project so this flag should be considered "
"experimental for now. Because this tool operates on machine code its success"
" is dependent on a combination of the build environment + the other "
"optimization configure args + the CPU architecture, and not all combinations"
" are supported. BOLT versions before LLVM 16 are known to crash BOLT under "
"some scenarios. Use of LLVM 16 or newer for BOLT optimization is strongly "
"encouraged."
msgstr ""
"BOLT 仍然是一个相当新的项目因此目前该旗标应当被视为是试验性的。 因为此工具是作用于机器码所以其成功依赖于构建环境 + 其他优化配置参数 + CPU"
" 架构的组合，并且并非所有组合都受到支持。 已知 LLVM 16 之前的 BOLT 版本在某些场景下会使得 BOLT 发生崩溃。 强烈建议使用 LLVM"
" 16 或更新版本进行 BOLT 优化。"

#: ../../using/configure.rst:603
msgid ""
"The :envvar:`!BOLT_INSTRUMENT_FLAGS` and :envvar:`!BOLT_APPLY_FLAGS` "
":program:`configure` variables can be defined to override the default set of"
" arguments for :program:`llvm-bolt` to instrument and apply BOLT data to "
"binaries, respectively."
msgstr ""
":envvar:`!BOLT_INSTRUMENT_FLAGS` 和 :envvar:`!BOLT_APPLY_FLAGS` "
":program:`configure` 变量可被定义为覆盖 :program:`llvm-bolt` 的默认参数集合来分别指示和将 BOLT "
"数据应用于二进制代码中。"

#: ../../using/configure.rst:612
msgid ""
"Arguments to ``llvm-bolt`` when creating a `BOLT optimized binary "
"<https://github.com/facebookarchive/BOLT>`_."
msgstr ""
"当创建 `BOLT 优化的二进制文件 <https://github.com/facebookarchive/BOLT>`_ 时传给 ``llvm-"
"bolt`` 的参数。"

#: ../../using/configure.rst:619
msgid "Arguments to ``llvm-bolt`` when instrumenting binaries."
msgstr "当构建二进制文件时传给 ``llvm-bolt`` 的参数。"

#: ../../using/configure.rst:625
msgid ""
"Enable computed gotos in evaluation loop (enabled by default on supported "
"compilers)."
msgstr "在求值环节启用 goto 计数（在支持的编译器上默认启用）。"

#: ../../using/configure.rst:630
msgid ""
"Enable interpreters using tail calls in CPython. If enabled, enabling PGO "
"(:option:`--enable-optimizations`) is highly recommended. This option "
"specifically requires a C compiler with proper tail call support, and the "
"`preserve_none "
"<https://clang.llvm.org/docs/AttributeReference.html#preserve-none>`_ "
"calling convention. For example, Clang 19 and newer supports this feature."
msgstr ""

#: ../../using/configure.rst:640
msgid ""
"Disable the fast :ref:`mimalloc <mimalloc>` allocator (enabled by default)."
msgstr "禁用快速的 :ref:`mimalloc <mimalloc>` 分配器（默认为启用）。"

#: ../../using/configure.rst:643 ../../using/configure.rst:650
msgid "See also :envvar:`PYTHONMALLOC` environment variable."
msgstr "参见环境变量 :envvar:`PYTHONMALLOC` 。"

#: ../../using/configure.rst:647
msgid ""
"Disable the specialized Python memory allocator :ref:`pymalloc <pymalloc>` "
"(enabled by default)."
msgstr "禁用特定的 Python 内存分配器 :ref:`pymalloc <pymalloc>` （默认为启用）。"

#: ../../using/configure.rst:654
msgid ""
"Disable static documentation strings to reduce the memory footprint (enabled"
" by default). Documentation strings defined in Python are not affected."
msgstr "禁用静态文档字符串以减少内存占用（默认启用）。Python 中定义的文档字符串不受影响。"

#: ../../using/configure.rst:657
msgid "Don't define the ``WITH_DOC_STRINGS`` macro."
msgstr "不定义 ``PY_COERCE_C_LOCALE`` 宏。"

#: ../../using/configure.rst:659
msgid "See the ``PyDoc_STRVAR()`` macro."
msgstr "参阅宏 ``PyDoc_STRVAR()`` 。"

#: ../../using/configure.rst:663
msgid "Enable C-level code profiling with ``gprof`` (disabled by default)."
msgstr "用 ``gprof`` 启用 C 语言级的代码评估（默认为禁用）。"

#: ../../using/configure.rst:667
msgid ""
"Add ``-fstrict-overflow`` to the C compiler flags (by default we add ``-fno-"
"strict-overflow`` instead)."
msgstr ""
"将 ``-fstrict-overflow`` 添加到 C 编译器旗标 (在默认情况下我们将添加 ``-fno-strict-overflow`` "
"来代替)。"

#: ../../using/configure.rst:672
msgid ""
"Deactivate remote debugging support described in :pep:`768` (enabled by "
"default). When this flag is provided the code that allows the interpreter to"
" schedule the execution of a Python file in a separate process as described "
"in :pep:`768` is not compiled. This includes both the functionality to "
"schedule code to be executed and the functionality to receive code to be "
"executed."
msgstr ""

#: ../../using/configure.rst:685
msgid "Python Debug Build"
msgstr "Python 调试级编译"

#: ../../using/configure.rst:687
msgid ""
"A debug build is Python built with the :option:`--with-pydebug` configure "
"option."
msgstr "调试版本 Python 是指带有 :option:`--with-pydebug`  参数的编译。"

#: ../../using/configure.rst:690
msgid "Effects of a debug build:"
msgstr "调试版本的效果："

#: ../../using/configure.rst:692
msgid ""
"Display all warnings by default: the list of default warning filters is "
"empty in the :mod:`warnings` module."
msgstr "默认显示所有警告：在 :mod:`warnings` 模块中，默认警告过滤器的列表是空的。"

#: ../../using/configure.rst:694
msgid "Add ``d`` to :data:`sys.abiflags`."
msgstr "在 :data:`sys.abiflags` 中加入 ``d`` 标记。"

#: ../../using/configure.rst:695
msgid "Add :func:`!sys.gettotalrefcount` function."
msgstr "加入 :func:`!sys.gettotalrefcount` 函数。"

#: ../../using/configure.rst:696
msgid "Add :option:`-X showrefcount <-X>` command line option."
msgstr "命令行参数加入 :option:`-X showrefcount <-X>` 。"

#: ../../using/configure.rst:697
msgid ""
"Add :option:`-d` command line option and :envvar:`PYTHONDEBUG` environment "
"variable to debug the parser."
msgstr "添加 :option:`-d` 命令行选项和 :envvar:`PYTHONDEBUG` 环境变量用于调试解析器。"

#: ../../using/configure.rst:699
msgid ""
"Add support for the ``__lltrace__`` variable: enable low-level tracing in "
"the bytecode evaluation loop if the variable is defined."
msgstr "添加对 ``__lltrace__`` 变量的支持：如果定义了该变量则会在字节码求值循环中启用低层级追踪。"

#: ../../using/configure.rst:701
msgid ""
"Install :ref:`debug hooks on memory allocators <default-memory-allocators>` "
"to detect buffer overflow and other memory errors."
msgstr "安装 :ref:`内存分配调试钩子 <default-memory-allocators>` ，以便检测缓冲区溢出和其他内存错误。"

#: ../../using/configure.rst:703
msgid "Define ``Py_DEBUG`` and ``Py_REF_DEBUG`` macros."
msgstr "定义宏 ``Py_DEBUG`` 和 ``Py_REF_DEBUG`` 。"

#: ../../using/configure.rst:704
msgid ""
"Add runtime checks: code surrounded by ``#ifdef Py_DEBUG`` and ``#endif``. "
"Enable ``assert(...)`` and ``_PyObject_ASSERT(...)`` assertions: don't set "
"the ``NDEBUG`` macro (see also the :option:`--with-assertions` configure "
"option). Main runtime checks:"
msgstr ""
"增加运行时检查：针对由 ``#ifdef Py_DEBUG`` 和 ``#endif`` 所包裹的代码。 启用 ``assert(...)`` 和 "
"``_PyObject_ASSERT(...)`` 断言：不设置 ``NDEBUG`` 宏（另请参阅 :option:`--with-"
"assertions` 配置选项）。 主要的运行时检查有:"

#: ../../using/configure.rst:709
msgid "Add sanity checks on the function arguments."
msgstr "增加了对函数参数的合理性检查。"

#: ../../using/configure.rst:710
msgid ""
"Unicode and int objects are created with their memory filled with a pattern "
"to detect usage of uninitialized objects."
msgstr "创建 Unicode 和 int 对象时，内存按某种模式进行了填充，用于检测是否使用了未初始化的对象。"

#: ../../using/configure.rst:712
msgid ""
"Ensure that functions which can clear or replace the current exception are "
"not called with an exception raised."
msgstr "确保有能力清除或替换当前异常的函数在调用时不会引发异常。"

#: ../../using/configure.rst:714
msgid "Check that deallocator functions don't change the current exception."
msgstr "检查内存释放器函数是否不改变当前异常。"

#: ../../using/configure.rst:715
msgid ""
"The garbage collector (:func:`gc.collect` function) runs some basic checks "
"on objects consistency."
msgstr "垃圾收集器（:func:`gc.collect` 函数）对对象的一致性进行一些基本检查。"

#: ../../using/configure.rst:717
msgid ""
"The :c:macro:`!Py_SAFE_DOWNCAST()` macro checks for integer underflow and "
"overflow when downcasting from wide types to narrow types."
msgstr "从较宽类型转换到较窄类型时，:c:macro:`!Py_SAFE_DOWNCAST()` 宏会检查整数下溢和上溢的情况。"

#: ../../using/configure.rst:720
msgid ""
"See also the :ref:`Python Development Mode <devmode>` and the "
":option:`--with-trace-refs` configure option."
msgstr "参见  :ref:`Python 开发模式 <devmode>` 和配置参数 :option:`--with-trace-refs` 。"

#: ../../using/configure.rst:723
msgid ""
"Release builds and debug builds are now ABI compatible: defining the "
"``Py_DEBUG`` macro no longer implies the ``Py_TRACE_REFS`` macro (see the "
":option:`--with-trace-refs` option)."
msgstr ""
"发布构建版和调试构建版现在是 ABI 兼容的：定义了 ``Py_DEBUG`` 宏不再意味着同时定义了 ``Py_TRACE_REFS`` 宏（参见 "
":option:`--with-trace-refs` 选项）。"

#: ../../using/configure.rst:730
msgid "Debug options"
msgstr "调试选项"

#: ../../using/configure.rst:734
msgid ""
":ref:`Build Python in debug mode <debug-build>`: define the ``Py_DEBUG`` "
"macro (disabled by default)."
msgstr ":ref:`在调试模式下编译 Python <debug-build>`: 定义宏 ``Py_DEBUG`` (默认为禁用)。"

#: ../../using/configure.rst:739
msgid "Enable tracing references for debugging purpose (disabled by default)."
msgstr "为了调试而启用引用的跟踪（默认为禁用）。"

#: ../../using/configure.rst:743
msgid "Define the ``Py_TRACE_REFS`` macro."
msgstr "定义 ``Py_TRACE_REFS`` 宏。"

#: ../../using/configure.rst:744
msgid "Add :func:`sys.getobjects` function."
msgstr "加入 :func:`sys.getobjects` 函数。"

#: ../../using/configure.rst:745
msgid "Add :envvar:`PYTHONDUMPREFS` environment variable."
msgstr "环境变量加入 :envvar:`PYTHONDUMPREFS` 。"

#: ../../using/configure.rst:747
msgid ""
"The :envvar:`PYTHONDUMPREFS` environment variable can be used to dump "
"objects and reference counts still alive at Python exit."
msgstr ":envvar:`PYTHONDUMPREFS` 环境变量可被用来转储在 Python 退出时仍然存活的对象和引用计数。"

#: ../../using/configure.rst:750
msgid ":ref:`Statically allocated objects <static-types>` are not traced."
msgstr ":ref:`静态分配的对象 <static-types>` 将不会被追踪。"

#: ../../using/configure.rst:754
msgid ""
"This build is now ABI compatible with release build and :ref:`debug build "
"<debug-build>`."
msgstr "此构建版现在与发布构建版和 :ref:`调试构建版 <debug-build>` 是 ABI 兼容的。"

#: ../../using/configure.rst:760
msgid ""
"Build with C assertions enabled (default is no): ``assert(...);`` and "
"``_PyObject_ASSERT(...);``."
msgstr "编译时启用 C 断言：``assert(...);`` 和 ``_PyObject_ASSERT(...);`` （默认不启用）。"

#: ../../using/configure.rst:763
msgid ""
"If set, the ``NDEBUG`` macro is not defined in the :envvar:`OPT` compiler "
"variable."
msgstr "如果设置此参数，则在 :envvar:`OPT` 编译器变量中不定义 ``NDEBUG`` 宏。"

#: ../../using/configure.rst:766
msgid ""
"See also the :option:`--with-pydebug` option (:ref:`debug build <debug-"
"build>`) which also enables assertions."
msgstr "参阅 :option:`--with-pydebug` 选项（:ref:`调试编译模式 <debug-build>`），它也可以启用断言。"

#: ../../using/configure.rst:773
msgid "Enable Valgrind support (default is no)."
msgstr "启用 Valgrind （默认禁用）。"

#: ../../using/configure.rst:777
msgid "Enable DTrace support (default is no)."
msgstr "启用 DTrace（默认禁用）。"

#: ../../using/configure.rst:779
msgid ""
"See :ref:`Instrumenting CPython with DTrace and SystemTap "
"<instrumentation>`."
msgstr "参阅 :ref:`用 DTrace 和 SystemTap 测试 CPython <instrumentation>`。"

#: ../../using/configure.rst:786
msgid ""
"Enable AddressSanitizer memory error detector, ``asan`` (default is no)."
msgstr "启用 AddressSanitizer 内存错误检测 ``asan``，（默认为禁用）。"

#: ../../using/configure.rst:792
msgid ""
"Enable MemorySanitizer allocation error detector, ``msan`` (default is no)."
msgstr "启用 MemorySanitizer 内存错误检测 ``msan``，（默认为禁用）。"

#: ../../using/configure.rst:798
msgid ""
"Enable UndefinedBehaviorSanitizer undefined behaviour detector, ``ubsan`` "
"(default is no)."
msgstr "启用 undefinedBehaviorSanitizer 未定义行为检测 ``ubsan``，（默认为禁用）。"

#: ../../using/configure.rst:805
msgid "Enable ThreadSanitizer data race detector, ``tsan`` (default is no)."
msgstr "启用 ThreadSanitizer 数据竞争检测器，``tsan`` (默认为否）。"

#: ../../using/configure.rst:816
msgid ""
"Enable building a shared Python library: ``libpython`` (default is no)."
msgstr "启用共享 Python 库 ``libpython`` 的编译（默认为禁用）。"

#: ../../using/configure.rst:820
msgid ""
"Do not build ``libpythonMAJOR.MINOR.a`` and do not install ``python.o`` "
"(built and enabled by default)."
msgstr "不编译 ``libpythonMAJOR.MINOR.a``，也不安装 ``python.o`` (默认会编译并安装)。"

#: ../../using/configure.rst:827
msgid "Libraries options"
msgstr "库选项"

#: ../../using/configure.rst:831
msgid "Link against additional libraries (default is no)."
msgstr "链接附加库（默认不会）。"

#: ../../using/configure.rst:835
msgid ""
"Build the :mod:`!pyexpat` module using an installed ``expat`` library "
"(default is no)."
msgstr "用已安装的 ``expat`` 库编译 :mod:`!pyexpat` 模块（默认为否）。"

#: ../../using/configure.rst:840
msgid ""
"Build the ``_decimal`` extension module using an installed ``mpdecimal`` "
"library, see the :mod:`decimal` module (default is yes)."
msgstr ""
"使用已安装的 ``mpdecimal`` 库来构建 ``_decimal`` 扩展模块，参见 :mod:`decimal` 模块（默认为是）。"

#: ../../using/configure.rst:845
msgid "Default to using the installed ``mpdecimal`` library."
msgstr "默认为使用已安装的 ``mpdecimal`` 库。"

#: ../../using/configure.rst:848
msgid ""
"A copy of the ``mpdecimal`` library sources will no longer be distributed "
"with Python 3.15."
msgstr "``mpdecimal`` 库源代码的副本将不再随 Python 3.15 一起分发。"

#: ../../using/configure.rst:852
msgid ":option:`LIBMPDEC_CFLAGS` and :option:`LIBMPDEC_LIBS`."
msgstr ":option:`LIBMPDEC_CFLAGS` 和 :option:`LIBMPDEC_LIBS`。"

#: ../../using/configure.rst:856
msgid "Designate a backend library for the :mod:`readline` module."
msgstr "为 :mod:`readline` 模块指定一个后端库。"

#: ../../using/configure.rst:858
msgid "readline: Use readline as the backend."
msgstr "readline: 使用 readline 作为后端。"

#: ../../using/configure.rst:859
msgid "editline: Use editline as the backend."
msgstr "editline: 使用 editline 作为后端。"

#: ../../using/configure.rst:865
msgid "Don't build the :mod:`readline` module (built by default)."
msgstr "不编译 :mod:`readline` 模块（默认会）。"

#: ../../using/configure.rst:867
msgid "Don't define the ``HAVE_LIBREADLINE`` macro."
msgstr "不定义 ``HAVE_LIBREADLINE`` 宏。"

#: ../../using/configure.rst:873
msgid ""
"Override ``libm`` math library to *STRING* (default is system-dependent)."
msgstr "将 ``libm`` 数学库覆盖为 *STRING* (默认情况视系统而定)。"

#: ../../using/configure.rst:877
msgid "Override ``libc`` C library to *STRING* (default is system-dependent)."
msgstr "将 ``libc`` C 库覆盖为 *STRING* (默认情况视系统而定)。"

#: ../../using/configure.rst:881
msgid "Root of the OpenSSL directory."
msgstr "OpenSSL 的根目录。"

#: ../../using/configure.rst:887
msgid "Set runtime library directory (rpath) for OpenSSL libraries:"
msgstr "设置 OpenSSL 库的运行时库目录（rpath）。"

#: ../../using/configure.rst:889
msgid "``no`` (default): don't set rpath;"
msgstr "``no`` (默认): 不设置 rpath。"

#: ../../using/configure.rst:890
msgid ""
"``auto``: auto-detect rpath from :option:`--with-openssl` and ``pkg-"
"config``;"
msgstr "``auto``：根据  :option:`--with-openssl`  和 ``pkg-config`` 自动检测 rpath。"

#: ../../using/configure.rst:892
msgid "*DIR*: set an explicit rpath."
msgstr "*DIR* ：直接设置 rpath。"

#: ../../using/configure.rst:898
msgid "Security Options"
msgstr "安全性选项"

#: ../../using/configure.rst:902
msgid "Select hash algorithm for use in ``Python/pyhash.c``:"
msgstr "选择 ``Python/pyhash.c`` 采用的哈希算法。"

#: ../../using/configure.rst:904
msgid "``siphash13`` (default);"
msgstr "``siphash13`` (默认值);"

#: ../../using/configure.rst:905
msgid "``siphash24``;"
msgstr "``siphash24``;"

#: ../../using/configure.rst:906
msgid "``fnv``."
msgstr "``fnv``."

#: ../../using/configure.rst:910
msgid "``siphash13`` is added and it is the new default."
msgstr "增加了 ``siphash13`` 并且是新的默认值。"

#: ../../using/configure.rst:915
msgid "Built-in hash modules:"
msgstr "内置哈希模块："

#: ../../using/configure.rst:917
msgid "``md5``;"
msgstr "``md5``。"

#: ../../using/configure.rst:918
msgid "``sha1``;"
msgstr "``sha1``。"

#: ../../using/configure.rst:919
msgid "``sha256``;"
msgstr "``sha256``。"

#: ../../using/configure.rst:920
msgid "``sha512``;"
msgstr "``sha512``。"

#: ../../using/configure.rst:921
msgid "``sha3`` (with shake);"
msgstr "``sha3`` (带 shake)。"

#: ../../using/configure.rst:922
msgid "``blake2``."
msgstr "``blake2``。"

#: ../../using/configure.rst:928
msgid "Override the OpenSSL default cipher suites string:"
msgstr "覆盖 OpenSSL 默认的密码套件字符串。"

#: ../../using/configure.rst:930
msgid "``python`` (default): use Python's preferred selection;"
msgstr "``python`` (默认值): 采用 Python 推荐选择。"

#: ../../using/configure.rst:931
msgid "``openssl``: leave OpenSSL's defaults untouched;"
msgstr "``openssl``：保留 OpenSSL 默认值不动。"

#: ../../using/configure.rst:932
msgid "*STRING*: use a custom string"
msgstr "*STRING* ：采用自定义字符串。"

#: ../../using/configure.rst:934
msgid "See the :mod:`ssl` module."
msgstr "参见 :mod:`ssl`  模块。"

#: ../../using/configure.rst:940
msgid ""
"The settings ``python`` and *STRING* also set TLS 1.2 as minimum protocol "
"version."
msgstr "设置 ``python`` 和 *STRING* 也会把 TLS 1.2 设为最低版本的协议。"

#: ../../using/configure.rst:945
msgid ""
"Disable compiler options that are `recommended by OpenSSF`_ for security "
"reasons with no performance overhead. If this option is not enabled, CPython"
" will be built based on safety compiler options with no slow down. When this"
" option is enabled, CPython will not be built with the compiler options "
"listed below."
msgstr ""

#: ../../using/configure.rst:949
msgid ""
"The following compiler options are disabled with :option:`!--disable-"
"safety`:"
msgstr ""

#: ../../using/configure.rst:951
msgid ""
"`-fstack-protector-strong`_: Enable run-time checks for stack-based buffer "
"overflows."
msgstr ""

#: ../../using/configure.rst:952
msgid ""
"`-Wtrampolines`_: Enable warnings about trampolines that require executable "
"stacks."
msgstr ""

#: ../../using/configure.rst:962
msgid ""
"Enable compiler options that are `recommended by OpenSSF`_ for security "
"reasons which require overhead. If this option is not enabled, CPython will "
"not be built based on safety compiler options which performance impact. When"
" this option is enabled, CPython will be built with the compiler options "
"listed below."
msgstr ""

#: ../../using/configure.rst:966
msgid ""
"The following compiler options are enabled with :option:`!--enable-slower-"
"safety`:"
msgstr ""

#: ../../using/configure.rst:968
msgid ""
"`-D_FORTIFY_SOURCE=3`_: Fortify sources with compile- and run-time checks "
"for unsafe libc usage and buffer overflows."
msgstr ""

#: ../../using/configure.rst:976
msgid "macOS Options"
msgstr "macOS 选项"

#: ../../using/configure.rst:978
msgid "See :source:`Mac/README.rst`."
msgstr "参见 :source:`Mac/README.rst`。"

#: ../../using/configure.rst:983
msgid ""
"Create a universal binary build. *SDKDIR* specifies which macOS SDK should "
"be used to perform the build (default is no)."
msgstr "创建通用的二进制版本。*SDKDIR* 指定应采用的 macOS SDK （默认为否）。"

#: ../../using/configure.rst:989
msgid ""
"Create a Python.framework rather than a traditional Unix install. Optional "
"*INSTALLDIR* specifies the installation path (default is no)."
msgstr ""
"创建 Python.framework ，而不是传统的 Unix 安装版。可选参数 *INSTALLDIR* 指定了安装路径（(默认为否）。"

#: ../../using/configure.rst:994
msgid ""
"Specify the kind of universal binary that should be created. This option is "
"only valid when :option:`--enable-universalsdk` is set."
msgstr "指定应创建何种通用二进制文件。该选项仅当设置了 :option:`--enable-universalsdk` 时才有效。"

#: ../../using/configure.rst:997
msgid "Options:"
msgstr "可选项："

#: ../../using/configure.rst:999
msgid "``universal2`` (x86-64 and arm64);"
msgstr "``universal2`` (x86-64 和 arm64);"

#: ../../using/configure.rst:1000
msgid "``32-bit`` (PPC and i386);"
msgstr "``32-bit`` (PPC 和 i386);"

#: ../../using/configure.rst:1001
msgid "``64-bit``  (PPC64 and x86-64);"
msgstr "``64-bit``  (PPC64 和 x86-64);"

#: ../../using/configure.rst:1002
msgid "``3-way`` (i386, PPC and x86-64);"
msgstr "``3-way`` (i386, PPC 和 x86-64);"

#: ../../using/configure.rst:1003
msgid "``intel`` (i386 and x86-64);"
msgstr "``intel`` (i386 和 x86-64);"

#: ../../using/configure.rst:1004
msgid "``intel-32`` (i386);"
msgstr "``intel-32`` (i386);"

#: ../../using/configure.rst:1005
msgid "``intel-64`` (x86-64);"
msgstr "``intel-64`` (x86-64);"

#: ../../using/configure.rst:1006
msgid "``all``  (PPC, i386, PPC64 and x86-64)."
msgstr "``all``  (PPC, i386, PPC64 和 x86-64)."

#: ../../using/configure.rst:1008
msgid ""
"Note that values for this configuration item are *not* the same as the "
"identifiers used for universal binary wheels on macOS. See the Python "
"Packaging User Guide for details on the `packaging platform compatibility "
"tags used on macOS "
"<https://packaging.python.org/en/latest/specifications/platform-"
"compatibility-tags/#macos>`_"
msgstr ""
"请注意此配置项的值 *不同于* 在 macOS 上被用作通用二进制 wheel 的标识符。 请参阅 Python 打包用户指南了解有关 `在 macOS"
" 上使用的打包平台兼容性标签 "
"<https://packaging.python.org/en/latest/specifications/platform-"
"compatibility-tags/#macos>`_ 的详情"

#: ../../using/configure.rst:1016
msgid ""
"Specify the name for the python framework on macOS only valid when "
":option:`--enable-framework` is set (default: ``Python``)."
msgstr ""
"为 macOS 中的 python 框架指定名称，仅当设置了 :option:`--enable-framework` "
"时有效（默认：``Python``）。"

#: ../../using/configure.rst:1022
msgid ""
"The Python standard library contains strings that are known to trigger "
"automated inspection tool errors when submitted for distribution by the "
"macOS and iOS App Stores. If enabled, this option will apply the list of "
"patches that are known to correct app store compliance. A custom patch file "
"can also be specified. This option is disabled by default."
msgstr ""
"Python 标准库包含已知的当提交给 macOS 和 iOS 应用商店进行发布时会触发自动检查工具错误的字符串。 "
"如果启用，该选项将应用已知可纠正应用商店合规性的补丁列表。 也可以指定自定义补丁文件。 在默认情况下将禁用此选项。"

#: ../../using/configure.rst:1031
msgid "iOS Options"
msgstr "iOS 选项"

#: ../../using/configure.rst:1033
msgid "See :source:`iOS/README.rst`."
msgstr "参见 :source:`iOS/README.rst`。"

#: ../../using/configure.rst:1037
msgid ""
"Create a Python.framework. Unlike macOS, the *INSTALLDIR* argument "
"specifying the installation path is mandatory."
msgstr "创建一个 Python 框架。 不同于 macOS，指定安装路径的 *INSTALLDIR* 参数是强制性的。"

#: ../../using/configure.rst:1042
msgid "Specify the name for the framework (default: ``Python``)."
msgstr "指定框架的名称 (默认名称: ``Python``)。"

#: ../../using/configure.rst:1046
msgid "Cross Compiling Options"
msgstr "交叉编译选项"

#: ../../using/configure.rst:1048
msgid ""
"Cross compiling, also known as cross building, can be used to build Python "
"for another CPU architecture or platform. Cross compiling requires a Python "
"interpreter for the build platform. The version of the build Python must "
"match the version of the cross compiled host Python."
msgstr ""
"交叉编译，或称交叉构建，可被用于为不同的 CPU 架构或平台构建 Python。 交叉编译需要一个针对构建平台的 Python 解释器。 构建的 "
"Python 版本必须与交叉编译的主机 Python 版本相匹配。"

#: ../../using/configure.rst:1055
msgid ""
"configure for building on BUILD, usually guessed by :program:`config.guess`."
msgstr "用于在 BUILD 上执行构建的配置，通常由 :program:`config.guess` 通过推测得到。"

#: ../../using/configure.rst:1059
msgid "cross-compile to build programs to run on HOST (target platform)"
msgstr "交叉编译以构建在 HOST (目标平台) 上运行的程序"

#: ../../using/configure.rst:1063
msgid "path to build ``python`` binary for cross compiling"
msgstr "针对交叉编译构建 ``python`` 二进制文件的路径"

#: ../../using/configure.rst:1069
msgid ""
"An environment variable that points to a file with configure overrides."
msgstr "指向一个带有配置重载的的文件的环境变量。"

#: ../../using/configure.rst:1071
msgid "Example *config.site* file:"
msgstr "示例 *config.site* 文件："

#: ../../using/configure.rst:1073
msgid ""
"# config.site-aarch64\n"
"ac_cv_buggy_getaddrinfo=no\n"
"ac_cv_file__dev_ptmx=yes\n"
"ac_cv_file__dev_ptc=no"
msgstr ""
"# config.site-aarch64\n"
"ac_cv_buggy_getaddrinfo=no\n"
"ac_cv_file__dev_ptmx=yes\n"
"ac_cv_file__dev_ptc=no"

#: ../../using/configure.rst:1082
msgid "Program to run CPython for the host platform for cross-compilation."
msgstr "用于针对交叉编译主机平台的运行 CPython 的程序。"

#: ../../using/configure.rst:1087
msgid "Cross compiling example::"
msgstr "交叉编译示例::"

#: ../../using/configure.rst:1089
msgid ""
"CONFIG_SITE=config.site-aarch64 ../configure \\\n"
"    --build=x86_64-pc-linux-gnu \\\n"
"    --host=aarch64-unknown-linux-gnu \\\n"
"    --with-build-python=../x86_64/python"
msgstr ""
"CONFIG_SITE=config.site-aarch64 ../configure \\\n"
"    --build=x86_64-pc-linux-gnu \\\n"
"    --host=aarch64-unknown-linux-gnu \\\n"
"    --with-build-python=../x86_64/python"

#: ../../using/configure.rst:1096
msgid "Python Build System"
msgstr "Python 构建系统"

#: ../../using/configure.rst:1099
msgid "Main files of the build system"
msgstr "构建系统的主要文件"

#: ../../using/configure.rst:1101
msgid ":file:`configure.ac` => :file:`configure`;"
msgstr ":file:`configure.ac` => :file:`configure`;"

#: ../../using/configure.rst:1102
msgid ""
":file:`Makefile.pre.in` => :file:`Makefile` (created by :file:`configure`);"
msgstr ":file:`Makefile.pre.in` => :file:`Makefile` (由 :file:`configure` 创建);"

#: ../../using/configure.rst:1103
msgid ":file:`pyconfig.h` (created by :file:`configure`);"
msgstr ":file:`pyconfig.h` (由 :file:`configure` 创建);"

#: ../../using/configure.rst:1104
msgid ""
":file:`Modules/Setup`: C extensions built by the Makefile using "
":file:`Module/makesetup` shell script;"
msgstr ""
":file:`Modules/Setup`:  由Makefile 使用 :file:`Module/makesetup` shell 脚本构建的 C "
"扩展;"

#: ../../using/configure.rst:1108
msgid "Main build steps"
msgstr "主要构建步骤"

#: ../../using/configure.rst:1110
msgid "C files (``.c``) are built as object files (``.o``)."
msgstr "C文件（ ``.c`` ）是作为对象文件（ ``.o`` ）构建的。"

#: ../../using/configure.rst:1111
msgid "A static ``libpython`` library (``.a``) is created from objects files."
msgstr "一个静态库 ``libpython`` （ ``.a`` ）是由对象文件创建的。"

#: ../../using/configure.rst:1112
msgid ""
"``python.o`` and the static ``libpython`` library are linked into the final "
"``python`` program."
msgstr "``python.o`` 和静态库 ``libpython`` 被链接到最终程序 ``python`` 中。"

#: ../../using/configure.rst:1114
msgid "C extensions are built by the Makefile (see :file:`Modules/Setup`)."
msgstr "C 扩展是由 Makefile 构建的 (参见 :file:`Modules/Setup`)。"

#: ../../using/configure.rst:1117
msgid "Main Makefile targets"
msgstr "主要 Makefile 目标"

#: ../../using/configure.rst:1120
msgid "make"
msgstr "make"

#: ../../using/configure.rst:1122
msgid ""
"For the most part, when rebuilding after editing some code or refreshing "
"your checkout from upstream, all you need to do is execute ``make``, which "
"(per Make's semantics) builds the default target, the first one defined in "
"the Makefile.  By tradition (including in the CPython project) this is "
"usually the ``all`` target. The ``configure`` script expands an ``autoconf``"
" variable, ``@DEF_MAKE_ALL_RULE@`` to describe precisely which targets "
"``make all`` will build. The three choices are:"
msgstr ""
"对于大部分情况来说，当编译某段代码或从上游刷新你的签出内容之后重新构建时，你需要做的就是执行 ``make``，它（按照 Make "
"的语义）将构建默认目标，即在 Makefile 中定义的第一个目标。 在传统上（包括在 CPython 项目中）这通常为 ``all`` 目标。 "
"``configure`` 脚本将扩展一个 ``autoconf`` 变量 ``@DEF_MAKE_ALL_RULE@`` 来准确地描述 ``make "
"all`` 将构建哪个目标。 有如下三个选择："

#: ../../using/configure.rst:1131
msgid "``profile-opt`` (configured with ``--enable-optimizations``)"
msgstr "``profile-opt`` (使用 ``--enable-optimizations`` 配置)"

#: ../../using/configure.rst:1132
msgid ""
"``build_wasm`` (chosen if the host platform matches ``wasm32-wasi*`` or "
"``wasm32-emscripten``)"
msgstr ""

#: ../../using/configure.rst:1134
msgid ""
"``build_all`` (configured without explicitly using either of the others)"
msgstr "``build_all`` (不显式地使用任何其他配置)"

#: ../../using/configure.rst:1136
msgid ""
"Depending on the most recent source file changes, Make will rebuild any "
"targets (object files and executables) deemed out-of-date, including running"
" ``configure`` again if necessary. Source/target dependencies are many and "
"maintained manually however, so Make sometimes doesn't have all the "
"information necessary to correctly detect all targets which need to be "
"rebuilt.  Depending on which targets aren't rebuilt, you might experience a "
"number of problems. If you have build or test problems which you can't "
"otherwise explain, ``make clean && make`` should work around most dependency"
" problems, at the expense of longer build times."
msgstr ""
"根据最近的源文件更改，Make 将重新构建任何尚未被更新的目标（对象文件和可执行文件），包括在必要时再次运行 ``configure``。 "
"不过源/目标的依赖项数量很多并且是手动维护的，因此 Make 有时并没有所需的全部信息来正确地检测所有需要重新构建的目标。 "
"根据尚未被重新构建的目标的具体情况，你可能会遇到许多问题。 如果你有无法确定原理的构建或测试问题，``make clean && make`` "
"应该能够解决大多数依赖问题，代价则是会耗费更多的时间来构建。"

#: ../../using/configure.rst:1149
msgid "make platform"
msgstr "make platform"

#: ../../using/configure.rst:1151
msgid ""
"Build the ``python`` program, but don't build the standard library extension"
" modules. This generates a file named ``platform`` which contains a single "
"line describing the details of the build platform, e.g., "
"``macosx-14.3-arm64-3.12`` or ``linux-x86_64-3.13``."
msgstr ""
"构建 ``python`` 程序，但不构造标准库扩展模块。 这将生成一个名为 ``platform`` "
"的文件，其中只包含一行描述构建平台详细信息的文本，例如 ``macosx-14.3-arm64-3.12`` 或 "
"``linux-x86_64-3.13``。"

#: ../../using/configure.rst:1158
msgid "make profile-opt"
msgstr "make profile-opt"

#: ../../using/configure.rst:1160
msgid ""
"Build Python using profile-guided optimization (PGO).  You can use the "
"configure :option:`--enable-optimizations` option to make this the default "
"target of the ``make`` command (``make all`` or just ``make``)."
msgstr ""
"使用 profile-guided optimization (PGO) 构建 Python。 你可以使用 :option:`--enable-"
"optimizations` 配置选项来使其成为 ``make`` 命令的默认目标（即对应 ``make all`` 或更简洁的 ``make`` "
"命令）。"

#: ../../using/configure.rst:1168
msgid "make clean"
msgstr "make clean"

#: ../../using/configure.rst:1170
msgid "Remove built files."
msgstr "移除已构建文件。"

#: ../../using/configure.rst:1174
msgid "make distclean"
msgstr "make distclean"

#: ../../using/configure.rst:1176
msgid ""
"In addition to the work done by ``make clean``, remove files created by the "
"configure script.  ``configure`` will have to be run before building again. "
"[#]_"
msgstr ""
"在 ``make clean`` 所做的工作之外，还移除由配置脚本所创建的文件。 再次构建之前将需要运行 ``configure``。 [#]_"

#: ../../using/configure.rst:1182
msgid "make install"
msgstr "make install"

#: ../../using/configure.rst:1184
msgid "Build the ``all`` target and install Python."
msgstr "构建 ``all`` 目标并安装 Python。"

#: ../../using/configure.rst:1188
msgid "make test"
msgstr "make test"

#: ../../using/configure.rst:1190
msgid ""
"Build the ``all`` target and run the Python test suite with the ``--fast-"
"ci`` option without GUI tests. Variables:"
msgstr ""

#: ../../using/configure.rst:1193
msgid "``TESTOPTS``: additional regrtest command-line options."
msgstr "``TESTOPTS``: 额外的回归测试命令行选项。"

#: ../../using/configure.rst:1194
msgid "``TESTPYTHONOPTS``: additional Python command-line options."
msgstr "``TESTPYTHONOPTS``: 额外的 Python 命令行选项。"

#: ../../using/configure.rst:1195
msgid "``TESTTIMEOUT``: timeout in seconds (default: 10 minutes)."
msgstr "``TESTTIMEOUT``: 超时限制（默认值：10 分钟）。"

#: ../../using/configure.rst:1199
msgid "make ci"
msgstr ""

#: ../../using/configure.rst:1201
msgid ""
"This is similar to ``make test``, but uses the ``-ugui`` to also run GUI "
"tests."
msgstr "这与 ``make test`` 类似，但还会使用 ``-ugui`` 来运行 GUI 测试。"

#: ../../using/configure.rst:1207
msgid "make buildbottest"
msgstr "make buildbottest"

#: ../../using/configure.rst:1209
msgid ""
"This is similar to ``make test``, but uses the ``--slow-ci`` option and "
"default timeout of 20 minutes, instead of ``--fast-ci`` option."
msgstr ""
"这与 ``make test`` 类似，但会使用默认超时限制为 20 分钟的 ``--slow-ci`` 选项，而不是 ``--fast-ci`` "
"选项。"

#: ../../using/configure.rst:1214
msgid "make regen-all"
msgstr "make regen-all"

#: ../../using/configure.rst:1216
msgid ""
"Regenerate (almost) all generated files. These include (but are not limited "
"to) bytecode cases, and parser generator file. ``make regen-stdlib-module-"
"names`` and ``autoconf`` must be run separately for the remaining `generated"
" files <#generated-files>`_."
msgstr ""
"重新生成（几乎）所有的已生成文件。 这包括（但不限于）字节码用例，以及解析器生成器文件。 对于其余的 `已生成文件 <#generated-"
"files>`_ 必须分别运行 ``make regen-stdlib-module-names`` 和 ``autoconf``。"

#: ../../using/configure.rst:1223
msgid "C extensions"
msgstr "C 扩展"

#: ../../using/configure.rst:1225
msgid ""
"Some C extensions are built as built-in modules, like the ``sys`` module. "
"They are built with the ``Py_BUILD_CORE_BUILTIN`` macro defined. Built-in "
"modules have no ``__file__`` attribute:"
msgstr ""
"有些 C 扩展是作为内置模块构建的，比如 ``sys`` 模块。 它们在定义了 ``Py_BUILD_CORE_BUILTIN`` 宏的情况下构建。 "
"内置模块没有 ``__file__`` 属性："

#: ../../using/configure.rst:1229
msgid ""
">>> import sys\n"
">>> sys\n"
"<module 'sys' (built-in)>\n"
">>> sys.__file__\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: module 'sys' has no attribute '__file__'"
msgstr ""
">>> import sys\n"
">>> sys\n"
"<module 'sys' (built-in)>\n"
">>> sys.__file__\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: module 'sys' has no attribute '__file__'"

#: ../../using/configure.rst:1239
msgid ""
"Other C extensions are built as dynamic libraries, like the ``_asyncio`` "
"module. They are built with the ``Py_BUILD_CORE_MODULE`` macro defined. "
"Example on Linux x86-64:"
msgstr ""
"其他 C 扩展是作为动态库来构建的，比如 ``_asyncio`` 模块。 它们在定义了 ``Py_BUILD_CORE_MODULE`` "
"宏的情况下构建。 在 Linux x86-64 上的例子："

#: ../../using/configure.rst:1243
msgid ""
">>> import _asyncio\n"
">>> _asyncio\n"
"<module '_asyncio' from '/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so'>\n"
">>> _asyncio.__file__\n"
"'/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so'"
msgstr ""
">>> import _asyncio\n"
">>> _asyncio\n"
"<module '_asyncio' from '/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so'>\n"
">>> _asyncio.__file__\n"
"'/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so'"

#: ../../using/configure.rst:1251
msgid ""
":file:`Modules/Setup` is used to generate Makefile targets to build C "
"extensions. At the beginning of the files, C extensions are built as built-"
"in modules. Extensions defined after the ``*shared*`` marker are built as "
"dynamic libraries."
msgstr ""
":file:`Modules/Setup` 用于生成 Makefile 目标，以构建 C 扩展。在文件的开头， C 被构建为内置模块。在标记 "
"``*shared*`` 之后定义的扩展被构建为动态库。"

#: ../../using/configure.rst:1255
msgid ""
"The :c:macro:`!PyAPI_FUNC()`, :c:macro:`!PyAPI_DATA()` and "
":c:macro:`PyMODINIT_FUNC` macros of :file:`Include/exports.h` are defined "
"differently depending if the ``Py_BUILD_CORE_MODULE`` macro is defined:"
msgstr ""
"宏 :c:macro:`!PyAPI_FUNC()`, :c:macro:`!PyAPI_DATA()` 和 "
":c:macro:`PyMODINIT_FUNC` 在 :file:`Include/exports.h` 中的定义将因是否定义了 "
"``Py_BUILD_CORE_MODULE`` 宏而不同:"

#: ../../using/configure.rst:1259
msgid "Use ``Py_EXPORTED_SYMBOL`` if the ``Py_BUILD_CORE_MODULE`` is defined"
msgstr "如果 ``Py_BUILD_CORE_MODULE`` 定义了，使用 ``Py_EXPORTED_SYMBOL`` 。"

#: ../../using/configure.rst:1260
msgid "Use ``Py_IMPORTED_SYMBOL`` otherwise."
msgstr "否则使用 ``Py_IMPORTED_SYMBOL`` 。"

#: ../../using/configure.rst:1262
msgid ""
"If the ``Py_BUILD_CORE_BUILTIN`` macro is used by mistake on a C extension "
"built as a shared library, its :samp:`PyInit_{xxx}()` function is not "
"exported, causing an :exc:`ImportError` on import."
msgstr ""
"如果宏 ``Py_BUILD_CORE_BUILTIN`` 被错误地用在作为共享库构建的 C 扩展上，它的 :samp:`PyInit_{xxx}()`"
" 函数就不会被导出，导致导入时出现 :exc:`ImportError` 。"

#: ../../using/configure.rst:1268
msgid "Compiler and linker flags"
msgstr "编译器和链接器的标志"

#: ../../using/configure.rst:1270
msgid ""
"Options set by the ``./configure`` script and environment variables and used"
" by ``Makefile``."
msgstr "脚本 ``./configure`` 和环境变量设置的选项，并被 ``Makefile`` 使用。"

#: ../../using/configure.rst:1274
msgid "Preprocessor flags"
msgstr "预处理器的标志"

#: ../../using/configure.rst:1278
msgid ""
"Value of :envvar:`CPPFLAGS` variable passed to the ``./configure`` script."
msgstr "变量 :envvar:`CPPFLAGS` 的值被传递给 ``./configure`` 脚本。"

#: ../../using/configure.rst:1284
msgid ""
"(Objective) C/C++ preprocessor flags, e.g. :samp:`-I{include_dir}` if you "
"have headers in a nonstandard directory *include_dir*."
msgstr ""
"(Objective) C/C++ 预处理器标志，例如，如果头文件位于非标准的目录 *include_dir* 中，请使用 "
":samp:`-I{include_dir}` 。"

#: ../../using/configure.rst:1287 ../../using/configure.rst:1477
msgid ""
"Both :envvar:`CPPFLAGS` and :envvar:`LDFLAGS` need to contain the shell's "
"value to be able to build extension modules using the directories specified "
"in the environment variables."
msgstr ""
":envvar:`CPPFLAGS` 和 :envvar:`LDFLAGS` 都需要包含 shell 的值以便能够使用环境变量中指定的目录构建扩展模块。"

#: ../../using/configure.rst:1297
msgid ""
"Extra preprocessor flags added for building the interpreter object files."
msgstr "为构建解释器对象文件增加了额外的预处理器标志。"

#: ../../using/configure.rst:1299
msgid ""
"Default: ``$(BASECPPFLAGS) -I. -I$(srcdir)/Include $(CONFIGURE_CPPFLAGS) "
"$(CPPFLAGS)``."
msgstr ""
"默认为：  ``$(BASECPPFLAGS) -I. -I$(srcdir)/Include $(CONFIGURE_CPPFLAGS) "
"$(CPPFLAGS)`` 。"

#: ../../using/configure.rst:1304
msgid "Compiler flags"
msgstr "编译器标志"

#: ../../using/configure.rst:1310
msgid "Example: ``gcc -pthread``."
msgstr "例如： ``gcc -pthread`` 。"

#: ../../using/configure.rst:1314
msgid "C++ compiler command."
msgstr "C++ 编译器指令。"

#: ../../using/configure.rst:1316
msgid "Example: ``g++ -pthread``."
msgstr "例如： ``g++ -pthread`` 。"

#: ../../using/configure.rst:1324
msgid ""
":envvar:`CFLAGS_NODIST` is used for building the interpreter and stdlib C "
"extensions.  Use it when a compiler flag should *not* be part of "
":envvar:`CFLAGS` once Python is installed (:gh:`65320`)."
msgstr ""
":envvar:`CFLAGS_NODIST` 用于构建解释器和 stdlib C 扩展。 一旦装好 Python 则当某个编译器旗标 *不应* 成为 "
":envvar:`CFLAGS` 的一部分时将可使用它 (:gh:`65320`)。"

#: ../../using/configure.rst:1328
msgid "In particular, :envvar:`CFLAGS` should not contain:"
msgstr "特别地，:envvar:`CFLAGS` 不应当包含:"

#: ../../using/configure.rst:1330
msgid ""
"the compiler flag ``-I`` (for setting the search path for include files). "
"The ``-I`` flags are processed from left to right, and any flags in "
":envvar:`CFLAGS` would take precedence over user- and package-supplied "
"``-I`` flags."
msgstr ""
"编译器旗标 ``-I`` (用于为包括文件设置搜索路径)。 ``-I`` 旗标将按从左到右的顺序处理，并且 :envvar:`CFLAGS` "
"中的任何旗标都将优先于 user- 和 package- 层级所提供的 ``-I`` 旗标。"

#: ../../using/configure.rst:1335
msgid ""
"hardening flags such as ``-Werror`` because distributions cannot control "
"whether packages installed by users conform to such heightened standards."
msgstr "加固旗标如 ``-Werror`` 因为分发版无法控制由用户安装的包是否符合这样的高标准。"

#: ../../using/configure.rst:1343
msgid ""
"Options passed to the :mod:`compileall` command line when building PYC files"
" in ``make install``. Default: ``-j0``."
msgstr ""
"当在 ``make install`` 中构建 PYC 文件时传给 :mod:`compileall` 命令行的选项。 默认值: ``-j0``。"

#: ../../using/configure.rst:1350
msgid "Extra C compiler flags."
msgstr "而外的 C 编译器指令。"

#: ../../using/configure.rst:1354
msgid ""
"Value of :envvar:`CFLAGS` variable passed to the ``./configure`` script."
msgstr "变量 :envvar:`CFLAGS` 的值传递给 ``./configure`` 脚本。"

#: ../../using/configure.rst:1361
msgid ""
"Value of :envvar:`CFLAGS_NODIST` variable passed to the ``./configure`` "
"script."
msgstr "变量 :envvar:`CFLAGS_NODIST` 的值传递给 ``./configure`` 脚本。"

#: ../../using/configure.rst:1368
msgid "Base compiler flags."
msgstr "基础编译器标志。"

#: ../../using/configure.rst:1372
msgid "Optimization flags."
msgstr "优化标志。"

#: ../../using/configure.rst:1376
msgid "Strict or non-strict aliasing flags used to compile ``Python/dtoa.c``."
msgstr "严格或不严格的别名标志，用于编译 ``Python/dtoa.c`` 、"

#: ../../using/configure.rst:1382
msgid "Compiler flags used to build a shared library."
msgstr "用于构建共享库的编译器标志。"

#: ../../using/configure.rst:1384
msgid "For example, ``-fPIC`` is used on Linux and on BSD."
msgstr "例如， ``-fPIC`` 在 Linux 和 BSD 上使用。"

#: ../../using/configure.rst:1388
msgid "Extra C flags added for building the interpreter object files."
msgstr "为构建解释器对象文件增加了额外的 C 标志。"

#: ../../using/configure.rst:1390
msgid ""
"Default: ``$(CCSHARED)`` when :option:`--enable-shared` is used, or an empty"
" string otherwise."
msgstr "，默认为： ``$(CCSHARED)`` ，当 :option:`--enable-shared` 被使用时，则为空字符串"

#: ../../using/configure.rst:1395
msgid ""
"Default: ``$(BASECFLAGS) $(OPT) $(CONFIGURE_CFLAGS) $(CFLAGS) "
"$(EXTRA_CFLAGS)``."
msgstr ""
"默认为： ``$(BASECFLAGS) $(OPT) $(CONFIGURE_CFLAGS) $(CFLAGS) $(EXTRA_CFLAGS)`` "
"。"

#: ../../using/configure.rst:1399
msgid ""
"Default: ``$(CONFIGURE_CFLAGS_NODIST) $(CFLAGS_NODIST) "
"-I$(srcdir)/Include/internal``."
msgstr ""
"默认为： ``$(CONFIGURE_CFLAGS_NODIST) $(CFLAGS_NODIST) "
"-I$(srcdir)/Include/internal`` 。"

#: ../../using/configure.rst:1405
msgid "C flags used for building the interpreter object files."
msgstr "用于构建解释器对象文件的 C 标志。"

#: ../../using/configure.rst:1407
msgid ""
"Default: ``$(PY_CFLAGS) $(PY_CFLAGS_NODIST) $(PY_CPPFLAGS) "
"$(CFLAGSFORSHARED)``."
msgstr ""
"默认为： ``$(PY_CFLAGS) $(PY_CFLAGS_NODIST) $(PY_CPPFLAGS) $(CFLAGSFORSHARED)``。"

#: ../../using/configure.rst:1413
msgid "Default: ``$(PY_STDMODULE_CFLAGS) -DPy_BUILD_CORE``."
msgstr "默认为 ``$(PY_STDMODULE_CFLAGS) -DPy_BUILD_CORE`` 。"

#: ../../using/configure.rst:1419
msgid ""
"Compiler flags to build a standard library extension module as a built-in "
"module, like the :mod:`posix` module."
msgstr "编译器标志，将标准库的扩展模块作为内置模块来构建，如 :mod:`posix` 模块"

#: ../../using/configure.rst:1422
msgid "Default: ``$(PY_STDMODULE_CFLAGS) -DPy_BUILD_CORE_BUILTIN``."
msgstr "默认为： ``$(PY_STDMODULE_CFLAGS) -DPy_BUILD_CORE_BUILTIN`` 。"

#: ../../using/configure.rst:1428
msgid "Purify command. Purify is a memory debugger program."
msgstr "Purify 命令。 Purify 是一个内存调试程序。"

#: ../../using/configure.rst:1430
msgid "Default: empty string (not used)."
msgstr "默认为：空字符串（不使用）。"

#: ../../using/configure.rst:1434
msgid "Linker flags"
msgstr "链接器标志位"

#: ../../using/configure.rst:1438
msgid ""
"Linker command used to build programs like ``python`` and ``_testembed``."
msgstr "用于构建如 ``python`` 和 ``_testembed`` 的程序的链接器命令。"

#: ../../using/configure.rst:1440
msgid "Default: ``$(PURIFY) $(CC)``."
msgstr "默认值: ``$(PURIFY) $(CC)``。"

#: ../../using/configure.rst:1444
msgid ""
"Value of :envvar:`LDFLAGS` variable passed to the ``./configure`` script."
msgstr "变量 :envvar:`LDFLAGS` 的值被传递给 ``./configure`` 脚本。"

#: ../../using/configure.rst:1446
msgid ""
"Avoid assigning :envvar:`CFLAGS`, :envvar:`LDFLAGS`, etc. so users can use "
"them on the command line to append to these values without stomping the pre-"
"set values."
msgstr ""
"避免指定 :envvar:`CFLAGS` ， :envvar:`LDFLAGS` "
"等，这样用户就可以在命令行上使用它们来追加这些值，而不用触碰到预设的值。"

#: ../../using/configure.rst:1454
msgid ""
":envvar:`LDFLAGS_NODIST` is used in the same manner as "
":envvar:`CFLAGS_NODIST`.  Use it when a linker flag should *not* be part of "
":envvar:`LDFLAGS` once Python is installed (:gh:`65320`)."
msgstr ""
":envvar:`LDFLAGS_NODIST` 的使用方式与 :envvar:`CFLAGS_NODIST` 相同。 一旦装好 Python "
"则当某个链接器旗标 *不应* 成为 :envvar:`LDFLAGS` 的一部分时将可使用它 (:gh:`65320`)。"

#: ../../using/configure.rst:1458
msgid "In particular, :envvar:`LDFLAGS` should not contain:"
msgstr "特别地，:envvar:`LDFLAGS` 不应当包含:"

#: ../../using/configure.rst:1460
msgid ""
"the compiler flag ``-L`` (for setting the search path for libraries). The "
"``-L`` flags are processed from left to right, and any flags in "
":envvar:`LDFLAGS` would take precedence over user- and package-supplied "
"``-L`` flags."
msgstr ""
"编译器旗标 ``-L`` (用于为库设置搜索路径)。 ``-L`` 旗标将按从左到右的顺序处理，并且 :envvar:`LDFLAGS` "
"中的任何旗标都将优先于 user- 和 package 层级所提供的 ``-L`` 旗标。"

#: ../../using/configure.rst:1467
msgid ""
"Value of :envvar:`LDFLAGS_NODIST` variable passed to the ``./configure`` "
"script."
msgstr "变量 :envvar:`LDFLAGS_NODIST` 的值传递给 ``./configure`` 脚本。"

#: ../../using/configure.rst:1474
msgid ""
"Linker flags, e.g. :samp:`-L{lib_dir}` if you have libraries in a "
"nonstandard directory *lib_dir*."
msgstr "链接器标志，例如，如果库位于非标准的目录 *lib_dir* 中，请使用 :samp:`-L{lib_dir}` 。"

#: ../../using/configure.rst:1483
msgid ""
"Linker flags to pass libraries to the linker when linking the Python "
"executable."
msgstr "链接器标志，在链接 Python 可执行文件时将库传递给链接器。"

#: ../../using/configure.rst:1486
msgid "Example: ``-lrt``."
msgstr "例如： ``-lrt`` 。"

#: ../../using/configure.rst:1490
msgid "Command to build a shared library."
msgstr "构建一个共享库的命令。"

#: ../../using/configure.rst:1492
msgid "Default: ``@LDSHARED@ $(PY_LDFLAGS)``."
msgstr "默认为： ``@LDSHARED@ $(PY_LDFLAGS)`` 。"

#: ../../using/configure.rst:1496
msgid "Command to build ``libpython`` shared library."
msgstr "构建共享库 ``libpython`` 的命令。"

#: ../../using/configure.rst:1498
msgid "Default: ``@BLDSHARED@ $(PY_CORE_LDFLAGS)``."
msgstr "默认为： ``@BLDSHARED@ $(PY_CORE_LDFLAGS)`` 。"

#: ../../using/configure.rst:1502
msgid "Default: ``$(CONFIGURE_LDFLAGS) $(LDFLAGS)``."
msgstr "默认为： ``$(CONFIGURE_LDFLAGS) $(LDFLAGS)`` 。"

#: ../../using/configure.rst:1506
msgid "Default: ``$(CONFIGURE_LDFLAGS_NODIST) $(LDFLAGS_NODIST)``."
msgstr "默认为： ``$(CONFIGURE_LDFLAGS_NODIST) $(LDFLAGS_NODIST)`` 。"

#: ../../using/configure.rst:1512
msgid "Linker flags used for building the interpreter object files."
msgstr "用于构建解释器对象文件的链接器标志。"

#: ../../using/configure.rst:1518
msgid "Footnotes"
msgstr "备注"

#: ../../using/configure.rst:1519
msgid ""
"``git clean -fdx`` is an even more extreme way to \"clean\" your checkout. "
"It removes all files not known to Git. When bug hunting using ``git "
"bisect``, this is `recommended between probes "
"<https://github.com/python/cpython/issues/114505#issuecomment-1907021718>`_ "
"to guarantee a completely clean build. **Use with care**, as it will delete "
"all files not checked into Git, including your new, uncommitted work."
msgstr ""
"``git clean -fdx`` 是“清理”你的签出内容的更激进方式。 它将移除所有对 Git 来说未知的文件。 当使用 ``git "
"bisect`` 查找程序错误时，`推荐在多次探查之间 "
"<https://github.com/python/cpython/issues/114505#issuecomment-1907021718>`_ "
"执行此命令来确保完整的全新构建。 **请谨慎使用**，因为它将删除所有未签入 Git 的文件，包括你最新的、尚未提交的工作。"
