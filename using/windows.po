# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 19:10+0000\n"
"PO-Revision-Date: 2025-07-18 19:18+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/windows.rst:7
msgid "Using Python on Windows"
msgstr ""

#: ../../using/windows.rst:12
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr ""

#: ../../using/windows.rst:15
msgid ""
"Unlike most Unix systems and services, Windows does not include a system "
"supported installation of Python. To make Python available, the CPython team"
" has compiled Windows installers (MSI packages) with every `release "
"<https://www.python.org/download/releases/>`_ for many years. These "
"installers are primarily intended to add a per-user installation of Python, "
"with the core interpreter and library being used by a single user. The "
"installer is also able to install for all users of a single machine, and a "
"separate ZIP file is available for application-local distributions."
msgstr ""

#: ../../using/windows.rst:24
msgid ""
"As specified in :pep:`11`, a Python release only supports a Windows platform"
" while Microsoft considers the platform under extended support. This means "
"that Python |version| supports Windows 8.1 and newer. If you require Windows"
" 7 support, please install Python 3.8."
msgstr ""

#: ../../using/windows.rst:29
msgid ""
"There are a number of different installers available for Windows, each with "
"certain benefits and downsides."
msgstr ""

#: ../../using/windows.rst:32
msgid ""
":ref:`windows-full` contains all components and is the best option for "
"developers using Python for any kind of project."
msgstr ""

#: ../../using/windows.rst:35
msgid ""
":ref:`windows-store` is a simple installation of Python that is suitable for"
" running scripts and packages, and using IDLE or other development "
"environments. It requires Windows 10, but can be safely installed without "
"corrupting other programs. It also provides many convenient commands for "
"launching Python and its tools."
msgstr ""

#: ../../using/windows.rst:41
msgid ""
":ref:`windows-nuget` are lightweight installations intended for continuous "
"integration systems. It can be used to build Python packages or run scripts,"
" but is not updateable and has no user interface tools."
msgstr ""

#: ../../using/windows.rst:45
msgid ""
":ref:`windows-embeddable` is a minimal package of Python suitable for "
"embedding into a larger application."
msgstr ""

#: ../../using/windows.rst:52
msgid "The full installer"
msgstr ""

#: ../../using/windows.rst:55
msgid "Installation steps"
msgstr ""

#: ../../using/windows.rst:57
msgid ""
"Four Python |version| installers are available for download - two each for "
"the 32-bit and 64-bit versions of the interpreter. The *web installer* is a "
"small initial download, and it will automatically download the required "
"components as necessary. The *offline installer* includes the components "
"necessary for a default installation and only requires an internet "
"connection for optional features. See :ref:`install-layout-option` for other"
" ways to avoid downloading during installation."
msgstr ""

#: ../../using/windows.rst:65
msgid "After starting the installer, one of two options may be selected:"
msgstr ""

#: ../../using/windows.rst:69
msgid "If you select \"Install Now\":"
msgstr ""

#: ../../using/windows.rst:71
msgid ""
"You will *not* need to be an administrator (unless a system update for the C"
" Runtime Library is required or you install the :ref:`launcher` for all "
"users)"
msgstr ""

#: ../../using/windows.rst:74
msgid "Python will be installed into your user directory"
msgstr ""

#: ../../using/windows.rst:75
msgid ""
"The :ref:`launcher` will be installed according to the option at the bottom "
"of the first page"
msgstr ""

#: ../../using/windows.rst:77
msgid "The standard library, test suite, launcher and pip will be installed"
msgstr ""

#: ../../using/windows.rst:78
msgid ""
"If selected, the install directory will be added to your :envvar:`PATH`"
msgstr ""

#: ../../using/windows.rst:79
msgid "Shortcuts will only be visible for the current user"
msgstr ""

#: ../../using/windows.rst:81
msgid ""
"Selecting \"Customize installation\" will allow you to select the features "
"to install, the installation location and other options or post-install "
"actions. To install debugging symbols or binaries, you will need to use this"
" option."
msgstr ""

#: ../../using/windows.rst:85
msgid ""
"To perform an all-users installation, you should select \"Customize "
"installation\". In this case:"
msgstr ""

#: ../../using/windows.rst:88
msgid "You may be required to provide administrative credentials or approval"
msgstr ""

#: ../../using/windows.rst:89
msgid "Python will be installed into the Program Files directory"
msgstr ""

#: ../../using/windows.rst:90
msgid "The :ref:`launcher` will be installed into the Windows directory"
msgstr ""

#: ../../using/windows.rst:91
msgid "Optional features may be selected during installation"
msgstr ""

#: ../../using/windows.rst:92
msgid "The standard library can be pre-compiled to bytecode"
msgstr ""

#: ../../using/windows.rst:93
msgid ""
"If selected, the install directory will be added to the system "
":envvar:`PATH`"
msgstr ""

#: ../../using/windows.rst:94
msgid "Shortcuts are available for all users"
msgstr ""

#: ../../using/windows.rst:99
msgid "Removing the MAX_PATH Limitation"
msgstr ""

#: ../../using/windows.rst:101
msgid ""
"Windows historically has limited path lengths to 260 characters. This meant "
"that paths longer than this would not resolve and errors would result."
msgstr ""

#: ../../using/windows.rst:104
msgid ""
"In the latest versions of Windows, this limitation can be expanded to "
"approximately 32,000 characters. Your administrator will need to activate "
"the \"Enable Win32 long paths\" group policy, or set ``LongPathsEnabled`` to"
" ``1`` in the registry key "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem``."
msgstr ""

#: ../../using/windows.rst:110
msgid ""
"This allows the :func:`open` function, the :mod:`os` module and most other "
"path functionality to accept and return paths longer than 260 characters."
msgstr ""

#: ../../using/windows.rst:113
msgid "After changing the above option, no further configuration is required."
msgstr ""

#: ../../using/windows.rst:117
msgid "Support for long paths was enabled in Python."
msgstr ""

#: ../../using/windows.rst:122
msgid "Installing Without UI"
msgstr ""

#: ../../using/windows.rst:124
msgid ""
"All of the options available in the installer UI can also be specified from "
"the command line, allowing scripted installers to replicate an installation "
"on many machines without user interaction.  These options may also be set "
"without suppressing the UI in order to change some of the defaults."
msgstr ""

#: ../../using/windows.rst:129
msgid ""
"To completely hide the installer UI and install Python silently, pass the "
"``/quiet`` option. To skip past the user interaction but still display "
"progress and errors, pass the ``/passive`` option. The ``/uninstall`` option"
" may be passed to immediately begin removing Python - no confirmation prompt"
" will be displayed."
msgstr ""

#: ../../using/windows.rst:135
msgid ""
"All other options are passed as ``name=value``, where the value is usually "
"``0`` to disable a feature, ``1`` to enable a feature, or a path. The full "
"list of available options is shown below."
msgstr ""

#: ../../using/windows.rst:140
msgid "Name"
msgstr "名称"

#: ../../using/windows.rst:140
msgid "Description"
msgstr "描述"

#: ../../using/windows.rst:140
msgid "Default"
msgstr ""

#: ../../using/windows.rst:142
msgid "InstallAllUsers"
msgstr ""

#: ../../using/windows.rst:142
msgid "Perform a system-wide installation."
msgstr ""

#: ../../using/windows.rst:142 ../../using/windows.rst:165
#: ../../using/windows.rst:168 ../../using/windows.rst:177
#: ../../using/windows.rst:195 ../../using/windows.rst:203
#: ../../using/windows.rst:206
msgid "0"
msgstr "0"

#: ../../using/windows.rst:144
msgid "TargetDir"
msgstr ""

#: ../../using/windows.rst:144
msgid "The installation directory"
msgstr ""

#: ../../using/windows.rst:144
msgid "Selected based on InstallAllUsers"
msgstr ""

#: ../../using/windows.rst:147
msgid "DefaultAllUsersTargetDir"
msgstr ""

#: ../../using/windows.rst:147
msgid "The default installation directory for all-user installs"
msgstr ""

#: ../../using/windows.rst:147
msgid ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` or :file:`\\ "
"%ProgramFiles(x86)%\\\\\\ Python X.Y`"
msgstr ""

#: ../../using/windows.rst:152
msgid "DefaultJustForMeTargetDir"
msgstr ""

#: ../../using/windows.rst:152
msgid "The default install directory for just-for-me installs"
msgstr ""

#: ../../using/windows.rst:152
msgid ""
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY` or "
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY-32` or "
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY-64`"
msgstr ""

#: ../../using/windows.rst:159
msgid "DefaultCustomTargetDir"
msgstr ""

#: ../../using/windows.rst:159
msgid "The default custom install directory displayed in the UI"
msgstr ""

#: ../../using/windows.rst:159 ../../using/windows.rst:208
msgid "(empty)"
msgstr ""

#: ../../using/windows.rst:162
msgid "AssociateFiles"
msgstr ""

#: ../../using/windows.rst:162
msgid "Create file associations if the launcher is also installed."
msgstr ""

#: ../../using/windows.rst:162 ../../using/windows.rst:172
#: ../../using/windows.rst:175 ../../using/windows.rst:179
#: ../../using/windows.rst:182 ../../using/windows.rst:185
#: ../../using/windows.rst:187 ../../using/windows.rst:190
#: ../../using/windows.rst:193 ../../using/windows.rst:197
#: ../../using/windows.rst:199 ../../using/windows.rst:201
msgid "1"
msgstr ""

#: ../../using/windows.rst:165
msgid "CompileAll"
msgstr ""

#: ../../using/windows.rst:165
msgid "Compile all ``.py`` files to ``.pyc``."
msgstr ""

#: ../../using/windows.rst:168
msgid "PrependPath"
msgstr ""

#: ../../using/windows.rst:168
msgid ""
"Add install and Scripts directories to :envvar:`PATH` and ``.PY`` to "
":envvar:`PATHEXT`"
msgstr ""

#: ../../using/windows.rst:172
msgid "Shortcuts"
msgstr ""

#: ../../using/windows.rst:172
msgid ""
"Create shortcuts for the interpreter, documentation and IDLE if installed."
msgstr ""

#: ../../using/windows.rst:175
msgid "Include_doc"
msgstr ""

#: ../../using/windows.rst:175
msgid "Install Python manual"
msgstr ""

#: ../../using/windows.rst:177
msgid "Include_debug"
msgstr ""

#: ../../using/windows.rst:177
msgid "Install debug binaries"
msgstr ""

#: ../../using/windows.rst:179
msgid "Include_dev"
msgstr ""

#: ../../using/windows.rst:179
msgid "Install developer headers and libraries"
msgstr ""

#: ../../using/windows.rst:182
msgid "Include_exe"
msgstr ""

#: ../../using/windows.rst:182
msgid "Install :file:`python.exe` and related files"
msgstr ""

#: ../../using/windows.rst:185
msgid "Include_launcher"
msgstr ""

#: ../../using/windows.rst:185
msgid "Install :ref:`launcher`."
msgstr ""

#: ../../using/windows.rst:187
msgid "InstallLauncherAllUsers"
msgstr ""

#: ../../using/windows.rst:187
msgid "Installs :ref:`launcher` for all users."
msgstr ""

#: ../../using/windows.rst:190
msgid "Include_lib"
msgstr ""

#: ../../using/windows.rst:190
msgid "Install standard library and extension modules"
msgstr ""

#: ../../using/windows.rst:193
msgid "Include_pip"
msgstr ""

#: ../../using/windows.rst:193
msgid "Install bundled pip and setuptools"
msgstr ""

#: ../../using/windows.rst:195
msgid "Include_symbols"
msgstr ""

#: ../../using/windows.rst:195
msgid "Install debugging symbols (`*`.pdb)"
msgstr ""

#: ../../using/windows.rst:197
msgid "Include_tcltk"
msgstr ""

#: ../../using/windows.rst:197
msgid "Install Tcl/Tk support and IDLE"
msgstr ""

#: ../../using/windows.rst:199
msgid "Include_test"
msgstr ""

#: ../../using/windows.rst:199
msgid "Install standard library test suite"
msgstr ""

#: ../../using/windows.rst:201
msgid "Include_tools"
msgstr ""

#: ../../using/windows.rst:201
msgid "Install utility scripts"
msgstr ""

#: ../../using/windows.rst:203
msgid "LauncherOnly"
msgstr ""

#: ../../using/windows.rst:203
msgid "Only installs the launcher. This will override most other options."
msgstr ""

#: ../../using/windows.rst:206
msgid "SimpleInstall"
msgstr ""

#: ../../using/windows.rst:206
msgid "Disable most install UI"
msgstr ""

#: ../../using/windows.rst:208
msgid "SimpleInstallDescription"
msgstr ""

#: ../../using/windows.rst:208
msgid "A custom message to display when the simplified install UI is used."
msgstr ""

#: ../../using/windows.rst:212
msgid ""
"For example, to silently install a default, system-wide Python installation,"
" you could use the following command (from an elevated command prompt)::"
msgstr ""

#: ../../using/windows.rst:217
msgid ""
"To allow users to easily install a personal copy of Python without the test "
"suite, you could provide a shortcut with the following command. This will "
"display a simplified initial page and disallow customization::"
msgstr ""

#: ../../using/windows.rst:224
msgid ""
"(Note that omitting the launcher also omits file associations, and is only "
"recommended for per-user installs when there is also a system-wide "
"installation that included the launcher.)"
msgstr ""

#: ../../using/windows.rst:228
msgid ""
"The options listed above can also be provided in a file named "
"``unattend.xml`` alongside the executable. This file specifies a list of "
"options and values. When a value is provided as an attribute, it will be "
"converted to a number if possible. Values provided as element text are "
"always left as strings. This example file sets the same options as the "
"previous example:"
msgstr ""

#: ../../using/windows.rst:247
msgid "Installing Without Downloading"
msgstr ""

#: ../../using/windows.rst:249
msgid ""
"As some features of Python are not included in the initial installer "
"download, selecting those features may require an internet connection.  To "
"avoid this need, all possible components may be downloaded on-demand to "
"create a complete *layout* that will no longer require an internet "
"connection regardless of the selected features. Note that this download may "
"be bigger than required, but where a large number of installations are going"
" to be performed it is very useful to have a locally cached copy."
msgstr ""

#: ../../using/windows.rst:257
msgid ""
"Execute the following command from Command Prompt to download all possible "
"required files.  Remember to substitute ``python-3.9.0.exe`` for the actual "
"name of your installer, and to create layouts in their own directories to "
"avoid collisions between files with the same name."
msgstr ""

#: ../../using/windows.rst:266
msgid ""
"You may also specify the ``/quiet`` option to hide the progress display."
msgstr ""

#: ../../using/windows.rst:269
msgid "Modifying an install"
msgstr ""

#: ../../using/windows.rst:271
msgid ""
"Once Python has been installed, you can add or remove features through the "
"Programs and Features tool that is part of Windows. Select the Python entry "
"and choose \"Uninstall/Change\" to open the installer in maintenance mode."
msgstr ""

#: ../../using/windows.rst:275
msgid ""
"\"Modify\" allows you to add or remove features by modifying the checkboxes "
"- unchanged checkboxes will not install or remove anything. Some options "
"cannot be changed in this mode, such as the install directory; to modify "
"these, you will need to remove and then reinstall Python completely."
msgstr ""

#: ../../using/windows.rst:280
msgid ""
"\"Repair\" will verify all the files that should be installed using the "
"current settings and replace any that have been removed or modified."
msgstr ""

#: ../../using/windows.rst:283
msgid ""
"\"Uninstall\" will remove Python entirely, with the exception of the "
":ref:`launcher`, which has its own entry in Programs and Features."
msgstr ""

#: ../../using/windows.rst:290
msgid "The Microsoft Store package"
msgstr ""

#: ../../using/windows.rst:294
msgid ""
"The Microsoft Store package is an easily installable Python interpreter that"
" is intended mainly for interactive use, for example, by students."
msgstr ""

#: ../../using/windows.rst:297
msgid ""
"To install the package, ensure you have the latest Windows 10 updates and "
"search the Microsoft Store app for \"Python |version|\". Ensure that the app"
" you select is published by the Python Software Foundation, and install it."
msgstr ""

#: ../../using/windows.rst:302
msgid ""
"Python will always be available for free on the Microsoft Store. If you are "
"asked to pay for it, you have not selected the correct package."
msgstr ""

#: ../../using/windows.rst:305
msgid ""
"After installation, Python may be launched by finding it in Start. "
"Alternatively, it will be available from any Command Prompt or PowerShell "
"session by typing ``python``. Further, pip and IDLE may be used by typing "
"``pip`` or ``idle``. IDLE can also be found in Start."
msgstr ""

#: ../../using/windows.rst:310
msgid ""
"All three commands are also available with version number suffixes, for "
"example, as ``python3.exe`` and ``python3.x.exe`` as well as ``python.exe`` "
"(where ``3.x`` is the specific version you want to launch, such as "
"|version|). Open \"Manage App Execution Aliases\" through Start to select "
"which version of Python is associated with each command. It is recommended "
"to make sure that ``pip`` and ``idle`` are consistent with whichever version"
" of ``python`` is selected."
msgstr ""

#: ../../using/windows.rst:318
msgid ""
"Virtual environments can be created with ``python -m venv`` and activated "
"and used as normal."
msgstr ""

#: ../../using/windows.rst:321
msgid ""
"If you have installed another version of Python and added it to your "
"``PATH`` variable, it will be available as ``python.exe`` rather than the "
"one from the Microsoft Store. To access the new installation, use "
"``python3.exe`` or ``python3.x.exe``."
msgstr ""

#: ../../using/windows.rst:326
msgid ""
"The ``py.exe`` launcher will detect this Python installation, but will "
"prefer installations from the traditional installer."
msgstr ""

#: ../../using/windows.rst:329
msgid ""
"To remove Python, open Settings and use Apps and Features, or else find "
"Python in Start and right-click to select Uninstall. Uninstalling will "
"remove all packages you installed directly into this Python installation, "
"but will not remove any virtual environments"
msgstr ""

#: ../../using/windows.rst:335
msgid "Known Issues"
msgstr ""

#: ../../using/windows.rst:337
msgid ""
"Because of restrictions on Microsoft Store apps, Python scripts may not have"
" full write access to shared locations such as ``TEMP`` and the registry. "
"Instead, it will write to a private copy. If your scripts must modify the "
"shared locations, you will need to install the full installer."
msgstr ""

#: ../../using/windows.rst:342
msgid ""
"For more detail on the technical basis for these limitations, please consult"
" Microsoft's documentation on packaged full-trust apps, currently available "
"at `docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-uwp-behind-the-"
"scenes <https://docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-"
"uwp-behind-the-scenes>`_"
msgstr ""

#: ../../using/windows.rst:351
msgid "The nuget.org packages"
msgstr ""

#: ../../using/windows.rst:355
msgid ""
"The nuget.org package is a reduced size Python environment intended for use "
"on continuous integration and build systems that do not have a system-wide "
"install of Python. While nuget is \"the package manager for .NET\", it also "
"works perfectly fine for packages containing build-time tools."
msgstr ""

#: ../../using/windows.rst:360
msgid ""
"Visit `nuget.org <https://www.nuget.org/>`_ for the most up-to-date "
"information on using nuget. What follows is a summary that is sufficient for"
" Python developers."
msgstr ""

#: ../../using/windows.rst:364
msgid ""
"The ``nuget.exe`` command line tool may be downloaded directly from "
"``https://aka.ms/nugetclidl``, for example, using curl or PowerShell. With "
"the tool, the latest version of Python for 64-bit or 32-bit machines is "
"installed using::"
msgstr ""

#: ../../using/windows.rst:372
msgid ""
"To select a particular version, add a ``-Version 3.x.y``. The output "
"directory may be changed from ``.``, and the package will be installed into "
"a subdirectory. By default, the subdirectory is named the same as the "
"package, and without the ``-ExcludeVersion`` option this name will include "
"the specific version installed. Inside the subdirectory is a ``tools`` "
"directory that contains the Python installation:"
msgstr ""

#: ../../using/windows.rst:389
msgid ""
"In general, nuget packages are not upgradeable, and newer versions should be"
" installed side-by-side and referenced using the full path. Alternatively, "
"delete the package directory manually and install it again. Many CI systems "
"will do this automatically if they do not preserve files between builds."
msgstr ""

#: ../../using/windows.rst:394
msgid ""
"Alongside the ``tools`` directory is a ``build\\native`` directory. This "
"contains a MSBuild properties file ``python.props`` that can be used in a "
"C++ project to reference the Python install. Including the settings will "
"automatically use the headers and import libraries in your build."
msgstr ""

#: ../../using/windows.rst:399
msgid ""
"The package information pages on nuget.org are "
"`www.nuget.org/packages/python <https://www.nuget.org/packages/python>`_ for"
" the 64-bit version and `www.nuget.org/packages/pythonx86 "
"<https://www.nuget.org/packages/pythonx86>`_ for the 32-bit version."
msgstr ""

#: ../../using/windows.rst:408
msgid "The embeddable package"
msgstr ""

#: ../../using/windows.rst:412
msgid ""
"The embedded distribution is a ZIP file containing a minimal Python "
"environment. It is intended for acting as part of another application, "
"rather than being directly accessed by end-users."
msgstr ""

#: ../../using/windows.rst:416
msgid ""
"When extracted, the embedded distribution is (almost) fully isolated from "
"the user's system, including environment variables, system registry "
"settings, and installed packages. The standard library is included as pre-"
"compiled and optimized ``.pyc`` files in a ZIP, and ``python3.dll``, "
"``python37.dll``, ``python.exe`` and ``pythonw.exe`` are all provided. "
"Tcl/tk (including all dependants, such as Idle), pip and the Python "
"documentation are not included."
msgstr ""

#: ../../using/windows.rst:425
msgid ""
"The embedded distribution does not include the `Microsoft C Runtime "
"<https://docs.microsoft.com/en-US/cpp/windows/latest-supported-vc-"
"redist#visual-studio-2015-2017-2019-and-2022>`_ and it is the responsibility"
" of the application installer to provide this. The runtime may have already "
"been installed on a user's system previously or automatically via Windows "
"Update, and can be detected by finding ``ucrtbase.dll`` in the system "
"directory."
msgstr ""

#: ../../using/windows.rst:432
msgid ""
"Third-party packages should be installed by the application installer "
"alongside the embedded distribution. Using pip to manage dependencies as for"
" a regular Python installation is not supported with this distribution, "
"though with some care it may be possible to include and use pip for "
"automatic updates. In general, third-party packages should be treated as "
"part of the application (\"vendoring\") so that the developer can ensure "
"compatibility with newer versions before providing updates to users."
msgstr ""

#: ../../using/windows.rst:440
msgid ""
"The two recommended use cases for this distribution are described below."
msgstr ""

#: ../../using/windows.rst:443
msgid "Python Application"
msgstr ""

#: ../../using/windows.rst:445
msgid ""
"An application written in Python does not necessarily require users to be "
"aware of that fact. The embedded distribution may be used in this case to "
"include a private version of Python in an install package. Depending on how "
"transparent it should be (or conversely, how professional it should appear),"
" there are two options."
msgstr ""

#: ../../using/windows.rst:451
msgid ""
"Using a specialized executable as a launcher requires some coding, but "
"provides the most transparent experience for users. With a customized "
"launcher, there are no obvious indications that the program is running on "
"Python: icons can be customized, company and version information can be "
"specified, and file associations behave properly. In most cases, a custom "
"launcher should simply be able to call ``Py_Main`` with a hard-coded command"
" line."
msgstr ""

#: ../../using/windows.rst:458
msgid ""
"The simpler approach is to provide a batch file or generated shortcut that "
"directly calls the ``python.exe`` or ``pythonw.exe`` with the required "
"command-line arguments. In this case, the application will appear to be "
"Python and not its actual name, and users may have trouble distinguishing it"
" from other running Python processes or file associations."
msgstr ""

#: ../../using/windows.rst:464
msgid ""
"With the latter approach, packages should be installed as directories "
"alongside the Python executable to ensure they are available on the path. "
"With the specialized launcher, packages can be located in other locations as"
" there is an opportunity to specify the search path before launching the "
"application."
msgstr ""

#: ../../using/windows.rst:470
msgid "Embedding Python"
msgstr "嵌入Python"

#: ../../using/windows.rst:472
msgid ""
"Applications written in native code often require some form of scripting "
"language, and the embedded Python distribution can be used for this purpose."
" In general, the majority of the application is in native code, and some "
"part will either invoke ``python.exe`` or directly use ``python3.dll``. For "
"either case, extracting the embedded distribution to a subdirectory of the "
"application installation is sufficient to provide a loadable Python "
"interpreter."
msgstr ""

#: ../../using/windows.rst:479
msgid ""
"As with the application use, packages can be installed to any location as "
"there is an opportunity to specify search paths before initializing the "
"interpreter. Otherwise, there is no fundamental differences between using "
"the embedded distribution and a regular installation."
msgstr ""

#: ../../using/windows.rst:486
msgid "Alternative bundles"
msgstr ""

#: ../../using/windows.rst:488
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr ""

#: ../../using/windows.rst:493
msgid "`ActivePython <https://www.activestate.com/activepython/>`_"
msgstr ""

#: ../../using/windows.rst:493
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr ""

#: ../../using/windows.rst:497
msgid "`Anaconda <https://www.anaconda.com/download/>`_"
msgstr ""

#: ../../using/windows.rst:496
msgid ""
"Popular scientific modules (such as numpy, scipy and pandas) and the "
"``conda`` package manager."
msgstr ""

#: ../../using/windows.rst:501
msgid "`Canopy <https://www.enthought.com/product/canopy/>`_"
msgstr ""

#: ../../using/windows.rst:500
msgid ""
"A \"comprehensive Python analysis environment\" with editors and other "
"development tools."
msgstr ""

#: ../../using/windows.rst:505
msgid "`WinPython <https://winpython.github.io/>`_"
msgstr ""

#: ../../using/windows.rst:504
msgid ""
"Windows-specific distribution with prebuilt scientific packages and tools "
"for building packages."
msgstr ""

#: ../../using/windows.rst:507
msgid ""
"Note that these packages may not include the latest versions of Python or "
"other libraries, and are not maintained or supported by the core Python "
"team."
msgstr ""

#: ../../using/windows.rst:513
msgid "Configuring Python"
msgstr ""

#: ../../using/windows.rst:515
msgid ""
"To run Python conveniently from a command prompt, you might consider "
"changing some default environment variables in Windows.  While the installer"
" provides an option to configure the PATH and PATHEXT variables for you, "
"this is only reliable for a single, system-wide installation.  If you "
"regularly use multiple versions of Python, consider using the "
":ref:`launcher`."
msgstr ""

#: ../../using/windows.rst:525
msgid "Excursus: Setting environment variables"
msgstr ""

#: ../../using/windows.rst:527
msgid ""
"Windows allows environment variables to be configured permanently at both "
"the User level and the System level, or temporarily in a command prompt."
msgstr ""

#: ../../using/windows.rst:530
msgid ""
"To temporarily set environment variables, open Command Prompt and use the "
":command:`set` command:"
msgstr ""

#: ../../using/windows.rst:539
msgid ""
"These changes will apply to any further commands executed in that console, "
"and will be inherited by any applications started from the console."
msgstr ""

#: ../../using/windows.rst:542
msgid ""
"Including the variable name within percent signs will expand to the existing"
" value, allowing you to add your new value at either the start or the end. "
"Modifying :envvar:`PATH` by adding the directory containing "
":program:`python.exe` to the start is a common way to ensure the correct "
"version of Python is launched."
msgstr ""

#: ../../using/windows.rst:548
msgid ""
"To permanently modify the default environment variables, click Start and "
"search for 'edit environment variables', or open System properties, "
":guilabel:`Advanced system settings` and click the :guilabel:`Environment "
"Variables` button. In this dialog, you can add or modify User and System "
"variables. To change System variables, you need non-restricted access to "
"your machine (i.e. Administrator rights)."
msgstr ""

#: ../../using/windows.rst:557
msgid ""
"Windows will concatenate User variables *after* System variables, which may "
"cause unexpected results when modifying :envvar:`PATH`."
msgstr ""

#: ../../using/windows.rst:560
msgid ""
"The :envvar:`PYTHONPATH` variable is used by all versions of Python, so you "
"should not permanently configure it unless the listed paths only include "
"code that is compatible with all of your installed Python versions."
msgstr ""

#: ../../using/windows.rst:568
msgid ""
"https://docs.microsoft.com/en-us/windows/win32/procthread/environment-"
"variables"
msgstr ""

#: ../../using/windows.rst:568
msgid "Overview of environment variables on Windows"
msgstr ""

#: ../../using/windows.rst:571
msgid ""
"https://docs.microsoft.com/en-us/windows-server/administration/windows-"
"commands/set_1"
msgstr ""

#: ../../using/windows.rst:571
msgid "The ``set`` command, for temporarily modifying environment variables"
msgstr ""

#: ../../using/windows.rst:573
msgid ""
"https://docs.microsoft.com/en-us/windows-server/administration/windows-"
"commands/setx"
msgstr ""

#: ../../using/windows.rst:574
msgid "The ``setx`` command, for permanently modifying environment variables"
msgstr ""

#: ../../using/windows.rst:580
msgid "Finding the Python executable"
msgstr ""

#: ../../using/windows.rst:584
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the command prompt. The "
"installer has an option to set that up for you."
msgstr ""

#: ../../using/windows.rst:588
msgid ""
"On the first page of the installer, an option labelled \"Add Python to "
"PATH\" may be selected to have the installer add the install location into "
"the :envvar:`PATH`.  The location of the :file:`Scripts\\\\` folder is also "
"added. This allows you to type :command:`python` to run the interpreter, and"
" :command:`pip` for the package installer. Thus, you can also execute your "
"scripts with command line options, see :ref:`using-on-cmdline` "
"documentation."
msgstr ""

#: ../../using/windows.rst:595
msgid ""
"If you don't enable this option at install time, you can always re-run the "
"installer, select Modify, and enable it.  Alternatively, you can manually "
"modify the :envvar:`PATH` using the directions in :ref:`setting-envvars`.  "
"You need to set your :envvar:`PATH` environment variable to include the "
"directory of your Python installation, delimited by a semicolon from other "
"entries.  An example variable could look like this (assuming the first two "
"entries already existed)::"
msgstr ""

#: ../../using/windows.rst:608
msgid "UTF-8 mode"
msgstr ""

#: ../../using/windows.rst:612
msgid ""
"Windows still uses legacy encodings for the system encoding (the ANSI Code "
"Page).  Python uses it for the default encoding of text files (e.g. "
":func:`locale.getpreferredencoding`)."
msgstr ""

#: ../../using/windows.rst:616
msgid ""
"This may cause issues because UTF-8 is widely used on the internet and most "
"Unix systems, including WSL (Windows Subsystem for Linux)."
msgstr ""

#: ../../using/windows.rst:619
msgid ""
"You can use UTF-8 mode to change the default text encoding to UTF-8. You can"
" enable UTF-8 mode via the ``-X utf8`` command line option, or the "
"``PYTHONUTF8=1`` environment variable.  See :envvar:`PYTHONUTF8` for "
"enabling UTF-8 mode, and :ref:`setting-envvars` for how to modify "
"environment variables."
msgstr ""

#: ../../using/windows.rst:625
msgid "When UTF-8 mode is enabled:"
msgstr ""

#: ../../using/windows.rst:627
msgid ""
":func:`locale.getpreferredencoding` returns ``'UTF-8'`` instead of the "
"system encoding.  This function is used for the default text encoding in "
"many places, including :func:`open`, :class:`Popen`, :meth:`Path.read_text`,"
" etc."
msgstr ""

#: ../../using/windows.rst:631
msgid ""
":data:`sys.stdin`, :data:`sys.stdout`, and :data:`sys.stderr` all use UTF-8 "
"as their text encoding."
msgstr ""

#: ../../using/windows.rst:633
msgid "You can still use the system encoding via the \"mbcs\" codec."
msgstr ""

#: ../../using/windows.rst:635
msgid ""
"Note that adding ``PYTHONUTF8=1`` to the default environment variables will "
"affect all Python 3.7+ applications on your system. If you have any Python "
"3.7+ applications which rely on the legacy system encoding, it is "
"recommended to set the environment variable temporarily or use the ``-X "
"utf8`` command line option."
msgstr ""

#: ../../using/windows.rst:642
msgid ""
"Even when UTF-8 mode is disabled, Python uses UTF-8 by default on Windows "
"for:"
msgstr ""

#: ../../using/windows.rst:645
msgid "Console I/O including standard I/O (see :pep:`528` for details)."
msgstr ""

#: ../../using/windows.rst:646
msgid "The filesystem encoding (see :pep:`529` for details)."
msgstr ""

#: ../../using/windows.rst:652
msgid "Python Launcher for Windows"
msgstr ""

#: ../../using/windows.rst:656
msgid ""
"The Python launcher for Windows is a utility which aids in locating and "
"executing of different Python versions.  It allows scripts (or the command-"
"line) to indicate a preference for a specific Python version, and will "
"locate and execute that version."
msgstr ""

#: ../../using/windows.rst:661
msgid ""
"Unlike the :envvar:`PATH` variable, the launcher will correctly select the "
"most appropriate version of Python. It will prefer per-user installations "
"over system-wide ones, and orders by language version rather than using the "
"most recently installed version."
msgstr ""

#: ../../using/windows.rst:666
msgid "The launcher was originally specified in :pep:`397`."
msgstr ""

#: ../../using/windows.rst:669
msgid "Getting started"
msgstr ""

#: ../../using/windows.rst:672
msgid "From the command-line"
msgstr ""

#: ../../using/windows.rst:676
msgid ""
"System-wide installations of Python 3.3 and later will put the launcher on "
"your :envvar:`PATH`. The launcher is compatible with all available versions "
"of Python, so it does not matter which version is installed. To check that "
"the launcher is available, execute the following command in Command Prompt::"
msgstr ""

#: ../../using/windows.rst:683
msgid ""
"You should find that the latest version of Python you have installed is "
"started - it can be exited as normal, and any additional command-line "
"arguments specified will be sent directly to Python."
msgstr ""

#: ../../using/windows.rst:687
msgid ""
"If you have multiple versions of Python installed (e.g., 3.7 and |version|) "
"you will have noticed that Python |version| was started - to launch Python "
"3.7, try the command::"
msgstr ""

#: ../../using/windows.rst:693
msgid ""
"If you want the latest version of Python 2 you have installed, try the "
"command::"
msgstr ""

#: ../../using/windows.rst:698
msgid "You should find the latest version of Python 3.x starts."
msgstr ""

#: ../../using/windows.rst:700
msgid ""
"If you see the following error, you do not have the launcher installed::"
msgstr ""

#: ../../using/windows.rst:705
msgid ""
"Per-user installations of Python do not add the launcher to :envvar:`PATH` "
"unless the option was selected on installation."
msgstr ""

#: ../../using/windows.rst:708
msgid "The command::"
msgstr ""

#: ../../using/windows.rst:712
msgid "displays the currently installed version(s) of Python."
msgstr ""

#: ../../using/windows.rst:715
msgid "Virtual environments"
msgstr ""

#: ../../using/windows.rst:719
msgid ""
"If the launcher is run with no explicit Python version specification, and a "
"virtual environment (created with the standard library :mod:`venv` module or"
" the external ``virtualenv`` tool) active, the launcher will run the virtual"
" environment's interpreter rather than the global one.  To run the global "
"interpreter, either deactivate the virtual environment, or explicitly "
"specify the global Python version."
msgstr ""

#: ../../using/windows.rst:727
msgid "From a script"
msgstr ""

#: ../../using/windows.rst:729
msgid ""
"Let's create a test Python script - create a file called ``hello.py`` with "
"the following contents"
msgstr ""

#: ../../using/windows.rst:738
msgid "From the directory in which hello.py lives, execute the command::"
msgstr ""

#: ../../using/windows.rst:742
msgid ""
"You should notice the version number of your latest Python 2.x installation "
"is printed.  Now try changing the first line to be:"
msgstr ""

#: ../../using/windows.rst:749
msgid ""
"Re-executing the command should now print the latest Python 3.x information."
" As with the above command-line examples, you can specify a more explicit "
"version qualifier.  Assuming you have Python 3.7 installed, try changing the"
" first line to ``#! python3.7`` and you should find the |version| version "
"information printed."
msgstr ""

#: ../../using/windows.rst:755
msgid ""
"Note that unlike interactive use, a bare \"python\" will use the latest "
"version of Python 2.x that you have installed.  This is for backward "
"compatibility and for compatibility with Unix, where the command ``python`` "
"typically refers to Python 2."
msgstr ""

#: ../../using/windows.rst:761
msgid "From file associations"
msgstr ""

#: ../../using/windows.rst:763
msgid ""
"The launcher should have been associated with Python files (i.e. ``.py``, "
"``.pyw``, ``.pyc`` files) when it was installed.  This means that when you "
"double-click on one of these files from Windows explorer the launcher will "
"be used, and therefore you can use the same facilities described above to "
"have the script specify the version which should be used."
msgstr ""

#: ../../using/windows.rst:769
msgid ""
"The key benefit of this is that a single launcher can support multiple "
"Python versions at the same time depending on the contents of the first "
"line."
msgstr ""

#: ../../using/windows.rst:773
msgid "Shebang Lines"
msgstr ""

#: ../../using/windows.rst:775
msgid ""
"If the first line of a script file starts with ``#!``, it is known as a "
"\"shebang\" line.  Linux and other Unix like operating systems have native "
"support for such lines and they are commonly used on such systems to "
"indicate how a script should be executed.  This launcher allows the same "
"facilities to be used with Python scripts on Windows and the examples above "
"demonstrate their use."
msgstr ""

#: ../../using/windows.rst:782
msgid ""
"To allow shebang lines in Python scripts to be portable between Unix and "
"Windows, this launcher supports a number of 'virtual' commands to specify "
"which interpreter to use.  The supported virtual commands are:"
msgstr ""

#: ../../using/windows.rst:786
msgid "``/usr/bin/env python``"
msgstr ""

#: ../../using/windows.rst:787
msgid "``/usr/bin/python``"
msgstr ""

#: ../../using/windows.rst:788
msgid "``/usr/local/bin/python``"
msgstr ""

#: ../../using/windows.rst:789
msgid "``python``"
msgstr ""

#: ../../using/windows.rst:791
msgid "For example, if the first line of your script starts with"
msgstr ""

#: ../../using/windows.rst:797
msgid ""
"The default Python will be located and used.  As many Python scripts written"
" to work on Unix will already have this line, you should find these scripts "
"can be used by the launcher without modification.  If you are writing a new "
"script on Windows which you hope will be useful on Unix, you should use one "
"of the shebang lines starting with ``/usr``."
msgstr ""

#: ../../using/windows.rst:803
msgid ""
"Any of the above virtual commands can be suffixed with an explicit version "
"(either just the major version, or the major and minor version). Furthermore"
" the 32-bit version can be requested by adding \"-32\" after the minor "
"version. I.e. ``/usr/bin/python3.7-32`` will request usage of the 32-bit "
"python 3.7."
msgstr ""

#: ../../using/windows.rst:811
msgid ""
"Beginning with python launcher 3.7 it is possible to request 64-bit version "
"by the \"-64\" suffix. Furthermore it is possible to specify a major and "
"architecture without minor (i.e. ``/usr/bin/python3-64``)."
msgstr ""

#: ../../using/windows.rst:815
msgid ""
"The ``/usr/bin/env`` form of shebang line has one further special property. "
"Before looking for installed Python interpreters, this form will search the "
"executable :envvar:`PATH` for a Python executable. This corresponds to the "
"behaviour of the Unix ``env`` program, which performs a :envvar:`PATH` "
"search."
msgstr ""

#: ../../using/windows.rst:821
msgid "Arguments in shebang lines"
msgstr ""

#: ../../using/windows.rst:823
msgid ""
"The shebang lines can also specify additional options to be passed to the "
"Python interpreter.  For example, if you have a shebang line:"
msgstr ""

#: ../../using/windows.rst:830
msgid "Then Python will be started with the ``-v`` option"
msgstr ""

#: ../../using/windows.rst:833
msgid "Customization"
msgstr ""

#: ../../using/windows.rst:836
msgid "Customization via INI files"
msgstr ""

#: ../../using/windows.rst:838
msgid ""
"Two .ini files will be searched by the launcher - ``py.ini`` in the current "
"user's \"application data\" directory (i.e. the directory returned by "
"calling the Windows function ``SHGetFolderPath`` with "
"``CSIDL_LOCAL_APPDATA``) and ``py.ini`` in the same directory as the "
"launcher. The same .ini files are used for both the 'console' version of the"
" launcher (i.e. py.exe) and for the 'windows' version (i.e. pyw.exe)."
msgstr ""

#: ../../using/windows.rst:845
msgid ""
"Customization specified in the \"application directory\" will have "
"precedence over the one next to the executable, so a user, who may not have "
"write access to the .ini file next to the launcher, can override commands in"
" that global .ini file."
msgstr ""

#: ../../using/windows.rst:850
msgid "Customizing default Python versions"
msgstr ""

#: ../../using/windows.rst:852
msgid ""
"In some cases, a version qualifier can be included in a command to dictate "
"which version of Python will be used by the command. A version qualifier "
"starts with a major version number and can optionally be followed by a "
"period ('.') and a minor version specifier. Furthermore it is possible to "
"specify if a 32 or 64 bit implementation shall be requested by adding "
"\"-32\" or \"-64\"."
msgstr ""

#: ../../using/windows.rst:858
msgid ""
"For example, a shebang line of ``#!python`` has no version qualifier, while "
"``#!python3`` has a version qualifier which specifies only a major version."
msgstr ""

#: ../../using/windows.rst:861
msgid ""
"If no version qualifiers are found in a command, the environment variable "
":envvar:`PY_PYTHON` can be set to specify the default version qualifier. If "
"it is not set, the default is \"3\". The variable can specify any value that"
" may be passed on the command line, such as \"3\", \"3.7\", \"3.7-32\" or "
"\"3.7-64\". (Note that the \"-64\" option is only available with the "
"launcher included with Python 3.7 or newer.)"
msgstr ""

#: ../../using/windows.rst:868
msgid ""
"If no minor version qualifiers are found, the environment variable "
"``PY_PYTHON{major}`` (where ``{major}`` is the current major version "
"qualifier as determined above) can be set to specify the full version. If no"
" such option is found, the launcher will enumerate the installed Python "
"versions and use the latest minor release found for the major version, which"
" is likely, although not guaranteed, to be the most recently installed "
"version in that family."
msgstr ""

#: ../../using/windows.rst:876
msgid ""
"On 64-bit Windows with both 32-bit and 64-bit implementations of the same "
"(major.minor) Python version installed, the 64-bit version will always be "
"preferred. This will be true for both 32-bit and 64-bit implementations of "
"the launcher - a 32-bit launcher will prefer to execute a 64-bit Python "
"installation of the specified version if available. This is so the behavior "
"of the launcher can be predicted knowing only what versions are installed on"
" the PC and without regard to the order in which they were installed (i.e., "
"without knowing whether a 32 or 64-bit version of Python and corresponding "
"launcher was installed last). As noted above, an optional \"-32\" or \"-64\""
" suffix can be used on a version specifier to change this behaviour."
msgstr ""

#: ../../using/windows.rst:887
msgid "Examples:"
msgstr ""

#: ../../using/windows.rst:889
msgid ""
"If no relevant options are set, the commands ``python`` and ``python2`` will"
" use the latest Python 2.x version installed and the command ``python3`` "
"will use the latest Python 3.x installed."
msgstr ""

#: ../../using/windows.rst:893
msgid ""
"The command ``python3.7`` will not consult any options at all as the "
"versions are fully specified."
msgstr ""

#: ../../using/windows.rst:896
msgid ""
"If ``PY_PYTHON=3``, the commands ``python`` and ``python3`` will both use "
"the latest installed Python 3 version."
msgstr ""

#: ../../using/windows.rst:899
msgid ""
"If ``PY_PYTHON=3.7-32``, the command ``python`` will use the 32-bit "
"implementation of 3.7 whereas the command ``python3`` will use the latest "
"installed Python (PY_PYTHON was not considered at all as a major version was"
" specified.)"
msgstr ""

#: ../../using/windows.rst:904
msgid ""
"If ``PY_PYTHON=3`` and ``PY_PYTHON3=3.7``, the commands ``python`` and "
"``python3`` will both use specifically 3.7"
msgstr ""

#: ../../using/windows.rst:907
msgid ""
"In addition to environment variables, the same settings can be configured in"
" the .INI file used by the launcher.  The section in the INI file is called "
"``[defaults]`` and the key name will be the same as the environment "
"variables without the leading ``PY_`` prefix (and note that the key names in"
" the INI file are case insensitive.)  The contents of an environment "
"variable will override things specified in the INI file."
msgstr ""

#: ../../using/windows.rst:914
msgid "For example:"
msgstr ""

#: ../../using/windows.rst:916
msgid "Setting ``PY_PYTHON=3.7`` is equivalent to the INI file containing:"
msgstr ""

#: ../../using/windows.rst:923
msgid ""
"Setting ``PY_PYTHON=3`` and ``PY_PYTHON3=3.7`` is equivalent to the INI file"
" containing:"
msgstr ""

#: ../../using/windows.rst:933
msgid "Diagnostics"
msgstr ""

#: ../../using/windows.rst:935
msgid ""
"If an environment variable ``PYLAUNCH_DEBUG`` is set (to any value), the "
"launcher will print diagnostic information to stderr (i.e. to the console). "
"While this information manages to be simultaneously verbose *and* terse, it "
"should allow you to see what versions of Python were located, why a "
"particular version was chosen and the exact command-line used to execute the"
" target Python."
msgstr ""

#: ../../using/windows.rst:947
msgid "Finding modules"
msgstr ""

#: ../../using/windows.rst:949
msgid ""
"Python usually stores its library (and thereby your site-packages folder) in"
" the installation directory.  So, if you had installed Python to "
":file:`C:\\\\Python\\\\`, the default library would reside in "
":file:`C:\\\\Python\\\\Lib\\\\` and third-party modules should be stored in "
":file:`C:\\\\Python\\\\Lib\\\\site-packages\\\\`."
msgstr ""

#: ../../using/windows.rst:955
msgid ""
"To completely override :data:`sys.path`, create a ``._pth`` file with the "
"same name as the DLL (``python37._pth``) or the executable (``python._pth``)"
" and specify one line for each path to add to :data:`sys.path`. The file "
"based on the DLL name overrides the one based on the executable, which "
"allows paths to be restricted for any program loading the runtime if "
"desired."
msgstr ""

#: ../../using/windows.rst:961
msgid ""
"When the file exists, all registry and environment variables are ignored, "
"isolated mode is enabled, and :mod:`site` is not imported unless one line in"
" the file specifies ``import site``. Blank paths and lines starting with "
"``#`` are ignored. Each path may be absolute or relative to the location of "
"the file. Import statements other than to ``site`` are not permitted, and "
"arbitrary code cannot be specified."
msgstr ""

#: ../../using/windows.rst:968
msgid ""
"Note that ``.pth`` files (without leading underscore) will be processed "
"normally by the :mod:`site` module when ``import site`` has been specified."
msgstr ""

#: ../../using/windows.rst:971
msgid ""
"When no ``._pth`` file is found, this is how :data:`sys.path` is populated "
"on Windows:"
msgstr ""

#: ../../using/windows.rst:974
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr ""

#: ../../using/windows.rst:977
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in "
":ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""

#: ../../using/windows.rst:982
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of "
":samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` "
"under both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  "
"Subkeys which have semicolon-delimited path strings as their default value "
"will cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""

#: ../../using/windows.rst:989
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (either ``Lib\\os.py`` or ``pythonXY.zip``) to"
" deduce the \"Python Home\".  If a Python home is found, the relevant sub-"
"directories added to :data:`sys.path` (``Lib``, ``plat-win``, etc) are based"
" on that folder.  Otherwise, the core Python path is constructed from the "
"PythonPath stored in the registry."
msgstr ""

#: ../../using/windows.rst:997
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""

#: ../../using/windows.rst:1001
msgid ""
"If a ``pyvenv.cfg`` file is found alongside the main executable or in the "
"directory one level above the executable, the following variations apply:"
msgstr ""

#: ../../using/windows.rst:1004
msgid ""
"If ``home`` is an absolute path and :envvar:`PYTHONHOME` is not set, this "
"path is used instead of the path to the main executable when deducing the "
"home location."
msgstr ""

#: ../../using/windows.rst:1008
msgid "The end result of all this is:"
msgstr ""

#: ../../using/windows.rst:1010
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are"
" ignored.  Other \"application paths\" in the registry are always read."
msgstr ""

#: ../../using/windows.rst:1015
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""

#: ../../using/windows.rst:1019
msgid ""
"If Python can't find its home and there are no registry value (frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""

#: ../../using/windows.rst:1023
msgid ""
"For those who want to bundle Python into their application or distribution, "
"the following advice will prevent conflicts with other installations:"
msgstr ""

#: ../../using/windows.rst:1026
msgid ""
"Include a ``._pth`` file alongside your executable containing the "
"directories to include. This will ignore paths listed in the registry and "
"environment variables, and also ignore :mod:`site` unless ``import site`` is"
" listed."
msgstr ""

#: ../../using/windows.rst:1031
msgid ""
"If you are loading :file:`python3.dll` or :file:`python37.dll` in your own "
"executable, explicitly call :c:func:`Py_SetPath` or (at least) "
":c:func:`Py_SetProgramName` before :c:func:`Py_Initialize`."
msgstr ""

#: ../../using/windows.rst:1035
msgid ""
"Clear and/or overwrite :envvar:`PYTHONPATH` and set :envvar:`PYTHONHOME` "
"before launching :file:`python.exe` from your application."
msgstr ""

#: ../../using/windows.rst:1038
msgid ""
"If you cannot use the previous suggestions (for example, you are a "
"distribution that allows people to run :file:`python.exe` directly), ensure "
"that the landmark file (:file:`Lib\\\\os.py`) exists in your install "
"directory. (Note that it will not be detected inside a ZIP file, but a "
"correctly named ZIP file will be detected instead.)"
msgstr ""

#: ../../using/windows.rst:1044
msgid ""
"These will ensure that the files in a system-wide installation will not take"
" precedence over the copy of the standard library bundled with your "
"application. Otherwise, your users may experience problems using your "
"application. Note that the first suggestion is the best, as the others may "
"still be susceptible to non-standard paths in the registry and user site-"
"packages."
msgstr ""

#: ../../using/windows.rst:1053
msgid ""
"Adds ``._pth`` file support and removes ``applocal`` option from "
"``pyvenv.cfg``."
msgstr ""

#: ../../using/windows.rst:1055
msgid ""
"Adds ``pythonXX.zip`` as a potential landmark when directly adjacent to the "
"executable."
msgstr ""

#: ../../using/windows.rst:1061
msgid ""
"Modules specified in the registry under ``Modules`` (not ``PythonPath``) may"
" be imported by :class:`importlib.machinery.WindowsRegistryFinder`. This "
"finder is enabled on Windows in 3.6.0 and earlier, but may need to be "
"explicitly added to :attr:`sys.meta_path` in the future."
msgstr ""

#: ../../using/windows.rst:1067
msgid "Additional modules"
msgstr ""

#: ../../using/windows.rst:1069
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr ""

#: ../../using/windows.rst:1073
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-"
"specific-services`."
msgstr ""

#: ../../using/windows.rst:1077
msgid "PyWin32"
msgstr ""

#: ../../using/windows.rst:1079
msgid ""
"The `PyWin32 <https://pypi.org/project/pywin32>`_ module by Mark Hammond is "
"a collection of modules for advanced Windows-specific support.  This "
"includes utilities for:"
msgstr ""

#: ../../using/windows.rst:1083
msgid ""
"`Component Object Model <https://docs.microsoft.com/en-"
"us/windows/win32/com/component-object-model--com--portal>`_ (COM)"
msgstr ""

#: ../../using/windows.rst:1086
msgid "Win32 API calls"
msgstr ""

#: ../../using/windows.rst:1087
msgid "Registry"
msgstr ""

#: ../../using/windows.rst:1088
msgid "Event log"
msgstr ""

#: ../../using/windows.rst:1089
msgid ""
"`Microsoft Foundation Classes <https://docs.microsoft.com/en-us/cpp/mfc/mfc-"
"desktop-applications>`_ (MFC) user interfaces"
msgstr ""

#: ../../using/windows.rst:1093
msgid ""
"`PythonWin <https://web.archive.org/web/20060524042422/ "
"https://www.python.org/windows/pythonwin/>`_ is a sample MFC application "
"shipped with PyWin32.  It is an embeddable IDE with a built-in debugger."
msgstr ""

#: ../../using/windows.rst:1100
msgid ""
"`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""

#: ../../using/windows.rst:1100
msgid "by Tim Golden"
msgstr ""

#: ../../using/windows.rst:1102
msgid "`Python and COM <https://www.boddie.org.uk/python/COM.html>`_"
msgstr ""

#: ../../using/windows.rst:1103
msgid "by David and Paul Boddie"
msgstr ""

#: ../../using/windows.rst:1107
msgid "cx_Freeze"
msgstr ""

#: ../../using/windows.rst:1109
msgid ""
"`cx_Freeze <https://cx-freeze.readthedocs.io/en/latest/>`_ is a "
":mod:`distutils` extension (see :ref:`extending-distutils`) which wraps "
"Python scripts into executable Windows programs (:file:`{*}.exe` files).  "
"When you have done this, you can distribute your application without "
"requiring your users to install Python."
msgstr ""

#: ../../using/windows.rst:1117
msgid "Compiling Python on Windows"
msgstr ""

#: ../../using/windows.rst:1119
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `checkout "
"<https://devguide.python.org/setup/#getting-the-source-code>`_."
msgstr ""

#: ../../using/windows.rst:1124
msgid ""
"The source tree contains a build solution and project files for Microsoft "
"Visual Studio, which is the compiler used to build the official Python "
"releases. These files are in the :file:`PCbuild` directory."
msgstr ""

#: ../../using/windows.rst:1128
msgid ""
"Check :file:`PCbuild/readme.txt` for general information on the build "
"process."
msgstr ""

#: ../../using/windows.rst:1130
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""

#: ../../using/windows.rst:1134
msgid "Other Platforms"
msgstr ""

#: ../../using/windows.rst:1136
msgid ""
"With ongoing development of Python, some platforms that used to be supported"
" earlier are no longer supported (due to the lack of users or developers). "
"Check :pep:`11` for details on all unsupported platforms."
msgstr ""

#: ../../using/windows.rst:1140
msgid ""
"`Windows CE <http://pythonce.sourceforge.net/>`_ is `no longer supported "
"<https://github.com/python/cpython/issues/71542>`__ since Python 3 (if it "
"ever was)."
msgstr ""

#: ../../using/windows.rst:1143
msgid ""
"The `Cygwin <https://cygwin.com/>`_ installer offers to install the `Python "
"interpreter <https://cygwin.com/packages/summary/python3.html>`__ as well"
msgstr ""

#: ../../using/windows.rst:1147
msgid ""
"See `Python for Windows <https://www.python.org/downloads/windows/>`_ for "
"detailed information about platforms with pre-compiled installers."
msgstr ""
