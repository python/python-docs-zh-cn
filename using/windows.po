# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-05 15:15+0000\n"
"PO-Revision-Date: 2025-07-18 19:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/windows.rst:7
msgid "Using Python on Windows"
msgstr "在Windows上使用 Python"

#: ../../using/windows.rst:12
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr "本文档旨在概述在 Microsoft Windows 上使用 Python 时应了解的特定于 Windows 的行为。"

#: ../../using/windows.rst:15
msgid ""
"Unlike most Unix systems and services, Windows does not include a system "
"supported installation of Python. To make Python available, the CPython team"
" has compiled Windows installers with every `release "
"<https://www.python.org/downloads/>`_ for many years. These installers are "
"primarily intended to add a per-user installation of Python, with the core "
"interpreter and library being used by a single user. The installer is also "
"able to install for all users of a single machine, and a separate ZIP file "
"is available for application-local distributions."
msgstr ""
"不同于大多数 Unix 系统和服务，Windows 未包括任何受系统支持的 Python 预安装版。 为了让 Python 可用，多年以来 "
"CPython 团队为每个 `发布版 <https://www.python.org/downloads/>`_ 编译了 Windows 安装程序。 "
"这些安装程序主要被用来安装用户级 Python 安装版，包含供单独用户使用的核心解释器和库。 "
"安装程序也能够为单台机器上的所有用户进行安装，还提供了针对应用程序本地分发版的单独 ZIP 文件。"

#: ../../using/windows.rst:24
msgid ""
"As specified in :pep:`11`, a Python release only supports a Windows platform"
" while Microsoft considers the platform under extended support. This means "
"that Python |version| supports Windows 8.1 and newer. If you require Windows"
" 7 support, please install Python 3.8."
msgstr ""
"如 :pep:`11` 所述，Python 发布版对某个 Windows 平台的支持仅限于被 Microsoft 视为处于延长支持周期内的版本。 "
"这意味着 Python |version| 支持 Windows 8.1 及其后的版本。 如果你需要 Windows 7 支持，请安装 Python "
"3.8。"

#: ../../using/windows.rst:29
msgid ""
"There are a number of different installers available for Windows, each with "
"certain benefits and downsides."
msgstr "Windows提供了许多不同的安装程序，每个安装程序都有一定的优点和缺点。"

#: ../../using/windows.rst:32
msgid ""
":ref:`windows-full` contains all components and is the best option for "
"developers using Python for any kind of project."
msgstr ":ref:`windows-full` 内含所有组件，对于使用Python 进行任何类型项目的开发人员而言，它是最佳选择。"

#: ../../using/windows.rst:35
msgid ""
":ref:`windows-store` is a simple installation of Python that is suitable for"
" running scripts and packages, and using IDLE or other development "
"environments. It requires Windows 10 and above, but can be safely installed "
"without corrupting other programs. It also provides many convenient commands"
" for launching Python and its tools."
msgstr ""
":ref:`windows-store` 是一个适用于运行脚本和包，并使用 IDLE 或其他开发环境的简易 Python 安装版。 它需要 "
"Windows 10 或更新的系统，但可以安全地安装而不会破坏其他程序。 它还提供了许多便捷命令用来启动 Python 及其工具。"

#: ../../using/windows.rst:41
msgid ""
":ref:`windows-nuget` are lightweight installations intended for continuous "
"integration systems. It can be used to build Python packages or run scripts,"
" but is not updateable and has no user interface tools."
msgstr ""
":ref:`windows-nuget` 是用于持续集成系统的轻量级安装。它可用于构建Python包或运行脚本，但不可更新且没有用户界面工具。"

#: ../../using/windows.rst:45
msgid ""
":ref:`windows-embeddable` is a minimal package of Python suitable for "
"embedding into a larger application."
msgstr ":ref:`windows-embeddable` 是Python的最小安装包，适合嵌入到更大的应用程序中。"

#: ../../using/windows.rst:52
msgid "The full installer"
msgstr "完整安装程序"

#: ../../using/windows.rst:55
msgid "Installation steps"
msgstr "安装步骤"

#: ../../using/windows.rst:57
msgid ""
"Four Python |version| installers are available for download - two each for "
"the 32-bit and 64-bit versions of the interpreter. The *web installer* is a "
"small initial download, and it will automatically download the required "
"components as necessary. The *offline installer* includes the components "
"necessary for a default installation and only requires an internet "
"connection for optional features. See :ref:`install-layout-option` for other"
" ways to avoid downloading during installation."
msgstr ""
"四个 Python |version| 安装程序可供下载 - 32位和64位版本的各有两个。 *web installer* "
"（网络安装包）是一个小的初始化工具，它将在安装过程中，根据需要自动下载所需的组件。 *offline installer* "
"（离线安装包）内含默认安装所需的组件，可选择功能仍需要Internet连接下载。请参阅 :ref:`install-layout-option` "
"以了解在安装过程中避免下载的其他方法。"

#: ../../using/windows.rst:65
msgid "After starting the installer, one of two options may be selected:"
msgstr "启动安装程序后，可以选择以下两个选项之一："

#: ../../using/windows.rst:69
msgid "If you select \"Install Now\":"
msgstr "如果选择“Install Now（立即安装）”："

#: ../../using/windows.rst:71
msgid ""
"You will *not* need to be an administrator (unless a system update for the C"
" Runtime Library is required or you install the :ref:`launcher` for all "
"users)"
msgstr "您 *不* 需要成为管理员（除非需要对C运行库进行系统更新，或者为所有用户安装 :ref:`launcher` ）"

#: ../../using/windows.rst:74
msgid "Python will be installed into your user directory"
msgstr "Python将安装到您的用户目录中"

#: ../../using/windows.rst:75
msgid ""
"The :ref:`launcher` will be installed according to the option at the bottom "
"of the first page"
msgstr ":ref:`launcher` 将根据第一页底部的选项安装"

#: ../../using/windows.rst:77
msgid "The standard library, test suite, launcher and pip will be installed"
msgstr "将安装标准库，测试套件，启动器和pip"

#: ../../using/windows.rst:78
msgid ""
"If selected, the install directory will be added to your :envvar:`PATH`"
msgstr "如果选择将安装目录将添加到 :envvar:`PATH`"

#: ../../using/windows.rst:79
msgid "Shortcuts will only be visible for the current user"
msgstr "快捷方式仅对当前用户可见"

#: ../../using/windows.rst:81
msgid ""
"Selecting \"Customize installation\" will allow you to select the features "
"to install, the installation location and other options or post-install "
"actions. To install debugging symbols or binaries, you will need to use this"
" option."
msgstr "选择“自定义安装”将允许您选择：要安装的功能、安装位置、其他选项或安装后的操作。如果要安装调试符号或二进制文件，您需要使用此选项。"

#: ../../using/windows.rst:85
msgid ""
"To perform an all-users installation, you should select \"Customize "
"installation\". In this case:"
msgstr "如要为全部用户安装，应选择“自定义安装”。在这种情况下:"

#: ../../using/windows.rst:88
msgid "You may be required to provide administrative credentials or approval"
msgstr "您可能需要提供管理凭据或批准"

#: ../../using/windows.rst:89
msgid "Python will be installed into the Program Files directory"
msgstr "Python 将安装到Program Files目录中"

#: ../../using/windows.rst:90
msgid "The :ref:`launcher` will be installed into the Windows directory"
msgstr ":ref:`launcher` 将安装到Windows目录中"

#: ../../using/windows.rst:91
msgid "Optional features may be selected during installation"
msgstr "安装期间可以选择可选功能"

#: ../../using/windows.rst:92
msgid "The standard library can be pre-compiled to bytecode"
msgstr "标准库可以预编译为字节码"

#: ../../using/windows.rst:93
msgid ""
"If selected, the install directory will be added to the system "
":envvar:`PATH`"
msgstr "如果选中，安装目录将添加到系统 :envvar:`PATH`"

#: ../../using/windows.rst:94
msgid "Shortcuts are available for all users"
msgstr "快捷方式所有用户可用"

#: ../../using/windows.rst:99
msgid "Removing the MAX_PATH Limitation"
msgstr "删除 MAX_PATH 限制"

#: ../../using/windows.rst:101
msgid ""
"Windows historically has limited path lengths to 260 characters. This meant "
"that paths longer than this would not resolve and errors would result."
msgstr "历史上Windows的路径长度限制为260个字符。这意味着长于此的路径将无法解决并导致错误。"

#: ../../using/windows.rst:104
msgid ""
"In the latest versions of Windows, this limitation can be expanded to "
"approximately 32,000 characters. Your administrator will need to activate "
"the \"Enable Win32 long paths\" group policy, or set ``LongPathsEnabled`` to"
" ``1`` in the registry key "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem``."
msgstr ""
"在最新版本的 Windows 中，此限制可被扩展到大约 32,000 个字符。 但需要让管理员激活“启用 Win32 长路径”组策略，或在注册表键 "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem`` 中设置 "
"``LongPathsEnabled`` 为 ``1``。"

#: ../../using/windows.rst:110
msgid ""
"This allows the :func:`open` function, the :mod:`os` module and most other "
"path functionality to accept and return paths longer than 260 characters."
msgstr "这允许 :func:`open` 函数，:mod:`os` 模块和大多数其他路径功能接受并返回长度超过 260 个字符的路径。"

#: ../../using/windows.rst:113
msgid "After changing the above option, no further configuration is required."
msgstr "更改上述选项后，无需进一步配置。"

#: ../../using/windows.rst:117
msgid "Support for long paths was enabled in Python."
msgstr "Python中启用了对长路径的支持。"

#: ../../using/windows.rst:122
msgid "Installing Without UI"
msgstr "无UI 安装"

#: ../../using/windows.rst:124
msgid ""
"All of the options available in the installer UI can also be specified from "
"the command line, allowing scripted installers to replicate an installation "
"on many machines without user interaction.  These options may also be set "
"without suppressing the UI in order to change some of the defaults."
msgstr ""
"安装程序UI中的所有选项也可以从命令行指定，允许脚本安装程序在许多机器上复制安装，而无需用户交互。还可以在不禁用UI的情况下设置这些选项，以更改一些默认值。"

#: ../../using/windows.rst:129
msgid ""
"The following options (found by executing the installer with ``/?``) can be "
"passed into the installer:"
msgstr "下列选项（通过附带 ``/?`` 执行安装器来查看）可被传给安装器:"

#: ../../using/windows.rst:133 ../../using/windows.rst:153
#: ../../using/windows.rst:1150
msgid "Name"
msgstr "名称"

#: ../../using/windows.rst:133 ../../using/windows.rst:153
#: ../../using/windows.rst:1150
msgid "Description"
msgstr "描述"

#: ../../using/windows.rst:135
msgid "/passive"
msgstr "/passive"

#: ../../using/windows.rst:135
msgid "to display progress without requiring user interaction"
msgstr "显示进度而无需用户交互"

#: ../../using/windows.rst:137
msgid "/quiet"
msgstr "/quiet"

#: ../../using/windows.rst:137
msgid "to install/uninstall without displaying any UI"
msgstr "安装/卸载时不显示任何 UI"

#: ../../using/windows.rst:139
msgid "/simple"
msgstr "/simple"

#: ../../using/windows.rst:139
msgid "to prevent user customization"
msgstr "防止用户定制"

#: ../../using/windows.rst:141
msgid "/uninstall"
msgstr "/uninstall"

#: ../../using/windows.rst:141
msgid "to remove Python (without confirmation)"
msgstr "移除 Python（无需确认）"

#: ../../using/windows.rst:143
msgid "/layout [directory]"
msgstr "/layout [directory]"

#: ../../using/windows.rst:143
msgid "to pre-download all components"
msgstr "预下载所有组件"

#: ../../using/windows.rst:145
msgid "/log [filename]"
msgstr "/log [filename]"

#: ../../using/windows.rst:145
msgid "to specify log files location"
msgstr "指定日志记录文件位置"

#: ../../using/windows.rst:148
msgid ""
"All other options are passed as ``name=value``, where the value is usually "
"``0`` to disable a feature, ``1`` to enable a feature, or a path. The full "
"list of available options is shown below."
msgstr ""
"所有其他选项都传递为 ``name=value`` ，其中值通常是 ``0`` 来禁用某个特性， ``1`` "
"来启用某个特性或路径。可用选项的完整列表如下所示。"

#: ../../using/windows.rst:153
msgid "Default"
msgstr "默认值"

#: ../../using/windows.rst:155
msgid "InstallAllUsers"
msgstr "InstallAllUsers"

#: ../../using/windows.rst:155
msgid "Perform a system-wide installation."
msgstr "为所有用户安装。"

#: ../../using/windows.rst:155 ../../using/windows.rst:181
#: ../../using/windows.rst:184 ../../using/windows.rst:188
#: ../../using/windows.rst:197 ../../using/windows.rst:219
#: ../../using/windows.rst:227 ../../using/windows.rst:230
msgid "0"
msgstr "0"

#: ../../using/windows.rst:157
msgid "TargetDir"
msgstr "TargetDir"

#: ../../using/windows.rst:157
msgid "The installation directory"
msgstr "安装目录"

#: ../../using/windows.rst:157
msgid "Selected based on InstallAllUsers"
msgstr "基于InstallAllUsers选择"

#: ../../using/windows.rst:160
msgid "DefaultAllUsersTargetDir"
msgstr "DefaultAllUsersTargetDir"

#: ../../using/windows.rst:160
msgid "The default installation directory for all-user installs"
msgstr "为所有用户安装时的默认安装路径"

#: ../../using/windows.rst:160
msgid ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` or :file:`\\ "
"%ProgramFiles(x86)%\\\\\\ Python X.Y`"
msgstr ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` 或 :file:`\\ "
"%ProgramFiles(x86)%\\\\\\ Python X.Y`"

#: ../../using/windows.rst:165
msgid "DefaultJustForMeTargetDir"
msgstr "DefaultJustForMeTargetDir"

#: ../../using/windows.rst:165
msgid "The default install directory for just-for-me installs"
msgstr "仅为当前用户安装时的默认安装路径"

#: ../../using/windows.rst:165
msgid ""
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY` or "
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY-32` or "
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY-64`"
msgstr ""
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY` 或 "
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY-32` 或 "
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY-64`"

#: ../../using/windows.rst:175
msgid "DefaultCustomTargetDir"
msgstr "DefaultCustomTargetDir"

#: ../../using/windows.rst:175
msgid "The default custom install directory displayed in the UI"
msgstr "UI中显示的默认自定义安装目录"

#: ../../using/windows.rst:175 ../../using/windows.rst:232
msgid "(empty)"
msgstr "（空）"

#: ../../using/windows.rst:178
msgid "AssociateFiles"
msgstr "AssociateFiles"

#: ../../using/windows.rst:178
msgid "Create file associations if the launcher is also installed."
msgstr "如果还安装了启动器，则创建文件关联。"

#: ../../using/windows.rst:178 ../../using/windows.rst:192
#: ../../using/windows.rst:195 ../../using/windows.rst:199
#: ../../using/windows.rst:203 ../../using/windows.rst:207
#: ../../using/windows.rst:209 ../../using/windows.rst:213
#: ../../using/windows.rst:217 ../../using/windows.rst:221
#: ../../using/windows.rst:223 ../../using/windows.rst:225
msgid "1"
msgstr "1"

#: ../../using/windows.rst:181
msgid "CompileAll"
msgstr "CompileAll"

#: ../../using/windows.rst:181
msgid "Compile all ``.py`` files to ``.pyc``."
msgstr "将所有 ``.py`` 文件编译为 ``.pyc`` 。"

#: ../../using/windows.rst:184
msgid "PrependPath"
msgstr "PrependPath"

#: ../../using/windows.rst:184
msgid ""
"Prepend install and Scripts directories  to :envvar:`PATH` and add ``.PY`` "
"to :envvar:`PATHEXT`"
msgstr "将安装和脚本目录添加到 :envvar:`PATH` 并将 ``.PY`` 添加到 :envvar:`PATHEXT`"

#: ../../using/windows.rst:188
msgid "AppendPath"
msgstr "AppendPath"

#: ../../using/windows.rst:188
msgid ""
"Append install and Scripts directories  to :envvar:`PATH` and add ``.PY`` to"
" :envvar:`PATHEXT`"
msgstr "将安装和脚本目录添加到 :envvar:`PATH` 并将 ``.PY`` 添加到 :envvar:`PATHEXT`"

#: ../../using/windows.rst:192
msgid "Shortcuts"
msgstr "Shortcuts"

#: ../../using/windows.rst:192
msgid ""
"Create shortcuts for the interpreter, documentation and IDLE if installed."
msgstr "如果已安装，为解释器，文档和IDLE创建快捷方式"

#: ../../using/windows.rst:195
msgid "Include_doc"
msgstr "Include_doc"

#: ../../using/windows.rst:195
msgid "Install Python manual"
msgstr "安装Python手册"

#: ../../using/windows.rst:197
msgid "Include_debug"
msgstr "Include_debug"

#: ../../using/windows.rst:197
msgid "Install debug binaries"
msgstr "安装调试二进制文件"

#: ../../using/windows.rst:199
msgid "Include_dev"
msgstr "Include_dev"

#: ../../using/windows.rst:199
msgid ""
"Install developer headers and libraries. Omitting this may lead to an "
"unusable installation."
msgstr "安装开发者头文件和库文件。 省略这一步可能导致安装不可用。"

#: ../../using/windows.rst:203
msgid "Include_exe"
msgstr "Include_exe"

#: ../../using/windows.rst:203
msgid ""
"Install :file:`python.exe` and related files. Omitting this may lead to an "
"unusable installation."
msgstr "安装 :file:`python.exe` 以及相关文件。忽略此项可能会导致安装不可用。"

#: ../../using/windows.rst:207
msgid "Include_launcher"
msgstr "Include_launcher"

#: ../../using/windows.rst:207
msgid "Install :ref:`launcher`."
msgstr "安装 :ref:`launcher` ."

#: ../../using/windows.rst:209
msgid "InstallLauncherAllUsers"
msgstr "InstallLauncherAllUsers"

#: ../../using/windows.rst:209
msgid ""
"Installs the launcher for all users. Also requires ``Include_launcher`` to "
"be set to 1"
msgstr "为所有用户安装启动器。还需要 ``Include_launcher`` 被设定为1"

#: ../../using/windows.rst:213
msgid "Include_lib"
msgstr "Include_lib"

#: ../../using/windows.rst:213
msgid ""
"Install standard library and extension modules. Omitting this may lead to an"
" unusable installation."
msgstr "安装标准库和扩展模块。 省略这一步可能导致安装不可用。"

#: ../../using/windows.rst:217
msgid "Include_pip"
msgstr "Include_pip"

#: ../../using/windows.rst:217
msgid "Install bundled pip and setuptools"
msgstr "安装捆绑的pip和setuptools"

#: ../../using/windows.rst:219
msgid "Include_symbols"
msgstr "Include_symbols"

#: ../../using/windows.rst:219
msgid "Install debugging symbols (``*.pdb``)"
msgstr "安装调试符号集 (``*.pdb``)"

#: ../../using/windows.rst:221
msgid "Include_tcltk"
msgstr "Include_tcltk"

#: ../../using/windows.rst:221
msgid "Install Tcl/Tk support and IDLE"
msgstr "安装Tcl/Tk 支持和IDLE"

#: ../../using/windows.rst:223
msgid "Include_test"
msgstr "Include_test"

#: ../../using/windows.rst:223
msgid "Install standard library test suite"
msgstr "安装标准库测试套件"

#: ../../using/windows.rst:225
msgid "Include_tools"
msgstr "Include_tools"

#: ../../using/windows.rst:225
msgid "Install utility scripts"
msgstr "安装实用程序脚本"

#: ../../using/windows.rst:227
msgid "LauncherOnly"
msgstr "LauncherOnly"

#: ../../using/windows.rst:227
msgid "Only installs the launcher. This will override most other options."
msgstr "仅安装启动器。这将覆盖大多数其他选项。"

#: ../../using/windows.rst:230
msgid "SimpleInstall"
msgstr "SimpleInstall"

#: ../../using/windows.rst:230
msgid "Disable most install UI"
msgstr "禁用大多数安装UI"

#: ../../using/windows.rst:232
msgid "SimpleInstallDescription"
msgstr "SimpleInstallDescription"

#: ../../using/windows.rst:232
msgid "A custom message to display when the simplified install UI is used."
msgstr "使用简化安装UI时显示的自定义消息。"

#: ../../using/windows.rst:236
msgid ""
"For example, to silently install a default, system-wide Python installation,"
" you could use the following command (from an elevated command prompt)::"
msgstr "例如，要以静默方式全局安装默认的Python，您可以（在命令提示符>）使用以下命令::"

#: ../../using/windows.rst:239
msgid "python-3.9.0.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0"
msgstr ""
"python-3.9.0.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0"

#: ../../using/windows.rst:241
msgid ""
"To allow users to easily install a personal copy of Python without the test "
"suite, you could provide a shortcut with the following command. This will "
"display a simplified initial page and disallow customization::"
msgstr "要允许用户在没有测试套件的情况下轻松安装Python的个人副本，可以使用以下命令提供快捷方式。这将显示一个简化的初始页面，不允许自定义::"

#: ../../using/windows.rst:245
msgid ""
"python-3.9.0.exe InstallAllUsers=0 Include_launcher=0 Include_test=0\n"
"    SimpleInstall=1 SimpleInstallDescription=\"Just for me, no test suite.\""
msgstr ""
"python-3.9.0.exe InstallAllUsers=0 Include_launcher=0 Include_test=0\n"
"    SimpleInstall=1 SimpleInstallDescription=\"Just for me, no test suite.\""

#: ../../using/windows.rst:248
msgid ""
"(Note that omitting the launcher also omits file associations, and is only "
"recommended for per-user installs when there is also a system-wide "
"installation that included the launcher.)"
msgstr "（请注意，省略启动器也会省略文件关联，并且仅在全局安装包含启动器时才建议用于每用户安装。）"

#: ../../using/windows.rst:252
msgid ""
"The options listed above can also be provided in a file named "
"``unattend.xml`` alongside the executable. This file specifies a list of "
"options and values. When a value is provided as an attribute, it will be "
"converted to a number if possible. Values provided as element text are "
"always left as strings. This example file sets the same options as the "
"previous example:"
msgstr ""
"上面列出的选项也可以在一个名为 ``unattend.xml`` "
"的文件中与可执行文件一起提供。此文件指定选项和值的列表。作为属性提供的值，（如果可能）它将转换为数字。作为文本提供的值，始终保留为字符串。此示例文件设置与上一示例采用相同的选项："

#: ../../using/windows.rst:258
msgid ""
"<Options>\n"
"    <Option Name=\"InstallAllUsers\" Value=\"no\" />\n"
"    <Option Name=\"Include_launcher\" Value=\"0\" />\n"
"    <Option Name=\"Include_test\" Value=\"no\" />\n"
"    <Option Name=\"SimpleInstall\" Value=\"yes\" />\n"
"    <Option Name=\"SimpleInstallDescription\">Just for me, no test suite</Option>\n"
"</Options>"
msgstr ""
"<Options>\n"
"    <Option Name=\"InstallAllUsers\" Value=\"no\" />\n"
"    <Option Name=\"Include_launcher\" Value=\"0\" />\n"
"    <Option Name=\"Include_test\" Value=\"no\" />\n"
"    <Option Name=\"SimpleInstall\" Value=\"yes\" />\n"
"    <Option Name=\"SimpleInstallDescription\">Just for me, no test suite</Option>\n"
"</Options>"

#: ../../using/windows.rst:271
msgid "Installing Without Downloading"
msgstr "免下载安装"

#: ../../using/windows.rst:273
msgid ""
"As some features of Python are not included in the initial installer "
"download, selecting those features may require an internet connection.  To "
"avoid this need, all possible components may be downloaded on-demand to "
"create a complete *layout* that will no longer require an internet "
"connection regardless of the selected features. Note that this download may "
"be bigger than required, but where a large number of installations are going"
" to be performed it is very useful to have a locally cached copy."
msgstr ""
"由于下载的初始安装包中未包含Python的某些可选功能，如果选择安装这些功能可能需要Internet连接。为了避免这种需要，可以按需下载所有可能的组件，以创建一个完整的布局，该布局将不再需要internet连接，而不管所选择的特性是什么。请注意，此下载可能比要求的要大，但是如果要执行大量安装，则拥有本地缓存​​的副本非常有用。"

#: ../../using/windows.rst:281
msgid ""
"Execute the following command from Command Prompt to download all possible "
"required files.  Remember to substitute ``python-3.9.0.exe`` for the actual "
"name of your installer, and to create layouts in their own directories to "
"avoid collisions between files with the same name."
msgstr ""
"从命令提示符执行以下命令以下载所有可能的必需文件。 请记得要将 ``python-3.9.0.exe`` "
"替换为安装程序的实际名称，并在单独的目录中创建子目录以避免同名文件间的冲突。"

#: ../../using/windows.rst:288
msgid "python-3.9.0.exe /layout [optional target directory]"
msgstr "python-3.9.0.exe /layout [可选的目标目录]"

#: ../../using/windows.rst:290
msgid ""
"You may also specify the ``/quiet`` option to hide the progress display."
msgstr "您也可以指定 ``/quiet`` 选项来隐藏进度显示。"

#: ../../using/windows.rst:293
msgid "Modifying an install"
msgstr "修改安装"

#: ../../using/windows.rst:295
msgid ""
"Once Python has been installed, you can add or remove features through the "
"Programs and Features tool that is part of Windows. Select the Python entry "
"and choose \"Uninstall/Change\" to open the installer in maintenance mode."
msgstr ""
"安装Python后，您可以通过Windows中的“程序和功能”工具添加或删除功能。选择Python条目并选择“卸载/更改”以在维护模式下打开安装程序。"

#: ../../using/windows.rst:299
msgid ""
"\"Modify\" allows you to add or remove features by modifying the checkboxes "
"- unchanged checkboxes will not install or remove anything. Some options "
"cannot be changed in this mode, such as the install directory; to modify "
"these, you will need to remove and then reinstall Python completely."
msgstr ""
"“修改” 允许您通过修改复选框来添加或删除功能 - "
"未更改的复选框将不会安装或删除任何内容。在此模式下无法更改某些选项，例如安装目录；要修改这些，您需要完全删除然后重新安装Python。"

#: ../../using/windows.rst:304
msgid ""
"\"Repair\" will verify all the files that should be installed using the "
"current settings and replace any that have been removed or modified."
msgstr "“修复” 将使用当前设置验证应安装的所有文件，并替换已删除或修改的任何文件"

#: ../../using/windows.rst:307
msgid ""
"\"Uninstall\" will remove Python entirely, with the exception of the "
":ref:`launcher`, which has its own entry in Programs and Features."
msgstr "“卸载” 将完全删除Python，但 :ref:`launcher` 除外，它在“程序和功能”中有自己的条目。"

#: ../../using/windows.rst:313
msgid "Installing Free-threaded Binaries"
msgstr "安装自由线程二进制文件"

#: ../../using/windows.rst:315 ../../using/windows.rst:501
msgid "(Experimental)"
msgstr "（试验性功能）"

#: ../../using/windows.rst:319 ../../using/windows.rst:505
msgid ""
"Everything described in this section is considered experimental, and should "
"be expected to change in future releases."
msgstr "本节中描述的所有内容都是试验性的，它们预计会在未来的发布版中发生改变。"

#: ../../using/windows.rst:322
msgid ""
"To install pre-built binaries with free-threading enabled (see :pep:`703`), "
"you should select \"Customize installation\". The second page of options "
"includes the \"Download free-threaded binaries\" checkbox."
msgstr ""
"要安装启用了自由线程的预编译版二进制文件 (参见 :pep:`703`)，你应当选择 \"Customize installation\"。 "
"在第二个选项页中包括了 \"Download free-threaded binaries\" 复选框。"

#: ../../using/windows.rst:328
msgid ""
"Selecting this option will download and install additional binaries to the "
"same location as the main Python install. The main executable is called "
"``python3.13t.exe``, and other binaries either receive a ``t`` suffix or a "
"full ABI suffix. Python source files and bundled third-party dependencies "
"are shared with the main install."
msgstr ""
"选择此选项将下载并将额外的二进制文件安装到与 Python 主安装版本相同的目录下。 主可执行文件的名称为 "
"``python3.13t.exe``，而其他二进制文件将带有 ``t`` 前缀或完整的 ABI 前缀。 Python "
"源文件和捆绑的第三方依赖将与主安装版本共享。"

#: ../../using/windows.rst:334
msgid ""
"The free-threaded version is registered as a regular Python install with the"
" tag ``3.13t`` (with a ``-32`` or ``-arm64`` suffix as normal for those "
"platforms). This allows tools to discover it, and for the :ref:`launcher` to"
" support ``py.exe -3.13t``. Note that the launcher will interpret ``py.exe "
"-3`` (or a ``python3`` shebang) as \"the latest 3.x install\", which will "
"prefer the free-threaded binaries over the regular ones, while ``py.exe "
"-3.13`` will not. If you use the short style of option, you may prefer to "
"not install the free-threaded binaries at this time."
msgstr ""
"自由线程版将被注册为具有 ``3.13t`` 标签的常规 Python 安装版（并会按相应系统平台的惯例附带 ``-32`` 或 ``-arm64`` "
"后缀）。 这使得各种工具能够找到它，并使得 :ref:`launcher` 能够支持 ``py.exe -3.13t``。 请注意 launcher "
"会将 ``py.exe -3`` (或 ``python3`` shebang 行) 解读为“最新的 3.x "
"安装版”，这将使得自由线程版二进制文件优先于常规版，而 ``py.exe -3.13`` 则会使用常规版。 "
"如果你要使用简短风格的选项，那么目前你应该选择不安装自由线程版二进制文件。"

#: ../../using/windows.rst:343
msgid ""
"To specify the install option at the command line, use "
"``Include_freethreaded=1``. See :ref:`install-layout-option` for "
"instructions on pre-emptively downloading the additional binaries for "
"offline install. The options to include debug symbols and binaries also "
"apply to the free-threaded builds."
msgstr ""
"要在命令行中指定安装选项，请使用 ``Include_freethreaded=1``。 请参阅 :ref:`install-layout-"
"option` 获取有关预先下载额外二进制文件供离线安装的指导。 包括调试符号和二进制文件的选项也同样适用于自由线程构建版。"

#: ../../using/windows.rst:349
msgid ""
"Free-threaded binaries are also available :ref:`on nuget.org <windows-"
"nuget>`."
msgstr "自由线程版二进制文件也可 :ref:`在 nuget.org <windows-nuget>` 获取。"

#: ../../using/windows.rst:354
msgid "The Microsoft Store package"
msgstr "Microsoft Store包"

#: ../../using/windows.rst:358
msgid ""
"The Microsoft Store package is an easily installable Python interpreter that"
" is intended mainly for interactive use, for example, by students."
msgstr "Microsoft Store 包是一个易于安装的 Python 解释器，主要针对在交互模式下使用，例如用于教学。"

#: ../../using/windows.rst:361
msgid ""
"To install the package, ensure you have the latest Windows 10 updates and "
"search the Microsoft Store app for \"Python |version|\". Ensure that the app"
" you select is published by the Python Software Foundation, and install it."
msgstr ""
"要安装此软件包，请确保您拥有最新的Windows 10更新，并在Microsoft Store应用程序中搜索 \"Python |version|\" "
"。确保您选择的应用程序由 Python Software Foundation 发布并安装。"

#: ../../using/windows.rst:366
msgid ""
"Python will always be available for free on the Microsoft Store. If you are "
"asked to pay for it, you have not selected the correct package."
msgstr "Python将始终在Microsoft Store上免费提供。如果要求您付款，则表示您没有选择正确的包。"

#: ../../using/windows.rst:369
msgid ""
"After installation, Python may be launched by finding it in Start. "
"Alternatively, it will be available from any Command Prompt or PowerShell "
"session by typing ``python``. Further, pip and IDLE may be used by typing "
"``pip`` or ``idle``. IDLE can also be found in Start."
msgstr ""
"安装完成后，可以在开始菜单中找到它来启动 Python。或者可以在命令提示符或 PowerShell 会话中输入 ``python`` "
"来启动。此外可以输入 ``pip`` 或 ``idle`` 来使用 pip 和 IDLE。IDLE 也在开始菜单中。"

#: ../../using/windows.rst:374
msgid ""
"All three commands are also available with version number suffixes, for "
"example, as ``python3.exe`` and ``python3.x.exe`` as well as ``python.exe`` "
"(where ``3.x`` is the specific version you want to launch, such as "
"|version|). Open \"Manage App Execution Aliases\" through Start to select "
"which version of Python is associated with each command. It is recommended "
"to make sure that ``pip`` and ``idle`` are consistent with whichever version"
" of ``python`` is selected."
msgstr ""
"所有这三个命令也可以使用版本号后缀，例如， ``python3.exe`` 和 ``python3.x.exe`` 以及 ``python.exe`` "
"（其中 ``3.x`` 是您要启动的特定版本，例如 |version| ）。在 ``设置-->主页-->应用和功能`` 页面中，点选 "
"``管理可选功能`` ，选择与每个命令关联的python版本。建议确保 ``pip`` 和 ``idle`` 与选择的 ``python`` 版本一致。"

#: ../../using/windows.rst:382
msgid ""
"Virtual environments can be created with ``python -m venv`` and activated "
"and used as normal."
msgstr "可以使用 ``python -m venv`` 创建虚拟环境并激活并正常使用。"

#: ../../using/windows.rst:385
msgid ""
"If you have installed another version of Python and added it to your "
"``PATH`` variable, it will be available as ``python.exe`` rather than the "
"one from the Microsoft Store. To access the new installation, use "
"``python3.exe`` or ``python3.x.exe``."
msgstr ""
"如果你已经安装了另一个版本的Python并将它添加到你的 ``PATH`` 变量中，那么它将作为 ``python.exe`` "
"而不是来自Microsoft Store的那个。要访问新安装，请使用 ``python3.exe`` 或 ``python3.x.exe`` 。"

#: ../../using/windows.rst:390
msgid ""
"The ``py.exe`` launcher will detect this Python installation, but will "
"prefer installations from the traditional installer."
msgstr "``py.exe`` 启动器将检测此 Python 安装版，但会优先使用来自传统安装器的安装版。"

#: ../../using/windows.rst:393
msgid ""
"To remove Python, open Settings and use Apps and Features, or else find "
"Python in Start and right-click to select Uninstall. Uninstalling will "
"remove all packages you installed directly into this Python installation, "
"but will not remove any virtual environments"
msgstr ""
"要删除Python，请打开“设置”并使用“应用程序和功能”，或者在“开始”中找到Python，然后右键单击以选择“卸载”。卸载将删除该已安装Python程序中的所有软件包，但不会删除任何虚拟环境"

#: ../../using/windows.rst:399
msgid "Known issues"
msgstr "已知的问题"

#: ../../using/windows.rst:402
msgid "Redirection of local data, registry, and temporary paths"
msgstr "本地数据、注册表项和临时路径的重定向"

#: ../../using/windows.rst:404
msgid ""
"Because of restrictions on Microsoft Store apps, Python scripts may not have"
" full write access to shared locations such as :envvar:`TEMP` and the "
"registry. Instead, it will write to a private copy. If your scripts must "
"modify the shared locations, you will need to install the full installer."
msgstr ""
"由于 Microsoft Store 应用程序的限制，Python 脚本可能无法对共享位置如 :envvar:`TEMP` 和注册表进行完全写入访问。 "
"相反同，它将写入到一个私有副本。 如果你的脚本必须修改共享位置，则需要安装完整的安装器。"

#: ../../using/windows.rst:409
msgid ""
"At runtime, Python will use a private copy of well-known Windows folders and"
" the registry. For example, if the environment variable :envvar:`!%APPDATA%`"
" is :file:`c:\\\\Users\\\\<user>\\\\AppData\\\\`, then when writing to "
":file:`C:\\\\Users\\\\<user>\\\\AppData\\\\Local` will write to "
":file:`C:\\\\Users\\\\<user>\\\\AppData\\\\Local\\\\Packages\\\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\\\LocalCache\\\\Local\\\\`."
msgstr ""

#: ../../using/windows.rst:414
msgid ""
"When reading files, Windows will return the file from the private folder, or"
" if that does not exist, the real Windows directory. For example reading "
":file:`C:\\\\Windows\\\\System32` returns the contents of "
":file:`C:\\\\Windows\\\\System32` plus the contents of :file:`C:\\\\Program "
"Files\\\\WindowsApps\\\\package_name\\\\VFS\\\\SystemX86`."
msgstr ""
"当读取文件时，Windows 将返回来自私有文件夹的文件，或者如果文件不存在，则返回来自知名 Windows 目录的文件。 例如读取 "
":file:`C:\\\\Windows\\\\System32` 将返回 :file:`C:\\\\Windows\\\\System32` "
"的内容加上 :file:`C:\\\\Program "
"Files\\\\WindowsApps\\\\package_name\\\\VFS\\\\SystemX86` 的内容。"

#: ../../using/windows.rst:418
msgid ""
"You can find the real path of any existing file using "
":func:`os.path.realpath`:"
msgstr "你可以使用 :func:`os.path.realpath` 找到任何现有文件的真实路径:"

#: ../../using/windows.rst:420
msgid ""
">>> import os\n"
">>> test_file = 'C:\\\\Users\\\\example\\\\AppData\\\\Local\\\\test.txt'\n"
">>> os.path.realpath(test_file)\n"
"'C:\\\\Users\\\\example\\\\AppData\\\\Local\\\\Packages\\\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\\\LocalCache\\\\Local\\\\test.txt'"
msgstr ""
">>> import os\n"
">>> test_file = 'C:\\\\Users\\\\example\\\\AppData\\\\Local\\\\test.txt'\n"
">>> os.path.realpath(test_file)\n"
"'C:\\\\Users\\\\example\\\\AppData\\\\Local\\\\Packages\\\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\\\LocalCache\\\\Local\\\\test.txt'"

#: ../../using/windows.rst:427
msgid "When writing to the Windows Registry, the following behaviors exist:"
msgstr "当写入到 Windows 注册表时，会存在以下行为:"

#: ../../using/windows.rst:429
msgid ""
"Reading from ``HKLM\\\\Software`` is allowed and results are merged with the"
" :file:`registry.dat` file in the package."
msgstr "从 ``HKLM\\\\Software`` 读取是被允许的并且其结果将与包中的 :file:`registry.dat` 文件合并。"

#: ../../using/windows.rst:430
msgid ""
"Writing to ``HKLM\\\\Software`` is not allowed if the corresponding "
"key/value exists, i.e. modifying existing keys."
msgstr "当相应的键/值存在时向 ``HKLM\\\\Software`` 写入，即修改现有键的值是不被允许的。"

#: ../../using/windows.rst:431
msgid ""
"Writing to ``HKLM\\\\Software`` is allowed as long as a corresponding "
"key/value does not exist in the package and the user has the correct access "
"permissions."
msgstr "当包中相应的键/值不存在并且用户具有正确的访问权限时向 ``HKLM\\\\Software`` 写入是被允许的。"

#: ../../using/windows.rst:434
msgid ""
"For more detail on the technical basis for these limitations, please consult"
" Microsoft's documentation on packaged full-trust apps, currently available "
"at `docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-uwp-behind-the-"
"scenes <https://learn.microsoft.com/windows/msix/desktop/desktop-to-uwp-"
"behind-the-scenes>`_"
msgstr ""
"有关这些限制的技术原理的更多细节，请查询 Microsoft 对已打包完全可信应用的文档，目前可在 `docs.microsoft.com/en-"
"us/windows/msix/desktop/desktop-to-uwp-behind-the-scenes "
"<https://learn.microsoft.com/windows/msix/desktop/desktop-to-uwp-behind-the-"
"scenes>`_ 获取。"

#: ../../using/windows.rst:443
msgid "The nuget.org packages"
msgstr "nuget.org 安装包"

#: ../../using/windows.rst:447
msgid ""
"The nuget.org package is a reduced size Python environment intended for use "
"on continuous integration and build systems that do not have a system-wide "
"install of Python. While nuget is \"the package manager for .NET\", it also "
"works perfectly fine for packages containing build-time tools."
msgstr ""
"nuget.org 是一个精简的 Python 环境，用于在没有全局安装 Python 的系统的持续集成和构建。 虽然 nuget "
"是“.NET的包管理器”，但是对于包含构建时工具的包来说，它也可以很好地工作。"

#: ../../using/windows.rst:452
msgid ""
"Visit `nuget.org <https://www.nuget.org/>`_ for the most up-to-date "
"information on using nuget. What follows is a summary that is sufficient for"
" Python developers."
msgstr ""
"访问 `nuget.org <https://www.nuget.org/>`_  获取有关使用 nuget 的最新信息。 下面的摘要对 Python "
"开发人员来说已经足够了。"

#: ../../using/windows.rst:456
msgid ""
"The ``nuget.exe`` command line tool may be downloaded directly from "
"``https://aka.ms/nugetclidl``, for example, using curl or PowerShell. With "
"the tool, the latest version of Python for 64-bit or 32-bit machines is "
"installed using::"
msgstr ""
"``nuget.exe`` 命令行工具可以直接从 ``https://aka.ms/nugetclidl`` 下载，例如，使用 curl 或 "
"PowerShell。 使用该工具安装 64 位或 32 位最新版本的 Python::"

#: ../../using/windows.rst:461
msgid ""
"nuget.exe install python -ExcludeVersion -OutputDirectory .\n"
"nuget.exe install pythonx86 -ExcludeVersion -OutputDirectory ."
msgstr ""
"nuget.exe install python -ExcludeVersion -OutputDirectory .\n"
"nuget.exe install pythonx86 -ExcludeVersion -OutputDirectory ."

#: ../../using/windows.rst:464
msgid ""
"To select a particular version, add a ``-Version 3.x.y``. The output "
"directory may be changed from ``.``, and the package will be installed into "
"a subdirectory. By default, the subdirectory is named the same as the "
"package, and without the ``-ExcludeVersion`` option this name will include "
"the specific version installed. Inside the subdirectory is a ``tools`` "
"directory that contains the Python installation:"
msgstr ""
"要选择特定版本，请添加 ``-Version 3.x.y`` 。 输出目录可以从 ``.`` 更改，包将安装到子目录中。 "
"默认情况下，子目录的名称与包的名称相同，如果没有 ``-ExcludeVersion`` 选项，则此名称将包含已安装的特定版本。 子目录里面是一个包含 "
"Python 安装的 ``tools`` 目录："

#: ../../using/windows.rst:471
msgid ""
"# Without -ExcludeVersion\n"
"> .\\python.3.5.2\\tools\\python.exe -V\n"
"Python 3.5.2\n"
"\n"
"# With -ExcludeVersion\n"
"> .\\python\\tools\\python.exe -V\n"
"Python 3.5.2"
msgstr ""
"# Without -ExcludeVersion\n"
"> .\\python.3.5.2\\tools\\python.exe -V\n"
"Python 3.5.2\n"
"\n"
"# With -ExcludeVersion\n"
"> .\\python\\tools\\python.exe -V\n"
"Python 3.5.2"

#: ../../using/windows.rst:481
msgid ""
"In general, nuget packages are not upgradeable, and newer versions should be"
" installed side-by-side and referenced using the full path. Alternatively, "
"delete the package directory manually and install it again. Many CI systems "
"will do this automatically if they do not preserve files between builds."
msgstr ""
"通常，nuget 包不可升级，应该平行安装较新版本并使用完整路径引用。 或者，手动删除程序包目录并再次安装。 如果在构建之间不保留文件，许多 CI "
"系统将自动执行此操作。"

#: ../../using/windows.rst:486
msgid ""
"Alongside the ``tools`` directory is a ``build\\native`` directory. This "
"contains a MSBuild properties file ``python.props`` that can be used in a "
"C++ project to reference the Python install. Including the settings will "
"automatically use the headers and import libraries in your build."
msgstr ""
"除了 ``tools`` 目录外，还有一个 ``build\\native`` 目录。 它包含一个 MSBuild 属性文件 "
"``python.props``，可以在 C++ 项目中使用该文件来引用 Python 安装。 包含这些设置将自动在生成中使用标头和导入库。"

#: ../../using/windows.rst:491
msgid ""
"The package information pages on nuget.org are "
"`www.nuget.org/packages/python <https://www.nuget.org/packages/python>`_ for"
" the 64-bit version, `www.nuget.org/packages/pythonx86 "
"<https://www.nuget.org/packages/pythonx86>`_ for the 32-bit version, and "
"`www.nuget.org/packages/pythonarm64 "
"<https://www.nuget.org/packages/pythonarm64>`_ for the ARM64 version"
msgstr ""
"在 nuget.org 上的软件包信息页 `www.nuget.org/packages/python "
"<https://www.nuget.org/packages/python>`_ 对应 64 "
"位版本，`www.nuget.org/packages/pythonx86 "
"<https://www.nuget.org/packages/pythonx86>`_ 对应 32 "
"位版本，`www.nuget.org/packages/pythonarm64 "
"<https://www.nuget.org/packages/pythonarm64>`_ 对应 ARM64 版本"

#: ../../using/windows.rst:499
msgid "Free-threaded packages"
msgstr "自由线程版软件包"

#: ../../using/windows.rst:508
msgid ""
"Packages containing free-threaded binaries are named `python-freethreaded "
"<https://www.nuget.org/packages/python-freethreaded>`_ for the 64-bit "
"version, `pythonx86-freethreaded "
"<https://www.nuget.org/packages/pythonx86-freethreaded>`_ for the 32-bit "
"version, and `pythonarm64-freethreaded "
"<https://www.nuget.org/packages/pythonarm64-freethreaded>`_ for the ARM64 "
"version. These packages contain both the ``python3.13t.exe`` and "
"``python.exe`` entry points, both of which run free threaded."
msgstr ""
"包含自由线程版二进制文件的包名称 `python-freethreaded "
"<https://www.nuget.org/packages/python-freethreaded>`_ 对应 64 "
"位版本，`pythonx86-freethreaded "
"<https://www.nuget.org/packages/pythonx86-freethreaded>`_ 对应 32 "
"位版本，`pythonarm64-freethreaded "
"<https://www.nuget.org/packages/pythonarm64-freethreaded>`_ 对应 ARM64 版本。 "
"这些包同时包含 ``python3.13t.exe`` 和 ``python.exe`` 入口点，两者均在自由线程模式下运行。"

#: ../../using/windows.rst:520
msgid "The embeddable package"
msgstr "可嵌入的包"

#: ../../using/windows.rst:524
msgid ""
"The embedded distribution is a ZIP file containing a minimal Python "
"environment. It is intended for acting as part of another application, "
"rather than being directly accessed by end-users."
msgstr "嵌入式发行版是一个包含最小 Python 环境的 ZIP 文件。 它旨在作为另一个应用程序的一部分，而不是由最终用户直接访问。"

#: ../../using/windows.rst:528
msgid ""
"When extracted, the embedded distribution is (almost) fully isolated from "
"the user's system, including environment variables, system registry "
"settings, and installed packages. The standard library is included as pre-"
"compiled and optimized ``.pyc`` files in a ZIP, and ``python3.dll``, "
"``python37.dll``, ``python.exe`` and ``pythonw.exe`` are all provided. "
"Tcl/tk (including all dependents, such as Idle), pip and the Python "
"documentation are not included."
msgstr ""
"在解压缩后，嵌入的分发包（几乎）与用户的系统完全隔离，包括环境变量、系统注册表设置和已安装的软件包。 标准库作为预先编译和优化的 ``.pyc`` "
"文件被包括在一个 ZIP 文件中，并提供了 ``python3.dll``, ``python37.dll``, ``python.exe`` 和 "
"``pythonw.exe``。 其中将不包括 Tcl/tk（包括所有依赖它的包，如 Idle 等）、pip 和 Python 文档。"

#: ../../using/windows.rst:537
msgid ""
"The embedded distribution does not include the `Microsoft C Runtime "
"<https://learn.microsoft.com/cpp/windows/latest-supported-vc-redist#visual-"
"studio-2015-2017-2019-and-2022>`_ and it is the responsibility of the "
"application installer to provide this. The runtime may have already been "
"installed on a user's system previously or automatically via Windows Update,"
" and can be detected by finding ``ucrtbase.dll`` in the system directory."
msgstr ""
"嵌入式分发版不包括 `Microsoft C 运行时 <https://learn.microsoft.com/cpp/windows/latest-"
"supported-vc-redist#visual-studio-2015-2017-2019-and-2022>`_ "
"并由应用程序安装器负责提供此功能。 运行时可能已经预先安装在用户的系统上或是通过 Windows Update 自动安装，并且可以通过在系统目录中查找 "
"``ucrtbase.dll`` 来检测。"

#: ../../using/windows.rst:544
msgid ""
"Third-party packages should be installed by the application installer "
"alongside the embedded distribution. Using pip to manage dependencies as for"
" a regular Python installation is not supported with this distribution, "
"though with some care it may be possible to include and use pip for "
"automatic updates. In general, third-party packages should be treated as "
"part of the application (\"vendoring\") so that the developer can ensure "
"compatibility with newer versions before providing updates to users."
msgstr ""
"第三方软件包应该由应用程序与嵌入式发行版一起安装。这个发行版不支持像常规 Python 安装那样使用 pip 来管理依赖关系，不过可以小心地将 pip "
"包含进来并使用它进行自动更新。 通常，第三方包应该作为应用程序的一部分(“打包”)处理，以便开发人员在向用户提供更新之前能够确保与新版本兼容。"

#: ../../using/windows.rst:552
msgid ""
"The two recommended use cases for this distribution are described below."
msgstr "下面描述了这个发行版的两个推荐用例。"

#: ../../using/windows.rst:555
msgid "Python Application"
msgstr "Python 应用程序"

#: ../../using/windows.rst:557
msgid ""
"An application written in Python does not necessarily require users to be "
"aware of that fact. The embedded distribution may be used in this case to "
"include a private version of Python in an install package. Depending on how "
"transparent it should be (or conversely, how professional it should appear),"
" there are two options."
msgstr ""
"用 Python 编写的应用程序并不一定要求用户了解这一事实。 在这种情况下，可以使用嵌入式发行版在安装包中包含 Python 的私有版本。 "
"根据它应该有多透明（或者相反，它应该看起来有多专业），有两个选项。"

#: ../../using/windows.rst:563
msgid ""
"Using a specialized executable as a launcher requires some coding, but "
"provides the most transparent experience for users. With a customized "
"launcher, there are no obvious indications that the program is running on "
"Python: icons can be customized, company and version information can be "
"specified, and file associations behave properly. In most cases, a custom "
"launcher should simply be able to call ``Py_Main`` with a hard-coded command"
" line."
msgstr ""
"使用专门的可执行文件作为启动程序需要一些编码，但为用户提供了最透明的体验。使用定制的启动器，没有明显的迹象表明程序是在 Python "
"上运行的：图标可以定制，公司和版本信息可以指定，文件关联可以正常运行。在大多数情况下，自定义启动程序应该只需使用硬编码的命令行就能调用 "
"``Py_Main``。"

#: ../../using/windows.rst:570
msgid ""
"The simpler approach is to provide a batch file or generated shortcut that "
"directly calls the ``python.exe`` or ``pythonw.exe`` with the required "
"command-line arguments. In this case, the application will appear to be "
"Python and not its actual name, and users may have trouble distinguishing it"
" from other running Python processes or file associations."
msgstr ""
"更简单的方法是提供批处理文件或生成的快捷方式，使用所需的命令行参数直接调用 ``python.exe`` 或 "
"``pythonw.exe``。在这种情况下，应用程序将显示为 Python 而不是其实际名称，并且用户可能无法将其与其他正在运行的 Python "
"进程或文件关联区分开来。"

#: ../../using/windows.rst:576
msgid ""
"With the latter approach, packages should be installed as directories "
"alongside the Python executable to ensure they are available on the path. "
"With the specialized launcher, packages can be located in other locations as"
" there is an opportunity to specify the search path before launching the "
"application."
msgstr ""
"对于后一种方法，包应该与 Python 可执行文件一起作为目录安装，以确保它们在路径上可用。 "
"使用专用的启动器，包可以位于其他位置，因为在启动应用程序之前有机会指定搜索路径。"

#: ../../using/windows.rst:582
msgid "Embedding Python"
msgstr "嵌入Python"

#: ../../using/windows.rst:584
msgid ""
"Applications written in native code often require some form of scripting "
"language, and the embedded Python distribution can be used for this purpose."
" In general, the majority of the application is in native code, and some "
"part will either invoke ``python.exe`` or directly use ``python3.dll``. For "
"either case, extracting the embedded distribution to a subdirectory of the "
"application installation is sufficient to provide a loadable Python "
"interpreter."
msgstr ""
"用本地代码编写的应用程序通常需要某种形式的脚本语言，嵌入式Python发行版可以用于此目的。通常，应用程序的大部分都是本机代码，某些部分将调用 "
"``python.exe`` 或直接使用 ``python3.dll`` "
"。无论是哪种情况，将嵌入的发行版解压缩到应用程序安装的子目录中就足以提供可加载的Python解释器。"

#: ../../using/windows.rst:591
msgid ""
"As with the application use, packages can be installed to any location as "
"there is an opportunity to specify search paths before initializing the "
"interpreter. Otherwise, there is no fundamental differences between using "
"the embedded distribution and a regular installation."
msgstr "与应用程序使用一样，包可以安装到任何位置，因为在初始化解释器之前有机会指定搜索路径。否则，使用嵌入式发行版和常规安装之间没有根本区别。"

#: ../../using/windows.rst:598
msgid "Alternative bundles"
msgstr "替代捆绑包"

#: ../../using/windows.rst:600
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr "除了标准的CPython发行版之外，还有一些包含附加功能的修改包。以下是热门版本及其主要功能的列表："

#: ../../using/windows.rst:604
msgid "`ActivePython <https://www.activestate.com/products/python/>`_"
msgstr "`ActivePython <https://www.activestate.com/products/python/>`_"

#: ../../using/windows.rst:605
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr "具有多平台兼容性的安装程序，文档，PyWin32"

#: ../../using/windows.rst:607
msgid "`Anaconda <https://www.anaconda.com/download/>`_"
msgstr "`Anaconda <https://www.anaconda.com/download/>`_"

#: ../../using/windows.rst:608
msgid ""
"Popular scientific modules (such as numpy, scipy and pandas) and the "
"``conda`` package manager."
msgstr "流行的科学模块（如numpy，scipy和pandas）和 ``conda`` 包管理器。"

#: ../../using/windows.rst:611
msgid ""
"`Enthought Deployment Manager "
"<https://assets.enthought.com/downloads/edm/>`_"
msgstr "`Enthought 部署管理器 <https://assets.enthought.com/downloads/edm/>`_"

#: ../../using/windows.rst:612
msgid "\"The Next Generation Python Environment and Package Manager\"."
msgstr "“下一代的 Python 环境和包管理器”"

#: ../../using/windows.rst:614
msgid ""
"Previously Enthought provided Canopy, but it `reached end of life in 2016 "
"<https://support.enthought.com/hc/en-us/articles/360038600051-Canopy-GUI-"
"end-of-life-transition-to-the-Enthought-Deployment-Manager-EDM-and-Visual-"
"Studio-Code>`_."
msgstr ""
"之前 Enthought 提供了 Canopy，但已经 `于 2016 年结束生命期 "
"<https://support.enthought.com/hc/en-us/articles/360038600051-Canopy-GUI-"
"end-of-life-transition-to-the-Enthought-Deployment-Manager-EDM-and-Visual-"
"Studio-Code>`_。"

#: ../../using/windows.rst:617
msgid "`WinPython <https://winpython.github.io/>`_"
msgstr "`WinPython <https://winpython.github.io/>`_"

#: ../../using/windows.rst:618
msgid ""
"Windows-specific distribution with prebuilt scientific packages and tools "
"for building packages."
msgstr "特定于Windows的发行版，包含用于构建包的预构建科学包和工具。"

#: ../../using/windows.rst:621
msgid ""
"Note that these packages may not include the latest versions of Python or "
"other libraries, and are not maintained or supported by the core Python "
"team."
msgstr "请注意，这些软件包可能不包含最新版本的Python或其他库，并且不由核心Python团队维护或支持。"

#: ../../using/windows.rst:627
msgid "Configuring Python"
msgstr "配置Python"

#: ../../using/windows.rst:629
msgid ""
"To run Python conveniently from a command prompt, you might consider "
"changing some default environment variables in Windows.  While the installer"
" provides an option to configure the PATH and PATHEXT variables for you, "
"this is only reliable for a single, system-wide installation.  If you "
"regularly use multiple versions of Python, consider using the "
":ref:`launcher`."
msgstr ""
"要从命令提示符方便地运行Python，您可以考虑在Windows中更改一些默认环境变量。虽然安装程序提供了为您配置PATH和PATHEXT变量的选项，但这仅适用于单版本、全局安装。如果您经常使用多个版本的Python，请考虑使用"
" :ref:`launcher` 。"

#: ../../using/windows.rst:639
msgid "Excursus: Setting environment variables"
msgstr "附录：设置环境变量"

#: ../../using/windows.rst:641
msgid ""
"Windows allows environment variables to be configured permanently at both "
"the User level and the System level, or temporarily in a command prompt."
msgstr "Windows允许在用户级别和系统级别永久配置环境变量，或临时在命令提示符中配置环境变量。"

#: ../../using/windows.rst:644
msgid ""
"To temporarily set environment variables, open Command Prompt and use the "
":command:`set` command:"
msgstr "要临时设置环境变量，请打开命令提示符并使用 :command:`set` 命令："

#: ../../using/windows.rst:647
msgid ""
"C:\\>set PATH=C:\\Program Files\\Python 3.9;%PATH%\n"
"C:\\>set PYTHONPATH=%PYTHONPATH%;C:\\My_python_lib\n"
"C:\\>python"
msgstr ""
"C:\\>set PATH=C:\\Program Files\\Python 3.9;%PATH%\n"
"C:\\>set PYTHONPATH=%PYTHONPATH%;C:\\My_python_lib\n"
"C:\\>python"

#: ../../using/windows.rst:653
msgid ""
"These changes will apply to any further commands executed in that console, "
"and will be inherited by any applications started from the console."
msgstr "这些环境变量的更改将应用​​于在该控制台中执行的任何其他命令，并且，由该控制台启动的任何应用程序都继承设这些设置。"

#: ../../using/windows.rst:656
msgid ""
"Including the variable name within percent signs will expand to the existing"
" value, allowing you to add your new value at either the start or the end. "
"Modifying :envvar:`PATH` by adding the directory containing "
":program:`python.exe` to the start is a common way to ensure the correct "
"version of Python is launched."
msgstr ""
"在百分号中包含的变量名将被现有值替换，允许在开始或结束时添加新值。通过将包含 :program:`python.exe` 的目录添加到开头来修改 "
":envvar:`PATH`  是确保启动正确版本的Python的常用方法。"

#: ../../using/windows.rst:662
msgid ""
"To permanently modify the default environment variables, click Start and "
"search for 'edit environment variables', or open System properties, "
":guilabel:`Advanced system settings` and click the :guilabel:`Environment "
"Variables` button. In this dialog, you can add or modify User and System "
"variables. To change System variables, you need non-restricted access to "
"your machine (i.e. Administrator rights)."
msgstr ""
"要永久修改默认环境变量，请单击“开始”并搜索“编辑环境变量”，或打开系统属性的 :guilabel:`高级系统设置` ，然后单击 "
":guilabel:`环境变量` 按钮。在此对话框中，您可以添加或修改用户和系统变量。要更改系统变量，您需要对计算机进行无限制访问（即管理员权限）。"

#: ../../using/windows.rst:671
msgid ""
"Windows will concatenate User variables *after* System variables, which may "
"cause unexpected results when modifying :envvar:`PATH`."
msgstr "Windows会将用户变量串联在系统变量 *之后* ，这可能会在修改 :envvar:`PATH` 时导致意外结果。"

#: ../../using/windows.rst:674
msgid ""
"The :envvar:`PYTHONPATH` variable is used by all versions of Python, so you "
"should not permanently configure it unless the listed paths only include "
"code that is compatible with all of your installed Python versions."
msgstr ""
":envvar:`PYTHONPATH` 变量被 Python 的所有版本使用，因此除非它列出的路径只包含与所有已安装的 Python "
"版本兼容的代码，否则不要永久配置此变量。"

#: ../../using/windows.rst:681
msgid ""
"https://learn.microsoft.com/windows/win32/procthread/environment-variables"
msgstr ""
"https://learn.microsoft.com/windows/win32/procthread/environment-variables"

#: ../../using/windows.rst:682
msgid "Overview of environment variables on Windows"
msgstr "Windows 中的环境变量概述"

#: ../../using/windows.rst:684
msgid ""
"https://learn.microsoft.com/windows-server/administration/windows-"
"commands/set_1"
msgstr ""
"https://learn.microsoft.com/windows-server/administration/windows-"
"commands/set_1"

#: ../../using/windows.rst:685
msgid "The ``set`` command, for temporarily modifying environment variables"
msgstr "用于临时修改环境变量的 ``set`` 命令"

#: ../../using/windows.rst:687
msgid ""
"https://learn.microsoft.com/windows-server/administration/windows-"
"commands/setx"
msgstr ""
"https://learn.microsoft.com/windows-server/administration/windows-"
"commands/setx"

#: ../../using/windows.rst:688
msgid "The ``setx`` command, for permanently modifying environment variables"
msgstr "用于永久修改环境变量的 ``setx`` 命令"

#: ../../using/windows.rst:694
msgid "Finding the Python executable"
msgstr "查找Python可执行文件"

#: ../../using/windows.rst:698
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the command prompt. The "
"installer has an option to set that up for you."
msgstr "除了使用自动创建的Python解释器的开始菜单项之外，您可能还想在命令提示符下启动Python。安装程序有一个选项可以为您设置。"

#: ../../using/windows.rst:702
msgid ""
"On the first page of the installer, an option labelled \"Add Python to "
"PATH\" may be selected to have the installer add the install location into "
"the :envvar:`PATH`.  The location of the :file:`Scripts\\\\` folder is also "
"added. This allows you to type :command:`python` to run the interpreter, and"
" :command:`pip` for the package installer. Thus, you can also execute your "
"scripts with command line options, see :ref:`using-on-cmdline` "
"documentation."
msgstr ""
"在安装程序的第一页上，可以选择标记为“将Python添加到环境变量”的选项，以使安装程序将安装位置添加到 :envvar:`PATH` 。还添加了 "
":file:`Scripts\\\\` 文件夹的位置。这允许你输入 :command:`python` 来运行解释器，并且 :command:`pip`"
" 用于包安装程序。因此，您还可以使用命令行选项执行脚本，请参阅 :ref:`using-on-cmdline` 文档。"

#: ../../using/windows.rst:709
msgid ""
"If you don't enable this option at install time, you can always re-run the "
"installer, select Modify, and enable it.  Alternatively, you can manually "
"modify the :envvar:`PATH` using the directions in :ref:`setting-envvars`.  "
"You need to set your :envvar:`PATH` environment variable to include the "
"directory of your Python installation, delimited by a semicolon from other "
"entries.  An example variable could look like this (assuming the first two "
"entries already existed)::"
msgstr ""
"如果在安装时未启用此选项，则始终可以重新运行安装程序，选择“修改”并启用它。或者，您可以使用 :ref:`setting-envvars` "
"的方法手动修改 :envvar:`PATH` 。您需要将Python安装目录添加到 :envvar:`PATH` "
"环境变量中，该内容与其他条目用分号分隔。示例变量可能如下所示（假设前两个条目已经存在）::"

#: ../../using/windows.rst:717
msgid "C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\Program Files\\Python 3.9"
msgstr "C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\Program Files\\Python 3.9"

#: ../../using/windows.rst:722
msgid "UTF-8 mode"
msgstr "UTF-8 模式"

#: ../../using/windows.rst:726
msgid ""
"Windows still uses legacy encodings for the system encoding (the ANSI Code "
"Page).  Python uses it for the default encoding of text files (e.g. "
":func:`locale.getencoding`)."
msgstr ""
"Windows 仍然使用传统编码格式作为系统的编码格式 (ANSI 代码页)。 Python 使用它作为文本文件默认的编码格式 (即 "
":func:`locale.getencoding`)。"

#: ../../using/windows.rst:730
msgid ""
"This may cause issues because UTF-8 is widely used on the internet and most "
"Unix systems, including WSL (Windows Subsystem for Linux)."
msgstr ""
"这可能会造成问题，因为因特网和大多数 Unix 系统包括 WSL (Windows Subsystem for Linux) 广泛使用 UTF-8。"

#: ../../using/windows.rst:733
msgid ""
"You can use the :ref:`Python UTF-8 Mode <utf8-mode>` to change the default "
"text encoding to UTF-8. You can enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>` via the ``-X utf8`` command line option, or the "
"``PYTHONUTF8=1`` environment variable.  See :envvar:`PYTHONUTF8` for "
"enabling UTF-8 mode, and :ref:`setting-envvars` for how to modify "
"environment variables."
msgstr ""
"你可以使用 :ref:`Python UTF-8 模式 <utf8-mode>` 将默认的文本编码格式改为 UTF-8。 要启用 "
":ref:`Python UTF-8 模式 <utf8-mode>` 可以通过 ``-X utf8`` 命令行选项，或者 "
"``PYTHONUTF8=1`` 环境变量。 请参阅 :envvar:`PYTHONUTF8` 了解如何启用 UTF-8 模式，并参阅 "
":ref:`setting-envvars` 了解如何修改环境变量。"

#: ../../using/windows.rst:739
msgid ""
"When the :ref:`Python UTF-8 Mode <utf8-mode>` is enabled, you can still use "
"the system encoding (the ANSI Code Page) via the \"mbcs\" codec."
msgstr ""
"当 :ref:`Python UTF-8 模式 <utf8-mode>` 启用时，你仍然可以通过 \"mbcs\" 编解码器使用系统编码格式（ANSI "
"代码页）。"

#: ../../using/windows.rst:742
msgid ""
"Note that adding ``PYTHONUTF8=1`` to the default environment variables will "
"affect all Python 3.7+ applications on your system. If you have any Python "
"3.7+ applications which rely on the legacy system encoding, it is "
"recommended to set the environment variable temporarily or use the ``-X "
"utf8`` command line option."
msgstr ""
"请注意添加 ``PYTHONUTF8=1`` 到默认环境变量将会影响你的系统中的所有 Python 3.7+ 应用。 如果你有任何 Python "
"3.7+ 应用仍然依赖于传统的系统编码格式，则推荐设置临时环境变量或使用 ``-X utf8`` 命令行选项。"

#: ../../using/windows.rst:749
msgid ""
"Even when UTF-8 mode is disabled, Python uses UTF-8 by default on Windows "
"for:"
msgstr "即使在不启用 UTF-8 模式时，Windows 版的 Python 也会在以下情况中默认使用 UTF-8："

#: ../../using/windows.rst:752
msgid "Console I/O including standard I/O (see :pep:`528` for details)."
msgstr "控制台 I/O 包括标准 I/O (详情见 :pep:`528`)。"

#: ../../using/windows.rst:753
msgid ""
"The :term:`filesystem encoding <filesystem encoding and error handler>` (see"
" :pep:`529` for details)."
msgstr ""
":term:`文件系统编码格式 <filesystem encoding and error handler>` (参见 :pep:`529` "
"了解详情)。"

#: ../../using/windows.rst:760
msgid "Python Launcher for Windows"
msgstr "适用于Windows的Python启动器"

#: ../../using/windows.rst:764
msgid ""
"The Python launcher for Windows is a utility which aids in locating and "
"executing of different Python versions.  It allows scripts (or the command-"
"line) to indicate a preference for a specific Python version, and will "
"locate and execute that version."
msgstr ""
"用于Windows的Python启动器是一个实用程序，可帮助定位和执行不同的Python版本。它允许脚本（或命令行）指示特定Python版本的首选项，并将定位并执行该版本。"

#: ../../using/windows.rst:769
msgid ""
"Unlike the :envvar:`PATH` variable, the launcher will correctly select the "
"most appropriate version of Python. It will prefer per-user installations "
"over system-wide ones, and orders by language version rather than using the "
"most recently installed version."
msgstr ""
"与 :envvar:`PATH` "
"变量不同，启动器将正确选择最合适的Python版本。它更倾向于按用户安装而不是系统安装，并按语言版本排序，而不是使用最新安装的版本。"

#: ../../using/windows.rst:774
msgid "The launcher was originally specified in :pep:`397`."
msgstr "启动器最初是在 :pep:`397` 中指定的。"

#: ../../using/windows.rst:777
msgid "Getting started"
msgstr "入门"

#: ../../using/windows.rst:780
msgid "From the command-line"
msgstr "从命令行"

#: ../../using/windows.rst:784
msgid ""
"System-wide installations of Python 3.3 and later will put the launcher on "
"your :envvar:`PATH`. The launcher is compatible with all available versions "
"of Python, so it does not matter which version is installed. To check that "
"the launcher is available, execute the following command in Command Prompt::"
msgstr ""
"全局安装Python 3.3及更高版本将把启动器放在你的 :envvar:`PATH` "
"上。启动程序与所有可用的Python版本兼容，因此安装哪个版本无关紧要。要检查启动程序是否可用，请在命令提示符中执行以下命令："

#: ../../using/windows.rst:789
msgid "py"
msgstr "py"

#: ../../using/windows.rst:791
msgid ""
"You should find that the latest version of Python you have installed is "
"started - it can be exited as normal, and any additional command-line "
"arguments specified will be sent directly to Python."
msgstr "您应该会发现已安装的最新版本的Python已启动 - 它可以正常退出，并且将指定的任何其他命令行参数直接发送到Python。"

#: ../../using/windows.rst:795
msgid ""
"If you have multiple versions of Python installed (e.g., 3.7 and |version|) "
"you will have noticed that Python |version| was started - to launch Python "
"3.7, try the command::"
msgstr ""
"如果您安装了多个版本的Python（例如，3.7和 |version| ），您会注意到Python |version| 启动 - 如果要启动 "
"Python 3.7，尝试命令："

#: ../../using/windows.rst:799
msgid "py -3.7"
msgstr "py -3.7"

#: ../../using/windows.rst:801
msgid ""
"If you want the latest version of Python 2 you have installed, try the "
"command::"
msgstr "如果您想使用已安装的 Python 2 的最新版本，请尝试以下命令："

#: ../../using/windows.rst:804
msgid "py -2"
msgstr "py -2"

#: ../../using/windows.rst:806
msgid ""
"If you see the following error, you do not have the launcher installed::"
msgstr "如果您看到以下错误，则表明您没有安装启动器："

#: ../../using/windows.rst:808
msgid ""
"'py' is not recognized as an internal or external command,\n"
"operable program or batch file."
msgstr "'py' 不是内部或外部命令，也不是可运行的程序或批处理文件。"

#: ../../using/windows.rst:811
msgid "The command::"
msgstr "Tix 命令："

#: ../../using/windows.rst:813
msgid "py --list"
msgstr "py --list"

#: ../../using/windows.rst:815
msgid "displays the currently installed version(s) of Python."
msgstr "显示当前已安装的Python版本。"

#: ../../using/windows.rst:817
msgid ""
"The ``-x.y`` argument is the short form of the ``-V:Company/Tag`` argument, "
"which allows selecting a specific Python runtime, including those that may "
"have come from somewhere other than python.org. Any runtime registered by "
"following :pep:`514` will be discoverable. The ``--list`` command lists all "
"available runtimes using the ``-V:`` format."
msgstr ""
"``-x.y`` 参数是 ``-V:Company/Tag`` 参数的简短形式，它允许选择一个特定的 Python 运行时，包括可能来自于 "
"python.org 以外地方的版本。 任何遵循 :pep:`514` 进行注册的运行时都将是可被发现的。 ``--list`` 命令将列出所有使用 "
"``-V:`` 格式的可用运行时。"

#: ../../using/windows.rst:823
msgid ""
"When using the ``-V:`` argument, specifying the Company will limit selection"
" to runtimes from that provider, while specifying only the Tag will select "
"from all providers. Note that omitting the slash implies a tag::"
msgstr ""
"当使用 ``-V:`` 参数时，指定 Company 将把选择限制到来自该提供方的运行时，而仅指定 Tag 将选择来自所有提供方的运行时。 "
"请注意省略斜杠将会视作是一个 Tag::"

#: ../../using/windows.rst:827
msgid ""
"# Select any '3.*' tagged runtime\n"
"py -V:3\n"
"\n"
"# Select any 'PythonCore' released runtime\n"
"py -V:PythonCore/\n"
"\n"
"# Select PythonCore's latest Python 3 runtime\n"
"py -V:PythonCore/3"
msgstr ""
"# 选择任意带 '3.*' 标签的运行时\n"
"py -V:3\n"
"\n"
"# 选择任何 'PythonCore' 发行的运行时\n"
"py -V:PythonCore/\n"
"\n"
"# 选择 PythonCore 的最新 Python 3 运行时\n"
"py -V:PythonCore/3"

#: ../../using/windows.rst:836
msgid ""
"The short form of the argument (``-3``) only ever selects from core Python "
"releases, and not other distributions. However, the longer form (``-V:3``) "
"will select from any."
msgstr ""
"该参数的简短形式 (``-3``) 将只选择来自核心 Python 发布版的运行时，而不选择其他分发版。 但是，完整形式 (``-V:3``) "
"则将选择来自任何版本的运行时。"

#: ../../using/windows.rst:840
msgid ""
"The Company is matched on the full string, case-insensitive. The Tag is "
"matched on either the full string, or a prefix, provided the next character "
"is a dot or a hyphen. This allows ``-V:3.1`` to match ``3.1-32``, but not "
"``3.10``. Tags are sorted using numerical ordering (``3.10`` is newer than "
"``3.1``), but are compared using text (``-V:3.01`` does not match ``3.1``)."
msgstr ""
"Company 是在完整字符串上以大小写不敏感的方式进行匹配。 Tag 是在完整字符串或前缀上进行匹配，具体取决于下一个字符是点号还是连字符。 这将允许"
" ``-V:3.1`` 匹配 ``3.1-32``，但不匹配 ``3.10``。 Tag 是使用数字顺序进行排序的 (``3.10`` 比 "
"``3.1`` 新)，但会按文本进行比较 (``-V:3.01`` 将不匹配 ``3.1``)。"

#: ../../using/windows.rst:848
msgid "Virtual environments"
msgstr "从虚拟环境"

#: ../../using/windows.rst:852
msgid ""
"If the launcher is run with no explicit Python version specification, and a "
"virtual environment (created with the standard library :mod:`venv` module or"
" the external ``virtualenv`` tool) active, the launcher will run the virtual"
" environment's interpreter rather than the global one.  To run the global "
"interpreter, either deactivate the virtual environment, or explicitly "
"specify the global Python version."
msgstr ""
"如果启动程序运行时没有明确的Python版本，并且虚拟环境（使用标准库创建 :mod:`venv` 模块或外部 ``virtualenv`` "
"工具）处于活动状态，则启动程序将运行虚拟环境的解释器而不是全局的。要运行全局解释器，请停用虚拟环境，或显式指定全局Python版本。"

#: ../../using/windows.rst:860
msgid "From a script"
msgstr "从脚本"

#: ../../using/windows.rst:862
msgid ""
"Let's create a test Python script - create a file called ``hello.py`` with "
"the following contents"
msgstr "让我们创建一个测试Python脚本 - 创建一个名为 ``hello.py`` 的文件，其中包含以下内容"

#: ../../using/windows.rst:865
msgid ""
"#! python\n"
"import sys\n"
"sys.stdout.write(\"hello from Python %s\\n\" % (sys.version,))"
msgstr ""
"#! python\n"
"import sys\n"
"sys.stdout.write(\"hello from Python %s\\n\" % (sys.version,))"

#: ../../using/windows.rst:871
msgid "From the directory in which hello.py lives, execute the command::"
msgstr "从hello.py所在的目录中，执行以下命令："

#: ../../using/windows.rst:873
msgid "py hello.py"
msgstr "py hello.py"

#: ../../using/windows.rst:875
msgid ""
"You should notice the version number of your latest Python 2.x installation "
"is printed.  Now try changing the first line to be:"
msgstr "您应该注意到最新的Python 2.x安装的版本号已打印出来。现在尝试将第一行更改为："

#: ../../using/windows.rst:878
msgid "#! python3"
msgstr "#! python3"

#: ../../using/windows.rst:882
msgid ""
"Re-executing the command should now print the latest Python 3.x information."
" As with the above command-line examples, you can specify a more explicit "
"version qualifier.  Assuming you have Python 3.7 installed, try changing the"
" first line to ``#! python3.7`` and you should find the 3.7 version "
"information printed."
msgstr ""
"现在重新执行该命令将打印最新的 Python 3.x 信息。 如上面的命令行示例一样，你可以更明确地指定版本限定符。 假设你已安装了 Python "
"3.7，请尝试将第一行改为 ``#! python3.7`` 那么你应当看到打印出了 3.7 的版本信息。"

#: ../../using/windows.rst:888
msgid ""
"Note that unlike interactive use, a bare \"python\" will use the latest "
"version of Python 2.x that you have installed.  This is for backward "
"compatibility and for compatibility with Unix, where the command ``python`` "
"typically refers to Python 2."
msgstr ""
"请注意，与交互式使用不同，裸“python”将使用您已安装的Python 2.x的最新版本。这是为了向后兼容及兼容Unix，其中命令 "
"``python`` 通常是指Python 2。"

#: ../../using/windows.rst:894
msgid "From file associations"
msgstr "从文件关联"

#: ../../using/windows.rst:896
msgid ""
"The launcher should have been associated with Python files (i.e. ``.py``, "
"``.pyw``, ``.pyc`` files) when it was installed.  This means that when you "
"double-click on one of these files from Windows explorer the launcher will "
"be used, and therefore you can use the same facilities described above to "
"have the script specify the version which should be used."
msgstr ""
"安装时应该将启动器与Python文件（即 ``.py``, ``.pyw``, ``.pyc`` "
"文件）相关联。这意味着当您从Windows资源管理器中双击其中一个文件时，将使用启动程序，因此您可以使用上述相同的工具让脚本指定应使用的版本。"

#: ../../using/windows.rst:902
msgid ""
"The key benefit of this is that a single launcher can support multiple "
"Python versions at the same time depending on the contents of the first "
"line."
msgstr "这样做的主要好处是，单个启动程序可以同时支持多个Python版本，具体取决于第一行的内容。"

#: ../../using/windows.rst:906
msgid "Shebang Lines"
msgstr "Shebang 行"

#: ../../using/windows.rst:908
msgid ""
"If the first line of a script file starts with ``#!``, it is known as a "
"\"shebang\" line.  Linux and other Unix like operating systems have native "
"support for such lines and they are commonly used on such systems to "
"indicate how a script should be executed.  This launcher allows the same "
"facilities to be used with Python scripts on Windows and the examples above "
"demonstrate their use."
msgstr ""
"如果脚本文件的第一行以 ``#!`` 开头，则称为 \"shebang\" "
"行。Linux和其他类Unix操作系统都有对这些行的本机支持，它们通常在此类系统上用来指示应该如何执行脚本。这个启动器允许在Windows上对Python脚本使用相同的工具，上面的示例演示了它们的使用。"

#: ../../using/windows.rst:915
msgid ""
"To allow shebang lines in Python scripts to be portable between Unix and "
"Windows, this launcher supports a number of 'virtual' commands to specify "
"which interpreter to use.  The supported virtual commands are:"
msgstr ""
"为了允许Python脚本中的shebang行在Unix和Windows之间移植，该启动器支持许多“虚拟”命令来指定要使用的解释器。支持的虚拟命令是："

#: ../../using/windows.rst:919
msgid "``/usr/bin/env``"
msgstr "``/usr/bin/env``"

#: ../../using/windows.rst:920
msgid "``/usr/bin/python``"
msgstr "``/usr/bin/python``"

#: ../../using/windows.rst:921
msgid "``/usr/local/bin/python``"
msgstr "``/usr/local/bin/python``"

#: ../../using/windows.rst:922
msgid "``python``"
msgstr "``python``"

#: ../../using/windows.rst:924
msgid "For example, if the first line of your script starts with"
msgstr "例如，如果脚本开始的第一行为"

#: ../../using/windows.rst:926
msgid "#! /usr/bin/python"
msgstr "#! /usr/bin/python"

#: ../../using/windows.rst:930
msgid ""
"The default Python or an active virtual environment will be located and "
"used. As many Python scripts written to work on Unix will already have this "
"line, you should find these scripts can be used by the launcher without "
"modification. If you are writing a new script on Windows which you hope will"
" be useful on Unix, you should use one of the shebang lines starting with "
"``/usr``."
msgstr ""
"将找到并使用默认的 Python 或激活的虚拟环境。 因为在 Unix 上编写的许多 Python "
"脚本都已经有了这一行，你应该会发现这些脚本可以由启动器使用而无需修改。 如果你在 Windows 上编写一个新脚本并希望其在 Unix "
"上可用，你应当使用某个以 ``/usr`` 开头的 shebang 行。"

#: ../../using/windows.rst:936
msgid ""
"Any of the above virtual commands can be suffixed with an explicit version "
"(either just the major version, or the major and minor version). Furthermore"
" the 32-bit version can be requested by adding \"-32\" after the minor "
"version. I.e. ``/usr/bin/python3.7-32`` will request usage of the 32-bit "
"Python 3.7. If a virtual environment is active, the version will be ignored "
"and the environment will be used."
msgstr ""
"任何上述虚拟命令都可以附带一个显式版本号的后缀（可以是只有主版本号，也可以是有主版本号和次版本号）。 此外还可以在次版本号之后添加 \"-32\" "
"来请求 32 位版本。 即 ``/usr/bin/python3.7-32`` 将请求使用 32 位的 Python 3.7。 "
"如果激活了一个虚拟环境，则将忽略版本号并使用激活的环境。"

#: ../../using/windows.rst:945
msgid ""
"Beginning with python launcher 3.7 it is possible to request 64-bit version "
"by the \"-64\" suffix. Furthermore it is possible to specify a major and "
"architecture without minor (i.e. ``/usr/bin/python3-64``)."
msgstr ""
"从 python 启动器 3.7 开始，可以通过 \"-64\" 后缀调用 64 位版本。 此外还可以指定一个主版本号加架构而不带次版本号 (即 "
"``/usr/bin/python3-64``)。"

#: ../../using/windows.rst:951
msgid ""
"The \"-64\" suffix is deprecated, and now implies \"any architecture that is"
" not provably i386/32-bit\". To request a specific environment, use the new "
":samp:`-V:{TAG}` argument with the complete tag."
msgstr ""
"“-64”后缀已被弃用，现在会被视为“任何不被确定为 i386/32 位的架构”。 要请求一个特定的环境，请使用新的 :samp:`-V:{TAG}` "
"参数并附带完整的标签。"

#: ../../using/windows.rst:957
msgid ""
"Virtual commands referencing ``python`` now prefer an active virtual "
"environment rather than searching :envvar:`PATH`. This handles cases where "
"the shebang specifies ``/usr/bin/env python3`` but :file:`python3.exe` is "
"not present in the active environment."
msgstr ""
"引用了 ``python`` 的虚拟命令现在会优先使用激活的虚拟环境再去搜索 :envvar:`PATH`。 这是为了处理 shebang 指定了 "
"``/usr/bin/env python3`` 但激活的环境中没有 :file:`python3.exe` 的情况。"

#: ../../using/windows.rst:962
msgid ""
"The ``/usr/bin/env`` form of shebang line has one further special property. "
"Before looking for installed Python interpreters, this form will search the "
"executable :envvar:`PATH` for a Python executable matching the name provided"
" as the first argument. This corresponds to the behaviour of the Unix "
"``env`` program, which performs a :envvar:`PATH` search. If an executable "
"matching the first argument after the ``env`` command cannot be found, but "
"the argument starts with ``python``, it will be handled as described for the"
" other virtual commands. The environment variable "
":envvar:`!PYLAUNCHER_NO_SEARCH_PATH` may be set (to any value) to skip this "
"search of :envvar:`PATH`."
msgstr ""

#: ../../using/windows.rst:973
msgid ""
"Shebang lines that do not match any of these patterns are looked up in the "
"``[commands]`` section of the launcher's :ref:`.INI file <launcher-ini>`. "
"This may be used to handle certain commands in a way that makes sense for "
"your system. The name of the command must be a single argument (no spaces in"
" the shebang executable), and the value substituted is the full path to the "
"executable (additional arguments specified in the .INI will be quoted as "
"part of the filename)."
msgstr ""
"无法匹配这些模式中任何一个的井号叹号行将在启动器的 :ref:`.INI 文件 <launcher-ini>` 的 ``[commands]`` "
"一节中查找。 这可被用来以对你的系统来说有意义的方式处理某些命令。 "
"命名的名称必须是一个单独的参数（在井号叹号行的可执行程序中不可有空格），而被替代的值则是该可执行程序的完整路径（在 .INI "
"中指定的附加参数将作为文件名的一部分被引用）。"

#: ../../using/windows.rst:981
msgid ""
"[commands]\n"
"/bin/xpython=C:\\Program Files\\XPython\\python.exe"
msgstr ""
"[commands]\n"
"/bin/xpython=C:\\Program Files\\XPython\\python.exe"

#: ../../using/windows.rst:986
msgid ""
"Any commands not found in the .INI file are treated as **Windows** "
"executable paths that are absolute or relative to the directory containing "
"the script file. This is a convenience for Windows-only scripts, such as "
"those generated by an installer, since the behavior is not compatible with "
"Unix-style shells. These paths may be quoted, and may include multiple "
"arguments, after which the path to the script and any additional arguments "
"will be appended."
msgstr ""
"任何未出现在 .INI 文件中的命令都会被当作 **Windows** 可执行程序的绝对或相对于包含脚本文件的目录的路径。 这对于 Windows "
"专属的脚本来说很方便，例如由安装器所生成的脚本，因为此行为与 Unix 风格的 shell 是不兼容的。 "
"这些路径可以加上引号，并可以包含多个参数，在它之后将会加上脚本路径以及任何附加参数。"

#: ../../using/windows.rst:995
msgid "Arguments in shebang lines"
msgstr "shebang 行的参数"

#: ../../using/windows.rst:997
msgid ""
"The shebang lines can also specify additional options to be passed to the "
"Python interpreter.  For example, if you have a shebang line:"
msgstr "shebang 行还可以指定要传递给Python解释器的其他选项。 举例来说，如果你有这样的 shebang 行："

#: ../../using/windows.rst:1000
msgid "#! /usr/bin/python -v"
msgstr "#! /usr/bin/python -v"

#: ../../using/windows.rst:1004
msgid "Then Python will be started with the ``-v`` option"
msgstr "那么 Python 将以 ``-v`` 选项启动"

#: ../../using/windows.rst:1007
msgid "Customization"
msgstr "自定义"

#: ../../using/windows.rst:1012
msgid "Customization via INI files"
msgstr "通过INI文件自定义"

#: ../../using/windows.rst:1014
msgid ""
"Two .ini files will be searched by the launcher - ``py.ini`` in the current "
"user's application data directory (``%LOCALAPPDATA%`` or "
"``$env:LocalAppData``) and ``py.ini`` in the same directory as the launcher."
" The same .ini files are used for both the 'console' version of the launcher"
" (i.e. py.exe) and for the 'windows' version (i.e. pyw.exe)."
msgstr ""
"启动器将搜索两个 .ini 文件 —— 当前用户应用程序数据目录中的 ``py.ini`` (``%LOCALAPPDATA%`` 或 "
"``$env:LocalAppData``) 以及启动器所在目录中的 ``py.ini``。 同样的 .ini 文件还会被用于启动器的‘控制台’版本 "
"(即 py.exe) 和‘窗口’版本 (即 pyw.exe)。"

#: ../../using/windows.rst:1020
msgid ""
"Customization specified in the \"application directory\" will have "
"precedence over the one next to the executable, so a user, who may not have "
"write access to the .ini file next to the launcher, can override commands in"
" that global .ini file."
msgstr ""
"“应用程序目录”中指定的自定义优先于可执行文件旁边.ini文件的自定义，因此对启动程序旁边的.ini文件不具有写访问权限的用户可以覆盖该全局.ini文件中的命令。"

#: ../../using/windows.rst:1025
msgid "Customizing default Python versions"
msgstr "自定义默认的Python版本"

#: ../../using/windows.rst:1027
msgid ""
"In some cases, a version qualifier can be included in a command to dictate "
"which version of Python will be used by the command. A version qualifier "
"starts with a major version number and can optionally be followed by a "
"period ('.') and a minor version specifier. Furthermore it is possible to "
"specify if a 32 or 64 bit implementation shall be requested by adding "
"\"-32\" or \"-64\"."
msgstr ""
"在某些情况下，可以在命令中包含版本限定符，以指定命令将使用哪个Python版本。版本限定符以主版本号开头，可以选择后跟 ('.') "
"和次版本说明符。此外，可以通过添加 \"-32\" 或 “-64” 来指定是请求32位还是64位实现。"

#: ../../using/windows.rst:1033
msgid ""
"For example, a shebang line of ``#!python`` has no version qualifier, while "
"``#!python3`` has a version qualifier which specifies only a major version."
msgstr ""
"例如，一个shebang 行的 ``#!python`` 行没有版本限定符，而 ``#!python3`` 有一个版本限定符，它只指定一个主版本。"

#: ../../using/windows.rst:1036
msgid ""
"If no version qualifiers are found in a command, the environment variable "
":envvar:`!PY_PYTHON` can be set to specify the default version qualifier. If"
" it is not set, the default is \"3\". The variable can specify any value "
"that may be passed on the command line, such as \"3\", \"3.7\", \"3.7-32\" "
"or \"3.7-64\". (Note that the \"-64\" option is only available with the "
"launcher included with Python 3.7 or newer.)"
msgstr ""

#: ../../using/windows.rst:1043
msgid ""
"If no minor version qualifiers are found, the environment variable "
"``PY_PYTHON{major}`` (where ``{major}`` is the current major version "
"qualifier as determined above) can be set to specify the full version. If no"
" such option is found, the launcher will enumerate the installed Python "
"versions and use the latest minor release found for the major version, which"
" is likely, although not guaranteed, to be the most recently installed "
"version in that family."
msgstr ""
"如果没有找到次版本限定符，则可以设置环境变量 ``PY_PYTHON{major}`` （其中 ``{major}`` "
"是上面确定的当前主要版本限定符）以指定完整版本。如果没有找到这样的选项，启动器将枚举已安装的Python版本并使用为主要版本找到的最新次要版本，尽管不能保证，但该版本可能是该系列中最新安装的版本。"

#: ../../using/windows.rst:1051
msgid ""
"On 64-bit Windows with both 32-bit and 64-bit implementations of the same "
"(major.minor) Python version installed, the 64-bit version will always be "
"preferred. This will be true for both 32-bit and 64-bit implementations of "
"the launcher - a 32-bit launcher will prefer to execute a 64-bit Python "
"installation of the specified version if available. This is so the behavior "
"of the launcher can be predicted knowing only what versions are installed on"
" the PC and without regard to the order in which they were installed (i.e., "
"without knowing whether a 32 or 64-bit version of Python and corresponding "
"launcher was installed last). As noted above, an optional \"-32\" or \"-64\""
" suffix can be used on a version specifier to change this behaviour."
msgstr ""
"在安装了相同（major.minor）Python版本的32位和64位的64位Windows上，64位版本将始终是首选。对于启动程序的32位和64位实现都是如此"
" -- 这对于启动程序32位和64位都是正确的 -- "
"如果可用，32位启动程序将倾向于执行指定版本的64位Python安装。这样就可以预测启动器的行为，只知道PC上安装了哪些版本，而不考虑它们的安装顺序（即，不知道32位或64位版本的Python和相应的启动器是否是最后安装）。如上所述，可以在版本说明符上使用可选的“-32”或“-64”后缀来更改此行为。"

#: ../../using/windows.rst:1062
msgid "Examples:"
msgstr "示例："

#: ../../using/windows.rst:1064
msgid ""
"If no relevant options are set, the commands ``python`` and ``python2`` will"
" use the latest Python 2.x version installed and the command ``python3`` "
"will use the latest Python 3.x installed."
msgstr ""
"如果没有设置相关选项，命令 ``python`` 和 ``python2`` 将使用安装的最新Python 2.x版本，命令 ``python3`` "
"将使用最新安装的Python 3.x."

#: ../../using/windows.rst:1068
msgid ""
"The command ``python3.7`` will not consult any options at all as the "
"versions are fully specified."
msgstr "命令 ``python3.7`` 根本不会查阅任何选项，因为版本已完全指定。"

#: ../../using/windows.rst:1071
msgid ""
"If ``PY_PYTHON=3``, the commands ``python`` and ``python3`` will both use "
"the latest installed Python 3 version."
msgstr "如果 ``PY_PYTHON=3`` ，命令 ``python`` 和 ``python3`` 都将使用最新安装的Python 3版本。"

#: ../../using/windows.rst:1074
msgid ""
"If ``PY_PYTHON=3.7-32``, the command ``python`` will use the 32-bit "
"implementation of 3.7 whereas the command ``python3`` will use the latest "
"installed Python (PY_PYTHON was not considered at all as a major version was"
" specified.)"
msgstr ""
"如果 ``PY_PYTHON=3.7-32`` ，命令 ``python`` 将使用3.7的32位实现，而命令 ``python3`` "
"将使用最新安装的Python（PY_PYTHON根本没有被视为指定了主要版本。）"

#: ../../using/windows.rst:1079
msgid ""
"If ``PY_PYTHON=3`` and ``PY_PYTHON3=3.7``, the commands ``python`` and "
"``python3`` will both use specifically 3.7"
msgstr ""
"如果 ``PY_PYTHON=3`` 且 ``PY_PYTHON3=3.7`` ，命令 ``python`` 和 ``python3`` "
"都将特别使用3.7"

#: ../../using/windows.rst:1082
msgid ""
"In addition to environment variables, the same settings can be configured in"
" the .INI file used by the launcher.  The section in the INI file is called "
"``[defaults]`` and the key name will be the same as the environment "
"variables without the leading ``PY_`` prefix (and note that the key names in"
" the INI file are case insensitive.)  The contents of an environment "
"variable will override things specified in the INI file."
msgstr ""
"除环境变量外，还可以在启动程序使用的.INI文件中配置相同的设置。 INI文件中的部分称为 ``[defaults]`` ，键名称将与没有前导 "
"``PY_`` 前缀的环境变量相同（并注意INI文件中的键名不区分大小写） 。）环境变量的内容将覆盖INI文件中指定的内容。"

#: ../../using/windows.rst:1089
msgid "For example:"
msgstr "例如:"

#: ../../using/windows.rst:1091
msgid "Setting ``PY_PYTHON=3.7`` is equivalent to the INI file containing:"
msgstr "设置 ``PY_PYTHON=3.7`` 等同于包含以下内容的INI文件："

#: ../../using/windows.rst:1093
msgid ""
"[defaults]\n"
"python=3.7"
msgstr ""
"[defaults]\n"
"python=3.7"

#: ../../using/windows.rst:1098
msgid ""
"Setting ``PY_PYTHON=3`` and ``PY_PYTHON3=3.7`` is equivalent to the INI file"
" containing:"
msgstr "设置 ``PY_PYTHON=3`` 和 ``PY_PYTHON3=3.7`` 相当于包含以下内容的INI文件："

#: ../../using/windows.rst:1101
msgid ""
"[defaults]\n"
"python=3\n"
"python3=3.7"
msgstr ""
"[defaults]\n"
"python=3\n"
"python3=3.7"

#: ../../using/windows.rst:1108
msgid "Diagnostics"
msgstr "诊断"

#: ../../using/windows.rst:1110
msgid ""
"If an environment variable :envvar:`!PYLAUNCHER_DEBUG` is set (to any "
"value), the launcher will print diagnostic information to stderr (i.e. to "
"the console). While this information manages to be simultaneously verbose "
"*and* terse, it should allow you to see what versions of Python were "
"located, why a particular version was chosen and the exact command-line used"
" to execute the target Python. It is primarily intended for testing and "
"debugging."
msgstr ""

#: ../../using/windows.rst:1118
msgid "Dry Run"
msgstr "试运行"

#: ../../using/windows.rst:1120
msgid ""
"If an environment variable :envvar:`!PYLAUNCHER_DRYRUN` is set (to any "
"value), the launcher will output the command it would have run, but will not"
" actually launch Python. This may be useful for tools that want to use the "
"launcher to detect and then launch Python directly. Note that the command "
"written to standard output is always encoded using UTF-8, and may not render"
" correctly in the console."
msgstr ""

#: ../../using/windows.rst:1128
msgid "Install on demand"
msgstr "按需安装"

#: ../../using/windows.rst:1130
msgid ""
"If an environment variable :envvar:`!PYLAUNCHER_ALLOW_INSTALL` is set (to "
"any value), and the requested Python version is not installed but is "
"available on the Microsoft Store, the launcher will attempt to install it. "
"This may require user interaction to complete, and you may need to run the "
"command again."
msgstr ""

#: ../../using/windows.rst:1135
msgid ""
"An additional :envvar:`!PYLAUNCHER_ALWAYS_INSTALL` variable causes the "
"launcher to always try to install Python, even if it is detected. This is "
"mainly intended for testing (and should be used with "
":envvar:`!PYLAUNCHER_DRYRUN`)."
msgstr ""

#: ../../using/windows.rst:1140
msgid "Return codes"
msgstr "返回码"

#: ../../using/windows.rst:1142
msgid ""
"The following exit codes may be returned by the Python launcher. "
"Unfortunately, there is no way to distinguish these from the exit code of "
"Python itself."
msgstr "Python 启动器可能返回以下的退出码。 不幸的是，没有任何办法可以将这些退出码与 Python 本身的退出码区分开来。"

#: ../../using/windows.rst:1145
msgid ""
"The names of codes are as used in the sources, and are only for reference. "
"There is no way to access or resolve them apart from reading this page. "
"Entries are listed in alphabetical order of names."
msgstr "退出码的名称将在源代码中使用，并且仅供参考。 除了阅读本页面以外没有其他办法可以获取或解读它们。 这些条目是以名称的字母顺序列出的。"

#: ../../using/windows.rst:1150
msgid "Value"
msgstr "值"

#: ../../using/windows.rst:1152
msgid "RC_BAD_VENV_CFG"
msgstr "RC_BAD_VENV_CFG"

#: ../../using/windows.rst:1152
msgid "107"
msgstr "107"

#: ../../using/windows.rst:1152
msgid "A :file:`pyvenv.cfg` was found but is corrupt."
msgstr "找到了 :file:`pyvenv.cfg` 但文件已损坏。"

#: ../../using/windows.rst:1154
msgid "RC_CREATE_PROCESS"
msgstr "RC_CREATE_PROCESS"

#: ../../using/windows.rst:1154
msgid "101"
msgstr "101"

#: ../../using/windows.rst:1154
msgid "Failed to launch Python."
msgstr "启动 Python 失败。"

#: ../../using/windows.rst:1156
msgid "RC_INSTALLING"
msgstr "RC_INSTALLING"

#: ../../using/windows.rst:1156
msgid "111"
msgstr "111"

#: ../../using/windows.rst:1156
msgid ""
"An install was started, but the command will need to be re-run after it "
"completes."
msgstr "安装已启动，但命令需要在其完成后重新运行。"

#: ../../using/windows.rst:1159
msgid "RC_INTERNAL_ERROR"
msgstr "RC_INTERNAL_ERROR"

#: ../../using/windows.rst:1159
msgid "109"
msgstr "109"

#: ../../using/windows.rst:1159
msgid "Unexpected error. Please report a bug."
msgstr "未预期的错误。 请报告程序错误。"

#: ../../using/windows.rst:1161
msgid "RC_NO_COMMANDLINE"
msgstr "RC_NO_COMMANDLINE"

#: ../../using/windows.rst:1161
msgid "108"
msgstr "108"

#: ../../using/windows.rst:1161
msgid "Unable to obtain command line from the operating system."
msgstr "无法从操作系统获取命令行。"

#: ../../using/windows.rst:1164
msgid "RC_NO_PYTHON"
msgstr "RC_NO_PYTHON"

#: ../../using/windows.rst:1164
msgid "103"
msgstr "103"

#: ../../using/windows.rst:1164
msgid "Unable to locate the requested version."
msgstr "无法定位所请求的版本。"

#: ../../using/windows.rst:1166
msgid "RC_NO_VENV_CFG"
msgstr "RC_NO_VENV_CFG"

#: ../../using/windows.rst:1166
msgid "106"
msgstr "106"

#: ../../using/windows.rst:1166
msgid "A :file:`pyvenv.cfg` was required but not found."
msgstr "需要 :file:`pyvenv.cfg` 但没有找到。"

#: ../../using/windows.rst:1174
msgid "Finding modules"
msgstr "查找模块"

#: ../../using/windows.rst:1176
msgid ""
"These notes supplement the description at :ref:`sys-path-init` with detailed"
" Windows notes."
msgstr "这些注释以详细的 Windows 注释对 :ref:`sys-path-init` 中的描述进行了补充。"

#: ../../using/windows.rst:1179
msgid ""
"When no ``._pth`` file is found, this is how :data:`sys.path` is populated "
"on Windows:"
msgstr "当找不到 ``._pth`` 文件时， :data:`sys.path` 是如何在Windows上填充的："

#: ../../using/windows.rst:1182
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr "在开始时，添加一个空条目，该条目对应于当前目录。"

#: ../../using/windows.rst:1185
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in "
":ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""
"如果环境变量 :envvar:`PYTHONPATH` 存在，如 :ref:`using-on-envvars` "
"中所述，则接下来添加其条目。请注意，在Windows上，此变量中的路径必须用分号分隔，以区别于驱动器标识符中使用的冒号（ ``C:\\``  等）。"

#: ../../using/windows.rst:1190
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of "
":samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` "
"under both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  "
"Subkeys which have semicolon-delimited path strings as their default value "
"will cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""
"额外的 \"应用程序路径\" 可以作为子键被同时添加到注册表 ``HKEY_CURRENT_USER`` 和 "
"``HKEY_LOCAL_MACHINE`` 分支下的 "
":samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` 中。 "
"以分号分隔的路径字符串作为默认值的子键将导致每个路径都被添加到 :data:`sys.path` 中。 （请注意所有已知的安装程序都只使用 "
"HKLM，因此 HKCU 通常为空。）"

#: ../../using/windows.rst:1197
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (either ``Lib\\os.py`` or ``pythonXY.zip``) to"
" deduce the \"Python Home\".  If a Python home is found, the relevant sub-"
"directories added to :data:`sys.path` (``Lib``, ``plat-win``, etc) are based"
" on that folder.  Otherwise, the core Python path is constructed from the "
"PythonPath stored in the registry."
msgstr ""
"如果设置了环境变量 :envvar:`PYTHONHOME`  ，则将其假定为 “Python 主目录” 。否则，主Python可执行文件的路径用于定位"
" “landmark 文件” （ ``Lib\\os.py`` 或 ``pythonXY.zip`` ）以推断 ”Python 主目录“ "
"。如果找到了Python主目录，则基于该文件夹将相关的子目录添加到 :data:`sys.path` （``Lib`` , ``plat-win`` "
"等）。否则，核心Python路径是从存储在注册表中的PythonPath构造的。"

#: ../../using/windows.rst:1205
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""
"如果找不到Python Home，也没有指定 :envvar:`PYTHONPATH` 环境变量，并且找不到注册表项，则使用具有相对条目的默认路径（例如"
" ``.\\Lib; .\\plat-win`` 等等）。"

#: ../../using/windows.rst:1209
msgid ""
"If a ``pyvenv.cfg`` file is found alongside the main executable or in the "
"directory one level above the executable, the following variations apply:"
msgstr "如果在主可执行文件旁边或在可执行文件上一级的目录中找到 ``pyvenv.cfg`` 文件，则以下变体适用："

#: ../../using/windows.rst:1212
msgid ""
"If ``home`` is an absolute path and :envvar:`PYTHONHOME` is not set, this "
"path is used instead of the path to the main executable when deducing the "
"home location."
msgstr ""
"如果 ``home`` 是一个绝对路径，并且 :envvar:`PYTHONHOME` 未设置，则在推断起始位置时使用此路径而不是主可执行文件的路径。"

#: ../../using/windows.rst:1216
msgid "The end result of all this is:"
msgstr "这一切的最终结果是："

#: ../../using/windows.rst:1218
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are"
" ignored.  Other \"application paths\" in the registry are always read."
msgstr ""
"运行 :file:`python.exe` "
"，或主Python目录中的任何其他.exe（安装版本，或直接来自PCbuild目录）时，推导出核心路径，并忽略注册表中的核心路径。始终读取注册表中的其他“应用程序路径”。"

#: ../../using/windows.rst:1223
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""
"当Python托管在另一个.exe（不同的目录，通过COM嵌入等）时，将不会推断出“Python "
"Home”，因此使用了来自注册表的核心路径。始终读取注册表中的其他“应用程序路径”。"

#: ../../using/windows.rst:1227
msgid ""
"If Python can't find its home and there are no registry value (frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""
"如果Python找不到它的主目录并且没有注册表值（冻结的.exe，一些非常奇怪的安装设置），那么你会得到一条带有一些默认但相对的路径的路径。"

#: ../../using/windows.rst:1231
msgid ""
"For those who want to bundle Python into their application or distribution, "
"the following advice will prevent conflicts with other installations:"
msgstr "对于那些想要将Python捆绑到其应用程序或发行版中的人，以下建议将防止与其他安装冲突："

#: ../../using/windows.rst:1234
msgid ""
"Include a ``._pth`` file alongside your executable containing the "
"directories to include. This will ignore paths listed in the registry and "
"environment variables, and also ignore :mod:`site` unless ``import site`` is"
" listed."
msgstr ""
"在您的可执行文件中包含一个 ``._pth`` 文件，其中包含目录。这将忽略注册表和环境变量中列出的路径，并忽略 :mod:`site` ，除非列出 "
"``import site`` 。"

#: ../../using/windows.rst:1239
msgid ""
"If you are loading :file:`python3.dll` or :file:`python37.dll` in your own "
"executable, explicitly set :c:member:`PyConfig.module_search_paths` before "
":c:func:`Py_InitializeFromConfig`."
msgstr ""
"如果你在自己的可执行文件中加载 :file:`python3.dll` 或 :file:`python37.dll`，请在 "
":c:func:`Py_InitializeFromConfig` 之前显式地设置 "
":c:member:`PyConfig.module_search_paths`。"

#: ../../using/windows.rst:1243
msgid ""
"Clear and/or overwrite :envvar:`PYTHONPATH` and set :envvar:`PYTHONHOME` "
"before launching :file:`python.exe` from your application."
msgstr ""
"清除 和/或 覆盖 :envvar:`PYTHONPATH` 并在启动来自应用程序的 :file:`python.exe` 之前设置 "
":envvar:`PYTHONHOME` 。"

#: ../../using/windows.rst:1246
msgid ""
"If you cannot use the previous suggestions (for example, you are a "
"distribution that allows people to run :file:`python.exe` directly), ensure "
"that the landmark file (:file:`Lib\\\\os.py`) exists in your install "
"directory. (Note that it will not be detected inside a ZIP file, but a "
"correctly named ZIP file will be detected instead.)"
msgstr ""
"如果您不能使用前面的建议（例如，您是一个允许人们直接运行 :file:`python.exe` 的分发版），请确保安装目录中存在 landmark 文件"
" (:file:`Lib\\\\os.py`)。 （请注意，在 ZIP 文件中不会检测到该文件，但会检测到正确命名的 ZIP 文件。）"

#: ../../using/windows.rst:1252
msgid ""
"These will ensure that the files in a system-wide installation will not take"
" precedence over the copy of the standard library bundled with your "
"application. Otherwise, your users may experience problems using your "
"application. Note that the first suggestion is the best, as the others may "
"still be susceptible to non-standard paths in the registry and user site-"
"packages."
msgstr ""
"这些将确保系统范围安装中的文件不会优先于与应用程序捆绑在一起的标准库的副本。否则，用户可能会在使用您的应用程序时遇到问题请注意，第一个建议是最好的，因为其他建议可能仍然容易受到注册表和用户站点包中的非标准路径的影响。"

#: ../../using/windows.rst:1260
msgid ""
"Add ``._pth`` file support and removes ``applocal`` option from "
"``pyvenv.cfg``."
msgstr "添加 ``._pth`` 文件支持并从 ``pyvenv.cfg`` 中移除了 ``applocal`` 选项。"

#: ../../using/windows.rst:1265
msgid ""
"Add :file:`python{XX}.zip` as a potential landmark when directly adjacent to"
" the executable."
msgstr "当与可执行文件直接相邻时将添加 :file:`python{XX}.zip` 作为潜在的标志物。"

#: ../../using/windows.rst:1270
msgid ""
"Modules specified in the registry under ``Modules`` (not ``PythonPath``) may"
" be imported by :class:`importlib.machinery.WindowsRegistryFinder`. This "
"finder is enabled on Windows in 3.6.0 and earlier, but may need to be "
"explicitly added to :data:`sys.meta_path` in the future."
msgstr ""
"在 ``Modules`` (不是 ``PythonPath``) 下的注册表中指定的模块可以通过 "
":class:`importlib.machinery.WindowsRegistryFinder` 导入。 在 Windows 上此查找器在 "
"3.6.0 及更早版本中被启用，但在将来可能需要显式地添加到 :data:`sys.meta_path`。"

#: ../../using/windows.rst:1276
msgid "Additional modules"
msgstr "附加模块"

#: ../../using/windows.rst:1278
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr "尽管Python的目标是在所有平台中都可移植，但是Windows有一些独特的特性。在标准库和外部都有一些模块和代码片段在使用这些特性。"

#: ../../using/windows.rst:1282
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-"
"specific-services`."
msgstr "特定于Windows的标准模块记录在 :ref:`mswin-specific-services` 中。"

#: ../../using/windows.rst:1286
msgid "PyWin32"
msgstr "PyWin32"

#: ../../using/windows.rst:1288
msgid ""
"The :pypi:`PyWin32` module by Mark Hammond is a collection of modules for "
"advanced Windows-specific support.  This includes utilities for:"
msgstr ""
"Mark Hammond 编写的 :pypi:`PyWin32` 模块是一组用于高级 Windows 专属支持的模块。 这包括以下实用工具："

#: ../../using/windows.rst:1292
msgid ""
"`Component Object Model "
"<https://learn.microsoft.com/windows/win32/com/component-object-model--com--"
"portal>`_ (COM)"
msgstr ""
"`Component Object Model "
"<https://learn.microsoft.com/windows/win32/com/component-object-model--com--"
"portal>`_ (COM)"

#: ../../using/windows.rst:1295
msgid "Win32 API calls"
msgstr "Win32 API 调用"

#: ../../using/windows.rst:1296
msgid "Registry"
msgstr "注册"

#: ../../using/windows.rst:1297
msgid "Event log"
msgstr "事件日志"

#: ../../using/windows.rst:1298
msgid ""
"`Microsoft Foundation Classes <https://learn.microsoft.com/cpp/mfc/mfc-"
"desktop-applications>`_ (MFC) user interfaces"
msgstr ""
"`Microsoft Foundation Classes <https://learn.microsoft.com/cpp/mfc/mfc-"
"desktop-applications>`_ (MFC) 用户接口"

#: ../../using/windows.rst:1302
msgid ""
"`PythonWin <https://web.archive.org/web/20060524042422/ "
"https://www.python.org/windows/pythonwin/>`_ is a sample MFC application "
"shipped with PyWin32.  It is an embeddable IDE with a built-in debugger."
msgstr ""
"`PythonWin <https://web.archive.org/web/20060524042422/ "
"https://www.python.org/windows/pythonwin/>`_ "
"是PyWin32附带的一个示例MFC应用程序。它是一个内置调试器的可嵌入IDE。"

#: ../../using/windows.rst:1308
msgid ""
"`Win32 How Do I...? <https://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""
"`Win32 How Do I...? <https://timgolden.me.uk/python/win32_how_do_i.html>`_"

#: ../../using/windows.rst:1309
msgid "by Tim Golden"
msgstr "Tim Golden 著"

#: ../../using/windows.rst:1311
msgid "`Python and COM <https://www.boddie.org.uk/python/COM.html>`_"
msgstr "`Python and COM <https://www.boddie.org.uk/python/COM.html>`_"

#: ../../using/windows.rst:1312
msgid "by David and Paul Boddie"
msgstr "David 和 Paul Boddie 著"

#: ../../using/windows.rst:1316
msgid "cx_Freeze"
msgstr "cx_Freeze"

#: ../../using/windows.rst:1318
msgid ""
"`cx_Freeze <https://cx-freeze.readthedocs.io/en/latest/>`_ wraps Python "
"scripts into executable Windows programs (:file:`{*}.exe` files).  When you "
"have done this, you can distribute your application without requiring your "
"users to install Python."
msgstr ""
"`cx_Freeze <https://cx-freeze.readthedocs.io/en/latest/>`_ 将 Python "
"脚本包装成可执行的 Windows 程序 (:file:`{*}.exe` 文件)。 当你完成此操作后，你就可以分发你的应用程序而无需用户安装 "
"Python。"

#: ../../using/windows.rst:1325
msgid "Compiling Python on Windows"
msgstr "在Windows上编译Python"

#: ../../using/windows.rst:1327
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `checkout "
"<https://devguide.python.org/setup/#get-the-source-code>`_."
msgstr ""
"如果你想要自己编译 CPython，首先要做的是获取 `源代码 "
"<https://www.python.org/downloads/source/>`_。 你可以下载最新发行版的源代码或是执行最新的 `签出 "
"<https://devguide.python.org/setup/#get-the-source-code>`_。"

#: ../../using/windows.rst:1332
msgid ""
"The source tree contains a build solution and project files for Microsoft "
"Visual Studio, which is the compiler used to build the official Python "
"releases. These files are in the :file:`PCbuild` directory."
msgstr ""
"源代码树包含Microsoft Visual Studio的构建解决方案和项目文件，它是用于构建官方Python版本的编译器。这些文件位于 "
":file:`PCbuild` 目录中。"

#: ../../using/windows.rst:1336
msgid ""
"Check :file:`PCbuild/readme.txt` for general information on the build "
"process."
msgstr "检查 :file:`PCbuild/readme.txt` 以获取有关构建过程的一般信息。"

#: ../../using/windows.rst:1338
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr "有关扩展模块，请参阅 :ref:`building-on-windows` 。"

#: ../../using/windows.rst:1342
msgid "Other Platforms"
msgstr "其他平台"

#: ../../using/windows.rst:1344
msgid ""
"With ongoing development of Python, some platforms that used to be supported"
" earlier are no longer supported (due to the lack of users or developers). "
"Check :pep:`11` for details on all unsupported platforms."
msgstr ""
"随着Python的不断发展，不再支持以前曾经支持的一些平台（由于缺少用户或开发人员）。检查 :pep:`11` 了解所有不支持的平台的详细信息。"

#: ../../using/windows.rst:1348
msgid ""
"`Windows CE <https://pythonce.sourceforge.net/>`_ is `no longer supported "
"<https://github.com/python/cpython/issues/71542>`__ since Python 3 (if it "
"ever was)."
msgstr ""
"`Windows CE <https://pythonce.sourceforge.net/>`_ 自 Python 3 起 `不再受支持 "
"<https://github.com/python/cpython/issues/71542>`__ (如果曾经受支持的话)。"

#: ../../using/windows.rst:1351
msgid ""
"The `Cygwin <https://cygwin.com/>`_ installer offers to install the `Python "
"interpreter <https://cygwin.com/packages/summary/python3.html>`__ as well"
msgstr ""
"Cygwin `<https://cygwin.com/>`_安装程序也提供了安装 `Python 解释器 "
"<https://cygwin.com/packages/summary/python3.html>`__ 的功能。"

#: ../../using/windows.rst:1355
msgid ""
"See `Python for Windows <https://www.python.org/downloads/windows/>`_ for "
"detailed information about platforms with pre-compiled installers."
msgstr ""
"有关具有预编译安装程序平台的详细信息，请参阅 `Python for Windows "
"<https://www.python.org/downloads/windows/>`_"
