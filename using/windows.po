# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 汇民 王 <whuim@qq.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-05 14:17+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: 汇民 王 <whuim@qq.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/windows.rst:11
msgid "Using Python on Windows"
msgstr "在 Windows 上使用 Python"

#: ../../using/windows.rst:15
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr "本文档旨在概述在 Microsoft Windows 上使用 Python 时应了解的特定于 Windows 的行为。"

#: ../../using/windows.rst:18
msgid ""
"Unlike most Unix systems and services, Windows does not include a system "
"supported installation of Python. Instead, Python can be obtained from a "
"number of distributors, including directly from the CPython team. Each "
"Python distribution will have its own benefits and drawbacks, however, "
"consistency with other tools you are using is generally a worthwhile "
"benefit. Before committing to the process described here, we recommend "
"investigating your existing tools to see if they can provide Python "
"directly."
msgstr ""
"与大多数Unix系统和服务不同，Windows不包括系统支持的Python安装。相反，Python可以从许多发行商获得，包括直接从CPython团队获得。每个Python发行版都有自己的优点和缺点，但是，与您正在使用的其他工具保持一致通常是值得的优点。在使用这里描述的过程之前，我们建议调查您现有的工具，看看它们是否可以直接提供Python。"

#: ../../using/windows.rst:26
msgid ""
"To obtain Python from the CPython team, use the Python Install Manager. This"
" is a standalone tool that makes Python available as global commands on your"
" Windows machine, integrates with the system, and supports updates over "
"time. You can download the Python Install Manager from "
"`python.org/downloads`_ or through the `Microsoft Store app`_."
msgstr ""
"要从 CPython 团队获取 Python，请使用 Python 安装管理器。 这是一个独立的工具，它使 Python 可以作为 Windows "
"机器上的全局命令使用，与系统集成，并支持随时间更新。 您可以从 `python.org/downloads`_ 或通过  `Microsoft "
"Store app`_ 下载 Python 安装管理器。"

#: ../../using/windows.rst:32
msgid ""
"Once you have installed the Python Install Manager, the global ``python`` "
"command can be used from any terminal to launch your current latest version "
"of Python. This version may change over time as you add or remove different "
"versions, and the ``py list`` command will show which is current."
msgstr ""
"一旦安装了Python安装管理器，就可以在任何终端上使用全局命令 ``python`` 启动当前最新版本的 Python。 "
"当您添加或删除不同的版本时，该版本可能会随着时间的推移而变化，``py list`` 命令将显示当前的版本。"

#: ../../using/windows.rst:37
msgid ""
"In general, we recommend that you create a :ref:`virtual environment <tut-"
"venv>` for each project and run ``<env>\\Scripts\\Activate`` in your "
"terminal to use it. This provides isolation between projects, consistency "
"over time, and ensures that additional commands added by packages are also "
"available in your session. Create a virtual environment using ``python -m "
"venv <env path>``."
msgstr ""
"总的来说，我们推荐你为每个项目创建一个 :ref:`虚拟环境 <tut-venv>` 并在你的终端里运行 "
"``<env>\\Scripts\\Activate`` 来使用它。 "
"这提供了项目之间的隔离，时间变化后的一致性，并确保由软件包添加的额外命令在你的会话中同样可用。 创建虚拟环境是使用 ``python -m venv "
"<env path>``。"

#: ../../using/windows.rst:43
msgid ""
"If the ``python`` or ``py`` commands do not seem to be working, please see "
"the :ref:`Troubleshooting <pymanager-troubleshoot>` section below. There are"
" sometimes additional manual steps required to configure your PC."
msgstr ""
"如果 ``python`` 或 ``py`` 命令显示不可用，请查看下面的 :ref:`故障排查 <pymanager-troubleshoot>` "
"一节。 有时还需要额外的手动操作步骤来配置你的 PC。"

#: ../../using/windows.rst:47
msgid ""
"Apart from using the Python install manager, Python can also be obtained as "
"NuGet packages. See :ref:`windows-nuget` below for more information on these"
" packages."
msgstr ""
"除了使用 Python 安装管理器，Python 也可以作为 NuGet 软件包来获取。 请参阅下面的 :ref:`windows-nuget` "
"了解有关这些软件包的更多信息。"

#: ../../using/windows.rst:51
msgid ""
"The embeddable distros are minimal packages of Python suitable for embedding"
" into larger applications. They can be installed using the Python install "
"manager. See :ref:`windows-embeddable` below for more information on these "
"packages."
msgstr ""
"可嵌入分发版是适用于嵌入到更大的应用程序中的最小化的 Python 软件包。 它们可以使用 Python 安装管理器来安装。 请参阅下面的 "
":ref:`windows-embeddable` 了解有关这些软件包的更多信息。"

#: ../../using/windows.rst:64
msgid "Python Install Manager"
msgstr "Python 安装管理器"

#: ../../using/windows.rst:67
msgid "Installation"
msgstr "安装"

#: ../../using/windows.rst:69
msgid ""
"The Python install manager can be installed from the `Microsoft Store app`_ "
"or downloaded and installed from `python.org/downloads`_. The two versions "
"are identical."
msgstr ""
"Python 安装管理器可从 `Microsoft Store app`_ 安装或是从 `python.org/downloads`_ 下载并安装。 "
"这两个版本的内容是一致的。"

#: ../../using/windows.rst:73
msgid ""
"To install through the Store, simply click \"Install\". After it has "
"completed, open a terminal and type ``python`` to get started."
msgstr "要通过 Store 安装，只需点击 \"Install\"。 在安装完成之后，可打开一个终端并键入 ``python`` 以开始使用。"

#: ../../using/windows.rst:76
msgid ""
"To install the file downloaded from python.org, either double-click and "
"select \"Install\", or run ``Add-AppxPackage <path to MSIX>`` in Windows "
"Powershell."
msgstr ""
"要安装从 python.org 下载的文件，只需双击并选择 \"Install\"，或是在 Windows Powershell 中运行 ``Add-"
"AppxPackage <path to MSIX>``。"

#: ../../using/windows.rst:79
msgid ""
"After installation, the ``python``, ``py``, and ``pymanager`` commands "
"should be available. If you have existing installations of Python, or you "
"have modified your :envvar:`PATH` variable, you may need to remove them or "
"undo the modifications. See :ref:`pymanager-troubleshoot` for more help with"
" fixing non-working commands."
msgstr ""
"在安装完成之后，应当可以使用 ``python``, ``py`` 和 ``pymanager`` 等命令。 如果你已经安装了其他版本的 "
"Python，或者已经修改了你的 :envvar:`PATH` 变量，你可能需要移除它们或撤销修改。 请参阅 :ref:`pymanager-"
"troubleshoot` 了解有关修复不可用的命令的更多帮助信息。"

#: ../../using/windows.rst:85
msgid ""
"When you first install a runtime, you will likely be prompted to add a "
"directory to your :envvar:`PATH`. This is optional, if you prefer to use the"
" ``py`` command, but is offered for those who prefer the full range of "
"aliases (such as ``python3.14.exe``) to be available. The directory will be "
":file:`%LocalAppData%\\\\Python\\\\bin` by default, but may be customized by"
" an administrator. Click Start and search for \"Edit environment variables "
"for your account\" for the system settings page to add the path."
msgstr ""
"当你第一次安装一个运行时，你可能会被提示添加一个目录到你的 :envvar:`PATH`。 如果你更喜欢使用 ``py`` "
"命令，这是可选的，但对于那些希望使用全部别名 (例如``python3.14.exe``) 的人来说，这是可选的。 默认目录为 "
":file:`%LocalAppData%\\\\Python\\\\bin`，但可以由管理员自定义。 "
"单击“开始”，在系统设置页面中搜索“编辑帐户的环境变量”，添加路径。"

#: ../../using/windows.rst:93
msgid ""
"Each Python runtime you install will have its own directory for scripts. "
"These also need to be added to :envvar:`PATH` if you want to use them."
msgstr "你安装的每个 Python 运行时都会拥有它自己的脚本目录。 如果你希望使用它们则也需要将其添加到 :envvar:`PATH`。"

#: ../../using/windows.rst:96
msgid ""
"The Python install manager will be automatically updated to new releases. "
"This does not affect any installs of Python runtimes. Uninstalling the "
"Python install manager does not uninstall any Python runtimes."
msgstr ""
"Python 安装管理器将自动更新到最新发布版。 这不会影响任何已安装的 Python 运行时。 卸载 Python 安装管理器不会卸载任何 "
"Python 运行时。"

#: ../../using/windows.rst:100
msgid ""
"If you are not able to install an MSIX in your context, for example, you are"
" using automated deployment software that does not support it, or are "
"targeting Windows Server 2019, please see :ref:`pymanager-advancedinstall` "
"below for more information."
msgstr ""
"如果你无法在你的应用场景上下文中安装 MSIX，举例来说，当你使用不支持它的自动化布署软件，或者是使用 Windows Server "
"2019，请参阅下面的 :ref:`pymanager-advancedinstall` 了解更多信息。"

#: ../../using/windows.rst:107
msgid "Basic Use"
msgstr "基础使用"

#: ../../using/windows.rst:109
msgid ""
"The recommended command for launching Python is ``python``, which will "
"either launch the version requested by the script being launched, an active "
"virtual environment, or the default installed version, which will be the "
"latest stable release unless configured otherwise. If no version is "
"specifically requested and no runtimes are installed at all, the current "
"latest release will be installed automatically."
msgstr ""
"推荐的 Python 启动命令是 "
"``python``，它将启动被运行脚本所请求的版本、激活的虚拟环境版本，或者默认的安装版本，默认的安装版本将是最新稳定发布版除非另有配置。 "
"如果没有请求特定版本且没有安装任何运行时，则会自动安装当前的最新发布版。"

#: ../../using/windows.rst:116
msgid ""
"For all scenarios involving multiple runtime versions, the recommended "
"command is ``py``. This may be used anywhere in place of ``python`` or the "
"older ``py.exe`` launcher. By default, ``py`` matches the behaviour of "
"``python``, but also allows command line options to select a specific "
"version as well as subcommands to manage installations. These are detailed "
"below."
msgstr ""
"对于所有涉及多个运行时版本场景，推荐的命令是 ``py``。 此命令可在任何地方代替 ``python`` 或更老旧的 ``py.exe`` "
"启动器使用。 在默认情况下，``py`` 将匹配 ``python`` 的行为，但也允许通过命令行选项来选择特定版本以及用子命令来管理安装版本。 "
"这将在下文中详细说明。"

#: ../../using/windows.rst:122
msgid ""
"Because the ``py`` command may already be taken by the previous version, "
"there is also an unambiguous ``pymanager`` command. Scripted installs that "
"are intending to use Python install manager should consider using "
"``pymanager``, due to the lower chance of encountering a conflict with "
"existing installs. The only difference between the two commands is when "
"running without any arguments: ``py`` will install and launch your default "
"interpreter, while ``pymanager`` will display help (``pymanager exec ...`` "
"provides equivalent behaviour to ``py ...``)."
msgstr ""
"因为 ``py`` 命令可能已被之前的版本占用了，所以还有一个无歧义的 ``pymanager`` 命令。 希望使用 Python "
"安装管理器的脚本安装程序应当考虑使用 ``pymanager``，这样遇到与现有安装版发生冲突的几率较小。 "
"这两个命令的唯一区别出现在不带任何参数运行的时候: ``py`` 将安装并启动你的默认解释器，而 ``pymanager`` 将显示帮助信息 "
"(``pymanager exec ...`` 提供了与 ``py ...`` 等价的行为)。"

#: ../../using/windows.rst:131
msgid ""
"Each of these commands also has a windowed version that avoids creating a "
"console window. These are ``pyw``, ``pythonw`` and ``pymanagerw``. A "
"``python3`` command is also included that mimics the ``python`` command. It "
"is intended to catch accidental uses of the typical POSIX command on "
"Windows, but is not meant to be widely used or recommended."
msgstr ""
"这些命令还各自拥有一个避免创建控制台窗口的窗口模式版本。 其对应的命令为 ``pyw``, ``pythonw`` 和 ``pymanagerw``。 "
"另外还包括一个相当于 ``python`` 命令的 ``python3`` 命令。 它的目的是在 Windows 上捕获意外使用典型 POSIX "
"命令的情况，但它不应当也不推荐被广泛使用。"

#: ../../using/windows.rst:137
msgid ""
"To launch your default runtime, run ``python`` or ``py`` with the arguments "
"you want to be passed to the runtime (such as script files or the module to "
"launch):"
msgstr "要启动你的默认运行时，则运行 ``python`` 或 ``py`` 并附带你希望传给运行时的参数（如要运行的脚本文件或模块）："

#: ../../using/windows.rst:140
msgid ""
"$> py\n"
"...\n"
"$> python my-script.py\n"
"...\n"
"$> py -m this\n"
"..."
msgstr ""
"$> py\n"
"...\n"
"$> python my-script.py\n"
"...\n"
"$> py -m this\n"
"..."

#: ../../using/windows.rst:149
msgid ""
"The default runtime can be overridden with the "
":envvar:`PYTHON_MANAGER_DEFAULT` environment variable, or a configuration "
"file. See :ref:`pymanager-config` for information about configuration "
"settings."
msgstr ""
"默认运行时可通过 :envvar:`PYTHON_MANAGER_DEFAULT` 环境变量，或配置文件来覆盖。 请参阅 "
":ref:`pymanager-config` 了解有关配置设置的信息。"

#: ../../using/windows.rst:153
msgid ""
"To launch a specific runtime, the ``py`` command accepts a ``-V:<TAG>`` "
"option. This option must be specified before any others. The tag is part or "
"all of the identifier for the runtime; for those from the CPython team, it "
"looks like the version, potentially with the platform. For compatibility, "
"the ``V:`` may be omitted in cases where the tag refers to an official "
"release and starts with ``3``."
msgstr ""
"为了启动特定的运行时，``py`` 命令接受一个 ``-V:<TAG>`` 选项。 该选项必须在任何其他选项之前指定。 "
"该标签包含针对运行时的部分或全部标识符；对于来自 CPython 团队的标识符，看上去类似于版本号，并可能带有平台名称。 "
"为保持兼容性，在标签指代某一官方发布版并且以 ``3`` 开头的情况下 ``V:`` 可以被省略。"

#: ../../using/windows.rst:160
msgid ""
"$> py -V:3.14 ...\n"
"$> py -V:3-arm64 ..."
msgstr ""
"$> py -V:3.14 ...\n"
"$> py -V:3-arm64 ..."

#: ../../using/windows.rst:165
msgid ""
"Runtimes from other distributors may require the *company* to be included as"
" well. This should be separated from the tag by a slash, and may be a "
"prefix. Specifying the company is optional when it is ``PythonCore``, and "
"specifying the tag is optional (but not the slash) when you want the latest "
"release from a specific company."
msgstr ""
"来自其他发行方的运行时还可能包括 *公司名*。 这应当以一个斜杠隔开标签以及可能存在的前缀。 当公司名为 ``PythonCore`` "
"时它可以被省略，而当你想要来自特定公司的最新发布版时指定标签也是可选项（但斜杠是必须的）。"

#: ../../using/windows.rst:171
msgid ""
"$> py -V:Distributor\\1.0 ...\n"
"$> py -V:distrib/ ..."
msgstr ""
"$> py -V:Distributor\\1.0 ...\n"
"$> py -V:distrib/ ..."

#: ../../using/windows.rst:176
msgid ""
"If no version is specified, but a script file is passed, the script will be "
"inspected for a *shebang line*. This is a special format for the first line "
"in a file that allows overriding the command. See :ref:`pymanager-shebang` "
"for more information. When there is no shebang line, or it cannot be "
"resolved, the script will be launched with the default runtime."
msgstr ""
"如果没有指定版本，但是传入了一个脚本文件，则将检查该脚本是否有 *井号叹号行*。 这是一种针对文件首行的允许对命令进行覆盖的特殊格式。 请参阅 "
":ref:`pymanager-shebang` 了解详情。 当不存在井号咍行，或其无法被解析时，脚本将使用默认运行时来启动。"

#: ../../using/windows.rst:182
msgid ""
"If you are running in an active virtual environment, have not requested a "
"particular version, and there is no shebang line, the default runtime will "
"be that virtual environment. In this scenario, the ``python`` command was "
"likely already overridden and none of these checks occurred. However, this "
"behaviour ensures that the ``py`` command can be used interchangeably."
msgstr ""
"如果你在活动的虚拟环境中运行，没有请求特定的版本，并且没有 shebang 行，则默认运行时将是该虚拟环境。 在这种情况下，``python`` "
"命令可能已经被覆盖，并且这些检查都没有发生。 然而，这种行为确保了 ``py`` 命令可以互换使用。"

#: ../../using/windows.rst:188
msgid ""
"When you launch either ``python`` or ``py`` but do not have any runtimes "
"installed, and the requested version is the default, it will be installed "
"automatically and then launched. Otherwise, the requested version will be "
"installed if automatic installation is configured (most likely by setting "
"``PYTHON_MANAGER_AUTOMATIC_INSTALL`` to ``true``), or if the ``py exec`` or "
"``pymanager exec`` forms of the command were used."
msgstr ""
"当你启动``python``或``py``但没有安装任何运行时，并且所请求的版本是默认的，它将自动安装然后启动。否则，如果配置了自动安装（很可能通过将``PYTHON_MANAGER_AUTOMATIC_INSTALL``设置为``true``），或者如果使用了命令的``py"
" exec``或``pymanager exec``形式，则将安装所请求的版本。"

#: ../../using/windows.rst:197
msgid "Command Help"
msgstr "命令帮助"

#: ../../using/windows.rst:199
msgid ""
"The ``py help`` command will display the full list of supported commands, "
"along with their options. Any command may be passed the ``-?`` option to "
"display its help, or its name passed to ``py help``."
msgstr ""
"``py help``命令将显示支持的命令的完整列表，以及它们的选项。任何命令都可以通过``-?``选项显示其帮助，或者将命令的名称传递给``py "
"help``。"

#: ../../using/windows.rst:203
msgid ""
"$> py help\n"
"$> py help install\n"
"$> py install /?"
msgstr ""
"$> py help\n"
"$> py help install\n"
"$> py install /?"

#: ../../using/windows.rst:210
msgid ""
"All commands support some common options, which will be shown by ``py "
"help``. These options must be specified after any subcommand. Specifying "
"``-v`` or ``--verbose`` will increase the amount of output shown, and "
"``-vv`` will increase it further for debugging purposes. Passing ``-q`` or "
"``--quiet`` will reduce output, and ``-qq`` will reduce it further."
msgstr ""
"所有命令都支持一些常用选项，这些选项将通过 ``py help`` 显示。 这些选项必须在任何子命令之后指定。 指定 ``-v`` 或 "
"``--verbose`` 将增加显示的输出信息量，``-vv`` 将进一步增加信息量用于调试目的。 传递 ``-q`` 或 ``--quiet`` "
"将减少输出，``-qq`` 将进一步减少输出。"

#: ../../using/windows.rst:216
msgid ""
"The ``--config=<PATH>`` option allows specifying a configuration file to "
"override multiple settings at once. See :ref:`pymanager-config` below for "
"more information about these files."
msgstr ""
"``--config=<PATH>`` 选项允许指定一个配置文件一次覆盖多个设置。 有关这些文件的更多信息，请参阅下面的 "
":ref:`pymanager-config`。"

#: ../../using/windows.rst:222
msgid "Listing Runtimes"
msgstr "列出运行时"

#: ../../using/windows.rst:224
msgid ""
"$> py list [-f=|--format=<FMT>] [-1|--one] [--online|-s=|--source=<URL>] "
"[<TAG>...]"
msgstr ""
"$> py list [-f=|--format=<FMT>] [-1|--one] [--online|-s=|--source=<URL>] "
"[<TAG>...]"

#: ../../using/windows.rst:228
msgid ""
"The list of installed runtimes can be seen using ``py list``. A filter may "
"be added in the form of one or more tags (with or without company "
"specifier), and each may include a ``<``, ``<=``, ``>=`` or ``>`` prefix to "
"restrict to a range."
msgstr ""
"可以使用``py "
"list``查看已安装的运行时列表。可以以一个或多个标签的形式添加（带或不带公司说明符）过滤器，每个标签都可以包含``<``、``<=``、``>=``、或``>``前缀，以限制一个范围。"

#: ../../using/windows.rst:232
msgid ""
"A range of formats are supported, and can be passed as the "
"``--format=<FMT>`` or ``-f <FMT>`` option. Formats include ``table`` (a user"
" friendly table view), ``csv`` (comma-separated table), ``json`` (a single "
"JSON blob), ``jsonl`` (one JSON blob per result), ``exe`` (just the "
"executable path), ``prefix`` (just the prefix path)."
msgstr ""
"支持一系列格式，可以作为 ``--format=<FMT>`` 或 ``-f <FMT>`` 选项传递。 格式包括 ``table`` "
"(用户友好的表视图)、``csv`` (逗号分隔的表)、``json`` (单个 JSON 块)、``jsonl`` (每个结果一个 JSON "
"块)、``exe`` (只是可执行路径)、``prefix`` (只是前缀路径)。"

#: ../../using/windows.rst:238
msgid ""
"The ``--one`` or ``-1`` option only displays a single result. If the default"
" runtime is included, it will be the one. Otherwise, the \"best\" result is "
"shown (\"best\" is deliberately vaguely defined, but will usually be the "
"most recent version). The result shown by ``py list --one <TAG>`` will match"
" the runtime that would be launched by ``py -V:<TAG>``."
msgstr ""
"选项``--one``或``-1``只显示单个结果。如果包含默认运行时，它将是这一个。否则，将显示“最佳”结果（“最佳”是故意模糊定义的，但通常是最新版本）。由``py"
" list --one <TAG>``显示的结果将匹配由``py -V:<TAG>``启动的运行时。"

#: ../../using/windows.rst:244
msgid ""
"The ``--only-managed`` option excludes results that were not installed by "
"the Python install manager. This is useful when determining which runtimes "
"may be updated or uninstalled through the ``py`` command."
msgstr ""
"``--only-managed`` 选项排除未由 Python 安装管理器安装的结果。 在确定可以通过 ``py`` "
"命令更新或卸载哪些运行时时，这很有用。"

#: ../../using/windows.rst:248
msgid ""
"The ``--online`` option is short for passing ``--source=<URL>`` with the "
"default source. Passing either of these options will search the online index"
" for runtimes that can be installed. The result shown by ``py list --online "
"--one <TAG>`` will match the runtime that would be installed by ``py install"
" <TAG>``."
msgstr ""
"``--online`` 选项是使用默认源传递 ``--source=<URL>`` 的简写。 "
"传递这两个选项中的任何一个都将在在线索引中搜索可以安装的运行时。 ``py list --online --one <TAG>`` 显示的结果将与 "
"``py install <TAG>`` 安装的运行时相匹配。"

#: ../../using/windows.rst:253
msgid "$> py list --online 3.14"
msgstr "$> py list --online 3.14"

#: ../../using/windows.rst:257
msgid ""
"For compatibility with the old launcher, the ``--list``, ``--list-paths``, "
"``-0`` and ``-0p`` commands (e.g. ``py -0p``) are retained. They do not "
"allow additional options, and will produce legacy formatted output."
msgstr ""
"为了与旧的启动器的兼容性，``--list``、``--list-paths``、``-0``和``-0p``命令(例如：``py "
"-0p``)被保留。它们不允许附加选项，并且会产生遗留格式的输出。"

#: ../../using/windows.rst:263
msgid "Installing Runtimes"
msgstr "安装运行时"

#: ../../using/windows.rst:265
msgid ""
"$> py install [-s=|--source=<URL>] [-f|--force] [-u|--update] [--dry-run] "
"[<TAG>...]"
msgstr ""
"$> py install [-s=|--source=<URL>] [-f|--force] [-u|--update] [--dry-run] "
"[<TAG>...]"

#: ../../using/windows.rst:269
msgid ""
"New runtime versions may be added using ``py install``. One or more tags may"
" be specified, and the special tag ``default`` may be used to select the "
"default. Ranges are not supported for installation."
msgstr ""
"可以使用``py "
"install``添加新的运行时版本。可以指定一个或多个标签，并且可以使用特殊标签``default``来选择默认值。不支持按范围的安装。"

#: ../../using/windows.rst:273
msgid ""
"The ``--source=<URL>`` option allows overriding the online index that is "
"used to obtain runtimes. This may be used with an offline index, as shown in"
" :ref:`pymanager-offline`."
msgstr ""
"``--source=<URL>`` 选项允许覆盖用于获取运行时的在线索引。 这可以与离线索引一起使用，如 :ref:`pymanager-"
"offline` 所示。"

#: ../../using/windows.rst:277
msgid ""
"Passing ``--force`` will ignore any cached files and remove any existing "
"install to replace it with the specified one."
msgstr "传递``--force``将忽略所有缓存的文件，并删除所有现有的安装以替换为指定的文件。"

#: ../../using/windows.rst:280
msgid ""
"Passing ``--update`` will replace existing installs if the new version is "
"newer. Otherwise, they will be left. If no tags are provided with "
"``--update``, all installs managed by the Python install manager will be "
"updated if newer versions are available. Updates will remove any "
"modifications made to the install, including globally installed packages, "
"but virtual environments will continue to work."
msgstr ""
"如果新版本较新，传递``--update``将替换现有的安装。否则，他们将离开不安装。如果``--update``没有提供运行时标签，如果有新版本可用，则Python安装管理器管理的所有安装将被更新。更新将删除对安装所做的任何修改，包括全局安装的包，但虚拟环境将继续工作。"

#: ../../using/windows.rst:287
msgid ""
"Passing ``--dry-run`` will generate output and logs, but will not modify any"
" installs."
msgstr "传递``--dry-run``将生成输出和日志，但不会修改任何安装。"

#: ../../using/windows.rst:290
msgid ""
"In addition to the above options, the ``--target`` option will extract the "
"runtime to the specified directory instead of doing a normal install. This "
"is useful for embedding runtimes into larger applications."
msgstr ""
"除了上述选项之外，``--target`` 选项将把运行时解压到指定的目录，而不是进行正常的安装。 这对于将运行时嵌入到较大的应用程序中非常有用。"

#: ../../using/windows.rst:294
msgid "$> py install ... [-t=|--target=<PATH>] <TAG>"
msgstr "$> py install ... [-t=|--target=<PATH>] <TAG>"

#: ../../using/windows.rst:302
msgid "Offline Installs"
msgstr "离线安装"

#: ../../using/windows.rst:304
msgid ""
"To perform offline installs of Python, you will need to first create an "
"offline index on a machine that has network access."
msgstr "要执行Python的离线安装，你需要首先在具有网络访问权限的机器上创建离线索引。"

#: ../../using/windows.rst:307
msgid "$> py install --download=<PATH> ... <TAG>..."
msgstr "$> py install --download=<PATH> ... <TAG>..."

#: ../../using/windows.rst:311
msgid ""
"The ``--download=<PATH>`` option will download the packages for the listed "
"tags and create a directory containing them and an ``index.json`` file "
"suitable for later installation. This entire directory can be moved to the "
"offline machine and used to install one or more of the bundled runtimes:"
msgstr ""
"``--download=<PATH>`` 选项将下载列出的标签的包，并创建一个包含它们的目录和一个适合以后安装的 ``index.json`` 文件。"
" 整个目录可以移动到离线主机，并用于安装一个或多个捆绑的运行时："

#: ../../using/windows.rst:316
msgid "$> py install --source=\"<PATH>\\index.json\" <TAG>..."
msgstr "$> py install --source=\"<PATH>\\index.json\" <TAG>..."

#: ../../using/windows.rst:320
msgid ""
"The Python install manager can be installed by downloading its installer and"
" moving it to another machine before installing."
msgstr "Python安装管理器可以通过下载其安装程序并在安装前将其移动到另一台主机来安装。"

#: ../../using/windows.rst:323
msgid ""
"Alternatively, the ZIP files in an offline index directory can simply be "
"transferred to another machine and extracted. This will not register the "
"install in any way, and so it must be launched by directly referencing the "
"executables in the extracted directory, but it is sometimes a preferable "
"approach in cases where installing the Python install manager is not "
"possible or convenient."
msgstr ""
"或者，可以简单地将离线索引目录中的ZIP文件传输到另一台主机并解压缩。这不会以任何方式注册安装，因此它必须通过直接引用解压目录中的可执行文件来启动，但有时在不可能或不方便安装Python安装管理器的情况下，这是一种更可取的方法。"

#: ../../using/windows.rst:329
msgid ""
"In this way, Python runtimes can be installed and managed on a machine "
"without access to the internet."
msgstr "通过这种方式，Python运行时可以在不访问internet的主机上安装和管理。"

#: ../../using/windows.rst:334
msgid "Uninstalling Runtimes"
msgstr "卸载运行时"

#: ../../using/windows.rst:336
msgid "$> py uninstall [-y|--yes] <TAG>..."
msgstr "$> py uninstall [-y|--yes] <TAG>..."

#: ../../using/windows.rst:340
msgid ""
"Runtimes may be removed using the ``py uninstall`` command. One or more tags"
" must be specified. Ranges are not supported here."
msgstr "运行时可以使用``py uninstall``命令删除。必须指定一个或多个标签。这里不支持范围。"

#: ../../using/windows.rst:343
msgid ""
"The ``--yes`` option bypasses the confirmation prompt before uninstalling."
msgstr "``--yes`` 选项绕过卸载前的确认提示。"

#: ../../using/windows.rst:345
msgid ""
"Instead of passing tags individually, the ``--purge`` option may be "
"specified. This will remove all runtimes managed by the Python install "
"manager, including cleaning up the Start menu, registry, and any download "
"caches. Runtimes that were not installed by the Python install manager will "
"not be impacted, and neither will manually created configuration files."
msgstr ""
"可以指定``--purge``选项，而不是一个一个地传递标签。这将删除由Python安装管理器管理的所有运行时，包括清理开始菜单、注册表和任何下载缓存。未由Python安装管理器安装的运行时不会受到影响，手动创建的配置文件也不会受到影响。"

#: ../../using/windows.rst:351
msgid "$> py uninstall [-y|--yes] --purge"
msgstr "$> py uninstall [-y|--yes] --purge"

#: ../../using/windows.rst:355
msgid ""
"The Python install manager can be uninstalled through the Windows "
"\"Installed apps\" settings page. This does not remove any runtimes, and "
"they will still be usable, though the global ``python`` and ``py`` commands "
"will be removed. Reinstalling the Python install manager will allow you to "
"manage these runtimes again. To completely clean up all Python runtimes, run"
" with ``--purge`` before uninstalling the Python install manager."
msgstr ""
"Python安装管理器可以通过Windows的“安装的应用”设置页面卸载。这不会删除任何运行时，并且它们仍然可用，尽管全局的``python``和``py``命令将被删除。重新安装Python安装管理器将允许您再次管理这些运行时。要完全清理所有Python运行时，请在卸载Python安装管理器之前使用``--purge``运行。"

#: ../../using/windows.rst:365
msgid "Configuration"
msgstr "配置"

#: ../../using/windows.rst:367
msgid ""
"Python install manager is configured with a hierarchy of configuration "
"files, environment variables, command-line options, and registry settings. "
"In general, configuration files have the ability to configure everything, "
"including the location of other configuration files, while registry settings"
" are administrator-only and will override configuration files. Command-line "
"options override all other settings, but not every option is available."
msgstr ""
"Python安装管理器由配置文件、环境变量、命令行选项和注册表设置组成。通常，配置文件能够配置所有内容，包括其他配置文件的位置，而注册表设置仅由管理员设置，并且将覆盖配置文件。命令行选项覆盖所有其他设置，但不是每个选项都可用。"

#: ../../using/windows.rst:374
msgid ""
"This section will describe the defaults, but be aware that modified or "
"overridden installs may resolve settings differently."
msgstr "本节将描述默认设置，但请注意，修改或覆盖的安装可能以不同的方式解析设置。"

#: ../../using/windows.rst:377
msgid ""
"A global configuration file may be configured by an administrator, and would"
" be read first. The user configuration file is stored at "
":file:`%AppData%\\\\Python\\\\pymanager.json` (by default) and is read next,"
" overwriting any settings from earlier files. An additional configuration "
"file may be specified as the ``PYTHON_MANAGER_CONFIG`` environment variable "
"or the ``--config`` command line option (but not both)."
msgstr ""
"首先读取由管理员配置的全局配置文件，随后读取保存在:file:`%AppData%\\\\Python\\\\pymanager.json`（默认情况下）的用户配置文件，覆盖以前文件中的任何设置。额外的配置文件可以指定为``PYTHON_MANAGER_CONFIG``环境变量或``--config``命令行选项（但不能同时指定两者）。"

#: ../../using/windows.rst:384
msgid ""
"The following settings are those that are considered likely to be modified "
"in normal use. Later sections list those that are intended for "
"administrative customization."
msgstr "以下设置是在正常使用中可能被修改的设置。后面的部分列出了用于管理定制的选项。"

#: ../../using/windows.rst:392
msgid "Standard configuration options"
msgstr "标准配置选项"

#: ../../using/windows.rst:396 ../../using/windows.rst:676
msgid "Config Key"
msgstr "配置键"

#: ../../using/windows.rst:397
msgid "Environment Variable"
msgstr "环境变量"

#: ../../using/windows.rst:398 ../../using/windows.rst:677
#: ../../using/windows.rst:1365 ../../using/windows.rst:1385
#: ../../using/windows.rst:1980
msgid "Description"
msgstr "描述"

#: ../../using/windows.rst:400
msgid "``default_tag``"
msgstr "``default_tag``"

#: ../../using/windows.rst:402
msgid ""
"The preferred default version to launch or install. By default, this is "
"interpreted as the most recent non-prerelease version from the CPython team."
msgstr "首选启动或安装的默认版本。 在默认情况下，这会被解读为来自 CPython 团队的最新非预发布版本。"

#: ../../using/windows.rst:406
msgid "``default_platform``"
msgstr "``default_platform``"

#: ../../using/windows.rst:407
msgid "``PYTHON_MANAGER_DEFAULT_PLATFORM``"
msgstr "``PYTHON_MANAGER_DEFAULT_PLATFORM``"

#: ../../using/windows.rst:408
msgid ""
"The preferred default platform to launch or install. This is treated as a "
"suffix to the specified tag, such that ``py -V:3.14`` would prefer an "
"install for ``3.14-64`` if it exists (and ``default_platform`` is ``-64``), "
"but will use ``3.14`` if no tagged install exists."
msgstr ""
"启动或安装的首选默认平台。这被视为指定标签的后缀，因此``py "
"-V:3.14``如果存在（并且``default_platform``为``-64``），则更倾向于安装``3.14-64``，但如果不存在添加后的标签的安装，则将使用``3.14``。"

#: ../../using/windows.rst:414
msgid "``logs_dir``"
msgstr "``logs_dir``"

#: ../../using/windows.rst:415
msgid "``PYTHON_MANAGER_LOGS``"
msgstr "``PYTHON_MANAGER_LOGS``"

#: ../../using/windows.rst:416
msgid "The location where log files are written. By default, :file:`%TEMP%`."
msgstr "写入日志文件的位置。默认为:file:`%TEMP%`。"

#: ../../using/windows.rst:419
msgid "``automatic_install``"
msgstr "``automatic_install``"

#: ../../using/windows.rst:420
msgid "``PYTHON_MANAGER_AUTOMATIC_INSTALL``"
msgstr "``PYTHON_MANAGER_AUTOMATIC_INSTALL``"

#: ../../using/windows.rst:421
msgid ""
"True to allow automatic installs when specifying a particular runtime to "
"launch. By default, true."
msgstr "真值表示当指定了要启动的运行时的时候允许自动安装。 默认为真值。"

#: ../../using/windows.rst:425
msgid "``include_unmanaged``"
msgstr "``include_unmanaged``"

#: ../../using/windows.rst:426
msgid "``PYTHON_MANAGER_INCLUDE_UNMANAGED``"
msgstr "``PYTHON_MANAGER_INCLUDE_UNMANAGED``"

#: ../../using/windows.rst:427
msgid ""
"True to allow listing and launching runtimes that were not installed by the "
"Python install manager, or false to exclude them. By default, true."
msgstr "真值表示允许列出和启动不是由 Python 安装管理器安装的运行时，假值表示排除它们。 默认为真值。"

#: ../../using/windows.rst:431
msgid "``shebang_can_run_anything``"
msgstr "``shebang_can_run_anything``"

#: ../../using/windows.rst:432
msgid "``PYTHON_MANAGER_SHEBANG_CAN_RUN_ANYTHING``"
msgstr "``PYTHON_MANAGER_SHEBANG_CAN_RUN_ANYTHING``"

#: ../../using/windows.rst:433
msgid ""
"True to allow shebangs in ``.py`` files to launch applications other than "
"Python runtimes, or false to prevent it. By default, true."
msgstr "真值表示允许 ``.py`` 文件中的 shebang 启动 Python 运行时之外的应用程序，假值表示阻止它们。 默认为真值。"

#: ../../using/windows.rst:437
msgid "``log_level``"
msgstr "``log_level``"

#: ../../using/windows.rst:438
msgid "``PYMANAGER_VERBOSE``, ``PYMANAGER_DEBUG``"
msgstr "``PYMANAGER_VERBOSE``, ``PYMANAGER_DEBUG``"

#: ../../using/windows.rst:439
msgid ""
"Set the default level of output (0-50). By default, 20. Lower values produce"
" more output. The environment variables are boolean, and may produce "
"additional output during startup that is later suppressed by other "
"configuration."
msgstr ""
"设置输出的默认级别（范围0-50）。默认值为20。数值越低，输出内容越详细。这些环境变量为布尔类型，可能在启动时产生额外输出，但后续会被其他配置抑制。"

#: ../../using/windows.rst:445
msgid "``confirm``"
msgstr "``confirm``"

#: ../../using/windows.rst:446
msgid "``PYTHON_MANAGER_CONFIRM``"
msgstr "``PYTHON_MANAGER_CONFIRM``"

#: ../../using/windows.rst:447
msgid ""
"True to confirm certain actions before taking them (such as uninstall), or "
"false to skip the confirmation. By default, true."
msgstr "若为 True，则在执行某些操作（如卸载）前进行确认；若为 False，则跳过确认。默认值为 true。"

#: ../../using/windows.rst:451
msgid "``install.source``"
msgstr "``install.source``"

#: ../../using/windows.rst:452
msgid "``PYTHON_MANAGER_SOURCE_URL``"
msgstr "``PYTHON_MANAGER_SOURCE_URL``"

#: ../../using/windows.rst:453
msgid "Override the index feed to obtain new installs from."
msgstr "覆盖用于获取新安装包的索引源。"

#: ../../using/windows.rst:455
msgid "``list.format``"
msgstr "``list.format``"

#: ../../using/windows.rst:456
msgid "``PYTHON_MANAGER_LIST_FORMAT``"
msgstr "``PYTHON_MANAGER_LIST_FORMAT``"

#: ../../using/windows.rst:457
msgid ""
"Specify the default format used by the ``py list`` command. By default, "
"``table``."
msgstr "指定 ``py list`` 命令使用的默认格式。默认值为 ``table``。"

#: ../../using/windows.rst:460
msgid ""
"Dotted names should be nested inside JSON objects, for example, "
"``list.format`` would be specified as ``{\"list\": {\"format\": "
"\"table\"}}``."
msgstr ""
"点分名称应嵌套在 JSON 对象内部，例如，``list.format`` 应指定为 ``{\"list\": {\"format\": "
"\"table\"}}``。"

#: ../../using/windows.rst:466
msgid "Shebang lines"
msgstr "Shebang 行"

#: ../../using/windows.rst:468
msgid ""
"If the first line of a script file starts with ``#!``, it is known as a "
"\"shebang\" line.  Linux and other Unix like operating systems have native "
"support for such lines and they are commonly used on such systems to "
"indicate how a script should be executed. The ``python`` and ``py`` commands"
" allow the same facilities to be used with Python scripts on Windows."
msgstr ""
"如果脚本文件的第一行以 ``#!`` 开头，则称为 \"shebang\" 行。Linux 和其他类 Unix "
"操作系统对这类行有原生支持，通常用于指示脚本的执行方式。``python`` 和 ``py`` 命令允许在 Windows 上的 Python "
"脚本中使用相同的功能。"

#: ../../using/windows.rst:474
msgid ""
"To allow shebang lines in Python scripts to be portable between Unix and "
"Windows, a number of 'virtual' commands are supported to specify which "
"interpreter to use.  The supported virtual commands are:"
msgstr ""
"为了让 Python 脚本中的 shebang 行在 Unix 和 Windows "
"之间保持可移植性，支持使用一些“虚拟”命令来指定要使用的解释器。支持的虚拟命令包括："

#: ../../using/windows.rst:478
msgid "``/usr/bin/env <ALIAS>``"
msgstr "``/usr/bin/env <ALIAS>``"

#: ../../using/windows.rst:479
msgid "``/usr/bin/env -S <ALIAS>``"
msgstr "``/usr/bin/env -S <ALIAS>``"

#: ../../using/windows.rst:480
msgid "``/usr/bin/<ALIAS>``"
msgstr "``/usr/bin/<ALIAS>``"

#: ../../using/windows.rst:481
msgid "``/usr/local/bin/<ALIAS>``"
msgstr "``/usr/local/bin/<ALIAS>``"

#: ../../using/windows.rst:482
msgid "``<ALIAS>``"
msgstr "``<ALIAS>``"

#: ../../using/windows.rst:484 ../../using/windows.rst:1754
msgid "For example, if the first line of your script starts with"
msgstr "例如，如果脚本开始的第一行为"

#: ../../using/windows.rst:486 ../../using/windows.rst:1756
msgid "#! /usr/bin/python"
msgstr "#! /usr/bin/python"

#: ../../using/windows.rst:490 ../../using/windows.rst:1760
msgid ""
"The default Python or an active virtual environment will be located and "
"used. As many Python scripts written to work on Unix will already have this "
"line, you should find these scripts can be used by the launcher without "
"modification. If you are writing a new script on Windows which you hope will"
" be useful on Unix, you should use one of the shebang lines starting with "
"``/usr``."
msgstr ""
"将找到并使用默认的 Python 或激活的虚拟环境。 因为在 Unix 上编写的许多 Python "
"脚本都已经有了这一行，你应该会发现这些脚本可以由启动器使用而无需修改。 如果你在 Windows 上编写一个新脚本并希望其在 Unix "
"上可用，你应当使用某个以 ``/usr`` 开头的 shebang 行。"

#: ../../using/windows.rst:496
msgid ""
"Any of the above virtual commands can have ``<ALIAS>`` replaced by an alias "
"from an installed runtime. That is, any command generated in the global "
"aliases directory (which you may have added to your :envvar:`PATH` "
"environment variable) can be used in a shebang, even if it is not on your "
":envvar:`PATH`. This allows the use of shebangs like ``/usr/bin/python3.12``"
" to select a particular runtime."
msgstr ""
"上述任何虚拟命令中的 ``<ALIAS>`` 都可以替换为已安装运行时的别名。也就是说，在全局别名目录中生成的任何命令（你可能已将其添加到 "
":envvar:`PATH` 环境变量中）都可以在 shebang 中使用，即使它不在你的 :envvar:`PATH` 中。这允许使用类似 "
"``/usr/bin/python3.12`` 的 shebang 来选择特定的运行时。"

#: ../../using/windows.rst:502
msgid ""
"If no runtimes are installed, or if automatic installation is enabled, the "
"requested runtime will be installed if necessary. See :ref:`pymanager-"
"config` for information about configuration settings."
msgstr ""
"如果没有安装任何运行时，或者启用了自动安装功能，则会在必要时安装所请求的运行时。有关配置设置的信息，请参阅 :ref:`pymanager-"
"config`。"

#: ../../using/windows.rst:506
msgid ""
"The ``/usr/bin/env`` form of shebang line will also search the "
":envvar:`PATH` environment variable for unrecognized commands. This "
"corresponds to the behaviour of the Unix ``env`` program, which performs the"
" same search, but prefers launching known Python commands. A warning may be "
"displayed when searching for arbitrary executables, and this search may be "
"disabled by the ``shebang_can_run_anything`` configuration option."
msgstr ""
"使用 ``/usr/bin/env`` 形式的 shebang 行也会在 :envvar:`PATH` 环境变量中搜索未识别的命令。这与 Unix 的 "
"``env`` 程序的行为相对应，该程序执行相同的搜索，但优先启动已知的 Python 命令。在搜索任意可执行文件时可能会显示警告，并且可以通过 "
"``shebang_can_run_anything`` 配置选项禁用此搜索。"

#: ../../using/windows.rst:513
msgid ""
"Shebang lines that do not match any of patterns are treated as *Windows* "
"executable paths that are absolute or relative to the directory containing "
"the script file. This is a convenience for Windows-only scripts, such as "
"those generated by an installer, since the behavior is not compatible with "
"Unix-style shells. These paths may be quoted, and may include multiple "
"arguments, after which the path to the script and any additional arguments "
"will be appended. This functionality may be disabled by the "
"``shebang_can_run_anything`` configuration option."
msgstr ""
"不符合上述任何模式的 shebang 行将被视为相对于脚本文件所在目录的 *Windows* 可执行文件路径（绝对或相对路径）。这为仅限 Windows"
" 的脚本（如安装程序生成的脚本）提供了便利，因为这种行为与 Unix 风格的 shell "
"不兼容。这些路径可以加引号，并且可以包含多个参数，之后会追加脚本路径和任何额外的参数。此功能可以通过 "
"``shebang_can_run_anything`` 配置选项禁用。"

#: ../../using/windows.rst:524
msgid ""
"The behaviour of shebangs in the Python install manager is subtly different "
"from the previous ``py.exe`` launcher, and the old configuration options no "
"longer apply. If you are specifically reliant on the old behaviour or "
"configuration, we recommend keeping the legacy launcher. It may be "
"`downloaded independently "
"<https://www.python.org/ftp/python/3.13.1/win32/launcher.msi>`_ and "
"installed on its own. The legacy launcher's ``py`` command will override "
"PyManager's one, and you will need to use ``pymanager`` commands for "
"installing and uninstalling."
msgstr ""
"Python 安装管理器中 shebang 的行为与之前的 ``py.exe`` "
"启动器存在细微差异，原有的配置选项不再适用。如果你特别依赖旧版行为或配置，我们建议保留旧版启动器。该启动器可 `单独下载 "
"<https://www.python.org/ftp/python/3.13.1/win32/launcher.msi>`_ 并独立安装。旧版启动器的"
" ``py`` 命令将覆盖 PyManager 的同名命令，此时你需要使用 ``pymanager`` 相关命令进行安装和卸载操作。"

#: ../../using/windows.rst:545
msgid "Advanced Installation"
msgstr "高级安装"

#: ../../using/windows.rst:547
msgid ""
"For situations where an MSIX cannot be installed, such as some older "
"administrative distribution platforms, there is an MSI available from the "
"python.org downloads page. This MSI has no user interface, and can only "
"perform per-machine installs to its default location in Program Files. It "
"will attempt to modify the system :envvar:`PATH` environment variable to "
"include this install location, but be sure to validate this on your "
"configuration."
msgstr ""
"对于无法安装 MSIX 的情况（例如某些较旧的管理分发平台），可以从 python.org 下载页面获取 MSI 安装包。此 MSI "
"没有用户界面，只能在 Program Files 中的默认位置执行每台机器的安装。它会尝试修改系统的 :envvar:`PATH` "
"环境变量以包含此安装位置，但请务必在你的配置中验证这一点。"

#: ../../using/windows.rst:556
msgid ""
"Windows Server 2019 is the only version of Windows that CPython supports "
"that does not support MSIX. For Windows Server 2019, you should use the MSI."
msgstr ""
"Windows Server 2019 是 CPython 支持的唯一不支持 MSIX 的 Windows 版本。对于 Windows Server "
"2019，应使用 MSI 安装包。"

#: ../../using/windows.rst:559
msgid ""
"Be aware that the MSI package does not bundle any runtimes, and so is not "
"suitable for installs into offline environments without also creating an "
"offline install index. See :ref:`pymanager-offline` and :ref:`pymanager-"
"admin-config` for information on handling these scenarios."
msgstr ""
"请注意，MSI 安装包不捆绑任何运行时，因此如果不创建离线安装索引，就不适合在离线环境中进行安装。有关处理这些场景的信息，请参阅 "
":ref:`pymanager-offline` 和 :ref:`pymanager-admin-config`。"

#: ../../using/windows.rst:564
msgid ""
"Runtimes installed by the MSI are shared with those installed by the MSIX, "
"and are all per-user only. The Python install manager does not support "
"installing runtimes per-machine. To emulate a per-machine install, you can "
"use ``py install --target=<shared location>`` as administrator and add your "
"own system-wide modifications to :envvar:`PATH`, the registry, or the Start "
"menu."
msgstr ""
"MSI 安装的运行时与 MSIX 安装的运行时共享，并且均为仅针对用户的安装。Python "
"安装管理器不支持按机器安装运行时。若要模拟按机器安装，可以以管理员身份使用 ``py install --target=<共享位置>`` 命令，并自行对"
" :envvar:`PATH`、注册表或开始菜单进行全系统范围的修改。"

#: ../../using/windows.rst:570
msgid ""
"When the MSIX is installed, but commands are not available in the "
":envvar:`PATH` environment variable, they can be found under "
":file:`%LocalAppData%\\\\Microsoft\\\\WindowsApps\\\\PythonSoftwareFoundation.PythonManager_3847v3x7pw1km`"
" or "
":file:`%LocalAppData%\\\\Microsoft\\\\WindowsApps\\\\PythonSoftwareFoundation.PythonManager_qbz5n2kfra8p0`,"
" depending on whether it was installed from python.org or through the "
"Windows Store. Attempting to run the executable directly from Program Files "
"is not recommended."
msgstr ""
"当 MSIX 已安装但命令在 :envvar:`PATH` 环境变量中不可用时，可在以下位置找到它们： 从 python.org "
"安装：:file:`%LocalAppData%\\\\Microsoft\\\\WindowsApps\\\\PythonSoftwareFoundation.PythonManager_3847v3x7pw1km`"
" ；从 Windows "
"应用商店安装：:file:`%LocalAppData%\\\\Microsoft\\\\WindowsApps\\\\PythonSoftwareFoundation.PythonManager_qbz5n2kfra8p0`"
" 。不建议直接从 Program Files 目录运行可执行文件。"

#: ../../using/windows.rst:579
msgid ""
"To programmatically install the Python install manager, it is easiest to use"
" WinGet, which is included with all supported versions of Windows:"
msgstr "若要以编程方式安装 Python 安装管理器，最简单的方法是使用 WinGet，它包含在所有受支持的 Windows 版本中："

#: ../../using/windows.rst:582
msgid ""
"$> winget install 9NQ7512CXL7T -e --accept-package-agreements --disable-interactivity\n"
"\n"
"# Optionally run the configuration checker and accept all changes\n"
"$> py install --configure -y"
msgstr ""
"$> winget install 9NQ7512CXL7T -e --accept-package-agreements --disable-interactivity\n"
"\n"
"# 可选地运行配置检查器并接受所有更改\n"
"$> py install --configure -y"

#: ../../using/windows.rst:589
msgid ""
"To download the Python install manager and install on another machine, the "
"following WinGet command will download the required files from the Store to "
"your Downloads directory (add ``-d <location>`` to customize the output "
"location). This also generates a YAML file that appears to be unnecessary, "
"as the downloaded MSIX can be installed by launching or using the commands "
"below."
msgstr ""
"要下载 Python 安装管理器并在另一台计算机上安装，可使用以下 WinGet 命令从应用商店下载所需文件到您的下载目录（添加 ``-d "
"<location>`` 可自定义输出位置）。此命令还会生成一个看似不必要的 YAML 文件，因为下载的 MSIX 可以通过启动或使用以下命令进行安装。"

#: ../../using/windows.rst:595
msgid ""
"$> winget download 9NQ7512CXL7T -e --skip-license --accept-package-"
"agreements --accept-source-agreements"
msgstr ""
"$> winget download 9NQ7512CXL7T -e --skip-license --accept-package-"
"agreements --accept-source-agreements"

#: ../../using/windows.rst:599
msgid ""
"To programmatically install or uninstall an MSIX using only PowerShell, the "
"`Add-AppxPackage`_ and `Remove-AppxPackage`_ PowerShell cmdlets are "
"recommended:"
msgstr ""
"若要仅使用 PowerShell 以编程方式安装或卸载 MSIX，建议使用 PowerShell cmdlet `Add-AppxPackage`_ 和"
" `Remove-AppxPackage`_："

#: ../../using/windows.rst:602
msgid ""
"$> Add-AppxPackage C:\\Downloads\\python-manager-25.0.msix\n"
"...\n"
"$> Get-AppxPackage PythonSoftwareFoundation.PythonManager | Remove-AppxPackage"
msgstr ""
"$> Add-AppxPackage C:\\Downloads\\python-manager-25.0.msix\n"
"...\n"
"$> Get-AppxPackage PythonSoftwareFoundation.PythonManager | Remove-AppxPackage"

#: ../../using/windows.rst:608
msgid ""
"The latest release can be downloaded and installed by Windows by passing the"
" AppInstaller file to the Add-AppxPackage command. This installs using the "
"MSIX on python.org, and is only recommended for cases where installing via "
"the Store (interactively or using WinGet) is not possible."
msgstr ""
"通过将 AppInstaller 文件传递给 Add-AppxPackage 命令，Windows 可以下载并安装最新版本。这会使用 "
"python.org 上的 MSIX 进行安装，仅建议在无法通过应用商店（交互式或使用 WinGet）安装的情况下使用。"

#: ../../using/windows.rst:613
msgid ""
"$> Add-AppxPackage -AppInstallerFile "
"https://www.python.org/ftp/python/pymanager/pymanager.appinstaller"
msgstr ""
"$> Add-AppxPackage -AppInstallerFile "
"https://www.python.org/ftp/python/pymanager/pymanager.appinstaller"

#: ../../using/windows.rst:617
msgid ""
"Other tools and APIs may also be used to provision an MSIX package for all "
"users on a machine, but Python does not consider this a supported scenario. "
"We suggest looking into the PowerShell `Add-AppxProvisionedPackage`_ cmdlet,"
" the native Windows `PackageManager`_ class, or the documentation and "
"support for your deployment tool."
msgstr ""
"也可以使用其他工具和 API 为计算机上的所有用户预配 MSIX 包，但 Python 不认为这是受支持的场景。我们建议研究 PowerShell 的 "
"`Add-AppxProvisionedPackage`_ cmdlet、原生 Windows 的 `PackageManager`_ "
"类，或查阅您的部署工具的文档和支持资源。"

#: ../../using/windows.rst:623
msgid ""
"Regardless of the install method, users will still need to install their own"
" copies of Python itself, as there is no way to trigger those installs "
"without being a logged in user. When using the MSIX, the latest version of "
"Python will be available for all users to install without network access."
msgstr ""
"无论采用何种安装方法，用户仍需自行安装 Python 本身，因为在未登录用户的情况下无法触发这些安装。使用 MSIX 时，最新版本的 Python "
"将可供所有用户在无网络访问的情况下安装。"

#: ../../using/windows.rst:628
msgid ""
"Note that the MSIX downloadable from the Store and from the Python website "
"are subtly different and cannot be installed at the same time. Wherever "
"possible, we suggest using the above WinGet commands to download the package"
" from the Store to reduce the risk of setting up conflicting installs. There"
" are no licensing restrictions on the Python install manager that would "
"prevent using the Store package in this way."
msgstr ""
"请注意，从应用商店和 Python 网站下载的 MSIX 存在细微差异，不能同时安装。只要有可能，我们建议使用上述 WinGet "
"命令从应用商店下载软件包，以降低设置冲突安装的风险。Python 安装管理器没有许可证限制，可以以这种方式使用应用商店的软件包。"

#: ../../using/windows.rst:639
msgid "Administrative Configuration"
msgstr "管理配置"

#: ../../using/windows.rst:641
msgid ""
"There are a number of options that may be useful for administrators to "
"override configuration of the Python install manager. These can be used to "
"provide local caching, disable certain shortcut types, override bundled "
"content. All of the above configuration options may be set, as well as those"
" below."
msgstr ""
"管理员可以使用许多选项来覆盖 Python "
"安装管理器的配置。这些选项可用于提供本地缓存、禁用某些快捷方式类型、覆盖捆绑内容。除了上述配置选项外，还可以设置以下选项。"

#: ../../using/windows.rst:646
msgid ""
"Configuration options may be overridden in the registry by setting values "
"under "
":file:`HKEY_LOCAL_MACHINE\\\\Software\\\\Policies\\\\Python\\\\PyManager`, "
"where the value name matches the configuration key and the value type is "
"``REG_SZ``. Note that this key can itself be customized, but only by "
"modifying the core config file distributed with the Python install manager. "
"We recommend, however, that registry values are used only to set "
"``base_config`` to a JSON file containing the full set of overrides. "
"Registry key overrides will replace any other configured setting, while "
"``base_config`` allows users to further modify settings they may need."
msgstr ""
"可以通过在注册表路径 "
":file:`HKEY_LOCAL_MACHINE\\\\Software\\\\Policies\\\\Python\\\\PyManager` "
"下设置值来覆盖配置选项，其中值名称与配置键匹配，值类型为 ``REG_SZ``。请注意，此键本身可以自定义，但只能通过修改 Python "
"安装管理器分发的核心配置文件来实现。然而，我们建议仅使用注册表值将 ``base_config`` 设置为包含完整覆盖集的 JSON "
"文件。注册表键覆盖将替换任何其他已配置的设置，而 ``base_config`` 允许用户进一步修改他们可能需要的设置。"

#: ../../using/windows.rst:656
msgid ""
"Note that most settings with environment variables support those variables "
"because their default setting specifies the variable. If you override them, "
"the environment variable will no longer work, unless you override it with "
"another one. For example, the default value of ``confirm`` is literally "
"``%PYTHON_MANAGER_CONFIRM%``, which will resolve the variable at load time. "
"If you override the value to ``yes``, then the environment variable will no "
"longer be used. If you override the value to ``%CONFIRM%``, then that "
"environment variable will be used instead."
msgstr ""
"请注意，大多数支持环境变量的设置之所以支持这些变量，是因为它们的默认设置中指定了该变量。如果您覆盖了这些设置，环境变量将不再生效，除非您用另一个环境变量覆盖它。例如，``confirm``"
" 的默认值实际上是 ``%PYTHON_MANAGER_CONFIRM%``，它会在加载时解析该变量。如果您将该值覆盖为 "
"``yes``，则环境变量将不再被使用。如果您将该值覆盖为 ``%CONFIRM%``，则会使用该环境变量。"

#: ../../using/windows.rst:665
msgid ""
"Configuration settings that are paths are interpreted as relative to the "
"directory containing the configuration file that specified them."
msgstr "配置文件中指定的路径类配置设置将被解释为相对于包含该配置文件的目录的相对路径。"

#: ../../using/windows.rst:672
msgid "Administrative configuration options"
msgstr "管理配置选项"

#: ../../using/windows.rst:679
msgid "``base_config``"
msgstr "``base_config``"

#: ../../using/windows.rst:680
msgid ""
"The highest priority configuration file to read. Note that only the built-in"
" configuration file and the registry can modify this setting."
msgstr "要读取的优先级最高的配置文件。请注意，只有内置配置文件和注册表可以修改此设置。"

#: ../../using/windows.rst:684
msgid "``user_config``"
msgstr "``user_config``"

#: ../../using/windows.rst:685
msgid "The second configuration file to read."
msgstr "要读取的第二个配置文件。"

#: ../../using/windows.rst:687
msgid "``additional_config``"
msgstr "``additional_config``"

#: ../../using/windows.rst:688
msgid "The third configuration file to read."
msgstr "要读取的第三个配置文件。"

#: ../../using/windows.rst:690
msgid "``registry_override_key``"
msgstr "``registry_override_key``"

#: ../../using/windows.rst:691
msgid ""
"Registry location to check for overrides. Note that only the built-in "
"configuration file can modify this setting."
msgstr "检查覆盖设置的注册表位置。请注意，只有内置配置文件可以修改此设置。"

#: ../../using/windows.rst:694
msgid "``bundled_dir``"
msgstr "``bundled_dir``"

#: ../../using/windows.rst:695
msgid "Read-only directory containing locally cached files."
msgstr "包含本地缓存文件的只读目录。"

#: ../../using/windows.rst:697
msgid "``install.fallback_source``"
msgstr "``install.fallback_source``"

#: ../../using/windows.rst:698
msgid ""
"Path or URL to an index to consult when the main index cannot be accessed."
msgstr "当无法访问主索引时要查阅的索引的路径或 URL。"

#: ../../using/windows.rst:700
msgid "``install.enable_shortcut_kinds``"
msgstr "``install.enable_shortcut_kinds``"

#: ../../using/windows.rst:701
msgid ""
"Comma-separated list of shortcut kinds to allow (e.g. ``\"pep514,start\"``)."
" Enabled shortcuts may still be disabled by ``disable_shortcut_kinds``."
msgstr ""
"允许的快捷方式类型的逗号分隔列表（例如 ``\"pep514,start\"``）。已启用的快捷方式仍可能被 "
"``disable_shortcut_kinds`` 禁用。"

#: ../../using/windows.rst:704
msgid "``install.disable_shortcut_kinds``"
msgstr "``install.disable_shortcut_kinds``"

#: ../../using/windows.rst:705
msgid ""
"Comma-separated list of shortcut kinds to exclude (e.g. "
"``\"pep514,start\"``). Disabled shortcuts are not reactivated by "
"``enable_shortcut_kinds``."
msgstr ""
"要排除的快捷方式类型的逗号分隔列表（例如 ``\"pep514,start\"``）。已禁用的快捷方式不会被 "
"``enable_shortcut_kinds`` 重新激活。"

#: ../../using/windows.rst:709
msgid "``pep514_root``"
msgstr "``pep514_root``"

#: ../../using/windows.rst:710
msgid ""
"Registry location to read and write PEP 514 entries into. By default, "
":file:`HKEY_CURRENT_USER\\\\Software\\\\Python`."
msgstr ""
"用于读取和写入 PEP 514 "
"条目的注册表位置。默认路径为：:file:`HKEY_CURRENT_USER\\\\Software\\\\Python`。"

#: ../../using/windows.rst:713
msgid "``start_folder``"
msgstr "``start_folder``"

#: ../../using/windows.rst:714
msgid ""
"Start menu folder to write shortcuts into. By default, ``Python``. This path"
" is relative to the user's Programs folder."
msgstr "用于写入快捷方式的开始菜单文件夹。默认文件夹为 ``Python``。此路径是相对于用户的“程序”文件夹的相对路径。"

#: ../../using/windows.rst:718
msgid "``virtual_env``"
msgstr "``virtual_env``"

#: ../../using/windows.rst:719
msgid ""
"Path to the active virtual environment. By default, this is "
"``%VIRTUAL_ENV%``, but may be set empty to disable venv detection."
msgstr "活动虚拟环境的路径。默认值为 ``%VIRTUAL_ENV%``，但可设置为空以禁用虚拟环境检测。"

#: ../../using/windows.rst:723
msgid "``shebang_can_run_anything_silently``"
msgstr "``shebang_can_run_anything_silently``"

#: ../../using/windows.rst:724
msgid ""
"True to suppress visible warnings when a shebang launches an application "
"other than a Python runtime."
msgstr "当 shebang 启动的应用程序不是 Python 运行时，若要隐藏可见警告，可将此值设为 True。"

#: ../../using/windows.rst:730 ../../using/windows.rst:1544
msgid "Installing Free-threaded Binaries"
msgstr "安装自由线程二进制文件"

#: ../../using/windows.rst:732 ../../using/windows.rst:992
#: ../../using/windows.rst:1546
msgid "(Experimental)"
msgstr "（试验性功能）"

#: ../../using/windows.rst:736 ../../using/windows.rst:996
#: ../../using/windows.rst:1550
msgid ""
"Everything described in this section is considered experimental, and should "
"be expected to change in future releases."
msgstr "本节中描述的所有内容都是试验性的，它们预计会在未来的发布版中发生改变。"

#: ../../using/windows.rst:739
msgid ""
"Pre-built distributions of the experimental free-threaded build are "
"available by installing tags with the ``t`` suffix."
msgstr "实验性自由线程构建的预编译发行版可通过安装带有 ``t`` 后缀的标签来获取。"

#: ../../using/windows.rst:742
msgid ""
"$> py install 3.14t\n"
"$> py install 3.14t-arm64\n"
"$> py install 3.14t-32"
msgstr ""
"$> py install 3.14t\n"
"$> py install 3.14t-arm64\n"
"$> py install 3.14t-32"

#: ../../using/windows.rst:748
msgid ""
"This will install and register as normal. If you have no other runtimes "
"installed, then ``python`` will launch this one. Otherwise, you will need to"
" use ``py -V:3.14t ...`` or, if you have added the global aliases directory "
"to your :envvar:`PATH` environment variable, the ``python3.14t.exe`` "
"commands."
msgstr ""
"这将按常规方式进行安装和注册。如果您没有安装其他运行时，那么 ``python`` 命令将启动此版本。否则，您需要使用 ``py -V:3.14t "
"...`` 命令，或者如果您已将全局别名目录添加到 :envvar:`PATH` 环境变量中，也可以使用 ``python3.14t.exe`` 命令。"

#: ../../using/windows.rst:756 ../../using/windows.rst:768
msgid "Troubleshooting"
msgstr "故障排除"

#: ../../using/windows.rst:758
msgid ""
"If your Python install manager does not seem to be working correctly, please"
" work through these tests and fixes to see if it helps. If not, please "
"report an issue at `our bug tracker "
"<https://github.com/python/cpython/issues>`_, including any relevant log "
"files (written to your :file:`%TEMP%` directory by default)."
msgstr ""
"如果您的 Python 安装管理器运行不正常，请尝试以下测试和修复方法，看看是否能解决问题。如果问题仍未解决，请前往我们的 `错误跟踪器 "
"<https://github.com/python/cpython/issues>`_ "
"报告问题，并附上所有相关的日志文件（默认情况下，日志文件会写入您的 :file:`%TEMP%` 目录）。"

#: ../../using/windows.rst:772
msgid "Symptom"
msgstr "症状"

#: ../../using/windows.rst:773
msgid "Things to try"
msgstr "可以尝试的事情"

#: ../../using/windows.rst:775
msgid ""
"``python`` gives me a \"command not found\" error or opens the Store app "
"when I type it in my terminal."
msgstr "当我在终端中输入 ``python`` 时，出现“命令未找到”错误，或者打开了应用商店。"

#: ../../using/windows.rst:777 ../../using/windows.rst:790
msgid "Did you :ref:`install the Python install manager <pymanager>`?"
msgstr "您是否 :ref:`已安装 Python 安装管理器 <pymanager>`？"

#: ../../using/windows.rst:780 ../../using/windows.rst:793
msgid ""
"Click Start, open \"Manage app execution aliases\", and check that the "
"aliases for \"Python (default)\" are enabled. If they already are, try "
"disabling and re-enabling to refresh the command. The \"Python (default "
"windowed)\" and \"Python install manager\" commands may also need "
"refreshing."
msgstr ""
"点击开始菜单，打开\"管理应用执行别名\"，检查\"Python "
"(默认)\"的别名是否已启用。如果已启用，可以尝试禁用后重新启用以刷新命令。\"Python (默认窗口化)\"和\"Python "
"安装管理器\"命令可能也需要刷新。"

#: ../../using/windows.rst:787
msgid "Check that the ``py`` and ``pymanager`` commands work."
msgstr "检查 ``py`` 和 ``pymanager`` 命令是否能正常使用。"

#: ../../using/windows.rst:789
msgid ""
"``py`` gives me a \"command not found\" error when I type it in my terminal."
msgstr "当我在终端中输入 ``py`` 时，出现“命令未找到”错误。"

#: ../../using/windows.rst:799
msgid ""
"``py`` gives me a \"can't open file\" error when I type commands in my "
"terminal."
msgstr "当我在终端中输入 ``py`` 命令时，出现“无法打开文件”错误。"

#: ../../using/windows.rst:801
msgid ""
"This usually means you have the legacy launcher installed and it has "
"priority over the Python install manager. To remove, click Start, open "
"\"Installed apps\", search for \"Python launcher\" and uninstall it."
msgstr ""
"这通常意味着您安装了旧版启动器，并且它的优先级高于 Python "
"安装管理器。要解决此问题，请点击开始菜单，打开\"已安装的应用\"，搜索\"Python 启动器\"并卸载它。"

#: ../../using/windows.rst:806
msgid "``python`` doesn't launch the same runtime as ``py``"
msgstr "``python`` 和 ``py`` 命令启动的不是同一个 Python 运行时。"

#: ../../using/windows.rst:807
msgid ""
"Click Start, open \"Installed apps\", look for any existing Python runtimes,"
" and either remove them or Modify and disable the :envvar:`PATH` options."
msgstr ""
"点击开始菜单，打开\"已安装的应用\"，查找任何已存在的 Python 运行时，然后删除它们，或者选择\"修改\"并禁用 :envvar:`PATH` "
"选项。"

#: ../../using/windows.rst:811
msgid ""
"Click Start, open \"Manage app execution aliases\", and check that your "
"``python.exe`` alias is set to \"Python (default)\""
msgstr "点击开始菜单，打开\"管理应用执行别名\"，并确保您的 ``python.exe`` 别名设置为\"Python (默认)\"。"

#: ../../using/windows.rst:814
msgid "``python`` and ``py`` don't launch the runtime I expect"
msgstr "``python`` 和 ``py`` 命令没有启动我期望的 Python 运行时。"

#: ../../using/windows.rst:815
msgid ""
"Check your :envvar:`PYTHON_MANAGER_DEFAULT` environment variable or "
"``default_tag`` configuration. The ``py list`` command will show your "
"default based on these settings."
msgstr ""

#: ../../using/windows.rst:820
msgid ""
"Installs that are managed by the Python install manager will be chosen ahead"
" of unmanaged installs. Use ``py install`` to install the runtime you "
"expect, or configure your default tag."
msgstr ""
"由 Python 安装管理器管理的安装会优先于未管理的安装被选择。请使用 ``py install`` 命令安装您期望的运行时，或配置您的默认标签。"

#: ../../using/windows.rst:826
msgid ""
"Prerelease and experimental installs that are not managed by the Python "
"install manager may be chosen ahead of stable releases. Configure your "
"default tag or uninstall the prerelease runtime and reinstall using ``py "
"install``."
msgstr ""
"未由 Python 安装管理器管理的预发布版和实验版安装可能会优先于稳定版本被选择。请配置您的默认标签，或卸载预发布版运行时，然后使用 ``py "
"install`` 重新安装。"

#: ../../using/windows.rst:831
msgid ""
"``pythonw`` or ``pyw`` don't launch the same runtime as ``python`` or ``py``"
msgstr "``pythonw`` 或 ``pyw`` 启动的运行时与 ``python`` 或 ``py`` 不同。"

#: ../../using/windows.rst:832
msgid ""
"Click Start, open \"Manage app execution aliases\", and check that your "
"``pythonw.exe`` and ``pyw.exe`` aliases are consistent with your others."
msgstr "点击开始菜单，打开\"管理应用执行别名\"，并确保您的 ``pythonw.exe`` 和 ``pyw.exe`` 别名与其他别名保持一致。"

#: ../../using/windows.rst:835
msgid ""
"``pip`` gives me a \"command not found\" error when I type it in my "
"terminal."
msgstr "当我在终端中输入 ``pip`` 时，出现“命令未找到”错误。"

#: ../../using/windows.rst:836
msgid ""
"Have you activated a virtual environment? Run the "
"``.venv\\Scripts\\activate`` script in your terminal to activate."
msgstr "您是否已激活虚拟环境？请在终端中运行 ``.venv\\Scripts\\activate`` 脚本以激活它。"

#: ../../using/windows.rst:840
msgid ""
"The package may be available but missing the generated executable. We "
"recommend using the ``python -m pip`` command instead, or alternatively the "
"``python -m pip install --force pip`` command will recreate the executables "
"and show you the path to add to :envvar:`PATH`. These scripts are separated "
"for each runtime, and so you may need to add multiple paths."
msgstr ""
"该软件包可能已安装，但缺少生成的可执行文件。我们建议改用 ``python -m pip`` 命令，或者使用 ``python -m pip "
"install --force pip`` 命令重新创建可执行文件，并显示需要添加到 :envvar:`PATH` "
"的路径。这些脚本针对每个运行时是分开的，因此您可能需要添加多个路径。"

#: ../../using/windows.rst:852
msgid "The embeddable package"
msgstr "可嵌入的包"

#: ../../using/windows.rst:856
msgid ""
"The embedded distribution is a ZIP file containing a minimal Python "
"environment. It is intended for acting as part of another application, "
"rather than being directly accessed by end-users."
msgstr "嵌入式发行版是一个包含最小 Python 环境的 ZIP 文件。 它旨在作为另一个应用程序的一部分，而不是由最终用户直接访问。"

#: ../../using/windows.rst:860
msgid ""
"To install an embedded distribution, we recommend using ``py install`` with "
"the ``--target`` option:"
msgstr "要安装嵌入式发行版，我们建议使用带 ``--target`` 选项的 ``py install`` 命令："

#: ../../using/windows.rst:863
msgid "$> py install 3.14-embed --target=runtime"
msgstr "$> py install 3.14-embed --target=runtime"

#: ../../using/windows.rst:867
msgid ""
"When extracted, the embedded distribution is (almost) fully isolated from "
"the user's system, including environment variables, system registry "
"settings, and installed packages. The standard library is included as pre-"
"compiled and optimized ``.pyc`` files in a ZIP, and ``python3.dll``, "
"``python313.dll``, ``python.exe`` and ``pythonw.exe`` are all provided. "
"Tcl/tk (including all dependents, such as Idle), pip and the Python "
"documentation are not included."
msgstr ""
"提取后，嵌入式发行版（几乎）与用户系统完全隔离，包括环境变量、系统注册表设置和已安装的软件包。标准库以预编译和优化的 ``.pyc`` 文件形式包含在 "
"ZIP 中，并提供了 ``python3.dll``、``python313.dll``、``python.exe`` 和 "
"``pythonw.exe``。Tcl/tk（包括所有依赖项，如 Idle）、pip 和 Python 文档不包含在内。"

#: ../../using/windows.rst:874
msgid ""
"A default ``._pth`` file is included, which further restricts the default "
"search paths (as described below in :ref:`windows_finding_modules`). This "
"file is intended for embedders to modify as necessary."
msgstr ""
"嵌入式发行版中包含一个默认的 ``._pth`` 文件，该文件进一步限制了默认搜索路径（如下面 "
":ref:`windows_finding_modules` 中所述）。此文件供嵌入者根据需要进行修改。"

#: ../../using/windows.rst:878
msgid ""
"Third-party packages should be installed by the application installer "
"alongside the embedded distribution. Using pip to manage dependencies as for"
" a regular Python installation is not supported with this distribution, "
"though with some care it may be possible to include and use pip for "
"automatic updates. In general, third-party packages should be treated as "
"part of the application (\"vendoring\") so that the developer can ensure "
"compatibility with newer versions before providing updates to users."
msgstr ""
"第三方软件包应该由应用程序与嵌入式发行版一起安装。这个发行版不支持像常规 Python 安装那样使用 pip 来管理依赖关系，不过可以小心地将 pip "
"包含进来并使用它进行自动更新。 通常，第三方包应该作为应用程序的一部分(“打包”)处理，以便开发人员在向用户提供更新之前能够确保与新版本兼容。"

#: ../../using/windows.rst:886
msgid ""
"The two recommended use cases for this distribution are described below."
msgstr "下面描述了这个发行版的两个推荐用例。"

#: ../../using/windows.rst:889
msgid "Python Application"
msgstr "Python 应用程序"

#: ../../using/windows.rst:891
msgid ""
"An application written in Python does not necessarily require users to be "
"aware of that fact. The embedded distribution may be used in this case to "
"include a private version of Python in an install package. Depending on how "
"transparent it should be (or conversely, how professional it should appear),"
" there are two options."
msgstr ""
"用 Python 编写的应用程序并不一定要求用户了解这一事实。 在这种情况下，可以使用嵌入式发行版在安装包中包含 Python 的私有版本。 "
"根据它应该有多透明（或者相反，它应该看起来有多专业），有两个选项。"

#: ../../using/windows.rst:897
msgid ""
"Using a specialized executable as a launcher requires some coding, but "
"provides the most transparent experience for users. With a customized "
"launcher, there are no obvious indications that the program is running on "
"Python: icons can be customized, company and version information can be "
"specified, and file associations behave properly. In most cases, a custom "
"launcher should simply be able to call ``Py_Main`` with a hard-coded command"
" line."
msgstr ""
"使用专门的可执行文件作为启动程序需要一些编码，但为用户提供了最透明的体验。使用定制的启动器，没有明显的迹象表明程序是在 Python "
"上运行的：图标可以定制，公司和版本信息可以指定，文件关联可以正常运行。在大多数情况下，自定义启动程序应该只需使用硬编码的命令行就能调用 "
"``Py_Main``。"

#: ../../using/windows.rst:904
msgid ""
"The simpler approach is to provide a batch file or generated shortcut that "
"directly calls the ``python.exe`` or ``pythonw.exe`` with the required "
"command-line arguments. In this case, the application will appear to be "
"Python and not its actual name, and users may have trouble distinguishing it"
" from other running Python processes or file associations."
msgstr ""
"更简单的方法是提供批处理文件或生成的快捷方式，使用所需的命令行参数直接调用 ``python.exe`` 或 "
"``pythonw.exe``。在这种情况下，应用程序将显示为 Python 而不是其实际名称，并且用户可能无法将其与其他正在运行的 Python "
"进程或文件关联区分开来。"

#: ../../using/windows.rst:910
msgid ""
"With the latter approach, packages should be installed as directories "
"alongside the Python executable to ensure they are available on the path. "
"With the specialized launcher, packages can be located in other locations as"
" there is an opportunity to specify the search path before launching the "
"application."
msgstr ""
"对于后一种方法，包应该与 Python 可执行文件一起作为目录安装，以确保它们在路径上可用。 "
"使用专用的启动器，包可以位于其他位置，因为在启动应用程序之前有机会指定搜索路径。"

#: ../../using/windows.rst:916
msgid "Embedding Python"
msgstr "嵌入Python"

#: ../../using/windows.rst:918
msgid ""
"Applications written in native code often require some form of scripting "
"language, and the embedded Python distribution can be used for this purpose."
" In general, the majority of the application is in native code, and some "
"part will either invoke ``python.exe`` or directly use ``python3.dll``. For "
"either case, extracting the embedded distribution to a subdirectory of the "
"application installation is sufficient to provide a loadable Python "
"interpreter."
msgstr ""
"用本地代码编写的应用程序通常需要某种形式的脚本语言，嵌入式Python发行版可以用于此目的。通常，应用程序的大部分都是本机代码，某些部分将调用 "
"``python.exe`` 或直接使用 ``python3.dll`` "
"。无论是哪种情况，将嵌入的发行版解压缩到应用程序安装的子目录中就足以提供可加载的Python解释器。"

#: ../../using/windows.rst:925
msgid ""
"As with the application use, packages can be installed to any location as "
"there is an opportunity to specify search paths before initializing the "
"interpreter. Otherwise, there is no fundamental differences between using "
"the embedded distribution and a regular installation."
msgstr "与应用程序使用一样，包可以安装到任何位置，因为在初始化解释器之前有机会指定搜索路径。否则，使用嵌入式发行版和常规安装之间没有根本区别。"

#: ../../using/windows.rst:934
msgid "The nuget.org packages"
msgstr "nuget.org 安装包"

#: ../../using/windows.rst:938
msgid ""
"The nuget.org package is a reduced size Python environment intended for use "
"on continuous integration and build systems that do not have a system-wide "
"install of Python. While nuget is \"the package manager for .NET\", it also "
"works perfectly fine for packages containing build-time tools."
msgstr ""
"nuget.org 是一个精简的 Python 环境，用于在没有全局安装 Python 的系统的持续集成和构建。 虽然 nuget "
"是“.NET的包管理器”，但是对于包含构建时工具的包来说，它也可以很好地工作。"

#: ../../using/windows.rst:943
msgid ""
"Visit `nuget.org <https://www.nuget.org/>`_ for the most up-to-date "
"information on using nuget. What follows is a summary that is sufficient for"
" Python developers."
msgstr ""
"访问 `nuget.org <https://www.nuget.org/>`_  获取有关使用 nuget 的最新信息。 下面的摘要对 Python "
"开发人员来说已经足够了。"

#: ../../using/windows.rst:947
msgid ""
"The ``nuget.exe`` command line tool may be downloaded directly from "
"``https://aka.ms/nugetclidl``, for example, using curl or PowerShell. With "
"the tool, the latest version of Python for 64-bit or 32-bit machines is "
"installed using::"
msgstr ""
"``nuget.exe`` 命令行工具可以直接从 ``https://aka.ms/nugetclidl`` 下载，例如，使用 curl 或 "
"PowerShell。 使用该工具安装 64 位或 32 位最新版本的 Python::"

#: ../../using/windows.rst:952
msgid ""
"nuget.exe install python -ExcludeVersion -OutputDirectory .\n"
"nuget.exe install pythonx86 -ExcludeVersion -OutputDirectory ."
msgstr ""
"nuget.exe install python -ExcludeVersion -OutputDirectory .\n"
"nuget.exe install pythonx86 -ExcludeVersion -OutputDirectory ."

#: ../../using/windows.rst:955
msgid ""
"To select a particular version, add a ``-Version 3.x.y``. The output "
"directory may be changed from ``.``, and the package will be installed into "
"a subdirectory. By default, the subdirectory is named the same as the "
"package, and without the ``-ExcludeVersion`` option this name will include "
"the specific version installed. Inside the subdirectory is a ``tools`` "
"directory that contains the Python installation:"
msgstr ""
"要选择特定版本，请添加 ``-Version 3.x.y`` 。 输出目录可以从 ``.`` 更改，包将安装到子目录中。 "
"默认情况下，子目录的名称与包的名称相同，如果没有 ``-ExcludeVersion`` 选项，则此名称将包含已安装的特定版本。 子目录里面是一个包含 "
"Python 安装的 ``tools`` 目录："

#: ../../using/windows.rst:962
msgid ""
"# Without -ExcludeVersion\n"
"> .\\python.3.5.2\\tools\\python.exe -V\n"
"Python 3.5.2\n"
"\n"
"# With -ExcludeVersion\n"
"> .\\python\\tools\\python.exe -V\n"
"Python 3.5.2"
msgstr ""
"# Without -ExcludeVersion\n"
"> .\\python.3.5.2\\tools\\python.exe -V\n"
"Python 3.5.2\n"
"\n"
"# With -ExcludeVersion\n"
"> .\\python\\tools\\python.exe -V\n"
"Python 3.5.2"

#: ../../using/windows.rst:972
msgid ""
"In general, nuget packages are not upgradeable, and newer versions should be"
" installed side-by-side and referenced using the full path. Alternatively, "
"delete the package directory manually and install it again. Many CI systems "
"will do this automatically if they do not preserve files between builds."
msgstr ""
"通常，nuget 包不可升级，应该平行安装较新版本并使用完整路径引用。 或者，手动删除程序包目录并再次安装。 如果在构建之间不保留文件，许多 CI "
"系统将自动执行此操作。"

#: ../../using/windows.rst:977
msgid ""
"Alongside the ``tools`` directory is a ``build\\native`` directory. This "
"contains a MSBuild properties file ``python.props`` that can be used in a "
"C++ project to reference the Python install. Including the settings will "
"automatically use the headers and import libraries in your build."
msgstr ""
"除了 ``tools`` 目录外，还有一个 ``build\\native`` 目录。 它包含一个 MSBuild 属性文件 "
"``python.props``，可以在 C++ 项目中使用该文件来引用 Python 安装。 包含这些设置将自动在生成中使用标头和导入库。"

#: ../../using/windows.rst:982
msgid ""
"The package information pages on nuget.org are "
"`www.nuget.org/packages/python <https://www.nuget.org/packages/python>`_ for"
" the 64-bit version, `www.nuget.org/packages/pythonx86 "
"<https://www.nuget.org/packages/pythonx86>`_ for the 32-bit version, and "
"`www.nuget.org/packages/pythonarm64 "
"<https://www.nuget.org/packages/pythonarm64>`_ for the ARM64 version"
msgstr ""
"在 nuget.org 上的软件包信息页 `www.nuget.org/packages/python "
"<https://www.nuget.org/packages/python>`_ 对应 64 "
"位版本，`www.nuget.org/packages/pythonx86 "
"<https://www.nuget.org/packages/pythonx86>`_ 对应 32 "
"位版本，`www.nuget.org/packages/pythonarm64 "
"<https://www.nuget.org/packages/pythonarm64>`_ 对应 ARM64 版本"

#: ../../using/windows.rst:990
msgid "Free-threaded packages"
msgstr "自由线程版软件包"

#: ../../using/windows.rst:999
msgid ""
"Packages containing free-threaded binaries are named `python-freethreaded "
"<https://www.nuget.org/packages/python-freethreaded>`_ for the 64-bit "
"version, `pythonx86-freethreaded "
"<https://www.nuget.org/packages/pythonx86-freethreaded>`_ for the 32-bit "
"version, and `pythonarm64-freethreaded "
"<https://www.nuget.org/packages/pythonarm64-freethreaded>`_ for the ARM64 "
"version. These packages contain both the ``python3.13t.exe`` and "
"``python.exe`` entry points, both of which run free threaded."
msgstr ""
"包含自由线程版二进制文件的包名称 `python-freethreaded "
"<https://www.nuget.org/packages/python-freethreaded>`_ 对应 64 "
"位版本，`pythonx86-freethreaded "
"<https://www.nuget.org/packages/pythonx86-freethreaded>`_ 对应 32 "
"位版本，`pythonarm64-freethreaded "
"<https://www.nuget.org/packages/pythonarm64-freethreaded>`_ 对应 ARM64 版本。 "
"这些包同时包含 ``python3.13t.exe`` 和 ``python.exe`` 入口点，两者均在自由线程模式下运行。"

#: ../../using/windows.rst:1010
msgid "Alternative bundles"
msgstr "替代捆绑包"

#: ../../using/windows.rst:1012
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr "除了标准的CPython发行版之外，还有一些包含附加功能的修改包。以下是热门版本及其主要功能的列表："

#: ../../using/windows.rst:1016
msgid "`ActivePython <https://www.activestate.com/products/python/>`_"
msgstr "`ActivePython <https://www.activestate.com/products/python/>`_"

#: ../../using/windows.rst:1017
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr "具有多平台兼容性的安装程序，文档，PyWin32"

#: ../../using/windows.rst:1019
msgid "`Anaconda <https://www.anaconda.com/download/>`_"
msgstr "`Anaconda <https://www.anaconda.com/download/>`_"

#: ../../using/windows.rst:1020
msgid ""
"Popular scientific modules (such as numpy, scipy and pandas) and the "
"``conda`` package manager."
msgstr "流行的科学模块（如numpy，scipy和pandas）和 ``conda`` 包管理器。"

#: ../../using/windows.rst:1023
msgid ""
"`Enthought Deployment Manager "
"<https://assets.enthought.com/downloads/edm/>`_"
msgstr "`Enthought 部署管理器 <https://assets.enthought.com/downloads/edm/>`_"

#: ../../using/windows.rst:1024
msgid "\"The Next Generation Python Environment and Package Manager\"."
msgstr "“下一代的 Python 环境和包管理器”"

#: ../../using/windows.rst:1026
msgid ""
"Previously Enthought provided Canopy, but it `reached end of life in 2016 "
"<https://support.enthought.com/hc/en-us/articles/360038600051-Canopy-GUI-"
"end-of-life-transition-to-the-Enthought-Deployment-Manager-EDM-and-Visual-"
"Studio-Code>`_."
msgstr ""
"之前 Enthought 提供了 Canopy，但已经 `于 2016 年结束生命期 "
"<https://support.enthought.com/hc/en-us/articles/360038600051-Canopy-GUI-"
"end-of-life-transition-to-the-Enthought-Deployment-Manager-EDM-and-Visual-"
"Studio-Code>`_。"

#: ../../using/windows.rst:1029
msgid "`WinPython <https://winpython.github.io/>`_"
msgstr "`WinPython <https://winpython.github.io/>`_"

#: ../../using/windows.rst:1030
msgid ""
"Windows-specific distribution with prebuilt scientific packages and tools "
"for building packages."
msgstr "特定于Windows的发行版，包含用于构建包的预构建科学包和工具。"

#: ../../using/windows.rst:1033
msgid ""
"Note that these packages may not include the latest versions of Python or "
"other libraries, and are not maintained or supported by the core Python "
"team."
msgstr "请注意，这些软件包可能不包含最新版本的Python或其他库，并且不由核心Python团队维护或支持。"

#: ../../using/windows.rst:1038
msgid "Supported Windows versions"
msgstr "支持的 Windows 版本"

#: ../../using/windows.rst:1040
msgid ""
"As specified in :pep:`11`, a Python release only supports a Windows platform"
" while Microsoft considers the platform under extended support. This means "
"that Python |version| supports Windows 10 and newer. If you require Windows "
"7 support, please install Python 3.8. If you require Windows 8.1 support, "
"please install Python 3.12."
msgstr ""
"根据 :pep:`11` 的规定，Python 发行版仅在 Microsoft 提供扩展支持的 Windows 平台上受支持。这意味着 Python "
"|version| 支持 Windows 10 及更高版本。如果您需要 Windows 7 支持，请安装 Python 3.8。如果您需要 "
"Windows 8.1 支持，请安装 Python 3.12。"

#: ../../using/windows.rst:1050 ../../using/windows.rst:1331
msgid "Removing the MAX_PATH Limitation"
msgstr "删除 MAX_PATH 限制"

#: ../../using/windows.rst:1052 ../../using/windows.rst:1333
msgid ""
"Windows historically has limited path lengths to 260 characters. This meant "
"that paths longer than this would not resolve and errors would result."
msgstr "历史上Windows的路径长度限制为260个字符。这意味着长于此的路径将无法解决并导致错误。"

#: ../../using/windows.rst:1055
msgid ""
"In the latest versions of Windows, this limitation can be expanded to over "
"32,000 characters. Your administrator will need to activate the \"Enable "
"Win32 long paths\" group policy, or set ``LongPathsEnabled`` to ``1`` in the"
" registry key "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem``."
msgstr ""
"在最新版本的 Windows 中，此限制可以扩展到超过 32,000 个字符。您的管理员需要启用“启用 Win32 长路径”组策略，或将注册表项 "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem`` 中的 "
"``LongPathsEnabled`` 设置为 ``1``。"

#: ../../using/windows.rst:1060 ../../using/windows.rst:1342
msgid ""
"This allows the :func:`open` function, the :mod:`os` module and most other "
"path functionality to accept and return paths longer than 260 characters."
msgstr "这允许 :func:`open` 函数，:mod:`os` 模块和大多数其他路径功能接受并返回长度超过 260 个字符的路径。"

#: ../../using/windows.rst:1063
msgid ""
"After changing the above option and rebooting, no further configuration is "
"required."
msgstr "更改上述选项并重启后，无需进一步配置。"

#: ../../using/windows.rst:1070
msgid "UTF-8 mode"
msgstr "UTF-8 模式"

#: ../../using/windows.rst:1074
msgid ""
"Windows still uses legacy encodings for the system encoding (the ANSI Code "
"Page).  Python uses it for the default encoding of text files (e.g. "
":func:`locale.getencoding`)."
msgstr ""
"Windows 仍然使用传统编码格式作为系统的编码格式 (ANSI 代码页)。 Python 使用它作为文本文件默认的编码格式 (即 "
":func:`locale.getencoding`)。"

#: ../../using/windows.rst:1078
msgid ""
"This may cause issues because UTF-8 is widely used on the internet and most "
"Unix systems, including WSL (Windows Subsystem for Linux)."
msgstr ""
"这可能会造成问题，因为因特网和大多数 Unix 系统包括 WSL (Windows Subsystem for Linux) 广泛使用 UTF-8。"

#: ../../using/windows.rst:1081
msgid ""
"You can use the :ref:`Python UTF-8 Mode <utf8-mode>` to change the default "
"text encoding to UTF-8. You can enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>` via the ``-X utf8`` command line option, or the "
"``PYTHONUTF8=1`` environment variable.  See :envvar:`PYTHONUTF8` for "
"enabling UTF-8 mode, and :ref:`setting-envvars` for how to modify "
"environment variables."
msgstr ""
"你可以使用 :ref:`Python UTF-8 模式 <utf8-mode>` 将默认的文本编码格式改为 UTF-8。 要启用 "
":ref:`Python UTF-8 模式 <utf8-mode>` 可以通过 ``-X utf8`` 命令行选项，或者 "
"``PYTHONUTF8=1`` 环境变量。 请参阅 :envvar:`PYTHONUTF8` 了解如何启用 UTF-8 模式，并参阅 "
":ref:`setting-envvars` 了解如何修改环境变量。"

#: ../../using/windows.rst:1087
msgid ""
"When the :ref:`Python UTF-8 Mode <utf8-mode>` is enabled, you can still use "
"the system encoding (the ANSI Code Page) via the \"mbcs\" codec."
msgstr ""
"当 :ref:`Python UTF-8 模式 <utf8-mode>` 启用时，你仍然可以通过 \"mbcs\" 编解码器使用系统编码格式（ANSI "
"代码页）。"

#: ../../using/windows.rst:1090
msgid ""
"Note that adding ``PYTHONUTF8=1`` to the default environment variables will "
"affect all Python 3.7+ applications on your system. If you have any Python "
"3.7+ applications which rely on the legacy system encoding, it is "
"recommended to set the environment variable temporarily or use the ``-X "
"utf8`` command line option."
msgstr ""
"请注意添加 ``PYTHONUTF8=1`` 到默认环境变量将会影响你的系统中的所有 Python 3.7+ 应用。 如果你有任何 Python "
"3.7+ 应用仍然依赖于传统的系统编码格式，则推荐设置临时环境变量或使用 ``-X utf8`` 命令行选项。"

#: ../../using/windows.rst:1097
msgid ""
"Even when UTF-8 mode is disabled, Python uses UTF-8 by default on Windows "
"for:"
msgstr "即使在不启用 UTF-8 模式时，Windows 版的 Python 也会在以下情况中默认使用 UTF-8："

#: ../../using/windows.rst:1100
msgid "Console I/O including standard I/O (see :pep:`528` for details)."
msgstr "控制台 I/O 包括标准 I/O (详情见 :pep:`528`)。"

#: ../../using/windows.rst:1101
msgid ""
"The :term:`filesystem encoding <filesystem encoding and error handler>` (see"
" :pep:`529` for details)."
msgstr ""
":term:`文件系统编码格式 <filesystem encoding and error handler>` (参见 :pep:`529` "
"了解详情)。"

#: ../../using/windows.rst:1108
msgid "Finding modules"
msgstr "查找模块"

#: ../../using/windows.rst:1110
msgid ""
"These notes supplement the description at :ref:`sys-path-init` with detailed"
" Windows notes."
msgstr "这些注释以详细的 Windows 注释对 :ref:`sys-path-init` 中的描述进行了补充。"

#: ../../using/windows.rst:1113
msgid ""
"When no ``._pth`` file is found, this is how :data:`sys.path` is populated "
"on Windows:"
msgstr "当找不到 ``._pth`` 文件时， :data:`sys.path` 是如何在Windows上填充的："

#: ../../using/windows.rst:1116
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr "在开始时，添加一个空条目，该条目对应于当前目录。"

#: ../../using/windows.rst:1119
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in "
":ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""
"如果环境变量 :envvar:`PYTHONPATH` 存在，如 :ref:`using-on-envvars` "
"中所述，则接下来添加其条目。请注意，在Windows上，此变量中的路径必须用分号分隔，以区别于驱动器标识符中使用的冒号（ ``C:\\``  等）。"

#: ../../using/windows.rst:1124
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of "
":samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` "
"under both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  "
"Subkeys which have semicolon-delimited path strings as their default value "
"will cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""
"额外的 \"应用程序路径\" 可以作为子键被同时添加到注册表 ``HKEY_CURRENT_USER`` 和 "
"``HKEY_LOCAL_MACHINE`` 分支下的 "
":samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` 中。 "
"以分号分隔的路径字符串作为默认值的子键将导致每个路径都被添加到 :data:`sys.path` 中。 （请注意所有已知的安装程序都只使用 "
"HKLM，因此 HKCU 通常为空。）"

#: ../../using/windows.rst:1131
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (either ``Lib\\os.py`` or ``pythonXY.zip``) to"
" deduce the \"Python Home\".  If a Python home is found, the relevant sub-"
"directories added to :data:`sys.path` (``Lib``, ``plat-win``, etc) are based"
" on that folder.  Otherwise, the core Python path is constructed from the "
"PythonPath stored in the registry."
msgstr ""
"如果设置了环境变量 :envvar:`PYTHONHOME`  ，则将其假定为 “Python 主目录” 。否则，主Python可执行文件的路径用于定位"
" “landmark 文件” （ ``Lib\\os.py`` 或 ``pythonXY.zip`` ）以推断 ”Python 主目录“ "
"。如果找到了Python主目录，则基于该文件夹将相关的子目录添加到 :data:`sys.path` （``Lib`` , ``plat-win`` "
"等）。否则，核心Python路径是从存储在注册表中的PythonPath构造的。"

#: ../../using/windows.rst:1139
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""
"如果找不到Python Home，也没有指定 :envvar:`PYTHONPATH` 环境变量，并且找不到注册表项，则使用具有相对条目的默认路径（例如"
" ``.\\Lib; .\\plat-win`` 等等）。"

#: ../../using/windows.rst:1143
msgid ""
"If a ``pyvenv.cfg`` file is found alongside the main executable or in the "
"directory one level above the executable, the following variations apply:"
msgstr "如果在主可执行文件旁边或在可执行文件上一级的目录中找到 ``pyvenv.cfg`` 文件，则以下变体适用："

#: ../../using/windows.rst:1146
msgid ""
"If ``home`` is an absolute path and :envvar:`PYTHONHOME` is not set, this "
"path is used instead of the path to the main executable when deducing the "
"home location."
msgstr ""
"如果 ``home`` 是一个绝对路径，并且 :envvar:`PYTHONHOME` 未设置，则在推断起始位置时使用此路径而不是主可执行文件的路径。"

#: ../../using/windows.rst:1150
msgid "The end result of all this is:"
msgstr "这一切的最终结果是："

#: ../../using/windows.rst:1152
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are"
" ignored.  Other \"application paths\" in the registry are always read."
msgstr ""
"运行 :file:`python.exe` "
"，或主Python目录中的任何其他.exe（安装版本，或直接来自PCbuild目录）时，推导出核心路径，并忽略注册表中的核心路径。始终读取注册表中的其他“应用程序路径”。"

#: ../../using/windows.rst:1157
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""
"当Python托管在另一个.exe（不同的目录，通过COM嵌入等）时，将不会推断出“Python "
"Home”，因此使用了来自注册表的核心路径。始终读取注册表中的其他“应用程序路径”。"

#: ../../using/windows.rst:1161
msgid ""
"If Python can't find its home and there are no registry value (frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""
"如果Python找不到它的主目录并且没有注册表值（冻结的.exe，一些非常奇怪的安装设置），那么你会得到一条带有一些默认但相对的路径的路径。"

#: ../../using/windows.rst:1165
msgid ""
"For those who want to bundle Python into their application or distribution, "
"the following advice will prevent conflicts with other installations:"
msgstr "对于那些想要将Python捆绑到其应用程序或发行版中的人，以下建议将防止与其他安装冲突："

#: ../../using/windows.rst:1168
msgid ""
"Include a ``._pth`` file alongside your executable containing the "
"directories to include. This will ignore paths listed in the registry and "
"environment variables, and also ignore :mod:`site` unless ``import site`` is"
" listed."
msgstr ""
"在您的可执行文件中包含一个 ``._pth`` 文件，其中包含目录。这将忽略注册表和环境变量中列出的路径，并忽略 :mod:`site` ，除非列出 "
"``import site`` 。"

#: ../../using/windows.rst:1173
msgid ""
"If you are loading :file:`python3.dll` or :file:`python37.dll` in your own "
"executable, explicitly set :c:member:`PyConfig.module_search_paths` before "
":c:func:`Py_InitializeFromConfig`."
msgstr ""
"如果你在自己的可执行文件中加载 :file:`python3.dll` 或 :file:`python37.dll`，请在 "
":c:func:`Py_InitializeFromConfig` 之前显式地设置 "
":c:member:`PyConfig.module_search_paths`。"

#: ../../using/windows.rst:1177
msgid ""
"Clear and/or overwrite :envvar:`PYTHONPATH` and set :envvar:`PYTHONHOME` "
"before launching :file:`python.exe` from your application."
msgstr ""
"清除 和/或 覆盖 :envvar:`PYTHONPATH` 并在启动来自应用程序的 :file:`python.exe` 之前设置 "
":envvar:`PYTHONHOME` 。"

#: ../../using/windows.rst:1180
msgid ""
"If you cannot use the previous suggestions (for example, you are a "
"distribution that allows people to run :file:`python.exe` directly), ensure "
"that the landmark file (:file:`Lib\\\\os.py`) exists in your install "
"directory. (Note that it will not be detected inside a ZIP file, but a "
"correctly named ZIP file will be detected instead.)"
msgstr ""
"如果您不能使用前面的建议（例如，您是一个允许人们直接运行 :file:`python.exe` 的分发版），请确保安装目录中存在 landmark 文件"
" (:file:`Lib\\\\os.py`)。 （请注意，在 ZIP 文件中不会检测到该文件，但会检测到正确命名的 ZIP 文件。）"

#: ../../using/windows.rst:1186
msgid ""
"These will ensure that the files in a system-wide installation will not take"
" precedence over the copy of the standard library bundled with your "
"application. Otherwise, your users may experience problems using your "
"application. Note that the first suggestion is the best, as the others may "
"still be susceptible to non-standard paths in the registry and user site-"
"packages."
msgstr ""
"这些将确保系统范围安装中的文件不会优先于与应用程序捆绑在一起的标准库的副本。否则，用户可能会在使用您的应用程序时遇到问题请注意，第一个建议是最好的，因为其他建议可能仍然容易受到注册表和用户站点包中的非标准路径的影响。"

#: ../../using/windows.rst:1194
msgid ""
"Add ``._pth`` file support and removes ``applocal`` option from "
"``pyvenv.cfg``."
msgstr "添加 ``._pth`` 文件支持并从 ``pyvenv.cfg`` 中移除了 ``applocal`` 选项。"

#: ../../using/windows.rst:1199
msgid ""
"Add :file:`python{XX}.zip` as a potential landmark when directly adjacent to"
" the executable."
msgstr "当与可执行文件直接相邻时将添加 :file:`python{XX}.zip` 作为潜在的标志物。"

#: ../../using/windows.rst:1204
msgid ""
"Modules specified in the registry under ``Modules`` (not ``PythonPath``) may"
" be imported by :class:`importlib.machinery.WindowsRegistryFinder`. This "
"finder is enabled on Windows in 3.6.0 and earlier, but may need to be "
"explicitly added to :data:`sys.meta_path` in the future."
msgstr ""
"在 ``Modules`` (不是 ``PythonPath``) 下的注册表中指定的模块可以通过 "
":class:`importlib.machinery.WindowsRegistryFinder` 导入。 在 Windows 上此查找器在 "
"3.6.0 及更早版本中被启用，但在将来可能需要显式地添加到 :data:`sys.meta_path`。"

#: ../../using/windows.rst:1210
msgid "Additional modules"
msgstr "附加模块"

#: ../../using/windows.rst:1212
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr "尽管Python的目标是在所有平台中都可移植，但是Windows有一些独特的特性。在标准库和外部都有一些模块和代码片段在使用这些特性。"

#: ../../using/windows.rst:1216
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-"
"specific-services`."
msgstr "特定于Windows的标准模块记录在 :ref:`mswin-specific-services` 中。"

#: ../../using/windows.rst:1220
msgid "PyWin32"
msgstr "PyWin32"

#: ../../using/windows.rst:1222
msgid ""
"The :pypi:`PyWin32` module by Mark Hammond is a collection of modules for "
"advanced Windows-specific support.  This includes utilities for:"
msgstr ""
"Mark Hammond 编写的 :pypi:`PyWin32` 模块是一组用于高级 Windows 专属支持的模块。 这包括以下实用工具："

#: ../../using/windows.rst:1226
msgid ""
"`Component Object Model "
"<https://learn.microsoft.com/windows/win32/com/component-object-model--com--"
"portal>`_ (COM)"
msgstr ""
"`Component Object Model "
"<https://learn.microsoft.com/windows/win32/com/component-object-model--com--"
"portal>`_ (COM)"

#: ../../using/windows.rst:1229
msgid "Win32 API calls"
msgstr "Win32 API 调用"

#: ../../using/windows.rst:1230
msgid "Registry"
msgstr "注册"

#: ../../using/windows.rst:1231
msgid "Event log"
msgstr "事件日志"

#: ../../using/windows.rst:1232
msgid ""
"`Microsoft Foundation Classes <https://learn.microsoft.com/cpp/mfc/mfc-"
"desktop-applications>`_ (MFC) user interfaces"
msgstr ""
"`Microsoft Foundation Classes <https://learn.microsoft.com/cpp/mfc/mfc-"
"desktop-applications>`_ (MFC) 用户接口"

#: ../../using/windows.rst:1236
msgid ""
"`PythonWin <https://web.archive.org/web/20060524042422/ "
"https://www.python.org/windows/pythonwin/>`_ is a sample MFC application "
"shipped with PyWin32.  It is an embeddable IDE with a built-in debugger."
msgstr ""
"`PythonWin <https://web.archive.org/web/20060524042422/ "
"https://www.python.org/windows/pythonwin/>`_ "
"是PyWin32附带的一个示例MFC应用程序。它是一个内置调试器的可嵌入IDE。"

#: ../../using/windows.rst:1242
msgid ""
"`Win32 How Do I...? <https://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""
"`Win32 How Do I...? <https://timgolden.me.uk/python/win32_how_do_i.html>`_"

#: ../../using/windows.rst:1243
msgid "by Tim Golden"
msgstr "Tim Golden 著"

#: ../../using/windows.rst:1245
msgid "`Python and COM <https://www.boddie.org.uk/python/COM.html>`_"
msgstr "`Python and COM <https://www.boddie.org.uk/python/COM.html>`_"

#: ../../using/windows.rst:1246
msgid "by David and Paul Boddie"
msgstr "David 和 Paul Boddie 著"

#: ../../using/windows.rst:1250
msgid "cx_Freeze"
msgstr "cx_Freeze"

#: ../../using/windows.rst:1252
msgid ""
"`cx_Freeze <https://cx-freeze.readthedocs.io/en/latest/>`_ wraps Python "
"scripts into executable Windows programs (:file:`{*}.exe` files).  When you "
"have done this, you can distribute your application without requiring your "
"users to install Python."
msgstr ""
"`cx_Freeze <https://cx-freeze.readthedocs.io/en/latest/>`_ 将 Python "
"脚本包装成可执行的 Windows 程序 (:file:`{*}.exe` 文件)。 当你完成此操作后，你就可以分发你的应用程序而无需用户安装 "
"Python。"

#: ../../using/windows.rst:1259
msgid "Compiling Python on Windows"
msgstr "在Windows上编译Python"

#: ../../using/windows.rst:1261
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `checkout "
"<https://devguide.python.org/setup/#get-the-source-code>`_."
msgstr ""
"如果你想要自己编译 CPython，首先要做的是获取 `源代码 "
"<https://www.python.org/downloads/source/>`_。 你可以下载最新发行版的源代码或是执行最新的 `签出 "
"<https://devguide.python.org/setup/#get-the-source-code>`_。"

#: ../../using/windows.rst:1266
msgid ""
"The source tree contains a build solution and project files for Microsoft "
"Visual Studio, which is the compiler used to build the official Python "
"releases. These files are in the :file:`PCbuild` directory."
msgstr ""
"源代码树包含Microsoft Visual Studio的构建解决方案和项目文件，它是用于构建官方Python版本的编译器。这些文件位于 "
":file:`PCbuild` 目录中。"

#: ../../using/windows.rst:1270
msgid ""
"Check :file:`PCbuild/readme.txt` for general information on the build "
"process."
msgstr "检查 :file:`PCbuild/readme.txt` 以获取有关构建过程的一般信息。"

#: ../../using/windows.rst:1272
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr "有关扩展模块，请参阅 :ref:`building-on-windows` 。"

#: ../../using/windows.rst:1279
msgid "The full installer (deprecated)"
msgstr "完整安装程序（已弃用）"

#: ../../using/windows.rst:1283
msgid ""
"This installer is deprecated since 3.14 and will not be produced for Python "
"3.16 or later. See :ref:`pymanager` for the modern installer."
msgstr "此安装程序自 3.14 版本起已弃用，Python 3.16 及更高版本将不再提供。现代安装程序请参阅 :ref:`pymanager`。"

#: ../../using/windows.rst:1288
msgid "Installation steps"
msgstr "安装步骤"

#: ../../using/windows.rst:1290
msgid ""
"Four Python |version| installers are available for download - two each for "
"the 32-bit and 64-bit versions of the interpreter. The *web installer* is a "
"small initial download, and it will automatically download the required "
"components as necessary. The *offline installer* includes the components "
"necessary for a default installation and only requires an internet "
"connection for optional features. See :ref:`install-layout-option` for other"
" ways to avoid downloading during installation."
msgstr ""
"四个 Python |version| 安装程序可供下载 - 32位和64位版本的各有两个。 *web installer* "
"（网络安装包）是一个小的初始化工具，它将在安装过程中，根据需要自动下载所需的组件。 *offline installer* "
"（离线安装包）内含默认安装所需的组件，可选择功能仍需要Internet连接下载。请参阅 :ref:`install-layout-option` "
"以了解在安装过程中避免下载的其他方法。"

#: ../../using/windows.rst:1298
msgid "After starting the installer, one of two options may be selected:"
msgstr "启动安装程序后，可以选择以下两个选项之一："

#: ../../using/windows.rst:1302
msgid "If you select \"Install Now\":"
msgstr "如果选择“Install Now（立即安装）”："

#: ../../using/windows.rst:1304
msgid ""
"You will *not* need to be an administrator (unless a system update for the C"
" Runtime Library is required or you install the :ref:`launcher` for all "
"users)"
msgstr "您 *不* 需要成为管理员（除非需要对C运行库进行系统更新，或者为所有用户安装 :ref:`launcher` ）"

#: ../../using/windows.rst:1307
msgid "Python will be installed into your user directory"
msgstr "Python将安装到您的用户目录中"

#: ../../using/windows.rst:1308
msgid ""
"The :ref:`launcher` will be installed according to the option at the bottom "
"of the first page"
msgstr ":ref:`launcher` 将根据第一页底部的选项安装"

#: ../../using/windows.rst:1310
msgid "The standard library, test suite, launcher and pip will be installed"
msgstr "将安装标准库，测试套件，启动器和pip"

#: ../../using/windows.rst:1311
msgid ""
"If selected, the install directory will be added to your :envvar:`PATH`"
msgstr "如果选择将安装目录将添加到 :envvar:`PATH`"

#: ../../using/windows.rst:1312
msgid "Shortcuts will only be visible for the current user"
msgstr "快捷方式仅对当前用户可见"

#: ../../using/windows.rst:1314
msgid ""
"Selecting \"Customize installation\" will allow you to select the features "
"to install, the installation location and other options or post-install "
"actions. To install debugging symbols or binaries, you will need to use this"
" option."
msgstr "选择“自定义安装”将允许您选择：要安装的功能、安装位置、其他选项或安装后的操作。如果要安装调试符号或二进制文件，您需要使用此选项。"

#: ../../using/windows.rst:1318
msgid ""
"To perform an all-users installation, you should select \"Customize "
"installation\". In this case:"
msgstr "如要为全部用户安装，应选择“自定义安装”。在这种情况下:"

#: ../../using/windows.rst:1321
msgid "You may be required to provide administrative credentials or approval"
msgstr "您可能需要提供管理凭据或批准"

#: ../../using/windows.rst:1322
msgid "Python will be installed into the Program Files directory"
msgstr "Python 将安装到Program Files目录中"

#: ../../using/windows.rst:1323
msgid "The :ref:`launcher` will be installed into the Windows directory"
msgstr ":ref:`launcher` 将安装到Windows目录中"

#: ../../using/windows.rst:1324
msgid "Optional features may be selected during installation"
msgstr "安装期间可以选择可选功能"

#: ../../using/windows.rst:1325
msgid "The standard library can be pre-compiled to bytecode"
msgstr "标准库可以预编译为字节码"

#: ../../using/windows.rst:1326
msgid ""
"If selected, the install directory will be added to the system "
":envvar:`PATH`"
msgstr "如果选中，安装目录将添加到系统 :envvar:`PATH`"

#: ../../using/windows.rst:1327
msgid "Shortcuts are available for all users"
msgstr "快捷方式所有用户可用"

#: ../../using/windows.rst:1336
msgid ""
"In the latest versions of Windows, this limitation can be expanded to "
"approximately 32,000 characters. Your administrator will need to activate "
"the \"Enable Win32 long paths\" group policy, or set ``LongPathsEnabled`` to"
" ``1`` in the registry key "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem``."
msgstr ""
"在最新版本的 Windows 中，此限制可被扩展到大约 32,000 个字符。 但需要让管理员激活“启用 Win32 长路径”组策略，或在注册表键 "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem`` 中设置 "
"``LongPathsEnabled`` 为 ``1``。"

#: ../../using/windows.rst:1345
msgid "After changing the above option, no further configuration is required."
msgstr "更改上述选项后，无需进一步配置。"

#: ../../using/windows.rst:1349
msgid "Support for long paths was enabled in Python."
msgstr "Python中启用了对长路径的支持。"

#: ../../using/windows.rst:1354
msgid "Installing Without UI"
msgstr "无UI 安装"

#: ../../using/windows.rst:1356
msgid ""
"All of the options available in the installer UI can also be specified from "
"the command line, allowing scripted installers to replicate an installation "
"on many machines without user interaction.  These options may also be set "
"without suppressing the UI in order to change some of the defaults."
msgstr ""
"安装程序UI中的所有选项也可以从命令行指定，允许脚本安装程序在许多机器上复制安装，而无需用户交互。还可以在不禁用UI的情况下设置这些选项，以更改一些默认值。"

#: ../../using/windows.rst:1361
msgid ""
"The following options (found by executing the installer with ``/?``) can be "
"passed into the installer:"
msgstr "下列选项（通过附带 ``/?`` 执行安装器来查看）可被传给安装器:"

#: ../../using/windows.rst:1365 ../../using/windows.rst:1385
#: ../../using/windows.rst:1980
msgid "Name"
msgstr "名称"

#: ../../using/windows.rst:1367
msgid "/passive"
msgstr "/passive"

#: ../../using/windows.rst:1367
msgid "to display progress without requiring user interaction"
msgstr "显示进度而无需用户交互"

#: ../../using/windows.rst:1369
msgid "/quiet"
msgstr "/quiet"

#: ../../using/windows.rst:1369
msgid "to install/uninstall without displaying any UI"
msgstr "安装/卸载时不显示任何 UI"

#: ../../using/windows.rst:1371
msgid "/simple"
msgstr "/simple"

#: ../../using/windows.rst:1371
msgid "to prevent user customization"
msgstr "防止用户定制"

#: ../../using/windows.rst:1373
msgid "/uninstall"
msgstr "/uninstall"

#: ../../using/windows.rst:1373
msgid "to remove Python (without confirmation)"
msgstr "移除 Python（无需确认）"

#: ../../using/windows.rst:1375
msgid "/layout [directory]"
msgstr "/layout [directory]"

#: ../../using/windows.rst:1375
msgid "to pre-download all components"
msgstr "预下载所有组件"

#: ../../using/windows.rst:1377
msgid "/log [filename]"
msgstr "/log [filename]"

#: ../../using/windows.rst:1377
msgid "to specify log files location"
msgstr "指定日志记录文件位置"

#: ../../using/windows.rst:1380
msgid ""
"All other options are passed as ``name=value``, where the value is usually "
"``0`` to disable a feature, ``1`` to enable a feature, or a path. The full "
"list of available options is shown below."
msgstr ""
"所有其他选项都传递为 ``name=value`` ，其中值通常是 ``0`` 来禁用某个特性， ``1`` "
"来启用某个特性或路径。可用选项的完整列表如下所示。"

#: ../../using/windows.rst:1385
msgid "Default"
msgstr "默认值"

#: ../../using/windows.rst:1387
msgid "InstallAllUsers"
msgstr "InstallAllUsers"

#: ../../using/windows.rst:1387
msgid "Perform a system-wide installation."
msgstr "为所有用户安装。"

#: ../../using/windows.rst:1387 ../../using/windows.rst:1413
#: ../../using/windows.rst:1416 ../../using/windows.rst:1420
#: ../../using/windows.rst:1429 ../../using/windows.rst:1451
#: ../../using/windows.rst:1459 ../../using/windows.rst:1462
msgid "0"
msgstr "0"

#: ../../using/windows.rst:1389
msgid "TargetDir"
msgstr "TargetDir"

#: ../../using/windows.rst:1389
msgid "The installation directory"
msgstr "安装目录"

#: ../../using/windows.rst:1389
msgid "Selected based on InstallAllUsers"
msgstr "基于InstallAllUsers选择"

#: ../../using/windows.rst:1392
msgid "DefaultAllUsersTargetDir"
msgstr "DefaultAllUsersTargetDir"

#: ../../using/windows.rst:1392
msgid "The default installation directory for all-user installs"
msgstr "为所有用户安装时的默认安装路径"

#: ../../using/windows.rst:1392
msgid ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` or :file:`\\ "
"%ProgramFiles(x86)%\\\\\\ Python X.Y`"
msgstr ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` 或 :file:`\\ "
"%ProgramFiles(x86)%\\\\\\ Python X.Y`"

#: ../../using/windows.rst:1397
msgid "DefaultJustForMeTargetDir"
msgstr "DefaultJustForMeTargetDir"

#: ../../using/windows.rst:1397
msgid "The default install directory for just-for-me installs"
msgstr "仅为当前用户安装时的默认安装路径"

#: ../../using/windows.rst:1397
msgid ""
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY` or "
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY-32` or "
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY-64`"
msgstr ""
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY` 或 "
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY-32` 或 "
":file:`%LocalAppData%\\\\\\ Programs\\\\Python\\\\\\ PythonXY-64`"

#: ../../using/windows.rst:1407
msgid "DefaultCustomTargetDir"
msgstr "DefaultCustomTargetDir"

#: ../../using/windows.rst:1407
msgid "The default custom install directory displayed in the UI"
msgstr "UI中显示的默认自定义安装目录"

#: ../../using/windows.rst:1407 ../../using/windows.rst:1464
msgid "(empty)"
msgstr "（空）"

#: ../../using/windows.rst:1410
msgid "AssociateFiles"
msgstr "AssociateFiles"

#: ../../using/windows.rst:1410
msgid "Create file associations if the launcher is also installed."
msgstr "如果还安装了启动器，则创建文件关联。"

#: ../../using/windows.rst:1410 ../../using/windows.rst:1424
#: ../../using/windows.rst:1427 ../../using/windows.rst:1431
#: ../../using/windows.rst:1435 ../../using/windows.rst:1439
#: ../../using/windows.rst:1441 ../../using/windows.rst:1445
#: ../../using/windows.rst:1449 ../../using/windows.rst:1453
#: ../../using/windows.rst:1455 ../../using/windows.rst:1457
msgid "1"
msgstr "1"

#: ../../using/windows.rst:1413
msgid "CompileAll"
msgstr "CompileAll"

#: ../../using/windows.rst:1413
msgid "Compile all ``.py`` files to ``.pyc``."
msgstr "将所有 ``.py`` 文件编译为 ``.pyc`` 。"

#: ../../using/windows.rst:1416
msgid "PrependPath"
msgstr "PrependPath"

#: ../../using/windows.rst:1416
msgid ""
"Prepend install and Scripts directories  to :envvar:`PATH` and add ``.PY`` "
"to :envvar:`PATHEXT`"
msgstr "将安装和脚本目录添加到 :envvar:`PATH` 并将 ``.PY`` 添加到 :envvar:`PATHEXT`"

#: ../../using/windows.rst:1420
msgid "AppendPath"
msgstr "AppendPath"

#: ../../using/windows.rst:1420
msgid ""
"Append install and Scripts directories  to :envvar:`PATH` and add ``.PY`` to"
" :envvar:`PATHEXT`"
msgstr "将安装和脚本目录添加到 :envvar:`PATH` 并将 ``.PY`` 添加到 :envvar:`PATHEXT`"

#: ../../using/windows.rst:1424
msgid "Shortcuts"
msgstr "Shortcuts"

#: ../../using/windows.rst:1424
msgid ""
"Create shortcuts for the interpreter, documentation and IDLE if installed."
msgstr "如果已安装，为解释器，文档和IDLE创建快捷方式"

#: ../../using/windows.rst:1427
msgid "Include_doc"
msgstr "Include_doc"

#: ../../using/windows.rst:1427
msgid "Install Python manual"
msgstr "安装Python手册"

#: ../../using/windows.rst:1429
msgid "Include_debug"
msgstr "Include_debug"

#: ../../using/windows.rst:1429
msgid "Install debug binaries"
msgstr "安装调试二进制文件"

#: ../../using/windows.rst:1431
msgid "Include_dev"
msgstr "Include_dev"

#: ../../using/windows.rst:1431
msgid ""
"Install developer headers and libraries. Omitting this may lead to an "
"unusable installation."
msgstr "安装开发者头文件和库文件。 省略这一步可能导致安装不可用。"

#: ../../using/windows.rst:1435
msgid "Include_exe"
msgstr "Include_exe"

#: ../../using/windows.rst:1435
msgid ""
"Install :file:`python.exe` and related files. Omitting this may lead to an "
"unusable installation."
msgstr "安装 :file:`python.exe` 以及相关文件。忽略此项可能会导致安装不可用。"

#: ../../using/windows.rst:1439
msgid "Include_launcher"
msgstr "Include_launcher"

#: ../../using/windows.rst:1439
msgid "Install :ref:`launcher`."
msgstr "安装 :ref:`launcher` ."

#: ../../using/windows.rst:1441
msgid "InstallLauncherAllUsers"
msgstr "InstallLauncherAllUsers"

#: ../../using/windows.rst:1441
msgid ""
"Installs the launcher for all users. Also requires ``Include_launcher`` to "
"be set to 1"
msgstr "为所有用户安装启动器。还需要 ``Include_launcher`` 被设定为1"

#: ../../using/windows.rst:1445
msgid "Include_lib"
msgstr "Include_lib"

#: ../../using/windows.rst:1445
msgid ""
"Install standard library and extension modules. Omitting this may lead to an"
" unusable installation."
msgstr "安装标准库和扩展模块。 省略这一步可能导致安装不可用。"

#: ../../using/windows.rst:1449
msgid "Include_pip"
msgstr "Include_pip"

#: ../../using/windows.rst:1449
msgid "Install bundled pip and setuptools"
msgstr "安装捆绑的pip和setuptools"

#: ../../using/windows.rst:1451
msgid "Include_symbols"
msgstr "Include_symbols"

#: ../../using/windows.rst:1451
msgid "Install debugging symbols (``*.pdb``)"
msgstr "安装调试符号集 (``*.pdb``)"

#: ../../using/windows.rst:1453
msgid "Include_tcltk"
msgstr "Include_tcltk"

#: ../../using/windows.rst:1453
msgid "Install Tcl/Tk support and IDLE"
msgstr "安装Tcl/Tk 支持和IDLE"

#: ../../using/windows.rst:1455
msgid "Include_test"
msgstr "Include_test"

#: ../../using/windows.rst:1455
msgid "Install standard library test suite"
msgstr "安装标准库测试套件"

#: ../../using/windows.rst:1457
msgid "Include_tools"
msgstr "Include_tools"

#: ../../using/windows.rst:1457
msgid "Install utility scripts"
msgstr "安装实用程序脚本"

#: ../../using/windows.rst:1459
msgid "LauncherOnly"
msgstr "LauncherOnly"

#: ../../using/windows.rst:1459
msgid "Only installs the launcher. This will override most other options."
msgstr "仅安装启动器。这将覆盖大多数其他选项。"

#: ../../using/windows.rst:1462
msgid "SimpleInstall"
msgstr "SimpleInstall"

#: ../../using/windows.rst:1462
msgid "Disable most install UI"
msgstr "禁用大多数安装UI"

#: ../../using/windows.rst:1464
msgid "SimpleInstallDescription"
msgstr "SimpleInstallDescription"

#: ../../using/windows.rst:1464
msgid "A custom message to display when the simplified install UI is used."
msgstr "使用简化安装UI时显示的自定义消息。"

#: ../../using/windows.rst:1468
msgid ""
"For example, to silently install a default, system-wide Python installation,"
" you could use the following command (from an elevated command prompt)::"
msgstr "例如，要以静默方式全局安装默认的Python，您可以（在命令提示符>）使用以下命令::"

#: ../../using/windows.rst:1471
msgid "python-3.9.0.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0"
msgstr ""
"python-3.9.0.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0"

#: ../../using/windows.rst:1473
msgid ""
"To allow users to easily install a personal copy of Python without the test "
"suite, you could provide a shortcut with the following command. This will "
"display a simplified initial page and disallow customization::"
msgstr "要允许用户在没有测试套件的情况下轻松安装Python的个人副本，可以使用以下命令提供快捷方式。这将显示一个简化的初始页面，不允许自定义::"

#: ../../using/windows.rst:1477
msgid ""
"python-3.9.0.exe InstallAllUsers=0 Include_launcher=0 Include_test=0\n"
"    SimpleInstall=1 SimpleInstallDescription=\"Just for me, no test suite.\""
msgstr ""
"python-3.9.0.exe InstallAllUsers=0 Include_launcher=0 Include_test=0\n"
"    SimpleInstall=1 SimpleInstallDescription=\"Just for me, no test suite.\""

#: ../../using/windows.rst:1480
msgid ""
"(Note that omitting the launcher also omits file associations, and is only "
"recommended for per-user installs when there is also a system-wide "
"installation that included the launcher.)"
msgstr "（请注意，省略启动器也会省略文件关联，并且仅在全局安装包含启动器时才建议用于每用户安装。）"

#: ../../using/windows.rst:1484
msgid ""
"The options listed above can also be provided in a file named "
"``unattend.xml`` alongside the executable. This file specifies a list of "
"options and values. When a value is provided as an attribute, it will be "
"converted to a number if possible. Values provided as element text are "
"always left as strings. This example file sets the same options as the "
"previous example:"
msgstr ""
"上面列出的选项也可以在一个名为 ``unattend.xml`` "
"的文件中与可执行文件一起提供。此文件指定选项和值的列表。作为属性提供的值，（如果可能）它将转换为数字。作为文本提供的值，始终保留为字符串。此示例文件设置与上一示例采用相同的选项："

#: ../../using/windows.rst:1490
msgid ""
"<Options>\n"
"    <Option Name=\"InstallAllUsers\" Value=\"no\" />\n"
"    <Option Name=\"Include_launcher\" Value=\"0\" />\n"
"    <Option Name=\"Include_test\" Value=\"no\" />\n"
"    <Option Name=\"SimpleInstall\" Value=\"yes\" />\n"
"    <Option Name=\"SimpleInstallDescription\">Just for me, no test suite</Option>\n"
"</Options>"
msgstr ""
"<Options>\n"
"    <Option Name=\"InstallAllUsers\" Value=\"no\" />\n"
"    <Option Name=\"Include_launcher\" Value=\"0\" />\n"
"    <Option Name=\"Include_test\" Value=\"no\" />\n"
"    <Option Name=\"SimpleInstall\" Value=\"yes\" />\n"
"    <Option Name=\"SimpleInstallDescription\">Just for me, no test suite</Option>\n"
"</Options>"

#: ../../using/windows.rst:1503
msgid "Installing Without Downloading"
msgstr "免下载安装"

#: ../../using/windows.rst:1505
msgid ""
"As some features of Python are not included in the initial installer "
"download, selecting those features may require an internet connection.  To "
"avoid this need, all possible components may be downloaded on-demand to "
"create a complete *layout* that will no longer require an internet "
"connection regardless of the selected features. Note that this download may "
"be bigger than required, but where a large number of installations are going"
" to be performed it is very useful to have a locally cached copy."
msgstr ""
"由于下载的初始安装包中未包含Python的某些可选功能，如果选择安装这些功能可能需要Internet连接。为了避免这种需要，可以按需下载所有可能的组件，以创建一个完整的布局，该布局将不再需要internet连接，而不管所选择的特性是什么。请注意，此下载可能比要求的要大，但是如果要执行大量安装，则拥有本地缓存​​的副本非常有用。"

#: ../../using/windows.rst:1513
msgid ""
"Execute the following command from Command Prompt to download all possible "
"required files.  Remember to substitute ``python-3.9.0.exe`` for the actual "
"name of your installer, and to create layouts in their own directories to "
"avoid collisions between files with the same name."
msgstr ""
"从命令提示符执行以下命令以下载所有可能的必需文件。 请记得要将 ``python-3.9.0.exe`` "
"替换为安装程序的实际名称，并在单独的目录中创建子目录以避免同名文件间的冲突。"

#: ../../using/windows.rst:1520
msgid "python-3.9.0.exe /layout [optional target directory]"
msgstr "python-3.9.0.exe /layout [可选的目标目录]"

#: ../../using/windows.rst:1522
msgid ""
"You may also specify the ``/quiet`` option to hide the progress display."
msgstr "您也可以指定 ``/quiet`` 选项来隐藏进度显示。"

#: ../../using/windows.rst:1525
msgid "Modifying an install"
msgstr "修改安装"

#: ../../using/windows.rst:1527
msgid ""
"Once Python has been installed, you can add or remove features through the "
"Programs and Features tool that is part of Windows. Select the Python entry "
"and choose \"Uninstall/Change\" to open the installer in maintenance mode."
msgstr ""
"安装Python后，您可以通过Windows中的“程序和功能”工具添加或删除功能。选择Python条目并选择“卸载/更改”以在维护模式下打开安装程序。"

#: ../../using/windows.rst:1531
msgid ""
"\"Modify\" allows you to add or remove features by modifying the checkboxes "
"- unchanged checkboxes will not install or remove anything. Some options "
"cannot be changed in this mode, such as the install directory; to modify "
"these, you will need to remove and then reinstall Python completely."
msgstr ""
"“修改” 允许您通过修改复选框来添加或删除功能 - "
"未更改的复选框将不会安装或删除任何内容。在此模式下无法更改某些选项，例如安装目录；要修改这些，您需要完全删除然后重新安装Python。"

#: ../../using/windows.rst:1536
msgid ""
"\"Repair\" will verify all the files that should be installed using the "
"current settings and replace any that have been removed or modified."
msgstr "“修复” 将使用当前设置验证应安装的所有文件，并替换已删除或修改的任何文件"

#: ../../using/windows.rst:1539
msgid ""
"\"Uninstall\" will remove Python entirely, with the exception of the "
":ref:`launcher`, which has its own entry in Programs and Features."
msgstr "“卸载” 将完全删除Python，但 :ref:`launcher` 除外，它在“程序和功能”中有自己的条目。"

#: ../../using/windows.rst:1553
msgid ""
"To install pre-built binaries with free-threading enabled (see :pep:`703`), "
"you should select \"Customize installation\". The second page of options "
"includes the \"Download free-threaded binaries\" checkbox."
msgstr ""
"要安装启用了自由线程的预编译版二进制文件 (参见 :pep:`703`)，你应当选择 \"Customize installation\"。 "
"在第二个选项页中包括了 \"Download free-threaded binaries\" 复选框。"

#: ../../using/windows.rst:1559
msgid ""
"Selecting this option will download and install additional binaries to the "
"same location as the main Python install. The main executable is called "
"``python3.13t.exe``, and other binaries either receive a ``t`` suffix or a "
"full ABI suffix. Python source files and bundled third-party dependencies "
"are shared with the main install."
msgstr ""
"选择此选项将下载并将额外的二进制文件安装到与 Python 主安装版本相同的目录下。 主可执行文件的名称为 "
"``python3.13t.exe``，而其他二进制文件将带有 ``t`` 前缀或完整的 ABI 前缀。 Python "
"源文件和捆绑的第三方依赖将与主安装版本共享。"

#: ../../using/windows.rst:1565
msgid ""
"The free-threaded version is registered as a regular Python install with the"
" tag ``3.13t`` (with a ``-32`` or ``-arm64`` suffix as normal for those "
"platforms). This allows tools to discover it, and for the :ref:`launcher` to"
" support ``py.exe -3.13t``. Note that the launcher will interpret ``py.exe "
"-3`` (or a ``python3`` shebang) as \"the latest 3.x install\", which will "
"prefer the free-threaded binaries over the regular ones, while ``py.exe "
"-3.13`` will not. If you use the short style of option, you may prefer to "
"not install the free-threaded binaries at this time."
msgstr ""
"自由线程版将被注册为具有 ``3.13t`` 标签的常规 Python 安装版（并会按相应系统平台的惯例附带 ``-32`` 或 ``-arm64`` "
"后缀）。 这使得各种工具能够找到它，并使得 :ref:`launcher` 能够支持 ``py.exe -3.13t``。 请注意 launcher "
"会将 ``py.exe -3`` (或 ``python3`` shebang 行) 解读为“最新的 3.x "
"安装版”，这将使得自由线程版二进制文件优先于常规版，而 ``py.exe -3.13`` 则会使用常规版。 "
"如果你要使用简短风格的选项，那么目前你应该选择不安装自由线程版二进制文件。"

#: ../../using/windows.rst:1574
msgid ""
"To specify the install option at the command line, use "
"``Include_freethreaded=1``. See :ref:`install-layout-option` for "
"instructions on pre-emptively downloading the additional binaries for "
"offline install. The options to include debug symbols and binaries also "
"apply to the free-threaded builds."
msgstr ""
"要在命令行中指定安装选项，请使用 ``Include_freethreaded=1``。 请参阅 :ref:`install-layout-"
"option` 获取有关预先下载额外二进制文件供离线安装的指导。 包括调试符号和二进制文件的选项也同样适用于自由线程构建版。"

#: ../../using/windows.rst:1580
msgid ""
"Free-threaded binaries are also available :ref:`on nuget.org <windows-"
"nuget>`."
msgstr "自由线程版二进制文件也可 :ref:`在 nuget.org <windows-nuget>` 获取。"

#: ../../using/windows.rst:1584
msgid "Python Launcher for Windows (Deprecated)"
msgstr "针对 Windows 的 Python 启动器 (已弃用)"

#: ../../using/windows.rst:1588
msgid ""
"The launcher and this documentation have been superseded by the Python "
"Install Manager described above. This is preserved temporarily for "
"historical interest."
msgstr "启动器和本文档已被上文所述的 Python 安装管理器取代。保留这些内容只是暂时出于历史参考目的。"

#: ../../using/windows.rst:1594
msgid ""
"The Python launcher for Windows is a utility which aids in locating and "
"executing of different Python versions.  It allows scripts (or the command-"
"line) to indicate a preference for a specific Python version, and will "
"locate and execute that version."
msgstr ""
"用于Windows的Python启动器是一个实用程序，可帮助定位和执行不同的Python版本。它允许脚本（或命令行）指示特定Python版本的首选项，并将定位并执行该版本。"

#: ../../using/windows.rst:1599
msgid ""
"Unlike the :envvar:`PATH` variable, the launcher will correctly select the "
"most appropriate version of Python. It will prefer per-user installations "
"over system-wide ones, and orders by language version rather than using the "
"most recently installed version."
msgstr ""
"与 :envvar:`PATH` "
"变量不同，启动器将正确选择最合适的Python版本。它更倾向于按用户安装而不是系统安装，并按语言版本排序，而不是使用最新安装的版本。"

#: ../../using/windows.rst:1604
msgid "The launcher was originally specified in :pep:`397`."
msgstr "启动器最初是在 :pep:`397` 中指定的。"

#: ../../using/windows.rst:1607
msgid "Getting started"
msgstr "入门"

#: ../../using/windows.rst:1610
msgid "From the command-line"
msgstr "从命令行"

#: ../../using/windows.rst:1614
msgid ""
"System-wide installations of Python 3.3 and later will put the launcher on "
"your :envvar:`PATH`. The launcher is compatible with all available versions "
"of Python, so it does not matter which version is installed. To check that "
"the launcher is available, execute the following command in Command Prompt::"
msgstr ""
"全局安装Python 3.3及更高版本将把启动器放在你的 :envvar:`PATH` "
"上。启动程序与所有可用的Python版本兼容，因此安装哪个版本无关紧要。要检查启动程序是否可用，请在命令提示符中执行以下命令："

#: ../../using/windows.rst:1619
msgid "py"
msgstr "py"

#: ../../using/windows.rst:1621
msgid ""
"You should find that the latest version of Python you have installed is "
"started - it can be exited as normal, and any additional command-line "
"arguments specified will be sent directly to Python."
msgstr "您应该会发现已安装的最新版本的Python已启动 - 它可以正常退出，并且将指定的任何其他命令行参数直接发送到Python。"

#: ../../using/windows.rst:1625
msgid ""
"If you have multiple versions of Python installed (e.g., 3.7 and |version|) "
"you will have noticed that Python |version| was started - to launch Python "
"3.7, try the command::"
msgstr ""
"如果您安装了多个版本的Python（例如，3.7和 |version| ），您会注意到Python |version| 启动 - 如果要启动 "
"Python 3.7，尝试命令："

#: ../../using/windows.rst:1629
msgid "py -3.7"
msgstr "py -3.7"

#: ../../using/windows.rst:1631
msgid ""
"If you want the latest version of Python 2 you have installed, try the "
"command::"
msgstr "如果您想使用已安装的 Python 2 的最新版本，请尝试以下命令："

#: ../../using/windows.rst:1634
msgid "py -2"
msgstr "py -2"

#: ../../using/windows.rst:1636
msgid ""
"If you see the following error, you do not have the launcher installed::"
msgstr "如果您看到以下错误，则表明您没有安装启动器："

#: ../../using/windows.rst:1638
msgid ""
"'py' is not recognized as an internal or external command,\n"
"operable program or batch file."
msgstr "'py' 不是内部或外部命令，也不是可运行的程序或批处理文件。"

#: ../../using/windows.rst:1641
msgid "The command::"
msgstr "Tix 命令："

#: ../../using/windows.rst:1643
msgid "py --list"
msgstr "py --list"

#: ../../using/windows.rst:1645
msgid "displays the currently installed version(s) of Python."
msgstr "显示当前已安装的Python版本。"

#: ../../using/windows.rst:1647
msgid ""
"The ``-x.y`` argument is the short form of the ``-V:Company/Tag`` argument, "
"which allows selecting a specific Python runtime, including those that may "
"have come from somewhere other than python.org. Any runtime registered by "
"following :pep:`514` will be discoverable. The ``--list`` command lists all "
"available runtimes using the ``-V:`` format."
msgstr ""
"``-x.y`` 参数是 ``-V:Company/Tag`` 参数的简短形式，它允许选择一个特定的 Python 运行时，包括可能来自于 "
"python.org 以外地方的版本。 任何遵循 :pep:`514` 进行注册的运行时都将是可被发现的。 ``--list`` 命令将列出所有使用 "
"``-V:`` 格式的可用运行时。"

#: ../../using/windows.rst:1653
msgid ""
"When using the ``-V:`` argument, specifying the Company will limit selection"
" to runtimes from that provider, while specifying only the Tag will select "
"from all providers. Note that omitting the slash implies a tag::"
msgstr ""
"当使用 ``-V:`` 参数时，指定 Company 将把选择限制到来自该提供方的运行时，而仅指定 Tag 将选择来自所有提供方的运行时。 "
"请注意省略斜杠将会视作是一个 Tag::"

#: ../../using/windows.rst:1657
msgid ""
"# Select any '3.*' tagged runtime\n"
"py -V:3\n"
"\n"
"# Select any 'PythonCore' released runtime\n"
"py -V:PythonCore/\n"
"\n"
"# Select PythonCore's latest Python 3 runtime\n"
"py -V:PythonCore/3"
msgstr ""
"# 选择任意带 '3.*' 标签的运行时\n"
"py -V:3\n"
"\n"
"# 选择任何 'PythonCore' 发行的运行时\n"
"py -V:PythonCore/\n"
"\n"
"# 选择 PythonCore 的最新 Python 3 运行时\n"
"py -V:PythonCore/3"

#: ../../using/windows.rst:1666
msgid ""
"The short form of the argument (``-3``) only ever selects from core Python "
"releases, and not other distributions. However, the longer form (``-V:3``) "
"will select from any."
msgstr ""
"该参数的简短形式 (``-3``) 将只选择来自核心 Python 发布版的运行时，而不选择其他分发版。 但是，完整形式 (``-V:3``) "
"则将选择来自任何版本的运行时。"

#: ../../using/windows.rst:1670
msgid ""
"The Company is matched on the full string, case-insensitive. The Tag is "
"matched on either the full string, or a prefix, provided the next character "
"is a dot or a hyphen. This allows ``-V:3.1`` to match ``3.1-32``, but not "
"``3.10``. Tags are sorted using numerical ordering (``3.10`` is newer than "
"``3.1``), but are compared using text (``-V:3.01`` does not match ``3.1``)."
msgstr ""
"Company 是在完整字符串上以大小写不敏感的方式进行匹配。 Tag 是在完整字符串或前缀上进行匹配，具体取决于下一个字符是点号还是连字符。 这将允许"
" ``-V:3.1`` 匹配 ``3.1-32``，但不匹配 ``3.10``。 Tag 是使用数字顺序进行排序的 (``3.10`` 比 "
"``3.1`` 新)，但会按文本进行比较 (``-V:3.01`` 将不匹配 ``3.1``)。"

#: ../../using/windows.rst:1678
msgid "Virtual environments"
msgstr "从虚拟环境"

#: ../../using/windows.rst:1682
msgid ""
"If the launcher is run with no explicit Python version specification, and a "
"virtual environment (created with the standard library :mod:`venv` module or"
" the external ``virtualenv`` tool) active, the launcher will run the virtual"
" environment's interpreter rather than the global one.  To run the global "
"interpreter, either deactivate the virtual environment, or explicitly "
"specify the global Python version."
msgstr ""
"如果启动程序运行时没有明确的Python版本，并且虚拟环境（使用标准库创建 :mod:`venv` 模块或外部 ``virtualenv`` "
"工具）处于活动状态，则启动程序将运行虚拟环境的解释器而不是全局的。要运行全局解释器，请停用虚拟环境，或显式指定全局Python版本。"

#: ../../using/windows.rst:1690
msgid "From a script"
msgstr "从脚本"

#: ../../using/windows.rst:1692
msgid ""
"Let's create a test Python script - create a file called ``hello.py`` with "
"the following contents"
msgstr "让我们创建一个测试Python脚本 - 创建一个名为 ``hello.py`` 的文件，其中包含以下内容"

#: ../../using/windows.rst:1695
msgid ""
"#! python\n"
"import sys\n"
"sys.stdout.write(\"hello from Python %s\\n\" % (sys.version,))"
msgstr ""
"#! python\n"
"import sys\n"
"sys.stdout.write(\"hello from Python %s\\n\" % (sys.version,))"

#: ../../using/windows.rst:1701
msgid "From the directory in which hello.py lives, execute the command::"
msgstr "从hello.py所在的目录中，执行以下命令："

#: ../../using/windows.rst:1703
msgid "py hello.py"
msgstr "py hello.py"

#: ../../using/windows.rst:1705
msgid ""
"You should notice the version number of your latest Python 2.x installation "
"is printed.  Now try changing the first line to be:"
msgstr "您应该注意到最新的Python 2.x安装的版本号已打印出来。现在尝试将第一行更改为："

#: ../../using/windows.rst:1708
msgid "#! python3"
msgstr "#! python3"

#: ../../using/windows.rst:1712
msgid ""
"Re-executing the command should now print the latest Python 3.x information."
" As with the above command-line examples, you can specify a more explicit "
"version qualifier.  Assuming you have Python 3.7 installed, try changing the"
" first line to ``#! python3.7`` and you should find the 3.7 version "
"information printed."
msgstr ""
"现在重新执行该命令将打印最新的 Python 3.x 信息。 如上面的命令行示例一样，你可以更明确地指定版本限定符。 假设你已安装了 Python "
"3.7，请尝试将第一行改为 ``#! python3.7`` 那么你应当看到打印出了 3.7 的版本信息。"

#: ../../using/windows.rst:1718
msgid ""
"Note that unlike interactive use, a bare \"python\" will use the latest "
"version of Python 2.x that you have installed.  This is for backward "
"compatibility and for compatibility with Unix, where the command ``python`` "
"typically refers to Python 2."
msgstr ""
"请注意，与交互式使用不同，裸“python”将使用您已安装的Python 2.x的最新版本。这是为了向后兼容及兼容Unix，其中命令 "
"``python`` 通常是指Python 2。"

#: ../../using/windows.rst:1724
msgid "From file associations"
msgstr "从文件关联"

#: ../../using/windows.rst:1726
msgid ""
"The launcher should have been associated with Python files (i.e. ``.py``, "
"``.pyw``, ``.pyc`` files) when it was installed.  This means that when you "
"double-click on one of these files from Windows explorer the launcher will "
"be used, and therefore you can use the same facilities described above to "
"have the script specify the version which should be used."
msgstr ""
"安装时应该将启动器与Python文件（即 ``.py``, ``.pyw``, ``.pyc`` "
"文件）相关联。这意味着当您从Windows资源管理器中双击其中一个文件时，将使用启动程序，因此您可以使用上述相同的工具让脚本指定应使用的版本。"

#: ../../using/windows.rst:1732
msgid ""
"The key benefit of this is that a single launcher can support multiple "
"Python versions at the same time depending on the contents of the first "
"line."
msgstr "这样做的主要好处是，单个启动程序可以同时支持多个Python版本，具体取决于第一行的内容。"

#: ../../using/windows.rst:1736
msgid "Shebang Lines"
msgstr "Shebang 行"

#: ../../using/windows.rst:1738
msgid ""
"If the first line of a script file starts with ``#!``, it is known as a "
"\"shebang\" line.  Linux and other Unix like operating systems have native "
"support for such lines and they are commonly used on such systems to "
"indicate how a script should be executed.  This launcher allows the same "
"facilities to be used with Python scripts on Windows and the examples above "
"demonstrate their use."
msgstr ""
"如果脚本文件的第一行以 ``#!`` 开头，则称为 \"shebang\" "
"行。Linux和其他类Unix操作系统都有对这些行的本机支持，它们通常在此类系统上用来指示应该如何执行脚本。这个启动器允许在Windows上对Python脚本使用相同的工具，上面的示例演示了它们的使用。"

#: ../../using/windows.rst:1745
msgid ""
"To allow shebang lines in Python scripts to be portable between Unix and "
"Windows, this launcher supports a number of 'virtual' commands to specify "
"which interpreter to use.  The supported virtual commands are:"
msgstr ""
"为了允许Python脚本中的shebang行在Unix和Windows之间移植，该启动器支持许多“虚拟”命令来指定要使用的解释器。支持的虚拟命令是："

#: ../../using/windows.rst:1749
msgid "``/usr/bin/env``"
msgstr "``/usr/bin/env``"

#: ../../using/windows.rst:1750
msgid "``/usr/bin/python``"
msgstr "``/usr/bin/python``"

#: ../../using/windows.rst:1751
msgid "``/usr/local/bin/python``"
msgstr "``/usr/local/bin/python``"

#: ../../using/windows.rst:1752
msgid "``python``"
msgstr "``python``"

#: ../../using/windows.rst:1766
msgid ""
"Any of the above virtual commands can be suffixed with an explicit version "
"(either just the major version, or the major and minor version). Furthermore"
" the 32-bit version can be requested by adding \"-32\" after the minor "
"version. I.e. ``/usr/bin/python3.7-32`` will request usage of the 32-bit "
"Python 3.7. If a virtual environment is active, the version will be ignored "
"and the environment will be used."
msgstr ""
"任何上述虚拟命令都可以附带一个显式版本号的后缀（可以是只有主版本号，也可以是有主版本号和次版本号）。 此外还可以在次版本号之后添加 \"-32\" "
"来请求 32 位版本。 即 ``/usr/bin/python3.7-32`` 将请求使用 32 位的 Python 3.7。 "
"如果激活了一个虚拟环境，则将忽略版本号并使用激活的环境。"

#: ../../using/windows.rst:1775
msgid ""
"Beginning with python launcher 3.7 it is possible to request 64-bit version "
"by the \"-64\" suffix. Furthermore it is possible to specify a major and "
"architecture without minor (i.e. ``/usr/bin/python3-64``)."
msgstr ""
"从 python 启动器 3.7 开始，可以通过 \"-64\" 后缀调用 64 位版本。 此外还可以指定一个主版本号加架构而不带次版本号 (即 "
"``/usr/bin/python3-64``)。"

#: ../../using/windows.rst:1781
msgid ""
"The \"-64\" suffix is deprecated, and now implies \"any architecture that is"
" not provably i386/32-bit\". To request a specific environment, use the new "
":samp:`-V:{TAG}` argument with the complete tag."
msgstr ""
"“-64”后缀已被弃用，现在会被视为“任何不被确定为 i386/32 位的架构”。 要请求一个特定的环境，请使用新的 :samp:`-V:{TAG}` "
"参数并附带完整的标签。"

#: ../../using/windows.rst:1787
msgid ""
"Virtual commands referencing ``python`` now prefer an active virtual "
"environment rather than searching :envvar:`PATH`. This handles cases where "
"the shebang specifies ``/usr/bin/env python3`` but :file:`python3.exe` is "
"not present in the active environment."
msgstr ""
"引用了 ``python`` 的虚拟命令现在会优先使用激活的虚拟环境再去搜索 :envvar:`PATH`。 这是为了处理 shebang 指定了 "
"``/usr/bin/env python3`` 但激活的环境中没有 :file:`python3.exe` 的情况。"

#: ../../using/windows.rst:1792
msgid ""
"The ``/usr/bin/env`` form of shebang line has one further special property. "
"Before looking for installed Python interpreters, this form will search the "
"executable :envvar:`PATH` for a Python executable matching the name provided"
" as the first argument. This corresponds to the behaviour of the Unix "
"``env`` program, which performs a :envvar:`PATH` search. If an executable "
"matching the first argument after the ``env`` command cannot be found, but "
"the argument starts with ``python``, it will be handled as described for the"
" other virtual commands. The environment variable "
":envvar:`!PYLAUNCHER_NO_SEARCH_PATH` may be set (to any value) to skip this "
"search of :envvar:`PATH`."
msgstr ""

#: ../../using/windows.rst:1803
msgid ""
"Shebang lines that do not match any of these patterns are looked up in the "
"``[commands]`` section of the launcher's :ref:`.INI file <launcher-ini>`. "
"This may be used to handle certain commands in a way that makes sense for "
"your system. The name of the command must be a single argument (no spaces in"
" the shebang executable), and the value substituted is the full path to the "
"executable (additional arguments specified in the .INI will be quoted as "
"part of the filename)."
msgstr ""
"无法匹配这些模式中任何一个的井号叹号行将在启动器的 :ref:`.INI 文件 <launcher-ini>` 的 ``[commands]`` "
"一节中查找。 这可被用来以对你的系统来说有意义的方式处理某些命令。 "
"命名的名称必须是一个单独的参数（在井号叹号行的可执行程序中不可有空格），而被替代的值则是该可执行程序的完整路径（在 .INI "
"中指定的附加参数将作为文件名的一部分被引用）。"

#: ../../using/windows.rst:1811
msgid ""
"[commands]\n"
"/bin/xpython=C:\\Program Files\\XPython\\python.exe"
msgstr ""
"[commands]\n"
"/bin/xpython=C:\\Program Files\\XPython\\python.exe"

#: ../../using/windows.rst:1816
msgid ""
"Any commands not found in the .INI file are treated as **Windows** "
"executable paths that are absolute or relative to the directory containing "
"the script file. This is a convenience for Windows-only scripts, such as "
"those generated by an installer, since the behavior is not compatible with "
"Unix-style shells. These paths may be quoted, and may include multiple "
"arguments, after which the path to the script and any additional arguments "
"will be appended."
msgstr ""
"任何未出现在 .INI 文件中的命令都会被当作 **Windows** 可执行程序的绝对或相对于包含脚本文件的目录的路径。 这对于 Windows "
"专属的脚本来说很方便，例如由安装器所生成的脚本，因为此行为与 Unix 风格的 shell 是不兼容的。 "
"这些路径可以加上引号，并可以包含多个参数，在它之后将会加上脚本路径以及任何附加参数。"

#: ../../using/windows.rst:1825
msgid "Arguments in shebang lines"
msgstr "shebang 行的参数"

#: ../../using/windows.rst:1827
msgid ""
"The shebang lines can also specify additional options to be passed to the "
"Python interpreter.  For example, if you have a shebang line:"
msgstr "shebang 行还可以指定要传递给Python解释器的其他选项。 举例来说，如果你有这样的 shebang 行："

#: ../../using/windows.rst:1830
msgid "#! /usr/bin/python -v"
msgstr "#! /usr/bin/python -v"

#: ../../using/windows.rst:1834
msgid "Then Python will be started with the ``-v`` option"
msgstr "那么 Python 将以 ``-v`` 选项启动"

#: ../../using/windows.rst:1837
msgid "Customization"
msgstr "自定义"

#: ../../using/windows.rst:1842
msgid "Customization via INI files"
msgstr "通过INI文件自定义"

#: ../../using/windows.rst:1844
msgid ""
"Two .ini files will be searched by the launcher - ``py.ini`` in the current "
"user's application data directory (``%LOCALAPPDATA%`` or "
"``$env:LocalAppData``) and ``py.ini`` in the same directory as the launcher."
" The same .ini files are used for both the 'console' version of the launcher"
" (i.e. py.exe) and for the 'windows' version (i.e. pyw.exe)."
msgstr ""
"启动器将搜索两个 .ini 文件 —— 当前用户应用程序数据目录中的 ``py.ini`` (``%LOCALAPPDATA%`` 或 "
"``$env:LocalAppData``) 以及启动器所在目录中的 ``py.ini``。 同样的 .ini 文件还会被用于启动器的‘控制台’版本 "
"(即 py.exe) 和‘窗口’版本 (即 pyw.exe)。"

#: ../../using/windows.rst:1850
msgid ""
"Customization specified in the \"application directory\" will have "
"precedence over the one next to the executable, so a user, who may not have "
"write access to the .ini file next to the launcher, can override commands in"
" that global .ini file."
msgstr ""
"“应用程序目录”中指定的自定义优先于可执行文件旁边.ini文件的自定义，因此对启动程序旁边的.ini文件不具有写访问权限的用户可以覆盖该全局.ini文件中的命令。"

#: ../../using/windows.rst:1855
msgid "Customizing default Python versions"
msgstr "自定义默认的Python版本"

#: ../../using/windows.rst:1857
msgid ""
"In some cases, a version qualifier can be included in a command to dictate "
"which version of Python will be used by the command. A version qualifier "
"starts with a major version number and can optionally be followed by a "
"period ('.') and a minor version specifier. Furthermore it is possible to "
"specify if a 32 or 64 bit implementation shall be requested by adding "
"\"-32\" or \"-64\"."
msgstr ""
"在某些情况下，可以在命令中包含版本限定符，以指定命令将使用哪个Python版本。版本限定符以主版本号开头，可以选择后跟 ('.') "
"和次版本说明符。此外，可以通过添加 \"-32\" 或 “-64” 来指定是请求32位还是64位实现。"

#: ../../using/windows.rst:1863
msgid ""
"For example, a shebang line of ``#!python`` has no version qualifier, while "
"``#!python3`` has a version qualifier which specifies only a major version."
msgstr ""
"例如，一个shebang 行的 ``#!python`` 行没有版本限定符，而 ``#!python3`` 有一个版本限定符，它只指定一个主版本。"

#: ../../using/windows.rst:1866
msgid ""
"If no version qualifiers are found in a command, the environment variable "
":envvar:`!PY_PYTHON` can be set to specify the default version qualifier. If"
" it is not set, the default is \"3\". The variable can specify any value "
"that may be passed on the command line, such as \"3\", \"3.7\", \"3.7-32\" "
"or \"3.7-64\". (Note that the \"-64\" option is only available with the "
"launcher included with Python 3.7 or newer.)"
msgstr ""

#: ../../using/windows.rst:1873
msgid ""
"If no minor version qualifiers are found, the environment variable "
"``PY_PYTHON{major}`` (where ``{major}`` is the current major version "
"qualifier as determined above) can be set to specify the full version. If no"
" such option is found, the launcher will enumerate the installed Python "
"versions and use the latest minor release found for the major version, which"
" is likely, although not guaranteed, to be the most recently installed "
"version in that family."
msgstr ""
"如果没有找到次版本限定符，则可以设置环境变量 ``PY_PYTHON{major}`` （其中 ``{major}`` "
"是上面确定的当前主要版本限定符）以指定完整版本。如果没有找到这样的选项，启动器将枚举已安装的Python版本并使用为主要版本找到的最新次要版本，尽管不能保证，但该版本可能是该系列中最新安装的版本。"

#: ../../using/windows.rst:1881
msgid ""
"On 64-bit Windows with both 32-bit and 64-bit implementations of the same "
"(major.minor) Python version installed, the 64-bit version will always be "
"preferred. This will be true for both 32-bit and 64-bit implementations of "
"the launcher - a 32-bit launcher will prefer to execute a 64-bit Python "
"installation of the specified version if available. This is so the behavior "
"of the launcher can be predicted knowing only what versions are installed on"
" the PC and without regard to the order in which they were installed (i.e., "
"without knowing whether a 32 or 64-bit version of Python and corresponding "
"launcher was installed last). As noted above, an optional \"-32\" or \"-64\""
" suffix can be used on a version specifier to change this behaviour."
msgstr ""
"在安装了相同（major.minor）Python版本的32位和64位的64位Windows上，64位版本将始终是首选。对于启动程序的32位和64位实现都是如此"
" -- 这对于启动程序32位和64位都是正确的 -- "
"如果可用，32位启动程序将倾向于执行指定版本的64位Python安装。这样就可以预测启动器的行为，只知道PC上安装了哪些版本，而不考虑它们的安装顺序（即，不知道32位或64位版本的Python和相应的启动器是否是最后安装）。如上所述，可以在版本说明符上使用可选的“-32”或“-64”后缀来更改此行为。"

#: ../../using/windows.rst:1892
msgid "Examples:"
msgstr "示例："

#: ../../using/windows.rst:1894
msgid ""
"If no relevant options are set, the commands ``python`` and ``python2`` will"
" use the latest Python 2.x version installed and the command ``python3`` "
"will use the latest Python 3.x installed."
msgstr ""
"如果没有设置相关选项，命令 ``python`` 和 ``python2`` 将使用安装的最新Python 2.x版本，命令 ``python3`` "
"将使用最新安装的Python 3.x."

#: ../../using/windows.rst:1898
msgid ""
"The command ``python3.7`` will not consult any options at all as the "
"versions are fully specified."
msgstr "命令 ``python3.7`` 根本不会查阅任何选项，因为版本已完全指定。"

#: ../../using/windows.rst:1901
msgid ""
"If ``PY_PYTHON=3``, the commands ``python`` and ``python3`` will both use "
"the latest installed Python 3 version."
msgstr "如果 ``PY_PYTHON=3`` ，命令 ``python`` 和 ``python3`` 都将使用最新安装的Python 3版本。"

#: ../../using/windows.rst:1904
msgid ""
"If ``PY_PYTHON=3.7-32``, the command ``python`` will use the 32-bit "
"implementation of 3.7 whereas the command ``python3`` will use the latest "
"installed Python (PY_PYTHON was not considered at all as a major version was"
" specified.)"
msgstr ""
"如果 ``PY_PYTHON=3.7-32`` ，命令 ``python`` 将使用3.7的32位实现，而命令 ``python3`` "
"将使用最新安装的Python（PY_PYTHON根本没有被视为指定了主要版本。）"

#: ../../using/windows.rst:1909
msgid ""
"If ``PY_PYTHON=3`` and ``PY_PYTHON3=3.7``, the commands ``python`` and "
"``python3`` will both use specifically 3.7"
msgstr ""
"如果 ``PY_PYTHON=3`` 且 ``PY_PYTHON3=3.7`` ，命令 ``python`` 和 ``python3`` "
"都将特别使用3.7"

#: ../../using/windows.rst:1912
msgid ""
"In addition to environment variables, the same settings can be configured in"
" the .INI file used by the launcher.  The section in the INI file is called "
"``[defaults]`` and the key name will be the same as the environment "
"variables without the leading ``PY_`` prefix (and note that the key names in"
" the INI file are case insensitive.)  The contents of an environment "
"variable will override things specified in the INI file."
msgstr ""
"除环境变量外，还可以在启动程序使用的.INI文件中配置相同的设置。 INI文件中的部分称为 ``[defaults]`` ，键名称将与没有前导 "
"``PY_`` 前缀的环境变量相同（并注意INI文件中的键名不区分大小写） 。）环境变量的内容将覆盖INI文件中指定的内容。"

#: ../../using/windows.rst:1919
msgid "For example:"
msgstr "例如:"

#: ../../using/windows.rst:1921
msgid "Setting ``PY_PYTHON=3.7`` is equivalent to the INI file containing:"
msgstr "设置 ``PY_PYTHON=3.7`` 等同于包含以下内容的INI文件："

#: ../../using/windows.rst:1923
msgid ""
"[defaults]\n"
"python=3.7"
msgstr ""
"[defaults]\n"
"python=3.7"

#: ../../using/windows.rst:1928
msgid ""
"Setting ``PY_PYTHON=3`` and ``PY_PYTHON3=3.7`` is equivalent to the INI file"
" containing:"
msgstr "设置 ``PY_PYTHON=3`` 和 ``PY_PYTHON3=3.7`` 相当于包含以下内容的INI文件："

#: ../../using/windows.rst:1931
msgid ""
"[defaults]\n"
"python=3\n"
"python3=3.7"
msgstr ""
"[defaults]\n"
"python=3\n"
"python3=3.7"

#: ../../using/windows.rst:1938
msgid "Diagnostics"
msgstr "诊断"

#: ../../using/windows.rst:1940
msgid ""
"If an environment variable :envvar:`!PYLAUNCHER_DEBUG` is set (to any "
"value), the launcher will print diagnostic information to stderr (i.e. to "
"the console). While this information manages to be simultaneously verbose "
"*and* terse, it should allow you to see what versions of Python were "
"located, why a particular version was chosen and the exact command-line used"
" to execute the target Python. It is primarily intended for testing and "
"debugging."
msgstr ""

#: ../../using/windows.rst:1948
msgid "Dry Run"
msgstr "试运行"

#: ../../using/windows.rst:1950
msgid ""
"If an environment variable :envvar:`!PYLAUNCHER_DRYRUN` is set (to any "
"value), the launcher will output the command it would have run, but will not"
" actually launch Python. This may be useful for tools that want to use the "
"launcher to detect and then launch Python directly. Note that the command "
"written to standard output is always encoded using UTF-8, and may not render"
" correctly in the console."
msgstr ""

#: ../../using/windows.rst:1958
msgid "Install on demand"
msgstr "按需安装"

#: ../../using/windows.rst:1960
msgid ""
"If an environment variable :envvar:`!PYLAUNCHER_ALLOW_INSTALL` is set (to "
"any value), and the requested Python version is not installed but is "
"available on the Microsoft Store, the launcher will attempt to install it. "
"This may require user interaction to complete, and you may need to run the "
"command again."
msgstr ""

#: ../../using/windows.rst:1965
msgid ""
"An additional :envvar:`!PYLAUNCHER_ALWAYS_INSTALL` variable causes the "
"launcher to always try to install Python, even if it is detected. This is "
"mainly intended for testing (and should be used with "
":envvar:`!PYLAUNCHER_DRYRUN`)."
msgstr ""

#: ../../using/windows.rst:1970
msgid "Return codes"
msgstr "返回码"

#: ../../using/windows.rst:1972
msgid ""
"The following exit codes may be returned by the Python launcher. "
"Unfortunately, there is no way to distinguish these from the exit code of "
"Python itself."
msgstr "Python 启动器可能返回以下的退出码。 不幸的是，没有任何办法可以将这些退出码与 Python 本身的退出码区分开来。"

#: ../../using/windows.rst:1975
msgid ""
"The names of codes are as used in the sources, and are only for reference. "
"There is no way to access or resolve them apart from reading this page. "
"Entries are listed in alphabetical order of names."
msgstr "退出码的名称将在源代码中使用，并且仅供参考。 除了阅读本页面以外没有其他办法可以获取或解读它们。 这些条目是以名称的字母顺序列出的。"

#: ../../using/windows.rst:1980
msgid "Value"
msgstr "值"

#: ../../using/windows.rst:1982
msgid "RC_BAD_VENV_CFG"
msgstr "RC_BAD_VENV_CFG"

#: ../../using/windows.rst:1982
msgid "107"
msgstr "107"

#: ../../using/windows.rst:1982
msgid "A :file:`pyvenv.cfg` was found but is corrupt."
msgstr "找到了 :file:`pyvenv.cfg` 但文件已损坏。"

#: ../../using/windows.rst:1984
msgid "RC_CREATE_PROCESS"
msgstr "RC_CREATE_PROCESS"

#: ../../using/windows.rst:1984
msgid "101"
msgstr "101"

#: ../../using/windows.rst:1984
msgid "Failed to launch Python."
msgstr "启动 Python 失败。"

#: ../../using/windows.rst:1986
msgid "RC_INSTALLING"
msgstr "RC_INSTALLING"

#: ../../using/windows.rst:1986
msgid "111"
msgstr "111"

#: ../../using/windows.rst:1986
msgid ""
"An install was started, but the command will need to be re-run after it "
"completes."
msgstr "安装已启动，但命令需要在其完成后重新运行。"

#: ../../using/windows.rst:1989
msgid "RC_INTERNAL_ERROR"
msgstr "RC_INTERNAL_ERROR"

#: ../../using/windows.rst:1989
msgid "109"
msgstr "109"

#: ../../using/windows.rst:1989
msgid "Unexpected error. Please report a bug."
msgstr "未预期的错误。 请报告程序错误。"

#: ../../using/windows.rst:1991
msgid "RC_NO_COMMANDLINE"
msgstr "RC_NO_COMMANDLINE"

#: ../../using/windows.rst:1991
msgid "108"
msgstr "108"

#: ../../using/windows.rst:1991
msgid "Unable to obtain command line from the operating system."
msgstr "无法从操作系统获取命令行。"

#: ../../using/windows.rst:1994
msgid "RC_NO_PYTHON"
msgstr "RC_NO_PYTHON"

#: ../../using/windows.rst:1994
msgid "103"
msgstr "103"

#: ../../using/windows.rst:1994
msgid "Unable to locate the requested version."
msgstr "无法定位所请求的版本。"

#: ../../using/windows.rst:1996
msgid "RC_NO_VENV_CFG"
msgstr "RC_NO_VENV_CFG"

#: ../../using/windows.rst:1996
msgid "106"
msgstr "106"

#: ../../using/windows.rst:1996
msgid "A :file:`pyvenv.cfg` was required but not found."
msgstr "需要 :file:`pyvenv.cfg` 但没有找到。"
