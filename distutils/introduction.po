# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:08+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../distutils/introduction.rst:5
msgid "An Introduction to Distutils"
msgstr "Distutils 模块介绍"

#: ../../distutils/_setuptools_disclaimer.rst:3
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html"
" independently covers all of the relevant information currently included "
"here."
msgstr ""
"这篇文档是历史遗留文档，在 https://setuptools.readthedocs.io/en/latest/setuptools.html 上的"
" ``setuptools`` 文档独立涵盖此处包含的所有相关信息之后，将不再单独作为正式文档保留。"

#: ../../distutils/introduction.rst:9
msgid ""
"This document covers using the Distutils to distribute your Python modules, "
"concentrating on the role of developer/distributor: if you're looking for "
"information on installing Python modules, you should refer to the "
":ref:`install-index` chapter."
msgstr ""
"本文档介绍了使用 Distutils 模块分发你的 Python 模块，主要是针对开发者/分发者的使用的——如果你想了解如何安装 Python "
"模块，你应该参考这个章节： :ref:`install-index`。"

#: ../../distutils/introduction.rst:18
msgid "Concepts & Terminology"
msgstr "概念和术语"

#: ../../distutils/introduction.rst:20
msgid ""
"Using the Distutils is quite simple, both for module developers and for "
"users/administrators installing third-party modules.  As a developer, your "
"responsibilities (apart from writing solid, well-documented and well-tested "
"code, of course!) are:"
msgstr ""
"Distutils "
"用起来非常简单，对于模块开发者或安装第三方模块的用户/管理员均是如此。开发者的责任（当然还有编写可靠、良好文档和经过良好测试的代码！）就是："

#: ../../distutils/introduction.rst:25
msgid "write a setup script (:file:`setup.py` by convention)"
msgstr "编写一个设置脚本 (:file:`setup.py` by convention)"

#: ../../distutils/introduction.rst:27
msgid "(optional) write a setup configuration file"
msgstr "(可选)编写设置脚本的配置文件"

#: ../../distutils/introduction.rst:29
msgid "create a source distribution"
msgstr "创建源码的发行版"

#: ../../distutils/introduction.rst:31
msgid "(optional) create one or more built (binary) distributions"
msgstr "（可选）创建一个或多个编译好（二进制）的发行版"

#: ../../distutils/introduction.rst:33
msgid "Each of these tasks is covered in this document."
msgstr "这些操作在此文档均有讲解。"

#: ../../distutils/introduction.rst:35
msgid ""
"Not all module developers have access to a multitude of platforms, so it's "
"not always feasible to expect them to create a multitude of built "
"distributions.  It is hoped that a class of intermediaries, called "
"*packagers*, will arise to address this need.  Packagers will take source "
"distributions released by module developers, build them on one or more "
"platforms, and release the resulting built distributions.  Thus, users on "
"the most popular platforms will be able to install most popular Python "
"module distributions in the most natural way for their platform, without "
"having to run a single setup script or compile a line of code."
msgstr ""
"并非所有的模块开发者都能接触到众多的平台，所以期望他们创造众多的内置发行版不是总是可行的。最好是有一类名为 *打包者* "
"的中介，以满足这一需求。打包者将读取模块开发者发布的源代码，在一个或多个平台上进行编译，并发布构建出来的发行版。这样，最流行平台的用户就能以最自然的方式安装最流行的"
" Python 模块发行版，不必运行一段 setup 脚本或编译代码了。"

#: ../../distutils/introduction.rst:49
msgid "A Simple Example"
msgstr "一个简单的例子"

#: ../../distutils/introduction.rst:51
msgid ""
"The setup script is usually quite simple, although since it's written in "
"Python, there are no arbitrary limits to what you can do with it, though you"
" should be careful about putting arbitrarily expensive operations in your "
"setup script. Unlike, say, Autoconf-style configure scripts, the setup "
"script may be run multiple times in the course of building and installing "
"your module distribution."
msgstr ""
"setup 脚本通常很简单，尽管是用 Python 编写的，它能干的事情没有限制，当然应小心别在 setup 脚本中加入什么运行缓慢的操作。与 "
"Autoconf 风格的 configure 脚本不同，在构建和安装模块的过程中 setup 脚本可能会运行多次。"

#: ../../distutils/introduction.rst:58
msgid ""
"If all you want to do is distribute a module called :mod:`foo`, contained in"
" a file :file:`foo.py`, then your setup script can be as simple as this::"
msgstr "如果只想发布一个名为 :mod:`foo` 的模块，位于 :file:`foo.py` 文件中，那么 setup 脚本可以如此简单："

#: ../../distutils/introduction.rst:67
msgid "Some observations:"
msgstr "注意要点："

#: ../../distutils/introduction.rst:69
msgid ""
"most information that you supply to the Distutils is supplied as keyword "
"arguments to the :func:`setup` function"
msgstr "提供给 Distutils 的大部分信息将作为关键字参数发给 :func:`setup` 函数。"

#: ../../distutils/introduction.rst:72
msgid ""
"those keyword arguments fall into two categories: package metadata (name, "
"version number) and information about what's in the package (a list of pure "
"Python modules, in this case)"
msgstr "这些关键字参数分为两类：包的元数据（名称、版本号）和包中内容的描述信息（本例中是纯 Python 模块的列表）。"

#: ../../distutils/introduction.rst:76
msgid ""
"modules are specified by module name, not filename (the same will hold true "
"for packages and extensions)"
msgstr "模块由模块名指定，而不是文件名（包和扩展也是如此）。"

#: ../../distutils/introduction.rst:79
msgid ""
"it's recommended that you supply a little more metadata, in particular your "
"name, email address and a URL for the project (see section :ref:`setup-"
"script` for an example)"
msgstr "建议多提供一些元数据，特别是开发者姓名、电子邮件地址和项目的URL（参见 :ref:`setup-script` 中的例子）。"

#: ../../distutils/introduction.rst:83
msgid ""
"To create a source distribution for this module, you would create a setup "
"script, :file:`setup.py`, containing the above code, and run this command "
"from a terminal::"
msgstr "要为该模块创建一个源码发布版本，需要创建一段 setup 脚本 :file:`setup.py`，包含上述代码，然后从终端运行以下命令："

#: ../../distutils/introduction.rst:89
msgid ""
"For Windows, open a command prompt window (:menuselection:`Start --> "
"Accessories`) and change the command to::"
msgstr ""
"对于 Windows 用户来说，打开命令行窗口（:menuselection:`Start --> Accessories`）并且写上如下命令::"

#: ../../distutils/introduction.rst:94
msgid ""
":command:`sdist` will create an archive file (e.g., tarball on Unix, ZIP "
"file on Windows) containing your setup script :file:`setup.py`, and your "
"module :file:`foo.py`. The archive file will be named :file:`foo-1.0.tar.gz`"
" (or :file:`.zip`), and will unpack into a directory :file:`foo-1.0`."
msgstr ""
":command:`sdist` 将创建一个归档文件（例如在 Unix 中为 tarball，在 Windows 中为 ZIP "
"文件），其中包含你的配置脚本 :file:`setup.py` 以及你的模块 :file:`foo.py`。 此归档文件将被命名为 "
":file:`foo-1.0.tar.gz` (或 :file:`.zip`)，并将解包到目录 :file:`foo-1.0` 当中。"

#: ../../distutils/introduction.rst:99
msgid ""
"If an end-user wishes to install your :mod:`foo` module, all they have to do"
" is download :file:`foo-1.0.tar.gz` (or :file:`.zip`), unpack it, and---from"
" the :file:`foo-1.0` directory---run ::"
msgstr ""
"如果最终用户希望安装 :mod:`foo` 模块，只需下载 :file:`foo-1.0.tar.gz` （或 :file:`.zip` ）并解压，进入"
" :file:`foo-1.0` 目录运行："

#: ../../distutils/introduction.rst:105
msgid ""
"which will ultimately copy :file:`foo.py` to the appropriate directory for "
"third-party modules in their Python installation."
msgstr "这会把 :file:`foo.py` 复制到 Python 安装环境的第三方模块目录中。"

#: ../../distutils/introduction.rst:108
msgid ""
"This simple example demonstrates some fundamental concepts of the Distutils."
" First, both developers and installers have the same basic user interface, "
"i.e. the setup script.  The difference is which Distutils *commands* they "
"use: the :command:`sdist` command is almost exclusively for module "
"developers, while :command:`install` is more often for installers (although "
"most developers will want to install their own code occasionally)."
msgstr ""
"上述简单例子展示了 Distutils 的一些基本概念。首先，开发者和安装者拥有相同的基本用户界面，即 setup 脚本。区别在于使用哪种 "
"Distutils *命令* ： :command:`sdist` 命令几乎只适用于模块开发者，而 :command:`install` "
"则更适用于安装者（当然大多数开发者偶尔也想要安装自己的代码）。"

#: ../../distutils/introduction.rst:115
msgid ""
"Other useful built distribution formats are RPM, implemented by the "
":command:`bdist_rpm` command, Solaris :program:`pkgtool` "
"(:command:`bdist_pkgtool`), and HP-UX :program:`swinstall` "
"(:command:`bdist_sdux`).  For example, the following command will create an "
"RPM file called :file:`foo-1.0.noarch.rpm`::"
msgstr ""
"其他有用的内置分发格式是 RPM，可由 :command:`bdist_rpm` 、Solaris "
":program:`pkgtool`（:command:`bdist_pkgtool`）和 HP-UX "
":program:`swinstall`（:command:`bdist_sdux`）实现。比如，以下命令将创建一个名为 "
":file:`foo-1.0.noarch.rpm` 的RPM文件："

#: ../../distutils/introduction.rst:123
msgid ""
"(The :command:`bdist_rpm` command uses the :command:`rpm` executable, "
"therefore this has to be run on an RPM-based system such as Red Hat Linux, "
"SuSE Linux, or Mandrake Linux.)"
msgstr ""
"（:command:`bdist_rpm` 命令用到了 :command:`rpm` 可执行文件，因此必须运行在基于 RPM 的系统中，如 Red "
"Hat Linux 、 SuSE Linux 或 Mandrake Linux）。"

#: ../../distutils/introduction.rst:127
msgid ""
"You can find out what distribution formats are available at any time by "
"running ::"
msgstr "可以随时运行以下命令，以便了解当前可用的分发格式："

#: ../../distutils/introduction.rst:136
msgid "General Python terminology"
msgstr "通用的 Python 术语"

#: ../../distutils/introduction.rst:138
msgid ""
"If you're reading this document, you probably have a good idea of what "
"modules, extensions, and so forth are.  Nevertheless, just to be sure that "
"everyone is operating from a common starting point, we offer the following "
"glossary of common Python terms:"
msgstr "本文读者可能对模块、扩展等已有了很好的理解。但为确保所有人都站在同一起点上，下面提供了 Python 常用术语表："

#: ../../distutils/introduction.rst:146
msgid "module"
msgstr "module"

#: ../../distutils/introduction.rst:144
msgid ""
"the basic unit of code reusability in Python: a block of code imported by "
"some other code.  Three types of modules concern us here: pure Python "
"modules, extension modules, and packages."
msgstr "实现 Python 代码重用的基本单位：可被其他代码导入的一段代码。有三种类型的模块与本文有关：纯 Python 模块、扩展模块和包。"

#: ../../distutils/introduction.rst:151
msgid "pure Python module"
msgstr "纯 Python 模块"

#: ../../distutils/introduction.rst:149
msgid ""
"a module written in Python and contained in a single :file:`.py` file (and "
"possibly associated :file:`.pyc` files).  Sometimes referred to as a \"pure "
"module.\""
msgstr ""
"用 Python 编写的模块，包含在某 :file:`.py` 文件中（可能还会有相关的 :file:`.pyc` 文件）。有时被称为 \"纯模块\"。"

#: ../../distutils/introduction.rst:159
msgid "extension module"
msgstr "extension module -- 扩展模块"

#: ../../distutils/introduction.rst:154
msgid ""
"a module written in the low-level language of the Python implementation: "
"C/C++ for Python, Java for Jython. Typically contained in a single "
"dynamically loadable pre-compiled file, e.g. a shared object (:file:`.so`) "
"file for Python extensions on Unix, a DLL (given the :file:`.pyd` extension)"
" for Python extensions on Windows, or a Java class file for Jython "
"extensions.  (Note that currently, the Distutils only handles C/C++ "
"extensions for Python.)"
msgstr ""
"用低级语言编写的  Python 模块。Python 用 C/C++ ，而 Jython 则用Java。通常包含在一个可动态加载的预编译文件中，比如 "
"Unix 中的 Python 扩展是一个共享对象（:file:`.so`）文件，Windows 中的 Python 扩展则是一个 DLL （扩展名为 "
":file:`.pyd` )，而 Jython 的扩展是个 Java class 文件。（注意，目前，Distutils 只处理 Python 的 "
"C/C++ 扩展。）"

#: ../../distutils/introduction.rst:164
msgid "package"
msgstr "包"

#: ../../distutils/introduction.rst:162
msgid ""
"a module that contains other modules; typically contained in a directory in "
"the filesystem and distinguished from other directories by the presence of a"
" file :file:`__init__.py`."
msgstr "包含其他模块的模块；通常位于文件系统的某个目录中，区别于其他目录的标记就是存在一个  :file:`__init__.py` 文件。"

#: ../../distutils/introduction.rst:174
msgid "root package"
msgstr "根包"

#: ../../distutils/introduction.rst:167
msgid ""
"the root of the hierarchy of packages.  (This isn't really a package, since "
"it doesn't have an :file:`__init__.py` file.  But we have to call it "
"something.) The vast majority of the standard library is in the root "
"package, as are many small, standalone third-party modules that don't belong"
" to a larger module collection. Unlike regular packages, modules in the root"
" package can be found in many directories: in fact, every directory listed "
"in ``sys.path`` contributes modules to the root package."
msgstr ""
"包的层次结构的根。（其并非一个真正的包，因为没有 :file:`__init__.py` 文件。但总得给它起个名字）。 "
"绝大多数标准库都在根包中，还有许多不属于任何大型模块的小型、独立的第三方模块。与普通的包不同，根包中的模块可能会在很多目录中出现：事实上，``sys.path``"
" 列出的每个目录都会为根包提供模块。"

#: ../../distutils/introduction.rst:179
msgid "Distutils-specific terminology"
msgstr "Distutils 特定的术语"

#: ../../distutils/introduction.rst:181
msgid ""
"The following terms apply more specifically to the domain of distributing "
"Python modules using the Distutils:"
msgstr "以下属于更加特别地用于 Distutils 发布 Python 模块。"

#: ../../distutils/introduction.rst:190
msgid "module distribution"
msgstr "模块发行版"

#: ../../distutils/introduction.rst:185
msgid ""
"a collection of Python modules distributed together as a single downloadable"
" resource and meant to be installed *en masse*.  Examples of some well-known"
" module distributions are NumPy, SciPy, Pillow, or mxBase.  (This would be "
"called a *package*, except that term is already taken in the Python context:"
" a single module distribution may contain zero, one, or many Python "
"packages.)"
msgstr ""
"一组 Python 模块，作为可下载的资源组团发布，以便 *大规模* 安装。模块发布版的著名例子是 NumPy 、 SciPy 、 Pillow 或 "
"mxBase。（这些会被称为 *package*，这个词在 Python 的语境中也使用过：一个模块发行版可能包含零个、一个或多个 Python 包。)"

#: ../../distutils/introduction.rst:194
msgid "pure module distribution"
msgstr "纯模块发行版"

#: ../../distutils/introduction.rst:193
msgid ""
"a module distribution that contains only pure Python modules and packages. "
"Sometimes referred to as a \"pure distribution.\""
msgstr "只包含纯 Python 模块和软件包的模块发布版。有时被称为“纯发行版”。"

#: ../../distutils/introduction.rst:198
msgid "non-pure module distribution"
msgstr "非纯模块发行版"

#: ../../distutils/introduction.rst:197
msgid ""
"a module distribution that contains at least one extension module.  "
"Sometimes referred to as a \"non-pure distribution.\""
msgstr "至少包含一个扩展模块的模块发行版。 有时被称为“非纯发行版”。"

#: ../../distutils/introduction.rst:202
msgid "distribution root"
msgstr "根发行版"

#: ../../distutils/introduction.rst:201
msgid ""
"the top-level directory of your source tree (or  source distribution); the "
"directory where :file:`setup.py` exists.  Generally  :file:`setup.py` will "
"be run from this directory."
msgstr ""
"源代码树（或源代码发行版）的顶级目录；即 :file:`setup.py` 所在的目录。 一般来说，:file:`setup.py` 会在该目录下运行。"
