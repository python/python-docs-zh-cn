# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 15:00+0000\n"
"PO-Revision-Date: 2025-07-18 19:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../extending/index.rst:5
msgid "Extending and Embedding the Python Interpreter"
msgstr "扩展和嵌入 Python 解释器"

#: ../../extending/index.rst:7
msgid ""
"This document describes how to write modules in C or C++ to extend the "
"Python interpreter with new modules.  Those modules can not only define new "
"functions but also new object types and their methods.  The document also "
"describes how to embed the Python interpreter in another application, for "
"use as an extension language.  Finally, it shows how to compile and link "
"extension modules so that they can be loaded dynamically (at run time) into "
"the interpreter, if the underlying operating system supports this feature."
msgstr ""
"本文档描述了如何使用 C 或 C++ 编写模块以使用新模块来扩展 Python 解释器的功能。 "
"这些模块不仅可以定义新的函数，还可以定义新的对象类型及其方法。 该文档还描述了如何将 Python 解释器嵌入到另一个应用程序中，以用作扩展语言。 "
"最后，它展示了如何编译和链接扩展模块，以便它们可以动态地（在运行时）加载到解释器中，如果底层操作系统支持此特性的话。"

#: ../../extending/index.rst:15
msgid ""
"This document assumes basic knowledge about Python.  For an informal "
"introduction to the language, see :ref:`tutorial-index`.  :ref:`reference-"
"index` gives a more formal definition of the language.  :ref:`library-index`"
" documents the existing object types, functions and modules (both built-in "
"and written in Python) that give the language its wide application range."
msgstr ""
"本文档假设你具备有关 Python 的基本知识。有关该语言的非正式介绍，请参阅 :ref:`tutorial-index` 。 "
":ref:`reference-index` 给出了更正式的语言定义。 :ref:`library-index` "
"包含现有的对象类型、函数和模块（内置和用 Python 编写）的文档，使语言具有广泛的应用范围。"

#: ../../extending/index.rst:21
msgid ""
"For a detailed description of the whole Python/C API, see the separate "
":ref:`c-api-index`."
msgstr "关于整个 Python/C API 的详细介绍，请参阅独立的 :ref:`c-api-index` 。"

#: ../../extending/index.rst:26
msgid "Recommended third party tools"
msgstr "推荐的第三方工具"

#: ../../extending/index.rst:28
msgid ""
"This guide only covers the basic tools for creating extensions provided as "
"part of this version of CPython. Some :ref:`third party tools <c-api-tools>`"
" offer both simpler and more sophisticated approaches to creating C and C++ "
"extensions for Python."
msgstr ""
"本指南仅介绍了作为此 CPython 版本的一部分提供的用于创建扩展的基本工具。 某些 :ref:`第三方工具 <c-api-tools>` "
"提供了更简单或更复杂的方式来为 Python 创建 C 和 C++ 扩展。"

#: ../../extending/index.rst:35
msgid "Creating extensions without third party tools"
msgstr "不使用第三方工具创建扩展"

#: ../../extending/index.rst:37
msgid ""
"This section of the guide covers creating C and C++ extensions without "
"assistance from third party tools. It is intended primarily for creators of "
"those tools, rather than being a recommended way to create your own C "
"extensions."
msgstr ""
"本指南的这一部分包括在没有第三方工具帮助的情况下创建 C 和 C ++ 扩展。它主要用于这些工具的创建者，而不是建议你创建自己的 C 扩展的方法。"

#: ../../extending/index.rst:44
msgid ":pep:`489` -- Multi-phase extension module initialization"
msgstr ":pep:`489` -- 多阶段扩展模块初始化"

#: ../../extending/index.rst:57
msgid "Embedding the CPython runtime in a larger application"
msgstr "在更大的应用程序中嵌入 CPython 运行时"

#: ../../extending/index.rst:59
msgid ""
"Sometimes, rather than creating an extension that runs inside the Python "
"interpreter as the main application, it is desirable to instead embed the "
"CPython runtime inside a larger application. This section covers some of the"
" details involved in doing that successfully."
msgstr ""
"有时，不是要创建在 Python 解释器中作为主应用程序运行的扩展，而是希望将 CPython 运行时嵌入到更大的应用程序中。 "
"本节介绍了成功完成此操作所涉及的一些细节。"
