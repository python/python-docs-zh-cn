# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 汇民 王 <whuim@qq.com>, 2025
# Alpha Du <alphanow@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-17 14:16+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/lexical_analysis.rst:6
msgid "Lexical analysis"
msgstr "词法分析"

#: ../../reference/lexical_analysis.rst:10
msgid ""
"A Python program is read by a *parser*.  Input to the parser is a stream of "
":term:`tokens <token>`, generated by the *lexical analyzer* (also known as "
"the *tokenizer*). This chapter describes how the lexical analyzer breaks a "
"file into tokens."
msgstr ""
"Python 程序将由 *解析器* 来读取。 输入解析器的是 :term:`词元 <token>` 流，它是由 *词法分析器* (或称 *分词器*) "
"生成的。 本章将介绍词法分析器是怎样把文件拆分为词元的。"

#: ../../reference/lexical_analysis.rst:15
msgid ""
"Python reads program text as Unicode code points; the encoding of a source "
"file can be given by an encoding declaration and defaults to UTF-8, see "
":pep:`3120` for details.  If the source file cannot be decoded, a "
":exc:`SyntaxError` is raised."
msgstr ""
"Python 将读取的程序文本转为 Unicode 代码点；编码声明用于指定源文件的编码，默认为 UTF-8，详见 "
":pep:`3120`。源文件不能解码时，触发 :exc:`SyntaxError`。"

#: ../../reference/lexical_analysis.rst:24
msgid "Line structure"
msgstr "行结构"

#: ../../reference/lexical_analysis.rst:28
msgid "A Python program is divided into a number of *logical lines*."
msgstr "Python 程序可以拆分为多个 *逻辑行*。"

#: ../../reference/lexical_analysis.rst:34
msgid "Logical lines"
msgstr "逻辑行"

#: ../../reference/lexical_analysis.rst:38
msgid ""
"The end of a logical line is represented by the token "
":data:`~token.NEWLINE`. Statements cannot cross logical line boundaries "
"except where :data:`!NEWLINE` is allowed by the syntax (e.g., between "
"statements in compound statements). A logical line is constructed from one "
"or more *physical lines* by following the :ref:`explicit <explicit-joining>`"
" or :ref:`implicit <implicit-joining>` *line joining* rules."
msgstr ""
"逻辑行的结束由词元 :data:`~token.NEWLINE` 表示。 除非语法允许 :data:`!NEWLINE` "
"(举例来说，在复合语句中的多个语句之前) 否则语句不能跨越逻辑行边界。 逻辑行由一条或多条 *物理行* 根据 :ref:`显示 <explicit-"
"joining>` 或 :ref:`隐式 <implicit-joining>` 的 *行连接* 规则构造而成。"

#: ../../reference/lexical_analysis.rst:49
msgid "Physical lines"
msgstr "物理行"

#: ../../reference/lexical_analysis.rst:51
msgid ""
"A physical line is a sequence of characters terminated by one the following "
"end-of-line sequences:"
msgstr "物理行是由使用下列行结束符序列中的一个作为终结的字符序列："

#: ../../reference/lexical_analysis.rst:54
msgid "the Unix form using ASCII LF (linefeed),"
msgstr "使用 ASCII LF (linefeed) 的 Unix 形式，"

#: ../../reference/lexical_analysis.rst:55
msgid ""
"the Windows form using the ASCII sequence CR LF (return followed by "
"linefeed),"
msgstr "使用 ASCII 序列 CR LF (return 加 linefeed) 的 Windows 形式，"

#: ../../reference/lexical_analysis.rst:56
msgid "the '`Classic Mac OS`__' form using the ASCII CR (return) character."
msgstr "使用 ASCII CR (return) 字符的 '`Classic Mac OS`__' 形式。"

#: ../../reference/lexical_analysis.rst:60
msgid ""
"Regardless of platform, each of these sequences is replaced by a single "
"ASCII LF (linefeed) character. (This is done even inside :ref:`string "
"literals <strings>`.) Each line can use any of the sequences; they do not "
"need to be consistent within a file."
msgstr ""
"无论平台如何，这些序列中的每一个都会被替换为单个ASCII LF（换行）字符。（即使在 :ref:`字符串字面量 <strings>` "
"中也是如此。）每一行可以使用这些序列中的任何一个；它们在文件内部不需要保持一致。"

#: ../../reference/lexical_analysis.rst:66
msgid ""
"The end of input also serves as an implicit terminator for the final "
"physical line."
msgstr "输入的结束也作为最后一个物理行的隐式终止符。"

#: ../../reference/lexical_analysis.rst:69
msgid "Formally:"
msgstr "形式上："

#: ../../reference/lexical_analysis.rst:80
msgid "Comments"
msgstr "注释"

#: ../../reference/lexical_analysis.rst:85
msgid ""
"A comment starts with a hash character (``#``) that is not part of a string "
"literal, and ends at the end of the physical line.  A comment signifies the "
"end of the logical line unless the implicit line joining rules are invoked. "
"Comments are ignored by the syntax."
msgstr ""
"注释以井号 （``#``） 开头，在物理行末尾截止。注意，井号不是字符串字面量。除非应用隐式行拼接规则，否则，注释代表逻辑行结束。句法不解析注释。"

#: ../../reference/lexical_analysis.rst:94
msgid "Encoding declarations"
msgstr "编码声明"

#: ../../reference/lexical_analysis.rst:99
msgid ""
"If a comment in the first or second line of the Python script matches the "
"regular expression ``coding[=:]\\s*([-\\w.]+)``, this comment is processed "
"as an encoding declaration; the first group of this expression names the "
"encoding of the source code file. The encoding declaration must appear on a "
"line of its own. If it is the second line, the first line must also be a "
"comment-only line. The recommended forms of an encoding expression are ::"
msgstr ""
"Python 脚本第一或第二行的注释匹配正则表达式 ``coding[=:]\\s*([-\\w.]+)`` "
"时，该注释会被当作编码声明；这个表达式的第一组指定了源码文件的编码。编码声明必须独占一行，在第二行时，则第一行必须也是注释。编码表达式的形式如下："

#: ../../reference/lexical_analysis.rst:106
msgid "# -*- coding: <encoding-name> -*-"
msgstr "# -*- coding: <encoding-name> -*-"

#: ../../reference/lexical_analysis.rst:108
msgid "which is recognized also by GNU Emacs, and ::"
msgstr "这也是 GNU Emacs 认可的形式，此外，还支持如下形式："

#: ../../reference/lexical_analysis.rst:110
msgid "# vim:fileencoding=<encoding-name>"
msgstr "# vim:fileencoding=<encoding-name>"

#: ../../reference/lexical_analysis.rst:112
msgid "which is recognized by Bram Moolenaar's VIM."
msgstr "这是 Bram Moolenaar 的 VIM 认可的形式。"

#: ../../reference/lexical_analysis.rst:114
msgid ""
"If no encoding declaration is found, the default encoding is UTF-8.  If the "
"implicit or explicit encoding of a file is UTF-8, an initial UTF-8 byte-"
"order mark (``b'\\xef\\xbb\\xbf'``) is ignored rather than being a syntax "
"error."
msgstr ""
"如果没有找到编码格式声明，则默认编码格式为 UTF-8。 如果文件的隐式或显式编码格式为 UTF-8，则初始的 UTF-8 字节顺序标记 "
"(``b'\\xef\\xbb\\xbf'``) 会被忽略，而不是成为语法错误。"

#: ../../reference/lexical_analysis.rst:118
msgid ""
"If an encoding is declared, the encoding name must be recognized by Python "
"(see :ref:`standard-encodings`). The encoding is used for all lexical "
"analysis, including string literals, comments and identifiers."
msgstr ""
"如果声明了编码格式，该编码格式的名称必须是 Python 可识别的 (参见 :ref:`standard-encodings`)。 "
"编码格式会被用于所有的词法分析，包括字符串字面量、注释和标识符等。"

#: ../../reference/lexical_analysis.rst:123
msgid ""
"All lexical analysis, including string literals, comments and identifiers, "
"works on Unicode text decoded using the source encoding. Any Unicode code "
"point, except the NUL control character, can appear in Python source."
msgstr ""
"所有词法分析，包括字符串字面量、注释和标识符，都作用于使用源编码解码的Unicode文本。除了 NUL "
"控制字符以外的任何Unicode码点都可以出现在Python源代码中。"

#: ../../reference/lexical_analysis.rst:137
msgid "Explicit line joining"
msgstr "显式拼接行"

#: ../../reference/lexical_analysis.rst:141
msgid ""
"Two or more physical lines may be joined into logical lines using backslash "
"characters (``\\``), as follows: when a physical line ends in a backslash "
"that is not part of a string literal or comment, it is joined with the "
"following forming a single logical line, deleting the backslash and the "
"following end-of-line character.  For example::"
msgstr ""
"两个及两个以上的物理行可用反斜杠（``\\``）拼接为一个逻辑行，规则如下：以不在字符串或注释内的反斜杠结尾时，物理行将与下一行拼接成一个逻辑行，并删除反斜杠及其后的换行符。例如："

#: ../../reference/lexical_analysis.rst:147
msgid ""
"if 1900 < year < 2100 and 1 <= month <= 12 \\\n"
"   and 1 <= day <= 31 and 0 <= hour < 24 \\\n"
"   and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date\n"
"        return 1"
msgstr ""
"if 1900 < year < 2100 and 1 <= month <= 12 \\\n"
"   and 1 <= day <= 31 and 0 <= hour < 24 \\\n"
"   and 0 <= minute < 60 and 0 <= second < 60:   # 看来是个有效的日期\n"
"        return 1"

#: ../../reference/lexical_analysis.rst:152
msgid ""
"A line ending in a backslash cannot carry a comment.  A backslash does not "
"continue a comment.  A backslash does not continue a token except for string"
" literals (i.e., tokens other than string literals cannot be split across "
"physical lines using a backslash).  A backslash is illegal elsewhere on a "
"line outside a string literal."
msgstr ""
"以反斜杠结尾的行不能包含注释。反斜杠不能用于延续注释内容。除字符串字面量之外，反斜杠不能用于延续标记（即非字符串字面量的标记不能通过反斜杠拆分到物理行的下一行）。在字符串字面量之外的行中，反斜杠出现在其他位置是非法的。"

#: ../../reference/lexical_analysis.rst:162
msgid "Implicit line joining"
msgstr "隐式拼接行"

#: ../../reference/lexical_analysis.rst:164
msgid ""
"Expressions in parentheses, square brackets or curly braces can be split "
"over more than one physical line without using backslashes. For example::"
msgstr "圆括号、方括号、花括号内的表达式可以分成多个物理行，不必使用反斜杠。例如："

#: ../../reference/lexical_analysis.rst:167
msgid ""
"month_names = ['Januari', 'Februari', 'Maart',      # These are the\n"
"               'April',   'Mei',      'Juni',       # Dutch names\n"
"               'Juli',    'Augustus', 'September',  # for the months\n"
"               'Oktober', 'November', 'December']   # of the year"
msgstr ""
"month_names = ['Januari', 'Februari', 'Maart',      # 这些是\n"
"               'April',   'Mei',      'Juni',       # 一年之中\n"
"               'Juli',    'Augustus', 'September',  # 各个月份的\n"
"               'Oktober', 'November', 'December']   # 荷兰语名称"

#: ../../reference/lexical_analysis.rst:172
msgid ""
"Implicitly continued lines can carry comments.  The indentation of the "
"continuation lines is not important.  Blank continuation lines are allowed. "
"There is no NEWLINE token between implicit continuation lines.  Implicitly "
"continued lines can also occur within triple-quoted strings (see below); in "
"that case they cannot carry comments."
msgstr ""
"隐式行拼接可含注释；后续行的缩进并不重要；还支持空的后续行。隐式拼接行之间没有 NEWLINE "
"标记。三引号字符串支持隐式拼接行（见下文），但不支持注释。"

#: ../../reference/lexical_analysis.rst:182
msgid "Blank lines"
msgstr "空白行"

#: ../../reference/lexical_analysis.rst:186
msgid ""
"A logical line that contains only spaces, tabs, formfeeds and possibly a "
"comment, is ignored (i.e., no :data:`~token.NEWLINE` token is generated). "
"During interactive input of statements, handling of a blank line may differ "
"depending on the implementation of the read-eval-print loop. In the standard"
" interactive interpreter, an entirely blank logical line (that is, one "
"containing not even whitespace or a comment) terminates a multi-line "
"statement."
msgstr ""
"仅包含空格、制表符、换页符以及可能的注释的逻辑行将被忽略（即不会生成 :data:`~token.NEWLINE` "
"标记）。在交互式输入语句时，空行的处理方式可能因读取-求值-"
"打印循环的实现而异。在标准交互式解释器中，完全空白的逻辑行（即不包含任何空白符或注释）会终止多行语句。"

#: ../../reference/lexical_analysis.rst:198
msgid "Indentation"
msgstr "缩进"

#: ../../reference/lexical_analysis.rst:202
msgid ""
"Leading whitespace (spaces and tabs) at the beginning of a logical line is "
"used to compute the indentation level of the line, which in turn is used to "
"determine the grouping of statements."
msgstr "逻辑行开头的空白符（空格符和制表符）用于计算该行的缩进层级，决定语句组块。"

#: ../../reference/lexical_analysis.rst:206
msgid ""
"Tabs are replaced (from left to right) by one to eight spaces such that the "
"total number of characters up to and including the replacement is a multiple"
" of eight (this is intended to be the same rule as used by Unix).  The total"
" number of spaces preceding the first non-blank character then determines "
"the line's indentation.  Indentation cannot be split over multiple physical "
"lines using backslashes; the whitespace up to the first backslash determines"
" the indentation."
msgstr ""
"制表符（从左至右）被替换为一至八个空格，缩进空格的总数是八的倍数（与 Unix "
"的规则保持一致）。首个非空字符前的空格数决定了该行的缩进层次。缩进不能用反斜杠进行多行拼接；首个反斜杠之前的空白符决定了缩进的层次。"

#: ../../reference/lexical_analysis.rst:214
msgid ""
"Indentation is rejected as inconsistent if a source file mixes tabs and "
"spaces in a way that makes the meaning dependent on the worth of a tab in "
"spaces; a :exc:`TabError` is raised in that case."
msgstr ""
"源文件混用制表符和空格符缩进时，因空格数量与制表符相关，由此产生的不一致将导致不能正常识别缩进层次，从而触发 :exc:`TabError`。"

#: ../../reference/lexical_analysis.rst:218
msgid ""
"**Cross-platform compatibility note:** because of the nature of text editors"
" on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for"
" the indentation in a single source file.  It should also be noted that "
"different platforms may explicitly limit the maximum indentation level."
msgstr ""
"**跨平台兼容性说明：** 鉴于非 UNIX "
"平台文本编辑器本身的特性，请勿在源文件中混用制表符和空格符。另外也请注意，不同平台有可能会显式限制最大缩进层级。"

#: ../../reference/lexical_analysis.rst:223
msgid ""
"A formfeed character may be present at the start of the line; it will be "
"ignored for the indentation calculations above.  Formfeed characters "
"occurring elsewhere in the leading whitespace have an undefined effect (for "
"instance, they may reset the space count to zero)."
msgstr "行首含换页符时，缩进计算将忽略该换页符。换页符在行首空白符内其他位置的效果未定义（例如，可能导致空格计数重置为零）。"

#: ../../reference/lexical_analysis.rst:230
msgid ""
"The indentation levels of consecutive lines are used to generate "
":data:`~token.INDENT` and :data:`~token.DEDENT` tokens, using a stack, as "
"follows."
msgstr ""
"连续行的缩进级别使用一个栈来生成 :data:`~token.INDENT` 和 :data:`~token.DEDENT` 标记，规则如下。"

#: ../../reference/lexical_analysis.rst:234
msgid ""
"Before the first line of the file is read, a single zero is pushed on the "
"stack; this will never be popped off again.  The numbers pushed on the stack"
" will always be strictly increasing from bottom to top.  At the beginning of"
" each logical line, the line's indentation level is compared to the top of "
"the stack. If it is equal, nothing happens. If it is larger, it is pushed on"
" the stack, and one :data:`!INDENT` token is generated.  If it is smaller, "
"it *must* be one of the numbers occurring on the stack; all numbers on the "
"stack that are larger are popped off, and for each number popped off a "
":data:`!DEDENT` token is generated. At the end of the file, a "
":data:`!DEDENT` token is generated for each number remaining on the stack "
"that is larger than zero."
msgstr ""
"在读取文件的第一行之前，会将单个零压入栈中；这个零永远不会被弹出。压入栈中的数字总是严格从底到顶递增。在每个逻辑行的开始，将该行的缩进级别与栈顶进行比较：\n"
" - 如果相等，则不执行任何操作； \n"
" - 如果更大，则将其压入栈中，并生成一个 :data:`!INDENT` 标记； \n"
" - 如果更小，则它 *必须* 是栈中出现的某个数字；弹出栈中所有比它大的数字，并且对于每个弹出的数字，生成一个 :data:`!DEDENT` 标记。 在文件结束时，对于栈中每个大于零的剩余数字，都会生成一个 :data:`!DEDENT` 标记。"

#: ../../reference/lexical_analysis.rst:245
msgid ""
"Here is an example of a correctly (though confusingly) indented piece of "
"Python code::"
msgstr "下面的 Python 代码缩进示例虽然正确，但含混不清："

#: ../../reference/lexical_analysis.rst:248
msgid ""
"def perm(l):\n"
"        # Compute the list of all permutations of l\n"
"    if len(l) <= 1:\n"
"                  return [l]\n"
"    r = []\n"
"    for i in range(len(l)):\n"
"             s = l[:i] + l[i+1:]\n"
"             p = perm(s)\n"
"             for x in p:\n"
"              r.append(l[i:i+1] + x)\n"
"    return r"
msgstr ""
"def perm(l):\n"
"        # 计算由 l 的所有排列组成的列表\n"
"    if len(l) <= 1:\n"
"                  return [l]\n"
"    r = []\n"
"    for i in range(len(l)):\n"
"             s = l[:i] + l[i+1:]\n"
"             p = perm(s)\n"
"             for x in p:\n"
"              r.append(l[i:i+1] + x)\n"
"    return r"

#: ../../reference/lexical_analysis.rst:260
msgid "The following example shows various indentation errors::"
msgstr "下例展示了多种缩进错误："

#: ../../reference/lexical_analysis.rst:262
msgid ""
" def perm(l):                       # error: first line indented\n"
"for i in range(len(l)):             # error: not indented\n"
"    s = l[:i] + l[i+1:]\n"
"        p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n"
"        for x in p:\n"
"                r.append(l[i:i+1] + x)\n"
"            return r                # error: inconsistent dedent"
msgstr ""
" def perm(l):                       # 错误：第一行有缩进\n"
"for i in range(len(l)):             # 错误：没有缩进\n"
"    s = l[:i] + l[i+1:]\n"
"        p = perm(l[:i] + l[i+1:])   # 错误：非预期的缩进\n"
"        for x in p:\n"
"                r.append(l[i:i+1] + x)\n"
"            return r                # 错误：不一致的缩进"

#: ../../reference/lexical_analysis.rst:270
msgid ""
"(Actually, the first three errors are detected by the parser; only the last "
"error is found by the lexical analyzer --- the indentation of ``return r`` "
"does not match a level popped off the stack.)"
msgstr ""
"（实际上，解析器可以识别前三个错误；只有最后一个错误由词法分析器识别  --- ``return r`` 的缩进无法匹配从栈里移除的缩进层级。）"

#: ../../reference/lexical_analysis.rst:278
msgid "Whitespace between tokens"
msgstr "标记间的空白字符"

#: ../../reference/lexical_analysis.rst:280
msgid ""
"Except at the beginning of a logical line or in string literals, the "
"whitespace characters space, tab and formfeed can be used interchangeably to"
" separate tokens.  Whitespace is needed between two tokens only if their "
"concatenation could otherwise be interpreted as a different token. For "
"example, ``ab`` is one token, but ``a b`` is two tokens. However, ``+a`` and"
" ``+ a`` both produce two tokens, ``+`` and ``a``, as ``+a`` is not a valid "
"token."
msgstr ""
"除了在逻辑行的开头或字符串字面量中，空白符（空格、制表符和换页符）可以互换使用以分隔标记。仅当两个标记的拼接可能被解释为不同的标记时，才需要在它们之间使用空白符。例如，``ab``"
" 是一个标记，而 ``a b`` 是两个标记。然而，``+a`` 和 ``+ a`` 都产生两个标记，即 ``+`` 和 ``a``，因为 ``+a``"
" 不是有效的标记。"

#: ../../reference/lexical_analysis.rst:291
msgid "End marker"
msgstr "结束标记"

#: ../../reference/lexical_analysis.rst:293
msgid ""
"At the end of non-interactive input, the lexical analyzer generates an "
":data:`~token.ENDMARKER` token."
msgstr "在非交互输入结束时，词法分析器将生成一个 :data:`~token.ENDMARKER` 词元。"

#: ../../reference/lexical_analysis.rst:300
msgid "Other tokens"
msgstr "其他标记"

#: ../../reference/lexical_analysis.rst:302
msgid ""
"Besides :data:`~token.NEWLINE`, :data:`~token.INDENT` and "
":data:`~token.DEDENT`, the following categories of tokens exist: "
"*identifiers* and *keywords* (:data:`~token.NAME`), *literals* (such as "
":data:`~token.NUMBER` and :data:`~token.STRING`), and other symbols "
"(*operators* and *delimiters*, :data:`~token.OP`). Whitespace characters "
"(other than logical line terminators, discussed earlier) are not tokens, but"
" serve to delimit tokens. Where ambiguity exists, a token comprises the "
"longest possible string that forms a legal token, when read from left to "
"right."
msgstr ""
"除了 :data:`~token.NEWLINE`、:data:`~token.INDENT` 和 :data:`~token.DEDENT` "
"之外，还存在以下几类词元: *标识符* 和 *关键字* (:data:`~token.NAME`)、*字面量* (如 "
":data:`~token.NUMBER` 和 :data:`~token.STRING`)，以及其他符号 (*运算符* 和 *分隔符*, "
":data:`~token.OP`)。 空白字符（除了前面讨论的逻辑行终止符）不是词元，而是用于分隔词元。 "
"在有歧义的情况下，词元由从左到右读取时能形成合法词元的最长可能字符串组成。"

#: ../../reference/lexical_analysis.rst:316
msgid "Names (identifiers and keywords)"
msgstr "名称（标识符和关键字）"

#: ../../reference/lexical_analysis.rst:320
msgid ""
":data:`~token.NAME` tokens represent *identifiers*, *keywords*, and *soft "
"keywords*."
msgstr ":data:`~token.NAME` 标记表示 *标识符*、*关键字* 和 *软关键字*。"

#: ../../reference/lexical_analysis.rst:323
msgid ""
"Within the ASCII range (U+0001..U+007F), the valid characters for names "
"include the uppercase and lowercase letters (``A-Z`` and ``a-z``), the "
"underscore ``_`` and, except for the first character, the digits ``0`` "
"through ``9``."
msgstr ""
"在 ASCII 范围（U+0001..U+007F）内，名称的有效字符包括大小写字母（``A-Z`` 和 ``a-z``）、下划线 "
"``_``，并且除了首字符外，还可以包含数字 ``0`` 到 ``9``。"

#: ../../reference/lexical_analysis.rst:328
msgid ""
"Names must contain at least one character, but have no upper length limit. "
"Case is significant."
msgstr "名称必须至少包含一个字符，但没有长度上限。大小写敏感。"

#: ../../reference/lexical_analysis.rst:331
msgid ""
"Besides ``A-Z``, ``a-z``, ``_`` and ``0-9``, names can also use \"letter-"
"like\" and \"number-like\" characters from outside the ASCII range, as "
"detailed below."
msgstr ""
"除了 ``A-Z``、``a-z``、``_`` 和 ``0-9`` 之外，名称还可以使用 ASCII "
"范围之外的“类字母”和“类数字”字符，具体如下所述。"

#: ../../reference/lexical_analysis.rst:334
msgid ""
"All identifiers are converted into the `normalization form`_ NFKC while "
"parsing; comparison of identifiers is based on NFKC."
msgstr "所有标识符在解析时都会转换为 `规范化形式`_ NFKC；标识符的比较基于 NFKC。"

#: ../../reference/lexical_analysis.rst:337
msgid ""
"Formally, the first character of a normalized identifier must belong to the "
"set ``id_start``, which is the union of:"
msgstr "形式上，规范化标识符的首字符必须属于集合 ``id_start``，该集合是以下各项的并集："

#: ../../reference/lexical_analysis.rst:340
msgid ""
"Unicode category ``<Lu>`` - uppercase letters (includes ``A`` to ``Z``)"
msgstr "Unicode 类别 ``<Lu>`` - 大写字母 (包括 ``A`` 到 ``Z``)"

#: ../../reference/lexical_analysis.rst:341
msgid ""
"Unicode category ``<Ll>`` - lowercase letters (includes ``a`` to ``z``)"
msgstr "Unicode 类别 ``<Ll>`` - 小写字母 (包括 ``a`` 到 ``z``)"

#: ../../reference/lexical_analysis.rst:342
msgid "Unicode category ``<Lt>`` - titlecase letters"
msgstr "Unicode 类别 ``<Lt>`` - 标题大小写字母"

#: ../../reference/lexical_analysis.rst:343
msgid "Unicode category ``<Lm>`` - modifier letters"
msgstr "Unicode 类别 ``<Lm>`` - 修饰字母"

#: ../../reference/lexical_analysis.rst:344
msgid "Unicode category ``<Lo>`` - other letters"
msgstr "Unicode category ``<Lo>`` - 其他字母"

#: ../../reference/lexical_analysis.rst:345
msgid "Unicode category ``<Nl>`` - letter numbers"
msgstr "Unicode 类别 ``<Nl>`` - 数字字母"

#: ../../reference/lexical_analysis.rst:346
msgid "{``\"_\"``} - the underscore"
msgstr "{``\"_\"``} - 下划线"

#: ../../reference/lexical_analysis.rst:347
msgid ""
"``<Other_ID_Start>`` - an explicit set of characters in `PropList.txt`_ to "
"support backwards compatibility"
msgstr "``<Other_ID_Start>`` - 在 `PropList.txt`_ 中显式定义的用于支持向下兼容的字符集合"

#: ../../reference/lexical_analysis.rst:350
msgid ""
"The remaining characters must belong to the set ``id_continue``, which is "
"the union of:"
msgstr "其余字母必须归属于 ``id_continue`` 集合，它是以下字符的并集："

#: ../../reference/lexical_analysis.rst:353
msgid "all characters in ``id_start``"
msgstr "``id_start`` 中的所有字符"

#: ../../reference/lexical_analysis.rst:354
msgid "Unicode category ``<Nd>`` - decimal numbers (includes ``0`` to ``9``)"
msgstr "Unicode 类别 ``<Nd>`` - 十进制数字（包括 ``0`` 到 ``9``）"

#: ../../reference/lexical_analysis.rst:355
msgid "Unicode category ``<Pc>`` - connector punctuations"
msgstr "Unicode 类别 ``<Pc>`` - 连接标点符号"

#: ../../reference/lexical_analysis.rst:356
msgid "Unicode category ``<Mn>`` - nonspacing marks"
msgstr "Unicode 类别 ``<Mn>`` - 非间距标记"

#: ../../reference/lexical_analysis.rst:357
msgid "Unicode category ``<Mc>`` - spacing combining marks"
msgstr "Unicode 类别 ``<Mc>`` - 间距组合标记"

#: ../../reference/lexical_analysis.rst:358
msgid ""
"``<Other_ID_Continue>`` - another explicit set of characters in "
"`PropList.txt`_ to support backwards compatibility"
msgstr "``<Other_ID_Continue>`` - 为支持向下兼容性在 `PropList.txt`_ 中另一组显式列出的字符集合"

#: ../../reference/lexical_analysis.rst:361
msgid ""
"Unicode categories use the version of the Unicode Character Database as "
"included in the :mod:`unicodedata` module."
msgstr "Unicode 类别使用的是 :mod:`unicodedata` 模块中所包含的 Unicode 字符数据库版本。"

#: ../../reference/lexical_analysis.rst:364
msgid ""
"These sets are based on the Unicode standard annex `UAX-31`_. See also "
":pep:`3131` for further details."
msgstr "这些集合基于 Unicode 标准附录 `UAX-31`_。有关更多详细信息，另请参阅 :pep:`3131`。"

#: ../../reference/lexical_analysis.rst:367
msgid ""
"Even more formally, names are described by the following lexical "
"definitions:"
msgstr "更形式化地说，名称由以下词法定义描述："

#: ../../reference/lexical_analysis.rst:381
msgid ""
"A non-normative listing of all valid identifier characters as defined by "
"Unicode is available in the `DerivedCoreProperties.txt`_ file in the Unicode"
" Character Database."
msgstr ""
"Unicode 字符数据库中的 `DerivedCoreProperties.txt`_ 文件提供了一份非规范性的列表，包含了所有符合 Unicode "
"定义的有效标识符字符。"

#: ../../reference/lexical_analysis.rst:395
msgid "Keywords"
msgstr "关键字"

#: ../../reference/lexical_analysis.rst:401
msgid ""
"The following names are used as reserved words, or *keywords* of the "
"language, and cannot be used as ordinary identifiers.  They must be spelled "
"exactly as written here:"
msgstr "以下名称被用作该语言的保留字或 *关键字*，不能用作普通标识符。它们的拼写必须与此处完全一致："

#: ../../reference/lexical_analysis.rst:405
msgid ""
"False      await      else       import     pass\n"
"None       break      except     in         raise\n"
"True       class      finally    is         return\n"
"and        continue   for        lambda     try\n"
"as         def        from       nonlocal   while\n"
"assert     del        global     not        with\n"
"async      elif       if         or         yield"
msgstr ""
"False      await      else       import     pass\n"
"None       break      except     in         raise\n"
"True       class      finally    is         return\n"
"and        continue   for        lambda     try\n"
"as         def        from       nonlocal   while\n"
"assert     del        global     not        with\n"
"async      elif       if         or         yield"

#: ../../reference/lexical_analysis.rst:419
msgid "Soft Keywords"
msgstr "软关键字"

#: ../../reference/lexical_analysis.rst:425
msgid ""
"Some names are only reserved under specific contexts. These are known as "
"*soft keywords*:"
msgstr "某些名称仅在特定上下文中保留。这些被称为 *软关键字*："

#: ../../reference/lexical_analysis.rst:428
msgid ""
"``match``, ``case``, and ``_``, when used in the :keyword:`match` statement."
msgstr "``match``、``case`` 和 ``_`` 在 :keyword:`match` 语句中使用时属于软关键字。"

#: ../../reference/lexical_analysis.rst:429
msgid "``type``, when used in the :keyword:`type` statement."
msgstr "``type`` 在 :keyword:`type` 语句中使用时属于软关键字。"

#: ../../reference/lexical_analysis.rst:431
msgid ""
"These syntactically act as keywords in their specific contexts, but this "
"distinction is done at the parser level, not when tokenizing."
msgstr "这些标识符在特定上下文中语法上作为关键字使用，但这种区分是在解析器层面完成的，而非词法分析（分词）阶段。"

#: ../../reference/lexical_analysis.rst:434
msgid ""
"As soft keywords, their use in the grammar is possible while still "
"preserving compatibility with existing code that uses these names as "
"identifier names."
msgstr "作为软关键字，它们能够在用于相应语法的同时仍然保持与用作标识符名称的现有代码的兼容性。"

#: ../../reference/lexical_analysis.rst:438
msgid "``type`` is now a soft keyword."
msgstr "``type`` 现在是一个软关键字。"

#: ../../reference/lexical_analysis.rst:447
msgid "Reserved classes of identifiers"
msgstr "保留的标识符类"

#: ../../reference/lexical_analysis.rst:449
msgid ""
"Certain classes of identifiers (besides keywords) have special meanings.  "
"These classes are identified by the patterns of leading and trailing "
"underscore characters:"
msgstr "某些标识符类（除了关键字）具有特殊含义。这些类的命名模式以下划线字符开头，并以下划线结尾："

#: ../../reference/lexical_analysis.rst:453
msgid "``_*``"
msgstr "``_*``"

#: ../../reference/lexical_analysis.rst:454
msgid "Not imported by ``from module import *``."
msgstr "不会被 ``from module import *`` 所导入。"

#: ../../reference/lexical_analysis.rst:456
msgid "``_``"
msgstr "``_``"

#: ../../reference/lexical_analysis.rst:457
msgid ""
"In a ``case`` pattern within a :keyword:`match` statement, ``_`` is a "
":ref:`soft keyword <soft-keywords>` that denotes a :ref:`wildcard <wildcard-"
"patterns>`."
msgstr ""
"在 :keyword:`match` 语句内部的 ``case`` 模式中，``_`` 是一个 :ref:`软关键字 <soft-"
"keywords>`，它表示 :ref:`通配符 <wildcard-patterns>`。"

#: ../../reference/lexical_analysis.rst:461
msgid ""
"Separately, the interactive interpreter makes the result of the last "
"evaluation available in the variable ``_``. (It is stored in the "
":mod:`builtins` module, alongside built-in functions like ``print``.)"
msgstr ""
"在此之外，交互式解释器会将最后一次求值的结果放到变量 ``_`` 中。 （它与 ``print`` 等内置函数一起被存储于 "
":mod:`builtins` 模块。）"

#: ../../reference/lexical_analysis.rst:466
msgid ""
"Elsewhere, ``_`` is a regular identifier. It is often used to name "
"\"special\" items, but it is not special to Python itself."
msgstr "在其他地方，``_`` 是一个常规标识符。 它常常被用来命名 \"特殊\" 条目，但对 Python 本身来说毫无特殊之处。"

#: ../../reference/lexical_analysis.rst:471
msgid ""
"The name ``_`` is often used in conjunction with internationalization; refer"
" to the documentation for the :mod:`gettext` module for more information on "
"this convention."
msgstr "``_`` 常用于连接国际化文本；详见 :mod:`gettext` 模块文档。"

#: ../../reference/lexical_analysis.rst:475
msgid "It is also commonly used for unused variables."
msgstr "它还经常被用来命名无需使用的变量。"

#: ../../reference/lexical_analysis.rst:477
msgid "``__*__``"
msgstr "``__*__``"

#: ../../reference/lexical_analysis.rst:478
msgid ""
"System-defined names, informally known as \"dunder\" names. These names are "
"defined by the interpreter and its implementation (including the standard "
"library). Current system names are discussed in the :ref:`specialnames` "
"section and elsewhere. More will likely be defined in future versions of "
"Python.  *Any* use of ``__*__`` names, in any context, that does not follow "
"explicitly documented use, is subject to breakage without warning."
msgstr ""
"系统定义的名称，通常简称为 \"dunder\" 。这些名称由解释器及其实现（包括标准库）定义。现有系统定义名称相关的论述详见 "
":ref:`specialnames` 等章节。Python 未来版本中还将定义更多此类名称。任何情况下，*任何* 不显式遵从 ``__*__`` "
"名称的文档用法，都可能导致无警告提示的错误。"

#: ../../reference/lexical_analysis.rst:485
msgid "``__*``"
msgstr "``__*``"

#: ../../reference/lexical_analysis.rst:486
msgid ""
"Class-private names.  Names in this category, when used within the context "
"of a class definition, are re-written to use a mangled form to help avoid "
"name clashes between \"private\" attributes of base and derived classes. See"
" section :ref:`atom-identifiers`."
msgstr ""
"类的私有名称。类定义时，此类名称以一种混合形式重写，以避免基类及派生类的 \"私有\" 属性之间产生名称冲突。详见 :ref:`atom-"
"identifiers`。"

#: ../../reference/lexical_analysis.rst:495
msgid "Literals"
msgstr "字面量"

#: ../../reference/lexical_analysis.rst:499
msgid "Literals are notations for constant values of some built-in types."
msgstr "字面量是内置类型常量值的表示法。"

#: ../../reference/lexical_analysis.rst:501
msgid ""
"In terms of lexical analysis, Python has :ref:`string, bytes <strings>` and "
":ref:`numeric <numbers>` literals."
msgstr "在词法分析方面，Python有 :ref:`字符串、字节 <strings>` 和 :ref:`数值 <numbers>` 字面量。"

#: ../../reference/lexical_analysis.rst:504
msgid ""
"Other \"literals\" are lexically denoted using :ref:`keywords <keywords>` "
"(``None``, ``True``, ``False``) and the special :ref:`ellipsis token "
"<lexical-ellipsis>` (``...``)."
msgstr ""
"其他“字面量”通过 :ref:`关键字 <keywords>` (``None``、``True``、``False``) 和特殊的 "
":ref:`省略号词元 <lexical-ellipsis>` (``...``) 进行词法表示。"

#: ../../reference/lexical_analysis.rst:515
msgid "String and Bytes literals"
msgstr "字符串与字节串字面量"

#: ../../reference/lexical_analysis.rst:517
msgid ""
"String literals are text enclosed in single quotes (``'``) or double quotes "
"(``\"``). For example:"
msgstr "字符串字面量是用单引号（``'``）或双引号（``\"``）括起来的文本。例如："

#: ../../reference/lexical_analysis.rst:520
msgid ""
"\"spam\"\n"
"'eggs'"
msgstr ""
"\"spam\"\n"
"'eggs'"

#: ../../reference/lexical_analysis.rst:525
msgid ""
"The quote used to start the literal also terminates it, so a string literal "
"can only contain the other quote (except with escape sequences, see below). "
"For example:"
msgstr "用于开始字面量的引号也用于终止它，因此字符串字面量只能包含另一个引号（除非使用转义序列，见下文）。例如："

#: ../../reference/lexical_analysis.rst:529
msgid ""
"'Say \"Hello\", please.'\n"
"\"Don't do that!\""
msgstr ""
"'Say \"Hello\", please.'\n"
"\"Don't do that!\""

#: ../../reference/lexical_analysis.rst:534
msgid ""
"Except for this limitation, the choice of quote character (``'`` or ``\"``) "
"does not affect how the literal is parsed."
msgstr "除了这个限制外，引号字符（ ``'`` 或 ``\"`` ）的选择不影响字面值的解析方式。"

#: ../../reference/lexical_analysis.rst:537
msgid ""
"Inside a string literal, the backslash (``\\``) character introduces an "
":dfn:`escape sequence`, which has special meaning depending on the character"
" after the backslash. For example, ``\\\"`` denotes the double quote "
"character, and does *not* end the string:"
msgstr ""
"在字符串字面值内部，反斜杠（ ``\\`` ）字符引入了一个 :dfn:`转义序列`，其特殊含义取决于反斜杠后面的字符。例如， ``\\\"`` "
"表示双引号字符，并且 *不* 结束字符串："

#: ../../reference/lexical_analysis.rst:543
msgid ""
">>> print(\"Say \\\"Hello\\\" to everyone!\")\n"
"Say \"Hello\" to everyone!"
msgstr ""
">>> print(\"Say \\\"Hello\\\" to everyone!\")\n"
"Say \"Hello\" to everyone!"

#: ../../reference/lexical_analysis.rst:548
msgid ""
"See :ref:`escape sequences <escape-sequences>` below for a full list of such"
" sequences, and more details."
msgstr "有关此类序列的完整列表和更多详细信息，请参见下文的 :ref:`转义序列 <escape-sequences>`。"

#: ../../reference/lexical_analysis.rst:557
msgid "Triple-quoted strings"
msgstr "三引号字符串"

#: ../../reference/lexical_analysis.rst:559
msgid ""
"Strings can also be enclosed in matching groups of three single or double "
"quotes. These are generally referred to as :dfn:`triple-quoted strings`::"
msgstr "字符串也可以用三组匹配的单引号或双引号括起来。这些通常被称为 :dfn:`三引号字符串`::"

#: ../../reference/lexical_analysis.rst:563
msgid "\"\"\"This is a triple-quoted string.\"\"\""
msgstr "\"\"\"这是一个三引号字符串。\"\"\""

#: ../../reference/lexical_analysis.rst:565
msgid ""
"In triple-quoted literals, unescaped quotes are allowed (and are retained), "
"except that three unescaped quotes in a row terminate the literal, if they "
"are of the same kind (``'`` or ``\"``) used at the start::"
msgstr "在三引号字面量中，允许使用未转义的引号（并且会保留），但与起始引号相同的三个连续未转义引号（``'`` 或 ``\"``）会终止字面量::"

#: ../../reference/lexical_analysis.rst:569
msgid "\"\"\"This string has \"quotes\" inside.\"\"\""
msgstr "\"\"\"这个字符串内有 \"引号\"。\"\"\""

#: ../../reference/lexical_analysis.rst:571
msgid "Unescaped newlines are also allowed and retained::"
msgstr "也允许使用未转义的新行，并且会保留::"

#: ../../reference/lexical_analysis.rst:573
msgid ""
"'''This triple-quoted string\n"
"continues on the next line.'''"
msgstr ""
"'''这个三引号字符串\n"
"在下一行继续。'''"

#: ../../reference/lexical_analysis.rst:582
msgid "String prefixes"
msgstr "字符串前缀"

#: ../../reference/lexical_analysis.rst:584
msgid ""
"String literals can have an optional :dfn:`prefix` that influences how the "
"content of the literal is parsed, for example:"
msgstr "字符串字面量可以有一个可选的 :dfn:`前缀`，该前缀会影响字面量内容的解析方式，例如:"

#: ../../reference/lexical_analysis.rst:587
msgid ""
"b\"data\"\n"
"f'{result=}'"
msgstr ""
"b\"data\"\n"
"f'{result=}'"

#: ../../reference/lexical_analysis.rst:592
msgid "The allowed prefixes are:"
msgstr "允许的前缀有:"

#: ../../reference/lexical_analysis.rst:594
msgid "``b``: :ref:`Bytes literal <bytes-literal>`"
msgstr "``b``: :ref:`字节串字面量 <bytes-literal>`"

#: ../../reference/lexical_analysis.rst:595
msgid "``r``: :ref:`Raw string <raw-strings>`"
msgstr "``r``: :ref:`原始字符串 <raw-strings>`"

#: ../../reference/lexical_analysis.rst:596
msgid "``f``: :ref:`Formatted string literal <f-strings>` (\"f-string\")"
msgstr "``f``: :ref:`格式字符串字面值 <f-strings>` （\"f-string\"）"

#: ../../reference/lexical_analysis.rst:597
msgid "``t``: :ref:`Template string literal <t-strings>` (\"t-string\")"
msgstr "``t``: :ref:`模板字符串字面量 <t-strings>` （\"t-string\"）"

#: ../../reference/lexical_analysis.rst:598
msgid "``u``: No effect (allowed for backwards compatibility)"
msgstr "``u``: 无效果（为向后兼容而允许）"

#: ../../reference/lexical_analysis.rst:600
msgid "See the linked sections for details on each type."
msgstr "详细信息请参见链接部分。"

#: ../../reference/lexical_analysis.rst:602
msgid ""
"Prefixes are case-insensitive (for example, '``B``' works the same as "
"'``b``'). The '``r``' prefix can be combined with '``f``', '``t``' or "
"'``b``', so '``fr``', '``rf``', '``tr``', '``rt``', '``br``', and '``rb``' "
"are also valid prefixes."
msgstr ""
"前缀不区分大小写（例如，'``B``' 与 '``b``' 效果相同）。 '``r``' 前缀可以与 '``f``', '``t``' 或 "
"'``b``' 组合使用，因此 '``fr``', '``rf``', '``tr``', '``rt``', '``br``' 和 '``rb``' "
"也是有效的前缀。"

#: ../../reference/lexical_analysis.rst:606
msgid ""
"The ``'rb'`` prefix of raw bytes literals has been added as a synonym of "
"``'br'``."
msgstr "新增原始字节串 ``'rb'`` 前缀，是 ``'br'`` 的同义词。"

#: ../../reference/lexical_analysis.rst:610
msgid ""
"Support for the unicode legacy literal (``u'value'``) was reintroduced to "
"simplify the maintenance of dual Python 2.x and 3.x codebases. See "
":pep:`414` for more information."
msgstr ""
"为简化 Python 2.x 和 3.x 双版本代码库的维护工作，重新引入了对 Unicode "
"传统字面量（``u'value'``）的支持。更多信息请参阅 :pep:`414`。"

#: ../../reference/lexical_analysis.rst:616
msgid "Formal grammar"
msgstr "正式语法"

#: ../../reference/lexical_analysis.rst:618
msgid ""
"String literals, except :ref:`\"f-strings\" <f-strings>` and "
":ref:`\"t-strings\" <t-strings>`, are described by the following lexical "
"definitions."
msgstr ""
"字符串字面值，:ref:`\"f-字符串\" <f-strings>` 和 :ref:`\"t-字符串\" <t-strings>` "
"除外，是以如下语法定义来描述的。"

#: ../../reference/lexical_analysis.rst:622
msgid ""
"These definitions use :ref:`negative lookaheads <lexical-lookaheads>` "
"(``!``) to indicate that an ending quote ends the literal."
msgstr "这些定义使用 :ref:`否定型前视 <lexical-lookaheads>` (``!``) 来表示以一个末尾引号来结束字面值。"

#: ../../reference/lexical_analysis.rst:640
msgid ""
"Note that as in all lexical definitions, whitespace is significant. In "
"particular, the prefix (if any) must be immediately followed by the starting"
" quote."
msgstr "请注意像在所有语法定义中一样，空白符是有意义的。 具体而言，前缀（如果存在）之后必须紧接开头引号。"

#: ../../reference/lexical_analysis.rst:662
msgid "Escape sequences"
msgstr "转义序列"

#: ../../reference/lexical_analysis.rst:664
msgid ""
"Unless an '``r``' or '``R``' prefix is present, escape sequences in string "
"and bytes literals are interpreted according to rules similar to those used "
"by Standard C.  The recognized escape sequences are:"
msgstr ""
"除非存在 '``r``' 或 '``R``' 前缀，在字符串和字节串字面值中的转义序列将按照类似于标准 C 所使用的规则进行解读。 可用的转义序列有："

#: ../../reference/lexical_analysis.rst:672
msgid "Escape Sequence"
msgstr "转义序列"

#: ../../reference/lexical_analysis.rst:673
msgid "Meaning"
msgstr "含意"

#: ../../reference/lexical_analysis.rst:674
msgid "``\\``\\ <newline>"
msgstr "``\\``\\ <newline>"

#: ../../reference/lexical_analysis.rst:675
msgid ":ref:`string-escape-ignore`"
msgstr ":ref:`string-escape-ignore`"

#: ../../reference/lexical_analysis.rst:676
msgid "``\\\\``"
msgstr "``\\\\``"

#: ../../reference/lexical_analysis.rst:677
msgid ":ref:`Backslash <string-escape-escaped-char>`"
msgstr ":ref:`反斜杠 <string-escape-escaped-char>`"

#: ../../reference/lexical_analysis.rst:678
msgid "``\\'``"
msgstr "``\\'``"

#: ../../reference/lexical_analysis.rst:679
msgid ":ref:`Single quote <string-escape-escaped-char>`"
msgstr ":ref:`单引号 <string-escape-escaped-char>`"

#: ../../reference/lexical_analysis.rst:680
msgid "``\\\"``"
msgstr "``\\\"``"

#: ../../reference/lexical_analysis.rst:681
msgid ":ref:`Double quote <string-escape-escaped-char>`"
msgstr ":ref:`双引号 <string-escape-escaped-char>`"

#: ../../reference/lexical_analysis.rst:682
msgid "``\\a``"
msgstr "``\\a``"

#: ../../reference/lexical_analysis.rst:683
msgid "ASCII Bell (BEL)"
msgstr "ASCII 响铃（BEL）"

#: ../../reference/lexical_analysis.rst:684
msgid "``\\b``"
msgstr "``\\b``"

#: ../../reference/lexical_analysis.rst:685
msgid "ASCII Backspace (BS)"
msgstr "ASCII 退格符（BS）"

#: ../../reference/lexical_analysis.rst:686
msgid "``\\f``"
msgstr "``\\f``"

#: ../../reference/lexical_analysis.rst:687
msgid "ASCII Formfeed (FF)"
msgstr "ASCII 换页符（FF）"

#: ../../reference/lexical_analysis.rst:688
msgid "``\\n``"
msgstr "``\\n``"

#: ../../reference/lexical_analysis.rst:689
msgid "ASCII Linefeed (LF)"
msgstr "ASCII 换行符（LF）"

#: ../../reference/lexical_analysis.rst:690
msgid "``\\r``"
msgstr "``\\r``"

#: ../../reference/lexical_analysis.rst:691
msgid "ASCII Carriage Return (CR)"
msgstr "ASCII 回车符（CR）"

#: ../../reference/lexical_analysis.rst:692
msgid "``\\t``"
msgstr "``\\t``"

#: ../../reference/lexical_analysis.rst:693
msgid "ASCII Horizontal Tab (TAB)"
msgstr "ASCII 水平制表符（TAB）"

#: ../../reference/lexical_analysis.rst:694
msgid "``\\v``"
msgstr "``\\v``"

#: ../../reference/lexical_analysis.rst:695
msgid "ASCII Vertical Tab (VT)"
msgstr "ASCII 垂直制表符（VT）"

#: ../../reference/lexical_analysis.rst:696
msgid ":samp:`\\\\\\\\{ooo}`"
msgstr ":samp:`\\\\\\\\{ooo}`"

#: ../../reference/lexical_analysis.rst:697
msgid ":ref:`string-escape-oct`"
msgstr ":ref:`string-escape-oct`"

#: ../../reference/lexical_analysis.rst:698
msgid ":samp:`\\\\x{hh}`"
msgstr ":samp:`\\\\x{hh}`"

#: ../../reference/lexical_analysis.rst:699
msgid ":ref:`string-escape-hex`"
msgstr ":ref:`string-escape-hex`"

#: ../../reference/lexical_analysis.rst:700
msgid ":samp:`\\\\N\\\\{{name}\\\\}`"
msgstr ":samp:`\\\\N\\\\{{name}\\\\}`"

#: ../../reference/lexical_analysis.rst:701
msgid ":ref:`string-escape-named`"
msgstr ":ref:`string-escape-named`"

#: ../../reference/lexical_analysis.rst:702
msgid ":samp:`\\\\u{xxxx}`"
msgstr ":samp:`\\\\u{xxxx}`"

#: ../../reference/lexical_analysis.rst:703
#: ../../reference/lexical_analysis.rst:705
msgid ":ref:`Hexadecimal Unicode character <string-escape-long-hex>`"
msgstr ":ref:`十六进制 Unicode 字符 <string-escape-long-hex>`"

#: ../../reference/lexical_analysis.rst:704
msgid ":samp:`\\\\U{xxxxxxxx}`"
msgstr ":samp:`\\\\U{xxxxxxxx}`"

#: ../../reference/lexical_analysis.rst:710
msgid "Ignored end of line"
msgstr "忽略行尾"

#: ../../reference/lexical_analysis.rst:712
msgid "A backslash can be added at the end of a line to ignore the newline::"
msgstr "可以在行尾添加一个反斜杠来忽略换行符::"

#: ../../reference/lexical_analysis.rst:714
msgid ""
">>> 'This string will not include \\\n"
"... backslashes or newline characters.'\n"
"'This string will not include backslashes or newline characters.'"
msgstr ""
">>> 'This string will not include \\\n"
"... backslashes or newline characters.'\n"
"'This string will not include backslashes or newline characters.'"

#: ../../reference/lexical_analysis.rst:718
msgid ""
"The same result can be achieved using :ref:`triple-quoted strings "
"<strings>`, or parentheses and :ref:`string literal concatenation <string-"
"concatenation>`."
msgstr ""
"同样的效果也可以使用 :ref:`三重引号字符串 <strings>`，或者圆括号和 :ref:`字符串字面量拼接 <string-"
"concatenation>` 来达成。"

#: ../../reference/lexical_analysis.rst:724
msgid "Escaped characters"
msgstr "转义字符"

#: ../../reference/lexical_analysis.rst:726
msgid ""
"To include a backslash in a non-:ref:`raw <raw-strings>` Python string "
"literal, it must be doubled. The ``\\\\`` escape sequence denotes a single "
"backslash character::"
msgstr ""
"要在非 :ref:`原始 <raw-strings>` Python 字符串字面量中包含反斜杠，必须将其加倍。``\\\\`` "
"转义序列表示单个反斜杠字符::"

#: ../../reference/lexical_analysis.rst:730
msgid ""
">>> print('C:\\\\Program Files')\n"
"C:\\Program Files"
msgstr ""
">>> print('C:\\\\Program Files')\n"
"C:\\Program Files"

#: ../../reference/lexical_analysis.rst:733
msgid ""
"Similarly, the ``\\'`` and ``\\\"`` sequences denote the single and double "
"quote character, respectively::"
msgstr "同样，序列 ``\\'`` 和 ``\\\"`` 分别表示单引号和双引号字符::"

#: ../../reference/lexical_analysis.rst:736
msgid ""
">>> print('\\' and \\\"')\n"
"' and \""
msgstr ""
">>> print('\\' and \\\"')\n"
"' and \""

#: ../../reference/lexical_analysis.rst:742
msgid "Octal character"
msgstr "八进制字符"

#: ../../reference/lexical_analysis.rst:744
msgid ""
"The sequence :samp:`\\\\\\\\{ooo}` denotes a *character* with the octal "
"(base 8) value *ooo*::"
msgstr "序列 :samp:`\\\\\\\\{ooo}` 表示一个八进制（基数为8）值为 *ooo* 的*字符*::"

#: ../../reference/lexical_analysis.rst:747
msgid ""
">>> '\\120'\n"
"'P'"
msgstr ""
">>> '\\120'\n"
"'P'"

#: ../../reference/lexical_analysis.rst:750
msgid "Up to three octal digits (0 through 7) are accepted."
msgstr "最多接受三个八进制数字（0到7）。"

#: ../../reference/lexical_analysis.rst:752
#: ../../reference/lexical_analysis.rst:777
msgid ""
"In a bytes literal, *character* means a *byte* with the given value. In a "
"string literal, it means a Unicode character with the given value."
msgstr "在字节串字面量中，*字符* 表示具有给定值的 *字节*。在字符串字面量中，它表示具有给定值的Unicode字符。"

#: ../../reference/lexical_analysis.rst:755
msgid ""
"Octal escapes with value larger than ``0o377`` (255) produce a "
":exc:`DeprecationWarning`."
msgstr "值大于 ``0o377`` （255）的八进制转义会产生一个 :exc:`DeprecationWarning` 。"

#: ../../reference/lexical_analysis.rst:759
msgid ""
"Octal escapes with value larger than ``0o377`` (255) produce a "
":exc:`SyntaxWarning`. In a future Python version they will raise a "
":exc:`SyntaxError`."
msgstr ""
"值大于 ``0o377`` (255)的八进制转义会产生一个 :exc:`SyntaxWarning` 。在未来的Python版本中，它们将引发一个 "
":exc:`SyntaxError` 。"

#: ../../reference/lexical_analysis.rst:767
msgid "Hexadecimal character"
msgstr "十六进制字符"

#: ../../reference/lexical_analysis.rst:769
msgid ""
"The sequence :samp:`\\\\x{hh}` denotes a *character* with the hex (base 16) "
"value *hh*::"
msgstr "序列 :samp:`\\\\x{hh}` 表示一个十六进制（基数为16）值为 *hh* 的*字符*::"

#: ../../reference/lexical_analysis.rst:772
msgid ""
">>> '\\x50'\n"
"'P'"
msgstr ""
">>> '\\x50'\n"
"'P'"

#: ../../reference/lexical_analysis.rst:775
msgid "Unlike in Standard C, exactly two hex digits are required."
msgstr "与 C 标准不同，必须为两个十六进制数字。"

#: ../../reference/lexical_analysis.rst:783
msgid "Named Unicode character"
msgstr "命名Unicode字符"

#: ../../reference/lexical_analysis.rst:785
msgid ""
"The sequence :samp:`\\\\N\\\\{{name}\\\\}` denotes a Unicode character with "
"the given *name*::"
msgstr "序列 :samp:`\\\\N\\\\{{name}\\\\}` 表示具有给定 *name* 的Unicode字符::"

#: ../../reference/lexical_analysis.rst:788
msgid ""
">>> '\\N{LATIN CAPITAL LETTER P}'\n"
"'P'\n"
">>> '\\N{SNAKE}'\n"
"'🐍'"
msgstr ""
">>> '\\N{LATIN CAPITAL LETTER P}'\n"
"'P'\n"
">>> '\\N{SNAKE}'\n"
"'🐍'"

#: ../../reference/lexical_analysis.rst:793
msgid "This sequence cannot appear in :ref:`bytes literals <bytes-literal>`."
msgstr "此序列不能出现在 :ref:`字节串字面量 <bytes-literal>` 中。"

#: ../../reference/lexical_analysis.rst:795
msgid ""
"Support for `name aliases "
"<https://www.unicode.org/Public/16.0.0/ucd/NameAliases.txt>`__ has been "
"added."
msgstr ""
"已添加对 `名称别名 <https://www.unicode.org/Public/16.0.0/ucd/NameAliases.txt>`__ "
"的支持。"

#: ../../reference/lexical_analysis.rst:802
msgid "Hexadecimal Unicode characters"
msgstr "十六进制Unicode字符"

#: ../../reference/lexical_analysis.rst:804
msgid ""
"These sequences :samp:`\\\\u{xxxx}` and :samp:`\\\\U{xxxxxxxx}` denote the "
"Unicode character with the given hex (base 16) value. Exactly four digits "
"are required for ``\\u``; exactly eight digits are required for ``\\U``. The"
" latter can encode any Unicode character."
msgstr ""
"这些序列 :samp:`\\\\u{xxxx}` 和 :samp:`\\\\U{xxxxxxxx}` "
"表示具有给定十六进制（基数为16）值的Unicode字符。``\\u`` 需要正好四个数字；``\\U`` "
"需要正好八个数字。后者可以编码任何Unicode字符。"

#: ../../reference/lexical_analysis.rst:810
msgid ""
">>> '\\u1234'\n"
"'ሴ'\n"
">>> '\\U0001f40d'\n"
"'🐍'"
msgstr ""
">>> '\\u1234'\n"
"'ሴ'\n"
">>> '\\U0001f40d'\n"
"'🐍'"

#: ../../reference/lexical_analysis.rst:817
msgid ""
"These sequences cannot appear in :ref:`bytes literals <bytes-literal>`."
msgstr "这些序列不能出现在 :ref:`字节串字面量 <bytes-literal>` 中。"

#: ../../reference/lexical_analysis.rst:823
msgid "Unrecognized escape sequences"
msgstr "未识别的转义序列"

#: ../../reference/lexical_analysis.rst:825
msgid ""
"Unlike in Standard C, all unrecognized escape sequences are left in the "
"string unchanged, that is, *the backslash is left in the result*::"
msgstr "与标准C不同，所有未识别的转义序列在字符串中保持不变，即 *反斜杠保留在结果中*::"

#: ../../reference/lexical_analysis.rst:828
msgid ""
">>> print('\\q')\n"
"\\q\n"
">>> list('\\q')\n"
"['\\\\', 'q']"
msgstr ""
">>> print('\\q')\n"
"\\q\n"
">>> list('\\q')\n"
"['\\\\', 'q']"

#: ../../reference/lexical_analysis.rst:833
msgid ""
"Note that for bytes literals, the escape sequences only recognized in string"
" literals (``\\N...``, ``\\u...``, ``\\U...``) fall into the category of "
"unrecognized escapes."
msgstr "请注意，对于字节串字面量，仅在字符串字面量中识别的转义序列（``\\N...``，``\\u...``，``\\U...``）属于未识别的转义类别。"

#: ../../reference/lexical_analysis.rst:837
msgid "Unrecognized escape sequences produce a :exc:`DeprecationWarning`."
msgstr "未识别的转义序列会产生 :exc:`DeprecationWarning`。"

#: ../../reference/lexical_analysis.rst:840
msgid ""
"Unrecognized escape sequences produce a :exc:`SyntaxWarning`. In a future "
"Python version they will raise a :exc:`SyntaxError`."
msgstr ""
"未识别的转义序列会产生一个 :exc:`SyntaxWarning`。在未来的Python版本中，它们将引发一个 :exc:`SyntaxError`。"

#: ../../reference/lexical_analysis.rst:853
msgid "Bytes literals"
msgstr "字节串字面量"

#: ../../reference/lexical_analysis.rst:855
msgid ""
":dfn:`Bytes literals` are always prefixed with '``b``' or '``B``'; they "
"produce an instance of the :class:`bytes` type instead of the :class:`str` "
"type. They may only contain ASCII characters; bytes with a numeric value of "
"128 or greater must be expressed with escape sequences (typically "
":ref:`string-escape-hex` or :ref:`string-escape-oct`):"
msgstr ""
":dfn:`字节串字面值` 总是带有 '``b``' 或 '``B``' 前缀；它们会产生 :class:`bytes` 类型而不是 "
":class:`str` 类型的实例。 它们只能包含 ASCII 字符；数值为 128 或以上的字节必须使用转义序列来表示 (通常为 "
":ref:`string-escape-hex` 或 :ref:`string-escape-oct`)："

#: ../../reference/lexical_analysis.rst:861
msgid ""
">>> b'\\x89PNG\\r\\n\\x1a\\n'\n"
"b'\\x89PNG\\r\\n\\x1a\\n'\n"
">>> list(b'\\x89PNG\\r\\n\\x1a\\n')\n"
"[137, 80, 78, 71, 13, 10, 26, 10]"
msgstr ""
">>> b'\\x89PNG\\r\\n\\x1a\\n'\n"
"b'\\x89PNG\\r\\n\\x1a\\n'\n"
">>> list(b'\\x89PNG\\r\\n\\x1a\\n')\n"
"[137, 80, 78, 71, 13, 10, 26, 10]"

#: ../../reference/lexical_analysis.rst:868
msgid ""
"Similarly, a zero byte must be expressed using an escape sequence (typically"
" ``\\0`` or ``\\x00``)."
msgstr "同样，零字节必须使用转义序列表示（通常是 ``\\0`` 或 ``\\x00``）。"

#: ../../reference/lexical_analysis.rst:879
msgid "Raw string literals"
msgstr "原始字符串字面量"

#: ../../reference/lexical_analysis.rst:881
msgid ""
"Both string and bytes literals may optionally be prefixed with a letter "
"'``r``' or '``R``'; such constructs are called :dfn:`raw string literals` "
"and :dfn:`raw bytes literals` respectively and treat backslashes as literal "
"characters. As a result, in raw string literals, :ref:`escape sequences "
"<escape-sequences>` are not treated specially:"
msgstr ""
"字符串和字节串字面值都可以选择带有字符 '``r``' 或 '``R``' 作为前缀；这样的构造分别称为 :dfn:`原始字符串字面值` 和 "
":dfn:`原始字节串字面值` 并会将反斜杠视为字面字符。 因此，在原始字符串字面值中，:ref:`转义序列 <escape-sequences>` "
"不会被特殊对待：are not treated specially:"

#: ../../reference/lexical_analysis.rst:888
msgid ""
">>> r'\\d{4}-\\d{2}-\\d{2}'\n"
"'\\\\d{4}-\\\\d{2}-\\\\d{2}'"
msgstr ""
">>> r'\\d{4}-\\d{2}-\\d{2}'\n"
"'\\\\d{4}-\\\\d{2}-\\\\d{2}'"

#: ../../reference/lexical_analysis.rst:893
msgid ""
"Even in a raw literal, quotes can be escaped with a backslash, but the "
"backslash remains in the result; for example, ``r\"\\\"\"`` is a valid "
"string literal consisting of two characters: a backslash and a double quote;"
" ``r\"\\\"`` is not a valid string literal (even a raw string cannot end in "
"an odd number of backslashes).  Specifically, *a raw literal cannot end in a"
" single backslash* (since the backslash would escape the following quote "
"character).  Note also that a single backslash followed by a newline is "
"interpreted as those two characters as part of the literal, *not* as a line "
"continuation."
msgstr ""
"即使在原始字面量中，引号也可以用反斜杠转义，但反斜杠会保留在输出结果里；例如 ``r\"\\\"\"`` "
"是由两个字符组成的有效字符串字面量：反斜杠和双引号；``r\"\\\"`` "
"则不是有效字符串字面量（原始字符串也不能以奇数个反斜杠结尾）。尤其是，*原始字面量不能以单个反斜杠结尾* "
"（反斜杠会转义其后的引号)。还要注意，反斜杠加换行在字面量中被解释为两个字符，而 *不是* 连续行。"

#: ../../reference/lexical_analysis.rst:921
msgid "f-strings"
msgstr "f-字符串"

#: ../../reference/lexical_analysis.rst:925
msgid ""
"A :dfn:`formatted string literal` or :dfn:`f-string` is a string literal "
"that is prefixed with '``f``' or '``F``'.  These strings may contain "
"replacement fields, which are expressions delimited by curly braces ``{}``. "
"While other string literals always have a constant value, formatted strings "
"are really expressions evaluated at run time."
msgstr ""

#: ../../reference/lexical_analysis.rst:931
msgid ""
"Escape sequences are decoded like in ordinary string literals (except when a"
" literal is also marked as a raw string).  After decoding, the grammar for "
"the contents of the string is:"
msgstr "除非字面量标记为原始字符串，否则，与在普通字符串字面量中一样，转义序列也会被解码。解码后，用于字符串内容的语法如下："

#: ../../reference/lexical_analysis.rst:945
msgid ""
"The parts of the string outside curly braces are treated literally, except "
"that any doubled curly braces ``'{{'`` or ``'}}'`` are replaced with the "
"corresponding single curly brace.  A single opening curly bracket ``'{'`` "
"marks a replacement field, which starts with a Python expression. To display"
" both the expression text and its value after evaluation, (useful in "
"debugging), an equal sign ``'='`` may be added after the expression. A "
"conversion field, introduced by an exclamation point ``'!'`` may follow.  A "
"format specifier may also be appended, introduced by a colon ``':'``. A "
"replacement field ends with a closing curly bracket ``'}'``."
msgstr ""
"双花括号 ``'{{'`` 或 ``'}}'`` 被替换为单花括号，花括号外的字符串仍按字面量处理。单左花括号 ``'{'`` 标记以 Python "
"表达式开头的替换字段。在表达式后加等于号 ``'='``，可在求值后，同时显示表达式文本及其结果（用于调试）。 随后是用叹号 ``'!'`` "
"标记的转换字段。还可以在冒号 ``':'`` 后附加格式说明符。替换字段以右花括号 ``'}'`` 为结尾。"

#: ../../reference/lexical_analysis.rst:955
msgid ""
"Expressions in formatted string literals are treated like regular Python "
"expressions surrounded by parentheses, with a few exceptions. An empty "
"expression is not allowed, and both :keyword:`lambda`  and assignment "
"expressions ``:=`` must be surrounded by explicit parentheses. Each "
"expression is evaluated in the context where the formatted string literal "
"appears, in order from left to right.  Replacement expressions can contain "
"newlines in both single-quoted and triple-quoted f-strings and they can "
"contain comments.  Everything that comes after a ``#`` inside a replacement "
"field is a comment (even closing braces and quotes). In that case, "
"replacement fields must be closed in a different line."
msgstr ""
"格式字符串字面量中的表达式会与用圆括号包围的常规 Python 表达式一样处理，但有少量例外。 空表达式是不被允许的，而 "
":keyword:`lambda` 和赋值表达式 ``:=`` 都必须显式地用括号包围。 "
"每个表达式都将在格式字符串字面量出现的上下文中按从左到右的顺序进行求值。 替换表达式可在单引号和三引号f-字符串中包含换行符并可包含注释。 替换字段内 "
"``#`` 后面的所有内容都是注释（即使结尾花括号和引号也是）。 在这种情况下，替换字段必须在另一行中结束。"

#: ../../reference/lexical_analysis.rst:966
msgid ""
">>> f\"abc{a # This is a comment }\"\n"
"... + 3}\"\n"
"'abc5'"
msgstr ""
">>> f\"abc{a # This is a comment }\"\n"
"... + 3}\"\n"
"'abc5'"

#: ../../reference/lexical_analysis.rst:972
msgid ""
"Prior to Python 3.7, an :keyword:`await` expression and comprehensions "
"containing an :keyword:`async for` clause were illegal in the expressions in"
" formatted string literals due to a problem with the implementation."
msgstr ""
"Python 3.7 以前， 因为实现的问题，不允许在格式字符串字面量表达式中使用 :keyword:`await` 表达式与包含 "
":keyword:`async for` 子句的推导式。"

#: ../../reference/lexical_analysis.rst:977
msgid ""
"Prior to Python 3.12, comments were not allowed inside f-string replacement "
"fields."
msgstr "在 Python 3.12 之前，不允许在 f-字符串的替换字段中使用注释。"

#: ../../reference/lexical_analysis.rst:981
msgid ""
"When the equal sign ``'='`` is provided, the output will have the expression"
" text, the ``'='`` and the evaluated value. Spaces after the opening brace "
"``'{'``, within the expression and after the ``'='`` are all retained in the"
" output. By default, the ``'='`` causes the :func:`repr` of the expression "
"to be provided, unless there is a format specified. When a format is "
"specified it defaults to the :func:`str` of the expression unless a "
"conversion ``'!r'`` is declared."
msgstr ""
"表达式里含等号 ``'='`` 时，输出内容包括表达式文本、``'='`` 、求值结果。输出内容可以保留表达式中左花括号 ``'{'`` 后，及 "
"``'='`` 后的空格。没有指定格式时，``'='`` 默认调用表达式的 :func:`repr`。指定了格式时，默认调用表达式的 "
":func:`str`，除非声明了转换字段 ``'!r'``。"

#: ../../reference/lexical_analysis.rst:989
msgid "The equal sign ``'='``."
msgstr "等号 ``'='``。"

#: ../../reference/lexical_analysis.rst:992
msgid ""
"If a conversion is specified, the result of evaluating the expression is "
"converted before formatting.  Conversion ``'!s'`` calls :func:`str` on the "
"result, ``'!r'`` calls :func:`repr`, and ``'!a'`` calls :func:`ascii`."
msgstr ""
"指定了转换符时，表达式求值的结果会先转换，再格式化。转换符 ``'!s'`` 调用 :func:`str` 转换求值结果，``'!r'`` 调用 "
":func:`repr`，``'!a'`` 调用 :func:`ascii`。"

#: ../../reference/lexical_analysis.rst:996
msgid ""
"The result is then formatted using the :func:`format` protocol.  The format "
"specifier is passed to the :meth:`~object.__format__` method of the "
"expression or conversion result.  An empty string is passed when the format "
"specifier is omitted.  The formatted result is then included in the final "
"value of the whole string."
msgstr ""
"然后使用 :func:`format` 协议对结果进行格式化。 格式说明符将传给表达式或转换结果的 :meth:`~object.__format__`"
" 方法。 如果省略格式说明符则将传入空字符串。 格式化后的结果将包括在整个字符串的最终值中。"

#: ../../reference/lexical_analysis.rst:1002
msgid ""
"Top-level format specifiers may include nested replacement fields. These "
"nested fields may include their own conversion fields and :ref:`format "
"specifiers <formatspec>`, but may not include more deeply nested replacement"
" fields. The :ref:`format specifier mini-language <formatspec>` is the same "
"as that used by the :meth:`str.format` method."
msgstr ""
"最高层级的格式说明符可以包括嵌套的替换字段。 这些嵌套字段也可以包括它们自己的转换字段和 :ref:`格式说明符 "
"<formatspec>`，但是不可再包括更深层嵌套的替换字段。 这里的 :ref:`格式说明符微语言 <formatspec>` 与 "
":meth:`str.format` 方法所使用的相同。"

#: ../../reference/lexical_analysis.rst:1008
msgid ""
"Formatted string literals may be concatenated, but replacement fields cannot"
" be split across literals."
msgstr "格式字符串字面量可以拼接，但是一个替换字段不能拆分到多个字面量。"

#: ../../reference/lexical_analysis.rst:1011
msgid "Some examples of formatted string literals::"
msgstr "格式字符串字面量示例如下："

#: ../../reference/lexical_analysis.rst:1013
msgid ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name!r}.\"\n"
"\"He said his name is 'Fred'.\"\n"
">>> f\"He said his name is {repr(name)}.\"  # repr() is equivalent to !r\n"
"\"He said his name is 'Fred'.\"\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'\n"
">>> today = datetime(year=2017, month=1, day=27)\n"
">>> f\"{today:%B %d, %Y}\"  # using date format specifier\n"
"'January 27, 2017'\n"
">>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n"
"'today=January 27, 2017'\n"
">>> number = 1024\n"
">>> f\"{number:#0x}\"  # using integer format specifier\n"
"'0x400'\n"
">>> foo = \"bar\"\n"
">>> f\"{ foo = }\" # preserves whitespace\n"
"\" foo = 'bar'\"\n"
">>> line = \"The mill's closed\"\n"
">>> f\"{line = }\"\n"
"'line = \"The mill\\'s closed\"'\n"
">>> f\"{line = :20}\"\n"
"\"line = The mill's closed   \"\n"
">>> f\"{line = !r:20}\"\n"
"'line = \"The mill\\'s closed\" '"
msgstr ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name!r}.\"\n"
"\"He said his name is 'Fred'.\"\n"
">>> f\"He said his name is {repr(name)}.\"  # repr() is equivalent to !r\n"
"\"He said his name is 'Fred'.\"\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'\n"
">>> today = datetime(year=2017, month=1, day=27)\n"
">>> f\"{today:%B %d, %Y}\"  # using date format specifier\n"
"'January 27, 2017'\n"
">>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n"
"'today=January 27, 2017'\n"
">>> number = 1024\n"
">>> f\"{number:#0x}\"  # using integer format specifier\n"
"'0x400'\n"
">>> foo = \"bar\"\n"
">>> f\"{ foo = }\" # preserves whitespace\n"
"\" foo = 'bar'\"\n"
">>> line = \"The mill's closed\"\n"
">>> f\"{line = }\"\n"
"'line = \"The mill\\'s closed\"'\n"
">>> f\"{line = :20}\"\n"
"\"line = The mill's closed   \"\n"
">>> f\"{line = !r:20}\"\n"
"'line = \"The mill\\'s closed\" '"

#: ../../reference/lexical_analysis.rst:1043
msgid ""
"Reusing the outer f-string quoting type inside a replacement field is "
"permitted::"
msgstr "允许在替换字段中重用外层 f-字符串的引号类型::"

#: ../../reference/lexical_analysis.rst:1046
msgid ""
">>> a = dict(x=2)\n"
">>> f\"abc {a[\"x\"]} def\"\n"
"'abc 2 def'"
msgstr ""
">>> a = dict(x=2)\n"
">>> f\"abc {a[\"x\"]} def\"\n"
"'abc 2 def'"

#: ../../reference/lexical_analysis.rst:1050
msgid ""
"Prior to Python 3.12, reuse of the same quoting type of the outer f-string "
"inside a replacement field was not possible."
msgstr "在 Python 3.12 之前不允许在替换字段中重用与外层 f-字符串相同的引号类型。"

#: ../../reference/lexical_analysis.rst:1054
msgid ""
"Backslashes are also allowed in replacement fields and are evaluated the "
"same way as in any other context::"
msgstr "替换字段中也允许使用反斜杠并会以与在其他场景下相同的方式求值::"

#: ../../reference/lexical_analysis.rst:1057
msgid ""
">>> a = [\"a\", \"b\", \"c\"]\n"
">>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\n"
"List a contains:\n"
"a\n"
"b\n"
"c"
msgstr ""
">>> a = [\"a\", \"b\", \"c\"]\n"
">>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\n"
"List a contains:\n"
"a\n"
"b\n"
"c"

#: ../../reference/lexical_analysis.rst:1064
msgid ""
"Prior to Python 3.12, backslashes were not permitted inside an f-string "
"replacement field."
msgstr "在 Python 3.12 之前，f-字符串的替换字段内不允许使用反斜杠。"

#: ../../reference/lexical_analysis.rst:1068
msgid ""
"Formatted string literals cannot be used as docstrings, even if they do not "
"include expressions."
msgstr "即便未包含表达式，格式字符串字面量也不能用作文档字符串。"

#: ../../reference/lexical_analysis.rst:1073
msgid ""
">>> def foo():\n"
"...     f\"Not a docstring\"\n"
"...\n"
">>> foo.__doc__ is None\n"
"True"
msgstr ""
">>> def foo():\n"
"...     f\"Not a docstring\"\n"
"...\n"
">>> foo.__doc__ is None\n"
"True"

#: ../../reference/lexical_analysis.rst:1079
msgid ""
"See also :pep:`498` for the proposal that added formatted string literals, "
"and :meth:`str.format`, which uses a related format string mechanism."
msgstr "参阅 :pep:`498`，了解格式字符串字面量的提案，以及与格式字符串机制相关的 :meth:`str.format`。"

#: ../../reference/lexical_analysis.rst:1087
msgid "t-strings"
msgstr "t-strings"

#: ../../reference/lexical_analysis.rst:1091
msgid ""
"A :dfn:`template string literal` or :dfn:`t-string` is a string literal that"
" is prefixed with '``t``' or '``T``'. These strings follow the same syntax "
"and evaluation rules as :ref:`formatted string literals <f-strings>`, with "
"the following differences:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1096
msgid ""
"Rather than evaluating to a ``str`` object, template string literals "
"evaluate to a :class:`string.templatelib.Template` object."
msgstr ""

#: ../../reference/lexical_analysis.rst:1099
msgid ""
"The :func:`format` protocol is not used. Instead, the format specifier and "
"conversions (if any) are passed to a new "
":class:`~string.templatelib.Interpolation` object that is created for each "
"evaluated expression. It is up to code that processes the resulting "
":class:`~string.templatelib.Template` object to decide how to handle format "
"specifiers and conversions."
msgstr ""
":func:`format` 协议未被使用。相反，格式说明符和转换（如果有）将被传递给为每个评估表达式创建的新的 "
":class:`~string.templatelib.Interpolation` 对象。处理生成的 "
":class:`~string.templatelib.Template` 对象的代码将决定如何处理格式说明符和转换。"

#: ../../reference/lexical_analysis.rst:1106
msgid ""
"Format specifiers containing nested replacement fields are evaluated "
"eagerly, prior to being passed to the "
":class:`~string.templatelib.Interpolation` object. For instance, an "
"interpolation of the form ``{amount:.{precision}f}`` will evaluate the inner"
" expression ``{precision}`` to determine the value of the ``format_spec`` "
"attribute. If ``precision`` were to be ``2``, the resulting format specifier"
" would be ``'.2f'``."
msgstr ""

#: ../../reference/lexical_analysis.rst:1114
msgid ""
"When the equals sign ``'='`` is provided in an interpolation expression, the"
" text of the expression is appended to the literal string that precedes the "
"relevant interpolation. This includes the equals sign and any surrounding "
"whitespace. The :class:`!Interpolation` instance for the expression will be "
"created as normal, except that "
":attr:`~string.templatelib.Interpolation.conversion` will be set to '``r``' "
"(:func:`repr`) by default. If an explicit conversion or format specifier are"
" provided, this will override the default behaviour."
msgstr ""

#: ../../reference/lexical_analysis.rst:1128
msgid "Numeric literals"
msgstr "数值字面量"

#: ../../reference/lexical_analysis.rst:1134
msgid ""
":data:`~token.NUMBER` tokens represent numeric literals, of which there are "
"three types: integers, floating-point numbers, and imaginary numbers."
msgstr ":data:`~token.NUMBER` 标记表示数字字面量，共有三种类型：整数、浮点数和虚数。"

#: ../../reference/lexical_analysis.rst:1142
msgid ""
"The numeric value of a numeric literal is the same as if it were passed as a"
" string to the :class:`int`, :class:`float` or :class:`complex` class "
"constructor, respectively. Note that not all valid inputs for those "
"constructors are also valid literals."
msgstr ""
"数字字面量的数值等价于将其作为字符串传递给 :class:`int`、:class:`float` 或 :class:`complex` "
"类构造函数时的值。注意，这些构造函数的有效输入并不都属于合法的字面量格式。"

#: ../../reference/lexical_analysis.rst:1147
msgid ""
"Numeric literals do not include a sign; a phrase like ``-1`` is actually an "
"expression composed of the unary operator '``-``' and the literal ``1``."
msgstr "数字字面量不包含符号；像 ``-1`` 这样的短语实际上是由一元运算符 '``-``' 和字面量 ``1`` 组成的表达式。"

#: ../../reference/lexical_analysis.rst:1161
msgid "Integer literals"
msgstr "整数字面量"

#: ../../reference/lexical_analysis.rst:1163
msgid "Integer literals denote whole numbers. For example::"
msgstr "整数字面量表示整数。例如："

#: ../../reference/lexical_analysis.rst:1165
msgid ""
"7\n"
"3\n"
"2147483647"
msgstr ""
"7\n"
"3\n"
"2147483647"

#: ../../reference/lexical_analysis.rst:1169
msgid ""
"There is no limit for the length of integer literals apart from what can be "
"stored in available memory::"
msgstr "整数字面量的长度没有限制，仅受可用内存的存储能力限制："

#: ../../reference/lexical_analysis.rst:1172
msgid "7922816251426433759354395033679228162514264337593543950336"
msgstr "7922816251426433759354395033679228162514264337593543950336"

#: ../../reference/lexical_analysis.rst:1174
msgid ""
"Underscores can be used to group digits for enhanced readability, and are "
"ignored for determining the numeric value of the literal. For example, the "
"following literals are equivalent::"
msgstr "下划线可用于对数字进行分组以增强可读性，且在确定字面量的数值时会被忽略。例如，以下字面量是等价的："

#: ../../reference/lexical_analysis.rst:1178
msgid ""
"100_000_000_000\n"
"100000000000\n"
"1_00_00_00_00_000"
msgstr ""
"100_000_000_000\n"
"100000000000\n"
"1_00_00_00_00_000"

#: ../../reference/lexical_analysis.rst:1182
msgid ""
"Underscores can only occur between digits. For example, ``_123``, ``321_``, "
"and ``123__321`` are *not* valid literals."
msgstr "下划线只能出现在数字之间。例如，``_123``、``321_`` 和 ``123__321`` 均 *不是* 有效的字面量。"

#: ../../reference/lexical_analysis.rst:1185
msgid ""
"Integers can be specified in binary (base 2), octal (base 8), or hexadecimal"
" (base 16) using the prefixes ``0b``, ``0o`` and ``0x``, respectively. "
"Hexadecimal digits 10 through 15 are represented by letters ``A``-``F``, "
"case-insensitive.  For example::"
msgstr ""
"整数可以分别使用前缀 ``0b``、``0o`` 和 ``0x`` 指定为二进制（基数 2）、八进制（基数 8）或十六进制（基数 16）。十六进制数字 "
"10 到 15 用字母 ``A``-``F`` 表示，大小写不敏感。例如："

#: ../../reference/lexical_analysis.rst:1190
msgid ""
"0b100110111\n"
"0b_1110_0101\n"
"0o177\n"
"0o377\n"
"0xdeadbeef\n"
"0xDead_Beef"
msgstr ""
"0b100110111\n"
"0b_1110_0101\n"
"0o177\n"
"0o377\n"
"0xdeadbeef\n"
"0xDead_Beef"

#: ../../reference/lexical_analysis.rst:1197
msgid ""
"An underscore can follow the base specifier. For example, ``0x_1f`` is a "
"valid literal, but ``0_x1f`` and ``0x__1f`` are not."
msgstr "下划线可以紧跟在进制前缀之后。例如，``0x_1f`` 是有效的字面量，但 ``0_x1f`` 和 ``0x__1f`` 不是。"

#: ../../reference/lexical_analysis.rst:1201
msgid ""
"Leading zeros in a non-zero decimal number are not allowed. For example, "
"``0123`` is not a valid literal. This is for disambiguation with C-style "
"octal literals, which Python used before version 3.0."
msgstr ""
"非零十进制数中不允许有前导零。例如，``0123`` 不是有效的字面量。这是为了与 C 风格的八进制字面量区分开，Python 在 3.0 "
"版本之前曾使用这种风格。"

#: ../../reference/lexical_analysis.rst:1206
msgid ""
"Formally, integer literals are described by the following lexical "
"definitions:"
msgstr "形式上，整数字面量由以下词法定义描述："

#: ../../reference/lexical_analysis.rst:1223
#: ../../reference/lexical_analysis.rst:1287
msgid "Underscores are now allowed for grouping purposes in literals."
msgstr "现已支持在字面量中，用下划线分组数字。"

#: ../../reference/lexical_analysis.rst:1234
msgid "Floating-point literals"
msgstr "浮点数字面量"

#: ../../reference/lexical_analysis.rst:1236
msgid ""
"Floating-point (float) literals, such as ``3.14`` or ``1.5``, denote "
":ref:`approximations of real numbers <datamodel-float>`."
msgstr ""
"浮点（float）字面量，例如 ``3.14`` 或 ``1.5``，表示 :ref:`实数的近似值 <datamodel-float>`。"

#: ../../reference/lexical_analysis.rst:1239
msgid ""
"They consist of *integer* and *fraction* parts, each composed of decimal "
"digits. The parts are separated by a decimal point, ``.``::"
msgstr "它们由 *整数* 部分和 *小数* 部分组成，每个部分均由十进制数字构成。两部分由小数点 ``.`` 分隔。::"

#: ../../reference/lexical_analysis.rst:1242
msgid ""
"2.71828\n"
"4.0"
msgstr ""
"2.71828\n"
"4.0"

#: ../../reference/lexical_analysis.rst:1245
msgid ""
"Unlike in integer literals, leading zeros are allowed in the numeric parts. "
"For example, ``077.010`` is legal, and denotes the same number as ``77.10``."
msgstr "与整数字面量不同，浮点数字面量的数字部分允许前导零。例如，``077.010`` 是合法的，并且表示与 ``77.10`` 相同的数值。"

#: ../../reference/lexical_analysis.rst:1248
msgid ""
"As in integer literals, single underscores may occur between digits to help "
"readability::"
msgstr "与整数字面量一样，浮点字面量中的数字之间可以使用单个下划线来提高可读性。::"

#: ../../reference/lexical_analysis.rst:1251
msgid ""
"96_485.332_123\n"
"3.14_15_93"
msgstr ""
"96_485.332_123\n"
"3.14_15_93"

#: ../../reference/lexical_analysis.rst:1254
msgid "Either of these parts, but not both, can be empty. For example::"
msgstr "整数部分或小数部分可以为空，但不能同时为空。例如："

#: ../../reference/lexical_analysis.rst:1256
msgid ""
"10.  # (equivalent to 10.0)\n"
".001  # (equivalent to 0.001)"
msgstr ""
"10.  # (等同于 10.0)\n"
".001  # (等同于 0.001)"

#: ../../reference/lexical_analysis.rst:1259
msgid ""
"Optionally, the integer and fraction may be followed by an *exponent*: the "
"letter ``e`` or ``E``, followed by an optional sign, ``+`` or ``-``, and a "
"number in the same format as the integer and fraction parts. The ``e`` or "
"``E`` represents \"times ten raised to the power of\"::"
msgstr ""
"整数部分和小数部分之后可以选择性地跟随一个 *指数部分*：字母 ``e`` 或 ``E``，后面跟一个可选的符号（``+`` 或 "
"``-``），以及一个格式与整数和小数部分相同的数字。这里的 ``e`` 或 ``E`` 表示\"乘以10的...次幂\"::"

#: ../../reference/lexical_analysis.rst:1264
msgid ""
"1.0e3  # (represents 1.0×10³, or 1000.0)\n"
"1.166e-5  # (represents 1.166×10⁻⁵, or 0.00001166)\n"
"6.02214076e+23  # (represents 6.02214076×10²³, or 602214076000000000000000.)"
msgstr ""
"1.0e3  # (代表 1.0×10³, or 1000.0)\n"
"1.166e-5  # (代表 1.166×10⁻⁵, or 0.00001166)\n"
"6.02214076e+23  # (代表 6.02214076×10²³ 或 602214076000000000000000)"

#: ../../reference/lexical_analysis.rst:1268
msgid ""
"In floats with only integer and exponent parts, the decimal point may be "
"omitted::"
msgstr "对于仅包含整数部分和指数部分的浮点字面量，小数点可以省略::"

#: ../../reference/lexical_analysis.rst:1271
msgid ""
"1e3  # (equivalent to 1.e3 and 1.0e3)\n"
"0e0  # (equivalent to 0.)"
msgstr ""
"1e3  # (等同于 1.e3 和 1.0e3)\n"
"0e0  # (等同于 0)"

#: ../../reference/lexical_analysis.rst:1274
msgid ""
"Formally, floating-point literals are described by the following lexical "
"definitions:"
msgstr "形式上，浮点字面量由以下词法定义描述："

#: ../../reference/lexical_analysis.rst:1296
msgid "Imaginary literals"
msgstr "虚数字面量"

#: ../../reference/lexical_analysis.rst:1298
msgid ""
"Python has :ref:`complex number <typesnumeric>` objects, but no complex "
"literals. Instead, *imaginary literals* denote complex numbers with a zero "
"real part."
msgstr ""
"Python 拥有 :ref:`复数 <typesnumeric>` 对象，但没有直接的复数字面量。相反，*虚数字面量* 表示实部为零的复数。"

#: ../../reference/lexical_analysis.rst:1303
msgid ""
"For example, in math, the complex number 3+4.2\\ *i* is written as the real "
"number 3 added to the imaginary number 4.2\\ *i*. Python uses a similar "
"syntax, except the imaginary unit is written as ``j`` rather than *i*::"
msgstr ""
"例如，在数学中，复数 3+4.2\\ *i* 被写作实数 3 加上虚数 4.2\\ *i*。Python 使用类似的语法，只是虚数单位写作 ``j`` "
"而非 *i*::"

#: ../../reference/lexical_analysis.rst:1308
msgid "3+4.2j"
msgstr "3+4.2j"

#: ../../reference/lexical_analysis.rst:1310
msgid ""
"This is an expression composed of the :ref:`integer literal <integers>` "
"``3``, the :ref:`operator <operators>` '``+``', and the :ref:`imaginary "
"literal <imaginary>` ``4.2j``. Since these are three separate tokens, "
"whitespace is allowed between them::"
msgstr ""
"这是一个由 :ref:`整数字面量 <integers>` ``3``、 :ref:`运算符 <operators>` '``+``' 和 "
":ref:`虚数字面量 <imaginary>` ``4.2j`` 组成的表达式。由于这是三个独立的词法单元，它们之间允许存在空白符::"

#: ../../reference/lexical_analysis.rst:1316
msgid "3 + 4.2j"
msgstr "3 + 4.2j"

#: ../../reference/lexical_analysis.rst:1318
msgid ""
"No whitespace is allowed *within* each token. In particular, the ``j`` "
"suffix, may not be separated from the number before it."
msgstr "每个词法单元内部不允许有空白符。特别地，``j`` 后缀不能与其前面的数字分隔开。"

#: ../../reference/lexical_analysis.rst:1322
msgid ""
"The number before the ``j`` has the same syntax as a floating-point literal."
" Thus, the following are valid imaginary literals::"
msgstr "``j`` 前面的数字部分与浮点字面量的语法规则相同。因此，以下是有效的虚数字面量："

#: ../../reference/lexical_analysis.rst:1325
msgid ""
"4.2j\n"
"3.14j\n"
"10.j\n"
".001j\n"
"1e100j\n"
"3.14e-10j\n"
"3.14_15_93j"
msgstr ""
"4.2j\n"
"3.14j\n"
"10.j\n"
".001j\n"
"1e100j\n"
"3.14e-10j\n"
"3.14_15_93j"

#: ../../reference/lexical_analysis.rst:1333
msgid ""
"Unlike in a floating-point literal the decimal point can be omitted if the "
"imaginary number only has an integer part. The number is still evaluated as "
"a floating-point number, not an integer::"
msgstr "与浮点字面量不同，如果虚数部分仅包含整数部分，则小数点可以省略。该数值仍会被计算为浮点数，而非整数::"

#: ../../reference/lexical_analysis.rst:1337
msgid ""
"10j\n"
"0j\n"
"1000000000000000000000000j   # equivalent to 1e+24j"
msgstr ""
"10j\n"
"0j\n"
"1000000000000000000000000j   # 等同于 1e+24j"

#: ../../reference/lexical_analysis.rst:1341
msgid ""
"The ``j`` suffix is case-insensitive. That means you can use ``J`` instead::"
msgstr "``j`` 后缀在语法上是大小写不敏感的。这意味着你可以使用 ``J`` 替代::"

#: ../../reference/lexical_analysis.rst:1344
msgid "3.14J   # equivalent to 3.14j"
msgstr "3.14J   # 等同于 3.14j"

#: ../../reference/lexical_analysis.rst:1346
msgid ""
"Formally, imaginary literals are described by the following lexical "
"definition:"
msgstr "形式上，虚数字面量由以下词法定义描述："

#: ../../reference/lexical_analysis.rst:1357
msgid "Operators"
msgstr "运算符"

#: ../../reference/lexical_analysis.rst:1361
msgid "The following tokens are operators:"
msgstr "运算符如下所示："

#: ../../reference/lexical_analysis.rst:1363
msgid ""
"+       -       *       **      /       //      %      @\n"
"<<      >>      &       |       ^       ~       :=\n"
"<       >       <=      >=      ==      !="
msgstr ""
"+       -       *       **      /       //      %      @\n"
"<<      >>      &       |       ^       ~       :=\n"
"<       >       <=      >=      ==      !="

#: ../../reference/lexical_analysis.rst:1374
msgid "Delimiters"
msgstr "分隔符"

#: ../../reference/lexical_analysis.rst:1378
msgid "The following tokens serve as delimiters in the grammar:"
msgstr "以下标记在语法中为分隔符："

#: ../../reference/lexical_analysis.rst:1380
msgid ""
"(       )       [       ]       {       }\n"
",       :       !       .       ;       @       ="
msgstr ""
"(       )       [       ]       {       }\n"
",       :       !       .       ;       @       ="

#: ../../reference/lexical_analysis.rst:1385
msgid "The period can also occur in floating-point and imaginary literals."
msgstr "句号也可以出现在浮点数和虚数字面量中。"

#: ../../reference/lexical_analysis.rst:1389
msgid ""
"A sequence of three periods has a special meaning as an :py:data:`Ellipsis` "
"literal:"
msgstr "三个句号的序列作为 :py:data:`Ellipsis` 字面量具有特殊意义："

#: ../../reference/lexical_analysis.rst:1392
msgid "..."
msgstr "..."

#: ../../reference/lexical_analysis.rst:1396
msgid ""
"The following *augmented assignment operators* serve lexically as "
"delimiters, but also perform an operation:"
msgstr "以下 *增强赋值运算符* 在词法上作为分隔符，但也执行操作："

#: ../../reference/lexical_analysis.rst:1399
msgid ""
"->      +=      -=      *=      /=      //=     %=\n"
"@=      &=      |=      ^=      >>=     <<=     **="
msgstr ""
"->      +=      -=      *=      /=      //=     %=\n"
"@=      &=      |=      ^=      >>=     <<=     **="

#: ../../reference/lexical_analysis.rst:1404
msgid ""
"The following printing ASCII characters have special meaning as part of "
"other tokens or are otherwise significant to the lexical analyzer:"
msgstr "以下 ASCII 字符具有特殊含义，对词法分析器有重要意义："

#: ../../reference/lexical_analysis.rst:1407
msgid "'       \"       #       \\"
msgstr "'       \"       #       \\"

#: ../../reference/lexical_analysis.rst:1411
msgid ""
"The following printing ASCII characters are not used in Python.  Their "
"occurrence outside string literals and comments is an unconditional error:"
msgstr "以下 ASCII 字符不用于 Python。在字符串字面量或注释外使用时，将直接报错："

#: ../../reference/lexical_analysis.rst:1414
msgid "$       ?       `"
msgstr "$       ?       `"

#: ../../reference/lexical_analysis.rst:8
msgid "lexical analysis"
msgstr "词法分析"

#: ../../reference/lexical_analysis.rst:8
msgid "parser"
msgstr "解析器"

#: ../../reference/lexical_analysis.rst:8
msgid "token"
msgstr "token--标记"

#: ../../reference/lexical_analysis.rst:26
msgid "line structure"
msgstr "行结构"

#: ../../reference/lexical_analysis.rst:36
msgid "logical line"
msgstr "逻辑行"

#: ../../reference/lexical_analysis.rst:36
#: ../../reference/lexical_analysis.rst:139
#: ../../reference/lexical_analysis.rst:644
msgid "physical line"
msgstr "物理行"

#: ../../reference/lexical_analysis.rst:36
#: ../../reference/lexical_analysis.rst:139
msgid "line joining"
msgstr "行连接"

#: ../../reference/lexical_analysis.rst:36
msgid "NEWLINE token"
msgstr "NEWLINE 标记"

#: ../../reference/lexical_analysis.rst:82
msgid "comment"
msgstr "注释"

#: ../../reference/lexical_analysis.rst:82
msgid "hash character"
msgstr "hash 字符"

#: ../../reference/lexical_analysis.rst:82
#: ../../reference/lexical_analysis.rst:96
msgid "# (hash)"
msgstr "# (hash)"

#: ../../reference/lexical_analysis.rst:96
msgid "source character set"
msgstr "源字符集合"

#: ../../reference/lexical_analysis.rst:96
msgid "encoding declarations (source file)"
msgstr "编码格式声明（源文件）"

#: ../../reference/lexical_analysis.rst:96
msgid "source encoding declaration"
msgstr "源文件编码格式声明"

#: ../../reference/lexical_analysis.rst:139
msgid "line continuation"
msgstr "行连续"

#: ../../reference/lexical_analysis.rst:139
msgid "backslash character"
msgstr "反斜杠字符"

#: ../../reference/lexical_analysis.rst:184
msgid "blank line"
msgstr "空行"

#: ../../reference/lexical_analysis.rst:200
msgid "indentation"
msgstr "缩进"

#: ../../reference/lexical_analysis.rst:200
msgid "leading whitespace"
msgstr "开头空格"

#: ../../reference/lexical_analysis.rst:200
msgid "space"
msgstr "space"

#: ../../reference/lexical_analysis.rst:200
msgid "tab"
msgstr "tab"

#: ../../reference/lexical_analysis.rst:200
msgid "grouping"
msgstr "分组"

#: ../../reference/lexical_analysis.rst:200
msgid "statement grouping"
msgstr "语句分组"

#: ../../reference/lexical_analysis.rst:228
msgid "INDENT token"
msgstr "INDENT 标记"

#: ../../reference/lexical_analysis.rst:228
msgid "DEDENT token"
msgstr "DEDENT 标记"

#: ../../reference/lexical_analysis.rst:318
msgid "identifier"
msgstr "标识符"

#: ../../reference/lexical_analysis.rst:318
msgid "name"
msgstr "名称"

#: ../../reference/lexical_analysis.rst:397
#: ../../reference/lexical_analysis.rst:421
msgid "keyword"
msgstr "关键字"

#: ../../reference/lexical_analysis.rst:397
msgid "reserved word"
msgstr "保留字"

#: ../../reference/lexical_analysis.rst:421
msgid "soft keyword"
msgstr "软关键字"

#: ../../reference/lexical_analysis.rst:441
msgid "_, identifiers"
msgstr "_, 标识符"

#: ../../reference/lexical_analysis.rst:441
msgid "__, identifiers"
msgstr "__, 标识符"

#: ../../reference/lexical_analysis.rst:497
msgid "literal"
msgstr "字面量"

#: ../../reference/lexical_analysis.rst:497
msgid "constant"
msgstr "常量"

#: ../../reference/lexical_analysis.rst:509
#: ../../reference/lexical_analysis.rst:552
#: ../../reference/lexical_analysis.rst:577
msgid "string literal"
msgstr "字符串字面量"

#: ../../reference/lexical_analysis.rst:509
#: ../../reference/lexical_analysis.rst:845
msgid "bytes literal"
msgstr "字节串字面量"

#: ../../reference/lexical_analysis.rst:509
msgid "ASCII"
msgstr "ASCII"

#: ../../reference/lexical_analysis.rst:509
msgid "' (single quote)"
msgstr "' (单引号)"

#: ../../reference/lexical_analysis.rst:509
msgid "\" (double quote)"
msgstr "\" (双引号)"

#: ../../reference/lexical_analysis.rst:552
msgid "triple-quoted string"
msgstr "triple-quoted string -- 三引号字符串"

#: ../../reference/lexical_analysis.rst:552
msgid "\"\"\""
msgstr "\"\"\""

#: ../../reference/lexical_analysis.rst:552
msgid "'''"
msgstr "'''"

#: ../../reference/lexical_analysis.rst:577
msgid "u'"
msgstr "u'"

#: ../../reference/lexical_analysis.rst:577
msgid "u\""
msgstr "u\""

#: ../../reference/lexical_analysis.rst:644
msgid "escape sequence"
msgstr "转义序列"

#: ../../reference/lexical_analysis.rst:644
msgid "Standard C"
msgstr "标准 C"

#: ../../reference/lexical_analysis.rst:644
msgid "C"
msgstr "C"

#: ../../reference/lexical_analysis.rst:644
msgid "\\ (backslash)"
msgstr "\\ (反斜杠)"

#: ../../reference/lexical_analysis.rst:644
msgid "\\\\"
msgstr "\\\\"

#: ../../reference/lexical_analysis.rst:644
msgid "\\a"
msgstr "\\a"

#: ../../reference/lexical_analysis.rst:644
msgid "\\b"
msgstr "\\b"

#: ../../reference/lexical_analysis.rst:644
msgid "\\f"
msgstr "\\f"

#: ../../reference/lexical_analysis.rst:644
msgid "\\n"
msgstr "\\n"

#: ../../reference/lexical_analysis.rst:644
msgid "\\r"
msgstr "\\r"

#: ../../reference/lexical_analysis.rst:644
msgid "\\t"
msgstr "\\t"

#: ../../reference/lexical_analysis.rst:644
msgid "\\v"
msgstr "\\v"

#: ../../reference/lexical_analysis.rst:644
msgid "\\x"
msgstr "\\x"

#: ../../reference/lexical_analysis.rst:644
msgid "\\u"
msgstr "\\u"

#: ../../reference/lexical_analysis.rst:644
msgid "\\U"
msgstr "\\U"

#: ../../reference/lexical_analysis.rst:820
msgid "unrecognized escape sequence"
msgstr "未识别的转义序列"

#: ../../reference/lexical_analysis.rst:845
msgid "b'"
msgstr "b'"

#: ../../reference/lexical_analysis.rst:845
msgid "b\""
msgstr "b\""

#: ../../reference/lexical_analysis.rst:872
msgid "r'"
msgstr "r'"

#: ../../reference/lexical_analysis.rst:872
msgid "raw string literal"
msgstr "原始字符串字面量"

#: ../../reference/lexical_analysis.rst:872
msgid "r\""
msgstr "r\""

#: ../../reference/lexical_analysis.rst:903
msgid "formatted string literal"
msgstr "格式字符串字面量"

#: ../../reference/lexical_analysis.rst:903
msgid "interpolated string literal"
msgstr "插值字符串字面量"

#: ../../reference/lexical_analysis.rst:903
msgid "string"
msgstr "string--字符串"

#: ../../reference/lexical_analysis.rst:903
msgid "formatted literal"
msgstr "格式化字面量"

#: ../../reference/lexical_analysis.rst:903
msgid "interpolated literal"
msgstr "插值字面量"

#: ../../reference/lexical_analysis.rst:903
msgid "f-string"
msgstr "f-string -- f-字符串"

#: ../../reference/lexical_analysis.rst:903
msgid "fstring"
msgstr "fstring"

#: ../../reference/lexical_analysis.rst:903
msgid "f'"
msgstr "f'"

#: ../../reference/lexical_analysis.rst:903
msgid "f\""
msgstr "f\""

#: ../../reference/lexical_analysis.rst:903
msgid "{} (curly brackets)"
msgstr "{} (花括号)"

#: ../../reference/lexical_analysis.rst:903
msgid "in formatted string literal"
msgstr "格式字符串字面量形式"

#: ../../reference/lexical_analysis.rst:903
msgid "! (exclamation)"
msgstr "! (感叹号)"

#: ../../reference/lexical_analysis.rst:903
msgid ": (colon)"
msgstr ": (冒号)"

#: ../../reference/lexical_analysis.rst:903
msgid "= (equals)"
msgstr "= (等于号)"

#: ../../reference/lexical_analysis.rst:903
msgid "for help in debugging using string literals"
msgstr "用于帮助使用字符串字面量进行调试"

#: ../../reference/lexical_analysis.rst:1130
msgid "number"
msgstr "数字"

#: ../../reference/lexical_analysis.rst:1130
msgid "numeric literal"
msgstr "数字字面量"

#: ../../reference/lexical_analysis.rst:1130
#: ../../reference/lexical_analysis.rst:1152
msgid "integer literal"
msgstr "整数字面量"

#: ../../reference/lexical_analysis.rst:1130
msgid "floating-point literal"
msgstr "浮点数字面量"

#: ../../reference/lexical_analysis.rst:1130
msgid "hexadecimal literal"
msgstr "十六进制数字面量"

#: ../../reference/lexical_analysis.rst:1130
msgid "octal literal"
msgstr "八进制数字面量"

#: ../../reference/lexical_analysis.rst:1130
msgid "binary literal"
msgstr "二进制数字面量"

#: ../../reference/lexical_analysis.rst:1130
msgid "decimal literal"
msgstr "十进制数字面量"

#: ../../reference/lexical_analysis.rst:1130
msgid "imaginary literal"
msgstr "虚数字面量"

#: ../../reference/lexical_analysis.rst:1130
msgid "complex literal"
msgstr "复数字面量"

#: ../../reference/lexical_analysis.rst:1152
msgid "0b"
msgstr "0b"

#: ../../reference/lexical_analysis.rst:1152
msgid "0o"
msgstr "0o"

#: ../../reference/lexical_analysis.rst:1152
msgid "0x"
msgstr "0x"

#: ../../reference/lexical_analysis.rst:1152
#: ../../reference/lexical_analysis.rst:1227
msgid "_ (underscore)"
msgstr "_ (下划线)"

#: ../../reference/lexical_analysis.rst:1152
#: ../../reference/lexical_analysis.rst:1227
#: ../../reference/lexical_analysis.rst:1291
msgid "in numeric literal"
msgstr "数字字面量形式"

#: ../../reference/lexical_analysis.rst:1227
msgid ". (dot)"
msgstr ". (点号)"

#: ../../reference/lexical_analysis.rst:1227
msgid "e"
msgstr "e"

#: ../../reference/lexical_analysis.rst:1291
msgid "j"
msgstr "j"

#: ../../reference/lexical_analysis.rst:1359
msgid "operators"
msgstr "运算符"

#: ../../reference/lexical_analysis.rst:1376
msgid "delimiters"
msgstr "分隔符"
