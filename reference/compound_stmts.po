# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/compound_stmts.rst:5
msgid "Compound statements"
msgstr "复合语句"

#: ../../reference/compound_stmts.rst:9
msgid ""
"Compound statements contain (groups of) other statements; they affect or "
"control the execution of those other statements in some way.  In general, "
"compound statements span multiple lines, although in simple incarnations a "
"whole compound statement may be contained in one line."
msgstr ""
"复合语句是包含其它语句（语句组）的语句；它们会以某种方式影响或控制所包含其它语句的执行。 "
"通常，复合语句会跨越多行，虽然在某些简单形式下整个复合语句也可能包含于一行之内。"

#: ../../reference/compound_stmts.rst:14
msgid ""
"The :keyword:`if`, :keyword:`while` and :keyword:`for` statements implement "
"traditional control flow constructs.  :keyword:`try` specifies exception "
"handlers and/or cleanup code for a group of statements, while the "
":keyword:`with` statement allows the execution of initialization and "
"finalization code around a block of code.  Function and class definitions "
"are also syntactically compound statements."
msgstr ""
":keyword:`if`, :keyword:`while` 和 :keyword:`for` 语句用来实现传统的控制流程构造。 "
":keyword:`try` 语句为一组语句指定异常处理和/和清理代码，而 :keyword:`with` "
"语句允许在一个代码块周围执行初始化和终结化代码。 函数和类定义在语法上也属于复合语句。"

#: ../../reference/compound_stmts.rst:26
msgid ""
"A compound statement consists of one or more 'clauses.'  A clause consists "
"of a header and a 'suite.'  The clause headers of a particular compound "
"statement are all at the same indentation level. Each clause header begins "
"with a uniquely identifying keyword and ends with a colon.  A suite is a "
"group of statements controlled by a clause.  A suite can be one or more "
"semicolon-separated simple statements on the same line as the header, "
"following the header's colon, or it can be one or more indented statements "
"on subsequent lines.  Only the latter form of a suite can contain nested "
"compound statements; the following is illegal, mostly because it wouldn't be"
" clear to which :keyword:`if` clause a following :keyword:`else` clause "
"would belong::"
msgstr ""
"一条复合语句由一个或多个‘子句’组成。 一个子句则包含一个句头和一个‘句体’。 特定复合语句的子句头都处于相同的缩进层级。 "
"每个子句头以一个作为唯一标识的关键字开始并以一个冒号结束。 子句体是由一个子句控制的一组语句。 "
"子句体可以是在子句头的冒号之后与其同处一行的一条或由分号分隔的多条简单语句，或者也可以是在其之后缩进的一行或多行语句。 "
"只有后一种形式的子句体才能包含嵌套的复合语句；以下形式是不合法的，这主要是因为无法分清某个后续的 :keyword:`else` 子句应该属于哪个 "
":keyword:`if` 子句::"

#: ../../reference/compound_stmts.rst:39
msgid ""
"Also note that the semicolon binds tighter than the colon in this context, "
"so that in the following example, either all or none of the :func:`print` "
"calls are executed::"
msgstr "还要注意的是在这种情形下分号的绑定比冒号更紧密，因此在以下示例中，所有 :func:`print` 调用或者都不执行，或者都执行::"

#: ../../reference/compound_stmts.rst:45
msgid "Summarizing:"
msgstr "总结:"

#: ../../reference/compound_stmts.rst:69
msgid ""
"Note that statements always end in a ``NEWLINE`` possibly followed by a "
"``DEDENT``.  Also note that optional continuation clauses always begin with "
"a keyword that cannot start a statement, thus there are no ambiguities (the "
"'dangling :keyword:`else`' problem is solved in Python by requiring nested "
":keyword:`if` statements to be indented)."
msgstr ""
"请注意语句总是以 ``NEWLINE`` 结束，之后可能跟随一个 ``DEDENT``。 "
"还要注意可选的后续子句总是以一个不能作为语句开头的关键字作为开头，因此不会产生歧义（‘悬空的 :keyword:`else`’问题在 Python "
"中是通过要求嵌套的 :keyword:`if` 语句必须缩进来解决的)。"

#: ../../reference/compound_stmts.rst:75
msgid ""
"The formatting of the grammar rules in the following sections places each "
"clause on a separate line for clarity."
msgstr "为了保证清晰，以下各节中语法规则采用将每个子句都放在单独行中的格式。"

#: ../../reference/compound_stmts.rst:84
msgid "The :keyword:`!if` statement"
msgstr ":keyword:`!if` 语句"

#: ../../reference/compound_stmts.rst:92
msgid "The :keyword:`if` statement is used for conditional execution:"
msgstr ":keyword:`if` 语句用于有条件的执行:"

#: ../../reference/compound_stmts.rst:99
msgid ""
"It selects exactly one of the suites by evaluating the expressions one by "
"one until one is found to be true (see section :ref:`booleans` for the "
"definition of true and false); then that suite is executed (and no other "
"part of the :keyword:`if` statement is executed or evaluated).  If all "
"expressions are false, the suite of the :keyword:`else` clause, if present, "
"is executed."
msgstr ""
"它通过对表达式逐个求值直至找到一个真值（请参阅 :ref:`booleans` "
"了解真值与假值的定义）在子句体中选择唯一匹配的一个；然后执行该子句体（而且 :keyword:`if` 语句的其他部分不会被执行或求值）。 "
"如果所有表达式均为假值，则如果 :keyword:`else` 子句体如果存在就会被执行。"

#: ../../reference/compound_stmts.rst:109
msgid "The :keyword:`!while` statement"
msgstr ":keyword:`!while` 语句"

#: ../../reference/compound_stmts.rst:117
msgid ""
"The :keyword:`while` statement is used for repeated execution as long as an "
"expression is true:"
msgstr ":keyword:`while` 语句用于在表达式保持为真的情况下重复地执行:"

#: ../../reference/compound_stmts.rst:124
msgid ""
"This repeatedly tests the expression and, if it is true, executes the first "
"suite; if the expression is false (which may be the first time it is tested)"
" the suite of the :keyword:`!else` clause, if present, is executed and the "
"loop terminates."
msgstr ""
"这将重复地检验表达式，并且如果其值为真就执行第一个子句体；如果表达式值为假（这可能在第一次检验时就发生）则如果 :keyword:`!else` "
"子句体存在就会被执行并终止循环。"

#: ../../reference/compound_stmts.rst:133
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop"
" without executing the :keyword:`!else` clause's suite.  A "
":keyword:`continue` statement executed in the first suite skips the rest of "
"the suite and goes back to testing the expression."
msgstr ""
"第一个子句体中的 :keyword:`break` 语句在执行时将终止循环且不执行 :keyword:`!else` 子句体。 第一个子句体中的 "
":keyword:`continue` 语句在执行时将跳过子句体中的剩余部分并返回检验表达式。"

#: ../../reference/compound_stmts.rst:142
msgid "The :keyword:`!for` statement"
msgstr ":keyword:`!for` 语句"

#: ../../reference/compound_stmts.rst:153
msgid ""
"The :keyword:`for` statement is used to iterate over the elements of a "
"sequence (such as a string, tuple or list) or other iterable object:"
msgstr ":keyword:`for` 语句用于对序列（例如字符串、元组或列表）或其他可迭代对象中的元素进行迭代:"

#: ../../reference/compound_stmts.rst:160
msgid ""
"The expression list is evaluated once; it should yield an iterable object.  "
"An iterator is created for the result of the ``expression_list``.  The suite"
" is then executed once for each item provided by the iterator, in the order "
"returned by the iterator.  Each item in turn is assigned to the target list "
"using the standard rules for assignments (see :ref:`assignment`), and then "
"the suite is executed.  When the items are exhausted (which is immediately "
"when the sequence is empty or an iterator raises a :exc:`StopIteration` "
"exception), the suite in the :keyword:`!else` clause, if present, is "
"executed, and the loop terminates."
msgstr ""
"表达式列表会被求值一次；它应该产生一个可迭代对象。 系统将为 ``expression_list`` "
"的结果创建一个迭代器，然后将为迭代器所提供的每一项执行一次子句体，具体次序与迭代器的返回顺序一致。 每一项会按标准赋值规则 (参见 "
":ref:`assignment`) 被依次赋值给目标列表，然后子句体将被执行。 当所有项被耗尽时 (这会在序列为空或迭代器引发 "
":exc:`StopIteration` 异常时立刻发生)，:keyword:`!else` 子句的子句体如果存在将会被执行，并终止循环。"

#: ../../reference/compound_stmts.rst:173
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop"
" without executing the :keyword:`!else` clause's suite.  A "
":keyword:`continue` statement executed in the first suite skips the rest of "
"the suite and continues with the next item, or with the :keyword:`!else` "
"clause if there is no next item."
msgstr ""
"第一个子句体中的 :keyword:`break` 语句在执行时将终止循环且不执行 :keyword:`!else` 子句体。 第一个子句体中的 "
":keyword:`continue` 语句在执行时将跳过子句体中的剩余部分并转往下一项继续执行，或者在没有下一项时转往 "
":keyword:`!else` 子句执行。"

#: ../../reference/compound_stmts.rst:179
msgid ""
"The for-loop makes assignments to the variables in the target list. This "
"overwrites all previous assignments to those variables including those made "
"in the suite of the for-loop::"
msgstr "for 循环会对目标列表中的变量进行赋值。 这将覆盖之前对这些变量的所有赋值，包括在 for 循环体中的赋值::"

#: ../../reference/compound_stmts.rst:193
msgid ""
"Names in the target list are not deleted when the loop is finished, but if "
"the sequence is empty, they will not have been assigned to at all by the "
"loop.  Hint: the built-in type :func:`range` represents immutable arithmetic"
" sequences of integers. For instance, iterating ``range(3)`` successively "
"yields 0, 1, and then 2."
msgstr ""
"目标列表中的名称在循环结束时不会被删除，但是如果序列为空，则它们将根本不会被循环所赋值。 提示：内置类型 :func:`range` "
"代表由整数组成的不可变算数序列。 例如，迭代 ``range(3)`` 将依次产生 0, 1 和 2。"

#: ../../reference/compound_stmts.rst:204
msgid "The :keyword:`!try` statement"
msgstr ":keyword:`!try` 语句"

#: ../../reference/compound_stmts.rst:214
msgid ""
"The :keyword:`try` statement specifies exception handlers and/or cleanup "
"code for a group of statements:"
msgstr ":keyword:`try` 语句可为一组语句指定异常处理器和/或清理代码:"

#: ../../reference/compound_stmts.rst:227
msgid ""
"The :keyword:`except` clause(s) specify one or more exception handlers. When"
" no exception occurs in the :keyword:`try` clause, no exception handler is "
"executed. When an exception occurs in the :keyword:`!try` suite, a search "
"for an exception handler is started.  This search inspects the except "
"clauses in turn until one is found that matches the exception.  An "
"expression-less except clause, if present, must be last; it matches any "
"exception.  For an except clause with an expression, that expression is "
"evaluated, and the clause matches the exception if the resulting object is "
"\"compatible\" with the exception.  An object is compatible with an "
"exception if the object is the class or a :term:`non-virtual base class "
"<abstract base class>` of the exception object, or a tuple containing an "
"item that is the class or a non-virtual base class of the exception object."
msgstr ""
":keyword:`except` 子句指定一个或多个异常处理程序。 当 :keyword:`try` "
"子句中无异常发生时，也不会有任何异常处理程序被执行。 当 :keyword:`!try` 子句中发生异常时，将启动对异常处理程序的搜索。 "
"此搜索会逐一检查 except 子句直至找到与该异常相匹配的子句。 如果存在无表达式的 except 子句，它必须是最后一个；它将匹配任何异常。 "
"对于带有表达式的 except 子句，该表达式会被未付，如果结果对象与发生的异常“兼容”，则该子句将匹配当前异常。 如果一个对象是异常对象所属的类或是其"
" :term:`非虚基类 <abstract base class>`，或者是包含异常对象的类的非虚基类的元组，则此对象与异常是兼容的。"

#: ../../reference/compound_stmts.rst:240
msgid ""
"If no except clause matches the exception, the search for an exception "
"handler continues in the surrounding code and on the invocation stack.  [#]_"
msgstr "如果没有 except 子句与异常相匹配，则会在周边代码和发起调用栈上继续搜索异常处理器。 [#]_"

#: ../../reference/compound_stmts.rst:243
msgid ""
"If the evaluation of an expression in the header of an except clause raises "
"an exception, the original search for a handler is canceled and a search "
"starts for the new exception in the surrounding code and on the call stack "
"(it is treated as if the entire :keyword:`try` statement raised the "
"exception)."
msgstr ""
"如果在对 except 子句头中的表达式求值时引发了异常，则原来对处理器的搜索会被取消，并在周边代码和调用栈上启动对新异常的搜索（它会被视作是整个 "
":keyword:`try` 语句所引发的异常）。"

#: ../../reference/compound_stmts.rst:250
msgid ""
"When a matching except clause is found, the exception is assigned to the "
"target specified after the :keyword:`!as` keyword in that except clause, if "
"present, and the except clause's suite is executed.  All except clauses must"
" have an executable block.  When the end of this block is reached, execution"
" continues normally after the entire try statement.  (This means that if two"
" nested handlers exist for the same exception, and the exception occurs in "
"the try clause of the inner handler, the outer handler will not handle the "
"exception.)"
msgstr ""
"当找到一个匹配的 except 子句时，该异常将被赋值给该 except 子句在 :keyword:`!as` "
"关键字之后指定的目标，如果存在此关键字的话，并且该 except 子句体将被执行。 所有 except 子句都必须有可执行的子句体。 "
"当到达子句体的末尾时，通常会转向整个 try 语句之后继续执行。 （这意味着如果对于同一异常存在有嵌套的两个处理器，而异常发生于内层处理器的 try "
"子句中，则外层处理器将不会处理该异常。）"

#: ../../reference/compound_stmts.rst:258
msgid ""
"When an exception has been assigned using ``as target``, it is cleared at "
"the end of the except clause.  This is as if ::"
msgstr "当使用 ``as`` 将目标赋值为一个异常时，它将在 except 子句结束时被清除。 这就相当于 ::"

#: ../../reference/compound_stmts.rst:264
msgid "was translated to ::"
msgstr "被转写为 ::"

#: ../../reference/compound_stmts.rst:272
msgid ""
"This means the exception must be assigned to a different name to be able to "
"refer to it after the except clause.  Exceptions are cleared because with "
"the traceback attached to them, they form a reference cycle with the stack "
"frame, keeping all locals in that frame alive until the next garbage "
"collection occurs."
msgstr ""
"这意味着异常必须赋值给一个不同的名称才能在 except 子句之后引用它。 "
"异常会被清除是因为在附加了回溯信息的情况下，它们会形成堆栈帧的循环引用，使得所有局部变量保持存活直到发生下一次垃圾回收。"

#: ../../reference/compound_stmts.rst:281
msgid ""
"Before an except clause's suite is executed, details about the exception are"
" stored in the :mod:`sys` module and can be accessed via "
":func:`sys.exc_info`. :func:`sys.exc_info` returns a 3-tuple consisting of "
"the exception class, the exception instance and a traceback object (see "
"section :ref:`types`) identifying the point in the program where the "
"exception occurred.  The details about the exception accessed via "
":func:`sys.exc_info` are restored to their previous values when leaving an "
"exception handler::"
msgstr ""
"在一个 except 子句体被执行之前，有关异常的详细信息存放在 :mod:`sys` 模块中，可通过 :func:`sys.exc_info` "
"来访问。 :func:`sys.exc_info` 返回一个 3 元组，由异常类、异常实例和回溯对象组成（参见 :ref:`types` "
"一节），用于在程序中标识异常发生点。 当从处理异常的代码返回时，通过 :func:`sys.exc_info` 访问的异常详细信息会恢复到之前的值::"

#: ../../reference/compound_stmts.rst:313
msgid ""
"The optional :keyword:`!else` clause is executed if the control flow leaves "
"the :keyword:`try` suite, no exception was raised, and no :keyword:`return`,"
" :keyword:`continue`, or :keyword:`break` statement was executed.  "
"Exceptions in the :keyword:`!else` clause are not handled by the preceding "
":keyword:`except` clauses."
msgstr ""
"如果控制流离开 :keyword:`try` 子句体时没有引发异常，并且没有执行 :keyword:`return`, "
":keyword:`continue` 或 :keyword:`break` 语句，可选的 :keyword:`!else` 子句将被执行。  "
":keyword:`!else` 语句中的异常不会由之前的 :keyword:`except` 子句处理。"

#: ../../reference/compound_stmts.rst:321
msgid ""
"If :keyword:`finally` is present, it specifies a 'cleanup' handler.  The "
":keyword:`try` clause is executed, including any :keyword:`except` and "
":keyword:`!else` clauses.  If an exception occurs in any of the clauses and "
"is not handled, the exception is temporarily saved. The :keyword:`!finally` "
"clause is executed.  If there is a saved exception it is re-raised at the "
"end of the :keyword:`!finally` clause.  If the :keyword:`!finally` clause "
"raises another exception, the saved exception is set as the context of the "
"new exception. If the :keyword:`!finally` clause executes a "
":keyword:`return`, :keyword:`break` or :keyword:`continue` statement, the "
"saved exception is discarded::"
msgstr ""
"如果存在 :keyword:`finally`，它将指定一个‘清理’处理程序。 :keyword:`try` 子句会被执行，包括任何 "
":keyword:`except` 和 :keyword:`!else` 子句。 如果在这些子句中发生任何未处理的异常，该异常会被临时保存。 "
":keyword:`!finally` 子句将被执行。 如果存在被保存的异常，它会在 :keyword:`!finally` 子句的末尾被重新引发。 "
"如果 :keyword:`!finally` 子句引发了另一个异常，被保存的异常会被设为新异常的上下文。 如果 :keyword:`!finally` "
"子句执行了 :keyword:`return`, :keyword:`break` 或 :keyword:`continue` "
"语句，则被保存的异常会被丢弃::"

#: ../../reference/compound_stmts.rst:340
msgid ""
"The exception information is not available to the program during execution "
"of the :keyword:`finally` clause."
msgstr "在 :keyword:`finally` 子句执行期间，程序不能获取异常信息。"

#: ../../reference/compound_stmts.rst:348
msgid ""
"When a :keyword:`return`, :keyword:`break` or :keyword:`continue` statement "
"is executed in the :keyword:`try` suite of a :keyword:`!try`...\\ "
":keyword:`!finally` statement, the :keyword:`finally` clause is also "
"executed 'on the way out.'"
msgstr ""
"当 :keyword:`return`, :keyword:`break` 或 :keyword:`continue` 语句在一个 "
":keyword:`!try`...\\ :keyword:`!finally` 语句的 :keyword:`try` "
"子语句体中被执行时，:keyword:`finally` 子语句也会‘在离开时’被执行。"

#: ../../reference/compound_stmts.rst:352
msgid ""
"The return value of a function is determined by the last :keyword:`return` "
"statement executed.  Since the :keyword:`finally` clause always executes, a "
":keyword:`!return` statement executed in the :keyword:`!finally` clause will"
" always be the last one executed::"
msgstr ""
"函数的返回值是由最后被执行的 :keyword:`return` 语句所决定的。 由于 :keyword:`finally` 子句总是被执行，因此在 "
":keyword:`!finally` 子句中被执行的 :keyword:`!return` 语句总是最后被执行的::"

#: ../../reference/compound_stmts.rst:366
msgid ""
"Additional information on exceptions can be found in section "
":ref:`exceptions`, and information on using the :keyword:`raise` statement "
"to generate exceptions may be found in section :ref:`raise`."
msgstr ""
"有关异常的更多信息可以在 :ref:`exceptions` 一节找到，有关使用 :keyword:`raise` 语句生成异常的信息可以在 "
":ref:`raise` 一节找到。"

#: ../../reference/compound_stmts.rst:370
msgid ""
"Prior to Python 3.8, a :keyword:`continue` statement was illegal in the "
":keyword:`finally` clause due to a problem with the implementation."
msgstr ""
"在 Python 3.8 之前，:keyword:`continue` 语句不允许在 :keyword:`finally` "
"子句中使用，这是因为具体实现存在一个问题。"

#: ../../reference/compound_stmts.rst:379
msgid "The :keyword:`!with` statement"
msgstr ":keyword:`!with` 语句"

#: ../../reference/compound_stmts.rst:388
msgid ""
"The :keyword:`with` statement is used to wrap the execution of a block with "
"methods defined by a context manager (see section :ref:`context-managers`). "
"This allows common :keyword:`try`...\\ :keyword:`except`...\\ "
":keyword:`finally` usage patterns to be encapsulated for convenient reuse."
msgstr ""
":keyword:`with` 语句用于包装带有使用上下文管理器 (参见 :ref:`context-managers` 一节) "
"定义的方法的代码块的执行。 这允许对普通的 :keyword:`try`...\\ :keyword:`except`...\\ "
":keyword:`finally` 使用模式进行封装以方便地重用。"

#: ../../reference/compound_stmts.rst:398
msgid ""
"The execution of the :keyword:`with` statement with one \"item\" proceeds as"
" follows:"
msgstr "带有一个“项目”的 :keyword:`with` 语句的执行过程如下:"

#: ../../reference/compound_stmts.rst:400
msgid ""
"The context expression (the expression given in the :token:`~python-"
"grammar:with_item`) is evaluated to obtain a context manager."
msgstr "对上下文表达式（在 :token:`~python-grammar:with_item` 中给出的表达式）进行求值来获得上下文管理器。"

#: ../../reference/compound_stmts.rst:403
msgid "The context manager's :meth:`__enter__` is loaded for later use."
msgstr "载入上下文管理器的 :meth:`__enter__` 以便后续使用。"

#: ../../reference/compound_stmts.rst:405
msgid "The context manager's :meth:`__exit__` is loaded for later use."
msgstr "载入上下文管理器的 :meth:`__exit__` 以便后续使用。"

#: ../../reference/compound_stmts.rst:407
msgid "The context manager's :meth:`__enter__` method is invoked."
msgstr "发起调用上下文管理器的 :meth:`__enter__` 方法。"

#: ../../reference/compound_stmts.rst:409
msgid ""
"If a target was included in the :keyword:`with` statement, the return value "
"from :meth:`__enter__` is assigned to it."
msgstr "如果 :keyword:`with` 语句中包含一个目标，来自 :meth:`__enter__` 的返回值将被赋值给它。"

#: ../../reference/compound_stmts.rst:414
msgid ""
"The :keyword:`with` statement guarantees that if the :meth:`__enter__` "
"method returns without an error, then :meth:`__exit__` will always be "
"called. Thus, if an error occurs during the assignment to the target list, "
"it will be treated the same as an error occurring within the suite would be."
" See step 7 below."
msgstr ""
":keyword:`with` 语句会保证只要 :meth:`__enter__` 方法未发生错误即返回，则 :meth:`__exit__` "
"将总是被调用。 因此，如果在对目标列表赋值期间发生错误，它将被当作在语句体内部发生的错误来处理。 参见下面的第 7 步。"

#: ../../reference/compound_stmts.rst:420
msgid "The suite is executed."
msgstr "执行语句体。"

#: ../../reference/compound_stmts.rst:422
msgid ""
"The context manager's :meth:`__exit__` method is invoked.  If an exception "
"caused the suite to be exited, its type, value, and traceback are passed as "
"arguments to :meth:`__exit__`. Otherwise, three :const:`None` arguments are "
"supplied."
msgstr ""
"发起调用上下文管理器的 :meth:`__exit__` 方法。 如果语句体的退出是由异常导致的，则其类型、值和回溯信息将被作为参数传递给 "
":meth:`__exit__`。 否则的话，将提供三个 :const:`None` 参数。"

#: ../../reference/compound_stmts.rst:427
msgid ""
"If the suite was exited due to an exception, and the return value from the "
":meth:`__exit__` method was false, the exception is reraised.  If the return"
" value was true, the exception is suppressed, and execution continues with "
"the statement following the :keyword:`with` statement."
msgstr ""
"如果语句体的退出是由异常导致的，并且来自 :meth:`__exit__` 方法的返回值为假，则该异常会被重新引发。 "
"如果返回值为真，则该异常会被抑制，并会继续执行 :keyword:`with` 语句之后的语句。"

#: ../../reference/compound_stmts.rst:432
msgid ""
"If the suite was exited for any reason other than an exception, the return "
"value from :meth:`__exit__` is ignored, and execution proceeds at the normal"
" location for the kind of exit that was taken."
msgstr "如果语句体由于异常以外的任何原因退出，则来自 :meth:`__exit__` 的返回值会被忽略，并会在该类退出正常的发生位置继续执行。"

#: ../../reference/compound_stmts.rst:436
#: ../../reference/compound_stmts.rst:1427
#: ../../reference/compound_stmts.rst:1468
msgid "The following code::"
msgstr "以下代码::"

#: ../../reference/compound_stmts.rst:441
#: ../../reference/compound_stmts.rst:466
#: ../../reference/compound_stmts.rst:1473
msgid "is semantically equivalent to::"
msgstr "在语义上等价于::"

#: ../../reference/compound_stmts.rst:460
msgid ""
"With more than one item, the context managers are processed as if multiple "
":keyword:`with` statements were nested::"
msgstr "如果有多个项目，则会视作存在多个 :keyword:`with` 语句嵌套来处理多个上下文管理器::"

#: ../../reference/compound_stmts.rst:472
msgid ""
"You can also write multi-item context managers in multiple lines if the "
"items are surrounded by parentheses. For example::"
msgstr "也可以用圆括号包围的多行形式的多项目上下文管理器。例如::"

#: ../../reference/compound_stmts.rst:481
msgid "Support for multiple context expressions."
msgstr "支持多个上下文表达式。"

#: ../../reference/compound_stmts.rst:484
msgid ""
"Support for using grouping parentheses to break the statement in multiple "
"lines."
msgstr " 支持用圆括号将语句分成多行。"

#: ../../reference/compound_stmts.rst:490
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - \"with\" 语句"

#: ../../reference/compound_stmts.rst:490
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr "Python :keyword:`with` 语句的规范描述、背景和示例。"

#: ../../reference/compound_stmts.rst:496
msgid "The :keyword:`!match` statement"
msgstr ":keyword:`!match` 语句"

#: ../../reference/compound_stmts.rst:510
msgid "The match statement is used for pattern matching.  Syntax:"
msgstr "匹配语句用于进行模式匹配。语法如下："

#: ../../reference/compound_stmts.rst:519
msgid ""
"This section uses single quotes to denote :ref:`soft keywords <soft-"
"keywords>`."
msgstr "本节使用单引号来表示 :ref:`软关键字 <soft-keywords>`。"

#: ../../reference/compound_stmts.rst:522
msgid ""
"Pattern matching takes a pattern as input (following ``case``) and a subject"
" value (following ``match``).  The pattern (which may contain subpatterns) "
"is matched against the subject value.  The outcomes are:"
msgstr ""
"模式匹配接受一个模式作为输入（跟在 ``case`` 后），一个目标值（跟在 ``match`` "
"后）。该模式（可能包含子模式）将与目标值进行匹配。输出是："

#: ../../reference/compound_stmts.rst:526
msgid "A match success or failure (also termed a pattern success or failure)."
msgstr "匹配成功或失败（也被称为模式成功或失败）。"

#: ../../reference/compound_stmts.rst:528
msgid ""
"Possible binding of matched values to a name.  The prerequisites for this "
"are further discussed below."
msgstr "可能将匹配的值绑定到一个名字上。 这方面的先决条件将在下面进一步讨论。"

#: ../../reference/compound_stmts.rst:531
msgid ""
"The ``match`` and ``case`` keywords are :ref:`soft keywords <soft-"
"keywords>`."
msgstr "关键字 ``match`` 和 ``case`` 是 :ref:`soft keywords <soft-keywords>` 。"

#: ../../reference/compound_stmts.rst:535
#: ../../reference/compound_stmts.rst:1090
msgid ":pep:`634` -- Structural Pattern Matching: Specification"
msgstr ":pep:`634` —— 结构化模式匹配：规范"

#: ../../reference/compound_stmts.rst:536
#: ../../reference/compound_stmts.rst:1091
msgid ":pep:`636` -- Structural Pattern Matching: Tutorial"
msgstr ":pep:`636` —— 结构化模式匹配：教程"

#: ../../reference/compound_stmts.rst:540
msgid "Overview"
msgstr "概述"

#: ../../reference/compound_stmts.rst:542
msgid "Here's an overview of the logical flow of a match statement:"
msgstr "匹配语句逻辑流程的概述如下："

#: ../../reference/compound_stmts.rst:545
msgid ""
"The subject expression ``subject_expr`` is evaluated and a resulting subject"
" value obtained. If the subject expression contains a comma, a tuple is "
"constructed using :ref:`the standard rules <typesseq-tuple>`."
msgstr ""
"对目标表达式 ``subject_expr`` 求值后将结果作为匹配用的目标值。 如果目标表达式包含逗号，则使用 :ref:`the standard "
"rules <typesseq-tuple>` 构建一个元组。"

#: ../../reference/compound_stmts.rst:549
msgid ""
"Each pattern in a ``case_block`` is attempted to match with the subject "
"value. The specific rules for success or failure are described below. The "
"match attempt can also bind some or all of the standalone names within the "
"pattern. The precise pattern binding rules vary per pattern type and are "
"specified below.  **Name bindings made during a successful pattern match "
"outlive the executed block and can be used after the match statement**."
msgstr ""
"目标值将依次与 ``case_block`` "
"中的每个模式进行匹配。匹配成功或失败的具体规则在下面描述。匹配尝试也可以与模式中的一些或所有的独立名称绑定。准确的模式绑定规则因模式类型而异，具体规定见下文。**成功的模式匹配过程中产生的名称绑定将超越所执行的块的范围，可以在匹配语句之后使用**。"

#: ../../reference/compound_stmts.rst:558
msgid ""
"During failed pattern matches, some subpatterns may succeed.  Do not rely on"
" bindings being made for a failed match.  Conversely, do not rely on "
"variables remaining unchanged after a failed match.  The exact behavior is "
"dependent on implementation and may vary.  This is an intentional decision "
"made to allow different implementations to add optimizations."
msgstr ""
"在模式匹配失败时，一些子模式可能会成功。 不要依赖于失败匹配进行的绑定。 反过来说，不要认为变量在匹配失败后保持不变。 "
"确切的行为取决于实现，可能会有所不同。 这是一个有意的决定，允许不同的实现添加优化。"

#: ../../reference/compound_stmts.rst:565
msgid ""
"If the pattern succeeds, the corresponding guard (if present) is evaluated. "
"In this case all name bindings are guaranteed to have happened."
msgstr "如果该模式匹配成功，并且完成了对相应的约束项（如果存在）的求值。在这种情况下，保证完成所有的名称绑定。"

#: ../../reference/compound_stmts.rst:568
msgid ""
"If the guard evaluates as true or is missing, the ``block`` inside "
"``case_block`` is executed."
msgstr "如果约束项求值为真或缺失，执行 ``case_block`` 中的 ``block`` 。"

#: ../../reference/compound_stmts.rst:571
msgid "Otherwise, the next ``case_block`` is attempted as described above."
msgstr "否则，将按照上述方法尝试下一个 ``case_block`` 。"

#: ../../reference/compound_stmts.rst:573
msgid "If there are no further case blocks, the match statement is completed."
msgstr "如果没有进一步的 case 块，匹配语句终止。"

#: ../../reference/compound_stmts.rst:577
msgid ""
"Users should generally never rely on a pattern being evaluated.  Depending "
"on implementation, the interpreter may cache values or use other "
"optimizations which skip repeated evaluations."
msgstr "用户一般不应依赖正在求值的模式。 根据不同的实现方式，解释器可能会缓存数值或使用其他优化方法来避免重复求值。"

#: ../../reference/compound_stmts.rst:581
msgid "A sample match statement::"
msgstr "匹配语句示例::"

#: ../../reference/compound_stmts.rst:597
msgid ""
"In this case, ``if flag`` is a guard.  Read more about that in the next "
"section."
msgstr "在这个示例中，``if flag`` 是约束项。请阅读下一节以了解更多相关内容。"

#: ../../reference/compound_stmts.rst:600
msgid "Guards"
msgstr "约束项"

#: ../../reference/compound_stmts.rst:607
msgid ""
"A ``guard`` (which is part of the ``case``) must succeed for code inside the"
" ``case`` block to execute.  It takes the form: :keyword:`if` followed by an"
" expression."
msgstr ""
"``guard`` (它是 ``case`` 的一部分) 必须成立才能让 ``case`` 语句块中的代码被执行。 它所采用的形式为: "
":keyword:`if` 之后跟一个表达式。"

#: ../../reference/compound_stmts.rst:612
msgid "The logical flow of a ``case`` block with a ``guard`` follows:"
msgstr "拥有 ``guard`` 的 ``case`` 块的逻辑流程如下："

#: ../../reference/compound_stmts.rst:614
msgid ""
"Check that the pattern in the ``case`` block succeeded.  If the pattern "
"failed, the ``guard`` is not evaluated and the next ``case`` block is "
"checked."
msgstr ""
"检查 ``case`` 块中的模式是否匹配成功。如果该模式匹配失败，则不对 ``guard`` 进行求值，检查下一个 ``case`` 块。"

#: ../../reference/compound_stmts.rst:618
msgid "If the pattern succeeded, evaluate the ``guard``."
msgstr "如果该模式匹配成功，对 ``guard`` 求值。"

#: ../../reference/compound_stmts.rst:620
msgid ""
"If the ``guard`` condition evaluates as true, the case block is selected."
msgstr "如果 ``guard`` 求值为真，则选用该 case 块。"

#: ../../reference/compound_stmts.rst:623
msgid ""
"If the ``guard`` condition evaluates as false, the case block is not "
"selected."
msgstr "如果 ``guard`` 求值为假，则不选用该 case 块。"

#: ../../reference/compound_stmts.rst:626
msgid ""
"If the ``guard`` raises an exception during evaluation, the exception "
"bubbles up."
msgstr "如果在对 ``guard`` 求值过程中引发了异常，则异常将被抛出。"

#: ../../reference/compound_stmts.rst:629
msgid ""
"Guards are allowed to have side effects as they are expressions.  Guard "
"evaluation must proceed from the first to the last case block, one at a "
"time, skipping case blocks whose pattern(s) don't all succeed. (I.e., guard "
"evaluation must happen in order.) Guard evaluation must stop once a case "
"block is selected."
msgstr ""
"允许约束项产生副作用，因为他们是表达式。约束项求值必须从第一个 case 块到最后一个 case 块依次逐个进行，模式匹配失败的 case "
"块将被跳过。（也就是说，约束项求值必须按顺序进行。）一旦选用了一个 case 块，约束项求值必须由此终止。"

#: ../../reference/compound_stmts.rst:639
msgid "Irrefutable Case Blocks"
msgstr "必定匹配的 case 块"

#: ../../reference/compound_stmts.rst:643
msgid ""
"An irrefutable case block is a match-all case block.  A match statement may "
"have at most one irrefutable case block, and it must be last."
msgstr "必定匹配的 case 块是能匹配所有情况的 case 块。一个匹配语句最多可以有一个必定匹配的 case 块，而且必须是最后一个。"

#: ../../reference/compound_stmts.rst:646
msgid ""
"A case block is considered irrefutable if it has no guard and its pattern is"
" irrefutable.  A pattern is considered irrefutable if we can prove from its "
"syntax alone that it will always succeed.  Only the following patterns are "
"irrefutable:"
msgstr ""
"如果一个 case 块没有约束项，并且其模式是必定匹配的，那么它就被认为是必定匹配的。 "
"如果我们可以仅从语法上证明一个模式总是能匹配成功，那么这个模式就被认为是必定匹配的。 只有以下模式是必定匹配的："

#: ../../reference/compound_stmts.rst:651
msgid ":ref:`as-patterns` whose left-hand side is irrefutable"
msgstr "左侧模式是必定匹配的 :ref:`as-patterns`"

#: ../../reference/compound_stmts.rst:653
msgid ":ref:`or-patterns` containing at least one irrefutable pattern"
msgstr "包含至少一个必定匹配模式的 :ref:`or-patterns`"

#: ../../reference/compound_stmts.rst:655
msgid ":ref:`capture-patterns`"
msgstr ":ref:`capture-patterns`"

#: ../../reference/compound_stmts.rst:657
msgid ":ref:`wildcard-patterns`"
msgstr ":ref:`wildcard-patterns`"

#: ../../reference/compound_stmts.rst:659
msgid "parenthesized irrefutable patterns"
msgstr "括号内的必定匹配模式"

#: ../../reference/compound_stmts.rst:663
msgid "Patterns"
msgstr "模式"

#: ../../reference/compound_stmts.rst:670
msgid "This section uses grammar notations beyond standard EBNF:"
msgstr "本节使用了超出标准 EBNF 的语法符号。"

#: ../../reference/compound_stmts.rst:672
msgid "the notation ``SEP.RULE+`` is shorthand for ``RULE (SEP RULE)*``"
msgstr "符号 ``SEP.RULE+`` 是 ``RULE (SEP RULE)*`` 的简写"

#: ../../reference/compound_stmts.rst:674
msgid "the notation ``!RULE`` is shorthand for a negative lookahead assertion"
msgstr "符号 ``!RULE`` 是前向否定断言的简写"

#: ../../reference/compound_stmts.rst:677
msgid "The top-level syntax for ``patterns`` is:"
msgstr "``patterns`` 的顶层语法是："

#: ../../reference/compound_stmts.rst:691
msgid ""
"The descriptions below will include a description \"in simple terms\" of "
"what a pattern does for illustration purposes (credits to Raymond Hettinger "
"for a document that inspired most of the descriptions). Note that these "
"descriptions are purely for illustration purposes and **may not** reflect "
"the underlying implementation.  Furthermore, they do not cover all valid "
"forms."
msgstr ""
"下面的描述将包括一个“简而言之”以描述模式的作用，便于说明问题（感谢 Raymond Hettinger "
"提供的一份文件，大部分的描述受其启发）。请注意，这些描述纯粹是为了说明问题，**可能不** 反映底层的实现。此外，它们并没有涵盖所有有效的形式。"

#: ../../reference/compound_stmts.rst:701
msgid "OR Patterns"
msgstr "或模式"

#: ../../reference/compound_stmts.rst:703
msgid ""
"An OR pattern is two or more patterns separated by vertical bars ``|``.  "
"Syntax:"
msgstr "或模式是由竖杠 ``|`` 分隔的两个或更多的模式。语法："

#: ../../reference/compound_stmts.rst:709
msgid ""
"Only the final subpattern may be :ref:`irrefutable <irrefutable_case>`, and "
"each subpattern must bind the same set of names to avoid ambiguity."
msgstr "只有最后的子模式可以是 :ref:`必定匹配的 <irrefutable_case>`，且每个子模式必须绑定相同的名字集以避免歧义。"

#: ../../reference/compound_stmts.rst:712
msgid ""
"An OR pattern matches each of its subpatterns in turn to the subject value, "
"until one succeeds.  The OR pattern is then considered successful.  "
"Otherwise, if none of the subpatterns succeed, the OR pattern fails."
msgstr ""
"或模式将目标值依次与其每个子模式尝试匹配，直到有一个匹配成功，然后该或模式被视作匹配成功。 否则，如果没有任何子模式匹配成功，则或模式匹配失败。"

#: ../../reference/compound_stmts.rst:716
msgid ""
"In simple terms, ``P1 | P2 | ...`` will try to match ``P1``, if it fails it "
"will try to match ``P2``, succeeding immediately if any succeeds, failing "
"otherwise."
msgstr ""
"简而言之，``P1 | P2 | ...`` 会首先尝试匹配 ``P1`` ，如果失败将接着尝试匹配 ``P2`` "
"，如果出现成功的匹配则立即结束且模式匹配成功，否则模式匹配失败。"

#: ../../reference/compound_stmts.rst:722
msgid "AS Patterns"
msgstr "AS 模式"

#: ../../reference/compound_stmts.rst:724
msgid ""
"An AS pattern matches an OR pattern on the left of the :keyword:`as` keyword"
" against a subject.  Syntax:"
msgstr "AS 模式将关键字 :keyword:`as` 左侧的或模式与目标值进行匹配。语法："

#: ../../reference/compound_stmts.rst:730
msgid ""
"If the OR pattern fails, the AS pattern fails.  Otherwise, the AS pattern "
"binds the subject to the name on the right of the as keyword and succeeds. "
"``capture_pattern`` cannot be a ``_``."
msgstr ""
"如果 OR 模式匹配失败，则 AS 模式也会失败。 在其他情况下，AS 模块会将目标与 as 关键字右边的名称绑定并匹配成功。 "
"``capture_pattern`` 不可为 ``_``。"

#: ../../reference/compound_stmts.rst:734
msgid ""
"In simple terms ``P as NAME`` will match with ``P``, and on success it will "
"set ``NAME = <subject>``."
msgstr "简而言之， ``P as NAME`` 将与 ``P`` 匹配，成功后将设置 ``NAME = <subject>`` 。"

#: ../../reference/compound_stmts.rst:741
msgid "Literal Patterns"
msgstr "字面值模式"

#: ../../reference/compound_stmts.rst:743
msgid ""
"A literal pattern corresponds to most :ref:`literals <literals>` in Python."
"  Syntax:"
msgstr "字面值模式对应 Python 中的大多数 :ref:`字面值 <literals>`。 语法为:"

#: ../../reference/compound_stmts.rst:756
msgid ""
"The rule ``strings`` and the token ``NUMBER`` are defined in the "
":doc:`standard Python grammar <./grammar>`.  Triple-quoted strings are "
"supported.  Raw strings and byte strings are supported.  :ref:`f-strings` "
"are not supported."
msgstr ""
"规则 ``strings`` 和标记 ``NUMBER`` 是在 :doc:`standard Python grammar <./grammar>` "
"中定义的。支持三引号的字符串。不支持原始字符串和字节字符串。也不支持 :ref:`f-strings` 。"

#: ../../reference/compound_stmts.rst:761
msgid ""
"The forms ``signed_number '+' NUMBER`` and ``signed_number '-' NUMBER`` are "
"for expressing :ref:`complex numbers <imaginary>`; they require a real "
"number on the left and an imaginary number on the right. E.g. ``3 + 4j``."
msgstr ""
"``signed_number '+' NUMBER`` 和 ``signed_number '-' NUMBER`` 形式是用于表示 :ref:`复数"
" <imaginary>`；它们要求左边是一个实数而右边是一个虚数。 例如 ``3 + 4j``。"

#: ../../reference/compound_stmts.rst:765
msgid ""
"In simple terms, ``LITERAL`` will succeed only if ``<subject> == LITERAL``. "
"For the singletons ``None``, ``True`` and ``False``, the :keyword:`is` "
"operator is used."
msgstr ""
"简而言之， ``LITERAL`` 只会在 ``<subject> == LITERAL`` 时匹配成功。对于单例 ``None`` 、 "
"``True`` 和 ``False`` ，会使用 :keyword:`is` 运算符。"

#: ../../reference/compound_stmts.rst:771
msgid "Capture Patterns"
msgstr "捕获模式"

#: ../../reference/compound_stmts.rst:773
msgid "A capture pattern binds the subject value to a name. Syntax:"
msgstr "捕获模式将目标值与一个名称绑定。语法："

#: ../../reference/compound_stmts.rst:779
msgid ""
"A single underscore ``_`` is not a capture pattern (this is what ``!'_'`` "
"expresses). It is instead treated as a :token:`~python-"
"grammar:wildcard_pattern`."
msgstr ""
"单独的一个下划线 ``_`` 不是捕获模式（ ``!'_'`` 表达的就是这个含义）。 它会被当作 :token:`~python-"
"grammar:wildcard_pattern` 。"

#: ../../reference/compound_stmts.rst:783
msgid ""
"In a given pattern, a given name can only be bound once.  E.g. ``case x, x: "
"...`` is invalid while ``case [x] | x: ...`` is allowed."
msgstr ""
"在给定的模式中，一个名字只能被绑定一次。例如 ``case x, x: ...`` 时无效的，但 ``case [x] | x: ...`` "
"是被允许的。"

#: ../../reference/compound_stmts.rst:786
msgid ""
"Capture patterns always succeed.  The binding follows scoping rules "
"established by the assignment expression operator in :pep:`572`; the name "
"becomes a local variable in the closest containing function scope unless "
"there's an applicable :keyword:`global` or :keyword:`nonlocal` statement."
msgstr ""
"捕获模式总是能匹配成功。绑定遵循 :pep:`572` 中赋值表达式运算符设立的作用域规则；名字在最接近的包含函数作用域内成为一个局部变量，除非有适用的"
" :keyword:`global` 或 :keyword:`nonlocal` 语句。"

#: ../../reference/compound_stmts.rst:791
msgid ""
"In simple terms ``NAME`` will always succeed and it will set ``NAME = "
"<subject>``."
msgstr "简而言之， ``NAME`` 总是会匹配成功且将设置 ``NAME = <subject>`` 。"

#: ../../reference/compound_stmts.rst:796
msgid "Wildcard Patterns"
msgstr "通配符模式"

#: ../../reference/compound_stmts.rst:798
msgid ""
"A wildcard pattern always succeeds (matches anything) and binds no name.  "
"Syntax:"
msgstr "通配符模式总是会匹配成功（匹配任何内容）并且不绑定任何名称。语法："

#: ../../reference/compound_stmts.rst:804
msgid ""
"``_`` is a :ref:`soft keyword <soft-keywords>` within any pattern, but only "
"within patterns.  It is an identifier, as usual, even within ``match`` "
"subject expressions, ``guard``\\ s, and ``case`` blocks."
msgstr ""
"在且仅在任何模式中 ``_`` 是一个 :ref:`软关键字 <soft-keywords>`。 通常情况下它是一个标识符，即使是在 ``match``"
" 的目标表达式、``guard`` 和 ``case`` 代码块中也是如此。"

#: ../../reference/compound_stmts.rst:808
msgid "In simple terms, ``_`` will always succeed."
msgstr "简而言之，``_`` 总是会匹配成功。"

#: ../../reference/compound_stmts.rst:813
msgid "Value Patterns"
msgstr "值模式"

#: ../../reference/compound_stmts.rst:815
msgid "A value pattern represents a named value in Python. Syntax:"
msgstr "值模式代表 Python 中具有名称的值。语法："

#: ../../reference/compound_stmts.rst:823
msgid ""
"The dotted name in the pattern is looked up using standard Python :ref:`name"
" resolution rules <resolve_names>`.  The pattern succeeds if the value found"
" compares equal to the subject value (using the ``==`` equality operator)."
msgstr ""
"模式中带点的名称会使用标准的 Python :ref:`名称解析规则 <resolve_names>` 来查找。 "
"如果找到的值与目标值比较结果相等则模式匹配成功（使用 ``==`` 相等运算符）。"

#: ../../reference/compound_stmts.rst:828
msgid ""
"In simple terms ``NAME1.NAME2`` will succeed only if ``<subject> == "
"NAME1.NAME2``"
msgstr "简而言之， ``NAME1.NAME2`` 仅在 ``<subject> == NAME1.NAME2`` 时匹配成功。"

#: ../../reference/compound_stmts.rst:832
msgid ""
"If the same value occurs multiple times in the same match statement, the "
"interpreter may cache the first value found and reuse it rather than repeat "
"the same lookup.  This cache is strictly tied to a given execution of a "
"given match statement."
msgstr ""
"如果相同的值在同一个匹配语句中出现多次，解释器可能会缓存找到的第一个值并重新使用它，而不是重复查找。 这种缓存与特定匹配语句的执行严格挂钩。"

#: ../../reference/compound_stmts.rst:840
msgid "Group Patterns"
msgstr "组模式"

#: ../../reference/compound_stmts.rst:842
msgid ""
"A group pattern allows users to add parentheses around patterns to emphasize"
" the intended grouping.  Otherwise, it has no additional syntax. Syntax:"
msgstr "组模式允许用户在模式周围添加括号，以强调预期的分组。 除此之外，它没有额外的语法。语法："

#: ../../reference/compound_stmts.rst:849
msgid "In simple terms ``(P)`` has the same effect as ``P``."
msgstr "简单来说 ``(P)`` 具有与 ``P`` 相同的效果。"

#: ../../reference/compound_stmts.rst:854
msgid "Sequence Patterns"
msgstr "序列模式"

#: ../../reference/compound_stmts.rst:856
msgid ""
"A sequence pattern contains several subpatterns to be matched against "
"sequence elements. The syntax is similar to the unpacking of a list or "
"tuple."
msgstr "一个序列模式包含数个将与序列元素进行匹配的子模式。其语法类似于列表或元组的解包。"

#: ../../reference/compound_stmts.rst:867
msgid ""
"There is no difference if parentheses  or square brackets are used for "
"sequence patterns (i.e. ``(...)`` vs ``[...]`` )."
msgstr "序列模式中使用圆括号或方括号没有区别（例如 ``(...)`` 和 ``[...]`` ）。"

#: ../../reference/compound_stmts.rst:871
msgid ""
"A single pattern enclosed in parentheses without a trailing comma (e.g. ``(3"
" | 4)``) is a :ref:`group pattern <group-patterns>`. While a single pattern "
"enclosed in square brackets (e.g. ``[3 | 4]``) is still a sequence pattern."
msgstr ""
"用圆括号括起来且没有跟随逗号的单个模式 (例如 ``(3 | 4)``) 是一个 :ref:`分组模式 <group-patterns>`。 "
"而用方括号括起来的单个模式 (例如 ``[3 | 4]``) 则仍是一个序列模式。"

#: ../../reference/compound_stmts.rst:876
msgid ""
"At most one star subpattern may be in a sequence pattern.  The star "
"subpattern may occur in any position. If no star subpattern is present, the "
"sequence pattern is a fixed-length sequence pattern; otherwise it is a "
"variable-length sequence pattern."
msgstr ""
"一个序列模式中最多可以有一个星号子模式。星号子模式可以出现在任何位置。如果没有星号子模式，该序列模式是固定长度的序列模式；否则，其是一个可变长度的序列模式。"

#: ../../reference/compound_stmts.rst:881
msgid ""
"The following is the logical flow for matching a sequence pattern against a "
"subject value:"
msgstr "下面是将一个序列模式与一个目标值相匹配的逻辑流程："

#: ../../reference/compound_stmts.rst:884
msgid ""
"If the subject value is not a sequence [#]_, the sequence pattern fails."
msgstr "如果目标值不是一个序列 [#]_ ，该序列模式匹配失败。"

#: ../../reference/compound_stmts.rst:887
msgid ""
"If the subject value is an instance of ``str``, ``bytes`` or ``bytearray`` "
"the sequence pattern fails."
msgstr "如果目标值是 ``str`` 、 ``bytes`` 或 ``bytearray`` 的实例，则该序列模式匹配失败。"

#: ../../reference/compound_stmts.rst:890
msgid ""
"The subsequent steps depend on whether the sequence pattern is fixed or "
"variable-length."
msgstr "随后的步骤取决于序列模式是固定长度还是可变长度的。"

#: ../../reference/compound_stmts.rst:893
msgid "If the sequence pattern is fixed-length:"
msgstr "如果序列模式是固定长度的："

#: ../../reference/compound_stmts.rst:895
msgid ""
"If the length of the subject sequence is not equal to the number of "
"subpatterns, the sequence pattern fails"
msgstr "如果目标序列的长度与子模式的数量不相等，则该序列模式匹配失败"

#: ../../reference/compound_stmts.rst:898
msgid ""
"Subpatterns in the sequence pattern are matched to their corresponding items"
" in the subject sequence from left to right.  Matching stops as soon as a "
"subpattern fails.  If all subpatterns succeed in matching their "
"corresponding item, the sequence pattern succeeds."
msgstr ""
"序列模式中的子模式与目标序列中的相应项目从左到右进行匹配。 一旦一个子模式匹配失败，就停止匹配。 "
"如果所有的子模式都成功地与它们的对应项相匹配，那么该序列模式就匹配成功了。"

#: ../../reference/compound_stmts.rst:903
msgid "Otherwise, if the sequence pattern is variable-length:"
msgstr "否则，如果序列模式是变长的："

#: ../../reference/compound_stmts.rst:905
msgid ""
"If the length of the subject sequence is less than the number of non-star "
"subpatterns, the sequence pattern fails."
msgstr "如果目标序列的长度小于非星号子模式的数量，则该序列模式匹配失败。"

#: ../../reference/compound_stmts.rst:908
msgid ""
"The leading non-star subpatterns are matched to their corresponding items as"
" for fixed-length sequences."
msgstr "与固定长度的序列一样，靠前的非星形子模式与其相应的项目进行匹配。"

#: ../../reference/compound_stmts.rst:911
msgid ""
"If the previous step succeeds, the star subpattern matches a list formed of "
"the remaining subject items, excluding the remaining items corresponding to "
"non-star subpatterns following the star subpattern."
msgstr "如果上一步成功，星号子模式与剩余的目标项形成的列表相匹配，不包括星号子模式之后的非星号子模式所对应的剩余项。"

#: ../../reference/compound_stmts.rst:915
msgid ""
"Remaining non-star subpatterns are matched to their corresponding subject "
"items, as for a fixed-length sequence."
msgstr "剩余的非星号子模式将与相应的目标项匹配，就像固定长度的序列一样。"

#: ../../reference/compound_stmts.rst:918
msgid ""
"The length of the subject sequence is obtained via :func:`len` (i.e. via the"
" :meth:`__len__` protocol).  This length may be cached by the interpreter in"
" a similar manner as :ref:`value patterns <value-patterns>`."
msgstr ""
"目标序列的长度可通过 :func:`len` (即通过 :meth:`__len__` 协议) 获得。 解释器可能会以类似于 :ref:`值模式 "
"<value-patterns>` 的方式缓存这个长度信息。"

#: ../../reference/compound_stmts.rst:924
msgid ""
"In simple terms ``[P1, P2, P3,`` ... ``, P<N>]`` matches only if all the "
"following happens:"
msgstr "简而言之， ``[P1, P2, P3,`` ... ``, P<N>]`` 仅在满足以下情况时匹配成功："

#: ../../reference/compound_stmts.rst:927
msgid "check ``<subject>`` is a sequence"
msgstr "检查 ``<subject>`` 是一个序列"

#: ../../reference/compound_stmts.rst:928
msgid "``len(subject) == <N>``"
msgstr "``len(subject) == <N>``"

#: ../../reference/compound_stmts.rst:929
msgid ""
"``P1`` matches ``<subject>[0]`` (note that this match can also bind names)"
msgstr "将 ``P1`` 与 ``<subject>[0]`` 进行匹配（请注意此匹配可以绑定名称）"

#: ../../reference/compound_stmts.rst:930
msgid ""
"``P2`` matches ``<subject>[1]`` (note that this match can also bind names)"
msgstr "将 ``P2`` 与 ``<subject>[1]`` 进行匹配（请注意此匹配可以绑定名称）"

#: ../../reference/compound_stmts.rst:931
msgid "... and so on for the corresponding pattern/element."
msgstr "…… 剩余对应的模式/元素也以此类推。"

#: ../../reference/compound_stmts.rst:936
msgid "Mapping Patterns"
msgstr "映射模式"

#: ../../reference/compound_stmts.rst:938
msgid ""
"A mapping pattern contains one or more key-value patterns.  The syntax is "
"similar to the construction of a dictionary. Syntax:"
msgstr "映射模式包含一个或多个键值模式。其语法类似于字典的构造。语法："

#: ../../reference/compound_stmts.rst:949
msgid ""
"At most one double star pattern may be in a mapping pattern.  The double "
"star pattern must be the last subpattern in the mapping pattern."
msgstr "一个映射模式中最多可以有一个双星号模式。双星号模式必须是映射模式中的最后一个子模式。"

#: ../../reference/compound_stmts.rst:952
msgid ""
"Duplicate keys in mapping patterns are disallowed. Duplicate literal keys "
"will raise a :exc:`SyntaxError`. Two keys that otherwise have the same value"
" will raise a :exc:`ValueError` at runtime."
msgstr ""
"映射模式中不允许出现重复的键。重复的字面值键会引发  :exc:`SyntaxError` 。若是两个键有相同的值将会在运行时引发 "
":exc:`ValueError` 。"

#: ../../reference/compound_stmts.rst:956
msgid ""
"The following is the logical flow for matching a mapping pattern against a "
"subject value:"
msgstr "以下是映射模式与目标值匹配的逻辑流程："

#: ../../reference/compound_stmts.rst:959
msgid "If the subject value is not a mapping [#]_,the mapping pattern fails."
msgstr "如果目标值不是一个映射 [#]_，则映射模式匹配失败。"

#: ../../reference/compound_stmts.rst:961
msgid ""
"If every key given in the mapping pattern is present in the subject mapping,"
" and the pattern for each key matches the corresponding item of the subject "
"mapping, the mapping pattern succeeds."
msgstr "若映射模式中给出的每个键都存在于目标映射中，且每个键的模式都与目标映射的相应项匹配成功，则该映射模式匹配成功。"

#: ../../reference/compound_stmts.rst:965
msgid ""
"If duplicate keys are detected in the mapping pattern, the pattern is "
"considered invalid. A :exc:`SyntaxError` is raised for duplicate literal "
"values; or a :exc:`ValueError` for named keys of the same value."
msgstr ""
"如果在映射模式中检测到重复的键，该模式将被视作无效。对于重复的字面值，会引发  :exc:`SyntaxError` ；对于相同值的命名键，会引发  "
":exc:`ValueError` 。"

#: ../../reference/compound_stmts.rst:969
msgid ""
"Key-value pairs are matched using the two-argument form of the mapping "
"subject's ``get()`` method.  Matched key-value pairs must already be present"
" in the mapping, and not created on-the-fly via :meth:`__missing__` or "
":meth:`__getitem__`."
msgstr ""
"键值对使用映射目标的 ``get()`` 方法的双参数形式进行匹配。匹配的键值对必须已经存在于映射中，而不是通过 :meth:`__missing__`"
" 或 :meth:`__getitem__` 即时创建。"

#: ../../reference/compound_stmts.rst:974
msgid ""
"In simple terms ``{KEY1: P1, KEY2: P2, ... }`` matches only if all the "
"following happens:"
msgstr "简而言之， ``{KEY1: P1, KEY2: P2, ... }`` 仅在满足以下情况时匹配成功："

#: ../../reference/compound_stmts.rst:977
msgid "check ``<subject>`` is a mapping"
msgstr "检查 ``<subject>`` 是映射"

#: ../../reference/compound_stmts.rst:978
msgid "``KEY1 in <subject>``"
msgstr "``KEY1 in <subject>``"

#: ../../reference/compound_stmts.rst:979
msgid "``P1`` matches ``<subject>[KEY1]``"
msgstr "``P1`` 与 ``<subject>[KEY1]`` 相匹配"

#: ../../reference/compound_stmts.rst:980
msgid "... and so on for the corresponding KEY/pattern pair."
msgstr "…… 剩余对应的键/模式对也以此类推。"

#: ../../reference/compound_stmts.rst:986
msgid "Class Patterns"
msgstr "类模式"

#: ../../reference/compound_stmts.rst:988
msgid ""
"A class pattern represents a class and its positional and keyword arguments "
"(if any).  Syntax:"
msgstr "类模式表示一个类以及它的位置参数和关键字参数（如果有的话）。语法："

#: ../../reference/compound_stmts.rst:999
msgid "The same keyword should not be repeated in class patterns."
msgstr "同一个关键词不应该在类模式中重复出现。"

#: ../../reference/compound_stmts.rst:1001
msgid ""
"The following is the logical flow for matching a class pattern against a "
"subject value:"
msgstr "以下是类模式与目标值匹配的逻辑流程："

#: ../../reference/compound_stmts.rst:1004
msgid ""
"If ``name_or_attr`` is not an instance of the builtin :class:`type` , raise "
":exc:`TypeError`."
msgstr "如果 ``name_or_attr`` 不是内置 :class:`type` 的实例，引发 :exc:`TypeError` 。"

#: ../../reference/compound_stmts.rst:1007
msgid ""
"If the subject value is not an instance of ``name_or_attr`` (tested via "
":func:`isinstance`), the class pattern fails."
msgstr "如果目标值不是 ``name_or_attr`` 的实例（通过 :func:`isinstance` 测试），该类模式匹配失败。"

#: ../../reference/compound_stmts.rst:1010
msgid ""
"If no pattern arguments are present, the pattern succeeds.  Otherwise, the "
"subsequent steps depend on whether keyword or positional argument patterns "
"are present."
msgstr "如果没有模式参数存在，则该模式匹配成功。 否则，后面的步骤取决于是否有关键字或位置参数模式存在。"

#: ../../reference/compound_stmts.rst:1014
msgid ""
"For a number of built-in types (specified below), a single positional "
"subpattern is accepted which will match the entire subject; for these types "
"keyword patterns also work as for other types."
msgstr "对于一些内置的类型（将在后文详述），接受一个位置子模式，它将与整个目标值相匹配；对于这些类型，关键字模式也像其他类型一样工作。"

#: ../../reference/compound_stmts.rst:1018
msgid ""
"If only keyword patterns are present, they are processed as follows, one by "
"one:"
msgstr "如果只存在关键词模式，它们将被逐一处理，如下所示："

#: ../../reference/compound_stmts.rst:1021
msgid "I. The keyword is looked up as an attribute on the subject."
msgstr "一. 该关键词被视作主体的一个属性进行查找。"

#: ../../reference/compound_stmts.rst:1023
msgid ""
"If this raises an exception other than :exc:`AttributeError`, the exception "
"bubbles up."
msgstr "如果这引发了除 :exc:`AttributeError` 以外的异常，该异常会被抛出。"

#: ../../reference/compound_stmts.rst:1026
msgid "If this raises :exc:`AttributeError`, the class pattern has failed."
msgstr "如果这引发了 :exc:`AttributeError` ，该类模式匹配失败。"

#: ../../reference/compound_stmts.rst:1028
msgid ""
"Else, the subpattern associated with the keyword pattern is matched against "
"the subject's attribute value.  If this fails, the class pattern fails; if "
"this succeeds, the match proceeds to the next keyword."
msgstr "否则，与关键词模式相关的子模式将与目标的属性值进行匹配。 如果失败，则类模式匹配失败；如果成功，则继续对下一个关键词进行匹配。"

#: ../../reference/compound_stmts.rst:1033
msgid "II. If all keyword patterns succeed, the class pattern succeeds."
msgstr "二. 如果所有的关键词模式匹配成功，该类模式匹配成功。"

#: ../../reference/compound_stmts.rst:1035
msgid ""
"If any positional patterns are present, they are converted to keyword "
"patterns using the :data:`~object.__match_args__` attribute on the class "
"``name_or_attr`` before matching:"
msgstr ""
"如果存在位置模式，在匹配前会用类 ``name_or_attr`` 的 :data:`~object.__match_args__` "
"属性将其转换为关键词模式。"

#: ../../reference/compound_stmts.rst:1039
msgid "I. The equivalent of ``getattr(cls, \"__match_args__\", ())`` is called."
msgstr "一. 进行与 ``getattr(cls, \"__match_args__\", ())`` 等价的调用。"

#: ../../reference/compound_stmts.rst:1041
msgid "If this raises an exception, the exception bubbles up."
msgstr "如果这引发一个异常，该异常将被抛出。"

#: ../../reference/compound_stmts.rst:1043
msgid ""
"If the returned value is not a tuple, the conversion fails and "
":exc:`TypeError` is raised."
msgstr "如果返回值不是一个元组，则转换失败且引发 :exc:`TypeError` 。"

#: ../../reference/compound_stmts.rst:1046
msgid ""
"If there are more positional patterns than ``len(cls.__match_args__)``, "
":exc:`TypeError` is raised."
msgstr "若位置模式的数量超出 ``len(cls.__match_args__)`` ，将引发 :exc:`TypeError` 。"

#: ../../reference/compound_stmts.rst:1049
msgid ""
"Otherwise, positional pattern ``i`` is converted to a keyword pattern using "
"``__match_args__[i]`` as the keyword.  ``__match_args__[i]`` must be a "
"string; if not :exc:`TypeError` is raised."
msgstr ""
"否则，位置模式 ``i`` 会使用 ``__match_args__[i]`` 转换为关键词。 ``__match_args__[i]`` "
"必须是一个字符串；如果不是则引发 :exc:`TypeError` 。"

#: ../../reference/compound_stmts.rst:1053
msgid "If there are duplicate keywords, :exc:`TypeError` is raised."
msgstr "如果有重复的关键词，引发 :exc:`TypeError` 。"

#: ../../reference/compound_stmts.rst:1055
msgid ":ref:`class-pattern-matching`"
msgstr ":ref:`class-pattern-matching`"

#: ../../reference/compound_stmts.rst:1058
msgid ""
"II. Once all positional patterns have been converted to keyword patterns,"
msgstr "二. 若所有的位置模式都被转换为关键词模式，"

#: ../../reference/compound_stmts.rst:1058
msgid "the match proceeds as if there were only keyword patterns."
msgstr "匹配的过程就像只有关键词模式一样。"

#: ../../reference/compound_stmts.rst:1060
msgid ""
"For the following built-in types the handling of positional subpatterns is "
"different:"
msgstr "对于以下内置类型，位置子模式的处理是不同的："

#: ../../reference/compound_stmts.rst:1063
msgid ":class:`bool`"
msgstr ":class:`bool`"

#: ../../reference/compound_stmts.rst:1064
msgid ":class:`bytearray`"
msgstr ":class:`bytearray`"

#: ../../reference/compound_stmts.rst:1065
msgid ":class:`bytes`"
msgstr ":class:`bytes`"

#: ../../reference/compound_stmts.rst:1066
msgid ":class:`dict`"
msgstr ":class:`dict`"

#: ../../reference/compound_stmts.rst:1067
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../../reference/compound_stmts.rst:1068
msgid ":class:`frozenset`"
msgstr ":class:`frozenset`"

#: ../../reference/compound_stmts.rst:1069
msgid ":class:`int`"
msgstr ":class:`int`"

#: ../../reference/compound_stmts.rst:1070
#: ../../reference/compound_stmts.rst:1521
msgid ":class:`list`"
msgstr ":class:`list`"

#: ../../reference/compound_stmts.rst:1071
msgid ":class:`set`"
msgstr ":class:`set`"

#: ../../reference/compound_stmts.rst:1072
msgid ":class:`str`"
msgstr ":class:`str`"

#: ../../reference/compound_stmts.rst:1073
#: ../../reference/compound_stmts.rst:1524
msgid ":class:`tuple`"
msgstr ":class:`tuple`"

#: ../../reference/compound_stmts.rst:1075
msgid ""
"These classes accept a single positional argument, and the pattern there is "
"matched against the whole object rather than an attribute. For example "
"``int(0|1)`` matches the value ``0``, but not the value ``0.0``."
msgstr ""
"这些类接受一个位置参数，其模式是针对整个对象而不是某个属性进行匹配。 例如，``int(0|1)`` 匹配值 ``0``，但不匹配值 ``0.0``。"

#: ../../reference/compound_stmts.rst:1079
msgid ""
"In simple terms ``CLS(P1, attr=P2)`` matches only if the following happens:"
msgstr "简而言之， ``CLS(P1, attr=P2)`` 仅在满足以下情况时匹配成功："

#: ../../reference/compound_stmts.rst:1081
msgid "``isinstance(<subject>, CLS)``"
msgstr "``isinstance(<subject>, CLS)``"

#: ../../reference/compound_stmts.rst:1082
msgid "convert ``P1`` to a keyword pattern using ``CLS.__match_args__``"
msgstr "用 ``CLS.__match_args__`` 将 ``P1`` 转换为关键词模式"

#: ../../reference/compound_stmts.rst:1084
msgid "For each keyword argument ``attr=P2``:"
msgstr "对于每个关键词参数 ``attr=P2`` ："

#: ../../reference/compound_stmts.rst:1084
msgid "``hasattr(<subject>, \"attr\")``"
msgstr "``hasattr(<subject>, \"attr\")``"

#: ../../reference/compound_stmts.rst:1085
msgid "``P2`` matches ``<subject>.attr``"
msgstr "将 ``P2`` 与 ``<subject>.attr`` 进行匹配"

#: ../../reference/compound_stmts.rst:1086
msgid "... and so on for the corresponding keyword argument/pattern pair."
msgstr "…… 剩余对应的关键字参数/模式对也以此类推。"

#: ../../reference/compound_stmts.rst:1101
msgid "Function definitions"
msgstr "函数定义"

#: ../../reference/compound_stmts.rst:1116
msgid ""
"A function definition defines a user-defined function object (see section "
":ref:`types`):"
msgstr "函数定义就是对用户自定义函数的定义（参见 :ref:`types` 一节）:"

#: ../../reference/compound_stmts.rst:1135
msgid ""
"A function definition is an executable statement.  Its execution binds the "
"function name in the current local namespace to a function object (a wrapper"
" around the executable code for the function).  This function object "
"contains a reference to the current global namespace as the global namespace"
" to be used when the function is called."
msgstr ""
"函数定义是一条可执行语句。 它执行时会在当前局部命名空间中将函数名称绑定到一个函数对象（函数可执行代码的包装器）。 "
"这个函数对象包含对当前全局命名空间的引用，作为函数被调用时所使用的全局命名空间。"

#: ../../reference/compound_stmts.rst:1141
msgid ""
"The function definition does not execute the function body; this gets "
"executed only when the function is called. [#]_"
msgstr "函数定义并不会执行函数体；只有当函数被调用时才会执行此操作。 [#]_"

#: ../../reference/compound_stmts.rst:1147
msgid ""
"A function definition may be wrapped by one or more :term:`decorator` "
"expressions. Decorator expressions are evaluated when the function is "
"defined, in the scope that contains the function definition.  The result "
"must be a callable, which is invoked with the function object as the only "
"argument. The returned value is bound to the function name instead of the "
"function object.  Multiple decorators are applied in nested fashion. For "
"example, the following code ::"
msgstr ""
"一个函数定义可以被一个或多个 :term:`decorator` 表达式所包装。 当函数被定义时将在包含该函数定义的作用域中对装饰器表达式求值。 "
"求值结果必须是一个可调用对象，它会以该函数对象作为唯一参数被唤起。 其返回值将被绑定到函数名称而非函数对象。 多个装饰器会以嵌套方式被应用。 "
"例如以下代码 ::"

#: ../../reference/compound_stmts.rst:1158
#: ../../reference/compound_stmts.rst:1335
msgid "is roughly equivalent to ::"
msgstr "大致等价于 ::"

#: ../../reference/compound_stmts.rst:1163
msgid ""
"except that the original function is not temporarily bound to the name "
"``func``."
msgstr "不同之处在于原始函数并不会被临时绑定到名称 ``func``。"

#: ../../reference/compound_stmts.rst:1165
msgid ""
"Functions may be decorated with any valid :token:`~python-"
"grammar:assignment_expression`. Previously, the grammar was much more "
"restrictive; see :pep:`614` for details."
msgstr ""
"函数可使用任何有效的 :token:`~python-grammar:assignment_expression` 来装饰。 "
"在之前版本中，此语法则更为受限，详情参见 :pep:`614`。"

#: ../../reference/compound_stmts.rst:1175
msgid ""
"When one or more :term:`parameters <parameter>` have the form *parameter* "
"``=`` *expression*, the function is said to have \"default parameter "
"values.\"  For a parameter with a default value, the corresponding "
":term:`argument` may be omitted from a call, in which case the parameter's "
"default value is substituted.  If a parameter has a default value, all "
"following parameters up until the \"``*``\" must also have a default value "
"--- this is a syntactic restriction that is not expressed by the grammar."
msgstr ""
"当一个或多个 :term:`形参 <parameter>` 具有 *形参* ``=`` *表达式* 这样的形式时，该函数就被称为具有“默认形参值”。 "
"对于一个具有默认值的形参，其对应的 :term:`argument` 可以在调用中被省略，在此情况下会用形参的默认值来替代。 "
"如果一个形参具有默认值，后续所有在 \"``*``\" 之前的形参也必须具有默认值 --- 这个句法限制并未在语法中明确表达。"

#: ../../reference/compound_stmts.rst:1183
msgid ""
"**Default parameter values are evaluated from left to right when the "
"function definition is executed.** This means that the expression is "
"evaluated once, when the function is defined, and that the same \"pre-"
"computed\" value is used for each call.  This is especially important to "
"understand when a default parameter value is a mutable object, such as a "
"list or a dictionary: if the function modifies the object (e.g. by appending"
" an item to a list), the default parameter value is in effect modified.  "
"This is generally not what was intended.  A way around this is to use "
"``None`` as the default, and explicitly test for it in the body of the "
"function, e.g.::"
msgstr ""
"**默认形参值会在执行函数定义时按从左至右的顺序被求值。** 这意味着当函数被定义时将对表达式求值一次，相同的“预计算”值将在每次调用时被使用。 "
"这一点在默认形参为可变对象，例如列表或字典的时候尤其需要重点理解：如果函数修改了该对象（例如向列表添加了一项），则实际上默认值也会被修改。 "
"这通常不是人们所想要的。 绕过此问题的一个方法是使用 ``None`` 作为默认值，并在函数体中显式地对其进测试，例如::"

#: ../../reference/compound_stmts.rst:1204
msgid ""
"Function call semantics are described in more detail in section "
":ref:`calls`. A function call always assigns values to all parameters "
"mentioned in the parameter list, either from positional arguments, from "
"keyword arguments, or from default values.  If the form \"``*identifier``\" "
"is present, it is initialized to a tuple receiving any excess positional "
"parameters, defaulting to the empty tuple. If the form \"``**identifier``\" "
"is present, it is initialized to a new ordered mapping receiving any excess "
"keyword arguments, defaulting to a new empty mapping of the same type.  "
"Parameters after \"``*``\" or \"``*identifier``\" are keyword-only "
"parameters and may only be passed by keyword arguments.  Parameters before "
"\"``/``\" are positional-only parameters and may only be passed by "
"positional arguments."
msgstr ""
"函数调用的语义在 :ref:`calls` 一节中有更详细的描述。 "
"函数调用总是会给形参列表中列出的所有形参赋值，或是用位置参数，或是用关键字参数，或是用默认值。 如果存在 \"``*identifier``\" "
"这样的形式，它会被初始化为一个元组来接收任何额外的位置参数，默认为一个空元组。 如果存在 \"``**identifier``\" "
"这样的形式，它会被初始化为一个新的有序映射来接收任何额外的关键字参数，默认为一个相同类型的空映射。 在 \"``*``\" 或 "
"\"``*identifier``\" 之后的形参都是仅限关键字形参因而只能通过关键字参数传入。 在 \"``/``\" "
"之前的形参都是仅限位置形参因而只能通过位置参数传入。"

#: ../../reference/compound_stmts.rst:1216
msgid ""
"The ``/`` function parameter syntax may be used to indicate positional-only "
"parameters. See :pep:`570` for details."
msgstr "可以使用 ``/`` 函数形参语法来标示仅限位置形参。 请参阅 :pep:`570` 了解详情。"

#: ../../reference/compound_stmts.rst:1225
msgid ""
"Parameters may have an :term:`annotation <function annotation>` of the form "
"\"``: expression``\" following the parameter name.  Any parameter may have "
"an annotation, even those of the form ``*identifier`` or ``**identifier``.  "
"Functions may have \"return\" annotation of the form \"``-> expression``\" "
"after the parameter list.  These annotations can be any valid Python "
"expression.  The presence of annotations does not change the semantics of a "
"function.  The annotation values are available as values of a dictionary "
"keyed by the parameters' names in the :attr:`__annotations__` attribute of "
"the function object.  If the ``annotations`` import from :mod:`__future__` "
"is used, annotations are preserved as strings at runtime which enables "
"postponed evaluation.  Otherwise, they are evaluated when the function "
"definition is executed.  In this case annotations may be evaluated in a "
"different order than they appear in the source code."
msgstr ""
"形参可以带有 :term:`标注 <function annotation>`，其形式为在形参名称后加上 \"``: expression``\"。 "
"任何形参都可以带有标注，甚至 ``*identifier`` 或 ``**identifier`` 这样的形参也可以。 "
"函数可以带有“返回”标注，其形式为在形参列表后加上 \"``-> expression``\"。 这些标注可以是任何有效的 Python 表达式。 "
"标注的存在不会改变函数的语义。 标注值可以作为函数对象的 :attr:`__annotations__` 属性中以对应形参名称为键的字典值被访问。 "
"如果使用了 ``annotations`` import from :mod:`__future__` "
"的方式，则标注会在运行时保存为字符串以启用延迟求值特性。 否则，它们会在执行函数定义时被求值。 "
"在这种情况下，标注的求值顺序可能与它们在源代码中出现的顺序不同。"

#: ../../reference/compound_stmts.rst:1240
msgid ""
"It is also possible to create anonymous functions (functions not bound to a "
"name), for immediate use in expressions.  This uses lambda expressions, "
"described in section :ref:`lambda`.  Note that the lambda expression is "
"merely a shorthand for a simplified function definition; a function defined "
"in a \":keyword:`def`\" statement can be passed around or assigned to "
"another name just like a function defined by a lambda expression.  The "
"\":keyword:`!def`\" form is actually more powerful since it allows the "
"execution of multiple statements and annotations."
msgstr ""
"创建匿名函数（未绑定到一个名称的函数）以便立即在表达式中使用也是可能的。 这需要使用 lambda 表达式，具体描述见 :ref:`lambda` "
"一节。 请注意 lambda 只是简单函数定义的一种简化写法；在 \":keyword:`def`\" 语句中定义的函数也可以像用 lambda "
"表达式定义的函数一样被传递或赋值给其他名称。 \":keyword:`!def`\" 形式实际上更为强大，因为它允许执行多条语句和使用标注。"

#: ../../reference/compound_stmts.rst:1248
msgid ""
"**Programmer's note:** Functions are first-class objects.  A \"``def``\" "
"statement executed inside a function definition defines a local function "
"that can be returned or passed around.  Free variables used in the nested "
"function can access the local variables of the function containing the def."
"  See section :ref:`naming` for details."
msgstr ""
"**程序员注意事项:** 函数属于一类对象。 在一个函数内部执行的 \"``def``\" 语句会定义一个局部函数并可被返回或传递。 "
"在嵌套函数中使用的自由变量可以访问包含该 def 语句的函数的局部变量。 详情参见 :ref:`naming` 一节。"

#: ../../reference/compound_stmts.rst:1257
msgid ":pep:`3107` - Function Annotations"
msgstr ":pep:`3107` - 函数标注"

#: ../../reference/compound_stmts.rst:1257
msgid "The original specification for function annotations."
msgstr "最初的函数标注规范说明。"

#: ../../reference/compound_stmts.rst:1260
msgid ":pep:`484` - Type Hints"
msgstr ":pep:`484` —— 类型注解"

#: ../../reference/compound_stmts.rst:1260
msgid "Definition of a standard meaning for annotations: type hints."
msgstr "标注的标准含意定义：类型提示。"

#: ../../reference/compound_stmts.rst:1264
msgid ":pep:`526` - Syntax for Variable Annotations"
msgstr ":pep:`526` - 变量标注的语法"

#: ../../reference/compound_stmts.rst:1263
msgid ""
"Ability to type hint variable declarations, including class variables and "
"instance variables"
msgstr "变量声明的类型提示功能，包括类变量和实例变量"

#: ../../reference/compound_stmts.rst:1267
msgid ":pep:`563` - Postponed Evaluation of Annotations"
msgstr ":pep:`563` - 延迟的标注求值"

#: ../../reference/compound_stmts.rst:1267
msgid ""
"Support for forward references within annotations by preserving annotations "
"in a string form at runtime instead of eager evaluation."
msgstr "支持在运行时通过以字符串形式保存标注而非不是即求值来实现标注内部的向前引用。"

#: ../../reference/compound_stmts.rst:1274
msgid "Class definitions"
msgstr "类定义"

#: ../../reference/compound_stmts.rst:1289
msgid "A class definition defines a class object (see section :ref:`types`):"
msgstr "类定义就是对类对象的定义 (参见 :ref:`types` 一节):"

#: ../../reference/compound_stmts.rst:1296
msgid ""
"A class definition is an executable statement.  The inheritance list usually"
" gives a list of base classes (see :ref:`metaclasses` for more advanced "
"uses), so each item in the list should evaluate to a class object which "
"allows subclassing.  Classes without an inheritance list inherit, by "
"default, from the base class :class:`object`; hence, ::"
msgstr ""
"类定义是一条可执行语句。 其中继承列表通常给出基类的列表 (进阶用法请参见 "
":ref:`metaclasses`)，列表中的每一项都应当被求值为一个允许子类的类对象。 没有继承列表的类默认继承自基类 "
":class:`object`；因此，::"

#: ../../reference/compound_stmts.rst:1305
msgid "is equivalent to ::"
msgstr "等价于 ::"

#: ../../reference/compound_stmts.rst:1310
msgid ""
"The class's suite is then executed in a new execution frame (see "
":ref:`naming`), using a newly created local namespace and the original "
"global namespace. (Usually, the suite contains mostly function definitions.)"
"  When the class's suite finishes execution, its execution frame is "
"discarded but its local namespace is saved. [#]_ A class object is then "
"created using the inheritance list for the base classes and the saved local "
"namespace for the attribute dictionary.  The class name is bound to this "
"class object in the original local namespace."
msgstr ""
"随后类体将在一个新的执行帧 (参见 :ref:`naming`) 中被执行，使用新创建的局部命名空间和原有的全局命名空间。 "
"（通常，类体主要包含函数定义。） 当类体结束执行时，其执行帧将被丢弃而其局部命名空间会被保存。 [#]_ "
"一个类对象随后会被创建，其基类使用给定的继承列表，属性字典使用保存的局部命名空间。 类名称将在原有的全局命名空间中绑定到该类对象。"

#: ../../reference/compound_stmts.rst:1319
msgid ""
"The order in which attributes are defined in the class body is preserved in "
"the new class's ``__dict__``.  Note that this is reliable only right after "
"the class is created and only for classes that were defined using the "
"definition syntax."
msgstr ""
"在类体内定义的属性的顺序保存在新类的 ``__dict__`` 中。 请注意此顺序的可靠性只限于类刚被创建时，并且只适用于使用定义语法所定义的类。"

#: ../../reference/compound_stmts.rst:1324
msgid ""
"Class creation can be customized heavily using :ref:`metaclasses "
"<metaclasses>`."
msgstr "类的创建可使用 :ref:`元类 <metaclasses>` 进行重度定制。"

#: ../../reference/compound_stmts.rst:1329
msgid "Classes can also be decorated: just like when decorating functions, ::"
msgstr "类也可以被装饰：就像装饰函数一样，::"

#: ../../reference/compound_stmts.rst:1340
msgid ""
"The evaluation rules for the decorator expressions are the same as for "
"function decorators.  The result is then bound to the class name."
msgstr "装饰器表达式的求值规则与函数装饰器相同。 结果随后会被绑定到类名称。"

#: ../../reference/compound_stmts.rst:1343
msgid ""
"Classes may be decorated with any valid :token:`~python-"
"grammar:assignment_expression`. Previously, the grammar was much more "
"restrictive; see :pep:`614` for details."
msgstr ""
"类可使用任何有效的 :token:`~python-grammar:assignment_expression` 来装饰。 "
"在之前版本中，此语法则更为受限，详情参见 :pep:`614`。"

#: ../../reference/compound_stmts.rst:1348
msgid ""
"**Programmer's note:** Variables defined in the class definition are class "
"attributes; they are shared by instances.  Instance attributes can be set in"
" a method with ``self.name = value``.  Both class and instance attributes "
"are accessible through the notation \"``self.name``\", and an instance "
"attribute hides a class attribute with the same name when accessed in this "
"way.  Class attributes can be used as defaults for instance attributes, but "
"using mutable values there can lead to unexpected results.  "
":ref:`Descriptors <descriptors>` can be used to create instance variables "
"with different implementation details."
msgstr ""
"**程序员注意事项:** 在类定义内定义的变量是类属性；它们将被类实例所共享。 实例属性可通过 ``self.name = value`` "
"在方法中设定。 类和实例属性均可通过 \"``self.name``\" 表示法来访问，当通过此方式访问时实例属性会隐藏同名的类属性。 "
"类属性可被用作实例属性的默认值，但在此场景下使用可变值可能导致未预期的结果。 可以使用 :ref:`描述器 <descriptors>` "
"来创建具有不同实现细节的实例变量。"

#: ../../reference/compound_stmts.rst:1363
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` - Python 3000 中的元类"

#: ../../reference/compound_stmts.rst:1361
msgid ""
"The proposal that changed the declaration of metaclasses to the current "
"syntax, and the semantics for how classes with metaclasses are constructed."
msgstr "将元类声明修改为当前语法的提议，以及关于如何构建带有元类的类的语义描述。"

#: ../../reference/compound_stmts.rst:1366
msgid ":pep:`3129` - Class Decorators"
msgstr ":pep:`3129` - 类装饰器"

#: ../../reference/compound_stmts.rst:1366
msgid ""
"The proposal that added class decorators.  Function and method decorators "
"were introduced in :pep:`318`."
msgstr "增加类装饰器的提议。 函数和方法装饰器是在 :pep:`318` 中被引入的。"

#: ../../reference/compound_stmts.rst:1373
msgid "Coroutines"
msgstr "协程"

#: ../../reference/compound_stmts.rst:1381
msgid "Coroutine function definition"
msgstr "协程函数定义"

#: ../../reference/compound_stmts.rst:1391
msgid ""
"Execution of Python coroutines can be suspended and resumed at many points "
"(see :term:`coroutine`). :keyword:`await` expressions, :keyword:`async for` "
"and :keyword:`async with` can only be used in the body of a coroutine "
"function."
msgstr ""
"Python 协程的执行可以在多个位置上被挂起和恢复 (参见 :term:`coroutine`)。 :keyword:`await` "
"表达式，:keyword:`async for` 以及 :keyword:`async with` 只能在协程函数体中使用。"

#: ../../reference/compound_stmts.rst:1395
msgid ""
"Functions defined with ``async def`` syntax are always coroutine functions, "
"even if they do not contain ``await`` or ``async`` keywords."
msgstr "使用 ``async def`` 语法定义的函数总是为协程函数，即使它们不包含 ``await`` 或 ``async`` 关键字。"

#: ../../reference/compound_stmts.rst:1398
msgid ""
"It is a :exc:`SyntaxError` to use a ``yield from`` expression inside the "
"body of a coroutine function."
msgstr "在协程函数体中使用 ``yield from`` 表达式将引发 :exc:`SyntaxError`。"

#: ../../reference/compound_stmts.rst:1401
msgid "An example of a coroutine function::"
msgstr "协程函数的例子::"

#: ../../reference/compound_stmts.rst:1407
msgid ""
"``await`` and ``async`` are now keywords; previously they were only treated "
"as such inside the body of a coroutine function."
msgstr "``await`` 和 ``async`` 现在是保留关键字；在之前版本中它们仅在协程函数内被当作保留关键字。"

#: ../../reference/compound_stmts.rst:1415
msgid "The :keyword:`!async for` statement"
msgstr ":keyword:`!async for` 语句"

#: ../../reference/compound_stmts.rst:1420
msgid ""
"An :term:`asynchronous iterable` provides an ``__aiter__`` method that "
"directly returns an :term:`asynchronous iterator`, which can call "
"asynchronous code in its ``__anext__`` method."
msgstr ""
":term:`asynchronous iterable` 提供了 ``__aiter__`` 方法，该方法会直接返回 "
":term:`asynchronous iterator`，它可以在其 ``__anext__`` 方法中调用异步代码。"

#: ../../reference/compound_stmts.rst:1424
msgid ""
"The ``async for`` statement allows convenient iteration over asynchronous "
"iterables."
msgstr "``async for`` 语句允许方便地对异步可迭代对象进行迭代。"

#: ../../reference/compound_stmts.rst:1434
msgid "Is semantically equivalent to::"
msgstr "在语义上等价于::"

#: ../../reference/compound_stmts.rst:1450
msgid ""
"See also :meth:`~object.__aiter__` and :meth:`~object.__anext__` for "
"details."
msgstr "另请参阅 :meth:`~object.__aiter__` 和 :meth:`~object.__anext__` 了解详情。"

#: ../../reference/compound_stmts.rst:1452
msgid ""
"It is a :exc:`SyntaxError` to use an ``async for`` statement outside the "
"body of a coroutine function."
msgstr "在协程函数体之外使用 ``async for`` 语句将引发 :exc:`SyntaxError`。"

#: ../../reference/compound_stmts.rst:1460
msgid "The :keyword:`!async with` statement"
msgstr ":keyword:`!async with` 语句"

#: ../../reference/compound_stmts.rst:1465
msgid ""
"An :term:`asynchronous context manager` is a :term:`context manager` that is"
" able to suspend execution in its *enter* and *exit* methods."
msgstr ""
":term:`asynchronous context manager` 是一种 :term:`context manager`，能够在其 "
"*enter* 和 *exit* 方法中暂停执行。"

#: ../../reference/compound_stmts.rst:1492
msgid ""
"See also :meth:`~object.__aenter__` and :meth:`~object.__aexit__` for "
"details."
msgstr "另请参阅 :meth:`~object.__aenter__` 和 :meth:`~object.__aexit__` 了解详情。"

#: ../../reference/compound_stmts.rst:1494
msgid ""
"It is a :exc:`SyntaxError` to use an ``async with`` statement outside the "
"body of a coroutine function."
msgstr "在协程函数体之外使用 ``async with`` 语句将引发 :exc:`SyntaxError`。"

#: ../../reference/compound_stmts.rst:1500
msgid ":pep:`492` - Coroutines with async and await syntax"
msgstr ":pep:`492` - 使用 async 和 await 语法实现协程"

#: ../../reference/compound_stmts.rst:1500
msgid ""
"The proposal that made coroutines a proper standalone concept in Python, and"
" added supporting syntax."
msgstr "将协程作为 Python 中的一个正式的单独概念，并增加相应的支持语法。"

#: ../../reference/compound_stmts.rst:1505
msgid "Footnotes"
msgstr "备注"

#: ../../reference/compound_stmts.rst:1506
msgid ""
"The exception is propagated to the invocation stack unless there is a "
":keyword:`finally` clause which happens to raise another exception. That new"
" exception causes the old one to be lost."
msgstr "异常会被传播给唤起栈，除非存在一个 :keyword:`finally` 子句正好引发了另一个异常。 新引发的异常将导致旧异常的丢失。"

#: ../../reference/compound_stmts.rst:1510
msgid "In pattern matching, a sequence is defined as one of the following:"
msgstr "在模式匹配中，序列被定义为以下几种之一:"

#: ../../reference/compound_stmts.rst:1512
msgid "a class that inherits from :class:`collections.abc.Sequence`"
msgstr "继承自 :class:`collections.abc.Sequence` 的类"

#: ../../reference/compound_stmts.rst:1513
msgid ""
"a Python class that has been registered as :class:`collections.abc.Sequence`"
msgstr "注册为 :class:`collections.abc.Sequence` 的 Python 类"

#: ../../reference/compound_stmts.rst:1514
msgid ""
"a builtin class that has its (CPython) :data:`Py_TPFLAGS_SEQUENCE` bit set"
msgstr "设置了 (CPython) :data:`Py_TPFLAGS_SEQUENCE` 位的内置类"

#: ../../reference/compound_stmts.rst:1515
#: ../../reference/compound_stmts.rst:1534
msgid "a class that inherits from any of the above"
msgstr "继承自上述任何一个类的类"

#: ../../reference/compound_stmts.rst:1517
msgid "The following standard library classes are sequences:"
msgstr "下列标准库中的类都是序列:"

#: ../../reference/compound_stmts.rst:1519
msgid ":class:`array.array`"
msgstr ":class:`array.array`"

#: ../../reference/compound_stmts.rst:1520
msgid ":class:`collections.deque`"
msgstr ":class:`collections.deque`"

#: ../../reference/compound_stmts.rst:1522
msgid ":class:`memoryview`"
msgstr ":class:`memoryview`"

#: ../../reference/compound_stmts.rst:1523
msgid ":class:`range`"
msgstr ":class:`range`"

#: ../../reference/compound_stmts.rst:1526
msgid ""
"Subject values of type ``str``, ``bytes``, and ``bytearray`` do not match "
"sequence patterns."
msgstr "类型为 ``str``, ``bytes`` 和 ``bytearray`` 的目标值不能匹配序列模式。"

#: ../../reference/compound_stmts.rst:1529
msgid "In pattern matching, a mapping is defined as one of the following:"
msgstr "在模式匹配中，映射被定义为以下几种之一:"

#: ../../reference/compound_stmts.rst:1531
msgid "a class that inherits from :class:`collections.abc.Mapping`"
msgstr "继承自 :class:`collections.abc.Mapping` 的类"

#: ../../reference/compound_stmts.rst:1532
msgid ""
"a Python class that has been registered as :class:`collections.abc.Mapping`"
msgstr "注册为 :class:`collections.abc.Mapping` 的 Python 类"

#: ../../reference/compound_stmts.rst:1533
msgid ""
"a builtin class that has its (CPython) :data:`Py_TPFLAGS_MAPPING` bit set"
msgstr "设置了 (CPython) :data:`Py_TPFLAGS_MAPPING` 位的内置类"

#: ../../reference/compound_stmts.rst:1536
msgid ""
"The standard library classes :class:`dict` and "
":class:`types.MappingProxyType` are mappings."
msgstr "标准库中的 :class:`dict` 和 :class:`types.MappingProxyType` 类都属于映射。"

#: ../../reference/compound_stmts.rst:1539
msgid ""
"A string literal appearing as the first statement in the function body is "
"transformed into the function's ``__doc__`` attribute and therefore the "
"function's :term:`docstring`."
msgstr ""
"作为函数体的第一条语句出现的字符串字面值会被转换为函数的 ``__doc__`` 属性，也就是该函数的 :term:`docstring`。"

#: ../../reference/compound_stmts.rst:1543
msgid ""
"A string literal appearing as the first statement in the class body is "
"transformed into the namespace's ``__doc__`` item and therefore the class's "
":term:`docstring`."
msgstr ""
"作为类体的第一条语句出现的字符串字面值会被转换为命名空间的 ``__doc__`` 条目，也就是该类的 :term:`docstring`。"
