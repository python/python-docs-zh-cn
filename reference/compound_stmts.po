# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/compound_stmts.rst:5
msgid "Compound statements"
msgstr ""

#: ../../reference/compound_stmts.rst:9
msgid ""
"Compound statements contain (groups of) other statements; they affect or "
"control the execution of those other statements in some way.  In general, "
"compound statements span multiple lines, although in simple incarnations a "
"whole compound statement may be contained in one line."
msgstr ""

#: ../../reference/compound_stmts.rst:14
msgid ""
"The :keyword:`if`, :keyword:`while` and :keyword:`for` statements implement "
"traditional control flow constructs.  :keyword:`try` specifies exception "
"handlers and/or cleanup code for a group of statements, while the "
":keyword:`with` statement allows the execution of initialization and "
"finalization code around a block of code.  Function and class definitions "
"are also syntactically compound statements."
msgstr ""

#: ../../reference/compound_stmts.rst:26
msgid ""
"A compound statement consists of one or more 'clauses.'  A clause consists "
"of a header and a 'suite.'  The clause headers of a particular compound "
"statement are all at the same indentation level. Each clause header begins "
"with a uniquely identifying keyword and ends with a colon.  A suite is a "
"group of statements controlled by a clause.  A suite can be one or more "
"semicolon-separated simple statements on the same line as the header, "
"following the header's colon, or it can be one or more indented statements "
"on subsequent lines.  Only the latter form of a suite can contain nested "
"compound statements; the following is illegal, mostly because it wouldn't be"
" clear to which :keyword:`if` clause a following :keyword:`else` clause "
"would belong::"
msgstr ""

#: ../../reference/compound_stmts.rst:39
msgid ""
"Also note that the semicolon binds tighter than the colon in this context, "
"so that in the following example, either all or none of the :func:`print` "
"calls are executed::"
msgstr ""

#: ../../reference/compound_stmts.rst:45
msgid "Summarizing:"
msgstr ""

#: ../../reference/compound_stmts.rst:69
msgid ""
"Note that statements always end in a ``NEWLINE`` possibly followed by a "
"``DEDENT``.  Also note that optional continuation clauses always begin with "
"a keyword that cannot start a statement, thus there are no ambiguities (the "
"'dangling :keyword:`else`' problem is solved in Python by requiring nested "
":keyword:`if` statements to be indented)."
msgstr ""

#: ../../reference/compound_stmts.rst:75
msgid ""
"The formatting of the grammar rules in the following sections places each "
"clause on a separate line for clarity."
msgstr ""

#: ../../reference/compound_stmts.rst:84
msgid "The :keyword:`!if` statement"
msgstr ""

#: ../../reference/compound_stmts.rst:92
msgid "The :keyword:`if` statement is used for conditional execution:"
msgstr ""

#: ../../reference/compound_stmts.rst:99
msgid ""
"It selects exactly one of the suites by evaluating the expressions one by "
"one until one is found to be true (see section :ref:`booleans` for the "
"definition of true and false); then that suite is executed (and no other "
"part of the :keyword:`if` statement is executed or evaluated).  If all "
"expressions are false, the suite of the :keyword:`else` clause, if present, "
"is executed."
msgstr ""

#: ../../reference/compound_stmts.rst:109
msgid "The :keyword:`!while` statement"
msgstr ""

#: ../../reference/compound_stmts.rst:117
msgid ""
"The :keyword:`while` statement is used for repeated execution as long as an "
"expression is true:"
msgstr ""

#: ../../reference/compound_stmts.rst:124
msgid ""
"This repeatedly tests the expression and, if it is true, executes the first "
"suite; if the expression is false (which may be the first time it is tested)"
" the suite of the :keyword:`!else` clause, if present, is executed and the "
"loop terminates."
msgstr ""

#: ../../reference/compound_stmts.rst:133
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop"
" without executing the :keyword:`!else` clause's suite.  A "
":keyword:`continue` statement executed in the first suite skips the rest of "
"the suite and goes back to testing the expression."
msgstr ""

#: ../../reference/compound_stmts.rst:142
msgid "The :keyword:`!for` statement"
msgstr ""

#: ../../reference/compound_stmts.rst:153
msgid ""
"The :keyword:`for` statement is used to iterate over the elements of a "
"sequence (such as a string, tuple or list) or other iterable object:"
msgstr ""

#: ../../reference/compound_stmts.rst:160
msgid ""
"The ``starred_list`` expression is evaluated once; it should yield an "
":term:`iterable` object.  An :term:`iterator` is created for that iterable. "
"The first item provided by the iterator is then assigned to the target list "
"using the standard rules for assignments (see :ref:`assignment`), and the "
"suite is executed.  This repeats for each item provided by the iterator.  "
"When the iterator is exhausted, the suite in the :keyword:`!else` clause, if"
" present, is executed, and the loop terminates."
msgstr ""

#: ../../reference/compound_stmts.rst:173
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop"
" without executing the :keyword:`!else` clause's suite.  A "
":keyword:`continue` statement executed in the first suite skips the rest of "
"the suite and continues with the next item, or with the :keyword:`!else` "
"clause if there is no next item."
msgstr ""

#: ../../reference/compound_stmts.rst:179
msgid ""
"The for-loop makes assignments to the variables in the target list. This "
"overwrites all previous assignments to those variables including those made "
"in the suite of the for-loop::"
msgstr ""

#: ../../reference/compound_stmts.rst:193
msgid ""
"Names in the target list are not deleted when the loop is finished, but if "
"the sequence is empty, they will not have been assigned to at all by the "
"loop.  Hint: the built-in type :func:`range` represents immutable arithmetic"
" sequences of integers. For instance, iterating ``range(3)`` successively "
"yields 0, 1, and then 2."
msgstr ""

#: ../../reference/compound_stmts.rst:198
msgid "Starred elements are now allowed in the expression list."
msgstr ""

#: ../../reference/compound_stmts.rst:205
msgid "The :keyword:`!try` statement"
msgstr ""

#: ../../reference/compound_stmts.rst:215
msgid ""
"The :keyword:`!try` statement specifies exception handlers and/or cleanup "
"code for a group of statements:"
msgstr ""

#: ../../reference/compound_stmts.rst:231
msgid ""
"Additional information on exceptions can be found in section "
":ref:`exceptions`, and information on using the :keyword:`raise` statement "
"to generate exceptions may be found in section :ref:`raise`."
msgstr ""

#: ../../reference/compound_stmts.rst:239
msgid ":keyword:`!except` clause"
msgstr ""

#: ../../reference/compound_stmts.rst:241
msgid ""
"The :keyword:`!except` clause(s) specify one or more exception handlers. "
"When no exception occurs in the :keyword:`try` clause, no exception handler "
"is executed. When an exception occurs in the :keyword:`!try` suite, a search"
" for an exception handler is started. This search inspects the "
":keyword:`!except` clauses in turn until one is found that matches the "
"exception. An expression-less :keyword:`!except` clause, if present, must be"
" last; it matches any exception. For an :keyword:`!except` clause with an "
"expression, that expression is evaluated, and the clause matches the "
"exception if the resulting object is \"compatible\" with the exception.  An "
"object is compatible with an exception if the object is the class or a "
":term:`non-virtual base class <abstract base class>` of the exception "
"object, or a tuple containing an item that is the class or a non-virtual "
"base class of the exception object."
msgstr ""

#: ../../reference/compound_stmts.rst:256
msgid ""
"If no :keyword:`!except` clause matches the exception, the search for an "
"exception handler continues in the surrounding code and on the invocation "
"stack.  [#]_"
msgstr ""

#: ../../reference/compound_stmts.rst:260
msgid ""
"If the evaluation of an expression in the header of an :keyword:`!except` "
"clause raises an exception, the original search for a handler is canceled "
"and a search starts for the new exception in the surrounding code and on the"
" call stack (it is treated as if the entire :keyword:`try` statement raised "
"the exception)."
msgstr ""

#: ../../reference/compound_stmts.rst:268
msgid ""
"When a matching :keyword:`!except` clause is found, the exception is "
"assigned to the target specified after the :keyword:`!as` keyword in that "
":keyword:`!except` clause, if present, and the :keyword:`!except` clause's "
"suite is executed. All :keyword:`!except` clauses must have an executable "
"block. When the end of this block is reached, execution continues normally "
"after the entire :keyword:`try` statement. (This means that if two nested "
"handlers exist for the same exception, and the exception occurs in the "
":keyword:`!try` clause of the inner handler, the outer handler will not "
"handle the exception.)"
msgstr ""

#: ../../reference/compound_stmts.rst:279
msgid ""
"When an exception has been assigned using ``as target``, it is cleared at "
"the end of the :keyword:`!except` clause.  This is as if ::"
msgstr ""

#: ../../reference/compound_stmts.rst:285
msgid "was translated to ::"
msgstr ""

#: ../../reference/compound_stmts.rst:293
msgid ""
"This means the exception must be assigned to a different name to be able to "
"refer to it after the :keyword:`!except` clause. Exceptions are cleared "
"because with the traceback attached to them, they form a reference cycle "
"with the stack frame, keeping all locals in that frame alive until the next "
"garbage collection occurs."
msgstr ""

#: ../../reference/compound_stmts.rst:303
msgid ""
"Before an :keyword:`!except` clause's suite is executed, the exception is "
"stored in the :mod:`sys` module, where it can be accessed from within the "
"body of the :keyword:`!except` clause by calling :func:`sys.exception`. When"
" leaving an exception handler, the exception stored in the :mod:`sys` module"
" is reset to its previous value::"
msgstr ""

#: ../../reference/compound_stmts.rst:334
msgid ":keyword:`!except*` clause"
msgstr ""

#: ../../reference/compound_stmts.rst:336
msgid ""
"The :keyword:`!except*` clause(s) are used for handling "
":exc:`ExceptionGroup`\\s. The exception type for matching is interpreted as "
"in the case of :keyword:`except`, but in the case of exception groups we can"
" have partial matches when the type matches some of the exceptions in the "
"group. This means that multiple :keyword:`!except*` clauses can execute, "
"each handling part of the exception group. Each clause executes at most once"
" and handles an exception group of all matching exceptions.  Each exception "
"in the group is handled by at most one :keyword:`!except*` clause, the first"
" that matches it. ::"
msgstr ""

#: ../../reference/compound_stmts.rst:364
msgid ""
"Any remaining exceptions that were not handled by any :keyword:`!except*` "
"clause are re-raised at the end, combined into an exception group along with"
" all exceptions that were raised from within :keyword:`!except*` clauses."
msgstr ""

#: ../../reference/compound_stmts.rst:368
msgid ""
"From version 3.11.4, when the entire :exc:`ExceptionGroup` is handled and "
"only one exception is raised from an :keyword:`!except*` clause, this "
"exception is no longer wrapped to form a new :exc:`ExceptionGroup`."
msgstr ""

#: ../../reference/compound_stmts.rst:372
msgid ""
"If the raised exception is not an exception group and its type matches one "
"of the :keyword:`!except*` clauses, it is caught and wrapped by an exception"
" group with an empty message string. ::"
msgstr ""

#: ../../reference/compound_stmts.rst:383
msgid ""
"An :keyword:`!except*` clause must have a matching type, and this type "
"cannot be a subclass of :exc:`BaseExceptionGroup`. It is not possible to mix"
" :keyword:`except` and :keyword:`!except*` in the same :keyword:`try`. "
":keyword:`break`, :keyword:`continue` and :keyword:`return` cannot appear in"
" an :keyword:`!except*` clause."
msgstr ""

#: ../../reference/compound_stmts.rst:400
msgid ":keyword:`!else` clause"
msgstr ""

#: ../../reference/compound_stmts.rst:402
msgid ""
"The optional :keyword:`!else` clause is executed if the control flow leaves "
"the :keyword:`try` suite, no exception was raised, and no :keyword:`return`,"
" :keyword:`continue`, or :keyword:`break` statement was executed.  "
"Exceptions in the :keyword:`!else` clause are not handled by the preceding "
":keyword:`except` clauses."
msgstr ""

#: ../../reference/compound_stmts.rst:414
msgid ":keyword:`!finally` clause"
msgstr ""

#: ../../reference/compound_stmts.rst:416
msgid ""
"If :keyword:`!finally` is present, it specifies a 'cleanup' handler.  The "
":keyword:`try` clause is executed, including any :keyword:`except` and "
":keyword:`else` clauses.  If an exception occurs in any of the clauses and "
"is not handled, the exception is temporarily saved. The :keyword:`!finally` "
"clause is executed.  If there is a saved exception it is re-raised at the "
"end of the :keyword:`!finally` clause.  If the :keyword:`!finally` clause "
"raises another exception, the saved exception is set as the context of the "
"new exception. If the :keyword:`!finally` clause executes a "
":keyword:`return`, :keyword:`break` or :keyword:`continue` statement, the "
"saved exception is discarded::"
msgstr ""

#: ../../reference/compound_stmts.rst:435
msgid ""
"The exception information is not available to the program during execution "
"of the :keyword:`!finally` clause."
msgstr ""

#: ../../reference/compound_stmts.rst:443
msgid ""
"When a :keyword:`return`, :keyword:`break` or :keyword:`continue` statement "
"is executed in the :keyword:`try` suite of a :keyword:`!try`...\\ "
":keyword:`!finally` statement, the :keyword:`!finally` clause is also "
"executed 'on the way out.'"
msgstr ""

#: ../../reference/compound_stmts.rst:447
msgid ""
"The return value of a function is determined by the last :keyword:`return` "
"statement executed.  Since the :keyword:`!finally` clause always executes, a"
" :keyword:`!return` statement executed in the :keyword:`!finally` clause "
"will always be the last one executed::"
msgstr ""

#: ../../reference/compound_stmts.rst:461
msgid ""
"Prior to Python 3.8, a :keyword:`continue` statement was illegal in the "
":keyword:`!finally` clause due to a problem with the implementation."
msgstr ""

#: ../../reference/compound_stmts.rst:470
msgid "The :keyword:`!with` statement"
msgstr ""

#: ../../reference/compound_stmts.rst:479
msgid ""
"The :keyword:`with` statement is used to wrap the execution of a block with "
"methods defined by a context manager (see section :ref:`context-managers`). "
"This allows common :keyword:`try`...\\ :keyword:`except`...\\ "
":keyword:`finally` usage patterns to be encapsulated for convenient reuse."
msgstr ""

#: ../../reference/compound_stmts.rst:489
msgid ""
"The execution of the :keyword:`with` statement with one \"item\" proceeds as"
" follows:"
msgstr ""

#: ../../reference/compound_stmts.rst:491
msgid ""
"The context expression (the expression given in the :token:`~python-"
"grammar:with_item`) is evaluated to obtain a context manager."
msgstr ""

#: ../../reference/compound_stmts.rst:494
msgid ""
"The context manager's :meth:`~object.__enter__` is loaded for later use."
msgstr ""

#: ../../reference/compound_stmts.rst:496
msgid ""
"The context manager's :meth:`~object.__exit__` is loaded for later use."
msgstr ""

#: ../../reference/compound_stmts.rst:498
msgid "The context manager's :meth:`~object.__enter__` method is invoked."
msgstr ""

#: ../../reference/compound_stmts.rst:500
msgid ""
"If a target was included in the :keyword:`with` statement, the return value "
"from :meth:`~object.__enter__` is assigned to it."
msgstr ""

#: ../../reference/compound_stmts.rst:505
msgid ""
"The :keyword:`with` statement guarantees that if the "
":meth:`~object.__enter__` method returns without an error, then "
":meth:`~object.__exit__` will always be called. Thus, if an error occurs "
"during the assignment to the target list, it will be treated the same as an "
"error occurring within the suite would be. See step 7 below."
msgstr ""

#: ../../reference/compound_stmts.rst:511
msgid "The suite is executed."
msgstr ""

#: ../../reference/compound_stmts.rst:513
msgid ""
"The context manager's :meth:`~object.__exit__` method is invoked.  If an "
"exception caused the suite to be exited, its type, value, and traceback are "
"passed as arguments to :meth:`~object.__exit__`. Otherwise, three "
":const:`None` arguments are supplied."
msgstr ""

#: ../../reference/compound_stmts.rst:518
msgid ""
"If the suite was exited due to an exception, and the return value from the "
":meth:`~object.__exit__` method was false, the exception is reraised.  If "
"the return value was true, the exception is suppressed, and execution "
"continues with the statement following the :keyword:`with` statement."
msgstr ""

#: ../../reference/compound_stmts.rst:523
msgid ""
"If the suite was exited for any reason other than an exception, the return "
"value from :meth:`~object.__exit__` is ignored, and execution proceeds at "
"the normal location for the kind of exit that was taken."
msgstr ""

#: ../../reference/compound_stmts.rst:527
#: ../../reference/compound_stmts.rst:1523
#: ../../reference/compound_stmts.rst:1564
msgid "The following code::"
msgstr ""

#: ../../reference/compound_stmts.rst:532
#: ../../reference/compound_stmts.rst:557
#: ../../reference/compound_stmts.rst:1569
msgid "is semantically equivalent to::"
msgstr ""

#: ../../reference/compound_stmts.rst:551
msgid ""
"With more than one item, the context managers are processed as if multiple "
":keyword:`with` statements were nested::"
msgstr ""

#: ../../reference/compound_stmts.rst:563
msgid ""
"You can also write multi-item context managers in multiple lines if the "
"items are surrounded by parentheses. For example::"
msgstr ""

#: ../../reference/compound_stmts.rst:572
msgid "Support for multiple context expressions."
msgstr ""

#: ../../reference/compound_stmts.rst:575
msgid ""
"Support for using grouping parentheses to break the statement in multiple "
"lines."
msgstr ""

#: ../../reference/compound_stmts.rst:581
msgid ":pep:`343` - The \"with\" statement"
msgstr ""

#: ../../reference/compound_stmts.rst:581
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr ""

#: ../../reference/compound_stmts.rst:587
msgid "The :keyword:`!match` statement"
msgstr ""

#: ../../reference/compound_stmts.rst:601
msgid "The match statement is used for pattern matching.  Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:610
msgid ""
"This section uses single quotes to denote :ref:`soft keywords <soft-"
"keywords>`."
msgstr ""

#: ../../reference/compound_stmts.rst:613
msgid ""
"Pattern matching takes a pattern as input (following ``case``) and a subject"
" value (following ``match``).  The pattern (which may contain subpatterns) "
"is matched against the subject value.  The outcomes are:"
msgstr ""

#: ../../reference/compound_stmts.rst:617
msgid "A match success or failure (also termed a pattern success or failure)."
msgstr ""

#: ../../reference/compound_stmts.rst:619
msgid ""
"Possible binding of matched values to a name.  The prerequisites for this "
"are further discussed below."
msgstr ""

#: ../../reference/compound_stmts.rst:622
msgid ""
"The ``match`` and ``case`` keywords are :ref:`soft keywords <soft-"
"keywords>`."
msgstr ""

#: ../../reference/compound_stmts.rst:626
#: ../../reference/compound_stmts.rst:1183
msgid ":pep:`634` -- Structural Pattern Matching: Specification"
msgstr ""

#: ../../reference/compound_stmts.rst:627
#: ../../reference/compound_stmts.rst:1184
msgid ":pep:`636` -- Structural Pattern Matching: Tutorial"
msgstr ""

#: ../../reference/compound_stmts.rst:631
msgid "Overview"
msgstr ""

#: ../../reference/compound_stmts.rst:633
msgid "Here's an overview of the logical flow of a match statement:"
msgstr ""

#: ../../reference/compound_stmts.rst:636
msgid ""
"The subject expression ``subject_expr`` is evaluated and a resulting subject"
" value obtained. If the subject expression contains a comma, a tuple is "
"constructed using :ref:`the standard rules <typesseq-tuple>`."
msgstr ""

#: ../../reference/compound_stmts.rst:640
msgid ""
"Each pattern in a ``case_block`` is attempted to match with the subject "
"value. The specific rules for success or failure are described below. The "
"match attempt can also bind some or all of the standalone names within the "
"pattern. The precise pattern binding rules vary per pattern type and are "
"specified below.  **Name bindings made during a successful pattern match "
"outlive the executed block and can be used after the match statement**."
msgstr ""

#: ../../reference/compound_stmts.rst:649
msgid ""
"During failed pattern matches, some subpatterns may succeed.  Do not rely on"
" bindings being made for a failed match.  Conversely, do not rely on "
"variables remaining unchanged after a failed match.  The exact behavior is "
"dependent on implementation and may vary.  This is an intentional decision "
"made to allow different implementations to add optimizations."
msgstr ""

#: ../../reference/compound_stmts.rst:656
msgid ""
"If the pattern succeeds, the corresponding guard (if present) is evaluated. "
"In this case all name bindings are guaranteed to have happened."
msgstr ""

#: ../../reference/compound_stmts.rst:659
msgid ""
"If the guard evaluates as true or is missing, the ``block`` inside "
"``case_block`` is executed."
msgstr ""

#: ../../reference/compound_stmts.rst:662
msgid "Otherwise, the next ``case_block`` is attempted as described above."
msgstr ""

#: ../../reference/compound_stmts.rst:664
msgid "If there are no further case blocks, the match statement is completed."
msgstr ""

#: ../../reference/compound_stmts.rst:668
msgid ""
"Users should generally never rely on a pattern being evaluated.  Depending "
"on implementation, the interpreter may cache values or use other "
"optimizations which skip repeated evaluations."
msgstr ""

#: ../../reference/compound_stmts.rst:672
msgid "A sample match statement::"
msgstr ""

#: ../../reference/compound_stmts.rst:688
msgid ""
"In this case, ``if flag`` is a guard.  Read more about that in the next "
"section."
msgstr ""

#: ../../reference/compound_stmts.rst:691
msgid "Guards"
msgstr ""

#: ../../reference/compound_stmts.rst:698
msgid ""
"A ``guard`` (which is part of the ``case``) must succeed for code inside the"
" ``case`` block to execute.  It takes the form: :keyword:`if` followed by an"
" expression."
msgstr ""

#: ../../reference/compound_stmts.rst:703
msgid "The logical flow of a ``case`` block with a ``guard`` follows:"
msgstr ""

#: ../../reference/compound_stmts.rst:705
msgid ""
"Check that the pattern in the ``case`` block succeeded.  If the pattern "
"failed, the ``guard`` is not evaluated and the next ``case`` block is "
"checked."
msgstr ""

#: ../../reference/compound_stmts.rst:709
msgid "If the pattern succeeded, evaluate the ``guard``."
msgstr ""

#: ../../reference/compound_stmts.rst:711
msgid ""
"If the ``guard`` condition evaluates as true, the case block is selected."
msgstr ""

#: ../../reference/compound_stmts.rst:714
msgid ""
"If the ``guard`` condition evaluates as false, the case block is not "
"selected."
msgstr ""

#: ../../reference/compound_stmts.rst:717
msgid ""
"If the ``guard`` raises an exception during evaluation, the exception "
"bubbles up."
msgstr ""

#: ../../reference/compound_stmts.rst:720
msgid ""
"Guards are allowed to have side effects as they are expressions.  Guard "
"evaluation must proceed from the first to the last case block, one at a "
"time, skipping case blocks whose pattern(s) don't all succeed. (I.e., guard "
"evaluation must happen in order.) Guard evaluation must stop once a case "
"block is selected."
msgstr ""

#: ../../reference/compound_stmts.rst:730
msgid "Irrefutable Case Blocks"
msgstr ""

#: ../../reference/compound_stmts.rst:734
msgid ""
"An irrefutable case block is a match-all case block.  A match statement may "
"have at most one irrefutable case block, and it must be last."
msgstr ""

#: ../../reference/compound_stmts.rst:737
msgid ""
"A case block is considered irrefutable if it has no guard and its pattern is"
" irrefutable.  A pattern is considered irrefutable if we can prove from its "
"syntax alone that it will always succeed.  Only the following patterns are "
"irrefutable:"
msgstr ""

#: ../../reference/compound_stmts.rst:742
msgid ":ref:`as-patterns` whose left-hand side is irrefutable"
msgstr ""

#: ../../reference/compound_stmts.rst:744
msgid ":ref:`or-patterns` containing at least one irrefutable pattern"
msgstr ""

#: ../../reference/compound_stmts.rst:746
msgid ":ref:`capture-patterns`"
msgstr ""

#: ../../reference/compound_stmts.rst:748
msgid ":ref:`wildcard-patterns`"
msgstr ""

#: ../../reference/compound_stmts.rst:750
msgid "parenthesized irrefutable patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:754
msgid "Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:761
msgid "This section uses grammar notations beyond standard EBNF:"
msgstr ""

#: ../../reference/compound_stmts.rst:763
msgid "the notation ``SEP.RULE+`` is shorthand for ``RULE (SEP RULE)*``"
msgstr ""

#: ../../reference/compound_stmts.rst:765
msgid "the notation ``!RULE`` is shorthand for a negative lookahead assertion"
msgstr ""

#: ../../reference/compound_stmts.rst:768
msgid "The top-level syntax for ``patterns`` is:"
msgstr ""

#: ../../reference/compound_stmts.rst:782
msgid ""
"The descriptions below will include a description \"in simple terms\" of "
"what a pattern does for illustration purposes (credits to Raymond Hettinger "
"for a document that inspired most of the descriptions). Note that these "
"descriptions are purely for illustration purposes and **may not** reflect "
"the underlying implementation.  Furthermore, they do not cover all valid "
"forms."
msgstr ""

#: ../../reference/compound_stmts.rst:792
msgid "OR Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:794
msgid ""
"An OR pattern is two or more patterns separated by vertical bars ``|``.  "
"Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:800
msgid ""
"Only the final subpattern may be :ref:`irrefutable <irrefutable_case>`, and "
"each subpattern must bind the same set of names to avoid ambiguity."
msgstr ""

#: ../../reference/compound_stmts.rst:803
msgid ""
"An OR pattern matches each of its subpatterns in turn to the subject value, "
"until one succeeds.  The OR pattern is then considered successful.  "
"Otherwise, if none of the subpatterns succeed, the OR pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:807
msgid ""
"In simple terms, ``P1 | P2 | ...`` will try to match ``P1``, if it fails it "
"will try to match ``P2``, succeeding immediately if any succeeds, failing "
"otherwise."
msgstr ""

#: ../../reference/compound_stmts.rst:813
msgid "AS Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:815
msgid ""
"An AS pattern matches an OR pattern on the left of the :keyword:`as` keyword"
" against a subject.  Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:821
msgid ""
"If the OR pattern fails, the AS pattern fails.  Otherwise, the AS pattern "
"binds the subject to the name on the right of the as keyword and succeeds. "
"``capture_pattern`` cannot be a ``_``."
msgstr ""

#: ../../reference/compound_stmts.rst:825
msgid ""
"In simple terms ``P as NAME`` will match with ``P``, and on success it will "
"set ``NAME = <subject>``."
msgstr ""

#: ../../reference/compound_stmts.rst:832
msgid "Literal Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:834
msgid ""
"A literal pattern corresponds to most :ref:`literals <literals>` in Python."
"  Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:847
msgid ""
"The rule ``strings`` and the token ``NUMBER`` are defined in the "
":doc:`standard Python grammar <./grammar>`.  Triple-quoted strings are "
"supported.  Raw strings and byte strings are supported.  :ref:`f-strings` "
"are not supported."
msgstr ""

#: ../../reference/compound_stmts.rst:852
msgid ""
"The forms ``signed_number '+' NUMBER`` and ``signed_number '-' NUMBER`` are "
"for expressing :ref:`complex numbers <imaginary>`; they require a real "
"number on the left and an imaginary number on the right. E.g. ``3 + 4j``."
msgstr ""

#: ../../reference/compound_stmts.rst:856
msgid ""
"In simple terms, ``LITERAL`` will succeed only if ``<subject> == LITERAL``. "
"For the singletons ``None``, ``True`` and ``False``, the :keyword:`is` "
"operator is used."
msgstr ""

#: ../../reference/compound_stmts.rst:862
msgid "Capture Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:864
msgid "A capture pattern binds the subject value to a name. Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:870
msgid ""
"A single underscore ``_`` is not a capture pattern (this is what ``!'_'`` "
"expresses). It is instead treated as a :token:`~python-"
"grammar:wildcard_pattern`."
msgstr ""

#: ../../reference/compound_stmts.rst:874
msgid ""
"In a given pattern, a given name can only be bound once.  E.g. ``case x, x: "
"...`` is invalid while ``case [x] | x: ...`` is allowed."
msgstr ""

#: ../../reference/compound_stmts.rst:877
msgid ""
"Capture patterns always succeed.  The binding follows scoping rules "
"established by the assignment expression operator in :pep:`572`; the name "
"becomes a local variable in the closest containing function scope unless "
"there's an applicable :keyword:`global` or :keyword:`nonlocal` statement."
msgstr ""

#: ../../reference/compound_stmts.rst:882
msgid ""
"In simple terms ``NAME`` will always succeed and it will set ``NAME = "
"<subject>``."
msgstr ""

#: ../../reference/compound_stmts.rst:887
msgid "Wildcard Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:889
msgid ""
"A wildcard pattern always succeeds (matches anything) and binds no name.  "
"Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:895
msgid ""
"``_`` is a :ref:`soft keyword <soft-keywords>` within any pattern, but only "
"within patterns.  It is an identifier, as usual, even within ``match`` "
"subject expressions, ``guard``\\ s, and ``case`` blocks."
msgstr ""

#: ../../reference/compound_stmts.rst:899
msgid "In simple terms, ``_`` will always succeed."
msgstr ""

#: ../../reference/compound_stmts.rst:904
msgid "Value Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:906
msgid "A value pattern represents a named value in Python. Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:914
msgid ""
"The dotted name in the pattern is looked up using standard Python :ref:`name"
" resolution rules <resolve_names>`.  The pattern succeeds if the value found"
" compares equal to the subject value (using the ``==`` equality operator)."
msgstr ""

#: ../../reference/compound_stmts.rst:919
msgid ""
"In simple terms ``NAME1.NAME2`` will succeed only if ``<subject> == "
"NAME1.NAME2``"
msgstr ""

#: ../../reference/compound_stmts.rst:923
msgid ""
"If the same value occurs multiple times in the same match statement, the "
"interpreter may cache the first value found and reuse it rather than repeat "
"the same lookup.  This cache is strictly tied to a given execution of a "
"given match statement."
msgstr ""

#: ../../reference/compound_stmts.rst:931
msgid "Group Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:933
msgid ""
"A group pattern allows users to add parentheses around patterns to emphasize"
" the intended grouping.  Otherwise, it has no additional syntax. Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:940
msgid "In simple terms ``(P)`` has the same effect as ``P``."
msgstr ""

#: ../../reference/compound_stmts.rst:945
msgid "Sequence Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:947
msgid ""
"A sequence pattern contains several subpatterns to be matched against "
"sequence elements. The syntax is similar to the unpacking of a list or "
"tuple."
msgstr ""

#: ../../reference/compound_stmts.rst:958
msgid ""
"There is no difference if parentheses  or square brackets are used for "
"sequence patterns (i.e. ``(...)`` vs ``[...]`` )."
msgstr ""

#: ../../reference/compound_stmts.rst:962
msgid ""
"A single pattern enclosed in parentheses without a trailing comma (e.g. ``(3"
" | 4)``) is a :ref:`group pattern <group-patterns>`. While a single pattern "
"enclosed in square brackets (e.g. ``[3 | 4]``) is still a sequence pattern."
msgstr ""

#: ../../reference/compound_stmts.rst:967
msgid ""
"At most one star subpattern may be in a sequence pattern.  The star "
"subpattern may occur in any position. If no star subpattern is present, the "
"sequence pattern is a fixed-length sequence pattern; otherwise it is a "
"variable-length sequence pattern."
msgstr ""

#: ../../reference/compound_stmts.rst:972
msgid ""
"The following is the logical flow for matching a sequence pattern against a "
"subject value:"
msgstr ""

#: ../../reference/compound_stmts.rst:975
msgid ""
"If the subject value is not a sequence [#]_, the sequence pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:978
msgid ""
"If the subject value is an instance of ``str``, ``bytes`` or ``bytearray`` "
"the sequence pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:981
msgid ""
"The subsequent steps depend on whether the sequence pattern is fixed or "
"variable-length."
msgstr ""

#: ../../reference/compound_stmts.rst:984
msgid "If the sequence pattern is fixed-length:"
msgstr ""

#: ../../reference/compound_stmts.rst:986
msgid ""
"If the length of the subject sequence is not equal to the number of "
"subpatterns, the sequence pattern fails"
msgstr ""

#: ../../reference/compound_stmts.rst:989
msgid ""
"Subpatterns in the sequence pattern are matched to their corresponding items"
" in the subject sequence from left to right.  Matching stops as soon as a "
"subpattern fails.  If all subpatterns succeed in matching their "
"corresponding item, the sequence pattern succeeds."
msgstr ""

#: ../../reference/compound_stmts.rst:994
msgid "Otherwise, if the sequence pattern is variable-length:"
msgstr ""

#: ../../reference/compound_stmts.rst:996
msgid ""
"If the length of the subject sequence is less than the number of non-star "
"subpatterns, the sequence pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:999
msgid ""
"The leading non-star subpatterns are matched to their corresponding items as"
" for fixed-length sequences."
msgstr ""

#: ../../reference/compound_stmts.rst:1002
msgid ""
"If the previous step succeeds, the star subpattern matches a list formed of "
"the remaining subject items, excluding the remaining items corresponding to "
"non-star subpatterns following the star subpattern."
msgstr ""

#: ../../reference/compound_stmts.rst:1006
msgid ""
"Remaining non-star subpatterns are matched to their corresponding subject "
"items, as for a fixed-length sequence."
msgstr ""

#: ../../reference/compound_stmts.rst:1009
msgid ""
"The length of the subject sequence is obtained via :func:`len` (i.e. via the"
" :meth:`__len__` protocol).  This length may be cached by the interpreter in"
" a similar manner as :ref:`value patterns <value-patterns>`."
msgstr ""

#: ../../reference/compound_stmts.rst:1015
msgid ""
"In simple terms ``[P1, P2, P3,`` ... ``, P<N>]`` matches only if all the "
"following happens:"
msgstr ""

#: ../../reference/compound_stmts.rst:1018
msgid "check ``<subject>`` is a sequence"
msgstr ""

#: ../../reference/compound_stmts.rst:1019
msgid "``len(subject) == <N>``"
msgstr ""

#: ../../reference/compound_stmts.rst:1020
msgid ""
"``P1`` matches ``<subject>[0]`` (note that this match can also bind names)"
msgstr ""

#: ../../reference/compound_stmts.rst:1021
msgid ""
"``P2`` matches ``<subject>[1]`` (note that this match can also bind names)"
msgstr ""

#: ../../reference/compound_stmts.rst:1022
msgid "... and so on for the corresponding pattern/element."
msgstr ""

#: ../../reference/compound_stmts.rst:1027
msgid "Mapping Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:1029
msgid ""
"A mapping pattern contains one or more key-value patterns.  The syntax is "
"similar to the construction of a dictionary. Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:1040
msgid ""
"At most one double star pattern may be in a mapping pattern.  The double "
"star pattern must be the last subpattern in the mapping pattern."
msgstr ""

#: ../../reference/compound_stmts.rst:1043
msgid ""
"Duplicate keys in mapping patterns are disallowed. Duplicate literal keys "
"will raise a :exc:`SyntaxError`. Two keys that otherwise have the same value"
" will raise a :exc:`ValueError` at runtime."
msgstr ""

#: ../../reference/compound_stmts.rst:1047
msgid ""
"The following is the logical flow for matching a mapping pattern against a "
"subject value:"
msgstr ""

#: ../../reference/compound_stmts.rst:1050
msgid "If the subject value is not a mapping [#]_,the mapping pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:1052
msgid ""
"If every key given in the mapping pattern is present in the subject mapping,"
" and the pattern for each key matches the corresponding item of the subject "
"mapping, the mapping pattern succeeds."
msgstr ""

#: ../../reference/compound_stmts.rst:1056
msgid ""
"If duplicate keys are detected in the mapping pattern, the pattern is "
"considered invalid. A :exc:`SyntaxError` is raised for duplicate literal "
"values; or a :exc:`ValueError` for named keys of the same value."
msgstr ""

#: ../../reference/compound_stmts.rst:1060
msgid ""
"Key-value pairs are matched using the two-argument form of the mapping "
"subject's ``get()`` method.  Matched key-value pairs must already be present"
" in the mapping, and not created on-the-fly via :meth:`__missing__` or "
":meth:`~object.__getitem__`."
msgstr ""

#: ../../reference/compound_stmts.rst:1065
msgid ""
"In simple terms ``{KEY1: P1, KEY2: P2, ... }`` matches only if all the "
"following happens:"
msgstr ""

#: ../../reference/compound_stmts.rst:1068
msgid "check ``<subject>`` is a mapping"
msgstr ""

#: ../../reference/compound_stmts.rst:1069
msgid "``KEY1 in <subject>``"
msgstr ""

#: ../../reference/compound_stmts.rst:1070
msgid "``P1`` matches ``<subject>[KEY1]``"
msgstr ""

#: ../../reference/compound_stmts.rst:1071
msgid "... and so on for the corresponding KEY/pattern pair."
msgstr ""

#: ../../reference/compound_stmts.rst:1077
msgid "Class Patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:1079
msgid ""
"A class pattern represents a class and its positional and keyword arguments "
"(if any).  Syntax:"
msgstr ""

#: ../../reference/compound_stmts.rst:1090
msgid "The same keyword should not be repeated in class patterns."
msgstr ""

#: ../../reference/compound_stmts.rst:1092
msgid ""
"The following is the logical flow for matching a class pattern against a "
"subject value:"
msgstr ""

#: ../../reference/compound_stmts.rst:1095
msgid ""
"If ``name_or_attr`` is not an instance of the builtin :class:`type` , raise "
":exc:`TypeError`."
msgstr ""

#: ../../reference/compound_stmts.rst:1098
msgid ""
"If the subject value is not an instance of ``name_or_attr`` (tested via "
":func:`isinstance`), the class pattern fails."
msgstr ""

#: ../../reference/compound_stmts.rst:1101
msgid ""
"If no pattern arguments are present, the pattern succeeds.  Otherwise, the "
"subsequent steps depend on whether keyword or positional argument patterns "
"are present."
msgstr ""

#: ../../reference/compound_stmts.rst:1105
msgid ""
"For a number of built-in types (specified below), a single positional "
"subpattern is accepted which will match the entire subject; for these types "
"keyword patterns also work as for other types."
msgstr ""

#: ../../reference/compound_stmts.rst:1109
msgid ""
"If only keyword patterns are present, they are processed as follows, one by "
"one:"
msgstr ""

#: ../../reference/compound_stmts.rst:1112
msgid "I. The keyword is looked up as an attribute on the subject."
msgstr ""

#: ../../reference/compound_stmts.rst:1114
msgid ""
"If this raises an exception other than :exc:`AttributeError`, the exception "
"bubbles up."
msgstr ""

#: ../../reference/compound_stmts.rst:1117
msgid "If this raises :exc:`AttributeError`, the class pattern has failed."
msgstr ""

#: ../../reference/compound_stmts.rst:1119
msgid ""
"Else, the subpattern associated with the keyword pattern is matched against "
"the subject's attribute value.  If this fails, the class pattern fails; if "
"this succeeds, the match proceeds to the next keyword."
msgstr ""

#: ../../reference/compound_stmts.rst:1124
msgid "II. If all keyword patterns succeed, the class pattern succeeds."
msgstr ""

#: ../../reference/compound_stmts.rst:1126
msgid ""
"If any positional patterns are present, they are converted to keyword "
"patterns using the :data:`~object.__match_args__` attribute on the class "
"``name_or_attr`` before matching:"
msgstr ""

#: ../../reference/compound_stmts.rst:1130
msgid "I. The equivalent of ``getattr(cls, \"__match_args__\", ())`` is called."
msgstr ""

#: ../../reference/compound_stmts.rst:1132
msgid "If this raises an exception, the exception bubbles up."
msgstr ""

#: ../../reference/compound_stmts.rst:1134
msgid ""
"If the returned value is not a tuple, the conversion fails and "
":exc:`TypeError` is raised."
msgstr ""

#: ../../reference/compound_stmts.rst:1137
msgid ""
"If there are more positional patterns than ``len(cls.__match_args__)``, "
":exc:`TypeError` is raised."
msgstr ""

#: ../../reference/compound_stmts.rst:1140
msgid ""
"Otherwise, positional pattern ``i`` is converted to a keyword pattern using "
"``__match_args__[i]`` as the keyword.  ``__match_args__[i]`` must be a "
"string; if not :exc:`TypeError` is raised."
msgstr ""

#: ../../reference/compound_stmts.rst:1144
msgid "If there are duplicate keywords, :exc:`TypeError` is raised."
msgstr ""

#: ../../reference/compound_stmts.rst:1146
msgid ":ref:`class-pattern-matching`"
msgstr ""

#: ../../reference/compound_stmts.rst:1149
msgid ""
"II. Once all positional patterns have been converted to keyword patterns,"
msgstr ""

#: ../../reference/compound_stmts.rst:1149
msgid "the match proceeds as if there were only keyword patterns."
msgstr ""

#: ../../reference/compound_stmts.rst:1151
msgid ""
"For the following built-in types the handling of positional subpatterns is "
"different:"
msgstr ""

#: ../../reference/compound_stmts.rst:1154
msgid ":class:`bool`"
msgstr ""

#: ../../reference/compound_stmts.rst:1155
msgid ":class:`bytearray`"
msgstr ""

#: ../../reference/compound_stmts.rst:1156
msgid ":class:`bytes`"
msgstr ""

#: ../../reference/compound_stmts.rst:1157
msgid ":class:`dict`"
msgstr ""

#: ../../reference/compound_stmts.rst:1158
msgid ":class:`float`"
msgstr ""

#: ../../reference/compound_stmts.rst:1159
msgid ":class:`frozenset`"
msgstr ""

#: ../../reference/compound_stmts.rst:1160
msgid ":class:`int`"
msgstr ""

#: ../../reference/compound_stmts.rst:1161
#: ../../reference/compound_stmts.rst:1617
msgid ":class:`list`"
msgstr ""

#: ../../reference/compound_stmts.rst:1162
msgid ":class:`set`"
msgstr ""

#: ../../reference/compound_stmts.rst:1163
msgid ":class:`str`"
msgstr ""

#: ../../reference/compound_stmts.rst:1164
#: ../../reference/compound_stmts.rst:1620
msgid ":class:`tuple`"
msgstr ""

#: ../../reference/compound_stmts.rst:1166
msgid ""
"These classes accept a single positional argument, and the pattern there is "
"matched against the whole object rather than an attribute. For example "
"``int(0|1)`` matches the value ``0``, but not the value ``0.0``."
msgstr ""

#: ../../reference/compound_stmts.rst:1170
msgid ""
"In simple terms ``CLS(P1, attr=P2)`` matches only if the following happens:"
msgstr ""

#: ../../reference/compound_stmts.rst:1172
msgid "``isinstance(<subject>, CLS)``"
msgstr ""

#: ../../reference/compound_stmts.rst:1173
msgid "convert ``P1`` to a keyword pattern using ``CLS.__match_args__``"
msgstr ""

#: ../../reference/compound_stmts.rst:1174
msgid "For each keyword argument ``attr=P2``:"
msgstr ""

#: ../../reference/compound_stmts.rst:1176
msgid "``hasattr(<subject>, \"attr\")``"
msgstr ""

#: ../../reference/compound_stmts.rst:1177
msgid "``P2`` matches ``<subject>.attr``"
msgstr ""

#: ../../reference/compound_stmts.rst:1179
msgid "... and so on for the corresponding keyword argument/pattern pair."
msgstr ""

#: ../../reference/compound_stmts.rst:1194
msgid "Function definitions"
msgstr ""

#: ../../reference/compound_stmts.rst:1209
msgid ""
"A function definition defines a user-defined function object (see section "
":ref:`types`):"
msgstr ""

#: ../../reference/compound_stmts.rst:1228
msgid ""
"A function definition is an executable statement.  Its execution binds the "
"function name in the current local namespace to a function object (a wrapper"
" around the executable code for the function).  This function object "
"contains a reference to the current global namespace as the global namespace"
" to be used when the function is called."
msgstr ""

#: ../../reference/compound_stmts.rst:1234
msgid ""
"The function definition does not execute the function body; this gets "
"executed only when the function is called. [#]_"
msgstr ""

#: ../../reference/compound_stmts.rst:1240
msgid ""
"A function definition may be wrapped by one or more :term:`decorator` "
"expressions. Decorator expressions are evaluated when the function is "
"defined, in the scope that contains the function definition.  The result "
"must be a callable, which is invoked with the function object as the only "
"argument. The returned value is bound to the function name instead of the "
"function object.  Multiple decorators are applied in nested fashion. For "
"example, the following code ::"
msgstr ""

#: ../../reference/compound_stmts.rst:1251
#: ../../reference/compound_stmts.rst:1431
msgid "is roughly equivalent to ::"
msgstr ""

#: ../../reference/compound_stmts.rst:1256
msgid ""
"except that the original function is not temporarily bound to the name "
"``func``."
msgstr ""

#: ../../reference/compound_stmts.rst:1258
msgid ""
"Functions may be decorated with any valid :token:`~python-"
"grammar:assignment_expression`. Previously, the grammar was much more "
"restrictive; see :pep:`614` for details."
msgstr ""

#: ../../reference/compound_stmts.rst:1268
msgid ""
"When one or more :term:`parameters <parameter>` have the form *parameter* "
"``=`` *expression*, the function is said to have \"default parameter "
"values.\"  For a parameter with a default value, the corresponding "
":term:`argument` may be omitted from a call, in which case the parameter's "
"default value is substituted.  If a parameter has a default value, all "
"following parameters up until the \"``*``\" must also have a default value "
"--- this is a syntactic restriction that is not expressed by the grammar."
msgstr ""

#: ../../reference/compound_stmts.rst:1276
msgid ""
"**Default parameter values are evaluated from left to right when the "
"function definition is executed.** This means that the expression is "
"evaluated once, when the function is defined, and that the same \"pre-"
"computed\" value is used for each call.  This is especially important to "
"understand when a default parameter value is a mutable object, such as a "
"list or a dictionary: if the function modifies the object (e.g. by appending"
" an item to a list), the default parameter value is in effect modified.  "
"This is generally not what was intended.  A way around this is to use "
"``None`` as the default, and explicitly test for it in the body of the "
"function, e.g.::"
msgstr ""

#: ../../reference/compound_stmts.rst:1297
msgid ""
"Function call semantics are described in more detail in section "
":ref:`calls`. A function call always assigns values to all parameters "
"mentioned in the parameter list, either from positional arguments, from "
"keyword arguments, or from default values.  If the form \"``*identifier``\" "
"is present, it is initialized to a tuple receiving any excess positional "
"parameters, defaulting to the empty tuple. If the form \"``**identifier``\" "
"is present, it is initialized to a new ordered mapping receiving any excess "
"keyword arguments, defaulting to a new empty mapping of the same type.  "
"Parameters after \"``*``\" or \"``*identifier``\" are keyword-only "
"parameters and may only be passed by keyword arguments.  Parameters before "
"\"``/``\" are positional-only parameters and may only be passed by "
"positional arguments."
msgstr ""

#: ../../reference/compound_stmts.rst:1309
msgid ""
"The ``/`` function parameter syntax may be used to indicate positional-only "
"parameters. See :pep:`570` for details."
msgstr ""

#: ../../reference/compound_stmts.rst:1318
msgid ""
"Parameters may have an :term:`annotation <function annotation>` of the form "
"\"``: expression``\" following the parameter name.  Any parameter may have "
"an annotation, even those of the form ``*identifier`` or ``**identifier``.  "
"Functions may have \"return\" annotation of the form \"``-> expression``\" "
"after the parameter list.  These annotations can be any valid Python "
"expression.  The presence of annotations does not change the semantics of a "
"function.  The annotation values are available as values of a dictionary "
"keyed by the parameters' names in the :attr:`__annotations__` attribute of "
"the function object.  If the ``annotations`` import from :mod:`__future__` "
"is used, annotations are preserved as strings at runtime which enables "
"postponed evaluation.  Otherwise, they are evaluated when the function "
"definition is executed.  In this case annotations may be evaluated in a "
"different order than they appear in the source code."
msgstr ""

#: ../../reference/compound_stmts.rst:1333
msgid ""
"It is also possible to create anonymous functions (functions not bound to a "
"name), for immediate use in expressions.  This uses lambda expressions, "
"described in section :ref:`lambda`.  Note that the lambda expression is "
"merely a shorthand for a simplified function definition; a function defined "
"in a \":keyword:`def`\" statement can be passed around or assigned to "
"another name just like a function defined by a lambda expression.  The "
"\":keyword:`!def`\" form is actually more powerful since it allows the "
"execution of multiple statements and annotations."
msgstr ""

#: ../../reference/compound_stmts.rst:1341
msgid ""
"**Programmer's note:** Functions are first-class objects.  A \"``def``\" "
"statement executed inside a function definition defines a local function "
"that can be returned or passed around.  Free variables used in the nested "
"function can access the local variables of the function containing the def."
"  See section :ref:`naming` for details."
msgstr ""

#: ../../reference/compound_stmts.rst:1350
msgid ":pep:`3107` - Function Annotations"
msgstr ""

#: ../../reference/compound_stmts.rst:1350
msgid "The original specification for function annotations."
msgstr ""

#: ../../reference/compound_stmts.rst:1353
msgid ":pep:`484` - Type Hints"
msgstr ""

#: ../../reference/compound_stmts.rst:1353
msgid "Definition of a standard meaning for annotations: type hints."
msgstr ""

#: ../../reference/compound_stmts.rst:1357
msgid ":pep:`526` - Syntax for Variable Annotations"
msgstr ""

#: ../../reference/compound_stmts.rst:1356
msgid ""
"Ability to type hint variable declarations, including class variables and "
"instance variables."
msgstr ""

#: ../../reference/compound_stmts.rst:1361
msgid ":pep:`563` - Postponed Evaluation of Annotations"
msgstr ""

#: ../../reference/compound_stmts.rst:1360
msgid ""
"Support for forward references within annotations by preserving annotations "
"in a string form at runtime instead of eager evaluation."
msgstr ""

#: ../../reference/compound_stmts.rst:1364
msgid ":pep:`318` - Decorators for Functions and Methods"
msgstr ""

#: ../../reference/compound_stmts.rst:1364
msgid ""
"Function and method decorators were introduced. Class decorators were "
"introduced in :pep:`3129`."
msgstr ""

#: ../../reference/compound_stmts.rst:1370
msgid "Class definitions"
msgstr ""

#: ../../reference/compound_stmts.rst:1385
msgid "A class definition defines a class object (see section :ref:`types`):"
msgstr ""

#: ../../reference/compound_stmts.rst:1392
msgid ""
"A class definition is an executable statement.  The inheritance list usually"
" gives a list of base classes (see :ref:`metaclasses` for more advanced "
"uses), so each item in the list should evaluate to a class object which "
"allows subclassing.  Classes without an inheritance list inherit, by "
"default, from the base class :class:`object`; hence, ::"
msgstr ""

#: ../../reference/compound_stmts.rst:1401
msgid "is equivalent to ::"
msgstr ""

#: ../../reference/compound_stmts.rst:1406
msgid ""
"The class's suite is then executed in a new execution frame (see "
":ref:`naming`), using a newly created local namespace and the original "
"global namespace. (Usually, the suite contains mostly function definitions.)"
"  When the class's suite finishes execution, its execution frame is "
"discarded but its local namespace is saved. [#]_ A class object is then "
"created using the inheritance list for the base classes and the saved local "
"namespace for the attribute dictionary.  The class name is bound to this "
"class object in the original local namespace."
msgstr ""

#: ../../reference/compound_stmts.rst:1415
msgid ""
"The order in which attributes are defined in the class body is preserved in "
"the new class's ``__dict__``.  Note that this is reliable only right after "
"the class is created and only for classes that were defined using the "
"definition syntax."
msgstr ""

#: ../../reference/compound_stmts.rst:1420
msgid ""
"Class creation can be customized heavily using :ref:`metaclasses "
"<metaclasses>`."
msgstr ""

#: ../../reference/compound_stmts.rst:1425
msgid "Classes can also be decorated: just like when decorating functions, ::"
msgstr ""

#: ../../reference/compound_stmts.rst:1436
msgid ""
"The evaluation rules for the decorator expressions are the same as for "
"function decorators.  The result is then bound to the class name."
msgstr ""

#: ../../reference/compound_stmts.rst:1439
msgid ""
"Classes may be decorated with any valid :token:`~python-"
"grammar:assignment_expression`. Previously, the grammar was much more "
"restrictive; see :pep:`614` for details."
msgstr ""

#: ../../reference/compound_stmts.rst:1444
msgid ""
"**Programmer's note:** Variables defined in the class definition are class "
"attributes; they are shared by instances.  Instance attributes can be set in"
" a method with ``self.name = value``.  Both class and instance attributes "
"are accessible through the notation \"``self.name``\", and an instance "
"attribute hides a class attribute with the same name when accessed in this "
"way.  Class attributes can be used as defaults for instance attributes, but "
"using mutable values there can lead to unexpected results.  "
":ref:`Descriptors <descriptors>` can be used to create instance variables "
"with different implementation details."
msgstr ""

#: ../../reference/compound_stmts.rst:1459
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ""

#: ../../reference/compound_stmts.rst:1457
msgid ""
"The proposal that changed the declaration of metaclasses to the current "
"syntax, and the semantics for how classes with metaclasses are constructed."
msgstr ""

#: ../../reference/compound_stmts.rst:1462
msgid ":pep:`3129` - Class Decorators"
msgstr ""

#: ../../reference/compound_stmts.rst:1462
msgid ""
"The proposal that added class decorators.  Function and method decorators "
"were introduced in :pep:`318`."
msgstr ""

#: ../../reference/compound_stmts.rst:1469
msgid "Coroutines"
msgstr ""

#: ../../reference/compound_stmts.rst:1477
msgid "Coroutine function definition"
msgstr ""

#: ../../reference/compound_stmts.rst:1487
msgid ""
"Execution of Python coroutines can be suspended and resumed at many points "
"(see :term:`coroutine`). :keyword:`await` expressions, :keyword:`async for` "
"and :keyword:`async with` can only be used in the body of a coroutine "
"function."
msgstr ""

#: ../../reference/compound_stmts.rst:1491
msgid ""
"Functions defined with ``async def`` syntax are always coroutine functions, "
"even if they do not contain ``await`` or ``async`` keywords."
msgstr ""

#: ../../reference/compound_stmts.rst:1494
msgid ""
"It is a :exc:`SyntaxError` to use a ``yield from`` expression inside the "
"body of a coroutine function."
msgstr ""

#: ../../reference/compound_stmts.rst:1497
msgid "An example of a coroutine function::"
msgstr ""

#: ../../reference/compound_stmts.rst:1503
msgid ""
"``await`` and ``async`` are now keywords; previously they were only treated "
"as such inside the body of a coroutine function."
msgstr ""

#: ../../reference/compound_stmts.rst:1511
msgid "The :keyword:`!async for` statement"
msgstr ""

#: ../../reference/compound_stmts.rst:1516
msgid ""
"An :term:`asynchronous iterable` provides an ``__aiter__`` method that "
"directly returns an :term:`asynchronous iterator`, which can call "
"asynchronous code in its ``__anext__`` method."
msgstr ""

#: ../../reference/compound_stmts.rst:1520
msgid ""
"The ``async for`` statement allows convenient iteration over asynchronous "
"iterables."
msgstr ""

#: ../../reference/compound_stmts.rst:1530
msgid "Is semantically equivalent to::"
msgstr ""

#: ../../reference/compound_stmts.rst:1546
msgid ""
"See also :meth:`~object.__aiter__` and :meth:`~object.__anext__` for "
"details."
msgstr ""

#: ../../reference/compound_stmts.rst:1548
msgid ""
"It is a :exc:`SyntaxError` to use an ``async for`` statement outside the "
"body of a coroutine function."
msgstr ""

#: ../../reference/compound_stmts.rst:1556
msgid "The :keyword:`!async with` statement"
msgstr ""

#: ../../reference/compound_stmts.rst:1561
msgid ""
"An :term:`asynchronous context manager` is a :term:`context manager` that is"
" able to suspend execution in its *enter* and *exit* methods."
msgstr ""

#: ../../reference/compound_stmts.rst:1588
msgid ""
"See also :meth:`~object.__aenter__` and :meth:`~object.__aexit__` for "
"details."
msgstr ""

#: ../../reference/compound_stmts.rst:1590
msgid ""
"It is a :exc:`SyntaxError` to use an ``async with`` statement outside the "
"body of a coroutine function."
msgstr ""

#: ../../reference/compound_stmts.rst:1596
msgid ":pep:`492` - Coroutines with async and await syntax"
msgstr ""

#: ../../reference/compound_stmts.rst:1596
msgid ""
"The proposal that made coroutines a proper standalone concept in Python, and"
" added supporting syntax."
msgstr ""

#: ../../reference/compound_stmts.rst:1601
msgid "Footnotes"
msgstr ""

#: ../../reference/compound_stmts.rst:1602
msgid ""
"The exception is propagated to the invocation stack unless there is a "
":keyword:`finally` clause which happens to raise another exception. That new"
" exception causes the old one to be lost."
msgstr ""

#: ../../reference/compound_stmts.rst:1606
msgid "In pattern matching, a sequence is defined as one of the following:"
msgstr ""

#: ../../reference/compound_stmts.rst:1608
msgid "a class that inherits from :class:`collections.abc.Sequence`"
msgstr ""

#: ../../reference/compound_stmts.rst:1609
msgid ""
"a Python class that has been registered as :class:`collections.abc.Sequence`"
msgstr ""

#: ../../reference/compound_stmts.rst:1610
msgid ""
"a builtin class that has its (CPython) :c:macro:`Py_TPFLAGS_SEQUENCE` bit "
"set"
msgstr ""

#: ../../reference/compound_stmts.rst:1611
#: ../../reference/compound_stmts.rst:1630
msgid "a class that inherits from any of the above"
msgstr ""

#: ../../reference/compound_stmts.rst:1613
msgid "The following standard library classes are sequences:"
msgstr ""

#: ../../reference/compound_stmts.rst:1615
msgid ":class:`array.array`"
msgstr ""

#: ../../reference/compound_stmts.rst:1616
msgid ":class:`collections.deque`"
msgstr ""

#: ../../reference/compound_stmts.rst:1618
msgid ":class:`memoryview`"
msgstr ""

#: ../../reference/compound_stmts.rst:1619
msgid ":class:`range`"
msgstr ""

#: ../../reference/compound_stmts.rst:1622
msgid ""
"Subject values of type ``str``, ``bytes``, and ``bytearray`` do not match "
"sequence patterns."
msgstr ""

#: ../../reference/compound_stmts.rst:1625
msgid "In pattern matching, a mapping is defined as one of the following:"
msgstr ""

#: ../../reference/compound_stmts.rst:1627
msgid "a class that inherits from :class:`collections.abc.Mapping`"
msgstr ""

#: ../../reference/compound_stmts.rst:1628
msgid ""
"a Python class that has been registered as :class:`collections.abc.Mapping`"
msgstr ""

#: ../../reference/compound_stmts.rst:1629
msgid ""
"a builtin class that has its (CPython) :c:macro:`Py_TPFLAGS_MAPPING` bit set"
msgstr ""

#: ../../reference/compound_stmts.rst:1632
msgid ""
"The standard library classes :class:`dict` and "
":class:`types.MappingProxyType` are mappings."
msgstr ""

#: ../../reference/compound_stmts.rst:1635
msgid ""
"A string literal appearing as the first statement in the function body is "
"transformed into the function's :attr:`~function.__doc__` attribute and "
"therefore the function's :term:`docstring`."
msgstr ""

#: ../../reference/compound_stmts.rst:1639
msgid ""
"A string literal appearing as the first statement in the class body is "
"transformed into the namespace's ``__doc__`` item and therefore the class's "
":term:`docstring`."
msgstr ""

#: ../../reference/compound_stmts.rst:7
msgid "compound"
msgstr ""

#: ../../reference/compound_stmts.rst:7 ../../reference/compound_stmts.rst:86
#: ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:129
#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:169
#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:391
#: ../../reference/compound_stmts.rst:438
#: ../../reference/compound_stmts.rst:472
#: ../../reference/compound_stmts.rst:589
#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1372
#: ../../reference/compound_stmts.rst:1473
#: ../../reference/compound_stmts.rst:1507
#: ../../reference/compound_stmts.rst:1552
msgid "statement"
msgstr ""

#: ../../reference/compound_stmts.rst:21
msgid "clause"
msgstr ""

#: ../../reference/compound_stmts.rst:21
msgid "suite"
msgstr ""

#: ../../reference/compound_stmts.rst:21
msgid "; (semicolon)"
msgstr ""

#: ../../reference/compound_stmts.rst:64
msgid "NEWLINE token"
msgstr ""

#: ../../reference/compound_stmts.rst:64
msgid "DEDENT token"
msgstr ""

#: ../../reference/compound_stmts.rst:64
msgid "dangling"
msgstr ""

#: ../../reference/compound_stmts.rst:64 ../../reference/compound_stmts.rst:86
#: ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:391
msgid "else"
msgstr ""

#: ../../reference/compound_stmts.rst:86
#: ../../reference/compound_stmts.rst:589
msgid "if"
msgstr ""

#: ../../reference/compound_stmts.rst:86
#: ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:328
#: ../../reference/compound_stmts.rst:391
#: ../../reference/compound_stmts.rst:409
#: ../../reference/compound_stmts.rst:472
#: ../../reference/compound_stmts.rst:589
#: ../../reference/compound_stmts.rst:1483
msgid "keyword"
msgstr ""

#: ../../reference/compound_stmts.rst:86
msgid "elif"
msgstr ""

#: ../../reference/compound_stmts.rst:86
#: ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:472
#: ../../reference/compound_stmts.rst:589
#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1313
#: ../../reference/compound_stmts.rst:1372
msgid ": (colon)"
msgstr ""

#: ../../reference/compound_stmts.rst:86
#: ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:472
#: ../../reference/compound_stmts.rst:589
#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1372
msgid "compound statement"
msgstr ""

#: ../../reference/compound_stmts.rst:111
msgid "while"
msgstr ""

#: ../../reference/compound_stmts.rst:111
#: ../../reference/compound_stmts.rst:144
msgid "loop"
msgstr ""

#: ../../reference/compound_stmts.rst:129
#: ../../reference/compound_stmts.rst:169
#: ../../reference/compound_stmts.rst:391
#: ../../reference/compound_stmts.rst:438
msgid "break"
msgstr ""

#: ../../reference/compound_stmts.rst:129
#: ../../reference/compound_stmts.rst:169
#: ../../reference/compound_stmts.rst:391
#: ../../reference/compound_stmts.rst:438
msgid "continue"
msgstr ""

#: ../../reference/compound_stmts.rst:144
msgid "for"
msgstr ""

#: ../../reference/compound_stmts.rst:144
msgid "in"
msgstr ""

#: ../../reference/compound_stmts.rst:144
msgid "target"
msgstr ""

#: ../../reference/compound_stmts.rst:144
msgid "list"
msgstr ""

#: ../../reference/compound_stmts.rst:144
#: ../../reference/compound_stmts.rst:299
#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1372
msgid "object"
msgstr ""

#: ../../reference/compound_stmts.rst:144
msgid "sequence"
msgstr ""

#: ../../reference/compound_stmts.rst:190
msgid "built-in function"
msgstr ""

#: ../../reference/compound_stmts.rst:190
msgid "range"
msgstr ""

#: ../../reference/compound_stmts.rst:207
msgid "try"
msgstr ""

#: ../../reference/compound_stmts.rst:207
msgid "except"
msgstr ""

#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:409
msgid "finally"
msgstr ""

#: ../../reference/compound_stmts.rst:207
#: ../../reference/compound_stmts.rst:266
#: ../../reference/compound_stmts.rst:472
#: ../../reference/compound_stmts.rst:589
msgid "as"
msgstr ""

#: ../../reference/compound_stmts.rst:266
msgid "except clause"
msgstr ""

#: ../../reference/compound_stmts.rst:299
msgid "module"
msgstr ""

#: ../../reference/compound_stmts.rst:299
msgid "sys"
msgstr ""

#: ../../reference/compound_stmts.rst:299
msgid "traceback"
msgstr ""

#: ../../reference/compound_stmts.rst:328
msgid "except_star"
msgstr ""

#: ../../reference/compound_stmts.rst:391
#: ../../reference/compound_stmts.rst:438
msgid "return"
msgstr ""

#: ../../reference/compound_stmts.rst:472
msgid "with"
msgstr ""

#: ../../reference/compound_stmts.rst:472
msgid "with statement"
msgstr ""

#: ../../reference/compound_stmts.rst:472
#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1372
msgid ", (comma)"
msgstr ""

#: ../../reference/compound_stmts.rst:589
msgid "match"
msgstr ""

#: ../../reference/compound_stmts.rst:589
msgid "case"
msgstr ""

#: ../../reference/compound_stmts.rst:589
msgid "pattern matching"
msgstr ""

#: ../../reference/compound_stmts.rst:589
msgid "match statement"
msgstr ""

#: ../../reference/compound_stmts.rst:693
msgid "guard"
msgstr ""

#: ../../reference/compound_stmts.rst:732
msgid "irrefutable case block"
msgstr ""

#: ../../reference/compound_stmts.rst:732
msgid "case block"
msgstr ""

#: ../../reference/compound_stmts.rst:756
msgid "! patterns"
msgstr ""

#: ../../reference/compound_stmts.rst:756
msgid "AS pattern, OR pattern, capture pattern, wildcard pattern"
msgstr ""

#: ../../reference/compound_stmts.rst:1187
#: ../../reference/compound_stmts.rst:1263
msgid "parameter"
msgstr ""

#: ../../reference/compound_stmts.rst:1187
#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1237
#: ../../reference/compound_stmts.rst:1263
#: ../../reference/compound_stmts.rst:1292
msgid "function definition"
msgstr ""

#: ../../reference/compound_stmts.rst:1196
msgid "def"
msgstr ""

#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1313
msgid "function"
msgstr ""

#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1372
msgid "definition"
msgstr ""

#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1372
msgid "name"
msgstr ""

#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1372
msgid "binding"
msgstr ""

#: ../../reference/compound_stmts.rst:1196
msgid "user-defined function"
msgstr ""

#: ../../reference/compound_stmts.rst:1196
#: ../../reference/compound_stmts.rst:1372
msgid "() (parentheses)"
msgstr ""

#: ../../reference/compound_stmts.rst:1196
msgid "parameter list"
msgstr ""

#: ../../reference/compound_stmts.rst:1237
#: ../../reference/compound_stmts.rst:1422
msgid "@ (at)"
msgstr ""

#: ../../reference/compound_stmts.rst:1263
msgid "default"
msgstr ""

#: ../../reference/compound_stmts.rst:1263
msgid "value"
msgstr ""

#: ../../reference/compound_stmts.rst:1263
msgid "argument"
msgstr ""

#: ../../reference/compound_stmts.rst:1263
msgid "= (equals)"
msgstr ""

#: ../../reference/compound_stmts.rst:1292
msgid "/ (slash)"
msgstr ""

#: ../../reference/compound_stmts.rst:1292
msgid "* (asterisk)"
msgstr ""

#: ../../reference/compound_stmts.rst:1292
msgid "**"
msgstr ""

#: ../../reference/compound_stmts.rst:1313
msgid "annotations"
msgstr ""

#: ../../reference/compound_stmts.rst:1313
msgid "->"
msgstr ""

#: ../../reference/compound_stmts.rst:1313
msgid "function annotations"
msgstr ""

#: ../../reference/compound_stmts.rst:1331
msgid "lambda"
msgstr ""

#: ../../reference/compound_stmts.rst:1331
msgid "expression"
msgstr ""

#: ../../reference/compound_stmts.rst:1372
msgid "class"
msgstr ""

#: ../../reference/compound_stmts.rst:1372
msgid "execution"
msgstr ""

#: ../../reference/compound_stmts.rst:1372
msgid "frame"
msgstr ""

#: ../../reference/compound_stmts.rst:1372
msgid "inheritance"
msgstr ""

#: ../../reference/compound_stmts.rst:1372
msgid "docstring"
msgstr ""

#: ../../reference/compound_stmts.rst:1372
#: ../../reference/compound_stmts.rst:1422
msgid "class definition"
msgstr ""

#: ../../reference/compound_stmts.rst:1372
msgid "expression list"
msgstr ""

#: ../../reference/compound_stmts.rst:1473
msgid "async def"
msgstr ""

#: ../../reference/compound_stmts.rst:1483
msgid "async"
msgstr ""

#: ../../reference/compound_stmts.rst:1483
msgid "await"
msgstr ""

#: ../../reference/compound_stmts.rst:1507
msgid "async for"
msgstr ""

#: ../../reference/compound_stmts.rst:1552
msgid "async with"
msgstr ""
