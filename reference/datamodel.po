# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:06+0000\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/datamodel.rst:6
msgid "Data model"
msgstr ""

#: ../../reference/datamodel.rst:12
msgid "Objects, values and types"
msgstr ""

#: ../../reference/datamodel.rst:18
msgid ""
":dfn:`Objects` are Python's abstraction for data.  All data in a Python "
"program is represented by objects or by relations between objects. (In a "
"sense, and in conformance to Von Neumann's model of a \"stored program "
"computer\", code is also represented by objects.)"
msgstr ""

#: ../../reference/datamodel.rst:35
msgid ""
"Every object has an identity, a type and a value.  An object's *identity* "
"never changes once it has been created; you may think of it as the object's "
"address in memory.  The :keyword:`is` operator compares the identity of two "
"objects; the :func:`id` function returns an integer representing its "
"identity."
msgstr ""

#: ../../reference/datamodel.rst:42
msgid "For CPython, ``id(x)`` is the memory address where ``x`` is stored."
msgstr ""

#: ../../reference/datamodel.rst:44
msgid ""
"An object's type determines the operations that the object supports (e.g., "
"\"does it have a length?\") and also defines the possible values for objects"
" of that type.  The :func:`type` function returns an object's type (which is"
" an object itself).  Like its identity, an object's :dfn:`type` is also "
"unchangeable. [#]_"
msgstr ""

#: ../../reference/datamodel.rst:50
msgid ""
"The *value* of some objects can change.  Objects whose value can change are "
"said to be *mutable*; objects whose value is unchangeable once they are "
"created are called *immutable*. (The value of an immutable container object "
"that contains a reference to a mutable object can change when the latter's "
"value is changed; however the container is still considered immutable, "
"because the collection of objects it contains cannot be changed.  So, "
"immutability is not strictly the same as having an unchangeable value, it is"
" more subtle.) An object's mutability is determined by its type; for "
"instance, numbers, strings and tuples are immutable, while dictionaries and "
"lists are mutable."
msgstr ""

#: ../../reference/datamodel.rst:65
msgid ""
"Objects are never explicitly destroyed; however, when they become "
"unreachable they may be garbage-collected.  An implementation is allowed to "
"postpone garbage collection or omit it altogether --- it is a matter of "
"implementation quality how garbage collection is implemented, as long as no "
"objects are collected that are still reachable."
msgstr ""

#: ../../reference/datamodel.rst:73
msgid ""
"CPython currently uses a reference-counting scheme with (optional) delayed "
"detection of cyclically linked garbage, which collects most objects as soon "
"as they become unreachable, but is not guaranteed to collect garbage "
"containing circular references.  See the documentation of the :mod:`gc` "
"module for information on controlling the collection of cyclic garbage. "
"Other implementations act differently and CPython may change. Do not depend "
"on immediate finalization of objects when they become unreachable (so you "
"should always close files explicitly)."
msgstr ""

#: ../../reference/datamodel.rst:82
msgid ""
"Note that the use of the implementation's tracing or debugging facilities "
"may keep objects alive that would normally be collectable. Also note that "
"catching an exception with a :keyword:`try`...\\ :keyword:`except` statement"
" may keep objects alive."
msgstr ""

#: ../../reference/datamodel.rst:87
msgid ""
"Some objects contain references to \"external\" resources such as open files"
" or windows.  It is understood that these resources are freed when the "
"object is garbage-collected, but since garbage collection is not guaranteed "
"to happen, such objects also provide an explicit way to release the external"
" resource, usually a :meth:`!close` method. Programs are strongly "
"recommended to explicitly close such objects.  The :keyword:`try`...\\ "
":keyword:`finally` statement and the :keyword:`with` statement provide "
"convenient ways to do this."
msgstr ""

#: ../../reference/datamodel.rst:97
msgid ""
"Some objects contain references to other objects; these are called "
"*containers*. Examples of containers are tuples, lists and dictionaries.  "
"The references are part of a container's value.  In most cases, when we talk"
" about the value of a container, we imply the values, not the identities of "
"the contained objects; however, when we talk about the mutability of a "
"container, only the identities of the immediately contained objects are "
"implied.  So, if an immutable container (like a tuple) contains a reference "
"to a mutable object, its value changes if that mutable object is changed."
msgstr ""

#: ../../reference/datamodel.rst:106
msgid ""
"Types affect almost all aspects of object behavior.  Even the importance of "
"object identity is affected in some sense: for immutable types, operations "
"that compute new values may actually return a reference to any existing "
"object with the same type and value, while for mutable objects this is not "
"allowed.  E.g., after ``a = 1; b = 1``, ``a`` and ``b`` may or may not refer"
" to the same object with the value one, depending on the implementation, but"
" after ``c = []; d = []``, ``c`` and ``d`` are guaranteed to refer to two "
"different, unique, newly created empty lists. (Note that ``c = d = []`` "
"assigns the same object to both ``c`` and ``d``.)"
msgstr ""

#: ../../reference/datamodel.rst:120
msgid "The standard type hierarchy"
msgstr ""

#: ../../reference/datamodel.rst:129
msgid ""
"Below is a list of the types that are built into Python.  Extension modules "
"(written in C, Java, or other languages, depending on the implementation) "
"can define additional types.  Future versions of Python may add types to the"
" type hierarchy (e.g., rational numbers, efficiently stored arrays of "
"integers, etc.), although such additions will often be provided via the "
"standard library instead."
msgstr ""

#: ../../reference/datamodel.rst:140
msgid ""
"Some of the type descriptions below contain a paragraph listing 'special "
"attributes.'  These are attributes that provide access to the implementation"
" and are not intended for general use.  Their definition may change in the "
"future."
msgstr ""

#: ../../reference/datamodel.rst:146 ../../reference/datamodel.rst:148
msgid "None"
msgstr ""

#: ../../reference/datamodel.rst:150
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the built-in name ``None``. It is used to "
"signify the absence of a value in many situations, e.g., it is returned from"
" functions that don't explicitly return anything. Its truth value is false."
msgstr ""

#: ../../reference/datamodel.rst:157 ../../reference/datamodel.rst:159
msgid "NotImplemented"
msgstr ""

#: ../../reference/datamodel.rst:161
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the built-in name :data:`NotImplemented`. "
"Numeric methods and rich comparison methods should return this value if they"
" do not implement the operation for the operands provided.  (The interpreter"
" will then try the reflected operation, or some other fallback, depending on"
" the operator.)  It should not be evaluated in a boolean context."
msgstr ""

#: ../../reference/datamodel.rst:168
msgid "See :ref:`implementing-the-arithmetic-operations` for more details."
msgstr ""

#: ../../reference/datamodel.rst:172
msgid ""
"Evaluating :data:`NotImplemented` in a boolean context is deprecated. While "
"it currently evaluates as true, it will emit a :exc:`DeprecationWarning`. It"
" will raise a :exc:`TypeError` in a future version of Python."
msgstr ""

#: ../../reference/datamodel.rst:179 ../../reference/datamodel.rst:180
msgid "Ellipsis"
msgstr ""

#: ../../reference/datamodel.rst:184
msgid ""
"This type has a single value.  There is a single object with this value. "
"This object is accessed through the literal ``...`` or the built-in name "
"``Ellipsis``.  Its truth value is true."
msgstr ""

#: ../../reference/datamodel.rst:190
msgid ":class:`numbers.Number`"
msgstr ""

#: ../../reference/datamodel.rst:194
msgid ""
"These are created by numeric literals and returned as results by arithmetic "
"operators and arithmetic built-in functions.  Numeric objects are immutable;"
" once created their value never changes.  Python numbers are of course "
"strongly related to mathematical numbers, but subject to the limitations of "
"numerical representation in computers."
msgstr ""

#: ../../reference/datamodel.rst:200
msgid ""
"The string representations of the numeric classes, computed by "
":meth:`~object.__repr__` and :meth:`~object.__str__`, have the following "
"properties:"
msgstr ""

#: ../../reference/datamodel.rst:204
msgid ""
"They are valid numeric literals which, when passed to their class "
"constructor, produce an object having the value of the original numeric."
msgstr ""

#: ../../reference/datamodel.rst:208
msgid "The representation is in base 10, when possible."
msgstr ""

#: ../../reference/datamodel.rst:210
msgid ""
"Leading zeros, possibly excepting a single zero before a decimal point, are "
"not shown."
msgstr ""

#: ../../reference/datamodel.rst:213
msgid ""
"Trailing zeros, possibly excepting a single zero after a decimal point, are "
"not shown."
msgstr ""

#: ../../reference/datamodel.rst:216
msgid "A sign is shown only when the number is negative."
msgstr ""

#: ../../reference/datamodel.rst:218
msgid ""
"Python distinguishes between integers, floating point numbers, and complex "
"numbers:"
msgstr ""

#: ../../reference/datamodel.rst:223
msgid ":class:`numbers.Integral`"
msgstr ""

#: ../../reference/datamodel.rst:227
msgid ""
"These represent elements from the mathematical set of integers (positive and"
" negative)."
msgstr ""

#: ../../reference/datamodel.rst:233
msgid ""
"The rules for integer representation are intended to give the most "
"meaningful interpretation of shift and mask operations involving negative "
"integers."
msgstr ""

#: ../../reference/datamodel.rst:236
msgid "There are two types of integers:"
msgstr ""

#: ../../reference/datamodel.rst:243
msgid "Integers (:class:`int`)"
msgstr ""

#: ../../reference/datamodel.rst:239
msgid ""
"These represent numbers in an unlimited range, subject to available "
"(virtual) memory only.  For the purpose of shift and mask operations, a "
"binary representation is assumed, and negative numbers are represented in a "
"variant of 2's complement which gives the illusion of an infinite string of "
"sign bits extending to the left."
msgstr ""

#: ../../reference/datamodel.rst:256
msgid "Booleans (:class:`bool`)"
msgstr ""

#: ../../reference/datamodel.rst:251
msgid ""
"These represent the truth values False and True.  The two objects "
"representing the values ``False`` and ``True`` are the only Boolean objects."
" The Boolean type is a subtype of the integer type, and Boolean values "
"behave like the values 0 and 1, respectively, in almost all contexts, the "
"exception being that when converted to a string, the strings ``\"False\"`` "
"or ``\"True\"`` are returned, respectively."
msgstr ""

#: ../../reference/datamodel.rst:259
msgid ":class:`numbers.Real` (:class:`float`)"
msgstr ""

#: ../../reference/datamodel.rst:267
msgid ""
"These represent machine-level double precision floating point numbers. You "
"are at the mercy of the underlying machine architecture (and C or Java "
"implementation) for the accepted range and handling of overflow. Python does"
" not support single-precision floating point numbers; the savings in "
"processor and memory usage that are usually the reason for using these are "
"dwarfed by the overhead of using objects in Python, so there is no reason to"
" complicate the language with two kinds of floating point numbers."
msgstr ""

#: ../../reference/datamodel.rst:277
msgid ":class:`numbers.Complex` (:class:`complex`)"
msgstr ""

#: ../../reference/datamodel.rst:283
msgid ""
"These represent complex numbers as a pair of machine-level double precision "
"floating point numbers.  The same caveats apply as for floating point "
"numbers. The real and imaginary parts of a complex number ``z`` can be "
"retrieved through the read-only attributes ``z.real`` and ``z.imag``."
msgstr ""

#: ../../reference/datamodel.rst:290
msgid "Sequences"
msgstr ""

#: ../../reference/datamodel.rst:299
msgid ""
"These represent finite ordered sets indexed by non-negative numbers. The "
"built-in function :func:`len` returns the number of items of a sequence. "
"When the length of a sequence is *n*, the index set contains the numbers 0, "
"1, ..., *n*-1.  Item *i* of sequence *a* is selected by ``a[i]``. Some "
"sequences, including built-in sequences, interpret negative subscripts by "
"adding the sequence length. For example, ``a[-2]`` equals ``a[n-2]``, the "
"second to last item of sequence a with length ``n``."
msgstr ""

#: ../../reference/datamodel.rst:309
msgid ""
"Sequences also support slicing: ``a[i:j]`` selects all items with index *k* "
"such that *i* ``<=`` *k* ``<`` *j*.  When used as an expression, a slice is "
"a sequence of the same type. The comment above about negative indexes also "
"applies to negative slice positions."
msgstr ""

#: ../../reference/datamodel.rst:314
msgid ""
"Some sequences also support \"extended slicing\" with a third \"step\" "
"parameter: ``a[i:j:k]`` selects all items of *a* with index *x* where ``x = "
"i + n*k``, *n* ``>=`` ``0`` and *i* ``<=`` *x* ``<`` *j*."
msgstr ""

#: ../../reference/datamodel.rst:318
msgid "Sequences are distinguished according to their mutability:"
msgstr ""

#: ../../reference/datamodel.rst:322
msgid "Immutable sequences"
msgstr ""

#: ../../reference/datamodel.rst:328
msgid ""
"An object of an immutable sequence type cannot change once it is created.  "
"(If the object contains references to other objects, these other objects may"
" be mutable and may be changed; however, the collection of objects directly "
"referenced by an immutable object cannot change.)"
msgstr ""

#: ../../reference/datamodel.rst:333
msgid "The following types are immutable sequences:"
msgstr ""

#: ../../reference/datamodel.rst:356
msgid "Strings"
msgstr ""

#: ../../reference/datamodel.rst:346
msgid ""
"A string is a sequence of values that represent Unicode code points. All the"
" code points in the range ``U+0000 - U+10FFFF`` can be represented in a "
"string.  Python doesn't have a :c:expr:`char` type; instead, every code "
"point in the string is represented as a string object with length ``1``.  "
"The built-in function :func:`ord` converts a code point from its string form"
" to an integer in the range ``0 - 10FFFF``; :func:`chr` converts an integer "
"in the range ``0 - 10FFFF`` to the corresponding length ``1`` string object."
" :meth:`str.encode` can be used to convert a :class:`str` to :class:`bytes` "
"using the given text encoding, and :meth:`bytes.decode` can be used to "
"achieve the opposite."
msgstr ""

#: ../../reference/datamodel.rst:369
msgid "Tuples"
msgstr ""

#: ../../reference/datamodel.rst:364
msgid ""
"The items of a tuple are arbitrary Python objects. Tuples of two or more "
"items are formed by comma-separated lists of expressions.  A tuple of one "
"item (a 'singleton') can be formed by affixing a comma to an expression (an "
"expression by itself does not create a tuple, since parentheses must be "
"usable for grouping of expressions).  An empty tuple can be formed by an "
"empty pair of parentheses."
msgstr ""

#: ../../reference/datamodel.rst:379
msgid "Bytes"
msgstr ""

#: ../../reference/datamodel.rst:374
msgid ""
"A bytes object is an immutable array.  The items are 8-bit bytes, "
"represented by integers in the range 0 <= x < 256.  Bytes literals (like "
"``b'abc'``) and the built-in :func:`bytes()` constructor can be used to "
"create bytes objects.  Also, bytes objects can be decoded to strings via the"
" :meth:`~bytes.decode` method."
msgstr ""

#: ../../reference/datamodel.rst:382
msgid "Mutable sequences"
msgstr ""

#: ../../reference/datamodel.rst:391
msgid ""
"Mutable sequences can be changed after they are created.  The subscription "
"and slicing notations can be used as the target of assignment and "
":keyword:`del` (delete) statements."
msgstr ""

#: ../../reference/datamodel.rst:399
msgid ""
"The :mod:`collections` and :mod:`array` module provide additional examples "
"of mutable sequence types."
msgstr ""

#: ../../reference/datamodel.rst:402
msgid "There are currently two intrinsic mutable sequence types:"
msgstr ""

#: ../../reference/datamodel.rst:409
msgid "Lists"
msgstr ""

#: ../../reference/datamodel.rst:407
msgid ""
"The items of a list are arbitrary Python objects.  Lists are formed by "
"placing a comma-separated list of expressions in square brackets. (Note that"
" there are no special cases needed to form lists of length 0 or 1.)"
msgstr ""

#: ../../reference/datamodel.rst:418
msgid "Byte Arrays"
msgstr ""

#: ../../reference/datamodel.rst:414
msgid ""
"A bytearray object is a mutable array. They are created by the built-in "
":func:`bytearray` constructor.  Aside from being mutable (and hence "
"unhashable), byte arrays otherwise provide the same interface and "
"functionality as immutable :class:`bytes` objects."
msgstr ""

#: ../../reference/datamodel.rst:421
msgid "Set types"
msgstr ""

#: ../../reference/datamodel.rst:427
msgid ""
"These represent unordered, finite sets of unique, immutable objects. As "
"such, they cannot be indexed by any subscript. However, they can be iterated"
" over, and the built-in function :func:`len` returns the number of items in "
"a set. Common uses for sets are fast membership testing, removing duplicates"
" from a sequence, and computing mathematical operations such as "
"intersection, union, difference, and symmetric difference."
msgstr ""

#: ../../reference/datamodel.rst:434
msgid ""
"For set elements, the same immutability rules apply as for dictionary keys. "
"Note that numeric types obey the normal rules for numeric comparison: if two"
" numbers compare equal (e.g., ``1`` and ``1.0``), only one of them can be "
"contained in a set."
msgstr ""

#: ../../reference/datamodel.rst:439
msgid "There are currently two intrinsic set types:"
msgstr ""

#: ../../reference/datamodel.rst:448
msgid "Sets"
msgstr ""

#: ../../reference/datamodel.rst:445
msgid ""
"These represent a mutable set. They are created by the built-in :func:`set` "
"constructor and can be modified afterwards by several methods, such as "
":meth:`~set.add`."
msgstr ""

#: ../../reference/datamodel.rst:457
msgid "Frozen sets"
msgstr ""

#: ../../reference/datamodel.rst:453
msgid ""
"These represent an immutable set.  They are created by the built-in "
":func:`frozenset` constructor.  As a frozenset is immutable and "
":term:`hashable`, it can be used again as an element of another set, or as a"
" dictionary key."
msgstr ""

#: ../../reference/datamodel.rst:460
msgid "Mappings"
msgstr ""

#: ../../reference/datamodel.rst:467
msgid ""
"These represent finite sets of objects indexed by arbitrary index sets. The "
"subscript notation ``a[k]`` selects the item indexed by ``k`` from the "
"mapping ``a``; this can be used in expressions and as the target of "
"assignments or :keyword:`del` statements. The built-in function :func:`len` "
"returns the number of items in a mapping."
msgstr ""

#: ../../reference/datamodel.rst:473
msgid "There is currently a single intrinsic mapping type:"
msgstr ""

#: ../../reference/datamodel.rst:477
msgid "Dictionaries"
msgstr ""

#: ../../reference/datamodel.rst:481
msgid ""
"These represent finite sets of objects indexed by nearly arbitrary values.  "
"The only types of values not acceptable as keys are values containing lists "
"or dictionaries or other mutable types that are compared by value rather "
"than by object identity, the reason being that the efficient implementation "
"of dictionaries requires a key's hash value to remain constant. Numeric "
"types used for keys obey the normal rules for numeric comparison: if two "
"numbers compare equal (e.g., ``1`` and ``1.0``) then they can be used "
"interchangeably to index the same dictionary entry."
msgstr ""

#: ../../reference/datamodel.rst:490
msgid ""
"Dictionaries preserve insertion order, meaning that keys will be produced in"
" the same order they were added sequentially over the dictionary. Replacing "
"an existing key does not change the order, however removing a key and re-"
"inserting it will add it to the end instead of keeping its old place."
msgstr ""

#: ../../reference/datamodel.rst:495
msgid ""
"Dictionaries are mutable; they can be created by the ``{...}`` notation (see"
" section :ref:`dict`)."
msgstr ""

#: ../../reference/datamodel.rst:502
msgid ""
"The extension modules :mod:`dbm.ndbm` and :mod:`dbm.gnu` provide additional "
"examples of mapping types, as does the :mod:`collections` module."
msgstr ""

#: ../../reference/datamodel.rst:506
msgid ""
"Dictionaries did not preserve insertion order in versions of Python before "
"3.6. In CPython 3.6, insertion order was preserved, but it was considered an"
" implementation detail at that time rather than a language guarantee."
msgstr ""

#: ../../reference/datamodel.rst:513
msgid "Callable types"
msgstr ""

#: ../../reference/datamodel.rst:521
msgid ""
"These are the types to which the function call operation (see section "
":ref:`calls`) can be applied:"
msgstr ""

#: ../../reference/datamodel.rst:528
msgid "User-defined functions"
msgstr ""

#: ../../reference/datamodel.rst:535
msgid ""
"A user-defined function object is created by a function definition (see "
"section :ref:`function`).  It should be called with an argument list "
"containing the same number of items as the function's formal parameter list."
msgstr ""

#: ../../reference/datamodel.rst:541 ../../reference/datamodel.rst:1117
#: ../../reference/datamodel.rst:1308
msgid "Special read-only attributes"
msgstr ""

#: ../../reference/datamodel.rst:551 ../../reference/datamodel.rst:584
msgid "Attribute"
msgstr ""

#: ../../reference/datamodel.rst:552 ../../reference/datamodel.rst:585
msgid "Meaning"
msgstr ""

#: ../../reference/datamodel.rst:555
msgid ""
"A reference to the :class:`dictionary <dict>` that holds the function's "
":ref:`global variables <naming>` -- the global namespace of the module in "
"which the function was defined."
msgstr ""

#: ../../reference/datamodel.rst:560
msgid ""
"``None`` or a :class:`tuple` of cells that contain bindings for the "
"function's free variables."
msgstr ""

#: ../../reference/datamodel.rst:563
msgid ""
"A cell object has the attribute ``cell_contents``. This can be used to get "
"the value of the cell, as well as set the value."
msgstr ""

#: ../../reference/datamodel.rst:567 ../../reference/datamodel.rst:1345
msgid "Special writable attributes"
msgstr ""

#: ../../reference/datamodel.rst:579
msgid "Most of these attributes check the type of the assigned value:"
msgstr ""

#: ../../reference/datamodel.rst:588
msgid ""
"The function's documentation string, or ``None`` if unavailable. Not "
"inherited by subclasses."
msgstr ""

#: ../../reference/datamodel.rst:592
msgid ""
"The function's name. See also: :attr:`__name__ attributes "
"<definition.__name__>`."
msgstr ""

#: ../../reference/datamodel.rst:596
msgid ""
"The function's :term:`qualified name`. See also: :attr:`__qualname__ "
"attributes <definition.__qualname__>`."
msgstr ""

#: ../../reference/datamodel.rst:602
msgid ""
"The name of the module the function was defined in, or ``None`` if "
"unavailable."
msgstr ""

#: ../../reference/datamodel.rst:606
msgid ""
"A :class:`tuple` containing default :term:`parameter` values for those "
"parameters that have defaults, or ``None`` if no parameters have a default "
"value."
msgstr ""

#: ../../reference/datamodel.rst:611
msgid ""
"The :ref:`code object <code-objects>` representing the compiled function "
"body."
msgstr ""

#: ../../reference/datamodel.rst:615
msgid ""
"The namespace supporting arbitrary function attributes. See also: "
":attr:`__dict__ attributes <object.__dict__>`."
msgstr ""

#: ../../reference/datamodel.rst:619
msgid ""
"A :class:`dictionary <dict>` containing annotations of :term:`parameters "
"<parameter>`. The keys of the dictionary are the parameter names, and "
"``'return'`` for the return annotation, if provided. See also: "
":ref:`annotations-howto`."
msgstr ""

#: ../../reference/datamodel.rst:626
msgid ""
"A :class:`dictionary <dict>` containing defaults for keyword-only "
":term:`parameters <parameter>`."
msgstr ""

#: ../../reference/datamodel.rst:629
msgid ""
"Function objects also support getting and setting arbitrary attributes, "
"which can be used, for example, to attach metadata to functions.  Regular "
"attribute dot-notation is used to get and set such attributes."
msgstr ""

#: ../../reference/datamodel.rst:635
msgid ""
"CPython's current implementation only supports function attributes on user-"
"defined functions. Function attributes on :ref:`built-in functions <builtin-"
"functions>` may be supported in the future."
msgstr ""

#: ../../reference/datamodel.rst:640
msgid ""
"Additional information about a function's definition can be retrieved from "
"its :ref:`code object <code-objects>` (accessible via the "
":attr:`~function.__code__` attribute)."
msgstr ""

#: ../../reference/datamodel.rst:648
msgid "Instance methods"
msgstr ""

#: ../../reference/datamodel.rst:655
msgid ""
"An instance method object combines a class, a class instance and any "
"callable object (normally a user-defined function)."
msgstr ""

#: ../../reference/datamodel.rst:665 ../../reference/datamodel.rst:1436
msgid "Special read-only attributes:"
msgstr ""

#: ../../reference/datamodel.rst:670
msgid ""
"Refers to the class instance object to which the method is :ref:`bound "
"<method-binding>`"
msgstr ""

#: ../../reference/datamodel.rst:674
msgid "Refers to the original :ref:`function object <user-defined-funcs>`"
msgstr ""

#: ../../reference/datamodel.rst:677
msgid ""
"The method's documentation (same as :attr:`method.__func__.__doc__ "
"<function.__doc__>`). A :class:`string <str>` if the original function had a"
" docstring, else ``None``."
msgstr ""

#: ../../reference/datamodel.rst:683
msgid ""
"The name of the method (same as :attr:`method.__func__.__name__ "
"<function.__name__>`)"
msgstr ""

#: ../../reference/datamodel.rst:687
msgid ""
"The name of the module the method was defined in, or ``None`` if "
"unavailable."
msgstr ""

#: ../../reference/datamodel.rst:690
msgid ""
"Methods also support accessing (but not setting) the arbitrary function "
"attributes on the underlying :ref:`function object <user-defined-funcs>`."
msgstr ""

#: ../../reference/datamodel.rst:693
msgid ""
"User-defined method objects may be created when getting an attribute of a "
"class (perhaps via an instance of that class), if that attribute is a user-"
"defined :ref:`function object <user-defined-funcs>` or a "
":class:`classmethod` object."
msgstr ""

#: ../../reference/datamodel.rst:700
msgid ""
"When an instance method object is created by retrieving a user-defined "
":ref:`function object <user-defined-funcs>` from a class via one of its "
"instances, its :attr:`~method.__self__` attribute is the instance, and the "
"method object is said to be *bound*.  The new method's "
":attr:`~method.__func__` attribute is the original function object."
msgstr ""

#: ../../reference/datamodel.rst:706
msgid ""
"When an instance method object is created by retrieving a "
":class:`classmethod` object from a class or instance, its "
":attr:`~method.__self__` attribute is the class itself, and its "
":attr:`~method.__func__` attribute is the function object underlying the "
"class method."
msgstr ""

#: ../../reference/datamodel.rst:711
msgid ""
"When an instance method object is called, the underlying function "
"(:attr:`~method.__func__`) is called, inserting the class instance "
"(:attr:`~method.__self__`) in front of the argument list.  For instance, "
"when :class:`!C` is a class which contains a definition for a function "
":meth:`!f`, and ``x`` is an instance of :class:`!C`, calling ``x.f(1)`` is "
"equivalent to calling ``C.f(x, 1)``."
msgstr ""

#: ../../reference/datamodel.rst:718
msgid ""
"When an instance method object is derived from a :class:`classmethod` "
"object, the \"class instance\" stored in :attr:`~method.__self__` will "
"actually be the class itself, so that calling either ``x.f(1)`` or "
"``C.f(1)`` is equivalent to calling ``f(C,1)`` where ``f`` is the underlying"
" function."
msgstr ""

#: ../../reference/datamodel.rst:723
msgid ""
"Note that the transformation from :ref:`function object <user-defined-"
"funcs>` to instance method object happens each time the attribute is "
"retrieved from the instance.  In some cases, a fruitful optimization is to "
"assign the attribute to a local variable and call that local variable. Also "
"notice that this transformation only happens for user-defined functions; "
"other callable objects (and all non-callable objects) are retrieved without "
"transformation.  It is also important to note that user-defined functions "
"which are attributes of a class instance are not converted to bound methods;"
" this *only* happens when the function is an attribute of the class."
msgstr ""

#: ../../reference/datamodel.rst:737
msgid "Generator functions"
msgstr ""

#: ../../reference/datamodel.rst:743
msgid ""
"A function or method which uses the :keyword:`yield` statement (see section "
":ref:`yield`) is called a :dfn:`generator function`.  Such a function, when "
"called, always returns an :term:`iterator` object which can be used to "
"execute the body of the function:  calling the iterator's "
":meth:`iterator.__next__` method will cause the function to execute until it"
" provides a value using the :keyword:`!yield` statement.  When the function "
"executes a :keyword:`return` statement or falls off the end, a "
":exc:`StopIteration` exception is raised and the iterator will have reached "
"the end of the set of values to be returned."
msgstr ""

#: ../../reference/datamodel.rst:755
msgid "Coroutine functions"
msgstr ""

#: ../../reference/datamodel.rst:760
msgid ""
"A function or method which is defined using :keyword:`async def` is called a"
" :dfn:`coroutine function`.  Such a function, when called, returns a "
":term:`coroutine` object.  It may contain :keyword:`await` expressions, as "
"well as :keyword:`async with` and :keyword:`async for` statements. See also "
"the :ref:`coroutine-objects` section."
msgstr ""

#: ../../reference/datamodel.rst:768
msgid "Asynchronous generator functions"
msgstr ""

#: ../../reference/datamodel.rst:774
msgid ""
"A function or method which is defined using :keyword:`async def` and which "
"uses the :keyword:`yield` statement is called a :dfn:`asynchronous generator"
" function`.  Such a function, when called, returns an :term:`asynchronous "
"iterator` object which can be used in an :keyword:`async for` statement to "
"execute the body of the function."
msgstr ""

#: ../../reference/datamodel.rst:780
msgid ""
"Calling the asynchronous iterator's :meth:`aiterator.__anext__ "
"<object.__anext__>` method will return an :term:`awaitable` which when "
"awaited will execute until it provides a value using the :keyword:`yield` "
"expression.  When the function executes an empty :keyword:`return` statement"
" or falls off the end, a :exc:`StopAsyncIteration` exception is raised and "
"the asynchronous iterator will have reached the end of the set of values to "
"be yielded."
msgstr ""

#: ../../reference/datamodel.rst:793
msgid "Built-in functions"
msgstr ""

#: ../../reference/datamodel.rst:800
msgid ""
"A built-in function object is a wrapper around a C function.  Examples of "
"built-in functions are :func:`len` and :func:`math.sin` (:mod:`math` is a "
"standard built-in module). The number and type of the arguments are "
"determined by the C function. Special read-only attributes:"
msgstr ""

#: ../../reference/datamodel.rst:805
msgid ""
":attr:`!__doc__` is the function's documentation string, or ``None`` if "
"unavailable. See :attr:`function.__doc__`."
msgstr ""

#: ../../reference/datamodel.rst:807
msgid ""
":attr:`!__name__` is the function's name. See :attr:`function.__name__`."
msgstr ""

#: ../../reference/datamodel.rst:808
msgid ":attr:`!__self__` is set to ``None`` (but see the next item)."
msgstr ""

#: ../../reference/datamodel.rst:809
msgid ""
":attr:`!__module__` is the name of the module the function was defined in or"
" ``None`` if unavailable. See :attr:`function.__module__`."
msgstr ""

#: ../../reference/datamodel.rst:817
msgid "Built-in methods"
msgstr ""

#: ../../reference/datamodel.rst:824
msgid ""
"This is really a different disguise of a built-in function, this time "
"containing an object passed to the C function as an implicit extra argument."
"  An example of a built-in method is ``alist.append()``, assuming *alist* is"
" a list object. In this case, the special read-only attribute "
":attr:`!__self__` is set to the object denoted by *alist*. (The attribute "
"has the same semantics as it does with :attr:`other instance methods "
"<method.__self__>`.)"
msgstr ""

#: ../../reference/datamodel.rst:833
msgid "Classes"
msgstr ""

#: ../../reference/datamodel.rst:835
msgid ""
"Classes are callable.  These objects normally act as factories for new "
"instances of themselves, but variations are possible for class types that "
"override :meth:`~object.__new__`.  The arguments of the call are passed to "
":meth:`!__new__` and, in the typical case, to :meth:`~object.__init__` to "
"initialize the new instance."
msgstr ""

#: ../../reference/datamodel.rst:843
msgid "Class Instances"
msgstr ""

#: ../../reference/datamodel.rst:845
msgid ""
"Instances of arbitrary classes can be made callable by defining a "
":meth:`~object.__call__` method in their class."
msgstr ""

#: ../../reference/datamodel.rst:850
msgid "Modules"
msgstr ""

#: ../../reference/datamodel.rst:856
msgid ""
"Modules are a basic organizational unit of Python code, and are created by "
"the :ref:`import system <importsystem>` as invoked either by the "
":keyword:`import` statement, or by calling functions such as "
":func:`importlib.import_module` and built-in :func:`__import__`.  A module "
"object has a namespace implemented by a :class:`dictionary <dict>` object "
"(this is the dictionary referenced by the :attr:`~function.__globals__` "
"attribute of functions defined in the module).  Attribute references are "
"translated to lookups in this dictionary, e.g., ``m.x`` is equivalent to "
"``m.__dict__[\"x\"]``. A module object does not contain the code object used"
" to initialize the module (since it isn't needed once the initialization is "
"done)."
msgstr ""

#: ../../reference/datamodel.rst:869
msgid ""
"Attribute assignment updates the module's namespace dictionary, e.g., ``m.x "
"= 1`` is equivalent to ``m.__dict__[\"x\"] = 1``."
msgstr ""

#: ../../reference/datamodel.rst:879
msgid "Predefined (writable) attributes:"
msgstr ""

#: ../../reference/datamodel.rst:882
msgid ":attr:`__name__`"
msgstr ""

#: ../../reference/datamodel.rst:882
msgid "The module's name."
msgstr ""

#: ../../reference/datamodel.rst:886 ../../reference/datamodel.rst:985
msgid ":attr:`__doc__`"
msgstr ""

#: ../../reference/datamodel.rst:885
msgid "The module's documentation string, or ``None`` if unavailable."
msgstr ""

#: ../../reference/datamodel.rst:895
msgid ":attr:`__file__`"
msgstr ""

#: ../../reference/datamodel.rst:889
msgid ""
"The pathname of the file from which the module was loaded, if it was loaded "
"from a file. The :attr:`__file__` attribute may be missing for certain types"
" of modules, such as C modules that are statically linked into the "
"interpreter.  For extension modules loaded dynamically from a shared "
"library, it's the pathname of the shared library file."
msgstr ""

#: ../../reference/datamodel.rst:901 ../../reference/datamodel.rst:993
msgid ":attr:`__annotations__`"
msgstr ""

#: ../../reference/datamodel.rst:898
msgid ""
"A dictionary containing :term:`variable annotations <variable annotation>` "
"collected during module body execution.  For best practices on working with "
":attr:`__annotations__`, please see :ref:`annotations-howto`."
msgstr ""

#: ../../reference/datamodel.rst:905
msgid ""
"Special read-only attribute: :attr:`~object.__dict__` is the module's "
"namespace as a dictionary object."
msgstr ""

#: ../../reference/datamodel.rst:910
msgid ""
"Because of the way CPython clears module dictionaries, the module dictionary"
" will be cleared when the module falls out of scope even if the dictionary "
"still has live references.  To avoid this, copy the dictionary or keep the "
"module around while using its dictionary directly."
msgstr ""

#: ../../reference/datamodel.rst:917
msgid "Custom classes"
msgstr ""

#: ../../reference/datamodel.rst:919
msgid ""
"Custom class types are typically created by class definitions (see section "
":ref:`class`).  A class has a namespace implemented by a dictionary object. "
"Class attribute references are translated to lookups in this dictionary, "
"e.g., ``C.x`` is translated to ``C.__dict__[\"x\"]`` (although there are a "
"number of hooks which allow for other means of locating attributes). When "
"the attribute name is not found there, the attribute search continues in the"
" base classes. This search of the base classes uses the C3 method resolution"
" order which behaves correctly even in the presence of 'diamond' inheritance"
" structures where there are multiple inheritance paths leading back to a "
"common ancestor. Additional details on the C3 MRO used by Python can be "
"found in the documentation accompanying the 2.3 release at "
"https://www.python.org/download/releases/2.3/mro/."
msgstr ""

#: ../../reference/datamodel.rst:943
msgid ""
"When a class attribute reference (for class :class:`!C`, say) would yield a "
"class method object, it is transformed into an instance method object whose "
":attr:`~method.__self__` attribute is :class:`!C`. When it would yield a "
":class:`staticmethod` object, it is transformed into the object wrapped by "
"the static method object. See section :ref:`descriptors` for another way in "
"which attributes retrieved from a class may differ from those actually "
"contained in its :attr:`~object.__dict__`."
msgstr ""

#: ../../reference/datamodel.rst:954
msgid ""
"Class attribute assignments update the class's dictionary, never the "
"dictionary of a base class."
msgstr ""

#: ../../reference/datamodel.rst:959
msgid ""
"A class object can be called (see above) to yield a class instance (see "
"below)."
msgstr ""

#: ../../reference/datamodel.rst:969
msgid "Special attributes:"
msgstr ""

#: ../../reference/datamodel.rst:972
msgid ":attr:`~definition.__name__`"
msgstr ""

#: ../../reference/datamodel.rst:972
msgid "The class name."
msgstr ""

#: ../../reference/datamodel.rst:975
msgid ":attr:`__module__`"
msgstr ""

#: ../../reference/datamodel.rst:975
msgid "The name of the module in which the class was defined."
msgstr ""

#: ../../reference/datamodel.rst:978
msgid ":attr:`~object.__dict__`"
msgstr ""

#: ../../reference/datamodel.rst:978
msgid "The dictionary containing the class's namespace."
msgstr ""

#: ../../reference/datamodel.rst:982
msgid ":attr:`~class.__bases__`"
msgstr ""

#: ../../reference/datamodel.rst:981
msgid ""
"A tuple containing the base classes, in the order of their occurrence in the"
" base class list."
msgstr ""

#: ../../reference/datamodel.rst:985
msgid "The class's documentation string, or ``None`` if undefined."
msgstr ""

#: ../../reference/datamodel.rst:988
msgid ""
"A dictionary containing :term:`variable annotations <variable annotation>` "
"collected during class body execution.  For best practices on working with "
":attr:`__annotations__`, please see :ref:`annotations-howto`."
msgstr ""

#: ../../reference/datamodel.rst:996
msgid "Class instances"
msgstr ""

#: ../../reference/datamodel.rst:1004
msgid ""
"A class instance is created by calling a class object (see above).  A class "
"instance has a namespace implemented as a dictionary which is the first "
"place in which attribute references are searched.  When an attribute is not "
"found there, and the instance's class has an attribute by that name, the "
"search continues with the class attributes.  If a class attribute is found "
"that is a user-defined function object, it is transformed into an instance "
"method object whose :attr:`~method.__self__` attribute is the instance.  "
"Static method and class method objects are also transformed; see above under"
" \"Classes\".  See section :ref:`descriptors` for another way in which "
"attributes of a class retrieved via its instances may differ from the "
"objects actually stored in the class's :attr:`~object.__dict__`.  If no "
"class attribute is found, and the object's class has a "
":meth:`~object.__getattr__` method, that is called to satisfy the lookup."
msgstr ""

#: ../../reference/datamodel.rst:1020
msgid ""
"Attribute assignments and deletions update the instance's dictionary, never "
"a class's dictionary.  If the class has a :meth:`~object.__setattr__` or "
":meth:`~object.__delattr__` method, this is called instead of updating the "
"instance dictionary directly."
msgstr ""

#: ../../reference/datamodel.rst:1030
msgid ""
"Class instances can pretend to be numbers, sequences, or mappings if they "
"have methods with certain special names.  See section :ref:`specialnames`."
msgstr ""

#: ../../reference/datamodel.rst:1037
msgid ""
"Special attributes: :attr:`~object.__dict__` is the attribute dictionary; "
":attr:`~instance.__class__` is the instance's class."
msgstr ""

#: ../../reference/datamodel.rst:1042
msgid "I/O objects (also known as file objects)"
msgstr ""

#: ../../reference/datamodel.rst:1057
msgid ""
"A :term:`file object` represents an open file.  Various shortcuts are "
"available to create file objects: the :func:`open` built-in function, and "
"also :func:`os.popen`, :func:`os.fdopen`, and the "
":meth:`~socket.socket.makefile` method of socket objects (and perhaps by "
"other functions or methods provided by extension modules)."
msgstr ""

#: ../../reference/datamodel.rst:1063
msgid ""
"The objects ``sys.stdin``, ``sys.stdout`` and ``sys.stderr`` are initialized"
" to file objects corresponding to the interpreter's standard input, output "
"and error streams; they are all open in text mode and therefore follow the "
"interface defined by the :class:`io.TextIOBase` abstract class."
msgstr ""

#: ../../reference/datamodel.rst:1071
msgid "Internal types"
msgstr ""

#: ../../reference/datamodel.rst:1077
msgid ""
"A few types used internally by the interpreter are exposed to the user. "
"Their definitions may change with future versions of the interpreter, but "
"they are mentioned here for completeness."
msgstr ""

#: ../../reference/datamodel.rst:1086
msgid "Code objects"
msgstr ""

#: ../../reference/datamodel.rst:1088
msgid ""
"Code objects represent *byte-compiled* executable Python code, or "
":term:`bytecode`. The difference between a code object and a function object"
" is that the function object contains an explicit reference to the "
"function's globals (the module in which it was defined), while a code object"
" contains no context; also the default argument values are stored in the "
"function object, not in the code object (because they represent values "
"calculated at run-time).  Unlike function objects, code objects are "
"immutable and contain no references (directly or indirectly) to mutable "
"objects."
msgstr ""

#: ../../reference/datamodel.rst:1122
msgid "The function name"
msgstr ""

#: ../../reference/datamodel.rst:1125
msgid "The fully qualified function name"
msgstr ""

#: ../../reference/datamodel.rst:1130
msgid ""
"The total number of positional :term:`parameters <parameter>` (including "
"positional-only parameters and parameters with default values) that the "
"function has"
msgstr ""

#: ../../reference/datamodel.rst:1135
msgid ""
"The number of positional-only :term:`parameters <parameter>` (including "
"arguments with default values) that the function has"
msgstr ""

#: ../../reference/datamodel.rst:1139
msgid ""
"The number of keyword-only :term:`parameters <parameter>` (including "
"arguments with default values) that the function has"
msgstr ""

#: ../../reference/datamodel.rst:1143
msgid ""
"The number of :ref:`local variables <naming>` used by the function "
"(including parameters)"
msgstr ""

#: ../../reference/datamodel.rst:1147
msgid ""
"A :class:`tuple` containing the names of the local variables in the function"
" (starting with the parameter names)"
msgstr ""

#: ../../reference/datamodel.rst:1151
msgid ""
"A :class:`tuple` containing the names of :ref:`local variables <naming>` "
"that are referenced by nested functions inside the function"
msgstr ""

#: ../../reference/datamodel.rst:1155
msgid ""
"A :class:`tuple` containing the names of free variables in the function"
msgstr ""

#: ../../reference/datamodel.rst:1158
msgid ""
"A string representing the sequence of :term:`bytecode` instructions in the "
"function"
msgstr ""

#: ../../reference/datamodel.rst:1162
msgid ""
"A :class:`tuple` containing the literals used by the :term:`bytecode` in the"
" function"
msgstr ""

#: ../../reference/datamodel.rst:1166
msgid ""
"A :class:`tuple` containing the names used by the :term:`bytecode` in the "
"function"
msgstr ""

#: ../../reference/datamodel.rst:1170
msgid "The name of the file from which the code was compiled"
msgstr ""

#: ../../reference/datamodel.rst:1173
msgid "The line number of the first line of the function"
msgstr ""

#: ../../reference/datamodel.rst:1176
msgid ""
"A string encoding the mapping from :term:`bytecode` offsets to line numbers."
" For details, see the source code of the interpreter."
msgstr ""

#: ../../reference/datamodel.rst:1180
msgid "The required stack size of the code object"
msgstr ""

#: ../../reference/datamodel.rst:1183
msgid ""
"An :class:`integer <int>` encoding a number of flags for the interpreter."
msgstr ""

#: ../../reference/datamodel.rst:1188
msgid ""
"The following flag bits are defined for :attr:`~codeobject.co_flags`: bit "
"``0x04`` is set if the function uses the ``*arguments`` syntax to accept an "
"arbitrary number of positional arguments; bit ``0x08`` is set if the "
"function uses the ``**keywords`` syntax to accept arbitrary keyword "
"arguments; bit ``0x20`` is set if the function is a generator. See "
":ref:`inspect-module-co-flags` for details on the semantics of each flags "
"that might be present."
msgstr ""

#: ../../reference/datamodel.rst:1196
msgid ""
"Future feature declarations (``from __future__ import division``) also use "
"bits in :attr:`~codeobject.co_flags` to indicate whether a code object was "
"compiled with a particular feature enabled: bit ``0x2000`` is set if the "
"function was compiled with future division enabled; bits ``0x10`` and "
"``0x1000`` were used in earlier versions of Python."
msgstr ""

#: ../../reference/datamodel.rst:1202
msgid ""
"Other bits in :attr:`~codeobject.co_flags` are reserved for internal use."
msgstr ""

#: ../../reference/datamodel.rst:1206
msgid ""
"If a code object represents a function, the first item in "
":attr:`~codeobject.co_consts` is the documentation string of the function, "
"or ``None`` if undefined."
msgstr ""

#: ../../reference/datamodel.rst:1211
msgid "Methods on code objects"
msgstr ""

#: ../../reference/datamodel.rst:1215
msgid ""
"Returns an iterable over the source code positions of each :term:`bytecode` "
"instruction in the code object."
msgstr ""

#: ../../reference/datamodel.rst:1218
msgid ""
"The iterator returns :class:`tuple`\\s containing the ``(start_line, "
"end_line, start_column, end_column)``. The *i-th* tuple corresponds to the "
"position of the source code that compiled to the *i-th* code unit. Column "
"information is 0-indexed utf-8 byte offsets on the given source line."
msgstr ""

#: ../../reference/datamodel.rst:1224
msgid ""
"This positional information can be missing. A non-exhaustive lists of cases "
"where this may happen:"
msgstr ""

#: ../../reference/datamodel.rst:1227
msgid "Running the interpreter with :option:`-X` ``no_debug_ranges``."
msgstr ""

#: ../../reference/datamodel.rst:1228
msgid ""
"Loading a pyc file compiled while using :option:`-X` ``no_debug_ranges``."
msgstr ""

#: ../../reference/datamodel.rst:1229
msgid "Position tuples corresponding to artificial instructions."
msgstr ""

#: ../../reference/datamodel.rst:1230
msgid ""
"Line and column numbers that can't be represented due to implementation "
"specific limitations."
msgstr ""

#: ../../reference/datamodel.rst:1233
msgid ""
"When this occurs, some or all of the tuple elements can be :const:`None`."
msgstr ""

#: ../../reference/datamodel.rst:1239
msgid ""
"This feature requires storing column positions in code objects which may "
"result in a small increase of disk usage of compiled Python files or "
"interpreter memory usage. To avoid storing the extra information and/or "
"deactivate printing the extra traceback information, the :option:`-X` "
"``no_debug_ranges`` command line flag or the :envvar:`PYTHONNODEBUGRANGES` "
"environment variable can be used."
msgstr ""

#: ../../reference/datamodel.rst:1248
msgid ""
"Returns an iterator that yields information about successive ranges of "
":term:`bytecode`\\s. Each item yielded is a ``(start, end, lineno)`` "
":class:`tuple`:"
msgstr ""

#: ../../reference/datamodel.rst:1252
msgid ""
"``start`` (an :class:`int`) represents the offset (inclusive) of the start "
"of the :term:`bytecode` range"
msgstr ""

#: ../../reference/datamodel.rst:1254
msgid ""
"``end`` (an :class:`int`) represents the offset (exclusive) of the end of "
"the :term:`bytecode` range"
msgstr ""

#: ../../reference/datamodel.rst:1256
msgid ""
"``lineno`` is an :class:`int` representing the line number of the "
":term:`bytecode` range, or ``None`` if the bytecodes in the given range have"
" no line number"
msgstr ""

#: ../../reference/datamodel.rst:1260
msgid "The items yielded will have the following properties:"
msgstr ""

#: ../../reference/datamodel.rst:1262
msgid "The first range yielded will have a ``start`` of 0."
msgstr ""

#: ../../reference/datamodel.rst:1263
msgid ""
"The ``(start, end)`` ranges will be non-decreasing and consecutive. That is,"
" for any pair of :class:`tuple`\\s, the ``start`` of the second will be "
"equal to the ``end`` of the first."
msgstr ""

#: ../../reference/datamodel.rst:1266
msgid "No range will be backwards: ``end >= start`` for all triples."
msgstr ""

#: ../../reference/datamodel.rst:1267
msgid ""
"The last :class:`tuple` yielded will have ``end`` equal to the size of the "
":term:`bytecode`."
msgstr ""

#: ../../reference/datamodel.rst:1270
msgid ""
"Zero-width ranges, where ``start == end``, are allowed. Zero-width ranges "
"are used for lines that are present in the source code, but have been "
"eliminated by the :term:`bytecode` compiler."
msgstr ""

#: ../../reference/datamodel.rst:1278
msgid ":pep:`626` - Precise line numbers for debugging and other tools."
msgstr ""

#: ../../reference/datamodel.rst:1279
msgid "The PEP that introduced the :meth:`!co_lines` method."
msgstr ""

#: ../../reference/datamodel.rst:1283
msgid ""
"Return a copy of the code object with new values for the specified fields."
msgstr ""

#: ../../reference/datamodel.rst:1291
msgid "Frame objects"
msgstr ""

#: ../../reference/datamodel.rst:1295
msgid ""
"Frame objects represent execution frames.  They may occur in :ref:`traceback"
" objects <traceback-objects>`, and are also passed to registered trace "
"functions."
msgstr ""

#: ../../reference/datamodel.rst:1313
msgid ""
"Points to the previous stack frame (towards the caller), or ``None`` if this"
" is the bottom stack frame"
msgstr ""

#: ../../reference/datamodel.rst:1317
msgid ""
"The :ref:`code object <code-objects>` being executed in this frame. "
"Accessing this attribute raises an :ref:`auditing event <auditing>` "
"``object.__getattr__`` with arguments ``obj`` and ``\"f_code\"``."
msgstr ""

#: ../../reference/datamodel.rst:1322
msgid ""
"The dictionary used by the frame to look up :ref:`local variables <naming>`"
msgstr ""

#: ../../reference/datamodel.rst:1326
msgid ""
"The dictionary used by the frame to look up :ref:`global variables <naming>`"
msgstr ""

#: ../../reference/datamodel.rst:1330
msgid ""
"The dictionary used by the frame to look up :ref:`built-in (intrinsic) names"
" <naming>`"
msgstr ""

#: ../../reference/datamodel.rst:1334
msgid ""
"The \"precise instruction\" of the frame object (this is an index into the "
":term:`bytecode` string of the :ref:`code object <code-objects>`)"
msgstr ""

#: ../../reference/datamodel.rst:1350
msgid ""
"If not ``None``, this is a function called for various events during code "
"execution (this is used by debuggers). Normally an event is triggered for "
"each new source line (see :attr:`~frame.f_trace_lines`)."
msgstr ""

#: ../../reference/datamodel.rst:1355
msgid ""
"Set this attribute to :const:`False` to disable triggering a tracing event "
"for each source line."
msgstr ""

#: ../../reference/datamodel.rst:1359
msgid ""
"Set this attribute to :const:`True` to allow per-opcode events to be "
"requested. Note that this may lead to undefined interpreter behaviour if "
"exceptions raised by the trace function escape to the function being traced."
msgstr ""

#: ../../reference/datamodel.rst:1365
msgid ""
"The current line number of the frame -- writing to this from within a trace "
"function jumps to the given line (only for the bottom-most frame).  A "
"debugger can implement a Jump command (aka Set Next Statement) by writing to"
" this attribute."
msgstr ""

#: ../../reference/datamodel.rst:1371
msgid "Frame object methods"
msgstr ""

#: ../../reference/datamodel.rst:1373
msgid "Frame objects support one method:"
msgstr ""

#: ../../reference/datamodel.rst:1377
msgid ""
"This method clears all references to :ref:`local variables <naming>` held by"
" the frame.  Also, if the frame belonged to a :term:`generator`, the "
"generator is finalized.  This helps break reference cycles involving frame "
"objects (for example when catching an :ref:`exception <bltin-exceptions>` "
"and storing its :ref:`traceback <traceback-objects>` for later use)."
msgstr ""

#: ../../reference/datamodel.rst:1383
msgid ":exc:`RuntimeError` is raised if the frame is currently executing."
msgstr ""

#: ../../reference/datamodel.rst:1391
msgid "Traceback objects"
msgstr ""

#: ../../reference/datamodel.rst:1404
msgid ""
"Traceback objects represent the stack trace of an :ref:`exception <tut-"
"errors>`. A traceback object is implicitly created when an exception occurs,"
" and may also be explicitly created by calling :class:`types.TracebackType`."
msgstr ""

#: ../../reference/datamodel.rst:1409
msgid "Traceback objects can now be explicitly instantiated from Python code."
msgstr ""

#: ../../reference/datamodel.rst:1412
msgid ""
"For implicitly created tracebacks, when the search for an exception handler "
"unwinds the execution stack, at each unwound level a traceback object is "
"inserted in front of the current traceback.  When an exception handler is "
"entered, the stack trace is made available to the program. (See section "
":ref:`try`.) It is accessible as the third item of the tuple returned by "
":func:`sys.exc_info`, and as the :attr:`~BaseException.__traceback__` "
"attribute of the caught exception."
msgstr ""

#: ../../reference/datamodel.rst:1421
msgid ""
"When the program contains no suitable handler, the stack trace is written "
"(nicely formatted) to the standard error stream; if the interpreter is "
"interactive, it is also made available to the user as "
":data:`sys.last_traceback`."
msgstr ""

#: ../../reference/datamodel.rst:1426
msgid ""
"For explicitly created tracebacks, it is up to the creator of the traceback "
"to determine how the :attr:`~traceback.tb_next` attributes should be linked "
"to form a full stack trace."
msgstr ""

#: ../../reference/datamodel.rst:1441
msgid ""
"Points to the execution :ref:`frame <frame-objects>` of the current level."
msgstr ""

#: ../../reference/datamodel.rst:1444
msgid ""
"Accessing this attribute raises an :ref:`auditing event <auditing>` "
"``object.__getattr__`` with arguments ``obj`` and ``\"tb_frame\"``."
msgstr ""

#: ../../reference/datamodel.rst:1449
msgid "Gives the line number where the exception occurred"
msgstr ""

#: ../../reference/datamodel.rst:1452
msgid "Indicates the \"precise instruction\"."
msgstr ""

#: ../../reference/datamodel.rst:1454
msgid ""
"The line number and last instruction in the traceback may differ from the "
"line number of its :ref:`frame object <frame-objects>` if the exception "
"occurred in a :keyword:`try` statement with no matching except clause or "
"with a :keyword:`finally` clause."
msgstr ""

#: ../../reference/datamodel.rst:1465
msgid ""
"The special writable attribute :attr:`!tb_next` is the next level in the "
"stack trace (towards the frame where the exception occurred), or ``None`` if"
" there is no next level."
msgstr ""

#: ../../reference/datamodel.rst:1469
msgid "This attribute is now writable"
msgstr ""

#: ../../reference/datamodel.rst:1474
msgid "Slice objects"
msgstr ""

#: ../../reference/datamodel.rst:1478
msgid ""
"Slice objects are used to represent slices for :meth:`~object.__getitem__` "
"methods.  They are also created by the built-in :func:`slice` function."
msgstr ""

#: ../../reference/datamodel.rst:1487
msgid ""
"Special read-only attributes: :attr:`~slice.start` is the lower bound; "
":attr:`~slice.stop` is the upper bound; :attr:`~slice.step` is the step "
"value; each is ``None`` if omitted.  These attributes can have any type."
msgstr ""

#: ../../reference/datamodel.rst:1491
msgid "Slice objects support one method:"
msgstr ""

#: ../../reference/datamodel.rst:1495
msgid ""
"This method takes a single integer argument *length* and computes "
"information about the slice that the slice object would describe if applied "
"to a sequence of *length* items.  It returns a tuple of three integers; "
"respectively these are the *start* and *stop* indices and the *step* or "
"stride length of the slice. Missing or out-of-bounds indices are handled in "
"a manner consistent with regular slices."
msgstr ""

#: ../../reference/datamodel.rst:1504
msgid "Static method objects"
msgstr ""

#: ../../reference/datamodel.rst:1506
msgid ""
"Static method objects provide a way of defeating the transformation of "
"function objects to method objects described above. A static method object "
"is a wrapper around any other object, usually a user-defined method object. "
"When a static method object is retrieved from a class or a class instance, "
"the object actually returned is the wrapped object, which is not subject to "
"any further transformation. Static method objects are also callable. Static "
"method objects are created by the built-in :func:`staticmethod` constructor."
msgstr ""

#: ../../reference/datamodel.rst:1516
msgid "Class method objects"
msgstr ""

#: ../../reference/datamodel.rst:1518
msgid ""
"A class method object, like a static method object, is a wrapper around "
"another object that alters the way in which that object is retrieved from "
"classes and class instances. The behaviour of class method objects upon such"
" retrieval is described above, under :ref:`\"instance methods\" <instance-"
"methods>`. Class method objects are created by the built-in "
":func:`classmethod` constructor."
msgstr ""

#: ../../reference/datamodel.rst:1528
msgid "Special method names"
msgstr ""

#: ../../reference/datamodel.rst:1534
msgid ""
"A class can implement certain operations that are invoked by special syntax "
"(such as arithmetic operations or subscripting and slicing) by defining "
"methods with special names. This is Python's approach to :dfn:`operator "
"overloading`, allowing classes to define their own behavior with respect to "
"language operators.  For instance, if a class defines a method named "
":meth:`~object.__getitem__`, and ``x`` is an instance of this class, then "
"``x[i]`` is roughly equivalent to ``type(x).__getitem__(x, i)``.  Except "
"where mentioned, attempts to execute an operation raise an exception when no"
" appropriate method is defined (typically :exc:`AttributeError` or "
":exc:`TypeError`)."
msgstr ""

#: ../../reference/datamodel.rst:1545
msgid ""
"Setting a special method to ``None`` indicates that the corresponding "
"operation is not available.  For example, if a class sets "
":meth:`~object.__iter__` to ``None``, the class is not iterable, so calling "
":func:`iter` on its instances will raise a :exc:`TypeError` (without falling"
" back to :meth:`~object.__getitem__`). [#]_"
msgstr ""

#: ../../reference/datamodel.rst:1551
msgid ""
"When implementing a class that emulates any built-in type, it is important "
"that the emulation only be implemented to the degree that it makes sense for"
" the object being modelled.  For example, some sequences may work well with "
"retrieval of individual elements, but extracting a slice may not make sense."
"  (One example of this is the :class:`~xml.dom.NodeList` interface in the "
"W3C's Document Object Model.)"
msgstr ""

#: ../../reference/datamodel.rst:1562
msgid "Basic customization"
msgstr ""

#: ../../reference/datamodel.rst:1568
msgid ""
"Called to create a new instance of class *cls*.  :meth:`__new__` is a static"
" method (special-cased so you need not declare it as such) that takes the "
"class of which an instance was requested as its first argument.  The "
"remaining arguments are those passed to the object constructor expression "
"(the call to the class).  The return value of :meth:`__new__` should be the "
"new object instance (usually an instance of *cls*)."
msgstr ""

#: ../../reference/datamodel.rst:1575
msgid ""
"Typical implementations create a new instance of the class by invoking the "
"superclass's :meth:`__new__` method using ``super().__new__(cls[, ...])`` "
"with appropriate arguments and then modifying the newly created instance as "
"necessary before returning it."
msgstr ""

#: ../../reference/datamodel.rst:1580
msgid ""
"If :meth:`__new__` is invoked during object construction and it returns an "
"instance of *cls*, then the new instance’s :meth:`__init__` method will be "
"invoked like ``__init__(self[, ...])``, where *self* is the new instance and"
" the remaining arguments are the same as were passed to the object "
"constructor."
msgstr ""

#: ../../reference/datamodel.rst:1585
msgid ""
"If :meth:`__new__` does not return an instance of *cls*, then the new "
"instance's :meth:`__init__` method will not be invoked."
msgstr ""

#: ../../reference/datamodel.rst:1588
msgid ""
":meth:`__new__` is intended mainly to allow subclasses of immutable types "
"(like int, str, or tuple) to customize instance creation.  It is also "
"commonly overridden in custom metaclasses in order to customize class "
"creation."
msgstr ""

#: ../../reference/datamodel.rst:1597
msgid ""
"Called after the instance has been created (by :meth:`__new__`), but before "
"it is returned to the caller.  The arguments are those passed to the class "
"constructor expression.  If a base class has an :meth:`__init__` method, the"
" derived class's :meth:`__init__` method, if any, must explicitly call it to"
" ensure proper initialization of the base class part of the instance; for "
"example: ``super().__init__([args...])``."
msgstr ""

#: ../../reference/datamodel.rst:1604
msgid ""
"Because :meth:`__new__` and :meth:`__init__` work together in constructing "
"objects (:meth:`__new__` to create it, and :meth:`__init__` to customize "
"it), no non-``None`` value may be returned by :meth:`__init__`; doing so "
"will cause a :exc:`TypeError` to be raised at runtime."
msgstr ""

#: ../../reference/datamodel.rst:1617
msgid ""
"Called when the instance is about to be destroyed.  This is also called a "
"finalizer or (improperly) a destructor.  If a base class has a "
":meth:`__del__` method, the derived class's :meth:`__del__` method, if any, "
"must explicitly call it to ensure proper deletion of the base class part of "
"the instance."
msgstr ""

#: ../../reference/datamodel.rst:1623
msgid ""
"It is possible (though not recommended!) for the :meth:`__del__` method to "
"postpone destruction of the instance by creating a new reference to it.  "
"This is called object *resurrection*.  It is implementation-dependent "
"whether :meth:`__del__` is called a second time when a resurrected object is"
" about to be destroyed; the current :term:`CPython` implementation only "
"calls it once."
msgstr ""

#: ../../reference/datamodel.rst:1630
msgid ""
"It is not guaranteed that :meth:`__del__` methods are called for objects "
"that still exist when the interpreter exits."
msgstr ""

#: ../../reference/datamodel.rst:1635
msgid ""
"``del x`` doesn't directly call ``x.__del__()`` --- the former decrements "
"the reference count for ``x`` by one, and the latter is only called when "
"``x``'s reference count reaches zero."
msgstr ""

#: ../../reference/datamodel.rst:1640
msgid ""
"It is possible for a reference cycle to prevent the reference count of an "
"object from going to zero.  In this case, the cycle will be later detected "
"and deleted by the :term:`cyclic garbage collector <garbage collection>`.  A"
" common cause of reference cycles is when an exception has been caught in a "
"local variable.  The frame's locals then reference the exception, which "
"references its own traceback, which references the locals of all frames "
"caught in the traceback."
msgstr ""

#: ../../reference/datamodel.rst:1650
msgid "Documentation for the :mod:`gc` module."
msgstr ""

#: ../../reference/datamodel.rst:1654
msgid ""
"Due to the precarious circumstances under which :meth:`__del__` methods are "
"invoked, exceptions that occur during their execution are ignored, and a "
"warning is printed to ``sys.stderr`` instead.  In particular:"
msgstr ""

#: ../../reference/datamodel.rst:1658
msgid ""
":meth:`__del__` can be invoked when arbitrary code is being executed, "
"including from any arbitrary thread.  If :meth:`__del__` needs to take a "
"lock or invoke any other blocking resource, it may deadlock as the resource "
"may already be taken by the code that gets interrupted to execute "
":meth:`__del__`."
msgstr ""

#: ../../reference/datamodel.rst:1664
msgid ""
":meth:`__del__` can be executed during interpreter shutdown.  As a "
"consequence, the global variables it needs to access (including other "
"modules) may already have been deleted or set to ``None``. Python guarantees"
" that globals whose name begins with a single underscore are deleted from "
"their module before other globals are deleted; if no other references to "
"such globals exist, this may help in assuring that imported modules are "
"still available at the time when the :meth:`__del__` method is called."
msgstr ""

#: ../../reference/datamodel.rst:1679
msgid ""
"Called by the :func:`repr` built-in function to compute the \"official\" "
"string representation of an object.  If at all possible, this should look "
"like a valid Python expression that could be used to recreate an object with"
" the same value (given an appropriate environment).  If this is not "
"possible, a string of the form ``<...some useful description...>`` should be"
" returned. The return value must be a string object. If a class defines "
":meth:`__repr__` but not :meth:`__str__`, then :meth:`__repr__` is also used"
" when an \"informal\" string representation of instances of that class is "
"required."
msgstr ""

#: ../../reference/datamodel.rst:1688
msgid ""
"This is typically used for debugging, so it is important that the "
"representation is information-rich and unambiguous."
msgstr ""

#: ../../reference/datamodel.rst:1699
msgid ""
"Called by :func:`str(object) <str>` and the built-in functions "
":func:`format` and :func:`print` to compute the \"informal\" or nicely "
"printable string representation of an object.  The return value must be a "
":ref:`string <textseq>` object."
msgstr ""

#: ../../reference/datamodel.rst:1704
msgid ""
"This method differs from :meth:`object.__repr__` in that there is no "
"expectation that :meth:`__str__` return a valid Python expression: a more "
"convenient or concise representation can be used."
msgstr ""

#: ../../reference/datamodel.rst:1708
msgid ""
"The default implementation defined by the built-in type :class:`object` "
"calls :meth:`object.__repr__`."
msgstr ""

#: ../../reference/datamodel.rst:1718
msgid ""
"Called by :ref:`bytes <func-bytes>` to compute a byte-string representation "
"of an object. This should return a :class:`bytes` object."
msgstr ""

#: ../../reference/datamodel.rst:1729
msgid ""
"Called by the :func:`format` built-in function, and by extension, evaluation"
" of :ref:`formatted string literals <f-strings>` and the :meth:`str.format` "
"method, to produce a \"formatted\" string representation of an object. The "
"*format_spec* argument is a string that contains a description of the "
"formatting options desired. The interpretation of the *format_spec* argument"
" is up to the type implementing :meth:`__format__`, however most classes "
"will either delegate formatting to one of the built-in types, or use a "
"similar formatting option syntax."
msgstr ""

#: ../../reference/datamodel.rst:1739
msgid ""
"See :ref:`formatspec` for a description of the standard formatting syntax."
msgstr ""

#: ../../reference/datamodel.rst:1741
msgid "The return value must be a string object."
msgstr ""

#: ../../reference/datamodel.rst:1743
msgid ""
"The __format__ method of ``object`` itself raises a :exc:`TypeError` if "
"passed any non-empty string."
msgstr ""

#: ../../reference/datamodel.rst:1747
msgid ""
"``object.__format__(x, '')`` is now equivalent to ``str(x)`` rather than "
"``format(str(x), '')``."
msgstr ""

#: ../../reference/datamodel.rst:1763
msgid ""
"These are the so-called \"rich comparison\" methods. The correspondence "
"between operator symbols and method names is as follows: ``x<y`` calls "
"``x.__lt__(y)``, ``x<=y`` calls ``x.__le__(y)``, ``x==y`` calls "
"``x.__eq__(y)``, ``x!=y`` calls ``x.__ne__(y)``, ``x>y`` calls "
"``x.__gt__(y)``, and ``x>=y`` calls ``x.__ge__(y)``."
msgstr ""

#: ../../reference/datamodel.rst:1769
msgid ""
"A rich comparison method may return the singleton :data:`NotImplemented` if "
"it does not implement the operation for a given pair of arguments. By "
"convention, ``False`` and ``True`` are returned for a successful comparison."
" However, these methods can return any value, so if the comparison operator "
"is used in a Boolean context (e.g., in the condition of an ``if`` "
"statement), Python will call :func:`bool` on the value to determine if the "
"result is true or false."
msgstr ""

#: ../../reference/datamodel.rst:1776
msgid ""
"By default, ``object`` implements :meth:`__eq__` by using ``is``, returning "
":data:`NotImplemented` in the case of a false comparison: ``True if x is y "
"else NotImplemented``. For :meth:`__ne__`, by default it delegates to "
":meth:`__eq__` and inverts the result unless it is :data:`!NotImplemented`."
"  There are no other implied relationships among the comparison operators or"
" default implementations; for example, the truth of ``(x<y or x==y)`` does "
"not imply ``x<=y``. To automatically generate ordering operations from a "
"single root operation, see :func:`functools.total_ordering`."
msgstr ""

#: ../../reference/datamodel.rst:1785
msgid ""
"See the paragraph on :meth:`__hash__` for some important notes on creating "
":term:`hashable` objects which support custom comparison operations and are "
"usable as dictionary keys."
msgstr ""

#: ../../reference/datamodel.rst:1789
msgid ""
"There are no swapped-argument versions of these methods (to be used when the"
" left argument does not support the operation but the right argument does); "
"rather, :meth:`__lt__` and :meth:`__gt__` are each other's reflection, "
":meth:`__le__` and :meth:`__ge__` are each other's reflection, and "
":meth:`__eq__` and :meth:`__ne__` are their own reflection. If the operands "
"are of different types, and the right operand's type is a direct or indirect"
" subclass of the left operand's type, the reflected method of the right "
"operand has priority, otherwise the left operand's method has priority.  "
"Virtual subclassing is not considered."
msgstr ""

#: ../../reference/datamodel.rst:1800
msgid ""
"When no appropriate method returns any value other than "
":data:`NotImplemented`, the ``==`` and ``!=`` operators will fall back to "
"``is`` and ``is not``, respectively."
msgstr ""

#: ../../reference/datamodel.rst:1809
msgid ""
"Called by built-in function :func:`hash` and for operations on members of "
"hashed collections including :class:`set`, :class:`frozenset`, and "
":class:`dict`.  The ``__hash__()`` method should return an integer. The only"
" required property is that objects which compare equal have the same hash "
"value; it is advised to mix together the hash values of the components of "
"the object that also play a part in comparison of objects by packing them "
"into a tuple and hashing the tuple. Example::"
msgstr ""

#: ../../reference/datamodel.rst:1822
msgid ""
":func:`hash` truncates the value returned from an object's custom "
":meth:`__hash__` method to the size of a :c:type:`Py_ssize_t`.  This is "
"typically 8 bytes on 64-bit builds and 4 bytes on 32-bit builds.  If an "
"object's   :meth:`__hash__` must interoperate on builds of different bit "
"sizes, be sure to check the width on all supported builds.  An easy way to "
"do this is with ``python -c \"import sys; print(sys.hash_info.width)\"``."
msgstr ""

#: ../../reference/datamodel.rst:1830
msgid ""
"If a class does not define an :meth:`__eq__` method it should not define a "
":meth:`__hash__` operation either; if it defines :meth:`__eq__` but not "
":meth:`__hash__`, its instances will not be usable as items in hashable "
"collections.  If a class defines mutable objects and implements an "
":meth:`__eq__` method, it should not implement :meth:`__hash__`, since the "
"implementation of :term:`hashable` collections requires that a key's hash "
"value is immutable (if the object's hash value changes, it will be in the "
"wrong hash bucket)."
msgstr ""

#: ../../reference/datamodel.rst:1839
msgid ""
"User-defined classes have :meth:`__eq__` and :meth:`__hash__` methods by "
"default; with them, all objects compare unequal (except with themselves) and"
" ``x.__hash__()`` returns an appropriate value such that ``x == y`` implies "
"both that ``x is y`` and ``hash(x) == hash(y)``."
msgstr ""

#: ../../reference/datamodel.rst:1844
msgid ""
"A class that overrides :meth:`__eq__` and does not define :meth:`__hash__` "
"will have its :meth:`__hash__` implicitly set to ``None``.  When the "
":meth:`__hash__` method of a class is ``None``, instances of the class will "
"raise an appropriate :exc:`TypeError` when a program attempts to retrieve "
"their hash value, and will also be correctly identified as unhashable when "
"checking ``isinstance(obj, collections.abc.Hashable)``."
msgstr ""

#: ../../reference/datamodel.rst:1851
msgid ""
"If a class that overrides :meth:`__eq__` needs to retain the implementation "
"of :meth:`__hash__` from a parent class, the interpreter must be told this "
"explicitly by setting ``__hash__ = <ParentClass>.__hash__``."
msgstr ""

#: ../../reference/datamodel.rst:1855
msgid ""
"If a class that does not override :meth:`__eq__` wishes to suppress hash "
"support, it should include ``__hash__ = None`` in the class definition. A "
"class which defines its own :meth:`__hash__` that explicitly raises a "
":exc:`TypeError` would be incorrectly identified as hashable by an "
"``isinstance(obj, collections.abc.Hashable)`` call."
msgstr ""

#: ../../reference/datamodel.rst:1864
msgid ""
"By default, the :meth:`__hash__` values of str and bytes objects are "
"\"salted\" with an unpredictable random value.  Although they remain "
"constant within an individual Python process, they are not predictable "
"between repeated invocations of Python."
msgstr ""

#: ../../reference/datamodel.rst:1869
msgid ""
"This is intended to provide protection against a denial-of-service caused by"
" carefully chosen inputs that exploit the worst case performance of a dict "
"insertion, *O*\\ (*n*\\ :sup:`2`) complexity.  See "
"http://ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../../reference/datamodel.rst:1874
msgid ""
"Changing hash values affects the iteration order of sets. Python has never "
"made guarantees about this ordering (and it typically varies between 32-bit "
"and 64-bit builds)."
msgstr ""

#: ../../reference/datamodel.rst:1878
msgid "See also :envvar:`PYTHONHASHSEED`."
msgstr ""

#: ../../reference/datamodel.rst:1880
msgid "Hash randomization is enabled by default."
msgstr ""

#: ../../reference/datamodel.rst:1888
msgid ""
"Called to implement truth value testing and the built-in operation "
"``bool()``; should return ``False`` or ``True``.  When this method is not "
"defined, :meth:`~object.__len__` is called, if it is defined, and the object"
" is considered true if its result is nonzero.  If a class defines neither "
":meth:`!__len__` nor :meth:`!__bool__`, all its instances are considered "
"true."
msgstr ""

#: ../../reference/datamodel.rst:1899
msgid "Customizing attribute access"
msgstr ""

#: ../../reference/datamodel.rst:1901
msgid ""
"The following methods can be defined to customize the meaning of attribute "
"access (use of, assignment to, or deletion of ``x.name``) for class "
"instances."
msgstr ""

#: ../../reference/datamodel.rst:1909
msgid ""
"Called when the default attribute access fails with an :exc:`AttributeError`"
" (either :meth:`__getattribute__` raises an :exc:`AttributeError` because "
"*name* is not an instance attribute or an attribute in the class tree for "
"``self``; or :meth:`__get__` of a *name* property raises "
":exc:`AttributeError`).  This method should either return the (computed) "
"attribute value or raise an :exc:`AttributeError` exception."
msgstr ""

#: ../../reference/datamodel.rst:1916
msgid ""
"Note that if the attribute is found through the normal mechanism, "
":meth:`__getattr__` is not called.  (This is an intentional asymmetry "
"between :meth:`__getattr__` and :meth:`__setattr__`.) This is done both for "
"efficiency reasons and because otherwise :meth:`__getattr__` would have no "
"way to access other attributes of the instance.  Note that at least for "
"instance variables, you can fake total control by not inserting any values "
"in the instance attribute dictionary (but instead inserting them in another "
"object).  See the :meth:`__getattribute__` method below for a way to "
"actually get total control over attribute access."
msgstr ""

#: ../../reference/datamodel.rst:1929
msgid ""
"Called unconditionally to implement attribute accesses for instances of the "
"class. If the class also defines :meth:`__getattr__`, the latter will not be"
" called unless :meth:`__getattribute__` either calls it explicitly or raises"
" an :exc:`AttributeError`. This method should return the (computed) "
"attribute value or raise an :exc:`AttributeError` exception. In order to "
"avoid infinite recursion in this method, its implementation should always "
"call the base class method with the same name to access any attributes it "
"needs, for example, ``object.__getattribute__(self, name)``."
msgstr ""

#: ../../reference/datamodel.rst:1940
msgid ""
"This method may still be bypassed when looking up special methods as the "
"result of implicit invocation via language syntax or :ref:`built-in "
"functions <builtin-functions>`. See :ref:`special-lookup`."
msgstr ""

#: ../../reference/datamodel.rst:1945
msgid ""
"Raises an :ref:`auditing event <auditing>` ``object.__getattr__`` with "
"arguments ``obj``, ``name``."
msgstr ""

#: ../../reference/datamodel.rst:1947
msgid ""
"For certain sensitive attribute accesses, raises an :ref:`auditing event "
"<auditing>` ``object.__getattr__`` with arguments ``obj`` and ``name``."
msgstr ""

#: ../../reference/datamodel.rst:1954
msgid ""
"Called when an attribute assignment is attempted.  This is called instead of"
" the normal mechanism (i.e. store the value in the instance dictionary). "
"*name* is the attribute name, *value* is the value to be assigned to it."
msgstr ""

#: ../../reference/datamodel.rst:1958
msgid ""
"If :meth:`__setattr__` wants to assign to an instance attribute, it should "
"call the base class method with the same name, for example, "
"``object.__setattr__(self, name, value)``."
msgstr ""

#: ../../reference/datamodel.rst:1962
msgid ""
"Raises an :ref:`auditing event <auditing>` ``object.__setattr__`` with "
"arguments ``obj``, ``name``, ``value``."
msgstr ""

#: ../../reference/datamodel.rst:1964
msgid ""
"For certain sensitive attribute assignments, raises an :ref:`auditing event "
"<auditing>` ``object.__setattr__`` with arguments ``obj``, ``name``, "
"``value``."
msgstr ""

#: ../../reference/datamodel.rst:1971
msgid ""
"Like :meth:`__setattr__` but for attribute deletion instead of assignment.  "
"This should only be implemented if ``del obj.name`` is meaningful for the "
"object."
msgstr ""

#: ../../reference/datamodel.rst:1974
msgid ""
"Raises an :ref:`auditing event <auditing>` ``object.__delattr__`` with "
"arguments ``obj``, ``name``."
msgstr ""

#: ../../reference/datamodel.rst:1976
msgid ""
"For certain sensitive attribute deletions, raises an :ref:`auditing event "
"<auditing>` ``object.__delattr__`` with arguments ``obj`` and ``name``."
msgstr ""

#: ../../reference/datamodel.rst:1983
msgid ""
"Called when :func:`dir` is called on the object. An iterable must be "
"returned. :func:`dir` converts the returned iterable to a list and sorts it."
msgstr ""

#: ../../reference/datamodel.rst:1988
msgid "Customizing module attribute access"
msgstr ""

#: ../../reference/datamodel.rst:1995
msgid ""
"Special names ``__getattr__`` and ``__dir__`` can be also used to customize "
"access to module attributes. The ``__getattr__`` function at the module "
"level should accept one argument which is the name of an attribute and "
"return the computed value or raise an :exc:`AttributeError`. If an attribute"
" is not found on a module object through the normal lookup, i.e. "
":meth:`object.__getattribute__`, then ``__getattr__`` is searched in the "
"module ``__dict__`` before raising an :exc:`AttributeError`. If found, it is"
" called with the attribute name and the result is returned."
msgstr ""

#: ../../reference/datamodel.rst:2004
msgid ""
"The ``__dir__`` function should accept no arguments, and return an iterable "
"of strings that represents the names accessible on module. If present, this "
"function overrides the standard :func:`dir` search on a module."
msgstr ""

#: ../../reference/datamodel.rst:2008
msgid ""
"For a more fine grained customization of the module behavior (setting "
"attributes, properties, etc.), one can set the ``__class__`` attribute of a "
"module object to a subclass of :class:`types.ModuleType`. For example::"
msgstr ""

#: ../../reference/datamodel.rst:2026
msgid ""
"Defining module ``__getattr__`` and setting module ``__class__`` only affect"
" lookups made using the attribute access syntax -- directly accessing the "
"module globals (whether by code within the module, or via a reference to the"
" module's globals dictionary) is unaffected."
msgstr ""

#: ../../reference/datamodel.rst:2031
msgid "``__class__`` module attribute is now writable."
msgstr ""

#: ../../reference/datamodel.rst:2034
msgid "``__getattr__`` and ``__dir__`` module attributes."
msgstr ""

#: ../../reference/datamodel.rst:2039
msgid ":pep:`562` - Module __getattr__ and __dir__"
msgstr ""

#: ../../reference/datamodel.rst:2040
msgid "Describes the ``__getattr__`` and ``__dir__`` functions on modules."
msgstr ""

#: ../../reference/datamodel.rst:2046
msgid "Implementing Descriptors"
msgstr ""

#: ../../reference/datamodel.rst:2048
msgid ""
"The following methods only apply when an instance of the class containing "
"the method (a so-called *descriptor* class) appears in an *owner* class (the"
" descriptor must be in either the owner's class dictionary or in the class "
"dictionary for one of its parents).  In the examples below, \"the "
"attribute\" refers to the attribute whose name is the key of the property in"
" the owner class' :attr:`~object.__dict__`."
msgstr ""

#: ../../reference/datamodel.rst:2058
msgid ""
"Called to get the attribute of the owner class (class attribute access) or "
"of an instance of that class (instance attribute access). The optional "
"*owner* argument is the owner class, while *instance* is the instance that "
"the attribute was accessed through, or ``None`` when the attribute is "
"accessed through the *owner*."
msgstr ""

#: ../../reference/datamodel.rst:2064
msgid ""
"This method should return the computed attribute value or raise an "
":exc:`AttributeError` exception."
msgstr ""

#: ../../reference/datamodel.rst:2067
msgid ""
":PEP:`252` specifies that :meth:`__get__` is callable with one or two "
"arguments.  Python's own built-in descriptors support this specification; "
"however, it is likely that some third-party tools have descriptors that "
"require both arguments.  Python's own :meth:`__getattribute__` "
"implementation always passes in both arguments whether they are required or "
"not."
msgstr ""

#: ../../reference/datamodel.rst:2076
msgid ""
"Called to set the attribute on an instance *instance* of the owner class to "
"a new value, *value*."
msgstr ""

#: ../../reference/datamodel.rst:2079
msgid ""
"Note, adding :meth:`__set__` or :meth:`__delete__` changes the kind of "
"descriptor to a \"data descriptor\".  See :ref:`descriptor-invocation` for "
"more details."
msgstr ""

#: ../../reference/datamodel.rst:2085
msgid ""
"Called to delete the attribute on an instance *instance* of the owner class."
msgstr ""

#: ../../reference/datamodel.rst:2087
msgid ""
"Instances of descriptors may also have the :attr:`!__objclass__` attribute "
"present:"
msgstr ""

#: ../../reference/datamodel.rst:2092
msgid ""
"The attribute :attr:`!__objclass__` is interpreted by the :mod:`inspect` "
"module as specifying the class where this object was defined (setting this "
"appropriately can assist in runtime introspection of dynamic class "
"attributes). For callables, it may indicate that an instance of the given "
"type (or a subclass) is expected or required as the first positional "
"argument (for example, CPython sets this attribute for unbound methods that "
"are implemented in C)."
msgstr ""

#: ../../reference/datamodel.rst:2103
msgid "Invoking Descriptors"
msgstr ""

#: ../../reference/datamodel.rst:2105
msgid ""
"In general, a descriptor is an object attribute with \"binding behavior\", "
"one whose attribute access has been overridden by methods in the descriptor "
"protocol:  :meth:`~object.__get__`, :meth:`~object.__set__`, and "
":meth:`~object.__delete__`. If any of those methods are defined for an "
"object, it is said to be a descriptor."
msgstr ""

#: ../../reference/datamodel.rst:2111
msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary. For instance, ``a.x`` has a lookup "
"chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and"
" continuing through the base classes of ``type(a)`` excluding metaclasses."
msgstr ""

#: ../../reference/datamodel.rst:2116
msgid ""
"However, if the looked-up value is an object defining one of the descriptor "
"methods, then Python may override the default behavior and invoke the "
"descriptor method instead.  Where this occurs in the precedence chain "
"depends on which descriptor methods were defined and how they were called."
msgstr ""

#: ../../reference/datamodel.rst:2121
msgid ""
"The starting point for descriptor invocation is a binding, ``a.x``. How the "
"arguments are assembled depends on ``a``:"
msgstr ""

#: ../../reference/datamodel.rst:2126
msgid "Direct Call"
msgstr ""

#: ../../reference/datamodel.rst:2125
msgid ""
"The simplest and least common call is when user code directly invokes a "
"descriptor method:    ``x.__get__(a)``."
msgstr ""

#: ../../reference/datamodel.rst:2130
msgid "Instance Binding"
msgstr ""

#: ../../reference/datamodel.rst:2129
msgid ""
"If binding to an object instance, ``a.x`` is transformed into the call: "
"``type(a).__dict__['x'].__get__(a, type(a))``."
msgstr ""

#: ../../reference/datamodel.rst:2134
msgid "Class Binding"
msgstr ""

#: ../../reference/datamodel.rst:2133
msgid ""
"If binding to a class, ``A.x`` is transformed into the call: "
"``A.__dict__['x'].__get__(None, A)``."
msgstr ""

#: ../../reference/datamodel.rst:2140
msgid "Super Binding"
msgstr ""

#: ../../reference/datamodel.rst:2137
msgid ""
"A dotted lookup such as ``super(A, a).x`` searches ``a.__class__.__mro__`` "
"for a base class ``B`` following ``A`` and then returns "
"``B.__dict__['x'].__get__(a, A)``.  If not a descriptor, ``x`` is returned "
"unchanged."
msgstr ""

#: ../../reference/datamodel.rst:2174
msgid ""
"For instance bindings, the precedence of descriptor invocation depends on "
"which descriptor methods are defined.  A descriptor can define any "
"combination of :meth:`~object.__get__`, :meth:`~object.__set__` and "
":meth:`~object.__delete__`.  If it does not define :meth:`!__get__`, then "
"accessing the attribute will return the descriptor object itself unless "
"there is a value in the object's instance dictionary.  If the descriptor "
"defines :meth:`!__set__` and/or :meth:`!__delete__`, it is a data "
"descriptor; if it defines neither, it is a non-data descriptor.  Normally, "
"data descriptors define both :meth:`!__get__` and :meth:`!__set__`, while "
"non-data descriptors have just the :meth:`!__get__` method.  Data "
"descriptors with :meth:`!__get__` and :meth:`!__set__` (and/or "
":meth:`!__delete__`) defined always override a redefinition in an instance "
"dictionary.  In contrast, non-data descriptors can be overridden by "
"instances."
msgstr ""

#: ../../reference/datamodel.rst:2189
msgid ""
"Python methods (including those decorated with :func:`@staticmethod "
"<staticmethod>` and :func:`@classmethod <classmethod>`) are implemented as "
"non-data descriptors.  Accordingly, instances can redefine and override "
"methods.  This allows individual instances to acquire behaviors that differ "
"from other instances of the same class."
msgstr ""

#: ../../reference/datamodel.rst:2195
msgid ""
"The :func:`property` function is implemented as a data descriptor. "
"Accordingly, instances cannot override the behavior of a property."
msgstr ""

#: ../../reference/datamodel.rst:2202
msgid "__slots__"
msgstr ""

#: ../../reference/datamodel.rst:2204
msgid ""
"*__slots__* allow us to explicitly declare data members (like properties) "
"and deny the creation of :attr:`~object.__dict__` and *__weakref__* (unless "
"explicitly declared in *__slots__* or available in a parent.)"
msgstr ""

#: ../../reference/datamodel.rst:2208
msgid ""
"The space saved over using :attr:`~object.__dict__` can be significant. "
"Attribute lookup speed can be significantly improved as well."
msgstr ""

#: ../../reference/datamodel.rst:2213
msgid ""
"This class variable can be assigned a string, iterable, or sequence of "
"strings with variable names used by instances.  *__slots__* reserves space "
"for the declared variables and prevents the automatic creation of "
":attr:`~object.__dict__` and *__weakref__* for each instance."
msgstr ""

#: ../../reference/datamodel.rst:2222
msgid "Notes on using *__slots__*:"
msgstr ""

#: ../../reference/datamodel.rst:2224
msgid ""
"When inheriting from a class without *__slots__*, the "
":attr:`~object.__dict__` and *__weakref__* attribute of the instances will "
"always be accessible."
msgstr ""

#: ../../reference/datamodel.rst:2228
msgid ""
"Without a :attr:`~object.__dict__` variable, instances cannot be assigned "
"new variables not listed in the *__slots__* definition.  Attempts to assign "
"to an unlisted variable name raises :exc:`AttributeError`. If dynamic "
"assignment of new variables is desired, then add ``'__dict__'`` to the "
"sequence of strings in the *__slots__* declaration."
msgstr ""

#: ../../reference/datamodel.rst:2235
msgid ""
"Without a *__weakref__* variable for each instance, classes defining "
"*__slots__* do not support :mod:`weak references <weakref>` to its "
"instances. If weak reference support is needed, then add ``'__weakref__'`` "
"to the sequence of strings in the *__slots__* declaration."
msgstr ""

#: ../../reference/datamodel.rst:2241
msgid ""
"*__slots__* are implemented at the class level by creating :ref:`descriptors"
" <descriptors>` for each variable name.  As a result, class attributes "
"cannot be used to set default values for instance variables defined by "
"*__slots__*; otherwise, the class attribute would overwrite the descriptor "
"assignment."
msgstr ""

#: ../../reference/datamodel.rst:2247
msgid ""
"The action of a *__slots__* declaration is not limited to the class where it"
" is defined.  *__slots__* declared in parents are available in child "
"classes. However, child subclasses will get a :attr:`~object.__dict__` and "
"*__weakref__* unless they also define *__slots__* (which should only contain"
" names of any *additional* slots)."
msgstr ""

#: ../../reference/datamodel.rst:2253
msgid ""
"If a class defines a slot also defined in a base class, the instance "
"variable defined by the base class slot is inaccessible (except by "
"retrieving its descriptor directly from the base class). This renders the "
"meaning of the program undefined.  In the future, a check may be added to "
"prevent this."
msgstr ""

#: ../../reference/datamodel.rst:2258
msgid ""
":exc:`TypeError` will be raised if nonempty *__slots__* are defined for a "
"class derived from a :c:member:`\"variable-length\" built-in type "
"<PyTypeObject.tp_itemsize>` such as :class:`int`, :class:`bytes`, and "
":class:`tuple`."
msgstr ""

#: ../../reference/datamodel.rst:2263
msgid "Any non-string :term:`iterable` may be assigned to *__slots__*."
msgstr ""

#: ../../reference/datamodel.rst:2265
msgid ""
"If a :class:`dictionary <dict>` is used to assign *__slots__*, the "
"dictionary keys will be used as the slot names. The values of the dictionary"
" can be used to provide per-attribute docstrings that will be recognised by "
":func:`inspect.getdoc` and displayed in the output of :func:`help`."
msgstr ""

#: ../../reference/datamodel.rst:2270
msgid ""
":attr:`~instance.__class__` assignment works only if both classes have the "
"same *__slots__*."
msgstr ""

#: ../../reference/datamodel.rst:2273
msgid ""
":ref:`Multiple inheritance <tut-multiple>` with multiple slotted parent "
"classes can be used, but only one parent is allowed to have attributes "
"created by slots (the other bases must have empty slot layouts) - violations"
" raise :exc:`TypeError`."
msgstr ""

#: ../../reference/datamodel.rst:2279
msgid ""
"If an :term:`iterator` is used for *__slots__* then a :term:`descriptor` is "
"created for each of the iterator's values. However, the *__slots__* "
"attribute will be an empty iterator."
msgstr ""

#: ../../reference/datamodel.rst:2287
msgid "Customizing class creation"
msgstr ""

#: ../../reference/datamodel.rst:2289
msgid ""
"Whenever a class inherits from another class, "
":meth:`~object.__init_subclass__` is called on the parent class. This way, "
"it is possible to write classes which change the behavior of subclasses. "
"This is closely related to class decorators, but where class decorators only"
" affect the specific class they're applied to, ``__init_subclass__`` solely "
"applies to future subclasses of the class defining the method."
msgstr ""

#: ../../reference/datamodel.rst:2298
msgid ""
"This method is called whenever the containing class is subclassed. *cls* is "
"then the new subclass. If defined as a normal instance method, this method "
"is implicitly converted to a class method."
msgstr ""

#: ../../reference/datamodel.rst:2302
msgid ""
"Keyword arguments which are given to a new class are passed to the parent "
"class's ``__init_subclass__``. For compatibility with other classes using "
"``__init_subclass__``, one should take out the needed keyword arguments and "
"pass the others over to the base class, as in::"
msgstr ""

#: ../../reference/datamodel.rst:2316
msgid ""
"The default implementation ``object.__init_subclass__`` does nothing, but "
"raises an error if it is called with any arguments."
msgstr ""

#: ../../reference/datamodel.rst:2321
msgid ""
"The metaclass hint ``metaclass`` is consumed by the rest of the type "
"machinery, and is never passed to ``__init_subclass__`` implementations. The"
" actual metaclass (rather than the explicit hint) can be accessed as "
"``type(cls)``."
msgstr ""

#: ../../reference/datamodel.rst:2329
msgid ""
"When a class is created, :meth:`type.__new__` scans the class variables and "
"makes callbacks to those with a :meth:`~object.__set_name__` hook."
msgstr ""

#: ../../reference/datamodel.rst:2334
msgid ""
"Automatically called at the time the owning class *owner* is created. The "
"object has been assigned to *name* in that class::"
msgstr ""

#: ../../reference/datamodel.rst:2340
msgid ""
"If the class variable is assigned after the class is created, "
":meth:`__set_name__` will not be called automatically. If needed, "
":meth:`__set_name__` can be called directly::"
msgstr ""

#: ../../reference/datamodel.rst:2351
msgid "See :ref:`class-object-creation` for more details."
msgstr ""

#: ../../reference/datamodel.rst:2359
msgid "Metaclasses"
msgstr ""

#: ../../reference/datamodel.rst:2366
msgid ""
"By default, classes are constructed using :func:`type`. The class body is "
"executed in a new namespace and the class name is bound locally to the "
"result of ``type(name, bases, namespace)``."
msgstr ""

#: ../../reference/datamodel.rst:2370
msgid ""
"The class creation process can be customized by passing the ``metaclass`` "
"keyword argument in the class definition line, or by inheriting from an "
"existing class that included such an argument. In the following example, "
"both ``MyClass`` and ``MySubclass`` are instances of ``Meta``::"
msgstr ""

#: ../../reference/datamodel.rst:2384
msgid ""
"Any other keyword arguments that are specified in the class definition are "
"passed through to all metaclass operations described below."
msgstr ""

#: ../../reference/datamodel.rst:2387
msgid "When a class definition is executed, the following steps occur:"
msgstr ""

#: ../../reference/datamodel.rst:2389
msgid "MRO entries are resolved;"
msgstr ""

#: ../../reference/datamodel.rst:2390
msgid "the appropriate metaclass is determined;"
msgstr ""

#: ../../reference/datamodel.rst:2391
msgid "the class namespace is prepared;"
msgstr ""

#: ../../reference/datamodel.rst:2392
msgid "the class body is executed;"
msgstr ""

#: ../../reference/datamodel.rst:2393
msgid "the class object is created."
msgstr ""

#: ../../reference/datamodel.rst:2397
msgid "Resolving MRO entries"
msgstr ""

#: ../../reference/datamodel.rst:2401
msgid ""
"If a base that appears in a class definition is not an instance of "
":class:`type`, then an :meth:`!__mro_entries__` method is searched on the "
"base. If an :meth:`!__mro_entries__` method is found, the base is "
"substituted with the result of a call to :meth:`!__mro_entries__` when "
"creating the class. The method is called with the original bases tuple "
"passed to the *bases* parameter, and must return a tuple of classes that "
"will be used instead of the base. The returned tuple may be empty: in these "
"cases, the original base is ignored."
msgstr ""

#: ../../reference/datamodel.rst:2413
msgid ":func:`types.resolve_bases`"
msgstr ""

#: ../../reference/datamodel.rst:2413
msgid "Dynamically resolve bases that are not instances of :class:`type`."
msgstr ""

#: ../../reference/datamodel.rst:2415
msgid ":pep:`560`"
msgstr ""

#: ../../reference/datamodel.rst:2416
msgid "Core support for typing module and generic types."
msgstr ""

#: ../../reference/datamodel.rst:2420
msgid "Determining the appropriate metaclass"
msgstr ""

#: ../../reference/datamodel.rst:2424
msgid ""
"The appropriate metaclass for a class definition is determined as follows:"
msgstr ""

#: ../../reference/datamodel.rst:2426
msgid ""
"if no bases and no explicit metaclass are given, then :func:`type` is used;"
msgstr ""

#: ../../reference/datamodel.rst:2427
msgid ""
"if an explicit metaclass is given and it is *not* an instance of "
":func:`type`, then it is used directly as the metaclass;"
msgstr ""

#: ../../reference/datamodel.rst:2429
msgid ""
"if an instance of :func:`type` is given as the explicit metaclass, or bases "
"are defined, then the most derived metaclass is used."
msgstr ""

#: ../../reference/datamodel.rst:2432
msgid ""
"The most derived metaclass is selected from the explicitly specified "
"metaclass (if any) and the metaclasses (i.e. ``type(cls)``) of all specified"
" base classes. The most derived metaclass is one which is a subtype of *all*"
" of these candidate metaclasses. If none of the candidate metaclasses meets "
"that criterion, then the class definition will fail with ``TypeError``."
msgstr ""

#: ../../reference/datamodel.rst:2442
msgid "Preparing the class namespace"
msgstr ""

#: ../../reference/datamodel.rst:2447
msgid ""
"Once the appropriate metaclass has been identified, then the class namespace"
" is prepared. If the metaclass has a ``__prepare__`` attribute, it is called"
" as ``namespace = metaclass.__prepare__(name, bases, **kwds)`` (where the "
"additional keyword arguments, if any, come from the class definition). The "
"``__prepare__`` method should be implemented as a :func:`classmethod "
"<classmethod>`. The namespace returned by ``__prepare__`` is passed in to "
"``__new__``, but when the final class object is created the namespace is "
"copied into a new ``dict``."
msgstr ""

#: ../../reference/datamodel.rst:2456
msgid ""
"If the metaclass has no ``__prepare__`` attribute, then the class namespace "
"is initialised as an empty ordered mapping."
msgstr ""

#: ../../reference/datamodel.rst:2461
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ""

#: ../../reference/datamodel.rst:2462
msgid "Introduced the ``__prepare__`` namespace hook"
msgstr ""

#: ../../reference/datamodel.rst:2466
msgid "Executing the class body"
msgstr ""

#: ../../reference/datamodel.rst:2471
msgid ""
"The class body is executed (approximately) as ``exec(body, globals(), "
"namespace)``. The key difference from a normal call to :func:`exec` is that "
"lexical scoping allows the class body (including any methods) to reference "
"names from the current and outer scopes when the class definition occurs "
"inside a function."
msgstr ""

#: ../../reference/datamodel.rst:2477
msgid ""
"However, even when the class definition occurs inside the function, methods "
"defined inside the class still cannot see names defined at the class scope. "
"Class variables must be accessed through the first parameter of instance or "
"class methods, or through the implicit lexically scoped ``__class__`` "
"reference described in the next section."
msgstr ""

#: ../../reference/datamodel.rst:2486
msgid "Creating the class object"
msgstr ""

#: ../../reference/datamodel.rst:2493
msgid ""
"Once the class namespace has been populated by executing the class body, the"
" class object is created by calling ``metaclass(name, bases, namespace, "
"**kwds)`` (the additional keywords passed here are the same as those passed "
"to ``__prepare__``)."
msgstr ""

#: ../../reference/datamodel.rst:2498
msgid ""
"This class object is the one that will be referenced by the zero-argument "
"form of :func:`super`. ``__class__`` is an implicit closure reference "
"created by the compiler if any methods in a class body refer to either "
"``__class__`` or ``super``. This allows the zero argument form of "
":func:`super` to correctly identify the class being defined based on lexical"
" scoping, while the class or instance that was used to make the current call"
" is identified based on the first argument passed to the method."
msgstr ""

#: ../../reference/datamodel.rst:2508
msgid ""
"In CPython 3.6 and later, the ``__class__`` cell is passed to the metaclass "
"as a ``__classcell__`` entry in the class namespace. If present, this must "
"be propagated up to the ``type.__new__`` call in order for the class to be "
"initialised correctly. Failing to do so will result in a :exc:`RuntimeError`"
" in Python 3.8."
msgstr ""

#: ../../reference/datamodel.rst:2514
msgid ""
"When using the default metaclass :class:`type`, or any metaclass that "
"ultimately calls ``type.__new__``, the following additional customization "
"steps are invoked after creating the class object:"
msgstr ""

#: ../../reference/datamodel.rst:2518
msgid ""
"The ``type.__new__`` method collects all of the attributes in the class "
"namespace that define a :meth:`~object.__set_name__` method;"
msgstr ""

#: ../../reference/datamodel.rst:2520
msgid ""
"Those ``__set_name__`` methods are called with the class being defined and "
"the assigned name of that particular attribute;"
msgstr ""

#: ../../reference/datamodel.rst:2522
msgid ""
"The :meth:`~object.__init_subclass__` hook is called on the immediate parent"
" of the new class in its method resolution order."
msgstr ""

#: ../../reference/datamodel.rst:2525
msgid ""
"After the class object is created, it is passed to the class decorators "
"included in the class definition (if any) and the resulting object is bound "
"in the local namespace as the defined class."
msgstr ""

#: ../../reference/datamodel.rst:2529
msgid ""
"When a new class is created by ``type.__new__``, the object provided as the "
"namespace parameter is copied to a new ordered mapping and the original "
"object is discarded. The new copy is wrapped in a read-only proxy, which "
"becomes the :attr:`~object.__dict__` attribute of the class object."
msgstr ""

#: ../../reference/datamodel.rst:2536
msgid ":pep:`3135` - New super"
msgstr ""

#: ../../reference/datamodel.rst:2537
msgid "Describes the implicit ``__class__`` closure reference"
msgstr ""

#: ../../reference/datamodel.rst:2541
msgid "Uses for metaclasses"
msgstr ""

#: ../../reference/datamodel.rst:2543
msgid ""
"The potential uses for metaclasses are boundless. Some ideas that have been "
"explored include enum, logging, interface checking, automatic delegation, "
"automatic property creation, proxies, frameworks, and automatic resource "
"locking/synchronization."
msgstr ""

#: ../../reference/datamodel.rst:2550
msgid "Customizing instance and subclass checks"
msgstr ""

#: ../../reference/datamodel.rst:2552
msgid ""
"The following methods are used to override the default behavior of the "
":func:`isinstance` and :func:`issubclass` built-in functions."
msgstr ""

#: ../../reference/datamodel.rst:2555
msgid ""
"In particular, the metaclass :class:`abc.ABCMeta` implements these methods "
"in order to allow the addition of Abstract Base Classes (ABCs) as \"virtual "
"base classes\" to any class or type (including built-in types), including "
"other ABCs."
msgstr ""

#: ../../reference/datamodel.rst:2562
msgid ""
"Return true if *instance* should be considered a (direct or indirect) "
"instance of *class*. If defined, called to implement ``isinstance(instance, "
"class)``."
msgstr ""

#: ../../reference/datamodel.rst:2569
msgid ""
"Return true if *subclass* should be considered a (direct or indirect) "
"subclass of *class*.  If defined, called to implement ``issubclass(subclass,"
" class)``."
msgstr ""

#: ../../reference/datamodel.rst:2574
msgid ""
"Note that these methods are looked up on the type (metaclass) of a class.  "
"They cannot be defined as class methods in the actual class.  This is "
"consistent with the lookup of special methods that are called on instances, "
"only in this case the instance is itself a class."
msgstr ""

#: ../../reference/datamodel.rst:2585
msgid ":pep:`3119` - Introducing Abstract Base Classes"
msgstr ""

#: ../../reference/datamodel.rst:2582
msgid ""
"Includes the specification for customizing :func:`isinstance` and "
":func:`issubclass` behavior through :meth:`~class.__instancecheck__` and "
":meth:`~class.__subclasscheck__`, with motivation for this functionality in "
"the context of adding Abstract Base Classes (see the :mod:`abc` module) to "
"the language."
msgstr ""

#: ../../reference/datamodel.rst:2590
msgid "Emulating generic types"
msgstr ""

#: ../../reference/datamodel.rst:2592
msgid ""
"When using :term:`type annotations<annotation>`, it is often useful to "
"*parameterize* a :term:`generic type` using Python's square-brackets "
"notation. For example, the annotation ``list[int]`` might be used to signify"
" a :class:`list` in which all the elements are of type :class:`int`."
msgstr ""

#: ../../reference/datamodel.rst:2600
msgid ":pep:`484` - Type Hints"
msgstr ""

#: ../../reference/datamodel.rst:2600
msgid "Introducing Python's framework for type annotations"
msgstr ""

#: ../../reference/datamodel.rst:2603
msgid ":ref:`Generic Alias Types<types-genericalias>`"
msgstr ""

#: ../../reference/datamodel.rst:2603
msgid "Documentation for objects representing parameterized generic classes"
msgstr ""

#: ../../reference/datamodel.rst:2606
msgid ""
":ref:`Generics`, :ref:`user-defined generics<user-defined-generics>` and "
":class:`typing.Generic`"
msgstr ""

#: ../../reference/datamodel.rst:2606
msgid ""
"Documentation on how to implement generic classes that can be parameterized "
"at runtime and understood by static type-checkers."
msgstr ""

#: ../../reference/datamodel.rst:2609
msgid ""
"A class can *generally* only be parameterized if it defines the special "
"class method ``__class_getitem__()``."
msgstr ""

#: ../../reference/datamodel.rst:2614
msgid ""
"Return an object representing the specialization of a generic class by type "
"arguments found in *key*."
msgstr ""

#: ../../reference/datamodel.rst:2617
msgid ""
"When defined on a class, ``__class_getitem__()`` is automatically a class "
"method. As such, there is no need for it to be decorated with "
":func:`@classmethod<classmethod>` when it is defined."
msgstr ""

#: ../../reference/datamodel.rst:2623
msgid "The purpose of *__class_getitem__*"
msgstr ""

#: ../../reference/datamodel.rst:2625
msgid ""
"The purpose of :meth:`~object.__class_getitem__` is to allow runtime "
"parameterization of standard-library generic classes in order to more easily"
" apply :term:`type hints<type hint>` to these classes."
msgstr ""

#: ../../reference/datamodel.rst:2629
msgid ""
"To implement custom generic classes that can be parameterized at runtime and"
" understood by static type-checkers, users should either inherit from a "
"standard library class that already implements "
":meth:`~object.__class_getitem__`, or inherit from :class:`typing.Generic`, "
"which has its own implementation of ``__class_getitem__()``."
msgstr ""

#: ../../reference/datamodel.rst:2635
msgid ""
"Custom implementations of :meth:`~object.__class_getitem__` on classes "
"defined outside of the standard library may not be understood by third-party"
" type-checkers such as mypy. Using ``__class_getitem__()`` on any class for "
"purposes other than type hinting is discouraged."
msgstr ""

#: ../../reference/datamodel.rst:2645
msgid "*__class_getitem__* versus *__getitem__*"
msgstr ""

#: ../../reference/datamodel.rst:2647
msgid ""
"Usually, the :ref:`subscription<subscriptions>` of an object using square "
"brackets will call the :meth:`~object.__getitem__` instance method defined "
"on the object's class. However, if the object being subscribed is itself a "
"class, the class method :meth:`~object.__class_getitem__` may be called "
"instead. ``__class_getitem__()`` should return a :ref:`GenericAlias<types-"
"genericalias>` object if it is properly defined."
msgstr ""

#: ../../reference/datamodel.rst:2654
msgid ""
"Presented with the :term:`expression` ``obj[x]``, the Python interpreter "
"follows something like the following process to decide whether "
":meth:`~object.__getitem__` or :meth:`~object.__class_getitem__` should be "
"called::"
msgstr ""

#: ../../reference/datamodel.rst:2682
msgid ""
"In Python, all classes are themselves instances of other classes. The class "
"of a class is known as that class's :term:`metaclass`, and most classes have"
" the :class:`type` class as their metaclass. :class:`type` does not define "
":meth:`~object.__getitem__`, meaning that expressions such as ``list[int]``,"
" ``dict[str, float]`` and ``tuple[str, bytes]`` all result in "
":meth:`~object.__class_getitem__` being called::"
msgstr ""

#: ../../reference/datamodel.rst:2701
msgid ""
"However, if a class has a custom metaclass that defines "
":meth:`~object.__getitem__`, subscribing the class may result in different "
"behaviour. An example of this can be found in the :mod:`enum` module::"
msgstr ""

#: ../../reference/datamodel.rst:2726
msgid ":pep:`560` - Core Support for typing module and generic types"
msgstr ""

#: ../../reference/datamodel.rst:2725
msgid ""
"Introducing :meth:`~object.__class_getitem__`, and outlining when a "
":ref:`subscription<subscriptions>` results in ``__class_getitem__()`` being "
"called instead of :meth:`~object.__getitem__`"
msgstr ""

#: ../../reference/datamodel.rst:2733
msgid "Emulating callable objects"
msgstr ""

#: ../../reference/datamodel.rst:2740
msgid ""
"Called when the instance is \"called\" as a function; if this method is "
"defined, ``x(arg1, arg2, ...)`` roughly translates to ``type(x).__call__(x, "
"arg1, ...)``."
msgstr ""

#: ../../reference/datamodel.rst:2747
msgid "Emulating container types"
msgstr ""

#: ../../reference/datamodel.rst:2749
msgid ""
"The following methods can be defined to implement container objects.  "
"Containers usually are :term:`sequences <sequence>` (such as :class:`lists "
"<list>` or :class:`tuples <tuple>`) or :term:`mappings <mapping>` (like "
":class:`dictionaries <dict>`), but can represent other containers as well.  "
"The first set of methods is used either to emulate a sequence or to emulate "
"a mapping; the difference is that for a sequence, the allowable keys should "
"be the integers *k* for which ``0 <= k < N`` where *N* is the length of the "
"sequence, or :class:`slice` objects, which define a range of items.  It is "
"also recommended that mappings provide the methods :meth:`!keys`, "
":meth:`!values`, :meth:`!items`, :meth:`!get`, :meth:`!clear`, "
":meth:`!setdefault`, :meth:`!pop`, :meth:`!popitem`, :meth:`!copy`, and "
":meth:`!update` behaving similar to those for Python's standard "
":class:`dictionary <dict>` objects.  The :mod:`collections.abc` module "
"provides a :class:`~collections.abc.MutableMapping` :term:`abstract base "
"class` to help create those methods from a base set of "
":meth:`~object.__getitem__`, :meth:`~object.__setitem__`, "
":meth:`~object.__delitem__`, and :meth:`!keys`. Mutable sequences should "
"provide methods :meth:`!append`, :meth:`!count`, :meth:`!index`, "
":meth:`!extend`, :meth:`!insert`, :meth:`!pop`, :meth:`!remove`, "
":meth:`!reverse` and :meth:`!sort`, like Python standard :class:`list` "
"objects. Finally, sequence types should implement addition (meaning "
"concatenation) and multiplication (meaning repetition) by defining the "
"methods :meth:`~object.__add__`, :meth:`~object.__radd__`, "
":meth:`~object.__iadd__`, :meth:`~object.__mul__`, :meth:`~object.__rmul__` "
"and :meth:`~object.__imul__` described below; they should not define other "
"numerical operators.  It is recommended that both mappings and sequences "
"implement the :meth:`~object.__contains__` method to allow efficient use of "
"the ``in`` operator; for mappings, ``in`` should search the mapping's keys; "
"for sequences, it should search through the values.  It is further "
"recommended that both mappings and sequences implement the "
":meth:`~object.__iter__` method to allow efficient iteration through the "
"container; for mappings, :meth:`!__iter__` should iterate through the "
"object's keys; for sequences, it should iterate through the values."
msgstr ""

#: ../../reference/datamodel.rst:2790
msgid ""
"Called to implement the built-in function :func:`len`.  Should return the "
"length of the object, an integer ``>=`` 0.  Also, an object that doesn't "
"define a :meth:`~object.__bool__` method and whose :meth:`!__len__` method "
"returns zero is considered to be false in a Boolean context."
msgstr ""

#: ../../reference/datamodel.rst:2797
msgid ""
"In CPython, the length is required to be at most :data:`sys.maxsize`. If the"
" length is larger than :data:`!sys.maxsize` some features (such as "
":func:`len`) may raise :exc:`OverflowError`.  To prevent raising "
":exc:`!OverflowError` by truth value testing, an object must define a "
":meth:`~object.__bool__` method."
msgstr ""

#: ../../reference/datamodel.rst:2806
msgid ""
"Called to implement :func:`operator.length_hint`. Should return an estimated"
" length for the object (which may be greater or less than the actual "
"length). The length must be an integer ``>=`` 0. The return value may also "
"be :data:`NotImplemented`, which is treated the same as if the "
"``__length_hint__`` method didn't exist at all. This method is purely an "
"optimization and is never required for correctness."
msgstr ""

#: ../../reference/datamodel.rst:2820
msgid ""
"Slicing is done exclusively with the following three methods.  A call like "
"::"
msgstr ""

#: ../../reference/datamodel.rst:2824
msgid "is translated to ::"
msgstr ""

#: ../../reference/datamodel.rst:2828
msgid "and so forth.  Missing slice items are always filled in with ``None``."
msgstr ""

#: ../../reference/datamodel.rst:2833
msgid ""
"Called to implement evaluation of ``self[key]``. For :term:`sequence` types,"
" the accepted keys should be integers. Optionally, they may support "
":class:`slice` objects as well.  Negative index support is also optional. If"
" *key* is of an inappropriate type, :exc:`TypeError` may be raised; if *key*"
" is a value outside the set of indexes for the sequence (after any special "
"interpretation of negative values), :exc:`IndexError` should be raised. For "
":term:`mapping` types, if *key* is missing (not in the container), "
":exc:`KeyError` should be raised."
msgstr ""

#: ../../reference/datamodel.rst:2845
msgid ""
":keyword:`for` loops expect that an :exc:`IndexError` will be raised for "
"illegal indexes to allow proper detection of the end of the sequence."
msgstr ""

#: ../../reference/datamodel.rst:2850
msgid ""
"When :ref:`subscripting<subscriptions>` a *class*, the special class method "
":meth:`~object.__class_getitem__` may be called instead of "
"``__getitem__()``. See :ref:`classgetitem-versus-getitem` for more details."
msgstr ""

#: ../../reference/datamodel.rst:2858
msgid ""
"Called to implement assignment to ``self[key]``.  Same note as for "
":meth:`__getitem__`.  This should only be implemented for mappings if the "
"objects support changes to the values for keys, or if new keys can be added,"
" or for sequences if elements can be replaced.  The same exceptions should "
"be raised for improper *key* values as for the :meth:`__getitem__` method."
msgstr ""

#: ../../reference/datamodel.rst:2867
msgid ""
"Called to implement deletion of ``self[key]``.  Same note as for "
":meth:`__getitem__`.  This should only be implemented for mappings if the "
"objects support removal of keys, or for sequences if elements can be removed"
" from the sequence.  The same exceptions should be raised for improper *key*"
" values as for the :meth:`__getitem__` method."
msgstr ""

#: ../../reference/datamodel.rst:2876
msgid ""
"Called by :class:`dict`\\ .\\ :meth:`__getitem__` to implement ``self[key]``"
" for dict subclasses when key is not in the dictionary."
msgstr ""

#: ../../reference/datamodel.rst:2882
msgid ""
"This method is called when an :term:`iterator` is required for a container. "
"This method should return a new iterator object that can iterate over all "
"the objects in the container.  For mappings, it should iterate over the keys"
" of the container."
msgstr ""

#: ../../reference/datamodel.rst:2890
msgid ""
"Called (if present) by the :func:`reversed` built-in to implement reverse "
"iteration.  It should return a new iterator object that iterates over all "
"the objects in the container in reverse order."
msgstr ""

#: ../../reference/datamodel.rst:2894
msgid ""
"If the :meth:`__reversed__` method is not provided, the :func:`reversed` "
"built-in will fall back to using the sequence protocol (:meth:`__len__` and "
":meth:`__getitem__`).  Objects that support the sequence protocol should "
"only provide :meth:`__reversed__` if they can provide an implementation that"
" is more efficient than the one provided by :func:`reversed`."
msgstr ""

#: ../../reference/datamodel.rst:2901
msgid ""
"The membership test operators (:keyword:`in` and :keyword:`not in`) are "
"normally implemented as an iteration through a container. However, container"
" objects can supply the following special method with a more efficient "
"implementation, which also does not require the object be iterable."
msgstr ""

#: ../../reference/datamodel.rst:2908
msgid ""
"Called to implement membership test operators.  Should return true if *item*"
" is in *self*, false otherwise.  For mapping objects, this should consider "
"the keys of the mapping rather than the values or the key-item pairs."
msgstr ""

#: ../../reference/datamodel.rst:2912
msgid ""
"For objects that don't define :meth:`__contains__`, the membership test "
"first tries iteration via :meth:`__iter__`, then the old sequence iteration "
"protocol via :meth:`__getitem__`, see :ref:`this section in the language "
"reference <membership-test-details>`."
msgstr ""

#: ../../reference/datamodel.rst:2921
msgid "Emulating numeric types"
msgstr ""

#: ../../reference/datamodel.rst:2923
msgid ""
"The following methods can be defined to emulate numeric objects. Methods "
"corresponding to operations that are not supported by the particular kind of"
" number implemented (e.g., bitwise operations for non-integral numbers) "
"should be left undefined."
msgstr ""

#: ../../reference/datamodel.rst:2949
msgid ""
"These methods are called to implement the binary arithmetic operations "
"(``+``, ``-``, ``*``, ``@``, ``/``, ``//``, ``%``, :func:`divmod`, "
":func:`pow`, ``**``, ``<<``, ``>>``, ``&``, ``^``, ``|``).  For instance, to"
" evaluate the expression ``x + y``, where *x* is an instance of a class that"
" has an :meth:`__add__` method, ``type(x).__add__(x, y)`` is called.  The "
":meth:`__divmod__` method should be the equivalent to using "
":meth:`__floordiv__` and :meth:`__mod__`; it should not be related to "
":meth:`__truediv__`.  Note that :meth:`__pow__` should be defined to accept "
"an optional third argument if the ternary version of the built-in "
":func:`pow` function is to be supported."
msgstr ""

#: ../../reference/datamodel.rst:2960
msgid ""
"If one of those methods does not support the operation with the supplied "
"arguments, it should return :data:`NotImplemented`."
msgstr ""

#: ../../reference/datamodel.rst:2983
msgid ""
"These methods are called to implement the binary arithmetic operations "
"(``+``, ``-``, ``*``, ``@``, ``/``, ``//``, ``%``, :func:`divmod`, "
":func:`pow`, ``**``, ``<<``, ``>>``, ``&``, ``^``, ``|``) with reflected "
"(swapped) operands.  These functions are only called if the left operand "
"does not support the corresponding operation [#]_ and the operands are of "
"different types. [#]_ For instance, to evaluate the expression ``x - y``, "
"where *y* is an instance of a class that has an :meth:`__rsub__` method, "
"``type(y).__rsub__(y, x)`` is called if ``type(x).__sub__(x, y)`` returns "
":data:`NotImplemented`."
msgstr ""

#: ../../reference/datamodel.rst:2995
msgid ""
"Note that ternary :func:`pow` will not try calling :meth:`__rpow__` (the "
"coercion rules would become too complicated)."
msgstr ""

#: ../../reference/datamodel.rst:3000
msgid ""
"If the right operand's type is a subclass of the left operand's type and "
"that subclass provides a different implementation of the reflected method "
"for the operation, this method will be called before the left operand's non-"
"reflected method. This behavior allows subclasses to override their "
"ancestors' operations."
msgstr ""

#: ../../reference/datamodel.rst:3021
msgid ""
"These methods are called to implement the augmented arithmetic assignments "
"(``+=``, ``-=``, ``*=``, ``@=``, ``/=``, ``//=``, ``%=``, ``**=``, ``<<=``, "
"``>>=``, ``&=``, ``^=``, ``|=``).  These methods should attempt to do the "
"operation in-place (modifying *self*) and return the result (which could be,"
" but does not have to be, *self*).  If a specific method is not defined, or "
"if that method returns :data:`NotImplemented`, the augmented assignment "
"falls back to the normal methods.  For instance, if *x* is an instance of a "
"class with an :meth:`__iadd__` method, ``x += y`` is equivalent to ``x = "
"x.__iadd__(y)`` . If :meth:`__iadd__` does not exist, or if "
"``x.__iadd__(y)`` returns :data:`!NotImplemented`, ``x.__add__(y)`` and "
"``y.__radd__(x)`` are considered, as with the evaluation of ``x + y``. In "
"certain situations, augmented assignment can result in unexpected errors "
"(see :ref:`faq-augmented-assignment-tuple-error`), but this behavior is in "
"fact part of the data model."
msgstr ""

#: ../../reference/datamodel.rst:3044
msgid ""
"Called to implement the unary arithmetic operations (``-``, ``+``, "
":func:`abs` and ``~``)."
msgstr ""

#: ../../reference/datamodel.rst:3057
msgid ""
"Called to implement the built-in functions :func:`complex`, :func:`int` and "
":func:`float`.  Should return a value of the appropriate type."
msgstr ""

#: ../../reference/datamodel.rst:3064
msgid ""
"Called to implement :func:`operator.index`, and whenever Python needs to "
"losslessly convert the numeric object to an integer object (such as in "
"slicing, or in the built-in :func:`bin`, :func:`hex` and :func:`oct` "
"functions). Presence of this method indicates that the numeric object is an "
"integer type.  Must return an integer."
msgstr ""

#: ../../reference/datamodel.rst:3070
msgid ""
"If :meth:`__int__`, :meth:`__float__` and :meth:`__complex__` are not "
"defined then corresponding built-in functions :func:`int`, :func:`float` and"
" :func:`complex` fall back to :meth:`__index__`."
msgstr ""

#: ../../reference/datamodel.rst:3082
msgid ""
"Called to implement the built-in function :func:`round` and :mod:`math` "
"functions :func:`~math.trunc`, :func:`~math.floor` and :func:`~math.ceil`. "
"Unless *ndigits* is passed to :meth:`!__round__` all these methods should "
"return the value of the object truncated to an :class:`~numbers.Integral` "
"(typically an :class:`int`)."
msgstr ""

#: ../../reference/datamodel.rst:3088
msgid ""
"The built-in function :func:`int` falls back to :meth:`__trunc__` if neither"
" :meth:`__int__` nor :meth:`__index__` is defined."
msgstr ""

#: ../../reference/datamodel.rst:3091
msgid "The delegation of :func:`int` to :meth:`__trunc__` is deprecated."
msgstr ""

#: ../../reference/datamodel.rst:3098
msgid "With Statement Context Managers"
msgstr ""

#: ../../reference/datamodel.rst:3100
msgid ""
"A :dfn:`context manager` is an object that defines the runtime context to be"
" established when executing a :keyword:`with` statement. The context manager"
" handles the entry into, and the exit from, the desired runtime context for "
"the execution of the block of code.  Context managers are normally invoked "
"using the :keyword:`!with` statement (described in section :ref:`with`), but"
" can also be used by directly invoking their methods."
msgstr ""

#: ../../reference/datamodel.rst:3111
msgid ""
"Typical uses of context managers include saving and restoring various kinds "
"of global state, locking and unlocking resources, closing opened files, etc."
msgstr ""

#: ../../reference/datamodel.rst:3114
msgid ""
"For more information on context managers, see :ref:`typecontextmanager`."
msgstr ""

#: ../../reference/datamodel.rst:3119
msgid ""
"Enter the runtime context related to this object. The :keyword:`with` "
"statement will bind this method's return value to the target(s) specified in"
" the :keyword:`!as` clause of the statement, if any."
msgstr ""

#: ../../reference/datamodel.rst:3126
msgid ""
"Exit the runtime context related to this object. The parameters describe the"
" exception that caused the context to be exited. If the context was exited "
"without an exception, all three arguments will be :const:`None`."
msgstr ""

#: ../../reference/datamodel.rst:3130
msgid ""
"If an exception is supplied, and the method wishes to suppress the exception"
" (i.e., prevent it from being propagated), it should return a true value. "
"Otherwise, the exception will be processed normally upon exit from this "
"method."
msgstr ""

#: ../../reference/datamodel.rst:3134
msgid ""
"Note that :meth:`~object.__exit__` methods should not reraise the passed-in "
"exception; this is the caller's responsibility."
msgstr ""

#: ../../reference/datamodel.rst:3141
msgid ":pep:`343` - The \"with\" statement"
msgstr ""

#: ../../reference/datamodel.rst:3141
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr ""

#: ../../reference/datamodel.rst:3148
msgid "Customizing positional arguments in class pattern matching"
msgstr ""

#: ../../reference/datamodel.rst:3150
msgid ""
"When using a class name in a pattern, positional arguments in the pattern "
"are not allowed by default, i.e. ``case MyClass(x, y)`` is typically invalid"
" without special support in ``MyClass``. To be able to use that kind of "
"pattern, the class needs to define a *__match_args__* attribute."
msgstr ""

#: ../../reference/datamodel.rst:3157
msgid ""
"This class variable can be assigned a tuple of strings. When this class is "
"used in a class pattern with positional arguments, each positional argument "
"will be converted into a keyword argument, using the corresponding value in "
"*__match_args__* as the keyword. The absence of this attribute is equivalent"
" to setting it to ``()``."
msgstr ""

#: ../../reference/datamodel.rst:3163
msgid ""
"For example, if ``MyClass.__match_args__`` is ``(\"left\", \"center\", "
"\"right\")`` that means that ``case MyClass(x, y)`` is equivalent to ``case "
"MyClass(left=x, center=y)``. Note that the number of arguments in the "
"pattern must be smaller than or equal to the number of elements in "
"*__match_args__*; if it is larger, the pattern match attempt will raise a "
":exc:`TypeError`."
msgstr ""

#: ../../reference/datamodel.rst:3173
msgid ":pep:`634` - Structural Pattern Matching"
msgstr ""

#: ../../reference/datamodel.rst:3174
msgid "The specification for the Python ``match`` statement."
msgstr ""

#: ../../reference/datamodel.rst:3180
msgid "Special method lookup"
msgstr ""

#: ../../reference/datamodel.rst:3182
msgid ""
"For custom classes, implicit invocations of special methods are only "
"guaranteed to work correctly if defined on an object's type, not in the "
"object's instance dictionary.  That behaviour is the reason why the "
"following code raises an exception::"
msgstr ""

#: ../../reference/datamodel.rst:3197
msgid ""
"The rationale behind this behaviour lies with a number of special methods "
"such as :meth:`~object.__hash__` and :meth:`~object.__repr__` that are "
"implemented by all objects, including type objects. If the implicit lookup "
"of these methods used the conventional lookup process, they would fail when "
"invoked on the type object itself::"
msgstr ""

#: ../../reference/datamodel.rst:3211
msgid ""
"Incorrectly attempting to invoke an unbound method of a class in this way is"
" sometimes referred to as 'metaclass confusion', and is avoided by bypassing"
" the instance when looking up special methods::"
msgstr ""

#: ../../reference/datamodel.rst:3220
msgid ""
"In addition to bypassing any instance attributes in the interest of "
"correctness, implicit special method lookup generally also bypasses the "
":meth:`~object.__getattribute__` method even of the object's metaclass::"
msgstr ""

#: ../../reference/datamodel.rst:3246
msgid ""
"Bypassing the :meth:`~object.__getattribute__` machinery in this fashion "
"provides significant scope for speed optimisations within the interpreter, "
"at the cost of some flexibility in the handling of special methods (the "
"special method *must* be set on the class object itself in order to be "
"consistently invoked by the interpreter)."
msgstr ""

#: ../../reference/datamodel.rst:3257
msgid "Coroutines"
msgstr ""

#: ../../reference/datamodel.rst:3261
msgid "Awaitable Objects"
msgstr ""

#: ../../reference/datamodel.rst:3263
msgid ""
"An :term:`awaitable` object generally implements an "
":meth:`~object.__await__` method. :term:`Coroutine objects <coroutine>` "
"returned from :keyword:`async def` functions are awaitable."
msgstr ""

#: ../../reference/datamodel.rst:3269
msgid ""
"The :term:`generator iterator` objects returned from generators decorated "
"with :func:`types.coroutine` are also awaitable, but they do not implement "
":meth:`~object.__await__`."
msgstr ""

#: ../../reference/datamodel.rst:3275
msgid ""
"Must return an :term:`iterator`.  Should be used to implement "
":term:`awaitable` objects.  For instance, :class:`asyncio.Future` implements"
" this method to be compatible with the :keyword:`await` expression."
msgstr ""

#: ../../reference/datamodel.rst:3281
msgid ""
"The language doesn't place any restriction on the type or value of the "
"objects yielded by the iterator returned by ``__await__``, as this is "
"specific to the implementation of the asynchronous execution framework (e.g."
" :mod:`asyncio`) that will be managing the :term:`awaitable` object."
msgstr ""

#: ../../reference/datamodel.rst:3289
msgid ":pep:`492` for additional information about awaitable objects."
msgstr ""

#: ../../reference/datamodel.rst:3295
msgid "Coroutine Objects"
msgstr ""

#: ../../reference/datamodel.rst:3297
msgid ""
":term:`Coroutine objects <coroutine>` are :term:`awaitable` objects. A "
"coroutine's execution can be controlled by calling :meth:`~object.__await__`"
" and iterating over the result.  When the coroutine has finished executing "
"and returns, the iterator raises :exc:`StopIteration`, and the exception's "
":attr:`~StopIteration.value` attribute holds the return value.  If the "
"coroutine raises an exception, it is propagated by the iterator.  Coroutines"
" should not directly raise unhandled :exc:`StopIteration` exceptions."
msgstr ""

#: ../../reference/datamodel.rst:3305
msgid ""
"Coroutines also have the methods listed below, which are analogous to those "
"of generators (see :ref:`generator-methods`).  However, unlike generators, "
"coroutines do not directly support iteration."
msgstr ""

#: ../../reference/datamodel.rst:3309
msgid "It is a :exc:`RuntimeError` to await on a coroutine more than once."
msgstr ""

#: ../../reference/datamodel.rst:3315
msgid ""
"Starts or resumes execution of the coroutine.  If *value* is ``None``, this "
"is equivalent to advancing the iterator returned by "
":meth:`~object.__await__`.  If *value* is not ``None``, this method "
"delegates to the :meth:`~generator.send` method of the iterator that caused "
"the coroutine to suspend.  The result (return value, :exc:`StopIteration`, "
"or other exception) is the same as when iterating over the "
":meth:`!__await__` return value, described above."
msgstr ""

#: ../../reference/datamodel.rst:3326
msgid ""
"Raises the specified exception in the coroutine.  This method delegates to "
"the :meth:`~generator.throw` method of the iterator that caused the "
"coroutine to suspend, if it has such a method.  Otherwise, the exception is "
"raised at the suspension point.  The result (return value, "
":exc:`StopIteration`, or other exception) is the same as when iterating over"
" the :meth:`~object.__await__` return value, described above.  If the "
"exception is not caught in the coroutine, it propagates back to the caller."
msgstr ""

#: ../../reference/datamodel.rst:3337
msgid ""
"Causes the coroutine to clean itself up and exit.  If the coroutine is "
"suspended, this method first delegates to the :meth:`~generator.close` "
"method of the iterator that caused the coroutine to suspend, if it has such "
"a method.  Then it raises :exc:`GeneratorExit` at the suspension point, "
"causing the coroutine to immediately clean itself up. Finally, the coroutine"
" is marked as having finished executing, even if it was never started."
msgstr ""

#: ../../reference/datamodel.rst:3345
msgid ""
"Coroutine objects are automatically closed using the above process when they"
" are about to be destroyed."
msgstr ""

#: ../../reference/datamodel.rst:3351
msgid "Asynchronous Iterators"
msgstr ""

#: ../../reference/datamodel.rst:3353
msgid ""
"An *asynchronous iterator* can call asynchronous code in its ``__anext__`` "
"method."
msgstr ""

#: ../../reference/datamodel.rst:3356
msgid ""
"Asynchronous iterators can be used in an :keyword:`async for` statement."
msgstr ""

#: ../../reference/datamodel.rst:3360
msgid "Must return an *asynchronous iterator* object."
msgstr ""

#: ../../reference/datamodel.rst:3364
msgid ""
"Must return an *awaitable* resulting in a next value of the iterator.  "
"Should raise a :exc:`StopAsyncIteration` error when the iteration is over."
msgstr ""

#: ../../reference/datamodel.rst:3367
msgid "An example of an asynchronous iterable object::"
msgstr ""

#: ../../reference/datamodel.rst:3384
msgid ""
"Prior to Python 3.7, :meth:`~object.__aiter__` could return an *awaitable* "
"that would resolve to an :term:`asynchronous iterator <asynchronous "
"iterator>`."
msgstr ""

#: ../../reference/datamodel.rst:3389
msgid ""
"Starting with Python 3.7, :meth:`~object.__aiter__` must return an "
"asynchronous iterator object.  Returning anything else will result in a "
":exc:`TypeError` error."
msgstr ""

#: ../../reference/datamodel.rst:3397
msgid "Asynchronous Context Managers"
msgstr ""

#: ../../reference/datamodel.rst:3399
msgid ""
"An *asynchronous context manager* is a *context manager* that is able to "
"suspend execution in its ``__aenter__`` and ``__aexit__`` methods."
msgstr ""

#: ../../reference/datamodel.rst:3402
msgid ""
"Asynchronous context managers can be used in an :keyword:`async with` "
"statement."
msgstr ""

#: ../../reference/datamodel.rst:3406
msgid ""
"Semantically similar to :meth:`~object.__enter__`, the only difference being"
" that it must return an *awaitable*."
msgstr ""

#: ../../reference/datamodel.rst:3411
msgid ""
"Semantically similar to :meth:`~object.__exit__`, the only difference being "
"that it must return an *awaitable*."
msgstr ""

#: ../../reference/datamodel.rst:3414
msgid "An example of an asynchronous context manager class::"
msgstr ""

#: ../../reference/datamodel.rst:3427
msgid "Footnotes"
msgstr ""

#: ../../reference/datamodel.rst:3428
msgid ""
"It *is* possible in some cases to change an object's type, under certain "
"controlled conditions. It generally isn't a good idea though, since it can "
"lead to some very strange behaviour if it is handled incorrectly."
msgstr ""

#: ../../reference/datamodel.rst:3432
msgid ""
"The :meth:`~object.__hash__`, :meth:`~object.__iter__`, "
":meth:`~object.__reversed__`, and :meth:`~object.__contains__` methods have "
"special handling for this; others will still raise a :exc:`TypeError`, but "
"may do so by relying on the behavior that ``None`` is not callable."
msgstr ""

#: ../../reference/datamodel.rst:3438
msgid ""
"\"Does not support\" here means that the class has no such method, or the "
"method returns :data:`NotImplemented`.  Do not set the method to ``None`` if"
" you want to force fallback to the right operand's reflected method—that "
"will instead have the opposite effect of explicitly *blocking* such "
"fallback."
msgstr ""

#: ../../reference/datamodel.rst:3444
msgid ""
"For operands of the same type, it is assumed that if the non-reflected "
"method -- such as :meth:`~object.__add__` -- fails then the overall "
"operation is not supported, which is why the reflected method is not called."
msgstr ""

#: ../../reference/datamodel.rst:14 ../../reference/datamodel.rst:148
#: ../../reference/datamodel.rst:159 ../../reference/datamodel.rst:180
#: ../../reference/datamodel.rst:192 ../../reference/datamodel.rst:225
#: ../../reference/datamodel.rst:246 ../../reference/datamodel.rst:261
#: ../../reference/datamodel.rst:279 ../../reference/datamodel.rst:292
#: ../../reference/datamodel.rst:324 ../../reference/datamodel.rst:359
#: ../../reference/datamodel.rst:384 ../../reference/datamodel.rst:405
#: ../../reference/datamodel.rst:423 ../../reference/datamodel.rst:443
#: ../../reference/datamodel.rst:451 ../../reference/datamodel.rst:462
#: ../../reference/datamodel.rst:479 ../../reference/datamodel.rst:515
#: ../../reference/datamodel.rst:530 ../../reference/datamodel.rst:650
#: ../../reference/datamodel.rst:795 ../../reference/datamodel.rst:819
#: ../../reference/datamodel.rst:852 ../../reference/datamodel.rst:934
#: ../../reference/datamodel.rst:998 ../../reference/datamodel.rst:1025
#: ../../reference/datamodel.rst:1081 ../../reference/datamodel.rst:1186
#: ../../reference/datamodel.rst:1293 ../../reference/datamodel.rst:1393
#: ../../reference/datamodel.rst:1805 ../../reference/datamodel.rst:2816
msgid "object"
msgstr ""

#: ../../reference/datamodel.rst:14 ../../reference/datamodel.rst:122
msgid "data"
msgstr ""

#: ../../reference/datamodel.rst:23 ../../reference/datamodel.rst:292
#: ../../reference/datamodel.rst:339 ../../reference/datamodel.rst:423
#: ../../reference/datamodel.rst:462 ../../reference/datamodel.rst:795
#: ../../reference/datamodel.rst:1044 ../../reference/datamodel.rst:1476
#: ../../reference/datamodel.rst:1716 ../../reference/datamodel.rst:1721
#: ../../reference/datamodel.rst:1805 ../../reference/datamodel.rst:2361
#: ../../reference/datamodel.rst:2786 ../../reference/datamodel.rst:2944
#: ../../reference/datamodel.rst:2979 ../../reference/datamodel.rst:2993
#: ../../reference/datamodel.rst:3042 ../../reference/datamodel.rst:3052
#: ../../reference/datamodel.rst:3080
msgid "built-in function"
msgstr ""

#: ../../reference/datamodel.rst:23
msgid "id"
msgstr ""

#: ../../reference/datamodel.rst:23 ../../reference/datamodel.rst:122
#: ../../reference/datamodel.rst:2361
msgid "type"
msgstr ""

#: ../../reference/datamodel.rst:23
msgid "identity of an object"
msgstr ""

#: ../../reference/datamodel.rst:23
msgid "value of an object"
msgstr ""

#: ../../reference/datamodel.rst:23
msgid "type of an object"
msgstr ""

#: ../../reference/datamodel.rst:23
msgid "mutable object"
msgstr ""

#: ../../reference/datamodel.rst:23
msgid "immutable object"
msgstr ""

#: ../../reference/datamodel.rst:60
msgid "garbage collection"
msgstr ""

#: ../../reference/datamodel.rst:60
msgid "reference counting"
msgstr ""

#: ../../reference/datamodel.rst:60
msgid "unreachable object"
msgstr ""

#: ../../reference/datamodel.rst:95 ../../reference/datamodel.rst:934
msgid "container"
msgstr ""

#: ../../reference/datamodel.rst:122
msgid "hierarchy"
msgstr ""

#: ../../reference/datamodel.rst:122
msgid "extension"
msgstr ""

#: ../../reference/datamodel.rst:122 ../../reference/datamodel.rst:396
#: ../../reference/datamodel.rst:397 ../../reference/datamodel.rst:498
#: ../../reference/datamodel.rst:852 ../../reference/datamodel.rst:872
#: ../../reference/datamodel.rst:1044
msgid "module"
msgstr ""

#: ../../reference/datamodel.rst:122 ../../reference/datamodel.rst:261
#: ../../reference/datamodel.rst:795
msgid "C"
msgstr ""

#: ../../reference/datamodel.rst:122 ../../reference/datamodel.rst:261
#: ../../reference/datamodel.rst:795
msgid "language"
msgstr ""

#: ../../reference/datamodel.rst:135 ../../reference/datamodel.rst:934
#: ../../reference/datamodel.rst:952 ../../reference/datamodel.rst:998
#: ../../reference/datamodel.rst:1018
msgid "attribute"
msgstr ""

#: ../../reference/datamodel.rst:135
msgid "special"
msgstr ""

#: ../../reference/datamodel.rst:135
msgid "generic"
msgstr ""

#: ../../reference/datamodel.rst:180
msgid "..."
msgstr ""

#: ../../reference/datamodel.rst:180
msgid "ellipsis literal"
msgstr ""

#: ../../reference/datamodel.rst:192 ../../reference/datamodel.rst:1025
msgid "numeric"
msgstr ""

#: ../../reference/datamodel.rst:225 ../../reference/datamodel.rst:231
#: ../../reference/datamodel.rst:339
msgid "integer"
msgstr ""

#: ../../reference/datamodel.rst:231
msgid "representation"
msgstr ""

#: ../../reference/datamodel.rst:246
msgid "Boolean"
msgstr ""

#: ../../reference/datamodel.rst:246
msgid "False"
msgstr ""

#: ../../reference/datamodel.rst:246
msgid "True"
msgstr ""

#: ../../reference/datamodel.rst:261
msgid "floating point"
msgstr ""

#: ../../reference/datamodel.rst:261 ../../reference/datamodel.rst:279
msgid "number"
msgstr ""

#: ../../reference/datamodel.rst:261
msgid "Java"
msgstr ""

#: ../../reference/datamodel.rst:279 ../../reference/datamodel.rst:3052
msgid "complex"
msgstr ""

#: ../../reference/datamodel.rst:292 ../../reference/datamodel.rst:423
#: ../../reference/datamodel.rst:462 ../../reference/datamodel.rst:2786
msgid "len"
msgstr ""

#: ../../reference/datamodel.rst:292 ../../reference/datamodel.rst:1025
msgid "sequence"
msgstr ""

#: ../../reference/datamodel.rst:292
msgid "index operation"
msgstr ""

#: ../../reference/datamodel.rst:292
msgid "item selection"
msgstr ""

#: ../../reference/datamodel.rst:292 ../../reference/datamodel.rst:384
#: ../../reference/datamodel.rst:462
msgid "subscription"
msgstr ""

#: ../../reference/datamodel.rst:307 ../../reference/datamodel.rst:384
msgid "slicing"
msgstr ""

#: ../../reference/datamodel.rst:324
msgid "immutable sequence"
msgstr ""

#: ../../reference/datamodel.rst:324
msgid "immutable"
msgstr ""

#: ../../reference/datamodel.rst:335 ../../reference/datamodel.rst:1691
#: ../../reference/datamodel.rst:1721
msgid "string"
msgstr ""

#: ../../reference/datamodel.rst:335
msgid "immutable sequences"
msgstr ""

#: ../../reference/datamodel.rst:339
msgid "chr"
msgstr ""

#: ../../reference/datamodel.rst:339
msgid "ord"
msgstr ""

#: ../../reference/datamodel.rst:339
msgid "character"
msgstr ""

#: ../../reference/datamodel.rst:339
msgid "Unicode"
msgstr ""

#: ../../reference/datamodel.rst:359
msgid "tuple"
msgstr ""

#: ../../reference/datamodel.rst:359
msgid "singleton"
msgstr ""

#: ../../reference/datamodel.rst:359
msgid "empty"
msgstr ""

#: ../../reference/datamodel.rst:372 ../../reference/datamodel.rst:1716
msgid "bytes"
msgstr ""

#: ../../reference/datamodel.rst:372
msgid "byte"
msgstr ""

#: ../../reference/datamodel.rst:384
msgid "mutable sequence"
msgstr ""

#: ../../reference/datamodel.rst:384
msgid "mutable"
msgstr ""

#: ../../reference/datamodel.rst:384 ../../reference/datamodel.rst:952
#: ../../reference/datamodel.rst:1018
msgid "assignment"
msgstr ""

#: ../../reference/datamodel.rst:384 ../../reference/datamodel.rst:852
#: ../../reference/datamodel.rst:1430 ../../reference/datamodel.rst:1612
#: ../../reference/datamodel.rst:3107
msgid "statement"
msgstr ""

#: ../../reference/datamodel.rst:396
msgid "array"
msgstr ""

#: ../../reference/datamodel.rst:397
msgid "collections"
msgstr ""

#: ../../reference/datamodel.rst:405
msgid "list"
msgstr ""

#: ../../reference/datamodel.rst:412
msgid "bytearray"
msgstr ""

#: ../../reference/datamodel.rst:423
msgid "set type"
msgstr ""

#: ../../reference/datamodel.rst:443
msgid "set"
msgstr ""

#: ../../reference/datamodel.rst:451
msgid "frozenset"
msgstr ""

#: ../../reference/datamodel.rst:462 ../../reference/datamodel.rst:1025
msgid "mapping"
msgstr ""

#: ../../reference/datamodel.rst:479 ../../reference/datamodel.rst:934
#: ../../reference/datamodel.rst:1805
msgid "dictionary"
msgstr ""

#: ../../reference/datamodel.rst:498
msgid "dbm.ndbm"
msgstr ""

#: ../../reference/datamodel.rst:498
msgid "dbm.gnu"
msgstr ""

#: ../../reference/datamodel.rst:515
msgid "callable"
msgstr ""

#: ../../reference/datamodel.rst:515 ../../reference/datamodel.rst:530
#: ../../reference/datamodel.rst:739 ../../reference/datamodel.rst:757
#: ../../reference/datamodel.rst:770 ../../reference/datamodel.rst:795
msgid "function"
msgstr ""

#: ../../reference/datamodel.rst:515 ../../reference/datamodel.rst:934
#: ../../reference/datamodel.rst:957 ../../reference/datamodel.rst:2738
msgid "call"
msgstr ""

#: ../../reference/datamodel.rst:515
msgid "invocation"
msgstr ""

#: ../../reference/datamodel.rst:515
msgid "argument"
msgstr ""

#: ../../reference/datamodel.rst:530 ../../reference/datamodel.rst:650
msgid "user-defined"
msgstr ""

#: ../../reference/datamodel.rst:530
msgid "user-defined function"
msgstr ""

#: ../../reference/datamodel.rst:543
msgid "__closure__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:543
msgid "__globals__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:543
msgid "global"
msgstr ""

#: ../../reference/datamodel.rst:543 ../../reference/datamodel.rst:872
msgid "namespace"
msgstr ""

#: ../../reference/datamodel.rst:569
msgid "__doc__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:569
msgid "__name__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:569
msgid "__module__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:569
msgid "__dict__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:569
msgid "__defaults__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:569
msgid "__code__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:569
msgid "__annotations__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:569
msgid "__kwdefaults__ (function attribute)"
msgstr ""

#: ../../reference/datamodel.rst:650 ../../reference/datamodel.rst:819
msgid "method"
msgstr ""

#: ../../reference/datamodel.rst:650
msgid "user-defined method"
msgstr ""

#: ../../reference/datamodel.rst:658
msgid "__func__ (method attribute)"
msgstr ""

#: ../../reference/datamodel.rst:658
msgid "__self__ (method attribute)"
msgstr ""

#: ../../reference/datamodel.rst:658
msgid "__doc__ (method attribute)"
msgstr ""

#: ../../reference/datamodel.rst:658
msgid "__name__ (method attribute)"
msgstr ""

#: ../../reference/datamodel.rst:658
msgid "__module__ (method attribute)"
msgstr ""

#: ../../reference/datamodel.rst:739 ../../reference/datamodel.rst:1186
msgid "generator"
msgstr ""

#: ../../reference/datamodel.rst:739
msgid "iterator"
msgstr ""

#: ../../reference/datamodel.rst:757 ../../reference/datamodel.rst:3253
msgid "coroutine"
msgstr ""

#: ../../reference/datamodel.rst:770
msgid "asynchronous generator"
msgstr ""

#: ../../reference/datamodel.rst:770
msgid "asynchronous iterator"
msgstr ""

#: ../../reference/datamodel.rst:819
msgid "built-in method"
msgstr ""

#: ../../reference/datamodel.rst:819
msgid "built-in"
msgstr ""

#: ../../reference/datamodel.rst:852
msgid "import"
msgstr ""

#: ../../reference/datamodel.rst:872
msgid "__name__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:872
msgid "__doc__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:872
msgid "__file__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:872
msgid "__annotations__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:903
msgid "__dict__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:934 ../../reference/datamodel.rst:952
#: ../../reference/datamodel.rst:998 ../../reference/datamodel.rst:1595
#: ../../reference/datamodel.rst:2468
msgid "class"
msgstr ""

#: ../../reference/datamodel.rst:934 ../../reference/datamodel.rst:998
#: ../../reference/datamodel.rst:1018
msgid "class instance"
msgstr ""

#: ../../reference/datamodel.rst:934 ../../reference/datamodel.rst:998
#: ../../reference/datamodel.rst:2738
msgid "instance"
msgstr ""

#: ../../reference/datamodel.rst:934 ../../reference/datamodel.rst:957
msgid "class object"
msgstr ""

#: ../../reference/datamodel.rst:961
msgid "__name__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:961
msgid "__module__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:961
msgid "__dict__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:961
msgid "__bases__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:961
msgid "__doc__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:961
msgid "__annotations__ (class attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1033
msgid "__dict__ (instance attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1033
msgid "__class__ (instance attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "open"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "io"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "popen() (in module os)"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "makefile() (socket method)"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "sys.stdin"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "sys.stdout"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "sys.stderr"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "stdio"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "stdin (in module sys)"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "stdout (in module sys)"
msgstr ""

#: ../../reference/datamodel.rst:1044
msgid "stderr (in module sys)"
msgstr ""

#: ../../reference/datamodel.rst:1073
msgid "internal type"
msgstr ""

#: ../../reference/datamodel.rst:1073
msgid "types, internal"
msgstr ""

#: ../../reference/datamodel.rst:1081
msgid "bytecode"
msgstr ""

#: ../../reference/datamodel.rst:1081
msgid "code"
msgstr ""

#: ../../reference/datamodel.rst:1081
msgid "code object"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_argcount (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_posonlyargcount (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_kwonlyargcount (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_code (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_consts (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_filename (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_firstlineno (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_flags (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_lnotab (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_name (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_names (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_nlocals (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_stacksize (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_varnames (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_cellvars (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_freevars (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1097
msgid "co_qualname (code object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1204
msgid "documentation string"
msgstr ""

#: ../../reference/datamodel.rst:1293
msgid "frame"
msgstr ""

#: ../../reference/datamodel.rst:1299
msgid "f_back (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1299
msgid "f_code (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1299
msgid "f_globals (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1299
msgid "f_locals (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1299
msgid "f_lasti (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1299
msgid "f_builtins (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1338
msgid "f_trace (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1338
msgid "f_trace_lines (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1338
msgid "f_trace_opcodes (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1338
msgid "f_lineno (frame attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "traceback"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "stack"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "trace"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "exception"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "handler"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "execution"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "exc_info (in module sys)"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "last_traceback (in module sys)"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "sys.exc_info"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "sys.exception"
msgstr ""

#: ../../reference/datamodel.rst:1393
msgid "sys.last_traceback"
msgstr ""

#: ../../reference/datamodel.rst:1430
msgid "tb_frame (traceback attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1430
msgid "tb_lineno (traceback attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1430
msgid "tb_lasti (traceback attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1430
msgid "try"
msgstr ""

#: ../../reference/datamodel.rst:1460
msgid "tb_next (traceback attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1476 ../../reference/datamodel.rst:2816
msgid "slice"
msgstr ""

#: ../../reference/datamodel.rst:1482
msgid "start (slice object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1482
msgid "stop (slice object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1482
msgid "step (slice object attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1530
msgid "operator"
msgstr ""

#: ../../reference/datamodel.rst:1530
msgid "overloading"
msgstr ""

#: ../../reference/datamodel.rst:1530
msgid "__getitem__() (mapping object method)"
msgstr ""

#: ../../reference/datamodel.rst:1566
msgid "subclassing"
msgstr ""

#: ../../reference/datamodel.rst:1566
msgid "immutable types"
msgstr ""

#: ../../reference/datamodel.rst:1595
msgid "constructor"
msgstr ""

#: ../../reference/datamodel.rst:1612
msgid "destructor"
msgstr ""

#: ../../reference/datamodel.rst:1612
msgid "finalizer"
msgstr ""

#: ../../reference/datamodel.rst:1612
msgid "del"
msgstr ""

#: ../../reference/datamodel.rst:1674
msgid "repr() (built-in function)"
msgstr ""

#: ../../reference/datamodel.rst:1674
msgid "__repr__() (object method)"
msgstr ""

#: ../../reference/datamodel.rst:1691
msgid "__str__() (object method)"
msgstr ""

#: ../../reference/datamodel.rst:1691
msgid "format() (built-in function)"
msgstr ""

#: ../../reference/datamodel.rst:1691
msgid "print() (built-in function)"
msgstr ""

#: ../../reference/datamodel.rst:1721
msgid "__format__() (object method)"
msgstr ""

#: ../../reference/datamodel.rst:1721
msgid "conversion"
msgstr ""

#: ../../reference/datamodel.rst:1721
msgid "print"
msgstr ""

#: ../../reference/datamodel.rst:1760
msgid "comparisons"
msgstr ""

#: ../../reference/datamodel.rst:1805
msgid "hash"
msgstr ""

#: ../../reference/datamodel.rst:1886
msgid "__len__() (mapping object method)"
msgstr ""

#: ../../reference/datamodel.rst:1990
msgid "__getattr__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1990
msgid "__dir__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:1990
msgid "__class__ (module attribute)"
msgstr ""

#: ../../reference/datamodel.rst:2361
msgid "metaclass"
msgstr ""

#: ../../reference/datamodel.rst:2361
msgid "= (equals)"
msgstr ""

#: ../../reference/datamodel.rst:2361
msgid "class definition"
msgstr ""

#: ../../reference/datamodel.rst:2421
msgid "metaclass hint"
msgstr ""

#: ../../reference/datamodel.rst:2444
msgid "__prepare__ (metaclass method)"
msgstr ""

#: ../../reference/datamodel.rst:2468
msgid "body"
msgstr ""

#: ../../reference/datamodel.rst:2488
msgid "__class__ (method cell)"
msgstr ""

#: ../../reference/datamodel.rst:2488
msgid "__classcell__ (class namespace entry)"
msgstr ""

#: ../../reference/datamodel.rst:2786
msgid "__bool__() (object method)"
msgstr ""

#: ../../reference/datamodel.rst:2944 ../../reference/datamodel.rst:2979
msgid "divmod"
msgstr ""

#: ../../reference/datamodel.rst:2944 ../../reference/datamodel.rst:2979
#: ../../reference/datamodel.rst:2993
msgid "pow"
msgstr ""

#: ../../reference/datamodel.rst:3042
msgid "abs"
msgstr ""

#: ../../reference/datamodel.rst:3052
msgid "int"
msgstr ""

#: ../../reference/datamodel.rst:3052
msgid "float"
msgstr ""

#: ../../reference/datamodel.rst:3080
msgid "round"
msgstr ""

#: ../../reference/datamodel.rst:3107
msgid "with"
msgstr ""

#: ../../reference/datamodel.rst:3107
msgid "context manager"
msgstr ""
