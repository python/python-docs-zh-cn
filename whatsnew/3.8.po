# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:03+0000\n"
"PO-Revision-Date: 2025-07-18 19:59+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.8.rst:3
msgid "What's New In Python 3.8"
msgstr "Python 3.8 有什么新变化"

#: ../../whatsnew/3.8.rst:0
msgid "Editor"
msgstr "编者"

#: ../../whatsnew/3.8.rst:45
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger（译者：wh2099 at outlook dot com）"

#: ../../whatsnew/3.8.rst:47
msgid ""
"This article explains the new features in Python 3.8, compared to 3.7. "
"Python 3.8 was released on October 14, 2019. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""
"这篇文章介绍了 Python 3.8 相比 3.7 增加的新特性。 Python 3.8 发布于 2019 年 10 月 14 日。 更详细的信息可参阅"
" :ref:`更新日志 <changelog>`。"

#: ../../whatsnew/3.8.rst:61
msgid "Summary -- Release highlights"
msgstr "摘要 -- 发布重点"

#: ../../whatsnew/3.8.rst:72
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.8.rst:75
msgid "Assignment expressions"
msgstr "赋值表达式"

#: ../../whatsnew/3.8.rst:77
msgid ""
"There is new syntax ``:=`` that assigns values to variables as part of a "
"larger expression. It is affectionately known as \"the walrus operator\" due"
" to its resemblance to `the eyes and tusks of a walrus "
"<https://en.wikipedia.org/wiki/Walrus#/media/File:Pacific_Walrus_-"
"_Bull_(8247646168).jpg>`_."
msgstr ""
"新增的语法 ``:=`` 可在表达式内部为变量赋值。 它被昵称为“海象运算符”因为它很像是 `海象的眼睛和长牙 "
"<https://en.wikipedia.org/wiki/Walrus#/media/File:Pacific_Walrus_-"
"_Bull_(8247646168).jpg>`_。"

#: ../../whatsnew/3.8.rst:82
msgid ""
"In this example, the assignment expression helps avoid calling :func:`len` "
"twice::"
msgstr "在这个示例中，赋值表达式可以避免调用 :func:`len` 两次::"

#: ../../whatsnew/3.8.rst:85
msgid ""
"if (n := len(a)) > 10:\n"
"    print(f\"List is too long ({n} elements, expected <= 10)\")"
msgstr ""
"if (n := len(a)) > 10:\n"
"    print(f\"List is too long ({n} elements, expected <= 10)\")"

#: ../../whatsnew/3.8.rst:88
msgid ""
"A similar benefit arises during regular expression matching where match "
"objects are needed twice, once to test whether a match occurred and another "
"to extract a subgroup::"
msgstr "类似的益处还可出现在正则表达式匹配中需要使用两次匹配对象的情况中，一次检测用于匹配是否发生，另一次用于提取子分组::"

#: ../../whatsnew/3.8.rst:92
msgid ""
"discount = 0.0\n"
"if (mo := re.search(r'(\\d+)% discount', advertisement)):\n"
"    discount = float(mo.group(1)) / 100.0"
msgstr ""
"discount = 0.0\n"
"if (mo := re.search(r'(\\d+)% discount', advertisement)):\n"
"    discount = float(mo.group(1)) / 100.0"

#: ../../whatsnew/3.8.rst:96
msgid ""
"The operator is also useful with while-loops that compute a value to test "
"loop termination and then need that same value again in the body of the "
"loop::"
msgstr "此运算符也适用于配合 while 循环计算一个值来检测循环是否终止，而同一个值又在循环体中再次被使用的情况::"

#: ../../whatsnew/3.8.rst:100
msgid ""
"# Loop over fixed length blocks\n"
"while (block := f.read(256)) != '':\n"
"    process(block)"
msgstr ""
"# 循环处理固定长度的数据块\n"
"while (block := f.read(256)) != '':\n"
"    process(block)"

#: ../../whatsnew/3.8.rst:104
msgid ""
"Another motivating use case arises in list comprehensions where a value "
"computed in a filtering condition is also needed in the expression body::"
msgstr "另一个值得介绍的用例出现于列表推导式中，在筛选条件中计算一个值，而同一个值又在表达式中需要被使用::"

#: ../../whatsnew/3.8.rst:108
msgid ""
"[clean_name.title() for name in names\n"
" if (clean_name := normalize('NFC', name)) in allowed_names]"
msgstr ""
"[clean_name.title() for name in names\n"
" if (clean_name := normalize('NFC', name)) in allowed_names]"

#: ../../whatsnew/3.8.rst:111
msgid ""
"Try to limit use of the walrus operator to clean cases that reduce "
"complexity and improve readability."
msgstr "请尽量将海象运算符的使用限制在清晰的场合中，以降低复杂性并提升可读性。"

#: ../../whatsnew/3.8.rst:114
msgid "See :pep:`572` for a full description."
msgstr "请参阅 :pep:`572` 了解详情。"

#: ../../whatsnew/3.8.rst:116
msgid "(Contributed by Emily Morehouse in :issue:`35224`.)"
msgstr "（由 Morehouse 在 :issue:`35224` 中贡献。）"

#: ../../whatsnew/3.8.rst:120
msgid "Positional-only parameters"
msgstr "仅限位置形参"

#: ../../whatsnew/3.8.rst:122
msgid ""
"There is a new function parameter syntax ``/`` to indicate that some "
"function parameters must be specified positionally and cannot be used as "
"keyword arguments.  This is the same notation shown by ``help()`` for C "
"functions annotated with Larry Hastings' `Argument Clinic "
"<https://devguide.python.org/development-tools/clinic/>`__ tool."
msgstr ""
"新增了一个函数形参语法 ``/`` 用来指明某些函数形参必须作为位置参数而不可作为关键字参数。 这种标记语法与通过 ``help()`` 显示的使用 "
"Larry Hastings 的 `Argument Clinic <https://devguide.python.org/development-"
"tools/clinic/>`__ 工具所标记的 C 函数相同。"

#: ../../whatsnew/3.8.rst:128
msgid ""
"In the following example, parameters *a* and *b* are positional-only, while "
"*c* or *d* can be positional or keyword, and *e* or *f* are required to be "
"keywords::"
msgstr ""
"在下面的例子中，形参 *a* 和 *b* 为仅限位置形参，*c* 或 *d* 可以是位置形参或关键字形参，而 *e* 或 *f* 要求为关键字形参::"

#: ../../whatsnew/3.8.rst:132
msgid ""
"def f(a, b, /, c, d, *, e, f):\n"
"    print(a, b, c, d, e, f)"
msgstr ""
"def f(a, b, /, c, d, *, e, f):\n"
"    print(a, b, c, d, e, f)"

#: ../../whatsnew/3.8.rst:135
msgid "The following is a valid call::"
msgstr "以下均为合法的调用::"

#: ../../whatsnew/3.8.rst:137
msgid "f(10, 20, 30, d=40, e=50, f=60)"
msgstr "f(10, 20, 30, d=40, e=50, f=60)"

#: ../../whatsnew/3.8.rst:139
msgid "However, these are invalid calls::"
msgstr "但是，以下均为不合法的调用::"

#: ../../whatsnew/3.8.rst:141
msgid ""
"f(10, b=20, c=30, d=40, e=50, f=60)   # b cannot be a keyword argument\n"
"f(10, 20, 30, 40, 50, f=60)           # e must be a keyword argument"
msgstr ""
"f(10, b=20, c=30, d=40, e=50, f=60)   # b 不能是关键字参数\n"
"f(10, 20, 30, 40, 50, f=60)           # e 必须是关键字参数"

#: ../../whatsnew/3.8.rst:144
msgid ""
"One use case for this notation is that it allows pure Python functions to "
"fully emulate behaviors of existing C coded functions.  For example, the "
"built-in :func:`divmod` function does not accept keyword arguments::"
msgstr ""
"这种标记形式的一个用例是它允许纯 Python 函数完整模拟现有的用 C 代码编写的函数的行为。 例如，内置的 :func:`divmod` "
"函数不接受关键字参数::"

#: ../../whatsnew/3.8.rst:148
msgid ""
"def divmod(a, b, /):\n"
"    \"Emulate the built in divmod() function\"\n"
"    return (a // b, a % b)"
msgstr ""
"def divmod(a, b, /):\n"
"    \"Emulate the built in divmod() function\"\n"
"    return (a // b, a % b)"

#: ../../whatsnew/3.8.rst:152
msgid ""
"Another use case is to preclude keyword arguments when the parameter name is"
" not helpful.  For example, the builtin :func:`len` function has the "
"signature ``len(obj, /)``.  This precludes awkward calls such as::"
msgstr ""
"另一个用例是在不需要形参名称时排除关键字参数。 例如，内置的 :func:`len` 函数的签名为 ``len(obj, /)``。 "
"这可以排除如下这种笨拙的调用形式::"

#: ../../whatsnew/3.8.rst:156
msgid "len(obj='hello')  # The \"obj\" keyword argument impairs readability"
msgstr "len(obj='hello')  # \"obj\" 关键字参数损害了可读性"

#: ../../whatsnew/3.8.rst:158
msgid ""
"A further benefit of marking a parameter as positional-only is that it "
"allows the parameter name to be changed in the future without risk of "
"breaking client code.  For example, in the :mod:`statistics` module, the "
"parameter name *dist* may be changed in the future.  This was made possible "
"with the following function specification::"
msgstr ""
"另一个益处是将形参标记为仅限位置形参将允许在未来修改形参名而不会破坏客户的代码。 例如，在 :mod:`statistics` 模块中，形参名 "
"*dist* 在未来可能被修改。 这使得以下函数描述成为可能::"

#: ../../whatsnew/3.8.rst:164
msgid ""
"def quantiles(dist, /, *, n=4, method='exclusive')\n"
"    ..."
msgstr ""
"def quantiles(dist, /, *, n=4, method='exclusive')\n"
"    ..."

#: ../../whatsnew/3.8.rst:167
msgid ""
"Since the parameters to the left of ``/`` are not exposed as possible "
"keywords, the parameters names remain available for use in ``**kwargs``::"
msgstr "由于在 ``/`` 左侧的形参不会被公开为可用关键字，其他形参名仍可在 ``**kwargs`` 中使用::"

#: ../../whatsnew/3.8.rst:170
msgid ""
">>> def f(a, b, /, **kwargs):\n"
"...     print(a, b, kwargs)\n"
"...\n"
">>> f(10, 20, a=1, b=2, c=3)         # a and b are used in two ways\n"
"10 20 {'a': 1, 'b': 2, 'c': 3}"
msgstr ""
">>> def f(a, b, /, **kwargs):\n"
"...     print(a, b, kwargs)\n"
"...\n"
">>> f(10, 20, a=1, b=2, c=3)         # a 和 b 以两种方式被使用\n"
"10 20 {'a': 1, 'b': 2, 'c': 3}"

#: ../../whatsnew/3.8.rst:176
msgid ""
"This greatly simplifies the implementation of functions and methods that "
"need to accept arbitrary keyword arguments.  For example, here is an excerpt"
" from code in the :mod:`collections` module::"
msgstr "这极大地简化了需要接受任意关键字参数的函数和方法的实现。 例如，以下是一段摘自 :mod:`collections` 模块的代码::"

#: ../../whatsnew/3.8.rst:180
msgid ""
"class Counter(dict):\n"
"\n"
"    def __init__(self, iterable=None, /, **kwds):\n"
"        # Note \"iterable\" is a possible keyword argument"
msgstr ""
"class Counter(dict):\n"
"\n"
"    def __init__(self, iterable=None, /, **kwds):\n"
"        # 请注意 \"iterable\" 可以是关键字参数"

#: ../../whatsnew/3.8.rst:185
msgid "See :pep:`570` for a full description."
msgstr "请参阅 :pep:`570` 了解详情。"

#: ../../whatsnew/3.8.rst:187
msgid "(Contributed by Pablo Galindo in :issue:`36540`.)"
msgstr "（由 Pablo Galindo 在 :issue:`36540` 中贡献。）"

#: ../../whatsnew/3.8.rst:193
msgid "Parallel filesystem cache for compiled bytecode files"
msgstr "用于已编译字节码文件的并行文件系统缓存"

#: ../../whatsnew/3.8.rst:195
msgid ""
"The new :envvar:`PYTHONPYCACHEPREFIX` setting (also available as "
":option:`-X` ``pycache_prefix``) configures the implicit bytecode cache to "
"use a separate parallel filesystem tree, rather than the default "
"``__pycache__`` subdirectories within each source directory."
msgstr ""
"新增的 :envvar:`PYTHONPYCACHEPREFIX` 设置 (也可使用 :option:`-X` ``pycache_prefix``) "
"可将隐式的字节码缓存配置为使用单独的并行文件系统树，而不是默认的每个源代码目录下的 ``__pycache__`` 子目录。"

#: ../../whatsnew/3.8.rst:201
msgid ""
"The location of the cache is reported in :data:`sys.pycache_prefix` "
"(:const:`None` indicates the default location in ``__pycache__`` "
"subdirectories)."
msgstr ""
"缓存的位置会在 :data:`sys.pycache_prefix` 中报告 (:const:`None` 表示默认位置即 "
"``__pycache__`` 子目录)。"

#: ../../whatsnew/3.8.rst:205
msgid "(Contributed by Carl Meyer in :issue:`33499`.)"
msgstr "（由 Carl Meyer 在 :issue:`33499` 中贡献。）"

#: ../../whatsnew/3.8.rst:209
msgid "Debug build uses the same ABI as release build"
msgstr "调试构建使用与发布构建相同的 ABI"

#: ../../whatsnew/3.8.rst:211
msgid ""
"Python now uses the same ABI whether it's built in release or debug mode. On"
" Unix, when Python is built in debug mode, it is now possible to load C "
"extensions built in release mode and C extensions built using the stable "
"ABI."
msgstr ""
"Python 现在不论是以发布模式还是调试模式进行构建都将使用相同的 ABI。 在 Unix 上，当 Python "
"以调试模式构建时，现在将可以加载以发布模式构建的 C 扩展和使用稳定版 ABI 构建的 C 扩展。"

#: ../../whatsnew/3.8.rst:215
msgid ""
"Release builds and :ref:`debug builds <debug-build>` are now ABI compatible:"
" defining the ``Py_DEBUG`` macro no longer implies the ``Py_TRACE_REFS`` "
"macro, which introduces the only ABI incompatibility. The ``Py_TRACE_REFS`` "
"macro, which adds the :func:`sys.getobjects` function and the "
":envvar:`PYTHONDUMPREFS` environment variable, can be set using the new "
":option:`./configure --with-trace-refs <--with-trace-refs>` build option. "
"(Contributed by Victor Stinner in :issue:`36465`.)"
msgstr ""
"发布编译版和 :ref:`调试编译版 <debug-build>` 现在都是 ABI 兼容的：定义 ``Py_DEBUG`` 宏不会再应用 "
"``Py_TRACE_REFS`` 宏，它引入 了唯一的 ABI 不兼容性。 ``Py_TRACE_REFS`` 宏添加了 "
":func:`sys.getobjects` 函数和 :envvar:`PYTHONDUMPREFS` 环境变量，它可以使用新的 "
":option:`./configure --with-trace-refs <--with-trace-refs>` 编译选项来设置。 （由 "
"Victor Stinner 在 :issue:`36465` 中贡献。）"

#: ../../whatsnew/3.8.rst:223
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android "
"and Cygwin. It is now possible for a statically linked Python to load a C "
"extension built using a shared library Python. (Contributed by Victor "
"Stinner in :issue:`21536`.)"
msgstr ""
"在 Unix 上，C 扩展不会再被链接到 libpython，但 Android 和 Cygwin 例外。 现在静态链接的 Python "
"将可以加载使用共享库 Python 构建的 C 扩展。 （由 Victor Stinner 在 :issue:`21536` 中贡献。）"

#: ../../whatsnew/3.8.rst:230
msgid ""
"On Unix, when Python is built in debug mode, import now also looks for C "
"extensions compiled in release mode and for C extensions compiled with the "
"stable ABI. (Contributed by Victor Stinner in :issue:`36722`.)"
msgstr ""
"在 Unix 上，当 Python 以调试模式构建时，导入操作现在也会查找在发布模式下编译的 C 扩展以及使用稳定版 ABI 编译的 C 扩展。 （由 "
"Victor Stinner 在 :issue:`36722` 中贡献。）"

#: ../../whatsnew/3.8.rst:235
msgid ""
"To embed Python into an application, a new ``--embed`` option must be passed"
" to ``python3-config --libs --embed`` to get ``-lpython3.8`` (link the "
"application to libpython). To support both 3.8 and older, try "
"``python3-config --libs --embed`` first and fallback to ``python3-config "
"--libs`` (without ``--embed``) if the previous command fails."
msgstr ""
"要将 Python 嵌入到一个应用中，必须将新增的 ``--embed`` 选项传给 ``python3-config --libs --embed``"
" 以获得 ``-lpython3.8`` (将应用链接到 libpython)。 要同时支持 3.8 和旧版本，请先尝试 "
"``python3-config --libs --embed`` 并在此命令失败时回退到 ``python3-config --libs`` (即不带"
" ``--embed``)。"

#: ../../whatsnew/3.8.rst:241
msgid ""
"Add a pkg-config ``python-3.8-embed`` module to embed Python into an "
"application: ``pkg-config python-3.8-embed --libs`` includes "
"``-lpython3.8``. To support both 3.8 and older, try ``pkg-config "
"python-X.Y-embed --libs`` first and fallback to ``pkg-config python-X.Y "
"--libs`` (without ``--embed``) if the previous command fails (replace "
"``X.Y`` with the Python version)."
msgstr ""
"增加一个 pkg-config ``python-3.8-embed`` 模块用来将 Python 嵌入到一个应用中: ``pkg-config "
"python-3.8-embed --libs`` 包含 ``-lpython3.8``。 要同时支持 3.8 和旧版本，请先尝试 ``pkg-"
"config python-X.Y-embed --libs`` 并在此命令失败时回退到 ``pkg-config python-X.Y "
"--libs`` (即不带 ``--embed``) （请将 ``X.Y`` 替换为 Python 版本号）。"

#: ../../whatsnew/3.8.rst:247
msgid ""
"On the other hand, ``pkg-config python3.8 --libs`` no longer contains "
"``-lpython3.8``. C extensions must not be linked to libpython (except on "
"Android and Cygwin, whose cases are handled by the script); this change is "
"backward incompatible on purpose. (Contributed by Victor Stinner in "
":issue:`36721`.)"
msgstr ""
"另一方面，``pkg-config python3.8 --libs`` 不再包含 ``-lpython3.8``。 C 扩展不可被链接到 "
"libpython (但 Android 和 Cygwin 例外，这两者的情况由脚本处理)；此改变是故意被设为向下不兼容的。 （由 Victor "
"Stinner 在 :issue:`36721` 中贡献。）"

#: ../../whatsnew/3.8.rst:256
msgid "f-strings support ``=`` for self-documenting expressions and debugging"
msgstr "f-字符串支持 ``=`` 用于自动记录表达式和调试文档"

#: ../../whatsnew/3.8.rst:258
msgid ""
"Added an ``=`` specifier to :term:`f-string`\\s. An f-string such as "
"``f'{expr=}'`` will expand to the text of the expression, an equal sign, "
"then the representation of the evaluated expression.  For example:"
msgstr ""
"增加 ``=`` 说明符用于 :term:`f-string`。 形式为 ``f'{expr=}'`` 的 "
"f-字符串将扩展表示为表达式文本，加一个等于号，再加表达式的求值结果。 例如："

#: ../../whatsnew/3.8.rst:267
msgid ""
"The usual :ref:`f-string format specifiers <f-strings>` allow more control "
"over how the result of the expression is displayed::"
msgstr "通常的 :ref:`f-字符串格式说明符 <f-strings>` 允许更细致地控制所要显示的表达式结果::"

#: ../../whatsnew/3.8.rst:270
msgid ""
">>> delta = date.today() - member_since\n"
">>> f'{user=!s}  {delta.days=:,d}'\n"
"'user=eric_idle  delta.days=16,075'"
msgstr ""
">>> delta = date.today() - member_since\n"
">>> f'{user=!s}  {delta.days=:,d}'\n"
"'user=eric_idle  delta.days=16,075'"

#: ../../whatsnew/3.8.rst:274
msgid ""
"The ``=`` specifier will display the whole expression so that calculations "
"can be shown::"
msgstr "``=`` 说明符将输出整个表达式，以便详细演示计算过程::"

#: ../../whatsnew/3.8.rst:277
msgid ""
">>> print(f'{theta=}  {cos(radians(theta))=:.3f}')\n"
"theta=30  cos(radians(theta))=0.866"
msgstr ""
">>> print(f'{theta=}  {cos(radians(theta))=:.3f}')\n"
"theta=30  cos(radians(theta))=0.866"

#: ../../whatsnew/3.8.rst:280
msgid "(Contributed by Eric V. Smith and Larry Hastings in :issue:`36817`.)"
msgstr "（由 Eric V. Smith 和 Larry Hastings 在 :issue:`36817` 中贡献。）"

#: ../../whatsnew/3.8.rst:284
msgid "PEP 578: Python Runtime Audit Hooks"
msgstr "PEP 578: Python 运行时审核钩子"

#: ../../whatsnew/3.8.rst:286
msgid ""
"The PEP adds an Audit Hook and Verified Open Hook. Both are available from "
"Python and native code, allowing applications and frameworks written in pure"
" Python code to take advantage of extra notifications, while also allowing "
"embedders or system administrators to deploy builds of Python where auditing"
" is always enabled."
msgstr ""
"此 PEP 添加了审核钩子和已验证开放钩子。 两者在 Python 与本机代码中均可用。允许以纯 Python "
"代码编写的应用和框架利用额外的通知，同时允许嵌入开发人员或系统管理员部署始终启用审核的 Python 版本。"

#: ../../whatsnew/3.8.rst:292
msgid "See :pep:`578` for full details."
msgstr "请参阅 :pep:`578` 了解详情。"

#: ../../whatsnew/3.8.rst:296
msgid "PEP 587: Python Initialization Configuration"
msgstr "PEP 587: Python 初始化配置"

#: ../../whatsnew/3.8.rst:298
msgid ""
"The :pep:`587` adds a new C API to configure the Python Initialization "
"providing finer control on the whole configuration and better error "
"reporting."
msgstr ":pep:`587` 增加了一个新的 C API 用来配置 Python 初始化，提供对整个配置过程的更细致控制以及更好的错误报告。"

#: ../../whatsnew/3.8.rst:301
msgid "New structures:"
msgstr "新的结构："

#: ../../whatsnew/3.8.rst:303
msgid ":c:type:`PyConfig`"
msgstr ":c:type:`PyConfig`"

#: ../../whatsnew/3.8.rst:304
msgid ":c:type:`PyPreConfig`"
msgstr ":c:type:`PyPreConfig`"

#: ../../whatsnew/3.8.rst:305
msgid ":c:type:`PyStatus`"
msgstr ":c:type:`PyStatus`"

#: ../../whatsnew/3.8.rst:306
msgid ":c:type:`PyWideStringList`"
msgstr ":c:type:`PyWideStringList`"

#: ../../whatsnew/3.8.rst:308
msgid "New functions:"
msgstr "新的函数："

#: ../../whatsnew/3.8.rst:310
msgid ":c:func:`PyConfig_Clear`"
msgstr ":c:func:`PyConfig_Clear`"

#: ../../whatsnew/3.8.rst:311
msgid ":c:func:`PyConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyConfig_InitIsolatedConfig`"

#: ../../whatsnew/3.8.rst:312
msgid ":c:func:`PyConfig_InitPythonConfig`"
msgstr ":c:func:`PyConfig_InitPythonConfig`"

#: ../../whatsnew/3.8.rst:313
msgid ":c:func:`PyConfig_Read`"
msgstr ":c:func:`PyConfig_Read`"

#: ../../whatsnew/3.8.rst:314
msgid ":c:func:`PyConfig_SetArgv`"
msgstr ":c:func:`PyConfig_SetArgv`"

#: ../../whatsnew/3.8.rst:315
msgid ":c:func:`PyConfig_SetBytesArgv`"
msgstr ":c:func:`PyConfig_SetBytesArgv`"

#: ../../whatsnew/3.8.rst:316
msgid ":c:func:`PyConfig_SetBytesString`"
msgstr ":c:func:`PyConfig_SetBytesString`"

#: ../../whatsnew/3.8.rst:317
msgid ":c:func:`PyConfig_SetString`"
msgstr ":c:func:`PyConfig_SetString`"

#: ../../whatsnew/3.8.rst:318
msgid ":c:func:`PyPreConfig_InitIsolatedConfig`"
msgstr ":c:func:`PyPreConfig_InitIsolatedConfig`"

#: ../../whatsnew/3.8.rst:319
msgid ":c:func:`PyPreConfig_InitPythonConfig`"
msgstr ":c:func:`PyPreConfig_InitPythonConfig`"

#: ../../whatsnew/3.8.rst:320
msgid ":c:func:`PyStatus_Error`"
msgstr ":c:func:`PyStatus_Error`"

#: ../../whatsnew/3.8.rst:321
msgid ":c:func:`PyStatus_Exception`"
msgstr ":c:func:`PyStatus_Exception`"

#: ../../whatsnew/3.8.rst:322
msgid ":c:func:`PyStatus_Exit`"
msgstr ":c:func:`PyStatus_Exit`"

#: ../../whatsnew/3.8.rst:323
msgid ":c:func:`PyStatus_IsError`"
msgstr ":c:func:`PyStatus_IsError`"

#: ../../whatsnew/3.8.rst:324
msgid ":c:func:`PyStatus_IsExit`"
msgstr ":c:func:`PyStatus_IsExit`"

#: ../../whatsnew/3.8.rst:325
msgid ":c:func:`PyStatus_NoMemory`"
msgstr ":c:func:`PyStatus_NoMemory`"

#: ../../whatsnew/3.8.rst:326
msgid ":c:func:`PyStatus_Ok`"
msgstr ":c:func:`PyStatus_Ok`"

#: ../../whatsnew/3.8.rst:327
msgid ":c:func:`PyWideStringList_Append`"
msgstr ":c:func:`PyWideStringList_Append`"

#: ../../whatsnew/3.8.rst:328
msgid ":c:func:`PyWideStringList_Insert`"
msgstr ":c:func:`PyWideStringList_Insert`"

#: ../../whatsnew/3.8.rst:329
msgid ":c:func:`Py_BytesMain`"
msgstr ":c:func:`Py_BytesMain`"

#: ../../whatsnew/3.8.rst:330
msgid ":c:func:`Py_ExitStatusException`"
msgstr ":c:func:`Py_ExitStatusException`"

#: ../../whatsnew/3.8.rst:331
msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ":c:func:`Py_InitializeFromConfig`"

#: ../../whatsnew/3.8.rst:332
msgid ":c:func:`Py_PreInitialize`"
msgstr ":c:func:`Py_PreInitialize`"

#: ../../whatsnew/3.8.rst:333
msgid ":c:func:`Py_PreInitializeFromArgs`"
msgstr ":c:func:`Py_PreInitializeFromArgs`"

#: ../../whatsnew/3.8.rst:334
msgid ":c:func:`Py_PreInitializeFromBytesArgs`"
msgstr ":c:func:`Py_PreInitializeFromBytesArgs`"

#: ../../whatsnew/3.8.rst:335
msgid ":c:func:`Py_RunMain`"
msgstr ":c:func:`Py_RunMain`"

#: ../../whatsnew/3.8.rst:337
msgid ""
"This PEP also adds ``_PyRuntimeState.preconfig`` (:c:type:`PyPreConfig` "
"type) and ``PyInterpreterState.config`` (:c:type:`PyConfig` type) fields to "
"these internal structures. ``PyInterpreterState.config`` becomes the new "
"reference configuration, replacing global configuration variables and other "
"private variables."
msgstr ""
"此 PEP 还为这些内部结构添加了 ``_PyRuntimeState.preconfig`` (:c:type:`PyPreConfig` 类型) 和"
" ``PyInterpreterState.config`` (:c:type:`PyConfig` 类型) 字段。 "
"``PyInterpreterState.config`` 成为新的引用配置，替代全局配置变量和其他私有变量。"

#: ../../whatsnew/3.8.rst:343
msgid ""
"See :ref:`Python Initialization Configuration <init-config>` for the "
"documentation."
msgstr "请参阅 :ref:`Python 初始化配置 <init-config>` 获取详细文档。"

#: ../../whatsnew/3.8.rst:346
msgid "See :pep:`587` for a full description."
msgstr "请参阅 :pep:`587` 了解详情。"

#: ../../whatsnew/3.8.rst:348
msgid "(Contributed by Victor Stinner in :issue:`36763`.)"
msgstr "（由 Victor Stinner 在 :issue:`36763` 中贡献。）"

#: ../../whatsnew/3.8.rst:352
msgid "PEP 590: Vectorcall: a fast calling protocol for CPython"
msgstr "PEP 590: Vectorcall: 用于 CPython 的快速调用协议"

#: ../../whatsnew/3.8.rst:354
msgid ""
":ref:`vectorcall` is added to the Python/C API. It is meant to formalize "
"existing optimizations which were already done for various classes. Any "
":ref:`static type <static-types>` implementing a callable can use this "
"protocol."
msgstr ""
"将 :ref:`vectorcall` 添加到 Python/C API。 它的目标是对已被应用于多个类的现有优先进行正式化。 任何实现了可调用对象的 "
":ref:`静态类型 <static-types>` 均可使用此协议。"

#: ../../whatsnew/3.8.rst:360
msgid ""
"This is currently provisional. The aim is to make it fully public in Python "
"3.9."
msgstr "此特性目前为暂定状态，计划在 Python 3.9 将其完全公开。"

#: ../../whatsnew/3.8.rst:363
msgid "See :pep:`590` for a full description."
msgstr "请参阅 :pep:`590` 了解详情。"

#: ../../whatsnew/3.8.rst:365
msgid ""
"(Contributed by Jeroen Demeyer, Mark Shannon and Petr Viktorin in "
":issue:`36974`.)"
msgstr ""
"（由 Jeroen Demeyer, Mark Shannon 和 Petr Viktorin 在 :issue:`36974` 中贡献。）"

#: ../../whatsnew/3.8.rst:369
msgid "Pickle protocol 5 with out-of-band data buffers"
msgstr "具有外部数据缓冲区的 pickle 协议 5"

#: ../../whatsnew/3.8.rst:371
msgid ""
"When :mod:`pickle` is used to transfer large data between Python processes "
"in order to take advantage of multi-core or multi-machine processing, it is "
"important to optimize the transfer by reducing memory copies, and possibly "
"by applying custom techniques such as data-dependent compression."
msgstr ""
"当使用 :mod:`pickle` 在 Python "
"进程间传输大量数据以充分发挥多核或多机处理的优势时，非常重要一点是通过减少内存拷贝来优化传输效率，并可能应用一些定制技巧例如针对特定数据的压缩。"

#: ../../whatsnew/3.8.rst:376
msgid ""
"The :mod:`pickle` protocol 5 introduces support for out-of-band buffers "
"where :pep:`3118`-compatible data can be transmitted separately from the "
"main pickle stream, at the discretion of the communication layer."
msgstr ""
":mod:`pickle` 协议 5 引入了对于外部缓冲区的支持，这样 :pep:`3118` 兼容的数据可以与主 pickle "
"流分开进行传输，这是由通信层来确定的。"

#: ../../whatsnew/3.8.rst:380
msgid "See :pep:`574` for a full description."
msgstr "请参阅 :pep:`574` 了解详情。"

#: ../../whatsnew/3.8.rst:382
msgid "(Contributed by Antoine Pitrou in :issue:`36785`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`36785` 中贡献。）"

#: ../../whatsnew/3.8.rst:386
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.8.rst:388
msgid ""
"A :keyword:`continue` statement was illegal in the :keyword:`finally` clause"
" due to a problem with the implementation.  In Python 3.8 this restriction "
"was lifted. (Contributed by Serhiy Storchaka in :issue:`32489`.)"
msgstr ""
"在之前版本中 :keyword:`continue` 语句不允许在 :keyword:`finally` 子句中使用，这是因为具体实现存在一个问题。 在"
" Python 3.8 中此限制已被取消。 （由 Serhiy Storchaka 在 :issue:`32489` 中贡献。）"

#: ../../whatsnew/3.8.rst:393
msgid ""
"The :class:`bool`, :class:`int`, and :class:`fractions.Fraction` types now "
"have an :meth:`~int.as_integer_ratio` method like that found in "
":class:`float` and :class:`decimal.Decimal`.  This minor API extension makes"
" it possible to write ``numerator, denominator = x.as_integer_ratio()`` and "
"have it work across multiple numeric types. (Contributed by Lisa Roach in "
":issue:`33073` and Raymond Hettinger in :issue:`37819`.)"
msgstr ""
":class:`bool`, :class:`int` 和 :class:`fractions.Fraction` 类型现在都有一个 "
":meth:`~int.as_integer_ratio` 方法，与 :class:`float` 和 :class:`decimal.Decimal`"
" 中的已有方法类似。 这个微小的 API 扩展使得 ``numerator, denominator = x.as_integer_ratio()`` "
"这样的写法在多种数字类型上通用成为可能。 （由 Lisa Roach 在 :issue:`33073` 和 Raymond Hettinger 在 "
":issue:`37819` 中贡献。）"

#: ../../whatsnew/3.8.rst:401
msgid ""
"Constructors of :class:`int`, :class:`float` and :class:`complex` will now "
"use the :meth:`~object.__index__` special method, if available and the "
"corresponding method :meth:`~object.__int__`, :meth:`~object.__float__` or "
":meth:`~object.__complex__` is not available. (Contributed by Serhiy "
"Storchaka in :issue:`20092`.)"
msgstr ""
":class:`int`, :class:`float` 和 :class:`complex` 的构造器现在会使用 "
":meth:`~object.__index__` 特殊方法，如果该方法可用而对应的方法 method :meth:`~object.__int__`,"
" :meth:`~object.__float__` 或 :meth:`~object.__complex__` 方法不可用的话。 （由 Serhiy "
"Storchaka 在 :issue:`20092` 中贡献。）"

#: ../../whatsnew/3.8.rst:407
msgid ""
"Added support of :samp:`\\\\N\\\\{{name}\\\\}` escapes in :mod:`regular "
"expressions <re>`::"
msgstr "在 :mod:`正则表达式 <re>`: 中添加了对 :samp:`\\\\N\\\\{{name}\\\\}` 转义码的支持::"

#: ../../whatsnew/3.8.rst:409
msgid ""
">>> notice = 'Copyright © 2019'\n"
">>> copyright_year_pattern = re.compile(r'\\N{copyright sign}\\s*(\\d{4})')\n"
">>> int(copyright_year_pattern.search(notice).group(1))\n"
"2019"
msgstr ""
">>> notice = 'Copyright © 2019'\n"
">>> copyright_year_pattern = re.compile(r'\\N{copyright sign}\\s*(\\d{4})')\n"
">>> int(copyright_year_pattern.search(notice).group(1))\n"
"2019"

#: ../../whatsnew/3.8.rst:414
msgid ""
"(Contributed by Jonathan Eunice and Serhiy Storchaka in :issue:`30688`.)"
msgstr "（由 Jonathan Eunice 和 Serhiy Storchaka 在 :issue:`30688` 中贡献。）"

#: ../../whatsnew/3.8.rst:416
msgid ""
"Dict and dictviews are now iterable in reversed insertion order using "
":func:`reversed`. (Contributed by Rémi Lapeyre in :issue:`33462`.)"
msgstr ""
"现在 dict 和 dictview 可以使用 :func:`reversed` 按插入顺序反向迭代。 （由 Rémi Lapeyre 在 "
":issue:`33462` 中贡献。）"

#: ../../whatsnew/3.8.rst:419
msgid ""
"The syntax allowed for keyword names in function calls was further "
"restricted. In particular, ``f((keyword)=arg)`` is no longer allowed. It was"
" never intended to permit more than a bare name on the left-hand side of a "
"keyword argument assignment term. (Contributed by Benjamin Peterson in "
":issue:`34641`.)"
msgstr ""
"在函数调用中允许使用的关键字名称语法受到进一步的限制。 特别地，``f((keyword)=arg)`` 不再被允许。 "
"关键字参数赋值形式的左侧绝不允许一般标识符以外的其他内容。 （由 Benjamin Peterson 在 :issue:`34641` 中贡献。）"

#: ../../whatsnew/3.8.rst:425
msgid ""
"Generalized iterable unpacking in :keyword:`yield` and :keyword:`return` "
"statements no longer requires enclosing parentheses. This brings the *yield*"
" and *return* syntax into better agreement with normal assignment syntax::"
msgstr ""
"在 :keyword:`yield` 和 :keyword:`return` 语句中的一般可迭代对象解包不再要求加圆括号。 这使得 *yield* 和 "
"*return* 的语法与正常的赋值语法更为一致::"

#: ../../whatsnew/3.8.rst:430
msgid ""
">>> def parse(family):\n"
"        lastname, *members = family.split()\n"
"        return lastname.upper(), *members\n"
"\n"
">>> parse('simpsons homer marge bart lisa maggie')\n"
"('SIMPSONS', 'homer', 'marge', 'bart', 'lisa', 'maggie')"
msgstr ""
">>> def parse(family):\n"
"        lastname, *members = family.split()\n"
"        return lastname.upper(), *members\n"
"\n"
">>> parse('simpsons homer marge bart lisa maggie')\n"
"('SIMPSONS', 'homer', 'marge', 'bart', 'lisa', 'maggie')"

#: ../../whatsnew/3.8.rst:437
msgid "(Contributed by David Cuthbert and Jordan Chapman in :issue:`32117`.)"
msgstr "（由 David Cuthbert 和 Jordan Chapman 在 :issue:`32117` 中贡献。）"

#: ../../whatsnew/3.8.rst:439
msgid ""
"When a comma is missed in code such as ``[(10, 20) (30, 40)]``, the compiler"
" displays a :exc:`SyntaxWarning` with a helpful suggestion. This improves on"
" just having a :exc:`TypeError` indicating that the first tuple was not "
"callable.  (Contributed by Serhiy Storchaka in :issue:`15248`.)"
msgstr ""
"当类似 ``[(10, 20) (30, 40)]`` 这样在代码中少了一个逗号时，编译器将显示 :exc:`SyntaxWarning` "
"并附带更有帮助的提示。 这相比原来用 :exc:`TypeError` 来提示第一个元组是不可调用的更容易被理解。 （由 Serhiy "
"Storchaka 在 :issue:`15248` 中贡献。）"

#: ../../whatsnew/3.8.rst:445
msgid ""
"Arithmetic operations between subclasses of :class:`datetime.date` or "
":class:`datetime.datetime` and :class:`datetime.timedelta` objects now "
"return an instance of the subclass, rather than the base class. This also "
"affects the return type of operations whose implementation (directly or "
"indirectly) uses :class:`datetime.timedelta` arithmetic, such as "
":meth:`~datetime.datetime.astimezone`. (Contributed by Paul Ganssle in "
":issue:`32417`.)"
msgstr ""
":class:`datetime.date` 或 :class:`datetime.datetime` 和 "
":class:`datetime.timedelta` 对象之间的算术运算现在将返回相应子类的实例而不是基类的实例。 "
"这也会影响到在具体实现中（直接或间接地）使用了 :class:`datetime.timedelta` 算术运算的返回类型，例如 "
":meth:`~datetime.datetime.astimezone`。 （由 Paul Ganssle 在 :issue:`32417` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:453
msgid ""
"When the Python interpreter is interrupted by Ctrl-C (SIGINT) and the "
"resulting :exc:`KeyboardInterrupt` exception is not caught, the Python "
"process now exits via a SIGINT signal or with the correct exit code such "
"that the calling process can detect that it died due to a Ctrl-C.  Shells on"
" POSIX and Windows use this to properly terminate scripts in interactive "
"sessions. (Contributed by Google via Gregory P. Smith in :issue:`1054041`.)"
msgstr ""
"当 Python 解释器通过 Ctrl-C (SIGINT) 被中断并且所产生的 :exc:`KeyboardInterrupt` "
"异常未被捕获，Python 进程现在会通过一个 SIGINT 信号或是使得唤起的进程能检测到它是由 Ctrl-C 操作杀死的正确退出代码来退出。 "
"POSIX 和 Windows 上的终端会相应地使用此代码在交互式会话中终止脚本。 （由 Google 的 Gregory P. Smith 在 "
":issue:`1054041` 中贡献。）"

#: ../../whatsnew/3.8.rst:460
msgid ""
"Some advanced styles of programming require updating the "
":class:`types.CodeType` object for an existing function.  Since code objects"
" are immutable, a new code object needs to be created, one that is modeled "
"on the existing code object.  With 19 parameters, this was somewhat tedious."
"  Now, the new ``replace()`` method makes it possible to create a clone with"
" a few altered parameters."
msgstr ""
"某些高级编程风格要求为现有的函数更新 :class:`types.CodeType` 对象。 "
"由于代码对象是不可变的，需要基于现有代码对象模型创建一个新的代码对象。 使用 19 个形参将会相当繁琐。 现在，新的 ``replace()`` "
"方法使得通过少量修改的形参创建克隆对象成为可能。"

#: ../../whatsnew/3.8.rst:467
msgid ""
"Here's an example that alters the :func:`statistics.mean` function to "
"prevent the *data* parameter from being used as a keyword argument::"
msgstr "下面是一个修改 :func:`statistics.mean` 函数来防止 *data* 形参被用作关键字参数的例子::"

#: ../../whatsnew/3.8.rst:470
msgid ""
">>> from statistics import mean\n"
">>> mean(data=[10, 20, 90])\n"
"40\n"
">>> mean.__code__ = mean.__code__.replace(co_posonlyargcount=1)\n"
">>> mean(data=[10, 20, 90])\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: mean() got some positional-only arguments passed as keyword arguments: 'data'"
msgstr ""
">>> from statistics import mean\n"
">>> mean(data=[10, 20, 90])\n"
"40\n"
">>> mean.__code__ = mean.__code__.replace(co_posonlyargcount=1)\n"
">>> mean(data=[10, 20, 90])\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: mean() got some positional-only arguments passed as keyword arguments: 'data'"

#: ../../whatsnew/3.8.rst:479
msgid "(Contributed by Victor Stinner in :issue:`37032`.)"
msgstr "（由 Victor Stinner 在 :issue:`37032` 中贡献。）"

#: ../../whatsnew/3.8.rst:481
msgid ""
"For integers, the three-argument form of the :func:`pow` function now "
"permits the exponent to be negative in the case where the base is relatively"
" prime to the modulus. It then computes a modular inverse to the base when "
"the exponent is ``-1``, and a suitable power of that inverse for other "
"negative exponents.  For example, to compute the `modular multiplicative "
"inverse <https://en.wikipedia.org/wiki/Modular_multiplicative_inverse>`_ of "
"38 modulo 137, write::"
msgstr ""
"对于整数，现在 :func:`pow` 函数的三参数形式在底数与模数不可约的情况下允许指数为负值。 随后它会在指数为 ``-1`` "
"时计算底数的模乘逆元，并对其他负指数计算反模的适当幂次。 例如，要计算 38 模 137 的 `模乘逆元 "
"<https://en.wikipedia.org/wiki/Modular_multiplicative_inverse>`_ 则可写为::"

#: ../../whatsnew/3.8.rst:490
msgid ""
">>> pow(38, -1, 137)\n"
"119\n"
">>> 119 * 38 % 137\n"
"1"
msgstr ""
">>> pow(38, -1, 137)\n"
"119\n"
">>> 119 * 38 % 137\n"
"1"

#: ../../whatsnew/3.8.rst:495
msgid ""
"Modular inverses arise in the solution of `linear Diophantine equations "
"<https://en.wikipedia.org/wiki/Diophantine_equation>`_. For example, to find"
" integer solutions for ``4258𝑥 + 147𝑦 = 369``, first rewrite as ``4258𝑥 ≡ "
"369 (mod 147)`` then solve:"
msgstr ""
"模乘逆元在求解 `线性丢番图方程 <https://en.wikipedia.org/wiki/Diophantine_equation>`_ "
"会被用到。 例如，想要求出 ``4258𝑥 + 147𝑦 = 369`` 的整数解，首先应重写为 ``4258𝑥 ≡ 369 (mod 147)`` "
"然后求解："

#: ../../whatsnew/3.8.rst:505
msgid "(Contributed by Mark Dickinson in :issue:`36027`.)"
msgstr "（由 Mark Dickinson 在 :issue:`36027` 中贡献。）"

#: ../../whatsnew/3.8.rst:507
msgid ""
"Dict comprehensions have been synced-up with dict literals so that the key "
"is computed first and the value second::"
msgstr "字典推导式已与字典字面值实现同步，会先计算键再计算值::"

#: ../../whatsnew/3.8.rst:510
msgid ""
">>> # Dict comprehension\n"
">>> cast = {input('role? '): input('actor? ') for i in range(2)}\n"
"role? King Arthur\n"
"actor? Chapman\n"
"role? Black Knight\n"
"actor? Cleese\n"
"\n"
">>> # Dict literal\n"
">>> cast = {input('role? '): input('actor? ')}\n"
"role? Sir Robin\n"
"actor? Eric Idle"
msgstr ""
">>> # 字典推导式\n"
">>> cast = {input('role? '): input('actor? ') for i in range(2)}\n"
"role? King Arthur\n"
"actor? Chapman\n"
"role? Black Knight\n"
"actor? Cleese\n"
"\n"
">>> # 字典字面值\n"
">>> cast = {input('role? '): input('actor? ')}\n"
"role? Sir Robin\n"
"actor? Eric Idle"

#: ../../whatsnew/3.8.rst:522
msgid ""
"The guaranteed execution order is helpful with assignment expressions "
"because variables assigned in the key expression will be available in the "
"value expression::"
msgstr "对执行顺序的保证对赋值表达式来说很有用，因为在键表达式中赋值的变量将可在值表达式中被使用::"

#: ../../whatsnew/3.8.rst:526
msgid ""
">>> names = ['Martin von Löwis', 'Łukasz Langa', 'Walter Dörwald']\n"
">>> {(n := normalize('NFC', name)).casefold() : n for name in names}\n"
"{'martin von löwis': 'Martin von Löwis',\n"
" 'łukasz langa': 'Łukasz Langa',\n"
" 'walter dörwald': 'Walter Dörwald'}"
msgstr ""
">>> names = ['Martin von Löwis', 'Łukasz Langa', 'Walter Dörwald']\n"
">>> {(n := normalize('NFC', name)).casefold() : n for name in names}\n"
"{'martin von löwis': 'Martin von Löwis',\n"
" 'łukasz langa': 'Łukasz Langa',\n"
" 'walter dörwald': 'Walter Dörwald'}"

#: ../../whatsnew/3.8.rst:532
msgid "(Contributed by Jörn Heissler in :issue:`35224`.)"
msgstr "（由 Jörn Heissler 在 :issue:`35224` 中贡献。）"

#: ../../whatsnew/3.8.rst:534
msgid ""
"The :meth:`object.__reduce__` method can now return a tuple from two to six "
"elements long. Formerly, five was the limit.  The new, optional sixth "
"element is a callable with a ``(obj, state)`` signature.  This allows the "
"direct control over the state-updating behavior of a specific object.  If "
"not *None*, this callable will have priority over the object's "
":meth:`~__setstate__` method. (Contributed by Pierre Glaser and Olivier "
"Grisel in :issue:`35900`.)"
msgstr ""
":meth:`object.__reduce__` 方法现在可返回长度为二至六个元素的元组。 之前的上限为五个。 新增的第六个可选元素是签名为 "
"``(obj, state)`` 的可调用对象。 这样就允许直接控制特定对象的状态更新。 如果元素值不为 *None*，该可调用对象将优先于对象的 "
":meth:`~__setstate__` 方法。 （由 Pierre Glaser 和 Olivier Grisel 在 :issue:`35900`"
" 中贡献。）"

#: ../../whatsnew/3.8.rst:543
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.8.rst:545
msgid ""
"The new :mod:`importlib.metadata` module provides (provisional) support for "
"reading metadata from third-party packages.  For example, it can extract an "
"installed package's version number, list of entry points, and more::"
msgstr ""
"新增的 :mod:`importlib.metadata` 模块提供了从第三方包读取元数据的（临时）支持。 "
"例如，它可以提取一个已安装软件包的版本号、入口点列表等等::"

#: ../../whatsnew/3.8.rst:549
msgid ""
">>> # Note following example requires that the popular \"requests\"\n"
">>> # package has been installed.\n"
">>>\n"
">>> from importlib.metadata import version, requires, files\n"
">>> version('requests')\n"
"'2.22.0'\n"
">>> list(requires('requests'))\n"
"['chardet (<3.1.0,>=3.0.2)']\n"
">>> list(files('requests'))[:5]\n"
"[PackagePath('requests-2.22.0.dist-info/INSTALLER'),\n"
" PackagePath('requests-2.22.0.dist-info/LICENSE'),\n"
" PackagePath('requests-2.22.0.dist-info/METADATA'),\n"
" PackagePath('requests-2.22.0.dist-info/RECORD'),\n"
" PackagePath('requests-2.22.0.dist-info/WHEEL')]"
msgstr ""
">>> # 请注意以下示例要求常用的 \"requests\" 包\n"
">>> # 已经被安装\n"
">>>\n"
">>> from importlib.metadata import version, requires, files\n"
">>> version('requests')\n"
"'2.22.0'\n"
">>> list(requires('requests'))\n"
"['chardet (<3.1.0,>=3.0.2)']\n"
">>> list(files('requests'))[:5]\n"
"[PackagePath('requests-2.22.0.dist-info/INSTALLER'),\n"
" PackagePath('requests-2.22.0.dist-info/LICENSE'),\n"
" PackagePath('requests-2.22.0.dist-info/METADATA'),\n"
" PackagePath('requests-2.22.0.dist-info/RECORD'),\n"
" PackagePath('requests-2.22.0.dist-info/WHEEL')]"

#: ../../whatsnew/3.8.rst:564
msgid "(Contributed by Barry Warsaw and Jason R. Coombs in :issue:`34632`.)"
msgstr "（由 Barry Warsaw 和 Jason R. Coombs 在 :issue:`34632` 中贡献）。"

#: ../../whatsnew/3.8.rst:568
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.8.rst:571
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.8.rst:573
msgid ""
"AST nodes now have ``end_lineno`` and ``end_col_offset`` attributes, which "
"give the precise location of the end of the node.  (This only applies to "
"nodes that have ``lineno`` and ``col_offset`` attributes.)"
msgstr ""
"AST 节点现在具有 ``end_lineno`` 和 ``end_col_offset`` 属性，它们给出节点结束的精确位置。 （这只适用于具有 "
"``lineno`` 和 ``col_offset`` 属性的节点。）"

#: ../../whatsnew/3.8.rst:577
msgid ""
"New function :func:`ast.get_source_segment` returns the source code for a "
"specific AST node."
msgstr "新增函数 :func:`ast.get_source_segment` 返回指定 AST 节点的源代码。"

#: ../../whatsnew/3.8.rst:580
msgid "(Contributed by Ivan Levkivskyi in :issue:`33416`.)"
msgstr "（由 Ivan Levkivskyi 在 :issue:`33416` 中贡献。）"

#: ../../whatsnew/3.8.rst:582
msgid "The :func:`ast.parse` function has some new flags:"
msgstr ":func:`ast.parse` 函数具有一些新的旗标："

#: ../../whatsnew/3.8.rst:584
msgid ""
"``type_comments=True`` causes it to return the text of :pep:`484` and "
":pep:`526` type comments associated with certain AST nodes;"
msgstr ""
"``type_comments=True`` 导致其返回与特定 AST 节点相关联的 :pep:`484` 和 :pep:`526` 类型注释文本；"

#: ../../whatsnew/3.8.rst:587
msgid ""
"``mode='func_type'`` can be used to parse :pep:`484` \"signature type "
"comments\" (returned for function definition AST nodes);"
msgstr "``mode='func_type'`` 可被用于解析 :pep:`484` \"签名类型注释\" (为函数定义 AST 节点而返回)；"

#: ../../whatsnew/3.8.rst:590
msgid ""
"``feature_version=(3, N)`` allows specifying an earlier Python 3 version.  "
"For example, ``feature_version=(3, 4)`` will treat :keyword:`async` and "
":keyword:`await` as non-reserved words."
msgstr ""
"``feature_version=(3, N)`` 允许指定一个更早的 Python 3 版本。 例如，``feature_version=(3, "
"4)`` 将把 :keyword:`async` 和 :keyword:`await` 视为非保留字。"

#: ../../whatsnew/3.8.rst:594
msgid "(Contributed by Guido van Rossum in :issue:`35766`.)"
msgstr "（由 Guido van Rossum 在 :issue:`35766` 中贡献。）"

#: ../../whatsnew/3.8.rst:598
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.8.rst:600
msgid ""
":func:`asyncio.run` has graduated from the provisional to stable API. This "
"function can be used to execute a :term:`coroutine` and return the result "
"while automatically managing the event loop. For example::"
msgstr ""
":func:`asyncio.run` 已经从暂定状态晋级为稳定 API。 此函数可被用于执行一个 :term:`coroutine` "
"并返回结果，同时自动管理事件循环。 例如::"

#: ../../whatsnew/3.8.rst:604
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    await asyncio.sleep(0)\n"
"    return 42\n"
"\n"
"asyncio.run(main())"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    await asyncio.sleep(0)\n"
"    return 42\n"
"\n"
"asyncio.run(main())"

#: ../../whatsnew/3.8.rst:612
msgid "This is *roughly* equivalent to::"
msgstr "这 *大致* 等价于::"

#: ../../whatsnew/3.8.rst:614
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    await asyncio.sleep(0)\n"
"    return 42\n"
"\n"
"loop = asyncio.new_event_loop()\n"
"asyncio.set_event_loop(loop)\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    asyncio.set_event_loop(None)\n"
"    loop.close()"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    await asyncio.sleep(0)\n"
"    return 42\n"
"\n"
"loop = asyncio.new_event_loop()\n"
"asyncio.set_event_loop(loop)\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    asyncio.set_event_loop(None)\n"
"    loop.close()"

#: ../../whatsnew/3.8.rst:629
msgid ""
"The actual implementation is significantly more complex. Thus, "
":func:`asyncio.run` should be the preferred way of running asyncio programs."
msgstr "实际的实现要更复杂许多。 因此 :func:`asyncio.run` 应该作为运行 asyncio 程序的首选方式。"

#: ../../whatsnew/3.8.rst:632
msgid "(Contributed by Yury Selivanov in :issue:`32314`.)"
msgstr "（由 Yury Selivanov 在 :issue:`32314` 中贡献。）"

#: ../../whatsnew/3.8.rst:634
msgid ""
"Running ``python -m asyncio`` launches a natively async REPL.  This allows "
"rapid experimentation with code that has a top-level :keyword:`await`.  "
"There is no longer a need to directly call ``asyncio.run()`` which would "
"spawn a new event loop on every invocation:"
msgstr ""
"运行 ``python -m asyncio`` 将启动一个原生异步 REPL。 这允许快速体验具有最高层级 :keyword:`await` 的代码。"
" 这时不再需要直接调用 ``asyncio.run()``，因为此操作会在每次唤起时产生一个新事件循环："

#: ../../whatsnew/3.8.rst:639
msgid ""
"$ python -m asyncio\n"
"asyncio REPL 3.8.0\n"
"Use \"await\" directly instead of \"asyncio.run()\".\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n"
">>> import asyncio\n"
">>> await asyncio.sleep(10, result='hello')\n"
"hello"
msgstr ""
"$ python -m asyncio\n"
"asyncio REPL 3.8.0\n"
"Use \"await\" directly instead of \"asyncio.run()\".\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n"
">>> import asyncio\n"
">>> await asyncio.sleep(10, result='hello')\n"
"hello"

#: ../../whatsnew/3.8.rst:649
msgid "(Contributed by Yury Selivanov in :issue:`37028`.)"
msgstr "（由 Yury Selivanov 在 :issue:`37028` 中贡献。）"

#: ../../whatsnew/3.8.rst:651 ../../whatsnew/3.8.rst:1970
msgid ""
"The exception :class:`asyncio.CancelledError` now inherits from "
":class:`BaseException` rather than :class:`Exception` and no longer inherits"
" from :class:`concurrent.futures.CancelledError`. (Contributed by Yury "
"Selivanov in :issue:`32528`.)"
msgstr ""
"异常 :class:`asyncio.CancelledError` 现在继承自 :class:`BaseException` 而不是 "
":class:`Exception` 并且不再继承自 :class:`concurrent.futures.CancelledError`。 （由 "
"Yury Selivanov 在 :issue:`32528` 中贡献。）"

#: ../../whatsnew/3.8.rst:656
msgid ""
"On Windows, the default event loop is now "
":class:`~asyncio.ProactorEventLoop`. (Contributed by Victor Stinner in "
":issue:`34687`.)"
msgstr ""
"在 Windows 上，现在默认的事件循环为 :class:`~asyncio.ProactorEventLoop`。 （由 Victor "
"Stinner 在 :issue:`34687` 中贡献。）"

#: ../../whatsnew/3.8.rst:659
msgid ""
":class:`~asyncio.ProactorEventLoop` now also supports UDP. (Contributed by "
"Adam Meily and Andrew Svetlov in :issue:`29883`.)"
msgstr ""
":class:`~asyncio.ProactorEventLoop` 现在也支持 UDP。 （由 Adam Meily 和 Andrew "
"Svetlov 在 :issue:`29883` 中贡献。）"

#: ../../whatsnew/3.8.rst:662
msgid ""
":class:`~asyncio.ProactorEventLoop` can now be interrupted by "
":exc:`KeyboardInterrupt` (\"CTRL+C\"). (Contributed by Vladimir Matveev in "
":issue:`23057`.)"
msgstr ""
":class:`~asyncio.ProactorEventLoop` 现在可通过 :exc:`KeyboardInterrupt` "
"(\"CTRL+C\") 来中断。 （由 Vladimir Matveev 在 :issue:`23057` 中贡献。）"

#: ../../whatsnew/3.8.rst:666
msgid ""
"Added :meth:`asyncio.Task.get_coro` for getting the wrapped coroutine within"
" an :class:`asyncio.Task`. (Contributed by Alex Grönholm in :issue:`36999`.)"
msgstr ""
"添加了 :meth:`asyncio.Task.get_coro` 用来获取 :class:`asyncio.Task` 中的已包装协程。 （由 "
"Alex Grönholm 在 :issue:`36999` 中贡献。）"

#: ../../whatsnew/3.8.rst:670
msgid ""
"Asyncio tasks can now be named, either by passing the ``name`` keyword "
"argument to :func:`asyncio.create_task` or the "
":meth:`~asyncio.loop.create_task` event loop method, or by calling the "
":meth:`~asyncio.Task.set_name` method on the task object. The task name is "
"visible in the ``repr()`` output of :class:`asyncio.Task` and can also be "
"retrieved using the :meth:`~asyncio.Task.get_name` method. (Contributed by "
"Alex Grönholm in :issue:`34270`.)"
msgstr ""
"asyncio 任务现在可以被命名，或者是通过将 ``name`` 关键字参数传给 :func:`asyncio.create_task` 或 "
":meth:`~asyncio.loop.create_task` 事件循环方法，或者是通过在任务对象上调用 "
":meth:`~asyncio.Task.set_name` 方法。 任务名称在 :class:`asyncio.Task` 的 ``repr()`` "
"输出中可见，并且还可以使用 :meth:`~asyncio.Task.get_name` 方法来获取。 （由 Alex Grönholm 在 "
":issue:`34270` 中贡献。）"

#: ../../whatsnew/3.8.rst:678
msgid ""
"Added support for `Happy Eyeballs "
"<https://en.wikipedia.org/wiki/Happy_Eyeballs>`_ to "
":func:`asyncio.loop.create_connection`. To specify the behavior, two new "
"parameters have been added: *happy_eyeballs_delay* and *interleave*. The "
"Happy Eyeballs algorithm improves responsiveness in applications that "
"support IPv4 and IPv6 by attempting to simultaneously connect using both. "
"(Contributed by twisteroid ambassador in :issue:`33530`.)"
msgstr ""
"将对 `Happy Eyeballs <https://en.wikipedia.org/wiki/Happy_Eyeballs>`_ 的支持添加到 "
":func:`asyncio.loop.create_connection`。 要指定此行为，已增加了两个新的形参: "
"*happy_eyeballs_delay* 和 *interleave*。 Happy Eyeballs 算法可提升支持 IPv4 和 IPv6 "
"的应用的响应速度，具体做法是尝试同时使用两者进行连接。 （由 twisteroid ambassador 在 :issue:`33530` 中贡献。）"

#: ../../whatsnew/3.8.rst:688
msgid "builtins"
msgstr "builtins"

#: ../../whatsnew/3.8.rst:690
msgid ""
"The :func:`compile` built-in has been improved to accept the "
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` flag. With this new flag passed, "
":func:`compile` will allow top-level ``await``, ``async for`` and ``async "
"with`` constructs that are usually considered invalid syntax. Asynchronous "
"code object marked with the ``CO_COROUTINE`` flag may then be returned. "
"(Contributed by Matthias Bussonnier in :issue:`34616`)"
msgstr ""
"内置的 :func:`compile` 已改进为可接受 ``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` 旗标。 "
"当传入此新旗标时，:func:`compile` 将允许通常被视为无效语法的最高层级 ``await``, ``async for`` 和 "
"``async with`` 构造。 此后将可返回带有 ``CO_COROUTINE`` 旗标的异步代码对象。 （由 Matthias "
"Bussonnier 在 :issue:`34616` 中贡献。）"

#: ../../whatsnew/3.8.rst:699
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.8.rst:701
msgid ""
"The :meth:`~collections.somenamedtuple._asdict` method for "
":func:`collections.namedtuple` now returns a :class:`dict` instead of a "
":class:`collections.OrderedDict`. This works because regular dicts have "
"guaranteed ordering since Python 3.7. If the extra features of "
":class:`OrderedDict` are required, the suggested remediation is to cast the "
"result to the desired type: ``OrderedDict(nt._asdict())``. (Contributed by "
"Raymond Hettinger in :issue:`35864`.)"
msgstr ""
":func:`collections.namedtuple` 的 :meth:`~collections.somenamedtuple._asdict`"
" 方法现在将返回 :class:`dict` 而不是 :class:`collections.OrderedDict`。 此项更改是由于普通字典自 "
"Python 3.7 起已保证具有确定的元素顺序。 如果还需要 :class:`OrderedDict` "
"的额外特性，建议的解决方案是将结果转换为需要的类型: ``OrderedDict(nt._asdict())``。 （由 Raymond "
"Hettinger 在 :issue:`35864` 中贡献。）"

#: ../../whatsnew/3.8.rst:711
msgid "cProfile"
msgstr "cProfile"

#: ../../whatsnew/3.8.rst:713
msgid ""
"The :class:`cProfile.Profile <profile.Profile>` class can now be used as a "
"context manager. Profile a block of code by running::"
msgstr ""
":class:`cProfile.Profile <profile.Profile>` 类现在可被用作上下文管理器。 "
"在运行时对一个代码块实现性能分析::"

#: ../../whatsnew/3.8.rst:716
msgid ""
"import cProfile\n"
"\n"
"with cProfile.Profile() as profiler:\n"
"      # code to be profiled\n"
"      ..."
msgstr ""
"import cProfile\n"
"\n"
"with cProfile.Profile() as profiler:\n"
"      # 要进行性能分析的代码\n"
"      ..."

#: ../../whatsnew/3.8.rst:722
msgid "(Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr "（由 Scott Sanderson 在 :issue:`29235` 中贡献。）"

#: ../../whatsnew/3.8.rst:726
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.8.rst:728
msgid ""
"The :class:`csv.DictReader` now returns instances of :class:`dict` instead "
"of a :class:`collections.OrderedDict`.  The tool is now faster and uses less"
" memory while still preserving the field order. (Contributed by Michael "
"Selik in :issue:`34003`.)"
msgstr ""
":class:`csv.DictReader` 现在将返回 :class:`dict` 而不是 "
":class:`collections.OrderedDict`。 此工具现在会更快速且消耗更少内存同时仍然保留字段顺序。 （由 Michael "
"Selik 在 :issue:`34003` 中贡献。）"

#: ../../whatsnew/3.8.rst:735
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.8.rst:737
msgid ""
"Added a new variable holding structured version information for the "
"underlying ncurses library: :data:`~curses.ncurses_version`. (Contributed by"
" Serhiy Storchaka in :issue:`31680`.)"
msgstr ""
"添加了一个新变量用于保存下层 ncurses 库的结构版信息: :data:`~curses.ncurses_version`。 （由 Serhiy "
"Storchaka 在 :issue:`31680` 中贡献。）"

#: ../../whatsnew/3.8.rst:743
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.8.rst:745
msgid ""
"On Windows, :class:`~ctypes.CDLL` and subclasses now accept a *winmode* "
"parameter to specify flags for the underlying ``LoadLibraryEx`` call. The "
"default flags are set to only load DLL dependencies from trusted locations, "
"including the path where the DLL is stored (if a full or partial path is "
"used to load the initial DLL) and paths added by "
":func:`~os.add_dll_directory`. (Contributed by Steve Dower in "
":issue:`36085`.)"
msgstr ""
"在 Windows 上，:class:`~ctypes.CDLL` 及其子类现在接受 *winmode* 形参来指定用于底层 "
"``LoadLibraryEx`` 调用的旗标。 默认旗标被设为仅加载来自可信任位置的 DLL 依赖项，包括 DLL 的存放路径（如果加载初始 DLL "
"时使用了完整或部分路径）以及通过 :func:`~os.add_dll_directory` 添加的路径。 （由 Steve Dower 在 "
":issue:`36085` 中贡献。）"

#: ../../whatsnew/3.8.rst:754
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.8.rst:756
msgid ""
"Added new alternate constructors :meth:`datetime.date.fromisocalendar` and "
":meth:`datetime.datetime.fromisocalendar`, which construct "
":class:`~datetime.date` and :class:`~datetime.datetime` objects respectively"
" from ISO year, week number, and weekday; these are the inverse of each "
"class's ``isocalendar`` method. (Contributed by Paul Ganssle in "
":issue:`36004`.)"
msgstr ""
"添加了新的替代构造器 :meth:`datetime.date.fromisocalendar` 和 "
":meth:`datetime.datetime.fromisocalendar`，它们分别基于 ISO 年份、周序号和周内日序号来构造 "
":class:`~datetime.date` 和 :class:`~datetime.datetime` 对象；这两者分别是其所对应类中 "
"``isocalendar`` 方法的逆操作。 （由 Paul Ganssle 在 :issue:`36004` 中贡献。）"

#: ../../whatsnew/3.8.rst:764
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.8.rst:766
msgid ""
":func:`functools.lru_cache` can now be used as a straight decorator rather "
"than as a function returning a decorator.  So both of these are now "
"supported::"
msgstr ":func:`functools.lru_cache` 现在可直接作为装饰器而不是作为返回装饰器的函数。 因此这两种写法现在都被支持::"

#: ../../whatsnew/3.8.rst:769
msgid ""
"@lru_cache\n"
"def f(x):\n"
"    ...\n"
"\n"
"@lru_cache(maxsize=256)\n"
"def f(x):\n"
"    ..."
msgstr ""
"@lru_cache\n"
"def f(x):\n"
"    ...\n"
"\n"
"@lru_cache(maxsize=256)\n"
"def f(x):\n"
"    ..."

#: ../../whatsnew/3.8.rst:777
msgid "(Contributed by Raymond Hettinger in :issue:`36772`.)"
msgstr "（由 Raymond Hettinger 在 :issue:`36772` 中贡献。）"

#: ../../whatsnew/3.8.rst:779
msgid ""
"Added a new :func:`functools.cached_property` decorator, for computed "
"properties cached for the life of the instance. ::"
msgstr "添加了新的 :func:`functools.cached_property` 装饰器，用于在实例生命周期内缓存的已计算特征属性。 ::"

#: ../../whatsnew/3.8.rst:782
msgid ""
"import functools\n"
"import statistics\n"
"\n"
"class Dataset:\n"
"   def __init__(self, sequence_of_numbers):\n"
"      self.data = sequence_of_numbers\n"
"\n"
"   @functools.cached_property\n"
"   def variance(self):\n"
"      return statistics.variance(self.data)"
msgstr ""
"import functools\n"
"import statistics\n"
"\n"
"class Dataset:\n"
"   def __init__(self, sequence_of_numbers):\n"
"      self.data = sequence_of_numbers\n"
"\n"
"   @functools.cached_property\n"
"   def variance(self):\n"
"      return statistics.variance(self.data)"

#: ../../whatsnew/3.8.rst:793
msgid "(Contributed by Carl Meyer in :issue:`21145`)"
msgstr "（由 Carl Meyer 在 :issue:`21145` 中贡献）"

#: ../../whatsnew/3.8.rst:796
msgid ""
"Added a new :func:`functools.singledispatchmethod` decorator that converts "
"methods into :term:`generic functions <generic function>` using "
":term:`single dispatch`::"
msgstr ""
"添加了新的 :func:`functools.singledispatchmethod` 装饰器可使用 :term:`single dispatch` "
"将方法转换为 :term:`泛型函数 <generic function>`::"

#: ../../whatsnew/3.8.rst:800
msgid ""
"from functools import singledispatchmethod\n"
"from contextlib import suppress\n"
"\n"
"class TaskManager:\n"
"\n"
"    def __init__(self, tasks):\n"
"        self.tasks = list(tasks)\n"
"\n"
"    @singledispatchmethod\n"
"    def discard(self, value):\n"
"        with suppress(ValueError):\n"
"            self.tasks.remove(value)\n"
"\n"
"    @discard.register(list)\n"
"    def _(self, tasks):\n"
"        targets = set(tasks)\n"
"        self.tasks = [x for x in self.tasks if x not in targets]"
msgstr ""
"from functools import singledispatchmethod\n"
"from contextlib import suppress\n"
"\n"
"class TaskManager:\n"
"\n"
"    def __init__(self, tasks):\n"
"        self.tasks = list(tasks)\n"
"\n"
"    @singledispatchmethod\n"
"    def discard(self, value):\n"
"        with suppress(ValueError):\n"
"            self.tasks.remove(value)\n"
"\n"
"    @discard.register(list)\n"
"    def _(self, tasks):\n"
"        targets = set(tasks)\n"
"        self.tasks = [x for x in self.tasks if x not in targets]"

#: ../../whatsnew/3.8.rst:818
msgid "(Contributed by Ethan Smith in :issue:`32380`)"
msgstr "（由 Ethan Smith 在 :issue:`32380` 中贡献）"

#: ../../whatsnew/3.8.rst:821
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.8.rst:823
msgid ""
":func:`~gc.get_objects` can now receive an optional *generation* parameter "
"indicating a generation to get objects from. (Contributed by Pablo Galindo "
"in :issue:`36016`.)"
msgstr ""
":func:`~gc.get_objects` 现在能接受一个可选的 *generation* 形参来指定一个用于获取对象的生成器。 （由 Pablo "
"Galindo 在 :issue:`36016` 中贡献。）"

#: ../../whatsnew/3.8.rst:829
msgid "gettext"
msgstr "gettext"

#: ../../whatsnew/3.8.rst:831
msgid ""
"Added :func:`~gettext.pgettext` and its variants. (Contributed by Franz "
"Glasner, Éric Araujo, and Cheryl Sabella in :issue:`2504`.)"
msgstr ""
"添加了 :func:`~gettext.pgettext` 及其变化形式。 （由 Franz Glasner, Éric Araujo 和 Cheryl"
" Sabella 在 :issue:`2504` 中贡献。）"

#: ../../whatsnew/3.8.rst:836
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.8.rst:838
msgid ""
"Added the *mtime* parameter to :func:`gzip.compress` for reproducible "
"output. (Contributed by Guo Ci Teo in :issue:`34898`.)"
msgstr ""
"添加 *mtime* 形参到 :func:`gzip.compress` 用于可重现的输出。 （由 Guo Ci Teo 在 "
":issue:`34898` 中贡献。）"

#: ../../whatsnew/3.8.rst:841
msgid ""
"A :exc:`~gzip.BadGzipFile` exception is now raised instead of :exc:`OSError`"
" for certain types of invalid or corrupt gzip files. (Contributed by Filip "
"Gruszczyński, Michele Orrù, and Zackery Spytz in :issue:`6584`.)"
msgstr ""
"对于特定类型的无效或已损坏 gzip 文件现在将引发 :exc:`~gzip.BadGzipFile` 而不是 :exc:`OSError`。 （由 "
"Filip Gruszczyński, Michele Orrù 和 Zackery Spytz 在 :issue:`6584` 中贡献。）"

#: ../../whatsnew/3.8.rst:848
msgid "IDLE and idlelib"
msgstr "IDLE 与 idlelib"

#: ../../whatsnew/3.8.rst:850
msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can be "
"changed in the PyShell section of the General page of the Settings dialog.  "
"Fewer, but possibly extra long, lines can be squeezed by right clicking on "
"the output.  Squeezed output can be expanded in place by double-clicking the"
" button or into the clipboard or a separate window by right-clicking the "
"button.  (Contributed by Tal Einat in :issue:`1529353`.)"
msgstr ""
"超过 N 行（默认值为 50）的输出将被折叠为一个按钮。 N 可以在 Settings 对话框的 General 页的 PyShell 部分中进行修改。"
" 数量较少但是超长的行可以通过在输出上右击来折叠。 被折叠的输出可通过双击按钮来展开，或是通过右击按钮来放入剪贴板或是单独的窗口。 （由 Tal "
"Einat 在 :issue:`1529353` 中贡献。）"

#: ../../whatsnew/3.8.rst:857
msgid ""
"Add \"Run Customized\" to the Run menu to run a module with customized "
"settings. Any command line arguments entered are added to sys.argv. They "
"also re-appear in the box for the next customized run.  One can also "
"suppress the normal Shell main module restart.  (Contributed by Cheryl "
"Sabella, Terry Jan Reedy, and others in :issue:`5680` and :issue:`37627`.)"
msgstr ""
"在 Run 菜单中增加了 \"Run Customized\" 以使用自定义设置来运行模块。 输入的任何命令行参数都会被加入 sys.argv。 "
"它们在下次自定义运行时会再次显示在窗体中。 用户也可以禁用通常的 Shell 主模块重启。 （由 Cheryl Sabella, Terry Jan "
"Reedy 等人在 :issue:`5680` 和 :issue:`37627` 中贡献。）"

#: ../../whatsnew/3.8.rst:863
msgid ""
"Added optional line numbers for IDLE editor windows. Windows open without "
"line numbers unless set otherwise in the General tab of the configuration "
"dialog.  Line numbers for an existing window are shown and hidden in the "
"Options menu. (Contributed by Tal Einat and Saimadhav Heblikar in "
":issue:`17535`.)"
msgstr ""
"在 IDLE 编辑器窗口中增加了可选的行号。 窗口打开时默认不显示行号，除非在配置对话框的 General 选项卡中特别设置。 已打开窗口中的行号可以在"
" Options 菜单中显示和隐藏。 （由 Tal Einat 和 Saimadhav Heblikar 在 :issue:`17535` 中贡献。）"

#: ../../whatsnew/3.8.rst:869
msgid ""
"OS native encoding is now used for converting between Python strings and Tcl"
" objects. This allows IDLE to work with emoji and other non-BMP characters. "
"These characters can be displayed or copied and pasted to or from the "
"clipboard.  Converting strings from Tcl to Python and back now never fails. "
"(Many people worked on this for eight years but the problem was finally "
"solved by Serhiy Storchaka in :issue:`13153`.)"
msgstr ""
"现在会使用 OS 本机编码格式在 Python 字符串和 Tcl 对象间进行转换。 这允许在 IDLE 中处理 emoji 和其他非 BMP 字符。 "
"这些字符将可被显示或是从剪贴板复制和粘贴。 字符串从 Tcl 到 Python 的来回转换现在不会再发生失败。 "
"（过去八年有许多人都为此付出过努力，问题最终由 Serhiy Storchaka 在 :issue:`13153` 中解决。）"

#: ../../whatsnew/3.8.rst:876
msgid "New in 3.8.1:"
msgstr "在 3.8.1 中新增:"

#: ../../whatsnew/3.8.rst:878
msgid ""
"Add option to toggle cursor blink off.  (Contributed by Zackery Spytz in "
":issue:`4603`.)"
msgstr "添加切换光标闪烁停止的选项。 （由 Zackery Spytz 在 :issue:`4603` 中贡献。）"

#: ../../whatsnew/3.8.rst:881
msgid ""
"Escape key now closes IDLE completion windows.  (Contributed by Johnny "
"Najera in :issue:`38944`.)"
msgstr "Esc 键现在会关闭 IDLE 补全提示窗口。 （由 Johnny Najera 在 :issue:`38944` 中贡献。）"

#: ../../whatsnew/3.8.rst:884
msgid "The changes above have been backported to 3.7 maintenance releases."
msgstr "上述修改已被反向移植到 3.7 维护发行版中。"

#: ../../whatsnew/3.8.rst:886
msgid ""
"Add keywords to module name completion list.  (Contributed by Terry J. Reedy"
" in :issue:`37765`.)"
msgstr "添加关键字到模块名称补全列表。 （由 Terry J. Reedy 在 :issue:`37765` 中贡献。）"

#: ../../whatsnew/3.8.rst:890
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.8.rst:892
msgid ""
"The :func:`inspect.getdoc` function can now find docstrings for "
"``__slots__`` if that attribute is a :class:`dict` where the values are "
"docstrings. This provides documentation options similar to what we already "
"have for :func:`property`, :func:`classmethod`, and :func:`staticmethod`::"
msgstr ""
":func:`inspect.getdoc` 函数现在可以找到 ``__slots__`` 的文档字符串，如果该属性是一个元素值为文档字符串的 "
":class:`dict` 的话。 这提供了类似于目前已有的 :func:`property`, :func:`classmethod` 和 "
":func:`staticmethod` 等函数的文档选项::"

#: ../../whatsnew/3.8.rst:897
msgid ""
"class AudioClip:\n"
"    __slots__ = {'bit_rate': 'expressed in kilohertz to one decimal place',\n"
"                 'duration': 'in seconds, rounded up to an integer'}\n"
"    def __init__(self, bit_rate, duration):\n"
"        self.bit_rate = round(bit_rate / 1000.0, 1)\n"
"        self.duration = ceil(duration)"
msgstr ""
"class AudioClip:\n"
"    __slots__ = {'bit_rate': 'expressed in kilohertz to one decimal place',\n"
"                 'duration': 'in seconds, rounded up to an integer'}\n"
"    def __init__(self, bit_rate, duration):\n"
"        self.bit_rate = round(bit_rate / 1000.0, 1)\n"
"        self.duration = ceil(duration)"

#: ../../whatsnew/3.8.rst:904
msgid "(Contributed by Raymond Hettinger in :issue:`36326`.)"
msgstr "（由 Raymond Hettinger 在 :issue:`36326` 中贡献。）"

#: ../../whatsnew/3.8.rst:908
msgid "io"
msgstr "io"

#: ../../whatsnew/3.8.rst:910
msgid ""
"In development mode (:option:`-X` ``env``) and in :ref:`debug build <debug-"
"build>`, the :class:`io.IOBase` finalizer now logs the exception if the "
"``close()`` method fails. The exception is ignored silently by default in "
"release build. (Contributed by Victor Stinner in :issue:`18748`.)"
msgstr ""
"在开发模式 (:option:`-X` ``env``) 和 :ref:`调试编译版 <debug-build>` "
"中，:class:`io.IOBase` 终结器现在会在 ``close()`` 方法失败时将异常写入日志。 发生的异常在发布编译版中会被静默地忽略。 "
"（由 Victor Stinner 在 :issue:`18748` 中贡献。）"

#: ../../whatsnew/3.8.rst:917
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.8.rst:919
msgid ""
"The :func:`itertools.accumulate` function added an option *initial* keyword "
"argument to specify an initial value::"
msgstr ":func:`itertools.accumulate` 函数增加了可选的 *initial* 关键字参数用来指定一个初始值::"

#: ../../whatsnew/3.8.rst:922
msgid ""
">>> from itertools import accumulate\n"
">>> list(accumulate([10, 5, 30, 15], initial=1000))\n"
"[1000, 1010, 1015, 1045, 1060]"
msgstr ""
">>> from itertools import accumulate\n"
">>> list(accumulate([10, 5, 30, 15], initial=1000))\n"
"[1000, 1010, 1015, 1045, 1060]"

#: ../../whatsnew/3.8.rst:926
msgid "(Contributed by Lisa Roach in :issue:`34659`.)"
msgstr "（由 Lisa Roach 在 :issue:`34659` 中贡献。）"

#: ../../whatsnew/3.8.rst:930
msgid "json.tool"
msgstr "json.tool"

#: ../../whatsnew/3.8.rst:932
msgid ""
"Add option ``--json-lines`` to parse every input line as a separate JSON "
"object. (Contributed by Weipeng Hong in :issue:`31553`.)"
msgstr ""
"添加选项 ``--json-lines`` 用于将每个输入行解析为单独的 JSON 对象。 （由 Weipeng Hong 在 "
":issue:`31553` 中贡献。）"

#: ../../whatsnew/3.8.rst:937
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.8.rst:939
msgid ""
"Added a *force* keyword argument to :func:`logging.basicConfig`. When set to"
" true, any existing handlers attached to the root logger are removed and "
"closed before carrying out the configuration specified by the other "
"arguments."
msgstr ""
"为 :func:`logging.basicConfig` 添加了 *force* 关键字参数。 "
"当设为真值时，关联到根日志记录器的任何现有处理器都将在执行由其他参数所指定的配置之前被移除并关闭。"

#: ../../whatsnew/3.8.rst:944
msgid ""
"This solves a long-standing problem.  Once a logger or *basicConfig()* had "
"been called, subsequent calls to *basicConfig()* were silently ignored. This"
" made it difficult to update, experiment with, or teach the various logging "
"configuration options using the interactive prompt or a Jupyter notebook."
msgstr ""
"这解决了一个长期存在的问题。 当一个日志处理器或 *basicConfig()* 被调用时，对 *basicConfig()* "
"的后续调用会被静默地忽略。 这导致使用交互提示符或 Jupyter 笔记本更新、试验或讲解各种日志配置选项变得相当困难。"

#: ../../whatsnew/3.8.rst:950
msgid ""
"(Suggested by Raymond Hettinger, implemented by Donghee Na, and reviewed by "
"Vinay Sajip in :issue:`33897`.)"
msgstr ""
"（由 Raymond Hettinger 提议，由 Donghee Na 实现，并由 Vinay Sajip 审核后在 :issue:`33897` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:955
msgid "math"
msgstr "math"

#: ../../whatsnew/3.8.rst:957
msgid ""
"Added new function :func:`math.dist` for computing Euclidean distance "
"between two points.  (Contributed by Raymond Hettinger in :issue:`33089`.)"
msgstr ""
"添加了新的函数 :func:`math.dist` 用于计算两点之间的欧几里得距离。 （由 Raymond Hettinger 在 "
":issue:`33089` 中贡献。）"

#: ../../whatsnew/3.8.rst:960
msgid ""
"Expanded the :func:`math.hypot` function to handle multiple dimensions. "
"Formerly, it only supported the 2-D case. (Contributed by Raymond Hettinger "
"in :issue:`33089`.)"
msgstr ""
"扩展了 :func:`math.hypot` 函数以便处理更多的维度。 之前它仅支持 2-D 的情况。 （由 Raymond Hettinger 在 "
":issue:`33089` 中贡献。）"

#: ../../whatsnew/3.8.rst:964
msgid ""
"Added new function, :func:`math.prod`, as analogous function to :func:`sum` "
"that returns the product of a 'start' value (default: 1) times an iterable "
"of numbers::"
msgstr ""
"添加了新的函数 :func:`math.prod` 作为的 :func:`sum` 同类，该函数返回 'start' 值 (默认值: 1) "
"乘以一个数字可迭代对象的积::"

#: ../../whatsnew/3.8.rst:968
msgid ""
">>> prior = 0.8\n"
">>> likelihoods = [0.625, 0.84, 0.30]\n"
">>> math.prod(likelihoods, start=prior)\n"
"0.126"
msgstr ""
">>> prior = 0.8\n"
">>> likelihoods = [0.625, 0.84, 0.30]\n"
">>> math.prod(likelihoods, start=prior)\n"
"0.126"

#: ../../whatsnew/3.8.rst:973
msgid "(Contributed by Pablo Galindo in :issue:`35606`.)"
msgstr "（由 Pablo Galindo 在 :issue:`35606` 中贡献。）"

#: ../../whatsnew/3.8.rst:975
msgid ""
"Added two new combinatoric functions :func:`math.perm` and "
":func:`math.comb`::"
msgstr "添加了两个新的组合函数 :func:`math.perm` 和 :func:`math.comb`::"

#: ../../whatsnew/3.8.rst:977
msgid ""
">>> math.perm(10, 3)    # Permutations of 10 things taken 3 at a time\n"
"720\n"
">>> math.comb(10, 3)    # Combinations of 10 things taken 3 at a time\n"
"120"
msgstr ""
">>> math.perm(10, 3)    # 10 项每次取 3 项的排列\n"
"720\n"
">>> math.comb(10, 3)    # 10 项每次取 3 项的组合\n"
"120"

#: ../../whatsnew/3.8.rst:982
msgid ""
"(Contributed by Yash Aggarwal, Keller Fuchs, Serhiy Storchaka, and Raymond "
"Hettinger in :issue:`37128`, :issue:`37178`, and :issue:`35431`.)"
msgstr ""
"（由 Yash Aggarwal, Keller Fuchs, Serhiy Storchaka 和 Raymond Hettinger 在 "
":issue:`37128`, :issue:`37178` 和 :issue:`35431` 中贡献。）"

#: ../../whatsnew/3.8.rst:985
msgid ""
"Added a new function :func:`math.isqrt` for computing accurate integer "
"square roots without conversion to floating point.  The new function "
"supports arbitrarily large integers.  It is faster than ``floor(sqrt(n))`` "
"but slower than :func:`math.sqrt`::"
msgstr ""
"添加了一个新函数 :func:`math.isqrt` 用于计算精确整数平方根而无需转换为浮点数。 该新函数支持任意大整数。 它的执行速度比 "
"``floor(sqrt(n))`` 快但是比 :func:`math.sqrt` 慢::"

#: ../../whatsnew/3.8.rst:990
msgid ""
">>> r = 650320427\n"
">>> s = r ** 2\n"
">>> isqrt(s - 1)         # correct\n"
"650320426\n"
">>> floor(sqrt(s - 1))   # incorrect\n"
"650320427"
msgstr ""
">>> r = 650320427\n"
">>> s = r ** 2\n"
">>> isqrt(s - 1)         # 正确\n"
"650320426\n"
">>> floor(sqrt(s - 1))   # 不正确\n"
"650320427"

#: ../../whatsnew/3.8.rst:997
msgid "(Contributed by Mark Dickinson in :issue:`36887`.)"
msgstr "（由 Mark Dickinson 在 :issue:`36887` 中贡献。）"

#: ../../whatsnew/3.8.rst:999
msgid ""
"The function :func:`math.factorial` no longer accepts arguments that are not"
" int-like. (Contributed by Pablo Galindo in :issue:`33083`.)"
msgstr ""
"函数 :func:`math.factorial` 不再接受非整数类参数。 （由 Pablo Galindo 在 :issue:`33083` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1004
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.8.rst:1006
msgid ""
"The :class:`mmap.mmap` class now has an :meth:`~mmap.mmap.madvise` method to"
" access the ``madvise()`` system call. (Contributed by Zackery Spytz in "
":issue:`32941`.)"
msgstr ""
":class:`mmap.mmap` 类现在具有一个 :meth:`~mmap.mmap.madvise` 方法用于访问 ``madvise()`` "
"系统调用。 （由 Zackery Spytz 在 :issue:`32941` 中贡献。）"

#: ../../whatsnew/3.8.rst:1012
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.8.rst:1014
msgid ""
"Added new :mod:`multiprocessing.shared_memory` module. (Contributed by Davin"
" Potts in :issue:`35813`.)"
msgstr ""
"添加了新的 :mod:`multiprocessing.shared_memory` 模块。 （由 Davin Potts 在 "
":issue:`35813` 中贡献。）"

#: ../../whatsnew/3.8.rst:1017
msgid ""
"On macOS, the *spawn* start method is now used by default. (Contributed by "
"Victor Stinner in :issue:`33725`.)"
msgstr ""
"在macOS上，现在默认使用的启动方式是*spawn*启动方式。\n"
"（由 Victor Stinner 在 :issue:`33725` 中贡献。）"

#: ../../whatsnew/3.8.rst:1022
msgid "os"
msgstr "os"

#: ../../whatsnew/3.8.rst:1024
msgid ""
"Added new function :func:`~os.add_dll_directory` on Windows for providing "
"additional search paths for native dependencies when importing extension "
"modules or loading DLLs using :mod:`ctypes`. (Contributed by Steve Dower in "
":issue:`36085`.)"
msgstr ""
"在 Windows 上添加了新函数 :func:`~os.add_dll_directory` 用于在导入扩展模块或使用 :mod:`ctypes` "
"加载 DLL 时为本机依赖提供额外搜索路径 。 （由 Steve Dower 在 :issue:`36085` 中贡献。）"

#: ../../whatsnew/3.8.rst:1029
msgid ""
"A new :func:`os.memfd_create` function was added to wrap the "
"``memfd_create()`` syscall. (Contributed by Zackery Spytz and Christian "
"Heimes in :issue:`26836`.)"
msgstr ""
"添加了新的 :func:`os.memfd_create` 函数用于包装 ``memfd_create()`` 系统调用。 （由 Zackery "
"Spytz 和 Christian Heimes 在 :issue:`26836` 中贡献。）"

#: ../../whatsnew/3.8.rst:1033
msgid ""
"On Windows, much of the manual logic for handling reparse points (including "
"symlinks and directory junctions) has been delegated to the operating "
"system. Specifically, :func:`os.stat` will now traverse anything supported "
"by the operating system, while :func:`os.lstat` will only open reparse "
"points that identify as \"name surrogates\" while others are opened as for "
":func:`os.stat`. In all cases, :attr:`stat_result.st_mode` will only have "
"``S_IFLNK`` set for symbolic links and not other kinds of reparse points. To"
" identify other kinds of reparse point, check the new "
":attr:`stat_result.st_reparse_tag` attribute."
msgstr ""
"在 Windows 上，大部分用于处理重解析点,（包括符号链接和目录连接）的手动逻辑已被委托给操作系统。 特别地，:func:`os.stat` "
"现在将会遍历操作系统所支持的任何内容，而 :func:`os.lstat` 将只打开被标识为“名称代理”的重解析点，而其要由 "
":func:`os.stat` 打开其他的重解析点。 在所有情况下，:attr:`stat_result.st_mode` "
"将只为符号链接而非其他种类的重解析点设置 ``S_IFLNK``。 要标识其他种类的重解析点，请检查新的 "
":attr:`stat_result.st_reparse_tag` 属性。"

#: ../../whatsnew/3.8.rst:1042
msgid ""
"On Windows, :func:`os.readlink` is now able to read directory junctions. "
"Note that :func:`~os.path.islink` will return ``False`` for directory "
"junctions, and so code that checks ``islink`` first will continue to treat "
"junctions as directories, while code that handles errors from "
":func:`os.readlink` may now treat junctions as links."
msgstr ""
"在 Windows 上，:func:`os.readlink` 现在能够读取目录连接。 请注意 :func:`~os.path.islink` "
"会对目录连接返回 ``False``，因此首先检查 ``islink`` 的代码将连续把连接视为目录，而会处理 :func:`os.readlink` "
"所引发错误的代码现在会把连接视为链接。"

#: ../../whatsnew/3.8.rst:1048 ../../whatsnew/3.8.rst:1073
msgid "(Contributed by Steve Dower in :issue:`37834`.)"
msgstr "（由 Steve Dower 在 :issue:`37834` 中贡献。）"

#: ../../whatsnew/3.8.rst:1052
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.8.rst:1054
msgid ""
":mod:`os.path` functions that return a boolean result like "
":func:`~os.path.exists`, :func:`~os.path.lexists`, :func:`~os.path.isdir`, "
":func:`~os.path.isfile`, :func:`~os.path.islink`, and "
":func:`~os.path.ismount` now return ``False`` instead of raising "
":exc:`ValueError` or its subclasses :exc:`UnicodeEncodeError` and "
":exc:`UnicodeDecodeError` for paths that contain characters or bytes "
"unrepresentable at the OS level. (Contributed by Serhiy Storchaka in "
":issue:`33721`.)"
msgstr ""
"返回布尔值结果的 :mod:`os.path` 函数例如 :func:`~os.path.exists`, "
":func:`~os.path.lexists`, :func:`~os.path.isdir`, :func:`~os.path.isfile`, "
":func:`~os.path.islink`, 以及 :func:`~os.path.ismount` 现在对于包含在 OS "
"层级无法表示的字符或字节的路径将会返回 ``False`` 而不是引发 :exc:`ValueError` 或其子类 "
":exc:`UnicodeEncodeError` 和 :exc:`UnicodeDecodeError`。 （由 Serhiy Storchaka 在"
" :issue:`33721` 中贡献。）"

#: ../../whatsnew/3.8.rst:1062 ../../whatsnew/3.8.rst:1965
msgid ""
":func:`~os.path.expanduser` on Windows now prefers the :envvar:`USERPROFILE`"
" environment variable and does not use :envvar:`HOME`, which is not normally"
" set for regular user accounts. (Contributed by Anthony Sottile in "
":issue:`36264`.)"
msgstr ""
":func:`~os.path.expanduser` 在 Windows 上现在改用 :envvar:`USERPROFILE` 环境变量而不再使用 "
":envvar:`HOME`，后者通常不会为一般用户账户设置。 （由 Anthony Sottile 在 :issue:`36264` 中贡献。）"

#: ../../whatsnew/3.8.rst:1067
msgid ""
":func:`~os.path.isdir` on Windows no longer returns ``True`` for a link to a"
" non-existent directory."
msgstr ":func:`~os.path.isdir` 在 Windows 上将不再为不存在的目录的链接返回 ``True``。"

#: ../../whatsnew/3.8.rst:1070
msgid ""
":func:`~os.path.realpath` on Windows now resolves reparse points, including "
"symlinks and directory junctions."
msgstr ":func:`~os.path.realpath` 在 Windows 上现在会识别重解析点，包括符号链接和目录连接。"

#: ../../whatsnew/3.8.rst:1077
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.8.rst:1079
msgid ""
":mod:`pathlib.Path` methods that return a boolean result like "
":meth:`~pathlib.Path.exists`, :meth:`~pathlib.Path.is_dir`, "
":meth:`~pathlib.Path.is_file`, :meth:`~pathlib.Path.is_mount`, "
":meth:`~pathlib.Path.is_symlink`, :meth:`~pathlib.Path.is_block_device`, "
":meth:`~pathlib.Path.is_char_device`, :meth:`~pathlib.Path.is_fifo`, "
":meth:`~pathlib.Path.is_socket` now return ``False`` instead of raising "
":exc:`ValueError` or its subclass :exc:`UnicodeEncodeError` for paths that "
"contain characters unrepresentable at the OS level. (Contributed by Serhiy "
"Storchaka in :issue:`33721`.)"
msgstr ""
"返回布尔值结果的 :mod:`pathlib.Path` 方法例如 :meth:`~pathlib.Path.exists`, "
":meth:`~pathlib.Path.is_dir`, :meth:`~pathlib.Path.is_file`, "
":meth:`~pathlib.Path.is_mount`, :meth:`~pathlib.Path.is_symlink`, "
":meth:`~pathlib.Path.is_block_device`, :meth:`~pathlib.Path.is_char_device`,"
" :meth:`~pathlib.Path.is_fifo`, :meth:`~pathlib.Path.is_socket` 现在对于包含在 OS "
"层级上无法表示的字符的路径将返回 ``False`` 而不是引发 :exc:`ValueError` 或其子类 "
":exc:`UnicodeEncodeError`。 （由 Serhiy Storchaka 在 :issue:`33721` 中贡献。）.)"

#: ../../whatsnew/3.8.rst:1089
msgid ""
"Added :meth:`!pathlib.Path.link_to` which creates a hard link pointing to a "
"path. (Contributed by Joannah Nanjekye in :issue:`26978`) Note that "
"``link_to`` was deprecated in 3.10 and removed in 3.12 in favor of a "
"``hardlink_to`` method added in 3.10 which matches the semantics of the "
"existing ``symlink_to`` method."
msgstr ""
"增加了 :meth:`!pathlib.Path.link_to`，它可以创建指向一个路径的硬链接。 （由 Joannah Nanjekye 在 "
":issue:`26978` 中贡献） 请注意 ``link_to`` 在 3.10 中被弃用并在 3.12 中被移除并改用在 3.10 中添加的 "
"``hardlink_to`` 方法，它与现有 ``symlink_to`` 方法的语义相匹配。"

#: ../../whatsnew/3.8.rst:1098
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.8.rst:1100
msgid ""
":mod:`pickle` extensions subclassing the C-optimized "
":class:`~pickle.Pickler` can now override the pickling logic of functions "
"and classes by defining the special :meth:`~pickle.Pickler.reducer_override`"
" method. (Contributed by Pierre Glaser and Olivier Grisel in "
":issue:`35900`.)"
msgstr ""
":mod:`pickle` 扩展子类化针对 C 优化的 :class:`~pickle.Pickler` 现在可通过定义特殊的 "
":meth:`~pickle.Pickler.reducer_override` 方法来重载函数和类的封存逻辑。 （由 Pierre Glaser 和 "
"Olivier Grisel 在 :issue:`35900` 中贡献。）"

#: ../../whatsnew/3.8.rst:1107
msgid "plistlib"
msgstr "plistlib"

#: ../../whatsnew/3.8.rst:1109
msgid ""
"Added new :class:`plistlib.UID` and enabled support for reading and writing "
"NSKeyedArchiver-encoded binary plists. (Contributed by Jon Janzen in "
":issue:`26707`.)"
msgstr ""
"添加了新的 :class:`plistlib.UID` 并启动了对读取和写入经过 NSKeyedArchiver 编码的二进制 plists 的支持。 "
"（由 Jon Janzen 在 :issue:`26707` 中贡献。）"

#: ../../whatsnew/3.8.rst:1115
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.8.rst:1117
msgid ""
"The :mod:`pprint` module added a *sort_dicts* parameter to several "
"functions. By default, those functions continue to sort dictionaries before "
"rendering or printing.  However, if *sort_dicts* is set to false, the "
"dictionaries retain the order that keys were inserted.  This can be useful "
"for comparison to JSON inputs during debugging."
msgstr ""
":mod:`pprint` 模块为一些函数添加了 *sort_dicts* 形参。 默认情况下，这些函数会继续在渲染或打印之前对字典进行排序。 "
"但是，如果 *sort_dicts* 设为假值，则字典将保持键插入时的顺序。 这在调试期间与 JSON 输入进行比较时会很有用。"

#: ../../whatsnew/3.8.rst:1123
msgid ""
"In addition, there is a convenience new function, :func:`pprint.pp` that is "
"like :func:`pprint.pprint` but with *sort_dicts* defaulting to ``False``::"
msgstr ""
"除此之外，还增加了一个方便的新函数 :func:`pprint.pp`，它类似于 :func:`pprint.pprint` 但它的 "
"*sort_dicts* 默认为 ``False``::"

#: ../../whatsnew/3.8.rst:1126
msgid ""
">>> from pprint import pprint, pp\n"
">>> d = dict(source='input.txt', operation='filter', destination='output.txt')\n"
">>> pp(d, width=40)                  # Original order\n"
"{'source': 'input.txt',\n"
" 'operation': 'filter',\n"
" 'destination': 'output.txt'}\n"
">>> pprint(d, width=40)              # Keys sorted alphabetically\n"
"{'destination': 'output.txt',\n"
" 'operation': 'filter',\n"
" 'source': 'input.txt'}"
msgstr ""
">>> from pprint import pprint, pp\n"
">>> d = dict(source='input.txt', operation='filter', destination='output.txt')\n"
">>> pp(d, width=40)                  # 原始顺序\n"
"{'source': 'input.txt',\n"
" 'operation': 'filter',\n"
" 'destination': 'output.txt'}\n"
">>> pprint(d, width=40)              # 键按字母顺序排序\n"
"{'destination': 'output.txt',\n"
" 'operation': 'filter',\n"
" 'source': 'input.txt'}"

#: ../../whatsnew/3.8.rst:1137
msgid "(Contributed by Rémi Lapeyre in :issue:`30670`.)"
msgstr "（由 Rémi Lapeyre 在 :issue:`30670` 中贡献。）"

#: ../../whatsnew/3.8.rst:1141
msgid "py_compile"
msgstr "py_compile"

#: ../../whatsnew/3.8.rst:1143
msgid ""
":func:`py_compile.compile` now supports silent mode. (Contributed by Joannah"
" Nanjekye in :issue:`22640`.)"
msgstr ""
":func:`py_compile.compile` 现在支持静默模式。 （由 Joannah Nanjekye 在 :issue:`22640` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1148
msgid "shlex"
msgstr "shlex"

#: ../../whatsnew/3.8.rst:1150
msgid ""
"The new :func:`shlex.join` function acts as the inverse of "
":func:`shlex.split`. (Contributed by Bo Bayles in :issue:`32102`.)"
msgstr ""
"新增了 :func:`shlex.join` 函数作为 :func:`shlex.split` 的逆操作。 （由 Bo Bayles 在 "
":issue:`32102` 中贡献。）"

#: ../../whatsnew/3.8.rst:1155
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.8.rst:1157
msgid ""
":func:`shutil.copytree` now accepts a new ``dirs_exist_ok`` keyword "
"argument. (Contributed by Josh Bronson in :issue:`20849`.)"
msgstr ""
":func:`shutil.copytree` 现在接受新的 ``dirs_exist_ok`` 关键字参数。 （由 Josh Bronson 在 "
":issue:`20849` 中贡献。）"

#: ../../whatsnew/3.8.rst:1160
msgid ""
":func:`shutil.make_archive` now defaults to the modern pax (POSIX.1-2001) "
"format for new archives to improve portability and standards conformance, "
"inherited from the corresponding change to the :mod:`tarfile` module. "
"(Contributed by C.A.M. Gerlach in :issue:`30661`.)"
msgstr ""
":func:`shutil.make_archive` 现在对新的归档默认使用 modern pax (POSIX.1-2001) "
"格式以提升可移植性和标准一致性，此特性继承自对 :mod:`tarfile` 模块的相应更改。 （由 C.A.M. Gerlach 在 "
":issue:`30661` 中贡献。）"

#: ../../whatsnew/3.8.rst:1165
msgid ""
":func:`shutil.rmtree` on Windows now removes directory junctions without "
"recursively removing their contents first. (Contributed by Steve Dower in "
":issue:`37834`.)"
msgstr ""
":func:`shutil.rmtree` 在 Windows 上现在会移除目录连接而不会递归地先移除其中的内容。 （由 Steve Dower 在 "
":issue:`37834` 中贡献。）"

#: ../../whatsnew/3.8.rst:1171
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.8.rst:1173
msgid ""
"Added :meth:`~socket.create_server` and :meth:`~socket.has_dualstack_ipv6` "
"convenience functions to automate the necessary tasks usually involved when "
"creating a server socket, including accepting both IPv4 and IPv6 connections"
" on the same socket.  (Contributed by Giampaolo Rodolà in :issue:`17561`.)"
msgstr ""
"添加了 :meth:`~socket.create_server` 和 :meth:`~socket.has_dualstack_ipv6` "
"便捷函数以自动化在创建服务器套接字时通常情况下所必须的任务，包括在同一套接字中同时接受 IPv4 和 IPv6 连接。 （由 Giampaolo "
"Rodolà 在 :issue:`17561` 中贡献。）.)"

#: ../../whatsnew/3.8.rst:1178
msgid ""
"The :func:`socket.if_nameindex`, :func:`socket.if_nametoindex`, and "
":func:`socket.if_indextoname` functions have been implemented on Windows. "
"(Contributed by Zackery Spytz in :issue:`37007`.)"
msgstr ""
":func:`socket.if_nameindex`, :func:`socket.if_nametoindex` 和 "
":func:`socket.if_indextoname` 函数已经在 Windows 上实现。 （由 Zackery Spytz 在 "
":issue:`37007` 中贡献。）"

#: ../../whatsnew/3.8.rst:1184
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.8.rst:1186
msgid ""
"Added :attr:`~ssl.SSLContext.post_handshake_auth` to enable and "
":meth:`~ssl.SSLSocket.verify_client_post_handshake` to initiate TLS 1.3 "
"post-handshake authentication. (Contributed by Christian Heimes in "
":issue:`34670`.)"
msgstr ""
"增加了 :attr:`~ssl.SSLContext.post_handshake_auth` 和 "
":meth:`~ssl.SSLSocket.verify_client_post_handshake` 分别启用和初始化 TLS 1.3 握手后验证。 "
"（由 Christian Heimes 在 :issue:`34670` 中贡献。）"

#: ../../whatsnew/3.8.rst:1193
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.8.rst:1195
msgid ""
"Added :func:`statistics.fmean` as a faster, floating-point variant of "
":func:`statistics.mean`.  (Contributed by Raymond Hettinger and Steven "
"D'Aprano in :issue:`35904`.)"
msgstr ""
"增加了 :func:`statistics.fmean` 作为 :func:`statistics.mean` 的更快速的浮点数版本。 （由 "
"Raymond Hettinger 和 Steven D'Aprano 在 :issue:`35904` 中贡献。）"

#: ../../whatsnew/3.8.rst:1199
msgid ""
"Added :func:`statistics.geometric_mean` (Contributed by Raymond Hettinger in"
" :issue:`27181`.)"
msgstr ""
"增加了 :func:`statistics.geometric_mean` （由 Raymond Hettinger 在 :issue:`27181` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1202
msgid ""
"Added :func:`statistics.multimode` that returns a list of the most common "
"values. (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""
"添加了 :func:`statistics.multimode` 用于返回最常见值的列表。 （由 Raymond Hettinger 在 "
":issue:`35892` 中贡献。）"

#: ../../whatsnew/3.8.rst:1205
msgid ""
"Added :func:`statistics.quantiles` that divides data or a distribution in to"
" equiprobable intervals (e.g. quartiles, deciles, or percentiles). "
"(Contributed by Raymond Hettinger in :issue:`36546`.)"
msgstr ""
"添加了 :func:`statistics.quantiles` 用于将数据或分布划分为多个等概率区间（例如四分位、十分位或百分位）。 （由 "
"Raymond Hettinger 在 :issue:`36546` 中贡献。）"

#: ../../whatsnew/3.8.rst:1209
msgid ""
"Added :class:`statistics.NormalDist`, a tool for creating and manipulating "
"normal distributions of a random variable. (Contributed by Raymond Hettinger"
" in :issue:`36018`.)"
msgstr ""
"添加了 :class:`statistics.NormalDist` 用于创建和操纵随机变量的正态分布。 （由 Raymond Hettinger 在 "
":issue:`36018` 中贡献。）"

#: ../../whatsnew/3.8.rst:1215
msgid ""
">>> temperature_feb = NormalDist.from_samples([4, 12, -3, 2, 7, 14])\n"
">>> temperature_feb.mean\n"
"6.0\n"
">>> temperature_feb.stdev\n"
"6.356099432828281\n"
"\n"
">>> temperature_feb.cdf(3)            # Chance of being under 3 degrees\n"
"0.3184678262814532\n"
">>> # Relative chance of being 7 degrees versus 10 degrees\n"
">>> temperature_feb.pdf(7) / temperature_feb.pdf(10)\n"
"1.2039930378537762\n"
"\n"
">>> el_niño = NormalDist(4, 2.5)\n"
">>> temperature_feb += el_niño        # Add in a climate effect\n"
">>> temperature_feb\n"
"NormalDist(mu=10.0, sigma=6.830080526611674)\n"
"\n"
">>> temperature_feb * (9/5) + 32      # Convert to Fahrenheit\n"
"NormalDist(mu=50.0, sigma=12.294144947901014)\n"
">>> temperature_feb.samples(3)        # Generate random samples\n"
"[7.672102882379219, 12.000027119750287, 4.647488369766392]"
msgstr ""
">>> temperature_feb = NormalDist.from_samples([4, 12, -3, 2, 7, 14])\n"
">>> temperature_feb.mean\n"
"6.0\n"
">>> temperature_feb.stdev\n"
"6.356099432828281\n"
"\n"
">>> temperature_feb.cdf(3)            # 在 3 度以下的几率\n"
"0.3184678262814532\n"
">>> # 为 7 度与为 10 度的相对几率\n"
">>> temperature_feb.pdf(7) / temperature_feb.pdf(10)\n"
"1.2039930378537762\n"
"\n"
">>> el_niño = NormalDist(4, 2.5)\n"
">>> temperature_feb += el_niño        # 加入一个气候效应\n"
">>> temperature_feb\n"
"NormalDist(mu=10.0, sigma=6.830080526611674)\n"
"\n"
">>> temperature_feb * (9/5) + 32      # 转换为华氏度\n"
"NormalDist(mu=50.0, sigma=12.294144947901014)\n"
">>> temperature_feb.samples(3)        # 生成随机样本\n"
"[7.672102882379219, 12.000027119750287, 4.647488369766392]"

#: ../../whatsnew/3.8.rst:1239
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.8.rst:1241
msgid ""
"Add new :func:`sys.unraisablehook` function which can be overridden to "
"control how \"unraisable exceptions\" are handled. It is called when an "
"exception has occurred but there is no way for Python to handle it. For "
"example, when a destructor raises an exception or during garbage collection "
"(:func:`gc.collect`). (Contributed by Victor Stinner in :issue:`36829`.)"
msgstr ""
"添加了新的 :func:`sys.unraisablehook` 函数，可被重载以便控制如何处理“不可引发的异常”。 它会在发生了一个异常但 "
"Python 没有办法处理时被调用。 例如，当一个析构器在垃圾回收时 (:func:`gc.collect`) 所引发的异常。 （由 Victor "
"Stinner 在 :issue:`36829` 中贡献。）"

#: ../../whatsnew/3.8.rst:1250 ../../whatsnew/3.8.rst:2350
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.8.rst:1252
msgid ""
"The :mod:`tarfile` module now defaults to the modern pax (POSIX.1-2001) "
"format for new archives, instead of the previous GNU-specific one. This "
"improves cross-platform portability with a consistent encoding (UTF-8) in a "
"standardized and extensible format, and offers several other benefits. "
"(Contributed by C.A.M. Gerlach in :issue:`36268`.)"
msgstr ""
":mod:`tarfile` 模块现在对新的归档默认使用 modern pax (POSIX.1-2001) 格式而不再是之前的 GNU 专属格式。 "
"这通过标准化和可扩展格式的统一编码 (UTF-8) 提升了跨平台可移植性，还提供了其他一些益处。 （由 C.A.M. Gerlach 在 "
":issue:`36268` 中贡献。）"

#: ../../whatsnew/3.8.rst:1260
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.8.rst:1262
msgid ""
"Add a new :func:`threading.excepthook` function which handles uncaught "
":meth:`threading.Thread.run` exception. It can be overridden to control how "
"uncaught :meth:`threading.Thread.run` exceptions are handled. (Contributed "
"by Victor Stinner in :issue:`1230540`.)"
msgstr ""
"添加了新的 :func:`threading.excepthook` 函数用来处理未捕获的 :meth:`threading.Thread.run` "
"异常。 它可被重载以便控制如何处理未捕获的 :meth:`threading.Thread.run` 异常。 （由 Victor Stinner 在 "
":issue:`1230540` 中贡献。）"

#: ../../whatsnew/3.8.rst:1267
msgid ""
"Add a new :func:`threading.get_native_id` function and a "
":data:`~threading.Thread.native_id` attribute to the "
":class:`threading.Thread` class. These return the native integral Thread ID "
"of the current thread assigned by the kernel. This feature is only available"
" on certain platforms, see :func:`get_native_id <threading.get_native_id>` "
"for more information. (Contributed by Jake Tesler in :issue:`36084`.)"
msgstr ""
"添加了新的 :func:`threading.get_native_id` 函数以及 :class:`threading.Thread` 类的 "
":data:`~threading.Thread.native_id` 属性。 它们会返回内核所分配给当前线程的原生整数线程 ID。 "
"此特性仅在特定平台上可用，参见 :func:`get_native_id <threading.get_native_id>` 了解详情。 （由 "
"Jake Tesler 在 :issue:`36084` 中贡献。）"

#: ../../whatsnew/3.8.rst:1277
msgid "tokenize"
msgstr "tokenize"

#: ../../whatsnew/3.8.rst:1279
msgid ""
"The :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token when "
"provided with input that does not have a trailing new line.  This behavior "
"now matches what the C tokenizer does internally. (Contributed by Ammar "
"Askar in :issue:`33899`.)"
msgstr ""
"当提供不带末尾新行的输入时，:mod:`tokenize` 模块现在会隐式地添加 ``NEWLINE`` 形符。 此行为现在已与 C "
"词法分析器的内部行为相匹配。 （由 Ammar Askar 在 :issue:`33899` 中贡献。）"

#: ../../whatsnew/3.8.rst:1286
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.8.rst:1288
msgid ""
"Added methods :meth:`~tkinter.Spinbox.selection_from`, "
":meth:`~tkinter.Spinbox.selection_present`, "
":meth:`~tkinter.Spinbox.selection_range` and "
":meth:`~tkinter.Spinbox.selection_to` in the :class:`tkinter.Spinbox` class."
" (Contributed by Juliette Monsel in :issue:`34829`.)"
msgstr ""
"在 :class:`tkinter.Spinbox` 中添加了方法 :meth:`~tkinter.Spinbox.selection_from`, "
":meth:`~tkinter.Spinbox.selection_present`, "
":meth:`~tkinter.Spinbox.selection_range` 和 "
":meth:`~tkinter.Spinbox.selection_to`。 （由 Juliette Monsel 在 :issue:`34829` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1295
msgid ""
"Added method :meth:`~tkinter.Canvas.moveto` in the :class:`tkinter.Canvas` "
"class. (Contributed by Juliette Monsel in :issue:`23831`.)"
msgstr ""
"在 :class:`tkinter.Canvas` 类中添加了方法 :meth:`~tkinter.Canvas.moveto`。 （由 "
"Juliette Monsel 在 :issue:`23831` 中贡献。）"

#: ../../whatsnew/3.8.rst:1299
msgid ""
"The :class:`tkinter.PhotoImage` class now has "
":meth:`~tkinter.PhotoImage.transparency_get` and "
":meth:`~tkinter.PhotoImage.transparency_set` methods.  (Contributed by "
"Zackery Spytz in :issue:`25451`.)"
msgstr ""
":class:`tkinter.PhotoImage` 类现在具有 "
":meth:`~tkinter.PhotoImage.transparency_get` 和 "
":meth:`~tkinter.PhotoImage.transparency_set` 方法。 （由 Zackery Spytz 在 "
":issue:`25451` 中贡献。）"

#: ../../whatsnew/3.8.rst:1306
msgid "time"
msgstr "time"

#: ../../whatsnew/3.8.rst:1308
msgid ""
"Added new clock :const:`~time.CLOCK_UPTIME_RAW` for macOS 10.12. "
"(Contributed by Joannah Nanjekye in :issue:`35702`.)"
msgstr ""
"为 macOS 10.12 添加了新的时钟 :const:`~time.CLOCK_UPTIME_RAW`。 （由 Joannah Nanjekye 在"
" :issue:`35702` 中贡献。）"

#: ../../whatsnew/3.8.rst:1313
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.8.rst:1315
msgid "The :mod:`typing` module incorporates several new features:"
msgstr ":mod:`typing` 模块加入了一些新特性："

#: ../../whatsnew/3.8.rst:1317
msgid ""
"A dictionary type with per-key types.  See :pep:`589` and "
":class:`typing.TypedDict`. TypedDict uses only string keys.  By default, "
"every key is required to be present. Specify \"total=False\" to allow keys "
"to be optional::"
msgstr ""
"一个带有键专属类型的字典类型。 参见 :pep:`589` 和 :class:`typing.TypedDict`。 TypedDict "
"只使用字符串作为键。 默认情况下每个键都要求提供。 指定 \"total=False\" 以允许键作为可选项::"

#: ../../whatsnew/3.8.rst:1322
msgid ""
"class Location(TypedDict, total=False):\n"
"    lat_long: tuple\n"
"    grid_square: str\n"
"    xy_coordinate: tuple"
msgstr ""
"class Location(TypedDict, total=False):\n"
"    lat_long: tuple\n"
"    grid_square: str\n"
"    xy_coordinate: tuple"

#: ../../whatsnew/3.8.rst:1327
msgid ""
"Literal types.  See :pep:`586` and :class:`typing.Literal`. Literal types "
"indicate that a parameter or return value is constrained to one or more "
"specific literal values::"
msgstr ""
"Literal 类型。 参见 :pep:`586` 和 :class:`typing.Literal`。 Literal "
"类型指明一个形参或返回值被限定为一个或多个特定的字面值::"

#: ../../whatsnew/3.8.rst:1331
msgid ""
"def get_status(port: int) -> Literal['connected', 'disconnected']:\n"
"    ..."
msgstr ""
"def get_status(port: int) -> Literal['connected', 'disconnected']:\n"
"    ..."

#: ../../whatsnew/3.8.rst:1334
msgid ""
"\"Final\" variables, functions, methods and classes.  See :pep:`591`, "
":class:`typing.Final` and :func:`typing.final`. The final qualifier "
"instructs a static type checker to restrict subclassing, overriding, or "
"reassignment::"
msgstr ""
"\"Final\" 变量、函数、方法和类。 参见 :pep:`591`, :class:`typing.Final` 和 "
":func:`typing.final`。 final 限定符会指示静态类型检查器限制进行子类化、重载或重新赋值::"

#: ../../whatsnew/3.8.rst:1339
msgid "pi: Final[float] = 3.1415926536"
msgstr "pi: Final[float] = 3.1415926536"

#: ../../whatsnew/3.8.rst:1341
msgid ""
"Protocol definitions.  See :pep:`544`, :class:`typing.Protocol` and "
":func:`typing.runtime_checkable`.  Simple ABCs like "
":class:`typing.SupportsInt` are now ``Protocol`` subclasses."
msgstr ""
"协议定义。 参见 :pep:`544`, :class:`typing.Protocol` 和 "
":func:`typing.runtime_checkable`。 简单的 ABC 例如 :class:`typing.SupportsInt` 现在是"
" ``Protocol`` 的子类。"

#: ../../whatsnew/3.8.rst:1345
msgid "New protocol class :class:`typing.SupportsIndex`."
msgstr "新的协议类 :class:`typing.SupportsIndex`。"

#: ../../whatsnew/3.8.rst:1347
msgid "New functions :func:`typing.get_origin` and :func:`typing.get_args`."
msgstr "新的函数 :func:`typing.get_origin` 和 :func:`typing.get_args`。"

#: ../../whatsnew/3.8.rst:1351
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.8.rst:1353
msgid ""
"The :mod:`unicodedata` module has been upgraded to use the `Unicode 12.1.0 "
"<https://blog.unicode.org/2019/05/unicode-12-1-en.html>`_ release."
msgstr ""
":mod:`unicodedata` 模块现在已升级为使用 `Unicode 12.1.0 "
"<https://blog.unicode.org/2019/05/unicode-12-1-en.html>`_ 发布版。"

#: ../../whatsnew/3.8.rst:1356
msgid ""
"New function :func:`~unicodedata.is_normalized` can be used to verify a "
"string is in a specific normal form, often much faster than by actually "
"normalizing the string.  (Contributed by Max Belanger, David Euresti, and "
"Greg Price in :issue:`32285` and :issue:`37966`)."
msgstr ""
"新的函数 :func:`~unicodedata.is_normalized` "
"可被用来验证字符串是否为特定正规形式，通常会比实际进行字符串正规化要快得多。 （由 Max Belanger, David Euresti 和 Greg"
" Price 在 :issue:`32285` 和 :issue:`37966` 中贡献。）"

#: ../../whatsnew/3.8.rst:1363
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.8.rst:1365
msgid ""
"Added :class:`~unittest.mock.AsyncMock` to support an asynchronous version "
"of :class:`~unittest.mock.Mock`.  Appropriate new assert functions for "
"testing have been added as well. (Contributed by Lisa Roach in "
":issue:`26467`)."
msgstr ""
"添加了 :class:`~unittest.mock.AsyncMock` 以支持异步版本的 :class:`~unittest.mock.Mock`。"
" 同时也添加了相应的断言函数用于测试。 （由 Lisa Roach 在 :issue:`26467` 中贡献。）"

#: ../../whatsnew/3.8.rst:1370
msgid ""
"Added :func:`~unittest.addModuleCleanup` and "
":meth:`~unittest.TestCase.addClassCleanup` to unittest to support cleanups "
"for :func:`~unittest.setUpModule` and :meth:`~unittest.TestCase.setUpClass`."
" (Contributed by Lisa Roach in :issue:`24412`.)"
msgstr ""
"为 unittest 添加 了 :func:`~unittest.addModuleCleanup` 和 "
":meth:`~unittest.TestCase.addClassCleanup` 以支持对 "
":func:`~unittest.setUpModule` 和 :meth:`~unittest.TestCase.setUpClass` 进行清理。 "
"（由 Lisa Roach 在 :issue:`24412` 中贡献。）"

#: ../../whatsnew/3.8.rst:1376
msgid ""
"Several mock assert functions now also print a list of actual calls upon "
"failure. (Contributed by Petter Strandmark in :issue:`35047`.)"
msgstr ""
"一些模拟断言函数现在也会在失败时打印一个实际调用列表。 （由 Petter Strandmark 在 :issue:`35047` 中贡献。）"

#: ../../whatsnew/3.8.rst:1379
msgid ""
":mod:`unittest` module gained support for coroutines to be used as test "
"cases with :class:`unittest.IsolatedAsyncioTestCase`. (Contributed by Andrew"
" Svetlov in :issue:`32972`.)"
msgstr ""
":mod:`unittest` 模块已支持通过 :class:`unittest.IsolatedAsyncioTestCase` "
"来使用协程作为测试用例。 （由 Andrew Svetlov 在 :issue:`32972` 中贡献。）"

#: ../../whatsnew/3.8.rst:1383
msgid "Example::"
msgstr "示例::"

#: ../../whatsnew/3.8.rst:1385
msgid ""
"import unittest\n"
"\n"
"\n"
"class TestRequest(unittest.IsolatedAsyncioTestCase):\n"
"\n"
"    async def asyncSetUp(self):\n"
"        self.connection = await AsyncConnection()\n"
"\n"
"    async def test_get(self):\n"
"        response = await self.connection.get(\"https://example.com\")\n"
"        self.assertEqual(response.status_code, 200)\n"
"\n"
"    async def asyncTearDown(self):\n"
"        await self.connection.close()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    unittest.main()"
msgstr ""
"import unittest\n"
"\n"
"\n"
"class TestRequest(unittest.IsolatedAsyncioTestCase):\n"
"\n"
"    async def asyncSetUp(self):\n"
"        self.connection = await AsyncConnection()\n"
"\n"
"    async def test_get(self):\n"
"        response = await self.connection.get(\"https://example.com\")\n"
"        self.assertEqual(response.status_code, 200)\n"
"\n"
"    async def asyncTearDown(self):\n"
"        await self.connection.close()\n"
"\n"
"\n"
"if __name__ == \"__main__\":\n"
"    unittest.main()"

#: ../../whatsnew/3.8.rst:1406
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.8.rst:1408
msgid ""
":mod:`venv` now includes an ``Activate.ps1`` script on all platforms for "
"activating virtual environments under PowerShell Core 6.1. (Contributed by "
"Brett Cannon in :issue:`32718`.)"
msgstr ""
"现在 :mod:`venv` 在所有平台上都会包含 ``Activate.ps1`` 脚本用于在 PowerShell Core 6.1 "
"下激活虚拟环境。 （由 Brett Cannon 在 :issue:`32718` 中贡献。）"

#: ../../whatsnew/3.8.rst:1414
msgid "weakref"
msgstr "weakref"

#: ../../whatsnew/3.8.rst:1416
msgid ""
"The proxy objects returned by :func:`weakref.proxy` now support the matrix "
"multiplication operators ``@`` and ``@=`` in addition to the other numeric "
"operators. (Contributed by Mark Dickinson in :issue:`36669`.)"
msgstr ""
"由 :func:`weakref.proxy` 返回的代理对象现在除其他算术运算符外也支持矩阵乘法运算符 ``@`` 和 ``@=``。 （由 Mark"
" Dickinson 在 :issue:`36669` 中贡献。）"

#: ../../whatsnew/3.8.rst:1422
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.8.rst:1424
msgid ""
"As mitigation against DTD and external entity retrieval, the "
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process external"
" entities by default. (Contributed by Christian Heimes in :issue:`17239`.)"
msgstr ""
"作为对 DTD 和外部实体检索的缓解，在默认情况下 :mod:`xml.dom.minidom` 和 :mod:`xml.sax` "
"模块不再处理外部实体。 （由 Christian Heimes 在 :issue:`17239` 中贡献。）"

#: ../../whatsnew/3.8.rst:1429
msgid ""
"The ``.find*()`` methods in the :mod:`xml.etree.ElementTree` module support "
"wildcard searches like ``{*}tag`` which ignores the namespace and "
"``{namespace}*`` which returns all tags in the given namespace. (Contributed"
" by Stefan Behnel in :issue:`28238`.)"
msgstr ""
":mod:`xml.etree.ElementTree` 模块中的 ``.find*()`` 方法支持通配符搜索例如 "
"``{*}tag``，此搜索会忽略命名空间以及返回给定命名空间中所有标签的 ``{namespace}*``。 （由 Stefan Behnel 在 "
":issue:`28238` 中贡献。）"

#: ../../whatsnew/3.8.rst:1434
msgid ""
"The :mod:`xml.etree.ElementTree` module provides a new function "
":func:`–xml.etree.ElementTree.canonicalize` that implements C14N 2.0. "
"(Contributed by Stefan Behnel in :issue:`13611`.)"
msgstr ""
":mod:`xml.etree.ElementTree` 模块提供了一个实现 C14N 2.0 的新函数 "
":func:`–xml.etree.ElementTree.canonicalize`。 （由 Stefan Behnel 在 "
":issue:`13611` 中贡献。）"

#: ../../whatsnew/3.8.rst:1438
msgid ""
"The target object of :class:`xml.etree.ElementTree.XMLParser` can receive "
"namespace declaration events through the new callback methods ``start_ns()``"
" and ``end_ns()``.  Additionally, the "
":class:`xml.etree.ElementTree.TreeBuilder` target can be configured to "
"process events about comments and processing instructions to include them in"
" the generated tree. (Contributed by Stefan Behnel in :issue:`36676` and "
":issue:`36673`.)"
msgstr ""
":class:`xml.etree.ElementTree.XMLParser` 的目标对象可通过新的回调方法 ``start_ns()`` 和 "
"``end_ns()`` 来接受命名空间声明事件。 此外，:class:`xml.etree.ElementTree.TreeBuilder` "
"目标可被配置为处理有关注释和处理指令事件以将它们包含在所生成的树当中。 （由 Stefan Behnel 在 :issue:`36676` 和 "
":issue:`36673` 中贡献。）"

#: ../../whatsnew/3.8.rst:1448
msgid "xmlrpc"
msgstr "xmlrpc"

#: ../../whatsnew/3.8.rst:1450
msgid ""
":class:`xmlrpc.client.ServerProxy` now supports an optional *headers* "
"keyword argument for a sequence of HTTP headers to be sent with each "
"request.  Among other things, this makes it possible to upgrade from default"
" basic authentication to faster session authentication. (Contributed by "
"Cédric Krier in :issue:`35153`.)"
msgstr ""
":class:`xmlrpc.client.ServerProxy` 现在支持可选的 *headers* 关键字参数作为随同每次请求发送的 HTTP "
"标头序列。 此特征的作用之一是使得从默认的基础认证升级到更快速的会话认证成为可能。 （由 Cédric Krier 在 :issue:`35153` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1458
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.8.rst:1460
msgid ""
"The :mod:`subprocess` module can now use the :func:`os.posix_spawn` function"
" in some cases for better performance. Currently, it is only used on macOS "
"and Linux (using glibc 2.24 or newer) if all these conditions are met:"
msgstr ""
":mod:`subprocess` 模块现在能在某些情况下使用 :func:`os.posix_spawn` 函数以获得更好的性能。 目前，它的使用仅限"
" macOS 和 Linux（使用 glibc 2.24 或更新版本），并要求满足以下条件："

#: ../../whatsnew/3.8.rst:1464
msgid "*close_fds* is false;"
msgstr "*close_fds* 为假值；"

#: ../../whatsnew/3.8.rst:1465
msgid ""
"*preexec_fn*, *pass_fds*, *cwd* and *start_new_session* parameters are not "
"set;"
msgstr "*preexec_fn*, *pass_fds*, *cwd* 和 *start_new_session* 形参未设置；"

#: ../../whatsnew/3.8.rst:1467
msgid "the *executable* path contains a directory."
msgstr "*executable* 路径包含一个目录。"

#: ../../whatsnew/3.8.rst:1469
msgid ""
"(Contributed by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"
msgstr "（由 Joannah Nanjekye 和 Victor Stinner 在 :issue:`35537` 中贡献。）"

#: ../../whatsnew/3.8.rst:1471
msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` and :func:`shutil.move` use platform-specific "
"\"fast-copy\" syscalls on Linux and macOS in order to copy the file more "
"efficiently. \"fast-copy\" means that the copying operation occurs within "
"the kernel, avoiding the use of userspace buffers in Python as in "
"\"``outfd.write(infd.read())``\". On Windows :func:`shutil.copyfile` uses a "
"bigger default buffer size (1 MiB instead of 16 KiB) and a "
":func:`memoryview`-based variant of :func:`shutil.copyfileobj` is used. The "
"speedup for copying a 512 MiB file within the same partition is about +26% "
"on Linux, +50% on macOS and +40% on Windows. Also, much less CPU cycles are "
"consumed. See :ref:`shutil-platform-dependent-efficient-copy-operations` "
"section. (Contributed by Giampaolo Rodolà in :issue:`33671`.)"
msgstr ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` 和 :func:`shutil.move` 在 Linux 和 macOS 上会使用平台专属的 "
"\"fast-copy\" 系统调用以提高效率。 \"fast-copy\" 意味着拷贝操作发生于内核中，从而避免在进行 "
"\"``outfd.write(infd.read())``\" 等操作时使用 Python 中的用户空间缓冲区。 在 Windows 上 "
":func:`shutil.copyfile` 会使用更大的默认缓冲区（1 MiB 而不是 16 KiB）并且使用基于 "
":func:`memoryview` 的 :func:`shutil.copyfileobj` 版本。 在同一分区内拷贝一个 512 MiB "
"文件的速度提升在 Linux 上约为 +26%，在 macOS 上为 +50%，在 Windows 上为 +40%。 此外还将消耗更少的 CPU 周期。"
" 参见 :ref:`shutil-platform-dependent-efficient-copy-operations` 一节。 （由 "
"Giampaolo Rodolà 在 :issue:`33671` 中贡献。）"

#: ../../whatsnew/3.8.rst:1487
msgid ""
":func:`shutil.copytree` uses :func:`os.scandir` function and all copy "
"functions depending from it use cached :func:`os.stat` values. The speedup "
"for copying a directory with 8000 files is around +9% on Linux, +20% on "
"Windows and +30% on a Windows SMB share. Also the number of :func:`os.stat` "
"syscalls is reduced by 38% making :func:`shutil.copytree` especially faster "
"on network filesystems. (Contributed by Giampaolo Rodolà in :issue:`33695`.)"
msgstr ""
":func:`shutil.copytree` 会根据其所用缓存的 :func:`os.stat` 值使用 :func:`os.scandir` "
"函数及所有拷贝函数。 拷贝一个包含 8000 文件的目录的速度提升在 Linux 上约为 +9%，在 Windows 上为 +20%，对于 "
"Windows SMB 共享目录则为 +30%。 此外 :func:`os.stat` 系统调用的次数也减少了 38%，使得 "
":func:`shutil.copytree` 在网络文件系统上会特别快速。 （由Giampaolo Rodolà 在 :issue:`33695` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1494
msgid ""
"The default protocol in the :mod:`pickle` module is now Protocol 4, first "
"introduced in Python 3.4.  It offers better performance and smaller size "
"compared to Protocol 3 available since Python 3.0."
msgstr ""
":mod:`pickle` 模块使用的默认协议现在为 Protocol 4，最早在 Python 3.4 中被引入。 它提供了比自 Python 3.0"
" 起可用的 Protocol 3 更好的性能和更小的数据尺寸。"

#: ../../whatsnew/3.8.rst:1498
msgid ""
"Removed one :c:type:`Py_ssize_t` member from ``PyGC_Head``.  All GC tracked "
"objects (e.g. tuple, list, dict) size is reduced 4 or 8 bytes. (Contributed "
"by Inada Naoki in :issue:`33597`.)"
msgstr ""
"从 ``PyGC_Head`` 移除了一个 :c:type:`Py_ssize_t` 成员。 所有跟踪 GC 的对象（例如 tuple, list, "
"dict）大小减少了 4 或 8 字节。 （由 Inada Naoki 在 :issue:`33597` 中贡献。）"

#: ../../whatsnew/3.8.rst:1502
msgid ""
":class:`uuid.UUID` now uses ``__slots__`` to reduce its memory footprint. "
"(Contributed by Wouter Bolsterlee and Tal Einat in :issue:`30977`)"
msgstr ""
":class:`uuid.UUID` 现在会使用 ``__slots__`` 以减少内存足迹。 （由 Wouter Bolsterlee 和 Tal "
"Einat 在 :issue:`30977` 中贡献。）"

#: ../../whatsnew/3.8.rst:1505
msgid ""
"Improved performance of :func:`operator.itemgetter` by 33%.  Optimized "
"argument handling and added a fast path for the common case of a single non-"
"negative integer index into a tuple (which is the typical use case in the "
"standard library).  (Contributed by Raymond Hettinger in :issue:`35664`.)"
msgstr ""
":func:`operator.itemgetter` 的性能提升了 33%。 "
"优化了参数处理，并为常见的在元组中单个非负整数索引的情况新增了一条快速路径（这是标准库中的典型用例）。 （由 Raymond Hettinger 在 "
":issue:`35664` 中贡献。"

#: ../../whatsnew/3.8.rst:1511
msgid ""
"Sped-up field lookups in :func:`collections.namedtuple`.  They are now more "
"than two times faster, making them the fastest form of instance variable "
"lookup in Python. (Contributed by Raymond Hettinger, Pablo Galindo, and Joe "
"Jevnik, Serhiy Storchaka in :issue:`32492`.)"
msgstr ""
"加快了在 :func:`collections.namedtuple` 中的字段查找。 它们现在的速度快了两倍以上，成为 Python "
"中最快的实例变量查找形式。 （由 Raymond Hettinger, Pablo Galindo 和 Joe Jevnik, Serhiy "
"Storchaka 在 :issue:`32492` 中贡献。）"

#: ../../whatsnew/3.8.rst:1516
msgid ""
"The :class:`list` constructor does not overallocate the internal item buffer"
" if the input iterable has a known length (the input implements "
"``__len__``). This makes the created list 12% smaller on average. "
"(Contributed by Raymond Hettinger and Pablo Galindo in :issue:`33234`.)"
msgstr ""
"如果输入的可迭代对象的长度已知 (即输入对象实现了 ``__len__``)，:class:`list` 构造器不会过度分配内部项缓冲区。 "
"这使得所创建的列表资源占用平均减少了 12%。 （由 Raymond Hettinger 和 Pablo Galindo 在 "
":issue:`33234` 中贡献。）"

#: ../../whatsnew/3.8.rst:1521
msgid ""
"Doubled the speed of class variable writes.  When a non-dunder attribute was"
" updated, there was an unnecessary call to update slots. (Contributed by "
"Stefan Behnel, Pablo Galindo Salgado, Raymond Hettinger, Neil Schemenauer, "
"and Serhiy Storchaka in :issue:`36012`.)"
msgstr ""
"类变量写入速度加倍。 当一个非冗余属性被更新时，之前存在一个更新 slots 的非必要调用。 （由 Stefan Behnel, Pablo "
"Galindo Salgado, Raymond Hettinger, Neil Schemenauer, 和 Serhiy Storchaka 在 "
":issue:`36012` 中贡献。）"

#: ../../whatsnew/3.8.rst:1526
msgid ""
"Reduced an overhead of converting arguments passed to many builtin functions"
" and methods.  This sped up calling some simple builtin functions and "
"methods up to 20--50%.  (Contributed by Serhiy Storchaka in :issue:`23867`, "
":issue:`35582` and :issue:`36127`.)"
msgstr ""
"减少了传递给许多内置函数和方法的参数转换的开销。 这使得某些简单内置函数和方法的速度提升了 20--50%。 （由 Serhiy Storchaka 在"
" :issue:`23867`, :issue:`35582` 和 :issue:`36127` 中贡献。）"

#: ../../whatsnew/3.8.rst:1531
msgid ""
"``LOAD_GLOBAL`` instruction now uses new \"per opcode cache\" mechanism. It "
"is about 40% faster now.  (Contributed by Yury Selivanov and Inada Naoki in "
":issue:`26219`.)"
msgstr ""
"``LOAD_GLOBAL`` 指令现在会使用新的 \"per opcode cache\" 机制。 它的速度现在提升了大约 40%。 （由 Yury "
"Selivanov 和 Inada Naoki 在 :issue:`26219` 中贡献。）"

#: ../../whatsnew/3.8.rst:1537
msgid "Build and C API Changes"
msgstr "构建和 C API 的改变"

#: ../../whatsnew/3.8.rst:1539
msgid ""
"Default :data:`sys.abiflags` became an empty string: the ``m`` flag for "
"pymalloc became useless (builds with and without pymalloc are ABI "
"compatible) and so has been removed. (Contributed by Victor Stinner in "
":issue:`36707`.)"
msgstr ""
"默认的 :data:`sys.abiflags` 成为一个空字符串：pymalloc 的 ``m`` 旗标不再有意义（无论是否启用 pymalloc "
"构建都是兼容 ABI 的）因此已被移除。 （由 Victor Stinner 在 :issue:`36707` 中贡献。）"

#: ../../whatsnew/3.8.rst:1543
msgid "Example of changes:"
msgstr "改变的例子："

#: ../../whatsnew/3.8.rst:1545
msgid ""
"Only ``python3.8`` program is installed, ``python3.8m`` program is gone."
msgstr "只会安装 ``python3.8`` 程序，不再有 ``python3.8m`` 程序。"

#: ../../whatsnew/3.8.rst:1546
msgid ""
"Only ``python3.8-config`` script is installed, ``python3.8m-config`` script "
"is gone."
msgstr "只会安装 ``python3.8-config`` 脚本，不再有 ``python3.8m-config`` 脚本。"

#: ../../whatsnew/3.8.rst:1548
msgid ""
"The ``m`` flag has been removed from the suffix of dynamic library "
"filenames: extension modules in the standard library as well as those "
"produced and installed by third-party packages, like those downloaded from "
"PyPI. On Linux, for example, the Python 3.7 suffix "
"``.cpython-37m-x86_64-linux-gnu.so`` became ``.cpython-38-x86_64-linux-"
"gnu.so`` in Python 3.8."
msgstr ""
"``m`` 旗标已经从动态库文件名后缀中移除：包括标准库中的扩展模块以及第三方包所产生和安装的模块例如从 PyPI 下载的模块。 以 Linux "
"为例，Python 3.7 的后缀 ``.cpython-37m-x86_64-linux-gnu.so`` 在 Python 3.8 中改为 "
"``.cpython-38-x86_64-linux-gnu.so``。"

#: ../../whatsnew/3.8.rst:1555
msgid ""
"The header files have been reorganized to better separate the different "
"kinds of APIs:"
msgstr "重新组织了所有头文件以更好地区分不同种类的 API："

#: ../../whatsnew/3.8.rst:1558
msgid "``Include/*.h`` should be the portable public stable C API."
msgstr "``Include/*.h`` 应为可移植的公有稳定版 C API。"

#: ../../whatsnew/3.8.rst:1559
msgid ""
"``Include/cpython/*.h`` should be the unstable C API specific to CPython; "
"public API, with some private API prefixed by ``_Py`` or ``_PY``."
msgstr ""
"``Include/cpython/*.h`` 应为 CPython 专属的不稳定版 C API；公有 API，部分私有 API 附加 ``_Py`` "
"or ``_PY`` 前缀。"

#: ../../whatsnew/3.8.rst:1561
msgid ""
"``Include/internal/*.h`` is the private internal C API very specific to "
"CPython. This API comes with no backward compatibility warranty and should "
"not be used outside CPython. It is only exposed for very specific needs like"
" debuggers and profiles which has to access to CPython internals without "
"calling functions. This API is now installed by ``make install``."
msgstr ""
"``Include/internal/*.h`` 应为 CPython 特别专属的私有内部 C API。 此 API 不具备向下兼容保证并且不应在 "
"CPython 以外被使用。 它们的公开仅适用于特别限定的需求例如调试器和性能分析等必须直接访问 CPython 内部数据而不通过调用函数的应用。 此 "
"API 现在是通过 ``make install`` 安装的。"

#: ../../whatsnew/3.8.rst:1567
msgid ""
"(Contributed by Victor Stinner in :issue:`35134` and :issue:`35081`, work "
"initiated by Eric Snow in Python 3.7.)"
msgstr ""
"（由 Victor Stinner 在 :issue:`35134` 和 :issue:`35081` 中贡献，相关工作由 Eric Snow 在 "
"Python 3.7 中发起。）"

#: ../../whatsnew/3.8.rst:1570
msgid ""
"Some macros have been converted to static inline functions: parameter types "
"and return type are well defined, they don't have issues specific to macros,"
" variables have a local scopes. Examples:"
msgstr "某些宏已被转换为静态内联函数：形参类型和返回类型定义良好，它们不再会有与宏相关的问题，变量具有局部作用域。 例如："

#: ../../whatsnew/3.8.rst:1574
msgid ":c:func:`Py_INCREF`, :c:func:`Py_DECREF`"
msgstr ":c:func:`Py_INCREF`, :c:func:`Py_DECREF`"

#: ../../whatsnew/3.8.rst:1575
msgid ":c:func:`Py_XINCREF`, :c:func:`Py_XDECREF`"
msgstr ":c:func:`Py_XINCREF`, :c:func:`Py_XDECREF`"

#: ../../whatsnew/3.8.rst:1576
msgid ":c:func:`PyObject_INIT`, :c:func:`PyObject_INIT_VAR`"
msgstr ":c:func:`PyObject_INIT`, :c:func:`PyObject_INIT_VAR`"

#: ../../whatsnew/3.8.rst:1577
msgid ""
"Private functions: :c:func:`!_PyObject_GC_TRACK`, "
":c:func:`!_PyObject_GC_UNTRACK`, :c:func:`!_Py_Dealloc`"
msgstr ""
"私有函数: :c:func:`!_PyObject_GC_TRACK`, :c:func:`!_PyObject_GC_UNTRACK`, "
":c:func:`!_Py_Dealloc`"

#: ../../whatsnew/3.8.rst:1580
msgid "(Contributed by Victor Stinner in :issue:`35059`.)"
msgstr "（由 Victor Stinner 在 :issue:`35059` 中贡献。）"

#: ../../whatsnew/3.8.rst:1582
msgid ""
"The :c:func:`!PyByteArray_Init` and :c:func:`!PyByteArray_Fini` functions "
"have been removed. They did nothing since Python 2.7.4 and Python 3.2.0, "
"were excluded from the limited API (stable ABI), and were not documented. "
"(Contributed by Victor Stinner in :issue:`35713`.)"
msgstr ""
":c:func:`!PyByteArray_Init` 和 :c:func:`!PyByteArray_Fini` 函数已被移除。 它们自 Python"
" 2.7.4 和 Python 3.2.0 起就没有任何用处，被排除在受限 API (稳定 ABI) 之外，并且未被写入文档。 （由 Victor "
"Stinner 在 :issue:`35713` 中贡献。）"

#: ../../whatsnew/3.8.rst:1587
msgid ""
"The result of :c:func:`PyExceptionClass_Name` is now of type ``const char "
"*`` rather of ``char *``. (Contributed by Serhiy Storchaka in "
":issue:`33818`.)"
msgstr ""
":c:func:`PyExceptionClass_Name` 的结果类型现在是 ``const char *`` 而非 ``char *``。 （由 "
"Serhiy Storchaka 在 :issue:`33818` 中贡献。）"

#: ../../whatsnew/3.8.rst:1591
msgid ""
"The duality of ``Modules/Setup.dist`` and ``Modules/Setup`` has been "
"removed.  Previously, when updating the CPython source tree, one had to "
"manually copy ``Modules/Setup.dist`` (inside the source tree) to "
"``Modules/Setup`` (inside the build tree) in order to reflect any changes "
"upstream.  This was of a small benefit to packagers at the expense of a "
"frequent annoyance to developers following CPython development, as "
"forgetting to copy the file could produce build failures."
msgstr ""
"``Modules/Setup.dist`` 与 ``Modules/Setup`` 两者的共存已被移除。 之前在更新 CPython "
"源码树时，开发者必须手动拷贝 ``Modules/Setup.dist`` (在源码树内) 到 ``Modules/Setup`` (在构建树内) "
"以反映上游的任何改变。 旧特性对打包者来说有一点益处，但代价是对追踪 CPython "
"开发进程的开发者造成经常性的麻烦，因为忘记拷贝该文件可能导致构建失败。"

#: ../../whatsnew/3.8.rst:1599
msgid ""
"Now the build system always reads from ``Modules/Setup`` inside the source "
"tree.  People who want to customize that file are encouraged to maintain "
"their changes in a git fork of CPython or as patch files, as they would do "
"for any other change to the source tree."
msgstr ""
"现在构建系统总是会从源码树内的 ``Modules/Setup`` 读取数据。 建议希望定制该文件的开发者在 CPython 的一个 git "
"分叉或补丁文件中维护他们的更改，就如他们对源码树做任何其他改变时一样。"

#: ../../whatsnew/3.8.rst:1604
msgid "(Contributed by Antoine Pitrou in :issue:`32430`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`32430` 中贡献。）"

#: ../../whatsnew/3.8.rst:1606
msgid ""
"Functions that convert Python number to C integer like "
":c:func:`PyLong_AsLong` and argument parsing functions like "
":c:func:`PyArg_ParseTuple` with integer converting format units like ``'i'``"
" will now use the :meth:`~object.__index__` special method instead of "
":meth:`~object.__int__`, if available.  The deprecation warning will be "
"emitted for objects with the ``__int__()`` method but without the "
"``__index__()`` method (like :class:`~decimal.Decimal` and "
":class:`~fractions.Fraction`).  :c:func:`PyNumber_Check` will now return "
"``1`` for objects implementing ``__index__()``. :c:func:`PyNumber_Long`, "
":c:func:`PyNumber_Float` and :c:func:`PyFloat_AsDouble` also now use the "
"``__index__()`` method if available. (Contributed by Serhiy Storchaka in "
":issue:`36048` and :issue:`20092`.)"
msgstr ""
"将 Python 数字转换为 C 整型的函数例如 :c:func:`PyLong_AsLong` 以及带有 ``'i'`` "
"之类整型转换格式单元的参数解析函数例如 :c:func:`PyArg_ParseTuple` 现在如果可能将会使用 "
":meth:`~object.__index__` 特殊方法而不是 :meth:`~object.__int__`。 对于带有 "
"``__int__()`` 方法但没有 ``__index__()`` 方法的对象 (例如 :class:`~decimal.Decimal` 和 "
":class:`~fractions.Fraction`) 将会发出弃用警告。 对于实现了 ``__index__()`` 的对象 "
":c:func:`PyNumber_Check` 现在将返回 ``1``。 :c:func:`PyNumber_Long`, "
":c:func:`PyNumber_Float` 和 :c:func:`PyFloat_AsDouble` 现在如果可能也将会使用 "
"``__index__()`` 方法。 （由 Serhiy Storchaka 在 :issue:`36048` 和 :issue:`20092` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1620
msgid ""
"Heap-allocated type objects will now increase their reference count in "
":c:func:`PyObject_Init` (and its parallel macro ``PyObject_INIT``) instead "
"of in :c:func:`PyType_GenericAlloc`. Types that modify instance allocation "
"or deallocation may need to be adjusted. (Contributed by Eddie Elizondo in "
":issue:`35810`.)"
msgstr ""
"堆分配类型对象现在将增加它们在 :c:func:`PyObject_Init` (及其对应的宏 ``PyObject_INIT``) "
"中的引用计数而不是在 :c:func:`PyType_GenericAlloc` 中。 修改实例分配或中止分配的类型可能需要进行调整。 （由 "
"Elizondo 在 :issue:`35810` 中贡献。）"

#: ../../whatsnew/3.8.rst:1626
msgid ""
"The new function :c:func:`!PyCode_NewWithPosOnlyArgs` allows to create code "
"objects like :c:func:`!PyCode_New`, but with an extra *posonlyargcount* "
"parameter for indicating the number of positional-only arguments. "
"(Contributed by Pablo Galindo in :issue:`37221`.)"
msgstr ""
"新增函数 :c:func:`!PyCode_NewWithPosOnlyArgs` 允许创建代码对象如 "
":c:func:`!PyCode_New`，但带有一个额外的 *posonlyargcount* 形参以指明仅限位置参数的数量。 （由 Pablo "
"Galindo 在 :issue:`37221` 中贡献。）"

#: ../../whatsnew/3.8.rst:1631
msgid ""
":c:func:`!Py_SetPath` now sets :data:`sys.executable` to the program full "
"path (:c:func:`Py_GetProgramFullPath`) rather than to the program name "
"(:c:func:`Py_GetProgramName`). (Contributed by Victor Stinner in "
":issue:`38234`.)"
msgstr ""
":c:func:`!Py_SetPath` 现在会将 :data:`sys.executable` 设置为程序完整路径 "
"(:c:func:`Py_GetProgramFullPath`) 而不是程序名称 (:c:func:`Py_GetProgramName`)。 （由 "
"Victor Stinner 在 :issue:`38234` 中贡献。）"

#: ../../whatsnew/3.8.rst:1638
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.8.rst:1640
msgid ""
"The distutils ``bdist_wininst`` command is now deprecated, use "
"``bdist_wheel`` (wheel packages) instead. (Contributed by Victor Stinner in "
":issue:`37481`.)"
msgstr ""
"distutils 的 ``bdist_wininst`` 命令现在已弃用，请改用 ``bdist_wheel`` (wheel 包)。 （由 "
"Victor Stinner 在 :issue:`37481` 中贡献。）"

#: ../../whatsnew/3.8.rst:1644
msgid ""
"Deprecated methods ``getchildren()`` and ``getiterator()`` in the "
":mod:`~xml.etree.ElementTree` module now emit a :exc:`DeprecationWarning` "
"instead of :exc:`PendingDeprecationWarning`. They will be removed in Python "
"3.9. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
":mod:`~xml.etree.ElementTree` 模块中的已弃用方法 ``getchildren()`` 和 "
"``getiterator()`` 现在会引发 :exc:`DeprecationWarning` 而不是 "
":exc:`PendingDeprecationWarning`。 它们将在 Python 3.9 中被移除。 （由 Serhiy Storchaka "
"在 :issue:`29209` 中贡献。）"

#: ../../whatsnew/3.8.rst:1650
msgid ""
"Passing an object that is not an instance of "
":class:`concurrent.futures.ThreadPoolExecutor` to "
":meth:`loop.set_default_executor() <asyncio.loop.set_default_executor>` is "
"deprecated and will be prohibited in Python 3.9. (Contributed by Elvis "
"Pranskevichus in :issue:`34075`.)"
msgstr ""
"将不是 :class:`concurrent.futures.ThreadPoolExecutor` 的实例的对象传给 "
":meth:`loop.set_default_executor() <asyncio.loop.set_default_executor>` "
"已被弃用，并将在 Python 3.9 中被禁止。 （由 Elvis Pranskevichus 在 :issue:`34075` 中贡献。）"

#: ../../whatsnew/3.8.rst:1656
msgid ""
"The :meth:`~object.__getitem__` methods of "
":class:`xml.dom.pulldom.DOMEventStream`, :class:`wsgiref.util.FileWrapper` "
"and :class:`fileinput.FileInput` have been deprecated."
msgstr ""
":class:`xml.dom.pulldom.DOMEventStream`, :class:`wsgiref.util.FileWrapper` 和"
" :class:`fileinput.FileInput` 的 :meth:`~object.__getitem__` 方法已被弃用。"

#: ../../whatsnew/3.8.rst:1660
msgid ""
"Implementations of these methods have been ignoring their *index* parameter,"
" and returning the next item instead. (Contributed by Berker Peksag in "
":issue:`9372`.)"
msgstr ""
"这些方法的实现会忽略它们的 *index* 形参，并改为返回下一条目。 （由 Berker Peksag 在 :issue:`9372` 中贡献。）"

#: ../../whatsnew/3.8.rst:1664
msgid ""
"The :class:`typing.NamedTuple` class has deprecated the ``_field_types`` "
"attribute in favor of the ``__annotations__`` attribute which has the same "
"information. (Contributed by Raymond Hettinger in :issue:`36320`.)"
msgstr ""
":class:`typing.NamedTuple` 类已弃用了 ``_field_types`` 属性而改用具有同样信息的 "
"``__annotations__`` 属性。 （由 Raymond Hettinger 在 :issue:`36320` 中贡献。）"

#: ../../whatsnew/3.8.rst:1668
msgid ""
":mod:`ast` classes ``Num``, ``Str``, ``Bytes``, ``NameConstant`` and "
"``Ellipsis`` are considered deprecated and will be removed in future Python "
"versions. :class:`~ast.Constant` should be used instead. (Contributed by "
"Serhiy Storchaka in :issue:`32892`.)"
msgstr ""
":mod:`ast` 类 ``Num``, ``Str``, ``Bytes``, ``NameConstant`` 和 ``Ellipsis`` "
"被视为已弃用并将在未来的 Python 版本中被移除。 应当改用 :class:`~ast.Constant`。 （由 Serhiy Storchaka"
" 在 :issue:`32892` 中贡献。）"

#: ../../whatsnew/3.8.rst:1673
msgid ""
":class:`ast.NodeVisitor` methods ``visit_Num()``, ``visit_Str()``, "
"``visit_Bytes()``, ``visit_NameConstant()`` and ``visit_Ellipsis()`` are "
"deprecated now and will not be called in future Python versions. Add the "
":meth:`~ast.NodeVisitor.visit_Constant` method to handle all constant nodes."
" (Contributed by Serhiy Storchaka in :issue:`36917`.)"
msgstr ""
":class:`ast.NodeVisitor` 的方法 ``visit_Num()``, ``visit_Str()``, "
"``visit_Bytes()``, ``visit_NameConstant()`` 和 ``visit_Ellipsis()`` "
"现在已被弃用，并且在未来的 Python 版本中将不再被调用。 添加 :meth:`~ast.NodeVisitor.visit_Constant` "
"方法来处理所有常量节点。 （由 Serhiy Storchaka 在 :issue:`36917` 中贡献。）"

#: ../../whatsnew/3.8.rst:1680
msgid ""
"The :func:`asyncio.coroutine` :term:`decorator` is deprecated and will be "
"removed in version 3.10.  Instead of ``@asyncio.coroutine``, use "
":keyword:`async def` instead. (Contributed by Andrew Svetlov in "
":issue:`36921`.)"
msgstr ""
":func:`asyncio.coroutine` :term:`decorator` 已弃用并将在 3.10 版中被移除。 原有的 "
"``@asyncio.coroutine`` 请改用 :keyword:`async def` 来替代。 （由 Andrew Svetlov 在 "
":issue:`36921` 中贡献。）"

#: ../../whatsnew/3.8.rst:1685
msgid ""
"In :mod:`asyncio`, the explicit passing of a *loop* argument has been "
"deprecated and will be removed in version 3.10 for the following: "
":func:`asyncio.sleep`, :func:`asyncio.gather`, :func:`asyncio.shield`, "
":func:`asyncio.wait_for`, :func:`asyncio.wait`, "
":func:`asyncio.as_completed`, :class:`asyncio.Task`, :class:`asyncio.Lock`, "
":class:`asyncio.Event`, :class:`asyncio.Condition`, "
":class:`asyncio.Semaphore`, :class:`asyncio.BoundedSemaphore`, "
":class:`asyncio.Queue`, :func:`asyncio.create_subprocess_exec`, and "
":func:`asyncio.create_subprocess_shell`."
msgstr ""
"在 :mod:`asyncio` 中，*loop* 参数的显式传递已被弃用并且到 3.10 版时将会在以下函数中被移除: "
":func:`asyncio.sleep`, :func:`asyncio.gather`, :func:`asyncio.shield`, "
":func:`asyncio.wait_for`, :func:`asyncio.wait`, "
":func:`asyncio.as_completed`, :class:`asyncio.Task`, :class:`asyncio.Lock`, "
":class:`asyncio.Event`, :class:`asyncio.Condition`, "
":class:`asyncio.Semaphore`, :class:`asyncio.BoundedSemaphore`, "
":class:`asyncio.Queue`, :func:`asyncio.create_subprocess_exec` 以及 "
":func:`asyncio.create_subprocess_shell`。"

#: ../../whatsnew/3.8.rst:1695
msgid ""
"The explicit passing of coroutine objects to :func:`asyncio.wait` has been "
"deprecated and will be removed in version 3.11. (Contributed by Yury "
"Selivanov in :issue:`34790`.)"
msgstr ""
"将协程对象显式传递给 :func:`asyncio.wait` 的做法已被弃用并且将在 3.11 版中被移除。 （由 Yury Selivanov 在 "
":issue:`34790` 中贡献。）"

#: ../../whatsnew/3.8.rst:1699
msgid ""
"The following functions and methods are deprecated in the :mod:`gettext` "
"module: :func:`~gettext.lgettext`, :func:`~gettext.ldgettext`, "
":func:`~gettext.lngettext` and :func:`~gettext.ldngettext`. They return "
"encoded bytes, and it's possible that you will get unexpected Unicode-"
"related exceptions if there are encoding problems with the translated "
"strings. It's much better to use alternatives which return Unicode strings "
"in Python 3. These functions have been broken for a long time."
msgstr ""
":mod:`gettext` 模块中的下列函数和方法已被弃用: :func:`~gettext.lgettext`, "
":func:`~gettext.ldgettext`, :func:`~gettext.lngettext` 和 "
":func:`~gettext.ldngettext`。 它们返回已编码的字节串，如果转换后的字符串存在编码问题你将可能遭遇预期之外的异常。 "
"更好的做法是使用 Python 3 中返回 Unicode 字符串的操作作为替代。 前面的函数都早已不宜使用。"

#: ../../whatsnew/3.8.rst:1707
msgid ""
"Function :func:`~gettext.bind_textdomain_codeset`, methods "
":meth:`~gettext.NullTranslations.output_charset` and "
":meth:`~gettext.NullTranslations.set_output_charset`, and the *codeset* "
"parameter of functions :func:`~gettext.translation` and "
":func:`~gettext.install` are also deprecated, since they are only used for "
"the ``l*gettext()`` functions. (Contributed by Serhiy Storchaka in "
":issue:`33710`.)"
msgstr ""
"函数 :func:`~gettext.bind_textdomain_codeset`，方法 "
":meth:`~gettext.NullTranslations.output_charset` 和 "
":meth:`~gettext.NullTranslations.set_output_charset`，以及函数 "
":func:`~gettext.translation` 和 :func:`~gettext.install` 的 *codeset* "
"形参也已被弃用，因为它们仅适用于 ``l*gettext()`` 函数。 （由 Serhiy Storchaka 在 :issue:`33710` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1715
msgid ""
"The :meth:`~threading.Thread.isAlive` method of :class:`threading.Thread` "
"has been deprecated. (Contributed by Donghee Na in :issue:`35283`.)"
msgstr ""
":class:`threading.Thread` 的 :meth:`~threading.Thread.isAlive` 方法已被弃用。 （由 "
"Donghee Na 在 :issue:`35283` 中贡献。）"

#: ../../whatsnew/3.8.rst:1719
msgid ""
"Many builtin and extension functions that take integer arguments will now "
"emit a deprecation warning for :class:`~decimal.Decimal`\\ s, "
":class:`~fractions.Fraction`\\ s and any other objects that can be converted"
" to integers only with a loss (e.g. that have the :meth:`~object.__int__` "
"method but do not have the :meth:`~object.__index__` method).  In future "
"version they will be errors. (Contributed by Serhiy Storchaka in "
":issue:`36048`.)"
msgstr ""
"许多接受整数参数的内置和扩展模块的函数现在将对传入 :class:`~decimal.Decimal`, "
":class:`~fractions.Fraction` 以及任何其他可被转换为整数但会丢失精度（即具有 :meth:`~object.__int__`"
" 方法但没有 :meth:`~object.__index__` 方法）的对象发出弃用警告。 在未来的版本中则将报错。 （由 Serhiy "
"Storchaka 在 :issue:`36048` 中贡献。）"

#: ../../whatsnew/3.8.rst:1727
msgid "Deprecated passing the following arguments as keyword arguments:"
msgstr "以下参数作为关键字参数传递的方式已被弃用："

#: ../../whatsnew/3.8.rst:1729
msgid ""
"*func* in :func:`functools.partialmethod`, :func:`weakref.finalize`, "
":meth:`profile.Profile.runcall`, :meth:`cProfile.Profile.runcall`, "
":meth:`bdb.Bdb.runcall`, :meth:`trace.Trace.runfunc` and "
":func:`curses.wrapper`."
msgstr ""
":func:`functools.partialmethod`, :func:`weakref.finalize`, "
":meth:`profile.Profile.runcall`, :meth:`cProfile.Profile.runcall`, "
":meth:`bdb.Bdb.runcall`, :meth:`trace.Trace.runfunc` 与 "
":func:`curses.wrapper` 中的 *func*。"

#: ../../whatsnew/3.8.rst:1733
msgid "*function* in :meth:`unittest.TestCase.addCleanup`."
msgstr ":meth:`unittest.TestCase.addCleanup` 中的 *function*。"

#: ../../whatsnew/3.8.rst:1734
msgid ""
"*fn* in the :meth:`~concurrent.futures.Executor.submit` method of "
":class:`concurrent.futures.ThreadPoolExecutor` and "
":class:`concurrent.futures.ProcessPoolExecutor`."
msgstr ""
":class:`concurrent.futures.ThreadPoolExecutor` 和 "
":class:`concurrent.futures.ProcessPoolExecutor` 的  "
":meth:`~concurrent.futures.Executor.submit` 方法中的 *fn*。"

#: ../../whatsnew/3.8.rst:1737
msgid ""
"*callback* in :meth:`contextlib.ExitStack.callback`, "
":meth:`contextlib.AsyncExitStack.callback` and "
":meth:`contextlib.AsyncExitStack.push_async_callback`."
msgstr ""
":meth:`contextlib.ExitStack.callback`, "
":meth:`contextlib.AsyncExitStack.callback` 和 "
":meth:`contextlib.AsyncExitStack.push_async_callback` 中的 *callback*。"

#: ../../whatsnew/3.8.rst:1740
msgid ""
"*c* and *typeid* in the :meth:`~multiprocessing.managers.Server.create` "
"method of :class:`multiprocessing.managers.Server` and "
":class:`multiprocessing.managers.SharedMemoryServer`."
msgstr ""
":class:`multiprocessing.managers.Server` 和 "
":class:`multiprocessing.managers.SharedMemoryServer` 的 "
":meth:`~multiprocessing.managers.Server.create` 方法中的 *c* 和 *typeid*。"

#: ../../whatsnew/3.8.rst:1743
msgid "*obj* in :func:`weakref.finalize`."
msgstr ":func:`weakref.finalize` 中的 *obj*。"

#: ../../whatsnew/3.8.rst:1745
msgid ""
"In future releases of Python, they will be :ref:`positional-only "
"<positional-only_parameter>`. (Contributed by Serhiy Storchaka in "
":issue:`36492`.)"
msgstr ""
"在未来版本的 Python 中，它们将成为 :ref:`仅限位置参数 <positional-only_parameter>`。 （由 Serhiy "
"Storchaka 在 :issue:`36492` 中贡献。）"

#: ../../whatsnew/3.8.rst:1751
msgid "API and Feature Removals"
msgstr "API 与特性的移除"

#: ../../whatsnew/3.8.rst:1753
msgid "The following features and APIs have been removed from Python 3.8:"
msgstr "下列特性与 API 已从 Python 3.8 中移除："

#: ../../whatsnew/3.8.rst:1755
msgid ""
"Starting with Python 3.3, importing ABCs from :mod:`collections` was "
"deprecated, and importing should be done from :mod:`collections.abc`. Being "
"able to import from collections was marked for removal in 3.8, but has been "
"delayed to 3.9. (See :gh:`81134`.)"
msgstr ""
"自 Python 3.3 起，从 :mod:`collections` 导入 ABC 的做法已被弃用，而应当从 "
":mod:`collections.abc` 执行导入。 从 collections 导入的功能在 3.8 中已标记为被移除，但将推迟到 3.9 "
"中实施。 （参见 :gh:`81134`。）"

#: ../../whatsnew/3.8.rst:1760
msgid ""
"The :mod:`macpath` module, deprecated in Python 3.7, has been removed. "
"(Contributed by Victor Stinner in :issue:`35471`.)"
msgstr ""
":mod:`macpath` 模块，在 Python 3.7 中弃用，现已被移除。 （由 Victor Stinner 在 :issue:`35471`"
" 中贡献。）"

#: ../../whatsnew/3.8.rst:1763 ../../whatsnew/3.8.rst:1882
msgid ""
"The function :func:`platform.popen` has been removed, after having been "
"deprecated since Python 3.3: use :func:`os.popen` instead. (Contributed by "
"Victor Stinner in :issue:`35345`.)"
msgstr ""
"函数 :func:`platform.popen` 已被移除，它自 Python 3.3 起就已被弃用：请改用 :func:`os.popen`。 （由"
" Victor Stinner 在 :issue:`35345` 中贡献。）"

#: ../../whatsnew/3.8.rst:1767
msgid ""
"The function :func:`time.clock` has been removed, after having been "
"deprecated since Python 3.3: use :func:`time.perf_counter` or "
":func:`time.process_time` instead, depending on your requirements, to have "
"well-defined behavior. (Contributed by Matthias Bussonnier in "
":issue:`36895`.)"
msgstr ""
"函数 :func:`time.clock` 已被移除，它自 Python 3.3 起就已被弃用：请根据具体需求改用 "
":func:`time.perf_counter` 或 :func:`time.process_time` 以获得具有良好定义的行为。 （由 "
"Matthias Bussonnier 在 :issue:`36895` 中贡献。）"

#: ../../whatsnew/3.8.rst:1773
msgid ""
"The ``pyvenv`` script has been removed in favor of ``python3.8 -m venv`` to "
"help eliminate confusion as to what Python interpreter the ``pyvenv`` script"
" is tied to. (Contributed by Brett Cannon in :issue:`25427`.)"
msgstr ""
"``pyvenv`` 脚本已被移除，推荐改用 ``python3.8 -m venv`` 来帮助消除容易混淆 ``pyvenv`` 脚本所关联的 "
"Python 解释器这一问题。 （由 Brett Cannon 在 :issue:`25427` 中贡献。）"

#: ../../whatsnew/3.8.rst:1777
msgid ""
"``parse_qs``, ``parse_qsl``, and ``escape`` are removed from the :mod:`cgi` "
"module.  They are deprecated in Python 3.2 or older. They should be imported"
" from the ``urllib.parse`` and ``html`` modules instead."
msgstr ""
"``parse_qs``, ``parse_qsl`` 和 ``escape`` 已从 :mod:`cgi` 模块中被移除。 这些函数自 Python "
"3.2 或更早就已被弃用。 它们应改为从 ``urllib.parse`` 和 ``html`` 模块导入。"

#: ../../whatsnew/3.8.rst:1781
msgid ""
"``filemode`` function is removed from the :mod:`tarfile` module. It is not "
"documented and deprecated since Python 3.3."
msgstr ""
"``filemode`` 函数已从 :mod:`tarfile` 模块中被移除。 该函数未被写入文档，自 Python 3.3 起就已弃用。"

#: ../../whatsnew/3.8.rst:1784
msgid ""
"The :class:`~xml.etree.ElementTree.XMLParser` constructor no longer accepts "
"the *html* argument.  It never had an effect and was deprecated in Python "
"3.4. All other parameters are now :ref:`keyword-only <keyword-"
"only_parameter>`. (Contributed by Serhiy Storchaka in :issue:`29209`.)"
msgstr ""
":class:`~xml.etree.ElementTree.XMLParser` 构造器不再接受 *html* 参数。 它从来没有任何作用并在 "
"Python 3.4 中已被弃用。 所有其他形参现在都是 :ref:`仅限关键字参数 <keyword-only_parameter>`。 （由 "
"Serhiy Storchaka 在 :issue:`29209` 中贡献。）"

#: ../../whatsnew/3.8.rst:1789
msgid ""
"Removed the ``doctype()`` method of "
":class:`~xml.etree.ElementTree.XMLParser`. (Contributed by Serhiy Storchaka "
"in :issue:`29209`.)"
msgstr ""
":class:`~xml.etree.ElementTree.XMLParser` 的 ``doctype()`` 方法已被移除。 （由 Serhiy "
"Storchaka 在 :issue:`29209` 中贡献。）"

#: ../../whatsnew/3.8.rst:1792
msgid ""
"\"unicode_internal\" codec is removed. (Contributed by Inada Naoki in "
":issue:`36297`.)"
msgstr "\"unicode_internal\" 编解码器已被移除。 （由 Inada Naoki 在 :issue:`36297` 中贡献。）"

#: ../../whatsnew/3.8.rst:1795
msgid ""
"The ``Cache`` and ``Statement`` objects of the :mod:`sqlite3` module are not"
" exposed to the user. (Contributed by Aviv Palivoda in :issue:`30262`.)"
msgstr ""
":mod:`sqlite3` 模块的 ``Cache`` 和 ``Statement`` 对象已不再公开给用户。 （由 Aviv Palivoda 在 "
":issue:`30262` 中贡献。）"

#: ../../whatsnew/3.8.rst:1799
msgid ""
"The ``bufsize`` keyword argument of :func:`fileinput.input` and "
":func:`fileinput.FileInput` which was ignored and deprecated since Python "
"3.6 has been removed. :issue:`36952` (Contributed by Matthias Bussonnier.)"
msgstr ""
":func:`fileinput.input` 和 :func:`fileinput.FileInput` 中自 Python 3.6 "
"起就已被忽略并弃用的 ``bufsize`` 关键字参数已被移除。 由 Matthias Bussonnier 在 :issue:`36952` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1803
msgid ""
"The functions :func:`sys.set_coroutine_wrapper` and "
":func:`sys.get_coroutine_wrapper` deprecated in Python 3.7 have been "
"removed; :issue:`36933` (Contributed by Matthias Bussonnier.)"
msgstr ""
"在 Python 3.7 中弃用的函数 :func:`sys.set_coroutine_wrapper` 和 "
":func:`sys.get_coroutine_wrapper` 已被移除。 （由 Matthias Bussonnier 在 "
":issue:`36933` 中贡献。）"

#: ../../whatsnew/3.8.rst:1809
msgid "Porting to Python 3.8"
msgstr "移植到 Python 3.8"

#: ../../whatsnew/3.8.rst:1811
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.8.rst:1816
msgid "Changes in Python behavior"
msgstr "Python 行为的改变"

#: ../../whatsnew/3.8.rst:1818
msgid ""
"Yield expressions (both ``yield`` and ``yield from`` clauses) are now "
"disallowed in comprehensions and generator expressions (aside from the "
"iterable expression in the leftmost :keyword:`!for` clause). (Contributed by"
" Serhiy Storchaka in :issue:`10544`.)"
msgstr ""
"yield 表达式（包括 ``yield`` 和 ``yield from`` 子句）现在不允许在推导式和生成器表达式中使用（但最左边的 "
":keyword:`!for` 子句中的可迭代对象表达式除外）。 （由 Serhiy Storchaka 在 :issue:`10544` 中贡献。）"

#: ../../whatsnew/3.8.rst:1823
msgid ""
"The compiler now produces a :exc:`SyntaxWarning` when identity checks "
"(``is`` and ``is not``) are used with certain types of literals (e.g. "
"strings, numbers).  These can often work by accident in CPython, but are not"
" guaranteed by the language spec.  The warning advises users to use equality"
" tests (``==`` and ``!=``) instead. (Contributed by Serhiy Storchaka in "
":issue:`34850`.)"
msgstr ""
"当标识号检测 (``is`` 和 ``is not``) 与特定类型的字面值 (例如字符串和数字) 一同使用时编译器现在会产生 "
":exc:`SyntaxWarning`。  这在 CPython 中通常是可行的，但并不被语言定义所保证。 该警告会建议用户改用相等性检测 "
"(``==`` and ``!=``)。 （由 Serhiy Storchaka 在 :issue:`34850` 中贡献。）"

#: ../../whatsnew/3.8.rst:1830
msgid ""
"The CPython interpreter can swallow exceptions in some circumstances. In "
"Python 3.8 this happens in fewer cases.  In particular, exceptions raised "
"when getting the attribute from the type dictionary are no longer ignored. "
"(Contributed by Serhiy Storchaka in :issue:`35459`.)"
msgstr ""
"CPython 解释器在某些情况下可以忽略异常。 在 Python 3.8 中这种情况会更少发生。 特别地，从类型字典获取属性时引发的异常不会再被忽略。"
" （由 Serhiy Storchaka 在 :issue:`35459` 中贡献。）"

#: ../../whatsnew/3.8.rst:1835
msgid ""
"Removed ``__str__`` implementations from builtin types :class:`bool`, "
":class:`int`, :class:`float`, :class:`complex` and few classes from the "
"standard library.  They now inherit ``__str__()`` from :class:`object`. As "
"result, defining the ``__repr__()`` method in the subclass of these classes "
"will affect their string representation. (Contributed by Serhiy Storchaka in"
" :issue:`36793`.)"
msgstr ""
"从内置类型 :class:`bool`, :class:`int`, :class:`float`, :class:`complex` "
"和标准库的一些类中移除了 ``__str__`` 实现。 它们现在会从 :class:`object` 继承 ``__str__()``。 "
"作为结果，在这些类的子类中定义 ``__repr__()`` 方法将会影响它们的字符串表示。 （由 Serhiy Storchaka 在 "
":issue:`36793` 中贡献。）"

#: ../../whatsnew/3.8.rst:1842
msgid ""
"On AIX, :data:`sys.platform` doesn't contain the major version anymore. It "
"is always ``'aix'``, instead of ``'aix3'`` .. ``'aix7'``.  Since older "
"Python versions include the version number, so it is recommended to always "
"use ``sys.platform.startswith('aix')``. (Contributed by M. Felt in "
":issue:`36588`.)"
msgstr ""
"在 AIX 上，:data:`sys.platform` 将不再包含主要版本号。 它将总是 ``'aix'``，而不是 ``'aix3'`` .. "
"``'aix7'``。 由于较旧的 Python 版本会包含版本号，因此推荐总是使用 "
"``sys.platform.startswith('aix')``。 （由 M. Felt 在 :issue:`36588` 中贡献。）"

#: ../../whatsnew/3.8.rst:1848
msgid ""
":c:func:`!PyEval_AcquireLock` and :c:func:`!PyEval_AcquireThread` now "
"terminate the current thread if called while the interpreter is finalizing, "
"making them consistent with :c:func:`PyEval_RestoreThread`, "
":c:func:`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`. If this "
"behavior is not desired, guard the call by checking "
":c:func:`!_Py_IsFinalizing` or :func:`sys.is_finalizing`. (Contributed by "
"Joannah Nanjekye in :issue:`36475`.)"
msgstr ""
"现在 :c:func:`!PyEval_AcquireLock` 和 :c:func:`!PyEval_AcquireThread` "
"当解释器正在最终化时被调用将会终结当前线程，以使它们与 :c:func:`PyEval_RestoreThread`, "
":c:func:`Py_END_ALLOW_THREADS` 和 :c:func:`PyGILState_Ensure` 保持一致。 "
"如果不想要此种行为，请通过检测 :c:func:`!_Py_IsFinalizing` 或 :func:`sys.is_finalizing` "
"来保护该调用。 （由 Joannah Nanjekye 在 :issue:`36475` 中贡献。）"

#: ../../whatsnew/3.8.rst:1858 ../../whatsnew/3.8.rst:2321
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.8.rst:1860
msgid ""
"The :func:`os.getcwdb` function now uses the UTF-8 encoding on Windows, "
"rather than the ANSI code page: see :pep:`529` for the rationale. The "
"function is no longer deprecated on Windows. (Contributed by Victor Stinner "
"in :issue:`37412`.)"
msgstr ""
"在 Windows 上 :func:`os.getcwdb` 函数现在会使用 UTF-8 编码格式而不是 ANSI 代码页：请参看 :pep:`529`"
" 了解具体原因。 该函数在 Windows 上不再被弃用。 （由 Victor Stinner 在 :issue:`37412` 中贡献。）"

#: ../../whatsnew/3.8.rst:1865
msgid ""
":class:`subprocess.Popen` can now use :func:`os.posix_spawn` in some cases "
"for better performance. On Windows Subsystem for Linux and QEMU User "
"Emulation, the :class:`Popen` constructor using :func:`os.posix_spawn` no "
"longer raises an exception on errors like \"missing program\".  Instead the "
"child process fails with a non-zero :attr:`~Popen.returncode`. (Contributed "
"by Joannah Nanjekye and Victor Stinner in :issue:`35537`.)"
msgstr ""
"现在 :class:`subprocess.Popen` 在某些情况下会使用 :func:`os.posix_spawn` 以获得更好的性能。 在适用于"
" Linux 的 Windows 子系统和 QEMU 用户模拟器上，使用 :func:`os.posix_spawn` 的 :class:`Popen`"
" 构造器不会再因为“找不到程序”这样的错误引发异常。 而是让子进程失败并返回一个非零的 :attr:`~Popen.returncode`。 （由 "
"Joannah Nanjekye 和 Victor Stinner 在 :issue:`35537` 中贡献。）"

#: ../../whatsnew/3.8.rst:1872
msgid ""
"The *preexec_fn* argument of * :class:`subprocess.Popen` is no longer "
"compatible with subinterpreters. The use of the parameter in a "
"subinterpreter now raises :exc:`RuntimeError`. (Contributed by Eric Snow in "
":issue:`34651`, modified by Christian Heimes in :issue:`37951`.)"
msgstr ""
"* :class:`subprocess.Popen` 的 *preexec_fn* 参数已不再兼容子解释器。 在子解释器中使用该形参现在将引发 "
":exc:`RuntimeError`。 （由 Eric Snow 在 :issue:`34651` 中贡献，由 Christian Heimes 在 "
":issue:`37951` 中修改。）"

#: ../../whatsnew/3.8.rst:1878
msgid ""
"The :meth:`imap.IMAP4.logout` method no longer silently ignores arbitrary "
"exceptions. (Contributed by Victor Stinner in :issue:`36348`.)"
msgstr ""
":meth:`imap.IMAP4.logout` 方法不会再静默地忽略任意异常。 （由 Victor Stinner 在 :issue:`36348`"
" 中贡献。）"

#: ../../whatsnew/3.8.rst:1886
msgid ""
"The :func:`statistics.mode` function no longer raises an exception when "
"given multimodal data.  Instead, it returns the first mode encountered in "
"the input data.  (Contributed by Raymond Hettinger in :issue:`35892`.)"
msgstr ""
"当传入多模数据时 :func:`statistics.mode` 函数不会再引发异常。 它将改为返回在输入数据中遇到的第一个模式。 （由 Raymond"
" Hettinger 在 :issue:`35892` 中贡献。）"

#: ../../whatsnew/3.8.rst:1891
msgid ""
"The :meth:`~tkinter.ttk.Treeview.selection` method of the "
":class:`tkinter.ttk.Treeview` class no longer takes arguments.  Using it "
"with arguments for changing the selection was deprecated in Python 3.6.  Use"
" specialized methods like :meth:`~tkinter.ttk.Treeview.selection_set` for "
"changing the selection.  (Contributed by Serhiy Storchaka in "
":issue:`31508`.)"
msgstr ""
":class:`tkinter.ttk.Treeview` 类的 :meth:`~tkinter.ttk.Treeview.selection` "
"方法不再接受参数。 带参数调用该方法来改变选择在 Python 3.6 中已弃用。 请使用专门方法例如 "
":meth:`~tkinter.ttk.Treeview.selection_set` 来改变选择。 （由 Serhiy Storchaka 在 "
":issue:`31508` 中贡献。）"

#: ../../whatsnew/3.8.rst:1897
msgid ""
"The :meth:`writexml`, :meth:`toxml` and :meth:`toprettyxml` methods of "
":mod:`xml.dom.minidom`, and the :meth:`write` method of :mod:`xml.etree`, "
"now preserve the attribute order specified by the user. (Contributed by "
"Diego Rojas and Raymond Hettinger in :issue:`34160`.)"
msgstr ""
":mod:`xml.dom.minidom` 的 :meth:`writexml`, :meth:`toxml` 和 "
":meth:`toprettyxml` 方法以及 :mod:`xml.etree` 的 :meth:`write` 方法现在会保留用户指定的属性顺序。 "
"（由 Diego Rojas 和 Raymond Hettinger 在 :issue:`34160` 中贡献。）"

#: ../../whatsnew/3.8.rst:1902
msgid ""
"A :mod:`dbm.dumb` database opened with flags ``'r'`` is now read-only. "
":func:`dbm.dumb.open` with flags ``'r'`` and ``'w'`` no longer creates a "
"database if it does not exist. (Contributed by Serhiy Storchaka in "
":issue:`32749`.)"
msgstr ""
"附带 ``'r'`` 旗标打开的 :mod:`dbm.dumb` 数据库现在将是只读的。 如果数据库不存在，附带 ``'r'`` 和 ``'w'`` "
"旗标的 :func:`dbm.dumb.open` 不会再创建数据库。 （由 Serhiy Storchaka 在 :issue:`32749` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1907
msgid ""
"The ``doctype()`` method defined in a subclass of "
":class:`~xml.etree.ElementTree.XMLParser` will no longer be called and will "
"emit a :exc:`RuntimeWarning` instead of a :exc:`DeprecationWarning`. Define "
"the :meth:`doctype() <xml.etree.ElementTree.TreeBuilder.doctype>` method on "
"a target for handling an XML doctype declaration. (Contributed by Serhiy "
"Storchaka in :issue:`29209`.)"
msgstr ""
"在 :class:`~xml.etree.ElementTree.XMLParser` 的子类中定义的 ``doctype()`` "
"方法将不会再被调用，并将导致发出 :exc:`RuntimeWarning` 而不是 :exc:`DeprecationWarning`。 "
"请在目标上定义 :meth:`doctype() <xml.etree.ElementTree.TreeBuilder.doctype>` 方法来处理 "
"XML doctype 声明。 （由 Serhiy Storchaka 在 :issue:`29209` 中贡献。）"

#: ../../whatsnew/3.8.rst:1914
msgid ""
"A :exc:`RuntimeError` is now raised when the custom metaclass doesn't "
"provide the ``__classcell__`` entry in the namespace passed to "
"``type.__new__``.  A :exc:`DeprecationWarning` was emitted in Python 3.6--"
"3.7.  (Contributed by Serhiy Storchaka in :issue:`23722`.)"
msgstr ""
"现在当自定义元类未在传给 ``type.__new__`` 的命名空间中提供 ``__classcell__`` 入口时将引发 "
":exc:`RuntimeError`。 在 Python 3.6--3.7 中是则是引发 :exc:`DeprecationWarning`。 （由 "
"Serhiy Storchaka 在 :issue:`23722` 中贡献。）"

#: ../../whatsnew/3.8.rst:1919
msgid ""
"The :class:`cProfile.Profile` class can now be used as a context manager. "
"(Contributed by Scott Sanderson in :issue:`29235`.)"
msgstr ""
":class:`cProfile.Profile` 类现在可被用作上下文管理器。 （由 Scott Sanderson 在 :issue:`29235`"
" 中贡献。）"

#: ../../whatsnew/3.8.rst:1922
msgid ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` and :func:`shutil.move` use platform-specific "
"\"fast-copy\" syscalls (see :ref:`shutil-platform-dependent-efficient-copy-"
"operations` section)."
msgstr ""
":func:`shutil.copyfile`, :func:`shutil.copy`, :func:`shutil.copy2`, "
":func:`shutil.copytree` 和 :func:`shutil.move` 会使用平台专属的 \"fast-copy\" 系统调用（参见"
" :ref:`shutil-platform-dependent-efficient-copy-operations` 一节）。"

#: ../../whatsnew/3.8.rst:1927
msgid ""
":func:`shutil.copyfile` default buffer size on Windows was changed from 16 "
"KiB to 1 MiB."
msgstr ":func:`shutil.copyfile` 在 Windows 上的默认缓冲区大小从 16 KiB 改为 1 MiB。"

#: ../../whatsnew/3.8.rst:1930
msgid ""
"The ``PyGC_Head`` struct has changed completely.  All code that touched the "
"struct member should be rewritten.  (See :issue:`33597`.)"
msgstr "``PyGC_Head`` 结构已被完全改变。 所有接触到该结构的代码都应当被重写。 （参见 :issue:`33597`。）"

#: ../../whatsnew/3.8.rst:1933
msgid ""
"The :c:type:`PyInterpreterState` struct has been moved into the \"internal\""
" header files (specifically Include/internal/pycore_pystate.h).  An opaque "
"``PyInterpreterState`` is still available as part of the public API (and "
"stable ABI).  The docs indicate that none of the struct's fields are public,"
" so we hope no one has been using them.  However, if you do rely on one or "
"more of those private fields and have no alternative then please open a BPO "
"issue.  We'll work on helping you adjust (possibly including adding accessor"
" functions to the public API).  (See :issue:`35886`.)"
msgstr ""
":c:type:`PyInterpreterState` 结构已被移入 \"internal\" 头文件（特别是 "
"Include/internal/pycore_pystate.h）。 不透明的 ``PyInterpreterState`` 作为仅有 "
"API（以及稳定版 ABI）的一部分仍然可用。 文档指明该结构的任何字段都不是公有的，因此我们希望没人在使用它们。 "
"但是，如果你确实依赖其中某一个或更多个私有字段并且没有其他替代选项，则请开一个 BPO 问题。 我们将尽力帮助你进行调整（可能包括向公有 API "
"添加访问器函数）。 （参见 :issue:`35886`。）"

#: ../../whatsnew/3.8.rst:1943
msgid ""
"The :meth:`mmap.flush() <mmap.mmap.flush>` method now returns ``None`` on "
"success and raises an exception on error under all platforms.  Previously, "
"its behavior was platform-dependent: a nonzero value was returned on "
"success; zero was returned on error under Windows.  A zero value was "
"returned on success; an exception was raised on error under Unix. "
"(Contributed by Berker Peksag in :issue:`2122`.)"
msgstr ""
"现在所有平台下的 :meth:`mmap.flush() <mmap.mmap.flush>` 方法都会在成功时返回 ``None`` "
"并在错误时引发异常。 之前它的行为取决于具体平台： Windows 下会在成功时返回非零值；在失败时返回零。 Unix "
"下会在成功时返回零；在失败时引发错误。 （由 Berker Peksag 在 :issue:`2122` 中贡献。）"

#: ../../whatsnew/3.8.rst:1950
msgid ""
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process external"
" entities by default. (Contributed by Christian Heimes in :issue:`17239`.)"
msgstr ""
":mod:`xml.dom.minidom` 和 :mod:`xml.sax` 模块默认将不再处理外部实体。 （由 Christian Heimes 在"
" :issue:`17239` 中贡献。）"

#: ../../whatsnew/3.8.rst:1954
msgid ""
"Deleting a key from a read-only :mod:`dbm` database (:mod:`dbm.dumb`, "
":mod:`dbm.gnu` or :mod:`dbm.ndbm`) raises :attr:`error` "
"(:exc:`dbm.dumb.error`, :exc:`dbm.gnu.error` or :exc:`dbm.ndbm.error`) "
"instead of :exc:`KeyError`. (Contributed by Xiang Zhang in :issue:`33106`.)"
msgstr ""
"从只读的 :mod:`dbm` 数据库 (:mod:`dbm.dumb`, :mod:`dbm.gnu` 或 :mod:`dbm.ndbm`) "
"删除键将会引发 :attr:`error` (:exc:`dbm.dumb.error`, :exc:`dbm.gnu.error` 或 "
":exc:`dbm.ndbm.error`) 而不是 :exc:`KeyError`。 （由 Xiang Zhang 在 :issue:`33106` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1959
msgid ""
"Simplified AST for literals.  All constants will be represented as "
":class:`ast.Constant` instances.  Instantiating old classes ``Num``, "
"``Str``, ``Bytes``, ``NameConstant`` and ``Ellipsis`` will return an "
"instance of ``Constant``. (Contributed by Serhiy Storchaka in "
":issue:`32892`.)"
msgstr ""
"简化了字面值的 AST。 所有常量将被表示为 :class:`ast.Constant` 的实例。 实例化旧类 ``Num``, ``Str``, "
"``Bytes``, ``NameConstant`` 和 ``Ellipsis`` 都将返回 ``Constant`` 的实例。 （由 Serhiy "
"Storchaka 在 :issue:`32892` 中贡献。）"

#: ../../whatsnew/3.8.rst:1975
msgid ""
"The function :func:`asyncio.wait_for` now correctly waits for cancellation "
"when using an instance of :class:`asyncio.Task`. Previously, upon reaching "
"*timeout*, it was cancelled and immediately returned. (Contributed by Elvis "
"Pranskevichus in :issue:`32751`.)"
msgstr ""
"当使用 :class:`asyncio.Task` 的实例时，函数 :func:`asyncio.wait_for` 现在会正确地等待撤销。 "
"在此之前当达到 *timeout* 时，它会被撤销并立即返回。 （由 Elvis Pranskevichus 在 :issue:`32751` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:1980
msgid ""
"The function :func:`asyncio.BaseTransport.get_extra_info` now returns a safe"
" to use socket object when 'socket' is passed to the *name* parameter. "
"(Contributed by Yury Selivanov in :issue:`37027`.)"
msgstr ""
"当将 'socket' 作为 *name* 形参传入时，函数 :func:`asyncio.BaseTransport.get_extra_info` "
"现在会返回一个可安全使用的套接字对象。 （由 Yury Selivanov 在 :issue:`37027` 中贡献。）"

#: ../../whatsnew/3.8.rst:1984
msgid ":class:`asyncio.BufferedProtocol` has graduated to the stable API."
msgstr ":class:`asyncio.BufferedProtocol` 已经晋级为稳定 API。"

#: ../../whatsnew/3.8.rst:1988
msgid ""
"DLL dependencies for extension modules and DLLs loaded with :mod:`ctypes` on"
" Windows are now resolved more securely. Only the system paths, the "
"directory containing the DLL or PYD file, and directories added with "
":func:`~os.add_dll_directory` are searched for load-time dependencies. "
"Specifically, :envvar:`PATH` and the current working directory are no longer"
" used, and modifications to these will no longer have any effect on normal "
"DLL resolution. If your application relies on these mechanisms, you should "
"check for :func:`~os.add_dll_directory` and if it exists, use it to add your"
" DLLs directory while loading your library. Note that Windows 7 users will "
"need to ensure that Windows Update KB2533623 has been installed (this is "
"also verified by the installer). (Contributed by Steve Dower in "
":issue:`36085`.)"
msgstr ""
"在 Windows 上对扩展模块的 DLL 依赖以及通过 :mod:`ctypes`  加载的 DLL 的解析现在将更为安全。 只有系统路径、包含相信 "
"DLL 或 PYD 文件的路径以及通过 :func:`~os.add_dll_directory` 添加的目录才会被作为加载时依赖的搜索位置。 "
"特别地，:envvar:`PATH` 和当前工作目录将不再被使用，对它们的修改将不再对正常的 DLL 解析产生影响。 "
"如果你的应用依赖于这些机制，你应当先检查 :func:`~os.add_dll_directory`，如果它存在就用它在加载你的库时添加你的 DLL "
"目录。 请注意 Windows 7 用户还需要确保 Windows 更新包 KB2533623 已安装（这一点也会由安装器进行验证）。 （由 Steve"
" Dower 在 :issue:`36085` 中贡献。）"

#: ../../whatsnew/3.8.rst:2001
msgid ""
"The header files and functions related to pgen have been removed after its "
"replacement by a pure Python implementation. (Contributed by Pablo Galindo "
"in :issue:`36623`.)"
msgstr ""
"关联到 pgen 的头文件和函数在其被纯 Python 实现取代后已被移除。 （由 Pablo Galindo 在 :issue:`36623` "
"中贡献。）"

#: ../../whatsnew/3.8.rst:2005
msgid ""
":class:`types.CodeType` has a new parameter in the second position of the "
"constructor (*posonlyargcount*) to support positional-only arguments defined"
" in :pep:`570`. The first argument (*argcount*) now represents the total "
"number of positional arguments (including positional-only arguments). The "
"new ``replace()`` method of :class:`types.CodeType` can be used to make the "
"code future-proof."
msgstr ""
":class:`types.CodeType` 在构造器的第二个位置新增了一个形参 (*posonlyargcount*) 以支持在 "
":pep:`570` 中定义的仅限位置参数。 第一个参数 (*argcount*) 现在表示位置参数的总数量 (包括仅限位置参数)。 "
":class:`types.CodeType` 中新增的 ``replace()`` 方法可用于让代码支持 future 特性。"

#: ../../whatsnew/3.8.rst:2012
msgid ""
"The parameter ``digestmod`` for :func:`hmac.new` no longer uses the MD5 "
"digest by default."
msgstr ":func:`hmac.new` 的 ``digestmod`` 形参不再默认使用 MD5 摘要。"

#: ../../whatsnew/3.8.rst:2016
msgid "Changes in the C API"
msgstr "C API 的变化"

#: ../../whatsnew/3.8.rst:2018
msgid ""
"The :c:struct:`PyCompilerFlags` structure got a new *cf_feature_version* "
"field. It should be initialized to ``PY_MINOR_VERSION``. The field is "
"ignored by default, and is used if and only if ``PyCF_ONLY_AST`` flag is set"
" in *cf_flags*. (Contributed by Guido van Rossum in :issue:`35766`.)"
msgstr ""
":c:struct:`PyCompilerFlags` 结构体增加了一个新的 *cf_feature_version* 字段。 它应当被初始化为 "
"``PY_MINOR_VERSION``。 该字段默认会被忽略，当且仅当在 *cf_flags* 中设置了 ``PyCF_ONLY_AST`` "
"旗标时才会被使用。 （由 Guido van Rossum 在 :issue:`35766` 中贡献。）"

#: ../../whatsnew/3.8.rst:2024
msgid ""
"The :c:func:`!PyEval_ReInitThreads` function has been removed from the C "
"API. It should not be called explicitly: use :c:func:`PyOS_AfterFork_Child` "
"instead. (Contributed by Victor Stinner in :issue:`36728`.)"
msgstr ""
":c:func:`!PyEval_ReInitThreads` 函数已被 C API 中移除。 它不应被显式地调用：请改用 "
":c:func:`PyOS_AfterFork_Child`。 （由 Victor Stinner 在 :issue:`36728` 中贡献。）"

#: ../../whatsnew/3.8.rst:2029
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android "
"and Cygwin. When Python is embedded, ``libpython`` must not be loaded with "
"``RTLD_LOCAL``, but ``RTLD_GLOBAL`` instead. Previously, using "
"``RTLD_LOCAL``, it was already not possible to load C extensions which were "
"not linked to ``libpython``, like C extensions of the standard library built"
" by the ``*shared*`` section of ``Modules/Setup``. (Contributed by Victor "
"Stinner in :issue:`21536`.)"
msgstr ""
"在 Unix 上，C 扩展不会再被链接到 libpython，但 Android 和 Cygwin 例外。 当 Python "
"被嵌入时，``libpython`` 不可使用 ``RTLD_LOCAL`` 加载，而要改用 ``RTLD_GLOBAL``。 之前使用 "
"``RTLD_LOCAL`` 已经不可能加载未链接到 ``libpython`` 的 C 扩展了，例如通过 ``Modules/Setup`` 的 "
"``*shared*`` 部分构建的标准库 C 扩展。 （由 Victor Stinner 在 :issue:`21536` 中贡献。）"

#: ../../whatsnew/3.8.rst:2037
msgid ""
"Use of ``#`` variants of formats in parsing or building value (e.g. "
":c:func:`PyArg_ParseTuple`, :c:func:`Py_BuildValue`, "
":c:func:`PyObject_CallFunction`, etc.) without ``PY_SSIZE_T_CLEAN`` defined "
"raises ``DeprecationWarning`` now. It will be removed in 3.10 or 4.0.  Read "
":ref:`arg-parsing` for detail. (Contributed by Inada Naoki in "
":issue:`36381`.)"
msgstr ""
"在解析或构建值时（例如 :c:func:`PyArg_ParseTuple`, :c:func:`Py_BuildValue`, "
":c:func:`PyObject_CallFunction` 等等）使用形如 ``#`` 的格式而不定义 ``PY_SSIZE_T_CLEAN`` "
"现在将会引发 ``DeprecationWarning``。 它将在 3.10 或 4.0 中被移除。 请参阅 :ref:`arg-parsing` "
"了解详情。 （由 Inada Naoki 在 :issue:`36381` 中贡献。）"

#: ../../whatsnew/3.8.rst:2043
msgid ""
"Instances of heap-allocated types (such as those created with "
":c:func:`PyType_FromSpec`) hold a reference to their type object. Increasing"
" the reference count of these type objects has been moved from "
":c:func:`PyType_GenericAlloc` to the more low-level functions, "
":c:func:`PyObject_Init` and :c:func:`PyObject_INIT`. This makes types "
"created through :c:func:`PyType_FromSpec` behave like other classes in "
"managed code."
msgstr ""
"堆分配类型的实例（例如使用 :c:func:`PyType_FromSpec` 创建的实例）会保存一个对其类型对象的引用。 "
"提升这些类型对象引用计数的操作已从 :c:func:`PyType_GenericAlloc` 移至更低层级的函数 "
":c:func:`PyObject_Init` 和 :c:func:`PyObject_INIT`。 这使用通过This makes types "
"created through :c:func:`PyType_FromSpec` 所创建类型的行为与管理代码中的其他类保持一致。"

#: ../../whatsnew/3.8.rst:2051
msgid ":ref:`Statically allocated types <static-types>` are not affected."
msgstr ":ref:`静态分配类型 <static-types>` 将不受影响。"

#: ../../whatsnew/3.8.rst:2053
msgid ""
"For the vast majority of cases, there should be no side effect. However, "
"types that manually increase the reference count after allocating an "
"instance (perhaps to work around the bug) may now become immortal. To avoid "
"this, these classes need to call Py_DECREF on the type object during "
"instance deallocation."
msgstr ""
"在大部分情况下，这应该都不会有附带影响。 但是，在分配实例后手动提升引用计数的类型（也许是为了绕过漏洞）现在可能永远不会被销毁。 "
"要避免这种情况，这些类需要在实例撤销分配期间在类型对象上调用 Py_DECREF。"

#: ../../whatsnew/3.8.rst:2059
msgid ""
"To correctly port these types into 3.8, please apply the following changes:"
msgstr "要正确地将这些类型移植到 3.8，请应用以下修改："

#: ../../whatsnew/3.8.rst:2062
msgid ""
"Remove :c:macro:`Py_INCREF` on the type object after allocating an instance "
"- if any. This may happen after calling :c:macro:`PyObject_New`, "
":c:macro:`PyObject_NewVar`, :c:func:`PyObject_GC_New`, "
":c:func:`PyObject_GC_NewVar`, or any other custom allocator that uses "
":c:func:`PyObject_Init` or :c:func:`PyObject_INIT`."
msgstr ""
"在分配实例之后在类型对象上移除 :c:macro:`Py_INCREF` —— 如果有的话。 这可能发生在调用 "
":c:macro:`PyObject_New`, :c:macro:`PyObject_NewVar`, "
":c:func:`PyObject_GC_New`, :c:func:`PyObject_GC_NewVar` 或任何其他使用 "
":c:func:`PyObject_Init` 或 :c:func:`PyObject_INIT` 的自定义分配器之后。"

#: ../../whatsnew/3.8.rst:2069 ../../whatsnew/3.8.rst:2088
#: ../../whatsnew/3.8.rst:2107
msgid "Example:"
msgstr "示例:"

#: ../../whatsnew/3.8.rst:2071
msgid ""
"static foo_struct *\n"
"foo_new(PyObject *type) {\n"
"    foo_struct *foo = PyObject_GC_New(foo_struct, (PyTypeObject *) type);\n"
"    if (foo == NULL)\n"
"        return NULL;\n"
"#if PY_VERSION_HEX < 0x03080000\n"
"    // Workaround for Python issue 35810; no longer necessary in Python 3.8\n"
"    PY_INCREF(type)\n"
"#endif\n"
"    return foo;\n"
"}"
msgstr ""
"static foo_struct *\n"
"foo_new(PyObject *type) {\n"
"    foo_struct *foo = PyObject_GC_New(foo_struct, (PyTypeObject *) type);\n"
"    if (foo == NULL)\n"
"        return NULL;\n"
"#if PY_VERSION_HEX < 0x03080000\n"
"    // Workaround for Python issue 35810; no longer necessary in Python 3.8\n"
"    PY_INCREF(type)\n"
"#endif\n"
"    return foo;\n"
"}"

#: ../../whatsnew/3.8.rst:2085
msgid ""
"Ensure that all custom ``tp_dealloc`` functions of heap-allocated types "
"decrease the type's reference count."
msgstr "确保所有堆分配类型的自定义 ``tp_dealloc`` 函数会减少类型的引用计数。"

#: ../../whatsnew/3.8.rst:2090
msgid ""
"static void\n"
"foo_dealloc(foo_struct *instance) {\n"
"    PyObject *type = Py_TYPE(instance);\n"
"    PyObject_GC_Del(instance);\n"
"#if PY_VERSION_HEX >= 0x03080000\n"
"    // This was not needed before Python 3.8 (Python issue 35810)\n"
"    Py_DECREF(type);\n"
"#endif\n"
"}"
msgstr ""
"static void\n"
"foo_dealloc(foo_struct *instance) {\n"
"    PyObject *type = Py_TYPE(instance);\n"
"    PyObject_GC_Del(instance);\n"
"#if PY_VERSION_HEX >= 0x03080000\n"
"    // This was not needed before Python 3.8 (Python issue 35810)\n"
"    Py_DECREF(type);\n"
"#endif\n"
"}"

#: ../../whatsnew/3.8.rst:2102
msgid "(Contributed by Eddie Elizondo in :issue:`35810`.)"
msgstr "（由 Eddie Elizondo 在 :issue:`35810` 中贡献。）"

#: ../../whatsnew/3.8.rst:2104
msgid ""
"The :c:macro:`Py_DEPRECATED()` macro has been implemented for MSVC. The "
"macro now must be placed before the symbol name."
msgstr ":c:macro:`Py_DEPRECATED()` 宏已经针对 MSVC 实现。 这个宏现在必须放在符号名称之前。"

#: ../../whatsnew/3.8.rst:2109
msgid "Py_DEPRECATED(3.8) PyAPI_FUNC(int) Py_OldFunction(void);"
msgstr "Py_DEPRECATED(3.8) PyAPI_FUNC(int) Py_OldFunction(void);"

#: ../../whatsnew/3.8.rst:2113
msgid "(Contributed by Zackery Spytz in :issue:`33407`.)"
msgstr "（由 Zackery Spytz 在 :issue:`33407` 中贡献。）"

#: ../../whatsnew/3.8.rst:2115
msgid ""
"The interpreter does not pretend to support binary compatibility of "
"extension types across feature releases, anymore.  A :c:type:`PyTypeObject` "
"exported by a third-party extension module is supposed to have all the slots"
" expected in the current Python version, including "
":c:member:`~PyTypeObject.tp_finalize` (:c:macro:`Py_TPFLAGS_HAVE_FINALIZE` "
"is not checked anymore before reading "
":c:member:`~PyTypeObject.tp_finalize`)."
msgstr ""
"解释器将不再假装支持跨发布版本的扩展类型二进制兼容性。 由第三方扩展模块所导出的 :c:type:`PyTypeObject` 应当具有当前 "
"Python 版本所要求的所有槽位，包括 :c:member:`~PyTypeObject.tp_finalize` "
"(:c:macro:`Py_TPFLAGS_HAVE_FINALIZE` 不再会在读取 "
":c:member:`~PyTypeObject.tp_finalize` 之前被检查)。"

#: ../../whatsnew/3.8.rst:2122
msgid "(Contributed by Antoine Pitrou in :issue:`32388`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`32388` 中贡献。）"

#: ../../whatsnew/3.8.rst:2124
msgid ""
"The functions :c:func:`!PyNode_AddChild` and :c:func:`!PyParser_AddToken` "
"now accept two additional ``int`` arguments *end_lineno* and "
"*end_col_offset*."
msgstr ""
"函数 :c:func:`!PyNode_AddChild` 和 :c:func:`!PyParser_AddToken` 现在接受两个额外的 "
"``int`` 参数 *end_lineno* 和 *end_col_offset*。"

#: ../../whatsnew/3.8.rst:2127
msgid ""
"The :file:`libpython38.a` file to allow MinGW tools to link directly against"
" :file:`python38.dll` is no longer included in the regular Windows "
"distribution. If you require this file, it may be generated with the "
"``gendef`` and ``dlltool`` tools, which are part of the MinGW binutils "
"package:"
msgstr ""
"允许 MinGW 工具直接链接到 :file:`python38.dll` 的 :file:`libpython38.a` 文件已不再包含于标准的 "
"Windows 分发包中。 如果你需要此文件，可使用 ``gendef`` 和 ``dlltool`` 工具来生成它，这些工具是 MinGW "
"binutils 包的一部分："

#: ../../whatsnew/3.8.rst:2132
msgid ""
"gendef - python38.dll > tmp.def\n"
"dlltool --dllname python38.dll --def tmp.def --output-lib libpython38.a"
msgstr ""
"gendef - python38.dll > tmp.def\n"
"dlltool --dllname python38.dll --def tmp.def --output-lib libpython38.a"

#: ../../whatsnew/3.8.rst:2137
msgid ""
"The location of an installed :file:`pythonXY.dll` will depend on the "
"installation options and the version and language of Windows. See "
":ref:`using-on-windows` for more information. The resulting library should "
"be placed in the same directory as :file:`pythonXY.lib`, which is generally "
"the :file:`libs` directory under your Python installation."
msgstr ""
"已安装的 :file:`pythonXY.dll` 所在位置将取决于安装选项以及 Windows 的版本和语言。 请参阅 :ref:`using-on-"
"windows` 了解更多信息。 该结果库应当放在与 :file:`pythonXY.lib` 相同的目录下，这通常是你的 Python 安装路径下的 "
":file:`libs` 目录。"

#: ../../whatsnew/3.8.rst:2143
msgid "(Contributed by Steve Dower in :issue:`37351`.)"
msgstr "（由 Steve Dower 在 :issue:`37351` 中贡献。）"

#: ../../whatsnew/3.8.rst:2147
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.8.rst:2149
msgid ""
"The interpreter loop  has been simplified by moving the logic of unrolling "
"the stack of blocks into the compiler.  The compiler emits now explicit "
"instructions for adjusting the stack of values and calling the cleaning-up "
"code for :keyword:`break`, :keyword:`continue` and :keyword:`return`."
msgstr ""
"解释器循环已通过将块堆栈展开逻辑移入编译器获得了简化。 编译器现在会发出显式指令来调整值堆栈并为 :keyword:`break`, "
":keyword:`continue` 和 :keyword:`return` 调用清除代码。"

#: ../../whatsnew/3.8.rst:2155
msgid ""
"Removed opcodes :opcode:`!BREAK_LOOP`, :opcode:`!CONTINUE_LOOP`, "
":opcode:`!SETUP_LOOP` and :opcode:`!SETUP_EXCEPT`.  Added new opcodes "
":opcode:`!ROT_FOUR`, :opcode:`!BEGIN_FINALLY`, :opcode:`!CALL_FINALLY` and "
":opcode:`!POP_FINALLY`.  Changed the behavior of :opcode:`!END_FINALLY` and "
":opcode:`!WITH_CLEANUP_START`."
msgstr ""
"移除了操作码 :opcode:`!BREAK_LOOP`, :opcode:`!CONTINUE_LOOP`, "
":opcode:`!SETUP_LOOP` 和 :opcode:`!SETUP_EXCEPT`。 添加了新的操作码 "
":opcode:`!ROT_FOUR`, :opcode:`!BEGIN_FINALLY`, :opcode:`!CALL_FINALLY` 和 "
":opcode:`!POP_FINALLY`。 修改了 :opcode:`!END_FINALLY` 和 "
":opcode:`!WITH_CLEANUP_START` 的行为。"

#: ../../whatsnew/3.8.rst:2161
msgid ""
"(Contributed by Mark Shannon, Antoine Pitrou and Serhiy Storchaka in "
":issue:`17611`.)"
msgstr ""
"（由 Mark Shannon, Antoine Pitrou 和 Serhiy Storchaka 在 :issue:`17611` 中贡献。）"

#: ../../whatsnew/3.8.rst:2164
msgid ""
"Added new opcode :opcode:`END_ASYNC_FOR` for handling exceptions raised when"
" awaiting a next item in an :keyword:`async for` loop. (Contributed by "
"Serhiy Storchaka in :issue:`33041`.)"
msgstr ""
"添加了新的操作码 :opcode:`END_ASYNC_FOR` 用于处理当等待 :keyword:`async for` 循环的下一项时引发的异常。 "
"（由 Serhiy Storchaka 在 :issue:`33041` 中贡献。）"

#: ../../whatsnew/3.8.rst:2168
msgid ""
"The :opcode:`MAP_ADD` now expects the value as the first element in the "
"stack and the key as the second element. This change was made so the key is "
"always evaluated before the value in dictionary comprehensions, as proposed "
"by :pep:`572`. (Contributed by Jörn Heissler in :issue:`35224`.)"
msgstr ""
":opcode:`MAP_ADD` 现在会预期值为栈的第一个元素而键为第二个元素。 作出此改变以使得字典推导式能如 :pep:`572` "
"所提议的那样，键总是会在值之前被求值。 （由 Jörn Heissler 在 :issue:`35224` 中贡献。）"

#: ../../whatsnew/3.8.rst:2175
msgid "Demos and Tools"
msgstr "演示和工具"

#: ../../whatsnew/3.8.rst:2177
msgid ""
"Added a benchmark script for timing various ways to access variables: "
"``Tools/scripts/var_access_benchmark.py``. (Contributed by Raymond Hettinger"
" in :issue:`35884`.)"
msgstr ""
"添加了一个检测脚本用于对访问变量的不同方式进行计时: ``Tools/scripts/var_access_benchmark.py``。 （由 "
"Raymond Hettinger 在 :issue:`35884` 中贡献。）"

#: ../../whatsnew/3.8.rst:2181
msgid "Here's a summary of performance improvements since Python 3.3:"
msgstr "以下是自 Python 3.3 以来性能提升情况的总结:"

#: ../../whatsnew/3.8.rst:2183
msgid ""
"Python version                       3.3     3.4     3.5     3.6     3.7     3.8\n"
"--------------                       ---     ---     ---     ---     ---     ---\n"
"\n"
"Variable and attribute read access:\n"
"    read_local                       4.0     7.1     7.1     5.4     5.1     3.9\n"
"    read_nonlocal                    5.3     7.1     8.1     5.8     5.4     4.4\n"
"    read_global                     13.3    15.5    19.0    14.3    13.6     7.6\n"
"    read_builtin                    20.0    21.1    21.6    18.5    19.0     7.5\n"
"    read_classvar_from_class        20.5    25.6    26.5    20.7    19.5    18.4\n"
"    read_classvar_from_instance     18.5    22.8    23.5    18.8    17.1    16.4\n"
"    read_instancevar                26.8    32.4    33.1    28.0    26.3    25.4\n"
"    read_instancevar_slots          23.7    27.8    31.3    20.8    20.8    20.2\n"
"    read_namedtuple                 68.5    73.8    57.5    45.0    46.8    18.4\n"
"    read_boundmethod                29.8    37.6    37.9    29.6    26.9    27.7\n"
"\n"
"Variable and attribute write access:\n"
"    write_local                      4.6     8.7     9.3     5.5     5.3     4.3\n"
"    write_nonlocal                   7.3    10.5    11.1     5.6     5.5     4.7\n"
"    write_global                    15.9    19.7    21.2    18.0    18.0    15.8\n"
"    write_classvar                  81.9    92.9    96.0   104.6   102.1    39.2\n"
"    write_instancevar               36.4    44.6    45.8    40.0    38.9    35.5\n"
"    write_instancevar_slots         28.7    35.6    36.1    27.3    26.6    25.7\n"
"\n"
"Data structure read access:\n"
"    read_list                       19.2    24.2    24.5    20.8    20.8    19.0\n"
"    read_deque                      19.9    24.7    25.5    20.2    20.6    19.8\n"
"    read_dict                       19.7    24.3    25.7    22.3    23.0    21.0\n"
"    read_strdict                    17.9    22.6    24.3    19.5    21.2    18.9\n"
"\n"
"Data structure write access:\n"
"    write_list                      21.2    27.1    28.5    22.5    21.6    20.0\n"
"    write_deque                     23.8    28.7    30.1    22.7    21.8    23.5\n"
"    write_dict                      25.9    31.4    33.3    29.3    29.2    24.7\n"
"    write_strdict                   22.9    28.4    29.9    27.5    25.2    23.1\n"
"\n"
"Stack (or queue) operations:\n"
"    list_append_pop                144.2    93.4   112.7    75.4    74.2    50.8\n"
"    deque_append_pop                30.4    43.5    57.0    49.4    49.2    42.5\n"
"    deque_append_popleft            30.8    43.7    57.3    49.7    49.7    42.8\n"
"\n"
"Timing loop:\n"
"    loop_overhead                    0.3     0.5     0.6     0.4     0.3     0.3"
msgstr ""
"Python version                       3.3     3.4     3.5     3.6     3.7     3.8\n"
"--------------                       ---     ---     ---     ---     ---     ---\n"
"\n"
"Variable and attribute read access:\n"
"    read_local                       4.0     7.1     7.1     5.4     5.1     3.9\n"
"    read_nonlocal                    5.3     7.1     8.1     5.8     5.4     4.4\n"
"    read_global                     13.3    15.5    19.0    14.3    13.6     7.6\n"
"    read_builtin                    20.0    21.1    21.6    18.5    19.0     7.5\n"
"    read_classvar_from_class        20.5    25.6    26.5    20.7    19.5    18.4\n"
"    read_classvar_from_instance     18.5    22.8    23.5    18.8    17.1    16.4\n"
"    read_instancevar                26.8    32.4    33.1    28.0    26.3    25.4\n"
"    read_instancevar_slots          23.7    27.8    31.3    20.8    20.8    20.2\n"
"    read_namedtuple                 68.5    73.8    57.5    45.0    46.8    18.4\n"
"    read_boundmethod                29.8    37.6    37.9    29.6    26.9    27.7\n"
"\n"
"Variable and attribute write access:\n"
"    write_local                      4.6     8.7     9.3     5.5     5.3     4.3\n"
"    write_nonlocal                   7.3    10.5    11.1     5.6     5.5     4.7\n"
"    write_global                    15.9    19.7    21.2    18.0    18.0    15.8\n"
"    write_classvar                  81.9    92.9    96.0   104.6   102.1    39.2\n"
"    write_instancevar               36.4    44.6    45.8    40.0    38.9    35.5\n"
"    write_instancevar_slots         28.7    35.6    36.1    27.3    26.6    25.7\n"
"\n"
"Data structure read access:\n"
"    read_list                       19.2    24.2    24.5    20.8    20.8    19.0\n"
"    read_deque                      19.9    24.7    25.5    20.2    20.6    19.8\n"
"    read_dict                       19.7    24.3    25.7    22.3    23.0    21.0\n"
"    read_strdict                    17.9    22.6    24.3    19.5    21.2    18.9\n"
"\n"
"Data structure write access:\n"
"    write_list                      21.2    27.1    28.5    22.5    21.6    20.0\n"
"    write_deque                     23.8    28.7    30.1    22.7    21.8    23.5\n"
"    write_dict                      25.9    31.4    33.3    29.3    29.2    24.7\n"
"    write_strdict                   22.9    28.4    29.9    27.5    25.2    23.1\n"
"\n"
"Stack (or queue) operations:\n"
"    list_append_pop                144.2    93.4   112.7    75.4    74.2    50.8\n"
"    deque_append_pop                30.4    43.5    57.0    49.4    49.2    42.5\n"
"    deque_append_popleft            30.8    43.7    57.3    49.7    49.7    42.8\n"
"\n"
"Timing loop:\n"
"    loop_overhead                    0.3     0.5     0.6     0.4     0.3     0.3"

#: ../../whatsnew/3.8.rst:2228
msgid ""
"The benchmarks were measured on an `Intel® Core™ i7-4960HQ processor "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-"
"core-i7-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_ running the macOS "
"64-bit builds found at `python.org "
"<https://www.python.org/downloads/macos/>`_. The benchmark script displays "
"timings in nanoseconds."
msgstr ""
"基准测试是在 `Intel® Core™ i7-4960HQ 处理器 "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-"
"core-i7-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_ 上运行从 `python.org "
"<https://www.python.org/downloads/macos/>`_ 获取的 macOS 64 位编译版得到的数据。 "
"该基准测试脚本显示时间以纳秒为单位。"

#: ../../whatsnew/3.8.rst:2237
msgid "Notable changes in Python 3.8.1"
msgstr "Python 3.8.1 中的重要变化"

#: ../../whatsnew/3.8.rst:2239
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint` is no longer supported. This "
"is because of the behavior of the socket option ``SO_REUSEADDR`` in UDP. For"
" more details, see the documentation for "
"``loop.create_datagram_endpoint()``. (Contributed by Kyle Stanley, Antoine "
"Pitrou, and Yury Selivanov in :issue:`37228`.)"
msgstr ""
"出于重要的安全性考量，:meth:`asyncio.loop.create_datagram_endpoint` 的 *reuse_address* "
"形参不再被支持。 这是由 UDP 中的套接字选项 ``SO_REUSEADDR`` 的行为导致的。 更多细节请参阅 "
"``loop.create_datagram_endpoint()`` 的文档。 （由 Kyle Stanley, Antoine Pitrou 和 "
"Yury Selivanov 在 :issue:`37228` 中贡献。。）"

#: ../../whatsnew/3.8.rst:2247
msgid "Notable changes in Python 3.8.2"
msgstr "Python 3.8.2 中的重要变化"

#: ../../whatsnew/3.8.rst:2249
msgid ""
"Fixed a regression with the ``ignore`` callback of :func:`shutil.copytree`. "
"The argument types are now str and List[str] again. (Contributed by Manuel "
"Barkhau and Giampaolo Rodola in :gh:`83571`.)"
msgstr ""
"修复了 :func:`shutil.copytree` 的 ``ignore`` 回调中的回归问题。 现在该参数的类型已改回 str 和 "
"List[str]。 （由 Manuel Barkhau 和 Giampaolo Rodola 在 :gh:`83571` 中贡献。）"

#: ../../whatsnew/3.8.rst:2254
msgid "Notable changes in Python 3.8.3"
msgstr "Python 3.8.3 中的重要变化"

#: ../../whatsnew/3.8.rst:2256
msgid ""
"The constant values of future flags in the :mod:`__future__` module are "
"updated in order to prevent collision with compiler flags. Previously "
"``PyCF_ALLOW_TOP_LEVEL_AWAIT`` was clashing with ``CO_FUTURE_DIVISION``. "
"(Contributed by Batuhan Taskaya in :gh:`83743`)"
msgstr ""
":mod:`__future__` 模块中的 future 旗标常量值已被更新以防止与编译器旗标发生冲突。 在之前版本中 "
"``PyCF_ALLOW_TOP_LEVEL_AWAIT`` 与 ``CO_FUTURE_DIVISION`` 存在冲突。 （由 Batuhan "
"Taskaya 在 :gh:`83743` 中贡献。）"

#: ../../whatsnew/3.8.rst:2262
msgid "Notable changes in Python 3.8.8"
msgstr "Python 3.8.8 中的重要变化"

#: ../../whatsnew/3.8.rst:2264
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and "
":func:`urllib.parse.parse_qsl`.  Due to security concerns, and to conform "
"with newer W3C recommendations, this has been changed to allow only a single"
" separator key, with ``&`` as the default.  This change also affects "
":func:`cgi.parse` and :func:`cgi.parse_multipart` as they use the affected "
"functions internally. For more details, please see their respective "
"documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin"
" in :issue:`42967`.)"
msgstr ""
"早先的 Python 版本允许使用 ``;`` 和 ``&`` 作为 :func:`urllib.parse.parse_qs` 和 "
":func:`urllib.parse.parse_qsl` 中 query 形参的分隔键。 出于安全考虑，也为了遵循更新的 W3C "
"推荐设置，这已被改为只允许单个分隔键，默认为 ``&``。 这一改变还会影响 :func:`cgi.parse` 和 "
":func:`cgi.parse_multipart` 因为它们在内部使用了受影响的函数。 要了解更多细节，请查看它们各自的文档。 （由 Adam "
"Goldschmidt, Senthil Kumaran 和 Ken Jin 在 :issue:`42967` 中贡献。）"

#: ../../whatsnew/3.8.rst:2275
msgid "Notable changes in Python 3.8.9"
msgstr "Python 3.8.9 中的重要变化"

#: ../../whatsnew/3.8.rst:2277
msgid ""
"A security fix alters the :class:`ftplib.FTP` behavior to not trust the IPv4"
" address sent from the remote server when setting up a passive data channel."
"  We reuse the ftp server IP address instead.  For unusual code requiring "
"the old behavior, set a ``trust_server_pasv_ipv4_address`` attribute on your"
" FTP instance to ``True``.  (See :gh:`87451`)"
msgstr ""
"新的安全修正将 :class:`ftplib.FTP` 的行为改成当设置被动数据通道时不信任远程服务器所发送的 IPv4 地址。 我们会改为重用 ftp"
" 服务器的 IP 地址。 对于需要原先的行为的不常见代码，请在你的 FTP 实例上将 "
"``trust_server_pasv_ipv4_address`` 属性设为 ``True``。 （参见 :gh:`87451`。）"

#: ../../whatsnew/3.8.rst:2284 ../../whatsnew/3.8.rst:2304
msgid "Notable changes in Python 3.8.10"
msgstr "Python 3.8.10 中的重要变化"

#: ../../whatsnew/3.8.rst:2287
msgid "macOS 11.0 (Big Sur) and Apple Silicon Mac support"
msgstr "macOS 11.0 (Big Sur) 与 Apple Silicon Mac 支持"

#: ../../whatsnew/3.8.rst:2289
msgid ""
"As of 3.8.10, Python now supports building and running on macOS 11 (Big Sur)"
" and on Apple Silicon Macs (based on the ``ARM64`` architecture). A new "
"universal build variant, ``universal2``, is now available to natively "
"support both ``ARM64`` and ``Intel 64`` in one set of executables. Note that"
" support for \"weaklinking\", building binaries targeted for newer versions "
"of macOS that will also run correctly on older versions by testing at "
"runtime for missing features, is not included in this backport from Python "
"3.9; to support a range of macOS versions, continue to target for and build "
"on the oldest version in the range."
msgstr ""
"对于 3.8.10，Python 现在支持在 macOS 11 (Big Sur) 和 Apple Silicon Mac (基于 ``ARM64`` "
"架构) 上构建和运行。 现在提供了一个新的通用构建形式 ``universal2`` 能够在一组可执行文件上同时原生支持 ``ARM64`` 和 "
"``Intel 64``。 请注意对 \"弱链接\" 的支持，即以较新 macOS "
"版本为目标构建的二进制文件通过在运行时测试缺失特性的方式也能在较旧版本上正确运行，尚未被包括在本次对 Python 3.9 的反向移植中；要支持更多的 "
"macOS 版本，请继续以设定版本区间的最旧版本作为目标进行构建。"

#: ../../whatsnew/3.8.rst:2299
msgid ""
"(Originally contributed by Ronald Oussoren and Lawrence D'Anna in "
":gh:`85272`, with fixes by FX Coudert and Eli Rykoff, and backported to 3.8 "
"by Maxime Bélanger and Ned Deily)"
msgstr ""
"（最初由 Ronald Oussoren 和 Lawrence D'Anna 在 :gh:`85272` 中贡献，由 FX Coudert 和 Eli "
"Rykoff 提供修正，并由 Maxime Bélanger 和 Ned Deily 反向移植到 3.8）"

#: ../../whatsnew/3.8.rst:2307
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.8.rst:2309
msgid ""
"The presence of newline or tab characters in parts of a URL allows for some "
"forms of attacks. Following the WHATWG specification that updates "
":rfc:`3986`, ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters are "
"stripped from the URL by the parser in :mod:`urllib.parse` preventing such "
"attacks. The removal characters are controlled by a new module level "
"variable ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See :issue:`43882`)"
msgstr ""
"在 URL 中存在换行符或制表符，可能会导致某些形式的攻击。根据 WHATWG 的规范更新了:rfc:`3986`， "
":mod:`urllib.parse` 中的解析器将从 URL 中移除 ASCII 换行符 ``\\n`` 、``\\r`` 和 "
"``\\t``字符，以防止这种攻击。将移除的字符由一个新的模块级变量``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``"
" 控制。（参阅 :issue:`43882` ）"

#: ../../whatsnew/3.8.rst:2318
msgid "Notable changes in Python 3.8.12"
msgstr "Python 3.8.12 中的重要变化"

#: ../../whatsnew/3.8.rst:2323
msgid ""
"Starting with Python 3.8.12 the :mod:`ipaddress` module no longer accepts "
"any leading zeros in IPv4 address strings. Leading zeros are ambiguous and "
"interpreted as octal notation by some libraries. For example the legacy "
"function :func:`socket.inet_aton` treats leading zeros as octal notation. "
"glibc implementation of modern :func:`~socket.inet_pton` does not accept any"
" leading zeros."
msgstr ""
"从 Python 3.8.12 开始 :mod:`ipaddress` 模块不再接受 IPv4 地址字符串中有任何前缀的零。 "
"前缀的零有歧义且会被某些库解读为八进制数字。 例如旧版函数 :func:`socket.inet_aton` 就将前缀的零视为八进制数字。 最新 "
":func:`~socket.inet_pton` 的 glibc 实现则不接受任何前缀的零。"

#: ../../whatsnew/3.8.rst:2330
msgid ""
"(Originally contributed by Christian Heimes in :issue:`36384`, and "
"backported to 3.8 by Achraf Merzouki.)"
msgstr ""
"（最初由 Christian Heimes 在 :issue:`36384` 中贡献，并由 Achraf Merzouki 向下移植到 3.8。）"

#: ../../whatsnew/3.8.rst:2334
msgid "Notable security feature in 3.8.14"
msgstr "3.8.14 中的重要安全特性"

#: ../../whatsnew/3.8.rst:2336
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line "
"flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length "
"limitation <int_max_str_digits>` documentation.  The default limit is 4300 "
"digits in string form."
msgstr ""
"使用 2 (二进制), 4, 8 (八进制), 16 (十六进制) 或 32 以外的基数例如以 10 (十进制) 为基数在 :class:`int` 和"
" :class:`str` 之间进行转换现在如果字符串表示形式中的位数超过特定限制则会引发 :exc:`ValueError` "
"以避免因算法复杂度导致的拒绝服务攻击风险。 这是对于 :cve:`2020-10735` 的一种缓解方案。 此限制可通过环境变量、命令行旗标或 "
":mod:`sys` API 来配置或者禁用。 参见 :ref:`整数字符串转换长度限制 <int_max_str_digits>` 文档。 "
"字符串形式的默认限制为 4300 位数字。"

#: ../../whatsnew/3.8.rst:2347
msgid "Notable changes in 3.8.17"
msgstr "3.8.17 中的重要变化"

#: ../../whatsnew/3.8.rst:2352
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`,"
" have a new a *filter* argument that allows limiting tar features than may "
"be surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile-extraction-filter` for details. In Python 3.12,"
" use without the *filter* argument will show a :exc:`DeprecationWarning`. In"
" Python 3.14, the default will switch to ``'data'``. (Contributed by Petr "
"Viktorin in :pep:`706`.)"
msgstr ""
":mod:`tarfile` 中的提取方法和 :func:`shutil.unpack_archive` 都新增了 *filter* "
"参数以允许限制可能令人意外或危险的 tar 特性，例如在目标目录之外创建文件。 相关细节参见 :ref:`tarfile-extraction-"
"filter`。 在 Python 3.12 中，不带 *filter* 参数的用法将显示 :exc:`DeprecationWarning`。 在 "
"Python 3.14 中，默认值将切换为 ``'data'``。 （由 Petr Viktorin 在 :pep:`706` 中贡献。）"
