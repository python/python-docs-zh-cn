# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# hanfeng <appweb.cn@gmail.com>, 2022
# sgqy <sgqyzh@gmail.com>, 2022
# Xu Siyuan, 2022
# 叶浚安 <ye.pandaaaa906@gmail.com>, 2022
# eric R <trencyclopedia@gmail.com>, 2022
# Pan Felix <tinylambda@gmail.com>, 2022
# jaystone776 <1732865113@qq.com>, 2022
# Dai Xu <daixu61@hotmail.com>, 2022
# Makdon <makdon@makdon.me>, 2022
# Kaizhao Zhang <zhangkaizhao@gmail.com>, 2022
# Sefank <sefank@foxmail.com>, 2022
# ProgramRipper, 2023
# Jason Ren, 2023
# 汪心禾 <wangxinhe06@gmail.com>, 2024
# ppcfish <ppcfish@gmail.com>, 2024
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-20 14:21+0000\n"
"PO-Revision-Date: 2022-11-05 19:49+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.11.rst:3
msgid "What's New In Python 3.11"
msgstr "Python 3.11 有什么新变化"

#: ../../whatsnew/3.11.rst:0
msgid "Editor"
msgstr "编者"

#: ../../whatsnew/3.11.rst:5
msgid "Pablo Galindo Salgado"
msgstr "Pablo Galindo Salgado"

#: ../../whatsnew/3.11.rst:47
msgid ""
"This article explains the new features in Python 3.11, compared to 3.10. "
"Python 3.11 was released on October 24, 2022. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""
"这篇文章介绍了 Python 3.11 相比 3.10 增加的新特性。 Python 3.11 发布于 2022 年 10 月 24 日。 "
"要了解更详细的信息，可参阅 :ref:`更新日志 <changelog>`。"

#: ../../whatsnew/3.11.rst:55
msgid "Summary -- Release highlights"
msgstr "摘要 -- 发布重点"

#: ../../whatsnew/3.11.rst:60
msgid ""
"Python 3.11 is between 10-60% faster than Python 3.10. On average, we "
"measured a 1.25x speedup on the standard benchmark suite. See "
":ref:`whatsnew311-faster-cpython` for details."
msgstr ""
"Python 3.11 的速度比 Python 3.10 快 10-60%。在平均状况下，在标准基准测试（standard benchmark "
"suite）中可见1.25倍的加速效果。更多细节请参见 :ref:`whatsnew311-faster-cpython` 一节。"

#: ../../whatsnew/3.11.rst:66
msgid "New syntax features:"
msgstr "新的语法特性："

#: ../../whatsnew/3.11.rst:68
msgid ":ref:`whatsnew311-pep654`"
msgstr ":ref:`whatsnew311-pep654`"

#: ../../whatsnew/3.11.rst:70
msgid "New built-in features:"
msgstr "新的内置特性："

#: ../../whatsnew/3.11.rst:72
msgid ":ref:`whatsnew311-pep678`"
msgstr ":ref:`whatsnew311-pep678`"

#: ../../whatsnew/3.11.rst:74
msgid "New standard library modules:"
msgstr "新的标准库模块："

#: ../../whatsnew/3.11.rst:76
msgid ""
":pep:`680`: :mod:`tomllib` — Support for parsing `TOML <https://toml.io/>`_ "
"in the Standard Library"
msgstr ":pep:`680`: :mod:`tomllib` — 标准库中对解析 `TOML <https://toml.io/>`_ 的支持"

#: ../../whatsnew/3.11.rst:79
msgid "Interpreter improvements:"
msgstr "解释器的改进："

#: ../../whatsnew/3.11.rst:81
msgid ":ref:`whatsnew311-pep657`"
msgstr ":ref:`whatsnew311-pep657`"

#: ../../whatsnew/3.11.rst:82
msgid ""
"New :option:`-P` command line option and :envvar:`PYTHONSAFEPATH` "
"environment variable to :ref:`disable automatically prepending potentially "
"unsafe paths <whatsnew311-pythonsafepath>` to :data:`sys.path`"
msgstr ""
"新增 :option:`-P` 命令行选项以及 :envvar:`PYTHONSAFEPATH` 环境变量来 "
":ref:`禁止自动将潜在的不安全路径前置<whatsnew311-pythonsafepath>` 到 :data:`sys.path`"

#: ../../whatsnew/3.11.rst:86
msgid "New typing features:"
msgstr "新的类型标注特性："

#: ../../whatsnew/3.11.rst:88
msgid ":ref:`whatsnew311-pep646`"
msgstr ":ref:`whatsnew311-pep646`"

#: ../../whatsnew/3.11.rst:89
msgid ":ref:`whatsnew311-pep655`"
msgstr ":ref:`whatsnew311-pep655`"

#: ../../whatsnew/3.11.rst:90
msgid ":ref:`whatsnew311-pep673`"
msgstr ":ref:`whatsnew311-pep673`"

#: ../../whatsnew/3.11.rst:91
msgid ":ref:`whatsnew311-pep675`"
msgstr ":ref:`whatsnew311-pep675`"

#: ../../whatsnew/3.11.rst:92
msgid ":ref:`whatsnew311-pep681`"
msgstr ":ref:`whatsnew311-pep681`"

#: ../../whatsnew/3.11.rst:94
msgid "Important deprecations, removals and restrictions:"
msgstr "重要的弃用、移除或限制："

#: ../../whatsnew/3.11.rst:96
msgid ""
":pep:`594`: :ref:`Many legacy standard library modules have been deprecated "
"<whatsnew311-pep594>` and will be removed in Python 3.13"
msgstr ""
":pep:`594`: :ref:`许多旧标准库模块已被弃用 <whatsnew311-pep594>`，并将在 Python 3.13 中移除"

#: ../../whatsnew/3.11.rst:99
msgid ""
":pep:`624`: :ref:`Py_UNICODE encoder APIs have been removed "
"<whatsnew311-pep624>`"
msgstr ":pep:`624`: :ref:`Py_UNICODE 编码器 API 已被移除 <whatsnew311-pep624>`"

#: ../../whatsnew/3.11.rst:101
msgid ""
":pep:`670`: :ref:`Macros converted to static inline functions "
"<whatsnew311-pep670>`"
msgstr ":pep:`670`: :ref:`转换为静态内联函数的宏 <whatsnew311-pep670>`"

#: ../../whatsnew/3.11.rst:108 ../../whatsnew/3.11.rst:2211
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.11.rst:113
msgid "PEP 657: Fine-grained error locations in tracebacks"
msgstr "PEP 657：回溯信息中标注更详细的错误位置"

#: ../../whatsnew/3.11.rst:115
msgid ""
"When printing tracebacks, the interpreter will now point to the exact "
"expression that caused the error, instead of just the line. For example:"
msgstr "在打印回溯信息（traceback）时，解释器现在不仅会指出错误所在行，还会进一步指出引发错误的表达式在哪里。例如："

#: ../../whatsnew/3.11.rst:118
msgid ""
"Traceback (most recent call last):\n"
"  File \"distance.py\", line 11, in <module>\n"
"    print(manhattan_distance(p1, p2))\n"
"          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"  File \"distance.py\", line 6, in manhattan_distance\n"
"    return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)\n"
"                           ^^^^^^^^^\n"
"AttributeError: 'NoneType' object has no attribute 'x'"
msgstr ""
"Traceback (most recent call last):\n"
"  File \"distance.py\", line 11, in <module>\n"
"    print(manhattan_distance(p1, p2))\n"
"          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"  File \"distance.py\", line 6, in manhattan_distance\n"
"    return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)\n"
"                           ^^^^^^^^^\n"
"AttributeError: 'NoneType' object has no attribute 'x'"

#: ../../whatsnew/3.11.rst:129
msgid ""
"Previous versions of the interpreter would point to just the line, making it"
" ambiguous which object was ``None``. These enhanced errors can also be "
"helpful when dealing with deeply nested :class:`dict` objects and multiple "
"function calls:"
msgstr ""
"先前版本的解释器只会指出该行存在错误，我们不清楚哪个对象是这里的 ``None``。在深度嵌套的 :class:`dict` "
"对象以及连用多个函数调用的场景下，这些增强的错误也会大有裨益："

#: ../../whatsnew/3.11.rst:133
msgid ""
"Traceback (most recent call last):\n"
"  File \"query.py\", line 37, in <module>\n"
"    magic_arithmetic('foo')\n"
"  File \"query.py\", line 18, in magic_arithmetic\n"
"    return add_counts(x) / 25\n"
"           ^^^^^^^^^^^^^\n"
"  File \"query.py\", line 24, in add_counts\n"
"    return 25 + query_user(user1) + query_user(user2)\n"
"                ^^^^^^^^^^^^^^^^^\n"
"  File \"query.py\", line 32, in query_user\n"
"    return 1 + query_count(db, response['a']['b']['c']['user'], retry=True)\n"
"                               ~~~~~~~~~~~~~~~~~~^^^^^\n"
"TypeError: 'NoneType' object is not subscriptable"
msgstr ""
"Traceback (most recent call last):\n"
"  File \"query.py\", line 37, in <module>\n"
"    magic_arithmetic('foo')\n"
"  File \"query.py\", line 18, in magic_arithmetic\n"
"    return add_counts(x) / 25\n"
"           ^^^^^^^^^^^^^\n"
"  File \"query.py\", line 24, in add_counts\n"
"    return 25 + query_user(user1) + query_user(user2)\n"
"                ^^^^^^^^^^^^^^^^^\n"
"  File \"query.py\", line 32, in query_user\n"
"    return 1 + query_count(db, response['a']['b']['c']['user'], retry=True)\n"
"                               ~~~~~~~~~~~~~~~~~~^^^^^\n"
"TypeError: 'NoneType' object is not subscriptable"

#: ../../whatsnew/3.11.rst:149
msgid "As well as complex arithmetic expressions:"
msgstr "在复杂的算数表达式中同样有用："

#: ../../whatsnew/3.11.rst:151
msgid ""
"Traceback (most recent call last):\n"
"  File \"calculation.py\", line 54, in <module>\n"
"    result = (x / y / z) * (a / b / c)\n"
"              ~~~~~~^~~\n"
"ZeroDivisionError: division by zero"
msgstr ""
"Traceback (most recent call last):\n"
"  File \"calculation.py\", line 54, in <module>\n"
"    result = (x / y / z) * (a / b / c)\n"
"              ~~~~~~^~~\n"
"ZeroDivisionError: division by zero"

#: ../../whatsnew/3.11.rst:159
msgid ""
"Additionally, the information used by the enhanced traceback feature is made"
" available via a general API, that can be used to correlate :term:`bytecode`"
" :ref:`instructions <bytecodes>` with source code location. This information"
" can be retrieved using:"
msgstr ""
"此外，增强的回溯信息功能使用的信息通过通用 API 提供，该 API 可用于将 :term:`bytecode` :ref:`指令 "
"<bytecodes>` 与源代码位置相关联。 可以使用以下方式获取此信息："

#: ../../whatsnew/3.11.rst:164
msgid "The :meth:`codeobject.co_positions` method in Python."
msgstr "Python 中的 :meth:`codeobject.co_positions` 方法。"

#: ../../whatsnew/3.11.rst:165
msgid "The :c:func:`PyCode_Addr2Location` function in the C API."
msgstr "C API 中的 :c:func:`PyCode_Addr2Location` 函数。"

#: ../../whatsnew/3.11.rst:167
msgid ""
"See :pep:`657` for more details. (Contributed by Pablo Galindo, Batuhan "
"Taskaya and Ammar Askar in :issue:`43950`.)"
msgstr ""
"更多细节请参见 :pep:`657`。（由Pablo Galindo、Batuhan Taskaya 和 Ammar Askar 在 "
":issue:`43950` 中贡献）"

#: ../../whatsnew/3.11.rst:171
msgid ""
"This feature requires storing column positions in :ref:`codeobjects`, which "
"may result in a small increase in interpreter memory usage and disk usage "
"for compiled Python files. To avoid storing the extra information and "
"deactivate printing the extra traceback information, use the :option:`-X "
"no_debug_ranges <-X>` command line option or the "
":envvar:`PYTHONNODEBUGRANGES` environment variable."
msgstr ""
"该特性需要在 :ref:`codeobjects` 中存储列位置，这可能会导致解释器内存占用和经过编译的 Python 文件的文件大小略有增加。 "
"要避免存储额外的信息同时取消打印额外的回溯信息，请使用 :option:`-X no_debug_ranges <-X>` 命令行选项或 "
":envvar:`PYTHONNODEBUGRANGES` 环境变量。"

#: ../../whatsnew/3.11.rst:183
msgid "PEP 654: Exception Groups and ``except*``"
msgstr "PEP 654：异常组与 ``except*``"

#: ../../whatsnew/3.11.rst:185
msgid ""
":pep:`654` introduces language features that enable a program to raise and "
"handle multiple unrelated exceptions simultaneously. The builtin types "
":exc:`ExceptionGroup` and :exc:`BaseExceptionGroup` make it possible to "
"group exceptions and raise them together, and the new :keyword:`except* "
"<except_star>` syntax generalizes :keyword:`except` to match subgroups of "
"exception groups."
msgstr ""
":pep:`654` 引入了若干语言特性，从而让程序能够同时引发和处理多个不相关的异常。内置类型 :exc:`ExceptionGroup` 和 "
":exc:`BaseExceptionGroup` 使得将异常划分成组并一起引发成为可能，新添加的 :keyword:`except* "
"<except_star>` 是对 :keyword:`except` 的泛化语法，这一语法能够匹配异常组的子组。"

#: ../../whatsnew/3.11.rst:192
msgid "See :pep:`654` for more details."
msgstr "更多细节请参见 :pep:`654`。"

#: ../../whatsnew/3.11.rst:194
msgid ""
"(Contributed by Irit Katriel in :issue:`45292`. PEP written by Irit Katriel,"
" Yury Selivanov and Guido van Rossum.)"
msgstr ""
"（由 Irit Katriel 在 :issue:`45292` 中贡献，PEP 由 Irit Katriel、Yury Selivanov 和 "
"Guido van Rossum 编写）"

#: ../../whatsnew/3.11.rst:201
msgid "PEP 678: Exceptions can be enriched with notes"
msgstr "PEP 678：可用注释丰富异常"

#: ../../whatsnew/3.11.rst:203
msgid ""
"The :meth:`~BaseException.add_note` method is added to :exc:`BaseException`."
" It can be used to enrich exceptions with context information that is not "
"available at the time when the exception is raised. The added notes appear "
"in the default traceback."
msgstr ""
":meth:`~BaseException.add_note` 方法已被添加到 :exc:`BaseException` "
"中。如果存在引发异常时不可用的上下文信息，使用该方法可以手动附加这些信息来丰富异常。添加的备注会显示在默认的回溯信息中。"

#: ../../whatsnew/3.11.rst:208
msgid "See :pep:`678` for more details."
msgstr "更多细节请参见 :pep:`678`。"

#: ../../whatsnew/3.11.rst:210
msgid ""
"(Contributed by Irit Katriel in :issue:`45607`. PEP written by Zac Hatfield-"
"Dodds.)"
msgstr "（由 Irit Katriel 在 :issue:`45607` 中贡献，PEP 由 Zac Hatfield-Dodds 编写）"

#: ../../whatsnew/3.11.rst:217
msgid "Windows ``py.exe`` launcher improvements"
msgstr "Windows 下的 ``py.exe`` 启动器改进"

#: ../../whatsnew/3.11.rst:219
msgid ""
"The copy of the :ref:`launcher` included with Python 3.11 has been "
"significantly updated. It now supports company/tag syntax as defined in "
":pep:`514` using the :samp:`-V:{<company>}/{<tag>}` argument instead of the "
"limited :samp:`-{<major>}.{<minor>}`. This allows launching distributions "
"other than ``PythonCore``, the one hosted on `python.org "
"<https://www.python.org>`_."
msgstr ""
"包括在 Python 3.11 中的 :ref:`launcher` 的副本已进行了重大更新。 现在它支持 :pep:`514` 所定义的 "
"company/tag 语法即使用 :samp:`-V:{<company>}/{<tag>}` 参数代替受限的 "
":samp:`-{<major>}.{<minor>}`。 这允许启动托管在 `python.org "
"<https://www.python.org>`_ 上的 ``PythonCore`` 以外的其他发行版。"

#: ../../whatsnew/3.11.rst:225
msgid ""
"When using ``-V:`` selectors, either company or tag can be omitted, but all "
"installs will be searched. For example, ``-V:OtherPython/`` will select the "
"\"best\" tag registered for ``OtherPython``, while ``-V:3.11`` or "
"``-V:/3.11`` will select the \"best\" distribution with tag ``3.11``."
msgstr ""
"当使用 ``-V:`` 选择器时，可以省略 company 或 tag，此时会搜索所有的安装。例如，``-V:OtherPython/`` 会选择 "
"``OtherPython`` 所注册的“最佳”标签，而 ``-V:3.11`` 或 ``-V:/3.11`` 则会选择标签为 ``3.11`` "
"的“最佳”发行版。"

#: ../../whatsnew/3.11.rst:230
msgid ""
"When using the legacy :samp:`-{<major>}`, :samp:`-{<major>}.{<minor>}`, "
":samp:`-{<major>}-{<bitness>}` or :samp:`-{<major>}.{<minor>}-{<bitness>}` "
"arguments, all existing behaviour should be preserved from past versions, "
"and only releases from ``PythonCore`` will be selected. However, the ``-64``"
" suffix now implies \"not 32-bit\" (not necessarily x86-64), as there are "
"multiple supported 64-bit platforms. 32-bit runtimes are detected by "
"checking the runtime's tag for a ``-32`` suffix. All releases of Python "
"since 3.5 have included this in their 32-bit builds."
msgstr ""
"在使用旧式的 "
":samp:`-{<major>}`、:samp:`-{<major>}.{<minor>}`、:samp:`-{<major>}-{<bitness>}`"
" 或 :samp:`-{<major>}.{<minor>}-{<bitness>}` 参数时，应保留过去版本的所有已有行为，并只选择从 "
"``PythonCore`` 发布的版本。 不过，``-64`` 后缀现在表示“非 32 位”（不一定是 x86-64），因为有多种受支持的 64 "
"位平台。 32 位运行时是通过检查运行时的标签是否有 ``-32`` 后缀来检测的。 自 Python 3.5 以来的所有版本都在其 32 "
"位编译中包括了这个后缀。"

#: ../../whatsnew/3.11.rst:244
msgid "New Features Related to Type Hints"
msgstr "有关类型提示的新增特性"

#: ../../whatsnew/3.11.rst:246
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the "
":mod:`typing` module."
msgstr "本节介绍了涉及 :pep:`484` 类型提示和 :mod:`typing` 模块的主要更改。"

#: ../../whatsnew/3.11.rst:253
msgid "PEP 646: Variadic generics"
msgstr "PEP 646：可变参数泛型"

#: ../../whatsnew/3.11.rst:255
msgid ""
":pep:`484` previously introduced :data:`~typing.TypeVar`, enabling creation "
"of generics parameterised with a single type. :pep:`646` adds "
":data:`~typing.TypeVarTuple`, enabling parameterisation with an *arbitrary* "
"number of types. In other words, a :data:`~typing.TypeVarTuple` is a "
"*variadic* type variable, enabling *variadic* generics."
msgstr ""
"之前的 :pep:`484` 引入了 :data:`~typing.TypeVar`，其支持创建带单一类型参数的泛型。:pep:`646` 新引入了 "
":data:`~typing.TypeVarTuple`，其支持 *任意* "
"数量的类型的参数化。换言之，:data:`~typing.TypeVarTuple` 是 *可变参数（variadic）* 类型变量，支持 *可变参数*"
" 泛型。"

#: ../../whatsnew/3.11.rst:262
msgid ""
"This enables a wide variety of use cases. In particular, it allows the type "
"of array-like structures in numerical computing libraries such as NumPy and "
"TensorFlow to be parameterised with the array *shape*. Static type checkers "
"will now be able to catch shape-related bugs in code that uses these "
"libraries."
msgstr ""
"该泛型的引入让相当多的代码写法成为可能。特别是在诸如 NumPy 和 TensorFlow 这样的数值计算库中，这种泛型让类数组（array-"
"like）结构类型可以用数组的 *形状（shape）* 来参数化。这样一来，静态类型检查器就能够在使用这些库的代码中捕获与形状有关的错误了。"

#: ../../whatsnew/3.11.rst:268
msgid "See :pep:`646` for more details."
msgstr "更多细节请参见 :pep:`646`。"

#: ../../whatsnew/3.11.rst:270
msgid ""
"(Contributed by Matthew Rahtz in :issue:`43224`, with contributions by "
"Serhiy Storchaka and Jelle Zijlstra. PEP written by Mark Mendoza, Matthew "
"Rahtz, Pradeep Kumar Srinivasan, and Vincent Siles.)"
msgstr ""
"（由 Matthew Rahtz 在 :issue:`43224` 中贡献，共同贡献的还有 Serhiy Storchaka 和 Jelle "
"Zijlstra，PEP 由 Mark Mendoza、Matthew Rahtz、Pradeep Kumar Srinivasan 以及 "
"Vincent Siles 编写）"

#: ../../whatsnew/3.11.rst:278
msgid ""
"PEP 655: Marking individual ``TypedDict`` items as required or not-required"
msgstr "PEP 655：将单个 ``TypedDict`` 项标记为必填或非必填项"

#: ../../whatsnew/3.11.rst:280
msgid ""
":data:`~typing.Required` and :data:`~typing.NotRequired` provide a "
"straightforward way to mark whether individual items in a "
":class:`~typing.TypedDict` must be present. Previously, this was only "
"possible using inheritance."
msgstr ""
":data:`~typing.Required` 和 :data:`~typing.NotRequired` 提供了一种简单明了的方式来标记 "
":class:`~typing.TypedDict` 中的单个项是否必须存在。而在之前的版本中，这只能通过使用继承来实现。"

#: ../../whatsnew/3.11.rst:285
msgid ""
"All fields are still required by default, unless the *total* parameter is "
"set to ``False``, in which case all fields are still not-required by "
"default. For example, the following specifies a :class:`!TypedDict` with one"
" required and one not-required key::"
msgstr ""
"默认情况下，所有字段仍然是必填的，除非 *total* 参数设置为 "
"``False``，在这种情况下，默认情况下所有字段则是非必填的。例如，下面指定了一个 "
":class:`!TypedDict`，其中有一个必填的键和一个非必填的键："

#: ../../whatsnew/3.11.rst:291
msgid ""
"class Movie(TypedDict):\n"
"   title: str\n"
"   year: NotRequired[int]\n"
"\n"
"m1: Movie = {\"title\": \"Black Panther\", \"year\": 2018}  # OK\n"
"m2: Movie = {\"title\": \"Star Wars\"}  # OK (year is not required)\n"
"m3: Movie = {\"year\": 2022}  # ERROR (missing required field title)"
msgstr ""
"class Movie(TypedDict):\n"
"   title: str\n"
"   year: NotRequired[int]\n"
"\n"
"m1: Movie = {\"title\": \"Black Panther\", \"year\": 2018}  # 可以\n"
"m2: Movie = {\"title\": \"Star Wars\"}  # 可以 (不是必需的)\n"
"m3: Movie = {\"year\": 2022}  # 错误 (缺少必需的字段 title)"

#: ../../whatsnew/3.11.rst:299
msgid "The following definition is equivalent::"
msgstr "而以下的定义和上述定义等价："

#: ../../whatsnew/3.11.rst:301
msgid ""
"class Movie(TypedDict, total=False):\n"
"   title: Required[str]\n"
"   year: int"
msgstr ""
"class Movie(TypedDict, total=False):\n"
"   title: Required[str]\n"
"   year: int"

#: ../../whatsnew/3.11.rst:305
msgid "See :pep:`655` for more details."
msgstr "更多细节请参见 :pep:`655`。"

#: ../../whatsnew/3.11.rst:307
msgid ""
"(Contributed by David Foster and Jelle Zijlstra in :issue:`47087`. PEP "
"written by David Foster.)"
msgstr ""
"（由 David Foster 和 Jelle Zijlstra 在 :issue:`47087` 中贡献，PEP 由 David Foster 编写）"

#: ../../whatsnew/3.11.rst:314
msgid "PEP 673: ``Self`` type"
msgstr "PEP 673：``Self`` 类型"

#: ../../whatsnew/3.11.rst:316
msgid ""
"The new :data:`~typing.Self` annotation provides a simple and intuitive way "
"to annotate methods that return an instance of their class. This behaves the"
" same as the :class:`~typing.TypeVar`-based approach :pep:`specified in PEP "
"484 <484#annotating-instance-and-class-methods>`, but is more concise and "
"easier to follow."
msgstr ""
"新的 :data:`~typing.Self` 注解提供了一种简单而又直观的方法来标注返回其类实例的方法。这一注解的行为与 :pep:`PEP "
"484<484#annotating-instance-and-class-methods>` 中指定的基于 "
":class:`~typing.TypeVar` 的方法是一致的，但更简洁、更易于遵循。"

#: ../../whatsnew/3.11.rst:322
msgid ""
"Common use cases include alternative constructors provided as "
":func:`classmethod <classmethod>`\\s, and :meth:`~object.__enter__` methods "
"that return ``self``::"
msgstr ""
"常见的用法包括以 :func:`classmethod` 形式提供的替代构造函数，以及返回 ``self`` 的 "
":meth:`~object.__enter__` 方法："

#: ../../whatsnew/3.11.rst:326
msgid ""
"class MyLock:\n"
"    def __enter__(self) -> Self:\n"
"        self.lock()\n"
"        return self\n"
"\n"
"    ...\n"
"\n"
"class MyInt:\n"
"    @classmethod\n"
"    def fromhex(cls, s: str) -> Self:\n"
"        return cls(int(s, 16))\n"
"\n"
"    ..."
msgstr ""
"class MyLock:\n"
"    def __enter__(self) -> Self:\n"
"        self.lock()\n"
"        return self\n"
"\n"
"    ...\n"
"\n"
"class MyInt:\n"
"    @classmethod\n"
"    def fromhex(cls, s: str) -> Self:\n"
"        return cls(int(s, 16))\n"
"\n"
"    ..."

#: ../../whatsnew/3.11.rst:340
msgid ""
":data:`~typing.Self` can also be used to annotate method parameters or "
"attributes of the same type as their enclosing class."
msgstr ":data:`~typing.Self` 也可以用来标注与其封闭类类型相同的方法参数或属性。"

#: ../../whatsnew/3.11.rst:343
msgid "See :pep:`673` for more details."
msgstr "更多细节请参见 :pep:`673`。"

#: ../../whatsnew/3.11.rst:345
msgid ""
"(Contributed by James Hilton-Balfe in :issue:`46534`. PEP written by Pradeep"
" Kumar Srinivasan and James Hilton-Balfe.)"
msgstr ""
"（由 James Hilton-Balfe 在 :issue:`46534` 中贡献，PEP 由 Pradeep Kumar Srinivasan 和 "
"James Hilton-Balfe 编写）"

#: ../../whatsnew/3.11.rst:352
msgid "PEP 675: Arbitrary literal string type"
msgstr "PEP 675：任意字面值字符串类型"

#: ../../whatsnew/3.11.rst:354
msgid ""
"The new :data:`~typing.LiteralString` annotation may be used to indicate "
"that a function parameter can be of any literal string type. This allows a "
"function to accept arbitrary literal string types, as well as strings "
"created from other literal strings. Type checkers can then enforce that "
"sensitive functions, such as those that execute SQL statements or shell "
"commands, are called only with static arguments, providing protection "
"against injection attacks."
msgstr ""
"新的 :data:`~typing.LiteralString` "
"注解能用于注明函数参数可为任何字面值字符串类型。这允许函数接受任意字面值字符串类型，以及从其他字面值字符串创建的字符串。这样一来，类型检查器就可以强制对此敏感的函数（例如执行"
" SQL 语句或 shell 命令的函数）只以静态的实参来调用，从而提供对注入攻击的保护。"

#: ../../whatsnew/3.11.rst:362
msgid "For example, a SQL query function could be annotated as follows::"
msgstr "例如，SQL 查询函数可按照如下方式注解："

#: ../../whatsnew/3.11.rst:364
msgid ""
"def run_query(sql: LiteralString) -> ...\n"
"    ...\n"
"\n"
"def caller(\n"
"    arbitrary_string: str,\n"
"    query_string: LiteralString,\n"
"    table_name: LiteralString,\n"
") -> None:\n"
"    run_query(\"SELECT * FROM students\")       # ok\n"
"    run_query(query_string)                   # ok\n"
"    run_query(\"SELECT * FROM \" + table_name)  # ok\n"
"    run_query(arbitrary_string)               # type checker error\n"
"    run_query(                                # type checker error\n"
"        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n"
"    )"
msgstr ""
"def run_query(sql: LiteralString) -> ...\n"
"    ...\n"
"\n"
"def caller(\n"
"    arbitrary_string: str,\n"
"    query_string: LiteralString,\n"
"    table_name: LiteralString,\n"
") -> None:\n"
"    run_query(\"SELECT * FROM students\")       # 可以\n"
"    run_query(query_string)                   # 可以\n"
"    run_query(\"SELECT * FROM \" + table_name)  # 可以\n"
"    run_query(arbitrary_string)               # 类型检查器错误\n"
"    run_query(                                # 类型检查器错误\n"
"        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n"
"    )"

#: ../../whatsnew/3.11.rst:380
msgid "See :pep:`675` for more details."
msgstr "请参阅 :pep:`675` 了解详情。"

#: ../../whatsnew/3.11.rst:382
msgid ""
"(Contributed by Jelle Zijlstra in :issue:`47088`. PEP written by Pradeep "
"Kumar Srinivasan and Graham Bleaney.)"
msgstr ""
"（由 Jelle Zijlstra 在 :issue:`47088` 中贡献，PEP 由 Pradeep Kumar Srinivasan 和 "
"Graham Bleaney 编写）"

#: ../../whatsnew/3.11.rst:389
msgid "PEP 681: Data class transforms"
msgstr "PEP 681：数据类变换"

#: ../../whatsnew/3.11.rst:391
msgid ""
":data:`~typing.dataclass_transform` may be used to decorate a class, "
"metaclass, or a function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class, giving it "
":func:`dataclass <dataclasses.dataclass>`-like behaviors."
msgstr ""
":data:`~typing.dataclass_transform` 可用于修饰类、元类或本身是装饰器的函数。使用 "
"``@dataclass_Transform()`` 就能让静态类型检查器知道被修饰的对象会在运行时执行对类的变换专业的“魔法”，从而让它具有类似 "
":func:`dataclass <dataclasses.dataclass>` 的行为。"

#: ../../whatsnew/3.11.rst:397
msgid "For example::"
msgstr "例如："

#: ../../whatsnew/3.11.rst:399
msgid ""
"# The create_model decorator is defined by a library.\n"
"@typing.dataclass_transform()\n"
"def create_model(cls: Type[T]) -> Type[T]:\n"
"    cls.__init__ = ...\n"
"    cls.__eq__ = ...\n"
"    cls.__ne__ = ...\n"
"    return cls\n"
"\n"
"# The create_model decorator can now be used to create new model classes:\n"
"@create_model\n"
"class CustomerModel:\n"
"    id: int\n"
"    name: str\n"
"\n"
"c = CustomerModel(id=327, name=\"Eric Idle\")"
msgstr ""
"# create_model 装饰器是由库来定义的。\n"
"@typing.dataclass_transform()\n"
"def create_model(cls: Type[T]) -> Type[T]:\n"
"    cls.__init__ = ...\n"
"    cls.__eq__ = ...\n"
"    cls.__ne__ = ...\n"
"    return cls\n"
"\n"
"# 现在 create_model 装饰器可被用于创建新的模型类：\n"
"@create_model\n"
"class CustomerModel:\n"
"    id: int\n"
"    name: str\n"
"\n"
"c = CustomerModel(id=327, name=\"Eric Idle\")"

#: ../../whatsnew/3.11.rst:415
msgid "See :pep:`681` for more details."
msgstr "更多细节请参见 :pep:`681`。"

#: ../../whatsnew/3.11.rst:417
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`91860`. PEP written by Erik De Bonte "
"and Eric Traut.)"
msgstr ""
"（由 Jelle Zijlstra 在 :gh:`91860` 中贡献，PEP 由 Erik De Bonte 和 Eric Traut 编写）"

#: ../../whatsnew/3.11.rst:424
msgid "PEP 563 may not be the future"
msgstr "未来版本可能不再实现 PEP 563"

#: ../../whatsnew/3.11.rst:426
msgid ""
":pep:`563` Postponed Evaluation of Annotations (the ``from __future__ import"
" annotations`` :ref:`future statement <future>`) that was originally planned"
" for release in Python 3.10 has been put on hold indefinitely. See `this "
"message from the Steering Council "
"<https://mail.python.org/archives/list/python-"
"dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__ for more "
"information."
msgstr ""
"原计划随 Python 3.10 发布的 :pep:`563` 延迟注解求值（``from __future__ import "
"annotations`` 的 :ref:`future 语句 <future>`）已被无限期搁置。 更多信息请参见 `指导委员会（Steering "
"Council）邮件列表中的讨论 <https://mail.python.org/archives/list/python-"
"dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/>`__ 。"

#: ../../whatsnew/3.11.rst:437
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.11.rst:439
msgid ""
"Starred unpacking expressions can now be used in :keyword:`for` statements. "
"(See :issue:`46725` for more details.)"
msgstr "星号解包表达式现在可以在 :keyword:`for` 语句中使用。（更多细节请参见 :issue:`46725`）"

#: ../../whatsnew/3.11.rst:442
msgid ""
"Asynchronous :ref:`comprehensions <comprehensions>` are now allowed inside "
"comprehensions in :ref:`asynchronous functions <async def>`. Outer "
"comprehensions implicitly become asynchronous in this case. (Contributed by "
"Serhiy Storchaka in :issue:`33346`.)"
msgstr ""
"现在，在 :ref:`异步函数 <async def>` 中的推导式内部允许使用异步 :ref:`推导式 "
"<comprehensions>`。此时，外部推导式隐式地变成了异步推导式。（由 Serhiy Storchaka 在 :issue:`33346` "
"中贡献）"

#: ../../whatsnew/3.11.rst:447
msgid ""
"A :exc:`TypeError` is now raised instead of an :exc:`AttributeError` in "
":keyword:`with` statements and :meth:`contextlib.ExitStack.enter_context` "
"for objects that do not support the :term:`context manager` protocol, and in"
" :keyword:`async with` statements and "
":meth:`contextlib.AsyncExitStack.enter_async_context` for objects not "
"supporting the :term:`asynchronous context manager` protocol. (Contributed "
"by Serhiy Storchaka in :issue:`12022` and :issue:`44471`.)"
msgstr ""
"在 :keyword:`with` 语句和用于不支持 :term:`context manager` 协议的对象 "
":meth:`contextlib.ExitStack.enter_context` 中，以及 :keyword:`async with` "
"语句和用于不支持 :term:`asynchronous context manager` 协议的对象的 "
":meth:`contextlib.AsyncExitStack.enter_async_context` 中现在会引发 "
":exc:`TypeError` 而不是 :exc:`AttributeError`。 （由 Serhiy Storchaka 在 "
":issue:`12022` 和 :issue:`44471` 中贡献。）"

#: ../../whatsnew/3.11.rst:455
msgid ""
"Added :meth:`object.__getstate__`, which provides the default implementation"
" of the :meth:`!__getstate__` method. :mod:`copy`\\ing and "
":mod:`pickle`\\ing instances of subclasses of builtin types "
":class:`bytearray`, :class:`set`, :class:`frozenset`, "
":class:`collections.OrderedDict`, :class:`collections.deque`, "
":class:`weakref.WeakSet`, and :class:`datetime.tzinfo` now copies and "
"pickles instance attributes implemented as :term:`slots <__slots__>`. This "
"change has an unintended side effect: It trips up a small minority of "
"existing Python projects not expecting :meth:`object.__getstate__` to exist."
" See the later comments on :gh:`70766` for discussions of what workarounds "
"such code may need. (Contributed by Serhiy Storchaka in :issue:`26579`.)"
msgstr ""
"增加了 :meth:`object.__getstate__`，它提供 :meth:`!__getstate__` 方法的默认实现。 "
":mod:`copy` 并 :mod:`pickle` 内置类型 :class:`bytearray`, :class:`set`, "
":class:`frozenset`, :class:`collections.OrderedDict`, "
":class:`collections.deque`, :class:`weakref.WeakSet` 和 "
":class:`datetime.tzinfo` 的子类的实例现在将会拷贝并封存被实现为 :term:`槽位 <__slots__>` 的实例属性。 "
"此项改变有一个意外的附带影响：它将扰乱少数不使用 :meth:`object.__getstate__` 的现有 Python 项目。 请参阅 "
":gh:`70766` 上近期的评论了解有关此类代码所需处理的讨论。 （由 Serhiy Storchaka 在 :issue:`26579` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:470
msgid ""
"Added a :option:`-P` command line option and a :envvar:`PYTHONSAFEPATH` "
"environment variable, which disable the automatic prepending to "
":data:`sys.path` of the script's directory when running a script, or the "
"current directory when using :option:`-c` and :option:`-m`. This ensures "
"only stdlib and installed modules are picked up by :keyword:`import`, and "
"avoids unintentionally or maliciously shadowing modules with those in a "
"local (and typically user-writable) directory. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""
"增加了 :option:`-P` 命令行选项和 :envvar:`PYTHONSAFEPATH` 环境变量，它们将禁用当运行脚本时将脚本目录，或者当使用"
" :option:`-c` 和 :option:`-m` 时将当前目前自动添加到 :data:`sys.path`。 "
"这可以确保只有标准库和已安装模块可通过 :keyword:`import` 导入，而避免无意或恶意地使用本地（且通常为用户可写）的目录屏蔽此类模块。 "
"（由 Victor Stinner 在 :gh:`57684` 中贡献。）"

#: ../../whatsnew/3.11.rst:481
msgid ""
"A ``\"z\"`` option was added to the :ref:`formatspec` that coerces negative "
"to positive zero after rounding to the format precision. See :pep:`682` for "
"more details. (Contributed by John Belmonte in :gh:`90153`.)"
msgstr ""
"在 :ref:`formatspec` 中增加了一个 ``\"z\"`` 选项用来在舍入到格式精度后强制将负数转为正数。 请参阅 :pep:`682` "
"了解详情。 （由 John Belmonte 在 :gh:`90153` 中贡献。）"

#: ../../whatsnew/3.11.rst:486
msgid ""
"Bytes are no longer accepted on :data:`sys.path`.  Support broke sometime "
"between Python 3.2 and 3.6, with no one noticing until after Python 3.10.0 "
"was released. In addition, bringing back support would be problematic due to"
" interactions between :option:`-b` and :data:`sys.path_importer_cache` when "
"there is a mixture of :class:`str` and :class:`bytes` keys. (Contributed by "
"Thomas Grainger in :gh:`91181`.)"
msgstr ""
":data:`sys.path` 不再接受字节串。对此的支持在 Python 3.2 和 3.6 之间中断过一段时间，但是直到 Python "
"3.10.0 发布时才被人发现。此外，由于 :option:`-b` 和 :data:`sys.path_importer_cache` "
"之间的交互，当同时存在 :class:`str` 和 :class:`bytes` 键时，恢复对此的支持会很困难。（由 Thomas Grainger "
"在 :gh:`91181` 中贡献）"

#: ../../whatsnew/3.11.rst:497
msgid "Other CPython Implementation Changes"
msgstr "其他 CPython 实现的改变"

#: ../../whatsnew/3.11.rst:499
msgid ""
"The special methods :meth:`~object.__complex__` for :class:`complex` and "
":meth:`~object.__bytes__` for :class:`bytes` are implemented to support the "
":class:`typing.SupportsComplex` and :class:`typing.SupportsBytes` protocols."
" (Contributed by Mark Dickinson and Donghee Na in :issue:`24234`.)"
msgstr ""
"实现了用于 :class:`complex` 的 :meth:`~object.__complex__` 和用于 :class:`bytes` 的 "
":meth:`~object.__bytes__` 特殊方法以支持 :class:`typing.SupportsComplex` 和 "
":class:`typing.SupportsBytes` 协议。 （由 Mark Dickinson 和 Donghee Na 在 "
":issue:`24234` 中贡献。）"

#: ../../whatsnew/3.11.rst:504
msgid ""
"``siphash13`` is added as a new internal hashing algorithm. It has similar "
"security properties as ``siphash24``, but it is slightly faster for long "
"inputs. :class:`str`, :class:`bytes`, and some other types now use it as the"
" default algorithm for :func:`hash`. :pep:`552` :ref:`hash-based .pyc files "
"<pyc-invalidation>` now use ``siphash13`` too. (Contributed by Inada Naoki "
"in :issue:`29410`.)"
msgstr ""
"添加了新的内部哈希算法 ``siphash13``。它与 ``siphash24`` "
"有类似的安全特性，但是对于长输入，它的速度略快。:class:`str`、:class:`bytes` 和其他一些类型现在使用它作为 "
":func:`hash` 的默认算法。:pep:`552` :ref:`基于哈希的 .pyc 文件 <pyc-invalidation>` 现在也使用 "
"``siphash13``。（由 Inada Naoki 在 :issue:`29410`  中贡献）"

#: ../../whatsnew/3.11.rst:513
msgid ""
"When an active exception is re-raised by a :keyword:`raise` statement with "
"no parameters, the traceback attached to this exception is now always "
"``sys.exc_info()[1].__traceback__``. This means that changes made to the "
"traceback in the current :keyword:`except` clause are reflected in the re-"
"raised exception. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
"当使用没有参数的 :keyword:`raise` 语句重新引发活动的异常时，被附加在此异常上的回溯现在始终为 "
"``sys.exc_info()[1].__traceback__``。这意味着在当前 :keyword:`except` "
"子句中对回溯的修改将被反映到重新引发的异常。（由 Irit Katriel 在 :issue:`45711` 中贡献）"

#: ../../whatsnew/3.11.rst:519
msgid ""
"The interpreter state's representation of handled exceptions (aka "
"``exc_info`` or ``_PyErr_StackItem``) now only has the ``exc_value`` field; "
"``exc_type`` and ``exc_traceback`` have been removed, as they can be derived"
" from ``exc_value``. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
"解释器状态对已处理异常（又名 ``exc_info`` 或 ``_PyErr_StackItem`` ）的表示现在只有 ``exc_value`` "
"字段；``exc_type`` 和 ``exc_traceback`` 已被移除，因为它们可以派生自 ``exc_value`` 。（由 Irit "
"Katriel 在 :issue:`45711` 中贡献）"

#: ../../whatsnew/3.11.rst:525
msgid ""
"A new :ref:`command line option <install-quiet-option>`, ``AppendPath``, has"
" been added for the Windows installer. It behaves similarly to "
"``PrependPath``, but appends the install and scripts directories instead of "
"prepending them. (Contributed by Bastian Neuburger in :issue:`44934`.)"
msgstr ""
"WIndows 安装程序添加了一个新的 :ref:`命令行选项 <install-quiet-option>` "
"``AppendPath``。它的行为类似于 ``PrependPath``，但是会追加安装和脚本目录而不是前加。（由 Bastian "
"Neuburger 在 :issue:`44934` 中贡献）"

#: ../../whatsnew/3.11.rst:531
msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to "
"``1`` for initialization to use :c:member:`PyConfig.module_search_paths` to "
"initialize :data:`sys.path`. Otherwise, initialization will recalculate the "
"path and replace any values added to ``module_search_paths``."
msgstr ""
"为了使用 :c:member:`PyConfig.module_search_paths` 初始化 "
":data:`sys.path`，:c:member:`PyConfig.module_search_paths_set` 字段现在必须使用 ``1``"
" 作初始化，否则，该初始化行为会重新计算路径并替换任何加入到 ``module_search_paths`` 的值。"

#: ../../whatsnew/3.11.rst:536
msgid ""
"The output of the :option:`--help` option now fits in 50 lines/80 columns. "
"Information about :ref:`Python environment variables <using-on-envvars>` and"
" :option:`-X` options is now available using the respective :option:`--help-"
"env` and :option:`--help-xoptions` flags, and with the new :option:`--help-"
"all`. (Contributed by Éric Araujo in :issue:`46142`.)"
msgstr ""
":option:`--help` 选项的输出现在将适应于50行/80列。有关 :ref:`Python environment variables "
"<using-on-envvars>`  和 :option:`-X` 选项的信息可以分别使用 :option:`--help-env` 和 "
":option:`--help-xoptions` 标志获得，并可以使用新的标志 :option:`--help-all`。（由 Éric Araujo"
" 在 :issue:`46142` 贡献。）"

#: ../../whatsnew/3.11.rst:543
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line "
"flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length "
"limitation <int_max_str_digits>` documentation.  The default limit is 4300 "
"digits in string form."
msgstr ""
"使用 2 (二进制), 4, 8 (八进制), 16 (十六进制) 或 32 以外的基数例如以 10 (十进制) 为基数在 :class:`int` 和"
" :class:`str` 之间进行转换现在如果字符串表示形式中的位数超过特定限制则会引发 :exc:`ValueError` "
"以避免因算法复杂度导致的拒绝服务攻击风险。 这是对于 :cve:`2020-10735` 的一种缓解方案。 此限制可通过环境变量、命令行旗标或 "
":mod:`sys` API 来配置或者禁用。 参见 :ref:`整数字符串转换长度限制 <int_max_str_digits>` 文档。 "
"字符串形式的默认限制为 4300 位数字。"

#: ../../whatsnew/3.11.rst:557
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.11.rst:559
msgid ""
":mod:`tomllib`: For parsing `TOML <https://toml.io/>`_. See :pep:`680` for "
"more details. (Contributed by Taneli Hukkinen in :issue:`40059`.)"
msgstr ""
":mod:`tomllib`: 用于解析 `TOML <https://toml.io/>`_。 请参阅 :pep:`680` 了解详情。 （由 "
"Taneli Hukkinen 在 :issue:`40059` 中贡献。）"

#: ../../whatsnew/3.11.rst:563
msgid ""
":mod:`wsgiref.types`: :pep:`WSGI <3333>`-specific types for static type "
"checking. (Contributed by Sebastian Rittau in :issue:`42012`.)"
msgstr ""
":mod:`wsgiref.types`: 用于表态类型检查的 :pep:`WSGI <3333>` 专属类型。 （由 Sebastian Rittau"
" 在 :issue:`42012` 中贡献。）"

#: ../../whatsnew/3.11.rst:571
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.11.rst:576
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.11.rst:578
msgid ""
"Added the :class:`~asyncio.TaskGroup` class, an :ref:`asynchronous context "
"manager <async-context-managers>` holding a group of tasks that will wait "
"for all of them upon exit. For new code this is recommended over using "
":func:`~asyncio.create_task` and :func:`~asyncio.gather` directly. "
"(Contributed by Yury Selivanov and others in :gh:`90908`.)"
msgstr ""
"添加了 :class:`~asyncio.TaskGroup` 类，它是一个 :ref:`异步上下文管理器 <async-context-"
"managers>`，可以持有一组任务，等待它们全部完成后才退出。 对于新代码，建议使用此类，而不是直接使用 "
":func:`~asyncio.create_task` 和 :func:`~asyncio.gather`。 （由 Yury Selivanov "
"等人在 :gh:`90908` 中贡献。）"

#: ../../whatsnew/3.11.rst:585
msgid ""
"Added :func:`~asyncio.timeout`, an asynchronous context manager for setting "
"a timeout on asynchronous operations. For new code this is recommended over "
"using :func:`~asyncio.wait_for` directly. (Contributed by Andrew Svetlov in "
":gh:`90927`.)"
msgstr ""
"增加了 :func:`~asyncio.timeout`，一个用于在异步操作上设置超时的异步上下文管理器。 对于新代码推荐用这个来代替直接使用 "
":func:`~asyncio.wait_for`。 （由 Andrew Svetlov 在 :gh:`90927` 中贡献）"

#: ../../whatsnew/3.11.rst:590
msgid ""
"Added the :class:`~asyncio.Runner` class, which exposes the machinery used "
"by :func:`~asyncio.run`. (Contributed by Andrew Svetlov in :gh:`91218`.)"
msgstr ""
"增加了 :class:`~asyncio.Runner` 类，该类对外公开了 :func:`~asyncio.run` 所使用的机制。 （由 "
"Andrew Svetlov 在 :gh:`91218` 中贡献。）.)"

#: ../../whatsnew/3.11.rst:594
msgid ""
"Added the :class:`~asyncio.Barrier` class to the synchronization primitives "
"in the asyncio library, and the related :exc:`~asyncio.BrokenBarrierError` "
"exception. (Contributed by Yves Duprat and Andrew Svetlov in :gh:`87518`.)"
msgstr ""
"为 asyncio 库中的同步化原语添加了 :class:`~asyncio.Barrier` 类，以及相应的 "
":exc:`~asyncio.BrokenBarrierError` 异常。 （由 Yves Duprat 和 Andrew Svetlov 在 "
":gh:`87518` 中贡献。）"

#: ../../whatsnew/3.11.rst:599
msgid ""
"Added keyword argument *all_errors* to "
":meth:`asyncio.loop.create_connection` so that multiple connection errors "
"can be raised as an :exc:`ExceptionGroup`."
msgstr ""
"向 :meth:`asyncio.loop.create_connection` 添加了关键字参数 *all_errors* "
"以便可以将多个连接错误作为一个 :exc:`ExceptionGroup` 来引发。"

#: ../../whatsnew/3.11.rst:602
msgid ""
"Added the :meth:`asyncio.StreamWriter.start_tls` method for upgrading "
"existing stream-based connections to TLS. (Contributed by Ian Good in "
":issue:`34975`.)"
msgstr ""
"增加了 :meth:`asyncio.StreamWriter.start_tls` 方法用于将现有的基于流的连接升级为 TLS。 （由 Ian "
"Good 在 :issue:`34975` 中贡献。）"

#: ../../whatsnew/3.11.rst:606
msgid ""
"Added raw datagram socket functions to the event loop: "
":meth:`~asyncio.loop.sock_sendto`, :meth:`~asyncio.loop.sock_recvfrom` and "
":meth:`~asyncio.loop.sock_recvfrom_into`. These have implementations in "
":class:`~asyncio.SelectorEventLoop` and :class:`~asyncio.ProactorEventLoop`."
" (Contributed by Alex Grönholm in :issue:`46805`.)"
msgstr ""
"为事件循环添加了原始数据报套接字函数: :meth:`~asyncio.loop.sock_sendto`, "
":meth:`~asyncio.loop.sock_recvfrom` 和 "
":meth:`~asyncio.loop.sock_recvfrom_into`。 这些函数在 "
":class:`~asyncio.SelectorEventLoop` 和 :class:`~asyncio.ProactorEventLoop` "
"中均有实现。 （由 Alex Grönholm 在 :issue:`46805` 中贡献。）.)"

#: ../../whatsnew/3.11.rst:614
msgid ""
"Added :meth:`~asyncio.Task.cancelling` and :meth:`~asyncio.Task.uncancel` "
"methods to :class:`~asyncio.Task`. These are primarily intended for internal"
" use, notably by :class:`~asyncio.TaskGroup`."
msgstr ""
"为 :class:`~asyncio.Task` 添加了 :meth:`~asyncio.Task.cancelling` 和 "
":meth:`~asyncio.Task.uncancel` 方法。 它们主要供内部使用，特别是 "
":class:`~asyncio.TaskGroup`。"

#: ../../whatsnew/3.11.rst:623
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.11.rst:625
msgid ""
"Added non parallel-safe :func:`~contextlib.chdir` context manager to change "
"the current working directory and then restore it on exit. Simple wrapper "
"around :func:`~os.chdir`. (Contributed by Filipe Laíns in :issue:`25625`)"
msgstr ""
"增加了非并行安全的 :func:`~contextlib.chdir` 上下文管理器用来改变当前工作目录并在退出时恢复它。 是 "
":func:`~os.chdir` 的简单包装器。 （由 Filipe Laíns 在 :issue:`25625` 中贡献）)"

#: ../../whatsnew/3.11.rst:633
msgid "dataclasses"
msgstr "dataclasses"

#: ../../whatsnew/3.11.rst:635
msgid ""
"Change field default mutability check, allowing only defaults which are "
":term:`hashable` instead of any object which is not an instance of "
":class:`dict`, :class:`list` or :class:`set`. (Contributed by Eric V. Smith "
"in :issue:`44674`.)"
msgstr ""
"修改了字段默认的可变性检查，默认仅允许 :term:`hashable` 而非任何不为 :class:`dict`, :class:`list` 或 "
":class:`set` 实例的对象。 （由 Eric V. Smith 在 :issue:`44674` 中贡献。）"

#: ../../whatsnew/3.11.rst:644
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.11.rst:646
msgid ""
"Add :const:`datetime.UTC`, a convenience alias for "
":attr:`datetime.timezone.utc`. (Contributed by Kabir Kwatra in :gh:`91973`.)"
msgstr ""
"增加了 :const:`datetime.UTC`，是 :attr:`datetime.timezone.utc` 的便捷别名。 （由 Kabir "
"Kwatra 在 :gh:`91973` 中贡献。）"

#: ../../whatsnew/3.11.rst:649
msgid ""
":meth:`datetime.date.fromisoformat`, :meth:`datetime.time.fromisoformat` and"
" :meth:`datetime.datetime.fromisoformat` can now be used to parse most ISO "
"8601 formats (barring only those that support fractional hours and minutes)."
" (Contributed by Paul Ganssle in :gh:`80010`.)"
msgstr ""
":meth:`datetime.date.fromisoformat`, :meth:`datetime.time.fromisoformat` 和 "
":meth:`datetime.datetime.fromisoformat` 现在可以被用来解析大多数 ISO 8601 "
"格式（除了那些支持分数小时和分钟的格式）。 （由 Paul Ganssle 在 :gh:`80010` 中贡献。）"

#: ../../whatsnew/3.11.rst:658
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.11.rst:660
msgid ""
"Renamed :class:`!EnumMeta` to :class:`~enum.EnumType` (:class:`!EnumMeta` "
"kept as an alias)."
msgstr ""
"将 :class:`!EnumMeta` 重命名为 :class:`~enum.EnumType` (:class:`!EnumMeta` "
"作为别名保留)。"

#: ../../whatsnew/3.11.rst:663
msgid ""
"Added :class:`~enum.StrEnum`, with members that can be used as (and must be)"
" strings."
msgstr "增加了 :class:`~enum.StrEnum`，其成员可以（且必须）作为字符串使用。"

#: ../../whatsnew/3.11.rst:666
msgid ""
"Added :class:`~enum.ReprEnum`, which only modifies the "
":meth:`~object.__repr__` of members while returning their literal values "
"(rather than names) for :meth:`~object.__str__` and "
":meth:`~object.__format__` (used by :func:`str`, :func:`format` and "
":term:`f-string`\\s)."
msgstr ""
"增加了 :class:`~enum.ReprEnum`，它只是在为 :meth:`~object.__str__` 和 "
":meth:`~object.__format__` 方法（供 :func:`str`, :func:`format` 和 "
":term:`f-string` 使用）返回成员的字面值（而不是名称）时修改了它们的 :meth:`~object.__repr__`。"

#: ../../whatsnew/3.11.rst:672
msgid ""
"Changed :meth:`Enum.__format__() <enum.Enum.__format__>` (the default for "
":func:`format`, :meth:`str.format` and :term:`f-string`\\s) to always "
"produce the same result as :meth:`Enum.__str__() <enum.Enum.__str__>`:  for "
"enums inheriting from :class:`~enum.ReprEnum` it will be the member's value;"
" for all other enums it will be the enum and member name (e.g. "
"``Color.RED``)."
msgstr ""
"修改了 :meth:`Enum.__format__() <enum.Enum.__format__>` (为 :func:`format`, "
":meth:`str.format` 和 :term:`f-string` 的默认值) 以便始终产生于 :meth:`Enum.__str__() "
"<enum.Enum.__str__>` 相同的结果：对于继承自 :class:`~enum.ReprEnum` "
"的枚举它将成为其成员的值；对于所有其他枚举它将为枚举和成员名称 (例如 ``Color.RED``)。"

#: ../../whatsnew/3.11.rst:678
msgid ""
"Added a new *boundary* class parameter to :class:`~enum.Flag` enums and the "
":class:`~enum.FlagBoundary` enum with its options, to control how to handle "
"out-of-range flag values."
msgstr ""
"将新的 *boundary* 类形参连同其选项添加到 :class:`~enum.Flag` 枚举和 "
":class:`~enum.FlagBoundary` 枚举中，以控制超范围旗标值的处理方式。"

#: ../../whatsnew/3.11.rst:682
msgid ""
"Added the :func:`~enum.verify` enum decorator and the "
":class:`~enum.EnumCheck` enum with its options, to check enum classes "
"against several specific constraints."
msgstr ""
"增加了 :func:`~enum.verify` 枚举装饰器和 :class:`~enum.EnumCheck` "
"枚举及其选项，以基于特定约束条件来检查枚举类。"

#: ../../whatsnew/3.11.rst:686
msgid ""
"Added the :func:`~enum.member` and :func:`~enum.nonmember` decorators, to "
"ensure the decorated object is/is not converted to an enum member."
msgstr ""
"增加了 :func:`~enum.member` 和 :func:`~enum.nonmember` "
"装饰器，用于确保被装饰的对象是/否会被转换为枚举成员。"

#: ../../whatsnew/3.11.rst:689
msgid ""
"Added the :func:`~enum.property` decorator, which works like "
":func:`property` except for enums. Use this instead of "
":func:`types.DynamicClassAttribute`."
msgstr ""
"增加了 :func:`~enum.property` 装饰器，它类似于 :func:`property` 但是专门针对枚举。 请使用它来代替 "
":func:`types.DynamicClassAttribute`。"

#: ../../whatsnew/3.11.rst:693
msgid ""
"Added the :func:`~enum.global_enum` enum decorator, which adjusts "
":meth:`~object.__repr__` and :meth:`~object.__str__` to show values as "
"members of their module rather than the enum class. For example, "
"``'re.ASCII'`` for the :const:`~re.ASCII` member of :class:`re.RegexFlag` "
"rather than ``'RegexFlag.ASCII'``."
msgstr ""
"增加了 :func:`~enum.global_enum` 枚举装饰器，它会调整 :meth:`~object.__repr__` 和 "
":meth:`~object.__str__` 以将值显示为其模块的成员而不是枚举类的成员。 例如，``'re.ASCII'`` 是 "
":class:`re.RegexFlag` 的 :const:`~re.ASCII` 成员而不是 ``'RegexFlag.ASCII'``。"

#: ../../whatsnew/3.11.rst:699
msgid ""
"Enhanced :class:`~enum.Flag` to support :func:`len`, iteration and "
":keyword:`in`/:keyword:`not in` on its members. For example, the following "
"now works: ``len(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, "
"AFlag.TWO)``"
msgstr ""
"增强了 :class:`~enum.Flag` 以支持针对其成员的 :func:`len`，迭代和 "
":keyword:`in`/:keyword:`not in`。 例如，现在可以使用下面的代码: ``len(AFlag(3)) == 2 and "
"list(AFlag(3)) == (AFlag.ONE, AFlag.TWO)``"

#: ../../whatsnew/3.11.rst:704
msgid ""
"Changed :class:`~enum.Enum` and :class:`~enum.Flag` so that members are now "
"defined before :meth:`~object.__init_subclass__` is called; :func:`dir` now "
"includes methods, etc., from mixed-in data types."
msgstr ""
"修改了 :class:`~enum.Enum` 和 :class:`~enum.Flag` 使得成员的定义是在 "
":meth:`~object.__init_subclass__` 被调用之前；:func:`dir` 现在将包括来自混入数据类型的方法等。"

#: ../../whatsnew/3.11.rst:709
msgid ""
"Changed :class:`~enum.Flag` to only consider primary values (power of two) "
"canonical while composite values (``3``, ``6``, ``10``, etc.) are considered"
" aliases; inverted flags are coerced to their positive equivalent."
msgstr ""
"将 :class:`~enum.Flag` 修改为只考虑规范的基本值（即二的乘方）而复合值（如 ``3``, ``6``, ``10`` "
"等）则被视为别名；逆向旗标将被强制转换为对应的正向旗标。"

#: ../../whatsnew/3.11.rst:718
msgid "fcntl"
msgstr "fcntl"

#: ../../whatsnew/3.11.rst:720
msgid ""
"On FreeBSD, the :data:`!F_DUP2FD` and :data:`!F_DUP2FD_CLOEXEC` flags "
"respectively are supported, the former equals to ``dup2`` usage while the "
"latter set the ``FD_CLOEXEC`` flag in addition."
msgstr ""
"在 FreeBSD 上，:data:`!F_DUP2FD` 和 :data:`!F_DUP2FD_CLOEXEC` 旗标分别受到支持，前者等价于 "
"``dup2`` 用法而后者额外设置了 ``FD_CLOEXEC`` 旗标。"

#: ../../whatsnew/3.11.rst:728
msgid "fractions"
msgstr "fractions"

#: ../../whatsnew/3.11.rst:730
msgid ""
"Support :PEP:`515`-style initialization of :class:`~fractions.Fraction` from"
" string.  (Contributed by Sergey B Kirpichev in :issue:`44258`.)"
msgstr ""
"支持基于字符串执行 :PEP:`515` 网络的 :class:`~fractions.Fraction` 初始化。 （由 Sergey B "
"Kirpichev 在 :issue:`44258` 中贡献。）"

#: ../../whatsnew/3.11.rst:733
msgid ""
":class:`~fractions.Fraction` now implements an ``__int__`` method, so that "
"an ``isinstance(some_fraction, typing.SupportsInt)`` check passes. "
"(Contributed by Mark Dickinson in :issue:`44547`.)"
msgstr ""
":class:`~fractions.Fraction` 现在实现了一个 ``__int__`` 方法，因而 "
"``isinstance(some_fraction, typing.SupportsInt)`` 检测将会通过。 （由 Mark Dickinson "
"在 :issue:`44547` 中贡献。）"

#: ../../whatsnew/3.11.rst:741
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.11.rst:743
msgid ""
":func:`functools.singledispatch` now supports :class:`types.UnionType` and "
":class:`typing.Union` as annotations to the dispatch argument.::"
msgstr ""
"现在 :func:`functools.singledispatch` 支持以 :class:`types.UnionType` 和 "
":class:`typing.Union` 作为 dispatch 参数的标注。::"

#: ../../whatsnew/3.11.rst:746
msgid ""
">>> from functools import singledispatch\n"
">>> @singledispatch\n"
"... def fun(arg, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Let me just say,\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> @fun.register\n"
"... def _(arg: int | float, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Strength in numbers, eh?\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> from typing import Union\n"
">>> @fun.register\n"
"... def _(arg: Union[list, set], verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Enumerate this:\")\n"
"...     for i, elem in enumerate(arg):\n"
"...         print(i, elem)\n"
"..."
msgstr ""
">>> from functools import singledispatch\n"
">>> @singledispatch\n"
"... def fun(arg, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Let me just say,\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> @fun.register\n"
"... def _(arg: int | float, verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Strength in numbers, eh?\", end=\" \")\n"
"...     print(arg)\n"
"...\n"
">>> from typing import Union\n"
">>> @fun.register\n"
"... def _(arg: Union[list, set], verbose=False):\n"
"...     if verbose:\n"
"...         print(\"Enumerate this:\")\n"
"...     for i, elem in enumerate(arg):\n"
"...         print(i, elem)\n"
"..."

#: ../../whatsnew/3.11.rst:768
msgid "(Contributed by Yurii Karabas in :issue:`46014`.)"
msgstr "（由 Yurii Karabas 在 :issue:`46014` 中贡献。）"

#: ../../whatsnew/3.11.rst:774
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.11.rst:776
msgid ""
"The :func:`gzip.compress` function is now faster when used with the "
"**mtime=0** argument as it delegates the compression entirely to a single "
":func:`zlib.compress` operation. There is one side effect of this change: "
"The gzip file header contains an \"OS\" byte in its header. That was "
"traditionally always set to a value of 255 representing \"unknown\" by the "
":mod:`gzip` module. Now, when using :func:`~gzip.compress` with **mtime=0**,"
" it may be set to a different value by the underlying zlib C library Python "
"was linked against. (See :gh:`112346` for details on the side effect.)"
msgstr ""
"现在 :func:`gzip.compress` 函数当传入 **mtime=0** 参数时会更快速因为它把压缩任务完全委托给单独的 "
":func:`zlib.compress` 操作。 此项改变有一个附带影响：gzip 文件标头将在其标头中包含一个 \"OS\" 字节。 "
"在传统上它总是会被 :mod:`gzip` 模块设为代表 \"unknown\" 的值 255。 现在，当使用 "
":func:`~gzip.compress` 并传入 **mtime=0** 时，它可以被 Python 所链接的下层 zlib C 库设为不同的值。 "
"（请参阅 :gh:`112346` 了解此附带影响的详情。）"

#: ../../whatsnew/3.11.rst:789
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.11.rst:791
msgid ""
":func:`hashlib.blake2b` and :func:`hashlib.blake2s` now prefer `libb2`_ over"
" Python's vendored copy. (Contributed by Christian Heimes in "
":issue:`47095`.)"
msgstr ""
":func:`hashlib.blake2b` 和 :func:`hashlib.blake2s` 现在将优先使用 `libb2`_ 而不是 "
"Python 自带的副本。 （由 Christian Heimes 在 :issue:`47095` 中贡献。）"

#: ../../whatsnew/3.11.rst:795
msgid ""
"The internal ``_sha3`` module with SHA3 and SHAKE algorithms now uses "
"*tiny_sha3* instead of the *Keccak Code Package* to reduce code and binary "
"size. The :mod:`hashlib` module prefers optimized SHA3 and SHAKE "
"implementations from OpenSSL. The change affects only installations without "
"OpenSSL support. (Contributed by Christian Heimes in :issue:`47098`.)"
msgstr ""
"包含 SHA3 和 SHAKE 的内部 ``_sha3`` 模块现在会使用 *tiny_sha3* 而不是 *Keccak Code Package* "
"来减小代码和二进制文件的大小。 :mod:`hashlib` 模块将首选来自 OpenSSL 的优化版 SHA3 和 SHAKE 实现。 "
"这个改变将只影响不带 OpenSSL 支持的安装版。 （由 Christian Heimes 在 :issue:`47098` 中贡献。）"

#: ../../whatsnew/3.11.rst:802
msgid ""
"Add :func:`hashlib.file_digest`, a helper function for efficient hashing of "
"files or file-like objects. (Contributed by Christian Heimes in "
":gh:`89313`.)"
msgstr ""
"增加了 :func:`hashlib.file_digest`，一个针对文件或文件型对象高效哈希运算的辅助函数。 （由 Christian Heimes"
" 在 :gh:`89313` 中贡献。）"

#: ../../whatsnew/3.11.rst:810
msgid "IDLE and idlelib"
msgstr "IDLE 与 idlelib"

#: ../../whatsnew/3.11.rst:812
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"对 ``.pyi`` 文件应用语法高亮。 （由 Alex Waygood 和 Terry Jan Reedy 在 :issue:`45447` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:815
msgid ""
"Include prompts when saving Shell with inputs and outputs. (Contributed by "
"Terry Jan Reedy in :gh:`95191`.)"
msgstr "当附带输入和输出地保存 Shell 时将包括提示符。 （由 Terry Jan Reedy 在 :gh:`95191` 中贡献。）"

#: ../../whatsnew/3.11.rst:822
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.11.rst:824
msgid ""
"Add :func:`~inspect.getmembers_static` to return all members without "
"triggering dynamic lookup via the descriptor protocol. (Contributed by "
"Weipeng Hong in :issue:`30533`.)"
msgstr ""
"增加了 :func:`~inspect.getmembers_static` 用于返回所有成员而不通过描述器协议触发动态查找。 （由 Weipeng "
"Hong 在 :issue:`30533` 中贡献。）"

#: ../../whatsnew/3.11.rst:828
msgid ""
"Add :func:`~inspect.ismethodwrapper` for checking if the type of an object "
"is a :class:`~types.MethodWrapperType`. (Contributed by Hakan Çelik in "
":issue:`29418`.)"
msgstr ""
"增加了 :func:`~inspect.ismethodwrapper` 用于检查某个对象的类型是否为 "
":class:`~types.MethodWrapperType`。 （由 Hakan Çelik 在 :issue:`29418` 中贡献。）"

#: ../../whatsnew/3.11.rst:832
msgid ""
"Change the frame-related functions in the :mod:`inspect` module to return "
"new :class:`~inspect.FrameInfo` and :class:`~inspect.Traceback` class "
"instances (backwards compatible with the previous :term:`named tuple`-like "
"interfaces) that includes the extended :pep:`657` position information (end "
"line number, column and end column). The affected functions are:"
msgstr ""
"修改了 :mod:`inspect` 模块中与帧相关的函数以返回新的 :class:`~inspect.FrameInfo` 和 "
":class:`~inspect.Traceback` 类实例（与之前的 :term:`named tuple` "
"风格的接口保持向下兼容），它们包括扩展的 :pep:`657` 位置信息（末尾行编号，列与结束列等）。 受影响的函数有:"

#: ../../whatsnew/3.11.rst:838
msgid ":func:`inspect.getframeinfo`"
msgstr ":func:`inspect.getframeinfo`"

#: ../../whatsnew/3.11.rst:839
msgid ":func:`inspect.getouterframes`"
msgstr ":func:`inspect.getouterframes`"

#: ../../whatsnew/3.11.rst:840
msgid ":func:`inspect.getinnerframes`,"
msgstr ":func:`inspect.getinnerframes`,"

#: ../../whatsnew/3.11.rst:841
msgid ":func:`inspect.stack`"
msgstr ":func:`inspect.stack`"

#: ../../whatsnew/3.11.rst:842
msgid ":func:`inspect.trace`"
msgstr ":func:`inspect.trace`"

#: ../../whatsnew/3.11.rst:844
msgid "(Contributed by Pablo Galindo in :gh:`88116`.)"
msgstr "（由 Pablo Galindo 在 :gh:`88116` 中贡献。）"

#: ../../whatsnew/3.11.rst:850
msgid "locale"
msgstr "locale"

#: ../../whatsnew/3.11.rst:852
msgid ""
"Add :func:`locale.getencoding` to get the current locale encoding. It is "
"similar to ``locale.getpreferredencoding(False)`` but ignores the "
":ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""
"增加了 :func:`locale.getencoding` 以获取当前语言区域编码格式。 它类似于 "
"``locale.getpreferredencoding(False)`` 但会忽略 :ref:`Python UTF-8 模式 "
"<utf8-mode>`。"

#: ../../whatsnew/3.11.rst:860
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.11.rst:862
msgid ""
"Added :func:`~logging.getLevelNamesMapping` to return a mapping from logging"
" level names (e.g. ``'CRITICAL'``) to the values of their corresponding "
":ref:`levels` (e.g. ``50``, by default). (Contributed by Andrei Kulakovin in"
" :gh:`88024`.)"
msgstr ""
"增加了 :func:`~logging.getLevelNamesMapping` 以返回一个从日志记录级别名称 (例如 ``'CRITICAL'``)"
" 到其对应 :ref:`levels` 值 (例如默认值 ``50``) 的映射。 （由 Andrei Kulakovin 在 :gh:`88024` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:867
msgid ""
"Added a :meth:`~logging.handlers.SysLogHandler.createSocket` method to "
":class:`~logging.handlers.SysLogHandler`, to match "
":meth:`SocketHandler.createSocket() "
"<logging.handlers.SocketHandler.createSocket>`. It is called automatically "
"during handler initialization and when emitting an event, if there is no "
"active socket. (Contributed by Kirill Pinchuk in :gh:`88457`.)"
msgstr ""
"向 :class:`~logging.handlers.SysLogHandler` 增加了 "
":meth:`~logging.handlers.SysLogHandler.createSocket` 方法以匹配 "
":meth:`SocketHandler.createSocket() "
"<logging.handlers.SocketHandler.createSocket>`。 "
"它将在处理器初始化期间以及发出事件时被自动调用，如果没有已激活的套接字的话。 （由 Kirill Pinchuk 在 :gh:`88457` 中贡献。）"

#: ../../whatsnew/3.11.rst:879
msgid "math"
msgstr "math"

#: ../../whatsnew/3.11.rst:881
msgid ""
"Add :func:`math.exp2`: return 2 raised to the power of x. (Contributed by "
"Gideon Mitchell in :issue:`45917`.)"
msgstr ""
"增加了 :func:`math.exp2`: 返回 2 的 x 次幂。 （由 Gideon Mitchell 在 :issue:`45917` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:884
msgid ""
"Add :func:`math.cbrt`: return the cube root of x. (Contributed by Ajith "
"Ramachandran in :issue:`44357`.)"
msgstr ""
"增加了 :func:`math.cbrt`: 返回 x 的立方根。 （由 Ajith Ramachandran 在 :issue:`44357` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:887
msgid ""
"The behaviour of two :func:`math.pow` corner cases was changed, for "
"consistency with the IEEE 754 specification. The operations ``math.pow(0.0, "
"-math.inf)`` and ``math.pow(-0.0, -math.inf)`` now return ``inf``. "
"Previously they raised :exc:`ValueError`. (Contributed by Mark Dickinson in "
":issue:`44339`.)"
msgstr ""
"两个 :func:`math.pow` 边界情况的行为已改变，以便与 IEEE 754 规范保持一致。 ``math.pow(0.0, "
"-math.inf)`` 和 ``math.pow(-0.0, -math.inf)`` 等运算现在将返回 ``inf``。 在此之前它们会引发 "
":exc:`ValueError`。 （由 Mark Dickinson 在 :issue:`44339` 中贡献。）"

#: ../../whatsnew/3.11.rst:893
msgid ""
"The :data:`math.nan` value is now always available. (Contributed by Victor "
"Stinner in :issue:`46917`.)"
msgstr "现在 :data:`math.nan` 值将总是可用。 （由 Victor Stinner 在 :issue:`46917` 中贡献。）"

#: ../../whatsnew/3.11.rst:900
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.11.rst:902
msgid ""
"A new function ``operator.call`` has been added, such that "
"``operator.call(obj, *args, **kwargs) == obj(*args, **kwargs)``. "
"(Contributed by Antony Lee in :issue:`44019`.)"
msgstr ""
"增加了一个新函数 ``operator.call``，使得 ``operator.call(obj, *args, **kwargs) == "
"obj(*args, **kwargs)``。 （由 Antony Lee 在 :issue:`44019` 中贡献。）"

#: ../../whatsnew/3.11.rst:910
msgid "os"
msgstr "os"

#: ../../whatsnew/3.11.rst:912
msgid ""
"On Windows, :func:`os.urandom` now uses ``BCryptGenRandom()``, instead of "
"``CryptGenRandom()`` which is deprecated. (Contributed by Donghee Na in "
":issue:`44611`.)"
msgstr ""
"在 Windows 上，:func:`os.urandom` 现在将使用 ``BCryptGenRandom()``，而不是已被弃用的 "
"``CryptGenRandom()``。 （由 Donghee Na 在 :issue:`44611` 中贡献。）"

#: ../../whatsnew/3.11.rst:920
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.11.rst:922
msgid ""
":meth:`~pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` return only "
"directories if *pattern* ends with a pathname components separator: "
":data:`~os.sep` or :data:`~os.altsep`. (Contributed by Eisuke Kawasima in "
":issue:`22276` and :issue:`33392`.)"
msgstr ""
":meth:`~pathlib.Path.glob` 和 :meth:`~pathlib.Path.rglob` 在 *pattern* "
"以路径组件分隔符即 :data:`~os.sep` 或 :data:`~os.altsep` 结束时将只返回目录。 （由 Eisuke Kawasima"
" 在 :issue:`22276` 和 :issue:`33392` 中贡献。）"

#: ../../whatsnew/3.11.rst:931
msgid "re"
msgstr "re"

#: ../../whatsnew/3.11.rst:933
msgid ""
"Atomic grouping (``(?>...)``) and possessive quantifiers (``*+``, ``++``, "
"``?+``, ``{m,n}+``) are now supported in regular expressions. (Contributed "
"by Jeffrey C. Jacobs and Serhiy Storchaka in :issue:`433030`.)"
msgstr ""
"正则表达式现已支持原子化分组 (``(?>...)``) 和占有型数量限定符 (``*+``, ``++``, ``?+``, ``{m,n}+``)。"
" （由 Jeffrey C. Jacobs 和 Serhiy Storchaka 在 :issue:`433030` 中贡献。）"

#: ../../whatsnew/3.11.rst:941
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.11.rst:943
msgid ""
"Add optional parameter *dir_fd* in :func:`shutil.rmtree`. (Contributed by "
"Serhiy Storchaka in :issue:`46245`.)"
msgstr ""
"在 :func:`shutil.rmtree` 中添加了可选形参 *dir_fd*。 （由 Serhiy Storchaka 在 "
":issue:`46245` 中贡献。）"

#: ../../whatsnew/3.11.rst:950
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.11.rst:952
msgid ""
"Add CAN Socket support for NetBSD. (Contributed by Thomas Klausner in "
":issue:`30512`.)"
msgstr "为 NetBSD 添加了 CAN Socket 支持。 （由 Thomas Klausner 在 :issue:`30512` 中贡献。）"

#: ../../whatsnew/3.11.rst:955
msgid ""
":meth:`~socket.create_connection` has an option to raise, in case of failure"
" to connect, an :exc:`ExceptionGroup` containing all errors instead of only "
"raising the last error. (Contributed by Irit Katriel in :issue:`29980`.)"
msgstr ""
":meth:`~socket.create_connection` 具有一个在连接失败的情况下引发包含所有错误而的 "
":exc:`ExceptionGroup` 不是只引发最后的错误的选项。 （由 Irit Katriel 在 :issue:`29980` 中贡献。）"

#: ../../whatsnew/3.11.rst:964
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.11.rst:966
msgid ""
"You can now disable the authorizer by passing :const:`None` to "
":meth:`~sqlite3.Connection.set_authorizer`. (Contributed by Erlend E. "
"Aasland in :issue:`44491`.)"
msgstr ""
"你现在可以通过将 :const:`None` 传给 :meth:`~sqlite3.Connection.set_authorizer` "
"来禁用身份验证。 （由 Erlend E. Aasland 在 :issue:`44491` 中贡献。）"

#: ../../whatsnew/3.11.rst:970
msgid ""
"Collation name :meth:`~sqlite3.Connection.create_collation` can now contain "
"any Unicode character.  Collation names with invalid characters now raise "
":exc:`UnicodeEncodeError` instead of :exc:`sqlite3.ProgrammingError`. "
"(Contributed by Erlend E. Aasland in :issue:`44688`.)"
msgstr ""
"排序名 :meth:`~sqlite3.Connection.create_collation` 现在可以包含任意 Unicode 字符。 "
"带有无效字符的排序名现在将引发 :exc:`UnicodeEncodeError` 而不是 "
":exc:`sqlite3.ProgrammingError`。 （由 Erlend E. Aasland 在 :issue:`44688` 中贡献。）"

#: ../../whatsnew/3.11.rst:975
msgid ""
":mod:`sqlite3` exceptions now include the SQLite extended error code as "
":attr:`~sqlite3.Error.sqlite_errorcode` and the SQLite error name as "
":attr:`~sqlite3.Error.sqlite_errorname`. (Contributed by Aviv Palivoda, "
"Daniel Shahaf, and Erlend E. Aasland in :issue:`16379` and :issue:`24139`.)"
msgstr ""
"现在 :mod:`sqlite3` 异常包括以 :attr:`~sqlite3.Error.sqlite_errorcode` 代表的 SQLite "
"扩展错误码和以 :attr:`~sqlite3.Error.sqlite_errorname` 代表的 SQLite 错误名。 （由 Aviv "
"Palivoda, Daniel Shahaf 和 Erlend E. Aasland 在 :issue:`16379` 和 "
":issue:`24139` 中贡献。）"

#: ../../whatsnew/3.11.rst:981
msgid ""
"Add :meth:`~sqlite3.Connection.setlimit` and "
":meth:`~sqlite3.Connection.getlimit` to :class:`sqlite3.Connection` for "
"setting and getting SQLite limits by connection basis. (Contributed by "
"Erlend E. Aasland in :issue:`45243`.)"
msgstr ""
"向 :class:`sqlite3.Connection` 添加了 :meth:`~sqlite3.Connection.setlimit` 和 "
":meth:`~sqlite3.Connection.getlimit` 用于在连接上设置和获取 SQLite 限制。 （由 Erlend E. "
"Aasland 在 :issue:`45243` 中贡献。）"

#: ../../whatsnew/3.11.rst:986
msgid ""
":mod:`sqlite3` now sets :attr:`sqlite3.threadsafety` based on the default "
"threading mode the underlying SQLite library has been compiled with. "
"(Contributed by Erlend E. Aasland in :issue:`45613`.)"
msgstr ""
"现在 :mod:`sqlite3` 会基于兼容底层 SQLite 库的默认线程模式来设置 :attr:`sqlite3.threadsafety`。 "
"（由 Erlend E. Aasland 在 :issue:`45613` 中贡献。）"

#: ../../whatsnew/3.11.rst:990
msgid ""
":mod:`sqlite3` C callbacks now use unraisable exceptions if callback "
"tracebacks are enabled. Users can now register an :func:`unraisable hook "
"handler <sys.unraisablehook>` to improve their debug experience. "
"(Contributed by Erlend E. Aasland in :issue:`45828`.)"
msgstr ""
"现在 :mod:`sqlite3` C 回调会在启用了回调回溯的情况下使用不可引发的异常。 用户现在可以注册 :func:`不可引发的钩子处理器 "
"<sys.unraisablehook>` 来提升其调试体验。 （由 Erlend E. Aasland 在 :issue:`45828` 中贡献。）"

#: ../../whatsnew/3.11.rst:996
msgid ""
"Fetch across rollback no longer raises :exc:`~sqlite3.InterfaceError`. "
"Instead we leave it to the SQLite library to handle these cases. "
"(Contributed by Erlend E. Aasland in :issue:`44092`.)"
msgstr ""
"跨回滚的获取不会再引发 :exc:`~sqlite3.InterfaceError`。 而是改为由 SQLite 库来处理这类情况。 （由 Erlend"
" E. Aasland 在 :issue:`44092` 中贡献。）"

#: ../../whatsnew/3.11.rst:1000
msgid ""
"Add :meth:`~sqlite3.Connection.serialize` and "
":meth:`~sqlite3.Connection.deserialize` to :class:`sqlite3.Connection` for "
"serializing and deserializing databases. (Contributed by Erlend E. Aasland "
"in :issue:`41930`.)"
msgstr ""
"向 :class:`sqlite3.Connection` 添加了 :meth:`~sqlite3.Connection.serialize` 和 "
":meth:`~sqlite3.Connection.deserialize` 用于序列化和反序列化数据库。 （由 Erlend E. Aasland "
"在 :issue:`41930` 中贡献。）"

#: ../../whatsnew/3.11.rst:1005
msgid ""
"Add :meth:`~sqlite3.Connection.create_window_function` to "
":class:`sqlite3.Connection` for creating aggregate window functions. "
"(Contributed by Erlend E. Aasland in :issue:`34916`.)"
msgstr ""
"向 :class:`sqlite3.Connection` 添加了 "
":meth:`~sqlite3.Connection.create_window_function` 用于创建聚合窗口函数。 （由 Erlend E. "
"Aasland 在 :issue:`34916` 中贡献。）"

#: ../../whatsnew/3.11.rst:1009
msgid ""
"Add :meth:`~sqlite3.Connection.blobopen` to :class:`sqlite3.Connection`. "
":class:`sqlite3.Blob` allows incremental I/O operations on blobs. "
"(Contributed by Aviv Palivoda and Erlend E. Aasland in :issue:`24905`.)"
msgstr ""
"向 :class:`sqlite3.Connection` 添加了 :meth:`~sqlite3.Connection.blobopen`。 "
":class:`sqlite3.Blob` 允许对 blob 进行增量 I/O 操作。 （由 Aviv Palivoda 和 Erlend E. "
"Aasland 在 :issue:`24905` 中贡献。）"

#: ../../whatsnew/3.11.rst:1017
msgid "string"
msgstr "string"

#: ../../whatsnew/3.11.rst:1019
msgid ""
"Add :meth:`~string.Template.get_identifiers` and "
":meth:`~string.Template.is_valid` to :class:`string.Template`, which "
"respectively return all valid placeholders, and whether any invalid "
"placeholders are present. (Contributed by Ben Kehoe in :gh:`90465`.)"
msgstr ""
"向 :class:`string.Template` 添加了 :meth:`~string.Template.get_identifiers` 和 "
":meth:`~string.Template.is_valid`，它们分别返回全部的有效占位符，以及是否存在无效占位符。 （由 Ben Kehoe 在"
" :gh:`90465` 中贡献。）"

#: ../../whatsnew/3.11.rst:1029
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.11.rst:1031
msgid ""
":func:`sys.exc_info` now derives the ``type`` and ``traceback`` fields from "
"the ``value`` (the exception instance), so when an exception is modified "
"while it is being handled, the changes are reflected in the results of "
"subsequent calls to :func:`!exc_info`. (Contributed by Irit Katriel in "
":issue:`45711`.)"
msgstr ""
":func:`sys.exc_info` 的 ``type`` 和 ``traceback`` 字段现在是派生自 ``value`` "
"(异常实例)，因此当一个异常在处理期间被修改时，其变化会在后续对 :func:`!exc_info` 的调用结果中反映出来。 （由 Irit "
"Katriel 在 :issue:`45711` 中贡献。）"

#: ../../whatsnew/3.11.rst:1037
msgid ""
"Add :func:`sys.exception` which returns the active exception instance "
"(equivalent to ``sys.exc_info()[1]``). (Contributed by Irit Katriel in "
":issue:`46328`.)"
msgstr ""
"增加了返回激活的异常实例的 :func:`sys.exception` (等价于 ``sys.exc_info()[1]``)。 （由 Irit "
"Katriel 在 :issue:`46328` 中贡献。）"

#: ../../whatsnew/3.11.rst:1041
msgid ""
"Add the :data:`sys.flags.safe_path <sys.flags>` flag. (Contributed by Victor"
" Stinner in :gh:`57684`.)"
msgstr ""
"增加了 :data:`sys.flags.safe_path <sys.flags>` 旗标。 （由 Victor Stinner 在 "
":gh:`57684` 中贡献。）"

#: ../../whatsnew/3.11.rst:1048
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.11.rst:1050
msgid ""
"Three new :ref:`installation schemes <installation_paths>` (*posix_venv*, "
"*nt_venv* and *venv*) were added and are used when Python creates new "
"virtual environments or when it is running from a virtual environment. The "
"first two schemes (*posix_venv* and *nt_venv*) are OS-specific for non-"
"Windows and Windows, the *venv* is essentially an alias to one of them "
"according to the OS Python runs on. This is useful for downstream "
"distributors who modify :func:`sysconfig.get_preferred_scheme`. Third party "
"code that creates new virtual environments should use the new *venv* "
"installation scheme to determine the paths, as does :mod:`venv`. "
"(Contributed by Miro Hrončok in :issue:`45413`.)"
msgstr ""
"增加了三个新的 :ref:`安装方案 <installation_paths>` (*posix_venv*, *nt_venv* and "
"*venv*) 并将在 Python 创建新虚拟环境或从虚拟环境运行时使用。 前两个方案 (*posix_venv* 和 *nt_venv*) 是用于非"
" Windows 和 Windows 的 OS 专属方案，*venv* 实际上是根据 Python 运行所在的 OS 来确定的前两者之一。 这对于要修改"
" :func:`sysconfig.get_preferred_scheme` 的下游分发者来说很有用处。 创建新虚拟环境的第三方代码应当使用新的 "
"*venv* 安装方案来确定路径，就像 :mod:`venv` 所做的那样。 （由 Miro Hrončok 在 :issue:`45413` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:1067
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.11.rst:1069
msgid ""
":class:`~tempfile.SpooledTemporaryFile` objects now fully implement the "
"methods of :class:`io.BufferedIOBase` or :class:`io.TextIOBase` (depending "
"on file mode). This lets them work correctly with APIs that expect file-like"
" objects, such as compression modules. (Contributed by Carey Metcalfe in "
":gh:`70363`.)"
msgstr ""
":class:`~tempfile.SpooledTemporaryFile` 对象现在完整实现了 :class:`io.BufferedIOBase`"
" 或 :class:`io.TextIOBase` 的方法（取决于具体文件模式）。 这使它们能正确地配合接受文件型对象的 API "
"工作，如压缩文件的模块。 （由 Carey Metcalfe 在 :gh:`70363` 中贡献。）"

#: ../../whatsnew/3.11.rst:1080
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.11.rst:1082
msgid ""
"On Unix, if the ``sem_clockwait()`` function is available in the C library "
"(glibc 2.30 and newer), the :meth:`threading.Lock.acquire` method now uses "
"the monotonic clock (:const:`time.CLOCK_MONOTONIC`) for the timeout, rather "
"than using the system clock (:const:`time.CLOCK_REALTIME`), to not be "
"affected by system clock changes. (Contributed by Victor Stinner in "
":issue:`41710`.)"
msgstr ""
"在 Unix 上，如果 ``sem_clockwait()`` 函数存在于 C 库中 (即glibc 2.30 及更新的版本)，则 "
":meth:`threading.Lock.acquire` 方法现在将使用单调时钟 (:const:`time.CLOCK_MONOTONIC`) "
"来计算超时，而不使用系统时钟 (:const:`time.CLOCK_REALTIME`)，以不受系统时钟修改的影响。 （由 Victor "
"Stinner 在 :issue:`41710` 中贡献。）"

#: ../../whatsnew/3.11.rst:1093
msgid "time"
msgstr "time"

#: ../../whatsnew/3.11.rst:1095
msgid ""
"On Unix, :func:`time.sleep` now uses the ``clock_nanosleep()`` or "
"``nanosleep()`` function, if available, which has a resolution of 1 "
"nanosecond (10\\ :sup:`-9` seconds), rather than using ``select()`` which "
"has a resolution of 1 microsecond (10\\ :sup:`-6` seconds). (Contributed by "
"Benjamin Szőke and Victor Stinner in :issue:`21302`.)"
msgstr ""
"在 Unix 上，如果有可能，:func:`time.sleep` 现在将使用 ``clock_nanosleep()`` 或 "
"``nanosleep()`` 函数，其精度为 1 纳秒 (10\\ :sup:`-9` 秒)，而不是使用精度为 1 微秒 (10\\ "
":sup:`-6` 秒) 的 ``select()``。 （由 Benjamin Szőke 和 Victor Stinner 在 "
":issue:`21302` 中贡献。）"

#: ../../whatsnew/3.11.rst:1101
msgid ""
"On Windows 8.1 and newer, :func:`time.sleep` now uses a waitable timer based"
" on `high-resolution timers <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/kernel/high-resolution-timers>`_ which has a resolution of "
"100 nanoseconds (10\\ :sup:`-7` seconds). Previously, it had a resolution of"
" 1 millisecond (10\\ :sup:`-3` seconds). (Contributed by Benjamin Szőke, "
"Donghee Na, Eryk Sun and Victor Stinner in :issue:`21302` and "
":issue:`45429`.)"
msgstr ""
"在 Windows 8.1 或更新版本上，现在 :func:`time.sleep` 会使用一个基于 `高精度计时器 "
"<https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/high-"
"resolution-timers>`_ 的可等待计时器，其精度为 100 纳秒 (10\\ :sup:`-7` 秒)。 在之前版本中，其精度为 1 "
"毫秒 (10\\ :sup:`-3` 秒)。 （由 Benjamin Szőke, Donghee Na, Eryk Sun 和 Victor "
"Stinner 在 :issue:`21302` 和 :issue:`45429` 中贡献。）"

#: ../../whatsnew/3.11.rst:1112
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.11.rst:1114
msgid ""
"Added method ``info_patchlevel()`` which returns the exact version of the "
"Tcl library as a named tuple similar to :data:`sys.version_info`. "
"(Contributed by Serhiy Storchaka in :gh:`91827`.)"
msgstr ""
"增加了将 Tcl 库的准确版本号作为类似 :data:`sys.version_info` 的命名元组返回的方法 "
"``info_patchlevel()``。 （由 Serhiy Storchaka 在 :gh:`91827` 中贡献。）"

#: ../../whatsnew/3.11.rst:1122
msgid "traceback"
msgstr "traceback -- 回溯"

#: ../../whatsnew/3.11.rst:1124
msgid ""
"Add :func:`traceback.StackSummary.format_frame_summary` to allow users to "
"override which frames appear in the traceback, and how they are formatted. "
"(Contributed by Ammar Askar in :issue:`44569`.)"
msgstr ""
"增加了 :func:`traceback.StackSummary.format_frame_summary` "
"以允许用户重载要在回溯中出现哪些帧，以及要如何格式化它们。 （由 Ammar Askar 在 :issue:`44569` 中贡献。）"

#: ../../whatsnew/3.11.rst:1129
msgid ""
"Add :func:`traceback.TracebackException.print`, which prints the formatted "
":exc:`~traceback.TracebackException` instance to a file. (Contributed by "
"Irit Katriel in :issue:`33809`.)"
msgstr ""
"增加了 :func:`traceback.TracebackException.print`，该函数可将 "
":exc:`~traceback.TracebackException` 实例格式化打印到一个文件。 （由 Irit Katriel 在 "
":issue:`33809` 中贡献。）"

#: ../../whatsnew/3.11.rst:1137
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.11.rst:1139
msgid "For major changes, see :ref:`new-feat-related-type-hints-311`."
msgstr "主要的变化，请参阅 :ref:`new-feat-related-type-hints-311`。"

#: ../../whatsnew/3.11.rst:1141
msgid ""
"Add :func:`typing.assert_never` and :class:`typing.Never`. "
":func:`typing.assert_never` is useful for asking a type checker to confirm "
"that a line of code is not reachable. At runtime, it raises an "
":exc:`AssertionError`. (Contributed by Jelle Zijlstra in :gh:`90633`.)"
msgstr ""
"增加了 :func:`typing.assert_never` 和 :class:`typing.Never`。 "
":func:`typing.assert_never` 适用于要求类型检查器确认某一行代码是不可达的。 在运行时，它会引发 "
":exc:`AssertionError`。 （由 Jelle Zijlstra 在 :gh:`90633` 中贡献。）"

#: ../../whatsnew/3.11.rst:1147
msgid ""
"Add :func:`typing.reveal_type`. This is useful for asking a type checker "
"what type it has inferred for a given expression. At runtime it prints the "
"type of the received value. (Contributed by Jelle Zijlstra in :gh:`90572`.)"
msgstr ""
"增加了 :func:`typing.reveal_type`。 它适用于让类型检查器推理出给定表达式的类型。 在运行时它会打印所接收的值的类型。 （由 "
"Jelle Zijlstra 在 :gh:`90572` 中贡献。）"

#: ../../whatsnew/3.11.rst:1152
msgid ""
"Add :func:`typing.assert_type`. This is useful for asking a type checker to "
"confirm that the type it has inferred for a given expression matches the "
"given type. At runtime it simply returns the received value. (Contributed by"
" Jelle Zijlstra in :gh:`90638`.)"
msgstr ""
"增加了 :func:`typing.assert_type`。 它适用于让类型检查器确认推理出的给定表达式的类型与给定的类型相匹配。 "
"在运行时它将简单地返回所接收的值。 （由 Jelle Zijlstra 在 :gh:`90638` 中贡献。）"

#: ../../whatsnew/3.11.rst:1157
msgid ""
":data:`typing.TypedDict` types can now be generic. (Contributed by Samodya "
"Abeysiriwardane in :gh:`89026`.)"
msgstr ""
"现在 :data:`typing.TypedDict` 类型可以是泛型。 （由 Samodya Abeysiriwardane 在 "
":gh:`89026` 中贡献。）"

#: ../../whatsnew/3.11.rst:1160
msgid ""
":class:`~typing.NamedTuple` types can now be generic. (Contributed by Serhiy"
" Storchaka in :issue:`43923`.)"
msgstr ""
"现在 :class:`~typing.NamedTuple` 类型可以是泛型。 （由 Serhiy Storchaka 在 :issue:`43923`"
" 中贡献。）"

#: ../../whatsnew/3.11.rst:1163
msgid ""
"Allow subclassing of :class:`typing.Any`. This is useful for avoiding type "
"checker errors related to highly dynamic class, such as mocks. (Contributed "
"by Shantanu Jain in :gh:`91154`.)"
msgstr ""
"允许 :class:`typing.Any` 子类化。 这适用于避免关联到高度动态类的类型检查器错误，例如 mock 类。 （由 Shantanu "
"Jain 在 :gh:`91154` 中贡献。）"

#: ../../whatsnew/3.11.rst:1167
msgid ""
"The :func:`typing.final` decorator now sets the ``__final__`` attributed on "
"the decorated object. (Contributed by Jelle Zijlstra in :gh:`90500`.)"
msgstr ""
"现在 :func:`typing.final` 装饰器可在被装饰的对象上设置 ``__final__`` 属性。 （由 Jelle Zijlstra 在"
" :gh:`90500` 中贡献。）"

#: ../../whatsnew/3.11.rst:1171
msgid ""
"The :func:`typing.get_overloads` function can be used for introspecting the "
"overloads of a function. :func:`typing.clear_overloads` can be used to clear"
" all registered overloads of a function. (Contributed by Jelle Zijlstra in "
":gh:`89263`.)"
msgstr ""
":func:`typing.get_overloads` 函数可被用来内省一个函数的重载。 :func:`typing.clear_overloads`"
" 可被用来清理一个函数所有的重载。 （由 Jelle Zijlstra 在 :gh:`89263` 中贡献。）"

#: ../../whatsnew/3.11.rst:1176
msgid ""
"The :meth:`~object.__init__` method of :class:`~typing.Protocol` subclasses "
"is now preserved. (Contributed by Adrian Garcia Badarasco in :gh:`88970`.)"
msgstr ""
"现在 :class:`~typing.Protocol` 子类的 :meth:`~object.__init__` 方法将被保留。 （由 Adrian "
"Garcia Badarasco 在 :gh:`88970` 中贡献。）"

#: ../../whatsnew/3.11.rst:1179
msgid ""
"The representation of empty tuple types (``Tuple[()]``) is simplified. This "
"affects introspection, e.g. ``get_args(Tuple[()])`` now evaluates to ``()`` "
"instead of ``((),)``. (Contributed by Serhiy Storchaka in :gh:`91137`.)"
msgstr ""
"空元组类型 (``Tuple[()]``) 的表示形式已被简化。 这将影响内省操作，例如 ``get_args(Tuple[()])`` 现在将被求值为"
" ``()`` 而不是 ``((),)``。 （由 Serhiy Storchaka 在 :gh:`91137` 中贡献。）"

#: ../../whatsnew/3.11.rst:1184
msgid ""
"Loosen runtime requirements for type annotations by removing the callable "
"check in the private ``typing._type_check`` function. (Contributed by "
"Gregory Beauregard in :gh:`90802`.)"
msgstr ""
"通过移除私有 ``typing._type_check`` 函数的回调检查放松了类型标注的运行时要求。 （由 Gregory Beauregard 在 "
":gh:`90802` 中贡献。）"

#: ../../whatsnew/3.11.rst:1188
msgid ""
":func:`typing.get_type_hints` now supports evaluating strings as forward "
"references in :ref:`PEP 585 generic aliases <types-genericalias>`. "
"(Contributed by Niklas Rosenstein in :gh:`85542`.)"
msgstr ""
"现在 :func:`typing.get_type_hints` 支持将字符串求值为 :ref:`PEP 585 泛型别名 <types-"
"genericalias>` 中的前向引用。 （由 Niklas Rosenstein 在 :gh:`85542` 中贡献。）"

#: ../../whatsnew/3.11.rst:1192
msgid ""
":func:`typing.get_type_hints` no longer adds :data:`~typing.Optional` to "
"parameters with ``None`` as a default. (Contributed by Nikita Sobolev in "
":gh:`90353`.)"
msgstr ""
":func:`typing.get_type_hints` 将不再添加 :data:`~typing.Optional` 到形参并以 ``None`` "
"作为默认值。 （由 Nikita Sobolev 在 :gh:`90353` 中贡献。）"

#: ../../whatsnew/3.11.rst:1196
msgid ""
":func:`typing.get_type_hints` now supports evaluating bare stringified "
":data:`~typing.ClassVar` annotations. (Contributed by Gregory Beauregard in "
":gh:`90711`.)"
msgstr ""
"现在 :func:`typing.get_type_hints` 支持与纯字符串化的 :data:`~typing.ClassVar` 标注进行求值。 "
"（由 Gregory Beauregard 在 :gh:`90711` 中贡献。）"

#: ../../whatsnew/3.11.rst:1200
msgid ""
":func:`typing.no_type_check` no longer modifies external classes and "
"functions. It also now correctly marks classmethods as not to be type "
"checked. (Contributed by Nikita Sobolev in :gh:`90729`.)"
msgstr ""
":func:`typing.no_type_check` 将不再修改外部类和函数。 现在它还会正确地将类方法标记为不进行类型检查。 （由 Nikita "
"Sobolev 在 :gh:`90729` 中贡献。）"

#: ../../whatsnew/3.11.rst:1208
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.11.rst:1210
msgid ""
"The Unicode database has been updated to version 14.0.0. (Contributed by "
"Benjamin Peterson in :issue:`45190`)."
msgstr "Unicode 数据库已更新到 14.0.0 版。 （由 Benjamin Peterson 在 :issue:`45190` 中贡献。）"

#: ../../whatsnew/3.11.rst:1217
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.11.rst:1219
msgid ""
"Added methods :meth:`~unittest.TestCase.enterContext` and "
":meth:`~unittest.TestCase.enterClassContext` of class "
":class:`~unittest.TestCase`, method "
":meth:`~unittest.IsolatedAsyncioTestCase.enterAsyncContext` of class "
":class:`~unittest.IsolatedAsyncioTestCase` and function "
":func:`unittest.enterModuleContext`. (Contributed by Serhiy Storchaka in "
":issue:`45046`.)"
msgstr ""
"增加了 :class:`~unittest.TestCase` 类的 :meth:`~unittest.TestCase.enterContext` 和"
" :meth:`~unittest.TestCase.enterClassContext` "
"方法，:class:`~unittest.IsolatedAsyncioTestCase` 类的 "
":meth:`~unittest.IsolatedAsyncioTestCase.enterAsyncContext` 方法和 "
":func:`unittest.enterModuleContext` 函数。 （由 Serhiy Storchaka 在 :issue:`45046`"
" 中贡献。）"

#: ../../whatsnew/3.11.rst:1231
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.11.rst:1233
msgid ""
"When new Python virtual environments are created, the *venv* :ref:`sysconfig"
" installation scheme <installation_paths>` is used to determine the paths "
"inside the environment. When Python runs in a virtual environment, the same "
"installation scheme is the default. That means that downstream distributors "
"can change the default sysconfig install scheme without changing behavior of"
" virtual environments. Third party code that also creates new virtual "
"environments should do the same. (Contributed by Miro Hrončok in "
":issue:`45413`.)"
msgstr ""
"当新的 Python 虚拟环境被创建时，将使用 *venv* :ref:`sysconfig 安装方案 <installation_paths>` "
"来确定环境内部的路径。 当 Python 在虚拟环境中运行时，同一个安装方案将被设为默认。 这意味着下游分发方可以修改默认的 sysconfig "
"安装方案而不会改变虚拟环境的行为。 同样会创建新的虚拟环境的第三方代码也应当这样做。 （由 Miro Hrončok 在 :issue:`45413` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:1247
msgid "warnings"
msgstr "warnings"

#: ../../whatsnew/3.11.rst:1249
msgid ""
":func:`warnings.catch_warnings` now accepts arguments for "
":func:`warnings.simplefilter`, providing a more concise way to locally "
"ignore warnings or convert them to errors. (Contributed by Zac Hatfield-"
"Dodds in :issue:`47074`.)"
msgstr ""
":func:`warnings.catch_warnings` 现在接受 :func:`warnings.simplefilter` "
"的参数，这提供了一种在局部忽略警告或将其转为错误的更精确方式。 （由 Zac Hatfield-Dodds 在 :issue:`47074` 中贡献。）"

#: ../../whatsnew/3.11.rst:1257
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.11.rst:1259
msgid ""
"Added support for specifying member name encoding for reading metadata in a "
":class:`~zipfile.ZipFile`'s directory and file headers. (Contributed by "
"Stephen J. Turnbull and Serhiy Storchaka in :issue:`28080`.)"
msgstr ""
"增加了为在 :class:`~zipfile.ZipFile` 的目录和文件头中读取元数据指定成员名称编码格式的支持。 （由 Stephen J. "
"Turnbull 和 Serhiy Storchaka 在 :issue:`28080` 中贡献。）"

#: ../../whatsnew/3.11.rst:1263
msgid ""
"Added :meth:`ZipFile.mkdir() <zipfile.ZipFile.mkdir>` for creating new "
"directories inside ZIP archives. (Contributed by Sam Ezeh in :gh:`49083`.)"
msgstr ""
"增加了 :meth:`ZipFile.mkdir() <zipfile.ZipFile.mkdir>` 用于在 ZIP 归档中新建目录。 （由 Sam "
"Ezeh 在 :gh:`49083` 中贡献。）"

#: ../../whatsnew/3.11.rst:1267
msgid ""
"Added :attr:`~zipfile.Path.stem`, :attr:`~zipfile.Path.suffix` and "
":attr:`~zipfile.Path.suffixes` to :class:`zipfile.Path`. (Contributed by "
"Miguel Brito in :gh:`88261`.)"
msgstr ""
"为 :class:`zipfile.Path` 增加了 :attr:`~zipfile.Path.stem`, "
":attr:`~zipfile.Path.suffix` 和 :attr:`~zipfile.Path.suffixes`。 （由 Miguel "
"Brito 在 :gh:`88261` 中贡献。）"

#: ../../whatsnew/3.11.rst:1275
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.11.rst:1277
msgid ""
"This section covers specific optimizations independent of the "
":ref:`whatsnew311-faster-cpython` project, which is covered in its own "
"section."
msgstr "本节列出的特定优化均不依赖于 :ref:`whatsnew311-faster-cpython` 项目，后者将在其专属章节中列出。"

#: ../../whatsnew/3.11.rst:1280
msgid ""
"The compiler now optimizes simple :ref:`printf-style % formatting <old-"
"string-formatting>` on string literals containing only the format codes "
"``%s``, ``%r`` and ``%a`` and makes it as fast as a corresponding "
":term:`f-string` expression. (Contributed by Serhiy Storchaka in "
":issue:`28307`.)"
msgstr ""
"编译器现在将优化只包含格式代码 ``%s``, ``%r`` 和 ``%a`` 的字符串字面值中的简单 :ref:`printf 风格 % 格式化 "
"<old-string-formatting>` 并使其速度与对应的 :term:`f-string` 表达式一样快。 （由 Serhiy "
"Storchaka 在 :issue:`28307` 中贡献。）"

#: ../../whatsnew/3.11.rst:1286
msgid ""
"Integer division (``//``) is better tuned for optimization by compilers. It "
"is now around 20% faster on x86-64 when dividing an :class:`int` by a value "
"smaller than ``2**30``. (Contributed by Gregory P. Smith and Tim Peters in "
":gh:`90564`.)"
msgstr ""
"整除运算 (``//``) 已进行了更好的编译器微调。 在 x86-64 上现在将 :class:`int` 除以小于 ``2**30`` "
"的值时能够提速 20%。 （由 Gregory P. Smith 和 Tim Peters 在 :gh:`90564` 中贡献。）"

#: ../../whatsnew/3.11.rst:1291
msgid ""
":func:`sum` is now nearly 30% faster for integers smaller than ``2**30``. "
"(Contributed by Stefan Behnel in :gh:`68264`.)"
msgstr ""
":func:`sum` 现在对小于 ``2**30`` 的整数运算可提速将近 30%。 （由 Stefan Behnel 在 :gh:`68264` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:1294
msgid ""
"Resizing lists is streamlined for the common case, speeding up "
":meth:`list.append` by ≈15% and simple :term:`list comprehension`\\s by up "
"to 20-30% (Contributed by Dennis Sweeney in :gh:`91165`.)"
msgstr ""
"列表大小调整针对常见场景进行了优化，对于 :meth:`list.append` 可提速 ≈15% 而对于简单的 :term:`list "
"comprehension` 可提速 20-30%。 （由 Dennis Sweeney 在 :gh:`91165` 中贡献。）"

#: ../../whatsnew/3.11.rst:1299
msgid ""
"Dictionaries don't store hash values when all keys are Unicode objects, "
"decreasing :class:`dict` size. For example, "
"``sys.getsizeof(dict.fromkeys(\"abcdefg\"))`` is reduced from 352 bytes to "
"272 bytes (23% smaller) on 64-bit platforms. (Contributed by Inada Naoki in "
":issue:`46845`.)"
msgstr ""
"字典在所有键均为 Unicode 对象时将不保存哈希值，以缩减 :class:`dict` 的大小。 "
"例如，``sys.getsizeof(dict.fromkeys(\"abcdefg\"))`` 在 64 位平台上将从 352 字节缩减为 272 "
"字节（减小 23%）。 （由 Inada Naoki 在 :issue:`46845` 中贡献。）"

#: ../../whatsnew/3.11.rst:1305
msgid ""
"Using :class:`asyncio.DatagramProtocol` is now orders of magnitude faster "
"when transferring large files over UDP, with speeds over 100 times higher "
"for a ≈60 MiB file. (Contributed by msoxzw in :gh:`91487`.)"
msgstr ""
"现在使用 :class:`asyncio.DatagramProtocol` 通过 UDP 传输大文件时速度将有成数量级的提升，对于 ≈60 MiB "
"的文件将可提速 100 倍以上。 （由 msoxzw 在 :gh:`91487` 中贡献。）"

#: ../../whatsnew/3.11.rst:1310
msgid ""
":mod:`math` functions :func:`~math.comb` and :func:`~math.perm` are now ≈10 "
"times faster for large arguments (with a larger speedup for larger *k*). "
"(Contributed by Serhiy Storchaka in :issue:`37295`.)"
msgstr ""
"现在 :mod:`math` 中的函数 :func:`~math.comb` 和 :func:`~math.perm` 对于大参数可提速 ≈10 "
"倍（对于越大的 *k* 值提速幅度越大）。 （由 Serhiy Storchaka 在 :issue:`37295` 中贡献。）"

#: ../../whatsnew/3.11.rst:1314
msgid ""
"The :mod:`statistics` functions :func:`~statistics.mean`, "
":func:`~statistics.variance` and :func:`~statistics.stdev` now consume "
"iterators in one pass rather than converting them to a :class:`list` first. "
"This is twice as fast and can save substantial memory. (Contributed by "
"Raymond Hettinger in :gh:`90415`.)"
msgstr ""
"现在 :mod:`statistics` 中的函数 :func:`~statistics.mean`, "
":func:`~statistics.variance` 和 :func:`~statistics.stdev` 将会直接消耗迭代器而不是先将它们转换为"
" :class:`list`。 这将使速度翻倍并能节省大量内存。 （由 Raymond Hettinger 在 :gh:`90415` 中贡献。）"

#: ../../whatsnew/3.11.rst:1320
msgid ""
":func:`unicodedata.normalize` now normalizes pure-ASCII strings in constant "
"time. (Contributed by Donghee Na in :issue:`44987`.)"
msgstr ""
"现在 :func:`unicodedata.normalize` 将在固定时间内正规化纯 ASCII 字符串。 （由 Donghee Na 在 "
":issue:`44987` 中贡献。）"

#: ../../whatsnew/3.11.rst:1328
msgid "Faster CPython"
msgstr "更快的 CPython"

#: ../../whatsnew/3.11.rst:1330
msgid ""
"CPython 3.11 is an average of `25% faster <https://github.com/faster-"
"cpython/ideas#published-results>`_ than CPython 3.10 as measured with the "
"`pyperformance <https://github.com/python/pyperformance>`_ benchmark suite, "
"when compiled with GCC on Ubuntu Linux. Depending on your workload, the "
"overall speedup could be 10-60%."
msgstr ""
"平均而言 CPython 3.11 比 CPython 3.10 `快 25% <https://github.com/faster-"
"cpython/ideas#published-results>`_，该数据是用 `pyperformance "
"<https://github.com/python/pyperformance>`_ 基准测试套件测得的，基于 Ubuntu Linux 上的 GCC"
" 编译版。 根据工作负载的不同，总的提速效果可达 10-60%。"

#: ../../whatsnew/3.11.rst:1337
msgid ""
"This project focuses on two major areas in Python: :ref:`whatsnew311-faster-"
"startup` and :ref:`whatsnew311-faster-runtime`. Optimizations not covered by"
" this project are listed separately under :ref:`whatsnew311-optimizations`."
msgstr ""
"本项目聚焦于 Python 的两个主要领域: :ref:`whatsnew311-faster-startup` 和 "
":ref:`whatsnew311-faster-runtime`。 本项目未涉及的优化将在 "
":ref:`whatsnew311-optimizations` 中单独列出。"

#: ../../whatsnew/3.11.rst:1346
msgid "Faster Startup"
msgstr "更快的启动"

#: ../../whatsnew/3.11.rst:1351
msgid "Frozen imports / Static code objects"
msgstr "冻结导入 / 静态代码对象"

#: ../../whatsnew/3.11.rst:1353
msgid ""
"Python caches :term:`bytecode` in the :ref:`__pycache__ <tut-pycache>` "
"directory to speed up module loading."
msgstr ""
"Python 会将 :term:`bytecode` 缓存到 :ref:`__pycache__ <tut-pycache>` "
"目录以加快模型加载的速度。"

#: ../../whatsnew/3.11.rst:1356
msgid "Previously in 3.10, Python module execution looked like this:"
msgstr "在 3.10 版本时，Python 模块执行类似于这样："

#: ../../whatsnew/3.11.rst:1358
msgid ""
"Read __pycache__ -> Unmarshal -> Heap allocated code object -> Evaluate"
msgstr "读取 __pycache__ -> 反 marshal -> 堆分配的代码对象 -> 求值"

#: ../../whatsnew/3.11.rst:1362
msgid ""
"In Python 3.11, the core modules essential for Python startup are "
"\"frozen\". This means that their :ref:`codeobjects` (and bytecode) are "
"statically allocated by the interpreter. This reduces the steps in module "
"execution process to:"
msgstr ""
"在 Python 3.11 中，对 Python 启动具有关键影响的核心模块已被“冻结”。 这意味着它们的 :ref:`codeobjects` "
"(及字节码) 将由解释器静态地分配。 这使得模块执行过程的步骤减少为:"

#: ../../whatsnew/3.11.rst:1367
msgid "Statically allocated code object -> Evaluate"
msgstr "静态分配的代码对象 -> 求值"

#: ../../whatsnew/3.11.rst:1371
msgid ""
"Interpreter startup is now 10-15% faster in Python 3.11. This has a big "
"impact for short-running programs using Python."
msgstr "现在 Python 3.11 解释器启动加快了 10-15%。 这对使用 Python 的短期运行程序具有显著的影响。"

#: ../../whatsnew/3.11.rst:1374
msgid ""
"(Contributed by Eric Snow, Guido van Rossum and Kumar Aditya in many "
"issues.)"
msgstr "（由 Eric Snow, Guido van Rossum 和 Kumar Aditya 在许多问题事件中贡献。）"

#: ../../whatsnew/3.11.rst:1380
msgid "Faster Runtime"
msgstr "更快的运行时"

#: ../../whatsnew/3.11.rst:1385
msgid "Cheaper, lazy Python frames"
msgstr "开销更低、更为惰性的 Python 帧"

#: ../../whatsnew/3.11.rst:1387
msgid ""
"Python frames, holding execution information, are created whenever Python "
"calls a Python function. The following are new frame optimizations:"
msgstr "存放执行信息的 Python 帧会在 Python 调用一个 Python 函数时被自动创建。 下面是新帧的优化操作:"

#: ../../whatsnew/3.11.rst:1391
msgid "Streamlined the frame creation process."
msgstr "优化改进了帧创建进程。"

#: ../../whatsnew/3.11.rst:1392
msgid ""
"Avoided memory allocation by generously re-using frame space on the C stack."
msgstr "通过大量重用 C 栈上的帧空间来避免内存分配。"

#: ../../whatsnew/3.11.rst:1393
msgid ""
"Streamlined the internal frame struct to contain only essential information."
" Frames previously held extra debugging and memory management information."
msgstr "将内部帧结构优化为仅包含关键信息。 在此之前的帧保存有额外的调试和内存管理信息。"

#: ../../whatsnew/3.11.rst:1396
msgid ""
"Old-style :ref:`frame objects <frame-objects>` are now created only when "
"requested by debuggers or by Python introspection functions such as "
":func:`sys._getframe` and :func:`inspect.currentframe`. For most user code, "
"no frame objects are created at all. As a result, nearly all Python "
"functions calls have sped up significantly. We measured a 3-7% speedup in "
"pyperformance."
msgstr ""
"现在旧式的 :ref:`帧对象 <frame-objects>` 仅在调试器或 Python 内省函数如 :func:`sys._getframe` 和"
" :func:`inspect.currentframe` 发出请求时才会被创建。 对于大多数用户代码，将不会创建任何帧对象。 因此，几乎所有 "
"Python 函数调用都有显著的提速。 我们在 pyperformance 中测得了 3-7% 的提速。"

#: ../../whatsnew/3.11.rst:1403
msgid "(Contributed by Mark Shannon in :issue:`44590`.)"
msgstr "（由 Mark Shannon 在 :issue:`44590` 中贡献。）"

#: ../../whatsnew/3.11.rst:1410
msgid "Inlined Python function calls"
msgstr "内联的 Python 函数调用"

#: ../../whatsnew/3.11.rst:1412
msgid ""
"During a Python function call, Python will call an evaluating C function to "
"interpret that function's code. This effectively limits pure Python "
"recursion to what's safe for the C stack."
msgstr ""
"在 Python 函数调用期间，Python 将调用一个评测 C 函数来解读该函数的代码。 这会有效地将纯 Python 递归限制在 C "
"栈的安全范围以内。"

#: ../../whatsnew/3.11.rst:1416
msgid ""
"In 3.11, when CPython detects Python code calling another Python function, "
"it sets up a new frame, and \"jumps\" to the new code inside the new frame. "
"This avoids calling the C interpreting function altogether."
msgstr ""
"在 3.11 中，当 CPython 检测到 Python 代码调用了另一个 Python 函数时，它会设置一个新帧，并“跳转”到新帧内部的新代码。 "
"这可以避免全部调用 C 解析函数。"

#: ../../whatsnew/3.11.rst:1420
msgid ""
"Most Python function calls now consume no C stack space, speeding them up. "
"In simple recursive functions like fibonacci or factorial, we observed a "
"1.7x speedup. This also means recursive functions can recurse significantly "
"deeper (if the user increases the recursion limit with "
":func:`sys.setrecursionlimit`). We measured a 1-3% improvement in "
"pyperformance."
msgstr ""
"大多数 Python 函数调用现在将不消耗任何 C 栈空间，这提升了它们的速度。 在简单的递归函数如斐波那契或阶乘函数中，我们测得了 1.7x 的提速。"
" 这还意味着递归函数能够递归得更深（如果用户通过 :func:`sys.setrecursionlimit` 提升了递归限制的话）。 我们在 "
"pyperformance 中测得了 1-3% 的提升。"

#: ../../whatsnew/3.11.rst:1427
msgid "(Contributed by Pablo Galindo and Mark Shannon in :issue:`45256`.)"
msgstr "（由 Pablo Galindo 和 Mark Shannon 在 :issue:`45256` 中贡献。）"

#: ../../whatsnew/3.11.rst:1433
msgid "PEP 659: Specializing Adaptive Interpreter"
msgstr "PEP 659：专门化自适应解释器"

#: ../../whatsnew/3.11.rst:1435
msgid ""
":pep:`659` is one of the key parts of the Faster CPython project. The "
"general idea is that while Python is a dynamic language, most code has "
"regions where objects and types rarely change. This concept is known as "
"*type stability*."
msgstr ""
":pep:`659` 是 Faster CPython 项目的关键部分之一。 基本理念在于虽然 Python "
"是一种动态语言，但大部分代码都存在对象和类型极少发生变化的区域。 这一理念被称为 *类型稳定性*。"

#: ../../whatsnew/3.11.rst:1439
msgid ""
"At runtime, Python will try to look for common patterns and type stability "
"in the executing code. Python will then replace the current operation with a"
" more specialized one. This specialized operation uses fast paths available "
"only to those use cases/types, which generally outperform their generic "
"counterparts. This also brings in another concept called *inline caching*, "
"where Python caches the results of expensive operations directly in the "
":term:`bytecode`."
msgstr ""
"在运行时，Python 将尝试在所执行的代码中寻找常见模式和类型稳定性。 然后 Python 将把当前的操作替换为更加专门化的操作。 "
"这种专门化的操作使用仅对这些应用场景/类型来说可用的快速路径，它们的性能通常都会超过其泛用型的对应物。 这还带来了名为 *内联缓存* 的另一项理念，即 "
"Python 会将高消耗的操作的结果直接缓存在 :term:`bytecode` 中。"

#: ../../whatsnew/3.11.rst:1447
msgid ""
"The specializer will also combine certain common instruction pairs into one "
"superinstruction, reducing the overhead during execution."
msgstr "这个特化程序还会将特定的常见指令对合并为一条超级指令，减少执行期间的开销。"

#: ../../whatsnew/3.11.rst:1450
msgid ""
"Python will only specialize when it sees code that is \"hot\" (executed "
"multiple times). This prevents Python from wasting time on run-once code. "
"Python can also de-specialize when code is too dynamic or when the use "
"changes. Specialization is attempted periodically, and specialization "
"attempts are not too expensive, allowing specialization to adapt to new "
"circumstances."
msgstr ""
"Python 将只特化（会被多次执行的）“热门”代码。 这可以防止 Python 在只执行一次的代码上浪费时间。 Python "
"还可以在代码过于动态或用法发生变化时取消特化。 特化会定期地尝试，而特化尝试的开销也不高，这使得特化能够适应新的环境改变。"

#: ../../whatsnew/3.11.rst:1457
msgid ""
"(PEP written by Mark Shannon, with ideas inspired by Stefan Brunthaler. See "
":pep:`659` for more information. Implementation by Mark Shannon and Brandt "
"Bucher, with additional help from Irit Katriel and Dennis Sweeney.)"
msgstr ""
"（PEP 由 Mark Shannon 撰写，部分想法由 Stefan Brunthaler 提供。 请参阅 :pep:`659` 了解详情。 由 "
"Mark Shannon 和 Brandt Bucher 实现，并由 Irit Katriel 和 Dennis Sweeney 提供了额外的帮助。）"

#: ../../whatsnew/3.11.rst:1465
msgid "Operation"
msgstr "运算"

#: ../../whatsnew/3.11.rst:1465
msgid "Form"
msgstr "形式"

#: ../../whatsnew/3.11.rst:1465
msgid "Specialization"
msgstr "专门化"

#: ../../whatsnew/3.11.rst:1465
msgid "Operation speedup (up to)"
msgstr "运行加速（最高）"

#: ../../whatsnew/3.11.rst:1465
msgid "Contributor(s)"
msgstr "贡献者"

#: ../../whatsnew/3.11.rst:1468
msgid "Binary operations"
msgstr "双目运算"

#: ../../whatsnew/3.11.rst:1468
msgid "``x + x``"
msgstr "``x + x``"

#: ../../whatsnew/3.11.rst:1470
msgid "``x - x``"
msgstr "``x - x``"

#: ../../whatsnew/3.11.rst:1472
msgid "``x * x``"
msgstr "``x * x``"

#: ../../whatsnew/3.11.rst:1468
msgid ""
"Binary add, multiply and subtract for common types such as :class:`int`, "
":class:`float` and :class:`str` take custom fast paths for their underlying "
"types."
msgstr ""
"常见类型如 :class:`int`, :class:`float` 和 :class:`str` "
"的双目加法、乘法和减法将采用针对其下层类型专门定制的快速路径。"

#: ../../whatsnew/3.11.rst:1468
msgid "10%"
msgstr "10%"

#: ../../whatsnew/3.11.rst:1468
msgid "Mark Shannon, Donghee Na, Brandt Bucher, Dennis Sweeney"
msgstr "Mark Shannon, Donghee Na, Brandt Bucher, Dennis Sweeney"

#: ../../whatsnew/3.11.rst:1474
msgid "Subscript"
msgstr "下标"

#: ../../whatsnew/3.11.rst:1474
msgid "``a[i]``"
msgstr "``a[i]``"

#: ../../whatsnew/3.11.rst:1474
msgid ""
"Subscripting container types such as :class:`list`, :class:`tuple` and "
":class:`dict` directly index the underlying data structures."
msgstr ""
"对容器类型如 :class:`list`, :class:`tuple` 和 :class:`dict` 的下标操作将直接索引下层数据结构。"

#: ../../whatsnew/3.11.rst:1478
msgid ""
"Subscripting custom :meth:`~object.__getitem__` is also inlined similar to "
":ref:`inline-calls`."
msgstr ""
"对自定义 :meth:`~object.__getitem__` 的下标操作也是采用类似于 :ref:`inline-calls` 的内联方式。"

#: ../../whatsnew/3.11.rst:1474 ../../whatsnew/3.11.rst:1481
msgid "10-25%"
msgstr "10-25%"

#: ../../whatsnew/3.11.rst:1474
msgid "Irit Katriel, Mark Shannon"
msgstr "Irit Katriel, Mark Shannon"

#: ../../whatsnew/3.11.rst:1481
msgid "Store subscript"
msgstr "存储下标操作"

#: ../../whatsnew/3.11.rst:1481
msgid "``a[i] = z``"
msgstr "``a[i] = z``"

#: ../../whatsnew/3.11.rst:1481
msgid "Similar to subscripting specialization above."
msgstr "类似于上述的下标操作专门化。"

#: ../../whatsnew/3.11.rst:1481
msgid "Dennis Sweeney"
msgstr "Dennis Sweeney"

#: ../../whatsnew/3.11.rst:1484
msgid "Calls"
msgstr "调用"

#: ../../whatsnew/3.11.rst:1484
msgid "``f(arg)``"
msgstr "``f(arg)``"

#: ../../whatsnew/3.11.rst:1486
msgid "``C(arg)``"
msgstr "``C(arg)``"

#: ../../whatsnew/3.11.rst:1484
msgid ""
"Calls to common builtin (C) functions and types such as :func:`len` and "
":class:`str` directly call their underlying C version. This avoids going "
"through the internal calling convention."
msgstr ""
"对常用内置 (C) 函数和类型如 :func:`len` 和 :class:`str` 的调用将直接调用其下层 C 版本。 这将避免经历内部调用流程。"

#: ../../whatsnew/3.11.rst:1484
msgid "20%"
msgstr "20%"

#: ../../whatsnew/3.11.rst:1484
msgid "Mark Shannon, Ken Jin"
msgstr "Mark Shannon, Ken Jin"

#: ../../whatsnew/3.11.rst:1489
msgid "Load global variable"
msgstr "加载全局变量"

#: ../../whatsnew/3.11.rst:1489
msgid "``print``"
msgstr "``print``"

#: ../../whatsnew/3.11.rst:1491
msgid "``len``"
msgstr "``len``"

#: ../../whatsnew/3.11.rst:1489
msgid ""
"The object's index in the globals/builtins namespace is cached. Loading "
"globals and builtins require zero namespace lookups."
msgstr "对象在全局/内置命名空间中的索引会被缓存。 加载全局和内置变量将不需要命名空间查找过程。"

#: ../../whatsnew/3.11.rst:1489
msgid "[#load-global]_"
msgstr "[#load-global]_"

#: ../../whatsnew/3.11.rst:1489 ../../whatsnew/3.11.rst:1493
#: ../../whatsnew/3.11.rst:1502
msgid "Mark Shannon"
msgstr "Mark Shannon"

#: ../../whatsnew/3.11.rst:1493
msgid "Load attribute"
msgstr "加载属性"

#: ../../whatsnew/3.11.rst:1493
msgid "``o.attr``"
msgstr "``o.attr``"

#: ../../whatsnew/3.11.rst:1493
msgid ""
"Similar to loading global variables. The attribute's index inside the "
"class/object's namespace is cached. In most cases, attribute loading will "
"require zero namespace lookups."
msgstr "类似于加载全局变量。 属性在类/对象命名空间中的索引会被缓存。 在大多数情况下，加载属性将不需要命名空间查找过程。"

#: ../../whatsnew/3.11.rst:1493
msgid "[#load-attr]_"
msgstr "[#load-attr]_"

#: ../../whatsnew/3.11.rst:1498
msgid "Load methods for call"
msgstr "加载要调用的方法"

#: ../../whatsnew/3.11.rst:1498
msgid "``o.meth()``"
msgstr "``o.meth()``"

#: ../../whatsnew/3.11.rst:1498
msgid ""
"The actual address of the method is cached. Method loading now has no "
"namespace lookups -- even for classes with long inheritance chains."
msgstr "方法的实际地址会被缓存。 加载方法现在将不需要命名空间查找过程 -- 即使对于具有较长继承链的类来说也是如此。"

#: ../../whatsnew/3.11.rst:1498
msgid "10-20%"
msgstr "10-20%"

#: ../../whatsnew/3.11.rst:1498
msgid "Ken Jin, Mark Shannon"
msgstr "Ken Jin, Mark Shannon"

#: ../../whatsnew/3.11.rst:1502
msgid "Store attribute"
msgstr "存储属性"

#: ../../whatsnew/3.11.rst:1502
msgid "``o.attr = z``"
msgstr "``o.attr = z``"

#: ../../whatsnew/3.11.rst:1502
msgid "Similar to load attribute optimization."
msgstr "类似于加载属性的优化。"

#: ../../whatsnew/3.11.rst:1502
msgid "2% in pyperformance"
msgstr "2% 的运行效率"

#: ../../whatsnew/3.11.rst:1505
msgid "Unpack Sequence"
msgstr "解包序列"

#: ../../whatsnew/3.11.rst:1505
msgid "``*seq``"
msgstr "``*seq``"

#: ../../whatsnew/3.11.rst:1505
msgid ""
"Specialized for common containers such as :class:`list` and :class:`tuple`. "
"Avoids internal calling convention."
msgstr "针对常见容器如 :class:`list` 和 :class:`tuple` 进行了专门化。 避免内部调用流程。"

#: ../../whatsnew/3.11.rst:1505
msgid "8%"
msgstr "8%"

#: ../../whatsnew/3.11.rst:1505
msgid "Brandt Bucher"
msgstr "Brandt Bucher"

#: ../../whatsnew/3.11.rst:1510
msgid ""
"A similar optimization already existed since Python 3.8. 3.11 specializes "
"for more forms and reduces some overhead."
msgstr "类似的优化自 Python 3.8 起即已存在。 3.11 针对更多形式进行了专门化并减少了部分开销。"

#: ../../whatsnew/3.11.rst:1513
msgid ""
"A similar optimization already existed since Python 3.10. 3.11 specializes "
"for more forms. Furthermore, all attribute loads should be sped up by "
":issue:`45947`."
msgstr ""
"类似的优化自 Python 3.10 起即已存在。 3.11 针对更多形式进行了专门化。 此外，所有属性加载都应当通过 :issue:`45947` "
"获得了加速。"

#: ../../whatsnew/3.11.rst:1521
msgid "Misc"
msgstr "杂项"

#: ../../whatsnew/3.11.rst:1523
msgid ""
"Objects now require less memory due to lazily created object namespaces. "
"Their namespace dictionaries now also share keys more freely. (Contributed "
"Mark Shannon in :issue:`45340` and :issue:`40116`.)"
msgstr ""
"现在由于惰性创建的对象命名空间对象需要的内存将会减少。 它们的命名空间现在还将更自由地共享键。 （由 Mark Shannon 在 "
":issue:`45340` 和 :issue:`40116` 中贡献。）"

#: ../../whatsnew/3.11.rst:1527
msgid ""
"\"Zero-cost\" exceptions are implemented, eliminating the cost of "
":keyword:`try` statements when no exception is raised. (Contributed by Mark "
"Shannon in :issue:`40222`.)"
msgstr ""
"实现了“零消耗”的异常，可在未引发任何异常时消除 :keyword:`try` 语句的开销。 （由 Mark Shannon 在 "
":issue:`40222` 中贡献。）"

#: ../../whatsnew/3.11.rst:1531
msgid ""
"A more concise representation of exceptions in the interpreter reduced the "
"time required for catching an exception by about 10%. (Contributed by Irit "
"Katriel in :issue:`45711`.)"
msgstr ""
"解释器中更为简洁的异常表示形式使得捕获异常所需的时间减少了大约 10%。 （由 Irit Katriel 在 :issue:`45711` 中贡献。）"

#: ../../whatsnew/3.11.rst:1535
msgid ""
":mod:`re`'s regular expression matching engine has been partially "
"refactored, and now uses computed gotos (or \"threaded code\") on supported "
"platforms. As a result, Python 3.11 executes the `pyperformance regular "
"expression benchmarks "
"<https://pyperformance.readthedocs.io/benchmarks.html#regex-dna>`_ up to 10%"
" faster than Python 3.10. (Contributed by Brandt Bucher in :gh:`91404`.)"
msgstr ""
":mod:`re` 的正则表达式匹配引擎已被部分重构，现在会在受支持的平台上使用已计算的 goto（或“线程式代码”）。 因此，Python 3.11 "
"执行 `pyperformance 正则表达式基准测试 "
"<https://pyperformance.readthedocs.io/benchmarks.html#regex-dna>`_ 相比 Python"
" 3.10 提速了 10%。 （由 Brandt Bucher 在 :gh:`91404` 中贡献。）"

#: ../../whatsnew/3.11.rst:1546
msgid "FAQ"
msgstr "常见问题"

#: ../../whatsnew/3.11.rst:1551
msgid "How should I write my code to utilize these speedups?"
msgstr "我要如何编写代码以便应用这些加速？"

#: ../../whatsnew/3.11.rst:1553
msgid ""
"Write Pythonic code that follows common best practices; you don't have to "
"change your code. The Faster CPython project optimizes for common code "
"patterns we observe."
msgstr ""
"请编写遵循常见最佳实践的具有 Python 风格的代码；你不需要修改你的代码。 CPython 加速计划会针对我们观察到的常见代码模式进行优化。"

#: ../../whatsnew/3.11.rst:1561
msgid "Will CPython 3.11 use more memory?"
msgstr "CPython 3.11 会使用更多内存吗？"

#: ../../whatsnew/3.11.rst:1563
msgid ""
"Maybe not; we don't expect memory use to exceed 20% higher than 3.10. This "
"is offset by memory optimizations for frame objects and object dictionaries "
"as mentioned above."
msgstr "可能不会；我们预期内存占用的增加相比 3.10 不会超过 20%。 这是通过上文提及的帧对象和对象字典内存优化来平衡的。"

#: ../../whatsnew/3.11.rst:1571
msgid "I don't see any speedups in my workload. Why?"
msgstr "我没有发现我的运行负载有任何加速。 为什么？"

#: ../../whatsnew/3.11.rst:1573
msgid ""
"Certain code won't have noticeable benefits. If your code spends most of its"
" time on I/O operations, or already does most of its computation in a C "
"extension library like NumPy, there won't be significant speedups. This "
"project currently benefits pure-Python workloads the most."
msgstr ""
"特定代码将不会有明显的收益。 如果你的代码大部时间消耗在 I/O 操作上，或者像 NumPy 那样大部分计算是在 C 扩展库中进行的就将如此。 "
"目前这个项目将只针对纯 Python 的运行负载。"

#: ../../whatsnew/3.11.rst:1578
msgid ""
"Furthermore, the pyperformance figures are a geometric mean. Even within the"
" pyperformance benchmarks, certain benchmarks have slowed down slightly, "
"while others have sped up by nearly 2x!"
msgstr ""
"此外，pyperformance 分数是一个几何平均值。 即使在 pyperformance "
"基准测试内部，特定的基准测试也略有放缓，但其他的基准测试则有将近 2x 的加速！"

#: ../../whatsnew/3.11.rst:1586
msgid "Is there a JIT compiler?"
msgstr "是否有 JIT 编译器？"

#: ../../whatsnew/3.11.rst:1588
msgid "No. We're still exploring other optimizations."
msgstr "没有。 我们还在探索其他优化方式。"

#: ../../whatsnew/3.11.rst:1594
msgid "About"
msgstr "关于"

#: ../../whatsnew/3.11.rst:1596
msgid ""
"Faster CPython explores optimizations for :term:`CPython`. The main team is "
"funded by Microsoft to work on this full-time. Pablo Galindo Salgado is also"
" funded by Bloomberg LP to work on the project part-time. Finally, many "
"contributors are volunteers from the community."
msgstr ""
"CPython 加速项目探索针对 :term:`CPython` 的优化。 项目主团队由 Microsoft 提供资助来支持全职工作。 Pablo "
"Galindo Salgado 还由 Bloomberg LP 提供资助来兼职该项目。 此外，还有许多贡献者是来自社区的志愿者。"

#: ../../whatsnew/3.11.rst:1605
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.11.rst:1607
msgid ""
"The bytecode now contains inline cache entries, which take the form of the "
"newly-added :opcode:`CACHE` instructions. Many opcodes expect to be followed"
" by an exact number of caches, and instruct the interpreter to skip over "
"them at runtime. Populated caches can look like arbitrary instructions, so "
"great care should be taken when reading or modifying raw, adaptive bytecode "
"containing quickened data."
msgstr ""
"字节码现在包含内联缓存条目，它采用新增的 :opcode:`CACHE` 指令形式。 许多操作码都预期带有确切数量的缓存，并指示解释器在运行时跳过它们。"
" 被填充的缓存看起来可以像是任意指令，因此在读取或修改包含加速的数据的原始自适应字节码时应当格外小心。"

#: ../../whatsnew/3.11.rst:1619
msgid "New opcodes"
msgstr "新的操作码"

#: ../../whatsnew/3.11.rst:1621
msgid ""
":opcode:`!ASYNC_GEN_WRAP`, :opcode:`RETURN_GENERATOR` and :opcode:`SEND`, "
"used in generators and co-routines."
msgstr ""
":opcode:`!ASYNC_GEN_WRAP`, :opcode:`RETURN_GENERATOR` 和 "
":opcode:`SEND`，用于生成器和协程。"

#: ../../whatsnew/3.11.rst:1624
msgid ""
":opcode:`COPY_FREE_VARS`, which avoids needing special caller-side code for "
"closures."
msgstr ":opcode:`COPY_FREE_VARS`，这可以避免需要特别的调用方代码来关闭。"

#: ../../whatsnew/3.11.rst:1627
msgid ""
":opcode:`JUMP_BACKWARD_NO_INTERRUPT`, for use in certain loops where "
"handling interrupts is undesirable."
msgstr ":opcode:`JUMP_BACKWARD_NO_INTERRUPT`，用于某些不希望处理中断的循环。"

#: ../../whatsnew/3.11.rst:1630
msgid ":opcode:`MAKE_CELL`, to create :ref:`cell-objects`."
msgstr ":opcode:`MAKE_CELL`，用于创建 :ref:`cell-objects`。"

#: ../../whatsnew/3.11.rst:1632
msgid ""
":opcode:`CHECK_EG_MATCH`  and  :opcode:`!PREP_RERAISE_STAR`, to handle the "
":ref:`new exception groups and except* <whatsnew311-pep654>` added in "
":pep:`654`."
msgstr ""
":opcode:`CHECK_EG_MATCH` 和 :opcode:`!PREP_RERAISE_STAR`，用于处理在 :pep:`654` "
"中增加的 :ref:`新异常组和 except* <whatsnew311-pep654>`。"

#: ../../whatsnew/3.11.rst:1636
msgid ":opcode:`PUSH_EXC_INFO`, for use in exception handlers."
msgstr ":opcode:`PUSH_EXC_INFO`，用于异常处理器。"

#: ../../whatsnew/3.11.rst:1638
msgid ""
":opcode:`RESUME`, a no-op, for internal tracing, debugging and optimization "
"checks."
msgstr ":opcode:`RESUME`，空操作，用于内部追踪、调试和优化检查。"

#: ../../whatsnew/3.11.rst:1645
msgid "Replaced opcodes"
msgstr "被替换的操作码"

#: ../../whatsnew/3.11.rst:1648
msgid "Replaced Opcode(s)"
msgstr "被替换的操作码"

#: ../../whatsnew/3.11.rst:1648
msgid "New Opcode(s)"
msgstr "新增的操作码"

#: ../../whatsnew/3.11.rst:1648
msgid "Notes"
msgstr "备注"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!BINARY_*`"
msgstr ":opcode:`!BINARY_*`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!INPLACE_*`"
msgstr ":opcode:`!INPLACE_*`"

#: ../../whatsnew/3.11.rst:1650
msgid ":opcode:`BINARY_OP`"
msgstr ":opcode:`BINARY_OP`"

#: ../../whatsnew/3.11.rst:1650
msgid "Replaced all numeric binary/in-place opcodes with a single opcode"
msgstr "用单个操作码替换所有数值类双目/原地操作码"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_FUNCTION`"
msgstr ":opcode:`!CALL_FUNCTION`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_FUNCTION_KW`"
msgstr ":opcode:`!CALL_FUNCTION_KW`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!CALL_METHOD`"
msgstr ":opcode:`!CALL_METHOD`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`CALL`"
msgstr ":opcode:`CALL`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!KW_NAMES`"
msgstr ":opcode:`!KW_NAMES`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!PRECALL`"
msgstr ":opcode:`!PRECALL`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`PUSH_NULL`"
msgstr ":opcode:`PUSH_NULL`"

#: ../../whatsnew/3.11.rst:1653
msgid ""
"Decouples argument shifting for methods from handling of keyword arguments; "
"allows better specialization of calls"
msgstr "对方法的参数变换与关键字参数的处理进行解偶；允许更好的调用特化"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!DUP_TOP`"
msgstr ":opcode:`!DUP_TOP`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!DUP_TOP_TWO`"
msgstr ":opcode:`!DUP_TOP_TWO`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_TWO`"
msgstr ":opcode:`!ROT_TWO`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_THREE`"
msgstr ":opcode:`!ROT_THREE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_FOUR`"
msgstr ":opcode:`!ROT_FOUR`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!ROT_N`"
msgstr ":opcode:`!ROT_N`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`COPY`"
msgstr ":opcode:`COPY`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`SWAP`"
msgstr ":opcode:`SWAP`"

#: ../../whatsnew/3.11.rst:1658
msgid "Stack manipulation instructions"
msgstr "栈操纵指令"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!JUMP_IF_NOT_EXC_MATCH`"
msgstr ":opcode:`!JUMP_IF_NOT_EXC_MATCH`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`CHECK_EXC_MATCH`"
msgstr ":opcode:`CHECK_EXC_MATCH`"

#: ../../whatsnew/3.11.rst:1665
msgid "Now performs check but doesn't jump"
msgstr "现在会执行检查但不会跳转"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!JUMP_ABSOLUTE`"
msgstr ":opcode:`!JUMP_ABSOLUTE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_IF_FALSE`"
msgstr ":opcode:`!POP_JUMP_IF_FALSE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_IF_TRUE`"
msgstr ":opcode:`!POP_JUMP_IF_TRUE`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`JUMP_BACKWARD`"
msgstr ":opcode:`JUMP_BACKWARD`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_BACKWARD_IF_*`"
msgstr ":opcode:`!POP_JUMP_BACKWARD_IF_*`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!POP_JUMP_FORWARD_IF_*`"
msgstr ":opcode:`!POP_JUMP_FORWARD_IF_*`"

#: ../../whatsnew/3.11.rst:1667
msgid ""
"See [#bytecode-jump]_; ``TRUE``, ``FALSE``, ``NONE`` and ``NOT_NONE`` "
"variants for each direction"
msgstr ""
"参见 [#bytecode-jump]_; 针对每个方向的 ``TRUE``, ``FALSE``, ``NONE`` 和 ``NOT_NONE`` "
"变种"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!SETUP_WITH`"
msgstr ":opcode:`!SETUP_WITH`"

#: ../../whatsnew/3.11.rst:0
msgid ":opcode:`!SETUP_ASYNC_WITH`"
msgstr ":opcode:`!SETUP_ASYNC_WITH`"

#: ../../whatsnew/3.11.rst:1673
msgid ":opcode:`!BEFORE_WITH`"
msgstr ":opcode:`!BEFORE_WITH`"

#: ../../whatsnew/3.11.rst:1673
msgid ":keyword:`with` block setup"
msgstr ":keyword:`with` 代码块设置"

#: ../../whatsnew/3.11.rst:1677
msgid ""
"All jump opcodes are now relative, including the existing "
":opcode:`!JUMP_IF_TRUE_OR_POP` and :opcode:`!JUMP_IF_FALSE_OR_POP`. The "
"argument is now an offset from the current instruction rather than an "
"absolute location."
msgstr ""
"所有跳转操作码现在都是相对的，包括现有的 :opcode:`!JUMP_IF_TRUE_OR_POP` 和 "
":opcode:`!JUMP_IF_FALSE_OR_POP`。 该参数现在是相对于当前指令的偏移量而不是绝对位置。"

#: ../../whatsnew/3.11.rst:1688
msgid "Changed/removed opcodes"
msgstr "修改/移除的操作码"

#: ../../whatsnew/3.11.rst:1690
msgid ""
"Changed :opcode:`MATCH_CLASS` and :opcode:`MATCH_KEYS` to no longer push an "
"additional boolean value to indicate success/failure. Instead, ``None`` is "
"pushed on failure in place of the tuple of extracted values."
msgstr ""
"修改 :opcode:`MATCH_CLASS` 和 :opcode:`MATCH_KEYS` 为不再推入额外的布尔值来指示成功/失败。 "
"而是在失败时推入 ``None`` 来代替由被提取值组成的元组。"

#: ../../whatsnew/3.11.rst:1695
msgid ""
"Changed opcodes that work with exceptions to reflect them now being "
"represented as one item on the stack instead of three (see :gh:`89874`)."
msgstr "修改配合异常使用的操作码以反映它们现在是由栈上的一个条目而非三个条目代表 (参见 :gh:`89874`)。"

#: ../../whatsnew/3.11.rst:1699
msgid ""
"Removed :opcode:`!COPY_DICT_WITHOUT_KEYS`, :opcode:`!GEN_START`, "
":opcode:`!POP_BLOCK`, :opcode:`!SETUP_FINALLY` and :opcode:`!YIELD_FROM`."
msgstr ""
"移除了 :opcode:`!COPY_DICT_WITHOUT_KEYS`, :opcode:`!GEN_START`, "
":opcode:`!POP_BLOCK`, :opcode:`!SETUP_FINALLY` 和 :opcode:`!YIELD_FROM`。"

#: ../../whatsnew/3.11.rst:1707 ../../whatsnew/3.11.rst:2580
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.11.rst:1709
msgid ""
"This section lists Python APIs that have been deprecated in Python 3.11."
msgstr "本小节列出了已在 Python 3.11 中弃用的 Python API。"

#: ../../whatsnew/3.11.rst:1711
msgid ""
"Deprecated C APIs are :ref:`listed separately <whatsnew311-c-api-"
"deprecated>`."
msgstr "已弃用的 C API 将 :ref:`单独列出 <whatsnew311-c-api-deprecated>`。"

#: ../../whatsnew/3.11.rst:1718
msgid "Language/Builtins"
msgstr "语言/内置对象"

#: ../../whatsnew/3.11.rst:1720
msgid ""
"Chaining :class:`classmethod` descriptors (introduced in :issue:`19072`) is "
"now deprecated.  It can no longer be used to wrap other descriptors such as "
":class:`property`.  The core design of this feature was flawed and caused a "
"number of downstream problems.  To \"pass-through\" a :class:`classmethod`, "
"consider using the :attr:`!__wrapped__` attribute that was added in Python "
"3.10. (Contributed by Raymond Hettinger in :gh:`89519`.)"
msgstr ""
"串连 :class:`classmethod` 描述器（在 :issue:`19072` 中引入）现已被弃用。 它不能再被用来包装其他描述器如 "
":class:`property`。 该特性的核心设计存在缺陷并导致了许多下游问题。 要“穿过”一个 "
":class:`classmethod`，请考虑使用在 Python 3.10 中添加的 :attr:`!__wrapped__` 属性。 （由 "
"Raymond Hettinger 在 :gh:`89519` 中贡献。）"

#: ../../whatsnew/3.11.rst:1728
msgid ""
"Octal escapes in string and bytes literals with values larger than ``0o377``"
" (255 in decimal) now produce a :exc:`DeprecationWarning`. In a future "
"Python version, they will raise a :exc:`SyntaxWarning` and eventually a "
":exc:`SyntaxError`. (Contributed by Serhiy Storchaka in :gh:`81548`.)"
msgstr ""
"数值大于 ``0o377`` (十进制的 255) 的八进制转义符会产生 :exc:`DeprecationWarning`。 在未来的 Python "
"版本中，这将引发 :exc:`SyntaxWarning` 并最终改为 :exc:`SyntaxError`。 （由 Serhiy Storchaka "
"在 :gh:`81548` 中贡献。）"

#: ../../whatsnew/3.11.rst:1734
msgid ""
"The delegation of :func:`int` to :meth:`~object.__trunc__` is now "
"deprecated. Calling ``int(a)`` when ``type(a)`` implements "
":meth:`!__trunc__` but not :meth:`~object.__int__` or "
":meth:`~object.__index__` now raises a :exc:`DeprecationWarning`. "
"(Contributed by Zackery Spytz in :issue:`44977`.)"
msgstr ""
"现在从 :func:`int` 至 :meth:`~object.__trunc__` 的委托已被弃用。 当 ``type(a)`` 实现了 "
":meth:`!__trunc__` 但未实现 :meth:`~object.__int__` 或 :meth:`~object.__index__` "
"时调用 ``int(a)`` 现在将引发 :exc:`DeprecationWarning`。 （由 Zackery Spytz 在 "
":issue:`44977` 中贡献。）"

#: ../../whatsnew/3.11.rst:1744
msgid "Modules"
msgstr "模块"

#: ../../whatsnew/3.11.rst:1748
msgid ""
":pep:`594` led to the deprecations of the following modules slated for "
"removal in Python 3.13:"
msgstr ":pep:`594` 使得以下模块被弃用并将在 Python 3.13 中被移除:"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`!aifc`"
msgstr ":mod:`!aifc`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`!chunk`"
msgstr ":mod:`!chunk`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`!msilib`"
msgstr ":mod:`!msilib`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`!pipes`"
msgstr ":mod:`!pipes`"

#: ../../whatsnew/3.11.rst:1752
msgid ":mod:`!telnetlib`"
msgstr ":mod:`!telnetlib`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`!audioop`"
msgstr ":mod:`!audioop`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`!crypt`"
msgstr ":mod:`!crypt`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`!nis`"
msgstr ":mod:`!nis`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`!sndhdr`"
msgstr ":mod:`!sndhdr`"

#: ../../whatsnew/3.11.rst:1754
msgid ":mod:`!uu`"
msgstr ":mod:`!uu`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`!cgi`"
msgstr ":mod:`!cgi`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`!imghdr`"
msgstr ":mod:`!imghdr`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`!nntplib`"
msgstr ":mod:`!nntplib`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`!spwd`"
msgstr ":mod:`!spwd`"

#: ../../whatsnew/3.11.rst:1756
msgid ":mod:`!xdrlib`"
msgstr ":mod:`!xdrlib`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`!cgitb`"
msgstr ":mod:`!cgitb`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`!mailcap`"
msgstr ":mod:`!mailcap`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`!ossaudiodev`"
msgstr ":mod:`!ossaudiodev`"

#: ../../whatsnew/3.11.rst:1758
msgid ":mod:`!sunau`"
msgstr ":mod:`!sunau`"

#: ../../whatsnew/3.11.rst:1761
msgid ""
"(Contributed by Brett Cannon in :issue:`47061` and Victor Stinner in "
":gh:`68966`.)"
msgstr ""
"（由 Brett Cannon 在 :issue:`47061` 以及 Victor Stinner 在 :gh:`68966` 中贡献。）"

#: ../../whatsnew/3.11.rst:1764
msgid ""
"The :mod:`!asynchat`, :mod:`!asyncore` and  :mod:`!smtpd` modules have been "
"deprecated since at least Python 3.6. Their documentation and deprecation "
"warnings have now been updated to note they will be removed in Python 3.12. "
"(Contributed by Hugo van Kemenade in :issue:`47022`.)"
msgstr ""
"至少从 Python 3.6 起 :mod:`!asynchat`, :mod:`!asyncore` 和 :mod:`!smtpd` 模块已被弃用。 "
"它们的文档和弃用警告现在已更新为提示它们将在 Python 3.12 中被移除。 （由 Hugo van Kemenade 在 "
":issue:`47022` 中贡献。）"

#: ../../whatsnew/3.11.rst:1769
msgid ""
"The :mod:`!lib2to3` package and ``2to3`` tool are now deprecated and may not"
" be able to parse Python 3.10 or newer. See :pep:`617`, introducing the new "
"PEG parser, for details. (Contributed by Victor Stinner in :issue:`40360`.)"
msgstr ""
"现在 :mod:`!lib2to3` 包和 ``2to3`` 工具已被弃用并可能无法解析 Python 3.10 或更新的版本。 请参阅引入新的 PEG"
" 解析器的 :pep:`617` 了解详情。 （由 Victor Stinner 在 :issue:`40360` 中贡献。）"

#: ../../whatsnew/3.11.rst:1774
msgid ""
"Undocumented modules :mod:`!sre_compile`, :mod:`!sre_constants` and "
":mod:`!sre_parse` are now deprecated. (Contributed by Serhiy Storchaka in "
":issue:`47152`.)"
msgstr ""
"未写入文档的模块 :mod:`!sre_compile`, :mod:`!sre_constants` 和 :mod:`!sre_parse` "
"现已被弃用。 （由 Serhiy Storchaka 在 :issue:`47152` 中贡献。）"

#: ../../whatsnew/3.11.rst:1782
msgid "Standard Library"
msgstr "标准库"

#: ../../whatsnew/3.11.rst:1784
msgid ""
"The following have been deprecated in :mod:`configparser` since Python 3.2. "
"Their deprecation warnings have now been updated to note they will be "
"removed in Python 3.12:"
msgstr ""
":mod:`configparser` 的下列部分自 Python 3.2 起已被弃用。 现在它们的弃用警告已更新为提示它们将在 Python 3.12"
" 中被移除:"

#: ../../whatsnew/3.11.rst:1788
msgid "the :class:`!configparser.SafeConfigParser` class"
msgstr ":class:`!configparser.SafeConfigParser` 类"

#: ../../whatsnew/3.11.rst:1789
msgid "the :attr:`!configparser.ParsingError.filename` property"
msgstr ":attr:`!configparser.ParsingError.filename` 特征属性"

#: ../../whatsnew/3.11.rst:1790
msgid "the :meth:`!configparser.RawConfigParser.readfp` method"
msgstr ":meth:`!configparser.RawConfigParser.readfp` 方法"

#: ../../whatsnew/3.11.rst:1792
msgid "(Contributed by Hugo van Kemenade in :issue:`45173`.)"
msgstr "（由 Hugo van Kemenade 在 :issue:`45173` 中贡献。）"

#: ../../whatsnew/3.11.rst:1794
msgid ""
":class:`!configparser.LegacyInterpolation` has been deprecated in the "
"docstring since Python 3.2, and is not listed in the :mod:`configparser` "
"documentation. It now emits a :exc:`DeprecationWarning` and will be removed "
"in Python 3.13. Use :class:`configparser.BasicInterpolation` or "
":class:`configparser.ExtendedInterpolation` instead. (Contributed by Hugo "
"van Kemenade in :issue:`46607`.)"
msgstr ""
":class:`!configparser.LegacyInterpolation` 自 Python 3.2 起已在文档字符串中被弃用，并未在 "
":mod:`configparser` 文档中列出。 现在它将发出 :exc:`DeprecationWarning` 并将在 Python 3.13 "
"中被移除。 请改用 :class:`configparser.BasicInterpolation` 或 "
":class:`configparser.ExtendedInterpolation`。 （由 Hugo van Kemenade 在 "
":issue:`46607` 中贡献。）"

#: ../../whatsnew/3.11.rst:1801
msgid ""
"The older set of :mod:`importlib.resources` functions were deprecated in "
"favor of the replacements added in Python 3.9 and will be removed in a "
"future Python version, due to not supporting resources located within "
"package subdirectories:"
msgstr ""
"较旧的 :mod:`importlib.resources` 函数集合已被弃用而改用在 Python 3.9 中添加的替代物并将在未来的 Python "
"版本中被移除，因为它们不支持位于 package 子目录下的资源:"

#: ../../whatsnew/3.11.rst:1806
msgid ":func:`!importlib.resources.contents`"
msgstr ":func:`!importlib.resources.contents`"

#: ../../whatsnew/3.11.rst:1807
msgid ":func:`!importlib.resources.is_resource`"
msgstr ":func:`!importlib.resources.is_resource`"

#: ../../whatsnew/3.11.rst:1808
msgid ":func:`!importlib.resources.open_binary`"
msgstr ":func:`!importlib.resources.open_binary`"

#: ../../whatsnew/3.11.rst:1809
msgid ":func:`!importlib.resources.open_text`"
msgstr ":func:`!importlib.resources.open_text`"

#: ../../whatsnew/3.11.rst:1810
msgid ":func:`!importlib.resources.read_binary`"
msgstr ":func:`!importlib.resources.read_binary`"

#: ../../whatsnew/3.11.rst:1811
msgid ":func:`!importlib.resources.read_text`"
msgstr ":func:`!importlib.resources.read_text`"

#: ../../whatsnew/3.11.rst:1812
msgid ":func:`!importlib.resources.path`"
msgstr ":func:`!importlib.resources.path`"

#: ../../whatsnew/3.11.rst:1814
msgid ""
"The :func:`locale.getdefaultlocale` function is deprecated and will be "
"removed in Python 3.15. Use :func:`locale.setlocale`, "
":func:`locale.getpreferredencoding(False) <locale.getpreferredencoding>` and"
" :func:`locale.getlocale` functions instead. (Contributed by Victor Stinner "
"in :gh:`90817`.)"
msgstr ""
":func:`locale.getdefaultlocale` 函数已被弃用并将在 Python 3.15 中移除。 请改用 "
":func:`locale.setlocale`, :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>` 和 :func:`locale.getlocale` 函数。 （由 Victor "
"Stinner 在 :gh:`90817` 中贡献。）"

#: ../../whatsnew/3.11.rst:1820
msgid ""
"The :func:`!locale.resetlocale` function is deprecated and will be removed "
"in Python 3.13. Use ``locale.setlocale(locale.LC_ALL, \"\")`` instead. "
"(Contributed by Victor Stinner in :gh:`90817`.)"
msgstr ""
":func:`!locale.resetlocale` 函数已被弃用并将在 Python 3.13 中移除。 请改用 "
"``locale.setlocale(locale.LC_ALL, \"\")``。 （由 Victor Stinner 在 :gh:`90817` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:1824
msgid ""
"Stricter rules will now be applied for numerical group references and group "
"names in :ref:`regular expressions <re-syntax>`. Only sequences of ASCII "
"digits will now be accepted as a numerical reference, and the group name in "
":class:`bytes` patterns and replacement strings can only contain ASCII "
"letters, digits and underscores. For now, a deprecation warning is raised "
"for syntax violating these rules. (Contributed by Serhiy Storchaka in "
":gh:`91760`.)"
msgstr ""
"现在对于 :ref:`正则表达式 <re-syntax>` 中的数字分组引用和分组名称将应用更严格的规则。 现在只有 ASCII "
"数字序列会被接受作为数字引用，而 :class:`bytes` 模式和替换字符串中的分组名称只能包含 ASCII 字母、数字和下划线。 "
"目前对于违反这些规则的语法将会引发弃用警告。 （由 Serhiy Storchaka 在 :gh:`91760` 中贡献。）"

#: ../../whatsnew/3.11.rst:1832
msgid ""
"In the :mod:`re` module, the :func:`!re.template` function and the "
"corresponding :const:`!re.TEMPLATE` and :const:`!re.T` flags are deprecated,"
" as they were undocumented and lacked an obvious purpose. They will be "
"removed in Python 3.13. (Contributed by Serhiy Storchaka and Miro Hrončok in"
" :gh:`92728`.)"
msgstr ""
"在 :mod:`re` 模块中，:func:`!re.template` 函数和相应的 :const:`!re.TEMPLATE` 和 "
":const:`!re.T` 旗标已被弃用，因为它们未被写入文档并缺少明显的目的。 它们将在 Python 3.13 中移除。 （由 Serhiy "
"Storchaka 和 Miro Hrončok 在 :gh:`92728` 由贡献。）"

#: ../../whatsnew/3.11.rst:1838
msgid ""
":func:`!turtle.settiltangle` has been deprecated since Python 3.1; it now "
"emits a deprecation warning and will be removed in Python 3.13. Use "
":func:`turtle.tiltangle` instead (it was earlier incorrectly marked as "
"deprecated, and its docstring is now corrected). (Contributed by Hugo van "
"Kemenade in :issue:`45837`.)"
msgstr ""
":func:`!turtle.settiltangle` 自 Python 3.1 起已被弃用；现在它会发出弃用警告并将在 Python 3.13 "
"中移除。 请改用 :func:`turtle.tiltangle` (该函数在此前被错误地标记为已弃用，现在它的文档字符串已被修正)。 （由 Hugo "
"van Kemenade 在 :issue:`45837` 中贡献。）"

#: ../../whatsnew/3.11.rst:1844
msgid ""
":class:`typing.Text`, which exists solely to provide compatibility support "
"between Python 2 and Python 3 code, is now deprecated. Its removal is "
"currently unplanned, but users are encouraged to use :class:`str` instead "
"wherever possible. (Contributed by Alex Waygood in :gh:`92332`.)"
msgstr ""
":class:`typing.Text`，它的存在只是为了在 Python 2 和 Python 3 代码之间提供兼容性支持，现在已被弃用。 "
"目前尚无移除它的计划，但推荐用户在任何可能的地方改用 :class:`str`。 （由 Alex Waygood 在 :gh:`92332` 中贡献。）"

#: ../../whatsnew/3.11.rst:1850
msgid ""
"The keyword argument syntax for constructing :data:`typing.TypedDict` types "
"is now deprecated. Support will be removed in Python 3.13. (Contributed by "
"Jingchen Ye in :gh:`90224`.)"
msgstr ""
"用于构造 :data:`typing.TypedDict` 类型的关键字参数语法现在已被弃用。 将在 Python 3.13 中移除对它的支持。 （由 "
"Jingchen Ye 在 :gh:`90224` 中贡献。）"

#: ../../whatsnew/3.11.rst:1854
msgid ""
":class:`!webbrowser.MacOSX` is deprecated and will be removed in Python "
"3.13. It is untested, undocumented, and not used by :mod:`webbrowser` "
"itself. (Contributed by Donghee Na in :issue:`42255`.)"
msgstr ""
":class:`!webbrowser.MacOSX` 已被弃用并将在 Python 3.13 中移除。 它未经测试，未写入文档，也未被 "
":mod:`webbrowser` 本身所使用。 （由 Donghee Na 在 :issue:`42255` 中贡献。）"

#: ../../whatsnew/3.11.rst:1858
msgid ""
"The behavior of returning a value from a :class:`~unittest.TestCase` and "
":class:`~unittest.IsolatedAsyncioTestCase` test methods (other than the "
"default ``None`` value) is now deprecated."
msgstr ""
"从 :class:`~unittest.TestCase` 和 :class:`~unittest.IsolatedAsyncioTestCase` "
"测试方法返回一个值（默认的 ``None`` 以外的值）的行为现在已被弃用。"

#: ../../whatsnew/3.11.rst:1862
msgid ""
"Deprecated the following not-formally-documented :mod:`unittest` functions, "
"scheduled for removal in Python 3.13:"
msgstr "已弃用下列未正式写入文档的 :mod:`unittest` 函数，计划在 Python 3.13 中移除:"

#: ../../whatsnew/3.11.rst:1865
msgid ":func:`!unittest.findTestCases`"
msgstr ":func:`!unittest.findTestCases`"

#: ../../whatsnew/3.11.rst:1866
msgid ":func:`!unittest.makeSuite`"
msgstr ":func:`!unittest.makeSuite`"

#: ../../whatsnew/3.11.rst:1867
msgid ":func:`!unittest.getTestCaseNames`"
msgstr ":func:`!unittest.getTestCaseNames`"

#: ../../whatsnew/3.11.rst:1869
msgid "Use :class:`~unittest.TestLoader` methods instead:"
msgstr "请改用 :class:`~unittest.TestLoader` 方法:"

#: ../../whatsnew/3.11.rst:1871
msgid ":meth:`unittest.TestLoader.loadTestsFromModule`"
msgstr ":meth:`unittest.TestLoader.loadTestsFromModule`"

#: ../../whatsnew/3.11.rst:1872
msgid ":meth:`unittest.TestLoader.loadTestsFromTestCase`"
msgstr ":meth:`unittest.TestLoader.loadTestsFromTestCase`"

#: ../../whatsnew/3.11.rst:1873
msgid ":meth:`unittest.TestLoader.getTestCaseNames`"
msgstr ":meth:`unittest.TestLoader.getTestCaseNames`"

#: ../../whatsnew/3.11.rst:1875
msgid "(Contributed by Erlend E. Aasland in :issue:`5846`.)"
msgstr "（由 Erlend E. Aasland 在 :issue:`5846` 中贡献。）"

#: ../../whatsnew/3.11.rst:1877
msgid ""
":meth:`!unittest.TestProgram.usageExit` is marked deprecated, to be removed "
"in 3.13. (Contributed by Carlos Damázio in :gh:`67048`.)"
msgstr ""
":meth:`!unittest.TestProgram.usageExit` 被标记为已弃用，将在 3.13 中被移除。 （由 Carlos "
"Damázio 在 :gh:`67048` 中贡献。）"

#: ../../whatsnew/3.11.rst:1886 ../../whatsnew/3.11.rst:2608
msgid "Pending Removal in Python 3.12"
msgstr "计划在 Python 3.12 中移除"

#: ../../whatsnew/3.11.rst:1888
msgid ""
"The following Python APIs have been deprecated in earlier Python releases, "
"and will be removed in Python 3.12."
msgstr "以下 Python API 已在之前的 Python 发布版中弃用，并将在 Python 3.12 中移除。"

#: ../../whatsnew/3.11.rst:1891
msgid ""
"C APIs pending removal are :ref:`listed separately <whatsnew311-c-api-"
"pending-removal>`."
msgstr "C API 的移除计划将 :ref:`单独列出 <whatsnew311-c-api-pending-removal>`。"

#: ../../whatsnew/3.11.rst:1894
msgid "The :mod:`!asynchat` module"
msgstr ":mod:`!asynchat` 模块"

#: ../../whatsnew/3.11.rst:1895
msgid "The :mod:`!asyncore` module"
msgstr ":mod:`!asyncore` 模块"

#: ../../whatsnew/3.11.rst:1896
msgid "The :ref:`entire distutils package <distutils-deprecated>`"
msgstr ":ref:`整个 distutils 包 <distutils-deprecated>`"

#: ../../whatsnew/3.11.rst:1897
msgid "The :mod:`!imp` module"
msgstr ":mod:`!imp` 模块"

#: ../../whatsnew/3.11.rst:1898
msgid "The :class:`typing.io <typing.IO>` namespace"
msgstr ":class:`typing.io <typing.IO>` 命名空间"

#: ../../whatsnew/3.11.rst:1899
msgid "The :class:`typing.re <typing.Pattern>` namespace"
msgstr ":class:`typing.re <typing.Pattern>` 命名空间"

#: ../../whatsnew/3.11.rst:1900
msgid ":func:`!cgi.log`"
msgstr ":func:`!cgi.log`"

#: ../../whatsnew/3.11.rst:1901
msgid ":func:`!importlib.find_loader`"
msgstr ":func:`!importlib.find_loader`"

#: ../../whatsnew/3.11.rst:1902
msgid ":meth:`!importlib.abc.Loader.module_repr`"
msgstr ":meth:`!importlib.abc.Loader.module_repr`"

#: ../../whatsnew/3.11.rst:1903
msgid ":meth:`!importlib.abc.MetaPathFinder.find_module`"
msgstr ":meth:`!importlib.abc.MetaPathFinder.find_module`"

#: ../../whatsnew/3.11.rst:1904
msgid ":meth:`!importlib.abc.PathEntryFinder.find_loader`"
msgstr ":meth:`!importlib.abc.PathEntryFinder.find_loader`"

#: ../../whatsnew/3.11.rst:1905
msgid ":meth:`!importlib.abc.PathEntryFinder.find_module`"
msgstr ":meth:`!importlib.abc.PathEntryFinder.find_module`"

#: ../../whatsnew/3.11.rst:1906
msgid ":meth:`!importlib.machinery.BuiltinImporter.find_module`"
msgstr ":meth:`!importlib.machinery.BuiltinImporter.find_module`"

#: ../../whatsnew/3.11.rst:1907
msgid ":meth:`!importlib.machinery.BuiltinLoader.module_repr`"
msgstr ":meth:`!importlib.machinery.BuiltinLoader.module_repr`"

#: ../../whatsnew/3.11.rst:1908
msgid ":meth:`!importlib.machinery.FileFinder.find_loader`"
msgstr ":meth:`!importlib.machinery.FileFinder.find_loader`"

#: ../../whatsnew/3.11.rst:1909
msgid ":meth:`!importlib.machinery.FileFinder.find_module`"
msgstr ":meth:`!importlib.machinery.FileFinder.find_module`"

#: ../../whatsnew/3.11.rst:1910
msgid ":meth:`!importlib.machinery.FrozenImporter.find_module`"
msgstr ":meth:`!importlib.machinery.FrozenImporter.find_module`"

#: ../../whatsnew/3.11.rst:1911
msgid ":meth:`!importlib.machinery.FrozenLoader.module_repr`"
msgstr ":meth:`!importlib.machinery.FrozenLoader.module_repr`"

#: ../../whatsnew/3.11.rst:1912
msgid ":meth:`!importlib.machinery.PathFinder.find_module`"
msgstr ":meth:`!importlib.machinery.PathFinder.find_module`"

#: ../../whatsnew/3.11.rst:1913
msgid ":meth:`!importlib.machinery.WindowsRegistryFinder.find_module`"
msgstr ":meth:`!importlib.machinery.WindowsRegistryFinder.find_module`"

#: ../../whatsnew/3.11.rst:1914
msgid ":func:`!importlib.util.module_for_loader`"
msgstr ":func:`!importlib.util.module_for_loader`"

#: ../../whatsnew/3.11.rst:1915
msgid ":func:`!importlib.util.set_loader_wrapper`"
msgstr ":func:`!importlib.util.set_loader_wrapper`"

#: ../../whatsnew/3.11.rst:1916
msgid ":func:`!importlib.util.set_package_wrapper`"
msgstr ":func:`!importlib.util.set_package_wrapper`"

#: ../../whatsnew/3.11.rst:1917
msgid ":class:`!pkgutil.ImpImporter`"
msgstr ":class:`!pkgutil.ImpImporter`"

#: ../../whatsnew/3.11.rst:1918
msgid ":class:`!pkgutil.ImpLoader`"
msgstr ":class:`!pkgutil.ImpLoader`"

#: ../../whatsnew/3.11.rst:1919
msgid ":meth:`!pathlib.Path.link_to`"
msgstr ":meth:`!pathlib.Path.link_to`"

#: ../../whatsnew/3.11.rst:1920
msgid ":func:`!sqlite3.enable_shared_cache`"
msgstr ":func:`!sqlite3.enable_shared_cache`"

#: ../../whatsnew/3.11.rst:1921
msgid ":func:`!sqlite3.OptimizedUnicode`"
msgstr ":func:`!sqlite3.OptimizedUnicode`"

#: ../../whatsnew/3.11.rst:1922
msgid ":envvar:`!PYTHONTHREADDEBUG` environment variable"
msgstr ":envvar:`!PYTHONTHREADDEBUG` 环境变量"

#: ../../whatsnew/3.11.rst:1923
msgid "The following deprecated aliases in :mod:`unittest`:"
msgstr "The following deprecated aliases in :mod:`unittest` 中的下列已弃用别名:"

#: ../../whatsnew/3.11.rst:1926
msgid "Deprecated alias"
msgstr "已弃用的别名"

#: ../../whatsnew/3.11.rst:1926
msgid "Method Name"
msgstr "方法名"

#: ../../whatsnew/3.11.rst:1926
msgid "Deprecated in"
msgstr "弃用于"

#: ../../whatsnew/3.11.rst:1928
msgid "``failUnless``"
msgstr "``failUnless``"

#: ../../whatsnew/3.11.rst:1928 ../../whatsnew/3.11.rst:1935
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.11.rst:1928 ../../whatsnew/3.11.rst:1929
#: ../../whatsnew/3.11.rst:1930 ../../whatsnew/3.11.rst:1931
#: ../../whatsnew/3.11.rst:1932 ../../whatsnew/3.11.rst:1933
#: ../../whatsnew/3.11.rst:1934
msgid "3.1"
msgstr "3.1"

#: ../../whatsnew/3.11.rst:1929
msgid "``failIf``"
msgstr "``failIf``"

#: ../../whatsnew/3.11.rst:1929
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: ../../whatsnew/3.11.rst:1930
msgid "``failUnlessEqual``"
msgstr "``failUnlessEqual``"

#: ../../whatsnew/3.11.rst:1930 ../../whatsnew/3.11.rst:1936
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.11.rst:1931
msgid "``failIfEqual``"
msgstr "``failIfEqual``"

#: ../../whatsnew/3.11.rst:1931 ../../whatsnew/3.11.rst:1937
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.11.rst:1932
msgid "``failUnlessAlmostEqual``"
msgstr "``failUnlessAlmostEqual``"

#: ../../whatsnew/3.11.rst:1932 ../../whatsnew/3.11.rst:1938
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.11.rst:1933
msgid "``failIfAlmostEqual``"
msgstr "``failIfAlmostEqual``"

#: ../../whatsnew/3.11.rst:1933 ../../whatsnew/3.11.rst:1939
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.11.rst:1934
msgid "``failUnlessRaises``"
msgstr "``failUnlessRaises``"

#: ../../whatsnew/3.11.rst:1934
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: ../../whatsnew/3.11.rst:1935
msgid "``assert_``"
msgstr "``assert_``"

#: ../../whatsnew/3.11.rst:1935 ../../whatsnew/3.11.rst:1936
#: ../../whatsnew/3.11.rst:1937 ../../whatsnew/3.11.rst:1938
#: ../../whatsnew/3.11.rst:1939 ../../whatsnew/3.11.rst:1940
#: ../../whatsnew/3.11.rst:1941
msgid "3.2"
msgstr "3.2"

#: ../../whatsnew/3.11.rst:1936
msgid "``assertEquals``"
msgstr "``assertEquals``"

#: ../../whatsnew/3.11.rst:1937
msgid "``assertNotEquals``"
msgstr "``assertNotEquals``"

#: ../../whatsnew/3.11.rst:1938
msgid "``assertAlmostEquals``"
msgstr "``assertAlmostEquals``"

#: ../../whatsnew/3.11.rst:1939
msgid "``assertNotAlmostEquals``"
msgstr "``assertNotAlmostEquals``"

#: ../../whatsnew/3.11.rst:1940
msgid "``assertRegexpMatches``"
msgstr "``assertRegexpMatches``"

#: ../../whatsnew/3.11.rst:1940
msgid ":meth:`.assertRegex`"
msgstr ":meth:`.assertRegex`"

#: ../../whatsnew/3.11.rst:1941
msgid "``assertRaisesRegexp``"
msgstr "``assertRaisesRegexp``"

#: ../../whatsnew/3.11.rst:1941
msgid ":meth:`.assertRaisesRegex`"
msgstr ":meth:`.assertRaisesRegex`"

#: ../../whatsnew/3.11.rst:1942
msgid "``assertNotRegexpMatches``"
msgstr "``assertNotRegexpMatches``"

#: ../../whatsnew/3.11.rst:1942
msgid ":meth:`.assertNotRegex`"
msgstr ":meth:`.assertNotRegex`"

#: ../../whatsnew/3.11.rst:1942
msgid "3.5"
msgstr "3.5"

#: ../../whatsnew/3.11.rst:1949 ../../whatsnew/3.11.rst:2634
msgid "Removed"
msgstr "移除"

#: ../../whatsnew/3.11.rst:1951
msgid "This section lists Python APIs that have been removed in Python 3.11."
msgstr "本小节列出了已在 Python 3.11 中移除的 Python API。"

#: ../../whatsnew/3.11.rst:1953
msgid ""
"Removed C APIs are :ref:`listed separately <whatsnew311-c-api-removed>`."
msgstr "已移除的 C API 将 :ref:`单独列出 <whatsnew311-c-api-removed>`。"

#: ../../whatsnew/3.11.rst:1955
msgid ""
"Removed the :func:`!@asyncio.coroutine` :term:`decorator` enabling legacy "
"generator-based coroutines to be compatible with :keyword:`async` / "
":keyword:`await` code. The function has been deprecated since Python 3.8 and"
" the removal was initially scheduled for Python 3.10. Use :keyword:`async "
"def` instead. (Contributed by Illia Volochii in :issue:`43216`.)"
msgstr ""
"移除了允许旧式基于生成器的协程兼容 :keyword:`async` / :keyword:`await` 代码的 "
":func:`!@asyncio.coroutine` :term:`decorator`。 该函数自 Python 3.8 起已被弃用并且原定在 "
"Python 3.10 中移除。 请改用 :keyword:`async def`。 （由 Illia Volochii 在 "
":issue:`43216` 中贡献。）"

#: ../../whatsnew/3.11.rst:1962
msgid ""
"Removed :class:`!asyncio.coroutines.CoroWrapper` used for wrapping legacy "
"generator-based coroutine objects in the debug mode. (Contributed by Illia "
"Volochii in :issue:`43216`.)"
msgstr ""
"移除了用于在调试模式下包装旧式基于生成器的协程对象的 :class:`!asyncio.coroutines.CoroWrapper`。 （由 "
"Illia Volochii 在 :issue:`43216` 中贡献。）"

#: ../../whatsnew/3.11.rst:1966
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint`, disabled in Python 3.9, is "
"now entirely removed. This is because of the behavior of the socket option "
"``SO_REUSEADDR`` in UDP. (Contributed by Hugo van Kemenade in "
":issue:`45129`.)"
msgstr ""
"出于显著的安全性考量，自 Python 3.9 起已被禁用的 :meth:`asyncio.loop.create_datagram_endpoint`"
" 的 *reuse_address* 形参现在已彻底移除。 这是因为在 UDP 中套接字选项 ``SO_REUSEADDR`` 的行为。 （由 Hugo"
" van Kemenade 在 :issue:`45129` 中贡献。）"

#: ../../whatsnew/3.11.rst:1972
msgid ""
"Removed the :mod:`!binhex` module, deprecated in Python 3.9. Also removed "
"the related, similarly-deprecated :mod:`binascii` functions:"
msgstr ""
"移除了自 Python 3.9 起已弃用的 :mod:`!binhex` 模块。 并移除了相关联的同样已弃用的 :mod:`binascii` 函数:"

#: ../../whatsnew/3.11.rst:1975
msgid ":func:`!binascii.a2b_hqx`"
msgstr ":func:`!binascii.a2b_hqx`"

#: ../../whatsnew/3.11.rst:1976
msgid ":func:`!binascii.b2a_hqx`"
msgstr ":func:`!binascii.b2a_hqx`"

#: ../../whatsnew/3.11.rst:1977
msgid ":func:`!binascii.rlecode_hqx`"
msgstr ":func:`!binascii.rlecode_hqx`"

#: ../../whatsnew/3.11.rst:1978
msgid ":func:`!binascii.rldecode_hqx`"
msgstr ":func:`!binascii.rldecode_hqx`"

#: ../../whatsnew/3.11.rst:1980
msgid "The :func:`binascii.crc_hqx` function remains available."
msgstr ":func:`binascii.crc_hqx` 函数仍然可用。"

#: ../../whatsnew/3.11.rst:1982
msgid "(Contributed by Victor Stinner in :issue:`45085`.)"
msgstr "（由 Victor Stinner 在 :issue:`45085` 中贡献。）"

#: ../../whatsnew/3.11.rst:1984
msgid ""
"Removed the :mod:`!distutils` ``bdist_msi`` command deprecated in Python "
"3.9. Use ``bdist_wheel`` (wheel packages) instead. (Contributed by Hugo van "
"Kemenade in :issue:`45124`.)"
msgstr ""
"移除了自 Python 3.9 起已弃用的 :mod:`!distutils` ``bdist_msi`` 命令。 请改用 "
"``bdist_wheel`` (wheel 包)。 （由 Hugo van Kemenade 在 :issue:`45124` 中贡献。）"

#: ../../whatsnew/3.11.rst:1988
msgid ""
"Removed the :meth:`~object.__getitem__` methods of "
":class:`xml.dom.pulldom.DOMEventStream`, :class:`wsgiref.util.FileWrapper` "
"and :class:`fileinput.FileInput`, deprecated since Python 3.9. (Contributed "
"by Hugo van Kemenade in :issue:`45132`.)"
msgstr ""
"移除了自 Python 3.9 起已弃用的 :class:`xml.dom.pulldom.DOMEventStream`, "
":class:`wsgiref.util.FileWrapper` 和 :class:`fileinput.FileInput` 的 "
":meth:`~object.__getitem__` 方法。 （由 Hugo van Kemenade 在 :issue:`45132` 中贡献。）"

#: ../../whatsnew/3.11.rst:1993
msgid ""
"Removed the deprecated :mod:`gettext` functions :func:`!lgettext`, "
":func:`!ldgettext`, :func:`!lngettext` and :func:`!ldngettext`. Also removed"
" the :func:`!bind_textdomain_codeset` function, the "
":meth:`!NullTranslations.output_charset` and "
":meth:`!NullTranslations.set_output_charset` methods, and the *codeset* "
"parameter of :func:`!translation` and :func:`!install`, since they are only "
"used for the :func:`!l*gettext` functions. (Contributed by Donghee Na and "
"Serhiy Storchaka in :issue:`44235`.)"
msgstr ""
"移除了已弃用的 :mod:`gettext` 函数 :func:`!lgettext`, :func:`!ldgettext`, "
":func:`!lngettext` 和 :func:`!ldngettext`。 并移除了 "
":func:`!bind_textdomain_codeset` 函数、:meth:`!NullTranslations.output_charset`"
" 和 :meth:`!NullTranslations.set_output_charset` 方法，以及 :func:`!translation` 和"
" :func:`!install` 的 *codeset* 形参 ，因为它们仅被用于 :func:`!l*gettext` 函数。 （由 Donghee"
" Na 和 Serhiy Storchaka 在 :issue:`44235` 中贡献。）"

#: ../../whatsnew/3.11.rst:2003
msgid "Removed from the :mod:`inspect` module:"
msgstr "已从 :mod:`inspect` 模块中移除:"

#: ../../whatsnew/3.11.rst:2005
msgid ""
"The :func:`!getargspec` function, deprecated since Python 3.0; use "
":func:`inspect.signature` or :func:`inspect.getfullargspec` instead."
msgstr ""
":func:`!getargspec` 函数自 Python 3.0 起已被弃用；请改用 :func:`inspect.signature` 或 "
":func:`inspect.getfullargspec`。"

#: ../../whatsnew/3.11.rst:2008
msgid ""
"The :func:`!formatargspec` function, deprecated since Python 3.5; use the "
":func:`inspect.signature` function or the :class:`inspect.Signature` object "
"directly."
msgstr ""
":func:`!formatargspec` 函数自 Python 3.5 起已被弃用；请改用 :func:`inspect.signature` "
"函数或直接使用 :class:`inspect.Signature` 对象。"

#: ../../whatsnew/3.11.rst:2012
msgid ""
"The undocumented :meth:`!Signature.from_builtin` and "
":meth:`!Signature.from_function` methods, deprecated since Python 3.5; use "
"the :meth:`Signature.from_callable() <inspect.Signature.from_callable>` "
"method instead."
msgstr ""
"未写入文档的 :meth:`!Signature.from_builtin` 和 :meth:`!Signature.from_function` "
"方法自 Python 3.5 起已被弃用；请改用 :meth:`Signature.from_callable() "
"<inspect.Signature.from_callable>` 方法。"

#: ../../whatsnew/3.11.rst:2017
msgid "(Contributed by Hugo van Kemenade in :issue:`45320`.)"
msgstr "（由 Hugo van Kemenade 在 :issue:`45320` 中贡献。）"

#: ../../whatsnew/3.11.rst:2019
msgid ""
"Removed the :meth:`~object.__class_getitem__` method from "
":class:`pathlib.PurePath`, because it was not used and added by mistake in "
"previous versions. (Contributed by Nikita Sobolev in :issue:`46483`.)"
msgstr ""
"从 :class:`pathlib.PurePath` 中移除了 :meth:`~object.__class_getitem__` "
"方法，因为它从未被使用而是在之前版本中误添加的。 （由 Nikita Sobolev 在 :issue:`46483` 中贡献。）"

#: ../../whatsnew/3.11.rst:2024
msgid ""
"Removed the :class:`!MailmanProxy` class in the :mod:`!smtpd` module, as it "
"is unusable without the external :mod:`!mailman` package. (Contributed by "
"Donghee Na in :issue:`35800`.)"
msgstr ""
"移除了 :mod:`!smtpd` 模块中的 :class:`!MailmanProxy` 类，因为它在没有外部 :mod:`!mailman` "
"包时是无法使用的。 （由 Donghee Na 在 :issue:`35800` 中贡献。）"

#: ../../whatsnew/3.11.rst:2028
msgid ""
"Removed the deprecated :meth:`!split` method of "
":class:`!_tkinter.TkappType`. (Contributed by Erlend E. Aasland in "
":issue:`38371`.)"
msgstr ""
"移除了 :class:`!_tkinter.TkappType` 中已被弃用的 :meth:`!split` 方法。 （由 Erlend E. "
"Aasland 在 :issue:`38371` 中贡献。）"

#: ../../whatsnew/3.11.rst:2031
msgid ""
"Removed namespace package support from :mod:`unittest` discovery. It was "
"introduced in Python 3.4 but has been broken since Python 3.7. (Contributed "
"by Inada Naoki in :issue:`23882`.)"
msgstr ""
"从 :mod:`unittest` 发现中移除了命名空间包支持。 它在 Python 3.4 中引入但自 Python 3.7 起已不可用。 （由 "
"Inada Naoki 在 :issue:`23882` 中贡献。）"

#: ../../whatsnew/3.11.rst:2035
msgid ""
"Removed the undocumented private :meth:`!float.__set_format__` method, "
"previously known as :meth:`!float.__setformat__` in Python 3.7. Its "
"docstring said: \"You probably don't want to use this function. It exists "
"mainly to be used in Python's test suite.\" (Contributed by Victor Stinner "
"in :issue:`46852`.)"
msgstr ""
"移除了未写入文档的私有 :meth:`!float.__set_format__` 方法，之前在 Python 3.7 中名为 "
":meth:`!float.__setformat__`。 其文档字符串已写明：“你应该不需要使用此函数。 它的存在主要是用于 Python "
"的测试套件。” （由 Victor Stinner 在 :issue:`46852` 中贡献。）"

#: ../../whatsnew/3.11.rst:2041
msgid ""
"The :option:`!--experimental-isolated-subinterpreters` configure flag (and "
"corresponding :c:macro:`!EXPERIMENTAL_ISOLATED_SUBINTERPRETERS` macro) have "
"been removed."
msgstr ""
":option:`!--experimental-isolated-subinterpreters` 配置旗标（和相应的 "
":c:macro:`!EXPERIMENTAL_ISOLATED_SUBINTERPRETERS` 宏）已被移除。"

#: ../../whatsnew/3.11.rst:2045
msgid ""
":pypi:`Pynche` --- The Pythonically Natural Color and Hue Editor --- has "
"been moved out of ``Tools/scripts`` and is `being developed independently "
"<https://gitlab.com/warsaw/pynche/-/tree/main>`_ from the Python source "
"tree."
msgstr ""
":pypi:`Pynche` --- The Pythonically Natural Color and Hue Editor --- 已被移出 "
"``Tools/scripts`` 并且脱离Python 源代码树转为 `独立开发 "
"<https://gitlab.com/warsaw/pynche/-/tree/main>`_。"

#: ../../whatsnew/3.11.rst:2055 ../../whatsnew/3.11.rst:2277
msgid "Porting to Python 3.11"
msgstr "移植到 Python 3.11"

#: ../../whatsnew/3.11.rst:2057
msgid ""
"This section lists previously described changes and other bugfixes in the "
"Python API that may require changes to your Python code."
msgstr "本节列出了先前描述的更改以及 Python API 中可能需要修改你的 Python 代码的其他错误修正。"

#: ../../whatsnew/3.11.rst:2060
msgid ""
"Porting notes for the C API are :ref:`listed separately <whatsnew311-c-api-"
"porting>`."
msgstr "针对 C API 的移植说明将 :ref:`单独列出 <whatsnew311-c-api-porting>`。"

#: ../../whatsnew/3.11.rst:2063
msgid ""
":func:`open`, :func:`io.open`, :func:`codecs.open` and "
":class:`fileinput.FileInput` no longer accept ``'U'`` (\"universal "
"newline\") in the file mode. In Python 3, \"universal newline\" mode is used"
" by default whenever a file is opened in text mode, and the ``'U'`` flag has"
" been deprecated since Python 3.3. The :ref:`newline parameter <open-"
"newline-parameter>` to these functions controls how universal newlines work."
" (Contributed by Victor Stinner in :issue:`37330`.)"
msgstr ""
":func:`open`, :func:`io.open`, :func:`codecs.open` 和 "
":class:`fileinput.FileInput` 的文件模式中不再接受 ``'U'`` (\"通用换行符\")。 在 Python 3 "
"中，\"通用换行符\" 模式会在文件以文本模式打开时默认被使用，而 ``'U'`` 旗标自 Python 3.3 起已被弃用。 这些函数的 "
":ref:`newline 形参 <open-newline-parameter>` 将控制如何使用通用换行符。 （由 Victor Stinner 在"
" :issue:`37330` 中贡献。）"

#: ../../whatsnew/3.11.rst:2072
msgid ""
":class:`ast.AST` node positions are now validated when provided to "
":func:`compile` and other related functions. If invalid positions are "
"detected, a :exc:`ValueError` will be raised. (Contributed by Pablo Galindo "
"in :gh:`93351`)"
msgstr ""
"现在 :class:`ast.AST` 节点位置在提供给 :func:`compile` 和其他相关函数时会进行验证。 如果检测到无效位置， 将会引发 "
":exc:`ValueError`。 （由 Pablo Galindo 在 :gh:`93351` 中提供。）"

#: ../../whatsnew/3.11.rst:2076
msgid ""
"Prohibited passing non-:class:`concurrent.futures.ThreadPoolExecutor` "
"executors to :meth:`asyncio.loop.set_default_executor` following a "
"deprecation in Python 3.8. (Contributed by Illia Volochii in "
":issue:`43234`.)"
msgstr ""
"继在 Python 3.8 中弃用后，已禁止向 :meth:`asyncio.loop.set_default_executor` 传入非 "
":class:`concurrent.futures.ThreadPoolExecutor` 执行器。（由 Illia Volochii 在 "
":issue:`43234` 中贡献。）"

#: ../../whatsnew/3.11.rst:2081
msgid ""
":mod:`calendar`: The :class:`calendar.LocaleTextCalendar` and "
":class:`calendar.LocaleHTMLCalendar` classes now use "
":func:`locale.getlocale`, instead of using :func:`locale.getdefaultlocale`, "
"if no locale is specified. (Contributed by Victor Stinner in "
":issue:`46659`.)"
msgstr ""
":mod:`calendar`: 在未指定语言区域的情况下，:class:`calendar.LocaleTextCalendar` 和 "
":class:`calendar.LocaleHTMLCalendar` 类现在会使用 :func:`locale.getlocale`，而不是使用 "
":func:`locale.getdefaultlocale`。 （由 Victor Stinner 在 :issue:`46659` 中贡献。）"

#: ../../whatsnew/3.11.rst:2087
msgid ""
"The :mod:`pdb` module now reads the :file:`.pdbrc` configuration file with "
"the ``'UTF-8'`` encoding. (Contributed by Srinivas Reddy Thatiparthy "
"(శ్రీనివాస్  రెడ్డి తాటిపర్తి) in :issue:`41137`.)"
msgstr ""
"现在 :mod:`pdb` 模块会使用 ``'UTF-8'`` 编码来读取 :file:`.pdbrc` 配置文件。 （由 Srinivas Reddy"
" Thatiparthy (శ్రీనివాస్ రెడ్డి తాటిపర్తి) 在 :issue:`41137` 中贡献。）"

#: ../../whatsnew/3.11.rst:2091
msgid ""
"The *population* parameter of :func:`random.sample` must be a sequence, and "
"automatic conversion of :class:`set`\\s to :class:`list`\\s is no longer "
"supported. Also, if the sample size is larger than the population size, a "
":exc:`ValueError` is raised. (Contributed by Raymond Hettinger in "
":issue:`40465`.)"
msgstr ""
":func:`random.sample` 的 *population* 形参必须是一个序列，不再支持将 :class:`set` 自动转换为 "
":class:`list`。 此外，如果样本大小大于总体大小，将会引发 :exc:`ValueError` 。 （由 Raymond Hettinger"
" 在 :issue:`40465` 中贡献。）"

#: ../../whatsnew/3.11.rst:2097
msgid ""
"The *random* optional parameter of :func:`random.shuffle` was removed. It "
"was previously an arbitrary random function to use for the shuffle; now, "
":func:`random.random` (its previous default) will always be used."
msgstr ""
"移除了 :func:`random.shuffle` 的 *random* 可选形参。 在之前版本中重排操作是使用任意随机函数；现在，将始终使用 "
":func:`random.random` (之前的默认值)。"

#: ../../whatsnew/3.11.rst:2101
msgid ""
"In :mod:`re` :ref:`re-syntax`, global inline flags (e.g. ``(?i)``) can now "
"only be used at the start of regular expressions. Using them elsewhere has "
"been deprecated since Python 3.6. (Contributed by Serhiy Storchaka in "
":issue:`47066`.)"
msgstr ""
"在 :mod:`re` :ref:`re-syntax` 中，全局内联旗标 (例如 ``(?i)``) 现在只能在正则表达式的开头使用。 自 "
"Python 3.6 起在别处使用这些旗标的做法已被弃用。 （由 Serhiy Storchaka 在 :issue:`47066` 中贡献）。"

#: ../../whatsnew/3.11.rst:2106
msgid ""
"In the :mod:`re` module, several long-standing bugs where fixed that, in "
"rare cases, could cause capture groups to get the wrong result. Therefore, "
"this could change the captured output in these cases. (Contributed by Ma Lin"
" in :issue:`35859`.)"
msgstr ""
"在 :mod:`re` 模块中，修复了几个长期存在的错误，在极少数情况下，这些错误可能会导致捕获分组得到错误的结果。 "
"因此，这可能会改变这些情况下的捕获输出。 （由 Ma Lin 在 :issue:`35859` 中贡献。）"

#: ../../whatsnew/3.11.rst:2115
msgid "Build Changes"
msgstr "构建变化"

#: ../../whatsnew/3.11.rst:2117
msgid ""
"CPython now has :pep:`11` :pep:`Tier 3 support <11#tier-3>` for cross "
"compiling to the `WebAssembly <https://webassembly.org/>`_ platforms "
"`Emscripten <https://emscripten.org/>`_ (``wasm32-unknown-emscripten``, i.e."
" Python in the browser) and `WebAssembly System Interface (WASI) "
"<https://wasi.dev/>`_ (``wasm32-unknown-wasi``). The effort is inspired by "
"previous work like `Pyodide <https://pyodide.org/>`_. These platforms "
"provide a limited subset of POSIX APIs; Python standard libraries features "
"and modules related to networking, processes, threading, signals, mmap, and "
"users/groups are not available or don't work. (Emscripten contributed by "
"Christian Heimes and Ethan Smith in :gh:`84461` and WASI contributed by "
"Christian Heimes in :gh:`90473`; platforms promoted in :gh:`95085`)"
msgstr ""
"CPython 现已具有 :pep:`11` :pep:`Tier 3 support <11#tier-3>` 以便交叉编译至 "
"`WebAssembly <https://webassembly.org/>`_ 平台 `Emscripten "
"<https://emscripten.org/>`_ (``wasm32-unknown-emscripten`` 即浏览器版 Python) 和 "
"`WebAssembly System Interface (WASI) <https://wasi.dev/>`_ "
"(``wasm32-unknown-wasi``)。 此计划的灵感来自前人的工作如 `Pyodide <https://pyodide.org/>`_。"
" 这些平台提供了 POSIX API 的有限子集；与网络、进程、线程、信号、mmap 和用户/组相关的 Python "
"标准库特性和模块将不可用或无法正常工作。 （Emscripten 由 Christian Heimes 和 Ethan Smith 在 "
":gh:`84461` 中贡献，WASI 由 Christian Heimes 在 :gh:`90473` 中贡献；平台的推进在 :gh:`95085`"
" 中追踪。）"

#: ../../whatsnew/3.11.rst:2131
msgid "Building CPython now requires:"
msgstr "构建 CPython 现在需要:"

#: ../../whatsnew/3.11.rst:2133
msgid ""
"A `C11 <https://en.cppreference.com/w/c/11>`_ compiler and standard library."
" `Optional C11 features "
"<https://en.wikipedia.org/wiki/C11_(C_standard_revision)#Optional_features>`_"
" are not required. (Contributed by Victor Stinner in :issue:`46656`, "
":issue:`45440` and :issue:`46640`.)"
msgstr ""
"`C11 <https://en.cppreference.com/w/c/11>`_ 编译器和标准库。 `可选的 C11 特性 "
"<https://en.wikipedia.org/wiki/C11_(C_standard_revision)#Optional_features>`_"
" 不是必须的。 （由 Victor Stinner 在 :issue:`46656`, :issue:`45440` 和 :issue:`46640` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:2140
msgid ""
"Support for `IEEE 754 <https://en.wikipedia.org/wiki/IEEE_754>`_ floating-"
"point numbers. (Contributed by Victor Stinner in :issue:`46917`.)"
msgstr ""
"对 `IEEE 754 <https://en.wikipedia.org/wiki/IEEE_754>`_ 浮点数的支持。 （由 Victor "
"Stinner 在 :issue:`46917` 中贡献。）"

#: ../../whatsnew/3.11.rst:2144
msgid ""
"The :c:macro:`!Py_NO_NAN` macro has been removed. Since CPython now requires"
" IEEE 754 floats, NaN values are always available. (Contributed by Victor "
"Stinner in :issue:`46656`.)"
msgstr ""
":c:macro:`!Py_NO_NAN` 宏已被移除。 由于 CPython 现在要求 IEEE 754 浮点数，NaN 值将始终可用。 （由 "
"Victor Stinner 在 :issue:`46656` 中贡献。）"

#: ../../whatsnew/3.11.rst:2148
msgid ""
"The :mod:`tkinter` package now requires `Tcl/Tk <https://www.tcl.tk>`_ "
"version 8.5.12 or newer. (Contributed by Serhiy Storchaka in "
":issue:`46996`.)"
msgstr ""
":mod:`tkinter` 包现在需要 `Tcl/Tk <https://www.tcl.tk>`_ 8.5.12 或更新的版本。 （由 Serhiy"
" Storchaka 在 :issue:`46996` 中贡献。）"

#: ../../whatsnew/3.11.rst:2152
msgid ""
"Build dependencies, compiler flags, and linker flags for most stdlib "
"extension modules are now detected by :program:`configure`. libffi, libnsl, "
"libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk, and uuid flags are "
"detected by `pkg-config <https://www.freedesktop.org/wiki/Software/pkg-"
"config/>`_ (when available). :mod:`tkinter` now requires a pkg-config "
"command to detect development settings for `Tcl/Tk`_ headers and libraries. "
"(Contributed by Christian Heimes and Erlend Egeberg Aasland in "
":issue:`45847`, :issue:`45747`, and :issue:`45763`.)"
msgstr ""
"大多数标准库扩展模块的构建依赖、编译器旗标和链接器旗标现在将由 :program:`configure` 来检测。 libffi, libnsl, "
"libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk 和 uuid 旗标将由 `pkg-config "
"<https://www.freedesktop.org/wiki/Software/pkg-config/>`_ (如果可用) 来检测。 "
":mod:`tkinter` 现在需要由 pkg-config 命令来检测 `Tcl/Tk`_ 标头和库的开发设置。 （由 Christian "
"Heimes 和 Erlend Egeberg Aasland 在 :issue:`45847`, :issue:`45747` 和 "
":issue:`45763` 中贡献。）"

#: ../../whatsnew/3.11.rst:2162
msgid ""
"libpython is no longer linked against libcrypt. (Contributed by Mike Gilbert"
" in :issue:`45433`.)"
msgstr "libpython 不再与 libcrypt 链接。 （由 Mike Gilbert 在 :issue:`45433` 中贡献。）"

#: ../../whatsnew/3.11.rst:2165
msgid ""
"CPython can now be built with the `ThinLTO "
"<https://clang.llvm.org/docs/ThinLTO.html>`_ option via passing ``thin`` to "
":option:`--with-lto`, i.e. ``--with-lto=thin``. (Contributed by Donghee Na "
"and Brett Holman in :issue:`44340`.)"
msgstr ""
"现在 CPython 可以通过向 :option:`--with-lto` 传入 ``thin``，即 ``--with-lto=thin`` "
"在编译时启用 `ThinLTO <https://clang.llvm.org/docs/ThinLTO.html>`_ 选项。 （由 Donghee "
"Na 和 Brett Holman 在 :issue:`44340` 中贡献。）"

#: ../../whatsnew/3.11.rst:2170
msgid ""
"Freelists for object structs can now be disabled. A new :program:`configure`"
" option ``--without-freelists`` can be used to disable all freelists except "
"empty tuple singleton. (Contributed by Christian Heimes in :issue:`45522`.)"
msgstr ""
"现在可以禁用对象结构体的自由列表。 新增的 :program:`configure` 选项 ``--without-freelists`` "
"可用于禁用除空元组单例之外的所有自由列表。 （由 Christian Heimes 在 :issue:`45522` 中贡献。）"

#: ../../whatsnew/3.11.rst:2175
msgid ""
"``Modules/Setup`` and ``Modules/makesetup`` have been improved and tied up. "
"Extension modules can now be built through ``makesetup``. All except some "
"test modules can be linked statically into a main binary or library. "
"(Contributed by Brett Cannon and Christian Heimes in :issue:`45548`, "
":issue:`45570`, :issue:`45571`, and :issue:`43974`.)"
msgstr ""
"``Modules/Setup`` 和 ``Modules/makesetup`` 已获得改进并进行绑定。 扩展模块现在可以通过 "
"``makesetup`` 来构建。 除部分测试模块外所有模块都可以静态链接到主二进制文件或库中。 （由 Brett Cannon 和 "
"Christian Heimes 在 :issue:`45548`, :issue:`45570`, :issue:`45571` 和 "
":issue:`43974` 中贡献。）"

#: ../../whatsnew/3.11.rst:2182
msgid ""
"Use the environment variables :envvar:`!TCLTK_CFLAGS` and "
":envvar:`!TCLTK_LIBS` to manually specify the location of Tcl/Tk headers and"
" libraries. The :program:`configure` options :option:`!--with-tcltk-"
"includes` and :option:`!--with-tcltk-libs` have been removed."
msgstr ""
"使用环境变量 :envvar:`!TCLTK_CFLAGS` 和 :envvar:`!TCLTK_LIBS` 来手动指定 Tcl/Tk "
"头文件和库的位置。 :program:`configure` 选项 :option:`!--with-tcltk-includes` 和 "
":option:`!--with-tcltk-libs` 已被移除。"

#: ../../whatsnew/3.11.rst:2188
msgid ""
"On RHEL 7 and CentOS 7 the development packages do not provide ``tcl.pc`` "
"and ``tk.pc``; use ``TCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\"``. The "
"directory ``Misc/rhel7`` contains ``.pc`` files and instructions on how to "
"build Python with RHEL 7's and CentOS 7's Tcl/Tk and OpenSSL."
msgstr ""
"在 RHEL 7 和 CentOS 7 上开发包将不提供 ``tcl.pc`` 和 ``tk.pc``；请使用 "
"``TCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\"``。 ``Misc/rhel7`` 目录包含 ``.pc``"
" 文件以及如何使用 RHEL 7 和 CentOS 7 的 Tcl/Tk 和 OpenSSL 构建 Python 的说明。"

#: ../../whatsnew/3.11.rst:2193
msgid ""
"CPython will now use 30-bit digits by default for the Python :class:`int` "
"implementation. Previously, the default was to use 30-bit digits on "
"platforms with ``SIZEOF_VOID_P >= 8``, and 15-bit digits otherwise. It's "
"still possible to explicitly request use of 15-bit digits via either the "
":option:`--enable-big-digits` option to the configure script or (for "
"Windows) the ``PYLONG_BITS_IN_DIGIT`` variable in ``PC/pyconfig.h``, but "
"this option may be removed at some point in the future. (Contributed by Mark"
" Dickinson in :issue:`45569`.)"
msgstr ""
"CPython 现在将默认使用 30 比特位的数字来实现 Python :class:`int`。 之前版本中，在 ``SIZEOF_VOID_P >="
" 8`` 的平台上默认使用 30 比特位数字，否则使用 15 位数字。 仍然有可能通过配置脚本的 :option:`--enable-big-"
"digits` 选项或 ``PC/pyconfig.h`` 中的 ``PYLONG_BITS_IN_DIGIT`` 变量（适用于 "
"Windows）显式地要求使用 15 比特位数字，但该选项可能会在未来某个时候被移除。 （由 Mark Dickinson 在 "
":issue:`45569` 中贡献。）"

#: ../../whatsnew/3.11.rst:2206
msgid "C API Changes"
msgstr "C API 的变化"

#: ../../whatsnew/3.11.rst:2213
msgid ""
"Add a new :c:func:`PyType_GetName` function to get type's short name. "
"(Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""
"新增了 :c:func:`PyType_GetName` 函数用来获取类型的简短名称。 （由 Hai Shi 在 :issue:`42035` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:2216
msgid ""
"Add a new :c:func:`PyType_GetQualName` function to get type's qualified "
"name. (Contributed by Hai Shi in :issue:`42035`.)"
msgstr ""
"新增了 :c:func:`PyType_GetQualName` 函数用来获取类型的限定名称。 （由 Hai Shi 在 :issue:`42035` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:2219
msgid ""
"Add new :c:func:`PyThreadState_EnterTracing` and "
":c:func:`PyThreadState_LeaveTracing` functions to the limited C API to "
"suspend and resume tracing and profiling. (Contributed by Victor Stinner in "
":issue:`43760`.)"
msgstr ""
"在受限的 C API 中新增了 :c:func:`PyThreadState_EnterTracing` 和 "
":c:func:`PyThreadState_LeaveTracing` 函数用来挂起和恢复追踪和性能分析。 （由 Victor Stinner 在 "
":issue:`43760` 中贡献。）"

#: ../../whatsnew/3.11.rst:2224
msgid ""
"Added the :c:data:`Py_Version` constant which bears the same value as "
":c:macro:`PY_VERSION_HEX`. (Contributed by  Gabriele N. Tornetta in "
":issue:`43931`.)"
msgstr ""
"增加了 :c:data:`Py_Version` 常量，其中的值与 :c:macro:`PY_VERSION_HEX` 相同。 （由 Gabriele "
"N. Tornetta 在 :issue:`43931` 中贡献。）"

#: ../../whatsnew/3.11.rst:2228
msgid ""
":c:type:`Py_buffer` and APIs are now part of the limited API and the stable "
"ABI:"
msgstr ":c:type:`Py_buffer` 及其 API 现在是受限 API 和稳定 ABI 的组成部分:"

#: ../../whatsnew/3.11.rst:2231
msgid ":c:func:`PyObject_CheckBuffer`"
msgstr ":c:func:`PyObject_CheckBuffer`"

#: ../../whatsnew/3.11.rst:2232
msgid ":c:func:`PyObject_GetBuffer`"
msgstr ":c:func:`PyObject_GetBuffer`"

#: ../../whatsnew/3.11.rst:2233
msgid ":c:func:`PyBuffer_GetPointer`"
msgstr ":c:func:`PyBuffer_GetPointer`"

#: ../../whatsnew/3.11.rst:2234
msgid ":c:func:`PyBuffer_SizeFromFormat`"
msgstr ":c:func:`PyBuffer_SizeFromFormat`"

#: ../../whatsnew/3.11.rst:2235
msgid ":c:func:`PyBuffer_ToContiguous`"
msgstr ":c:func:`PyBuffer_ToContiguous`"

#: ../../whatsnew/3.11.rst:2236
msgid ":c:func:`PyBuffer_FromContiguous`"
msgstr ":c:func:`PyBuffer_FromContiguous`"

#: ../../whatsnew/3.11.rst:2237
msgid ":c:func:`PyObject_CopyData`"
msgstr ":c:func:`PyObject_CopyData`"

#: ../../whatsnew/3.11.rst:2238
msgid ":c:func:`PyBuffer_IsContiguous`"
msgstr ":c:func:`PyBuffer_IsContiguous`"

#: ../../whatsnew/3.11.rst:2239
msgid ":c:func:`PyBuffer_FillContiguousStrides`"
msgstr ":c:func:`PyBuffer_FillContiguousStrides`"

#: ../../whatsnew/3.11.rst:2240
msgid ":c:func:`PyBuffer_FillInfo`"
msgstr ":c:func:`PyBuffer_FillInfo`"

#: ../../whatsnew/3.11.rst:2241
msgid ":c:func:`PyBuffer_Release`"
msgstr ":c:func:`PyBuffer_Release`"

#: ../../whatsnew/3.11.rst:2242
msgid ":c:func:`PyMemoryView_FromBuffer`"
msgstr ":c:func:`PyMemoryView_FromBuffer`"

#: ../../whatsnew/3.11.rst:2243
msgid ""
":c:member:`~PyBufferProcs.bf_getbuffer` and "
":c:member:`~PyBufferProcs.bf_releasebuffer` type slots"
msgstr ""
":c:member:`~PyBufferProcs.bf_getbuffer` 和 "
":c:member:`~PyBufferProcs.bf_releasebuffer` 类型槽位"

#: ../../whatsnew/3.11.rst:2246
msgid "(Contributed by Christian Heimes in :issue:`45459`.)"
msgstr "（由 Christian Heimes 在 :issue:`45459` 中贡献。）"

#: ../../whatsnew/3.11.rst:2248
msgid ""
"Added the :c:func:`PyType_GetModuleByDef` function, used to get the module "
"in which a method was defined, in cases where this information is not "
"available directly (via :c:type:`PyCMethod`). (Contributed by Petr Viktorin "
"in :issue:`46613`.)"
msgstr ""
"增加了 :c:func:`PyType_GetModuleByDef` 函数，用于在无法直接获取信息的情况下 (通过 "
":c:type:`PyCMethod`) 获取方法定义所在的模块。 （由 Petr Viktorin 在 :issue:`46613` 中贡献。）"

#: ../../whatsnew/3.11.rst:2253
msgid ""
"Add new functions to pack and unpack C double (serialize and deserialize): "
":c:func:`PyFloat_Pack2`, :c:func:`PyFloat_Pack4`, :c:func:`PyFloat_Pack8`, "
":c:func:`PyFloat_Unpack2`, :c:func:`PyFloat_Unpack4` and "
":c:func:`PyFloat_Unpack8`. (Contributed by Victor Stinner in "
":issue:`46906`.)"
msgstr ""
"添加了用于打包和解包 C double (序列化和反序列化) 的新函数: :c:func:`PyFloat_Pack2`, "
":c:func:`PyFloat_Pack4`, :c:func:`PyFloat_Pack8`, :c:func:`PyFloat_Unpack2`,"
" :c:func:`PyFloat_Unpack4` 和 :c:func:`PyFloat_Unpack8`。 （由 Victor Stinner 在 "
":issue:`46906` 中贡献。）"

#: ../../whatsnew/3.11.rst:2259
msgid ""
"Add new functions to get frame object attributes: "
":c:func:`PyFrame_GetBuiltins`, :c:func:`PyFrame_GetGenerator`, "
":c:func:`PyFrame_GetGlobals`, :c:func:`PyFrame_GetLasti`."
msgstr ""
"添加了用于获取帧对象属性的新函数: :c:func:`PyFrame_GetBuiltins`, "
":c:func:`PyFrame_GetGenerator`, :c:func:`PyFrame_GetGlobals`, "
":c:func:`PyFrame_GetLasti`。"

#: ../../whatsnew/3.11.rst:2263
msgid ""
"Added two new functions to get and set the active exception instance: "
":c:func:`PyErr_GetHandledException` and :c:func:`PyErr_SetHandledException`."
" These are alternatives to :c:func:`PyErr_SetExcInfo()` and "
":c:func:`PyErr_GetExcInfo()` which work with the legacy 3-tuple "
"representation of exceptions. (Contributed by Irit Katriel in "
":issue:`46343`.)"
msgstr ""
"新增了两个用于获取和设置活动异常实例的函数: :c:func:`PyErr_GetHandledException` 和 "
":c:func:`PyErr_SetHandledException`。 这两个函数是 :c:func:`PyErr_SetExcInfo()` 和 "
":c:func:`PyErr_GetExcInfo()` 的替代品，后者使用传统的 3 元组表示异常。 （由 Irit Katriel 在 "
":issue:`46343` 中贡献。）"

#: ../../whatsnew/3.11.rst:2270
msgid ""
"Added the :c:member:`PyConfig.safe_path` member. (Contributed by Victor "
"Stinner in :gh:`57684`.)"
msgstr ""
"添加了 :c:member:`PyConfig.safe_path` 成员。 （由 Victor Stinner 在 :gh:`57684` "
"中贡献。）.)"

#: ../../whatsnew/3.11.rst:2281
msgid ""
"Some macros have been converted to static inline functions to avoid `macro "
"pitfalls <https://gcc.gnu.org/onlinedocs/cpp/Macro-Pitfalls.html>`_. The "
"change should be mostly transparent to users, as the replacement functions "
"will cast their arguments to the expected types to avoid compiler warnings "
"due to static type checks. However, when the limited C API is set to >=3.11,"
" these casts are not done, and callers will need to cast arguments to their "
"expected types. See :pep:`670` for more details. (Contributed by Victor "
"Stinner and Erlend E. Aasland in :gh:`89653`.)"
msgstr ""
"部分宏已被转换为静态内联函数以避免 `宏陷阱 <https://gcc.gnu.org/onlinedocs/cpp/Macro-"
"Pitfalls.html>`_。 这项改变对用户来说应该是基本无感的，因为替代函数会将其参数强制转换为预期的类型以避免静态类型检查导致的编译器警告。 "
"但是，当受限 C API 被设为 >=3.11 时，将不会执行这些强制转换，调用方将需要自行将参数强制转换为其预期的类型。 请参阅 :pep:`670`"
" 了解详情。 （由 Victor Stinner 和 Erlend E. Aasland 在 :gh:`89653` 中贡献。）"

#: ../../whatsnew/3.11.rst:2292
msgid ""
":c:func:`PyErr_SetExcInfo()` no longer uses the ``type`` and ``traceback`` "
"arguments, the interpreter now derives those values from the exception "
"instance (the ``value`` argument). The function still steals references of "
"all three arguments. (Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
":c:func:`PyErr_SetExcInfo()` 不再使用 ``type`` 和 ``traceback`` 参数，解释器现在将从异常实例（ 即"
" ``value`` 参数）中获取这些值。 该函数仍会偷取对所有三个参数的引用。 （由 Irit Katriel 在 :issue:`45711` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:2298
msgid ""
":c:func:`PyErr_GetExcInfo()` now derives the ``type`` and ``traceback`` "
"fields of the result from the exception instance (the ``value`` field). "
"(Contributed by Irit Katriel in :issue:`45711`.)"
msgstr ""
":c:func:`PyErr_GetExcInfo()` 现在将从异常实例（即 ``value`` 字段）获取结果的 ``type`` 和 "
"``traceback`` 字段。 （由 Irit Katriel 在 :issue:`45711` 中贡献。）"

#: ../../whatsnew/3.11.rst:2302
msgid ""
":c:struct:`_frozen` has a new ``is_package`` field to indicate whether or "
"not the frozen module is a package.  Previously, a negative value in the "
"``size`` field was the indicator.  Now only non-negative values be used for "
"``size``. (Contributed by Kumar Aditya in :issue:`46608`.)"
msgstr ""
":c:struct:`_frozen` 新增了 ``is_package`` 字段用来指明冻结模块是否为包。 之前，是将 ``size`` "
"字段设置负值作为指示符。  现在 ``size`` 将只使用非负值。 （由 Kumar Aditya 在 :issue:`46608` 中贡献。）"

#: ../../whatsnew/3.11.rst:2308
msgid ""
":c:func:`_PyFrameEvalFunction` now takes ``_PyInterpreterFrame*`` as its "
"second parameter, instead of ``PyFrameObject*``. See :pep:`523` for more "
"details of how to use this function pointer type."
msgstr ""
"现在 :c:func:`_PyFrameEvalFunction` 接受 ``_PyInterpreterFrame*`` 作为其第二个形参，而不是 "
"``PyFrameObject*``。 请参阅 :pep:`523` 了解如何使用此函数指针类型的更多细节。"

#: ../../whatsnew/3.11.rst:2312
msgid ""
":c:func:`!PyCode_New` and :c:func:`!PyCode_NewWithPosOnlyArgs` now take an "
"additional ``exception_table`` argument. Using these functions should be "
"avoided, if at all possible. To get a custom code object: create a code "
"object using the compiler, then get a modified version with the ``replace`` "
"method."
msgstr ""
"现在 :c:func:`!PyCode_New` 和 :c:func:`!PyCode_NewWithPosOnlyArgs` 接受一个额外的 "
"``exception_table`` 参数。 如有可能，应当避免使用这些函数。 获取自定义的代码对象：使用编译器创建一个代码对象，然后使用 "
"``replace`` 方法得到修改后的版本。"

#: ../../whatsnew/3.11.rst:2318
msgid ""
":c:type:`PyCodeObject` no longer has the ``co_code``, ``co_varnames``, "
"``co_cellvars`` and ``co_freevars`` fields.  Instead, use "
":c:func:`PyCode_GetCode`, :c:func:`PyCode_GetVarnames`, "
":c:func:`PyCode_GetCellvars` and :c:func:`PyCode_GetFreevars` respectively "
"to access them via the C API. (Contributed by Brandt Bucher in "
":issue:`46841` and Ken Jin in :gh:`92154` and :gh:`94936`.)"
msgstr ""
":c:type:`PyCodeObject` 不再具有 ``co_code``, ``co_varnames``, ``co_cellvars`` 和 "
"``co_freevars`` 字段。 请分别改用 :c:func:`PyCode_GetCode`, "
":c:func:`PyCode_GetVarnames`, :c:func:`PyCode_GetCellvars` 和 "
":c:func:`PyCode_GetFreevars` 通过 C API 来访问它们。 （由 Brandt Bucher 在 "
":issue:`46841` 以及 Ken Jin 在 :gh:`92154` 和 :gh:`94936` 中贡献。）"

#: ../../whatsnew/3.11.rst:2326
msgid ""
"The old trashcan macros "
"(``Py_TRASHCAN_SAFE_BEGIN``/``Py_TRASHCAN_SAFE_END``) are now deprecated. "
"They should be replaced by the new macros ``Py_TRASHCAN_BEGIN`` and "
"``Py_TRASHCAN_END``."
msgstr ""
"旧的垃圾桶宏 (``Py_TRASHCAN_SAFE_BEGIN``/``Py_TRASHCAN_SAFE_END``) 现在已被弃用。 "
"它们应该由新的宏 ``Py_TRASHCAN_BEGIN`` 和 ``Py_TRASHCAN_END`` 代替。"

#: ../../whatsnew/3.11.rst:2330
msgid "A tp_dealloc function that has the old macros, such as::"
msgstr "带有旧版宏的 tp_dealloc 函数，例如::"

#: ../../whatsnew/3.11.rst:2332
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"
msgstr ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"

#: ../../whatsnew/3.11.rst:2341
msgid "should migrate to the new macros as follows::"
msgstr "应当按照以下方式迁移到新版宏::"

#: ../../whatsnew/3.11.rst:2343
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"
msgstr ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"

#: ../../whatsnew/3.11.rst:2352
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in."
msgstr "请注意 ``Py_TRASHCAN_BEGIN`` 的第二个参数应该是它所属的取消分配函数。"

#: ../../whatsnew/3.11.rst:2355
msgid ""
"To support older Python versions in the same codebase, you can define the "
"following macros and use them throughout the code (credit: these were copied"
" from the ``mypy`` codebase)::"
msgstr ""
"要在同一代码库中支持旧版本的 Python，可以定义以下的宏并在整个代码中使用它们 (版权声明：这些宏是从 ``mypy`` 代码库中拷贝的)::"

#: ../../whatsnew/3.11.rst:2359
msgid ""
"#if PY_VERSION_HEX >= 0x03080000\n"
"#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc)\n"
"#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_END\n"
"#else\n"
"#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op)\n"
"#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX >= 0x03080000\n"
"#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc)\n"
"#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_END\n"
"#else\n"
"#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op)\n"
"#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op)\n"
"#endif"

#: ../../whatsnew/3.11.rst:2367
msgid ""
"The :c:func:`PyType_Ready` function now raises an error if a type is defined"
" with the :c:macro:`Py_TPFLAGS_HAVE_GC` flag set but has no traverse "
"function (:c:member:`PyTypeObject.tp_traverse`). (Contributed by Victor "
"Stinner in :issue:`44263`.)"
msgstr ""
"现在如果一个类型定义了 :c:macro:`Py_TPFLAGS_HAVE_GC` 旗标但没有遍历函数 "
"(:c:member:`PyTypeObject.tp_traverse`) 则 :c:func:`PyType_Ready` 函数将引发一个错误。 "
"（由 Victor Stinner 在 :issue:`44263` 中贡献。）"

#: ../../whatsnew/3.11.rst:2372
msgid ""
"Heap types with the :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` flag can now inherit"
" the :pep:`590` vectorcall protocol.  Previously, this was only possible for"
" :ref:`static types <static-types>`. (Contributed by Erlend E. Aasland in "
":issue:`43908`)"
msgstr ""
"带有 :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` 旗标的堆类型现在可以继承 :pep:`590` vectorcall "
"协议。 在之前版本中，这只适用于 :ref:`静态类型 <static-types>`。（由 Erlend E. Aasland 在 "
":issue:`43908` 中贡献。）"

#: ../../whatsnew/3.11.rst:2377
msgid ""
"Since :c:func:`Py_TYPE()` is changed to a inline static function, "
"``Py_TYPE(obj) = new_type`` must be replaced with ``Py_SET_TYPE(obj, "
"new_type)``: see the :c:func:`Py_SET_TYPE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""
"由于 :c:func:`Py_TYPE()` 已改为内联静态函数，因此 ``Py_TYPE(obj) = new_type`` 必须换成 "
"``Py_SET_TYPE(obj, new_type)``: 参见 :c:func:`Py_SET_TYPE()` 函数（自 Python 3.9 "
"起可用）。 为保持向下兼容，可以使用这个宏::"

#: ../../whatsnew/3.11.rst:2383
msgid ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE)\n"
"static inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type)\n"
"{ ob->ob_type = type; }\n"
"#define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE)\n"
"static inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type)\n"
"{ ob->ob_type = type; }\n"
"#define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type)\n"
"#endif"

#: ../../whatsnew/3.11.rst:2389 ../../whatsnew/3.11.rst:2403
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr "（由 Victor Stinner 在 :issue:`39573` 中贡献。）"

#: ../../whatsnew/3.11.rst:2391
msgid ""
"Since :c:func:`Py_SIZE()` is changed to a inline static function, "
"``Py_SIZE(obj) = new_size`` must be replaced with ``Py_SET_SIZE(obj, "
"new_size)``: see the :c:func:`Py_SET_SIZE()` function (available since "
"Python 3.9). For backward compatibility, this macro can be used::"
msgstr ""
"由于 :c:func:`Py_SIZE()` 已改为内联静态函数，因此 ``Py_SIZE(obj) = new_size`` 必须换成 "
"``Py_SET_SIZE(obj, new_size)``: 参见 :c:func:`Py_SET_SIZE()` 函数（自 Python 3.9 "
"起可用）。 为保持向下兼容，可以使用这个宏::"

#: ../../whatsnew/3.11.rst:2397
msgid ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_SIZE)\n"
"static inline void _Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size)\n"
"{ ob->ob_size = size; }\n"
"#define Py_SET_SIZE(ob, size) _Py_SET_SIZE((PyVarObject*)(ob), size)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_SIZE)\n"
"static inline void _Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size)\n"
"{ ob->ob_size = size; }\n"
"#define Py_SET_SIZE(ob, size) _Py_SET_SIZE((PyVarObject*)(ob), size)\n"
"#endif"

#: ../../whatsnew/3.11.rst:2405
msgid ""
"``<Python.h>`` no longer includes the header files ``<stdlib.h>``, "
"``<stdio.h>``, ``<errno.h>`` and ``<string.h>`` when the ``Py_LIMITED_API`` "
"macro is set to ``0x030b0000`` (Python 3.11) or higher. C extensions should "
"explicitly include the header files after ``#include <Python.h>``. "
"(Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""
"在 ``Py_LIMITED_API`` 宏被设为 ``0x030b0000`` (Python 3.11) 或更高版本时，``<Python.h>``"
" 将不再包含头文件 ``<stdlib.h>``, ``<stdio.h>``, ``<errno.h>`` 和 ``<string.h>``。 C "
"扩展应在 ``#include <Python.h>`` 之后显式地包括头文件。 （由 Victor Stinner 在 :issue:`45434` "
"中贡献。）"

#: ../../whatsnew/3.11.rst:2411
msgid ""
"The non-limited API files ``cellobject.h``, ``classobject.h``, ``code.h``, "
"``context.h``, ``funcobject.h``, ``genobject.h`` and ``longintrepr.h`` have "
"been moved to the ``Include/cpython`` directory. Moreover, the ``eval.h`` "
"header file was removed. These files must not be included directly, as they "
"are already included in ``Python.h``: :ref:`Include Files <api-includes>`. "
"If they have been included directly, consider including ``Python.h`` "
"instead. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""
"非受限 API 文件 ``cellobject.h``, ``classobject.h``, ``code.h``, ``context.h``, "
"``funcobject.h``, ``genobject.h`` 和 ``longintrepr.h`` 已被移至 "
"``Include/cpython`` 目录。 此外，还移除了 ``eval.h`` 头文件。 这些文件不能被直接包括，因为它们已经被包括在 "
"``Python.h`` 中了：参见 :ref:`包括文件 <api-includes>`。如果它们已被直接包括，请考虑改为包括 "
"``Python.h``。 （由 Victor Stinner 在 :issue:`35134` 中贡献。）"

#: ../../whatsnew/3.11.rst:2419
msgid ""
"The :c:func:`!PyUnicode_CHECK_INTERNED` macro has been excluded from the "
"limited C API. It was never usable there, because it used internal "
"structures which are not available in the limited C API. (Contributed by "
"Victor Stinner in :issue:`46007`.)"
msgstr ""
":c:func:`!PyUnicode_CHECK_INTERNED` 宏已被排除在受限 C API 之外。 它从未在那里被使用，因为它使用了受限 C "
"API 中不可用的内部结构体。 （由 Victor Stinner 在 :issue:`46007` 中贡献。）"

#: ../../whatsnew/3.11.rst:2424
msgid ""
"The following frame functions and type are now directly available with "
"``#include <Python.h>``, it's no longer needed to add ``#include "
"<frameobject.h>``:"
msgstr ""
"以下帧函数和类型现在可通过 ``#include <Python.h>`` 直接使用，不再需要添加 ``#include "
"<frameobject.h>``:"

#: ../../whatsnew/3.11.rst:2428
msgid ":c:func:`PyFrame_Check`"
msgstr ":c:func:`PyFrame_Check`"

#: ../../whatsnew/3.11.rst:2429
msgid ":c:func:`PyFrame_GetBack`"
msgstr ":c:func:`PyFrame_GetBack`"

#: ../../whatsnew/3.11.rst:2430
msgid ":c:func:`PyFrame_GetBuiltins`"
msgstr ":c:func:`PyFrame_GetBuiltins`"

#: ../../whatsnew/3.11.rst:2431
msgid ":c:func:`PyFrame_GetGenerator`"
msgstr ":c:func:`PyFrame_GetGenerator`"

#: ../../whatsnew/3.11.rst:2432
msgid ":c:func:`PyFrame_GetGlobals`"
msgstr ":c:func:`PyFrame_GetGlobals`"

#: ../../whatsnew/3.11.rst:2433
msgid ":c:func:`PyFrame_GetLasti`"
msgstr ":c:func:`PyFrame_GetLasti`"

#: ../../whatsnew/3.11.rst:2434
msgid ":c:func:`PyFrame_GetLocals`"
msgstr ":c:func:`PyFrame_GetLocals`"

#: ../../whatsnew/3.11.rst:2435
msgid ":c:type:`PyFrame_Type`"
msgstr ":c:type:`PyFrame_Type`"

#: ../../whatsnew/3.11.rst:2437
msgid "(Contributed by Victor Stinner in :gh:`93937`.)"
msgstr "（由 Victor Stinner 在 :gh:`93937` 中贡献。）"

#: ../../whatsnew/3.11.rst:2441
msgid ""
"The :c:type:`PyFrameObject` structure members have been removed from the "
"public C API."
msgstr ":c:type:`PyFrameObject` 结构体成员已从公有 C API 中被移除。"

#: ../../whatsnew/3.11.rst:2444
msgid ""
"While the documentation notes that the :c:type:`PyFrameObject` fields are "
"subject to change at any time, they have been stable for a long time and "
"were used in several popular extensions."
msgstr "虽然文档指出 :c:type:`PyFrameObject` 字段可能随时更改，但这些字段长期以来一直保持稳定，并在多个流行的扩展中使用。"

#: ../../whatsnew/3.11.rst:2448
msgid ""
"In Python 3.11, the frame struct was reorganized to allow performance "
"optimizations. Some fields were removed entirely, as they were details of "
"the old implementation."
msgstr "在 Python 3.11 中，为了优化性能，对帧结构进行了重组。 一些字段被完全删除，因为它们属于旧实现的细节。"

#: ../../whatsnew/3.11.rst:2452
msgid ":c:type:`PyFrameObject` fields:"
msgstr ":c:type:`PyFrameObject` 字段:"

#: ../../whatsnew/3.11.rst:2454
msgid "``f_back``: use :c:func:`PyFrame_GetBack`."
msgstr "``f_back``: 使用 :c:func:`PyFrame_GetBack`。"

#: ../../whatsnew/3.11.rst:2455
msgid "``f_blockstack``: removed."
msgstr "``f_blockstack``: 已移除。"

#: ../../whatsnew/3.11.rst:2456
msgid "``f_builtins``: use :c:func:`PyFrame_GetBuiltins`."
msgstr "``f_builtins``: 使用 :c:func:`PyFrame_GetBuiltins`。"

#: ../../whatsnew/3.11.rst:2457
msgid "``f_code``: use :c:func:`PyFrame_GetCode`."
msgstr "``f_code``: 使用 :c:func:`PyFrame_GetCode`。"

#: ../../whatsnew/3.11.rst:2458
msgid "``f_gen``: use :c:func:`PyFrame_GetGenerator`."
msgstr "``f_gen``: 使用 :c:func:`PyFrame_GetGenerator`。"

#: ../../whatsnew/3.11.rst:2459
msgid "``f_globals``: use :c:func:`PyFrame_GetGlobals`."
msgstr "``f_globals``: 使用 :c:func:`PyFrame_GetGlobals`。"

#: ../../whatsnew/3.11.rst:2460
msgid "``f_iblock``: removed."
msgstr "``f_iblock``: 已移除。"

#: ../../whatsnew/3.11.rst:2461
msgid ""
"``f_lasti``: use :c:func:`PyFrame_GetLasti`. Code using ``f_lasti`` with "
"``PyCode_Addr2Line()`` should use :c:func:`PyFrame_GetLineNumber` instead; "
"it may be faster."
msgstr ""
"``f_lasti``: 使用 :c:func:`PyFrame_GetLasti`。 使用 ``f_lasti`` 并带有 "
"``PyCode_Addr2Line()`` 的代码应当改用 :c:func:`PyFrame_GetLineNumber`；它可能会更快。"

#: ../../whatsnew/3.11.rst:2464
msgid "``f_lineno``: use :c:func:`PyFrame_GetLineNumber`"
msgstr "``f_lineno``: 使用 :c:func:`PyFrame_GetLineNumber`"

#: ../../whatsnew/3.11.rst:2465
msgid "``f_locals``: use :c:func:`PyFrame_GetLocals`."
msgstr "``f_locals``: 使用 :c:func:`PyFrame_GetLocals`。"

#: ../../whatsnew/3.11.rst:2466
msgid "``f_stackdepth``: removed."
msgstr "``f_stackdepth``: 已移除。"

#: ../../whatsnew/3.11.rst:2467
msgid "``f_state``: no public API (renamed to ``f_frame.f_state``)."
msgstr "``f_state``: 无公共 API (重命名为 ``f_frame.f_state``)。"

#: ../../whatsnew/3.11.rst:2468
msgid "``f_trace``: no public API."
msgstr "``f_trace``: 无公共 API。"

#: ../../whatsnew/3.11.rst:2469
msgid ""
"``f_trace_lines``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``."
msgstr ""
"``f_trace_lines``: 使用 ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_lines\")``。"

#: ../../whatsnew/3.11.rst:2470
msgid ""
"``f_trace_opcodes``: use ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_opcodes\")``."
msgstr ""
"``f_trace_opcodes``: 使用 ``PyObject_GetAttrString((PyObject*)frame, "
"\"f_trace_opcodes\")``。"

#: ../../whatsnew/3.11.rst:2471
msgid "``f_localsplus``: no public API (renamed to ``f_frame.localsplus``)."
msgstr "``f_localsplus``: 无公共 API (重命名为 ``f_frame.localsplus``)。"

#: ../../whatsnew/3.11.rst:2472
msgid "``f_valuestack``: removed."
msgstr "``f_valuestack``: 已移除。"

#: ../../whatsnew/3.11.rst:2474
msgid ""
"The Python frame object is now created lazily. A side effect is that the "
":attr:`~frame.f_back` member must not be accessed directly, since its value "
"is now also computed lazily. The :c:func:`PyFrame_GetBack` function must be "
"called instead."
msgstr ""
"现在 Python 帧对象是惰性地创建的。 一个附带影响是 :attr:`~frame.f_back` "
"成员不可被直接访问，因为现在它的值也是惰性地计算的。 必须改为调用 :c:func:`PyFrame_GetBack` 函数。"

#: ../../whatsnew/3.11.rst:2480
msgid ""
"Debuggers that accessed the :attr:`~frame.f_locals` directly *must* call "
":c:func:`PyFrame_GetLocals` instead. They no longer need to call "
":c:func:`!PyFrame_FastToLocalsWithError` or :c:func:`!PyFrame_LocalsToFast`,"
" in fact they should not call those functions. The necessary updating of the"
" frame is now managed by the virtual machine."
msgstr ""
"直接访问 :attr:`~frame.f_locals` 的调试器 *必须* 改为调用 :c:func:`PyFrame_GetLocals`。 "
"它们不再需要调用 :c:func:`!PyFrame_FastToLocalsWithError` 或 "
":c:func:`!PyFrame_LocalsToFast`，实际上它们不应调用这些函数。 现在帧所需要的更新将由虚拟机来管理。"

#: ../../whatsnew/3.11.rst:2486
msgid "Code defining ``PyFrame_GetCode()`` on Python 3.8 and older::"
msgstr "在 Python 3.8 及更旧版本上定义 ``PyFrame_GetCode()`` 的代码::"

#: ../../whatsnew/3.11.rst:2488
msgid ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyCodeObject* PyFrame_GetCode(PyFrameObject *frame)\n"
"{\n"
"    Py_INCREF(frame->f_code);\n"
"    return frame->f_code;\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyCodeObject* PyFrame_GetCode(PyFrameObject *frame)\n"
"{\n"
"    Py_INCREF(frame->f_code);\n"
"    return frame->f_code;\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2496
msgid "Code defining ``PyFrame_GetBack()`` on Python 3.8 and older::"
msgstr "在 Python 3.8 及更旧版本上定义 ``PyFrame_GetBack()`` 的代码::"

#: ../../whatsnew/3.11.rst:2498
msgid ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyFrame_GetBack(PyFrameObject *frame)\n"
"{\n"
"    Py_XINCREF(frame->f_back);\n"
"    return frame->f_back;\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyFrame_GetBack(PyFrameObject *frame)\n"
"{\n"
"    Py_XINCREF(frame->f_back);\n"
"    return frame->f_back;\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2506
msgid ""
"Or use the `pythoncapi_compat project <https://github.com/python/pythoncapi-"
"compat>`__ to get these two functions on older Python versions."
msgstr ""
"或者使用 `pythoncapi_compat 项目 <https://github.com/python/pythoncapi-compat>`__ "
"在更旧版本的 Python 上获取这些函数。"

#: ../../whatsnew/3.11.rst:2510
msgid "Changes of the :c:type:`PyThreadState` structure members:"
msgstr ":c:type:`PyThreadState` 结构体成员的变化:"

#: ../../whatsnew/3.11.rst:2512
msgid ""
"``frame``: removed, use :c:func:`PyThreadState_GetFrame` (function added to "
"Python 3.9 by :issue:`40429`). Warning: the function returns a :term:`strong"
" reference`, need to call :c:func:`Py_XDECREF`."
msgstr ""
"``frame``: 已被移除，请使用 :c:func:`PyThreadState_GetFrame` (由 :issue:`40429` 添加到 "
"Python 3.9 的函数)。 警告：该函数返回一个 :term:`strong reference`，需要调用 "
":c:func:`Py_XDECREF`。"

#: ../../whatsnew/3.11.rst:2516
msgid ""
"``tracing``: changed, use :c:func:`PyThreadState_EnterTracing` and "
":c:func:`PyThreadState_LeaveTracing` (functions added to Python 3.11 by "
":issue:`43760`)."
msgstr ""
"``tracing``: 已被更改，请使用 :c:func:`PyThreadState_EnterTracing` 和 "
":c:func:`PyThreadState_LeaveTracing` (由:issue:`43760` 添加到 Python 3.11 的函数)。"

#: ../../whatsnew/3.11.rst:2519
msgid ""
"``recursion_depth``: removed, use ``(tstate->recursion_limit - "
"tstate->recursion_remaining)`` instead."
msgstr ""
"``recursion_depth``: 已被移除，请使用 ``(tstate->recursion_limit - "
"tstate->recursion_remaining)`` 代替。"

#: ../../whatsnew/3.11.rst:2521
msgid "``stackcheck_counter``: removed."
msgstr "``stackcheck_counter``：已移除。"

#: ../../whatsnew/3.11.rst:2523
msgid "Code defining ``PyThreadState_GetFrame()`` on Python 3.8 and older::"
msgstr "在 Python 3.8 或更旧版本中定义 ``PyThreadState_GetFrame()`` 的代码::"

#: ../../whatsnew/3.11.rst:2525
msgid ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyThreadState_GetFrame(PyThreadState *tstate)\n"
"{\n"
"    Py_XINCREF(tstate->frame);\n"
"    return tstate->frame;\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900B1\n"
"static inline PyFrameObject* PyThreadState_GetFrame(PyThreadState *tstate)\n"
"{\n"
"    Py_XINCREF(tstate->frame);\n"
"    return tstate->frame;\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2533
msgid ""
"Code defining ``PyThreadState_EnterTracing()`` and "
"``PyThreadState_LeaveTracing()`` on Python 3.10 and older::"
msgstr ""
"在 Python 3.10 或更旧版本中定义 ``PyThreadState_EnterTracing()`` 和 "
"``PyThreadState_LeaveTracing()`` 的代码::"

#: ../../whatsnew/3.11.rst:2536
msgid ""
"#if PY_VERSION_HEX < 0x030B00A2\n"
"static inline void PyThreadState_EnterTracing(PyThreadState *tstate)\n"
"{\n"
"    tstate->tracing++;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = 0;\n"
"#else\n"
"    tstate->use_tracing = 0;\n"
"#endif\n"
"}\n"
"\n"
"static inline void PyThreadState_LeaveTracing(PyThreadState *tstate)\n"
"{\n"
"    int use_tracing = (tstate->c_tracefunc != NULL || tstate->c_profilefunc != NULL);\n"
"    tstate->tracing--;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = use_tracing;\n"
"#else\n"
"    tstate->use_tracing = use_tracing;\n"
"#endif\n"
"}\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030B00A2\n"
"static inline void PyThreadState_EnterTracing(PyThreadState *tstate)\n"
"{\n"
"    tstate->tracing++;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = 0;\n"
"#else\n"
"    tstate->use_tracing = 0;\n"
"#endif\n"
"}\n"
"\n"
"static inline void PyThreadState_LeaveTracing(PyThreadState *tstate)\n"
"{\n"
"    int use_tracing = (tstate->c_tracefunc != NULL || tstate->c_profilefunc != NULL);\n"
"    tstate->tracing--;\n"
"#if PY_VERSION_HEX >= 0x030A00A1\n"
"    tstate->cframe->use_tracing = use_tracing;\n"
"#else\n"
"    tstate->use_tracing = use_tracing;\n"
"#endif\n"
"}\n"
"#endif"

#: ../../whatsnew/3.11.rst:2559
msgid ""
"Or use `the pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat>`__ to get these functions on old Python functions."
msgstr ""
"或者使用 `pythoncapi-compat 项目 <https://github.com/python/pythoncapi-compat>`__ "
"在旧版的 Python 函数上获取这些函数。"

#: ../../whatsnew/3.11.rst:2563
msgid ""
"Distributors are encouraged to build Python with the optimized Blake2 "
"library `libb2`_."
msgstr "推荐发行方使用优化的 Blake2 库 `libb2`_ 来构建 Python。"

#: ../../whatsnew/3.11.rst:2566
msgid ""
"The :c:member:`PyConfig.module_search_paths_set` field must now be set to 1 "
"for initialization to use :c:member:`PyConfig.module_search_paths` to "
"initialize :data:`sys.path`. Otherwise, initialization will recalculate the "
"path and replace any values added to ``module_search_paths``."
msgstr ""
"现在初始化时 :c:member:`PyConfig.module_search_paths_set` 字段必须设为 1 以使用 "
":c:member:`PyConfig.module_search_paths` 来初始化 :data:`sys.path`。 "
"否则，初始化将重新计算路径并替换任何加入到 ``module_search_paths`` 的值。"

#: ../../whatsnew/3.11.rst:2571
msgid ""
":c:func:`PyConfig_Read` no longer calculates the initial search path, and "
"will not fill any values into :c:member:`PyConfig.module_search_paths`. To "
"calculate default paths and then modify them, finish initialization and use "
":c:func:`PySys_GetObject` to retrieve :data:`sys.path` as a Python list "
"object and modify it directly."
msgstr ""
":c:func:`PyConfig_Read` 将不会再计算初始搜索路径，并且不会将任何值填充到 "
":c:member:`PyConfig.module_search_paths`。 要计算默认路径再修改它们，请结束初始化并使用 "
":c:func:`PySys_GetObject` 来将 :data:`sys.path` 提取为一个 Python 列表对象并直接修改它。"

#: ../../whatsnew/3.11.rst:2582
msgid ""
"Deprecate the following functions to configure the Python initialization:"
msgstr "弃用以下配置 Python 初始化的函数:"

#: ../../whatsnew/3.11.rst:2584
msgid ":c:func:`!PySys_AddWarnOptionUnicode`"
msgstr ":c:func:`!PySys_AddWarnOptionUnicode`"

#: ../../whatsnew/3.11.rst:2585
msgid ":c:func:`!PySys_AddWarnOption`"
msgstr ":c:func:`!PySys_AddWarnOption`"

#: ../../whatsnew/3.11.rst:2586
msgid ":c:func:`!PySys_AddXOption`"
msgstr ":c:func:`!PySys_AddXOption`"

#: ../../whatsnew/3.11.rst:2587
msgid ":c:func:`!PySys_HasWarnOptions`"
msgstr ":c:func:`!PySys_HasWarnOptions`"

#: ../../whatsnew/3.11.rst:2588
msgid ":c:func:`!PySys_SetArgvEx`"
msgstr ":c:func:`!PySys_SetArgvEx`"

#: ../../whatsnew/3.11.rst:2589
msgid ":c:func:`!PySys_SetArgv`"
msgstr ":c:func:`!PySys_SetArgv`"

#: ../../whatsnew/3.11.rst:2590
msgid ":c:func:`!PySys_SetPath`"
msgstr ":c:func:`!PySys_SetPath`"

#: ../../whatsnew/3.11.rst:2591
msgid ":c:func:`!Py_SetPath`"
msgstr ":c:func:`!Py_SetPath`"

#: ../../whatsnew/3.11.rst:2592
msgid ":c:func:`!Py_SetProgramName`"
msgstr ":c:func:`!Py_SetProgramName`"

#: ../../whatsnew/3.11.rst:2593
msgid ":c:func:`!Py_SetPythonHome`"
msgstr ":c:func:`!Py_SetPythonHome`"

#: ../../whatsnew/3.11.rst:2594
msgid ":c:func:`!Py_SetStandardStreamEncoding`"
msgstr ":c:func:`!Py_SetStandardStreamEncoding`"

#: ../../whatsnew/3.11.rst:2595
msgid ":c:func:`!_Py_SetProgramFullPath`"
msgstr ":c:func:`!_Py_SetProgramFullPath`"

#: ../../whatsnew/3.11.rst:2597
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`). (Contributed by Victor "
"Stinner in :gh:`88279`.)"
msgstr ""
"改用新的 :ref:`Python 初始化配置 <init-config>` 的 :c:type:`PyConfig` API "
"(:pep:`587`)。 （由 Victor Stinner 在 :gh:`88279` 中贡献。）"

#: ../../whatsnew/3.11.rst:2601
msgid ""
"Deprecate the ``ob_shash`` member of the :c:type:`PyBytesObject`. Use "
":c:func:`PyObject_Hash` instead. (Contributed by Inada Naoki in "
":issue:`46864`.)"
msgstr ""
"弃用 :c:type:`PyBytesObject` 的 ``ob_shash`` 成员。 改用 :c:func:`PyObject_Hash`。 （由"
" Inada Naoki 在 :issue:`46864` 中贡献。）.)"

#: ../../whatsnew/3.11.rst:2610
msgid ""
"The following C APIs have been deprecated in earlier Python releases, and "
"will be removed in Python 3.12."
msgstr "以下 C API 在早期 Python 发行版中已经弃用，将在 Python 3.12 中移除。"

#: ../../whatsnew/3.11.rst:2613
msgid ":c:func:`!PyUnicode_AS_DATA`"
msgstr ":c:func:`!PyUnicode_AS_DATA`"

#: ../../whatsnew/3.11.rst:2614
msgid ":c:func:`!PyUnicode_AS_UNICODE`"
msgstr ":c:func:`!PyUnicode_AS_UNICODE`"

#: ../../whatsnew/3.11.rst:2615
msgid ":c:func:`!PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`!PyUnicode_AsUnicodeAndSize`"

#: ../../whatsnew/3.11.rst:2616
msgid ":c:func:`!PyUnicode_AsUnicode`"
msgstr ":c:func:`!PyUnicode_AsUnicode`"

#: ../../whatsnew/3.11.rst:2617
msgid ":c:func:`!PyUnicode_FromUnicode`"
msgstr ":c:func:`!PyUnicode_FromUnicode`"

#: ../../whatsnew/3.11.rst:2618
msgid ":c:func:`!PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_DATA_SIZE`"

#: ../../whatsnew/3.11.rst:2619
msgid ":c:func:`!PyUnicode_GET_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_SIZE`"

#: ../../whatsnew/3.11.rst:2620
msgid ":c:func:`!PyUnicode_GetSize`"
msgstr ":c:func:`!PyUnicode_GetSize`"

#: ../../whatsnew/3.11.rst:2621
msgid ":c:func:`!PyUnicode_IS_COMPACT`"
msgstr ":c:func:`!PyUnicode_IS_COMPACT`"

#: ../../whatsnew/3.11.rst:2622
msgid ":c:func:`!PyUnicode_IS_READY`"
msgstr ":c:func:`!PyUnicode_IS_READY`"

#: ../../whatsnew/3.11.rst:2623
msgid ":c:func:`PyUnicode_READY`"
msgstr ":c:func:`PyUnicode_READY`"

#: ../../whatsnew/3.11.rst:2624
msgid ":c:func:`!PyUnicode_WSTR_LENGTH`"
msgstr ":c:func:`!PyUnicode_WSTR_LENGTH`"

#: ../../whatsnew/3.11.rst:2625
msgid ":c:func:`!_PyUnicode_AsUnicode`"
msgstr ":c:func:`!_PyUnicode_AsUnicode`"

#: ../../whatsnew/3.11.rst:2626
msgid ":c:macro:`!PyUnicode_WCHAR_KIND`"
msgstr ":c:macro:`!PyUnicode_WCHAR_KIND`"

#: ../../whatsnew/3.11.rst:2627
msgid ":c:type:`PyUnicodeObject`"
msgstr ":c:type:`PyUnicodeObject`"

#: ../../whatsnew/3.11.rst:2628
msgid ":c:func:`!PyUnicode_InternImmortal`"
msgstr ":c:func:`!PyUnicode_InternImmortal`"

#: ../../whatsnew/3.11.rst:2636
msgid ""
":c:func:`!PyFrame_BlockSetup` and :c:func:`!PyFrame_BlockPop` have been "
"removed. (Contributed by Mark Shannon in :issue:`40222`.)"
msgstr ""
":c:func:`!PyFrame_BlockSetup` 和 :c:func:`!PyFrame_BlockPop` 已被移除。 （由 Mark "
"Shannon 在 :issue:`40222` 中贡献。）"

#: ../../whatsnew/3.11.rst:2640
msgid "Remove the following math macros using the ``errno`` variable:"
msgstr "移除了下列使用 ``errno`` 变量的数学宏:"

#: ../../whatsnew/3.11.rst:2642
msgid "``Py_ADJUST_ERANGE1()``"
msgstr "``Py_ADJUST_ERANGE1()``"

#: ../../whatsnew/3.11.rst:2643
msgid "``Py_ADJUST_ERANGE2()``"
msgstr "``Py_ADJUST_ERANGE2()``"

#: ../../whatsnew/3.11.rst:2644
msgid "``Py_OVERFLOWED()``"
msgstr "``Py_OVERFLOWED()``"

#: ../../whatsnew/3.11.rst:2645
msgid "``Py_SET_ERANGE_IF_OVERFLOW()``"
msgstr "``Py_SET_ERANGE_IF_OVERFLOW()``"

#: ../../whatsnew/3.11.rst:2646
msgid "``Py_SET_ERRNO_ON_MATH_ERROR()``"
msgstr "``Py_SET_ERRNO_ON_MATH_ERROR()``"

#: ../../whatsnew/3.11.rst:2648
msgid "(Contributed by Victor Stinner in :issue:`45412`.)"
msgstr "（由 Victor Stinner 在 :issue:`45412` 中贡献。）"

#: ../../whatsnew/3.11.rst:2650
msgid ""
"Remove ``Py_UNICODE_COPY()`` and ``Py_UNICODE_FILL()`` macros, deprecated "
"since Python 3.3. Use ``PyUnicode_CopyCharacters()`` or ``memcpy()`` "
"(``wchar_t*`` string), and ``PyUnicode_Fill()`` functions instead. "
"(Contributed by Victor Stinner in :issue:`41123`.)"
msgstr ""
"移除 ``Py_UNICODE_COPY()`` 和 ``Py_UNICODE_FILL()`` 宏，它们自 Python 3.3 起已被弃用。 改用 "
"``PyUnicode_CopyCharacters()`` 或 ``memcpy()`` (``wchar_t*`` 字符串) 和 "
"``PyUnicode_Fill()`` 函数。 （由 Victor Stinner 在 :issue:`41123` 中贡献。）"

#: ../../whatsnew/3.11.rst:2655
msgid ""
"Remove the ``pystrhex.h`` header file. It only contains private functions. C"
" extensions should only include the main ``<Python.h>`` header file. "
"(Contributed by Victor Stinner in :issue:`45434`.)"
msgstr ""
"移除 ``pystrhex.h`` 头文件。 它只包含私有函数。 C 扩展应当只包括主 ``<Python.h>`` 头文件。 （由 Victor "
"Stinner 在 :issue:`45434` 中贡献。）"

#: ../../whatsnew/3.11.rst:2659
msgid ""
"Remove the ``Py_FORCE_DOUBLE()`` macro. It was used by the "
"``Py_IS_INFINITY()`` macro. (Contributed by Victor Stinner in "
":issue:`45440`.)"
msgstr ""
"移除了 ``Py_FORCE_DOUBLE()`` 宏，它曾经由 ``Py_IS_INFINITY()`` 宏使用。（由 Victor Stinner "
"在 :issue:`45440` 贡献。）"

#: ../../whatsnew/3.11.rst:2663
msgid ""
"The following items are no longer available when :c:macro:`Py_LIMITED_API` "
"is defined:"
msgstr "以下项目在 :c:macro:`Py_LIMITED_API` 定义时不再可用："

#: ../../whatsnew/3.11.rst:2666
msgid ":c:func:`PyMarshal_WriteLongToFile`"
msgstr ":c:func:`PyMarshal_WriteLongToFile`"

#: ../../whatsnew/3.11.rst:2667
msgid ":c:func:`PyMarshal_WriteObjectToFile`"
msgstr ":c:func:`PyMarshal_WriteObjectToFile`"

#: ../../whatsnew/3.11.rst:2668
msgid ":c:func:`PyMarshal_ReadObjectFromString`"
msgstr ":c:func:`PyMarshal_ReadObjectFromString`"

#: ../../whatsnew/3.11.rst:2669
msgid ":c:func:`PyMarshal_WriteObjectToString`"
msgstr ":c:func:`PyMarshal_WriteObjectToString`"

#: ../../whatsnew/3.11.rst:2670
msgid "the ``Py_MARSHAL_VERSION`` macro"
msgstr "``Py_MARSHAL_VERSION`` 宏"

#: ../../whatsnew/3.11.rst:2672
msgid "These are not part of the :ref:`limited API <limited-api-list>`."
msgstr "这些不是 :ref:`受限 API <limited-api-list>` 的组成部分。"

#: ../../whatsnew/3.11.rst:2674
msgid "(Contributed by Victor Stinner in :issue:`45474`.)"
msgstr "（由 Victor Stinner 在 :issue:`45474` 中贡献。）"

#: ../../whatsnew/3.11.rst:2676
msgid ""
"Exclude :c:func:`PyWeakref_GET_OBJECT` from the limited C API. It never "
"worked since the :c:type:`!PyWeakReference` structure is opaque in the "
"limited C API. (Contributed by Victor Stinner in :issue:`35134`.)"
msgstr ""
"将 :c:func:`PyWeakref_GET_OBJECT` 排除在受限 C API 之外。 由于 "
":c:type:`!PyWeakReference` 结构体在受限 C API 中被屏蔽因此它从未发挥作用。 （由 Victor Stinner 在 "
":issue:`35134` 中贡献。）"

#: ../../whatsnew/3.11.rst:2681
msgid ""
"Remove the ``PyHeapType_GET_MEMBERS()`` macro. It was exposed in the public "
"C API by mistake, it must only be used by Python internally. Use the "
"``PyTypeObject.tp_members`` member instead. (Contributed by Victor Stinner "
"in :issue:`40170`.)"
msgstr ""
"移除了 ``PyHeapType_GET_MEMBERS()`` 宏。它错误地暴露在公开的 C API 中，且只能由 Python 在内部使用。请使用 "
"``PyTypeObject.tp_members`` 作为替代。（由 Victor Stinner 在 :issue:`40170` 贡献。）"

#: ../../whatsnew/3.11.rst:2686
msgid ""
"Remove the ``HAVE_PY_SET_53BIT_PRECISION`` macro (moved to the internal C "
"API). (Contributed by Victor Stinner in :issue:`45412`.)"
msgstr ""
"移除了 ``HAVE_PY_SET_53BIT_PRECISION`` 宏（移动到了内部 C API）。（由 Victor Stinner 在 "
":issue:`45412` 贡献。）"

#: ../../whatsnew/3.11.rst:2692
msgid ""
"Remove the :c:type:`Py_UNICODE` encoder APIs, as they have been deprecated "
"since Python 3.3, are little used and are inefficient relative to the "
"recommended alternatives."
msgstr ""
"移除了 :c:type:`Py_UNICODE` 编码器 API，它们从 Python 3.3 "
"起已经弃用，很少使用，而且相对于推荐的替代品来说，效率很低。"

#: ../../whatsnew/3.11.rst:2697
msgid "The removed functions are:"
msgstr "被移除的函数有:"

#: ../../whatsnew/3.11.rst:2699
msgid ":func:`!PyUnicode_Encode`"
msgstr ":func:`!PyUnicode_Encode`"

#: ../../whatsnew/3.11.rst:2700
msgid ":func:`!PyUnicode_EncodeASCII`"
msgstr ":func:`!PyUnicode_EncodeASCII`"

#: ../../whatsnew/3.11.rst:2701
msgid ":func:`!PyUnicode_EncodeLatin1`"
msgstr ":func:`!PyUnicode_EncodeLatin1`"

#: ../../whatsnew/3.11.rst:2702
msgid ":func:`!PyUnicode_EncodeUTF7`"
msgstr ":func:`!PyUnicode_EncodeUTF7`"

#: ../../whatsnew/3.11.rst:2703
msgid ":func:`!PyUnicode_EncodeUTF8`"
msgstr ":func:`!PyUnicode_EncodeUTF8`"

#: ../../whatsnew/3.11.rst:2704
msgid ":func:`!PyUnicode_EncodeUTF16`"
msgstr ":func:`!PyUnicode_EncodeUTF16`"

#: ../../whatsnew/3.11.rst:2705
msgid ":func:`!PyUnicode_EncodeUTF32`"
msgstr ":func:`!PyUnicode_EncodeUTF32`"

#: ../../whatsnew/3.11.rst:2706
msgid ":func:`!PyUnicode_EncodeUnicodeEscape`"
msgstr ":func:`!PyUnicode_EncodeUnicodeEscape`"

#: ../../whatsnew/3.11.rst:2707
msgid ":func:`!PyUnicode_EncodeRawUnicodeEscape`"
msgstr ":func:`!PyUnicode_EncodeRawUnicodeEscape`"

#: ../../whatsnew/3.11.rst:2708
msgid ":func:`!PyUnicode_EncodeCharmap`"
msgstr ":func:`!PyUnicode_EncodeCharmap`"

#: ../../whatsnew/3.11.rst:2709
msgid ":func:`!PyUnicode_TranslateCharmap`"
msgstr ":func:`!PyUnicode_TranslateCharmap`"

#: ../../whatsnew/3.11.rst:2710
msgid ":func:`!PyUnicode_EncodeDecimal`"
msgstr ":func:`!PyUnicode_EncodeDecimal`"

#: ../../whatsnew/3.11.rst:2711
msgid ":func:`!PyUnicode_TransformDecimalToASCII`"
msgstr ":func:`!PyUnicode_TransformDecimalToASCII`"

#: ../../whatsnew/3.11.rst:2713
msgid ""
"See :pep:`624` for details and :pep:`migration guidance <624#alternative-"
"apis>`. (Contributed by Inada Naoki in :issue:`44029`.)"
msgstr ""
"请参阅 :pep:`624` 了解细节以及 :pep:`迁移指引 <624#alternative-apis>`。 （由 Inada Naoki 在 "
":issue:`44029` 中贡献。）"

#: ../../whatsnew/3.11.rst:2719
msgid "Notable changes in 3.11.4"
msgstr "3.11.4 中的重要变化"

#: ../../whatsnew/3.11.rst:2722
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.11.rst:2724
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`,"
" have a new a *filter* argument that allows limiting tar features than may "
"be surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile-extraction-filter` for details. In Python 3.12,"
" use without the *filter* argument will show a :exc:`DeprecationWarning`. In"
" Python 3.14, the default will switch to ``'data'``. (Contributed by Petr "
"Viktorin in :pep:`706`.)"
msgstr ""
":mod:`tarfile` 中的提取方法和 :func:`shutil.unpack_archive` 都新增了 *filter* "
"参数以允许限制可能令人意外或危险的 tar 特性，例如在目标目录之外创建文件。 相关细节参见 :ref:`tarfile-extraction-"
"filter`。 在 Python 3.12 中，不带 *filter* 参数的用法将显示 :exc:`DeprecationWarning`。 在 "
"Python 3.14 中，默认值将切换为 ``'data'``。 （由 Petr Viktorin 在 :pep:`706` 中贡献。）"

#: ../../whatsnew/3.11.rst:2736
msgid "Notable changes in 3.11.5"
msgstr "3.11.5 中的重要变化"

#: ../../whatsnew/3.11.rst:2739
msgid "OpenSSL"
msgstr "OpenSSL"

#: ../../whatsnew/3.11.rst:2741
msgid ""
"Windows builds and macOS installers from python.org now use OpenSSL 3.0."
msgstr "来自 python.org 的 Windows 版本和 macOS 安装程序现在使用 OpenSSL 3.0。"
