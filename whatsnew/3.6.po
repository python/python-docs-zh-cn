# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2025-07-18 18:50+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.6.rst:3
msgid "What's New In Python 3.6"
msgstr "Python 3.6 有什么新变化"

#: ../../whatsnew/3.6.rst:0
msgid "Editors"
msgstr "编者"

#: ../../whatsnew/3.6.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"

#: ../../whatsnew/3.6.rst:47
msgid ""
"This article explains the new features in Python 3.6, compared to 3.5. "
"Python 3.6 was released on December 23, 2016.  See the `changelog "
"<https://docs.python.org/3.6/whatsnew/changelog.html>`_ for a full list of "
"changes."
msgstr ""
"本文解释了与 3.5 相比，在 Python 3.6 中新增的特性。 Python 3.6 发布于 2016 年 12 月 23 日。 请参阅 "
"`changelog <https://docs.python.org/3.6/whatsnew/changelog.html>`_ "
"获取完整的更改列表。"

#: ../../whatsnew/3.6.rst:54
msgid ":pep:`494` - Python 3.6 Release Schedule"
msgstr ":pep:`494` - Python 3.6 发布计划"

#: ../../whatsnew/3.6.rst:58
msgid "Summary -- Release highlights"
msgstr "摘要 -- 发布重点"

#: ../../whatsnew/3.6.rst:60
msgid "New syntax features:"
msgstr "新的语法特性："

#: ../../whatsnew/3.6.rst:62
msgid ":ref:`PEP 498 <whatsnew36-pep498>`, formatted string literals."
msgstr ":ref:`PEP 498 <whatsnew36-pep498>`, 格式化字符串字面值"

#: ../../whatsnew/3.6.rst:64
msgid ":ref:`PEP 515 <whatsnew36-pep515>`, underscores in numeric literals."
msgstr ":ref:`PEP 515 <whatsnew36-pep515>`, 数字字面值中的下划线。"

#: ../../whatsnew/3.6.rst:66
msgid ":ref:`PEP 526 <whatsnew36-pep526>`, syntax for variable annotations."
msgstr ":ref:`PEP 526 <whatsnew36-pep526>` , 变量标注语法。"

#: ../../whatsnew/3.6.rst:68
msgid ":ref:`PEP 525 <whatsnew36-pep525>`, asynchronous generators."
msgstr ":ref:`PEP 525 <whatsnew36-pep525>`，异步生成器。"

#: ../../whatsnew/3.6.rst:70
msgid ":ref:`PEP 530 <whatsnew36-pep530>`: asynchronous comprehensions."
msgstr ":ref:`PEP 530 <whatsnew36-pep530>`: 异步推导式。"

#: ../../whatsnew/3.6.rst:73
msgid "New library modules:"
msgstr "新的库模块："

#: ../../whatsnew/3.6.rst:75
msgid ""
":mod:`secrets`: :ref:`PEP 506 -- Adding A Secrets Module To The Standard "
"Library <whatsnew36-pep506>`."
msgstr ""
":mod:`secrets`: :ref:`PEP 506 -- Python 标准库增加一个密码模块 <whatsnew36-pep506>`。"

#: ../../whatsnew/3.6.rst:78
msgid "CPython implementation improvements:"
msgstr "CPython 实现的改进："

#: ../../whatsnew/3.6.rst:80
msgid ""
"The :ref:`dict <typesmapping>` type has been reimplemented to use a "
":ref:`more compact representation <whatsnew36-compactdict>` based on `a "
"proposal by Raymond Hettinger <https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_ and similar to the `PyPy dict "
"implementation`_.  This resulted in dictionaries using 20% to 25% less "
"memory when compared to Python 3.5."
msgstr ""
"根据 `Raymond Hettinger 的提议 <https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_  已将 :ref:`dict <typesmapping>` 类型重新实现为使用 "
":ref:`更紧凑的表示形式 <whatsnew36-compactdict>` 并类似于 `PyPy dict implementation`_。 "
"这使得字典所使用的内存相对于 Python 3.5 版减少了 20% 到 25%。"

#: ../../whatsnew/3.6.rst:87
msgid ""
"Customization of class creation has been simplified with the :ref:`new "
"protocol <whatsnew36-pep487>`."
msgstr "类创建的定制过程通过 :ref:`新协议 <whatsnew36-pep487>` 得到了简化。"

#: ../../whatsnew/3.6.rst:90
msgid ""
"The class attribute definition order is :ref:`now preserved  "
"<whatsnew36-pep520>`."
msgstr "类属性的定义顺序 :ref:`现在会被保留  <whatsnew36-pep520>`。"

#: ../../whatsnew/3.6.rst:93
msgid ""
"The order of elements in ``**kwargs`` now :ref:`corresponds to the order "
"<whatsnew36-pep468>` in which keyword arguments were passed to the function."
msgstr "现在 ``**kwargs`` 中的元素会与传给函数的关键字参数 :ref:`保持对应顺序 <whatsnew36-pep468>`。"

#: ../../whatsnew/3.6.rst:97
msgid ""
"DTrace and SystemTap :ref:`probing support <whatsnew36-tracing>` has been "
"added."
msgstr "添加了 DTrace 和 SystemTap :ref:`探测支持 <whatsnew36-tracing>`"

#: ../../whatsnew/3.6.rst:100
msgid ""
"The new :ref:`PYTHONMALLOC <whatsnew36-pythonmalloc>` environment variable "
"can now be used to debug the interpreter memory allocation and access "
"errors."
msgstr ""
"新的 :ref:`PYTHONMALLOC <whatsnew36-pythonmalloc>` 环境变量可被用来调试解释器的内存分配和访问错误。"

#: ../../whatsnew/3.6.rst:105
msgid "Significant improvements in the standard library:"
msgstr "标准库中的重大改进："

#: ../../whatsnew/3.6.rst:107
msgid ""
"The :mod:`asyncio` module has received new features, significant usability "
"and performance improvements, and a fair amount of bug fixes. Starting with "
"Python 3.6 the ``asyncio`` module is no longer provisional and its API is "
"considered stable."
msgstr ""
":mod:`asyncio` 模块获得了许多新特性，显著的可用性和性能提升，以及大量的问题修正。 从 Python 3.6 开始 ``asyncio``"
" 模块不再处于待定状态，它已被视为稳定 API。"

#: ../../whatsnew/3.6.rst:112
msgid ""
"A new :ref:`file system path protocol <whatsnew36-pep519>` has been "
"implemented to support :term:`path-like objects <path-like object>`. All "
"standard library functions operating on paths have been updated to work with"
" the new protocol."
msgstr ""
"实现了新的 :ref:`文件系统路径协议 <whatsnew36-pep519>` 以支持 :term:`路径类对象 <path-like "
"object>`。 所有操作路径的标准库函数已被更新为使用新的协议。"

#: ../../whatsnew/3.6.rst:117
msgid ""
"The :mod:`datetime` module has gained support for :ref:`Local Time "
"Disambiguation <whatsnew36-pep495>`."
msgstr ":mod:`datetime` 模块已获得对 :ref:`本地时间消歧义 <whatsnew36-pep495>` 的支持。"

#: ../../whatsnew/3.6.rst:120
msgid ""
"The :mod:`typing` module received a number of :ref:`improvements "
"<whatsnew36-typing>`."
msgstr ":mod:`typing` 模块获得了大量的 :ref:`改进 <whatsnew36-typing>`。"

#: ../../whatsnew/3.6.rst:123
msgid ""
"The :mod:`tracemalloc` module has been significantly reworked and is now "
"used to provide better output for :exc:`ResourceWarning` as well as provide "
"better diagnostics for memory allocation errors. See the :ref:`PYTHONMALLOC "
"section <whatsnew36-pythonmalloc>` for more information."
msgstr ""
":mod:`tracemalloc` 模块已被大幅重写，现在将被用于为 :exc:`ResourceWarning` "
"提供更好的输出，并为内存分配错误提供更好的诊断。 请参阅 :ref:`PYTHONMALLOC 一节 "
"<whatsnew36-pythonmalloc>` 来了解详情。"

#: ../../whatsnew/3.6.rst:130
msgid "Security improvements:"
msgstr "安全改进："

#: ../../whatsnew/3.6.rst:132
msgid ""
"The new :mod:`secrets` module has been added to simplify the generation of "
"cryptographically strong pseudo-random numbers suitable for managing secrets"
" such as account authentication, tokens, and similar."
msgstr "添加了 :mod:`secrets` 模块以简化适用于密码管理的高加密强度伪随机数的生成，例如账户验证、安全凭据等场景。"

#: ../../whatsnew/3.6.rst:136 ../../whatsnew/3.6.rst:1283
msgid ""
"On Linux, :func:`os.urandom` now blocks until the system urandom entropy "
"pool is initialized to increase the security. See the :pep:`524` for the "
"rationale."
msgstr ""
"在 Linux 上，现在 :func:`os.urandom` 会阻塞直到系统的 urandom 熵池被初始化以提升安全性。 其理由参见 "
":pep:`524`。"

#: ../../whatsnew/3.6.rst:140
msgid "The :mod:`hashlib` and :mod:`ssl` modules now support OpenSSL 1.1.0."
msgstr ":mod:`hashlib` 和 :mod:`ssl` 模块现在支持 OpenSSL 1.1.0。"

#: ../../whatsnew/3.6.rst:142
msgid ""
"The default settings and feature set of the :mod:`ssl` module have been "
"improved."
msgstr ":mod:`ssl` 模块的默认设置和特性集已得到改进。"

#: ../../whatsnew/3.6.rst:145
msgid ""
"The :mod:`hashlib` module received support for the BLAKE2, SHA-3 and SHAKE "
"hash algorithms and the :func:`~hashlib.scrypt` key derivation function."
msgstr ""
":mod:`hashlib` 模块获得了对 BLAKE2, SHA-3 和 SHAKE 哈希算法以及 :func:`~hashlib.scrypt` "
"密钥派生函数的支持。"

#: ../../whatsnew/3.6.rst:149
msgid "Windows improvements:"
msgstr "Windows改进："

#: ../../whatsnew/3.6.rst:151
msgid ""
":ref:`PEP 528 <whatsnew36-pep528>` and :ref:`PEP 529 <whatsnew36-pep529>`, "
"Windows filesystem and console encoding changed to UTF-8."
msgstr ""
":ref:`PEP 528 <whatsnew36-pep528>` 和 :ref:`PEP 529 <whatsnew36-pep529>`, "
"将Windows文件系统和控制台的编码更改为UTF-8"

#: ../../whatsnew/3.6.rst:154
msgid ""
"The ``py.exe`` launcher, when used interactively, no longer prefers Python 2"
" over Python 3 when the user doesn't specify a version (via command line "
"arguments or a config file).  Handling of shebang lines remains unchanged - "
"\"python\" refers to Python 2 in that case."
msgstr ""
"在交互式地使用 ``py.exe`` 启动器时，当用户未（通过命令行参数或配置文件）指定版本时不再优先选择 Python 2 而是选择 Python "
"3。 对声明行的处理则保持不变 —— 在这种情况下 \"python\" 还是指 Python 2。"

#: ../../whatsnew/3.6.rst:159
msgid ""
"``python.exe`` and ``pythonw.exe`` have been marked as long-path aware, "
"which means that the 260 character path limit may no longer apply. See "
":ref:`removing the MAX_PATH limitation <max-path>` for details."
msgstr ""
"``python.exe`` 和 ``pythonw.exe`` 已被标记为支持长路径，这意味着不再有 260 个字符的路径长度限制。 详情参见 "
":ref:`移除 MAX_PATH 限制 <max-path>`。"

#: ../../whatsnew/3.6.rst:163
msgid ""
"A ``._pth`` file can be added to force isolated mode and fully specify all "
"search paths to avoid registry and environment lookup. See :ref:`the "
"documentation <windows_finding_modules>` for more information."
msgstr ""
"可以添加一个 ``._pth`` 文件来强制使用隔离模式和完整指定所有搜索路径来避免注册表和环境查找。 更多信息请参阅 :ref:`相关文档 "
"<windows_finding_modules>`。"

#: ../../whatsnew/3.6.rst:167
msgid ""
"A ``python36.zip`` file now works as a landmark to infer "
":envvar:`PYTHONHOME`. See :ref:`the documentation <windows_finding_modules>`"
" for more information."
msgstr ""
"现在 ``python36.zip`` 文件可以作为推断 :envvar:`PYTHONHOME` 的标记物。 请参阅 :ref:`相关文档 "
"<windows_finding_modules>` 了解详情。"

#: ../../whatsnew/3.6.rst:176
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.6.rst:181
msgid "PEP 498: Formatted string literals"
msgstr "PEP 498: 格式化字符串字面值"

#: ../../whatsnew/3.6.rst:183
msgid ""
":pep:`498` introduces a new kind of string literals: *f-strings*, or "
":ref:`formatted string literals <f-strings>`."
msgstr ":pep:`498` 引入了一种新型的字符串字面值: *f-字符串*，或称 :ref:`格式化字符串字面值 <f-strings>`。"

#: ../../whatsnew/3.6.rst:186
msgid ""
"Formatted string literals are prefixed with ``'f'`` and are similar to the "
"format strings accepted by :meth:`str.format`.  They contain replacement "
"fields surrounded by curly braces.  The replacement fields are expressions, "
"which are evaluated at run time, and then formatted using the :func:`format`"
" protocol::"
msgstr ""
"格式化字符串字面值带有 ``'f'`` 前缀并且类似于 :meth:`str.format` 所接受的格式字符串。 其中包含由花括号包围的替换字段。 "
"替换字段属于表达式，它们会在运行时被求值，然后使用 :func:`format` 协议进行格式化::"

#: ../../whatsnew/3.6.rst:192
msgid ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name}.\"\n"
"'He said his name is Fred.'\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'"
msgstr ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name}.\"\n"
"'He said his name is Fred.'\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'"

#: ../../whatsnew/3.6.rst:203
msgid ":pep:`498` -- Literal String Interpolation."
msgstr ":pep:`498` -- 字符串字面值插值。"

#: ../../whatsnew/3.6.rst:204
msgid "PEP written and implemented by Eric V. Smith."
msgstr "PEP 由 Eric V. Smith 撰写并实现"

#: ../../whatsnew/3.6.rst:206
msgid ":ref:`Feature documentation <f-strings>`."
msgstr ":ref:`特性文档 <f-strings>`。"

#: ../../whatsnew/3.6.rst:212
msgid "PEP 526: Syntax for variable annotations"
msgstr "PEP 526: 变量标注的语法"

#: ../../whatsnew/3.6.rst:214
msgid ""
":pep:`484` introduced the standard for type annotations of function "
"parameters, a.k.a. type hints. This PEP adds syntax to Python for annotating"
" the types of variables including class variables and instance variables::"
msgstr ""
":pep:`484` 引入了函数形参类型标注即类型提示的标准。 这个 PEP 为 Python 添加了标注变量类型的语法，包括类变量和实例变量::"

#: ../../whatsnew/3.6.rst:218
msgid ""
"primes: List[int] = []\n"
"\n"
"captain: str  # Note: no initial value!\n"
"\n"
"class Starship:\n"
"    stats: Dict[str, int] = {}"
msgstr ""
"primes: List[int] = []\n"
"\n"
"captain: str  # 注意：没有初始值\n"
"\n"
"class Starship:\n"
"    stats: Dict[str, int] = {}"

#: ../../whatsnew/3.6.rst:225
msgid ""
"Just as for function annotations, the Python interpreter does not attach any"
" particular meaning to variable annotations and only stores them in the "
"``__annotations__`` attribute of a class or module."
msgstr ""
"与函数标注一样，Python 解释器不会为变量标注附加任何特殊含义，仅会将其保存在类或模块的 ``__annotations__`` 属性中。"

#: ../../whatsnew/3.6.rst:229
msgid ""
"In contrast to variable declarations in statically typed languages, the goal"
" of annotation syntax is to provide an easy way to specify structured type "
"metadata for third party tools and libraries via the abstract syntax tree "
"and the ``__annotations__`` attribute."
msgstr ""
"与静态类型语法的变量声明不同，标注语法的目的是通过抽象语法树和 ``__annotations__`` "
"属性提供一个简单方式来为第三方工具和库指定结构化类型元数据。"

#: ../../whatsnew/3.6.rst:236
msgid ":pep:`526` -- Syntax for variable annotations."
msgstr ":pep:`526` -- 变量标注的语法。"

#: ../../whatsnew/3.6.rst:237
msgid ""
"PEP written by Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach, and"
" Guido van Rossum. Implemented by Ivan Levkivskyi."
msgstr ""
"PEP 由 Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach, 和 Guido van "
"Rossum 撰写，由 Ivan Levkivskyi 实现。"

#: ../../whatsnew/3.6.rst:240
msgid ""
"Tools that use or will use the new syntax: `mypy <https://www.mypy-"
"lang.org/>`_, `pytype <https://github.com/google/pytype>`_, PyCharm, etc."
msgstr ""
"使用或将要使用此新语法的工具有: `mypy <https://www.mypy-lang.org/>`_, `pytype "
"<https://github.com/google/pytype>`_, PyCharm 等等。"

#: ../../whatsnew/3.6.rst:248
msgid "PEP 515: Underscores in Numeric Literals"
msgstr "PEP 515: 数字字面值中的下划线。"

#: ../../whatsnew/3.6.rst:250
msgid ""
":pep:`515` adds the ability to use underscores in numeric literals for "
"improved readability.  For example::"
msgstr ":pep:`515` 增加了在数字字面值中使用下划线的能力以改善可读性。 例如::"

#: ../../whatsnew/3.6.rst:253
msgid ""
">>> 1_000_000_000_000_000\n"
"1000000000000000\n"
">>> 0x_FF_FF_FF_FF\n"
"4294967295"
msgstr ""
">>> 1_000_000_000_000_000\n"
"1000000000000000\n"
">>> 0x_FF_FF_FF_FF\n"
"4294967295"

#: ../../whatsnew/3.6.rst:258
msgid ""
"Single underscores are allowed between digits and after any base specifier."
"  Leading, trailing, or multiple underscores in a row are not allowed."
msgstr "单个下划线允许用在数码之间和任何数制指示符之后。 一行内不允许有开头、末尾或多个下划线。"

#: ../../whatsnew/3.6.rst:262
msgid ""
"The :ref:`string formatting <formatspec>` language also now has support for "
"the ``'_'`` option to signal the use of an underscore for a thousands "
"separator for floating-point presentation types and for integer presentation"
" type ``'d'``.  For integer presentation types ``'b'``, ``'o'``, ``'x'``, "
"and ``'X'``, underscores will be inserted every 4 digits::"
msgstr ""
":ref:`字符串格式化 <formatspec>` 语言现在也支持以 ``'_'`` 选项来表示用下划线作为浮点表示类型和整数表示类型 ``'d'``"
" 的千位分隔符。 对于整数表示类型 ``'b'``, ``'o'``, ``'x'`` 和 ``'X'``，将每隔 4 数码插入一个下划线::"

#: ../../whatsnew/3.6.rst:269
msgid ""
">>> '{:_}'.format(1000000)\n"
"'1_000_000'\n"
">>> '{:_x}'.format(0xFFFFFFFF)\n"
"'ffff_ffff'"
msgstr ""
">>> '{:_}'.format(1000000)\n"
"'1_000_000'\n"
">>> '{:_x}'.format(0xFFFFFFFF)\n"
"'ffff_ffff'"

#: ../../whatsnew/3.6.rst:276
msgid ":pep:`515` -- Underscores in Numeric Literals"
msgstr ":pep:`515` -- 数字字面值中的下划线。"

#: ../../whatsnew/3.6.rst:277
msgid "PEP written by Georg Brandl and Serhiy Storchaka."
msgstr "PEP 由 Georg Brandl 和 Serhiy Storchaka 撰写"

#: ../../whatsnew/3.6.rst:283
msgid "PEP 525: Asynchronous Generators"
msgstr "PEP 525: 异步生成器"

#: ../../whatsnew/3.6.rst:285
msgid ""
":pep:`492` introduced support for native coroutines and ``async`` / "
"``await`` syntax to Python 3.5.  A notable limitation of the Python 3.5 "
"implementation is that it was not possible to use ``await`` and ``yield`` in"
" the same function body.  In Python 3.6 this restriction has been lifted, "
"making it possible to define *asynchronous generators*::"
msgstr ""
":pep:`492` 将对原生协程和 ``async`` / ``await`` 语法的支持引入到 Python 3.5 中。 但 Python 3.5"
" 实现的一个明显限制是不可能在同一函数体中同时使用 ``await`` 和 ``yield``。 在 Python 3.6 "
"中此限制已被解除，这样就就能够定义 *异步生成器*::"

#: ../../whatsnew/3.6.rst:291
msgid ""
"async def ticker(delay, to):\n"
"    \"\"\"Yield numbers from 0 to *to* every *delay* seconds.\"\"\"\n"
"    for i in range(to):\n"
"        yield i\n"
"        await asyncio.sleep(delay)"
msgstr ""
"async def ticker(delay, to):\n"
"    \"\"\"每隔 *delay* 秒从 0 到 *to* 产生数字。\"\"\"\n"
"    for i in range(to):\n"
"        yield i\n"
"        await asyncio.sleep(delay)"

#: ../../whatsnew/3.6.rst:297
msgid "The new syntax allows for faster and more concise code."
msgstr "这个新语法允许更快速且更精简的代码。"

#: ../../whatsnew/3.6.rst:301
msgid ":pep:`525` -- Asynchronous Generators"
msgstr ":pep:`525` -- 异步生成器"

#: ../../whatsnew/3.6.rst:302 ../../whatsnew/3.6.rst:323
msgid "PEP written and implemented by Yury Selivanov."
msgstr "PEP 由 Yury Selivanov 撰写并实现"

#: ../../whatsnew/3.6.rst:308
msgid "PEP 530: Asynchronous Comprehensions"
msgstr "PEP 530: 异步推导式"

#: ../../whatsnew/3.6.rst:310
msgid ""
":pep:`530` adds support for using ``async for`` in list, set, dict "
"comprehensions and generator expressions::"
msgstr ":pep:`530` 添加了对在列表、集合与字典推导式和生成器表达式中使用 ``async for`` 的支持::"

#: ../../whatsnew/3.6.rst:313
msgid "result = [i async for i in aiter() if i % 2]"
msgstr "result = [i async for i in aiter() if i % 2]"

#: ../../whatsnew/3.6.rst:315
msgid ""
"Additionally, ``await`` expressions are supported in all kinds of "
"comprehensions::"
msgstr "此外，``await`` 表达式也在所有种类的推导式中得到支持::"

#: ../../whatsnew/3.6.rst:318
msgid "result = [await fun() for fun in funcs if await condition()]"
msgstr "result = [await fun() for fun in funcs if await condition()]"

#: ../../whatsnew/3.6.rst:322
msgid ":pep:`530` -- Asynchronous Comprehensions"
msgstr ":pep:`530` -- 异步推导式"

#: ../../whatsnew/3.6.rst:329
msgid "PEP 487: Simpler customization of class creation"
msgstr "PEP 487: 更简单的自定义类创建"

#: ../../whatsnew/3.6.rst:331
msgid ""
"It is now possible to customize subclass creation without using a metaclass."
" The new ``__init_subclass__`` classmethod will be called on the base class "
"whenever a new subclass is created::"
msgstr ""
"现在可以在不使用元类的情况下自定义子类的创建。 当一个新的子类被创建时将在基类上调用新的 ``__init_subclass__`` 类方法::"

#: ../../whatsnew/3.6.rst:335
msgid ""
"class PluginBase:\n"
"    subclasses = []\n"
"\n"
"    def __init_subclass__(cls, **kwargs):\n"
"        super().__init_subclass__(**kwargs)\n"
"        cls.subclasses.append(cls)\n"
"\n"
"class Plugin1(PluginBase):\n"
"    pass\n"
"\n"
"class Plugin2(PluginBase):\n"
"    pass"
msgstr ""
"class PluginBase:\n"
"    subclasses = []\n"
"\n"
"    def __init_subclass__(cls, **kwargs):\n"
"        super().__init_subclass__(**kwargs)\n"
"        cls.subclasses.append(cls)\n"
"\n"
"class Plugin1(PluginBase):\n"
"    pass\n"
"\n"
"class Plugin2(PluginBase):\n"
"    pass"

#: ../../whatsnew/3.6.rst:348
msgid ""
"In order to allow zero-argument :func:`super` calls to work correctly from "
":meth:`~object.__init_subclass__` implementations, custom metaclasses must "
"ensure that the new ``__classcell__`` namespace entry is propagated to "
"``type.__new__`` (as described in :ref:`class-object-creation`)."
msgstr ""
"为了让来自 :meth:`~object.__init_subclass__` 实现的零参数 :func:`super` "
"调用能正确工作，自定义元类必须保证新的 ``__classcell__`` 命名空间入口被传播到 ``type.__new__`` (如 "
":ref:`class-object-creation` 中所描述)。"

#: ../../whatsnew/3.6.rst:355 ../../whatsnew/3.6.rst:393
msgid ":pep:`487` -- Simpler customization of class creation"
msgstr ":pep:`487` -- 更简单的自定义类创建"

#: ../../whatsnew/3.6.rst:356 ../../whatsnew/3.6.rst:394
msgid "PEP written and implemented by Martin Teichmann."
msgstr "PEP 由 Martin Teichmann 撰写并实现。"

#: ../../whatsnew/3.6.rst:358
msgid ":ref:`Feature documentation <class-customization>`"
msgstr ":ref:`特性文档 <class-customization>`"

#: ../../whatsnew/3.6.rst:364
msgid "PEP 487: Descriptor Protocol Enhancements"
msgstr "PEP 487: 描述器协议的增强"

#: ../../whatsnew/3.6.rst:366
msgid ""
":pep:`487` extends the descriptor protocol to include the new optional "
":meth:`~object.__set_name__` method.  Whenever a new class is defined, the "
"new method will be called on all descriptors included in the definition, "
"providing them with a reference to the class being defined and the name "
"given to the descriptor within the class namespace.  In other words, "
"instances of descriptors can now know the attribute name of the descriptor "
"in the owner class::"
msgstr ""
":pep:`487` 扩展了描述器协议以包括新的可选方法 :meth:`~object.__set_name__`。 "
"当创建一个新类时，这个新方法将在定义中包括的所有描述器上被调用，为它们提供对所定义类的引用以及在类命名中间中给予描述器的名称。 "
"换句话说，描述器的实例现在能知道描述器在所有者类中的属性名称::"

#: ../../whatsnew/3.6.rst:374
msgid ""
"class IntField:\n"
"    def __get__(self, instance, owner):\n"
"        return instance.__dict__[self.name]\n"
"\n"
"    def __set__(self, instance, value):\n"
"        if not isinstance(value, int):\n"
"            raise ValueError(f'expecting integer in {self.name}')\n"
"        instance.__dict__[self.name] = value\n"
"\n"
"    # this is the new initializer:\n"
"    def __set_name__(self, owner, name):\n"
"        self.name = name\n"
"\n"
"class Model:\n"
"    int_field = IntField()"
msgstr ""
"class IntField:\n"
"    def __get__(self, instance, owner):\n"
"        return instance.__dict__[self.name]\n"
"\n"
"    def __set__(self, instance, value):\n"
"        if not isinstance(value, int):\n"
"            raise ValueError(f'expecting integer in {self.name}')\n"
"        instance.__dict__[self.name] = value\n"
"\n"
"    # 这是新的初始化器：\n"
"    def __set_name__(self, owner, name):\n"
"        self.name = name\n"
"\n"
"class Model:\n"
"    int_field = IntField()"

#: ../../whatsnew/3.6.rst:396
msgid ":ref:`Feature documentation <descriptors>`"
msgstr ":ref:`特性文档 <descriptors>`"

#: ../../whatsnew/3.6.rst:402
msgid "PEP 519: Adding a file system path protocol"
msgstr "PEP 519: 添加文件系统路径协议"

#: ../../whatsnew/3.6.rst:404
msgid ""
"File system paths have historically been represented as :class:`str` or "
":class:`bytes` objects. This has led to people who write code which operate "
"on file system paths to assume that such objects are only one of those two "
"types (an :class:`int` representing a file descriptor does not count as that"
" is not a file path). Unfortunately that assumption prevents alternative "
"object representations of file system paths like :mod:`pathlib` from working"
" with pre-existing code, including Python's standard library."
msgstr ""
"文件系统路径历来被表示为 :class:`str` 或 :class:`bytes` 对象。 "
"这使得编写对文件系统路径进行操作的代码的人会假定这种对象只能是这两种类型之一（不考虑表示文件描述符的 :class:`int` 因为它不是文件路径）。 "
"不幸的是，这种假定阻止了像 :mod:`pathlib` 这样的文件系统路径的替代对象表示形式与包括 Python 标准库在内的现有代码协同工作。"

#: ../../whatsnew/3.6.rst:413
msgid ""
"To fix this situation, a new interface represented by :class:`os.PathLike` "
"has been defined. By implementing the :meth:`~os.PathLike.__fspath__` "
"method, an object signals that it represents a path. An object can then "
"provide a low-level representation of a file system path as a :class:`str` "
"or :class:`bytes` object. This means an object is considered :term:`path-"
"like <path-like object>` if it implements :class:`os.PathLike` or is a "
":class:`str` or :class:`bytes` object which represents a file system path. "
"Code can use :func:`os.fspath`, :func:`os.fsdecode`, or :func:`os.fsencode` "
"to explicitly get a :class:`str` and/or :class:`bytes` representation of a "
"path-like object."
msgstr ""
"为了修正这种情况，一个由 :class:`os.PathLike` 表示的新接口被定义出来。 通过实现 "
":meth:`~os.PathLike.__fspath__` 方法，对象可以表明它代表一个路径。 这样一个对象就能以 :class:`str` 或 "
":class:`bytes` 对象的形式提供文件系统路径的低层级表示。 这意味着如果一个对象实现了 :class:`os.PathLike` "
"或者是表示文件系统路径的 :class:`str` 或 :class:`bytes` 对象它就会被当作是 :term:`路径型对象 <path-like"
" object>`。 代码可以使用 :func:`os.fspath`、:func:`os.fsdecode` 或 "
":func:`os.fsencode` 来显式地获取一个路径型对象的 :class:`str` 和/或 :class:`bytes` 表示形式。"

#: ../../whatsnew/3.6.rst:426
msgid ""
"The built-in :func:`open` function has been updated to accept "
":class:`os.PathLike` objects, as have all relevant functions in the "
":mod:`os` and :mod:`os.path` modules, and most other functions and classes "
"in the standard library.  The :class:`os.DirEntry` class and relevant "
"classes in :mod:`pathlib` have also been updated to implement "
":class:`os.PathLike`."
msgstr ""
"内置 :func:`open` 函数已被更新为接受 :class:`os.PathLike` 对象，就像 :mod:`os` 和 "
":mod:`os.path` 模块中的所有相关函数和标准库中的大多数其他函数和类一样。 :class:`os.DirEntry` 类和 "
":mod:`pathlib` 中的相关类也已被更新以实现 :class:`os.PathLike`。"

#: ../../whatsnew/3.6.rst:433
msgid ""
"The hope is that updating the fundamental functions for operating on file "
"system paths will lead to third-party code to implicitly support all "
":term:`path-like objects <path-like object>` without any code changes, or at"
" least very minimal ones (e.g. calling :func:`os.fspath` at the beginning of"
" code before operating on a path-like object)."
msgstr ""
"希望对于针对文件系统路径操作的基本函数的更新将会使得第三方代码都能隐式地支持所有 :term:`路径型对象 <path-like object>` "
"而无须修改任何代码，或者至少只需极少的修改（例如当对路径型对象进行操作之前在代码的开头调用 :func:`os.fspath` 即可）。"

#: ../../whatsnew/3.6.rst:440
msgid ""
"Here are some examples of how the new interface allows for "
":class:`pathlib.Path` to be used more easily and transparently with pre-"
"existing code::"
msgstr "下面的这些示例说明了新的接口是如何让 :class:`pathlib.Path` 被更容易、更透明地用于已有代码的::"

#: ../../whatsnew/3.6.rst:444
msgid ""
">>> import pathlib\n"
">>> with open(pathlib.Path(\"README\")) as f:\n"
"...     contents = f.read()\n"
"...\n"
">>> import os.path\n"
">>> os.path.splitext(pathlib.Path(\"some_file.txt\"))\n"
"('some_file', '.txt')\n"
">>> os.path.join(\"/a/b\", pathlib.Path(\"c\"))\n"
"'/a/b/c'\n"
">>> import os\n"
">>> os.fspath(pathlib.Path(\"some_file.txt\"))\n"
"'some_file.txt'"
msgstr ""
">>> import pathlib\n"
">>> with open(pathlib.Path(\"README\")) as f:\n"
"...     contents = f.read()\n"
"...\n"
">>> import os.path\n"
">>> os.path.splitext(pathlib.Path(\"some_file.txt\"))\n"
"('some_file', '.txt')\n"
">>> os.path.join(\"/a/b\", pathlib.Path(\"c\"))\n"
"'/a/b/c'\n"
">>> import os\n"
">>> os.fspath(pathlib.Path(\"some_file.txt\"))\n"
"'some_file.txt'"

#: ../../whatsnew/3.6.rst:457
msgid ""
"(Implemented by Brett Cannon, Ethan Furman, Dusty Phillips, and Jelle "
"Zijlstra.)"
msgstr "（由 Brett Cannon, Ethan Furman, Dusty Phillips 和 Jelle Zijlstra 实现。）"

#: ../../whatsnew/3.6.rst:461
msgid ":pep:`519` -- Adding a file system path protocol"
msgstr ":pep:`519` -- 添加文件系统路径协议"

#: ../../whatsnew/3.6.rst:462
msgid "PEP written by Brett Cannon and Koos Zevenhoven."
msgstr "PEP 由 Brett Cannon 和 Koos Zevenhoven 撰写。"

#: ../../whatsnew/3.6.rst:468
msgid "PEP 495: Local Time Disambiguation"
msgstr "PEP 495: 消除本地时间的歧义"

#: ../../whatsnew/3.6.rst:470
msgid ""
"In most world locations, there have been and will be times when local clocks"
" are moved back.  In those times, intervals are introduced in which local "
"clocks show the same time twice in the same day. In these situations, the "
"information displayed on a local clock (or stored in a Python datetime "
"instance) is insufficient to identify a particular moment in time."
msgstr ""
"在世界上大多数地方，过去和将来都会存在本地时钟后移的时候。 在这种时候，本地时钟会在同一天内两次显示相同的时间。 "
"对于这些情况，本地时钟所显示的（或存储在 Python datetime 实例中的）信息将不足以标识某个特定的时间点。"

#: ../../whatsnew/3.6.rst:476
msgid ""
":pep:`495` adds the new *fold* attribute to instances of "
":class:`datetime.datetime` and :class:`datetime.time` classes to "
"differentiate between two moments in time for which local times are the "
"same::"
msgstr ""
":pep:`495` 为 :class:`datetime.datetime` 和 :class:`datetime.time` 类的实例添加了新的 "
"*fold* 属性以在本地时间相同的两个时间点之间进行区分::"

#: ../../whatsnew/3.6.rst:480
msgid ""
">>> u0 = datetime(2016, 11, 6, 4, tzinfo=timezone.utc)\n"
">>> for i in range(4):\n"
"...     u = u0 + i*HOUR\n"
"...     t = u.astimezone(Eastern)\n"
"...     print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)\n"
"...\n"
"04:00:00 UTC = 00:00:00 EDT 0\n"
"05:00:00 UTC = 01:00:00 EDT 0\n"
"06:00:00 UTC = 01:00:00 EST 1\n"
"07:00:00 UTC = 02:00:00 EST 0"
msgstr ""
">>> u0 = datetime(2016, 11, 6, 4, tzinfo=timezone.utc)\n"
">>> for i in range(4):\n"
"...     u = u0 + i*HOUR\n"
"...     t = u.astimezone(Eastern)\n"
"...     print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)\n"
"...\n"
"04:00:00 UTC = 00:00:00 EDT 0\n"
"05:00:00 UTC = 01:00:00 EDT 0\n"
"06:00:00 UTC = 01:00:00 EST 1\n"
"07:00:00 UTC = 02:00:00 EST 0"

#: ../../whatsnew/3.6.rst:491
msgid ""
"The values of the :attr:`fold <datetime.datetime.fold>` attribute have the "
"value ``0`` for all instances except those that represent the second "
"(chronologically) moment in time in an ambiguous case."
msgstr ""
":attr:`fold <datetime.datetime.fold>` 属性的值在大多数实例上均为 "
"``0``，只有在代表存在歧义的时间的第二个（按发生顺序）实例上例外。"

#: ../../whatsnew/3.6.rst:497
msgid ":pep:`495` -- Local Time Disambiguation"
msgstr ":pep:`495` -- 消除本地时间的歧义"

#: ../../whatsnew/3.6.rst:498
msgid ""
"PEP written by Alexander Belopolsky and Tim Peters, implementation by "
"Alexander Belopolsky."
msgstr "PEP 由 Alexander Belopolsky 和 Tim Peters 撰写，由 Alexander Belopolsky 实现。"

#: ../../whatsnew/3.6.rst:505
msgid "PEP 529: Change Windows filesystem encoding to UTF-8"
msgstr "PEP 529: 将 Windows 文件系统编码格式更改为 UTF-8"

#: ../../whatsnew/3.6.rst:507
msgid ""
"Representing filesystem paths is best performed with str (Unicode) rather "
"than bytes. However, there are some situations where using bytes is "
"sufficient and correct."
msgstr "在表示文件系统路径时最好是使用 str (Unicode) 而不是 bytes。 不过，在某些情况下使用 bytes 就是足够而且正确的。"

#: ../../whatsnew/3.6.rst:511
msgid ""
"Prior to Python 3.6, data loss could result when using bytes paths on "
"Windows. With this change, using bytes to represent paths is now supported "
"on Windows, provided those bytes are encoded with the encoding returned by "
":func:`sys.getfilesystemencoding`, which now defaults to ``'utf-8'``."
msgstr ""
"在 Python 3.6 之前，在 Windows 上使用字节串形式的路径可能会导致数据丢失。 通过这一更改，在 Windows "
"上现在已支持使用字节串来表示路径，前提是这些字节串使用 :func:`sys.getfilesystemencoding` "
"所返回的编码格式来编码，现在该值默认为 ``'utf-8'``。"

#: ../../whatsnew/3.6.rst:516
msgid ""
"Applications that do not use str to represent paths should use "
":func:`os.fsencode` and :func:`os.fsdecode` to ensure their bytes are "
"correctly encoded. To revert to the previous behaviour, set "
":envvar:`PYTHONLEGACYWINDOWSFSENCODING` or call "
":func:`sys._enablelegacywindowsfsencoding`."
msgstr ""
"不使用字符串来表示路径的应用程序应用使用 :func:`os.fsencode` 和 :func:`os.fsdecode` 来确保字节串被正确地编码。"
" 要恢复到之前版本的行为，请设置 :envvar:`PYTHONLEGACYWINDOWSFSENCODING` 或调用 "
":func:`sys._enablelegacywindowsfsencoding`。"

#: ../../whatsnew/3.6.rst:522
msgid ""
"See :pep:`529` for more information and discussion of code modifications "
"that may be required."
msgstr "有关详细信息和可能需要的代码修改的讨论，请参见 :pep:`529` 。"

#: ../../whatsnew/3.6.rst:529
msgid "PEP 528: Change Windows console encoding to UTF-8"
msgstr "PEP 528: 将 Windows 控制台编码格式更改为 UTF-8"

#: ../../whatsnew/3.6.rst:531
msgid ""
"The default console on Windows will now accept all Unicode characters and "
"provide correctly read str objects to Python code. ``sys.stdin``, "
"``sys.stdout`` and ``sys.stderr`` now default to utf-8 encoding."
msgstr ""
"现在，Windows 上的默认控制台将接受所有 Unicode 字符并为 Python 代码提供正确读取的 str 对象。``sys.stdin``, "
"``sys.stdout`` 和 ``sys.stderr`` 现在默认使用 utf-8 编码格式。"

#: ../../whatsnew/3.6.rst:535
msgid ""
"This change only applies when using an interactive console, and not when "
"redirecting files or pipes. To revert to the previous behaviour for "
"interactive console use, set :envvar:`PYTHONLEGACYWINDOWSSTDIO`."
msgstr ""
"此更改仅在使用交互式控制台时适用，而不适用于重定向文件或管道。 要恢复以前使用交互式控制台时的行为，请设置 "
":envvar:`PYTHONLEGACYWINDOWSSTDIO`。"

#: ../../whatsnew/3.6.rst:541
msgid ":pep:`528` -- Change Windows console encoding to UTF-8"
msgstr ":pep:`528` -- 将 Windows 控制台编码格式更改为 UTF-8"

#: ../../whatsnew/3.6.rst:542
msgid "PEP written and implemented by Steve Dower."
msgstr "PEP 由 Steve Dower 撰写并实现。"

#: ../../whatsnew/3.6.rst:548
msgid "PEP 520: Preserving Class Attribute Definition Order"
msgstr "PEP 520: 保留类属性定义顺序"

#: ../../whatsnew/3.6.rst:550
msgid ""
"Attributes in a class definition body have a natural ordering: the same "
"order in which the names appear in the source.  This order is now preserved "
"in the new class's :attr:`~type.__dict__` attribute."
msgstr ""
"类定义体中的属性具有自然的排序：与名称在源代码中出现的顺序相同。 现在此排序会保留在新类的 :attr:`~type.__dict__` 属性中。"

#: ../../whatsnew/3.6.rst:554
msgid ""
"Also, the effective default class *execution* namespace (returned from "
":ref:`type.__prepare__() <prepare>`) is now an insertion-order-preserving "
"mapping."
msgstr ""
"并且，实际的默认类 *execution* 命名空间 (从 :ref:`type.__prepare__() <prepare>` 返回) "
"现在将是一个保留插入顺序的映射对象。"

#: ../../whatsnew/3.6.rst:560
msgid ":pep:`520` -- Preserving Class Attribute Definition Order"
msgstr ":pep:`520` -- 保留类属性定义顺序"

#: ../../whatsnew/3.6.rst:561 ../../whatsnew/3.6.rst:575
msgid "PEP written and implemented by Eric Snow."
msgstr "PEP 由 Eric Snow 撰写并实现"

#: ../../whatsnew/3.6.rst:567
msgid "PEP 468: Preserving Keyword Argument Order"
msgstr "PEP 468: 保留关键字参数顺序"

#: ../../whatsnew/3.6.rst:569
msgid ""
"``**kwargs`` in a function signature is now guaranteed to be an insertion-"
"order-preserving mapping."
msgstr "函数签名中的 ``**kwargs`` 现在将保证是一个保留插入顺序的映射对象。"

#: ../../whatsnew/3.6.rst:574
msgid ":pep:`468` -- Preserving Keyword Argument Order"
msgstr ":pep:`468` -- 保留关键字参数顺序"

#: ../../whatsnew/3.6.rst:581
msgid "New :ref:`dict <typesmapping>` implementation"
msgstr "新的 :ref:`dict <typesmapping>` 实现"

#: ../../whatsnew/3.6.rst:583
msgid ""
"The :ref:`dict <typesmapping>` type now uses a \"compact\" representation "
"based on `a proposal by Raymond Hettinger "
"<https://mail.python.org/pipermail/python-dev/2012-December/123028.html>`_ "
"which was `first implemented by PyPy "
"<https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-"
"more.html>`_. The memory usage of the new :func:`dict` is between 20% and "
"25% smaller compared to Python 3.5."
msgstr ""
":ref:`dict <typesmapping>` 类型现在会使用一种基于 `Raymond Hettinger 的提议 "
"<https://mail.python.org/pipermail/python-dev/2012-December/123028.html>`_ "
"的“紧凑”表示形式，该表示形式 `最初由 PyPy 实现 <https://morepypy.blogspot.com/2015/01/faster-"
"more-memory-efficient-and-more.html>`_。 新的The memory usage of the new "
":func:`dict` 的内存占用相比 Python 3.5 减少了 20% 到 25%。"

#: ../../whatsnew/3.6.rst:591
msgid ""
"The order-preserving aspect of this new implementation is considered an "
"implementation detail and should not be relied upon (this may change in the "
"future, but it is desired to have this new dict implementation in the "
"language for a few releases before changing the language spec to mandate "
"order-preserving semantics for all current and future Python "
"implementations; this also helps preserve backwards-compatibility with older"
" versions of the language where random iteration order is still in effect, "
"e.g. Python 3.5)."
msgstr ""
"这个新实现对原始顺序的保留被认为是一个实现细节而不应当被依赖（这在将来可能会改变，但我们希望在改变语言规范以强制所有当前和将来的 Python "
"实现都使用保留顺序的语义之前先在几个发布版的语言内部使用这个新的 dict 实现；这也有助于让仍在使用随机迭代顺序的旧版本语言例如 Python 3.5"
" 保持向下兼容性）。"

#: ../../whatsnew/3.6.rst:600
msgid ""
"(Contributed by INADA Naoki in :issue:`27350`. Idea `originally suggested by"
" Raymond Hettinger <https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html>`_.)"
msgstr ""
"（由 INADA Naoki 在 :issue:`27350` 中贡献。 该特性 `最初由 Raymond Hettinger 提议 "
"<https://mail.python.org/pipermail/python-dev/2012-December/123028.html>`_。）"

#: ../../whatsnew/3.6.rst:608
msgid "PEP 523: Adding a frame evaluation API to CPython"
msgstr "PEP 523: 向 CPython 添加帧求值 API"

#: ../../whatsnew/3.6.rst:610
msgid ""
"While Python provides extensive support to customize how code executes, one "
"place it has not done so is in the evaluation of frame objects.  If you "
"wanted some way to intercept frame evaluation in Python there really wasn't "
"any way without directly manipulating function pointers for defined "
"functions."
msgstr ""
"虽然 Python 为自定义代码执行方式提供了广泛的支持，但有一个地方它没有这样做，那就是帧对象的求值。 如果您想在 Python "
"中拦截帧的求值，那么确实没有除了直接操纵自定义函数的函数指针以外的任何办法。"

#: ../../whatsnew/3.6.rst:616
msgid ""
":pep:`523` changes this by providing an API to make frame evaluation "
"pluggable at the C level. This will allow for tools such as debuggers and "
"JITs to intercept frame evaluation before the execution of Python code "
"begins. This enables the use of alternative evaluation implementations for "
"Python code, tracking frame evaluation, etc."
msgstr ""
":pep:`523` 通过提供使帧求值在 C 语言层级上可插入的 API 从而改变了这一状况。 这将允许调试器和 JIT 等工具在 Python "
"代码开始执行之前拦截帧求值。 这样就能允许 Python 代码使用替代性求值实现，跟踪帧求值等做法。"

#: ../../whatsnew/3.6.rst:623
msgid ""
"This API is not part of the limited C API and is marked as private to signal"
" that usage of this API is expected to be limited and only applicable to "
"very select, low-level use-cases. Semantics of the API will change with "
"Python as necessary."
msgstr ""
"这个 API 并不是受限 C API 的组成部分，它被标记为私有以表明该 API 的使用受到限制并且只适用于非常少的、低层级的用例。 这个 API "
"的语义将根据需要随 Python 的一起发生变化。"

#: ../../whatsnew/3.6.rst:630
msgid ":pep:`523` -- Adding a frame evaluation API to CPython"
msgstr ":pep:`523` -- 向 CPython 添加帧求值 API"

#: ../../whatsnew/3.6.rst:631
msgid "PEP written by Brett Cannon and Dino Viehland."
msgstr "PEP 由 Brett Cannon 和 Dino Viehland 撰写。"

#: ../../whatsnew/3.6.rst:637
msgid "PYTHONMALLOC environment variable"
msgstr "PYTHONMALLOC 环境变量"

#: ../../whatsnew/3.6.rst:639
msgid ""
"The new :envvar:`PYTHONMALLOC` environment variable allows setting the "
"Python memory allocators and installing debug hooks."
msgstr "新的 :envvar:`PYTHONMALLOC` 环境变量允许设置 Python 内存分配器并安装调试钩子。"

#: ../../whatsnew/3.6.rst:642
msgid ""
"It is now possible to install debug hooks on Python memory allocators on "
"Python compiled in release mode using ``PYTHONMALLOC=debug``. Effects of "
"debug hooks:"
msgstr ""
"现在将可以使用 ``PYTHONMALLOC=debug`` 在以发布模式编译的 Python 上为 Python 内存分配器安装调试钩子。 "
"调试钩子的效果:"

#: ../../whatsnew/3.6.rst:645
msgid "Newly allocated memory is filled with the byte ``0xCB``"
msgstr "新分配的内存中填充字节 ``0xCB``"

#: ../../whatsnew/3.6.rst:646
msgid "Freed memory is filled with the byte ``0xDB``"
msgstr "释放的内存中填充了字节 ``0xDB``"

#: ../../whatsnew/3.6.rst:647
msgid ""
"Detect violations of the Python memory allocator API. For example, "
":c:func:`PyObject_Free` called on a memory block allocated by "
":c:func:`PyMem_Malloc`."
msgstr ""
"检测违反 Python 内存分配器 API 的操作。 例如，:c:func:`PyObject_Free` 在 "
":c:func:`PyMem_Malloc` 所分配的内存块上被调用。"

#: ../../whatsnew/3.6.rst:650
msgid "Detect writes before the start of a buffer (buffer underflows)"
msgstr "在缓冲区开始之前检测写操作（缓冲区下溢）"

#: ../../whatsnew/3.6.rst:651
msgid "Detect writes after the end of a buffer (buffer overflows)"
msgstr "在缓冲区结束后检测写操作（缓冲区溢出）"

#: ../../whatsnew/3.6.rst:652
msgid ""
"Check that the :term:`GIL <global interpreter lock>` is held when allocator "
"functions of :c:macro:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) and"
" :c:macro:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are "
"called."
msgstr ""
"检测当调用 :c:macro:`PYMEM_DOMAIN_OBJ` (如: :c:func:`PyObject_Malloc`) 和 "
":c:macro:`PYMEM_DOMAIN_MEM` (如: :c:func:`PyMem_Malloc`) 域的分配器函数时是否持有 "
":term:`GIL <global interpreter lock>`。"

#: ../../whatsnew/3.6.rst:656
msgid "Checking if the GIL is held is also a new feature of Python 3.6."
msgstr "检查是否保留了 GIL 也是Python 3.6 的新特性。"

#: ../../whatsnew/3.6.rst:658
msgid ""
"See the :c:func:`PyMem_SetupDebugHooks` function for debug hooks on Python "
"memory allocators."
msgstr "请参阅 :c:func:`PyMem_SetupDebugHooks` 函数来了解 Python 内存分配器上的调试钩子。"

#: ../../whatsnew/3.6.rst:661
msgid ""
"It is now also possible to force the usage of the :c:func:`malloc` allocator"
" of the C library for all Python memory allocations using "
"``PYTHONMALLOC=malloc``. This is helpful when using external memory "
"debuggers like Valgrind on a Python compiled in release mode."
msgstr ""
"现在还可以使用 ``PYTHONMALLOC=malloc`` 为所有的 Python 内存分配强制使用 C 库的 :c:func:`malloc` "
"分配器。 这在以发布模式编译的 Python 上使用外部内存调试器如 Valgrind 时会很有用处。"

#: ../../whatsnew/3.6.rst:666
msgid ""
"On error, the debug hooks on Python memory allocators now use the "
":mod:`tracemalloc` module to get the traceback where a memory block was "
"allocated."
msgstr "发生错误时，Python 内存分配器上的调试钩子现在会使用 :mod:`tracemalloc` 模块来获取内存块被分配所在位置上的回溯。"

#: ../../whatsnew/3.6.rst:670
msgid ""
"Example of fatal error on buffer overflow using ``python3.6 -X "
"tracemalloc=5`` (store 5 frames in traces)::"
msgstr "使用 ``python3.6 -X tracemalloc=5`` (在回溯中存储 5 帧) 的缓冲区溢出的致命错误示例::"

#: ../../whatsnew/3.6.rst:673
msgid ""
"Debug memory block at address p=0x7fbcd41666f8: API 'o'\n"
"    4 bytes originally requested\n"
"    The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.\n"
"    The 8 pad bytes at tail=0x7fbcd41666fc are not all FORBIDDENBYTE (0xfb):\n"
"        at tail+0: 0x02 *** OUCH\n"
"        at tail+1: 0xfb\n"
"        at tail+2: 0xfb\n"
"        at tail+3: 0xfb\n"
"        at tail+4: 0xfb\n"
"        at tail+5: 0xfb\n"
"        at tail+6: 0xfb\n"
"        at tail+7: 0xfb\n"
"    The block was made by call #1233329 to debug malloc/realloc.\n"
"    Data at p: 1a 2b 30 00\n"
"\n"
"Memory block allocated at (most recent call first):\n"
"  File \"test/test_bytes.py\", line 323\n"
"  File \"unittest/case.py\", line 600\n"
"  File \"unittest/case.py\", line 648\n"
"  File \"unittest/suite.py\", line 122\n"
"  File \"unittest/suite.py\", line 84\n"
"\n"
"Fatal Python error: bad trailing pad byte\n"
"\n"
"Current thread 0x00007fbcdbd32700 (most recent call first):\n"
"  File \"test/test_bytes.py\", line 323 in test_hex\n"
"  File \"unittest/case.py\", line 600 in run\n"
"  File \"unittest/case.py\", line 648 in __call__\n"
"  File \"unittest/suite.py\", line 122 in run\n"
"  File \"unittest/suite.py\", line 84 in __call__\n"
"  File \"unittest/suite.py\", line 122 in run\n"
"  File \"unittest/suite.py\", line 84 in __call__\n"
"  ..."
msgstr ""
"Debug memory block at address p=0x7fbcd41666f8: API 'o'\n"
"    4 bytes originally requested\n"
"    The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.\n"
"    The 8 pad bytes at tail=0x7fbcd41666fc are not all FORBIDDENBYTE (0xfb):\n"
"        at tail+0: 0x02 *** OUCH\n"
"        at tail+1: 0xfb\n"
"        at tail+2: 0xfb\n"
"        at tail+3: 0xfb\n"
"        at tail+4: 0xfb\n"
"        at tail+5: 0xfb\n"
"        at tail+6: 0xfb\n"
"        at tail+7: 0xfb\n"
"    The block was made by call #1233329 to debug malloc/realloc.\n"
"    Data at p: 1a 2b 30 00\n"
"\n"
"Memory block allocated at (most recent call first):\n"
"  File \"test/test_bytes.py\", line 323\n"
"  File \"unittest/case.py\", line 600\n"
"  File \"unittest/case.py\", line 648\n"
"  File \"unittest/suite.py\", line 122\n"
"  File \"unittest/suite.py\", line 84\n"
"\n"
"Fatal Python error: bad trailing pad byte\n"
"\n"
"Current thread 0x00007fbcdbd32700 (most recent call first):\n"
"  File \"test/test_bytes.py\", line 323 in test_hex\n"
"  File \"unittest/case.py\", line 600 in run\n"
"  File \"unittest/case.py\", line 648 in __call__\n"
"  File \"unittest/suite.py\", line 122 in run\n"
"  File \"unittest/suite.py\", line 84 in __call__\n"
"  File \"unittest/suite.py\", line 122 in run\n"
"  File \"unittest/suite.py\", line 84 in __call__\n"
"  ..."

#: ../../whatsnew/3.6.rst:707
msgid "(Contributed by Victor Stinner in :issue:`26516` and :issue:`26564`.)"
msgstr "（由 Victor Stinner 在 :issue:`26516` 和 :issue:`26564` 中贡献。）"

#: ../../whatsnew/3.6.rst:713
msgid "DTrace and SystemTap probing support"
msgstr "DTrace 和 SystemTap 探测支持"

#: ../../whatsnew/3.6.rst:715
msgid ""
"Python can now be built ``--with-dtrace`` which enables static markers for "
"the following events in the interpreter:"
msgstr "Python 现在可以附带 ``--with-dtrace`` 来构建以便为解释器中的下列事件启用静态标记:"

#: ../../whatsnew/3.6.rst:718
msgid "function call/return"
msgstr "函数调用/返回"

#: ../../whatsnew/3.6.rst:720
msgid "garbage collection started/finished"
msgstr "垃圾收集开始/完成"

#: ../../whatsnew/3.6.rst:722
msgid "line of code executed."
msgstr "执行的代码行。"

#: ../../whatsnew/3.6.rst:724
msgid ""
"This can be used to instrument running interpreters in production, without "
"the need to recompile specific :ref:`debug builds <debug-build>` or "
"providing application-specific profiling/debugging code."
msgstr ""
"这可被用来在生产环境中控制正在运行的解释器，而无需重新编译特定的 :ref:`调试版本 <debug-build>` "
"或提供应用专属的性能分析/调试代码。"

#: ../../whatsnew/3.6.rst:728
msgid "More details in :ref:`instrumentation`."
msgstr "更多信息，请参见 :ref:`instrumentation` 。"

#: ../../whatsnew/3.6.rst:730
msgid ""
"The current implementation is tested on Linux and macOS.  Additional markers"
" may be added in the future."
msgstr "当前的实现已在 Linux 和 macOS 上进行了测试。将来可能会添加其他标记。"

#: ../../whatsnew/3.6.rst:733
msgid ""
"(Contributed by Łukasz Langa in :issue:`21590`, based on patches by Jesús "
"Cea Avión, David Malcolm, and Nikhil Benesch.)"
msgstr ""
"（由 Łukasz Langa 在 :issue:`21590` 中贡献，基于 Jesús Cea Avión, David Malcolm 和 "
"Nikhil Benesch 的补丁。）"

#: ../../whatsnew/3.6.rst:738
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.6.rst:740
msgid "Some smaller changes made to the core Python language are:"
msgstr "对Python 语言核心进行的小改动："

#: ../../whatsnew/3.6.rst:742
msgid ""
"A ``global`` or ``nonlocal`` statement must now textually appear before the "
"first use of the affected name in the same scope. Previously this was a "
":exc:`SyntaxWarning`."
msgstr ""
"现在 ``global`` 或 ``nonlocal`` 语句必须以文本形式出现在同一作用域中首次使用受影响的名称之前。 在之前版本中这只是 "
":exc:`SyntaxWarning`。"

#: ../../whatsnew/3.6.rst:746
msgid ""
"It is now possible to set a :ref:`special method <specialnames>` to ``None``"
" to indicate that the corresponding operation is not available. For example,"
" if a class sets :meth:`__iter__` to ``None``, the class is not iterable. "
"(Contributed by Andrew Barnert and Ivan Levkivskyi in :issue:`25958`.)"
msgstr ""
"现在可以将某个 :ref:`特殊方法 <specialnames>` 设为 ``None`` 来表示相应操作不可用。 举例来说，如果某个类将 "
":meth:`__iter__` 设为 ``None``，则该类就将不可迭代。 （由 Andrew Barnert 和 Ivan Levkivskyi "
"在 :issue:`25958` 中贡献。）"

#: ../../whatsnew/3.6.rst:752
msgid ""
"Long sequences of repeated traceback lines are now abbreviated as "
"``\"[Previous line repeated {count} more times]\"`` (see "
":ref:`whatsnew36-traceback` for an example). (Contributed by Emanuel Barry "
"in :issue:`26823`.)"
msgstr ""
"由重复的回溯行组成的长序列现在将被简化为 ``\"[Previous line repeated {count} more times]\"`` "
"（请参阅 :ref:`whatsnew36-traceback` 获取样例）。 （由 Emanuel Barry 在 :issue:`26823` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:757
msgid ""
"Import now raises the new exception :exc:`ModuleNotFoundError` (subclass of "
":exc:`ImportError`) when it cannot find a module.  Code that currently "
"checks for ImportError (in try-except) will still work. (Contributed by Eric"
" Snow in :issue:`15767`.)"
msgstr ""
"现在导入操作在无法找到模块时将引发新的异常 :exc:`ModuleNotFoundError` (:exc:`ImportError` 的子类)。 "
"目前 (在 try-except 中) 检测 ImportError 的代码仍将有效。 （由 Eric Snow 在 :issue:`15767` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:762
msgid ""
"Class methods relying on zero-argument ``super()`` will now work correctly "
"when called from metaclass methods during class creation. (Contributed by "
"Martin Teichmann in :issue:`23722`.)"
msgstr ""
"现在依赖于零参数形式 ``super()`` 的类方法在类创建期间从元类方法调用时将正确地生效。 （由 Martin Teichmann 在 "
":issue:`23722` 中贡献。）"

#: ../../whatsnew/3.6.rst:768
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.6.rst:773
msgid "secrets"
msgstr "secrets"

#: ../../whatsnew/3.6.rst:775
msgid ""
"The main purpose of the new :mod:`secrets` module is to provide an obvious "
"way to reliably generate cryptographically strong pseudo-random values "
"suitable for managing secrets, such as account authentication, tokens, and "
"similar."
msgstr ""
"新的 :mod:`secrets` 模块的主要目的是提供一种直观的方式来可靠地生成适用于密码管理的高加密强度的伪随机值，如账户验证、安全凭据等等。"

#: ../../whatsnew/3.6.rst:781
msgid ""
"Note that the pseudo-random generators in the :mod:`random` module should "
"*NOT* be used for security purposes.  Use :mod:`secrets` on Python 3.6+ and "
":func:`os.urandom` on Python 3.5 and earlier."
msgstr ""
"请注意 :mod:`random` 模块中的伪随机数发生器 *不应* 被用于安全目的。 请在 Python 3.6+ 上使用 "
":mod:`secrets` 而在 Python 3.5 及更早的版本上使用 :func:`os.urandom`。"

#: ../../whatsnew/3.6.rst:787
msgid ":pep:`506` -- Adding A Secrets Module To The Standard Library"
msgstr ":pep:`506` -- Secrets模块被加入Python标准库"

#: ../../whatsnew/3.6.rst:788
msgid "PEP written and implemented by Steven D'Aprano."
msgstr "PEP 由 Steven D'Aprano 撰写并实现。"

#: ../../whatsnew/3.6.rst:792
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.6.rst:795
msgid "array"
msgstr "array"

#: ../../whatsnew/3.6.rst:797
msgid ""
"Exhausted iterators of :class:`array.array` will now stay exhausted even if "
"the iterated array is extended.  This is consistent with the behavior of "
"other mutable sequences."
msgstr ""
"现在已被耗尽的输出 :class:`array.array` 的迭代器将保持耗尽状态，即使迭代后的数组被扩展时也是如此。  "
"这将与其他可变序列的行为保持一致。"

#: ../../whatsnew/3.6.rst:801
msgid "Contributed by Serhiy Storchaka in :issue:`26492`."
msgstr "由 Serhiy Storchaka 在 :issue:`26492` 中贡献。"

#: ../../whatsnew/3.6.rst:804
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.6.rst:806
msgid ""
"The new :class:`ast.Constant` AST node has been added.  It can be used by "
"external AST optimizers for the purposes of constant folding."
msgstr "新增了 :class:`ast.Constant` AST 节点。 它可被外部 AST 优化器用于常量折叠操作。"

#: ../../whatsnew/3.6.rst:809
msgid "Contributed by Victor Stinner in :issue:`26146`."
msgstr "由 Victor Stinner 在 :issue:`26146` 中贡献。"

#: ../../whatsnew/3.6.rst:813
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.6.rst:815
msgid ""
"Starting with Python 3.6 the ``asyncio`` module is no longer provisional and"
" its API is considered stable."
msgstr "从 Python 3.6 开始 ``asyncio`` 模块不再处于暂定状态，其 API 被认为已经稳定。"

#: ../../whatsnew/3.6.rst:818
msgid ""
"Notable changes in the :mod:`asyncio` module since Python 3.5.0 (all "
"backported to 3.5.x due to the provisional status):"
msgstr "自 Python 3.5.0 以来 :mod:`asyncio` 模块中值得注意的变化（由于暂定状态所有变化都已反向移植到 3.5.x）:"

#: ../../whatsnew/3.6.rst:821
msgid ""
"The :func:`~asyncio.get_event_loop` function has been changed to always "
"return the currently running loop when called from coroutines and callbacks."
" (Contributed by Yury Selivanov in :issue:`28613`.)"
msgstr ""
":func:`~asyncio.get_event_loop` 函数已更改为当在例程和回调中被调用时始终返回当前正在运行的循环。（由 Yury "
"Selivanov 在 :issue:`28613` 中贡献。）"

#: ../../whatsnew/3.6.rst:826
msgid ""
"The :func:`~asyncio.ensure_future` function and all functions that use it, "
"such as :meth:`loop.run_until_complete() <asyncio.loop.run_until_complete>`,"
" now accept all kinds of :term:`awaitable objects <awaitable>`. (Contributed"
" by Yury Selivanov.)"
msgstr ""
":func:`~asyncio.ensure_future` 函数以及所有用到它的函数，比如 "
":meth:`loop.run_until_complete() "
"<asyncio.loop.run_until_complete>`，现在将接受所有种类的 :term:`可等待对象 <awaitable>`。 （由 "
"Yury Selivanov 贡献。）"

#: ../../whatsnew/3.6.rst:831
msgid ""
"New :func:`~asyncio.run_coroutine_threadsafe` function to submit coroutines "
"to event loops from other threads. (Contributed by Vincent Michel.)"
msgstr ""
"新增 :func:`~asyncio.run_coroutine_threadsafe` 函数用于从其他线程向事件循环提交协程。（由 Vincent "
"Michel 贡献。）"

#: ../../whatsnew/3.6.rst:835
msgid ""
"New :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` method"
" to check if the transport is closing or closed. (Contributed by Yury "
"Selivanov.)"
msgstr ""
"新增 :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` "
"方法用于检查传输是否正在关闭或已经关闭。 （由 Yury Selivanov 贡献。）"

#: ../../whatsnew/3.6.rst:839
msgid ""
"The :meth:`loop.create_server() <asyncio.loop.create_server>` method can now"
" accept a list of hosts. (Contributed by Yann Sionneau.)"
msgstr ""
":meth:`loop.create_server() <asyncio.loop.create_server>` 方法现在可以接受一个主机列表。 （由"
" Yann Sionneau 贡献。）"

#: ../../whatsnew/3.6.rst:843
msgid ""
"New :meth:`loop.create_future() <asyncio.loop.create_future>` method to "
"create Future objects.  This allows alternative event loop implementations, "
"such as `uvloop <https://github.com/MagicStack/uvloop>`_, to provide a "
"faster :class:`asyncio.Future` implementation. (Contributed by Yury "
"Selivanov in :issue:`27041`.)"
msgstr ""
"新增 :meth:`loop.create_future() <asyncio.loop.create_future>` 方法用来创建 Future "
"对象。 这允许替代性的事件循环实现，比如 `uvloop "
"<https://github.com/MagicStack/uvloop>`_，以提供更快速的 :class:`asyncio.Future` 实现。"
" （由 Yury Selivanov 在 :issue:`27041` 中贡献。）"

#: ../../whatsnew/3.6.rst:850
msgid ""
"New :meth:`loop.get_exception_handler() "
"<asyncio.loop.get_exception_handler>` method to get the current exception "
"handler. (Contributed by Yury Selivanov in :issue:`27040`.)"
msgstr ""
"新增 :meth:`loop.get_exception_handler() <asyncio.loop.get_exception_handler>`"
" 方法用于获取当前异常处理器。 （由 Yury Selivanov 在 :issue:`27040` 中贡献。）"

#: ../../whatsnew/3.6.rst:854
msgid ""
"New :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` method"
" to read data from the stream until a separator bytes sequence appears. "
"(Contributed by Mark Korenberg.)"
msgstr ""
"新增 :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` "
"方法用于从流读取数据直到出现作为分隔符的字节序列。 （由 Mark Korenberg 贡献。）"

#: ../../whatsnew/3.6.rst:859
msgid ""
"The performance of :meth:`StreamReader.readexactly() "
"<asyncio.StreamReader.readexactly>` has been improved. (Contributed by Mark "
"Korenberg in :issue:`28370`.)"
msgstr ""
":meth:`StreamReader.readexactly() <asyncio.StreamReader.readexactly>` "
"的性能已获得提升。 （由 Mark Korenberg 在 :issue:`28370` 中贡献。）"

#: ../../whatsnew/3.6.rst:863
msgid ""
"The :meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>` method is "
"optimized to avoid calling the system ``getaddrinfo`` function if the "
"address is already resolved. (Contributed by A. Jesse Jiryu Davis.)"
msgstr ""
":meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>` 方法已获得优化已避免当地址已被解析时调用系统"
" ``getaddrinfo`` 函数。 （由 A. Jesse Jiryu Davis 贡献。）"

#: ../../whatsnew/3.6.rst:868
msgid ""
"The :meth:`loop.stop() <asyncio.loop.stop>` method has been changed to stop "
"the loop immediately after the current iteration.  Any new callbacks "
"scheduled as a result of the last iteration will be discarded. (Contributed "
"by Guido van Rossum in :issue:`25593`.)"
msgstr ""
":meth:`loop.stop() <asyncio.loop.stop>` 方法已被更改为在当前迭代之后立即停止循环。  "
"任何作为上次迭代的结果被加入计划任务的新回调都将被丢弃。 （由 Guido van Rossum 在 :issue:`25593` 中贡献。）"

#: ../../whatsnew/3.6.rst:874
msgid ""
":meth:`Future.set_exception <asyncio.futures.Future.set_exception>` will now"
" raise :exc:`TypeError` when passed an instance of the :exc:`StopIteration` "
"exception. (Contributed by Chris Angelico in :issue:`26221`.)"
msgstr ""
"现在 :meth:`Future.set_exception <asyncio.futures.Future.set_exception>` 在传入一个"
" :exc:`StopIteration` 异常的实例时将引发 :exc:`TypeError`。 （由 Chris Angelico 在 "
":issue:`26221` 中贡献。）"

#: ../../whatsnew/3.6.rst:879
msgid ""
"New :meth:`loop.connect_accepted_socket() "
"<asyncio.loop.connect_accepted_socket>` method to be used by servers that "
"accept connections outside of asyncio, but that use asyncio to handle them. "
"(Contributed by Jim Fulton in :issue:`27392`.)"
msgstr ""
"新增 :meth:`loop.connect_accepted_socket() "
"<asyncio.loop.connect_accepted_socket>` 方法供接受 asyncio 以外的连接，但使用 asyncio "
"来处理它们的服务器使用。 （由 Jim Fulton 在 :issue:`27392` 中贡献。）"

#: ../../whatsnew/3.6.rst:884
msgid ""
"``TCP_NODELAY`` flag is now set for all TCP transports by default. "
"(Contributed by Yury Selivanov in :issue:`27456`.)"
msgstr ""
"现在 ``TCP_NODELAY`` 旗标将默认针对所有 TCP 传输进行设置。 （由 Yury Selivanov 在 :issue:`27456` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:887
msgid ""
"New :meth:`loop.shutdown_asyncgens() <asyncio.loop.shutdown_asyncgens>` to "
"properly close pending asynchronous generators before closing the loop. "
"(Contributed by Yury Selivanov in :issue:`28003`.)"
msgstr ""
"新增 :meth:`loop.shutdown_asyncgens() <asyncio.loop.shutdown_asyncgens>` "
"用来在结束循环之前正确地关闭现有的异步生成器。 （由 Yury Selivanov 在 :issue:`28003` 中贡献。）"

#: ../../whatsnew/3.6.rst:892
msgid ""
":class:`Future <asyncio.Future>` and :class:`Task <asyncio.Task>` classes "
"now have an optimized C implementation which makes asyncio code up to 30% "
"faster. (Contributed by Yury Selivanov and INADA Naoki in :issue:`26081` and"
" :issue:`28544`.)"
msgstr ""
":class:`Future <asyncio.Future>` 和 :class:`Task <asyncio.Task>` 类现在已有经优化过的 C"
" 实现使得 asyncio 代码加速至多 30%。 （由 Yury Selivanov 和 INADA Naoki 在 :issue:`26081` 和"
" :issue:`28544` 中贡献。）"

#: ../../whatsnew/3.6.rst:900
msgid "binascii"
msgstr "binascii"

#: ../../whatsnew/3.6.rst:902
msgid ""
"The :func:`~binascii.b2a_base64` function now accepts an optional *newline* "
"keyword argument to control whether the newline character is appended to the"
" return value. (Contributed by Victor Stinner in :issue:`25357`.)"
msgstr ""
":func:`~binascii.b2a_base64` 函数现在接受可选的 *newline* 关键字参数用来控制是否要在返回值中添加换行符。 （由 "
"Victor Stinner 在 :issue:`25357` 中贡献。）"

#: ../../whatsnew/3.6.rst:909
msgid "cmath"
msgstr "cmath"

#: ../../whatsnew/3.6.rst:911
msgid ""
"The new :const:`cmath.tau` (*τ*) constant has been added. (Contributed by "
"Lisa Roach in :issue:`12345`, see :pep:`628` for details.)"
msgstr ""
"新增 :const:`cmath.tau` (*τ*) 常量。 （由 Lisa Roach 在 :issue:`12345` 中贡献，详情见 "
":pep:`628`。）"

#: ../../whatsnew/3.6.rst:914
msgid ""
"New constants: :const:`cmath.inf` and :const:`cmath.nan` to match "
":const:`math.inf` and :const:`math.nan`, and also :const:`cmath.infj` and "
":const:`cmath.nanj` to match the format used by complex repr. (Contributed "
"by Mark Dickinson in :issue:`23229`.)"
msgstr ""
"新增常量: :const:`cmath.inf` 和 :const:`cmath.nan` 用于匹配 :const:`math.inf` 和 "
":const:`math.nan`，以及 :const:`cmath.infj` 和 :const:`cmath.nanj` 用于匹配由 complex"
" 的 repr 所使用的格式。 （由 Mark Dickinson 在 :issue:`23229` 中贡献。）"

#: ../../whatsnew/3.6.rst:921
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.6.rst:923
msgid ""
"The new :class:`~collections.abc.Collection` abstract base class has been "
"added to represent sized iterable container classes. (Contributed by Ivan "
"Levkivskyi, docs by Neil Girdhar in :issue:`27598`.)"
msgstr ""
"添加了新的 :class:`~collections.abc.Collection` 抽象基类用于表示有具体大小的可迭代容器类。 （由 Ivan "
"Levkivskyi 在 :issue:`27598` 中贡献并由 Neil Girdhar 撰写文档。）"

#: ../../whatsnew/3.6.rst:927
msgid ""
"The new :class:`~collections.abc.Reversible` abstract base class represents "
"iterable classes that also provide the :meth:`__reversed__` method. "
"(Contributed by Ivan Levkivskyi in :issue:`25987`.)"
msgstr ""
"添加了新的 :class:`~collections.abc.Reversible` 抽象基类用于表示同时提供 :meth:`__reversed__`"
" 方法的可迭代类。 （由 Ivan Levkivskyi 在 :issue:`25987` 中贡献。）"

#: ../../whatsnew/3.6.rst:931
msgid ""
"The new :class:`~collections.abc.AsyncGenerator` abstract base class "
"represents asynchronous generators. (Contributed by Yury Selivanov in "
":issue:`28720`.)"
msgstr ""
"新增代表异步生成器的 :class:`~collections.abc.AsyncGenerator` 抽象基类。 （由 Yury Selivanov "
"在 :issue:`28720` 中贡献。）"

#: ../../whatsnew/3.6.rst:935
msgid ""
"The :func:`~collections.namedtuple` function now accepts an optional keyword"
" argument *module*, which, when specified, is used for the "
":attr:`~type.__module__` attribute of the returned named tuple class. "
"(Contributed by Raymond Hettinger in :issue:`17941`.)"
msgstr ""
"现在 :func:`~collections.namedtuple` 函数接受可选的关键字参数 "
"*module*，当指定该参数时，它将被用作所返回的具名元组类的 :attr:`~type.__module__` 属性。 （由 Raymond "
"Hettinger 在 :issue:`17941` 中贡献。）"

#: ../../whatsnew/3.6.rst:940 ../../whatsnew/3.6.rst:2295
msgid ""
"The *verbose* and *rename* arguments for :func:`~collections.namedtuple` are"
" now keyword-only. (Contributed by Raymond Hettinger in :issue:`25628`.)"
msgstr ""
":func:`~collections.namedtuple` 的 *verbose* 和 *rename* 参数现在是仅限关键字参数。 （由 "
"Raymond Hettinger 在 :issue:`25628` 中贡献。）"

#: ../../whatsnew/3.6.rst:944
msgid ""
"Recursive :class:`collections.deque` instances can now be pickled. "
"(Contributed by Serhiy Storchaka in :issue:`26482`.)"
msgstr ""
"递归的 :class:`collections.deque` 实例现在可以被 pickle。 （由 Serhiy Storchaka 在 "
":issue:`26482` 中贡献。）"

#: ../../whatsnew/3.6.rst:949
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.6.rst:951
msgid ""
"The :class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` "
"class constructor now accepts an optional *thread_name_prefix* argument to "
"make it possible to customize the names of the threads created by the pool. "
"(Contributed by Gregory P. Smith in :issue:`27664`.)"
msgstr ""
":class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` "
"类构造器现在接受可选的 *thread_name_prefix* 参数以便能够自定义由线程池所创建的线程的名称。 （由 Gregory P. Smith"
" 在 :issue:`27664` 中贡献。）"

#: ../../whatsnew/3.6.rst:959
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.6.rst:961
msgid ""
"The :class:`contextlib.AbstractContextManager` class has been added to "
"provide an abstract base class for context managers.  It provides a sensible"
" default implementation for ``__enter__()`` which returns ``self`` and "
"leaves ``__exit__()`` an abstract method.  A matching class has been added "
"to the :mod:`typing` module as :class:`typing.ContextManager`. (Contributed "
"by Brett Cannon in :issue:`25609`.)"
msgstr ""
"增加了 :class:`contextlib.AbstractContextManager` 类用来提供上下文管理器的抽象基类。 它为 "
"``__enter__()`` 提供了一个合理的默认实现，该实现将返回 ``self`` 并将 ``__exit__()`` 设为抽象方法。 在 "
":mod:`typing` 中增加了对应的类 :class:`typing.ContextManager`。 （由 Brett Cannon 在 "
":issue:`25609` 中贡献。）"

#: ../../whatsnew/3.6.rst:971
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.6.rst:973
msgid ""
"The :class:`~datetime.datetime` and :class:`~datetime.time` classes have the"
" new :attr:`~time.fold` attribute used to disambiguate local time when "
"necessary.  Many functions in the :mod:`datetime` have been updated to "
"support local time disambiguation. See :ref:`Local Time Disambiguation "
"<whatsnew36-pep495>` section for more information. (Contributed by Alexander"
" Belopolsky in :issue:`24773`.)"
msgstr ""
":class:`~datetime.datetime` 和 :class:`~datetime.time` 类新增了 "
":attr:`~time.fold` 属性用来在必要时消除本地时间的歧义。 在 :mod:`datetime` "
"中的许多函数已被更新为支持本地时间的消除歧义。 请参阅 :ref:`本地时间消歧义 <whatsnew36-pep495>` 一节了解更多信息。 （由 "
"Alexander Belopolsky 在 :issue:`24773` 中贡献。）"

#: ../../whatsnew/3.6.rst:981
msgid ""
"The :meth:`datetime.strftime() <datetime.datetime.strftime>` and "
":meth:`date.strftime() <datetime.date.strftime>` methods now support ISO "
"8601 date directives ``%G``, ``%u`` and ``%V``. (Contributed by Ashley "
"Anderson in :issue:`12006`.)"
msgstr ""
"现在 :meth:`datetime.strftime() <datetime.datetime.strftime>` 和 "
":meth:`date.strftime() <datetime.date.strftime>` 方法将支持 ISO 8601 日期指令符 "
"``%G``, ``%u`` 和 ``%V``。 （由 Ashley Anderson 在 :issue:`12006` 中贡献。）.)"

#: ../../whatsnew/3.6.rst:986
msgid ""
"The :func:`datetime.isoformat() <datetime.datetime.isoformat>` function now "
"accepts an optional *timespec* argument that specifies the number of "
"additional components of the time value to include. (Contributed by "
"Alessandro Cucci and Alexander Belopolsky in :issue:`19475`.)"
msgstr ""
":func:`datetime.isoformat() <datetime.datetime.isoformat>` 函数现在接受可选的 "
"*timespec* 参数用来指定时间值要包括的额外组件数量。 （由 Alessandro Cucci 和 Alexander Belopolsky 在"
" :issue:`19475` 中贡献。）"

#: ../../whatsnew/3.6.rst:991
msgid ""
"The :meth:`datetime.combine() <datetime.datetime.combine>` now accepts an "
"optional *tzinfo* argument. (Contributed by Alexander Belopolsky in "
":issue:`27661`.)"
msgstr ""
":meth:`datetime.combine() <datetime.datetime.combine>` 现在接受可选的 *tzinfo* 参数。 "
"（由 Alexander Belopolsky 在 :issue:`27661` 中贡献。）"

#: ../../whatsnew/3.6.rst:997
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.6.rst:999
msgid ""
"New :meth:`Decimal.as_integer_ratio() <decimal.Decimal.as_integer_ratio>` "
"method that returns a pair ``(n, d)`` of integers that represent the given "
":class:`~decimal.Decimal` instance as a fraction, in lowest terms and with a"
" positive denominator::"
msgstr ""
"新增 :meth:`Decimal.as_integer_ratio() <decimal.Decimal.as_integer_ratio>` "
"方法，它返回一对整数 ``(n, d)`` 将给定的 :class:`~decimal.Decimal` 实例表示为一个最简形式且分母为正值的分数::"

#: ../../whatsnew/3.6.rst:1004
msgid ""
">>> Decimal('-3.14').as_integer_ratio()\n"
"(-157, 50)"
msgstr ""
">>> Decimal('-3.14').as_integer_ratio()\n"
"(-157, 50)"

#: ../../whatsnew/3.6.rst:1007
msgid "(Contributed by Stefan Krah amd Mark Dickinson in :issue:`25928`.)"
msgstr "（由 Stefan Krah 和 Mark Dickinson  在 :issue:`25928` 中贡献。）"

#: ../../whatsnew/3.6.rst:1012 ../../whatsnew/3.6.rst:1990
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.6.rst:1014
msgid ""
"The ``default_format`` attribute has been removed from "
"``distutils.command.sdist.sdist`` and the ``formats`` attribute defaults to "
"``['gztar']``. Although not anticipated, any code relying on the presence of"
" ``default_format`` may need to be adapted. See :issue:`27819` for more "
"details."
msgstr ""
"``distutils.command.sdist.sdist`` 的 ``default_format`` 属性已被移除且 ``formats`` "
"属性默认为 ``['gztar']``。 虽然不作要求，但任何依赖于 ``default_format`` 的存在的代码都可能需要修改。 请参阅 "
":issue:`27819` 了解更多细节。"

#: ../../whatsnew/3.6.rst:1022
msgid "email"
msgstr "email"

#: ../../whatsnew/3.6.rst:1024
msgid ""
"The new email API, enabled via the *policy* keyword to various constructors,"
" is no longer provisional.  The :mod:`email` documentation has been "
"reorganized and rewritten to focus on the new API, while retaining the old "
"documentation for the legacy API.  (Contributed by R. David Murray in "
":issue:`24277`.)"
msgstr ""
"通过多个构造器的 *policy* 关键字来启用的新 email API 已不再为暂定状态。 :mod:`email` "
"文档已被重新组织并重新撰写以聚集新 API，同时保留旧式 API 的原有文档。 （由 R. David Murray 在 :issue:`24277` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:1029
msgid ""
"The :mod:`email.mime` classes now all accept an optional *policy* keyword. "
"(Contributed by Berker Peksag in :issue:`27331`.)"
msgstr ""
":mod:`email.mime` 中的类现在都接受可选的 *policy* 关键字参数。 （由 Berker Peksag 在 "
":issue:`27331` 中贡献。）.)"

#: ../../whatsnew/3.6.rst:1032
msgid ""
"The :class:`~email.generator.DecodedGenerator` now supports the *policy* "
"keyword."
msgstr ":class:`~email.generator.DecodedGenerator` 现在支持 *policy* 关键字。"

#: ../../whatsnew/3.6.rst:1035
msgid ""
"There is a new :mod:`~email.policy` attribute, "
":attr:`~email.policy.Policy.message_factory`, that controls what class is "
"used by default when the parser creates new message objects.  For the "
":attr:`email.policy.compat32` policy this is "
":class:`~email.message.Message`, for the new policies it is "
":class:`~email.message.EmailMessage`. (Contributed by R. David Murray in "
":issue:`20476`.)"
msgstr ""
"新增 :mod:`~email.policy` 属性，:attr:`~email.policy.Policy.message_factory` "
"控制当解析器新建消息对象时默认要使用的类。 对于 :attr:`email.policy.compat32` 策略来说将为 "
":class:`~email.message.Message`，对于新策略来说将为 "
":class:`~email.message.EmailMessage`。 （由 R. David Murray 在 :issue:`20476` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:1044
msgid "encodings"
msgstr "encodings"

#: ../../whatsnew/3.6.rst:1046
msgid ""
"On Windows, added the ``'oem'`` encoding to use ``CP_OEMCP``, and the "
"``'ansi'`` alias for the existing ``'mbcs'`` encoding, which uses the "
"``CP_ACP`` code page. (Contributed by Steve Dower in :issue:`27959`.)"
msgstr ""
"在 Windows 上，增加了 ``'oem'`` 编码格式用于 ``CP_OEMCP``，以及 ``'ansi'`` 别名用于现有的 "
"``'mbcs'`` 编码格式，它使用 ``CP_ACP`` 代码页。 （由 Steve Dower 在 :issue:`27959` 中贡献。）"

#: ../../whatsnew/3.6.rst:1052
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.6.rst:1054
msgid ""
"Two new enumeration base classes have been added to the :mod:`enum` module: "
":class:`~enum.Flag` and :class:`~enum.IntFlags`.  Both are used to define "
"constants that can be combined using the bitwise operators. (Contributed by "
"Ethan Furman in :issue:`23591`.)"
msgstr ""
"在 :mod:`enum` 模块中新增了两个枚举基类: :class:`~enum.Flag` 和 :class:`~enum.IntFlags`。 "
"两者均被用于定义可使用按位运算符进行组合的常量。 （由 Ethan Furman 在 :issue:`23591` 中贡献。）"

#: ../../whatsnew/3.6.rst:1059
msgid ""
"Many standard library modules have been updated to use the "
":class:`~enum.IntFlags` class for their constants."
msgstr "许多标准库模块已被更新以使用 :class:`~enum.IntFlags` 类作为其常量。"

#: ../../whatsnew/3.6.rst:1062
msgid ""
"The new :class:`enum.auto` value can be used to assign values to enum "
"members automatically::"
msgstr "新增的 :class:`enum.auto` 值可被用于自动为枚举成员赋值::"

#: ../../whatsnew/3.6.rst:1065
msgid ""
">>> from enum import Enum, auto\n"
">>> class Color(Enum):\n"
"...     red = auto()\n"
"...     blue = auto()\n"
"...     green = auto()\n"
"...\n"
">>> list(Color)\n"
"[<Color.red: 1>, <Color.blue: 2>, <Color.green: 3>]"
msgstr ""
">>> from enum import Enum, auto\n"
">>> class Color(Enum):\n"
"...     red = auto()\n"
"...     blue = auto()\n"
"...     green = auto()\n"
"...\n"
">>> list(Color)\n"
"[<Color.red: 1>, <Color.blue: 2>, <Color.green: 3>]"

#: ../../whatsnew/3.6.rst:1076
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.6.rst:1078
msgid ""
"On Windows, the :mod:`faulthandler` module now installs a handler for "
"Windows exceptions: see :func:`faulthandler.enable`. (Contributed by Victor "
"Stinner in :issue:`23848`.)"
msgstr ""
"在 Windows 上，:mod:`faulthandler` 模块现在会为 Windows 异常安装处理器：参见 "
":func:`faulthandler.enable`。 （由 Victor Stinner 在 :issue:`23848` 中贡献。）"

#: ../../whatsnew/3.6.rst:1084
msgid "fileinput"
msgstr "fileinput"

#: ../../whatsnew/3.6.rst:1086
msgid ""
":func:`~fileinput.hook_encoded` now supports the *errors* argument. "
"(Contributed by Joseph Hackman in :issue:`25788`.)"
msgstr ""
":func:`~fileinput.hook_encoded` 现在支持 *errors* 参数。 （由 Joseph Hackman 在 "
":issue:`25788` 中贡献。）"

#: ../../whatsnew/3.6.rst:1091
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.6.rst:1093
msgid ""
":mod:`hashlib` supports OpenSSL 1.1.0.  The minimum recommend version is "
"1.0.2. (Contributed by Christian Heimes in :issue:`26470`.)"
msgstr ""
":mod:`hashlib` 已支持 OpenSSL 1.1.0。 最低的建议版本为 1.0.2。 （由 Christian Heimes 在 "
":issue:`26470` 中贡献。）"

#: ../../whatsnew/3.6.rst:1096
msgid ""
"BLAKE2 hash functions were added to the module. :func:`~hashlib.blake2b` and"
" :func:`~hashlib.blake2s` are always available and support the full feature "
"set of BLAKE2. (Contributed by Christian Heimes in :issue:`26798` based on "
"code by Dmitry Chestnykh and Samuel Neves. Documentation written by Dmitry "
"Chestnykh.)"
msgstr ""
"本模块增加了 BLAKE2 哈希函数。 :func:`~hashlib.blake2b` 和 :func:`~hashlib.blake2s` "
"将始终可用并支持 BLAKE2 的完整特性集。 （由 Christian Heimes 在 :issue:`26798` 中基于 Dmitry "
"Chestnykh 和 Samuel Neves 的代码贡献。 文档由 Dmitry Chestnykh 撰写。）"

#: ../../whatsnew/3.6.rst:1102
msgid ""
"The SHA-3 hash functions :func:`~hashlib.sha3_224`, "
":func:`~hashlib.sha3_256`, :func:`~hashlib.sha3_384`, "
":func:`~hashlib.sha3_512`, and SHAKE hash functions "
":func:`~hashlib.shake_128` and :func:`~hashlib.shake_256` were added. "
"(Contributed by Christian Heimes in :issue:`16113`. Keccak Code Package by "
"Guido Bertoni, Joan Daemen, Michaël Peeters, Gilles Van Assche, and Ronny "
"Van Keer.)"
msgstr ""
"增加了 SHA-3 哈希函数 :func:`~hashlib.sha3_224`, :func:`~hashlib.sha3_256`, "
":func:`~hashlib.sha3_384`, :func:`~hashlib.sha3_512`，以及 SHAKE 哈希函数 "
":func:`~hashlib.shake_128` 和 :func:`~hashlib.shake_256`。 （由 Christian Heimes"
" 在 :issue:`16113` 中贡献。 Keccak 代码包由 Guido Bertoni, Joan Daemen, Michaël "
"Peeters, Gilles Van Assche 和 Ronny Van Keer 编写。）"

#: ../../whatsnew/3.6.rst:1109
msgid ""
"The password-based key derivation function :func:`~hashlib.scrypt` is now "
"available with OpenSSL 1.1.0 and newer. (Contributed by Christian Heimes in "
":issue:`27928`.)"
msgstr ""
"基于密码的密钥推导函数 :func:`~hashlib.scrypt` 现可用于 OpenSSL 1.1.0 及更新版本。 （由 Christian "
"Heimes 在 :issue:`27928` 中贡献。）"

#: ../../whatsnew/3.6.rst:1114
msgid "http.client"
msgstr "http.client"

#: ../../whatsnew/3.6.rst:1116
msgid ""
":meth:`HTTPConnection.request() <http.client.HTTPConnection.request>` and "
":meth:`~http.client.HTTPConnection.endheaders` both now support chunked "
"encoding request bodies. (Contributed by Demian Brecht and Rolf Krahl in "
":issue:`12319`.)"
msgstr ""
":meth:`HTTPConnection.request() <http.client.HTTPConnection.request>` 和 "
":meth:`~http.client.HTTPConnection.endheaders` 现在都支持分块编码格式请求体。 （由 Demian "
"Brecht 和 Rolf Krahl 在 :issue:`12319` 中贡献。）"

#: ../../whatsnew/3.6.rst:1123
msgid "idlelib and IDLE"
msgstr "idlelib 与 IDLE"

#: ../../whatsnew/3.6.rst:1125
msgid ""
"The idlelib package is being modernized and refactored to make IDLE look and"
" work better and to make the code easier to understand, test, and improve. "
"Part of making IDLE look better, especially on Linux and Mac, is using ttk "
"widgets, mostly in the dialogs.  As a result, IDLE no longer runs with "
"tcl/tk 8.4.  It now requires tcl/tk 8.5 or 8.6.  We recommend running the "
"latest release of either."
msgstr ""
"对 idlelib 包执行现代化和重构以使 IDLE 的外观和功能更好并使代码更易于理解、测试和改进。 让 IDLE 外观更好的部分工作，尤其是在 "
"Linux 和 Mac 上，在于使用了 ttk 部件，主要是在对话框中。 因此，IDLE 不再使用 tcl/tk 8.4。 现在它需要 tcl/tk "
"8.5 或 8.6。 我们建议运行这两个软件的最新发布版。"

#: ../../whatsnew/3.6.rst:1132
msgid ""
"'Modernizing' includes renaming and consolidation of idlelib modules. The "
"renaming of files with partial uppercase names is similar to the renaming "
"of, for instance, Tkinter and TkFont to tkinter and tkinter.font in 3.0.  As"
" a result, imports of idlelib files that worked in 3.5 will usually not work"
" in 3.6.  At least a module name change will be needed (see "
"idlelib/README.txt), sometimes more.  (Name changes contributed by Al "
"Swiegart and Terry Reedy in :issue:`24225`.  Most idlelib patches since have"
" been and will be part of the process.)"
msgstr ""
"‘现代化’包括 idlelib 模块的重命名与合并。 对具有部分大写名称的文件的重命名类似于 3.0 中将 Tkinter 和 TkFont 重命名为 "
"tkinter 和 tkinter.font。 因此，在 3.5 中可用的 idlelib 文件导入在 3.6 中通常将不再可用。 "
"至少需要修改模块名称（参见 idlelib/README.txt），有时还需要更多修改。 （名称更改由 Al Swiegart 和 Terry "
"Reedy 在 :issue:`24225` 中贡献。 大多数 idlelib 补丁都是已经是或即将纳入该处理过程。）"

#: ../../whatsnew/3.6.rst:1141
msgid ""
"In compensation, the eventual result with be that some idlelib classes will "
"be easier to use, with better APIs and docstrings explaining them.  "
"Additional useful information will be added to idlelib when available."
msgstr ""
"作为补偿，最终的结果是一些 idlelib 类将更会易于使用，并有更好的 API 和文档字符串加以说明。 附加的有用信息准备好后将被添加到 "
"idlelib 中。"

#: ../../whatsnew/3.6.rst:1145
msgid "New in 3.6.2:"
msgstr "在 3.6.2 中新增:"

#: ../../whatsnew/3.6.rst:1147
msgid ""
"Multiple fixes for autocompletion. (Contributed by Louie Lu in "
":issue:`15786`.)"
msgstr "多个对自动补全的修正。 （由 Louie Lu 在 :issue:`15786` 中贡献。）"

#: ../../whatsnew/3.6.rst:1149
msgid "New in 3.6.3:"
msgstr "在 3.6.3 中新增:"

#: ../../whatsnew/3.6.rst:1151
msgid ""
"Module Browser (on the File menu, formerly called Class Browser), now "
"displays nested functions and classes in addition to top-level functions and"
" classes. (Contributed by Guilherme Polo, Cheryl Sabella, and Terry Jan "
"Reedy in :issue:`1612262`.)"
msgstr ""
"Module Browser (在 File 菜单中，之前称为 Class Browser) 现在会在最高层级函数和类之外显示嵌套的函数和类。 （由 "
"Guilherme Polo, Cheryl Sabella 和 Terry Jan Reedy 在 :issue:`1612262` 中贡献。）"

#: ../../whatsnew/3.6.rst:1157
msgid ""
"The IDLE features formerly implemented as extensions have been reimplemented"
" as normal features.  Their settings have been moved from the Extensions tab"
" to other dialog tabs. (Contributed by Charles Wohlganger and Terry Jan "
"Reedy in :issue:`27099`.)"
msgstr ""
"之前以扩展形式实现的 IDLE 特性已作为正常特性重新实现。 它们的设置已从 Extensions 选项卡移至其他对话框选项卡。 （由 Charles "
"Wohlganger 和 Terry Jan Reedy 在 :issue:`27099` 中实现。）"

#: ../../whatsnew/3.6.rst:1162
msgid ""
"The Settings dialog (Options, Configure IDLE) has been partly rewritten to "
"improve both appearance and function. (Contributed by Cheryl Sabella and "
"Terry Jan Reedy in multiple issues.)"
msgstr ""
"Settings 对话框 (Options 中的 Configure IDLE) 已经被部分重写以改进外观和功能。 （由 Cheryl Sabella "
"和 Terry Jan Reedy 在多个问题项中贡献。）"

#: ../../whatsnew/3.6.rst:1166
msgid "New in 3.6.4:"
msgstr "在 3.6.4 中新增:"

#: ../../whatsnew/3.6.rst:1168
msgid ""
"The font sample now includes a selection of non-Latin characters so that "
"users can better see the effect of selecting a particular font. (Contributed"
" by Terry Jan Reedy in :issue:`13802`.) The sample can be edited to include "
"other characters. (Contributed by Serhiy Storchaka in :issue:`31860`.)"
msgstr ""
"字体样本现在包括一组非拉丁字符以便用户能更好地查看所选特定字体的效果。 （由 Terry Jan Reedy 在 :issue:`13802` "
"中贡献。） 样本可以被修改以包括其他字符。 （由 Serhiy Storchaka 在 :issue:`31860` 中贡献。）"

#: ../../whatsnew/3.6.rst:1174
msgid "New in 3.6.6:"
msgstr "在 3.6.6 中新增:"

#: ../../whatsnew/3.6.rst:1176
msgid ""
"Editor code context option revised.  Box displays all context lines up to "
"maxlines.  Clicking on a context line jumps the editor to that line.  "
"Context colors for custom themes is added to Highlights tab of Settings "
"dialog. (Contributed by Cheryl Sabella and Terry Jan Reedy in "
":issue:`33642`, :issue:`33768`, and :issue:`33679`.)"
msgstr ""
"编辑器代码上下文选项已经过修改。 Box 会显示所有上下文行直到最大行数。 点击一个上下文行会使编辑器跳转到该行。 自定义主题的上下文颜色已添加到 "
"Settings 对话框的 Highlights 选项卡。 （由 Cheryl Sabella 和 Terry Jan Reedy 在 "
":issue:`33642`, :issue:`33768` 和 :issue:`33679` 中贡献。）"

#: ../../whatsnew/3.6.rst:1182
msgid ""
"On Windows, a new API call tells Windows that tk scales for DPI. On Windows "
"8.1+ or 10, with DPI compatibility properties of the Python binary "
"unchanged, and a monitor resolution greater than 96 DPI, this should make "
"text and lines sharper.  It should otherwise have no effect. (Contributed by"
" Terry Jan Reedy in :issue:`33656`.)"
msgstr ""
"在 Windows 上，会有新的 API 调用将 tk 对 DPI 的调整告知 Windows。 在 Windows 8.1+ 或 10 上，如果 "
"Python 二进制码的 DPI 兼容属性未改变，并且监视器分辨率大于 96 DPI，这应该会令文本和线条更清晰。 否则的话它应该不造成影响。 （由 "
"Terry Jan Reedy 在 :issue:`33656` 中贡献。）"

#: ../../whatsnew/3.6.rst:1188
msgid "New in 3.6.7:"
msgstr "在 3.6.7 中新增:"

#: ../../whatsnew/3.6.rst:1190
msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can be "
"changed in the PyShell section of the General page of the Settings dialog.  "
"Fewer, but possibly extra long, lines can be squeezed by right clicking on "
"the output.  Squeezed output can be expanded in place by double-clicking the"
" button or into the clipboard or a separate window by right-clicking the "
"button.  (Contributed by Tal Einat in :issue:`1529353`.)"
msgstr ""
"超过 N 行（默认值为 50）的输出将被折叠为一个按钮。 N 可以在 Settings 对话框的 General 页的 PyShell 部分中进行修改。"
" 数量较少但是超长的行可以通过在输出上右击来折叠。 被折叠的输出可通过双击按钮来展开，或是通过右击按钮来放入剪贴板或是单独的窗口。 （由 Tal "
"Einat 在 :issue:`1529353` 中贡献。）"

#: ../../whatsnew/3.6.rst:1199 ../../whatsnew/3.6.rst:2007
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.6.rst:1201
msgid ""
"Import now raises the new exception :exc:`ModuleNotFoundError` (subclass of "
":exc:`ImportError`) when it cannot find a module.  Code that current checks "
"for ``ImportError`` (in try-except) will still work. (Contributed by Eric "
"Snow in :issue:`15767`.)"
msgstr ""
"现在导入操作在无法找到模块时将引发新的异常 :exc:`ModuleNotFoundError` (:exc:`ImportError` 的子类)。 "
"目前 (在 try-except 中) 检测 ``ImportError`` 的代码仍将有效。 （由 Eric Snow 在 "
":issue:`15767` 中贡献。）"

#: ../../whatsnew/3.6.rst:1206
msgid ""
":class:`importlib.util.LazyLoader` now calls "
":meth:`~importlib.abc.Loader.create_module` on the wrapped loader, removing "
"the restriction that :class:`importlib.machinery.BuiltinImporter` and "
":class:`importlib.machinery.ExtensionFileLoader` couldn't be used with "
":class:`importlib.util.LazyLoader`."
msgstr ""
":class:`importlib.util.LazyLoader` 现在将调用被包装的加载器上的 "
":meth:`~importlib.abc.Loader.create_module`，移除了 "
":class:`importlib.machinery.BuiltinImporter` 和 "
":class:`importlib.machinery.ExtensionFileLoader` 不能用于 "
":class:`importlib.util.LazyLoader` 的限制。"

#: ../../whatsnew/3.6.rst:1212
msgid ""
":func:`importlib.util.cache_from_source`, "
":func:`importlib.util.source_from_cache`, and "
":func:`importlib.util.spec_from_file_location` now accept a :term:`path-like"
" object`."
msgstr ""
":func:`importlib.util.cache_from_source`, "
":func:`importlib.util.source_from_cache` 和 "
":func:`importlib.util.spec_from_file_location` 现在将接受 :term:`path-like "
"object`。"

#: ../../whatsnew/3.6.rst:1219
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.6.rst:1221
msgid ""
"The :func:`inspect.signature() <inspect.signature>` function now reports the"
" implicit ``.0`` parameters generated by the compiler for comprehension and "
"generator expression scopes as if they were positional-only parameters "
"called ``implicit0``. (Contributed by Jelle Zijlstra in :issue:`19611`.)"
msgstr ""
":func:`inspect.signature() <inspect.signature>` "
"函数现在会报告编译器为推导式和生成器表达式作用域生成的隐式 ``.0`` 形参，就像它们是调用 ``implicit0`` 时的仅限位置形参一样。 （由"
" Jelle Zijlstra 在 :issue:`19611` 中贡献。）"

#: ../../whatsnew/3.6.rst:1226
msgid ""
"To reduce code churn when upgrading from Python 2.7 and the legacy "
":func:`inspect.getargspec` API, the previously documented deprecation of "
":func:`inspect.getfullargspec` has been reversed. While this function is "
"convenient for single/source Python 2/3 code bases, the richer "
":func:`inspect.signature` interface remains the recommended approach for new"
" code. (Contributed by Nick Coghlan in :issue:`27172`)"
msgstr ""
"为了减少从 Python 2.7 和旧式 :func:`inspect.getargspec` API 升级时的代码问题，先前被写入文档的对 "
":func:`inspect.getfullargspec` 的弃用已被撤销。 虽然这个函数对于单/源 Python 2/3 "
"代码库来说很方便，但对于新代码来说功能更丰富的 :func:`inspect.signature` 接口仍然是推荐的方式。 （由 Nick "
"Coghlan 在 :issue:`27172` 中贡献。）"

#: ../../whatsnew/3.6.rst:1235
msgid "json"
msgstr "json"

#: ../../whatsnew/3.6.rst:1237
msgid ""
":func:`json.load` and :func:`json.loads` now support binary input.  Encoded "
"JSON should be represented using either UTF-8, UTF-16, or UTF-32. "
"(Contributed by Serhiy Storchaka in :issue:`17909`.)"
msgstr ""
"现在 :func:`json.load` 和 :func:`json.loads` 均支持二进制输入。 已编码的 JSON 应当使用 UTF-8, "
"UTF-16 或 UTF-32 来表示。 （由 Serhiy Storchaka 在 :issue:`17909` 中贡献。）"

#: ../../whatsnew/3.6.rst:1243
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.6.rst:1245
msgid ""
"The new :meth:`WatchedFileHandler.reopenIfNeeded() "
"<logging.handlers.WatchedFileHandler.reopenIfNeeded>` method has been added "
"to add the ability to check if the log file needs to be reopened. "
"(Contributed by Marian Horban in :issue:`24884`.)"
msgstr ""
"新增 :meth:`WatchedFileHandler.reopenIfNeeded() "
"<logging.handlers.WatchedFileHandler.reopenIfNeeded>` "
"方法以添加检测日志文件是否需要被重新打开的能力。 （由 Marian Horban 在 :issue:`24884` 中贡献。）.)"

#: ../../whatsnew/3.6.rst:1252
msgid "math"
msgstr "math"

#: ../../whatsnew/3.6.rst:1254
msgid ""
"The tau (*τ*) constant has been added to the :mod:`math` and :mod:`cmath` "
"modules. (Contributed by Lisa Roach in :issue:`12345`, see :pep:`628` for "
"details.)"
msgstr ""
"为 :mod:`math` 和 :mod:`cmath` 模块增加了 tau (*τ*) 常量。 （由 Lisa Roach 在 "
":issue:`12345` 中贡献，详情见 :pep:`628`。）"

#: ../../whatsnew/3.6.rst:1260
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.6.rst:1262
msgid ""
":ref:`Proxy Objects <multiprocessing-proxy_objects>` returned by "
":func:`multiprocessing.Manager` can now be nested. (Contributed by Davin "
"Potts in :issue:`6766`.)"
msgstr ""
"由 :func:`multiprocessing.Manager` 返回的 :ref:`代理对象 <multiprocessing-"
"proxy_objects>` 现在可以被嵌套。 （由 Davin Potts 在 :issue:`6766` 中贡献。）"

#: ../../whatsnew/3.6.rst:1268 ../../whatsnew/3.6.rst:2021
msgid "os"
msgstr "os"

#: ../../whatsnew/3.6.rst:1270
msgid ""
"See the summary of :ref:`PEP 519 <whatsnew36-pep519>` for details on how the"
" :mod:`os` and :mod:`os.path` modules now support :term:`path-like objects "
"<path-like object>`."
msgstr ""
"请参阅 :ref:`PEP 519 <whatsnew36-pep519>` 的概览了解现在 :mod:`os` 和 :mod:`os.path` "
"模块如何支持 :term:`路径型对象 <path-like object>` 的详情。"

#: ../../whatsnew/3.6.rst:1274
msgid ":func:`~os.scandir` now supports :class:`bytes` paths on Windows."
msgstr "现在 :func:`~os.scandir` 支持 Windows 上的 :class:`bytes` 路径。"

#: ../../whatsnew/3.6.rst:1276
msgid ""
"A new :meth:`~os.scandir.close` method allows explicitly closing a "
":func:`~os.scandir` iterator.  The :func:`~os.scandir` iterator now supports"
" the :term:`context manager` protocol.  If a :func:`scandir` iterator is "
"neither exhausted nor explicitly closed a :exc:`ResourceWarning` will be "
"emitted in its destructor. (Contributed by Serhiy Storchaka in "
":issue:`25994`.)"
msgstr ""
"新增的 :meth:`~os.scandir.close` 方法允许显式地关闭 :func:`~os.scandir` 迭代器。 "
":func:`~os.scandir` 迭代器现在支持 :term:`context manager` 协议。 如果一个 :func:`scandir`"
" 迭代器既没有被耗尽也没有被显式地关闭则会在其析构器中发出 :exc:`ResourceWarning`。 （由 Serhiy Storchaka 在 "
":issue:`25994` 中贡献。）"

#: ../../whatsnew/3.6.rst:1286
msgid ""
"The Linux ``getrandom()`` syscall (get random bytes) is now exposed as the "
"new :func:`os.getrandom` function. (Contributed by Victor Stinner, part of "
"the :pep:`524`)"
msgstr ""
"Linux ``getrandom()`` 系统调用（获取随机字节数据）现在被暴露为新的 :func:`os.getrandom` 函数。 （由 "
"Victor Stinner 贡献，为 :pep:`524` 的一部分）"

#: ../../whatsnew/3.6.rst:1292
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.6.rst:1294
msgid ""
":mod:`pathlib` now supports :term:`path-like objects <path-like object>`. "
"(Contributed by Brett Cannon in :issue:`27186`.)"
msgstr ""
":mod:`pathlib` 现在支持 :term:`路径型对象 <path-like object>`。 （由 Brett Cannon 在 "
":issue:`27186` 中贡献。）"

#: ../../whatsnew/3.6.rst:1297
msgid "See the summary of :ref:`PEP 519 <whatsnew36-pep519>` for details."
msgstr "请参阅 :ref:`PEP 519 <whatsnew36-pep519>` 的概览了解详情。"

#: ../../whatsnew/3.6.rst:1301
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.6.rst:1303
msgid ""
"The :class:`~pdb.Pdb` class constructor has a new optional *readrc* argument"
" to control whether ``.pdbrc`` files should be read."
msgstr ":class:`~pdb.Pdb` 类构造器新增可选的 *readrc* 参数用来控制是否应当读取 ``.pdbrc`` 文件。"

#: ../../whatsnew/3.6.rst:1308
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.6.rst:1310
msgid ""
"Objects that need ``__new__`` called with keyword arguments can now be "
"pickled using :ref:`pickle protocols <pickle-protocols>` older than protocol"
" version 4. Protocol version 4 already supports this case.  (Contributed by "
"Serhiy Storchaka in :issue:`24164`.)"
msgstr ""
"需要附带关键字参数调用 ``__new__`` 的对象现在可以使用早于协议版本 4 的 :ref:`pickle 协议 <pickle-"
"protocols>` 来 pickle。 协议版本 4 之前已支持此场景。 （由 Serhiy Storchaka 在 :issue:`24164` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:1317
msgid "pickletools"
msgstr "pickletools"

#: ../../whatsnew/3.6.rst:1319
msgid ""
":func:`pickletools.dis` now outputs the implicit memo index for the "
"``MEMOIZE`` opcode. (Contributed by Serhiy Storchaka in :issue:`25382`.)"
msgstr ""
"现在 :func:`pickletools.dis` 将为 ``MEMOIZE`` 操作码输出隐式的 memo 索引。 （由 Serhiy "
"Storchaka 在 :issue:`25382` 中贡献。）"

#: ../../whatsnew/3.6.rst:1325
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.6.rst:1327
msgid ""
"The :mod:`pydoc` module has learned to respect the ``MANPAGER`` environment "
"variable. (Contributed by Matthias Klose in :issue:`8637`.)"
msgstr ""
":mod:`pydoc` 模块将能遵守 ``MANPAGER`` 环境变量的设置。 （由 Matthias Klose 在 :issue:`8637` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:1331
msgid ""
":func:`help` and :mod:`pydoc` can now list named tuple fields in the order "
"they were defined rather than alphabetically. (Contributed by Raymond "
"Hettinger in :issue:`24879`.)"
msgstr ""
":func:`help` 和 :mod:`pydoc` 现在将以具名元组字段被定义的顺序而非字母顺序列出它们。 （由 Raymond Hettinger"
" 在 :issue:`24879` 中贡献。）"

#: ../../whatsnew/3.6.rst:1337
msgid "random"
msgstr "random"

#: ../../whatsnew/3.6.rst:1339
msgid ""
"The new :func:`~random.choices` function returns a list of elements of "
"specified size from the given population with optional weights. (Contributed"
" by Raymond Hettinger in :issue:`18844`.)"
msgstr ""
"新增 :func:`~random.choices` 函数用于从给定的总体中返回指定大小的元素列表并有可选权重。 （由 Raymond "
"Hettinger 在 :issue:`18844` 中贡献。）"

#: ../../whatsnew/3.6.rst:1345 ../../whatsnew/3.6.rst:2029
msgid "re"
msgstr "re"

#: ../../whatsnew/3.6.rst:1347
msgid ""
"Added support of modifier spans in regular expressions.  Examples: "
"``'(?i:p)ython'`` matches ``'python'`` and ``'Python'``, but not "
"``'PYTHON'``; ``'(?i)g(?-i:v)r'`` matches ``'GvR'`` and ``'gvr'``, but not "
"``'GVR'``. (Contributed by Serhiy Storchaka in :issue:`433028`.)"
msgstr ""
"在正则表达式中增加了对修饰符区段的支持。 示例: ``'(?i:p)ython'`` 匹配 ``'python'`` 和 "
"``'Python'``，但不匹配 ``'PYTHON'``；``'(?i)g(?-i:v)r'`` 匹配 ``'GvR'`` 和 "
"``'gvr'``，但不匹配 ``'GVR'``。 （由 Serhiy Storchaka 在 :issue:`433028` 中贡献。）"

#: ../../whatsnew/3.6.rst:1352
msgid ""
"Match object groups can be accessed by ``__getitem__``, which is equivalent "
"to ``group()``.  So ``mo['name']`` is now equivalent to "
"``mo.group('name')``.  (Contributed by Eric Smith in :issue:`24454`.)"
msgstr ""
"Match 对象分组可通过 ``__getitem__`` 来访问，这等价于 ``group()``。 因此 ``mo['name']`` 现在将等价于"
" ``mo.group('name')``。 （由 Eric Smith 在 :issue:`24454` 中贡献。）"

#: ../../whatsnew/3.6.rst:1356
msgid ""
":class:`~re.Match` objects now support :meth:`index-like objects "
"<object.__index__>` as group indices. (Contributed by Jeroen Demeyer and "
"Xiang Zhang in :issue:`27177`.)"
msgstr ""
":class:`~re.Match` 对象现在支持将 :meth:`索引型对象 <object.__index__>` 作为分组索引。 （由 "
"Jeroen Demeyer 和 Xiang Zhang 在 :issue:`27177` 中贡献。）"

#: ../../whatsnew/3.6.rst:1363
msgid "readline"
msgstr "readline"

#: ../../whatsnew/3.6.rst:1365
msgid ""
"Added :func:`~readline.set_auto_history` to enable or disable automatic "
"addition of input to the history list.  (Contributed by Tyler Crompton in "
":issue:`26870`.)"
msgstr ""
"新增 :func:`~readline.set_auto_history` 来启用或禁用历史列表输入的自动添加。 （由 Tyler Crompton 在"
" :issue:`26870` 中贡献。）"

#: ../../whatsnew/3.6.rst:1371
msgid "rlcompleter"
msgstr "rlcompleter"

#: ../../whatsnew/3.6.rst:1373
msgid ""
"Private and special attribute names now are omitted unless the prefix starts"
" with underscores.  A space or a colon is added after some completed "
"keywords. (Contributed by Serhiy Storchaka in :issue:`25011` and "
":issue:`25209`.)"
msgstr ""
"私有和特殊属性名称现在会被省略除非带有以下划线开头的前缀。 在某些已完成的关键字后会加上空格或冒号。 （由 Serhiy Storchaka 在 "
":issue:`25011` 和 :issue:`25209` 中贡献。）"

#: ../../whatsnew/3.6.rst:1379
msgid "shlex"
msgstr "shlex"

#: ../../whatsnew/3.6.rst:1381
msgid ""
"The :class:`~shlex.shlex` has much :ref:`improved shell compatibility "
"<improved-shell-compatibility>` through the new *punctuation_chars* argument"
" to control which characters are treated as punctuation. (Contributed by "
"Vinay Sajip in :issue:`1521950`.)"
msgstr ""
":class:`~shlex.shlex` 通过新的 *punctuation_chars* 参数来控制哪些字符会被当作标点符号大幅度地 "
":ref:`改进了 shell 兼容性 <improved-shell-compatibility>`。 （由 Vinay Sajip 在 "
":issue:`1521950` 中贡献。）"

#: ../../whatsnew/3.6.rst:1389
msgid "site"
msgstr "site"

#: ../../whatsnew/3.6.rst:1391
msgid ""
"When specifying paths to add to :data:`sys.path` in a ``.pth`` file, you may"
" now specify file paths on top of directories (e.g. zip files). (Contributed"
" by Wolfgang Langner in :issue:`26587`)."
msgstr ""
"当在 ``.pth`` 文件中指定要添加到 :data:`sys.path` 的路径时，现在你可以指定位于目录顶部的文件路径（例如 zip 文件）。 "
"（由 Wolfgang Langner 在 :issue:`26587` 中贡献。）"

#: ../../whatsnew/3.6.rst:1397
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.6.rst:1399
msgid ""
":attr:`sqlite3.Cursor.lastrowid` now supports the ``REPLACE`` statement. "
"(Contributed by Alex LordThorsen in :issue:`16864`.)"
msgstr ""
":attr:`sqlite3.Cursor.lastrowid` 现在支持 ``REPLACE`` 语句。 （由 Alex LordThorsen 在 "
":issue:`16864` 中贡献。）"

#: ../../whatsnew/3.6.rst:1404
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.6.rst:1406
msgid ""
"The :func:`~socket.socket.ioctl` function now supports the "
":const:`~socket.SIO_LOOPBACK_FAST_PATH` control code. (Contributed by Daniel"
" Stokes in :issue:`26536`.)"
msgstr ""
":func:`~socket.socket.ioctl` 函数现在支持 :const:`~socket.SIO_LOOPBACK_FAST_PATH` "
"控制码。 （由 Daniel Stokes 在 :issue:`26536` 中贡献。）"

#: ../../whatsnew/3.6.rst:1410
msgid ""
"The :meth:`~socket.socket.getsockopt` constants ``SO_DOMAIN``, "
"``SO_PROTOCOL``, ``SO_PEERSEC``, and ``SO_PASSSEC`` are now supported. "
"(Contributed by Christian Heimes in :issue:`26907`.)"
msgstr ""
":meth:`~socket.socket.getsockopt` 常量 ``SO_DOMAIN``, ``SO_PROTOCOL``, "
"``SO_PEERSEC`` 和 ``SO_PASSSEC`` 现在已得到支持。 （由 Christian Heimes 在 "
":issue:`26907` 中贡献。）"

#: ../../whatsnew/3.6.rst:1414
msgid ""
"The :meth:`~socket.socket.setsockopt` now supports the ``setsockopt(level, "
"optname, None, optlen: int)`` form. (Contributed by Christian Heimes in "
":issue:`27744`.)"
msgstr ""
":meth:`~socket.socket.setsockopt` 现在支持 ``setsockopt(level, optname, None, "
"optlen: int)`` 的形式。 （由 Christian Heimes 在 :issue:`27744` 中贡献。）"

#: ../../whatsnew/3.6.rst:1418
msgid ""
"The socket module now supports the address family :const:`~socket.AF_ALG` to"
" interface with Linux Kernel crypto API. ``ALG_*``, ``SOL_ALG`` and "
":meth:`~socket.socket.sendmsg_afalg` were added. (Contributed by Christian "
"Heimes in :issue:`27744` with support from Victor Stinner.)"
msgstr ""
"现在 socket 模块已支持地址族 :const:`~socket.AF_ALG` 到 Linux Kernel crypto API 的接口。 "
"增加了 ``ALG_*``, ``SOL_ALG`` 和 :meth:`~socket.socket.sendmsg_afalg`。 （由 "
"Christian Heimes 在 :issue:`27744` 中贡献并得到 Victor Stinner 的协助。）"

#: ../../whatsnew/3.6.rst:1424
msgid ""
"New Linux constants ``TCP_USER_TIMEOUT`` and ``TCP_CONGESTION`` were added. "
"(Contributed by Omar Sandoval, :issue:`26273`)."
msgstr ""
"新增 Linux 常量 ``TCP_USER_TIMEOUT`` 和 ``TCP_CONGESTION``。 （由 Omar Sandoval 在 "
":issue:`26273` 中贡献。）"

#: ../../whatsnew/3.6.rst:1429
msgid "socketserver"
msgstr "socketserver"

#: ../../whatsnew/3.6.rst:1431
msgid ""
"Servers based on the :mod:`socketserver` module, including those defined in "
":mod:`http.server`, :mod:`xmlrpc.server` and :mod:`wsgiref.simple_server`, "
"now support the :term:`context manager` protocol. (Contributed by Aviv "
"Palivoda in :issue:`26404`.)"
msgstr ""
"基于 :mod:`socketserver` 模块的服务器，包括在 :mod:`http.server`、:mod:`xmlrpc.server` 和 "
":mod:`wsgiref.simple_server` 中定义的服务器，现在都支持 :term:`context manager` 协议。（由 "
"Aviv Palivoda 在 :issue:`26404` 中贡献。）"

#: ../../whatsnew/3.6.rst:1437
msgid ""
"The :attr:`~socketserver.StreamRequestHandler.wfile` attribute of "
":class:`~socketserver.StreamRequestHandler` classes now implements the "
":class:`io.BufferedIOBase` writable interface.  In particular, calling "
":meth:`~io.BufferedIOBase.write` is now guaranteed to send the data in full."
"  (Contributed by Martin Panter in :issue:`26721`.)"
msgstr ""
":class:`~socketserver.StreamRequestHandler` 类的 "
":attr:`~socketserver.StreamRequestHandler.wfile` 属性现在实现了 "
":class:`io.BufferedIOBase` 可写接口。 特别地，现在调用 :meth:`~io.BufferedIOBase.write` "
"会保证完整地发送数据。 （由 Martin Panter 在 :issue:`26721` 中贡献。）"

#: ../../whatsnew/3.6.rst:1445 ../../whatsnew/3.6.rst:2037
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.6.rst:1447
msgid ""
":mod:`ssl` supports OpenSSL 1.1.0.  The minimum recommend version is 1.0.2. "
"(Contributed by Christian Heimes in :issue:`26470`.)"
msgstr ""
":mod:`ssl` 已支持 OpenSSL 1.1.0。 最低的建议版本为 1.0.2。 （由 Christian Heimes 在 "
":issue:`26470` 中贡献。）"

#: ../../whatsnew/3.6.rst:1450
msgid ""
"3DES has been removed from the default cipher suites and ChaCha20 Poly1305 "
"cipher suites have been added. (Contributed by Christian Heimes in "
":issue:`27850` and :issue:`27766`.)"
msgstr ""
"已从默认的密码套件中删除 3DES 并添加了 ChaCha20 Poly1305 密码套件。 （由 Christian Heimes 在 "
":issue:`27850` 和 :issue:`27766` 中贡献。）"

#: ../../whatsnew/3.6.rst:1454
msgid ""
":class:`~ssl.SSLContext` has better default configuration for options and "
"ciphers. (Contributed by Christian Heimes in :issue:`28043`.)"
msgstr ""
":class:`~ssl.SSLContext` 已具有更好的选项和密码配置。 （由 Christian Heimes 在 :issue:`28043`"
" 中贡献。）.)"

#: ../../whatsnew/3.6.rst:1458
msgid ""
"SSL session can be copied from one client-side connection to another with "
"the new :class:`~ssl.SSLSession` class.  TLS session resumption can speed up"
" the initial handshake, reduce latency and improve performance (Contributed "
"by Christian Heimes in :issue:`19500` based on a draft by Alex Warhawk.)"
msgstr ""
"SSL 会话可以通过新的 :class:`~ssl.SSLSession` 类从一个客户端连接复制到另一个。 TLS "
"会话恢复可以加快初始握手过程、减少延迟并提升性能。 （由 Christian Heimes 根据 Alex Warhawk 的草案在 "
":issue:`19500` 中贡献。）"

#: ../../whatsnew/3.6.rst:1464
msgid ""
"The new :meth:`~ssl.SSLContext.get_ciphers` method can be used to get a list"
" of enabled ciphers in order of cipher priority."
msgstr "新的 :meth:`~ssl.SSLContext.get_ciphers` 方法可被用来获取按密码优先级排序的已启用密码列表。"

#: ../../whatsnew/3.6.rst:1467
msgid ""
"All constants and flags have been converted to :class:`~enum.IntEnum` and "
":class:`~enum.IntFlags`. (Contributed by Christian Heimes in "
":issue:`28025`.)"
msgstr ""
"所有常量和旗标都已被转换为 :class:`~enum.IntEnum` 和 :class:`~enum.IntFlags`。 （由 Christian"
" Heimes 在 :issue:`28025` 中贡献。）"

#: ../../whatsnew/3.6.rst:1471
msgid ""
"Server and client-side specific TLS protocols for :class:`~ssl.SSLContext` "
"were added. (Contributed by Christian Heimes in :issue:`28085`.)"
msgstr ""
"为 :class:`~ssl.SSLContext` 添加了服务器和客户端专属的 TLS 协议。 （由 Christian Heimes 在 "
":issue:`28085` 中贡献。）"

#: ../../whatsnew/3.6.rst:1475
msgid ""
"Added :attr:`ssl.SSLContext.post_handshake_auth` to enable and "
":meth:`ssl.SSLSocket.verify_client_post_handshake` to initiate TLS 1.3 post-"
"handshake authentication. (Contributed by Christian Heimes in :gh:`78851`.)"
msgstr ""
"增加了 :attr:`ssl.SSLContext.post_handshake_auth` 以启用并通过 "
":meth:`ssl.SSLSocket.verify_client_post_handshake` 来初始化 TLS 1.3 握手后验证。 （由 "
"Christian Heimes 在 :gh:`78851` 中贡献。）"

#: ../../whatsnew/3.6.rst:1481
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.6.rst:1483
msgid ""
"A new :func:`~statistics.harmonic_mean` function has been added. "
"(Contributed by Steven D'Aprano in :issue:`27181`.)"
msgstr ""
"新增 :func:`~statistics.harmonic_mean` 函数。 （由 Steven D'Aprano 在 :issue:`27181`"
" 中贡献。）"

#: ../../whatsnew/3.6.rst:1488
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.6.rst:1490
msgid ""
":mod:`struct` now supports IEEE 754 half-precision floats via the ``'e'`` "
"format specifier. (Contributed by Eli Stevens, Mark Dickinson in "
":issue:`11734`.)"
msgstr ""
"现在 :mod:`struct` 可通过 ``'e'`` 格式说明符支持 IEEE 754 半精度浮点数。 （由 Eli Stevens 和 Mark "
"Dickinson 在 :issue:`11734` 中贡献。）"

#: ../../whatsnew/3.6.rst:1496
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.6.rst:1498
msgid ""
":class:`subprocess.Popen` destructor now emits a :exc:`ResourceWarning` "
"warning if the child process is still running. Use the context manager "
"protocol (``with proc: ...``) or explicitly call the "
":meth:`~subprocess.Popen.wait` method to read the exit status of the child "
"process. (Contributed by Victor Stinner in :issue:`26741`.)"
msgstr ""
"现在 :class:`subprocess.Popen` 析构器会在子进程仍然运行时发出 :exc:`ResourceWarning` 警告。 "
"请使用上下文管理器协议 (``with proc: ...``) 或显式地调用 :meth:`~subprocess.Popen.wait` "
"方法来读取子进程的退出状态。 （由 Victor Stinner 在 :issue:`26741` 中贡献。）"

#: ../../whatsnew/3.6.rst:1504
msgid ""
"The :class:`subprocess.Popen` constructor and all functions that pass "
"arguments through to it now accept *encoding* and *errors* arguments. "
"Specifying either of these will enable text mode for the *stdin*, *stdout* "
"and *stderr* streams. (Contributed by Steve Dower in :issue:`6135`.)"
msgstr ""
":class:`subprocess.Popen` 构造器以及所有会向其传递参数的函数现在可接受 *encoding* 和 *errors* 参数。 "
"指定这两者中的任何一个都将为 *stdin*, *stdout* 和 *stderr* 流启用文本模式。 （由 Steve Dower 在 "
":issue:`6135` 中贡献。）"

#: ../../whatsnew/3.6.rst:1511
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.6.rst:1513
msgid ""
"The new :func:`~sys.getfilesystemencodeerrors` function returns the name of "
"the error mode used to convert between Unicode filenames and bytes "
"filenames. (Contributed by Steve Dower in :issue:`27781`.)"
msgstr ""
"新的 :func:`~sys.getfilesystemencodeerrors` 函数可返回在 Unicode 文件名和 bytes "
"文件名之间进行转换时使用的错误模式的名称。 （由 Steve Dower 在 :issue:`27781` 中贡献。）"

#: ../../whatsnew/3.6.rst:1517
msgid ""
"On Windows the return value of the :func:`~sys.getwindowsversion` function "
"now includes the *platform_version* field which contains the accurate major "
"version, minor version and build number of the current operating system, "
"rather than the version that is being emulated for the process (Contributed "
"by Steve Dower in :issue:`27932`.)"
msgstr ""
"在 Windows 上 :func:`~sys.getwindowsversion` 函数的返回值现在将包括 *platform_version* "
"字段，该字段包含当前操作系统准确的主版本、次版本和构建版本号，而不是进行所模拟的版本信息。 （由 Steve Dower 在 "
":issue:`27932` 中提供贡献。）"

#: ../../whatsnew/3.6.rst:1525
msgid "telnetlib"
msgstr "telnetlib"

#: ../../whatsnew/3.6.rst:1527
msgid ""
":class:`!telnetlib.Telnet` is now a context manager (contributed by Stéphane"
" Wirtel in :issue:`25485`)."
msgstr ""
"现在 :class:`!telnetlib.Telnet` 是一个上下文管理器。 （由 Stéphane Wirtel 在 :issue:`25485`"
" 中贡献。）"

#: ../../whatsnew/3.6.rst:1532
msgid "time"
msgstr "time"

#: ../../whatsnew/3.6.rst:1534
msgid ""
"The :class:`~time.struct_time` attributes :attr:`tm_gmtoff` and "
":attr:`tm_zone` are now available on all platforms."
msgstr ""
"现在 :class:`~time.struct_time` 的属性 :attr:`tm_gmtoff` 和 :attr:`tm_zone` "
"在所有平台上均可用。"

#: ../../whatsnew/3.6.rst:1539
msgid "timeit"
msgstr "timeit"

#: ../../whatsnew/3.6.rst:1541
msgid ""
"The new :meth:`Timer.autorange() <timeit.Timer.autorange>` convenience "
"method has been added to call :meth:`Timer.timeit() <timeit.Timer.timeit>` "
"repeatedly so that the total run time is greater or equal to 200 "
"milliseconds. (Contributed by Steven D'Aprano in :issue:`6422`.)"
msgstr ""
"新增的 :meth:`Timer.autorange() <timeit.Timer.autorange>` 便捷方法会重复调用 "
":meth:`Timer.timeit() <timeit.Timer.timeit>` 以使总运行时间大于等于 200 毫秒。 （由 Steven "
"D'Aprano 在 :issue:`6422` 中贡献。）"

#: ../../whatsnew/3.6.rst:1546
msgid ""
":mod:`timeit` now warns when there is substantial (4x) variance between best"
" and worst times. (Contributed by Serhiy Storchaka in :issue:`23552`.)"
msgstr ""
"现在 :mod:`timeit` 在最佳时间和最差时间之间存在显著（4 倍）差异时将会发出警告。 （由 Serhiy Storchaka 在 "
":issue:`23552` 中贡献。）"

#: ../../whatsnew/3.6.rst:1552 ../../whatsnew/3.6.rst:2054
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.6.rst:1554
msgid ""
"Added methods :meth:`~tkinter.Variable.trace_add`, "
":meth:`~tkinter.Variable.trace_remove` and "
":meth:`~tkinter.Variable.trace_info` in the :class:`tkinter.Variable` class."
"  They replace old methods :meth:`~tkinter.Variable.trace_variable`, "
":meth:`~tkinter.Variable.trace`, :meth:`~tkinter.Variable.trace_vdelete` and"
" :meth:`~tkinter.Variable.trace_vinfo` that use obsolete Tcl commands and "
"might not work in future versions of Tcl. (Contributed by Serhiy Storchaka "
"in :issue:`22115`)."
msgstr ""
"在 :class:`tkinter.Variable` 类中添加了方法 :meth:`~tkinter.Variable.trace_add`, "
":meth:`~tkinter.Variable.trace_remove` 和 "
":meth:`~tkinter.Variable.trace_info`。 它们取代了使用过时 Tcl 命令的旧方法 "
":meth:`~tkinter.Variable.trace_variable`, :meth:`~tkinter.Variable.trace`, "
":meth:`~tkinter.Variable.trace_vdelete` 和 "
":meth:`~tkinter.Variable.trace_vinfo`，旧方法在未来版本的 Tcl 中可能会无法使用。 （由 Serhiy "
"Storchaka 在 :issue:`22115` 中贡献。）"

#: ../../whatsnew/3.6.rst:1567
msgid "traceback"
msgstr "回溯"

#: ../../whatsnew/3.6.rst:1569
msgid ""
"Both the traceback module and the interpreter's builtin exception display "
"now abbreviate long sequences of repeated lines in tracebacks as shown in "
"the following example::"
msgstr "traceback 模块和解释器的内置异常显示现在都会对回溯中重复行的长序列进行缩写，如下面的例子所示::"

#: ../../whatsnew/3.6.rst:1573
msgid ""
">>> def f(): f()\n"
"...\n"
">>> f()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"<stdin>\", line 1, in f\n"
"  File \"<stdin>\", line 1, in f\n"
"  File \"<stdin>\", line 1, in f\n"
"  [Previous line repeated 995 more times]\n"
"RecursionError: maximum recursion depth exceeded"
msgstr ""
">>> def f(): f()\n"
"...\n"
">>> f()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"<stdin>\", line 1, in f\n"
"  File \"<stdin>\", line 1, in f\n"
"  File \"<stdin>\", line 1, in f\n"
"  [Previous line repeated 995 more times]\n"
"RecursionError: maximum recursion depth exceeded"

#: ../../whatsnew/3.6.rst:1584
msgid "(Contributed by Emanuel Barry in :issue:`26823`.)"
msgstr "（由  Emanuel Barry在 :issue:`26823` 中贡献。）"

#: ../../whatsnew/3.6.rst:1588
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../../whatsnew/3.6.rst:1590
msgid ""
"The :mod:`tracemalloc` module now supports tracing memory allocations in "
"multiple different address spaces."
msgstr ":mod:`tracemalloc` 模块现在支持跟踪在多个不同地址空间中的内存分配情况。"

#: ../../whatsnew/3.6.rst:1593
msgid ""
"The new :class:`~tracemalloc.DomainFilter` filter class has been added to "
"filter block traces by their address space (domain)."
msgstr "新增 :class:`~tracemalloc.DomainFilter` 过滤器类用于按地址空间（域）过滤块跟踪信息。"

#: ../../whatsnew/3.6.rst:1596
msgid "(Contributed by Victor Stinner in :issue:`26588`.)"
msgstr "（由 Victor Stinner 在 :issue:`26588` 中贡献。）"

#: ../../whatsnew/3.6.rst:1602
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.6.rst:1604
msgid ""
"Since the :mod:`typing` module is :term:`provisional <provisional API>`, all"
" changes introduced in Python 3.6 have also been backported to Python 3.5.x."
msgstr ""
"由于 :mod:`typing` 模块处于 :term:`暂定状态 <provisional API>`，在 Python 3.6 "
"中引入的所有改变都已被反向移植到 Python 3.5.x。"

#: ../../whatsnew/3.6.rst:1608
msgid ""
"The :mod:`typing` module has a much improved support for generic type "
"aliases.  For example ``Dict[str, Tuple[S, T]]`` is now a valid type "
"annotation. (Contributed by Guido van Rossum in `Github #195 "
"<https://github.com/python/typing/pull/195>`_.)"
msgstr ""
":mod:`typing` 模块对泛型类别名的支持得到大幅改进。 例如 ``Dict[str, Tuple[S, T]]`` 现在将是有效的类型标注。 "
"（由 Guido van Rossum 在 `Github #195 中贡献 "
"<https://github.com/python/typing/pull/195>`_。）"

#: ../../whatsnew/3.6.rst:1614
msgid ""
"The :class:`typing.ContextManager` class has been added for representing "
":class:`contextlib.AbstractContextManager`. (Contributed by Brett Cannon in "
":issue:`25609`.)"
msgstr ""
"增加 :class:`typing.ContextManager` 类用来表示 "
":class:`contextlib.AbstractContextManager`。 （由 Brett Cannon 在 :issue:`25609`"
" 中贡献。）"

#: ../../whatsnew/3.6.rst:1618
msgid ""
"The :class:`typing.Collection` class has been added for representing "
":class:`collections.abc.Collection`. (Contributed by Ivan Levkivskyi in "
":issue:`27598`.)"
msgstr ""
"增加 :class:`typing.Collection` 类用来表示 :class:`collections.abc.Collection`。 （由 "
"Ivan Levkivskyi 在 :issue:`27598` 中贡献。）"

#: ../../whatsnew/3.6.rst:1622
msgid ""
"The :const:`typing.ClassVar` type construct has been added to mark class "
"variables.  As introduced in :pep:`526`, a variable annotation wrapped in "
"ClassVar indicates that a given attribute is intended to be used as a class "
"variable and should not be set on instances of that class. (Contributed by "
"Ivan Levkivskyi in `Github #280 "
"<https://github.com/python/typing/pull/280>`_.)"
msgstr ""
"增加 :const:`typing.ClassVar` 类型结构体用来标记类变量。 变量标注在 :pep:`526` 中被引入，包装在 ClassVar"
" 中的变量标注表示给定的属性将被用作类变量而不应在该类的实例上设置。 （由 Ivan Levkivskyi 在 `Github #280 中贡献 "
"<https://github.com/python/typing/pull/280>`_。)"

#: ../../whatsnew/3.6.rst:1629
msgid ""
"A new :const:`~typing.TYPE_CHECKING` constant that is assumed to be ``True``"
" by the static type checkers, but is ``False`` at runtime. (Contributed by "
"Guido van Rossum in `Github #230 "
"<https://github.com/python/typing/issues/230>`_.)"
msgstr ""
"新增 :const:`~typing.TYPE_CHECKING` 常量将被静态类型检查器视为 ``True``，但在运行时将为 ``False``。 "
"（由 Guido van Rossum 在 `Github #230 中贡献 "
"<https://github.com/python/typing/issues/230>`_。）"

#: ../../whatsnew/3.6.rst:1634
msgid ""
"A new :func:`~typing.NewType` helper function has been added to create "
"lightweight distinct types for annotations::"
msgstr "新增 :func:`~typing.NewType` 辅助函数用来创建针对标注的轻量级单独类型::"

#: ../../whatsnew/3.6.rst:1637
msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"
msgstr ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"

#: ../../whatsnew/3.6.rst:1642
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type.  (Contributed by Ivan Levkivskyi in `Github #189 "
"<https://github.com/python/typing/issues/189>`_.)"
msgstr ""
"静态类型检查器将把新类型当作原始类型的子类来处理。 （由 Ivan Levkivskyi 在 `Github #189 中贡献 "
"<https://github.com/python/typing/issues/189>`_。）"

#: ../../whatsnew/3.6.rst:1648
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.6.rst:1650
msgid ""
"The :mod:`unicodedata` module now uses data from `Unicode 9.0.0 "
"<https://unicode.org/versions/Unicode9.0.0/>`_. (Contributed by Benjamin "
"Peterson.)"
msgstr ""
":mod:`unicodedata` 模块现在使用来自 `Unicode 9.0.0 "
"<https://unicode.org/versions/Unicode9.0.0/>`_ 的数据。 （由 Benjamin Peterson "
"贡献。）"

#: ../../whatsnew/3.6.rst:1656
msgid "unittest.mock"
msgstr "unittest.mock"

#: ../../whatsnew/3.6.rst:1658
msgid "The :class:`~unittest.mock.Mock` class has the following improvements:"
msgstr ":class:`~unittest.mock.Mock` 类具有以下改进："

#: ../../whatsnew/3.6.rst:1660
msgid ""
"Two new methods, :meth:`Mock.assert_called() "
"<unittest.mock.Mock.assert_called>` and :meth:`Mock.assert_called_once() "
"<unittest.mock.Mock.assert_called_once>` to check if the mock object was "
"called. (Contributed by Amit Saha in :issue:`26323`.)"
msgstr ""
"两个新方法，:meth:`Mock.assert_called() <unittest.mock.Mock.assert_called>` 和 "
":meth:`Mock.assert_called_once() <unittest.mock.Mock.assert_called_once>` "
"用于检测 mock 对象是否已被调用。 （由 Amit Saha 在 :issue:`26323` 中贡献。）"

#: ../../whatsnew/3.6.rst:1666
msgid ""
"The :meth:`Mock.reset_mock() <unittest.mock.Mock.reset_mock>` method now has"
" two optional keyword only arguments: *return_value* and *side_effect*. "
"(Contributed by Kushal Das in :issue:`21271`.)"
msgstr ""
":meth:`Mock.reset_mock() <unittest.mock.Mock.reset_mock>` 方法现在有两个可选的仅限关键字参数:"
" *return_value* 和 *side_effect*。 （由 Kushal Das 在 :issue:`21271` 中贡献。）"

#: ../../whatsnew/3.6.rst:1673
msgid "urllib.request"
msgstr "urllib.request"

#: ../../whatsnew/3.6.rst:1675
msgid ""
"If a HTTP request has a file or iterable body (other than a bytes object) "
"but no ``Content-Length`` header, rather than throwing an error, "
":class:`~urllib.request.AbstractHTTPHandler` now falls back to use chunked "
"transfer encoding. (Contributed by Demian Brecht and Rolf Krahl in "
":issue:`12319`.)"
msgstr ""
"如果一个 HTTP 请求具有文件或可迭代对象请求体（而不是 bytes 对象）但没有 ``Content-Length`` "
"标头，:class:`~urllib.request.AbstractHTTPHandler` 现在将不会抛出错误，而是回退为使用分块传输编码格式。 "
"（由 Demian Brecht 和 Rolf Krahl 在 :issue:`12319` 中贡献。）"

#: ../../whatsnew/3.6.rst:1683
msgid "urllib.robotparser"
msgstr "urllib.robotparser"

#: ../../whatsnew/3.6.rst:1685
msgid ""
":class:`~urllib.robotparser.RobotFileParser` now supports the ``Crawl-"
"delay`` and ``Request-rate`` extensions. (Contributed by Nikolay Bogoychev "
"in :issue:`16099`.)"
msgstr ""
":class:`~urllib.robotparser.RobotFileParser` 现在将支持 ``Crawl-delay`` 和 "
"``Request-rate`` 扩展。 （由 Nikolay Bogoychev 在 :issue:`16099` 中贡献。）"

#: ../../whatsnew/3.6.rst:1691 ../../whatsnew/3.6.rst:2062
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.6.rst:1693
msgid ""
":mod:`venv` accepts a new parameter ``--prompt``. This parameter provides an"
" alternative prefix for the virtual environment. (Proposed by Łukasz "
"Balcerzak and ported to 3.6 by Stéphane Wirtel in :issue:`22829`.)"
msgstr ""
":mod:`venv` 接受一个新的形参 ``--prompt``。 此形参提供了用于虚拟环境的替代前缀。 （由 Łukasz Balcerzak "
"提议并由 Stéphane Wirtel 在 :issue:`22829` 中移植到 3.6。）"

#: ../../whatsnew/3.6.rst:1699
msgid "warnings"
msgstr "warnings"

#: ../../whatsnew/3.6.rst:1701
msgid ""
"A new optional *source* parameter has been added to the "
":func:`warnings.warn_explicit` function: the destroyed object which emitted "
"a :exc:`ResourceWarning`. A *source* attribute has also been added to "
":class:`warnings.WarningMessage` (contributed by Victor Stinner in "
":issue:`26568` and :issue:`26567`)."
msgstr ""
"为 :func:`warnings.warn_explicit` 新增可选的 *source* 形参：被销毁的对象将发出 "
":exc:`ResourceWarning`。 还为 :class:`warnings.WarningMessage` 增加了 *source* 属性。"
" （由 Victor Stinner 在 :issue:`26568` 和 :issue:`26567` 中贡献。）"

#: ../../whatsnew/3.6.rst:1707
msgid ""
"When a :exc:`ResourceWarning` warning is logged, the :mod:`tracemalloc` "
"module is now used to try to retrieve the traceback where the destroyed "
"object was allocated."
msgstr ""
"当一个 :exc:`ResourceWarning` 警告被记入日志时，现在会使用 :mod:`tracemalloc` "
"模块来尝试提取分配给已销毁对象的回溯信息。"

#: ../../whatsnew/3.6.rst:1710
msgid "Example with the script ``example.py``::"
msgstr "使用 ``example.py`` 脚本的示例::"

#: ../../whatsnew/3.6.rst:1712
msgid ""
"import warnings\n"
"\n"
"def func():\n"
"    return open(__file__)\n"
"\n"
"f = func()\n"
"f = None"
msgstr ""
"import warnings\n"
"\n"
"def func():\n"
"    return open(__file__)\n"
"\n"
"f = func()\n"
"f = None"

#: ../../whatsnew/3.6.rst:1720
msgid "Output of the command ``python3.6 -Wd -X tracemalloc=5 example.py``::"
msgstr "命令 ``python3.6 -Wd -X tracemalloc=5 example.py`` 的输出::"

#: ../../whatsnew/3.6.rst:1722
msgid ""
"example.py:7: ResourceWarning: unclosed file <_io.TextIOWrapper name='example.py' mode='r' encoding='UTF-8'>\n"
"  f = None\n"
"Object allocated at (most recent call first):\n"
"  File \"example.py\", lineno 4\n"
"    return open(__file__)\n"
"  File \"example.py\", lineno 6\n"
"    f = func()"
msgstr ""
"example.py:7: ResourceWarning: unclosed file <_io.TextIOWrapper name='example.py' mode='r' encoding='UTF-8'>\n"
"  f = None\n"
"Object allocated at (most recent call first):\n"
"  File \"example.py\", lineno 4\n"
"    return open(__file__)\n"
"  File \"example.py\", lineno 6\n"
"    f = func()"

#: ../../whatsnew/3.6.rst:1730
msgid ""
"The \"Object allocated at\" traceback is new and is only displayed if "
":mod:`tracemalloc` is tracing Python memory allocations and if the "
":mod:`warnings` module was already imported."
msgstr ""
"\"Object allocated at\" 回溯信息是新增的并且仅当 :mod:`tracemalloc` 在跟踪 Python 内存分配且 "
":mod:`warnings` 模块已被导入时才会显示。"

#: ../../whatsnew/3.6.rst:1736
msgid "winreg"
msgstr "winreg"

#: ../../whatsnew/3.6.rst:1738
msgid ""
"Added the 64-bit integer type :data:`REG_QWORD <winreg.REG_QWORD>`. "
"(Contributed by Clement Rouault in :issue:`23026`.)"
msgstr ""
"增加了 64 位整数类型 :data:`REG_QWORD <winreg.REG_QWORD>`。 （由 Clement Rouault 在 "
":issue:`23026` 中贡献。）"

#: ../../whatsnew/3.6.rst:1743
msgid "winsound"
msgstr "winsound"

#: ../../whatsnew/3.6.rst:1745
msgid ""
"Allowed keyword arguments to be passed to :func:`Beep <winsound.Beep>`, "
":func:`MessageBeep <winsound.MessageBeep>`, and :func:`PlaySound "
"<winsound.PlaySound>` (:issue:`27982`)."
msgstr ""
"允许将关键字参数传给 :func:`Beep <winsound.Beep>`, :func:`MessageBeep "
"<winsound.MessageBeep>` 和 :func:`PlaySound <winsound.PlaySound>` "
"(:issue:`27982`)。"

#: ../../whatsnew/3.6.rst:1751
msgid "xmlrpc.client"
msgstr "xmlrpc.client"

#: ../../whatsnew/3.6.rst:1753
msgid ""
"The :mod:`xmlrpc.client` module now supports unmarshalling additional data "
"types used by the Apache XML-RPC implementation for numerics and ``None``. "
"(Contributed by Serhiy Storchaka in :issue:`26885`.)"
msgstr ""
":mod:`xmlrpc.client` 模块现在支持反 marshall 由 Apache XML-RPC 的数字和 ``None`` "
"实现所使用的附加数据类型。 （由 Serhiy Storchaka 在 :issue:`26885` 中贡献。）"

#: ../../whatsnew/3.6.rst:1760
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.6.rst:1762
msgid ""
"A new :meth:`ZipInfo.from_file() <zipfile.ZipInfo.from_file>` class method "
"allows making a :class:`~zipfile.ZipInfo` instance from a filesystem file. A"
" new :meth:`ZipInfo.is_dir() <zipfile.ZipInfo.is_dir>` method can be used to"
" check if the :class:`~zipfile.ZipInfo` instance represents a directory. "
"(Contributed by Thomas Kluyver in :issue:`26039`.)"
msgstr ""
"新增的 :meth:`ZipInfo.from_file() <zipfile.ZipInfo.from_file>` "
"类方法允许基于文件系统中的文件创建 :class:`~zipfile.ZipInfo` 实例。 新增的 :meth:`ZipInfo.is_dir() "
"<zipfile.ZipInfo.is_dir>` 方法可被用来检测 :class:`~zipfile.ZipInfo` 实例是否代表一个目录。 （由 "
"Thomas Kluyver 在 :issue:`26039` 中贡献。）"

#: ../../whatsnew/3.6.rst:1768
msgid ""
"The :meth:`ZipFile.open() <zipfile.ZipFile.open>` method can now be used to "
"write data into a ZIP file, as well as for extracting data. (Contributed by "
"Thomas Kluyver in :issue:`26039`.)"
msgstr ""
"现在 :meth:`ZipFile.open() <zipfile.ZipFile.open>` 方法可被用来将数据写入 ZIP 文件，以及提取数据。 "
"（由 Thomas Kluyver 在 :issue:`26039` 中贡献。）"

#: ../../whatsnew/3.6.rst:1774
msgid "zlib"
msgstr "zlib"

#: ../../whatsnew/3.6.rst:1776
msgid ""
"The :func:`~zlib.compress` and :func:`~zlib.decompress` functions now accept"
" keyword arguments. (Contributed by Aviv Palivoda in :issue:`26243` and "
"Xiang Zhang in :issue:`16764` respectively.)"
msgstr ""
"现在 :func:`~zlib.compress` 和 :func:`~zlib.decompress` 函数均可接受关键字参数。 （分别由 Aviv "
"Palivoda 在 :issue:`26243` 以及 Xiang Zhang 在 :issue:`16764` 中贡献。）"

#: ../../whatsnew/3.6.rst:1783
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.6.rst:1785
msgid ""
"The Python interpreter now uses a 16-bit wordcode instead of bytecode which "
"made a number of opcode optimizations possible. (Contributed by Demur Rumed "
"with input and reviews from Serhiy Storchaka and Victor Stinner in "
":issue:`26647` and :issue:`28050`.)"
msgstr ""
"Python 解释器现在使用 16 位字代码而不是字节代码，这使得许多操作码优化成为可能。 （由 Demur Rumed 在 "
":issue:`26647` 和 :issue:`28050` 中贡献并得到来自 Serhiy Storchaka 和 Victor Stinner "
"的协助和评估。）"

#: ../../whatsnew/3.6.rst:1790
msgid ""
"The :class:`asyncio.Future` class now has an optimized C implementation. "
"(Contributed by Yury Selivanov and INADA Naoki in :issue:`26081`.)"
msgstr ""
"现在 :class:`asyncio.Future` 类已拥有经优化的 C 实现。 （由 Yury Selivanov 和 INADA Naoki 在 "
":issue:`26081` 中贡献。）"

#: ../../whatsnew/3.6.rst:1793
msgid ""
"The :class:`asyncio.Task` class now has an optimized C implementation. "
"(Contributed by Yury Selivanov in :issue:`28544`.)"
msgstr ""
"现在 :class:`asyncio.Task` 类已拥有经优化的 C 实现。 （由 Yury Selivanov 在 :issue:`28544` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:1796
msgid ""
"Various implementation improvements in the :mod:`typing` module (such as "
"caching of generic types) allow up to 30 times performance improvements and "
"reduced memory footprint."
msgstr "在 :mod:`typing` 模块中多项对实现的改进（如泛型类型的缓存）获得至多 30 倍的运行效率提升并降低了内存消耗。"

#: ../../whatsnew/3.6.rst:1800
msgid ""
"The ASCII decoder is now up to 60 times as fast for error handlers "
"``surrogateescape``, ``ignore`` and ``replace`` (Contributed by Victor "
"Stinner in :issue:`24870`)."
msgstr ""
"现在 ASCII 解码器使用 ``surrogateescape``, ``ignore`` 和 ``replace`` 错误处理器时可提速至多 60 "
"倍。 （由 Victor Stinner 在 :issue:`24870` 中贡献。）"

#: ../../whatsnew/3.6.rst:1804
msgid ""
"The ASCII and the Latin1 encoders are now up to 3 times as fast for the "
"error handler ``surrogateescape`` (Contributed by Victor Stinner in "
":issue:`25227`)."
msgstr ""
"现在 ASCII 和 Latin1 解码器使用 ``surrogateescape`` 错误处理器时可提速至多 3 倍。 （由 Victor "
"Stinner 在 :issue:`25227` 中贡献。）"

#: ../../whatsnew/3.6.rst:1808
msgid ""
"The UTF-8 encoder is now up to 75 times as fast for error handlers "
"``ignore``, ``replace``, ``surrogateescape``, ``surrogatepass`` (Contributed"
" by Victor Stinner in :issue:`25267`)."
msgstr ""
"现在 UTF-8 解码器使用 ``ignore``, ``replace``, ``surrogateescape``, "
"``surrogatepass`` 错误处理器时可提速至多 75 倍。 （由 Victor Stinner 在 :issue:`25267` 中贡献。）"

#: ../../whatsnew/3.6.rst:1812
msgid ""
"The UTF-8 decoder is now up to 15 times as fast for error handlers "
"``ignore``, ``replace`` and ``surrogateescape`` (Contributed by Victor "
"Stinner in :issue:`25301`)."
msgstr ""
"现在 UTF-8 解码器使用 ``ignore``, ``replace`` 和 ``surrogateescape`` 错误处理器时可提速至多 15 "
"倍。 （由 Victor Stinner 在 :issue:`25301` 中贡献。）"

#: ../../whatsnew/3.6.rst:1816
msgid ""
"``bytes % args`` is now up to 2 times faster. (Contributed by Victor Stinner"
" in :issue:`25349`)."
msgstr ""
"现在 ``bytes % args`` 可提速至多 2 倍。 （由 Victor Stinner 在 :issue:`25349` 中贡献。）"

#: ../../whatsnew/3.6.rst:1819
msgid ""
"``bytearray % args`` is now between 2.5 and 5 times faster. (Contributed by "
"Victor Stinner in :issue:`25399`)."
msgstr ""
"现在 ``bytearray % args`` 可提速 2.5 至 5 倍。 （由 Victor Stinner 在 :issue:`25399` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:1822
msgid ""
"Optimize :meth:`bytes.fromhex` and :meth:`bytearray.fromhex`: they are now "
"between 2x and 3.5x faster. (Contributed by Victor Stinner in "
":issue:`25401`)."
msgstr ""
"优化 :meth:`bytes.fromhex` 和 :meth:`bytearray.fromhex`: 现在它们获得了 2x 和 3.5x 的提速。"
" （由 Victor Stinner 在 :issue:`25401` 中贡献。）"

#: ../../whatsnew/3.6.rst:1825
msgid ""
"Optimize ``bytes.replace(b'', b'.')`` and ``bytearray.replace(b'', b'.')``: "
"up to 80% faster. (Contributed by Josh Snider in :issue:`26574`)."
msgstr ""
"优化 ``bytes.replace(b'', b'.')`` 和 ``bytearray.replace(b'', b'.')``: 提速至多 "
"80%。 （由 Josh Snider 在 :issue:`26574` 中贡献。）"

#: ../../whatsnew/3.6.rst:1828
msgid ""
"Allocator functions of the :c:func:`PyMem_Malloc` domain "
"(:c:macro:`PYMEM_DOMAIN_MEM`) now use the :ref:`pymalloc memory allocator "
"<pymalloc>` instead of :c:func:`malloc` function of the C library. The "
"pymalloc allocator is optimized for objects smaller or equal to 512 bytes "
"with a short lifetime, and use :c:func:`malloc` for larger memory blocks. "
"(Contributed by Victor Stinner in :issue:`26249`)."
msgstr ""
":c:func:`PyMem_Malloc` 域的分配器函数 (:c:macro:`PYMEM_DOMAIN_MEM`) 现在使用 "
":ref:`pymalloc 内存 分配器 <pymalloc>` 而不是 C 库的 :c:func:`malloc` 函数。 pymalloc "
"分配器针对小于等于 512 字节的较短生命周期对象进行了优化，而对于较大的内存块则使用 :c:func:`malloc`。 （由 Victor "
"Stinner 在 :issue:`26249` 中贡献。）"

#: ../../whatsnew/3.6.rst:1835
msgid ""
":func:`pickle.load` and :func:`pickle.loads` are now up to 10% faster when "
"deserializing many small objects (Contributed by Victor Stinner in "
":issue:`27056`)."
msgstr ""
"现在 :func:`pickle.load` 和 :func:`pickle.loads` 在反序列化许多小对象时可提速多至 10%。 （由 "
"Victor Stinner 在 :issue:`27056` 中贡献。）"

#: ../../whatsnew/3.6.rst:1839
msgid ""
"Passing :term:`keyword arguments <keyword argument>` to a function has an "
"overhead in comparison with passing :term:`positional arguments <positional "
"argument>`.  Now in extension functions implemented with using Argument "
"Clinic this overhead is significantly decreased. (Contributed by Serhiy "
"Storchaka in :issue:`27574`)."
msgstr ""
"向函数传入 :term:`关键字参数 <keyword argument>` 相比传入 :term:`位置参数 <positional "
"argument>` 会有额外的开销。 现在对于使用 Argument Clinic 实现的扩展函数此开销已显著降低。 （由 Serhiy "
"Storchaka 在 :issue:`27574` 中贡献。）"

#: ../../whatsnew/3.6.rst:1845
msgid ""
"Optimized :func:`~glob.glob` and :func:`~glob.iglob` functions in the "
":mod:`glob` module; they are now about 3--6 times faster. (Contributed by "
"Serhiy Storchaka in :issue:`25596`)."
msgstr ""
"优化了 :mod:`glob` 模块中的 :func:`~glob.glob` 和 :func:`~glob.iglob` 函数；现在它们可提速约 3"
"--6 倍。 （由 Serhiy Storchaka 在 :issue:`25596` 中贡献。）"

#: ../../whatsnew/3.6.rst:1849
msgid ""
"Optimized globbing in :mod:`pathlib` by using :func:`os.scandir`; it is now "
"about 1.5--4 times faster. (Contributed by Serhiy Storchaka in "
":issue:`26032`)."
msgstr ""
"通过使用 :func:`os.scandir` 优化了 :mod:`pathlib` 中的 glob 操作；现在它可提速约 1.5--4 倍。 （由 "
"Serhiy Storchaka 在 :issue:`26032` 中贡献。）"

#: ../../whatsnew/3.6.rst:1853
msgid ""
":class:`xml.etree.ElementTree` parsing, iteration and deepcopy performance "
"has been significantly improved. (Contributed by Serhiy Storchaka in "
":issue:`25638`, :issue:`25873`, and :issue:`25869`.)"
msgstr ""
":class:`xml.etree.ElementTree` 解析、迭代和深拷贝效率已获得显著提升。 （由 Serhiy Storchaka 在 "
":issue:`25638`, :issue:`25873` 和 :issue:`25869` 中贡献。）"

#: ../../whatsnew/3.6.rst:1858
msgid ""
"Creation of :class:`fractions.Fraction` instances from floats and decimals "
"is now 2 to 3 times faster. (Contributed by Serhiy Storchaka in "
":issue:`25971`.)"
msgstr ""
"基于 float 和 decimal 创建 :class:`fractions.Fraction` 实例现已提速 2 至 3 倍。 （由 Serhiy "
"Storchaka 在 :issue:`25971` 中贡献。）"

#: ../../whatsnew/3.6.rst:1864
msgid "Build and C API Changes"
msgstr "构建和 C API 的改变"

#: ../../whatsnew/3.6.rst:1866
msgid ""
"Python now requires some C99 support in the toolchain to build. Most "
"notably, Python now uses standard integer types and macros in place of "
"custom macros like ``PY_LONG_LONG``. For more information, see :pep:`7` and "
":issue:`17884`."
msgstr ""
"Python 现在需要在工具链中提供一些 C99 支持来进行构建 。 最值得注意的是，Python 现在使用标准的整数类型和宏来代替像 "
"``PY_LONG_LONG`` 这样的自定义宏。 要获取更多信息，参见 :pep:`7` 和 :issue:`17884`。"

#: ../../whatsnew/3.6.rst:1871
msgid ""
"Cross-compiling CPython with the Android NDK and the Android API level set "
"to 21 (Android 5.0 Lollipop) or greater runs successfully. While Android is "
"not yet a supported platform, the Python test suite runs on the Android "
"emulator with only about 16 tests failures. See the Android meta-issue "
":issue:`26865`."
msgstr ""
"使用 Android NDK 和将 Android API 设为 21（Android 5.0 Lollipop）或更高级别的交叉编译 CPython "
"可成功运行。 虽然 Android 还不是一个受支持的平台，但 Python 测试套件在 Android 模拟器上运行时只有约 16 次测试失败。 "
"请参见 Android meta-issue :issue:`26865`。"

#: ../../whatsnew/3.6.rst:1876
msgid ""
"The ``--enable-optimizations`` configure flag has been added. Turning it on "
"will activate expensive optimizations like PGO. (Original patch by "
"Alecsandru Patrascu of Intel in :issue:`26359`.)"
msgstr ""
"已添加 ``--enable-optimizations`` 配置旗标 。 打开它将激活 PGO 等高消耗的优化功能。 （原始补丁由 Intel 的 "
"Alecsandru Patrascu 在 :issue:`26359` 中贡献。）"

#: ../../whatsnew/3.6.rst:1880
msgid ""
"The :term:`GIL <global interpreter lock>` must now be held when allocator "
"functions of :c:macro:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) and"
" :c:macro:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are "
"called."
msgstr ""
"现当调用 :c:macro:`PYMEM_DOMAIN_OBJ` (如: :c:func:`PyObject_Malloc`) 和 "
":c:macro:`PYMEM_DOMAIN_MEM` (如: :c:func:`PyMem_Malloc`) 域的分配器函数时必须持有在 "
":term:`GIL <global interpreter lock>`。"

#: ../../whatsnew/3.6.rst:1884
msgid ""
"New :c:func:`Py_FinalizeEx` API which indicates if flushing buffered data "
"failed. (Contributed by Martin Panter in :issue:`5319`.)"
msgstr ""
"新增 :c:func:`Py_FinalizeEx` API 用于提示缓冲数据的刷新是否失败。 （由 Martin Panter 在 "
":issue:`5319` 中贡献。）"

#: ../../whatsnew/3.6.rst:1888
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` now supports :ref:`positional-only "
"parameters <positional-only_parameter>`.  Positional-only parameters are "
"defined by empty names. (Contributed by Serhiy Storchaka in :issue:`26282`)."
msgstr ""
":c:func:`PyArg_ParseTupleAndKeywords` 现在支持 :ref:`仅限位置形参 <positional-"
"only_parameter>`，仅限位置形参是不带名称定义的。 （由 Serhiy Storchaka 在 :issue:`26282` 中贡献。）"

#: ../../whatsnew/3.6.rst:1893
msgid ""
"``PyTraceback_Print`` method now abbreviates long sequences of repeated "
"lines as ``\"[Previous line repeated {count} more times]\"``. (Contributed "
"by Emanuel Barry in :issue:`26823`.)"
msgstr ""
"现在 ``PyTraceback_Print`` 方法会将由重复行组成的长序列缩写为 ``\"[Previous line repeated "
"{count} more times]\"``。 （由 Emanuel Barry 在 :issue:`26823` 中贡献。）"

#: ../../whatsnew/3.6.rst:1897
msgid ""
"The new :c:func:`PyErr_SetImportErrorSubclass` function allows for "
"specifying a subclass of :exc:`ImportError` to raise. (Contributed by Eric "
"Snow in :issue:`15767`.)"
msgstr ""
"新增的 :c:func:`PyErr_SetImportErrorSubclass` 函数允许指定一个要引发的 :exc:`ImportError` "
"子类。 （由 Eric Snow 在 :issue:`15767` 中贡献。）"

#: ../../whatsnew/3.6.rst:1901
msgid ""
"The new :c:func:`PyErr_ResourceWarning` function can be used to generate a "
":exc:`ResourceWarning` providing the source of the resource allocation. "
"(Contributed by Victor Stinner in :issue:`26567`.)"
msgstr ""
"新增的 :c:func:`PyErr_ResourceWarning` 函数可被用于生成提供资源分配来源的 "
":exc:`ResourceWarning`。（由 Victor Stinner 在 :issue:`26567` 中贡献。）"

#: ../../whatsnew/3.6.rst:1905
msgid ""
"The new :c:func:`PyOS_FSPath` function returns the file system "
"representation of a :term:`path-like object`. (Contributed by Brett Cannon "
"in :issue:`27186`.)"
msgstr ""
"新增的 :c:func:`PyOS_FSPath` 函数可返回一个 :term:`path-like object` 的文件系统表示形式。 （由 "
"Brett Cannon 在 :issue:`27186` 中贡献。）"

#: ../../whatsnew/3.6.rst:1909
msgid ""
"The :c:func:`PyUnicode_FSConverter` and :c:func:`PyUnicode_FSDecoder` "
"functions will now accept :term:`path-like objects <path-like object>`."
msgstr ""
"现在 :c:func:`PyUnicode_FSConverter` 和 :c:func:`PyUnicode_FSDecoder` 函数将接受 "
":term:`路径类对象 <path-like object>`。"

#: ../../whatsnew/3.6.rst:1914
msgid "Other Improvements"
msgstr "其他改进"

#: ../../whatsnew/3.6.rst:1916
msgid ""
"When :option:`--version` (short form: :option:`-V`) is supplied twice, "
"Python prints :data:`sys.version` for detailed information."
msgstr ""
"当 :option:`--version` (简短形式: :option:`-V`) 提供了两次时，Python 将针对细节信息打印 "
":data:`sys.version`。"

#: ../../whatsnew/3.6.rst:1919
msgid ""
"$ ./python -VV\n"
"Python 3.6.0b4+ (3.6:223967b49e49+, Nov 21 2016, 20:55:04)\n"
"[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]"
msgstr ""
"$ ./python -VV\n"
"Python 3.6.0b4+ (3.6:223967b49e49+, Nov 21 2016, 20:55:04)\n"
"[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]"

#: ../../whatsnew/3.6.rst:1927
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.6.rst:1930
msgid "New Keywords"
msgstr "新关键字"

#: ../../whatsnew/3.6.rst:1932
msgid ""
"``async`` and ``await`` are not recommended to be used as variable, class, "
"function or module names.  Introduced by :pep:`492` in Python 3.5, they will"
" become proper keywords in Python 3.7.  Starting in Python 3.6, the use of "
"``async`` or ``await`` as names will generate a :exc:`DeprecationWarning`."
msgstr ""
"不建议将 ``async`` 和 ``await`` 作为变量、类、函数或模块的名称。 它们通过 :pep:`492` 在 Python 3.5 "
"中被引入，并将在 Python 3.7 成为保留关键字。 从 Python 3.6 开始，使用 ``async`` 或 ``await`` "
"作为名称将会产生 :exc:`DeprecationWarning`。"

#: ../../whatsnew/3.6.rst:1939
msgid "Deprecated Python behavior"
msgstr "已弃用的 Python 行为"

#: ../../whatsnew/3.6.rst:1941
msgid ""
"Raising the :exc:`StopIteration` exception inside a generator will now "
"generate a :exc:`DeprecationWarning`, and will trigger a :exc:`RuntimeError`"
" in Python 3.7.  See :ref:`whatsnew-pep-479` for details."
msgstr ""
"在生成器内部引发 :exc:`StopIteration` 异常现在将产生 :exc:`DeprecationWarning`，并将在 Python "
"3.7 中触发 :exc:`RuntimeError`。 详情参见 :ref:`whatsnew-pep-479`。"

#: ../../whatsnew/3.6.rst:1945
msgid ""
"The :meth:`__aiter__` method is now expected to return an asynchronous "
"iterator directly instead of returning an awaitable as previously. Doing the"
" former will trigger a :exc:`DeprecationWarning`.  Backward compatibility "
"will be removed in Python 3.7. (Contributed by Yury Selivanov in "
":issue:`27243`.)"
msgstr ""
"现在 :meth:`__aiter__` 方法应当直接返回一个异步迭代器而非如之前那样返回一个可等待对象。 继续返回可等待对象将触发 "
":exc:`DeprecationWarning`。 向下兼容将在 Python 3.7 中被移除。 （由 Yury Selivanov 在 "
":issue:`27243` 中贡献。）"

#: ../../whatsnew/3.6.rst:1951
msgid ""
"A backslash-character pair that is not a valid escape sequence now generates"
" a :exc:`DeprecationWarning`.  Although this will eventually become a "
":exc:`SyntaxError`, that will not be for several Python releases. "
"(Contributed by Emanuel Barry in :issue:`27364`.)"
msgstr ""
"现在如果一个反斜杠-字符对不是有效的转义序列则会产生 :exc:`DeprecationWarning`。 虽然这最终会改为 "
":exc:`SyntaxError`，但在近几个 Python 发布版都不会实施。 （由 Emanuel Barry 在 :issue:`27364` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:1956
msgid ""
"When performing a relative import, falling back on ``__name__`` and "
"``__path__`` from the calling module when ``__spec__`` or ``__package__`` "
"are not defined now raises an :exc:`ImportWarning`. (Contributed by Rose "
"Ames in :issue:`25791`.)"
msgstr ""
"当执行相对导入时，现在当 ``__spec__`` 或 ``__package__`` 未被定义时从调用方模块回退到 ``__name__`` 和 "
"``__path__`` 会引发 :exc:`ImportWarning`。 （由 Rose Ames 在 :issue:`25791` 中贡献。）"

#: ../../whatsnew/3.6.rst:1963
msgid "Deprecated Python modules, functions and methods"
msgstr "已弃用的 Python 模块、函数和方法"

#: ../../whatsnew/3.6.rst:1966
msgid "asynchat"
msgstr "asynchat"

#: ../../whatsnew/3.6.rst:1968
msgid ""
"The :mod:`!asynchat` has been deprecated in favor of :mod:`asyncio`. "
"(Contributed by Mariatta in :issue:`25002`.)"
msgstr ""
":mod:`!asynchat` 已被弃用而应改用 :mod:`asyncio`。 （由 Mariatta 在 :issue:`25002` 中贡献。）"

#: ../../whatsnew/3.6.rst:1973
msgid "asyncore"
msgstr "asyncore"

#: ../../whatsnew/3.6.rst:1975
msgid ""
"The :mod:`!asyncore` has been deprecated in favor of :mod:`asyncio`. "
"(Contributed by Mariatta in :issue:`25002`.)"
msgstr ""
":mod:`!asyncore` 已被弃用而应改用 :mod:`asyncio`。 （由 Mariatta 在 :issue:`25002` 中贡献。）"

#: ../../whatsnew/3.6.rst:1980
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.6.rst:1982
msgid ""
"Unlike other :mod:`dbm` implementations, the :mod:`dbm.dumb` module creates "
"databases with the ``'rw'`` mode and allows modifying the database opened "
"with the ``'r'`` mode.  This behavior is now deprecated and will be removed "
"in 3.8. (Contributed by Serhiy Storchaka in :issue:`21708`.)"
msgstr ""
"与其他 :mod:`dbm` 实现不同，:mod:`dbm.dumb` 模块会以 ``'rw'`` 模式创建数据库并允许修改以 ``'r'`` "
"模式打开的数据库。 此行为现在已被弃用并将在 3.8 中移除。 （由 Serhiy Storchaka 在 :issue:`21708` 中贡献。）"

#: ../../whatsnew/3.6.rst:1992
msgid ""
"The undocumented ``extra_path`` argument to the ``distutils.Distribution`` "
"constructor is now considered deprecated and will raise a warning if set.   "
"Support for this parameter will be removed in a future Python release.  See "
":issue:`27919` for details."
msgstr ""
"未写入文档的传给 ``distutils.Distribution`` 构造器的 ``extra_path`` 参数现在已被弃用，如果设置将会引发警告。"
" 未来的 Python 发布版将会移除对此形参的支持。 详情参见 :issue:`27919`。"

#: ../../whatsnew/3.6.rst:1999
msgid "grp"
msgstr "grp"

#: ../../whatsnew/3.6.rst:2001
msgid ""
"The support of non-integer arguments in :func:`~grp.getgrgid` has been "
"deprecated. (Contributed by Serhiy Storchaka in :issue:`26129`.)"
msgstr ""
"在 :func:`~grp.getgrgid` 中对非整数参数的支持已被弃用。 （由 Serhiy Storchaka 在 :issue:`26129`"
" 中贡献。）"

#: ../../whatsnew/3.6.rst:2009
msgid ""
"The :meth:`importlib.machinery.SourceFileLoader.load_module` and "
":meth:`importlib.machinery.SourcelessFileLoader.load_module` methods are now"
" deprecated. They were the only remaining implementations of "
":meth:`importlib.abc.Loader.load_module` in :mod:`importlib` that had not "
"been deprecated in previous versions of Python in favour of "
":meth:`importlib.abc.Loader.exec_module`."
msgstr ""
"现在 :meth:`importlib.machinery.SourceFileLoader.load_module` 和 "
":meth:`importlib.machinery.SourcelessFileLoader.load_module` 方法已被弃用。 它们是 "
":mod:`importlib` 中仅存的尚未在之前的 Python 版本中被弃用并改为 "
":meth:`importlib.abc.Loader.exec_module` 的 "
":meth:`importlib.abc.Loader.load_module` 实现。"

#: ../../whatsnew/3.6.rst:2016
msgid ""
"The :class:`importlib.machinery.WindowsRegistryFinder` class is now "
"deprecated. As of 3.6.0, it is still added to :data:`sys.meta_path` by "
"default (on Windows), but this may change in future releases."
msgstr ""
"现在 :class:`importlib.machinery.WindowsRegistryFinder` 类已被弃用。 在 3.6.0 "
"中，默认它仍会被添加到 :data:`sys.meta_path` (对于 Windows)，但这可能在未来发生改变。"

#: ../../whatsnew/3.6.rst:2023
msgid ""
"Undocumented support of general :term:`bytes-like objects <bytes-like "
"object>` as paths in :mod:`os` functions, :func:`compile` and similar "
"functions is now deprecated. (Contributed by Serhiy Storchaka in "
":issue:`25791` and :issue:`26754`.)"
msgstr ""
"未写入文档的对于将普通 :term:`字节型对象 <bytes-like object>` 作为 :mod:`os` 的函数, "
":func:`compile` 及类似函数中的路径的支持现已被弃用。 （由 Serhiy Storchaka 在 :issue:`25791` 和 "
":issue:`26754` 中贡献。）"

#: ../../whatsnew/3.6.rst:2031
msgid ""
"Support for inline flags ``(?letters)`` in the middle of the regular "
"expression has been deprecated and will be removed in a future Python "
"version.  Flags at the start of a regular expression are still allowed. "
"(Contributed by Serhiy Storchaka in :issue:`22493`.)"
msgstr ""
"对于在正则表达式中间使用内联旗标 ``(?letters)`` 的支持已被弃用并将在未来的 Python 版本中移除。 "
"在正则表达式开头的旗标仍然被允许。 （由 Serhiy Storchaka 在 :issue:`22493` 中贡献。）"

#: ../../whatsnew/3.6.rst:2039
msgid ""
"OpenSSL 0.9.8, 1.0.0 and 1.0.1 are deprecated and no longer supported. In "
"the future the :mod:`ssl` module will require at least OpenSSL 1.0.2 or "
"1.1.0."
msgstr ""
"OpenSSL 0.9.8, 1.0.0 和 1.0.1 已被弃用并不再受支持。 未来的 :mod:`ssl` 模块将至少需要 OpenSSL "
"1.0.2 或 1.1.0。"

#: ../../whatsnew/3.6.rst:2043
msgid ""
"SSL-related arguments like ``certfile``, ``keyfile`` and ``check_hostname`` "
"in :mod:`ftplib`, :mod:`http.client`, :mod:`imaplib`, :mod:`poplib`, and "
":mod:`smtplib` have been deprecated in favor of ``context``. (Contributed by"
" Christian Heimes in :issue:`28022`.)"
msgstr ""
":mod:`ftplib`, :mod:`http.client`, :mod:`imaplib`, :mod:`poplib` 和 "
":mod:`smtplib` 中的 SSL 相关参数如 ``certfile``, ``keyfile`` 和 ``check_hostname`` "
"已被弃用而应改用 ``context``。 （由 Christian Heimes 在 :issue:`28022` 中贡献。）"

#: ../../whatsnew/3.6.rst:2048
msgid ""
"A couple of protocols and functions of the :mod:`ssl` module are now "
"deprecated. Some features will no longer be available in future versions of "
"OpenSSL. Other features are deprecated in favor of a different API. "
"(Contributed by Christian Heimes in :issue:`28022` and :issue:`26470`.)"
msgstr ""
":mod:`ssl` 模块中的多个协议和函数现已被弃用。 某些特性在未来的 OpenSSL 版本中将不再可用。 另一些特性则因建议使用不同的 API "
"而被弃用。 （由 Christian Heimes 在 :issue:`28022` 和 :issue:`26470` 中贡献。）"

#: ../../whatsnew/3.6.rst:2056
msgid ""
"The :mod:`!tkinter.tix` module is now deprecated.  :mod:`tkinter` users "
"should use :mod:`tkinter.ttk` instead."
msgstr ""
"现在 :mod:`!tkinter.tix` 模块已被弃用。 :mod:`tkinter` 用户应当改用 :mod:`tkinter.ttk`。"

#: ../../whatsnew/3.6.rst:2064
msgid ""
"The ``pyvenv`` script has been deprecated in favour of ``python3 -m venv``. "
"This prevents confusion as to what Python interpreter ``pyvenv`` is "
"connected to and thus what Python interpreter will be used by the virtual "
"environment.  (Contributed by Brett Cannon in :issue:`25154`.)"
msgstr ""
"``pyvenv`` 脚本已被弃用而应改用 ``python3 -m venv``。 这可以避免 ``pyvenv`` 容易混淆所连接的 Python "
"解释器从而导致弄错虚拟环境所使用的 Python 解释器这样的问题。 （由 Brett Cannon 在 :issue:`25154` 中贡献。）"

#: ../../whatsnew/3.6.rst:2071
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.6.rst:2073
msgid ""
"As mitigation against DTD and external entity retrieval, the "
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process external"
" entities by default. (Contributed by Christian Heimes in :gh:`61441`.)"
msgstr ""
"作为对 DTD 和外部实体检查的缓解，在默认情况下 :mod:`xml.dom.minidom` 和 :mod:`xml.sax` "
"模块将不再处理外部实体。 （由 Christian Heimes 在 :gh:`61441` 中贡献。）"

#: ../../whatsnew/3.6.rst:2080
msgid "Deprecated functions and types of the C API"
msgstr "已弃用的 C API 函数和类型"

#: ../../whatsnew/3.6.rst:2082
msgid ""
"Undocumented functions :c:func:`!PyUnicode_AsEncodedObject`, "
":c:func:`!PyUnicode_AsDecodedObject`, :c:func:`!PyUnicode_AsEncodedUnicode` "
"and :c:func:`!PyUnicode_AsDecodedUnicode` are deprecated now. Use the "
":ref:`generic codec based API <codec-registry>` instead."
msgstr ""
"未写入文档的函数 :c:func:`!PyUnicode_AsEncodedObject`, "
":c:func:`!PyUnicode_AsDecodedObject`, :c:func:`!PyUnicode_AsEncodedUnicode` "
"和 :c:func:`!PyUnicode_AsDecodedUnicode` 现已被弃用。 请改用 :ref:`基于泛型编解码器的 API "
"<codec-registry>`。"

#: ../../whatsnew/3.6.rst:2089
msgid "Deprecated Build Options"
msgstr "弃用的构建选项"

#: ../../whatsnew/3.6.rst:2091
msgid ""
"The ``--with-system-ffi`` configure flag is now on by default on non-macOS "
"UNIX platforms.  It may be disabled by using ``--without-system-ffi``, but "
"using the flag is deprecated and will not be accepted in Python 3.7. macOS "
"is unaffected by this change.  Note that many OS distributors already use "
"the ``--with-system-ffi`` flag when building their system Python."
msgstr ""
"现在 ``--with-system-ffi`` 配置旗标在非 macOS UNIX 平台上将默认启用。 它可以通过 ``--without-"
"system-ffi`` 来禁用，但该旗标已被弃用并将在 Python 3.7 中不再被接受。 macOS 不会受此变化的影响。 请注意许多 OS "
"发布方在构建它们的系统 Python 时已经使用了 ``--with-system-ffi`` 旗标。"

#: ../../whatsnew/3.6.rst:2099
msgid "Removed"
msgstr "移除"

#: ../../whatsnew/3.6.rst:2102
msgid "API and Feature Removals"
msgstr "API 与特性的移除"

#: ../../whatsnew/3.6.rst:2104
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter in regular "
"expressions will now cause an error.  In replacement templates for "
":func:`re.sub` they are still allowed, but deprecated. The "
":const:`re.LOCALE` flag can now only be used with binary patterns."
msgstr ""
"正则表达式中由 ``'\\'`` 和一个 ASCII 字母组成的未知转义序列现在将导致报错。 它们在 :func:`re.sub` "
"的替换模板中仍被允许，但已被弃用。 现在 :const:`re.LOCALE` 旗标只能用于二进制模式。"

#: ../../whatsnew/3.6.rst:2109
msgid ""
"``inspect.getmoduleinfo()`` was removed (was deprecated since CPython 3.3). "
":func:`inspect.getmodulename` should be used for obtaining the module name "
"for a given path. (Contributed by Yury Selivanov in :issue:`13248`.)"
msgstr ""
"``inspect.getmoduleinfo()`` 已被移除（自 CPython 3.3 起已被弃用）。 应当使用 "
":func:`inspect.getmodulename` 来获取对应于给定路径的模块名称。 （由 Yury Selivanov 在 "
":issue:`13248` 中贡献。）"

#: ../../whatsnew/3.6.rst:2114
msgid ""
"``traceback.Ignore`` class and ``traceback.usage``, ``traceback.modname``, "
"``traceback.fullmodname``, ``traceback.find_lines_from_code``, "
"``traceback.find_lines``, ``traceback.find_strings``, "
"``traceback.find_executable_lines`` methods were removed from the "
":mod:`traceback` module. They were undocumented methods deprecated since "
"Python 3.2 and equivalent functionality is available from private methods."
msgstr ""
"``traceback.Ignore`` 类和 ``traceback.usage``, ``traceback.modname``, "
"``traceback.fullmodname``, ``traceback.find_lines_from_code``, "
"``traceback.find_lines``, ``traceback.find_strings``, "
"``traceback.find_executable_lines`` 等方法已从 :mod:`traceback` 模块中移除。 它们是自 "
"Python 3.2 起即已被弃用的未写入文档的方法并可通过私有方法使用等价的功能。"

#: ../../whatsnew/3.6.rst:2121
msgid ""
"The ``tk_menuBar()`` and ``tk_bindForTraversal()`` dummy methods in "
":mod:`tkinter` widget classes were removed (corresponding Tk commands were "
"obsolete since Tk 4.0)."
msgstr ""
":mod:`tkinter` 控件类中的 ``tk_menuBar()`` 和 ``tk_bindForTraversal()`` "
"虚拟方法已被移除（相应的 Tk 命令自 Tk 4.0 起即已过时）。"

#: ../../whatsnew/3.6.rst:2125
msgid ""
"The :meth:`~zipfile.ZipFile.open` method of the :class:`zipfile.ZipFile` "
"class no longer supports the ``'U'`` mode (was deprecated since Python 3.4)."
" Use :class:`io.TextIOWrapper` for reading compressed text files in "
":term:`universal newlines` mode."
msgstr ""
":class:`zipfile.ZipFile` 类的 :meth:`~zipfile.ZipFile.open` 方法已不再支持 ``'U'`` "
"模式（自 Python 3.4 起已被弃用）。 请使用 :class:`io.TextIOWrapper` 以 :term:`universal "
"newlines` 模式读取压缩文本文件。"

#: ../../whatsnew/3.6.rst:2130
msgid ""
"The undocumented ``IN``, ``CDROM``, ``DLFCN``, ``TYPES``, ``CDIO``, and "
"``STROPTS`` modules have been removed.  They had been available in the "
"platform specific ``Lib/plat-*/`` directories, but were chronically out of "
"date, inconsistently available across platforms, and unmaintained.  The "
"script that created these modules is still available in the source "
"distribution at `Tools/scripts/h2py.py "
"<https://github.com/python/cpython/blob/v3.6.15/Tools/scripts/h2py.py>`_."
msgstr ""
"未写入文档的 ``IN``, ``CDROM``, ``DLFCN``, ``TYPES``, ``CDIO`` 和 ``STROPTS`` "
"模块已被移除。 它们在平台专属的 ``Lib/plat-*/`` 目录下可用，但是早已过时，在各平台上访问方式不一致，并且无人维护。 "
"创建这些模块的脚本仍可在源代码发布包的 `Tools/scripts/h2py.py "
"<https://github.com/python/cpython/blob/v3.6.15/Tools/scripts/h2py.py>`_ "
"中获取。"

#: ../../whatsnew/3.6.rst:2138
msgid "The deprecated ``asynchat.fifo`` class has been removed."
msgstr "已弃用的 ``asynchat.fifo`` 类现已被移除。"

#: ../../whatsnew/3.6.rst:2142
msgid "Porting to Python 3.6"
msgstr "移植到Python 3.6"

#: ../../whatsnew/3.6.rst:2144
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.6.rst:2148
msgid "Changes in 'python' Command Behavior"
msgstr " 'python' 命令行为的变化"

#: ../../whatsnew/3.6.rst:2150
msgid ""
"The output of a special Python build with defined ``COUNT_ALLOCS``, "
"``SHOW_ALLOC_COUNT`` or ``SHOW_TRACK_COUNT`` macros is now off by default.  "
"It can be re-enabled using the ``-X showalloccount`` option. It now outputs "
"to ``stderr`` instead of ``stdout``. (Contributed by Serhiy Storchaka in "
":issue:`23034`.)"
msgstr ""
"带有 ``COUNT_ALLOCS``, ``SHOW_ALLOC_COUNT`` 或 ``SHOW_TRACK_COUNT`` 宏定义的特殊 "
"Python 编译版的输出现在默认被关闭。 可以使用 ``-X showalloccount`` 选项重新启用它。 现在它将输出到 ``stderr``"
" 而不是 ``stdout``。 （由 Serhiy Storchaka 在 :issue:`23034` 中贡献。）"

#: ../../whatsnew/3.6.rst:2158
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.6.rst:2160
msgid ""
":func:`open() <open>` will no longer allow combining the ``'U'`` mode flag "
"with ``'+'``. (Contributed by Jeff Balogh and John O'Connor in "
":issue:`2091`.)"
msgstr ""
":func:`open() <open>` 将不再允许组合使用 ``'U'`` 模式旗标与 ``'+'``。 （由 Jeff Balogh 和 John"
" O'Connor 在 :issue:`2091` 中贡献。）"

#: ../../whatsnew/3.6.rst:2164
msgid ""
":mod:`sqlite3` no longer implicitly commits an open transaction before DDL "
"statements."
msgstr ":mod:`sqlite3` 将不再隐式地在 DDL 语句之前提交未完成的事务。"

#: ../../whatsnew/3.6.rst:2167
msgid ""
"On Linux, :func:`os.urandom` now blocks until the system urandom entropy "
"pool is initialized to increase the security."
msgstr "在 Linux 上，现在 :func:`os.urandom` 会阻塞直到系统的 urandom 熵池被初始化以提升安全性。"

#: ../../whatsnew/3.6.rst:2170
msgid ""
"When :meth:`importlib.abc.Loader.exec_module` is defined, "
":meth:`importlib.abc.Loader.create_module` must also be defined."
msgstr ""
"当 :meth:`importlib.abc.Loader.exec_module` "
"被定义时，:meth:`importlib.abc.Loader.create_module` 也必须被定义。"

#: ../../whatsnew/3.6.rst:2173
msgid ""
":c:func:`PyErr_SetImportError` now sets :exc:`TypeError` when its **msg** "
"argument is not set. Previously only ``NULL`` was returned."
msgstr ""
"现在 :c:func:`PyErr_SetImportError` 当其 **msg** 参数未被设置时将设置 :exc:`TypeError`。 "
"在之前版本中仅返回 ``NULL``。"

#: ../../whatsnew/3.6.rst:2176
msgid ""
"The format of the :attr:`~codeobject.co_lnotab` attribute of code objects "
"changed to support a negative line number delta. By default, Python does not"
" emit bytecode with a negative line number delta. Functions using "
":attr:`frame.f_lineno`, ``PyFrame_GetLineNumber()`` or "
"``PyCode_Addr2Line()`` are not affected. Functions directly decoding "
":attr:`!co_lnotab` should be updated to use a signed 8-bit integer type for "
"the line number delta, but this is only required to support applications "
"using a negative line number delta. See ``Objects/lnotab_notes.txt`` for the"
" :attr:`!co_lnotab` format and how to decode it, and see the :pep:`511` for "
"the rationale."
msgstr ""
"代码对象的 :attr:`~codeobject.co_lnotab` 属性的格式被修改为支持负行号差值。 在默认情况下，Python "
"不会输出具有负行号差值的字节码。 使用 :attr:`frame.f_lineno`、``PyFrame_GetLineNumber()`` 或 "
"``PyCode_Addr2Line()`` 的函数将不受影响。 直接解码 :attr:`!co_lnotab` "
"的函数应当被更新以便为行号差值使用有符号的 8 位整数类型，但这只是对支持使用负行号差值的应用程序的要求。 有关 :attr:`!co_lnotab` "
"格式以及如何对其进行解码的详情参见 ``Objects/lnotab_notes.txt``，相关的理由参见 :pep:`511`。"

#: ../../whatsnew/3.6.rst:2187
msgid ""
"The functions in the :mod:`compileall` module now return booleans instead of"
" ``1`` or ``0`` to represent success or failure, respectively. Thanks to "
"booleans being a subclass of integers, this should only be an issue if you "
"were doing identity checks for ``1`` or ``0``. See :issue:`25768`."
msgstr ""
"现在 :mod:`compileall` 模块中的函数将返回布尔值而不是 ``1`` 或 ``0`` 来分别表示成功或失败。 "
"由于布尔值是整数的子类，这应当只有在你对 ``1`` 或 ``0`` 执行标识号检测时才会出现问题。 参见 :issue:`25768`。"

#: ../../whatsnew/3.6.rst:2192
msgid ""
"Reading the :attr:`~urllib.parse.SplitResult.port` attribute of "
":func:`urllib.parse.urlsplit` and :func:`~urllib.parse.urlparse` results now"
" raises :exc:`ValueError` for out-of-range values, rather than returning "
":const:`None`.  See :issue:`20059`."
msgstr ""
"现在读取 :func:`urllib.parse.urlsplit` 和 :func:`~urllib.parse.urlparse` 结果的 "
":attr:`~urllib.parse.SplitResult.port` 属性对于超出范围的值将引发 :exc:`ValueError`，而不是返回"
" :const:`None`。 参见 :issue:`20059`。"

#: ../../whatsnew/3.6.rst:2197
msgid ""
"The :mod:`!imp` module now raises a :exc:`DeprecationWarning` instead of "
":exc:`PendingDeprecationWarning`."
msgstr ""
":mod:`!imp` 模块现在将引发 :exc:`DeprecationWarning` 而不是 "
":exc:`PendingDeprecationWarning`。"

#: ../../whatsnew/3.6.rst:2200
msgid ""
"The following modules have had missing APIs added to their :attr:`__all__` "
"attributes to match the documented APIs: :mod:`calendar`, :mod:`!cgi`, "
":mod:`csv`, :mod:`~xml.etree.ElementTree`, :mod:`enum`, :mod:`fileinput`, "
":mod:`ftplib`, :mod:`logging`, :mod:`mailbox`, :mod:`mimetypes`, "
":mod:`optparse`, :mod:`plistlib`, :mod:`!smtpd`, :mod:`subprocess`, "
":mod:`tarfile`, :mod:`threading` and :mod:`wave`.  This means they will "
"export new symbols when ``import *`` is used. (Contributed by Joel Taddei "
"and Jacek Kołodziej in :issue:`23883`.)"
msgstr ""
"下列模块在其 :attr:`__all__` 属性中添加了缺失的 API 以匹配已写入文档的 API: :mod:`calendar`, "
":mod:`!cgi`, :mod:`csv`, :mod:`~xml.etree.ElementTree`, :mod:`enum`, "
":mod:`fileinput`, :mod:`ftplib`, :mod:`logging`, :mod:`mailbox`, "
":mod:`mimetypes`, :mod:`optparse`, :mod:`plistlib`, :mod:`!smtpd`, "
":mod:`subprocess`, :mod:`tarfile`, :mod:`threading` 和 :mod:`wave`。 这意味着当使用 "
"``import *`` 时它们将会导出新的符号。 （由 Joel Taddei 和 Jacek Kołodziej 在 :issue:`23883` "
"中贡献。）"

#: ../../whatsnew/3.6.rst:2211
msgid ""
"When performing a relative import, if ``__package__`` does not compare equal"
" to ``__spec__.parent`` then :exc:`ImportWarning` is raised. (Contributed by"
" Brett Cannon in :issue:`25791`.)"
msgstr ""
"当执行相对导入时，如果 ``__package__`` 与 ``__spec__.parent`` 的比较结果不相等则会引发 "
":exc:`ImportWarning`。 （由 Brett Cannon 在 :issue:`25791` 中贡献。）"

#: ../../whatsnew/3.6.rst:2215
msgid ""
"When a relative import is performed and no parent package is known, then "
":exc:`ImportError` will be raised. Previously, :exc:`SystemError` could be "
"raised. (Contributed by Brett Cannon in :issue:`18018`.)"
msgstr ""
"当执行相对导入而上级包未知时，则会引发 :exc:`ImportError`。 在之前版本中，可能会引发 :exc:`SystemError`。 （由 "
"Brett Cannon 在 :issue:`18018` 中贡献。）"

#: ../../whatsnew/3.6.rst:2219
msgid ""
"Servers based on the :mod:`socketserver` module, including those defined in "
":mod:`http.server`, :mod:`xmlrpc.server` and :mod:`wsgiref.simple_server`, "
"now only catch exceptions derived from :exc:`Exception`. Therefore if a "
"request handler raises an exception like :exc:`SystemExit` or "
":exc:`KeyboardInterrupt`, :meth:`~socketserver.BaseServer.handle_error` is "
"no longer called, and the exception will stop a single-threaded server. "
"(Contributed by Martin Panter in :issue:`23430`.)"
msgstr ""
"基于 :mod:`socketserver` 模块的服务器，包括在 :mod:`http.server`, :mod:`xmlrpc.server` 和"
" :mod:`wsgiref.simple_server` 定义的服务器，现在将只捕获派生自 :exc:`Exception` 的异常。 "
"因此如果一个请求处理器引发了 :exc:`SystemExit` 或 :exc:`KeyboardInterrupt` "
"之类的异常，:meth:`~socketserver.BaseServer.handle_error` 不再会被调用，异常将会停止单线程的服务器。 （由"
" Martin Panter 在 :issue:`23430` 中贡献。）"

#: ../../whatsnew/3.6.rst:2228
msgid ""
":func:`!spwd.getspnam` now raises a :exc:`PermissionError` instead of "
":exc:`KeyError` if the user doesn't have privileges."
msgstr ""
"如果用户没有权限，:func:`!spwd.getspnam` 现在会引发 :exc:`PermissionError` 而不是 "
":exc:`KeyError`。"

#: ../../whatsnew/3.6.rst:2231
msgid ""
"The :meth:`socket.socket.close` method now raises an exception if an error "
"(e.g. ``EBADF``) was reported by the underlying system call. (Contributed by"
" Martin Panter in :issue:`26685`.)"
msgstr ""
"现在 :meth:`socket.socket.close` 方法当下层系统调用报告错误 (例如 ``EBADF``) 时将会引发一个异常。 （由 "
"Martin Panter 在 :issue:`26685` 中贡献。）"

#: ../../whatsnew/3.6.rst:2235
msgid ""
"The *decode_data* argument for the :class:`!smtpd.SMTPChannel` and "
":class:`!smtpd.SMTPServer` constructors is now ``False`` by default. This "
"means that the argument passed to :meth:`!process_message` is now a bytes "
"object by default, and :meth:`!process_message` will be passed keyword "
"arguments. Code that has already been updated in accordance with the "
"deprecation warning generated by 3.5 will not be affected."
msgstr ""
"现在 :class:`!smtpd.SMTPChannel` 和 :class:`!smtpd.SMTPServer` 构造器的 "
"*decode_data* 参数默认为 ``False``。 这意味着传给 :meth:`!process_message` "
"的参数现在默认为字节串对象，而 :meth:`!process_message` 将被传入关键字参数。 已根据 3.5 "
"所生成的弃用警告进行更新的代码将不会受到影响。"

#: ../../whatsnew/3.6.rst:2243
msgid ""
"All optional arguments of the :func:`~json.dump`, :func:`~json.dumps`, "
":func:`~json.load` and :func:`~json.loads` functions and "
":class:`~json.JSONEncoder` and :class:`~json.JSONDecoder` class constructors"
" in the :mod:`json` module are now :ref:`keyword-only <keyword-"
"only_parameter>`. (Contributed by Serhiy Storchaka in :issue:`18726`.)"
msgstr ""
"现在 :mod:`json` 模块中 :func:`~json.dump`, :func:`~json.dumps`, "
":func:`~json.load` 和 :func:`~json.loads` 函数以及 :class:`~json.JSONEncoder` 和 "
":class:`~json.JSONDecoder` 类构造器的所有可选参数都是 :ref:`仅限关键字参数 <keyword-"
"only_parameter>`。 （由 Serhiy Storchaka 在 :issue:`18726` 中贡献。）"

#: ../../whatsnew/3.6.rst:2250
msgid ""
"Subclasses of :class:`type` which don't override ``type.__new__`` may no "
"longer use the one-argument form to get the type of an object."
msgstr ":class:`type` 的子类如果未重载 ``type.__new__``，将不再能使用一个参数的形式来获取对象的类型。"

#: ../../whatsnew/3.6.rst:2253
msgid ""
"As part of :pep:`487`, the handling of keyword arguments passed to "
":class:`type` (other than the metaclass hint, ``metaclass``) is now "
"consistently delegated to :meth:`object.__init_subclass__`. This means that "
":meth:`type.__new__` and :meth:`type.__init__` both now accept arbitrary "
"keyword arguments, but :meth:`object.__init_subclass__` (which is called "
"from :meth:`type.__new__`) will reject them by default. Custom metaclasses "
"accepting additional keyword arguments will need to adjust their calls to "
":meth:`type.__new__` (whether direct or via :class:`super`) accordingly."
msgstr ""
"作为 :pep:`487` 的一部分，对传递给 :class:`type` 的关键字参数的处理（元类提示 ``metaclass`` "
"除外）现在统一委托给 :meth:`object.__init_subclass__`。 这意味着 :meth:`type.__new__` 和 "
":meth:`type.__init__` 现在都接受任意的关键字参数，但 :meth:`object.__init_subclass__` （从 "
":meth:`type.__new__` 调用）默认将拒绝它们。 接受额外关键字参数的自定义元类需要相应调整对 :meth:`type.__new__`"
" 的调用（无论是直接调用还是通过 :class:`super` 间接调用）。"

#: ../../whatsnew/3.6.rst:2262
msgid ""
"In ``distutils.command.sdist.sdist``, the ``default_format`` attribute has "
"been removed and is no longer honored. Instead, the gzipped tarfile format "
"is the default on all platforms and no platform-specific selection is made. "
"In environments where distributions are built on Windows and zip "
"distributions are required, configure the project with a ``setup.cfg`` file "
"containing the following:"
msgstr ""
"在 ``distutils.command.sdist.sdist`` 中，``default_format`` 属性已被移除而不再被使用。 "
"作为代替，在所有平台上，带 gzip 的 tarfile 格式都是默认的而不会针对特定平台进行选择。 在发行版基于 Windows 构建且需要 zip "
"发行版的环境中，请使用包含以下内容的 ``setup.cfg`` 文件来配置项目："

#: ../../whatsnew/3.6.rst:2270
msgid ""
"[sdist]\n"
"formats=zip"
msgstr ""
"[sdist]\n"
"formats=zip"

#: ../../whatsnew/3.6.rst:2275
msgid ""
"This behavior has also been backported to earlier Python versions by "
"Setuptools 26.0.0."
msgstr "此行为已通过 Setuptools 26.0.0 反向移植到更早的 Python 版本中。"

#: ../../whatsnew/3.6.rst:2278
msgid ""
"In the :mod:`urllib.request` module and the "
":meth:`http.client.HTTPConnection.request` method, if no Content-Length "
"header field has been specified and the request body is a file object, it is"
" now sent with HTTP 1.1 chunked encoding. If a file object has to be sent to"
" a HTTP 1.0 server, the Content-Length value now has to be specified by the "
"caller. (Contributed by Demian Brecht and Rolf Krahl with tweaks from Martin"
" Panter in :issue:`12319`.)"
msgstr ""
"在 :mod:`urllib.request` 模块和 :meth:`http.client.HTTPConnection.request` "
"方法中，如果没有指定 Content-Length 标头字段并且请求体是一个文件对象，现在它将使用 HTTP 1.1 分块编码格式发送。 "
"如果必须要将一个文件对象发送给 HTTP 1.0 服务器，那么现在必须由调用方指定 Content-Length 值。 （由 Demian Brecht"
" 和 Rolf Krahl 在 :issue:`12319` 中贡献并由 Martin Panter 进行修改。）"

#: ../../whatsnew/3.6.rst:2287
msgid ""
"The :class:`~csv.DictReader` now returns rows of type "
":class:`~collections.OrderedDict`. (Contributed by Steve Holden in "
":issue:`27842`.)"
msgstr ""
"现在 :class:`~csv.DictReader` 将返回类型为 :class:`~collections.OrderedDict` 的行。 （由 "
"Steve Holden 在 :issue:`27842` 中贡献。）"

#: ../../whatsnew/3.6.rst:2291
msgid ""
"The :const:`!crypt.METHOD_CRYPT` will no longer be added to "
"``crypt.methods`` if unsupported by the platform. (Contributed by Victor "
"Stinner in :issue:`25287`.)"
msgstr ""
"在不受平台支持的情况下 :const:`!crypt.METHOD_CRYPT` 将不再被添加到 ``crypt.methods``。 （由 "
"Victor Stinner 在 :issue:`25287` 中贡献。）"

#: ../../whatsnew/3.6.rst:2299
msgid ""
"On Linux, :func:`ctypes.util.find_library` now looks in ``LD_LIBRARY_PATH`` "
"for shared libraries. (Contributed by Vinay Sajip in :issue:`9998`.)"
msgstr ""
"在 Linux 上，:func:`ctypes.util.find_library` 现在会到 ``LD_LIBRARY_PATH`` 中查找共享库。 "
"（由 Vinay Sajip 在 :issue:`9998` 中贡献。）"

#: ../../whatsnew/3.6.rst:2303
msgid ""
"The :class:`imaplib.IMAP4` class now handles flags containing the ``']'`` "
"character in messages sent from the server to improve real-world "
"compatibility. (Contributed by Lita Cho in :issue:`21815`.)"
msgstr ""
":class:`imaplib.IMAP4` 类现在可以处理服务器发送的消息中包含 ``']'`` 字符的旗标，以改善在现实世界中的兼容性。 （由 "
"Lita Cho 在 :issue:`21815` 中贡献。）"

#: ../../whatsnew/3.6.rst:2308
msgid ""
"The :func:`mmap.write() <mmap.write>` function now returns the number of "
"bytes written like other write methods. (Contributed by Jakub Stasiak in "
":issue:`26335`.)"
msgstr ""
"现在 :func:`mmap.write() <mmap.write>` 函数将像其他写入方法一样返回写入的字节数。 （由 Jakub Stasiak "
"在 :issue:`26335` 中贡献。）"

#: ../../whatsnew/3.6.rst:2312
msgid ""
"The :func:`pkgutil.iter_modules` and :func:`pkgutil.walk_packages` functions"
" now return :class:`~pkgutil.ModuleInfo` named tuples. (Contributed by "
"Ramchandra Apte in :issue:`17211`.)"
msgstr ""
"现在 :func:`pkgutil.iter_modules` 和 :func:`pkgutil.walk_packages` 函数将返回 "
":class:`~pkgutil.ModuleInfo` 具名元组。 （由 Ramchandra Apte 在 :issue:`17211` 中贡献。）"

#: ../../whatsnew/3.6.rst:2316
msgid ""
":func:`re.sub` now raises an error for invalid numerical group references in"
" replacement templates even if the pattern is not found in the string.  The "
"error message for invalid group references now includes the group index and "
"the position of the reference. (Contributed by SilentGhost, Serhiy Storchaka"
" in :issue:`25953`.)"
msgstr ""
"现在 :func:`re.sub` 即使未在字符串中找到模式也会针对替换模板中无效的数字分组引用引发错误。 "
"针对无效分组引用的错误消息现在将包括分组索引和引用位置。 （由 SilentGhost, Serhiy Storchaka 在 "
":issue:`25953` 中贡献。）"

#: ../../whatsnew/3.6.rst:2322
msgid ""
":class:`zipfile.ZipFile` will now raise :exc:`NotImplementedError` for "
"unrecognized compression values.  Previously a plain :exc:`RuntimeError` was"
" raised.  Additionally, calling :class:`~zipfile.ZipFile` methods on a "
"closed ZipFile or calling the :meth:`~zipfile.ZipFile.write` method on a "
"ZipFile created with mode ``'r'`` will raise a :exc:`ValueError`. "
"Previously, a :exc:`RuntimeError` was raised in those scenarios."
msgstr ""
"现在 :class:`zipfile.ZipFile` 对于无法识别的压缩值将引发 :exc:`NotImplementedError`。 "
"在之前版本中是引发简单的 :exc:`RuntimeError`。 此外，在已关闭的 ZipFile 上调用 "
":class:`~zipfile.ZipFile` 或者在使用 ``'r'`` 模式创建的 ZipFile 上调用 "
":meth:`~zipfile.ZipFile.write` 将引发 :exc:`ValueError`。 在之前版本中，对于这些场景是引发 "
":exc:`RuntimeError`。"

#: ../../whatsnew/3.6.rst:2329
msgid ""
"when custom metaclasses are combined with zero-argument :func:`super` or "
"direct references from methods to the implicit ``__class__`` closure "
"variable, the implicit ``__classcell__`` namespace entry must now be passed "
"up to ``type.__new__`` for initialisation. Failing to do so will result in a"
" :exc:`DeprecationWarning` in Python 3.6 and a :exc:`RuntimeError` in Python"
" 3.8."
msgstr ""
"当自定义元类与零参数的 :func:`super` 或从方法到隐式的 ``__class__`` 闭包变量的直接引用相结合时，隐式的 "
"``__classcell__`` 命名空间条目现在必须传到 ``type.__new__`` 进行初始化。 如果不这样做那么在 Python 3.6 "
"中将会导致 :exc:`DeprecationWarning` 而在 Python 3.8 中将会导致 :exc:`RuntimeError`。"

#: ../../whatsnew/3.6.rst:2336
msgid ""
"With the introduction of :exc:`ModuleNotFoundError`, import system consumers"
" may start expecting import system replacements to raise that more specific "
"exception when appropriate, rather than the less-specific "
":exc:`ImportError`. To provide future compatibility with such consumers, "
"implementers of alternative import systems that completely replace "
":func:`__import__` will need to update their implementations to raise the "
"new subclass when a module can't be found at all. Implementers of compliant "
"plugins to the default import system shouldn't need to make any changes, as "
"the default import system will raise the new subclass when appropriate."
msgstr ""
"随着 :exc:`ModuleNotFoundError` "
"的引入，导入系统的使用方可能会开始期望导入系统的替代品能在适当的时候引发更具体的异常，而非不够具体的 :exc:`ImportError`。 "
"为了在未来向此类使用方提供兼容性，完全取代 :func:`__import__` "
"的替代导入系统的实现者需要更新其实现以便在完全未找到模块时引发新的异常子类。 "
"兼容默认导入系统的插件的实现者不需要做任何更改，因为默认导入系统会在适当的时候引发新的子类。"

#: ../../whatsnew/3.6.rst:2348
msgid "Changes in the C API"
msgstr "C API 的变化"

#: ../../whatsnew/3.6.rst:2350
msgid ""
"The :c:func:`PyMem_Malloc` allocator family now uses the :ref:`pymalloc "
"allocator <pymalloc>` rather than the system :c:func:`malloc`. Applications "
"calling :c:func:`PyMem_Malloc` without holding the GIL can now crash. Set "
"the :envvar:`PYTHONMALLOC` environment variable to ``debug`` to validate the"
" usage of memory allocators in your application. See :issue:`26249`."
msgstr ""
"现在 :c:func:`PyMem_Malloc` 分配器族将使用 :ref:`pymalloc 分配器 <pymalloc>` 而不是系统 "
":c:func:`malloc`。 调用 :c:func:`PyMem_Malloc` 时未持有 GIL 的应用程序现在可能发生崩溃。 请将 "
":envvar:`PYTHONMALLOC` 环境变量设为 ``debug`` 以便在你的应用程序中验证内存分配器的使用。 参见 "
":issue:`26249`。"

#: ../../whatsnew/3.6.rst:2356
msgid ""
":c:func:`Py_Exit` (and the main interpreter) now override the exit status "
"with 120 if flushing buffered data failed.  See :issue:`5319`."
msgstr ""
"现在如果缓冲数据刷新失败 :c:func:`Py_Exit` (以及主解释器) 会将退出状态重写为 120。 参见 :issue:`5319`。"

#: ../../whatsnew/3.6.rst:2361
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.6.rst:2363
msgid ""
"There have been several major changes to the :term:`bytecode` in Python 3.6."
msgstr "在 Python 3.6 中对 :term:`bytecode` 进行了一些重大修改。"

#: ../../whatsnew/3.6.rst:2365
msgid ""
"The Python interpreter now uses a 16-bit wordcode instead of bytecode. "
"(Contributed by Demur Rumed with input and reviews from Serhiy Storchaka and"
" Victor Stinner in :issue:`26647` and :issue:`28050`.)"
msgstr ""
"Python 解释器现在使用 16 位字代码而不是字节代码。 （由 Demur Rumed 在 :issue:`26647` 和 "
":issue:`28050` 中贡献并得到来自 Serhiy Storchaka 和 Victor Stinner 的协助和评估。）"

#: ../../whatsnew/3.6.rst:2369
msgid ""
"The new :opcode:`!FORMAT_VALUE` and :opcode:`BUILD_STRING` opcodes as part "
"of the  :ref:`formatted string literal <whatsnew36-pep498>` implementation. "
"(Contributed by Eric Smith in :issue:`25483` and Serhiy Storchaka in "
":issue:`27078`.)"
msgstr ""
"新增 :opcode:`!FORMAT_VALUE` 和 :opcode:`BUILD_STRING` 操作码作为 :ref:`格式化字符串字面值 "
"<whatsnew36-pep498>` 实现的组成部分。 （由 Eric Smith 在 :issue:`25483` 中以及 Serhiy "
"Storchaka 在 :issue:`27078` 中贡献。）"

#: ../../whatsnew/3.6.rst:2374
msgid ""
"The new :opcode:`!BUILD_CONST_KEY_MAP` opcode to optimize the creation of "
"dictionaries with constant keys. (Contributed by Serhiy Storchaka in "
":issue:`27140`.)"
msgstr ""
"新增 :opcode:`!BUILD_CONST_KEY_MAP` 操作码用于优化具有常量键的字典的创建。 （由 Serhiy Storchaka 在 "
":issue:`27140` 中贡献。）"

#: ../../whatsnew/3.6.rst:2378
msgid ""
"The function call opcodes have been heavily reworked for better performance "
"and simpler implementation. The :opcode:`MAKE_FUNCTION`, "
":opcode:`!CALL_FUNCTION`, :opcode:`!CALL_FUNCTION_KW` and "
":opcode:`!BUILD_MAP_UNPACK_WITH_CALL` opcodes have been modified, the new "
":opcode:`CALL_FUNCTION_EX` and :opcode:`!BUILD_TUPLE_UNPACK_WITH_CALL` have "
"been added, and ``CALL_FUNCTION_VAR``, ``CALL_FUNCTION_VAR_KW`` and "
"``MAKE_CLOSURE`` opcodes have been removed. (Contributed by Demur Rumed in "
":issue:`27095`, and Serhiy Storchaka in :issue:`27213`, :issue:`28257`.)"
msgstr ""
"函数调用操作码进行了大幅改进以提升性能并简化实现。 :opcode:`MAKE_FUNCTION`, :opcode:`!CALL_FUNCTION`,"
" :opcode:`!CALL_FUNCTION_KW` 和 :opcode:`!BUILD_MAP_UNPACK_WITH_CALL` "
"操作码已被修改，新增了 :opcode:`CALL_FUNCTION_EX` 和 "
":opcode:`!BUILD_TUPLE_UNPACK_WITH_CALL`，并移除了 ``CALL_FUNCTION_VAR``, "
"``CALL_FUNCTION_VAR_KW`` 和 ``MAKE_CLOSURE`` 操作码。 （由 Demur Rumed 在 "
":issue:`27095` 中，以及 Serhiy Storchaka 在 :issue:`27213`, :issue:`28257` 中贡献。）"

#: ../../whatsnew/3.6.rst:2389
msgid ""
"The new :opcode:`SETUP_ANNOTATIONS` and :opcode:`!STORE_ANNOTATION` opcodes "
"have been added to support the new :term:`variable annotation` syntax. "
"(Contributed by Ivan Levkivskyi in :issue:`27985`.)"
msgstr ""
"新增了 :opcode:`SETUP_ANNOTATIONS` 和 :opcode:`!STORE_ANNOTATION` 操作码以支持新的 "
":term:`variable annotation` 语法。 （由 Ivan Levkivskyi 在 :issue:`27985` 中贡献。）"

#: ../../whatsnew/3.6.rst:2395
msgid "Notable changes in Python 3.6.2"
msgstr "Python 3.6.2 中的重要变化"

#: ../../whatsnew/3.6.rst:2398
msgid "New ``make regen-all`` build target"
msgstr "新增 ``make regen-all`` 构建目标"

#: ../../whatsnew/3.6.rst:2400
msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be "
"compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to implicitly"
" recompile generated files based on file modification times."
msgstr ""
"为了简化交叉编译，并确保 CPython 能够可靠地编译而不需要已存在可用的 Python 版本，基于 autotools "
"的构建系统将不再尝试根据文件修改时间隐式地重新编译已生成的文件。"

#: ../../whatsnew/3.6.rst:2405
msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version of "
"Python has already been built based on the pregenerated versions)."
msgstr ""
"取而代之的是，新增了一个 ``make regen-all`` 命令以便在需要时强制重新生成这些文件（例如在基于预生成版本构建了 Python "
"的初始版本之后）。"

#: ../../whatsnew/3.6.rst:2409
msgid ""
"More selective regeneration targets are also defined - see "
":source:`Makefile.pre.in` for details."
msgstr "还定义了其他一些更具选择性的重生成目标 —— 详情参见 :source:`Makefile.pre.in`。"

#: ../../whatsnew/3.6.rst:2412 ../../whatsnew/3.6.rst:2425
msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr "（由 Victor Stinner 在 :issue:`23404` 中贡献。）"

#: ../../whatsnew/3.6.rst:2418
msgid "Removal of ``make touch`` build target"
msgstr "移除了 ``make touch`` 构建目标"

#: ../../whatsnew/3.6.rst:2420
msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr "之前用于通过更新生成文件的修改时间来请求隐式的重新生成这些文件的 ``make touch`` 构建目标已被移除。"

#: ../../whatsnew/3.6.rst:2423
msgid "It has been replaced by the new ``make regen-all`` target."
msgstr "它已被新的 ``make regen-all`` 目标所替代。"

#: ../../whatsnew/3.6.rst:2431
msgid "Notable changes in Python 3.6.4"
msgstr "Python 3.6.4 中的重要变化"

#: ../../whatsnew/3.6.rst:2433
msgid ""
"The ``PyExc_RecursionErrorInst`` singleton that was part of the public API "
"has been removed as its members being never cleared may cause a segfault "
"during finalization of the interpreter. (Contributed by Xavier de Gaye in "
":issue:`22898` and :issue:`30697`.)"
msgstr ""
"曾经作为 API 一部分的 ``PyExc_RecursionErrorInst`` "
"单例已被移除，因为它的成员永远不会被清理，可能在解释器的最终化过程中导致段错误。 （由 Xavier de Gaye 在 :issue:`22898` "
"和 :issue:`30697` 中贡献。）"

#: ../../whatsnew/3.6.rst:2440
msgid "Notable changes in Python 3.6.5"
msgstr "Python 3.6.5 中的重要变化"

#: ../../whatsnew/3.6.rst:2442
msgid ""
"The :func:`locale.localeconv` function now sets temporarily the ``LC_CTYPE``"
" locale to the ``LC_NUMERIC`` locale in some cases. (Contributed by Victor "
"Stinner in :issue:`31900`.)"
msgstr ""
"在某些情况下 :func:`locale.localeconv` 函数现在会临时将 ``LC_CTYPE`` 语言区域设为 ``LC_NUMERIC``"
" 语言区域。 （由 Victor Stinner 在 :issue:`31900` 中贡献。）"

#: ../../whatsnew/3.6.rst:2448
msgid "Notable changes in Python 3.6.7"
msgstr "Python 3.6.7 中的重要变化"

#: ../../whatsnew/3.6.rst:2450
msgid ""
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process external"
" entities by default. See also :gh:`61441`."
msgstr ""
"在默认情况下 :mod:`xml.dom.minidom` 和 :mod:`xml.sax` 模块将不再处理外部实例。 另请参阅 "
":gh:`61441`。"

#: ../../whatsnew/3.6.rst:2453
msgid ""
"In 3.6.7 the :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token"
" when provided with input that does not have a trailing new line.  This "
"behavior now matches what the C tokenizer does internally. (Contributed by "
"Ammar Askar in :issue:`33899`.)"
msgstr ""
"在 3.6.7 中当提供不带末尾换行符的输入时 :mod:`tokenize` 模块现在会隐式地发出 ``NEWLINE`` 形符。 此行为现在已与 C"
" 分词器的内部行为相匹配。 （由 Ammar Askar 在 :issue:`33899` 中贡献。）"

#: ../../whatsnew/3.6.rst:2459
msgid "Notable changes in Python 3.6.10"
msgstr "Python 3.6.10 中的重要变化"

#: ../../whatsnew/3.6.rst:2461
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint` is no longer supported. This "
"is because of the behavior of the socket option ``SO_REUSEADDR`` in UDP. For"
" more details, see the documentation for "
"``loop.create_datagram_endpoint()``. (Contributed by Kyle Stanley, Antoine "
"Pitrou, and Yury Selivanov in :issue:`37228`.)"
msgstr ""
"出于重要的安全性考量，:meth:`asyncio.loop.create_datagram_endpoint` 的 *reuse_address* "
"形参不再被支持。 这是由 UDP 中的套接字选项 ``SO_REUSEADDR`` 的行为导致的。 更多细节请参阅 "
"``loop.create_datagram_endpoint()`` 的文档。 （由 Kyle Stanley, Antoine Pitrou 和 "
"Yury Selivanov 在 :issue:`37228` 中贡献。。）"

#: ../../whatsnew/3.6.rst:2469
msgid "Notable changes in Python 3.6.13"
msgstr "Python 3.6.13 中的重要变化"

#: ../../whatsnew/3.6.rst:2471
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and "
":func:`urllib.parse.parse_qsl`.  Due to security concerns, and to conform "
"with newer W3C recommendations, this has been changed to allow only a single"
" separator key, with ``&`` as the default.  This change also affects "
":func:`!cgi.parse` and :func:`!cgi.parse_multipart` as they use the affected"
" functions internally. For more details, please see their respective "
"documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin"
" in :issue:`42967`.)"
msgstr ""
"较早的 Python 版本允许同时使用 ``;`` 和 ``&`` 作为 :func:`urllib.parse.parse_qs` 和 "
":func:`urllib.parse.parse_qsl` 中查询形参的分隔符。 出于安全考虑，并遵循新版的 W3C "
"建议，这已被更改为只允许一种分隔符，默认为 ``&``。 这一改变也会影响 :func:`!cgi.parse` 和 "
":func:`!cgi.parse_multipart` 因为它们在内部使用了受影响的函数。 要了解更多细节，请参阅相应的文档。 （由 Adam "
"Goldschmidt, Senthil Kumaran 和 Ken Jin 在 :issue:`42967` 中贡献。）"

#: ../../whatsnew/3.6.rst:2482
msgid "Notable changes in Python 3.6.14"
msgstr "Python 3.6.14 中的重要变化"

#: ../../whatsnew/3.6.rst:2484
msgid ""
"A security fix alters the :class:`ftplib.FTP` behavior to not trust the IPv4"
" address sent from the remote server when setting up a passive data channel."
"  We reuse the ftp server IP address instead.  For unusual code requiring "
"the old behavior, set a ``trust_server_pasv_ipv4_address`` attribute on your"
" FTP instance to ``True``.  (See :gh:`87451`)"
msgstr ""
"新的安全修正将 :class:`ftplib.FTP` 的行为改成当设置被动数据通道时不信任远程服务器所发送的 IPv4 地址。 我们会改为重用 ftp"
" 服务器的 IP 地址。 对于需要原先的行为的不常见代码，请在你的 FTP 实例上将 "
"``trust_server_pasv_ipv4_address`` 属性设为 ``True``。 （参见 :gh:`87451`。）"

#: ../../whatsnew/3.6.rst:2490
msgid ""
"The presence of newline or tab characters in parts of a URL allows for some "
"forms of attacks. Following the WHATWG specification that updates RFC 3986, "
"ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters are stripped from "
"the URL by the parser :func:`urllib.parse` preventing such attacks. The "
"removal characters are controlled by a new module level variable "
"``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See :gh:`88048`)"
msgstr ""
"在 URL 中存在换行符或制表符可能会导致某种形式的攻击。 根据更新了 RFC 3986 的 WHATWG 规范，解析器 "
":func:`urllib.parse` 将从 URL 中去除 ASCII 换行符 ``\\n``, ``\\r`` 和制表符 ``\\t`` "
"以防止这种攻击。 移除的字符将由一个新的模块层级变量 ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE`` 来控制。"
" （参见 :gh:`88048`。）"
