# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.9.rst:3
msgid "What's New In Python 3.9"
msgstr "Python 3.9 有什么新变化"

#: ../../whatsnew/3.9.rst:0
msgid "Editor"
msgstr "编者"

#: ../../whatsnew/3.9.rst:5
msgid "Łukasz Langa"
msgstr "Łukasz Langa"

#: ../../whatsnew/3.9.rst:45
msgid ""
"This article explains the new features in Python 3.9, compared to 3.8. "
"Python 3.9 was released on October 5, 2020."
msgstr "本文介绍了 Python 3.9 相比 3.8 的新特性。 Python 3.9 发布于 2020 年 10 月 5 日。"

#: ../../whatsnew/3.9.rst:48
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr "详情请参阅 :ref:`更新日志 <changelog>`。"

#: ../../whatsnew/3.9.rst:52
msgid ":pep:`596` - Python 3.9 Release Schedule"
msgstr ":pep:`596` - Python 3.9 发布计划"

#: ../../whatsnew/3.9.rst:56
msgid "Summary -- Release highlights"
msgstr "摘要 -- 发布重点"

#: ../../whatsnew/3.9.rst:61
msgid "New syntax features:"
msgstr "新的语法特性："

#: ../../whatsnew/3.9.rst:63
msgid ":pep:`584`, union operators added to ``dict``;"
msgstr ":pep:`584`，为 ``dict`` 增加合并运算符；"

#: ../../whatsnew/3.9.rst:64
msgid ":pep:`585`, type hinting generics in standard collections;"
msgstr ":pep:`585`，标准多项集中的类型标注泛型。"

#: ../../whatsnew/3.9.rst:65
msgid ":pep:`614`, relaxed grammar restrictions on decorators."
msgstr ":pep:`614`，放宽对装饰器的语法限制。"

#: ../../whatsnew/3.9.rst:67
msgid "New built-in features:"
msgstr "新的内置特性："

#: ../../whatsnew/3.9.rst:69
msgid ":pep:`616`, string methods to remove prefixes and suffixes."
msgstr ":pep:`616`，移除前缀和后缀的字符串方法。"

#: ../../whatsnew/3.9.rst:71
msgid "New features in the standard library:"
msgstr "标准库中的新特性:"

#: ../../whatsnew/3.9.rst:73
msgid ":pep:`593`, flexible function and variable annotations;"
msgstr ":pep:`593`，灵活函数和变量注解；"

#: ../../whatsnew/3.9.rst:74
msgid ""
":func:`os.pidfd_open` added that allows process management without races and"
" signals."
msgstr "添加了 :func:`os.pidfd_open` 以允许不带竞争和信号的进程管理。"

#: ../../whatsnew/3.9.rst:77
msgid "Interpreter improvements:"
msgstr "解释器的改进:"

#: ../../whatsnew/3.9.rst:79
msgid ""
":pep:`573`, fast access to module state from methods of C extension types;"
msgstr ":pep:`573`，从 C 扩展类型的方法快速访问模块状态；"

#: ../../whatsnew/3.9.rst:81
msgid ":pep:`617`, CPython now uses a new parser based on PEG;"
msgstr ":pep:`617`，CPython 现在使用基于 PEG 的新解析器；"

#: ../../whatsnew/3.9.rst:82
msgid ""
"a number of Python builtins (range, tuple, set, frozenset, list, dict) are "
"now sped up using :pep:`590` vectorcall;"
msgstr ""
"一些 Python 内置类型（range、tuple、set、frozenset、list、dict）现已使用 :pep:`590` "
"vectorcall 加速；"

#: ../../whatsnew/3.9.rst:84
msgid "garbage collection does not block on resurrected objects;"
msgstr "垃圾回收不会因恢复的对象而阻塞；"

#: ../../whatsnew/3.9.rst:85
msgid ""
"a number of Python modules (:mod:`_abc`, :mod:`audioop`, :mod:`_bz2`, "
":mod:`_codecs`, :mod:`_contextvars`, :mod:`_crypt`, :mod:`_functools`, "
":mod:`_json`, :mod:`_locale`, :mod:`math`, :mod:`operator`, :mod:`resource`,"
" :mod:`time`, :mod:`_weakref`) now use multiphase initialization as defined "
"by PEP 489;"
msgstr ""
"一些 Python "
"模块（:mod:`_abc`、:mod:`audioop`、:mod:`_bz2`、:mod:`_codecs`、:mod:`_contextvars`、:mod:`_crypt`、:mod:`_functools`、:mod:`_json`、:mod:`_locale`、:mod:`math`、:mod:`operator`、:mod:`resource`、:mod:`time`、:mod:`_weakref`）现已使用"
" PEP 489 中定义的多段初始化；"

#: ../../whatsnew/3.9.rst:90
msgid ""
"a number of standard library modules (:mod:`audioop`, :mod:`ast`, "
":mod:`grp`, :mod:`_hashlib`, :mod:`pwd`, :mod:`_posixsubprocess`, "
":mod:`random`, :mod:`select`, :mod:`struct`, :mod:`termios`, :mod:`zlib`) "
"are now using the stable ABI defined by PEP 384."
msgstr ""
"一些标准库模块 "
"(:mod:`audioop`、:mod:`ast`、:mod:`grp`、:mod:`_hashlib`、:mod:`pwd`、:mod:`_posixsubprocess`、:mod:`random`、:mod:`select`、:mod:`struct`、:mod:`termios`、:mod:`zlib`)"
" 现已使用 PEP 384 中定义的稳定 ABI。"

#: ../../whatsnew/3.9.rst:95
msgid "New library modules:"
msgstr "新的库模块："

#: ../../whatsnew/3.9.rst:97
msgid ""
":pep:`615`, the IANA Time Zone Database is now present in the standard "
"library in the :mod:`zoneinfo` module;"
msgstr ":pep:`615`，标准库的 :mod:`zoneinfo` 模块现已支持 IANA 时区数据库；"

#: ../../whatsnew/3.9.rst:99
msgid ""
"an implementation of a topological sort of a graph is now provided in the "
"new :mod:`graphlib` module."
msgstr "图的拓扑排序实现现在已由新的 :mod:`graphlib` 模块提供。"

#: ../../whatsnew/3.9.rst:102
msgid "Release process changes:"
msgstr "发布进程的变化:"

#: ../../whatsnew/3.9.rst:104
msgid ":pep:`602`, CPython adopts an annual release cycle."
msgstr ":pep:`602`，CPython 采用年度发布周期。"

#: ../../whatsnew/3.9.rst:108
msgid "You should check for DeprecationWarning in your code"
msgstr "请检查代码中的 DeprecationWarning。"

#: ../../whatsnew/3.9.rst:110
msgid ""
"When Python 2.7 was still supported, a lot of functionality in Python 3 was "
"kept for backward compatibility with Python 2.7. With the end of Python 2 "
"support, these backward compatibility layers have been removed, or will be "
"removed soon. Most of them emitted a :exc:`DeprecationWarning` warning for "
"several years. For example, using ``collections.Mapping`` instead of "
"``collections.abc.Mapping`` emits a :exc:`DeprecationWarning` since Python "
"3.3, released in 2012."
msgstr ""
"Python 2.7 支持未终止时，为了实现向下兼容 Python 2.7，Python 3  保留了许多旧版功能。Python 2 "
"的支持终止后，已经移除了一部分向下兼容层，剩余部分很快也会被移除。这几年，大部分兼容层都会触发 :exc:`DeprecationWarning` "
"警告。例如，2012 年发布 Python 3.3 后，用 ``collections.Mapping`` 替代 "
"``collections.abc.Mapping`` 就会触发 :exc:`DeprecationWarning`。"

#: ../../whatsnew/3.9.rst:118
msgid ""
"Test your application with the :option:`-W` ``default`` command-line option "
"to see :exc:`DeprecationWarning` and :exc:`PendingDeprecationWarning`, or "
"even with :option:`-W` ``error`` to treat them as errors. :ref:`Warnings "
"Filter <warning-filter>` can be used to ignore warnings from third-party "
"code."
msgstr ""
"请用 :option:`-W` ``default`` 命令行选项测试应用程序来查看 :exc:`DeprecationWarning` 和 "
":exc:`PendingDeprecationWarning`，甚至可以用 :option:`-W` ``error`` 将它们视为错误。 可以用 "
":ref:`警告过滤器 <warning-filter>` 忽略来自第三方代码的警告。"

#: ../../whatsnew/3.9.rst:123
msgid ""
"Python 3.9 is the last version providing those Python 2 backward "
"compatibility layers, to give more time to Python projects maintainers to "
"organize the removal of the Python 2 support and add support for Python 3.9."
msgstr ""
"Python 3.9 是最后一个提供 Python 2 向下兼容层的版本，以给予 Python 项目维护者更多时间移除 Python 2 支持，添加 "
"Python 3.9 支持。"

#: ../../whatsnew/3.9.rst:127
msgid ""
"Aliases to :ref:`Abstract Base Classes <collections-abstract-base-classes>` "
"in the :mod:`collections` module, like ``collections.Mapping`` alias to "
":class:`collections.abc.Mapping`, are kept for one last release for backward"
" compatibility. They will be removed from Python 3.10."
msgstr ""
":mod:`collections` 模块中 :ref:`抽象基类 <collections-abstract-base-classes>` "
"的别名，例如 :class:`collections.abc.Mapping` 的别名 ``collections.Mapping`` "
"会为向下兼容最后保留一个发行版。 这些内容将在 Python 3.10 中移除。"

#: ../../whatsnew/3.9.rst:132
msgid ""
"More generally, try to run your tests in the :ref:`Python Development Mode "
"<devmode>` which helps to prepare your code to make it compatible with the "
"next Python version."
msgstr ""
"更通俗的说法是，请在 :ref:`Python 开发模式 <devmode>` 下运行测试，这样做有助于让代码兼容 Python 的后续版本。"

#: ../../whatsnew/3.9.rst:136
msgid ""
"Note: a number of pre-existing deprecations were removed in this version of "
"Python as well. Consult the :ref:`removed-in-python-39` section."
msgstr "注：一些前期已弃用的内容也将在此 Python 版本中移除。 详见 :ref:`removed-in-python-39` 一节。"

#: ../../whatsnew/3.9.rst:141 ../../whatsnew/3.9.rst:1274
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.9.rst:144
msgid "Dictionary Merge & Update Operators"
msgstr "字典合并与更新运算符"

#: ../../whatsnew/3.9.rst:146
msgid ""
"Merge (``|``) and update (``|=``) operators have been added to the built-in "
":class:`dict` class. Those complement the existing ``dict.update`` and "
"``{**d1, **d2}`` methods of merging dictionaries."
msgstr ""
"合并 (``|``) 与更新 (``|=``) 运算符已被加入内置的 :class:`dict` 类。 它们为现有的 ``dict.update`` 和"
" ``{**d1, **d2}`` 字典合并方法提供了补充。"

#: ../../whatsnew/3.9.rst:150 ../../whatsnew/3.9.rst:283
msgid "Example::"
msgstr "示例::"

#: ../../whatsnew/3.9.rst:159
msgid ""
"See :pep:`584` for a full description. (Contributed by Brandt Bucher in "
":issue:`36144`.)"
msgstr "详见 :pep:`584`。（Brandt Bucher 在 :issue:`36144` 中的贡献。）"

#: ../../whatsnew/3.9.rst:163
msgid "New String Methods to Remove Prefixes and Suffixes"
msgstr "新增用于移除前缀和后缀的字符串方法"

#: ../../whatsnew/3.9.rst:165
msgid ""
":meth:`str.removeprefix(prefix)<str.removeprefix>` and "
":meth:`str.removesuffix(suffix)<str.removesuffix>` have been added to easily"
" remove an unneeded prefix or a suffix from a string. Corresponding "
"``bytes``, ``bytearray``, and ``collections.UserString`` methods have also "
"been added. See :pep:`616` for a full description. (Contributed by Dennis "
"Sweeney in :issue:`39939`.)"
msgstr ""
"增加了 :meth:`str.removeprefix(prefix)<str.removeprefix>` 和 "
":meth:`str.removesuffix(suffix)<str.removesuffix>` 用于方便地从字符串移除不需要的前缀或后缀。 "
"也增加了 ``bytes``, ``bytearray`` 以及 ``collections.UserString`` 的对应方法。 请参阅 "
":pep:`616` 了解详情。 （由 Dennis Sweeney 在 :issue:`39939` 中贡献。）"

#: ../../whatsnew/3.9.rst:173
msgid "Type Hinting Generics in Standard Collections"
msgstr "标准多项集中的类型标注泛型"

#: ../../whatsnew/3.9.rst:175
msgid ""
"In type annotations you can now use built-in collection types such as "
"``list`` and ``dict`` as generic types instead of importing the "
"corresponding capitalized types (e.g. ``List`` or ``Dict``) from ``typing``."
"  Some other types in the standard library are also now generic, for example"
" ``queue.Queue``."
msgstr ""
"在类型标注中现在你可以使用内置多项集类型例如 ``list`` 和 ``dict`` 作为通用类型而不必从 ``typing`` "
"导入对应的大写形式类型名 (例如 ``List`` 和 ``Dict``)。 标准库中的其他一些类型现在同样也是通用的，例如 "
"``queue.Queue``。"

#: ../../whatsnew/3.9.rst:181 ../../whatsnew/3.9.rst:1162
msgid "Example:"
msgstr "示例:"

#: ../../whatsnew/3.9.rst:189
msgid ""
"See :pep:`585` for more details.  (Contributed by Guido van Rossum, Ethan "
"Smith, and Batuhan Taşkaya in :issue:`39481`.)"
msgstr ""
"详见 :pep:`585`。（由 Guido van Rossum、Ethan Smith 和 Batuhan Taşkaya 在 "
":issue:`39481` 中贡献。）"

#: ../../whatsnew/3.9.rst:193
msgid "New Parser"
msgstr "新的解析器"

#: ../../whatsnew/3.9.rst:195
msgid ""
"Python 3.9 uses a new parser, based on `PEG "
"<https://en.wikipedia.org/wiki/Parsing_expression_grammar>`_ instead of "
"`LL(1) <https://en.wikipedia.org/wiki/LL_parser>`_.  The new parser's "
"performance is roughly comparable to that of the old parser, but the PEG "
"formalism is more flexible than LL(1) when it comes to designing new "
"language features.  We'll start using this flexibility in Python 3.10 and "
"later."
msgstr ""
"Python 3.9 使用于基于 `PEG "
"<https://en.wikipedia.org/wiki/Parsing_expression_grammar>`_ 的新解析器替代 `LL(1) "
"<https://en.wikipedia.org/wiki/LL_parser>`_。 新解析器的性能与旧解析器大致相当，但 PEG "
"在设计新语言特性时的形式化比 LL(1) 更灵活。 我们将在 Python 3.10 及之后版本中开始使用这种灵活性。"

#: ../../whatsnew/3.9.rst:203
msgid ""
"The :mod:`ast` module uses the new parser and produces the same AST as the "
"old parser."
msgstr ":mod:`ast` 模块会使用新解析器并会生成与旧解析器一致的 AST。"

#: ../../whatsnew/3.9.rst:206
msgid ""
"In Python 3.10, the old parser will be deleted and so will all functionality"
" that depends on it (primarily the :mod:`parser` module, which has long been"
" deprecated).  In Python 3.9 *only*, you can switch back to the LL(1) parser"
" using a command line switch (``-X oldparser``) or an environment variable "
"(``PYTHONOLDPARSER=1``)."
msgstr ""
"在 Python 3.10 中，旧解析器将被移除，依赖于它的所有功能也将被移除（主要是 :mod:`parser` 模块，它早已被弃用）。  *只有* "
"在 Python 3.9 中，你可以使用命令行开关 (``-X oldparser``) 或环境变量 (``PYTHONOLDPARSER=1``) "
"切换回 LL(1) 解析器。"

#: ../../whatsnew/3.9.rst:212
msgid ""
"See :pep:`617` for more details.  (Contributed by Guido van Rossum, Pablo "
"Galindo and Lysandros Nikolaou in :issue:`40334`.)"
msgstr ""
"请参阅 :pep:`617` 了解详情。 （由 Guido van Rossum, Pablo Galindo 和 Lysandros Nikolaou"
" 在 :issue:`40334` 中贡献。）"

#: ../../whatsnew/3.9.rst:217
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.9.rst:219
msgid ""
":func:`__import__` now raises :exc:`ImportError` instead of "
":exc:`ValueError`, which used to occur when a relative import went past its "
"top-level package. (Contributed by Ngalim Siregar in :issue:`37444`.)"
msgstr ""
":func:`__import__` 现在会引发 :exc:`ImportError` 而不是 "
":exc:`ValueError`，后者曾经会在相对导入超出其最高层级包时发生。 （由 Ngalim Siregar 在 :issue:`37444` "
"中贡献。）"

#: ../../whatsnew/3.9.rst:224
msgid ""
"Python now gets the absolute path of the script filename specified on the "
"command line (ex: ``python3 script.py``): the ``__file__`` attribute of the "
":mod:`__main__` module became an absolute path, rather than a relative path."
" These paths now remain valid after the current directory is changed by "
":func:`os.chdir`. As a side effect, the traceback also displays the absolute"
" path for :mod:`__main__` module frames in this case. (Contributed by Victor"
" Stinner in :issue:`20443`.)"
msgstr ""
"Python 现在会获取命令行中指定的脚本文件名 (例如: ``python3 script.py``) 的绝对路径: :mod:`__main__` "
"模块的 ``__file__`` 属性将是一个绝对路径，而不是相对路径。 现在此路径在当前目录通过 :func:`os.chdir` "
"被改变后仍将保持有效。 作为附带效果，回溯信息也将在此情况下为 :mod:`__main__` 模块帧显示绝对路径。 （由 Victor Stinner"
" 在 :issue:`20443` 中贡献。）"

#: ../../whatsnew/3.9.rst:232
msgid ""
"In the :ref:`Python Development Mode <devmode>` and in :ref:`debug build "
"<debug-build>`, the *encoding* and *errors* arguments are now checked for "
"string encoding and decoding operations. Examples: :func:`open`, "
":meth:`str.encode` and :meth:`bytes.decode`."
msgstr ""
"在 :ref:`Python 开发模式 <devmode>` 以及 :ref:`调试编译版本 <debug-build>` "
"中，现在会针对字符串编码和解码操作检查 *encoding* 和 *errors* 参数。 例如: :func:`open`, "
":meth:`str.encode` 和 :meth:`bytes.decode`。"

#: ../../whatsnew/3.9.rst:237
msgid ""
"By default, for best performance, the *errors* argument is only checked at "
"the first encoding/decoding error and the *encoding* argument is sometimes "
"ignored for empty strings. (Contributed by Victor Stinner in "
":issue:`37388`.)"
msgstr ""
"默认设置下，为保证性能，*errors* 参数只会在第一次发生编码/解码错误时被检查，并且对于空字符串 *encoding* 参数有时会被忽略。 （由 "
"Victor Stinner 在 :issue:`37388` 中贡献。）"

#: ../../whatsnew/3.9.rst:242
msgid ""
"``\"\".replace(\"\", s, n)`` now returns ``s`` instead of an empty string "
"for all non-zero ``n``.  It is now consistent with ``\"\".replace(\"\", "
"s)``. There are similar changes for :class:`bytes` and :class:`bytearray` "
"objects. (Contributed by Serhiy Storchaka in :issue:`28029`.)"
msgstr ""
"``\"\".replace(\"\", s, n)`` 对于所有非零的 ``n`` 都将返回 ``s`` 而不是空字符串。 现在此方法会与 "
"``\"\".replace(\"\", s)`` 保持一致。 对于 :class:`bytes` 和 :class:`bytearray` "
"对象也有类似的修改。 （由 Serhiy Storchaka 在 :issue:`28029` 中贡献。）"

#: ../../whatsnew/3.9.rst:247
msgid ""
"Any valid expression can now be used as a :term:`decorator`.  Previously, "
"the grammar was much more restrictive.  See :pep:`614` for details. "
"(Contributed by Brandt Bucher in :issue:`39702`.)"
msgstr ""
"任何有效的表达式现在都可被用作 :term:`decorator`。 在之前版本中，相关语法则更为严格。 请参阅 :pep:`614` 了解详情。 （由"
" Brandt Bucher 在 :issue:`39702` 中贡献。）"

#: ../../whatsnew/3.9.rst:251
msgid ""
"Improved help for the :mod:`typing` module. Docstrings are now shown for all"
" special forms and special generic aliases (like ``Union`` and ``List``). "
"Using :func:`help` with generic alias like ``List[int]`` will show the help "
"for the correspondent concrete type (``list`` in this case). (Contributed by"
" Serhiy Storchaka in :issue:`40257`.)"
msgstr ""
"改进了 :mod:`typing` 模块的帮助信息。 现在将为所有特殊形式和特殊通用别名 (例如 ``Union`` 和 ``List``) "
"显示文档字符串。 使用 :func:`help` 时传入通用别名例如 ``List[int]`` 将显示对应实体类型 (这里对应的是 ``list``)"
" 的帮助信息。 （由 Serhiy Storchaka 在 :issue:`40257` 中贡献。）"

#: ../../whatsnew/3.9.rst:257
msgid ""
"Parallel running of :meth:`~agen.aclose` / :meth:`~agen.asend` / "
":meth:`~agen.athrow` is now prohibited, and ``ag_running`` now reflects the "
"actual running status of the async generator. (Contributed by Yury Selivanov"
" in :issue:`30773`.)"
msgstr ""
":meth:`~agen.aclose` / :meth:`~agen.asend` / :meth:`~agen.athrow` "
"的并行运行现在已被禁止，且 ``ag_running`` 现在会反映异步生成器的实际运行状态。 （由 Yury Selivanov 在 "
":issue:`30773` 中贡献。）"

#: ../../whatsnew/3.9.rst:262
msgid ""
"Unexpected errors in calling the ``__iter__`` method are no longer masked by"
" ``TypeError`` in the :keyword:`in` operator and functions "
":func:`~operator.contains`, :func:`~operator.indexOf` and "
":func:`~operator.countOf` of the :mod:`operator` module. (Contributed by "
"Serhiy Storchaka in :issue:`40824`.)"
msgstr ""
"调用 ``__iter__`` 方法时发生的非预期错误不会再被 :keyword:`in` 运算符以及 :mod:`operator` 的 "
":func:`~operator.contains`, :func:`~operator.indexOf` 和 "
":func:`~operator.countOf` 中的 ``TypeError`` 所掩盖。 （由 Serhiy Storchaka 在 "
":issue:`40824` 中贡献。）"

#: ../../whatsnew/3.9.rst:268
msgid ""
"Unparenthesized lambda expressions can no longer be the expression part in "
"an ``if`` clause in comprehensions and generator expressions. See "
":issue:`41848` and :issue:`43755` for details."
msgstr ""
"未加圆括号的 lambda 表达式不能再作为推导式和生成器表达式的 ``if`` 子句的表达式部分。 请参阅 :issue:`41848` 和 "
":issue:`43755` 了解详情。"

#: ../../whatsnew/3.9.rst:274
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.9.rst:277
msgid "zoneinfo"
msgstr "zoneinfo"

#: ../../whatsnew/3.9.rst:279
msgid ""
"The :mod:`zoneinfo` module brings support for the IANA time zone database to"
" the standard library. It adds :class:`zoneinfo.ZoneInfo`, a concrete "
":class:`datetime.tzinfo` implementation backed by the system's time zone "
"data."
msgstr ""
":mod:`zoneinfo` 模块为标准库引入了 IANA 时区数据库。 它添加了 "
":class:`zoneinfo.ZoneInfo`，这是一个基于系统时区数据的实体 :class:`datetime.tzinfo` 实现。"

#: ../../whatsnew/3.9.rst:303
msgid ""
"As a fall-back source of data for platforms that don't ship the IANA "
"database, the |tzdata|_ module was released as a first-party package -- "
"distributed via PyPI and maintained by the CPython core team."
msgstr ""
"作为不包含 IANA 数据库的平台的一个回退数据源，还以第一方软件包的形式发布了 |tzdata|_ 模块 -- 通过 PyPI 发行并由 "
"CPython 核心团队维护。"

#: ../../whatsnew/3.9.rst:312
msgid ""
":pep:`615` -- Support for the IANA Time Zone Database in the Standard "
"Library"
msgstr ":pep:`615` -- 在标准库中支持 IANA 时区数据库"

#: ../../whatsnew/3.9.rst:313
msgid "PEP written and implemented by Paul Ganssle"
msgstr "PEP 由 Paul Ganssle 撰写并实现"

#: ../../whatsnew/3.9.rst:317
msgid "graphlib"
msgstr "graphlib"

#: ../../whatsnew/3.9.rst:319
msgid ""
"A new module, :mod:`graphlib`, was added that contains the "
":class:`graphlib.TopologicalSorter` class to offer functionality to perform "
"topological sorting of graphs. (Contributed by Pablo Galindo, Tim Peters and"
" Larry Hastings in :issue:`17005`.)"
msgstr ""
"添加了新的 :mod:`graphlib` 模块，其中包含 :class:`graphlib.TopologicalSorter` "
"类来提供图的拓扑排序功能。 （由 Pablo Galindo, Tim Peters 和 Larry Hastings 在 :issue:`17005`"
" 中贡献。）"

#: ../../whatsnew/3.9.rst:326
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.9.rst:329
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.9.rst:331
msgid ""
"Added the *indent* option to :func:`~ast.dump` which allows it to produce a "
"multiline indented output. (Contributed by Serhiy Storchaka in "
":issue:`37995`.)"
msgstr ""
"将 *indent* 选项添加到 :func:`~ast.dump`，这允许它产生多行缩进的输出。 （由 Serhiy Storchaka 在 "
":issue:`37995` 中贡献。）"

#: ../../whatsnew/3.9.rst:335
msgid ""
"Added :func:`ast.unparse` as a function in the :mod:`ast` module that can be"
" used to unparse an :class:`ast.AST` object and produce a string with code "
"that would produce an equivalent :class:`ast.AST` object when parsed. "
"(Contributed by Pablo Galindo and Batuhan Taskaya in :issue:`38870`.)"
msgstr ""
"添加了 :func:`ast.unparse` 作为 :mod:`ast` 模块中的一个函数，它可被用来反解析 :class:`ast.AST` "
"对象并产生相应的代码字符串，当它被解析时将会产生一个等价的 :class:`ast.AST` 对象。 （由 Pablo Galindo 和 "
"Batuhan Taskaya 在 :issue:`38870` 中贡献。）"

#: ../../whatsnew/3.9.rst:340
msgid ""
"Added docstrings to AST nodes that contains the ASDL signature used to "
"construct that node. (Contributed by Batuhan Taskaya in :issue:`39638`.)"
msgstr ""
"为 AST 节点添加了文档字符串，其中包含 ASDL 签名，可被用来构造对应的节点。 （由 Batuhan Taskaya 在 "
":issue:`39638` 中贡献。）"

#: ../../whatsnew/3.9.rst:344
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.9.rst:346
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint` is no longer supported. This "
"is because of the behavior of the socket option ``SO_REUSEADDR`` in UDP. For"
" more details, see the documentation for "
"``loop.create_datagram_endpoint()``. (Contributed by Kyle Stanley, Antoine "
"Pitrou, and Yury Selivanov in :issue:`37228`.)"
msgstr ""
"出于重要的安全性考量，:meth:`asyncio.loop.create_datagram_endpoint` 的 *reuse_address* "
"形参不再被支持。 这是由 UDP 中的套接字选项 ``SO_REUSEADDR`` 的行为导致的。 更多细节请参阅 "
"``loop.create_datagram_endpoint()`` 的文档。 （由 Kyle Stanley, Antoine Pitrou 和 "
"Yury Selivanov 在 :issue:`37228` 中贡献。。）"

#: ../../whatsnew/3.9.rst:353
msgid ""
"Added a new :term:`coroutine` "
":meth:`~asyncio.loop.shutdown_default_executor` that schedules a shutdown "
"for the default executor that waits on the "
":class:`~concurrent.futures.ThreadPoolExecutor` to finish closing. Also, "
":func:`asyncio.run` has been updated to use the new :term:`coroutine`. "
"(Contributed by Kyle Stanley in :issue:`34037`.)"
msgstr ""
"添加了新的 :term:`coroutine` "
":meth:`~asyncio.loop.shutdown_default_executor`，它可为等待 "
":class:`~concurrent.futures.ThreadPoolExecutor` 结束关闭的默认执行器安排关闭日程操作。 "
"此外，:func:`asyncio.run` 已被更新以使用新的 :term:`coroutine`。 （由 Kyle Stanley 在 "
":issue:`34037` 中贡献。）"

#: ../../whatsnew/3.9.rst:359
msgid ""
"Added :class:`asyncio.PidfdChildWatcher`, a Linux-specific child watcher "
"implementation that polls process file descriptors. (:issue:`38692`)"
msgstr ""
"添加了 :class:`asyncio.PidfdChildWatcher`，这是一个 Linux 专属的子监视器实现，它负责轮询进程的文件描述符。 "
"(:issue:`38692`)"

#: ../../whatsnew/3.9.rst:362
msgid ""
"Added a new :term:`coroutine` :func:`asyncio.to_thread`. It is mainly used "
"for running IO-bound functions in a separate thread to avoid blocking the "
"event loop, and essentially works as a high-level version of "
":meth:`~asyncio.loop.run_in_executor` that can directly take keyword "
"arguments. (Contributed by Kyle Stanley and Yury Selivanov in "
":issue:`32309`.)"
msgstr ""
"添加了新的 :term:`coroutine` :func:`asyncio.to_thread`。 它主要被用于在单独线程中运行 IO "
"密集型函数以避免阻塞事件循环，实质上就相当于是 :meth:`~asyncio.loop.run_in_executor` "
"的高层级版本，可直接接受关键字参数。 （由 Kyle Stanley 和 Yury Selivanov 在 :issue:`32309` 中贡献。）"

#: ../../whatsnew/3.9.rst:368
msgid ""
"When cancelling the task due to a timeout, :meth:`asyncio.wait_for` will now"
" wait until the cancellation is complete also in the case when *timeout* is "
"<= 0, like it does with positive timeouts. (Contributed by Elvis "
"Pranskevichus in :issue:`32751`.)"
msgstr ""
"当由于超时而取消任务时，:meth:`asyncio.wait_for` 现在将会等待直到也在 *timeout* 值 <= 0 的情况下完成取消。 "
"就像 timeout 值为正数时一样。 （由 Elvis Pranskevichus 在 :issue:`32751` 中贡献。）"

#: ../../whatsnew/3.9.rst:373
msgid ""
":mod:`asyncio` now raises :exc:`TyperError` when calling incompatible "
"methods with an :class:`ssl.SSLSocket` socket. (Contributed by Ido Michael "
"in :issue:`37404`.)"
msgstr ""
"当附带 :class:`ssl.SSLSocket` 套接字调用不兼容的方法时 :mod:`asyncio` 现在会引发 "
":exc:`TyperError`。 （由 Ido Michael 在 :issue:`37404` 中贡献。）"

#: ../../whatsnew/3.9.rst:378
msgid "compileall"
msgstr "compileall"

#: ../../whatsnew/3.9.rst:380
msgid ""
"Added new possibility to use hardlinks for duplicated ``.pyc`` files: "
"*hardlink_dupes* parameter and --hardlink-dupes command line option. "
"(Contributed by  Lumír 'Frenzy' Balhar in :issue:`40495`.)"
msgstr ""
"为重复的 ``.pyc`` 文件添加了使用硬软件的可能性: *hardlink_dupes* 形参以及 --hardlink-dupes 命令行选项。 "
"（由 Lumír 'Frenzy' Balhar 在 :issue:`40495` 中贡献。）"

#: ../../whatsnew/3.9.rst:383
msgid ""
"Added new options for path manipulation in resulting ``.pyc`` files: "
"*stripdir*, *prependdir*, *limit_sl_dest* parameters and -s, -p, -e command "
"line options. Added the possibility to specify the option for an "
"optimization level multiple times. (Contributed by Lumír 'Frenzy' Balhar in "
":issue:`38112`.)"
msgstr ""
"新增了一些用于在结果 ``.pyc`` 文件中操纵路径的选项: *stripdir*, *prependdir*, *limit_sl_dest* "
"形参以及 -s, -p, -e 命令行选项。 并使得为优化等级多次指定选项成为可能。 （由 Lumír 'Frenzy' Balhar 在 "
":issue:`38112` 中贡献。）"

#: ../../whatsnew/3.9.rst:388
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.9.rst:390
msgid ""
"Added a new *cancel_futures* parameter to "
":meth:`concurrent.futures.Executor.shutdown` that cancels all pending "
"futures which have not started running, instead of waiting for them to "
"complete before shutting down the executor. (Contributed by Kyle Stanley in "
":issue:`39349`.)"
msgstr ""
"将新的 *cancel_futures* 形参添加到 "
":meth:`concurrent.futures.Executor.shutdown`，可以取消尚未开始运行的所有挂起的 "
"Future，而不必等待它们完成运行再关闭执行器。 （由 Kyle Stanley 在 :issue:`39349` 中贡献。）"

#: ../../whatsnew/3.9.rst:396
msgid ""
"Removed daemon threads from :class:`~concurrent.futures.ThreadPoolExecutor` "
"and :class:`~concurrent.futures.ProcessPoolExecutor`. This improves "
"compatibility with subinterpreters and predictability in their shutdown "
"processes. (Contributed by Kyle Stanley in :issue:`39812`.)"
msgstr ""
"从 :class:`~concurrent.futures.ThreadPoolExecutor` 和 "
":class:`~concurrent.futures.ProcessPoolExecutor` 中移除了守护线程。 "
"这改善与与子解释器的兼容性及它们在关闭进程时的可预测性。 （由 Kyle Stanley 在 :issue:`39812` 中贡献。）"

#: ../../whatsnew/3.9.rst:401
msgid ""
"Workers in :class:`~concurrent.futures.ProcessPoolExecutor` are now spawned "
"on demand, only when there are no available idle workers to reuse. This "
"optimizes startup overhead and reduces the amount of lost CPU time to idle "
"workers. (Contributed by Kyle Stanley in :issue:`39207`.)"
msgstr ""
"现在 :class:`~concurrent.futures.ProcessPoolExecutor` "
"中的工作进程仅会在没有可重用的空闲工作进程时按需产生。 这优化了启动开销并减少了由空闲工作进程导致的 CPU 时间损失。 （由 Kyle Stanley"
" 在 :issue:`39207` 中贡献。）"

#: ../../whatsnew/3.9.rst:407
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.9.rst:409
msgid ""
"Added :func:`curses.get_escdelay`, :func:`curses.set_escdelay`, "
":func:`curses.get_tabsize`, and :func:`curses.set_tabsize` functions. "
"(Contributed by Anthony Sottile in :issue:`38312`.)"
msgstr ""
"增加了 :func:`curses.get_escdelay`, :func:`curses.set_escdelay`, "
":func:`curses.get_tabsize` 以及 :func:`curses.set_tabsize` 函数。（由 Anthony "
"Sottile 在 :issue:`38312` 中贡献。）"

#: ../../whatsnew/3.9.rst:414
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.9.rst:415
msgid ""
"The :meth:`~datetime.date.isocalendar()` of :class:`datetime.date` and "
":meth:`~datetime.datetime.isocalendar()` of :class:`datetime.datetime` "
"methods now returns a :func:`~collections.namedtuple` instead of a "
":class:`tuple`. (Contributed by Dong-hee Na in :issue:`24416`.)"
msgstr ""
":class:`datetime.date` 的 :meth:`~datetime.date.isocalendar()` 以及 "
":class:`datetime.datetime` 的 :meth:`~datetime.datetime.isocalendar()` "
"等方法现在将返回 :func:`~collections.namedtuple` 而不是 :class:`tuple`。 （由 Dong-hee Na "
"在 :issue:`24416` 中贡献。）"

#: ../../whatsnew/3.9.rst:421
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.9.rst:423
msgid ""
"The :command:`upload` command now creates SHA2-256 and Blake2b-256 hash "
"digests. It skips MD5 on platforms that block MD5 digest. (Contributed by "
"Christian Heimes in :issue:`40698`.)"
msgstr ""
":command:`upload` 命令现在会创建 SHA2-256 和 Blake2b-256 哈希摘要。 它会在禁用 MD5 摘要的平台上跳过 "
"MD5。 （由 Christian Heimes 在 :issue:`40698` 中贡献。）"

#: ../../whatsnew/3.9.rst:428
msgid "fcntl"
msgstr "fcntl"

#: ../../whatsnew/3.9.rst:430
msgid ""
"Added constants :data:`~fcntl.F_OFD_GETLK`, :data:`~fcntl.F_OFD_SETLK` and "
":data:`~fcntl.F_OFD_SETLKW`. (Contributed by Dong-hee Na in :issue:`38602`.)"
msgstr ""
"增加了 :data:`~fcntl.F_OFD_GETLK`, :data:`~fcntl.F_OFD_SETLK` 和 "
":data:`~fcntl.F_OFD_SETLKW` 等常量。 （由 Dong-hee Na 在 :issue:`38602` 中贡献。）"

#: ../../whatsnew/3.9.rst:435
msgid "ftplib"
msgstr "ftplib"

#: ../../whatsnew/3.9.rst:437
msgid ""
":class:`~ftplib.FTP` and :class:`~ftplib.FTP_TLS` now raise a "
":class:`ValueError` if the given timeout for their constructor is zero to "
"prevent the creation of a non-blocking socket. (Contributed by Dong-hee Na "
"in :issue:`39259`.)"
msgstr ""
"现在 :class:`~ftplib.FTP` 和 :class:`~ftplib.FTP_TLS` "
"当它们的构造器所给定的超时参数为零以防止创建非阻塞套接字时会引发 :class:`ValueError`。 （由 Dong-hee Na 在 "
":issue:`39259` 中贡献。）"

#: ../../whatsnew/3.9.rst:442
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.9.rst:444
msgid ""
"When the garbage collector makes a collection in which some objects "
"resurrect (they are reachable from outside the isolated cycles after the "
"finalizers have been executed), do not block the collection of all objects "
"that are still unreachable. (Contributed by Pablo Galindo and Tim Peters in "
":issue:`38379`.)"
msgstr ""
"当垃圾回收器进行某些复活对象的收集时（在终结器被执行之后这些对象可以在隔离周期之外被访问），不会阻止对所有仍然无法访问的对象的收集。 （由 Pablo "
"Galindo 和 Tim Peters 在 :issue:`38379` 中贡献。）"

#: ../../whatsnew/3.9.rst:449
msgid ""
"Added a new function :func:`gc.is_finalized` to check if an object has been "
"finalized by the garbage collector. (Contributed by Pablo Galindo in "
":issue:`39322`.)"
msgstr ""
"增加了一个新的函数 :func:`gc.is_finalized` 用来检测一个对象是否已被垃圾回收器所终结。 （由 Pablo Galindo 在 "
":issue:`39322` 中贡献。）"

#: ../../whatsnew/3.9.rst:454
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.9.rst:456
msgid ""
"The :mod:`hashlib` module can now use SHA3 hashes and SHAKE XOF from OpenSSL"
" when available. (Contributed by Christian Heimes in :issue:`37630`.)"
msgstr ""
":mod:`hashlib` 模块现在会在可能的情况下使用 OpenSSL 中的 SHA3 哈希和 SHAKE XOF。 （由 Christian "
"Heimes 在 :issue:`37630` 中贡献。）"

#: ../../whatsnew/3.9.rst:460
msgid ""
"Builtin hash modules can now be disabled with ``./configure --without-"
"builtin-hashlib-hashes`` or selectively enabled with e.g. ``./configure "
"--with-builtin-hashlib-hashes=sha3,blake2`` to force use of OpenSSL based "
"implementation. (Contributed by Christian Heimes in :issue:`40479`)"
msgstr ""
"内置的哈希模块现在可通过 ``./configure --without-builtin-hashlib-hashes`` 禁用或通过 "
"``./configure --with-builtin-hashlib-hashes=sha3,blake2`` 这样的形式有选择地启用以强制使用基于"
" OpenSSL 的实现。 （由 Christian Heimes 在 :issue:`40479` 中贡献）"

#: ../../whatsnew/3.9.rst:468
msgid "http"
msgstr "http"

#: ../../whatsnew/3.9.rst:470
msgid ""
"HTTP status codes ``103 EARLY_HINTS``, ``418 IM_A_TEAPOT`` and ``425 "
"TOO_EARLY`` are added to :class:`http.HTTPStatus`. (Contributed by Dong-hee "
"Na in :issue:`39509` and Ross Rhodes in :issue:`39507`.)"
msgstr ""
"添加 HTTP 状态码 ``103 EARLY_HINTS``, ``418 IM_A_TEAPOT`` 和 ``425 TOO_EARLY`` 到 "
":class:`http.HTTPStatus`。 （由 Dong-hee Na 在 :issue:`39509` 以及 Ross Rhodes 在 "
":issue:`39507` 中贡献。）"

#: ../../whatsnew/3.9.rst:474
msgid "IDLE and idlelib"
msgstr "IDLE 与 idlelib"

#: ../../whatsnew/3.9.rst:476
msgid ""
"Added option to toggle cursor blink off.  (Contributed by Zackery Spytz in "
":issue:`4603`.)"
msgstr "添加了切换光标闪烁停止的选项。 （由 Zackery Spytz 在 :issue:`4603` 中贡献。）"

#: ../../whatsnew/3.9.rst:479
msgid ""
"Escape key now closes IDLE completion windows.  (Contributed by Johnny "
"Najera in :issue:`38944`.)"
msgstr "Esc 键现在会关闭 IDLE 补全提示窗口。 （由 Johnny Najera 在 :issue:`38944` 中贡献。）"

#: ../../whatsnew/3.9.rst:482
msgid ""
"Added keywords to module name completion list.  (Contributed by Terry J. "
"Reedy in :issue:`37765`.)"
msgstr "添加关键字到模块名称补全列表。 （由 Terry J. Reedy 在 :issue:`37765` 中贡献。）"

#: ../../whatsnew/3.9.rst:485
msgid "New in 3.9 maintenance releases"
msgstr "3.9 维护版本中的新内容"

#: ../../whatsnew/3.9.rst:487
msgid ""
"Make IDLE invoke :func:`sys.excepthook` (when started without '-n'). User "
"hooks were previously ignored.  (Contributed by Ken Hilton in "
":issue:`43008`.)"
msgstr ""
"使 IDLE 调用 :func:`sys.excepthook` （当启动时没有 '-n' ）。用户钩子以前是被忽略的。 (由 Ken Hilton 在"
" :issue:`43008` 中贡献。)"

#: ../../whatsnew/3.9.rst:491
msgid "The changes above have been backported to 3.8 maintenance releases."
msgstr "上述修改已被反向移植到 3.8 维护发行版中。"

#: ../../whatsnew/3.9.rst:493
msgid ""
"Rearrange the settings dialog.  Split the General tab into Windows and "
"Shell/Ed tabs.  Move help sources, which extend the Help menu, to the "
"Extensions tab.  Make space for new options and shorten the dialog. The "
"latter makes the dialog better fit small screens.  (Contributed by Terry Jan"
" Reedy in :issue:`40468`.)  Move the indent space setting from the Font tab "
"to the new Windows tab.  (Contributed by Mark Roseman and Terry Jan Reedy in"
" :issue:`33962`.)"
msgstr ""
"重新安排设置对话框。 将常规选项卡分成 Windows 和 Shell/Ed 选项卡。 "
"将扩展帮助菜单的帮助源移至扩展标签。为新选项留出空间，并缩短对话框。后者使对话框更适合小屏幕。 (由 Terry Jan Reedy 贡献于 "
":issue:`40468` 。) 将缩进空间设置从字体标签移到新的 Windows 标签。 (由 Mark Roseman 和 Terry Jan "
"Reedy 在 :issue:`33962` 中提供)。"

#: ../../whatsnew/3.9.rst:501
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"对 ``.pyi`` 文件应用语法高亮。 （由 Alex Waygood 和 Terry Jan Reedy 在 :issue:`45447` "
"中贡献。）"

#: ../../whatsnew/3.9.rst:505
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.9.rst:507
msgid ""
":class:`~imaplib.IMAP4` and :class:`~imaplib.IMAP4_SSL` now have an optional"
" *timeout* parameter for their constructors. Also, the "
":meth:`~imaplib.IMAP4.open` method now has an optional *timeout* parameter "
"with this change. The overridden methods of :class:`~imaplib.IMAP4_SSL` and "
":class:`~imaplib.IMAP4_stream` were applied to this change. (Contributed by "
"Dong-hee Na in :issue:`38615`.)"
msgstr ""
"现在 :class:`~imaplib.IMAP4` 和 :class:`~imaplib.IMAP4_SSL` 的构造器具有可选的 *timeout*"
" 形参。 并且，现在 :meth:`~imaplib.IMAP4.open` 方法也具有可选的 *timeout* 形参提供同样的修改。 "
":class:`~imaplib.IMAP4_SSL` 和 :class:`~imaplib.IMAP4_stream` "
"中被重载的方法也应用了这个修改。 （由 Dong-hee Na 在 :issue:`38615` 中贡献。）"

#: ../../whatsnew/3.9.rst:514
msgid ""
":meth:`imaplib.IMAP4.unselect` is added. :meth:`imaplib.IMAP4.unselect` "
"frees server's resources associated with the selected mailbox and returns "
"the server to the authenticated state. This command performs the same "
"actions as :meth:`imaplib.IMAP4.close`, except that no messages are "
"permanently removed from the currently selected mailbox. (Contributed by "
"Dong-hee Na in :issue:`40375`.)"
msgstr ""
"增加了 :meth:`imaplib.IMAP4.unselect`。 :meth:`imaplib.IMAP4.unselect` "
"会释放关联到选定邮箱的服务器资源并将服务器返回到已认证状态。 此命令会执行与 :meth:`imaplib.IMAP4.close` "
"相同的动作，区别在于它不会从当前选定邮箱中永久性地移除消息。 （由 Dong-hee Na 在 :issue:`40375` 中贡献。）"

#: ../../whatsnew/3.9.rst:522
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.9.rst:524
msgid ""
"To improve consistency with import statements, "
":func:`importlib.util.resolve_name` now raises :exc:`ImportError` instead of"
" :exc:`ValueError` for invalid relative import attempts. (Contributed by "
"Ngalim Siregar in :issue:`37444`.)"
msgstr ""
"为提升与 import 语句的一致性，现在 :func:`importlib.util.resolve_name` 对于无效的相对导入尝试会引发 "
":exc:`ImportError` 而不是 :exc:`ValueError`。 （由 Ngalim Siregar 在 :issue:`37444`"
" 中贡献。）"

#: ../../whatsnew/3.9.rst:529
msgid ""
"Import loaders which publish immutable module objects can now publish "
"immutable packages in addition to individual modules. (Contributed by Dino "
"Viehland in :issue:`39336`.)"
msgstr ""
"发布不可变模块对象的导入加载器除了发布单独模块以外现在也可以发布不可变包。 （由 Dino Viehland 在 :issue:`39336` "
"中贡献。）"

#: ../../whatsnew/3.9.rst:533
msgid ""
"Added :func:`importlib.resources.files` function with support for "
"subdirectories in package data, matching backport in ``importlib_resources``"
" version 1.5. (Contributed by Jason R. Coombs in :issue:`39791`.)"
msgstr ""
"添加了带有对包数据中子目录支持的 :func:`importlib.resources.files` 函数，与 "
"``importlib_resources`` 1.5 版的反向端口相匹配。（由 Jason R. Coombs 在 :issue:`39791` "
"中贡献。）"

#: ../../whatsnew/3.9.rst:538
msgid ""
"Refreshed ``importlib.metadata`` from ``importlib_metadata`` version 1.6.1."
msgstr "来自 ``importlib_metadata`` 1.6.1 版的已更新 ``importlib.metadata``。"

#: ../../whatsnew/3.9.rst:541
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.9.rst:543
msgid ""
":attr:`inspect.BoundArguments.arguments` is changed from ``OrderedDict`` to "
"regular dict.  (Contributed by Inada Naoki in :issue:`36350` and "
":issue:`39775`.)"
msgstr ""
":attr:`inspect.BoundArguments.arguments` 已从 ``OrderedDict`` 改为常规字典。 （由 Inada"
" Naoki 在 :issue:`36350` 和 :issue:`39775` 中贡献。）"

#: ../../whatsnew/3.9.rst:547
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.9.rst:549
msgid ""
":mod:`ipaddress` now supports IPv6 Scoped Addresses (IPv6 address with "
"suffix ``%<scope_id>``)."
msgstr ":mod:`ipaddress` 现在支持 IPv6 作用域地址（即带有 ``%<scope_id>`` 前缀的 IPv6 地址）。"

#: ../../whatsnew/3.9.rst:551
msgid ""
"Scoped IPv6 addresses can be parsed using :class:`ipaddress.IPv6Address`. If"
" present, scope zone ID is available through the "
":attr:`~ipaddress.IPv6Address.scope_id` attribute. (Contributed by Oleksandr"
" Pavliuk in :issue:`34788`.)"
msgstr ""
"IPv6 作用域地址可使用 :class:`ipaddress.IPv6Address` 来解析。 作用域的区 ID 如果存在，可通过 "
":attr:`~ipaddress.IPv6Address.scope_id` 属性来获取。 （由 Oleksandr Pavliuk 在 "
":issue:`34788` 中贡献。）"

#: ../../whatsnew/3.9.rst:555
msgid ""
"Starting with Python 3.9.5 the :mod:`ipaddress` module no longer accepts any"
" leading zeros in IPv4 address strings. (Contributed by Christian Heimes in "
":issue:`36384`)."
msgstr ""
"从 Python 3.9.5 开始 :mod:`ipaddress` 模块不再接受 IPv4 地址字符串中有任何前缀的零。 （由 Christian "
"Heimes 在 :issue:`36384` 中贡献。）"

#: ../../whatsnew/3.9.rst:560
msgid "math"
msgstr "math"

#: ../../whatsnew/3.9.rst:562
msgid ""
"Expanded the :func:`math.gcd` function to handle multiple arguments. "
"Formerly, it only supported two arguments. (Contributed by Serhiy Storchaka "
"in :issue:`39648`.)"
msgstr ""
"对 :func:`math.gcd` 函数进行了扩展以处理多个参数。 在之前版本中，它只支持两个参数。 （由 Serhiy Storchaka 在 "
":issue:`39648` 中贡献。）"

#: ../../whatsnew/3.9.rst:566
msgid ""
"Added :func:`math.lcm`: return the least common multiple of specified "
"arguments. (Contributed by Mark Dickinson, Ananthakrishnan and Serhiy "
"Storchaka in :issue:`39479` and :issue:`39648`.)"
msgstr ""
"增加了 :func:`math.lcm`: 返回指定参数的最小公倍数。 （由 Mark Dickinson, Ananthakrishnan 和 "
"Serhiy Storchaka 在 :issue:`39479` 和 :issue:`39648` 中贡献。）"

#: ../../whatsnew/3.9.rst:570
msgid ""
"Added :func:`math.nextafter`: return the next floating-point value after *x*"
" towards *y*. (Contributed by Victor Stinner in :issue:`39288`.)"
msgstr ""
"增加了 :func:`math.nextafter`: 返回从 *x* 往 *y* 方向的下一个浮点数值。 （由 Victor Stinner 在 "
":issue:`39288` 中贡献。）"

#: ../../whatsnew/3.9.rst:574
msgid ""
"Added :func:`math.ulp`: return the value of the least significant bit of a "
"float. (Contributed by Victor Stinner in :issue:`39310`.)"
msgstr ""
"增加了 :func:`math.ulp`: 返回一个浮点数的最小有效比特位。 （由 Victor Stinner 在 :issue:`39310` "
"中贡献。）"

#: ../../whatsnew/3.9.rst:579
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.9.rst:581
msgid ""
"The :class:`multiprocessing.SimpleQueue` class has a new "
":meth:`~multiprocessing.SimpleQueue.close` method to explicitly close the "
"queue. (Contributed by Victor Stinner in :issue:`30966`.)"
msgstr ""
":class:`multiprocessing.SimpleQueue` 类新增了 "
":meth:`~multiprocessing.SimpleQueue.close` 方法用来显式地关闭队列。 （由 Victor Stinner 在 "
":issue:`30966` 中贡献。）"

#: ../../whatsnew/3.9.rst:587
msgid "nntplib"
msgstr "nntplib"

#: ../../whatsnew/3.9.rst:589
msgid ""
":class:`~nntplib.NNTP` and :class:`~nntplib.NNTP_SSL` now raise a "
":class:`ValueError` if the given timeout for their constructor is zero to "
"prevent the creation of a non-blocking socket. (Contributed by Dong-hee Na "
"in :issue:`39259`.)"
msgstr ""
"现在 :class:`~nntplib.NNTP` 和 :class:`~nntplib.NNTP_SSL` "
"当它们的构造器所给定的超时参数为零以防止创建非阻塞套接字时会引发 :class:`ValueError`。 （由 Dong-hee Na 在 "
":issue:`39259` 中贡献。）"

#: ../../whatsnew/3.9.rst:594
msgid "os"
msgstr "os"

#: ../../whatsnew/3.9.rst:596
msgid ""
"Added :data:`~os.CLD_KILLED` and :data:`~os.CLD_STOPPED` for "
":attr:`si_code`. (Contributed by Dong-hee Na in :issue:`38493`.)"
msgstr ""
"增加了 :data:`~os.CLD_KILLED` 和 :data:`~os.CLD_STOPPED` 作为 :attr:`si_code`。 （由 "
"Dong-hee Na 在 :issue:`38493` 中贡献。）"

#: ../../whatsnew/3.9.rst:599
msgid ""
"Exposed the Linux-specific :func:`os.pidfd_open` (:issue:`38692`) and "
":data:`os.P_PIDFD` (:issue:`38713`) for process management with file "
"descriptors."
msgstr ""
"对外公开了 Linux 专属的 :func:`os.pidfd_open` (:issue:`38692`) 和 :data:`os.P_PIDFD` "
"(:issue:`38713`) 用于文件描述符的进程管理。"

#: ../../whatsnew/3.9.rst:603
msgid ""
"The :func:`os.unsetenv` function is now also available on Windows. "
"(Contributed by Victor Stinner in :issue:`39413`.)"
msgstr ""
"现在 :func:`os.unsetenv` 函数在 Windows 上也已可用。 （由 Victor Stinner 在 :issue:`39413`"
" 中贡献。）"

#: ../../whatsnew/3.9.rst:606
msgid ""
"The :func:`os.putenv` and :func:`os.unsetenv` functions are now always "
"available. (Contributed by Victor Stinner in :issue:`39395`.)"
msgstr ""
"现在 :func:`os.putenv` 和 :func:`os.unsetenv` 函数将总是可用。 （由 Victor Stinner 在 "
":issue:`39395` 中贡献。）"

#: ../../whatsnew/3.9.rst:610
msgid ""
"Added :func:`os.waitstatus_to_exitcode` function: convert a wait status to "
"an exit code. (Contributed by Victor Stinner in :issue:`40094`.)"
msgstr ""
"增加了 :func:`os.waitstatus_to_exitcode` 函数：将等待状态转换为退出码。 （由 Victor Stinner 在 "
":issue:`40094` 中贡献。）"

#: ../../whatsnew/3.9.rst:615
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.9.rst:617
msgid ""
"Added :meth:`pathlib.Path.readlink()` which acts similarly to "
":func:`os.readlink`. (Contributed by Girts Folkmanis in :issue:`30618`)"
msgstr ""
"增加了 :meth:`pathlib.Path.readlink()`，其行为类似于 :func:`os.readlink`。 （由 Girts "
"Folkmanis 在 :issue:`30618` 中贡献。）"

#: ../../whatsnew/3.9.rst:622
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.9.rst:624
msgid ""
"On Windows now :class:`~pdb.Pdb` supports ``~/.pdbrc``. (Contributed by Tim "
"Hopper and Dan Lidral-Porter in :issue:`20523`.)"
msgstr ""
"在 Windows 上 :class:`~pdb.Pdb` 现在支持 ``~/.pdbrc``。 （由 Tim Hopper 和 Dan Lidral-"
"Porter 在 :issue:`20523` 中贡献。）"

#: ../../whatsnew/3.9.rst:628
msgid "poplib"
msgstr "poplib"

#: ../../whatsnew/3.9.rst:630
msgid ""
":class:`~poplib.POP3` and :class:`~poplib.POP3_SSL` now raise a "
":class:`ValueError` if the given timeout for their constructor is zero to "
"prevent the creation of a non-blocking socket. (Contributed by Dong-hee Na "
"in :issue:`39259`.)"
msgstr ""
"现在 :class:`~poplib.POP3` 和 :class:`~poplib.POP3_SSL` "
"当它们的构造器所给定的超时参数为零以防止创建非阻塞套接字时会引发 :class:`ValueError`。 （由 Dong-hee Na 在 "
":issue:`39259` 中贡献。）"

#: ../../whatsnew/3.9.rst:635
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.9.rst:637
msgid ""
":mod:`pprint` can now pretty-print :class:`types.SimpleNamespace`. "
"(Contributed by Carl Bordum Hansen in :issue:`37376`.)"
msgstr ""
"现在 :mod:`pprint` 能美化打印 :class:`types.SimpleNamespace`。 （由 Carl Bordum Hansen"
" 在 :issue:`37376` 中贡献。）"

#: ../../whatsnew/3.9.rst:641
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.9.rst:643
msgid ""
"The documentation string is now shown not only for class, function, method "
"etc, but for any object that has its own ``__doc__`` attribute. (Contributed"
" by Serhiy Storchaka in :issue:`40257`.)"
msgstr ""
"文档字符串的显示现在不仅针对类、函数、方法等，也针对任何具有自己的 ``__doc__`` 属性的对象。 （由 Serhiy Storchaka 在 "
":issue:`40257` 中贡献。）"

#: ../../whatsnew/3.9.rst:648
msgid "random"
msgstr "random"

#: ../../whatsnew/3.9.rst:650
msgid ""
"Added a new :attr:`random.Random.randbytes` method: generate random bytes. "
"(Contributed by Victor Stinner in :issue:`40286`.)"
msgstr ""
"增加了新的 :attr:`random.Random.randbytes` 方法：生成随机字节串。 （由 Victor Stinner 在 "
":issue:`40286` 中贡献。）"

#: ../../whatsnew/3.9.rst:654
msgid "signal"
msgstr "signal"

#: ../../whatsnew/3.9.rst:656
msgid ""
"Exposed the Linux-specific :func:`signal.pidfd_send_signal` for sending to "
"signals to a process using a file descriptor instead of a pid. "
"(:issue:`38712`)"
msgstr ""
"对外公开了 Linux 专属的 :func:`signal.pidfd_send_signal` 用于向使用文件描述符而非 pid 的进程发送信号。 "
"(:issue:`38712`)"

#: ../../whatsnew/3.9.rst:660
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.9.rst:662
msgid ""
":class:`~smtplib.SMTP` and :class:`~smtplib.SMTP_SSL` now raise a "
":class:`ValueError` if the given timeout for their constructor is zero to "
"prevent the creation of a non-blocking socket. (Contributed by Dong-hee Na "
"in :issue:`39259`.)"
msgstr ""
"现在 :class:`~smtplib.SMTP` 和 :class:`~smtplib.SMTP_SSL` "
"当它们的构造器所给定的超时参数为零以防止创建非阻塞套接字时会引发 :class:`ValueError`。 （由 Dong-hee Na 在 "
":issue:`39259` 中贡献。）"

#: ../../whatsnew/3.9.rst:666
msgid ""
":class:`~smtplib.LMTP` constructor  now has an optional *timeout* parameter."
" (Contributed by Dong-hee Na in :issue:`39329`.)"
msgstr ""
"现在 :class:`~smtplib.LMTP` 构造器具有可选的 *timeout* 形参。 （由 Dong-hee Na 在 "
":issue:`39329` 中贡献。）"

#: ../../whatsnew/3.9.rst:670
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.9.rst:672
msgid ""
"The :mod:`socket` module now exports the "
":data:`~socket.CAN_RAW_JOIN_FILTERS` constant on Linux 4.1 and greater. "
"(Contributed by Stefan Tatschner and Zackery Spytz in :issue:`25780`.)"
msgstr ""
":mod:`socket` 模块现在会在 Linux 4.1 或更高版本上导出 :data:`~socket.CAN_RAW_JOIN_FILTERS`"
" 常量。 （由 Stefan Tatschner 和 Zackery Spytz 在 :issue:`25780` 中贡献。）"

#: ../../whatsnew/3.9.rst:676
msgid ""
"The socket module now supports the :data:`~socket.CAN_J1939` protocol on "
"platforms that support it.  (Contributed by Karl Ding in :issue:`40291`.)"
msgstr ""
"现在 socket 模块会在支持的平台上支持 :data:`~socket.CAN_J1939` 协议。 （由 Karl Ding 在 "
":issue:`40291` 上贡献。）"

#: ../../whatsnew/3.9.rst:679
msgid ""
"The socket module now has the :func:`socket.send_fds` and "
":func:`socket.recv_fds` functions. (Contributed by Joannah Nanjekye, Shinya "
"Okano and Victor Stinner in :issue:`28724`.)"
msgstr ""
"现在 socket 模块具有 :func:`socket.send_fds` 和 :func:`socket.recv_fds` 函数。 （由 "
"Joannah Nanjekye, Shinya Okano 和 Victor Stinner 在 :issue:`28724` 中贡献。）"

#: ../../whatsnew/3.9.rst:685
msgid "time"
msgstr "time"

#: ../../whatsnew/3.9.rst:687
msgid ""
"On AIX, :func:`~time.thread_time` is now implemented with "
"``thread_cputime()`` which has nanosecond resolution, rather than "
"``clock_gettime(CLOCK_THREAD_CPUTIME_ID)`` which has a resolution of 10 ms. "
"(Contributed by Batuhan Taskaya in :issue:`40192`)"
msgstr ""
"在 AIX 上，现在 :func:`~time.thread_time` 是使用具有纳秒级精度的 ``thread_cputime()`` "
"实现，而不再是只有 10 毫秒精度的 ``clock_gettime(CLOCK_THREAD_CPUTIME_ID)``。 （由 Batuhan "
"Taskaya 在 :issue:`40192` 中贡献。）"

#: ../../whatsnew/3.9.rst:693
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.9.rst:695
msgid ""
"Added a new :attr:`sys.platlibdir` attribute: name of the platform-specific "
"library directory. It is used to build the path of standard library and the "
"paths of installed extension modules. It is equal to ``\"lib\"`` on most "
"platforms.  On Fedora and SuSE, it is equal to ``\"lib64\"`` on 64-bit "
"platforms. (Contributed by Jan Matějek, Matěj Cepl, Charalampos Stratakis "
"and Victor Stinner in :issue:`1294959`.)"
msgstr ""
"增加了新的 :attr:`sys.platlibdir` 属性：平台专属库目录的名称。 它被用于构建标准库的路径以及已安装扩展模块的路径。 "
"它在大多数平台上等于 ``\"lib\"``。 在 Fedora 和 SuSE 上，它等于 64 位平台上的 ``\"lib64\"``。 （由 Jan"
" Matějek, Matěj Cepl, Charalampos Stratakis 和 Victor Stinner 在 "
":issue:`1294959` 中贡献。）"

#: ../../whatsnew/3.9.rst:701
msgid ""
"Previously, :attr:`sys.stderr` was block-buffered when non-interactive. Now "
"``stderr`` defaults to always being line-buffered. (Contributed by Jendrik "
"Seipp in :issue:`13601`.)"
msgstr ""
"之前的版本中，:attr:`sys.stderr` 在非交互模式时是带块缓冲的。 现在 ``stderr`` 默认总是为行缓冲的。 （由 Jendrik"
" Seipp 在 :issue:`13601` 中贡献。）"

#: ../../whatsnew/3.9.rst:706
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../../whatsnew/3.9.rst:708
msgid ""
"Added :func:`tracemalloc.reset_peak` to set the peak size of traced memory "
"blocks to the current size, to measure the peak of specific pieces of code. "
"(Contributed by Huon Wilson in :issue:`40630`.)"
msgstr ""
"增加了 :func:`tracemalloc.reset_peak` 用于将跟踪的内存块峰值大小设为当前大小，以测量特定代码段的峰值。 （由 Huon "
"Wilson 在 :issue:`40630` 中贡献。）"

#: ../../whatsnew/3.9.rst:713 ../../whatsnew/3.9.rst:1496
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.9.rst:715
msgid ""
":pep:`593` introduced an :data:`typing.Annotated` type to decorate existing "
"types with context-specific metadata and new ``include_extras`` parameter to"
" :func:`typing.get_type_hints` to access the metadata at runtime. "
"(Contributed by Till Varoquaux and Konstantin Kashin.)"
msgstr ""
":pep:`593` 引入了一种 :data:`typing.Annotated` 类型以使用上下文专属的元数据来装饰现有类型，并将新的 "
"``include_extras`` 形参添加到 :func:`typing.get_type_hints` 以在运行时访问元数据。 （由 Till "
"Varoquaux 和 Konstantin Kashin 贡献。）"

#: ../../whatsnew/3.9.rst:721
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.9.rst:723
msgid ""
"The Unicode database has been updated to version 13.0.0. (:issue:`39926`)."
msgstr "Unicode 数据库已更新到 13.0.0 版。 (:issue:`39926`)。"

#: ../../whatsnew/3.9.rst:726
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.9.rst:728
msgid ""
"The activation scripts provided by :mod:`venv` now all specify their prompt "
"customization consistently by always using the value specified by "
"``__VENV_PROMPT__``. Previously some scripts unconditionally used "
"``__VENV_PROMPT__``, others only if it happened to be set (which was the "
"default case), and one used ``__VENV_NAME__`` instead. (Contributed by Brett"
" Cannon in :issue:`37663`.)"
msgstr ""
"由 :mod:`venv` 所提供的激活脚本现在总是会使用 ``__VENV_PROMPT__`` 设置的值来一致地指明它们的自定义提示符。 "
"在之前版本中某些脚本会无条件地使用 ``__VENV_PROMPT__``，而另一些脚本只在其恰好被设置时（这是默认情况）才会使用，还有的脚本会改用 "
"``__VENV_NAME__``。 （由 Brett Cannon 在 :issue:`37663` 中贡献。）"

#: ../../whatsnew/3.9.rst:736
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.9.rst:738
msgid ""
"White space characters within attributes are now preserved when serializing "
":mod:`xml.etree.ElementTree` to XML file. EOLNs are no longer normalized to "
"\"\\n\". This is the result of discussion about how to interpret section "
"2.11 of XML spec. (Contributed by Mefistotelis in :issue:`39011`.)"
msgstr ""
"当把 :mod:`xml.etree.ElementTree` 序列化为 XML 文件时属性内部的空白字符现在将被保留。 不同的行结束符不会再被正规化为"
" \"\\n\"。 这是对于如何解读 XML 规范 2.11 节的相关讨论的最终结果。 （由 Mefistotelis 在 :issue:`39011`"
" 中贡献。）"

#: ../../whatsnew/3.9.rst:746
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.9.rst:748
msgid ""
"Optimized the idiom for assignment a temporary variable in comprehensions. "
"Now ``for y in [expr]`` in comprehensions is as fast as a simple assignment "
"``y = expr``.  For example:"
msgstr ""
"优化了在推导式中为临时变量赋值的惯用方式。 现在推导式中的 ``for y in [expr]`` 会与简单赋值语句 ``y = expr`` "
"一样快速。 例如:"

#: ../../whatsnew/3.9.rst:752
msgid "sums = [s for s in [0] for x in data for s in [s + x]]"
msgstr "sums = [s for s in [0] for x in data for s in [s + x]]"

#: ../../whatsnew/3.9.rst:754
msgid ""
"Unlike the ``:=`` operator this idiom does not leak a variable to the outer "
"scope."
msgstr "不同于 ``:=`` 运算符，这个惯用方式不会使变量泄露到外部作用域中。"

#: ../../whatsnew/3.9.rst:757
msgid "(Contributed by Serhiy Storchaka in :issue:`32856`.)"
msgstr "（由 Serhiy Storchaka 在 :issue:`32856` 中贡献。）"

#: ../../whatsnew/3.9.rst:759
msgid ""
"Optimized signal handling in multithreaded applications. If a thread "
"different than the main thread gets a signal, the bytecode evaluation loop "
"is no longer interrupted at each bytecode instruction to check for pending "
"signals which cannot be handled. Only the main thread of the main "
"interpreter can handle signals."
msgstr ""
"优化了多线程应用中的信号处理。 如果一个线程不是获得信号的主线程，字节码求值循环不会在每条字节码指令上被打断以检查无法被处理的挂起信号。 "
"只有主解释器的主线程能够处理信号。"

#: ../../whatsnew/3.9.rst:765
msgid ""
"Previously, the bytecode evaluation loop was interrupted at each instruction"
" until the main thread handles signals. (Contributed by Victor Stinner in "
":issue:`40010`.)"
msgstr ""
"在之前版本中，字节码求值循环会在每条指令上被打断直到主线程处理了信号。 （由 Victor Stinner 在 :issue:`40010` 上贡献。）"

#: ../../whatsnew/3.9.rst:769
msgid ""
"Optimized the :mod:`subprocess` module on FreeBSD using ``closefrom()``. "
"(Contributed by Ed Maste, Conrad Meyer, Kyle Evans, Kubilay Kocak and Victor"
" Stinner in :issue:`38061`.)"
msgstr ""
"在 FreeBSD 上使用 ``closefrom()`` 优化了 :mod:`subprocess` 模块。 （由 Ed Maste, Conrad "
"Meyer, Kyle Evans, Kubilay Kocak 和 Victor Stinner 在 :issue:`38061` 中贡献。）"

#: ../../whatsnew/3.9.rst:773
msgid ""
":c:func:`PyLong_FromDouble` is now up to 1.87x faster for values that fit "
"into :c:expr:`long`. (Contributed by Sergey Fedoseev in :issue:`37986`.)"
msgstr ""
"现在 :c:func:`PyLong_FromDouble` 对于 :c:expr:`long` 范围内值的执行速度提升至 1.87 倍。 （由 "
"Sergey Fedoseev 在 :issue:`37986` 中贡献。）"

#: ../../whatsnew/3.9.rst:777
msgid ""
"A number of Python builtins (:class:`range`, :class:`tuple`, :class:`set`, "
":class:`frozenset`, :class:`list`, :class:`dict`) are now sped up by using "
":pep:`590` vectorcall protocol. (Contributed by Dong-hee Na, Mark Shannon, "
"Jeroen Demeyer and Petr Viktorin in :issue:`37207`.)"
msgstr ""
"多个 Python 内置类型 (:class:`range`, :class:`tuple`, :class:`set`, "
":class:`frozenset`, :class:`list`, :class:`dict`) 现在通过使用 :pep:`590` "
"向量调用协议得到加速。 （由 Dong-hee Na, Mark Shannon, Jeroen Demeyer 和 Petr Viktorin 在 "
":issue:`37207` 中贡献。）"

#: ../../whatsnew/3.9.rst:782
msgid ""
"Optimized :func:`~set.difference_update` for the case when the other set is "
"much larger than the base set. (Suggested by Evgeny Kapun with code "
"contributed by Michele Orrù in :issue:`8425`.)"
msgstr ""
"当另一集合远大于基础集合的情况下优化了 :func:`~set.difference_update` 的性能。 （由 Evgeny Kapun 提议，由"
" Michele Orrù 在 :issue:`8425` 中贡献代码。）"

#: ../../whatsnew/3.9.rst:786
msgid ""
"Python's small object allocator (``obmalloc.c``) now allows (no more than) "
"one empty arena to remain available for immediate reuse, without returning "
"it to the OS.  This prevents thrashing in simple loops where an arena could "
"be created and destroyed anew on each iteration. (Contributed by Tim Peters "
"in :issue:`37257`.)"
msgstr ""
"Python 的小对象分配器 (``obmalloc.c``) 现在允许（至多）一个空位可用于立即重用，而不必将其返回给 OS。 "
"这可以防止简单循环中的多余消耗，在每次迭代中可以创建和销毁全新的空位。 （由 Tim Peters 在 :issue:`37257` 中贡献。）"

#: ../../whatsnew/3.9.rst:792
msgid ""
":term:`floor division` of float operation now has a better performance. Also"
" the message of :exc:`ZeroDivisionError` for this operation is updated. "
"(Contributed by Dong-hee Na in :issue:`39434`.)"
msgstr ""
"浮点数运算中的 :term:`floor division` 现在会有更好的性能。 并且此运算的 :exc:`ZeroDivisionError` "
"的消息也已更新。 （由 Dong-hee Na 在 :issue:`39434` 中贡献。）"

#: ../../whatsnew/3.9.rst:796
msgid ""
"Decoding short ASCII strings with UTF-8 and ascii codecs is now about 15% "
"faster.  (Contributed by Inada Naoki in :issue:`37348`.)"
msgstr ""
"使用 UTF-8 和 ascii 编解码器解码短 ASCII 字符串现在会加快大约 15%。 （由 Inada Naoki 在 "
":issue:`37348` 中贡献。）"

#: ../../whatsnew/3.9.rst:799
msgid ""
"Here's a summary of performance improvements from Python 3.4 through Python "
"3.9:"
msgstr "以下是对从 Python 3.4 到 Python 3.9 的提升提升情况的总结:"

#: ../../whatsnew/3.9.rst:846
msgid ""
"These results were generated from the variable access benchmark script at: "
"``Tools/scripts/var_access_benchmark.py``. The benchmark script displays "
"timings in nanoseconds.  The benchmarks were measured on an `Intel® Core™ "
"i7-4960HQ processor "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-"
"core-i7-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_ running the macOS "
"64-bit builds found at `python.org <https://www.python.org/downloads/mac-"
"osx/>`_."
msgstr ""
"以上结果是由以下变量访问基准测试脚本所生成的: ``Tools/scripts/var_access_benchmark.py``。 "
"该基准测试脚本以纳秒为单位显示时间。 基准测试数据是在一块 `Intel® Core™ i7-4960HQ 处理器 "
"<https://ark.intel.com/content/www/us/en/ark/products/76088/intel-"
"core-i7-4960hq-processor-6m-cache-up-to-3-80-ghz.html>`_ 运行从 `python.org "
"<https://www.python.org/downloads/mac-osx/>`_ 获取的 macOS 64 位编译版本所得到的。"

#: ../../whatsnew/3.9.rst:856
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.9.rst:858
msgid ""
"The distutils ``bdist_msi`` command is now deprecated, use ``bdist_wheel`` "
"(wheel packages) instead. (Contributed by Hugo van Kemenade in "
":issue:`39586`.)"
msgstr ""
"distutils 的 ``bdist_msi`` 命令现在已被弃用，请改用 ``bdist_wheel`` (wheel 包)。 （由 Hugo "
"van Kemenade 在 :issue:`39586` 中贡献。）"

#: ../../whatsnew/3.9.rst:862
msgid ""
"Currently :func:`math.factorial` accepts :class:`float` instances with non-"
"negative integer values (like ``5.0``).  It raises a :exc:`ValueError` for "
"non-integral and negative floats.  It is now deprecated.  In future Python "
"versions it will raise a :exc:`TypeError` for all floats. (Contributed by "
"Serhiy Storchaka in :issue:`37315`.)"
msgstr ""
"目前 :func:`math.factorial` 接受具有非负整数值的 :class:`float` 实例 (如 ``5.0``)。 "
"对于非整数和负浮点数它会引发 :exc:`ValueError`。 此行为现在已被弃用。 在未来的 Python 版本中对所有浮点数都将引发 "
":exc:`TypeError`。 （由 Serhiy Storchaka 在 :issue:`37315` 中贡献。）"

#: ../../whatsnew/3.9.rst:868
msgid ""
"The :mod:`parser` and :mod:`symbol` modules are deprecated and will be "
"removed in future versions of Python. For the majority of use cases, users "
"can leverage the Abstract Syntax Tree (AST) generation and compilation "
"stage, using the :mod:`ast` module."
msgstr ""
":mod:`parser` 和 :mod:`symbol` 模块已被弃用并将在未来的 Python 版本中移除。 对于大多数用例，用户都可以使用 "
":mod:`ast` 模块来控制抽象语法树 (AST) 的生成和编译阶段。"

#: ../../whatsnew/3.9.rst:873
msgid ""
"The Public C API functions :c:func:`PyParser_SimpleParseStringFlags`, "
":c:func:`PyParser_SimpleParseStringFlagsFilename`, "
":c:func:`PyParser_SimpleParseFileFlags` and :c:func:`PyNode_Compile` are "
"deprecated and will be removed in Python 3.10 together with the old parser."
msgstr ""
"公有 C API 函数 :c:func:`PyParser_SimpleParseStringFlags`, "
":c:func:`PyParser_SimpleParseStringFlagsFilename`, "
":c:func:`PyParser_SimpleParseFileFlags` 和 :c:func:`PyNode_Compile` 已被弃用并将在 "
"Python 3.10 版与旧解析器一起被移除。"

#: ../../whatsnew/3.9.rst:878
msgid ""
"Using :data:`NotImplemented` in a boolean context has been deprecated, as it"
" is almost exclusively the result of incorrect rich comparator "
"implementations. It will be made a :exc:`TypeError` in a future version of "
"Python. (Contributed by Josh Rosenberg in :issue:`35712`.)"
msgstr ""
"在布尔运算中使用 :data:`NotImplemented` 已被弃用，因为它几乎必定是不正确的富比较运算符实现的结果。 它将在未来的 Python "
"版本中引发 :exc:`TypeError`。 （由 Josh Rosenberg 在 :issue:`35712` 中贡献。）"

#: ../../whatsnew/3.9.rst:884
msgid ""
"The :mod:`random` module currently accepts any hashable type as a possible "
"seed value.  Unfortunately, some of those types are not guaranteed to have a"
" deterministic hash value.  After Python 3.9, the module will restrict its "
"seeds to :const:`None`, :class:`int`, :class:`float`, :class:`str`, "
":class:`bytes`, and :class:`bytearray`."
msgstr ""
":mod:`random` 模块目前接受任何可哈希类型作为可能的种子值。 不幸的是，某些这样的类型并不保证具有确定性的哈希值。 在 Python 3.9"
" 之后，该模块将限定其种子值为 :const:`None`, :class:`int`, :class:`float`, :class:`str`, "
":class:`bytes` 以及 :class:`bytearray`。"

#: ../../whatsnew/3.9.rst:890
msgid ""
"Opening the :class:`~gzip.GzipFile` file for writing without specifying the "
"*mode* argument is deprecated.  In future Python versions it will always be "
"opened for reading by default.  Specify the *mode* argument for opening it "
"for writing and silencing a warning. (Contributed by Serhiy Storchaka in "
":issue:`28286`.)"
msgstr ""
"打开 :class:`~gzip.GzipFile` 文件用于写入而不指定 *mode* 参数的特性已被弃用。 在未来的 Python "
"版本中将总是默认打开用于读取。 在打开文件用于写入时请指定 *mode* 参数以静默相关警告信息。 （由 Serhiy Storchaka 在 "
":issue:`28286` 中贡献。）"

#: ../../whatsnew/3.9.rst:896
msgid ""
"Deprecated the ``split()`` method of :class:`_tkinter.TkappType` in favour "
"of the ``splitlist()`` method which has more consistent and predicable "
"behavior. (Contributed by Serhiy Storchaka in :issue:`38371`.)"
msgstr ""
"弃用了 :class:`_tkinter.TkappType` 的 ``split()`` 方法而改用 ``splitlist()`` "
"方法，此方法具有更稳定且可预测的行为。 （由 Serhiy Storchaka 在 :issue:`38371` 中贡献。）"

#: ../../whatsnew/3.9.rst:901
msgid ""
"The explicit passing of coroutine objects to :func:`asyncio.wait` has been "
"deprecated and will be removed in version 3.11. (Contributed by Yury "
"Selivanov and Kyle Stanley in :issue:`34790`.)"
msgstr ""
"将协程对象显式传递给 :func:`asyncio.wait` 的做法已被弃用并且将在 3.11 版中被移除。 （由 Yury Selivanov 和 "
"Kyle Stanley 在 :issue:`34790` 中贡献。）"

#: ../../whatsnew/3.9.rst:905
msgid ""
"binhex4 and hexbin4 standards are now deprecated. The :mod:`binhex` module "
"and the following :mod:`binascii` functions are now deprecated:"
msgstr ""
"binhex4 和 hexbin4 标准现已被弃用。 :mod:`binhex` 模块和下列 :mod:`binascii` 函数现已被弃用:"

#: ../../whatsnew/3.9.rst:908
msgid ":func:`~binascii.b2a_hqx`, :func:`~binascii.a2b_hqx`"
msgstr ":func:`~binascii.b2a_hqx`, :func:`~binascii.a2b_hqx`"

#: ../../whatsnew/3.9.rst:909
msgid ":func:`~binascii.rlecode_hqx`, :func:`~binascii.rledecode_hqx`"
msgstr ":func:`~binascii.rlecode_hqx`, :func:`~binascii.rledecode_hqx`"

#: ../../whatsnew/3.9.rst:911
msgid "(Contributed by Victor Stinner in :issue:`39353`.)"
msgstr "（由 Victor Stinner 在 :issue:`39353` 中贡献。）"

#: ../../whatsnew/3.9.rst:913
msgid ""
":mod:`ast` classes ``slice``, ``Index`` and ``ExtSlice`` are considered "
"deprecated and will be removed in future Python versions.  ``value`` itself "
"should be used instead of ``Index(value)``.  ``Tuple(slices, Load())`` "
"should be used instead of ``ExtSlice(slices)``. (Contributed by Serhiy "
"Storchaka in :issue:`34822`.)"
msgstr ""
":mod:`ast` 类 ``slice``, ``Index`` 和 ``ExtSlice`` 被视为已弃用并将在未来的 Python 版本中被移除。"
" 应当使用 ``value`` 本身而不再是 ``Index(value)``。 应当使用 ``Tuple(slices, Load())`` 而不再是"
" ``ExtSlice(slices)``。 （由 Serhiy Storchaka 在 :issue:`34822` 中贡献。）"

#: ../../whatsnew/3.9.rst:919
msgid ""
":mod:`ast` classes ``Suite``, ``Param``, ``AugLoad`` and ``AugStore`` are "
"considered deprecated and will be removed in future Python versions. They "
"were not generated by the parser and not accepted by the code generator in "
"Python 3. (Contributed by Batuhan Taskaya in :issue:`39639` and "
":issue:`39969` and Serhiy Storchaka in :issue:`39988`.)"
msgstr ""
":mod:`ast` 类 ``Suite``, ``Param``, ``AugLoad`` 和 ``AugStore`` 被视为已弃用并将在未来的 "
"Python 版本中被移除。 它们不会被解析器所生成且不会被 Python 3 中的代码生成器所接受。 （由 Batuhan Taskaya 在 "
":issue:`39639` 和 :issue:`39969` 中以及 Serhiy Storchaka 在 :issue:`39988` 中贡献。）"

#: ../../whatsnew/3.9.rst:926
msgid ""
"The :c:func:`PyEval_InitThreads` and :c:func:`PyEval_ThreadsInitialized` "
"functions are now deprecated and will be removed in Python 3.11. Calling "
":c:func:`PyEval_InitThreads` now does nothing. The :term:`GIL` is "
"initialized by :c:func:`Py_Initialize()` since Python 3.7. (Contributed by "
"Victor Stinner in :issue:`39877`.)"
msgstr ""
":c:func:`PyEval_InitThreads` 和 :c:func:`PyEval_ThreadsInitialized` "
"函数现已被弃用并将在 Python 3.11 中被移除。 调用 :c:func:`PyEval_InitThreads` 现在没有任何效果。 自 "
"Python 3.7 起 :term:`GIL` 会由 :c:func:`Py_Initialize()` 初始化。 （由 Victor Stinner"
" 在 :issue:`39877` 中贡献。）"

#: ../../whatsnew/3.9.rst:932
msgid ""
"Passing ``None`` as the first argument to the :func:`shlex.split` function "
"has been deprecated.  (Contributed by Zackery Spytz in :issue:`33262`.)"
msgstr ""
"传入 ``None`` 作为 :func:`shlex.split` 函数的第一个参数的做法已被弃用。 （由 Zackery Spytz 在 "
":issue:`33262` 中贡献。）"

#: ../../whatsnew/3.9.rst:935
msgid ""
":func:`smtpd.MailmanProxy` is now deprecated as it is unusable without an "
"external module, ``mailman``.  (Contributed by Samuel Colvin in "
":issue:`35800`.)"
msgstr ""
":func:`smtpd.MailmanProxy` 现在已被弃用，因为它在没有外部模块 ``mailman`` 的情况下无法使用。 （由 Samuel"
" Colvin 在 :issue:`35800` 中贡献。）"

#: ../../whatsnew/3.9.rst:938
msgid ""
"The :mod:`lib2to3` module now emits a :exc:`PendingDeprecationWarning`. "
"Python 3.9 switched to a PEG parser (see :pep:`617`), and Python 3.10 may "
"include new language syntax that is not parsable by lib2to3's LL(1) parser. "
"The ``lib2to3`` module may be removed from the standard library in a future "
"Python version. Consider third-party alternatives such as `LibCST`_ or "
"`parso`_. (Contributed by Carl Meyer in :issue:`40360`.)"
msgstr ""
"现在 :mod:`lib2to3` 模块将发出 :exc:`PendingDeprecationWarning`。 Python 3.9 已切换到 "
"PEG 解析器 (参见 :pep:`617`)，Python 3.10 可以会包含 lib2to3 的 LL(1) 解析器所不能解析的新语法。 "
"``lib2to3`` 模块可能会在未来的 Python 版本中被移出标准库。 请考虑使用第三方替换例如 `LibCST`_ 或 `parso`_。 "
"（由 Carl Meyer 在 :issue:`40360` 中贡献。）"

#: ../../whatsnew/3.9.rst:946
msgid ""
"The *random* parameter of :func:`random.shuffle` has been deprecated. "
"(Contributed by Raymond Hettinger in :issue:`40465`)"
msgstr ""
":func:`random.shuffle` 的 *random* 形参已被弃用。 （由 Raymond Hettinger 在 "
":issue:`40465` 中贡献。）"

#: ../../whatsnew/3.9.rst:955 ../../whatsnew/3.9.rst:1410
msgid "Removed"
msgstr "移除"

#: ../../whatsnew/3.9.rst:957
msgid ""
"The erroneous version at :data:`unittest.mock.__version__` has been removed."
msgstr ":data:`unittest.mock.__version__` 上的错误版本已经被移除。"

#: ../../whatsnew/3.9.rst:959
msgid ""
":class:`nntplib.NNTP`: ``xpath()`` and ``xgtitle()`` methods have been "
"removed. These methods are deprecated since Python 3.3. Generally, these "
"extensions are not supported or not enabled by NNTP server administrators. "
"For ``xgtitle()``, please use :meth:`nntplib.NNTP.descriptions` or "
":meth:`nntplib.NNTP.description` instead. (Contributed by Dong-hee Na in "
":issue:`39366`.)"
msgstr ""
":class:`nntplib.NNTP`: ``xpath()`` 和 ``xgtitle()`` 方法已被移除。 这些方法自 Python 3.3 "
"起已被弃用。 一般来说，这些扩展都不再为 NNTP 服务管理员所支持或启用。 对于 ``xgtitle()``，请改用 "
":meth:`nntplib.NNTP.descriptions` 或 :meth:`nntplib.NNTP.description`。 （由 "
"Dong-hee Na 在 :issue:`39366` 中贡献。）"

#: ../../whatsnew/3.9.rst:966
msgid ""
":class:`array.array`: ``tostring()`` and ``fromstring()`` methods have been "
"removed. They were aliases to ``tobytes()`` and ``frombytes()``, deprecated "
"since Python 3.2. (Contributed by Victor Stinner in :issue:`38916`.)"
msgstr ""
":class:`array.array`: ``tostring()`` 和 ``fromstring()`` 方法已被移除。 它们分别是 "
"``tobytes()`` 和 ``frombytes()`` 的别名，自 Python 3.2 起已被弃用。 （由 Victor Stinner 在 "
":issue:`38916` 中贡献。）"

#: ../../whatsnew/3.9.rst:971
msgid ""
"The undocumented ``sys.callstats()`` function has been removed. Since Python"
" 3.7, it was deprecated and always returned :const:`None`. It required a "
"special build option ``CALL_PROFILE`` which was already removed in Python "
"3.7. (Contributed by Victor Stinner in :issue:`37414`.)"
msgstr ""
"未写入文档的 ``sys.callstats()`` 函数已被移除。 自 Python 3.7 起它就已被弃用并且总是会返回 "
":const:`None`。 它需要一个特殊的构建选项 ``CALL_PROFILE`` 而该选项在 Python 3.7 中已被移除。 （由 "
"Victor Stinner 在 :issue:`37414` 中贡献。）"

#: ../../whatsnew/3.9.rst:976
msgid ""
"The ``sys.getcheckinterval()`` and ``sys.setcheckinterval()`` functions have"
" been removed. They were deprecated since Python 3.2. Use "
":func:`sys.getswitchinterval` and :func:`sys.setswitchinterval` instead. "
"(Contributed by Victor Stinner in :issue:`37392`.)"
msgstr ""
"``sys.getcheckinterval()`` 和 ``sys.setcheckinterval()`` 函数已被移除。 它们自 Python "
"3.2 起已被弃用。 请改用 :func:`sys.getswitchinterval` 和 "
":func:`sys.setswitchinterval`。 （由 Victor Stinner 在 :issue:`37392` 中贡献。）"

#: ../../whatsnew/3.9.rst:981
msgid ""
"The C function ``PyImport_Cleanup()`` has been removed. It was documented "
"as: \"Empty the module table.  For internal use only.\" (Contributed by "
"Victor Stinner in :issue:`36710`.)"
msgstr ""
"C 函数 ``PyImport_Cleanup()`` 已被移除。 它原本的文档为: \"清空模块表。 仅限内部使用。\" （由 Victor "
"Stinner 在 :issue:`36710` 中贡献。）"

#: ../../whatsnew/3.9.rst:985
msgid ""
"``_dummy_thread`` and ``dummy_threading`` modules have been removed. These "
"modules were deprecated since Python 3.7 which requires threading support. "
"(Contributed by Victor Stinner in :issue:`37312`.)"
msgstr ""
"``_dummy_thread`` 和 ``dummy_threading`` 模块已被移除。 这些模块自 Python 3.7 "
"起已被弃用，它们需要线程支持。 （由 Victor Stinner 在 :issue:`37312` 中贡献。）"

#: ../../whatsnew/3.9.rst:989
msgid ""
"``aifc.openfp()`` alias to ``aifc.open()``, ``sunau.openfp()`` alias to "
"``sunau.open()``, and ``wave.openfp()`` alias to :func:`wave.open()` have "
"been removed. They were deprecated since Python 3.7. (Contributed by Victor "
"Stinner in :issue:`37320`.)"
msgstr ""
"``aifc.open()`` 的别名 ``aifc.openfp()``，``sunau.open()`` 的别名 "
"``sunau.openfp()``，以及 :func:`wave.open()` 的别名 ``wave.openfp()`` 已被移除。 它们自 "
"Python 3.7 起已被弃用。 （由 Victor Stinner 在 :issue:`37320` 中贡献。）"

#: ../../whatsnew/3.9.rst:994
msgid ""
"The :meth:`~threading.Thread.isAlive()` method of :class:`threading.Thread` "
"has been removed. It was deprecated since Python 3.8. Use "
":meth:`~threading.Thread.is_alive()` instead. (Contributed by Dong-hee Na in"
" :issue:`37804`.)"
msgstr ""
":class:`threading.Thread` 的 :meth:`~threading.Thread.isAlive()` 方法已被移除。 它自 "
"Python 3.8 起已被弃用。 请改用 :meth:`~threading.Thread.is_alive()`。 （由 Dong-hee Na 在"
" :issue:`37804` 中贡献。）"

#: ../../whatsnew/3.9.rst:999
msgid ""
"Methods ``getchildren()`` and ``getiterator()`` of classes "
":class:`~xml.etree.ElementTree.ElementTree` and "
":class:`~xml.etree.ElementTree.Element` in the :mod:`~xml.etree.ElementTree`"
" module have been removed.  They were deprecated in Python 3.2. Use "
"``iter(x)`` or ``list(x)`` instead of ``x.getchildren()`` and ``x.iter()`` "
"or ``list(x.iter())`` instead of ``x.getiterator()``. (Contributed by Serhiy"
" Storchaka in :issue:`36543`.)"
msgstr ""
":mod:`~xml.etree.ElementTree` 模块中 "
":class:`~xml.etree.ElementTree.ElementTree` 和 "
":class:`~xml.etree.ElementTree.Element` 等类的 ``getchildren()`` 和 "
"``getiterator()`` 方法已被移除。 它们在 Python 3.2 中已被弃用。 请使用 ``iter(x)`` 或 "
"``list(x)`` 替代 ``x.getchildren()`` 并用 ``x.iter()`` 或 ``list(x.iter())`` 替代 "
"``x.getiterator()``。 （由 Serhiy Storchaka 在 :issue:`36543` 中贡献。）"

#: ../../whatsnew/3.9.rst:1007
msgid ""
"The old :mod:`plistlib` API has been removed, it was deprecated since Python"
" 3.4. Use the :func:`~plistlib.load`, :func:`~plistlib.loads`, "
":func:`~plistlib.dump`, and :func:`~plistlib.dumps` functions. Additionally,"
" the *use_builtin_types* parameter was removed, standard :class:`bytes` "
"objects are always used instead. (Contributed by Jon Janzen in "
":issue:`36409`.)"
msgstr ""
"旧的 :mod:`plistlib` API 已被移除，它自 Python 3.4 起已被弃用。 请使用 :func:`~plistlib.load`,"
" :func:`~plistlib.loads`, :func:`~plistlib.dump` 和 :func:`~plistlib.dumps` "
"等函数。 此外，*use_builtin_types* 形参已被移除而总是会使用 :class:`bytes` 对象。 （由 Jon Janzen 在 "
":issue:`36409` 中贡献。）"

#: ../../whatsnew/3.9.rst:1013
msgid ""
"The C function ``PyGen_NeedsFinalizing`` has been removed. It was not "
"documented, tested, or used anywhere within CPython after the implementation"
" of :pep:`442`. Patch by Joannah Nanjekye. (Contributed by Joannah Nanjekye "
"in :issue:`15088`)"
msgstr ""
"C 函数 ``PyGen_NeedsFinalizing`` 已被移除。 它未被写入文档、未经测试，且自 :pep:`442` 实现之后未在 "
"CPython 的任何地方被使用。 由 Joannah Nanjekye 提供补丁。 （由 Joannah Nanjekye 在 "
":issue:`15088` 中贡献。）"

#: ../../whatsnew/3.9.rst:1018
msgid ""
"``base64.encodestring()`` and ``base64.decodestring()``, aliases deprecated "
"since Python 3.1, have been removed: use :func:`base64.encodebytes` and "
":func:`base64.decodebytes` instead. (Contributed by Victor Stinner in "
":issue:`39351`.)"
msgstr ""
"自 Python 3.1 起被弃用的别名 ``base64.encodestring()`` 和 ``base64.decodestring()`` "
"已被移除：请改用 :func:`base64.encodebytes` 和 :func:`base64.decodebytes`。 （由 Victor "
"Stinner 在 :issue:`39351` 中贡献。）"

#: ../../whatsnew/3.9.rst:1023
msgid ""
"``fractions.gcd()`` function has been removed, it was deprecated since "
"Python 3.5 (:issue:`22486`): use :func:`math.gcd` instead. (Contributed by "
"Victor Stinner in :issue:`39350`.)"
msgstr ""
"``fractions.gcd()`` 函数已被移除，它自 Python 3.5 起被弃用 (:issue:`22486`)：请改用 "
":func:`math.gcd`。 （由 Victor Stinner 在 :issue:`39350` 中贡献。）"

#: ../../whatsnew/3.9.rst:1027
msgid ""
"The *buffering* parameter of :class:`bz2.BZ2File` has been removed. Since "
"Python 3.0, it was ignored and using it emitted a :exc:`DeprecationWarning`."
" Pass an open file object to control how the file is opened. (Contributed by"
" Victor Stinner in :issue:`39357`.)"
msgstr ""
":class:`bz2.BZ2File` 的 *buffering* 形参已被移除。 它自 Python 3.0 起即被忽略，使用它将会引发 "
":exc:`DeprecationWarning`。 请传入一个打开文件对象来控制文件的打开方式。 （由 Victor Stinner 在 "
":issue:`39357` 中贡献。）"

#: ../../whatsnew/3.9.rst:1032
msgid ""
"The *encoding* parameter of :func:`json.loads` has been removed. As of "
"Python 3.1, it was deprecated and ignored; using it has emitted a "
":exc:`DeprecationWarning` since Python 3.8. (Contributed by Inada Naoki in "
":issue:`39377`)"
msgstr ""
":func:`json.loads` 的 *encoding* 形参已被移除。 它在 Python 3.1 中已被弃用和忽略；自 Python 3.8 "
"起使用它将会引发 :exc:`DeprecationWarning`。 （由 Inada Naoki 在 :issue:`39377` 中贡献。）"

#: ../../whatsnew/3.9.rst:1037
msgid ""
"``with (await asyncio.lock):`` and ``with (yield from asyncio.lock):`` "
"statements are not longer supported, use ``async with lock`` instead.  The "
"same is correct for ``asyncio.Condition`` and ``asyncio.Semaphore``. "
"(Contributed by Andrew Svetlov in :issue:`34793`.)"
msgstr ""
"``with (await asyncio.lock):`` 和 ``with (yield from asyncio.lock):`` "
"语句已不再受支持，请改用 ``async with lock``。 ``asyncio.Condition`` 和 "
"``asyncio.Semaphore`` 也同样如此。 （由 Andrew Svetlov 在 :issue:`34793` 中贡献。）"

#: ../../whatsnew/3.9.rst:1042
msgid ""
"The :func:`sys.getcounts` function, the ``-X showalloccount`` command line "
"option and the ``show_alloc_count`` field of the C structure "
":c:type:`PyConfig` have been removed. They required a special Python build "
"by defining ``COUNT_ALLOCS`` macro. (Contributed by Victor Stinner in "
":issue:`39489`.)"
msgstr ""
":func:`sys.getcounts` 函数，``-X showalloccount`` 命令行选项以及 C 结构体 "
":c:type:`PyConfig` 的 ``show_alloc_count`` 字段已被移除。 它们需要使用定义了 ``COUNT_ALLOCS``"
" 宏的特殊 Python 编译版本。 （由 Victor Stinner 在 :issue:`39489` 中贡献。）"

#: ../../whatsnew/3.9.rst:1048
msgid ""
"The ``_field_types`` attribute of the :class:`typing.NamedTuple` class has "
"been removed.  It was deprecated since Python 3.8.  Use the "
"``__annotations__`` attribute instead. (Contributed by Serhiy Storchaka in "
":issue:`40182`.)"
msgstr ""
":class:`typing.NamedTuple` 类的 ``_field_types`` 属性已被移除。 它自 Python 3.8 起已被弃用。 "
"请改用 ``__annotations__`` 属性。 （由 Serhiy Storchaka 在 :issue:`40182` 中贡献。）"

#: ../../whatsnew/3.9.rst:1053
msgid ""
"The :meth:`symtable.SymbolTable.has_exec` method has been removed. It was "
"deprecated since 2006, and only returning ``False`` when it's called. "
"(Contributed by Batuhan Taskaya in :issue:`40208`)"
msgstr ""
":meth:`symtable.SymbolTable.has_exec` 方法已被移除。 它自 2006 年起已被弃用，当被调用时仅会返回 "
"``False``。 （由 Batuhan Taskaya 在 :issue:`40208` 中贡献。）"

#: ../../whatsnew/3.9.rst:1057
msgid ""
"The :meth:`asyncio.Task.current_task` and :meth:`asyncio.Task.all_tasks` "
"have been removed. They were deprecated since Python 3.7 and you can use "
":func:`asyncio.current_task` and :func:`asyncio.all_tasks` instead. "
"(Contributed by Rémi Lapeyre in :issue:`40967`)"
msgstr ""
":meth:`asyncio.Task.current_task` 和 :meth:`asyncio.Task.all_tasks` 已被移除。 它们自"
" Python 3.7 起已被弃用，你可以改用 :func:`asyncio.current_task` 和 "
":func:`asyncio.all_tasks`。 （由 Rémi Lapeyre 在 :issue:`40967` 中贡献。）"

#: ../../whatsnew/3.9.rst:1062
msgid ""
"The ``unescape()`` method in the :class:`html.parser.HTMLParser` class has "
"been removed (it was deprecated since Python 3.4).  :func:`html.unescape` "
"should be used for converting character references to the corresponding "
"unicode characters."
msgstr ""
":class:`html.parser.HTMLParser` 类的 ``unescape()`` 方法已被移除（它自 Python 3.4 "
"起已被弃用）。 应当使用 :func:`html.unescape` 来将字符引用转换为对应的 unicode 字符。"

#: ../../whatsnew/3.9.rst:1069 ../../whatsnew/3.9.rst:1336
msgid "Porting to Python 3.9"
msgstr "移植到 Python 3.9"

#: ../../whatsnew/3.9.rst:1071
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.9.rst:1076
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.9.rst:1078
msgid ""
":func:`__import__` and :func:`importlib.util.resolve_name` now raise "
":exc:`ImportError` where it previously raised :exc:`ValueError`. Callers "
"catching the specific exception type and supporting both Python 3.9 and "
"earlier versions will need to catch both using ``except (ImportError, "
"ValueError):``."
msgstr ""
":func:`__import__` 和 :func:`importlib.util.resolve_name` 现在会引发 "
":exc:`ImportError` 取代之前所引发的 :exc:`ValueError`。 捕获特定异常类型并同时支持 Python 3.9 "
"和更早版本的调用者将需要使用 ``except (ImportError, ValueError):`` 来同时捕获两者。"

#: ../../whatsnew/3.9.rst:1083
msgid ""
"The :mod:`venv` activation scripts no longer special-case when "
"``__VENV_PROMPT__`` is set to ``\"\"``."
msgstr ":mod:`venv` 激活脚本不再将 ``__VENV_PROMPT__`` 被设为 ``\"\"`` 的情况作为特例处理。"

#: ../../whatsnew/3.9.rst:1086
msgid ""
"The :meth:`select.epoll.unregister` method no longer ignores the "
":data:`~errno.EBADF` error. (Contributed by Victor Stinner in "
":issue:`39239`.)"
msgstr ""
":meth:`select.epoll.unregister` 方法不会再忽略 :data:`~errno.EBADF` 错误。 （由 Victor "
"Stinner 在 :issue:`39239` 中贡献。）"

#: ../../whatsnew/3.9.rst:1090
msgid ""
"The *compresslevel* parameter of :class:`bz2.BZ2File` became keyword-only, "
"since the *buffering* parameter has been removed. (Contributed by Victor "
"Stinner in :issue:`39357`.)"
msgstr ""
":class:`bz2.BZ2File` 的 *compresslevel* 形参已成为仅限关键字形参，因为 *buffering* 形参已被移除。 "
"（由 Victor Stinner 在 :issue:`39357` 中贡献。）"

#: ../../whatsnew/3.9.rst:1094
msgid ""
"Simplified AST for subscription. Simple indices will be represented by their"
" value, extended slices will be represented as tuples. ``Index(value)`` will"
" return a ``value`` itself, ``ExtSlice(slices)`` will return ``Tuple(slices,"
" Load())``. (Contributed by Serhiy Storchaka in :issue:`34822`.)"
msgstr ""
"简化了 AST 的抽取操作。 简单索引将以它们的值来代表，扩展切片将以元组形式来代表。 ``Index(value)`` 将返回 ``value`` "
"本身，``ExtSlice(slices)`` 将返回 ``Tuple(slices, Load())``。 （由 Serhiy Storchaka 在"
" :issue:`34822` 中贡献。）"

#: ../../whatsnew/3.9.rst:1100
msgid ""
"The :mod:`importlib` module now ignores the :envvar:`PYTHONCASEOK` "
"environment variable when the :option:`-E` or :option:`-I` command line "
"options are being used."
msgstr ""
"当使用了 :option:`-E` 或 :option:`-I` 命令行参数时 :mod:`importlib` 模块现在会忽略 "
":envvar:`PYTHONCASEOK` 环境变量。"

#: ../../whatsnew/3.9.rst:1104
msgid ""
"The *encoding* parameter has been added to the classes :class:`ftplib.FTP` "
"and :class:`ftplib.FTP_TLS` as a keyword-only parameter, and the default "
"encoding is changed from Latin-1 to UTF-8 to follow :rfc:`2640`."
msgstr ""
"*encoding* 形参已作为仅限关键字形参被添加到 :class:`ftplib.FTP` 和 :class:`ftplib.FTP_TLS` "
"类，并且默认编码格式由 Latin-1 改为 UTF-8 以遵循 :rfc:`2640`。"

#: ../../whatsnew/3.9.rst:1108
msgid ""
":meth:`asyncio.loop.shutdown_default_executor` has been added to "
":class:`~asyncio.AbstractEventLoop`, meaning alternative event loops that "
"inherit from it should have this method defined. (Contributed by Kyle "
"Stanley in :issue:`34037`.)"
msgstr ""
":meth:`asyncio.loop.shutdown_default_executor` 已被添加到 "
":class:`~asyncio.AbstractEventLoop`，这意味着继承自它的替代事件循环应当定义此方法。 （由 Kyle Stanley "
"在 :issue:`34037` 中贡献。）"

#: ../../whatsnew/3.9.rst:1113
msgid ""
"The constant values of future flags in the :mod:`__future__` module is "
"updated in order to prevent collision with compiler flags. Previously "
"``PyCF_ALLOW_TOP_LEVEL_AWAIT`` was clashing with ``CO_FUTURE_DIVISION``. "
"(Contributed by Batuhan Taskaya in :issue:`39562`)"
msgstr ""
"更新了 :mod:`__future__` 模块中未来特性旗标的常量值以防止与编译器旗标相冲突。 在之前版本中 "
"``PyCF_ALLOW_TOP_LEVEL_AWAIT`` 会与 ``CO_FUTURE_DIVISION`` 发生冲突。 （由 Batuhan "
"Taskaya 在 :issue:`39562` 中贡献。）"

#: ../../whatsnew/3.9.rst:1118
msgid ""
"``array('u')`` now uses ``wchar_t`` as C type instead of ``Py_UNICODE``. "
"This change doesn't affect to its behavior because ``Py_UNICODE`` is alias "
"of ``wchar_t`` since Python 3.3. (Contributed by Inada Naoki in "
":issue:`34538`.)"
msgstr ""
"``array('u')`` 现在使用 ``wchar_t`` 作为 C 类型而不是 ``Py_UNICODE``。 这个改变不会影响其行为，因为自 "
"Python 3.3 起 ``Py_UNICODE`` 是 ``wchar_t`` 的别名。 （由 Inada Naoki 在 "
":issue:`34538` 中贡献。）"

#: ../../whatsnew/3.9.rst:1123
msgid ""
"The :func:`logging.getLogger` API now returns the root logger when passed "
"the name ``'root'``, whereas previously it returned a non-root logger named "
"``'root'``. This could affect cases where user code explicitly wants a non-"
"root logger named ``'root'``, or instantiates a logger using "
"``logging.getLogger(__name__)`` in some top-level module called "
"``'root.py'``. (Contributed by Vinay Sajip in :issue:`37742`.)"
msgstr ""
"现在 :func:`logging.getLogger` API 当传入名称 ``'root'`` 时将返回根日志记录器，而在之前它则返回一个名为 "
"``'root'`` 的非根日志记录器。 这可能会影响到用户代码明确希望使用一个名为 ``'root'`` 的非根日志记录器，或在某个名为 "
"``'root.py'`` 的最高层级模块中使用 ``logging.getLogger(__name__)`` 来实例化日志记录器的情况。 （由 "
"Vinay Sajip 在 :issue:`37742` 中贡献。）"

#: ../../whatsnew/3.9.rst:1130
msgid ""
"Division handling of :class:`~pathlib.PurePath` now returns "
"``NotImplemented`` instead of raising a :exc:`TypeError` when passed "
"something other than an instance of ``str`` or :class:`~pathlib.PurePath`.  "
"This allows creating compatible classes that don't inherit from those "
"mentioned types. (Contributed by Roger Aiudi in :issue:`34775`)."
msgstr ""
"现在 :class:`~pathlib.PurePath` 的拆分处理当传入 ``str`` 或 :class:`~pathlib.PurePath` "
"的实例以外的对象时会返回 ``NotImplemented`` 而不是引发 :exc:`TypeError`。 这将允许创建不继承自上述类型的兼容类。 "
"（由 Roger Aiudi 在 :issue:`34775` 中贡献。）"

#: ../../whatsnew/3.9.rst:1136
msgid ""
"Starting with Python 3.9.5 the :mod:`ipaddress` module no longer accepts any"
" leading zeros in IPv4 address strings. Leading zeros are ambiguous and "
"interpreted as octal notation by some libraries. For example the legacy "
"function :func:`socket.inet_aton` treats leading zeros as octal notatation. "
"glibc implementation of modern :func:`~socket.inet_pton` does not accept any"
" leading zeros. (Contributed by Christian Heimes in :issue:`36384`)."
msgstr ""
"从 Python 3.9.5 开始 :mod:`ipaddress` 模块不再接受 IPv4 地址字符串中有任何前缀的零。 "
"前缀的零有歧义且会被某些库解读为八进制数字。 例如旧版函数 :func:`socket.inet_aton` 就瘵前缀的零视为八进制数字。 最新 "
":func:`~socket.inet_pton` 的 glibc 实现则不接受任何前缀的零。 （由 Christian Heimes 在 "
":issue:`36384` 中贡献）。"

#: ../../whatsnew/3.9.rst:1144
msgid ""
":func:`codecs.lookup` now normalizes the encoding name the same way as "
":func:`encodings.normalize_encoding`, except that :func:`codecs.lookup` also"
" converts the name to lower case. For example, ``\"latex+latin1\"`` encoding"
" name is now normalized to ``\"latex_latin1\"``. (Contributed by Jordon Xu "
"in :issue:`37751`.)"
msgstr ""
":func:`codecs.lookup` 现在会以与 :func:`encodings.normalize_encoding` "
"相同的方式正规化编码格式名称，不同之处在于 :func:`codecs.lookup` 还会将名称转换为小写形式。 例如 "
"``\"latex+latin1\"`` 编写格式名称现在会被正规化为 ``\"latex_latin1\"``。 （由 Jordon Xu 在 "
":issue:`37751` 中贡献。）"

#: ../../whatsnew/3.9.rst:1152
msgid "Changes in the C API"
msgstr "C API 的变化"

#: ../../whatsnew/3.9.rst:1154
msgid ""
"Instances of :ref:`heap-allocated types <heap-types>` (such as those created"
" with :c:func:`PyType_FromSpec` and similar APIs) hold a reference to their "
"type object since Python 3.8. As indicated in the \"Changes in the C API\" "
"of Python 3.8, for the vast majority of cases, there should be no side "
"effect but for types that have a custom "
":c:member:`~PyTypeObject.tp_traverse` function, ensure that all custom "
"``tp_traverse`` functions of heap-allocated types visit the object's type."
msgstr ""
"Instances of :ref:`堆分配类型 <heap-types>` 的实例（例如使用 :c:func:`PyType_FromSpec` "
"和类似 API 创建的实例）自 Python 3.8 起会带有一个对其类型对象的引用。 正如 Python 3.8 的 \"C API 的变化\" "
"部分所述，对于大多数情况来说，这应当不会有任何副作用，但对于具有自定义 :c:member:`~PyTypeObject.tp_traverse` "
"函数的类型来说，则要确保所有堆分配类型的自定义 ``tp_traverse`` 函数可访问对象的类型。"

#: ../../whatsnew/3.9.rst:1175
msgid ""
"If your traverse function delegates to ``tp_traverse`` of its base class (or"
" another type), ensure that ``Py_TYPE(self)`` is visited only once. Note "
"that only :ref:`heap type <heap-types>` are expected to visit the type in "
"``tp_traverse``."
msgstr ""
"如果你的遍历函数委托给了其基类（或其他类）的 ``tp_traverse``，则要确保 ``Py_TYPE(self)`` 只被访问一次。 "
"请注意应当只有 :ref:`堆类型 <heap-types>` 可访问 ``tp_traverse`` 中的类型。"

#: ../../whatsnew/3.9.rst:1180
msgid "For example, if your ``tp_traverse`` function includes:"
msgstr "举例来说，如果你的 ``tp_traverse`` 函数包括以下内容:"

#: ../../whatsnew/3.9.rst:1186
msgid "then add:"
msgstr "则要添加:"

#: ../../whatsnew/3.9.rst:1199
msgid "(See :issue:`35810` and :issue:`40217` for more information.)"
msgstr "（参阅 :issue:`35810` 和 :issue:`40217` 了解更多信息。）"

#: ../../whatsnew/3.9.rst:1201
msgid ""
"The functions ``PyEval_CallObject``, ``PyEval_CallFunction``, "
"``PyEval_CallMethod`` and ``PyEval_CallObjectWithKeywords`` are deprecated. "
"Use :c:func:`PyObject_Call` and its variants instead. (See more details in "
":issue:`29548`.)"
msgstr ""
"``PyEval_CallObject``, ``PyEval_CallFunction``, ``PyEval_CallMethod`` 和 "
"``PyEval_CallObjectWithKeywords`` 函数已被弃用。 请改用 :c:func:`PyObject_Call` "
"及其变化形式。 （详情参见 :issue:`29548`。）"

#: ../../whatsnew/3.9.rst:1207
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.9.rst:1209
msgid ""
"The :opcode:`LOAD_ASSERTION_ERROR` opcode was added for handling the "
":keyword:`assert` statement. Previously, the assert statement would not work"
" correctly if the :exc:`AssertionError` exception was being shadowed. "
"(Contributed by Zackery Spytz in :issue:`34880`.)"
msgstr ""
"添加了 :opcode:`LOAD_ASSERTION_ERROR` 操作码用于处理 :keyword:`assert` 语句。 在之前的版本中，如果 "
":exc:`AssertionError` 异常被屏蔽则 assert 语句将不能正常运作。 （由 Zackery Spytz 在 "
":issue:`34880` 中贡献。）"

#: ../../whatsnew/3.9.rst:1214
msgid ""
"The :opcode:`COMPARE_OP` opcode was split into four distinct instructions:"
msgstr ":opcode:`COMPARE_OP` 操作码已被拆分为四个单独指令:"

#: ../../whatsnew/3.9.rst:1216
msgid "``COMPARE_OP`` for rich comparisons"
msgstr "``COMPARE_OP`` 用于富比较"

#: ../../whatsnew/3.9.rst:1217
msgid "``IS_OP`` for 'is' and 'is not' tests"
msgstr "``IS_OP`` 用于 'is' 和 'is not' 检测"

#: ../../whatsnew/3.9.rst:1218
msgid "``CONTAINS_OP`` for 'in' and 'not in' tests"
msgstr "``CONTAINS_OP`` 用于 'in' 和 'not in' 检测"

#: ../../whatsnew/3.9.rst:1219
msgid ""
"``JUMP_IF_NOT_EXC_MATCH`` for checking exceptions in 'try-except' "
"statements."
msgstr "``JUMP_IF_NOT_EXC_MATCH`` 用于检查 'try-except' 语句中的异常。"

#: ../../whatsnew/3.9.rst:1222
msgid "(Contributed by Mark Shannon in :issue:`39156`.)"
msgstr "（由 Mark Shannon 在 :issue:`39156` 中贡献。）"

#: ../../whatsnew/3.9.rst:1226
msgid "Build Changes"
msgstr "构建的改变"

#: ../../whatsnew/3.9.rst:1228
msgid ""
"Added ``--with-platlibdir`` option to the ``configure`` script: name of the "
"platform-specific library directory, stored in the new "
":attr:`sys.platlibdir` attribute. See :attr:`sys.platlibdir` attribute for "
"more information. (Contributed by Jan Matějek, Matěj Cepl, Charalampos "
"Stratakis and Victor Stinner in :issue:`1294959`.)"
msgstr ""
"将 ``--with-platlibdir`` 选项添加到 ``configure`` 脚本：平台专属库目录的名称，保存在新的 "
":attr:`sys.platlibdir` 属性中。 请参阅 :attr:`sys.platlibdir` 属性了解详情。 （由 Jan "
"Matějek, Matěj Cepl, Charalampos Stratakis 和 Victor Stinner 在 "
":issue:`1294959` 中贡献。）"

#: ../../whatsnew/3.9.rst:1234
msgid ""
"The ``COUNT_ALLOCS`` special build macro has been removed. (Contributed by "
"Victor Stinner in :issue:`39489`.)"
msgstr "``COUNT_ALLOCS`` 特殊构建宏已被移除。 （由 Victor Stinner 在 :issue:`39489` 中贡献。）"

#: ../../whatsnew/3.9.rst:1237
msgid ""
"On non-Windows platforms, the :c:func:`setenv` and :c:func:`unsetenv` "
"functions are now required to build Python. (Contributed by Victor Stinner "
"in :issue:`39395`.)"
msgstr ""
"在非 Windows 平台上，现在需要用 :c:func:`setenv` 和 :c:func:`unsetenv` 函数来构建 Python。 （由 "
"Victor Stinner 在 :issue:`39395` 中贡献。）"

#: ../../whatsnew/3.9.rst:1241
msgid ""
"On non-Windows platforms, creating ``bdist_wininst`` installers is now "
"officially unsupported.  (See :issue:`10945` for more details.)"
msgstr ""
"在非 Windows 平台上，创建 ``bdist_wininst`` 安装器现在已不受官方支持。 （详情参见 :issue:`10945`。）"

#: ../../whatsnew/3.9.rst:1244
msgid ""
"When building Python on macOS from source, ``_tkinter`` now links with non-"
"system Tcl and Tk frameworks if they are installed in "
"``/Library/Frameworks``, as had been the case on older releases of macOS. If"
" a macOS SDK is explicitly configured, by using :option:`--enable-"
"universalsdk` or ``-isysroot``, only the SDK itself is searched. The default"
" behavior can still be overridden with :option:`--with-tcltk-includes` and "
":option:`--with-tcltk-libs`. (Contributed by Ned Deily in :issue:`34956`.)"
msgstr ""
"当在 macOS 上用源代码编译 Python 时，``_tkinter`` 现在会链接到非系统的 Tcl 和 Tk 框架，如果它们被安装到 "
"``/Library/Frameworks`` 的话，就如在较旧的 macOS 发行版上的情况一样。 如果通过使用 :option:`--enable-"
"universalsdk` 或 ``-isysroot`` 显式地配置了 macOS SDK，则只会搜索 SDK 本身。 该默认行为仍可通过 "
":option:`--with-tcltk-includes` 和 :option:`--with-tcltk-libs` 来重载。 （由 Ned "
"Deily 在 :issue:`34956` 中贡献。）"

#: ../../whatsnew/3.9.rst:1253
msgid ""
"Python can now be built for Windows 10 ARM64. (Contributed by Steve Dower in"
" :issue:`33125`.)"
msgstr ""
"Python 现在可以针对 Windows 10 ARM64 进行编译。 （由 Steve Dower 在 :issue:`33125` 中贡献。）"

#: ../../whatsnew/3.9.rst:1256
msgid ""
"Some individual tests are now skipped when ``--pgo`` is used.  The tests in "
"question increased the PGO task time significantly and likely didn't help "
"improve optimization of the final executable. This speeds up the task by a "
"factor of about 15x.  Running the full unit test suite is slow.  This change"
" may result in a slightly less optimized build since not as many code "
"branches will be executed.  If you are willing to wait for the much slower "
"build, the old behavior can be restored using ``./configure [..] "
"PROFILE_TASK=\"-m test --pgo-extended\"``.  We make no guarantees as to "
"which PGO task set produces a faster build.  Users who care should run their"
" own relevant benchmarks as results can depend on the environment, workload,"
" and compiler tool chain. (See :issue:`36044` and :issue:`37707` for more "
"details.)"
msgstr ""
"现在当使用 ``--pgo`` 时一些单独的测试会被跳过。 这些测试显著增加了 PGO 任务的时间并且可能无助于提升最终可执行文件的优化程度。 "
"这样能使任务加速大约 15 倍。 运行完整的单元测试是很慢的。 这个改变可能导致优化程序稍差的构建，因为将被执行的代码分支不够多。 "
"如果你愿意等待更缓慢的构建，则可以使用 ``./configure [..] PROFILE_TASK=\"-m test --pgo-"
"extended\"`` 来恢复旧版本的行为。 我们不保证哪个 PGO 任务集能产生更快的构建。 "
"关心此问题的用户应当自行运行相关基准测试，因为结果可能取决于具体环境、工作负载以及编译工具链。 （请参阅 :issue:`36044` 和 "
":issue:`37707` 了解详情。）"

#: ../../whatsnew/3.9.rst:1271
msgid "C API Changes"
msgstr "C API 的改变"

#: ../../whatsnew/3.9.rst:1276
msgid ""
":pep:`573`: Added :c:func:`PyType_FromModuleAndSpec` to associate a module "
"with a class; :c:func:`PyType_GetModule` and :c:func:`PyType_GetModuleState`"
" to retrieve the module and its state; and :c:data:`PyCMethod` and "
":c:data:`METH_METHOD` to allow a method to access the class it was defined "
"in. (Contributed by Marcel Plch and Petr Viktorin in :issue:`38787`.)"
msgstr ""
":pep:`573`: 添加了 :c:func:`PyType_FromModuleAndSpec` "
"用于通过类来关联一个模块；:c:func:`PyType_GetModule` 和 :c:func:`PyType_GetModuleState` "
"用于获取模块及其状态；以及 :c:data:`PyCMethod` 和 :c:data:`METH_METHOD` 用于允许一个方法访问其定义所在的类。"
" （由 Marcel Plch 和 Petr Viktorin 在 :issue:`38787` 中贡献。）"

#: ../../whatsnew/3.9.rst:1283
msgid ""
"Added :c:func:`PyFrame_GetCode` function: get a frame code. Added "
":c:func:`PyFrame_GetBack` function: get the frame next outer frame. "
"(Contributed by Victor Stinner in :issue:`40421`.)"
msgstr ""
"增加了 :c:func:`PyFrame_GetCode` 函数：获取帧代码。 增加了 :c:func:`PyFrame_GetBack` "
"函数：获取帧的下一个外部帧。 （由 Victor Stinner 在 :issue:`40421` 中贡献。）"

#: ../../whatsnew/3.9.rst:1287
msgid ""
"Added :c:func:`PyFrame_GetLineNumber` to the limited C API. (Contributed by "
"Victor Stinner in :issue:`40421`.)"
msgstr ""
"将 :c:func:`PyFrame_GetLineNumber` 添加到受限的 C API。 （由 Victor Stinner 在 "
":issue:`40421` 中贡献。）"

#: ../../whatsnew/3.9.rst:1290
msgid ""
"Added :c:func:`PyThreadState_GetInterpreter` and "
":c:func:`PyInterpreterState_Get` functions to get the interpreter. Added "
":c:func:`PyThreadState_GetFrame` function to get the current frame of a "
"Python thread state. Added :c:func:`PyThreadState_GetID` function: get the "
"unique identifier of a Python thread state. (Contributed by Victor Stinner "
"in :issue:`39947`.)"
msgstr ""
"增加了 :c:func:`PyThreadState_GetInterpreter` 和 "
":c:func:`PyInterpreterState_Get` 函数用于获取解释器。 增加了 "
":c:func:`PyThreadState_GetFrame` 函数用于获取 Python 线程状态的当前帧。 增加了 "
":c:func:`PyThreadState_GetID` 函数：获取 Python 线程状态的唯一标识符。 （由 Victor Stinner 在 "
":issue:`39947` 中贡献。）"

#: ../../whatsnew/3.9.rst:1298
msgid ""
"Added a new public :c:func:`PyObject_CallNoArgs` function to the C API, "
"which calls a callable Python object without any arguments. It is the most "
"efficient way to call a callable Python object without any argument. "
"(Contributed by Victor Stinner in :issue:`37194`.)"
msgstr ""
"将新的公有 :c:func:`PyObject_CallNoArgs` 函数添加到 C API，该函数可不带任何参数调用一个 Python 可调用对象。"
" 它是不带参数调用 Python 可调用对象最有效率的方式。 （由 Victor Stinner 在 :issue:`37194` 中贡献。）"

#: ../../whatsnew/3.9.rst:1303 ../../whatsnew/3.9.rst:1421
msgid "Changes in the limited C API (if ``Py_LIMITED_API`` macro is defined):"
msgstr "受限 C API 中的改变（如果定义了 ``Py_LIMITED_API`` 宏）:"

#: ../../whatsnew/3.9.rst:1305
msgid ""
"Provide :c:func:`Py_EnterRecursiveCall` and :c:func:`Py_LeaveRecursiveCall` "
"as regular functions for the limited API. Previously, there were defined as "
"macros, but these macros didn't compile with the limited C API which cannot "
"access ``PyThreadState.recursion_depth`` field (the structure is opaque in "
"the limited C API)."
msgstr ""
"提供 :c:func:`Py_EnterRecursiveCall` 和 :c:func:`Py_LeaveRecursiveCall` "
"作为常规函数用于受限 API。 在之前版本中是使用宏定义，但这些宏不能与无法访问 ``PyThreadState.recursion_depth`` "
"字段的受限 C API 一同编译（该结构体在受限 C API 中是不透明的）。"

#: ../../whatsnew/3.9.rst:1311
msgid ""
"``PyObject_INIT()`` and ``PyObject_INIT_VAR()`` become regular \"opaque\" "
"function to hide implementation details."
msgstr "``PyObject_INIT()`` 和 ``PyObject_INIT_VAR()`` 已成为常规“不透明”函数以隐藏实现细节。"

#: ../../whatsnew/3.9.rst:1314 ../../whatsnew/3.9.rst:1448
msgid "(Contributed by Victor Stinner in :issue:`38644` and :issue:`39542`.)"
msgstr "（由 Victor Stinner 在 :issue:`38644` 和 :issue:`39542` 中贡献。）"

#: ../../whatsnew/3.9.rst:1316
msgid ""
"The :c:func:`PyModule_AddType` function is added to help adding a type to a "
"module. (Contributed by Dong-hee Na in :issue:`40024`.)"
msgstr ""
"增加了 :c:func:`PyModule_AddType` 函数以协助将类型加入到模块中。 （由 Dong-hee Na 在 "
":issue:`40024` 中贡献。）"

#: ../../whatsnew/3.9.rst:1320
msgid ""
"Added the functions :c:func:`PyObject_GC_IsTracked` and "
":c:func:`PyObject_GC_IsFinalized` to the public API to allow to query if "
"Python objects are being currently tracked or have been already finalized by"
" the garbage collector respectively. (Contributed by Pablo Galindo Salgado "
"in :issue:`40241`.)"
msgstr ""
"将 :c:func:`PyObject_GC_IsTracked` 和 :c:func:`PyObject_GC_IsFinalized` "
"函数添加到公有 API 以允许分别查询 Python 对象当前是正在被追踪还是已经被垃圾回收器所终结。 （由 Pablo Galindo Salgado"
" 在 :issue:`40241` 中贡献。）"

#: ../../whatsnew/3.9.rst:1326
msgid ""
"Added :c:func:`_PyObject_FunctionStr` to get a user-friendly string "
"representation of a function-like object. (Patch by Jeroen Demeyer in "
":issue:`37645`.)"
msgstr ""
"增加了 :c:func:`_PyObject_FunctionStr` 以获取函数类对象的用户友好的表示形式。 （由 Jeroen Demeyer 在 "
":issue:`37645` 中修正。）"

#: ../../whatsnew/3.9.rst:1330
msgid ""
"Added :c:func:`PyObject_CallOneArg` for calling an object with one "
"positional argument (Patch by Jeroen Demeyer in :issue:`37483`.)"
msgstr ""
"增加了 :c:func:`PyObject_CallOneArg` 用于调用具有一个位置参数的对象（由 Jeroen Demeyer 在 "
":issue:`37483` 中修正。）"

#: ../../whatsnew/3.9.rst:1338
msgid ""
"``PyInterpreterState.eval_frame`` (:pep:`523`) now requires a new mandatory "
"*tstate* parameter (``PyThreadState*``). (Contributed by Victor Stinner in "
":issue:`38500`.)"
msgstr ""
"``PyInterpreterState.eval_frame`` (:pep:`523`) 现在需要有新的强制性形参 *tstate* "
"(``PyThreadState*``)。 （由 Victor Stinner 在 :issue:`38500` 中贡献。）"

#: ../../whatsnew/3.9.rst:1342
msgid ""
"Extension modules: :c:member:`~PyModuleDef.m_traverse`, "
":c:member:`~PyModuleDef.m_clear` and :c:member:`~PyModuleDef.m_free` "
"functions of :c:type:`PyModuleDef` are no longer called if the module state "
"was requested but is not allocated yet. This is the case immediately after "
"the module is created and before the module is executed "
"(:c:data:`Py_mod_exec` function). More precisely, these functions are not "
"called if :c:member:`~PyModuleDef.m_size` is greater than 0 and the module "
"state (as returned by :c:func:`PyModule_GetState`) is ``NULL``."
msgstr ""
"扩展模块: :c:type:`PyModuleDef` 的 :c:member:`~PyModuleDef.m_traverse`, "
":c:member:`~PyModuleDef.m_clear` 和 :c:member:`~PyModuleDef.m_free` "
"等函数在模块状态被请求但尚未被分配时将不会再被调用。 这种情况出现在模块被创建之后且模块被执行 (:c:data:`Py_mod_exec` 函数) "
"之前的时刻。 更准确地说，这些函数在 :c:member:`~PyModuleDef.m_size` 大于 0 并且模块状态（即 "
":c:func:`PyModule_GetState` 的返回值）为 ``NULL`` 时将不会被调用。"

#: ../../whatsnew/3.9.rst:1351
msgid ""
"Extension modules without module state (``m_size <= 0``) are not affected."
msgstr "没有模块状态的扩展模块 (``m_size <= 0``) 不会受到影响。"

#: ../../whatsnew/3.9.rst:1353
msgid ""
"If :c:func:`Py_AddPendingCall` is called in a subinterpreter, the function "
"is now scheduled to be called from the subinterpreter, rather than being "
"called from the main interpreter. Each subinterpreter now has its own list "
"of scheduled calls. (Contributed by Victor Stinner in :issue:`39984`.)"
msgstr ""
"现在如果 :c:func:`Py_AddPendingCall` 是在子解释器内部被调用，该函数会被排入子解释器的调用日程，而不是由主解释器调用。 "
"每个子解释器现在都拥有它们自己的调用日程列表。 （由 Victor Stinner 在 :issue:`39984` 中贡献。）"

#: ../../whatsnew/3.9.rst:1359
msgid ""
"The Windows registry is no longer used to initialize :data:`sys.path` when "
"the ``-E`` option is used (if :c:member:`PyConfig.use_environment` is set to"
" ``0``). This is significant when embedding Python on Windows. (Contributed "
"by Zackery Spytz in :issue:`8901`.)"
msgstr ""
"当 ``-E`` 选项被使用 (如果 :c:member:`PyConfig.use_environment` 设为 ``0``) 时将不再使用 "
"Windows 注册表来初始化 :data:`sys.path`。 这会影响在 Windows 上嵌入 Python 的操作。 （由 Zackery "
"Spytz 在 :issue:`8901` 中贡献。）"

#: ../../whatsnew/3.9.rst:1364
msgid ""
"The global variable :c:data:`PyStructSequence_UnnamedField` is now a "
"constant and refers to a constant string. (Contributed by Serhiy Storchaka "
"in :issue:`38650`.)"
msgstr ""
"全局变量 :c:data:`PyStructSequence_UnnamedField` 现在为常量并且指向一个字符串常量。 （由 Serhiy "
"Storchaka 在 :issue:`38650` 中贡献。）"

#: ../../whatsnew/3.9.rst:1368
msgid ""
"The :c:type:`PyGC_Head` structure is now opaque. It is only defined in the "
"internal C API (``pycore_gc.h``). (Contributed by Victor Stinner in "
":issue:`40241`.)"
msgstr ""
"现在 :c:type:`PyGC_Head` 结构是不透明的。 它只在内部 C API (``pycore_gc.h``) 中定义。 （由 Victor"
" Stinner 在 :issue:`40241` 中贡献。）"

#: ../../whatsnew/3.9.rst:1372
msgid ""
"The ``Py_UNICODE_COPY``, ``Py_UNICODE_FILL``, ``PyUnicode_WSTR_LENGTH``, "
":c:func:`PyUnicode_FromUnicode`, :c:func:`PyUnicode_AsUnicode`, "
"``_PyUnicode_AsUnicode``, and :c:func:`PyUnicode_AsUnicodeAndSize` are "
"marked as deprecated in C.  They have been deprecated by :pep:`393` since "
"Python 3.3. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"``Py_UNICODE_COPY``, ``Py_UNICODE_FILL``, ``PyUnicode_WSTR_LENGTH``, "
":c:func:`PyUnicode_FromUnicode`, :c:func:`PyUnicode_AsUnicode`, "
"``_PyUnicode_AsUnicode`` 以及 :c:func:`PyUnicode_AsUnicodeAndSize` 在 C "
"中被标记为已弃用。 它们自 Python 3.3 起就已被 :pep:`393` 弃用。 （由 Inada Naoki 在 :issue:`36346`"
" 中贡献。）"

#: ../../whatsnew/3.9.rst:1379
msgid ""
"The :c:func:`Py_FatalError` function is replaced with a macro which logs "
"automatically the name of the current function, unless the "
"``Py_LIMITED_API`` macro is defined. (Contributed by Victor Stinner in "
":issue:`39882`.)"
msgstr ""
":c:func:`Py_FatalError` 函数会被一个自动记录当前函数名称的宏所替代，除非已定义了 ``Py_LIMITED_API`` 宏。 "
"（由 Victor Stinner 在 :issue:`39882` 中贡献。）"

#: ../../whatsnew/3.9.rst:1384
msgid ""
"The vectorcall protocol now requires that the caller passes only strings as "
"keyword names. (See :issue:`37540` for more information.)"
msgstr "vectorcall 协议现在要求调用者只传入字符串作为键名。 （请参阅 :issue:`37540` 了解详情。）"

#: ../../whatsnew/3.9.rst:1387
msgid ""
"Implementation details of a number of macros and functions are now hidden:"
msgstr "多个宏和函数的实现细节现在已被隐藏:"

#: ../../whatsnew/3.9.rst:1389
msgid ":c:func:`PyObject_IS_GC` macro was converted to a function."
msgstr ":c:func:`PyObject_IS_GC` 宏已被转换为函数。"

#: ../../whatsnew/3.9.rst:1391
msgid ""
"The :c:func:`PyObject_NEW` macro becomes an alias to the "
":c:func:`PyObject_New` macro, and the :c:func:`PyObject_NEW_VAR` macro "
"becomes an alias to the :c:func:`PyObject_NewVar` macro. They no longer "
"access directly the :c:member:`PyTypeObject.tp_basicsize` member."
msgstr ""
":c:func:`PyObject_NEW` 宏已成为 :c:func:`PyObject_New` 宏的别名，而 "
":c:func:`PyObject_NEW_VAR` 宏已成为 :c:func:`PyObject_NewVar` 宏的别名。  它们将不再直接访问 "
":c:member:`PyTypeObject.tp_basicsize` 成员。"

#: ../../whatsnew/3.9.rst:1396
msgid ""
":c:func:`PyObject_GET_WEAKREFS_LISTPTR` macro was converted to a function: "
"the macro accessed directly the :c:member:`PyTypeObject.tp_weaklistoffset` "
"member."
msgstr ""
":c:func:`PyObject_GET_WEAKREFS_LISTPTR` 宏已被转换为函数：该宏会直接访问 "
":c:member:`PyTypeObject.tp_weaklistoffset` 成员。"

#: ../../whatsnew/3.9.rst:1400
msgid ""
":c:func:`PyObject_CheckBuffer` macro was converted to a function: the macro "
"accessed directly the :c:member:`PyTypeObject.tp_as_buffer` member."
msgstr ""
":c:func:`PyObject_CheckBuffer` 宏已被转换为函数：该宏会直接访问 "
":c:member:`PyTypeObject.tp_as_buffer` 成员。"

#: ../../whatsnew/3.9.rst:1403
msgid ""
":c:func:`PyIndex_Check` is now always declared as an opaque function to hide"
" implementation details: removed the ``PyIndex_Check()`` macro. The macro "
"accessed directly the :c:member:`PyTypeObject.tp_as_number` member."
msgstr ""
"现在 :c:func:`PyIndex_Check` 总是被声明为不透明函数以隐藏实现细节；``PyIndex_Check()`` 宏已被移除。 "
"该宏会直接访问 :c:member:`PyTypeObject.tp_as_number` 成员。"

#: ../../whatsnew/3.9.rst:1407
msgid "(See :issue:`40170` for more details.)"
msgstr "（详情请参阅 :issue:`40170`。）"

#: ../../whatsnew/3.9.rst:1412
msgid ""
"Excluded ``PyFPE_START_PROTECT()`` and ``PyFPE_END_PROTECT()`` macros of "
"``pyfpe.h`` from the limited C API. (Contributed by Victor Stinner in "
":issue:`38835`.)"
msgstr ""
"``pyfpe.h`` 的 ``PyFPE_START_PROTECT()`` 和 ``PyFPE_END_PROTECT()`` 宏已从受限的 C "
"API 中被排除。 （由 Victor Stinner 在 :issue:`38835` 中贡献。）"

#: ../../whatsnew/3.9.rst:1416
msgid ""
"The ``tp_print`` slot of :ref:`PyTypeObject <type-structs>` has been "
"removed. It was used for printing objects to files in Python 2.7 and before."
" Since Python 3.0, it has been ignored and unused. (Contributed by Jeroen "
"Demeyer in :issue:`36974`.)"
msgstr ""
":ref:`PyTypeObject <type-structs>` 的 ``tp_print`` 空位已被移除。 它在 Python 2.7 "
"及之前的版本中被用来将对象打印到文件。 自 Python 3.0 起，它已被忽略并且不再使用。 （由 Jeroen Demeyer 在 "
":issue:`36974` 中贡献。）"

#: ../../whatsnew/3.9.rst:1423
msgid "Excluded the following functions from the limited C API:"
msgstr "以下函数已从受限 C API 中排除:"

#: ../../whatsnew/3.9.rst:1425
msgid ""
"``PyThreadState_DeleteCurrent()`` (Contributed by Joannah Nanjekye in "
":issue:`37878`.)"
msgstr ""
"``PyThreadState_DeleteCurrent()`` （由 Joannah Nanjekye 在 :issue:`37878` 中贡献。）"

#: ../../whatsnew/3.9.rst:1427
msgid "``_Py_CheckRecursionLimit``"
msgstr "``_Py_CheckRecursionLimit``"

#: ../../whatsnew/3.9.rst:1428
msgid "``_Py_NewReference()``"
msgstr "``_Py_NewReference()``"

#: ../../whatsnew/3.9.rst:1429
msgid "``_Py_ForgetReference()``"
msgstr "``_Py_ForgetReference()``"

#: ../../whatsnew/3.9.rst:1430
msgid "``_PyTraceMalloc_NewReference()``"
msgstr "``_PyTraceMalloc_NewReference()``"

#: ../../whatsnew/3.9.rst:1431
msgid "``_Py_GetRefTotal()``"
msgstr "``_Py_GetRefTotal()``"

#: ../../whatsnew/3.9.rst:1432
msgid "The trashcan mechanism which never worked in the limited C API."
msgstr "在受限 C API 中从未使用的垃圾箱机制。"

#: ../../whatsnew/3.9.rst:1433
msgid "``PyTrash_UNWIND_LEVEL``"
msgstr "``PyTrash_UNWIND_LEVEL``"

#: ../../whatsnew/3.9.rst:1434
msgid "``Py_TRASHCAN_BEGIN_CONDITION``"
msgstr "``Py_TRASHCAN_BEGIN_CONDITION``"

#: ../../whatsnew/3.9.rst:1435
msgid "``Py_TRASHCAN_BEGIN``"
msgstr "``Py_TRASHCAN_BEGIN``"

#: ../../whatsnew/3.9.rst:1436
msgid "``Py_TRASHCAN_END``"
msgstr "``Py_TRASHCAN_END``"

#: ../../whatsnew/3.9.rst:1437
msgid "``Py_TRASHCAN_SAFE_BEGIN``"
msgstr "``Py_TRASHCAN_SAFE_BEGIN``"

#: ../../whatsnew/3.9.rst:1438
msgid "``Py_TRASHCAN_SAFE_END``"
msgstr "``Py_TRASHCAN_SAFE_END``"

#: ../../whatsnew/3.9.rst:1440
msgid "Moved following functions and definitions to the internal C API:"
msgstr "已将下列函数和定义移至内部 C API:"

#: ../../whatsnew/3.9.rst:1442
msgid "``_PyDebug_PrintTotalRefs()``"
msgstr "``_PyDebug_PrintTotalRefs()``"

#: ../../whatsnew/3.9.rst:1443
msgid "``_Py_PrintReferences()``"
msgstr "``_Py_PrintReferences()``"

#: ../../whatsnew/3.9.rst:1444
msgid "``_Py_PrintReferenceAddresses()``"
msgstr "``_Py_PrintReferenceAddresses()``"

#: ../../whatsnew/3.9.rst:1445
msgid "``_Py_tracemalloc_config``"
msgstr "``_Py_tracemalloc_config``"

#: ../../whatsnew/3.9.rst:1446
msgid "``_Py_AddToAllObjects()`` (specific to ``Py_TRACE_REFS`` build)"
msgstr "``_Py_AddToAllObjects()`` (``Py_TRACE_REFS`` 构建专属)"

#: ../../whatsnew/3.9.rst:1450
msgid ""
"Removed ``_PyRuntime.getframe`` hook and removed ``_PyThreadState_GetFrame``"
" macro which was an alias to ``_PyRuntime.getframe``. They were only exposed"
" by the internal C API. Removed also ``PyThreadFrameGetter`` type. "
"(Contributed by Victor Stinner in :issue:`39946`.)"
msgstr ""
"移除了 ``_PyRuntime.getframe`` 钩子并移除了 ``_PyThreadState_GetFrame`` 宏，该宏是 "
"``_PyRuntime.getframe`` 的一个别名。 它们仅由内部 C API 对外公开。 同样地移除了 "
"``PyThreadFrameGetter`` 类型。 （由 Victor Stinner 在 :issue:`39946` 中贡献。）"

#: ../../whatsnew/3.9.rst:1455
msgid ""
"Removed the following functions from the C API. Call :c:func:`PyGC_Collect` "
"explicitly to clear all free lists. (Contributed by Inada Naoki and Victor "
"Stinner in :issue:`37340`, :issue:`38896` and :issue:`40428`.)"
msgstr ""
"从 C API 移除了下列函数。 请显式地调用 :c:func:`PyGC_Collect` 来清空所有自由列表。 （由 Inada Naoki 和 "
"Victor Stinner 在 :issue:`37340`, :issue:`38896` 和 :issue:`40428` 中贡献。）"

#: ../../whatsnew/3.9.rst:1460
msgid "``PyAsyncGen_ClearFreeLists()``"
msgstr "``PyAsyncGen_ClearFreeLists()``"

#: ../../whatsnew/3.9.rst:1461
msgid "``PyContext_ClearFreeList()``"
msgstr "``PyContext_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1462
msgid "``PyDict_ClearFreeList()``"
msgstr "``PyDict_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1463
msgid "``PyFloat_ClearFreeList()``"
msgstr "``PyFloat_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1464
msgid "``PyFrame_ClearFreeList()``"
msgstr "``PyFrame_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1465
msgid "``PyList_ClearFreeList()``"
msgstr "``PyList_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1466
msgid ""
"``PyMethod_ClearFreeList()`` and ``PyCFunction_ClearFreeList()``: the free "
"lists of bound method objects have been removed."
msgstr ""
"``PyMethod_ClearFreeList()`` 和 ``PyCFunction_ClearFreeList()``: "
"绑定方法对象的自由列表已被移除。"

#: ../../whatsnew/3.9.rst:1468
msgid ""
"``PySet_ClearFreeList()``: the set free list has been removed in Python 3.4."
msgstr "``PySet_ClearFreeList()``: 集合自由列表已在 Python 3.4 中被移除。"

#: ../../whatsnew/3.9.rst:1470
msgid "``PyTuple_ClearFreeList()``"
msgstr "``PyTuple_ClearFreeList()``"

#: ../../whatsnew/3.9.rst:1471
msgid ""
"``PyUnicode_ClearFreeList()``: the Unicode free list has been removed in "
"Python 3.3."
msgstr "``PyUnicode_ClearFreeList()``: Unicode 自由列表已在 Python 3.3 中被移除。"

#: ../../whatsnew/3.9.rst:1474
msgid ""
"Removed ``_PyUnicode_ClearStaticStrings()`` function. (Contributed by Victor"
" Stinner in :issue:`39465`.)"
msgstr ""
"移除了 ``_PyUnicode_ClearStaticStrings()`` 函数。 （由 Victor Stinner 在 "
":issue:`39465` 中贡献。）"

#: ../../whatsnew/3.9.rst:1477
msgid ""
"Removed ``Py_UNICODE_MATCH``. It has been deprecated by :pep:`393`, and "
"broken since Python 3.3. The :c:func:`PyUnicode_Tailmatch` function can be "
"used instead. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"移除了 ``Py_UNICODE_MATCH``。 它已被 :pep:`393` 所弃用，并自 Python 3.3 起不再可用。 可以改用 "
":c:func:`PyUnicode_Tailmatch` 函数。 （由 Inada Naoki 在 :issue:`36346` 中贡献。）"

#: ../../whatsnew/3.9.rst:1482
msgid ""
"Cleaned header files of interfaces defined but with no implementation. The "
"public API symbols being removed are: "
"``_PyBytes_InsertThousandsGroupingLocale``, "
"``_PyBytes_InsertThousandsGrouping``, ``_Py_InitializeFromArgs``, "
"``_Py_InitializeFromWideArgs``, ``_PyFloat_Repr``, ``_PyFloat_Digits``, "
"``_PyFloat_DigitsInit``, ``PyFrame_ExtendStack``, ``_PyAIterWrapper_Type``, "
"``PyNullImporter_Type``, ``PyCmpWrapper_Type``, ``PySortWrapper_Type``, "
"``PyNoArgsFunction``. (Contributed by Pablo Galindo Salgado in "
":issue:`39372`.)"
msgstr ""
"清除了已定义但未实现的接口的头文件。 被移除了公共 API 符号有: "
"``_PyBytes_InsertThousandsGroupingLocale``, "
"``_PyBytes_InsertThousandsGrouping``, ``_Py_InitializeFromArgs``, "
"``_Py_InitializeFromWideArgs``, ``_PyFloat_Repr``, ``_PyFloat_Digits``, "
"``_PyFloat_DigitsInit``, ``PyFrame_ExtendStack``, ``_PyAIterWrapper_Type``, "
"``PyNullImporter_Type``, ``PyCmpWrapper_Type``, ``PySortWrapper_Type``, "
"``PyNoArgsFunction``。 （由 Pablo Galindo Salgado 在 :issue:`39372` 中贡献。）"

#: ../../whatsnew/3.9.rst:1493
msgid "Notable changes in Python 3.9.1"
msgstr "Python 3.9.1 中的重要变化"

#: ../../whatsnew/3.9.rst:1498
msgid ""
"The behavior of :class:`typing.Literal` was changed to conform with "
":pep:`586` and to match the behavior of static type checkers specified in "
"the PEP."
msgstr ":class:`typing.Literal` 的行为被改为遵循 :pep:`586` 并匹配该 PEP 所描述的静态类型检查器的行为。"

#: ../../whatsnew/3.9.rst:1501
msgid "``Literal`` now de-duplicates parameters."
msgstr "``Literal`` 现在将是去重复的形参。"

#: ../../whatsnew/3.9.rst:1502
msgid ""
"Equality comparisons between ``Literal`` objects are now order independent."
msgstr "``Literal`` 对象间的相等性比较现在将是顺序无关的。"

#: ../../whatsnew/3.9.rst:1503
msgid ""
"``Literal`` comparisons now respect types.  For example, ``Literal[0] == "
"Literal[False]`` previously evaluated to ``True``.  It is now ``False``.  To"
" support this change, the internally used type cache now supports "
"differentiating types."
msgstr ""
"``Literal`` 比较现在会考虑类型。 例如 ``Literal[0] == Literal[False]`` 之前的结果值为 ``True``。"
" 现在则为 ``False``。 为支持此改变，内部使用的类型缓存现在也支持区分类型。"

#: ../../whatsnew/3.9.rst:1507
msgid ""
"``Literal`` objects will now raise a :exc:`TypeError` exception during "
"equality comparisons if any of their parameters are not :term:`hashable`. "
"Note that declaring ``Literal`` with mutable parameters will not throw an "
"error::"
msgstr ""
"现在如果有任何一个参数不为 :term:`hashable`，``Literal`` 对象将在相等性比较期间引发 :exc:`TypeError`。 "
"请注意使用可变参数声明 ``Literal`` 将不会抛出异常::"

#: ../../whatsnew/3.9.rst:1519
msgid "(Contributed by Yurii Karabas in :issue:`42345`.)"
msgstr "（由 Yurii Karabas 在 :issue:`42345` 中贡献。）"

#: ../../whatsnew/3.9.rst:1522
msgid "macOS 11.0 (Big Sur) and Apple Silicon Mac support"
msgstr "macOS 11.0 (Big Sur) 与 Apple Silicon Mac 支持"

#: ../../whatsnew/3.9.rst:1524
msgid ""
"As of 3.9.1, Python now fully supports building and running on macOS 11.0 "
"(Big Sur) and on Apple Silicon Macs (based on the ``ARM64`` architecture). A"
" new universal build variant, ``universal2``, is now available to natively "
"support both ``ARM64`` and ``Intel 64`` in one set of executables. Binaries "
"can also now be built on current versions of macOS to be deployed on a range"
" of older macOS versions (tested to 10.9) while making some newer OS "
"functions and options conditionally available based on the operating system "
"version in use at runtime (\"weaklinking\")."
msgstr ""
"对于 3.9.1 版来说，Python 现在完全支持在 macOS 11.0 (Big Sur) 和 Apple Silicon Macs (基于 "
"``ARM64`` 架构) 上构建和运行。 现在提供了一个新的通用构建类型 ``universal2``，用于在一组可执行文件上原生支持 "
"``ARM64`` 和 ``Intel 64``。 二进制文件现在也可以在当前版本的 macOS 上编译以部署到多种较旧的 macOS 版本上 (已测试"
" 10.9)，同时会基于运行时所使用的操作系统版本让某些较新的 OS 功能和选项有条件地可用 (\"弱链接\") 。"

#: ../../whatsnew/3.9.rst:1533
msgid ""
"(Contributed by Ronald Oussoren and Lawrence D'Anna in :issue:`41100`.)"
msgstr "（由 Ronald Oussoren 和 Lawrence D'Anna 在 :issue:`41100` 中贡献。）"

#: ../../whatsnew/3.9.rst:1536
msgid "Notable changes in Python 3.9.2"
msgstr "Python 3.9.2 中的重要变化"

#: ../../whatsnew/3.9.rst:1539
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.9.rst:1541
msgid ""
":class:`collections.abc.Callable` generic now flattens type parameters, "
"similar to what :data:`typing.Callable` currently does.  This means that "
"``collections.abc.Callable[[int, str], str]`` will have ``__args__`` of "
"``(int, str, str)``; previously this was ``([int, str], str)``.  To allow "
"this change, :class:`types.GenericAlias` can now be subclassed, and a "
"subclass will be returned when subscripting the "
":class:`collections.abc.Callable` type. Code which accesses the arguments "
"via :func:`typing.get_args` or ``__args__`` need to account for this change."
"  A :exc:`DeprecationWarning` may be emitted for invalid forms of "
"parameterizing :class:`collections.abc.Callable` which may have passed "
"silently in Python 3.9.1.  This :exc:`DeprecationWarning` will become a "
":exc:`TypeError` in Python 3.10. (Contributed by Ken Jin in :issue:`42195`.)"
msgstr ""
"现在 :class:`collections.abc.Callable` 泛型会将类型形参展平，类似于 :data:`typing.Callable` "
"当前所做的那样。 这意味着 ``collections.abc.Callable[[int, str], str]`` 的 ``__args__`` "
"将为 ``(int, str, str)``；之前则为 ``([int, str], str)``。 "
"为了允许这个改变，:class:`types.GenericAlias` 现在可以被子类化，并且在抽取 "
":class:`collections.abc.Callable` 类型时将返回一个子类。 通过 :func:`typing.get_args` 或 "
"``__args__`` 访问参数的代码需要考虑到这个改变。 对于无效的 :class:`collections.abc.Callable` "
"参数化形式可能会发出 :exc:`DeprecationWarning`，这在 Python 3.9.1 中可能会静默地传递。 这个 "
":exc:`DeprecationWarning` 将在 Python 3.10 中变为 :exc:`TypeError`。 （由 Ken Jin 在 "
":issue:`42195` 中贡献。）"

#: ../../whatsnew/3.9.rst:1555
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.9.rst:1557
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and "
":func:`urllib.parse.parse_qsl`.  Due to security concerns, and to conform "
"with newer W3C recommendations, this has been changed to allow only a single"
" separator key, with ``&`` as the default.  This change also affects "
":func:`cgi.parse` and :func:`cgi.parse_multipart` as they use the affected "
"functions internally. For more details, please see their respective "
"documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin"
" in :issue:`42967`.)"
msgstr ""
"早先的 Python 版本允许使用 ``;`` 和 ``&`` 作为 :func:`urllib.parse.parse_qs` 和 "
":func:`urllib.parse.parse_qsl` 中 query 形参的分隔键。 出于安全考虑，也为了遵循更新的 W3C "
"推荐设置，这已被改为只允许单个分隔键，默认为 ``&``。 这一改变还会影响 :func:`cgi.parse` 和 "
":func:`cgi.parse_multipart` 因为它们在内部使用了受影响的函数。 要了解更多细节，请查看它们各自的文档。 （由 Adam "
"Goldschmidt, Senthil Kumaran 和 Ken Jin 在 :issue:`42967` 中贡献。）"
