# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-31 16:19+0000\n"
"PO-Revision-Date: 2025-07-18 20:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/2.3.rst:3
msgid "What's New in Python 2.3"
msgstr "Python 2.3 有什么新变化"

#: ../../whatsnew/2.3.rst:0
msgid "Author"
msgstr "作者"

#: ../../whatsnew/2.3.rst:5
msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

#: ../../whatsnew/2.3.rst:11
msgid ""
"This article explains the new features in Python 2.3.  Python 2.3 was "
"released on July 29, 2003."
msgstr "本文介绍了 Python 2.3 的新特性。 Python 2.3 发布于 2003 年 7 月 29 日。"

#: ../../whatsnew/2.3.rst:14
msgid ""
"The main themes for Python 2.3 are polishing some of the features added in "
"2.2, adding various small but useful enhancements to the core language, and "
"expanding the standard library.  The new object model introduced in the "
"previous version has benefited from 18 months of bugfixes and from "
"optimization efforts that have improved the performance of new-style "
"classes.  A few new built-in functions have been added such as :func:`sum` "
"and :func:`enumerate`.  The :keyword:`in` operator can now be used for "
"substring searches (e.g. ``\"ab\" in \"abc\"`` returns :const:`True`)."
msgstr ""
"Python 2.3 的主要主题是完善在 2.2 中添加的一些功能、为核心语言添加各种小但实用的增强功能，以及扩展标准库。 "
"上一版本引入的新对象模型已经受益于 18 个月的错误修复和优化努力，这些优化提升了新式类的性能。 新增了几个内置函数，例如 :func:`sum` 和 "
":func:`enumerate`。 :keyword:`in` 操作符现在可以用于子字符串搜索 (例如，``\"ab\" in \"abc\"`` "
"将返回 :const:`True`)。"

#: ../../whatsnew/2.3.rst:23
msgid ""
"Some of the many new library features include Boolean, set, heap, and "
"date/time data types, the ability to import modules from ZIP-format "
"archives, metadata support for the long-awaited Python catalog, an updated "
"version of IDLE, and modules for logging messages, wrapping text, parsing "
"CSV files, processing command-line options, using BerkeleyDB databases...  "
"the list of new and enhanced modules is lengthy."
msgstr ""
"许多新库功能包括布尔值、集合、堆、日期/时间数据类型，从ZIP格式的归档文件中导入模块的能力，期待已久的 Python 目录的元数据支持，更新版本的 "
"IDLE，以及用于日志记录、文本包装、解析 CSV 文件、处理命令行选项、使用 BerkeleyDB 数据库的模块…… 新模块和增强模块的列表相当长。"

#: ../../whatsnew/2.3.rst:30
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you"
" should refer to the documentation for Python 2.3, such as the Python "
"Library Reference and the Python Reference Manual.  If you want to "
"understand the complete implementation and design rationale, refer to the "
"PEP for a particular new feature."
msgstr ""
"本文并不试图提供对新功能的完整规范，而是提供了一个方便的概览。 有关详细信息，你应该参考 Python 2.3 的文档，例如 Python 库参考和 "
"Python 参考手册。 如果你想了解完整的实现和设计原理，请参阅特定新功能的 PEP。"

#: ../../whatsnew/2.3.rst:41
msgid "PEP 218: A Standard Set Datatype"
msgstr "PEP 218: 标准集合数据类型"

#: ../../whatsnew/2.3.rst:43
msgid ""
"The new :mod:`sets` module contains an implementation of a set datatype.  "
"The :class:`Set` class is for mutable sets, sets that can have members added"
" and removed.  The :class:`ImmutableSet` class is for sets that can't be "
"modified, and instances of :class:`ImmutableSet` can therefore be used as "
"dictionary keys. Sets are built on top of dictionaries, so the elements "
"within a set must be hashable."
msgstr ""

#: ../../whatsnew/2.3.rst:50
msgid "Here's a simple example::"
msgstr "这是一个简单的示例："

#: ../../whatsnew/2.3.rst:66
msgid ""
"The union and intersection of sets can be computed with the :meth:`union` "
"and :meth:`intersection` methods; an alternative notation uses the bitwise "
"operators ``&`` and ``|``. Mutable sets also have in-place versions of these"
" methods, :meth:`union_update` and :meth:`intersection_update`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:86
msgid ""
"It's also possible to take the symmetric difference of two sets.  This is "
"the set of all elements in the union that aren't in the intersection.  "
"Another way of putting it is that the symmetric difference contains all "
"elements that are in exactly one set.  Again, there's an alternative "
"notation (``^``), and an in-place version with the ungainly name "
":meth:`symmetric_difference_update`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:100
msgid ""
"There are also :meth:`issubset` and :meth:`issuperset` methods for checking "
"whether one set is a subset or superset of another::"
msgstr "另外还有 :meth:`issubset` 和 :meth:`issuperset` 方法用来检查一个集合是否为另一个集合的子集或超集::"

#: ../../whatsnew/2.3.rst:117
msgid ":pep:`218` - Adding a Built-In Set Object Type"
msgstr ":pep:`218` - 添加内置Set对象类型"

#: ../../whatsnew/2.3.rst:117
msgid ""
"PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex Martelli,"
" and GvR."
msgstr "PEP 由 Greg V. Wilson 撰写 ; 由 Greg V. Wilson, Alex Martelli 和 GvR 实现。"

#: ../../whatsnew/2.3.rst:126
msgid "PEP 255: Simple Generators"
msgstr "PEP 255: 简单的生成器"

#: ../../whatsnew/2.3.rst:128
msgid ""
"In Python 2.2, generators were added as an optional feature, to be enabled "
"by a ``from __future__ import generators`` directive.  In 2.3 generators no "
"longer need to be specially enabled, and are now always present; this means "
"that :keyword:`yield` is now always a keyword.  The rest of this section is "
"a copy of the description of generators from the \"What's New in Python "
"2.2\" document; if you read it back when Python 2.2 came out, you can skip "
"the rest of this section."
msgstr ""
"在 Python 2.2 中，生成器作为一个可选特性被添加，需要通过 ``from __future__ import generators`` "
"指令来启用。 在 2.3 版本中，生成器不再需要特别启用，现在总是存在；这意味着 :keyword:`yield` 现在始终是一个关键字。 "
"本节的其余部分是从《Python 2.2的新特性》文档中复制的生成器描述；如果你在 Python 2.2 发布时已经阅读过，可以跳过本节的其余部分。"

#: ../../whatsnew/2.3.rst:136
msgid ""
"You're doubtless familiar with how function calls work in Python or C. When "
"you call a function, it gets a private namespace where its local variables "
"are created.  When the function reaches a :keyword:`return` statement, the "
"local variables are destroyed and the resulting value is returned to the "
"caller.  A later call to the same function will get a fresh new set of local"
" variables. But, what if the local variables weren't thrown away on exiting "
"a function? What if you could later resume the function where it left off?  "
"This is what generators provide; they can be thought of as resumable "
"functions."
msgstr ""
"你一定熟悉在 Python 或 C 语言中函数调用的工作方式。 当你调用一个函数时，它会获得一个私有命名空间，在这个命名空间中创建其局部变量。 "
"当函数执行到 :keyword:`return` 语句时，这些局部变量会被销毁，并将结果值返回给调用者。 "
"稍后对同一个函数的调用将获得一套全新的局部变量。 "
"但是，如果局部变量在函数退出时不被丢弃呢？如果你可以在函数停止的地方稍后恢复执行呢？这就是生成器所提供的功能；它们可以被视为可恢复的函数。"

#: ../../whatsnew/2.3.rst:145
msgid "Here's the simplest example of a generator function::"
msgstr "这里是一个生成器函数的最简示例::"

#: ../../whatsnew/2.3.rst:151
msgid ""
"A new keyword, :keyword:`yield`, was introduced for generators.  Any "
"function containing a :keyword:`!yield` statement is a generator function; "
"this is detected by Python's bytecode compiler which compiles the function "
"specially as a result."
msgstr ""
"一个新的关键字 :keyword:`yield` 被引入用于生成器。 任何包含 :keyword:`!yield` 语句的函数都是生成器函数；这由 "
"Python 的字节码编译器检测到，并因此对函数进行特殊编译。"

#: ../../whatsnew/2.3.rst:156
msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator protocol.  "
"On executing the :keyword:`yield` statement, the generator outputs the value"
" of ``i``, similar to a :keyword:`return` statement.  The big difference "
"between :keyword:`!yield` and a :keyword:`!return` statement is that on "
"reaching a :keyword:`!yield` the generator's state of execution is suspended"
" and local variables are preserved.  On the next call to the generator's "
"``.next()`` method, the function will resume executing immediately after the"
" :keyword:`!yield` statement.  (For complicated reasons, the "
":keyword:`!yield` statement isn't allowed inside the :keyword:`try` block of"
" a :keyword:`!try`...\\ :keyword:`!finally` statement; read :pep:`255` for a"
" full explanation of the interaction between :keyword:`!yield` and "
"exceptions.)"
msgstr ""
"当您调用生成器函数时，它不会返回一个单独的值；相反，它会返回一个支持迭代器协议的生成器对象。在执行 :keyword:`yield` "
"语句时，生成器会输出 ``i`` 的值 ，类似于 :keyword:`return` 语句。 :keyword:`!yield` 与 "
":keyword:`!return` 语句之间的最大区别在于，在到达 :keyword:`!yield` 时，生成器的执行状态会暂停，并保留本地变量。 "
"在下一次调用生成器 的 ``.next()`` 方法时，函数将在 :keyword:`!yield` 语句之后立即恢复执行。 "
"（由于复杂的原因，:keyword:`!yield` 语句不允许在 :keyword:`try`...\\ :keyword:`!finally` "
"语句的 :keyword:`!try` 代码块内出现；有关 :keyword:`!yield` 和异常之间交互的完整解释，请阅读 "
":pep:`255`。）"

#: ../../whatsnew/2.3.rst:169
msgid "Here's a sample usage of the :func:`generate_ints` generator::"
msgstr "这里是 :func:`generate_ints` 生成器的用法示例::"

#: ../../whatsnew/2.3.rst:186
msgid ""
"You could equally write ``for i in generate_ints(5)``, or ``a,b,c = "
"generate_ints(3)``."
msgstr ""
"你可以等价地写成 ``for i in generate_ints(5)`` 或 ``a,b,c = generate_ints(3)``。"

#: ../../whatsnew/2.3.rst:189
msgid ""
"Inside a generator function, the :keyword:`return` statement can only be "
"used without a value, and signals the end of the procession of values; "
"afterwards the generator cannot return any further values. "
":keyword:`!return` with a value, such as ``return 5``, is a syntax error "
"inside a generator function.  The end of the generator's results can also be"
" indicated by raising :exc:`StopIteration` manually, or by just letting the "
"flow of execution fall off the bottom of the function."
msgstr ""
"在生成器函数内部， :keyword:`return` "
"语句只能不带值使用，并表示值的生成过程结束；之后，生成器不能再返回任何值。在生成器函数内部，带值的 :keyword:`!return`，例如 "
"``return 5``，是语法错误。生成器结果的结束也可以通过手动引发 :exc:`StopIteration` "
"异常来指示，或者只是让执行流自然地从函数底部流出。"

#: ../../whatsnew/2.3.rst:197
msgid ""
"You could achieve the effect of generators manually by writing your own "
"class and storing all the local variables of the generator as instance "
"variables.  For example, returning a list of integers could be done by "
"setting ``self.count`` to 0, and having the :meth:`next` method increment "
"``self.count`` and return it. However, for a moderately complicated "
"generator, writing a corresponding class would be much messier. "
":file:`Lib/test/test_generators.py` contains a number of more interesting "
"examples.  The simplest one implements an in-order traversal of a tree using"
" generators recursively. ::"
msgstr ""
"你可以通过编写自己的类并将生成器的所有局部变量存储为实例变量，手动实现生成器的效果。例如，返回一个整数列表可以通过将 ``self.count`` "
"设置为0，并让 :meth:`next` 方法递增 ``self.count`` "
"并返回它。然而，对于一个中等复杂的生成器，编写一个相应的类将会更加混乱。:file:`Lib/test/test_generators.py` "
"包含了一些更有趣的例子。其中最简单的一个使用生成器递归实现了树的中序遍历："

#: ../../whatsnew/2.3.rst:215
msgid ""
"Two other examples in :file:`Lib/test/test_generators.py` produce solutions "
"for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so that"
" no queen threatens another) and the Knight's Tour (a route that takes a "
"knight to every square of an $NxN$ chessboard without visiting any square "
"twice)."
msgstr ""
"在 :file:`Lib/test/test_generators.py` "
"中还有另外两个例子，它们分别解决了N皇后问题（在$NxN$的棋盘上放置$N$个皇后，使得没有任何皇后威胁到其他皇后）和骑士巡游问题（在$NxN$的棋盘上，骑士访问每一个方格且不重复访问任何方格的路径）。"

#: ../../whatsnew/2.3.rst:220
msgid ""
"The idea of generators comes from other programming languages, especially "
"Icon (https://www.cs.arizona.edu/icon/), where the idea of generators is "
"central.  In Icon, every expression and function call behaves like a "
"generator.  One example from \"An Overview of the Icon Programming "
"Language\" at https://www.cs.arizona.edu/icon/docs/ipd266.htm gives an idea "
"of what this looks like::"
msgstr ""

#: ../../whatsnew/2.3.rst:230
msgid ""
"In Icon the :func:`find` function returns the indexes at which the substring"
" \"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, ``i`` is first"
" assigned a value of 3, but 3 is less than 5, so the comparison fails, and "
"Icon retries it with the second value of 23.  23 is greater than 5, so the "
"comparison now succeeds, and the code prints the value 23 to the screen."
msgstr ""

#: ../../whatsnew/2.3.rst:236
msgid ""
"Python doesn't go nearly as far as Icon in adopting generators as a central "
"concept.  Generators are considered part of the core Python language, but "
"learning or using them isn't compulsory; if they don't solve any problems "
"that you have, feel free to ignore them. One novel feature of Python's "
"interface as compared to Icon's is that a generator's state is represented "
"as a concrete object (the iterator) that can be passed around to other "
"functions or stored in a data structure."
msgstr ""
"Python并不像Icon那样将生成器作为核心概念来采用。生成器被视为Python核心语言的一部分，但学习或使用它们并不是强制的；如果它们不能解决你遇到的问题，可以完全忽略它们。与Icon相比，Python接口的一个新颖特性是生成器的状态表示为一个具体的对象（迭代器），可以传递给其他函数或存储在数据结构中。"

#: ../../whatsnew/2.3.rst:248
msgid ":pep:`255` - Simple Generators"
msgstr ":pep:`255` - 简单生成器"

#: ../../whatsnew/2.3.rst:248
msgid ""
"Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented "
"mostly by Neil Schemenauer and Tim Peters, with other fixes from the Python "
"Labs crew."
msgstr ""
"由 Neil Schemenauer, Tim Peters, Magnus Lie Hetland 撰写。 主要由 Neil Schemenauer "
"和 Tim Peters 实现，并包含来自 Python Labs 团队的修正。"

#: ../../whatsnew/2.3.rst:257
msgid "PEP 263: Source Code Encodings"
msgstr "PEP 263: 源代码的字符编码格式"

#: ../../whatsnew/2.3.rst:259
msgid ""
"Python source files can now be declared as being in different character set "
"encodings.  Encodings are declared by including a specially formatted "
"comment in the first or second line of the source file.  For example, a "
"UTF-8 file can be declared with::"
msgstr ""
"现在可以声明Python源文件使用不同的字符集编码。通过在源文件的第一行或第二行包含特定格式的注释来声明编码。例如，一个UTF-8文件可以这样声明："

#: ../../whatsnew/2.3.rst:267
msgid ""
"Without such an encoding declaration, the default encoding used is 7-bit "
"ASCII. Executing or importing modules that contain string literals with "
"8-bit characters and have no encoding declaration will result in a "
":exc:`DeprecationWarning` being signalled by Python 2.3; in 2.4 this will be"
" a syntax error."
msgstr ""
"如果没有这样的编码声明，默认使用7位ASCII编码。执行或导入包含8位字符的字符串字面量且没有编码声明的模块时，在Python 2.3中会触发 "
":exc:`DeprecationWarning` 警告；而在Python 2.4中，这将成为语法错误"

#: ../../whatsnew/2.3.rst:273
msgid ""
"The encoding declaration only affects Unicode string literals, which will be"
" converted to Unicode using the specified encoding.  Note that Python "
"identifiers are still restricted to ASCII characters, so you can't have "
"variable names that use characters outside of the usual alphanumerics."
msgstr ""
"编码声明只影响Unicode字符串字面量，这些字面量将使用指定的编码转换为Unicode。请注意，Python的标识符仍然限制为ASCII字符，因此变量名不能使用超出常规字母数字字符范围的字符。"

#: ../../whatsnew/2.3.rst:282
msgid ":pep:`263` - Defining Python Source Code Encodings"
msgstr ":pep:`263` - 定义 Python 源代码的编码格式"

#: ../../whatsnew/2.3.rst:282
msgid ""
"Written by Marc-André Lemburg and Martin von Löwis; implemented by Suzuki "
"Hisao and Martin von Löwis."
msgstr ""
"由 Marc-André Lemburg 和 Martin von Löwis 撰写 ; 由 Suzuki Hisao 和 Martin von "
"Löwis 实现。"

#: ../../whatsnew/2.3.rst:289
msgid "PEP 273: Importing Modules from ZIP Archives"
msgstr "PEP 273: 从ZIP压缩包导入模块"

#: ../../whatsnew/2.3.rst:291
msgid ""
"The new :mod:`zipimport` module adds support for importing modules from a "
"ZIP-format archive.  You don't need to import the module explicitly; it will"
" be automatically imported if a ZIP archive's filename is added to "
"``sys.path``. For example:"
msgstr ""
"通过新的 :mod:`zipimport` 模块增加了从 ZIP 格式归档文件导入模块的支持。 你不需要显式地导入模块；它将在 ZIP "
"归档文件名被添加到 ``sys.path`` 的情况下自动导入。 例如："

#: ../../whatsnew/2.3.rst:314
msgid ""
"An entry in ``sys.path`` can now be the filename of a ZIP archive. The ZIP "
"archive can contain any kind of files, but only files named :file:`\\*.py`, "
":file:`\\*.pyc`, or :file:`\\*.pyo` can be imported.  If an archive only "
"contains :file:`\\*.py` files, Python will not attempt to modify the archive"
" by adding the corresponding :file:`\\*.pyc` file, meaning that if a ZIP "
"archive doesn't contain :file:`\\*.pyc` files, importing may be rather slow."
msgstr ""
"Запис у ``sys.path`` тепер може бути назвою файлу ZIP-архіву. ZIP-архів може"
" містити будь-які файли, але можна імпортувати лише файли з назвами "
":file:`\\*.py`, :file:`\\*.pyc` або :file:`\\*.pyo`. Якщо архів містить лише"
" файли :file:`\\*.py`, Python не намагатиметься змінити архів, додавши "
"відповідний файл :file:`\\*.pyc`, тобто якщо архів ZIP не містить "
":file:`\\*.pyc`, імпортування може бути досить повільним."

#: ../../whatsnew/2.3.rst:321
msgid ""
"A path within the archive can also be specified to only import from a "
"subdirectory; for example, the path :file:`/tmp/example.zip/lib/` would only"
" import from the :file:`lib/` subdirectory within the archive."
msgstr ""
"Шлях всередині архіву також можна вказати лише для імпорту з підкаталогу; "
"наприклад, шлях :file:`/tmp/example.zip/lib/` імпортуватиметься лише з "
"підкаталогу :file:`lib/` в архіві."

#: ../../whatsnew/2.3.rst:331
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - 从 ZIP 压缩包导入模块"

#: ../../whatsnew/2.3.rst:329
msgid ""
"Written by James C. Ahlstrom,  who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`,  but uses an implementation "
"written by Just van Rossum  that uses the import hooks described in "
":pep:`302`. See section :ref:`section-pep302` for a description of the new "
"import hooks."
msgstr ""
"由James C. Ahlstrom撰写，并提供了一个实现。Python 2.3遵循 :pep:`273` 中的规范，但使用了Just van "
"Rossum编写的实现，该实现利用了 :pep:`302` 中描述的导入钩子。有关新导入钩子的描述，请参见 :ref:`section-pep302` "
"的相关部分。"

#: ../../whatsnew/2.3.rst:338
msgid "PEP 277: Unicode file name support for Windows NT"
msgstr "PEP 277: 针对 Windows NT 的 Unicode 文件名支持"

#: ../../whatsnew/2.3.rst:340
msgid ""
"On Windows NT, 2000, and XP, the system stores file names as Unicode "
"strings. Traditionally, Python has represented file names as byte strings, "
"which is inadequate because it renders some file names inaccessible."
msgstr ""
"在Windows "
"NT、2000和XP上，系统将文件名存储为Unicode字符串。传统上，Python将文件名表示为字节字符串，这种方式不够完善，因为它会导致某些文件名无法访问。"

#: ../../whatsnew/2.3.rst:344
msgid ""
"Python now allows using arbitrary Unicode strings (within the limitations of"
" the file system) for all functions that expect file names, most notably the"
" :func:`open` built-in function. If a Unicode string is passed to "
":func:`os.listdir`, Python now returns a list of Unicode strings.  A new "
"function, :func:`os.getcwdu`, returns the current directory as a Unicode "
"string."
msgstr ""

#: ../../whatsnew/2.3.rst:350
msgid ""
"Byte strings still work as file names, and on Windows Python will "
"transparently convert them to Unicode using the ``mbcs`` encoding."
msgstr "字节串仍可被用作文件名，并且在 Windows 上 Python 将透明地使用 ``mbcs`` 编码格式将其转换为 Unicode。"

#: ../../whatsnew/2.3.rst:353
msgid ""
"Other systems also allow Unicode strings as file names but convert them to "
"byte strings before passing them to the system, which can cause a "
":exc:`UnicodeError` to be raised. Applications can test whether arbitrary "
"Unicode strings are supported as file names by checking "
":attr:`os.path.supports_unicode_filenames`, a Boolean value."
msgstr ""
"Інші системи також дозволяють рядки Unicode як імена файлів, але "
"перетворюють їх на рядки байтів перед передачею в систему, що може "
"спричинити виникнення :exc:`UnicodeError`. Програми можуть перевірити, чи "
"підтримуються довільні рядки Unicode як імена файлів, перевіривши "
":attr:`os.path.supports_unicode_filenames`, логічне значення."

#: ../../whatsnew/2.3.rst:359
msgid "Under MacOS, :func:`os.listdir` may now return Unicode filenames."
msgstr "在 MacOS 下，:func:`os.listdir` 现在可以返回 Unicode 文件名。"

#: ../../whatsnew/2.3.rst:365
msgid ":pep:`277` - Unicode file name support for Windows NT"
msgstr ":pep:`277` - 针对 Windows NT 的 Unicode 文件名支持"

#: ../../whatsnew/2.3.rst:365
msgid ""
"Written by Neil Hodgson; implemented by Neil Hodgson, Martin von Löwis, and "
"Mark Hammond."
msgstr ""
"由 Neil Hodgson 撰写 ; 由 Neil Hodgson, Martin von Löwis 和 Mark Hammond 实现。"

#: ../../whatsnew/2.3.rst:375
msgid "PEP 278: Universal Newline Support"
msgstr "PEP 278: 通用换行支持"

#: ../../whatsnew/2.3.rst:377
msgid ""
"The three major operating systems used today are Microsoft Windows, Apple's "
"Macintosh OS, and the various Unix derivatives.  A minor irritation of "
"cross-platform work  is that these three platforms all use different "
"characters to mark the ends of lines in text files.  Unix uses the linefeed "
"(ASCII character 10), MacOS uses the carriage return (ASCII character 13), "
"and Windows uses a two-character sequence of a carriage return plus a "
"newline."
msgstr ""
"目前使用的三大操作系统是微软的 Windows、苹果的 Macintosh OS 和各种 Unix "
"衍生系统。跨平台工作的一个小麻烦是，这三个平台都使用不同的字符来标记文本文件中的行结束。Unix 使用换行符（ASCII 字符 10），MacOS "
"使用回车符（ASCII 字符 13），Windows 使用回车符加换行符的双字符序列。"

#: ../../whatsnew/2.3.rst:384
msgid ""
"Python's file objects can now support end of line conventions other than the"
" one followed by the platform on which Python is running. Opening a file "
"with the mode ``'U'`` or ``'rU'`` will open a file for reading in "
":term:`universal newlines` mode.  All three line ending conventions will be "
"translated to a ``'\\n'`` in the strings returned by the various file "
"methods such as :meth:`read` and :meth:`readline`."
msgstr ""

#: ../../whatsnew/2.3.rst:391
msgid ""
"Universal newline support is also used when importing modules and when "
"executing a file with the :func:`execfile` function.  This means that Python"
" modules can be shared between all three operating systems without needing "
"to convert the line-endings."
msgstr ""

#: ../../whatsnew/2.3.rst:396
msgid ""
"This feature can be disabled when compiling Python by specifying the "
":option:`!--without-universal-newlines` switch when running Python's "
":program:`configure` script."
msgstr ""
"在编译 Python 时，可以通过在运行 Python 的 :program:`configure` 脚本时指定 :option:`!--"
"without-universal-newlines` 开关禁用该功能。"

#: ../../whatsnew/2.3.rst:403
msgid ":pep:`278` - Universal Newline Support"
msgstr ":pep:`278` - 通用换行支持"

#: ../../whatsnew/2.3.rst:404
msgid "Written and implemented by Jack Jansen."
msgstr "由 Jack Jansen 撰写并实现。"

#: ../../whatsnew/2.3.rst:412
msgid "PEP 279: enumerate()"
msgstr "PEP 279: enumerate()"

#: ../../whatsnew/2.3.rst:414
msgid ""
"A new built-in function, :func:`enumerate`, will make certain loops a bit "
"clearer.  ``enumerate(thing)``, where *thing* is either an iterator or a "
"sequence, returns an iterator that will return ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])``, and so forth."
msgstr ""
"新的内置函数 :func:`enumerate` 将使某些循环更加清晰。 在 ``enumerate(thing)`` 中，如果 *thing* "
"是迭代器或序列，则返回一个迭代器，该迭代器将返回 ``(0, thing[0])``，``(1, thing[1])``，``(2, "
"thing[2])``，以此类推。"

#: ../../whatsnew/2.3.rst:419
msgid "A common idiom to change every element of a list looks like this::"
msgstr "改变一个列表中每个元素的常见写法看起来像是这样::"

#: ../../whatsnew/2.3.rst:426
msgid "This can be rewritten using :func:`enumerate` as::"
msgstr "可以使用 :func:`enumerate` 重写为："

#: ../../whatsnew/2.3.rst:435
msgid ":pep:`279` - The enumerate() built-in function"
msgstr ":pep:`279` - 内置函数 enumerate()"

#: ../../whatsnew/2.3.rst:436
msgid "Written and implemented by Raymond D. Hettinger."
msgstr "由 Raymond D. Hettinger 撰写并实现。"

#: ../../whatsnew/2.3.rst:442
msgid "PEP 282: The logging Package"
msgstr "PEP 282: logging 包"

#: ../../whatsnew/2.3.rst:444
msgid ""
"A standard package for writing logs, :mod:`logging`, has been added to "
"Python 2.3.  It provides a powerful and flexible mechanism for generating "
"logging output which can then be filtered and processed in various ways.  A "
"configuration file written in a standard format can be used to control the "
"logging behavior of a program.  Python includes handlers that will write log"
" records to standard error or to a file or socket, send them to the system "
"log, or even e-mail them to a particular address; of course, it's also "
"possible to write your own handler classes."
msgstr ""
"Python 2.3 中新增了一个用于编写日志的标准软件包 :mod:`logging`。 "
"它为生成日志输出提供了一个强大而灵活的机制，这些输出可以通过各种方式进行过滤和处理。用标准格式编写的配置文件可以用来控制程序的日志行为。 Python "
"包含的处理器可以将日志记录写入标准错误、文件或套接字，发送到系统日志，甚至通过电子邮件发送到特定地址；当然，您也可以编写自己的处理器类。"

#: ../../whatsnew/2.3.rst:453
msgid ""
"The :class:`Logger` class is the primary class. Most application code will "
"deal with one or more :class:`Logger` objects, each one used by a particular"
" subsystem of the application. Each :class:`Logger` is identified by a name,"
" and names are organized into a hierarchy using ``.``  as the component "
"separator. For example, you might have :class:`Logger` instances named "
"``server``, ``server.auth`` and ``server.network``.  The latter two "
"instances are below ``server`` in the hierarchy.  This means that if you "
"turn up the verbosity for ``server`` or direct ``server`` messages to a "
"different handler, the changes will also apply to records logged to "
"``server.auth`` and ``server.network``. There's also a root :class:`Logger` "
"that's the parent of all other loggers."
msgstr ""

#: ../../whatsnew/2.3.rst:464
msgid ""
"For simple uses, the :mod:`logging` package contains some convenience "
"functions that always use the root log::"
msgstr "为了简化使用，:mod:`logging` 包提供了一些始终使用根日志的便捷函数::"

#: ../../whatsnew/2.3.rst:475 ../../whatsnew/2.3.rst:500
msgid "This produces the following output::"
msgstr "这会产生以下输出::"

#: ../../whatsnew/2.3.rst:481
msgid ""
"In the default configuration, informational and debugging messages are "
"suppressed and the output is sent to standard error.  You can enable the "
"display of informational and debugging messages by calling the "
":meth:`setLevel` method on the root logger."
msgstr ""

#: ../../whatsnew/2.3.rst:486
msgid ""
"Notice the :func:`warning` call's use of string formatting operators; all of"
" the functions for logging messages take the arguments ``(msg, arg1, arg2, "
"...)`` and log the string resulting from ``msg % (arg1, arg2, ...)``."
msgstr ""

#: ../../whatsnew/2.3.rst:490
msgid ""
"There's also an :func:`exception` function that records the most recent "
"traceback.  Any of the other functions will also record the traceback if you"
" specify a true value for the keyword argument *exc_info*. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:508
msgid ""
"Slightly more advanced programs will use a logger other than the root "
"logger. The ``getLogger(name)`` function is used to get a particular log, "
"creating it if it doesn't exist yet. ``getLogger(None)`` returns the root "
"logger. ::"
msgstr ""
"Трохи просунутіші програми використовуватимуть інший реєстратор, ніж "
"кореневий реєстратор. Функція ``getLogger(name)`` використовується для "
"отримання певного журналу, створення його, якщо він ще не існує. "
"``getLogger(None)`` повертає кореневий реєстратор. ::"

#: ../../whatsnew/2.3.rst:519
msgid ""
"Log records are usually propagated up the hierarchy, so a message logged to "
"``server.auth`` is also seen by ``server`` and ``root``, but a "
":class:`Logger` can prevent this by setting its :attr:`propagate` attribute "
"to :const:`False`."
msgstr ""

#: ../../whatsnew/2.3.rst:523
msgid ""
"There are more classes provided by the :mod:`logging` package that can be "
"customized.  When a :class:`Logger` instance is told to log a message, it "
"creates a :class:`LogRecord` instance that is sent to any number of "
"different :class:`Handler` instances.  Loggers and handlers can also have an"
" attached list of filters, and each filter can cause the :class:`LogRecord` "
"to be ignored or can modify the record before passing it along.  When "
"they're finally output, :class:`LogRecord` instances are converted to text "
"by a :class:`Formatter` class.  All of these classes can be replaced by your"
" own specially written classes."
msgstr ""

#: ../../whatsnew/2.3.rst:533
msgid ""
"With all of these features the :mod:`logging` package should provide enough "
"flexibility for even the most complicated applications.  This is only an "
"incomplete overview of its features, so please see the package's reference "
"documentation for all of the details.  Reading :pep:`282` will also be "
"helpful."
msgstr ""
":mod:`logging` 软件包具有所有这些功能，即使是最复杂的应用程序也能灵活运用。 "
"本文仅是对其功能的不完整概述，因此请参阅软件包的参考文档了解所有细节。 阅读 :pep:`282` 也会有所帮助。"

#: ../../whatsnew/2.3.rst:541
msgid ":pep:`282` - A Logging System"
msgstr ":pep:`282` - Logging 系统"

#: ../../whatsnew/2.3.rst:542
msgid "Written by Vinay Sajip and Trent Mick; implemented by Vinay Sajip."
msgstr "由 Vinay Sajip 和 Trent Mick 撰写 ; 由 Vinay Sajip 实现。"

#: ../../whatsnew/2.3.rst:550
msgid "PEP 285: A Boolean Type"
msgstr "PEP 285: 布尔类型"

#: ../../whatsnew/2.3.rst:552
msgid ""
"A Boolean type was added to Python 2.3.  Two new constants were added to the"
" :mod:`__builtin__` module, :const:`True` and :const:`False`.  "
"(:const:`True` and :const:`False` constants were added to the built-ins in "
"Python 2.2.1, but the 2.2.1 versions are simply set to integer values of 1 "
"and 0 and aren't a different type.)"
msgstr ""

#: ../../whatsnew/2.3.rst:558
msgid ""
"The type object for this new type is named :class:`bool`; the constructor "
"for it takes any Python value and converts it to :const:`True` or "
":const:`False`. ::"
msgstr ""
"这个新类型的类型对象名为 :class:`bool`；它的构造函数接收任何 Python 值，并将其转换为 :const:`True` 或 "
":const:`False`。::"

#: ../../whatsnew/2.3.rst:570
msgid ""
"Most of the standard library modules and built-in functions have been "
"changed to return Booleans. ::"
msgstr "大多数标准库模块和内置函数都改为返回布尔值："

#: ../../whatsnew/2.3.rst:581
msgid ""
"Python's Booleans were added with the primary goal of making code clearer.  "
"For example, if you're reading a function and encounter the statement "
"``return 1``, you might wonder whether the ``1`` represents a Boolean truth "
"value, an index, or a coefficient that multiplies some other quantity.  If "
"the statement is ``return True``, however, the meaning of the return value "
"is quite clear."
msgstr ""
"添加 Python 布尔运算的主要目的是使代码更清晰。 例如，如果您在阅读一个函数时遇到 ``return 1`` 语句，您可能会想知道 ``1`` "
"代表的是布尔真值、索引还是乘以其他量的系数。 然而，如果语句是 ``return True``，返回值的含义就非常清楚了。"

#: ../../whatsnew/2.3.rst:587
msgid ""
"Python's Booleans were *not* added for the sake of strict type-checking.  A "
"very strict language such as Pascal would also prevent you performing "
"arithmetic with Booleans, and would require that the expression in an "
":keyword:`if` statement always evaluate to a Boolean result.  Python is not "
"this strict and never will be, as :pep:`285` explicitly says.  This means "
"you can still use any expression in an :keyword:`!if` statement, even ones "
"that evaluate to a list or tuple or some random object.  The Boolean type is"
" a subclass of the :class:`int` class so that arithmetic using a Boolean "
"still works. ::"
msgstr ""
"Python 的布尔值 *不是* 为了严格的类型检查而添加的。 像 Pascal 这样非常严格的语言也会阻止您使用布尔进行算术运算，并要求 "
":keyword:`if` 语句中的表达式总是求布尔结果。 正如 :pep:`285` 所明确指出的，Python 没有这么严格，以后也不会有。 "
"这意味着您仍然可以在 :keyword:`!if` 语句中使用任何表达式，甚至是求值为 list、tuple 或一些随机对象的表达式。 布尔类型是 "
":class:`int` 类的子类，因此使用布尔值进行算术运算仍然有效："

#: ../../whatsnew/2.3.rst:605
msgid ""
"To sum up :const:`True` and :const:`False` in a sentence: they're "
"alternative ways to spell the integer values 1 and 0, with the single "
"difference that :func:`str` and :func:`repr` return the strings ``'True'`` "
"and ``'False'`` instead of ``'1'`` and ``'0'``."
msgstr ""
"用一句话概括 :const:`True` 和 :const:`False`: 它们是拼写整数值 1 和 0 的另一种方式，唯一不同的是 "
":func:`str` 和 :func:`repr` 返回的字符串是 ``'True'`` 和 ``'False'``，而不是 ``'1'`` 和 "
"``'0'``。"

#: ../../whatsnew/2.3.rst:613
msgid ":pep:`285` - Adding a bool type"
msgstr ":pep:`285` - 添加布尔类型"

#: ../../whatsnew/2.3.rst:614
msgid "Written and implemented by GvR."
msgstr "由 GvR 撰写并实现。"

#: ../../whatsnew/2.3.rst:620
msgid "PEP 293: Codec Error Handling Callbacks"
msgstr "PEP 293: 编解码器错误处理回调"

#: ../../whatsnew/2.3.rst:622
msgid ""
"When encoding a Unicode string into a byte string, unencodable characters "
"may be encountered.  So far, Python has allowed specifying the error "
"processing as either \"strict\" (raising :exc:`UnicodeError`), \"ignore\" "
"(skipping the character), or \"replace\" (using a question mark in the "
"output string), with \"strict\" being the default behavior. It may be "
"desirable to specify alternative processing of such errors, such as "
"inserting an XML character reference or HTML entity reference into the "
"converted string."
msgstr ""
"将 Unicode 字符串编码为字节字符串时，可能会遇到无法编码的字符。 到目前为止，Python 允许将错误处理指定为 \"strict\" (引发 "
":exc:`UnicodeError`)、\"ignore\" (跳过该字符) 或 \"replace\" (在输出字符串中使用问号)，其中 "
"\"strict\" 是默认行为。 可能需要指定对此类错误的其他处理方式，例如在转换后的字符串中插入 XML 字符引用或 HTML 实体引用。"

#: ../../whatsnew/2.3.rst:630
msgid ""
"Python now has a flexible framework to add different processing strategies."
"  New error handlers can be added with :func:`codecs.register_error`, and "
"codecs then can access the error handler with :func:`codecs.lookup_error`. "
"An equivalent C API has been added for codecs written in C. The error "
"handler gets the necessary state information such as the string being "
"converted, the position in the string where the error was detected, and the "
"target encoding.  The handler can then either raise an exception or return a"
" replacement string."
msgstr ""
"Python 现在有一个灵活的框架，可以添加不同的处理策略。可以通过 :func:`codecs.register_error` "
"添加新的错误处理器，然后编解码器可以通过 :func:`codecs.lookup_error` 访问错误处理器。 "
"错误处理器会获取必要的状态信息，如正在转换的字符串、字符串中检测到错误的位置以及目标编码。 然后，处理器可以引发异常或返回替换字符串。"

#: ../../whatsnew/2.3.rst:638
msgid ""
"Two additional error handlers have been implemented using this framework: "
"\"backslashreplace\" uses Python backslash quoting to represent unencodable "
"characters and \"xmlcharrefreplace\" emits XML character references."
msgstr ""
"使用该框架还实现了两个额外的错误处理器: \"backslashreplace\" 使用 Python 反斜杠引号来表示无法编码的字符，而 "
"\"xmlcharrefreplace\" 则转换为 XML 字符引用。"

#: ../../whatsnew/2.3.rst:645
msgid ":pep:`293` - Codec Error Handling Callbacks"
msgstr ":pep:`293` - 编解码器错误处理回调"

#: ../../whatsnew/2.3.rst:646
msgid "Written and implemented by Walter Dörwald."
msgstr "由 Walter Dörwald 撰写并实现。"

#: ../../whatsnew/2.3.rst:654
msgid "PEP 301: Package Index and Metadata for Distutils"
msgstr "PEP 301: Distutils的软件包索引和元数据"

#: ../../whatsnew/2.3.rst:656
msgid ""
"Support for the long-requested Python catalog makes its first appearance in "
"2.3."
msgstr "广受期待的对 Python 编目的支持在 2.3 版中首次出现。"

#: ../../whatsnew/2.3.rst:658
msgid ""
"The heart of the catalog is the new Distutils :command:`register` command. "
"Running ``python setup.py register`` will collect the metadata describing a "
"package, such as its name, version, maintainer, description, &c., and send "
"it to a central catalog server.  The resulting catalog is available from "
"https://pypi.org."
msgstr ""
"编目功能的核心是新的 Distutils :command:`register` 命令。 运行 ``python setup.py register``"
" 将会收集描述软件包的元数据，例如其名称、版本、维护者、描述信息等等，并将其发送给中央编目服务器。 结果编目数据可在 https://pypi.org "
"获取。"

#: ../../whatsnew/2.3.rst:664
msgid ""
"To make the catalog a bit more useful, a new optional *classifiers* keyword "
"argument has been added to the Distutils :func:`setup` function.  A list of "
"`Trove <http://catb.org/~esr/trove/>`_-style strings can be supplied to help"
" classify the software."
msgstr ""

#: ../../whatsnew/2.3.rst:669
msgid ""
"Here's an example :file:`setup.py` with classifiers, written to be "
"compatible with older versions of the Distutils::"
msgstr "下面是一个带有分类器的 :file:`setup.py` 示例，其编写是为了兼容旧版本的 Distutils："

#: ../../whatsnew/2.3.rst:688
msgid ""
"The full list of classifiers can be obtained by running  ``python setup.py "
"register --list-classifiers``."
msgstr ""
"完整的 classifiers 列表可通过运行 ``python setup.py register --list-classifiers`` 来获取。"

#: ../../whatsnew/2.3.rst:694
msgid ":pep:`301` - Package Index and Metadata for Distutils"
msgstr ":pep:`301` - Distutils 的软件包索引和元数据"

#: ../../whatsnew/2.3.rst:695
msgid "Written and implemented by Richard Jones."
msgstr "由 Richard Jones 撰写并实现。"

#: ../../whatsnew/2.3.rst:703
msgid "PEP 302: New Import Hooks"
msgstr "PEP 302: 新导入钩子"

#: ../../whatsnew/2.3.rst:705
msgid ""
"While it's been possible to write custom import hooks ever since the "
":mod:`ihooks` module was introduced in Python 1.3, no one has ever been "
"really happy with it because writing new import hooks is difficult and "
"messy.  There have been various proposed alternatives such as the "
":mod:`imputil` and :mod:`iu` modules, but none of them has ever gained much "
"acceptance, and none of them were easily usable from C code."
msgstr ""

#: ../../whatsnew/2.3.rst:712
msgid ""
":pep:`302` borrows ideas from its predecessors, especially from Gordon "
"McMillan's :mod:`iu` module.  Three new items  are added to the :mod:`sys` "
"module:"
msgstr ""

#: ../../whatsnew/2.3.rst:716
msgid ""
"``sys.path_hooks`` is a list of callable objects; most  often they'll be "
"classes.  Each callable takes a string containing a path and either returns "
"an importer object that will handle imports from this path or raises an "
":exc:`ImportError` exception if it can't handle this path."
msgstr ""
"``sys.path_hooks`` 是一个可调用对象列表，通常是类。 "
"每个可调用对象都接收一个包含路径的字符串，然后返回一个可处理从该路径导入的导入器对象，如果不能处理该路径，则引发 :exc:`ImportError` "
"异常。"

#: ../../whatsnew/2.3.rst:721
msgid ""
"``sys.path_importer_cache`` caches importer objects for each path, so "
"``sys.path_hooks`` will only need to be traversed once for each path."
msgstr ""
"``sys.path_importer_cache`` 会缓存每条路径的导入器对象，因此 ``sys.path_hooks`` 只需为每条路径遍历一次。"
" "

#: ../../whatsnew/2.3.rst:724
msgid ""
"``sys.meta_path`` is a list of importer objects that will be traversed "
"before ``sys.path`` is checked.  This list is initially empty, but user code"
" can add objects to it.  Additional built-in and frozen modules can be "
"imported by an object added to this list."
msgstr ""
"``sys.meta_path`` 是一个导入器对象列表，在检查 ``sys.path`` 之前将遍历该列表。 "
"该列表最初为空，但用户代码可以向其中添加对象。 其他内置模块和冻结模块可以通过添加到该列表中的对象导入。"

#: ../../whatsnew/2.3.rst:729
msgid ""
"Importer objects must have a single method, ``find_module(fullname, "
"path=None)``.  *fullname* will be a module or package name, e.g. ``string`` "
"or ``distutils.core``.  :meth:`find_module` must return a loader object that"
" has a single method, ``load_module(fullname)``, that creates and returns "
"the corresponding module object."
msgstr ""

#: ../../whatsnew/2.3.rst:735
msgid ""
"Pseudo-code for Python's new import logic, therefore, looks something like "
"this (simplified a bit; see :pep:`302` for the full details)::"
msgstr "因此，Python 新导入逻辑的伪代码如下 (略有简化；详情请参见 :pep:`302`)："

#: ../../whatsnew/2.3.rst:760
msgid ":pep:`302` - New Import Hooks"
msgstr ":pep:`302` - 新导入钩"

#: ../../whatsnew/2.3.rst:761
msgid ""
"Written by Just van Rossum and Paul Moore. Implemented by Just van Rossum."
msgstr "由 Just van Rossum 和 Paul Moore 撰写 ; 由 Just van Rossum 实现。"

#: ../../whatsnew/2.3.rst:769
msgid "PEP 305: Comma-separated Files"
msgstr "PEP 305: 逗号分隔文件"

#: ../../whatsnew/2.3.rst:771
msgid ""
"Comma-separated files are a format frequently used for exporting data from "
"databases and spreadsheets.  Python 2.3 adds a parser for comma-separated "
"files."
msgstr "以逗号作为分隔符的文件是一种常用于从数据库和电子表格导出数据的格式。 Python 2.3 增加了一个针对逗号分隔文件的解析器。"

#: ../../whatsnew/2.3.rst:774
msgid "Comma-separated format is deceptively simple at first glance::"
msgstr "逗号分隔文件乍一看非常简单::"

#: ../../whatsnew/2.3.rst:778
msgid ""
"Read a line and call ``line.split(',')``: what could be simpler? But toss in"
" string data that can contain commas, and things get more complicated::"
msgstr "读取一行并调用 ``line.split(',')``: 再简单不过了吧？ 但是考虑到可能包含逗号的字符串数据，事件就变得复杂起来::"

#: ../../whatsnew/2.3.rst:783
msgid ""
"A big ugly regular expression can parse this, but using the new  :mod:`csv` "
"package is much simpler::"
msgstr "一个大的丑陋的正则表达式可以解析这些内容，但使用新的 :mod:`csv` 软件包要简单得多："

#: ../../whatsnew/2.3.rst:793
msgid ""
"The :func:`reader` function takes a number of different options. The field "
"separator isn't limited to the comma and can be changed to any character, "
"and so can the quoting and line-ending characters."
msgstr ""

#: ../../whatsnew/2.3.rst:797
msgid ""
"Different dialects of comma-separated files can be defined and registered; "
"currently there are two dialects, both used by Microsoft Excel. A separate "
":class:`csv.writer` class will generate comma-separated files from a "
"succession of tuples or lists, quoting strings that contain the delimiter."
msgstr ""
"Можна визначати та реєструвати різні діалекти файлів, розділених комами; "
"наразі існує два діалекти, обидва використовуються Microsoft Excel. Окремий "
"клас :class:`csv.writer` генеруватиме файли, розділені комами, із "
"послідовності кортежів або списків, цитуючи рядки, які містять роздільник."

#: ../../whatsnew/2.3.rst:806
msgid ":pep:`305` - CSV File API"
msgstr "该实现在“Python 增强提议” - PEP `305` (CSV 文件 API)  中被提出"

#: ../../whatsnew/2.3.rst:806
msgid ""
"Written and implemented  by Kevin Altis, Dave Cole, Andrew McNamara, Skip "
"Montanaro, Cliff Wells."
msgstr ""
"由 Kevin Altis, Dave Cole, Andrew McNamara, Skip Montanaro, Cliff Wells "
"撰写并实现。"

#: ../../whatsnew/2.3.rst:815
msgid "PEP 307: Pickle Enhancements"
msgstr "PEP 307：对 pickle 的改进"

#: ../../whatsnew/2.3.rst:817
msgid ""
"The :mod:`pickle` and :mod:`cPickle` modules received some attention during "
"the 2.3 development cycle.  In 2.2, new-style classes could be pickled "
"without difficulty, but they weren't pickled very compactly; :pep:`307` "
"quotes a trivial example where a new-style class results in a pickled string"
" three times longer than that for a classic class."
msgstr ""

#: ../../whatsnew/2.3.rst:823
msgid ""
"The solution was to invent a new pickle protocol.  The :func:`pickle.dumps` "
"function has supported a text-or-binary flag  for a long time.  In 2.3, this"
" flag is redefined from a Boolean to an integer: 0 is the old text-mode "
"pickle format, 1 is the old binary format, and now 2 is a new 2.3-specific "
"format.  A new constant, :const:`pickle.HIGHEST_PROTOCOL`, can be used to "
"select the fanciest protocol available."
msgstr ""
"解决办法就是发明一种新的 pickle 协议。 :func:`pickle.dumps` 函数很早就支持文本或二进制标志。 在 2.3 "
"中，该标志从布尔值重新定义为整数：0 表示旧的文本模式 pickle 格式，1 表示旧的二进制格式，现在 2 表示新的 2.3 专用格式。 一个新常量 "
":const:`pickle.HIGHEST_PROTOCOL` 可用来选择最先进的协议。"

#: ../../whatsnew/2.3.rst:830
msgid ""
"Unpickling is no longer considered a safe operation.  2.2's :mod:`pickle` "
"provided hooks for trying to prevent unsafe classes from being unpickled "
"(specifically, a :attr:`__safe_for_unpickling__` attribute), but none of "
"this code was ever audited and therefore it's all been ripped out in 2.3.  "
"You should not unpickle untrusted data in any version of Python."
msgstr ""

#: ../../whatsnew/2.3.rst:836
msgid ""
"To reduce the pickling overhead for new-style classes, a new interface for "
"customizing pickling was added using three special methods: "
":meth:`__getstate__`, :meth:`__setstate__`, and :meth:`__getnewargs__`.  "
"Consult :pep:`307` for the full semantics  of these methods."
msgstr ""

#: ../../whatsnew/2.3.rst:841
msgid ""
"As a way to compress pickles yet further, it's now possible to use integer "
"codes instead of long strings to identify pickled classes. The Python "
"Software Foundation will maintain a list of standardized codes; there's also"
" a range of codes for private use.  Currently no codes have been specified."
msgstr ""
"为了进一步压缩 pickle 类，现在可以使用整数代码而不是长字符串来标识 pickle 类。 Python "
"软件基金会将维护一个标准化代码列表；还有一系列供私人使用的代码。 目前还没有指定任何代码。"

#: ../../whatsnew/2.3.rst:849
msgid ":pep:`307` - Extensions to the pickle protocol"
msgstr ":pep:`307` - pickle 协议的扩展"

#: ../../whatsnew/2.3.rst:850
msgid "Written and implemented  by Guido van Rossum and Tim Peters."
msgstr "PEP 由 Guido van Rossum 和 Tim Peters 撰写和实现。"

#: ../../whatsnew/2.3.rst:858
msgid "Extended Slices"
msgstr "扩展切片"

#: ../../whatsnew/2.3.rst:860
msgid ""
"Ever since Python 1.4, the slicing syntax has supported an optional third "
"\"step\" or \"stride\" argument.  For example, these are all legal Python "
"syntax: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  This was added to Python "
"at the request of the developers of Numerical Python, which uses the third "
"argument extensively.  However, Python's built-in list, tuple, and string "
"sequence types have never supported this feature, raising a :exc:`TypeError`"
" if you tried it. Michael Hudson contributed a patch to fix this "
"shortcoming."
msgstr ""
"从 Python 1.4 开始，切片语法支持可选的第三个“step”或“stride”参数。例如，这些都是合法的 Python 语法: "
"``L[1:10:2]``，``L[:-1:1]``，``L[::-1]``。 这是应 Numerical Python 开发者的要求添加到 "
"Python 中的，因为 Numerical Python 广泛使用第三个参数。 然而，Python 内置的 list、tuple "
"和字符串序列类型从未支持过这一特性，如果您尝试使用，会引发 :exc:`TypeError`。 Michael Hudson "
"提供了一个补丁来修复这一缺陷。"

#: ../../whatsnew/2.3.rst:868
msgid ""
"For example, you can now easily extract the elements of a list that have "
"even indexes::"
msgstr "例如，您现在可以轻松地提取出具有偶数索引的列表元素："

#: ../../whatsnew/2.3.rst:875
msgid ""
"Negative values also work to make a copy of the same list in reverse order::"
msgstr "也可以用负值以按相反顺序复制相同的列表："

#: ../../whatsnew/2.3.rst:880
msgid "This also works for tuples, arrays, and strings::"
msgstr "这也适用于元组、数组和字符串："

#: ../../whatsnew/2.3.rst:888
msgid ""
"If you have a mutable sequence such as a list or an array you can assign to "
"or delete an extended slice, but there are some differences between "
"assignment to extended and regular slices.  Assignment to a regular slice "
"can be used to change the length of the sequence::"
msgstr ""
"如果你有一个可变序列如列表或数组，你可以对扩展切片进行赋值或删除，但对扩展切片的赋值与对常规切片的赋值有一些区别。对常规片段的赋值可以用来改变序列的长度："

#: ../../whatsnew/2.3.rst:900
msgid ""
"Extended slices aren't this flexible.  When assigning to an extended slice, "
"the list on the right hand side of the statement must contain the same "
"number of items as the slice it is replacing::"
msgstr "扩展分片则没有这种灵活性。 在为扩展分片赋值时，语句右侧的列表必须包含与要替换的分片相同数量的项目："

#: ../../whatsnew/2.3.rst:917
msgid "Deletion is more straightforward::"
msgstr "删除操作更为直观："

#: ../../whatsnew/2.3.rst:928
msgid ""
"One can also now pass slice objects to the :meth:`__getitem__` methods of "
"the built-in sequences::"
msgstr ""

#: ../../whatsnew/2.3.rst:934
msgid "Or use slice objects directly in subscripts::"
msgstr "或者直接在下标中使用切片对象："

#: ../../whatsnew/2.3.rst:939
msgid ""
"To simplify implementing sequences that support extended slicing, slice "
"objects now have a method ``indices(length)`` which, given the length of a "
"sequence, returns a ``(start, stop, step)`` tuple that can be passed "
"directly to :func:`range`. :meth:`indices` handles omitted and out-of-bounds"
" indices in a manner consistent with regular slices (and this innocuous "
"phrase hides a welter of confusing details!).  The method is intended to be "
"used like this::"
msgstr ""

#: ../../whatsnew/2.3.rst:957
msgid ""
"From this example you can also see that the built-in :class:`slice` object "
"is now the type object for the slice type, and is no longer a function.  "
"This is consistent with Python 2.2, where :class:`int`, :class:`str`, etc., "
"underwent the same change."
msgstr ""
"从这个例子中还可以看到，内置的 :class:`slice` 对象现在是 slice 类型的类型对象，而不再是函数。 这与 Python 2.2 "
"是一致的，在 Python 2.2 中，:class:`int`，:class:`str` 等也经历了同样的变化。"

#: ../../whatsnew/2.3.rst:966
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/2.3.rst:968
msgid ""
"Here are all of the changes that Python 2.3 makes to the core Python "
"language."
msgstr "以下是 Python 2.3 针对核心 Python 语言的所有改变。"

#: ../../whatsnew/2.3.rst:970
msgid ""
"The :keyword:`yield` statement is now always a keyword, as described in "
"section :ref:`section-generators` of this document."
msgstr ":keyword:`yield` 语句现在将始终是关键字，如本文档的 :ref:`section-generators` 一节所描述的。"

#: ../../whatsnew/2.3.rst:973
msgid ""
"A new built-in function :func:`enumerate` was added, as described in section"
" :ref:`section-enumerate` of this document."
msgstr "新增内置函数 :func:`enumerate`，如本文档的 :ref:`section-enumerate` 一节所描述的。"

#: ../../whatsnew/2.3.rst:976
msgid ""
"Two new constants, :const:`True` and :const:`False` were added along with "
"the built-in :class:`bool` type, as described in section :ref:`section-bool`"
" of this document."
msgstr ""
"新增两个常量 :const:`True` 和 :const:`False` 以及内置的 :class:`bool` 类型，如本文档的 "
":ref:`section-bool` 一节所描述的。"

#: ../../whatsnew/2.3.rst:980
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer.  This can lead to the paradoxical result "
"that ``isinstance(int(expression), int)`` is false, but that seems unlikely "
"to cause problems in practice."
msgstr ""
":func:`int` 类型构造函数现在会返回一个长整数，而不会在字符串或浮点数太大而无法放入整数时引发 :exc:`OverflowError`。 "
"这可能会导致 ``isinstance(int(expression), int)`` 为假的矛盾结果，但在实践中似乎不太可能造成问题。"

#: ../../whatsnew/2.3.rst:986
msgid ""
"Built-in types now support the extended slicing syntax, as described in "
"section :ref:`section-slices` of this document."
msgstr "内置类型现在支持扩展的切分语法，详见本文档 :ref:`section-slices` 一节。"

#: ../../whatsnew/2.3.rst:989
msgid ""
"A new built-in function, ``sum(iterable, start=0)``,  adds up the numeric "
"items in the iterable object and returns their sum.  :func:`sum` only "
"accepts numbers, meaning that you can't use it to concatenate a bunch of "
"strings. (Contributed by Alex Martelli.)"
msgstr ""
"Нова вбудована функція, ``sum(iterable, start=0)``, додає числові елементи в"
" ітераційному об’єкті та повертає їхню суму. :func:`sum` приймає лише числа,"
" тобто ви не можете використовувати його для об’єднання рядків. (Надав Алекс"
" Мартеллі.)"

#: ../../whatsnew/2.3.rst:994
msgid ""
"``list.insert(pos, value)`` used to  insert *value* at the front of the list"
" when *pos* was negative.  The behaviour has now been changed to be "
"consistent with slice indexing, so when *pos* is -1 the value will be "
"inserted before the last element, and so forth."
msgstr ""
"以前 ``list.insert(pos, value)`` 在 *pos* 为负值时会将 *value* 插入到列表的前面。 "
"现在，该行为已被修改为与切片索引一致，因此当 *pos* 为 -1 时，值将被插入最后一个元素之前，以此类推。"

#: ../../whatsnew/2.3.rst:999
msgid ""
"``list.index(value)``, which searches for *value*  within the list and "
"returns its index, now takes optional  *start* and *stop* arguments to limit"
" the search to  only part of the list."
msgstr ""
"``list.index(value)`` 会在列表中搜索 *value*，并返回其索引，现在可以使用可选的 *start* 和 *stop* "
"参数，将搜索范围限制在列表的一部分。"

#: ../../whatsnew/2.3.rst:1003
msgid ""
"Dictionaries have a new method, ``pop(key[, *default*])``, that returns the "
"value corresponding to *key* and removes that key/value pair from the "
"dictionary.  If the requested key isn't present in the dictionary, *default*"
" is returned if it's specified and :exc:`KeyError` raised if it isn't. ::"
msgstr ""
"字典有一个新方法 ``pop(key[, *default*])``，可返回 *key* "
"对应的值，并从字典中删除该键/值对。如果请求的键不在字典中，如果指定了 *default*，则返回 *default*，如果没有指定则会引发 "
":exc:`KeyError`。 ::"

#: ../../whatsnew/2.3.rst:1025
msgid ""
"There's also a new class method,  ``dict.fromkeys(iterable, value)``, that "
"creates a dictionary with keys taken from the supplied iterator *iterable* "
"and all values set to *value*, defaulting to ``None``."
msgstr ""
"还有一个新的类方法 ``dict.fromkeys(iterable, value)``，用于创建一个字典，其键取自所提供的迭代器 "
"*iterable*，所有值设置为 *value*，默认为 ``None``。"

#: ../../whatsnew/2.3.rst:1029
msgid "(Patches contributed by Raymond Hettinger.)"
msgstr "（由 Raymond Hettinger 贡献补丁。）"

#: ../../whatsnew/2.3.rst:1031
msgid ""
"Also, the :func:`dict` constructor now accepts keyword arguments to simplify"
" creating small dictionaries::"
msgstr "此外，现在 :func:`dict` 构建器可接受关键字参数以简化小型字典的创建::"

#: ../../whatsnew/2.3.rst:1037
msgid "(Contributed by Just van Rossum.)"
msgstr "（由 Just van Rossum 贡献。）"

#: ../../whatsnew/2.3.rst:1039
msgid ""
"The :keyword:`assert` statement no longer checks the ``__debug__`` flag, so "
"you can no longer disable assertions by assigning to ``__debug__``. Running "
"Python with the :option:`-O` switch will still generate code that doesn't "
"execute any assertions."
msgstr ""
":keyword:`assert` 语句将不再检查 ``__debug__`` 旗标，因此你无法再通过为 ``__debug__`` 赋值来禁用断言。 "
"使用 :option:`-O` 开关运行 Python 仍会生成不执行任何断言的代码。"

#: ../../whatsnew/2.3.rst:1044
msgid ""
"Most type objects are now callable, so you can use them to create new "
"objects such as functions, classes, and modules.  (This means that the "
":mod:`new` module can be deprecated in a future Python version, because you "
"can now use the type objects available in the :mod:`types` module.) For "
"example, you can create a new module object with the following code:"
msgstr ""

#: ../../whatsnew/2.3.rst:1059
msgid ""
"A new warning, :exc:`PendingDeprecationWarning` was added to indicate "
"features which are in the process of being deprecated.  The warning will "
"*not* be printed by default.  To check for use of features that will be "
"deprecated in the future, supply "
":option:`-Walways::PendingDeprecationWarning:: <-W>` on the command line or "
"use :func:`warnings.filterwarnings`."
msgstr ""
"添加了一个新的警告 :exc:`PendingDeprecationWarning`，用于指示正在被废弃的功能。 默认情况下 *不会* 打印该警告。 "
"要检查是否使用了将来会被废弃的功能，可在命令行中提供 :option:`-Walways::PendingDeprecationWarning:: "
"<-W>` 或使用 :func:`warnings.filterwarnings`。"

#: ../../whatsnew/2.3.rst:1065
msgid ""
"The process of deprecating string-based exceptions, as in ``raise \"Error "
"occurred\"``, has begun.  Raising a string will now trigger "
":exc:`PendingDeprecationWarning`."
msgstr ""
"与 ``raise \"Error occurred\"`` 一样，基于字符串的异常的废弃过程已经开始。 现在，引发字符串异常将触发 "
":exc:`PendingDeprecationWarning`。"

#: ../../whatsnew/2.3.rst:1069
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning.  In a future version of Python, ``None`` may finally become a "
"keyword."
msgstr ""
"现在使用 ``None`` 作为变量名将导致 :exc:`SyntaxWarning` 警告。 在未来的 Python 版本中，``None`` "
"将最终成为一个保留关键字。"

#: ../../whatsnew/2.3.rst:1072
msgid ""
"The :meth:`xreadlines` method of file objects, introduced in Python 2.1, is "
"no longer necessary because files now behave as their own iterator. "
":meth:`xreadlines` was originally introduced as a faster way to loop over "
"all the lines in a file, but now you can simply write ``for line in "
"file_obj``. File objects also have a new read-only :attr:`encoding` "
"attribute that gives the encoding used by the file; Unicode strings written "
"to the file will be automatically  converted to bytes using the given "
"encoding."
msgstr ""

#: ../../whatsnew/2.3.rst:1080
msgid ""
"The method resolution order used by new-style classes has changed, though "
"you'll only notice the difference if you have a really complicated "
"inheritance hierarchy.  Classic classes are unaffected by this change.  "
"Python 2.2 originally used a topological sort of a class's ancestors, but "
"2.3 now uses the C3 algorithm as described in the paper `\"A Monotonic "
"Superclass Linearization for Dylan\" "
"<https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.19.3910>`_. To "
"understand the motivation for this change,  read Michele Simionato's article"
" `\"Python 2.3 Method Resolution Order\" "
"<http://www.phyast.pitt.edu/~micheles/mro.html>`_, or read the thread on "
"python-dev starting with the message at "
"https://mail.python.org/pipermail/python-dev/2002-October/029035.html. "
"Samuele Pedroni first pointed out the problem and also implemented the fix "
"by coding the C3 algorithm."
msgstr ""

#: ../../whatsnew/2.3.rst:1093
msgid ""
"Python runs multithreaded programs by switching between threads after "
"executing N bytecodes.  The default value for N has been increased from 10 "
"to 100 bytecodes, speeding up single-threaded applications by reducing the "
"switching overhead.  Some multithreaded applications may suffer slower "
"response time, but that's easily fixed by setting the limit back to a lower "
"number using ``sys.setcheckinterval(N)``. The limit can be retrieved with "
"the new :func:`sys.getcheckinterval` function."
msgstr ""

#: ../../whatsnew/2.3.rst:1101
msgid ""
"One minor but far-reaching change is that the names of extension types "
"defined by the modules included with Python now contain the module and a "
"``'.'`` in front of the type name.  For example, in Python 2.2, if you "
"created a socket and printed its :attr:`__class__`, you'd get this output::"
msgstr ""

#: ../../whatsnew/2.3.rst:1110
msgid "In 2.3, you get this::"
msgstr "在 2.3 中，您会得到以下信息："

#: ../../whatsnew/2.3.rst:1115
msgid ""
"One of the noted incompatibilities between old- and new-style classes has "
"been removed: you can now assign to the :attr:`~definition.__name__` and "
":attr:`~class.__bases__` attributes of new-style classes.  There are some "
"restrictions on what can be assigned to :attr:`~class.__bases__` along the "
"lines of those relating to assigning to an instance's "
":attr:`~instance.__class__` attribute."
msgstr ""
"旧式和新式类之间的不兼容问题之一已被消除：您现在可以为新式类的 :attr:`~definition.__name__` 和 "
":attr:`~class.__bases__` 属性赋值。 对 :attr:`~class.__bases__` 的赋值有一些限制，与对实例的 "
":attr:`~instance.__class__` 属性的赋值类似。"

#: ../../whatsnew/2.3.rst:1125
msgid "String Changes"
msgstr "字符串的改变"

#: ../../whatsnew/2.3.rst:1127
msgid ""
"The :keyword:`in` operator now works differently for strings. Previously, "
"when evaluating ``X in Y`` where *X* and *Y* are strings, *X* could only be "
"a single character. That's now changed; *X* can be a string of any length, "
"and ``X in Y`` will return :const:`True` if *X* is a substring of *Y*.  If "
"*X* is the empty string, the result is always :const:`True`. ::"
msgstr ""
":keyword:`in` 运算符现在对字符串的作用不同了。 以前，当计算 ``X in Y`` 时，*X* 和 *Y* 都是字符串，*X* "
"只能是单字符。 现在情况有所改变；*X* 可以是任意长度的字符串，如果 *X* 是 *Y* 的子串，``X in Y`` 将返回 "
":const:`True`。 如果 *X* 是空字符串，结果总是 :const:`True`。 ::"

#: ../../whatsnew/2.3.rst:1140
msgid ""
"Note that this doesn't tell you where the substring starts; if you need that"
" information, use the :meth:`find` string method."
msgstr ""

#: ../../whatsnew/2.3.rst:1143
msgid ""
"The :meth:`strip`, :meth:`lstrip`, and :meth:`rstrip` string methods now "
"have an optional argument for specifying the characters to strip.  The "
"default is still to remove all whitespace characters::"
msgstr ""

#: ../../whatsnew/2.3.rst:1157
msgid "(Suggested by Simon Brunning and implemented by Walter Dörwald.)"
msgstr "（由 Simon Brunning 提议并由 Walter Dörwald 实现。）"

#: ../../whatsnew/2.3.rst:1159
msgid ""
"The :meth:`startswith` and :meth:`endswith` string methods now accept "
"negative numbers for the *start* and *end* parameters."
msgstr ""

#: ../../whatsnew/2.3.rst:1162
msgid ""
"Another new string method is :meth:`zfill`, originally a function in the "
":mod:`string` module.  :meth:`zfill` pads a numeric string with zeros on the"
" left until it's the specified width. Note that the ``%`` operator is still "
"more flexible and powerful than :meth:`zfill`. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1174
msgid "(Contributed by Walter Dörwald.)"
msgstr "（由 Walter Dörwald 贡献。）"

#: ../../whatsnew/2.3.rst:1176
msgid ""
"A new type object, :class:`basestring`, has been added. Both 8-bit strings "
"and Unicode strings inherit from this type, so ``isinstance(obj, "
"basestring)`` will return :const:`True` for either kind of string.  It's a "
"completely abstract type, so you can't create :class:`basestring` instances."
msgstr ""

#: ../../whatsnew/2.3.rst:1181
msgid ""
"Interned strings are no longer immortal and will now be garbage-collected in"
" the usual way when the only reference to them is from the internal "
"dictionary of interned strings.  (Implemented by Oren Tirosh.)"
msgstr ""
"Внутрішні рядки більше не є безсмертними і тепер збиратимуть сміття у "
"звичайний спосіб, якщо єдине посилання на них міститься у внутрішньому "
"словнику інтернованих рядків. (Реалізовано Ореном Тірошем.)"

#: ../../whatsnew/2.3.rst:1189
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/2.3.rst:1191
msgid ""
"The creation of new-style class instances has been made much faster; they're"
" now faster than classic classes!"
msgstr "新式类实例的创建速度获得大幅提升；现在已经比经典类更快了！"

#: ../../whatsnew/2.3.rst:1194
msgid ""
"The :meth:`sort` method of list objects has been extensively rewritten by "
"Tim Peters, and the implementation is significantly faster."
msgstr ""

#: ../../whatsnew/2.3.rst:1197
msgid ""
"Multiplication of large long integers is now much faster thanks to an "
"implementation of Karatsuba multiplication, an algorithm that scales better "
"than the O(n\\*n) required for the grade-school multiplication algorithm.  "
"(Original patch by Christopher A. Craig, and significantly reworked by Tim "
"Peters.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1202
msgid ""
"The ``SET_LINENO`` opcode is now gone.  This may provide a small speed "
"increase, depending on your compiler's idiosyncrasies. See section "
":ref:`23section-other` for a longer explanation. (Removed by Michael "
"Hudson.)"
msgstr ""
"Код операції ``SET_LINENO`` тепер зник. Це може забезпечити невелике "
"збільшення швидкості, залежно від особливостей вашого компілятора. "
"Перегляньте розділ :ref:`23section-other` для більш детального пояснення. "
"(Вилучено Майклом Хадсоном.)"

#: ../../whatsnew/2.3.rst:1206
msgid ""
":func:`xrange` objects now have their own iterator, making ``for i in "
"xrange(n)`` slightly faster than ``for i in range(n)``.  (Patch by Raymond "
"Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1210
msgid ""
"A number of small rearrangements have been made in various hotspots to "
"improve performance, such as inlining a function or removing some code.  "
"(Implemented mostly by GvR, but lots of people have contributed single "
"changes.)"
msgstr ""
"У різних гарячих точках було зроблено ряд невеликих змін, щоб покращити "
"продуктивність, як-от вбудовування функції або видалення деякого коду. "
"(Реалізовано переважно GvR, але багато людей внесли окремі зміни.)"

#: ../../whatsnew/2.3.rst:1214
msgid ""
"The net result of the 2.3 optimizations is that Python 2.3 runs the  pystone"
" benchmark around 25% faster than Python 2.2."
msgstr "2.3 优化的总体结果是 Python 2.3 运行 pystone 基准测试的速度比 Python 2.2 加快了大约 25%。"

#: ../../whatsnew/2.3.rst:1221
msgid "New, Improved, and Deprecated Modules"
msgstr "新增，改进和弃用的模块"

#: ../../whatsnew/2.3.rst:1223
msgid ""
"As usual, Python's standard library received a number of enhancements and "
"bug fixes.  Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the CVS "
"logs for all the details."
msgstr ""
"Як завжди, стандартна бібліотека Python отримала низку вдосконалень і "
"виправлень помилок. Ось неповний список найбільш помітних змін, "
"відсортованих за алфавітом назв модулів. Зверніться до файлу "
":file:`Misc/NEWS` у дереві вихідних кодів, щоб отримати більш повний список "
"змін, або перегляньте журнали CVS, щоб отримати всі деталі."

#: ../../whatsnew/2.3.rst:1228
msgid ""
"The :mod:`array` module now supports arrays of Unicode characters using the "
"``'u'`` format character.  Arrays also now support using the ``+=`` "
"assignment operator to add another array's contents, and the ``*=`` "
"assignment operator to repeat an array. (Contributed by Jason Orendorff.)"
msgstr ""
"Модуль :mod:`array` тепер підтримує масиви символів Unicode з використанням "
"символу формату ``'u'``. Масиви також тепер підтримують використання "
"оператора призначення ``+=`` для додавання вмісту іншого масиву та оператора"
" призначення ``*=`` для повторення масиву. (Надав Джейсон Орендорф.)"

#: ../../whatsnew/2.3.rst:1233
msgid ""
"The :mod:`bsddb` module has been replaced by version 4.1.6 of the `PyBSDDB "
"<https://pybsddb.sourceforge.net>`_ package, providing a more complete "
"interface to the transactional features of the BerkeleyDB library."
msgstr ""

#: ../../whatsnew/2.3.rst:1237
msgid ""
"The old version of the module has been renamed to  :mod:`bsddb185` and is no"
" longer built automatically; you'll  have to edit :file:`Modules/Setup` to "
"enable it.  Note that the new :mod:`bsddb` package is intended to be "
"compatible with the  old module, so be sure to file bugs if you discover any"
" incompatibilities. When upgrading to Python 2.3, if the new interpreter is "
"compiled with a new version of  the underlying BerkeleyDB library, you will "
"almost certainly have to convert your database files to the new version.  "
"You can do this fairly easily with the new scripts :file:`db2pickle.py` and "
":file:`pickle2db.py` which you will find in the distribution's "
":file:`Tools/scripts` directory.  If you've already been using the PyBSDDB "
"package and importing it as :mod:`bsddb3`, you will have to change your "
"``import`` statements to import it as :mod:`bsddb`."
msgstr ""

#: ../../whatsnew/2.3.rst:1249
msgid ""
"The new :mod:`bz2` module is an interface to the bz2 data compression "
"library. bz2-compressed data is usually smaller than  corresponding "
":mod:`zlib`\\ -compressed data. (Contributed by Gustavo Niemeyer.)"
msgstr ""
"Новий модуль :mod:`bz2` є інтерфейсом до бібліотеки стиснення даних bz2. "
"bz2-стиснуті дані зазвичай менші за відповідні :mod:`zlib`\\ -стиснуті дані."
" (Надав Густаво Німейєр.)"

#: ../../whatsnew/2.3.rst:1253
msgid ""
"A set of standard date/time types has been added in the new :mod:`datetime` "
"module.  See the following section for more details."
msgstr ""
"У новий модуль :mod:`datetime` додано набір стандартних типів дати/часу. "
"Перегляньте наступний розділ для отримання додаткової інформації."

#: ../../whatsnew/2.3.rst:1256
msgid ""
"The Distutils :class:`Extension` class now supports an extra constructor "
"argument named *depends* for listing additional source files that an "
"extension depends on.  This lets Distutils recompile the module if any of "
"the dependency files are modified.  For example, if :file:`sampmodule.c` "
"includes the header file :file:`sample.h`, you would create the "
":class:`Extension` object like this::"
msgstr ""

#: ../../whatsnew/2.3.rst:1267
msgid ""
"Modifying :file:`sample.h` would then cause the module to be recompiled. "
"(Contributed by Jeremy Hylton.)"
msgstr "修改 :file:`sample.h` 将导致模块被重新编译。 （由 Jeremy Hylton 贡献。）"

#: ../../whatsnew/2.3.rst:1270
msgid ""
"Other minor changes to Distutils: it now checks for the :envvar:`CC`, "
":envvar:`CFLAGS`, :envvar:`CPP`, :envvar:`LDFLAGS`, and :envvar:`CPPFLAGS` "
"environment variables, using them to override the settings in Python's "
"configuration (contributed by Robert Weber)."
msgstr ""

#: ../../whatsnew/2.3.rst:1275
msgid ""
"Previously the :mod:`doctest` module would only search the docstrings of "
"public methods and functions for test cases, but it now also examines "
"private ones as well.  The :func:`DocTestSuite` function creates a "
":class:`unittest.TestSuite` object from a set of :mod:`doctest` tests."
msgstr ""

#: ../../whatsnew/2.3.rst:1280
msgid ""
"The new ``gc.get_referents(object)`` function returns a list of all the "
"objects referenced by *object*."
msgstr "新的 ``gc.get_referents(object)`` 函数将返回由 *object* 引用的所有对象组成的列表。"

#: ../../whatsnew/2.3.rst:1283
msgid ""
"The :mod:`getopt` module gained a new function, :func:`gnu_getopt`, that "
"supports the same arguments as the existing :func:`getopt` function but uses"
" GNU-style scanning mode. The existing :func:`getopt` stops processing "
"options as soon as a non-option argument is encountered, but in GNU-style "
"mode processing continues, meaning that options and arguments can be mixed."
"  For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1294
msgid "(Contributed by Peter Åstrand.)"
msgstr "（由 Peter Åstrand 贡献。）"

#: ../../whatsnew/2.3.rst:1296
msgid ""
"The :mod:`grp`, :mod:`pwd`, and :mod:`resource` modules now return enhanced "
"tuples::"
msgstr "现在 :mod:`grp`, :mod:`pwd` 和 :mod:`resource` 模块将返回加强版的元组::"

#: ../../whatsnew/2.3.rst:1304
msgid "The :mod:`gzip` module can now handle files exceeding 2 GiB."
msgstr "现在 :mod:`gzip` 模块能够处理超过 2 GiB 的文件。"

#: ../../whatsnew/2.3.rst:1306
msgid ""
"The new :mod:`heapq` module contains an implementation of a heap queue "
"algorithm.  A heap is an array-like data structure that keeps items in a "
"partially sorted order such that, for every index *k*, ``heap[k] <= "
"heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]``.  This makes it quick to remove"
" the smallest item, and inserting a new item while maintaining the heap "
"property is O(lg n).  (See "
"https://xlinux.nist.gov/dads//HTML/priorityque.html for more information "
"about the priority queue data structure.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1314
msgid ""
"The :mod:`heapq` module provides :func:`heappush` and :func:`heappop` "
"functions for adding and removing items while maintaining the heap property "
"on top of some other mutable Python sequence type.  Here's an example that "
"uses a Python list::"
msgstr ""

#: ../../whatsnew/2.3.rst:1332
msgid "(Contributed by Kevin O'Connor.)"
msgstr "（由 Kevin O'Connor 贡献。）"

#: ../../whatsnew/2.3.rst:1334
msgid ""
"The IDLE integrated development environment has been updated using the code "
"from the IDLEfork project (http://idlefork.sourceforge.net).  The most "
"notable feature is that the code being developed is now executed in a "
"subprocess, meaning that there's no longer any need for manual ``reload()`` "
"operations. IDLE's core code has been incorporated into the standard library"
" as the :mod:`idlelib` package."
msgstr ""

#: ../../whatsnew/2.3.rst:1340
msgid ""
"The :mod:`imaplib` module now supports IMAP over SSL. (Contributed by Piers "
"Lauder and Tino Lange.)"
msgstr ""
"Модуль :mod:`imaplib` тепер підтримує IMAP через SSL. (Пірс Лаудер і Тіно "
"Ланге.)"

#: ../../whatsnew/2.3.rst:1343
msgid ""
"The :mod:`itertools` contains a number of useful functions for use with "
"iterators, inspired by various functions provided by the ML and Haskell "
"languages.  For example, ``itertools.ifilter(predicate, iterator)`` returns "
"all elements in the iterator for which the function :func:`predicate` "
"returns :const:`True`, and ``itertools.repeat(obj, N)`` returns ``obj`` *N* "
"times. There are a number of other functions in the module; see the "
"package's reference documentation for details. (Contributed by Raymond "
"Hettinger.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1352
msgid ""
"Two new functions in the :mod:`math` module, ``degrees(rads)`` and "
"``radians(degs)``, convert between radians and degrees.  Other functions in "
"the :mod:`math` module such as :func:`math.sin` and :func:`math.cos` have "
"always required input values measured in radians.  Also, an optional *base* "
"argument was added to :func:`math.log` to make it easier to compute "
"logarithms for bases other than ``e`` and ``10``.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Дві нові функції в модулі :mod:`math`, ``degrees(rads)`` і "
"``radians(degs)``, конвертують між радіанами та градусами. Інші функції в "
"модулі :mod:`math`, такі як :func:`math.sin` і :func:`math.cos`, завжди "
"вимагали вхідних значень, виміряних у радіанах. Також до :func:`math.log` "
"було додано необов’язковий аргумент *base*, щоб полегшити обчислення "
"логарифмів для основ, відмінних від ``e`` і ``10``. (Надав Реймонд "
"Геттінгер.)"

#: ../../whatsnew/2.3.rst:1359
msgid ""
"Several new POSIX functions (:func:`getpgid`, :func:`killpg`, "
":func:`lchown`, :func:`loadavg`, :func:`major`, :func:`makedev`, "
":func:`minor`, and :func:`mknod`) were added to the :mod:`posix` module that"
" underlies the :mod:`os` module. (Contributed by Gustavo Niemeyer, Geert "
"Jansen, and Denis S. Otkidach.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1365
msgid ""
"In the :mod:`os` module, the :func:`\\*stat` family of functions can now "
"report fractions of a second in a timestamp.  Such time stamps are "
"represented as floats, similar to the value returned by :func:`time.time`."
msgstr ""

#: ../../whatsnew/2.3.rst:1369
msgid ""
"During testing, it was found that some applications will break if time "
"stamps are floats.  For compatibility, when using the tuple interface of the"
" :class:`stat_result` time stamps will be represented as integers. When "
"using named fields (a feature first introduced in Python 2.2), time stamps "
"are still represented as integers, unless :func:`os.stat_float_times` is "
"invoked to enable float return values::"
msgstr ""

#: ../../whatsnew/2.3.rst:1382
msgid "In Python 2.4, the default will change to always returning floats."
msgstr "在 Python 2.4 中，默认将改为总是返回浮点数。"

#: ../../whatsnew/2.3.rst:1384
msgid ""
"Application developers should enable this feature only if all their "
"libraries work properly when confronted with floating point time stamps, or "
"if they use the tuple API. If used, the feature should be activated on an "
"application level instead of trying to enable it on a per-use basis."
msgstr ""
"Розробникам програм слід увімкнути цю функцію, лише якщо всі їхні бібліотеки"
" працюють належним чином, коли вони стикаються з мітками часу з плаваючою "
"комою, або якщо вони використовують API кортежу. У разі використання цю "
"функцію слід активувати на рівні програми, а не намагатися ввімкнути її для "
"кожного окремого використання."

#: ../../whatsnew/2.3.rst:1389
msgid ""
"The :mod:`optparse` module contains a new parser for command-line arguments "
"that can convert option values to a particular Python type  and will "
"automatically generate a usage message.  See the following section for  more"
" details."
msgstr ""
"Модуль :mod:`optparse` містить новий синтаксичний аналізатор аргументів "
"командного рядка, який може конвертувати значення параметрів у певний тип "
"Python і автоматично генеруватиме повідомлення про використання. Перегляньте"
" наступний розділ для отримання додаткової інформації."

#: ../../whatsnew/2.3.rst:1394
msgid ""
"The old and never-documented :mod:`linuxaudiodev` module has been "
"deprecated, and a new version named :mod:`ossaudiodev` has been added.  The "
"module was renamed because the OSS sound drivers can be used on platforms "
"other than Linux, and the interface has also been tidied and brought up to "
"date in various ways. (Contributed by Greg Ward and Nicholas FitzRoy-Dale.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1400
msgid ""
"The new :mod:`platform` module contains a number of functions that try to "
"determine various properties of the platform you're running on.  There are "
"functions for getting the architecture, CPU type, the Windows OS version, "
"and even the Linux distribution version. (Contributed by Marc-André "
"Lemburg.)"
msgstr ""
"Новий модуль :mod:`platform` містить ряд функцій, які намагаються визначити "
"різні властивості платформи, на якій ви працюєте. Є функції для отримання "
"архітектури, типу ЦП, версії ОС Windows і навіть версії дистрибутива Linux. "
"(Надав Марк-Андре Лембург.)"

#: ../../whatsnew/2.3.rst:1405
msgid ""
"The parser objects provided by the :mod:`pyexpat` module can now optionally "
"buffer character data, resulting in fewer calls to your character data "
"handler and therefore faster performance.  Setting the parser object's "
":attr:`buffer_text` attribute to :const:`True` will enable buffering."
msgstr ""

#: ../../whatsnew/2.3.rst:1410
msgid ""
"The ``sample(population, k)`` function was added to the :mod:`random` "
"module.  *population* is a sequence or :class:`xrange` object containing the"
" elements of a population, and :func:`sample` chooses *k* elements from the "
"population without replacing chosen elements.  *k* can be any value up to "
"``len(population)``. For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1432
msgid ""
"The :mod:`random` module now uses a new algorithm, the Mersenne Twister, "
"implemented in C.  It's faster and more extensively studied than the "
"previous algorithm."
msgstr "现在 :mod:`random` 模块使用新的“梅森旋转”算法，并以 C 实现。 它的速度更快并且与之前的算法相比研究更充分。"

#: ../../whatsnew/2.3.rst:1436
msgid "(All changes contributed by Raymond Hettinger.)"
msgstr "（所有改变均由 Raymond Hettinger 贡献。）"

#: ../../whatsnew/2.3.rst:1438
msgid ""
"The :mod:`readline` module also gained a number of new functions: "
":func:`get_history_item`, :func:`get_current_history_length`, and "
":func:`redisplay`."
msgstr ""

#: ../../whatsnew/2.3.rst:1442
msgid ""
"The :mod:`rexec` and :mod:`Bastion` modules have been declared dead, and "
"attempts to import them will fail with a :exc:`RuntimeError`.  New-style "
"classes provide new ways to break out of the restricted execution "
"environment provided by :mod:`rexec`, and no one has interest in fixing them"
" or time to do so.  If you have applications using :mod:`rexec`, rewrite "
"them to use something else."
msgstr ""

#: ../../whatsnew/2.3.rst:1448
msgid ""
"(Sticking with Python 2.2 or 2.1 will not make your applications any safer "
"because there are known bugs in the :mod:`rexec` module in those versions.  "
"To repeat: if you're using :mod:`rexec`, stop using it immediately.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1452
msgid ""
"The :mod:`rotor` module has been deprecated because the  algorithm it uses "
"for encryption is not believed to be secure.  If you need encryption, use "
"one of the several AES Python modules that are available separately."
msgstr ""

#: ../../whatsnew/2.3.rst:1456
msgid ""
"The :mod:`shutil` module gained a ``move(src, dest)`` function that "
"recursively moves a file or directory to a new location."
msgstr ""
"Модуль :mod:`shutil` отримав функцію ``move(src, dest)``, яка рекурсивно "
"переміщує файл або каталог до нового розташування."

#: ../../whatsnew/2.3.rst:1459
msgid ""
"Support for more advanced POSIX signal handling was added to the "
":mod:`signal` but then removed again as it proved impossible to make it work"
" reliably across platforms."
msgstr ""
"Підтримку вдосконаленої обробки сигналів POSIX було додано до :mod:`signal`,"
" але потім знову вилучено, оскільки виявилося неможливим забезпечити його "
"надійну роботу на різних платформах."

#: ../../whatsnew/2.3.rst:1463
msgid ""
"The :mod:`socket` module now supports timeouts.  You can call the "
"``settimeout(t)`` method on a socket object to set a timeout of *t* seconds."
" Subsequent socket operations that take longer than *t* seconds to complete "
"will abort and raise a :exc:`socket.timeout` exception."
msgstr ""
"Модуль :mod:`socket` тепер підтримує тайм-аути. Ви можете викликати метод "
"``settimeout(t)`` для об’єкта сокета, щоб встановити час очікування *t* "
"секунд. Подальші операції з сокетом, які тривають більше *t* секунд, "
"перериваються та викликають виняток :exc:`socket.timeout`."

#: ../../whatsnew/2.3.rst:1468
msgid ""
"The original timeout implementation was by Tim O'Malley.  Michael Gilfix "
"integrated it into the Python :mod:`socket` module and shepherded it through"
" a lengthy review.  After the code was checked in, Guido van Rossum rewrote "
"parts of it.  (This is a good example of a collaborative development process"
" in action.)"
msgstr ""
"Оригінальна реалізація тайм-ауту була створена Тімом О'Меллі. Майкл Гілфікс "
"інтегрував його в модуль Python :mod:`socket` і перевірив його через довгий "
"огляд. Після перевірки коду Гвідо ван Россум переписав його частини. (Це "
"хороший приклад процесу спільної розробки в дії.)"

#: ../../whatsnew/2.3.rst:1474
msgid ""
"On Windows, the :mod:`socket` module now ships with Secure  Sockets Layer "
"(SSL) support."
msgstr "在 Windows，:mod:`socket` 模块现在将附带安全套接字层（SSL）支持。"

#: ../../whatsnew/2.3.rst:1477
msgid ""
"The value of the C :const:`PYTHON_API_VERSION` macro is now exposed at the "
"Python level as ``sys.api_version``.  The current exception can be cleared "
"by calling the new :func:`sys.exc_clear` function."
msgstr ""
"现在 C :const:`PYTHON_API_VERSION` 宏的值将在 Python 层级上暴露为 ``sys.api_version``。 "
"当前的异常可通过调用新的 :func:`sys.exc_clear` 函数来清除。"

#: ../../whatsnew/2.3.rst:1481
msgid ""
"The new :mod:`tarfile` module  allows reading from and writing to "
":program:`tar`\\ -format archive files. (Contributed by Lars Gustäbel.)"
msgstr ""
"Новий модуль :mod:`tarfile` дозволяє читати та записувати в архівні файли у "
"форматі :program:`tar`\\. (Надав Ларс Густебель.)"

#: ../../whatsnew/2.3.rst:1484
msgid ""
"The new :mod:`textwrap` module contains functions for wrapping strings "
"containing paragraphs of text.  The ``wrap(text, width)`` function takes a "
"string and returns a list containing the text split into lines of no more "
"than the chosen width.  The ``fill(text, width)`` function returns a single "
"string, reformatted to fit into lines no longer than the chosen width. (As "
"you can guess, :func:`fill` is built on top of :func:`wrap`.  For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1506
msgid ""
"The module also contains a :class:`TextWrapper` class that actually "
"implements the text wrapping strategy.   Both the :class:`TextWrapper` class"
" and the :func:`wrap` and :func:`fill` functions support a number of "
"additional keyword arguments for fine-tuning the formatting; consult the "
"module's documentation for details. (Contributed by Greg Ward.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1512
msgid ""
"The :mod:`thread` and :mod:`threading` modules now have companion modules, "
":mod:`dummy_thread` and :mod:`dummy_threading`, that provide a do-nothing "
"implementation of the :mod:`thread` module's interface for platforms where "
"threads are not supported.  The intention is to simplify thread-aware "
"modules (ones that *don't* rely on threads to run) by putting the following "
"code at the top::"
msgstr ""

#: ../../whatsnew/2.3.rst:1524
msgid ""
"In this example, :mod:`_threading` is used as the module name to make it "
"clear that the module being used is not necessarily the actual "
":mod:`threading` module. Code can call functions and use classes in "
":mod:`_threading` whether or not threads are supported, avoiding an "
":keyword:`if` statement and making the code slightly clearer.  This module "
"will not magically make multithreaded code run without threads; code that "
"waits for another thread to return or to do something will simply hang "
"forever."
msgstr ""

#: ../../whatsnew/2.3.rst:1532
msgid ""
"The :mod:`time` module's :func:`strptime` function has long been an "
"annoyance because it uses the platform C library's :func:`strptime` "
"implementation, and different platforms sometimes have odd bugs.  Brett "
"Cannon contributed a portable implementation that's written in pure Python "
"and should behave identically on all platforms."
msgstr ""

#: ../../whatsnew/2.3.rst:1538
msgid ""
"The new :mod:`timeit` module helps measure how long snippets of Python code "
"take to execute.  The :file:`timeit.py` file can be run directly from the "
"command line, or the module's :class:`Timer` class can be imported and used "
"directly.  Here's a short example that figures out whether it's faster to "
"convert an 8-bit string to Unicode by appending an empty Unicode string to "
"it or by using the :func:`unicode` function::"
msgstr ""

#: ../../whatsnew/2.3.rst:1558
msgid ""
"The :mod:`Tix` module has received various bug fixes and updates for the "
"current version of the Tix package."
msgstr ""
"Модуль :mod:`Tix` отримав різні виправлення помилок і оновлення для поточної"
" версії пакета Tix."

#: ../../whatsnew/2.3.rst:1561
msgid ""
"The :mod:`Tkinter` module now works with a thread-enabled  version of Tcl. "
"Tcl's threading model requires that widgets only be accessed from the thread"
" in which they're created; accesses from another thread can cause Tcl to "
"panic.  For certain Tcl interfaces, :mod:`Tkinter` will now automatically "
"avoid this  when a widget is accessed from a different thread by marshalling"
" a command, passing it to the correct thread, and waiting for the results.  "
"Other interfaces can't be handled automatically but :mod:`Tkinter` will now "
"raise an exception on such an access so that you can at least find out about"
" the problem.  See https://mail.python.org/pipermail/python-"
"dev/2002-December/031107.html for a more detailed explanation of this "
"change.  (Implemented by Martin von Löwis.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1572
msgid ""
"Calling Tcl methods through :mod:`_tkinter` no longer  returns only strings."
" Instead, if Tcl returns other objects those objects are converted to their "
"Python equivalent, if one exists, or wrapped with a "
":class:`_tkinter.Tcl_Obj` object if no Python equivalent exists. This "
"behavior can be controlled through the :meth:`wantobjects` method of "
":class:`tkapp` objects."
msgstr ""

#: ../../whatsnew/2.3.rst:1578
msgid ""
"When using :mod:`_tkinter` through the :mod:`Tkinter` module (as most "
"Tkinter applications will), this feature is always activated. It should not "
"cause compatibility problems, since Tkinter would always convert string "
"results to Python types where possible."
msgstr ""

#: ../../whatsnew/2.3.rst:1583
msgid ""
"If any incompatibilities are found, the old behavior can be restored by "
"setting the :attr:`wantobjects` variable in the :mod:`Tkinter` module to "
"false before creating the first :class:`tkapp` object. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1590
msgid "Any breakage caused by this change should be reported as a bug."
msgstr "Будь-яку поломку, спричинену цією зміною, слід повідомити як помилку."

#: ../../whatsnew/2.3.rst:1592
msgid ""
"The :mod:`UserDict` module has a new :class:`DictMixin` class which defines "
"all dictionary methods for classes that already have a minimum mapping "
"interface.  This greatly simplifies writing classes that need to be "
"substitutable for dictionaries, such as the classes in  the :mod:`shelve` "
"module."
msgstr ""

#: ../../whatsnew/2.3.rst:1598
msgid ""
"Adding the mix-in as a superclass provides the full dictionary interface "
"whenever the class defines :meth:`__getitem__`, :meth:`__setitem__`, "
":meth:`__delitem__`, and :meth:`keys`. For example::"
msgstr ""

#: ../../whatsnew/2.3.rst:1639
msgid "(Contributed by Raymond Hettinger.)"
msgstr "（由 Raymond Hettinger 贡献。）"

#: ../../whatsnew/2.3.rst:1641
msgid ""
"The DOM implementation in :mod:`xml.dom.minidom` can now generate XML output"
" in a particular encoding by providing an optional encoding argument to the "
":meth:`toxml` and :meth:`toprettyxml` methods of DOM nodes."
msgstr ""

#: ../../whatsnew/2.3.rst:1645
msgid ""
"The :mod:`xmlrpclib` module now supports an XML-RPC extension for handling "
"nil data values such as Python's ``None``.  Nil values are always supported "
"on unmarshalling an XML-RPC response.  To generate requests containing "
"``None``, you must supply a true value for the *allow_none* parameter when "
"creating a :class:`Marshaller` instance."
msgstr ""

#: ../../whatsnew/2.3.rst:1651
msgid ""
"The new :mod:`DocXMLRPCServer` module allows writing self-documenting XML-"
"RPC servers. Run it in demo mode (as a program) to see it in action.   "
"Pointing the web browser to the RPC server produces pydoc-style "
"documentation; pointing xmlrpclib to the server allows invoking the actual "
"methods. (Contributed by Brian Quinlan.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1657
msgid ""
"Support for internationalized domain names (RFCs 3454, 3490, 3491, and 3492)"
" has been added. The \"idna\" encoding can be used to convert between a "
"Unicode domain name and the ASCII-compatible encoding (ACE) of that name. ::"
msgstr ""
"Додано підтримку інтернаціоналізованих доменних імен (RFC 3454, 3490, 3491 і"
" 3492). Кодування \"idna\" можна використовувати для перетворення між "
"доменним іменем Unicode і ASCII-сумісним кодуванням (ACE) цього імені. ::"

#: ../../whatsnew/2.3.rst:1664
msgid ""
"The :mod:`socket` module has also been extended to transparently convert "
"Unicode hostnames to the ACE version before passing them to the C library. "
"Modules that deal with hostnames such as :mod:`httplib` and :mod:`ftplib`) "
"also support Unicode host names; :mod:`httplib` also sends HTTP ``Host`` "
"headers using the ACE version of the domain name.  :mod:`urllib` supports "
"Unicode URLs with non-ASCII host names as long as the ``path`` part of the "
"URL is ASCII only."
msgstr ""

#: ../../whatsnew/2.3.rst:1672
msgid ""
"To implement this change, the :mod:`stringprep` module, the  "
"``mkstringprep`` tool and the ``punycode`` encoding have been added."
msgstr ""
"为实现此项更改，增加了 :mod:`stringprep` 模块，``mkstringprep`` 工具以及 ``punycode`` 编码格式。"

#: ../../whatsnew/2.3.rst:1679
msgid "Date/Time Type"
msgstr "Date/Time 类型"

#: ../../whatsnew/2.3.rst:1681
msgid ""
"Date and time types suitable for expressing timestamps were added as the "
":mod:`datetime` module.  The types don't support different calendars or many"
" fancy features, and just stick to the basics of representing time."
msgstr ""
"通过 :mod:`datetime` 模块增加了适用于表示时间戳的日期和时间类型。 这些类型并不支持其他的历法或很多丰富的特性，只专注于简单地表示时间。"

#: ../../whatsnew/2.3.rst:1685
msgid ""
"The three primary types are: :class:`date`, representing a day, month, and "
"year; :class:`~datetime.time`, consisting of hour, minute, and second; and "
":class:`~datetime.datetime`, which contains all the attributes of both "
":class:`date` and :class:`~datetime.time`. There's also a :class:`timedelta`"
" class representing differences between two points in time, and time zone "
"logic is implemented by classes inheriting from the abstract :class:`tzinfo`"
" class."
msgstr ""

#: ../../whatsnew/2.3.rst:1692
msgid ""
"You can create instances of :class:`date` and :class:`~datetime.time` by "
"either supplying keyword arguments to the appropriate constructor, e.g. "
"``datetime.date(year=1972, month=10, day=15)``, or by using one of a number "
"of class methods.  For example, the :meth:`date.today` class method returns "
"the current local date."
msgstr ""

#: ../../whatsnew/2.3.rst:1698
msgid ""
"Once created, instances of the date/time classes are all immutable. There "
"are a number of methods for producing formatted strings from objects::"
msgstr ""
"Після створення екземпляри класів дати/часу залишаються незмінними. Існує "
"кілька методів створення форматованих рядків з об'єктів:"

#: ../../whatsnew/2.3.rst:1710
msgid ""
"The :meth:`replace` method allows modifying one or more fields  of a "
":class:`date` or :class:`~datetime.datetime` instance, returning a new "
"instance::"
msgstr ""

#: ../../whatsnew/2.3.rst:1720
msgid ""
"Instances can be compared, hashed, and converted to strings (the result is "
"the same as that of :meth:`isoformat`).  :class:`date` and "
":class:`~datetime.datetime` instances can be subtracted from each other, and"
" added to :class:`timedelta` instances.  The largest missing feature is that"
" there's no standard library support for parsing strings and getting back a "
":class:`date` or :class:`~datetime.datetime`."
msgstr ""

#: ../../whatsnew/2.3.rst:1727
msgid ""
"For more information, refer to the module's reference documentation. "
"(Contributed by Tim Peters.)"
msgstr "更多相关信息，请参阅模块的参考文档。 （由 Tim Peters 贡献。）"

#: ../../whatsnew/2.3.rst:1734
msgid "The optparse Module"
msgstr "optparse 模块"

#: ../../whatsnew/2.3.rst:1736
msgid ""
"The :mod:`getopt` module provides simple parsing of command-line arguments."
"  The new :mod:`optparse` module (originally named Optik) provides more "
"elaborate command-line parsing that follows the Unix conventions, "
"automatically creates the output for :option:`!--help`, and can perform "
"different actions for different options."
msgstr ""
"Модуль :mod:`getopt` забезпечує простий аналіз аргументів командного рядка. "
"Новий модуль :mod:`optparse` (початкова назва Optik) забезпечує більш "
"детальний аналіз командного рядка, який відповідає умовам Unix, автоматично "
"створює вихід для :option:`!--help` і може виконувати різні дії для різних "
"параметрів ."

#: ../../whatsnew/2.3.rst:1742
msgid ""
"You start by creating an instance of :class:`OptionParser` and telling it "
"what your program's options are. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1756
msgid ""
"Parsing a command line is then done by calling the :meth:`parse_args` "
"method. ::"
msgstr ""

#: ../../whatsnew/2.3.rst:1762
msgid ""
"This returns an object containing all of the option values, and a list of "
"strings containing the remaining arguments."
msgstr ""
"Це повертає об’єкт, що містить усі значення параметрів, і список рядків, що "
"містять решту аргументів."

#: ../../whatsnew/2.3.rst:1765
msgid ""
"Invoking the script with the various arguments now works as you'd expect it "
"to. Note that the length argument is automatically converted to an integer."
msgstr ""
"Виклик сценарію з різними аргументами тепер працює так, як ви очікували. "
"Зауважте, що аргумент довжини автоматично перетворюється на ціле число."

#: ../../whatsnew/2.3.rst:1778
msgid "The help message is automatically generated for you:"
msgstr "Довідкове повідомлення генерується для вас автоматично:"

#: ../../whatsnew/2.3.rst:1793
msgid "See the module's documentation for more details."
msgstr "有关更多详细信息，请参见模块的文档。"

#: ../../whatsnew/2.3.rst:1796
msgid ""
"Optik was written by Greg Ward, with suggestions from the readers of the "
"Getopt SIG."
msgstr "Optik був написаний Грегом Уордом із пропозиціями читачів Getopt SIG."

#: ../../whatsnew/2.3.rst:1805
msgid "Pymalloc: A Specialized Object Allocator"
msgstr "Pymalloc: спеціалізований розподільник об’єктів"

#: ../../whatsnew/2.3.rst:1807
msgid ""
"Pymalloc, a specialized object allocator written by Vladimir Marangozov, was"
" a feature added to Python 2.1.  Pymalloc is intended to be faster than the "
"system :c:func:`malloc` and to have less memory overhead for allocation "
"patterns typical of Python programs. The allocator uses C's :c:func:`malloc`"
" function to get large pools of memory and then fulfills smaller memory "
"requests from these pools."
msgstr ""
"Pymalloc, спеціалізований розподільник об’єктів, написаний Володимиром "
"Марангозовим, був функцією, доданою до Python 2.1. Pymalloc має бути швидшим"
" за системний :c:func:`malloc` і мати менше витрат пам’яті для шаблонів "
"розподілу, типових для програм Python. Розподільник використовує функцію C "
":c:func:`malloc`, щоб отримати великі пули пам’яті, а потім виконує менші "
"запити пам’яті з цих пулів."

#: ../../whatsnew/2.3.rst:1813
msgid ""
"In 2.1 and 2.2, pymalloc was an experimental feature and wasn't enabled by "
"default; you had to explicitly enable it when compiling Python by providing "
"the :option:`!--with-pymalloc` option to the :program:`configure` script.  "
"In 2.3, pymalloc has had further enhancements and is now enabled by default;"
" you'll have to supply :option:`!--without-pymalloc` to disable it."
msgstr ""
"У версіях 2.1 і 2.2 pymalloc був експериментальною функцією і не був "
"увімкнений за замовчуванням; ви повинні були явно ввімкнути його під час "
"компіляції Python, надавши опцію :option:`!--with-pymalloc` сценарію "
":program:`configure`. У версії 2.3 pymalloc отримав додаткові вдосконалення,"
" і тепер він увімкнено за замовчуванням; вам доведеться вказати :option:`!--"
"without-pymalloc`, щоб вимкнути його."

#: ../../whatsnew/2.3.rst:1819
msgid ""
"This change is transparent to code written in Python; however, pymalloc may "
"expose bugs in C extensions.  Authors of C extension modules should test "
"their code with pymalloc enabled, because some incorrect code may cause core"
" dumps at runtime."
msgstr ""
"Ця зміна прозора для коду, написаного на Python; однак pymalloc може виявити"
" помилки в розширеннях C. Автори модулів розширення C повинні протестувати "
"свій код із увімкненим pymalloc, оскільки деякий неправильний код може "
"спричинити дамп ядра під час виконання."

#: ../../whatsnew/2.3.rst:1824
msgid ""
"There's one particularly common error that causes problems.  There are a "
"number of memory allocation functions in Python's C API that have previously"
" just been aliases for the C library's :c:func:`malloc` and :c:func:`free`, "
"meaning that if you accidentally called mismatched functions the error "
"wouldn't be noticeable. When the object allocator is enabled, these "
"functions aren't aliases of :c:func:`malloc` and :c:func:`free` any more, "
"and calling the wrong function to free memory may get you a core dump.  For "
"example, if memory was allocated using :c:func:`PyObject_Malloc`, it has to "
"be freed using :c:func:`PyObject_Free`, not :c:func:`free`.  A few modules "
"included with Python fell afoul of this and had to be fixed; doubtless there"
" are more third-party modules that will have the same problem."
msgstr ""
"Є одна особливо поширена помилка, яка викликає проблеми. В API C Python є "
"кілька функцій розподілу пам’яті, які раніше були лише псевдонімами "
":c:func:`malloc` і :c:func:`free` бібліотеки C, тобто якщо ви випадково "
"викликали невідповідні функції, помилка не було б помітно. Коли розподільник"
" об’єктів увімкнено, ці функції більше не є псевдонімами :c:func:`malloc` і "
":c:func:`free`, і виклик неправильної функції для звільнення пам’яті може "
"призвести до створення дампа ядра. Наприклад, якщо пам’ять було виділено за "
"допомогою :c:func:`PyObject_Malloc`, її потрібно звільнити за допомогою "
":c:func:`PyObject_Free`, а не :c:func:`free`. Кілька модулів, що входять до "
"складу Python, вийшли з ладу, і їх потрібно було виправити; безсумнівно, є "
"інші сторонні модулі, які матимуть таку саму проблему."

#: ../../whatsnew/2.3.rst:1836
msgid ""
"As part of this change, the confusing multiple interfaces for allocating "
"memory have been consolidated down into two API families. Memory allocated "
"with one family must not be manipulated with functions from the other "
"family.  There is one family for allocating chunks of memory and another "
"family of functions specifically for allocating Python objects."
msgstr ""
"У рамках цієї зміни незрозумілі кілька інтерфейсів для розподілу пам’яті "
"були об’єднані у дві сімейства API. Пам'яттю, виділеною для одного "
"сімейства, не можна маніпулювати функціями з іншого сімейства. Існує одне "
"сімейство для розподілу фрагментів пам’яті та інше сімейство функцій "
"спеціально для розподілу об’єктів Python."

#: ../../whatsnew/2.3.rst:1842
msgid ""
"To allocate and free an undistinguished chunk of memory use the \"raw "
"memory\" family: :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and "
":c:func:`PyMem_Free`."
msgstr ""
"Щоб виділити та звільнити нерозрізнену частину пам’яті, використовуйте "
"сімейство \"необробленої пам’яті\": :c:func:`PyMem_Malloc`, "
":c:func:`PyMem_Realloc` і :c:func:`PyMem_Free`."

#: ../../whatsnew/2.3.rst:1845
msgid ""
"The \"object memory\" family is the interface to the pymalloc facility "
"described above and is biased towards a large number of \"small\" "
"allocations: :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc`, and "
":c:func:`PyObject_Free`."
msgstr ""
"Сімейство \"об’єктної пам’яті\" є інтерфейсом до описаного вище засобу "
"pymalloc і спрямоване на велику кількість \"маленьких\" розподілів: "
":c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` і "
":c:func:`PyObject_Free`."

#: ../../whatsnew/2.3.rst:1849
msgid ""
"To allocate and free Python objects, use the \"object\" family "
":c:func:`PyObject_New`, :c:func:`PyObject_NewVar`, and "
":c:func:`PyObject_Del`."
msgstr ""

#: ../../whatsnew/2.3.rst:1852
msgid ""
"Thanks to lots of work by Tim Peters, pymalloc in 2.3 also provides "
"debugging features to catch memory overwrites and doubled frees in both "
"extension modules and in the interpreter itself.  To enable this support, "
"compile a debugging version of the Python interpreter by running "
":program:`configure` with :option:`!--with-pydebug`."
msgstr ""
"Завдяки великій роботі Тіма Пітерса, pymalloc у версії 2.3 також надає "
"функції налагодження для виявлення перезапису пам’яті та подвійного "
"звільнення в обох модулях розширення та в самому інтерпретаторі. Щоб "
"увімкнути цю підтримку, скомпілюйте версію інтерпретатора Python для "
"налагодження, запустивши :program:`configure` з :option:`!--with-pydebug`."

#: ../../whatsnew/2.3.rst:1858
msgid ""
"To aid extension writers, a header file :file:`Misc/pymemcompat.h` is "
"distributed with the source to Python 2.3 that allows Python extensions to "
"use the 2.3 interfaces to memory allocation while compiling against any "
"version of Python since 1.5.2.  You would copy the file from Python's source"
" distribution and bundle it with the source of your extension."
msgstr ""
"Щоб допомогти розробникам розширень, файл заголовка "
":file:`Misc/pymemcompat.h` поширюється разом із джерелом для Python 2.3, "
"який дозволяє розширенням Python використовувати інтерфейси 2.3 для "
"розподілу пам’яті під час компіляції з будь-якою версією Python, починаючи з"
" 1.5.2. Ви повинні скопіювати файл із вихідного коду Python і об’єднати його"
" з джерелом вашого розширення."

#: ../../whatsnew/2.3.rst:1869
msgid "https://hg.python.org/cpython/file/default/Objects/obmalloc.c"
msgstr "https://hg.python.org/cpython/file/default/Objects/obmalloc.c"

#: ../../whatsnew/2.3.rst:1868
msgid ""
"For the full details of the pymalloc implementation, see the comments at the"
" top of the file :file:`Objects/obmalloc.c` in the Python source code. The "
"above link points to the file within the python.org SVN browser."
msgstr ""
"Щоб отримати повну інформацію про реалізацію pymalloc, перегляньте коментарі"
" у верхній частині файлу :file:`Objects/obmalloc.c` у вихідному коді Python."
" Наведене вище посилання вказує на файл у браузері python.org SVN."

#: ../../whatsnew/2.3.rst:1876
msgid "Build and C API Changes"
msgstr "构建和 C API 的改变"

#: ../../whatsnew/2.3.rst:1878
msgid "Changes to Python's build process and to the C API include:"
msgstr "针对 Python 构建过程和 C API 的改变包括:"

#: ../../whatsnew/2.3.rst:1880
msgid ""
"The cycle detection implementation used by the garbage collection has proven"
" to be stable, so it's now been made mandatory.  You can no longer compile "
"Python without it, and the :option:`!--with-cycle-gc` switch to "
":program:`configure` has been removed."
msgstr ""
"Реалізація виявлення циклу, яка використовується для збирання сміття, "
"виявилася стабільною, тому тепер вона стала обов’язковою. Ви більше не "
"можете скомпілювати Python без нього, а перемикач :option:`!--with-cycle-gc`"
" на :program:`configure` видалено."

#: ../../whatsnew/2.3.rst:1885
msgid ""
"Python can now optionally be built as a shared library "
"(:file:`libpython2.3.so`) by supplying :option:`!--enable-shared` when "
"running Python's :program:`configure` script.  (Contributed by Ondrej "
"Palkovsky.)"
msgstr ""
"Python тепер можна опціонально створити як спільну бібліотеку "
"(:file:`libpython2.3.so`), вказавши :option:`!--enable-shared` під час "
"виконання сценарію :program:`configure` Python. (Надав Ондрей Палковський.)"

#: ../../whatsnew/2.3.rst:1889
msgid ""
"The :c:macro:`DL_EXPORT` and :c:macro:`DL_IMPORT` macros are now deprecated."
" Initialization functions for Python extension modules should now be "
"declared using the new macro :c:macro:`PyMODINIT_FUNC`, while the Python "
"core will generally use the :c:macro:`PyAPI_FUNC` and :c:macro:`PyAPI_DATA` "
"macros."
msgstr ""

#: ../../whatsnew/2.3.rst:1894
msgid ""
"The interpreter can be compiled without any docstrings for the built-in "
"functions and modules by supplying :option:`!--without-doc-strings` to the "
":program:`configure` script. This makes the Python executable about 10% "
"smaller, but will also mean that you can't get help for Python's built-ins."
"  (Contributed by Gustavo Niemeyer.)"
msgstr ""
"Інтерпретатор може бути скомпільований без будь-яких рядків документації для"
" вбудованих функцій і модулів, надаючи :option:`!--without-doc-strings` до "
"сценарію :program:`configure`. Це робить виконуваний файл Python приблизно "
"на 10% меншим, але також означатиме, що ви не зможете отримати допомогу для "
"вбудованих компонентів Python. (Надав Густаво Німейєр.)"

#: ../../whatsnew/2.3.rst:1900
msgid ""
"The :c:func:`PyArg_NoArgs` macro is now deprecated, and code that uses it "
"should be changed.  For Python 2.2 and later, the method definition table "
"can specify the :const:`METH_NOARGS` flag, signalling that there are no "
"arguments, and the argument checking can then be removed.  If compatibility "
"with pre-2.2 versions of Python is important, the code could use "
"``PyArg_ParseTuple(args, \"\")`` instead, but this will be slower than using"
" :const:`METH_NOARGS`."
msgstr ""

#: ../../whatsnew/2.3.rst:1907
msgid ""
":c:func:`PyArg_ParseTuple` accepts new format characters for various sizes "
"of unsigned integers: ``B`` for :c:expr:`unsigned char`, ``H`` for "
":c:expr:`unsigned short int`,  ``I`` for :c:expr:`unsigned int`,  and ``K`` "
"for :c:expr:`unsigned long long`."
msgstr ""

#: ../../whatsnew/2.3.rst:1912
msgid ""
"A new function, ``PyObject_DelItemString(mapping, char *key)`` was added as "
"shorthand for ``PyObject_DelItem(mapping, PyString_New(key))``."
msgstr ""
"Нову функцію ``PyObject_DelItemString(mapping, char *key)`` було додано як "
"скорочення для ``PyObject_DelItem(mapping, PyString_New(key))``."

#: ../../whatsnew/2.3.rst:1915
msgid ""
"File objects now manage their internal string buffer differently, increasing"
" it exponentially when needed.  This results in the benchmark tests in "
":file:`Lib/test/test_bufio.py` speeding up considerably (from 57 seconds to "
"1.7 seconds, according to one measurement)."
msgstr ""
"Файлові об’єкти тепер керують своїм внутрішнім рядковим буфером по-іншому, "
"збільшуючи його експоненціально за потреби. Це призводить до значного "
"прискорення тестів у :file:`Lib/test/test_bufio.py` (з 57 секунд до 1,7 "
"секунд, згідно з одним вимірюванням)."

#: ../../whatsnew/2.3.rst:1920
msgid ""
"It's now possible to define class and static methods for a C extension type "
"by setting either the :const:`METH_CLASS` or :const:`METH_STATIC` flags in a"
" method's :c:type:`PyMethodDef` structure."
msgstr ""

#: ../../whatsnew/2.3.rst:1924
msgid ""
"Python now includes a copy of the Expat XML parser's source code, removing "
"any dependence on a system version or local installation of Expat."
msgstr ""
"Python тепер містить копію вихідного коду синтаксичного аналізатора Expat "
"XML, усуваючи будь-яку залежність від версії системи або локальної "
"інсталяції Expat."

#: ../../whatsnew/2.3.rst:1927
msgid ""
"If you dynamically allocate type objects in your extension, you should be "
"aware of a change in the rules relating to the :attr:`__module__` and "
":attr:`~definition.__name__` attributes.  In summary, you will want to "
"ensure the type's dictionary contains a ``'__module__'`` key; making the "
"module name the part of the type name leading up to the final period will no"
" longer have the desired effect.  For more detail, read the API reference "
"documentation or the  source."
msgstr ""

#: ../../whatsnew/2.3.rst:1938
msgid "Port-Specific Changes"
msgstr "移植专属的改变"

#: ../../whatsnew/2.3.rst:1940
msgid ""
"Support for a port to IBM's OS/2 using the EMX runtime environment was "
"merged into the main Python source tree.  EMX is a POSIX emulation layer "
"over the OS/2 system APIs.  The Python port for EMX tries to support all the"
" POSIX-like capability exposed by the EMX runtime, and mostly succeeds; "
":func:`fork` and :func:`fcntl` are restricted by the limitations of the "
"underlying emulation layer.  The standard OS/2 port, which uses IBM's Visual"
" Age compiler, also gained support for case-sensitive import semantics as "
"part of the integration of the EMX port into CVS.  (Contributed by Andrew "
"MacIntyre.)"
msgstr ""

#: ../../whatsnew/2.3.rst:1949
msgid ""
"On MacOS, most toolbox modules have been weaklinked to improve backward "
"compatibility.  This means that modules will no longer fail to load if a "
"single routine is missing on the current OS version. Instead calling the "
"missing routine will raise an exception. (Contributed by Jack Jansen.)"
msgstr ""
"У MacOS більшість модулів панелі інструментів були слабко зв’язані, щоб "
"покращити зворотну сумісність. Це означає, що модулі більше не будуть "
"завантажуватися, якщо в поточній версії ОС відсутня одна процедура. "
"Натомість виклик відсутньої підпрограми призведе до виключення. (Надав Джек "
"Янсен.)"

#: ../../whatsnew/2.3.rst:1954
msgid ""
"The RPM spec files, found in the :file:`Misc/RPM/` directory in the Python "
"source distribution, were updated for 2.3.  (Contributed by Sean "
"Reifschneider.)"
msgstr ""
"Файли специфікацій RPM, знайдені в каталозі :file:`Misc/RPM/` вихідного коду"
" Python, було оновлено до версії 2.3. (Надав Шон Райфшнайдер.)"

#: ../../whatsnew/2.3.rst:1957
msgid ""
"Other new platforms now supported by Python include AtheOS "
"(http://www.atheos.cx/), GNU/Hurd, and OpenVMS."
msgstr ""
"Інші нові платформи, які зараз підтримуються Python, включають AtheOS "
"(http://www.atheos.cx/), GNU/Hurd і OpenVMS."

#: ../../whatsnew/2.3.rst:1966
msgid "Other Changes and Fixes"
msgstr "其他的改变和修正"

#: ../../whatsnew/2.3.rst:1968
msgid ""
"As usual, there were a bunch of other improvements and bugfixes scattered "
"throughout the source tree.  A search through the CVS change logs finds "
"there were 523 patches applied and 514 bugs fixed between Python 2.2 and "
"2.3.  Both figures are likely to be underestimates."
msgstr ""
"Як завжди, була купа інших покращень і виправлень помилок, розкиданих по "
"дереву вихідних кодів. Пошук у журналах змін CVS виявив, що між Python 2.2 і"
" 2.3 було застосовано 523 виправлення та 514 виправлених помилок. Обидві "
"цифри, ймовірно, занижені."

#: ../../whatsnew/2.3.rst:1973
msgid "Some of the more notable changes are:"
msgstr "一些较为重要的改变:"

#: ../../whatsnew/2.3.rst:1975
msgid ""
"If the :envvar:`PYTHONINSPECT` environment variable is set, the Python "
"interpreter will enter the interactive prompt after running a Python "
"program, as if Python had been invoked with the :option:`-i` option. The "
"environment variable can be set before running the Python interpreter, or it"
" can be set by the Python program as part of its execution."
msgstr ""
"Якщо встановлено змінну середовища :envvar:`PYTHONINSPECT`, інтерпретатор "
"Python увійде в інтерактивну підказку після запуску програми Python, як якщо"
" б Python було викликано з параметром :option:`-i`. Змінну середовища можна "
"встановити перед запуском інтерпретатора Python або її можна встановити "
"програмою Python як частину її виконання."

#: ../../whatsnew/2.3.rst:1981
msgid ""
"The :file:`regrtest.py` script now provides a way to allow \"all resources "
"except *foo*.\"  A resource name passed to the :option:`!-u` option can now "
"be prefixed with a hyphen (``'-'``) to mean \"remove this resource.\"  For "
"example, the option '``-uall,-bsddb``' could be used to enable the use of "
"all resources except ``bsddb``."
msgstr ""
"Сценарій :file:`regrtest.py` тепер надає спосіб дозволити \"всі ресурси, "
"крім *foo*\". Ім’я ресурсу, передане параметру :option:`!-u`, тепер може "
"мати перед префіксом дефіс (``'-'``), що означає \"видалити цей ресурс\". "
"Наприклад, параметр \"``-uall,-bsddb``\" можна використовувати, щоб "
"увімкнути використання всіх ресурсів, крім ``bsddb``."

#: ../../whatsnew/2.3.rst:1987
msgid ""
"The tools used to build the documentation now work under Cygwin as well as "
"Unix."
msgstr ""
"Інструменти, які використовуються для створення документації, тепер працюють"
" як під Cygwin, так і під Unix."

#: ../../whatsnew/2.3.rst:1990
msgid ""
"The ``SET_LINENO`` opcode has been removed.  Back in the mists of time, this"
" opcode was needed to produce line numbers in tracebacks and support trace "
"functions (for, e.g., :mod:`pdb`). Since Python 1.5, the line numbers in "
"tracebacks have been computed using a different mechanism that works with "
"\"python -O\".  For Python 2.3 Michael Hudson implemented a similar scheme "
"to determine when to call the trace function, removing the need for "
"``SET_LINENO`` entirely."
msgstr ""
"Код операції ``SET_LINENO`` видалено. У давнину цей код операції був "
"потрібний для створення номерів рядків у відстеженнях і підтримки функцій "
"відстеження (наприклад, для :mod:`pdb`). Починаючи з Python 1.5, номери "
"рядків у трасуваннях обчислюються за допомогою іншого механізму, який працює"
" з \"python -O\". Для Python 2.3 Майкл Хадсон реалізував подібну схему, щоб "
"визначити, коли викликати функцію трасування, повністю усунувши потребу в "
"``SET_LINENO``."

#: ../../whatsnew/2.3.rst:1998
msgid ""
"It would be difficult to detect any resulting difference from Python code, "
"apart from a slight speed up when Python is run without :option:`-O`."
msgstr ""
"Було б важко виявити будь-яку результуючу відмінність від коду Python, окрім"
" невеликого прискорення, коли Python запускається без :option:`-O`."

#: ../../whatsnew/2.3.rst:2001
msgid ""
"C extensions that access the :attr:`f_lineno` field of frame objects should "
"instead call ``PyCode_Addr2Line(f->f_code, f->f_lasti)``. This will have the"
" added effect of making the code work as desired under \"python -O\" in "
"earlier versions of Python."
msgstr ""

#: ../../whatsnew/2.3.rst:2006
msgid ""
"A nifty new feature is that trace functions can now assign to the "
":attr:`f_lineno` attribute of frame objects, changing the line that will be "
"executed next.  A ``jump`` command has been added to the :mod:`pdb` debugger"
" taking advantage of this new feature. (Implemented by Richie Hindle.)"
msgstr ""

#: ../../whatsnew/2.3.rst:2015
msgid "Porting to Python 2.3"
msgstr "移植到 Python 2.3"

#: ../../whatsnew/2.3.rst:2017
msgid ""
"This section lists previously described changes that may require changes to "
"your code:"
msgstr "本节列出了先前描述的可能需要修改你的代码的改变："

#: ../../whatsnew/2.3.rst:2020
msgid ""
":keyword:`yield` is now always a keyword; if it's used as a variable name in"
" your code, a different name must be chosen."
msgstr "现在 :keyword:`yield` 始终是一个关键字；如果它在你的代码中被用作变量名，则必须选择不同的名称。"

#: ../../whatsnew/2.3.rst:2023
msgid ""
"For strings *X* and *Y*, ``X in Y`` now works if *X* is more than one "
"character long."
msgstr "对于字符串 *X* 和 *Y*，``X in Y`` 现在当 *X* 长度超过一个字符时也是有效的。"

#: ../../whatsnew/2.3.rst:2026
msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer."
msgstr ""
"现在 :func:`int` 类型构造器在字符串或浮点数因太大而无法以整数类型来容纳时将返回一个长整数而不是引发 "
":exc:`OverflowError`。"

#: ../../whatsnew/2.3.rst:2030
msgid ""
"If you have Unicode strings that contain 8-bit characters, you must declare "
"the file's encoding (UTF-8, Latin-1, or whatever) by adding a comment to the"
" top of the file.  See section :ref:`section-encodings` for more "
"information."
msgstr ""
"Якщо у вас є рядки Unicode, які містять 8-бітові символи, ви повинні "
"оголосити кодування файлу (UTF-8, Latin-1 або інше), додавши коментар у "
"верхній частині файлу. Перегляньте розділ :ref:`section-encodings` для "
"отримання додаткової інформації."

#: ../../whatsnew/2.3.rst:2034
msgid ""
"Calling Tcl methods through :mod:`_tkinter` no longer  returns only strings."
" Instead, if Tcl returns other objects those objects are converted to their "
"Python equivalent, if one exists, or wrapped with a "
":class:`_tkinter.Tcl_Obj` object if no Python equivalent exists."
msgstr ""

#: ../../whatsnew/2.3.rst:2039
msgid ""
"Large octal and hex literals such as ``0xffffffff`` now trigger a "
":exc:`FutureWarning`. Currently they're stored as 32-bit numbers and result "
"in a negative value, but in Python 2.4 they'll become positive long "
"integers."
msgstr ""
"Великі вісімкові та шістнадцяткові літерали, такі як ``0xffffffff``, тепер "
"викликають :exc:`FutureWarning`. Наразі вони зберігаються як 32-розрядні "
"числа та отримують від’ємне значення, але в Python 2.4 вони стануть "
"додатними довгими цілими числами."

#: ../../whatsnew/2.3.rst:2043
msgid ""
"There are a few ways to fix this warning.  If you really need a positive "
"number, just add an ``L`` to the end of the literal.  If you're trying to "
"get a 32-bit integer with low bits set and have previously used an "
"expression such as ``~(1 << 31)``, it's probably clearest to start with all "
"bits set and clear the desired upper bits. For example, to clear just the "
"top bit (bit 31), you could write ``0xffffffffL &~(1L<<31)``."
msgstr ""
"Є кілька способів виправити це попередження. Якщо вам справді потрібне "
"позитивне число, просто додайте ``L`` до кінця літералу. Якщо ви намагаєтеся"
" отримати 32-розрядне ціле число з установленими молодшими бітами і раніше "
"використовували такий вираз, як ``~(1 << 31)``, ймовірно, найзрозуміліше "
"почати з усіма встановленими бітами та очистити потрібний верхній біти. "
"Наприклад, щоб очистити лише верхній біт (біт 31), ви можете написати "
"``0xffffffffL &~(1L<<31)``."

#: ../../whatsnew/2.3.rst:2050
msgid "You can no longer disable assertions by assigning to ``__debug__``."
msgstr "Ви більше не можете вимкнути твердження, призначивши ``__debug__``."

#: ../../whatsnew/2.3.rst:2052
msgid ""
"The Distutils :func:`setup` function has gained various new keyword "
"arguments such as *depends*.  Old versions of the Distutils will abort if "
"passed unknown keywords.  A solution is to check for the presence of the new"
" :func:`get_distutil_options` function in your :file:`setup.py` and only "
"uses the new keywords with a version of the Distutils that supports them::"
msgstr ""

#: ../../whatsnew/2.3.rst:2065
msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning."
msgstr ""
"Використання ``None`` як назви змінної тепер призведе до попередження "
":exc:`SyntaxWarning`."

#: ../../whatsnew/2.3.rst:2068
msgid ""
"Names of extension types defined by the modules included with Python now "
"contain the module and a ``'.'`` in front of the type name."
msgstr ""
"Назви типів розширень, визначені модулями, що входять до Python, тепер "
"містять модуль і ``'.'`` перед назвою типу."

#: ../../whatsnew/2.3.rst:2077
msgid "Acknowledgements"
msgstr "致谢"

#: ../../whatsnew/2.3.rst:2079
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article:"
" Jeff Bauer, Simon Brunning, Brett Cannon, Michael Chermside, Andrew Dalke, "
"Scott David Daniels, Fred L. Drake, Jr., David Fraser,  Kelly Gerber, "
"Raymond Hettinger, Michael Hudson, Chris Lambert, Detlef Lannert, Martin von"
" Löwis, Andrew MacIntyre, Lalo Martins, Chad Netzer, Gustavo Niemeyer, Neal "
"Norwitz, Hans Nowak, Chris Reedy, Francesco Ricciardi, Vinay Sajip, Neil "
"Schemenauer, Roman Suzi, Jason Tishler, Just van Rossum."
msgstr ""
"作者感谢以下人员为本文的各种草案提供建议，更正和帮助： Jeff Bauer, Simon Brunning, Brett Cannon, "
"Michael Chermside, Andrew Dalke, Scott David Daniels, Fred L. Drake, Jr., "
"David Fraser,  Kelly Gerber, Raymond Hettinger, Michael Hudson, Chris "
"Lambert, Detlef Lannert, Martin von Löwis, Andrew MacIntyre, Lalo Martins, "
"Chad Netzer, Gustavo Niemeyer, Neal Norwitz, Hans Nowak, Chris Reedy, "
"Francesco Ricciardi, Vinay Sajip, Neil Schemenauer, Roman Suzi, Jason "
"Tishler, Just van Rossum."
