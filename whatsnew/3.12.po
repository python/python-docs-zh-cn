# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Lu <lu2github@gmail.com>, 2023
# sgqy <sgqyzh@gmail.com>, 2023
# jacky <jackylvm@foxmail.com>, 2023
# Makdon <makdon@makdon.me>, 2023
# Yi Cao <1783250036@qq.com>, 2023
# Dai Xu <daixu61@hotmail.com>, 2023
# Kaizhao Zhang <zhangkaizhao@gmail.com>, 2023
# Sefank <sefank@foxmail.com>, 2023
# Bo Wen Cao, 2023
# ppcfish <ppcfish@gmail.com>, 2023
# lqks, 2024
# Wulian233 <xiguawulian@gmail.com>, 2025
# Alpha Du <alphanow@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 汇民 王 <whuim@qq.com>, 2025
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-04 14:20+0000\n"
"PO-Revision-Date: 2023-05-24 13:08+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.12.rst:4
msgid "What's New In Python 3.12"
msgstr "Python 3.12 有什么新变化"

#: ../../whatsnew/3.12.rst:0
msgid "Editor"
msgstr "编者"

#: ../../whatsnew/3.12.rst:6
msgid "Adam Turner"
msgstr "Adam Turner"

#: ../../whatsnew/3.12.rst:48
msgid ""
"This article explains the new features in Python 3.12, compared to 3.11. "
"Python 3.12 was released on October 2, 2023. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""
"本文介绍 Python 3.12 相比 3.11 增加的新特性。 Python 3.12 已于 2023 年 10 月 2 日发布。 "
"要获取详细信息，可参阅 :ref:`changelog <changelog>`。"

#: ../../whatsnew/3.12.rst:54
msgid ":pep:`693` -- Python 3.12 Release Schedule"
msgstr ":pep:`693` -- Python 3.12 发布计划"

#: ../../whatsnew/3.12.rst:57
msgid "Summary -- Release highlights"
msgstr "摘要 -- 发布重点"

#: ../../whatsnew/3.12.rst:62
msgid ""
"Python 3.12 is a stable release of the Python programming language, with a "
"mix of changes to the language and the standard library. The library changes"
" focus on cleaning up deprecated APIs, usability, and correctness. Of note, "
"the :mod:`!distutils` package has been removed from the standard library. "
"Filesystem support in :mod:`os` and :mod:`pathlib` has seen a number of "
"improvements, and several modules have better performance."
msgstr ""
"Python 3.12 是 Python 编程语言的一个稳定发布版，包含一系列对语言和标准库的改变。 库的改变主要集中在清理已弃用的 "
"API、易用性和正确性等方面。 值得注意的是，:mod:`!distutils` 包已从标准库中移除。 :mod:`os` 和 "
":mod:`pathlib` 中的文件系统支持得到了许多改进，一些模块的性能也得到了提升。"

#: ../../whatsnew/3.12.rst:69
msgid ""
"The language changes focus on usability, as :term:`f-strings <f-string>` "
"have had many limitations removed and 'Did you mean ...' suggestions "
"continue to improve. The new :ref:`type parameter syntax "
"<whatsnew312-pep695>` and :keyword:`type` statement improve ergonomics for "
"using :term:`generic types <generic type>` and :term:`type aliases <type "
"alias>` with static type checkers."
msgstr ""
"语言的改变主要集中在可用性方面，如 :term:`f-字符串 <f-string>` 的许多限制已被移除，而 'Did you mean ...' "
"提示消息继续得到改进。 新的 :ref:`类型形参语法 <whatsnew312-pep695>` 和 :keyword:`type` 语句提升了 "
":term:`泛型类型 <generic type>` 和 :term:`类型别名 <type alias>` 配合静态类型检查器使用时的效率。"

#: ../../whatsnew/3.12.rst:76
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead gives a convenient overview. For full details, you "
"should refer to the documentation, such as the  :ref:`Library Reference "
"<library-index>` and :ref:`Language Reference <reference-index>`. If you "
"want to understand the complete implementation and design rationale for a "
"change, refer to the PEP for a particular new feature; but note that PEPs "
"usually are not kept up-to-date once a feature has been fully implemented."
msgstr ""
"本文并不试图提供所有新功能的完整规范说明，而是提供一个方便的概览。 如需了解完整细节，请参阅相应文档，如 :ref:`标准库参考 <library-"
"index>` 和 :ref:`语言参考 <reference-index>`。 如果你想了解某项改变的完整实现和设计理念，请参阅相应新特性的 "
"PEP；但请注意一旦某项特性已完全实现则相应 PEP 通常不会再继续更新。"

#: ../../whatsnew/3.12.rst:90
msgid "New syntax features:"
msgstr "新的语法特性："

#: ../../whatsnew/3.12.rst:92
msgid ""
":ref:`PEP 695 <whatsnew312-pep695>`, type parameter syntax and the "
":keyword:`type` statement"
msgstr ":ref:`PEP 695 <whatsnew312-pep695>`，类型形参语法和 :keyword:`type` 语句"

#: ../../whatsnew/3.12.rst:94
msgid "New grammar features:"
msgstr "新的语法特性："

#: ../../whatsnew/3.12.rst:96
msgid ""
":ref:`PEP 701 <whatsnew312-pep701>`, :term:`f-strings <f-string>` in the "
"grammar"
msgstr ":ref:`PEP 701 <whatsnew312-pep701>`，:term:`f-字符串 <f-string>` 语法的改进"

#: ../../whatsnew/3.12.rst:98
msgid "Interpreter improvements:"
msgstr "解释器的改进："

#: ../../whatsnew/3.12.rst:100
msgid ""
":ref:`PEP 684 <whatsnew312-pep684>`, a unique per-interpreter :term:`GIL "
"<global interpreter lock>`"
msgstr ""
":ref:`PEP 684 <whatsnew312-pep684>`，单独的每解释器 :term:`GIL <global interpreter "
"lock>`"

#: ../../whatsnew/3.12.rst:102
msgid ":ref:`PEP 669 <whatsnew312-pep669>`, low impact monitoring"
msgstr ":ref:`PEP 669 <whatsnew312-pep669>`，低开销的监控"

#: ../../whatsnew/3.12.rst:103
msgid ""
"`Improved 'Did you mean ...' suggestions <improved error messages_>`_ for "
":exc:`NameError`, :exc:`ImportError`, and :exc:`SyntaxError` exceptions"
msgstr ""
"针对 :exc:`NameError`, :exc:`ImportError` 和 :exc:`SyntaxError` 异常 `改进了 'Did "
"you mean ...' 提示消息 <improved error messages_>`_。"

#: ../../whatsnew/3.12.rst:106
msgid "Python data model improvements:"
msgstr "对 Python 数据模型的改进："

#: ../../whatsnew/3.12.rst:108
msgid ""
":ref:`PEP 688 <whatsnew312-pep688>`, using the :ref:`buffer protocol "
"<bufferobjects>` from Python"
msgstr ""
":ref:`PEP 688 <whatsnew312-pep688>`，使用 Python 的 :ref:`缓冲区协议 <bufferobjects>`"

#: ../../whatsnew/3.12.rst:111
msgid "Significant improvements in the standard library:"
msgstr "标准库中的重大改进："

#: ../../whatsnew/3.12.rst:113
msgid "The :class:`pathlib.Path` class now supports subclassing"
msgstr ":class:`pathlib.Path` 类现在支持子类化"

#: ../../whatsnew/3.12.rst:114
msgid "The :mod:`os` module received several improvements for Windows support"
msgstr ":mod:`os` 模块获得了多项针对 Windows 支持的改进"

#: ../../whatsnew/3.12.rst:115
msgid ""
"A :ref:`command-line interface <sqlite3-cli>` has been added to the "
":mod:`sqlite3` module"
msgstr "在 :mod:`sqlite3` 模块中添加了 :ref:`命令行界面 <sqlite3-cli>`。"

#: ../../whatsnew/3.12.rst:117
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols "
"<typing.runtime_checkable>` enjoy a speed up of between two and 20 times"
msgstr ""
"基于 :func:`运行时可检测协议 <typing.runtime_checkable>` 的 :func:`isinstance` 检测获得了 2 "
"至 20 倍的提速"

#: ../../whatsnew/3.12.rst:119
msgid ""
"The :mod:`asyncio` package has had a number of performance improvements, "
"with some benchmarks showing a 75% speed up."
msgstr ":mod:`asyncio` 包的性能获得了多项改进，一些基准测试显示有 75% 的提速。"

#: ../../whatsnew/3.12.rst:121
msgid ""
"A :ref:`command-line interface <uuid-cli>` has been added to the :mod:`uuid`"
" module"
msgstr "在 :mod:`uuid` 模块中添加了 :ref:`命令行界面 <uuid-cli>`。"

#: ../../whatsnew/3.12.rst:123
msgid ""
"Due to the changes in :ref:`PEP 701 <whatsnew312-pep701>`, producing tokens "
"via the :mod:`tokenize` module is up to 64% faster."
msgstr ""
"由于 :ref:`PEP 701 <whatsnew312-pep701>` 中的更改，通过 :mod:`tokenize` "
"模块生成令牌（token）的速度最多可提高 64%。"

#: ../../whatsnew/3.12.rst:126
msgid "Security improvements:"
msgstr "安全改进："

#: ../../whatsnew/3.12.rst:128
msgid ""
"Replace the builtin :mod:`hashlib` implementations of SHA1, SHA3, SHA2-384, "
"SHA2-512, and MD5 with formally verified code from the `HACL* "
"<https://github.com/hacl-star/hacl-star/>`__ project. These builtin "
"implementations remain as fallbacks that are only used when OpenSSL does not"
" provide them."
msgstr ""
"用来自  `HACL* <https://github.com/hacl-star/hacl-star/>`__ 项目的经过正式验证的代码替代 "
"SHA1, SHA3, SHA2-384, SHA2-512 和 MD5 的内置 :mod:`hashlib` 实现。 这些内置实现保留作为仅在当 "
"OpenSSL 未提供它们时使用的回退选项。"

#: ../../whatsnew/3.12.rst:134
msgid "C API improvements:"
msgstr "C API 的改进："

#: ../../whatsnew/3.12.rst:136
msgid ":ref:`PEP 697 <whatsnew312-pep697>`, unstable C API tier"
msgstr ":ref:`PEP 697 <whatsnew312-pep697>`，不稳定 C API 层"

#: ../../whatsnew/3.12.rst:137
msgid ":ref:`PEP 683 <whatsnew312-pep683>`, immortal objects"
msgstr ":ref:`PEP 683 <whatsnew312-pep683>`，永生对象"

#: ../../whatsnew/3.12.rst:139
msgid "CPython implementation improvements:"
msgstr "CPython 实现的改进："

#: ../../whatsnew/3.12.rst:141
msgid ":ref:`PEP 709 <whatsnew312-pep709>`, comprehension inlining"
msgstr ":ref:`PEP 709 <whatsnew312-pep709>`，推导式内联化"

#: ../../whatsnew/3.12.rst:142
msgid ""
":ref:`CPython support <perf_profiling>` for the Linux ``perf`` profiler"
msgstr "对 Linux ``perf`` 性能分析器的 :ref:`CPython 支持 <perf_profiling>`"

#: ../../whatsnew/3.12.rst:143
msgid "Implement stack overflow protection on supported platforms"
msgstr "在受支持的平台上实现栈溢出保护"

#: ../../whatsnew/3.12.rst:145
msgid "New typing features:"
msgstr "新的类型标注特性："

#: ../../whatsnew/3.12.rst:147
msgid ""
":ref:`PEP 692 <whatsnew312-pep692>`, using :class:`~typing.TypedDict` to "
"annotate :term:`**kwargs <argument>`"
msgstr ""
":ref:`PEP 692 <whatsnew312-pep692>`，使用 :class:`~typing.TypedDict` 来标注 "
":term:`**kwargs <argument>`"

#: ../../whatsnew/3.12.rst:149
msgid ":ref:`PEP 698 <whatsnew312-pep698>`, :func:`typing.override` decorator"
msgstr ":ref:`PEP 698 <whatsnew312-pep698>`，:func:`typing.override` 装饰器"

#: ../../whatsnew/3.12.rst:151
msgid "Important deprecations, removals or restrictions:"
msgstr "重要的弃用、移除或限制："

#: ../../whatsnew/3.12.rst:153
msgid ""
":pep:`623`: Remove ``wstr`` from Unicode objects in Python's C API, reducing"
" the size of every :class:`str` object by at least 8 bytes."
msgstr ""
":pep:`623`: 在 Python 的 C API 中移除 Unicode 对象中的 ``wstr``，使每个 :class:`str` "
"对象的大小缩减至少 8 个字节。"

#: ../../whatsnew/3.12.rst:156
msgid ""
":pep:`632`: Remove the :mod:`!distutils` package. See :pep:`the migration "
"guide <0632#migration-advice>` for advice replacing the APIs it provided. "
"The third-party `Setuptools "
"<https://setuptools.pypa.io/en/latest/deprecated/distutils-legacy.html>`__ "
"package continues to provide :mod:`!distutils`, if you still require it in "
"Python 3.12 and beyond."
msgstr ""
":pep:`632`: 移除 :mod:`!distutils` 包。 请参阅 :pep:`迁移指南 <0632#migration-advice>` "
"了解有关替换其所提供的 API 的建议。 第三方 `Setuptools "
"<https://setuptools.pypa.io/en/latest/deprecated/distutils-legacy.html>`__ "
"包将继续提供 :mod:`!distutils`，如果你在 Python 3.12 及更高版本中仍然需要它的话。"

#: ../../whatsnew/3.12.rst:163
msgid ""
":gh:`95299`: Do not pre-install ``setuptools`` in virtual environments "
"created with :mod:`venv`. This means that ``distutils``, ``setuptools``, "
"``pkg_resources``, and ``easy_install`` will no longer available by default;"
" to access these run ``pip install setuptools`` in the :ref:`activated "
"<venv-explanation>` virtual environment."
msgstr ""
":gh:`95299`: 不在使用 :mod:`venv` 创建的虚拟环境中预装 ``setuptools``。 这意味着 "
"``distutils``、``setuptools``、``pkg_resources`` 和 ``easy_install`` "
"默认将不再可用；要访问这些工具请在  :ref:`激活的 <venv-explanation>` 虚拟环境中运行 ``pip install "
"setuptools``。"

#: ../../whatsnew/3.12.rst:170
msgid ""
"The :mod:`!asynchat`, :mod:`!asyncore`, and :mod:`!imp` modules have been "
"removed, along with several :class:`unittest.TestCase` `method aliases "
"<unittest-TestCase-removed-aliases_>`_."
msgstr ""
"移除了 :mod:`!asynchat`、:mod:`!asyncore` 和 :mod:`!imp` 模块，以及一些 "
":class:`unittest.TestCase` `方法别名 <unittest-TestCase-removed-aliases_>`_。"

#: ../../whatsnew/3.12.rst:176 ../../whatsnew/3.12.rst:1842
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.12.rst:181
msgid "PEP 695: Type Parameter Syntax"
msgstr "PEP 695: 类型形参语法"

#: ../../whatsnew/3.12.rst:183
msgid ""
"Generic classes and functions under :pep:`484` were declared using a verbose"
" syntax that left the scope of type parameters unclear and required explicit"
" declarations of variance."
msgstr ":pep:`484` 下的泛型类和函数是使用详细语法声明的，这使得类型参数的范围不明确，并且需要显式声明变化。"

#: ../../whatsnew/3.12.rst:187
msgid ""
":pep:`695` introduces a new, more compact and explicit way to create "
":ref:`generic classes <generic-classes>` and :ref:`functions <generic-"
"functions>`::"
msgstr ""
":pep:`695` 引入了一种新的、更紧凑、更明确的方式来创建 :ref:`泛型类 <generic-classes>` 和 :ref:`函数 "
"<generic-functions>`::"

#: ../../whatsnew/3.12.rst:190
msgid ""
"def max[T](args: Iterable[T]) -> T:\n"
"    ...\n"
"\n"
"class list[T]:\n"
"    def __getitem__(self, index: int, /) -> T:\n"
"        ...\n"
"\n"
"    def append(self, element: T) -> None:\n"
"        ..."
msgstr ""
"def max[T](args: Iterable[T]) -> T:\n"
"    ...\n"
"\n"
"class list[T]:\n"
"    def __getitem__(self, index: int, /) -> T:\n"
"        ...\n"
"\n"
"    def append(self, element: T) -> None:\n"
"        ..."

#: ../../whatsnew/3.12.rst:200
msgid ""
"In addition, the PEP introduces a new way to declare :ref:`type aliases "
"<type-aliases>` using the :keyword:`type` statement, which creates an "
"instance of :class:`~typing.TypeAliasType`::"
msgstr ""
"此外，该 PEP 引入了一种新的方法来使用 :keyword:`type` 语句声明 :ref:`类型别名 <type-aliases>`，该语句会创建"
" :class:`~typing.TypeAliasType` 的实例::"

#: ../../whatsnew/3.12.rst:204
msgid "type Point = tuple[float, float]"
msgstr "type Point = tuple[float, float]"

#: ../../whatsnew/3.12.rst:206
msgid "Type aliases can also be :ref:`generic <generic-type-aliases>`::"
msgstr "类型别名也可以是  :ref:`generic <generic-type-aliases>`::"

#: ../../whatsnew/3.12.rst:208
msgid "type Point[T] = tuple[T, T]"
msgstr "type Point[T] = tuple[T, T]"

#: ../../whatsnew/3.12.rst:210
msgid ""
"The new syntax allows declaring :class:`~typing.TypeVarTuple` and "
":class:`~typing.ParamSpec` parameters, as well as :class:`~typing.TypeVar` "
"parameters with bounds or constraints::"
msgstr ""
"新语法允许声明 :class:`~typing.TypeVarTuple` 和 :class:`~typing.ParamSpec` "
"形参，以及带边界或约束的 :class:`~typing.TypeVar` 形参::"

#: ../../whatsnew/3.12.rst:214
msgid ""
"type IntFunc[**P] = Callable[P, int]  # ParamSpec\n"
"type LabeledTuple[*Ts] = tuple[str, *Ts]  # TypeVarTuple\n"
"type HashableSequence[T: Hashable] = Sequence[T]  # TypeVar with bound\n"
"type IntOrStrSequence[T: (int, str)] = Sequence[T]  # TypeVar with constraints"
msgstr ""
"type IntFunc[**P] = Callable[P, int]  # ParamSpec\n"
"type LabeledTuple[*Ts] = tuple[str, *Ts]  # TypeVarTuple\n"
"type HashableSequence[T: Hashable] = Sequence[T]  # 带边界的 TypeVar\n"
"type IntOrStrSequence[T: (int, str)] = Sequence[T]  # 带约束的 TypeVar"

#: ../../whatsnew/3.12.rst:219
msgid ""
"The value of type aliases and the bound and constraints of type variables "
"created through this syntax are evaluated only on demand (see :ref:`lazy "
"evaluation <lazy-evaluation>`). This means type aliases are able to refer to"
" other types defined later in the file."
msgstr ""
"类型别名的值以及通过此语法创建的类型变量的边界和约束仅在需要时才进行求值 (参见 :ref:`惰性求值 <lazy-evaluation>`)。 "
"这意味着类型别名可以引用稍后在文件中定义的其他类型。"

#: ../../whatsnew/3.12.rst:224
msgid ""
"Type parameters declared through a type parameter list are visible within "
"the scope of the declaration and any nested scopes, but not in the outer "
"scope. For example, they can be used in the type annotations for the methods"
" of a generic class or in the class body. However, they cannot be used in "
"the module scope after the class is defined. See :ref:`type-params` for a "
"detailed description of the runtime semantics of type parameters."
msgstr ""
"通过类型参数列表声明的类型参数在声明的作用域和任何嵌套的作用域内都可见，但在外部作用域内不可见。 例如，它们可以用于泛型类的方法的类型注解或类体中。 "
"但是，在定义类之后，不能在模块范围中使用它们。 有关类型参数的运行时语义的详细描述，请参见 :ref:`type-params`。"

#: ../../whatsnew/3.12.rst:231
msgid ""
"In order to support these scoping semantics, a new kind of scope is "
"introduced, the :ref:`annotation scope <annotation-scopes>`. Annotation "
"scopes behave for the most part like function scopes, but interact "
"differently with enclosing class scopes. In Python 3.13, :term:`annotations "
"<annotation>` will also be evaluated in annotation scopes."
msgstr ""
"为了支持这些作用域定义，引入了一种新的作用域，即 :ref:`标注作用域 <annotation-scopes>`。 "
"标注作用域的行为在很大程度上类似于函数作用域，但与封闭类作用作用域的交互方式不同。 在 Python 3.13 中，:term:`标注 "
"<annotation>` 也将在标注作用域中进行求值。"

#: ../../whatsnew/3.12.rst:237
msgid "See :pep:`695` for more details."
msgstr "更多细节请参见 :pep:`695`。"

#: ../../whatsnew/3.12.rst:239
msgid ""
"(PEP written by Eric Traut. Implementation by Jelle Zijlstra, Eric Traut, "
"and others in :gh:`103764`.)"
msgstr ""
"（PEP由 Eric Traut 撰写。 由 Jelle Zijlstra、Eric Traut 和其他人在 :gh:`103764` 中实现。）"

#: ../../whatsnew/3.12.rst:245
msgid "PEP 701: Syntactic formalization of f-strings"
msgstr "PEP 701：f-字符串的句法形式化"

#: ../../whatsnew/3.12.rst:247
msgid ""
":pep:`701` lifts some restrictions on the usage of :term:`f-strings "
"<f-string>`. Expression components inside f-strings can now be any valid "
"Python expression, including strings reusing the same quote as the "
"containing f-string, multi-line expressions, comments, backslashes, and "
"unicode escape sequences. Let's cover these in detail:"
msgstr ""
":pep:`701` 取消了对 :term:`f-字符串 <f-string>` 使用的一些限制。 f-字符串内部的表达式部分现在可以是任何有效的 "
"Python 表达式，包括重用了与标记 f-字符串本身相同的引号的字符串、多行表达式、注释、反斜杠以及 unicode 转义序列。 让我们详细介绍一下："

#: ../../whatsnew/3.12.rst:253
msgid ""
"Quote reuse: in Python 3.11, reusing the same quotes as the enclosing "
"f-string raises a :exc:`SyntaxError`, forcing the user to either use other "
"available quotes (like using double quotes or triple quotes if the f-string "
"uses single quotes). In Python 3.12, you can now do things like this:"
msgstr ""
"引号重用：在 Python 3.11 中，重用与标记 f-字符串本身相同的引号会引发 "
":exc:`SyntaxError`，迫使用户使用其他可用的引号（如在 f-字符串使用单引号时使用双引号或三重引号）。 在 Python 3.12 "
"中，你现在可以这样做了："

#: ../../whatsnew/3.12.rst:262
msgid ""
"Note that before this change there was no explicit limit in how f-strings "
"can be nested, but the fact that string quotes cannot be reused inside the "
"expression component of f-strings made it impossible to nest f-strings "
"arbitrarily. In fact, this is the most nested f-string that could be "
"written:"
msgstr ""
"请注意，在这一更改之前，对f-字符串的嵌套方式没有明确的限制，但字符串引号不能在f-字符串的表达式组件中重复使用，这使得不可能任意嵌套f-"
"字符串。事实上，这是可以编写的嵌套最多的f-字符串："

#: ../../whatsnew/3.12.rst:270
msgid ""
"As now f-strings can contain any valid Python expression inside expression "
"components, it is now possible to nest f-strings arbitrarily:"
msgstr "由于现在f-字符串可以在表达式组件中包含任何有效的Python表达式，因此现在可以任意嵌套f-字符串："

#: ../../whatsnew/3.12.rst:276
msgid ""
"Multi-line expressions and comments: In Python 3.11, f-string expressions "
"must be defined in a single line, even if the expression within the f-string"
" could normally span multiple lines (like literal lists being defined over "
"multiple lines), making them harder to read. In Python 3.12 you can now "
"define f-strings spanning multiple lines, and add inline comments:"
msgstr ""
"多行表达式和注释：在 Python 3.11 中，f-字符串表达式必须在一行中完成定义，即使 "
"f-字符串中的表达式在正常情况下可以跨多行（如在多行中定义的列表字面值），这使得它们更难被读懂。 在 Python 3.12 "
"中，你现在可以定义跨越多行的 f-字符串并添加内联注释："

#: ../../whatsnew/3.12.rst:290
msgid ""
"Backslashes and unicode characters: before Python 3.12 f-string expressions "
"couldn't contain any ``\\`` character. This also affected unicode "
":ref:`escape sequences <escape-sequences>` (such as ``\\N{snowman}``) as "
"these contain the ``\\N`` part that previously could not be part of "
"expression components of f-strings. Now, you can define expressions like "
"this:"
msgstr ""
"反斜杠和 unicode 字符：在 Python 3.12 之前，f-字符串表达式不能包含任何 ``\\`` 字符。 这也影响了 unicode "
":ref:`转义序列 <escape-sequences>` (如 ``\\N{snowman}``)，因为这些序列包含 ``\\N`` "
"部分，而这部分以前不能作为 f-字符串表达式组件的一部分。 现在，你可以这样定义表达式："

#: ../../whatsnew/3.12.rst:303
msgid "See :pep:`701` for more details."
msgstr "更多细节请参见 :pep:`701`。"

#: ../../whatsnew/3.12.rst:305
msgid ""
"As a positive side-effect of how this feature has been implemented (by "
"parsing f-strings with :pep:`the PEG parser <617>`), now error messages for "
"f-strings are more precise and include the exact location of the error. For "
"example, in Python 3.11, the following f-string raises a :exc:`SyntaxError`:"
msgstr ""
"实现此特性的一个正面的附带影响是（通过使用 :pep:`PEG 解析器 <617>` 来解析 f-字符串），现在 "
"f-字符串的错误消息会更加精确，包括错误的确切位置。例如，在 Python 3.11 中，下面的 f-字符串将引发一个 "
":exc:`SyntaxError` ："

#: ../../whatsnew/3.12.rst:310
msgid ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    (x z y)\n"
"     ^^^\n"
"SyntaxError: f-string: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    (x z y)\n"
"     ^^^\n"
"SyntaxError: f-string: invalid syntax. Perhaps you forgot a comma?"

#: ../../whatsnew/3.12.rst:318
msgid ""
"but the error message doesn't include the exact location of the error within"
" the line and also has the expression artificially surrounded by "
"parentheses. In Python 3.12, as f-strings are parsed with the PEG parser, "
"error messages can be more precise and show the entire line:"
msgstr ""
"但是错误消息不包括错误在行中的确切位置，而且表达式被人为地用括号括起来。在Python 3.12中，由于f-"
"字符串是用PEG解析器解析的，因此错误消息可以更精确，并显示整行："

#: ../../whatsnew/3.12.rst:322
msgid ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"                   ^^^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
">>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"  File \"<stdin>\", line 1\n"
"    my_string = f\"{x z y}\" + f\"{1 + 1}\"\n"
"                   ^^^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"

#: ../../whatsnew/3.12.rst:330
msgid ""
"(Contributed by Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Cristián"
" Maureira-Fredes and Marta Gómez in :gh:`102856`. PEP written by Pablo "
"Galindo, Batuhan Taskaya, Lysandros Nikolaou and Marta Gómez)."
msgstr ""
"（由 Pablo Galindo、Batuhan Taskaya、 Lysandros Nikolaou、Cristián Maureira-"
"Fredes 和 Marta Gómez 在 :gh:`102856` 中贡献。 PEP 由 Pablo Galindo、 Batuhan "
"Taskaya、 Lysandros Nikolaou 和 Marta Gómez 撰写）。"

#: ../../whatsnew/3.12.rst:337
msgid "PEP 684: A Per-Interpreter GIL"
msgstr "PEP 684: 每解释器 GIL"

#: ../../whatsnew/3.12.rst:339
msgid ""
":pep:`684` introduces a per-interpreter :term:`GIL <global interpreter "
"lock>`, so that sub-interpreters may now be created with a unique GIL per "
"interpreter. This allows Python programs to take full advantage of multiple "
"CPU cores. This is currently only available through the C-API, though a "
"Python API is :pep:`anticipated for 3.13 <554>`."
msgstr ""
":pep:`684` 引入了每解释器 :term:`GIL <global interpreter lock>`，使得现在可以创建带有单独的每解释器 "
"GIL 的子解释器。 这将允许 Python 程序充分利用多个 CPU 核心。 此特性目前仅能通过 C-API 使用，不过相应的 Python API "
":pep:`预计将在 3.13 中添加 <554>`。"

#: ../../whatsnew/3.12.rst:345
msgid ""
"Use the new :c:func:`Py_NewInterpreterFromConfig` function to create an "
"interpreter with its own GIL:"
msgstr "使用新的 :c:func:`Py_NewInterpreterFromConfig` 函数来创建具有单独 GIL 的解释器："

#: ../../whatsnew/3.12.rst:348
msgid ""
"PyInterpreterConfig config = {\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    return -1;\n"
"}\n"
"/* The new interpreter is now active in the current thread. */"
msgstr ""
"PyInterpreterConfig config = {\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    return -1;\n"
"}\n"
"/* 新解释器现已在当前线程中激活。 */"

#: ../../whatsnew/3.12.rst:361
msgid ""
"For further examples how to use the C-API for sub-interpreters with a per-"
"interpreter GIL, see ``Modules/_xxsubinterpretersmodule.c``."
msgstr ""
"有关如何将For further examples how to use the C-API 用于具有每解释器 GIL 的子解释器的更多示例，请参见 "
"``Modules/_xxsubinterpretersmodule.c``。"

#: ../../whatsnew/3.12.rst:364
msgid "(Contributed by Eric Snow in :gh:`104210`, etc.)"
msgstr "（由 Eric Snow 在 :gh:`104210` 等中贡献。）"

#: ../../whatsnew/3.12.rst:369
msgid "PEP 669: Low impact monitoring for CPython"
msgstr "PEP 669：针对 CPython 的低影响监控"

#: ../../whatsnew/3.12.rst:371
msgid ""
":pep:`669` defines a new :mod:`API <sys.monitoring>` for profilers, "
"debuggers, and other tools to monitor events in CPython. It covers a wide "
"range of events, including calls, returns, lines, exceptions, jumps, and "
"more. This means that you only pay for what you use, providing support for "
"near-zero overhead debuggers and coverage tools. See  :mod:`sys.monitoring` "
"for details."
msgstr ""
":pep:`669` 定义了一个新的 :mod:`API <sys.monitoring>` 用于性能分析器、调试器和其他在 CPython "
"中监控事件的工具。 它覆盖了大范围的事件，包括调用、返回、行、异常、跳转等等。 "
"这意味着你将只为你所使用的东西付出开销，提供了对近乎零开销的调试器和覆盖工具的支持。 请参阅  :mod:`sys.monitoring` 了解详情。"

#: ../../whatsnew/3.12.rst:379
msgid "(Contributed by Mark Shannon in :gh:`103082`.)"
msgstr "（由 Mark Shannon 在 :gh:`103082` 中贡献。）"

#: ../../whatsnew/3.12.rst:384
msgid "PEP 688: Making the buffer protocol accessible in Python"
msgstr "PEP 688: 使缓冲区协议在Python中可访问"

#: ../../whatsnew/3.12.rst:386
msgid ""
":pep:`688` introduces a way to use the :ref:`buffer protocol "
"<bufferobjects>` from Python code. Classes that implement the "
":meth:`~object.__buffer__` method are now usable as buffer types."
msgstr ""
":pep:`688` 引入了一种在 Python 代码中使用 :ref:`缓冲区协议 <bufferobjects>` 的方法。实现 "
":meth:`~object.__buffer__` 方法的类现在可以作为缓冲区类型使用。"

#: ../../whatsnew/3.12.rst:390
msgid ""
"The new :class:`collections.abc.Buffer` ABC provides a standard way to "
"represent buffer objects, for example in type annotations. The new "
":class:`inspect.BufferFlags` enum represents the flags that can be used to "
"customize buffer creation. (Contributed by Jelle Zijlstra in :gh:`102500`.)"
msgstr ""
"新的 :class:`collections.abc.Buffer` ABC（抽象基类）提供了一种表示缓冲区对象的标准方法，例如在类型注释中。 新的 "
":class:`inspect.BufferFlags` 枚举表示可用于自定义缓冲区创建的标志。 （由 Jelle Zijlstra 在 "
":gh:`102500` 中贡献。）"

#: ../../whatsnew/3.12.rst:399
msgid "PEP 709: Comprehension inlining"
msgstr "PEP 709：推导式内联"

#: ../../whatsnew/3.12.rst:401
msgid ""
"Dictionary, list, and set comprehensions are now inlined, rather than "
"creating a new single-use function object for each execution of the "
"comprehension. This speeds up execution of a comprehension by up to two "
"times. See :pep:`709` for further details."
msgstr ""
"字典、列表和集合推导式现在都是内联的，而不是为每次执行推导式都创建一个新的一次性函数对象。 这样可以将推导式的执行速度提高最多两倍。 更多细节请参阅 "
":pep:`709`。"

#: ../../whatsnew/3.12.rst:406
msgid ""
"Comprehension iteration variables remain isolated and don't overwrite a "
"variable of the same name in the outer scope, nor are they visible after the"
" comprehension. Inlining does result in a few visible behavior changes:"
msgstr "推导式迭代变量将保持隔离而不会覆盖外作用域中的同名变量，在离开推导式后也不再可见。 内联确实会导致一些可见的行为变化："

#: ../../whatsnew/3.12.rst:410
msgid ""
"There is no longer a separate frame for the comprehension in tracebacks, and"
" tracing/profiling no longer shows the comprehension as a function call."
msgstr "回溯中的推导式不再有单独的帧，跟踪/评测也不再将推导式显示为函数调用。"

#: ../../whatsnew/3.12.rst:412
msgid ""
"The :mod:`symtable` module will no longer produce child symbol tables for "
"each comprehension; instead, the comprehension's locals will be included in "
"the parent function's symbol table."
msgstr ":mod:`symtable` 模块将不再为每个推导式产生子符号表；取而代之的是，推导式的 locals 将包括在父函数的符号表中。"

#: ../../whatsnew/3.12.rst:415
msgid ""
"Calling :func:`locals` inside a comprehension now includes variables from "
"outside the comprehension, and no longer includes the synthetic ``.0`` "
"variable for the comprehension \"argument\"."
msgstr "在推导式内部调用 :func:`locals` 现在包括该推导式外部外部的变量，而不再包括推导式“参数”导致的 ``.0`` 合成变量。"

#: ../../whatsnew/3.12.rst:418
msgid ""
"A comprehension iterating directly over ``locals()`` (e.g. ``[k for k in "
"locals()]``) may see \"RuntimeError: dictionary changed size during "
"iteration\" when run under tracing (e.g. code coverage measurement). This is"
" the same behavior already seen in e.g. ``for k in locals():``. To avoid the"
" error, first create a list of keys to iterate over: ``keys = "
"list(locals()); [k for k in keys]``."
msgstr ""
"一个直接迭代 ``locals()`` 的推导式 (例如 ``[k for k in locals()]``) 在启动追踪 (例如检测代码覆盖度) "
"的情况下运行时可能导致 \"RuntimeError: dictionary changed size during iteration\"。 "
"此行为与现有的 ``for k in locals():`` 等代码保持一致。 要避免此错误，可先创建一个由键组成的列表用于迭代: ``keys = "
"list(locals()); [k for k in keys]``。"

#: ../../whatsnew/3.12.rst:425
msgid "(Contributed by Carl Meyer and Vladimir Matveev in :pep:`709`.)"
msgstr "（由 Carl Meyer 和 Vladimir Matveev 在 :pep:`709` 中贡献。）"

#: ../../whatsnew/3.12.rst:428
msgid "Improved Error Messages"
msgstr "改进的错误消息"

#: ../../whatsnew/3.12.rst:430
msgid ""
"Modules from the standard library are now potentially suggested as part of "
"the error messages displayed by the interpreter when a :exc:`NameError` is "
"raised to the top level. (Contributed by Pablo Galindo in :gh:`98254`.)"
msgstr ""
"当引发的 :exc:`NameError` 传播到最高层级时，解释器显示的错误消息可能将标准库中的模块作为建议的一部分。 （由 Pablo "
"Galindo 在 :gh:`98254` 中贡献。）"

#: ../../whatsnew/3.12.rst:439
msgid ""
"Improve the error suggestion for :exc:`NameError` exceptions for instances. "
"Now if a :exc:`NameError` is raised in a method and the instance has an "
"attribute that's exactly equal to the name in the exception, the suggestion "
"will include ``self.<NAME>`` instead of the closest match in the method "
"scope. (Contributed by Pablo Galindo in :gh:`99139`.)"
msgstr ""
"改进针对实例的 :exc:`NameError` 异常的错误建议。 现在如果在方法中引发了 :exc:`NameError` "
"而实例具有与异常中的名称完全相同的属性，建议将会包括 ``self.<NAME>`` 而不是方法作用域中最接近的匹配项。 （由 Pablo "
"Galindo 在 :gh:`99139` 中贡献。）"

#: ../../whatsnew/3.12.rst:459
msgid ""
"Improve the :exc:`SyntaxError` error message when the user types ``import x "
"from y`` instead of ``from y import x``. (Contributed by Pablo Galindo in "
":gh:`98931`.)"
msgstr ""
"改进了当用户输入 ``import x from y`` 而不是 ``from y import x`` 时产生的 :exc:`SyntaxError`"
" 错误消息。 （由 Pablo Galindo 在 :gh:`98931` 中贡献。）"

#: ../../whatsnew/3.12.rst:469
msgid ""
":exc:`ImportError` exceptions raised from failed ``from <module> import "
"<name>`` statements now include suggestions for the value of ``<name>`` "
"based on the available names in ``<module>``. (Contributed by Pablo Galindo "
"in :gh:`91058`.)"
msgstr ""
"由失败的 ``from <module> import <name>`` 语句引发的 :exc:`ImportError` 异常现在会包括根据 "
"``<module>`` 中的可用名称对 ``<name>`` 的值提出的建议。 （由 Pablo Galindo 在 :gh:`91058` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:480
msgid "New Features Related to Type Hints"
msgstr "有关类型提示的新增特性"

#: ../../whatsnew/3.12.rst:482
msgid ""
"This section covers major changes affecting :pep:`type hints <484>` and the "
":mod:`typing` module."
msgstr "本节介绍了影响 :pep:`类型提示 <484>` 和 :mod:`typing` 模块的主要更改。"

#: ../../whatsnew/3.12.rst:488
msgid "PEP 692: Using ``TypedDict`` for more precise ``**kwargs`` typing"
msgstr "PEP 692: 使用 ``TypedDict`` 进行更精确的 ``**kwargs`` 类型标注"

#: ../../whatsnew/3.12.rst:490
msgid ""
"Typing ``**kwargs`` in a function signature as introduced by :pep:`484` "
"allowed for valid annotations only in cases where all of the ``**kwargs`` "
"were of the same type."
msgstr ""
"在函数签名中的 ``**kwargs`` 类型标注（由 :pep:`484` 引入）只允许在所有 ``**kwargs`` "
"都属于同一类型的情况下进行有效标注。"

#: ../../whatsnew/3.12.rst:494
msgid ""
":pep:`692` specifies a more precise way of typing ``**kwargs`` by relying on"
" typed dictionaries::"
msgstr ":pep:`692` 通过依赖类型化的字典规定了一种更精确的针对 ``**kwargs`` 的类型标注方式::"

#: ../../whatsnew/3.12.rst:497
msgid ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"  name: str\n"
"  year: int\n"
"\n"
"def foo(**kwargs: Unpack[Movie]): ..."
msgstr ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"  name: str\n"
"  year: int\n"
"\n"
"def foo(**kwargs: Unpack[Movie]): ..."

#: ../../whatsnew/3.12.rst:505
msgid "See :pep:`692` for more details."
msgstr "更多细节请参见 :pep:`692`。"

#: ../../whatsnew/3.12.rst:507
msgid "(Contributed by Franek Magiera in :gh:`103629`.)"
msgstr "（由 Franek Magiera 在 :gh:`103629` 中贡献。）"

#: ../../whatsnew/3.12.rst:512
msgid "PEP 698: Override Decorator for Static Typing"
msgstr "PEP 698：覆盖静态类型的装饰器"

#: ../../whatsnew/3.12.rst:514
msgid ""
"A new decorator :func:`typing.override` has been added to the :mod:`typing` "
"module. It indicates to type checkers that the method is intended to "
"override a method in a superclass. This allows type checkers to catch "
"mistakes where a method that is intended to override something in a base "
"class does not in fact do so."
msgstr ""
"一个新的装饰器 :func:`typing.override` 已添加到 :mod:`typing` 模块中。 "
"它向类型检查器指示该方法旨在重写超类中的方法。 这允许类型检查器在打算重写基类中的某个方法实际上没有重写的情况下捕获错误。"

#: ../../whatsnew/3.12.rst:520
msgid "Example::"
msgstr "示例："

#: ../../whatsnew/3.12.rst:522
msgid ""
"from typing import override\n"
"\n"
"class Base:\n"
"  def get_color(self) -> str:\n"
"    return \"blue\"\n"
"\n"
"class GoodChild(Base):\n"
"  @override  # ok: overrides Base.get_color\n"
"  def get_color(self) -> str:\n"
"    return \"yellow\"\n"
"\n"
"class BadChild(Base):\n"
"  @override  # type checker error: does not override Base.get_color\n"
"  def get_colour(self) -> str:\n"
"    return \"red\""
msgstr ""
"from typing import override\n"
"\n"
"class Base:\n"
"  def get_color(self) -> str:\n"
"    return \"blue\"\n"
"\n"
"class GoodChild(Base):\n"
"  @override  # 正确：重写 Base.get_color\n"
"  def get_color(self) -> str:\n"
"    return \"yellow\"\n"
"\n"
"class BadChild(Base):\n"
"  @override  # 类型检查错误：不能重写 Base.get_color\n"
"  def get_colour(self) -> str:\n"
"    return \"red\""

#: ../../whatsnew/3.12.rst:538
msgid "See :pep:`698` for more details."
msgstr "更多细节参见 :pep:`698`。"

#: ../../whatsnew/3.12.rst:540
msgid "(Contributed by Steven Troxler in :gh:`101561`.)"
msgstr "（由 Steven Troxler 在 :gh:`101561` 中贡献。）"

#: ../../whatsnew/3.12.rst:543
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.12.rst:545
msgid ""
"The parser now raises :exc:`SyntaxError` when parsing source code containing"
" null bytes. (Contributed by Pablo Galindo in :gh:`96670`.)"
msgstr ""
"解析器现在在解析包含空字节的源代码时引发 :exc:`SyntaxError`。 （由 Pablo Galindo 在 :gh:`96670` 中贡献 "
"。）"

#: ../../whatsnew/3.12.rst:548
msgid ""
"A backslash-character pair that is not a valid escape sequence now generates"
" a :exc:`SyntaxWarning`, instead of :exc:`DeprecationWarning`. For example, "
"``re.compile(\"\\d+\\.\\d+\")`` now emits a :exc:`SyntaxWarning` "
"(``\"\\d\"`` is an invalid escape sequence, use raw strings for regular "
"expression: ``re.compile(r\"\\d+\\.\\d+\")``). In a future Python version, "
":exc:`SyntaxError` will eventually be raised, instead of "
":exc:`SyntaxWarning`. (Contributed by Victor Stinner in :gh:`98401`.)"
msgstr ""
"不是有效转义序列的反斜杠加字符组合现在会生成 :exc:`SyntaxWarning`，而不是 :exc:`DeprecationWarning`。 "
"例如，``re.compile(\"\\d+\\.\\d+\")`` 现在会发出 :exc:`SyntaxWarning` (``\"\\d\"`` "
"是一个无效的转义序列，请使用原始字符串来表示正则表达式: ``re.compile(r\"\\d+\\.\\d+\")``)。 在未来的 Python "
"版本中，最终将引发 :exc:`SyntaxError`，而不是 :exc:`SyntaxWarning`。 （由 Victor Stinner 在 "
":gh:`98401` 中贡献。）"

#: ../../whatsnew/3.12.rst:557
msgid ""
"Octal escapes with value larger than ``0o377`` (ex: ``\"\\477\"``), "
"deprecated in Python 3.11, now produce a :exc:`SyntaxWarning`, instead of "
":exc:`DeprecationWarning`. In a future Python version they will be "
"eventually a :exc:`SyntaxError`. (Contributed by Victor Stinner in "
":gh:`98401`.)"
msgstr ""
"值大于 ``0o377`` (例如: ``\"\\477\"``) 的八进制转义序列，在 Python 3.11 中已弃用，现在会产生 "
":exc:`SyntaxWarning`，而不是 :exc:`DeprecationWarning`。 在未来的 Python 版本中，它们最终将是 "
":exc:`SyntaxError`。 （由 Victor Stinner 在 :gh:`98401` 中贡献。）"

#: ../../whatsnew/3.12.rst:563
msgid ""
"Variables used in the target part of comprehensions that are not stored to "
"can now be used in assignment expressions (``:=``). For example, in ``[(b :="
" 1) for a, b.prop in some_iter]``, the assignment to ``b`` is now allowed. "
"Note that assigning to variables stored to in the target part of "
"comprehensions (like ``a``) is still disallowed, as per :pep:`572`. "
"(Contributed by Nikita Sobolev in :gh:`100581`.)"
msgstr ""
"未存储在推导式目标部分中的变量现在可以在赋值表达式 (``:=``) 中使用。 例如，在 ``[(b := 1) for a, b.prop in "
"some_iter]`` 中，现在允许对 ``b`` 进行赋值。 请注意，根据 :pep:`572`，仍然不允许向存储在推导式目标部分中的变量 (如 "
"``a``) 赋值。 （由 Nikita Sobolev 在 :gh:`100581` 中贡献。）"

#: ../../whatsnew/3.12.rst:570
msgid ""
"Exceptions raised in a class or type's ``__set_name__`` method are no longer"
" wrapped by a :exc:`RuntimeError`. Context information is added to the "
"exception as a :pep:`678` note. (Contributed by Irit Katriel in "
":gh:`77757`.)"
msgstr ""
"在类或类型对象的 ``__set_name__`` 方法中引发的异常不再由 :exc:`RuntimeError` 来包装。 上下文信息将作为 "
":pep:`678` 注释添加到异常中。 （由 Irit Katriel 在 :gh:`77757` 中贡献。）"

#: ../../whatsnew/3.12.rst:574
msgid ""
"When a ``try-except*`` construct handles the entire :exc:`ExceptionGroup` "
"and raises one other exception, that exception is no longer wrapped in an "
":exc:`ExceptionGroup`. Also changed in version 3.11.4. (Contributed by Irit "
"Katriel in :gh:`103590`.)"
msgstr ""
"当 ``try-except*`` 构造处理整个 :exc:`ExceptionGroup` 并引发另一个异常时，该异常不再封装在 "
":exc:`ExceptionGroup` 中。 在 3.11.4 版中也进行了更改。 （由 Irit Katriel 在 :gh:`103590` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:579
msgid ""
"The Garbage Collector now runs only on the eval breaker mechanism of the "
"Python bytecode evaluation loop instead of object allocations. The GC can "
"also run when :c:func:`PyErr_CheckSignals` is called so C extensions that "
"need to run for a long time without executing any Python code also have a "
"chance to execute the GC periodically. (Contributed by Pablo Galindo in "
":gh:`97922`.)"
msgstr ""
"垃圾回收器现在只在 Python 字节码评估循环的 eval-breaker 机制上运行，而不是在对象分配上运行。 垃圾回收也可以在调用 "
":c:func:`PyErr_CheckSignals` 时运行，因此需要长时间运行而不执行任何 Python 代码的 C "
"扩展也有机会定期执行垃圾回收。 （由 Pablo Galindo 在 :gh:`97922` 中贡献。）"

#: ../../whatsnew/3.12.rst:586
msgid ""
"All builtin and extension callables expecting boolean parameters now accept "
"arguments of any type instead of just :class:`bool` and :class:`int`. "
"(Contributed by Serhiy Storchaka in :gh:`60203`.)"
msgstr ""
"所有期望布尔参数的内置和扩展可调用函数现在都接受任何类型的参数，而不仅仅是 :class:`bool` 和 :class:`int`。 （由 "
"Serhiy Storchaka 在 :gh:`60203` 中贡献。）"

#: ../../whatsnew/3.12.rst:590
msgid ""
":class:`memoryview` now supports the half-float type (the \"e\" format "
"code). (Contributed by Donghee Na and Antoine Pitrou in :gh:`90751`.)"
msgstr ""
":class:`memoryview` 现在支持半精度浮点类型（\"e\" 格式代码）。 （由 Donghee Na 和 Antoine Pitrou "
"在 :gh:`90751` 中贡献。）"

#: ../../whatsnew/3.12.rst:593
msgid ""
":class:`slice` objects are now hashable, allowing them to be used as dict "
"keys and set items. (Contributed by Will Bradshaw, Furkan Onder, and Raymond"
" Hettinger in :gh:`101264`.)"
msgstr ""
":class:`slice` 对象现在是可哈希的，允许它们用作字典的键和集合项。 （由 Will Bradshaw、Furkan Onder 和 "
"Raymond Hettinger 在 :gh:`101264` 中贡献。）"

#: ../../whatsnew/3.12.rst:596
msgid ""
":func:`sum` now uses Neumaier summation to improve accuracy and "
"commutativity when summing floats or mixed ints and floats. (Contributed by "
"Raymond Hettinger in :gh:`100425`.)"
msgstr ""
":func:`sum` 现在使用 Neumaier 求和算法以改善对浮点数或混合了整数和浮点数时求和运算的准确性和可换算性。 （由 Raymond "
"Hettinger 在 :gh:`100425` 中贡献。）"

#: ../../whatsnew/3.12.rst:600
msgid ""
":func:`ast.parse` now raises :exc:`SyntaxError` instead of :exc:`ValueError`"
" when parsing source code containing null bytes. (Contributed by Pablo "
"Galindo in :gh:`96670`.)"
msgstr ""
":func:`ast.parse` 现在会在解析包含空字节的源代码时引发 :exc:`SyntaxError` 而不是 "
":exc:`ValueError`。 （由 Pablo Galindo 在 :gh:`96670` 中贡献 。）"

#: ../../whatsnew/3.12.rst:604
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`,"
" have a new a *filter* argument that allows limiting tar features than may "
"be surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile extraction filters <tarfile-extraction-filter>`"
" for details. In Python 3.14, the default will switch to ``'data'``. "
"(Contributed by Petr Viktorin in :pep:`706`.)"
msgstr ""
":mod:`tarfile` 中的提取方法和 :func:`shutil.unpack_archive` 有一个新的 *filter* "
"参数，它允许限制可能令人惊讶或危险的 tar 功能，例如在目标目录之外创建文件。 相关细节请参阅 :ref:`tarfile 提取过滤器 "
"<tarfile-extraction-filter>`。 在 Python 3.14 中。默认值将切换为 ``'data'``。 （由 Petr "
"Viktorin 在 :pep:`706` 中贡献。）"

#: ../../whatsnew/3.12.rst:612
msgid ""
":class:`types.MappingProxyType` instances are now hashable if the underlying"
" mapping is hashable. (Contributed by Serhiy Storchaka in :gh:`87995`.)"
msgstr ""
"如果底层映射是可哈希的，那么 :class:`types.MappingProxyType` 实例现在是可哈希的。 （由 Serhiy "
"Storchaka 在 :gh:`87995` 中贡献。）"

#: ../../whatsnew/3.12.rst:616
msgid ""
"Add :ref:`support for the perf profiler <perf_profiling>` through the new "
"environment variable :envvar:`PYTHONPERFSUPPORT` and command-line option "
":option:`-X perf <-X>`, as well as the new "
":func:`sys.activate_stack_trampoline`, "
":func:`sys.deactivate_stack_trampoline`, and "
":func:`sys.is_stack_trampoline_active` functions. (Design by Pablo Galindo. "
"Contributed by Pablo Galindo and Christian Heimes with contributions from "
"Gregory P. Smith [Google] and Mark Shannon in :gh:`96123`.)"
msgstr ""
"通过新的环境变量 :envvar:`PYTHONPERFSUPPORT` 和命令行选项 :option:`-X perf <-X>` 以及新的 "
":func:`sys.activate_stack_trampoline`, "
":func:`sys.deactivate_stack_trampoline` 和 "
":func:`sys.is_stack_trampoline_active` 函数添加了对 :ref:`perf 性能分析器的支持 "
"<perf_profiling>`。 （由 Pablo Galindo 设计。 由 Pablo Galindo 和 Christian Heimes 在"
" :gh:`96123` 中贡献并包含来自 Gregory P. Smith [Google] 和 Mark Shannon 的帮助。）"

#: ../../whatsnew/3.12.rst:628
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.12.rst:630
msgid "None."
msgstr "无。"

#: ../../whatsnew/3.12.rst:634
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.12.rst:637
msgid "array"
msgstr "array"

#: ../../whatsnew/3.12.rst:639
msgid ""
"The :class:`array.array` class now supports subscripting, making it a "
":term:`generic type`. (Contributed by Jelle Zijlstra in :gh:`98658`.)"
msgstr ""
":class:`array.array` 类现在支持下标，使其成为 :term:`generic type`。 （由 Jelle Zijlstra 在 "
":gh:`98658` 中贡献。）"

#: ../../whatsnew/3.12.rst:643
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.12.rst:645
msgid ""
"The performance of writing to sockets in :mod:`asyncio` has been "
"significantly improved. ``asyncio`` now avoids unnecessary copying when "
"writing to sockets and uses :meth:`~socket.socket.sendmsg` if the platform "
"supports it. (Contributed by Kumar Aditya in :gh:`91166`.)"
msgstr ""
"在 :mod:`asyncio` 中写入套接字的性能得到了显著提高。 ``asyncio`` "
"现在可以避免在写入套接字时进行不必要的复制，并在平台支持的情况下使用 :meth:`~socket.socket.sendmsg`。 （由 Kumar "
"Aditya 在 :gh:`91166` 中贡献。）"

#: ../../whatsnew/3.12.rst:650
msgid ""
"Add :func:`asyncio.eager_task_factory` and "
":func:`asyncio.create_eager_task_factory` functions to allow opting an event"
" loop in to eager task execution, making some use-cases 2x to 5x faster. "
"(Contributed by Jacob Bower & Itamar Oren in :gh:`102853`, :gh:`104140`, and"
" :gh:`104138`)"
msgstr ""
"添加了 :func:`asyncio.eager_task_factory` 和 "
":func:`asyncio.create_eager_task_factory` 函数以允许在主动型任务执行中选择事件循环，使某些用例的速度提升了 2"
" 至 5 倍。 （由 Jacob Bower 和 Itamar Oren 在 :gh:`102853`, :gh:`104140` 和 "
":gh:`104138` 中贡献。）"

#: ../../whatsnew/3.12.rst:655
msgid ""
"On Linux, :mod:`asyncio` uses :class:`!asyncio.PidfdChildWatcher` by default"
" if :func:`os.pidfd_open` is available and functional instead of "
":class:`!asyncio.ThreadedChildWatcher`. (Contributed by Kumar Aditya in "
":gh:`98024`.)"
msgstr ""
"在 Linux 上，如果 :func:`os.pidfd_open` 可用且能工作则 :mod:`asyncio` 默认会使用 "
":class:`!asyncio.PidfdChildWatcher` 而不是 "
":class:`!asyncio.ThreadedChildWatcher`。 （由 Kumar Aditya 在 :gh:`98024` 中贡献。）"

#: ../../whatsnew/3.12.rst:660
msgid ""
"The event loop now uses the best available child watcher for each platform "
"(:class:`!asyncio.PidfdChildWatcher` if supported and "
":class:`!asyncio.ThreadedChildWatcher` otherwise), so manually configuring a"
" child watcher is not recommended. (Contributed by Kumar Aditya in "
":gh:`94597`.)"
msgstr ""
"现在事件循环会针对每个平台使用最佳的可用子监视器（在受支持的情况下使用 :class:`!asyncio.PidfdChildWatcher`，否则使用"
" :class:`!asyncio.ThreadedChildWatcher`），因此不建议手动配置子监视器。 （由 Kumar Aditya 在 "
":gh:`94597` 中贡献。）"

#: ../../whatsnew/3.12.rst:666
msgid ""
"Add *loop_factory* parameter to :func:`asyncio.run` to allow specifying a "
"custom event loop factory. (Contributed by Kumar Aditya in :gh:`99388`.)"
msgstr ""
"为 :func:`asyncio.run` 添加了形参 *loop_factory*，以允许指定自定义事件循环工厂。 （由 Kumar Aditya 在"
" :gh:`99388` 中贡献。）"

#: ../../whatsnew/3.12.rst:670
msgid ""
"Add C implementation of :func:`asyncio.current_task` for 4x-6x speedup. "
"(Contributed by Itamar Oren and Pranav Thulasiram Bhat in :gh:`100344`.)"
msgstr ""
"添加了 :func:`asyncio.current_task` 的 C 实现以实现 4 - 6 倍的加速。 （由 Itamar Oren 和 "
"Pranav Thulasiram Bhat 在 :gh:`100344` 中贡献。）"

#: ../../whatsnew/3.12.rst:673
msgid ""
":func:`asyncio.iscoroutine` now returns ``False`` for generators as "
":mod:`asyncio` does not support legacy generator-based coroutines. "
"(Contributed by Kumar Aditya in :gh:`102748`.)"
msgstr ""
":func:`asyncio.iscoroutine` 现在为生成器返回 ``False``，因为 :mod:`asyncio` "
"不支持传统的基于生成器的协程。 （由 Kumar Aditya 在 :gh:`102748` 中贡献。）"

#: ../../whatsnew/3.12.rst:677
msgid ""
":func:`asyncio.wait` and :func:`asyncio.as_completed` now accepts generators"
" yielding tasks. (Contributed by Kumar Aditya in :gh:`78530`.)"
msgstr ""
":func:`asyncio.wait` 和 :func:`asyncio.as_completed` 现在接受生成器 yield 任务。 （由 "
"Kumar Aditya 在 :gh:`78530` 中贡献。）"

#: ../../whatsnew/3.12.rst:682
msgid "calendar"
msgstr "calendar"

#: ../../whatsnew/3.12.rst:684
msgid ""
"Add enums :data:`calendar.Month` and :data:`calendar.Day` defining months of"
" the year and days of the week. (Contributed by Prince Roshan in "
":gh:`103636`.)"
msgstr ""
"添加了枚举 :data:`calendar.Month` 和 :data:`calendar.Day` 来定义年份中的每一月和星期中的每一日。 （由 "
"Prince Roshan 在 :gh:`103636` 中贡献。）"

#: ../../whatsnew/3.12.rst:689
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.12.rst:691
msgid ""
"Add :const:`csv.QUOTE_NOTNULL` and :const:`csv.QUOTE_STRINGS` flags to "
"provide finer grained control of ``None`` and empty strings by "
":class:`~csv.reader` and :class:`~csv.writer` objects."
msgstr ""
"增加了 :const:`csv.QUOTE_NOTNULL` 和 :const:`csv.QUOTE_STRINGS` 旗标以通过 "
":class:`~csv.reader` 和 :class:`~csv.writer` 对象来提供对 ``None`` 和空字符串更细粒度的控制。"

#: ../../whatsnew/3.12.rst:696
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.12.rst:698
msgid ""
"Pseudo instruction opcodes (which are used by the compiler but do not appear"
" in executable bytecode) are now exposed in the :mod:`dis` module. "
":opcode:`HAVE_ARGUMENT` is still relevant to real opcodes, but it is not "
"useful for pseudo instructions. Use the new :data:`dis.hasarg` collection "
"instead. (Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""
"伪指令操作码（由编译器使用但不会出现在可执行字节码中）现在将暴露在 :mod:`dis` 模块中。 :opcode:`HAVE_ARGUMENT` "
"仍然与实际的操作码相关，但对伪指令来说没有用处。 请改用新的 :data:`dis.hasarg` 多项集。 （由 Irit Katriel 在 "
":gh:`94216` 中贡献。）"

#: ../../whatsnew/3.12.rst:706
msgid ""
"Add the :data:`dis.hasexc` collection to signify instructions that set an "
"exception handler. (Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""
"添加了 :data:`dis.hasexc` 多项集来表示设置异常处理器的指令。 （由 Irit Katriel 在 :gh:`94216` 中贡献。）"

#: ../../whatsnew/3.12.rst:710
msgid "fractions"
msgstr "fractions"

#: ../../whatsnew/3.12.rst:712
msgid ""
"Objects of type :class:`fractions.Fraction` now support float-style "
"formatting. (Contributed by Mark Dickinson in :gh:`100161`.)"
msgstr ""
"类型为 :class:`fractions.Fraction` 的对象现在支持浮点格式。 （由 Mark Dickinson 在 "
":gh:`100161` 中贡献。）"

#: ../../whatsnew/3.12.rst:716
msgid "importlib.resources"
msgstr "importlib.resources"

#: ../../whatsnew/3.12.rst:718
msgid ""
":func:`importlib.resources.as_file` now supports resource directories. "
"(Contributed by Jason R. Coombs in :gh:`97930`.)"
msgstr ""
":func:`importlib.resources.as_file` 现在将支持资源目录。 （由 Jason R. Coombs 在 "
":gh:`97930` 中贡献。）"

#: ../../whatsnew/3.12.rst:721
msgid ""
"Rename first parameter of :func:`importlib.resources.files` to *anchor*. "
"(Contributed by Jason R. Coombs in :gh:`100598`.)"
msgstr ""
"将 :func:`importlib.resources.files` 的第一个形参重命名为 *anchor*。 （由 Jason R. Coombs "
"在 :gh:`100598` 中贡献。）"

#: ../../whatsnew/3.12.rst:725
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.12.rst:727
msgid ""
"Add :func:`inspect.markcoroutinefunction` to mark sync functions that return"
" a :term:`coroutine` for use with :func:`inspect.iscoroutinefunction`. "
"(Contributed by Carlton Gibson in :gh:`99247`.)"
msgstr ""
"增加了 :func:`inspect.markcoroutinefunction` 来标记返回 :term:`coroutine` 的同步函数以便与 "
":func:`inspect.iscoroutinefunction` 一起使用。 （由 Carlton Gibson 在 :gh:`99247` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:731
msgid ""
"Add :func:`inspect.getasyncgenstate` and :func:`inspect.getasyncgenlocals` "
"for determining the current state of asynchronous generators. (Contributed "
"by Thomas Krennwallner in :gh:`79940`.)"
msgstr ""
"添加 :func:`inspect.getasyncgenstate` 和 :func:`inspect.getasyncgenlocals` "
"用来确定异步发生器的当前状态。 （由 Thomas Krennwallner 在 :gh:`79940` 中贡献。）"

#: ../../whatsnew/3.12.rst:735
msgid ""
"The performance of :func:`inspect.getattr_static` has been considerably "
"improved. Most calls to the function should be at least 2x faster than they "
"were in Python 3.11. (Contributed by Alex Waygood in :gh:`103193`.)"
msgstr ""
":func:`inspect.getattr_static` 的性能已得到显著提升。 对该函数的大多数调用相比 Python 3.11 至少应有 2 "
"倍的加速。 （由 Alex Waygood 在 :gh:`103193` 中贡献。）"

#: ../../whatsnew/3.12.rst:740
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.12.rst:742
msgid ""
"Add :func:`itertools.batched` for collecting into even-sized tuples where "
"the last batch may be shorter than the rest. (Contributed by Raymond "
"Hettinger in :gh:`98363`.)"
msgstr ""
"增加了 :func:`itertools.batched` 用来将数据收集为相同大小的元组，其中最后一个批次的长度可能会比其余的批次短。 （由 "
"Raymond Hettinger 在 :gh:`98363` 中贡献。）"

#: ../../whatsnew/3.12.rst:747
msgid "math"
msgstr "math"

#: ../../whatsnew/3.12.rst:749
msgid ""
"Add :func:`math.sumprod` for computing a sum of products. (Contributed by "
"Raymond Hettinger in :gh:`100485`.)"
msgstr ""
"添加了 :func:`math.sumprod` 用于计算乘积之和。 （由 Raymond Hettinger 在 :gh:`100485` 中贡献。）"

#: ../../whatsnew/3.12.rst:752
msgid ""
"Extend :func:`math.nextafter` to include a *steps* argument for moving up or"
" down multiple steps at a time. (Contributed by Matthias Goergens, Mark "
"Dickinson, and Raymond Hettinger in :gh:`94906`.)"
msgstr ""
"扩展了 :func:`math.nextafter` 以包括一个 *steps* 参数用于一次性向上或向下移动多步。 （由 Matthias "
"Goergens, Mark Dickinson 和 Raymond Hettinger 在 :gh:`94906` 中贡献。）"

#: ../../whatsnew/3.12.rst:757
msgid "os"
msgstr "os"

#: ../../whatsnew/3.12.rst:759
msgid ""
"Add :const:`os.PIDFD_NONBLOCK` to open a file descriptor for a process with "
":func:`os.pidfd_open` in non-blocking mode. (Contributed by Kumar Aditya in "
":gh:`93312`.)"
msgstr ""
"增加了 :const:`os.PIDFD_NONBLOCK` 以在非阻塞模式下打开具有 :func:`os.pidfd_open` 的进程的文件描述符。"
" （由 Kumar Aditya 在 :gh:`93312` 中贡献。）"

#: ../../whatsnew/3.12.rst:763
msgid ""
":class:`os.DirEntry` now includes an :meth:`os.DirEntry.is_junction` method "
"to check if the entry is a junction. (Contributed by Charles Machalow in "
":gh:`99547`.)"
msgstr ""
":class:`os.DirEntry` 现在包括一个 :meth:`os.DirEntry.is_junction` 方法来检查该条目是否为目录联接。"
" （由 Charles Machalow 在 :gh:`99547` 中贡献。）"

#: ../../whatsnew/3.12.rst:767
msgid ""
"Add :func:`os.listdrives`, :func:`os.listvolumes` and :func:`os.listmounts` "
"functions on Windows for enumerating drives, volumes and mount points. "
"(Contributed by Steve Dower in :gh:`102519`.)"
msgstr ""
"在 Windows 版中添加 :func:`os.listdrives`、:func:`os.listvolumes` 和 "
":func:`os.listmounts` 函数，用于枚举驱动器、卷和挂载点。 （由 Steve Dower 在 :gh:`102519` 中贡献。）"

#: ../../whatsnew/3.12.rst:771
msgid ""
":func:`os.stat` and :func:`os.lstat` are now more accurate on Windows. The "
"``st_birthtime`` field will now be filled with the creation time of the "
"file, and ``st_ctime`` is deprecated but still contains the creation time "
"(but in the future will return the last metadata change, for consistency "
"with other platforms). ``st_dev`` may be up to 64 bits and ``st_ino`` up to "
"128 bits depending on your file system, and ``st_rdev`` is always set to "
"zero rather than incorrect values. Both functions may be significantly "
"faster on newer releases of Windows. (Contributed by Steve Dower in "
":gh:`99726`.)"
msgstr ""
":func:`os.stat` 和 :func:`os.lstat` 现在在 Windows 系统上更准确了。 ``st_birthtime`` "
"字段现在将使用文件的创建时间，``st_ctime`` 已弃用，但仍包含创建时间（但为了与其他平台保持一致，将来将返回最后一次元数据更改时间）。 "
"``st_dev`` 可以高达 64 位，``st_ino`` 可以高达 128 位，具体取决于你的文件系统，并且 ``st_rdev`` "
"始终设置为零，而非不正确的值。 这两个函数在较新版本的 Windows 上将会明显更快。  （由 Steve Dower 在 :gh:`99726` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:782
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.12.rst:784
msgid ""
"Add :func:`os.path.isjunction` to check if a given path is a junction. "
"(Contributed by Charles Machalow in :gh:`99547`.)"
msgstr ""
"添加 :func:`os.path.isjunction` 以检查给定路径是否为目录联接。 （由 Charles Machalow 在 "
":gh:`99547` 中贡献。）"

#: ../../whatsnew/3.12.rst:787
msgid ""
"Add :func:`os.path.splitroot` to split a path into a triad ``(drive, root, "
"tail)``. (Contributed by Barney Gale in :gh:`101000`.)"
msgstr ""
"添加 :func:`os.path.splitroot` 以将路径拆分为三元组 ``(drive, root, tail)``。（由 Barney "
"Gale 在 :gh:`101000` 中贡献。）"

#: ../../whatsnew/3.12.rst:791
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.12.rst:793
msgid ""
"Add support for subclassing :class:`pathlib.PurePath` and "
":class:`pathlib.Path`, plus their Posix- and Windows-specific variants. "
"Subclasses may override the :meth:`pathlib.PurePath.with_segments` method to"
" pass information between path instances."
msgstr ""
"增加对子类化 :class:`pathlib.PurePath` 和 :class:`pathlib.Path`，加上它们的 Posix 和 "
"Windows 专属变体形式的支持。 子类可以重载 :meth:`pathlib.PurePath.with_segments` "
"方法来在路径实例之间传递信息。"

#: ../../whatsnew/3.12.rst:798
msgid ""
"Add :meth:`pathlib.Path.walk` for walking the directory trees and generating"
" all file or directory names within them, similar to :func:`os.walk`. "
"(Contributed by Stanislav Zmiev in :gh:`90385`.)"
msgstr ""
"添加 :meth:`pathlib.Path.walk` 用于遍历目录树并生成其中的所有文件或目录名，类似于 :func:`os.walk`。 （由 "
"Stanislav Zmiev 在 :gh:`90385` 中贡献。）"

#: ../../whatsnew/3.12.rst:802
msgid ""
"Add *walk_up* optional parameter to :meth:`pathlib.PurePath.relative_to` to "
"allow the insertion of ``..`` entries in the result; this behavior is more "
"consistent with :func:`os.path.relpath`. (Contributed by Domenico Ragusa in "
":gh:`84538`.)"
msgstr ""
"在 :meth:`pathlib.PurePath.relative_to` 中添加了 *walk_up* 可选形参以允许在结果中插入 ``..`` "
"条目；此行为与 :func:`os.path.relpath` 更为一致。（由 Domenico Ragusa 在 :gh:`84538` 中贡献。）"

#: ../../whatsnew/3.12.rst:807
msgid ""
"Add :meth:`pathlib.Path.is_junction` as a proxy to "
":func:`os.path.isjunction`. (Contributed by Charles Machalow in "
":gh:`99547`.)"
msgstr ""
"添加 :meth:`pathlib.Path.is_junction` 作为 :func:`os.path.isjunction` 的代理。 （由 "
"Charles Machalow 在 :gh:`99547` 中贡献。）"

#: ../../whatsnew/3.12.rst:810
msgid ""
"Add *case_sensitive* optional parameter to :meth:`pathlib.Path.glob`, "
":meth:`pathlib.Path.rglob` and :meth:`pathlib.PurePath.match` for matching "
"the path's case sensitivity, allowing for more precise control over the "
"matching process."
msgstr ""
"为 :meth:`pathlib.Path.glob`、:meth:`pathlib.Path.rglob` 和 "
":meth:`pathlib.PurePath.match` 添加可选形参 "
"*case_sensitive*，以匹配路径的大小写敏感性，从而对匹配过程进行更精确的控制。"

#: ../../whatsnew/3.12.rst:815
msgid "platform"
msgstr "platform"

#: ../../whatsnew/3.12.rst:817
msgid ""
"Add support for detecting Windows 11 and Windows Server releases past 2012. "
"Previously, lookups on Windows Server platforms newer than Windows Server "
"2012 and on Windows 11 would return ``Windows-10``. (Contributed by Steve "
"Dower in :gh:`89545`.)"
msgstr ""
"增加了对 Windows 11 和 Windows Server 2012 之后的发行版的检测。 在之前版本中，在 Windows Server "
"2012 以上的 Windows Server 平台和 Windows 11 上的查询将返回 ``Windows-10``。 （由 Steve "
"Dower 在 :gh:`89545` 中贡献。）"

#: ../../whatsnew/3.12.rst:823
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.12.rst:825
msgid ""
"Add convenience variables to hold values temporarily for debug session and "
"provide quick access to values like the current frame or the return value. "
"(Contributed by Tian Gao in :gh:`103693`.)"
msgstr "添加便利变量以临时保存调试会话的值，并提供对当前帧或返回值等值的快速访问。 （由高天在 :gh:`103693` 中贡献。）"

#: ../../whatsnew/3.12.rst:831
msgid "random"
msgstr "random"

#: ../../whatsnew/3.12.rst:833
msgid ""
"Add :func:`random.binomialvariate`. (Contributed by Raymond Hettinger in "
":gh:`81620`.)"
msgstr ""
"添加了 :func:`random.binomialvariate`。 （由 Raymond Hettinger 在 :gh:`81620` 中贡献。）"

#: ../../whatsnew/3.12.rst:836
msgid ""
"Add a default of ``lambd=1.0`` to :func:`random.expovariate`. (Contributed "
"by Raymond Hettinger in :gh:`100234`.)"
msgstr ""
"在 :func:`random.expovariate` 中添加默认值 ``lambd=1.0`` 。 （由 Raymond Hettinger 在 "
":gh:`100234` 中贡献。）"

#: ../../whatsnew/3.12.rst:840
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.12.rst:842
msgid ""
":func:`shutil.make_archive` now passes the *root_dir* argument to custom "
"archivers which support it. In this case it no longer temporarily changes "
"the current working directory of the process to *root_dir* to perform "
"archiving. (Contributed by Serhiy Storchaka in :gh:`74696`.)"
msgstr ""
":func:`shutil.make_archive` 现在将 *rootdir* 参数传递给支持它的自定义存档程序。 "
"在这种情况下，它不再临时将进程的当前工作目录更改为 *rootdir* 来执行存档。 （由 Serhiy Storchaka 在 :gh:`74696`"
" 中贡献。）"

#: ../../whatsnew/3.12.rst:848
msgid ""
":func:`shutil.rmtree` now accepts a new argument *onexc* which is an error "
"handler like *onerror* but which expects an exception instance rather than a"
" *(typ, val, tb)* triplet. *onerror* is deprecated. (Contributed by Irit "
"Katriel in :gh:`102828`.)"
msgstr ""
":func:`shutil.rmtree` 现在接受一个新的参数 *onexc*，它是一个类似 *onerror* "
"的错误处理器，但它接受一个异常实例而不是一个 *(typ, val, tb)* 三元组。 *onerror* 已被弃用。 （由 Irit Katriel"
" 在 :gh:`102828` 中贡献。）"

#: ../../whatsnew/3.12.rst:853
msgid ""
":func:`shutil.which` now consults the *PATHEXT* environment variable to find"
" matches within *PATH* on Windows even when the given *cmd* includes a "
"directory component. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.which` 现在即使给定的 *cmd* 包含目录组件，在 Windows 系统上也会参考 *PATHEXT* 环境变量在 "
"*PATH* 中查找匹配项。 （由 Charles Machalow 在 :gh:`103179` 中贡献。）"

#: ../../whatsnew/3.12.rst:858
msgid ""
":func:`shutil.which` will call ``NeedCurrentDirectoryForExePathW`` when "
"querying for executables on Windows to determine if the current working "
"directory should be prepended to the search path. (Contributed by Charles "
"Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.which` 将在 Windows 上查询可执行文件时调用 "
"``NeedCurrentDirectoryForExePathW``，以确定是否应将当前工作目录预先设置为搜索路径。 （由 Charles "
"Machalow 在 :gh:`103179` 中贡献。）"

#: ../../whatsnew/3.12.rst:863
msgid ""
":func:`shutil.which` will return a path matching the *cmd* with a component "
"from ``PATHEXT`` prior to a direct match elsewhere in the search path on "
"Windows. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""
"在 Windows 上 :func:`shutil.which` 将在搜索路径的其他地方直接匹配之前返回 *cmd* 与来自 ``PATHEXT`` "
"的组件相匹配的路径。 （由 Charles Machalow 在 :gh:`103179` 中贡献。）"

#: ../../whatsnew/3.12.rst:869 ../../whatsnew/3.12.rst:1546
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.12.rst:871
msgid ""
"Add a :ref:`command-line interface <sqlite3-cli>`. (Contributed by Erlend E."
" Aasland in :gh:`77617`.)"
msgstr ""
"增加了一个 :ref:`命令行接口 <sqlite3-cli>`。 （由 Erlend E. Aasland 在 :gh:`77617` 中贡献。）"

#: ../../whatsnew/3.12.rst:874
msgid ""
"Add the :attr:`sqlite3.Connection.autocommit` attribute to "
":class:`sqlite3.Connection` and the *autocommit* parameter to "
":func:`sqlite3.connect` to control :pep:`249`-compliant :ref:`transaction "
"handling <sqlite3-transaction-control-autocommit>`. (Contributed by Erlend "
"E. Aasland in :gh:`83638`.)"
msgstr ""
"向 :class:`sqlite3.Connection` 添加 :attr:`sqlite3.Connection.autocommit` 属性并向 "
":func:`sqlite3.connect` 添加 *autocommit* 形参用于控制兼容 :pep:`249` 的 :ref:`事务处理 "
"<sqlite3-transaction-control-autocommit>`。 （由 Erlend E. Aasland 在 "
":gh:`83638` 中贡献。）"

#: ../../whatsnew/3.12.rst:881
msgid ""
"Add *entrypoint* keyword-only parameter to "
":meth:`sqlite3.Connection.load_extension`, for overriding the SQLite "
"extension entry point. (Contributed by Erlend E. Aasland in :gh:`103015`.)"
msgstr ""
"向 :meth:`sqlite3.Connection.load_extension` 添加 *entrypoint* 仅限关键字形参，用于覆盖 "
"SQLite 扩展入口点。 （由 Erlend E. Aasland 在 :gh:`103015` 中贡献。）"

#: ../../whatsnew/3.12.rst:886
msgid ""
"Add :meth:`sqlite3.Connection.getconfig` and "
":meth:`sqlite3.Connection.setconfig` to :class:`sqlite3.Connection` to make "
"configuration changes to a database connection. (Contributed by Erlend E. "
"Aasland in :gh:`103489`.)"
msgstr ""
"向 :class:`sqlite3.Connection` 添加 :meth:`sqlite3.Connection.getconfig` 和 "
":meth:`sqlite3.Connection.setconfig` 用于对数据库连接进行配置修改。 （由 Erlend E. Aasland 在 "
":gh:`103489` 中贡献。）"

#: ../../whatsnew/3.12.rst:892
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.12.rst:894
msgid ""
"Extend :func:`statistics.correlation` to include as a ``ranked`` method for "
"computing the Spearman correlation of ranked data. (Contributed by Raymond "
"Hettinger in :gh:`95861`.)"
msgstr ""
"扩展 :func:`statistics.correlation` 以 ``ranked`` 方法的形式包括对分级数据的斯皮尔曼相关性计算。 （由 "
"Raymond Hettinger 在 :gh:`95861` 中贡献。）"

#: ../../whatsnew/3.12.rst:899
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.12.rst:901
msgid ""
"Add the :mod:`sys.monitoring` namespace to expose the new :ref:`PEP 669 "
"<whatsnew312-pep669>` monitoring API. (Contributed by Mark Shannon in "
":gh:`103082`.)"
msgstr ""
"添加了 :mod:`sys.monitoring` 命名空间以公开新的 :ref:`PEP 669 <whatsnew312-pep669>` 监控 "
"API。 （由 Mark Shannon 在 :gh:`103082` 中贡献。）"

#: ../../whatsnew/3.12.rst:905
msgid ""
"Add :func:`sys.activate_stack_trampoline` and "
":func:`sys.deactivate_stack_trampoline` for activating and deactivating "
"stack profiler trampolines, and :func:`sys.is_stack_trampoline_active` for "
"querying if stack profiler trampolines are active. (Contributed by Pablo "
"Galindo and Christian Heimes with contributions from Gregory P. Smith "
"[Google] and Mark Shannon in :gh:`96123`.)"
msgstr ""
"增加了 :func:`sys.activate_stack_trampoline` 和 "
":func:`sys.deactivate_stack_trampoline` 用于激活和停用栈性能分析器 trampoline，以及 "
":func:`sys.is_stack_trampoline_active` 用于查询栈性能分析器 trampoline 是否激活。 （基于 "
"Gregory P. Smith [Google] 和 Mark Shannon 的贡献由 Pablo Galindo 和 Christian "
"Heimes 在 :gh:`96123` 中贡献。）"

#: ../../whatsnew/3.12.rst:914
msgid ""
"Add :data:`sys.last_exc` which holds the last unhandled exception that was "
"raised (for post-mortem debugging use cases). Deprecate the three fields "
"that have the same information in its legacy form: :data:`sys.last_type`, "
":data:`sys.last_value` and :data:`sys.last_traceback`. (Contributed by Irit "
"Katriel in :gh:`102778`.)"
msgstr ""
"增加了 :data:`sys.last_exc` 用于保存最新引发的未处理异常（针对事后调试的应用场景）。 弃用了以三个字段来保存相同信息的旧形式: "
":data:`sys.last_type`, :data:`sys.last_value` 和 :data:`sys.last_traceback`。 "
"（由 Irit Katriel 在 :gh:`102778` 中贡献。）"

#: ../../whatsnew/3.12.rst:920 ../../whatsnew/3.12.rst:1741
msgid ""
":func:`sys._current_exceptions` now returns a mapping from thread-id to an "
"exception instance, rather than to a ``(typ, exc, tb)`` tuple. (Contributed "
"by Irit Katriel in :gh:`103176`.)"
msgstr ""
"现在 :func:`sys._current_exceptions` 将返回从线程 ID 到异常实例的映射，而不是到 ``(typ, exc, "
"tb)`` 元组的映射。 （由 Irit Katriel 在 :gh:`103176` 中贡献。）"

#: ../../whatsnew/3.12.rst:924
msgid ""
":func:`sys.setrecursionlimit` and :func:`sys.getrecursionlimit`. The "
"recursion limit now applies only to Python code. Builtin functions do not "
"use the recursion limit, but are protected by a different mechanism that "
"prevents recursion from causing a virtual machine crash."
msgstr ""
":func:`sys.setrecursionlimit` 和 :func:`sys.getrecursionlimit`。 递归限制现在只应用于 "
"Python 代码。 内置函数不使用该递归限制，但受到另一种可防止递归导致虚拟机崩溃的机制保护。"

#: ../../whatsnew/3.12.rst:930
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.12.rst:932
msgid ""
"The :class:`tempfile.NamedTemporaryFile` function has a new optional "
"parameter *delete_on_close* (Contributed by Evgeny Zorin in :gh:`58451`.)"
msgstr ""
":class:`tempfile.NamedTemporaryFile` 函数增加了一个新的可选形参 *delete_on_close*。 （由 "
"Evgeny Zorin 在 :gh:`58451` 中贡献。）"

#: ../../whatsnew/3.12.rst:934
msgid ""
":func:`tempfile.mkdtemp` now always returns an absolute path, even if the "
"argument provided to the *dir* parameter is a relative path."
msgstr ":func:`tempfile.mkdtemp` 现在将总是返回一个绝对路径，即使提供给 *dir* 形参的参数是一个相对路径。"

#: ../../whatsnew/3.12.rst:938
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.12.rst:940
msgid ""
"Add :func:`threading.settrace_all_threads` and "
":func:`threading.setprofile_all_threads` that allow to set tracing and "
"profiling functions in all running threads in addition to the calling one. "
"(Contributed by Pablo Galindo in :gh:`93503`.)"
msgstr ""
"增加了 :func:`threading.settrace_all_threads` 和 "
":func:`threading.setprofile_all_threads` "
"以允许在所运行的全部线程中设置追踪和性能分析函数而不是只在调用方线程中。 （由 Pablo Galindo 在 :gh:`93503` 中贡献。）"

#: ../../whatsnew/3.12.rst:946
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.12.rst:948
msgid ""
"``tkinter.Canvas.coords()`` now flattens its arguments. It now accepts not "
"only coordinates as separate arguments (``x1, y1, x2, y2, ...``) and a "
"sequence of coordinates (``[x1, y1, x2, y2, ...]``), but also coordinates "
"grouped in pairs (``(x1, y1), (x2, y2), ...`` and ``[(x1, y1), (x2, y2), "
"...]``), like ``create_*()`` methods. (Contributed by Serhiy Storchaka in "
":gh:`94473`.)"
msgstr ""
"现在 ``tkinter.Canvas.coords()`` 会展平其参数。 它现在不仅接受单独参数形式的坐标 (``x1, y1, x2, y2, "
"...``) 以及由坐标组成的序列 (``[x1, y1, x2, y2, ...]``)，也接受成对分组 (``(x1, y1), (x2, y2),"
" ...`` 和 ``[(x1, y1), (x2, y2), ...]``) 形式的坐标，就像 ``create_*()`` 方法一样。 （由 "
"Serhiy Storchaka 在 :gh:`94473` 中贡献。）"

#: ../../whatsnew/3.12.rst:957
msgid "tokenize"
msgstr "tokenize"

#: ../../whatsnew/3.12.rst:959
msgid ""
"The :mod:`tokenize` module includes the changes introduced in :pep:`701`. "
"(Contributed by Marta Gómez Macías and Pablo Galindo in :gh:`102856`.) See "
":ref:`whatsnew312-porting-to-python312` for more information on the changes "
"to the :mod:`tokenize` module."
msgstr ""
":mod:`tokenize` 模块包括了 :pep:`701` 所引入的更改。 （由 Marta Gómez Macías 和 Pablo "
"Galindo 在 :gh:`102856` 中贡献。） 请参阅 :ref:`whatsnew312-porting-to-python312` "
"了解有关对 :mod:`tokenize` 模块的更改详情。"

#: ../../whatsnew/3.12.rst:965
msgid "types"
msgstr "types"

#: ../../whatsnew/3.12.rst:967
msgid ""
"Add :func:`types.get_original_bases` to allow for further introspection of "
":ref:`user-defined-generics` when subclassed. (Contributed by James Hilton-"
"Balfe and Alex Waygood in :gh:`101827`.)"
msgstr ""
"增加了 :func:`types.get_original_bases` 以允许在子类化时继续对 :ref:`user-defined-"
"generics` 进行内省。 （由 James Hilton-Balfe 和 Alex Waygood 在 :gh:`101827` 中贡献。）"

#: ../../whatsnew/3.12.rst:974
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.12.rst:976
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols "
"<typing.runtime_checkable>` now use :func:`inspect.getattr_static` rather "
"than :func:`hasattr` to lookup whether attributes exist. This means that "
"descriptors and :meth:`~object.__getattr__` methods are no longer "
"unexpectedly evaluated during ``isinstance()`` checks against runtime-"
"checkable protocols. However, it may also mean that some objects which used "
"to be considered instances of a runtime-checkable protocol may no longer be "
"considered instances of that protocol on Python 3.12+, and vice versa. Most "
"users are unlikely to be affected by this change. (Contributed by Alex "
"Waygood in :gh:`102433`.)"
msgstr ""
"针对 :func:`运行时可检测协议 <typing.runtime_checkable>` 的 :func:`isinstance` 检测现在会使用 "
":func:`inspect.getattr_static` 而不是 :func:`hasattr` 来查找属性是否存在。 这意味着描述器和 "
":meth:`~object.__getattr__` 方法在针对运行时可检测协议的 ``isinstance()`` 检测期间不会被意外地求值。 "
"但是，这也意味着某些原来被视为运行时可检测协议的实例的对象在 Python 3.12+ 上将不再被视为运行时可检测协议的实例，反之亦然。 "
"大部分用户都不太可能受到这一改变的影响。 （由 Alex Waygood 在 :gh:`102433` 中贡献。）"

#: ../../whatsnew/3.12.rst:987
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at"
" runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. For "
"example::"
msgstr ""
"现在运行时可检测协议的成员在运行时一旦创建了相应的类就将被视为“已冻结”。 "
"作用于运行时可检测协议的猴子补丁属性将仍然可用，但不会再影响将对象与协议进行比较的 :func:`isinstance` 检测中。 例如::"

#: ../../whatsnew/3.12.rst:992
msgid ""
">>> from typing import Protocol, runtime_checkable\n"
">>> @runtime_checkable\n"
"... class HasX(Protocol):\n"
"...     x = 1\n"
"...\n"
">>> class Foo: ...\n"
"...\n"
">>> f = Foo()\n"
">>> isinstance(f, HasX)\n"
"False\n"
">>> f.x = 1\n"
">>> isinstance(f, HasX)\n"
"True\n"
">>> HasX.y = 2\n"
">>> isinstance(f, HasX)  # unchanged, even though HasX now also has a \"y\" attribute\n"
"True"
msgstr ""
">>> from typing import Protocol, runtime_checkable\n"
">>> @runtime_checkable\n"
"... class HasX(Protocol):\n"
"...     x = 1\n"
"...\n"
">>> class Foo: ...\n"
"...\n"
">>> f = Foo()\n"
">>> isinstance(f, HasX)\n"
"False\n"
">>> f.x = 1\n"
">>> isinstance(f, HasX)\n"
"True\n"
">>> HasX.y = 2\n"
">>> isinstance(f, HasX)  # 无变化，虽然 HasX 现在也有一个 \"y\" 属性\n"
"True"

#: ../../whatsnew/3.12.rst:1009
msgid ""
"This change was made in order to speed up ``isinstance()`` checks against "
"runtime-checkable protocols."
msgstr "应用这项改变是为了提高针对运行时可检测协议的 ``isinstance()`` 检测速度。"

#: ../../whatsnew/3.12.rst:1012
msgid ""
"The performance profile of :func:`isinstance` checks against :func:`runtime-"
"checkable protocols <typing.runtime_checkable>` has changed significantly. "
"Most ``isinstance()`` checks against protocols with only a few members "
"should be at least 2x faster than in 3.11, and some may be 20x faster or "
"more. However, ``isinstance()`` checks against protocols with many members "
"may be slower than in Python 3.11. (Contributed by Alex Waygood in "
":gh:`74690` and :gh:`103193`.)"
msgstr ""
"针对 :func:`运行时可检测协议 <typing.runtime_checkable>` 的 :func:`isinstance` "
"检测的性能表现有显著的改进。 对于仅有少量成员的协议的大部分 ``isinstance()`` 检测相比 3.11 应当至少有 2 倍的加速。 "
"不过，对于具有大量成员的协议的 ``isinstance()`` 检测可能会慢于 Python 3.11。 （由 Alex Waygood 在 "
":gh:`74690` 和 :gh:`103193` 中贡献。）.)"

#: ../../whatsnew/3.12.rst:1020
msgid ""
"All :data:`typing.TypedDict` and :data:`typing.NamedTuple` classes now have "
"the ``__orig_bases__`` attribute. (Contributed by Adrian Garcia Badaracco in"
" :gh:`103699`.)"
msgstr ""
"现在所有 :data:`typing.TypedDict` 和 :data:`typing.NamedTuple` 类都具有 "
"``__orig_bases__`` 属性。 （由 Adrian Garcia Badaracco 在 :gh:`103699` 中贡献。）"

#: ../../whatsnew/3.12.rst:1024
msgid ""
"Add ``frozen_default`` parameter to :func:`typing.dataclass_transform`. "
"(Contributed by Erik De Bonte in :gh:`99957`.)"
msgstr ""
"向 :func:`typing.dataclass_transform` 添加了 ``frozen_default`` 形参。 （由 Erik De "
"Bonte 在 :gh:`99957` 中贡献。）"

#: ../../whatsnew/3.12.rst:1028
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.12.rst:1030
msgid ""
"The Unicode database has been updated to version 15.0.0. (Contributed by "
"Benjamin Peterson in :gh:`96734`)."
msgstr "Unicode 数据库已更新到 15.0.0 版。 （由 Benjamin Peterson 在 :gh:`96734` 中贡献。）"

#: ../../whatsnew/3.12.rst:1034 ../../whatsnew/3.12.rst:1586
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.12.rst:1036
msgid ""
"Add a ``--durations`` command line option, showing the N slowest test "
"cases::"
msgstr "增加了 ``--durations`` 命令行选项，显示 N 个最慢的测试用例::"

#: ../../whatsnew/3.12.rst:1038
msgid ""
"python3 -m unittest --durations=3 lib.tests.test_threading\n"
".....\n"
"Slowest test durations\n"
"----------------------------------------------------------------------\n"
"1.210s     test_timeout (Lib.test.test_threading.BarrierTests)\n"
"1.003s     test_default_timeout (Lib.test.test_threading.BarrierTests)\n"
"0.518s     test_timeout (Lib.test.test_threading.EventTests)\n"
"\n"
"(0.000 durations hidden.  Use -v to show these durations.)\n"
"----------------------------------------------------------------------\n"
"Ran 158 tests in 9.869s\n"
"\n"
"OK (skipped=3)"
msgstr ""
"python3 -m unittest --durations=3 lib.tests.test_threading\n"
".....\n"
"Slowest test durations\n"
"----------------------------------------------------------------------\n"
"1.210s     test_timeout (Lib.test.test_threading.BarrierTests)\n"
"1.003s     test_default_timeout (Lib.test.test_threading.BarrierTests)\n"
"0.518s     test_timeout (Lib.test.test_threading.EventTests)\n"
"\n"
"(0.000 durations hidden.  Use -v to show these durations.)\n"
"----------------------------------------------------------------------\n"
"Ran 158 tests in 9.869s\n"
"\n"
"OK (skipped=3)"

#: ../../whatsnew/3.12.rst:1052
msgid "(Contributed by Giampaolo Rodola in :gh:`48330`)"
msgstr "（由 Giampaolo Rodola 在 :gh:`48330` 中贡献。）"

#: ../../whatsnew/3.12.rst:1055
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.12.rst:1057
msgid ""
"Add a :ref:`command-line interface <uuid-cli>`. (Contributed by Adam Chhina "
"in :gh:`88597`.)"
msgstr "增加了一个 :ref:`命令行接口 <uuid-cli>`。 （由 Adam Chhina 在 :gh:`88597` 中贡献。）"

#: ../../whatsnew/3.12.rst:1062
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.12.rst:1064
msgid ""
"Remove ``wstr`` and ``wstr_length`` members from Unicode objects. It reduces"
" object size by 8 or 16 bytes on 64bit platform. (:pep:`623`) (Contributed "
"by Inada Naoki in :gh:`92536`.)"
msgstr ""
"从 Unicode 对象中移除了 ``wstr`` 和 ``wstr_length`` 成员。 这使得对象大小在 64 位平台上减少了 8 个或 16 "
"个字节。 (:pep:`623`) （由 Inada Naoki 在 :gh:`92536` 中贡献。）"

#: ../../whatsnew/3.12.rst:1068
msgid ""
"Add experimental support for using the BOLT binary optimizer in the build "
"process, which improves performance by 1-5%. (Contributed by Kevin "
"Modzelewski in :gh:`90536` and tuned by Donghee Na in :gh:`101525`)"
msgstr ""
"增加了在构建进程中使用 BOLT 二进制优化器的实验性支持，这将使得性能提升 1-5%。 （由 Kevin Modzelewski 在 "
":gh:`90536` 中贡献并由 Donghee Na 在 :gh:`101525` 中微调。 ）"

#: ../../whatsnew/3.12.rst:1072
msgid ""
"Speed up the regular expression substitution (functions :func:`re.sub` and "
":func:`re.subn` and corresponding :class:`!re.Pattern` methods) for "
"replacement strings containing group references by 2--3 times. (Contributed "
"by Serhiy Storchaka in :gh:`91524`.)"
msgstr ""
"对于包含分组引用的替换字符串的正则表达式替换（包括 :func:`re.sub` 和 :func:`re.subn` 函数及对应的 "
":class:`!re.Pattern` 方法）可加速 2--3 倍。 （由 Serhiy Storchaka 在 :gh:`91524` 中贡献。）"

#: ../../whatsnew/3.12.rst:1077
msgid ""
"Speed up :class:`asyncio.Task` creation by deferring expensive string "
"formatting. (Contributed by Itamar Oren in :gh:`103793`.)"
msgstr ""
"通过推迟高消耗的字符串格式化来加速 :class:`asyncio.Task` 的创建的。 （由 Itamar Oren 在 :gh:`103793` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:1080
msgid ""
"The :func:`tokenize.tokenize` and :func:`tokenize.generate_tokens` functions"
" are up to 64% faster as a side effect of the changes required to cover "
":pep:`701` in the :mod:`tokenize` module. (Contributed by Marta Gómez Macías"
" and Pablo Galindo in :gh:`102856`.)"
msgstr ""
"作为在 :mod:`tokenize` 模块中应用 :pep:`701` 所要求的更改的附带效果，:func:`tokenize.tokenize` 和"
" :func:`tokenize.generate_tokens` 函数可加速至多 64%。 （由 Marta Gómez Macías 和 Pablo"
" Galindo 在 :gh:`102856` 中贡献。）"

#: ../../whatsnew/3.12.rst:1085
msgid ""
"Speed up :func:`super` method calls and attribute loads via the new "
":opcode:`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer and "
"Vladimir Matveev in :gh:`103497`.)"
msgstr ""
"通过新的 :opcode:`LOAD_SUPER_ATTR` 指令加速 :func:`super` 方法调用和属性加载。 （由 Carl Meyer 和"
" Vladimir Matveev 在 :gh:`103497` 中贡献。）"

#: ../../whatsnew/3.12.rst:1091
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.12.rst:1093
msgid ""
"Remove the :opcode:`!LOAD_METHOD` instruction. It has been merged into "
":opcode:`LOAD_ATTR`. :opcode:`LOAD_ATTR` will now behave like the old "
":opcode:`!LOAD_METHOD` instruction if the low bit of its oparg is set. "
"(Contributed by Ken Jin in :gh:`93429`.)"
msgstr ""
"移除了 :opcode:`!LOAD_METHOD` 指令。 它已被合并至 :opcode:`LOAD_ATTR`。 现在如果设置了 "
":opcode:`LOAD_ATTR` 的 oparg 比特位则它的行为将类似原来的 :opcode:`!LOAD_METHOD`。 （由 Ken "
"Jin 在 :gh:`93429` 中贡献。）"

#: ../../whatsnew/3.12.rst:1098
msgid ""
"Remove the :opcode:`!JUMP_IF_FALSE_OR_POP` and "
":opcode:`!JUMP_IF_TRUE_OR_POP` instructions. (Contributed by Irit Katriel in"
" :gh:`102859`.)"
msgstr ""
"移除了 :opcode:`!JUMP_IF_FALSE_OR_POP` 和 :opcode:`!JUMP_IF_TRUE_OR_POP` 指令。 （由 "
"Irit Katriel 在 :gh:`102859` 中贡献。）"

#: ../../whatsnew/3.12.rst:1101
msgid ""
"Remove the :opcode:`!PRECALL` instruction. (Contributed by Mark Shannon in "
":gh:`92925`.)"
msgstr "移除了 :opcode:`!PRECALL` 指令。 （由 Mark Shannon 在 :gh:`92925` 中贡献。）"

#: ../../whatsnew/3.12.rst:1104
msgid ""
"Add the :opcode:`BINARY_SLICE` and :opcode:`STORE_SLICE` instructions. "
"(Contributed by Mark Shannon in :gh:`94163`.)"
msgstr ""
"添加了 :opcode:`BINARY_SLICE` 和 :opcode:`STORE_SLICE` 指令。 （由 Mark Shannon 在 "
":gh:`94163` 中贡献。）"

#: ../../whatsnew/3.12.rst:1107
msgid ""
"Add the :opcode:`CALL_INTRINSIC_1` instructions. (Contributed by Mark "
"Shannon in :gh:`99005`.)"
msgstr ""
"添加了 :opcode:`CALL_INTRINSIC_1` 指令。 （由 Mark Shannon 在 :gh:`99005` 中贡献。）"

#: ../../whatsnew/3.12.rst:1110
msgid ""
"Add the :opcode:`CALL_INTRINSIC_2` instruction. (Contributed by Irit Katriel"
" in :gh:`101799`.)"
msgstr ""
"添加了 :opcode:`CALL_INTRINSIC_2` 指令。 （由 Irit Katriel 在 :gh:`101799` 中贡献。）"

#: ../../whatsnew/3.12.rst:1113
msgid ""
"Add the :opcode:`CLEANUP_THROW` instruction. (Contributed by Brandt Bucher "
"in :gh:`90997`.)"
msgstr "添加了 :opcode:`CLEANUP_THROW` 指令。 （由 Brandt Bucher 在 :gh:`90997` 中贡献。）"

#: ../../whatsnew/3.12.rst:1116
msgid ""
"Add the :opcode:`!END_SEND` instruction. (Contributed by Mark Shannon in "
":gh:`103082`.)"
msgstr "添加了 :opcode:`!END_SEND` 指令。 （由 Mark Shannon 在 :gh:`103082` 中贡献。）"

#: ../../whatsnew/3.12.rst:1119
msgid ""
"Add the :opcode:`LOAD_FAST_AND_CLEAR` instruction as part of the "
"implementation of :pep:`709`. (Contributed by Carl Meyer in :gh:`101441`.)"
msgstr ""
"增加了 :opcode:`LOAD_FAST_AND_CLEAR` 指令作为 :pep:`709` 的实现的组成部分。 （由 Carl Meyer 在 "
":gh:`101441` 中贡献。）"

#: ../../whatsnew/3.12.rst:1122
msgid ""
"Add the :opcode:`LOAD_FAST_CHECK` instruction. (Contributed by Dennis "
"Sweeney in :gh:`93143`.)"
msgstr ""
"添加了 :opcode:`LOAD_FAST_CHECK` 指令。 （由 Dennis Sweeney 在 :gh:`93143` 中贡献。）"

#: ../../whatsnew/3.12.rst:1125
msgid ""
"Add the :opcode:`LOAD_FROM_DICT_OR_DEREF`, "
":opcode:`LOAD_FROM_DICT_OR_GLOBALS`, and :opcode:`LOAD_LOCALS` opcodes as "
"part of the implementation of :pep:`695`. Remove the "
":opcode:`!LOAD_CLASSDEREF` opcode, which can be replaced with "
":opcode:`LOAD_LOCALS` plus :opcode:`LOAD_FROM_DICT_OR_DEREF`. (Contributed "
"by Jelle Zijlstra in :gh:`103764`.)"
msgstr ""
"增加了 :opcode:`LOAD_FROM_DICT_OR_DEREF`, :opcode:`LOAD_FROM_DICT_OR_GLOBALS` 和"
" :opcode:`LOAD_LOCALS` 操作码作为 :pep:`695` 的组成部分。 移除了 "
":opcode:`!LOAD_CLASSDEREF` 操作码，它可以用 :opcode:`LOAD_LOCALS` 加 "
":opcode:`LOAD_FROM_DICT_OR_DEREF` 来代替。 （由 Jelle Zijlstra 在 :gh:`103764` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:1131
msgid ""
"Add the :opcode:`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer "
"and Vladimir Matveev in :gh:`103497`.)"
msgstr ""
"增加了 :opcode:`LOAD_SUPER_ATTR` 指令。 （由 Carl Meyer 和 Vladimir Matveev 在 "
":gh:`103497` 中贡献。）"

#: ../../whatsnew/3.12.rst:1134
msgid ""
"Add the ``RETURN_CONST`` instruction. (Contributed by Wenyang Wang in "
":gh:`101632`.)"
msgstr "添加了 ``RETURN_CONST`` 指令。（由 Wenyang Wang 在 :gh:`101632` 中贡献。）"

#: ../../whatsnew/3.12.rst:1137
msgid "Demos and Tools"
msgstr "演示和工具"

#: ../../whatsnew/3.12.rst:1139
msgid ""
"Remove the ``Tools/demo/`` directory which contained old demo scripts. A "
"copy can be found in the `old-demos project "
"<https://github.com/gvanrossum/old-demos>`_. (Contributed by Victor Stinner "
"in :gh:`97681`.)"
msgstr ""
"移除了包含旧演示脚本的 ``Tools/demo/`` 目录。 其副本可在 `old-demos project "
"<https://github.com/gvanrossum/old-demos>`_ 中找到。 （由 Victor Stinner 在 "
":gh:`97681` 中贡献。）"

#: ../../whatsnew/3.12.rst:1144
msgid ""
"Remove outdated example scripts of the ``Tools/scripts/`` directory. A copy "
"can be found in the `old-demos project <https://github.com/gvanrossum/old-"
"demos>`_. (Contributed by Victor Stinner in :gh:`97669`.)"
msgstr ""
"移除了 ``Tools/scripts/`` 目录下过时的示例脚本。 其副本可在 `old-demos project "
"<https://github.com/gvanrossum/old-demos>`_ 中找到。 （由 Victor Stinner 在 "
":gh:`97669` 中贡献。）"

#: ../../whatsnew/3.12.rst:1151 ../../whatsnew/3.12.rst:2144
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.12.rst:1153
#: ../../deprecations/pending-removal-in-3.14.rst:4
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of "
":class:`!argparse.BooleanOptionalAction` are deprecated and will be removed "
"in 3.14. (Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""
":mod:`argparse`: :class:`!argparse.BooleanOptionalAction` 的 *type*, "
"*choices* 和 *metavar* 形参已被弃用并将在 3.14 中移除。 （由 Nikita Sobolev 在 :gh:`92248` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:1158
msgid ""
":mod:`ast`: The following :mod:`ast` features have been deprecated in "
"documentation since Python 3.8, now cause a :exc:`DeprecationWarning` to be "
"emitted at runtime when they are accessed or used, and will be removed in "
"Python 3.14:"
msgstr ""
":mod:`ast`: 以下 :mod:`ast` 特性自 Python 3.8 起已在文档中声明弃用，现在当运行时如果它们被访问或使用将发出 "
":exc:`DeprecationWarning`，并将在 Python 3.14 中移除:"

#: ../../whatsnew/3.12.rst:1162
#: ../../deprecations/pending-removal-in-3.14.rst:13
msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

#: ../../whatsnew/3.12.rst:1163
#: ../../deprecations/pending-removal-in-3.14.rst:14
msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

#: ../../whatsnew/3.12.rst:1164
#: ../../deprecations/pending-removal-in-3.14.rst:15
msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

#: ../../whatsnew/3.12.rst:1165
#: ../../deprecations/pending-removal-in-3.14.rst:16
msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NameConstant`"

#: ../../whatsnew/3.12.rst:1166
#: ../../deprecations/pending-removal-in-3.14.rst:17
msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

#: ../../whatsnew/3.12.rst:1168
#: ../../deprecations/pending-removal-in-3.14.rst:19
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in "
":gh:`90953`.)"
msgstr "请改用 :class:`ast.Constant`。 （由 Serhiy Storchaka 在 :gh:`90953` 中贡献。）"

#: ../../whatsnew/3.12.rst:1171
#: ../../deprecations/pending-removal-in-3.14.rst:22
#: ../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

#: ../../whatsnew/3.12.rst:1173
#: ../../deprecations/pending-removal-in-3.14.rst:24
msgid ""
"The child watcher classes :class:`!asyncio.MultiLoopChildWatcher`, "
":class:`!asyncio.FastChildWatcher`, :class:`!asyncio.AbstractChildWatcher` "
"and :class:`!asyncio.SafeChildWatcher` are deprecated and will be removed in"
" Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
"子监视器类 "
":class:`!asyncio.MultiLoopChildWatcher`、:class:`!asyncio.FastChildWatcher`、:class:`!asyncio.AbstractChildWatcher`和"
" :class:`!asyncio.SafeChildWatcher` 已被弃用并将在 Python 3.14 中移除。 （由 Kumar Aditya"
" 在 :gh:`94597` 中贡献。）"

#: ../../whatsnew/3.12.rst:1179
#: ../../deprecations/pending-removal-in-3.14.rst:30
msgid ""
":func:`!asyncio.set_child_watcher`, :func:`!asyncio.get_child_watcher`, "
":meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher` and "
":meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher` are deprecated "
"and will be removed in Python 3.14. (Contributed by Kumar Aditya in "
":gh:`94597`.)"
msgstr ""
":func:`!asyncio.set_child_watcher`、:func:`!asyncio.get_child_watcher`、:meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher`"
" 和 :meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher` 已弃用，并将在 Python"
" 3.14 中移除。（由 Kumar Aditya 在 :gh:`94597` 中贡献。）"

#: ../../whatsnew/3.12.rst:1185
#: ../../deprecations/pending-removal-in-3.14.rst:36
msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van"
" Rossum in :gh:`100160`.)"
msgstr ""
"现在默认事件循环策略的 :meth:`~asyncio.get_event_loop` 方法在当前事件循环未设置并决定创建一个时将发出 "
":exc:`DeprecationWarning`。 （由 Serhiy Storchaka 和 Guido van Rossum 在 "
":gh:`100160` 中贡献。）"

#: ../../whatsnew/3.12.rst:1190
#: ../../deprecations/pending-removal-in-future.rst:45
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and "
":data:`calendar.FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: ``calendar.January`` 和 ``calendar.February`` 常量已被弃用并由 "
":data:`calendar.JANUARY` 和 :data:`calendar.FEBRUARY` 替代。 （由 Prince Roshan 在 "
":gh:`103636` 中贡献。）"

#: ../../whatsnew/3.12.rst:1194
msgid ""
":mod:`collections.abc`: Deprecated :class:`!collections.abc.ByteString`. "
"Prefer :class:`Sequence` or :class:`collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or "
":class:`collections.abc.Buffer`. (Contributed by Shantanu Jain in "
":gh:`91896`.)"
msgstr ""
":mod:`collections.abc`: 已弃用 :class:`!collections.abc.ByteString`。 推荐改用 "
":class:`Sequence` 或 :class:`collections.abc.Buffer`。 用于类型标注时，则推荐并集运算符，如 "
"``bytes | bytearray``，或 :class:`collections.abc.Buffer`。 （由 Shantanu Jain 在 "
":gh:`91896` 中贡献。）"

#: ../../whatsnew/3.12.rst:1199
msgid ""
":mod:`datetime`: :class:`datetime.datetime`'s "
":meth:`~datetime.datetime.utcnow` and "
":meth:`~datetime.datetime.utcfromtimestamp` are deprecated and will be "
"removed in a future version. Instead, use timezone-aware objects to "
"represent datetimes in UTC: respectively, call "
":meth:`~datetime.datetime.now` and :meth:`~datetime.datetime.fromtimestamp`"
"  with the *tz* parameter set to :const:`datetime.UTC`. (Contributed by Paul"
" Ganssle in :gh:`103857`.)"
msgstr ""
":mod:`datetime`: :class:`datetime.datetime` 的 "
":meth:`~datetime.datetime.utcnow` 和 "
":meth:`~datetime.datetime.utcfromtimestamp` 已被弃用并将在未来的版本中移除。 请改用可感知时区的对象以 "
"UTC 来表示日期时间：分别调用 :meth:`~datetime.datetime.now` 和 "
":meth:`~datetime.datetime.fromtimestamp` 并设置 *tz* 形参为 :const:`datetime.UTC`。"
" （由 Paul Ganssle 在 :gh:`103857` 中贡献。）"

#: ../../whatsnew/3.12.rst:1207
msgid ""
":mod:`email`: Deprecate the *isdst* parameter in "
":func:`email.utils.localtime`. (Contributed by Alan Williams in "
":gh:`72346`.)"
msgstr ""
":mod:`email`: 已弃用 :func:`email.utils.localtime` 中的 *isdst* 形参。 （由 Alan "
"Williams 在 :gh:`72346` 中贡献。）"

#: ../../whatsnew/3.12.rst:1210
msgid ""
":mod:`importlib.abc`: Deprecated the following classes, scheduled for "
"removal in Python 3.14:"
msgstr ":mod:`importlib.abc`: 已弃用下列类，计划在 Python 3.14 中移除:"

#: ../../whatsnew/3.12.rst:1213
#: ../../deprecations/pending-removal-in-3.14.rst:52
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

#: ../../whatsnew/3.12.rst:1214
#: ../../deprecations/pending-removal-in-3.14.rst:53
msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

#: ../../whatsnew/3.12.rst:1215
#: ../../deprecations/pending-removal-in-3.14.rst:54
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

#: ../../whatsnew/3.12.rst:1217
#: ../../deprecations/pending-removal-in-3.14.rst:56
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr "使用 :mod:`importlib.resources.abc` 类代替:"

#: ../../whatsnew/3.12.rst:1219
#: ../../deprecations/pending-removal-in-3.14.rst:58
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

#: ../../whatsnew/3.12.rst:1220
#: ../../deprecations/pending-removal-in-3.14.rst:59
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

#: ../../whatsnew/3.12.rst:1222
#: ../../deprecations/pending-removal-in-3.14.rst:61
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "（由 Jason R. Coombs 和 Hugo van Kemenade 在 :gh:`93963` 中贡献。）"

#: ../../whatsnew/3.12.rst:1224
msgid ""
":mod:`itertools`: Deprecate the support for copy, deepcopy, and pickle "
"operations, which is undocumented, inefficient, historically buggy, and "
"inconsistent. This will be removed in 3.14 for a significant reduction in "
"code volume and maintenance burden. (Contributed by Raymond Hettinger in "
":gh:`101588`.)"
msgstr ""
":mod:`itertools`: 已弃用对 copy、deepcopy 和 pickle "
"操作的支持，它们未被写入文档、效率低下、历史上充满问题且缺乏一致性。 这将在 3.14 中移除以显著减少代码量和维护负担。 （由 Raymond "
"Hettinger 在 :gh:`101588` 中贡献。）"

#: ../../whatsnew/3.12.rst:1230
msgid ""
":mod:`multiprocessing`: In Python 3.14, the default :mod:`multiprocessing` "
"start method will change to a safer one on Linux, BSDs, and other non-macOS "
"POSIX platforms where ``'fork'`` is currently the default (:gh:`84559`). "
"Adding a runtime warning about this was deemed too disruptive as the "
"majority of code is not expected to care. Use the "
":func:`~multiprocessing.get_context` or "
":func:`~multiprocessing.set_start_method` APIs to explicitly specify when "
"your code *requires* ``'fork'``.  See :ref:`contexts and start methods "
"<multiprocessing-start-methods>`."
msgstr ""
":mod:`multiprocessing`: 在 Python 3.14 中，默认的 :mod:`multiprocessing` 启动方法将在 "
"Linux、BSD 和其他非 macOS 的 POSIX 平台上改为更安全的方法，在这些平台上目前默认为 ``'fork'`` "
"(:gh:`84559`)。 在运行时添加相关警告被认为干扰性太大因为大部分代码都不会在意这个问题。 当你的代码 *需要* ``'fork'`` "
"时请使用 :func:`~multiprocessing.get_context` 或 "
":func:`~multiprocessing.set_start_method` API 显式地指明。 参见 :ref:`上下文和启动方法 "
"<multiprocessing-start-methods>`。"

#: ../../whatsnew/3.12.rst:1240
msgid ""
":mod:`pkgutil`: :func:`!pkgutil.find_loader` and :func:`!pkgutil.get_loader`"
" are deprecated and will be removed in Python 3.14; use "
":func:`importlib.util.find_spec` instead. (Contributed by Nikita Sobolev in "
":gh:`97850`.)"
msgstr ""
":mod:`pkgutil`：:func:`!pkgutil.find_loader` 和 :func:`!pkgutil.get_loader` "
"已被弃用并将在 Python 3.14 中移除；请改用 :func:`importlib.util.find_spec`。 （由 Nikita "
"Sobolev 在 :gh:`97850` 中贡献。）"

#: ../../whatsnew/3.12.rst:1245
msgid ""
":mod:`pty`: The module has two undocumented ``master_open()`` and "
"``slave_open()`` functions that have been deprecated since Python 2 but only"
" gained a proper :exc:`DeprecationWarning` in 3.12. Remove them in 3.14. "
"(Contributed by Soumendra Ganguly and Gregory P. Smith in :gh:`85984`.)"
msgstr ""
":mod:`pty`: 该模块有两个未写入文档的 ``master_open()`` 和 ``slave_open()`` 函数自 Python 2 "
"起即已被弃用但直到 3.12 才添加了相应的 :exc:`DeprecationWarning`。 它们将在 3.14 中移除。 （由 "
"Soumendra Ganguly 和 Gregory P. Smith 在 :gh:`85984` 中贡献。）.)"

#: ../../whatsnew/3.12.rst:1250
msgid ":mod:`os`:"
msgstr ":mod:`os`:"

#: ../../whatsnew/3.12.rst:1252
msgid ""
"The ``st_ctime`` fields return by :func:`os.stat` and :func:`os.lstat` on "
"Windows are deprecated. In a future release, they will contain the last "
"metadata change time, consistent with other platforms. For now, they still "
"contain the creation time, which is also available in the new "
"``st_birthtime`` field. (Contributed by Steve Dower in :gh:`99726`.)"
msgstr ""
"在 Windows 上由 :func:`os.stat` 和 :func:`os.lstat` 返回的 ``st_ctime`` 字段已被弃用。 "
"在未来的发布版中，它们将包含最近的元数据修改时间，以与其他平台保持一致。 目前，它们仍然包含创建时间，该值也可通过新的 ``st_birthtime``"
" 字段获取。 （由 Steve Dower 在 :gh:`99726` 中贡献。）"

#: ../../whatsnew/3.12.rst:1258
msgid ""
"On POSIX platforms, :func:`os.fork` can now raise a "
":exc:`DeprecationWarning` when it can detect being called from a "
"multithreaded process. There has always been a fundamental incompatibility "
"with the POSIX platform when doing so. Even if such code *appeared* to work."
" We added the warning to raise awareness as issues encountered by code doing"
" this are becoming more frequent. See the :func:`os.fork` documentation for "
"more details along with `this discussion on fork being incompatible with "
"threads <https://discuss.python.org/t/concerns-regarding-deprecation-of-"
"fork-with-alive-threads/33555>`_ for *why* we're now surfacing this "
"longstanding platform compatibility problem to developers."
msgstr ""
"在 POSIX 平台上，当 :func:`os.fork` 能检测到被多线程的进程调用时现在会引发 :exc:`DeprecationWarning`。"
" 当在 POSIX 平台上这样做时总是会存在基础性的不兼容。 即使这样的代码 *appeared* 看起来有效。 "
"我们添加该警告是为了引起注意，因为这种做法遇到的问题越来越频繁。 请参阅 :func:`os.fork` 文档了解详情并查看 `这个关于 fork "
"与线程不兼容问题的讨论 <https://discuss.python.org/t/concerns-regarding-deprecation-of-"
"fork-with-alive-threads/33555>`_ 以了解 *为什么* 现在我们要向开发者揭示这一长期存在的平台兼容性问题。"

#: ../../whatsnew/3.12.rst:1268
msgid ""
"When this warning appears due to usage of :mod:`multiprocessing` or "
":mod:`concurrent.futures` the fix is to use a different "
":mod:`multiprocessing` start method such as ``\"spawn\"`` or "
"``\"forkserver\"``."
msgstr ""
"当由于使用 :mod:`multiprocessing` 或 :mod:`concurrent.futures` 而出现此警告时的解决办法是使用其他的 "
":mod:`multiprocessing` 启动方法如 ``\"spawn\"`` 或 ``\"forkserver\"``。"

#: ../../whatsnew/3.12.rst:1272
msgid ""
":mod:`shutil`: The *onerror* argument of :func:`shutil.rmtree` is "
"deprecated; use *onexc* instead. (Contributed by Irit Katriel in "
":gh:`102828`.)"
msgstr ""
":mod:`shutil`: :func:`shutil.rmtree` 的 *onerror* 参数已被弃用；请改用 *onexc*。 （由 Irit"
" Katriel 在 :gh:`102828` 中贡献。）"

#: ../../whatsnew/3.12.rst:1275
#: ../../deprecations/pending-removal-in-3.14.rst:91
msgid ":mod:`sqlite3`:"
msgstr ":mod:`sqlite3`:"

#: ../../whatsnew/3.12.rst:1277
msgid ""
":ref:`default adapters and converters <sqlite3-default-converters>` are now "
"deprecated. Instead, use the :ref:`sqlite3-adapter-converter-recipes` and "
"tailor them to your needs. (Contributed by Erlend E. Aasland in "
":gh:`90016`.)"
msgstr ""
":ref:`默认适配器和转换器 <sqlite3-default-converters>` 现在已被弃用，请使用 "
":ref:`sqlite3-adapter-converter-recipes` 并根据你的需要调整它们。 （由 Erlend E. Aasland 在"
" :gh:`90016` 中贡献。）"

#: ../../whatsnew/3.12.rst:1283
msgid ""
"In :meth:`~sqlite3.Cursor.execute`, :exc:`DeprecationWarning` is now emitted"
" when :ref:`named placeholders <sqlite3-placeholders>` are used together "
"with parameters supplied as a :term:`sequence` instead of as a "
":class:`dict`. Starting from Python 3.14, using named placeholders with "
"parameters supplied as a sequence will raise a "
":exc:`~sqlite3.ProgrammingError`. (Contributed by Erlend E. Aasland in "
":gh:`101698`.)"
msgstr ""
"在 :meth:`~sqlite3.Cursor.execute` 中，现在当 :ref:`命名占位符 <sqlite3-placeholders>` "
"与作为 :term:`sequence` 而不是 :class:`dict` 提供的形参一起使用时将发出 "
":exc:`DeprecationWarning`。 从 Python 3.14 开始，当命名占位符与作为序列提供的形参一起使用时将引发 "
":exc:`~sqlite3.ProgrammingError`。 （由 Erlend E. Aasland 在 :gh:`101698` 中贡献。）"

#: ../../whatsnew/3.12.rst:1290
msgid ""
":mod:`sys`: The :data:`sys.last_type`, :data:`sys.last_value` and "
":data:`sys.last_traceback` fields are deprecated. Use :data:`sys.last_exc` "
"instead. (Contributed by Irit Katriel in :gh:`102778`.)"
msgstr ""
":mod:`sys`: :data:`sys.last_type`, :data:`sys.last_value` 和 "
":data:`sys.last_traceback` 字段已被弃用。 请改用 :data:`sys.last_exc`。 （由 Irit Katriel"
" 在 :gh:`102778` 中贡献。）"

#: ../../whatsnew/3.12.rst:1294
msgid ""
":mod:`tarfile`: Extracting tar archives without specifying *filter* is "
"deprecated until Python 3.14, when ``'data'`` filter will become the "
"default. See :ref:`tarfile-extraction-filter` for details."
msgstr ""
":mod:`tarfile`: 提取 tar 归档而不指定 *filter* 的做法已被弃用直到 Python 3.14，在该版本中 "
"``'data'`` 将成为默认过滤器。 请参阅 :ref:`tarfile-extraction-filter` 了解详情。"

#: ../../whatsnew/3.12.rst:1298
#: ../../deprecations/pending-removal-in-3.15.rst:80
#: ../../deprecations/pending-removal-in-3.17.rst:4
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: ../../whatsnew/3.12.rst:1300
msgid ""
":class:`typing.Hashable` and :class:`typing.Sized`, aliases for "
":class:`collections.abc.Hashable` and :class:`collections.abc.Sized` "
"respectively, are deprecated. (:gh:`94309`.)"
msgstr ""
":class:`typing.Hashable` 和 :class:`typing.Sized`，分别为 "
":class:`collections.abc.Hashable` 和 :class:`collections.abc.Sized` "
"的别名，现已被弃用。 (:gh:`94309`。)"

#: ../../whatsnew/3.12.rst:1304
msgid ""
":class:`!typing.ByteString`, deprecated since Python 3.9, now causes a "
":exc:`DeprecationWarning` to be emitted when it is used. (Contributed by "
"Alex Waygood in :gh:`91896`.)"
msgstr ""
":class:`!typing.ByteString` 自 Python 3.9 起已被弃用，现在当被使用时将会发出 "
":exc:`DeprecationWarning`。 （由 Alex Waygood 在 :gh:`91896` 中贡献。）"

#: ../../whatsnew/3.12.rst:1308
msgid ""
":mod:`xml.etree.ElementTree`: The module now emits :exc:`DeprecationWarning`"
" when testing the truth value of an :class:`xml.etree.ElementTree.Element`. "
"Before, the Python implementation emitted :exc:`FutureWarning`, and the C "
"implementation emitted nothing. (Contributed by Jacob Walls in :gh:`83122`.)"
msgstr ""
":mod:`xml.etree.ElementTree`: 现在该模块在对 :class:`xml.etree.ElementTree.Element`"
" 执行真值测试时将发出 :exc:`DeprecationWarning`。 在之前，Python 实现会发出 "
":exc:`FutureWarning`，而 C 实现则不会发出任何警告。 （由 Jacob Walls 在 :gh:`83122` 中贡献。）"

#: ../../whatsnew/3.12.rst:1314
msgid ""
"The 3-arg signatures (type, value, traceback) of :meth:`coroutine throw() "
"<coroutine.throw>`, :meth:`generator throw() <generator.throw>` and "
":meth:`async generator throw() <agen.athrow>` are deprecated and may be "
"removed in a future version of Python. Use the single-arg versions of these "
"functions instead. (Contributed by Ofey Chan in :gh:`89874`.)"
msgstr ""
":meth:`coroutine throw() <coroutine.throw>`, :meth:`generator throw() "
"<generator.throw>` 和 :meth:`async generator throw() <agen.athrow>` 的三参数签名形式 "
"(type, value, traceback) 已被弃用并可能在未来的 Python 版本中移除。 请改用这些函数的单参数版本。 （由 Ofey "
"Chan 在 :gh:`89874` 中贡献。）"

#: ../../whatsnew/3.12.rst:1320
msgid ""
":exc:`DeprecationWarning` is now raised when :attr:`~module.__package__` on "
"a module differs from :attr:`__spec__.parent "
"<importlib.machinery.ModuleSpec.parent>` (previously it was "
":exc:`ImportWarning`). (Contributed by Brett Cannon in :gh:`65961`.)"
msgstr ""
"现在当一个模块的 :attr:`~module.__package__` 不同于 :attr:`__spec__.parent "
"<importlib.machinery.ModuleSpec.parent>` 时将引发 :exc:`DeprecationWarning` "
"(在之前版本中则为 :exc:`ImportWarning`)。 （由 Brett Cannon 在 :gh:`65961` 中贡献。）"

#: ../../whatsnew/3.12.rst:1326
msgid ""
"Setting :attr:`~module.__package__` or :attr:`~module.__cached__` on a "
"module is deprecated, and will cease to be set or taken into consideration "
"by the import system in Python 3.14. (Contributed by Brett Cannon in "
":gh:`65961`.)"
msgstr ""
"在模块上设置 :attr:`~module.__package__` 或 :attr:`~module.__cached__` 的做法已被弃用，并且在 "
"Python 3.14 中将不会再被设置或是被导入系统纳入考虑。 （由 Brett Cannon 在 :gh:`65961` 中贡献。）"

#: ../../whatsnew/3.12.rst:1330
msgid ""
"The bitwise inversion operator (``~``) on bool is deprecated. It will throw "
"an error in Python 3.16. Use ``not`` for logical negation of bools instead. "
"In the rare case that you really need the bitwise inversion of the "
"underlying ``int``, convert to int explicitly: ``~int(x)``. (Contributed by "
"Tim Hoffmann in :gh:`103487`.)"
msgstr ""
"对布尔值的按位取反运算符 (``~``) 已被弃用。 它在 Python 3.16 中将抛出错误。 请改用 ``not`` 来执行布尔值的逻辑非运算。 "
"在你确实需要对下层的 ``int`` 执行按位取反运算的少数场景下，请显式地将其转换为整数值: ``~int(x)``。 （由 Tim Hoffmann"
" 在 :gh:`103487` 中贡献。）"

#: ../../whatsnew/3.12.rst:1336
msgid ""
"Accessing :attr:`~codeobject.co_lnotab` on code objects was deprecated in "
"Python 3.10 via :pep:`626`, but it only got a proper "
":exc:`DeprecationWarning` in 3.12. May be removed in 3.15. (Contributed by "
"Nikita Sobolev in :gh:`101866`.)"
msgstr ""
"在代码对象上访问 :attr:`~codeobject.co_lnotab` 的做法在 Python 3.10 中已根据 :pep:`626` "
"被弃用，但直到在 3.12 中才添加了适当的 :exc:`DeprecationWarning`。 可能会在 3.15 中移除。 （由 Nikita "
"Sobolev 在 :gh:`101866` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.13.rst:2
msgid "Pending removal in Python 3.13"
msgstr "计划在 Python 3.13 中移除"

#: ../../deprecations/pending-removal-in-3.13.rst:4
msgid "Modules (see :pep:`594`):"
msgstr "模块 (参见 :pep:`594`):"

#: ../../deprecations/pending-removal-in-3.13.rst:6
msgid ":mod:`!aifc`"
msgstr ":mod:`!aifc`"

#: ../../deprecations/pending-removal-in-3.13.rst:7
msgid ":mod:`!audioop`"
msgstr ":mod:`!audioop`"

#: ../../deprecations/pending-removal-in-3.13.rst:8
msgid ":mod:`!cgi`"
msgstr ":mod:`!cgi`"

#: ../../deprecations/pending-removal-in-3.13.rst:9
msgid ":mod:`!cgitb`"
msgstr ":mod:`!cgitb`"

#: ../../deprecations/pending-removal-in-3.13.rst:10
msgid ":mod:`!chunk`"
msgstr ":mod:`!chunk`"

#: ../../deprecations/pending-removal-in-3.13.rst:11
msgid ":mod:`!crypt`"
msgstr ":mod:`!crypt`"

#: ../../deprecations/pending-removal-in-3.13.rst:12
msgid ":mod:`!imghdr`"
msgstr ":mod:`!imghdr`"

#: ../../deprecations/pending-removal-in-3.13.rst:13
msgid ":mod:`!mailcap`"
msgstr ":mod:`!mailcap`"

#: ../../deprecations/pending-removal-in-3.13.rst:14
msgid ":mod:`!msilib`"
msgstr ":mod:`!msilib`"

#: ../../deprecations/pending-removal-in-3.13.rst:15
msgid ":mod:`!nis`"
msgstr ":mod:`!nis`"

#: ../../deprecations/pending-removal-in-3.13.rst:16
msgid ":mod:`!nntplib`"
msgstr ":mod:`!nntplib`"

#: ../../deprecations/pending-removal-in-3.13.rst:17
msgid ":mod:`!ossaudiodev`"
msgstr ":mod:`!ossaudiodev`"

#: ../../deprecations/pending-removal-in-3.13.rst:18
msgid ":mod:`!pipes`"
msgstr ":mod:`!pipes`"

#: ../../deprecations/pending-removal-in-3.13.rst:19
msgid ":mod:`!sndhdr`"
msgstr ":mod:`!sndhdr`"

#: ../../deprecations/pending-removal-in-3.13.rst:20
msgid ":mod:`!spwd`"
msgstr ":mod:`!spwd`"

#: ../../deprecations/pending-removal-in-3.13.rst:21
msgid ":mod:`!sunau`"
msgstr ":mod:`!sunau`"

#: ../../deprecations/pending-removal-in-3.13.rst:22
msgid ":mod:`!telnetlib`"
msgstr ":mod:`!telnetlib`"

#: ../../deprecations/pending-removal-in-3.13.rst:23
msgid ":mod:`!uu`"
msgstr ":mod:`!uu`"

#: ../../deprecations/pending-removal-in-3.13.rst:24
msgid ":mod:`!xdrlib`"
msgstr ":mod:`!xdrlib`"

#: ../../deprecations/pending-removal-in-3.13.rst:26
msgid "Other modules:"
msgstr "其他模块："

#: ../../deprecations/pending-removal-in-3.13.rst:28
msgid ":mod:`!lib2to3`, and the :program:`2to3` program (:gh:`84540`)"
msgstr ":mod:`!lib2to3`，以及 :program:`2to3` 程序 (:gh:`84540`)"

#: ../../deprecations/pending-removal-in-3.13.rst:30
msgid "APIs:"
msgstr "API:"

#: ../../deprecations/pending-removal-in-3.13.rst:32
msgid ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"
msgstr ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"

#: ../../deprecations/pending-removal-in-3.13.rst:33
msgid "``locale.resetlocale()`` (:gh:`90817`)"
msgstr "``locale.resetlocale()`` (:gh:`90817`)"

#: ../../deprecations/pending-removal-in-3.13.rst:34
msgid ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"
msgstr ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:35
msgid ":func:`!unittest.findTestCases` (:gh:`50096`)"
msgstr ":func:`!unittest.findTestCases` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:36
msgid ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"
msgstr ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:37
msgid ":func:`!unittest.makeSuite` (:gh:`50096`)"
msgstr ":func:`!unittest.makeSuite` (:gh:`50096`)"

#: ../../deprecations/pending-removal-in-3.13.rst:38
msgid ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"
msgstr ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"

#: ../../deprecations/pending-removal-in-3.13.rst:39
msgid ":class:`!webbrowser.MacOSX` (:gh:`86421`)"
msgstr ":class:`!webbrowser.MacOSX` (:gh:`86421`)"

#: ../../deprecations/pending-removal-in-3.13.rst:40
msgid ":class:`classmethod` descriptor chaining (:gh:`89519`)"
msgstr ":class:`classmethod` 描述器串联 (:gh:`89519`)"

#: ../../deprecations/pending-removal-in-3.13.rst:41
msgid ":mod:`importlib.resources` deprecated methods:"
msgstr ":mod:`importlib.resources` 中已弃用的方法："

#: ../../deprecations/pending-removal-in-3.13.rst:43
msgid "``contents()``"
msgstr "``contents()``"

#: ../../deprecations/pending-removal-in-3.13.rst:44
msgid "``is_resource()``"
msgstr "``is_resource()``"

#: ../../deprecations/pending-removal-in-3.13.rst:45
msgid "``open_binary()``"
msgstr "``open_binary()``"

#: ../../deprecations/pending-removal-in-3.13.rst:46
msgid "``open_text()``"
msgstr "``open_text()``"

#: ../../deprecations/pending-removal-in-3.13.rst:47
msgid "``path()``"
msgstr "``path()``"

#: ../../deprecations/pending-removal-in-3.13.rst:48
msgid "``read_binary()``"
msgstr "``read_binary()``"

#: ../../deprecations/pending-removal-in-3.13.rst:49
msgid "``read_text()``"
msgstr "``read_text()``"

#: ../../deprecations/pending-removal-in-3.13.rst:51
msgid ""
"Use :func:`importlib.resources.files` instead.  Refer to `importlib-"
"resources: Migrating from Legacy <https://importlib-"
"resources.readthedocs.io/en/latest/using.html#migrating-from-legacy>`_ "
"(:gh:`106531`)"
msgstr ""
"改用 :func:`importlib.resources.files`。 参见 `importlib-resources: Migrating "
"from Legacy <https://importlib-"
"resources.readthedocs.io/en/latest/using.html#migrating-from-legacy>`_ "
"(:gh:`106531`)"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:2
#: ../../deprecations/pending-removal-in-3.14.rst:2
msgid "Pending removal in Python 3.14"
msgstr "计划在 Python 3.14 中移除"

#: ../../deprecations/pending-removal-in-3.14.rst:9
msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""
":mod:`ast`: 以下特性自 Python 3.8 起已在文档中声明弃用，现在当运行时如果它们被访问或使用时将发出 "
":exc:`DeprecationWarning`，并将在 Python 3.14 中移除："

#: ../../deprecations/pending-removal-in-3.14.rst:41
msgid ""
":mod:`collections.abc`: Deprecated :class:`!collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or "
":class:`collections.abc.Buffer`. (Contributed by Shantanu Jain in "
":gh:`91896`.)"
msgstr ""
":mod:`collections.abc`: 已弃用 :class:`!collections.abc.ByteString`。 推荐改用 "
":class:`!Sequence` 或 :class:`~collections.abc.Buffer`。 用于类型标注时，则推荐并集运算符，如 "
"``bytes | bytearray``，或 :class:`collections.abc.Buffer`。 （由 Shantanu Jain 在 "
":gh:`91896` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:47
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in "
":func:`email.utils.localtime`. (Contributed by Alan Williams in "
":gh:`72346`.)"
msgstr ""
":mod:`email`: 已弃用 :func:`email.utils.localtime` 中的 *isdst* 形参。 （由 Alan "
"Williams 在 :gh:`72346` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:50
msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ":mod:`importlib.abc` 中已弃用的类："

#: ../../deprecations/pending-removal-in-3.14.rst:63
msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be"
" removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""
":mod:`itertools` 具有对 copy, deepcopy 和 pickle 等操作的未写入文档的、低效的、历史上充满问题的且不稳定的支持。"
" 这将在 3.14 中移除以显著减少代码量和维护负担。 （由 Raymond Hettinger 在 :gh:`101588` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:69
msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was"
" deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or "
":func:`~multiprocessing.set_start_method` APIs to explicitly specify when "
"your code *requires* ``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""
":mod:`multiprocessing`: 默认的启动方法在目前默认使用 ``'fork'`` 的 Linux, BSD 和其他非 macOS "
"POSIX 平台上将改为更安全的方法 (:gh:`84559`)。 为此添加运行时警告将带来糟糕的体验因为大部分代码并不会关心这个问题。 当你的代码 "
"*需要* ``'fork'`` 时请使用 :func:`~multiprocessing.get_context` 或 "
":func:`~multiprocessing.set_start_method` API 来显式地指明。 参见 "
":ref:`multiprocessing-start-methods`。"

#: ../../deprecations/pending-removal-in-3.14.rst:77
msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` and "
":meth:`~pathlib.PurePath.relative_to`: passing additional arguments is "
"deprecated."
msgstr ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` 和 "
":meth:`~pathlib.PurePath.relative_to`: 传入额外参数的做法已被弃用。"

#: ../../deprecations/pending-removal-in-3.14.rst:81
msgid ""
":mod:`pkgutil`: :func:`!pkgutil.find_loader` and :func:`!pkgutil.get_loader`"
" now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""
":mod:`pkgutil`: 现在 :func:`!pkgutil.find_loader` 和 "
":func:`!pkgutil.get_loader` 将引发 :exc:`DeprecationWarning`；请改用 "
":func:`importlib.util.find_spec`。 （由 Nikita Sobolev 在 :gh:`97850` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:86
msgid ":mod:`pty`:"
msgstr ":mod:`pty`:"

#: ../../deprecations/pending-removal-in-3.14.rst:88
msgid "``master_open()``: use :func:`pty.openpty`."
msgstr "``master_open()``: 使用 :func:`pty.openpty`。"

#: ../../deprecations/pending-removal-in-3.14.rst:89
msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr "``slave_open()``: 使用 :func:`pty.openpty`。"

#: ../../deprecations/pending-removal-in-3.14.rst:93
msgid ":data:`!version` and :data:`!version_info`."
msgstr ":data:`!version` 和 :data:`!version_info`。"

#: ../../deprecations/pending-removal-in-3.14.rst:95
msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if "
":ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* "
"is a sequence instead of a :class:`dict`."
msgstr ""
"如果使用了 :ref:`命名占位符 <sqlite3-placeholders>` 且 *parameters* 是一个序列而不是 "
":class:`dict` 则选择 :meth:`~sqlite3.Cursor.execute` 和 "
":meth:`~sqlite3.Cursor.executemany`。"

#: ../../deprecations/pending-removal-in-3.14.rst:99
msgid ""
":mod:`typing`: :class:`!typing.ByteString`, deprecated since Python 3.9, now"
" causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""
":mod:`typing`: :class:`!typing.ByteString` 自 Python 3.9 起已被弃用，现在当被使用时将会发出 "
":exc:`DeprecationWarning`。"

#: ../../deprecations/pending-removal-in-3.14.rst:102
msgid ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in "
":gh:`88168`.)"
msgstr ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` 已被弃用：它不应被作为公有 API。 （由 Gregory "
"P. Smith 在 :gh:`88168` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending removal in Python 3.15"
msgstr "计划在 Python 3.15 中移除"

#: ../../deprecations/pending-removal-in-3.15.rst:4
#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr "导入系统："

#: ../../deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set "
":attr:`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is "
"deprecated. In Python 3.15, :attr:`!__cached__` will cease to be set or take"
" into consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"当设置 :attr:`__spec__.cached <importlib.machinery.ModuleSpec.cached>` "
"失败时在模块上设置 :attr:`~module.__cached__` 的做法已被弃用。 在 Python 3.15 "
"中，:attr:`!__cached__` 将不会再被导入系统或标准库纳入考虑。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set "
":attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is "
"deprecated. In Python 3.15, :attr:`!__package__` will cease to be set or "
"take into consideration by the import system or standard library. "
"(:gh:`97879`)"
msgstr ""
"当设备 :attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` "
"失败时在模块上设置 :attr:`~module.__package__` 的做法已被弃用。 在 Python 3.15 "
"中，:attr:`!__package__` 将不会再被导入系统或标准库纳入考虑。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:16
msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

#: ../../deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated"
" since Python 3.13."
msgstr "未写入文档的 :func:`!ctypes.SetPointerType` 函数自 Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

#: ../../deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has"
" been deprecated since Python 3.13. No direct replacement exists. *Anything*"
" is better than CGI to interface a web server with a request handler."
msgstr ""
"过时且很少被使用的 :class:`~http.server.CGIHTTPRequestHandler` 自 Python 3.13 起已被弃用。 "
"不存在直接的替代品。 对于建立带有请求处理器的 Web 服务程序来说 *任何东西* 都比 CGI 要好。"

#: ../../deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"用于 :program:`python -m http.server` 命令行界面的 :option:`!--cgi` 旗标自 Python 3.13 "
"起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:32
#: ../../deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "``load_module()`` 方法：改用 ``exec_module()``。"

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ":class:`locale`:"
msgstr ":class:`locale`:"

#: ../../deprecations/pending-removal-in-3.15.rst:38
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 "
"(:gh:`90817`), but has been postponed to Python 3.15. Use "
":func:`~locale.getlocale`, :func:`~locale.setlocale`, and "
":func:`~locale.getencoding` instead. (Contributed by Hugo van Kemenade in "
":gh:`111187`.)"
msgstr ""
":func:`~locale.getdefaultlocale` 函数自 Python 3.11 起已被弃用。 最初计划在 Python 3.13 "
"中移除它 (:gh:`90817`)，但已被推迟至 Python 3.15。 请改用 :func:`~locale.getlocale`, "
":func:`~locale.setlocale` 和 :func:`~locale.getencoding`。 （由 Hugo van "
"Kemenade 在 :gh:`111187` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.15.rst:46
msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:48
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use "
":func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` 自 Python 3.13 起已被弃用。 请使用 "
":func:`os.path.isreserved` 来检测 Windows 上的保留路径。"

#: ../../deprecations/pending-removal-in-3.15.rst:52
msgid ":mod:`platform`:"
msgstr ":mod:`platform`:"

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` 自 Python 3.13 起已被弃用。 此函数仅对 Jython 支持有用，具有令人困惑的 "
"API，并且大部分未经测试。"

#: ../../deprecations/pending-removal-in-3.15.rst:58
#: ../../deprecations/pending-removal-in-3.16.rst:96
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
":func:`sysconfig.is_python_build` 的 *check_home* 参数自 Python 3.12 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:63
msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

#: ../../deprecations/pending-removal-in-3.15.rst:65
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does"
" not permit any arguments, but the C version allows any number of positional"
" or keyword arguments, ignoring every argument."
msgstr ""
"在 Python 3.15 中 :func:`~threading.RLock` 将不再接受参数。 传入参数的做法自 Python 3.14 "
"起已被弃用，因为 Python 版本不接受任何参数，而 C 版本允许任意数量的位置或关键字参数，但会忽略所有参数。"

#: ../../deprecations/pending-removal-in-3.15.rst:71
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:73
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: 访问 :attr:`~codeobject.co_lnotab` 的做法自 3.10 起已根据 "
":pep:`626` 被弃用并曾计划在 3.12 中移除，但在 3.12 中实际仅设置了 :exc:`DeprecationWarning`。 可能会在"
" 3.15 中移除。 （由 Nikita Sobolev 在 :gh:`101866` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.15.rst:82
msgid ""
"The undocumented keyword argument syntax for creating "
":class:`~typing.NamedTuple` classes (for example, ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``) has been deprecated since Python "
"3.13. Use the class-based syntax or the functional syntax instead."
msgstr ""
"未写入文档的用于创建 :class:`~typing.NamedTuple` 类的关键字参数语法（例如 ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``）自 Python 3.13 起已被弃用。 请改用基于类的语法或函数语法。"

#: ../../deprecations/pending-removal-in-3.15.rst:88
msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""
"当使用 :class:`~typing.TypedDict` 的函数式语法时，不向 *fields* 形参传递值 (``TD = "
"TypedDict(\"TD\")``) 或传递 ``None`` (``TD = TypedDict(\"TD\", None)``) 的做法自 "
"Python 3.13 起已被弃用。 请改用 ``class TD(TypedDict): pass`` 或 ``TD = "
"TypedDict(\"TD\", {})`` 来创建一个零字段的 TypedDict。"

#: ../../deprecations/pending-removal-in-3.15.rst:95
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module,"
" it has yet to be supported by any major type checker."
msgstr ""
":func:`typing.no_type_check_decorator` 装饰器自 Python 3.13 起已被弃用。 存在于 "
":mod:`typing` 模块八年之后，它仍未被任何主要类型检查器所支持。"

#: ../../deprecations/pending-removal-in-3.15.rst:100
msgid ":mod:`wave`:"
msgstr ":mod:`wave`:"

#: ../../deprecations/pending-removal-in-3.15.rst:102
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and "
":meth:`~wave.Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` "
"and :class:`~wave.Wave_write` classes have been deprecated since Python "
"3.13."
msgstr ""
":class:`~wave.Wave_read` 和 :class:`~wave.Wave_write` 类的 "
":meth:`~wave.Wave_read.getmark`, :meth:`!setmark` 和 "
":meth:`~wave.Wave_read.getmarkers` 方法自 Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:107
msgid ":mod:`zipimport`:"
msgstr ":mod:`zipimport`:"

#: ../../deprecations/pending-removal-in-3.15.rst:109
msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""
":meth:`~zipimport.zipimporter.load_module` 自 Python 3.10 起已被弃用。请改用 :meth:`~zipimport.zipimporter.exec_module` 。\n"
"（由李佳昊在 :gh:`125746` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:2
#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr "计划在 Python 3.16 中移除"

#: ../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set "
":attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is "
"deprecated. In Python 3.16, :attr:`!__loader__` will cease to be set or "
"taken into consideration by the import system or the standard library."
msgstr ""
"当设置 :attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>` "
"失败时在模块上设置 :attr:`~module.__loader__` 的做法已被弃用。 在 Python 3.16 "
"中，:attr:`!__loader__` 将不会再被设置或是被导入系统或标准库纳入考虑。"

#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ":mod:`array`:"

#: ../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"``'u'`` 格式代码 (:c:type:`wchar_t`) 自 Python 3.3 起已在文档中弃用并自 Python 3.13 "
"起在运行时弃用。 对于 Unicode 字符请改用 ``'w'`` 格式代码 (:c:type:`Py_UCS4`)。"

#: ../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
":func:`!asyncio.iscoroutinefunction` 已被弃用并将在 Python 3.16 中移除，请改用 :func:`inspect.iscoroutinefunction`。\n"
"（由李佳昊和 Kumar Aditya 在 :gh:`122875` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:26
msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ":mod:`asyncio` 策略系统已被弃用并将在 Python 3.16 中移除。 具体而言，是弃用了下列类和函数："

#: ../../deprecations/pending-removal-in-3.16.rst:29
msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ":class:`asyncio.AbstractEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:30
msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ":class:`asyncio.DefaultEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:31
msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsSelectorEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:32
msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsProactorEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:33
msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ":func:`asyncio.get_event_loop_policy`"

#: ../../deprecations/pending-removal-in-3.16.rst:34
msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ":func:`asyncio.set_event_loop_policy`"

#: ../../deprecations/pending-removal-in-3.16.rst:36
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""
"用户应当使用 :func:`asyncio.run` 或 :class:`asyncio.Runner` 并附带 *loop_factory* "
"以使用想要的事件循环实现。"

#: ../../deprecations/pending-removal-in-3.16.rst:39
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr "例如，在 Windows 上使用 :class:`asyncio.SelectorEventLoop`::"

#: ../../deprecations/pending-removal-in-3.16.rst:41
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"

#: ../../deprecations/pending-removal-in-3.16.rst:48
msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr "（由 Kumar Aditya 在 :gh:`127949` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:50
#: ../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

#: ../../deprecations/pending-removal-in-3.16.rst:52
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"对布尔类型 ``~True`` 或 ``~False`` 执行按位取反的操作自 Python 3.12 起已被弃用，因为它会产生奇怪和不直观的结果 "
"(``-2`` and ``-1``)。 请改用 ``not x`` 来对布尔值执行逻辑否操作。 "
"对于需要对下层整数执行按位取反操作的少数场合，请显式地将其转换为 ``int`` (``~int(x)``)。"

#: ../../deprecations/pending-removal-in-3.16.rst:59
msgid ":mod:`functools`:"
msgstr ":mod:`functools`："

#: ../../deprecations/pending-removal-in-3.16.rst:61
msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""
"调用 :func:`functools.reduce` 的 Python 实现并传入 *function* 或 *sequence* "
"作为关键字参数的做法自 Python 3.14 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.16.rst:64
msgid ":mod:`logging`:"
msgstr ":mod:`logging`："

#: ../../deprecations/pending-removal-in-3.16.rst:66
msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""
"使用 *strm* 参数对自定义日志记录处理器提供支持的做法已被弃用并计划在 Python 3.16 中移除。 改为使用 *stream* "
"参数定义处理器。 （由 Mariusz Felisiak 在 :gh:`115032` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:70
msgid ":mod:`mimetypes`:"
msgstr ":mod:`mimetypes`:"

#: ../../deprecations/pending-removal-in-3.16.rst:72
msgid ""
"Valid extensions start with a '.' or are empty for "
":meth:`mimetypes.MimeTypes.add_type`. Undotted extensions are deprecated and"
" will raise a :exc:`ValueError` in Python 3.16. (Contributed by Hugo van "
"Kemenade in :gh:`75223`.)"
msgstr ""
"有效扩展以 \". \" 开头或在 :meth:`mimetypes.MimeTypes.add_type` 为空。 未加点的扩展已弃用，在 "
"Python 3.16 中将引发 :exc:`ValueError`。 （由 Hugo van Kemenade 在 :gh:`75223` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:78
msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

#: ../../deprecations/pending-removal-in-3.16.rst:80
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is"
" now an alias of :exc:`RuntimeError`."
msgstr ""
":class:`!ExecError` 异常自 Python 3.14 起已被弃用。 它自 Python 3.4 起就未被 :mod:`!shutil`"
" 中的任何函数所使用，现在是 :exc:`RuntimeError` 的一个别名。"

#: ../../deprecations/pending-removal-in-3.16.rst:85
msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

#: ../../deprecations/pending-removal-in-3.16.rst:87
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
":meth:`Class.get_methods <symtable.Class.get_methods>` 方法自 Python 3.14 起被弃用。"

#: ../../deprecations/pending-removal-in-3.16.rst:90
msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

#: ../../deprecations/pending-removal-in-3.16.rst:92
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated"
" since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
":func:`~sys._enablelegacywindowsfsencoding` 函数自 Python 3.13 起被弃用。 请改用 "
":envvar:`PYTHONLEGACYWINDOWSFSENCODING` 环境变量。"

#: ../../deprecations/pending-removal-in-3.16.rst:98
msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""
"自Python 3.14 起，:func:`!sysconfig.expand_makefile_vars` 函数已被弃用。请使用 "
":func:`sysconfig.get_paths` 的 ``vars`` 参数代替。"

#: ../../deprecations/pending-removal-in-3.16.rst:102
msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

#: ../../deprecations/pending-removal-in-3.16.rst:104
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr "未写入文档也未被使用的 :attr:`!TarFile.tarfile` 属性自 Python 3.13 起被弃用。"

#: ../../deprecations/pending-removal-in-3.17.rst:2
msgid "Pending removal in Python 3.17"
msgstr "计划在 Python 3.17 中移除"

#: ../../deprecations/pending-removal-in-3.17.rst:6
msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection"
" helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"在Python 3.14 之前，旧式的联合是通过私有类 ``typing._UnionGenericAlias`` 实现的。 "
"实现已不再需要该类，但为向后兼容性保留了该类，并计划在 Python 3.17 中删除。 用户应使用记录在案的内省助手函数，如 "
":func:`typing.get_origin` 和 :func:`typing.get_args`，而不是依赖于私有的实现细节。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr "计划在未来版本中移除"

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr "以下API将会被移除，尽管具体时间还未确定。"

#: ../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ":mod:`argparse`："

#: ../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are "
"deprecated."
msgstr "嵌套参数组和嵌套互斥组已被弃用 。"

#: ../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to "
":meth:`~argparse.ArgumentParser.add_argument_group` is now deprecated."
msgstr ""
"将未写入文档的关键字参数 *prefix_chars* 传递给 "
":meth:`~argparse.ArgumentParser.add_argument_group` 的做法现在已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr ":class:`argparse.FileType` 类型转换器已弃用 。"

#: ../../deprecations/pending-removal-in-future.rst:18
msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``。"

#: ../../deprecations/pending-removal-in-future.rst:19
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature"
" is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"生成器: ``throw(type, exc, tb)`` 和 ``athrow(type, exc, tb)`` 签名已被弃用：请改用 "
"``throw(exc)`` 和 ``athrow(exc)``，即单参数签名。"

#: ../../deprecations/pending-removal-in-future.rst:22
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords "
":keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, "
":keyword:`in`, :keyword:`is` and :keyword:`or`.  In a future release it will"
" be changed to a syntax error. (:gh:`87999`)"
msgstr ""
"目前 Python 接受数字类字面值后面紧跟关键字的写法，例如 ``0in x``, ``1or x``, ``0if 1else 2``。 它允许像 "
"``[0x1for x in y]`` 这样令人困惑且有歧义的表达式 (它可以被解读为 ``[0x1 for x in y]`` 或者 ``[0x1f "
"or x in y]``)。 如果数字类字面值后面紧跟关键字 :keyword:`and`, :keyword:`else`, "
":keyword:`for`, :keyword:`if`, :keyword:`in`, :keyword:`is` 和 :keyword:`or` "
"中的一个将会引发语法警告。 在未来的版本中它将改为语法错误。 (:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type:"
" these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"对 ``__index__()`` 和 ``__int__()`` 方法返回非 int 类型的支持：将要求这些方法必须返回 :class:`int` "
"的子类的实例。"

#: ../../deprecations/pending-removal-in-future.rst:33
msgid ""
"Support for ``__float__()`` method returning a strict subclass of "
":class:`float`: these methods will be required to return an instance of "
":class:`float`."
msgstr ""
"对 ``__float__()`` 方法返回 :class:`float` 的子类的支持：将要求这些方法必须返回 :class:`float` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:36
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of "
":class:`complex`: these methods will be required to return an instance of "
":class:`complex`."
msgstr ""
"对 ``__complex__()`` 方法返回 :class:`complex` 的子类的支持：将要求这些方法必须返回 "
":class:`complex` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:39
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "将 ``int()`` 委托给 ``__trunc__()`` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:40
msgid ""
"Passing a complex number as the *real* or *imag* argument in the "
":func:`complex` constructor is now deprecated; it should only be passed as a"
" single positional argument. (Contributed by Serhiy Storchaka in "
":gh:`109218`.)"
msgstr ""
"传入一个复数作为 :func:`complex` 构造器中的 *real* 或 *imag* 参数的做法现在已被弃用；它应当仅作为单个位置参数被传入。 "
"（由 Serhiy Storchaka 在 :gh:`109218` 中贡献。）.)"

#: ../../deprecations/pending-removal-in-future.rst:50
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. "
"(:gh:`133038`)"
msgstr ":mod:`codecs`：:func:`codecs.open` 请改用 :func:`open` 。 (:gh:`133038`)"

#: ../../deprecations/pending-removal-in-future.rst:52
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ":attr:`codeobject.co_lnotab`: 改用 :meth:`codeobject.co_lines` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:55
msgid ":mod:`datetime`:"
msgstr ":mod:`datetime`:"

#: ../../deprecations/pending-removal-in-future.rst:57
msgid ""
":meth:`~datetime.datetime.utcnow`: use "
"``datetime.datetime.now(tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: 使用 "
"``datetime.datetime.now(tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:59
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use "
"``datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: 使用 "
"``datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:62
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: 复数值必须是一个整数。"

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` *debug_override* 形参已被弃用：改用 "
"*optimization* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

#: ../../deprecations/pending-removal-in-future.rst:71
msgid "``EntryPoints`` tuple interface."
msgstr "``EntryPoints`` 元组接口。"

#: ../../deprecations/pending-removal-in-future.rst:72
msgid "Implicit ``None`` on return values."
msgstr "返回值中隐式的 ``None``。"

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: ``warn()`` 方法自 Python 3.3 起已被弃用，请改用 "
":meth:`~logging.warning`。"

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ":mod:`mailbox`: 对 StringIO 输入和文本模式的使用已被弃用，改用 BytesIO 和二进制模式。"

#: ../../deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: 在多线程的进程中调用 :func:`os.register_at_fork`。"

#: ../../deprecations/pending-removal-in-future.rst:82
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is"
" deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: 使用元组值作为 *exc_info* 形参的做法已被弃用，应使用异常实例。"

#: ../../deprecations/pending-removal-in-future.rst:85
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and"
" replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: 现在对于正则表达式中的数字分组引用和分组名称将应用更严格的规则。 现在只接受 ASCII 数字序列作为数字引用。 "
"字节串模式和替换字符串中的分组名称现在只能包含 ASCII 字母和数字以及下划线。 （由 Serhiy Storchaka 在 :gh:`91760` "
"中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ":mod:`!sre_compile`, :mod:`!sre_constants` 和 :mod:`!sre_parse` 模块。"

#: ../../deprecations/pending-removal-in-future.rst:94
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in"
" Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree` 的 *onerror* 形参在 Python 3.12 中已被弃用；请改用 "
"*onexc* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:97
msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` 选项和协议："

#: ../../deprecations/pending-removal-in-future.rst:99
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` 不带 protocol 参数的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:100
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and "
":meth:`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` 和 "
":meth:`!selected_npn_protocol` 已被弃用：请改用 ALPN。"

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:110
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:111
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:112
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` 的方法："

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Condition.notifyAll`: use "
":meth:`~threading.Condition.notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: 使用 "
":meth:`~threading.Condition.notify_all`。"

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ":meth:`!threading.Event.isSet`: 使用 :meth:`~threading.Event.is_set`。"

#: ../../deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use "
":attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: 使用 "
":attr:`threading.Thread.daemon` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:120
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use "
":attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: 使用 "
":attr:`threading.Thread.name` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ""
":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: 使用 :meth:`threading.current_thread`。"

#: ../../deprecations/pending-removal-in-future.rst:123
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`: 使用 :meth:`threading.active_count`。"

#: ../../deprecations/pending-removal-in-future.rst:125
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)。"

#: ../../deprecations/pending-removal-in-future.rst:127
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
"内部类 ``typing._UnionGenericAlias`` 不再用于实现 :class:`typing.Union`。 "
"为了保护使用该私有类的用户的兼容性 ，将至少在 Python 3.17 之前提供兼容性。 （由 Jelle Zijlstra 在 "
":gh:`105499` 中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:132
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: 从测试用例返回不为 ``None`` 的值的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:135
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ":mod:`urllib.parse` 函数已被弃用：改用 :func:`~urllib.parse.urlparse`"

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splithost()``"
msgstr "``splithost()``"

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:141
msgid "``splitport()``"
msgstr "``splitport()``"

#: ../../deprecations/pending-removal-in-future.rst:142
msgid "``splitquery()``"
msgstr "``splitquery()``"

#: ../../deprecations/pending-removal-in-future.rst:143
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:144
msgid "``splittype()``"
msgstr "``splittype()``"

#: ../../deprecations/pending-removal-in-future.rst:145
msgid "``splituser()``"
msgstr "``splituser()``"

#: ../../deprecations/pending-removal-in-future.rst:146
msgid "``splitvalue()``"
msgstr "``splitvalue()``"

#: ../../deprecations/pending-removal-in-future.rst:147
msgid "``to_bytes()``"
msgstr "``to_bytes()``"

#: ../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` 不应执行部分写入。"

#: ../../deprecations/pending-removal-in-future.rst:152
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an "
":class:`~xml.etree.ElementTree.Element` is deprecated. In a future release "
"it will always return ``True``. Prefer explicit ``len(elem)`` or ``elem is "
"not None`` tests instead."
msgstr ""
":mod:`xml.etree.ElementTree`: 对 :class:`~xml.etree.ElementTree.Element` "
"的真值测试已被弃用。 在未来的发布版中它将始终返回 ``True``。 建议改用显式的 ``len(elem)`` 或 ``elem is not "
"None`` 测试。"

#: ../../deprecations/pending-removal-in-future.rst:157
msgid ""
":func:`sys._clear_type_cache` is deprecated: use "
":func:`sys._clear_internal_caches` instead."
msgstr ""
":func:`sys._clear_type_cache` 已弃用，请改用 :func:`sys._clear_internal_caches` 。"

#: ../../whatsnew/3.12.rst:1357 ../../whatsnew/3.12.rst:2241
msgid "Removed"
msgstr "移除"

#: ../../whatsnew/3.12.rst:1360
msgid "asynchat and asyncore"
msgstr "asynchat 和 asyncore"

#: ../../whatsnew/3.12.rst:1362
msgid ""
"These two modules have been removed according to the schedule in :pep:`594`,"
" having been deprecated in Python 3.6. Use :mod:`asyncio` instead. "
"(Contributed by Nikita Sobolev in :gh:`96580`.)"
msgstr ""
"这两个模块已根据 :pep:`594` 中的时间表被移除，它们从 Python 3.6 起已被弃用。 请改用 :mod:`asyncio`。 （由 "
"Nikita Sobolev 在 :gh:`96580` 中贡献。）"

#: ../../whatsnew/3.12.rst:1369
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.12.rst:1371
msgid ""
"Several names deprecated in the :mod:`configparser` way back in 3.2 have "
"been removed per :gh:`89336`:"
msgstr ":mod:`configparser` 中的几个从 3.2 起已被弃用的名称已根据 :gh:`89336` 被移除："

#: ../../whatsnew/3.12.rst:1374
msgid ""
":class:`configparser.ParsingError` no longer has a ``filename`` attribute or"
" argument. Use the ``source`` attribute and argument instead."
msgstr ""
":class:`configparser.ParsingError` 不再具有 ``filename`` 属性或参数。 请改用 ``source`` "
"属性和参数。"

#: ../../whatsnew/3.12.rst:1376
msgid ""
":mod:`configparser` no longer has a ``SafeConfigParser`` class. Use the "
"shorter :class:`~configparser.ConfigParser` name instead."
msgstr ""
":mod:`configparser` 不再具有 ``SafeConfigParser`` 类。 请改用更简短的名称 "
":class:`~configparser.ConfigParser`。"

#: ../../whatsnew/3.12.rst:1378
msgid ""
":class:`configparser.ConfigParser` no longer has a ``readfp`` method. Use "
":meth:`~configparser.ConfigParser.read_file` instead."
msgstr ""
":class:`configparser.ConfigParser` 不再具有 ``readfp`` 方法。 请改用 "
":meth:`~configparser.ConfigParser.read_file`。"

#: ../../whatsnew/3.12.rst:1384
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.12.rst:1386
msgid ""
"Remove the :py:mod:`!distutils` package. It was deprecated in Python 3.10 by"
" :pep:`632` \"Deprecate distutils module\". For projects still using "
"``distutils`` and cannot be updated to something else, the ``setuptools`` "
"project can be installed: it still provides ``distutils``. (Contributed by "
"Victor Stinner in :gh:`92584`.)"
msgstr ""
"移除了 :py:mod:`!distutils` 包。 它已在 Python 3.10 中根据 :pep:`632` \"Deprecate "
"distutils module\" 被弃用。 对于仍然使用 ``distutils`` 且无法升级为使用其他工具的项目，可以安装 "
"``setuptools`` 项目：它仍然提供了 ``distutils``。 （由 Victor Stinner 在 :gh:`92584` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:1393
msgid "ensurepip"
msgstr "ensurepip"

#: ../../whatsnew/3.12.rst:1395
msgid ""
"Remove the bundled setuptools wheel from :mod:`ensurepip`, and stop "
"installing setuptools in environments created by :mod:`venv`."
msgstr ""
"从 :mod:`ensurepip` 中移除了捆绑的 setuptools wheel，并停止在由 :mod:`venv` 创建的环境中安装 "
"setuptools。"

#: ../../whatsnew/3.12.rst:1398
msgid ""
"``pip (>= 22.1)`` does not require setuptools to be installed in the "
"environment. ``setuptools``-based (and ``distutils``-based) packages can "
"still be used with ``pip install``, since pip will provide ``setuptools`` in"
" the build environment it uses for building a package."
msgstr ""
"``pip (>= 22.1)`` 不再要求在环境中安装 setuptools。 基于 ``setuptools`` (和基于 "
"``distutils``) 的包仍然可通过 ``pip install`` 来使用，因为 pip 将在它用于构建包的构建环境中提供 "
"``setuptools``。"

#: ../../whatsnew/3.12.rst:1404
msgid ""
"``easy_install``, ``pkg_resources``, ``setuptools`` and ``distutils`` are no"
" longer provided by default in environments created with ``venv`` or "
"bootstrapped with ``ensurepip``, since they are part of the ``setuptools`` "
"package. For projects relying on these at runtime, the ``setuptools`` "
"project should be declared as a dependency and installed separately "
"(typically, using pip)."
msgstr ""
"在默认情况下由 ``venv`` 创建或通过 ``ensurepip`` 初始化的环境将不再提供 ``easy_install``, "
"``pkg_resources``, ``setuptools`` 和 ``distutils`` 包，因为它们是 ``setuptools`` "
"包的组成部分。 对于在运行时依赖这些包的项目，应当将 ``setuptools`` 项目声明为依赖项之一并单独安装（通常是使用 pip）。"

#: ../../whatsnew/3.12.rst:1411
msgid "(Contributed by Pradyun Gedam in :gh:`95299`.)"
msgstr "（由 Pradyun Gedam 在 :gh:`95299` 中贡献。）"

#: ../../whatsnew/3.12.rst:1414
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.12.rst:1416
msgid ""
"Remove :mod:`enum`'s ``EnumMeta.__getattr__``, which is no longer needed for"
" enum attribute access. (Contributed by Ethan Furman in :gh:`95083`.)"
msgstr ""
"移除了 :mod:`enum` 的 ``EnumMeta.__getattr__``，枚举属性访问已不再需要它。 （由 Ethan Furman 在 "
":gh:`95083` 中贡献。）"

#: ../../whatsnew/3.12.rst:1421
msgid "ftplib"
msgstr "ftplib"

#: ../../whatsnew/3.12.rst:1423
msgid ""
"Remove :mod:`ftplib`'s ``FTP_TLS.ssl_version`` class attribute: use the "
"*context* parameter instead. (Contributed by Victor Stinner in :gh:`94172`.)"
msgstr ""
"移除了 :mod:`ftplib` 的 ``FTP_TLS.ssl_version`` 类属性：请改用 *context* 形参。 （由 Victor "
"Stinner 在 :gh:`94172` 中贡献。）"

#: ../../whatsnew/3.12.rst:1428
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.12.rst:1430
msgid ""
"Remove the ``filename`` attribute of :mod:`gzip`'s :class:`gzip.GzipFile`, "
"deprecated since Python 2.6, use the :attr:`~gzip.GzipFile.name` attribute "
"instead. In write mode, the ``filename`` attribute added ``'.gz'`` file "
"extension if it was not present. (Contributed by Victor Stinner in "
":gh:`94196`.)"
msgstr ""
"移除了 :mod:`gzip` 中 :class:`gzip.GzipFile` 的 ``filename`` 属性，自 Python 2.6 "
"起该属性已被弃用，请改用 :attr:`~gzip.GzipFile.name` 属性。 在可写模式下，如果 ``filename`` 属性没有 "
"``'.gz'`` 文件扩展名则会添加它。 （由 Victor Stinner 在 :gh:`94196` 中贡献。）"

#: ../../whatsnew/3.12.rst:1437
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.12.rst:1439
msgid ""
"Remove the pure Python implementation of :mod:`hashlib`'s "
":func:`hashlib.pbkdf2_hmac`, deprecated in Python 3.10. Python 3.10 and "
"newer requires OpenSSL 1.1.1 (:pep:`644`): this OpenSSL version provides a C"
" implementation of :func:`~hashlib.pbkdf2_hmac` which is faster. "
"(Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""
"移除了 :mod:`hashlib` 中 :func:`hashlib.pbkdf2_hmac` 的纯 Python 实现，它在 Python 3.10"
" 中已被弃用。 Python 3.10 及更新版本需要 OpenSSL 1.1.1 (:pep:`644`)：该 OpenSSL 版本提供了 "
":func:`~hashlib.pbkdf2_hmac` 的更快速的 C 实现。 （由 Victor Stinner 在 :gh:`94199` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:1446 ../../whatsnew/3.12.rst:1475
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.12.rst:1448
msgid ""
"Many previously deprecated cleanups in :mod:`importlib` have now been "
"completed:"
msgstr ":mod:`importlib` 中许多先前已弃用对象的清理工作现已完成："

#: ../../whatsnew/3.12.rst:1451
msgid ""
"References to, and support for :meth:`!module_repr` has been removed. "
"(Contributed by Barry Warsaw in :gh:`97850`.)"
msgstr ""
"对 :meth:`!module_repr` 的引用以及支持已被移除。 （由 Barry Warsaw 在 :gh:`97850` 中贡献。）"

#: ../../whatsnew/3.12.rst:1454
msgid ""
"``importlib.util.set_package``, ``importlib.util.set_loader`` and "
"``importlib.util.module_for_loader`` have all been removed. (Contributed by "
"Brett Cannon and Nikita Sobolev in :gh:`65961` and :gh:`97850`.)"
msgstr ""
"``importlib.util.set_package``, ``importlib.util.set_loader`` 和 "
"``importlib.util.module_for_loader`` 均已被移除。 （由 Brett Cannon 和 Nikita Sobolev"
" 在 :gh:`65961` 和 :gh:`97850` 中贡献。）"

#: ../../whatsnew/3.12.rst:1458
msgid ""
"Support for ``find_loader()`` and ``find_module()`` APIs have been removed."
"  (Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""
"对 ``find_loader()`` 和 ``find_module()`` API 的支持已被移除。 （由 Barry Warsaw 在 "
":gh:`98040` 中贡献。）"

#: ../../whatsnew/3.12.rst:1461
msgid ""
"``importlib.abc.Finder``, ``pkgutil.ImpImporter``, and ``pkgutil.ImpLoader``"
" have been removed.  (Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""
"``importlib.abc.Finder``, ``pkgutil.ImpImporter`` 和 ``pkgutil.ImpLoader`` "
"已被移除。 （由 Barry Warsaw 在 :gh:`98040` 中贡献。）"

#: ../../whatsnew/3.12.rst:1467 ../../whatsnew/3.12.rst:1475
msgid "imp"
msgstr "imp"

#: ../../whatsnew/3.12.rst:1469
msgid ""
"The :mod:`!imp` module has been removed.  (Contributed by Barry Warsaw in "
":gh:`98040`.)"
msgstr ":mod:`!imp` 模块已被移除。 （由 Barry Warsaw 在 :gh:`98040` 中贡献。）"

#: ../../whatsnew/3.12.rst:1472
msgid "To migrate, consult the following correspondence table:"
msgstr "要进行迁移，请参考以下对照表："

#: ../../whatsnew/3.12.rst:1477
msgid "``imp.NullImporter``"
msgstr "``imp.NullImporter``"

#: ../../whatsnew/3.12.rst:1477
msgid "Insert ``None`` into ``sys.path_importer_cache``"
msgstr "将 ``None`` 插入到 ``sys.path_importer_cache``"

#: ../../whatsnew/3.12.rst:1478
msgid "``imp.cache_from_source()``"
msgstr "``imp.cache_from_source()``"

#: ../../whatsnew/3.12.rst:1478
msgid ":func:`importlib.util.cache_from_source`"
msgstr ":func:`importlib.util.cache_from_source`"

#: ../../whatsnew/3.12.rst:1479
msgid "``imp.find_module()``"
msgstr "``imp.find_module()``"

#: ../../whatsnew/3.12.rst:1479
msgid ":func:`importlib.util.find_spec`"
msgstr ":func:`importlib.util.find_spec`"

#: ../../whatsnew/3.12.rst:1480
msgid "``imp.get_magic()``"
msgstr "``imp.get_magic()``"

#: ../../whatsnew/3.12.rst:1480
msgid ":const:`importlib.util.MAGIC_NUMBER`"
msgstr ":const:`importlib.util.MAGIC_NUMBER`"

#: ../../whatsnew/3.12.rst:1481
msgid "``imp.get_suffixes()``"
msgstr "``imp.get_suffixes()``"

#: ../../whatsnew/3.12.rst:1481
msgid ""
":const:`importlib.machinery.SOURCE_SUFFIXES`, "
":const:`importlib.machinery.EXTENSION_SUFFIXES`, and "
":const:`importlib.machinery.BYTECODE_SUFFIXES`"
msgstr ""
":const:`importlib.machinery.SOURCE_SUFFIXES`, "
":const:`importlib.machinery.EXTENSION_SUFFIXES` 和 "
":const:`importlib.machinery.BYTECODE_SUFFIXES`"

#: ../../whatsnew/3.12.rst:1482
msgid "``imp.get_tag()``"
msgstr "``imp.get_tag()``"

#: ../../whatsnew/3.12.rst:1482
msgid ":attr:`sys.implementation.cache_tag <sys.implementation>`"
msgstr ":attr:`sys.implementation.cache_tag <sys.implementation>`"

#: ../../whatsnew/3.12.rst:1483
msgid "``imp.load_module()``"
msgstr "``imp.load_module()``"

#: ../../whatsnew/3.12.rst:1483
msgid ":func:`importlib.import_module`"
msgstr ":func:`importlib.import_module`"

#: ../../whatsnew/3.12.rst:1484
msgid "``imp.new_module(name)``"
msgstr "``imp.new_module(name)``"

#: ../../whatsnew/3.12.rst:1484
msgid "``types.ModuleType(name)``"
msgstr "``types.ModuleType(name)``"

#: ../../whatsnew/3.12.rst:1485
msgid "``imp.reload()``"
msgstr "``imp.reload()``"

#: ../../whatsnew/3.12.rst:1485
msgid ":func:`importlib.reload`"
msgstr ":func:`importlib.reload`"

#: ../../whatsnew/3.12.rst:1486
msgid "``imp.source_from_cache()``"
msgstr "``imp.source_from_cache()``"

#: ../../whatsnew/3.12.rst:1486
msgid ":func:`importlib.util.source_from_cache`"
msgstr ":func:`importlib.util.source_from_cache`"

#: ../../whatsnew/3.12.rst:1487
msgid "``imp.load_source()``"
msgstr "``imp.load_source()``"

#: ../../whatsnew/3.12.rst:1487
msgid "*See below*"
msgstr "*见下文*"

#: ../../whatsnew/3.12.rst:1490
msgid "Replace ``imp.load_source()`` with::"
msgstr "将 ``imp.load_source()`` 替换为::"

#: ../../whatsnew/3.12.rst:1492
msgid ""
"import importlib.util\n"
"import importlib.machinery\n"
"\n"
"def load_source(modname, filename):\n"
"    loader = importlib.machinery.SourceFileLoader(modname, filename)\n"
"    spec = importlib.util.spec_from_file_location(modname, filename, loader=loader)\n"
"    module = importlib.util.module_from_spec(spec)\n"
"    # The module is always executed and not cached in sys.modules.\n"
"    # Uncomment the following line to cache the module.\n"
"    # sys.modules[module.__name__] = module\n"
"    loader.exec_module(module)\n"
"    return module"
msgstr ""
"import importlib.util\n"
"import importlib.machinery\n"
"\n"
"def load_source(modname, filename):\n"
"    loader = importlib.machinery.SourceFileLoader(modname, filename)\n"
"    spec = importlib.util.spec_from_file_location(modname, filename, loader=loader)\n"
"    module = importlib.util.module_from_spec(spec)\n"
"    # 模块将总是被执行而不缓存在 sys.modules 中。\n"
"    # 取消对下一行的注释以缓存此模块。\n"
"    # sys.modules[module.__name__] = module\n"
"    loader.exec_module(module)\n"
"    return module"

#: ../../whatsnew/3.12.rst:1505
msgid "Remove :mod:`!imp` functions and attributes with no replacements:"
msgstr "已移除 :mod:`!imp` 的函数和属性并且没有替代选项:"

#: ../../whatsnew/3.12.rst:1507
msgid "Undocumented functions:"
msgstr "未写入文档的函数："

#: ../../whatsnew/3.12.rst:1509
msgid "``imp.init_builtin()``"
msgstr "``imp.init_builtin()``"

#: ../../whatsnew/3.12.rst:1510
msgid "``imp.load_compiled()``"
msgstr "``imp.load_compiled()``"

#: ../../whatsnew/3.12.rst:1511
msgid "``imp.load_dynamic()``"
msgstr "``imp.load_dynamic()``"

#: ../../whatsnew/3.12.rst:1512
msgid "``imp.load_package()``"
msgstr "``imp.load_package()``"

#: ../../whatsnew/3.12.rst:1514
msgid ""
"``imp.lock_held()``, ``imp.acquire_lock()``, ``imp.release_lock()``: the "
"locking scheme has changed in Python 3.3 to per-module locks."
msgstr ""
"``imp.lock_held()``,``imp.acquire_lock()``,``imp.release_lock()``: 加锁方案在 "
"Python 3.3 中已改为模块级锁。"

#: ../../whatsnew/3.12.rst:1516
msgid ""
"``imp.find_module()`` constants: ``SEARCH_ERROR``, ``PY_SOURCE``, "
"``PY_COMPILED``, ``C_EXTENSION``, ``PY_RESOURCE``, ``PKG_DIRECTORY``, "
"``C_BUILTIN``, ``PY_FROZEN``, ``PY_CODERESOURCE``, ``IMP_HOOK``."
msgstr ""
"``imp.find_module()`` 常量: ``SEARCH_ERROR``, ``PY_SOURCE``, ``PY_COMPILED``, "
"``C_EXTENSION``, ``PY_RESOURCE``, ``PKG_DIRECTORY``, ``C_BUILTIN``, "
"``PY_FROZEN``, ``PY_CODERESOURCE``, ``IMP_HOOK``。"

#: ../../whatsnew/3.12.rst:1521
msgid "io"
msgstr "io"

#: ../../whatsnew/3.12.rst:1523
msgid ""
"Remove :mod:`io`'s ``io.OpenWrapper`` and ``_pyio.OpenWrapper``, deprecated "
"in Python 3.10: just use :func:`open` instead. The :func:`open` "
"(:func:`io.open`) function is a built-in function. Since Python 3.10, "
":func:`!_pyio.open` is also a static method. (Contributed by Victor Stinner "
"in :gh:`94169`.)"
msgstr ""
"移除了 :mod:`io` 中的 ``io.OpenWrapper`` 和 ``_pyio.OpenWrapper``，它们在 Python 3.10 "
"中已被弃用：请改用 :func:`open`。  :func:`open` (:func:`io.open`) 函数是一个内置函数。 自 Python "
"3.10 起，:func:`!_pyio.open` 也是一个静态方法。 （由 Victor Stinner 在 :gh:`94169` 中贡献。）.)"

#: ../../whatsnew/3.12.rst:1530
msgid "locale"
msgstr "locale"

#: ../../whatsnew/3.12.rst:1532
msgid ""
"Remove :mod:`locale`'s :func:`!locale.format` function, deprecated in Python"
" 3.7: use :func:`locale.format_string` instead. (Contributed by Victor "
"Stinner in :gh:`94226`.)"
msgstr ""
"移除了 :mod:`locale` 的 :func:`!locale.format` 函数，它在 Python 3.7 中已被弃用：请改用 "
":func:`locale.format_string`。 （由 Victor Stinner 在 :gh:`94226` 中贡献。）"

#: ../../whatsnew/3.12.rst:1537
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.12.rst:1539
msgid ""
"The ``smtpd`` module has been removed according to the schedule in "
":pep:`594`, having been deprecated in Python 3.4.7 and 3.5.4. Use the "
":pypi:`aiosmtpd` PyPI module or any other :mod:`asyncio`-based server "
"instead. (Contributed by Oleg Iarygin in :gh:`93243`.)"
msgstr ""
"``smtpd`` 模块已按照 :pep:`594` 中的计划表被移除，它在 Python 3.4.7 和 3.5.4 中已被弃用。 请改用 "
":pypi:`aiosmtpd` PyPI 模块或任何其他基于 :mod:`asyncio` 的服务器。 （由 Oleg Iarygin 在 "
":gh:`93243` 中贡献。）"

#: ../../whatsnew/3.12.rst:1548
msgid ""
"The following undocumented :mod:`sqlite3` features, deprecated in Python "
"3.10, are now removed:"
msgstr "以下未写入文档的 :mod:`sqlite3` 特性，在 Python 3.10 中已被弃用，现在已被移除："

#: ../../whatsnew/3.12.rst:1551
msgid "``sqlite3.enable_shared_cache()``"
msgstr "``sqlite3.enable_shared_cache()``"

#: ../../whatsnew/3.12.rst:1552
msgid "``sqlite3.OptimizedUnicode``"
msgstr "``sqlite3.OptimizedUnicode``"

#: ../../whatsnew/3.12.rst:1554
msgid ""
"If a shared cache must be used, open the database in URI mode using the "
"``cache=shared`` query parameter."
msgstr "如果必须使用共享缓存，请在以 URI 模式打开数据库时使用 ``cache=shared`` 查询参数。"

#: ../../whatsnew/3.12.rst:1557
msgid ""
"The ``sqlite3.OptimizedUnicode`` text factory has been an alias for "
":class:`str` since Python 3.3. Code that previously set the text factory to "
"``OptimizedUnicode`` can either use ``str`` explicitly, or rely on the "
"default value which is also ``str``."
msgstr ""
"``sqlite3.OptimizedUnicode`` 文本工厂函数自 Python 3.3 起已成为 :class:`str` 的一个别名。 "
"之前将文本工厂设为 ``OptimizedUnicode`` 的代码可以显式地使用 ``str``，或者依赖同样为 ``str`` 的默认值。"

#: ../../whatsnew/3.12.rst:1562
msgid "(Contributed by Erlend E. Aasland in :gh:`92548`.)"
msgstr "（由 Erlend E. Aasland 在 :gh:`92548` 中贡献。）"

#: ../../whatsnew/3.12.rst:1565
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.12.rst:1567
msgid ""
"Remove :mod:`ssl`'s :func:`!ssl.RAND_pseudo_bytes` function, deprecated in "
"Python 3.6: use :func:`os.urandom` or :func:`ssl.RAND_bytes` instead. "
"(Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""
"移除了 :mod:`ssl` 的 :func:`!ssl.RAND_pseudo_bytes` 函数，它在 Python 3.6 中已被弃用：请改用 "
":func:`os.urandom` 或 :func:`ssl.RAND_bytes`。 （由 Victor Stinner 在 :gh:`94199`"
" 中贡献。）"

#: ../../whatsnew/3.12.rst:1571
msgid ""
"Remove the :func:`!ssl.match_hostname` function. It was deprecated in Python"
" 3.7. OpenSSL performs hostname matching since Python 3.7, Python no longer "
"uses the :func:`!ssl.match_hostname` function. (Contributed by Victor "
"Stinner in :gh:`94199`.)"
msgstr ""
"移除了 :func:`!ssl.match_hostname` 函数。 它在 Python 3.7 中已被弃用。 OpenSSL 自 Python "
"3.7 起将会执行主机名匹配，Python 已不再使用 :func:`!ssl.match_hostname` 函数。 （由 Victor "
"Stinner 在 :gh:`94199` 中贡献。）"

#: ../../whatsnew/3.12.rst:1577
msgid ""
"Remove the :func:`!ssl.wrap_socket` function, deprecated in Python 3.7: "
"instead, create a :class:`ssl.SSLContext` object and call its "
":class:`ssl.SSLContext.wrap_socket` method. Any package that still uses "
":func:`!ssl.wrap_socket` is broken and insecure. The function neither sends "
"a SNI TLS extension nor validates the server hostname. Code is subject to "
":cwe:`295` (Improper Certificate Validation). (Contributed by Victor Stinner"
" in :gh:`94199`.)"
msgstr ""
"移除了 :func:`!ssl.wrap_socket` 函数，它在 Python 3.7 中已被弃用：应改为创建一个 "
":class:`ssl.SSLContext` 对象并调用其 :class:`ssl.SSLContext.wrap_socket` 方法。 "
"任何仍然使用 :func:`!ssl.wrap_socket` 的包都是已不适用且不安全的。 该函数既不会发送 SNI TLS "
"扩展也不会验证服务器主机名。 其代码会受到 :cwe:`295` (Improper Certificate Validation) 的影响。 （由 "
"Victor Stinner 在 :gh:`94199` 中贡献。）"

#: ../../whatsnew/3.12.rst:1588
msgid "Remove many long-deprecated :mod:`unittest` features:"
msgstr "移除了许多早已弃用的 :mod:`unittest` 特性："

#: ../../whatsnew/3.12.rst:1592
msgid "A number of :class:`~unittest.TestCase` method aliases:"
msgstr "一些 :class:`~unittest.TestCase` 方法的别名:"

#: ../../whatsnew/3.12.rst:1595
msgid "Deprecated alias"
msgstr "已弃用的别名"

#: ../../whatsnew/3.12.rst:1595
msgid "Method Name"
msgstr "方法名"

#: ../../whatsnew/3.12.rst:1595
msgid "Deprecated in"
msgstr "弃用于"

#: ../../whatsnew/3.12.rst:1597
msgid "``failUnless``"
msgstr "``failUnless``"

#: ../../whatsnew/3.12.rst:1597 ../../whatsnew/3.12.rst:1604
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.12.rst:1597 ../../whatsnew/3.12.rst:1598
#: ../../whatsnew/3.12.rst:1599 ../../whatsnew/3.12.rst:1600
#: ../../whatsnew/3.12.rst:1601 ../../whatsnew/3.12.rst:1602
#: ../../whatsnew/3.12.rst:1603
msgid "3.1"
msgstr "3.1"

#: ../../whatsnew/3.12.rst:1598
msgid "``failIf``"
msgstr "``failIf``"

#: ../../whatsnew/3.12.rst:1598
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: ../../whatsnew/3.12.rst:1599
msgid "``failUnlessEqual``"
msgstr "``failUnlessEqual``"

#: ../../whatsnew/3.12.rst:1599 ../../whatsnew/3.12.rst:1605
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.12.rst:1600
msgid "``failIfEqual``"
msgstr "``failIfEqual``"

#: ../../whatsnew/3.12.rst:1600 ../../whatsnew/3.12.rst:1606
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.12.rst:1601
msgid "``failUnlessAlmostEqual``"
msgstr "``failUnlessAlmostEqual``"

#: ../../whatsnew/3.12.rst:1601 ../../whatsnew/3.12.rst:1607
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.12.rst:1602
msgid "``failIfAlmostEqual``"
msgstr "``failIfAlmostEqual``"

#: ../../whatsnew/3.12.rst:1602 ../../whatsnew/3.12.rst:1608
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.12.rst:1603
msgid "``failUnlessRaises``"
msgstr "``failUnlessRaises``"

#: ../../whatsnew/3.12.rst:1603
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: ../../whatsnew/3.12.rst:1604
msgid "``assert_``"
msgstr "``assert_``"

#: ../../whatsnew/3.12.rst:1604 ../../whatsnew/3.12.rst:1605
#: ../../whatsnew/3.12.rst:1606 ../../whatsnew/3.12.rst:1607
#: ../../whatsnew/3.12.rst:1608 ../../whatsnew/3.12.rst:1609
#: ../../whatsnew/3.12.rst:1610
msgid "3.2"
msgstr "3.2"

#: ../../whatsnew/3.12.rst:1605
msgid "``assertEquals``"
msgstr "``assertEquals``"

#: ../../whatsnew/3.12.rst:1606
msgid "``assertNotEquals``"
msgstr "``assertNotEquals``"

#: ../../whatsnew/3.12.rst:1607
msgid "``assertAlmostEquals``"
msgstr "``assertAlmostEquals``"

#: ../../whatsnew/3.12.rst:1608
msgid "``assertNotAlmostEquals``"
msgstr "``assertNotAlmostEquals``"

#: ../../whatsnew/3.12.rst:1609
msgid "``assertRegexpMatches``"
msgstr "``assertRegexpMatches``"

#: ../../whatsnew/3.12.rst:1609
msgid ":meth:`.assertRegex`"
msgstr ":meth:`.assertRegex`"

#: ../../whatsnew/3.12.rst:1610
msgid "``assertRaisesRegexp``"
msgstr "``assertRaisesRegexp``"

#: ../../whatsnew/3.12.rst:1610
msgid ":meth:`.assertRaisesRegex`"
msgstr ":meth:`.assertRaisesRegex`"

#: ../../whatsnew/3.12.rst:1611
msgid "``assertNotRegexpMatches``"
msgstr "``assertNotRegexpMatches``"

#: ../../whatsnew/3.12.rst:1611
msgid ":meth:`.assertNotRegex`"
msgstr ":meth:`.assertNotRegex`"

#: ../../whatsnew/3.12.rst:1611
msgid "3.5"
msgstr "3.5"

#: ../../whatsnew/3.12.rst:1614
msgid ""
"You can use https://github.com/isidentical/teyit to automatically modernise "
"your unit tests."
msgstr "您可以使用 https://github.com/isidentical/teyit 来自动更新你的单元测试。"

#: ../../whatsnew/3.12.rst:1617
msgid ""
"Undocumented and broken :class:`~unittest.TestCase` method "
"``assertDictContainsSubset`` (deprecated in Python 3.2)."
msgstr ""
"未写入文档且已不可用的 :class:`~unittest.TestCase` 方法 ``assertDictContainsSubset``。 （在 "
"Python 3.2 中已弃用。）"

#: ../../whatsnew/3.12.rst:1620
msgid ""
"Undocumented :meth:`TestLoader.loadTestsFromModule "
"<unittest.TestLoader.loadTestsFromModule>` parameter *use_load_tests* "
"(deprecated and ignored since Python 3.5)."
msgstr ""
"未写入文档的 :meth:`TestLoader.loadTestsFromModule "
"<unittest.TestLoader.loadTestsFromModule>` 形参 *use_load_tests*。 （自 Python "
"3.5 起已弃用并会被忽略。）"

#: ../../whatsnew/3.12.rst:1624
msgid ""
"An alias of the :class:`~unittest.TextTestResult` class: ``_TextTestResult``"
" (deprecated in Python 3.2)."
msgstr ""
":class:`~unittest.TextTestResult` 类的一个别名: ``_TextTestResult``。 （在 Python 3.2"
" 中已弃用。）"

#: ../../whatsnew/3.12.rst:1627
msgid "(Contributed by Serhiy Storchaka in :gh:`89325`.)"
msgstr "（由 Serhiy Storchaka 在 :gh:`89325` 中贡献。）"

#: ../../whatsnew/3.12.rst:1630
msgid "webbrowser"
msgstr "webbrowser"

#: ../../whatsnew/3.12.rst:1632
msgid ""
"Remove support for obsolete browsers from :mod:`webbrowser`. The removed "
"browsers include: Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, "
"Firebird, and Firefox versions 35 and below (:gh:`102871`)."
msgstr ""
"从 :mod:`webbrowser` 移除了对过时浏览器的支持。 "
"被移除的浏览器包括：Grail、Mosaic、Netscape、Galeon、Skipstone、Iceape、Firebird 和 Firefox "
"35 及以下的版本 (:gh:`102871`)。"

#: ../../whatsnew/3.12.rst:1637
msgid "xml.etree.ElementTree"
msgstr "xml.etree.ElementTree"

#: ../../whatsnew/3.12.rst:1639
msgid ""
"Remove the ``ElementTree.Element.copy()`` method of the pure Python "
"implementation, deprecated in Python 3.10, use the :func:`copy.copy` "
"function instead.  The C implementation of :mod:`xml.etree.ElementTree` has "
"no ``copy()`` method, only a ``__copy__()`` method. (Contributed by Victor "
"Stinner in :gh:`94383`.)"
msgstr ""
"移除了纯 Python 实现的 ``ElementTree.Element.copy()`` 方法，该方法在 Python 3.10 中已被弃用，请改用"
" :func:`copy.copy` 函数。 :mod:`xml.etree.ElementTree` 的 C 实现没有 ``copy()`` "
"方法，只有 ``__copy__()`` 方法。 （由 Victor Stinner 在 :gh:`94383` 中贡献。）"

#: ../../whatsnew/3.12.rst:1646
msgid "zipimport"
msgstr "zipimport"

#: ../../whatsnew/3.12.rst:1648
msgid ""
"Remove :mod:`zipimport`'s ``find_loader()`` and ``find_module()`` methods, "
"deprecated in Python 3.10: use the ``find_spec()`` method instead.  See "
":pep:`451` for the rationale. (Contributed by Victor Stinner in "
":gh:`94379`.)"
msgstr ""
"移除了 :mod:`zipimport` 的 ``find_loader()`` 和 ``find_module()`` 方法，它们在 Python "
"3.10 中已被弃用：请改用 ``find_spec()`` 方法。 请参阅 :pep:`451` 了解相关说明。 （由 Victor Stinner "
"在 :gh:`94379` 中贡献。）"

#: ../../whatsnew/3.12.rst:1654
msgid "Others"
msgstr "其他事项"

#: ../../whatsnew/3.12.rst:1656
msgid ""
"Remove the ``suspicious`` rule from the documentation :file:`Makefile` and "
":file:`Doc/tools/rstlint.py`, both in favor of `sphinx-lint "
"<https://github.com/sphinx-contrib/sphinx-lint>`_. (Contributed by Julien "
"Palard in :gh:`98179`.)"
msgstr ""
"从文档 :file:`Makefile` 和 :file:`Doc/tools/rstlint.py` 中移除了 ``suspicious`` "
"规则，请改用 `sphinx-lint <https://github.com/sphinx-contrib/sphinx-lint>`_。 （由 "
"Julien Palard 在 :gh:`98179` 中贡献。）"

#: ../../whatsnew/3.12.rst:1661
msgid ""
"Remove the *keyfile* and *certfile* parameters from the :mod:`ftplib`, "
":mod:`imaplib`, :mod:`poplib` and :mod:`smtplib` modules, and the "
"*key_file*, *cert_file* and *check_hostname* parameters from the "
":mod:`http.client` module, all deprecated since Python 3.6. Use the "
"*context* parameter (*ssl_context* in :mod:`imaplib`) instead. (Contributed "
"by Victor Stinner in :gh:`94172`.)"
msgstr ""
"移除了 :mod:`ftplib`、:mod:`imaplib`、:mod:`poplib` 和 :mod:`smtplib` 模块中的 "
"*keyfile* 和 *certfile* 形参数，以及 :mod:`http.client` 模块中的 *key_file*、*cert_file*"
" 和 *check_hostname* 形参，它们自 Python 3.6 起都已被弃用。 请改用 *context* 形参（在 "
":mod:`imaplib` 中为 *ssl_context* 形参）。 （由 Victor Stinner 在 :gh:`94172` 中贡献。）.)"

#: ../../whatsnew/3.12.rst:1669
msgid ""
"Remove ``Jython`` compatibility hacks from several stdlib modules and tests."
" (Contributed by Nikita Sobolev in :gh:`99482`.)"
msgstr ""
"从多个标准库模块和测试中移除了 ``Jython`` 兼容性处理。 （由 Nikita Sobolev 在 :gh:`99482` 中贡献。）"

#: ../../whatsnew/3.12.rst:1672
msgid ""
"Remove ``_use_broken_old_ctypes_structure_semantics_`` flag from "
":mod:`ctypes` module. (Contributed by Nikita Sobolev in :gh:`99285`.)"
msgstr ""
"从 :mod:`ctypes` 模块移除了 ``_use_broken_old_ctypes_structure_semantics_`` 旗标。 （由"
" Nikita Sobolev 在 :gh:`99285` 中贡献。）"

#: ../../whatsnew/3.12.rst:1680 ../../whatsnew/3.12.rst:2004
msgid "Porting to Python 3.12"
msgstr "移植到 Python 3.12"

#: ../../whatsnew/3.12.rst:1682
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.12.rst:1686
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.12.rst:1688
msgid ""
"More strict rules are now applied for numerical group references and group "
"names in regular expressions. Only sequence of ASCII digits is now accepted "
"as a numerical reference. The group name in bytes patterns and replacement "
"strings can now only contain ASCII letters and digits and underscore. "
"(Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
"现在对于正则表达式中的数字分组引用和分组名称将应用更严格的规则。 现在只接受 ASCII 数字序列作为数字引用。 "
"字节串模式和替换字符串中的分组名称现在只能包含 ASCII 字母、数字和下划线。 （由 Serhiy Storchaka 在 :gh:`91760` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:1695
msgid ""
"Remove ``randrange()`` functionality deprecated since Python 3.10.  "
"Formerly, ``randrange(10.0)`` losslessly converted to ``randrange(10)``. "
"Now, it raises a :exc:`TypeError`. Also, the exception raised for non-"
"integer values such as ``randrange(10.5)`` or ``randrange('10')`` has been "
"changed from :exc:`ValueError` to :exc:`TypeError`.  This also prevents bugs"
" where ``randrange(1e25)`` would silently select from a larger range than "
"``randrange(10**25)``. (Originally suggested by Serhiy Storchaka "
":gh:`86388`.)"
msgstr ""
"移除了自 Python 3.10 起已被弃用的 ``randrange()`` 功能。 以前，``randrange(10.0)`` 会无损地转换为 "
"``randrange(10)``。 现在，它将引发 :exc:`TypeError`。 此外，对于非整数值如 ``randrange(10.5)`` "
"或 ``randrange('10')`` 所引发的异常已从 :exc:`ValueError` 改为 :exc:`TypeError`。 这也防止了 "
"``randrange(1e25)`` 会从比 ``randrange(10**25)`` 更大的范围中静默选择的问题。 （最初由 Serhiy "
"Storchaka 在 :gh:`86388` 中提议。）"

#: ../../whatsnew/3.12.rst:1703
msgid ""
":class:`argparse.ArgumentParser` changed encoding and error handler for "
"reading arguments from file (e.g. ``fromfile_prefix_chars`` option) from "
"default text encoding (e.g. :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>`) to :term:`filesystem encoding and error "
"handler`. Argument files should be encoded in UTF-8 instead of ANSI Codepage"
" on Windows."
msgstr ""
":class:`argparse.ArgumentParser` 将从文件（例如 ``fromfile_prefix_chars`` "
"选项）读取参数的编码格式和错误处理器从默认的文本编码格式（例如 :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>` 调用）改为 :term:`filesystem encoding and error "
"handler`。 在 Windows 系统中参数文件应使用 UTF-8 而不是 ANSI 代码页来编码。"

#: ../../whatsnew/3.12.rst:1709
msgid ""
"Remove the ``asyncore``-based ``smtpd`` module deprecated in Python 3.4.7 "
"and 3.5.4.  A recommended replacement is the :mod:`asyncio`-based "
":pypi:`aiosmtpd` PyPI module."
msgstr ""
"移除了在 Python 3.4.7 和 3.5.4 中已被弃用的基于 ``asyncore`` 的 ``smtpd`` 模块。 推荐的替代是基于 "
":mod:`asyncio` 的 :pypi:`aiosmtpd` PyPI 模块。"

#: ../../whatsnew/3.12.rst:1713
msgid ""
":func:`shlex.split`: Passing ``None`` for *s* argument now raises an "
"exception, rather than reading :data:`sys.stdin`. The feature was deprecated"
" in Python 3.9. (Contributed by Victor Stinner in :gh:`94352`.)"
msgstr ""
":func:`shlex.split`: 传入 ``None`` 作为 *s* 参数现在将引发异常，而不是读取 :data:`sys.stdin`。 "
"该特性在 Python 3.9 中已被弃用。 （由 Victor Stinner 在 :gh:`94352` 中贡献。）"

#: ../../whatsnew/3.12.rst:1718
msgid ""
"The :mod:`os` module no longer accepts bytes-like paths, like "
":class:`bytearray` and :class:`memoryview` types: only the exact "
":class:`bytes` type is accepted for bytes strings. (Contributed by Victor "
"Stinner in :gh:`98393`.)"
msgstr ""
":mod:`os` 模块不再接受类似字节串的路径，如 :class:`bytearray` 和 :class:`memoryview` "
"类型：只接受明确的 :class:`bytes` 类型字节串。 （由 Victor Stinner 在 :gh:`98393` 中贡献。）"

#: ../../whatsnew/3.12.rst:1723
msgid ""
":func:`syslog.openlog` and :func:`syslog.closelog` now fail if used in "
"subinterpreters. :func:`syslog.syslog` may still be used in subinterpreters,"
" but now only if :func:`syslog.openlog` has already been called in the main "
"interpreter. These new restrictions do not apply to the main interpreter, so"
" only a very small set of users might be affected. This change helps with "
"interpreter isolation.  Furthermore, :mod:`syslog` is a wrapper around "
"process-global resources, which are best managed from the main interpreter. "
"(Contributed by Donghee Na in :gh:`99127`.)"
msgstr ""
"现在 :func:`syslog.openlog` 和 :func:`syslog.closelog` 如果在子解释器中使用将失败。 "
":func:`syslog.syslog` 仍可在子解释器中使用，但前提是 :func:`syslog.openlog` 已在主解释器中被调用。 "
"这些新限制不适用于主解释器，因此只有少数用户可能会受到影响。 这一改变有助于实现解释器隔离。 此外，:mod:`syslog` "
"是一个针对进程全局资源的包装器，而这些资源最好是由主解释器来管理。 （由 Donghee Na 在 :gh:`99127` 中贡献。）"

#: ../../whatsnew/3.12.rst:1732
msgid ""
"The undocumented locking behavior of :func:`~functools.cached_property` is "
"removed, because it locked across all instances of the class, leading to "
"high lock contention. This means that a cached property getter function "
"could now run more than once for a single instance, if two threads race. For"
" most simple cached properties (e.g. those that are idempotent and simply "
"calculate a value based on other attributes of the instance) this will be "
"fine.  If synchronization is needed, implement locking within the cached "
"property getter function or around multi-threaded access points."
msgstr ""
"未写入文档的 :func:`~functools.cached_property` "
"的锁定行为已被移除，因为该行为会在类的所有实例中锁定，从而导致高锁定争用。 "
"这意味着如果两个线程同时运行，缓存属性获取函数现在可以在单个实例中运行不止一次。 "
"对于大多数简单的缓存属性（例如那些幂等的并且只需根据实例的其他属性计算一个值的属性）来说这是没有问题的。 "
"如果需要同步，可在缓存属性获取函数中或多线程访问点周围实现锁定操作。"

#: ../../whatsnew/3.12.rst:1745
msgid ""
"When extracting tar files using :mod:`tarfile` or "
":func:`shutil.unpack_archive`, pass the *filter* argument to limit features "
"that may be surprising or dangerous. See :ref:`tarfile-extraction-filter` "
"for details."
msgstr ""
"当使用 :mod:`tarfile` 或 :func:`shutil.unpack_archive` 提取 tar 文件时，请传入 *filter* "
"参数来限制可能令人感到意外或危险的特性。 请参阅 :ref:`tarfile-extraction-filter` 了解详情。"

#: ../../whatsnew/3.12.rst:1750
msgid ""
"The output of the :func:`tokenize.tokenize` and "
":func:`tokenize.generate_tokens` functions is now changed due to the changes"
" introduced in :pep:`701`. This means that ``STRING`` tokens are not emitted"
" any more for f-strings and the tokens described in :pep:`701` are now "
"produced instead: ``FSTRING_START``, ``FSTRING_MIDDLE`` and ``FSTRING_END`` "
"are now emitted for f-string \"string\" parts in addition to the appropriate"
" tokens for the tokenization in the expression components. For example for "
"the f-string ``f\"start {1+1} end\"`` the old version of the tokenizer "
"emitted::"
msgstr ""
"由于在 :pep:`701` 中引入的更改 :func:`tokenize.tokenize` 和 "
":func:`tokenize.generate_tokens` 函数的输出现在发生了改变。 这意味着不再为 f-字符输出 ``STRING`` "
"词元而是改为产生 :pep:`701` 中描述的词元：除了用于对表达式组件进行分词的适当词元外现在还有 ``FSTRING_START``, "
"``FSTRING_MIDDLE`` 和 ``FSTRING_END`` 会被用于 f-字符串的“字符串”部分。 例如对于 f-字符串 "
"``f\"start {1+1} end\"`` 旧版本的分词器会生成::"

#: ../../whatsnew/3.12.rst:1759
msgid "1,0-1,18:           STRING         'f\"start {1+1} end\"'"
msgstr "1,0-1,18:           STRING         'f\"start {1+1} end\"'"

#: ../../whatsnew/3.12.rst:1761
msgid "while the new version emits::"
msgstr "而新版本将生成::"

#: ../../whatsnew/3.12.rst:1763
msgid ""
"1,0-1,2:            FSTRING_START  'f\"'\n"
"1,2-1,8:            FSTRING_MIDDLE 'start '\n"
"1,8-1,9:            OP             '{'\n"
"1,9-1,10:           NUMBER         '1'\n"
"1,10-1,11:          OP             '+'\n"
"1,11-1,12:          NUMBER         '1'\n"
"1,12-1,13:          OP             '}'\n"
"1,13-1,17:          FSTRING_MIDDLE ' end'\n"
"1,17-1,18:          FSTRING_END    '\"'"
msgstr ""
"1,0-1,2:            FSTRING_START  'f\"'\n"
"1,2-1,8:            FSTRING_MIDDLE 'start '\n"
"1,8-1,9:            OP             '{'\n"
"1,9-1,10:           NUMBER         '1'\n"
"1,10-1,11:          OP             '+'\n"
"1,11-1,12:          NUMBER         '1'\n"
"1,12-1,13:          OP             '}'\n"
"1,13-1,17:          FSTRING_MIDDLE ' end'\n"
"1,17-1,18:          FSTRING_END    '\"'"

#: ../../whatsnew/3.12.rst:1773
msgid ""
"Additionally, there may be some minor behavioral changes as a consequence of"
" the changes required to support :pep:`701`. Some of these changes include:"
msgstr "此外，支持 :pep:`701` 所需的改变还可能会导致一些细微的行为改变。 这些变化包括:"

#: ../../whatsnew/3.12.rst:1776
msgid ""
"The ``type`` attribute of the tokens emitted when tokenizing some invalid "
"Python characters such as ``!`` has changed from ``ERRORTOKEN`` to ``OP``."
msgstr ""
"在对一些无效 Python 字符如 ``!`` 进行分词时相应词元的 ``type`` 属性已从 ``ERRORTOKEN`` 变为 ``OP``。"

#: ../../whatsnew/3.12.rst:1779
msgid ""
"Incomplete single-line strings now also raise :exc:`tokenize.TokenError` as "
"incomplete multiline strings do."
msgstr "不完整的单行字符串现在也会像不完整的多行字符串一样引发 :exc:`tokenize.TokenError`。"

#: ../../whatsnew/3.12.rst:1782
msgid ""
"Some incomplete or invalid Python code now raises :exc:`tokenize.TokenError`"
" instead of returning arbitrary ``ERRORTOKEN`` tokens when tokenizing it."
msgstr ""
"某些不完整或无效的 Python 代码现在会引发 :exc:`tokenize.TokenError` 而不是在执行分词时返回任意的 "
"``ERRORTOKEN`` 词元。"

#: ../../whatsnew/3.12.rst:1785
msgid ""
"Mixing tabs and spaces as indentation in the same file is not supported "
"anymore and will raise a :exc:`TabError`."
msgstr "在同一文件中混合使用制表符和空格作为缩进不再受到支持而是会引发 :exc:`TabError`。"

#: ../../whatsnew/3.12.rst:1788
msgid ""
"The :mod:`threading` module now expects the :mod:`!_thread` module to have "
"an ``_is_main_interpreter`` attribute.  It is a function with no arguments "
"that returns ``True`` if the current interpreter is the main interpreter."
msgstr ""
"现在 :mod:`threading` 模块会预期 :mod:`!_thread` 模块具有 ``_is_main_interpreter`` 属性。 "
"它是一个不带参数的函数并会在当前解释器为主解释器时返回 ``True``。"

#: ../../whatsnew/3.12.rst:1793
msgid ""
"Any library or application that provides a custom ``_thread`` module should "
"provide ``_is_main_interpreter()``. (See :gh:`112826`.)"
msgstr ""
"任何提供了自定义 ``_thread`` 模块的库或应用程序都应当提供 ``_is_main_interpreter()``。 （参见 "
":gh:`112826`。）"

#: ../../whatsnew/3.12.rst:1798
msgid "Build Changes"
msgstr "构建变化"

#: ../../whatsnew/3.12.rst:1800
msgid ""
"Python no longer uses :file:`setup.py` to build shared C extension modules. "
"Build parameters like headers and libraries are detected in ``configure`` "
"script. Extensions are built by :file:`Makefile`. Most extensions use ``pkg-"
"config`` and fall back to manual detection. (Contributed by Christian Heimes"
" in :gh:`93939`.)"
msgstr ""
"Python 不再使用 :file:`setup.py` 来构建共享的 C 扩展模块。 头文件和库等编译参数在 ``configure`` 脚本中检测。"
" 扩展将由 :file:`Makefile` 来构建。 大多数扩展使用 ``pkg-config`` 并回退为手动检测。 （由 Christian "
"Heimes 在 :gh:`93939` 中贡献。）"

#: ../../whatsnew/3.12.rst:1806
msgid ""
"``va_start()`` with two parameters, like ``va_start(args, format),`` is now "
"required to build Python. ``va_start()`` is no longer called with a single "
"parameter. (Contributed by Kumar Aditya in :gh:`93207`.)"
msgstr ""
"现在需要用带有两个形参的 ``va_start()``，如 ``va_start(args, format),`` 来构建 Python。 "
"现在将不会再调用单个形参的 ``va_start()``。 （由 Kumar Aditya 在 :gh:`93207` 中贡献。）"

#: ../../whatsnew/3.12.rst:1811
msgid ""
"CPython now uses the ThinLTO option as the default link time optimization "
"policy if the Clang compiler accepts the flag. (Contributed by Donghee Na in"
" :gh:`89536`.)"
msgstr ""
"现在如果 Clang 编译器接受 ThinLTO 选项则 CPython 会将其作为默认的链接时间优化策略。 （由 Donghee Na 在 "
":gh:`89536` 中贡献。）"

#: ../../whatsnew/3.12.rst:1815
msgid ""
"Add ``COMPILEALL_OPTS`` variable in :file:`Makefile` to override "
":mod:`compileall` options (default: ``-j0``) in ``make install``. Also "
"merged the 3 ``compileall`` commands into a single command to build .pyc "
"files for all optimization levels (0, 1, 2) at once. (Contributed by Victor "
"Stinner in :gh:`99289`.)"
msgstr ""
"在 :file:`Makefile` 中添加了 ``COMPILEALL_OPTS`` 变量以覆盖 ``make install`` 中的 "
":mod:`compileall` 选项 (默认值: ``-j0``)。 并将 3 条 ``compileall`` "
"命令合并为单条命令以便一次性构建所有优化级别 (0, 1, 2) 的 .pyc 文件。 （由 Victor Stinner 在 :gh:`99289` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:1821
msgid "Add platform triplets for 64-bit LoongArch:"
msgstr "为 64 位 LoongArch 添加了平台三选项:"

#: ../../whatsnew/3.12.rst:1823
msgid "loongarch64-linux-gnusf"
msgstr "loongarch64-linux-gnusf"

#: ../../whatsnew/3.12.rst:1824
msgid "loongarch64-linux-gnuf32"
msgstr "loongarch64-linux-gnuf32"

#: ../../whatsnew/3.12.rst:1825
msgid "loongarch64-linux-gnu"
msgstr "loongarch64-linux-gnu"

#: ../../whatsnew/3.12.rst:1827
msgid "(Contributed by Zhang Na in :gh:`90656`.)"
msgstr "（由 Zhang Na 在 :gh:`90656` 中贡献。）.)"

#: ../../whatsnew/3.12.rst:1829
msgid "``PYTHON_FOR_REGEN`` now require Python 3.10 or newer."
msgstr "``PYTHON_FOR_REGEN`` 现在需要 Python 3.10 或更新版本。"

#: ../../whatsnew/3.12.rst:1831
msgid ""
"Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate "
":file:`configure`. (Contributed by Christian Heimes in :gh:`89886`.)"
msgstr ""
"现在需要有 autoconf 2.71 和 aclocal 1.16.4 才能重新生成 :file:`configure`。（由 Christian "
"Heimes 在 :gh:`89886` 中贡献。）"

#: ../../whatsnew/3.12.rst:1835
msgid ""
"Windows builds and macOS installers from python.org now use OpenSSL 3.0."
msgstr "来自 python.org 的 Windows 版本和 macOS 安装程序现在使用 OpenSSL 3.0。"

#: ../../whatsnew/3.12.rst:1839
msgid "C API Changes"
msgstr "C API 的变化"

#: ../../whatsnew/3.12.rst:1846
msgid ""
":pep:`697`: Introduce the :ref:`Unstable C API tier <unstable-c-api>`, "
"intended for low-level tools like debuggers and JIT compilers. This API may "
"change in each minor release of CPython without deprecation warnings. Its "
"contents are marked by the ``PyUnstable_`` prefix in names."
msgstr ""
":pep:`697`: 引入了 :ref:`不稳定 C API 层 <unstable-c-api>`，用于调试器和 JIT 编译器等低层级工具。 该 "
"API 可能会在 CPython 的每个次要版本中发生变化而但发出弃用警告。 其内容在名称中以 ``PyUnstable_`` 前缀标记。"

#: ../../whatsnew/3.12.rst:1852
msgid "Code object constructors:"
msgstr "代码对象构造器:"

#: ../../whatsnew/3.12.rst:1854
msgid "``PyUnstable_Code_New()`` (renamed from ``PyCode_New``)"
msgstr "``PyUnstable_Code_New()`` (由 ``PyCode_New`` 改名而来)"

#: ../../whatsnew/3.12.rst:1855
msgid ""
"``PyUnstable_Code_NewWithPosOnlyArgs()`` (renamed from "
"``PyCode_NewWithPosOnlyArgs``)"
msgstr ""
"``PyUnstable_Code_NewWithPosOnlyArgs()`` (由 ``PyCode_NewWithPosOnlyArgs`` "
"改名而来)"

#: ../../whatsnew/3.12.rst:1857
msgid "Extra storage for code objects (:pep:`523`):"
msgstr "代码对象的额外存储 (:pep:`523`):"

#: ../../whatsnew/3.12.rst:1859
msgid ""
"``PyUnstable_Eval_RequestCodeExtraIndex()`` (renamed from "
"``_PyEval_RequestCodeExtraIndex``)"
msgstr ""
"``PyUnstable_Eval_RequestCodeExtraIndex()`` (由 "
"``_PyEval_RequestCodeExtraIndex`` 改名而来)"

#: ../../whatsnew/3.12.rst:1860
msgid "``PyUnstable_Code_GetExtra()`` (renamed from ``_PyCode_GetExtra``)"
msgstr "``PyUnstable_Code_GetExtra()`` (由 ``_PyCode_GetExtra`` 改名而来)"

#: ../../whatsnew/3.12.rst:1861
msgid "``PyUnstable_Code_SetExtra()`` (renamed from ``_PyCode_SetExtra``)"
msgstr "``PyUnstable_Code_SetExtra()`` (由 ``_PyCode_SetExtra`` 改名而来)"

#: ../../whatsnew/3.12.rst:1863
msgid ""
"The original names will continue to be available until the respective API "
"changes."
msgstr "原有名称将继续可用直到对应的 API 发生改变。"

#: ../../whatsnew/3.12.rst:1866
msgid "(Contributed by Petr Viktorin in :gh:`101101`.)"
msgstr "（由 Petr Viktorin 在 :gh:`101101` 中贡献。）"

#: ../../whatsnew/3.12.rst:1868
msgid ""
":pep:`697`: Add an API for extending types whose instance memory layout is "
"opaque:"
msgstr ":pep:`697`: 添加了用于扩展实例内存布局不透明的类型的 API:"

#: ../../whatsnew/3.12.rst:1871
msgid ""
":c:member:`PyType_Spec.basicsize` can be zero or negative to specify "
"inheriting or extending the base class size."
msgstr ":c:member:`PyType_Spec.basicsize` 可以为零或负数，用于以指定继承或扩展基类的大小。"

#: ../../whatsnew/3.12.rst:1873
msgid ""
":c:func:`PyObject_GetTypeData` and :c:func:`PyType_GetTypeDataSize` added to"
" allow access to subclass-specific instance data."
msgstr ""
"增加了 :c:func:`PyObject_GetTypeData` 和 :c:func:`PyType_GetTypeDataSize` "
"以允许访问特定子类的实例数据。"

#: ../../whatsnew/3.12.rst:1875
msgid ""
":c:macro:`Py_TPFLAGS_ITEMS_AT_END` and :c:func:`PyObject_GetItemData` added "
"to allow safely extending certain variable-sized types, including "
":c:var:`PyType_Type`."
msgstr ""
"添加了 :c:macro:`Py_TPFLAGS_ITEMS_AT_END` 和 :c:func:`PyObject_GetItemData` "
"以允许安全地扩展某些可变大小的类型，包括 :c:var:`PyType_Type`。"

#: ../../whatsnew/3.12.rst:1878
msgid ""
":c:macro:`Py_RELATIVE_OFFSET` added to allow defining :c:type:`members "
"<PyMemberDef>` in terms of a subclass-specific struct."
msgstr ""
"添加了 :c:macro:`Py_RELATIVE_OFFSET` 以允许用特定于子类的结构体来定义 :c:type:`成员 "
"<PyMemberDef>`。"

#: ../../whatsnew/3.12.rst:1881
msgid "(Contributed by Petr Viktorin in :gh:`103509`.)"
msgstr "（由 Petr Viktorin 在 :gh:`103509` 中贡献。）"

#: ../../whatsnew/3.12.rst:1883
msgid ""
"Add the new :ref:`limited C API <limited-c-api>` function "
":c:func:`PyType_FromMetaclass`, which generalizes the existing "
":c:func:`PyType_FromModuleAndSpec` using an additional metaclass argument. "
"(Contributed by Wenzel Jakob in :gh:`93012`.)"
msgstr ""
"添加了新的 :ref:`受限 C API <limited-c-api>` 函数 "
":c:func:`PyType_FromMetaclass`，它使用了额外的 metaclass 参数对现有的 "
":c:func:`PyType_FromModuleAndSpec` 进行了泛化。 （由 Wenzel Jakob 在 :gh:`93012` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:1888
msgid ""
"API for creating objects that can be called using :ref:`the vectorcall "
"protocol <vectorcall>` was added to the :ref:`Limited API <stable>`:"
msgstr ""
"在 :ref:`受限 <stable>` 中添加了用于创建可使用 :ref:`vectorcall 协议 <vectorcall>` 来调用的对象的 "
"API:"

#: ../../whatsnew/3.12.rst:1892
msgid ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"
msgstr ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"

#: ../../whatsnew/3.12.rst:1893
msgid ":c:func:`PyVectorcall_NARGS`"
msgstr ":c:func:`PyVectorcall_NARGS`"

#: ../../whatsnew/3.12.rst:1894
msgid ":c:func:`PyVectorcall_Call`"
msgstr ":c:func:`PyVectorcall_Call`"

#: ../../whatsnew/3.12.rst:1895
msgid ":c:type:`vectorcallfunc`"
msgstr ":c:type:`vectorcallfunc`"

#: ../../whatsnew/3.12.rst:1897
msgid ""
"The :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` flag is now removed from a class "
"when the class's :py:meth:`~object.__call__` method is reassigned. This "
"makes vectorcall safe to use with mutable types (i.e. heap types without the"
" immutable flag, :c:macro:`Py_TPFLAGS_IMMUTABLETYPE`). Mutable types that do"
" not override :c:member:`~PyTypeObject.tp_call` now inherit the "
"``Py_TPFLAGS_HAVE_VECTORCALL`` flag. (Contributed by Petr Viktorin in "
":gh:`93274`.)"
msgstr ""
"现在当一个类的 :py:meth:`~object.__call__` 方法被重新赋值时，该类的 "
":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` 旗标将被移除。 这使得 vectorcall "
"可以安全地用于可变类型（即没有不可变旗标 :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` 的堆类型）。 未重载 "
":c:member:`~PyTypeObject.tp_call` 的可变类型现在继承了 ``Py_TPFLAGS_HAVE_VECTORCALL`` "
"旗标。 （由 Petr Viktorin 在 :gh:`93274` 中贡献。）"

#: ../../whatsnew/3.12.rst:1905
msgid ""
"The :c:macro:`Py_TPFLAGS_MANAGED_DICT` and "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` flags have been added. This allows "
"extensions classes to support object :attr:`~object.__dict__` and weakrefs "
"with less bookkeeping, using less memory and with faster access."
msgstr ""
"新增了 :c:macro:`Py_TPFLAGS_MANAGED_DICT` 和 "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` 旗标。 这将允许扩展类以更少的记录消耗来支持对象 "
":attr:`~object.__dict__` 和弱引用，占用更少内存并加快访问速度。"

#: ../../whatsnew/3.12.rst:1910
msgid ""
"API for performing calls using :ref:`the vectorcall protocol <vectorcall>` "
"was added to the :ref:`Limited API <stable>`:"
msgstr ""
"在 :ref:`受限 API <stable>` 中添加了使用 :ref:`vectorcall 协议 <vectorcall>` 执行调用的 API:"

#: ../../whatsnew/3.12.rst:1914
msgid ":c:func:`PyObject_Vectorcall`"
msgstr ":c:func:`PyObject_Vectorcall`"

#: ../../whatsnew/3.12.rst:1915
msgid ":c:func:`PyObject_VectorcallMethod`"
msgstr ":c:func:`PyObject_VectorcallMethod`"

#: ../../whatsnew/3.12.rst:1916
msgid ":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"
msgstr ":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"

#: ../../whatsnew/3.12.rst:1918
msgid ""
"This means that both the incoming and outgoing ends of the vector call "
"protocol are now available in the :ref:`Limited API <stable>`. (Contributed "
"by Wenzel Jakob in :gh:`98586`.)"
msgstr ""
"这意味着 vectorcall 调用协议的传入端和传出端现在都可以在 :ref:`受限 API <stable>` 中使用。 （由 Wenzel "
"Jakob 在 :gh:`98586` 中贡献。）"

#: ../../whatsnew/3.12.rst:1922
msgid ""
"Add two new public functions, :c:func:`PyEval_SetProfileAllThreads` and "
":c:func:`PyEval_SetTraceAllThreads`, that allow to set tracing and profiling"
" functions in all running threads in addition to the calling one. "
"(Contributed by Pablo Galindo in :gh:`93503`.)"
msgstr ""
"添加了两个新的公共函数 :c:func:`PyEval_SetProfileAllThreads` 和 "
":c:func:`PyEval_SetTraceAllThreads`，允许在调用的同时在所有运行线程中设置追踪和性能分析函数。 （由 Pablo "
"Galindo 在 :gh:`93503` 中贡献。）"

#: ../../whatsnew/3.12.rst:1928
msgid ""
"Add new function :c:func:`PyFunction_SetVectorcall` to the C API which sets "
"the vectorcall field of a given :c:type:`PyFunctionObject`. (Contributed by "
"Andrew Frost in :gh:`92257`.)"
msgstr ""
"为 C API 添加了新函数 :c:func:`PyFunction_SetVectorcall` 用于设置给定 "
":c:type:`PyFunctionObject` 的 vectorcall 字段。 （由 Andrew Frost 在 :gh:`92257` "
"中贡献。）"

#: ../../whatsnew/3.12.rst:1932
msgid ""
"The C API now permits registering callbacks via :c:func:`PyDict_AddWatcher`,"
" :c:func:`PyDict_Watch` and related APIs to be called whenever a dictionary "
"is modified. This is intended for use by optimizing interpreters, JIT "
"compilers, or debuggers. (Contributed by Carl Meyer in :gh:`91052`.)"
msgstr ""
"C API 现在允许通过 :c:func:`PyDict_AddWatcher`、:c:func:`PyDict_Watch` 和相关 API "
"注册回调，以便在字典被修改时调用。 这主要用于优化解释器、JIT 编译器或调试器。 （由 Carl Meyer 在 :gh:`91052` 中贡献。）"

#: ../../whatsnew/3.12.rst:1938
msgid ""
"Add :c:func:`PyType_AddWatcher` and :c:func:`PyType_Watch` API to register "
"callbacks to receive notification on changes to a type. (Contributed by Carl"
" Meyer in :gh:`91051`.)"
msgstr ""
"添加了 :c:func:`PyType_AddWatcher` 和 :c:func:`PyType_Watch` API "
"用于注册回调以接收类型变更通知。 （由 Carl Meyer 在 :gh:`91051` 中贡献。）"

#: ../../whatsnew/3.12.rst:1942
msgid ""
"Add :c:func:`PyCode_AddWatcher` and :c:func:`PyCode_ClearWatcher` APIs to "
"register callbacks to receive notification on creation and destruction of "
"code objects. (Contributed by Itamar Oren in :gh:`91054`.)"
msgstr ""
"添加了 :c:func:`PyCode_AddWatcher` 和 :c:func:`PyCode_ClearWatcher` API "
"用于注册回调以接收代码对象创建和销毁时的通知。 （由 Itamar Oren 在 :gh:`91054` 中贡献。）"

#: ../../whatsnew/3.12.rst:1947
msgid ""
"Add :c:func:`PyFrame_GetVar` and :c:func:`PyFrame_GetVarString` functions to"
" get a frame variable by its name. (Contributed by Victor Stinner in "
":gh:`91248`.)"
msgstr ""
"添加了 :c:func:`PyFrame_GetVar` 和 :c:func:`PyFrame_GetVarString` "
"函数用于通过名称来获取帧变量。 （由 Victor Stinner 在 :gh:`91248` 中贡献。）"

#: ../../whatsnew/3.12.rst:1951
msgid ""
"Add :c:func:`PyErr_GetRaisedException` and "
":c:func:`PyErr_SetRaisedException` for saving and restoring the current "
"exception. These functions return and accept a single exception object, "
"rather than the triple arguments of the now-deprecated :c:func:`PyErr_Fetch`"
" and :c:func:`PyErr_Restore`. This is less error prone and a bit more "
"efficient. (Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"添加 :c:func:`PyErr_GetRaisedException` 和 :c:func:`PyErr_SetRaisedException` "
"用于保存和恢复当前异常。 这些函数返回并接受单个异常对象，而不是像现在已弃用的 :c:func:`PyErr_Fetch` 和 "
":c:func:`PyErr_Restore` 那样的三个参数。 这样不容易出错并且更为高效。 （由 Mark Shannon 在 "
":gh:`101578` 中贡献。）"

#: ../../whatsnew/3.12.rst:1959
msgid ""
"Add ``_PyErr_ChainExceptions1``, which takes an exception instance, to "
"replace the legacy-API ``_PyErr_ChainExceptions``, which is now deprecated. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"添加了 ``_PyErr_ChainExceptions1``，它接受一个异常实例，用于取代旧式 API "
"``_PyErr_ChainExceptions``，后者现已被弃用。 （由 Mark Shannon 在 :gh:`101578` 中贡献。）"

#: ../../whatsnew/3.12.rst:1963
msgid ""
"Add :c:func:`PyException_GetArgs` and :c:func:`PyException_SetArgs` as "
"convenience functions for retrieving and modifying the "
":attr:`~BaseException.args` passed to the exception's constructor. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"添加了 :c:func:`PyException_GetArgs` 和 :c:func:`PyException_SetArgs` "
"作为便捷函数用于检索和修改传递给异常的构造函数的 :attr:`~BaseException.args`。 （由 Mark Shannon 在 "
":gh:`101578` 中贡献。）"

#: ../../whatsnew/3.12.rst:1968
msgid ""
"Add :c:func:`PyErr_DisplayException`, which takes an exception instance, to "
"replace the legacy-api :c:func:`!PyErr_Display`. (Contributed by Irit "
"Katriel in :gh:`102755`)."
msgstr ""
"添加了 :c:func:`PyErr_DisplayException`，它接受一个异常实例，用于取代旧式 API "
":c:func:`!PyErr_Display`。 （由 Irit Katriel 在 :gh:`102755` 中贡献。）"

#: ../../whatsnew/3.12.rst:1974
msgid ""
":pep:`683`: Introduce *Immortal Objects*, which allows objects to bypass "
"reference counts, and related changes to the C-API:"
msgstr ":pep:`683`: 引入了 *永生对象*，它允许对象绕过引用计数，并对 C-API 进行相应修改："

#: ../../whatsnew/3.12.rst:1977
msgid "``_Py_IMMORTAL_REFCNT``: The reference count that defines an object"
msgstr "``_Py_IMMORTAL_REFCNT``: 定义对象的引用计数"

#: ../../whatsnew/3.12.rst:1978
msgid "as immortal."
msgstr "为永生对象。"

#: ../../whatsnew/3.12.rst:1979
msgid ""
"``_Py_IsImmortal`` Checks if an object has the immortal reference count."
msgstr "``_Py_IsImmortal`` 检测一个对象是否具有永生引用计数。"

#: ../../whatsnew/3.12.rst:1980
msgid "``PyObject_HEAD_INIT`` This will now initialize reference count to"
msgstr "``PyObject_HEAD_INIT`` 这将把引用计数初始化为"

#: ../../whatsnew/3.12.rst:1981
msgid "``_Py_IMMORTAL_REFCNT`` when used with ``Py_BUILD_CORE``."
msgstr "``_Py_IMMORTAL_REFCNT`` 当配合 ``Py_BUILD_CORE`` 使用时。"

#: ../../whatsnew/3.12.rst:1982
msgid ""
"``SSTATE_INTERNED_IMMORTAL`` An identifier for interned unicode objects"
msgstr "``SSTATE_INTERNED_IMMORTAL`` 一个针对内部 unicode 对象的标识符"

#: ../../whatsnew/3.12.rst:1983
msgid "that are immortal."
msgstr "为永生对象。"

#: ../../whatsnew/3.12.rst:1984
msgid "``SSTATE_INTERNED_IMMORTAL_STATIC`` An identifier for interned unicode"
msgstr "``SSTATE_INTERNED_IMMORTAL_STATIC`` 一个针对内部 unicode"

#: ../../whatsnew/3.12.rst:1985
msgid "objects that are immortal and static"
msgstr "为永生且静态的对象"

#: ../../whatsnew/3.12.rst:1986
msgid ""
"``sys.getunicodeinternedsize`` This returns the total number of unicode"
msgstr "``sys.getunicodeinternedsize`` 这将返回总计的 unicode"

#: ../../whatsnew/3.12.rst:1987
msgid ""
"objects that have been interned. This is now needed for :file:`refleak.py` "
"to correctly track reference counts and allocated blocks"
msgstr "被管理的对象。现在 :file:`refleak.py` 需要这样才能正确地追踪引用计数和分配的块"

#: ../../whatsnew/3.12.rst:1990
msgid "(Contributed by Eddie Elizondo in :gh:`84436`.)"
msgstr "（由 Eddie Elizondo 在 :gh:`84436` 中贡献。）"

#: ../../whatsnew/3.12.rst:1992
msgid ""
":pep:`684`: Add the new :c:func:`Py_NewInterpreterFromConfig` function and "
":c:type:`PyInterpreterConfig`, which may be used to create sub-interpreters "
"with their own GILs. (See :ref:`whatsnew312-pep684` for more info.) "
"(Contributed by Eric Snow in :gh:`104110`.)"
msgstr ""
":pep:`684`: 新增了 :c:func:`Py_NewInterpreterFromConfig` 函数和 "
":c:type:`PyInterpreterConfig`，可用于创建具有单独 GIL 的子解释器。 （更多信息参见 "
":ref:`whatsnew312-pep684`。） （由 Eric Snow 在 :gh:`104110` 中贡献。）"

#: ../../whatsnew/3.12.rst:1998
msgid ""
"In the limited C API version 3.12, :c:func:`Py_INCREF` and "
":c:func:`Py_DECREF` functions are now implemented as opaque function calls "
"to hide implementation details. (Contributed by Victor Stinner in "
":gh:`105387`.)"
msgstr ""
"在 3.12 版的受限 C API 中，:c:func:`Py_INCREF` 和 :c:func:`Py_DECREF` "
"函数现在使用不透明函数调用的方式实现以隐藏实现细节。 （由 Victor Stinner 在 :gh:`105387` 中贡献。）"

#: ../../whatsnew/3.12.rst:2006
msgid ""
"Legacy Unicode APIs based on ``Py_UNICODE*`` representation has been "
"removed. Please migrate to APIs based on UTF-8 or ``wchar_t*``."
msgstr ""
"基于 ``Py_UNICODE*`` 表示形式的旧式 Unicode API 已被移除。 请迁移到基于 UTF-8 或 ``wchar_t*`` 的 "
"API。"

#: ../../whatsnew/3.12.rst:2009
msgid ""
"Argument parsing functions like :c:func:`PyArg_ParseTuple` doesn't support "
"``Py_UNICODE*`` based format (e.g. ``u``, ``Z``) anymore. Please migrate to "
"other formats for Unicode like ``s``, ``z``, ``es``, and ``U``."
msgstr ""
":c:func:`PyArg_ParseTuple` 等参数解析函数不再支持基于 ``Py_UNICODE*`` 的格式（例如 ``u``, ``Z``"
" 等）。 请迁移到其他 Unicode 格式如 ``s``, ``z``, ``es`` 和 ``U``。"

#: ../../whatsnew/3.12.rst:2013
msgid ""
"``tp_weaklist`` for all static builtin types is always ``NULL``. This is an "
"internal-only field on ``PyTypeObject`` but we're pointing out the change in"
" case someone happens to be accessing the field directly anyway.  To avoid "
"breakage, consider using the existing public C-API instead, or, if "
"necessary, the (internal-only) ``_PyObject_GET_WEAKREFS_LISTPTR()`` macro."
msgstr ""
"``tp_weaklist`` 对于所有静态内置类型将始终为 ``NULL``。 这是 ``PyTypeObject`` "
"上的一个内部专属字段，但我们还是要指出这一变化以防有人碰巧仍然直接访问到该字段。 为避免出现中断，请考虑改用现有的公共 "
"C-API，或在必要时使用（仅限内部使用的）宏 ``_PyObject_GET_WEAKREFS_LISTPTR()``。 "

#: ../../whatsnew/3.12.rst:2020
msgid ""
"This internal-only :c:member:`PyTypeObject.tp_subclasses` may now not be a "
"valid object pointer.  Its type was changed to :c:expr:`void *` to reflect "
"this.  We mention this in case someone happens to be accessing the internal-"
"only field directly."
msgstr ""
"现在这个内部专用的 :c:member:`PyTypeObject.tp_subclasses` 可能不是一个有效的对象指针。 "
"为了反映这一点我们将其类型改为 :c:expr:`void*`。 我们提到这一点是为了防止有人碰巧直接访问到这个内部专用字段。"

#: ../../whatsnew/3.12.rst:2025
msgid ""
"To get a list of subclasses, call the Python method "
":py:meth:`~type.__subclasses__` (using :c:func:`PyObject_CallMethod`, for "
"example)."
msgstr ""
"要获取子类的列表，可调用 Python 方法 :py:meth:`~type.__subclasses__` (例如使用 "
":c:func:`PyObject_CallMethod`)。"

#: ../../whatsnew/3.12.rst:2029
msgid ""
"Add support of more formatting options (left aligning, octals, uppercase "
"hexadecimals, :c:type:`intmax_t`, :c:type:`ptrdiff_t`, :c:type:`wchar_t` C "
"strings, variable width and precision) in :c:func:`PyUnicode_FromFormat` and"
" :c:func:`PyUnicode_FromFormatV`. (Contributed by Serhiy Storchaka in "
":gh:`98836`.)"
msgstr ""
"在 :c:func:`PyUnicode_FromFormat` 和 :c:func:`PyUnicode_FromFormatV` "
"中添加对更多格式选项（左对齐、八进制、大写十六进制、:c:type:`intmax_t`、:c:type:`ptrdiff_t`、:c:type:`wchar_t`"
" C 字符串、可变宽度和精度）的支持。 （由 Serhiy Storchaka 在 :gh:`98836` 中贡献。）"

#: ../../whatsnew/3.12.rst:2035
msgid ""
"An unrecognized format character in :c:func:`PyUnicode_FromFormat` and "
":c:func:`PyUnicode_FromFormatV` now sets a :exc:`SystemError`. In previous "
"versions it caused all the rest of the format string to be copied as-is to "
"the result string, and any extra arguments discarded. (Contributed by Serhiy"
" Storchaka in :gh:`95781`.)"
msgstr ""
":c:func:`PyUnicode_FromFormat` 和 :c:func:`PyUnicode_FromFormatV` "
"中未被识别的格式字符现在会设置一个 :exc:`SystemError`。 "
"在之前的版本中它会导致格式字符串的所有其他部分被原样复制到结果字符串中，并丢弃任何额外的参数。 （由 Serhiy Storchaka 在 "
":gh:`95781` 中贡献。）"

#: ../../whatsnew/3.12.rst:2041
msgid ""
"Fix wrong sign placement in :c:func:`PyUnicode_FromFormat` and "
":c:func:`PyUnicode_FromFormatV`. (Contributed by Philip Georgi in "
":gh:`95504`.)"
msgstr ""
"修复了 :c:func:`PyUnicode_FromFormat` 和 :c:func:`PyUnicode_FromFormatV` "
"中错误的标志位置。 （由 Philip Georgi 在 :gh:`95504` 中贡献。）"

#: ../../whatsnew/3.12.rst:2045
msgid ""
"Extension classes wanting to add a :attr:`~object.__dict__` or weak "
"reference slot should use :c:macro:`Py_TPFLAGS_MANAGED_DICT` and "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` instead of ``tp_dictoffset`` and "
"``tp_weaklistoffset``, respectively. The use of ``tp_dictoffset`` and "
"``tp_weaklistoffset`` is still supported, but does not fully support "
"multiple inheritance (:gh:`95589`), and performance may be worse. Classes "
"declaring :c:macro:`Py_TPFLAGS_MANAGED_DICT` must call "
":c:func:`!_PyObject_VisitManagedDict` and "
":c:func:`!_PyObject_ClearManagedDict` to traverse and clear their instance's"
" dictionaries. To clear weakrefs, call :c:func:`PyObject_ClearWeakRefs`, as "
"before."
msgstr ""
"想要添加 :attr:`~object.__dict__` 或弱引用槽位的扩展类应当分别使用 "
":c:macro:`Py_TPFLAGS_MANAGED_DICT` 和 :c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` "
"来代替 ``tp_dictoffset`` 和 ``tp_weaklistoffset``。 ``tp_dictoffset`` 和 "
"``tp_weaklistoffset`` 的使用仍然受到支持，但并不完全支持多重继承 (:gh:`95589`)，而且性能可能会变差。 声明了 "
":c:macro:`Py_TPFLAGS_MANAGED_DICT` 的类必须调用 "
":c:func:`!_PyObject_VisitManagedDict` 和 "
":c:func:`!_PyObject_ClearManagedDict` 来遍历并清空其实例的字典。 要清空弱引用，请像之前一样调用 "
":c:func:`PyObject_ClearWeakRefs`。"

#: ../../whatsnew/3.12.rst:2057
msgid ""
"The :c:func:`PyUnicode_FSDecoder` function no longer accepts bytes-like "
"paths, like :class:`bytearray` and :class:`memoryview` types: only the exact"
" :class:`bytes` type is accepted for bytes strings. (Contributed by Victor "
"Stinner in :gh:`98393`.)"
msgstr ""
":c:func:`PyUnicode_FSDecoder` 函数不再接受类似字节串的路径，如 :class:`bytearray` 和 "
":class:`memoryview` 类型：只接受明确的 :class:`bytes` 类型字节字符串。 （由 Victor Stinner 在 "
":gh:`98393` 中贡献。）"

#: ../../whatsnew/3.12.rst:2062
msgid ""
"The :c:macro:`Py_CLEAR`, :c:macro:`Py_SETREF` and :c:macro:`Py_XSETREF` "
"macros now only evaluate their arguments once. If an argument has side "
"effects, these side effects are no longer duplicated. (Contributed by Victor"
" Stinner in :gh:`98724`.)"
msgstr ""
":c:macro:`Py_CLEAR`、:c:macro:`Py_SETREF` 和 :c:macro:`Py_XSETREF` "
"宏现在只会对其参数求值一次。如果参数有附带影响，这些附带影响将不会再重复。 （由 Victor Stinner 在 :gh:`98724` 中贡献。）"

#: ../../whatsnew/3.12.rst:2067
msgid ""
"The interpreter's error indicator is now always normalized. This means that "
":c:func:`PyErr_SetObject`, :c:func:`PyErr_SetString` and the other functions"
" that set the error indicator now normalize the exception before storing it."
" (Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"解释器的错误指示器现在总是规范化的。 这意味着 :c:func:`PyErr_SetObject`、:c:func:`PyErr_SetString` "
"以及其他设置错误指示器的函数在保存异常之前都会将其规范化。 （由 Mark Shannon 在 :gh:`101578` 中贡献。）"

#: ../../whatsnew/3.12.rst:2072
msgid ""
"``_Py_RefTotal`` is no longer authoritative and only kept around for ABI "
"compatibility.  Note that it is an internal global and only available on "
"debug builds.  If you happen to be using it then you'll need to start using "
"``_Py_GetGlobalRefTotal()``."
msgstr ""
"``_Py_RefTotal`` 已不再具有重要性而保留它只是为了 ABI 的兼容性。 请注意，这是一个内部全局变量并且仅在调试版本中可用。 "
"如果你碰巧要使用它那么你需要开始使用 ``_Py_GetGlobalRefTotal()``。"

#: ../../whatsnew/3.12.rst:2077
msgid ""
"The following functions now select an appropriate metaclass for the newly "
"created type:"
msgstr "下面的函数将为新创建的类型选择一个合适的元类:"

#: ../../whatsnew/3.12.rst:2080
msgid ":c:func:`PyType_FromSpec`"
msgstr ":c:func:`PyType_FromSpec`"

#: ../../whatsnew/3.12.rst:2081
msgid ":c:func:`PyType_FromSpecWithBases`"
msgstr ":c:func:`PyType_FromSpecWithBases`"

#: ../../whatsnew/3.12.rst:2082
msgid ":c:func:`PyType_FromModuleAndSpec`"
msgstr ":c:func:`PyType_FromModuleAndSpec`"

#: ../../whatsnew/3.12.rst:2084
msgid ""
"Creating classes whose metaclass overrides :c:member:`~PyTypeObject.tp_new` "
"is deprecated, and in Python 3.14+ it will be disallowed. Note that these "
"functions ignore ``tp_new`` of the metaclass, possibly allowing incomplete "
"initialization."
msgstr ""
"创建具有重载了 :c:member:`~PyTypeObject.tp_new` 的元类的类的做法已被弃用，在 Python 3.14+ 中将被禁止。 "
"请注意这些函数会忽略元类的 ``tp_new``，从而可能导致不完整的初始化。"

#: ../../whatsnew/3.12.rst:2089
msgid ""
"Note that :c:func:`PyType_FromMetaclass` (added in Python 3.12) already "
"disallows creating classes whose metaclass overrides ``tp_new`` "
"(:meth:`~object.__new__` in Python)."
msgstr ""
"请注意 :c:func:`PyType_FromMetaclass` (在 Python 3.12 中新增) 已禁止创建具有重载了 ``tp_new``"
" (在 Python 中为 :meth:`~object.__new__` ) 的元类的类。"

#: ../../whatsnew/3.12.rst:2093
msgid ""
"Since ``tp_new`` overrides almost everything ``PyType_From*`` functions do, "
"the two are incompatible with each other. The existing behavior -- ignoring "
"the metaclass for several steps of type creation -- is unsafe in general, "
"since (meta)classes assume that ``tp_new`` was called. There is no simple "
"general workaround. One of the following may work for you:"
msgstr ""
"由于 ``tp_new`` 重载了 ``PyType_From*`` 函数的几乎所有内容，因此两者互不兼容。 现有的行为 -- "
"在创建类型的一些步骤中忽略元类 -- 通常都是不安全的，因为（元）类会假定 ``tp_new`` 已被调用。 目前还没有简单通用的绕过方式。 "
"以下办法之一可能对你有用："

#: ../../whatsnew/3.12.rst:2100
msgid "If you control the metaclass, avoid using ``tp_new`` in it:"
msgstr "如果你控制着元类，请避免在其中使用 ``tp_new``:"

#: ../../whatsnew/3.12.rst:2102
msgid ""
"If initialization can be skipped, it can be done in "
":c:member:`~PyTypeObject.tp_init` instead."
msgstr "如初始化可被跳过，则可以改在 :c:member:`~PyTypeObject.tp_init` 中完成。"

#: ../../whatsnew/3.12.rst:2104
msgid ""
"If the metaclass doesn't need to be instantiated from Python, set its "
"``tp_new`` to ``NULL`` using the "
":c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION` flag. This makes it acceptable "
"for ``PyType_From*`` functions."
msgstr ""
"如果元类不需要从 Python 执行实例化，则使用 :c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION` 旗标将其 "
"``tp_new`` 设为 ``NULL``。 这将使其可被 ``PyType_From*`` 函数接受。"

#: ../../whatsnew/3.12.rst:2109
msgid ""
"Avoid ``PyType_From*`` functions: if you don't need C-specific features "
"(slots or setting the instance size), create types by :ref:`calling <call>` "
"the metaclass."
msgstr ""
"避免使用 ``PyType_From*`` 函数：如果不需要 C 专属的特性（槽位或设置实例大小），请通过 :ref:`调用 <call>` "
"元类来创建类型。"

#: ../../whatsnew/3.12.rst:2113
msgid ""
"If you *know* the ``tp_new`` can be skipped safely, filter the deprecation "
"warning out using :func:`warnings.catch_warnings` from Python."
msgstr ""
"如果你 *知道* 可以安全地跳过 ``tp_new``，就使用 Python 中的 :func:`warnings.catch_warnings` "
"过滤掉弃用警告。"

#: ../../whatsnew/3.12.rst:2116
msgid ""
":c:var:`PyOS_InputHook` and :c:var:`PyOS_ReadlineFunctionPointer` are no "
"longer called in :ref:`subinterpreters <sub-interpreter-support>`. This is "
"because clients generally rely on process-wide global state (since these "
"callbacks have no way of recovering extension module state)."
msgstr ""
":c:var:`PyOS_InputHook` 和 :c:var:`PyOS_ReadlineFunctionPointer` 将不再在 "
":ref:`子解释器 <sub-interpreter-support>` 中被调用。 "
"这是因为客户端通常依赖进程级的全局状态（而这些回调没有办法恢复扩展模块状态）。"

#: ../../whatsnew/3.12.rst:2121
msgid ""
"This also avoids situations where extensions may find themselves running in "
"a subinterpreter that they don't support (or haven't yet been loaded in). "
"See :gh:`104668` for more info."
msgstr "这也避免了扩展程序在不支持（或尚未被加载）的子解释器中运行的情况。 请参阅 :gh:`104668` 了解更多信息。"

#: ../../whatsnew/3.12.rst:2125
msgid ""
":c:struct:`PyLongObject` has had its internals changed for better "
"performance. Although the internals of :c:struct:`PyLongObject` are private,"
" they are used by some extension modules. The internal fields should no "
"longer be accessed directly, instead the API functions beginning "
"``PyLong_...`` should be used instead. Two new *unstable* API functions are "
"provided for efficient access to the value of :c:struct:`PyLongObject`\\s "
"which fit into a single machine word:"
msgstr ""
":c:struct:`PyLongObject` 对其内部字段进行了修改以提高性能。 虽然 :c:struct:`PyLongObject` "
"的内部字段是私有的，但某些扩展模块会使用它们。 内部字段不应再被直接访问，而应改用以 ``PyLong_...`` 打头的 API 函数。 新增了两个 "
"*暂定* API 函数用于高效访问适配至单个机器字的 :c:struct:`PyLongObject` 的值:"

#: ../../whatsnew/3.12.rst:2133
msgid ":c:func:`PyUnstable_Long_IsCompact`"
msgstr ":c:func:`PyUnstable_Long_IsCompact`"

#: ../../whatsnew/3.12.rst:2134
msgid ":c:func:`PyUnstable_Long_CompactValue`"
msgstr ":c:func:`PyUnstable_Long_CompactValue`"

#: ../../whatsnew/3.12.rst:2136
msgid ""
"Custom allocators, set via :c:func:`PyMem_SetAllocator`, are now required to"
" be thread-safe, regardless of memory domain.  Allocators that don't have "
"their own state, including \"hooks\", are not affected. If your custom "
"allocator is not already thread-safe and you need guidance then please "
"create a new GitHub issue and CC ``@ericsnowcurrently``."
msgstr ""
"通过 :c:func:`PyMem_SetAllocator` 设置的自定义分配器现在必须是线程安全的，无论内存域是什么。 "
"没有自己的状态的分配器，包括“钩子”将不会受影响。 如果你的自定义分配器还不是线程安全的且你需要指导则请创建一个新的 GitHub 问题并抄送给 "
"``@ericsnowcurrently``。"

#: ../../whatsnew/3.12.rst:2146
msgid ""
"In accordance with :pep:`699`, the ``ma_version_tag`` field in "
":c:type:`PyDictObject` is deprecated for extension modules. Accessing this "
"field will generate a compiler warning at compile time. This field will be "
"removed in Python 3.14. (Contributed by Ramvikrams and Kumar Aditya in "
":gh:`101193`. PEP by Ken Jin.)"
msgstr ""
"根据 :pep:`699` 的要求，:c:type:`PyDictObject` 中的 ``ma_version_tag`` 字段对于扩展模块已被弃用。"
" 访问该字段将在编译时生成编译器警告。 该字段将在 Python 3.14 中移除。 （由 Ramvikrams 和 Kumar Aditya 在 "
":gh:`101193` 中贡献。 PEP 由 Ken Jin 撰写。）"

#: ../../whatsnew/3.12.rst:2151
msgid "Deprecate global configuration variable:"
msgstr "已弃用的全局配置变量:"

#: ../../whatsnew/3.12.rst:2153
msgid ":c:var:`Py_DebugFlag`: use :c:member:`PyConfig.parser_debug`"
msgstr ":c:var:`Py_DebugFlag`: 使用 :c:member:`PyConfig.parser_debug`"

#: ../../whatsnew/3.12.rst:2154
msgid ":c:var:`Py_VerboseFlag`: use :c:member:`PyConfig.verbose`"
msgstr ":c:var:`Py_VerboseFlag`: 使用 :c:member:`PyConfig.verbose`"

#: ../../whatsnew/3.12.rst:2155
msgid ":c:var:`Py_QuietFlag`: use :c:member:`PyConfig.quiet`"
msgstr ":c:var:`Py_QuietFlag`: 使用 :c:member:`PyConfig.quiet`"

#: ../../whatsnew/3.12.rst:2156
msgid ":c:var:`Py_InteractiveFlag`: use :c:member:`PyConfig.interactive`"
msgstr ":c:var:`Py_InteractiveFlag`: 使用 :c:member:`PyConfig.interactive`"

#: ../../whatsnew/3.12.rst:2157
msgid ":c:var:`Py_InspectFlag`: use :c:member:`PyConfig.inspect`"
msgstr ":c:var:`Py_InspectFlag`: 使用 :c:member:`PyConfig.inspect`"

#: ../../whatsnew/3.12.rst:2158
msgid ":c:var:`Py_OptimizeFlag`: use :c:member:`PyConfig.optimization_level`"
msgstr ":c:var:`Py_OptimizeFlag`: 使用 :c:member:`PyConfig.optimization_level`"

#: ../../whatsnew/3.12.rst:2159
msgid ":c:var:`Py_NoSiteFlag`: use :c:member:`PyConfig.site_import`"
msgstr ":c:var:`Py_NoSiteFlag`: 使用 :c:member:`PyConfig.site_import`"

#: ../../whatsnew/3.12.rst:2160
msgid ":c:var:`Py_BytesWarningFlag`: use :c:member:`PyConfig.bytes_warning`"
msgstr ":c:var:`Py_BytesWarningFlag`: 使用 :c:member:`PyConfig.bytes_warning`"

#: ../../whatsnew/3.12.rst:2161
msgid ":c:var:`Py_FrozenFlag`: use :c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:var:`Py_FrozenFlag`: 使用 :c:member:`PyConfig.pathconfig_warnings`"

#: ../../whatsnew/3.12.rst:2162
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: use :c:member:`PyConfig.use_environment`"
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: 使用 :c:member:`PyConfig.use_environment`"

#: ../../whatsnew/3.12.rst:2163
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: use :c:member:`PyConfig.write_bytecode`"
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: 使用 :c:member:`PyConfig.write_bytecode`"

#: ../../whatsnew/3.12.rst:2164
msgid ""
":c:var:`Py_NoUserSiteDirectory`: use "
":c:member:`PyConfig.user_site_directory`"
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: 使用 :c:member:`PyConfig.user_site_directory`"

#: ../../whatsnew/3.12.rst:2165
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: use :c:member:`PyConfig.buffered_stdio`"
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: 使用 :c:member:`PyConfig.buffered_stdio`"

#: ../../whatsnew/3.12.rst:2166
msgid ""
":c:var:`Py_HashRandomizationFlag`: use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed`"
msgstr ""
":c:var:`Py_HashRandomizationFlag`: 使用 :c:member:`PyConfig.use_hash_seed` 和 "
":c:member:`PyConfig.hash_seed`"

#: ../../whatsnew/3.12.rst:2168
msgid ":c:var:`Py_IsolatedFlag`: use :c:member:`PyConfig.isolated`"
msgstr ":c:var:`Py_IsolatedFlag`: 使用 :c:member:`PyConfig.isolated`"

#: ../../whatsnew/3.12.rst:2169
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: use "
":c:member:`PyPreConfig.legacy_windows_fs_encoding`"
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: 使用 "
":c:member:`PyPreConfig.legacy_windows_fs_encoding`"

#: ../../whatsnew/3.12.rst:2170
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: use "
":c:member:`PyConfig.legacy_windows_stdio`"
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: 使用 "
":c:member:`PyConfig.legacy_windows_stdio`"

#: ../../whatsnew/3.12.rst:2171
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: use "
":c:member:`PyConfig.filesystem_encoding`"
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`: 使用 "
":c:member:`PyConfig.filesystem_encoding`"

#: ../../whatsnew/3.12.rst:2172
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: use "
":c:member:`PyConfig.filesystem_encoding`"
msgstr ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: 使用 "
":c:member:`PyConfig.filesystem_encoding`"

#: ../../whatsnew/3.12.rst:2173
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: use "
":c:member:`PyConfig.filesystem_errors`"
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: 使用 "
":c:member:`PyConfig.filesystem_errors`"

#: ../../whatsnew/3.12.rst:2174
msgid ""
":c:var:`!Py_UTF8Mode`: use :c:member:`PyPreConfig.utf8_mode` (see "
":c:func:`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: 使用 :c:member:`PyPreConfig.utf8_mode` (参见 "
":c:func:`Py_PreInitialize`)"

#: ../../whatsnew/3.12.rst:2176
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` instead. (Contributed by Victor Stinner in :gh:`77782`.)"
msgstr ""
":c:func:`Py_InitializeFromConfig` API 应当改为使用 :c:type:`PyConfig`。 （由 Victor "
"Stinner 在 :gh:`77782` 中贡献。）"

#: ../../whatsnew/3.12.rst:2180
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases is deprecated and will be disabled in Python 3.14. (:gh:`95388`)"
msgstr ""
"使用可变的基类创建 :c:data:`不可变类型 <Py_TPFLAGS_IMMUTABLETYPE>` 的做法已被弃用并将在 Python 3.14 "
"中被禁用。 (:gh:`95388`)"

#: ../../whatsnew/3.12.rst:2183
msgid ""
"The :file:`structmember.h` header is deprecated, though it continues to be "
"available and there are no plans to remove it."
msgstr ":file:`structmember.h` 头文件已被弃用，不过它仍可继续使用也没有计划将其移除。"

#: ../../whatsnew/3.12.rst:2186
msgid ""
"Its contents are now available just by including :file:`Python.h`, with a "
"``Py`` prefix added if it was missing:"
msgstr "现在只需包括 :file:`Python.h` 即可获得其内容，如果找不到请添加 ``Py`` 前缀："

#: ../../whatsnew/3.12.rst:2189
msgid ""
":c:struct:`PyMemberDef`, :c:func:`PyMember_GetOne` and "
":c:func:`PyMember_SetOne`"
msgstr ""
":c:struct:`PyMemberDef`, :c:func:`PyMember_GetOne` 和 "
":c:func:`PyMember_SetOne`"

#: ../../whatsnew/3.12.rst:2191
msgid ""
"Type macros like :c:macro:`Py_T_INT`, :c:macro:`Py_T_DOUBLE`, etc. "
"(previously ``T_INT``, ``T_DOUBLE``, etc.)"
msgstr ""
"类型宏如 :c:macro:`Py_T_INT`, :c:macro:`Py_T_DOUBLE` 等（之前为 ``T_INT``, "
"``T_DOUBLE`` 等）"

#: ../../whatsnew/3.12.rst:2193
msgid ""
"The flags :c:macro:`Py_READONLY` (previously ``READONLY``) and "
":c:macro:`Py_AUDIT_READ` (previously all uppercase)"
msgstr ""
"旗标 :c:macro:`Py_READONLY` (之前为 ``READONLY``) 和 :c:macro:`Py_AUDIT_READ` "
"(之前为全大写形式)"

#: ../../whatsnew/3.12.rst:2196
msgid "Several items are not exposed from :file:`Python.h`:"
msgstr ":file:`Python.h` 上有几个项目没有暴露："

#: ../../whatsnew/3.12.rst:2198
msgid ":c:macro:`T_OBJECT` (use :c:macro:`Py_T_OBJECT_EX`)"
msgstr ":c:macro:`T_OBJECT` (使用 :c:macro:`Py_T_OBJECT_EX`)"

#: ../../whatsnew/3.12.rst:2199
msgid ":c:macro:`T_NONE` (previously undocumented, and pretty quirky)"
msgstr ":c:macro:`T_NONE` (之前未写入文档，并且相当怪异)"

#: ../../whatsnew/3.12.rst:2200
msgid "The macro ``WRITE_RESTRICTED`` which does nothing."
msgstr "不进行任何操作的宏 ``WRITE_RESTRICTED``。"

#: ../../whatsnew/3.12.rst:2201
msgid ""
"The macros ``RESTRICTED`` and ``READ_RESTRICTED``, equivalents of "
":c:macro:`Py_AUDIT_READ`."
msgstr "``RESTRICTED`` 和 ``READ_RESTRICTED`` 宏，等同于 :c:macro:`Py_AUDIT_READ`。"

#: ../../whatsnew/3.12.rst:2203
msgid ""
"In some configurations, ``<stddef.h>`` is not included from "
":file:`Python.h`. It should be included manually when using ``offsetof()``."
msgstr ""
"在某些配置中， :file:`Python.h` 未包含 ``<stddef.h>`` 。使用 ``offsetof()`` 时，应手动将其包含在内。"

#: ../../whatsnew/3.12.rst:2206
msgid ""
"The deprecated header continues to provide its original contents under the "
"original names. Your old code can stay unchanged, unless the extra include "
"and non-namespaced macros bother you greatly."
msgstr "已被弃用的头文件将继续以原来的名称提供原来的内容。 你的旧代码可以保持不变，除非额外的包括指令和无命名空间宏会给你带来很大困扰。"

#: ../../whatsnew/3.12.rst:2211
msgid ""
"(Contributed in :gh:`47146` by Petr Viktorin, based on earlier work by "
"Alexander Belopolsky and Matthias Braun.)"
msgstr ""
"（由 Petr Viktorin 在 :gh:`47146` 中贡献，基于 Alexander Belopolsky 和 Matthias Braun "
"在先前的工作。）.)"

#: ../../whatsnew/3.12.rst:2214
msgid ""
":c:func:`PyErr_Fetch` and :c:func:`PyErr_Restore` are deprecated. Use "
":c:func:`PyErr_GetRaisedException` and :c:func:`PyErr_SetRaisedException` "
"instead. (Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
":c:func:`PyErr_Fetch` 和 :c:func:`PyErr_Restore` 已被弃用。请使用 "
":c:func:`PyErr_GetRaisedException` 和 :c:func:`PyErr_SetRaisedException` 代替。 "
"（由 Mark Shannon 在 :gh:`101578` 贡献。）   "

#: ../../whatsnew/3.12.rst:2219
msgid ""
":c:func:`!PyErr_Display` is deprecated. Use :c:func:`PyErr_DisplayException`"
" instead. (Contributed by Irit Katriel in :gh:`102755`)."
msgstr ""
":c:func:`!PyErr_Display` 已被弃用，请改用 :c:func:`PyErr_DisplayException`。 （由 Irit "
"Katriel 在 :gh:`102755` 中贡献。）"

#: ../../whatsnew/3.12.rst:2222
msgid ""
"``_PyErr_ChainExceptions`` is deprecated. Use ``_PyErr_ChainExceptions1`` "
"instead. (Contributed by Irit Katriel in :gh:`102192`.)"
msgstr ""
"``_PyErr_ChainExceptions`` 已被弃用。 请改用 ``_PyErr_ChainExceptions1``。 （由 Irit "
"Katriel 在 :gh:`102192` 中贡献。）"

#: ../../whatsnew/3.12.rst:2225
msgid ""
"Using :c:func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases` or "
":c:func:`PyType_FromModuleAndSpec` to create a class whose metaclass "
"overrides :c:member:`~PyTypeObject.tp_new` is deprecated. Call the metaclass"
" instead."
msgstr ""
"使用 :c:func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases` 或 "
":c:func:`PyType_FromModuleAndSpec` 来创建所属元类重载了 "
":c:member:`~PyTypeObject.tp_new` 的类的做法已被弃用。 请改为调用相应元类。is deprecated. Call "
"the metaclass instead."

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:4
msgid ""
"The ``ma_version_tag`` field in :c:type:`PyDictObject` for extension modules"
" (:pep:`699`; :gh:`101193`)."
msgstr ""
":c:type:`PyDictObject` 中的 ``ma_version_tag`` 字段用于扩展模块 ( :pep:`699` ; "
":gh:`101193` )。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:7
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases (:gh:`95388`)."
msgstr ""
"创建 :c:data:`immutable types<Py_TPFLAGS_IMMUTABLETYPE>`  的可变基础 ( :gh:`95388` "
")。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use "
":c:func:`PyImport_ImportModule` instead."
msgstr ""
"The :c:func:`PyImport_ImportModuleNoBlock`: 改用 "
":c:func:`PyImport_ImportModule`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:6
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use "
":c:func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project "
"<https://github.com/python/pythoncapi-compat/>`__ can be used to get "
":c:func:`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""
":c:func:`PyWeakref_GetObject` 和 :c:func:`PyWeakref_GET_OBJECT`: 改用 "
":c:func:`PyWeakref_GetRef`。 在 Python 3.12 及更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取 "
":c:func:`PyWeakref_GetRef`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:10
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use "
":c:type:`wchar_t` instead."
msgstr ""
":c:type:`Py_UNICODE` 类型和 :c:macro:`!Py_UNICODE_WIDE` 宏：改用 :c:type:`wchar_t`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:12
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ":c:func:`!PyUnicode_AsDecodedObject`: 改用 :c:func:`PyCodec_Decode`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:14
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead;"
" Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: 改用 :c:func:`PyCodec_Decode`；请注意某些编解码器"
" (例如 \"base64\") 可能返回 :class:`str` 以外的类型，比如 :class:`bytes`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:17
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ":c:func:`!PyUnicode_AsEncodedObject`: 改用 :c:func:`PyCodec_Encode`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:19
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead;"
" Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: 使用 :c:func:`PyCodec_Encode` "
"代替；请注意，某些编解码器（如 \"base64\"）可能返回 :class:`bytes` 之外的类型，如 :class:`str`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:22
msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr "Python 初始化函数， Python 3.13 中弃用："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:24
msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""
":c:func:`Py_GetPath`:使用  :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>`   (:data:`sys.path`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:27
msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use "
":c:func:`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if "
":ref:`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetPrefix`:使用  :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) 代替。如果需要处理 :ref:`virtual "
"environments<venv-def>` ，请使用 :c:func:`PyConfig_Get(\"prefix\") "
"<PyConfig_Get>` (:data:`sys.prefix`) 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:32
msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use "
":c:func:`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` "
"(:data:`sys.exec_prefix`) if :ref:`virtual environments <venv-def>` need to "
"be handled."
msgstr ""
":c:func:`Py_GetExecPrefix`:使用 "
":c:func:`PyConfig_Get(\"base_exec_prefix\")<PyConfig_Get>` "
"(:data:`sys.base_exec_prefix`) 代替。如果需要处理 :ref:`virtual environments<venv-"
"def>` ，请使用 :c:func:`PyConfig_Get(\"exec_prefix\")<PyConfig_Get>` "
"(:data:`sys.exec_prefix`) 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:38
msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`:使用 :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:41
msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramName`:使用 :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:44
msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: 使用 :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` 或 :envvar:`PYTHONHOME` 环境变量代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:48
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat/>`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and "
"older."
msgstr ""
"在 Python 3.13 和更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取 :c:func:`PyConfig_Get`"
" 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:52
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr "用于配置 Python 的初始化的函数，在 Python 3.11 中已弃用："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:54
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgvEx()`: 改为设置 :c:member:`PyConfig.argv`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:56
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgv()`: 改为设置 :c:member:`PyConfig.argv`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:58
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: 改为设置 :c:member:`PyConfig.program_name`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:60
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ":c:func:`!Py_SetPythonHome()`: 改为设置 :c:member:`PyConfig.home`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:62
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and "
":data:`!warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: 改为清除 :data:`sys.warnoptions` 和 "
":data:`!warnings.filters`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:65
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` instead."
msgstr ":c:func:`Py_InitializeFromConfig` API 应与 :c:type:`PyConfig` 一起使用。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:68
msgid "Global configuration variables:"
msgstr "全局配置变量："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:70
msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or "
":c:func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DebugFlag`: 改用 :c:member:`PyConfig.parser_debug` 或 "
":c:func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:73
msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or "
":c:func:`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: 改用 :c:member:`PyConfig.verbose` 或 "
":c:func:`PyConfig_Get(\"verbose\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:76
msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or "
":c:func:`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_QuietFlag`: 改用 :c:member:`PyConfig.quiet` 或 "
":c:func:`PyConfig_Get(\"quiet\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:79
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or "
":c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: 改用 :c:member:`PyConfig.interactive` 或 "
":c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:82
msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or "
":c:func:`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InspectFlag`: 改用 :c:member:`PyConfig.inspect` 或 "
":c:func:`PyConfig_Get(\"inspect\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:85
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or "
":c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: 改用 :c:member:`PyConfig.optimization_level` or "
":c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:88
msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or "
":c:func:`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: 改用 :c:member:`PyConfig.site_import` 或 "
":c:func:`PyConfig_Get(\"site_import\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:91
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or "
":c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: 改用 :c:member:`PyConfig.bytes_warning` or "
":c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:94
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or "
":c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: 使用 :c:member:`PyConfig.pathconfig_warnings` 或 "
":c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:97
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: 使用 :c:member:`PyConfig.use_environment` 或"
" :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:100
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: 使用 :c:member:`PyConfig.write_bytecode` 或 "
":c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:103
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use "
":c:member:`PyConfig.user_site_directory` or "
":c:func:`PyConfig_Get(\"user_site_directory\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: 使用 :c:member:`PyConfig.user_site_directory`"
" 或 :c:func:`PyConfig_Get(\"user_site_directory\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:106
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or "
":c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: 使用 :c:member:`PyConfig.buffered_stdio` 或 "
":c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:109
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: 使用 :c:member:`PyConfig.use_hash_seed` 和 "
":c:member:`PyConfig.hash_seed` 或 :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:113
msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or "
":c:func:`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: 使用 :c:member:`PyConfig.isolated` 或 "
":c:func:`PyConfig_Get(\"isolated\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:116
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use "
":c:member:`PyPreConfig.legacy_windows_fs_encoding` or "
":c:func:`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` "
"instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: 使用 "
":c:member:`PyPreConfig.legacy_windows_fs_encoding` 或 "
":c:func:`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:119
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use "
":c:member:`PyConfig.legacy_windows_stdio` or "
":c:func:`PyConfig_Get(\"legacy_windows_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: 使用 "
":c:member:`PyConfig.legacy_windows_stdio` 或 "
":c:func:`PyConfig_Get(\"legacy_windows_stdio\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:122
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, "
":c:var:`!Py_HasFileSystemDefaultEncoding`: Use "
":c:member:`PyConfig.filesystem_encoding` or "
":c:func:`PyConfig_Get(\"filesystem_encoding\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`, "
":c:var:`!Py_HasFileSystemDefaultEncoding`: 使用 "
":c:member:`PyConfig.filesystem_encoding` 或 "
":c:func:`PyConfig_Get(\"filesystem_encoding\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:125
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use "
":c:member:`PyConfig.filesystem_errors` or "
":c:func:`PyConfig_Get(\"filesystem_errors\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: 使用 "
":c:member:`PyConfig.filesystem_errors` 或 "
":c:func:`PyConfig_Get(\"filesystem_errors\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:128
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or "
":c:func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see "
":c:func:`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: 使用 :c:member:`PyPreConfig.utf8_mode` 或 "
":c:func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` 代替。 (参见 "
":c:func:`Py_PreInitialize`)。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:133
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be "
"used to get these options at runtime."
msgstr ""
":c:func:`Py_InitializeFromConfig` API 应与 :c:type:`PyConfig` "
"一起使用，以设置这些选项。或者使用 :c:func:`PyConfig_Get` 在运行时获取这些选项。"

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:4
msgid "The bundled copy of ``libmpdec``."
msgstr "捆绑的 ``libmpdec`` 副本。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr "以下 API 已被弃用，将被移除，但目前尚未确定移除日期。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: 自 Python 3.8 起不再需要。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ":c:func:`PyErr_Fetch`: 改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: 改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ":c:func:`PyErr_Restore`: 改用 :c:func:`PyErr_SetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: 改用 :c:func:`PyModule_GetFilenameObject`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ":c:func:`PyOS_AfterFork`: 改用 :c:func:`PyOS_AfterFork_Child`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: 改用 :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: 自 Python 3.12 起不再需要"

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ""
":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ":c:func:`!PyErr_Display`: 改用 :c:func:`PyErr_DisplayException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: 改用 :c:func:`!_PyErr_ChainExceptions1`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ":c:member:`!PyBytesObject.ob_shash` 成员：改为调用 :c:func:`PyObject_Hash`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid "Thread Local Storage (TLS) API:"
msgstr "线程本地存储 (TLS) API："

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ":c:func:`PyThread_create_key`: 改用 :c:func:`PyThread_tss_alloc`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:33
msgid ""
":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ":c:func:`PyThread_delete_key`: 改用 :c:func:`PyThread_tss_free`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ":c:func:`PyThread_set_key_value`: 改用 :c:func:`PyThread_tss_set`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:37
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ":c:func:`PyThread_get_key_value`: 改用 :c:func:`PyThread_tss_get`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:39
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: 改用 :c:func:`PyThread_tss_delete`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:41
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: 自 Python 3.7 起不再需要。"

#: ../../whatsnew/3.12.rst:2243
msgid ""
"Remove the :file:`token.h` header file. There was never any public tokenizer"
" C API. The :file:`token.h` header file was only designed to be used by "
"Python internals. (Contributed by Victor Stinner in :gh:`92651`.)"
msgstr ""
"移除 :file:`token.h` 头文件。从来就没有任何公开的 C 语言标记程序接口。 :file:`token.h` 头文件只是为 Python "
"内部使用而设计的。(由 Victor Stinner 在 :gh:`92651` 提供）。"

#: ../../whatsnew/3.12.rst:2248
msgid "Legacy Unicode APIs have been removed. See :pep:`623` for detail."
msgstr "旧式 Unicode API 已被移除。 请参阅 :pep:`623` 了解详情。for detail."

#: ../../whatsnew/3.12.rst:2250
msgid ":c:macro:`!PyUnicode_WCHAR_KIND`"
msgstr ":c:macro:`!PyUnicode_WCHAR_KIND`"

#: ../../whatsnew/3.12.rst:2251
msgid ":c:func:`!PyUnicode_AS_UNICODE`"
msgstr ":c:func:`!PyUnicode_AS_UNICODE`"

#: ../../whatsnew/3.12.rst:2252
msgid ":c:func:`!PyUnicode_AsUnicode`"
msgstr ":c:func:`!PyUnicode_AsUnicode`"

#: ../../whatsnew/3.12.rst:2253
msgid ":c:func:`!PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`!PyUnicode_AsUnicodeAndSize`"

#: ../../whatsnew/3.12.rst:2254
msgid ":c:func:`!PyUnicode_AS_DATA`"
msgstr ":c:func:`!PyUnicode_AS_DATA`"

#: ../../whatsnew/3.12.rst:2255
msgid ":c:func:`!PyUnicode_FromUnicode`"
msgstr ":c:func:`!PyUnicode_FromUnicode`"

#: ../../whatsnew/3.12.rst:2256
msgid ":c:func:`!PyUnicode_GET_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_SIZE`"

#: ../../whatsnew/3.12.rst:2257
msgid ":c:func:`!PyUnicode_GetSize`"
msgstr ":c:func:`!PyUnicode_GetSize`"

#: ../../whatsnew/3.12.rst:2258
msgid ":c:func:`!PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_DATA_SIZE`"

#: ../../whatsnew/3.12.rst:2260
msgid ""
"Remove the ``PyUnicode_InternImmortal()`` function macro. (Contributed by "
"Victor Stinner in :gh:`85858`.)"
msgstr ""
"移除了 ``PyUnicode_InternImmortal()`` 函数宏。 （由 Victor Stinner 在 :gh:`85858` "
"中贡献。）.)"
