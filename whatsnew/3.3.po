# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 汇民 王 <whuim@qq.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 14:18+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.3.rst:3
msgid "What's New In Python 3.3"
msgstr "Python 3.3 有什么新变化"

#: ../../whatsnew/3.3.rst:45
msgid ""
"This article explains the new features in Python 3.3, compared to 3.2. "
"Python 3.3 was released on September 29, 2012.  For full details, see the "
"`changelog <https://docs.python.org/3.3/whatsnew/changelog.html>`_."
msgstr ""
"本文介绍了 Python 3.3 相比 3.2 的新增特性。 Python 3.3 于 2012 年 9 月 29 日 发布。 有关完整详细信息，请参见"
" `changelog <https://docs.python.org/3.3/whatsnew/changelog.html>`_。"

#: ../../whatsnew/3.3.rst:51
msgid ":pep:`398` - Python 3.3 Release Schedule"
msgstr ":pep:`398` - Python 3.3 发布计划"

#: ../../whatsnew/3.3.rst:55
msgid "Summary -- Release highlights"
msgstr "摘要 -- 发布重点"

#: ../../whatsnew/3.3.rst:60
msgid "New syntax features:"
msgstr "新的语法特性："

#: ../../whatsnew/3.3.rst:62
msgid ""
"New ``yield from`` expression for :ref:`generator delegation <pep-380>`."
msgstr "新增 ``yield from`` 表达式用于 :ref:`生成器委托 <pep-380>`。"

#: ../../whatsnew/3.3.rst:63
msgid "The ``u'unicode'`` syntax is accepted again for :class:`str` objects."
msgstr "``u'unicode'`` 语法重新被接受用于 :class:`str` 对象。"

#: ../../whatsnew/3.3.rst:65
msgid "New library modules:"
msgstr "新的库模块："

#: ../../whatsnew/3.3.rst:67
msgid ":mod:`faulthandler` (helps debugging low-level crashes)"
msgstr ":mod:`faulthandler` (帮助调试低层级的崩溃)"

#: ../../whatsnew/3.3.rst:68
msgid ""
":mod:`ipaddress` (high-level objects representing IP addresses and masks)"
msgstr ":mod:`ipaddress` (代表 IP 地址和掩码的高层级对象)"

#: ../../whatsnew/3.3.rst:69
msgid ":mod:`lzma` (compress data using the XZ / LZMA algorithm)"
msgstr ":mod:`lzma` (使用 XZ / LZMA 算法压缩数据)"

#: ../../whatsnew/3.3.rst:70
msgid ""
":mod:`unittest.mock` (replace parts of your system under test with mock "
"objects)"
msgstr ":mod:`unittest.mock` (使用模拟对象替换你的受测试系统中的某些部分)"

#: ../../whatsnew/3.3.rst:71
msgid ""
":mod:`venv` (Python :ref:`virtual environments <pep-405>`, as in the popular"
" ``virtualenv`` package)"
msgstr ":mod:`venv` (Python :ref:`虚拟环境 <pep-405>`，类似于流行的 ``virtualenv`` 包)"

#: ../../whatsnew/3.3.rst:74
msgid "New built-in features:"
msgstr "新的内置特性："

#: ../../whatsnew/3.3.rst:76
msgid "Reworked :ref:`I/O exception hierarchy <pep-3151>`."
msgstr "重写 :ref:`I/O 异常的层次结构<pep-3151>`."

#: ../../whatsnew/3.3.rst:78
msgid "Implementation improvements:"
msgstr "实现的改进："

#: ../../whatsnew/3.3.rst:80
msgid ""
"Rewritten :ref:`import machinery <importlib>` based on :mod:`importlib`."
msgstr "基于 :mod:`importlib` 重写 :ref:`import machinery<importlib>`。"

#: ../../whatsnew/3.3.rst:81
msgid "More compact :ref:`unicode strings <pep-393>`."
msgstr "更紧凑的 :ref:`Unicode 字符串 <pep-393>`。"

#: ../../whatsnew/3.3.rst:82
msgid "More compact :ref:`attribute dictionaries <pep-412>`."
msgstr "更紧凑的 :ref:`属性字典 <pep-412>`。"

#: ../../whatsnew/3.3.rst:84
msgid "Significantly Improved Library Modules:"
msgstr "显著改进的库模块："

#: ../../whatsnew/3.3.rst:86
msgid "C Accelerator for the :ref:`decimal <new-decimal>` module."
msgstr "针对 :ref:`decimal <new-decimal>` 模块的 C 加速器。"

#: ../../whatsnew/3.3.rst:87
msgid ""
"Better unicode handling in the :ref:`email <new-email>` module "
"(:term:`provisional <provisional package>`)."
msgstr ""
":ref:`email <new-email>` 模块中更好的 Unicode 处理 (:term:`暂定 <provisional "
"package>`)。"

#: ../../whatsnew/3.3.rst:90
msgid "Security improvements:"
msgstr "安全改进："

#: ../../whatsnew/3.3.rst:92
msgid "Hash randomization is switched on by default."
msgstr "哈希随机化被默认启用。"

#: ../../whatsnew/3.3.rst:94
msgid "Please read on for a comprehensive list of user-facing changes."
msgstr "请继续阅读有关面向用户的改变的详细清单。"

#: ../../whatsnew/3.3.rst:100
msgid "PEP 405: Virtual Environments"
msgstr "PEP 405: 虚拟环境"

#: ../../whatsnew/3.3.rst:102
msgid ""
"Virtual environments help create separate Python setups while sharing a "
"system-wide base install, for ease of maintenance.  Virtual environments "
"have their own set of private site packages (i.e. locally installed "
"libraries), and are optionally segregated from the system-wide site "
"packages.  Their concept and implementation are inspired by the popular "
"``virtualenv`` third-party package, but benefit from tighter integration "
"with the interpreter core."
msgstr ""
"虚拟环境有助于创建 独立的 Python 设置，同时共享全系统的基础安装，便于维护。  "
"虚拟环境有自己的私有站点包（即本地安装的库），并可选择与系统范围的站点包分离。  虚拟环境的概念和实现 受到流行的 ``virtualenv`` 第三方"
" 包 的启发，但受益于与解释器核心更紧密的集成。"

#: ../../whatsnew/3.3.rst:110
msgid ""
"This PEP adds the :mod:`venv` module for programmatic access, and the "
"``pyvenv`` script for command-line access and administration.  The Python "
"interpreter checks for a ``pyvenv.cfg``, file whose existence signals the "
"base of a virtual environment's directory tree."
msgstr ""
"本 PEP 添加了 :mod:`venv` 模块用于编程访问，以及 ``pyvenv`` 脚本用于命令在线访问和管理。 Python 解释器会检查 "
"``pyvenv.cfg``，文件的存在标志着虚拟环境目录树的基础。"

#: ../../whatsnew/3.3.rst:118
msgid ":pep:`405` - Python Virtual Environments"
msgstr ":pep:`405` - Python虚拟环境"

#: ../../whatsnew/3.3.rst:119
msgid ""
"PEP written by Carl Meyer; implementation by Carl Meyer and Vinay Sajip"
msgstr "PEP 由 Carl Meyer 撰写 ; 由 Carl Meyer 和 Vinay Sajip 实现。"

#: ../../whatsnew/3.3.rst:123
msgid "PEP 420: Implicit Namespace Packages"
msgstr "PEP 420: 隐式命名空间包"

#: ../../whatsnew/3.3.rst:125
msgid ""
"Native support for package directories that don't require ``__init__.py`` "
"marker files and can automatically span multiple path segments (inspired by "
"various third party approaches to namespace packages, as described in "
":pep:`420`)"
msgstr ""
"原生支持不要求 ``__init__.py`` 标记文件和可以自动跨越多个路径节的包目录（灵感来自多个命名空间包的第三方方案，如 :pep:`420` "
"中所述）"

#: ../../whatsnew/3.3.rst:132
msgid ":pep:`420` - Implicit Namespace Packages"
msgstr ":pep:`420` - 隐式命名空间包"

#: ../../whatsnew/3.3.rst:133
msgid ""
"PEP written by Eric V. Smith; implementation by Eric V. Smith and Barry "
"Warsaw"
msgstr "PEP 由 Eric V. Smith 撰写，由 Eric V. Smith 和 Barry Warsaw 实现"

#: ../../whatsnew/3.3.rst:140
msgid ""
"PEP 3118: New memoryview implementation and buffer protocol documentation"
msgstr "PEP 3118: 新的内存视图实现和缓冲协议文档"

#: ../../whatsnew/3.3.rst:142
msgid "The implementation of :pep:`3118` has been significantly improved."
msgstr ":pep:`3118` 的实现已获得大幅改进。"

#: ../../whatsnew/3.3.rst:144
msgid ""
"The new memoryview implementation comprehensively fixes all ownership and "
"lifetime issues of dynamically allocated fields in the Py_buffer struct that"
" led to multiple crash reports. Additionally, several functions that crashed"
" or returned incorrect results for non-contiguous or multi-dimensional input"
" have been fixed."
msgstr ""
"新的 memoryview 实现全面修复了 Py_buffer 结构体中曾导致多起崩溃报告的动态分配字段的所有权和生命周期问题。 "
"此外，还修复了多个函数在非连续或多维输入时崩溃或返回不正确结果的问题。"

#: ../../whatsnew/3.3.rst:150
msgid ""
"The memoryview object now has a PEP-3118 compliant getbufferproc() that "
"checks the consumer's request type. Many new features have been added, most "
"of them work in full generality for non-contiguous arrays and arrays with "
"suboffsets."
msgstr ""
"现在 memoryview 对象具有符合 PEP-3118 标准的 getbufferproc()，可以检查使用者的请求类型。 "
"新增了许多新的特性，其中的大部分已适用于非连续数组和带有子偏移量的数组。"

#: ../../whatsnew/3.3.rst:155
msgid ""
"The documentation has been updated, clearly spelling out responsibilities "
"for both exporters and consumers. Buffer request flags are grouped into "
"basic and compound flags. The memory layout of non-contiguous and multi-"
"dimensional NumPy-style arrays is explained."
msgstr ""
"文档已进行更新，清楚地列出了导出方和使用方的责任。 缓冲区请求旗标志被划分为基本旗标和复合旗标。 对非连续和多维的 NumPy "
"风格数组的内存布局进行了说明。"

#: ../../whatsnew/3.3.rst:161 ../../whatsnew/3.3.rst:1125
msgid "Features"
msgstr "相关特性"

#: ../../whatsnew/3.3.rst:163
msgid ""
"All native single character format specifiers in struct module syntax "
"(optionally prefixed with '@') are now supported."
msgstr "现在 struct 模块语法中所有原生单字符格式指示符（可以选择添加 '@' 前缀）均受到支持。"

#: ../../whatsnew/3.3.rst:166
msgid ""
"With some restrictions, the cast() method allows changing of format and "
"shape of C-contiguous arrays."
msgstr "在某些限制条件下，cast() 方法允许改变 C 连续数组的格式和形状。"

#: ../../whatsnew/3.3.rst:169
msgid ""
"Multi-dimensional list representations are supported for any array type."
msgstr "任何数组类型都支持多维列表的表示形式。"

#: ../../whatsnew/3.3.rst:171
msgid "Multi-dimensional comparisons are supported for any array type."
msgstr "任何数组类型都支持多维比较操作。"

#: ../../whatsnew/3.3.rst:173
msgid ""
"One-dimensional memoryviews of hashable (read-only) types with formats B, b "
"or c are now hashable.  (Contributed by Antoine Pitrou in :issue:`13411`.)"
msgstr ""
"格式为 B、b 或 c 的可哈希（只读）类型的一维 memoryview 现在将是可哈希的。 （由 Antoine Pitrou 在 "
":issue:`13411` 中贡献。）"

#: ../../whatsnew/3.3.rst:176
msgid ""
"Arbitrary slicing of any 1-D arrays type is supported. For example, it is "
"now possible to reverse a memoryview in *O*\\ (1) by using a negative step."
msgstr "支持对 1 维数据类型的任意切片。 例如，现在可以通过使用负步长值以 *O*\\ (1) 复杂度对 memoryview 进行翻转。"

#: ../../whatsnew/3.3.rst:180 ../../whatsnew/3.3.rst:1135
msgid "API changes"
msgstr "API 的变化"

#: ../../whatsnew/3.3.rst:182
msgid "The maximum number of dimensions is officially limited to 64."
msgstr "官方的最大维度数量限制已更改为 64。"

#: ../../whatsnew/3.3.rst:184
msgid ""
"The representation of empty shape, strides and suboffsets is now an empty "
"tuple instead of ``None``."
msgstr "空形状、区间和子偏移量的表示形式现在是空元组而不是 ``None``。"

#: ../../whatsnew/3.3.rst:187
msgid ""
"Accessing a memoryview element with format 'B' (unsigned bytes) now returns "
"an integer (in accordance with the struct module syntax). For returning a "
"bytes object the view must be cast to 'c' first."
msgstr ""
"现在对格式为 'B' (无符号字节型) 的 memoryview 元素的访问将返回一个整数（遵循结构体模块语法）。 "
"要返回字节串对象则必须先将视图强制转换为 'c'。"

#: ../../whatsnew/3.3.rst:191
msgid ""
"memoryview comparisons now use the logical structure of the operands and "
"compare all array elements by value. All format strings in struct module "
"syntax are supported. Views with unrecognised format strings are still "
"permitted, but will always compare as unequal, regardless of view contents."
msgstr ""
"现在 memoryview 比较将使用操作数的逻辑结构并会按值来比较所有数组元素。 结构体模块语法中的所有格式化字符串均受到支持。 "
"带有不可识别的格式化字符串的视图仍然被允许，但无论视图内容如何比较结果总是不相等。"

#: ../../whatsnew/3.3.rst:197
msgid ""
"For further changes see `Build and C API Changes`_ and `Porting C code`_."
msgstr "更多改变请参阅 `Build and C API Changes`_ 和 `Porting C code`_。"

#: ../../whatsnew/3.3.rst:199
msgid "(Contributed by Stefan Krah in :issue:`10181`.)"
msgstr "（由 Stefan Krah 在 :issue:`10181` 中贡献。）"

#: ../../whatsnew/3.3.rst:203
msgid ":pep:`3118` - Revising the Buffer Protocol"
msgstr ":pep:`3118` - 修改缓冲区协议"

#: ../../whatsnew/3.3.rst:209
msgid "PEP 393: Flexible String Representation"
msgstr "PEP 393: 灵活的字符串表示"

#: ../../whatsnew/3.3.rst:211
msgid ""
"The Unicode string type is changed to support multiple internal "
"representations, depending on the character with the largest Unicode ordinal"
" (1, 2, or 4 bytes) in the represented string.  This allows a space-"
"efficient representation in common cases, but gives access to full UCS-4 on "
"all systems.  For compatibility with existing APIs, several representations "
"may exist in parallel; over time, this compatibility should be phased out."
msgstr ""
"Unicode字符串类型已改为支持多种内部表示法，具体取决于所表示的字符串中具有最大 Unicode 序号（1、2 或 4 字节）的字符 。  "
"这样，在常见情况下可以节省空间，但在所有系统上都能使用完整的 UCS-4。  对于使用现有应用程序接口的兼容性 "
"来说，可能会并行存在几种表示法；随着时间的推移，这种兼容性 应逐步淘汰。"

#: ../../whatsnew/3.3.rst:218
msgid "On the Python side, there should be no downside to this change."
msgstr "在 Python 一方，此项改变应当没有任何缺点。"

#: ../../whatsnew/3.3.rst:220
msgid ""
"On the C API side, :pep:`393` is fully backward compatible.  The legacy API "
"should remain available at least five years.  Applications using the legacy "
"API will not fully benefit of the memory reduction, or - worse - may use a "
"bit more memory, because Python may have to maintain two versions of each "
"string (in the legacy format and in the new efficient storage)."
msgstr ""
"在 C API 方面，:pep:`393` 完全向下兼容。 旧的 API 至少还能使用五年。 使用传统 API "
"的应用程序不会完全受益于内存的减少，或者更糟的是，可能会使用更多的内存，因为 Python 可能需要维护每个字符串的两个版本（传统格式和新的高效存储）。"

#: ../../whatsnew/3.3.rst:227
msgid "Functionality"
msgstr "功能"

#: ../../whatsnew/3.3.rst:229
msgid "Changes introduced by :pep:`393` are the following:"
msgstr "由 :pep:`393` 引入的改变如下:"

#: ../../whatsnew/3.3.rst:231
msgid ""
"Python now always supports the full range of Unicode code points, including "
"non-BMP ones (i.e. from ``U+0000`` to ``U+10FFFF``).  The distinction "
"between narrow and wide builds no longer exists and Python now behaves like "
"a wide build, even under Windows."
msgstr ""
"Python 现在始终支持全部 Unicode 码位，包括非 BMP 码位 (即从 ``U+0000`` 到 ``U+10FFFF``)。 "
"窄编译版本和宽编译版本之间的区别已不复存在，Python 现在的行为就像宽编译版本，甚至在 Windows 下也是如此。"

#: ../../whatsnew/3.3.rst:236
msgid ""
"With the death of narrow builds, the problems specific to narrow builds have"
" also been fixed, for example:"
msgstr "随着窄编译版本的消亡，窄编译版本特有的问题也得到了解决，例如："

#: ../../whatsnew/3.3.rst:239
msgid ""
":func:`len` now always returns 1 for non-BMP characters, so "
"``len('\\U0010FFFF') == 1``;"
msgstr "现在 :func:`len` 对于非 BMP 字符总是返回 1，因此 ``len('\\U0010FFFF') == 1``；"

#: ../../whatsnew/3.3.rst:242
msgid ""
"surrogate pairs are not recombined in string literals, so ``'\\uDBFF\\uDFFF'"
" != '\\U0010FFFF'``;"
msgstr "替换对不会在字符串字面值中重新合并，因此 ``'\\uDBFF\\uDFFF' != '\\U0010FFFF'``；"

#: ../../whatsnew/3.3.rst:245
msgid ""
"indexing or slicing non-BMP characters returns the expected value, so "
"``'\\U0010FFFF'[0]`` now returns ``'\\U0010FFFF'`` and not ``'\\uDBFF'``;"
msgstr ""
"索引或切分非 BMP 字符会返回预期的值，因此 ``'\\U0010FFFF'[0]`` 现在会返回 ``'\\U0010FFFF'`` 而不是 "
"``'\\uDBFF'``；"

#: ../../whatsnew/3.3.rst:248
msgid ""
"all other functions in the standard library now correctly handle non-BMP "
"code points."
msgstr "标准库中的所有其他函数现在都能正确处理非 BMP 代码点。"

#: ../../whatsnew/3.3.rst:251
msgid ""
"The value of :data:`sys.maxunicode` is now always ``1114111`` (``0x10FFFF`` "
"in hexadecimal).  The :c:func:`!PyUnicode_GetMax` function still returns "
"either ``0xFFFF`` or ``0x10FFFF`` for backward compatibility, and it should "
"not be used with the new Unicode API (see :issue:`13054`)."
msgstr ""
":data:`sys.maxunicode` 的值现在总是 ``1114111`` (十六进制为 ``0x10FFFF``)。 "
":c:func:`!PyUnicode_GetMax` 函数仍返回 ``0xFFFF`` 或 ``0x10FFFF`` 以便向下兼容，但不应与新的 "
"Unicode API 一起使用 (参见 :issue:`13054`)。"

#: ../../whatsnew/3.3.rst:256
msgid "The :file:`./configure` flag ``--with-wide-unicode`` has been removed."
msgstr ":file:`./configure` 标志 ``--with-wide-unicode`` 已被移除。"

#: ../../whatsnew/3.3.rst:259
msgid "Performance and resource usage"
msgstr "性能和资源使用情况"

#: ../../whatsnew/3.3.rst:261
msgid ""
"The storage of Unicode strings now depends on the highest code point in the "
"string:"
msgstr "现在，Unicode 字符串的存储取决于字符串中的最高码位："

#: ../../whatsnew/3.3.rst:263
msgid ""
"pure ASCII and Latin1 strings (``U+0000-U+00FF``) use 1 byte per code point;"
msgstr "纯 ASCII 和 Latin1 字符串 (``U+0000-U+00FF``) 每个码位使用 1 个字节；"

#: ../../whatsnew/3.3.rst:265
msgid "BMP strings (``U+0000-U+FFFF``) use 2 bytes per code point;"
msgstr "BMP 字符串 (``U+0000-U+FFFF``) 每个码位使用 2 个字节；"

#: ../../whatsnew/3.3.rst:267
msgid "non-BMP strings (``U+10000-U+10FFFF``) use 4 bytes per code point."
msgstr "非 BMP 字符串 (``U+10000-U+10FFFF``) 每个码位使用 4 个字节。"

#: ../../whatsnew/3.3.rst:269
msgid ""
"The net effect is that for most applications, memory usage of string storage"
" should decrease significantly - especially compared to former wide unicode "
"builds - as, in many cases, strings will be pure ASCII even in international"
" contexts (because many strings store non-human language data, such as XML "
"fragments, HTTP headers, JSON-encoded data, etc.).  We also hope that it "
"will, for the same reasons, increase CPU cache efficiency on non-trivial "
"applications. The memory usage of Python 3.3 is two to three times smaller "
"than Python 3.2, and a little bit better than Python 2.7, on a Django "
"benchmark (see the PEP for details)."
msgstr ""
"这样做的效果是，对于大多数应用而言，字符串存储的内存使用量应该会大幅减少 —— 尤其是与以前的宽 unicode 版本相比 —— "
"因为在许多情况下，即使在国际环境中，字符串也将是纯 ASCII 格式（因为许多字符串存储的是非人类语言数据，如 XML 片段、HTTP 标头、JSON "
"编码数据等）。 出于同样的原因，我们还希望它能提高非小应用程序的 CPU 缓存效率。 在 Django 基准测试中，Python 3.3 的内存使用量比"
" Python 3.2 少两到三倍，比 Python 2.7 略好一些（详情请参见 PEP）。"

#: ../../whatsnew/3.3.rst:282
msgid ":pep:`393` - Flexible String Representation"
msgstr ":pep:`393` - 灵活的字符串表示"

#: ../../whatsnew/3.3.rst:283
msgid ""
"PEP written by Martin von Löwis; implementation by Torsten Becker and Martin"
" von Löwis."
msgstr "PEP 由 Martin von Löwis 撰写 ; 由 Torsten Becker 和 Martin von Löwis 实现。"

#: ../../whatsnew/3.3.rst:290
msgid "PEP 397: Python Launcher for Windows"
msgstr "PEP 397: 适用于Windows的Python启动器"

#: ../../whatsnew/3.3.rst:292
msgid ""
"The Python 3.3 Windows installer now includes a ``py`` launcher application "
"that can be used to launch Python applications in a version independent "
"fashion."
msgstr ""
"Python 3.3 的 Windows 安装程序现在包含一个 ``py`` 启动程序，可用于以版本无关的方式启动 Python 应用程序。"

#: ../../whatsnew/3.3.rst:296
msgid ""
"This launcher is invoked implicitly when double-clicking ``*.py`` files. If "
"only a single Python version is installed on the system, that version will "
"be used to run the file. If multiple versions are installed, the most recent"
" version is used by default, but this can be overridden by including a Unix-"
"style \"shebang line\" in the Python script."
msgstr ""
"双击 ``*.py`` 文件时会隐式调用该启动器。 如果系统中只安装了一个 Python 版本，则将使用该版本运行文件。 "
"如果安装了多个版本，则默认使用最新版本，但也可以通过在 Python 脚本中加入 Unix 风格的“shebang 行”来覆盖该版本。"

#: ../../whatsnew/3.3.rst:302
msgid ""
"The launcher can also be used explicitly from the command line as the ``py``"
" application. Running ``py`` follows the same version selection rules as "
"implicitly launching scripts, but a more specific version can be selected by"
" passing appropriate arguments (such as ``-3`` to request Python 3 when "
"Python 2 is also installed, or ``-2.6`` to specifically request an earlier "
"Python version when a more recent version is installed)."
msgstr ""
"启动器也可以作为 ``py`` 应用程序在命令行中显式使用。运行 ``py`` "
"遵循与隐式启动脚本相同的版本选择规则，但可以通过传递适当的参数来选择更具体的版本（例如，当 Python 2 也已安装时，使用 ``-3`` 来请求 "
"Python 3；当安装了较新的 Python 版本时，使用 ``-2.6`` 来特别请求较早的 Python 版本）。"

#: ../../whatsnew/3.3.rst:309
msgid ""
"In addition to the launcher, the Windows installer now includes an option to"
" add the newly installed Python to the system PATH.  (Contributed by Brian "
"Curtin in :issue:`3561`.)"
msgstr ""
"除了启动器之外，Windows 安装程序现在还包含一个选项，可将新安装的 Python 添加到系统 PATH 中。 （由 Brian Curtin 在 "
":issue:`3561` 中贡献）。"

#: ../../whatsnew/3.3.rst:315
msgid ":pep:`397` - Python Launcher for Windows"
msgstr ":pep:`397` - 适用于Windows的Python启动器"

#: ../../whatsnew/3.3.rst:316
msgid ""
"PEP written by Mark Hammond and Martin v. Löwis; implementation by Vinay "
"Sajip."
msgstr "PEP 由 Mark Hammond 和 Martin v. Löwis 撰写 ; 由 Vinay Sajip实现。"

#: ../../whatsnew/3.3.rst:319
msgid "Launcher documentation: :ref:`launcher`"
msgstr "启动器文档: :ref:`launcher`"

#: ../../whatsnew/3.3.rst:321
msgid "Installer PATH modification: :ref:`windows-path-mod`"
msgstr "安装器 PATH 修改: :ref:`windows-path-mod`"

#: ../../whatsnew/3.3.rst:327
msgid "PEP 3151: Reworking the OS and IO exception hierarchy"
msgstr "PEP 3151: 重写 OS 和 IO 异常的层次结构"

#: ../../whatsnew/3.3.rst:329
msgid ""
"The hierarchy of exceptions raised by operating system errors is now both "
"simplified and finer-grained."
msgstr "现在，由操作系统错误引发的异常层次结构既得到了简化，又更加精细。"

#: ../../whatsnew/3.3.rst:332
msgid ""
"You don't have to worry anymore about choosing the appropriate exception "
"type between :exc:`OSError`, :exc:`IOError`, :exc:`EnvironmentError`, "
":exc:`WindowsError`, :exc:`!mmap.error`, :exc:`socket.error` or "
":exc:`select.error`.  All these exception types are now only one: "
":exc:`OSError`.  The other names are kept as aliases for compatibility "
"reasons."
msgstr ""

#: ../../whatsnew/3.3.rst:339
msgid ""
"Also, it is now easier to catch a specific error condition.  Instead of "
"inspecting the ``errno`` attribute (or ``args[0]``) for a particular "
"constant from the :mod:`errno` module, you can catch the adequate "
":exc:`OSError` subclass.  The available subclasses are the following:"
msgstr ""
"此外，现在捕捉特定错误条件也更容易了。无需从 :mod:`errno` 模块中检查 ``errno`` 属性（或 ``args[0]`` "
"）中的特定常量，您可以捕捉适当的 :exc:`OSError` 子类。可用的子类如下："

#: ../../whatsnew/3.3.rst:344
msgid ":exc:`BlockingIOError`"
msgstr ":exc:`BlockingIOError`"

#: ../../whatsnew/3.3.rst:345
msgid ":exc:`ChildProcessError`"
msgstr ":exc:`ChildProcessError`"

#: ../../whatsnew/3.3.rst:346
msgid ":exc:`ConnectionError`"
msgstr ":exc:`ConnectionError`"

#: ../../whatsnew/3.3.rst:347
msgid ":exc:`FileExistsError`"
msgstr ":exc:`FileExistsError`"

#: ../../whatsnew/3.3.rst:348
msgid ":exc:`FileNotFoundError`"
msgstr ":exc:`FileNotFoundError`"

#: ../../whatsnew/3.3.rst:349
msgid ":exc:`InterruptedError`"
msgstr ":exc:`InterruptedError`"

#: ../../whatsnew/3.3.rst:350
msgid ":exc:`IsADirectoryError`"
msgstr ":exc:`IsADirectoryError`"

#: ../../whatsnew/3.3.rst:351
msgid ":exc:`NotADirectoryError`"
msgstr ":exc:`NotADirectoryError`"

#: ../../whatsnew/3.3.rst:352
msgid ":exc:`PermissionError`"
msgstr ":exc:`PermissionError`"

#: ../../whatsnew/3.3.rst:353
msgid ":exc:`ProcessLookupError`"
msgstr ":exc:`ProcessLookupError`"

#: ../../whatsnew/3.3.rst:354
msgid ":exc:`TimeoutError`"
msgstr ":exc:`TimeoutError`"

#: ../../whatsnew/3.3.rst:356
msgid "And the :exc:`ConnectionError` itself has finer-grained subclasses:"
msgstr "并且 :exc:`ConnectionError` 本身具有细粒度的子类:"

#: ../../whatsnew/3.3.rst:358
msgid ":exc:`BrokenPipeError`"
msgstr ":exc:`BrokenPipeError`"

#: ../../whatsnew/3.3.rst:359
msgid ":exc:`ConnectionAbortedError`"
msgstr ":exc:`ConnectionAbortedError`"

#: ../../whatsnew/3.3.rst:360
msgid ":exc:`ConnectionRefusedError`"
msgstr ":exc:`ConnectionRefusedError`"

#: ../../whatsnew/3.3.rst:361
msgid ":exc:`ConnectionResetError`"
msgstr ":exc:`ConnectionResetError`"

#: ../../whatsnew/3.3.rst:363
msgid ""
"Thanks to the new exceptions, common usages of the :mod:`errno` can now be "
"avoided.  For example, the following code written for Python 3.2::"
msgstr "有了新的异常，现在就可以避免 :mod:`errno` 的常见用法了。 例如，下面是为 Python 3.2 编写的代码："

#: ../../whatsnew/3.3.rst:366
msgid ""
"from errno import ENOENT, EACCES, EPERM\n"
"\n"
"try:\n"
"    with open(\"document.txt\") as f:\n"
"        content = f.read()\n"
"except IOError as err:\n"
"    if err.errno == ENOENT:\n"
"        print(\"document.txt file is missing\")\n"
"    elif err.errno in (EACCES, EPERM):\n"
"        print(\"You are not allowed to read document.txt\")\n"
"    else:\n"
"        raise"
msgstr ""
"from errno import ENOENT, EACCES, EPERM\n"
"\n"
"try:\n"
"    with open(\"document.txt\") as f:\n"
"        content = f.read()\n"
"except IOError as err:\n"
"    if err.errno == ENOENT:\n"
"        print(\"document.txt file is missing\")\n"
"    elif err.errno in (EACCES, EPERM):\n"
"        print(\"You are not allowed to read document.txt\")\n"
"    else:\n"
"        raise"

#: ../../whatsnew/3.3.rst:379
msgid ""
"can now be written without the :mod:`errno` import and without manual "
"inspection of exception attributes::"
msgstr "现在无需导入 :mod:`errno`，也无需手动检查异常属性："

#: ../../whatsnew/3.3.rst:382
msgid ""
"try:\n"
"    with open(\"document.txt\") as f:\n"
"        content = f.read()\n"
"except FileNotFoundError:\n"
"    print(\"document.txt file is missing\")\n"
"except PermissionError:\n"
"    print(\"You are not allowed to read document.txt\")"
msgstr ""
"try:\n"
"    with open(\"document.txt\") as f:\n"
"        content = f.read()\n"
"except FileNotFoundError:\n"
"    print(\"document.txt file is missing\")\n"
"except PermissionError:\n"
"    print(\"You are not allowed to read document.txt\")"

#: ../../whatsnew/3.3.rst:392
msgid ":pep:`3151` - Reworking the OS and IO Exception Hierarchy"
msgstr ":pep:`3151` - 重写 OS 和 IO 异常的层次结构"

#: ../../whatsnew/3.3.rst:393
msgid "PEP written and implemented by Antoine Pitrou"
msgstr "PEP 由 Antoine Pitrou 撰写并实现"

#: ../../whatsnew/3.3.rst:402
msgid "PEP 380: Syntax for Delegating to a Subgenerator"
msgstr "PEP 380: 委托给子生成器的语法"

#: ../../whatsnew/3.3.rst:404
msgid ""
"PEP 380 adds the ``yield from`` expression, allowing a :term:`generator` to "
"delegate part of its operations to another generator. This allows a section "
"of code containing :keyword:`yield` to be factored out and placed in another"
" generator. Additionally, the subgenerator is allowed to return with a "
"value, and the value is made available to the delegating generator."
msgstr ""
"PEP 380 增加了 ``yield from`` 表达式，允许 :term:`generator` 将其部分操作委托给另一个生成器。 这样，包含 "
":keyword:`yield` 的代码部分就可以被分解出来，放在另一个生成器中。 此外，还允许子生成器返回一个值，并将该值提供给委托生成器。"

#: ../../whatsnew/3.3.rst:411
msgid ""
"While designed primarily for use in delegating to a subgenerator, the "
"``yield from`` expression actually allows delegation to arbitrary "
"subiterators."
msgstr "虽然 ``yield from`` 表达式主要用于委托给子生成器，但它实际上允许委托给任意子生成器。"

#: ../../whatsnew/3.3.rst:414
msgid ""
"For simple iterators, ``yield from iterable`` is essentially just a "
"shortened form of ``for item in iterable: yield item``::"
msgstr ""
"对于简单的迭代器而言，``yield from iterable`` 本质上只是 ``for item in iterable: yield "
"item`` 的简写形式："

#: ../../whatsnew/3.3.rst:417
msgid ""
">>> def g(x):\n"
"...     yield from range(x, 0, -1)\n"
"...     yield from range(x)\n"
"...\n"
">>> list(g(5))\n"
"[5, 4, 3, 2, 1, 0, 1, 2, 3, 4]"
msgstr ""
">>> def g(x):\n"
"...     yield from range(x, 0, -1)\n"
"...     yield from range(x)\n"
"...\n"
">>> list(g(5))\n"
"[5, 4, 3, 2, 1, 0, 1, 2, 3, 4]"

#: ../../whatsnew/3.3.rst:424
msgid ""
"However, unlike an ordinary loop, ``yield from`` allows subgenerators to "
"receive sent and thrown values directly from the calling scope, and return a"
" final value to the outer generator::"
msgstr "但是，与普通的循环不同，``yield from`` 允许子生成器直接从调用方作用域获取、发送和抛出值，并向外层生成器返回一个最终值::"

#: ../../whatsnew/3.3.rst:428
msgid ""
">>> def accumulate():\n"
"...     tally = 0\n"
"...     while 1:\n"
"...         next = yield\n"
"...         if next is None:\n"
"...             return tally\n"
"...         tally += next\n"
"...\n"
">>> def gather_tallies(tallies):\n"
"...     while 1:\n"
"...         tally = yield from accumulate()\n"
"...         tallies.append(tally)\n"
"...\n"
">>> tallies = []\n"
">>> acc = gather_tallies(tallies)\n"
">>> next(acc)  # Ensure the accumulator is ready to accept values\n"
">>> for i in range(4):\n"
"...     acc.send(i)\n"
"...\n"
">>> acc.send(None)  # Finish the first tally\n"
">>> for i in range(5):\n"
"...     acc.send(i)\n"
"...\n"
">>> acc.send(None)  # Finish the second tally\n"
">>> tallies\n"
"[6, 10]"
msgstr ""
">>> def accumulate():\n"
"...     tally = 0\n"
"...     while 1:\n"
"...         next = yield\n"
"...         if next is None:\n"
"...             return tally\n"
"...         tally += next\n"
"...\n"
">>> def gather_tallies(tallies):\n"
"...     while 1:\n"
"...         tally = yield from accumulate()\n"
"...         tallies.append(tally)\n"
"...\n"
">>> tallies = []\n"
">>> acc = gather_tallies(tallies)\n"
">>> next(acc)  # 确保累计器准备好接受值\n"
">>> for i in range(4):\n"
"...     acc.send(i)\n"
"...\n"
">>> acc.send(None)  # 完成第一次记录\n"
">>> for i in range(5):\n"
"...     acc.send(i)\n"
"...\n"
">>> acc.send(None)  # 完成第二次记录\n"
">>> tallies\n"
"[6, 10]"

#: ../../whatsnew/3.3.rst:455
msgid ""
"The main principle driving this change is to allow even generators that are "
"designed to be used with the ``send`` and ``throw`` methods to be split into"
" multiple subgenerators as easily as a single large function can be split "
"into multiple subfunctions."
msgstr ""
"推动这项改变的主要原则是允许即便被设计用来配合 ``send`` 和 ``throw`` "
"方法使用的生成器也能像一个大函数能拆分成多个子函数那样容易地拆分为多个子生成器。"

#: ../../whatsnew/3.3.rst:462
msgid ":pep:`380` - Syntax for Delegating to a Subgenerator"
msgstr ":pep:`380` - 委托给子生成器的语法"

#: ../../whatsnew/3.3.rst:463
msgid ""
"PEP written by Greg Ewing; implementation by Greg Ewing, integrated into 3.3"
" by Renaud Blanch, Ryan Kelly and Nick Coghlan; documentation by Zbigniew "
"Jędrzejewski-Szmek and Nick Coghlan"
msgstr ""
"PEP 由 Greg Ewing 撰写，由 Greg Ewing 实现。由 Renaud Blanch，Ryan Kelly 和 Nick "
"Coghlan 集成到3.3，由 Zbigniew Jędrzejewski-Szmek 和 Nick Coghlan 编写文档"

#: ../../whatsnew/3.3.rst:469
msgid "PEP 409: Suppressing exception context"
msgstr "PEP 409: 清除异常上下文"

#: ../../whatsnew/3.3.rst:471
msgid ""
"PEP 409 introduces new syntax that allows the display of the chained "
"exception context to be disabled. This allows cleaner error messages in "
"applications that convert between exception types::"
msgstr "PEP 409 引入了允许禁用串连的异常上下文显示的新语法。 这允许在不同异常类型间进行转换的应用程序具有更清晰的错误消息::"

#: ../../whatsnew/3.3.rst:475
msgid ""
">>> class D:\n"
"...     def __init__(self, extra):\n"
"...         self._extra_attributes = extra\n"
"...     def __getattr__(self, attr):\n"
"...         try:\n"
"...             return self._extra_attributes[attr]\n"
"...         except KeyError:\n"
"...             raise AttributeError(attr) from None\n"
"...\n"
">>> D({}).x\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"<stdin>\", line 8, in __getattr__\n"
"AttributeError: x"
msgstr ""
">>> class D:\n"
"...     def __init__(self, extra):\n"
"...         self._extra_attributes = extra\n"
"...     def __getattr__(self, attr):\n"
"...         try:\n"
"...             return self._extra_attributes[attr]\n"
"...         except KeyError:\n"
"...             raise AttributeError(attr) from None\n"
"...\n"
">>> D({}).x\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"<stdin>\", line 8, in __getattr__\n"
"AttributeError: x"

#: ../../whatsnew/3.3.rst:490
msgid ""
"Without the ``from None`` suffix to suppress the cause, the original "
"exception would be displayed by default::"
msgstr "如果后面没有 ``from None`` 来屏蔽异常原因，则默认原始异常将被显示::"

#: ../../whatsnew/3.3.rst:493
msgid ""
">>> class C:\n"
"...     def __init__(self, extra):\n"
"...         self._extra_attributes = extra\n"
"...     def __getattr__(self, attr):\n"
"...         try:\n"
"...             return self._extra_attributes[attr]\n"
"...         except KeyError:\n"
"...             raise AttributeError(attr)\n"
"...\n"
">>> C({}).x\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 6, in __getattr__\n"
"KeyError: 'x'\n"
"\n"
"During handling of the above exception, another exception occurred:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"<stdin>\", line 8, in __getattr__\n"
"AttributeError: x"
msgstr ""
">>> class C:\n"
"...     def __init__(self, extra):\n"
"...         self._extra_attributes = extra\n"
"...     def __getattr__(self, attr):\n"
"...         try:\n"
"...             return self._extra_attributes[attr]\n"
"...         except KeyError:\n"
"...             raise AttributeError(attr)\n"
"...\n"
">>> C({}).x\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 6, in __getattr__\n"
"KeyError: 'x'\n"
"\n"
"During handling of the above exception, another exception occurred:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"<stdin>\", line 8, in __getattr__\n"
"AttributeError: x"

#: ../../whatsnew/3.3.rst:514
msgid ""
"No debugging capability is lost, as the original exception context remains "
"available if needed (for example, if an intervening library has incorrectly "
"suppressed valuable underlying details)::"
msgstr "调试功能并未丢失，因为原始异常上下文在需要时仍然可用（举例来说，如果某个中间库不正确地抑制了有价值的下层细节）::"

#: ../../whatsnew/3.3.rst:518
msgid ""
">>> try:\n"
"...     D({}).x\n"
"... except AttributeError as exc:\n"
"...     print(repr(exc.__context__))\n"
"...\n"
"KeyError('x',)"
msgstr ""
">>> try:\n"
"...     D({}).x\n"
"... except AttributeError as exc:\n"
"...     print(repr(exc.__context__))\n"
"...\n"
"KeyError('x',)"

#: ../../whatsnew/3.3.rst:527
msgid ":pep:`409` - Suppressing exception context"
msgstr ":pep:`409` - 清除异常上下文"

#: ../../whatsnew/3.3.rst:528
msgid ""
"PEP written by Ethan Furman; implemented by Ethan Furman and Nick Coghlan."
msgstr "PEP 由 Ethan Furman 撰写 ，由 Ethan Furman 和 Nick Coghlan 实现。"

#: ../../whatsnew/3.3.rst:533
msgid "PEP 414: Explicit Unicode literals"
msgstr "PEP 414: 显式的Unicode文本"

#: ../../whatsnew/3.3.rst:535
msgid ""
"To ease the transition from Python 2 for Unicode aware Python applications "
"that make heavy use of Unicode literals, Python 3.3 once again supports the "
"\"``u``\" prefix for string literals. This prefix has no semantic "
"significance in Python 3, it is provided solely to reduce the number of "
"purely mechanical changes in migrating to Python 3, making it easier for "
"developers to focus on the more significant semantic changes (such as the "
"stricter default separation of binary and text data)."
msgstr ""
"为使从 Python 2 迁移重度使用 Unicode 字面值的 Unicode 自适应型 Python 应用程序更为容易，Python 3.3 "
"重新支持字符串字面值使用 \"``u``\" 前缀。 该前缀在 Python 3 中并无语法意义，提供它只是为了减少在迁移到 Python 3 "
"时纯粹机械性的修改数量，让开发者能更轻松的关注更重要的语法变化（比如默认更严格的二进制和文本数据的区分）。"

#: ../../whatsnew/3.3.rst:545
msgid ":pep:`414` - Explicit Unicode literals"
msgstr ":pep:`414` - 显式的Unicode文本"

#: ../../whatsnew/3.3.rst:546
msgid "PEP written by Armin Ronacher."
msgstr "PEP 由 Armin Ronacher 撰写。"

#: ../../whatsnew/3.3.rst:550
msgid "PEP 3155: Qualified name for classes and functions"
msgstr "PEP 3155: 类和函数的限定名称"

#: ../../whatsnew/3.3.rst:552
msgid ""
"Functions and class objects have a new :attr:`~definition.__qualname__` "
"attribute representing the \"path\" from the module top-level to their "
"definition.  For global functions and classes, this is the same as "
":attr:`~definition.__name__`. For other functions and classes, it provides "
"better information about where they were actually defined, and how they "
"might be accessible from the global scope."
msgstr ""
"函数和类对象新增了 :attr:`~definition.__qualname__` 属性来表示从模块最高层级到其定义位置的“路径”。 "
"对于全局函数和类，这将与 :attr:`~definition.__name__` 相同。 "
"对于其他函数和类，它提供了有关这些对象实际定义所在位置，以及如何从全局作用域访问它们的更详细信息。"

#: ../../whatsnew/3.3.rst:560
msgid "Example with (non-bound) methods::"
msgstr "包含（未绑定）方法的示例::"

#: ../../whatsnew/3.3.rst:562
msgid ""
">>> class C:\n"
"...     def meth(self):\n"
"...         pass\n"
"...\n"
">>> C.meth.__name__\n"
"'meth'\n"
">>> C.meth.__qualname__\n"
"'C.meth'"
msgstr ""
">>> class C:\n"
"...     def meth(self):\n"
"...         pass\n"
"...\n"
">>> C.meth.__name__\n"
"'meth'\n"
">>> C.meth.__qualname__\n"
"'C.meth'"

#: ../../whatsnew/3.3.rst:571
msgid "Example with nested classes::"
msgstr "包含嵌套类的示例::"

#: ../../whatsnew/3.3.rst:573
msgid ""
">>> class C:\n"
"...     class D:\n"
"...         def meth(self):\n"
"...             pass\n"
"...\n"
">>> C.D.__name__\n"
"'D'\n"
">>> C.D.__qualname__\n"
"'C.D'\n"
">>> C.D.meth.__name__\n"
"'meth'\n"
">>> C.D.meth.__qualname__\n"
"'C.D.meth'"
msgstr ""
">>> class C:\n"
"...     class D:\n"
"...         def meth(self):\n"
"...             pass\n"
"...\n"
">>> C.D.__name__\n"
"'D'\n"
">>> C.D.__qualname__\n"
"'C.D'\n"
">>> C.D.meth.__name__\n"
"'meth'\n"
">>> C.D.meth.__qualname__\n"
"'C.D.meth'"

#: ../../whatsnew/3.3.rst:587
msgid "Example with nested functions::"
msgstr "包含嵌套函数的示例::"

#: ../../whatsnew/3.3.rst:589
msgid ""
">>> def outer():\n"
"...     def inner():\n"
"...         pass\n"
"...     return inner\n"
"...\n"
">>> outer().__name__\n"
"'inner'\n"
">>> outer().__qualname__\n"
"'outer.<locals>.inner'"
msgstr ""
">>> def outer():\n"
"...     def inner():\n"
"...         pass\n"
"...     return inner\n"
"...\n"
">>> outer().__name__\n"
"'inner'\n"
">>> outer().__qualname__\n"
"'outer.<locals>.inner'"

#: ../../whatsnew/3.3.rst:599
msgid ""
"The string representation of those objects is also changed to include the "
"new, more precise information::"
msgstr "这些对象的字符串表示形式也被修改以包括新的更准确的信息::"

#: ../../whatsnew/3.3.rst:602
msgid ""
">>> str(C.D)\n"
"\"<class '__main__.C.D'>\"\n"
">>> str(C.D.meth)\n"
"'<function C.D.meth at 0x7f46b9fe31e0>'"
msgstr ""
">>> str(C.D)\n"
"\"<class '__main__.C.D'>\"\n"
">>> str(C.D.meth)\n"
"'<function C.D.meth at 0x7f46b9fe31e0>'"

#: ../../whatsnew/3.3.rst:609
msgid ":pep:`3155` - Qualified name for classes and functions"
msgstr ":pep:`3155` - 类和函数的限定名称"

#: ../../whatsnew/3.3.rst:610
msgid "PEP written and implemented by Antoine Pitrou."
msgstr "PEP 由 Antoine Pitrou 撰写并实现。"

#: ../../whatsnew/3.3.rst:616
msgid "PEP 412: Key-Sharing Dictionary"
msgstr "PEP 412: Key-Sharing Dictionary"

#: ../../whatsnew/3.3.rst:618
msgid ""
"Dictionaries used for the storage of objects' attributes are now able to "
"share part of their internal storage between each other (namely, the part "
"which stores the keys and their respective hashes).  This reduces the memory"
" consumption of programs creating many instances of non-builtin types."
msgstr ""
"用于存储对象属性的字典现在能够在彼此之间共享部分内部存储（比如说，存储键及其对应哈希值的部分）。 这减少了程序创建多个非内置类型实例的内存消耗。"

#: ../../whatsnew/3.3.rst:625
msgid ":pep:`412` - Key-Sharing Dictionary"
msgstr ":pep:`412` - Key-Sharing Dictionary"

#: ../../whatsnew/3.3.rst:626
msgid "PEP written and implemented by Mark Shannon."
msgstr "PEP 由 Mark Shannon 撰写并实现。"

#: ../../whatsnew/3.3.rst:630
msgid "PEP 362: Function Signature Object"
msgstr "PEP 362: 函数签名对象"

#: ../../whatsnew/3.3.rst:632
msgid ""
"A new function :func:`inspect.signature` makes introspection of python "
"callables easy and straightforward.  A broad range of callables is "
"supported: python functions, decorated or not, classes, and "
":func:`functools.partial` objects.  New classes :class:`inspect.Signature`, "
":class:`inspect.Parameter` and :class:`inspect.BoundArguments` hold "
"information about the call signatures, such as, annotations, default values,"
" parameters kinds, and bound arguments, which considerably simplifies "
"writing decorators and any code that validates or amends calling signatures "
"or arguments."
msgstr ""
"新增的函数 :func:`inspect.signature` 使得对 python 可调用对象的内省更为简单直观。 "
"多种可调用对象均受到支持：不论是否带装饰器的 python 函数，类以及 :func:`functools.partial` 对象。 新增的类 "
":class:`inspect.Signature`, :class:`inspect.Parameter` 和 "
":class:`inspect.BoundArguments` "
"保存了有关调用签名的信息，如标注、默认值、形参类别和绑定参数等，这极大地简化了编写装饰器和其他任何验证或修改调用签名或参数的工作。"

#: ../../whatsnew/3.3.rst:643
msgid ":pep:`362`: -  Function Signature Object"
msgstr ":pep:`362`: -  函数签名对象"

#: ../../whatsnew/3.3.rst:644
msgid ""
"PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon Seo; "
"implemented by Yury Selivanov."
msgstr ""
"PEP 由 Brett Cannon，Yury Selivanov，Larry Hastings，Jiwon Seo 撰写，由 Yury "
"Selivanov 实现。"

#: ../../whatsnew/3.3.rst:649
msgid "PEP 421: Adding sys.implementation"
msgstr "PEP 421: 添加 sys.implementation"

#: ../../whatsnew/3.3.rst:651
msgid ""
"A new attribute on the :mod:`sys` module exposes details specific to the "
"implementation of the currently running interpreter.  The initial set of "
"attributes on :data:`sys.implementation` are ``name``, ``version``, "
"``hexversion``, and ``cache_tag``."
msgstr ""
"新增的 :mod:`sys` 模块属性将对外公开当前运行的解释器实现的专属细节。 :data:`sys.implementation` "
"上的初始属性集合包括 ``name``, ``version``, ``hexversion`` 和 ``cache_tag``。"

#: ../../whatsnew/3.3.rst:656
msgid ""
"The intention of ``sys.implementation`` is to consolidate into one namespace"
" the implementation-specific data used by the standard library.  This allows"
" different Python implementations to share a single standard library code "
"base much more easily.  In its initial state, ``sys.implementation`` holds "
"only a small portion of the implementation-specific data.  Over time that "
"ratio will shift in order to make the standard library more portable."
msgstr ""
"``sys.implementation`` 的目的是将标准库所使用的具体实现专属数据合并到一个命名空间中。 这允许不同的 Python "
"实现能更方便地共享同一个标准库基准代码。 在其初始状态中，``sys.implementation`` 只保持具体实现专属数据的一小部分。 "
"随着时间推移这个比例将进行调整以使标准库具有更好的可移植性。"

#: ../../whatsnew/3.3.rst:663
msgid ""
"One example of improved standard library portability is ``cache_tag``.  As "
"of Python 3.3, ``sys.implementation.cache_tag`` is used by :mod:`importlib` "
"to support :pep:`3147` compliance.  Any Python implementation that uses "
"``importlib`` for its built-in import system may use ``cache_tag`` to "
"control the caching behavior for modules."
msgstr ""
"标准库可移植性提高的一个例子是 ``cache_tag``。 在 Python 3.3 "
"中，``sys.implementation.cache_tag`` 被 :mod:`importlib` 用来支持与 :pep:`3147` "
"的一致性。 任何使用 ``importlib`` 来处理内置导入系统的 Python 实现都可使用 ``cache_tag`` "
"来控制各个模块的缓存行为。"

#: ../../whatsnew/3.3.rst:670
msgid "SimpleNamespace"
msgstr "SimpleNamespace"

#: ../../whatsnew/3.3.rst:672
msgid ""
"The implementation of ``sys.implementation`` also introduces a new type to "
"Python: :class:`types.SimpleNamespace`.  In contrast to a mapping-based "
"namespace, like :class:`dict`, ``SimpleNamespace`` is attribute-based, like "
":class:`object`.  However, unlike ``object``, ``SimpleNamespace`` instances "
"are writable.  This means that you can add, remove, and modify the namespace"
" through normal attribute access."
msgstr ""
"``sys.implementation`` 的实现还为 Python 引入了一个新类型: "
":class:`types.SimpleNamespace`。 相比基于映射的命名空间像是 "
":class:`dict`，``SimpleNamespace`` 是基于属性的，像是 :class:`object`。 不过，与 ``object``"
" 不同，``SimpleNamespace`` 实例是可写的。 这意味着你可以通过常规的属性访问来添加、移除和修改命名空间。"

#: ../../whatsnew/3.3.rst:681
msgid ":pep:`421` - Adding sys.implementation"
msgstr ":pep:`421` - 添加 sys.implementation"

#: ../../whatsnew/3.3.rst:682
msgid "PEP written and implemented by Eric Snow."
msgstr "PEP 由 Eric Snow 撰写并实现。"

#: ../../whatsnew/3.3.rst:688
msgid "Using importlib as the Implementation of Import"
msgstr "使用 importlib 作为导入的实现"

#: ../../whatsnew/3.3.rst:689
msgid ""
":issue:`2377` - Replace __import__ w/ importlib.__import__ :issue:`13959` - "
"Re-implement parts of :mod:`!imp` in pure Python :issue:`14605` - Make "
"import machinery explicit :issue:`14646` - Require loaders set __loader__ "
"and __package__"
msgstr ""
":issue:`2377` - 以 importlib.__import__ 替代 __import__ :issue:`13959` - 以纯 "
"Python 重新实现部分 :mod:`!imp` :issue:`14605` - 使导入机制成为显式的 :issue:`14646` - "
"要求加载器设置 __loader__ 和 __package__"

#: ../../whatsnew/3.3.rst:694
msgid ""
"The :func:`__import__` function is now powered by "
":func:`importlib.__import__`. This work leads to the completion of \"phase "
"2\" of :pep:`302`. There are multiple benefits to this change. First, it has"
" allowed for more of the machinery powering import to be exposed instead of "
"being implicit and hidden within the C code. It also provides a single "
"implementation for all Python VMs supporting Python 3.3 to use, helping to "
"end any VM-specific deviations in import semantics. And finally it eases the"
" maintenance of import, allowing for future growth to occur."
msgstr ""
"现在 :func:`__import__` 函数是由 :func:`importlib.__import__` 驱动的。 这项工作标志着 "
":pep:`302` 的“第 2 阶段”的结束。 这一变化带来了许多好处。 首先，它允许更多驱动导入的机制对外公开而不是保持隐式并藏在 C 代码内部。 "
"它还提供了单一的实现给所有支持 Python 3.3 的 Python VM 使用，有助于结束导入语义中有关特定 VM 的偏差。 "
"最后它还减轻了导入的维护负担，以允许未来的更多改进。"

#: ../../whatsnew/3.3.rst:703
msgid ""
"For the common user, there should be no visible change in semantics.  For "
"those whose code currently manipulates import or calls import "
"programmatically, the code changes that might possibly be required are "
"covered in the `Porting Python code`_ section of this document."
msgstr ""
"对于普通用户来说，语义上的变化应该是不可见的。 对于目前直接操纵 import 或以程序方式调用 import "
"的代码来说，可能需要进行的代码修改将在本文档的 `Porting Python code`_ 一节中阐述。"

#: ../../whatsnew/3.3.rst:709
msgid "New APIs"
msgstr "新的API"

#: ../../whatsnew/3.3.rst:710
msgid ""
"One of the large benefits of this work is the exposure of what goes into "
"making the import statement work. That means the various importers that were"
" once implicit are now fully exposed as part of the :mod:`importlib` "
"package."
msgstr ""
"此项工作的一个好处是对外公开了实现 import 语句所涉及的机制。 这意味着过去保持隐式的各种导入器现在都作为 :mod:`importlib` "
"包的组成部分被完整暴露出来。"

#: ../../whatsnew/3.3.rst:714
msgid ""
"The abstract base classes defined in :mod:`importlib.abc` have been expanded"
" to properly delineate between :term:`meta path finders <meta path finder>` "
"and :term:`path entry finders <path entry finder>` by introducing "
":class:`importlib.abc.MetaPathFinder` and "
":class:`importlib.abc.PathEntryFinder`, respectively. The old ABC of "
":class:`!importlib.abc.Finder` is now only provided for backwards-"
"compatibility and does not enforce any method requirements."
msgstr ""
"在 :mod:`importlib.abc` 中定义的抽象基类已分别通过 :class:`importlib.abc.MetaPathFinder` 和"
" :class:`importlib.abc.PathEntryFinder` 进行扩展以正确地描述 :term:`元路径查找器 <meta path "
"finder>` 和 :term:`路径条目查找器 <path entry finder>`。 现在提供旧的 ABC "
":class:`!importlib.abc.Finder` 只是为了保持向下兼容性而没有包含任何方法要求。"

#: ../../whatsnew/3.3.rst:722
msgid ""
"In terms of finders, :class:`importlib.machinery.FileFinder` exposes the "
"mechanism used to search for source and bytecode files of a module. "
"Previously this class was an implicit member of :data:`sys.path_hooks`."
msgstr ""
"对于查找器，:class:`importlib.machinery.FileFinder` 对外公开了用于查找一个模块的源代码和字节码文件的机制。 "
"在之前版本中该类则是 :data:`sys.path_hooks` 的一个隐式成员。"

#: ../../whatsnew/3.3.rst:726
msgid ""
"For loaders, the new abstract base class :class:`importlib.abc.FileLoader` "
"helps write a loader that uses the file system as the storage mechanism for "
"a module's code. The loader for source files "
"(:class:`importlib.machinery.SourceFileLoader`), sourceless bytecode files "
"(:class:`importlib.machinery.SourcelessFileLoader`), and extension modules "
"(:class:`importlib.machinery.ExtensionFileLoader`) are now available for "
"direct use."
msgstr ""
"对于加载器，新的抽象基类 :class:`importlib.abc.FileLoader` 可帮助编写使用文件系统作为模块代码的存储机制的加载器。 "
"针对源代码的 (:class:`importlib.machinery.SourceFileLoader`), 不带源代码的字节码文件的 "
"(:class:`importlib.machinery.SourcelessFileLoader`) 以及扩展模块的 "
"(:class:`importlib.machinery.ExtensionFileLoader`) 加载器现在均可被直接使用。"

#: ../../whatsnew/3.3.rst:734
msgid ""
":exc:`ImportError` now has ``name`` and ``path`` attributes which are set "
"when there is relevant data to provide. The message for failed imports will "
"also provide the full name of the module now instead of just the tail end of"
" the module's name."
msgstr ""
"现在 :exc:`ImportError` 具有 ``name`` 和 ``path`` 属性并会在有相关数据要提供时被设置。 "
"针对导入失败的消息现在也会提供模块的完整名称而不是仅有模块名称的末尾部分。"

#: ../../whatsnew/3.3.rst:739
msgid ""
"The :func:`importlib.invalidate_caches` function will now call the method "
"with the same name on all finders cached in :data:`sys.path_importer_cache` "
"to help clean up any stored state as necessary."
msgstr ""
"现在 :func:`importlib.invalidate_caches` 函数会调用缓存在 "
":data:`sys.path_importer_cache` 中的所有查找器上具有相同名称的方法以帮助根据需要清理任何已储存的状态。"

#: ../../whatsnew/3.3.rst:744
msgid "Visible Changes"
msgstr "可见的改变"

#: ../../whatsnew/3.3.rst:746
msgid ""
"For potential required changes to code, see the `Porting Python code`_ "
"section."
msgstr "对于可能需要修改的代码，请参阅 `Porting Python code`_ 一节。"

#: ../../whatsnew/3.3.rst:749
msgid ""
"Beyond the expanse of what :mod:`importlib` now exposes, there are other "
"visible changes to import. The biggest is that :data:`sys.meta_path` and "
":data:`sys.path_hooks` now store all of the meta path finders and path entry"
" hooks used by import.  Previously the finders were implicit and hidden "
"within the C code of import instead of being directly exposed. This means "
"that one can now easily remove or change the order of the various finders to"
" fit one's needs."
msgstr ""
"在 :mod:`importlib` 当前对外公开的范围之外，还有其他可见的针对 import 的改变。 最大的改变是 "
":data:`sys.meta_path` 和 :data:`sys.path_hooks` 现在将储存 import "
"用到的所有元路径查找器和路径条目钩子。 在之前版本中这些查找器是隐式地藏在 import 的 C 代码内部而不是直接对外公开。 "
"这意味着现在你可以方便地移除或修改各个查找器的顺序以适合你的需要。"

#: ../../whatsnew/3.3.rst:756
msgid ""
"Another change is that all modules have a ``__loader__`` attribute, storing "
"the loader used to create the module. :pep:`302` has been updated to make "
"this attribute mandatory for loaders to implement, so in the future once "
"3rd-party loaders have been updated people will be able to rely on the "
"existence of the attribute. Until such time, though, import is setting the "
"module post-load."
msgstr ""
"另一个变化是所有模块都具有 ``__loader__`` 属性，它储存被用于创建该模块的加载器。 :pep:`302` "
"已被更新以强制要求加载器实现该属性，因此未来的第 3 方加载器一旦被更新人们将能确定该属性的存在。 但在此之前，import 都需要在加载之后设置模块。"

#: ../../whatsnew/3.3.rst:762
msgid ""
"Loaders are also now expected to set the ``__package__`` attribute from "
":pep:`366`. Once again, import itself is already setting this on all loaders"
" from :mod:`importlib` and import itself is setting the attribute post-load."
msgstr ""
"加载器现在还需要根据 :pep:`366` 设置 ``__package__`` 属性。 同样地，import 本身已经在所有来自 "
":mod:`importlib` 的加载器上设置了该属性并且 import 是在加载之后自行设置该属性。"

#: ../../whatsnew/3.3.rst:766
msgid ""
"``None`` is now inserted into :data:`sys.path_importer_cache` when no finder"
" can be found on :data:`sys.path_hooks`. Since :class:`!imp.NullImporter` is"
" not directly exposed on :data:`sys.path_hooks` it could no longer be relied"
" upon to always be available to use as a value representing no finder found."
msgstr ""
"现在当 :data:`sys.path_hooks` 上未找到查找器时将把 ``None`` 插入到 "
":data:`sys.path_importer_cache` 中。 由于 :class:`!imp.NullImporter` 不是直接暴露在 "
":data:`sys.path_hooks` 上因此该值不再能够作为表示未找到查找器的可靠依据。"

#: ../../whatsnew/3.3.rst:771
msgid ""
"All other changes relate to semantic changes which should be taken into "
"consideration when updating code for Python 3.3, and thus should be read "
"about in the `Porting Python code`_ section of this document."
msgstr ""
"有关语法变化的所有其他修改在为 Python 3.3 更新代码时都应当被纳入考虑，因此应当仔细阅读本文档的 `Porting Python code`_"
" 章节。"

#: ../../whatsnew/3.3.rst:775
msgid "(Implementation by Brett Cannon)"
msgstr "（由 Brett Cannon 编写的实现）"

#: ../../whatsnew/3.3.rst:779
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.3.rst:781
msgid "Some smaller changes made to the core Python language are:"
msgstr "对Python 语言核心进行的小改动："

#: ../../whatsnew/3.3.rst:783
msgid ""
"Added support for Unicode name aliases and named sequences. Both "
":func:`unicodedata.lookup` and ``'\\N{...}'`` now resolve name aliases, and "
":func:`unicodedata.lookup` resolves named sequences too."
msgstr ""
"增加了对 Unicode 别名和具名序列的支持。 现在 :func:`unicodedata.lookup` 和 ``'\\N{...}'`` "
"都能解析别名，而 :func:`unicodedata.lookup` 还能解析具名序列。"

#: ../../whatsnew/3.3.rst:787
msgid "(Contributed by Ezio Melotti in :issue:`12753`.)"
msgstr "（由 Ezio Melotti 在 :issue:`12753` 中贡献。）"

#: ../../whatsnew/3.3.rst:789
msgid "Unicode database updated to UCD version 6.1.0"
msgstr "Unicode 数据库更新至 UCD 版本 6.1.0"

#: ../../whatsnew/3.3.rst:791
msgid ""
"Equality comparisons on :func:`range` objects now return a result reflecting"
" the equality of the underlying sequences generated by those range objects. "
"(:issue:`13201`)"
msgstr ""
"现在 :func:`range` 对象的相等性比较将返回反映下层的由这些 range 对象生成的序列的相等性的结果。 (:issue:`13201`)"

#: ../../whatsnew/3.3.rst:795
msgid ""
"The ``count()``, ``find()``, ``rfind()``, ``index()`` and ``rindex()`` "
"methods of :class:`bytes` and :class:`bytearray` objects now accept an "
"integer between 0 and 255 as their first argument."
msgstr ""
"现在 :class:`bytes` 和 :class:`bytearray` 对象的 ``count()``, ``find()``, "
"``rfind()``, ``index()`` 和 ``rindex()`` 方法将接受一个 0 到 255 范围内的整数作为其第一个参数。"

#: ../../whatsnew/3.3.rst:799
msgid "(Contributed by Petri Lehtinen in :issue:`12170`.)"
msgstr "（由 Petri Lehtinen 在 :issue:`12170` 中贡献。）"

#: ../../whatsnew/3.3.rst:801
msgid ""
"The ``rjust()``, ``ljust()``, and ``center()`` methods of :class:`bytes` and"
" :class:`bytearray` now accept a :class:`bytearray` for the ``fill`` "
"argument.  (Contributed by Petri Lehtinen in :issue:`12380`.)"
msgstr ""
"现在 :class:`bytes` 和 :class:`bytearray` 的 ``rjust()``, ``ljust()`` 和 "
"``center()`` 方法将接受一个 :class:`bytearray` 作为 ``fill`` 参数。 （由 Petri Lehtinen 在 "
":issue:`12380` 中贡献。）"

#: ../../whatsnew/3.3.rst:805
msgid ""
"New methods have been added to :class:`list` and :class:`bytearray`: "
"``copy()`` and ``clear()`` (:issue:`10516`).  Consequently, "
":class:`~collections.abc.MutableSequence` now also defines a :meth:`!clear` "
"method (:issue:`11388`)."
msgstr ""

#: ../../whatsnew/3.3.rst:810
msgid "Raw bytes literals can now be written ``rb\"...\"`` as well as ``br\"...\"``."
msgstr "原始字节串字面值现在可以写成 ``rb\"...\"`` 也可以写成 ``br\"...\"``。"

#: ../../whatsnew/3.3.rst:812
msgid "(Contributed by Antoine Pitrou in :issue:`13748`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`13748` 中贡献。）"

#: ../../whatsnew/3.3.rst:814
msgid ""
":meth:`dict.setdefault` now does only one lookup for the given key, making "
"it atomic when used with built-in types."
msgstr "现在 :meth:`dict.setdefault` 对给定的键将只执行一次查找，这使其在配合内置类型使用时是原子化的。"

#: ../../whatsnew/3.3.rst:817
msgid "(Contributed by Filip Gruszczyński in :issue:`13521`.)"
msgstr "（由 Filip Gruszczyński 在 :issue:`13521` 中贡献。）"

#: ../../whatsnew/3.3.rst:819
msgid ""
"The error messages produced when a function call does not match the function"
" signature have been significantly improved."
msgstr "当函数调用与函数签名不匹配时产生的错误消息已获得大幅改进。"

#: ../../whatsnew/3.3.rst:822
msgid "(Contributed by Benjamin Peterson.)"
msgstr "（由 Benjamin Peterson 贡献。）"

#: ../../whatsnew/3.3.rst:826
msgid "A Finer-Grained Import Lock"
msgstr "更细粒度的导入锁"

#: ../../whatsnew/3.3.rst:828
msgid ""
"Previous versions of CPython have always relied on a global import lock. "
"This led to unexpected annoyances, such as deadlocks when importing a module"
" would trigger code execution in a different thread as a side-effect. Clumsy"
" workarounds were sometimes employed, such as the "
":c:func:`PyImport_ImportModuleNoBlock` C API function."
msgstr ""
"之前版本的 CPython 是始终依赖于全局导入锁的。 这会导致预料之外的困扰，比如当导入一个模块会触发代码在其他线程中执行作为附带影响导致的死锁。 "
"有时需要应用一些笨拙的绕过方式，比如 :c:func:`PyImport_ImportModuleNoBlock` C API 函数。"

#: ../../whatsnew/3.3.rst:834
msgid ""
"In Python 3.3, importing a module takes a per-module lock.  This correctly "
"serializes importation of a given module from multiple threads (preventing "
"the exposure of incompletely initialized modules), while eliminating the "
"aforementioned annoyances."
msgstr ""
"在 Python 3.3 中，导入一个模块会使用单独的模块级锁。 "
"这能正确地从多个线程序列化给定模块的导入操作（防止出现被不完整初始化的模块），同时消除之前提到的困扰。"

#: ../../whatsnew/3.3.rst:839
msgid "(Contributed by Antoine Pitrou in :issue:`9260`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`9260` 中贡献。）"

#: ../../whatsnew/3.3.rst:843
msgid "Builtin functions and types"
msgstr "内置函数和类型"

#: ../../whatsnew/3.3.rst:845
msgid ""
":func:`open` gets a new *opener* parameter: the underlying file descriptor "
"for the file object is then obtained by calling *opener* with (*file*, "
"*flags*). It can be used to use custom flags like :const:`os.O_CLOEXEC` for "
"example. The ``'x'`` mode was added: open for exclusive creation, failing if"
" the file already exists."
msgstr ""
":func:`open` 新增了 *opener* 形参：文件对象下层的文件描述符将随后通过调用 *opener* 并附带 (*file*, "
"*flags*) 来获取。 它可以被用来使用自定义旗标例如 :const:`os.O_CLOEXEC`。 增加了 ``'x'`` "
"模式：打开为独占创建，如果文件已存在则打开失败。"

#: ../../whatsnew/3.3.rst:850
msgid ""
":func:`print`: added the *flush* keyword argument. If the *flush* keyword "
"argument is true, the stream is forcibly flushed."
msgstr ":func:`print`: 增加了 *flush* 关键字参数。 如果 *flush* 关键字参数为真值，流会被强制刷新。"

#: ../../whatsnew/3.3.rst:852
msgid ""
":func:`hash`: hash randomization is enabled by default, see "
":meth:`object.__hash__` and :envvar:`PYTHONHASHSEED`."
msgstr ""
":func:`hash`: 默认将启用哈希随机化，参见 :meth:`object.__hash__` 和 "
":envvar:`PYTHONHASHSEED`。"

#: ../../whatsnew/3.3.rst:854
msgid ""
"The :class:`str` type gets a new :meth:`~str.casefold` method: return a "
"casefolded copy of the string, casefolded strings may be used for caseless "
"matching. For example, ``'ß'.casefold()`` returns ``'ss'``."
msgstr ""
":class:`str` 类型新增了一个 :meth:`~str.casefold` "
"方法：返回字符串的大小写折叠副本，大小写折叠形式的字符串可被用于不区分大小写的匹配。 例如，``'ß'.casefold()`` 将返回 "
"``'ss'``。"

#: ../../whatsnew/3.3.rst:857
msgid ""
"The sequence documentation has been substantially rewritten to better "
"explain the binary/text sequence distinction and to provide specific "
"documentation sections for the individual builtin sequence types "
"(:issue:`4966`)."
msgstr "序列的文档已被大幅重写以更好地解释二进制/序列的区别并为各种内置序列类型提供专属的文档章节 (:issue:`4966`)。"

#: ../../whatsnew/3.3.rst:864
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.3.rst:867
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.3.rst:869
msgid ""
"This new debug module :mod:`faulthandler` contains functions to dump Python "
"tracebacks explicitly, on a fault (a crash like a segmentation fault), after"
" a timeout, or on a user signal. Call :func:`faulthandler.enable` to install"
" fault handlers for the :const:`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, "
":const:`~signal.SIGABRT`, :const:`~signal.SIGBUS`, and "
":const:`~signal.SIGILL` signals. You can also enable them at startup by "
"setting the :envvar:`PYTHONFAULTHANDLER` environment variable or by using "
":option:`-X` ``faulthandler`` command line option."
msgstr ""

#: ../../whatsnew/3.3.rst:877
msgid "Example of a segmentation fault on Linux:"
msgstr "Linux 上的段错误示例:"

#: ../../whatsnew/3.3.rst:879
msgid ""
"$ python -q -X faulthandler\n"
">>> import ctypes\n"
">>> ctypes.string_at(0)\n"
"Fatal Python error: Segmentation fault\n"
"\n"
"Current thread 0x00007fb899f39700:\n"
"  File \"/home/python/cpython/Lib/ctypes/__init__.py\", line 486 in string_at\n"
"  File \"<stdin>\", line 1 in <module>\n"
"Segmentation fault"
msgstr ""
"$ python -q -X faulthandler\n"
">>> import ctypes\n"
">>> ctypes.string_at(0)\n"
"Fatal Python error: Segmentation fault\n"
"\n"
"Current thread 0x00007fb899f39700:\n"
"  File \"/home/python/cpython/Lib/ctypes/__init__.py\", line 486 in string_at\n"
"  File \"<stdin>\", line 1 in <module>\n"
"Segmentation fault"

#: ../../whatsnew/3.3.rst:893
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.3.rst:895
msgid ""
"The new :mod:`ipaddress` module provides tools for creating and manipulating"
" objects representing IPv4 and IPv6 addresses, networks and interfaces (i.e."
" an IP address associated with a specific IP subnet)."
msgstr ""
"新的 :mod:`ipaddress` 模块提供了用于创建和操作代表 IPv4 和 IPv6 地址、网络和接口（即关联到特定 IP 子网的 IP "
"地址）的工具。"

#: ../../whatsnew/3.3.rst:899
msgid "(Contributed by Google and Peter Moody in :pep:`3144`.)"
msgstr "（由 Google 和 Peter Moody 在 :issue:`3144` 中贡献。）"

#: ../../whatsnew/3.3.rst:902
msgid "lzma"
msgstr "lzma"

#: ../../whatsnew/3.3.rst:904
msgid ""
"The newly added :mod:`lzma` module provides data compression and "
"decompression using the LZMA algorithm, including support for the ``.xz`` "
"and ``.lzma`` file formats."
msgstr ""
"新增的 :mod:`lzma` 模块提供了使用 LZMA 算法的数据压缩和解压，包括对 ``.xz`` 和 ``.lzma`` 文件格式的支持。"

#: ../../whatsnew/3.3.rst:908
msgid "(Contributed by Nadeem Vawda and Per Øyvind Karlsen in :issue:`6715`.)"
msgstr "（由 Nadeem Vawda 和 Per Øyvind Karlsen 在 :issue:`6715` 中贡献。）"

#: ../../whatsnew/3.3.rst:912
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.3.rst:915
msgid "abc"
msgstr "abc"

#: ../../whatsnew/3.3.rst:917
msgid ""
"Improved support for abstract base classes containing descriptors composed "
"with abstract methods. The recommended approach to declaring abstract "
"descriptors is now to provide :attr:`!__isabstractmethod__` as a dynamically"
" updated property. The built-in descriptors have been updated accordingly."
msgstr ""

#: ../../whatsnew/3.3.rst:922 ../../whatsnew/3.3.rst:2247
msgid ""
":class:`abc.abstractproperty` has been deprecated, use :class:`property` "
"with :func:`abc.abstractmethod` instead."
msgstr ""
":class:`abc.abstractproperty` 已被弃用，改为 :class:`property` 配合 "
":func:`abc.abstractmethod` 使用。"

#: ../../whatsnew/3.3.rst:924 ../../whatsnew/3.3.rst:2249
msgid ""
":class:`abc.abstractclassmethod` has been deprecated, use "
":class:`classmethod` with :func:`abc.abstractmethod` instead."
msgstr ""
":class:`abc.abstractclassmethod` 已被弃用，改为 :class:`classmethod` 配合 "
":func:`abc.abstractmethod` 使用。"

#: ../../whatsnew/3.3.rst:926 ../../whatsnew/3.3.rst:2251
msgid ""
":class:`abc.abstractstaticmethod` has been deprecated, use "
":class:`staticmethod` with :func:`abc.abstractmethod` instead."
msgstr ""
":class:`abc.abstractstaticmethod` 已被弃用，改为 :class:`staticmethod` 配合 "
":func:`abc.abstractmethod` 使用。"

#: ../../whatsnew/3.3.rst:929
msgid "(Contributed by Darren Dale in :issue:`11610`.)"
msgstr "（由 Pablo Galindo 在 :issue:`11610` 中贡献。）"

#: ../../whatsnew/3.3.rst:931
msgid ""
":meth:`abc.ABCMeta.register` now returns the registered subclass, which "
"means it can now be used as a class decorator (:issue:`10868`)."
msgstr ""
"现在 :meth:`abc.ABCMeta.register` 将返回已注册的子类，这意味着它现在可被用作类装饰器 (:issue:`10868`)。"

#: ../../whatsnew/3.3.rst:936
msgid "array"
msgstr "array"

#: ../../whatsnew/3.3.rst:938
msgid ""
"The :mod:`array` module supports the :c:expr:`long long` type using ``q`` "
"and ``Q`` type codes."
msgstr ":mod:`array` 模块可使用 ``q`` 和 ``Q`` 类型码支持 :c:expr:`long long` 类型。"

#: ../../whatsnew/3.3.rst:941
msgid ""
"(Contributed by Oren Tirosh and Hirokazu Yamamoto in :issue:`1172711`.)"
msgstr "（由 Oren Tirosh 和 Hirokazu Yamamoto 在 :issue:`1172711` 中贡献。）"

#: ../../whatsnew/3.3.rst:945
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.3.rst:947
msgid ""
"ASCII-only Unicode strings are now accepted by the decoding functions of the"
" :mod:`base64` modern interface. For example, ``base64.b64decode('YWJj')`` "
"returns ``b'abc'``.  (Contributed by Catalin Iacob in :issue:`13641`.)"
msgstr ""
"现在 :mod:`base64` 现代接口的解码函数可接受仅包含 ASCII 字符的 Unicode 字符串。 "
"例如，``base64.b64decode('YWJj')`` 将返回 ``b'abc'``。 （由 Catalin Iacob 在 "
":issue:`13641` 中贡献。）"

#: ../../whatsnew/3.3.rst:953
msgid "binascii"
msgstr "binascii"

#: ../../whatsnew/3.3.rst:955
msgid ""
"In addition to the binary objects they normally accept, the ``a2b_`` "
"functions now all also accept ASCII-only strings as input.  (Contributed by "
"Antoine Pitrou in :issue:`13637`.)"
msgstr ""
"除了它们通常接受的二进制对象，``a2b_`` 现在还接受仅包含 ASCII 字符的字符串作为输入。 （由 Antoine Pitrou 在 "
":issue:`13637` 中贡献。）"

#: ../../whatsnew/3.3.rst:961
msgid "bz2"
msgstr "bz2"

#: ../../whatsnew/3.3.rst:963
msgid ""
"The :mod:`bz2` module has been rewritten from scratch. In the process, "
"several new features have been added:"
msgstr ":mod:`bz2` 模块已被重新编写。 在此过程中，添加了一些新的特征:"

#: ../../whatsnew/3.3.rst:966
msgid ""
"New :func:`bz2.open` function: open a bzip2-compressed file in binary or "
"text mode."
msgstr "新的 :func:`bz2.open` 函数：以二进制或文本模式打开 bzip2 压缩文件。"

#: ../../whatsnew/3.3.rst:969
msgid ""
":class:`bz2.BZ2File` can now read from and write to arbitrary file-like "
"objects, by means of its constructor's *fileobj* argument."
msgstr ":class:`bz2.BZ2File` 现在可以读写任意文件型对象，具体方式是通过其构造器的 *fileobj* 参数。"

#: ../../whatsnew/3.3.rst:972
msgid "(Contributed by Nadeem Vawda in :issue:`5863`.)"
msgstr "（由 Nadeem Vawda 在 :issue:`5863` 中贡献。）"

#: ../../whatsnew/3.3.rst:974
msgid ""
":class:`bz2.BZ2File` and :func:`bz2.decompress` can now decompress multi-"
"stream inputs (such as those produced by the :program:`pbzip2` tool). "
":class:`bz2.BZ2File` can now also be used to create this type of file, using"
" the ``'a'`` (append) mode."
msgstr ""
"现在 :class:`bz2.BZ2File` 和 :func:`bz2.decompress` 能解压缩多流输入（比如由 "
":program:`pbzip2` 工具所产生的输入）。 :class:`bz2.BZ2File` 现在还可被用来创建这种类型的文件，具体做法是使用 "
"``'a'`` (append) 模式。"

#: ../../whatsnew/3.3.rst:979
msgid "(Contributed by Nir Aides in :issue:`1625`.)"
msgstr "（由 Nir Aides 在 :issue:`1625` 中贡献。）"

#: ../../whatsnew/3.3.rst:981
msgid ""
":class:`bz2.BZ2File` now implements all of the :class:`io.BufferedIOBase` "
"API, except for the :meth:`!detach` and :meth:`!truncate` methods."
msgstr ""

#: ../../whatsnew/3.3.rst:986
msgid "codecs"
msgstr "编码器"

#: ../../whatsnew/3.3.rst:988
msgid ""
"The :mod:`~encodings.mbcs` codec has been rewritten to handle correctly "
"``replace`` and ``ignore`` error handlers on all Windows versions.  The "
":mod:`~encodings.mbcs` codec now supports all error handlers, instead of "
"only ``replace`` to encode and ``ignore`` to decode."
msgstr ""
":mod:`~encodings.mbcs` 编解码器被重写以能够在所有 Windows 版本上正确处理 ``replace`` 和 "
"``ignore`` 错误处理器。 :mod:`~encodings.mbcs` 编解码器现在支持所有错误处理器，而不是仅支持将 ``replace``"
" 用于编码并将 ``ignore`` 用于解码。"

#: ../../whatsnew/3.3.rst:993
msgid ""
"A new Windows-only codec has been added: ``cp65001`` (:issue:`13216`). It is"
" the Windows code page 65001 (Windows UTF-8, ``CP_UTF8``).  For example, it "
"is used by ``sys.stdout`` if the console output code page is set to cp65001 "
"(e.g., using ``chcp 65001`` command)."
msgstr ""
"新增了一个 Windows 专属的编解码器: ``cp65001`` (:issue:`13216`)。 即 Windows 代码页 65001 "
"(Windows UTF-8, ``CP_UTF8``)。 举例来说，如果控制台输出代码页被设为 cp65001（例如使用 ``chcp 65001``"
" 命令）则 ``sys.stdout`` 就会使用它。"

#: ../../whatsnew/3.3.rst:998
msgid ""
"Multibyte CJK decoders now resynchronize faster.  They only ignore the first"
" byte of an invalid byte sequence. For example, "
"``b'\\xff\\n'.decode('gb2312', 'replace')`` now returns a ``\\n`` after the "
"replacement character."
msgstr ""
"多字节 CJK 解码器现在能更快地进行再同步。 它们将只忽略非法字节序列的第一个字节。 例如，现在 "
"``b'\\xff\\n'.decode('gb2312', 'replace')`` 将在替换字符后返回一个 ``\\n``。"

#: ../../whatsnew/3.3.rst:1002
msgid "(:issue:`12016`)"
msgstr "(:issue:`12016`)"

#: ../../whatsnew/3.3.rst:1004
msgid ""
"Incremental CJK codec encoders are no longer reset at each call to their "
"encode() methods. For example::"
msgstr "增量式 CJK 编解码器的编码器在每次调用其 encode() 方法时将不再重置。 例如::"

#: ../../whatsnew/3.3.rst:1007
msgid ""
">>> import codecs\n"
">>> encoder = codecs.getincrementalencoder('hz')('strict')\n"
">>> b''.join(encoder.encode(x) for x in '\\u52ff\\u65bd\\u65bc\\u4eba\\u3002 Bye.')\n"
"b'~{NpJ)l6HK!#~} Bye.'"
msgstr ""
">>> import codecs\n"
">>> encoder = codecs.getincrementalencoder('hz')('strict')\n"
">>> b''.join(encoder.encode(x) for x in '\\u52ff\\u65bd\\u65bc\\u4eba\\u3002 Bye.')\n"
"b'~{NpJ)l6HK!#~} Bye.'"

#: ../../whatsnew/3.3.rst:1012
msgid ""
"This example gives ``b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'`` with older "
"Python versions."
msgstr "对于旧版 Python 此示例将给出 ``b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'``。"

#: ../../whatsnew/3.3.rst:1015
msgid "(:issue:`12100`)"
msgstr "(:issue:`12100`)"

#: ../../whatsnew/3.3.rst:1017
msgid "The ``unicode_internal`` codec has been deprecated."
msgstr "``unicode_internal`` 编解码器已被弃用。"

#: ../../whatsnew/3.3.rst:1021
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.3.rst:1023
msgid ""
"Addition of a new :class:`~collections.ChainMap` class to allow treating a "
"number of mappings as a single unit.  (Written by Raymond Hettinger for "
":issue:`11089`, made public in :issue:`11297`.)"
msgstr ""
"新增了一个 :class:`~collections.ChainMap` 类以允许将多个映射当作一个单元来处理。 （由 Raymond "
"Hettinger 针对 :issue:`11089` 编写，在 :issue:`11297` 中对外公开。）"

#: ../../whatsnew/3.3.rst:1027
msgid ""
"The abstract base classes have been moved in a new :mod:`collections.abc` "
"module, to better differentiate between the abstract and the concrete "
"collections classes.  Aliases for ABCs are still present in the "
":mod:`collections` module to preserve existing imports.  (:issue:`11085`)"
msgstr ""
"抽象基类已被移至新的 :mod:`collections.abc` 模块，以便更好地区分抽象和具体集合类。为了保留现有的导入，ABC 的别名仍然存在于 "
":mod:`collections` 模块中。(:issue:`11085`)"

#: ../../whatsnew/3.3.rst:1034
msgid ""
"The :class:`~collections.Counter` class now supports the unary ``+`` and "
"``-`` operators, as well as the in-place operators ``+=``, ``-=``, ``|=``, "
"and ``&=``.  (Contributed by Raymond Hettinger in :issue:`13121`.)"
msgstr ""
":class:`~collections.Counter` 类现在支持一元 ``+`` 和 ``-`` 运算符，以及就地运算符 "
"``+=``、``-=``、``|=`` 和 ``&=``。（由 Raymond Hettinger在 :issue:`13121` 中贡献。）"

#: ../../whatsnew/3.3.rst:1040
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.3.rst:1042
msgid ""
":class:`~contextlib.ExitStack` now provides a solid foundation for "
"programmatic manipulation of context managers and similar cleanup "
"functionality. Unlike the previous ``contextlib.nested`` API (which was "
"deprecated and removed), the new API is designed to work correctly "
"regardless of whether context managers acquire their resources in their "
"``__init__`` method (for example, file objects) or in their ``__enter__`` "
"method (for example, synchronisation objects from the :mod:`threading` "
"module)."
msgstr ""
"现在 :class:`~contextlib.ExitStack` 为上下文管理器的编程操纵和类似的清理提供了一个坚实的基础。 不同于之前的 "
"``contextlib.nested`` API (它已被弃用并移除)，这个新 API 被设计为无论上下文管理器获取其资源是在其 "
"``__init__`` 方法中 (例如文件对象) 还是在其 ``__enter__`` 方法中 (例如来自 :mod:`threading` "
"模块的同步化对象) 都能够正确工作。"

#: ../../whatsnew/3.3.rst:1051
msgid "(:issue:`13585`)"
msgstr "(:issue:`13585`)"

#: ../../whatsnew/3.3.rst:1055
msgid "crypt"
msgstr "crypt"

#: ../../whatsnew/3.3.rst:1057
msgid ""
"Addition of salt and modular crypt format (hashing method) and the "
":func:`!mksalt` function to the :mod:`!crypt` module."
msgstr "在 :mod:`!crypt` 模块中添加了盐和模块化加密格式（哈希方法）以及 :func:`!mksalt` 函数。"

#: ../../whatsnew/3.3.rst:1060
msgid "(:issue:`10924`)"
msgstr "(:issue:`10924`)"

#: ../../whatsnew/3.3.rst:1063
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.3.rst:1065
msgid ""
"If the :mod:`curses` module is linked to the ncursesw library, use Unicode "
"functions when Unicode strings or characters are passed (e.g. "
":c:func:`!waddwstr`), and bytes functions otherwise (e.g. "
":c:func:`!waddstr`)."
msgstr ""

#: ../../whatsnew/3.3.rst:1068
msgid ""
"Use the locale encoding instead of ``utf-8`` to encode Unicode strings."
msgstr "使用区域设置编码而不是 ``utf-8`` 来编码 Unicode 字符串。"

#: ../../whatsnew/3.3.rst:1069
msgid ""
":class:`curses.window` has a new :attr:`curses.window.encoding` attribute."
msgstr ":class:`curses.window` 添加了新的 :attr:`curses.window.encoding` 属性。"

#: ../../whatsnew/3.3.rst:1070
msgid ""
"The :class:`curses.window` class has a new :meth:`~curses.window.get_wch` "
"method to get a wide character"
msgstr ""
":class:`curses.window` 类有一个新的 :meth:`~curses.window.get_wch` 方法用来获取一个宽字符。"

#: ../../whatsnew/3.3.rst:1072
msgid ""
"The :mod:`curses` module has a new :meth:`~curses.unget_wch` function to "
"push a wide character so the next :meth:`~curses.window.get_wch` will return"
" it"
msgstr ""
":mod:`curses` 模块有一个新的 :meth:`~curses.unget_wch` 函数用来推入一个宽字符以便下一个 "
":meth:`~curses.window.get_wch` 将返回它。"

#: ../../whatsnew/3.3.rst:1076
msgid "(Contributed by Iñigo Serna in :issue:`6755`.)"
msgstr "（由 Iñigo Serna 在 :issue:`6755` 中贡献。）"

#: ../../whatsnew/3.3.rst:1079
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.3.rst:1081
msgid ""
"Equality comparisons between naive and aware :class:`~datetime.datetime` "
"instances now return :const:`False` instead of raising :exc:`TypeError` "
"(:issue:`15006`)."
msgstr ""
"简单型和感知型 :class:`~datetime.datetime` 实例之间的相等比较现在将返回 :const:`False` 而不是引发 "
":exc:`TypeError` (:issue:`15006`)。"

#: ../../whatsnew/3.3.rst:1084
msgid ""
"New :meth:`datetime.datetime.timestamp` method: Return POSIX timestamp "
"corresponding to the :class:`~datetime.datetime` instance."
msgstr ""
"新增 :meth:`datetime.datetime.timestamp` 方法：返回与 :class:`~datetime.datetime` "
"实例对应的 POSIX 时间戳。"

#: ../../whatsnew/3.3.rst:1086
msgid ""
"The :meth:`datetime.datetime.strftime` method supports formatting years "
"older than 1000."
msgstr ":meth:`datetime.datetime.strftime` 方法支持格式化早于 1000 年的年份。"

#: ../../whatsnew/3.3.rst:1088
msgid ""
"The :meth:`datetime.datetime.astimezone` method can now be called without "
"arguments to convert datetime instance to the system timezone."
msgstr ""
":meth:`datetime.datetime.astimezone` 方法现在可以不带参数调用，以将 datetime 实例转换为系统时区。"

#: ../../whatsnew/3.3.rst:1096
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.3.rst:1098
msgid ":issue:`7652` - integrate fast native decimal arithmetic."
msgstr ":issue:`7652` - 集成快速的原生十进制算术运算。"

#: ../../whatsnew/3.3.rst:1099
msgid "C-module and libmpdec written by Stefan Krah."
msgstr "C 模块和 libmpdec 由 Stefan Krah 编写。"

#: ../../whatsnew/3.3.rst:1101
msgid ""
"The new C version of the decimal module integrates the high speed libmpdec "
"library for arbitrary precision correctly rounded decimal floating-point "
"arithmetic. libmpdec conforms to IBM's General Decimal Arithmetic "
"Specification."
msgstr ""
"新的 C 版本 decimal 模块集成了高速的 libmpdec 库用于以任意精度对十进制浮点运算进行正确的舍入。libmpdec 遵循 IBM "
"的通用十进制运算规范。"

#: ../../whatsnew/3.3.rst:1105
msgid ""
"Performance gains range from 10x for database applications to 100x for "
"numerically intensive applications. These numbers are expected gains for "
"standard precisions used in decimal floating-point arithmetic. Since the "
"precision is user configurable, the exact figures may vary. For example, in "
"integer bignum arithmetic the differences can be significantly higher."
msgstr ""
"性能提升从数据库应用的10倍到数值密集型应用的100倍不等。这些数字是十进制浮点算术中标准精度预期提升的数值。由于精度是用户可配置的，确切数字可能会有所不同。例如，在整数大数算术中，差异可能会显著更高。"

#: ../../whatsnew/3.3.rst:1111
msgid ""
"The following table is meant as an illustration. Benchmarks are available at"
" https://www.bytereef.org/mpdecimal/quickstart.html."
msgstr ""
"下表只用于简单展示。 基准测试详情参见 https://www.bytereef.org/mpdecimal/quickstart.html。"

#: ../../whatsnew/3.3.rst:1115
msgid "decimal.py"
msgstr "decimal.py"

#: ../../whatsnew/3.3.rst:1115
msgid "_decimal"
msgstr "_decimal"

#: ../../whatsnew/3.3.rst:1115
msgid "speedup"
msgstr "加速"

#: ../../whatsnew/3.3.rst:1117
msgid "pi"
msgstr "pi"

#: ../../whatsnew/3.3.rst:1117
msgid "42.02s"
msgstr "42.02秒"

#: ../../whatsnew/3.3.rst:1117
msgid "0.345s"
msgstr "0.345秒"

#: ../../whatsnew/3.3.rst:1117
msgid "120x"
msgstr "120倍"

#: ../../whatsnew/3.3.rst:1119
msgid "telco"
msgstr "telco"

#: ../../whatsnew/3.3.rst:1119
msgid "172.19s"
msgstr "172.19秒"

#: ../../whatsnew/3.3.rst:1119
msgid "5.68s"
msgstr "5.68秒"

#: ../../whatsnew/3.3.rst:1119
msgid "30x"
msgstr "30倍"

#: ../../whatsnew/3.3.rst:1121
msgid "psycopg"
msgstr "psycopg"

#: ../../whatsnew/3.3.rst:1121
msgid "3.57s"
msgstr "3.57秒"

#: ../../whatsnew/3.3.rst:1121
msgid "0.29s"
msgstr "0.29秒"

#: ../../whatsnew/3.3.rst:1121
msgid "12x"
msgstr "12倍"

#: ../../whatsnew/3.3.rst:1127
msgid ""
"The :exc:`~decimal.FloatOperation` signal optionally enables stricter "
"semantics for mixing floats and Decimals."
msgstr ":exc:`~decimal.FloatOperation` 信号可选择启用针对混用 float 和 Decimal 时更严格的语义限制。"

#: ../../whatsnew/3.3.rst:1130
msgid ""
"If Python is compiled without threads, the C version automatically disables "
"the expensive thread local context machinery. In this case, the variable "
":const:`~decimal.HAVE_THREADS` is set to ``False``."
msgstr ""
"如果 Python 编译时不带线程，则 C 版本会自动禁用高资源开销的线程局部上下文机制。 在此情况下，变量 "
":const:`~decimal.HAVE_THREADS` 将被设为 ``False``。"

#: ../../whatsnew/3.3.rst:1137
msgid ""
"The C module has the following context limits, depending on the machine "
"architecture:"
msgstr "C模块上下文限制（如下表），具体取决于计算机体系结构："

#: ../../whatsnew/3.3.rst:1141
msgid "32-bit"
msgstr "32位"

#: ../../whatsnew/3.3.rst:1141
msgid "64-bit"
msgstr "64位"

#: ../../whatsnew/3.3.rst:1143
msgid ":const:`~decimal.MAX_PREC`"
msgstr ""

#: ../../whatsnew/3.3.rst:1143 ../../whatsnew/3.3.rst:1145
msgid "``425000000``"
msgstr "``425000000``"

#: ../../whatsnew/3.3.rst:1143 ../../whatsnew/3.3.rst:1145
msgid "``999999999999999999``"
msgstr "``999999999999999999``"

#: ../../whatsnew/3.3.rst:1145
msgid ":const:`~decimal.MAX_EMAX`"
msgstr ""

#: ../../whatsnew/3.3.rst:1147
msgid ":const:`~decimal.MIN_EMIN`"
msgstr ""

#: ../../whatsnew/3.3.rst:1147
msgid "``-425000000``"
msgstr "``-425000000``"

#: ../../whatsnew/3.3.rst:1147
msgid "``-999999999999999999``"
msgstr "``-999999999999999999``"

#: ../../whatsnew/3.3.rst:1150
msgid ""
"In the context templates (:const:`~decimal.DefaultContext`, "
":const:`~decimal.BasicContext` and :const:`~decimal.ExtendedContext`) the "
"magnitude of :attr:`~decimal.Context.Emax` and :attr:`~decimal.Context.Emin`"
" has changed to ``999999``."
msgstr ""
"在上下文模板 (:const:`~decimal.DefaultContext`, :const:`~decimal.BasicContext` 和 "
":const:`~decimal.ExtendedContext`) 中 :attr:`~decimal.Context.Emax` 和 "
":attr:`~decimal.Context.Emin` 的数值被修改为 ``999999``。"

#: ../../whatsnew/3.3.rst:1155
msgid ""
"The :class:`~decimal.Decimal` constructor in decimal.py does not observe the"
" context limits and converts values with arbitrary exponents or precision "
"exactly. Since the C version has internal limits, the following scheme is "
"used: If possible, values are converted exactly, otherwise "
":exc:`~decimal.InvalidOperation` is raised and the result is NaN. In the "
"latter case it is always possible to use "
":meth:`~decimal.Context.create_decimal` in order to obtain a rounded or "
"inexact value."
msgstr ""
"decimal.py中的 :class:`~decimal.Decimal` "
"构造函数不遵守上下文限制，并精确转换具有任意指数或精度的值。由于C版本有内部限制，采用以下方案：如果可能，值将精确转换，否则会引发 "
":exc:`~decimal.InvalidOperation` 异常，结果为NaN。在后一种情况下，总是可以使用 "
":meth:`~decimal.Context.create_decimal` 来获得一个四舍五入或不精确的值。"

#: ../../whatsnew/3.3.rst:1164
msgid ""
"The power function in decimal.py is always correctly rounded. In the C "
"version, it is defined in terms of the correctly rounded "
":meth:`~decimal.Decimal.exp` and :meth:`~decimal.Decimal.ln` functions, but "
"the final result is only \"almost always correctly rounded\"."
msgstr ""
"decimal.py 中的幂函数总是正确舍入的。 在 C 版本中，它是根据正确舍入的 :meth:`~decimal.Decimal.exp` 和 "
":meth:`~decimal.Decimal.ln` 函数定义的，但最终结果只是“几乎总是正确舍入”。"

#: ../../whatsnew/3.3.rst:1170
msgid ""
"In the C version, the context dictionary containing the signals is a "
":class:`~collections.abc.MutableMapping`.  For speed reasons, "
":attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps` always "
"refer to the same :class:`~collections.abc.MutableMapping` that the context "
"was initialized with. If a new signal dictionary is assigned, "
":attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps` are "
"updated with the new values, but they do not reference the RHS dictionary."
msgstr ""
"在 C 版本中，包含信号的上下文字典是一个 :class:`~collections.abc.MutableMapping`。 "
"出于速度原因，:attr:`~decimal.Context.flags` 和 :attr:`~decimal.Context.traps` "
"始终引用与上下文初始化时相同的 :class:`~collections.abc.MutableMapping`。 "
"如果分配了新的信号字典，:attr:`~decimal.Context.flags` 和 :attr:`~decimal.Context.traps` "
"会使用新值进行更新，但不引用右侧的字典。"

#: ../../whatsnew/3.3.rst:1180
msgid ""
"Pickling a :class:`~decimal.Context` produces a different output in order to"
" have a common interchange format for the Python and C versions."
msgstr ""
"对 :class:`~decimal.Context` 执行 pickle 操作将产生不同的输出以便 Python 和 C 版本能具有共同的交换格式。"

#: ../../whatsnew/3.3.rst:1184
msgid ""
"The order of arguments in the :class:`~decimal.Context` constructor has been"
" changed to match the order displayed by :func:`repr`."
msgstr ":class:`~decimal.Context` 构造器中的参数顺序已被修改以与 :func:`repr` 所显示的顺序相匹配。"

#: ../../whatsnew/3.3.rst:1188
msgid ""
"The ``watchexp`` parameter in the :meth:`~decimal.Decimal.quantize` method "
"is deprecated."
msgstr ":meth:`~decimal.Decimal.quantize` 方法的 ``watchexp`` 形参已被弃用。"

#: ../../whatsnew/3.3.rst:1195
msgid "email"
msgstr "email"

#: ../../whatsnew/3.3.rst:1198
msgid "Policy Framework"
msgstr "策略框架"

#: ../../whatsnew/3.3.rst:1200
msgid ""
"The email package now has a :mod:`~email.policy` framework.  A "
":class:`~email.policy.Policy` is an object with several methods and "
"properties that control how the email package behaves.  The primary policy "
"for Python 3.3 is the :class:`~email.policy.Compat32` policy, which provides"
" backward compatibility with the email package in Python 3.2.  A ``policy`` "
"can be specified when an email message is parsed by a :mod:`~email.parser`, "
"or when a :class:`~email.message.Message` object is created, or when an "
"email is serialized using a :mod:`~email.generator`.  Unless overridden, a "
"policy passed to a ``parser`` is inherited by all the ``Message`` object and"
" sub-objects created by the ``parser``.  By default a ``generator`` will use"
" the policy of the ``Message`` object it is serializing.  The default policy"
" is :data:`~email.policy.compat32`."
msgstr ""
"电子邮件包现在有一个 :mod:`~email.policy` 框架。:class:`~email.policy.Policy` "
"是一个具有多个方法和属性的对象，用于控制电子邮件包的行为。Python 3.3 的主要策略是 "
":class:`~email.policy.Compat32` 策略，它提供了与 Python 3.2 "
"中的电子邮件包的向后兼容性。可以在解析电子邮件消息时通过 :mod:`~email.parser` 指定 ``policy``，或在创建 "
":class:`~email.message.Message` 对象时指定，或在通过 :mod:`~email.generator` "
"序列化电子邮件时指定。除非被覆盖，否则传递给 ``parser`` 的策略将由该 ``parser`` 创建的所有 ``Message`` "
"对象和子对象继承。默认情况下，``generator`` 将使用其序列化的 ``Message`` 对象的策略。默认策略是 "
":data:`~email.policy.compat32`。"

#: ../../whatsnew/3.3.rst:1213
msgid "The minimum set of controls implemented by all ``policy`` objects are:"
msgstr "所有 ``policy`` 对象都要实现的最小化控制集合为："

#: ../../whatsnew/3.3.rst:1218
msgid "max_line_length"
msgstr "max_line_length"

#: ../../whatsnew/3.3.rst:1218
msgid ""
"The maximum length, excluding the linesep character(s), individual lines may"
" have when a ``Message`` is serialized.  Defaults to 78."
msgstr "当 ``Message`` 被序列化时，单个行的最大长度（不包括行分隔符字符）。默认为 78。"

#: ../../whatsnew/3.3.rst:1222
msgid "linesep"
msgstr "linesep"

#: ../../whatsnew/3.3.rst:1222
msgid ""
"The character used to separate individual lines when a ``Message`` is "
"serialized.  Defaults to ``\\n``."
msgstr "当 ``Message`` 被序列化时，用于分隔单个行的字符。默认为 ``\\n``。"

#: ../../whatsnew/3.3.rst:1225
msgid "cte_type"
msgstr "cte_type"

#: ../../whatsnew/3.3.rst:1225
msgid ""
"``7bit`` or ``8bit``.  ``8bit`` applies only to a ``Bytes`` ``generator``, "
"and means that non-ASCII may be used where allowed by the protocol (or where"
" it exists in the original input)."
msgstr ""
"``7bit`` 或 ``8bit``。``8bit`` 仅适用于 ``Bytes`` "
"``generator``，意味着在协议允许的情况下（或原始输入中存在时）可以使用非 ASCII 字符。"

#: ../../whatsnew/3.3.rst:1230
msgid "raise_on_defect"
msgstr "raise_on_defect"

#: ../../whatsnew/3.3.rst:1230
msgid ""
"Causes a ``parser`` to raise error when defects are encountered instead of "
"adding them to the ``Message`` object's ``defects`` list."
msgstr "导致一个 ``parser`` 在遇到缺陷时引发错误而不是将它们添加到 ``Message`` 对象的 ``defects`` 列表。"

#: ../../whatsnew/3.3.rst:1235
msgid ""
"A new policy instance, with new settings, is created using the "
":meth:`~email.policy.Policy.clone` method of policy objects.  ``clone`` "
"takes any of the above controls as keyword arguments.  Any control not "
"specified in the call retains its default value.  Thus you can create a "
"policy that uses ``\\r\\n`` linesep characters like this::"
msgstr ""
"使用策略对象的 :meth:`~email.policy.Policy.clone` 方法可以创建一个具有新设置的新策略实例。``clone`` "
"方法接受上述任何控制作为关键字参数。在调用中未指定的任何控制将保留其默认值。因此，您可以创建一个使用 ``\\r\\n`` "
"行分隔符字符的策略，如下所示："

#: ../../whatsnew/3.3.rst:1241
msgid "mypolicy = compat32.clone(linesep='\\r\\n')"
msgstr "mypolicy = compat32.clone(linesep='\\r\\n')"

#: ../../whatsnew/3.3.rst:1243
msgid ""
"Policies can be used to make the generation of messages in the format needed"
" by your application simpler.  Instead of having to remember to specify "
"``linesep='\\r\\n'`` in all the places you call a ``generator``, you can "
"specify it once, when you set the policy used by the ``parser`` or the "
"``Message``, whichever your program uses to create ``Message`` objects.  On "
"the other hand, if you need to generate messages in multiple forms, you can "
"still specify the parameters in the appropriate ``generator`` call.  Or you "
"can have custom policy instances for your different cases, and pass those in"
" when you create the ``generator``."
msgstr ""
"策略可用于简化生成符合应用程序所需格式的消息的过程。 您不必在所有调用 ``生成器`` 的地方都记住指定 "
"``linesep='\\r\\n'``，而可以在设置 ``解析器`` 或 ``消息`` 使用的策略时一次性指定，无论您的程序使用哪一个来创建 "
"``消息`` 对象。 另一方面，如果需要生成多种格式的消息，您仍然可以在相应的 ``生成器`` 调用中指定参数。 "
"或者，您可以为不同情况创建自定义策略实例，并在创建 ``生成器`` 时传递这些实例。"

#: ../../whatsnew/3.3.rst:1255
msgid "Provisional Policy with New Header API"
msgstr "带有新头部API的暂行策略"

#: ../../whatsnew/3.3.rst:1257
msgid ""
"While the policy framework is worthwhile all by itself, the main motivation "
"for introducing it is to allow the creation of new policies that implement "
"new features for the email package in a way that maintains backward "
"compatibility for those who do not use the new policies.  Because the new "
"policies introduce a new API, we are releasing them in Python 3.3 as a "
":term:`provisional policy <provisional package>`.  Backwards incompatible "
"changes (up to and including removal of the code) may occur if deemed "
"necessary by the core developers."
msgstr ""
"尽管策略框架本身很有价值，但引入它的主要动机是允许创建新策略，这些策略以保持向后兼容性的方式为电子邮件包实现新功能，适用于那些不使用新策略的用户。 "
"由于新策略引入了新的 API，我们在 Python 3.3 中将其作为 :term:`暂定策略 <provisional package>` 发布。 "
"如果核心开发人员认为有必要，可能会发生向后不兼容的更改（包括代码的移除）。"

#: ../../whatsnew/3.3.rst:1265
msgid ""
"The new policies are instances of :class:`~email.policy.EmailPolicy`, and "
"add the following additional controls:"
msgstr "新策略是 :class:`~email.policy.EmailPolicy` 的实例，并添加了以下附加控制："

#: ../../whatsnew/3.3.rst:1271
msgid "refold_source"
msgstr "refold_source"

#: ../../whatsnew/3.3.rst:1271
msgid ""
"Controls whether or not headers parsed by a :mod:`~email.parser` are "
"refolded by the :mod:`~email.generator`.  It can be ``none``, ``long``, or "
"``all``.  The default is ``long``, which means that source headers with a "
"line longer than ``max_line_length`` get refolded.  ``none`` means no line "
"get refolded, and ``all`` means that all lines get refolded."
msgstr ""
"控制是否由 :mod:`~email.parser` 解析的头部由 :mod:`~email.generator` 重新折叠。 它可以设置为 "
"``none``、``long`` 或 ``all``。 默认值为 ``long``，意味着源头部中长度超过 ``max_line_length`` "
"的行将被重新折叠。 ``none`` 表示没有行被重新折叠，``all`` 表示所有行都被重新折叠。"

#: ../../whatsnew/3.3.rst:1280
msgid "header_factory"
msgstr "header_factory"

#: ../../whatsnew/3.3.rst:1280
msgid ""
"A callable that take a ``name`` and ``value`` and produces a custom header "
"object."
msgstr "一个可调用对象，它接受一个``name``和``value``，并生成一个自定义的头部对象。"

#: ../../whatsnew/3.3.rst:1284
msgid ""
"The ``header_factory`` is the key to the new features provided by the new "
"policies.  When one of the new policies is used, any header retrieved from a"
" ``Message`` object is an object produced by the ``header_factory``, and any"
" time you set a header on a ``Message`` it becomes an object produced by "
"``header_factory``.  All such header objects have a ``name`` attribute equal"
" to the header name.  Address and Date headers have additional attributes "
"that give you access to the parsed data of the header.  This means you can "
"now do things like this::"
msgstr ""
"``header_factory`` 是新策略提供新功能的关键。当使用其中一个新策略时，从 ``Message`` 对象检索到的任何头部都是一个由 "
"``header_factory`` 产生的对象，并且每次在 ``Message`` 上设置头部时，它都会变成一个由 "
"``header_factory`` 产生的对象。所有这些头部对象都有一个等于头部名称的 ``name`` "
"属性。地址和日期头部有额外的属性，可以让你访问头部的解析数据。这意味着你现在可以做一些类似以下的事情："

#: ../../whatsnew/3.3.rst:1293
msgid ""
">>> m = Message(policy=SMTP)\n"
">>> m['To'] = 'Éric <foo@example.com>'\n"
">>> m['to']\n"
"'Éric <foo@example.com>'\n"
">>> m['to'].addresses\n"
"(Address(display_name='Éric', username='foo', domain='example.com'),)\n"
">>> m['to'].addresses[0].username\n"
"'foo'\n"
">>> m['to'].addresses[0].display_name\n"
"'Éric'\n"
">>> m['Date'] = email.utils.localtime()\n"
">>> m['Date'].datetime\n"
"datetime.datetime(2012, 5, 25, 21, 39, 24, 465484, tzinfo=datetime.timezone(datetime.timedelta(-1, 72000), 'EDT'))\n"
">>> m['Date']\n"
"'Fri, 25 May 2012 21:44:27 -0400'\n"
">>> print(m)\n"
"To: =?utf-8?q?=C3=89ric?= <foo@example.com>\n"
"Date: Fri, 25 May 2012 21:44:27 -0400"
msgstr ""
">>> m = Message(policy=SMTP)\n"
">>> m['To'] = 'Éric <foo@example.com>\n"
">>> m['to']\n"
"'Éric <foo@example.com>\n"
">>> m['to'].addresses\n"
"(Address(display_name='Éric', username='foo', domain='example.com'),)\n"
">>> m['to'].addresses[0].username\n"
"'foo'\n"
">>> m['to'].addresses[0].display_name\n"
"'Éric'\n"
">>> m['Date'] = email.utils.localtime()\n"
">>> m['Date'].datetime\n"
"datetime.datetime(2012, 5, 25, 21, 39, 24, 465484, tzinfo=datetime.timezone(datetime.timedelta(-1, 72000), 'EDT'))\n"
">>> m['Date']\n"
"'Fri, 25 May 2012 21:44:27 -0400'\n"
">>> print(m)\n"
"To: =?utf-8?q?=C3=89ric?= <foo@example.com>\n"
"Date: Fri, 25 May 2012 21:44:27 -0400"

#: ../../whatsnew/3.3.rst:1312
msgid ""
"You will note that the unicode display name is automatically encoded as "
"``utf-8`` when the message is serialized, but that when the header is "
"accessed directly, you get the unicode version.  This eliminates any need to"
" deal with the :mod:`email.header` :meth:`~email.header.decode_header` or "
":meth:`~email.header.make_header` functions."
msgstr ""
"你会注意到，当消息被序列化时，unicode 显示名称会自动编码为 ``utf-8``，但当直接访问头部时，你会得到 unicode 版本。这消除了处理"
" :mod:`email.header` 的 :meth:`~email.header.decode_header` 或 "
":meth:`~email.header.make_header` 函数的任何需要。"

#: ../../whatsnew/3.3.rst:1318
msgid "You can also create addresses from parts::"
msgstr "你也可以从部分创建地址："

#: ../../whatsnew/3.3.rst:1320
msgid ""
">>> m['cc'] = [Group('pals', [Address('Bob', 'bob', 'example.com'),\n"
"...                           Address('Sally', 'sally', 'example.com')]),\n"
"...            Address('Bonzo', addr_spec='bonz@laugh.com')]\n"
">>> print(m)\n"
"To: =?utf-8?q?=C3=89ric?= <foo@example.com>\n"
"Date: Fri, 25 May 2012 21:44:27 -0400\n"
"cc: pals: Bob <bob@example.com>, Sally <sally@example.com>;, Bonzo <bonz@laugh.com>"
msgstr ""
">>> m['cc'] = [Group('pals', [Address('Bob', 'bob', 'example.com'),\n"
"...                           Address('Sally', 'sally', 'example.com')]),\n"
"...            Address('Bonzo', addr_spec='bonz@laugh.com')]\n"
">>> print(m)\n"
"To: =?utf-8?q?=C3=89ric?= <foo@example.com>\n"
"Date: Fri, 25 May 2012 21:44:27 -0400\n"
"cc: pals: Bob <bob@example.com>, Sally <sally@example.com>;, Bonzo <bonz@laugh.com>"

#: ../../whatsnew/3.3.rst:1328
msgid "Decoding to unicode is done automatically::"
msgstr "自动进行解码到 unicode："

#: ../../whatsnew/3.3.rst:1330
msgid ""
">>> m2 = message_from_string(str(m))\n"
">>> m2['to']\n"
"'Éric <foo@example.com>'"
msgstr ""
">>> m2 = message_from_string(str(m))\n"
">>> m2['to']\n"
"'Éric <foo@example.com>'"

#: ../../whatsnew/3.3.rst:1334
msgid ""
"When you parse a message, you can use the ``addresses`` and ``groups`` "
"attributes of the header objects to access the groups and individual "
"addresses::"
msgstr "当您解析消息时，可以使用头部对象的“addresses”和“groups”属性来访问组和单个地址::"

#: ../../whatsnew/3.3.rst:1338
msgid ""
">>> m2['cc'].addresses\n"
"(Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com'), Address(display_name='Bonzo', username='bonz', domain='laugh.com'))\n"
">>> m2['cc'].groups\n"
"(Group(display_name='pals', addresses=(Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com')), Group(display_name=None, addresses=(Address(display_name='Bonzo', username='bonz', domain='laugh.com'),))"
msgstr ""
">>> m2['cc'].addresses\n"
"(Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com'), Address(display_name='Bonzo', username='bonz', domain='laugh.com'))\n"
">>> m2['cc'].groups\n"
"(Group(display_name='pals', addresses=(Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com')), Group(display_name=None, addresses=(Address(display_name='Bonzo', username='bonz', domain='laugh.com'),)))"

#: ../../whatsnew/3.3.rst:1343
msgid ""
"In summary, if you use one of the new policies, header manipulation works "
"the way it ought to:  your application works with unicode strings, and the "
"email package transparently encodes and decodes the unicode to and from the "
"RFC standard Content Transfer Encodings."
msgstr ""
"总结来说，如果您使用新的策略之一，头部操作将按预期工作：您的应用程序使用unicode字符串，而email包透明地将unicode编码和解码为RFC标准内容传输编码。"

#: ../../whatsnew/3.3.rst:1349
msgid "Other API Changes"
msgstr "其他API更改"

#: ../../whatsnew/3.3.rst:1351
msgid ""
"New :class:`~email.parser.BytesHeaderParser`, added to the "
":mod:`~email.parser` module to complement "
":class:`~email.parser.HeaderParser` and complete the Bytes API."
msgstr ""
"新增 :class:`~email.parser.BytesHeaderParser`，添加到 :mod:`~email.parser` 模块中，以补充"
" :class:`~email.parser.HeaderParser` 并完善Bytes API。"

#: ../../whatsnew/3.3.rst:1355
msgid "New utility functions:"
msgstr "新实用函数："

#: ../../whatsnew/3.3.rst:1357
msgid ""
":func:`~email.utils.format_datetime`: given a :class:`~datetime.datetime`, "
"produce a string formatted for use in an email header."
msgstr ""
":func:`~email.utils.format_datetime`：给定一个 "
":class:`~datetime.datetime`，生成一个格式化的字符串，用于电子邮件头部。"

#: ../../whatsnew/3.3.rst:1360
msgid ""
":func:`~email.utils.parsedate_to_datetime`: given a date string from an "
"email header, convert it into an aware :class:`~datetime.datetime`, or a "
"naive :class:`~datetime.datetime` if the offset is ``-0000``."
msgstr ""
":func:`~email.utils.parsedate_to_datetime`：给定一个来自电子邮件头部的日期字符串，将其转换为带时区的 "
":class:`~datetime.datetime`，如果偏移量为“-0000”，则转换为不带时区的 "
":class:`~datetime.datetime`。"

#: ../../whatsnew/3.3.rst:1364
msgid ""
":func:`~email.utils.localtime`: With no argument, returns the current local "
"time as an aware :class:`~datetime.datetime` using the local "
":class:`~datetime.timezone`.  Given an aware :class:`~datetime.datetime`, "
"converts it into an aware :class:`~datetime.datetime` using the local "
":class:`~datetime.timezone`."
msgstr ""
":func:`~email.utils.localtime`：无参数时，返回当前本地时间作为一个带时区的 "
":class:`~datetime.datetime`，使用本地 :class:`~datetime.timezone`。给定一个带时区的 "
":class:`~datetime.datetime`，将其转换为使用本地 :class:`~datetime.timezone` 的带时区的 "
":class:`~datetime.datetime`。"

#: ../../whatsnew/3.3.rst:1372
msgid "ftplib"
msgstr "ftplib"

#: ../../whatsnew/3.3.rst:1374
msgid ""
":class:`ftplib.FTP` now accepts a ``source_address`` keyword argument to "
"specify the ``(host, port)`` to use as the source address in the bind call "
"when creating the outgoing socket.  (Contributed by Giampaolo Rodolà in "
":issue:`8594`.)"
msgstr ""
"现在 :class:`ftplib.FTP` 接受一个 ``source_address`` 关键字参数用于在创建外发套接字时指定 ``(host, "
"port)`` 作为绑定调用中的源地址。 （由 Giampaolo Rodolà 在 :issue:`8594` 中贡献。）"

#: ../../whatsnew/3.3.rst:1379
msgid ""
"The :class:`~ftplib.FTP_TLS` class now provides a new "
":func:`~ftplib.FTP_TLS.ccc` function to revert control channel back to "
"plaintext.  This can be useful to take advantage of firewalls that know how "
"to handle NAT with non-secure FTP without opening fixed ports.  (Contributed"
" by Giampaolo Rodolà in :issue:`12139`.)"
msgstr ""
":class:`~ftplib.FTP_TLS` 类现在提供了一个新的 :func:`~ftplib.FTP_TLS.ccc` "
"函数，用于将控制通道恢复为明文。这对于利用知道如何处理非安全 FTP 的 NAT 防火墙而无需打开固定端口非常有用。（由 Giampaolo "
"Rodolà 在 :issue:`12139` 中贡献。）"

#: ../../whatsnew/3.3.rst:1385
msgid ""
"Added :meth:`ftplib.FTP.mlsd` method which provides a parsable directory "
"listing format and deprecates :meth:`ftplib.FTP.nlst` and "
":meth:`ftplib.FTP.dir`.  (Contributed by Giampaolo Rodolà in "
":issue:`11072`.)"
msgstr ""
"添加了 :meth:`ftplib.FTP.mlsd` 方法，该方法提供了一种可解析的目录列表格式，并弃用了 "
":meth:`ftplib.FTP.nlst` 和 :meth:`ftplib.FTP.dir` 方法。（由 Giampaolo Rodolà 在 "
":issue:`11072` 中贡献。）"

#: ../../whatsnew/3.3.rst:1391
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.3.rst:1393
msgid ""
"The :func:`functools.lru_cache` decorator now accepts a ``typed`` keyword "
"argument (that defaults to ``False`` to ensure that it caches values of "
"different types that compare equal in separate cache slots.  (Contributed by"
" Raymond Hettinger in :issue:`13227`.)"
msgstr ""
":func:`functools.lru_cache` 装饰器现在接受一个 ``typed`` 关键字参数（默认为 "
"``False``），以确保将比较相等的不同类型的值缓存在单独的缓存槽中。（由 Raymond Hettinger 在 :issue:`13227` "
"中贡献。）"

#: ../../whatsnew/3.3.rst:1400
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.3.rst:1402
msgid ""
"It is now possible to register callbacks invoked by the garbage collector "
"before and after collection using the new :data:`~gc.callbacks` list."
msgstr "现在可以通过新的 :data:`~gc.callbacks` 列表注册垃圾收集器在收集前后调用的回调函数。"

#: ../../whatsnew/3.3.rst:1407
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.3.rst:1409
msgid ""
"A new :func:`~hmac.compare_digest` function has been added to prevent side "
"channel attacks on digests through timing analysis.  (Contributed by Nick "
"Coghlan and Christian Heimes in :issue:`15061`.)"
msgstr ""
"添加了新的 :func:`~hmac.compare_digest` 函数，以防止通过时间分析对摘要进行侧信道攻击。（由 Nick Coghlan 和 "
"Christian Heimes 在 :issue:`15061` 中贡献。）"

#: ../../whatsnew/3.3.rst:1415
msgid "http"
msgstr "http"

#: ../../whatsnew/3.3.rst:1417
msgid ""
":class:`http.server.BaseHTTPRequestHandler` now buffers the headers and "
"writes them all at once when "
":meth:`~http.server.BaseHTTPRequestHandler.end_headers` is called.  A new "
"method :meth:`~http.server.BaseHTTPRequestHandler.flush_headers` can be used"
" to directly manage when the accumulated headers are sent. (Contributed by "
"Andrew Schaaf in :issue:`3709`.)"
msgstr ""
":class:`http.server.BaseHTTPRequestHandler` 现在缓冲头部信息，并在调用 "
":meth:`~http.server.BaseHTTPRequestHandler.end_headers` 时一次性写入所有头部信息。新的方法 "
":meth:`~http.server.BaseHTTPRequestHandler.flush_headers` "
"可以用于直接管理累积头部信息的发送时间。（由 Andrew Schaaf 在 :issue:`3709` 中贡献。）"

#: ../../whatsnew/3.3.rst:1423
msgid ""
":class:`http.server` now produces valid ``HTML 4.01 strict`` output. "
"(Contributed by Ezio Melotti in :issue:`13295`.)"
msgstr ""
":class:`http.server` 现在生成有效的 ``HTML 4.01 strict`` 输出。（由 Ezio Melotti 在 "
":issue:`13295` 中贡献。）"

#: ../../whatsnew/3.3.rst:1426
msgid ""
":class:`http.client.HTTPResponse` now has a "
":meth:`~http.client.HTTPResponse.readinto` method, which means it can be "
"used as an :class:`io.RawIOBase` class.  (Contributed by John Kuhn in "
":issue:`13464`.)"
msgstr ""
":class:`http.client.HTTPResponse` 现在有一个 "
":meth:`~http.client.HTTPResponse.readinto` 方法，这意味着它可以作为 "
":class:`io.RawIOBase` 类使用。（由 John Kuhn 在 :issue:`13464` 中贡献。）"

#: ../../whatsnew/3.3.rst:1433
msgid "html"
msgstr "html"

#: ../../whatsnew/3.3.rst:1435
msgid ""
":class:`html.parser.HTMLParser` is now able to parse broken markup without "
"raising errors, therefore the *strict* argument of the constructor and the "
":exc:`!HTMLParseError` exception are now deprecated. The ability to parse "
"broken markup is the result of a number of bug fixes that are also available"
" on the latest bug fix releases of Python 2.7/3.2. (Contributed by Ezio "
"Melotti in :issue:`15114`, and :issue:`14538`, :issue:`13993`, "
":issue:`13960`, :issue:`13358`, :issue:`1745761`, :issue:`755670`, "
":issue:`13357`, :issue:`12629`, :issue:`1200313`, :issue:`670664`, "
":issue:`13273`, :issue:`12888`, :issue:`7311`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1445
msgid ""
"A new :data:`~html.entities.html5` dictionary that maps HTML5 named "
"character references to the equivalent Unicode character(s) (e.g. "
"``html5['gt;'] == '>'``) has been added to the :mod:`html.entities` module."
"  The dictionary is now also used by :class:`~html.parser.HTMLParser`.  "
"(Contributed by Ezio Melotti in :issue:`11113` and :issue:`15156`.)"
msgstr ""
"新增了一个 :data:`~html.entities.html5` 字典，该字典将 HTML5 命名字符引用映射到等效的 Unicode 字符（例如 "
"``html5['gt;'] == '>'``），已添加到 :mod:`html.entities` 模块中。该字典现在也被 "
":class:`~html.parser.HTMLParser` 使用。（由 Ezio Melotti 贡献，相关 "
"issue：:issue:`11113` 和 :issue:`15156`。）"

#: ../../whatsnew/3.3.rst:1453
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.3.rst:1455
msgid ""
"The :class:`~imaplib.IMAP4_SSL` constructor now accepts an SSLContext "
"parameter to control parameters of the secure channel."
msgstr ":class:`~imaplib.IMAP4_SSL` 构造函数现在接受一个 SSLContext 参数，用于控制安全通道的参数。"

#: ../../whatsnew/3.3.rst:1458
msgid "(Contributed by Sijin Joseph in :issue:`8808`.)"
msgstr "（由 Sijin Joseph 在 :issue:`8808` 中贡献。）"

#: ../../whatsnew/3.3.rst:1462
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.3.rst:1464
msgid ""
"A new :func:`~inspect.getclosurevars` function has been added. This function"
" reports the current binding of all names referenced from the function body "
"and where those names were resolved, making it easier to verify correct "
"internal state when testing code that relies on stateful closures."
msgstr ""
"新增了一个 :func:`~inspect.getclosurevars` "
"函数。此函数报告从函数体中引用的所有名称的当前绑定以及这些名称的解析位置，使得在测试依赖于有状态闭包的代码时，更容易验证正确的内部状态。"

#: ../../whatsnew/3.3.rst:1469
msgid "(Contributed by Meador Inge and Nick Coghlan in :issue:`13062`.)"
msgstr "（由  Meador Inge 和 Nick Coghlan 在 :issue:`13062` 中贡献。）"

#: ../../whatsnew/3.3.rst:1471
msgid ""
"A new :func:`~inspect.getgeneratorlocals` function has been added. This "
"function reports the current binding of local variables in the generator's "
"stack frame, making it easier to verify correct internal state when testing "
"generators."
msgstr ""
"新增了一个 :func:`~inspect.getgeneratorlocals` "
"函数。此函数报告生成器堆栈帧中局部变量的当前绑定，使得在测试生成器时，更容易验证正确的内部状态。"

#: ../../whatsnew/3.3.rst:1476
msgid "(Contributed by Meador Inge in :issue:`15153`.)"
msgstr "（由 Meador Inge 在 :issue:`15153` 中贡献。）"

#: ../../whatsnew/3.3.rst:1479
msgid "io"
msgstr "io"

#: ../../whatsnew/3.3.rst:1481
msgid ""
"The :func:`~io.open` function has a new ``'x'`` mode that can be used to "
"exclusively create a new file, and raise a :exc:`FileExistsError` if the "
"file already exists. It is based on the C11 'x' mode to fopen()."
msgstr ""
":func:`~io.open` 函数新增了一个 ``'x'`` 模式，可用于独占地创建新文件，如果文件已存在，则引发 "
":exc:`FileExistsError`。它基于 C11 中 fopen() 的 'x' 模式。"

#: ../../whatsnew/3.3.rst:1485
msgid "(Contributed by David Townshend in :issue:`12760`.)"
msgstr "（由 David Townshend 在 :issue:`12760` 中贡献。）"

#: ../../whatsnew/3.3.rst:1487
msgid ""
"The constructor of the :class:`~io.TextIOWrapper` class has a new "
"*write_through* optional argument. If *write_through* is ``True``, calls to "
":meth:`!write` are guaranteed not to be buffered: any data written on the "
":class:`~io.TextIOWrapper` object is immediately handled to its underlying "
"binary buffer."
msgstr ""

#: ../../whatsnew/3.3.rst:1495
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.3.rst:1497
msgid ""
":func:`~itertools.accumulate` now takes an optional ``func`` argument for "
"providing a user-supplied binary function."
msgstr ":func:`~itertools.accumulate` 现在接受一个可选的 ``func`` 参数，用于提供用户定义的二元函数。"

#: ../../whatsnew/3.3.rst:1502
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.3.rst:1504
msgid ""
"The :func:`~logging.basicConfig` function now supports an optional "
"``handlers`` argument taking an iterable of handlers to be added to the root"
" logger."
msgstr ""
":func:`~logging.basicConfig` 函数现在支持一个可选的 ``handlers`` "
"参数，该参数接受一个可迭代的处理器列表，用于添加到根记录器。"

#: ../../whatsnew/3.3.rst:1507
msgid ""
"A class level attribute :attr:`!append_nul` has been added to "
":class:`~logging.handlers.SysLogHandler` to allow control of the appending "
"of the ``NUL`` (``\\000``) byte to syslog records, since for some daemons it"
" is required while for others it is passed through to the log."
msgstr ""

#: ../../whatsnew/3.3.rst:1515
msgid "math"
msgstr "math"

#: ../../whatsnew/3.3.rst:1517
msgid ""
"The :mod:`math` module has a new function, :func:`~math.log2`,  which "
"returns the base-2 logarithm of *x*."
msgstr ":mod:`math` 模块新增了一个函数 :func:`~math.log2`，它返回 *x* 的以 2 为底的对数。"

#: ../../whatsnew/3.3.rst:1520
msgid "(Written by Mark Dickinson in :issue:`11888`.)"
msgstr "（由 Mark Dickinson 在 :issue:`11888` 中编写。）"

#: ../../whatsnew/3.3.rst:1524
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.3.rst:1526
msgid ""
"The :meth:`~mmap.mmap.read` method is now more compatible with other file-"
"like objects: if the argument is omitted or specified as ``None``, it "
"returns the bytes from the current file position to the end of the mapping."
"  (Contributed by Petri Lehtinen in :issue:`12021`.)"
msgstr ""
"现在 :meth:`~mmap.mmap.read` 方法能更好地兼容其他文件型对象：如果参数被省略或指定为 "
"``None``，它将返回从当前文件位置到映射对象末尾的字节数据。 （由 Petri Lehtinen 在 :issue:`12021` 中贡献。）"

#: ../../whatsnew/3.3.rst:1533
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.3.rst:1535
msgid ""
"The new :func:`multiprocessing.connection.wait` function allows polling "
"multiple objects (such as connections, sockets and pipes) with a timeout. "
"(Contributed by Richard Oudkerk in :issue:`12328`.)"
msgstr ""
"新增的 :func:`multiprocessing.connection.wait` 函数允许附带超时限制轮询多个对象（如连接、套接字和管道）。 （由"
" Richard Oudkerk 在 :issue:`12328` 中贡献。）"

#: ../../whatsnew/3.3.rst:1539
msgid ""
":class:`multiprocessing.connection.Connection` objects can now be "
"transferred over multiprocessing connections. (Contributed by Richard "
"Oudkerk in :issue:`4892`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1543
msgid ""
":class:`multiprocessing.Process` now accepts a ``daemon`` keyword argument "
"to override the default behavior of inheriting the ``daemon`` flag from the "
"parent process (:issue:`6064`)."
msgstr ""
"现在 :class:`multiprocessing.Process` 可接受 ``daemon`` 关键字参数来覆盖继承来自父进程的 "
"``daemon`` 旗标的默认行为 (:issue:`6064`)。"

#: ../../whatsnew/3.3.rst:1547
msgid ""
"New attribute :data:`multiprocessing.Process.sentinel` allows a program to "
"wait on multiple :class:`~multiprocessing.Process` objects at one time using"
" the appropriate OS primitives (for example, :mod:`select` on posix "
"systems)."
msgstr ""
"新增的属性 :data:`multiprocessing.Process.sentinel` 允许程序使用适当的 OS 原语来同时等待多个 "
":class:`~multiprocessing.Process` 对象 (例如，在 posix 系统上是使用 :mod:`select` )。"

#: ../../whatsnew/3.3.rst:1552
msgid ""
"New methods :meth:`multiprocessing.pool.Pool.starmap` and "
":meth:`~multiprocessing.pool.Pool.starmap_async` provide "
":func:`itertools.starmap` equivalents to the existing "
":meth:`multiprocessing.pool.Pool.map` and "
":meth:`~multiprocessing.pool.Pool.map_async` functions.  (Contributed by "
"Hynek Schlawack in :issue:`12708`.)"
msgstr ""
"新增的方法 :meth:`multiprocessing.pool.Pool.starmap` 和 "
":meth:`~multiprocessing.pool.Pool.starmap_async` 提供了针对现有 "
":meth:`multiprocessing.pool.Pool.map` 和 "
":meth:`~multiprocessing.pool.Pool.map_async` 函数的 :func:`itertools.starmap` "
"对应物。 （由 Hynek Schlawack 在 :issue:`12708` 中贡献。）"

#: ../../whatsnew/3.3.rst:1561
msgid "nntplib"
msgstr "nntplib"

#: ../../whatsnew/3.3.rst:1563
msgid ""
"The :class:`!nntplib.NNTP` class now supports the context management "
"protocol to unconditionally consume :exc:`socket.error` exceptions and to "
"close the NNTP connection when done::"
msgstr ""
"现在 :class:`!nntplib.NNTP` 类支持上下文管理协议以无条件地处理 :exc:`socket.error` 异常并在完成后关闭 "
"NNTP 连接::"

#: ../../whatsnew/3.3.rst:1567
msgid ""
">>> from nntplib import NNTP\n"
">>> with NNTP('news.gmane.org') as n:\n"
"...     n.group('gmane.comp.python.committers')\n"
"...\n"
"('211 1755 1 1755 gmane.comp.python.committers', 1755, 1, 1755, 'gmane.comp.python.committers')\n"
">>>"
msgstr ""
">>> from nntplib import NNTP\n"
">>> with NNTP('news.gmane.org') as n:\n"
"...     n.group('gmane.comp.python.committers')\n"
"...\n"
"('211 1755 1 1755 gmane.comp.python.committers', 1755, 1, 1755, 'gmane.comp.python.committers')\n"
">>>"

#: ../../whatsnew/3.3.rst:1574
msgid "(Contributed by Giampaolo Rodolà in :issue:`9795`.)"
msgstr "（由 Giampaolo Rodolà 在 :issue:`9795` 中贡献。）"

#: ../../whatsnew/3.3.rst:1578
msgid "os"
msgstr "os"

#: ../../whatsnew/3.3.rst:1580
msgid ""
"The :mod:`os` module has a new :func:`~os.pipe2` function that makes it "
"possible to create a pipe with :const:`~os.O_CLOEXEC` or "
":const:`~os.O_NONBLOCK` flags set atomically. This is especially useful to "
"avoid race conditions in multi-threaded programs."
msgstr ""
":mod:`os` 模块新增了 :func:`~os.pipe2` 函数以便能够创建会自动设置 :const:`~os.O_CLOEXEC` 或 "
":const:`~os.O_NONBLOCK` 旗标的管道。 这特别适用于避免多线程的程序出现竞争条件。"

#: ../../whatsnew/3.3.rst:1585
msgid ""
"The :mod:`os` module has a new :func:`~os.sendfile` function which provides "
"an efficient \"zero-copy\" way for copying data from one file (or socket) "
"descriptor to another. The phrase \"zero-copy\" refers to the fact that all "
"of the copying of data between the two descriptors is done entirely by the "
"kernel, with no copying of data into userspace buffers. :func:`~os.sendfile`"
" can be used to efficiently copy data from a file on disk to a network "
"socket, e.g. for downloading a file."
msgstr ""
":mod:`os` 模块新增了一个 :func:`~os.sendfile` "
"函数，提供了一种高效的“零拷贝”方式来将数据从一个文件（或套接字）描述符复制到另一个描述符。所谓“零拷贝”是指所有数据在两个描述符之间的复制完全由内核完成，无需将数据复制到用户空间缓冲区。:func:`~os.sendfile`"
" 可用于高效地将磁盘上的文件数据复制到网络套接字，例如用于下载文件。"

#: ../../whatsnew/3.3.rst:1593
msgid ""
"(Patch submitted by Ross Lagerwall and Giampaolo Rodolà in :issue:`10882`.)"
msgstr "（由 Ross Lagerwall 和 Giampaolo Rodolà 在 :issue:`10882` 中提交的补丁。）"

#: ../../whatsnew/3.3.rst:1595
msgid ""
"To avoid race conditions like symlink attacks and issues with temporary "
"files and directories, it is more reliable (and also faster) to manipulate "
"file descriptors instead of file names. Python 3.3 enhances existing "
"functions and introduces new functions to work on file descriptors "
"(:issue:`4761`, :issue:`10755` and :issue:`14626`)."
msgstr ""
"为了避免诸如符号链接攻击和临时文件及目录的问题，操作文件描述符比操作文件名更可靠（也更快）。Python 3.3 "
"增强了现有函数并引入了新函数来处理文件描述符（:issue:`4761`，:issue:`10755` 和 :issue:`14626`）。"

#: ../../whatsnew/3.3.rst:1601
msgid ""
"The :mod:`os` module has a new :func:`~os.fwalk` function similar to "
":func:`~os.walk` except that it also yields file descriptors referring to "
"the directories visited. This is especially useful to avoid symlink races."
msgstr ""
":mod:`os` 模块新增了一个 :func:`~os.fwalk` 函数，类似于 "
":func:`~os.walk`，但它还会生成引用访问过的目录的文件描述符。这对于避免符号链接竞争条件特别有用。"

#: ../../whatsnew/3.3.rst:1605
msgid ""
"The following functions get new optional *dir_fd* (:ref:`paths relative to "
"directory descriptors <dir_fd>`) and/or *follow_symlinks* (:ref:`not "
"following symlinks <follow_symlinks>`): :func:`~os.access`, "
":func:`~os.chflags`, :func:`~os.chmod`, :func:`~os.chown`, :func:`~os.link`,"
" :func:`~os.lstat`, :func:`~os.mkdir`, :func:`~os.mkfifo`, "
":func:`~os.mknod`, :func:`~os.open`, :func:`~os.readlink`, "
":func:`~os.remove`, :func:`~os.rename`, :func:`~os.replace`, "
":func:`~os.rmdir`, :func:`~os.stat`, :func:`~os.symlink`, "
":func:`~os.unlink`, :func:`~os.utime`.  Platform support for using these "
"parameters can be checked via the sets :data:`os.supports_dir_fd` and "
":data:`os.supports_follow_symlinks`."
msgstr ""

#: ../../whatsnew/3.3.rst:1616
msgid ""
"The following functions now support a file descriptor for their path "
"argument: :func:`~os.chdir`, :func:`~os.chmod`, :func:`~os.chown`, "
":func:`~os.execve`, :func:`~os.listdir`, :func:`~os.pathconf`, "
":func:`~os.path.exists`, :func:`~os.stat`, :func:`~os.statvfs`, "
":func:`~os.utime`.  Platform support for this can be checked via the "
":data:`os.supports_fd` set."
msgstr ""
"以下函数现在支持使用文件描述符作为其路径参数：:func:`~os.chdir`，:func:`~os.chmod`，:func:`~os.chown`，:func:`~os.execve`，:func:`~os.listdir`，:func:`~os.pathconf`，:func:`~os.path.exists`，:func:`~os.stat`，:func:`~os.statvfs`，:func:`~os.utime`。平台对此的支持可以通过集合"
" :data:`os.supports_fd` 检查。"

#: ../../whatsnew/3.3.rst:1622
msgid ""
":func:`~os.access` accepts an ``effective_ids`` keyword argument to turn on "
"using the effective uid/gid rather than the real uid/gid in the access "
"check. Platform support for this can be checked via the "
":data:`~os.supports_effective_ids` set."
msgstr ""
":func:`~os.access` 接受一个 ``effective_ids`` 关键字参数，以在访问检查中使用有效 uid/gid 而不是真实 "
"uid/gid。平台对此的支持可以通过集合 :data:`~os.supports_effective_ids` 检查。"

#: ../../whatsnew/3.3.rst:1627
msgid ""
"The :mod:`os` module has two new functions: :func:`~os.getpriority` and "
":func:`~os.setpriority`. They can be used to get or set process "
"niceness/priority in a fashion similar to :func:`os.nice` but extended to "
"all processes instead of just the current one."
msgstr ""
":mod:`os` 模块新增了两个函数：:func:`~os.getpriority` 和 "
":func:`~os.setpriority`。它们可以用来获取或设置进程的优先级/友好度，类似于 "
":func:`os.nice`，但扩展到所有进程而不仅仅是当前进程。"

#: ../../whatsnew/3.3.rst:1632
msgid "(Patch submitted by Giampaolo Rodolà in :issue:`10784`.)"
msgstr "（由 Giampaolo Rodolà 在 :issue:`10784` 中提交的补丁。）"

#: ../../whatsnew/3.3.rst:1634
msgid ""
"The new :func:`os.replace` function allows cross-platform renaming of a file"
" with overwriting the destination.  With :func:`os.rename`, an existing "
"destination file is overwritten under POSIX, but raises an error under "
"Windows. (Contributed by Antoine Pitrou in :issue:`8828`.)"
msgstr ""
"新的 :func:`os.replace` 函数允许跨平台重命名文件，并覆盖目标文件。使用 :func:`os.rename` 时，在 POSIX "
"下会覆盖现有目标文件，但在 Windows 下会引发错误。（由 Antoine Pitrou 在 :issue:`8828` 中贡献。）"

#: ../../whatsnew/3.3.rst:1640
msgid ""
"The stat family of functions (:func:`~os.stat`, :func:`~os.fstat`, and "
":func:`~os.lstat`) now support reading a file's timestamps with nanosecond "
"precision.  Symmetrically, :func:`~os.utime` can now write file timestamps "
"with nanosecond precision.  (Contributed by Larry Hastings in "
":issue:`14127`.)"
msgstr ""
"stat 系列函数（:func:`~os.stat`，:func:`~os.fstat` 和 "
":func:`~os.lstat`）现在支持以纳秒精度读取文件的时间戳。相应地，:func:`~os.utime` "
"现在可以以纳秒精度写入文件时间戳。（由 Larry Hastings 贡献，见 :issue:`14127`。）"

#: ../../whatsnew/3.3.rst:1646
msgid ""
"The new :func:`os.get_terminal_size` function queries the size of the "
"terminal attached to a file descriptor. See also "
":func:`shutil.get_terminal_size`. (Contributed by Zbigniew Jędrzejewski-"
"Szmek in :issue:`13609`.)"
msgstr ""
"新的 :func:`os.get_terminal_size` 函数查询附加到文件描述符的终端大小。另请参见 "
":func:`shutil.get_terminal_size`。（由 Zbigniew Jędrzejewski-Szmek 贡献，见 "
":issue:`13609`。）"

#: ../../whatsnew/3.3.rst:1653
msgid ""
"New functions to support Linux extended attributes (:issue:`12720`): "
":func:`~os.getxattr`, :func:`~os.listxattr`, :func:`~os.removexattr`, "
":func:`~os.setxattr`."
msgstr ""
"支持 Linux "
"扩展属性的新函数（:issue:`12720`）：:func:`~os.getxattr`，:func:`~os.listxattr`，:func:`~os.removexattr`，:func:`~os.setxattr`。"

#: ../../whatsnew/3.3.rst:1657
msgid ""
"New interface to the scheduler. These functions control how a process is "
"allocated CPU time by the operating system. New functions: "
":func:`~os.sched_get_priority_max`, :func:`~os.sched_get_priority_min`, "
":func:`~os.sched_getaffinity`, :func:`~os.sched_getparam`, "
":func:`~os.sched_getscheduler`, :func:`~os.sched_rr_get_interval`, "
":func:`~os.sched_setaffinity`, :func:`~os.sched_setparam`, "
":func:`~os.sched_setscheduler`, :func:`~os.sched_yield`,"
msgstr ""
"新的调度器接口。这些函数控制操作系统如何为进程分配 CPU "
"时间。新函数包括：:func:`~os.sched_get_priority_max`，:func:`~os.sched_get_priority_min`，:func:`~os.sched_getaffinity`，:func:`~os.sched_getparam`，:func:`~os.sched_getscheduler`，:func:`~os.sched_rr_get_interval`，:func:`~os.sched_setaffinity`，:func:`~os.sched_setparam`，:func:`~os.sched_setscheduler`，:func:`~os.sched_yield`，"

#: ../../whatsnew/3.3.rst:1666
msgid "New functions to control the file system:"
msgstr "控制文件系统的新函数："

#: ../../whatsnew/3.3.rst:1668
msgid ""
":func:`~os.posix_fadvise`: Announces an intention to access data in a "
"specific pattern thus allowing the kernel to make optimizations."
msgstr ":func:`~os.posix_fadvise`：宣布以特定模式访问数据的意图，从而允许内核进行优化。"

#: ../../whatsnew/3.3.rst:1670
msgid ""
":func:`~os.posix_fallocate`: Ensures that enough disk space is allocated for"
" a file."
msgstr ":func:`~os.posix_fallocate`：确保为文件分配足够的磁盘空间。"

#: ../../whatsnew/3.3.rst:1672
msgid ":func:`~os.sync`: Force write of everything to disk."
msgstr ":func:`~os.sync`：强制将所有内容写入磁盘。"

#: ../../whatsnew/3.3.rst:1674
msgid "Additional new  posix functions:"
msgstr "其他新的 POSIX 函数："

#: ../../whatsnew/3.3.rst:1676
msgid ""
":func:`~os.lockf`: Apply, test or remove a POSIX lock on an open file "
"descriptor."
msgstr ":func:`~os.lockf`：对打开的文件描述符应用、测试或移除 POSIX 锁。"

#: ../../whatsnew/3.3.rst:1677
msgid ""
":func:`~os.pread`: Read from a file descriptor at an offset, the file offset"
" remains unchanged."
msgstr ":func:`~os.pread`：从文件描述符的偏移量处读取，文件偏移量保持不变。"

#: ../../whatsnew/3.3.rst:1679
msgid ""
":func:`~os.pwrite`: Write to a file descriptor from an offset, leaving the "
"file offset unchanged."
msgstr ":func:`~os.pwrite`：从偏移量处写入文件描述符，文件偏移量保持不变。"

#: ../../whatsnew/3.3.rst:1681
msgid ""
":func:`~os.readv`: Read from a file descriptor into a number of writable "
"buffers."
msgstr ":func:`~os.readv`：从文件描述符读取到多个可写缓冲区。"

#: ../../whatsnew/3.3.rst:1682
msgid ""
":func:`~os.truncate`: Truncate the file corresponding to *path*, so that it "
"is at most *length* bytes in size."
msgstr ":func:`~os.truncate`：截断与 *path* 对应的文件，使其大小最多为 *length* 字节。"

#: ../../whatsnew/3.3.rst:1684
msgid ""
":func:`~os.waitid`: Wait for the completion of one or more child processes."
msgstr ":func:`~os.waitid`: 等待一个或多个子进程的完成。"

#: ../../whatsnew/3.3.rst:1685
msgid ""
":func:`~os.writev`: Write the contents of *buffers* to a file descriptor, "
"where *buffers* is an arbitrary sequence of buffers."
msgstr ":func:`~os.writev`: 将*buffers*的内容写入文件描述符，其中*buffers*是任意序列的缓冲区。"

#: ../../whatsnew/3.3.rst:1687
msgid ""
":func:`~os.getgrouplist` (:issue:`9344`): Return list of group ids that "
"specified user belongs to."
msgstr ":func:`~os.getgrouplist` (:issue:`9344`): 返回指定用户所属的组ID列表。"

#: ../../whatsnew/3.3.rst:1690
msgid ""
":func:`~os.times` and :func:`~os.uname`: Return type changed from a tuple to"
" a tuple-like object with named attributes."
msgstr ":func:`~os.times` 和 :func:`~os.uname`: 返回类型从元组更改为具有命名属性的类元组对象。"

#: ../../whatsnew/3.3.rst:1693
msgid ""
"Some platforms now support additional constants for the :func:`~os.lseek` "
"function, such as ``os.SEEK_HOLE`` and ``os.SEEK_DATA``."
msgstr ""
"一些平台现在支持 :func:`~os.lseek` 函数的额外常量，例如 ``os.SEEK_HOLE`` 和 ``os.SEEK_DATA``。"

#: ../../whatsnew/3.3.rst:1696
msgid ""
"New constants :const:`~os.RTLD_LAZY`, :const:`~os.RTLD_NOW`, "
":const:`~os.RTLD_GLOBAL`, :const:`~os.RTLD_LOCAL`, "
":const:`~os.RTLD_NODELETE`, :const:`~os.RTLD_NOLOAD`, and "
":const:`~os.RTLD_DEEPBIND` are available on platforms that support them.   "
"These are for use with the :func:`sys.setdlopenflags` function, and "
"supersede the similar constants defined in :mod:`ctypes` and :mod:`!DLFCN`."
"  (Contributed by Victor Stinner in :issue:`13226`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:1704
msgid ""
":func:`os.symlink` now accepts (and ignores) the ``target_is_directory`` "
"keyword argument on non-Windows platforms, to ease cross-platform support."
msgstr ""
":func:`os.symlink` 现在接受（并忽略）非Windows平台上的 ``target_is_directory`` "
"关键字参数，以简化跨平台支持。"

#: ../../whatsnew/3.3.rst:1709
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.3.rst:1711
msgid ""
"Tab-completion is now available not only for command names, but also their "
"arguments.  For example, for the ``break`` command, function and file names "
"are completed."
msgstr "Tab 补全现在不仅适用于命令名称，也适用于它们的参数。 例如，对于 ``break`` 命令，函数和文件名将被补全。"

#: ../../whatsnew/3.3.rst:1715
msgid "(Contributed by Georg Brandl in :issue:`14210`)"
msgstr "（由 Georg Brandl 在 :issue:`14210` 中贡献）"

#: ../../whatsnew/3.3.rst:1719
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.3.rst:1721
msgid ""
":class:`pickle.Pickler` objects now have an optional "
":attr:`~pickle.Pickler.dispatch_table` attribute allowing per-pickler "
"reduction functions to be set."
msgstr ""
"现在 :class:`pickle.Pickler` 对象具有一个可选的 :attr:`~pickle.Pickler.dispatch_table` "
"属性以允许针对每个 pickler 设置缩减函数。"

#: ../../whatsnew/3.3.rst:1725
msgid "(Contributed by Richard Oudkerk in :issue:`14166`.)"
msgstr "（由 Richard Oudkerk 在 :issue:`14166` 中贡献。）"

#: ../../whatsnew/3.3.rst:1729
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.3.rst:1731
msgid ""
"The Tk GUI and the :func:`!serve` function have been removed from the "
":mod:`pydoc` module: ``pydoc -g`` and :func:`!serve` have been deprecated in"
" Python 3.2."
msgstr ""

#: ../../whatsnew/3.3.rst:1737
msgid "re"
msgstr "re"

#: ../../whatsnew/3.3.rst:1739
msgid ":class:`str` regular expressions now support ``\\u`` and ``\\U`` escapes."
msgstr "现在 :class:`str` 正则表达式已支持 ``\\u`` 和 ``\\U`` 转义符。"

#: ../../whatsnew/3.3.rst:1741
msgid "(Contributed by Serhiy Storchaka in :issue:`3665`.)"
msgstr "（由 Serhiy Storchaka 在 :issue:`3665` 中贡献。）"

#: ../../whatsnew/3.3.rst:1745
msgid "sched"
msgstr "sched"

#: ../../whatsnew/3.3.rst:1747
msgid ""
":meth:`~sched.scheduler.run` now accepts a *blocking* parameter which when "
"set to false makes the method execute the scheduled events due to expire "
"soonest (if any) and then return immediately. This is useful in case you "
"want to use the :class:`~sched.scheduler` in non-blocking applications.  "
"(Contributed by Giampaolo Rodolà in :issue:`13449`.)"
msgstr ""
":meth:`~sched.scheduler.run` 现在接受一个 *blocking* 参数，当设置为 false "
"时，该方法执行即将到期的计划事件（如果有）并立即返回。这在您希望使用 :class:`~sched.scheduler` "
"在非阻塞应用程序中时非常有用。（由 Giampaolo Rodolà 在 :issue:`13449` 中贡献。）"

#: ../../whatsnew/3.3.rst:1753
msgid ""
":class:`~sched.scheduler` class can now be safely used in multi-threaded "
"environments.  (Contributed by Josiah Carlson and Giampaolo Rodolà in "
":issue:`8684`.)"
msgstr ""
":class:`~sched.scheduler` 类现在可以安全地在多线程环境中使用。（由 Josiah Carlson 和 Giampaolo "
"Rodolà 在 :issue:`8684` 中贡献。）"

#: ../../whatsnew/3.3.rst:1757
msgid ""
"*timefunc* and *delayfunct* parameters of :class:`~sched.scheduler` class "
"constructor are now optional and defaults to :func:`time.time` and "
":func:`time.sleep` respectively.  (Contributed by Chris Clark in "
":issue:`13245`.)"
msgstr ""
":class:`~sched.scheduler` 类构造函数的 *timefunc* 和 *delayfunct* 参数现在是可选的，默认分别为 "
":func:`time.time` 和 :func:`time.sleep`。（由 Chris Clark 在 :issue:`13245` 中贡献。）"

#: ../../whatsnew/3.3.rst:1762
msgid ""
":meth:`~sched.scheduler.enter` and :meth:`~sched.scheduler.enterabs` "
"*argument* parameter is now optional.  (Contributed by Chris Clark in "
":issue:`13245`.)"
msgstr ""
":meth:`~sched.scheduler.enter` 和 :meth:`~sched.scheduler.enterabs` 的 "
"*argument* 参数现在是可选的。 (由 Chris Clark 在 :issue:`13245` 中贡献)"

#: ../../whatsnew/3.3.rst:1766
msgid ""
":meth:`~sched.scheduler.enter` and :meth:`~sched.scheduler.enterabs` now "
"accept a *kwargs* parameter.  (Contributed by Chris Clark in "
":issue:`13245`.)"
msgstr ""
":meth:`~sched.scheduler.enter` 和 :meth:`~sched.scheduler.enterabs` 现在接受一个 "
"*kwargs* 参数。 (由 Chris Clark 在 :issue:`13245` 中贡献)"

#: ../../whatsnew/3.3.rst:1772
msgid "select"
msgstr "select"

#: ../../whatsnew/3.3.rst:1774
msgid ""
"Solaris and derivative platforms have a new class :class:`select.devpoll` "
"for high performance asynchronous sockets via :file:`/dev/poll`. "
"(Contributed by Jesús Cea Avión in :issue:`6397`.)"
msgstr ""
"Solaris 及其衍生平台新增了一个类 :class:`select.devpoll`，用于通过 :file:`/dev/poll` "
"实现高性能异步套接字。 (由 Jesús Cea Avión 在 :issue:`6397` 中贡献)"

#: ../../whatsnew/3.3.rst:1780
msgid "shlex"
msgstr "shlex"

#: ../../whatsnew/3.3.rst:1782
msgid ""
"The previously undocumented helper function ``quote`` from the :mod:`!pipes`"
" modules has been moved to the :mod:`shlex` module and documented.  "
":func:`~shlex.quote` properly escapes all characters in a string that might "
"be otherwise given special meaning by the shell."
msgstr ""
"之前未文档化的 :mod:`!pipes` 模块中的辅助函数 ``quote`` 已移至 :mod:`shlex` 模块并进行文档化。 "
":func:`~shlex.quote` 正确地转义字符串中所有可能在 shell 中具有特殊意义的字符。"

#: ../../whatsnew/3.3.rst:1789
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.3.rst:1791
msgid "New functions:"
msgstr "新的函数："

#: ../../whatsnew/3.3.rst:1793
msgid ""
":func:`~shutil.disk_usage`: provides total, used and free disk space "
"statistics.  (Contributed by Giampaolo Rodolà in :issue:`12442`.)"
msgstr ""
":func:`~shutil.disk_usage`：提供总、已用和可用磁盘空间统计信息。 (由 Giampaolo Rodolà 在 "
":issue:`12442` 中贡献)"

#: ../../whatsnew/3.3.rst:1795
msgid ""
":func:`~shutil.chown`: allows one to change user and/or group of the given "
"path also specifying the user/group names and not only their numeric ids.  "
"(Contributed by Sandro Tosi in :issue:`12191`.)"
msgstr ""
":func:`~shutil.chown`：允许更改给定路径的用户和/或组，同时可以指定用户/组名称，而不仅限于其数字 ID。 (由 Sandro "
"Tosi 在 :issue:`12191` 中贡献)"

#: ../../whatsnew/3.3.rst:1798
msgid ""
":func:`shutil.get_terminal_size`: returns the size of the terminal window to"
" which the interpreter is attached.  (Contributed by Zbigniew Jędrzejewski-"
"Szmek in :issue:`13609`.)"
msgstr ""
":func:`shutil.get_terminal_size`：返回解释器所连接的终端窗口的大小。 (由 Zbigniew Jędrzejewski-"
"Szmek 在 :issue:`13609` 中贡献)"

#: ../../whatsnew/3.3.rst:1802
msgid ""
":func:`~shutil.copy2` and :func:`~shutil.copystat` now preserve file "
"timestamps with nanosecond precision on platforms that support it. They also"
" preserve file \"extended attributes\" on Linux.  (Contributed by Larry "
"Hastings in :issue:`14127` and  :issue:`15238`.)"
msgstr ""
":func:`~shutil.copy2` 和 :func:`~shutil.copystat` "
"现在在支持的平台中可以保留纳秒精度的文件时间戳。它们还保留 Linux 上的文件“扩展属性”。 (由 Larry Hastings 在 "
":issue:`14127` 和 :issue:`15238` 中贡献)"

#: ../../whatsnew/3.3.rst:1807
msgid ""
"Several functions now take an optional ``symlinks`` argument: when that "
"parameter is true, symlinks aren't dereferenced and the operation instead "
"acts on the symlink itself (or creates one, if relevant). (Contributed by "
"Hynek Schlawack in :issue:`12715`.)"
msgstr ""
"多个函数现在接受一个可选的 ``symlinks`` 参数：当该参数为真时，不解析符号链接，操作直接作用于符号链接本身（或在相关情况下创建一个）。 (由"
" Hynek Schlawack 在 :issue:`12715` 中贡献)"

#: ../../whatsnew/3.3.rst:1812
msgid ""
"When copying files to a different file system, :func:`~shutil.move` now "
"handles symlinks the way the posix ``mv`` command does, recreating the "
"symlink rather than copying the target file contents.  (Contributed by "
"Jonathan Niehof in :issue:`9993`.)  :func:`~shutil.move` now also returns "
"the ``dst`` argument as its result."
msgstr ""
"当将文件复制到不同的文件系统时，:func:`~shutil.move` 现在处理符号链接的方式与 POSIX 的 ``mv`` "
"命令相同，即重新创建符号链接而不是复制目标文件内容。（由 Jonathan Niehof 在 :issue:`9993` 中贡献。） "
":func:`~shutil.move` 现在还返回 ``dst`` 参数作为其结果。"

#: ../../whatsnew/3.3.rst:1818
msgid ""
":func:`~shutil.rmtree` is now resistant to symlink attacks on platforms "
"which support the new ``dir_fd`` parameter in :func:`os.open` and "
":func:`os.unlink`.  (Contributed by Martin von Löwis and Hynek Schlawack in "
":issue:`4489`.)"
msgstr ""
":func:`~shutil.rmtree` 现在对符号链接攻击具有抵抗力，适用于支持 :func:`os.open` 和 "
":func:`os.unlink` 中新 ``dir_fd`` 参数的平台。（由 Martin von Löwis 和 Hynek Schlawack "
"在 :issue:`4489` 中贡献。）"

#: ../../whatsnew/3.3.rst:1825
msgid "signal"
msgstr "signal"

#: ../../whatsnew/3.3.rst:1827
msgid "The :mod:`signal` module has new functions:"
msgstr ":mod:`signal` 模块新增的函数:"

#: ../../whatsnew/3.3.rst:1829
msgid ""
":func:`~signal.pthread_sigmask`: fetch and/or change the signal mask of the "
"calling thread (Contributed by Jean-Paul Calderone in :issue:`8407`);"
msgstr ""
":func:`~signal.pthread_sigmask`: 获取和/或改变调用方线程的信号掩码（由 Jean-Paul Calderone 在 "
":issue:`8407` 中贡献）；"

#: ../../whatsnew/3.3.rst:1831
msgid ":func:`~signal.pthread_kill`: send a signal to a thread;"
msgstr ":func:`~signal.pthread_kill`: 向指定线程发送信号；"

#: ../../whatsnew/3.3.rst:1832
msgid ":func:`~signal.sigpending`: examine pending functions;"
msgstr ":func:`~signal.sigpending`: 检查挂起的函数；"

#: ../../whatsnew/3.3.rst:1833
msgid ":func:`~signal.sigwait`: wait a signal;"
msgstr ":func:`~signal.sigwait`: 等待一个信号;"

#: ../../whatsnew/3.3.rst:1834
msgid ""
":func:`~signal.sigwaitinfo`: wait for a signal, returning detailed "
"information about it;"
msgstr ":func:`~signal.sigwaitinfo`: 等待信号，返回相关的详细信息；"

#: ../../whatsnew/3.3.rst:1836
msgid ""
":func:`~signal.sigtimedwait`: like :func:`~signal.sigwaitinfo` but with a "
"timeout."
msgstr ":func:`~signal.sigtimedwait`：类似于 :func:`~signal.sigwaitinfo`，但带有超时。"

#: ../../whatsnew/3.3.rst:1839
msgid ""
"The signal handler writes the signal number as a single byte instead of a "
"nul byte into the wakeup file descriptor. So it is possible to wait more "
"than one signal and know which signals were raised."
msgstr "信号处理程序将信号号码作为一个字节而不是空字节写入唤醒文件描述符。因此，可以等待多个信号并知道哪些信号被触发。"

#: ../../whatsnew/3.3.rst:1843
msgid ""
":func:`signal.signal` and :func:`signal.siginterrupt` raise an OSError, "
"instead of a RuntimeError: OSError has an errno attribute."
msgstr ""
":func:`signal.signal` 和 :func:`signal.siginterrupt` 引发 OSError，而不是 "
"RuntimeError：OSError 具有 errno 属性。"

#: ../../whatsnew/3.3.rst:1848
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.3.rst:1850
msgid ""
"The :mod:`!smtpd` module now supports :rfc:`5321` (extended SMTP) and "
":rfc:`1870` (size extension).  Per the standard, these extensions are "
"enabled if and only if the client initiates the session with an ``EHLO`` "
"command."
msgstr ""
":mod:`!smtpd` 模块现在支持 :rfc:`5321` (扩展 SMTP) 和 :rfc:`1870` (大小扩展)。 "
"根据标准，这些扩展仅在客户端使用 ``EHLO`` 命令发起会话时启用。"

#: ../../whatsnew/3.3.rst:1854
msgid ""
"(Initial ``ELHO`` support by Alberto Trevino.  Size extension by Juhana "
"Jauhiainen.  Substantial additional work on the patch contributed by Michele"
" Orrù and Dan Boswell.  :issue:`8739`)"
msgstr ""
"（初始 ``ELHO`` 支持由 Alberto Trevino 提供。大小扩展由 Juhana Jauhiainen 提供。Michele Orrù "
"和 Dan Boswell 对补丁做出了大量额外贡献。:issue:`8739`）"

#: ../../whatsnew/3.3.rst:1860
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.3.rst:1862
msgid ""
"The :class:`~smtplib.SMTP`, :class:`~smtplib.SMTP_SSL`, and "
":class:`~smtplib.LMTP` classes now accept a ``source_address`` keyword "
"argument to specify the ``(host, port)`` to use as the source address in the"
" bind call when creating the outgoing socket.  (Contributed by Paulo "
"Scardine in :issue:`11281`.)"
msgstr ""
":class:`~smtplib.SMTP`、:class:`~smtplib.SMTP_SSL` 和 :class:`~smtplib.LMTP` "
"类现在接受 ``source_address`` 关键字参数，用于指定在创建传出套接字时绑定调用中使用的 ``(host, port)`` 源地址。（由"
" Paulo Scardine 在 :issue:`11281` 中贡献。）"

#: ../../whatsnew/3.3.rst:1868
msgid ""
":class:`~smtplib.SMTP` now supports the context management protocol, "
"allowing an ``SMTP`` instance to be used in a ``with`` statement.  "
"(Contributed by Giampaolo Rodolà in :issue:`11289`.)"
msgstr ""
":class:`~smtplib.SMTP` 现在支持上下文管理协议，允许 ``SMTP`` 实例在 ``with`` 语句中使用。（由 "
"Giampaolo Rodolà 在 :issue:`11289` 中贡献。）"

#: ../../whatsnew/3.3.rst:1872
msgid ""
"The :class:`~smtplib.SMTP_SSL` constructor and the "
":meth:`~smtplib.SMTP.starttls` method now accept an SSLContext parameter to "
"control parameters of the secure channel.  (Contributed by Kasun Herath in "
":issue:`8809`.)"
msgstr ""
":class:`~smtplib.SMTP_SSL` 构造函数和 :meth:`~smtplib.SMTP.starttls` 方法现在接受一个 "
"SSLContext 参数，用于控制安全通道的参数。（由 Kasun Herath 在 :issue:`8809` 中贡献。）"

#: ../../whatsnew/3.3.rst:1878
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.3.rst:1880
msgid ""
"The :class:`~socket.socket` class now exposes additional methods to process "
"ancillary data when supported by the underlying platform:"
msgstr ":class:`~socket.socket` 类现在公开了额外的方法，用于在底层平台支持时处理辅助数据："

#: ../../whatsnew/3.3.rst:1883
msgid ":func:`~socket.socket.sendmsg`"
msgstr ":func:`~socket.socket.sendmsg`"

#: ../../whatsnew/3.3.rst:1884
msgid ":func:`~socket.socket.recvmsg`"
msgstr ":func:`~socket.socket.recvmsg`"

#: ../../whatsnew/3.3.rst:1885
msgid ":func:`~socket.socket.recvmsg_into`"
msgstr ":func:`~socket.socket.recvmsg_into`"

#: ../../whatsnew/3.3.rst:1887
msgid ""
"(Contributed by David Watson in :issue:`6560`, based on an earlier patch by "
"Heiko Wundram)"
msgstr "（由 David Watson 在 :issue:`6560` 中贡献，基于 Heiko Wundram 的早期补丁。）"

#: ../../whatsnew/3.3.rst:1890
msgid ""
"The :class:`~socket.socket` class now supports the PF_CAN protocol family "
"(https://en.wikipedia.org/wiki/Socketcan), on Linux "
"(https://lwn.net/Articles/253425)."
msgstr ""
":class:`~socket.socket` 类现在支持 Linux 上的 PF_CAN "
"协议族（https://en.wikipedia.org/wiki/Socketcan）。（https://lwn.net/Articles/253425）"

#: ../../whatsnew/3.3.rst:1894
msgid ""
"(Contributed by Matthias Fuchs, updated by Tiago Gonçalves in "
":issue:`10141`.)"
msgstr "（由 Matthias Fuchs 贡献，Tiago Gonçalves 在 :issue:`10141` 中更新。）"

#: ../../whatsnew/3.3.rst:1896
msgid ""
"The :class:`~socket.socket` class now supports the PF_RDS protocol family "
"(https://en.wikipedia.org/wiki/Reliable_Datagram_Sockets and "
"`https://oss.oracle.com/projects/rds "
"<https://web.archive.org/web/20130115155505/https://oss.oracle.com/projects/rds/>`__)."
msgstr ""
":class:`~socket.socket` 类现在支持 PF_RDS "
"协议族（https://en.wikipedia.org/wiki/Reliable_Datagram_Sockets 和 "
"`https://oss.oracle.com/projects/rds "
"<https://web.archive.org/web/20130115155505/https://oss.oracle.com/projects/rds/>`__）。"

#: ../../whatsnew/3.3.rst:1900
msgid ""
"The :class:`~socket.socket` class now supports the ``PF_SYSTEM`` protocol "
"family on OS X.  (Contributed by Michael Goderbauer in :issue:`13777`.)"
msgstr ""
":class:`~socket.socket` 类现在支持 OS X 上的 ``PF_SYSTEM`` 协议族。（由 Michael "
"Goderbauer 在 :issue:`13777` 中贡献。）"

#: ../../whatsnew/3.3.rst:1903
msgid ""
"New function :func:`~socket.sethostname` allows the hostname to be set on "
"Unix systems if the calling process has sufficient privileges. (Contributed "
"by Ross Lagerwall in :issue:`10866`.)"
msgstr ""
"新函数 :func:`~socket.sethostname` 允许在 Unix 系统上设置主机名，如果调用进程具有足够权限。（由 Ross "
"Lagerwall 在 :issue:`10866` 中贡献。）"

#: ../../whatsnew/3.3.rst:1909
msgid "socketserver"
msgstr "socketserver"

#: ../../whatsnew/3.3.rst:1911
msgid ""
":class:`~socketserver.BaseServer` now has an overridable method "
":meth:`~socketserver.BaseServer.service_actions` that is called by the "
":meth:`~socketserver.BaseServer.serve_forever` method in the service loop. "
":class:`~socketserver.ForkingMixIn` now uses this to clean up zombie child "
"processes.  (Contributed by Justin Warkentin in :issue:`11109`.)"
msgstr ""
":class:`~socketserver.BaseServer` 现在有一个可重写的方法 "
":meth:`~socketserver.BaseServer.service_actions`，该方法由 "
":meth:`~socketserver.BaseServer.serve_forever` "
"方法在服务循环中调用。:class:`~socketserver.ForkingMixIn` 现在使用此方法来清理僵尸子进程。（由 Justin "
"Warkentin 在 :issue:`11109` 中贡献。）"

#: ../../whatsnew/3.3.rst:1919
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.3.rst:1921
msgid ""
"New :class:`sqlite3.Connection` method "
":meth:`~sqlite3.Connection.set_trace_callback` can be used to capture a "
"trace of all sql commands processed by sqlite.  (Contributed by Torsten "
"Landschoff in :issue:`11688`.)"
msgstr ""
"新增的 :class:`sqlite3.Connection` 方法 "
":meth:`~sqlite3.Connection.set_trace_callback` 可被用于捕获由 sqlite 处理的所有 sql "
"命令的追踪信息。 （由 Torsten Landschoff 在 :issue:`11688` 中贡献。）"

#: ../../whatsnew/3.3.rst:1928
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.3.rst:1930
msgid "The :mod:`ssl` module has two new random generation functions:"
msgstr ":mod:`ssl` 新增了两个随机生成函数："

#: ../../whatsnew/3.3.rst:1932
msgid ""
":func:`~ssl.RAND_bytes`: generate cryptographically strong pseudo-random "
"bytes."
msgstr ":func:`~ssl.RAND_bytes`: 生成高加密强度的伪随机字节数据。"

#: ../../whatsnew/3.3.rst:1934
msgid ":func:`!RAND_pseudo_bytes`: generate pseudo-random bytes."
msgstr ""

#: ../../whatsnew/3.3.rst:1936
msgid "(Contributed by Victor Stinner in :issue:`12049`.)"
msgstr "（由 Victor Stinner 在 :issue:`12049` 中贡献。）"

#: ../../whatsnew/3.3.rst:1938
msgid ""
"The :mod:`ssl` module now exposes a finer-grained exception hierarchy in "
"order to make it easier to inspect the various kinds of errors. (Contributed"
" by Antoine Pitrou in :issue:`11183`.)"
msgstr ""
":mod:`ssl` 模块现在公开了一个更细粒度的异常层次结构，以便更容易检查各种错误类型。（由 Antoine Pitrou 在 "
":issue:`11183` 中贡献。）"

#: ../../whatsnew/3.3.rst:1942
msgid ""
":meth:`~ssl.SSLContext.load_cert_chain` now accepts a *password* argument to"
" be used if the private key is encrypted. (Contributed by Adam Simpkins in "
":issue:`12803`.)"
msgstr ""
":meth:`~ssl.SSLContext.load_cert_chain` 现在接受一个 *password* 参数，用于如果私钥被加密时使用。（由"
" Adam Simpkins 在 :issue:`12803` 中贡献。)"

#: ../../whatsnew/3.3.rst:1946
msgid ""
"Diffie-Hellman key exchange, both regular and Elliptic Curve-based, is now "
"supported through the :meth:`~ssl.SSLContext.load_dh_params` and "
":meth:`~ssl.SSLContext.set_ecdh_curve` methods. (Contributed by Antoine "
"Pitrou in :issue:`13626` and :issue:`13627`.)"
msgstr ""
"现在支持通过 :meth:`~ssl.SSLContext.load_dh_params` 和 "
":meth:`~ssl.SSLContext.set_ecdh_curve` 方法实现常规和基于椭圆曲线的 Diffie-Hellman 密钥交换。（由"
" Antoine Pitrou 贡献于 :issue:`13626` 和 :issue:`13627`。）"

#: ../../whatsnew/3.3.rst:1951
msgid ""
"SSL sockets have a new :meth:`~ssl.SSLSocket.get_channel_binding` method "
"allowing the implementation of certain authentication mechanisms such as "
"SCRAM-SHA-1-PLUS.  (Contributed by Jacek Konieczny in :issue:`12551`.)"
msgstr ""
"SSL 套接字新增了 :meth:`~ssl.SSLSocket.get_channel_binding` 方法，允许实现某些认证机制，例如 "
"SCRAM-SHA-1-PLUS。（由 Jacek Konieczny 贡献于 :issue:`12551`。）"

#: ../../whatsnew/3.3.rst:1955
msgid ""
"You can query the SSL compression algorithm used by an SSL socket, thanks to"
" its new :meth:`~ssl.SSLSocket.compression` method.  The new attribute "
":const:`~ssl.OP_NO_COMPRESSION` can be used to disable compression. "
"(Contributed by Antoine Pitrou in :issue:`13634`.)"
msgstr ""
"您可以通过新的 :meth:`~ssl.SSLSocket.compression` 方法查询 SSL 套接字使用的 SSL 压缩算法。新的属性 "
":const:`~ssl.OP_NO_COMPRESSION` 可用于禁用压缩。（由 Antoine Pitrou 贡献于 "
":issue:`13634`。）"

#: ../../whatsnew/3.3.rst:1960
msgid ""
"Support has been added for the Next Protocol Negotiation extension using the"
" :meth:`ssl.SSLContext.set_npn_protocols` method. (Contributed by Colin Marc"
" in :issue:`14204`.)"
msgstr ""
"已添加对使用 :meth:`ssl.SSLContext.set_npn_protocols` 方法的 Next Protocol "
"Negotiation 扩展的支持。（由 Colin Marc 贡献于 :issue:`14204`。）"

#: ../../whatsnew/3.3.rst:1964
msgid ""
"SSL errors can now be introspected more easily thanks to "
":attr:`~ssl.SSLError.library` and :attr:`~ssl.SSLError.reason` attributes. "
"(Contributed by Antoine Pitrou in :issue:`14837`.)"
msgstr ""
"由于 :attr:`~ssl.SSLError.library` 和 :attr:`~ssl.SSLError.reason` "
"属性，现在可以更轻松地检查 SSL 错误。（由 Antoine Pitrou 贡献于 :issue:`14837`。）"

#: ../../whatsnew/3.3.rst:1968
msgid ""
"The :func:`~ssl.get_server_certificate` function now supports IPv6. "
"(Contributed by Charles-François Natali in :issue:`11811`.)"
msgstr ""
":func:`~ssl.get_server_certificate` 函数现在支持 IPv6。（由 Charles-François Natali "
"贡献于 :issue:`11811`。）"

#: ../../whatsnew/3.3.rst:1971
msgid ""
"New attribute :const:`~ssl.OP_CIPHER_SERVER_PREFERENCE` allows setting SSLv3"
" server sockets to use the server's cipher ordering preference rather than "
"the client's (:issue:`13635`)."
msgstr ""
"新的属性 :const:`~ssl.OP_CIPHER_SERVER_PREFERENCE` 允许将 SSLv3 "
"服务器套接字设置为使用服务器的密码排序偏好，而不是客户端的（:issue:`13635`）。"

#: ../../whatsnew/3.3.rst:1977
msgid "stat"
msgstr "stat"

#: ../../whatsnew/3.3.rst:1979
msgid ""
"The undocumented tarfile.filemode function has been moved to "
":func:`stat.filemode`. It can be used to convert a file's mode to a string "
"of the form '-rwxrwxrwx'."
msgstr ""
"未文档化的 tarfile.filemode 函数已移至 :func:`stat.filemode`。它可用于将文件的模式转换为形式为 "
"'-rwxrwxrwx' 的字符串。"

#: ../../whatsnew/3.3.rst:1983
msgid "(Contributed by Giampaolo Rodolà in :issue:`14807`.)"
msgstr "（由 Giampaolo Rodolà 在 :issue:`14807` 中贡献。）"

#: ../../whatsnew/3.3.rst:1987
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.3.rst:1989
msgid ""
"The :mod:`struct` module now supports :c:type:`ssize_t` and :c:type:`size_t`"
" via the new codes ``n`` and ``N``, respectively.  (Contributed by Antoine "
"Pitrou in :issue:`3163`.)"
msgstr ""
":mod:`struct` 模块现在通过新的代码 ``n`` 和 ``N`` 分别支持 :c:type:`ssize_t` 和 "
":c:type:`size_t`。（由 Antoine Pitrou 贡献于 :issue:`3163`。）"

#: ../../whatsnew/3.3.rst:1995
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.3.rst:1997
msgid ""
"Command strings can now be bytes objects on posix platforms.  (Contributed "
"by Victor Stinner in :issue:`8513`.)"
msgstr "在 POSIX 平台上，命令字符串现在可以是字节对象。（由 Victor Stinner 在 :issue:`8513` 中贡献。）"

#: ../../whatsnew/3.3.rst:2000
msgid ""
"A new constant :const:`~subprocess.DEVNULL` allows suppressing output in a "
"platform-independent fashion.  (Contributed by Ross Lagerwall in "
":issue:`5870`.)"
msgstr ""
"一个新的常量 :const:`~subprocess.DEVNULL` 允许以平台独立的方式抑制输出。（由 Ross Lagerwall 在 "
":issue:`5870` 中贡献。）"

#: ../../whatsnew/3.3.rst:2006
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.3.rst:2008
msgid ""
"The :mod:`sys` module has a new :data:`~sys.thread_info` :term:`named tuple`"
" holding information about the thread implementation (:issue:`11223`)."
msgstr ""
":mod:`sys` 模块新增了一个 :data:`~sys.thread_info` :term:`named tuple`，包含有关线程实现的信息 "
"(:issue:`11223`)。"

#: ../../whatsnew/3.3.rst:2014
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.3.rst:2016
msgid ""
":mod:`tarfile` now supports ``lzma`` encoding via the :mod:`lzma` module. "
"(Contributed by Lars Gustäbel in :issue:`5689`.)"
msgstr ""
":mod:`tarfile` 现在通过 :mod:`lzma` 模块支持 ``lzma`` 编码。（由 Lars Gustäbel 在 "
":issue:`5689` 中贡献。）"

#: ../../whatsnew/3.3.rst:2021
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.3.rst:2023
msgid ""
":class:`tempfile.SpooledTemporaryFile`\\'s :meth:`!truncate` method now "
"accepts a ``size`` parameter.  (Contributed by Ryan Kelly in :issue:`9957`.)"
msgstr ""

#: ../../whatsnew/3.3.rst:2028
msgid "textwrap"
msgstr "textwrap"

#: ../../whatsnew/3.3.rst:2030
msgid ""
"The :mod:`textwrap` module has a new :func:`~textwrap.indent` that makes it "
"straightforward to add a common prefix to selected lines in a block of text"
"  (:issue:`13857`)."
msgstr ""
":mod:`textwrap` 模块新增了一个 :func:`~textwrap.indent` "
"函数，可以方便地为文本块中的选定行添加一个公共前缀（:issue:`13857`）。"

#: ../../whatsnew/3.3.rst:2036
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.3.rst:2038
msgid ""
":class:`threading.Condition`, :class:`threading.Semaphore`, "
":class:`threading.BoundedSemaphore`, :class:`threading.Event`, and "
":class:`threading.Timer`, all of which used to be factory functions "
"returning a class instance, are now classes and may be subclassed.  "
"(Contributed by Éric Araujo in :issue:`10968`.)"
msgstr ""
":class:`threading.Condition`、:class:`threading.Semaphore`、:class:`threading.BoundedSemaphore`、:class:`threading.Event`"
" 和 :class:`threading.Timer`，这些原本是返回类实例的工厂函数，现在都变成了类，并且可以被子类化。（由 Éric Araujo "
"在 :issue:`10968` 中贡献。）"

#: ../../whatsnew/3.3.rst:2044
msgid ""
"The :class:`threading.Thread` constructor now accepts a ``daemon`` keyword "
"argument to override the default behavior of inheriting the ``daemon`` flag "
"value from the parent thread (:issue:`6064`)."
msgstr ""
":class:`threading.Thread` 构造函数现在接受一个 ``daemon`` 关键字参数，以覆盖从父线程继承 ``daemon`` "
"标志值的默认行为（:issue:`6064`）。"

#: ../../whatsnew/3.3.rst:2048
msgid ""
"The formerly private function ``_thread.get_ident`` is now available as the "
"public function :func:`threading.get_ident`.  This eliminates several cases "
"of direct access to the ``_thread`` module in the stdlib.  Third party code "
"that used ``_thread.get_ident`` should likewise be changed to use the new "
"public interface."
msgstr ""
"原本私有的函数 ``_thread.get_ident`` 现在作为公共函数 :func:`threading.get_ident` "
"提供。这消除了标准库中直接访问 ``_thread`` 模块的几种情况。使用 ``_thread.get_ident`` "
"的第三方代码也应改为使用新的公共接口。"

#: ../../whatsnew/3.3.rst:2056
msgid "time"
msgstr "time"

#: ../../whatsnew/3.3.rst:2058
msgid "The :pep:`418` added new functions to the :mod:`time` module:"
msgstr ":pep:`418` 向 :mod:`time` 模块添加了新函数："

#: ../../whatsnew/3.3.rst:2060
msgid ":func:`~time.get_clock_info`: Get information on a clock."
msgstr ":func:`~time.get_clock_info`：获取时钟信息。"

#: ../../whatsnew/3.3.rst:2061
msgid ""
":func:`~time.monotonic`: Monotonic clock (cannot go backward), not affected "
"by system clock updates."
msgstr ":func:`~time.monotonic`：单调时钟（不会倒退），不受系统时钟更新影响。"

#: ../../whatsnew/3.3.rst:2063
msgid ""
":func:`~time.perf_counter`: Performance counter with the highest available "
"resolution to measure a short duration."
msgstr ":func:`~time.perf_counter`：具有最高可用分辨率的性能计数器，用于测量短时间间隔。"

#: ../../whatsnew/3.3.rst:2065
msgid ""
":func:`~time.process_time`: Sum of the system and user CPU time of the "
"current process."
msgstr ":func:`~time.process_time`: 当前进程的系统CPU时间和用户CPU时间之和。"

#: ../../whatsnew/3.3.rst:2068
msgid "Other new functions:"
msgstr "其他新函数："

#: ../../whatsnew/3.3.rst:2070
msgid ""
":func:`~time.clock_getres`, :func:`~time.clock_gettime` and "
":func:`~time.clock_settime` functions with :samp:`CLOCK_{xxx}` constants. "
"(Contributed by Victor Stinner in :issue:`10278`.)"
msgstr ""
":func:`~time.clock_getres`，:func:`~time.clock_gettime` 和 "
":func:`~time.clock_settime` 函数，配合 :samp:`CLOCK_{xxx}` 常量。（由Victor "
"Stinner贡献，见 :issue:`10278`。）"

#: ../../whatsnew/3.3.rst:2074
msgid ""
"To improve cross platform consistency, :func:`~time.sleep` now raises a "
":exc:`ValueError` when passed a negative sleep value.  Previously this was "
"an error on posix, but produced an infinite sleep on Windows."
msgstr ""
"为了提高跨平台一致性，:func:`~time.sleep` 现在在传入负数睡眠值时会引发 "
":exc:`ValueError`。之前在posix上是错误，但在Windows上会导致无限睡眠。"

#: ../../whatsnew/3.3.rst:2080
msgid "types"
msgstr "types"

#: ../../whatsnew/3.3.rst:2082
msgid ""
"Add a new :class:`types.MappingProxyType` class: Read-only proxy of a "
"mapping. (:issue:`14386`)"
msgstr "添加新的 :class:`types.MappingProxyType` 类：映射的只读代理。（见 :issue:`14386`）"

#: ../../whatsnew/3.3.rst:2086
msgid ""
"The new functions :func:`types.new_class` and :func:`types.prepare_class` "
"provide support for :pep:`3115` compliant dynamic type creation. "
"(:issue:`14588`)"
msgstr ""
"新函数 :func:`types.new_class` 和 :func:`types.prepare_class` 提供了对 :pep:`3115` "
"兼容的动态类型创建的支持。（见 :issue:`14588`）"

#: ../../whatsnew/3.3.rst:2091
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.3.rst:2093
msgid ""
":meth:`.assertRaises`, :meth:`.assertRaisesRegex`, :meth:`.assertWarns`, and"
" :meth:`.assertWarnsRegex` now accept a keyword argument *msg* when used as "
"context managers.  (Contributed by Ezio Melotti and Winston Ewert in "
":issue:`10775`.)"
msgstr ""
":meth:`.assertRaises`，:meth:`.assertRaisesRegex`，:meth:`.assertWarns` 和 "
":meth:`.assertWarnsRegex` 现在接受一个关键字参数 *msg*，当用作上下文管理器时。（由Ezio "
"Melotti和Winston Ewert贡献，见 :issue:`10775`。）"

#: ../../whatsnew/3.3.rst:2098
msgid ""
":meth:`unittest.TestCase.run` now returns the :class:`~unittest.TestResult` "
"object."
msgstr ":meth:`unittest.TestCase.run` 现在返回 :class:`~unittest.TestResult` 对象。"

#: ../../whatsnew/3.3.rst:2103
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.3.rst:2105
msgid ""
"The :class:`~urllib.request.Request` class, now accepts a *method* argument "
"used by :meth:`~urllib.request.Request.get_method` to determine what HTTP "
"method should be used.  For example, this will send a ``'HEAD'`` request::"
msgstr ""
":class:`~urllib.request.Request` 类现在接受一个 *method* 参数，由 "
":meth:`~urllib.request.Request.get_method` 用于确定应使用哪种HTTP方法。例如，这将发送一个 "
"``'HEAD'`` 请求："

#: ../../whatsnew/3.3.rst:2109
msgid ">>> urlopen(Request('https://www.python.org', method='HEAD'))"
msgstr ">>> urlopen(Request('https://www.python.org', method='HEAD'))"

#: ../../whatsnew/3.3.rst:2111
msgid "(:issue:`1673007`)"
msgstr "（见 :issue:`1673007`）"

#: ../../whatsnew/3.3.rst:2115
msgid "webbrowser"
msgstr "webbrowser"

#: ../../whatsnew/3.3.rst:2117
msgid ""
"The :mod:`webbrowser` module supports more \"browsers\": Google Chrome "
"(named :program:`chrome`, :program:`chromium`, :program:`chrome-browser` or "
":program:`chromium-browser` depending on the version and operating system), "
"and the generic launchers :program:`xdg-open`, from the FreeDesktop.org "
"project, and :program:`gvfs-open`, which is the default URI handler for "
"GNOME 3.  (The former contributed by Arnaud Calmettes in :issue:`13620`, the"
" latter by Matthias Klose in :issue:`14493`.)"
msgstr ""
":mod:`webbrowser` 模块支持更多的“浏览器”：Google Chrome（根据版本和操作系统命名为 "
":program:`chrome`，:program:`chromium`，:program:`chrome-browser` 或 "
":program:`chromium-browser`），以及通用的启动器 :program:`xdg-"
"open`（来自FreeDesktop.org项目）和 :program:`gvfs-open`（GNOME "
"3的默认URI处理程序）。（前者由Arnaud Calmettes贡献，见 :issue:`13620`，后者由Matthias Klose贡献，见 "
":issue:`14493`。）"

#: ../../whatsnew/3.3.rst:2127
msgid "xml.etree.ElementTree"
msgstr "xml.etree.ElementTree"

#: ../../whatsnew/3.3.rst:2129
msgid ""
"The :mod:`xml.etree.ElementTree` module now imports its C accelerator by "
"default; there is no longer a need to explicitly import "
":mod:`!xml.etree.cElementTree` (this module stays for backwards "
"compatibility, but is now deprecated).  In addition,  the ``iter`` family of"
" methods of :class:`~xml.etree.ElementTree.Element` has been optimized "
"(rewritten in C). The module's documentation has also been greatly improved "
"with added examples and a more detailed reference."
msgstr ""

#: ../../whatsnew/3.3.rst:2139
msgid "zlib"
msgstr "zlib"

#: ../../whatsnew/3.3.rst:2141
msgid ""
"New attribute :attr:`zlib.Decompress.eof` makes it possible to distinguish "
"between a properly formed compressed stream and an incomplete or truncated "
"one. (Contributed by Nadeem Vawda in :issue:`12646`.)"
msgstr ""
"新属性 :attr:`zlib.Decompress.eof` 使得可以区分正确形成的压缩流和不完整或截断的压缩流。（由 Nadeem Vawda 在 "
":issue:`12646` 中贡献。）"

#: ../../whatsnew/3.3.rst:2145
msgid ""
"New attribute :const:`zlib.ZLIB_RUNTIME_VERSION` reports the version string "
"of the underlying ``zlib`` library that is loaded at runtime.  (Contributed "
"by Torsten Landschoff in :issue:`12306`.)"
msgstr ""
"新属性 :const:`zlib.ZLIB_RUNTIME_VERSION` 报告在运行时加载的底层 ``zlib`` 库的版本字符串。（由 "
"Torsten Landschoff 在 :issue:`12306` 中贡献。）"

#: ../../whatsnew/3.3.rst:2151
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.3.rst:2153
msgid "Major performance enhancements have been added:"
msgstr "已增加的主要性能改善:"

#: ../../whatsnew/3.3.rst:2155
msgid ""
"Thanks to :pep:`393`, some operations on Unicode strings have been "
"optimized:"
msgstr "得益于 :pep:`393`，Unicode 字符串的某些操作已得到优化："

#: ../../whatsnew/3.3.rst:2157
msgid "the memory footprint is divided by 2 to 4 depending on the text"
msgstr "内存占用根据文本内容减少到原来的 1/2 到 1/4。"

#: ../../whatsnew/3.3.rst:2158
msgid ""
"encode an ASCII string to UTF-8 doesn't need to encode characters anymore, "
"the UTF-8 representation is shared with the ASCII representation"
msgstr "将 ASCII 字符串编码为 UTF-8 不再需要对字符进行编码，UTF-8 的表示法与 ASCII 的表示法是共享的"

#: ../../whatsnew/3.3.rst:2160
msgid "the UTF-8 encoder has been optimized"
msgstr "UTF-8 编码器已优化。"

#: ../../whatsnew/3.3.rst:2161
msgid ""
"repeating a single ASCII letter and getting a substring of an ASCII string "
"is 4 times faster"
msgstr "重复单个 ASCII 字母和获取 ASCII 字符串的子字符串的速度提高了 4 倍。"

#: ../../whatsnew/3.3.rst:2164
msgid ""
"UTF-8 is now 2x to 4x faster.  UTF-16 encoding is now up to 10x faster."
msgstr "UTF-8 编码现在快 2 到 4 倍。  UTF-16 编码的速度现在提高了 10 倍。"

#: ../../whatsnew/3.3.rst:2166
msgid ""
"(Contributed by Serhiy Storchaka, :issue:`14624`, :issue:`14738` and "
":issue:`15026`.)"
msgstr ""
"（由 Serhiy Storchaka 在 :issue:`14624`、 :issue:`14738` 和 :issue:`15026` 中贡献。）"

#: ../../whatsnew/3.3.rst:2171
msgid "Build and C API Changes"
msgstr "构建和 C API 的改变"

#: ../../whatsnew/3.3.rst:2173
msgid "Changes to Python's build process and to the C API include:"
msgstr "针对 Python 构建过程和 C API 的改变包括:"

#: ../../whatsnew/3.3.rst:2175
msgid "New :pep:`3118` related function:"
msgstr "新的 :pep:`3118` 相关功能："

#: ../../whatsnew/3.3.rst:2177
msgid ":c:func:`PyMemoryView_FromMemory`"
msgstr ":c:func:`PyMemoryView_FromMemory`"

#: ../../whatsnew/3.3.rst:2179
msgid ":pep:`393` added new Unicode types, macros and functions:"
msgstr ":pep:`393` 添加了新的 Unicode 类型，宏和函数："

#: ../../whatsnew/3.3.rst:2181
msgid "High-level API:"
msgstr "高阶 API："

#: ../../whatsnew/3.3.rst:2183
msgid ":c:func:`PyUnicode_CopyCharacters`"
msgstr ":c:func:`PyUnicode_CopyCharacters`"

#: ../../whatsnew/3.3.rst:2184
msgid ":c:func:`PyUnicode_FindChar`"
msgstr ":c:func:`PyUnicode_FindChar`"

#: ../../whatsnew/3.3.rst:2185
msgid ":c:func:`PyUnicode_GetLength`, :c:macro:`PyUnicode_GET_LENGTH`"
msgstr ":c:func:`PyUnicode_GetLength`, :c:macro:`PyUnicode_GET_LENGTH`"

#: ../../whatsnew/3.3.rst:2186
msgid ":c:func:`PyUnicode_New`"
msgstr ":c:func:`PyUnicode_New`"

#: ../../whatsnew/3.3.rst:2187
msgid ":c:func:`PyUnicode_Substring`"
msgstr ":c:func:`PyUnicode_Substring`"

#: ../../whatsnew/3.3.rst:2188
msgid ":c:func:`PyUnicode_ReadChar`, :c:func:`PyUnicode_WriteChar`"
msgstr ":c:func:`PyUnicode_ReadChar`, :c:func:`PyUnicode_WriteChar`"

#: ../../whatsnew/3.3.rst:2190
msgid "Low-level API:"
msgstr "低阶 API:"

#: ../../whatsnew/3.3.rst:2192
msgid ":c:type:`Py_UCS1`, :c:type:`Py_UCS2`, :c:type:`Py_UCS4` types"
msgstr ":c:type:`Py_UCS1`, :c:type:`Py_UCS2`, :c:type:`Py_UCS4` 类型"

#: ../../whatsnew/3.3.rst:2193
msgid ""
":c:type:`PyASCIIObject` and :c:type:`PyCompactUnicodeObject` structures"
msgstr ":c:type:`PyASCIIObject` 和 :c:type:`PyCompactUnicodeObject` 结构"

#: ../../whatsnew/3.3.rst:2194
msgid ":c:macro:`PyUnicode_READY`"
msgstr ":c:macro:`PyUnicode_READY`"

#: ../../whatsnew/3.3.rst:2195
msgid ":c:func:`PyUnicode_FromKindAndData`"
msgstr ":c:func:`PyUnicode_FromKindAndData`"

#: ../../whatsnew/3.3.rst:2196
msgid ":c:func:`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsUCS4Copy`"
msgstr ":c:func:`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsUCS4Copy`"

#: ../../whatsnew/3.3.rst:2197
msgid ""
":c:macro:`PyUnicode_DATA`, :c:macro:`PyUnicode_1BYTE_DATA`, "
":c:macro:`PyUnicode_2BYTE_DATA`, :c:macro:`PyUnicode_4BYTE_DATA`"
msgstr ""
":c:macro:`PyUnicode_DATA`, :c:macro:`PyUnicode_1BYTE_DATA`, "
":c:macro:`PyUnicode_2BYTE_DATA`, :c:macro:`PyUnicode_4BYTE_DATA`"

#: ../../whatsnew/3.3.rst:2199
msgid ""
":c:macro:`PyUnicode_KIND` with :c:enum:`!PyUnicode_Kind` enum: "
":c:data:`!PyUnicode_WCHAR_KIND`, :c:data:`PyUnicode_1BYTE_KIND`, "
":c:data:`PyUnicode_2BYTE_KIND`, :c:data:`PyUnicode_4BYTE_KIND`"
msgstr ""

#: ../../whatsnew/3.3.rst:2202
msgid ""
":c:macro:`PyUnicode_READ`, :c:macro:`PyUnicode_READ_CHAR`, "
":c:macro:`PyUnicode_WRITE`"
msgstr ""
":c:macro:`PyUnicode_READ`, :c:macro:`PyUnicode_READ_CHAR`, "
":c:macro:`PyUnicode_WRITE`"

#: ../../whatsnew/3.3.rst:2203
msgid ":c:macro:`PyUnicode_MAX_CHAR_VALUE`"
msgstr ":c:macro:`PyUnicode_MAX_CHAR_VALUE`"

#: ../../whatsnew/3.3.rst:2205
msgid ""
":c:macro:`PyArg_ParseTuple` now accepts a :class:`bytearray` for the ``c`` "
"format (:issue:`12380`)."
msgstr ""
":c:macro:`PyArg_ParseTuple` 现在接受 ``c`` 格式的 :class:`bytearray` "
"(:issue:`12380`)。"

#: ../../whatsnew/3.3.rst:2211
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.3.rst:2214
msgid "Unsupported Operating Systems"
msgstr "不支持的操作系统"

#: ../../whatsnew/3.3.rst:2216
msgid "OS/2 and VMS are no longer supported due to the lack of a maintainer."
msgstr "由于缺少维护人员，不再支持 OS/2 和 VMS 系统 。"

#: ../../whatsnew/3.3.rst:2218
msgid ""
"Windows 2000 and Windows platforms which set ``COMSPEC`` to ``command.com`` "
"are no longer supported due to maintenance burden."
msgstr ""
"由于维护负担，将 ``COMSPEC`` 设置为 ``command.com`` 的 Windows平台（含Windows 2000）不再受支持。"

#: ../../whatsnew/3.3.rst:2221
msgid "OSF support, which was deprecated in 3.2, has been completely removed."
msgstr "OSF支持在3.2中被弃用，现在已经被完全删除。"

#: ../../whatsnew/3.3.rst:2225
msgid "Deprecated Python modules, functions and methods"
msgstr "已弃用的 Python 模块、函数和方法"

#: ../../whatsnew/3.3.rst:2227
msgid ""
"Passing a non-empty string to ``object.__format__()`` is deprecated, and "
"will produce a :exc:`TypeError` in Python 3.4 (:issue:`9856`)."
msgstr ""
"向 ``object.__format__()`` 传递非空字符串的做法已被弃用，在 Python 3.4 中会产生一个 "
":exc:`TypeError` (:issue:`9856`)。"

#: ../../whatsnew/3.3.rst:2229
msgid ""
"The ``unicode_internal`` codec has been deprecated because of the "
":pep:`393`, use UTF-8, UTF-16 (``utf-16-le`` or ``utf-16-be``), or UTF-32 "
"(``utf-32-le`` or ``utf-32-be``)"
msgstr ""
"由于 :pep:`393`，``unicode_internal`` 编解码器已被弃用。 请使用 UTF-8、UTF-16 (``utf-16-le``"
" 或 ``utf-16-be``) 或 UTF-32 (``utf-32-le`` 或 ``utf-32-be``)"

#: ../../whatsnew/3.3.rst:2232
msgid ""
":meth:`ftplib.FTP.nlst` and :meth:`ftplib.FTP.dir`: use "
":meth:`ftplib.FTP.mlsd`"
msgstr ""
":meth:`ftplib.FTP.nlst` 和 :meth:`ftplib.FTP.dir`：使用 :meth:`ftplib.FTP.mlsd`。"

#: ../../whatsnew/3.3.rst:2234
msgid ""
":func:`!platform.popen`: use the :mod:`subprocess` module. Check especially "
"the :ref:`subprocess-replacements` section (:issue:`11377`)."
msgstr ""

#: ../../whatsnew/3.3.rst:2236
msgid ""
":issue:`13374`: The Windows bytes API has been deprecated in the :mod:`os` "
"module. Use Unicode filenames, instead of bytes filenames, to not depend on "
"the ANSI code page anymore and to support any filename."
msgstr ""
":issue:`13374`：在 :mod:`os` 模块中，Windows 字节 API 已不推荐使用。使用 Unicode "
"文件名，而不是字节文件名，以便不再依赖 ANSI 代码页并支持任何文件名。"

#: ../../whatsnew/3.3.rst:2239
msgid ""
":issue:`13988`: The :mod:`!xml.etree.cElementTree` module is deprecated.  "
"The accelerator is used automatically whenever available."
msgstr ""

#: ../../whatsnew/3.3.rst:2241
msgid ""
"The behaviour of :func:`!time.clock` depends on the platform: use the new "
":func:`time.perf_counter` or :func:`time.process_time` function instead, "
"depending on your requirements, to have a well defined behaviour."
msgstr ""

#: ../../whatsnew/3.3.rst:2244
msgid "The :func:`!os.stat_float_times` function is deprecated."
msgstr ""

#: ../../whatsnew/3.3.rst:2245
msgid ":mod:`abc` module:"
msgstr ":mod:`abc` 模块："

#: ../../whatsnew/3.3.rst:2254
msgid ":mod:`importlib` package:"
msgstr ":mod:`importlib` 包："

#: ../../whatsnew/3.3.rst:2256
msgid ""
":meth:`importlib.abc.SourceLoader.path_mtime` is now deprecated in favour of"
" :meth:`importlib.abc.SourceLoader.path_stats` as bytecode files now store "
"both the modification time and size of the source file the bytecode file was"
" compiled from."
msgstr ""
"现在 :meth:`importlib.abc.SourceLoader.path_mtime` 已被弃用而应改用 "
":meth:`importlib.abc.SourceLoader.path_stats` "
"，因为字节码文件现在会同时储存编译出该字节码文件的源文件的修改时间和大小。"

#: ../../whatsnew/3.3.rst:2266
msgid "Deprecated functions and types of the C API"
msgstr "已弃用的 C API 函数和类型"

#: ../../whatsnew/3.3.rst:2268
msgid ""
"The :c:type:`Py_UNICODE` has been deprecated by :pep:`393` and will be "
"removed in Python 4. All functions using this type are deprecated:"
msgstr ""
":c:type:`Py_UNICODE` 已经在 :pep:`393` 弃用，并将于 Python 4 中移除。所有使用此类型的函数都已弃用："

#: ../../whatsnew/3.3.rst:2271
msgid ""
"Unicode functions and methods using :c:type:`Py_UNICODE` and "
":c:expr:`Py_UNICODE*` types:"
msgstr "使用 :c:type:`Py_UNICODE` 和 :c:expr:`Py_UNICODE*` 类型的 Unicode 函数和方法："

#: ../../whatsnew/3.3.rst:2274
msgid ""
":c:macro:`!PyUnicode_FromUnicode`: use :c:func:`PyUnicode_FromWideChar` or "
":c:func:`PyUnicode_FromKindAndData`"
msgstr ""
":c:macro:`!PyUnicode_FromUnicode`：使用 :c:func:`PyUnicode_FromWideChar` 或 "
":c:func:`PyUnicode_FromKindAndData`。"

#: ../../whatsnew/3.3.rst:2276
msgid ""
":c:macro:`!PyUnicode_AS_UNICODE`, :c:func:`!PyUnicode_AsUnicode`, "
":c:func:`!PyUnicode_AsUnicodeAndSize`: use "
":c:func:`PyUnicode_AsWideCharString`"
msgstr ""
":c:macro:`!PyUnicode_AS_UNICODE`、 :c:func:`!PyUnicode_AsUnicode`、 "
":c:func:`!PyUnicode_AsUnicodeAndSize`: 使用 "
":c:func:`PyUnicode_AsWideCharString`。"

#: ../../whatsnew/3.3.rst:2278
msgid ""
":c:macro:`!PyUnicode_AS_DATA`: use :c:macro:`PyUnicode_DATA` with "
":c:macro:`PyUnicode_READ` and :c:macro:`PyUnicode_WRITE`"
msgstr ""
":c:macro:`!PyUnicode_AS_DATA`: 使用 :c:macro:`PyUnicode_DATA` 结合 "
":c:macro:`PyUnicode_READ` 和 :c:macro:`PyUnicode_WRITE`"

#: ../../whatsnew/3.3.rst:2280
msgid ""
":c:macro:`!PyUnicode_GET_SIZE`, :c:func:`!PyUnicode_GetSize`: use "
":c:macro:`PyUnicode_GET_LENGTH` or :c:func:`PyUnicode_GetLength`"
msgstr ""
":c:macro:`!PyUnicode_GET_SIZE`、 :c:func:`!PyUnicode_GetSize`: 使用 "
":c:macro:`PyUnicode_GET_LENGTH` 或 :c:func:`PyUnicode_GetLength`"

#: ../../whatsnew/3.3.rst:2282
msgid ""
":c:macro:`!PyUnicode_GET_DATA_SIZE`: use ``PyUnicode_GET_LENGTH(str) * "
"PyUnicode_KIND(str)`` (only work on ready strings)"
msgstr ""
":c:macro:`!PyUnicode_GET_DATA_SIZE`: 使用 ``PyUnicode_GET_LENGTH(str) * "
"PyUnicode_KIND(str)`` (仅适用于已准备好的字符串)"

#: ../../whatsnew/3.3.rst:2285
msgid ""
":c:func:`!PyUnicode_AsUnicodeCopy`: use :c:func:`PyUnicode_AsUCS4Copy` or "
":c:func:`PyUnicode_AsWideCharString`"
msgstr ""
":c:func:`!PyUnicode_AsUnicodeCopy`: 使用 :c:func:`PyUnicode_AsUCS4Copy` 或 "
":c:func:`PyUnicode_AsWideCharString`"

#: ../../whatsnew/3.3.rst:2287
msgid ":c:func:`!PyUnicode_GetMax`"
msgstr ":c:func:`!PyUnicode_GetMax`"

#: ../../whatsnew/3.3.rst:2290
msgid "Functions and macros manipulating Py_UNICODE* strings:"
msgstr "操作 Py_UNICODE* 字符串的函数和宏："

#: ../../whatsnew/3.3.rst:2292
msgid ""
":c:macro:`!Py_UNICODE_strlen()`: use :c:func:`PyUnicode_GetLength` or "
":c:macro:`PyUnicode_GET_LENGTH`"
msgstr ""
":c:macro:`!Py_UNICODE_strlen()`: 使用 :c:func:`PyUnicode_GetLength` 或 "
":c:macro:`PyUnicode_GET_LENGTH`"

#: ../../whatsnew/3.3.rst:2294
msgid ""
":c:macro:`!Py_UNICODE_strcat()`: use :c:func:`PyUnicode_CopyCharacters` or "
":c:func:`PyUnicode_FromFormat`"
msgstr ""
":c:macro:`!Py_UNICODE_strcat()`: 使用 :c:func:`PyUnicode_CopyCharacters` 或 "
":c:func:`PyUnicode_FromFormat`"

#: ../../whatsnew/3.3.rst:2296
msgid ""
":c:macro:`!Py_UNICODE_strcpy()`, :c:macro:`!Py_UNICODE_strncpy()`, "
":c:macro:`!Py_UNICODE_COPY()`: use :c:func:`PyUnicode_CopyCharacters` or "
":c:func:`PyUnicode_Substring`"
msgstr ""
":c:macro:`!Py_UNICODE_strcpy()`, :c:macro:`!Py_UNICODE_strncpy()`, "
":c:macro:`!Py_UNICODE_COPY()`: 使用 :c:func:`PyUnicode_CopyCharacters` 或 "
":c:func:`PyUnicode_Substring`"

#: ../../whatsnew/3.3.rst:2299
msgid ":c:macro:`!Py_UNICODE_strcmp()`: use :c:func:`PyUnicode_Compare`"
msgstr ":c:macro:`!Py_UNICODE_strcmp()`: 使用 :c:func:`PyUnicode_Compare`"

#: ../../whatsnew/3.3.rst:2300
msgid ":c:macro:`!Py_UNICODE_strncmp()`: use :c:func:`PyUnicode_Tailmatch`"
msgstr ":c:macro:`!Py_UNICODE_strncmp()`: 使用 :c:func:`PyUnicode_Tailmatch`"

#: ../../whatsnew/3.3.rst:2301
msgid ""
":c:macro:`!Py_UNICODE_strchr()`, :c:macro:`!Py_UNICODE_strrchr()`: use "
":c:func:`PyUnicode_FindChar`"
msgstr ""
":c:macro:`!Py_UNICODE_strchr()`, :c:macro:`!Py_UNICODE_strrchr()`: 使用 "
":c:func:`PyUnicode_FindChar`"

#: ../../whatsnew/3.3.rst:2303
msgid ":c:macro:`!Py_UNICODE_FILL()`: use :c:func:`PyUnicode_Fill`"
msgstr ":c:macro:`!Py_UNICODE_FILL()`: 使用 :c:func:`PyUnicode_Fill`"

#: ../../whatsnew/3.3.rst:2304
msgid ":c:macro:`!Py_UNICODE_MATCH`"
msgstr ":c:macro:`!Py_UNICODE_MATCH`"

#: ../../whatsnew/3.3.rst:2306
msgid "Encoders:"
msgstr "编码器:"

#: ../../whatsnew/3.3.rst:2308
msgid ":c:func:`!PyUnicode_Encode`: use :c:func:`!PyUnicode_AsEncodedObject`"
msgstr ":c:func:`!PyUnicode_Encode`: 使用 :c:func:`!PyUnicode_AsEncodedObject`"

#: ../../whatsnew/3.3.rst:2309
msgid ":c:func:`!PyUnicode_EncodeUTF7`"
msgstr ":c:func:`!PyUnicode_EncodeUTF7`"

#: ../../whatsnew/3.3.rst:2310
msgid ""
":c:func:`!PyUnicode_EncodeUTF8`: use :c:func:`PyUnicode_AsUTF8` or "
":c:func:`PyUnicode_AsUTF8String`"
msgstr ""
":c:func:`!PyUnicode_EncodeUTF8`: 使用 :c:func:`PyUnicode_AsUTF8` 或 "
":c:func:`PyUnicode_AsUTF8String`"

#: ../../whatsnew/3.3.rst:2312
msgid ":c:func:`!PyUnicode_EncodeUTF32`"
msgstr ":c:func:`!PyUnicode_EncodeUTF32`"

#: ../../whatsnew/3.3.rst:2313
msgid ":c:func:`!PyUnicode_EncodeUTF16`"
msgstr ":c:func:`!PyUnicode_EncodeUTF16`"

#: ../../whatsnew/3.3.rst:2314
msgid ""
":c:func:`!PyUnicode_EncodeUnicodeEscape` use "
":c:func:`PyUnicode_AsUnicodeEscapeString`"
msgstr ""
":c:func:`!PyUnicode_EncodeUnicodeEscape` 使用 "
":c:func:`PyUnicode_AsUnicodeEscapeString`"

#: ../../whatsnew/3.3.rst:2316
msgid ""
":c:func:`!PyUnicode_EncodeRawUnicodeEscape` use "
":c:func:`PyUnicode_AsRawUnicodeEscapeString`"
msgstr ""
":c:func:`!PyUnicode_EncodeRawUnicodeEscape` 使用 "
":c:func:`PyUnicode_AsRawUnicodeEscapeString`"

#: ../../whatsnew/3.3.rst:2318
msgid ""
":c:func:`!PyUnicode_EncodeLatin1`: use :c:func:`PyUnicode_AsLatin1String`"
msgstr ""
":c:func:`!PyUnicode_EncodeLatin1`: 使用 :c:func:`PyUnicode_AsLatin1String`"

#: ../../whatsnew/3.3.rst:2319
msgid ""
":c:func:`!PyUnicode_EncodeASCII`: use :c:func:`PyUnicode_AsASCIIString`"
msgstr ""
":c:func:`!PyUnicode_EncodeASCII`: 使用 :c:func:`PyUnicode_AsASCIIString`"

#: ../../whatsnew/3.3.rst:2320
msgid ":c:func:`!PyUnicode_EncodeCharmap`"
msgstr ":c:func:`!PyUnicode_EncodeCharmap`"

#: ../../whatsnew/3.3.rst:2321
msgid ":c:func:`!PyUnicode_TranslateCharmap`"
msgstr ":c:func:`!PyUnicode_TranslateCharmap`"

#: ../../whatsnew/3.3.rst:2322
msgid ""
":c:func:`!PyUnicode_EncodeMBCS`: use :c:func:`PyUnicode_AsMBCSString` or "
":c:func:`PyUnicode_EncodeCodePage` (with ``CP_ACP`` code_page)"
msgstr ""
":c:func:`!PyUnicode_EncodeMBCS`: 使用 :c:func:`PyUnicode_AsMBCSString` 或 "
":c:func:`PyUnicode_EncodeCodePage` (用 ``CP_ACP`` code_page)"

#: ../../whatsnew/3.3.rst:2324
msgid ""
":c:func:`!PyUnicode_EncodeDecimal`, "
":c:func:`!PyUnicode_TransformDecimalToASCII`"
msgstr ""
":c:func:`!PyUnicode_EncodeDecimal`、 "
":c:func:`!PyUnicode_TransformDecimalToASCII`"

#: ../../whatsnew/3.3.rst:2329
msgid "Deprecated features"
msgstr "弃用的特性"

#: ../../whatsnew/3.3.rst:2331
msgid ""
"The :mod:`array` module's ``'u'`` format code is now deprecated and will be "
"removed in Python 4 together with the rest of the (:c:type:`Py_UNICODE`) "
"API."
msgstr ""
":mod:`array` 模块的 ``'u'`` 格式代码现已弃用，将在 Python 4 中与 (:c:type:`Py_UNICODE`) API "
"的其他部分一起删除。"

#: ../../whatsnew/3.3.rst:2336
msgid "Porting to Python 3.3"
msgstr "移植到 Python 3.3"

#: ../../whatsnew/3.3.rst:2338
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.3.rst:2344
msgid "Porting Python code"
msgstr "移植 Python 代码"

#: ../../whatsnew/3.3.rst:2346
msgid ""
"Hash randomization is enabled by default. Set the :envvar:`PYTHONHASHSEED` "
"environment variable to ``0`` to disable hash randomization. See also the "
":meth:`object.__hash__` method."
msgstr ""
"默认启用哈希随机化。 将 :envvar:`PYTHONHASHSEED` 环境变量设为 ``0`` 可禁用哈希随机化。 另请参阅 "
":meth:`object.__hash__` 方法。"

#: ../../whatsnew/3.3.rst:2350
msgid ""
":issue:`12326`: On Linux, sys.platform doesn't contain the major version "
"anymore. It is now always 'linux', instead of 'linux2' or 'linux3' depending"
" on the Linux version used to build Python. Replace sys.platform == 'linux2'"
" with sys.platform.startswith('linux'), or directly sys.platform == 'linux' "
"if you don't need to support older Python versions."
msgstr ""
":issue:`12326`: 在 Linux 上，sys.platform 不再包含主要版本。现在它始终是 \"linux\"，而不是 "
"\"linux2\" 或 \"linux3\"，这取决于用于构建 Python 的 Linux 版本。请用 "
"sys.platform.startswith('linux') 替换 sys.platform == 'linux2'，如果不需要支持较旧的 "
"Python 版本，则可直接替换成 sys.platform == 'linux'。"

#: ../../whatsnew/3.3.rst:2356
msgid ""
":issue:`13847`, :issue:`14180`: :mod:`time` and :mod:`datetime`: "
":exc:`OverflowError` is now raised instead of :exc:`ValueError` if a "
"timestamp is out of range. :exc:`OSError` is now raised if C functions "
":c:func:`gmtime` or :c:func:`localtime` failed."
msgstr ""
":issue:`13847`、 :issue:`14180`: :mod:`time` 和 :mod:`datetime`: "
"现在如果时间戳超出范围将会引发 :exc:`OverflowError` 而不是 :exc:`ValueError`。 现在如果 C 函数 "
":c:func:`gmtime` 或 :c:func:`localtime` 失败将会引发 :exc:`OSError`。"

#: ../../whatsnew/3.3.rst:2361
msgid ""
"The default finders used by import now utilize a cache of what is contained "
"within a specific directory. If you create a Python source file or "
"sourceless bytecode file, make sure to call "
":func:`importlib.invalidate_caches` to clear out the cache for the finders "
"to notice the new file."
msgstr ""
"import 使用的默认查找器现在利用特定目录内容的缓存。如果您创建了一个 Python 源文件或无源字节码文件，请确保调用 "
":func:`importlib.invalidate_caches` 以清除缓存，以便查找器能够注意到新文件。"

#: ../../whatsnew/3.3.rst:2366
msgid ""
":exc:`ImportError` now uses the full name of the module that was attempted "
"to be imported. Doctests that check ImportErrors' message will need to be "
"updated to use the full name of the module instead of just the tail of the "
"name."
msgstr ""
":exc:`ImportError` 现在使用尝试导入的模块的完整名称。检查 ImportError 消息的 doctest "
"需要更新为使用模块的完整名称，而不仅仅是名称的尾部。"

#: ../../whatsnew/3.3.rst:2371
msgid ""
"The *index* argument to :func:`__import__` now defaults to 0 instead of -1 "
"and no longer support negative values. It was an oversight when :pep:`328` "
"was implemented that the default value remained -1. If you need to continue "
"to perform a relative import followed by an absolute import, then perform "
"the relative import using an index of 1, followed by another import using an"
" index of 0. It is preferred, though, that you use "
":func:`importlib.import_module` rather than call :func:`__import__` "
"directly."
msgstr ""
":func:`__import__` 函数的 *index* 参数现在默认值为 0，而不是 -1，并且不再支持负值。在实现 :pep:`328` "
"时，默认值仍为 -1 是一个疏忽。如果你需要继续执行相对导入后再进行绝对导入，可以使用索引为 1 的相对导入，然后再使用索引为 0 "
"的另一个导入。不过，建议使用 :func:`importlib.import_module` 而不是直接调用 :func:`__import__`。"

#: ../../whatsnew/3.3.rst:2379
msgid ""
":func:`__import__` no longer allows one to use an index value other than 0 "
"for top-level modules. E.g. ``__import__('sys', level=1)`` is now an error."
msgstr ""
":func:`__import__` 不再允许对顶层模块使用除 0 以外的索引值。例如，``__import__('sys', level=1)`` "
"现在是一个错误。"

#: ../../whatsnew/3.3.rst:2382
msgid ""
"Because :data:`sys.meta_path` and :data:`sys.path_hooks` now have finders on"
" them by default, you will most likely want to use :meth:`!list.insert` "
"instead of :meth:`!list.append` to add to those lists."
msgstr ""

#: ../../whatsnew/3.3.rst:2386
msgid ""
"Because ``None`` is now inserted into :data:`sys.path_importer_cache`, if "
"you are clearing out entries in the dictionary of paths that do not have a "
"finder, you will need to remove keys paired with values of ``None`` **and** "
":class:`!imp.NullImporter` to be backwards-compatible. This will lead to "
"extra overhead on older versions of Python that re-insert ``None`` into "
":data:`sys.path_importer_cache` where it represents the use of implicit "
"finders, but semantically it should not change anything."
msgstr ""
"由于 ``None`` 现在会被插入到 :data:`sys.path_importer_cache` "
"中，如果你正在清除路径字典中没有查找器的条目，你需要移除与 ``None`` **和** :class:`!imp.NullImporter` "
"配对的键，以保持向后兼容。这在旧版本的 Python 中会导致额外的开销，因为它们会重新将 ``None`` 插入到 "
":data:`sys.path_importer_cache` 中，表示使用隐式查找器，但从语义上讲，这不应改变任何内容。"

#: ../../whatsnew/3.3.rst:2394
msgid ""
":class:`!importlib.abc.Finder` no longer specifies a ``find_module()`` "
"abstract method that must be implemented. If you were relying on subclasses "
"to implement that method, make sure to check for the method's existence "
"first. You will probably want to check for ``find_loader()`` first, though, "
"in the case of working with :term:`path entry finders <path entry finder>`."
msgstr ""
":class:`!importlib.abc.Finder` 不再指定必须实现的 ``find_module()`` "
"抽象方法。如果你依赖于子类实现该方法，请确保首先检查该方法的存在。不过，在处理 :term:`路径条目查找器 <path entry finder>` "
"时，你可能首先需要检查 ``find_loader()``。"

#: ../../whatsnew/3.3.rst:2400
msgid ""
":mod:`pkgutil` has been converted to use :mod:`importlib` internally. This "
"eliminates many edge cases where the old behaviour of the :pep:`302` import "
"emulation failed to match the behaviour of the real import system. The "
"import emulation itself is still present, but is now deprecated. The "
":func:`pkgutil.iter_importers` and :func:`pkgutil.walk_packages` functions "
"special case the standard import hooks so they are still supported even "
"though they do not provide the non-standard ``iter_modules()`` method."
msgstr ""
":mod:`pkgutil` 已内部转换为使用 :mod:`importlib`。这消除了许多边缘情况，在这些情况下，旧的 :pep:`302` "
"导入模拟行为未能与真实导入系统的行为匹配。导入模拟本身仍然存在，但现在已被弃用。:func:`pkgutil.iter_importers` 和 "
":func:`pkgutil.walk_packages` 函数特别处理标准导入钩子，因此它们仍然受支持，尽管它们不提供非标准的 "
"``iter_modules()`` 方法。"

#: ../../whatsnew/3.3.rst:2408
msgid ""
"A longstanding RFC-compliance bug (:issue:`1079`) in the parsing done by "
":func:`email.header.decode_header` has been fixed.  Code that uses the "
"standard idiom to convert encoded headers into unicode "
"(``str(make_header(decode_header(h))``) will see no change, but code that "
"looks at the individual tuples returned by decode_header will see that "
"whitespace that precedes or follows ``ASCII`` sections is now included in "
"the ``ASCII`` section.  Code that builds headers using ``make_header`` "
"should also continue to work without change, since ``make_header`` continues"
" to add whitespace between ``ASCII`` and non-``ASCII`` sections if it is not"
" already present in the input strings."
msgstr ""
"在 :func:`email.header.decode_header` 所做的解析中，一个长期存在的 RFC 兼容性错误 "
"(:issue:`1079`) 已被修复。使用标准习惯用法将编码的头部转换为 "
"unicode（``str(make_header(decode_header(h)))``）的代码将看不到任何变化，但查看 decode_header"
" 返回的各个元组的代码将看到，现在 ``ASCII`` 部分前后的空白符被包含在 ``ASCII`` 部分中。使用 ``make_header`` "
"构建头部的代码也应继续工作而无需更改，因为 ``make_header`` 在输入字符串中未显式包含空白字符时，仍会继续在 ``ASCII`` 和非 "
"``ASCII`` 部分之间添加空白符。"

#: ../../whatsnew/3.3.rst:2419
msgid ""
":func:`email.utils.formataddr` now does the correct content transfer "
"encoding when passed non-``ASCII`` display names.  Any code that depended on"
" the previous buggy behavior that preserved the non-``ASCII`` unicode in the"
" formatted output string will need to be changed (:issue:`1690608`)."
msgstr ""
":func:`email.utils.formataddr` 现在在传递非 ``ASCII`` "
"显示名称时执行正确的内容传输编码。任何依赖于以前错误行为（在格式化的输出字符串中保留非 ``ASCII`` unicode）的代码都需要更改 "
"(:issue:`1690608`)。"

#: ../../whatsnew/3.3.rst:2424
msgid ""
":meth:`poplib.POP3.quit` may now raise protocol errors like all other "
"``poplib`` methods.  Code that assumes ``quit`` does not raise "
":exc:`poplib.error_proto` errors may need to be changed if errors on "
"``quit`` are encountered by a particular application (:issue:`11291`)."
msgstr ""
":meth:`poplib.POP3.quit` 现在可能会像所有其他 ``poplib`` 方法一样引发协议错误。假设 ``quit`` 不引发 "
":exc:`poplib.error_proto` 错误的代码，如果特定应用程序在 ``quit`` 时遇到错误，可能需要更改 "
"(:issue:`11291`)。"

#: ../../whatsnew/3.3.rst:2429
msgid ""
"The ``strict`` argument to :class:`email.parser.Parser`, deprecated since "
"Python 2.4, has finally been removed."
msgstr ""
"自 Python 2.4 起被弃用的 :class:`email.parser.Parser` 的 ``strict`` 参数已被最终移除。"

#: ../../whatsnew/3.3.rst:2432
msgid ""
"The deprecated method ``unittest.TestCase.assertSameElements`` has been "
"removed."
msgstr "已被弃用的方法 ``unittest.TestCase.assertSameElements`` 已被移除。"

#: ../../whatsnew/3.3.rst:2435
msgid "The deprecated variable ``time.accept2dyear`` has been removed."
msgstr "已被弃用的变量 ``time.accept2dyear`` 已被移除。"

#: ../../whatsnew/3.3.rst:2437
msgid ""
"The deprecated ``Context._clamp`` attribute has been removed from the "
":mod:`decimal` module.  It was previously replaced by the public attribute "
":attr:`~decimal.Context.clamp`.  (See :issue:`8540`.)"
msgstr ""
"已被弃用的 ``Context._clamp`` 属性已从 :mod:`decimal` 模块中移除。 在此之前它已被公有属性 "
":attr:`~decimal.Context.clamp` 取代。 （参见 :issue:`8540`。）"

#: ../../whatsnew/3.3.rst:2441
msgid ""
"The undocumented internal helper class ``SSLFakeFile`` has been removed from"
" :mod:`smtplib`, since its functionality has long been provided directly by "
":meth:`socket.socket.makefile`."
msgstr ""
"未记录的内部辅助类 ``SSLFakeFile`` 已从 :mod:`smtplib` 中移除，因为其功能早已直接由 "
":meth:`socket.socket.makefile` 提供。"

#: ../../whatsnew/3.3.rst:2445
msgid ""
"Passing a negative value to :func:`time.sleep` on Windows now raises an "
"error instead of sleeping forever.  It has always raised an error on posix."
msgstr ""
"在 Windows 上向 :func:`time.sleep` 传递负值现在会引发错误，而不是永远休眠。在 POSIX 上它一直会引发错误。"

#: ../../whatsnew/3.3.rst:2448
msgid ""
"The ``ast.__version__`` constant has been removed.  If you need to make "
"decisions affected by the AST version, use :data:`sys.version_info` to make "
"the decision."
msgstr ""
"``ast.__version__`` 常量已被移除。如果需要根据 AST 版本做出决策，请使用 :data:`sys.version_info` "
"来进行决策。"

#: ../../whatsnew/3.3.rst:2452
msgid ""
"Code that used to work around the fact that the :mod:`threading` module used"
" factory functions by subclassing the private classes will need to change to"
" subclass the now-public classes."
msgstr "过去那些通过继承私有类来绕过 :mod:`threading` 模块使用工厂函数限制的代码，现在需要调整为继承新公开的类。"

#: ../../whatsnew/3.3.rst:2456
msgid ""
"The undocumented debugging machinery in the threading module has been "
"removed, simplifying the code.  This should have no effect on production "
"code, but is mentioned here in case any application debug frameworks were "
"interacting with it (:issue:`13550`)."
msgstr ""
"threading 模块中未记录的调试机制已被移除，简化了代码。这对生产代码应无影响，但在此提及以防有应用程序调试框架与其交互 "
"(:issue:`13550`)。"

#: ../../whatsnew/3.3.rst:2463
msgid "Porting C code"
msgstr "移植 C 代码"

#: ../../whatsnew/3.3.rst:2465
msgid ""
"In the course of changes to the buffer API the undocumented "
":c:member:`!smalltable` member of the :c:type:`Py_buffer` structure has been"
" removed and the layout of the :c:type:`!PyMemoryViewObject` has changed."
msgstr ""

#: ../../whatsnew/3.3.rst:2470
msgid ""
"All extensions relying on the relevant parts in ``memoryobject.h`` or "
"``object.h`` must be rebuilt."
msgstr "所有依赖于 ``memoryobject.h`` 或 ``object.h`` 中相关部分的扩展必须重新构建。"

#: ../../whatsnew/3.3.rst:2473
msgid ""
"Due to :ref:`PEP 393 <pep-393>`, the :c:type:`Py_UNICODE` type and all "
"functions using this type are deprecated (but will stay available for at "
"least five years).  If you were using low-level Unicode APIs to construct "
"and access unicode objects and you want to benefit of the memory footprint "
"reduction provided by :pep:`393`, you have to convert your code to the new "
":doc:`Unicode API <../c-api/unicode>`."
msgstr ""
"由于 :ref:`PEP 393 <pep-393>`，:c:type:`Py_UNICODE` "
"类型及所有使用此类型的功能已被弃用（但至少在未来五年内仍将可用）。如果您曾使用低级 Unicode API 来构造和访问 Unicode "
"对象，并希望受益于 :pep:`393` 提供的内存占用减少，您必须将代码转换为新的 :doc:`Unicode API "
"<../c-api/unicode>`。"

#: ../../whatsnew/3.3.rst:2480
msgid ""
"However, if you only have been using high-level functions such as "
":c:func:`PyUnicode_Concat()`, :c:func:`PyUnicode_Join` or "
":c:func:`PyUnicode_FromFormat()`, your code will automatically take "
"advantage of the new unicode representations."
msgstr ""
"然而，如果您仅使用过高级函数如 :c:func:`PyUnicode_Concat()`、:c:func:`PyUnicode_Join` 或 "
":c:func:`PyUnicode_FromFormat()`，您的代码将自动利用新的 Unicode 表示形式。"

#: ../../whatsnew/3.3.rst:2485
msgid ":c:func:`PyImport_GetMagicNumber` now returns ``-1`` upon failure."
msgstr ":c:func:`PyImport_GetMagicNumber` 在失败时现在返回 ``-1``。"

#: ../../whatsnew/3.3.rst:2487
msgid ""
"As a negative value for the *level* argument to :func:`__import__` is no "
"longer valid, the same now holds for :c:func:`PyImport_ImportModuleLevel`. "
"This also means that the value of *level* used by "
":c:func:`PyImport_ImportModuleEx` is now ``0`` instead of ``-1``."
msgstr ""
"由于 *level* 参数的负值对 :func:`__import__` 已不再有效，同样的情况现在也适用于 "
":c:func:`PyImport_ImportModuleLevel`。这也意味着 :c:func:`PyImport_ImportModuleEx`"
" 使用的 *level* 值现在是 ``0`` 而不是 ``-1``。"

#: ../../whatsnew/3.3.rst:2494
msgid "Building C extensions"
msgstr "构建 C 扩展"

#: ../../whatsnew/3.3.rst:2496
msgid ""
"The range of possible file names for C extensions has been narrowed. Very "
"rarely used spellings have been suppressed: under POSIX, files named "
"``xxxmodule.so``, ``xxxmodule.abi3.so`` and ``xxxmodule.cpython-*.so`` are "
"no longer recognized as implementing the ``xxx`` module.  If you had been "
"generating such files, you have to switch to the other spellings (i.e., "
"remove the ``module`` string from the file names)."
msgstr ""
"C 扩展的可能文件名范围已经缩小。非常少用的拼写已被抑制：在 POSIX 下，名为 "
"``xxxmodule.so``、``xxxmodule.abi3.so`` 和 ``xxxmodule.cpython-*.so`` "
"的文件不再被识别为实现了 ``xxx`` 模块。如果你之前生成了这样的文件，你必须切换到其他拼写（即，从文件名中移除 ``module`` 字符串）。"

#: ../../whatsnew/3.3.rst:2504
msgid "(implemented in :issue:`14040`.)"
msgstr "（在 :issue:`14040` 中实现。）"

#: ../../whatsnew/3.3.rst:2508
msgid "Command Line Switch Changes"
msgstr "命令行开关的变化"

#: ../../whatsnew/3.3.rst:2510
msgid ""
"The -Q command-line flag and related artifacts have been removed.  Code "
"checking sys.flags.division_warning will need updating."
msgstr "删除了 -Q命令行旗标和相关工具。 检查 sys.flags.division_warning 的代码需要更新。"

#: ../../whatsnew/3.3.rst:2513
msgid "(:issue:`10998`, contributed by Éric Araujo.)"
msgstr "（由 Éric Araujo 在 :issue:`10998` 中贡献。）"

#: ../../whatsnew/3.3.rst:2515
msgid ""
"When :program:`python` is started with :option:`-S`, ``import site`` will no"
" longer add site-specific paths to the module search paths.  In previous "
"versions, it did."
msgstr ""
"当 :program:`python` 附带 :option:`-S` 启动时，``import site`` 将不再向模块搜索路径添加 site "
"专属路径。 在之前版本中则会这样做。"

#: ../../whatsnew/3.3.rst:2519
msgid ""
"(:issue:`11591`, contributed by Carl Meyer with editions by Éric Araujo.)"
msgstr "（由 Carl Meyer 在 :issue:`11591` 中贡献并由 Éric Araujo 进行修改。）"

#: ../../whatsnew/3.3.rst:396
msgid "yield"
msgstr "yield"

#: ../../whatsnew/3.3.rst:396
msgid "yield from (in What's New)"
msgstr "yield from（在\"有什么新变化\"部分）"
