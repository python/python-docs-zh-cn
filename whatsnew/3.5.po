# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 16:48+0000\n"
"PO-Revision-Date: 2025-07-18 20:07+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.5.rst:3
msgid "What's New In Python 3.5"
msgstr "Python 3.5 有什么新变化"

#: ../../whatsnew/3.5.rst:0
msgid "Editors"
msgstr "编者"

#: ../../whatsnew/3.5.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"

#: ../../whatsnew/3.5.rst:47
msgid ""
"This article explains the new features in Python 3.5, compared to 3.4. "
"Python 3.5 was released on September 13, 2015.  See the `changelog "
"<https://docs.python.org/3.5/whatsnew/changelog.html>`_ for a full list of "
"changes."
msgstr ""
"这篇文章介绍了 Python 3.5 相比 3.4 增加的新特性。 Python 3.5 发布于 2015 年 9 月 13 日。 "
"更完整的变化清单请参阅 `changelog "
"<https://docs.python.org/3.5/whatsnew/changelog.html>`_。"

#: ../../whatsnew/3.5.rst:54
msgid ":pep:`478` - Python 3.5 Release Schedule"
msgstr ":pep:`478` - Python 3.5 发布计划"

#: ../../whatsnew/3.5.rst:58
msgid "Summary -- Release highlights"
msgstr "摘要 -- 发布重点"

#: ../../whatsnew/3.5.rst:60
msgid "New syntax features:"
msgstr "新的语法特性："

#: ../../whatsnew/3.5.rst:62
msgid ""
":ref:`PEP 492 <whatsnew-pep-492>`, coroutines with async and await syntax."
msgstr ":ref:`PEP 492 <whatsnew-pep-492>`, 使用 async 和 await 语法实现协程。"

#: ../../whatsnew/3.5.rst:63
msgid ""
":ref:`PEP 465 <whatsnew-pep-465>`, a new matrix multiplication operator: ``a"
" @ b``."
msgstr ":ref:`PEP 465 <whatsnew-pep-465>`, 新的矩阵乘法运算符: ``a @ b``."

#: ../../whatsnew/3.5.rst:64
msgid ""
":ref:`PEP 448 <whatsnew-pep-448>`, additional unpacking generalizations."
msgstr ":ref:`PEP 448 <whatsnew-pep-448>`, 额外的解包通用化。"

#: ../../whatsnew/3.5.rst:67
msgid "New library modules:"
msgstr "新的库模块："

#: ../../whatsnew/3.5.rst:69
msgid ":mod:`typing`: :ref:`PEP 484 -- Type Hints <whatsnew-pep-484>`."
msgstr ":mod:`typing`: :ref:`PEP 484 —— 类型注解 <whatsnew-pep-484>`."

#: ../../whatsnew/3.5.rst:70
msgid ""
":mod:`zipapp`: :ref:`PEP 441 Improving Python ZIP Application Support "
"<whatsnew-zipapp>`."
msgstr ":mod:`zipapp`: :ref:`PEP 441 改进Python ZIP应用程序支持 <whatsnew-zipapp>`."

#: ../../whatsnew/3.5.rst:74
msgid "New built-in features:"
msgstr "新的内置特性："

#: ../../whatsnew/3.5.rst:76
msgid ""
"``bytes % args``, ``bytearray % args``: :ref:`PEP 461 <whatsnew-pep-461>` --"
" Adding ``%`` formatting to bytes and bytearray."
msgstr ""
"``bytes % args``, ``bytearray % args``: :ref:`PEP 461 <whatsnew-pep-461>` --"
" 为字节串和字节数组增加 ``%`` 格式化。"

#: ../../whatsnew/3.5.rst:79
msgid ""
"New :meth:`bytes.hex`, :meth:`bytearray.hex` and :meth:`memoryview.hex` "
"methods. (Contributed by Arnon Yaari in :issue:`9951`.)"
msgstr ""
"新增 :meth:`bytes.hex`, :meth:`bytearray.hex` 和 :meth:`memoryview.hex` 方法。 （由 "
"Arnon Yaari 在 :issue:`9951` 中贡献。）"

#: ../../whatsnew/3.5.rst:82
msgid ""
":class:`memoryview` now supports tuple indexing (including multi-"
"dimensional). (Contributed by Antoine Pitrou in :issue:`23632`.)"
msgstr ""
":class:`memoryview` 现在支持元组索引（包括多维度）。 （由 Antoine Pitrou 在 :issue:`23632` "
"中贡献。）"

#: ../../whatsnew/3.5.rst:85
msgid ""
"Generators have a new ``gi_yieldfrom`` attribute, which returns the object "
"being iterated by ``yield from`` expressions. (Contributed by Benno Leslie "
"and Yury Selivanov in :issue:`24450`.)"
msgstr ""
"生成器具有一个新的 ``gi_yieldfrom`` 属性，它将返回 ``yield from`` 表达式所迭代的对象。 （由 Benno Leslie"
" 和 Yury Selivanov 在 :issue:`24450` 中贡献。）"

#: ../../whatsnew/3.5.rst:89
msgid ""
"A new :exc:`RecursionError` exception is now raised when maximum recursion "
"depth is reached.  (Contributed by Georg Brandl in :issue:`19235`.)"
msgstr ""
"现在当达到最大递归尝试时将引发新的 :exc:`RecursionError` 异常。 （由 Georg Brandl 在 :issue:`19235`"
" 中贡献。）"

#: ../../whatsnew/3.5.rst:94
msgid "CPython implementation improvements:"
msgstr "CPython 实现的改进："

#: ../../whatsnew/3.5.rst:96
msgid ""
"When the ``LC_TYPE`` locale is the POSIX locale (``C`` locale), "
":py:data:`sys.stdin` and :py:data:`sys.stdout` now use the "
"``surrogateescape`` error handler, instead of the ``strict`` error handler. "
"(Contributed by Victor Stinner in :issue:`19977`.)"
msgstr ""
"当 ``LC_TYPE`` 语言区域为 POSIX 语言区域（即 ``C`` 语言区域）时，:py:data:`sys.stdin` 和 "
":py:data:`sys.stdout` 现在将使用 ``surrogateescape`` 错误处理器，而不是 ``strict`` 错误处理器。 "
"（由 Victor Stinner 在 :issue:`19977` 中贡献。）"

#: ../../whatsnew/3.5.rst:101
msgid ""
"``.pyo`` files are no longer used and have been replaced by a more flexible "
"scheme that includes the optimization level explicitly in ``.pyc`` name. "
"(See :ref:`PEP 488 overview <whatsnew-pep-488>`.)"
msgstr ""
"``.pyo`` 文件已不再被使用而是被替换为一个更灵活的方案即在 ``.pyc`` 名称中显式地包括优化级别。 （参见 :ref:`PEP 488 "
"概览 <whatsnew-pep-488>`。）"

#: ../../whatsnew/3.5.rst:105
msgid ""
"Builtin and extension modules are now initialized in a multi-phase process, "
"which is similar to how Python modules are loaded. (See :ref:`PEP 489 "
"overview <whatsnew-pep-489>`.)"
msgstr ""
"内置与扩展模块现在将经过多阶段的过程被初始化，这类似于 Python 模块的加载方式。 （参见 :ref:`PEP 489 概览 <whatsnew-"
"pep-489>`。）"

#: ../../whatsnew/3.5.rst:110
msgid "Significant improvements in the standard library:"
msgstr "标准库中的重大改进："

#: ../../whatsnew/3.5.rst:112
msgid ""
":class:`collections.OrderedDict` is now :ref:`implemented in C <whatsnew-"
"ordereddict>`, which makes it 4 to 100 times faster."
msgstr ""
":class:`collections.OrderedDict` 现在已 :ref:`用 C 实现 <whatsnew-"
"ordereddict>`，这使它的速度快了 4 到 100 部。"

#: ../../whatsnew/3.5.rst:116
msgid ""
"The :mod:`ssl` module gained :ref:`support for Memory BIO <whatsnew-"
"sslmemorybio>`, which decouples SSL protocol handling from network IO."
msgstr ""
"The :mod:`ssl` 模块获得了 :ref:`对内存 BIO 的支持 <whatsnew-sslmemorybio>`，它使得 SSL "
"协议处理与网络 IO 实现了解耦。"

#: ../../whatsnew/3.5.rst:120
msgid ""
"The new :func:`os.scandir` function provides a :ref:`better and "
"significantly faster way <whatsnew-pep-471>` of directory traversal."
msgstr ""
"新的 :func:`os.scandir` 函数提供了对于目录遍历 :ref:`更好和明显更快速的方式 <whatsnew-pep-471>`。"

#: ../../whatsnew/3.5.rst:124
msgid ""
":func:`functools.lru_cache` has been mostly :ref:`reimplemented in C "
"<whatsnew-lrucache>`, yielding much better performance."
msgstr ""
":func:`functools.lru_cache` 已经大部分 :ref:`用 C 重新实现 <whatsnew-"
"lrucache>`，产生了更好的性能。"

#: ../../whatsnew/3.5.rst:128
msgid ""
"The new :func:`subprocess.run` function provides a :ref:`streamlined way to "
"run subprocesses <whatsnew-subprocess>`."
msgstr ""
"新的 :func:`subprocess.run` 函数提供了一个 :ref:`运行子进程的简便方式 <whatsnew-subprocess>`。"

#: ../../whatsnew/3.5.rst:131
msgid ""
"The :mod:`traceback` module has been significantly :ref:`enhanced <whatsnew-"
"traceback>` for improved performance and developer convenience."
msgstr ":mod:`traceback` 模块已被显著 :ref:`增强 <whatsnew-traceback>` 以改善性能和开发者便捷度。"

#: ../../whatsnew/3.5.rst:136
msgid "Security improvements:"
msgstr "安全改进："

#: ../../whatsnew/3.5.rst:138
msgid ""
"SSLv3 is now disabled throughout the standard library. It can still be "
"enabled by instantiating a :class:`ssl.SSLContext` manually.  (See "
":issue:`22638` for more details; this change was backported to CPython 3.4 "
"and 2.7.)"
msgstr ""
"SSLv3 目前在整个标准库中被禁用。 它仍然可以通过手动实例化一个 :class:`ssl.SSLContext` 来启用。 （请参阅 "
":issue:`22638` 了解详情；此修改已向下移植到 CPython 3.4 和 2.7。）"

#: ../../whatsnew/3.5.rst:143
msgid ""
"HTTP cookie parsing is now stricter, in order to protect against potential "
"injection attacks. (Contributed by Antoine Pitrou in :issue:`22796`.)"
msgstr ""
"HTTP cookie 解析现在将更严格，以防止潜在的注入攻击。 （由 Antoine Pitrou 在 :issue:`22796` 中贡献。）"

#: ../../whatsnew/3.5.rst:148
msgid "Windows improvements:"
msgstr "Windows改进："

#: ../../whatsnew/3.5.rst:150
msgid ""
"A new installer for Windows has replaced the old MSI. See :ref:`using-on-"
"windows` for more information."
msgstr "使用新的 Windows 安装器替代了旧版 MSI。 请参阅 :ref:`using-on-windows` 了解详情。"

#: ../../whatsnew/3.5.rst:153
msgid ""
"Windows builds now use Microsoft Visual C++ 14.0, and extension modules "
"should use the same."
msgstr "Windows 编译版现在使用 Microsoft Visual C++ 14.0，扩展模块也应当使用同一版本。"

#: ../../whatsnew/3.5.rst:157
msgid ""
"Please read on for a comprehensive list of user-facing changes, including "
"many other smaller improvements, CPython optimizations, deprecations, and "
"potential porting issues."
msgstr "请继续阅读有关针对用户的改变的完整清单，包括许多其他较小的改进、CPython 优化、弃用以及潜在的移植问题。"

#: ../../whatsnew/3.5.rst:163
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.5.rst:168
msgid "PEP 492 - Coroutines with async and await syntax"
msgstr "PEP 492 - 使用 async 和 await 语法实现协程"

#: ../../whatsnew/3.5.rst:170
msgid ""
":pep:`492` greatly improves support for asynchronous programming in Python "
"by adding :term:`awaitable objects <awaitable>`, :term:`coroutine functions "
"<coroutine function>`, :term:`asynchronous iteration <asynchronous "
"iterable>`, and :term:`asynchronous context managers <asynchronous context "
"manager>`."
msgstr ""
":pep:`492` 通过添加 :term:`可等待对象 <awaitable>`, :term:`协程函数 <coroutine "
"function>`, :term:`异步迭代 <asynchronous iterable>` 和 :term:`异步上下文管理器 "
"<asynchronous context manager>` 极大地改善了 Python 对异步编程的支持。"

#: ../../whatsnew/3.5.rst:176
msgid ""
"Coroutine functions are declared using the new :keyword:`async def` syntax::"
msgstr "协程函数是使用新的 :keyword:`async def` 语法来声明的::"

#: ../../whatsnew/3.5.rst:181
msgid ""
"Inside a coroutine function, the new :keyword:`await` expression can be used"
" to suspend coroutine execution until the result is available.  Any object "
"can be *awaited*, as long as it implements the :term:`awaitable` protocol by"
" defining the :meth:`__await__` method."
msgstr ""
"在协程函数内部，新的 :keyword:`await` 表达式可用于挂起协程的执行直到其结果可用。 任何对象都可以被 *等待*，只要它通过定义 "
":meth:`__await__` 方法实现了 :term:`awaitable` 协议。"

#: ../../whatsnew/3.5.rst:186
msgid ""
"PEP 492 also adds :keyword:`async for` statement for convenient iteration "
"over asynchronous iterables."
msgstr "PEP 492 还增加了 :keyword:`async for` 语句用于方便地迭代异步可迭代对象。"

#: ../../whatsnew/3.5.rst:189
msgid "An example of a rudimentary HTTP client written using the new syntax::"
msgstr "一个使用新语法编写的基本 HTTP 客户端示例::"

#: ../../whatsnew/3.5.rst:215
msgid ""
"Similarly to asynchronous iteration, there is a new syntax for asynchronous "
"context managers.  The following script::"
msgstr "与异步迭代类似，增加了用于异步上下文管理器的新语法。 以下代码::"

#: ../../whatsnew/3.5.rst:235
msgid "will output::"
msgstr "将输出："

#: ../../whatsnew/3.5.rst:244
msgid ""
"Note that both :keyword:`async for` and :keyword:`async with` can only be "
"used inside a coroutine function declared with :keyword:`async def`."
msgstr ""
"请注意 :keyword:`async for` 和 :keyword:`async with` 都只能在通过 :keyword:`async def`"
" 声明的协程函数中使用。"

#: ../../whatsnew/3.5.rst:247
msgid ""
"Coroutine functions are intended to be run inside a compatible event loop, "
"such as the :ref:`asyncio loop <asyncio-event-loop>`."
msgstr "协程函数应当在兼容的事件循环内部运行，例如 :ref:`asyncio 循环 <asyncio-event-loop>`。"

#: ../../whatsnew/3.5.rst:253
msgid ""
"Starting with CPython 3.5.2, ``__aiter__`` can directly return "
":term:`asynchronous iterators <asynchronous iterator>`.  Returning an "
":term:`awaitable` object will result in a :exc:`PendingDeprecationWarning`."
msgstr ""
"从 CPython 3.5.2 开始，``__aiter__`` 可以直接返回 :term:`异步迭代器 <asynchronous "
"iterator>`。 返回 :term:`awaitable` 对象将会导致 :exc:`PendingDeprecationWarning`。"

#: ../../whatsnew/3.5.rst:259
msgid "See more details in the :ref:`async-iterators` documentation section."
msgstr "详情参见文档的 :ref:`async-iterators` 一节。"

#: ../../whatsnew/3.5.rst:265
msgid ":pep:`492` -- Coroutines with async and await syntax"
msgstr ":pep:`492` -- 使用 async 和 await 语法实现协程"

#: ../../whatsnew/3.5.rst:266
msgid "PEP written and implemented by Yury Selivanov."
msgstr "PEP 由 Yury Selivanov 撰写并实现"

#: ../../whatsnew/3.5.rst:272
msgid "PEP 465 - A dedicated infix operator for matrix multiplication"
msgstr "PEP 465 - 用于矩阵乘法的专用中缀运算符"

#: ../../whatsnew/3.5.rst:274
msgid ""
":pep:`465` adds the ``@`` infix operator for matrix multiplication. "
"Currently, no builtin Python types implement the new operator, however, it "
"can be implemented by defining :meth:`__matmul__`, :meth:`__rmatmul__`, and "
":meth:`__imatmul__` for regular, reflected, and in-place matrix "
"multiplication.  The semantics of these methods is similar to that of "
"methods defining other infix arithmetic operators."
msgstr ""
":pep:`465` 增加了用于矩阵乘法的 ``@`` 中缀运算符。 目前，还没有内置的 Python 类型实现这个新运算符，不过，它可通过定义 "
":meth:`__matmul__`, :meth:`__rmatmul__` 和 :meth:`__imatmul__` "
"分别用于常规、反射和原地矩阵乘法来实现。 这些方法的语义与定义其他中缀算术运算符的方法类似。"

#: ../../whatsnew/3.5.rst:281
msgid ""
"Matrix multiplication is a notably common operation in many fields of "
"mathematics, science, engineering, and the addition of ``@`` allows writing "
"cleaner code::"
msgstr "矩阵乘法在数学，科学，工程学的许多领域中是一种常见的操作，使用 ``@`` 运算符可以编写更简洁的代码："

#: ../../whatsnew/3.5.rst:287
msgid "instead of::"
msgstr "代替："

#: ../../whatsnew/3.5.rst:292
msgid "NumPy 1.10 has support for the new operator::"
msgstr "NumPy 1.10 支持新的运算符："

#: ../../whatsnew/3.5.rst:312
msgid ":pep:`465` -- A dedicated infix operator for matrix multiplication"
msgstr ":pep:`465` -- 用于矩阵乘法的专用中缀运算符"

#: ../../whatsnew/3.5.rst:313
msgid "PEP written by Nathaniel J. Smith; implemented by Benjamin Peterson."
msgstr "PEP 由 Nathaniel J. Smith 撰写，由 Benjamin Peterson 实现。"

#: ../../whatsnew/3.5.rst:319
msgid "PEP 448 - Additional Unpacking Generalizations"
msgstr "PEP 448 - 进一步的解包标准化"

#: ../../whatsnew/3.5.rst:321
msgid ""
":pep:`448` extends the allowed uses of the ``*`` iterable unpacking operator"
" and ``**`` dictionary unpacking operator.  It is now possible to use an "
"arbitrary number of unpackings in :ref:`function calls <calls>`::"
msgstr ""
":pep:`448` 扩展了 ``*`` 可迭代对象解包操作符和 ``**`` 字典解包操作符的允许使用范围。 现在将可以在 :ref:`函数调用 "
"<calls>` 中使用任意数量的解包操作::"

#: ../../whatsnew/3.5.rst:335
msgid ""
"Similarly, tuple, list, set, and dictionary displays allow multiple "
"unpackings (see :ref:`exprlists` and :ref:`dict`)::"
msgstr "类似地，元组、列表、集合与字典表示形式也允许多重解包 (参见 :ref:`exprlists` 和 :ref:`dict`)::"

#: ../../whatsnew/3.5.rst:353
msgid ":pep:`448` -- Additional Unpacking Generalizations"
msgstr ":pep:`448` -- 进一步的解包标准化"

#: ../../whatsnew/3.5.rst:353
msgid ""
"PEP written by Joshua Landau; implemented by Neil Girdhar, Thomas Wouters, "
"and Joshua Landau."
msgstr ""
"PEP 由 Joshua Landau 撰写 ，由 Neil Girdhar，Thomas Wouters 和 Joshua Landau 实现。"

#: ../../whatsnew/3.5.rst:360
msgid "PEP 461 - percent formatting support for bytes and bytearray"
msgstr "PEP 461 - 针对 bytes 和 bytearray 的百分号格式化支持"

#: ../../whatsnew/3.5.rst:362
msgid ""
":pep:`461` adds support for the ``%`` :ref:`interpolation operator <bytes-"
"formatting>` to :class:`bytes` and :class:`bytearray`."
msgstr ""
":pep:`461` 增加了 ``%`` :ref:`插值运算符 <bytes-formatting>` 对 :class:`bytes` 和 "
":class:`bytearray` 的支持。"

#: ../../whatsnew/3.5.rst:366
msgid ""
"While interpolation is usually thought of as a string operation, there are "
"cases where interpolation on ``bytes`` or ``bytearrays`` makes sense, and "
"the work needed to make up for this missing functionality detracts from the "
"overall readability of the code.  This issue is particularly important when "
"dealing with wire format protocols, which are often a mixture of binary and "
"ASCII compatible text."
msgstr ""
"虽然插值通常被认为是一种字符串操作，但在某些情况下针对 ``bytes`` 或 ``bytearrays`` "
"的插值操作也是有意义，而弥补这种功能缺失所需的工作可能会影响代码的整体可读性。 在处理通常会混合二进制和 ASCII 兼容文本的 wire "
"格式化协议时，这个问题尤为重要。"

#: ../../whatsnew/3.5.rst:373 ../../whatsnew/3.5.rst:1848
msgid "Examples::"
msgstr "示例::"

#: ../../whatsnew/3.5.rst:381
msgid ""
"Unicode is not allowed for ``%b``, but it is accepted by ``%a`` (equivalent "
"of ``repr(obj).encode('ascii', 'backslashreplace')``)::"
msgstr ""
"Unicode 对于 ``%b`` 来说是不允许的，但对 ``%a`` 来说则是可接受的 (等价于 "
"``repr(obj).encode('ascii', 'backslashreplace')``)::"

#: ../../whatsnew/3.5.rst:392
msgid ""
"Note that ``%s`` and ``%r`` conversion types, although supported, should "
"only be used in codebases that need compatibility with Python 2."
msgstr "请注意 ``%s`` 和 ``%r`` 转换类型虽然受到支持，但应当只被用于需要与 Python 2 保持兼容性的代码中。"

#: ../../whatsnew/3.5.rst:398
msgid ":pep:`461` -- Adding % formatting to bytes and bytearray"
msgstr ":pep:`461` -- 为 bytes 和 bytearray 添加 % 格式化"

#: ../../whatsnew/3.5.rst:398
msgid ""
"PEP written by Ethan Furman; implemented by Neil Schemenauer and Ethan "
"Furman."
msgstr "PEP 由 Ethan Furman 撰写 ，由 Neil Schemenauer 和 Ethan Furman 实现。"

#: ../../whatsnew/3.5.rst:405
msgid "PEP 484 - Type Hints"
msgstr "PEP 484 —— 类型提示"

#: ../../whatsnew/3.5.rst:407
msgid ""
"Function annotation syntax has been a Python feature since version 3.0 "
"(:pep:`3107`), however the semantics of annotations has been left undefined."
msgstr "函数标注语法自 3.0 版起即已成为 Python 的特性 (:pep:`3107`)，标注的语义尚未得到定义。"

#: ../../whatsnew/3.5.rst:410
msgid ""
"Experience has shown that the majority of function annotation uses were to "
"provide type hints to function parameters and return values.  It became "
"evident that it would be beneficial for Python users, if the standard "
"library included the base definitions and tools for type annotations."
msgstr ""
"经验表明大多数函数标注的使用都是为了向函数形参和返回值提供类型提示。 很显然如果标准库可以包括用于类型标注的基本定义和工具，对 Python "
"用户来说将大有裨益。"

#: ../../whatsnew/3.5.rst:415
msgid ""
":pep:`484` introduces a :term:`provisional module <provisional API>` to "
"provide these standard definitions and tools, along with some conventions "
"for situations where annotations are not available."
msgstr ""
":pep:`484` 引入了一个 :term:`暂定模块 <provisional API>` "
"来提供这些标准定义和工具，以及针对标注不可用的场合的一些惯例。"

#: ../../whatsnew/3.5.rst:419
msgid ""
"For example, here is a simple function whose argument and return type are "
"declared in the annotations::"
msgstr "例如，以下是一个在标注中声明了参数和返回值类型的简单函数::"

#: ../../whatsnew/3.5.rst:425
msgid ""
"While these annotations are available at runtime through the usual "
":attr:`__annotations__` attribute, *no automatic type checking happens at "
"runtime*.  Instead, it is assumed that a separate off-line type checker "
"(e.g. `mypy <https://mypy-lang.org>`_) will be used for on-demand source "
"code analysis."
msgstr ""
"虽然这些标注可在运行时通过常用的 :attr:`__annotations__` 属性来访问，但是 *不会在运行时执行任何类型检查*。 "
"相应地，应该有一个单独的离线版类型检查器 (例如 `mypy <https://mypy-lang.org>`_) 被用来按需执行源代码分析。"

#: ../../whatsnew/3.5.rst:431
msgid ""
"The type system supports unions, generic types, and a special type named "
":class:`~typing.Any` which is consistent with (i.e. assignable to and from) "
"all types."
msgstr "类型系统支持合并、泛型类型以及名为 :class:`~typing.Any` 的能够适用于所有类型（即作为赋值的来源和目标）的特殊类型。"

#: ../../whatsnew/3.5.rst:437
msgid ":mod:`typing` module documentation"
msgstr ":mod:`typing` 模块文档"

#: ../../whatsnew/3.5.rst:439
msgid ":pep:`484` -- Type Hints"
msgstr ":pep:`484` —— 类型提示"

#: ../../whatsnew/3.5.rst:439
msgid ""
"PEP written by Guido van Rossum, Jukka Lehtosalo, and Łukasz Langa; "
"implemented by Guido van Rossum."
msgstr ""
"PEP 由 Guido van Rossum，Jukka Lehtosalo 和 Łukasz Langa 撰写；由 Guido van Rossum "
"实现。"

#: ../../whatsnew/3.5.rst:441
msgid ":pep:`483` -- The Theory of Type Hints"
msgstr ":pep:`483` -- 类型提示理论"

#: ../../whatsnew/3.5.rst:442
msgid "PEP written by Guido van Rossum"
msgstr "PEP 由 Yury Selivanov 撰写"

#: ../../whatsnew/3.5.rst:448
msgid ""
"PEP 471 - os.scandir() function -- a better and faster directory iterator"
msgstr "PEP 471 - os.scandir() 函数 -- 一个更好且更快的目录迭代器"

#: ../../whatsnew/3.5.rst:450
msgid ""
":pep:`471` adds a new directory iteration function, :func:`os.scandir`, to "
"the standard library.  Additionally, :func:`os.walk` is now implemented "
"using ``scandir``, which makes it 3 to 5 times faster on POSIX systems and 7"
" to 20 times faster on Windows systems.  This is largely achieved by greatly"
" reducing the number of calls to :func:`os.stat` required to walk a "
"directory tree."
msgstr ""
":pep:`471` 向标准库添加了一个新的目录迭代函数 :func:`os.scandir`。 此外，:func:`os.walk` 现在是使用 "
"``scandir`` 来实现，这使它在 POSIX 系统上可提速 3 至 5 倍而在 Windows 系统上可提速 7 至 20 倍。 "
"这样的效果主要是通过大幅减少遍历目录树所需调用 :func:`os.stat` 的次数来达成的。"

#: ../../whatsnew/3.5.rst:457
msgid ""
"Additionally, ``scandir`` returns an iterator, as opposed to returning a "
"list of file names, which improves memory efficiency when iterating over "
"very large directories."
msgstr "此外，``scandir`` 是返回一个迭代器，而不是返回一个文件名列表，这提升了迭代非常大的目录时的内存效率。"

#: ../../whatsnew/3.5.rst:461
msgid ""
"The following example shows a simple use of :func:`os.scandir` to display "
"all the files (excluding directories) in the given *path* that don't start "
"with ``'.'``. The :meth:`entry.is_file() <os.DirEntry.is_file>` call will "
"generally not make an additional system call::"
msgstr ""
"下面的例子演示了 :func:`os.scandir` 的简单用法，显示给定 *path* 中所有不以 ``'.'`` 开头的文件（不包括目录）。 "
":meth:`entry.is_file() <os.DirEntry.is_file>` 调用通常不会执行额外的系统调用::"

#: ../../whatsnew/3.5.rst:472
msgid ""
":pep:`471` -- os.scandir() function -- a better and faster directory "
"iterator"
msgstr ":pep:`471` -- os.scandir() 函数 -- 一个更好且更快的目录迭代器"

#: ../../whatsnew/3.5.rst:473
msgid ""
"PEP written and implemented by Ben Hoyt with the help of Victor Stinner."
msgstr "PEP 由 Ben Hoyt 在 Victor Stinner 的帮助下撰写并实现"

#: ../../whatsnew/3.5.rst:479
msgid "PEP 475: Retry system calls failing with EINTR"
msgstr "PEP 475: 重试返回 EINTR 失败码的系统调用"

#: ../../whatsnew/3.5.rst:481
msgid ""
"An :py:const:`errno.EINTR` error code is returned whenever a system call, "
"that is waiting for I/O, is interrupted by a signal.  Previously, Python "
"would raise :exc:`InterruptedError` in such cases.  This meant that, when "
"writing a Python application, the developer had two choices:"
msgstr ""
"当一个正在等待 I/O 的系统调用被信号所中断时将会返回一个 :py:const:`errno.EINTR` 错误码。 在之前版本中，Python "
"会在这种情况下引发 :exc:`InterruptedError`。 这意味着在编写 Python 应用程序时，开发者有两种选择："

#: ../../whatsnew/3.5.rst:486
msgid "Ignore the ``InterruptedError``."
msgstr "忽略 ``InterruptedError``。"

#: ../../whatsnew/3.5.rst:487
msgid ""
"Handle the ``InterruptedError`` and attempt to restart the interrupted "
"system call at every call site."
msgstr "处理 ``InterruptedError`` 并在每个调用位置尝试重新启动被中断的系统调用。"

#: ../../whatsnew/3.5.rst:490
msgid ""
"The first option makes an application fail intermittently. The second option"
" adds a large amount of boilerplate that makes the code nearly unreadable.  "
"Compare::"
msgstr "第一个选项会使应用程序中途出错。 第二个选项添加了大量的额外处理使得代码几乎不可读。 比较::"

#: ../../whatsnew/3.5.rst:496
msgid "and::"
msgstr "和::"

#: ../../whatsnew/3.5.rst:505
msgid ""
":pep:`475` implements automatic retry of system calls on ``EINTR``.  This "
"removes the burden of dealing with ``EINTR`` or :exc:`InterruptedError` in "
"user code in most situations and makes Python programs, including the "
"standard library, more robust.  Note that the system call is only retried if"
" the signal handler does not raise an exception."
msgstr ""
":pep:`475` 实现了在 ``EINTR`` 时自动重试系统调用。 这移除了大部分场合下在用户代码中处理 ``EINTR`` 或 "
":exc:`InterruptedError` 的负担，并使得 Python 程序，包括标准库的程序更为健壮。 "
"请注意只有在信号处理器未引发异常时系统调用才会被重试。"

#: ../../whatsnew/3.5.rst:512
msgid ""
"Below is a list of functions which are now retried when interrupted by a "
"signal:"
msgstr "以下是现在当被信号中断时会被重试的函数的列表："

#: ../../whatsnew/3.5.rst:515
msgid ":func:`open` and :func:`io.open`;"
msgstr ":func:`open` 和 :func:`io.open`;"

#: ../../whatsnew/3.5.rst:517
msgid "functions of the :mod:`faulthandler` module;"
msgstr ":mod:`faulthandler` 模块的功能"

#: ../../whatsnew/3.5.rst:519
msgid ""
":mod:`os` functions: :func:`~os.fchdir`, :func:`~os.fchmod`, "
":func:`~os.fchown`, :func:`~os.fdatasync`, :func:`~os.fstat`, "
":func:`~os.fstatvfs`, :func:`~os.fsync`, :func:`~os.ftruncate`, "
":func:`~os.mkfifo`, :func:`~os.mknod`, :func:`~os.open`, "
":func:`~os.posix_fadvise`, :func:`~os.posix_fallocate`, :func:`~os.pread`, "
":func:`~os.pwrite`, :func:`~os.read`, :func:`~os.readv`, "
":func:`~os.sendfile`, :func:`~os.wait3`, :func:`~os.wait4`, "
":func:`~os.wait`, :func:`~os.waitid`, :func:`~os.waitpid`, "
":func:`~os.write`, :func:`~os.writev`;"
msgstr ""
":mod:`os` 函数: :func:`~os.fchdir`, :func:`~os.fchmod`, :func:`~os.fchown`, "
":func:`~os.fdatasync`, :func:`~os.fstat`, :func:`~os.fstatvfs`, "
":func:`~os.fsync`, :func:`~os.ftruncate`, :func:`~os.mkfifo`, "
":func:`~os.mknod`, :func:`~os.open`, :func:`~os.posix_fadvise`, "
":func:`~os.posix_fallocate`, :func:`~os.pread`, :func:`~os.pwrite`, "
":func:`~os.read`, :func:`~os.readv`, :func:`~os.sendfile`, "
":func:`~os.wait3`, :func:`~os.wait4`, :func:`~os.wait`, :func:`~os.waitid`, "
":func:`~os.waitpid`, :func:`~os.write`, :func:`~os.writev`;"

#: ../../whatsnew/3.5.rst:529
msgid ""
"special cases: :func:`os.close` and :func:`os.dup2` now ignore "
":py:const:`~errno.EINTR` errors; the syscall is not retried (see the PEP for"
" the rationale);"
msgstr ""
"特殊情况: :func:`os.close` 和 :func:`os.dup2` 现在会忽略 :py:const:`~errno.EINTR` "
"错误；系统调用将不被重试（请参阅 PEP 了解相关的理由）；"

#: ../../whatsnew/3.5.rst:533
msgid ""
":mod:`select` functions: :func:`devpoll.poll() <select.devpoll.poll>`, "
":func:`epoll.poll() <select.epoll.poll>`, :func:`kqueue.control() "
"<select.kqueue.control>`, :func:`poll.poll() <select.poll.poll>`, "
":func:`~select.select`;"
msgstr ""
":mod:`select` 函数: :func:`devpoll.poll() <select.devpoll.poll>`, "
":func:`epoll.poll() <select.epoll.poll>`, :func:`kqueue.control() "
"<select.kqueue.control>`, :func:`poll.poll() <select.poll.poll>`, "
":func:`~select.select`;"

#: ../../whatsnew/3.5.rst:538
msgid ""
"methods of the :class:`~socket.socket` class: :meth:`~socket.socket.accept`,"
" :meth:`~socket.socket.connect` (except for non-blocking sockets), "
":meth:`~socket.socket.recv`, :meth:`~socket.socket.recvfrom`, "
":meth:`~socket.socket.recvmsg`, :meth:`~socket.socket.send`, "
":meth:`~socket.socket.sendall`, :meth:`~socket.socket.sendmsg`, "
":meth:`~socket.socket.sendto`;"
msgstr ""
":class:`~socket.socket` 类的方法: :meth:`~socket.socket.accept`, "
":meth:`~socket.socket.connect` （除了非阻塞套接字）, :meth:`~socket.socket.recv`, "
":meth:`~socket.socket.recvfrom`, :meth:`~socket.socket.recvmsg`, "
":meth:`~socket.socket.send`, :meth:`~socket.socket.sendall`, "
":meth:`~socket.socket.sendmsg`, :meth:`~socket.socket.sendto`;"

#: ../../whatsnew/3.5.rst:545
msgid ":func:`signal.sigtimedwait` and :func:`signal.sigwaitinfo`;"
msgstr ":func:`signal.sigtimedwait` 和 :func:`signal.sigwaitinfo`;"

#: ../../whatsnew/3.5.rst:547
msgid ":func:`time.sleep`."
msgstr ":func:`time.sleep`."

#: ../../whatsnew/3.5.rst:552
msgid ":pep:`475` -- Retry system calls failing with EINTR"
msgstr ":pep:`475` -- 重试返回 EINTR 失败码的系统调用"

#: ../../whatsnew/3.5.rst:552
msgid ""
"PEP and implementation written by Charles-François Natali and Victor "
"Stinner, with the help of Antoine Pitrou (the French connection)."
msgstr ""
"PEP 和具体实现由 Charles-François Natali 和 Victor Stinner 撰写，并获得 Antoine Pitrou "
"的协助（同为法国人）。"

#: ../../whatsnew/3.5.rst:559
msgid "PEP 479: Change StopIteration handling inside generators"
msgstr "PEP 479：更改生成器内部的 StopIteration 处理"

#: ../../whatsnew/3.5.rst:561
msgid ""
"The interaction of generators and :exc:`StopIteration` in Python 3.4 and "
"earlier was sometimes surprising, and could conceal obscure bugs.  "
"Previously, ``StopIteration`` raised accidentally inside a generator "
"function was interpreted as the end of the iteration by the loop construct "
"driving the generator."
msgstr ""
"生成器与 :exc:`StopIteration` 的交互在 Python 3.4 及更早版本中有时会令人惊讶，并可能隐藏难以觉察的程序错误。 "
"在之前版本中，一个生成器函数内部意外引发的 ``StopIteration`` 会被驱动该生成器的循环构造解读为迭代的结束。"

#: ../../whatsnew/3.5.rst:567
msgid ""
":pep:`479` changes the behavior of generators: when a ``StopIteration`` "
"exception is raised inside a generator, it is replaced with a "
":exc:`RuntimeError` before it exits the generator frame.  The main goal of "
"this change is to ease debugging in the situation where an unguarded "
":func:`next` call raises ``StopIteration`` and causes the iteration "
"controlled by the generator to terminate silently. This is particularly "
"pernicious in combination with the ``yield from`` construct."
msgstr ""
":pep:`479` 更改了生成器的行为：当一个 ``StopIteration`` 异常在生成器内部被引发时，它会在其退出生成器所在帧时被替换为 "
":exc:`RuntimeError`。 这一更改的主要目的是方便在无防护的 :func:`next` 调用引发了 ``StopIteration`` "
"并导致生成器所控制的迭代静默地终结的情况下进行调试。 此情况在与 ``yield from`` 构造相结合时会特别令人困扰。"

#: ../../whatsnew/3.5.rst:575
msgid ""
"This is a backwards incompatible change, so to enable the new behavior, a "
":term:`__future__` import is necessary::"
msgstr "这是一个向下不兼容的更改，所以想要启用这个新行为，必须执行 :term:`__future__` 导入::"

#: ../../whatsnew/3.5.rst:595
msgid ""
"Without a ``__future__`` import, a :exc:`PendingDeprecationWarning` will be "
"raised whenever a :exc:`StopIteration` exception is raised inside a "
"generator."
msgstr ""
"如果未执行 ``__future__`` 导入，当在生成器内部引发 :exc:`StopIteration` 异常时将导致 "
":exc:`PendingDeprecationWarning` 被引发。"

#: ../../whatsnew/3.5.rst:601
msgid ":pep:`479` -- Change StopIteration handling inside generators"
msgstr ":pep:`479` -- 更改生成器内部的 StopIteration 处理"

#: ../../whatsnew/3.5.rst:601
msgid ""
"PEP written by Chris Angelico and Guido van Rossum. Implemented by Chris "
"Angelico, Yury Selivanov and Nick Coghlan."
msgstr ""
"PEP 由 Chris Angelico 和 Guido van Rossum 撰写，由 Chris Angelico，Yury Selivanov 和"
" Nick Coghlan 实现。"

#: ../../whatsnew/3.5.rst:608
msgid "PEP 485: A function for testing approximate equality"
msgstr "PEP 485：用于测试近似相等的函数"

#: ../../whatsnew/3.5.rst:610
msgid ""
":pep:`485` adds the :func:`math.isclose` and :func:`cmath.isclose` functions"
" which tell whether two values are approximately equal or \"close\" to each "
"other.  Whether or not two values are considered close is determined "
"according to given absolute and relative tolerances. Relative tolerance is "
"the maximum allowed difference between ``isclose`` arguments, relative to "
"the larger absolute value::"
msgstr ""
":pep:`485` 增加了 :func:`math.isclose` 和 :func:`cmath.isclose` "
"函数用于检测两个值是否近似相等或称“接近”。 两个值是否接近是根据给定的绝对和相对范围来确定的。 相对范围是 ``isclose`` "
"参数之间的最大允许差值，即相对于较大的那个绝对数值的距离::"

#: ../../whatsnew/3.5.rst:625
msgid ""
"It is also possible to compare two values using absolute tolerance, which "
"must be a non-negative value::"
msgstr "也可以使用绝对范围来比较两个值，它必须是一个非负数值::"

#: ../../whatsnew/3.5.rst:639
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` —— 用于测试近似相等的函数"

#: ../../whatsnew/3.5.rst:639
msgid ""
"PEP written by Christopher Barker; implemented by Chris Barker and Tal "
"Einat."
msgstr "PEP 由 Christopher Barker 撰写，由 Chris Barker 和 Tal Einat 实现。"

#: ../../whatsnew/3.5.rst:646
msgid "PEP 486: Make the Python Launcher aware of virtual environments"
msgstr "PEP 486：让 Python 启动器识别虚拟环境"

#: ../../whatsnew/3.5.rst:648
msgid ""
":pep:`486` makes the Windows launcher (see :pep:`397`) aware of an active "
"virtual environment. When the default interpreter would be used and the "
"``VIRTUAL_ENV`` environment variable is set, the interpreter in the virtual "
"environment will be used."
msgstr ""
":pep:`486` 让 Windows 版启动器 (参见 :pep:`397`) 能够识别激活的虚拟环境。 当要使用默认解释器并且设置了 "
"``VIRTUAL_ENV`` 环境变量时，将使用虚拟环境中的解释器。"

#: ../../whatsnew/3.5.rst:655
msgid ":pep:`486` -- Make the Python Launcher aware of virtual environments"
msgstr ":pep:`486` -- 让 Python 启动器识别虚拟环境"

#: ../../whatsnew/3.5.rst:656
msgid "PEP written and implemented by Paul Moore."
msgstr "PEP 由 Paul Moore 撰写并实现"

#: ../../whatsnew/3.5.rst:662
msgid "PEP 488: Elimination of PYO files"
msgstr "PEP 488：去除 PYO 文件"

#: ../../whatsnew/3.5.rst:664
msgid ""
":pep:`488` does away with the concept of ``.pyo`` files. This means that "
"``.pyc`` files represent both unoptimized and optimized bytecode. To prevent"
" the need to constantly regenerate bytecode files, ``.pyc`` files now have "
"an optional ``opt-`` tag in their name when the bytecode is optimized. This "
"has the side-effect of no more bytecode file name clashes when running under"
" either :option:`-O` or :option:`-OO`. Consequently, bytecode files "
"generated from :option:`-O`, and :option:`-OO` may now exist simultaneously."
" :func:`importlib.util.cache_from_source` has an updated API to help with "
"this change."
msgstr ""
":pep:`488` 取消了 ``.pyo`` 文件的概念。 这意味着 ``.pyc`` 文件将同时代表未优化和已优化的字节码。 "
"为了防止经常需要重新生成字节码文件，现在 ``.pyc`` 文件可以在其名称中设置可选的 ``opt-`` 标签来表示已优化字节码。 "
"该设置的附带效果是当以 :option:`-O` 和 :option:`-OO` 运行时将不会有字节码文件名冲突。 其结果是，使用 "
":option:`-O` 和 :option:`-OO` 生成的字节码现在可以同时存在。 "
":func:`importlib.util.cache_from_source` 专门针对此项变化更新了 API。"

#: ../../whatsnew/3.5.rst:676
msgid ":pep:`488` -- Elimination of PYO files"
msgstr ":pep:`488` -- 去除 PYO 文件"

#: ../../whatsnew/3.5.rst:677
msgid "PEP written and implemented by Brett Cannon."
msgstr "PEP 由 Brett Cannon 撰写并实现。"

#: ../../whatsnew/3.5.rst:683
msgid "PEP 489: Multi-phase extension module initialization"
msgstr "PEP 489：多阶段扩展模块初始化"

#: ../../whatsnew/3.5.rst:685
msgid ""
":pep:`489` updates extension module initialization to take advantage of the "
"two step module loading mechanism introduced by :pep:`451` in Python 3.4."
msgstr ":pep:`489` 更新了扩展模块初始化操作以便利用 Python 3.4 中通过 :pep:`451` 引入的两步模块加载机制的优势。"

#: ../../whatsnew/3.5.rst:688
msgid ""
"This change brings the import semantics of extension modules that opt-in to "
"using the new mechanism much closer to those of Python source and bytecode "
"modules, including the ability to use any valid identifier as a module name,"
" rather than being restricted to ASCII."
msgstr ""
"这一变化让选择使用新机制的扩展模块的导入语义与 Python 源代码和字节码模块的更为接近，包括可以使用任何有效标识符作为模块名称，而不是仅限于 "
"ASCII。"

#: ../../whatsnew/3.5.rst:696
msgid ":pep:`489` -- Multi-phase extension module initialization"
msgstr ":pep:`489` -- 多阶段扩展模块初始化"

#: ../../whatsnew/3.5.rst:696
msgid ""
"PEP written by Petr Viktorin, Stefan Behnel, and Nick Coghlan; implemented "
"by Petr Viktorin."
msgstr ""
"PEP 由 Petr Viktorin , Stefan Behnel 和 Nick Coghlan 撰写，由 Petr Viktorin 实现。"

#: ../../whatsnew/3.5.rst:701
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.5.rst:703
msgid "Some smaller changes made to the core Python language are:"
msgstr "对Python 语言核心进行的小改动："

#: ../../whatsnew/3.5.rst:705
msgid ""
"Added the ``\"namereplace\"`` error handlers.  The ``\"backslashreplace\"`` "
"error handlers now work with decoding and translating. (Contributed by "
"Serhiy Storchaka in :issue:`19676` and :issue:`22286`.)"
msgstr ""
"增加了 ``\"namereplace\"`` 错误处理器。 ``\"backslashreplace\"`` 错误处理器现在可用于解码和转译。 （由 "
"Serhiy Storchaka 在 :issue:`19676` 和 :issue:`22286` 中贡献。）"

#: ../../whatsnew/3.5.rst:709
msgid ""
"The :option:`-b` option now affects comparisons of :class:`bytes` with "
":class:`int`.  (Contributed by Serhiy Storchaka in :issue:`23681`.)"
msgstr ""
"现在 :option:`-b` 选项会影响 :class:`bytes` 与 :class:`int` 的比较。 （由 Serhiy Storchaka"
" 在 :issue:`23681` 中贡献。）"

#: ../../whatsnew/3.5.rst:712
msgid ""
"New Kazakh ``kz1048`` and Tajik ``koi8_t`` :ref:`codecs <standard-"
"encodings>`. (Contributed by Serhiy Storchaka in :issue:`22682` and "
":issue:`22681`.)"
msgstr ""
"新增 Kazakh ``kz1048`` 和 Tajik ``koi8_t`` :ref:`编解码器 <standard-encodings>`。 （由"
" Serhiy Storchaka 在 :issue:`22682` 和 :issue:`22681` 中贡献。）"

#: ../../whatsnew/3.5.rst:715
msgid ""
"Property docstrings are now writable. This is especially useful for "
":func:`collections.namedtuple` docstrings. (Contributed by Berker Peksag in "
":issue:`24064`.)"
msgstr ""
"特征属性文档字符串现在将是可写的。 这对于 :func:`collections.namedtuple` 文档字符串特别适用。 （由 Berker "
"Peksag 在 :issue:`24064` 中贡献。）"

#: ../../whatsnew/3.5.rst:719
msgid ""
"Circular imports involving relative imports are now supported. (Contributed "
"by Brett Cannon and Antoine Pitrou in :issue:`17636`.)"
msgstr ""
"涉及相对导入的环形导入现在已受到支持。 （由 Brett Cannon 和 Antoine Pitrou 在 :issue:`17636` 中贡献。）"

#: ../../whatsnew/3.5.rst:724
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.5.rst:727
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.5.rst:729
msgid ""
"The new :mod:`typing` :term:`provisional <provisional API>` module provides "
"standard definitions and tools for function type annotations. See :ref:`Type"
" Hints <whatsnew-pep-484>` for more information."
msgstr ""
"新增的 :mod:`typing` :term:`暂定 <provisional API>` 模块提供了对函数类型标注的标准定义和工具。 详情参见 "
":ref:`类型提示 <whatsnew-pep-484>`。"

#: ../../whatsnew/3.5.rst:736
msgid "zipapp"
msgstr "zipapp"

#: ../../whatsnew/3.5.rst:738
msgid ""
"The new :mod:`zipapp` module (specified in :pep:`441`) provides an API and "
"command line tool for creating executable Python Zip Applications, which "
"were introduced in Python 2.6 in :issue:`1739468`, but which were not well "
"publicized, either at the time or since."
msgstr ""
"新增的 :mod:`zipapp` 模块（在 :pep:`441` 中描述）提供了用于创建可执行 Python Zip 应用程序的 API "
"和命令行工具，它是根据 :issue:`1739468` 在 Python 2.6 中引入的，但在当时和之后都没有足够的推广。"

#: ../../whatsnew/3.5.rst:743
msgid ""
"With the new module, bundling your application is as simple as putting all "
"the files, including a ``__main__.py`` file, into a directory ``myapp`` and "
"running:"
msgstr ""
"使用这个新模块，想要打包你的应用程序只需简单地将所有文件，包括一个 ``__main__.py`` 文件放到一个目录 ``myapp`` 中并运行："

#: ../../whatsnew/3.5.rst:752
msgid ""
"The module implementation has been contributed by Paul Moore in "
":issue:`23491`."
msgstr "该模块的实现由 Paul Moore 在 :issue:`23491` 中贡献。"

#: ../../whatsnew/3.5.rst:757
msgid ":pep:`441` -- Improving Python ZIP Application Support"
msgstr ":pep:`441` -- 改进 Python ZIP 应用程序支持"

#: ../../whatsnew/3.5.rst:761
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.5.rst:764
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.5.rst:766
msgid ""
"The :class:`~argparse.ArgumentParser` class now allows disabling "
":ref:`abbreviated usage <prefix-matching>` of long options by setting "
":ref:`allow_abbrev` to ``False``.  (Contributed by Jonathan Paugh, Steven "
"Bethard, paul j3 and Daniel Eriksson in :issue:`14910`.)"
msgstr ""
"现在 :class:`~argparse.ArgumentParser` 类允许通过将 :ref:`allow_abbrev` 设为 ``False``"
" 来禁用长选项的 :ref:`缩写用法 <prefix-matching>`。 （由 Jonathan Paugh, Steven Bethard, "
"paul j3 和 Daniel Eriksson 在 :issue:`14910` 中贡献。）"

#: ../../whatsnew/3.5.rst:773
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.5.rst:775
msgid ""
"Since the :mod:`asyncio` module is :term:`provisional <provisional API>`, "
"all changes introduced in Python 3.5 have also been backported to Python "
"3.4.x."
msgstr ""
"由于 :mod:`asyncio` 模块处于 :term:`暂定状态 <provisional API>`，在 Python 3.5 "
"中引入的所有改变都已被向下移植到 Python 3.4.x。"

#: ../../whatsnew/3.5.rst:778
msgid "Notable changes in the :mod:`asyncio` module since Python 3.4.0:"
msgstr "自 Python 3.4.0 开始 :mod:`asyncio` 模块中的重要变化："

#: ../../whatsnew/3.5.rst:780
msgid ""
"New debugging APIs: :meth:`loop.set_debug() <asyncio.loop.set_debug>` and "
":meth:`loop.get_debug() <asyncio.loop.get_debug>` methods. (Contributed by "
"Victor Stinner.)"
msgstr ""
"新增的调试 API: :meth:`loop.set_debug() <asyncio.loop.set_debug>` 和 "
":meth:`loop.get_debug() <asyncio.loop.get_debug>` 方法。 （由 Victor Stinner 贡献。）"

#: ../../whatsnew/3.5.rst:784
msgid ""
"The proactor event loop now supports SSL. (Contributed by Antoine Pitrou and"
" Victor Stinner in :issue:`22560`.)"
msgstr ""
"现在 proactor 事件循环已支持 SSL。 （由 Antoine Pitrou 和 Victor Stinner 在 :issue:`22560`"
" 中贡献。）"

#: ../../whatsnew/3.5.rst:787
msgid ""
"A new :meth:`loop.is_closed() <asyncio.loop.is_closed>` method to check if "
"the event loop is closed. (Contributed by Victor Stinner in :issue:`21326`.)"
msgstr ""
"新增的 :meth:`loop.is_closed() <asyncio.loop.is_closed>` 方法可检测事件循环是否已关闭。 （由 "
"Victor Stinner 在 :issue:`21326` 中贡献。）.)"

#: ../../whatsnew/3.5.rst:791
msgid ""
"A new :meth:`loop.create_task() <asyncio.loop.create_task>` to conveniently "
"create and schedule a new :class:`~asyncio.Task` for a coroutine.  The "
"``create_task`` method is also used by all asyncio functions that wrap "
"coroutines into tasks, such as :func:`asyncio.wait`, :func:`asyncio.gather`,"
" etc. (Contributed by Victor Stinner.)"
msgstr ""
"新增的 :meth:`loop.create_task() <asyncio.loop.create_task>` 用来方便地新建一个 "
":class:`~asyncio.Task` 并将其排入协程的计划任务。 ``create_task`` 方法还可供所有将协程包装为任务的 "
"asyncio 函数使用，例如 :func:`asyncio.wait`, :func:`asyncio.gather` 等。 （由 Victor "
"Stinner 贡献。）"

#: ../../whatsnew/3.5.rst:798
msgid ""
"A new :meth:`transport.get_write_buffer_limits() "
"<asyncio.WriteTransport.get_write_buffer_limits>` method to inquire for "
"*high-* and *low-* water limits of the flow control. (Contributed by Victor "
"Stinner.)"
msgstr ""
"新增的 :meth:`transport.get_write_buffer_limits() "
"<asyncio.WriteTransport.get_write_buffer_limits>` 方法用于查询流程控制的 *高* 与 *低* "
"水位限制。 （由 Victor Stinner 贡献。）"

#: ../../whatsnew/3.5.rst:803
msgid ""
"The :func:`~asyncio.async` function is deprecated in favor of "
":func:`~asyncio.ensure_future`. (Contributed by Yury Selivanov.)"
msgstr ""
":func:`~asyncio.async` 函数已被弃用并由 :func:`~asyncio.ensure_future` 取代。 （由 Yury "
"Selivanov 贡献。）"

#: ../../whatsnew/3.5.rst:807
msgid ""
"New :meth:`loop.set_task_factory() <asyncio.loop.set_task_factory>` and "
":meth:`loop.get_task_factory() <asyncio.loop.get_task_factory>` methods to "
"customize the task factory that :meth:`loop.create_task() "
"<asyncio.loop.create_task>` method uses.  (Contributed by Yury Selivanov.)"
msgstr ""
"新增 :meth:`loop.set_task_factory() <asyncio.loop.set_task_factory>` 和 "
":meth:`loop.get_task_factory() <asyncio.loop.get_task_factory>` 方法用于自定义供 "
":meth:`loop.create_task() <asyncio.loop.create_task>` 方法使用的任务工厂。 （由 Yury "
"Selivanov 贡献。）"

#: ../../whatsnew/3.5.rst:814
msgid ""
"New :meth:`Queue.join() <asyncio.Queue.join>` and :meth:`Queue.task_done() "
"<asyncio.Queue.task_done>` queue methods. (Contributed by Victor Stinner.)"
msgstr ""
"新增 :meth:`Queue.join() <asyncio.Queue.join>` 和 :meth:`Queue.task_done() "
"<asyncio.Queue.task_done>` 队列方法。 （由 Victor Stinner 贡献。）"

#: ../../whatsnew/3.5.rst:818
msgid ""
"The ``JoinableQueue`` class was removed, in favor of the "
":class:`asyncio.Queue` class. (Contributed by Victor Stinner.)"
msgstr ""
"移除了 ``JoinableQueue`` 类，建议改用 :class:`asyncio.Queue` 类。 （由 Victor Stinner "
"贡献。）"

#: ../../whatsnew/3.5.rst:822
msgid "Updates in 3.5.1:"
msgstr "3.5.1 中的更新："

#: ../../whatsnew/3.5.rst:824
msgid ""
"The :func:`~asyncio.ensure_future` function and all functions that use it, "
"such as :meth:`loop.run_until_complete() <asyncio.loop.run_until_complete>`,"
" now accept all kinds of :term:`awaitable objects <awaitable>`. (Contributed"
" by Yury Selivanov.)"
msgstr ""
":func:`~asyncio.ensure_future` 函数以及所有用到它的函数，比如 "
":meth:`loop.run_until_complete() "
"<asyncio.loop.run_until_complete>`，现在将接受所有种类的 :term:`可等待对象 <awaitable>`。 （由 "
"Yury Selivanov 贡献。）"

#: ../../whatsnew/3.5.rst:829
msgid ""
"New :func:`~asyncio.run_coroutine_threadsafe` function to submit coroutines "
"to event loops from other threads. (Contributed by Vincent Michel.)"
msgstr ""
"新增 :func:`~asyncio.run_coroutine_threadsafe` 函数用于从其他线程向事件循环提交协程。（由 Vincent "
"Michel 贡献。）"

#: ../../whatsnew/3.5.rst:833
msgid ""
"New :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` method"
" to check if the transport is closing or closed. (Contributed by Yury "
"Selivanov.)"
msgstr ""
"新增 :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` "
"方法用于检查传输是否正在关闭或已经关闭。 （由 Yury Selivanov 贡献。）"

#: ../../whatsnew/3.5.rst:837
msgid ""
"The :meth:`loop.create_server() <asyncio.loop.create_server>` method can now"
" accept a list of hosts. (Contributed by Yann Sionneau.)"
msgstr ""
":meth:`loop.create_server() <asyncio.loop.create_server>` 方法现在可以接受一个主机列表。 （由"
" Yann Sionneau 贡献。）"

#: ../../whatsnew/3.5.rst:841
msgid "Updates in 3.5.2:"
msgstr "3.5.2 中的更新："

#: ../../whatsnew/3.5.rst:843
msgid ""
"New :meth:`loop.create_future() <asyncio.loop.create_future>` method to "
"create Future objects.  This allows alternative event loop implementations, "
"such as `uvloop <https://github.com/MagicStack/uvloop>`_, to provide a "
"faster :class:`asyncio.Future` implementation. (Contributed by Yury "
"Selivanov.)"
msgstr ""
"新增 :meth:`loop.create_future() <asyncio.loop.create_future>` 方法用来创建 Future "
"对象。 这允许替代性的事件循环实现，比如 `uvloop "
"<https://github.com/MagicStack/uvloop>`_，以提供更快速的 :class:`asyncio.Future` 实现。"
" （由 Yury Selivanov 贡献。）"

#: ../../whatsnew/3.5.rst:850
msgid ""
"New :meth:`loop.get_exception_handler() "
"<asyncio.loop.get_exception_handler>` method to get the current exception "
"handler. (Contributed by Yury Selivanov.)"
msgstr ""
"新增 :meth:`loop.get_exception_handler() <asyncio.loop.get_exception_handler>`"
" 方法用于获取当前异常处理器。 （由 Yury Selivanov 贡献。）"

#: ../../whatsnew/3.5.rst:854
msgid ""
"New :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` method"
" to read data from the stream until a separator bytes sequence appears. "
"(Contributed by Mark Korenberg.)"
msgstr ""
"新增 :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` "
"方法用于从流读取数据直到出现作为分隔符的字节序列。 （由 Mark Korenberg 贡献。）"

#: ../../whatsnew/3.5.rst:859
msgid ""
"The :meth:`loop.create_connection() <asyncio.loop.create_connection>` and "
":meth:`loop.create_server() <asyncio.loop.create_server>` methods are "
"optimized to avoid calling the system ``getaddrinfo`` function if the "
"address is already resolved. (Contributed by A. Jesse Jiryu Davis.)"
msgstr ""
":meth:`loop.create_connection() <asyncio.loop.create_connection>` 和 "
":meth:`loop.create_server() <asyncio.loop.create_server>` "
"方法已获得优化以避免当地址已被解析时调用系统的 ``getaddrinfo`` 函数。 （由 A. Jesse Jiryu Davis 贡献。）"

#: ../../whatsnew/3.5.rst:865
msgid ""
"The :meth:`loop.sock_connect(sock, address) <asyncio.loop.sock_connect>` no "
"longer requires the *address* to be resolved prior to the call. (Contributed"
" by A. Jesse Jiryu Davis.)"
msgstr ""
":meth:`loop.sock_connect(sock, address) <asyncio.loop.sock_connect>` "
"不再要求在其被调用之前已解析 *address*。 （由 A. Jesse Jiryu Davis 贡献。）"

#: ../../whatsnew/3.5.rst:871
msgid "bz2"
msgstr "bz2"

#: ../../whatsnew/3.5.rst:873
msgid ""
"The :meth:`BZ2Decompressor.decompress <bz2.BZ2Decompressor.decompress>` "
"method now accepts an optional *max_length* argument to limit the maximum "
"size of decompressed data. (Contributed by Nikolaus Rath in :issue:`15955`.)"
msgstr ""
"现在 :meth:`BZ2Decompressor.decompress <bz2.BZ2Decompressor.decompress>` "
"方法接受可选的 *max_length* 参数用来限制解压缩数据的大小上限。 （由 Nikolaus Rath 在 :issue:`15955` "
"中贡献。）"

#: ../../whatsnew/3.5.rst:879
msgid "cgi"
msgstr "cgi"

#: ../../whatsnew/3.5.rst:881
msgid ""
"The :class:`~cgi.FieldStorage` class now supports the :term:`context "
"manager` protocol.  (Contributed by Berker Peksag in :issue:`20289`.)"
msgstr ""
"现在 :class:`~cgi.FieldStorage` 类已支持 :term:`context manager` 协议。 （由 Berker "
"Peksag 在 :issue:`20289` 中贡献。）"

#: ../../whatsnew/3.5.rst:886
msgid "cmath"
msgstr "cmath"

#: ../../whatsnew/3.5.rst:888
msgid ""
"A new function :func:`~cmath.isclose` provides a way to test for approximate"
" equality.  (Contributed by Chris Barker and Tal Einat in :issue:`24270`.)"
msgstr ""
"新增函数 :func:`~cmath.isclose` 提供了一种测试近似相等的方式。 （由 Chris Barker 和 Tal Einat 在 "
":issue:`24270` 中贡献。）"

#: ../../whatsnew/3.5.rst:893
msgid "code"
msgstr "code"

#: ../../whatsnew/3.5.rst:895
msgid ""
"The :func:`InteractiveInterpreter.showtraceback() "
"<code.InteractiveInterpreter.showtraceback>` method now prints the full "
"chained traceback, just like the interactive interpreter.  (Contributed by "
"Claudiu Popa in :issue:`17442`.)"
msgstr ""
"现在 :func:`InteractiveInterpreter.showtraceback() "
"<code.InteractiveInterpreter.showtraceback>` 方法将打印完整的回溯链，就像在交互模式解释器中一样。 （由 "
"Claudiu Popa 在 :issue:`17442` 中贡献。）"

#: ../../whatsnew/3.5.rst:901
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.5.rst:905
msgid ""
"The :class:`~collections.OrderedDict` class is now implemented in C, which "
"makes it 4 to 100 times faster.  (Contributed by Eric Snow in "
":issue:`16991`.)"
msgstr ""
"现在 :class:`~collections.OrderedDict` 类使用 C 来实现，令其可提速 4 至 100 倍。 （由 Eric Snow"
" 在 :issue:`16991` 中贡献。）"

#: ../../whatsnew/3.5.rst:908
msgid ""
":meth:`OrderedDict.items() <collections.OrderedDict.items>`, "
":meth:`OrderedDict.keys() <collections.OrderedDict.keys>`, "
":meth:`OrderedDict.values() <collections.OrderedDict.values>` views now "
"support :func:`reversed` iteration. (Contributed by Serhiy Storchaka in "
":issue:`19505`.)"
msgstr ""
":meth:`OrderedDict.items() <collections.OrderedDict.items>`, "
":meth:`OrderedDict.keys() <collections.OrderedDict.keys>`, "
":meth:`OrderedDict.values() <collections.OrderedDict.values>` 等视图现在支持 "
":func:`reversed` 迭代。 （由 Serhiy Storchaka 在 :issue:`19505` 中贡献。）"

#: ../../whatsnew/3.5.rst:914
msgid ""
"The :class:`~collections.deque` class now defines "
":meth:`~collections.deque.index`, :meth:`~collections.deque.insert`, and "
":meth:`~collections.deque.copy`, and supports the ``+`` and ``*`` operators."
" This allows deques to be recognized as a "
":class:`~collections.abc.MutableSequence` and improves their "
"substitutability for lists. (Contributed by Raymond Hettinger in "
":issue:`23704`.)"
msgstr ""
":class:`~collections.deque` 类现在定义了 :meth:`~collections.deque.index`, "
":meth:`~collections.deque.insert` 和 :meth:`~collections.deque.copy`，并且支持 "
"``+`` 和 ``*`` 运算符。 这允许 deque 被识别为 :class:`~collections.abc.MutableSequence` "
"并提升其替代列表的能力。 （由 Raymond Hettinger 在 :issue:`23704` 中贡献。）"

#: ../../whatsnew/3.5.rst:921
msgid ""
"Docstrings produced by :func:`~collections.namedtuple` can now be updated::"
msgstr "由 :func:`~collections.namedtuple` 产生的文档字符串现在可以被更新::"

#: ../../whatsnew/3.5.rst:928
msgid "(Contributed by Berker Peksag in :issue:`24064`.)"
msgstr "（由 Berker Peksag 在 :issue:`24064` 中贡献。）"

#: ../../whatsnew/3.5.rst:930
msgid ""
"The :class:`~collections.UserString` class now implements the "
":meth:`__getnewargs__`, :meth:`__rmod__`, :meth:`~str.casefold`, "
":meth:`~str.format_map`, :meth:`~str.isprintable`, and "
":meth:`~str.maketrans` methods to match the corresponding methods of "
":class:`str`. (Contributed by Joe Jevnik in :issue:`22189`.)"
msgstr ""
"现在 :class:`~collections.UserString` 类已实现 :meth:`__getnewargs__`, "
":meth:`__rmod__`, :meth:`~str.casefold`, :meth:`~str.format_map`, "
":meth:`~str.isprintable` 和 :meth:`~str.maketrans` 类以与对应的 :class:`str` 方法相匹配。"
" （由 Joe Jevnik 在 :issue:`22189` 中贡献。）"

#: ../../whatsnew/3.5.rst:938
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.5.rst:940
msgid ""
"The :meth:`Sequence.index() <collections.abc.Sequence.index>` method now "
"accepts *start* and *stop* arguments to match the corresponding methods of "
":class:`tuple`, :class:`list`, etc. (Contributed by Devin Jeanpierre in "
":issue:`23086`.)"
msgstr ""
"现在 :meth:`Sequence.index() <collections.abc.Sequence.index>` 方法接受 *start* 和 "
"*stop* 参数以与对应的 :class:`tuple`, :class:`list` 等的方法相匹配。 （由 Devin Jeanpierre 在 "
":issue:`23086` 中贡献。）"

#: ../../whatsnew/3.5.rst:945
msgid ""
"A new :class:`~collections.abc.Generator` abstract base class. (Contributed "
"by Stefan Behnel in :issue:`24018`.)"
msgstr ""
"新增 :class:`~collections.abc.Generator` 抽象基类。 （由 Stefan Behnel 在 "
":issue:`24018` 中贡献。）"

#: ../../whatsnew/3.5.rst:948
msgid ""
"New :class:`~collections.abc.Awaitable`, "
":class:`~collections.abc.Coroutine`, "
":class:`~collections.abc.AsyncIterator`, and "
":class:`~collections.abc.AsyncIterable` abstract base classes. (Contributed "
"by Yury Selivanov in :issue:`24184`.)"
msgstr ""
"新增 :class:`~collections.abc.Awaitable`, :class:`~collections.abc.Coroutine`,"
" :class:`~collections.abc.AsyncIterator` 和 "
":class:`~collections.abc.AsyncIterable` 抽象基类。 （由 Yury Selivanov 在 "
":issue:`24184` 中贡献。）"

#: ../../whatsnew/3.5.rst:953
msgid ""
"For earlier Python versions, a backport of the new ABCs is available in an "
"external `PyPI package <https://pypi.org/project/backports_abc>`_."
msgstr ""
"对于更早的 Python，这些新 ABC 的向下移植版可通过一个外部的 `PyPI 包 "
"<https://pypi.org/project/backports_abc>`_ 来获取。"

#: ../../whatsnew/3.5.rst:958
msgid "compileall"
msgstr "compileall"

#: ../../whatsnew/3.5.rst:960
msgid ""
"A new :mod:`compileall` option, :samp:`-j {N}`, allows running *N* workers "
"simultaneously to perform parallel bytecode compilation. The "
":func:`~compileall.compile_dir` function has a corresponding ``workers`` "
"parameter.  (Contributed by Claudiu Popa in :issue:`16104`.)"
msgstr ""
"新增 :mod:`compileall` 选项 :samp:`-j {N}`，允许同时运行 *N* 个工作进程来执行并行的字节码编译。 "
":func:`~compileall.compile_dir` 函数增加了相应的 ``workers`` 形参。 （由 Claudiu Popa 在 "
":issue:`16104` 中贡献。）"

#: ../../whatsnew/3.5.rst:965
msgid ""
"Another new option, ``-r``, allows controlling the maximum recursion level "
"for subdirectories.  (Contributed by Claudiu Popa in :issue:`19628`.)"
msgstr "另一个新选项 ``-r``，允许控制最大的子目录递归层级。 （由 Claudiu Popa 在 :issue:`19628` 中贡献。）"

#: ../../whatsnew/3.5.rst:968
msgid ""
"The ``-q`` command line option can now be specified more than once, in which"
" case all output, including errors, will be suppressed.  The corresponding "
"``quiet`` parameter in :func:`~compileall.compile_dir`, "
":func:`~compileall.compile_file`, and :func:`~compileall.compile_path` can "
"now accept an integer value indicating the level of output suppression. "
"(Contributed by Thomas Kluyver in :issue:`21338`.)"
msgstr ""
"现在可以多次指定 ``-q`` 命令行选项，在此情况下，所有输出包括错误都将被抑制。 在 "
":func:`~compileall.compile_dir`, :func:`~compileall.compile_file` 和 "
":func:`~compileall.compile_path` 中相应的 ``quiet`` 形参现在可接受一个整数值来指明输出抑制的级别。 （由 "
"Thomas Kluyver 在 :issue:`21338` 中贡献。）"

#: ../../whatsnew/3.5.rst:977
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.5.rst:979
msgid ""
"The :meth:`Executor.map() <concurrent.futures.Executor.map>` method now "
"accepts a *chunksize* argument to allow batching of tasks to improve "
"performance when :meth:`~concurrent.futures.ProcessPoolExecutor` is used. "
"(Contributed by Dan O'Reilly in :issue:`11271`.)"
msgstr ""
"现在 :meth:`Executor.map() <concurrent.futures.Executor.map>` 方法接受一个 "
"*chunksize* 参数以允许在使用 :meth:`~concurrent.futures.ProcessPoolExecutor` "
"设置任务批次来提升运行效率。 （由 Dan O'Reilly 在 :issue:`11271` 中贡献。）"

#: ../../whatsnew/3.5.rst:984
msgid ""
"The number of workers in the :class:`~concurrent.futures.ThreadPoolExecutor`"
" constructor is optional now.  The default value is 5 times the number of "
"CPUs. (Contributed by Claudiu Popa in :issue:`21527`.)"
msgstr ""
"现在 :class:`~concurrent.futures.ThreadPoolExecutor` 构造器中的工作线程数量是可选的。 默认值为 CPU"
" 数量的 5 倍。 （由 Claudiu Popa 在 :issue:`21527` 中贡献。）"

#: ../../whatsnew/3.5.rst:990
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.5.rst:992
msgid ""
":mod:`configparser` now provides a way to customize the conversion of values"
" by specifying a dictionary of converters in the "
":class:`~configparser.ConfigParser` constructor, or by defining them as "
"methods in ``ConfigParser`` subclasses.  Converters defined in a parser "
"instance are inherited by its section proxies."
msgstr ""
"现在 :mod:`configparser` 提供了一种方式通过在 :class:`~configparser.ConfigParser` "
"构造器中指定一个由转换器组成的字典，或将它们定义为 ``ConfigParser`` 子类中的方法来定制值的转换。 "
"在解析器实例中定义的转换器将被它的节代理所继承。"

#: ../../whatsnew/3.5.rst:998
msgid "Example::"
msgstr "示例::"

#: ../../whatsnew/3.5.rst:1016
msgid "(Contributed by Łukasz Langa in :issue:`18159`.)"
msgstr "（由 Łukasz Langa 在 :issue:`18159` 中贡献。）"

#: ../../whatsnew/3.5.rst:1020
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.5.rst:1022
msgid ""
"The new :func:`~contextlib.redirect_stderr` :term:`context manager` (similar"
" to :func:`~contextlib.redirect_stdout`) makes it easier for utility scripts"
" to handle inflexible APIs that write their output to :data:`sys.stderr` and"
" don't provide any options to redirect it::"
msgstr ""
"新增的 :func:`~contextlib.redirect_stderr` :term:`context manager` (类似于 "
":func:`~contextlib.redirect_stdout`) 使得工具脚本更容易处理那些将输出写入到 :data:`sys.stderr` "
"并且不提供任何重定向选项的不灵活 API。"

#: ../../whatsnew/3.5.rst:1035
msgid "(Contributed by Berker Peksag in :issue:`22389`.)"
msgstr "（由 Berker Peksag 在 :issue:`22389` 中贡献。）"

#: ../../whatsnew/3.5.rst:1039
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.5.rst:1041
msgid ""
"The :meth:`~csv.csvwriter.writerow` method now supports arbitrary iterables,"
" not just sequences.  (Contributed by Serhiy Storchaka in :issue:`23171`.)"
msgstr ""
"现在 :meth:`~csv.csvwriter.writerow` 方法可支持任意可迭代对象，而不仅是序列。 （由 Serhiy Storchaka "
"在 :issue:`23171` 中贡献。）"

#: ../../whatsnew/3.5.rst:1046
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.5.rst:1048
msgid ""
"The new :func:`~curses.update_lines_cols` function updates the :data:`LINES`"
" and :data:`COLS` module variables.  This is useful for detecting manual "
"screen resizing.  (Contributed by Arnon Yaari in :issue:`4254`.)"
msgstr ""
"新增的 :func:`~curses.update_lines_cols` 函数可更新 :data:`LINES` 和 :data:`COLS` "
"模块变量。 这适用于检测手册页屏幕的大小变化。 （由 Arnon Yaari 在 :issue:`4254` 中贡献。）"

#: ../../whatsnew/3.5.rst:1054
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.5.rst:1056
msgid ""
":func:`dumb.open <dbm.dumb.open>` always creates a new database when the "
"flag has the value ``\"n\"``.  (Contributed by Claudiu Popa in "
":issue:`18039`.)"
msgstr ""
"当设置旗标值为 ``\"n\"`` 时 :func:`dumb.open <dbm.dumb.open>` 将总是创建新的数据库。 （由 Claudiu"
" Popa 在 :issue:`18039` 中贡献。）"

#: ../../whatsnew/3.5.rst:1061
msgid "difflib"
msgstr "difflib"

#: ../../whatsnew/3.5.rst:1063
msgid ""
"The charset of HTML documents generated by :meth:`HtmlDiff.make_file() "
"<difflib.HtmlDiff.make_file>` can now be customized by using a new *charset*"
" keyword-only argument. The default charset of HTML document changed from "
"``\"ISO-8859-1\"`` to ``\"utf-8\"``. (Contributed by Berker Peksag in "
":issue:`2052`.)"
msgstr ""
"由 :meth:`HtmlDiff.make_file() <difflib.HtmlDiff.make_file>` 生成的 HTML "
"文档的字符集现在可通过使用新增的 *charset* 仅限关键字参数来自定义。 HTML 文档的默认字符集已从 ``\"ISO-8859-1\"`` "
"改为 ``\"utf-8\"``。 （由 Berker Peksag 在 :issue:`2052` 中贡献。）"

#: ../../whatsnew/3.5.rst:1070
msgid ""
"The :func:`~difflib.diff_bytes` function can now compare lists of byte "
"strings.  This fixes a regression from Python 2. (Contributed by Terry J. "
"Reedy and Greg Ward in :issue:`17445`.)"
msgstr ""
"现在 :func:`~difflib.diff_bytes` 函数可能比较字节串的列表。 这修复了一个来自 Python 2 遗留总是。 （由 "
"Terry J. Reedy 和 Greg Ward 在 :issue:`17445` 中贡献。）"

#: ../../whatsnew/3.5.rst:1076
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.5.rst:1078
msgid ""
"Both the ``build`` and ``build_ext`` commands now accept a ``-j`` option to "
"enable parallel building of extension modules. (Contributed by Antoine "
"Pitrou in :issue:`5309`.)"
msgstr ""
"现在 ``build`` 和 ``build_ext`` 命令都接受一个 ``-j`` 选项以启用扩展模块的并行编译。 （由 Antoine "
"Pitrou 在 :issue:`5309` 中贡献。）"

#: ../../whatsnew/3.5.rst:1082
msgid ""
"The :mod:`distutils` module now supports ``xz`` compression, and can be "
"enabled by passing ``xztar`` as an argument to ``bdist --format``. "
"(Contributed by Serhiy Storchaka in :issue:`16314`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1088
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.5.rst:1090
msgid ""
"The :func:`~doctest.DocTestSuite` function returns an empty "
":class:`unittest.TestSuite` if *module* contains no docstrings, instead of "
"raising :exc:`ValueError`.  (Contributed by Glenn Jones in :issue:`15916`.)"
msgstr ""
"如果 *module* 不包含任何文档字符串则 :func:`~doctest.DocTestSuite` 函数将返回一个空的 "
":class:`unittest.TestSuite`，而不是引发 :exc:`ValueError`。 （由 Glenn Jones 在 "
":issue:`15916` 中贡献。）"

#: ../../whatsnew/3.5.rst:1096
msgid "email"
msgstr "email"

#: ../../whatsnew/3.5.rst:1098
msgid ""
"A new policy option :attr:`Policy.mangle_from_ "
"<email.policy.Policy.mangle_from_>` controls whether or not lines that start"
" with ``\"From \"`` in email bodies are prefixed with a ``\">\"`` character "
"by generators.  The default is ``True`` for :attr:`~email.policy.compat32` "
"and ``False`` for all other policies. (Contributed by Milan Oberkirch in "
":issue:`20098`.)"
msgstr ""
"新增的策略选项 :attr:`Policy.mangle_from_ <email.policy.Policy.mangle_from_>` "
"可控制生成器是否要为电子邮件消息体中以controls whether or not lines that start with ``\"From "
"\"`` 打头的行添加 ``\">\"`` 字符前缀。 默认 :attr:`~email.policy.compat32` 为 ``True`` "
"而所有其他策略均为 ``False``。 （由 Milan Oberkirch 在 :issue:`20098` 中贡献。）"

#: ../../whatsnew/3.5.rst:1104
msgid ""
"A new :meth:`Message.get_content_disposition() "
"<email.message.Message.get_content_disposition>` method provides easy access"
" to a canonical value for the :mailheader:`Content-Disposition` header. "
"(Contributed by Abhilash Raj in :issue:`21083`.)"
msgstr ""
"新增的 :meth:`Message.get_content_disposition() "
"<email.message.Message.get_content_disposition>` 方法可提供对 "
":mailheader:`Content-Disposition` 标头规范值的便捷访问。 （由 Abhilash Raj 在 "
":issue:`21083` 中贡献。）"

#: ../../whatsnew/3.5.rst:1110
msgid ""
"A new policy option :attr:`EmailPolicy.utf8 <email.policy.EmailPolicy.utf8>`"
" can be set to ``True`` to encode email headers using the UTF-8 charset "
"instead of using encoded words.  This allows ``Messages`` to be formatted "
"according to :rfc:`6532` and used with an SMTP server that supports the "
":rfc:`6531` ``SMTPUTF8`` extension.  (Contributed by R. David Murray in "
":issue:`24211`.)"
msgstr ""
"新增的策略选项 :attr:`EmailPolicy.utf8 <email.policy.EmailPolicy.utf8>` 可被设为 "
"``True`` 以使用 UTF-8 字符集而不是使用已编码的字来编码电子邮件标头。 这将允许根据 :rfc:`6532` 来格式化 "
"``Messages`` 并配合支持 :rfc:`6531` ``SMTPUTF8`` 扩展的 SMTP 服务器使用。 （由 R. David "
"Murray 在 :issue:`24211` 中贡献。）"

#: ../../whatsnew/3.5.rst:1117
msgid ""
"The :class:`mime.text.MIMEText <email.mime.text.MIMEText>` constructor now "
"accepts a :class:`charset.Charset <email.charset.Charset>` instance. "
"(Contributed by Claude Paroz and Berker Peksag in :issue:`16324`.)"
msgstr ""
"现在 :class:`mime.text.MIMEText <email.mime.text.MIMEText>` 构造器可接受一个 "
":class:`charset.Charset <email.charset.Charset>` 实例。 （由 Claude Paroz 和 "
"Berker Peksag 在 :issue:`16324` 中贡献。）"

#: ../../whatsnew/3.5.rst:1123
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.5.rst:1125
msgid ""
"The :class:`~enum.Enum` callable has a new parameter *start* to specify the "
"initial number of enum values if only *names* are provided::"
msgstr ""
":class:`~enum.Enum` 可调用对象新增了一个形参 *start* 用于在只提供了 *names* 的情况下指定枚举值的初始数量::"

#: ../../whatsnew/3.5.rst:1134
msgid "(Contributed by Ethan Furman in :issue:`21706`.)"
msgstr "（由 Ethan Furman 在 :issue:`21706` 中贡献。）"

#: ../../whatsnew/3.5.rst:1138
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.5.rst:1140
msgid ""
"The :func:`~faulthandler.enable`, :func:`~faulthandler.register`, "
":func:`~faulthandler.dump_traceback` and "
":func:`~faulthandler.dump_traceback_later` functions now accept file "
"descriptors in addition to file-like objects. (Contributed by Wei Wu in "
":issue:`23566`.)"
msgstr ""
"现在 :func:`~faulthandler.enable`, :func:`~faulthandler.register`, "
":func:`~faulthandler.dump_traceback` 和 "
":func:`~faulthandler.dump_traceback_later` 函数除了接受文件型对象以外也接受文件描述符。 （由 Wei Wu "
"在 :issue:`23566` 中贡献。）"

#: ../../whatsnew/3.5.rst:1148
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.5.rst:1152
msgid ""
"Most of the :func:`~functools.lru_cache` machinery is now implemented in C, "
"making it significantly faster.  (Contributed by Matt Joiner, Alexey "
"Kachayev, and Serhiy Storchaka in :issue:`14373`.)"
msgstr ""
"现在大部分 :func:`~functools.lru_cache` 机制已使用 C 实现，使其速度显著提升。 （由 Matt Joiner, "
"Alexey Kachayev 和 Serhiy Storchaka 在 :issue:`14373` 中贡献。）"

#: ../../whatsnew/3.5.rst:1158
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.5.rst:1160
msgid ""
"The :func:`~glob.iglob` and :func:`~glob.glob` functions now support "
"recursive search in subdirectories, using the ``\"**\"`` pattern. "
"(Contributed by Serhiy Storchaka in :issue:`13968`.)"
msgstr ""
"现在 :func:`~glob.iglob` 和 :func:`~glob.glob` 函数支持通过使用 ``\"**\"`` 模式在子目录中递归搜索。"
" （由 Serhiy Storchaka 在 :issue:`13968` 中贡献。）"

#: ../../whatsnew/3.5.rst:1166
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.5.rst:1168
msgid ""
"The *mode* argument of the :class:`~gzip.GzipFile` constructor now accepts "
"``\"x\"`` to request exclusive creation. (Contributed by Tim Heaney in "
":issue:`19222`.)"
msgstr ""
"现在 :class:`~gzip.GzipFile` 构造器的 *mode* 参数可接受 ``\"x\"`` 来请求独占式的创建。 （由 Tim "
"Heaney 在 :issue:`19222` 中贡献。）"

#: ../../whatsnew/3.5.rst:1174
msgid "heapq"
msgstr "heapq"

#: ../../whatsnew/3.5.rst:1176
msgid ""
"Element comparison in :func:`~heapq.merge` can now be customized by passing "
"a :term:`key function` in a new optional *key* keyword argument, and a new "
"optional *reverse* keyword argument can be used to reverse element "
"comparison::"
msgstr ""
"现在 :func:`~heapq.merge` 中的元素比较可通过在新增的可选关键字参数 *key* 中传入一个 :term:`key "
"function` 来进行定制，并且新增了可选关键字参数 *reverse* 用于反向的元素比较::"

#: ../../whatsnew/3.5.rst:1189
msgid "(Contributed by Raymond Hettinger in :issue:`13742`.)"
msgstr "（由 Raymond Hettinger 在 :issue:`13742` 中贡献。）"

#: ../../whatsnew/3.5.rst:1193
msgid "http"
msgstr "http"

#: ../../whatsnew/3.5.rst:1195
msgid ""
"A new :class:`HTTPStatus <http.HTTPStatus>` enum that defines a set of HTTP "
"status codes, reason phrases and long descriptions written in English. "
"(Contributed by Demian Brecht in :issue:`21793`.)"
msgstr ""
"新增的 :class:`HTTPStatus <http.HTTPStatus>` 枚举定义了一组 HTTP 状态码、英文短说明和长描述。 （由 "
"Demian Brecht 在 :issue:`21793` 中贡献。）"

#: ../../whatsnew/3.5.rst:1201
msgid "http.client"
msgstr "http.client"

#: ../../whatsnew/3.5.rst:1203
msgid ""
":meth:`HTTPConnection.getresponse() "
"<http.client.HTTPConnection.getresponse>` now raises a "
":exc:`~http.client.RemoteDisconnected` exception when a remote server "
"connection is closed unexpectedly.  Additionally, if a "
":exc:`ConnectionError` (of which ``RemoteDisconnected`` is a subclass) is "
"raised, the client socket is now closed automatically, and will reconnect on"
" the next request::"
msgstr ""
"现在 :meth:`HTTPConnection.getresponse() "
"<http.client.HTTPConnection.getresponse>` 在远程服务器连接被意外关闭时会引发 "
":exc:`~http.client.RemoteDisconnected` 异常。 此外，如果引发了 :exc:`ConnectionError` "
"(``RemoteDisconnected`` 是其子类)，客户端套接字现在会自动关闭，并将在下次请求时重新连接::"

#: ../../whatsnew/3.5.rst:1219
msgid "(Contributed by Martin Panter in :issue:`3566`.)"
msgstr "（由 Martin Panter 在 :issue:`3566` 中贡献。）"

#: ../../whatsnew/3.5.rst:1223
msgid "idlelib and IDLE"
msgstr "idlelib 与 IDLE"

#: ../../whatsnew/3.5.rst:1225
msgid ""
"Since idlelib implements the IDLE shell and editor and is not intended for "
"import by other programs, it gets improvements with every release.  See "
":file:`Lib/idlelib/NEWS.txt` for a cumulative list of changes since 3.4.0, "
"as well as changes made in future 3.5.x releases. This file is also "
"available from the IDLE :menuselection:`Help --> About IDLE` dialog."
msgstr ""
"由于 idlelib 实现了 IDLE 命令行界面和编辑器且不应被其他程序导入，它将随每个发布版获得不断改进。 请参阅 "
":file:`Lib/idlelib/NEWS.txt` 查看 3.4.0 以来的累积改变列表，以及未来 3.5.x 发布版将进行的改变。 "
"此文件也可通过 IDLE :menuselection:`Help --> About IDLE` 对话框查看。"

#: ../../whatsnew/3.5.rst:1233
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.5.rst:1235
msgid ""
"The :class:`~imaplib.IMAP4` class now supports the :term:`context manager` "
"protocol. When used in a :keyword:`with` statement, the IMAP4 ``LOGOUT`` "
"command will be called automatically at the end of the block. (Contributed "
"by Tarek Ziadé and Serhiy Storchaka in :issue:`4972`.)"
msgstr ""
"现在 :class:`~imaplib.IMAP4` 类已支持 :term:`context manager` 协议。 当用于 "
":keyword:`with` 语句时，IMAP4 ``LOGOUT`` 命令将在代码块的末尾被自动调用。 （由 Tarek Ziadé 和 "
"Serhiy Storchaka 在 :issue:`4972` 中贡献。）"

#: ../../whatsnew/3.5.rst:1240
msgid ""
"The :mod:`imaplib` module now supports :rfc:`5161` (ENABLE Extension) and "
":rfc:`6855` (UTF-8 Support) via the :meth:`IMAP4.enable() "
"<imaplib.IMAP4.enable>` method.  A new :attr:`IMAP4.utf8_enabled "
"<imaplib.IMAP4.utf8_enabled>` attribute tracks whether or not :rfc:`6855` "
"support is enabled. (Contributed by Milan Oberkirch, R. David Murray, and "
"Maciej Szulik in :issue:`21800`.)"
msgstr ""
"现在 :mod:`imaplib` 模块已通过 :meth:`IMAP4.enable() <imaplib.IMAP4.enable>` 方法支持 "
":rfc:`5161` (ENABLE 扩展) 和 :rfc:`6855` (UTF-8 支持)。 新增的 "
":attr:`IMAP4.utf8_enabled <imaplib.IMAP4.utf8_enabled>` 属性可跟踪 :rfc:`6855` "
"支持是否被启用。 （由 Milan Oberkirch, R. David Murray 和 Maciej Szulik 在 "
":issue:`21800` 中贡献。）"

#: ../../whatsnew/3.5.rst:1247
msgid ""
"The :mod:`imaplib` module now automatically encodes non-ASCII string "
"usernames and passwords using UTF-8, as recommended by the RFCs.  "
"(Contributed by Milan Oberkirch in :issue:`21800`.)"
msgstr ""
"现在 :mod:`imaplib` 模块会自动使用 UTF-8 自动编码非 ASCII 字符串的用户名和密码，如 RFC 所建议的那样。 （由 "
"Milan Oberkirch 在 :issue:`21800` 中贡献。）"

#: ../../whatsnew/3.5.rst:1253
msgid "imghdr"
msgstr "imghdr"

#: ../../whatsnew/3.5.rst:1255
msgid ""
"The :func:`~imghdr.what` function now recognizes the `OpenEXR "
"<https://www.openexr.com>`_ format (contributed by Martin Vignali and "
"Claudiu Popa in :issue:`20295`), and the `WebP "
"<https://en.wikipedia.org/wiki/WebP>`_ format (contributed by Fabrice Aneche"
" and Claudiu Popa in :issue:`20197`.)"
msgstr ""
"现在 :func:`~imghdr.what` 函数可识别 `OpenEXR <https://www.openexr.com>`_ 格式（由 "
"Martin Vignali 和 Claudiu Popa 在 :issue:`20295` 中贡献），以及 `WebP "
"<https://en.wikipedia.org/wiki/WebP>`_ 格式（由 Fabrice Aneche 和 Claudiu Popa 在 "
":issue:`20197` 中贡献。）"

#: ../../whatsnew/3.5.rst:1263
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.5.rst:1265
msgid ""
"The :class:`util.LazyLoader <importlib.util.LazyLoader>` class allows for "
"lazy loading of modules in applications where startup time is important. "
"(Contributed by Brett Cannon in :issue:`17621`.)"
msgstr ""
":class:`util.LazyLoader <importlib.util.LazyLoader>` "
"类允许在对启动时间敏感的应用程序中使用模块的惰性加载。 （由 Brett Cannon 在 :issue:`17621` 中贡献。）"

#: ../../whatsnew/3.5.rst:1269
msgid ""
"The :func:`abc.InspectLoader.source_to_code() "
"<importlib.abc.InspectLoader.source_to_code>` method is now a static method."
"  This makes it easier to initialize a module object with code compiled from"
" a string by running ``exec(code, module.__dict__)``. (Contributed by Brett "
"Cannon in :issue:`21156`.)"
msgstr ""
"现在 :func:`abc.InspectLoader.source_to_code() "
"<importlib.abc.InspectLoader.source_to_code>` 方法属于静态方法。 这样将可更方便地通过运行 "
"``exec(code, module.__dict__)`` 基于字符串编译的代码来初始化模块。 （由 Brett Cannon 在 "
":issue:`21156` 中贡献。）"

#: ../../whatsnew/3.5.rst:1275
msgid ""
"The new :func:`util.module_from_spec() <importlib.util.module_from_spec>` "
"function is now the preferred way to create a new module.  As opposed to "
"creating a :class:`types.ModuleType` instance directly, this new function "
"will set the various import-controlled attributes based on the passed-in "
"spec object.  (Contributed by Brett Cannon in :issue:`20383`.)"
msgstr ""
"新增的 :func:`util.module_from_spec() <importlib.util.module_from_spec>` "
"函数现在是创建新模块的首先方式。 相比直接创建 :class:`types.ModuleType` "
"实例，这个新函数将基于传入的规格说明对象设置各种导入控制的属性。 （由 Brett Cannon 在 :issue:`20383` 中贡献。）"

#: ../../whatsnew/3.5.rst:1283
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.5.rst:1285
msgid ""
"Both the :class:`~inspect.Signature` and :class:`~inspect.Parameter` classes"
" are now picklable and hashable.  (Contributed by Yury Selivanov in "
":issue:`20726` and :issue:`20334`.)"
msgstr ""
"现在 :class:`~inspect.Signature` 和 :class:`~inspect.Parameter` 类都是可封存和可哈希的对象。 "
"（由 Yury Selivanov 在 :issue:`20726` 和 :issue:`20334` 中贡献。）"

#: ../../whatsnew/3.5.rst:1289
msgid ""
"A new :meth:`BoundArguments.apply_defaults() "
"<inspect.BoundArguments.apply_defaults>` method provides a way to set "
"default values for missing arguments::"
msgstr ""
"新增的 :meth:`BoundArguments.apply_defaults() "
"<inspect.BoundArguments.apply_defaults>` 方法提供了一种为缺失的参数设置默认值的方式::"

#: ../../whatsnew/3.5.rst:1299
msgid "(Contributed by Yury Selivanov in :issue:`24190`.)"
msgstr "（由 Yury Selivanov 在 :issue:`24190` 中贡献。）"

#: ../../whatsnew/3.5.rst:1301
msgid ""
"A new class method :meth:`Signature.from_callable() "
"<inspect.Signature.from_callable>` makes subclassing of "
":class:`~inspect.Signature` easier.  (Contributed by Yury Selivanov and Eric"
" Snow in :issue:`17373`.)"
msgstr ""
"新增的类方法 :meth:`Signature.from_callable() <inspect.Signature.from_callable>` "
"使得 :class:`~inspect.Signature` 的子类化更为容易。 （由 Yury Selivanov 和 Eric Snow 在 "
":issue:`17373` 中贡献。）"

#: ../../whatsnew/3.5.rst:1306
msgid ""
"The :func:`~inspect.signature` function now accepts a *follow_wrapped* "
"optional keyword argument, which, when set to ``False``, disables automatic "
"following of ``__wrapped__`` links. (Contributed by Yury Selivanov in "
":issue:`20691`.)"
msgstr ""
"现在 :func:`~inspect.signature` 函数接受 *follow_wrapped* 可选关键字参数，当其设为 ``False`` "
"时，将禁用 ``__wrapped__`` 链接的自动跟随。 （由 Yury Selivanov 在 :issue:`20691` 中贡献。）"

#: ../../whatsnew/3.5.rst:1311
msgid ""
"A set of new functions to inspect :term:`coroutine functions <coroutine "
"function>` and :term:`coroutine objects <coroutine>` has been added: "
":func:`~inspect.iscoroutine`, :func:`~inspect.iscoroutinefunction`, "
":func:`~inspect.isawaitable`, :func:`~inspect.getcoroutinelocals`, and "
":func:`~inspect.getcoroutinestate`. (Contributed by Yury Selivanov in "
":issue:`24017` and :issue:`24400`.)"
msgstr ""
"新增了一组用于检查 :term:`协程函数 <coroutine function>` 和 :term:`协程对象 <coroutine>` 的函数: "
":func:`~inspect.iscoroutine`, :func:`~inspect.iscoroutinefunction`, "
":func:`~inspect.isawaitable`, :func:`~inspect.getcoroutinelocals` 和 "
":func:`~inspect.getcoroutinestate`。 （由 Yury Selivanov 在 :issue:`24017` 和 "
":issue:`24400` 中贡献。）"

#: ../../whatsnew/3.5.rst:1319
msgid ""
"The :func:`~inspect.stack`, :func:`~inspect.trace`, "
":func:`~inspect.getouterframes`, and :func:`~inspect.getinnerframes` "
"functions now return a list of named tuples. (Contributed by Daniel Shahaf "
"in :issue:`16808`.)"
msgstr ""
"现在 :func:`~inspect.stack`, :func:`~inspect.trace`, "
":func:`~inspect.getouterframes` 和 :func:`~inspect.getinnerframes` "
"函数将返回具名元组的列表。 （由 Daniel Shahaf 在 :issue:`16808` 中贡献。）"

#: ../../whatsnew/3.5.rst:1326
msgid "io"
msgstr "io"

#: ../../whatsnew/3.5.rst:1328
msgid ""
"A new :meth:`BufferedIOBase.readinto1() <io.BufferedIOBase.readinto1>` "
"method, that uses at most one call to the underlying raw stream's "
":meth:`RawIOBase.read() <io.RawIOBase.read>` or :meth:`RawIOBase.readinto() "
"<io.RawIOBase.readinto>` methods. (Contributed by Nikolaus Rath in "
":issue:`20578`.)"
msgstr ""
"新增 :meth:`BufferedIOBase.readinto1() <io.BufferedIOBase.readinto1>` "
"方法，该方法会使用至少一次对下层原始流的调用 :meth:`RawIOBase.read() <io.RawIOBase.read>` 或 "
":meth:`RawIOBase.readinto() <io.RawIOBase.readinto>` 方法。 （由 Nikolaus Rath 在 "
":issue:`20578` 中贡献。）"

#: ../../whatsnew/3.5.rst:1336
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.5.rst:1338
msgid ""
"Both the :class:`~ipaddress.IPv4Network` and :class:`~ipaddress.IPv6Network`"
" classes now accept an ``(address, netmask)`` tuple argument, so as to "
"easily construct network objects from existing addresses::"
msgstr ""
"现在 :class:`~ipaddress.IPv4Network` 和 :class:`~ipaddress.IPv6Network` 类均接受一个 "
"``(address, netmask)`` 元组参数，可以根据现有地址方便地构造网络对象::"

#: ../../whatsnew/3.5.rst:1348
msgid "(Contributed by Peter Moody and Antoine Pitrou in :issue:`16531`.)"
msgstr "（由 Peter Moody 和 Antoine Pitrou 在 :issue:`16531` 中贡献。）"

#: ../../whatsnew/3.5.rst:1350
msgid ""
"A new :attr:`~ipaddress.IPv4Network.reverse_pointer` attribute for the "
":class:`~ipaddress.IPv4Network` and :class:`~ipaddress.IPv6Network` classes "
"returns the name of the reverse DNS PTR record::"
msgstr ""
"新增 :class:`~ipaddress.IPv4Network` 和 :class:`~ipaddress.IPv6Network` 类的 "
":attr:`~ipaddress.IPv4Network.reverse_pointer` 属性用于返回 DNS PTR 反向记录的名称::"

#: ../../whatsnew/3.5.rst:1362
msgid "(Contributed by Leon Weber in :issue:`20480`.)"
msgstr "（由 Leon Weber 在 :issue:`20480` 中贡献。）"

#: ../../whatsnew/3.5.rst:1366
msgid "json"
msgstr "json"

#: ../../whatsnew/3.5.rst:1368
msgid ""
"The :mod:`json.tool` command line interface now preserves the order of keys "
"in JSON objects passed in input.  The new ``--sort-keys`` option can be used"
" to sort the keys alphabetically. (Contributed by Berker Peksag in "
":issue:`21650`.)"
msgstr ""
"现在 :mod:`json.tool` 命令行接口会保留输入中传入的 JSON 对象中键的顺序。 新的 ``--sort-keys`` "
"选项可用于按字母顺序对键进行排序。 （由 Berker Peksag 在 :issue:`21650` 中贡献。）"

#: ../../whatsnew/3.5.rst:1373
msgid ""
"JSON decoder now raises :exc:`~json.JSONDecodeError` instead of "
":exc:`ValueError` to provide better context information about the error. "
"(Contributed by Serhiy Storchaka in :issue:`19361`.)"
msgstr ""
"现在 JSON 解码器会引发 :exc:`~json.JSONDecodeError` 而不是 :exc:`ValueError` "
"以提供有关错误的更好的上下文信息。 （由 Serhiy Storchaka 在 :issue:`19361` 中贡献。）"

#: ../../whatsnew/3.5.rst:1379
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.5.rst:1381
msgid ""
"A new :func:`~linecache.lazycache` function can be used to capture "
"information about a non-file-based module to permit getting its lines later "
"via :func:`~linecache.getline`. This avoids doing I/O until a line is "
"actually needed, without having to carry the module globals around "
"indefinitely. (Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""
"新增的 :func:`~linecache.lazycache` 函数可用于捕获非基于文件的模块 的信息以允许在此后通过 "
":func:`~linecache.getline` 获取其行数据。 这样就可以避免在实际需要某一行之前执行 I/O 操作，从而不需要无限期地持有模块 "
"globals。 （由 Robert Collins 在 :issue:`17911` 中贡献。）"

#: ../../whatsnew/3.5.rst:1389
msgid "locale"
msgstr "locale"

#: ../../whatsnew/3.5.rst:1391
msgid ""
"A new :func:`~locale.delocalize` function can be used to convert a string "
"into a normalized number string, taking the ``LC_NUMERIC`` settings into "
"account::"
msgstr ""
"新增的 :func:`~locale.delocalize` 函数可用于将字符串转换为表示规范化数字的字符串 ，并会考虑 ``LC_NUMERIC`` "
"的设置::"

#: ../../whatsnew/3.5.rst:1404
msgid "(Contributed by Cédric Krier in :issue:`13918`.)"
msgstr "（由 Cédric Krier 在 :issue:`13918` 中贡献。）"

#: ../../whatsnew/3.5.rst:1408
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.5.rst:1410
msgid ""
"All logging methods (:class:`~logging.Logger` :meth:`~logging.Logger.log`, "
":meth:`~logging.Logger.exception`, :meth:`~logging.Logger.critical`, "
":meth:`~logging.Logger.debug`, etc.), now accept exception instances as an "
"*exc_info* argument, in addition to boolean values and exception tuples::"
msgstr ""
"所有日志记录方法（如 :class:`~logging.Logger` :meth:`~logging.Logger.log`, "
":meth:`~logging.Logger.exception`, :meth:`~logging.Logger.critical`, "
":meth:`~logging.Logger.debug` 等）的 *exc_info* 参数现在除接受布尔值和异常元组以外，也接受异常实例::"

#: ../../whatsnew/3.5.rst:1423
msgid "(Contributed by Yury Selivanov in :issue:`20537`.)"
msgstr "（由 Yury Selivanov 在 :issue:`20537` 中贡献。）"

#: ../../whatsnew/3.5.rst:1425
msgid ""
"The :class:`handlers.HTTPHandler <logging.handlers.HTTPHandler>` class now "
"accepts an optional :class:`ssl.SSLContext` instance to configure SSL "
"settings used in an HTTP connection. (Contributed by Alex Gaynor in "
":issue:`22788`.)"
msgstr ""
"现在 :class:`handlers.HTTPHandler <logging.handlers.HTTPHandler>` 类接受一个可选的 "
":class:`ssl.SSLContext` 实例来配置在 HTTP 连接中使用的 SSL 设置。 （由 Alex Gaynor 在 "
":issue:`22788` 中贡献。）"

#: ../../whatsnew/3.5.rst:1430
msgid ""
"The :class:`handlers.QueueListener <logging.handlers.QueueListener>` class "
"now takes a *respect_handler_level* keyword argument which, if set to "
"``True``, will pass messages to handlers taking handler levels into account."
" (Contributed by Vinay Sajip.)"
msgstr ""
"现在 :class:`handlers.QueueListener <logging.handlers.QueueListener>` 类接受一个 "
"*respect_handler_level* 关键字参数，如果将该参数设为 ``True``，会向处理器传递消息以将处理器级别纳入考量。 （由 "
"Vinay Sajip 贡献。）"

#: ../../whatsnew/3.5.rst:1437
msgid "lzma"
msgstr "lzma"

#: ../../whatsnew/3.5.rst:1439
msgid ""
"The :meth:`LZMADecompressor.decompress() <lzma.LZMADecompressor.decompress>`"
" method now accepts an optional *max_length* argument to limit the maximum "
"size of decompressed data. (Contributed by Martin Panter in :issue:`15955`.)"
msgstr ""
"现在 :meth:`LZMADecompressor.decompress() <lzma.LZMADecompressor.decompress>` "
"方法接受一个可选的 *max_length* 参数用来限制解压缩数据的大小上限。 （由 Martin Panter 在 :issue:`15955` "
"中贡献。）"

#: ../../whatsnew/3.5.rst:1446
msgid "math"
msgstr "math"

#: ../../whatsnew/3.5.rst:1448
msgid ""
"Two new constants have been added to the :mod:`math` module: "
":data:`~math.inf` and :data:`~math.nan`.  (Contributed by Mark Dickinson in "
":issue:`23185`.)"
msgstr ""
"向 :mod:`math` 模块增加了两个新常量: :data:`~math.inf` 和 :data:`~math.nan`。 （由 Mark "
"Dickinson 在 :issue:`23185` 中贡献。）"

#: ../../whatsnew/3.5.rst:1451
msgid ""
"A new function :func:`~math.isclose` provides a way to test for approximate "
"equality. (Contributed by Chris Barker and Tal Einat in :issue:`24270`.)"
msgstr ""
"新增函数 :func:`~math.isclose` 提供了一种测试近似相等的方式。 （由 Chris Barker 和 Tal Einat 在 "
":issue:`24270` 中贡献。）"

#: ../../whatsnew/3.5.rst:1454
msgid ""
"A new :func:`~math.gcd` function has been added.  The :func:`fractions.gcd` "
"function is now deprecated. (Contributed by Mark Dickinson and Serhiy "
"Storchaka in :issue:`22486`.)"
msgstr ""
"新增 :func:`~math.gcd` 函数。 现在 :func:`fractions.gcd` 函数已被弃用。 （由 Mark Dickinson "
"和 Serhiy Storchaka 在 :issue:`22486` 中贡献。）"

#: ../../whatsnew/3.5.rst:1460
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.5.rst:1462
msgid ""
":func:`sharedctypes.synchronized() "
"<multiprocessing.sharedctypes.synchronized>` objects now support the "
":term:`context manager` protocol. (Contributed by Charles-François Natali in"
" :issue:`21565`.)"
msgstr ""
"现在 :func:`sharedctypes.synchronized() "
"<multiprocessing.sharedctypes.synchronized>` 对象支持 :term:`context manager` "
"协议。 （由 Charles-François Natali 在 :issue:`21565` 中贡献。）"

#: ../../whatsnew/3.5.rst:1468
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.5.rst:1470
msgid ""
":func:`~operator.attrgetter`, :func:`~operator.itemgetter`, and "
":func:`~operator.methodcaller` objects now support pickling. (Contributed by"
" Josh Rosenberg and Serhiy Storchaka in :issue:`22955`.)"
msgstr ""
"现在 :func:`~operator.attrgetter`, :func:`~operator.itemgetter` 和 "
":func:`~operator.methodcaller` 对象支持封存操作。 （由 Josh Rosenberg 和 Serhiy "
"Storchaka 在 :issue:`22955` 中贡献。）"

#: ../../whatsnew/3.5.rst:1474
msgid ""
"New :func:`~operator.matmul` and :func:`~operator.imatmul` functions to "
"perform matrix multiplication. (Contributed by Benjamin Peterson in "
":issue:`21176`.)"
msgstr ""
"新增 :func:`~operator.matmul` 和 :func:`~operator.imatmul` 函数用于执行矩阵乘法。 （由 "
"Benjamin Peterson 在 :issue:`21176` 中贡献。）"

#: ../../whatsnew/3.5.rst:1480
msgid "os"
msgstr "os"

#: ../../whatsnew/3.5.rst:1482
msgid ""
"The new :func:`~os.scandir` function returning an iterator of "
":class:`~os.DirEntry` objects has been added.  If possible, "
":func:`~os.scandir` extracts file attributes while scanning a directory, "
"removing the need to perform subsequent system calls to determine file type "
"or attributes, which may significantly improve performance.  (Contributed by"
" Ben Hoyt with the help of Victor Stinner in :issue:`22524`.)"
msgstr ""
"新增 :func:`~os.scandir` 函数可返回一个 :class:`~os.DirEntry` 对象的迭代器。 "
"如有可能，:func:`~os.scandir` 会在扫描目录时提取文件属性，不必再执行后续的系统调用来确定文件类型或属性，这可以显著提升运行效率。 "
"（由 Ben Hoyt 在 :issue:`22524` 并得到 Victor Stinner 的协助。）"

#: ../../whatsnew/3.5.rst:1489
msgid ""
"On Windows, a new :attr:`stat_result.st_file_attributes "
"<os.stat_result.st_file_attributes>` attribute is now available.  It "
"corresponds to the ``dwFileAttributes`` member of the "
"``BY_HANDLE_FILE_INFORMATION`` structure returned by "
"``GetFileInformationByHandle()``.  (Contributed by Ben Hoyt in "
":issue:`21719`.)"
msgstr ""
"在 Windows 上，现在可使用新的 :attr:`stat_result.st_file_attributes "
"<os.stat_result.st_file_attributes>` 属性。 它对应于 "
"``GetFileInformationByHandle()`` 所返回的 ``BY_HANDLE_FILE_INFORMATION`` 结构体的 "
"``dwFileAttributes`` 成员。 （由 Ben Hoyt 在 :issue:`21719` 中贡献。）"

#: ../../whatsnew/3.5.rst:1495
msgid ""
"The :func:`~os.urandom` function now uses the ``getrandom()`` syscall on "
"Linux 3.17 or newer, and ``getentropy()`` on OpenBSD 5.6 and newer, removing"
" the need to use ``/dev/urandom`` and avoiding failures due to potential "
"file descriptor exhaustion.  (Contributed by Victor Stinner in "
":issue:`22181`.)"
msgstr ""
"现在 :func:`~os.urandom` 函数在 Linux 3.17 或更新的系统上会使用 ``getrandom()`` 系统调用，而在 "
"OpenBSD 5.6 或更新的系统上会使用 ``getentropy()``，不必再使用 ``/dev/urandom`` "
"并避免由于潜在的文件描述符耗尽导致的执行失败。 （由 Victor Stinner 在 :issue:`22181` 中贡献。）"

#: ../../whatsnew/3.5.rst:1500
msgid ""
"New :func:`~os.get_blocking` and :func:`~os.set_blocking` functions allow "
"getting and setting a file descriptor's blocking mode "
"(:const:`~os.O_NONBLOCK`.) (Contributed by Victor Stinner in "
":issue:`22054`.)"
msgstr ""
"新增的 :func:`~os.get_blocking` 和 :func:`~os.set_blocking` 函数允许获取和设置文件描述符的阻塞模式 "
"(:const:`~os.O_NONBLOCK`)。 （由 Victor Stinner 在 :issue:`22054` 中贡献。）"

#: ../../whatsnew/3.5.rst:1504
msgid ""
"The :func:`~os.truncate` and :func:`~os.ftruncate` functions are now "
"supported on Windows.  (Contributed by Steve Dower in :issue:`23668`.)"
msgstr ""
"现在 :func:`~os.truncate` 和 :func:`~os.ftruncate` 函数在 Windows 上已受到支持。 （由 Steve"
" Dower 在 :issue:`23668` 中贡献。）"

#: ../../whatsnew/3.5.rst:1507
msgid ""
"There is a new :func:`os.path.commonpath` function returning the longest "
"common sub-path of each passed pathname.  Unlike the "
":func:`os.path.commonprefix` function, it always returns a valid path::"
msgstr ""
"新增的 :func:`os.path.commonpath` 函数可返回所传入的每个路径名的最长共同子路径。 与 "
":func:`os.path.commonprefix` 函数不同，该函数总是会返回一个有效的路径::"

#: ../../whatsnew/3.5.rst:1518
msgid "(Contributed by Rafik Draoui and Serhiy Storchaka in :issue:`10395`.)"
msgstr "（由 Rafik Draoui 和 Serhiy Storchaka 在 :issue:`10395` 中贡献。）"

#: ../../whatsnew/3.5.rst:1522
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.5.rst:1524
msgid ""
"The new :meth:`Path.samefile() <pathlib.Path.samefile>` method can be used "
"to check whether the path points to the same file as another path, which can"
" be either another :class:`~pathlib.Path` object, or a string::"
msgstr ""
"新增的 :meth:`Path.samefile() <pathlib.Path.samefile>` "
"方法可被用来检查一个路径是否与另一个路径指向相同的文件，两个路径可以是 :class:`~pathlib.Path` 对象，也可以是字符串::"

#: ../../whatsnew/3.5.rst:1534
msgid "(Contributed by Vajrasky Kok and Antoine Pitrou in :issue:`19775`.)"
msgstr "（由 Vajrasky Kok 和 Antoine Pitrou 在 :issue:`19775` 中贡献。）"

#: ../../whatsnew/3.5.rst:1536
msgid ""
"The :meth:`Path.mkdir() <pathlib.Path.mkdir>` method now accepts a new "
"optional *exist_ok* argument to match ``mkdir -p`` and :func:`os.makedirs` "
"functionality.  (Contributed by Berker Peksag in :issue:`21539`.)"
msgstr ""
"现在 :meth:`Path.mkdir() <pathlib.Path.mkdir>` 方法接受一个新的 *exist_ok* 可选参数以与 "
"``mkdir -p`` 和 :func:`os.makedirs` 的功能相匹配。 （由 Berker Peksag 在 :issue:`21539`"
" 中贡献。）"

#: ../../whatsnew/3.5.rst:1540
msgid ""
"There is a new :meth:`Path.expanduser() <pathlib.Path.expanduser>` method to"
" expand ``~`` and ``~user`` prefixes.  (Contributed by Serhiy Storchaka and "
"Claudiu Popa in :issue:`19776`.)"
msgstr ""
"新增了一个 :meth:`Path.expanduser() <pathlib.Path.expanduser>` 方法用于扩展 ``~`` 和 "
"``~user`` 前缀。 （由 Serhiy Storchaka 和 Claudiu Popa 在 :issue:`19776` 中贡献。）"

#: ../../whatsnew/3.5.rst:1544
msgid ""
"A new :meth:`Path.home() <pathlib.Path.home>` class method can be used to "
"get a :class:`~pathlib.Path` instance representing the user’s home "
"directory. (Contributed by Victor Salgado and Mayank Tripathi in "
":issue:`19777`.)"
msgstr ""
"新增的 :meth:`Path.home() <pathlib.Path.home>` 类方法可被用于获取代表用户家目录的 "
":class:`~pathlib.Path` 实例。 （由 Victor Salgado 和 Mayank Tripathi 在 "
":issue:`19777` 中贡献。）"

#: ../../whatsnew/3.5.rst:1549
msgid ""
"New :meth:`Path.write_text() <pathlib.Path.write_text>`, "
":meth:`Path.read_text() <pathlib.Path.read_text>`, :meth:`Path.write_bytes()"
" <pathlib.Path.write_bytes>`, :meth:`Path.read_bytes() "
"<pathlib.Path.read_bytes>` methods to simplify read/write operations on "
"files."
msgstr ""
"新增 :meth:`Path.write_text() <pathlib.Path.write_text>`, "
":meth:`Path.read_text() <pathlib.Path.read_text>`, :meth:`Path.write_bytes()"
" <pathlib.Path.write_bytes>`, :meth:`Path.read_bytes() "
"<pathlib.Path.read_bytes>` 方法用于简化对文件的读/写操作。"

#: ../../whatsnew/3.5.rst:1555
msgid ""
"The following code snippet will create or rewrite existing file "
"``~/spam42``::"
msgstr "以下代码片段将创建或重写现有的文件 ``~/spam42``::"

#: ../../whatsnew/3.5.rst:1563
msgid "(Contributed by Christopher Welborn in :issue:`20218`.)"
msgstr "（由 Christopher Welborn 在 :issue:`20218` 中贡献。）"

#: ../../whatsnew/3.5.rst:1567
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.5.rst:1569
msgid ""
"Nested objects, such as unbound methods or nested classes, can now be "
"pickled using :ref:`pickle protocols <pickle-protocols>` older than protocol"
" version 4. Protocol version 4 already supports these cases.  (Contributed "
"by Serhiy Storchaka in :issue:`23611`.)"
msgstr ""
"嵌套的对象，例如未绑定方法或嵌套的类，现在可以使用早于协议版本 4 的 :ref:`pickle 协议 <pickle-protocols>`。 "
"协议版本 4 在此前已支持此种场景。 （由 Serhiy Storchaka 在 :issue:`23611` 中贡献。）"

#: ../../whatsnew/3.5.rst:1576
msgid "poplib"
msgstr "poplib"

#: ../../whatsnew/3.5.rst:1578
msgid ""
"A new :meth:`POP3.utf8() <poplib.POP3.utf8>` command enables :rfc:`6856` "
"(Internationalized Email) support, if a POP server supports it. (Contributed"
" by Milan OberKirch in :issue:`21804`.)"
msgstr ""
"新增 :meth:`POP3.utf8() <poplib.POP3.utf8>` 命令可以启用 :rfc:`6856` (国际化 Email) "
"支持，如果 POP 服务器支持的话。 （由 Milan OberKirch 在 :issue:`21804` 中贡献。）"

#: ../../whatsnew/3.5.rst:1584
msgid "re"
msgstr "re"

#: ../../whatsnew/3.5.rst:1586
msgid ""
"References and conditional references to groups with fixed length are now "
"allowed in lookbehind assertions::"
msgstr "现在对固定长度分组的引用和有条件引用在后视断言中已被允许::"

#: ../../whatsnew/3.5.rst:1596
msgid "(Contributed by Serhiy Storchaka in :issue:`9179`.)"
msgstr "（由 Serhiy Storchaka 在 :issue:`9179` 中贡献。）"

#: ../../whatsnew/3.5.rst:1598
msgid ""
"The number of capturing groups in regular expressions is no longer limited "
"to 100.  (Contributed by Serhiy Storchaka in :issue:`22437`.)"
msgstr ""
"在正则表达式中捕获分组的数量不再有 100 个的上限。 （由 Serhiy Storchaka 在 :issue:`22437` 中贡献。）"

#: ../../whatsnew/3.5.rst:1601
msgid ""
"The :func:`~re.sub` and :func:`~re.subn` functions now replace unmatched "
"groups with empty strings instead of raising an exception. (Contributed by "
"Serhiy Storchaka in :issue:`1519638`.)"
msgstr ""
"现在 :func:`~re.sub` 和 :func:`~re.subn` 函数将用空字符串替换不匹配的分组而不是引发异常。 （由 Serhiy "
"Storchaka 在 :issue:`1519638` 中贡献。）"

#: ../../whatsnew/3.5.rst:1605
msgid ""
"The :class:`re.error` exceptions have new attributes, :attr:`~re.error.msg`,"
" :attr:`~re.error.pattern`, :attr:`~re.error.pos`, :attr:`~re.error.lineno`,"
" and :attr:`~re.error.colno`, that provide better context information about "
"the error::"
msgstr ""
":class:`re.error` 异常添加了新的属性 :attr:`~re.error.msg`, "
":attr:`~re.error.pattern`, :attr:`~re.error.pos`, :attr:`~re.error.lineno` 和"
" :attr:`~re.error.colno`，以提供更详细的错误上下文信息::"

#: ../../whatsnew/3.5.rst:1619
msgid "(Contributed by Serhiy Storchaka in :issue:`22578`.)"
msgstr "（由 Serhiy Storchaka 在 :issue:`22578` 中贡献。）"

#: ../../whatsnew/3.5.rst:1623
msgid "readline"
msgstr "readline"

#: ../../whatsnew/3.5.rst:1625
msgid ""
"A new :func:`~readline.append_history_file` function can be used to append "
"the specified number of trailing elements in history to the given file. "
"(Contributed by Bruno Cauet in :issue:`22940`.)"
msgstr ""
"新增的 :func:`~readline.append_history_file` 函数可被用于将历史数据中指定数量的末尾元素添加到给定的文件中。 （由"
" Bruno Cauet 在 :issue:`22940` 中贡献。）"

#: ../../whatsnew/3.5.rst:1631
msgid "selectors"
msgstr "selectors"

#: ../../whatsnew/3.5.rst:1633
msgid ""
"The new :class:`~selectors.DevpollSelector` supports efficient ``/dev/poll``"
" polling on Solaris. (Contributed by Giampaolo Rodola' in :issue:`18931`.)"
msgstr ""
"新增的 :class:`~selectors.DevpollSelector` 在 Solaris 上支持高效的 ``/dev/poll`` 轮询。 "
"（由 Giampaolo Rodola' 在 :issue:`18931` 中贡献。）"

#: ../../whatsnew/3.5.rst:1639
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.5.rst:1641
msgid ""
"The :func:`~shutil.move` function now accepts a *copy_function* argument, "
"allowing, for example, the :func:`~shutil.copy` function to be used instead "
"of the default :func:`~shutil.copy2` if there is a need to ignore file "
"metadata when moving. (Contributed by Claudiu Popa in :issue:`19840`.)"
msgstr ""
"现在 :func:`~shutil.move` 函数现在接受一个 *copy_function* "
"参数，举例来说，如果需要在移动文件时忽略其元数据，可以使用 :func:`~shutil.copy` 函数来代替默认的 "
":func:`~shutil.copy2`。 （由 Claudiu Popa 在 :issue:`19840` 中贡献。）"

#: ../../whatsnew/3.5.rst:1647
msgid ""
"The :func:`~shutil.make_archive` function now supports the *xztar* format. "
"(Contributed by Serhiy Storchaka in :issue:`5411`.)"
msgstr ""
"现在 :func:`~shutil.make_archive` 函数已支持 *xztar* 格式。 （由 Serhiy Storchaka 在 "
":issue:`5411` 中贡献。）"

#: ../../whatsnew/3.5.rst:1652
msgid "signal"
msgstr "signal"

#: ../../whatsnew/3.5.rst:1654
msgid ""
"On Windows, the :func:`~signal.set_wakeup_fd` function now also supports "
"socket handles.  (Contributed by Victor Stinner in :issue:`22018`.)"
msgstr ""
"在 Windows 上，现在 :func:`~signal.set_wakeup_fd` 函数还可以支持套接字句柄。 （由 Victor Stinner"
" 在 :issue:`22018` 中贡献。）"

#: ../../whatsnew/3.5.rst:1657
msgid ""
"Various ``SIG*`` constants in the :mod:`signal` module have been converted "
"into :mod:`Enums <enum>`.  This allows meaningful names to be printed during"
" debugging, instead of integer \"magic numbers\". (Contributed by Giampaolo "
"Rodola' in :issue:`21076`.)"
msgstr ""
":mod:`signal` 模块中的各个 ``SIG*`` 常量已被转换为 :mod:`枚举 <enum>`。 "
"这允许在调试期间打印有意义的名称，而不是整数类型的“魔法数字”。 （由 Giampaolo Rodola' 在 :issue:`21076` 中贡献。）"

#: ../../whatsnew/3.5.rst:1664
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.5.rst:1666
msgid ""
"Both the :class:`~smtpd.SMTPServer` and :class:`~smtpd.SMTPChannel` classes "
"now accept a *decode_data* keyword argument to determine if the ``DATA`` "
"portion of the SMTP transaction is decoded using the ``\"utf-8\"`` codec or "
"is instead provided to the :meth:`SMTPServer.process_message() "
"<smtpd.SMTPServer.process_message>` method as a byte string.  The default is"
" ``True`` for backward compatibility reasons, but will change to ``False`` "
"in Python 3.6.  If *decode_data* is set to ``False``, the "
"``process_message`` method must be prepared to accept keyword arguments. "
"(Contributed by Maciej Szulik in :issue:`19662`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1677
msgid ""
"The :class:`~smtpd.SMTPServer` class now advertises the ``8BITMIME`` "
"extension (:rfc:`6152`) if *decode_data* has been set ``True``.  If the "
"client specifies ``BODY=8BITMIME`` on the ``MAIL`` command, it is passed to "
":meth:`SMTPServer.process_message() <smtpd.SMTPServer.process_message>` via "
"the *mail_options* keyword. (Contributed by Milan Oberkirch and R.  David "
"Murray in :issue:`21795`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1684
msgid ""
"The :class:`~smtpd.SMTPServer` class now also supports the ``SMTPUTF8`` "
"extension (:rfc:`6531`: Internationalized Email).  If the client specified "
"``SMTPUTF8 BODY=8BITMIME`` on the ``MAIL`` command, they are passed to "
":meth:`SMTPServer.process_message() <smtpd.SMTPServer.process_message>` via "
"the *mail_options* keyword.  It is the responsibility of the "
"``process_message`` method to correctly handle the ``SMTPUTF8`` data. "
"(Contributed by Milan Oberkirch in :issue:`21725`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1692
msgid ""
"It is now possible to provide, directly or via name resolution, IPv6 "
"addresses in the :class:`~smtpd.SMTPServer` constructor, and have it "
"successfully connect.  (Contributed by Milan Oberkirch in :issue:`14758`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1698
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.5.rst:1700
msgid ""
"A new :meth:`SMTP.auth() <smtplib.SMTP.auth>` method provides a convenient "
"way to implement custom authentication mechanisms. (Contributed by Milan "
"Oberkirch in :issue:`15014`.)"
msgstr ""
"新增的 :meth:`SMTP.auth() <smtplib.SMTP.auth>` 方法为实现自定义身份验证机制提供了一个便捷的方式。 （由 "
"Milan Oberkirch 在 :issue:`15014` 中贡献。）"

#: ../../whatsnew/3.5.rst:1704
msgid ""
"The :meth:`SMTP.set_debuglevel() <smtplib.SMTP.set_debuglevel>` method now "
"accepts an additional debuglevel (2), which enables timestamps in debug "
"messages. (Contributed by Gavin Chappell and Maciej Szulik in "
":issue:`16914`.)"
msgstr ""
"现在 :meth:`SMTP.set_debuglevel() <smtplib.SMTP.set_debuglevel>` 方法可接受额外的 "
"debuglevel (2)，它将在调试消息中启用时间戳。 （由 Gavin Chappell 和 Maciej Szulik 在 "
":issue:`16914` 中贡献。）"

#: ../../whatsnew/3.5.rst:1708
msgid ""
"Both the :meth:`SMTP.sendmail() <smtplib.SMTP.sendmail>` and "
":meth:`SMTP.send_message() <smtplib.SMTP.send_message>` methods now support "
":rfc:`6531` (SMTPUTF8). (Contributed by Milan Oberkirch and R. David Murray "
"in :issue:`22027`.)"
msgstr ""
"现在 :meth:`SMTP.sendmail() <smtplib.SMTP.sendmail>` 和 "
":meth:`SMTP.send_message() <smtplib.SMTP.send_message>` 方法均支持 :rfc:`6531` "
"(SMTPUTF8)。 （由 Milan Oberkirch 和 R. David Murray 在 :issue:`22027` 中贡献。）"

#: ../../whatsnew/3.5.rst:1715
msgid "sndhdr"
msgstr "sndhdr"

#: ../../whatsnew/3.5.rst:1717
msgid ""
"The :func:`~sndhdr.what` and :func:`~sndhdr.whathdr` functions  now return a"
" :func:`~collections.namedtuple`.  (Contributed by Claudiu Popa in "
":issue:`18615`.)"
msgstr ""
"现在 :func:`~sndhdr.what` 和 :func:`~sndhdr.whathdr` 函数将返回 "
":func:`~collections.namedtuple`。 （由 Claudiu Popa 在 :issue:`18615` 中贡献。）.)"

#: ../../whatsnew/3.5.rst:1723
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.5.rst:1725
msgid ""
"Functions with timeouts now use a monotonic clock, instead of a system "
"clock. (Contributed by Victor Stinner in :issue:`22043`.)"
msgstr "现在函数的超时设置将使用单调时钟，而不是系统时钟。 （由 Victor Stinner 在 :issue:`22043` 中贡献。）"

#: ../../whatsnew/3.5.rst:1728
msgid ""
"A new :meth:`socket.sendfile() <socket.socket.sendfile>` method allows "
"sending a file over a socket by using the high-performance "
":func:`os.sendfile` function on UNIX, resulting in uploads being from 2 to 3"
" times faster than when using plain :meth:`socket.send() "
"<socket.socket.send>`. (Contributed by Giampaolo Rodola' in :issue:`17552`.)"
msgstr ""
"新增的 :meth:`socket.sendfile() <socket.socket.sendfile>` 方法允许在 UNIX 上使用高性能的 "
":func:`os.sendfile` 函数通过套接字发送文件，使得上传速度比使用简单的 :meth:`socket.send() "
"<socket.socket.send>` 快 2 至 3 倍。 （由 Giampaolo Rodola' 在 :issue:`17552` 中贡献。）"

#: ../../whatsnew/3.5.rst:1734
msgid ""
"The :meth:`socket.sendall() <socket.socket.sendall>` method no longer resets"
" the socket timeout every time bytes are received or sent.  The socket "
"timeout is now the maximum total duration to send all data. (Contributed by "
"Victor Stinner in :issue:`23853`.)"
msgstr ""
":meth:`socket.sendall() <socket.socket.sendall>` 方法每次接受或发送字节数据时将不再重置套接字超时。 "
"现在套接字超时将为发送所有数据最大总计持续时间。 （由 Victor Stinner 在 :issue:`23853` 中贡献。）"

#: ../../whatsnew/3.5.rst:1739
msgid ""
"The *backlog* argument of the :meth:`socket.listen() <socket.socket.listen>`"
" method is now optional.  By default it is set to :data:`SOMAXCONN "
"<socket.SOMAXCONN>` or to ``128``, whichever is less. (Contributed by "
"Charles-François Natali in :issue:`21455`.)"
msgstr ""
"现在 :meth:`socket.listen() <socket.socket.listen>` 方法的 *backlog* 参数将是可选的。 "
"在默认情况下它会被设为 :data:`SOMAXCONN <socket.SOMAXCONN>` 或 ``128``，取其中的较小值。 （由 "
"Charles-François Natali 在 :issue:`21455` 中贡献。）"

#: ../../whatsnew/3.5.rst:1746
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.5.rst:1751
msgid "Memory BIO Support"
msgstr "内存 BIO 支持"

#: ../../whatsnew/3.5.rst:1753
msgid "(Contributed by Geert Jansen in :issue:`21965`.)"
msgstr "（由 Geert Jansen 在 :issue:`21965` 中贡献。）"

#: ../../whatsnew/3.5.rst:1755
msgid ""
"The new :class:`~ssl.SSLObject` class has been added to provide SSL protocol"
" support for cases when the network I/O capabilities of "
":class:`~ssl.SSLSocket` are not necessary or are suboptimal.  ``SSLObject`` "
"represents an SSL protocol instance, but does not implement any network I/O "
"methods, and instead provides a memory buffer interface.  The new "
":class:`~ssl.MemoryBIO` class can be used to pass data between Python and an"
" SSL protocol instance."
msgstr ""
"新增了 :class:`~ssl.SSLObject` 类以针对 :class:`~ssl.SSLSocket` 的网络 I/O "
"能力是非必要或未优化的情况提供 SSL 协议支持。 ``SSLObject`` 代表一个 SSL 协议实例，但不实现任何网络 I/O "
"方法，而是提供一个内存缓冲区接口。 新增的 :class:`~ssl.MemoryBIO` 类可被用于在 Python 和 SSL "
"协议实例之间传递数据。"

#: ../../whatsnew/3.5.rst:1762
msgid ""
"The memory BIO SSL support is primarily intended to be used in frameworks "
"implementing asynchronous I/O for which :class:`~ssl.SSLSocket`'s readiness "
"model (\"select/poll\") is inefficient."
msgstr ""
"内存 BIO SSL 支持主要被用来为对 :class:`~ssl.SSLSocket` 的就绪模型（\"选择/轮询\"）来说效率较低的框架实现异步 "
"I/O。"

#: ../../whatsnew/3.5.rst:1766
msgid ""
"A new :meth:`SSLContext.wrap_bio() <ssl.SSLContext.wrap_bio>` method can be "
"used to create a new ``SSLObject`` instance."
msgstr ""
"新增的 :meth:`SSLContext.wrap_bio() <ssl.SSLContext.wrap_bio>` 方法可被用于创建新的 "
"``SSLObject`` 实例。"

#: ../../whatsnew/3.5.rst:1771
msgid "Application-Layer Protocol Negotiation Support"
msgstr "应用层协议协商支持"

#: ../../whatsnew/3.5.rst:1773
msgid "(Contributed by Benjamin Peterson in :issue:`20188`.)"
msgstr "（由 Benjamin Peterson 在 :issue:`20188` 中贡献。）"

#: ../../whatsnew/3.5.rst:1775
msgid ""
"Where OpenSSL support is present, the :mod:`ssl` module now implements the "
"*Application-Layer Protocol Negotiation* TLS extension as described in "
":rfc:`7301`."
msgstr "如果有 OpenSSL 支持，现在 :mod:`ssl` 模块可实现 :rfc:`7301` 中描述的 *应用层协议协商* TLS 扩展。"

#: ../../whatsnew/3.5.rst:1779
msgid ""
"The new :meth:`SSLContext.set_alpn_protocols() "
"<ssl.SSLContext.set_alpn_protocols>` can be used to specify which protocols "
"a socket should advertise during the TLS handshake."
msgstr ""
"新增的 :meth:`SSLContext.set_alpn_protocols() "
"<ssl.SSLContext.set_alpn_protocols>` 可被用来指定在 TLS 握手期间套接字所要应用的协议。"

#: ../../whatsnew/3.5.rst:1783
msgid ""
"The new :meth:`SSLSocket.selected_alpn_protocol() "
"<ssl.SSLSocket.selected_alpn_protocol>` returns the protocol that was "
"selected during the TLS handshake. The :const:`~ssl.HAS_ALPN` flag indicates"
" whether ALPN support is present."
msgstr ""
"新增的 :meth:`SSLSocket.selected_alpn_protocol() "
"<ssl.SSLSocket.selected_alpn_protocol>` 可返回在 TLS 握手期间所选择的协议。 "
":const:`~ssl.HAS_ALPN` 旗标用于指明是否提供了 ALPN 支持。"

#: ../../whatsnew/3.5.rst:1790
msgid "Other Changes"
msgstr "其他改变"

#: ../../whatsnew/3.5.rst:1792
msgid ""
"There is a new :meth:`SSLSocket.version() <ssl.SSLSocket.version>` method to"
" query the actual protocol version in use. (Contributed by Antoine Pitrou in"
" :issue:`20421`.)"
msgstr ""
"新增 :meth:`SSLSocket.version() <ssl.SSLSocket.version>` 方法以便查询实际使用的协议。 （由 "
"Antoine Pitrou 在 :issue:`20421` 中贡献。）"

#: ../../whatsnew/3.5.rst:1796
msgid ""
"The :class:`~ssl.SSLSocket` class now implements a "
":meth:`SSLSocket.sendfile() <ssl.SSLSocket.sendfile>` method. (Contributed "
"by Giampaolo Rodola' in :issue:`17552`.)"
msgstr ""
"现在 :class:`~ssl.SSLSocket` 类已实现了 :meth:`SSLSocket.sendfile() "
"<ssl.SSLSocket.sendfile>` 方法。 （由 Giampaolo Rodola' 在 :issue:`17552` 中贡献。）"

#: ../../whatsnew/3.5.rst:1800
msgid ""
"The :meth:`SSLSocket.send() <ssl.SSLSocket.send>` method now raises either "
"the :exc:`ssl.SSLWantReadError` or :exc:`ssl.SSLWantWriteError` exception on"
" a non-blocking socket if the operation would block. Previously, it would "
"return ``0``.  (Contributed by Nikolaus Rath in :issue:`20951`.)"
msgstr ""
"现在当操作将要阻塞时 :meth:`SSLSocket.send() <ssl.SSLSocket.send>` 方法将在非阻塞的套接字上引发 "
":exc:`ssl.SSLWantReadError` 或 :exc:`ssl.SSLWantWriteError` 异常。 在之前版本中，它将返回 "
"``0``。 （由 Nikolaus Rath 在 :issue:`20951` 中贡献。）"

#: ../../whatsnew/3.5.rst:1805
msgid ""
"The :func:`~ssl.cert_time_to_seconds` function now interprets the input time"
" as UTC and not as local time, per :rfc:`5280`.  Additionally, the return "
"value is always an :class:`int`. (Contributed by Akira Li in "
":issue:`19940`.)"
msgstr ""
"根据 :rfc:`5280`，现在 :func:`~ssl.cert_time_to_seconds` 函数会将输入的时间解读为 UTC "
"而不是本地时间。 此外，其返回值必定为 :class:`int`。 （由 Akira Li 在 :issue:`19940` 中贡献。）"

#: ../../whatsnew/3.5.rst:1809
msgid ""
"New :meth:`SSLObject.shared_ciphers() <ssl.SSLObject.shared_ciphers>` and "
":meth:`SSLSocket.shared_ciphers() <ssl.SSLSocket.shared_ciphers>` methods "
"return the list of ciphers sent by the client during the handshake. "
"(Contributed by Benjamin Peterson in :issue:`23186`.)"
msgstr ""
"新增的 :meth:`SSLObject.shared_ciphers() <ssl.SSLObject.shared_ciphers>` 和 "
":meth:`SSLSocket.shared_ciphers() <ssl.SSLSocket.shared_ciphers>` "
"方法将返回客户端在握手期间中发送的密码列表。 （由 Benjamin Peterson 在 :issue:`23186` 中贡献。）"

#: ../../whatsnew/3.5.rst:1814
msgid ""
"The :meth:`SSLSocket.do_handshake() <ssl.SSLSocket.do_handshake>`, "
":meth:`SSLSocket.read() <ssl.SSLSocket.read>`, :meth:`SSLSocket.shutdown() "
"<ssl.SSLSocket.shutdown>`, and :meth:`SSLSocket.write() "
"<ssl.SSLSocket.write>` methods of the :class:`~ssl.SSLSocket` class no "
"longer reset the socket timeout every time bytes are received or sent. The "
"socket timeout is now the maximum total duration of the method. (Contributed"
" by Victor Stinner in :issue:`23853`.)"
msgstr ""
":class:`~ssl.SSLSocket` 类的 :meth:`SSLSocket.do_handshake() "
"<ssl.SSLSocket.do_handshake>`, :meth:`SSLSocket.read() "
"<ssl.SSLSocket.read>`, :meth:`SSLSocket.shutdown() <ssl.SSLSocket.shutdown>`"
" 和 :meth:`SSLSocket.write() <ssl.SSLSocket.write>` "
"方法在每次接收或发送字节数据时将不再重置套接字超时。 现在套接字超时将为方法的最长运行时间。 （由 Victor Stinner 在 "
":issue:`23853` 中贡献。）"

#: ../../whatsnew/3.5.rst:1822
msgid ""
"The :func:`~ssl.match_hostname` function now supports matching of IP "
"addresses. (Contributed by Antoine Pitrou in :issue:`23239`.)"
msgstr ""
"现在 :func:`~ssl.match_hostname` 函数也支持 IP 地址的匹配。 （由 Antoine Pitrou 在 "
":issue:`23239` 中贡献。）"

#: ../../whatsnew/3.5.rst:1827
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.5.rst:1829
msgid ""
"The :class:`~sqlite3.Row` class now fully supports the sequence protocol, in"
" particular :func:`reversed` iteration and slice indexing. (Contributed by "
"Claudiu Popa in :issue:`10203`; by Lucas Sinclair, Jessica McKellar, and  "
"Serhiy Storchaka in :issue:`13583`.)"
msgstr ""
"现在 :class:`~sqlite3.Row` 类可完整支持序列协议，特别是 :func:`reversed` 迭代和切片索引。 （由 Claudiu"
" Popa 在 :issue:`10203` 中贡献；由 Lucas Sinclair, Jessica McKellar 和 Serhiy "
"Storchaka 在 :issue:`13583` 中贡献。）"

#: ../../whatsnew/3.5.rst:1838
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.5.rst:1840
msgid ""
"The new :func:`~subprocess.run` function has been added. It runs the "
"specified command and returns a :class:`~subprocess.CompletedProcess` "
"object, which describes a finished process.  The new API is more consistent "
"and is the recommended approach to invoking subprocesses in Python code that"
" does not need to maintain compatibility with earlier Python versions. "
"(Contributed by Thomas Kluyver in :issue:`23342`.)"
msgstr ""
"新增了 :func:`~subprocess.run` 函数。 它可运行指定的命令并返回一个 "
":class:`~subprocess.CompletedProcess` 对象，该对象表示已结束的进程。 这个新 API 有更好的一致性并且是在 "
"Python 中唤起子进程的推荐方式，它不需要维持与更早的 Python 的兼容性。 （由 Thomas Kluyver 在 "
":issue:`23342` 中贡献。）"

#: ../../whatsnew/3.5.rst:1864
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.5.rst:1866
msgid ""
"A new :func:`~sys.set_coroutine_wrapper` function allows setting a global "
"hook that will be called whenever a :term:`coroutine object <coroutine>` is "
"created by an :keyword:`async def` function.  A corresponding "
":func:`~sys.get_coroutine_wrapper` can be used to obtain a currently set "
"wrapper.  Both functions are :term:`provisional <provisional API>`, and are "
"intended for debugging purposes only.  (Contributed by Yury Selivanov in "
":issue:`24017`.)"
msgstr ""
"新增的 :func:`~sys.set_coroutine_wrapper` 函数允许设置一个要在 :term:`协程对象 <coroutine>` 被"
" :keyword:`async def` 函数创建时被调用的全局钩子。 可以使用相应的 "
":func:`~sys.get_coroutine_wrapper` 来获取当前设置的包装器。 这两个函数均为 :term:`暂定状态 "
"<provisional API>`，并应当仅用于调试目的。 （由 Yury Selivanov 在 :issue:`24017` 中贡献。）"

#: ../../whatsnew/3.5.rst:1874
msgid ""
"A new :func:`~sys.is_finalizing` function can be used to check if the Python"
" interpreter is :term:`shutting down <interpreter shutdown>`. (Contributed "
"by Antoine Pitrou in :issue:`22696`.)"
msgstr ""
"新增的 :func:`~sys.is_finalizing` 函数可用于检测 Python 解释器是否 :term:`正在关闭 <interpreter"
" shutdown>`。 （由 Antoine Pitrou 在 :issue:`22696` 中贡献。）"

#: ../../whatsnew/3.5.rst:1880
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.5.rst:1882
msgid ""
"The name of the user scripts directory on Windows now includes the first two"
" components of the Python version. (Contributed by Paul Moore in "
":issue:`23437`.)"
msgstr ""
"在 Windows 上用户脚本的名称现在将包括 Python 版本号的前两个数字。 （由 Paul Moore 在 :issue:`23437` "
"中贡献。）"

#: ../../whatsnew/3.5.rst:1888
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.5.rst:1890
msgid ""
"The *mode* argument of the :func:`~tarfile.open` function now accepts "
"``\"x\"`` to request exclusive creation.  (Contributed by Berker Peksag in "
":issue:`21717`.)"
msgstr ""
"现在 :func:`~tarfile.open` 函数的 *mode* 参数可接受 ``\"x\"`` 来请求独占式的创建。 （由 Berker "
"Peksag 在 :issue:`21717` 中贡献。）"

#: ../../whatsnew/3.5.rst:1893
msgid ""
"The :meth:`TarFile.extractall() <tarfile.TarFile.extractall>` and "
":meth:`TarFile.extract() <tarfile.TarFile.extract>` methods now take a "
"keyword argument *numeric_owner*.  If set to ``True``, the extracted files "
"and directories will be owned by the numeric ``uid`` and ``gid`` from the "
"tarfile. If set to ``False`` (the default, and the behavior in versions "
"prior to 3.5), they will be owned by the named user and group in the "
"tarfile. (Contributed by Michael Vogt and Eric Smith in :issue:`23193`.)"
msgstr ""
"现在 :meth:`TarFile.extractall() <tarfile.TarFile.extractall>` 和 "
":meth:`TarFile.extract() <tarfile.TarFile.extract>` 方法可接受关键字参数 "
"*numeric_owner*。 如果设为 ``True``，解压的文件和目录将归属于 tar 文件保存的数字 ``uid`` 和 ``gid``。 "
"如果设为 ``False`` (默认值，也是 3.5 之前版本的行为)，则它们将归属于 tar 文件保存的用户和组名称。 （由 Michael Vogt"
" 和 Eric Smith 在 :issue:`23193` 中贡献。）"

#: ../../whatsnew/3.5.rst:1901
msgid ""
"The :meth:`TarFile.list() <tarfile.TarFile.list>` now accepts an optional "
"*members* keyword argument that can be set to a subset of the list returned "
"by :meth:`TarFile.getmembers() <tarfile.TarFile.getmembers>`. (Contributed "
"by Serhiy Storchaka in :issue:`21549`.)"
msgstr ""
"现在 :meth:`TarFile.list() <tarfile.TarFile.list>` 接受可选的 *members* 关键字参数，它可被设为"
" :meth:`TarFile.getmembers() <tarfile.TarFile.getmembers>` 所返回的列表的一个子集。 （由 "
"Serhiy Storchaka 在 :issue:`21549` 中贡献。）"

#: ../../whatsnew/3.5.rst:1908
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.5.rst:1910
msgid ""
"Both the :meth:`Lock.acquire() <threading.Lock.acquire>` and "
":meth:`RLock.acquire() <threading.RLock.acquire>` methods now use a "
"monotonic clock for timeout management. (Contributed by Victor Stinner in "
":issue:`22043`.)"
msgstr ""
"现在 :meth:`Lock.acquire() <threading.Lock.acquire>` 和 :meth:`RLock.acquire() "
"<threading.RLock.acquire>` 方法均使用单调时钟进行超时管理。 （由 Victor Stinner 在 "
":issue:`22043` 中贡献。）"

#: ../../whatsnew/3.5.rst:1917
msgid "time"
msgstr "time"

#: ../../whatsnew/3.5.rst:1919
msgid ""
"The :func:`~time.monotonic` function is now always available. (Contributed "
"by Victor Stinner in :issue:`22043`.)"
msgstr ""
"现在 :func:`~time.monotonic` 函数将总是可用。 （由 Victor Stinner 在 :issue:`22043` 中贡献。）"

#: ../../whatsnew/3.5.rst:1924
msgid "timeit"
msgstr "timeit"

#: ../../whatsnew/3.5.rst:1926
msgid ""
"A new command line option ``-u`` or :samp:`--unit={U}` can be used to "
"specify the time unit for the timer output.  Supported options are ``usec``,"
" ``msec``, or ``sec``.  (Contributed by Julian Gindi in :issue:`18983`.)"
msgstr ""
"新增的命令行选项 ``-u`` 或 :samp:`--unit={U}` 可被用于指定计时器输出的时间单位。 受支持的选项有 ``usec``, "
"``msec`` 或 ``sec``。 （由 Julian Gindi 在 :issue:`18983` 中贡献。）"

#: ../../whatsnew/3.5.rst:1930
msgid ""
"The :func:`~timeit.timeit` function has a new *globals* parameter for "
"specifying the namespace in which the code will be running. (Contributed by "
"Ben Roberts in :issue:`2527`.)"
msgstr ""
":func:`~timeit.timeit` 函数新增了 *globals* 形参用于指定代码运行所在的命名空间。 （由 Ben Roberts 在 "
":issue:`2527` 中贡献。）.)"

#: ../../whatsnew/3.5.rst:1936
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.5.rst:1938
msgid ""
"The :mod:`tkinter._fix` module used for setting up the Tcl/Tk environment on"
" Windows has been replaced by a private function in the :mod:`_tkinter` "
"module which makes no permanent changes to environment variables. "
"(Contributed by Zachary Ware in :issue:`20035`.)"
msgstr ""
"用于在 Windows 上设置 Tcl/Tk 环境的 :mod:`tkinter._fix` 模块已被 :mod:`_tkinter` "
"模块中的私有函数所替换，该函数不会永久性修改环境变量。 （由 Zachary Ware 在 :issue:`20035` 中贡献。）"

#: ../../whatsnew/3.5.rst:1947
msgid "traceback"
msgstr "回溯"

#: ../../whatsnew/3.5.rst:1949
msgid ""
"New :func:`~traceback.walk_stack` and :func:`~traceback.walk_tb` functions "
"to conveniently traverse frame and :ref:`traceback objects <traceback-"
"objects>`. (Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""
"新增的 :func:`~traceback.walk_stack` 和 :func:`~traceback.walk_tb` 函数可方便地遍历帧和 "
":ref:`回溯对象 <traceback-objects>`。 （由 Robert Collins 在 :issue:`17911` 中贡献。）"

#: ../../whatsnew/3.5.rst:1954
msgid ""
"New lightweight classes: :class:`~traceback.TracebackException`, "
":class:`~traceback.StackSummary`, and :class:`~traceback.FrameSummary`. "
"(Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""
"新增轻量级的类: :class:`~traceback.TracebackException`, "
":class:`~traceback.StackSummary` 和 :class:`~traceback.FrameSummary`。 （由 "
"Robert Collins 在 :issue:`17911` 中贡献。）"

#: ../../whatsnew/3.5.rst:1958
msgid ""
"Both the :func:`~traceback.print_tb` and :func:`~traceback.print_stack` "
"functions now support negative values for the *limit* argument. (Contributed"
" by Dmitry Kazakov in :issue:`22619`.)"
msgstr ""
"现在 :func:`~traceback.print_tb` 和 :func:`~traceback.print_stack` 函数均支持 "
"*limit* 参数使用负值。 （由 Dmitry Kazakov 在 :issue:`22619` 中贡献。）.)"

#: ../../whatsnew/3.5.rst:1964
msgid "types"
msgstr "types"

#: ../../whatsnew/3.5.rst:1966
msgid ""
"A new :func:`~types.coroutine` function to transform :term:`generator "
"<generator iterator>` and :class:`generator-like "
"<collections.abc.Generator>` objects into :term:`awaitables <awaitable>`. "
"(Contributed by Yury Selivanov in :issue:`24017`.)"
msgstr ""
"新增 :func:`~types.coroutine` 函数用于将 :term:`生成器 <generator iterator>` 和 "
":class:`生成器型 <collections.abc.Generator>` 对象转换为 :term:`可等待对象 <awaitable>`。 "
"（由 Yury Selivanov 在 :issue:`24017` 中贡献。）"

#: ../../whatsnew/3.5.rst:1972
msgid ""
"A new type called :class:`~types.CoroutineType`, which is used for "
":term:`coroutine` objects created by :keyword:`async def` functions. "
"(Contributed by Yury Selivanov in :issue:`24400`.)"
msgstr ""
"新增一个名为 :class:`~types.CoroutineType` 的类型，用于由 :keyword:`async def` 函数创建的 "
":term:`coroutine` 对象。 （由 Yury Selivanov 在 :issue:`24400` 中贡献。）"

#: ../../whatsnew/3.5.rst:1978
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.5.rst:1980
msgid ""
"The :mod:`unicodedata` module now uses data from `Unicode 8.0.0 "
"<https://unicode.org/versions/Unicode8.0.0/>`_."
msgstr ""
"现在 :mod:`unicodedata` 模块使用来自 `Unicode 8.0.0 "
"<https://unicode.org/versions/Unicode8.0.0/>`_ 的数据。"

#: ../../whatsnew/3.5.rst:1985
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.5.rst:1987
msgid ""
"The :meth:`TestLoader.loadTestsFromModule() "
"<unittest.TestLoader.loadTestsFromModule>` method now accepts a keyword-only"
" argument *pattern* which is passed to ``load_tests`` as the third argument."
"  Found packages are now checked for ``load_tests`` regardless of whether "
"their path matches *pattern*, because it is impossible for a package name to"
" match the default pattern. (Contributed by Robert Collins and Barry A. "
"Warsaw in :issue:`16662`.)"
msgstr ""
"现在 :meth:`TestLoader.loadTestsFromModule() "
"<unittest.TestLoader.loadTestsFromModule>` 方法可接受仅限关键字参数 *pattern*，它将作为传给 "
"``load_tests`` 的第三个参数。 找到的包无论其路径是否匹配 *pattern* 都会针对 ``load_tests`` "
"进行检查，因为包名不可能与默认模式相匹配。 （由 Robert Collins 和 Barry A. Warsaw 在 :issue:`16662` "
"中贡献。）"

#: ../../whatsnew/3.5.rst:1994
msgid ""
"Unittest discovery errors now are exposed in the :data:`TestLoader.errors "
"<unittest.TestLoader.errors>` attribute of the :class:`~unittest.TestLoader`"
" instance. (Contributed by Robert Collins in :issue:`19746`.)"
msgstr ""
"单元测试发现错误现在将会暴露为 :class:`~unittest.TestLoader` 的 :data:`TestLoader.errors "
"<unittest.TestLoader.errors>` 属性。 （由 Robert Collins 在 :issue:`19746` 中贡献。）"

#: ../../whatsnew/3.5.rst:1999
msgid ""
"A new command line option ``--locals`` to show local variables in "
"tracebacks.  (Contributed by Robert Collins in :issue:`22936`.)"
msgstr ""
"新增的命令行选项 ``--locals`` 可显示回溯中的局部变量。 （由 Robert Collins 在 :issue:`22936` 中贡献。）"

#: ../../whatsnew/3.5.rst:2004
msgid "unittest.mock"
msgstr "unittest.mock"

#: ../../whatsnew/3.5.rst:2006
msgid "The :class:`~unittest.mock.Mock` class has the following improvements:"
msgstr ":class:`~unittest.mock.Mock` 类具有以下改进："

#: ../../whatsnew/3.5.rst:2008
msgid ""
"The class constructor has a new *unsafe* parameter, which causes mock "
"objects to raise :exc:`AttributeError` on attribute names starting with "
"``\"assert\"``. (Contributed by Kushal Das in :issue:`21238`.)"
msgstr ""
"类构造器新增了 *unsafe* 形参，它可导致模拟对象在名称以 ``\"assert\"`` 打头的属性名上引发 "
":exc:`AttributeError`。 （由 Kushal Das 在 :issue:`21238` 中贡献。）"

#: ../../whatsnew/3.5.rst:2013
msgid ""
"A new :meth:`Mock.assert_not_called() "
"<unittest.mock.Mock.assert_not_called>` method to check if the mock object "
"was called. (Contributed by Kushal Das in :issue:`21262`.)"
msgstr ""
"新增了 :meth:`Mock.assert_not_called() <unittest.mock.Mock.assert_not_called>` "
"方法用于检测模拟对象是否已被调用。 （由 Kushal Das 在 :issue:`21262` 中贡献。）"

#: ../../whatsnew/3.5.rst:2017
msgid ""
"The :class:`~unittest.mock.MagicMock` class now supports "
":meth:`__truediv__`, :meth:`__divmod__` and :meth:`__matmul__` operators. "
"(Contributed by Johannes Baiter in :issue:`20968`, and Håkan Lövdahl in "
":issue:`23581` and :issue:`23568`.)"
msgstr ""
"现在 :class:`~unittest.mock.MagicMock` 类已支持 :meth:`__truediv__`, "
":meth:`__divmod__` 和 :meth:`__matmul__` 运算符。 （由 Johannes Baiter 在 "
":issue:`20968` 中贡献，并由 Håkan Lövdahl 在 :issue:`23581` 和 :issue:`23568` 中贡献。）"

#: ../../whatsnew/3.5.rst:2022
msgid ""
"It is no longer necessary to explicitly pass ``create=True`` to the "
":func:`~unittest.mock.patch` function when patching builtin names. "
"(Contributed by Kushal Das in :issue:`17660`.)"
msgstr ""
"在对内置名称打补丁时不再需要显式地将 ``create=True`` 传给 :func:`~unittest.mock.patch` 函数。 （由 "
"Kushal Das 在 :issue:`17660` 中贡献。）"

#: ../../whatsnew/3.5.rst:2028
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.5.rst:2030
msgid ""
"A new :class:`request.HTTPPasswordMgrWithPriorAuth "
"<urllib.request.HTTPPasswordMgrWithPriorAuth>` class allows HTTP Basic "
"Authentication credentials to be managed so as to eliminate unnecessary "
"``401`` response handling, or to unconditionally send credentials on the "
"first request in order to communicate with servers that return a ``404`` "
"response instead of a ``401`` if the ``Authorization`` header is not sent. "
"(Contributed by Matej Cepl in :issue:`19494` and Akshit Khurana in "
":issue:`7159`.)"
msgstr ""
"新增的 :class:`request.HTTPPasswordMgrWithPriorAuth "
"<urllib.request.HTTPPasswordMgrWithPriorAuth>` 类允许对 HTTP 基本认证凭据进行管理以消除不必要的 "
"``401`` 响应处理，或在第一次请求时无条件地发送凭据，以便与返回 ``404`` 响应的服务器通信而不是在未发送 "
"``Authorization`` 头信息的情况下发送 ``401``。 （由 Matej Cepl 在 :issue:`19494` 以及 "
"Akshit Khurana 在 :issue:`7159` 中贡献。）"

#: ../../whatsnew/3.5.rst:2039
msgid ""
"A new *quote_via* argument for the :func:`parse.urlencode() "
"<urllib.parse.urlencode>` function provides a way to control the encoding of"
" query parts if needed. (Contributed by Samwyse and Arnon Yaari in "
":issue:`13866`.)"
msgstr ""
"为 :func:`parse.urlencode() <urllib.parse.urlencode>` 函数新增的 *quote_via* "
"参数提供了一种在需要时控制查询部分的编码格式的手段。 （由 Samwyse 和 Arnon Yaari 在 :issue:`13866` 中贡献。）"

#: ../../whatsnew/3.5.rst:2044
msgid ""
"The :func:`request.urlopen() <urllib.request.urlopen>` function accepts an "
":class:`ssl.SSLContext` object as a *context* argument, which will be used "
"for the HTTPS connection.  (Contributed by Alex Gaynor in :issue:`22366`.)"
msgstr ""
":func:`request.urlopen() <urllib.request.urlopen>` 函数接受 "
":class:`ssl.SSLContext` 对象作为 *context* 参数，它将被用于 HTTPS 连接。 （由 Alex Gaynor 在 "
":issue:`22366` 中贡献。）.)"

#: ../../whatsnew/3.5.rst:2048
msgid ""
"The :func:`parse.urljoin() <urllib.parse.urljoin>` was updated to use the "
":rfc:`3986` semantics for the resolution of relative URLs, rather than "
":rfc:`1808` and :rfc:`2396`. (Contributed by Demian Brecht and Senthil "
"Kumaran in :issue:`22118`.)"
msgstr ""
":func:`parse.urljoin() <urllib.parse.urljoin>` 已获得更新已使用 :rfc:`3986` 语义来解析相对 "
"URL，而不是 :rfc:`1808` 和 :rfc:`2396`。 （由 Demian Brecht 和 Senthil Kumaran 在 "
":issue:`22118` 中贡献。）"

#: ../../whatsnew/3.5.rst:2055
msgid "wsgiref"
msgstr "wsgiref"

#: ../../whatsnew/3.5.rst:2057
msgid ""
"The *headers* argument of the :class:`headers.Headers "
"<wsgiref.headers.Headers>` class constructor is now optional. (Contributed "
"by Pablo Torres Navarrete and SilentGhost in :issue:`5800`.)"
msgstr ""
"现在 :class:`headers.Headers <wsgiref.headers.Headers>` 类构造器的 *headers* "
"参数将是可选的。 （由 Pablo Torres Navarrete 和 SilentGhost 在 :issue:`5800` 中贡献。）"

#: ../../whatsnew/3.5.rst:2063
msgid "xmlrpc"
msgstr "xmlrpc"

#: ../../whatsnew/3.5.rst:2065
msgid ""
"The :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` class now "
"supports the :term:`context manager` protocol. (Contributed by Claudiu Popa "
"in :issue:`20627`.)"
msgstr ""
"现在 :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` 类已支持 "
":term:`context manager` 协议。 （由 Claudiu Popa 在 :issue:`20627` 中贡献。）"

#: ../../whatsnew/3.5.rst:2069
msgid ""
"The :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` constructor now "
"accepts an optional :class:`ssl.SSLContext` instance. (Contributed by Alex "
"Gaynor in :issue:`22960`.)"
msgstr ""
"现在 :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` 构造器接受可选的 "
":class:`ssl.SSLContext` 实例。 （由 Alex Gaynor 在 :issue:`22960` 中贡献。）"

#: ../../whatsnew/3.5.rst:2075
msgid "xml.sax"
msgstr "xml.sax"

#: ../../whatsnew/3.5.rst:2077
msgid ""
"SAX parsers now support a character stream of the "
":class:`xmlreader.InputSource <xml.sax.xmlreader.InputSource>` object. "
"(Contributed by Serhiy Storchaka in :issue:`2175`.)"
msgstr ""
"现在 SAX 解析器已支持 :class:`xmlreader.InputSource <xml.sax.xmlreader.InputSource>`"
" 对象的字符流。 （由 Serhiy Storchaka 在 :issue:`2175` 中贡献。）"

#: ../../whatsnew/3.5.rst:2081
msgid ""
":func:`~xml.sax.parseString` now accepts a :class:`str` instance. "
"(Contributed by Serhiy Storchaka in :issue:`10590`.)"
msgstr ""
"现在 :func:`~xml.sax.parseString` 接受 :class:`str` 实例。 （由 Serhiy Storchaka 在 "
":issue:`10590` 中贡献。）"

#: ../../whatsnew/3.5.rst:2086
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.5.rst:2088
msgid ""
"ZIP output can now be written to unseekable streams. (Contributed by Serhiy "
"Storchaka in :issue:`23252`.)"
msgstr "现在可以将 ZIP 输出写入到不可定位的流。 （由 Serhiy Storchaka 在 :issue:`23252` 中贡献。）"

#: ../../whatsnew/3.5.rst:2091
msgid ""
"The *mode* argument of :meth:`ZipFile.open() <zipfile.ZipFile.open>` method "
"now accepts ``\"x\"`` to request exclusive creation. (Contributed by Serhiy "
"Storchaka in :issue:`21717`.)"
msgstr ""
"现在 :meth:`ZipFile.open() <zipfile.ZipFile.open>` 方法的 *mode* 参数可接受 ``\"x\"`` "
"来请求独占式的创建。 （由 Serhiy Storchaka 在 :issue:`21717` 中贡献。）"

#: ../../whatsnew/3.5.rst:2097
msgid "Other module-level changes"
msgstr "其他模块级更改"

#: ../../whatsnew/3.5.rst:2099
msgid ""
"Many functions in the :mod:`mmap`, :mod:`ossaudiodev`, :mod:`socket`, "
":mod:`ssl`, and :mod:`codecs` modules now accept writable :term:`bytes-like "
"objects <bytes-like object>`. (Contributed by Serhiy Storchaka in "
":issue:`23001`.)"
msgstr ""
"现在 :mod:`mmap`, :mod:`ossaudiodev`, :mod:`socket`, :mod:`ssl` 和 "
":mod:`codecs` 模块中的许多函数都接受可写的 :term:`字节型对象 <bytes-like object>`。 （由 Serhiy "
"Storchaka 在 :issue:`23001` 中贡献。）"

#: ../../whatsnew/3.5.rst:2106
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.5.rst:2108
msgid ""
"The :func:`os.walk` function has been sped up by 3 to 5 times on POSIX "
"systems, and by 7 to 20 times on Windows.  This was done using the new "
":func:`os.scandir` function, which exposes file information from the "
"underlying ``readdir`` or ``FindFirstFile``/``FindNextFile`` system calls.  "
"(Contributed by Ben Hoyt with help from Victor Stinner in :issue:`23605`.)"
msgstr ""
":func:`os.walk` 函数在 POSIX 系统上可提速 3 至 5 倍，而在 Windows 上可提速 7 至 20 倍。 这是因为使用了新的"
" :func:`os.scandir` 函数，它可以暴露来自下层 ``readdir`` 或 "
"``FindFirstFile``/``FindNextFile`` 系统调用的文件信息。 （由 Ben Hoyt 在 :issue:`23605` "
"中贡献并得到 Victor Stinner 的协助。）"

#: ../../whatsnew/3.5.rst:2114
msgid ""
"Construction of ``bytes(int)`` (filled by zero bytes) is faster and uses "
"less memory for large objects. ``calloc()`` is used instead of ``malloc()`` "
"to allocate memory for these objects. (Contributed by Victor Stinner in "
":issue:`21233`.)"
msgstr ""
"对于大对象 ``bytes(int)`` (以零字节填充) 的构建速度更快且使用更少内存。 将使用 ``calloc()`` 而不是 "
"``malloc()`` 为这些对象分配内存。 （由 Victor Stinner 在 :issue:`21233` 中贡献。）"

#: ../../whatsnew/3.5.rst:2119
msgid ""
"Some operations on :mod:`ipaddress` :class:`~ipaddress.IPv4Network` and "
":class:`~ipaddress.IPv6Network` have been massively sped up, such as "
":meth:`~ipaddress.IPv4Network.subnets`, "
":meth:`~ipaddress.IPv4Network.supernet`, "
":func:`~ipaddress.summarize_address_range`, "
":func:`~ipaddress.collapse_addresses`. The speed up can range from 3 to 15 "
"times. (Contributed by Antoine Pitrou, Michel Albert, and Markus in "
":issue:`21486`, :issue:`21487`, :issue:`20826`, :issue:`23266`.)"
msgstr ""
":mod:`ipaddress` 中的 :class:`~ipaddress.IPv4Network` 和 "
":class:`~ipaddress.IPv6Network` 等操作获得了大幅度的加速，比如 "
":meth:`~ipaddress.IPv4Network.subnets`, "
":meth:`~ipaddress.IPv4Network.supernet`, "
":func:`~ipaddress.summarize_address_range`, "
":func:`~ipaddress.collapse_addresses`。 加速幅度从 3 到 15 倍不等。 （由 Antoine Pitrou, "
"Michel Albert 和 Markus 在 :issue:`21486`, :issue:`21487`, :issue:`20826`, "
":issue:`23266` 中贡献。）"

#: ../../whatsnew/3.5.rst:2127
msgid ""
"Pickling of :mod:`ipaddress` objects was optimized to produce significantly "
"smaller output.  (Contributed by Serhiy Storchaka in :issue:`23133`.)"
msgstr ""
":mod:`ipaddress` 对象的封存操作获得了优化以产生显著减小的输出。 （由 Serhiy Storchaka 在 "
":issue:`23133` 中贡献。）"

#: ../../whatsnew/3.5.rst:2130
msgid ""
"Many operations on :class:`io.BytesIO` are now 50% to 100% faster. "
"(Contributed by Serhiy Storchaka in :issue:`15381` and David Wilson in "
":issue:`22003`.)"
msgstr ""
"现在 :class:`io.BytesIO` 上的许多操作可提速 50% 至 100%。 （由 Serhiy Storchaka 在 "
":issue:`15381` 以及 David Wilson 在 :issue:`22003` 中贡献。）"

#: ../../whatsnew/3.5.rst:2134
msgid ""
"The :func:`marshal.dumps` function is now faster: 65--85% with versions 3 "
"and 4, 20--25% with versions 0 to 2 on typical data, and up to 5 times in "
"best cases. (Contributed by Serhiy Storchaka in :issue:`20416` and "
":issue:`23344`.)"
msgstr ""
"现在 :func:`marshal.dumps` 函数速度可提升：对于典型数据来说版本 3 和 4 为 65--85%，版本 0 至 2 为 20--"
"25%，最佳场景下最多可达 5 倍。 （由 Serhiy Storchaka 在 :issue:`20416` 和 :issue:`23344` "
"中贡献。）"

#: ../../whatsnew/3.5.rst:2139
msgid ""
"The UTF-32 encoder is now 3 to 7 times faster. (Contributed by Serhiy "
"Storchaka in :issue:`15027`.)"
msgstr "现在 UTF-32 编码器可提速 3 至 7 倍。 （由 Serhiy Storchaka 在 :issue:`15027` 中贡献。）"

#: ../../whatsnew/3.5.rst:2142
msgid ""
"Regular expressions are now parsed up to 10% faster. (Contributed by Serhiy "
"Storchaka in :issue:`19380`.)"
msgstr "现在正则表达式的解析可提速至多 10%。 （由 Serhiy Storchaka 在 :issue:`19380` 中贡献。）.)"

#: ../../whatsnew/3.5.rst:2145
msgid ""
"The :func:`json.dumps` function was optimized to run with "
"``ensure_ascii=False`` as fast as with ``ensure_ascii=True``. (Contributed "
"by Naoki Inada in :issue:`23206`.)"
msgstr ""
":func:`json.dumps` 函数已获优化使得设置 ``ensure_ascii=False`` 时与设置 "
"``ensure_ascii=True`` 时运行得一样快。 （由 Naoki Inada 在 :issue:`23206` 中贡献。）"

#: ../../whatsnew/3.5.rst:2149
msgid ""
"The :c:func:`PyObject_IsInstance` and :c:func:`PyObject_IsSubclass` "
"functions have been sped up in the common case that the second argument has "
":class:`type` as its metaclass. (Contributed Georg Brandl by in "
":issue:`22540`.)"
msgstr ""
":c:func:`PyObject_IsInstance` 和 :c:func:`PyObject_IsSubclass` 函数在第二个参数以 "
":class:`type` 作为其元类的常见情况下已获得加速。 （由 Georg Brandl 在 :issue:`22540` 中贡献。）"

#: ../../whatsnew/3.5.rst:2154
msgid ""
"Method caching was slightly improved, yielding up to 5% performance "
"improvement in some benchmarks. (Contributed by Antoine Pitrou in "
":issue:`22847`.)"
msgstr ""
"方法缓存操作已获少量改进，在某些基准测试中可产生至多 5% 的性能提升。 （由 Antoine Pitrou 在 :issue:`22847` "
"中贡献。）"

#: ../../whatsnew/3.5.rst:2158
msgid ""
"Objects from the :mod:`random` module now use 50% less memory on 64-bit "
"builds.  (Contributed by Serhiy Storchaka in :issue:`23488`.)"
msgstr ""
"现在来自 :mod:`random` 模块的对象在 64 位编译版上使用的内存将减少 50%。 （由 Serhiy Storchaka 在 "
":issue:`23488` 中贡献。）"

#: ../../whatsnew/3.5.rst:2161
msgid ""
"The :func:`property` getter calls are up to 25% faster. (Contributed by Joe "
"Jevnik in :issue:`23910`.)"
msgstr ""
":func:`property` getter 调用可提速 25%。 （由 Joe Jevnik 在 :issue:`23910` 中贡献。）"

#: ../../whatsnew/3.5.rst:2164
msgid ""
"Instantiation of :class:`fractions.Fraction` is now up to 30% faster. "
"(Contributed by Stefan Behnel in :issue:`22464`.)"
msgstr ""
"现在 :class:`fractions.Fraction` 的实例化可提速至多 30%。 （由 Stefan Behnel 在 "
":issue:`22464` 中贡献。）"

#: ../../whatsnew/3.5.rst:2167
msgid ""
"String methods :meth:`~str.find`, :meth:`~str.rfind`, :meth:`~str.split`, "
":meth:`~str.partition` and the :keyword:`in` string operator are now "
"significantly faster for searching 1-character substrings. (Contributed by "
"Serhiy Storchaka in :issue:`23573`.)"
msgstr ""
"现在字符串方法 :meth:`~str.find`, :meth:`~str.rfind`, :meth:`~str.split`, "
":meth:`~str.partition` 和 :keyword:`in` 字符串运算符在搜索 1 个字符的子字符串时将显著提速。 （由 Serhiy"
" Storchaka 在 :issue:`23573` 中贡献。）"

#: ../../whatsnew/3.5.rst:2174
msgid "Build and C API Changes"
msgstr "构建和 C API 的改变"

#: ../../whatsnew/3.5.rst:2176
msgid "New ``calloc`` functions were added:"
msgstr "增加了 ``calloc`` 函数"

#: ../../whatsnew/3.5.rst:2178
msgid ":c:func:`PyMem_RawCalloc`,"
msgstr ":c:func:`PyMem_RawCalloc`,"

#: ../../whatsnew/3.5.rst:2179
msgid ":c:func:`PyMem_Calloc`,"
msgstr ":c:func:`PyMem_Calloc`,"

#: ../../whatsnew/3.5.rst:2180
msgid ":c:func:`PyObject_Calloc`."
msgstr ":c:func:`PyObject_Calloc`."

#: ../../whatsnew/3.5.rst:2182
msgid "(Contributed by Victor Stinner in :issue:`21233`.)"
msgstr "(Victor Stinner 贡献于 :issue:`21233`.)"

#: ../../whatsnew/3.5.rst:2184
msgid "New encoding/decoding helper functions:"
msgstr "新的 encoding/decoding 帮助函数:"

#: ../../whatsnew/3.5.rst:2186
msgid ":c:func:`Py_DecodeLocale` (replaced ``_Py_char2wchar()``),"
msgstr ":c:func:`Py_DecodeLocale` (替代 ``_Py_char2wchar()``),"

#: ../../whatsnew/3.5.rst:2187
msgid ":c:func:`Py_EncodeLocale` (replaced ``_Py_wchar2char()``)."
msgstr ":c:func:`Py_EncodeLocale` (替代 ``_Py_wchar2char()``)."

#: ../../whatsnew/3.5.rst:2189
msgid "(Contributed by Victor Stinner in :issue:`18395`.)"
msgstr "（由 Victor Stinner 在 :issue:`18395` 中贡献。）"

#: ../../whatsnew/3.5.rst:2191
msgid ""
"A new :c:func:`PyCodec_NameReplaceErrors` function to replace the unicode "
"encode error with ``\\N{...}`` escapes. (Contributed by Serhiy Storchaka in "
":issue:`19676`.)"
msgstr ""
"新增的 :c:func:`PyCodec_NameReplaceErrors` 函数可以将 unicode 编码错误替换为 ``\\N{...}`` "
"转义符号。 （由 Serhiy Storchaka 在 :issue:`19676` 中贡献。）"

#: ../../whatsnew/3.5.rst:2195
msgid ""
"A new :c:func:`PyErr_FormatV` function similar to :c:func:`PyErr_Format`, "
"but accepts a :c:type:`va_list` argument. (Contributed by Antoine Pitrou in "
":issue:`18711`.)"
msgstr ""
"新增的 :c:func:`PyErr_FormatV` 函数类似于 :c:func:`PyErr_Format`，但还接受一个 "
":c:type:`va_list` 参数。 （由 Antoine Pitrou 在 :issue:`18711` 中贡献。）"

#: ../../whatsnew/3.5.rst:2199
msgid ""
"A new :c:data:`PyExc_RecursionError` exception. (Contributed by Georg Brandl"
" in :issue:`19235`.)"
msgstr ""
"新增 :c:data:`PyExc_RecursionError` 异常。 （由 Georg Brandl 在 :issue:`19235` 中贡献。）"

#: ../../whatsnew/3.5.rst:2202
msgid ""
"New :c:func:`PyModule_FromDefAndSpec`, :c:func:`PyModule_FromDefAndSpec2`, "
"and :c:func:`PyModule_ExecDef` functions introduced by :pep:`489` -- multi-"
"phase extension module initialization. (Contributed by Petr Viktorin in "
":issue:`24268`.)"
msgstr ""
"新增 :c:func:`PyModule_FromDefAndSpec`, :c:func:`PyModule_FromDefAndSpec2` 和 "
":c:func:`PyModule_ExecDef` 函数，来自 :pep:`489` -- 多阶段扩展模块初始化。 （由 Petr Viktorin "
"在 :issue:`24268` 中贡献。）"

#: ../../whatsnew/3.5.rst:2207
msgid ""
"New :c:func:`PyNumber_MatrixMultiply` and "
":c:func:`PyNumber_InPlaceMatrixMultiply` functions to perform matrix "
"multiplication. (Contributed by Benjamin Peterson in :issue:`21176`.  See "
"also :pep:`465` for details.)"
msgstr ""
"新增 :c:func:`PyNumber_MatrixMultiply` 和 "
":c:func:`PyNumber_InPlaceMatrixMultiply` 函数用于执行矩阵乘法。 （由 Benjamin Peterson 在 "
":issue:`21176` 中贡献。 另请参阅 :pep:`465` 了解详情。）"

#: ../../whatsnew/3.5.rst:2213
msgid ""
"The :c:member:`PyTypeObject.tp_finalize` slot is now part of the stable ABI."
msgstr "现在 :c:member:`PyTypeObject.tp_finalize` 槽位已成为稳定 ABI 的一部分。"

#: ../../whatsnew/3.5.rst:2215
msgid ""
"Windows builds now require Microsoft Visual C++ 14.0, which is available as "
"part of `Visual Studio 2015 <https://visualstudio.microsoft.com/en/vs/older-"
"downloads/#visual-studio-2015-and-other-products>`_."
msgstr ""
"Windows 构建现在需要 Microsoft Visual C++ 14.0，它是 `Visual Studio 2015 "
"<https://visualstudio.microsoft.com/en/vs/older-downloads/#visual-"
"studio-2015-and-other-products>`_ 的一部分。"

#: ../../whatsnew/3.5.rst:2218
msgid ""
"Extension modules now include a platform information tag in their filename "
"on some platforms (the tag is optional, and CPython will import extensions "
"without it, although if the tag is present and mismatched, the extension "
"won't be loaded):"
msgstr ""
"现在扩展模块在某些平台上的文件名将包括平台信息标签（该标签是可选的，即使没有它 CPython "
"也会导入扩展，但是如果存在不匹配的标签，扩展将不会被加载）："

#: ../../whatsnew/3.5.rst:2223
msgid ""
"On Linux, extension module filenames end with "
"``.cpython-<major><minor>m-<architecture>-<os>.pyd``:"
msgstr ""
"在 Linux 上，扩展模块文件名将以 ``.cpython-<major><minor>m-<architecture>-<os>.pyd`` 结束："

#: ../../whatsnew/3.5.rst:2226 ../../whatsnew/3.5.rst:2243
msgid ""
"``<major>`` is the major number of the Python version; for Python 3.5 this "
"is ``3``."
msgstr "``<major>`` 为 Python 主版本号；对于 Python 3.5 即为 ``3``。"

#: ../../whatsnew/3.5.rst:2229 ../../whatsnew/3.5.rst:2246
msgid ""
"``<minor>`` is the minor number of the Python version; for Python 3.5 this "
"is ``5``."
msgstr "``<minor>`` 为 Python 次版本号；对于 Python 3.5 即为 ``5``。"

#: ../../whatsnew/3.5.rst:2232
msgid ""
"``<architecture>`` is the hardware architecture the extension module was "
"built to run on. It's most commonly either ``i386`` for 32-bit Intel "
"platforms or ``x86_64`` for 64-bit Intel (and AMD) platforms."
msgstr ""
"``<architecture>`` 为扩展模块构建在运行时所使用的硬件架构。 最常见的值是 ``i386`` 表示 32 位 Intel 平台或 "
"``x86_64`` 表示 64 位 Intel (和 AMD) 平台。"

#: ../../whatsnew/3.5.rst:2236
msgid ""
"``<os>`` is always ``linux-gnu``, except for extensions built to talk to the"
" 32-bit ABI on 64-bit platforms, in which case it is ``linux-gnu32`` (and "
"``<architecture>`` will be ``x86_64``)."
msgstr ""
"``<os>`` 将始终为 ``linux-gnu``，除非扩展构建是针对 64 位平台上的 32 位 ABI，在此情况下它将为 ``linux-"
"gnu32`` (而 ``<architecture>`` 将为 ``x86_64``)。"

#: ../../whatsnew/3.5.rst:2240
msgid ""
"On Windows, extension module filenames end with "
"``<debug>.cp<major><minor>-<platform>.pyd``:"
msgstr "在 Windows 上，扩展模块文件名将以 ``<debug>.cp<major><minor>-<platform>.pyd`` 结束："

#: ../../whatsnew/3.5.rst:2249
msgid ""
"``<platform>`` is the platform the extension module was built for, either "
"``win32`` for Win32, ``win_amd64`` for Win64, ``win_ia64`` for Windows "
"Itanium 64, and ``win_arm`` for Windows on ARM."
msgstr ""
"``<platform>`` 是扩展模块构建所针对的平台，可以为 ``win32`` 表示 Win32，``win_amd64`` 表示 "
"Win64，``win_ia64`` 表示 Windows Itanium 64，``win_arm`` 表示 ARM 版 Windows。"

#: ../../whatsnew/3.5.rst:2253
msgid ""
"If built in debug mode, ``<debug>`` will be ``_d``, otherwise it will be "
"blank."
msgstr "如果以调试模式构建，则 ``<debug>`` 将为 ``_d``，在其他情况下将为空白。"

#: ../../whatsnew/3.5.rst:2256
msgid ""
"On OS X platforms, extension module filenames now end with ``-darwin.so``."
msgstr "在 OS X 平台上，扩展模块文件名现在将以 ``-darwin.so`` 结束。"

#: ../../whatsnew/3.5.rst:2258
msgid ""
"On all other platforms, extension module filenames are the same as they were"
" with Python 3.4."
msgstr "在所有其他平台上，扩展模块文件名与 Python 3.4 时一样。"

#: ../../whatsnew/3.5.rst:2263
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.5.rst:2266
msgid "New Keywords"
msgstr "新关键字"

#: ../../whatsnew/3.5.rst:2268
msgid ""
"``async`` and ``await`` are not recommended to be used as variable, class, "
"function or module names.  Introduced by :pep:`492` in Python 3.5, they will"
" become proper keywords in Python 3.7."
msgstr ""
"不建议将 ``async`` 和 ``await`` 用作变量、类、函数或模块的名称。 它们根据 :pep:`492` 在 Python 3.5 "
"中被引入，并将在 Python 3.7 成为保留关键字。"

#: ../../whatsnew/3.5.rst:2274
msgid "Deprecated Python Behavior"
msgstr "已弃用的 Python 行为"

#: ../../whatsnew/3.5.rst:2276
msgid ""
"Raising the :exc:`StopIteration` exception inside a generator will now "
"generate a silent :exc:`PendingDeprecationWarning`, which will become a non-"
"silent deprecation warning in Python 3.6 and will trigger a "
":exc:`RuntimeError` in Python 3.7. See :ref:`PEP 479: Change StopIteration "
"handling inside generators <whatsnew-pep-479>` for details."
msgstr ""
"在生成器内部引发 :exc:`StopIteration` 异常现在将静默生成一个 "
":exc:`PendingDeprecationWarning`，这将在 Python 3.6 中改为非静默的弃用警告并在 Python 3.7 中触发"
" :exc:`RuntimeError`。 请参阅 :ref:`PEP 479: 修改生成器内部的 StopIteration 处理方式 "
"<whatsnew-pep-479>` 了解详情。"

#: ../../whatsnew/3.5.rst:2284
msgid "Unsupported Operating Systems"
msgstr "不支持的操作系统"

#: ../../whatsnew/3.5.rst:2286
msgid ""
"Windows XP is no longer supported by Microsoft, thus, per :PEP:`11`, CPython"
" 3.5 is no longer officially supported on this OS."
msgstr ""
"Windows XP 已不再被 Microsoft 所支持，因此根据 :PEP:`11`，CPython 3.5 不再对该操作系统提供官方支持。"

#: ../../whatsnew/3.5.rst:2291
msgid "Deprecated Python modules, functions and methods"
msgstr "已弃用的 Python 模块、函数和方法"

#: ../../whatsnew/3.5.rst:2293
msgid ""
"The :mod:`formatter` module has now graduated to full deprecation and is "
"still slated for removal in Python 3.6."
msgstr "现在 :mod:`formatter` 模块状态已转为完全弃用并仍计划在 Python 3.6 中移除。"

#: ../../whatsnew/3.5.rst:2296
msgid ""
"The :func:`asyncio.async` function is deprecated in favor of "
":func:`~asyncio.ensure_future`."
msgstr ":func:`asyncio.async` 函数已被弃用并由 of :func:`~asyncio.ensure_future` 取代。"

#: ../../whatsnew/3.5.rst:2299
msgid ""
"The :mod:`smtpd` module has in the past always decoded the DATA portion of "
"email messages using the ``utf-8`` codec.  This can now be controlled by the"
" new *decode_data* keyword to :class:`~smtpd.SMTPServer`.  The default value"
" is ``True``, but this default is deprecated.  Specify the *decode_data* "
"keyword with an appropriate value to avoid the deprecation warning."
msgstr ""

#: ../../whatsnew/3.5.rst:2305
msgid ""
"Directly assigning values to the :attr:`~http.cookies.Morsel.key`, "
":attr:`~http.cookies.Morsel.value` and "
":attr:`~http.cookies.Morsel.coded_value` of :class:`http.cookies.Morsel` "
"objects is deprecated.  Use the :meth:`~http.cookies.Morsel.set` method "
"instead.  In addition, the undocumented *LegalChars* parameter of "
":meth:`~http.cookies.Morsel.set` is deprecated, and is now ignored."
msgstr ""
"直接向 :class:`http.cookies.Morsel` 对象的 :attr:`~http.cookies.Morsel.key`, "
":attr:`~http.cookies.Morsel.value` 和 "
":attr:`~http.cookies.Morsel.coded_value` 赋值操作已弃用。 请改用 "
":meth:`~http.cookies.Morsel.set`。 此外，:meth:`~http.cookies.Morsel.set` 未写入文档的"
" *LegalChars* 形参也已弃用，现在将会被忽略。"

#: ../../whatsnew/3.5.rst:2312
msgid ""
"Passing a format string as keyword argument *format_string* to the "
":meth:`~string.Formatter.format` method of the :class:`string.Formatter` "
"class has been deprecated. (Contributed by Serhiy Storchaka in "
":issue:`23671`.)"
msgstr ""
"将格式字符串作为关键字参数 *format_string* 传给 :class:`string.Formatter` 类的 "
":meth:`~string.Formatter.format` 方法的操作已被弃用。 （由 Serhiy Storchaka 在 "
":issue:`23671` 贡献。）"

#: ../../whatsnew/3.5.rst:2317
msgid ""
"The :func:`platform.dist` and :func:`platform.linux_distribution` functions "
"are now deprecated.  Linux distributions use too many different ways of "
"describing themselves, so the functionality is left to a package. "
"(Contributed by Vajrasky Kok and Berker Peksag in :issue:`1322`.)"
msgstr ""
"现在 :func:`platform.dist` 和 :func:`platform.linux_distribution` 函数已被弃用。 各种 "
"Linux 发行版使用太多不同的方式来描述自己，所以此功能将留给具体的包来实现。 （由 Vajrasky Kok 和 Berker Peksag 在 "
":issue:`1322` 中贡献。）"

#: ../../whatsnew/3.5.rst:2322
msgid ""
"The previously undocumented ``from_function`` and ``from_builtin`` methods "
"of :class:`inspect.Signature` are deprecated.  Use the new "
":meth:`Signature.from_callable() <inspect.Signature.from_callable>` method "
"instead. (Contributed by Yury Selivanov in :issue:`24248`.)"
msgstr ""
"之前未写入文档的 :class:`inspect.Signature` 的 ``from_function`` 和 ``from_builtin`` "
"方法已被弃用。 请改用新的 :meth:`Signature.from_callable() "
"<inspect.Signature.from_callable>` 方法。 （由 Yury Selivanov 在 :issue:`24248` "
"中贡献。）"

#: ../../whatsnew/3.5.rst:2327
msgid ""
"The :func:`inspect.getargspec` function is deprecated and scheduled to be "
"removed in Python 3.6.  (See :issue:`20438` for details.)"
msgstr ""
":func:`inspect.getargspec` 函数已被弃用并计划在 Python 3.6 中移除。 （请参阅 :issue:`20438` "
"了解详情。）"

#: ../../whatsnew/3.5.rst:2330
msgid ""
"The :mod:`inspect` :func:`~inspect.getfullargspec`, "
":func:`~inspect.getcallargs`, and :func:`~inspect.formatargspec` functions "
"are deprecated in favor of the :func:`inspect.signature` API. (Contributed "
"by Yury Selivanov in :issue:`20438`.)"
msgstr ""
":mod:`inspect` 的 :func:`~inspect.getfullargspec`, "
":func:`~inspect.getcallargs` 和 :func:`~inspect.formatargspec` 函数已被弃用而应改用 "
":func:`inspect.signature` API。 （由 Yury Selivanov 在 :issue:`20438` 中贡献。）"

#: ../../whatsnew/3.5.rst:2335
msgid ""
":func:`~inspect.getargvalues` and :func:`~inspect.formatargvalues` functions"
" were inadvertently marked as deprecated with the release of Python 3.5.0."
msgstr ""
"在 Python 3.5.0 发布时 :func:`~inspect.getargvalues` 和 "
":func:`~inspect.formatargvalues` 函数被误标记为已弃用。"

#: ../../whatsnew/3.5.rst:2338
msgid ""
"Use of :const:`re.LOCALE` flag with str patterns or :const:`re.ASCII` is now"
" deprecated.  (Contributed by Serhiy Storchaka in :issue:`22407`.)"
msgstr ""
"在 str 模式中使用 :const:`re.LOCALE` 旗标或 :const:`re.ASCII` 的做法现在已被弃用。 （由 Serhiy "
"Storchaka 在 :issue:`22407` 中贡献。）"

#: ../../whatsnew/3.5.rst:2341
msgid ""
"Use of unrecognized special sequences consisting of ``'\\'`` and an ASCII "
"letter in regular expression patterns and replacement patterns now raises a "
"deprecation warning and will be forbidden in Python 3.6. (Contributed by "
"Serhiy Storchaka in :issue:`23622`.)"
msgstr ""
"在正则表达式模式和替换模式中使用不可识别的由 ``'\\'`` 加一个 ASCII 字母组成的序列的做法现在会引发弃用警告并将在 Python 3.6 "
"中被禁止。 （由 Serhiy Storchaka 在 :issue:`23622` 中贡献。）"

#: ../../whatsnew/3.5.rst:2346
msgid ""
"The undocumented and unofficial *use_load_tests* default argument of the "
":meth:`unittest.TestLoader.loadTestsFromModule` method now is deprecated and"
" ignored. (Contributed by Robert Collins and Barry A. Warsaw in "
":issue:`16662`.)"
msgstr ""
"现在 :meth:`unittest.TestLoader.loadTestsFromModule` 方法未写入文档的非官方 "
"*use_load_tests* 默认参数已被弃用并会被忽略。 （由 Robert Collins 和 Barry A. Warsaw 在 "
":issue:`16662` 中贡献。）"

#: ../../whatsnew/3.5.rst:2353
msgid "Removed"
msgstr "移除"

#: ../../whatsnew/3.5.rst:2356
msgid "API and Feature Removals"
msgstr "API 与特性的移除"

#: ../../whatsnew/3.5.rst:2358
msgid ""
"The following obsolete and previously deprecated APIs and features have been"
" removed:"
msgstr "以下过时并在之前版本中弃用的 API 和特性现已被移除："

#: ../../whatsnew/3.5.rst:2361
msgid ""
"The ``__version__`` attribute has been dropped from the email package.  The "
"email code hasn't been shipped separately from the stdlib for a long time, "
"and the ``__version__`` string was not updated in the last few releases."
msgstr ""
"``__version__`` 属性已从 mail 包中被去除。 email 包的代码已经很久没有与 stdlib 分开发布了，而 "
"``__version__`` 字符串在最近几次发布版中也没有被更新。"

#: ../../whatsnew/3.5.rst:2365
msgid ""
"The internal ``Netrc`` class in the :mod:`ftplib` module was deprecated in "
"3.4, and has now been removed. (Contributed by Matt Chaput in "
":issue:`6623`.)"
msgstr ""
"在 :mod:`ftplib` 模块中的内部 ``Netrc`` 类在 3.4 中被弃用，现在已被移除。 （由 Matt Chaput 在 "
":issue:`6623` 中贡献。）"

#: ../../whatsnew/3.5.rst:2369
msgid "The concept of ``.pyo`` files has been removed."
msgstr "``.pyo`` 文件的概念已被移除。"

#: ../../whatsnew/3.5.rst:2371
msgid ""
"The JoinableQueue class in the provisional :mod:`asyncio` module was "
"deprecated in 3.4.4 and is now removed. (Contributed by A. Jesse Jiryu Davis"
" in :issue:`23464`.)"
msgstr ""
"暂定的 :mod:`asyncio` 模块中的 JoinableQueue 类在 3.4.4 中被弃用，现在已被移除。 （由 A. Jesse "
"Jiryu Davis 在 :issue:`23464` 中贡献。）"

#: ../../whatsnew/3.5.rst:2377
msgid "Porting to Python 3.5"
msgstr "移植到Python 3.5"

#: ../../whatsnew/3.5.rst:2379
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.5.rst:2384
msgid "Changes in Python behavior"
msgstr "Python 行为的改变"

#: ../../whatsnew/3.5.rst:2386
msgid ""
"Due to an oversight, earlier Python versions erroneously accepted the "
"following syntax::"
msgstr "由于一个疏忽，之前的 Python 版本会错误地接受以下语法::"

#: ../../whatsnew/3.5.rst:2392
msgid ""
"Python 3.5 now correctly raises a :exc:`SyntaxError`, as generator "
"expressions must be put in parentheses if not a sole argument to a function."
msgstr ""
"对于生成器表达式不是传给函数的唯一参数时必须放在圆括号内的情况，Python 3.5 现在会正确地引发 :exc:`SyntaxError`。"

#: ../../whatsnew/3.5.rst:2397
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.5.rst:2399
msgid ""
":pep:`475`: System calls are now retried when interrupted by a signal "
"instead of raising :exc:`InterruptedError` if the Python signal handler does"
" not raise an exception."
msgstr ""
":pep:`475`: 现在当系统调用被信号中断时如果 Python 信号处理器没有引发异常则会执行重试而不是引发 "
":exc:`InterruptedError`。"

#: ../../whatsnew/3.5.rst:2403
msgid ""
"Before Python 3.5, a :class:`datetime.time` object was considered to be "
"false if it represented midnight in UTC.  This behavior was considered "
"obscure and error-prone and has been removed in Python 3.5.  See "
":issue:`13936` for full details."
msgstr ""
"在 Python 3.5 之前，如果一个 :class:`datetime.time` 对象是表示 UTC 时间的午夜则会被视为假值。 "
"此行为被认为容易造成困惑和错误因而在 Python 3.5 中已被去除。 详情参见 :issue:`13936`。"

#: ../../whatsnew/3.5.rst:2408
msgid ""
"The :meth:`ssl.SSLSocket.send()` method now raises either "
":exc:`ssl.SSLWantReadError` or :exc:`ssl.SSLWantWriteError` on a non-"
"blocking socket if the operation would block.  Previously, it would return "
"``0``.  (Contributed by Nikolaus Rath in :issue:`20951`.)"
msgstr ""
"现在当操作将要阻塞时 :meth:`ssl.SSLSocket.send()` 方法将在非阻塞的套接字上引发 "
":exc:`ssl.SSLWantReadError` 或 :exc:`ssl.SSLWantWriteError`。 在之前版本中，它将返回 "
"``0``。 （由 Nikolaus Rath 在 :issue:`20951` 中贡献。）"

#: ../../whatsnew/3.5.rst:2413
msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of being set from the code name. Use ``gen.gi_code.co_name`` to "
"retrieve the code name. Generators also have a new ``__qualname__`` "
"attribute, the qualified name, which is now used for the representation of a"
" generator (``repr(gen)``). (Contributed by Victor Stinner in "
":issue:`21205`.)"
msgstr ""
"现在生成器的 ``__name__`` 属性是根据函数名设置的，而不是根据代码名设置的。 请使用 ``gen.gi_code.co_name`` "
"来获取代码名。 生成器还有一个新的 ``__qualname__`` 属性，即限定名称，它现在用于生成器的表示形式 (``repr(gen)``)。 "
"（由 Victor Stinner 在 :issue:`21205` 中贡献。）"

#: ../../whatsnew/3.5.rst:2420
msgid ""
"The deprecated \"strict\" mode and argument of "
":class:`~html.parser.HTMLParser`, :meth:`!HTMLParser.error`, and the "
":exc:`!HTMLParserError` exception have been removed.  (Contributed by Ezio "
"Melotti in :issue:`15114`.) The *convert_charrefs* argument of "
":class:`~html.parser.HTMLParser` is now ``True`` by default.  (Contributed "
"by Berker Peksag in :issue:`21047`.)"
msgstr ""
"已弃用的 \"strict\" 模式和 :class:`~html.parser.HTMLParser`, "
":meth:`!HTMLParser.error` 和 :exc:`!HTMLParserError` 异常参数已被移除。 （由 Ezio "
"Melotti 在 :issue:`15114` 中贡献。） 现在 :class:`~html.parser.HTMLParser` 的 "
"*convert_charrefs* 参数默认为 ``True``。 （由 Berker Peksag 在 :issue:`21047` 中贡献。）"

#: ../../whatsnew/3.5.rst:2426
msgid ""
"Although it is not formally part of the API, it is worth noting for porting "
"purposes (ie: fixing tests) that error messages that were previously of the "
"form \"'sometype' does not support the buffer protocol\" are now of the form"
" \"a :term:`bytes-like object` is required, not 'sometype'\". (Contributed "
"by Ezio Melotti in :issue:`16518`.)"
msgstr ""
"虽然不是 API 的正式组成部分，但对于移植目的（例如：修复测试）来说需要注意之前 \"'sometype' does not support the "
"buffer protocol\" 形式的错误消息现在将为 \"a :term:`bytes-like object` is required, not"
" 'sometype'\" 形式。 （由 Ezio Melotti 在 :issue:`16518` 中贡献。）"

#: ../../whatsnew/3.5.rst:2432
msgid ""
"If the current directory is set to a directory that no longer exists then "
":exc:`FileNotFoundError` will no longer be raised and instead "
":meth:`~importlib.machinery.FileFinder.find_spec` will return ``None`` "
"**without** caching ``None`` in :data:`sys.path_importer_cache`, which is "
"different than the typical case (:issue:`22834`)."
msgstr ""
"在当前目录被设为已不存在的目录时将不再引发 :exc:`FileNotFoundError` 而是改为 "
":meth:`~importlib.machinery.FileFinder.find_spec` 返回 ``None`` 并且 **不在** "
":data:`sys.path_importer_cache` 中缓存 ``None``，这与典型的场景存在区别 (:issue:`22834`)。"

#: ../../whatsnew/3.5.rst:2438
msgid ""
"HTTP status code and messages from :mod:`http.client` and :mod:`http.server`"
" were refactored into a common :class:`~http.HTTPStatus` enum.  The values "
"in :mod:`http.client` and :mod:`http.server` remain available for backwards "
"compatibility.  (Contributed by Demian Brecht in :issue:`21793`.)"
msgstr ""
":mod:`http.client` 和 :mod:`http.server` 中的 HTTP 状态码和消息被重构为一个通用的 "
":class:`~http.HTTPStatus` 枚举。 :mod:`http.client` 和 :mod:`http.server` "
"中的值仍可被用于向下兼容性。 （由 Demian Brecht 在 :issue:`21793` 中贡献。）"

#: ../../whatsnew/3.5.rst:2443
msgid ""
"When an import loader defines :meth:`importlib.machinery.Loader.exec_module`"
" it is now expected to also define "
":meth:`~importlib.machinery.Loader.create_module` (raises a "
":exc:`DeprecationWarning` now, will be an error in Python 3.6). If the "
"loader inherits from :class:`importlib.abc.Loader` then there is nothing to "
"do, else simply define :meth:`~importlib.machinery.Loader.create_module` to "
"return ``None``.  (Contributed by Brett Cannon in :issue:`23014`.)"
msgstr ""
"现在当一个导入加载器定义了 :meth:`importlib.machinery.Loader.exec_module` 时它也应该定义 "
":meth:`~importlib.machinery.Loader.create_module` (现在会引发 "
":exc:`DeprecationWarning`，在 Python 3.6 中将引发错误)。 如果加载器是继承自 "
":class:`importlib.abc.Loader` 那么就不需要做什么，在其他情况下只须定义 "
":meth:`~importlib.machinery.Loader.create_module` 来返回 ``None``。 （由 Brett "
"Cannon 在 :issue:`23014` 中贡献。）"

#: ../../whatsnew/3.5.rst:2451
msgid ""
"The :func:`re.split` function always ignored empty pattern matches, so the "
"``\"x*\"`` pattern worked the same as ``\"x+\"``, and the ``\"\\b\"`` "
"pattern never worked.  Now :func:`re.split` raises a warning if the pattern "
"could match an empty string.  For compatibility, use patterns that never "
"match an empty string (e.g. ``\"x+\"`` instead of ``\"x*\"``).  Patterns "
"that could only match an empty string (such as ``\"\\b\"``) now raise an "
"error. (Contributed by Serhiy Storchaka in :issue:`22818`.)"
msgstr ""
":func:`re.split` 函数总是会忽略空的模式匹配，因此 ``\"x*\"`` 模式的效果与 ``\"x+\"`` 相同，而 "
"``\"\\b\"`` 模式则没有效果。 现在当模式将匹配空字符串时 :func:`re.split` 会引发一个警告。 "
"为保持兼容性，请使用绝不会匹配空字符串的模式 (例如使用 ``\"x+\"`` 而不是 ``\"x*\"``)。 只匹配空字符串的模式 (例如 "
"``\"\\b\"``) 现在会引发一个错误。 （由 Serhiy Storchaka 在 :issue:`22818` 中贡献。）"

#: ../../whatsnew/3.5.rst:2459
msgid ""
"The :class:`http.cookies.Morsel` dict-like interface has been made self "
"consistent:  morsel comparison now takes the "
":attr:`~http.cookies.Morsel.key` and :attr:`~http.cookies.Morsel.value` into"
" account, :meth:`~http.cookies.Morsel.copy` now results in a "
":class:`~http.cookies.Morsel` instance rather than a :class:`dict`, and "
":meth:`~http.cookies.Morsel.update` will now raise an exception if any of "
"the keys in the update dictionary are invalid.  In addition, the "
"undocumented *LegalChars* parameter of :func:`~http.cookies.Morsel.set` is "
"deprecated and is now ignored.  (Contributed by Demian Brecht in "
":issue:`2211`.)"
msgstr ""
":class:`http.cookies.Morsel` 字典型接口已更为自洽：morsel 比较现在会将 "
":attr:`~http.cookies.Morsel.key` 和 :attr:`~http.cookies.Morsel.value` "
"都纳入考虑，:meth:`~http.cookies.Morsel.copy` 现在将得到一个 "
":class:`~http.cookies.Morsel` 实例而不是 :class:`dict`，而 "
":meth:`~http.cookies.Morsel.update` 现在当更新字典中的任一个键无效时将引发一个异常。 "
"此外，:func:`~http.cookies.Morsel.set` 中未写入文档的 *LegalChars* 形参已被弃用并且现在会被忽略。 （由 "
"Demian Brecht 在 :issue:`2211` 中贡献。）"

#: ../../whatsnew/3.5.rst:2469
msgid ""
":pep:`488` has removed ``.pyo`` files from Python and introduced the "
"optional ``opt-`` tag in ``.pyc`` file names. The "
":func:`importlib.util.cache_from_source` has gained an *optimization* "
"parameter to help control the ``opt-`` tag. Because of this, the "
"*debug_override* parameter of the function is now deprecated. ``.pyo`` files"
" are also no longer supported as a file argument to the Python interpreter "
"and thus serve no purpose when distributed on their own (i.e. sourceless "
"code distribution). Due to the fact that the magic number for bytecode has "
"changed in Python 3.5, all old ``.pyo`` files from previous versions of "
"Python are invalid regardless of this PEP."
msgstr ""
":pep:`488` 从 Python 中移除了``.pyo`` 文件并在 ``.pyc`` 文件名中引入可选的 ``opt-`` 标签。 "
":func:`importlib.util.cache_from_source` 增加了 *optimization* 形参以协助控制 ``opt-``"
" 标签。 为此，该函数的 *debug_override* 形参现在已被弃用。 ``.pyo`` 文件也已不再可以作为传给 Python "
"解释器的文件参数并且在单独分发（即不带源码的代码分发）时将不起作用。 由于在 Python 3.5 中字节码的魔术数字已被改变，即使在不考虑此 PEP "
"的情况下所有之前版本的 Python 的旧 ``.pyo`` 文件都已不可用。"

#: ../../whatsnew/3.5.rst:2480
msgid ""
"The :mod:`socket` module now exports the :const:`~socket.CAN_RAW_FD_FRAMES` "
"constant on linux 3.6 and greater."
msgstr ""
"现在 :mod:`socket` 模块会在 linux 3.6 或更高版本上导出 :const:`~socket.CAN_RAW_FD_FRAMES` "
"常量。"

#: ../../whatsnew/3.5.rst:2483
msgid ""
"The :func:`ssl.cert_time_to_seconds` function now interprets the input time "
"as UTC and not as local time, per :rfc:`5280`.  Additionally, the return "
"value is always an :class:`int`. (Contributed by Akira Li in "
":issue:`19940`.)"
msgstr ""
"根据 :rfc:`5280`，现在 :func:`ssl.cert_time_to_seconds` 函数会将输入的时间解读为 UTC 而不是本地时间。"
" 此外，其返回值必须为 :class:`int`。 （由 Akira Li 在 :issue:`19940` 中贡献。）"

#: ../../whatsnew/3.5.rst:2487
msgid ""
"The ``pygettext.py`` Tool now uses the standard +NNNN format for timezones "
"in the POT-Creation-Date header."
msgstr "现在 ``pygettext.py`` 工具将为 POT-Creation-Date 标头中的时区使用标准的 +NNNN 格式。"

#: ../../whatsnew/3.5.rst:2490
msgid ""
"The :mod:`smtplib` module now uses :data:`sys.stderr` instead of the "
"previous module-level :data:`stderr` variable for debug output.  If your "
"(test) program depends on patching the module-level variable to capture the "
"debug output, you will need to update it to capture sys.stderr instead."
msgstr ""
"现在 :mod:`smtplib` 模块对于调试输出将使用 :data:`sys.stderr` 而不是之前的模块级 :data:`stderr` "
"变量。 如果你的（测试）程序依赖于对模块级变量打补丁来捕获调试输出，你将需要更新代码将其改为捕获 sys.stderr。"

#: ../../whatsnew/3.5.rst:2495
msgid ""
"The :meth:`str.startswith` and :meth:`str.endswith` methods no longer return"
" ``True`` when finding the empty string and the indexes are completely out "
"of range.  (Contributed by Serhiy Storchaka in :issue:`24284`.)"
msgstr ""
"当发现空字符串且索引完全超出范围时 :meth:`str.startswith` 和 :meth:`str.endswith` 方法将不再返回 "
"``True``。 （由 Serhiy Storchaka 在 :issue:`24284` 中贡献。）"

#: ../../whatsnew/3.5.rst:2499
msgid ""
"The :func:`inspect.getdoc` function now returns documentation strings "
"inherited from base classes.  Documentation strings no longer need to be "
"duplicated if the inherited documentation is appropriate.  To suppress an "
"inherited string, an empty string must be specified (or the documentation "
"may be filled in).  This change affects the output of the :mod:`pydoc` "
"module and the :func:`help` function. (Contributed by Serhiy Storchaka in "
":issue:`15582`.)"
msgstr ""
"现在 :func:`inspect.getdoc` 将返回从基类继承的文档字符串。 如果继承的文档字符串可用就不需要再复制文档字符串。 "
"要屏蔽继承的字符串，必须指定一个空字符串（否则将会填充文档）。 此项改变将影响 :mod:`pydoc` 模块和 :func:`help` 函数的输出。"
" （由 Serhiy Storchaka 在 :issue:`15582` 中贡献。）"

#: ../../whatsnew/3.5.rst:2507
msgid ""
"Nested :func:`functools.partial` calls are now flattened.  If you were "
"relying on the previous behavior, you can now either add an attribute to a "
":func:`functools.partial` object or you can create a subclass of "
":func:`functools.partial`. (Contributed by Alexander Belopolsky in "
":issue:`7830`.)"
msgstr ""
"嵌套的 :func:`functools.partial` 调用现在已被展平。 如果你需要之前的行为，现在你可以为 "
":func:`functools.partial` 对象添加一个属性或者创建一个 :func:`functools.partial` 的子类。 （由 "
"Alexander Belopolsky 在 :issue:`7830` 中贡献。）"

#: ../../whatsnew/3.5.rst:2514
msgid "Changes in the C API"
msgstr "C API 的变化"

#: ../../whatsnew/3.5.rst:2516
msgid ""
"The undocumented :c:member:`!format` member of the (non-public) "
":c:type:`PyMemoryViewObject` structure has been removed. All extensions "
"relying on the relevant parts in ``memoryobject.h`` must be rebuilt."
msgstr ""
"(非公开) :c:type:`PyMemoryViewObject` 结构体中未写入文档的 :c:member:`!format` 成员已被移除。  "
"所有依赖于 ``memoryobject.h`` 中相关部分的扩展都必须重新编译。"

#: ../../whatsnew/3.5.rst:2521
msgid ""
"The :c:type:`PyMemAllocator` structure was renamed to "
":c:type:`PyMemAllocatorEx` and a new ``calloc`` field was added."
msgstr ""
" :c:type:`PyMemAllocator` 结构被重命名为 :c:type:`PyMemAllocatorEx` 并且添加了一个字段 "
"``calloc`` 。"

#: ../../whatsnew/3.5.rst:2524
msgid ""
"Removed non-documented macro :c:macro:`!PyObject_REPR()` which leaked "
"references. Use format character ``%R`` in "
":c:func:`PyUnicode_FromFormat`-like functions to format the :func:`repr` of "
"the object. (Contributed by Serhiy Storchaka in :issue:`22453`.)"
msgstr ""
"移除了会泄漏引用的未写入文档的宏 :c:macro:`!PyObject_REPR()`。请在 "
":c:func:`PyUnicode_FromFormat` 之类的函数中使用格式符 ``%R`` 来格式化对象的 :func:`repr`。 （由 "
"Serhiy Storchaka 在 :issue:`22453` 中贡献。）"

#: ../../whatsnew/3.5.rst:2529
msgid ""
"Because the lack of the :attr:`__module__` attribute breaks pickling and "
"introspection, a deprecation warning is now raised for builtin types without"
" the :attr:`__module__` attribute.  This would be an AttributeError in the "
"future. (Contributed by Serhiy Storchaka in :issue:`20204`.)"
msgstr ""
"由于缺少 :attr:`__module__` 属性会破坏封存和内省特性，现在对于没有 :attr:`__module__` "
"属性的内置类型会引发弃用警告。 这在将来会改为 AttributeError。 （由 Serhiy Storchaka 在 :issue:`20204`"
" 中贡献。）"

#: ../../whatsnew/3.5.rst:2535
msgid ""
"As part of the :pep:`492` implementation, the ``tp_reserved`` slot of "
":c:type:`PyTypeObject` was replaced with a "
":c:member:`~PyTypeObject.tp_as_async` slot.  Refer to :ref:`coro-objects` "
"for new types, structures and functions."
msgstr ""
"作为 :pep:`492` 实现的一部分，:c:type:`PyTypeObject` 的 ``tp_reserved`` 槽位被替换为 "
":c:member:`~PyTypeObject.tp_as_async` 槽位。 请参看 :ref:`coro-objects` "
"了解相关的新类型、结构体和函数。"

#: ../../whatsnew/3.5.rst:2542
msgid "Notable changes in Python 3.5.4"
msgstr "Python 3.5.4 的显著变化"

#: ../../whatsnew/3.5.rst:2545
msgid "New ``make regen-all`` build target"
msgstr "新增 ``make regen-all`` 构建目标"

#: ../../whatsnew/3.5.rst:2547
msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be "
"compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to implicitly"
" recompile generated files based on file modification times."
msgstr ""
"为了简化交叉编译，并确保 CPython 能够可靠地编译而不需要已存在可用的 Python 版本，基于 autotools "
"的构建系统将不再尝试根据文件修改时间隐式地重新编译已生成的文件。"

#: ../../whatsnew/3.5.rst:2552
msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version of "
"Python has already been built based on the pregenerated versions)."
msgstr ""
"取而代之的是，新增了一个 ``make regen-all`` 命令以便在需要时强制重新生成这些文件（例如在基于预生成版本构建了 Python "
"的初始版本之后）。"

#: ../../whatsnew/3.5.rst:2556
msgid ""
"More selective regeneration targets are also defined - see "
":source:`Makefile.pre.in` for details."
msgstr "还定义了其他一些更具选择性的重生成目标 —— 详情参见 :source:`Makefile.pre.in`。"

#: ../../whatsnew/3.5.rst:2559 ../../whatsnew/3.5.rst:2572
msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr "（由 Victor Stinner 在 :issue:`23404` 中贡献。）"

#: ../../whatsnew/3.5.rst:2565
msgid "Removal of ``make touch`` build target"
msgstr "移除了 ``make touch`` 构建目标"

#: ../../whatsnew/3.5.rst:2567
msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr "之前用于通过更新生成文件的修改时间来请求隐式的重新生成这些文件的 ``make touch`` 构建目标已被移除。"

#: ../../whatsnew/3.5.rst:2570
msgid "It has been replaced by the new ``make regen-all`` target."
msgstr "它已被新的 ``make regen-all`` 目标所替代。"
