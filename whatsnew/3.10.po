# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-25 18:10+0000\n"
"PO-Revision-Date: 2025-07-18 20:10+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.10.rst:3
msgid "What's New In Python 3.10"
msgstr "Python 3.10 有什么新变化"

#: ../../whatsnew/3.10.rst:0
msgid "Release"
msgstr "发布版本"

#: ../../whatsnew/3.10.rst:5
msgid "|release|"
msgstr "|release|"

#: ../../whatsnew/3.10.rst:0
msgid "Date"
msgstr "日期"

#: ../../whatsnew/3.10.rst:6
msgid "|today|"
msgstr "|today|"

#: ../../whatsnew/3.10.rst:0
msgid "Editor"
msgstr "编者"

#: ../../whatsnew/3.10.rst:7
msgid "Pablo Galindo Salgado"
msgstr "Pablo Galindo Salgado"

#: ../../whatsnew/3.10.rst:49
msgid ""
"This article explains the new features in Python 3.10, compared to 3.9. "
"Python 3.10 was released on October 4, 2021. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""
"这篇文章介绍了 Python 3.10 相比 3.9 增加的新特性。 Python 3.10 发布于 2021 年 10 月 14 日。 "
"更详细的信息可参阅 :ref:`更新日志 <changelog>`。"

#: ../../whatsnew/3.10.rst:54
msgid "Summary -- Release highlights"
msgstr "摘要 -- 发布重点"

#: ../../whatsnew/3.10.rst:62
msgid "New syntax features:"
msgstr "新的语法特性："

#: ../../whatsnew/3.10.rst:64
msgid ":pep:`634`, Structural Pattern Matching: Specification"
msgstr ":pep:`634`, 结构化模式匹配: 规范说明"

#: ../../whatsnew/3.10.rst:65
msgid ":pep:`635`, Structural Pattern Matching: Motivation and Rationale"
msgstr ":pep:`635`, 结构化模式匹配: 动机与理由"

#: ../../whatsnew/3.10.rst:66
msgid ":pep:`636`, Structural Pattern Matching: Tutorial"
msgstr ":pep:`636`, 结构化模式匹配: 教程"

#: ../../whatsnew/3.10.rst:67
msgid ""
":issue:`12782`, Parenthesized context managers are now officially allowed."
msgstr ":issue:`12782`，加圆括号的上下文管理器现在正式被允许使用。"

#: ../../whatsnew/3.10.rst:69
msgid "New features in the standard library:"
msgstr "标准库中的新特性:"

#: ../../whatsnew/3.10.rst:71
msgid ":pep:`618`, Add Optional Length-Checking To zip."
msgstr ":pep:`618`，向 zip 添加可选的长度检查。"

#: ../../whatsnew/3.10.rst:73
msgid "Interpreter improvements:"
msgstr "解释器的改进:"

#: ../../whatsnew/3.10.rst:75
msgid ":pep:`626`, Precise line numbers for debugging and other tools."
msgstr ":pep:`626`，在调试和其他工具中使用精确的行号。"

#: ../../whatsnew/3.10.rst:77
msgid "New typing features:"
msgstr "新的类型标注特性："

#: ../../whatsnew/3.10.rst:79
msgid ":pep:`604`, Allow writing union types as X | Y"
msgstr ":pep:`604`，允许 X | Y 形式的联合类型写法"

#: ../../whatsnew/3.10.rst:80
msgid ":pep:`612`, Parameter Specification Variables"
msgstr ":pep:`612`，形参规格变量"

#: ../../whatsnew/3.10.rst:81
msgid ":pep:`613`, Explicit Type Aliases"
msgstr ":pep:`613`，显式类型别名"

#: ../../whatsnew/3.10.rst:82
msgid ":pep:`647`, User-Defined Type Guards"
msgstr ":pep:`647`，用户自定义的类型保护器"

#: ../../whatsnew/3.10.rst:84
msgid "Important deprecations, removals or restrictions:"
msgstr "重要的弃用、移除或限制："

#: ../../whatsnew/3.10.rst:86
msgid ":pep:`644`, Require OpenSSL 1.1.1 or newer"
msgstr ":pep:`644`，要求 OpenSSL 1.1.1 或更新的版本"

#: ../../whatsnew/3.10.rst:87
msgid ":pep:`632`, Deprecate distutils module."
msgstr ":pep:`632`，弃用 distutils 模块。"

#: ../../whatsnew/3.10.rst:88
msgid ""
":pep:`623`, Deprecate and prepare for the removal of the wstr member in "
"PyUnicodeObject."
msgstr ":pep:`623`，弃用并准备移除 PyUnicodeObject 中的 wstr 成员。"

#: ../../whatsnew/3.10.rst:89
msgid ":pep:`624`, Remove Py_UNICODE encoder APIs"
msgstr ":pep:`624`，移除 Py_UNICODE 编码器 API"

#: ../../whatsnew/3.10.rst:90
msgid ":pep:`597`, Add optional EncodingWarning"
msgstr ":pep:`597`，增加可选的 EncodingWarning"

#: ../../whatsnew/3.10.rst:94 ../../whatsnew/3.10.rst:2054
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.10.rst:99
msgid "Parenthesized context managers"
msgstr "带圆括号的上下文管理器"

#: ../../whatsnew/3.10.rst:101
msgid ""
"Using enclosing parentheses for continuation across multiple lines in "
"context managers is now supported. This allows formatting a long collection "
"of context managers in multiple lines in a similar way as it was previously "
"possible with import statements. For instance, all these examples are now "
"valid:"
msgstr ""
"现在已支持使用外层圆括号来使多个上下文管理器可以连续多行地书写。 这允许将过长的上下文管理器集能够以与之前 import "
"语句类似的方式格式化为多行的形式。 例如，以下这些示例写法现在都是有效的:"

#: ../../whatsnew/3.10.rst:132
msgid ""
"it is also possible to use a trailing comma at the end of the enclosed "
"group:"
msgstr "在被包含的分组末尾过可以使用一个逗号作为结束："

#: ../../whatsnew/3.10.rst:144
msgid ""
"This new syntax uses the non LL(1) capacities of the new parser. Check "
":pep:`617` for more details."
msgstr "这个新语法使用了新解析器的非 LL(1) 功能。 请查看 :pep:`617` 来了解更多细节。"

#: ../../whatsnew/3.10.rst:147
msgid ""
"(Contributed by Guido van Rossum, Pablo Galindo and Lysandros Nikolaou in "
":issue:`12782` and :issue:`40334`.)"
msgstr ""
"（由 Guido van Rossum, Pablo Galindo 和 Lysandros Nikolaou 在 :issue:`12782` 和 "
":issue:`40334` 中贡献。）"

#: ../../whatsnew/3.10.rst:152
msgid "Better error messages"
msgstr "更清楚的错误消息"

#: ../../whatsnew/3.10.rst:155
msgid "SyntaxErrors"
msgstr "SyntaxError"

#: ../../whatsnew/3.10.rst:157
msgid ""
"When parsing code that contains unclosed parentheses or brackets the "
"interpreter now includes the location of the unclosed bracket of parentheses"
" instead of displaying *SyntaxError: unexpected EOF while parsing* or "
"pointing to some incorrect location. For instance, consider the following "
"code (notice the unclosed '{'):"
msgstr ""
"现在当解析包含有未关闭括号的代码时解释器会包括未关闭括号的位置而不是显示 *SyntaxError: unexpected EOF while "
"parsing* 并指向某个不正确的位置。 例如，考虑以下代码（注意未关闭的 “ { ”）："

#: ../../whatsnew/3.10.rst:168
msgid ""
"Previous versions of the interpreter reported confusing places as the "
"location of the syntax error:"
msgstr "之前版本的解释器会报告令人迷惑的语法错误位置："

#: ../../whatsnew/3.10.rst:178
msgid "but in Python 3.10 a more informative error is emitted:"
msgstr "但在 Python 3.10 中则会发出信息量更多的错误提示："

#: ../../whatsnew/3.10.rst:188
msgid ""
"In a similar way, errors involving unclosed string literals (single and "
"triple quoted) now point to the start of the string instead of reporting "
"EOF/EOL."
msgstr "类似地，涉及未关闭字符串字面值 (单重引号和三重引号) 的错误现在会指向字符串的开头而不是报告 EOF/EOL。"

#: ../../whatsnew/3.10.rst:191
msgid ""
"These improvements are inspired by previous work in the PyPy interpreter."
msgstr "这些改进的灵感来自 PyPy 解释器之前所进行的工作。"

#: ../../whatsnew/3.10.rst:193
msgid ""
"(Contributed by Pablo Galindo in :issue:`42864` and Batuhan Taskaya in "
":issue:`40176`.)"
msgstr ""
"（由 Pablo Galindo 在 :issue:`42864` 以及 Batuhan Taskaya 在 :issue:`40176` 中贡献。）"

#: ../../whatsnew/3.10.rst:196
msgid ""
":exc:`SyntaxError` exceptions raised by the interpreter will now highlight "
"the full error range of the expression that constitutes the syntax error "
"itself, instead of just where the problem is detected. In this way, instead "
"of displaying (before Python 3.10):"
msgstr ""
"解释器所引发的 :exc:`SyntaxError` 异常现在将高亮构成语法错误本身的完整异常错误内容，而不是仅提示检测到问题的位置。 这样，不再（同 "
"Python 3.10 之前那样）仅显示："

#: ../../whatsnew/3.10.rst:209
msgid "now Python 3.10 will display the exception as:"
msgstr "现在 Python 3.10 将这样显示异常："

#: ../../whatsnew/3.10.rst:219
msgid "This improvement was contributed by Pablo Galindo in :issue:`43914`."
msgstr "这个改进是由 Pablo Galindo 在 :issue:`43914` 中贡献的。"

#: ../../whatsnew/3.10.rst:221
msgid ""
"A considerable amount of new specialized messages for :exc:`SyntaxError` "
"exceptions have been incorporated. Some of the most notable ones are as "
"follows:"
msgstr "大量新增的专门化 :exc:`SyntaxError` 异常消息已被添加。 其中最主要的一些如下所示："

#: ../../whatsnew/3.10.rst:224
msgid "Missing ``:`` before blocks:"
msgstr "在代码块之前缺失 ``:``："

#: ../../whatsnew/3.10.rst:234
msgid "(Contributed by Pablo Galindo in :issue:`42997`.)"
msgstr "（由 Pablo Galindo 在 :issue:`42997` 中贡献。）"

#: ../../whatsnew/3.10.rst:236
msgid "Unparenthesised tuples in comprehensions targets:"
msgstr "在推导式的目标中有不带圆括号的元组:"

#: ../../whatsnew/3.10.rst:246
msgid "(Contributed by Pablo Galindo in :issue:`43017`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43017` 中贡献。）"

#: ../../whatsnew/3.10.rst:248
msgid "Missing commas in collection literals and between expressions:"
msgstr "在多项集字面值中和表达式之间缺失逗号:"

#: ../../whatsnew/3.10.rst:261
msgid "(Contributed by Pablo Galindo in :issue:`43822`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43822` 中贡献。）"

#: ../../whatsnew/3.10.rst:263
msgid "Multiple Exception types without parentheses:"
msgstr "多个异常类型不带圆括号："

#: ../../whatsnew/3.10.rst:275
msgid "(Contributed by Pablo Galindo in :issue:`43149`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43149` 中贡献。）"

#: ../../whatsnew/3.10.rst:277
msgid "Missing ``:`` and values in dictionary literals:"
msgstr "字典字面值中缺失 ``:`` 和值："

#: ../../whatsnew/3.10.rst:297
msgid "(Contributed by Pablo Galindo in :issue:`43823`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43823` 中贡献。）"

#: ../../whatsnew/3.10.rst:299
msgid "``try`` blocks without ``except`` or ``finally`` blocks:"
msgstr "``try`` 代码块不带 ``except`` 或 ``finally`` 代码块:"

#: ../../whatsnew/3.10.rst:311
msgid "(Contributed by Pablo Galindo in :issue:`44305`.)"
msgstr "（由 Pablo Galindo 在 :issue:`44305` 中贡献。）"

#: ../../whatsnew/3.10.rst:313
msgid "Usage of ``=`` instead of ``==`` in comparisons:"
msgstr "在比较中使用 ``=`` 而不是 ``==``："

#: ../../whatsnew/3.10.rst:323
msgid "(Contributed by Pablo Galindo in :issue:`43797`.)"
msgstr "（由 Pablo Galindo 在 :issue:`43797` 中贡献。）"

#: ../../whatsnew/3.10.rst:325
msgid "Usage of ``*`` in f-strings:"
msgstr "在 f-字符串中使用 ``*``："

#: ../../whatsnew/3.10.rst:335
msgid "(Contributed by Pablo Galindo in :issue:`41064`.)"
msgstr "（由 Pablo Galindo 在 :issue:`41064` 中贡献。）"

#: ../../whatsnew/3.10.rst:338
msgid "IndentationErrors"
msgstr "IndentationError"

#: ../../whatsnew/3.10.rst:340
msgid ""
"Many :exc:`IndentationError` exceptions now have more context regarding what"
" kind of block was expecting an indentation, including the location of the "
"statement:"
msgstr "许多 :exc:`IndentationError` 异常现在具有更多上下文来提示是何种代码块需要缩进，包括语句的位置："

#: ../../whatsnew/3.10.rst:355
msgid "AttributeErrors"
msgstr "AttributeError"

#: ../../whatsnew/3.10.rst:357
msgid ""
"When printing :exc:`AttributeError`, :c:func:`PyErr_Display` will offer "
"suggestions of similar attribute names in the object that the exception was "
"raised from:"
msgstr ""
"当打印 :exc:`AttributeError` 时，:c:func:`PyErr_Display` 将提供引发异常的对象中类似属性名称的建议："

#: ../../whatsnew/3.10.rst:368 ../../whatsnew/3.10.rst:390
msgid "(Contributed by Pablo Galindo in :issue:`38530`.)"
msgstr "（由 Pablo Galindo 在 :issue:`38530` 中贡献。）"

#: ../../whatsnew/3.10.rst:371
msgid ""
"Notice this won't work if :c:func:`PyErr_Display` is not called to display "
"the error which can happen if some other custom error display function is "
"used. This is a common scenario in some REPLs like IPython."
msgstr ""
"请注意如果未调用 :c:func:`PyErr_Display` 来显示错误则此特性将没有效果，这可能发生在使用了某些其他自定义错误显示函数的时候。 "
"这在某些 REPL 例如 IPython 上是一种常见的情况。"

#: ../../whatsnew/3.10.rst:376
msgid "NameErrors"
msgstr "NameError"

#: ../../whatsnew/3.10.rst:378
msgid ""
"When printing :exc:`NameError` raised by the interpreter, "
":c:func:`PyErr_Display` will offer suggestions of similar variable names in "
"the function that the exception was raised from:"
msgstr ""
"当打印解释器所引发的 :exc:`NameError` 时，:c:func:`PyErr_Display` 将提供引发异常的函数中类似变量名称的建议："

#: ../../whatsnew/3.10.rst:393
msgid ""
"Notice this won't work if :c:func:`PyErr_Display` is not called to display "
"the error, which can happen if some other custom error display function is "
"used. This is a common scenario in some REPLs like IPython."
msgstr ""
"请注意如果未调用 :c:func:`PyErr_Display` 来显示错误则此特性将没有效果，这可能发生在使用了某些其他自定义错误显示函数的时候。 "
"这在某些 REPL 例如 IPython 中是一种常见的情况。"

#: ../../whatsnew/3.10.rst:399
msgid "PEP 626: Precise line numbers for debugging and other tools"
msgstr "PEP 626：在调试和其他工具中使用精确的行号"

#: ../../whatsnew/3.10.rst:401
msgid ""
"PEP 626 brings more precise and reliable line numbers for debugging, "
"profiling and coverage tools. Tracing events, with the correct line number, "
"are generated for all lines of code executed and only for lines of code that"
" are executed."
msgstr ""
"PEP 626 带来了更精确可靠的行号用于调试、性能分析和测试工具。 所有被执行的代码行都会并且只有被执行的代码行才会生成带有正确行号的追踪事件。"

#: ../../whatsnew/3.10.rst:404
msgid ""
"The ``f_lineno`` attribute of frame objects will always contain the expected"
" line number."
msgstr "帧对象的 ``f_lineno`` 属性将总是包含预期的行号。"

#: ../../whatsnew/3.10.rst:406
msgid ""
"The ``co_lnotab`` attribute of code objects is deprecated and will be "
"removed in 3.12. Code that needs to convert from offset to line number "
"should use the new ``co_lines()`` method instead."
msgstr ""
"代码对象的 ``co_lnotab`` 属性已被弃用并将在 3.12 中被移除。 需要从偏移量转换为行号的代码应改用新的 ``co_lines()`` "
"方法。"

#: ../../whatsnew/3.10.rst:410
msgid "PEP 634: Structural Pattern Matching"
msgstr "PEP 634：结构化模式匹配"

#: ../../whatsnew/3.10.rst:412
msgid ""
"Structural pattern matching has been added in the form of a *match "
"statement* and *case statements* of patterns with associated actions. "
"Patterns consist of sequences, mappings, primitive data types as well as "
"class instances. Pattern matching enables programs to extract information "
"from complex data types, branch on the structure of data, and apply specific"
" actions based on different forms of data."
msgstr ""
"增加了采用模式加上相应动作的 *match 语句* 和 *case 语句* 的形式的结构化模式匹配。 模式由序列、映射、基本数据类型以及类实例构成。 "
"模式匹配使得程序能够从复杂的数据类型中提取信息、根据数据结构实现分支，并基于不同的数据形式应用特定的动作。"

#: ../../whatsnew/3.10.rst:420
msgid "Syntax and operations"
msgstr "语法与操作"

#: ../../whatsnew/3.10.rst:422
msgid "The generic syntax of pattern matching is::"
msgstr "模式匹配的通用语法如下::"

#: ../../whatsnew/3.10.rst:434
msgid ""
"A match statement takes an expression and compares its value to successive "
"patterns given as one or more case blocks.  Specifically, pattern matching "
"operates by:"
msgstr "match 语句接受一个表达式并将其值与以一个或多个 case 语句块形式给出的一系列模式进行比较。 具体来说，模式匹配的操作如下："

#: ../../whatsnew/3.10.rst:438
msgid "using data with type and shape (the ``subject``)"
msgstr "使用具有特定类型和形状的数据 (``subject``)"

#: ../../whatsnew/3.10.rst:439
msgid "evaluating the ``subject`` in the ``match`` statement"
msgstr "针对 ``subject`` 在 ``match`` 语句中求值"

#: ../../whatsnew/3.10.rst:440
msgid ""
"comparing the subject with each pattern in a ``case`` statement from top to "
"bottom until a match is confirmed."
msgstr "从上到下对 subject 与 ``case`` 语句中的每个模式进行比较直到确认匹配到一个模式。"

#: ../../whatsnew/3.10.rst:442
msgid ""
"executing the action associated with the pattern of the confirmed match"
msgstr "执行与被确认匹配的模式相关联的动作。"

#: ../../whatsnew/3.10.rst:444
msgid ""
"If an exact match is not confirmed, the last case, a wildcard ``_``, if "
"provided, will be used as the matching case. If an exact match is not "
"confirmed and a wildcard case does not exist, the entire match block is a "
"no-op."
msgstr ""
"如果没有确认到一个完全的匹配，则如果提供了使用通配符 ``_`` 的最后一个 case 语句，则它将被用作已匹配模式。 "
"如果没有确认到一个完全的匹配并且不存在使用通配符的 case 语句，则整个 match 代码块不执行任何操作。"

#: ../../whatsnew/3.10.rst:450
msgid "Declarative approach"
msgstr "声明性方式"

#: ../../whatsnew/3.10.rst:452
msgid ""
"Readers may be aware of pattern matching through the simple example of "
"matching a subject (data object) to a literal (pattern) with the switch "
"statement found in C, Java or JavaScript (and many other languages). Often "
"the switch statement is used for comparison of an object/expression with "
"case statements containing literals."
msgstr ""
"读者可能是通过 C, Java 或 JavaScript (以及其他许多语言) 中的 switch 语句将一个目标 (数据对象) 与一个字面值 (模式)"
" 进行匹配的简单例子了解到模式匹配的概念的。 switch 语句常常被用来将一个对象/表达式与包含在 case 语句中的字面值进行比较。"

#: ../../whatsnew/3.10.rst:458
msgid ""
"More powerful examples of pattern matching can be found in languages such as"
" Scala and Elixir. With structural pattern matching, the approach is "
"\"declarative\" and explicitly states the conditions (the patterns) for data"
" to match."
msgstr ""
"更强大的模式匹配例子可以在 Scala 和 Elixir 等语言中找到。 "
"这种结构化模式匹配方式是“声明性”的并且会显式地为所要匹配的数据指定条件（模式）。"

#: ../../whatsnew/3.10.rst:462
msgid ""
"While an \"imperative\" series of instructions using nested \"if\" "
"statements could be used to accomplish something similar to structural "
"pattern matching, it is less clear than the \"declarative\" approach. "
"Instead the \"declarative\" approach states the conditions to meet for a "
"match and is more readable through its explicit patterns. While structural "
"pattern matching can be used in its simplest form comparing a variable to a "
"literal in a case statement, its true value for Python lies in its handling "
"of the subject's type and shape."
msgstr ""
"虽然使用嵌套的“if”语句的“命令性”系列指令可以被用来完成类似结构化模式匹配的效果，但它没有“声明性”方式那样清晰。 "
"相反地，“声明性”方式指定了一个匹配所要满足的条件，并且通过其显式的模式使之更为易读。 虽然结构化模式匹配可以采取将一个变量与一个 case "
"语句中的字面值进行比较的最简单形式来使用，但它对于 Python 的真正价值在于其针对目标类型和形状的处理操作。"

#: ../../whatsnew/3.10.rst:471
msgid "Simple pattern: match to a literal"
msgstr "简单模式：匹配一个字面值"

#: ../../whatsnew/3.10.rst:473
msgid ""
"Let's look at this example as pattern matching in its simplest form: a "
"value, the subject, being matched to several literals, the patterns. In the "
"example below, ``status`` is the subject of the match statement. The "
"patterns are each of the case statements, where literals represent request "
"status codes. The associated action to the case is executed after a match::"
msgstr ""
"让我们把这个例子看作是模式匹配的最简单形式：一个值，即主词，被匹配到几个字面值，即模式。在下面的例子中，``status`` "
"是匹配语句的主词。模式是每个 case 语句，字面值代表请求状态代码。匹配后，将执行与该 case 相关的动作："

#: ../../whatsnew/3.10.rst:490
msgid ""
"If the above function is passed a ``status`` of 418, \"I'm a teapot\" is "
"returned. If the above function is passed a ``status`` of 500, the case "
"statement with ``_`` will match as a wildcard, and \"Something's wrong with "
"the internet\" is returned. Note the last block: the variable name, ``_``, "
"acts as a *wildcard* and insures the subject will always match. The use of "
"``_`` is optional."
msgstr ""
"如果传给上述函数的 ``status`` 为 418，则会返回 \"I'm a teapot\"。 如果传给上述函数的 ``status`` 为 "
"500，则带有 ``_`` 的 case 语句将作为通配符匹配，并会返回 \"Something's wrong with the "
"internet\"。 请注意最后一个代码块：变量名 ``_`` 将作为 *通配符* 并确保目标将总是被匹配。 ``_`` 的使用是可选的。"

#: ../../whatsnew/3.10.rst:497
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr "你可以使用 ``|`` （“ or ”）在一个模式中组合几个字面值::"

#: ../../whatsnew/3.10.rst:503
msgid "Behavior without the wildcard"
msgstr "无通配符的行为"

#: ../../whatsnew/3.10.rst:505
msgid ""
"If we modify the above example by removing the last case block, the example "
"becomes::"
msgstr "如果我们修改上面的例子，去掉最后一个 case 块，这个例子就变成::"

#: ../../whatsnew/3.10.rst:517
msgid ""
"Without the use of ``_`` in a case statement, a match may not exist. If no "
"match exists, the behavior is a no-op. For example, if ``status`` of 500 is "
"passed, a no-op occurs."
msgstr ""
"如果不在 case 语句中使用 ``_``，可能会出现不存在匹配的情况。如果不存在匹配，则行为是一个 no-op。例如，如果传入了值为 500 的 "
"``status`` ，就会发生 no-op。"

#: ../../whatsnew/3.10.rst:522
msgid "Patterns with a literal and variable"
msgstr "带有字面值和变量的模式"

#: ../../whatsnew/3.10.rst:524
msgid ""
"Patterns can look like unpacking assignments, and a pattern may be used to "
"bind variables. In this example, a data point can be unpacked to its "
"x-coordinate and y-coordinate::"
msgstr "模式可以看起来像解包形式，而且模式可以用来绑定变量。在这个例子中，一个数据点可以被解包为它的 x 坐标和 y 坐标::"

#: ../../whatsnew/3.10.rst:541
msgid ""
"The first pattern has two literals, ``(0, 0)``, and may be thought of as an "
"extension of the literal pattern shown above. The next two patterns combine "
"a literal and a variable, and the variable *binds* a value from the subject "
"(``point``).  The fourth pattern captures two values, which makes it "
"conceptually similar to the unpacking assignment ``(x, y) = point``."
msgstr ""
"第一个模式有两个字面值 ``(0, 0)`` ，可以看作是上面所示字面值模式的扩展。接下来的两个模式结合了一个字面值和一个变量，而变量 *绑定* "
"了一个来自主词的值（``point``）。 第四种模式捕获了两个值，这使得它在概念上类似于解包赋值 ``(x, y) = point`` 。"

#: ../../whatsnew/3.10.rst:548
msgid "Patterns and classes"
msgstr "模式和类"

#: ../../whatsnew/3.10.rst:550
msgid ""
"If you are using classes to structure your data, you can use as a pattern "
"the class name followed by an argument list resembling a constructor. This "
"pattern has the ability to capture class attributes into variables::"
msgstr "如果你使用类来结构化你的数据，你可以使用类的名字，后面跟一个类似构造函数的参数列表，作为一种模式。这种模式可以将类的属性捕捉到变量中::"

#: ../../whatsnew/3.10.rst:572
msgid "Patterns with positional parameters"
msgstr "带有位置参数的模式"

#: ../../whatsnew/3.10.rst:574
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\","
" \"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"你可以在某些为其属性提供了排序的内置类（例如 dataclass）中使用位置参数。 你也可以通过在你的类中设置 ``__match_args__`` "
"特殊属性来为模式中的属性定义一个专门的位置。 如果它被设为 (\"x\", \"y\")，则以下模式均为等价的（并且都是将 ``y`` 属性绑定到 "
"``var`` 变量）::"

#: ../../whatsnew/3.10.rst:586
msgid "Nested patterns"
msgstr "嵌套模式"

#: ../../whatsnew/3.10.rst:588
msgid ""
"Patterns can be arbitrarily nested.  For example, if our data is a short "
"list of points, it could be matched like this::"
msgstr "模式可以任意地嵌套。 例如，如果我们的数据是由点组成的短列表，则它可以这样被匹配::"

#: ../../whatsnew/3.10.rst:604
msgid "Complex patterns and the wildcard"
msgstr "复杂模式和通配符"

#: ../../whatsnew/3.10.rst:606
msgid ""
"To this point, the examples have used ``_`` alone in the last case "
"statement. A wildcard can be used in more complex patterns, such as "
"``('error', code, _)``. For example::"
msgstr ""
"到目前为止，这些例子仅在最后一个 case 语句中使用了 ``_``。 但通配符可以被用在更复杂的模式中，例如 ``('error', code, "
"_)``。 举例来说::"

#: ../../whatsnew/3.10.rst:616
msgid ""
"In the above case, ``test_variable`` will match for ('error', code, 100) and"
" ('error', code, 800)."
msgstr ""
"在上述情况下，``test_variable`` 将可匹配 ('error', code, 100) 和 ('error', code, 800)。"

#: ../../whatsnew/3.10.rst:620
msgid "Guard"
msgstr "约束项"

#: ../../whatsnew/3.10.rst:622
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"我们可以向一个模式添加 ``if`` 子句，称为“约束项”。 如果约束项为假值，则 ``match`` 将继续尝试下一个 case 语句块。 "
"请注意值的捕获发生在约束项被求值之前。::"

#: ../../whatsnew/3.10.rst:633
msgid "Other Key Features"
msgstr "其他关键特性"

#: ../../whatsnew/3.10.rst:635
msgid "Several other key features:"
msgstr "一些其他关键特性:"

#: ../../whatsnew/3.10.rst:637
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences. Technically, the subject "
"must be a sequence. Therefore, an important exception is that patterns don't"
" match iterators. Also, to prevent a common mistake, sequence patterns don't"
" match strings."
msgstr ""
"类似于解包赋值，元组和列表模式具有完全相同的含义，而且实际上能匹配任意序列。 从技术上说，目标必须为一个序列。 "
"因而，一个重要的例外是模式不能匹配迭代器。 而且，为了避免一个常见的错误，序列模式不能匹配字符串。"

#: ../../whatsnew/3.10.rst:643
msgid ""
"Sequence patterns support wildcards: ``[x, y, *rest]`` and ``(x, y, *rest)``"
" work similar to wildcards in unpacking assignments.  The name after ``*`` "
"may also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two "
"items without binding the remaining items."
msgstr ""
"序列模式支持通配符: ``[x, y, *rest]`` 和 ``(x, y, *rest)`` 的作用类似于解包赋值中的通配符。 在 ``*`` "
"之后的名称也可以为 ``_``，因此 ``(x, y, *_)`` 可以匹配包含两个条目的序列而不必绑定其余的条目。"

#: ../../whatsnew/3.10.rst:648
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dict.  Unlike sequence "
"patterns, extra keys are ignored.  A wildcard ``**rest`` is also supported."
"  (But ``**_`` would be redundant, so is not allowed.)"
msgstr ""
"映射模式: ``{\"bandwidth\": b, \"latency\": l}`` 会从一个字典中捕获 ``\"bandwidth\"`` 和 "
"``\"latency\"`` 值。 与序列模式不同，额外的键会被忽略。  也支持通配符 ``**rest``。 （但 ``**_`` "
"是冗余的，因而不被允许。）"

#: ../../whatsnew/3.10.rst:653
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "子模式可使用 ``as`` 关键字来捕获::"

#: ../../whatsnew/3.10.rst:657
msgid ""
"This binds x1, y1, x2, y2 like you would expect without the ``as`` clause, "
"and p2 to the entire second item of the subject."
msgstr "x1, y1, x2, y2 等绑定就如你在没有 ``as`` 子句的情况下所期望的，而 p2 会绑定目标的整个第二项。"

#: ../../whatsnew/3.10.rst:660
msgid ""
"Most literals are compared by equality. However, the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr "大多数字面值是按相等性比较的。 但是，单例对象 ``True``, ``False`` 和 ``None`` 则是按标识号比较的。"

#: ../../whatsnew/3.10.rst:663
msgid ""
"Named constants may be used in patterns.  These named constants must be "
"dotted names to prevent the constant from being interpreted as a capture "
"variable::"
msgstr "命名常量也可以在模式中使用。 这些命名常量必须为带点号的名称以防止常量被解读为捕获变量::"

#: ../../whatsnew/3.10.rst:681
msgid ""
"For the full specification see :pep:`634`.  Motivation and rationale are in "
":pep:`635`, and a longer tutorial is in :pep:`636`."
msgstr "完整规格说明参见 :pep:`634`。 动机与理由参见 :pep:`635`，更详细的教程参见 :pep:`636`。"

#: ../../whatsnew/3.10.rst:688
msgid "Optional ``EncodingWarning`` and ``encoding=\"locale\"`` option"
msgstr "可选的 ``EncodingWarning`` 和 ``encoding=\"locale\"`` 选项"

#: ../../whatsnew/3.10.rst:690
msgid ""
"The default encoding of :class:`TextIOWrapper` and :func:`open` is platform "
"and locale dependent. Since UTF-8 is used on most Unix platforms, omitting "
"``encoding`` option when opening UTF-8 files (e.g. JSON, YAML, TOML, "
"Markdown) is a very common bug. For example::"
msgstr ""
":class:`TextIOWrapper` 和 :func:`open` 的默认编码格式取决于具体的平台和语言区域设置。 由于 UTF-8 "
"被用于大多数 Unix 平台，当打开 UTF-8 文件 (例如 JSON, YAML, TOML, Markdown) 时省略 ``encoding``"
" 选项是一个非常常见的错误。 例如::"

#: ../../whatsnew/3.10.rst:699
msgid ""
"To find this type of bug, an optional ``EncodingWarning`` is added. It is "
"emitted when :data:`sys.flags.warn_default_encoding <sys.flags>` is true and"
" locale-specific default encoding is used."
msgstr ""
"为了便于查找此类错误，增加了可选的 ``EncodingWarning``。 它会在 "
":data:`sys.flags.warn_default_encoding <sys.flags>` "
"为真值并使用了语言区域指定的默认编码格式时被发出。"

#: ../../whatsnew/3.10.rst:703
msgid ""
"``-X warn_default_encoding`` option and :envvar:`PYTHONWARNDEFAULTENCODING` "
"are added to enable the warning."
msgstr ""
"增加了 ``-X warn_default_encoding`` 选项和 :envvar:`PYTHONWARNDEFAULTENCODING` "
"来启用相应警告。"

#: ../../whatsnew/3.10.rst:706
msgid "See :ref:`io-text-encoding` for more information."
msgstr "请参阅 :ref:`io-text-encoding` 了解更多信息。"

#: ../../whatsnew/3.10.rst:711
msgid "New Features Related to Type Hints"
msgstr "有关类型提示的新增特性"

#: ../../whatsnew/3.10.rst:713
msgid ""
"This section covers major changes affecting :pep:`484` type hints and the "
":mod:`typing` module."
msgstr "本节介绍了涉及 :pep:`484` 类型提示和 :mod:`typing` 模块的主要更改。"

#: ../../whatsnew/3.10.rst:718
msgid "PEP 604: New Type Union Operator"
msgstr "PEP 604: 新的类型联合运算符"

#: ../../whatsnew/3.10.rst:720
msgid ""
"A new type union operator was introduced which enables the syntax ``X | Y``."
" This provides a cleaner way of expressing 'either type X or type Y' instead"
" of using :data:`typing.Union`, especially in type hints."
msgstr ""
"引入了启用 ``X | Y`` 语法的类型联合运算符。 这提供了一种表示 '类型 X 或类型 Y' 的相比使用 :data:`typing.Union`"
" 更清晰的方式，特别是在类型提示中。"

#: ../../whatsnew/3.10.rst:724
msgid ""
"In previous versions of Python, to apply a type hint for functions accepting"
" arguments of multiple types, :data:`typing.Union` was used::"
msgstr "在之前的 Python 版本中，要为可接受多种类型参数的函数应用类型提示，使用的是 :data:`typing.Union`::"

#: ../../whatsnew/3.10.rst:731
msgid "Type hints can now be written in a more succinct manner::"
msgstr "类型提示现在可以使用更简洁的写法::"

#: ../../whatsnew/3.10.rst:737
msgid ""
"This new syntax is also accepted as the second argument to "
":func:`isinstance` and :func:`issubclass`::"
msgstr "这个新增语法也被接受作为 :func:`isinstance` 和 :func:`issubclass` 的第二个参数::"

#: ../../whatsnew/3.10.rst:743
msgid "See :ref:`types-union` and :pep:`604` for more details."
msgstr "详情参见 :ref:`types-union` 和 :pep:`604`。"

#: ../../whatsnew/3.10.rst:745
msgid ""
"(Contributed by Maggie Moss and Philippe Prados in :issue:`41428`, with "
"additions by Yurii Karabas and Serhiy Storchaka in :issue:`44490`.)"
msgstr ""
"（由 Maggie Moss 和 Philippe Prados 在 :issue:`41428` 中贡献，并由 Yurii Karabas 和 "
"Serhiy Storchaka 在 :issue:`44490` 中补充。）"

#: ../../whatsnew/3.10.rst:750
msgid "PEP 612: Parameter Specification Variables"
msgstr "PEP 612: 形参规格变量"

#: ../../whatsnew/3.10.rst:752
msgid ""
"Two new options to improve the information provided to static type checkers "
"for :pep:`484`\\ 's ``Callable`` have been added to the :mod:`typing` "
"module."
msgstr ""
"在 :mod:`typing` 模块中新增了两个选项以改进用于 :pep:`484` 的 ``Callable`` 提供给静态类型检查器的信息。"

#: ../../whatsnew/3.10.rst:755
msgid ""
"The first is the parameter specification variable.  They are used to forward"
" the parameter types of one callable to another callable -- a pattern "
"commonly found in higher order functions and decorators.  Examples of usage "
"can be found in :class:`typing.ParamSpec`. Previously, there was no easy way"
" to type annotate dependency of parameter types in such a precise manner."
msgstr ""
"第一个选项是形参规格变量。 它们被用来将一个可调用对象的形参类型转发给另一个可调用对象 —— 这种模式常见于高阶函数和装饰器。 使用示例可在 "
":class:`typing.ParamSpec` 中找到。 在之前版本中，没有一种简单办法能以如此精确的方式对形参类型的依赖性进行类型标注。"

#: ../../whatsnew/3.10.rst:761
msgid ""
"The second option is the new ``Concatenate`` operator. It's used in "
"conjunction with parameter specification variables to type annotate a higher"
" order callable which adds or removes parameters of another callable.  "
"Examples of usage can be found in :class:`typing.Concatenate`."
msgstr ""
"第二个选项是新的 ``Concatenate`` 运算符。 它与形参规格变量一起使用以便对增加或移除了其他可调用对象的高阶可调用对象进行类型标注。 "
"使用示例可以在 :class:`typing.Concatenate` 中找到。"

#: ../../whatsnew/3.10.rst:766
msgid ""
"See :class:`typing.Callable`, :class:`typing.ParamSpec`, "
":class:`typing.Concatenate`, :class:`typing.ParamSpecArgs`, "
":class:`typing.ParamSpecKwargs`, and :pep:`612` for more details."
msgstr ""
"请参阅 :class:`typing.Callable`, :class:`typing.ParamSpec`, "
":class:`typing.Concatenate`, :class:`typing.ParamSpecArgs`, "
":class:`typing.ParamSpecKwargs` 和 :pep:`612` 来了解更多细节。"

#: ../../whatsnew/3.10.rst:770
msgid ""
"(Contributed by Ken Jin in :issue:`41559`, with minor enhancements by Jelle "
"Zijlstra in :issue:`43783`.  PEP written by Mark Mendoza.)"
msgstr ""
"（由 Ken Jin 在 :issue:`41559` 中贡献，并由 Jelle Zijlstra 在 :issue:`43783` 中加以少量改进。 "
"PEP 由 Mark Mendoza 撰写。）"

#: ../../whatsnew/3.10.rst:775
msgid "PEP 613: TypeAlias"
msgstr "PEP 613: 类型别名"

#: ../../whatsnew/3.10.rst:777
msgid ""
":pep:`484` introduced the concept of type aliases, only requiring them to be"
" top-level unannotated assignments. This simplicity sometimes made it "
"difficult for type checkers to distinguish between type aliases and ordinary"
" assignments, especially when forward references or invalid types were "
"involved. Compare::"
msgstr ""
":pep:`484` 引入了类型别名的概念，只要求它们是不带标注的最高层级赋值。 "
"这种简单性有时会使得类型检查器难以区分类型别名和普通赋值，特别是当涉及到前向引用或无效类型的时候。 例如在比较::"

#: ../../whatsnew/3.10.rst:785
msgid ""
"Now the :mod:`typing` module has a special value :data:`TypeAlias` which "
"lets you declare type aliases more explicitly::"
msgstr "现在 :mod:`typing` 模块具有一个特殊值 :data:`TypeAlias` 可让你更明确地声明类型别名::"

#: ../../whatsnew/3.10.rst:791
msgid "See :pep:`613` for more details."
msgstr "请参阅 :pep:`613` 了解详情。"

#: ../../whatsnew/3.10.rst:793
msgid "(Contributed by Mikhail Golubev in :issue:`41923`.)"
msgstr "（由 Mikhail Golubev 在 :issue:`41923` 中贡献。）"

#: ../../whatsnew/3.10.rst:796
msgid "PEP 647: User-Defined Type Guards"
msgstr "PEP 647: 用户自定义的类型保护器"

#: ../../whatsnew/3.10.rst:798
msgid ""
":data:`TypeGuard` has been added to the :mod:`typing` module to annotate "
"type guard functions and improve information provided to static type "
"checkers during type narrowing.  For more information, please see "
":data:`TypeGuard`\\ 's documentation, and :pep:`647`."
msgstr ""
":data:`TypeGuard` 已被添加到 :mod:`typing` 模块用来标注类型保护器函数并改进在类型细化期间提供给静态类型分析器的信息。 "
"要了解更多信息，请参阅 :data:`TypeGuard` 的文档以及 :pep:`647`。"

#: ../../whatsnew/3.10.rst:803
msgid ""
"(Contributed by Ken Jin and Guido van Rossum in :issue:`43766`. PEP written "
"by Eric Traut.)"
msgstr ""
"（由 Ken Jin 和 Guido van Rossum 在 :issue:`43766` 中贡献。 PEP 由 Eric Traut 撰写。）"

#: ../../whatsnew/3.10.rst:807
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.10.rst:809
msgid ""
"The :class:`int` type has a new method :meth:`int.bit_count`, returning the "
"number of ones in the binary expansion of a given integer, also known as the"
" population count. (Contributed by Niklas Fiekas in :issue:`29882`.)"
msgstr ""
":class:`int` 类型新增了一个方法 :meth:`int.bit_count`，返回给定整数的二进制展开中值为一的位数，或称“比特计量”。 "
"（由 Niklas Fiekas 在 :issue:`29882` 中贡献。）"

#: ../../whatsnew/3.10.rst:813
msgid ""
"The views returned by :meth:`dict.keys`, :meth:`dict.values` and "
":meth:`dict.items` now all have a ``mapping`` attribute that gives a "
":class:`types.MappingProxyType` object wrapping the original dictionary. "
"(Contributed by Dennis Sweeney in :issue:`40890`.)"
msgstr ""
"现在 :meth:`dict.keys`, :meth:`dict.values` 和 :meth:`dict.items` 所返回的视图都有一个 "
"``mapping`` 属性，它给出包装了原始字典的 :class:`types.MappingProxyType` 对象。 （由 Dennis "
"Sweeney 在 :issue:`40890` 中贡献。）"

#: ../../whatsnew/3.10.rst:818
msgid ""
":pep:`618`: The :func:`zip` function now has an optional ``strict`` flag, "
"used to require that all the iterables have an equal length."
msgstr ":pep:`618`: 现在 :func:`zip` 函数有一个可选的 ``strict`` 旗标，用于要求所有可迭代对象的长度都相等。"

#: ../../whatsnew/3.10.rst:821
msgid ""
"Builtin and extension functions that take integer arguments no longer accept"
" :class:`~decimal.Decimal`\\ s, :class:`~fractions.Fraction`\\ s and other "
"objects that can be converted to integers only with a loss (e.g. that have "
"the :meth:`~object.__int__` method but do not have the "
":meth:`~object.__index__` method). (Contributed by Serhiy Storchaka in "
":issue:`37999`.)"
msgstr ""
"接受整数参数的内置和扩展函数不再接受 :class:`~decimal.Decimal`, :class:`~fractions.Fraction` "
"以及其他可被转换为整数但会丢失精度（即具有 :meth:`~object.__int__` 方法但没有 "
":meth:`~object.__index__` 方法）的对象。 （由 Serhiy Storchaka 在 :issue:`37999` 中贡献。）"

#: ../../whatsnew/3.10.rst:828
msgid ""
"If :func:`object.__ipow__` returns :const:`NotImplemented`, the operator "
"will correctly fall back to :func:`object.__pow__` and "
":func:`object.__rpow__` as expected. (Contributed by Alex Shkop in "
":issue:`38302`.)"
msgstr ""
"如果 :func:`object.__ipow__` 返回 :const:`NotImplemented`，该运算符将正确地按照预期回退至 "
":func:`object.__pow__` 和 :func:`object.__rpow__`。 （由 Alex Shkop 在 "
":issue:`38302` 中贡献。）"

#: ../../whatsnew/3.10.rst:832
msgid ""
"Assignment expressions can now be used unparenthesized within set literals "
"and set comprehensions, as well as in sequence indexes (but not slices)."
msgstr "现在赋值表达式可以不带圆括号地在集合字面值和集合推导式中使用，也可以在序列索引号中使用（但不能用于切片）。"

#: ../../whatsnew/3.10.rst:835
msgid ""
"Functions have a new ``__builtins__`` attribute which is used to look for "
"builtin symbols when a function is executed, instead of looking into "
"``__globals__['__builtins__']``. The attribute is initialized from "
"``__globals__[\"__builtins__\"]`` if it exists, else from the current "
"builtins. (Contributed by Mark Shannon in :issue:`42990`.)"
msgstr ""
"函数具有一个新的 ``__builtins__`` 属性，当函数被执行时它会被用于查找内置符号，而不是在 "
"``__globals__['__builtins__']`` 中查找。 如果 ``__globals__[\"__builtins__\"]`` "
"存在则该属性将基于它来初始化，否则将基于当前的内置函数。 （由 Mark Shannon 在 :issue:`42990` 中贡献。）"

#: ../../whatsnew/3.10.rst:841
msgid ""
"Two new builtin functions -- :func:`aiter` and :func:`anext` have been added"
" to provide asynchronous counterparts to :func:`iter` and :func:`next`, "
"respectively. (Contributed by Joshua Bronson, Daniel Pope, and Justin Wang "
"in :issue:`31861`.)"
msgstr ""
"增加了两个新的内置函数 —— :func:`aiter` 和 :func:`anext` 以分别提供与 :func:`iter` 和 "
":func:`next` 对应的异步版本。 （由 Joshua Bronson, Daniel Pope 和 Justin Wang 在 "
":issue:`31861` 中贡献。）"

#: ../../whatsnew/3.10.rst:846
msgid ""
"Static methods (:func:`@staticmethod <staticmethod>`) and class methods "
"(:func:`@classmethod <classmethod>`) now inherit the method attributes "
"(``__module__``, ``__name__``, ``__qualname__``, ``__doc__``, "
"``__annotations__``) and have a new ``__wrapped__`` attribute. Moreover, "
"static methods are now callable as regular functions. (Contributed by Victor"
" Stinner in :issue:`43682`.)"
msgstr ""
"静态方法 (:func:`@staticmethod <staticmethod>`) 和类方法 (:func:`@classmethod "
"<classmethod>`) 现在会继承方法属性 (``__module__``, ``__name__``, ``__qualname__``, "
"``__doc__``, ``__annotations__``) 并具有一个新的 ``__wrapped__`` 属性。 "
"此外，静态方法现在还是与常规函数一样的可调用对象。 （由 Victor Stinner 在 :issue:`43682` 中贡献。）"

#: ../../whatsnew/3.10.rst:853
msgid ""
"Annotations for complex targets (everything beside ``simple name`` targets "
"defined by :pep:`526`) no longer cause any runtime effects with ``from "
"__future__ import annotations``. (Contributed by Batuhan Taskaya in "
":issue:`42737`.)"
msgstr ""
"复杂目标的注解（ :pep:`526` 定义的除 ``simple name`` 之外的一切复杂目标）在运行时不再受 ``from __future__"
" import annotations`` 的影响。（由Batuhan Taskaya 在 :issue:`42737` 中贡献）。"

#: ../../whatsnew/3.10.rst:857
msgid ""
"Class and module objects now lazy-create empty annotations dicts on demand. "
"The annotations dicts are stored in the object’s ``__dict__`` for backwards "
"compatibility.  This improves the best practices for working with "
"``__annotations__``; for more information, please see :ref:`annotations-"
"howto`. (Contributed by Larry Hastings in :issue:`43901`.)"
msgstr ""
"类和模块对象现在可以按需创建空的注解字典。为保证向下兼容，这些注解数据将存储于对象的 ``__dict__`` 中。这改进了 "
"``__annotations__`` 的最佳用法；更多信息请参阅 :ref:`annotations-howto` 。（由 Larry "
"Hastings 在 :issue:`43901` 中贡献）"

#: ../../whatsnew/3.10.rst:864
msgid ""
"Annotations consist of ``yield``, ``yield from``, ``await`` or named "
"expressions are now forbidden under ``from __future__ import annotations`` "
"due to their side effects. (Contributed by Batuhan Taskaya in "
":issue:`42725`.)"
msgstr ""
"由于会产生副作用，现在 ``from __future__ import annotations`` 时禁止使用包含 ``yield`` 、 "
"``yield from`` 、 ``await`` 或已命名表达式的注解。（由 Batuhan Taskaya 在  :issue:`42725` "
"中贡献）"

#: ../../whatsnew/3.10.rst:869
msgid ""
"Usage of unbound variables, ``super()`` and other expressions that might "
"alter the processing of symbol table as annotations are now rendered "
"effectless under ``from __future__ import annotations``. (Contributed by "
"Batuhan Taskaya in :issue:`42725`.)"
msgstr ""
"未绑定变量、``super()`` 和其他可能改变符号表处理的表达式，现在在 ``from __future__ import "
"annotations`` 时不能用作注解。（由 Batuhan Taskaya 在 :issue:`42725` 中贡献）"

#: ../../whatsnew/3.10.rst:874
msgid ""
"Hashes of NaN values of both :class:`float` type and "
":class:`decimal.Decimal` type now depend on object identity. Formerly, they "
"always hashed to ``0`` even though NaN values are not equal to one another. "
"This caused potentially quadratic runtime behavior due to excessive hash "
"collisions when creating dictionaries and sets containing multiple NaNs. "
"(Contributed by Raymond Hettinger in :issue:`43475`.)"
msgstr ""
":class:`float` 类型和 :class:`decimal.Decimal` 类型的 NaN 值的哈希值现在取决于对象身份。以前，即便 NaN"
" 值彼此不等，也都是哈希为 ``0``。在创建包含多个 NaN 的字典和集合时，由于哈希冲突过度，导致了运行代价可能会二次方增长。（由 Raymond "
"Hettinger 在 :issue:`43475` 中贡献）"

#: ../../whatsnew/3.10.rst:881
msgid ""
"A :exc:`SyntaxError` (instead of a :exc:`NameError`) will be raised when "
"deleting the :const:`__debug__` constant.  (Contributed by Dong-hee Na in "
":issue:`45000`.)"
msgstr ""
"当删除 :const:`__debug__` 常量时，将产生一个 :exc:`SyntaxError` （而不是 :exc:`NameError` ）。"
" (由 Dong-hee Na 在 :issue:`45000` 中贡献。)"

#: ../../whatsnew/3.10.rst:884
msgid ""
":exc:`SyntaxError` exceptions now have ``end_lineno`` and ``end_offset`` "
"attributes.  They will be ``None`` if not determined. (Contributed by Pablo "
"Galindo in :issue:`43914`.)"
msgstr ""
":exc:`SyntaxError` 异常现在有 ``end_lineno`` 和 ``end_offset`` 属性。 如果不确定的话，它们将是 "
"``None`` 。(由 Pablo Galindo 在 :issue:`43914` 中贡献。)"

#: ../../whatsnew/3.10.rst:889
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.10.rst:891
msgid "None yet."
msgstr "无。"

#: ../../whatsnew/3.10.rst:895
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.10.rst:898
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.10.rst:900
msgid ""
"Add missing "
":meth:`~asyncio.events.AbstractEventLoop.connect_accepted_socket` method. "
"(Contributed by Alex Grönholm in :issue:`41332`.)"
msgstr ""
"加入了缺失的 :meth:`~asyncio.events.AbstractEventLoop.connect_accepted_socket` "
"方法。（由 Alex Grönholm 在 :issue:`41332` 中贡献）"

#: ../../whatsnew/3.10.rst:905
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.10.rst:907
msgid ""
"Misleading phrase \"optional arguments\" was replaced with \"options\" in "
"argparse help. Some tests might require adaptation if they rely on exact "
"output match. (Contributed by Raymond Hettinger in :issue:`9694`.)"
msgstr ""
"在 argparse 的帮助中，将“可选参数”这一误导性短语改为“可选项”。某些测试代码如果依赖精确的输出匹配，可能需要调整。（由 Raymond "
"Hettinger 在 :issue:`9694` 中贡献）"

#: ../../whatsnew/3.10.rst:911
msgid "array"
msgstr "array"

#: ../../whatsnew/3.10.rst:913
msgid ""
"The :meth:`~array.array.index` method of :class:`array.array` now has "
"optional *start* and *stop* parameters. (Contributed by Anders Lorentsen and"
" Zackery Spytz in :issue:`31956`.)"
msgstr ""
"现在， :class:`array.array`  的 :meth:`~array.array.index` 方法拥有可选的 *start* 和 "
"*stop* 参数。（由 Anders Lorentsen 和 Zackery Spytz 在 :issue:`31956` 中贡献）"

#: ../../whatsnew/3.10.rst:918
msgid "asynchat, asyncore, smtpd"
msgstr "asynchat、asyncore 和 smtpd"

#: ../../whatsnew/3.10.rst:919
msgid ""
"These modules have been marked as deprecated in their module documentation "
"since Python 3.6.  An import-time :class:`DeprecationWarning` has now been "
"added to all three of these modules."
msgstr ""
"从 Python 3.6 开始，这些模块在其文档中已被标为废弃。现在这三个模块都增加了一个导入时警告 "
":class:`DeprecationWarning`。"

#: ../../whatsnew/3.10.rst:924
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.10.rst:926
msgid ""
"Add :func:`base64.b32hexencode` and :func:`base64.b32hexdecode` to support "
"the Base32 Encoding with Extended Hex Alphabet."
msgstr ""
"增加 :func:`base64.b32hexencode` 和 :func:`base64.b32hexdecode` 以支持带有扩展十六进制字母的 "
"Base32 编码。"

#: ../../whatsnew/3.10.rst:930
msgid "bdb"
msgstr "bdb"

#: ../../whatsnew/3.10.rst:932
msgid ""
"Add :meth:`~bdb.Breakpoint.clearBreakpoints` to reset all set breakpoints. "
"(Contributed by Irit Katriel in :issue:`24160`.)"
msgstr ""
"增加 :meth:`~bdb.Breakpoint.clearBreakpoints` ，用于重置所有已设断点。（由 Irit Katriel 在 "
":issue:`24160` 中贡献）"

#: ../../whatsnew/3.10.rst:936
msgid "bisect"
msgstr "bisect"

#: ../../whatsnew/3.10.rst:938
msgid ""
"Added the possibility of providing a *key* function to the APIs in the "
":mod:`bisect` module. (Contributed by Raymond Hettinger in :issue:`4356`.)"
msgstr ""
"增加了为 :mod:`bisect` 模块中的 API 提供 *key* 函数的可能性。(由 Raymond Hettinger 在 "
":issue:`4356` 中贡献。)"

#: ../../whatsnew/3.10.rst:942
msgid "codecs"
msgstr "编码器"

#: ../../whatsnew/3.10.rst:944
msgid ""
"Add a :func:`codecs.unregister` function to unregister a codec search "
"function. (Contributed by Hai Shi in :issue:`41842`.)"
msgstr ""
"增加一个 :func:`codecs.unregister` 函数，用于取消对编解码器搜索函数的注册。（由 Hai Shi 在 "
":issue:`41842` 中贡献）"

#: ../../whatsnew/3.10.rst:948
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.10.rst:950
msgid ""
"The ``__args__`` of the :ref:`parameterized generic <types-genericalias>` "
"for :class:`collections.abc.Callable` are now consistent with "
":data:`typing.Callable`. :class:`collections.abc.Callable` generic now "
"flattens type parameters, similar to what :data:`typing.Callable` currently "
"does.  This means that ``collections.abc.Callable[[int, str], str]`` will "
"have ``__args__`` of ``(int, str, str)``; previously this was ``([int, str],"
" str)``.  To allow this change, :class:`types.GenericAlias` can now be "
"subclassed, and a subclass will be returned when subscripting the "
":class:`collections.abc.Callable` type.  Note that a :exc:`TypeError` may be"
" raised for invalid forms of parameterizing "
":class:`collections.abc.Callable` which may have passed silently in Python "
"3.9. (Contributed by Ken Jin in :issue:`42195`.)"
msgstr ""
"现在， :ref:`parameterized generic <types-genericalias>` 的  "
":class:`collections.abc.Callable` 的 ``__args__`` 与 :data:`typing.Callable` "
"一致了。 :class:`collections.abc.Callable` generic 现在将类型参数扁平化了，类似于 "
":data:`typing.Callable` 当前的做法。这意味着 ``collections.abc.Callable[[int, str], "
"str]`` 将带有 ``(int, str, str)`` 的参数 ``__args__``；以前是 ``([int, str], str)`` "
"。为了做到这一变化，  :class:`types.GenericAlias` 现在可以被子类化，当对 "
":class:`collections.abc.Callable` "
"类型进行下标访问时，将返回一个子类。注意，:class:`collections.abc.Callable`  非法的参数化形式可能会触发  "
":exc:`TypeError` ，而在 Python 3.9 中可能就静默了。（由 Ken Jin 在 :issue:`42195` 中贡献）"

#: ../../whatsnew/3.10.rst:963
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.10.rst:965
msgid ""
"Add a :func:`contextlib.aclosing` context manager to safely close async "
"generators and objects representing asynchronously released resources. "
"(Contributed by Joongi Kim and John Belmonte in :issue:`41229`.)"
msgstr ""
"增加了一个上下文管理器 :func:`contextlib.aclosing` ，以便能安全关闭异步生成器和代表异步释放资源的对象。（由 Joongi "
"Kim 和 John Belmonte 在 :issue:`41229` 中贡献）"

#: ../../whatsnew/3.10.rst:969
msgid ""
"Add asynchronous context manager support to :func:`contextlib.nullcontext`. "
"(Contributed by Tom Gringauz in :issue:`41543`.)"
msgstr ""
"为 :func:`contextlib.nullcontext` 加入异步上下文管理器支持。由 Tom Gringauz 在 "
":issue:`41543` 中贡献）"

#: ../../whatsnew/3.10.rst:972
msgid ""
"Add :class:`AsyncContextDecorator`, for supporting usage of async context "
"managers as decorators."
msgstr "加入 :class:`AsyncContextDecorator`，以便支持用异步上下文管理器作为装饰器。"

#: ../../whatsnew/3.10.rst:976
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.10.rst:978
msgid ""
"The extended color functions added in ncurses 6.1 will be used transparently"
" by :func:`curses.color_content`, :func:`curses.init_color`, "
":func:`curses.init_pair`, and :func:`curses.pair_content`. A new function, "
":func:`curses.has_extended_color_support`, indicates whether extended color "
"support is provided by the underlying ncurses library. (Contributed by "
"Jeffrey Kintscher and Hans Petter Jansson in :issue:`36982`.)"
msgstr ""
"在 ncurses 6.1 中增加的扩展颜色函数将会由 :func:`curses.color_content` 、 "
":func:`curses.init_color` 、 :func:`curses.init_pair` 和 "
":func:`curses.pair_content` 透明地使用。新增的函数 "
":func:`curses.has_extended_color_support` 将指明下层的 ncurses 库是否提供了扩展颜色支持。（由 "
"Jeffrey Kintscher 和 Hans Petter Jansson 在 :issue:`36982` 中贡献）"

#: ../../whatsnew/3.10.rst:985
msgid ""
"The ``BUTTON5_*`` constants are now exposed in the :mod:`curses` module if "
"they are provided by the underlying curses library. (Contributed by Zackery "
"Spytz in :issue:`39273`.)"
msgstr ""
"现在常量 ``BUTTON5_*`` 如果是由底层的 curses 库提供的，则会在 :mod:`curses` 模块中体现。（由 Zackery "
"Spytz 在 :issue:`39273` 中贡献）"

#: ../../whatsnew/3.10.rst:990
msgid "dataclasses"
msgstr "dataclasses"

#: ../../whatsnew/3.10.rst:993
msgid "__slots__"
msgstr "__slots__"

#: ../../whatsnew/3.10.rst:995
msgid ""
"Added ``slots`` parameter in :func:`dataclasses.dataclass` decorator. "
"(Contributed by Yurii Karabas in :issue:`42269`)"
msgstr ""
"在 :func:`dataclasses.dataclass` 装饰器中添加 ``slots`` 参数。(由 Yurii Karabas 在 "
":issue:`42269` 中贡献)"

#: ../../whatsnew/3.10.rst:999
msgid "Keyword-only fields"
msgstr "仅限关键字字段"

#: ../../whatsnew/3.10.rst:1001
msgid ""
"dataclasses now supports fields that are keyword-only in the generated "
"__init__ method.  There are a number of ways of specifying keyword-only "
"fields."
msgstr "数据类现在支持在生成的 __init__ 方法中只用关键字的字段。 有许多方法可以指定只用关键字的字段。"

#: ../../whatsnew/3.10.rst:1005
msgid "You can say that every field is keyword-only:"
msgstr "你可以说每一个字段都是仅限关键字的:"

#: ../../whatsnew/3.10.rst:1016
msgid ""
"Both ``name`` and ``birthday`` are keyword-only parameters to the generated "
"__init__ method."
msgstr "``name`` 和 ``birthday`` 都是生成的 __init__ 方法的仅限关键字的参数。"

#: ../../whatsnew/3.10.rst:1019
msgid "You can specify keyword-only on a per-field basis:"
msgstr "你可以在每个字段的基础上指定仅限关键字："

#: ../../whatsnew/3.10.rst:1030
msgid ""
"Here only ``birthday`` is keyword-only.  If you set ``kw_only`` on "
"individual fields, be aware that there are rules about re-ordering fields "
"due to keyword-only fields needing to follow non-keyword-only fields.  See "
"the full dataclasses documentation for details."
msgstr ""
"这里的只有 ``birthday`` 是仅限关键字。如果你在单个字段上设置 ``kw_only`` "
"，要注意由于仅限关键字的字段需要跟在非仅限关键字的字段后面，所以有关于重新排序的规则。 详情请看完整的数据类文件。"

#: ../../whatsnew/3.10.rst:1035
msgid ""
"You can also specify that all fields following a KW_ONLY marker are keyword-"
"only.  This will probably be the most common usage:"
msgstr "你也可以指定 KW_ONLY 标记后面的所有字段都是仅限关键字的。 这可能是最常见的用法："

#: ../../whatsnew/3.10.rst:1050
msgid ""
"Here, ``z`` and ``t`` are keyword-only parameters, while ``x`` and ``y`` are"
" not. (Contributed by Eric V. Smith in :issue:`43532`.)"
msgstr ""
"在这里，``z`` 和 ``t`` 是仅限关键字形参，而 ``x`` 和 ``y`` 不是。 （由 Eric V. Smith 在 "
":issue:`43532` 中贡献。）"

#: ../../whatsnew/3.10.rst:1057
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.10.rst:1059
msgid ""
"The entire ``distutils`` package is deprecated, to be removed in Python "
"3.12. Its functionality for specifying package builds has already been "
"completely replaced by third-party packages ``setuptools`` and "
"``packaging``, and most other commonly used APIs are available elsewhere in "
"the standard library (such as :mod:`platform`, :mod:`shutil`, "
":mod:`subprocess` or :mod:`sysconfig`). There are no plans to migrate any "
"other functionality from ``distutils``, and applications that are using "
"other functions should plan to make private copies of the code. Refer to "
":pep:`632` for discussion."
msgstr ""
"整个 ``distutils`` 包已被废弃，将在 Python 3.12 中移除。其用指定包构建程序的功能已被第三方软件包 "
"``setuptools`` 和 ``packaging`` 完全取代，而且大多数其他常用的 API 在标准库的其他地方都可以调用（如 "
":mod:`platform` 、 :mod:`shutil` 、 :mod:`subprocess` 或 "
":mod:`sysconfig`）。目前没有迁移 ``distutils`` 其他功能的计划，用到其他功能的应用程序应该准备好自己保留一份拷贝。请参考 "
":pep:`632` 。"

#: ../../whatsnew/3.10.rst:1069
msgid ""
"The ``bdist_wininst`` command deprecated in Python 3.8 has been removed. The"
" ``bdist_wheel`` command is now recommended to distribute binary packages on"
" Windows. (Contributed by Victor Stinner in :issue:`42802`.)"
msgstr ""
"在 Python 3.8 中废弃的 ``bdist_wininst`` 命令已被移除。现在在 Windows 中发布二进制包推荐采用 "
"``bdist_wheel`` 命令。（由 Victor Stinner 在  :issue:`42802` 中贡献）"

#: ../../whatsnew/3.10.rst:1075
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.10.rst:1077 ../../whatsnew/3.10.rst:1201
#: ../../whatsnew/3.10.rst:1228 ../../whatsnew/3.10.rst:1334
msgid ""
"When a module does not define ``__loader__``, fall back to "
"``__spec__.loader``. (Contributed by Brett Cannon in :issue:`42133`.)"
msgstr ""
"若模块中没有定义 ``__loader__`` ，则回退至使用 ``__spec__.loader`` 。（由 Brett Cannon 在 "
":issue:`42133` 中贡献）"

#: ../../whatsnew/3.10.rst:1081
msgid "encodings"
msgstr "encodings"

#: ../../whatsnew/3.10.rst:1083
msgid ""
":func:`encodings.normalize_encoding` now ignores non-ASCII characters. "
"(Contributed by Hai Shi in :issue:`39337`.)"
msgstr ""
"现在 :func:`encodings.normalize_encoding` 会忽略非 ASCII 字符。（由 Hai Shi 在 "
":issue:`39337` 中贡献）"

#: ../../whatsnew/3.10.rst:1087
msgid "fileinput"
msgstr "fileinput"

#: ../../whatsnew/3.10.rst:1089
msgid ""
"Add *encoding* and *errors* parameters in :func:`fileinput.input` and "
":class:`fileinput.FileInput`. (Contributed by Inada Naoki in "
":issue:`43712`.)"
msgstr ""
"在 :func:`fileinput.input` 和 :class:`fileinput.FileInput` 中增加了  *encoding* 和 "
"*errors* 形参。 （由 Inada Naoki 在 :issue:`43712` 中贡献。）"

#: ../../whatsnew/3.10.rst:1093
msgid ""
":func:`fileinput.hook_compressed` now returns :class:`TextIOWrapper` object "
"when *mode* is \"r\" and file is compressed, like uncompressed files. "
"(Contributed by Inada Naoki in :issue:`5758`.)"
msgstr ""
"现在 :func:`fileinput.hook_compressed` 会在 *mode* 为 \"r\" 且文件被压缩时返回 "
":class:`TextIOWrapper`，与未压缩文件一致。 （由 Inada Naoki 在 :issue:`5758` 中贡献。）"

#: ../../whatsnew/3.10.rst:1098
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.10.rst:1100
msgid ""
"The :mod:`faulthandler` module now detects if a fatal error occurs during a "
"garbage collector collection. (Contributed by Victor Stinner in "
":issue:`44466`.)"
msgstr ""
"现在 :mod:`faulthandler` 模块会检测在垃圾回收期间是否发生严重错误。 （由 Victor Stinner 在 "
":issue:`44466` 中贡献）"

#: ../../whatsnew/3.10.rst:1105
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.10.rst:1107
msgid ""
"Add audit hooks for :func:`gc.get_objects`, :func:`gc.get_referrers` and "
":func:`gc.get_referents`. (Contributed by Pablo Galindo in :issue:`43439`.)"
msgstr ""
"为 :func:`gc.get_objects`, :func:`gc.get_referrers` 和 "
":func:`gc.get_referents` 添加了审计钩子。 （由 Pablo Galindo 在 :issue:`43439` 中贡献。）"

#: ../../whatsnew/3.10.rst:1111
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.10.rst:1113
msgid ""
"Add the *root_dir* and *dir_fd* parameters in :func:`~glob.glob` and "
":func:`~glob.iglob` which allow to specify the root directory for searching."
" (Contributed by Serhiy Storchaka in :issue:`38144`.)"
msgstr ""
"在 :func:`~glob.glob` 和 :func:`~glob.iglob` 中增加了 *root_dir* 和 *dir_fd* "
"形参，用于指定搜索的根目录。（由 Serhiy Storchaka 在 :issue:`38144` 中贡献）"

#: ../../whatsnew/3.10.rst:1118
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.10.rst:1120
msgid ""
"The hashlib module requires OpenSSL 1.1.1 or newer. (Contributed by "
"Christian Heimes in :pep:`644` and :issue:`43669`.)"
msgstr ""
"hashlib 模块要求 OpenSSL 1.1.1 或更新版本。 （由 Christian Heimes 在 :pep:`644` 和 "
":issue:`43669` 中贡献。）"

#: ../../whatsnew/3.10.rst:1123
msgid ""
"The hashlib module has preliminary support for OpenSSL 3.0.0. (Contributed "
"by Christian Heimes in :issue:`38820` and other issues.)"
msgstr ""
"hashlib 模块已初步支持 OpenSSL 3.0.0。 （由 Christian Heimes 在 :issue:`38820` "
"及其他问题事项中贡献。）"

#: ../../whatsnew/3.10.rst:1126
msgid ""
"The pure-Python fallback of :func:`~hashlib.pbkdf2_hmac` is deprecated. In "
"the future PBKDF2-HMAC will only be available when Python has been built "
"with OpenSSL support. (Contributed by Christian Heimes in :issue:`43880`.)"
msgstr ""
"纯 Python 的回退版 :func:`~hashlib.pbkdf2_hmac` 已被弃用。 未来 PBKDF2-HMAC 将仅在 Python "
"带有 OpenSSL 编译时才可用。（由 Christian Heimes 在 :issue:`43880` 中贡献）"

#: ../../whatsnew/3.10.rst:1132
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.10.rst:1134
msgid ""
"The hmac module now uses OpenSSL's HMAC implementation internally. "
"(Contributed by Christian Heimes in :issue:`40645`.)"
msgstr ""
"现在 hmac 模块会在内部使用 OpenSSL 的 HMAC 实现。 （由 Christian Heimes 在 :issue:`40645` "
"中贡献。）"

#: ../../whatsnew/3.10.rst:1138
msgid "IDLE and idlelib"
msgstr "IDLE 与 idlelib"

#: ../../whatsnew/3.10.rst:1140
msgid ""
"Make IDLE invoke :func:`sys.excepthook` (when started without '-n'). User "
"hooks were previously ignored.  (Contributed by Ken Hilton in "
":issue:`43008`.)"
msgstr ""
"使 IDLE 调用 :func:`sys.excepthook` （当启动时没有 '-n' ）。用户钩子以前是被忽略的。 (由 Ken Hilton 在"
" :issue:`43008` 中贡献。)"

#: ../../whatsnew/3.10.rst:1144
msgid ""
"Rearrange the settings dialog.  Split the General tab into Windows and "
"Shell/Ed tabs.  Move help sources, which extend the Help menu, to the "
"Extensions tab.  Make space for new options and shorten the dialog. The "
"latter makes the dialog better fit small screens.  (Contributed by Terry Jan"
" Reedy in :issue:`40468`.)  Move the indent space setting from the Font tab "
"to the new Windows tab.  (Contributed by Mark Roseman and Terry Jan Reedy in"
" :issue:`33962`.)"
msgstr ""
"重新安排设置对话框。 将常规选项卡分成 Windows 和 Shell/Ed 选项卡。 "
"将扩展帮助菜单的帮助源移至扩展标签。为新选项留出空间，并缩短对话框。后者使对话框更适合小屏幕。 (由 Terry Jan Reedy 贡献于 "
":issue:`40468` 。) 将缩进空间设置从字体标签移到新的 Windows 标签。 (由 Mark Roseman 和 Terry Jan "
"Reedy 在 :issue:`33962` 中提供)。"

#: ../../whatsnew/3.10.rst:1152
msgid "The changes above were backported to a 3.9 maintenance release."
msgstr "上述变化已被反向移植到 3.9 维护版本中。"

#: ../../whatsnew/3.10.rst:1154
msgid ""
"Add a Shell sidebar.  Move the primary prompt ('>>>') to the sidebar. Add "
"secondary prompts ('...') to the sidebar.  Left click and optional drag "
"selects one or more lines of text, as with the editor line number sidebar.  "
"Right click after selecting text lines displays a context menu with 'copy "
"with prompts'.  This zips together prompts from the sidebar with lines from "
"the selected text.  This option also appears on the context menu for the "
"text.  (Contributed by Tal Einat in :issue:`37903`.)"
msgstr ""
"增加了 Shell 侧栏。 "
"将主提示符（“>>>”）移至侧栏。二级提示符（“...”）也加入侧栏。在编辑器的行号侧栏上鼠标单击和可选的拖动，会选定一行或多行文本。在选定文本行后右击将显示包含“copy"
" with prompts”的上下文菜单。这会将侧栏的提示符与选定文本行合并。该选项也会在文本的上下文菜单中显示。（由 Tal Einat 在 "
":issue:`37903` 中贡献）"

#: ../../whatsnew/3.10.rst:1163
msgid ""
"Use spaces instead of tabs to indent interactive code.  This makes "
"interactive code entries 'look right'.  Making this feasible was a major "
"motivation for adding the shell sidebar.  (Contributed by Terry Jan Reedy in"
" :issue:`37892`.)"
msgstr ""
"使用空格而不是制表符来缩进交互式代码。 这使得交互式代码条目 \"看起来很正确\"。 使之可行是增加 shell 侧边栏的一个主要动机。 (由 "
"Terry Jan Reedy 在 :issue:`37892` 中贡献。)"

#: ../../whatsnew/3.10.rst:1168
msgid ""
"Highlight the new :ref:`soft keywords <soft-keywords>` :keyword:`match`, "
":keyword:`case <match>`, and :keyword:`_ <wildcard-patterns>` in pattern-"
"matching statements. However, this highlighting is not perfect and will be "
"incorrect in some rare cases, including some ``_``-s in ``case`` patterns.  "
"(Contributed by Tal Einat in :issue:`44010`.)"
msgstr ""
"在模式匹配语句中高亮显示新的 :ref:`软关键字 <soft-keywords>` :keyword:`match` 、 :keyword:`case"
" <match>` 和 :keyword:`_ <wildcard-patterns>`。 但这种高亮显示并不完美，某些极端情况下还会出现错误，包括 "
"``case`` 模式中的一些 ``_``。 （由 Tal Einat 在 :issue:`44010` 中贡献。）"

#: ../../whatsnew/3.10.rst:1174
msgid "New in 3.10 maintenance releases."
msgstr "3.10 维护版本中的新内容。"

#: ../../whatsnew/3.10.rst:1176
msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"对 ``.pyi`` 文件应用语法高亮。 （由 Alex Waygood 和 Terry Jan Reedy 在 :issue:`45447` "
"中贡献。）"

#: ../../whatsnew/3.10.rst:1179
msgid ""
"Include prompts when saving Shell with inputs and outputs. (Contributed by "
"Terry Jan Reedy in :gh:`95191`.)"
msgstr "当附带输入和输出地保存 Shell 时将包括提示符。 （由 Terry Jan Reedy 在 :gh:`95191` 中贡献。）"

#: ../../whatsnew/3.10.rst:1183
msgid "importlib.metadata"
msgstr "importlib.metadata"

#: ../../whatsnew/3.10.rst:1185
msgid ""
"Feature parity with ``importlib_metadata`` 4.6 (`history <https://importlib-"
"metadata.readthedocs.io/en/latest/history.html>`_)."
msgstr ""
"与 ``importlib_metadata`` 4.6（`history <https://importlib-"
"metadata.readthedocs.io/en/latest/history.html>`_）的功能一致。"

#: ../../whatsnew/3.10.rst:1188
msgid ""
":ref:`importlib.metadata entry points <entry-points>` now provide a nicer "
"experience for selecting entry points by group and name through a new "
":class:`importlib.metadata.EntryPoints` class. See the Compatibility Note in"
" the docs for more info on the deprecation and usage."
msgstr ""
"现在 :ref:`importlib.metadata entry points <entry-points>` 通过一个新的 "
":class:`importlib.metadata.EntryPoints` "
"类，为由组和名称选择入口点提供了更好的体验。关于废弃之处和用法的更多信息，请参见文档中的兼容性说明。"

#: ../../whatsnew/3.10.rst:1194
msgid ""
"Added :func:`importlib.metadata.packages_distributions` for resolving top-"
"level Python modules and packages to their "
":class:`importlib.metadata.Distribution`."
msgstr ""
"添加了 :func:`importlib.metadata.packages_distributions`，用于将顶级 Python 模块和包解析为其 "
":class:`importlib.metadata.Distributions`。"

#: ../../whatsnew/3.10.rst:1199
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.10.rst:1204
msgid ""
"Add :func:`inspect.get_annotations`, which safely computes the annotations "
"defined on an object. It works around the quirks of accessing the "
"annotations on various types of objects, and makes very few assumptions "
"about the object it examines. :func:`inspect.get_annotations` can also "
"correctly un-stringize stringized annotations.  "
":func:`inspect.get_annotations` is now considered best practice for "
"accessing the annotations dict defined on any Python object; for more "
"information on best practices for working with annotations, please see "
":ref:`annotations-howto`. Relatedly, :func:`inspect.signature`, "
":func:`inspect.Signature.from_callable`, and "
":func:`inspect.Signature.from_function` now call "
":func:`inspect.get_annotations` to retrieve annotations. This means "
":func:`inspect.signature` and :func:`inspect.Signature.from_callable` can "
"also now un-stringize stringized annotations. (Contributed by Larry Hastings"
" in :issue:`43817`.)"
msgstr ""
"加入了 "
":func:`inspect.get_annotations`，以便安全地对对象中定义的注解进行求值。:func:`inspect.get_annotations`"
" 也可以正确地解析字符串化的注解。 :func:`inspect.get_annotations` 现在应是访问任何 Python "
"对象注解字典的最佳实践；关于注解最佳用法的更多信息，请参见 :ref:`annotations-howto`。与之关联的， "
":func:`inspect.signature` 、 :func:`inspect.Signature.from_callable` 和 "
":func:`inspect.Signature.from_function` 现在也调用  "
":func:`inspect.get_annotations` 来获取注解信息。这意味着 :func:`inspect.signature` 和 "
":func:`inspect.Signature.from_callable` 现在也可以解析字符串化的注解了。（由 Larry Hastings 在 "
":issue:`43817` 中贡献）"

#: ../../whatsnew/3.10.rst:1220
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.10.rst:1222
msgid ""
"Add :func:`itertools.pairwise()`. (Contributed by Raymond Hettinger in "
":issue:`38200`.)"
msgstr ""
"添加了 :func:`itertools.pairwise()` （由 Raymond Hettinger 在 :issue:`38200` 中贡献。）"

#: ../../whatsnew/3.10.rst:1226
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.10.rst:1232
msgid "os"
msgstr "os"

#: ../../whatsnew/3.10.rst:1234
msgid ""
"Add :func:`os.cpu_count()` support for VxWorks RTOS. (Contributed by Peixing"
" Xin in :issue:`41440`.)"
msgstr ""
"为 VxWorks 实时操作系统加入 :func:`os.cpu_count()`  的支持。（由 Peixing Xin 在 "
":issue:`41440` 中贡献）"

#: ../../whatsnew/3.10.rst:1237
msgid ""
"Add a new function :func:`os.eventfd` and related helpers to wrap the "
"``eventfd2`` syscall on Linux. (Contributed by Christian Heimes in "
":issue:`41001`.)"
msgstr ""
"加入一个新函数 :func:`os.eventfd` 及其助手函数，以封装 Linux 的系统调用 ``eventfd2`` 。(由 Christian"
" Heimes 在 :issue:`41001` 中贡献）"

#: ../../whatsnew/3.10.rst:1241
msgid ""
"Add :func:`os.splice()` that allows to move data between two file "
"descriptors without copying between kernel address space and user address "
"space, where one of the file descriptors must refer to a pipe. (Contributed "
"by Pablo Galindo in :issue:`41625`.)"
msgstr ""
"加入 "
":func:`os.splice()`，以便在两个文件描述符之间移动数据，而无需在内核地址空间和用户地址空间之间进行复制，其中一个文件描述符必须指向某个管道。（由"
" Pablo Galindo 在 :issue:`41625` 中贡献）"

#: ../../whatsnew/3.10.rst:1246
msgid ""
"Add :data:`~os.O_EVTONLY`, :data:`~os.O_FSYNC`, :data:`~os.O_SYMLINK` and "
":data:`~os.O_NOFOLLOW_ANY` for macOS. (Contributed by Dong-hee Na in "
":issue:`43106`.)"
msgstr ""
"为 macOS 加入 :data:`~os.O_EVTONLY` 、:data:`~os.O_FSYNC` 、 "
":data:`~os.O_SYMLINK` 和 :data:`~os.O_NOFOLLOW_ANY` 。（由 Dong-hee Na 在 "
":issue:`43106` 中贡献）"

#: ../../whatsnew/3.10.rst:1250
msgid ""
"As of 3.10.15, :func:`os.mkdir` and :func:`os.makedirs` on Windows now "
"support passing a *mode* value of ``0o700`` to apply access control to the "
"new directory. This implicitly affects :func:`tempfile.mkdtemp` and is a "
"mitigation for CVE-2024-4030. Other values for *mode* continue to be "
"ignored. (Contributed by Steve Dower in :gh:`118486`.)"
msgstr ""

#: ../../whatsnew/3.10.rst:1258 ../../whatsnew/3.10.rst:2403
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.10.rst:1260
msgid ""
":func:`os.path.realpath` now accepts a *strict* keyword-only argument. When "
"set to ``True``, :exc:`OSError` is raised if a path doesn't exist or a "
"symlink loop is encountered. (Contributed by Barney Gale in :issue:`43757`.)"
msgstr ""
"现在 :func:`os.path.realpath` 可接受一个关键字参数 *strict*。 若设为 ``True`` "
"，则在路径不存在或遭遇循环符号链接时，会触发 :exc:`OSError`。 （由 Barney Gale 在 :issue:`43757` 中贡献。）"

#: ../../whatsnew/3.10.rst:1266
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.10.rst:1268
msgid ""
"Add slice support to :attr:`PurePath.parents <pathlib.PurePath.parents>`. "
"(Contributed by Joshua Cannon in :issue:`35498`.)"
msgstr ""
"为 :attr:`PurePath.parents <pathlib.PurePath.parents>` 增加切片支持。 （由 Joshua "
"Cannon 在 :issue:`35498` 中贡献。）"

#: ../../whatsnew/3.10.rst:1271
msgid ""
"Add negative indexing support to :attr:`PurePath.parents "
"<pathlib.PurePath.parents>`. (Contributed by Yaroslav Pankovych in "
":issue:`21041`.)"
msgstr ""
"为 :attr:`PurePath.parents <pathlib.PurePath.parents>` 增加负序列号支持。 （由 Yaroslav "
"Pankovych 在 :issue:`21041` 中贡献。）"

#: ../../whatsnew/3.10.rst:1275
msgid ""
"Add :meth:`Path.hardlink_to <pathlib.Path.hardlink_to>` method that "
"supersedes :meth:`~pathlib.Path.link_to`. The new method has the same "
"argument order as :meth:`~pathlib.Path.symlink_to`. (Contributed by Barney "
"Gale in :issue:`39950`.)"
msgstr ""
"加入 :meth:`Path.hardlink_to <pathlib.Path.hardlink_to>` 方法，取代 "
":meth:`~pathlib.Path.link_to`。该新方法的参数顺序与 :meth:`~pathlib.Path.symlink_to` "
"相同。（由 Barney Gale 贡献于 :issue:`39950` 中）"

#: ../../whatsnew/3.10.rst:1280
msgid ""
":meth:`pathlib.Path.stat` and :meth:`~pathlib.Path.chmod` now accept a "
"*follow_symlinks* keyword-only argument for consistency with corresponding "
"functions in the :mod:`os` module. (Contributed by Barney Gale in "
":issue:`39906`.)"
msgstr ""
"现在 :meth:`pathlib.Path.stat` 和 :meth:`~pathlib.Path.chmod` 接受一个关键字参数 "
"*follow_symlinks* ，以便与 :mod:`os` 模块中的对应函数保持一致。（由  Barney Gale 贡献于 "
":issue:`39906` ）"

#: ../../whatsnew/3.10.rst:1286
msgid "platform"
msgstr "平台"

#: ../../whatsnew/3.10.rst:1288
msgid ""
"Add :func:`platform.freedesktop_os_release()` to retrieve operation system "
"identification from `freedesktop.org os-release "
"<https://www.freedesktop.org/software/systemd/man/os-release.html>`_ "
"standard file. (Contributed by Christian Heimes in :issue:`28468`.)"
msgstr ""
"对从 `freedesktop.org os-release "
"<https://www.freedesktop.org/software/systemd/man/os-release.html>`_ "
"标准文件提取操作系统标识增加 :func:`platform.freedesktop_os_release()`。 （由 Christian "
"Heimes 在 :issue:`28468` 中贡献。）"

#: ../../whatsnew/3.10.rst:1294
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.10.rst:1296
msgid ""
":func:`pprint.pprint` now accepts a new ``underscore_numbers`` keyword "
"argument. (Contributed by sblondon in :issue:`42914`.)"
msgstr ""
"现在 :func:`pprint.pprint` 接受一个新的关键字参数 ``underscore_numbers``。（由 sblondon 贡献于 "
":issue:`42914` ）"

#: ../../whatsnew/3.10.rst:1299
msgid ""
":mod:`pprint` can now pretty-print :class:`dataclasses.dataclass` instances."
" (Contributed by Lewis Gaul in :issue:`43080`.)"
msgstr ""
"现在 :mod:`pprint` 可以完美打印 :class:`dataclasses.dataclass` 实例。（由 Lewis Gaul 贡献于 "
":issue:`43080` ）"

#: ../../whatsnew/3.10.rst:1303
msgid "py_compile"
msgstr "py_compile"

#: ../../whatsnew/3.10.rst:1305
msgid ""
"Add ``--quiet`` option to command-line interface of :mod:`py_compile`. "
"(Contributed by Gregory Schevchenko in :issue:`38731`.)"
msgstr ""
":mod:`py_compile' 的命令行界面加入 ``--quiet`` 选项。（由 Gregory Schevchenko 贡献于 "
":issue:`38731` ）"

#: ../../whatsnew/3.10.rst:1309
msgid "pyclbr"
msgstr "pyclbr"

#: ../../whatsnew/3.10.rst:1311
msgid ""
"Add an ``end_lineno`` attribute to the ``Function`` and ``Class`` objects in"
" the tree returned by :func:`pyclbr.readline` and "
":func:`pyclbr.readline_ex`.  It matches the existing (start) ``lineno``. "
"(Contributed by Aviral Srivastava in :issue:`38307`.)"
msgstr ""
"在 :func:`pyclbr.readline` 和 :func:`pyclbr.readline_ex` 返回的结果树中的 ``Function``"
" 和 ``Class`` 对象上增加一个 ``end_lineno`` 属性。与现有的（开始） ``lineno`` 相匹配。（由 Aviral "
"Srivastava 贡献于 :issue:`38307`）"

#: ../../whatsnew/3.10.rst:1317
msgid "shelve"
msgstr "shelve"

#: ../../whatsnew/3.10.rst:1319
msgid ""
"The :mod:`shelve` module now uses :data:`pickle.DEFAULT_PROTOCOL` by default"
" instead of :mod:`pickle` protocol ``3`` when creating shelves. (Contributed"
" by Zackery Spytz in :issue:`34204`.)"
msgstr ""
"现在 :mod:`shelve` 模块在创建打包时，默认采用 :data:`pickle.DEFAULT_PROTOCOL`，而不是 "
":mod:`pickle` 协议 ``3`` 。（由 Zackery Spytz 贡献于 :issue:`34204` ）"

#: ../../whatsnew/3.10.rst:1324
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.10.rst:1326
msgid ""
"Add :func:`~statistics.covariance`, Pearson's "
":func:`~statistics.correlation`, and simple "
":func:`~statistics.linear_regression` functions. (Contributed by Tymoteusz "
"Wołodźko in :issue:`38490`.)"
msgstr ""
"加入 :func:`~statistics.covariance` 、Pearson 的 :func:`~statistics.correlation`"
" 和简单的 :func:`~statistics.linear_regression` 函数。（由 Tymoteusz Wołodźko 贡献于 "
":issue:`38490` ）"

#: ../../whatsnew/3.10.rst:1332
msgid "site"
msgstr "site"

#: ../../whatsnew/3.10.rst:1338
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.10.rst:1340
msgid ""
"The exception :exc:`socket.timeout` is now an alias of :exc:`TimeoutError`. "
"(Contributed by Christian Heimes in :issue:`42413`.)"
msgstr ""
"现在异常 :exc:`socket.timeout` 是 :exc:`TimeoutError` 的别名。（由 Christian Heimes 在 "
":issue:`42413` 中贡献。）"

#: ../../whatsnew/3.10.rst:1343
msgid ""
"Add option to create MPTCP sockets with ``IPPROTO_MPTCP`` (Contributed by "
"Rui Cunha in :issue:`43571`.)"
msgstr ""
"加入用 ``IPPROTO_MPTCP`` 创建 MPTCP 套接字的选项（由 Rui Cunha 贡献于 :issue:`43571` ）"

#: ../../whatsnew/3.10.rst:1346
msgid ""
"Add ``IP_RECVTOS`` option to receive the type of service (ToS) or DSCP/ECN "
"fields (Contributed by Georg Sauthoff in :issue:`44077`.)"
msgstr ""
"加入 ``IP_RECVTOS`` 选项，以便接收服务类型（ToS）或 DSCP/ECN 字段（由 Georg Sauthoff 贡献于 "
":issue:`44077` ）"

#: ../../whatsnew/3.10.rst:1350
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.10.rst:1352
msgid ""
"The ssl module requires OpenSSL 1.1.1 or newer. (Contributed by Christian "
"Heimes in :pep:`644` and :issue:`43669`.)"
msgstr ""
"ssl 模块要求 OpenSSL 1.1.1 或更新版本。 （由 Christian Heimes 在 :pep:`644` 和 "
":issue:`43669` 中贡献。）"

#: ../../whatsnew/3.10.rst:1355
msgid ""
"The ssl module has preliminary support for OpenSSL 3.0.0 and new option "
":data:`~ssl.OP_IGNORE_UNEXPECTED_EOF`. (Contributed by Christian Heimes in "
":issue:`38820`, :issue:`43794`, :issue:`43788`, :issue:`43791`, "
":issue:`43799`, :issue:`43920`, :issue:`43789`, and :issue:`43811`.)"
msgstr ""
"ssl 模块已初步支持 OpenSSL 3.0.0 和新选项 :data:`~ssl.OP_IGNORE_UNEXPECTED_EOF`。 （由 "
"Christian Heimes 在 :issue:`38820`, :issue:`43794`, :issue:`43788`, "
":issue:`43791`, :issue:`43799`, :issue:`43920`, :issue:`43789` 和 "
":issue:`43811` 中贡献。）"

#: ../../whatsnew/3.10.rst:1361
msgid ""
"Deprecated function and use of deprecated constants now result in a "
":exc:`DeprecationWarning`. :attr:`ssl.SSLContext.options` has "
":data:`~ssl.OP_NO_SSLv2` and :data:`~ssl.OP_NO_SSLv3` set by default and "
"therefore cannot warn about setting the flag again. The :ref:`deprecation "
"section <whatsnew310-deprecated>` has a list of deprecated features. "
"(Contributed by Christian Heimes in :issue:`43880`.)"
msgstr ""
"现在，已弃用函数和使用已弃用常量会导致 :exc:`DeprecationWarning`。 "
":attr:`ssl.SSLContext.options` 默认设置了 :data:`~ssl.OP_NO_SSLv2` 和 "
":data:`~ssl.OP_NO_SSLv3` ，因而设置此标记无法再次发出警告了。 :ref:`弃用部分 "
"<whatsnew310-deprecated>` 列出了已弃用的特性。 （由 Christian Heimes 贡献于 :issue:`43880` "
"）"

#: ../../whatsnew/3.10.rst:1369
msgid ""
"The ssl module now has more secure default settings. Ciphers without forward"
" secrecy or SHA-1 MAC are disabled by default. Security level 2 prohibits "
"weak RSA, DH, and ECC keys with less than 112 bits of security. "
":class:`~ssl.SSLContext` defaults to minimum protocol version TLS 1.2. "
"Settings are based on Hynek Schlawack's research. (Contributed by Christian "
"Heimes in :issue:`43998`.)"
msgstr ""
"现在，ssl 模块默认设置的安全性提高了。默认情况下，不具备前向安全性或 SHA-1 MAC 的加密算法会被禁用。二级安全禁止安全性低于 112 位的弱"
" RSA、DH 和 ECC 密钥。 :class:`~ssl.SSLContext` 默认的最低版本协议为 TLS 1.2。这些设置是基于 Hynek "
"Schlawack 的研究。（由 Christian Heimes 贡献于 :issue:`43998` ）"

#: ../../whatsnew/3.10.rst:1376
msgid ""
"The deprecated protocols SSL 3.0, TLS 1.0, and TLS 1.1 are no longer "
"officially supported. Python does not block them actively. However OpenSSL "
"build options, distro configurations, vendor patches, and cipher suites may "
"prevent a successful handshake."
msgstr ""
"已弃用的协议 SSL 3.0, TLS 1.0 和 TLS 1.1 不再受到官方支持。Python 不会直接禁用。但 OpenSSL "
"编译选项、发行版配置、厂商补丁和加密套件可能会阻止握手成功。"

#: ../../whatsnew/3.10.rst:1381
msgid ""
"Add a *timeout* parameter to the :func:`ssl.get_server_certificate` "
"function. (Contributed by Zackery Spytz in :issue:`31870`.)"
msgstr ""
"为 :func:`ssl.get_server_certificate` 函数加入 *timeout* 形参。（由 Zackery Spytz 贡献于 "
":issue:`31870` ）"

#: ../../whatsnew/3.10.rst:1384
msgid ""
"The ssl module uses heap-types and multi-phase initialization. (Contributed "
"by Christian Heimes in :issue:`42333`.)"
msgstr "ssl 模块用到了堆类型和多阶段初始化。（由 Christian Heimes 贡献于 :issue:`42333` ）"

#: ../../whatsnew/3.10.rst:1387
msgid ""
"A new verify flag :data:`~ssl.VERIFY_X509_PARTIAL_CHAIN` has been added. "
"(Contributed by l0x in :issue:`40849`.)"
msgstr ""
"加入一个新的校验标记 :data:`~ssl.VERIFY_X509_PARTIAL_CHAIN`。（由 l0x 贡献于 :issue:`40849` "
"）"

#: ../../whatsnew/3.10.rst:1391
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.10.rst:1393
msgid ""
"Add audit events for :func:`~sqlite3.connect/handle`, "
":meth:`~sqlite3.Connection.enable_load_extension`, and "
":meth:`~sqlite3.Connection.load_extension`. (Contributed by Erlend E. "
"Aasland in :issue:`43762`.)"
msgstr ""
"为 :func:`~sqlite3.connect/handle` 、 "
":meth:`~sqlite3.Connection.enable_load_extension` 和 "
":meth:`~sqlite3.Connection.load_extension` 加入审计事件。（由 Erlend E. Aasland 贡献于 "
":issue:`43762`）"

#: ../../whatsnew/3.10.rst:1399
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.10.rst:1401
msgid ""
"Add :data:`sys.orig_argv` attribute: the list of the original command line "
"arguments passed to the Python executable. (Contributed by Victor Stinner in"
" :issue:`23427`.)"
msgstr ""
"加入了 :data:`sys.orig_argv` 属性：传给 Python 可执行文件的初始命令行参数列表。（由 Victor Stinner 贡献于"
" :issue:`23427` ）"

#: ../../whatsnew/3.10.rst:1405
msgid ""
"Add :data:`sys.stdlib_module_names`, containing the list of the standard "
"library module names. (Contributed by Victor Stinner in :issue:`42955`.)"
msgstr ""
"添加了 :data:`sys.stdlib_module_names`，包含标准库模块名称的列表。 （由 Victor Stinner 在 "
":issue:`42955` 中贡献。）"

#: ../../whatsnew/3.10.rst:1410
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.10.rst:1412
msgid ""
"As of 3.10.15 on Windows, the default mode ``0o700`` used by "
":func:`tempfile.mkdtemp` now limits access to the new directory due to "
"changes to :func:`os.mkdir`. This is a mitigation for CVE-2024-4030. "
"(Contributed by Steve Dower in :gh:`118486`.)"
msgstr ""

#: ../../whatsnew/3.10.rst:1418
msgid "_thread"
msgstr "_thread"

#: ../../whatsnew/3.10.rst:1420
msgid ""
":func:`_thread.interrupt_main` now takes an optional signal number to "
"simulate (the default is still :data:`signal.SIGINT`). (Contributed by "
"Antoine Pitrou in :issue:`43356`.)"
msgstr ""
"现在， :func:`_thread.interrupt_main` 接受一个可选的信号值参数进行模拟（默认仍为 "
":data:`signal.SIGINT`）。（由 Antoine Pitrou 贡献于 :issue:`43356` ）"

#: ../../whatsnew/3.10.rst:1425
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.10.rst:1427
msgid ""
"Add :func:`threading.gettrace` and :func:`threading.getprofile` to retrieve "
"the functions set by :func:`threading.settrace` and "
":func:`threading.setprofile` respectively. (Contributed by Mario Corchero in"
" :issue:`42251`.)"
msgstr ""
"加入 :func:`threading.gettrace` 和 :func:`threading.getprofile` ，分别用于获取 "
":func:`threading.settrace` 和 :func:`threading.setprofile` 设置的函数。（由Mario "
"Corchero 贡献于 :issue:`42251` ）"

#: ../../whatsnew/3.10.rst:1432
msgid ""
"Add :data:`threading.__excepthook__` to allow retrieving the original value "
"of :func:`threading.excepthook` in case it is set to a broken or a different"
" value. (Contributed by Mario Corchero in :issue:`42308`.)"
msgstr ""
"加入 :data:`threading.__excepthook__` ，用于获取  :func:`threading.excepthook` "
"的初始值，以防被设为一个差劲或其他的值。（由 Mario Corchero 贡献于 :issue:`42308` ）"

#: ../../whatsnew/3.10.rst:1438
msgid "traceback"
msgstr "回溯"

#: ../../whatsnew/3.10.rst:1440
msgid ""
"The :func:`~traceback.format_exception`, "
":func:`~traceback.format_exception_only`, and "
":func:`~traceback.print_exception` functions can now take an exception "
"object as a positional-only argument. (Contributed by Zackery Spytz and "
"Matthias Bussonnier in :issue:`26389`.)"
msgstr ""
"现在，:func:`~traceback.format_exception` 、 "
":func:`~traceback.format_exception_only` 和 "
":func:`~traceback.print_exception` 函数可以接受一个异常对象，作为唯一的位置参数。（由 Zackery Spytz 和"
" Matthias Bussonnier 贡献于 :issue:`26389`）"

#: ../../whatsnew/3.10.rst:1447
msgid "types"
msgstr "types"

#: ../../whatsnew/3.10.rst:1449
msgid ""
"Reintroduce the :data:`types.EllipsisType`, :data:`types.NoneType` and "
":data:`types.NotImplementedType` classes, providing a new set of types "
"readily interpretable by type checkers. (Contributed by Bas van Beek in "
":issue:`41810`.)"
msgstr ""
"重新引入 :data:`types.EllipsisType` 、 :data:`types.NoneType` 和 "
":data:`types.NotImplementedType` 类，以提供一套新的类型，可供类型检查程序解释。（由 Bas van Beek 贡献于 "
":issue:`41810`）"

#: ../../whatsnew/3.10.rst:1455
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.10.rst:1457
msgid "For major changes, see :ref:`new-feat-related-type-hints`."
msgstr "主要的变化参阅 :ref:`new-feat-related-type-hints` 。"

#: ../../whatsnew/3.10.rst:1459
msgid ""
"The behavior of :class:`typing.Literal` was changed to conform with "
":pep:`586` and to match the behavior of static type checkers specified in "
"the PEP."
msgstr ":class:`typing.Literal` 的行为被改为遵循 :pep:`586` 并匹配该 PEP 所描述的静态类型检查器的行为。"

#: ../../whatsnew/3.10.rst:1462
msgid "``Literal`` now de-duplicates parameters."
msgstr "``Literal`` 现在将是去重复的形参。"

#: ../../whatsnew/3.10.rst:1463
msgid ""
"Equality comparisons between ``Literal`` objects are now order independent."
msgstr "``Literal`` 对象间的相等性比较现在将是顺序无关的。"

#: ../../whatsnew/3.10.rst:1464
msgid ""
"``Literal`` comparisons now respect types.  For example, ``Literal[0] == "
"Literal[False]`` previously evaluated to ``True``.  It is now ``False``.  To"
" support this change, the internally used type cache now supports "
"differentiating types."
msgstr ""
"``Literal`` 比较现在会考虑类型。 例如 ``Literal[0] == Literal[False]`` 之前的结果值为 ``True``。"
" 现在则为 ``False``。 为支持此改变，内部使用的类型缓存现在也支持区分类型。"

#: ../../whatsnew/3.10.rst:1468
msgid ""
"``Literal`` objects will now raise a :exc:`TypeError` exception during "
"equality comparisons if any of their parameters are not :term:`hashable`. "
"Note that declaring ``Literal`` with unhashable parameters will not throw an"
" error::"
msgstr ""
"现在，如果 ``Literal`` 对象的任何参数都不是 :term:`hashable` ，在相等性比较时将引发 :exc:`TypeError` "
"异常。请注意，在声明 ``Literal`` 时，参数不可哈希不会抛出错误："

#: ../../whatsnew/3.10.rst:1480
msgid "(Contributed by Yurii Karabas in :issue:`42345`.)"
msgstr "（由 Yurii Karabas 在 :issue:`42345` 中贡献。）"

#: ../../whatsnew/3.10.rst:1482
msgid ""
"Add new function :func:`typing.is_typeddict` to introspect if an annotation "
"is a :class:`typing.TypedDict`. (Contributed by Patrick Reader in "
":issue:`41792`.)"
msgstr ""
"加入新函数 :func:`typing.is_typeddict` 用于内部检查标注是否为 :class:`typing.TypedDict`。 （由 "
"Patrick Reader 在 :issue:`41792` 中贡献。）"

#: ../../whatsnew/3.10.rst:1486
msgid ""
"Subclasses of ``typing.Protocol`` which only have data variables declared "
"will now raise a ``TypeError`` when checked with ``isinstance`` unless they "
"are decorated with :func:`runtime_checkable`.  Previously, these checks "
"passed silently.  Users should decorate their subclasses with the "
":func:`runtime_checkable` decorator if they want runtime protocols. "
"(Contributed by Yurii Karabas in :issue:`38908`.)"
msgstr ""
"现在只声明了数据变量的 ``typing.Protocol`` 子类当使用 ``isinstance`` 检查时将引发 ``TypeError`` "
"除非是带有 :func:`runtime_checkable` 装饰器。 在之前版本中，这些检查是静默通过的。 如果用户需要运行时协议则应当对其子类设置"
" :func:`runtime_checkable` 装饰器。 （由 Yurii Karabas 在 :issue:`38908` 中贡献。）"

#: ../../whatsnew/3.10.rst:1494
msgid ""
"Importing from the ``typing.io`` and ``typing.re`` submodules will now emit "
":exc:`DeprecationWarning`.  These submodules have been deprecated since "
"Python 3.8 and will be removed in a future version of Python.  Anything "
"belonging to those submodules should be imported directly from :mod:`typing`"
" instead. (Contributed by Sebastian Rittau in :issue:`38291`.)"
msgstr ""
"从 ``typing.io`` 和 ``typing.re`` 子模块导入现在将发出 :exc:`DeprecationWarning`。 这些子模块从"
" Python 3.8 开始已被弃用并将在未来的某个 Python 版本中被移除。 任何属于这些子模块的东西都应当改为直接从 :mod:`typing`"
" 导入。 （由 Sebastian Rittau 在 :issue:`38291` 中贡献。）"

#: ../../whatsnew/3.10.rst:1502
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.10.rst:1504
msgid ""
"Add new method :meth:`~unittest.TestCase.assertNoLogs` to complement the "
"existing :meth:`~unittest.TestCase.assertLogs`. (Contributed by Kit Yan Choi"
" in :issue:`39385`.)"
msgstr ""
"加入新方法 :meth:`~unittest.TestCase.assertNoLogs` ，以补充现有的 "
":meth:`~unittest.TestCase.assertLogs`。（由 Kit Yan Choi 贡献于 :issue:`39385` ）"

#: ../../whatsnew/3.10.rst:1509
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.10.rst:1511
msgid ""
"Python versions earlier than Python 3.10 allowed using both ``;`` and ``&`` "
"as query parameter separators in :func:`urllib.parse.parse_qs` and "
":func:`urllib.parse.parse_qsl`.  Due to security concerns, and to conform "
"with newer W3C recommendations, this has been changed to allow only a single"
" separator key, with ``&`` as the default.  This change also affects "
":func:`cgi.parse` and :func:`cgi.parse_multipart` as they use the affected "
"functions internally.  For more details, please see their respective "
"documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin"
" in :issue:`42967`.)"
msgstr ""
"Python 3.10 以下版本允许在 :func:`urllib.parse.parse_qs` 和 "
":func:`urllib.parse.parse_qsl` 中同时使用 ``;`` 和 ``&`` 作为查询参数分隔符。出于安全考虑，并符合 W3C "
"最新的建议，这已经被修改为只允许用一种分隔符，默认值为 ``&``。 这一改变也影响到了 :func:`cgi.parse` 和 "
":func:`cgi.parse_multipart`，因为他们内部用到了这些函数。更多细节，请参阅各自的文档。（由 Adam Goldschmidt "
"、 Senthil Kumaran 和 Ken Jin 贡献于 :issue:`42967` ）"

#: ../../whatsnew/3.10.rst:1521
msgid ""
"The presence of newline or tab characters in parts of a URL allows for some "
"forms of attacks. Following the WHATWG specification that updates "
":rfc:`3986`, ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters are "
"stripped from the URL by the parser in :mod:`urllib.parse` preventing such "
"attacks. The removal characters are controlled by a new module level "
"variable ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See :issue:`43882`)"
msgstr ""
"在 URL 中存在换行符或制表符，可能会导致某些形式的攻击。根据 WHATWG 的规范更新了:rfc:`3986`， "
":mod:`urllib.parse` 中的解析器将从 URL 中移除 ASCII 换行符 ``\\n`` 、``\\r`` 和 "
"``\\t``字符，以防止这种攻击。将移除的字符由一个新的模块级变量``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``"
" 控制。（参阅 :issue:`43882` ）"

#: ../../whatsnew/3.10.rst:1529
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.10.rst:1531
msgid ""
"Add a :class:`~xml.sax.handler.LexicalHandler` class to the "
":mod:`xml.sax.handler` module. (Contributed by Jonathan Gossage and Zackery "
"Spytz in :issue:`35018`.)"
msgstr ""
"在 :mod:`xml.sax.handler` 模块中加入一个 :class:`~xml.sax.handler.LexicalHandler` "
"类。（由 Jonathan Gossage 和 Zackery Spytz 贡献于 :issue:`35018` ）"

#: ../../whatsnew/3.10.rst:1536
msgid "zipimport"
msgstr "zipimport"

#: ../../whatsnew/3.10.rst:1537
msgid ""
"Add methods related to :pep:`451`: :meth:`~zipimport.zipimporter.find_spec`,"
" :meth:`zipimport.zipimporter.create_module`, and "
":meth:`zipimport.zipimporter.exec_module`. (Contributed by Brett Cannon in "
":issue:`42131`.)"
msgstr ""
"加入 :pep:`451` 相关的方法： :meth:`~zipimport.zipimporter.find_spec` "
"、:meth:`zipimport.zipimporter.create_module` 和 "
":meth:`zipimport.zipimporter.exec_module`。（由 Brett Cannon 贡献于 :issue:`42131`"
" ）"

#: ../../whatsnew/3.10.rst:1542
msgid ""
"Add :meth:`~zipimport.zipimporter.invalidate_caches` method. (Contributed by"
" Desmond Cheong in :issue:`14678`.)"
msgstr ""
"加入 :meth:`~zipimport.zipimporter.invalidate_caches` 方法。（由 Desmond Cheong 贡献于"
" :issue:`14678` ）"

#: ../../whatsnew/3.10.rst:1547
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.10.rst:1549
msgid ""
"Constructors :func:`str`, :func:`bytes` and :func:`bytearray` are now faster"
" (around 30--40% for small objects). (Contributed by Serhiy Storchaka in "
":issue:`41334`.)"
msgstr ""
"现在，构造函数 :func:`str` 、 :func:`bytes` 和 :func:`bytearray` 速度更快了（小对象大约提速 "
"30-40%）。（由 Serhiy Storchaka 贡献于 :issue:`41334` ）"

#: ../../whatsnew/3.10.rst:1553
msgid ""
"The :mod:`runpy` module now imports fewer modules. The ``python3 -m module-"
"name`` command startup time is 1.4x faster in average. On Linux, ``python3 "
"-I -m module-name`` imports 69 modules on Python 3.9, whereas it only "
"imports 51 modules (-18) on Python 3.10. (Contributed by Victor Stinner in "
":issue:`41006` and :issue:`41718`.)"
msgstr ""
"现在， :mod:`runpy` 导入的模块变少了。``python3 -m module-name`` 命令的启动时间平均加快 1.4 倍。在 "
"Linux 上，Python 3.9 的 ``python3 -I -m module-name`` 导入了69个模块，而 Python 3.10 "
"只导入了 51个模块（少了 18 个）。（由 Victor Stinner 贡献于 :issue:`41006` 和 :issue:`41718`）"

#: ../../whatsnew/3.10.rst:1559
msgid ""
"The ``LOAD_ATTR`` instruction now uses new \"per opcode cache\" mechanism.  "
"It is about 36% faster now for regular attributes and 44% faster for slots. "
"(Contributed by Pablo Galindo and Yury Selivanov in :issue:`42093` and Guido"
" van Rossum in :issue:`42927`, based on ideas implemented originally in PyPy"
" and MicroPython.)"
msgstr ""
"现在， ``LOAD_ATTR`` 指令会使用新的“单独操作码缓存”机制。对于常规属性大约会提速 36%，而对于槽位属性会加快 44%。（由 Pablo"
" Galindo 和 Yury Selivanov 贡献于 :issue:`42093` ），并由 Guido van Rossum 贡献于 "
":issue:`42927`，基于最初在 PyPy 和 MicroPython 中实现的思路。）"

#: ../../whatsnew/3.10.rst:1565
msgid ""
"When building Python with :option:`--enable-optimizations` now ``-fno-"
"semantic-interposition`` is added to both the compile and link line. This "
"speeds builds of the Python interpreter created with :option:`--enable-"
"shared` with ``gcc`` by up to 30%. See `this article "
"<https://developers.redhat.com/blog/2020/06/25/red-hat-enterprise-"
"linux-8-2-brings-faster-python-3-8-run-speeds/>`_ for more details. "
"(Contributed by Victor Stinner and Pablo Galindo in :issue:`38980`.)"
msgstr ""
"现在，当用 :option:`--enable-optimizations` 构建 Python 时，会在编译和链接命令行中添加 ``-fno-"
"semantic-interposition``。 这会让用带参数 :option:`--enable-shared` 的  ``gcc`` 构建 "
"Python 解释器时提速 30%。详情请参阅`这篇文章 "
"<https://developers.redhat.com/blog/2020/06/25/red-hat-enterprise-"
"linux-8-2-brings-faster-python-3-8-run-speeds/>`_ 。（由 Victor Stinner 和 Pablo"
" Galindo 贡献于 :issue:`38980` ）"

#: ../../whatsnew/3.10.rst:1573
msgid ""
"Use a new output buffer management code for :mod:`bz2` / :mod:`lzma` / "
":mod:`zlib` modules, and add ``.readall()`` function to "
"``_compression.DecompressReader`` class. bz2 decompression is now 1.09x ~ "
"1.17x faster, lzma decompression 1.20x ~ 1.32x faster, ``GzipFile.read(-1)``"
" 1.11x ~ 1.18x faster. (Contributed by Ma Lin, reviewed by Gregory P. Smith,"
" in :issue:`41486`)"
msgstr ""
":mod:`bz2` / :mod:`lzma` / :mod:`zlib` 模块用了新的输出缓冲区管理代码，并在  "
"``_compression.DecompressReader`` 类中添加 ``.readall()`` 函数。现在，bz2 解压过程提速了 1.09"
" 倍 ~ 1.17 倍，lzma 解压快了 1.20 倍 ~ 1.32 倍， ``GzipFile.read(-1)`` 快了 1.11 倍 ~ "
"1.18 倍。（由 Ma Lin 贡献，由 Gregory P. Smith 审查， :issue:`41486`）"

#: ../../whatsnew/3.10.rst:1579
msgid ""
"When using stringized annotations, annotations dicts for functions are no "
"longer created when the function is created.  Instead, they are stored as a "
"tuple of strings, and the function object lazily converts this into the "
"annotations dict on demand.  This optimization cuts the CPU time needed to "
"define an annotated function by half. (Contributed by Yurii Karabas and "
"Inada Naoki in :issue:`42202`.)"
msgstr ""
"当使用字符串化的标注时，函数的标注字典不再是在创建函数时被创建。 它们被改为存储为字符串元组，并且函数对象会在需要时延迟转换为标注字典。 "
"这一优化可将定义带标注函数的 CPU 时间减少一半。 （由 Yurii Karabas 和 Inada Naoki 在 :issue:`42202` "
"中贡献。）"

#: ../../whatsnew/3.10.rst:1586
msgid ""
"Substring search functions such as ``str1 in str2`` and ``str2.find(str1)`` "
"now sometimes use Crochemore & Perrin's \"Two-Way\" string searching "
"algorithm to avoid quadratic behavior on long strings.  (Contributed by "
"Dennis Sweeney in :issue:`41972`)"
msgstr ""
"现在，子串搜索函数，如 ``str1 in str2`` 和 ``str2.find(str1)`` ，有时会采用Crochemore & "
"Perrin的“二路归并”字符串搜索算法，以避免长字符串的二次检索行为。（由 Dennis Sweeney 贡献于 :issue:`41972` ）"

#: ../../whatsnew/3.10.rst:1591
msgid ""
"Add micro-optimizations to ``_PyType_Lookup()`` to improve type attribute "
"cache lookup performance in the common case of cache hits. This makes the "
"interpreter 1.04 times faster on average. (Contributed by Dino Viehland in "
":issue:`43452`.)"
msgstr ""
"为 ``_PyType_Lookup()`` 增加微幅优化以提高类型属性缓存查询在常见缓存命中情况下的性能。 这使得解释器的平均速度提升至 1.04 "
"倍。 （由 Dino Viehland 在 :issue:`43452` 中贡献。）"

#: ../../whatsnew/3.10.rst:1595
msgid ""
"The following built-in functions now support the faster :pep:`590` "
"vectorcall calling convention: :func:`map`, :func:`filter`, "
":func:`reversed`, :func:`bool` and :func:`float`. (Contributed by Dong-hee "
"Na and Jeroen Demeyer in :issue:`43575`, :issue:`43287`, :issue:`41922`, "
":issue:`41873` and :issue:`41870`.)"
msgstr ""
"下列内置函数现在支持更快速的 :pep:`590` vectorcall 调用约定: :func:`map`, :func:`filter`, "
":func:`reversed`, :func:`bool` 和 :func:`float`。 （由 Dong-hee Na 和 Jeroen "
"Demeyer 在 :issue:`43575`, :issue:`43287`, :issue:`41922`, :issue:`41873` 和 "
":issue:`41870` 中贡献。）"

#: ../../whatsnew/3.10.rst:1599
msgid ""
":class:`BZ2File` performance is improved by removing internal ``RLock``. "
"This makes :class:`BZ2File` thread unsafe in the face of multiple "
"simultaneous readers or writers, just like its equivalent classes in "
":mod:`gzip` and :mod:`lzma` have always been.  (Contributed by Inada Naoki "
"in :issue:`43785`.)"
msgstr ""
":class:`BZ2File` 的性能通过移除内部的 ``RLock`` 获得改善。 这使得 :class:`BZ2File` "
"在面对多个同时的读取器和写入器不再是线程安全的，，就像 :mod:`gzip` 和 :mod:`lzma` 中的对应类一直以来的情况一样。 （由 "
"Inada Naoki 在 :issue:`43785` 中贡献。）"

#: ../../whatsnew/3.10.rst:1607 ../../whatsnew/3.10.rst:2213
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.10.rst:1609
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  Starting in this release, a "
"deprecation warning is raised if the numeric literal is immediately followed"
" by one of keywords :keyword:`and`, :keyword:`else`, :keyword:`for`, "
":keyword:`if`, :keyword:`in`, :keyword:`is` and :keyword:`or`. In future "
"releases it will be changed to syntax warning, and finally to syntax error. "
"(Contributed by Serhiy Storchaka in :issue:`43833`.)"
msgstr ""
"目前 Python 接受数字类字面值后面紧跟关键字的写法，例如 ``0in x``, ``1or x``, ``0if 1else 2``。 它将允许像"
" ``[0x1for x in y]`` 这样令人困惑且模棱两可的表达式 (它可以被解读为 ``[0x1 for x in y]`` 或者 "
"``[0x1f or x in y]``)。 从本发布版开始，如果数字类字面值后面紧跟关键字 :keyword:`and`, "
":keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :keyword:`is`"
" 和 :keyword:`or` 中的一个将会引发弃用警告。 在未来的版本中它将改为语法警告，最终将改为语法错误。 （由 Serhiy "
"Storchaka 在 :issue:`43833` 中贡献。）"

#: ../../whatsnew/3.10.rst:1620
msgid ""
"Starting in this release, there will be a concerted effort to begin cleaning"
" up old import semantics that were kept for Python 2.7 compatibility. "
"Specifically, "
":meth:`~importlib.abc.PathEntryFinder.find_loader`/:meth:`~importlib.abc.Finder.find_module`"
" (superseded by :meth:`~importlib.abc.Finder.find_spec`), "
":meth:`~importlib.abc.Loader.load_module` (superseded by "
":meth:`~importlib.abc.Loader.exec_module`), "
":meth:`~importlib.abc.Loader.module_repr` (which the import system takes "
"care of for you), the ``__package__`` attribute (superseded by "
"``__spec__.parent``), the ``__loader__`` attribute (superseded by "
"``__spec__.loader``), and the ``__cached__`` attribute (superseded by "
"``__spec__.cached``) will slowly be removed (as well as other classes and "
"methods in :mod:`importlib`). :exc:`ImportWarning` and/or "
":exc:`DeprecationWarning` will be raised as appropriate to help identify "
"code which needs updating during this transition."
msgstr ""
"从本发布版开始，将发起一次协同行动来清理为兼容 Python 2.7 而保留的旧导入语义。 "
"具体内容如下，:meth:`~importlib.abc.PathEntryFinder.find_loader`/:meth:`~importlib.abc.Finder.find_module`"
" (被 :meth:`~importlib.abc.Finder.find_spec` 取代), "
":meth:`~importlib.abc.Loader.load_module` (被 "
":meth:`~importlib.abc.Loader.exec_module` 取代), "
":meth:`~importlib.abc.Loader.module_repr` (由导入系统负责处理), ``__package__`` 属性 (被"
" ``__spec__.parent`` 取代), ``__loader__`` 属性 (被 ``__spec__.loader`` 取代), 以及 "
"``__cached__`` 属性 (被 ``__spec__.cached`` 取代) 将被逐步移除 (还包括 :mod:`importlib` "
"中的其他类和方法)。 :exc:`ImportWarning` 和/或 :exc:`DeprecationWarning` "
"将被相应地引发以帮助在过渡期间识别需要更新的代码。"

#: ../../whatsnew/3.10.rst:1637
msgid ""
"The entire ``distutils`` namespace is deprecated, to be removed in Python "
"3.12. Refer to the :ref:`module changes <distutils-deprecated>` section for "
"more information."
msgstr ""
"整个 ``distutils`` 命名空间已被弃用，并将在 Python 3.12 中被移除。 请参阅 :ref:`模块的变化 <distutils-"
"deprecated>` 一节了解更多信息。"

#: ../../whatsnew/3.10.rst:1641
msgid ""
"Non-integer arguments to :func:`random.randrange` are deprecated. The "
":exc:`ValueError` is deprecated in favor of a :exc:`TypeError`. (Contributed"
" by Serhiy Storchaka and Raymond Hettinger in :issue:`37319`.)"
msgstr ""
":func:`random.randrange` 的非整数参数已被弃用。 :exc:`ValueError` 已被弃用而应改用 "
":exc:`TypeError`。（由 Serhiy Storchaka 和 Raymond Hettinger 贡献于 :issue:`37319` "
"）"

#: ../../whatsnew/3.10.rst:1645
msgid ""
"The various ``load_module()`` methods of :mod:`importlib` have been "
"documented as deprecated since Python 3.6, but will now also trigger a "
":exc:`DeprecationWarning`. Use :meth:`~importlib.abc.Loader.exec_module` "
"instead. (Contributed by Brett Cannon in :issue:`26131`.)"
msgstr ""
":mod:`importlib` 的各种 ``load_module()`` 方法自 Python 3.6 起就已被记录为弃用，现在还会触发 "
":exc:`DeprecationWarning`。请改用 :meth:`~importlib.abc.Loader.exec_module`。（由 "
"Brett Cannon 贡献于 :issue:`26131` ）"

#: ../../whatsnew/3.10.rst:1651
msgid ""
":meth:`zimport.zipimporter.load_module` has been deprecated in preference "
"for :meth:`~zipimport.zipimporter.exec_module`. (Contributed by Brett Cannon"
" in :issue:`26131`.)"
msgstr ""
":meth:`zimport.zipimporter.load_module` 已弃用并被 "
":meth:`~zipimport.zipimporter.exec_module` 代替。 （由 Brett Cannon 在 "
":issue:`26131` 中贡献。）"

#: ../../whatsnew/3.10.rst:1655
msgid ""
"The use of :meth:`~importlib.abc.Loader.load_module` by the import system "
"now triggers an :exc:`ImportWarning` as "
":meth:`~importlib.abc.Loader.exec_module` is preferred. (Contributed by "
"Brett Cannon in :issue:`26131`.)"
msgstr ""
"现在导入时使用 :meth:`~importlib.abc.Loader.load_module` 会引发 :exc:`ImportWarning` "
"，应改用 :meth:`~importlib.abc.Loader.exec_module`。 （由 Brett Cannon 贡献于 "
":issue:`26131` ）"

#: ../../whatsnew/3.10.rst:1660
msgid ""
"The use of :meth:`importlib.abc.MetaPathFinder.find_module` and "
":meth:`importlib.abc.PathEntryFinder.find_module` by the import system now "
"trigger an :exc:`ImportWarning` as "
":meth:`importlib.abc.MetaPathFinder.find_spec` and "
":meth:`importlib.abc.PathEntryFinder.find_spec` are preferred, respectively."
" You can use :func:`importlib.util.spec_from_loader` to help in porting. "
"(Contributed by Brett Cannon in :issue:`42134`.)"
msgstr ""
"现在导入系统使用 :meth:`importlib.abc.MetaPathFinder.find_module` 和 "
":meth:`importlib.abc.PathEntryFinder.find_module` 会引发 :exc:`ImportWarning` "
"而应分别改用 :meth:`importlib.abc.MetaPathFinder.find_spec` 和 "
":meth:`importlib.abc.PathEntryFinder.find_spec`。 你可以使用 "
":func:`importlib.util.spec_from_loader` 来帮助移植。 （由 Brett Cannon 在 "
":issue:`42134` 中贡献。）"

#: ../../whatsnew/3.10.rst:1669
msgid ""
"The use of :meth:`importlib.abc.PathEntryFinder.find_loader` by the import "
"system now triggers an :exc:`ImportWarning` as "
":meth:`importlib.abc.PathEntryFinder.find_spec` is preferred. You can use "
":func:`importlib.util.spec_from_loader` to help in porting. (Contributed by "
"Brett Cannon in :issue:`43672`.)"
msgstr ""
"现在导入系统使用 :meth:`importlib.abc.PathEntryFinder.find_loader` 会引发 "
":exc:`ImportWarning` 而应改用 :meth:`importlib.abc.PathEntryFinder.find_spec`。 "
"你可以使用 :func:`importlib.util.spec_from_loader` 来帮助移植。 （由 Brett Cannon 在 "
":issue:`43672` 中贡献。）"

#: ../../whatsnew/3.10.rst:1675
msgid ""
"The various implementations of "
":meth:`importlib.abc.MetaPathFinder.find_module` ( "
":meth:`importlib.machinery.BuiltinImporter.find_module`, "
":meth:`importlib.machinery.FrozenImporter.find_module`, "
":meth:`importlib.machinery.WindowsRegistryFinder.find_module`, "
":meth:`importlib.machinery.PathFinder.find_module`, "
":meth:`importlib.abc.MetaPathFinder.find_module` ), "
":meth:`importlib.abc.PathEntryFinder.find_module` ( "
":meth:`importlib.machinery.FileFinder.find_module` ), and "
":meth:`importlib.abc.PathEntryFinder.find_loader` ( "
":meth:`importlib.machinery.FileFinder.find_loader` ) now raise "
":exc:`DeprecationWarning` and are slated for removal in Python 3.12 "
"(previously they were documented as deprecated in Python 3.4). (Contributed "
"by Brett Cannon in :issue:`42135`.)"
msgstr ""
"现在 :meth:`importlib.abc.MetaPathFinder.find_module` ( "
":meth:`importlib.machinery.BuiltinImporter.find_module`, "
":meth:`importlib.machinery.FrozenImporter.find_module`, "
":meth:`importlib.machinery.WindowsRegistryFinder.find_module`, "
":meth:`importlib.machinery.PathFinder.find_module`, "
":meth:`importlib.abc.MetaPathFinder.find_module`), "
":meth:`importlib.abc.PathEntryFinder.find_module` ( "
":meth:`importlib.machinery.FileFinder.find_module` ),  和 "
":meth:`importlib.abc.PathEntryFinder.find_loader` ( "
":meth:`importlib.machinery.FileFinder.find_loader` ) 的各个实现会引发 "
":exc:`DeprecationWarning` 并预定在 Python 3.12 中被移除（之前它们在 Python 3.4 中就被记录为已弃用）。"
" （由 Brett Cannon 在 :issue:`42135` 中贡献。）"

#: ../../whatsnew/3.10.rst:1690
msgid ""
":class:`importlib.abc.Finder` is deprecated (including its sole method, "
":meth:`~importlib.abc.Finder.find_module`). Both "
":class:`importlib.abc.MetaPathFinder` and "
":class:`importlib.abc.PathEntryFinder` no longer inherit from the class. "
"Users should inherit from one of these two classes as appropriate instead. "
"(Contributed by Brett Cannon in :issue:`42135`.)"
msgstr ""
":class:`importlib.abc.Finder` 已被弃用 (包括它唯一的方法 "
":meth:`~importlib.abc.Finder.find_module`)。 "
":class:`importlib.abc.MetaPathFinder` 和 "
":class:`importlib.abc.PathEntryFinder` 都不再继承该类。 用户应当改为继承这两个类中的一个。 （由 Brett "
"Cannon 在 :issue:`42135` 中贡献。）"

#: ../../whatsnew/3.10.rst:1697
msgid ""
"The deprecations of :mod:`imp`, :func:`importlib.find_loader`, "
":func:`importlib.util.set_package_wrapper`, "
":func:`importlib.util.set_loader_wrapper`, "
":func:`importlib.util.module_for_loader`, :class:`pkgutil.ImpImporter`, and "
":class:`pkgutil.ImpLoader` have all been updated to list Python 3.12 as the "
"slated version of removal (they began raising :exc:`DeprecationWarning` in "
"previous versions of Python). (Contributed by Brett Cannon in "
":issue:`43720`.)"
msgstr ""
":mod:`imp`, :func:`importlib.find_loader`, "
":func:`importlib.util.set_package_wrapper`, "
":func:`importlib.util.set_loader_wrapper`, "
":func:`importlib.util.module_for_loader`, :class:`pkgutil.ImpImporter` 和 "
":class:`pkgutil.ImpLoader` 的弃用状态已被更新以将 Python 3.12 列为预定要移除它们的版本 (它们在之前的 "
"Python 版本中已开始引发 :exc:`DeprecationWarning`)。 （由 Brett Cannon 在 :issue:`43720`"
" 中贡献。）.)"

#: ../../whatsnew/3.10.rst:1707
msgid ""
"The import system now uses the ``__spec__`` attribute on modules before "
"falling back on :meth:`~importlib.abc.Loader.module_repr` for a module's "
"``__repr__()`` method. Removal of the use of ``module_repr()`` is scheduled "
"for Python 3.12. (Contributed by Brett Cannon in :issue:`42137`.)"
msgstr ""
"现在导入系统会先使用模块上的 ``__spec__`` 属性再回退到 :meth:`~importlib.abc.Loader.module_repr`"
" 来使用模块的 ``__repr__()`` 方法。 对 ``module_repr()`` 的使用预定在 Python 3.12 中移除。 （由 "
"Brett Cannon 在 :issue:`42137` 中贡献。）"

#: ../../whatsnew/3.10.rst:1713
msgid ""
":meth:`importlib.abc.Loader.module_repr`, "
":meth:`importlib.machinery.FrozenLoader.module_repr`, and "
":meth:`importlib.machinery.BuiltinLoader.module_repr` are deprecated and "
"slated for removal in Python 3.12. (Contributed by Brett Cannon in "
":issue:`42136`.)"
msgstr ""
":meth:`importlib.abc.Loader.module_repr`, "
":meth:`importlib.machinery.FrozenLoader.module_repr` 和 "
":meth:`importlib.machinery.BuiltinLoader.module_repr` 已被弃用并预定在 Python 3.12 "
"中移除。 （由 Brett Cannon 在 :issue:`42136` 中贡献。）"

#: ../../whatsnew/3.10.rst:1719
msgid ""
"``sqlite3.OptimizedUnicode`` has been undocumented and obsolete since Python"
" 3.3, when it was made an alias to :class:`str`.  It is now deprecated, "
"scheduled for removal in Python 3.12. (Contributed by Erlend E. Aasland in "
":issue:`42264`.)"
msgstr ""
"``sqlite3.OptimizedUnicode`` 自 Python 3.3 起就被移出文档并设为过时，当时它是被设为 :class:`str` "
"的别名。 现在它已被弃用，预定在 Python 3.12 中移除。 （由 Erlend E. Aasland 在 :issue:`42264` "
"中贡献。）"

#: ../../whatsnew/3.10.rst:1724
msgid ""
"The undocumented built-in function ``sqlite3.enable_shared_cache`` is now "
"deprecated, scheduled for removal in Python 3.12.  Its use is strongly "
"discouraged by the SQLite3 documentation.  See `the SQLite3 docs "
"<https://sqlite.org/c3ref/enable_shared_cache.html>`_ for more details. If a"
" shared cache must be used, open the database in URI mode using the "
"``cache=shared`` query parameter. (Contributed by Erlend E. Aasland in "
":issue:`24464`.)"
msgstr ""
"未记入文档的内置函数 ``sqlite3.enable_shared_cache`` 现在已被弃用，预定在 Python 3.12 中移除。 "
"SQLite3 强烈不建议使用它。  请参阅 `SQLite3 文档 "
"<https://sqlite.org/c3ref/enable_shared_cache.html>`_ 了解详情。  "
"如果必须要使用共享缓冲区，请使用 ``cache=shared`` 查询参数来以 URI 模式打开数据库。 （由 Erlend E. Aasland 在"
" :issue:`24464` 中贡献。）"

#: ../../whatsnew/3.10.rst:1732
msgid "The following ``threading`` methods are now deprecated:"
msgstr "以下 ``threading`` 方法已被弃用:"

#: ../../whatsnew/3.10.rst:1734
msgid "``threading.currentThread`` => :func:`threading.current_thread`"
msgstr "``threading.currentThread`` => :func:`threading.current_thread`"

#: ../../whatsnew/3.10.rst:1736
msgid "``threading.activeCount`` => :func:`threading.active_count`"
msgstr "``threading.activeCount`` => :func:`threading.active_count`"

#: ../../whatsnew/3.10.rst:1738
msgid ""
"``threading.Condition.notifyAll`` => :meth:`threading.Condition.notify_all`"
msgstr ""
"``threading.Condition.notifyAll`` => :meth:`threading.Condition.notify_all`"

#: ../../whatsnew/3.10.rst:1741
msgid "``threading.Event.isSet`` => :meth:`threading.Event.is_set`"
msgstr "``threading.Event.isSet`` => :meth:`threading.Event.is_set`"

#: ../../whatsnew/3.10.rst:1743
msgid "``threading.Thread.setName`` => :attr:`threading.Thread.name`"
msgstr "``threading.Thread.setName`` => :attr:`threading.Thread.name`"

#: ../../whatsnew/3.10.rst:1745
msgid "``threading.thread.getName`` => :attr:`threading.Thread.name`"
msgstr "``threading.thread.getName`` => :attr:`threading.Thread.name`"

#: ../../whatsnew/3.10.rst:1747
msgid "``threading.Thread.isDaemon`` => :attr:`threading.Thread.daemon`"
msgstr "``threading.Thread.isDaemon`` => :attr:`threading.Thread.daemon`"

#: ../../whatsnew/3.10.rst:1749
msgid "``threading.Thread.setDaemon`` => :attr:`threading.Thread.daemon`"
msgstr "``threading.Thread.setDaemon`` => :attr:`threading.Thread.daemon`"

#: ../../whatsnew/3.10.rst:1751
msgid "(Contributed by Jelle Zijlstra in :gh:`87889`.)"
msgstr "（由 Jelle Zijlstra 在 :gh:`87889` 中贡献。）"

#: ../../whatsnew/3.10.rst:1753
msgid ""
":meth:`pathlib.Path.link_to` is deprecated and slated for removal in Python "
"3.12. Use :meth:`pathlib.Path.hardlink_to` instead. (Contributed by Barney "
"Gale in :issue:`39950`.)"
msgstr ""
":meth:`pathlib.Path.link_to` 已被弃用并预定在 Python 3.12 中移除。 请改用 "
":meth:`pathlib.Path.hardlink_to`。 （由 Barney Gale 在 :issue:`39950` 中贡献。）"

#: ../../whatsnew/3.10.rst:1757
msgid ""
"``cgi.log()`` is deprecated and slated for removal in Python 3.12. "
"(Contributed by Inada Naoki in :issue:`41139`.)"
msgstr ""
"``cgi.log()`` 已被弃用并预定在 Python 3.12 中移除。 （由 Inada Naoki 在 :issue:`41139` "
"中贡献。）"

#: ../../whatsnew/3.10.rst:1760
msgid ""
"The following :mod:`ssl` features have been deprecated since Python 3.6, "
"Python 3.7, or OpenSSL 1.1.0 and will be removed in 3.11:"
msgstr ""
"以下 :mod:`ssl` 特性自 Python 3.6, Python 3.7 或 OpenSSL 1.1.0 起已被弃用并将在 3.11 中移除:"

#: ../../whatsnew/3.10.rst:1763
msgid ""
":data:`~ssl.OP_NO_SSLv2`, :data:`~ssl.OP_NO_SSLv3`, "
":data:`~ssl.OP_NO_TLSv1`, :data:`~ssl.OP_NO_TLSv1_1`, "
":data:`~ssl.OP_NO_TLSv1_2`, and :data:`~ssl.OP_NO_TLSv1_3` are replaced by "
":attr:`sslSSLContext.minimum_version` and "
":attr:`sslSSLContext.maximum_version`."
msgstr ""
":data:`~ssl.OP_NO_SSLv2`, :data:`~ssl.OP_NO_SSLv3`, "
":data:`~ssl.OP_NO_TLSv1`, :data:`~ssl.OP_NO_TLSv1_1`, "
":data:`~ssl.OP_NO_TLSv1_2` 及 :data:`~ssl.OP_NO_TLSv1_3` 会被 "
":attr:`sslSSLContext.minimum_version` 和 "
":attr:`sslSSLContext.maximum_version` 代替。"

#: ../../whatsnew/3.10.rst:1769
msgid ""
":data:`~ssl.PROTOCOL_SSLv2`, :data:`~ssl.PROTOCOL_SSLv3`, "
":data:`~ssl.PROTOCOL_SSLv23`, :data:`~ssl.PROTOCOL_TLSv1`, "
":data:`~ssl.PROTOCOL_TLSv1_1`, :data:`~ssl.PROTOCOL_TLSv1_2`, and "
":data:`~ssl.PROTOCOL_TLS` are deprecated in favor of "
":data:`~ssl.PROTOCOL_TLS_CLIENT` and :data:`~ssl.PROTOCOL_TLS_SERVER`"
msgstr ""
":data:`~ssl.PROTOCOL_SSLv2`, :data:`~ssl.PROTOCOL_SSLv3`, "
":data:`~ssl.PROTOCOL_SSLv23`, :data:`~ssl.PROTOCOL_TLSv1`, "
":data:`~ssl.PROTOCOL_TLSv1_1`, :data:`~ssl.PROTOCOL_TLSv1_2` 及 "
":data:`~ssl.PROTOCOL_TLS` 已被弃用并会被 :data:`~ssl.PROTOCOL_TLS_CLIENT` 和 "
":data:`~ssl.PROTOCOL_TLS_SERVER` 代替"

#: ../../whatsnew/3.10.rst:1775
msgid ""
":func:`~ssl.wrap_socket` is replaced by :meth:`ssl.SSLContext.wrap_socket`"
msgstr ":func:`~ssl.wrap_socket` 会被 :meth:`ssl.SSLContext.wrap_socket` 代替"

#: ../../whatsnew/3.10.rst:1777
msgid ":func:`~ssl.match_hostname`"
msgstr ":func:`~ssl.match_hostname`"

#: ../../whatsnew/3.10.rst:1779
msgid ":func:`~ssl.RAND_pseudo_bytes`, :func:`~ssl.RAND_egd`"
msgstr ":func:`~ssl.RAND_pseudo_bytes`, :func:`~ssl.RAND_egd`"

#: ../../whatsnew/3.10.rst:1781
msgid ""
"NPN features like :meth:`ssl.SSLSocket.selected_npn_protocol` and "
":meth:`ssl.SSLContext.set_npn_protocols` are replaced by ALPN."
msgstr ""
"NPN 特性如 :meth:`ssl.SSLSocket.selected_npn_protocol` 和 "
":meth:`ssl.SSLContext.set_npn_protocols` 会被 ALPN 代替。"

#: ../../whatsnew/3.10.rst:1784
msgid ""
"The threading debug (:envvar:`PYTHONTHREADDEBUG` environment variable) is "
"deprecated in Python 3.10 and will be removed in Python 3.12. This feature "
"requires a :ref:`debug build of Python <debug-build>`. (Contributed by "
"Victor Stinner in :issue:`44584`.)"
msgstr ""
"线程调试 (:envvar:`PYTHONTHREADDEBUG` 环境变量) 在 Python 3.10 中已被弃用并将在 Python 3.12 "
"中移除。 此特性需要 :ref:`Python 的调试编译版 <debug-build>`。 （由 Victor Stinner 在 "
":issue:`44584` 中贡献。）"

#: ../../whatsnew/3.10.rst:1789
msgid ""
"Importing from the ``typing.io`` and ``typing.re`` submodules will now emit "
":exc:`DeprecationWarning`.  These submodules will be removed in a future "
"version of Python.  Anything belonging to these submodules should be "
"imported directly from :mod:`typing` instead. (Contributed by Sebastian "
"Rittau in :issue:`38291`.)"
msgstr ""
"从 ``typing.io`` 和 ``typing.re`` 子模块导入现在将发出 :exc:`DeprecationWarning`。 "
"这些子模块将在未来的 Python 版本中被移除。 任何属于这些子模块的东西都应当改为直接从 :mod:`typing` 导入。 （由 "
"Sebastian Rittau 在 :issue:`38291` 中贡献。）"

#: ../../whatsnew/3.10.rst:1798 ../../whatsnew/3.10.rst:2221
msgid "Removed"
msgstr "移除"

#: ../../whatsnew/3.10.rst:1800
msgid ""
"Removed special methods ``__int__``, ``__float__``, ``__floordiv__``, "
"``__mod__``, ``__divmod__``, ``__rfloordiv__``, ``__rmod__`` and "
"``__rdivmod__`` of the :class:`complex` class.  They always raised a "
":exc:`TypeError`. (Contributed by Serhiy Storchaka in :issue:`41974`.)"
msgstr ""
"移除了 :class:`complex` 类的特殊方法 ``__int__``, ``__float__``, ``__floordiv__``, "
"``__mod__``, ``__divmod__``, ``__rfloordiv__``, ``__rmod__`` 和 "
"``__rdivmod__``。 它们总是会引发 :exc:`TypeError`。 （由 Serhiy Storchaka 在 "
":issue:`41974` 中贡献。）"

#: ../../whatsnew/3.10.rst:1806
msgid ""
"The ``ParserBase.error()`` method from the private and undocumented "
"``_markupbase`` module has been removed.  :class:`html.parser.HTMLParser` is"
" the only subclass of ``ParserBase`` and its ``error()`` implementation was "
"already removed in Python 3.5. (Contributed by Berker Peksag in "
":issue:`31844`.)"
msgstr ""
"``ParserBase.error()`` 方法（来自私有且未记入文档的 ``_markupbase`` 模块）已被移除。 "
":class:`html.parser.HTMLParser` 是 ``ParserBase`` 的唯一子类并且它的 ``error()`` 实现在 "
"Python 3.5 中已被移除。 （由 Berker Peksag 在 :issue:`31844` 中贡献。）"

#: ../../whatsnew/3.10.rst:1812
msgid ""
"Removed the ``unicodedata.ucnhash_CAPI`` attribute which was an internal "
"PyCapsule object. The related private ``_PyUnicode_Name_CAPI`` structure was"
" moved to the internal C API. (Contributed by Victor Stinner in "
":issue:`42157`.)"
msgstr ""
"移除了 ``unicodedata.ucnhash_CAPI`` 属性，它是一个内部 PyCapsule 对象。 相关联的私有 "
"``_PyUnicode_Name_CAPI`` 结构体已被移至内部 C API。 （由 Victor Stinner 在 :issue:`42157`"
" 中贡献。）"

#: ../../whatsnew/3.10.rst:1817
msgid ""
"Removed the ``parser`` module, which was deprecated in 3.9 due to the switch"
" to the new PEG parser, as well as all the C source and header files that "
"were only being used by the old parser, including ``node.h``, ``parser.h``, "
"``graminit.h`` and ``grammar.h``."
msgstr ""
"移除了 ``parser`` 模块，它在 3.9 中由于切换到新的 PEG 解析器而与仅被旧解析器所使用的 C 源文件和头文件一起被弃用，包括 "
"``node.h``, ``parser.h``, ``graminit.h`` 和 ``grammar.h``。"

#: ../../whatsnew/3.10.rst:1822
msgid ""
"Removed the Public C API functions ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags`` and ``PyNode_Compile`` that were "
"deprecated in 3.9 due to the switch to the new PEG parser."
msgstr ""
"移除了公有 C API 函数 ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags`` 和 ``PyNode_Compile``，它们在 3.9 中由于切换到新的 PEG "
"解析器而被弃用。"

#: ../../whatsnew/3.10.rst:1827
msgid ""
"Removed the ``formatter`` module, which was deprecated in Python 3.4. It is "
"somewhat obsolete, little used, and not tested. It was originally scheduled "
"to be removed in Python 3.6, but such removals were delayed until after "
"Python 2.7 EOL. Existing users should copy whatever classes they use into "
"their code. (Contributed by Dong-hee Na and Terry J. Reedy in "
":issue:`42299`.)"
msgstr ""
"移除了 ``formatter`` 模块，它在 Python 3.4 中已被弃用。 它相当过时、极少被使用，并且未经测试。 它最初计划在 Python "
"3.6 中移除，但此移除被改为延迟到 Python 2.7 生命期结束之后。 现有用户应当将他们用到的所有类都拷贝到自己的代码中。 （由 Dong-"
"hee Na 和 Terry J. Reedy 在 :issue:`42299` 中贡献。）"

#: ../../whatsnew/3.10.rst:1834
msgid ""
"Removed the :c:func:`PyModule_GetWarningsModule` function that was useless "
"now due to the _warnings module was converted to a builtin module in 2.6. "
"(Contributed by Hai Shi in :issue:`42599`.)"
msgstr ""
"移除了 :c:func:`PyModule_GetWarningsModule` 函数，现在它由于 _warnings 模块在 2.6 "
"中被转换为内置模块而变得没有用处。 （由 Hai Shi 在 :issue:`42599` 中贡献。）"

#: ../../whatsnew/3.10.rst:1838
msgid ""
"Remove deprecated aliases to :ref:`collections-abstract-base-classes` from "
"the :mod:`collections` module. (Contributed by Victor Stinner in "
":issue:`37324`.)"
msgstr ""
"从 :mod:`collections` 模块中移除了已被弃用的 :ref:`collections-abstract-base-classes` "
"的别名。 （由 Victor Stinner 在 :issue:`37324` 中贡献。）"

#: ../../whatsnew/3.10.rst:1842
msgid ""
"The ``loop`` parameter has been removed from most of :mod:`asyncio`\\ 's "
":doc:`high-level API <../library/asyncio-api-index>` following deprecation "
"in Python 3.8.  The motivation behind this change is multifold:"
msgstr ""
"``loop`` 形参已从大部分 :mod:`asyncio` 的 :doc:`高层级 API <../library/asyncio-api-"
"index>` 中被移除，之前它们在 Python 3.8 中已被弃用。 这一改变的动机是多方面的:"

#: ../../whatsnew/3.10.rst:1846
msgid "This simplifies the high-level API."
msgstr "这简化了高层级 API。"

#: ../../whatsnew/3.10.rst:1847
msgid ""
"The functions in the high-level API have been implicitly getting the current"
" thread's running event loop since Python 3.7.  There isn't a need to pass "
"the event loop to the API in most normal use cases."
msgstr ""
"高层级 API 中的这些函数自 Python 3.7 起已经会隐式地获取当前线程正在运行的事件循环。 在大多数正常使用场景中都没有必要向 API "
"传入事件循环。"

#: ../../whatsnew/3.10.rst:1850
msgid ""
"Event loop passing is error-prone especially when dealing with loops running"
" in different threads."
msgstr "在处理不同线程中运行的事件循环时传递事件循环特别容易产生错误。"

#: ../../whatsnew/3.10.rst:1853
msgid ""
"Note that the low-level API will still accept ``loop``. See :ref:`changes-"
"python-api` for examples of how to replace existing code."
msgstr ""
"请注意低层级 API 仍将接受 ``loop``。 请参阅 :ref:`changes-python-api` 来获取有关如何替换现有代码的示例。"

#: ../../whatsnew/3.10.rst:1856 ../../whatsnew/3.10.rst:1928
msgid ""
"(Contributed by Yurii Karabas, Andrew Svetlov, Yury Selivanov and Kyle "
"Stanley in :issue:`42392`.)"
msgstr ""
"（由 Yurii Karabas, Andrew Svetlov, Yury Selivanov 和 Kyle Stanley 在 "
":issue:`42392` 中贡献。）"

#: ../../whatsnew/3.10.rst:1861 ../../whatsnew/3.10.rst:2148
msgid "Porting to Python 3.10"
msgstr "移植到 Python 3.10"

#: ../../whatsnew/3.10.rst:1863
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.10.rst:1868
msgid "Changes in the Python syntax"
msgstr "Python 语法中的变化"

#: ../../whatsnew/3.10.rst:1870
msgid ""
"Deprecation warning is now emitted when compiling previously valid syntax if"
" the numeric literal is immediately followed by a keyword (like in ``0in "
"x``). In future releases it will be changed to syntax warning, and finally "
"to a syntax error.  To get rid of the warning and make the code compatible "
"with future releases just add a space between the numeric literal and the "
"following keyword. (Contributed by Serhiy Storchaka in :issue:`43833`.)"
msgstr ""
"现在当编译之前有效的语法时如果数字类字面值后面紧跟一个关键字（如在 ``0in x`` 中）则会发出弃用警告。 "
"在未来的版本中它将被改为语法警告，最终会改为语法错误。 要避免警告并使代码与未来的版本保持兼容只需在数字和后面的关键字之间添加一个空格。 （由 "
"Serhiy Storchaka 在 :issue:`43833` 中贡献。）"

#: ../../whatsnew/3.10.rst:1881
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.10.rst:1883
msgid ""
"The *etype* parameters of the :func:`~traceback.format_exception`, "
":func:`~traceback.format_exception_only`, and "
":func:`~traceback.print_exception` functions in the :mod:`traceback` module "
"have been renamed to *exc*. (Contributed by Zackery Spytz and Matthias "
"Bussonnier in :issue:`26389`.)"
msgstr ""
":mod:`traceback` 模块中的 :func:`~traceback.format_exception` 、 "
":func:`~traceback.format_exception_only` 和 "
":func:`~traceback.print_exception` 函数的 *etype* 参数已更名为 *exc* 。（由 Zackery "
"Spytz 和 Matthias Bussonnier 贡献于 :issue:`26389` ）"

#: ../../whatsnew/3.10.rst:1889
msgid ""
":mod:`atexit`: At Python exit, if a callback registered with "
":func:`atexit.register` fails, its exception is now logged. Previously, only"
" some exceptions were logged, and the last exception was always silently "
"ignored. (Contributed by Victor Stinner in :issue:`42639`.)"
msgstr ""
":mod:`atexit` ： 在 Python 退出时，若用 :func:`atexit.register` "
"注册的回调失败，现在会记录其异常。以前，只有部分异常被记录，最后一个异常总是被静默忽略。（由 Victor Stinner 贡献于 "
":issue:`42639` ）"

#: ../../whatsnew/3.10.rst:1895
msgid ""
":class:`collections.abc.Callable` generic now flattens type parameters, "
"similar to what :data:`typing.Callable` currently does.  This means that "
"``collections.abc.Callable[[int, str], str]`` will have ``__args__`` of "
"``(int, str, str)``; previously this was ``([int, str], str)``.  Code which "
"accesses the arguments via :func:`typing.get_args` or ``__args__`` need to "
"account for this change.  Furthermore, :exc:`TypeError` may be raised for "
"invalid forms of parameterizing :class:`collections.abc.Callable` which may "
"have passed silently in Python 3.9. (Contributed by Ken Jin in "
":issue:`42195`.)"
msgstr ""
"现在，泛型 :class:`collections.abc.Callable` 的类型参数扁平化了，类似于  "
":data:`typing.Callable` 目前的做法。这意味着 ``collections.abc.Callable[[int, str], "
"str]`` 的 ``__args__`` 将为 ``(int, str, str)``；而以前是 ``([int, str], str)``。 通过 "
":func:`typing.get_args` 或 ``__args__`` 访问参数的代码需要考虑到这一变化。此外，为 "
":class:`collections.abc.Callable` 给出无效参数可能会引发 :exc:`TypeError` ，而在 Python "
"3.9 中则可能会静默传入。（由 Ken Jin 贡献于 :issue:`42195`）"

#: ../../whatsnew/3.10.rst:1905
msgid ""
":meth:`socket.htons` and :meth:`socket.ntohs` now raise :exc:`OverflowError`"
" instead of :exc:`DeprecationWarning` if the given parameter will not fit in"
" a 16-bit unsigned integer. (Contributed by Erlend E. Aasland in "
":issue:`42393`.)"
msgstr ""
"现在，如果给定的形参不是 16 位无符号整数， :meth:`socket.htons` 和 :meth:`socket.ntohs` 会引发 "
":exc:`OverflowError` 而非 :exc:`DeprecationWarning`。 （由 Erlend E. Aasland 在 "
":issue:`42393` 中贡献。）"

#: ../../whatsnew/3.10.rst:1910
msgid ""
"The ``loop`` parameter has been removed from most of :mod:`asyncio`\\ 's "
":doc:`high-level API <../library/asyncio-api-index>` following deprecation "
"in Python 3.8."
msgstr ""
" ``loop`` 形参已从大部分 :mod:`asyncio` 的 :doc:`高层级 API <../library/asyncio-api-"
"index>` 中被移除，之前它们在 Python 3.8 中已被弃用。"

#: ../../whatsnew/3.10.rst:1914
msgid "A coroutine that currently looks like this::"
msgstr "现在如下协程："

#: ../../whatsnew/3.10.rst:1919
msgid "Should be replaced with this::"
msgstr "应替换为："

#: ../../whatsnew/3.10.rst:1924
msgid ""
"If ``foo()`` was specifically designed *not* to run in the current thread's "
"running event loop (e.g. running in another thread's event loop), consider "
"using :func:`asyncio.run_coroutine_threadsafe` instead."
msgstr ""
"如果 ``foo()`` 被特别设计成 *不* 运行于当前线程的运行事件循环中（比如运行在另一个线程的事件循环中），请考虑使用 "
":func:`asyncio.run_coroutine_threadsafe` 来代替。"

#: ../../whatsnew/3.10.rst:1931
msgid ""
"The :data:`types.FunctionType` constructor now inherits the current builtins"
" if the *globals* dictionary has no ``\"__builtins__\"`` key, rather than "
"using ``{\"None\": None}`` as builtins: same behavior as :func:`eval` and "
":func:`exec` functions.  Defining a function with ``def function(...): ...``"
" in Python is not affected, globals cannot be overridden with this syntax: "
"it also inherits the current builtins. (Contributed by Victor Stinner in "
":issue:`42990`.)"
msgstr ""
"如果 *globals* 字典中没有 ``\"__builtins__\"`` 键，那么 :data:`types.FunctionType` "
"构造器现在将继承当前值，而不是用 ``{\"None\": None}``，这与 :func:`eval` 和 :func:`exec` 函数一致。 "
"利用 ``def function(...): ...`` 定义一个 Python 函数则不受影响，globals "
"无法被这种语法覆盖：它也是继承了当前值。 （由 Victor Stinner 在 :issue:`42990` 中贡献。）"

#: ../../whatsnew/3.10.rst:1940
msgid "Changes in the C API"
msgstr "C API 的变化"

#: ../../whatsnew/3.10.rst:1942
msgid ""
"The C API functions ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags``, ``PyNode_Compile`` and the type used by "
"these functions, ``struct _node``, were removed due to the switch to the new"
" PEG parser."
msgstr ""
"由于换成了新的 PEG 解析程序，C 语言 API 函数 ``PyParser_SimpleParseStringFlags`` "
"、``PyParser_SimpleParseStringFlagsFilename`` "
"、``PyParser_SimpleParseFileFlags`` 、``PyNode_Compile`` 以及这些函数用到的类型 ``struct "
"_node`` 已被删除。"

#: ../../whatsnew/3.10.rst:1948
msgid ""
"Source should be now be compiled directly to a code object using, for "
"example, :c:func:`Py_CompileString`. The resulting code object can then be "
"evaluated using, for example, :c:func:`PyEval_EvalCode`."
msgstr ""
"现在应该用 :c:func:`Py_CompileString` 将源代码直接编译为代码对象。然后可以用 "
":c:func:`PyEval_EvalCode` 之类的东西来对其求值。"

#: ../../whatsnew/3.10.rst:1952
msgid "Specifically:"
msgstr "特别地："

#: ../../whatsnew/3.10.rst:1954
msgid ""
"A call to ``PyParser_SimpleParseStringFlags`` followed by ``PyNode_Compile``"
" can be replaced by calling :c:func:`Py_CompileString`."
msgstr ""
"先 ``PyParser_SimpleParseStringFlags`` 再 ``PyNode_Compile`` 的调用，可以由 "
":c:func:`Py_CompileString` 代替。"

#: ../../whatsnew/3.10.rst:1957
msgid ""
"There is no direct replacement for ``PyParser_SimpleParseFileFlags``. To "
"compile code from a ``FILE *`` argument, you will need to read the file in C"
" and pass the resulting buffer to :c:func:`Py_CompileString`."
msgstr ""
"``PyParser_SimpleParseFileFlags`` 没有直接替代品。要从 ``FILE *`` 参数编译代码，需要先用 C "
"语言读取文件，然后将结果缓冲区传给  :c:func:`Py_CompileString`。"

#: ../../whatsnew/3.10.rst:1961
msgid ""
"To compile a file given a ``char *`` filename, explicitly open the file, "
"read it and compile the result. One way to do this is using the :py:mod:`io`"
" module with :c:func:`PyImport_ImportModule`, :c:func:`PyObject_CallMethod`,"
" :c:func:`PyBytes_AsString` and :c:func:`Py_CompileString`, as sketched "
"below. (Declarations and error handling are omitted.) ::"
msgstr ""
"要编译一个 ``char *`` 给定文件名的文件，先显式打开该文件，再读取并进行编译。一种方法是利用 :py:mod:`io` 模块的 "
":c:func:`PyImport_ImportModule` 、 :c:func:`PyObject_CallMethod` 、 "
":c:func:`PyBytes_AsString` 和 :c:func:`Py_CompileString`，如下图所示。（省略了声明和错误处理部分）"

#: ../../whatsnew/3.10.rst:1974
msgid ""
"For ``FrameObject`` objects, the ``f_lasti`` member now represents a "
"wordcode offset instead of a simple offset into the bytecode string. This "
"means that this number needs to be multiplied by 2 to be used with APIs that"
" expect a byte offset instead (like :c:func:`PyCode_Addr2Line` for example)."
" Notice as well that the ``f_lasti`` member of ``FrameObject`` objects is "
"not considered stable: please use :c:func:`PyFrame_GetLineNumber` instead."
msgstr ""
"对于 ``FrameObject`` 对象， ``f_lasti`` 成员现在代表一个字码偏移，而不是字节码字符串的简单偏移。这意味着这个数字需要乘以 "
"2 才能用于期望用字节偏移的 API （例如 :c:func:`PyCode_Addr2Line` ）。也请注意， ``FrameObject`` "
"对象的 ``f_lasti`` 成员不被认为是稳定的：请使用  :c:func:`PyFrame_GetLineNumber` 代替。"

#: ../../whatsnew/3.10.rst:1982
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.10.rst:1984
msgid ""
"The ``MAKE_FUNCTION`` instruction now accepts either a dict or a tuple of "
"strings as the function's annotations. (Contributed by Yurii Karabas and "
"Inada Naoki in :issue:`42202`.)"
msgstr ""
"现在 ``MAKE_FUNCTION`` 指令将接受一个字典或字符串元组作为函数的标注。 （由 Yurii Karabas 和 Inada Naoki "
"在 :issue:`42202` 中贡献。）"

#: ../../whatsnew/3.10.rst:1989
msgid "Build Changes"
msgstr "构建的改变"

#: ../../whatsnew/3.10.rst:1991
msgid ""
":pep:`644`: Python now requires OpenSSL 1.1.1 or newer. OpenSSL 1.0.2 is no "
"longer supported. (Contributed by Christian Heimes in :issue:`43669`.)"
msgstr ""
":pep:`644` ：Python 现在要求 OpenSSL 1.1.1 以上版本。不再支持 OpenSSL 1.0.2。（由 Christian "
"Heimes 贡献于 :issue:`43669` ）"

#: ../../whatsnew/3.10.rst:1995
msgid ""
"The C99 functions :c:func:`snprintf` and :c:func:`vsnprintf` are now "
"required to build Python. (Contributed by Victor Stinner in :issue:`36020`.)"
msgstr ""
"编译 Python 现在需要用到 C99 函数 :c:func:`snprintf` 和 :c:func:`vsnprintf` 。(由 Victor "
"Stinner 贡献于 :issue:`36020` ）"

#: ../../whatsnew/3.10.rst:1999
msgid ""
":mod:`sqlite3` requires SQLite 3.7.15 or higher. (Contributed by Sergey "
"Fedoseev and Erlend E. Aasland in :issue:`40744` and :issue:`40810`.)"
msgstr ""
":mod:`sqlite3` 需要 SQLite 3.7.15 以上版本。（由 Sergey Fedoseev 和 Erlend E. Aasland "
"贡献于 :issue:`40744` 和 :issue:`40810` ）"

#: ../../whatsnew/3.10.rst:2002
msgid ""
"The :mod:`atexit` module must now always be built as a built-in module. "
"(Contributed by Victor Stinner in :issue:`42639`.)"
msgstr "现在， :mod:`atexit` 模块必须编译为内置模块。（由 Victor Stinner 贡献于  :issue:`42639` ）"

#: ../../whatsnew/3.10.rst:2005
msgid ""
"Add :option:`--disable-test-modules` option to the ``configure`` script: "
"don't build nor install test modules. (Contributed by Xavier de Gaye, Thomas"
" Petazzoni and Peixing Xin in :issue:`27640`.)"
msgstr ""
"在 ``configure`` 脚本中加入 :option:`--disable-test-modules` 选项：不编译也不安装 test 模块。（由"
" Xavier de Gaye、Thomas Petazzoni 和 Peixing Xin 贡献于 :issue:`27640`）"

#: ../../whatsnew/3.10.rst:2009
msgid ""
"Add :option:`--with-wheel-pkg-dir=PATH option <--with-wheel-pkg-dir>` to the"
" ``./configure`` script. If specified, the :mod:`ensurepip` module looks for"
" ``setuptools`` and ``pip`` wheel packages in this directory: if both are "
"present, these wheel packages are used instead of ensurepip bundled wheel "
"packages."
msgstr ""
"在 ``./configure`` 脚本中加入 :option:`--with-wheel-pkg-dir=PATH 选项 <--with-wheel-"
"pkg-dir>`。如果指定了该选项， :mod:`ensurepip` 模块会在该目录下查找 ``setuptools`` 和 ``pip`` "
"包：如果两者都存在，就会使用这些包，而不是surepip 绑定的包。"

#: ../../whatsnew/3.10.rst:2015
msgid ""
"Some Linux distribution packaging policies recommend against bundling "
"dependencies. For example, Fedora installs wheel packages in the "
"``/usr/share/python-wheels/`` directory and don't install the "
"``ensurepip._bundled`` package."
msgstr ""
"某些 Linux 发行版的打包策略建议不要绑定依赖关系。比如 Fedora 在 ``/usr/share/python-wheels/`` 目录下安装 "
"wheel 包，而不安装 ``ensurepip._bundled`` 包。"

#: ../../whatsnew/3.10.rst:2020
msgid "(Contributed by Victor Stinner in :issue:`42856`.)"
msgstr "（由 Victor Stinner 贡献于 :issue:`42856`）"

#: ../../whatsnew/3.10.rst:2022
msgid ""
"Add a new :option:`configure --without-static-libpython option <--without-"
"static-libpython>` to not build the ``libpythonMAJOR.MINOR.a`` static "
"library and not install the ``python.o`` object file."
msgstr ""
"增加了新的 :option:`configure --without-static-libpython 选项 <--without-static-"
"libpython>` ，用于标明不编译 ``libpythonMAJOR.MINOR.a`` 静态库并且不安装 ``python.o`` 对象文件。"

#: ../../whatsnew/3.10.rst:2026
msgid "(Contributed by Victor Stinner in :issue:`43103`.)"
msgstr "（由 Victor Stinner 在 :issue:`43103` 中贡献。）"

#: ../../whatsnew/3.10.rst:2028
msgid ""
"The ``configure`` script now uses the ``pkg-config`` utility, if available, "
"to detect the location of Tcl/Tk headers and libraries.  As before, those "
"locations can be explicitly specified with the :option:`--with-tcltk-"
"includes` and :option:`--with-tcltk-libs` configuration options. "
"(Contributed by Manolis Stamatogiannakis in :issue:`42603`.)"
msgstr ""
"现在， ``configure`` 脚本会利用 ``pkg-config`` 工具检测 Tcl/Tk 头文件和库的位置。此前，这些文件的位置可通过 "
":option:`--with-tcltk-includes` 和 :option:`--with-tcltk-libs` 选项显式指定。（由 "
"Manolis Stamatogiannakis 贡献于 :issue:`42603` ）"

#: ../../whatsnew/3.10.rst:2034
msgid ""
"Add :option:`--with-openssl-rpath` option to ``configure`` script. The "
"option simplifies building Python with a custom OpenSSL installation, e.g. "
"``./configure --with-openssl=/path/to/openssl --with-openssl-rpath=auto``. "
"(Contributed by Christian Heimes in :issue:`43466`.)"
msgstr ""
"为 ``configure`` 脚本加入 :option:`--with-openssl-rpath` 选项。该选项简化了用定制版本 OpenSSL "
"编译 Python 的过程，例如 ``./configure --with-openssl=/path/to/openssl --with-"
"openssl-rpath=auto``。（由 Christian Heimes 贡献于 :issue:`43466` ）"

#: ../../whatsnew/3.10.rst:2041
msgid "C API Changes"
msgstr "C API 的改变"

#: ../../whatsnew/3.10.rst:2044
msgid "PEP 652: Maintaining the Stable ABI"
msgstr "PEP 652：稳定版 ABI 的维护"

#: ../../whatsnew/3.10.rst:2046
msgid ""
"The Stable ABI (Application Binary Interface) for extension modules or "
"embedding Python is now explicitly defined. :ref:`stable` describes C API "
"and ABI stability guarantees along with best practices for using the Stable "
"ABI."
msgstr ""
"现在，用于扩展模块或嵌入 Python 的稳定版 ABI （应用程序二进制接口）已有显式的定义。 :ref:`stable` 描述了 C API 和 "
"ABI 稳定性保证和稳定版 ABI 的最佳实践。"

#: ../../whatsnew/3.10.rst:2051
msgid "(Contributed by Petr Viktorin in :pep:`652` and :issue:`43795`.)"
msgstr "（由 Petr Viktorin 在 :pep:`652` 和 :issue:`43795` 中贡献。）.)"

#: ../../whatsnew/3.10.rst:2056
msgid ""
"The result of :c:func:`PyNumber_Index` now always has exact type "
":class:`int`. Previously, the result could have been an instance of a "
"subclass of ``int``. (Contributed by Serhiy Storchaka in :issue:`40792`.)"
msgstr ""
"现在 :c:func:`PyNumber_Index` 的结果一定是 :class:`int` 类型。此前可能是 ``int`` 的子类实例。（由 "
"Serhiy Storchaka 贡献于 :issue:`40792` ）"

#: ../../whatsnew/3.10.rst:2060
msgid ""
"Add a new :c:member:`~PyConfig.orig_argv` member to the :c:type:`PyConfig` "
"structure: the list of the original command line arguments passed to the "
"Python executable. (Contributed by Victor Stinner in :issue:`23427`.)"
msgstr ""
" :c:type:`PyConfig` 结构体中加入了新成员 :c:member:`~PyConfig.orig_argv` ：即一开始传给 "
"Python 可执行文件的命令行参数列表。（由 Victor Stinner 贡献于 :issue:`23427` ）"

#: ../../whatsnew/3.10.rst:2065
msgid ""
"The :c:func:`PyDateTime_DATE_GET_TZINFO` and "
":c:func:`PyDateTime_TIME_GET_TZINFO` macros have been added for accessing "
"the ``tzinfo`` attributes of :class:`datetime.datetime` and "
":class:`datetime.time` objects. (Contributed by Zackery Spytz in "
":issue:`30155`.)"
msgstr ""
"加入宏 :c:func:`PyDateTime_DATE_GET_TZINFO` 和 "
":c:func:`PyDateTime_TIME_GET_TZINFO` ，用于访问 :class:`datetime.datetime` 和 "
":class:`datetime.time` 对象的 ``tzinfo`` 属性。 （由 Zackery Spytz 贡献于 "
":issue:`30155` ）"

#: ../../whatsnew/3.10.rst:2071
msgid ""
"Add a :c:func:`PyCodec_Unregister` function to unregister a codec search "
"function. (Contributed by Hai Shi in :issue:`41842`.)"
msgstr ""
"加入 :c:func:`PyCodec_Unregister` 函数，用于注销编解码器检索函数。（由 Hai Shi 贡献于 "
":issue:`41842` ）"

#: ../../whatsnew/3.10.rst:2075
msgid ""
"The :c:func:`PyIter_Send` function was added to allow sending value into "
"iterator without raising ``StopIteration`` exception. (Contributed by "
"Vladimir Matveev in :issue:`41756`.)"
msgstr ""
"加入 :c:func:`PyIter_Send` 函数，可不触发 ``StopIteration`` 异常地向迭代器发送数据。（由 Vladimir "
"Matveev 贡献于 :issue:`41756` ）"

#: ../../whatsnew/3.10.rst:2079
msgid ""
"Add :c:func:`PyUnicode_AsUTF8AndSize` to the limited C API. (Contributed by "
"Alex Gaynor in :issue:`41784`.)"
msgstr ""
"受限 C API 中加入了 :c:func:`PyUnicode_AsUTF8AndSize` 。（由 Alex Gaynor 贡献于 "
":issue:`41784` ）"

#: ../../whatsnew/3.10.rst:2082
msgid ""
"Add :c:func:`PyModule_AddObjectRef` function: similar to "
":c:func:`PyModule_AddObject` but don't steal a reference to the value on "
"success. (Contributed by Victor Stinner in :issue:`1635741`.)"
msgstr ""
"加入 :c:func:`PyModule_AddObjectRef` 函数：类似于 :c:func:`PyModule_AddObject` "
"但在成功后不会偷取参数对象的引用计数。（由 Victor Stinner 贡献于 :issue:`1635741` ）"

#: ../../whatsnew/3.10.rst:2087
msgid ""
"Add :c:func:`Py_NewRef` and :c:func:`Py_XNewRef` functions to increment the "
"reference count of an object and return the object. (Contributed by Victor "
"Stinner in :issue:`42262`.)"
msgstr ""
"加入 :c:func:`Py_NewRef` 和 :c:func:`Py_XNewRef` 函数，用于递增指定对象的引用计数并返回该对象。（由 "
"Victor Stinner 贡献于 :issue:`42262` ）"

#: ../../whatsnew/3.10.rst:2091
msgid ""
"The :c:func:`PyType_FromSpecWithBases` and "
":c:func:`PyType_FromModuleAndSpec` functions now accept a single class as "
"the *bases* argument. (Contributed by Serhiy Storchaka in :issue:`42423`.)"
msgstr ""
"现在， :c:func:`PyType_FromSpecWithBases` 和 :c:func:`PyType_FromModuleAndSpec` "
"函数可接受一个类作为 *bases* 参数。（由 Serhiy Storchaka 贡献于 :issue:`42423` ）"

#: ../../whatsnew/3.10.rst:2095
msgid ""
"The :c:func:`PyType_FromModuleAndSpec` function now accepts NULL ``tp_doc`` "
"slot. (Contributed by Hai Shi in :issue:`41832`.)"
msgstr ""
":c:func:`PyType_FromModuleAndSpec` 函数现在接受 NULL ``tp_doc`` 槽位。 （由 Hai Shi 在 "
":issue:`41832` 中贡献。）"

#: ../../whatsnew/3.10.rst:2099
msgid ""
"The :c:func:`PyType_GetSlot` function can accept :ref:`static types <static-"
"types>`. (Contributed by Hai Shi and Petr Viktorin in :issue:`41073`.)"
msgstr ""
":c:func:`PyType_GetSlot` 函数现在可以接受 :ref:`静态类型 <static-types>`。 （由 Hai Shi 和 "
"Petr Viktorin 在 :issue:`41073` 中贡献。）"

#: ../../whatsnew/3.10.rst:2103
msgid ""
"Add a new :c:func:`PySet_CheckExact` function to the C-API to check if an "
"object is an instance of :class:`set` but not an instance of a subtype. "
"(Contributed by Pablo Galindo in :issue:`43277`.)"
msgstr ""
"新增 :c:func:`PySet_CheckExact` 函数到 C-API 用于检查一个对象是否是 :class:`set` "
"的实例但不是其子类型的实例。 （由 Pablo Galindo 在 :issue:`43277` 中贡献。）"

#: ../../whatsnew/3.10.rst:2107
msgid ""
"Add :c:func:`PyErr_SetInterruptEx` which allows passing a signal number to "
"simulate. (Contributed by Antoine Pitrou in :issue:`43356`.)"
msgstr ""
"增加了 :c:func:`PyErr_SetInterruptEx`，它允许传入一个信号序号用于进行模拟。 （由 Antoine Pitrou 在 "
":issue:`43356` 中贡献。）"

#: ../../whatsnew/3.10.rst:2111
msgid ""
"The limited C API is now supported if :ref:`Python is built in debug mode "
"<debug-build>` (if the ``Py_DEBUG`` macro is defined). In the limited C API,"
" the :c:func:`Py_INCREF` and :c:func:`Py_DECREF` functions are now "
"implemented as opaque function calls, rather than accessing directly the "
":c:member:`PyObject.ob_refcnt` member, if Python is built in debug mode and "
"the ``Py_LIMITED_API`` macro targets Python 3.10 or newer. It became "
"possible to support the limited C API in debug mode because the "
":c:type:`PyObject` structure is the same in release and debug mode since "
"Python 3.8 (see :issue:`36465`)."
msgstr ""
"现在，:ref:`Python 以调试模式编译 <debug-build>` 时也支持受限 C API 的使用了（需先定义 ``Py_DEBUG`` "
"宏）。在受限 C API 中，如果 Python 是以调试模式编译的，且 ``Py_LIMITED_API`` 宏以 Python 3.10 "
"以上版本为目标，那么现在 :c:func:`Py_INCREF` 和 :c:func:`Py_DECREF` 函数实现为非透明的函数调用，而非直接访问 "
":c:member:`PyObject.ob_refcnt` 成员。在调试模式下支持受限 C API 成为可能，是因为自 Python 3.8 起 "
":c:type:`PyObject` 结构体在发布模式和调试模式下是相同的（参见 :issue:`36465` ）。"

#: ../../whatsnew/3.10.rst:2121
msgid ""
"The limited C API is still not supported in the :option:`--with-trace-refs` "
"special build (``Py_TRACE_REFS`` macro). (Contributed by Victor Stinner in "
":issue:`43688`.)"
msgstr ""
"在 :option:`--with-trace-refs` 特殊编译方式下（``Py_TRACE_REFS`` 宏），仍不支持使用受限 C API "
"。（由 Victor Stinner 贡献于 :issue:`43688` ）"

#: ../../whatsnew/3.10.rst:2125
msgid ""
"Add the :c:func:`Py_Is(x, y) <Py_Is>` function to test if the *x* object is "
"the *y* object, the same as ``x is y`` in Python. Add also the "
":c:func:`Py_IsNone`, :c:func:`Py_IsTrue`, :c:func:`Py_IsFalse` functions to "
"test if an object is, respectively, the ``None`` singleton, the ``True`` "
"singleton or the ``False`` singleton. (Contributed by Victor Stinner in "
":issue:`43753`.)"
msgstr ""
"加入 :c:func:`Py_Is(x, y) <Py_Is>` 函数，用于测试 *x* 对象是否是 *y* 对象，等价于 Python 中的 ``x "
"is y``。还加入了 :c:func:`Py_IsNone` 、 :c:func:`Py_IsTrue` 、 :c:func:`Py_IsFalse`"
" 函数，分别用于测试某对象是否为 ``None`` 单例、``True`` 单例或 ``False`` 单例。（由 Victor Stinner 贡献于"
" :issue:`43753` ）"

#: ../../whatsnew/3.10.rst:2132
msgid ""
"Add new functions to control the garbage collector from C code: "
":c:func:`PyGC_Enable()`, :c:func:`PyGC_Disable()`, "
":c:func:`PyGC_IsEnabled()`. These functions allow to activate, deactivate "
"and query the state of the garbage collector from C code without having to "
"import the :mod:`gc` module."
msgstr ""
"新增由 C 代码控制垃圾回收器的函数: :c:func:`PyGC_Enable()`, 、:c:func:`PyGC_Disable()` 、 "
":c:func:`PyGC_IsEnabled()`。这些函数允许从 C 代码激活、停止和查询垃圾回收器的状态，而不必导入 :mod:`gc` 模块。"

#: ../../whatsnew/3.10.rst:2139
msgid ""
"Add a new :c:data:`Py_TPFLAGS_DISALLOW_INSTANTIATION` type flag to disallow "
"creating type instances. (Contributed by Victor Stinner in :issue:`43916`.)"
msgstr ""
"新增 :c:data:`Py_TPFLAGS_DISALLOW_INSTANTIATION` 类型标记，用于禁止创建类型实例。（由 Victor "
"Stinner 贡献于 :issue:`43916` ）"

#: ../../whatsnew/3.10.rst:2143
msgid ""
"Add a new :c:data:`Py_TPFLAGS_IMMUTABLETYPE` type flag for creating "
"immutable type objects: type attributes cannot be set nor deleted. "
"(Contributed by Victor Stinner and Erlend E. Aasland in :issue:`43908`.)"
msgstr ""
"新增 :c:data:`Py_TPFLAGS_IMMUTABLETYPE` 类型标记，用于创建不可变类型对象：类型的属性不可设置或删除。（由 "
"Victor Stinner 和 Erlend E. Aasland 贡献于 :issue:`43908` ）"

#: ../../whatsnew/3.10.rst:2150
msgid ""
"The ``PY_SSIZE_T_CLEAN`` macro must now be defined to use "
":c:func:`PyArg_ParseTuple` and :c:func:`Py_BuildValue` formats which use "
"``#``: ``es#``, ``et#``, ``s#``, ``u#``, ``y#``, ``z#``, ``U#`` and ``Z#``. "
"See :ref:`arg-parsing` and :pep:`353`. (Contributed by Victor Stinner in "
":issue:`40943`.)"
msgstr ""
"现在必须定义 ``PY_SSIZE_T_CLEAN`` 宏才能使用 :c:func:`PyArg_ParseTuple` 和 "
":c:func:`Py_BuildValue` 格式，这些格式会使用 ``#``: ``es#``, ``et#``, ``s#``, ``u#``, "
"``y#``, ``z#``, ``U#`` 和 ``Z#``。 参见 :ref:`arg-parsing` 和 :pep:`353`。 （由 "
"Victor Stinner 在 :issue:`40943` 中贡献。）"

#: ../../whatsnew/3.10.rst:2156
msgid ""
"Since :c:func:`Py_REFCNT()` is changed to the inline static function, "
"``Py_REFCNT(obj) = new_refcnt`` must be replaced with ``Py_SET_REFCNT(obj, "
"new_refcnt)``: see :c:func:`Py_SET_REFCNT()` (available since Python 3.9). "
"For backward compatibility, this macro can be used::"
msgstr ""
"由于 :c:func:`Py_REFCNT()` 已改为内联静态函数，``Py_REFCNT(obj) = new_refcnt`` 必须换成 "
"``Py_SET_REFCNT(obj, new_refcnt)``: 参见 :c:func:`Py_SET_REFCNT()` （自 Python "
"3.9 起提供）。为保持向下兼容，可用此宏："

#: ../../whatsnew/3.10.rst:2165
msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr "（由 Victor Stinner 在 :issue:`39573` 中贡献。）"

#: ../../whatsnew/3.10.rst:2167
msgid ""
"Calling :c:func:`PyDict_GetItem` without :term:`GIL` held had been allowed "
"for historical reason. It is no longer allowed. (Contributed by Victor "
"Stinner in :issue:`40839`.)"
msgstr ""
"由于历史原因，曾经允许调用 :c:func:`PyDict_GetItem` 时不带 :term:`GIL` 。 现在则不行了。（由 Victor "
"Stinner 贡献于 :issue:`40839` ）"

#: ../../whatsnew/3.10.rst:2171
msgid ""
"``PyUnicode_FromUnicode(NULL, size)`` and "
"``PyUnicode_FromStringAndSize(NULL, size)`` raise ``DeprecationWarning`` "
"now.  Use :c:func:`PyUnicode_New` to allocate Unicode object without initial"
" data. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"现在， ``PyUnicode_FromUnicode(NULL, size)`` 和 "
"``PyUnicode_FromStringAndSize(NULL, size)`` 会引发 ``DeprecationWarning``。 请利用 "
":c:func:`PyUnicode_New` 获得不带初始数据的 Unicode 对象。（由 Inada Naoki 贡献于 "
":issue:`36346` ）"

#: ../../whatsnew/3.10.rst:2176
msgid ""
"The private ``_PyUnicode_Name_CAPI`` structure of the PyCapsule API "
"``unicodedata.ucnhash_CAPI`` has been moved to the internal C API. "
"(Contributed by Victor Stinner in :issue:`42157`.)"
msgstr ""
"私有结构体 ``_PyUnicode_Name_CAPI``  （PyCapsule API ``unicodedata.ucnhash_CAPI`` "
"）已被移入内部 C API。（由 Victor Stinner 贡献于 :issue:`42157` ）"

#: ../../whatsnew/3.10.rst:2180
msgid ""
":c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, "
":c:func:`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome` and "
":c:func:`Py_GetProgramName` functions now return ``NULL`` if called before "
":c:func:`Py_Initialize` (before Python is initialized). Use the new "
":ref:`init-config` API to get the :ref:`init-path-config`. (Contributed by "
"Victor Stinner in :issue:`42260`.)"
msgstr ""
"现在 :c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`,"
" :c:func:`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome` 和 "
":c:func:`Py_GetProgramName` 函数如果在 :c:func:`Py_Initialize` 之前（在 Python "
"被初始化之前）被调用将返回 ``NULL``。 请使用新的 :ref:`init-config` API 来获取 :ref:`init-path-"
"config`。 （由 Victor Stinner 在 :issue:`42260` 中贡献。）"

#: ../../whatsnew/3.10.rst:2187
msgid ""
":c:func:`PyList_SET_ITEM`, :c:func:`PyTuple_SET_ITEM` and "
":c:func:`PyCell_SET` macros can no longer be used as l-value or r-value. For"
" example, ``x = PyList_SET_ITEM(a, b, c)`` and ``PyList_SET_ITEM(a, b, c) = "
"x`` now fail with a compiler error. It prevents bugs like ``if "
"(PyList_SET_ITEM (a, b, c) < 0) ...`` test. (Contributed by Zackery Spytz "
"and Victor Stinner in :issue:`30459`.)"
msgstr ""
"宏 :c:func:`PyList_SET_ITEM` 、 :c:func:`PyTuple_SET_ITEM` 和 "
":c:func:`PyCell_SET` 不可再用作左值或右值。例如，现在 ``x = PyList_SET_ITEM(a, b, c)`` 和 "
"``PyList_SET_ITEM(a, b, c) = x`` 会失败并提示编译器错误。 这可以防止 ``if (PyList_SET_ITEM "
"(a, b, c) < 0) ...`` 之类的检测发生问题。（由 Zackery Spytz 和 Victor Stinner 贡献于 "
":issue:`30459` ）"

#: ../../whatsnew/3.10.rst:2194
msgid ""
"The non-limited API files ``odictobject.h``, ``parser_interface.h``, "
"``picklebufobject.h``, ``pyarena.h``, ``pyctype.h``, ``pydebug.h``, "
"``pyfpe.h``, and ``pytime.h`` have been moved to the ``Include/cpython`` "
"directory. These files must not be included directly, as they are already "
"included in ``Python.h``; see :ref:`api-includes`. If they have been "
"included directly, consider including ``Python.h`` instead. (Contributed by "
"Nicholas Sim in :issue:`35134`.)"
msgstr ""
"非受限 API 文件 ``odictobject.h``, ``parser_interface.h``, ``picklebufobject.h``,"
" ``pyarena.h``, ``pyctype.h``, ``pydebug.h``, ``pyfpe.h`` 和 ``pytime.h`` "
"已被移至 ``Include/cpython`` 目录。 这些文件不可被直接包括，因为它们已经在 ``Python.h`` 中被包括了；参见 "
":ref:`api-includes`。 如果它们已被直接包括，请考虑改为包括 ``Python.h``。 （由 Nicholas Sim 在 "
":issue:`35134` 中贡献。）"

#: ../../whatsnew/3.10.rst:2202
msgid ""
"Use the :c:data:`Py_TPFLAGS_IMMUTABLETYPE` type flag to create immutable "
"type objects. Do not rely on :c:data:`Py_TPFLAGS_HEAPTYPE` to decide if a "
"type object is mutable or not; check if :c:data:`Py_TPFLAGS_IMMUTABLETYPE` "
"is set instead. (Contributed by Victor Stinner and Erlend E. Aasland in "
":issue:`43908`.)"
msgstr ""
"请用 :c:data:`Py_TPFLAGS_IMMUTABLETYPE` 类型标记来创建不可变对象。 不要依赖 "
":c:data:`Py_TPFLAGS_HEAPTYPE` 来确定类型对象是否可变；请改为检查是否设置了 "
":c:data:`Py_TPFLAGS_IMMUTABLETYPE`。（由 Victor Stinner 和 Erlend E. Aasland 贡献于"
" :issue:`43908` ）"

#: ../../whatsnew/3.10.rst:2208
msgid ""
"The undocumented function ``Py_FrozenMain`` has been removed from the "
"limited API. The function is mainly useful for custom builds of Python. "
"(Contributed by Petr Viktorin in :issue:`26241`.)"
msgstr ""
"未被加入文档的函数 ``Py_FrozenMain`` 已从受限 API 中移除。 该函数主要适用于 Python 的定制版本。 （由 Petr "
"Viktorin 在 :issue:`26241` 中贡献。）"

#: ../../whatsnew/3.10.rst:2215
msgid ""
"The ``PyUnicode_InternImmortal()`` function is now deprecated and will be "
"removed in Python 3.12: use :c:func:`PyUnicode_InternInPlace` instead. "
"(Contributed by Victor Stinner in :issue:`41692`.)"
msgstr ""
"现在 ``PyUnicode_InternImmortal()`` 函数已被弃用，并将在 Python 3.12 中移除：请改用 "
":c:func:`PyUnicode_InternInPlace`。（由 Victor Stinner 贡献于 :issue:`41692` ）"

#: ../../whatsnew/3.10.rst:2223
msgid ""
"Removed ``Py_UNICODE_str*`` functions manipulating ``Py_UNICODE*`` strings. "
"(Contributed by Inada Naoki in :issue:`41123`.)"
msgstr ""
"移除了 ``Py_UNICODE_str*`` 函数，它被用于控制 ``Py_UNICODE*`` 字符串。 （由 Inada Naoki 在 "
":issue:`41123` 中贡献。）"

#: ../../whatsnew/3.10.rst:2226
msgid ""
"``Py_UNICODE_strlen``: use :c:func:`PyUnicode_GetLength` or "
":c:macro:`PyUnicode_GET_LENGTH`"
msgstr ""
"``Py_UNICODE_strlen``: 使用 :c:func:`PyUnicode_GetLength` 或 "
":c:macro:`PyUnicode_GET_LENGTH`"

#: ../../whatsnew/3.10.rst:2228
msgid ""
"``Py_UNICODE_strcat``: use :c:func:`PyUnicode_CopyCharacters` or "
":c:func:`PyUnicode_FromFormat`"
msgstr ""
"``Py_UNICODE_strcat``: 使用 :c:func:`PyUnicode_CopyCharacters` 或 "
":c:func:`PyUnicode_FromFormat`"

#: ../../whatsnew/3.10.rst:2230
msgid ""
"``Py_UNICODE_strcpy``, ``Py_UNICODE_strncpy``: use "
":c:func:`PyUnicode_CopyCharacters` or :c:func:`PyUnicode_Substring`"
msgstr ""
"``Py_UNICODE_strcpy``, ``Py_UNICODE_strncpy``: 使用 "
":c:func:`PyUnicode_CopyCharacters` 或 :c:func:`PyUnicode_Substring`"

#: ../../whatsnew/3.10.rst:2232
msgid "``Py_UNICODE_strcmp``: use :c:func:`PyUnicode_Compare`"
msgstr "``Py_UNICODE_strcmp``: 使用 :c:func:`PyUnicode_Compare`"

#: ../../whatsnew/3.10.rst:2233
msgid "``Py_UNICODE_strncmp``: use :c:func:`PyUnicode_Tailmatch`"
msgstr "``Py_UNICODE_strncmp``: 使用 :c:func:`PyUnicode_Tailmatch`"

#: ../../whatsnew/3.10.rst:2234
msgid ""
"``Py_UNICODE_strchr``, ``Py_UNICODE_strrchr``: use "
":c:func:`PyUnicode_FindChar`"
msgstr ""
"``Py_UNICODE_strchr``, ``Py_UNICODE_strrchr``: 使用 "
":c:func:`PyUnicode_FindChar`"

#: ../../whatsnew/3.10.rst:2237
msgid ""
"Removed ``PyUnicode_GetMax()``. Please migrate to new (:pep:`393`) APIs. "
"(Contributed by Inada Naoki in :issue:`41103`.)"
msgstr ""
"移除了 ``PyUnicode_GetMax()``。 请迁移到新的 (:pep:`393`) API。 （由 Inada Naoki 在 "
":issue:`41103` 中贡献。）"

#: ../../whatsnew/3.10.rst:2240
msgid ""
"Removed ``PyLong_FromUnicode()``. Please migrate to "
":c:func:`PyLong_FromUnicodeObject`. (Contributed by Inada Naoki in "
":issue:`41103`.)"
msgstr ""
"移除了 ``PyLong_FromUnicode()``。 请迁移到 :c:func:`PyLong_FromUnicodeObject`。 （由 "
"Inada Naoki 在 :issue:`41103` 中贡献。）"

#: ../../whatsnew/3.10.rst:2243
msgid ""
"Removed ``PyUnicode_AsUnicodeCopy()``. Please use "
":c:func:`PyUnicode_AsUCS4Copy` or :c:func:`PyUnicode_AsWideCharString` "
"(Contributed by Inada Naoki in :issue:`41103`.)"
msgstr ""
"移除了 ``PyUnicode_AsUnicodeCopy()``。 请使用 :c:func:`PyUnicode_AsUCS4Copy` 或 "
":c:func:`PyUnicode_AsWideCharString` （由 Inada Naoki 在 :issue:`41103` 中贡献。）"

#: ../../whatsnew/3.10.rst:2247
msgid ""
"Removed ``_Py_CheckRecursionLimit`` variable: it has been replaced by "
"``ceval.recursion_limit`` of the :c:type:`PyInterpreterState` structure. "
"(Contributed by Victor Stinner in :issue:`41834`.)"
msgstr ""
"移除了 ``_Py_CheckRecursionLimit`` 变量：它已被 :c:type:`PyInterpreterState` 结构体的 "
"``ceval.recursion_limit`` 所取代。 （由 Victor Stinner 在 :issue:`41834` 中贡献。）"

#: ../../whatsnew/3.10.rst:2251
msgid ""
"Removed undocumented macros ``Py_ALLOW_RECURSION`` and "
"``Py_END_ALLOW_RECURSION`` and the ``recursion_critical`` field of the "
":c:type:`PyInterpreterState` structure. (Contributed by Serhiy Storchaka in "
":issue:`41936`.)"
msgstr ""
"移除了未记入文档的宏 ``Py_ALLOW_RECURSION`` 和 ``Py_END_ALLOW_RECURSION`` 以及 "
":c:type:`PyInterpreterState` 结构体的 ``recursion_critical`` 字段。 （由 Serhiy "
"Storchaka 在 :issue:`41936` 中贡献。）"

#: ../../whatsnew/3.10.rst:2256
msgid ""
"Removed the undocumented ``PyOS_InitInterrupts()`` function. Initializing "
"Python already implicitly installs signal handlers: see "
":c:member:`PyConfig.install_signal_handlers`. (Contributed by Victor Stinner"
" in :issue:`41713`.)"
msgstr ""
"移除了未记入文档的 ``PyOS_InitInterrupts()`` 函数。Python 初始化时已隐式安装了信号处理 handler：参见 "
":c:member:`PyConfig.install_signal_handlers`。（由 Victor Stinner 贡献于 "
":issue:`41713` ）"

#: ../../whatsnew/3.10.rst:2261
msgid ""
"Remove the ``PyAST_Validate()`` function. It is no longer possible to build "
"a AST object (``mod_ty`` type) with the public C API. The function was "
"already excluded from the limited C API (:pep:`384`). (Contributed by Victor"
" Stinner in :issue:`43244`.)"
msgstr ""
"移除了 ``PyAST_Validate()`` 函数。不能再使用公有 C API 来构建 AST 对象（``mod_ty`` "
"类型）了。该函数已不属于受限 C API（:pep:`384` ）。（由 Victor Stinner 贡献于 :issue:`43244` ）"

#: ../../whatsnew/3.10.rst:2266
msgid "Remove the ``symtable.h`` header file and the undocumented functions:"
msgstr "移除了 ``symtable.h`` 头文件及未写入文档的函数:"

#: ../../whatsnew/3.10.rst:2268
msgid "``PyST_GetScope()``"
msgstr "``PyST_GetScope()``"

#: ../../whatsnew/3.10.rst:2269
msgid "``PySymtable_Build()``"
msgstr "``PySymtable_Build()``"

#: ../../whatsnew/3.10.rst:2270
msgid "``PySymtable_BuildObject()``"
msgstr "``PySymtable_BuildObject()``"

#: ../../whatsnew/3.10.rst:2271
msgid "``PySymtable_Free()``"
msgstr "``PySymtable_Free()``"

#: ../../whatsnew/3.10.rst:2272
msgid "``Py_SymtableString()``"
msgstr "``Py_SymtableString()``"

#: ../../whatsnew/3.10.rst:2273
msgid "``Py_SymtableStringObject()``"
msgstr "``Py_SymtableStringObject()``"

#: ../../whatsnew/3.10.rst:2275
msgid ""
"The ``Py_SymtableString()`` function was part the stable ABI by mistake but "
"it could not be used, because the ``symtable.h`` header file was excluded "
"from the limited C API."
msgstr ""
"``Py_SymtableString()`` 函数误为稳定版 ABI 却无法使用，因为 ``symtable.h`` 头文件不属于受限 C API。"

#: ../../whatsnew/3.10.rst:2279
msgid ""
"Use Python :mod:`symtable` module instead. (Contributed by Victor Stinner in"
" :issue:`43244`.)"
msgstr ""
"请改用 Python :mod:`symtable` 模块。 （由 Victor Stinner 在 :issue:`43244` 中贡献。）"

#: ../../whatsnew/3.10.rst:2282
msgid ""
"Remove :c:func:`PyOS_ReadlineFunctionPointer` from the limited C API headers"
" and from ``python3.dll``, the library that provides the stable ABI on "
"Windows. Since the function takes a ``FILE*`` argument, its ABI stability "
"cannot be guaranteed. (Contributed by Petr Viktorin in :issue:`43868`.)"
msgstr ""
":c:func:`PyOS_ReadlineFunctionPointer` 已从受限 C API 头文件和 ``python3.dll`` 中移除，此"
" dll 为 Windows 中的稳定版 ABI 库。由于该函数可接受一个 ``FILE*`` 参数，所以无法保证其 ABI 稳定性。（由 Petr "
"Viktorin 贡献于 :issue:`43868` ）"

#: ../../whatsnew/3.10.rst:2288
msgid ""
"Remove ``ast.h``, ``asdl.h``, and ``Python-ast.h`` header files. These "
"functions were undocumented and excluded from the limited C API. Most names "
"defined by these header files were not prefixed by ``Py`` and so could "
"create names conflicts. For example, ``Python-ast.h`` defined a ``Yield`` "
"macro which was conflict with the ``Yield`` name used by the Windows "
"``<winbase.h>`` header. Use the Python :mod:`ast` module instead. "
"(Contributed by Victor Stinner in :issue:`43244`.)"
msgstr ""
"移除了 ``ast.h``, ``asdl.h`` 和 ``Python-ast.h`` 头文件。 这些函数未入文档且不属于受限 C "
"API。这些头文件中定义的大多数名称都不带 ``Py`` 前缀，因此可能会造成命名冲突。比如 ``Python-ast.h`` 定义了一个 "
"``Yield`` 宏，就会与另一个Windows ``<winbase.h>`` 头文件中的 ``Yield`` 冲突。请改用 Python "
":mod:`ast` 模块。（由 Victor Stinner 贡献于 :issue:`43244` ）"

#: ../../whatsnew/3.10.rst:2296
msgid ""
"Remove the compiler and parser functions using ``struct _mod`` type, because"
" the public AST C API was removed:"
msgstr "移除了用到 ``struct _mod`` 类型的编译器和解析器函数，因为公共的 AST C API 已被移除："

#: ../../whatsnew/3.10.rst:2299
msgid "``PyAST_Compile()``"
msgstr "``PyAST_Compile()``"

#: ../../whatsnew/3.10.rst:2300
msgid "``PyAST_CompileEx()``"
msgstr "``PyAST_CompileEx()``"

#: ../../whatsnew/3.10.rst:2301
msgid "``PyAST_CompileObject()``"
msgstr "``PyAST_CompileObject()``"

#: ../../whatsnew/3.10.rst:2302
msgid "``PyFuture_FromAST()``"
msgstr "``PyFuture_FromAST()``"

#: ../../whatsnew/3.10.rst:2303
msgid "``PyFuture_FromASTObject()``"
msgstr "``PyFuture_FromASTObject()``"

#: ../../whatsnew/3.10.rst:2304
msgid "``PyParser_ASTFromFile()``"
msgstr "``PyParser_ASTFromFile()``"

#: ../../whatsnew/3.10.rst:2305
msgid "``PyParser_ASTFromFileObject()``"
msgstr "``PyParser_ASTFromFileObject()``"

#: ../../whatsnew/3.10.rst:2306
msgid "``PyParser_ASTFromFilename()``"
msgstr "``PyParser_ASTFromFilename()``"

#: ../../whatsnew/3.10.rst:2307
msgid "``PyParser_ASTFromString()``"
msgstr "``PyParser_ASTFromString()``"

#: ../../whatsnew/3.10.rst:2308
msgid "``PyParser_ASTFromStringObject()``"
msgstr "``PyParser_ASTFromStringObject()``"

#: ../../whatsnew/3.10.rst:2310
msgid ""
"These functions were undocumented and excluded from the limited C API. "
"(Contributed by Victor Stinner in :issue:`43244`.)"
msgstr "这些函数未入文档且不属于受限 C API。（由 Victor Stinner 贡献于 :issue:`43244` ）"

#: ../../whatsnew/3.10.rst:2313
msgid "Remove the ``pyarena.h`` header file with functions:"
msgstr "移除了包含下列函数的头文件 ``pyarena.h`` ："

#: ../../whatsnew/3.10.rst:2315
msgid "``PyArena_New()``"
msgstr "``PyArena_New()``"

#: ../../whatsnew/3.10.rst:2316
msgid "``PyArena_Free()``"
msgstr "``PyArena_Free()``"

#: ../../whatsnew/3.10.rst:2317
msgid "``PyArena_Malloc()``"
msgstr "``PyArena_Malloc()``"

#: ../../whatsnew/3.10.rst:2318
msgid "``PyArena_AddPyObject()``"
msgstr "``PyArena_AddPyObject()``"

#: ../../whatsnew/3.10.rst:2320
msgid ""
"These functions were undocumented, excluded from the limited C API, and were"
" only used internally by the compiler. (Contributed by Victor Stinner in "
":issue:`43244`.)"
msgstr ""
"这些函数未记入文档，且不属于受限 C API，仅由编译器内部使用。（由 Victor Stinner 贡献于 :issue:`43244` ）"

#: ../../whatsnew/3.10.rst:2324
msgid ""
"The ``PyThreadState.use_tracing`` member has been removed to optimize "
"Python. (Contributed by Mark Shannon in :issue:`43760`.)"
msgstr ""
"``PyThreadState.use_tracing`` 成员已被删除，以优化 Python 。(由 Mark Shannon 在 "
":issue:`43760` 中贡献。)"

#: ../../whatsnew/3.10.rst:2329
msgid "Notable security feature in 3.10.7"
msgstr "3.10.7 中的重要安全特性"

#: ../../whatsnew/3.10.rst:2331
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for `CVE-2020-10735 "
"<https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10735>`_. This "
"limit can be configured or disabled by environment variable, command line "
"flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length "
"limitation <int_max_str_digits>` documentation.  The default limit is 4300 "
"digits in string form."
msgstr ""
"使用十进制以外的底，如 2（二进制）、4、8（八进制）、16（十六进制）、32 以外作为基数在 :class:`int` 和  :class:`str`"
" 之间进行转换，如果字符串形式的数字数量超过一个限制，会抛出 :exc:`ValueError`，以避免因算法复杂而导致的潜在拒绝服务攻击。这是对 "
"`CVE-2020-10735 <https://cve.mitre.org/cgi-"
"bin/cvename.cgi?name=CVE-2020-10735>`_ 的缓解方案。这个限制可以通过环境变量、命令行旗标或 :mod:`sys` "
"API 进行配置或禁用。参见 :ref:`integer string conversion length limitation "
"<int_max_str_digits>` 文档。默认限制是字符串形式的 4300 位数字。"

#: ../../whatsnew/3.10.rst:2343
msgid "Notable security feature in 3.10.8"
msgstr "3.10.8 中的重要安全特性"

#: ../../whatsnew/3.10.rst:2345
msgid ""
"The deprecated :mod:`mailcap` module now refuses to inject unsafe text "
"(filenames, MIME types, parameters) into shell commands. Instead of using "
"such text, it will warn and act as if a match was not found (or for test "
"commands, as if the test failed). (Contributed by Petr Viktorin in "
":gh:`98966`.)"
msgstr ""

#: ../../whatsnew/3.10.rst:2352
msgid "Notable Changes in 3.10.12"
msgstr ""

#: ../../whatsnew/3.10.rst:2355 ../../whatsnew/3.10.rst:2412
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.10.rst:2357
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`,"
" have a new a *filter* argument that allows limiting tar features than may "
"be surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile-extraction-filter` for details. In Python 3.12,"
" use without the *filter* argument will show a :exc:`DeprecationWarning`. In"
" Python 3.14, the default will switch to ``'data'``. (Contributed by Petr "
"Viktorin in :pep:`706`.)"
msgstr ""
":mod:`tarfile` 中的提取方法和 :func:`shutil.unpack_archive` 都新增了 *filter* "
"参数以允许限制可能令人意外或危险的 tar 特性，例如在目标目录之外创建文件。 相关细节参见 :ref:`tarfile-extraction-"
"filter`。 在 Python 3.12 中，不带 *filter* 参数的用法将显示 :exc:`DeprecationWarning`。 在 "
"Python 3.14 中，默认值将切换为 ``'data'``。 （由 Petr Viktorin 在 :pep:`706` 中贡献。）"

#: ../../whatsnew/3.10.rst:2368
msgid "Notable changes in 3.10.15"
msgstr ""

#: ../../whatsnew/3.10.rst:2371
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.10.rst:2373
msgid ""
"Fixed ``is_global`` and ``is_private`` behavior in ``IPv4Address``, "
"``IPv6Address``, ``IPv4Network`` and ``IPv6Network``."
msgstr ""
"修正了 ``IPv4Address``, ``IPv6Address``, ``IPv4Network`` 和 ``IPv6Network`` 中的 "
"``is_global`` 和 ``is_private`` 行为。"

#: ../../whatsnew/3.10.rst:2377
msgid "email"
msgstr "email"

#: ../../whatsnew/3.10.rst:2379
msgid "Headers with embedded newlines are now quoted on output."
msgstr "带有嵌入的换行符的标头现在输出时会加引号。"

#: ../../whatsnew/3.10.rst:2381
msgid ""
"The :mod:`~email.generator` will now refuse to serialize (write) headers "
"that are improperly folded or delimited, such that they would be parsed as "
"multiple headers or joined with adjacent data. If you need to turn this "
"safety feature off, set "
":attr:`~email.policy.Policy.verify_generated_headers`. (Contributed by Bas "
"Bloemsaat and Petr Viktorin in :gh:`121650`.)"
msgstr ""
"现在 :mod:`~email.generator` 会拒绝序列化（写入）不正确地折叠或分隔的标头，例如将被解析为多个标头或与相邻数据合并的标头等。 "
"如果你需要禁用此安全特性，请设置 :attr:`~email.policy.Policy.verify_generated_headers`。 （由 "
"Bas Bloemsaat 和 Petr Viktorin 在 :gh:`121650` 中贡献。）"

#: ../../whatsnew/3.10.rst:2388
msgid ""
":func:`email.utils.getaddresses` and :func:`email.utils.parseaddr` now "
"return ``('', '')`` 2-tuples in more situations where invalid email "
"addresses are encountered, instead of potentially inaccurate values. An "
"optional *strict* parameter was added to these two functions: use "
"``strict=False`` to get the old behavior, accepting malformed inputs. "
"``getattr(email.utils, 'supports_strict_parsing', False)`` can be used to "
"check if the *strict* paramater is available. (Contributed by Thomas Dwyer "
"and Victor Stinner for :gh:`102988` to improve the CVE-2023-27043 fix.)"
msgstr ""
":func:`email.utils.getaddresses` и :func:`email.utils.parseaddr` теперь "
"возвращают ``('', '')`` 2-кортежи в большем количестве ситуаций, когда "
"встречаются недействительные адреса электронной почты, а не потенциально "
"неточные значения. К этим двум функциям был добавлен необязательный параметр"
" *strict*: используйте ``strict=False``, чтобы получить старое поведение, "
"принимая неверные входные данные. ``getattr(email.utils, "
"'supports_strict_parsing', False)`` можно использовать для проверки "
"доступности параметра *strict*. (Предоставлено Томасом Дуайером и Виктором "
"Стиннером для :gh:`102988` для улучшения исправления CVE-2023-27043.)"

#: ../../whatsnew/3.10.rst:2400
msgid "Notable changes in 3.10.18"
msgstr ""

#: ../../whatsnew/3.10.rst:2405
msgid ""
"The *strict* parameter to :func:`os.path.realpath` accepts a new value, "
":data:`os.path.ALLOW_MISSING`. If used, errors other than "
":exc:`FileNotFoundError` will be re-raised; the resulting path can be "
"missing but it will be free of symlinks. (Contributed by Petr Viktorin for "
"CVE 2025-4517.)"
msgstr ""

#: ../../whatsnew/3.10.rst:2414
msgid ""
":func:`~tarfile.data_filter` now normalizes symbolic link targets in order "
"to avoid path traversal attacks. (Contributed by Petr Viktorin in "
":gh:`127987` and CVE 2025-4138.)"
msgstr ""

#: ../../whatsnew/3.10.rst:2417
msgid ""
":func:`~tarfile.TarFile.extractall` now skips fixing up directory attributes"
" when a directory was removed or replaced by another kind of file. "
"(Contributed by Petr Viktorin in :gh:`127987` and CVE 2024-12718.)"
msgstr ""

#: ../../whatsnew/3.10.rst:2420
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` now"
" (re-)apply the extraction filter when substituting a link (hard or "
"symbolic) with a copy of another archive member, and when fixing up "
"directory attributes. The former raises a new exception, "
":exc:`~tarfile.LinkFallbackError`. (Contributed by Petr Viktorin for CVE "
"2025-4330 and CVE 2024-12718.)"
msgstr ""

#: ../../whatsnew/3.10.rst:2426
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` no "
"longer extract rejected members when :func:`~tarfile.TarFile.errorlevel` is "
"zero. (Contributed by Matt Prodani and Petr Viktorin in :gh:`112887` and CVE"
" 2025-4435.)"
msgstr ""
