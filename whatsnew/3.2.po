# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 汇民 王 <whuim@qq.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-17 14:16+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.2.rst:3
msgid "What's New In Python 3.2"
msgstr "Python 3.2 有什么新变化"

#: ../../whatsnew/3.2.rst:0
msgid "Author"
msgstr "作者"

#: ../../whatsnew/3.2.rst:5
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger（译者：wh2099 at outlook dot com）"

#: ../../whatsnew/3.2.rst:51
msgid ""
"This article explains the new features in Python 3.2 as compared to 3.1. "
"Python 3.2 was released on February 20, 2011. It focuses on a few highlights"
" and gives a few examples.  For full details, see the `Misc/NEWS "
"<https://github.com/python/cpython/blob/076ca6c3c8df3030307e548d9be792ce3c1c6eea/Misc/NEWS>`__"
" file."
msgstr ""
"这篇文章介绍了 Python 3.2 相比 3.1 新增的特性。 Python 3.2 发布于 2011 年 2 月 20 日。 "
"文章聚焦于几个关键特性并给出了一些示例。 有关完整细节，请参阅 `Misc/NEWS "
"<https://github.com/python/cpython/blob/076ca6c3c8df3030307e548d9be792ce3c1c6eea/Misc/NEWS>`__"
" 文件。"

#: ../../whatsnew/3.2.rst:60
msgid ":pep:`392` - Python 3.2 Release Schedule"
msgstr ":pep:`392` - Python 3.2 发布计划"

#: ../../whatsnew/3.2.rst:64
msgid "PEP 384: Defining a Stable ABI"
msgstr "PEP 384: 定义稳定的ABI"

#: ../../whatsnew/3.2.rst:66
msgid ""
"In the past, extension modules built for one Python version were often not "
"usable with other Python versions. Particularly on Windows, every feature "
"release of Python required rebuilding all extension modules that one wanted "
"to use. This requirement was the result of the free access to Python "
"interpreter internals that extension modules could use."
msgstr ""
"过去，为一个 Python 版本所构建的扩展模块通常无法用于其他 Python 版本。 特别是在 Windows 上，每一个 Python "
"新特性发布版都必须重新构建想要使用的所有扩展模块。 之所以有这样的要求是因为扩展模块可以任意访问 Python 解释器的内部对象。"

#: ../../whatsnew/3.2.rst:72
msgid ""
"With Python 3.2, an alternative approach becomes available: extension "
"modules which restrict themselves to a limited API (by defining "
"Py_LIMITED_API) cannot use many of the internals, but are constrained to a "
"set of API functions that are promised to be stable for several releases. As"
" a consequence, extension modules built for 3.2 in that mode will also work "
"with 3.3, 3.4, and so on. Extension modules that make use of details of "
"memory structures can still be built, but will need to be recompiled for "
"every feature release."
msgstr ""
"在 Python 3.2 中，则有了一种替代方式：扩展模块将自己约束于一个受限 API（通过定义 "
"Py_LIMITED_API）因而不能使用许多内部对象，仅限使用一组承诺会在多个发布版中保持稳定的 API 函数。 作为其结果，在这种模式下为 3.2 "
"构建的扩展模块也将能在 3.3、3.4 等版本中运行。 使用了内存结构体细节数据的扩展模块仍然可以被构建，但将需要为每个新特性发布版重新编译。"

#: ../../whatsnew/3.2.rst:83
msgid ":pep:`384` - Defining a Stable ABI"
msgstr ":pep:`384` - 定义稳定的ABI"

#: ../../whatsnew/3.2.rst:84
msgid "PEP written by Martin von Löwis."
msgstr "PEP 由 Martin von Löwis 撰写。"

#: ../../whatsnew/3.2.rst:88
msgid "PEP 389: Argparse Command Line Parsing Module"
msgstr "PEP 389: Argparse 命令行解析模块"

#: ../../whatsnew/3.2.rst:90
msgid ""
"A new module for command line parsing, :mod:`argparse`, was introduced to "
"overcome the limitations of :mod:`optparse` which did not provide support "
"for positional arguments (not just options), subcommands, required options "
"and other common patterns of specifying and validating options."
msgstr ""
"引入了一个新的 :mod:`argparse` 模块用于命令行解析，以克服 :mod:`optparse` "
"的局限性，后者不支持位置参数（不仅仅是选项）、子命令、必需选项以及其他常见的选项指定和验证模式。"

#: ../../whatsnew/3.2.rst:95
msgid ""
"This module has already had widespread success in the community as a third-"
"party module.  Being more fully featured than its predecessor, the "
":mod:`argparse` module is now the preferred module for command-line "
"processing. The older module is still being kept available because of the "
"substantial amount of legacy code that depends on it."
msgstr ""
"该模块作为一个第三方模块已在社区中取得了广泛的成功。相比其前身，:mod:`argparse` "
"模块功能更加全面，现在是处理命令行的首选模块。出于对大量依赖该模块的遗留代码的考虑，旧模块仍被保留使用。"

#: ../../whatsnew/3.2.rst:101
msgid ""
"Here's an annotated example parser showing features like limiting results to"
" a set of choices, specifying a *metavar* in the help screen, validating "
"that one or more positional arguments is present, and making a required "
"option::"
msgstr ""
"以下是一个带注释的示例解析器，展示了诸如限制结果到一组选项、在帮助屏幕中指定 "
"*metavar*、验证一个或多个位置参数是否存在以及创建一个必需选项等功能："

#: ../../whatsnew/3.2.rst:105
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser(\n"
"            description = 'Manage servers',         # main description for help\n"
"            epilog = 'Tested on Solaris and Linux') # displayed after help\n"
"parser.add_argument('action',                       # argument name\n"
"            choices = ['deploy', 'start', 'stop'],  # three allowed values\n"
"            help = 'action on each target')         # help msg\n"
"parser.add_argument('targets',\n"
"            metavar = 'HOSTNAME',                   # var name used in help msg\n"
"            nargs = '+',                            # require one or more targets\n"
"            help = 'url for target machines')       # help msg explanation\n"
"parser.add_argument('-u', '--user',                 # -u or --user option\n"
"            required = True,                        # make it a required argument\n"
"            help = 'login as user')"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser(\n"
"            description = '管理服务器',         # 帮助中的主要描述\n"
"            epilog = '已在Solaris和Linux上测试') # 要求帮助后显示的内容\n"
"parser.add_argument('action',                       # 参数名称\n"
"            choices = ['deploy', 'start', 'stop'],  # 三个允许的值\n"
"            help = '对每个目标执行的操作')         # 帮助信息\n"
"parser.add_argument('targets',\n"
"            metavar = 'HOSTNAME',                   # 帮助信息中使用的变量名\n"
"            nargs = '+',                            # 需要一个或多个目标\n"
"            help = '目标机器的URL')               # 帮助信息解释\n"
"parser.add_argument('-u', '--user',                 # -u 或 --user 选项\n"
"            required = True,                        # 使其成为必需参数\n"
"            help = '以用户身份登录')"

#: ../../whatsnew/3.2.rst:120
msgid "Example of calling the parser on a command string::"
msgstr "在命令字符串中调用解析器的示例::"

#: ../../whatsnew/3.2.rst:122
msgid ""
">>> cmd = 'deploy sneezy.example.com sleepy.example.com -u skycaptain'\n"
">>> result = parser.parse_args(cmd.split())\n"
">>> result.action\n"
"'deploy'\n"
">>> result.targets\n"
"['sneezy.example.com', 'sleepy.example.com']\n"
">>> result.user\n"
"'skycaptain'"
msgstr ""
">>> cmd = 'deploy sneezy.example.com sleepy.example.com -u skycaptain'\n"
">>> result = parser.parse_args(cmd.split())\n"
">>> result.action\n"
"'deploy'\n"
">>> result.targets\n"
"['sneezy.example.com', 'sleepy.example.com']\n"
">>> result.user\n"
"'skycaptain'"

#: ../../whatsnew/3.2.rst:131
msgid "Example of the parser's automatically generated help::"
msgstr "解析器自动生成的帮助示例::"

#: ../../whatsnew/3.2.rst:133
msgid ""
">>> parser.parse_args('-h'.split())\n"
"\n"
"usage: manage_cloud.py [-h] -u USER\n"
"                       {deploy,start,stop} HOSTNAME [HOSTNAME ...]\n"
"\n"
"Manage servers\n"
"\n"
"positional arguments:\n"
"  {deploy,start,stop}   action on each target\n"
"  HOSTNAME              url for target machines\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -u USER, --user USER  login as user\n"
"\n"
"Tested on Solaris and Linux"
msgstr ""
">>> parser.parse_args('-h'.split())\n"
"\n"
"usage: manage_cloud.py [-h] -u USER\n"
"                       {deploy,start,stop} HOSTNAME [HOSTNAME ...]\n"
"\n"
"Manage servers\n"
"\n"
"positional arguments:\n"
"  {deploy,start,stop}   action on each target\n"
"  HOSTNAME              url for target machines\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -u USER, --user USER  login as user\n"
"\n"
"Tested on Solaris and Linux"

#: ../../whatsnew/3.2.rst:150
msgid ""
"An especially nice :mod:`argparse` feature is the ability to define "
"subparsers, each with their own argument patterns and help displays::"
msgstr "一个非常好的 :mod:`argparse` 特性是可以定义子解析器，每个子解析器拥有它们自己的参数模式和帮助显示::"

#: ../../whatsnew/3.2.rst:153
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser(prog='HELM')\n"
"subparsers = parser.add_subparsers()\n"
"\n"
"parser_l = subparsers.add_parser('launch', help='Launch Control')   # first subgroup\n"
"parser_l.add_argument('-m', '--missiles', action='store_true')\n"
"parser_l.add_argument('-t', '--torpedos', action='store_true')\n"
"\n"
"parser_m = subparsers.add_parser('move', help='Move Vessel',        # second subgroup\n"
"                                 aliases=('steer', 'turn'))         # equivalent names\n"
"parser_m.add_argument('-c', '--course', type=int, required=True)\n"
"parser_m.add_argument('-s', '--speed', type=int, default=0)"
msgstr ""
"import argparse\n"
"parser = argparse.ArgumentParser(prog='HELM')\n"
"subparsers = parser.add_subparsers()\n"
"\n"
"parser_l = subparsers.add_parser('launch', help='Launch Control')   # 第一个子分组\n"
"parser_l.add_argument('-m', '--missiles', action='store_true')\n"
"parser_l.add_argument('-t', '--torpedos', action='store_true')\n"
"\n"
"parser_m = subparsers.add_parser('move', help='Move Vessel',        # 第二个子分组\n"
"                                 aliases=('steer', 'turn'))         # 等价的名称\n"
"parser_m.add_argument('-c', '--course', type=int, required=True)\n"
"parser_m.add_argument('-s', '--speed', type=int, default=0)"

#: ../../whatsnew/3.2.rst:166
msgid ""
"$ ./helm.py --help                         # top level help (launch and move)\n"
"$ ./helm.py launch --help                  # help for launch options\n"
"$ ./helm.py launch --missiles              # set missiles=True and torpedos=False\n"
"$ ./helm.py steer --course 180 --speed 5   # set movement parameters"
msgstr ""
"$ ./helm.py --help                         # 最高层级的帮助 (launch 和 move)\n"
"$ ./helm.py launch --help                  # launch 选项的帮助\n"
"$ ./helm.py launch --missiles              # 设置 missiles=True 及 torpedos=False\n"
"$ ./helm.py steer --course 180 --speed 5   # 设置动作形参"

#: ../../whatsnew/3.2.rst:175
msgid ":pep:`389` - New Command Line Parsing Module"
msgstr ":pep:`389` - 新的命令行解析模块"

#: ../../whatsnew/3.2.rst:176
msgid "PEP written by Steven Bethard."
msgstr "PEP 由 Steven Bethard 撰写。"

#: ../../whatsnew/3.2.rst:178
msgid ""
":ref:`upgrading-optparse-code` for details on the differences from "
":mod:`optparse`."
msgstr "参阅 :ref:`upgrading-optparse-code` 了解与 :mod:`optparse` 的差异的细节。"

#: ../../whatsnew/3.2.rst:182
msgid "PEP 391:  Dictionary Based Configuration for Logging"
msgstr "PEP 391:  基于字典的日志配置"

#: ../../whatsnew/3.2.rst:184
msgid ""
"The :mod:`logging` module provided two kinds of configuration, one style "
"with function calls for each option or another style driven by an external "
"file saved in a :mod:`configparser` format.  Those options did not provide "
"the flexibility to create configurations from JSON or YAML files, nor did "
"they support incremental configuration, which is needed for specifying "
"logger options from a command line."
msgstr ""
":mod:`logging` 模块提供了两种配置方式，一种是通过函数调用为每个选项进行配置，另一种是通过外部文件进行配置，该文件以 "
":mod:`configparser` 格式保存。这些选项无法灵活地从 JSON 或 YAML "
"文件创建配置，也不支持增量配置，而增量配置是用于从命令行指定日志记录器选项所必需的。"

#: ../../whatsnew/3.2.rst:191
msgid ""
"To support a more flexible style, the module now offers "
":func:`logging.config.dictConfig` for specifying logging configuration with "
"plain Python dictionaries.  The configuration options include formatters, "
"handlers, filters, and loggers.  Here's a working example of a configuration"
" dictionary::"
msgstr ""
"为了支持更灵活的配置方式，该模块现在提供了 :func:`logging.config.dictConfig`，用于通过普通的 Python "
"字典指定日志配置。配置选项包括格式化器、处理器、过滤器和日志记录器。以下是一个配置字典的工作示例："

#: ../../whatsnew/3.2.rst:197
msgid ""
"{\"version\": 1,\n"
" \"formatters\": {\"brief\": {\"format\": \"%(levelname)-8s: %(name)-15s: %(message)s\"},\n"
"                \"full\": {\"format\": \"%(asctime)s %(name)-15s %(levelname)-8s %(message)s\"}\n"
"                },\n"
" \"handlers\": {\"console\": {\n"
"                   \"class\": \"logging.StreamHandler\",\n"
"                   \"formatter\": \"brief\",\n"
"                   \"level\": \"INFO\",\n"
"                   \"stream\": \"ext://sys.stdout\"},\n"
"              \"console_priority\": {\n"
"                   \"class\": \"logging.StreamHandler\",\n"
"                   \"formatter\": \"full\",\n"
"                   \"level\": \"ERROR\",\n"
"                   \"stream\": \"ext://sys.stderr\"}\n"
"              },\n"
" \"root\": {\"level\": \"DEBUG\", \"handlers\": [\"console\", \"console_priority\"]}}"
msgstr ""
"{\"version\": 1,\n"
" \"formatters\": {\"brief\": {\"format\": \"%(levelname)-8s: %(name)-15s: %(message)s\"},\n"
"                \"full\": {\"format\": \"%(asctime)s %(name)-15s %(levelname)-8s %(message)s\"}\n"
"                },\n"
" \"handlers\": {\"console\": {\n"
"                   \"class\": \"logging.StreamHandler\",\n"
"                   \"formatter\": \"brief\",\n"
"                   \"level\": \"INFO\",\n"
"                   \"stream\": \"ext://sys.stdout\"},\n"
"              \"console_priority\": {\n"
"                   \"class\": \"logging.StreamHandler\",\n"
"                   \"formatter\": \"full\",\n"
"                   \"level\": \"ERROR\",\n"
"                   \"stream\": \"ext://sys.stderr\"}\n"
"              },\n"
" \"root\": {\"level\": \"DEBUG\", \"handlers\": [\"console\", \"console_priority\"]}}"

#: ../../whatsnew/3.2.rst:215
msgid ""
"If that dictionary is stored in a file called :file:`conf.json`, it can be "
"loaded and called with code like this::"
msgstr "如果将该字典存储在一个名为 :file:`conf.json` 的文件中，可以使用如下代码加载并调用它："

#: ../../whatsnew/3.2.rst:218
msgid ""
">>> import json, logging.config\n"
">>> with open('conf.json') as f:\n"
"...     conf = json.load(f)\n"
"...\n"
">>> logging.config.dictConfig(conf)\n"
">>> logging.info(\"Transaction completed normally\")\n"
"INFO    : root           : Transaction completed normally\n"
">>> logging.critical(\"Abnormal termination\")\n"
"2011-02-17 11:14:36,694 root            CRITICAL Abnormal termination"
msgstr ""
">>> import json, logging.config\n"
">>> with open('conf.json') as f:\n"
"...     conf = json.load(f)\n"
"...\n"
">>> logging.config.dictConfig(conf)\n"
">>> logging.info(\"Transaction completed normally\")\n"
"INFO    : root           : Transaction completed normally\n"
">>> logging.critical(\"Abnormal termination\")\n"
"2011-02-17 11:14:36,694 root            CRITICAL Abnormal termination"

#: ../../whatsnew/3.2.rst:230
msgid ":pep:`391` - Dictionary Based Configuration for Logging"
msgstr ":pep:`391` - 基于字典的日志配置"

#: ../../whatsnew/3.2.rst:231
msgid "PEP written by Vinay Sajip."
msgstr "PEP 由 Vinay Sajip 撰写。"

#: ../../whatsnew/3.2.rst:235
msgid "PEP 3148:  The ``concurrent.futures`` module"
msgstr "PEP 3148:  ``concurrent.futures`` 模块"

#: ../../whatsnew/3.2.rst:237
msgid ""
"Code for creating and managing concurrency is being collected in a new top-"
"level namespace, *concurrent*.  Its first member is a *futures* package "
"which provides a uniform high-level interface for managing threads and "
"processes."
msgstr ""
"用于创建和管理并发性的代码正在被收集到一个新的顶级命名空间 *concurrent* 中。其第一个成员是一个 *futures* "
"包，该包提供了一个统一的高级接口，用于管理线程和进程。"

#: ../../whatsnew/3.2.rst:241
msgid ""
"The design for :mod:`concurrent.futures` was inspired by the "
"*java.util.concurrent* package.  In that model, a running call and its "
"result are represented by a :class:`~concurrent.futures.Future` object that "
"abstracts features common to threads, processes, and remote procedure calls."
"  That object supports status checks (running or done), timeouts, "
"cancellations, adding callbacks, and access to results or exceptions."
msgstr ""
":mod:`concurrent.futures` 的设计灵感来自 *java.util.concurrent* "
"包。在该模型中，一个正在运行的调用及其结果由一个 :class:`~concurrent.futures.Future` "
"对象表示，该对象抽象了线程、进程和远程过程调用共有的特性。该对象支持状态检查（运行中或已完成）、超时、取消、添加回调以及访问结果或异常。"

#: ../../whatsnew/3.2.rst:248
msgid ""
"The primary offering of the new module is a pair of executor classes for "
"launching and managing calls.  The goal of the executors is to make it "
"easier to use existing tools for making parallel calls. They save the effort"
" needed to setup a pool of resources, launch the calls, create a results "
"queue, add time-out handling, and limit the total number of threads, "
"processes, or remote procedure calls."
msgstr ""
"新模块的核心功能是提供了一对执行器类，用于启动和管理调用任务。这些执行器的设计目标是简化现有并行调用工具的使用流程，它们能够帮助开发者省去以下繁琐操作：配置资源池、发起调用任务、创建结果队列、添加超时处理机制，以及限制线程、进程或远程过程调用的总数量。"

#: ../../whatsnew/3.2.rst:255
msgid ""
"Ideally, each application should share a single executor across multiple "
"components so that process and thread limits can be centrally managed.  This"
" solves the design challenge that arises when each component has its own "
"competing strategy for resource management."
msgstr ""
"理想情况下，每个应用程序应该在多个组件之间共享单个执行器，以便可以集中管理进程和线程限制。这解决了当每个组件都有自己的资源管理竞争策略时出现的设计挑战。"

#: ../../whatsnew/3.2.rst:260
msgid ""
"Both classes share a common interface with three methods: "
":meth:`~concurrent.futures.Executor.submit` for scheduling a callable and "
"returning a :class:`~concurrent.futures.Future` object; "
":meth:`~concurrent.futures.Executor.map` for scheduling many asynchronous "
"calls at a time, and :meth:`~concurrent.futures.Executor.shutdown` for "
"freeing resources.  The class is a :term:`context manager` and can be used "
"in a :keyword:`with` statement to assure that resources are automatically "
"released when currently pending futures are done executing."
msgstr ""
"这两个类共享一个通用接口，包含三个方法: :meth:`~concurrent.futures.Executor.submit` "
"用于调度可调用对象并返回一个 :class:`~concurrent.futures.Future` "
"对象；:meth:`~concurrent.futures.Executor.map` "
"用于一次性调度多个异步调用；:meth:`~concurrent.futures.Executor.shutdown` 用于释放资源。 该类是一个 "
":term:`context manager`，可以在 :keyword:`with` 语句中使用，以确保在当前挂起的 future "
"对象执行完毕时自动释放资源。"

#: ../../whatsnew/3.2.rst:269
msgid ""
"A simple of example of :class:`~concurrent.futures.ThreadPoolExecutor` is a "
"launch of four parallel threads for copying files::"
msgstr ""
":class:`~concurrent.futures.ThreadPoolExecutor` 的一个简单示例是启动四个并行线程来复制文件："

#: ../../whatsnew/3.2.rst:272
msgid ""
"import concurrent.futures, shutil\n"
"with concurrent.futures.ThreadPoolExecutor(max_workers=4) as e:\n"
"    e.submit(shutil.copy, 'src1.txt', 'dest1.txt')\n"
"    e.submit(shutil.copy, 'src2.txt', 'dest2.txt')\n"
"    e.submit(shutil.copy, 'src3.txt', 'dest3.txt')\n"
"    e.submit(shutil.copy, 'src3.txt', 'dest4.txt')"
msgstr ""
"import concurrent.futures, shutil\n"
"with concurrent.futures.ThreadPoolExecutor(max_workers=4) as e:\n"
"    e.submit(shutil.copy, 'src1.txt', 'dest1.txt')\n"
"    e.submit(shutil.copy, 'src2.txt', 'dest2.txt')\n"
"    e.submit(shutil.copy, 'src3.txt', 'dest3.txt')\n"
"    e.submit(shutil.copy, 'src3.txt', 'dest4.txt')"

#: ../../whatsnew/3.2.rst:281
msgid ":pep:`3148` - Futures -- Execute Computations Asynchronously"
msgstr ":pep:`3148` -- futures - 异步执行指令"

#: ../../whatsnew/3.2.rst:282
msgid "PEP written by Brian Quinlan."
msgstr "PEP 由 Brian Quinlan 撰写。"

#: ../../whatsnew/3.2.rst:284
msgid ""
":ref:`Code for Threaded Parallel URL reads<threadpoolexecutor-example>`, an "
"example using threads to fetch multiple web pages in parallel."
msgstr ""
":ref:`使用线程并行 URL 读取的代码示例<threadpoolexecutor-example>`，展示了如何利用线程并发获取多个网页内容。"

#: ../../whatsnew/3.2.rst:287
msgid ""
":ref:`Code for computing prime numbers in parallel<processpoolexecutor-"
"example>`, an example demonstrating "
":class:`~concurrent.futures.ProcessPoolExecutor`."
msgstr ""
":ref:`并行计算质数的代码示例 <processpoolexecutor-example>`，展示了 "
":class:`~concurrent.futures.ProcessPoolExecutor` 的用法。"

#: ../../whatsnew/3.2.rst:293
msgid "PEP 3147:  PYC Repository Directories"
msgstr "PEP 3147: PYC 仓库目录"

#: ../../whatsnew/3.2.rst:295
msgid ""
"Python's scheme for caching bytecode in *.pyc* files did not work well in "
"environments with multiple Python interpreters.  If one interpreter "
"encountered a cached file created by another interpreter, it would recompile"
" the source and overwrite the cached file, thus losing the benefits of "
"caching."
msgstr ""
"Python 在 *.pyc* 文件中缓存字节码的方案在存在多个 Python "
"解释器的环境中效果不佳。如果一个解释器遇到了由另一个解释器创建的缓存文件，它会重新编译源代码并覆盖缓存文件，从而失去缓存的优势。"

#: ../../whatsnew/3.2.rst:300
msgid ""
"The issue of \"pyc fights\" has become more pronounced as it has become "
"commonplace for Linux distributions to ship with multiple versions of "
"Python. These conflicts also arise with CPython alternatives such as Unladen"
" Swallow."
msgstr ""
"随着 Linux 发行版普遍附带多个 Python 版本，“pyc 冲突”问题变得更加突出。这些冲突在使用 CPython 的替代品（如 Unladen"
" Swallow）时也会出现。"

#: ../../whatsnew/3.2.rst:304
msgid ""
"To solve this problem, Python's import machinery has been extended to use "
"distinct filenames for each interpreter.  Instead of Python 3.2 and Python "
"3.3 and Unladen Swallow each competing for a file called \"mymodule.pyc\", "
"they will now look for \"mymodule.cpython-32.pyc\", "
"\"mymodule.cpython-33.pyc\", and \"mymodule.unladen10.pyc\".  And to prevent"
" all of these new files from cluttering source directories, the *pyc* files "
"are now collected in a \"__pycache__\" directory stored under the package "
"directory."
msgstr ""
"为解决此问题，Python 的导入机制已进行扩展，会为每个解释器使用不同的文件名。Python 3.2、Python 3.3 和 Unladen "
"Swallow 不再争抢同一个名为 \"mymodule.pyc\" 的文件，而是分别查找 "
"\"mymodule.cpython-32.pyc\"、\"mymodule.cpython-33.pyc\" 和 "
"\"mymodule.unladen10.pyc\"。此外，为避免这些新文件使源目录变得杂乱，*pyc* 文件现在会被收集到一个名为 "
"\"__pycache__\" 的目录中，该目录存放在包目录下。"

#: ../../whatsnew/3.2.rst:312
msgid ""
"Aside from the filenames and target directories, the new scheme has a few "
"aspects that are visible to the programmer:"
msgstr "除了文件名和目标目录之外，新方案还有几个方面是程序员可见的："

#: ../../whatsnew/3.2.rst:315
msgid ""
"Imported modules now have a :attr:`~module.__cached__` attribute which "
"stores the name of the actual file that was imported:"
msgstr "导入的模块现在具有一个 :attr:`~module.__cached__` 属性，该属性存储实际导入的文件名："

#: ../../whatsnew/3.2.rst:322
msgid ""
"The tag that is unique to each interpreter is accessible from the "
":mod:`!imp` module:"
msgstr "可以通过 :mod:`!imp` 模块访问每个解释器唯一的标签："

#: ../../whatsnew/3.2.rst:329
msgid ""
"Scripts that try to deduce source filename from the imported file now need "
"to be smarter.  It is no longer sufficient to simply strip the \"c\" from a "
"\".pyc\" filename.  Instead, use the new functions in the :mod:`!imp` "
"module:"
msgstr ""
"尝试从导入的文件推断源文件名的脚本现在需要更智能。简单地从\".pyc\"文件名中去除\"c\"已不再足够。相反，应使用 :mod:`!imp` "
"模块中的新函数："

#: ../../whatsnew/3.2.rst:338
msgid ""
"The :mod:`py_compile` and :mod:`compileall` modules have been updated to "
"reflect the new naming convention and target directory.  The command-line "
"invocation of *compileall* has new options: ``-i`` for specifying a list of "
"files and directories to compile and ``-b`` which causes bytecode files to "
"be written to their legacy location rather than *__pycache__*."
msgstr ""
":mod:`py_compile` 和 :mod:`compileall` 模块已更新以反映新的命名约定和目标目录。*compileall* "
"的命令行调用有了新选项：``-i`` 用于指定要编译的文件和目录列表，``-b`` 使字节码文件写入其传统位置而非 *__pycache__*。"

#: ../../whatsnew/3.2.rst:345
msgid ""
"The :mod:`importlib.abc` module has been updated with new :term:`abstract "
"base classes <abstract base class>` for loading bytecode files.  The "
"obsolete ABCs, :class:`!PyLoader` and :class:`!PyPycLoader`, have been "
"deprecated (instructions on how to stay Python 3.1 compatible are included "
"with the documentation)."
msgstr ""
":mod:`importlib.abc` 模块已更新，包含用于加载字节码文件的新 :term:`抽象基类 <abstract base class>`。"
" 过时的 ABC，:class:`!PyLoader` 和 :class:`!PyPycLoader` 已被弃用（如何保持与 Python 3.1 "
"兼容的说明包含在文档中）。"

#: ../../whatsnew/3.2.rst:353
msgid ":pep:`3147` - PYC Repository Directories"
msgstr ":pep:`3147` - PYC 仓库目录"

#: ../../whatsnew/3.2.rst:354 ../../whatsnew/3.2.rst:385
msgid "PEP written by Barry Warsaw."
msgstr "PEP 由 Barry Warsaw 撰写。"

#: ../../whatsnew/3.2.rst:358
msgid "PEP 3149: ABI Version Tagged .so Files"
msgstr "PEP 3149: 带有 ABI 版本标签的 .so 文件"

#: ../../whatsnew/3.2.rst:360
msgid ""
"The PYC repository directory allows multiple bytecode cache files to be co-"
"located.  This PEP implements a similar mechanism for shared object files by"
" giving them a common directory and distinct names for each version."
msgstr "PYC存储库目录允许多个字节码缓存文件共存。此PEP通过为共享对象文件提供一个公共目录并为每个版本提供不同的名称，实现了类似的机制。"

#: ../../whatsnew/3.2.rst:364
msgid ""
"The common directory is \"pyshared\" and the file names are made distinct by"
" identifying the Python implementation (such as CPython, PyPy, Jython, "
"etc.), the major and minor version numbers, and optional build flags (such "
"as \"d\" for debug, \"m\" for pymalloc, \"u\" for wide-unicode).  For an "
"arbitrary package \"foo\", you may see these files when the distribution "
"package is installed::"
msgstr ""
"通用目录为 \"pyshared\"，文件名通过识别 Python 实现方式（如 CPython、PyPy、Jython "
"等）、主版本号和次版本号以及可选的构建标志（如 \"d\" 表示调试、\"m\" 表示 pymalloc、\"u\" "
"表示宽Unicode）来区分。对于任意包 \"foo\"，当分发包安装时，您可能会看到这些文件："

#: ../../whatsnew/3.2.rst:370
msgid ""
"/usr/share/pyshared/foo.cpython-32m.so\n"
"/usr/share/pyshared/foo.cpython-33md.so"
msgstr ""
"/usr/share/pyshared/foo.cpython-32m.so\n"
"/usr/share/pyshared/foo.cpython-33md.so"

#: ../../whatsnew/3.2.rst:373
msgid ""
"In Python itself, the tags are accessible from functions in the "
":mod:`sysconfig` module::"
msgstr "对于 Python 本身，可以通过 :mod:`sysconfig` 模块中的函数来访问这些标签::"

#: ../../whatsnew/3.2.rst:376
msgid ""
">>> import sysconfig\n"
">>> sysconfig.get_config_var('SOABI')       # find the version tag\n"
"'cpython-32mu'\n"
">>> sysconfig.get_config_var('EXT_SUFFIX')  # find the full filename extension\n"
"'.cpython-32mu.so'"
msgstr ""
">>> import sysconfig\n"
">>> sysconfig.get_config_var('SOABI')       # 查找版本标签\n"
"'cpython-32mu'\n"
">>> sysconfig.get_config_var('EXT_SUFFIX')  # 查找完整文件名扩展\n"
"'.cpython-32mu.so'"

#: ../../whatsnew/3.2.rst:384
msgid ":pep:`3149` - ABI Version Tagged .so Files"
msgstr ":pep:`3149` - 带有 ABI 版本标签的 .so 文件"

#: ../../whatsnew/3.2.rst:389
msgid "PEP 3333: Python Web Server Gateway Interface v1.0.1"
msgstr "PEP 3333: Python Web服务器网关接口v1.0.1"

#: ../../whatsnew/3.2.rst:391
msgid ""
"This informational PEP clarifies how bytes/text issues are to be handled by "
"the WSGI protocol.  The challenge is that string handling in Python 3 is "
"most conveniently handled with the :class:`str` type even though the HTTP "
"protocol is itself bytes oriented."
msgstr ""
"本信息性 PEP 阐明了 WSGI 协议如何处理字节/文本问题。挑战在于，尽管 HTTP 协议本身是基于字节的，但 Python 3 "
"中的字符串处理最方便的方式是使用 :class:`str` 类型。"

#: ../../whatsnew/3.2.rst:396
msgid ""
"The PEP differentiates so-called *native strings* that are used for "
"request/response headers and metadata versus *byte strings* which are used "
"for the bodies of requests and responses."
msgstr "该 PEP 规范区分了用于请求/响应头和元数据的所谓 *原生字符串*，与用于请求和响应正文的 *字节串*。"

#: ../../whatsnew/3.2.rst:400
msgid ""
"The *native strings* are always of type :class:`str` but are restricted to "
"code points between *U+0000* through *U+00FF* which are translatable to "
"bytes using *Latin-1* encoding.  These strings are used for the keys and "
"values in the environment dictionary and for response headers and statuses "
"in the :func:`!start_response` function.  They must follow :rfc:`2616` with "
"respect to encoding. That is, they must either be *ISO-8859-1* characters or"
" use :rfc:`2047` MIME encoding."
msgstr ""
"*原生字符串* 始终为 :class:`str` 类型，但限制在 *U+0000* 到 *U+00FF* 之间的代码点，这些代码点可以使用 "
"*Latin-1* 编码转换为字节。这些字符串用于环境字典中的键和值，以及 :func:`!start_response` "
"函数中的响应头和状态。它们必须遵循 :rfc:`2616` 的编码要求。也就是说，它们必须是 *ISO-8859-1* 字符或使用 "
":rfc:`2047` MIME 编码。"

#: ../../whatsnew/3.2.rst:408
msgid ""
"For developers porting WSGI applications from Python 2, here are the salient"
" points:"
msgstr "对于从 Python 2 迁移 WSGI 应用程序的开发者，以下是关键点："

#: ../../whatsnew/3.2.rst:411
msgid ""
"If the app already used strings for headers in Python 2, no change is "
"needed."
msgstr "如果应用程序在 Python 2 中已经使用字符串作为请求/响应头，则无需更改。"

#: ../../whatsnew/3.2.rst:413
msgid ""
"If instead, the app encoded output headers or decoded input headers, then "
"the headers will need to be re-encoded to Latin-1.  For example, an output "
"header encoded in utf-8 was using ``h.encode('utf-8')`` now needs to convert"
" from bytes to native strings using ``h.encode('utf-8').decode('latin-1')``."
msgstr ""
"如果应用程序对输出头进行编码或对输入头进行解码，则头需要重新编码为 Latin-1。例如，一个使用 utf-8 编码的输出头原本使用 "
"``h.encode('utf-8')``，现在需要转换为字节到原生字符串，使用 "
"``h.encode('utf-8').decode('latin-1')``。"

#: ../../whatsnew/3.2.rst:418
msgid ""
"Values yielded by an application or sent using the :meth:`!write` method "
"must be byte strings.  The :func:`!start_response` function and environ must"
" use native strings.  The two cannot be mixed."
msgstr ""
"应用程序生成的值或使用 :meth:`!write` 方法发送的值必须是字节字符串。:func:`!start_response` "
"函数和环境必须使用原生字符串。两者不能混用。"

#: ../../whatsnew/3.2.rst:422
msgid ""
"For server implementers writing CGI-to-WSGI pathways or other CGI-style "
"protocols, the users must to be able access the environment using native "
"strings even though the underlying platform may have a different convention."
"  To bridge this gap, the :mod:`wsgiref` module has a new function, "
":func:`wsgiref.handlers.read_environ` for transcoding CGI variables from "
":data:`os.environ` into native strings and returning a new dictionary."
msgstr ""
"对于编写CGI到WSGI路径或其他CGI风格协议的服务器实现者来说，用户必须能够使用原生字符串访问环境，即使底层平台可能有不同的约定。为了弥合这一差距，:mod:`wsgiref`"
" 模块新增了一个函数 :func:`wsgiref.handlers.read_environ`，用于将CGI变量从 "
":data:`os.environ` 转码为原生字符串，并返回一个新的字典。"

#: ../../whatsnew/3.2.rst:431
msgid ":pep:`3333` - Python Web Server Gateway Interface v1.0.1"
msgstr ":pep:`3333` - Python Web服务器网关接口v1.0.1"

#: ../../whatsnew/3.2.rst:432
msgid "PEP written by Phillip Eby."
msgstr "PEP 由 Phillip Eby 撰写。"

#: ../../whatsnew/3.2.rst:436
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.2.rst:438
msgid "Some smaller changes made to the core Python language are:"
msgstr "对Python 语言核心进行的小改动："

#: ../../whatsnew/3.2.rst:440
msgid ""
"String formatting for :func:`format` and :meth:`str.format` gained new "
"capabilities for the format character **#**.  Previously, for integers in "
"binary, octal, or hexadecimal, it caused the output to be prefixed with "
"'0b', '0o', or '0x' respectively.  Now it can also handle floats, complex, "
"and Decimal, causing the output to always have a decimal point even when no "
"digits follow it."
msgstr ""
":func:`format` 函数和 :meth:`str.format` 方法的字符串格式化功能为格式字符 **#** "
"新增了能力。此前，对于二进制、八进制或十六进制的整数，该字符会使输出分别带有 '0b'、'0o' 或 '0x' 前缀。现在，它还能处理浮点数、复数和 "
"Decimal 类型，确保输出始终包含小数点——即使后续没有数字跟随。"

#: ../../whatsnew/3.2.rst:452
msgid ""
"(Suggested by Mark Dickinson and implemented by Eric Smith in "
":issue:`7094`.)"
msgstr "（由 Mark Dickinson 建议，Eric Smith 在 :issue:`7094` 中实现。）"

#: ../../whatsnew/3.2.rst:454
msgid ""
"There is also a new :meth:`str.format_map` method that extends the "
"capabilities of the existing :meth:`str.format` method by accepting "
"arbitrary :term:`mapping` objects.  This new method makes it possible to use"
" string formatting with any of Python's many dictionary-like objects such as"
" :class:`~collections.defaultdict`, :class:`~shelve.Shelf`, "
":class:`~configparser.ConfigParser`, or :mod:`dbm`.  It is also useful with "
"custom :class:`dict` subclasses that normalize keys before look-up or that "
"supply a :meth:`__missing__` method for unknown keys::"
msgstr ""
"还有一个新的 :meth:`str.format_map` 方法，它通过接受任意的 :term:`mapping` 对象，扩展了现有 "
":meth:`str.format` 方法的功能。这个新方法使得可以使用字符串格式化与Python的许多字典类对象，如 "
":class:`~collections.defaultdict`、:class:`~shelve.Shelf`、:class:`~configparser.ConfigParser`"
" 或 :mod:`dbm`。它也适用于在查找前标准化键的自定义 :class:`dict` 子类，或者为未知键提供 "
":meth:`__missing__` 方法的自定义类::"

#: ../../whatsnew/3.2.rst:463
msgid ""
">>> import shelve\n"
">>> d = shelve.open('tmp.shl')\n"
">>> 'The {project_name} status is {status} as of {date}'.format_map(d)\n"
"'The testing project status is green as of February 15, 2011'\n"
"\n"
">>> class LowerCasedDict(dict):\n"
"...     def __getitem__(self, key):\n"
"...         return dict.__getitem__(self, key.lower())\n"
"...\n"
">>> lcd = LowerCasedDict(part='widgets', quantity=10)\n"
">>> 'There are {QUANTITY} {Part} in stock'.format_map(lcd)\n"
"'There are 10 widgets in stock'\n"
"\n"
">>> class PlaceholderDict(dict):\n"
"...     def __missing__(self, key):\n"
"...         return '<{}>'.format(key)\n"
"...\n"
">>> 'Hello {name}, welcome to {location}'.format_map(PlaceholderDict())\n"
"'Hello <name>, welcome to <location>'"
msgstr ""
">>> import shelve\n"
">>> d = shelve.open('tmp.shl')\n"
">>> 'The {project_name} status is {status} as of {date}'.format_map(d)\n"
"'The testing project status is green as of February 15, 2011'\n"
"\n"
">>> class LowerCasedDict(dict):\n"
"...     def __getitem__(self, key):\n"
"...         return dict.__getitem__(self, key.lower())\n"
"...\n"
">>> lcd = LowerCasedDict(part='widgets', quantity=10)\n"
">>> 'There are {QUANTITY} {Part} in stock'.format_map(lcd)\n"
"'There are 10 widgets in stock'\n"
"\n"
">>> class PlaceholderDict(dict):\n"
"...     def __missing__(self, key):\n"
"...         return '<{}>'.format(key)\n"
"...\n"
">>> 'Hello {name}, welcome to {location}'.format_map(PlaceholderDict())\n"
"'Hello <name>, welcome to <location>'"

#: ../../whatsnew/3.2.rst:483
msgid ""
"(Suggested by Raymond Hettinger and implemented by Eric Smith in "
":issue:`6081`.)"
msgstr "（由 Raymond Hettinger 提议并由 Eric Smith 在 :issue:`6081` 中实现。）"

#: ../../whatsnew/3.2.rst:486
msgid ""
"The interpreter can now be started with a quiet option, ``-q``, to prevent "
"the copyright and version information from being displayed in the "
"interactive mode.  The option can be introspected using the "
":data:`sys.flags` attribute:"
msgstr ""
"解释器现在可以带有一个安静选项 ``-q`` 启动，以防止在交互模式下显示版权和版本信息。该选项可以通过 :data:`sys.flags` "
"属性进行内省："

#: ../../whatsnew/3.2.rst:490
msgid ""
"$ python -q\n"
">>> sys.flags\n"
"sys.flags(debug=0, division_warning=0, inspect=0, interactive=0,\n"
"optimize=0, dont_write_bytecode=0, no_user_site=0, no_site=0,\n"
"ignore_environment=0, verbose=0, bytes_warning=0, quiet=1)"
msgstr ""
"$ python -q\n"
">>> sys.flags\n"
"sys.flags(debug=0, division_warning=0, inspect=0, interactive=0,\n"
"optimize=0, dont_write_bytecode=0, no_user_site=0, no_site=0,\n"
"ignore_environment=0, verbose=0, bytes_warning=0, quiet=1)"

#: ../../whatsnew/3.2.rst:498
msgid "(Contributed by Marcin Wojdyr in :issue:`1772833`)."
msgstr "（由 Marcin Wojdyr 在 :issue:`1772833` 中贡献。）"

#: ../../whatsnew/3.2.rst:500
msgid ""
"The :func:`hasattr` function works by calling :func:`getattr` and detecting "
"whether an exception is raised.  This technique allows it to detect methods "
"created dynamically by :meth:`~object.__getattr__` or "
":meth:`~object.__getattribute__` which would otherwise be absent from the "
"class dictionary.  Formerly, *hasattr* would catch any exception, possibly "
"masking genuine errors.  Now, *hasattr* has been tightened to only catch "
":exc:`AttributeError` and let other exceptions pass through::"
msgstr ""
":func:`hasattr` 函数通过调用 :func:`getattr` 并检测是否引发异常来工作。这种技术使其能够检测由 "
":meth:`~object.__getattr__` 或 :meth:`~object.__getattribute__` "
"动态创建的方法，这些方法在类字典中原本是不存在的。以前，*hasattr* 会捕获任何异常，可能会掩盖真正的错误。现在，*hasattr* "
"已经被改进，仅捕获 :exc:`AttributeError`，而让其他异常通过::"

#: ../../whatsnew/3.2.rst:508
msgid ""
">>> class A:\n"
"...     @property\n"
"...     def f(self):\n"
"...         return 1 // 0\n"
"...\n"
">>> a = A()\n"
">>> hasattr(a, 'f')\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ZeroDivisionError: integer division or modulo by zero"
msgstr ""
">>> class A:\n"
"...     @property\n"
"...     def f(self):\n"
"...         return 1 // 0\n"
"...\n"
">>> a = A()\n"
">>> hasattr(a, 'f')\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ZeroDivisionError: integer division or modulo by zero"

#: ../../whatsnew/3.2.rst:519
msgid ""
"(Discovered by Yury Selivanov and fixed by Benjamin Peterson; "
":issue:`9666`.)"
msgstr "（由 Yury Selivanov 发现并由 Benjamin Peterson 在 :issue:`9666` 中修复。）"

#: ../../whatsnew/3.2.rst:521
msgid ""
"The :func:`str` of a float or complex number is now the same as its "
":func:`repr`. Previously, the :func:`str` form was shorter but that just "
"caused confusion and is no longer needed now that the shortest possible "
":func:`repr` is displayed by default:"
msgstr ""
"浮点数或复数的 :func:`str` 现在与它的 :func:`repr` 相同。 在之前，:func:`str` "
"形式更短但这只会造成混淆而现在已不再需要因为默认就会显示最短的 :func:`repr`:"

#: ../../whatsnew/3.2.rst:532
msgid "(Proposed and implemented by Mark Dickinson; :issue:`9337`.)"
msgstr "（由 Mark Dickinson 在 :issue:`9337` 中提议并实现。）"

#: ../../whatsnew/3.2.rst:534
msgid ""
":class:`memoryview` objects now have a :meth:`~memoryview.release` method "
"and they also now support the context management protocol.  This allows "
"timely release of any resources that were acquired when requesting a buffer "
"from the original object."
msgstr ""
":class:`memoryview` 对象现在有一个 :meth:`~memoryview.release` "
"方法，并且它们现在也支持上下文管理协议。这允许及时释放请求原始对象缓冲区时获得的任何资源。"

#: ../../whatsnew/3.2.rst:543
msgid "(Added by Antoine Pitrou; :issue:`9757`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`9757` 中添加。）"

#: ../../whatsnew/3.2.rst:545
msgid ""
"Previously it was illegal to delete a name from the local namespace if it "
"occurs as a free variable in a nested block::"
msgstr "此前，如果名称在嵌套块中作为自由变量出现，删除局部命名空间中的名称是非法的::"

#: ../../whatsnew/3.2.rst:548
msgid ""
"def outer(x):\n"
"    def inner():\n"
"        return x\n"
"    inner()\n"
"    del x"
msgstr ""
"def outer(x):\n"
"    def inner():\n"
"        return x\n"
"    inner()\n"
"    del x"

#: ../../whatsnew/3.2.rst:554
msgid ""
"This is now allowed.  Remember that the target of an :keyword:`except` "
"clause is cleared, so this code which used to work with Python 2.6, raised a"
" :exc:`SyntaxError` with Python 3.1 and now works again::"
msgstr ""
"现在允许这样做。请记住，:keyword:`except` 子句的目标是被清除的，所以这段代码在 Python 2.6 中可以工作，但在 Python "
"3.1 中会引发 :exc:`SyntaxError`，现在又再次可以工作::"

#: ../../whatsnew/3.2.rst:558
msgid ""
"def f():\n"
"    def print_error():\n"
"        print(e)\n"
"    try:\n"
"        something\n"
"    except Exception as e:\n"
"        print_error()\n"
"        # implicit \"del e\" here"
msgstr ""
"def f():\n"
"    def print_error():\n"
"        print(e)\n"
"    try:\n"
"        something\n"
"    except Exception as e:\n"
"        print_error()\n"
"        # 在此隐式执行 \"del e\""

#: ../../whatsnew/3.2.rst:567
msgid "(See :issue:`4617`.)"
msgstr "（参见 :issue:`4617`。）"

#: ../../whatsnew/3.2.rst:569
msgid ""
":ref:`Struct sequence types <struct-sequence-objects>` are now subclasses of"
" tuple. This means that C structures like those returned by :func:`os.stat`,"
" :func:`time.gmtime`, and :data:`sys.version_info` now work like a "
":term:`named tuple` and now work with functions and methods that expect a "
"tuple as an argument.  This is a big step forward in making the C structures"
" as flexible as their pure Python counterparts:"
msgstr ""
":ref:`结构体序列类型 <struct-sequence-objects>` 现在是 tuple 的子类。 这意味着像 "
":func:`os.stat`、:func:`time.gmtime` 和 :data:`sys.version_info` 返回的 C 结构现在像 "
":term:`named tuple` 一样工作，并且可以与期望一个元组作为参数的函数和方法一起使用。 这是使 C 结构体与其纯 Python "
"对应物一样灵活的一大步："

#: ../../whatsnew/3.2.rst:582
msgid ""
"(Suggested by Arfrever Frehtes Taifersar Arahesis and implemented by "
"Benjamin Peterson in :issue:`8413`.)"
msgstr ""
"（由 Arfrever Frehtes Taifersar Arahesis 建议，Benjamin Peterson 在 :issue:`8413` "
"中实现。）"

#: ../../whatsnew/3.2.rst:585
msgid ""
"Warnings are now easier to control using the :envvar:`PYTHONWARNINGS` "
"environment variable as an alternative to using ``-W`` at the command line:"
msgstr "现在可以使用 :envvar:`PYTHONWARNINGS` 环境变量来更轻松地控制警告，作为在命令行中使用 ``-W`` 的替代方案:"

#: ../../whatsnew/3.2.rst:588
msgid ""
"$ export PYTHONWARNINGS='ignore::RuntimeWarning::,once::UnicodeWarning::'"
msgstr ""
"$ export PYTHONWARNINGS='ignore::RuntimeWarning::,once::UnicodeWarning::'"

#: ../../whatsnew/3.2.rst:592
msgid ""
"(Suggested by Barry Warsaw and implemented by Philip Jenvey in "
":issue:`7301`.)"
msgstr "（由Barry Warsaw建议，Philip Jenvey在 :issue:`7301` 中实现。）"

#: ../../whatsnew/3.2.rst:594
msgid ""
"A new warning category, :exc:`ResourceWarning`, has been added.  It is "
"emitted when potential issues with resource consumption or cleanup are "
"detected.  It is silenced by default in normal release builds but can be "
"enabled through the means provided by the :mod:`warnings` module, or on the "
"command line."
msgstr ""
"新增了一个警告类别: "
":exc:`ResourceWarning`。当检测到资源消耗或清理的潜在问题时会发出此警告。在正常发布版本中，该警告默认被禁用，但可以通过 "
":mod:`warnings` 模块提供的方式或通过命令行启用。"

#: ../../whatsnew/3.2.rst:600
msgid ""
"A :exc:`ResourceWarning` is issued at interpreter shutdown if the "
":data:`gc.garbage` list isn't empty, and if :const:`gc.DEBUG_UNCOLLECTABLE` "
"is set, all uncollectable objects are printed.  This is meant to make the "
"programmer aware that their code contains object finalization issues."
msgstr ""
"如果在解释器关闭时 :data:`gc.garbage` 列表不为空，并且设置了 "
":const:`gc.DEBUG_UNCOLLECTABLE`，则会发出 "
":exc:`ResourceWarning`，并打印所有不可收集的对象。这是为了提醒程序员他们的代码中存在对象终结问题。"

#: ../../whatsnew/3.2.rst:605
msgid ""
"A :exc:`ResourceWarning` is also issued when a :term:`file object` is "
"destroyed without having been explicitly closed.  While the deallocator for "
"such object ensures it closes the underlying operating system resource "
"(usually, a file descriptor), the delay in deallocating the object could "
"produce various issues, especially under Windows.  Here is an example of "
"enabling the warning from the command line:"
msgstr ""
"当一个 :term:`file object` 在没有显式关闭的情况下被销毁时，也会发出 :exc:`ResourceWarning`。 "
"尽管此类对象的析构函数确保关闭底层的操作系统资源（通常是文件描述符），但对象释放的延迟可能导致各种问题，特别是在 Windows 系统下。 "
"以下是通过命令行启用该警告的示例："

#: ../../whatsnew/3.2.rst:612
msgid ""
"$ python -q -Wdefault\n"
">>> f = open(\"foo\", \"wb\")\n"
">>> del f\n"
"__main__:1: ResourceWarning: unclosed file <_io.BufferedWriter name='foo'>"
msgstr ""
"$ python -q -Wdefault\n"
">>> f = open(\"foo\", \"wb\")\n"
">>> del f\n"
"__main__:1: ResourceWarning: unclosed file <_io.BufferedWriter name='foo'>"

#: ../../whatsnew/3.2.rst:619
msgid ""
"(Added by Antoine Pitrou and Georg Brandl in :issue:`10093` and "
":issue:`477863`.)"
msgstr ""
"（由 Antoine Pitrou 和 Georg Brandl 在 :issue:`10093` 和 :issue:`477863` 中添加。）"

#: ../../whatsnew/3.2.rst:621
msgid ""
":class:`range` objects now support *index* and *count* methods. This is part"
" of an effort to make more objects fully implement the "
":class:`collections.Sequence <collections.abc.Sequence>` :term:`abstract "
"base class`.  As a result, the language will have a more uniform API.  In "
"addition, :class:`range` objects now support slicing and negative indices, "
"even with values larger than :data:`sys.maxsize`.  This makes *range* more "
"interoperable with lists::"
msgstr ""
":class:`range` 对象现在支持 *index* 和 *count* 方法。 这是为了让更多对象完全实现 "
":class:`collections.Sequence <collections.abc.Sequence>` :term:`abstract "
"base class` 而进行的工作的一部分。 因此，该语言将拥有更加统一的 API。 此外，:class:`range` "
"对象现在还支持切片操作和负数索引，即使这些索引的值大于 :data:`sys.maxsize`。 这使得 *range* 与列表具有更好的互操作性："

#: ../../whatsnew/3.2.rst:628
msgid ""
">>> range(0, 100, 2).count(10)\n"
"1\n"
">>> range(0, 100, 2).index(10)\n"
"5\n"
">>> range(0, 100, 2)[5]\n"
"10\n"
">>> range(0, 100, 2)[0:5]\n"
"range(0, 10, 2)"
msgstr ""
">>> range(0, 100, 2).count(10)\n"
"1\n"
">>> range(0, 100, 2).index(10)\n"
"5\n"
">>> range(0, 100, 2)[5]\n"
"10\n"
">>> range(0, 100, 2)[0:5]\n"
"range(0, 10, 2)"

#: ../../whatsnew/3.2.rst:637
msgid ""
"(Contributed by Daniel Stutzbach in :issue:`9213`, by Alexander Belopolsky "
"in :issue:`2690`, and by Nick Coghlan in :issue:`10889`.)"
msgstr ""
"（由 Daniel Stutzbach 在 :issue:`9213` 中贡献，由 Alexander Belopolsky 在 "
":issue:`2690` 中贡献，由 Nick Coghlan 在 :issue:`10889` 中贡献。）"

#: ../../whatsnew/3.2.rst:640
msgid ""
"The :func:`callable` builtin function from Py2.x was resurrected.  It "
"provides a concise, readable alternative to using an :term:`abstract base "
"class` in an expression like ``isinstance(x, collections.Callable)``:"
msgstr ""
":func:`callable` 内置函数从 Py2.x 中恢复。 它提供了一个简洁、可读的替代方案，用于在类似 ``isinstance(x, "
"collections.Callable)`` 的表达式中使用 :term:`abstract base class`:"

#: ../../whatsnew/3.2.rst:649
msgid "(See :issue:`10518`.)"
msgstr "（参见 :issue:`10518`。）"

#: ../../whatsnew/3.2.rst:651
msgid ""
"Python's import mechanism can now load modules installed in directories with"
" non-ASCII characters in the path name.  This solved an aggravating problem "
"with home directories for users with non-ASCII characters in their "
"usernames."
msgstr ""
"Python 的导入机制现在可以加载路径名中包含非 ASCII 字符的目录中安装的模块。这解决了一个令人烦恼的问题，即用户主目录中包含非 ASCII "
"字符的用户名。"

#: ../../whatsnew/3.2.rst:655
msgid "(Required extensive work by Victor Stinner in :issue:`9425`.)"
msgstr "（需要 Victor Stinner 在 :issue:`9425` 中做大量工作。）"

#: ../../whatsnew/3.2.rst:659
msgid "New, Improved, and Deprecated Modules"
msgstr "新增、改进和弃用的模块"

#: ../../whatsnew/3.2.rst:661
msgid ""
"Python's standard library has undergone significant maintenance efforts and "
"quality improvements."
msgstr "Python 标准库经过了大量的维护工作和质量改进。"

#: ../../whatsnew/3.2.rst:664
msgid ""
"The biggest news for Python 3.2 is that the :mod:`email` package, "
":mod:`mailbox` module, and :mod:`!nntplib` modules now work correctly with "
"the bytes/text model in Python 3.  For the first time, there is correct "
"handling of messages with mixed encodings."
msgstr ""
"Python 3.2 最重要的更新是 :mod:`email` 包、:mod:`mailbox` 模块以及 :mod:`!nntplib` "
"模块现在能够正确支持 Python 3 的字节/文本模块。 历史上首次，对混合编码格式的邮件实现了正确的处理。"

#: ../../whatsnew/3.2.rst:669
msgid ""
"Throughout the standard library, there has been more careful attention to "
"encodings and text versus bytes issues.  In particular, interactions with "
"the operating system are now better able to exchange non-ASCII data using "
"the Windows MBCS encoding, locale-aware encodings, or UTF-8."
msgstr ""
"在整个标准库中，对编码和文本与字节问题的关注更加细致。特别是，与操作系统的交互现在能够更好地使用 Windows MBCS 编码、区域感知编码或 "
"UTF-8 交换非 ASCII 数据。"

#: ../../whatsnew/3.2.rst:674
msgid ""
"Another significant win is the addition of substantially better support for "
"*SSL* connections and security certificates."
msgstr "另一个重要的改进是大幅提升了 *SSL* 连接和安全证书的支持。"

#: ../../whatsnew/3.2.rst:677
msgid ""
"In addition, more classes now implement a :term:`context manager` to support"
" convenient and reliable resource clean-up using a :keyword:`with` "
"statement."
msgstr ""
"此外，更多的类现在实现了 :term:`context manager`，以支持使用 :keyword:`with` 语句进行方便且可靠的资源清理。"

#: ../../whatsnew/3.2.rst:681
msgid "email"
msgstr "email"

#: ../../whatsnew/3.2.rst:683
msgid ""
"The usability of the :mod:`email` package in Python 3 has been mostly fixed "
"by the extensive efforts of R. David Murray.  The problem was that emails "
"are typically read and stored in the form of :class:`bytes` rather than "
":class:`str` text, and they may contain multiple encodings within a single "
"email.  So, the email package had to be extended to parse and generate email"
" messages in bytes format."
msgstr ""
"Python 3 中 :mod:`email` 包的可用性已基本由 R. David Murray 的极大努力修复。问题在于电子邮件通常以 "
":class:`bytes` 而不是 :class:`str` "
"文本的形式读取和存储，并且单个电子邮件中可能包含多种编码。因此，必须扩展电子邮件包以解析和生成字节格式的电子邮件消息。"

#: ../../whatsnew/3.2.rst:690
msgid ""
"New functions :func:`~email.message_from_bytes` and "
":func:`~email.message_from_binary_file`, and new classes "
":class:`~email.parser.BytesFeedParser` and "
":class:`~email.parser.BytesParser` allow binary message data to be parsed "
"into model objects."
msgstr ""
"新函数 :func:`~email.message_from_bytes` 和 "
":func:`~email.message_from_binary_file`，以及新类 "
":class:`~email.parser.BytesFeedParser` 和 :class:`~email.parser.BytesParser` "
"允许将二进制消息数据解析为模型对象。"

#: ../../whatsnew/3.2.rst:695
msgid ""
"Given bytes input to the model, :meth:`~email.message.Message.get_payload` "
"will by default decode a message body that has a :mailheader:`Content-"
"Transfer-Encoding` of *8bit* using the charset specified in the MIME headers"
" and return the resulting string."
msgstr ""
"给定模型的字节输入，:meth:`~email.message.Message.get_payload` 默认将解码具有 "
":mailheader:`Content-Transfer-Encoding` 为 *8bit* 的消息正文，使用 MIME "
"头中指定的字符集，并返回结果字符串。"

#: ../../whatsnew/3.2.rst:700
msgid ""
"Given bytes input to the model, :class:`~email.generator.Generator` will "
"convert message bodies that have a :mailheader:`Content-Transfer-Encoding` "
"of *8bit* to instead have a *7bit* :mailheader:`Content-Transfer-Encoding`."
msgstr ""
"给定模型的字节输入，:class:`~email.generator.Generator` 将把具有 :mailheader:`Content-"
"Transfer-Encoding` 为 *8bit* 的消息正文转换为具有 *7bit* 的 :mailheader:`Content-"
"Transfer-Encoding`。"

#: ../../whatsnew/3.2.rst:704
msgid ""
"Headers with unencoded non-ASCII bytes are deemed to be :rfc:`2047`\\ "
"-encoded using the *unknown-8bit* character set."
msgstr "包含未编码的非 ASCII 字节的邮件头，将被视为使用 *unknown-8bit* 字符集按照 :rfc:`2047` 标准进行编码。"

#: ../../whatsnew/3.2.rst:707
msgid ""
"A new class :class:`~email.generator.BytesGenerator` produces bytes as "
"output, preserving any unchanged non-ASCII data that was present in the "
"input used to build the model, including message bodies with a "
":mailheader:`Content-Transfer-Encoding` of *8bit*."
msgstr ""
"一个新的类 :class:`~email.generator.BytesGenerator` 生成字节输出，保留输入中未更改的任何非 ASCII "
"数据，包括具有 :mailheader:`Content-Transfer-Encoding` 为 *8bit* 的消息正文。"

#: ../../whatsnew/3.2.rst:712
msgid ""
"The :mod:`smtplib` :class:`~smtplib.SMTP` class now accepts a byte string "
"for the *msg* argument to the :meth:`~smtplib.SMTP.sendmail` method, and a "
"new method, :meth:`~smtplib.SMTP.send_message` accepts a "
":class:`~email.message.Message` object and can optionally obtain the "
"*from_addr* and *to_addrs* addresses directly from the object."
msgstr ""
":mod:`smtplib` 的 :class:`~smtplib.SMTP` 类现在接受字节字符串作为 "
":meth:`~smtplib.SMTP.sendmail` 方法的 *msg* 参数，并且一个新的方法 "
":meth:`~smtplib.SMTP.send_message` 接受一个 :class:`~email.message.Message` "
"对象，并可以可选地从对象中直接获取 *from_addr* 和 *to_addrs* 地址。"

#: ../../whatsnew/3.2.rst:718
msgid ""
"(Proposed and implemented by R. David Murray, :issue:`4661` and "
":issue:`10321`.)"
msgstr "（由 R. David Murray 在 :issue:`4661` 和 :issue:`10321` 中提议并实现。）"

#: ../../whatsnew/3.2.rst:721
msgid "elementtree"
msgstr "elementtree"

#: ../../whatsnew/3.2.rst:723
msgid ""
"The :mod:`xml.etree.ElementTree` package and its "
":mod:`!xml.etree.cElementTree` counterpart have been updated to version 1.3."
msgstr ""
":mod:`xml.etree.ElementTree` 包及其 :mod:`!xml.etree.cElementTree` 对应版本已更新到 "
"1.3。"

#: ../../whatsnew/3.2.rst:726
msgid "Several new and useful functions and methods have been added:"
msgstr "新增了几个有用的函数和方法："

#: ../../whatsnew/3.2.rst:728
msgid ""
":func:`xml.etree.ElementTree.fromstringlist` which builds an XML document "
"from a sequence of fragments"
msgstr ":func:`xml.etree.ElementTree.fromstringlist` 可根据一系列片段生成 XML 文档"

#: ../../whatsnew/3.2.rst:730
msgid ""
":func:`xml.etree.ElementTree.register_namespace` for registering a global "
"namespace prefix"
msgstr ":func:`xml.etree.ElementTree.register_namespace` 用于注册全局命名空间前缀"

#: ../../whatsnew/3.2.rst:732
msgid ""
":func:`xml.etree.ElementTree.tostringlist` for string representation "
"including all sublists"
msgstr ":func:`xml.etree.ElementTree.tostringlist` 用于字符串表示包括所有子列表"

#: ../../whatsnew/3.2.rst:734
msgid ""
":meth:`xml.etree.ElementTree.Element.extend` for appending a sequence of "
"zero or more elements"
msgstr ":meth:`xml.etree.ElementTree.Element.extend` 用于添加包含零个或多个元素的序列"

#: ../../whatsnew/3.2.rst:736
msgid ""
":meth:`xml.etree.ElementTree.Element.iterfind` searches an element and "
"subelements"
msgstr ":meth:`xml.etree.ElementTree.Element.iterfind` 可搜索元素和子元素"

#: ../../whatsnew/3.2.rst:738
msgid ""
":meth:`xml.etree.ElementTree.Element.itertext` creates a text iterator over "
"an element and its subelements"
msgstr ":meth:`xml.etree.ElementTree.Element.itertext` 创建一个包含指定元素及其子元素的文本迭代器。"

#: ../../whatsnew/3.2.rst:740
msgid ""
":meth:`xml.etree.ElementTree.TreeBuilder.end` closes the current element"
msgstr ":meth:`xml.etree.ElementTree.TreeBuilder.end` 关闭当前元素"

#: ../../whatsnew/3.2.rst:741
msgid ""
":meth:`xml.etree.ElementTree.TreeBuilder.doctype` handles a doctype "
"declaration"
msgstr ":meth:`xml.etree.ElementTree.TreeBuilder.doctype` 处理 doctype 声明"

#: ../../whatsnew/3.2.rst:744
msgid "Two methods have been deprecated:"
msgstr "两个方法被弃用："

#: ../../whatsnew/3.2.rst:746
msgid ":meth:`!xml.etree.ElementTree.getchildren` use ``list(elem)`` instead."
msgstr ":meth:`!xml.etree.ElementTree.getchildren` 使用 ``list(elem)`` 代替。"

#: ../../whatsnew/3.2.rst:747
msgid ""
":meth:`!xml.etree.ElementTree.getiterator` use ``Element.iter`` instead."
msgstr ":meth:`!xml.etree.ElementTree.getiterator` 使用 ``Element.iter`` 代替。"

#: ../../whatsnew/3.2.rst:749
msgid ""
"For details of the update, see `Introducing ElementTree "
"<https://web.archive.org/web/20200703234532/http://effbot.org/zone/elementtree-13-intro.htm>`_"
" on Fredrik Lundh's website."
msgstr ""
"有关更新的详细信息，请参阅 Fredrik Lundh 网站上的 `Introducing ElementTree "
"<https://web.archive.org/web/20200703234532/http://effbot.org/zone/elementtree-13-intro.htm>`_。"

#: ../../whatsnew/3.2.rst:753
msgid "(Contributed by Florent Xicluna and Fredrik Lundh, :issue:`6472`.)"
msgstr "（由 Florent Xicluna 和 Fredrik Lundh 在 :issue:`6472` 中贡献。）"

#: ../../whatsnew/3.2.rst:756
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.2.rst:758
msgid ""
"The :mod:`functools` module includes a new decorator for caching function "
"calls.  :func:`functools.lru_cache` can save repeated queries to an external"
" resource whenever the results are expected to be the same."
msgstr ""
":mod:`functools` 模块包含一个新的装饰器用于缓存函数调用。:func:`functools.lru_cache` "
"可以在预期结果相同的情况下，保存对外部资源的重复查询。"

#: ../../whatsnew/3.2.rst:762
msgid ""
"For example, adding a caching decorator to a database query function can "
"save database accesses for popular searches:"
msgstr "例如，向数据库查询函数添加缓存装饰器可以节省热门搜索的数据库访问："

#: ../../whatsnew/3.2.rst:775
msgid ""
"To help with choosing an effective cache size, the wrapped function is "
"instrumented for tracking cache statistics:"
msgstr "为了帮助选择有效的缓存大小，包装函数被用于跟踪缓存统计信息："

#: ../../whatsnew/3.2.rst:781
msgid ""
"If the phonelist table gets updated, the outdated contents of the cache can "
"be cleared with:"
msgstr "如果 phonelist 表被更新，过时的缓存内容可以通过以下方式清除："

#: ../../whatsnew/3.2.rst:786
msgid ""
"(Contributed by Raymond Hettinger and incorporating design ideas from Jim "
"Baker, Miki Tebeka, and Nick Coghlan; see `recipe 498245 "
"<https://code.activestate.com/recipes/498245-lru-and-lfu-cache-"
"decorators/>`_\\, `recipe 577479 "
"<https://code.activestate.com/recipes/577479-simple-caching-decorator/>`_\\,"
" :issue:`10586`, and :issue:`10593`.)"
msgstr ""
"（由 Raymond Hettinger 贡献，并融合了 Jim Baker、Miki Tebeka 和 Nick Coghlan 的设计理念；参见 "
"`recipe 498245 <https://code.activestate.com/recipes/498245-lru-and-lfu-"
"cache-decorators/>`_、`recipe 577479 "
"<https://code.activestate.com/recipes/577479-simple-caching-"
"decorator/>`_、:issue:`10586` 和 :issue:`10593`。）"

#: ../../whatsnew/3.2.rst:792
msgid ""
"The :func:`functools.wraps` decorator now adds a :attr:`__wrapped__` "
"attribute pointing to the original callable function.  This allows wrapped "
"functions to be introspected.  It also copies "
":attr:`~function.__annotations__` if defined.  And now it also gracefully "
"skips over missing attributes such as :attr:`~function.__doc__` which might "
"not be defined for the wrapped callable."
msgstr ""
":func:`functools.wraps` 装饰器现在添加了一个指向原始可调用函数的 :attr:`__wrapped__` "
"属性。这使得包装函数可以被内省。它还会复制定义的 "
":attr:`~function.__annotations__`。现在它也能优雅地跳过缺失的属性，如可能未为包装的可调用对象定义的 "
":attr:`~function.__doc__`。"

#: ../../whatsnew/3.2.rst:799
msgid ""
"In the above example, the cache can be removed by recovering the original "
"function:"
msgstr "在上面的例子中，可以通过恢复原始函数来移除缓存："

#: ../../whatsnew/3.2.rst:804
msgid ""
"(By Nick Coghlan and Terrence Cole; :issue:`9567`, :issue:`3445`, and "
":issue:`8814`.)"
msgstr ""
"（由 Nick Coghlan 和 Terrence Cole 在 :issue:`9567`, :issue:`3445` 和 "
":issue:`8814` 中贡献。)"

#: ../../whatsnew/3.2.rst:807
msgid ""
"To help write classes with rich comparison methods, a new decorator "
":func:`functools.total_ordering` will use existing equality and inequality "
"methods to fill in the remaining methods."
msgstr ""
"为帮助编写具有丰富比较方法的类，新增的装饰器 :func:`functools.total_ordering` "
"将使用现有的相等和不相等方法来填充其余的方法。"

#: ../../whatsnew/3.2.rst:811
msgid ""
"For example, supplying *__eq__* and *__lt__* will enable "
":func:`~functools.total_ordering` to fill-in *__le__*, *__gt__* and "
"*__ge__*::"
msgstr ""
"例如，提供 *__eq__* and *__lt__* 后， :func:`~functools.total_ordering` 装饰器将自动补全 "
"*__le__*, *__gt__* 和 *__ge__*::"

#: ../../whatsnew/3.2.rst:814
msgid ""
"@total_ordering\n"
"class Student:\n"
"    def __eq__(self, other):\n"
"        return ((self.lastname.lower(), self.firstname.lower()) ==\n"
"                (other.lastname.lower(), other.firstname.lower()))\n"
"\n"
"    def __lt__(self, other):\n"
"        return ((self.lastname.lower(), self.firstname.lower()) <\n"
"                (other.lastname.lower(), other.firstname.lower()))"
msgstr ""
"@total_ordering\n"
"class Student:\n"
"    def __eq__(self, other):\n"
"        return ((self.lastname.lower(), self.firstname.lower()) ==\n"
"                (other.lastname.lower(), other.firstname.lower()))\n"
"\n"
"    def __lt__(self, other):\n"
"        return ((self.lastname.lower(), self.firstname.lower()) <\n"
"                (other.lastname.lower(), other.firstname.lower()))"

#: ../../whatsnew/3.2.rst:824
msgid ""
"With the *total_ordering* decorator, the remaining comparison methods are "
"filled in automatically."
msgstr "使用 *total_ordering* 装饰器时，将会自动补全其余的比较方法。"

#: ../../whatsnew/3.2.rst:827 ../../whatsnew/3.2.rst:839
#: ../../whatsnew/3.2.rst:883 ../../whatsnew/3.2.rst:904
#: ../../whatsnew/3.2.rst:918 ../../whatsnew/3.2.rst:1788
#: ../../whatsnew/3.2.rst:1832
msgid "(Contributed by Raymond Hettinger.)"
msgstr "（由 Raymond Hettinger 贡献。）"

#: ../../whatsnew/3.2.rst:829
msgid ""
"To aid in porting programs from Python 2, the :func:`functools.cmp_to_key` "
"function converts an old-style comparison function to modern :term:`key "
"function`:"
msgstr ""
"为帮助移植 Python 2 程序，:func:`functools.cmp_to_key` 函数可将旧式的比较函数转换为新式的 :term:`key "
"function`:"

#: ../../whatsnew/3.2.rst:836
msgid ""
"For sorting examples and a brief sorting tutorial, see the `Sorting HowTo "
"<https://wiki.python.org/moin/HowTo/Sorting/>`_ tutorial."
msgstr ""
"有关排序示例和简短的排序教程，请参阅 `排序的技术 <https://wiki.python.org/moin/HowTo/Sorting/>`_ "
"教程。"

#: ../../whatsnew/3.2.rst:842
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.2.rst:844
msgid ""
"The :mod:`itertools` module has a new :func:`~itertools.accumulate` function"
" modeled on APL's *scan* operator and Numpy's *accumulate* function:"
msgstr ""
":mod:`itertools` 模块有一个新的 :func:`~itertools.accumulate` 函数，该函数模仿 APL 的 *scan*"
" 运算符和 Numpy 的 *accumulate* 函数："

#: ../../whatsnew/3.2.rst:855
msgid ""
"For an example using :func:`~itertools.accumulate`, see the :ref:`examples "
"for the random module <random-examples>`."
msgstr ""
"有关使用 :func:`~itertools.accumulate` 的示例，请参阅 :ref:`random 模块的示例 <random-"
"examples>`。"

#: ../../whatsnew/3.2.rst:858
msgid ""
"(Contributed by Raymond Hettinger and incorporating design suggestions from "
"Mark Dickinson.)"
msgstr "（由 Raymond Hettinger 贡献，并融合了 Mark Dickinson 的设计建议。）"

#: ../../whatsnew/3.2.rst:862
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.2.rst:864
msgid ""
"The :class:`collections.Counter` class now has two forms of in-place "
"subtraction, the existing *-=* operator for `saturating subtraction "
"<https://en.wikipedia.org/wiki/Saturation_arithmetic>`_ and the new "
":meth:`~collections.Counter.subtract` method for regular subtraction.  The "
"former is suitable for `multisets <https://en.wikipedia.org/wiki/Multiset>`_"
" which only have positive counts, and the latter is more suitable for use "
"cases that allow negative counts:"
msgstr ""
":class:`collections.Counter` 类现在支持两种形式的原地减法操作：现有的 *-=* 运算符实现的是 `饱和减法 "
"<https://en.wikipedia.org/wiki/Saturation_arithmetic>`_ (即结果不会小于零)，而新增的 "
":meth:`~collections.Counter.subtract` 方法则实现常规减法 (允许结果为负值)。 前者适用于 `多重集合 "
"<https://en.wikipedia.org/wiki/Multiset>`_ (仅包含正计数的场景)，后者更适合允许负计数的使用场景。"

#: ../../whatsnew/3.2.rst:885
msgid ""
"The :class:`collections.OrderedDict` class has a new method "
":meth:`~collections.OrderedDict.move_to_end` which takes an existing key and"
" moves it to either the first or last position in the ordered sequence."
msgstr ""
":class:`collections.OrderedDict` 类有一个新方法 "
":meth:`~collections.OrderedDict.move_to_end`，它接受一个现有的键并将其移动到有序序列的第一个或最后一个位置。"

#: ../../whatsnew/3.2.rst:889
msgid ""
"The default is to move an item to the last position.  This is equivalent of "
"renewing an entry with ``od[k] = od.pop(k)``."
msgstr "默认情况下，将项目移动到最后一个位置。这相当于用 ``od[k] = od.pop(k)`` 更新一个条目。"

#: ../../whatsnew/3.2.rst:892
msgid ""
"A fast move-to-end operation is useful for resequencing entries.  For "
"example, an ordered dictionary can be used to track order of access by aging"
" entries from the oldest to the most recently accessed."
msgstr "快速移动到末尾的操作对于重新排序条目很有用。例如，有序字典可以用来跟踪访问顺序，通过将条目从最旧的更新到最近访问的。"

#: ../../whatsnew/3.2.rst:906
msgid ""
"The :class:`collections.deque` class grew two new methods "
":meth:`~collections.deque.count` and :meth:`~collections.deque.reverse` that"
" make them more substitutable for :class:`list` objects:"
msgstr ""
":class:`collections.deque` 类新增了两个方法 :meth:`~collections.deque.count` 和 "
":meth:`~collections.deque.reverse`，使它们更易于替代 :class:`list` 对象："

#: ../../whatsnew/3.2.rst:921
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.2.rst:923
msgid ""
"The :mod:`threading` module has a new :class:`~threading.Barrier` "
"synchronization class for making multiple threads wait until all of them "
"have reached a common barrier point.  Barriers are useful for making sure "
"that a task with multiple preconditions does not run until all of the "
"predecessor tasks are complete."
msgstr ""
":mod:`threading` 模块有一个新的 :class:`~threading.Barrier` "
"同步类，用于使多个线程等待，直到它们都达到一个共同的屏障点。屏障对于确保具有多个先决条件的任务在所有前置任务完成之前不运行非常有用。"

#: ../../whatsnew/3.2.rst:929
msgid ""
"Barriers can work with an arbitrary number of threads.  This is a "
"generalization of a `Rendezvous "
"<https://en.wikipedia.org/wiki/Synchronous_rendezvous>`_ which is defined "
"for only two threads."
msgstr ""
"屏障可以与任意数量的线程一起工作。这是对仅适用于两个线程的 `会合点 "
"<https://en.wikipedia.org/wiki/Synchronous_rendezvous>`_ 的泛化。"

#: ../../whatsnew/3.2.rst:933
msgid ""
"Implemented as a two-phase cyclic barrier, :class:`~threading.Barrier` "
"objects are suitable for use in loops.  The separate *filling* and "
"*draining* phases assure that all threads get released (drained) before any "
"one of them can loop back and re-enter the barrier.  The barrier fully "
"resets after each cycle."
msgstr ""
"作为两阶段循环屏障实现，:class:`~threading.Barrier` 对象适用于循环中使用。独立的 *填充* 和 *排空* "
"阶段确保所有线程在任何一个线程循环回并重新进入屏障之前都被释放（排空）。屏障在每个周期后完全重置。"

#: ../../whatsnew/3.2.rst:938
msgid "Example of using barriers::"
msgstr "使用屏障的示例："

#: ../../whatsnew/3.2.rst:940
msgid ""
"from threading import Barrier, Thread\n"
"\n"
"def get_votes(site):\n"
"    ballots = conduct_election(site)\n"
"    all_polls_closed.wait()        # do not count until all polls are closed\n"
"    totals = summarize(ballots)\n"
"    publish(site, totals)\n"
"\n"
"all_polls_closed = Barrier(len(sites))\n"
"for site in sites:\n"
"    Thread(target=get_votes, args=(site,)).start()"
msgstr ""
"from threading import Barrier, Thread\n"
"\n"
"def get_votes(site):\n"
"    ballots = conduct_election(site)\n"
"    all_polls_closed.wait()        # 在所有投票站关闭之前不要计数\n"
"    totals = summarize(ballots)\n"
"    publish(site, totals)\n"
"\n"
"all_polls_closed = Barrier(len(sites))\n"
"for site in sites:\n"
"    Thread(target=get_votes, args=(site,)).start()"

#: ../../whatsnew/3.2.rst:952
msgid ""
"In this example, the barrier enforces a rule that votes cannot be counted at"
" any polling site until all polls are closed.  Notice how a solution with a "
"barrier is similar to one with :meth:`threading.Thread.join`, but the "
"threads stay alive and continue to do work (summarizing ballots) after the "
"barrier point is crossed."
msgstr ""
"在这个示例中，屏障强制执行一个规则，即在所有投票站关闭之前，任何投票站都不能计票。请注意，使用屏障的解决方案与使用 "
":meth:`threading.Thread.join` 的解决方案类似，但线程在越过屏障点后仍然保持活动状态并继续工作（汇总选票）。"

#: ../../whatsnew/3.2.rst:958
msgid ""
"If any of the predecessor tasks can hang or be delayed, a barrier can be "
"created with an optional *timeout* parameter.  Then if the timeout period "
"elapses before all the predecessor tasks reach the barrier point, all "
"waiting threads are released and a :exc:`~threading.BrokenBarrierError` "
"exception is raised::"
msgstr ""
"如果任何前置任务可能会挂起或延迟，可以创建一个带有可选 *timeout* "
"参数的屏障。然后，如果在超时期限内所有前置任务都没有到达屏障点，所有等待的线程将被释放，并引发 "
":exc:`~threading.BrokenBarrierError` 异常："

#: ../../whatsnew/3.2.rst:963
msgid ""
"def get_votes(site):\n"
"    ballots = conduct_election(site)\n"
"    try:\n"
"        all_polls_closed.wait(timeout=midnight - time.now())\n"
"    except BrokenBarrierError:\n"
"        lockbox = seal_ballots(ballots)\n"
"        queue.put(lockbox)\n"
"    else:\n"
"        totals = summarize(ballots)\n"
"        publish(site, totals)"
msgstr ""
"def get_votes(site):\n"
"    ballots = conduct_election(site)\n"
"    try:\n"
"        all_polls_closed.wait(timeout=midnight - time.now())\n"
"    except BrokenBarrierError:\n"
"        lockbox = seal_ballots(ballots)\n"
"        queue.put(lockbox)\n"
"    else:\n"
"        totals = summarize(ballots)\n"
"        publish(site, totals)"

#: ../../whatsnew/3.2.rst:974
msgid ""
"In this example, the barrier enforces a more robust rule.  If some election "
"sites do not finish before midnight, the barrier times-out and the ballots "
"are sealed and deposited in a queue for later handling."
msgstr "在这个示例中，屏障执行了一个更健壮的规则。如果某些选举站在午夜前没有完成，屏障将超时，选票将被封存并放入队列中以供后续处理。"

#: ../../whatsnew/3.2.rst:978
msgid ""
"See `Barrier Synchronization Patterns "
"<https://osl.cs.illinois.edu/media/papers/karmani-2009-barrier_synchronization_pattern.pdf>`_"
" for more examples of how barriers can be used in parallel computing.  Also,"
" there is a simple but thorough explanation of barriers in `The Little Book "
"of Semaphores "
"<https://greenteapress.com/semaphores/LittleBookOfSemaphores.pdf>`_, "
"*section 3.6*."
msgstr ""
"请参阅 `屏障同步模式 "
"<https://osl.cs.illinois.edu/media/papers/karmani-2009-barrier_synchronization_pattern.pdf>`_"
" 了解更多关于如何在并行计算中使用屏障的示例。此外，在 `信号量小册子 "
"<https://greenteapress.com/semaphores/LittleBookOfSemaphores.pdf>`_ 的 "
"*第3.6节* 中也有一个简单但详尽的屏障解释。"

#: ../../whatsnew/3.2.rst:984
msgid ""
"(Contributed by Kristján Valur Jónsson with an API review by Jeffrey Yasskin"
" in :issue:`8777`.)"
msgstr ""
"（由 Kristján Valur Jónsson 贡献，并由 Jeffrey Yasskin 在 :issue:`8777` 中进行 API 审查。）"

#: ../../whatsnew/3.2.rst:988
msgid "datetime and time"
msgstr "datetime 和 time"

#: ../../whatsnew/3.2.rst:990
msgid ""
"The :mod:`datetime` module has a new type :class:`~datetime.timezone` that "
"implements the :class:`~datetime.tzinfo` interface by returning a fixed UTC "
"offset and timezone name. This makes it easier to create timezone-aware "
"datetime objects::"
msgstr ""
":mod:`datetime` 模块新增了一种类型 :class:`~datetime.timezone`，它通过返回固定的 UTC "
"偏移量和时区名称来实现 :class:`~datetime.tzinfo` 接口。这使得创建带有时区信息的 datetime 对象变得更加容易::"

#: ../../whatsnew/3.2.rst:995
msgid ""
">>> from datetime import datetime, timezone\n"
"\n"
">>> datetime.now(timezone.utc)\n"
"datetime.datetime(2010, 12, 8, 21, 4, 2, 923754, tzinfo=datetime.timezone.utc)\n"
"\n"
">>> datetime.strptime(\"01/01/2000 12:00 +0000\", \"%m/%d/%Y %H:%M %z\")\n"
"datetime.datetime(2000, 1, 1, 12, 0, tzinfo=datetime.timezone.utc)"
msgstr ""
">>> from datetime import datetime, timezone\n"
"\n"
">>> datetime.now(timezone.utc)\n"
"datetime.datetime(2010, 12, 8, 21, 4, 2, 923754, tzinfo=datetime.timezone.utc)\n"
"\n"
">>> datetime.strptime(\"01/01/2000 12:00 +0000\", \"%m/%d/%Y %H:%M %z\")\n"
"datetime.datetime(2000, 1, 1, 12, 0, tzinfo=datetime.timezone.utc)"

#: ../../whatsnew/3.2.rst:1003
msgid ""
"Also, :class:`~datetime.timedelta` objects can now be multiplied by "
":class:`float` and divided by :class:`float` and :class:`int` objects. And "
":class:`~datetime.timedelta` objects can now divide one another."
msgstr ""
"此外，:class:`~datetime.timedelta` 对象现在可以与 :class:`float` 相乘，并且可以被 "
":class:`float` 和 :class:`int` 对象除。同时，:class:`~datetime.timedelta` 对象现在可以相互除。"

#: ../../whatsnew/3.2.rst:1007
msgid ""
"The :meth:`datetime.date.strftime` method is no longer restricted to years "
"after 1900.  The new supported year range is from 1000 to 9999 inclusive."
msgstr ""
":meth:`datetime.date.strftime` 方法不再限制于 1900 年之后的年份。新的支持年份范围是从 1000 年到 9999 "
"年（含）。"

#: ../../whatsnew/3.2.rst:1010
msgid ""
"Whenever a two-digit year is used in a time tuple, the interpretation has "
"been governed by :data:`!time.accept2dyear`.  The default is ``True`` which "
"means that for a two-digit year, the century is guessed according to the "
"POSIX rules governing the ``%y`` strptime format."
msgstr ""
"每当在时间元组中使用两位数年份时，其解释由 :data:`!time.accept2dyear` 控制。默认值为 "
"``True``，这意味着对于两位数年份，世纪是根据 POSIX 规则（管理 ``%y`` strptime 格式）进行猜测的。"

#: ../../whatsnew/3.2.rst:1015
msgid ""
"Starting with Py3.2, use of the century guessing heuristic will emit a "
":exc:`DeprecationWarning`.  Instead, it is recommended that "
":data:`!time.accept2dyear` be set to ``False`` so that large date ranges can"
" be used without guesswork::"
msgstr ""
"从 Py3.2 开始，使用世纪猜测启发式方法将发出 :exc:`DeprecationWarning` 警告。建议将 "
":data:`!time.accept2dyear` 设置为 ``False``，以便在没有猜测的情况下使用大的日期范围::"

#: ../../whatsnew/3.2.rst:1020
msgid ""
">>> import time, warnings\n"
">>> warnings.resetwarnings()      # remove the default warning filters\n"
"\n"
">>> time.accept2dyear = True      # guess whether 11 means 11 or 2011\n"
">>> time.asctime((11, 1, 1, 12, 34, 56, 4, 1, 0))\n"
"Warning (from warnings module):\n"
"  ...\n"
"DeprecationWarning: Century info guessed for a 2-digit year.\n"
"'Fri Jan  1 12:34:56 2011'\n"
"\n"
">>> time.accept2dyear = False     # use the full range of allowable dates\n"
">>> time.asctime((11, 1, 1, 12, 34, 56, 4, 1, 0))\n"
"'Fri Jan  1 12:34:56 11'"
msgstr ""
">>> import time, warnings\n"
">>> warnings.resetwarnings()      # 移除默认的警告过滤器\n"
"\n"
">>> time.accept2dyear = True      # 猜测 11 是指 11 还是 2011\n"
">>> time.asctime((11, 1, 1, 12, 34, 56, 4, 1, 0))\n"
"Warning (from warnings module):\n"
"  ...\n"
"DeprecationWarning: Century info guessed for a 2-digit year.\n"
"'Fri Jan  1 12:34:56 2011'\n"
"\n"
">>> time.accept2dyear = False     # 使用允许的完整日期范围\n"
">>> time.asctime((11, 1, 1, 12, 34, 56, 4, 1, 0))\n"
"'Fri Jan  1 12:34:56 11'"

#: ../../whatsnew/3.2.rst:1034
msgid ""
"Several functions now have significantly expanded date ranges.  When "
":data:`!time.accept2dyear` is false, the :func:`time.asctime` function will "
"accept any year that fits in a C int, while the :func:`time.mktime` and "
":func:`time.strftime` functions will accept the full range supported by the "
"corresponding operating system functions."
msgstr ""
"多个函数的日期范围已显著扩展。当 :data:`!time.accept2dyear` 为假时，:func:`time.asctime` "
"函数将接受任何适合 C int 类型的年份，而 :func:`time.mktime` 和 :func:`time.strftime` "
"函数将接受相应操作系统函数支持的全部范围。"

#: ../../whatsnew/3.2.rst:1040
msgid ""
"(Contributed by Alexander Belopolsky and Victor Stinner in :issue:`1289118`,"
" :issue:`5094`, :issue:`6641`, :issue:`2706`, :issue:`1777412`, "
":issue:`8013`, and :issue:`10827`.)"
msgstr ""
"（由 Alexander Belopolsky 和 Victor Stinner 在 :issue:`1289118`、 :issue:`5094`、 "
":issue:`6641`、 :issue:`2706`、 :issue:`1777412`、 :issue:`8013` 和 "
":issue:`10827` 中贡献。）"

#: ../../whatsnew/3.2.rst:1047
msgid "math"
msgstr "math"

#: ../../whatsnew/3.2.rst:1049
msgid ""
"The :mod:`math` module has been updated with six new functions inspired by "
"the C99 standard."
msgstr ":mod:`math` 模块已更新，新增了六个借鉴自 C99 标准的函数。"

#: ../../whatsnew/3.2.rst:1052
msgid ""
"The :func:`~math.isfinite` function provides a reliable and fast way to "
"detect special values.  It returns ``True`` for regular numbers and "
"``False`` for *Nan* or *Infinity*:"
msgstr ""
":func:`~math.isfinite` 函数提供了一种可靠且快速的方法来检测特殊值。它对常规数字返回 ``True``，对 *Nan* 或 "
"*Infinity* 返回 ``False``："

#: ../../whatsnew/3.2.rst:1060
msgid ""
"The :func:`~math.expm1` function computes ``e**x-1`` for small values of *x*"
" without incurring the loss of precision that usually accompanies the "
"subtraction of nearly equal quantities:"
msgstr ""
":func:`~math.expm1` 函数用于计算 ``e**x - 1`` (其中 *x* "
"为较小数值)，且不会产生因相减两个近似相等数值而导致精度损失的问题。"

#: ../../whatsnew/3.2.rst:1068
msgid ""
"The :func:`~math.erf` function computes a probability integral or `Gaussian "
"error function <https://en.wikipedia.org/wiki/Error_function>`_.  The "
"complementary error function, :func:`~math.erfc`, is ``1 - erf(x)``:"
msgstr ""
":func:`~math.erf` 函数计算概率积分或 `高斯误差函数 "
"<https://en.wikipedia.org/wiki/Error_function>`_。其互补误差函数 :func:`~math.erfc` "
"的计算公式为 ``1 - erf(x)``："

#: ../../whatsnew/3.2.rst:1072
msgid ""
">>> from math import erf, erfc, sqrt\n"
">>> erf(1.0/sqrt(2.0))   # portion of normal distribution within 1 standard deviation\n"
"0.682689492137086\n"
">>> erfc(1.0/sqrt(2.0))  # portion of normal distribution outside 1 standard deviation\n"
"0.31731050786291404\n"
">>> erf(1.0/sqrt(2.0)) + erfc(1.0/sqrt(2.0))\n"
"1.0"
msgstr ""
">>> from math import erf, erfc, sqrt\n"
">>> erf(1.0/sqrt(2.0))   # 在 1 个标准差内的正态分布部分\n"
"0.682689492137086\n"
">>> erfc(1.0/sqrt(2.0))  # 在 1 个标准差外的正态分布部分\n"
"0.31731050786291404\n"
">>> erf(1.0/sqrt(2.0)) + erfc(1.0/sqrt(2.0))\n"
"1.0"

#: ../../whatsnew/3.2.rst:1083
msgid ""
"The :func:`~math.gamma` function is a continuous extension of the factorial "
"function.  See https://en.wikipedia.org/wiki/Gamma_function for details.  "
"Because the function is related to factorials, it grows large even for small"
" values of *x*, so there is also a :func:`~math.lgamma` function for "
"computing the natural logarithm of the gamma function:"
msgstr ""
":func:`~math.gamma` 函数是阶乘函数的连续扩展。详情请见 "
"https://en.wikipedia.org/wiki/Gamma_function。由于该函数与阶乘相关，即使对于小的 *x* "
"值，其值也会变得很大，因此还有一个 :func:`~math.lgamma` 函数用于计算伽马函数的自然对数："

#: ../../whatsnew/3.2.rst:1095
msgid "(Contributed by Mark Dickinson.)"
msgstr "（由 Mark Dickinson 贡献）"

#: ../../whatsnew/3.2.rst:1098
msgid "abc"
msgstr "abc(抽象基类)"

#: ../../whatsnew/3.2.rst:1100
msgid ""
"The :mod:`abc` module now supports :func:`~abc.abstractclassmethod` and "
":func:`~abc.abstractstaticmethod`."
msgstr ""
":mod:`abc` 模块现在支持 :func:`~abc.abstractclassmethod` 和 "
":func:`~abc.abstractstaticmethod`。"

#: ../../whatsnew/3.2.rst:1103
msgid ""
"These tools make it possible to define an :term:`abstract base class` that "
"requires a particular :func:`classmethod` or :func:`staticmethod` to be "
"implemented::"
msgstr ""
"这些工具使得可以定义一个要求实现特定 :func:`classmethod` 或 :func:`staticmethod` 的 "
":term:`abstract base class`::"

#: ../../whatsnew/3.2.rst:1107
msgid ""
"class Temperature(metaclass=abc.ABCMeta):\n"
"    @abc.abstractclassmethod\n"
"    def from_fahrenheit(cls, t):\n"
"        ...\n"
"    @abc.abstractclassmethod\n"
"    def from_celsius(cls, t):\n"
"        ..."
msgstr ""
"class Temperature(metaclass=abc.ABCMeta):\n"
"    @abc.abstractclassmethod\n"
"    def from_fahrenheit(cls, t):\n"
"        ...\n"
"    @abc.abstractclassmethod\n"
"    def from_celsius(cls, t):\n"
"        ..."

#: ../../whatsnew/3.2.rst:1115
msgid "(Patch submitted by Daniel Urban; :issue:`5867`.)"
msgstr "（补丁由 Daniel Urban 在 :issue:`5867` 中提交。）"

#: ../../whatsnew/3.2.rst:1118
msgid "io"
msgstr "io"

#: ../../whatsnew/3.2.rst:1120
msgid ""
"The :class:`io.BytesIO` has a new method, :meth:`~io.BytesIO.getbuffer`, "
"which provides functionality similar to :func:`memoryview`.  It creates an "
"editable view of the data without making a copy.  The buffer's random access"
" and support for slice notation are well-suited to in-place editing::"
msgstr ""
":class:`io.BytesIO` 类新增了一个方法 :meth:`~io.BytesIO.getbuffer`，其功能类似于 "
":func:`memoryview`。该方法会创建一个数据的可编辑视图，且不会生成数据的副本。该缓冲区支持随机访问和切片表示法，非常适合进行原地编辑操作::"

#: ../../whatsnew/3.2.rst:1125
msgid ""
">>> REC_LEN, LOC_START, LOC_LEN = 34, 7, 11\n"
"\n"
">>> def change_location(buffer, record_number, location):\n"
"...     start = record_number * REC_LEN + LOC_START\n"
"...     buffer[start: start+LOC_LEN] = location\n"
"\n"
">>> import io\n"
"\n"
">>> byte_stream = io.BytesIO(\n"
"...     b'G3805  storeroom  Main chassis    '\n"
"...     b'X7899  shipping   Reserve cog     '\n"
"...     b'L6988  receiving  Primary sprocket'\n"
"... )\n"
">>> buffer = byte_stream.getbuffer()\n"
">>> change_location(buffer, 1, b'warehouse  ')\n"
">>> change_location(buffer, 0, b'showroom   ')\n"
">>> print(byte_stream.getvalue())\n"
"b'G3805  showroom   Main chassis    '\n"
"b'X7899  warehouse  Reserve cog     '\n"
"b'L6988  receiving  Primary sprocket'"
msgstr ""
">>> REC_LEN, LOC_START, LOC_LEN = 34, 7, 11\n"
"\n"
">>> def change_location(buffer, record_number, location):\n"
"...     start = record_number * REC_LEN + LOC_START\n"
"...     buffer[start: start+LOC_LEN] = location\n"
"\n"
">>> import io\n"
"\n"
">>> byte_stream = io.BytesIO(\n"
"...     b'G3805  storeroom  Main chassis    '\n"
"...     b'X7899  shipping   Reserve cog     '\n"
"...     b'L6988  receiving  Primary sprocket'\n"
"... )\n"
">>> buffer = byte_stream.getbuffer()\n"
">>> change_location(buffer, 1, b'warehouse  ')\n"
">>> change_location(buffer, 0, b'showroom   ')\n"
">>> print(byte_stream.getvalue())\n"
"b'G3805  showroom   Main chassis    '\n"
"b'X7899  warehouse  Reserve cog     '\n"
"b'L6988  receiving  Primary sprocket'"

#: ../../whatsnew/3.2.rst:1146
msgid "(Contributed by Antoine Pitrou in :issue:`5506`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`5506` 中贡献。）"

#: ../../whatsnew/3.2.rst:1149
msgid "reprlib"
msgstr "reprlib"

#: ../../whatsnew/3.2.rst:1151
msgid ""
"When writing a :meth:`~object.__repr__` method for a custom container, it is"
" easy to forget to handle the case where a member refers back to the "
"container itself. Python's builtin objects such as :class:`list` and "
":class:`set` handle self-reference by displaying \"...\" in the recursive "
"part of the representation string."
msgstr ""
"在为自定义容器编写 :meth:`~object.__repr__` 方法时，很容易忘记处理成员引用容器自身的情况。Python的内置对象如 "
":class:`list` 和 :class:`set` 通过在表示字符串的递归部分显示 \"...\" 来处理自引用。"

#: ../../whatsnew/3.2.rst:1157
msgid ""
"To help write such :meth:`~object.__repr__` methods, the :mod:`reprlib` "
"module has a new decorator, :func:`~reprlib.recursive_repr`, for detecting "
"recursive calls to :meth:`!__repr__` and substituting a placeholder string "
"instead::"
msgstr ""
"为了帮助编写此类 :meth:`~object.__repr__` 方法，:mod:`reprlib` 模块新增了一个装饰器 "
":func:`~reprlib.recursive_repr`，用于检测对 :meth:`!__repr__` 的递归调用并替换为占位符字符串::"

#: ../../whatsnew/3.2.rst:1161
msgid ""
">>> class MyList(list):\n"
"...     @recursive_repr()\n"
"...     def __repr__(self):\n"
"...         return '<' + '|'.join(map(repr, self)) + '>'\n"
"...\n"
">>> m = MyList('abc')\n"
">>> m.append(m)\n"
">>> m.append('x')\n"
">>> print(m)\n"
"<'a'|'b'|'c'|...|'x'>"
msgstr ""
">>> class MyList(list):\n"
"...     @recursive_repr()\n"
"...     def __repr__(self):\n"
"...         return '<' + '|'.join(map(repr, self)) + '>'\n"
"...\n"
">>> m = MyList('abc')\n"
">>> m.append(m)\n"
">>> m.append('x')\n"
">>> print(m)\n"
"<'a'|'b'|'c'|...|'x'>"

#: ../../whatsnew/3.2.rst:1172
msgid "(Contributed by Raymond Hettinger in :issue:`9826` and :issue:`9840`.)"
msgstr "（由 Raymond Hettinger 在 :issue:`9826` 和 :issue:`9840` 中贡献。）"

#: ../../whatsnew/3.2.rst:1175
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.2.rst:1177
msgid ""
"In addition to dictionary-based configuration described above, the "
":mod:`logging` package has many other improvements."
msgstr "除了上述基于字典的配置外，:mod:`logging` 包还有许多其他改进。"

#: ../../whatsnew/3.2.rst:1180
msgid ""
"The logging documentation has been augmented by a :ref:`basic tutorial "
"<logging-basic-tutorial>`\\, an :ref:`advanced tutorial <logging-advanced-"
"tutorial>`\\, and a :ref:`cookbook <logging-cookbook>` of logging recipes.  "
"These documents are the fastest way to learn about logging."
msgstr ""
"日志模块的文档已新增一份 :ref:`基础教程 <logging-basic-tutorial>`、一份 :ref:`高级教程 <logging-"
"advanced-tutorial>` 以及一份包含日志实践案例的 :ref:`指南 <logging-"
"cookbook>`。这些文档是学习日志功能的最佳途径。"

#: ../../whatsnew/3.2.rst:1185
msgid ""
"The :func:`logging.basicConfig` set-up function gained a *style* argument to"
" support three different types of string formatting.  It defaults to \"%\" "
"for traditional %-formatting, can be set to \"{\" for the new "
":meth:`str.format` style, or can be set to \"$\" for the shell-style "
"formatting provided by :class:`string.Template`.  The following three "
"configurations are equivalent::"
msgstr ""
":func:`logging.basicConfig` 配置函数新增了一个 *style* 参数，用于支持三种不同的字符串格式化方式。该参数默认值为 "
"\"%\"，表示传统的 %-格式化；可设置为 \"{\"，采用新的 :meth:`str.format` 格式化风格；也可设置为 \"$\"，使用 "
":class:`string.Template` 提供的类 shell 风格格式化。以下三种配置方式是等效的::"

#: ../../whatsnew/3.2.rst:1191
msgid ""
">>> from logging import basicConfig\n"
">>> basicConfig(style='%', format=\"%(name)s -> %(levelname)s: %(message)s\")\n"
">>> basicConfig(style='{', format=\"{name} -> {levelname} {message}\")\n"
">>> basicConfig(style='$', format=\"$name -> $levelname: $message\")"
msgstr ""
">>> from logging import basicConfig\n"
">>> basicConfig(style='%', format=\"%(name)s -> %(levelname)s: %(message)s\")\n"
">>> basicConfig(style='{', format=\"{name} -> {levelname} {message}\")\n"
">>> basicConfig(style='$', format=\"$name -> $levelname: $message\")"

#: ../../whatsnew/3.2.rst:1196
msgid ""
"If no configuration is set-up before a logging event occurs, there is now a "
"default configuration using a :class:`~logging.StreamHandler` directed to "
":data:`sys.stderr` for events of ``WARNING`` level or higher.  Formerly, an "
"event occurring before a configuration was set-up would either raise an "
"exception or silently drop the event depending on the value of "
":data:`logging.raiseExceptions`.  The new default handler is stored in "
":data:`logging.lastResort`."
msgstr ""
"如果在日志事件发生之前没有进行配置，现在将使用默认配置，该配置使用 :class:`~logging.StreamHandler` 将 "
"``WARNING`` 级别或更高的事件定向到 :data:`sys.stderr`。以前，在配置设置之前发生的事件要么抛出异常，要么根据 "
":data:`logging.raiseExceptions` 的值静默丢弃事件。新的默认处理程序存储在 "
":data:`logging.lastResort` 中。"

#: ../../whatsnew/3.2.rst:1204
msgid ""
"The use of filters has been simplified.  Instead of creating a "
":class:`~logging.Filter` object, the predicate can be any Python callable "
"that returns ``True`` or ``False``."
msgstr ""
"过滤器的使用已经简化。现在不再需要创建 :class:`~logging.Filter` 对象，谓词可以是任何返回 ``True`` 或 "
"``False`` 的 Python 可调用对象。"

#: ../../whatsnew/3.2.rst:1208
msgid ""
"There were a number of other improvements that add flexibility and simplify "
"configuration.  See the module documentation for a full listing of changes "
"in Python 3.2."
msgstr "还有许多其他改进，增加了灵活性并简化了配置。请参阅模块文档，了解 Python 3.2 中所有更改的完整列表。"

#: ../../whatsnew/3.2.rst:1213
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.2.rst:1215
msgid ""
"The :mod:`csv` module now supports a new dialect, "
":class:`~csv.unix_dialect`, which applies quoting for all fields and a "
"traditional Unix style with ``'\\n'`` as the line terminator.  The "
"registered dialect name is ``unix``."
msgstr ""
":mod:`csv` 模块现在支持一个新的方言，:class:`~csv.unix_dialect`，它对所有字段应用引号，并使用传统的 Unix "
"风格，以 ``'\\n'`` 作为行终止符。注册的方言名称为 ``unix``。"

#: ../../whatsnew/3.2.rst:1219
msgid ""
"The :class:`csv.DictWriter` has a new method, "
":meth:`~csv.DictWriter.writeheader` for writing-out an initial row to "
"document the field names::"
msgstr ""
":class:`csv.DictWriter` 有一个新的 :meth:`~csv.DictWriter.writeheader` "
"方法，用于写入初始行以记录字段名称::"

#: ../../whatsnew/3.2.rst:1223
msgid ""
">>> import csv, sys\n"
">>> w = csv.DictWriter(sys.stdout, ['name', 'dept'], dialect='unix')\n"
">>> w.writeheader()\n"
"\"name\",\"dept\"\n"
">>> w.writerows([\n"
"...     {'name': 'tom', 'dept': 'accounting'},\n"
"...     {'name': 'susan', 'dept': 'Salesl'}])\n"
"\"tom\",\"accounting\"\n"
"\"susan\",\"sales\""
msgstr ""
">>> import csv, sys\n"
">>> w = csv.DictWriter(sys.stdout, ['name', 'dept'], dialect='unix')\n"
">>> w.writeheader()\n"
"\"name\",\"dept\"\n"
">>> w.writerows([\n"
"...     {'name': 'tom', 'dept': 'accounting'},\n"
"...     {'name': 'susan', 'dept': 'Salesl'}])\n"
"\"tom\",\"accounting\"\n"
"\"susan\",\"sales\""

#: ../../whatsnew/3.2.rst:1233
msgid ""
"(New dialect suggested by Jay Talbot in :issue:`5975`, and the new method "
"suggested by Ed Abraham in :issue:`1537721`.)"
msgstr ""
"（新方言由 Jay Talbot 在 :issue:`5975` 中建议，新方法由 Ed Abraham 在 :issue:`1537721` "
"中建议。）"

#: ../../whatsnew/3.2.rst:1237
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.2.rst:1239
msgid ""
"There is a new and slightly mind-blowing tool "
":class:`~contextlib.ContextDecorator` that is helpful for creating a "
":term:`context manager` that does double duty as a function decorator."
msgstr ""
"有一个新的且略显震撼的工具 :class:`~contextlib.ContextDecorator`，它有助于创建一个既可以作为函数装饰器又可以作为 "
":term:`context manager` 的双重用途的上下文管理器。"

#: ../../whatsnew/3.2.rst:1243
msgid ""
"As a convenience, this new functionality is used by "
":func:`~contextlib.contextmanager` so that no extra effort is needed to "
"support both roles."
msgstr ""
"为了方便起见，这一新功能被 :func:`~contextlib.contextmanager` 使用，因此无需额外努力即可支持这两种角色。"

#: ../../whatsnew/3.2.rst:1247
msgid ""
"The basic idea is that both context managers and function decorators can be "
"used for pre-action and post-action wrappers.  Context managers wrap a group"
" of statements using a :keyword:`with` statement, and function decorators "
"wrap a group of statements enclosed in a function.  So, occasionally there "
"is a need to write a pre-action or post-action wrapper that can be used in "
"either role."
msgstr ""
"基本思想是，上下文管理器和函数装饰器都可以用于前置动作和后置动作的包装器。上下文管理器使用 :keyword:`with` "
"语句包装一组语句，而函数装饰器包装一个函数内的一组语句。因此，有时需要编写一个可以在任一角色中使用的前置动作或后置动作包装器。"

#: ../../whatsnew/3.2.rst:1253
msgid ""
"For example, it is sometimes useful to wrap functions or groups of "
"statements with a logger that can track the time of entry and time of exit."
"  Rather than writing both a function decorator and a context manager for "
"the task, the :func:`~contextlib.contextmanager` provides both capabilities "
"in a single definition::"
msgstr ""
"例如，有时需要用一个日志记录器包装函数或一组语句，以跟踪进入和退出时间。与其为该任务编写一个函数装饰器和一个上下文管理器，不如使用 "
":func:`~contextlib.contextmanager` 在单一定义中提供这两种能力::"

#: ../../whatsnew/3.2.rst:1259
msgid ""
"from contextlib import contextmanager\n"
"import logging\n"
"\n"
"logging.basicConfig(level=logging.INFO)\n"
"\n"
"@contextmanager\n"
"def track_entry_and_exit(name):\n"
"    logging.info('Entering: %s', name)\n"
"    yield\n"
"    logging.info('Exiting: %s', name)"
msgstr ""
"from contextlib import contextmanager\n"
"import logging\n"
"\n"
"logging.basicConfig(level=logging.INFO)\n"
"\n"
"@contextmanager\n"
"def track_entry_and_exit(name):\n"
"    logging.info('Entering: %s', name)\n"
"    yield\n"
"    logging.info('Exiting: %s', name)"

#: ../../whatsnew/3.2.rst:1270
msgid "Formerly, this would have only been usable as a context manager::"
msgstr "以前，这只能用作上下文管理器::"

#: ../../whatsnew/3.2.rst:1272
msgid ""
"with track_entry_and_exit('widget loader'):\n"
"    print('Some time consuming activity goes here')\n"
"    load_widget()"
msgstr ""
"with track_entry_and_exit('widget loader'):\n"
"    print('Some time consuming activity goes here')\n"
"    load_widget()"

#: ../../whatsnew/3.2.rst:1276
msgid "Now, it can be used as a decorator as well::"
msgstr "现在，它也可以用作装饰器::"

#: ../../whatsnew/3.2.rst:1278
msgid ""
"@track_entry_and_exit('widget loader')\n"
"def activity():\n"
"    print('Some time consuming activity goes here')\n"
"    load_widget()"
msgstr ""
"@track_entry_and_exit('widget loader')\n"
"def activity():\n"
"    print('Some time consuming activity goes here')\n"
"    load_widget()"

#: ../../whatsnew/3.2.rst:1283
msgid ""
"Trying to fulfill two roles at once places some limitations on the "
"technique. Context managers normally have the flexibility to return an "
"argument usable by a :keyword:`with` statement, but there is no parallel for"
" function decorators."
msgstr ""
"试图同时满足两种角色对技术有一些限制。上下文管理器通常具有返回一个可被 :keyword:`with` "
"语句使用的参数的灵活性，但函数装饰器没有类似的特性。"

#: ../../whatsnew/3.2.rst:1287
msgid ""
"In the above example, there is not a clean way for the "
"*track_entry_and_exit* context manager to return a logging instance for use "
"in the body of enclosed statements."
msgstr "在上面的示例中，*track_entry_and_exit* 上下文管理器没有一种简洁的方式来返回一个日志实例，以供封闭语句体中使用。"

#: ../../whatsnew/3.2.rst:1291
msgid "(Contributed by Michael Foord in :issue:`9110`.)"
msgstr "（由 Michael Foord 在 :issue:`9110` 中贡献。）"

#: ../../whatsnew/3.2.rst:1294
msgid "decimal and fractions"
msgstr "decimal 和 fractions"

#: ../../whatsnew/3.2.rst:1296
msgid ""
"Mark Dickinson crafted an elegant and efficient scheme for assuring that "
"different numeric datatypes will have the same hash value whenever their "
"actual values are equal (:issue:`8188`)::"
msgstr ""
"Mark Dickinson 设计了一个优雅且高效的方案，确保不同数值数据类型在实际值相等时具有相同的哈希值（:issue:`8188`）::"

#: ../../whatsnew/3.2.rst:1300
msgid ""
"assert hash(Fraction(3, 2)) == hash(1.5) == \\\n"
"       hash(Decimal(\"1.5\")) == hash(complex(1.5, 0))"
msgstr ""
"assert hash(Fraction(3, 2)) == hash(1.5) == \\\n"
"       hash(Decimal(\"1.5\")) == hash(complex(1.5, 0))"

#: ../../whatsnew/3.2.rst:1303
msgid ""
"Some of the hashing details are exposed through a new attribute, "
":data:`sys.hash_info`, which describes the bit width of the hash value, the "
"prime modulus, the hash values for *infinity* and *nan*, and the multiplier "
"used for the imaginary part of a number:"
msgstr ""
"一些哈希细节通过新的属性 :data:`sys.hash_info` 公开，该属性描述了哈希值的位宽、素数模数、*infinity* 和 *nan* "
"的哈希值，以及用于数字虚部的乘数："

#: ../../whatsnew/3.2.rst:1311
msgid ""
"An early decision to limit the interoperability of various numeric types has"
" been relaxed.  It is still unsupported (and ill-advised) to have implicit "
"mixing in arithmetic expressions such as ``Decimal('1.1') + float('1.1')`` "
"because the latter loses information in the process of constructing the "
"binary float.  However, since existing floating-point value can be converted"
" losslessly to either a decimal or rational representation, it makes sense "
"to add them to the constructor and to support mixed-type comparisons."
msgstr ""
"早期限制各种数值类型互操作性的决定已经放宽。仍然不支持（也不建议）在算术表达式中隐式混合使用，例如 ``Decimal('1.1') + "
"float('1.1')``，因为后者在构建二进制浮点数的过程中会丢失信息。然而，由于现有的浮点值可以无损地转换为十进制或分数表示，因此将其添加到构造函数并支持混合类型比较是有意义的。"

#: ../../whatsnew/3.2.rst:1319
msgid ""
"The :class:`decimal.Decimal` constructor now accepts :class:`float` objects "
"directly so there in no longer a need to use the "
":meth:`~decimal.Decimal.from_float` method (:issue:`8257`)."
msgstr ""
":class:`decimal.Decimal` 构造函数现在直接接受 :class:`float` 对象，因此不再需要使用 "
":meth:`~decimal.Decimal.from_float` 方法（:issue:`8257`）。"

#: ../../whatsnew/3.2.rst:1323
msgid ""
"Mixed type comparisons are now fully supported so that "
":class:`~decimal.Decimal` objects can be directly compared with "
":class:`float` and :class:`fractions.Fraction` (:issue:`2531` and "
":issue:`8188`)."
msgstr ""
"现在完全支持混合类型比较，以便 :class:`~decimal.Decimal` 对象可以直接与 :class:`float` 和 "
":class:`fractions.Fraction` 进行比较（:issue:`2531` 和 :issue:`8188`）。"

#: ../../whatsnew/3.2.rst:1327
msgid ""
"Similar changes were made to :class:`fractions.Fraction` so that the "
":meth:`~fractions.Fraction.from_float` and "
":meth:`~fractions.Fraction.from_decimal` methods are no longer needed "
"(:issue:`8294`):"
msgstr ""
"对 :class:`fractions.Fraction` 也进行了类似的更改，因此不再需要 "
":meth:`~fractions.Fraction.from_float` 和 "
":meth:`~fractions.Fraction.from_decimal` 方法（:issue:`8294`）："

#: ../../whatsnew/3.2.rst:1338
msgid ""
"Another useful change for the :mod:`decimal` module is that the "
":attr:`Context.clamp <decimal.Context.clamp>` attribute is now public.  This"
" is useful in creating contexts that correspond to the decimal interchange "
"formats specified in IEEE 754 (see :issue:`8540`)."
msgstr ""
":mod:`decimal` 模块的一个有用改动是，:attr:`Context.clamp <decimal.Context.clamp>` "
"属性现在变为公开。这在创建与 IEEE 754 指定的十进制交换格式相对应的上下文时非常有用（参见 :issue:`8540`）。"

#: ../../whatsnew/3.2.rst:1343
msgid "(Contributed by Mark Dickinson and Raymond Hettinger.)"
msgstr "（由 Mark Dickinson 和 Raymond Hettinger贡献。）"

#: ../../whatsnew/3.2.rst:1346
msgid "ftp"
msgstr "ftp"

#: ../../whatsnew/3.2.rst:1348
msgid ""
"The :class:`ftplib.FTP` class now supports the context management protocol "
"to unconditionally consume :exc:`socket.error` exceptions and to close the "
"FTP connection when done::"
msgstr ""
":class:`ftplib.FTP` 类现在支持上下文管理协议，可以无条件地捕获 :exc:`socket.error` 异常，并在完成操作时关闭 "
"FTP 连接："

#: ../../whatsnew/3.2.rst:1352
msgid ""
">>> from ftplib import FTP\n"
">>> with FTP(\"ftp1.at.proftpd.org\") as ftp:\n"
"        ftp.login()\n"
"        ftp.dir()\n"
"\n"
"'230 Anonymous login ok, restrictions apply.'\n"
"dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 .\n"
"dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 ..\n"
"dr-xr-xr-x   5 ftp      ftp          4096 May  6 10:43 CentOS\n"
"dr-xr-xr-x   3 ftp      ftp            18 Jul 10  2008 Fedora"
msgstr ""
">>> from ftplib import FTP\n"
">>> with FTP(\"ftp1.at.proftpd.org\") as ftp:\n"
"        ftp.login()\n"
"        ftp.dir()\n"
"\n"
"'230 Anonymous login ok, restrictions apply.'\n"
"dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 .\n"
"dr-xr-xr-x   9 ftp      ftp           154 May  6 10:43 ..\n"
"dr-xr-xr-x   5 ftp      ftp          4096 May  6 10:43 CentOS\n"
"dr-xr-xr-x   3 ftp      ftp            18 Jul 10  2008 Fedora"

#: ../../whatsnew/3.2.rst:1363
msgid ""
"Other file-like objects such as :class:`mmap.mmap` and "
":func:`fileinput.input` also grew auto-closing context managers::"
msgstr ""
"其他文件型对象如 :class:`mmap.mmap` 和 :func:`fileinput.input` 也有了支持自动关闭的上下文管理器::"

#: ../../whatsnew/3.2.rst:1366
msgid ""
"with fileinput.input(files=('log1.txt', 'log2.txt')) as f:\n"
"    for line in f:\n"
"        process(line)"
msgstr ""
"with fileinput.input(files=('log1.txt', 'log2.txt')) as f:\n"
"    for line in f:\n"
"        process(line)"

#: ../../whatsnew/3.2.rst:1370
msgid ""
"(Contributed by Tarek Ziadé and Giampaolo Rodolà in :issue:`4972`, and by "
"Georg Brandl in :issue:`8046` and :issue:`1286`.)"
msgstr ""
"（由 Tarek Ziadé 和 Giampaolo Rodolà 在 :issue:`4972` 贡献，由 Georg Brandl 在 "
":issue:`8046` 和 :issue:`1286` 贡献。）"

#: ../../whatsnew/3.2.rst:1373
msgid ""
"The :class:`~ftplib.FTP_TLS` class now accepts a *context* parameter, which "
"is a :class:`ssl.SSLContext` object allowing bundling SSL configuration "
"options, certificates and private keys into a single (potentially long-"
"lived) structure."
msgstr ""
":class:`~ftplib.FTP_TLS` 类现在接受一个 *context* 参数，这是一个 :class:`ssl.SSLContext` "
"对象，允许将 SSL 配置选项、证书和私钥捆绑到一个单一的（可能是长寿命的）结构体中。"

#: ../../whatsnew/3.2.rst:1377
msgid "(Contributed by Giampaolo Rodolà; :issue:`8806`.)"
msgstr "（由 Giampaolo Rodolà 在 :issue:`8806` 中贡献。）"

#: ../../whatsnew/3.2.rst:1380
msgid "popen"
msgstr "popen"

#: ../../whatsnew/3.2.rst:1382
msgid ""
"The :func:`os.popen` and :func:`subprocess.Popen` functions now support "
":keyword:`with` statements for auto-closing of the file descriptors."
msgstr ""
":func:`os.popen` 和 :func:`subprocess.Popen` 函数现在支持使用 :keyword:`with` "
"语句来自动关闭文件描述符。"

#: ../../whatsnew/3.2.rst:1385
msgid ""
"(Contributed by Antoine Pitrou and Brian Curtin in :issue:`7461` and "
":issue:`10554`.)"
msgstr ""
"（由 Antoine Pitrou 和 Brian Curtin 在 :issue:`7461` 和 :issue:`10554` 中贡献。）"

#: ../../whatsnew/3.2.rst:1389
msgid "select"
msgstr "select"

#: ../../whatsnew/3.2.rst:1391
msgid ""
"The :mod:`select` module now exposes a new, constant attribute, "
":const:`~select.PIPE_BUF`, which gives the minimum number of bytes which are"
" guaranteed not to block when :func:`select.select` says a pipe is ready for"
" writing."
msgstr ""
":mod:`select` 模块现在暴露了一个新的常量属性，:const:`~select.PIPE_BUF`，它给出了在 "
":func:`select.select` 表示管道准备好写入时，保证不会阻塞的最小字节数。"

#: ../../whatsnew/3.2.rst:1400
msgid "(Available on Unix systems. Patch by Sébastien Sablé in :issue:`9862`)"
msgstr "（在 Unix 系统上可用。 由 Sébastien Sablé 在 :issue:`9862` 中提供补丁）"

#: ../../whatsnew/3.2.rst:1403
msgid "gzip and zipfile"
msgstr "gzip 和 zipfile"

#: ../../whatsnew/3.2.rst:1405
msgid ""
":class:`gzip.GzipFile` now implements the :class:`io.BufferedIOBase` "
":term:`abstract base class` (except for ``truncate()``).  It also has a "
":meth:`~gzip.GzipFile.peek` method and supports unseekable as well as zero-"
"padded file objects."
msgstr ""
":class:`gzip.GzipFile` 现在实现了 :class:`io.BufferedIOBase` :term:`abstract base"
" class` (除了 ``truncate()``)。 它还有一个 :meth:`~gzip.GzipFile.peek` 方法，并支持不可 seek"
" 的以及零填充的文件对象。"

#: ../../whatsnew/3.2.rst:1410
msgid ""
"The :mod:`gzip` module also gains the :func:`~gzip.compress` and "
":func:`~gzip.decompress` functions for easier in-memory compression and "
"decompression.  Keep in mind that text needs to be encoded as :class:`bytes`"
" before compressing and decompressing:"
msgstr ""
":mod:`gzip` 模块还增加了 :func:`~gzip.compress` 和 :func:`~gzip.decompress` "
"函数，以便更容易地进行内存中的压缩和解压缩。请记住，文本在压缩和解压缩之前需要编码为 :class:`bytes`："

#: ../../whatsnew/3.2.rst:1427
msgid ""
"(Contributed by Anand B. Pillai in :issue:`3488`; and by Antoine Pitrou, Nir"
" Aides and Brian Curtin in :issue:`9962`, :issue:`1675951`, :issue:`7471` "
"and :issue:`2846`.)"
msgstr ""
"（由 Anand B. Pillai 在 :issue:`3488` 中贡献，由 Antoine Pitrou、 Nir Aides 和 Brian "
"Curtin 在 :issue:`9962`、 :issue:`1675951` 、 :issue:`7471` 和 :issue:`2846` "
"中贡献。）"

#: ../../whatsnew/3.2.rst:1431
msgid ""
"Also, the :class:`zipfile.ZipExtFile <zipfile.ZipFile.open>` class was "
"reworked internally to represent files stored inside an archive.  The new "
"implementation is significantly faster and can be wrapped in an "
":class:`io.BufferedReader` object for more speedups.  It also solves an "
"issue where interleaved calls to *read* and *readline* gave the wrong "
"results."
msgstr ""
"此外，:class:`zipfile.ZipExtFile <zipfile.ZipFile.open>` "
"类在内部进行了重新设计，以表示存储在存档中的文件。新的实现显著更快，并且可以包装在 :class:`io.BufferedReader` "
"对象中以进一步提升速度。它还解决了交替调用 *read* 和 *readline* 导致结果错误的问题。"

#: ../../whatsnew/3.2.rst:1437
msgid "(Patch submitted by Nir Aides in :issue:`7610`.)"
msgstr "（补丁由 Nir Aides 在 :issue:`7610` 中提交。）"

#: ../../whatsnew/3.2.rst:1440
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.2.rst:1442
msgid ""
"The :class:`~tarfile.TarFile` class can now be used as a context manager.  "
"In addition, its :meth:`~tarfile.TarFile.add` method has a new option, "
"*filter*, that controls which files are added to the archive and allows the "
"file metadata to be edited."
msgstr ""
":class:`~tarfile.TarFile` 类现在可以用作上下文管理器。此外，其 :meth:`~tarfile.TarFile.add` "
"方法有一个新的选项 *filter*，它控制哪些文件被添加到存档中，并允许编辑文件元数据。"

#: ../../whatsnew/3.2.rst:1447
msgid ""
"The new *filter* option replaces the older, less flexible *exclude* "
"parameter which is now deprecated.  If specified, the optional *filter* "
"parameter needs to be a :term:`keyword argument`.  The user-supplied filter "
"function accepts a :class:`~tarfile.TarInfo` object and returns an updated "
":class:`~tarfile.TarInfo` object, or if it wants the file to be excluded, "
"the function can return ``None``::"
msgstr ""
"新的 *filter* 选项取代了旧的、灵活性较差的 *exclude* 参数，后者现已弃用。 如果指定，可选的 *filter* 参数需要是一个 "
":term:`keyword argument`。 用户提供的过滤函数接受一个 :class:`~tarfile.TarInfo` "
"对象，并返回一个更新的 :class:`~tarfile.TarInfo` 对象，如果希望排除该文件，函数可以返回 ``None``::"

#: ../../whatsnew/3.2.rst:1454
msgid ""
">>> import tarfile, glob\n"
"\n"
">>> def myfilter(tarinfo):\n"
"...     if tarinfo.isfile():             # only save real files\n"
"...         tarinfo.uname = 'monty'      # redact the user name\n"
"...         return tarinfo\n"
"\n"
">>> with tarfile.open(name='myarchive.tar.gz', mode='w:gz') as tf:\n"
"...     for filename in glob.glob('*.txt'):\n"
"...         tf.add(filename, filter=myfilter)\n"
"...     tf.list()\n"
"-rw-r--r-- monty/501        902 2011-01-26 17:59:11 annotations.txt\n"
"-rw-r--r-- monty/501        123 2011-01-26 17:59:11 general_questions.txt\n"
"-rw-r--r-- monty/501       3514 2011-01-26 17:59:11 prion.txt\n"
"-rw-r--r-- monty/501        124 2011-01-26 17:59:11 py_todo.txt\n"
"-rw-r--r-- monty/501       1399 2011-01-26 17:59:11 semaphore_notes.txt"
msgstr ""
">>> import tarfile, glob\n"
"\n"
">>> def myfilter(tarinfo):\n"
"...     if tarinfo.isfile():             # 仅保存真实文件\n"
"...         tarinfo.uname = 'monty'      # 涂改用户名\n"
"...         return tarinfo\n"
"\n"
">>> with tarfile.open(name='myarchive.tar.gz', mode='w:gz') as tf:\n"
"...     for filename in glob.glob('*.txt'):\n"
"...         tf.add(filename, filter=myfilter)\n"
"...     tf.list()\n"
"-rw-r--r-- monty/501        902 2011-01-26 17:59:11 annotations.txt\n"
"-rw-r--r-- monty/501        123 2011-01-26 17:59:11 general_questions.txt\n"
"-rw-r--r-- monty/501       3514 2011-01-26 17:59:11 prion.txt\n"
"-rw-r--r-- monty/501        124 2011-01-26 17:59:11 py_todo.txt\n"
"-rw-r--r-- monty/501       1399 2011-01-26 17:59:11 semaphore_notes.txt"

#: ../../whatsnew/3.2.rst:1471
msgid ""
"(Proposed by Tarek Ziadé and implemented by Lars Gustäbel in :issue:`6856`.)"
msgstr "（由 Tarek Ziadé 提议并由 Lars Gustäbel 在 :issue:`6856` 中实现。）"

#: ../../whatsnew/3.2.rst:1474
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.2.rst:1476
msgid ""
"The :mod:`hashlib` module has two new constant attributes listing the "
"hashing algorithms guaranteed to be present in all implementations and those"
" available on the current implementation::"
msgstr ":mod:`hashlib` 模块有两个新的常量属性，列出了在所有实现中保证存在的哈希算法和当前实现中可用的算法::"

#: ../../whatsnew/3.2.rst:1480
msgid ""
">>> import hashlib\n"
"\n"
">>> hashlib.algorithms_guaranteed\n"
"{'sha1', 'sha224', 'sha384', 'sha256', 'sha512', 'md5'}\n"
"\n"
">>> hashlib.algorithms_available\n"
"{'md2', 'SHA256', 'SHA512', 'dsaWithSHA', 'mdc2', 'SHA224', 'MD4', 'sha256',\n"
"'sha512', 'ripemd160', 'SHA1', 'MDC2', 'SHA', 'SHA384', 'MD2',\n"
"'ecdsa-with-SHA1','md4', 'md5', 'sha1', 'DSA-SHA', 'sha224',\n"
"'dsaEncryption', 'DSA', 'RIPEMD160', 'sha', 'MD5', 'sha384'}"
msgstr ""
">>> import hashlib\n"
"\n"
">>> hashlib.algorithms_guaranteed\n"
"{'sha1', 'sha224', 'sha384', 'sha256', 'sha512', 'md5'}\n"
"\n"
">>> hashlib.algorithms_available\n"
"{'md2', 'SHA256', 'SHA512', 'dsaWithSHA', 'mdc2', 'SHA224', 'MD4', 'sha256',\n"
"'sha512', 'ripemd160', 'SHA1', 'MDC2', 'SHA', 'SHA384', 'MD2',\n"
"'ecdsa-with-SHA1','md4', 'md5', 'sha1', 'DSA-SHA', 'sha224',\n"
"'dsaEncryption', 'DSA', 'RIPEMD160', 'sha', 'MD5', 'sha384'}"

#: ../../whatsnew/3.2.rst:1491
msgid "(Suggested by Carl Chenet in :issue:`7418`.)"
msgstr "（由 Carl Chenet 在 :issue:`7418` 中建议。）"

#: ../../whatsnew/3.2.rst:1494
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.2.rst:1496
msgid ""
"The :mod:`ast` module has a wonderful a general-purpose tool for safely "
"evaluating expression strings using the Python literal syntax.  The "
":func:`ast.literal_eval` function serves as a secure alternative to the "
"builtin :func:`eval` function which is easily abused.  Python 3.2 adds "
":class:`bytes` and :class:`set` literals to the list of supported types: "
"strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and ``None``."
msgstr ""
":mod:`ast` 模块提供了一个用于安全评估表达式字符串的通用工具，使用 Python 字面量语法。:func:`ast.literal_eval`"
" 函数作为内置 :func:`eval` 函数的安全替代，后者容易被滥用。Python 3.2 将 :class:`bytes` 和 "
":class:`set` 字面量添加到支持的类型列表中：字符串、字节、数字、元组、列表、字典、集合、布尔值和 ``None``。"

#: ../../whatsnew/3.2.rst:1505
msgid ""
">>> from ast import literal_eval\n"
"\n"
">>> request = \"{'req': 3, 'func': 'pow', 'args': (2, 0.5)}\"\n"
">>> literal_eval(request)\n"
"{'args': (2, 0.5), 'req': 3, 'func': 'pow'}\n"
"\n"
">>> request = \"os.system('do something harmful')\"\n"
">>> literal_eval(request)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ValueError: malformed node or string: <_ast.Call object at 0x101739a10>"
msgstr ""
">>> from ast import literal_eval\n"
"\n"
">>> request = \"{'req': 3, 'func': 'pow', 'args': (2, 0.5)}\"\n"
">>> literal_eval(request)\n"
"{'args': (2, 0.5), 'req': 3, 'func': 'pow'}\n"
"\n"
">>> request = \"os.system('do something harmful')\"\n"
">>> literal_eval(request)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ValueError: malformed node or string: <_ast.Call object at 0x101739a10>"

#: ../../whatsnew/3.2.rst:1517
msgid "(Implemented by Benjamin Peterson and Georg Brandl.)"
msgstr "（由Benjamin Peterson 和 Georg Brandl 实现。）"

#: ../../whatsnew/3.2.rst:1520
msgid "os"
msgstr "os"

#: ../../whatsnew/3.2.rst:1522
msgid ""
"Different operating systems use various encodings for filenames and "
"environment variables.  The :mod:`os` module provides two new functions, "
":func:`~os.fsencode` and :func:`~os.fsdecode`, for encoding and decoding "
"filenames:"
msgstr ""
"不同的操作系统对文件名和环境变量使用各种编码。:mod:`os` 模块提供了两个新函数，:func:`~os.fsencode` 和 "
":func:`~os.fsdecode`，用于编码和解码文件名："

#: ../../whatsnew/3.2.rst:1532
msgid ""
"Some operating systems allow direct access to encoded bytes in the "
"environment.  If so, the :const:`os.supports_bytes_environ` constant will be"
" true."
msgstr "某些操作系统允许直接访问环境中的编码字节。如果是这样，:const:`os.supports_bytes_environ` 常量将为真。"

#: ../../whatsnew/3.2.rst:1536
msgid ""
"For direct access to encoded environment variables (if available), use the "
"new :func:`os.getenvb` function or use :data:`os.environb` which is a bytes "
"version of :data:`os.environ`."
msgstr ""
"为了直接访问编码的环境变量（如果可用），使用新的 :func:`os.getenvb` 函数，或者使用 :data:`os.environb`，它是 "
":data:`os.environ` 的字节版本。"

#: ../../whatsnew/3.2.rst:1540
msgid "(Contributed by Victor Stinner.)"
msgstr "（由 Victor Stinner 贡献。）"

#: ../../whatsnew/3.2.rst:1543
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.2.rst:1545
msgid "The :func:`shutil.copytree` function has two new options:"
msgstr ":func:`shutil.copytree` 函数增加了两个新选项:"

#: ../../whatsnew/3.2.rst:1547
msgid ""
"*ignore_dangling_symlinks*: when ``symlinks=False`` so that the function "
"copies a file pointed to by a symlink, not the symlink itself. This option "
"will silence the error raised if the file doesn't exist."
msgstr ""
"*ignore_dangling_symlinks*：当 ``symlinks=False`` "
"时，函数会复制由符号链接指向的文件，而不是符号链接本身。此选项将静默处理文件不存在时引发的错误。"

#: ../../whatsnew/3.2.rst:1551
msgid ""
"*copy_function*: is a callable that will be used to copy files. "
":func:`shutil.copy2` is used by default."
msgstr "*copy_function*：是一个用于复制文件的可调用对象。默认使用 :func:`shutil.copy2`。"

#: ../../whatsnew/3.2.rst:1554 ../../whatsnew/3.2.rst:1592
msgid "(Contributed by Tarek Ziadé.)"
msgstr "（由 Tarek Ziadé 贡献。）"

#: ../../whatsnew/3.2.rst:1556
msgid ""
"In addition, the :mod:`shutil` module now supports :ref:`archiving "
"operations <archiving-operations>` for zipfiles, uncompressed tarfiles, "
"gzipped tarfiles, and bzipped tarfiles.  And there are functions for "
"registering additional archiving file formats (such as xz compressed "
"tarfiles or custom formats)."
msgstr ""
"此外，:mod:`shutil` 模块现在支持对 zip 文件、未压缩的 tar 文件、gzip 压缩的 tar 文件和 bzip 压缩的 tar "
"文件的 :ref:`归档操作 <archiving-operations>`。还有用于注册其他归档文件格式（如 xz 压缩的 tar "
"文件或自定义格式）的函数。"

#: ../../whatsnew/3.2.rst:1561
msgid ""
"The principal functions are :func:`~shutil.make_archive` and "
":func:`~shutil.unpack_archive`.  By default, both operate on the current "
"directory (which can be set by :func:`os.chdir`) and on any sub-directories."
" The archive filename needs to be specified with a full pathname.  The "
"archiving step is non-destructive (the original files are left unchanged)."
msgstr ""
"主要函数是 :func:`~shutil.make_archive` 和 "
":func:`~shutil.unpack_archive`。默认情况下，两者操作当前目录（可以通过 :func:`os.chdir` "
"设置）及其任何子目录。归档文件名需要指定完整路径名。归档步骤是非破坏性的（原始文件保持不变）。"

#: ../../whatsnew/3.2.rst:1569
msgid ""
">>> import shutil, pprint\n"
"\n"
">>> os.chdir('mydata')  # change to the source directory\n"
">>> f = shutil.make_archive('/var/backup/mydata',\n"
"...                         'zip')      # archive the current directory\n"
">>> f                                   # show the name of archive\n"
"'/var/backup/mydata.zip'\n"
">>> os.chdir('tmp')                     # change to an unpacking\n"
">>> shutil.unpack_archive('/var/backup/mydata.zip')  # recover the data\n"
"\n"
">>> pprint.pprint(shutil.get_archive_formats())  # display known formats\n"
"[('bztar', \"bzip2'ed tar-file\"),\n"
" ('gztar', \"gzip'ed tar-file\"),\n"
" ('tar', 'uncompressed tar file'),\n"
" ('zip', 'ZIP file')]\n"
"\n"
">>> shutil.register_archive_format(     # register a new archive format\n"
"...     name='xz',\n"
"...     function=xz.compress,           # callable archiving function\n"
"...     extra_args=[('level', 8)],      # arguments to the function\n"
"...     description='xz compression'\n"
"... )"
msgstr ""
">>> import shutil, pprint\n"
"\n"
">>> os.chdir('mydata')  # 切换到源目录\n"
">>> f = shutil.make_archive('/var/backup/mydata',\n"
"...                         'zip')      # 将当前目录归档\n"
">>> f                                   # 显示归档文件名\n"
"'/var/backup/mydata.zip'\n"
">>> os.chdir('tmp')                     # 切换到解包目录\n"
">>> shutil.unpack_archive('/var/backup/mydata.zip')  # 恢复数据\n"
"\n"
">>> pprint.pprint(shutil.get_archive_formats())  # 显示已知格式\n"
"[('bztar', \"bzip2'ed tar-file\"),\n"
" ('gztar', \"gzip'ed tar-file\"),\n"
" ('tar', 'uncompressed tar file'),\n"
" ('zip', 'ZIP file')]\n"
"\n"
">>> shutil.register_archive_format(     # 注册新的归档格式\n"
"...     name='xz',\n"
"...     function=xz.compress,           # 可调用的归档函数\n"
"...     extra_args=[('level', 8)],      # 传给该函数的参数\n"
"...     description='xz compression'\n"
"... )"

#: ../../whatsnew/3.2.rst:1595
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.2.rst:1597
msgid ""
"The :mod:`sqlite3` module was updated to pysqlite version 2.6.0.  It has two"
" new capabilities."
msgstr ":mod:`sqlite3` 模块被更新至 pysqlite 2.6.0 版。 它拥有两个新功能。"

#: ../../whatsnew/3.2.rst:1599
msgid ""
"The :attr:`!sqlite3.Connection.in_transit` attribute is true if there is an "
"active transaction for uncommitted changes."
msgstr ":attr:`!sqlite3.Connection.in_transit` 属性为真，表示存在未提交更改的活跃事务。"

#: ../../whatsnew/3.2.rst:1602
msgid ""
"The :meth:`sqlite3.Connection.enable_load_extension` and "
":meth:`sqlite3.Connection.load_extension` methods allows you to load SQLite "
"extensions from \".so\" files.  One well-known extension is the fulltext-"
"search extension distributed with SQLite."
msgstr ""
":meth:`sqlite3.Connection.enable_load_extension` 和 "
":meth:`sqlite3.Connection.load_extension` 方法允许你从 \".so\" 文件加载 SQLite "
"扩展。一个著名的扩展是随 SQLite 分发的全文搜索扩展。"

#: ../../whatsnew/3.2.rst:1607
msgid "(Contributed by R. David Murray and Shashwat Anand; :issue:`8845`.)"
msgstr "（由 R. David Murray 和 Shashwat Anand 在 :issue:`8845` 中贡献。）"

#: ../../whatsnew/3.2.rst:1610
msgid "html"
msgstr "html"

#: ../../whatsnew/3.2.rst:1612
msgid ""
"A new :mod:`html` module was introduced with only a single function, "
":func:`~html.escape`, which is used for escaping reserved characters from "
"HTML markup:"
msgstr ""
"引入了一个新的 :mod:`html` 模块，其中只有一个函数 :func:`~html.escape`，用于转义 HTML 标记中的保留字符："

#: ../../whatsnew/3.2.rst:1621
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.2.rst:1623
msgid "The :mod:`socket` module has two new improvements."
msgstr ":mod:`socket` 模块有两项新改进。"

#: ../../whatsnew/3.2.rst:1625
msgid ""
"Socket objects now have a :meth:`~socket.socket.detach` method which puts "
"the socket into closed state without actually closing the underlying file "
"descriptor.  The latter can then be reused for other purposes. (Added by "
"Antoine Pitrou; :issue:`8524`.)"
msgstr ""
"Socket对象现在有一个 :meth:`~socket.socket.detach` "
"方法，该方法将套接字置于关闭状态，而不实际关闭底层的文件描述符。后者随后可以用于其他目的。（由 Antoine Pitrou 在 "
":issue:`8524` 中添加。）"

#: ../../whatsnew/3.2.rst:1630
msgid ""
":func:`socket.create_connection` now supports the context management "
"protocol to unconditionally consume :exc:`socket.error` exceptions and to "
"close the socket when done. (Contributed by Giampaolo Rodolà; "
":issue:`9794`.)"
msgstr ""
":func:`socket.create_connection` 现在支持上下文管理协议，以无条件消耗 :exc:`socket.error` "
"异常，并在完成后关闭套接字。（由 Giampaolo Rodolà 在 :issue:`9794` 中贡献。）"

#: ../../whatsnew/3.2.rst:1636
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.2.rst:1638
msgid ""
"The :mod:`ssl` module added a number of features to satisfy common "
"requirements for secure (encrypted, authenticated) internet connections:"
msgstr ":mod:`ssl` 模块添加了许多功能以满足安全（加密、认证）互联网连接的常见需求："

#: ../../whatsnew/3.2.rst:1641
msgid ""
"A new class, :class:`~ssl.SSLContext`, serves as a container for persistent "
"SSL data, such as protocol settings, certificates, private keys, and various"
" other options. It includes a :meth:`~ssl.SSLContext.wrap_socket` for "
"creating an SSL socket from an SSL context."
msgstr ""
"一个新的类，:class:`~ssl.SSLContext`，用作持久SSL数据的容器，例如协议设置、证书、私钥和各种其他选项。它包括一个 "
":meth:`~ssl.SSLContext.wrap_socket` 方法，用于从SSL上下文创建SSL套接字。"

#: ../../whatsnew/3.2.rst:1646
msgid ""
"A new function, :func:`!ssl.match_hostname`, supports server identity "
"verification for higher-level protocols by implementing the rules of HTTPS "
"(from :rfc:`2818`) which are also suitable for other protocols."
msgstr ""
"一个新的函数，:func:`!ssl.match_hostname`，通过实现HTTPS（来自:rfc:`2818`）的规则来支持高级协议的服务器身份验证，这些规则也适用于其他协议。"

#: ../../whatsnew/3.2.rst:1650
msgid ""
"The :func:`ssl.wrap_socket() <ssl.SSLContext.wrap_socket>` constructor "
"function now takes a *ciphers* argument.  The *ciphers* string lists the "
"allowed encryption algorithms using the format described in the `OpenSSL "
"documentation <https://docs.openssl.org/1.0.2/man1/ciphers/#cipher-list-"
"format>`__."
msgstr ""
":func:`ssl.wrap_socket() <ssl.SSLContext.wrap_socket>` 构造函数现在接受一个 *ciphers* "
"参数。*ciphers* 字符串列出了允许的加密算法，使用 `OpenSSL文档 "
"<https://docs.openssl.org/1.0.2/man1/ciphers/#cipher-list-format>`__ 中描述的格式。"

#: ../../whatsnew/3.2.rst:1655
msgid ""
"When linked against recent versions of OpenSSL, the :mod:`ssl` module now "
"supports the Server Name Indication extension to the TLS protocol, allowing "
"multiple \"virtual hosts\" using different certificates on a single IP port."
" This extension is only supported in client mode, and is activated by "
"passing the *server_hostname* argument to "
":meth:`ssl.SSLContext.wrap_socket`."
msgstr ""
"当与较新版本的 OpenSSL 库链接时，:mod:`ssl` 模块现在支持 TLS 协议的服务器名称指示（Server Name "
"Indication，SNI）扩展。该特性允许在单个 IP "
"端口上为多个使用不同证书的“虚拟主机”提供服务。需要注意的是，此扩展仅在客户端模式下受支持，并且需要通过向 "
":meth:`ssl.SSLContext.wrap_socket` 方法传递 *server_hostname* 参数来激活。"

#: ../../whatsnew/3.2.rst:1661
msgid ""
"Various options have been added to the :mod:`ssl` module, such as "
":data:`~ssl.OP_NO_SSLv2` which disables the insecure and obsolete SSLv2 "
"protocol."
msgstr ""
"已向 :mod:`ssl` 模块添加了各种选项，例如 :data:`~ssl.OP_NO_SSLv2`，该选项禁用了不安全且已过时的 SSLv2 协议。"

#: ../../whatsnew/3.2.rst:1665
msgid ""
"The extension now loads all the OpenSSL ciphers and digest algorithms.  If "
"some SSL certificates cannot be verified, they are reported as an \"unknown "
"algorithm\" error."
msgstr "扩展现在加载了所有OpenSSL密码和摘要算法。如果某些SSL证书无法验证，它们将被报告为“未知算法”错误。"

#: ../../whatsnew/3.2.rst:1669
msgid ""
"The version of OpenSSL being used is now accessible using the module "
"attributes :const:`ssl.OPENSSL_VERSION` (a string), "
":const:`ssl.OPENSSL_VERSION_INFO` (a 5-tuple), and "
":const:`ssl.OPENSSL_VERSION_NUMBER` (an integer)."
msgstr ""
"现在可以通过模块属性 :const:`ssl.OPENSSL_VERSION` "
"(字符串)、:const:`ssl.OPENSSL_VERSION_INFO` (一个 5 元组) 和 "
":const:`ssl.OPENSSL_VERSION_NUMBER` (整数) 访问正在使用的 OpenSSL 版本。"

#: ../../whatsnew/3.2.rst:1674
msgid ""
"(Contributed by Antoine Pitrou in :issue:`8850`, :issue:`1589`, "
":issue:`8322`, :issue:`5639`, :issue:`4870`, :issue:`8484`, and "
":issue:`8321`.)"
msgstr ""
"（由 Antoine Pitrou 在 :issue:`8850`、 :issue:`1589`、 :issue:`8322`、 "
":issue:`5639`、 :issue:`4870`、 :issue:`8484` 和 :issue:`8321` 中贡献。）"

#: ../../whatsnew/3.2.rst:1678
msgid "nntp"
msgstr "nntp"

#: ../../whatsnew/3.2.rst:1680
msgid ""
"The :mod:`!nntplib` module has a revamped implementation with better bytes "
"and text semantics as well as more practical APIs.  These improvements break"
" compatibility with the nntplib version in Python 3.1, which was partly "
"dysfunctional in itself."
msgstr ""
":mod:`!nntplib` 模块进行了重新实现，改进了字节和文本语义以及更实用的API。这些改进破坏了与Python "
"3.1中nntplib版本的兼容性，后者本身部分功能不完善。"

#: ../../whatsnew/3.2.rst:1685
msgid ""
"Support for secure connections through both implicit (using "
":class:`!nntplib.NNTP_SSL`) and explicit (using "
":meth:`!nntplib.NNTP.starttls`) TLS has also been added."
msgstr ""
"还增加了通过隐式（使用 :class:`!nntplib.NNTP_SSL`）和显式（使用 "
":meth:`!nntplib.NNTP.starttls`）TLS进行安全连接的支持。"

#: ../../whatsnew/3.2.rst:1689
msgid ""
"(Contributed by Antoine Pitrou in :issue:`9360` and Andrew Vant in "
":issue:`1926`.)"
msgstr ""
"（由 Antoine Pitrou 在 :issue:`9360` 中贡献，由 Andrew Vant 在 :issue:`1926` 中贡献。）"

#: ../../whatsnew/3.2.rst:1692
msgid "certificates"
msgstr "certificates"

#: ../../whatsnew/3.2.rst:1694
msgid ""
":class:`http.client.HTTPSConnection`, :class:`urllib.request.HTTPSHandler` "
"and :func:`urllib.request.urlopen` now take optional arguments to allow for "
"server certificate checking against a set of Certificate Authorities, as "
"recommended in public uses of HTTPS."
msgstr ""
":class:`http.client.HTTPSConnection`、:class:`urllib.request.HTTPSHandler` 和 "
":func:`urllib.request.urlopen` "
"现在接受可选参数，以允许对服务器证书进行检查，以验证一组证书颁发机构，这是公共HTTPS使用的推荐做法。"

#: ../../whatsnew/3.2.rst:1699
msgid "(Added by Antoine Pitrou, :issue:`9003`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`9003` 中添加。）"

#: ../../whatsnew/3.2.rst:1702
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.2.rst:1704
msgid ""
"Support for explicit TLS on standard IMAP4 connections has been added "
"through the new :mod:`imaplib.IMAP4.starttls` method."
msgstr "通过新的 :mod:`imaplib.IMAP4.starttls` 方法，标准IMAP4连接上增加了显式TLS支持。"

#: ../../whatsnew/3.2.rst:1707
msgid "(Contributed by Lorenzo M. Catucci and Antoine Pitrou, :issue:`4471`.)"
msgstr "（由 Lorenzo M. Catucci 和 Antoine Pitrou 在 :issue:`4471` 中贡献。）"

#: ../../whatsnew/3.2.rst:1710
msgid "http.client"
msgstr "http.client"

#: ../../whatsnew/3.2.rst:1712
msgid ""
"There were a number of small API improvements in the :mod:`http.client` "
"module. The old-style HTTP 0.9 simple responses are no longer supported and "
"the *strict* parameter is deprecated in all classes."
msgstr ""
":mod:`http.client` 模块中进行了一些小的API改进。不再支持旧式HTTP 0.9简单响应，所有类中的 *strict* 参数已被弃用。"

#: ../../whatsnew/3.2.rst:1716
msgid ""
"The :class:`~http.client.HTTPConnection` and "
":class:`~http.client.HTTPSConnection` classes now have a *source_address* "
"parameter for a (host, port) tuple indicating where the HTTP connection is "
"made from."
msgstr ""
":class:`~http.client.HTTPConnection` 和 :class:`~http.client.HTTPSConnection`"
" 类现在有一个 *source_address* 参数，用于指示（主机，端口）元组，表明HTTP连接是从哪里建立的。"

#: ../../whatsnew/3.2.rst:1721
msgid ""
"Support for certificate checking and HTTPS virtual hosts were added to "
":class:`~http.client.HTTPSConnection`."
msgstr "为 :class:`~http.client.HTTPSConnection` 增加了证书检查和HTTPS虚拟主机的支持。"

#: ../../whatsnew/3.2.rst:1724
msgid ""
"The :meth:`~http.client.HTTPConnection.request` method on connection objects"
" allowed an optional *body* argument so that a :term:`file object` could be "
"used to supply the content of the request.  Conveniently, the *body* "
"argument now also accepts an :term:`iterable` object so long as it includes "
"an explicit ``Content-Length`` header.  This extended interface is much more"
" flexible than before."
msgstr ""
"连接对象上的 :meth:`~http.client.HTTPConnection.request` 方法允许一个可选的 *body* "
"参数，以便可以使用 :term:`file object` 来提供请求的内容。 方便的是，*body* 参数现在也接受一个 "
":term:`iterable` 对象，只要它包含一个明确的 ``Content-Length`` 头部。 这个扩展接口比以前更加灵活。"

#: ../../whatsnew/3.2.rst:1731
msgid ""
"To establish an HTTPS connection through a proxy server, there is a new "
":meth:`~http.client.HTTPConnection.set_tunnel` method that sets the host and"
" port for HTTP Connect tunneling."
msgstr ""
"为了通过代理服务器建立 HTTPS 连接，新增了一个 :meth:`~http.client.HTTPConnection.set_tunnel` "
"方法，用于设置 HTTP Connect 隧道的主机和端口。"

#: ../../whatsnew/3.2.rst:1735
msgid ""
"To match the behavior of :mod:`http.server`, the HTTP client library now "
"also encodes headers with ISO-8859-1 (Latin-1) encoding.  It was already "
"doing that for incoming headers, so now the behavior is consistent for both "
"incoming and outgoing traffic. (See work by Armin Ronacher in "
":issue:`10980`.)"
msgstr ""
"为了与 :mod:`http.server` 的行为保持一致，HTTP 客户端库现在也使用 "
"ISO-8859-1（Latin-1）编码对头部进行编码。它已经对传入的头部这样做了，所以现在传入和传出流量的行为是一致的。（参见 Armin "
"Ronacher 在 :issue:`10980` 中的工作。）"

#: ../../whatsnew/3.2.rst:1741
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.2.rst:1743
msgid ""
"The unittest module has a number of improvements supporting test discovery "
"for packages, easier experimentation at the interactive prompt, new testcase"
" methods, improved diagnostic messages for test failures, and better method "
"names."
msgstr ""
"unittest 模块有许多改进，支持包的测试发现、在交互式提示符下更容易进行实验、新的测试用例方法、改进的测试失败诊断消息以及更好的方法名称。"

#: ../../whatsnew/3.2.rst:1748
msgid ""
"The command-line call ``python -m unittest`` can now accept file paths "
"instead of module names for running specific tests (:issue:`10620`).  The "
"new test discovery can find tests within packages, locating any test "
"importable from the top-level directory.  The top-level directory can be "
"specified with the ``-t`` option, a pattern for matching files with ``-p``, "
"and a directory to start discovery with ``-s``:"
msgstr ""
"命令行调用 ``python -m unittest`` 现在接受文件路径而不是模块名来运行特定的测试 "
"(:issue:`10620`)。新的测试发现可以在包内找到测试，定位从顶级目录可导入的任何测试。顶级目录可以用 ``-t`` 选项指定，用 "
"``-p`` 匹配文件的模式，以及用 ``-s`` 指定开始发现的目录："

#: ../../whatsnew/3.2.rst:1755
msgid "$ python -m unittest discover -s my_proj_dir -p _test.py"
msgstr "$ python -m unittest discover -s my_proj_dir -p _test.py"

#: ../../whatsnew/3.2.rst:1759 ../../whatsnew/3.2.rst:1768
#: ../../whatsnew/3.2.rst:1924
msgid "(Contributed by Michael Foord.)"
msgstr "（由 Michael Foord 贡献）"

#: ../../whatsnew/3.2.rst:1761
msgid ""
"Experimentation at the interactive prompt is now easier because the "
":class:`unittest.TestCase` class can now be instantiated without arguments:"
msgstr "在交互式提示符下进行实验现在更容易了，因为 :class:`unittest.TestCase` 类现在可以不带参数实例化："

#: ../../whatsnew/3.2.rst:1770
msgid ""
"The :mod:`unittest` module has two new methods, "
":meth:`~unittest.TestCase.assertWarns` and "
":meth:`~unittest.TestCase.assertWarnsRegex` to verify that a given warning "
"type is triggered by the code under test::"
msgstr ""
":mod:`unittest` 模块有两个新方法，:meth:`~unittest.TestCase.assertWarns` 和 "
":meth:`~unittest.TestCase.assertWarnsRegex`，用于验证给定警告类型是否由被测试代码触发："

#: ../../whatsnew/3.2.rst:1775
msgid ""
"with self.assertWarns(DeprecationWarning):\n"
"    legacy_function('XYZ')"
msgstr ""
"with self.assertWarns(DeprecationWarning):\n"
"    legacy_function('XYZ')"

#: ../../whatsnew/3.2.rst:1778
msgid "(Contributed by Antoine Pitrou, :issue:`9754`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`9754` 中贡献。）"

#: ../../whatsnew/3.2.rst:1780
msgid ""
"Another new method, :meth:`~unittest.TestCase.assertCountEqual` is used to "
"compare two iterables to determine if their element counts are equal "
"(whether the same elements are present with the same number of occurrences "
"regardless of order)::"
msgstr ""
"另一个新方法，:meth:`~unittest.TestCase.assertCountEqual` "
"用于比较两个可迭代对象，以确定它们的元素计数是否相等（无论顺序如何，相同元素的出现次数是否相同）::"

#: ../../whatsnew/3.2.rst:1785
msgid ""
"def test_anagram(self):\n"
"    self.assertCountEqual('algorithm', 'logarithm')"
msgstr ""
"def test_anagram(self):\n"
"    self.assertCountEqual('algorithm', 'logarithm')"

#: ../../whatsnew/3.2.rst:1790
msgid ""
"A principal feature of the unittest module is an effort to produce "
"meaningful diagnostics when a test fails.  When possible, the failure is "
"recorded along with a diff of the output.  This is especially helpful for "
"analyzing log files of failed test runs. However, since diffs can sometime "
"be voluminous, there is a new :attr:`~unittest.TestCase.maxDiff` attribute "
"that sets maximum length of diffs displayed."
msgstr ""
"unittest "
"模块的主要特性之一是当测试失败时，努力生成有意义的诊断信息。在可能的情况下，失败记录会附带输出内容的差异。这对于分析失败的测试运行的日志文件特别有帮助。然而，由于差异有时可能非常庞大，因此有一个新的"
" :attr:`~unittest.TestCase.maxDiff` 属性用于设置显示的差异最大长度。"

#: ../../whatsnew/3.2.rst:1797
msgid ""
"In addition, the method names in the module have undergone a number of "
"clean-ups."
msgstr "此外，模块中的方法名称已经进行了多项清理。"

#: ../../whatsnew/3.2.rst:1799
msgid ""
"For example, :meth:`~unittest.TestCase.assertRegex` is the new name for "
":meth:`!assertRegexpMatches` which was misnamed because the test uses "
":func:`re.search`, not :func:`re.match`.  Other methods using regular "
"expressions are now named using short form \"Regex\" in preference to "
"\"Regexp\" -- this matches the names used in other unittest implementations,"
" matches Python's old name for the :mod:`re` module, and it has unambiguous "
"camel-casing."
msgstr ""
"例如，:meth:`~unittest.TestCase.assertRegex` 是 :meth:`!assertRegexpMatches` "
"的新名称，后者命名不当，因为测试使用的是 :func:`re.search`，而不是 "
":func:`re.match`。其他使用正则表达式的方法现在也优先使用短形式 \"Regex\" 而不是 \"Regexp\" —— 这与其他 "
"unittest 实现中的命名一致，匹配 Python 中 :mod:`re` 模块的旧名称，并且具有明确的驼峰命名。"

#: ../../whatsnew/3.2.rst:1807
msgid "(Contributed by Raymond Hettinger and implemented by Ezio Melotti.)"
msgstr "（由 Raymond Hettinger 贡献并由 Ezio Melotti 实现。）"

#: ../../whatsnew/3.2.rst:1809
msgid ""
"To improve consistency, some long-standing method aliases are being "
"deprecated in favor of the preferred names:"
msgstr "为了提高一致性，一些长期存在的方法别名正在被弃用，转而使用首选名称："

#: ../../whatsnew/3.2.rst:1813
msgid "Old Name"
msgstr "旧名称"

#: ../../whatsnew/3.2.rst:1813
msgid "Preferred Name"
msgstr "首选名称"

#: ../../whatsnew/3.2.rst:1815
msgid ":meth:`!assert_`"
msgstr ":meth:`!assert_`"

#: ../../whatsnew/3.2.rst:1815
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../whatsnew/3.2.rst:1816
msgid ":meth:`!assertEquals`"
msgstr ":meth:`!assertEquals`"

#: ../../whatsnew/3.2.rst:1816
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../whatsnew/3.2.rst:1817
msgid ":meth:`!assertNotEquals`"
msgstr ":meth:`!assertNotEquals`"

#: ../../whatsnew/3.2.rst:1817
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../whatsnew/3.2.rst:1818
msgid ":meth:`!assertAlmostEquals`"
msgstr ":meth:`!assertAlmostEquals`"

#: ../../whatsnew/3.2.rst:1818
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../whatsnew/3.2.rst:1819
msgid ":meth:`!assertNotAlmostEquals`"
msgstr ":meth:`!assertNotAlmostEquals`"

#: ../../whatsnew/3.2.rst:1819
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../whatsnew/3.2.rst:1822
msgid ""
"Likewise, the ``TestCase.fail*`` methods deprecated in Python 3.1 are "
"expected to be removed in Python 3.3."
msgstr "同样，Python 3.1 中弃用的 ``TestCase.fail*`` 方法预计将在 Python 3.3 中被移除。"

#: ../../whatsnew/3.2.rst:1825
msgid "(Contributed by Ezio Melotti; :issue:`9424`.)"
msgstr "（由 Ezio Melotti 在 :issue:`9424` 中贡献。）"

#: ../../whatsnew/3.2.rst:1827
msgid ""
"The :meth:`!assertDictContainsSubset` method was deprecated because it was "
"misimplemented with the arguments in the wrong order.  This created hard-to-"
"debug optical illusions where tests like "
"``TestCase().assertDictContainsSubset({'a':1, 'b':2}, {'a':1})`` would fail."
msgstr ""
":meth:`!assertDictContainsSubset` 方法被弃用，因为它的实现有误，参数顺序错误。这导致了难以调试的视觉错觉，例如 "
"``TestCase().assertDictContainsSubset({'a':1, 'b':2}, {'a':1})`` 这样的测试会失败。"

#: ../../whatsnew/3.2.rst:1835
msgid "random"
msgstr "random"

#: ../../whatsnew/3.2.rst:1837
msgid ""
"The integer methods in the :mod:`random` module now do a better job of "
"producing uniform distributions.  Previously, they computed selections with "
"``int(n*random())`` which had a slight bias whenever *n* was not a power of "
"two. Now, multiple selections are made from a range up to the next power of "
"two and a selection is kept only when it falls within the range ``0 <= x < "
"n``.  The functions and methods affected are :func:`~random.randrange`, "
":func:`~random.randint`, :func:`~random.choice`, :func:`~random.shuffle` and"
" :func:`~random.sample`."
msgstr ""
":mod:`random` 模块中的整数方法现在能更好地生成均匀分布。之前，它们使用 ``int(n*random())`` 计算选择，这在 *n* "
"不是二的幂时存在轻微偏差。现在，从下一个二的幂的范围中进行多次选择，并且只有当选择落在 ``0 <= x < n`` "
"范围内时才保留。受影响的函数和方法包括 :func:`~random.randrange`、 :func:`~random.randint`、 "
":func:`~random.choice`、 :func:`~random.shuffle` 和 :func:`~random.sample`。"

#: ../../whatsnew/3.2.rst:1846
msgid "(Contributed by Raymond Hettinger; :issue:`9025`.)"
msgstr "（由 Raymond Hettinger 在 :issue:`9025` 中贡献。）"

#: ../../whatsnew/3.2.rst:1849
msgid "poplib"
msgstr "poplib"

#: ../../whatsnew/3.2.rst:1851
msgid ""
":class:`~poplib.POP3_SSL` class now accepts a *context* parameter, which is "
"a :class:`ssl.SSLContext` object allowing bundling SSL configuration "
"options, certificates and private keys into a single (potentially long-"
"lived) structure."
msgstr ""
":class:`~poplib.POP3_SSL` 类现在接受一个 *context* 参数，这是一个 :class:`ssl.SSLContext` "
"对象，允许将 SSL 配置选项、证书和私钥捆绑到一个单一的（可能是长期存在的）结构体中。"

#: ../../whatsnew/3.2.rst:1856
msgid "(Contributed by Giampaolo Rodolà; :issue:`8807`.)"
msgstr "（由 Giampaolo Rodolà 在 :issue:`8807` 中贡献。）"

#: ../../whatsnew/3.2.rst:1859
msgid "asyncore"
msgstr "asyncore"

#: ../../whatsnew/3.2.rst:1861
msgid ""
":class:`!asyncore.dispatcher` now provides a :meth:`!handle_accepted` method"
" returning a ``(sock, addr)`` pair which is called when a connection has "
"actually been established with a new remote endpoint. This is supposed to be"
" used as a replacement for old :meth:`!handle_accept` and avoids the user  "
"to call :meth:`!accept` directly."
msgstr ""
":class:`!asyncore.dispatcher` 现在提供了一个 :meth:`!handle_accepted` 方法，返回一个 "
"``(sock, addr)`` 对，当与新远程端点实际建立连接时调用。这应作为旧 :meth:`!handle_accept` "
"的替代，避免了用户直接调用 :meth:`!accept`。"

#: ../../whatsnew/3.2.rst:1868
msgid "(Contributed by Giampaolo Rodolà; :issue:`6706`.)"
msgstr "（由 Giampaolo Rodolà 在 :issue:`6706` 中贡献。）"

#: ../../whatsnew/3.2.rst:1871
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.2.rst:1873
msgid ""
"The :mod:`tempfile` module has a new context manager, "
":class:`~tempfile.TemporaryDirectory` which provides easy deterministic "
"cleanup of temporary directories::"
msgstr ""
":mod:`tempfile` "
"模块有一个新的上下文管理器，:class:`~tempfile.TemporaryDirectory`，它提供了临时目录的简单确定性清理："

#: ../../whatsnew/3.2.rst:1877
msgid ""
"with tempfile.TemporaryDirectory() as tmpdirname:\n"
"    print('created temporary dir:', tmpdirname)"
msgstr ""
"with tempfile.TemporaryDirectory() as tmpdirname:\n"
"    print('创建的临时目录：', tmpdirname)"

#: ../../whatsnew/3.2.rst:1880
msgid "(Contributed by Neil Schemenauer and Nick Coghlan; :issue:`5178`.)"
msgstr "（由 Neil Schemenauer 和 Nick Coghlan 在 :issue:`5178` 中贡献。）"

#: ../../whatsnew/3.2.rst:1883
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.2.rst:1885
msgid ""
"The :mod:`inspect` module has a new function "
":func:`~inspect.getgeneratorstate` to easily identify the current state of a"
" generator-iterator::"
msgstr ""
":mod:`inspect` 模块有一个新函数 :func:`~inspect.getgeneratorstate` "
"用来方便地标识一个生成器迭代器的当前状态::"

#: ../../whatsnew/3.2.rst:1889
msgid ""
">>> from inspect import getgeneratorstate\n"
">>> def gen():\n"
"...     yield 'demo'\n"
"...\n"
">>> g = gen()\n"
">>> getgeneratorstate(g)\n"
"'GEN_CREATED'\n"
">>> next(g)\n"
"'demo'\n"
">>> getgeneratorstate(g)\n"
"'GEN_SUSPENDED'\n"
">>> next(g, None)\n"
">>> getgeneratorstate(g)\n"
"'GEN_CLOSED'"
msgstr ""
">>> from inspect import getgeneratorstate\n"
">>> def gen():\n"
"...     yield 'demo'\n"
"...\n"
">>> g = gen()\n"
">>> getgeneratorstate(g)\n"
"'GEN_CREATED'\n"
">>> next(g)\n"
"'demo'\n"
">>> getgeneratorstate(g)\n"
"'GEN_SUSPENDED'\n"
">>> next(g, None)\n"
">>> getgeneratorstate(g)\n"
"'GEN_CLOSED'"

#: ../../whatsnew/3.2.rst:1904
msgid "(Contributed by Rodolpho Eckhardt and Nick Coghlan, :issue:`10220`.)"
msgstr "（由 Rodolpho Eckhardt 和 Nick Coghlan 在 :issue:`10220` 中贡献。）"

#: ../../whatsnew/3.2.rst:1906
msgid ""
"To support lookups without the possibility of activating a dynamic "
"attribute, the :mod:`inspect` module has a new function, "
":func:`~inspect.getattr_static`. Unlike :func:`hasattr`, this is a true "
"read-only search, guaranteed not to change state while it is searching::"
msgstr ""
"为了支持查找而不激活动态属性，:mod:`inspect` 模块有一个新函数，:func:`~inspect.getattr_static`。与 "
":func:`hasattr` 不同，这是一个真正的只读搜索，保证在搜索过程中不会改变状态："

#: ../../whatsnew/3.2.rst:1911
msgid ""
">>> class A:\n"
"...     @property\n"
"...     def f(self):\n"
"...         print('Running')\n"
"...         return 10\n"
"...\n"
">>> a = A()\n"
">>> getattr(a, 'f')\n"
"Running\n"
"10\n"
">>> inspect.getattr_static(a, 'f')\n"
"<property object at 0x1022bd788>"
msgstr ""
">>> class A:\n"
"...     @property\n"
"...     def f(self):\n"
"...         print('运行中')\n"
"...         return 10\n"
"...\n"
">>> a = A()\n"
">>> getattr(a, 'f')\n"
"运行中\n"
"10\n"
">>> inspect.getattr_static(a, 'f')\n"
"<property object at 0x1022bd788>"

#: ../../whatsnew/3.2.rst:1927
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.2.rst:1929
msgid ""
"The :mod:`pydoc` module now provides a much-improved web server interface, "
"as well as a new command-line option ``-b`` to automatically open a browser "
"window to display that server:"
msgstr ""
":mod:`pydoc` 模块现在提供了一个大幅改进的Web服务器接口，以及一个新的命令行选项 ``-b``，用于自动打开浏览器窗口以显示该服务器："

#: ../../whatsnew/3.2.rst:1933
msgid "$ pydoc3.2 -b"
msgstr "$ pydoc3.2 -b"

#: ../../whatsnew/3.2.rst:1937
msgid "(Contributed by Ron Adam; :issue:`2001`.)"
msgstr "（由 Ron Adam 在 :issue:`2001` 中贡献。）"

#: ../../whatsnew/3.2.rst:1940
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.2.rst:1942
msgid ""
"The :mod:`dis` module gained two new functions for inspecting code, "
":func:`~dis.code_info` and :func:`~dis.show_code`.  Both provide detailed "
"code object information for the supplied function, method, source code "
"string or code object.  The former returns a string and the latter prints "
"it::"
msgstr ""
":mod:`dis` 模块新增了两个用于检查代码的函数，:func:`~dis.code_info` 和 "
":func:`~dis.show_code`。两者都为提供的函数、方法、源代码字符串或代码对象提供详细的代码对象信息。前者返回一个字符串，后者将其打印出来："

#: ../../whatsnew/3.2.rst:1947
msgid ""
">>> import dis, random\n"
">>> dis.show_code(random.choice)\n"
"Name:              choice\n"
"Filename:          /Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/random.py\n"
"Argument count:    2\n"
"Kw-only arguments: 0\n"
"Number of locals:  3\n"
"Stack size:        11\n"
"Flags:             OPTIMIZED, NEWLOCALS, NOFREE\n"
"Constants:\n"
"   0: 'Choose a random element from a non-empty sequence.'\n"
"   1: 'Cannot choose from an empty sequence'\n"
"Names:\n"
"   0: _randbelow\n"
"   1: len\n"
"   2: ValueError\n"
"   3: IndexError\n"
"Variable names:\n"
"   0: self\n"
"   1: seq\n"
"   2: i"
msgstr ""
">>> import dis, random\n"
">>> dis.show_code(random.choice)\n"
"Name:              choice\n"
"Filename:          /Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/random.py\n"
"Argument count:    2\n"
"Kw-only arguments: 0\n"
"Number of locals:  3\n"
"Stack size:        11\n"
"Flags:             OPTIMIZED, NEWLOCALS, NOFREE\n"
"Constants:\n"
"   0: 'Choose a random element from a non-empty sequence.'\n"
"   1: 'Cannot choose from an empty sequence'\n"
"Names:\n"
"   0: _randbelow\n"
"   1: len\n"
"   2: ValueError\n"
"   3: IndexError\n"
"Variable names:\n"
"   0: self\n"
"   1: seq\n"
"   2: i"

#: ../../whatsnew/3.2.rst:1969
msgid ""
"In addition, the :func:`~dis.dis` function now accepts string arguments so "
"that the common idiom ``dis(compile(s, '', 'eval'))`` can be shortened to "
"``dis(s)``::"
msgstr ""
"此外，:func:`~dis.dis` 函数现在接受字符串参数，以便常用的 ``dis(compile(s, '', 'eval'))`` 可以简化为 "
"``dis(s)``："

#: ../../whatsnew/3.2.rst:1973
msgid ""
">>> dis('3*x+1 if x%2==1 else x//2')\n"
"  1           0 LOAD_NAME                0 (x)\n"
"              3 LOAD_CONST               0 (2)\n"
"              6 BINARY_MODULO\n"
"              7 LOAD_CONST               1 (1)\n"
"             10 COMPARE_OP               2 (==)\n"
"             13 POP_JUMP_IF_FALSE       28\n"
"             16 LOAD_CONST               2 (3)\n"
"             19 LOAD_NAME                0 (x)\n"
"             22 BINARY_MULTIPLY\n"
"             23 LOAD_CONST               1 (1)\n"
"             26 BINARY_ADD\n"
"             27 RETURN_VALUE\n"
"        >>   28 LOAD_NAME                0 (x)\n"
"             31 LOAD_CONST               0 (2)\n"
"             34 BINARY_FLOOR_DIVIDE\n"
"             35 RETURN_VALUE"
msgstr ""
">>> dis('3*x+1 if x%2==1 else x//2')\n"
"  1           0 LOAD_NAME                0 (x)\n"
"              3 LOAD_CONST               0 (2)\n"
"              6 BINARY_MODULO\n"
"              7 LOAD_CONST               1 (1)\n"
"             10 COMPARE_OP               2 (==)\n"
"             13 POP_JUMP_IF_FALSE       28\n"
"             16 LOAD_CONST               2 (3)\n"
"             19 LOAD_NAME                0 (x)\n"
"             22 BINARY_MULTIPLY\n"
"             23 LOAD_CONST               1 (1)\n"
"             26 BINARY_ADD\n"
"             27 RETURN_VALUE\n"
"        >>   28 LOAD_NAME                0 (x)\n"
"             31 LOAD_CONST               0 (2)\n"
"             34 BINARY_FLOOR_DIVIDE\n"
"             35 RETURN_VALUE"

#: ../../whatsnew/3.2.rst:1991
msgid ""
"Taken together, these improvements make it easier to explore how CPython is "
"implemented and to see for yourself what the language syntax does under-the-"
"hood."
msgstr "综合来看，这些改进使得探索CPython的实现方式以及亲自查看语言语法在底层的作用变得更加容易。"

#: ../../whatsnew/3.2.rst:1995
msgid "(Contributed by Nick Coghlan in :issue:`9147`.)"
msgstr "（由 Nick Coghlan 在 :issue:`9147` 中贡献。）"

#: ../../whatsnew/3.2.rst:1998
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.2.rst:2000
msgid ""
"All database modules now support the :meth:`!get` and :meth:`!setdefault` "
"methods."
msgstr "所有数据库模块现在均支持 :meth:`!get` 和 :meth:`!setdefault` 方法。"

#: ../../whatsnew/3.2.rst:2002
msgid "(Suggested by Ray Allen in :issue:`9523`.)"
msgstr "（由 Ray Allen 在 :issue:`9523` 中建议。）"

#: ../../whatsnew/3.2.rst:2005
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.2.rst:2007
msgid ""
"A new type, :class:`ctypes.c_ssize_t` represents the C :c:type:`ssize_t` "
"datatype."
msgstr "一个新类型 :class:`ctypes.c_ssize_t` 用来表示 C :c:type:`ssize_t` 数据类型。"

#: ../../whatsnew/3.2.rst:2010
msgid "site"
msgstr "site"

#: ../../whatsnew/3.2.rst:2012
msgid ""
"The :mod:`site` module has three new functions useful for reporting on the "
"details of a given Python installation."
msgstr ":mod:`site` 模块新增了三个用于报告给定 Python 安装版详细信息的函数。"

#: ../../whatsnew/3.2.rst:2015
msgid ""
":func:`~site.getsitepackages` lists all global site-packages directories."
msgstr ":func:`~site.getsitepackages` 列出所有全局 site-packages 目录。"

#: ../../whatsnew/3.2.rst:2017
msgid ""
":func:`~site.getuserbase` reports on the user's base directory where data "
"can be stored."
msgstr ":func:`~site.getuserbase` 报告可用来存储数据的用户基准目录。"

#: ../../whatsnew/3.2.rst:2020
msgid ""
":func:`~site.getusersitepackages` reveals the user-specific site-packages "
"directory path."
msgstr ":func:`~site.getusersitepackages` 将揭示用户专属的 site-packages 目录路径。"

#: ../../whatsnew/3.2.rst:2025
msgid ""
">>> import site\n"
">>> site.getsitepackages()\n"
"['/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages',\n"
" '/Library/Frameworks/Python.framework/Versions/3.2/lib/site-python',\n"
" '/Library/Python/3.2/site-packages']\n"
">>> site.getuserbase()\n"
"'/Users/raymondhettinger/Library/Python/3.2'\n"
">>> site.getusersitepackages()\n"
"'/Users/raymondhettinger/Library/Python/3.2/lib/python/site-packages'"
msgstr ""
">>> import site\n"
">>> site.getsitepackages()\n"
"['/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages',\n"
" '/Library/Frameworks/Python.framework/Versions/3.2/lib/site-python',\n"
" '/Library/Python/3.2/site-packages']\n"
">>> site.getuserbase()\n"
"'/Users/raymondhettinger/Library/Python/3.2'\n"
">>> site.getusersitepackages()\n"
"'/Users/raymondhettinger/Library/Python/3.2/lib/python/site-packages'"

#: ../../whatsnew/3.2.rst:2035
msgid ""
"Conveniently, some of site's functionality is accessible directly from the "
"command-line:"
msgstr "部分 site 功能可方便地直接通过命令行访问："

#: ../../whatsnew/3.2.rst:2038
msgid ""
"$ python -m site --user-base\n"
"/Users/raymondhettinger/.local\n"
"$ python -m site --user-site\n"
"/Users/raymondhettinger/.local/lib/python3.2/site-packages"
msgstr ""
"$ python -m site --user-base\n"
"/Users/raymondhettinger/.local\n"
"$ python -m site --user-site\n"
"/Users/raymondhettinger/.local/lib/python3.2/site-packages"

#: ../../whatsnew/3.2.rst:2045
msgid "(Contributed by Tarek Ziadé in :issue:`6693`.)"
msgstr "（由 Tarek Ziadé 在 :issue:`6693` 中贡献。）"

#: ../../whatsnew/3.2.rst:2048
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.2.rst:2050
msgid ""
"The new :mod:`sysconfig` module makes it straightforward to discover "
"installation paths and configuration variables that vary across platforms "
"and installations."
msgstr "新增的 :mod:`sysconfig` 模块使得发现依赖于不同系统平台和安装版的安装路径和配置变量更为简单直观。"

#: ../../whatsnew/3.2.rst:2054
msgid ""
"The module offers access simple access functions for platform and version "
"information:"
msgstr "该模块提供了对平台和版本信息获取函数的访问："

#: ../../whatsnew/3.2.rst:2057
msgid ""
":func:`~sysconfig.get_platform` returning values like *linux-i586* or "
"*macosx-10.6-ppc*."
msgstr ""
":func:`~sysconfig.get_platform` 将返回 *linux-i586* 或 *macosx-10.6-ppc* 形式的值。"

#: ../../whatsnew/3.2.rst:2059
msgid ""
":func:`~sysconfig.get_python_version` returns a Python version string such "
"as \"3.2\"."
msgstr ":func:`~sysconfig.get_python_version` 将返回 Python 版本字符串如 \"3.2\"。"

#: ../../whatsnew/3.2.rst:2062
msgid ""
"It also provides access to the paths and variables corresponding to one of "
"seven named schemes used by ``distutils``.  Those include *posix_prefix*, "
"*posix_home*, *posix_user*, *nt*, *nt_user*, *os2*, *os2_home*:"
msgstr ""
"它还提供了与 ``distutils`` 所使用的七个规范名称所对应的路径和变量的访问。 这包括 *posix_prefix*、 "
"*posix_home*、 *posix_user*、 *nt*、 *nt_user*、 *os2*、 *os2_home*:"

#: ../../whatsnew/3.2.rst:2066
msgid ""
":func:`~sysconfig.get_paths` makes a dictionary containing installation "
"paths for the current installation scheme."
msgstr ":func:`~sysconfig.get_paths` 返回一个包含当前安装方案安装路径的字典。"

#: ../../whatsnew/3.2.rst:2068
msgid ""
":func:`~sysconfig.get_config_vars` returns a dictionary of platform specific"
" variables."
msgstr ":func:`~sysconfig.get_config_vars` 返回一个包含平台特定变量的字典。"

#: ../../whatsnew/3.2.rst:2071
msgid "There is also a convenient command-line interface:"
msgstr "还有一个方便的命令行界面："

#: ../../whatsnew/3.2.rst:2073
msgid ""
"C:\\Python32>python -m sysconfig\n"
"Platform: \"win32\"\n"
"Python version: \"3.2\"\n"
"Current installation scheme: \"nt\"\n"
"\n"
"Paths:\n"
"        data = \"C:\\Python32\"\n"
"        include = \"C:\\Python32\\Include\"\n"
"        platinclude = \"C:\\Python32\\Include\"\n"
"        platlib = \"C:\\Python32\\Lib\\site-packages\"\n"
"        platstdlib = \"C:\\Python32\\Lib\"\n"
"        purelib = \"C:\\Python32\\Lib\\site-packages\"\n"
"        scripts = \"C:\\Python32\\Scripts\"\n"
"        stdlib = \"C:\\Python32\\Lib\"\n"
"\n"
"Variables:\n"
"        BINDIR = \"C:\\Python32\"\n"
"        BINLIBDEST = \"C:\\Python32\\Lib\"\n"
"        EXE = \".exe\"\n"
"        INCLUDEPY = \"C:\\Python32\\Include\"\n"
"        LIBDEST = \"C:\\Python32\\Lib\"\n"
"        SO = \".pyd\"\n"
"        VERSION = \"32\"\n"
"        abiflags = \"\"\n"
"        base = \"C:\\Python32\"\n"
"        exec_prefix = \"C:\\Python32\"\n"
"        platbase = \"C:\\Python32\"\n"
"        prefix = \"C:\\Python32\"\n"
"        projectbase = \"C:\\Python32\"\n"
"        py_version = \"3.2\"\n"
"        py_version_nodot = \"32\"\n"
"        py_version_short = \"3.2\"\n"
"        srcdir = \"C:\\Python32\"\n"
"        userbase = \"C:\\Documents and Settings\\Raymond\\Application Data\\Python\""
msgstr ""
"C:\\Python32>python -m sysconfig\n"
"Platform: \"win32\"\n"
"Python version: \"3.2\"\n"
"Current installation scheme: \"nt\"\n"
"\n"
"Paths:\n"
"        data = \"C:\\Python32\"\n"
"        include = \"C:\\Python32\\Include\"\n"
"        platinclude = \"C:\\Python32\\Include\"\n"
"        platlib = \"C:\\Python32\\Lib\\site-packages\"\n"
"        platstdlib = \"C:\\Python32\\Lib\"\n"
"        purelib = \"C:\\Python32\\Lib\\site-packages\"\n"
"        scripts = \"C:\\Python32\\Scripts\"\n"
"        stdlib = \"C:\\Python32\\Lib\"\n"
"\n"
"Variables:\n"
"        BINDIR = \"C:\\Python32\"\n"
"        BINLIBDEST = \"C:\\Python32\\Lib\"\n"
"        EXE = \".exe\"\n"
"        INCLUDEPY = \"C:\\Python32\\Include\"\n"
"        LIBDEST = \"C:\\Python32\\Lib\"\n"
"        SO = \".pyd\"\n"
"        VERSION = \"32\"\n"
"        abiflags = \"\"\n"
"        base = \"C:\\Python32\"\n"
"        exec_prefix = \"C:\\Python32\"\n"
"        platbase = \"C:\\Python32\"\n"
"        prefix = \"C:\\Python32\"\n"
"        projectbase = \"C:\\Python32\"\n"
"        py_version = \"3.2\"\n"
"        py_version_nodot = \"32\"\n"
"        py_version_short = \"3.2\"\n"
"        srcdir = \"C:\\Python32\"\n"
"        userbase = \"C:\\Documents and Settings\\Raymond\\Application Data\\Python\""

#: ../../whatsnew/3.2.rst:2110
msgid "(Moved out of Distutils by Tarek Ziadé.)"
msgstr "（由TarekZiadé 移出Distutils。）"

#: ../../whatsnew/3.2.rst:2113
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.2.rst:2115
msgid ""
"The :mod:`pdb` debugger module gained a number of usability improvements:"
msgstr ":mod:`pdb` 调试器模块获得了一些可用性改进："

#: ../../whatsnew/3.2.rst:2117
msgid ""
":file:`pdb.py` now has a ``-c`` option that executes commands as given in a "
":file:`.pdbrc` script file."
msgstr ":file:`pdb.py` 现在有一个 ``-c`` 选项，用于执行 :file:`.pdbrc` 脚本文件中给出的命令。"

#: ../../whatsnew/3.2.rst:2119
msgid ""
"A :file:`.pdbrc` script file can contain ``continue`` and ``next`` commands "
"that continue debugging."
msgstr "一个 :file:`.pdbrc` 脚本文件可以包含 ``continue`` 和 ``next`` 命令，用于继续调试。"

#: ../../whatsnew/3.2.rst:2121
msgid ""
"The :class:`~pdb.Pdb` class constructor now accepts a *nosigint* argument."
msgstr ":class:`~pdb.Pdb` 类构造函数现在接受一个 *nosigint* 参数。"

#: ../../whatsnew/3.2.rst:2122
msgid ""
"New commands: ``l(list)``, ``ll(long list)`` and ``source`` for listing "
"source code."
msgstr "新命令：``l(list)``、``ll(long list)`` 和 ``source`` 用于列出源代码。"

#: ../../whatsnew/3.2.rst:2124
msgid ""
"New commands: ``display`` and ``undisplay`` for showing or hiding the value "
"of an expression if it has changed."
msgstr "新命令：``display`` 和 ``undisplay`` 用于显示或隐藏表达式值的变化。"

#: ../../whatsnew/3.2.rst:2126
msgid ""
"New command: ``interact`` for starting an interactive interpreter containing"
" the global and local  names found in the current scope."
msgstr "新命令：``interact`` 用于启动一个包含当前作用域中全局和局部名称的交互式解释器。"

#: ../../whatsnew/3.2.rst:2128
msgid "Breakpoints can be cleared by breakpoint number."
msgstr "可以通过断点编号清除断点。"

#: ../../whatsnew/3.2.rst:2130
msgid "(Contributed by Georg Brandl, Antonio Cuni and Ilya Sandler.)"
msgstr "（由Georg Brandl、 Antonio Cuni 和 Ilya Sandler 贡献。）"

#: ../../whatsnew/3.2.rst:2133
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.2.rst:2135
msgid ""
"The :mod:`configparser` module was modified to improve usability and "
"predictability of the default parser and its supported INI syntax.  The old "
":class:`!ConfigParser` class was removed in favor of "
":class:`!SafeConfigParser` which has in turn been renamed to "
":class:`~configparser.ConfigParser`. Support for inline comments is now "
"turned off by default and section or option duplicates are not allowed in a "
"single configuration source."
msgstr ""
":mod:`configparser` 模块已被修改，以提高默认解析器的可用性和其支持的 INI 语法的可预测性。旧的 "
":class:`!ConfigParser` 类已被移除，改为 :class:`!SafeConfigParser`，后者已被重命名为 "
":class:`~configparser.ConfigParser`。内联注释支持现在默认关闭，并且单个配置源中不允许有节或选项重复。"

#: ../../whatsnew/3.2.rst:2142
msgid "Config parsers gained a new API based on the mapping protocol::"
msgstr "配置解析器获得了一个基于映射协议的新 API："

#: ../../whatsnew/3.2.rst:2144
msgid ""
">>> parser = ConfigParser()\n"
">>> parser.read_string(\"\"\"\n"
"... [DEFAULT]\n"
"... location = upper left\n"
"... visible = yes\n"
"... editable = no\n"
"... color = blue\n"
"...\n"
"... [main]\n"
"... title = Main Menu\n"
"... color = green\n"
"...\n"
"... [options]\n"
"... title = Options\n"
"... \"\"\")\n"
">>> parser['main']['color']\n"
"'green'\n"
">>> parser['main']['editable']\n"
"'no'\n"
">>> section = parser['options']\n"
">>> section['title']\n"
"'Options'\n"
">>> section['title'] = 'Options (editable: %(editable)s)'\n"
">>> section['title']\n"
"'Options (editable: no)'"
msgstr ""
">>> parser = ConfigParser()\n"
">>> parser.read_string(\"\"\"\n"
"... [DEFAULT]\n"
"... location = upper left\n"
"... visible = yes\n"
"... editable = no\n"
"... color = blue\n"
"...\n"
"... [main]\n"
"... title = Main Menu\n"
"... color = green\n"
"...\n"
"... [options]\n"
"... title = Options\n"
"... \"\"\")\n"
">>> parser['main']['color']\n"
"'green'\n"
">>> parser['main']['editable']\n"
"'no'\n"
">>> section = parser['options']\n"
">>> section['title']\n"
"'Options'\n"
">>> section['title'] = 'Options (editable: %(editable)s)'\n"
">>> section['title']\n"
"'Options (editable: no)'"

#: ../../whatsnew/3.2.rst:2170
msgid ""
"The new API is implemented on top of the classical API, so custom parser "
"subclasses should be able to use it without modifications."
msgstr "新 API 是在经典 API 之上实现的，因此自定义解析器子类应能够无修改地使用它。"

#: ../../whatsnew/3.2.rst:2173
msgid ""
"The INI file structure accepted by config parsers can now be customized. "
"Users can specify alternative option/value delimiters and comment prefixes, "
"change the name of the *DEFAULT* section or switch the interpolation syntax."
msgstr ""
"配置解析器接受的 INI 文件结构体现在可以自定义。用户可以指定替代的选项/值分隔符和注释前缀，更改 *DEFAULT* 部分的名称或切换插值语法。"

#: ../../whatsnew/3.2.rst:2177
msgid ""
"There is support for pluggable interpolation including an additional "
"interpolation handler :class:`~configparser.ExtendedInterpolation`::"
msgstr "支持可插拔插值，包括一个额外的插值处理程序 :class:`~configparser.ExtendedInterpolation`："

#: ../../whatsnew/3.2.rst:2180
msgid ""
">>> parser = ConfigParser(interpolation=ExtendedInterpolation())\n"
">>> parser.read_dict({'buildout': {'directory': '/home/ambv/zope9'},\n"
"...                   'custom': {'prefix': '/usr/local'}})\n"
">>> parser.read_string(\"\"\"\n"
"... [buildout]\n"
"... parts =\n"
"...   zope9\n"
"...   instance\n"
"... find-links =\n"
"...   ${buildout:directory}/downloads/dist\n"
"...\n"
"... [zope9]\n"
"... recipe = plone.recipe.zope9install\n"
"... location = /opt/zope\n"
"...\n"
"... [instance]\n"
"... recipe = plone.recipe.zope9instance\n"
"... zope9-location = ${zope9:location}\n"
"... zope-conf = ${custom:prefix}/etc/zope.conf\n"
"... \"\"\")\n"
">>> parser['buildout']['find-links']\n"
"'\\n/home/ambv/zope9/downloads/dist'\n"
">>> parser['instance']['zope-conf']\n"
"'/usr/local/etc/zope.conf'\n"
">>> instance = parser['instance']\n"
">>> instance['zope-conf']\n"
"'/usr/local/etc/zope.conf'\n"
">>> instance['zope9-location']\n"
"'/opt/zope'"
msgstr ""
">>> parser = ConfigParser(interpolation=ExtendedInterpolation())\n"
">>> parser.read_dict({'buildout': {'directory': '/home/ambv/zope9'},\n"
"...                   'custom': {'prefix': '/usr/local'}})\n"
">>> parser.read_string(\"\"\"\n"
"... [buildout]\n"
"... parts =\n"
"...   zope9\n"
"...   instance\n"
"... find-links =\n"
"...   ${buildout:directory}/downloads/dist\n"
"...\n"
"... [zope9]\n"
"... recipe = plone.recipe.zope9install\n"
"... location = /opt/zope\n"
"...\n"
"... [instance]\n"
"... recipe = plone.recipe.zope9instance\n"
"... zope9-location = ${zope9:location}\n"
"... zope-conf = ${custom:prefix}/etc/zope.conf\n"
"... \"\"\")\n"
">>> parser['buildout']['find-links']\n"
"'\\n/home/ambv/zope9/downloads/dist'\n"
">>> parser['instance']['zope-conf']\n"
"'/usr/local/etc/zope.conf'\n"
">>> instance = parser['instance']\n"
">>> instance['zope-conf']\n"
"'/usr/local/etc/zope.conf'\n"
">>> instance['zope9-location']\n"
"'/opt/zope'"

#: ../../whatsnew/3.2.rst:2210
msgid ""
"A number of smaller features were also introduced, like support for "
"specifying encoding in read operations, specifying fallback values for get-"
"functions, or reading directly from dictionaries and strings."
msgstr ""
"此外还引入了一些较小的功能特性，例如：支持在读取操作中指定编码格式、为获取函数（get-"
"functions）指定回退值，以及直接从字典和字符串中读取数据。"

#: ../../whatsnew/3.2.rst:2214
msgid "(All changes contributed by Łukasz Langa.)"
msgstr "（所有修改均由 Łukasz Langa 贡献。）"

#: ../../whatsnew/3.2.rst:2219
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.2.rst:2221
msgid ""
"A number of usability improvements were made for the :mod:`urllib.parse` "
"module."
msgstr "对 :mod:`urllib.parse` 模块进行了一些可用性改进。"

#: ../../whatsnew/3.2.rst:2223
msgid ""
"The :func:`~urllib.parse.urlparse` function now supports `IPv6 "
"<https://en.wikipedia.org/wiki/IPv6>`_ addresses as described in "
":rfc:`2732`:"
msgstr ""
":func:`~urllib.parse.urlparse` 函数现在支持 `IPv6 "
"<https://en.wikipedia.org/wiki/IPv6>`_ 地址，如 :rfc:`2732` 中所述："

#: ../../whatsnew/3.2.rst:2235
msgid ""
"The :func:`~urllib.parse.urldefrag` function now returns a :term:`named "
"tuple`::"
msgstr ":func:`~urllib.parse.urldefrag` 函数现在返回一个 :term:`named tuple`::"

#: ../../whatsnew/3.2.rst:2237
msgid ""
">>> r = urllib.parse.urldefrag('http://python.org/about/#target')\n"
">>> r\n"
"DefragResult(url='http://python.org/about/', fragment='target')\n"
">>> r[0]\n"
"'http://python.org/about/'\n"
">>> r.fragment\n"
"'target'"
msgstr ""
">>> r = urllib.parse.urldefrag('http://python.org/about/#target')\n"
">>> r\n"
"DefragResult(url='http://python.org/about/', fragment='target')\n"
">>> r[0]\n"
"'http://python.org/about/'\n"
">>> r.fragment\n"
"'target'"

#: ../../whatsnew/3.2.rst:2245
msgid ""
"And, the :func:`~urllib.parse.urlencode` function is now much more flexible,"
" accepting either a string or bytes type for the *query* argument.  If it is"
" a string, then the *safe*, *encoding*, and *error* parameters are sent to "
":func:`~urllib.parse.quote_plus` for encoding::"
msgstr ""
"此外，:func:`~urllib.parse.urlencode` 函数现在更加灵活，可以接受字符串或字节类型作为 *query* "
"参数。如果是字符串，那么 *safe*、*encoding* 和 *error* 参数将被传递给 "
":func:`~urllib.parse.quote_plus` 进行编码::"

#: ../../whatsnew/3.2.rst:2250
msgid ""
">>> urllib.parse.urlencode([\n"
"...      ('type', 'telenovela'),\n"
"...      ('name', '¿Dónde Está Elisa?')],\n"
"...      encoding='latin-1')\n"
"'type=telenovela&name=%BFD%F3nde+Est%E1+Elisa%3F'"
msgstr ""
">>> urllib.parse.urlencode([\n"
"...      ('type', 'telenovela'),\n"
"...      ('name', '¿Dónde Está Elisa?')],\n"
"...      encoding='latin-1')\n"
"'type=telenovela&name=%BFD%F3nde+Est%E1+Elisa%3F'"

#: ../../whatsnew/3.2.rst:2256
msgid ""
"As detailed in :ref:`parsing-ascii-encoded-bytes`, all the "
":mod:`urllib.parse` functions now accept ASCII-encoded byte strings as "
"input, so long as they are not mixed with regular strings.  If ASCII-encoded"
" byte strings are given as parameters, the return types will also be an "
"ASCII-encoded byte strings:"
msgstr ""
"如 :ref:`parsing-ascii-encoded-bytes` 中所述，所有 :mod:`urllib.parse` 函数现在都接受 "
"ASCII 编码的字节字符串作为输入，只要它们不与普通字符串混合。如果给定 ASCII 编码的字节字符串作为参数，返回类型也将是 ASCII "
"编码的字节字符串:"

#: ../../whatsnew/3.2.rst:2265
msgid ""
"(Work by Nick Coghlan, Dan Mahn, and Senthil Kumaran in :issue:`2987`, "
":issue:`5468`, and :issue:`9873`.)"
msgstr ""
"（由 Nick Coghlan、Dan Mahn 和 Senthil Kumaran 在 :issue:`2987`、:issue:`5468` 和 "
":issue:`9873` 中提供。）"

#: ../../whatsnew/3.2.rst:2269
msgid "mailbox"
msgstr "mailbox"

#: ../../whatsnew/3.2.rst:2271
msgid ""
"Thanks to a concerted effort by R. David Murray, the :mod:`mailbox` module "
"has been fixed for Python 3.2.  The challenge was that mailbox had been "
"originally designed with a text interface, but email messages are best "
"represented with :class:`bytes` because various parts of a message may have "
"different encodings."
msgstr ""
"由于 R. David Murray 的共同努力，:mod:`mailbox` 模块已修复以适用于 Python 3.2。挑战在于 mailbox "
"最初是使用文本接口设计的，但电子邮件消息最好用 :class:`bytes` 表示，因为消息的不同部分可能具有不同的编码。"

#: ../../whatsnew/3.2.rst:2276
msgid ""
"The solution harnessed the :mod:`email` package's binary support for parsing"
" arbitrary email messages.  In addition, the solution required a number of "
"API changes."
msgstr "解决方案利用了 :mod:`email` 包的二进制支持来解析任意电子邮件消息。此外，解决方案还需要进行一些 API 更改。"

#: ../../whatsnew/3.2.rst:2280
msgid ""
"As expected, the :meth:`~mailbox.Mailbox.add` method for "
":class:`mailbox.Mailbox` objects now accepts binary input."
msgstr ""
"如预期的那样，:class:`mailbox.Mailbox` 对象的 :meth:`~mailbox.Mailbox.add` "
"方法现在接受二进制输入。"

#: ../../whatsnew/3.2.rst:2283
msgid ""
":class:`~io.StringIO` and text file input are deprecated.  Also, string "
"input will fail early if non-ASCII characters are used.  Previously it would"
" fail when the email was processed in a later step."
msgstr ""
":class:`~io.StringIO` 和文本文件输入已被弃用。此外，如果使用非 ASCII "
"字符，字符串输入将提前失败。此前它会在后续步骤处理电子邮件时失败。"

#: ../../whatsnew/3.2.rst:2287
msgid ""
"There is also support for binary output.  The "
":meth:`~mailbox.Mailbox.get_file` method now returns a file in the binary "
"mode (where it used to incorrectly set the file to text-mode).  There is "
"also a new :meth:`~mailbox.Mailbox.get_bytes` method that returns a "
":class:`bytes` representation of a message corresponding to a given *key*."
msgstr ""
"还支持二进制输出。:meth:`~mailbox.Mailbox.get_file` "
"方法现在以二进制模式返回文件（以前错误地将文件设置为文本模式）。还有一个新的 :meth:`~mailbox.Mailbox.get_bytes` "
"方法，它返回与给定 *key* 对应的 :class:`bytes` 消息表示。"

#: ../../whatsnew/3.2.rst:2293
msgid ""
"It is still possible to get non-binary output using the old API's "
":meth:`~mailbox.Mailbox.get_string` method, but that approach is not very "
"useful.  Instead, it is best to extract messages from a "
":class:`~mailbox.Message` object or to load them from binary input."
msgstr ""
"使用旧API的 :meth:`~mailbox.Mailbox.get_string` "
"方法仍然可以获得非二进制输出，但这种方法并不非常有用。相反，最好是从 :class:`~mailbox.Message` "
"对象中提取消息，或者从二进制输入中加载它们。"

#: ../../whatsnew/3.2.rst:2298
msgid ""
"(Contributed by R. David Murray, with efforts from Steffen Daode Nurpmeso "
"and an initial patch by Victor Stinner in :issue:`9124`.)"
msgstr ""
"（由R. David Murray贡献，Steffen Daode Nurpmeso参与努力，Victor Stinner在 :issue:`9124`"
" 中提供初始补丁。）"

#: ../../whatsnew/3.2.rst:2302
msgid "turtledemo"
msgstr "turtledemo"

#: ../../whatsnew/3.2.rst:2304
msgid ""
"The demonstration code for the :mod:`turtle` module was moved from the "
"*Demo* directory to main library.  It includes over a dozen sample scripts "
"with lively displays.  Being on :data:`sys.path`, it can now be run directly"
" from the command-line:"
msgstr ""
":mod:`turtle` 模块的演示代码已从 *Demo* 目录移至主库。它包含十多个带有生动显示的示例脚本。由于现在位于 "
":data:`sys.path` 中，可以直接从命令行运行："

#: ../../whatsnew/3.2.rst:2309
msgid "$ python -m turtledemo"
msgstr "$ python -m turtledemo"

#: ../../whatsnew/3.2.rst:2313
msgid ""
"(Moved from the Demo directory by Alexander Belopolsky in :issue:`10199`.)"
msgstr "（由Alexander Belopolsky从Demo目录移至主库，见:issue:`10199`。）"

#: ../../whatsnew/3.2.rst:2316
msgid "Multi-threading"
msgstr "多线程"

#: ../../whatsnew/3.2.rst:2318
msgid ""
"The mechanism for serializing execution of concurrently running Python "
"threads (generally known as the :term:`GIL` or Global Interpreter Lock) has "
"been rewritten.  Among the objectives were more predictable switching "
"intervals and reduced overhead due to lock contention and the number of "
"ensuing system calls.  The notion of a \"check interval\" to allow thread "
"switches has been abandoned and replaced by an absolute duration expressed "
"in seconds.  This parameter is tunable through "
":func:`sys.setswitchinterval`. It currently defaults to 5 milliseconds."
msgstr ""
"用于序列化并发运行的Python线程的机制（通常称为 :term:`GIL` "
"或全局解释器锁）已被重写。此次改进的目标包括：实现更可预测的线程切换间隔，以及减少因锁竞争和后续系统调用数量导致的开销。原有的\"检查间隔\"（用于控制线程切换的机制）概念已被废弃，取而代之的是以秒为单位的绝对时长。该参数可通过"
" :func:`sys.setswitchinterval` 进行调节，当前默认值为5毫秒。"

#: ../../whatsnew/3.2.rst:2327
msgid ""
"Additional details about the implementation can be read from a `python-dev "
"mailing-list message <https://mail.python.org/pipermail/python-"
"dev/2009-October/093321.html>`_ (however, \"priority requests\" as exposed "
"in this message have not been kept for inclusion)."
msgstr ""
"有关该实现的更多详细信息可以从 `python-dev 邮件列表消息 "
"<https://mail.python.org/pipermail/python-dev/2009-October/093321.html>`_ "
"中阅读（但需注意：该消息中提到的\"优先级请求\"机制并未被最终采纳）。"

#: ../../whatsnew/3.2.rst:2333
msgid "(Contributed by Antoine Pitrou.)"
msgstr "（由 Antoine Pitrou 贡献。）"

#: ../../whatsnew/3.2.rst:2335
msgid ""
"Regular and recursive locks now accept an optional *timeout* argument to "
"their :meth:`~threading.Lock.acquire` method.  (Contributed by Antoine "
"Pitrou; :issue:`7316`.)"
msgstr ""
"常规和递归锁现在在其 :meth:`~threading.Lock.acquire` 方法中接受一个可选的 *timeout* 参数。（由 "
"Antoine Pitrou 在 :issue:`7316` 中贡献。）"

#: ../../whatsnew/3.2.rst:2339
msgid ""
"Similarly, :meth:`threading.Semaphore.acquire` also gained a *timeout* "
"argument.  (Contributed by Torsten Landschoff; :issue:`850728`.)"
msgstr ""
"同样，:meth:`threading.Semaphore.acquire` 也增加了一个 *timeout* 参数。（由 Torsten "
"Landschoff 在 :issue:`850728` 中贡献。)"

#: ../../whatsnew/3.2.rst:2342
msgid ""
"Regular and recursive lock acquisitions can now be interrupted by signals on"
" platforms using Pthreads.  This means that Python programs that deadlock "
"while acquiring locks can be successfully killed by repeatedly sending "
"SIGINT to the process (by pressing :kbd:`Ctrl+C` in most shells). "
"(Contributed by Reid Kleckner; :issue:`8844`.)"
msgstr ""
"在使用 Pthreads 的平台上，常规锁和递归锁的获取操作现在可以被信号中断。这意味着Python 程序在获取锁时发生死锁，可以通过反复向该进程发送 "
"SIGINT 信号（在大多数 shell 中按下 :kbd:`Ctrl+C`）来成功终止程序。（由 Reid Kleckner 在 "
":issue:`8844` 中贡献。）"

#: ../../whatsnew/3.2.rst:2350
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.2.rst:2352
msgid "A number of small performance enhancements have been added:"
msgstr "添加了一些小的性能提升："

#: ../../whatsnew/3.2.rst:2354
msgid ""
"Python's peephole optimizer now recognizes patterns such ``x in {1, 2, 3}`` "
"as being a test for membership in a set of constants.  The optimizer recasts"
" the :class:`set` as a :class:`frozenset` and stores the pre-built constant."
msgstr ""
"Python 的窥孔优化器（peephole optimizer）现在能够识别诸如 ``x in {1, 2, 3}`` "
"这样的模式，将其判定为对常量集合的成员资格测试。 优化器会将 :class:`set` 重新转换为 :class:`frozenset` "
"并存储这个预先构建的常量。"

#: ../../whatsnew/3.2.rst:2358
msgid ""
"Now that the speed penalty is gone, it is practical to start writing "
"membership tests using set-notation.  This style is both semantically clear "
"and operationally fast::"
msgstr "既然速度开销已不复存在，现在可以放心地开始使用集合表示法来编写成员资格测试了。这种写法不仅语义清晰，而且执行高效："

#: ../../whatsnew/3.2.rst:2362
msgid ""
"extension = name.rpartition('.')[2]\n"
"if extension in {'xml', 'html', 'xhtml', 'css'}:\n"
"    handle(name)"
msgstr ""
"extension = name.rpartition('.')[2]\n"
"if extension in {'xml', 'html', 'xhtml', 'css'}:\n"
"    handle(name)"

#: ../../whatsnew/3.2.rst:2366
msgid ""
"(Patch and additional tests contributed by Dave Malcolm; :issue:`6690`)."
msgstr "（补丁和附加测试由 Dave Malcolm 在 :issue:`6690` 中贡献）。"

#: ../../whatsnew/3.2.rst:2368
msgid ""
"Serializing and unserializing data using the :mod:`pickle` module is now "
"several times faster."
msgstr "使用 :mod:`pickle` 模块序列化和反序列化数据的速度现在快了几倍。"

#: ../../whatsnew/3.2.rst:2371
msgid ""
"(Contributed by Alexandre Vassalotti, Antoine Pitrou and the Unladen Swallow"
" team in :issue:`9410` and :issue:`3873`.)"
msgstr ""
"（由 Alexandre Vassalotti、 Antoine Pitrou 和 Unladen Swallow 团队在 :issue:`9410` "
"和 :issue:`3873` 中贡献。）"

#: ../../whatsnew/3.2.rst:2374
msgid ""
"The `Timsort algorithm <https://en.wikipedia.org/wiki/Timsort>`_ used in "
":meth:`list.sort` and :func:`sorted` now runs faster and uses less memory "
"when called with a :term:`key function`.  Previously, every element of a "
"list was wrapped with a temporary object that remembered the key value "
"associated with each element.  Now, two arrays of keys and values are sorted"
" in parallel.  This saves the memory consumed by the sort wrappers, and it "
"saves time lost to delegating comparisons."
msgstr ""
"在 :meth:`list.sort` 和 :func:`sorted` 中使用的 `Timsort 算法 "
"<https://en.wikipedia.org/wiki/Timsort>`_ 现在在有 :term:`key function` "
"的情况下运行更快且使用更少内存。 之前，列表的每个元素都会被一个临时对象包裹，该对象记住与每个元素关联的键值。 现在，键和值的两个数组并行排序。 "
"这节省了排序包装器消耗的内存，并节省了委托比较所花费的时间。"

#: ../../whatsnew/3.2.rst:2382
msgid "(Patch by Daniel Stutzbach in :issue:`9915`.)"
msgstr "（由 Daniel Stutzbach 在 :issue:`9915` 中提交补丁。）"

#: ../../whatsnew/3.2.rst:2384
msgid ""
"JSON decoding performance is improved and memory consumption is reduced "
"whenever the same string is repeated for multiple keys.  Also, JSON encoding"
" now uses the C speedups when the ``sort_keys`` argument is true."
msgstr ""
"JSON 解码性能得到提升，且当同一字符串被用作多个键值时内存消耗降低。此外，当 ``sort_keys`` 参数为 True 时，JSON "
"编码现会启用 C 语言加速模块。"

#: ../../whatsnew/3.2.rst:2388
msgid ""
"(Contributed by Antoine Pitrou in :issue:`7451` and by Raymond Hettinger and"
" Antoine Pitrou in :issue:`10314`.)"
msgstr ""
"（由Antoine Pitrou 在 :issue:`7451` 中贡献，由 Raymond Hettinger 和 Antoine Pitrou 在 "
":issue:`10314` 中贡献。）"

#: ../../whatsnew/3.2.rst:2391
msgid ""
"Recursive locks (created with the :func:`threading.RLock` API) now benefit "
"from a C implementation which makes them as fast as regular locks, and "
"between 10x and 15x faster than their previous pure Python implementation."
msgstr ""
"递归锁（使用 :func:`threading.RLock` API 创建）现在受益于 C 实现，这使得它们与常规锁一样快，并且比之前的纯 Python"
" 实现快 10 到 15 倍。"

#: ../../whatsnew/3.2.rst:2395
msgid "(Contributed by Antoine Pitrou; :issue:`3001`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`3001` 中贡献。）"

#: ../../whatsnew/3.2.rst:2397
msgid ""
"The fast-search algorithm in stringlib is now used by the "
":meth:`~str.split`, :meth:`~str.rsplit`, :meth:`~str.splitlines` and "
":meth:`~str.replace` methods on :class:`bytes`, :class:`bytearray` and "
":class:`str` objects. Likewise, the algorithm is also used by "
":meth:`~str.rfind`, :meth:`~str.rindex`, :meth:`~str.rsplit` and "
":meth:`~str.rpartition`."
msgstr ""
"stringlib 中的快速搜索算法现在被 :class:`bytes`、:class:`bytearray` 和 :class:`str` 对象的 "
":meth:`~str.split`、:meth:`~str.rsplit`、:meth:`~str.splitlines` 和 "
":meth:`~str.replace` 方法使用。同样，该算法也被 "
":meth:`~str.rfind`、:meth:`~str.rindex`、:meth:`~str.rsplit` 和 "
":meth:`~str.rpartition` 方法使用。"

#: ../../whatsnew/3.2.rst:2403
msgid "(Patch by Florent Xicluna in :issue:`7622` and :issue:`7462`.)"
msgstr "（由 Florent Xicluna 在 :issue:`7622` 和 :issue:`7462` 中提交补丁。）"

#: ../../whatsnew/3.2.rst:2406
msgid ""
"Integer to string conversions now work two \"digits\" at a time, reducing "
"the number of division and modulo operations."
msgstr "整型转字符串操作现在改为每次处理两个\"数字位\"，从而减少了除法和取模运算的次数。"

#: ../../whatsnew/3.2.rst:2409
msgid "(:issue:`6713` by Gawain Bolton, Mark Dickinson, and Victor Stinner.)"
msgstr ""
"（由 Gawain Bolton、Mark Dickinson 和 Victor Stinner 在 :issue:`6713` 中提交。）"

#: ../../whatsnew/3.2.rst:2411
msgid ""
"There were several other minor optimizations. Set differencing now runs "
"faster when one operand is much larger than the other (patch by Andress "
"Bennetts in :issue:`8685`).  The :meth:`!array.repeat` method has a faster "
"implementation (:issue:`1569291` by Alexander Belopolsky). The "
":class:`~http.server.BaseHTTPRequestHandler` has more efficient buffering "
"(:issue:`3709` by Andrew Schaaf).  The :func:`operator.attrgetter` function "
"has been sped-up (:issue:`10160` by Christos Georgiou).  And "
":class:`~configparser.ConfigParser` loads multi-line arguments a bit faster "
"(:issue:`7113` by Łukasz Langa)."
msgstr ""
"还进行了其他一些小的优化。当一个操作数远大于另一个时，集合差分现在运行得更快（由 Andress Bennetts 在 :issue:`8685` "
"中提交补丁）。:meth:`!array.repeat` 方法有了更快的实现（由 Alexander Belopolsky 在 "
":issue:`1569291` 中提交）。:class:`~http.server.BaseHTTPRequestHandler` 的缓冲更加高效（由"
" Andrew Schaaf 在 :issue:`3709` 中提交）。:func:`operator.attrgetter` 函数的速度得到了提升（由"
" Christos Georgiou 在 :issue:`10160` 中提交）。:class:`~configparser.ConfigParser`"
" 加载多行参数的速度也有所提高（由 Łukasz Langa 在 :issue:`7113` 中提交）。"

#: ../../whatsnew/3.2.rst:2422
msgid "Unicode"
msgstr "Unicode"

#: ../../whatsnew/3.2.rst:2424
msgid ""
"Python has been updated to `Unicode 6.0.0 "
"<https://unicode.org/versions/Unicode6.0.0/>`_.  The update to the standard "
"adds over 2,000 new characters including `emoji "
"<https://en.wikipedia.org/wiki/Emoji>`_ symbols which are important for "
"mobile phones."
msgstr ""
"Python 已更新到 `Unicode 6.0.0 "
"<https://unicode.org/versions/Unicode6.0.0/>`_。此次更新新增了超过 2000 个字符，包括对手机重要的 "
"`emoji <https://en.wikipedia.org/wiki/Emoji>`_ 符号。"

#: ../../whatsnew/3.2.rst:2429
msgid ""
"In addition, the updated standard has altered the character properties for "
"two Kannada characters (U+0CF1, U+0CF2) and one New Tai Lue numeric "
"character (U+19DA), making the former eligible for use in identifiers while "
"disqualifying the latter.  For more information, see `Unicode Character "
"Database Changes "
"<https://www.unicode.org/versions/Unicode6.0.0/#Database_Changes>`_."
msgstr ""
"此外，更新后的标准修改了两个卡纳达文字符（U+0CF1、U+0CF2）和一个新傣仂数字字符（U+19DA）的字符属性：前者现在可用于标识符，而后者则不再符合标识符使用要求。更多详细信息请参阅"
" `Unicode字符数据库变更说明 "
"<https://www.unicode.org/versions/Unicode6.0.0/#Database_Changes>`_。"

#: ../../whatsnew/3.2.rst:2437
msgid "Codecs"
msgstr "编解码器"

#: ../../whatsnew/3.2.rst:2439
msgid "Support was added for *cp720* Arabic DOS encoding (:issue:`1616979`)."
msgstr "添加了对 *cp720* 阿拉伯 DOS 编码的支持（:issue:`1616979`）。"

#: ../../whatsnew/3.2.rst:2441
msgid ""
"MBCS encoding no longer ignores the error handler argument. In the default "
"strict mode, it raises an :exc:`UnicodeDecodeError` when it encounters an "
"undecodable byte sequence and an :exc:`UnicodeEncodeError` for an "
"unencodable character."
msgstr ""
"MBCS 编码不再忽略错误处理程序参数。在默认的严格模式下，当遇到无法解码的字节序列时，它会引发 :exc:`UnicodeDecodeError` "
"异常；当遇到无法编码的字符时，会引发 :exc:`UnicodeEncodeError` 异常。"

#: ../../whatsnew/3.2.rst:2446
msgid ""
"The MBCS codec supports ``'strict'`` and ``'ignore'`` error handlers for "
"decoding, and ``'strict'`` and ``'replace'`` for encoding."
msgstr ""
"多字节字符集编解码器（MBCS codec）在解码时支持 ``'strict'`` (严格模式) 和 ``'ignore'`` (忽略模式) "
"两种错误处理器，在编码时则支持 ``'strict'`` (严格模式) 和 ``'replace'`` (替换模式)。"

#: ../../whatsnew/3.2.rst:2449
msgid ""
"To emulate Python3.1 MBCS encoding, select the ``'ignore'`` handler for "
"decoding and the ``'replace'`` handler for encoding."
msgstr ""
"若需模拟 Python 3.1 版本的 MBCS 编码行为，应在解码时选用 ``'ignore'`` (忽略模式) 错误处理器，而在编码时选用 "
"``'replace'`` (替换模式) 错误处理器。"

#: ../../whatsnew/3.2.rst:2452
msgid ""
"On Mac OS X, Python decodes command line arguments with ``'utf-8'`` rather "
"than the locale encoding."
msgstr "在 Mac OS X 上，Python 使用 ``'utf-8'`` 而不是区域设置编码来解码命令行参数。"

#: ../../whatsnew/3.2.rst:2455
msgid ""
"By default, :mod:`tarfile` uses ``'utf-8'`` encoding on Windows (instead of "
"``'mbcs'``) and the ``'surrogateescape'`` error handler on all operating "
"systems."
msgstr ""
"默认情况下，:mod:`tarfile` 在 Windows 上使用 ``'utf-8'`` 编码格式 (而不是 ``'mbcs'``) "
"并在所有操作系统上使用 ``'surrogateescape'`` 错误处理器。"

#: ../../whatsnew/3.2.rst:2461
msgid "Documentation"
msgstr "文档"

#: ../../whatsnew/3.2.rst:2463
msgid "The documentation continues to be improved."
msgstr "文档继续得到改进。"

#: ../../whatsnew/3.2.rst:2465
msgid ""
"A table of quick links has been added to the top of lengthy sections such as"
" :ref:`built-in-funcs`.  In the case of :mod:`itertools`, the links are "
"accompanied by tables of cheatsheet-style summaries to provide an overview "
"and memory jog without having to read all of the docs."
msgstr ""
"在长篇幅的章节（如 :ref:`built-in-funcs`）顶部添加了一个快速链接表。以 :mod:`itertools` "
"为例，这些链接旁边附有速查表风格的摘要表格，无需通读完整文档即可快速掌握要点、唤醒记忆。"

#: ../../whatsnew/3.2.rst:2470
msgid ""
"In some cases, the pure Python source code can be a helpful adjunct to the "
"documentation, so now many modules now feature quick links to the latest "
"version of the source code.  For example, the :mod:`functools` module "
"documentation has a quick link at the top labeled:"
msgstr ""
"在某些情况下，纯 Python "
"源代码可以作为文档的有益补充，因此现在许多模块都提供了指向最新版本源代码的快速链接。例如，:mod:`functools` "
"模块文档顶部有一个快速链接，标记为："

#: ../../whatsnew/3.2.rst:2475
msgid "**Source code** :source:`Lib/functools.py`."
msgstr "**源代码** :source:`Lib/functools.py`。"

#: ../../whatsnew/3.2.rst:2477
msgid ""
"(Contributed by Raymond Hettinger; see `rationale "
"<https://rhettinger.wordpress.com/2011/01/28/open-your-source-more/>`_.)"
msgstr ""
"（由 Raymond Hettinger 贡献，参见 `rationale "
"<https://rhettinger.wordpress.com/2011/01/28/open-your-source-more/>`_。）"

#: ../../whatsnew/3.2.rst:2480
msgid ""
"The docs now contain more examples and recipes.  In particular, :mod:`re` "
"module has an extensive section, :ref:`re-examples`.  Likewise, the "
":mod:`itertools` module continues to be updated with new :ref:`itertools-"
"recipes`."
msgstr ""
"文档现在包含更多示例和配方。 特别是 :mod:`re` 模块有一个扩展章节，:ref:`re-examples`。 "
"同样，:mod:`itertools` 模块继续更新了新的 :ref:`itertools-recipes`。"

#: ../../whatsnew/3.2.rst:2485
msgid ""
"The :mod:`datetime` module now has an auxiliary implementation in pure "
"Python. No functionality was changed.  This just provides an easier-to-read "
"alternate implementation."
msgstr ":mod:`datetime` 模块现在有一个纯 Python 的辅助实现。功能没有变化。这只是为了提供一个更易读的替代实现。"

#: ../../whatsnew/3.2.rst:2489
msgid "(Contributed by Alexander Belopolsky in :issue:`9528`.)"
msgstr "（由 Alexander Belopolsky 在 :issue:`9528` 中贡献。）"

#: ../../whatsnew/3.2.rst:2491
msgid ""
"The unmaintained :file:`Demo` directory has been removed.  Some demos were "
"integrated into the documentation, some were moved to the :file:`Tools/demo`"
" directory, and others were removed altogether."
msgstr ""
"未维护的 :file:`Demo` 目录已被删除。一些演示被整合到文档中，一些被移动到 :file:`Tools/demo` 目录，其他的则被完全删除。"

#: ../../whatsnew/3.2.rst:2495
msgid "(Contributed by Georg Brandl in :issue:`7962`.)"
msgstr "（由 Georg Brandl 在 :issue:`7962` 中贡献）"

#: ../../whatsnew/3.2.rst:2499
msgid "IDLE"
msgstr "IDLE"

#: ../../whatsnew/3.2.rst:2501
msgid ""
"The format menu now has an option to clean source files by stripping "
"trailing whitespace."
msgstr "格式菜单现在有一个选项，用于通过删除尾部空格来清理源文件。"

#: ../../whatsnew/3.2.rst:2504
msgid "(Contributed by Raymond Hettinger; :issue:`5150`.)"
msgstr "（由 Raymond Hettinger 在 :issue:`5150` 中贡献。）"

#: ../../whatsnew/3.2.rst:2506
msgid "IDLE on Mac OS X now works with both Carbon AquaTk and Cocoa AquaTk."
msgstr "Mac OS X 上的 IDLE 现在既支持 Carbon AquaTk 也支持 Cocoa AquaTk。"

#: ../../whatsnew/3.2.rst:2508
msgid ""
"(Contributed by Kevin Walzer, Ned Deily, and Ronald Oussoren; "
":issue:`6075`.)"
msgstr "（由 Kevin Walzer、Ned Deily 和 Ronald Oussoren 在 :issue:`6075` 中贡献。）"

#: ../../whatsnew/3.2.rst:2511
msgid "Code Repository"
msgstr "代码库"

#: ../../whatsnew/3.2.rst:2513
msgid ""
"In addition to the existing Subversion code repository at "
"https://svn.python.org there is now a `Mercurial <https://www.mercurial-"
"scm.org/>`_ repository at https://hg.python.org/\\ ."
msgstr ""
"除了现有的 Subversion 代码仓库位于 https://svn.python.org 外，现在还有一个 `Mercurial "
"<https://www.mercurial-scm.org/>`_ 仓库位于 https://hg.python.org/。"

#: ../../whatsnew/3.2.rst:2517
msgid ""
"After the 3.2 release, there are plans to switch to Mercurial as the primary"
" repository.  This distributed version control system should make it easier "
"for members of the community to create and share external changesets.  See "
":pep:`385` for details."
msgstr ""
"在 3.2 版本发布后，计划将 Mercurial 作为主要仓库。这种分布式版本控制系统应使社区成员更容易创建和共享外部更改集。详见 "
":pep:`385`。"

#: ../../whatsnew/3.2.rst:2522
msgid ""
"To learn to use the new version control system, see the `Quick Start "
"<https://www.mercurial-scm.org/wiki/QuickStart>`_ or the `Guide to Mercurial"
" Workflows <https://www.mercurial-scm.org/guide>`_."
msgstr ""
"要学习使用新的版本控制系统，请参阅 `快速入门 <https://www.mercurial-scm.org/wiki/QuickStart>`_ 或 "
"`Mercurial工作流指南 <https://www.mercurial-scm.org/guide>`_。"

#: ../../whatsnew/3.2.rst:2528
msgid "Build and C API Changes"
msgstr "构建和 C API 的改变"

#: ../../whatsnew/3.2.rst:2530
msgid "Changes to Python's build process and to the C API include:"
msgstr "针对 Python 构建过程和 C API 的改变包括:"

#: ../../whatsnew/3.2.rst:2532
msgid ""
"The *idle*, *pydoc* and *2to3* scripts are now installed with a version-"
"specific suffix on ``make altinstall`` (:issue:`10679`)."
msgstr ""
"现在 *idle*、 *pydoc* 和 *2to3* 脚本的安装将在 ``make altinstall`` 中附带特定版本的后缀 "
"(:issue:`10679`)。"

#: ../../whatsnew/3.2.rst:2535
msgid ""
"The C functions that access the Unicode Database now accept and return "
"characters from the full Unicode range, even on narrow unicode builds "
"(Py_UNICODE_TOLOWER, Py_UNICODE_ISDECIMAL, and others).  A visible "
"difference in Python is that :func:`unicodedata.numeric` now returns the "
"correct value for large code points, and :func:`repr` may consider more "
"characters as printable."
msgstr ""
"访问 Unicode 数据库的 C 函数现在接受并返回完整 Unicode 范围内的字符，即使在窄 Unicode "
"构建中也是如此（Py_UNICODE_TOLOWER、Py_UNICODE_ISDECIMAL 等）。在 Python 中可见的区别是 "
":func:`unicodedata.numeric` 现在为大代码点返回正确的值，而 :func:`repr` 可能有更多字符被视为可打印。"

#: ../../whatsnew/3.2.rst:2542
msgid ""
"(Reported by Bupjoe Lee and fixed by Amaury Forgeot D'Arc; :issue:`5127`.)"
msgstr "（由 Bupjoe Lee 报告，Amaury Forgeot D'Arc 修复；参见 :issue:`5127` 。）"

#: ../../whatsnew/3.2.rst:2544
msgid ""
"Computed gotos are now enabled by default on supported compilers (which are "
"detected by the configure script).  They can still be disabled selectively "
"by specifying ``--without-computed-gotos``."
msgstr ""
"计算跳转（computed gotos）现在在支持的编译器（支持情况由配置脚本检测）上默认启用。仍可通过指定 ``--without-computed-"
"gotos`` 选择性禁用。"

#: ../../whatsnew/3.2.rst:2548
msgid "(Contributed by Antoine Pitrou; :issue:`9203`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`9203` 中贡献。）"

#: ../../whatsnew/3.2.rst:2550
msgid ""
"The option ``--with-wctype-functions`` was removed.  The built-in unicode "
"database is now used for all functions."
msgstr "选项 ``--with-wctype-functions`` 已被移除。内置的 Unicode 数据库现在用于所有函数。"

#: ../../whatsnew/3.2.rst:2553
msgid "(Contributed by Amaury Forgeot D'Arc; :issue:`9210`.)"
msgstr "（由 Amaury Forgeot d'Arc 在 :issue:`9210` 中贡献。）"

#: ../../whatsnew/3.2.rst:2555
msgid ""
"Hash values are now values of a new type, :c:type:`Py_hash_t`, which is "
"defined to be the same size as a pointer.  Previously they were of type "
"long, which on some 64-bit operating systems is still only 32 bits long.  As"
" a result of this fix, :class:`set` and :class:`dict` can now hold more than"
" ``2**32`` entries on builds with 64-bit pointers (previously, they could "
"grow to that size but their performance degraded catastrophically)."
msgstr ""
"哈希值现在采用一种新类型 :c:type:`Py_hash_t` 的值，该类型被定义为与指针具有相同的大小。此前，哈希值的类型为 long，在某些 64"
" 位操作系统上，long 仍然只有 32 位长。得益于这一改进，:class:`set` 和 :class:`dict` 现在可以在使用 64 "
"位指针的构建版本中容纳超过 ``2**32`` 个条目（此前，虽然它们能够增长到该规模，但其性能会急剧下降）。"

#: ../../whatsnew/3.2.rst:2562
msgid ""
"(Suggested by Raymond Hettinger and implemented by Benjamin Peterson; "
":issue:`9778`.)"
msgstr "（由 Raymond Hettinger 建议，Benjamin Peterson 实现；参见 :issue:`9778`。）"

#: ../../whatsnew/3.2.rst:2565
msgid ""
"A new macro :c:macro:`!Py_VA_COPY` copies the state of the variable argument"
" list.  It is equivalent to C99 *va_copy* but available on all Python "
"platforms (:issue:`2443`)."
msgstr ""
"一个新的宏 :c:macro:`!Py_VA_COPY` 复制可变参数列表的状态。它等同于 C99 的 *va_copy*，但在所有 Python "
"平台上都可用（:issue:`2443`）。"

#: ../../whatsnew/3.2.rst:2569
msgid ""
"A new C API function :c:func:`!PySys_SetArgvEx` allows an embedded "
"interpreter to set :data:`sys.argv` without also modifying :data:`sys.path` "
"(:issue:`5753`)."
msgstr ""
"一个新的 C API 函数 :c:func:`!PySys_SetArgvEx` 允许嵌入式解释器设置 :data:`sys.argv` 而不修改 "
":data:`sys.path` (:issue:`5753`)。"

#: ../../whatsnew/3.2.rst:2573
msgid ""
":c:func:`!PyEval_CallObject` is now only available in macro form.  The "
"function declaration, which was kept for backwards compatibility reasons, is"
" now removed -- the macro was introduced in 1997 (:issue:`8276`)."
msgstr ""
":c:func:`!PyEval_CallObject` 现在仅以宏形式提供。为了向后兼容而保留的函数声明现已移除——该宏于1997年引入 "
"(:issue:`8276`)。"

#: ../../whatsnew/3.2.rst:2577
msgid ""
"There is a new function :c:func:`PyLong_AsLongLongAndOverflow` which is "
"analogous to :c:func:`PyLong_AsLongAndOverflow`.  They both serve to convert"
" Python :class:`int` into a native fixed-width type while providing "
"detection of cases where the conversion won't fit (:issue:`7767`)."
msgstr ""
"新增函数 :c:func:`PyLong_AsLongLongAndOverflow`，它与 "
":c:func:`PyLong_AsLongAndOverflow` 类似。它们都用于将 Python :class:`int` "
"转换为本地固定宽度类型，并提供检测转换不匹配的情况 (:issue:`7767`)。"

#: ../../whatsnew/3.2.rst:2582
msgid ""
"The :c:func:`PyUnicode_CompareWithASCIIString` function now returns *not "
"equal* if the Python string is *NUL* terminated."
msgstr ""
":c:func:`PyUnicode_CompareWithASCIIString` 函数现在在 Python 字符串以 *NUL* 结尾时返回 "
"*不相等*。"

#: ../../whatsnew/3.2.rst:2585
msgid ""
"There is a new function :c:func:`PyErr_NewExceptionWithDoc` that is like "
":c:func:`PyErr_NewException` but allows a docstring to be specified. This "
"lets C exceptions have the same self-documenting capabilities as their pure "
"Python counterparts (:issue:`7033`)."
msgstr ""
"新增函数 :c:func:`PyErr_NewExceptionWithDoc`，类似于 "
":c:func:`PyErr_NewException`，但允许指定文档字符串。这使得 C 语言实现的异常能够像纯 Python "
"异常一样具备自文档化能力 (:issue:`7033`)。"

#: ../../whatsnew/3.2.rst:2590
msgid ""
"When compiled with the ``--with-valgrind`` option, the pymalloc allocator "
"will be automatically disabled when running under Valgrind.  This gives "
"improved memory leak detection when running under Valgrind, while taking "
"advantage of pymalloc at other times (:issue:`2422`)."
msgstr ""
"当使用 ``--with-valgrind`` 选项编译时，pymalloc 分配器在 Valgrind 下运行时会自动禁用。这提高了在 "
"Valgrind 下运行时的内存泄漏检测能力，同时在其他时候利用 pymalloc (:issue:`2422`)。"

#: ../../whatsnew/3.2.rst:2595
msgid ""
"Removed the ``O?`` format from the *PyArg_Parse* functions.  The format is "
"no longer used and it had never been documented (:issue:`8837`)."
msgstr "从 *PyArg_Parse* 函数中移除了 ``O?`` 格式。该格式不再使用，且从未被文档化 (:issue:`8837`)。"

#: ../../whatsnew/3.2.rst:2598
msgid ""
"There were a number of other small changes to the C-API.  See the `Misc/NEWS"
" <https://github.com/python/cpython/blob/v3.2.6/Misc/NEWS>`__ file for a "
"complete list."
msgstr ""
"C-API 还有一些其他小改动。详见 `Misc/NEWS "
"<https://github.com/python/cpython/blob/v3.2.6/Misc/NEWS>`__ 文件以获取完整列表。"

#: ../../whatsnew/3.2.rst:2602
msgid ""
"Also, there were a number of updates to the Mac OS X build, see "
"`Mac/BuildScript/README.txt "
"<https://github.com/python/cpython/blob/v3.2.6/Mac/BuildScript/README.txt>`_"
" for details.  For users running a 32/64-bit build, there is a known problem"
" with the default Tcl/Tk on Mac OS X 10.6. Accordingly, we recommend "
"installing an updated alternative such as `ActiveState Tcl/Tk 8.5.9 "
"<https://web.archive.org/web/20101208191259/https://www.activestate.com/activetcl/downloads>`_\\."
" See https://www.python.org/download/mac/tcltk/ for additional details."
msgstr ""
"此外，Mac OS X 构建版本进行了多项更新，详细信息请参阅 `Mac/BuildScript/README.txt "
"<https://github.com/python/cpython/blob/v3.2.6/Mac/BuildScript/README.txt>`_。对于运行32/64位构建版本的用户，已知在Mac"
" OS X 10.6上默认的Tcl/Tk存在问题。因此，我们建议安装更新的替代版本，例如 `ActiveState Tcl/Tk 8.5.9 "
"<https://web.archive.org/web/20101208191259/https://www.activestate.com/activetcl/downloads>`_。更多详情请访问"
" https://www.python.org/download/mac/tcltk/。"

#: ../../whatsnew/3.2.rst:2611
msgid "Porting to Python 3.2"
msgstr "移植到 Python 3.2"

#: ../../whatsnew/3.2.rst:2613
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr "本节列出了先前描述的变更以及可能需要修改你的代码的其他问题修正:"

#: ../../whatsnew/3.2.rst:2616
msgid ""
"The :mod:`configparser` module has a number of clean-ups.  The major change "
"is to replace the old :class:`!ConfigParser` class with long-standing "
"preferred alternative :class:`!SafeConfigParser`.  In addition there are a "
"number of smaller incompatibilities:"
msgstr ""
":mod:`configparser` 模块进行了一系列清理工作。主要变化是将旧的 :class:`!ConfigParser` "
"类替换为长期以来首选的替代类 :class:`!SafeConfigParser`。此外，还有一些较小的兼容性问题："

#: ../../whatsnew/3.2.rst:2621
msgid ""
"The interpolation syntax is now validated on "
":meth:`~configparser.ConfigParser.get` and "
":meth:`~configparser.ConfigParser.set` operations. In the default "
"interpolation scheme, only two tokens with percent signs are valid: "
"``%(name)s`` and ``%%``, the latter being an escaped percent sign."
msgstr ""
"插值语法现在在 :meth:`~configparser.ConfigParser.get` 和 "
":meth:`~configparser.ConfigParser.set` "
"操作中进行验证。在默认的插值方案中，只有两个带有百分号的标记是有效的：``%(name)s`` 和 ``%%``，后者是转义后的百分号。"

#: ../../whatsnew/3.2.rst:2627
msgid ""
"The :meth:`~configparser.ConfigParser.set` and "
":meth:`~configparser.ConfigParser.add_section` methods now verify that "
"values are actual strings.  Formerly, unsupported types could be introduced "
"unintentionally."
msgstr ""
":meth:`~configparser.ConfigParser.set` 和 "
":meth:`~configparser.ConfigParser.add_section` "
"方法现在验证值是否为实际的字符串。以前，可能会无意引入不支持的类型。"

#: ../../whatsnew/3.2.rst:2632
msgid ""
"Duplicate sections or options from a single source now raise either "
":exc:`~configparser.DuplicateSectionError` or "
":exc:`~configparser.DuplicateOptionError`.  Formerly, duplicates would "
"silently overwrite a previous entry."
msgstr ""
"来自单个源的重复节或选项现在会引发 :exc:`~configparser.DuplicateSectionError` 或 "
":exc:`~configparser.DuplicateOptionError`。此前，重复项会默默地覆盖先前的条目。"

#: ../../whatsnew/3.2.rst:2637
msgid ""
"Inline comments are now disabled by default so now the **;** character can "
"be safely used in values."
msgstr "内联注释现在默认禁用，因此现在可以安全地在值中使用 **;** 字符。"

#: ../../whatsnew/3.2.rst:2640
msgid ""
"Comments now can be indented.  Consequently, for **;** or **#** to appear at"
" the start of a line in multiline values, it has to be interpolated.  This "
"keeps comment prefix characters in values from being mistaken as comments."
msgstr "注释现在可以缩进。因此，为了在多行值的行首出现 **;** 或 **#**，必须进行插值。这样可以防止值中的注释前缀字符被误认为是注释。"

#: ../../whatsnew/3.2.rst:2644
msgid ""
"``\"\"`` is now a valid value and is no longer automatically converted to an"
" empty string. For empty strings, use ``\"option =\"`` in a line."
msgstr "``\"\"`` 现在是一个有效值，不再自动转换为空字符串。对于空字符串，请在行中使用 ``\"option =\"``。"

#: ../../whatsnew/3.2.rst:2647
msgid ""
"The :mod:`!nntplib` module was reworked extensively, meaning that its APIs "
"are often incompatible with the 3.1 APIs."
msgstr ":mod:`!nntplib` 模块进行了大量重写，这意味着其 API 通常与 3.1 版本的 API 不兼容。"

#: ../../whatsnew/3.2.rst:2650
msgid ""
":class:`bytearray` objects can no longer be used as filenames; instead, they"
" should be converted to :class:`bytes`."
msgstr ":class:`bytearray` 对象不能再用作文件名；相反，它们应该转换为 :class:`bytes`。"

#: ../../whatsnew/3.2.rst:2653
msgid ""
"The :meth:`!array.tostring` and :meth:`!array.fromstring` have been renamed "
"to :meth:`array.tobytes() <array.array.tobytes>` and "
":meth:`array.frombytes() <array.array.frombytes>` for clarity.  The old "
"names have been deprecated. (See :issue:`8990`.)"
msgstr ""
":meth:`!array.tostring` 和 :meth:`!array.fromstring` 已更名为 "
":meth:`array.tobytes() <array.array.tobytes>` 和 :meth:`array.frombytes() "
"<array.array.frombytes>` 以提高清晰度。旧名称已被弃用。（参见 :issue:`8990`。）"

#: ../../whatsnew/3.2.rst:2658
msgid "``PyArg_Parse*()`` functions:"
msgstr "``PyArg_Parse*()`` 函数:"

#: ../../whatsnew/3.2.rst:2660
msgid "\"t#\" format has been removed: use \"s#\" or \"s*\" instead"
msgstr "\"t#\" 格式已被移除：改用 \"s#\" 或 \"s*\""

#: ../../whatsnew/3.2.rst:2661
msgid "\"w\" and \"w#\" formats has been removed: use \"w*\" instead"
msgstr "\"w\" 和 \"w#\" 格式已被移除：改用 \"w*\""

#: ../../whatsnew/3.2.rst:2663
msgid ""
"The :c:type:`!PyCObject` type, deprecated in 3.1, has been removed.  To wrap"
" opaque C pointers in Python objects, the :c:type:`PyCapsule` API should be "
"used instead; the new type has a well-defined interface for passing typing "
"safety information and a less complicated signature for calling a "
"destructor."
msgstr ""
"在 3.1 版本中已被弃用的 :c:type:`!PyCObject` 类型已被移除。为了在 Python 对象中包装不透明的 C 指针，应使用 "
":c:type:`PyCapsule` API；新类型具有明确定义的接口，用于传递类型安全信息，并且调用析构函数的签名更简单。"

#: ../../whatsnew/3.2.rst:2668
msgid ""
"The :func:`!sys.setfilesystemencoding` function was removed because it had a"
" flawed design."
msgstr ":func:`!sys.setfilesystemencoding` 函数已被移除，因为其设计存在缺陷。"

#: ../../whatsnew/3.2.rst:2671
msgid ""
"The :func:`random.seed` function and method now salt string seeds with an "
"sha512 hash function.  To access the previous version of *seed* in order to "
"reproduce Python 3.1 sequences, set the *version* argument to *1*, "
"``random.seed(s, version=1)``."
msgstr ""
":func:`random.seed` 函数和方法现在使用 sha512 哈希函数对字符串种子进行加盐。为了访问以前版本的 *seed* 以重现 "
"Python 3.1 序列，将 *version* 参数设置为 *1*，即 ``random.seed(s, version=1)``。"

#: ../../whatsnew/3.2.rst:2676
msgid ""
"The previously deprecated :func:`!string.maketrans` function has been "
"removed in favor of the static methods :meth:`bytes.maketrans` and "
":meth:`bytearray.maketrans`.  This change solves the confusion around which "
"types were supported by the :mod:`string` module.  Now, :class:`str`, "
":class:`bytes`, and :class:`bytearray` each have their own **maketrans** and"
" **translate** methods with intermediate translation tables of the "
"appropriate type."
msgstr ""
"此前已弃用的 :func:`!string.maketrans` 函数已被移除，取而代之的是静态方法 :meth:`bytes.maketrans` 和"
" :meth:`bytearray.maketrans`。 这一变更解决了关于 :mod:`string` 模块支持哪些数据类型的混淆问题。 "
"现在，:class:`str`、:class:`bytes` 和 :class:`bytearray` 类型各自拥有独立的 **maketrans** "
"和 **translate** 方法，并会生成与相应类型匹配的中间转换表。"

#: ../../whatsnew/3.2.rst:2684
msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr "（由Georg Brandl在 :issue:`5675` 中贡献）"

#: ../../whatsnew/3.2.rst:2686
msgid ""
"The previously deprecated :func:`!contextlib.nested` function has been "
"removed in favor of a plain :keyword:`with` statement which can accept "
"multiple context managers.  The latter technique is faster (because it is "
"built-in), and it does a better job finalizing multiple context managers "
"when one of them raises an exception::"
msgstr ""
"此前已弃用的 :func:`!contextlib.nested` 函数已被移除，改为使用普通的 :keyword:`with` "
"语句，该语句可以接受多个上下文管理器。后一种技术在速度上更快（因为它是内置的），并且在其中一个上下文管理器引发异常时，能更好地完成多个上下文管理器的终结处理::"

#: ../../whatsnew/3.2.rst:2692
msgid ""
"with open('mylog.txt') as infile, open('a.out', 'w') as outfile:\n"
"    for line in infile:\n"
"        if '<critical>' in line:\n"
"            outfile.write(line)"
msgstr ""
"with open('mylog.txt') as infile, open('a.out', 'w') as outfile:\n"
"    for line in infile:\n"
"        if '<critical>' in line:\n"
"            outfile.write(line)"

#: ../../whatsnew/3.2.rst:2697
msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"
msgstr ""
"（由 Georg Brandl 和 Mattias Brändström 贡献; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_。）"

#: ../../whatsnew/3.2.rst:2700
msgid ""
":func:`struct.pack` now only allows bytes for the ``s`` string pack code. "
"Formerly, it would accept text arguments and implicitly encode them to bytes"
" using UTF-8.  This was problematic because it made assumptions about the "
"correct encoding and because a variable-length encoding can fail when "
"writing to fixed length segment of a structure."
msgstr ""
":func:`struct.pack` 现在只允许使用字节类型（bytes）作为 ``s`` "
"字符串打包代码的参数。此前，该函数会接受文本类型（text）参数，并隐式地使用 UTF-8 "
"编码将其转换为字节类型。这种做法存在两个问题：一是它对正确的编码方式做了预设假设；二是在将变长编码写入结构的固定长度字段时可能会导致失败。"

#: ../../whatsnew/3.2.rst:2706
msgid ""
"Code such as ``struct.pack('<6sHHBBB', 'GIF87a', x, y)`` should be rewritten"
" with to use bytes instead of text, ``struct.pack('<6sHHBBB', b'GIF87a', x, "
"y)``."
msgstr ""
"类似于 ``struct.pack('<6sHHBBB', 'GIF87a', x, y)`` 的代码应重写为使用字节串而不是文本，即 "
"``struct.pack('<6sHHBBB', b'GIF87a', x, y)``。"

#: ../../whatsnew/3.2.rst:2709
msgid ""
"(Discovered by David Beazley and fixed by Victor Stinner; :issue:`10783`.)"
msgstr "（由 David Beazley 发现，并由 Victor Stinner 修复；参见 :issue:`10783`。）"

#: ../../whatsnew/3.2.rst:2711
msgid ""
"The :class:`xml.etree.ElementTree` class now raises an "
":exc:`xml.etree.ElementTree.ParseError` when a parse fails. Previously it "
"raised an :exc:`xml.parsers.expat.ExpatError`."
msgstr ""
":class:`xml.etree.ElementTree` 类在解析失败时现在会抛出 "
":exc:`xml.etree.ElementTree.ParseError`。之前，它会抛出 "
":exc:`xml.parsers.expat.ExpatError`。"

#: ../../whatsnew/3.2.rst:2715
msgid ""
"The new, longer :func:`str` value on floats may break doctests which rely on"
" the old output format."
msgstr "新的、更长的浮点数 :func:`str` 输出格式可能会导致依赖旧输出格式的 doctest 测试用例失效。"

#: ../../whatsnew/3.2.rst:2718
msgid ""
"In :class:`subprocess.Popen`, the default value for *close_fds* is now "
"``True`` under Unix; under Windows, it is ``True`` if the three standard "
"streams are set to ``None``, ``False`` otherwise.  Previously, *close_fds* "
"was always ``False`` by default, which produced difficult to solve bugs or "
"race conditions when open file descriptors would leak into the child "
"process."
msgstr ""
"在 :class:`subprocess.Popen` 中，*close_fds* 的默认值在 Unix 上现在为 ``True``；在 Windows"
" 上，如果三个标准流均设置为 ``None``，则为 ``True``，否则为 ``False``。之前，*close_fds* 默认总是 "
"``False``，这会导致打开的文件描述符泄露到子进程中，产生难以解决的错误或竞争条件。"

#: ../../whatsnew/3.2.rst:2725
msgid ""
"Support for legacy HTTP 0.9 has been removed from :mod:`urllib.request` and "
":mod:`http.client`.  Such support is still present on the server side (in "
":mod:`http.server`)."
msgstr ""
"对旧式 HTTP 0.9 的支持已从 :mod:`urllib.request` 和 :mod:`http.client` 中移除。 "
"此项支持仍然存在于服务器端（在 :mod:`http.server` 中）。"

#: ../../whatsnew/3.2.rst:2729
msgid "(Contributed by Antoine Pitrou, :issue:`10711`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`10711` 中贡献。）"

#: ../../whatsnew/3.2.rst:2731
msgid ""
"SSL sockets in timeout mode now raise :exc:`socket.timeout` when a timeout "
"occurs, rather than a generic :exc:`~ssl.SSLError`."
msgstr ""
"超时模式下的 SSL 套接字现在如发生超时则会引发 :exc:`socket.timeout`，而不是一般性的 "
":exc:`~ssl.SSLError`。"

#: ../../whatsnew/3.2.rst:2734
msgid "(Contributed by Antoine Pitrou, :issue:`10272`.)"
msgstr "（由 Antoine Pitrou 在 :issue:`10272` 中贡献。）"

#: ../../whatsnew/3.2.rst:2736
msgid ""
"The misleading functions :c:func:`!PyEval_AcquireLock` and "
":c:func:`!PyEval_ReleaseLock` have been officially deprecated.  The thread-"
"state aware APIs (such as :c:func:`PyEval_SaveThread` and "
":c:func:`PyEval_RestoreThread`) should be used instead."
msgstr ""
"有误导性的 :c:func:`!PyEval_AcquireLock` 和 :c:func:`!PyEval_ReleaseLock` 已正式被弃用。 "
"应当改用可感知线程状态的 API (如 :c:func:`PyEval_SaveThread` 和 "
":c:func:`PyEval_RestoreThread`)。"

#: ../../whatsnew/3.2.rst:2741
msgid ""
"Due to security risks, :func:`!asyncore.handle_accept` has been deprecated, "
"and a new function, :func:`!asyncore.handle_accepted`, was added to replace "
"it."
msgstr ""
"由于存在安全风险，:func:`!asyncore.handle_accept` 已被弃用，新增了一个函数 "
":func:`!asyncore.handle_accepted` 用来替代它。"

#: ../../whatsnew/3.2.rst:2744
msgid "(Contributed by Giampaolo Rodola in :issue:`6706`.)"
msgstr "（由 Giampaolo Rodola 在 :issue:`6706` 中贡献。）"

#: ../../whatsnew/3.2.rst:2746
msgid ""
"Due to the new :term:`GIL` implementation, :c:func:`!PyEval_InitThreads` "
"cannot be called before :c:func:`Py_Initialize` anymore."
msgstr ""
"由于新的 :term:`GIL` 实现的限制，:c:func:`!PyEval_InitThreads` 不再可以在 "
":c:func:`Py_Initialize` 之前被调用。"
