# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 汇民 王 <whuim@qq.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-17 14:16+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/2.7.rst:3
msgid "What's New in Python 2.7"
msgstr "Python 2.7 有什么新变化"

#: ../../whatsnew/2.7.rst:0
msgid "Author"
msgstr "作者"

#: ../../whatsnew/2.7.rst:5
msgid "A.M. Kuchling (amk at amk.ca)"
msgstr "A.M. Kuchling (amk at amk.ca)"

#: ../../whatsnew/2.7.rst:52
msgid ""
"This article explains the new features in Python 2.7.  Python 2.7 was "
"released on July 3, 2010."
msgstr "本文介绍了Python 2.7 的新功能。 Python 2.7 于2010年7月3日发布。"

#: ../../whatsnew/2.7.rst:55
msgid ""
"Numeric handling has been improved in many ways, for both floating-point "
"numbers and for the :class:`~decimal.Decimal` class. There are some useful "
"additions to the standard library, such as a greatly enhanced "
":mod:`unittest` module, the :mod:`argparse` module for parsing command-line "
"options, convenient :class:`~collections.OrderedDict` and "
":class:`~collections.Counter` classes in the :mod:`collections` module, and "
"many other improvements."
msgstr ""
"数字处理在许多方面得到了改进，包括浮点数和 :class:`~decimal.Decimal` 类。标准库中有一些有用的补充，例如大大增强的 "
":mod:`unittest` 模块，用于解析命令行选项的 :mod:`argparse` 模块，在 :mod:`collections` 模块中方便的"
" :class:`~collections.OrderedDict` 和 :class:`~collections.Counter` "
"类，以及许多其他改进。"

#: ../../whatsnew/2.7.rst:63
msgid ""
"Python 2.7 is planned to be the last of the 2.x releases, so we worked on "
"making it a good release for the long term.  To help with porting to Python "
"3, several new features from the Python 3.x series have been included in "
"2.7."
msgstr ""
"Python 2.7计划成为2.x版本的最后一个发布版本，因此我们努力使其成为长期支持的好版本。为了帮助迁移到Python "
"3，我们在2.7中包含了几个来自Python 3.x系列的新特性。"

#: ../../whatsnew/2.7.rst:68
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you"
" should refer to the documentation for Python 2.7 at "
"https://docs.python.org. If you want to understand the rationale for the "
"design and implementation, refer to the PEP for a particular new feature or "
"the issue on https://bugs.python.org in which a change was discussed.  "
"Whenever possible, \"What's New in Python\" links to the bug/patch item for "
"each change."
msgstr ""
"本文并不试图提供新特性的完整规范说明，而是提供一个方便的概览。要了解完整的细节，请参阅Python "
"2.7的文档。如果你想了解有关设计和实现的具体考量，请参阅特定新特性的PEP或在https://bugs.python.org上讨论更改的问题。在可能的情况下，“What's"
" New in Python”链接到每个更改的错误修正/补丁项。"

#: ../../whatsnew/2.7.rst:80
msgid "The Future for Python 2.x"
msgstr "Python 2.x的未来"

#: ../../whatsnew/2.7.rst:82
msgid ""
"Python 2.7 is the last major release in the 2.x series, as the Python "
"maintainers have shifted the focus of their new feature development efforts "
"to the Python 3.x series. This means that while Python 2 continues to "
"receive bug fixes, and to be updated to build correctly on new hardware and "
"versions of supported operated systems, there will be no new full feature "
"releases for the language or standard library."
msgstr ""
"Python 2.7 是 2.x 系列中的最后一个主版本，因为Python 维护人员已将新功能开发工作的重点转移到了 Python 3.x "
"系列中。这意味着，尽管 Python 2 会继续修复bug并更新，以便在新的硬件和支持操作系统版本上正确构建，但不会有新的功能发布。"

#: ../../whatsnew/2.7.rst:89
msgid ""
"However, while there is a large common subset between Python 2.7 and Python "
"3, and many of the changes involved in migrating to that common subset, or "
"directly to Python 3, can be safely automated, some other changes (notably "
"those associated with Unicode handling) may require careful consideration, "
"and preferably robust automated regression test suites, to migrate "
"effectively."
msgstr ""
"然而，尽管在 Python 2.7 和 Python 3 之间有一个很大的公共子集，并且迁移到该公共子集或直接迁移到 Python 3 "
"所涉及的许多更改可以安全地自动化完成。但是一些其他更改（特别是那些与Unicode处理相关的更改）可能需要仔细考虑，并且最好用自动化回归测试套件进行健壮性测试，以便有效地迁移。"

#: ../../whatsnew/2.7.rst:96
msgid ""
"This means that Python 2.7 will remain in place for a long time, providing a"
" stable and supported base platform for production systems that have not yet"
" been ported to Python 3. The full expected lifecycle of the Python 2.7 "
"series is detailed in :pep:`373`."
msgstr ""
"这意味着 Python2.7 将长期保留，为尚未移植到 Python 3 的生产系统提供一个稳定且受支持的基础平台。Python "
"2.7系列的预期完整生命周期在 :pep:`373` 中有详细介绍。"

#: ../../whatsnew/2.7.rst:101
msgid "Some key consequences of the long-term significance of 2.7 are:"
msgstr "长期保留 2.7 版的的一些关键后果："

#: ../../whatsnew/2.7.rst:103
msgid ""
"As noted above, the 2.7 release has a much longer period of maintenance when"
" compared to earlier 2.x versions. Python 2.7 is currently expected to "
"remain supported by the core development team (receiving security updates "
"and other bug fixes) until at least 2020 (10 years after its initial "
"release, compared to the more typical support period of 18--24 months)."
msgstr ""
"如上所述，与早期的2.x版本相比，2.7版本的维护时间更长。目前，预计核心开发团队将继续支持Python "
"2.7（接收安全更新和其他错误修复），直到至少2020年（首次发布后10年，相比之下，通常的支持期为18--24个月）。"

#: ../../whatsnew/2.7.rst:109
msgid ""
"As the Python 2.7 standard library ages, making effective use of the Python "
"Package Index (either directly or via a redistributor) becomes more "
"important for Python 2 users. In addition to a wide variety of third party "
"packages for various tasks, the available packages include backports of new "
"modules and features from the Python 3 standard library that are compatible "
"with Python 2, as well as various tools and libraries that can make it "
"easier to migrate to Python 3. The `Python Packaging User Guide "
"<https://packaging.python.org>`__ provides guidance on downloading and "
"installing software from the Python Package Index."
msgstr ""
"随着 Python 2.7 标准库的老化，有效地利用 Python 包索引（直接或通过重新分发者）对 Python 2 "
"用户来说变得更加重要。除了各种任务的第三方包之外，可用的包还包括与 Python 2 兼容的 Python 3 "
"标准库中的新模块和功能的后端移植，以及各种工具和库，这些工具和库可以让用户更容易迁移到 Python 3。 `Python 包用户指南 "
"<https://packaging.python.org>`__ 提供了从 Python 包索引的下载和安装软件的指导。"

#: ../../whatsnew/2.7.rst:119
msgid ""
"While the preferred approach to enhancing Python 2 is now the publication of"
" new packages on the Python Package Index, this approach doesn't necessarily"
" work in all cases, especially those related to network security. In "
"exceptional cases that cannot be handled adequately by publishing new or "
"updated packages on PyPI, the Python Enhancement Proposal process may be "
"used to make the case for adding new features directly to the Python 2 "
"standard library. Any such additions, and the maintenance releases where "
"they were added, will be noted in the :ref:`py27-maintenance-enhancements` "
"section below."
msgstr ""
"虽然现在增强 Python 2 "
"的首选方法是在Python包索引上发布新包，但这种方法不一定适用于所有情况，尤其是与网络安全相关的情况。在一些特殊情况下，如果在PyPI上发布新的或更新的包无法得到充分的处理，则可以使用Python增强建议过程来提出直接在Python"
" 2标准库中添加新功能。任何此类添加及其添加的维护版本将在下面的 :ref:`py27-maintenance-enhancements` 部分中注明。"

#: ../../whatsnew/2.7.rst:129
msgid ""
"For projects wishing to migrate from Python 2 to Python 3, or for library "
"and framework developers wishing to support users on both Python 2 and "
"Python 3, there are a variety of tools and guides available to help decide "
"on a suitable approach and manage some of the technical details involved. "
"The recommended starting point is the :ref:`pyporting-howto` HOWTO guide."
msgstr ""
"对于希望从 Python2 迁移到 Python3 的项目，或者对于希望同时支持 Python2 和 Python3 "
"用户的库和框架开发人员，可以使用各种工具和指南来帮助决定合适的方法并管理所涉及的一些技术细节。建议从 :ref:`pyporting-howto` "
"操作指南开始。"

#: ../../whatsnew/2.7.rst:137
msgid "Changes to the Handling of Deprecation Warnings"
msgstr "对于弃用警告处理方式的改变"

#: ../../whatsnew/2.7.rst:139
msgid ""
"For Python 2.7, a policy decision was made to silence warnings only of "
"interest to developers by default.  :exc:`DeprecationWarning` and its "
"descendants are now ignored unless otherwise requested, preventing users "
"from seeing warnings triggered by an application.  This change was also made"
" in the branch that became Python 3.2. (Discussed on stdlib-sig and carried "
"out in :issue:`7319`.)"
msgstr ""
"对于 Python 2.7，一个策略决定是默认情况下禁止只对开发人员有兴趣的警告。 现在，除非另有要求，否则将忽略 "
":exc:`DeprecationWarning` 及其子类，以防止用户看到应用程序触发的警告。 这个更改也在成为Python 3.2 "
"的分歧点上进行了。 （在 stdlib-sig 上进行了讨论，并在 :issue:`7319` 中执行。）"

#: ../../whatsnew/2.7.rst:146
msgid ""
"In previous releases, :exc:`DeprecationWarning` messages were enabled by "
"default, providing Python developers with a clear indication of where their "
"code may break in a future major version of Python."
msgstr ""
"在以前的版本中，默认情况下启用了 :exc:`DeprecationWarning` 消息，为 Python "
"开发人员提供了一个明确的指示，说明他们的代码可能在未来的 Python 主要版本中出现问题。"

#: ../../whatsnew/2.7.rst:151
msgid ""
"However, there are increasingly many users of Python-based applications who "
"are not directly involved in the development of those applications.  "
":exc:`DeprecationWarning` messages are irrelevant to such users, making them"
" worry about an application that's actually working correctly and burdening "
"application developers with responding to these concerns."
msgstr ""
"然而，越来越多基于 Python 的应用程序的用户并不直接参与这些应用程序的开发。 :exc:`DeprecationWarning` "
"消息与这些用户无关，这让他们担心应用能否真正正常工作，并让应用开发人员承担起回应这些担忧的负担。"

#: ../../whatsnew/2.7.rst:158
msgid ""
"You can re-enable display of :exc:`DeprecationWarning` messages by running "
"Python with the :option:`-Wdefault <-W>` (short form: :option:`-Wd <-W>`) "
"switch, or by setting the :envvar:`PYTHONWARNINGS` environment variable to "
"``\"default\"`` (or ``\"d\"``) before running Python.  Python code can also "
"re-enable them by calling ``warnings.simplefilter('default')``."
msgstr ""
"显示通过使用 :option:`-Wdefault<-W>` (简写: :option:`-Wd<-W>`) 开关运行 Python，或者在运行 "
"Python 之前将 :envvar:`PYTHONWARNINGS` 环境变量设置为 ``\"default\"`` (或 "
"``\"d\"``)，可以重新启用 :exc:`DeprecationWarning` 消息。 Python 代码也可以通过调用 "
"``warnings.simplefilter('default')`` 重新启用它们。"

#: ../../whatsnew/2.7.rst:165
msgid ""
"The ``unittest`` module also automatically reenables deprecation warnings "
"when running tests."
msgstr "``unittest`` 模块还会在运行测试时自动重新启用弃用警告。"

#: ../../whatsnew/2.7.rst:170
msgid "Python 3.1 Features"
msgstr "Python 3.1 特性"

#: ../../whatsnew/2.7.rst:172
msgid ""
"Much as Python 2.6 incorporated features from Python 3.0, version 2.7 "
"incorporates some of the new features in Python 3.1.  The 2.x series "
"continues to provide tools for migrating to the 3.x series."
msgstr ""
"就像 Python2.6 集成了 Python3.0 的特性一样，2.7版也集成了 Python3.1 中的一些新特性。2.x "
"系列继续提供迁移到3.x系列的工具。"

#: ../../whatsnew/2.7.rst:177
msgid "A partial list of 3.1 features that were backported to 2.7:"
msgstr "3.1 功能的部分列表，这些功能已反向移植到 2.7："

#: ../../whatsnew/2.7.rst:179
msgid "The syntax for set literals (``{1,2,3}`` is a mutable set)."
msgstr "用于集合字面值的语法 (``{1,2,3}`` 是一个可变集合)。"

#: ../../whatsnew/2.7.rst:180
msgid "Dictionary and set comprehensions (``{i: i*2 for i in range(3)}``)."
msgstr "字典与集合推导式 (``{i: i*2 for i in range(3)}``)。"

#: ../../whatsnew/2.7.rst:181
msgid "Multiple context managers in a single :keyword:`with` statement."
msgstr "单个 :keyword:`with` 语句中使用多个上下文管理器。"

#: ../../whatsnew/2.7.rst:182
msgid ""
"A new version of the :mod:`io` library, rewritten in C for performance."
msgstr "一个 :mod:`io` 库的新版本，用 C 重写以提升性能。"

#: ../../whatsnew/2.7.rst:183
msgid "The ordered-dictionary type described in :ref:`pep-0372`."
msgstr ":ref:`pep-0372` 所描述的有序字典类型。"

#: ../../whatsnew/2.7.rst:184
msgid "The new ``\",\"`` format specifier described in :ref:`pep-0378`."
msgstr ":ref:`pep-0378` 所描述的新的 ``\",\"`` 格式说明符。"

#: ../../whatsnew/2.7.rst:185
msgid "The :class:`memoryview` object."
msgstr ":class:`memoryview` 对象。"

#: ../../whatsnew/2.7.rst:186
msgid ""
"A small subset of the :mod:`importlib` module, `described below <#importlib-"
"section>`__."
msgstr ":mod:`importlib` 模块的一个较小子集，`described below <#importlib-section>`__。"

#: ../../whatsnew/2.7.rst:188
msgid ""
"The :func:`repr` of a float ``x`` is shorter in many cases: it's now based "
"on the shortest decimal string that's guaranteed to round back to ``x``.  As"
" in previous versions of Python, it's guaranteed that ``float(repr(x))`` "
"recovers ``x``."
msgstr ""
"在很多情况下，浮点数 ``x`` 的 :func:`repr` 更短：现在它基于最短的十进制字符串 ，保证四舍五入到 ``x``。  与 Python "
"以前的版本一样，保证 ``float(repr(x))`` 能恢复到 ``x``。"

#: ../../whatsnew/2.7.rst:192
msgid ""
"Float-to-string and string-to-float conversions are correctly rounded. The "
":func:`round` function is also now correctly rounded."
msgstr "浮点数到字符串和字符串到浮点数的转换已正确舍入。 :func:`round` 函数现在也能正确舍入。"

#: ../../whatsnew/2.7.rst:194
msgid ""
"The :c:type:`PyCapsule` type, used to provide a C API for extension modules."
msgstr ":c:type:`PyCapsule` 类型，用于为扩展模块提供 C API 。"

#: ../../whatsnew/2.7.rst:195
msgid "The :c:func:`PyLong_AsLongAndOverflow` C API function."
msgstr ":c:func:`PyLong_AsLongAndOverflow` C API 函数 。"

#: ../../whatsnew/2.7.rst:197
msgid "Other new Python3-mode warnings include:"
msgstr "其他新的 Python3 模式警告包括："

#: ../../whatsnew/2.7.rst:199
msgid ""
":func:`!operator.isCallable` and :func:`!operator.sequenceIncludes`, which "
"are not supported in 3.x, now trigger warnings."
msgstr ""
":func:`!operator.isCallable` 和 :func:`!operator.sequenceIncludes` 在 3.x "
"中不支持，现在会触发警告。"

#: ../../whatsnew/2.7.rst:201
msgid ""
"The :option:`!-3` switch now automatically enables the :option:`!-Qwarn` "
"switch that causes warnings about using classic division with integers and "
"long integers."
msgstr ""
":option:`!-3` 开关现在会自动启用 :option:`!-Qwarn` 开关，该开关会在使用经典整除法处理整数和长整数时发出警告。"

#: ../../whatsnew/2.7.rst:214
msgid "PEP 372: Adding an Ordered Dictionary to collections"
msgstr "PEP 372：将有序字典 添加到收藏集"

#: ../../whatsnew/2.7.rst:216
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order."
" Over the years, a number of authors have written alternative "
"implementations that remember the order that the keys were originally "
"inserted.  Based on the experiences from those implementations, 2.7 "
"introduces a new :class:`~collections.OrderedDict` class in the "
":mod:`collections` module."
msgstr ""
"常规 Python 字典以任意顺序遍历键/值对。 多年来，许多作者编写了替代实现，以记住键最初插入的顺序。 基于这些实现的经验，2.7 在 "
":mod:`collections` 模块中引入了一个新的 :class:`~collections.OrderedDict` 类。"

#: ../../whatsnew/2.7.rst:222
msgid ""
"The :class:`~collections.OrderedDict` API provides the same interface as "
"regular dictionaries but iterates over keys and values in a guaranteed order"
" depending on when a key was first inserted::"
msgstr ""
":class:`~collections.OrderedDict` API 提供与普通字典相同的接口 "
"，但会根据键首次插入的时间，按一定顺序遍历键和值：："

#: ../../whatsnew/2.7.rst:226
msgid ""
">>> from collections import OrderedDict\n"
">>> d = OrderedDict([('first', 1),\n"
"...                  ('second', 2),\n"
"...                  ('third', 3)])\n"
">>> d.items()\n"
"[('first', 1), ('second', 2), ('third', 3)]"
msgstr ""
">>> from collections import OrderedDict\n"
">>> d = OrderedDict([('first', 1),\n"
"...                  ('second', 2),\n"
"...                  ('third', 3)])\n"
">>> d.items()\n"
"[('first', 1), ('second', 2), ('third', 3)]"

#: ../../whatsnew/2.7.rst:233
msgid ""
"If a new entry overwrites an existing entry, the original insertion position"
" is left unchanged::"
msgstr "如果新条目覆盖了现有条目，则原插入位置保持不变 ::"

#: ../../whatsnew/2.7.rst:236
msgid ""
">>> d['second'] = 4\n"
">>> d.items()\n"
"[('first', 1), ('second', 4), ('third', 3)]"
msgstr ""
">>> d['second'] = 4\n"
">>> d.items()\n"
"[('first', 1), ('second', 4), ('third', 3)]"

#: ../../whatsnew/2.7.rst:240
msgid "Deleting an entry and reinserting it will move it to the end::"
msgstr "删除条目并重新插入会将其移至末尾 ::"

#: ../../whatsnew/2.7.rst:242
msgid ""
">>> del d['second']\n"
">>> d['second'] = 5\n"
">>> d.items()\n"
"[('first', 1), ('third', 3), ('second', 5)]"
msgstr ""
">>> del d['second']\n"
">>> d['second'] = 5\n"
">>> d.items()\n"
"[('first', 1), ('third', 3), ('second', 5)]"

#: ../../whatsnew/2.7.rst:247
msgid ""
"The :meth:`~collections.OrderedDict.popitem` method has an optional *last* "
"argument that defaults to ``True``.  If *last* is true, the most recently "
"added key is returned and removed; if it's false, the oldest key is "
"selected::"
msgstr ""
":meth:`~collections.OrderedDict.popitem` 方法有一个可选 *last* 参数 ，默认为 ``True`` 。如果"
" *last* 为 true ，则返回并删除最近添加的密钥；如果为 false ，则选择最旧的密钥::"

#: ../../whatsnew/2.7.rst:252
msgid ""
">>> od = OrderedDict([(x,0) for x in range(20)])\n"
">>> od.popitem()\n"
"(19, 0)\n"
">>> od.popitem()\n"
"(18, 0)\n"
">>> od.popitem(last=False)\n"
"(0, 0)\n"
">>> od.popitem(last=False)\n"
"(1, 0)"
msgstr ""
">>> od = OrderedDict([(x,0) for x in range(20)])\n"
">>> od.popitem()\n"
"(19, 0)\n"
">>> od.popitem()\n"
"(18, 0)\n"
">>> od.popitem(last=False)\n"
"(0, 0)\n"
">>> od.popitem(last=False)\n"
"(1, 0)"

#: ../../whatsnew/2.7.rst:262
msgid ""
"Comparing two ordered dictionaries checks both the keys and values, and "
"requires that the insertion order was the same::"
msgstr "比较两个有序字典会同时检查键和值，并要求插入顺序相同 ::"

#: ../../whatsnew/2.7.rst:265
msgid ""
">>> od1 = OrderedDict([('first', 1),\n"
"...                    ('second', 2),\n"
"...                    ('third', 3)])\n"
">>> od2 = OrderedDict([('third', 3),\n"
"...                    ('first', 1),\n"
"...                    ('second', 2)])\n"
">>> od1 == od2\n"
"False\n"
">>> # Move 'third' key to the end\n"
">>> del od2['third']; od2['third'] = 3\n"
">>> od1 == od2\n"
"True"
msgstr ""
">>> od1 = OrderedDict([('first', 1),\n"
"...                    ('second', 2),\n"
"...                    ('third', 3)])\n"
">>> od2 = OrderedDict([('third', 3),\n"
"...                    ('first', 1),\n"
"...                    ('second', 2)])\n"
">>> od1 == od2\n"
"False\n"
">>> # 将 'third' 键移动到末尾\n"
">>> del od2['third']; od2['third'] = 3\n"
">>> od1 == od2\n"
"True"

#: ../../whatsnew/2.7.rst:278
msgid ""
"Comparing an :class:`~collections.OrderedDict` with a regular dictionary "
"ignores the insertion order and just compares the keys and values."
msgstr "将 :class:`~collections.OrderedDict` 与普通字典进行比较时，会忽略插入顺序，只比较键和值。"

#: ../../whatsnew/2.7.rst:281
msgid ""
"How does the :class:`~collections.OrderedDict` work?  It maintains a doubly "
"linked list of keys, appending new keys to the list as they're inserted. A "
"secondary dictionary maps keys to their corresponding list node, so deletion"
" doesn't have to traverse the entire linked list and therefore remains *O*\\"
" (1)."
msgstr ""
":class:`~collections.OrderedDict` 是如何工作的？它维护一个键的双链路列表，在插入新键时将其添加到列表中。二级字典 "
"将键映射到其对应的列表节点 ，因此删除时不必遍历整个链接列表，从而保持 *O*\\ (1)。"

#: ../../whatsnew/2.7.rst:287
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules."
msgstr "现在，标准库支持在多个模块 中使用有序字典。"

#: ../../whatsnew/2.7.rst:290
msgid ""
"The :mod:`ConfigParser <configparser>` module uses them by default, meaning "
"that configuration files can now be read, modified, and then written back in"
" their original order."
msgstr ""
":mod:`ConfigParser <configparser>` 模块默认使用它们，这意味着现在可以按照原来的顺序读取、修改和写回配置文件。"

#: ../../whatsnew/2.7.rst:294
msgid ""
"The :meth:`~collections.somenamedtuple._asdict` method for "
":func:`collections.namedtuple` now returns an ordered dictionary with the "
"values appearing in the same order as the underlying tuple indices."
msgstr ""
"现在 :func:`collections.namedtuple` 的 "
":meth:`~collections.somenamedtuple._asdict` 方法返回一个有序字典，其中的值按照底层元组索引的顺序出现。"

#: ../../whatsnew/2.7.rst:298
msgid ""
"The :mod:`json` module's :class:`~json.JSONDecoder` class constructor was "
"extended with an *object_pairs_hook* parameter to allow :class:`OrderedDict`"
" instances to be built by the decoder. Support was also added for third-"
"party tools like `PyYAML <https://pyyaml.org/>`_."
msgstr ""
":mod:`json` 模块的 :class:`~json.JSONDecoder` 类构造器扩展了一个 *object_pairs_hook* 形参 "
"，允许解码器构建 :class:`OrderedDict` 实例。此外，还添加了对第三方工具的支持，如 `PyYAML "
"<https://pyyaml.org/>`_ 。"

#: ../../whatsnew/2.7.rst:306
msgid ":pep:`372` - Adding an ordered dictionary to collections"
msgstr ":pep:`372` - 将有序词典添加到集合中"

#: ../../whatsnew/2.7.rst:307
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger; implemented by Raymond "
"Hettinger."
msgstr "PEP 由 Armin Ronacher 和 Raymond Hettinger 撰写，由 Raymond Hettinger 实现。"

#: ../../whatsnew/2.7.rst:313
msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr "PEP 378: 千位分隔符的格式说明符"

#: ../../whatsnew/2.7.rst:315
msgid ""
"To make program output more readable, it can be useful to add separators to "
"large numbers, rendering them as 18,446,744,073,709,551,616 instead of "
"18446744073709551616."
msgstr ""
"为了使程序输出更易读，可以在大数字上添加分隔符，将其显示为 18,446,744,073,709,551,616 而不是 "
"18446744073709551616。"

#: ../../whatsnew/2.7.rst:319
msgid ""
"The fully general solution for doing this is the :mod:`locale` module, which"
" can use different separators (\",\" in North America, \".\" in Europe) and "
"different grouping sizes, but :mod:`locale` is complicated to use and "
"unsuitable for multi-threaded applications where different threads are "
"producing output for different locales."
msgstr ""
"完全通用的解决方案是 :mod:`locale` 模块 ，它可以使用不同的分隔符（北美为\",\"，欧洲为\".\"）和不同的分组大小，但 "
":mod:`locale` 使用起来比较复杂，而且不适合多线程应用程序，因为不同的线程会为不同的本地生成输出。"

#: ../../whatsnew/2.7.rst:325
msgid ""
"Therefore, a simple comma-grouping mechanism has been added to the mini-"
"language used by the :meth:`str.format` method.  When formatting a floating-"
"point number, simply include a comma between the width and the precision::"
msgstr ""
"因此，在 :meth:`str.format` 方法使用的迷你语言中添加了一个简单的逗号分组机制。 在格式化浮点数时，只需在宽度和精度之间加上逗号 ::"

#: ../../whatsnew/2.7.rst:330
msgid ""
">>> '{:20,.2f}'.format(18446744073709551616.0)\n"
"'18,446,744,073,709,551,616.00'"
msgstr ""
">>> '{:20,.2f}'.format(18446744073709551616.0)\n"
"'18,446,744,073,709,551,616.00'"

#: ../../whatsnew/2.7.rst:333
msgid "When formatting an integer, include the comma after the width:"
msgstr "格式化整数时，在宽度后面加上逗号："

#: ../../whatsnew/2.7.rst:338
msgid ""
"This mechanism is not adaptable at all; commas are always used as the "
"separator and the grouping is always into three-digit groups.  The comma-"
"formatting mechanism isn't as general as the :mod:`locale` module, but it's "
"easier to use."
msgstr ""
"这种机制完全没有适应性；逗号总是用作分隔符，分组总是以三位数为一组。 逗号格式机制不如 :mod:`locale` 模块通用，但使用起来更方便。"

#: ../../whatsnew/2.7.rst:345
msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ":pep:`378` - 千位分隔符的格式说明符"

#: ../../whatsnew/2.7.rst:346
msgid "PEP written by Raymond Hettinger; implemented by Eric Smith."
msgstr "PEP 由 Raymond Hettinger 撰写，由 Eric Smith 实现。"

#: ../../whatsnew/2.7.rst:349
msgid "PEP 389: The argparse Module for Parsing Command Lines"
msgstr "PEP 389：用于解析命令行的 argparse 模块"

#: ../../whatsnew/2.7.rst:351
msgid ""
"The :mod:`argparse` module for parsing command-line arguments was added as a"
" more powerful replacement for the :mod:`optparse` module."
msgstr "用于解析命令-line参数的 :mod:`argparse` 模块是作为 :mod:`optparse` 模块更强大的替代功能而添加的。"

#: ../../whatsnew/2.7.rst:355
msgid ""
"This means Python now supports three different modules for parsing command-"
"line arguments: :mod:`getopt`, :mod:`optparse`, and :mod:`argparse`.  The "
":mod:`getopt` module closely resembles the C library's :c:func:`!getopt` "
"function, so it remains useful if you're writing a Python prototype that "
"will eventually be rewritten in C. :mod:`optparse` becomes redundant, but "
"there are no plans to remove it because there are many scripts still using "
"it, and there's no automated way to update these scripts.  (Making the "
":mod:`argparse` API consistent with :mod:`optparse`'s interface was "
"discussed but rejected as too messy and difficult.)"
msgstr ""
"这意味着 Python 现在支持三个不同的用来解析命令行参数的模块: :mod:`getopt`, :mod:`optparse` 和 "
":mod:`argparse`。 :mod:`getopt` 模块非常接近 C 库的 :c:func:`!getopt` 函数，因此它在你编写最终要用 "
"C 来重新编写的 Python 原型代码时很有用处。 :mod:`optparse` "
"已经变得冗余，但并没有移除它的计划因为许多脚本仍然在使用它，并且也没有自动化更新这些脚本的方式。 （让 :mod:`argparse` API 与 "
":mod:`optparse` 的接口保持一致的提议曾被讨论但因过于繁琐和困难而被拒绝。）"

#: ../../whatsnew/2.7.rst:366
msgid ""
"In short, if you're writing a new script and don't need to worry about "
"compatibility with earlier versions of Python, use :mod:`argparse` instead "
"of :mod:`optparse`."
msgstr ""
"简而言之，如果你是在编写新脚本并且不需要担心与 Python 较早版本的兼容性，请使用 :mod:`argparse` 而不是 "
":mod:`optparse`。"

#: ../../whatsnew/2.7.rst:370
msgid "Here's an example::"
msgstr "以下是为示例代码::"

#: ../../whatsnew/2.7.rst:372
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(description='Command-line example.')\n"
"\n"
"# Add optional switches\n"
"parser.add_argument('-v', action='store_true', dest='is_verbose',\n"
"                    help='produce verbose output')\n"
"parser.add_argument('-o', action='store', dest='output',\n"
"                    metavar='FILE',\n"
"                    help='direct output to FILE instead of stdout')\n"
"parser.add_argument('-C', action='store', type=int, dest='context',\n"
"                    metavar='NUM', default=0,\n"
"                    help='display NUM lines of added context')\n"
"\n"
"# Allow any number of additional arguments.\n"
"parser.add_argument(nargs='*', action='store', dest='inputs',\n"
"                    help='input filenames (default is stdin)')\n"
"\n"
"args = parser.parse_args()\n"
"print args.__dict__"
msgstr ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(description='命令行示例。')\n"
"\n"
"# 添加可选开关\n"
"parser.add_argument('-v', action='store_true', dest='is_verbose',\n"
"                    help='生成详细输出')\n"
"parser.add_argument('-o', action='store', dest='output',\n"
"                    metavar='FILE',\n"
"                    help='将输出重定向到 FILE 而不是 stdout')\n"
"parser.add_argument('-C', action='store', type=int, dest='context',\n"
"                    metavar='NUM', default=0,\n"
"                    help='显示 NUM 行的附加上下文')\n"
"\n"
"# 允许任意数量的附加参数。\n"
"parser.add_argument(nargs='*', action='store', dest='inputs',\n"
"                    help='输入文件名（默认为 stdin）')\n"
"\n"
"args = parser.parse_args()\n"
"print args.__dict__"

#: ../../whatsnew/2.7.rst:393
msgid ""
"Unless you override it, :option:`!-h` and :option:`!--help` switches are "
"automatically added, and produce neatly formatted output::"
msgstr "除非你覆盖它，否则会自动添加 :option:`!-h` 和 :option:`!--help` 开关，并产生格式化良好的输出::"

#: ../../whatsnew/2.7.rst:396
msgid ""
"-> ./python.exe argparse-example.py --help\n"
"usage: argparse-example.py [-h] [-v] [-o FILE] [-C NUM] [inputs [inputs ...]]\n"
"\n"
"Command-line example.\n"
"\n"
"positional arguments:\n"
"  inputs      input filenames (default is stdin)\n"
"\n"
"optional arguments:\n"
"  -h, --help  show this help message and exit\n"
"  -v          produce verbose output\n"
"  -o FILE     direct output to FILE instead of stdout\n"
"  -C NUM      display NUM lines of added context"
msgstr ""
"-> ./python.exe argparse-example.py --help\n"
"usage: argparse-example.py [-h] [-v] [-o FILE] [-C NUM] [inputs [inputs ...]]\n"
"\n"
"命令行示例。\n"
"\n"
"positional arguments:\n"
"  inputs      input filenames (default is stdin)\n"
"\n"
"optional arguments:\n"
"  -h, --help  show this help message and exit\n"
"  -v          生成详细输出\n"
"  -o FILE     将输出重定向到 FILE 而不是 stdout\n"
"  -C NUM      显示 NUM 行的附加上下文"

#: ../../whatsnew/2.7.rst:410
msgid ""
"As with :mod:`optparse`, the command-line switches and arguments are "
"returned as an object with attributes named by the *dest* parameters::"
msgstr "与 :mod:`optparse` 一样，命令行开关和参数将返回为一个具有通过 *dest* 形参所指定的属性的对象::"

#: ../../whatsnew/2.7.rst:413
msgid ""
"-> ./python.exe argparse-example.py -v\n"
"{'output': None,\n"
" 'is_verbose': True,\n"
" 'context': 0,\n"
" 'inputs': []}\n"
"\n"
"-> ./python.exe argparse-example.py -v -o /tmp/output -C 4 file1 file2\n"
"{'output': '/tmp/output',\n"
" 'is_verbose': True,\n"
" 'context': 4,\n"
" 'inputs': ['file1', 'file2']}"
msgstr ""
"-> ./python.exe argparse-example.py -v\n"
"{'output': None,\n"
" 'is_verbose': True,\n"
" 'context': 0,\n"
" 'inputs': []}\n"
"\n"
"-> ./python.exe argparse-example.py -v -o /tmp/output -C 4 file1 file2\n"
"{'output': '/tmp/output',\n"
" 'is_verbose': True,\n"
" 'context': 4,\n"
" 'inputs': ['file1', 'file2']}"

#: ../../whatsnew/2.7.rst:425
msgid ""
":mod:`argparse` has much fancier validation than :mod:`optparse`; you can "
"specify an exact number of arguments as an integer, 0 or more arguments by "
"passing ``'*'``, 1 or more by passing ``'+'``, or an optional argument with "
"``'?'``.  A top-level parser can contain sub-parsers to define subcommands "
"that have different sets of switches, as in ``svn commit``, ``svn "
"checkout``, etc.  You can specify an argument's type as "
":class:`~argparse.FileType`, which will automatically open files for you and"
" understands that ``'-'`` means standard input or output."
msgstr ""
":mod:`argparse` 模块提供了比 :mod:`optparse` 更强大的参数验证功能：你可以通过指定整数来要求精确数量的参数，使用 "
"``'*'`` 表示接受零个或多个参数，使用 ``'+'`` 表示接受一个或多个参数，或者使用 ``'?'`` "
"表示可选参数。顶层解析器还可以包含子解析器，用于定义具有不同开关选项集的子命令（例如 ``svn commit``、``svn checkout`` "
"等）。此外，你可以将参数类型指定为 :class:`~argparse.FileType`，该类型会自动为你打开文件，并理解 ``'-'`` "
"表示标准输入或输出。"

#: ../../whatsnew/2.7.rst:437
msgid ":mod:`argparse` documentation"
msgstr ":mod:`argparse` 文档"

#: ../../whatsnew/2.7.rst:438
msgid "The documentation page of the argparse module."
msgstr "argparse 模块的文档页面。"

#: ../../whatsnew/2.7.rst:440
msgid ":ref:`upgrading-optparse-code`"
msgstr ":ref:`upgrading-optparse-code`"

#: ../../whatsnew/2.7.rst:441
msgid ""
"Part of the Python documentation, describing how to convert code that uses "
":mod:`optparse`."
msgstr "Python 文档的一部分，描述如何转换使用了 :mod:`optparse` 的代码。"

#: ../../whatsnew/2.7.rst:444
msgid ":pep:`389` - argparse - New Command Line Parsing Module"
msgstr ":pep:`389` - argparse - 新的命令行解析模块"

#: ../../whatsnew/2.7.rst:445
msgid "PEP written and implemented by Steven Bethard."
msgstr "PEP 由 Steven Bethard 撰写并实现。"

#: ../../whatsnew/2.7.rst:448
msgid "PEP 391: Dictionary-Based Configuration For Logging"
msgstr "PEP 391: 基于字典的日志配置"

#: ../../whatsnew/2.7.rst:450
msgid ""
"The :mod:`logging` module is very flexible; applications can define a tree "
"of logging subsystems, and each logger in this tree can filter out certain "
"messages, format them differently, and direct messages to a varying number "
"of handlers."
msgstr ""
":mod:`logging` "
"模块非常灵活；应用程序可以定义一个日志子系统树，树中的每个记录器可以过滤掉某些消息，以不同的方式格式化它们，并将消息定向到不同数量的处理器。"

#: ../../whatsnew/2.7.rst:455
msgid ""
"All this flexibility can require a lot of configuration.  You can write "
"Python statements to create objects and set their properties, but a complex "
"set-up requires verbose but boring code. :mod:`logging` also supports a "
":func:`~logging.config.fileConfig` function that parses a file, but the file"
" format doesn't support configuring filters, and it's messier to generate "
"programmatically."
msgstr ""
"所有这些灵活性可能需要大量的配置。你可以编写Python语句来创建对象并设置它们的属性，但复杂的设置需要冗长但乏味的代码。:mod:`logging` "
"还支持一个 :func:`~logging.config.fileConfig` "
"函数，该函数解析一个文件，但文件格式不支持配置过滤器，并且通过程序生成会更混乱。"

#: ../../whatsnew/2.7.rst:462
msgid ""
"Python 2.7 adds a :func:`~logging.config.dictConfig` function that uses a "
"dictionary to configure logging.  There are many ways to produce a "
"dictionary from different sources: construct one with code; parse a file "
"containing JSON; or use a YAML parsing library if one is installed.  For "
"more information see :ref:`logging-config-api`."
msgstr ""
"Python 2.7 添加了一个 :func:`~logging.config.dictConfig` "
"函数，该函数使用字典来配置日志记录。有多种方法可以从不同来源生成字典：使用代码构造一个；解析包含 JSON 的文件；或者如果安装了 YAML "
"解析库，则使用该库。更多信息请参见 :ref:`logging-config-api`。"

#: ../../whatsnew/2.7.rst:468
msgid ""
"The following example configures two loggers, the root logger and a logger "
"named \"network\".  Messages sent to the root logger will be sent to the "
"system log using the syslog protocol, and messages to the \"network\" logger"
" will be written to a :file:`network.log` file that will be rotated once the"
" log reaches 1MB."
msgstr ""
"以下示例配置了两个日志记录器，根日志记录器和一个名为 \"network\" 的日志记录器。发送到根日志记录器的消息将使用 syslog "
"协议发送到系统日志，而发送到 \"network\" 日志记录器的消息将写入一个 :file:`network.log` 文件，当日志达到 1MB "
"时将进行轮转。"

#: ../../whatsnew/2.7.rst:476
msgid ""
"import logging\n"
"import logging.config\n"
"\n"
"configdict = {\n"
" 'version': 1,    # Configuration schema in use; must be 1 for now\n"
" 'formatters': {\n"
"     'standard': {\n"
"         'format': ('%(asctime)s %(name)-15s '\n"
"                    '%(levelname)-8s %(message)s')}},\n"
"\n"
" 'handlers': {'netlog': {'backupCount': 10,\n"
"                     'class': 'logging.handlers.RotatingFileHandler',\n"
"                     'filename': '/logs/network.log',\n"
"                     'formatter': 'standard',\n"
"                     'level': 'INFO',\n"
"                     'maxBytes': 1000000},\n"
"              'syslog': {'class': 'logging.handlers.SysLogHandler',\n"
"                         'formatter': 'standard',\n"
"                         'level': 'ERROR'}},\n"
"\n"
" # Specify all the subordinate loggers\n"
" 'loggers': {\n"
"             'network': {\n"
"                         'handlers': ['netlog']\n"
"             }\n"
" },\n"
" # Specify properties of the root logger\n"
" 'root': {\n"
"          'handlers': ['syslog']\n"
" },\n"
"}\n"
"\n"
"# Set up configuration\n"
"logging.config.dictConfig(configdict)\n"
"\n"
"# As an example, log two error messages\n"
"logger = logging.getLogger('/')\n"
"logger.error('Database not found')\n"
"\n"
"netlogger = logging.getLogger('network')\n"
"netlogger.error('Connection failed')"
msgstr ""
"import logging\n"
"import logging.config\n"
"\n"
"configdict = {\n"
" 'version': 1,    # 使用的配置模式；目前必须是 1\n"
" 'formatters': {\n"
"     'standard': {\n"
"         'format': ('%(asctime)s %(name)-15s '\n"
"                    '%(levelname)-8s %(message)s')}},\n"
"\n"
" 'handlers': {'netlog': {'backupCount': 10,\n"
"                     'class': 'logging.handlers.RotatingFileHandler',\n"
"                     'filename': '/logs/network.log',\n"
"                     'formatter': 'standard',\n"
"                     'level': 'INFO',\n"
"                     'maxBytes': 1000000},\n"
"              'syslog': {'class': 'logging.handlers.SysLogHandler',\n"
"                         'formatter': 'standard',\n"
"                         'level': 'ERROR'}},\n"
"\n"
" # 指定所有子日志记录器\n"
" 'loggers': {\n"
"             'network': {\n"
"                         'handlers': ['netlog']\n"
"             }\n"
" },\n"
" # 指定根日志记录器的属性\n"
" 'root': {\n"
"          'handlers': ['syslog']\n"
" },\n"
"}\n"
"\n"
"# 设置配置\n"
"logging.config.dictConfig(configdict)\n"
"\n"
"# 作为示例，记录两个错误消息\n"
"logger = logging.getLogger('/')\n"
"logger.error('数据库未找到')\n"
"\n"
"netlogger = logging.getLogger('network')\n"
"netlogger.error('连接失败')"

#: ../../whatsnew/2.7.rst:518
msgid ""
"Three smaller enhancements to the :mod:`logging` module, all implemented by "
"Vinay Sajip, are:"
msgstr "Vinay Sajip 实现的对 :mod:`logging` 模块的三项较小增强是："

#: ../../whatsnew/2.7.rst:523
msgid ""
"The :class:`~logging.handlers.SysLogHandler` class now supports syslogging "
"over TCP.  The constructor has a *socktype* parameter giving the type of "
"socket to use, either :const:`socket.SOCK_DGRAM` for UDP or "
":const:`socket.SOCK_STREAM` for TCP.  The default protocol remains UDP."
msgstr ""
":class:`~logging.handlers.SysLogHandler` 类现在支持通过 TCP 进行系统日志记录。构造函数有一个 "
"*socktype* 参数，用于指定要使用的套接字类型，可以是 :const:`socket.SOCK_DGRAM` 用于 UDP 或 "
":const:`socket.SOCK_STREAM` 用于 TCP。默认协议仍然是 UDP。"

#: ../../whatsnew/2.7.rst:529
msgid ""
":class:`~logging.Logger` instances gained a :meth:`~logging.Logger.getChild`"
" method that retrieves a descendant logger using a relative path. For "
"example, once you retrieve a logger by doing ``log = getLogger('app')``, "
"calling ``log.getChild('network.listen')`` is equivalent to "
"``getLogger('app.network.listen')``."
msgstr ""
":class:`~logging.Logger` 实例新增了一个 :meth:`~logging.Logger.getChild` "
"方法，用于通过相对路径检索子日志记录器。例如，一旦通过 ``log = getLogger('app')`` 获取日志记录器，调用 "
"``log.getChild('network.listen')`` 等同于 ``getLogger('app.network.listen')``。"

#: ../../whatsnew/2.7.rst:535
msgid ""
"The :class:`~logging.LoggerAdapter` class gained an "
":meth:`~logging.Logger.isEnabledFor` method that takes a *level* and returns"
" whether the underlying logger would process a message of that level of "
"importance."
msgstr ""
":class:`~logging.LoggerAdapter` 类新增了一个 :meth:`~logging.Logger.isEnabledFor` "
"方法，该方法接受一个 *level* 参数，并返回底层日志记录器是否会处理该级别重要性的消息。"

#: ../../whatsnew/2.7.rst:544
msgid ":pep:`391` - Dictionary-Based Configuration For Logging"
msgstr ":pep:`391` - 基于字典的日志配置"

#: ../../whatsnew/2.7.rst:545
msgid "PEP written and implemented by Vinay Sajip."
msgstr "PEP 由 Vinay Sajip 撰写并实现。"

#: ../../whatsnew/2.7.rst:548
msgid "PEP 3106: Dictionary Views"
msgstr "PEP 3106: 字典视图"

#: ../../whatsnew/2.7.rst:550
msgid ""
"The dictionary methods :meth:`~dict.keys`, :meth:`~dict.values`, and "
":meth:`~dict.items` are different in Python 3.x.  They return an object "
"called a :dfn:`view` instead of a fully materialized list."
msgstr ""
"字典方法 :meth:`~dict.keys`、 :meth:`~dict.values` 和 :meth:`~dict.items` 在 Python"
" 3.x 有所不同。 它们将返回名为 :dfn:`view` 的对象而不是完整的列表。"

#: ../../whatsnew/2.7.rst:554
msgid ""
"It's not possible to change the return values of :meth:`~dict.keys`, "
":meth:`~dict.values`, and :meth:`~dict.items` in Python 2.7 because too much"
" code would break.  Instead the 3.x versions were added under the new names "
":meth:`!viewkeys`, :meth:`!viewvalues`, and :meth:`!viewitems`."
msgstr ""
"在 Python 2.7 中不可能改变 :meth:`~dict.keys`、 :meth:`~dict.values` 和 "
":meth:`~dict.items` 的返回值因为那会破坏大量已有代码。 作为替代 3.x 版本是以新名称 :meth:`!viewkeys`、 "
":meth:`!viewvalues` 和 :meth:`!viewitems` 添加的。"

#: ../../whatsnew/2.7.rst:562
msgid ""
">>> d = dict((i*10, chr(65+i)) for i in range(26))\n"
">>> d\n"
"{0: 'A', 130: 'N', 10: 'B', 140: 'O', 20: ..., 250: 'Z'}\n"
">>> d.viewkeys()\n"
"dict_keys([0, 130, 10, 140, 20, 150, 30, ..., 250])"
msgstr ""
">>> d = dict((i*10, chr(65+i)) for i in range(26))\n"
">>> d\n"
"{0: 'A', 130: 'N', 10: 'B', 140: 'O', 20: ..., 250: 'Z'}\n"
">>> d.viewkeys()\n"
"dict_keys([0, 130, 10, 140, 20, 150, 30, ..., 250])"

#: ../../whatsnew/2.7.rst:568
msgid ""
"Views can be iterated over, but the key and item views also behave like "
"sets.  The ``&`` operator performs intersection, and ``|`` performs a "
"union::"
msgstr "视图可以被迭代，但键和条目视图的行为也很像是集合。 ``&`` 运算符执行交集运算，``|`` 执行并集运算::"

#: ../../whatsnew/2.7.rst:572
msgid ""
">>> d1 = dict((i*10, chr(65+i)) for i in range(26))\n"
">>> d2 = dict((i**.5, i) for i in range(1000))\n"
">>> d1.viewkeys() & d2.viewkeys()\n"
"set([0.0, 10.0, 20.0, 30.0])\n"
">>> d1.viewkeys() | range(0, 30)\n"
"set([0, 1, 130, 3, 4, 5, 6, ..., 120, 250])"
msgstr ""
">>> d1 = dict((i*10, chr(65+i)) for i in range(26))\n"
">>> d2 = dict((i**.5, i) for i in range(1000))\n"
">>> d1.viewkeys() & d2.viewkeys()\n"
"set([0.0, 10.0, 20.0, 30.0])\n"
">>> d1.viewkeys() | range(0, 30)\n"
"set([0, 1, 130, 3, 4, 5, 6, ..., 120, 250])"

#: ../../whatsnew/2.7.rst:579
msgid ""
"The view keeps track of the dictionary and its contents change as the "
"dictionary is modified::"
msgstr "视图会追踪字典及字典被修改时的内容变化::"

#: ../../whatsnew/2.7.rst:582
msgid ""
">>> vk = d.viewkeys()\n"
">>> vk\n"
"dict_keys([0, 130, 10, ..., 250])\n"
">>> d[260] = '&'\n"
">>> vk\n"
"dict_keys([0, 130, 260, 10, ..., 250])"
msgstr ""
">>> vk = d.viewkeys()\n"
">>> vk\n"
"dict_keys([0, 130, 10, ..., 250])\n"
">>> d[260] = '&'\n"
">>> vk\n"
"dict_keys([0, 130, 260, 10, ..., 250])"

#: ../../whatsnew/2.7.rst:589
msgid ""
"However, note that you can't add or remove keys while you're iterating over "
"the view::"
msgstr "但是，请注意在对视图进行迭代时你是不能添加或移除键的::"

#: ../../whatsnew/2.7.rst:592
msgid ""
">>> for k in vk:\n"
"...     d[k*2] = k\n"
"...\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"RuntimeError: dictionary changed size during iteration"
msgstr ""
">>> for k in vk:\n"
"...     d[k*2] = k\n"
"...\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"RuntimeError: dictionary changed size during iteration"

#: ../../whatsnew/2.7.rst:599
msgid ""
"You can use the view methods in Python 2.x code, and the 2to3 converter will"
" change them to the standard :meth:`~dict.keys`, :meth:`~dict.values`, and "
":meth:`~dict.items` methods."
msgstr ""
"你可以在 Python 2.x 代码中使用视图方法，2to3 转换器会将它们更改为标准的 "
":meth:`~dict.keys`、:meth:`~dict.values` 和 :meth:`~dict.items` 方法。"

#: ../../whatsnew/2.7.rst:605
msgid ":pep:`3106` - Revamping dict.keys(), .values() and .items()"
msgstr ":pep:`3106` - 改造 dict.keys()、 .values() 和 .items()"

#: ../../whatsnew/2.7.rst:606
msgid ""
"PEP written by Guido van Rossum. Backported to 2.7 by Alexandre Vassalotti; "
":issue:`1967`."
msgstr ""
"PEP 由 Guido van Rossum 撰写。 由 Alexandre Vassalotti 反向移植到 2.7；参见 "
":issue:`1967`。"

#: ../../whatsnew/2.7.rst:611
msgid "PEP 3137: The memoryview Object"
msgstr "PEP 3137: memoryview 对象"

#: ../../whatsnew/2.7.rst:613
msgid ""
"The :class:`memoryview` object provides a view of another object's memory "
"content that matches the :class:`bytes` type's interface."
msgstr ":class:`memoryview` 对象提供与 :class:`bytes` 类型的接口相匹配的另一个对象的内存内容的视图。"

#: ../../whatsnew/2.7.rst:616
msgid ""
">>> import string\n"
">>> m = memoryview(string.letters)\n"
">>> m\n"
"<memory at 0x37f850>\n"
">>> len(m)           # Returns length of underlying object\n"
"52\n"
">>> m[0], m[25], m[26]   # Indexing returns one byte\n"
"('a', 'z', 'A')\n"
">>> m2 = m[0:26]         # Slicing returns another memoryview\n"
">>> m2\n"
"<memory at 0x37f080>"
msgstr ""
">>> import string\n"
">>> m = memoryview(string.letters)\n"
">>> m\n"
"<memory at 0x37f850>\n"
">>> len(m)           # 返回底层对象的长度\n"
"52\n"
">>> m[0], m[25], m[26]   # 索引返回一个字节\n"
"('a', 'z', 'A')\n"
">>> m2 = m[0:26]         # 切片返回另一个 memoryview\n"
">>> m2\n"
"<memory at 0x37f080>"

#: ../../whatsnew/2.7.rst:631
msgid ""
"The content of the view can be converted to a string of bytes or a list of "
"integers:"
msgstr "视图的内容可被转换为一个字节串或整数列表："

#: ../../whatsnew/2.7.rst:634
msgid ""
">>> m2.tobytes()\n"
"'abcdefghijklmnopqrstuvwxyz'\n"
">>> m2.tolist()\n"
"[97, 98, 99, 100, 101, 102, 103, ... 121, 122]\n"
">>>"
msgstr ""
">>> m2.tobytes()\n"
"'abcdefghijklmnopqrstuvwxyz'\n"
">>> m2.tolist()\n"
"[97, 98, 99, 100, 101, 102, 103, ... 121, 122]\n"
">>>"

#: ../../whatsnew/2.7.rst:643
msgid ""
":class:`memoryview` objects allow modifying the underlying object if it's a "
"mutable object."
msgstr ":class:`memoryview` 对象允许对属于可变对象的下层对象进行修改。"

#: ../../whatsnew/2.7.rst:646
msgid ""
">>> m2[0] = 75\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: cannot modify read-only memory\n"
">>> b = bytearray(string.letters)  # Creating a mutable object\n"
">>> b\n"
"bytearray(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n"
">>> mb = memoryview(b)\n"
">>> mb[0] = '*'         # Assign to view, changing the bytearray.\n"
">>> b[0:5]              # The bytearray has been changed.\n"
"bytearray(b'*bcde')\n"
">>>"
msgstr ""
">>> m2[0] = 75\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: cannot modify read-only memory\n"
">>> b = bytearray(string.letters)  # 创建一个可变对象\n"
">>> b\n"
"bytearray(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n"
">>> mb = memoryview(b)\n"
">>> mb[0] = '*'         # 通过视图赋值，改变字节序列。\n"
">>> b[0:5]              # 字节序列已被改变。\n"
"bytearray(b'*bcde')\n"
">>>"

#: ../../whatsnew/2.7.rst:664
msgid ":pep:`3137` - Immutable Bytes and Mutable Buffer"
msgstr ":pep:`3137` - 不变字节和可变缓冲区"

#: ../../whatsnew/2.7.rst:665
msgid ""
"PEP written by Guido van Rossum. Implemented by Travis Oliphant, Antoine "
"Pitrou and others. Backported to 2.7 by Antoine Pitrou; :issue:`2396`."
msgstr ""
"PEP 由 Guido van Rossum 撰写。 由 Travis Oliphant、 Antoine Pitrou 等人实现。 由 Antoine"
" Pitrou 向下移植到 2.7; 参见 :issue:`2396`。"

#: ../../whatsnew/2.7.rst:672
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/2.7.rst:674
msgid "Some smaller changes made to the core Python language are:"
msgstr "对Python 语言核心进行的小改动："

#: ../../whatsnew/2.7.rst:676
msgid ""
"The syntax for set literals has been backported from Python 3.x. Curly "
"brackets are used to surround the contents of the resulting mutable set; set"
" literals are distinguished from dictionaries by not containing colons and "
"values. ``{}`` continues to represent an empty dictionary; use ``set()`` for"
" an empty set."
msgstr ""
"已从 Python 3.x 向下移植了集合字面值语法。 使用花括号来标记可变集合的内容；集合与字典的区别在于它不包含冒号及映射的值。 ``{}`` "
"仍然表示空字典；请使用 ``set()`` 来表示空集合。"

#: ../../whatsnew/2.7.rst:683
msgid ""
">>> {1, 2, 3, 4, 5}\n"
"set([1, 2, 3, 4, 5])\n"
">>> set() # empty set\n"
"set([])\n"
">>> {}    # empty dict\n"
"{}"
msgstr ""
">>> {1, 2, 3, 4, 5}\n"
"set([1, 2, 3, 4, 5])\n"
">>> set() # 空集合\n"
"set([])\n"
">>> {}    # 空字典\n"
"{}"

#: ../../whatsnew/2.7.rst:693
msgid "Backported by Alexandre Vassalotti; :issue:`2335`."
msgstr "由 Alexandre Vassalotti 向下移植;参见 :issue:`2335`。"

#: ../../whatsnew/2.7.rst:695
msgid ""
"Dictionary and set comprehensions are another feature backported from 3.x, "
"generalizing list/generator comprehensions to use the literal syntax for "
"sets and dictionaries."
msgstr "字典与集合推导式是另一个从 3.x 向下移植的特性，对列表/生成器推导式进行泛化以针对集合与字典使用字面值语法。"

#: ../../whatsnew/2.7.rst:699
msgid ""
">>> {x: x*x for x in range(6)}\n"
"{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n"
">>> {('a'*x) for x in range(6)}\n"
"set(['', 'a', 'aa', 'aaa', 'aaaa', 'aaaaa'])"
msgstr ""
">>> {x: x*x for x in range(6)}\n"
"{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n"
">>> {('a'*x) for x in range(6)}\n"
"set(['', 'a', 'aa', 'aaa', 'aaaa', 'aaaaa'])"

#: ../../whatsnew/2.7.rst:707
msgid "Backported by Alexandre Vassalotti; :issue:`2333`."
msgstr "由 Alexandre Vassalotti 向下移植;参见 :issue:`2333`。"

#: ../../whatsnew/2.7.rst:709
msgid ""
"The :keyword:`with` statement can now use multiple context managers in one "
"statement.  Context managers are processed from left to right and each one "
"is treated as beginning a new :keyword:`!with` statement. This means that::"
msgstr ""
"现在 :keyword:`with` 语句可以在一个语句中使用多个上下文管理器。 上下文管理器将按从左到右的顺序处理并且每个都会被视为开始一个新的 "
":keyword:`!with` 语句。 这意味着::"

#: ../../whatsnew/2.7.rst:714
msgid ""
"with A() as a, B() as b:\n"
"    ... suite of statements ..."
msgstr ""
"with A() as a, B() as b:\n"
"    ... 一系列语句 ..."

#: ../../whatsnew/2.7.rst:717
msgid "is equivalent to::"
msgstr "相当于::"

#: ../../whatsnew/2.7.rst:719
msgid ""
"with A() as a:\n"
"    with B() as b:\n"
"        ... suite of statements ..."
msgstr ""
"with A() as a:\n"
"    with B() as b:\n"
"        ... 一系列语句 ..."

#: ../../whatsnew/2.7.rst:723
msgid ""
"The :func:`!contextlib.nested` function provides a very similar function, so"
" it's no longer necessary and has been deprecated."
msgstr ":func:`!contextlib.nested` 函数提供了非常类似的功能，因此它不再必要并已被弃用。"

#: ../../whatsnew/2.7.rst:726
msgid ""
"(Proposed in https://codereview.appspot.com/53094; implemented by Georg "
"Brandl.)"
msgstr "（提议于 https://codereview.appspot.com/53094；由 Georg Brandl 实现。）"

#: ../../whatsnew/2.7.rst:729
msgid ""
"Conversions between floating-point numbers and strings are now correctly "
"rounded on most platforms.  These conversions occur in many different "
"places: :func:`str` on floats and complex numbers; the :class:`float` and "
":class:`complex` constructors; numeric formatting; serializing and "
"deserializing floats and complex numbers using the :mod:`marshal`, "
":mod:`pickle` and :mod:`json` modules; parsing of float and imaginary "
"literals in Python code; and :class:`~decimal.Decimal`-to-float conversion."
msgstr ""
"在大多数平台上，浮点数和字符串之间的转换现在正确地四舍五入。这些转换发生在许多不同的地方：对浮点数和复数的 "
":func:`str`；:class:`float` 和 :class:`complex` 构造函数；数值格式化；使用 "
":mod:`marshal`、:mod:`pickle` 和 :mod:`json` 模块序列化和反序列化浮点数和复数；在 Python "
"代码中解析浮点数和虚数字面量；以及 :class:`~decimal.Decimal` 到浮点数的转换。"

#: ../../whatsnew/2.7.rst:741
msgid ""
"Related to this, the :func:`repr` of a floating-point number *x* now returns"
" a result based on the shortest decimal string that's guaranteed to round "
"back to *x* under correct rounding (with round-half-to-even rounding mode)."
"  Previously it gave a string based on rounding x to 17 decimal digits."
msgstr ""
"与此相关，浮点数 *x* 的 :func:`repr` "
"现在返回基于最短十进制字符串的结果，该字符串保证在正确四舍五入（采用四舍六入五成双模式）的情况下能返回到 *x*。之前它给出的是基于将 x 四舍五入到 "
"17 位小数的字符串。"

#: ../../whatsnew/2.7.rst:749
msgid ""
"The rounding library responsible for this improvement works on Windows and "
"on Unix platforms using the gcc, icc, or suncc compilers.  There may be a "
"small number of platforms where correct operation of this code cannot be "
"guaranteed, so the code is not used on such systems.  You can find out which"
" code is being used by checking :data:`sys.float_repr_style`,  which will be"
" ``short`` if the new code is in use and ``legacy`` if it isn't."
msgstr ""
"负责此改进的舍入库在 Windows 和 Unix 平台上使用 gcc、icc 或 suncc 编译器工作。 "
"可能有一些平台无法保证此代码的正确运行，因此在这些系统上不使用此代码。你可以通过检查 :data:`sys.float_repr_style` "
"来了解正在使用的代码，如果使用新代码则为 ``short``，未使用则为 ``legacy``。"

#: ../../whatsnew/2.7.rst:757
msgid ""
"Implemented by Eric Smith and Mark Dickinson, using David Gay's "
":file:`dtoa.c` library; :issue:`7117`."
msgstr ""
"由Eric Smith和Mark Dickinson实现，使用David Gay的:file:`dtoa.c`库；参见 :issue:`7117`。"

#: ../../whatsnew/2.7.rst:760
msgid ""
"Conversions from long integers and regular integers to floating point now "
"round differently, returning the floating-point number closest to the "
"number.  This doesn't matter for small integers that can be converted "
"exactly, but for large numbers that will unavoidably lose precision, Python "
"2.7 now approximates more closely.  For example, Python 2.6 computed the "
"following::"
msgstr ""
"从长整数和普通整数转换为浮点数现在有不同的舍入方式，返回最接近该数的浮点数。对于可以精确转换的小整数，这无关紧要，但对于不可避免会丢失精度的大数，Python"
" 2.7现在更接近真实值。例如，Python 2.6计算如下："

#: ../../whatsnew/2.7.rst:767
msgid ""
">>> n = 295147905179352891391\n"
">>> float(n)\n"
"2.9514790517935283e+20\n"
">>> n - long(float(n))\n"
"65535L"
msgstr ""
">>> n = 295147905179352891391\n"
">>> float(n)\n"
"2.9514790517935283e+20\n"
">>> n - long(float(n))\n"
"65535L"

#: ../../whatsnew/2.7.rst:773
msgid ""
"Python 2.7's floating-point result is larger, but much closer to the true "
"value::"
msgstr "Python 2.7的浮点结果更大，但更接近真实值："

#: ../../whatsnew/2.7.rst:776
msgid ""
">>> n = 295147905179352891391\n"
">>> float(n)\n"
"2.9514790517935289e+20\n"
">>> n - long(float(n))\n"
"-1L"
msgstr ""
">>> n = 295147905179352891391\n"
">>> float(n)\n"
"2.9514790517935289e+20\n"
">>> n - long(float(n))\n"
"-1L"

#: ../../whatsnew/2.7.rst:782
msgid "(Implemented by Mark Dickinson; :issue:`3166`.)"
msgstr "（由Mark Dickinson实现；参见 :issue:`3166`。）"

#: ../../whatsnew/2.7.rst:784
msgid ""
"Integer division is also more accurate in its rounding behaviours.  (Also "
"implemented by Mark Dickinson; :issue:`1811`.)"
msgstr "整数除法在舍入行为上也更准确。（也由Mark Dickinson实现；参见 :issue:`1811`。）"

#: ../../whatsnew/2.7.rst:787
msgid ""
"Implicit coercion for complex numbers has been removed; the interpreter will"
" no longer ever attempt to call a :meth:`!__coerce__` method on complex "
"objects.  (Removed by Meador Inge and Mark Dickinson; :issue:`5211`.)"
msgstr ""
"已移除复数的隐式强制转换；解释器将不再尝试调用复数对象上的:meth:`!__coerce__`方法。（由Meador Inge和Mark "
"Dickinson移除；参见 :issue:`5211`。）"

#: ../../whatsnew/2.7.rst:791
msgid ""
"The :meth:`str.format` method now supports automatic numbering of the "
"replacement fields.  This makes using :meth:`str.format` more closely "
"resemble using ``%s`` formatting::"
msgstr ""
":meth:`str.format` 方法现在支持替换字段的自动编号。 这使得使用 :meth:`str.format` 更类似于使用 ``%s`` "
"格式化："

#: ../../whatsnew/2.7.rst:795
msgid ""
">>> '{}:{}:{}'.format(2009, 04, 'Sunday')\n"
"'2009:4:Sunday'\n"
">>> '{}:{}:{day}'.format(2009, 4, day='Sunday')\n"
"'2009:4:Sunday'"
msgstr ""
">>> '{}:{}:{}'.format(2009, 04, 'Sunday')\n"
"'2009:4:Sunday'\n"
">>> '{}:{}:{day}'.format(2009, 4, day='Sunday')\n"
"'2009:4:Sunday'"

#: ../../whatsnew/2.7.rst:800
msgid ""
"The auto-numbering takes the fields from left to right, so the first "
"``{...}`` specifier will use the first argument to :meth:`str.format`, the "
"next specifier will use the next argument, and so on.  You can't mix auto-"
"numbering and explicit numbering -- either number all of your specifier "
"fields or none of them -- but you can mix auto-numbering and named fields, "
"as in the second example above.  (Contributed by Eric Smith; :issue:`5237`.)"
msgstr ""
"自动编号从左到右获取字段，因此第一个 ``{...}`` 指定符将使用 :meth:`str.format` "
"的第一个参数，下一个指定符将使用下一个参数，依此类推。不能混合使用自动编号和显式编号——要么为所有指定符字段编号，要么不编号——但可以混合使用自动编号和命名字段，如上第二个示例所示。（由"
" Eric Smith 贡献；参见 :issue:`5237`。）"

#: ../../whatsnew/2.7.rst:807
msgid ""
"Complex numbers now correctly support usage with :func:`format`, and default"
" to being right-aligned. Specifying a precision or comma-separation applies "
"to both the real and imaginary parts of the number, but a specified field "
"width and alignment is applied to the whole of the resulting ``1.5+3j`` "
"output.  (Contributed by Eric Smith; :issue:`1588` and :issue:`7988`.)"
msgstr ""
"复数现在正确支持与 :func:`format` 的使用，并默认右对齐。指定精度或逗号分隔适用于数字的实部和虚部，但指定的字段宽度和对齐应用于整个 "
"``1.5+3j`` 输出。（由 Eric Smith 贡献；参见 :issue:`1588` 和 :issue:`7988`。）"

#: ../../whatsnew/2.7.rst:814
msgid ""
"The 'F' format code now always formats its output using uppercase "
"characters, so it will now produce 'INF' and 'NAN'. (Contributed by Eric "
"Smith; :issue:`3382`.)"
msgstr ""
"“F”格式代码现在总是使用大写字符格式化其输出，因此它现在将产生“INF”和“NAN”。（由 Eric Smith 贡献；参见 "
":issue:`3382`。）"

#: ../../whatsnew/2.7.rst:818
msgid ""
"A low-level change: the :meth:`object.__format__` method now triggers a "
":exc:`PendingDeprecationWarning` if it's passed a format string, because the"
" :meth:`!__format__` method for :class:`object` converts the object to a "
"string representation and formats that.  Previously the method silently "
"applied the format string to the string representation, but that could hide "
"mistakes in Python code.  If you're supplying formatting information such as"
" an alignment or precision, presumably you're expecting the formatting to be"
" applied in some object-specific way.  (Fixed by Eric Smith; :issue:`7994`.)"
msgstr ""
"一个底层修改：:meth:`object.__format__` 方法现在在传递格式字符串时触发 "
":exc:`PendingDeprecationWarning`，因为 :meth:`!__format__` 方法对于 :class:`object`"
" 将对象转换为字符串表示并进行格式化。以前该方法静默地应用格式字符串到字符串表示，但这可能会隐藏 Python "
"代码中的错误。如果你提供格式化信息，如对齐或精度，你可能期望以某种对象特定的方式进行格式化。（由 Eric Smith 修复；参见 "
":issue:`7994`。）"

#: ../../whatsnew/2.7.rst:828
msgid ""
"The :func:`int` and :func:`!long` types gained a ``bit_length`` method that "
"returns the number of bits necessary to represent its argument in binary::"
msgstr ""
":func:`int` 和 :func:`!long` 类型获得了一个 ``bit_length`` 方法，该方法返回表示其参数所需的二进制位数："

#: ../../whatsnew/2.7.rst:832
msgid ""
">>> n = 37\n"
">>> bin(n)\n"
"'0b100101'\n"
">>> n.bit_length()\n"
"6\n"
">>> n = 2**123-1\n"
">>> n.bit_length()\n"
"123\n"
">>> (n+1).bit_length()\n"
"124"
msgstr ""
">>> n = 37\n"
">>> bin(n)\n"
"'0b100101'\n"
">>> n.bit_length()\n"
"6\n"
">>> n = 2**123-1\n"
">>> n.bit_length()\n"
"123\n"
">>> (n+1).bit_length()\n"
"124"

#: ../../whatsnew/2.7.rst:843
msgid "(Contributed by Fredrik Johansson and Victor Stinner; :issue:`3439`.)"
msgstr "（由 Fredrik Johansson 和 Victor Stinner 贡献；参见 :issue:`3439`。）"

#: ../../whatsnew/2.7.rst:845
msgid ""
"The :keyword:`import` statement will no longer try an absolute import if a "
"relative import (e.g. ``from .os import sep``) fails.  This fixes a bug, but"
" could possibly break certain :keyword:`!import` statements that were only "
"working by accident.  (Fixed by Meador Inge; :issue:`7902`.)"
msgstr ""
"如果相对导入（例如 ``from .os import sep``）失败，:keyword:`import` "
"语句将不再尝试绝对导入。这修复了一个错误，但可能会破坏某些仅凭偶然才工作的 :keyword:`!import` 语句。（由 Meador Inge "
"修复；参见 :issue:`7902`。）"

#: ../../whatsnew/2.7.rst:851
msgid ""
"It's now possible for a subclass of the built-in :class:`!unicode` type to "
"override the :meth:`!__unicode__` method.  (Implemented by Victor Stinner; "
":issue:`1583863`.)"
msgstr ""
"现在，内置 :class:`!unicode` 类型的子类可以重写 :meth:`!__unicode__` 方法。（由 Victor Stinner "
"实现；参见 :issue:`1583863`。）"

#: ../../whatsnew/2.7.rst:855
msgid ""
"The :class:`bytearray` type's :meth:`~bytearray.translate` method now "
"accepts ``None`` as its first argument.  (Fixed by Georg Brandl; "
":issue:`4759`.)"
msgstr ""
":class:`bytearray` 类型的 :meth:`~bytearray.translate` 方法现在接受 ``None`` "
"作为其第一个参数。（由 Georg Brandl 修复；参见 :issue:`4759`。）"

#: ../../whatsnew/2.7.rst:861
msgid ""
"When using :class:`@classmethod <classmethod>` and :class:`@staticmethod "
"<staticmethod>` to wrap methods as class or static methods, the wrapper "
"object now exposes the wrapped function as their :attr:`~method.__func__` "
"attribute. (Contributed by Amaury Forgeot d'Arc, after a suggestion by "
"George Sakkis; :issue:`5982`.)"
msgstr ""
"当使用 :class:`@classmethod <classmethod>` 和 :class:`@staticmethod "
"<staticmethod>` 将方法包装为类方法或静态方法时，包装器对象现在将其包装的函数公开为它们的 "
":attr:`~method.__func__` 属性。（由 Amaury Forgeot d'Arc 贡献，基于 George Sakkis "
"的建议；参见 :issue:`5982`。）"

#: ../../whatsnew/2.7.rst:869 ../../whatsnew/2.7.rst:2466
msgid ""
"When a restricted set of attributes were set using ``__slots__``, deleting "
"an unset attribute would not raise :exc:`AttributeError` as you would "
"expect.  Fixed by Benjamin Peterson; :issue:`7604`.)"
msgstr ""
"当使用 ``__slots__`` 设置一组受限属性时，删除未设置的属性不会像预期那样引发 :exc:`AttributeError`。（由 "
"Benjamin Peterson 修复；参见 :issue:`7604`。）"

#: ../../whatsnew/2.7.rst:873
msgid ""
"Two new encodings are now supported: \"cp720\", used primarily for Arabic "
"text; and \"cp858\", a variant of CP 850 that adds the euro symbol.  (CP720 "
"contributed by Alexander Belchenko and Amaury Forgeot d'Arc in "
":issue:`1616979`; CP858 contributed by Tim Hatch in :issue:`8016`.)"
msgstr ""
"现在支持两种新的编码：\"cp720\"，主要用于阿拉伯文本；以及 \"cp858\"，是 CP 850 的变体，增加了欧元符号。（CP720 由 "
"Alexander Belchenko 和 Amaury Forgeot d'Arc 在 :issue:`1616979` 中贡献；CP858 由 "
"Tim Hatch 在 :issue:`8016` 中贡献。）"

#: ../../whatsnew/2.7.rst:879
msgid ""
"The :class:`!file` object will now set the :attr:`!filename` attribute on "
"the :exc:`IOError` exception when trying to open a directory on POSIX "
"platforms (noted by Jan Kaliszewski; :issue:`4764`), and now explicitly "
"checks for and forbids writing to read-only file objects instead of trusting"
" the C library to catch and report the error (fixed by Stefan Krah; "
":issue:`5677`)."
msgstr ""
":class:`!file` 对象现在在 POSIX 平台上尝试打开目录时会在 :exc:`IOError` 异常上设置 "
":attr:`!filename` 属性（由 Jan Kaliszewski 指出；参见 "
":issue:`4764`），并且现在明确检查并禁止对只读文件对象进行写入，而不是依赖 C 库来捕获和报告错误（由 Stefan Krah 修复；参见 "
":issue:`5677`）。"

#: ../../whatsnew/2.7.rst:886
msgid ""
"The Python tokenizer now translates line endings itself, so the "
":func:`compile` built-in function now accepts code using any line-ending "
"convention.  Additionally, it no longer requires that the code end in a "
"newline."
msgstr ""
"Python 词法分析器现在会自行处理行尾符，因此内置函数 :func:`compile` 现在可以接受采用任意行尾约定（如 Windows 的 "
"CRLF、Unix 的 LF 或旧版 Mac 的 CR）的代码。此外，该函数不再强制要求代码必须以换行符结尾。"

#: ../../whatsnew/2.7.rst:891
msgid ""
"Extra parentheses in function definitions are illegal in Python 3.x, meaning"
" that you get a syntax error from ``def f((x)): pass``.  In Python3-warning "
"mode, Python 2.7 will now warn about this odd usage. (Noted by James "
"Lingard; :issue:`7362`.)"
msgstr ""
"在Python 3.x中，函数定义中的额外括号是非法的，这意味着你会从``def f((x)): "
"pass``中得到一个语法错误。在Python3警告模式下，Python 2.7现在会警告这种奇怪的用法。（由James Lingard指出；参见 "
":issue:`7362`。）"

#: ../../whatsnew/2.7.rst:896
msgid ""
"It's now possible to create weak references to old-style class objects.  "
"New-style classes were always weak-referenceable.  (Fixed by Antoine Pitrou;"
" :issue:`8268`.)"
msgstr "现在可以创建对旧式类对象的弱引用。新式类始终可以弱引用。（由 Antoine Pitrou 修复；参见 :issue:`8268`。）"

#: ../../whatsnew/2.7.rst:900
msgid ""
"When a module object is garbage-collected, the module's dictionary is now "
"only cleared if no one else is holding a reference to the dictionary "
"(:issue:`7140`)."
msgstr "当一个模块对象被垃圾回收时，该模块的字典现在只有在没有其他引用时才会被清除（参见 :issue:`7140`）。"

#: ../../whatsnew/2.7.rst:909
msgid "Interpreter Changes"
msgstr "解释器改动"

#: ../../whatsnew/2.7.rst:911
msgid ""
"A new environment variable, :envvar:`PYTHONWARNINGS`, allows controlling "
"warnings.  It should be set to a string containing warning settings, "
"equivalent to those used with the :option:`-W` switch, separated by commas. "
"(Contributed by Brian Curtin; :issue:`7301`.)"
msgstr ""
"一个新的环境变量，:envvar:`PYTHONWARNINGS`，允许控制警告。 它应设置为包含警告设置的字符串，等同于使用 :option:`-W`"
" 开关的设置，用逗号分隔。 （由 Brian Curtin 贡献；参见 :issue:`7301`。）"

#: ../../whatsnew/2.7.rst:917
msgid ""
"For example, the following setting will print warnings every time they "
"occur, but turn warnings from the :mod:`Cookie <http.cookies>` module into "
"an error.  (The exact syntax for setting an environment variable varies "
"across operating systems and shells.)"
msgstr ""
"例如，以下设置将在每次出现警告时打印它们，但将来自 :mod:`Cookie <http.cookies>` "
"模块的警告转换为错误。（设置环境变量的确切语法因操作系统和shell而异。）"

#: ../../whatsnew/2.7.rst:924
msgid "export PYTHONWARNINGS=all,error:::Cookie:0"
msgstr "export PYTHONWARNINGS=all,error:::Cookie:0"

#: ../../whatsnew/2.7.rst:930
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/2.7.rst:932
msgid "Several performance enhancements have been added:"
msgstr "已添加多项性能优化改进："

#: ../../whatsnew/2.7.rst:934
msgid ""
"A new opcode was added to perform the initial setup for :keyword:`with` "
"statements, looking up the :meth:`~object.__enter__` and "
":meth:`~object.__exit__` methods.  (Contributed by Benjamin Peterson.)"
msgstr ""
"添加了一个新的操作码，用于执行 :keyword:`with` 语句的初始设置，查找 :meth:`~object.__enter__` 和 "
":meth:`~object.__exit__` 方法。 （由 Benjamin Peterson 贡献。）"

#: ../../whatsnew/2.7.rst:938
msgid ""
"The garbage collector now performs better for one common usage pattern: when"
" many objects are being allocated without deallocating any of them.  This "
"would previously take quadratic time for garbage collection, but now the "
"number of full garbage collections is reduced as the number of objects on "
"the heap grows. The new logic only performs a full garbage collection pass "
"when the middle generation has been collected 10 times and when the number "
"of survivor objects from the middle generation exceeds 10% of the number of "
"objects in the oldest generation.  (Suggested by Martin von Löwis and "
"implemented by Antoine Pitrou; :issue:`4074`.)"
msgstr ""
"垃圾回收器现在对一种常见使用模式表现更好：当大量对象被分配而没有释放任何对象时。此前，垃圾回收需要二次方时间，但现在随着堆中对象数量的增长，完整垃圾回收的次数减少了。新逻辑仅在中间代被收集10次且中间代幸存对象数量超过最老代对象数量的10%时，才执行一次完整的垃圾回收。"
" （由 Martin von Löwis 建议，Antoine Pitrou 实现；参见 :issue:`4074`。）"

#: ../../whatsnew/2.7.rst:949
msgid ""
"The garbage collector tries to avoid tracking simple containers which can't "
"be part of a cycle. In Python 2.7, this is now true for tuples and dicts "
"containing atomic types (such as ints, strings, etc.). Transitively, a dict "
"containing tuples of atomic types won't be tracked either. This helps reduce"
" the cost of each garbage collection by decreasing the number of objects to "
"be considered and traversed by the collector. (Contributed by Antoine "
"Pitrou; :issue:`4688`.)"
msgstr ""
"垃圾回收器会尽量避免追踪那些不可能形成循环引用的简单容器对象。在 Python 2.7 "
"中，对于仅包含原子类型（如整数、字符串等）的元组和字典，现在均符合这一特性。由此推及，包含原子类型元组的字典同样不会被追踪。这一优化通过减少垃圾回收器需要处理和遍历的对象数量，有效降低了每次垃圾回收的开销。（由"
" Antoine Pitrou 贡献；参见 :issue:`4688`。）"

#: ../../whatsnew/2.7.rst:958
msgid ""
"Long integers are now stored internally either in base ``2**15`` or in base "
"``2**30``, the base being determined at build time.  Previously, they were "
"always stored in base ``2**15``.  Using base ``2**30`` gives significant "
"performance improvements on 64-bit machines, but benchmark results on 32-bit"
" machines have been mixed.  Therefore, the default is to use base ``2**30`` "
"on 64-bit machines and base ``2**15`` on 32-bit machines; on Unix, there's a"
" new configure option :option:`!--enable-big-digits` that can be used to "
"override this default."
msgstr ""
"长整型数值现在在内部存储时采用 ``2**15`` 或 ``2**30`` 作为基数，具体采用哪种基数在构建（编译）时确定。此前，长整型数值始终采用 "
"``2**15`` 作为存储基数。使用 ``2**30`` 作为基数能在 64 位机器上带来显著的性能提升，但在 32 "
"位机器上的基准测试结果则好坏参半。因此，默认情况下，在 64 位机器上使用 ``2**30`` 作为基数，在 32 位机器上使用 ``2**15`` "
"作为基数；在 Unix 系统上，新增了一个配置选项 `--enable-big-digits`（对应选项标记为 :option:`!--enable-"
"big-digits`），可用于覆盖这一默认设置。"

#: ../../whatsnew/2.7.rst:967
msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new structseq :data:`!sys.long_info` that provides information about the "
"internal format, giving the number of bits per digit and the size in bytes "
"of the C type used to store each digit::"
msgstr ""
"除了性能改进外，这一变化对最终用户应该是不可见的，有一个例外：为了测试和调试目的，新增了一个structseq "
":data:`!sys.long_info`，它提供了有关内部格式的信息，包括每个数字的位数和用于存储每个数字的C类型的大小（以字节为单位）："

#: ../../whatsnew/2.7.rst:974
msgid ""
">>> import sys\n"
">>> sys.long_info\n"
"sys.long_info(bits_per_digit=30, sizeof_digit=4)"
msgstr ""
">>> import sys\n"
">>> sys.long_info\n"
"sys.long_info(bits_per_digit=30, sizeof_digit=4)"

#: ../../whatsnew/2.7.rst:978
msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr "（由 Mark Dickinson在 :issue:`4258` 贡献）"

#: ../../whatsnew/2.7.rst:980
msgid ""
"Another set of changes made long objects a few bytes smaller: 2 bytes "
"smaller on 32-bit systems and 6 bytes on 64-bit. (Contributed by Mark "
"Dickinson; :issue:`5260`.)"
msgstr ""
"另一组更改使长对象缩小了几字节：在32位系统上缩小了2字节，在64位系统上缩小了6字节。（由Mark Dickinson贡献；参见 "
":issue:`5260`。）"

#: ../../whatsnew/2.7.rst:984
msgid ""
"The division algorithm for long integers has been made faster by tightening "
"the inner loop, doing shifts instead of multiplications, and fixing an "
"unnecessary extra iteration. Various benchmarks show speedups of between 50%"
" and 150% for long integer divisions and modulo operations. (Contributed by "
"Mark Dickinson; :issue:`5512`.) Bitwise operations are also significantly "
"faster (initial patch by Gregory Smith; :issue:`1087418`)."
msgstr ""
"通过收紧内循环、进行位移而不是乘法以及修复不必要的额外迭代，长整数的除法算法已经变得更快。各种基准测试显示，长整数除法和取模操作的加速在50%到150%之间。（由Mark"
" Dickinson贡献；参见 :issue:`5512`。）位运算也显著更快（初始补丁由Gregory Smith提供；参见 "
":issue:`1087418`）。"

#: ../../whatsnew/2.7.rst:993
msgid ""
"The implementation of ``%`` checks for the left-side operand being a Python "
"string and special-cases it; this results in a 1--3% performance increase "
"for applications that frequently use ``%`` with strings, such as templating "
"libraries. (Implemented by Collin Winter; :issue:`5176`.)"
msgstr ""
"``%`` 的实现检查左侧操作数是否为 Python 字符串并进行特殊处理；这使频繁使用 ``%`` 与字符串的应用程序（如模板库）的性能提高了 1% "
"到 3%。 （由 Collin Winter 实现; :issue:`5176`。）"

#: ../../whatsnew/2.7.rst:999
msgid ""
"List comprehensions with an ``if`` condition are compiled into faster "
"bytecode.  (Patch by Antoine Pitrou, back-ported to 2.7 by Jeffrey Yasskin; "
":issue:`4715`.)"
msgstr ""
"带有``if``条件的列表推导被编译成更快的字节码。（由Antoine Pitrou提供补丁，Jeffrey Yasskin向下移植到2.7；参见 "
":issue:`4715`。）"

#: ../../whatsnew/2.7.rst:1003
msgid ""
"Converting an integer or long integer to a decimal string was made faster by"
" special-casing base 10 instead of using a generalized conversion function "
"that supports arbitrary bases. (Patch by Gawain Bolton; :issue:`6713`.)"
msgstr ""
"通过特殊处理基数10而不是使用支持任意基数的通用转换函数，将整数或长整数转换为十进制字符串的速度得到了提升。（由Gawain Bolton提供补丁；参见"
" :issue:`6713`。）"

#: ../../whatsnew/2.7.rst:1008
msgid ""
"The :meth:`!split`, :meth:`!replace`, :meth:`!rindex`, :meth:`!rpartition`, "
"and :meth:`!rsplit` methods of string-like types (strings, Unicode strings, "
"and :class:`bytearray` objects) now use a fast reverse-search algorithm "
"instead of a character-by-character scan.  This is sometimes faster by a "
"factor of 10.  (Added by Florent Xicluna; :issue:`7462` and :issue:`7622`.)"
msgstr ""
"字符串型类型（字符串、Unicode字符串和 :class:`bytearray` 对象）的 "
":meth:`!split`、:meth:`!replace`、:meth:`!rindex`、:meth:`!rpartition` 和 "
":meth:`!rsplit` 方法现在使用快速的逆向搜索算法，而不是逐字符扫描。这在某些情况下可以快10倍。（由 Florent Xicluna "
"添加；参见 :issue:`7462` 和 :issue:`7622`。）"

#: ../../whatsnew/2.7.rst:1015
msgid ""
"The :mod:`pickle` and :mod:`!cPickle` modules now automatically intern the "
"strings used for attribute names, reducing memory usage of the objects "
"resulting from unpickling.  (Contributed by Jake McGuire; :issue:`5084`.)"
msgstr ""
":mod:`pickle` 和 :mod:`!cPickle` 模块现在自动内联用于属性名称的字符串，减少了反序列化生成的对象的内存使用。（由 Jake"
" McGuire 贡献；参见 :issue:`5084`。）"

#: ../../whatsnew/2.7.rst:1020
msgid ""
"The :mod:`!cPickle` module now special-cases dictionaries, nearly halving "
"the time required to pickle them. (Contributed by Collin Winter; "
":issue:`5670`.)"
msgstr ""
":mod:`!cPickle` 模块现在对字典进行了特殊处理，将序列化它们所需的时间几乎减半。（由 Collin Winter 贡献；参见 "
":issue:`5670`。）"

#: ../../whatsnew/2.7.rst:1027
msgid "New and Improved Modules"
msgstr "新增和改进的模块"

#: ../../whatsnew/2.7.rst:1029
msgid ""
"As in every release, Python's standard library received a number of "
"enhancements and bug fixes.  Here's a partial list of the most notable "
"changes, sorted alphabetically by module name. Consult the :file:`Misc/NEWS`"
" file in the source tree for a more complete list of changes, or look "
"through the Subversion logs for all the details."
msgstr ""
"与每个版本一样，Python 的标准库收到了许多增强和 bug 修复。以下是一些最显著变化的的部分列表，按模块名称字母顺序排序。查阅源树中的 "
":file:`Misc/NEWS` 文件以获取更完整的变化列表，或通过 Subversion 日志查看所有详细信息。"

#: ../../whatsnew/2.7.rst:1035
msgid ""
"The :mod:`bdb` module's base debugging class :class:`~bdb.Bdb` gained a "
"feature for skipping modules.  The constructor now takes an iterable "
"containing glob-style patterns such as ``django.*``; the debugger will not "
"step into stack frames from a module that matches one of these patterns. "
"(Contributed by Maru Newby after a suggestion by Senthil Kumaran; "
":issue:`5142`.)"
msgstr ""
":mod:`bdb` 模块的基调试类 :class:`~bdb.Bdb` 增加了一个跳过模块的功能。构造函数现在接受一个包含 glob 风格模式（如 "
"``django.*``）的可迭代对象；调试器将不会进入与这些模式之一匹配的模块的堆栈帧。（由 Maru Newby 在 Senthil Kumaran"
" 的建议后贡献；参见 :issue:`5142`。）"

#: ../../whatsnew/2.7.rst:1043
msgid ""
"The :mod:`binascii` module now supports the buffer API, so it can be used "
"with :class:`memoryview` instances and other similar buffer objects. "
"(Backported from 3.x by Florent Xicluna; :issue:`7703`.)"
msgstr ""
":mod:`binascii` 模块现在支持缓冲区 API，因此可以与 :class:`memoryview` 实例和其他类似的缓冲区对象一起使用。（由"
" Florent Xicluna 从 3.x 向下移植；参见 :issue:`7703`。）"

#: ../../whatsnew/2.7.rst:1047
msgid ""
"Updated module: the :mod:`!bsddb` module has been updated from 4.7.2devel9 "
"to version 4.8.4 of `the pybsddb package "
"<https://www.jcea.es/programacion/pybsddb.htm>`__. The new version features "
"better Python 3.x compatibility, various bug fixes, and adds several new "
"BerkeleyDB flags and methods. (Updated by Jesús Cea Avión; :issue:`8156`.  "
"The pybsddb changelog can be read at "
"https://hg.jcea.es/pybsddb/file/tip/ChangeLog.)"
msgstr ""
"更新模块：:mod:`!bsddb` 模块已从 4.7.2devel9 更新到 `pybsddb 包 "
"<https://www.jcea.es/programacion/pybsddb.htm>`__ 的 4.8.4 版本。新版本具有更好的 Python"
" 3.x 兼容性，各种 bug 修复，并添加了几个新的 BerkeleyDB 标志和方法。（由 Jesú Cea Avión 更新；参见 "
":issue:`8156`。pybsddb 的更改日志可以在 https://hg.jcea.es/pybsddb/file/tip/ChangeLog"
" 查看。）"

#: ../../whatsnew/2.7.rst:1055
msgid ""
"The :mod:`bz2` module's :class:`~bz2.BZ2File` now supports the context "
"management protocol, so you can write ``with bz2.BZ2File(...) as f:``. "
"(Contributed by Hagen Fürstenau; :issue:`3860`.)"
msgstr ""
":mod:`bz2` 模块的 :class:`~bz2.BZ2File` 现在支持上下文管理协议，因此你可以编写 ``with "
"bz2.BZ2File(...) as f:``。（由 Hagen Fürstenau 贡献；参见 :issue:`3860`。）"

#: ../../whatsnew/2.7.rst:1059
msgid ""
"New class: the :class:`~collections.Counter` class in the :mod:`collections`"
" module is useful for tallying data.  :class:`~collections.Counter` "
"instances behave mostly like dictionaries but return zero for missing keys "
"instead of raising a :exc:`KeyError`:"
msgstr ""
"新增类：:mod:`collections` 模块中的 :class:`~collections.Counter` "
"类适用于统计数据。:class:`~collections.Counter` 实例的行为大多类似于字典，但对于缺失的键返回零而不是引发 "
":exc:`KeyError`："

#: ../../whatsnew/2.7.rst:1064
msgid ""
">>> from collections import Counter\n"
">>> c = Counter()\n"
">>> for letter in 'here is a sample of english text':\n"
"...   c[letter] += 1\n"
"...\n"
">>> c\n"
"Counter({' ': 6, 'e': 5, 's': 3, 'a': 2, 'i': 2, 'h': 2,\n"
"'l': 2, 't': 2, 'g': 1, 'f': 1, 'm': 1, 'o': 1, 'n': 1,\n"
"'p': 1, 'r': 1, 'x': 1})\n"
">>> c['e']\n"
"5\n"
">>> c['z']\n"
"0"
msgstr ""
">>> from collections import Counter\n"
">>> c = Counter()\n"
">>> for letter in 'here is a sample of english text':\n"
"...   c[letter] += 1\n"
"...\n"
">>> c\n"
"Counter({' ': 6, 'e': 5, 's': 3, 'a': 2, 'i': 2, 'h': 2,\n"
"'l': 2, 't': 2, 'g': 1, 'f': 1, 'm': 1, 'o': 1, 'n': 1,\n"
"'p': 1, 'r': 1, 'x': 1})\n"
">>> c['e']\n"
"5\n"
">>> c['z']\n"
"0"

#: ../../whatsnew/2.7.rst:1081
msgid ""
"There are three additional :class:`~collections.Counter` methods. "
":meth:`~collections.Counter.most_common` returns the N most common elements "
"and their counts.  :meth:`~collections.Counter.elements` returns an iterator"
" over the contained elements, repeating each element as many times as its "
"count. :meth:`~collections.Counter.subtract` takes an iterable and subtracts"
" one for each element instead of adding; if the argument is a dictionary or "
"another :class:`Counter`, the counts are subtracted. ::"
msgstr ""
"有三个额外的 :class:`~collections.Counter` "
"方法。:meth:`~collections.Counter.most_common` 返回最常见的 N "
"个元素及其计数。:meth:`~collections.Counter.elements` "
"返回一个迭代器，遍历包含的元素，每个元素重复的次数与其计数相同。:meth:`~collections.Counter.subtract` "
"接受一个可迭代对象，并为每个元素减一而不是加一；如果参数是字典或另一个 :class:`Counter`，则减去相应的计数。::"

#: ../../whatsnew/2.7.rst:1091
msgid ""
">>> c.most_common(5)\n"
"[(' ', 6), ('e', 5), ('s', 3), ('a', 2), ('i', 2)]\n"
">>> c.elements() ->\n"
"   'a', 'a', ' ', ' ', ' ', ' ', ' ', ' ',\n"
"   'e', 'e', 'e', 'e', 'e', 'g', 'f', 'i', 'i',\n"
"   'h', 'h', 'm', 'l', 'l', 'o', 'n', 'p', 's',\n"
"   's', 's', 'r', 't', 't', 'x'\n"
">>> c['e']\n"
"5\n"
">>> c.subtract('very heavy on the letter e')\n"
">>> c['e']    # Count is now lower\n"
"-1"
msgstr ""
">>> c.most_common(5)\n"
"[(' ', 6), ('e', 5), ('s', 3), ('a', 2), ('i', 2)]\n"
">>> c.elements() ->\n"
"   'a', 'a', ' ', ' ', ' ', ' ', ' ', ' ',\n"
"   'e', 'e', 'e', 'e', 'e', 'g', 'f', 'i', 'i',\n"
"   'h', 'h', 'm', 'l', 'l', 'o', 'n', 'p', 's',\n"
"   's', 's', 'r', 't', 't', 'x'\n"
">>> c['e']\n"
"5\n"
">>> c.subtract('very heavy on the letter e')\n"
">>> c['e']    # Count 现在降低了\n"
"-1"

#: ../../whatsnew/2.7.rst:1104
msgid "Contributed by Raymond Hettinger; :issue:`1696199`."
msgstr "由 Raymond Hettinger 贡献；参见 :issue:`1696199`。"

#: ../../whatsnew/2.7.rst:1108
msgid ""
"New class: :class:`~collections.OrderedDict` is described in the earlier "
"section :ref:`pep-0372`."
msgstr "新增类：:class:`~collections.OrderedDict` 在之前的章节 :ref:`pep-0372` 中有描述。"

#: ../../whatsnew/2.7.rst:1111
msgid ""
"New method: The :class:`~collections.deque` data type now has a "
":meth:`~collections.deque.count` method that returns the number of contained"
" elements equal to the supplied argument *x*, and a "
":meth:`~collections.deque.reverse` method that reverses the elements of the "
"deque in-place.  :class:`~collections.deque` also exposes its maximum length"
" as the read-only :attr:`~collections.deque.maxlen` attribute. (Both "
"features added by Raymond Hettinger.)"
msgstr ""
"新方法：:class:`~collections.deque` 数据类型现在有一个 :meth:`~collections.deque.count` "
"方法，返回等于提供的参数 *x* 的元素数量，以及一个 :meth:`~collections.deque.reverse` 方法，原地反转 deque"
" 中的元素。:class:`~collections.deque` 还将其最大长度暴露为只读的 "
":attr:`~collections.deque.maxlen` 属性。（这两个特性均由 Raymond Hettinger 添加。)"

#: ../../whatsnew/2.7.rst:1119
msgid ""
"The :class:`~collections.namedtuple` class now has an optional *rename* "
"parameter. If *rename* is true, field names that are invalid because they've"
" been repeated or aren't legal Python identifiers will be renamed to legal "
"names that are derived from the field's position within the list of fields:"
msgstr ""
":class:`~collections.namedtuple` 类现在有一个可选的 *rename* 参数。如果 *rename* "
"为真，则由于重复或不是合法的 Python 标识符而无效的字段名将被重命名为基于字段在字段列表中的位置的合法名称："

#: ../../whatsnew/2.7.rst:1130
msgid "(Added by Raymond Hettinger; :issue:`1818`.)"
msgstr "（由 Raymond Hettinger 添加；参见 :issue:`1818`。）"

#: ../../whatsnew/2.7.rst:1132
msgid ""
"Finally, the :class:`~collections.abc.Mapping` abstract base class now "
"returns :data:`NotImplemented` if a mapping is compared to another type that"
" isn't a :class:`Mapping`. (Fixed by Daniel Stutzbach; :issue:`8729`.)"
msgstr ""
"最后，:class:`~collections.abc.Mapping` 抽象基类在将一个映射对象与非 :class:`Mapping` "
"类型的其他类型进行比较时，现在会返回 :data:`NotImplemented`。（该问题由 Daniel Stutzbach 修复；参见 "
":issue:`8729`。）"

#: ../../whatsnew/2.7.rst:1137
msgid ""
"Constructors for the parsing classes in the :mod:`ConfigParser "
"<configparser>` module now take an *allow_no_value* parameter, defaulting to"
" false; if true, options without values will be allowed.  For example::"
msgstr ""
":mod:`ConfigParser <configparser>` 模块中的解析类构造函数现在接受一个 *allow_no_value* "
"参数，默认为假；如果为真，将允许没有值的选项。例如："

#: ../../whatsnew/2.7.rst:1141
msgid ""
">>> import ConfigParser, StringIO\n"
">>> sample_config = \"\"\"\n"
"... [mysqld]\n"
"... user = mysql\n"
"... pid-file = /var/run/mysqld/mysqld.pid\n"
"... skip-bdb\n"
"... \"\"\"\n"
">>> config = ConfigParser.RawConfigParser(allow_no_value=True)\n"
">>> config.readfp(StringIO.StringIO(sample_config))\n"
">>> config.get('mysqld', 'user')\n"
"'mysql'\n"
">>> print config.get('mysqld', 'skip-bdb')\n"
"None\n"
">>> print config.get('mysqld', 'unknown')\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NoOptionError: No option 'unknown' in section: 'mysqld'"
msgstr ""
">>> import ConfigParser, StringIO\n"
">>> sample_config = \"\"\"\n"
"... [mysqld]\n"
"... user = mysql\n"
"... pid-file = /var/run/mysqld/mysqld.pid\n"
"... skip-bdb\n"
"... \"\"\"\n"
">>> config = ConfigParser.RawConfigParser(allow_no_value=True)\n"
">>> config.readfp(StringIO.StringIO(sample_config))\n"
">>> config.get('mysqld', 'user')\n"
"'mysql'\n"
">>> print config.get('mysqld', 'skip-bdb')\n"
"None\n"
">>> print config.get('mysqld', 'unknown')\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NoOptionError: No option 'unknown' in section: 'mysqld'"

#: ../../whatsnew/2.7.rst:1159
msgid "(Contributed by Mats Kindahl; :issue:`7005`.)"
msgstr "（由 Mats Kindahl 贡献；参见 :issue:`7005`。）"

#: ../../whatsnew/2.7.rst:1161
msgid ""
"Deprecated function: :func:`!contextlib.nested`, which allows handling more "
"than one context manager with a single :keyword:`with` statement, has been "
"deprecated, because the :keyword:`!with` statement now supports multiple "
"context managers."
msgstr ""
"已弃用的函数：:func:`!contextlib.nested`，它允许使用单个 :keyword:`with` "
"语句处理多个上下文管理器，已被弃用，因为 :keyword:`!with` 语句现在支持多个上下文管理器。"

#: ../../whatsnew/2.7.rst:1166
msgid ""
"The :mod:`cookielib <http.cookiejar>` module now ignores cookies that have "
"an invalid version field, one that doesn't contain an integer value.  (Fixed"
" by John J. Lee; :issue:`3924`.)"
msgstr ""
":mod:`cookielib <http.cookiejar>` 模块现在忽略具有无效版本字段的 cookie，即不包含整数值的版本字段。（由 "
"John J. Lee 修复；参见 :issue:`3924`。）"

#: ../../whatsnew/2.7.rst:1170
msgid ""
"The :mod:`copy` module's :func:`~copy.deepcopy` function will now correctly "
"copy bound instance methods.  (Implemented by Robert Collins; "
":issue:`1515`.)"
msgstr ""
":mod:`copy` 模块的 :func:`~copy.deepcopy` 函数现在将正确复制绑定的实例方法。（由 Robert Collins "
"实现；参见 :issue:`1515`。）"

#: ../../whatsnew/2.7.rst:1174
msgid ""
"The :mod:`ctypes` module now always converts ``None`` to a C ``NULL`` "
"pointer for arguments declared as pointers.  (Changed by Thomas Heller; "
":issue:`4606`.)  The underlying `libffi library "
"<https://sourceware.org/libffi/>`__ has been updated to version 3.0.9, "
"containing various fixes for different platforms.  (Updated by Matthias "
"Klose; :issue:`8142`.)"
msgstr ""
":mod:`ctypes` 模块现在总是将 ``None`` 转换为 C 的 ``NULL`` 指针，用于声明为指针的参数。（由 Thomas "
"Heller 改动；参见 :issue:`4606`。）底层的 `libffi 库 "
"<https://sourceware.org/libffi/>`__ 已更新至版本 3.0.9，包含对不同平台的多项修复。（由 Matthias "
"Klose 更新；参见 :issue:`8142`。）"

#: ../../whatsnew/2.7.rst:1181
msgid ""
"New method: the :mod:`datetime` module's :class:`~datetime.timedelta` class "
"gained a :meth:`~datetime.timedelta.total_seconds` method that returns the "
"number of seconds in the duration.  (Contributed by Brian Quinlan; "
":issue:`5788`.)"
msgstr ""
"新方法：:mod:`datetime` 模块的 :class:`~datetime.timedelta` 类增加了一个 "
":meth:`~datetime.timedelta.total_seconds` 方法，返回持续时间中的秒数。（由 Brian Quinlan "
"贡献；参见 :issue:`5788`。）"

#: ../../whatsnew/2.7.rst:1185
msgid ""
"New method: the :class:`~decimal.Decimal` class gained a "
":meth:`~decimal.Decimal.from_float` class method that performs an exact "
"conversion of a floating-point number to a :class:`!Decimal`. This exact "
"conversion strives for the closest decimal approximation to the floating-"
"point representation's value; the resulting decimal value will therefore "
"still include the inaccuracy, if any. For example, "
"``Decimal.from_float(0.1)`` returns "
"``Decimal('0.1000000000000000055511151231257827021181583404541015625')``. "
"(Implemented by Raymond Hettinger; :issue:`4796`.)"
msgstr ""
"新方法：:class:`~decimal.Decimal` 类增加了一个 :meth:`~decimal.Decimal.from_float` "
"类方法，用于将浮点数精确转换为 "
":class:`!Decimal`。这种精确转换力求最接近浮点表示值的十进制近似值；因此，结果十进制值仍会包含任何不准确的部分。例如，``Decimal.from_float(0.1)``"
" 返回 "
"``Decimal('0.1000000000000000055511151231257827021181583404541015625')``。（由 "
"Raymond Hettinger 实现；参见 :issue:`4796`。）"

#: ../../whatsnew/2.7.rst:1196
msgid ""
"Comparing instances of :class:`~decimal.Decimal` with floating-point numbers"
" now produces sensible results based on the numeric values of the operands."
"  Previously such comparisons would fall back to Python's default rules for "
"comparing objects, which produced arbitrary results based on their type.  "
"Note that you still cannot combine :class:`!Decimal` and floating point in "
"other operations such as addition, since you should be explicitly choosing "
"how to convert between float and :class:`!Decimal`.  (Fixed by Mark "
"Dickinson; :issue:`2531`.)"
msgstr ""
"现在，将 :class:`~decimal.Decimal` 实例与浮点数进行比较，会根据操作数的数值产生合理的结果。以前，此类比较会回退到 "
"Python 的默认对象比较规则，这会根据它们的类型产生任意结果。请注意，你仍然不能在其他操作（如加法）中组合 :class:`!Decimal` "
"和浮点数，因为你应该明确选择如何在浮点数和 :class:`!Decimal` 之间进行转换。（由 Mark Dickinson 修复；参见 "
":issue:`2531`。）"

#: ../../whatsnew/2.7.rst:1205
msgid ""
"The constructor for :class:`~decimal.Decimal` now accepts floating-point "
"numbers (added by Raymond Hettinger; :issue:`8257`) and non-European Unicode"
" characters such as Arabic-Indic digits (contributed by Mark Dickinson; "
":issue:`6595`)."
msgstr ""
":class:`~decimal.Decimal` 的构造函数现在接受浮点数（由 Raymond Hettinger 添加；参见 "
":issue:`8257`）和非欧洲 Unicode 字符，如阿拉伯-印度数字（由 Mark Dickinson 贡献；参见 "
":issue:`6595`）。"

#: ../../whatsnew/2.7.rst:1210
msgid ""
"Most of the methods of the :class:`~decimal.Context` class now accept "
"integers as well as :class:`~decimal.Decimal` instances; the only exceptions"
" are the :meth:`~decimal.Context.canonical` and "
":meth:`~decimal.Context.is_canonical` methods.  (Patch by Juan José Conti; "
":issue:`7633`.)"
msgstr ""
":class:`~decimal.Context` 类的大多数方法现在既接受整数也接受 :class:`~decimal.Decimal` "
"实例；唯一的例外是 :meth:`~decimal.Context.canonical` 和 "
":meth:`~decimal.Context.is_canonical` 方法。 (由 Juan José Conti 提交补丁；参见 "
":issue:`7633`)"

#: ../../whatsnew/2.7.rst:1215
msgid ""
"When using :class:`~decimal.Decimal` instances with a string's "
":meth:`~str.format` method, the default alignment was previously left-"
"alignment.  This has been changed to right-alignment, which is more sensible"
" for numeric types.  (Changed by Mark Dickinson; :issue:`6857`.)"
msgstr ""
"当使用 :class:`~decimal.Decimal` 实例与字符串的 :meth:`~str.format` "
"方法时，之前的默认对齐方式是左对齐。这已被更改为右对齐，这对于数值类型更为合理。 (由 Mark Dickinson 更改；参见 "
":issue:`6857`)"

#: ../../whatsnew/2.7.rst:1220 ../../whatsnew/2.7.rst:2484
msgid ""
"Comparisons involving a signaling NaN value (or ``sNAN``) now signal "
":const:`~decimal.InvalidOperation` instead of silently returning a true or "
"false value depending on the comparison operator.  Quiet NaN values (or "
"``NaN``) are now hashable.  (Fixed by Mark Dickinson; :issue:`7279`.)"
msgstr ""
"涉及信号 NaN 值（或 ``sNAN``）的比较现在会触发 "
":const:`~decimal.InvalidOperation`，而不是根据比较运算符静默地返回真或假值。静默 NaN 值（或 "
"``NaN``）现在可以被哈希。 (由 Mark Dickinson 修复；参见 :issue:`7279`)"

#: ../../whatsnew/2.7.rst:1226
msgid ""
"The :mod:`difflib` module now produces output that is more compatible with "
"modern :command:`diff`/:command:`patch` tools through one small change, "
"using a tab character instead of spaces as a separator in the header giving "
"the filename.  (Fixed by Anatoly Techtonik; :issue:`7585`.)"
msgstr ""
":mod:`difflib` 模块现在通过一个小改动，使其输出与现代 :command:`diff`/:command:`patch` "
"工具更加兼容，即在头部给出文件名时使用制表符而不是空格作为分隔符。 (由 Anatoly Techtonik 修复；参见 :issue:`7585`)"

#: ../../whatsnew/2.7.rst:1232
msgid ""
"The Distutils ``sdist`` command now always regenerates the :file:`MANIFEST` "
"file, since even if the :file:`MANIFEST.in` or :file:`setup.py` files "
"haven't been modified, the user might have created some new files that "
"should be included. (Fixed by Tarek Ziadé; :issue:`8688`.)"
msgstr ""
"Distutils 的 ``sdist`` 命令现在总是重新生成 :file:`MANIFEST` 文件，因为即使 "
":file:`MANIFEST.in` 或 :file:`setup.py` 文件没有被修改，用户也可能创建了一些应该包含的新文件。 (由 Tarek "
"Ziadé 修复；参见 :issue:`8688`)"

#: ../../whatsnew/2.7.rst:1238
msgid ""
"The :mod:`doctest` module's :const:`~doctest.IGNORE_EXCEPTION_DETAIL` flag "
"will now ignore the name of the module containing the exception being "
"tested.  (Patch by Lennart Regebro; :issue:`7490`.)"
msgstr ""
":mod:`doctest` 模块的 :const:`~doctest.IGNORE_EXCEPTION_DETAIL` "
"标志现在将忽略包含被测试异常的模块名称。 (由 Lennart Regebro 提交补丁；参见 :issue:`7490`)"

#: ../../whatsnew/2.7.rst:1242
msgid ""
"The :mod:`email` module's :class:`~email.message.Message` class will now "
"accept a Unicode-valued payload, automatically converting the payload to the"
" encoding specified by :attr:`!output_charset`. (Added by R. David Murray; "
":issue:`1368247`.)"
msgstr ""
":mod:`email` 模块的 :class:`~email.message.Message` 类现在将接受一个 Unicode "
"值的有效负载，并自动将有效负载转换为 :attr:`!output_charset` 指定的编码。 (由 R. David Murray 添加；参见 "
":issue:`1368247`)"

#: ../../whatsnew/2.7.rst:1247
msgid ""
"The :class:`~fractions.Fraction` class now accepts a single float or "
":class:`~decimal.Decimal` instance, or two rational numbers, as arguments to"
" its constructor.  (Implemented by Mark Dickinson; rationals added in "
":issue:`5812`, and float/decimal in :issue:`8294`.)"
msgstr ""
":class:`~fractions.Fraction` 类现在接受单个浮点数或 :class:`~decimal.Decimal` "
"实例，或两个有理数作为其构造函数的参数。（由 Mark Dickinson 实现；有理数在 :issue:`5812` 中添加，浮点数/小数在 "
":issue:`8294` 中添加。）"

#: ../../whatsnew/2.7.rst:1253
msgid ""
"Ordering comparisons (``<``, ``<=``, ``>``, ``>=``) between fractions and "
"complex numbers now raise a :exc:`TypeError`. This fixes an oversight, "
"making the :class:`~fractions.Fraction` match the other numeric types."
msgstr ""
"分数和复数之间的排序比较（``<``, ``<=``, ``>``, ``>=``）现在会引发 "
":exc:`TypeError`。这一改进修复了一处疏漏，使得 :class:`~fractions.Fraction` "
"类型的行为与其他数值类型保持一致。"

#: ../../whatsnew/2.7.rst:1260
msgid ""
"New class: :class:`~ftplib.FTP_TLS` in the :mod:`ftplib` module provides "
"secure FTP connections using TLS encapsulation of authentication as well as "
"subsequent control and data transfers. (Contributed by Giampaolo Rodola; "
":issue:`2054`.)"
msgstr ""
"新增类：:mod:`ftplib` 模块中的 :class:`~ftplib.FTP_TLS` 类提供使用 TLS "
"封装的认证以及后续控制和数据传输的安全 FTP 连接。（由 Giampaolo Rodola 贡献；参见 :issue:`2054`。）"

#: ../../whatsnew/2.7.rst:1266
msgid ""
"The :meth:`~ftplib.FTP.storbinary` method for binary uploads can now restart"
" uploads thanks to an added *rest* parameter (patch by Pablo Mouzo; "
":issue:`6845`.)"
msgstr ""
":meth:`~ftplib.FTP.storbinary` 方法用于二进制上传，现在可以通过新增的 *rest* 参数重新启动上传（由 Pablo "
"Mouzo 提交补丁；参见 :issue:`6845`。）"

#: ../../whatsnew/2.7.rst:1270
msgid ""
"New class decorator: :func:`~functools.total_ordering` in the "
":mod:`functools` module takes a class that defines an :meth:`~object.__eq__`"
" method and one of :meth:`~object.__lt__`, :meth:`~object.__le__`, "
":meth:`~object.__gt__`, or :meth:`~object.__ge__`, and generates the missing"
" comparison methods.  Since the :meth:`!__cmp__` method is being deprecated "
"in Python 3.x, this decorator makes it easier to define ordered classes. "
"(Added by Raymond Hettinger; :issue:`5479`.)"
msgstr ""
"新的类装饰器：:mod:`functools` 模块中的 :func:`~functools.total_ordering` 接受一个定义了 "
":meth:`~object.__eq__` 方法和 :meth:`~object.__lt__`、 :meth:`~object.__le__`、 "
":meth:`~object.__gt__` 或 :meth:`~object.__ge__` 中之一的类，并生成缺失的比较方法。由于 "
":meth:`!__cmp__` 方法在 Python 3.x 中已被弃用，此装饰器使得定义有序类更为简便。（由 Raymond Hettinger "
"添加；参见 :issue:`5479`。）"

#: ../../whatsnew/2.7.rst:1278
msgid ""
"New function: :func:`~functools.cmp_to_key` will take an old-style "
"comparison function that expects two arguments and return a new callable "
"that can be used as the *key* parameter to functions such as :func:`sorted`,"
" :func:`min` and :func:`max`, etc.  The primary intended use is to help with"
" making code compatible with Python 3.x. (Added by Raymond Hettinger.)"
msgstr ""
"新增函数：:func:`~functools.cmp_to_key` 将接受一个期望两个参数的旧式比较函数，并返回一个新的可调用对象，该对象可以用作 "
":func:`sorted`、 :func:`min` 和 :func:`max` 等函数的 *key* 参数。其主要用途是帮助代码兼容 Python "
"3.x。（由 Raymond Hettinger 添加。）"

#: ../../whatsnew/2.7.rst:1285
msgid ""
"New function: the :mod:`gc` module's :func:`~gc.is_tracked` returns true if "
"a given instance is tracked by the garbage collector, false otherwise. "
"(Contributed by Antoine Pitrou; :issue:`4688`.)"
msgstr ""
"新增函数：:mod:`gc` 模块的 :func:`~gc.is_tracked` 在给定实例被垃圾回收器跟踪时返回 true，否则返回 "
"false。（由 Antoine Pitrou 贡献；参见 :issue:`4688`。）"

#: ../../whatsnew/2.7.rst:1289
msgid ""
"The :mod:`gzip` module's :class:`~gzip.GzipFile` now supports the context "
"management protocol, so you can write ``with gzip.GzipFile(...) as f:`` "
"(contributed by Hagen Fürstenau; :issue:`3860`), and it now implements the "
":class:`io.BufferedIOBase` ABC, so you can wrap it with "
":class:`io.BufferedReader` for faster processing (contributed by Nir Aides; "
":issue:`7471`). It's also now possible to override the modification time "
"recorded in a gzipped file by providing an optional timestamp to the "
"constructor.  (Contributed by Jacques Frechet; :issue:`4272`.)"
msgstr ""
":mod:`gzip` 模块的 :class:`~gzip.GzipFile` 现在支持上下文管理协议，因此你可以写 ``with "
"gzip.GzipFile(...) as f:`` (由 Hagen Fürstenau 贡献; :issue:`3860`)，并且它现在实现了 "
":class:`io.BufferedIOBase` ABC，因此你可以用 :class:`io.BufferedReader` 包装它以加快处理速度 "
"(由 Nir Aides 贡献; :issue:`7471`)。 现在还可以通过在构造函数中提供可选的时间戳来覆盖 gzip 文件中记录的修改时间。 "
"（由 Jacques Frechet 贡献; :issue:`4272`。）"

#: ../../whatsnew/2.7.rst:1299
msgid ""
"Files in gzip format can be padded with trailing zero bytes; the :mod:`gzip`"
" module will now consume these trailing bytes.  (Fixed by Tadek Pietraszek "
"and Brian Curtin; :issue:`2846`.)"
msgstr ""
"gzip 格式的文件可以用尾随零字节填充；:mod:`gzip` 模块现在将消耗这些尾随字节。（由 Tadek Pietraszek 和 Brian "
"Curtin 修复;参见 :issue:`2846`。）"

#: ../../whatsnew/2.7.rst:1303
msgid ""
"New attribute: the :mod:`hashlib` module now has an :attr:`!algorithms` "
"attribute containing a tuple naming the supported algorithms. In Python 2.7,"
" ``hashlib.algorithms`` contains ``('md5', 'sha1', 'sha224', 'sha256', "
"'sha384', 'sha512')``. (Contributed by Carl Chenet; :issue:`7418`.)"
msgstr ""
"新属性：:mod:`hashlib` 模块现在有一个 :attr:`!algorithms` 属性，包含一个命名支持算法的元组。在 Python 2.7"
" 中，``hashlib.algorithms`` 包含 ``('md5', 'sha1', 'sha224', 'sha256', 'sha384',"
" 'sha512')``。（由 Carl Chenet 贡献;参见 :issue:`7418`。）"

#: ../../whatsnew/2.7.rst:1309
msgid ""
"The default :class:`~http.client.HTTPResponse` class used by the "
":mod:`httplib <http>` module now supports buffering, resulting in much "
"faster reading of HTTP responses. (Contributed by Kristján Valur Jónsson; "
":issue:`4879`.)"
msgstr ""
":mod:`httplib <http>` 模块使用的默认 :class:`~http.client.HTTPResponse` "
"类现在支持缓冲，从而大大加快了 HTTP 响应的读取速度。（由 Kristján Valur Jónsson 贡献;参见 :issue:`4879`。）"

#: ../../whatsnew/2.7.rst:1313
msgid ""
"The :class:`~http.client.HTTPConnection` and "
":class:`~http.client.HTTPSConnection` classes now support a *source_address*"
" parameter, a ``(host, port)`` 2-tuple giving the source address that will "
"be used for the connection. (Contributed by Eldon Ziegler; :issue:`3972`.)"
msgstr ""
":class:`~http.client.HTTPConnection` 和 :class:`~http.client.HTTPSConnection`"
" 类现在支持一个 *source_address* 参数，这是一个 ``(host, port)`` 2元组，给出了将用于连接的源地址。（由 Eldon"
" Ziegler 贡献;参见 :issue:`3972`。）"

#: ../../whatsnew/2.7.rst:1318
msgid ""
"The :mod:`!ihooks` module now supports relative imports.  Note that "
":mod:`!ihooks` is an older module for customizing imports, superseded by the"
" :mod:`!imputil` module added in Python 2.0. (Relative import support added "
"by Neil Schemenauer.)"
msgstr ""
":mod:`!ihooks` 模块现在支持相对导入。请注意，:mod:`!ihooks` 是一个用于自定义导入的较旧模块，已被 Python 2.0 "
"中添加的 :mod:`!imputil` 模块取代。（相对导入支持由 Neil Schemenauer 添加。）"

#: ../../whatsnew/2.7.rst:1325
msgid ""
"The :mod:`imaplib` module now supports IPv6 addresses. (Contributed by Derek"
" Morr; :issue:`1655`.)"
msgstr ":mod:`imaplib` 模块现在支持 IPv6 地址。（由 Derek Morr 贡献;参见 :issue:`1655`。）"

#: ../../whatsnew/2.7.rst:1328
msgid ""
"New function: the :mod:`inspect` module's :func:`~inspect.getcallargs` takes"
" a callable and its positional and keyword arguments, and figures out which "
"of the callable's parameters will receive each argument, returning a "
"dictionary mapping argument names to their values.  For example::"
msgstr ""
"新功能：:mod:`inspect` 模块的 :func:`~inspect.getcallargs` "
"函数接受一个可调用对象及其位置和关键字参数，并确定该可调用对象的哪些参数将接收每个参数，返回一个将参数名映射到其值的字典。例如："

#: ../../whatsnew/2.7.rst:1333
msgid ""
">>> from inspect import getcallargs\n"
">>> def f(a, b=1, *pos, **named):\n"
"...     pass\n"
"...\n"
">>> getcallargs(f, 1, 2, 3)\n"
"{'a': 1, 'b': 2, 'pos': (3,), 'named': {}}\n"
">>> getcallargs(f, a=2, x=4)\n"
"{'a': 2, 'b': 1, 'pos': (), 'named': {'x': 4}}\n"
">>> getcallargs(f)\n"
"Traceback (most recent call last):\n"
"...\n"
"TypeError: f() takes at least 1 argument (0 given)"
msgstr ""
">>> from inspect import getcallargs\n"
">>> def f(a, b=1, *pos, **named):\n"
"...     pass\n"
"...\n"
">>> getcallargs(f, 1, 2, 3)\n"
"{'a': 1, 'b': 2, 'pos': (3,), 'named': {}}\n"
">>> getcallargs(f, a=2, x=4)\n"
"{'a': 2, 'b': 1, 'pos': (), 'named': {'x': 4}}\n"
">>> getcallargs(f)\n"
"Traceback (most recent call last):\n"
"...\n"
"TypeError: f() takes at least 1 argument (0 given)"

#: ../../whatsnew/2.7.rst:1346
msgid "Contributed by George Sakkis; :issue:`3135`."
msgstr "由 Georg Sakkis 在 :issue:`3135` 中贡献。"

#: ../../whatsnew/2.7.rst:1348
msgid ""
"Updated module: The :mod:`io` library has been upgraded to the version "
"shipped with Python 3.1.  For 3.1, the I/O library was entirely rewritten in"
" C and is 2 to 20 times faster depending on the task being performed.  The "
"original Python version was renamed to the :mod:`!_pyio` module."
msgstr ""
"更新模块：:mod:`io` 库已升级到随 Python 3.1 一起发布的版本。对于 3.1，I/O 库完全用 C "
"语言重写，根据执行的任务不同，速度提高了 2 到 20 倍。原始的 Python 版本被重命名为 :mod:`!_pyio` 模块。"

#: ../../whatsnew/2.7.rst:1353
msgid ""
"One minor resulting change: the :class:`io.TextIOBase` class now has an "
":attr:`~io.TextIOBase.errors` attribute giving the error setting used for "
"encoding and decoding errors (one of ``'strict'``, ``'replace'``, "
"``'ignore'``)."
msgstr ""
"一个小的变化：:class:`io.TextIOBase` 类现在有一个 :attr:`~io.TextIOBase.errors` "
"属性，用于给出编码和解码错误使用的错误设置（``'strict'``、``'replace'``、``'ignore'`` 之一）。"

#: ../../whatsnew/2.7.rst:1358
msgid ""
"The :class:`io.FileIO` class now raises an :exc:`OSError` when passed an "
"invalid file descriptor.  (Implemented by Benjamin Peterson; :issue:`4991`.)"
"  The :meth:`~io.IOBase.truncate` method now preserves the file position; "
"previously it would change the file position to the end of the new file.  "
"(Fixed by Pascal Chambon; :issue:`6939`.)"
msgstr ""
":class:`io.FileIO` 类在传递无效文件描述符时现在会引发 :exc:`OSError`。 （由 Benjamin Peterson "
"实现；参见 :issue:`4991`。） :meth:`~io.IOBase.truncate` "
"方法现在保留文件位置；之前它会将文件位置更改为新文件的末尾。 （由 Pascal Chambon 修复；参见 :issue:`6939`。）"

#: ../../whatsnew/2.7.rst:1364
msgid ""
"New function: ``itertools.compress(data, selectors)`` takes two iterators.  "
"Elements of *data* are returned if the corresponding value in *selectors* is"
" true::"
msgstr ""
"新增函数：``itertools.compress(data, selectors)`` 接受两个迭代器。如果 *selectors* "
"中对应的值为真，则返回 *data* 中的元素："

#: ../../whatsnew/2.7.rst:1368
msgid ""
"itertools.compress('ABCDEF', [1,0,1,0,1,1]) =>\n"
"  A, C, E, F"
msgstr ""
"itertools.compress('ABCDEF', [1,0,1,0,1,1]) =>\n"
"  A, C, E, F"

#: ../../whatsnew/2.7.rst:1373
msgid ""
"New function: ``itertools.combinations_with_replacement(iter, r)`` returns "
"all the possible *r*-length combinations of elements from the iterable "
"*iter*.  Unlike :func:`~itertools.combinations`, individual elements can be "
"repeated in the generated combinations::"
msgstr ""
"新增函数：``itertools.combinations_with_replacement(iter, r)`` 返回可迭代对象 *iter* "
"中所有可能的 *r* 长度组合。与 :func:`~itertools.combinations` 不同，生成组合中的单个元素可以重复："

#: ../../whatsnew/2.7.rst:1378
msgid ""
"itertools.combinations_with_replacement('abc', 2) =>\n"
"  ('a', 'a'), ('a', 'b'), ('a', 'c'),\n"
"  ('b', 'b'), ('b', 'c'), ('c', 'c')"
msgstr ""
"itertools.combinations_with_replacement('abc', 2) =>\n"
"  ('a', 'a'), ('a', 'b'), ('a', 'c'),\n"
"  ('b', 'b'), ('b', 'c'), ('c', 'c')"

#: ../../whatsnew/2.7.rst:1382
msgid ""
"Note that elements are treated as unique depending on their position in the "
"input, not their actual values."
msgstr "请注意，元素被视为唯一是根据它们在输入中的位置，而不是它们的实际值。"

#: ../../whatsnew/2.7.rst:1385
msgid ""
"The :func:`itertools.count` function now has a *step* argument that allows "
"incrementing by values other than 1.  :func:`~itertools.count` also now "
"allows keyword arguments, and using non-integer values such as floats or "
":class:`~decimal.Decimal` instances.  (Implemented by Raymond Hettinger; "
":issue:`5032`.)"
msgstr ""
":func:`itertools.count` 函数现在有一个 *step* 参数，允许以非1的值递增。:func:`~itertools.count`"
" 也现在允许关键字参数，并使用非整数值，例如浮点数或 :class:`~decimal.Decimal` 实例。（由 Raymond Hettinger"
" 实现；参见 :issue:`5032`。）"

#: ../../whatsnew/2.7.rst:1391
msgid ""
":func:`itertools.combinations` and :func:`itertools.product` previously "
"raised :exc:`ValueError` for values of *r* larger than the input iterable.  "
"This was deemed a specification error, so they now return an empty iterator."
"  (Fixed by Raymond Hettinger; :issue:`4816`.)"
msgstr ""
":func:`itertools.combinations` 和 :func:`itertools.product` 函数此前在参数 *r* "
"的值大于输入可迭代对象长度时会引发 :exc:`ValueError` "
"异常。经认定这是规范定义上的错误，因此现在当出现这种情况时，这两个函数会返回一个空迭代器。（由 Raymond Hettinger 修复；参见 "
":issue:`4816`。）"

#: ../../whatsnew/2.7.rst:1396
msgid ""
"Updated module: The :mod:`json` module was upgraded to version 2.0.9 of the "
"simplejson package, which includes a C extension that makes encoding and "
"decoding faster. (Contributed by Bob Ippolito; :issue:`4136`.)"
msgstr ""
"更新模块: :mod:`json` 模块已升级到 simplejson 包的 2.0.9 版，该版本包括一个 C 扩展，使编码和解码更快。 （由 Bob"
" Ippolito 贡献；参见 :issue:`4136`。）"

#: ../../whatsnew/2.7.rst:1401
msgid ""
"To support the new :class:`collections.OrderedDict` type, :func:`json.load` "
"now has an optional *object_pairs_hook* parameter that will be called with "
"any object literal that decodes to a list of pairs. (Contributed by Raymond "
"Hettinger; :issue:`5381`.)"
msgstr ""
"为了支持新的 :class:`collections.OrderedDict` 类型，:func:`json.load` 现在有一个可选的 "
"*object_pairs_hook* 参数，它将用任何解码为对列表的对象字面量调用。（由 Raymond Hettinger 贡献；参见 "
":issue:`5381`。）"

#: ../../whatsnew/2.7.rst:1406
msgid ""
"The :mod:`mailbox` module's :class:`~mailbox.Maildir` class now records the "
"timestamp on the directories it reads, and only re-reads them if the "
"modification time has subsequently changed.  This improves performance by "
"avoiding unneeded directory scans.  (Fixed by A.M. Kuchling and Antoine "
"Pitrou; :issue:`1607951`, :issue:`6896`.)"
msgstr ""
":mod:`mailbox` 模块的 :class:`~mailbox.Maildir` "
"类现在记录它读取的目录的时间戳，并且只有在修改时间随后发生变化时才重新读取它们。这通过避免不必要的目录扫描来提高性能。（由 A.M. Kuchling "
"和 Antoine Pitrou 修复；参见 :issue:`1607951`、 :issue:`6896`。）"

#: ../../whatsnew/2.7.rst:1412
msgid ""
"New functions: the :mod:`math` module gained :func:`~math.erf` and "
":func:`~math.erfc` for the error function and the complementary error "
"function, :func:`~math.expm1` which computes ``e**x - 1`` with more "
"precision than using :func:`~math.exp` and subtracting 1, "
":func:`~math.gamma` for the Gamma function, and :func:`~math.lgamma` for the"
" natural log of the Gamma function. (Contributed by Mark Dickinson and "
"nirinA raseliarison; :issue:`3366`.)"
msgstr ""
"新增函数：:mod:`math` 模块新增了 :func:`~math.erf` 和 :func:`~math.erfc` "
"用于计算误差函数和互补误差函数，:func:`~math.expm1` 用于更精确地计算 ``e**x - 1`` 而不是使用 "
":func:`~math.exp` 并减去 1，:func:`~math.gamma` 用于计算伽马函数，以及 :func:`~math.lgamma`"
" 用于计算伽马函数的自然对数。（由 Mark Dickinson 和 nirinA raseliarison 贡献；参见 :issue:`3366`。）"

#: ../../whatsnew/2.7.rst:1420
msgid ""
"The :mod:`multiprocessing` module's :class:`!Manager*` classes can now be "
"passed a callable that will be called whenever a subprocess is started, "
"along with a set of arguments that will be passed to the callable. "
"(Contributed by lekma; :issue:`5585`.)"
msgstr ""
":mod:`multiprocessing` 模块的 :class:`!Manager*` "
"类现在可以传递一个可调用对象，该对象将在子进程启动时被调用，同时还可以传递一组将传递给该可调用对象的参数。（由 lekma 贡献；参见 "
":issue:`5585`。）"

#: ../../whatsnew/2.7.rst:1426
msgid ""
"The :class:`~multiprocessing.pool.Pool` class, which controls a pool of "
"worker processes, now has an optional *maxtasksperchild* parameter.  Worker "
"processes will perform the specified number of tasks and then exit, causing "
"the :class:`!Pool` to start a new worker.  This is useful if tasks may leak "
"memory or other resources, or if some tasks will cause the worker to become "
"very large. (Contributed by Charles Cazabon; :issue:`6963`.)"
msgstr ""
"控制工作进程池的 :class:`~multiprocessing.pool.Pool` 类现在有一个可选的 *maxtasksperchild* "
"参数。工作进程将执行指定数量的任务后退出，导致 :class:`!Pool` "
"启动新的工作进程。这在任务可能泄漏内存或其他资源，或者某些任务会使工作进程变得非常大时非常有用。（由 Charles Cazabon 贡献；参见 "
":issue:`6963`。）"

#: ../../whatsnew/2.7.rst:1434
msgid ""
"The :mod:`!nntplib` module now supports IPv6 addresses. (Contributed by "
"Derek Morr; :issue:`1664`.)"
msgstr ":mod:`!nntplib` 模块现在支持 IPv6 地址。（由 Derek Morr 贡献；参见 :issue:`1664`。）"

#: ../../whatsnew/2.7.rst:1437
msgid ""
"New functions: the :mod:`os` module wraps the following POSIX system calls: "
":func:`~os.getresgid` and :func:`~os.getresuid`, which return the real, "
"effective, and saved GIDs and UIDs; :func:`~os.setresgid` and "
":func:`~os.setresuid`, which set real, effective, and saved GIDs and UIDs to"
" new values; :func:`~os.initgroups`, which initialize the group access list "
"for the current process.  (GID/UID functions contributed by Travis H.; "
":issue:`6508`.  Support for initgroups added by Jean-Paul Calderone; "
":issue:`7333`.)"
msgstr ""
"新增函数：:mod:`os` 模块封装了以下 POSIX 系统调用：:func:`~os.getresgid` 和 "
":func:`~os.getresuid`，它们返回实际、有效和保存的 GID 和 UID；:func:`~os.setresgid` 和 "
":func:`~os.setresuid`，它们将实际、有效和保存的 GID 和 UID "
"设置为新值；:func:`~os.initgroups`，用于初始化当前进程的组访问列表。（GID/UID 函数由 Travis H. 贡献；参见 "
":issue:`6508`。initgroups 支持由 Jean-Paul Calderone 添加；参见 :issue:`7333`。）"

#: ../../whatsnew/2.7.rst:1447
msgid ""
"The :func:`os.fork` function now re-initializes the import lock in the child"
" process; this fixes problems on Solaris when :func:`~os.fork` is called "
"from a thread.  (Fixed by Zsolt Cserna; :issue:`7242`.)"
msgstr ""
":func:`os.fork` 函数现在在子进程中重新初始化导入锁；这解决了在 Solaris 上从线程中调用 :func:`~os.fork` "
"时的问题。（由 Zsolt Cserna 修复；参见 :issue:`7242`。）"

#: ../../whatsnew/2.7.rst:1451
msgid ""
"In the :mod:`os.path` module, the :func:`~os.path.normpath` and "
":func:`~os.path.abspath` functions now preserve Unicode; if their input path"
" is a Unicode string, the return value is also a Unicode string. "
"(:meth:`~os.path.normpath` fixed by Matt Giuca in :issue:`5827`; "
":meth:`~os.path.abspath` fixed by Ezio Melotti in :issue:`3426`.)"
msgstr ""
"在 :mod:`os.path` 模块中，:func:`~os.path.normpath` 和 :func:`~os.path.abspath` "
"函数现在可以保留 Unicode；如果它们的输入路径是 Unicode 字符串，返回值也是 Unicode "
"字符串。(:meth:`~os.path.normpath` 由 Matt Giuca 在 :issue:`5827` "
"中修复；:meth:`~os.path.abspath` 由 Ezio Melotti 在 :issue:`3426` 修复。)"

#: ../../whatsnew/2.7.rst:1457
msgid ""
"The :mod:`pydoc` module now has help for the various symbols that Python "
"uses.  You can now do ``help('<<')`` or ``help('@')``, for example. "
"(Contributed by David Laban; :issue:`4739`.)"
msgstr ""
":mod:`pydoc` 模块现在提供了 Python 使用的各种符号的帮助信息。例如，你现在可以执行 ``help('<<')`` 或 "
"``help('@')``。（由 David Laban 贡献；参见 :issue:`4739`）"

#: ../../whatsnew/2.7.rst:1461
msgid ""
"The :mod:`re` module's :func:`~re.split`, :func:`~re.sub`, and "
":func:`~re.subn` now accept an optional *flags* argument, for consistency "
"with the other functions in the module.  (Added by Gregory P. Smith.)"
msgstr ""
":mod:`re` 模块的 :func:`~re.split`、:func:`~re.sub` 和 :func:`~re.subn` 现在接受一个可选的"
" *flags* 参数，以便与其他模块中的函数保持一致。（由 Gregory P. Smith 添加）"

#: ../../whatsnew/2.7.rst:1465
msgid ""
"New function: :func:`~runpy.run_path` in the :mod:`runpy` module will "
"execute the code at a provided *path* argument.  *path* can be the path of a"
" Python source file (:file:`example.py`), a compiled bytecode file "
"(:file:`example.pyc`), a directory (:file:`./package/`), or a zip archive "
"(:file:`example.zip`).  If a directory or zip path is provided, it will be "
"added to the front of ``sys.path`` and the module :mod:`__main__` will be "
"imported.  It's expected that the directory or zip contains a "
":file:`__main__.py`; if it doesn't, some other :file:`__main__.py` might be "
"imported from a location later in ``sys.path``.  This makes more of the "
"machinery of :mod:`runpy` available to scripts that want to mimic the way "
"Python's command line processes an explicit path name. (Added by Nick "
"Coghlan; :issue:`6816`.)"
msgstr ""
"新增函数：:mod:`runpy` 模块中的 :func:`~runpy.run_path` 将执行提供的 *path* 参数中的代码。*path* "
"可以是 Python 源文件路径 (:file:`example.py`)、编译的字节码文件路径 (:file:`example.pyc`)、目录 "
"(:file:`./package/`) 或 zip 归档文件路径 (:file:`example.zip`)。如果提供的是目录或 zip "
"路径，它将被添加到 ``sys.path`` 的前面，并导入模块 :mod:`__main__`。预期目录或 zip 包含一个 "
":file:`__main__.py`；如果没有，可能会从 ``sys.path`` 中后面的位置导入其他 "
":file:`__main__.py`。这使得脚本能够利用 :mod:`runpy` 模块的更多机制，从而模拟 Python "
"命令行处理显式路径名称的方式。（由 Nick Coghlan 添加；参见 :issue:`6816`）"

#: ../../whatsnew/2.7.rst:1479
msgid ""
"New function: in the :mod:`shutil` module, :func:`~shutil.make_archive` "
"takes a filename, archive type (zip or tar-format), and a directory path, "
"and creates an archive containing the directory's contents. (Added by Tarek "
"Ziadé.)"
msgstr ""
"新增函数：在 :mod:`shutil` 模块中，:func:`~shutil.make_archive` 接受一个文件名、归档类型（zip 或 tar"
" 格式）和目录路径，并创建一个包含目录内容的归档文件。（由 Tarek Ziadé 添加）"

#: ../../whatsnew/2.7.rst:1484
msgid ""
":mod:`shutil`'s :func:`~shutil.copyfile` and :func:`~shutil.copytree` "
"functions now raise a :exc:`~shutil.SpecialFileError` exception when asked "
"to copy a named pipe.  Previously the code would treat named pipes like a "
"regular file by opening them for reading, and this would block indefinitely."
"  (Fixed by Antoine Pitrou; :issue:`3002`.)"
msgstr ""
":mod:`shutil` 模块的 :func:`~shutil.copyfile` 和 :func:`~shutil.copytree` "
"函数现在在尝试复制命名管道时将引发 :exc:`~shutil.SpecialFileError` "
"异常。此前代码会将命名管道视为普通文件并尝试打开它们进行读取，这会导致无限阻塞。（由 Antoine Pitrou 修复；参见 "
":issue:`3002`。）"

#: ../../whatsnew/2.7.rst:1490
msgid ""
"The :mod:`signal` module no longer re-installs the signal handler unless "
"this is truly necessary, which fixes a bug that could make it impossible to "
"catch the EINTR signal robustly.  (Fixed by Charles-Francois Natali; "
":issue:`8354`.)"
msgstr ""
":mod:`signal` 模块现在不再重新安装信号处理程序，除非确实必要，这修复了一个可能导致无法稳健捕获 EINTR 信号的错误。（由 "
"Charles-Francois Natali 修复；参见 :issue:`8354`。）"

#: ../../whatsnew/2.7.rst:1495
msgid ""
"New functions: in the :mod:`site` module, three new functions return various"
" site- and user-specific paths. :func:`~site.getsitepackages` returns a list"
" containing all global site-packages directories, "
":func:`~site.getusersitepackages` returns the path of the user's site-"
"packages directory, and :func:`~site.getuserbase` returns the value of the "
":data:`~site.USER_BASE` environment variable, giving the path to a directory"
" that can be used to store data. (Contributed by Tarek Ziadé; "
":issue:`6693`.)"
msgstr ""
"新增函数：在 :mod:`site` 模块中，新增了三个函数返回各种站点和用户特定的路径。:func:`~site.getsitepackages` "
"返回包含所有全局 site-packages 目录的列表，:func:`~site.getusersitepackages` 返回用户 site-"
"packages 目录的路径，:func:`~site.getuserbase` 返回 :data:`~site.USER_BASE` "
"环境变量的值，给出可用于存储数据的目录路径。（由 Tarek Ziadé 贡献；参见 :issue:`6693`。）"

#: ../../whatsnew/2.7.rst:1506
msgid ""
"The :mod:`site` module now reports exceptions occurring when the "
":mod:`sitecustomize` module is imported, and will no longer catch and "
"swallow the :exc:`KeyboardInterrupt` exception.  (Fixed by Victor Stinner; "
":issue:`3137`.)"
msgstr ""
":mod:`site` 模块现在会报告在导入 :mod:`sitecustomize` 模块时发生的异常，并且不再捕获并吞掉 "
":exc:`KeyboardInterrupt` 异常。（由 Victor Stinner 修复；参见 :issue:`3137`。）"

#: ../../whatsnew/2.7.rst:1511
msgid ""
"The :func:`~socket.create_connection` function gained a *source_address* "
"parameter, a ``(host, port)`` 2-tuple giving the source address that will be"
" used for the connection. (Contributed by Eldon Ziegler; :issue:`3972`.)"
msgstr ""
":func:`~socket.create_connection` 函数新增了一个 *source_address* 参数，这是一个 ``(host, "
"port)`` 2元组，指定用于连接的源地址。（由 Eldon Ziegler 贡献；参见 :issue:`3972`。）"

#: ../../whatsnew/2.7.rst:1516
msgid ""
"The :meth:`~socket.socket.recv_into` and "
":meth:`~socket.socket.recvfrom_into` methods will now write into objects "
"that support the buffer API, most usefully the :class:`bytearray` and "
":class:`memoryview` objects.  (Implemented by Antoine Pitrou; "
":issue:`8104`.)"
msgstr ""
":meth:`~socket.socket.recv_into` 和 :meth:`~socket.socket.recvfrom_into` "
"方法现在支持将接收的数据写入实现了缓冲区 API 的对象，最常用的是 :class:`bytearray` 和 :class:`memoryview` "
"对象。（由 Antoine Pitrou 实现；参见 :issue:`8104`。）"

#: ../../whatsnew/2.7.rst:1521
msgid ""
"The :mod:`SocketServer <socketserver>` module's "
":class:`~socketserver.TCPServer` class now supports socket timeouts and "
"disabling the Nagle algorithm. The :attr:`!disable_nagle_algorithm` class "
"attribute defaults to ``False``; if overridden to be true, new request "
"connections will have the TCP_NODELAY option set to prevent buffering many "
"small sends into a single TCP packet. The "
":attr:`~socketserver.BaseServer.timeout` class attribute can hold a timeout "
"in seconds that will be applied to the request socket; if no request is "
"received within that time, :meth:`~socketserver.BaseServer.handle_timeout` "
"will be called and :meth:`~socketserver.BaseServer.handle_request` will "
"return. (Contributed by Kristján Valur Jónsson; :issue:`6192` and "
":issue:`6267`.)"
msgstr ""
":mod:`SocketServer <socketserver>` 模块的 :class:`~socketserver.TCPServer` "
"类现在支持套接字超时和禁用 Nagle 算法。:attr:`!disable_nagle_algorithm` 类属性默认为 "
"``False``；如果覆盖为 true，新的请求连接将设置 TCP_NODELAY 选项，以防止将多个小发送包缓冲到单个 TCP "
"数据包中。:attr:`~socketserver.BaseServer.timeout` "
"类属性可以包含一个以秒为单位的超时时间，该时间将应用于请求套接字；如果在规定时间内未收到请求，将调用 "
":meth:`~socketserver.BaseServer.handle_timeout`，并且 "
":meth:`~socketserver.BaseServer.handle_request` 将返回。（由 Kristján Valur "
"Jónsson 贡献；参见 :issue:`6192` 和 :issue:`6267`。）"

#: ../../whatsnew/2.7.rst:1533
msgid ""
"Updated module: the :mod:`sqlite3` module has been updated to version 2.6.0 "
"of the `pysqlite package <https://github.com/ghaering/pysqlite>`__. Version "
"2.6.0 includes a number of bugfixes, and adds the ability to load SQLite "
"extensions from shared libraries. Call the ``enable_load_extension(True)`` "
"method to enable extensions, and then call "
":meth:`~sqlite3.Connection.load_extension` to load a particular shared "
"library. (Updated by Gerhard Häring.)"
msgstr ""
"更新模块：:mod:`sqlite3` 模块已更新到 `pysqlite 包 "
"<https://github.com/ghaering/pysqlite>`__ 的 2.6.0 版本。2.6.0 版本包括多项 bug "
"修复，并增加了从共享库加载 SQLite 扩展的能力。调用 ``enable_load_extension(True)`` 方法以启用扩展，然后调用 "
":meth:`~sqlite3.Connection.load_extension` 以加载特定的共享库。（由 Gerhard Häring 更新。）"

#: ../../whatsnew/2.7.rst:1540
msgid ""
"The :mod:`ssl` module's :class:`~ssl.SSLSocket` objects now support the "
"buffer API, which fixed a test suite failure (fix by Antoine Pitrou; "
":issue:`7133`) and automatically set OpenSSL's "
":c:macro:`!SSL_MODE_AUTO_RETRY`, which will prevent an error code being "
"returned from :meth:`recv` operations that trigger an SSL renegotiation (fix"
" by Antoine Pitrou; :issue:`8222`)."
msgstr ""
":mod:`ssl` 模块的 :class:`~ssl.SSLSocket` 对象现在支持缓冲区 API，这修复了测试套件失败的问题（由 Antoine"
" Pitrou 修复；参见 :issue:`7133`），并自动设置 OpenSSL 的 "
":c:macro:`!SSL_MODE_AUTO_RETRY`，这将防止从触发 SSL 重新协商的 :meth:`recv` 操作返回错误代码（由 "
"Antoine Pitrou 修复；参见 :issue:`8222`）。"

#: ../../whatsnew/2.7.rst:1547
msgid ""
"The :func:`~ssl.SSLContext.wrap_socket` constructor function now takes a "
"*ciphers* argument that's a string listing the encryption algorithms to be "
"allowed; the format of the string is described `in the OpenSSL documentation"
" <https://docs.openssl.org/1.0.2/man1/ciphers/>`__. (Added by Antoine "
"Pitrou; :issue:`8322`.)"
msgstr ""
":func:`~ssl.SSLContext.wrap_socket` 构造函数现在接受一个 *ciphers* "
"参数，该参数是一个列出允许的加密算法的字符串；字符串的格式在 `OpenSSL 文档 "
"<https://docs.openssl.org/1.0.2/man1/ciphers/>`__ 中描述。（由 Antoine Pitrou "
"添加；参见 :issue:`8322`。）"

#: ../../whatsnew/2.7.rst:1554
msgid ""
"Another change makes the extension load all of OpenSSL's ciphers and digest "
"algorithms so that they're all available.  Some SSL certificates couldn't be"
" verified, reporting an \"unknown algorithm\" error.  (Reported by Beda "
"Kosata, and fixed by Antoine Pitrou; :issue:`8484`.)"
msgstr ""
"另一项更改使扩展加载了所有OpenSSL的加密算法和摘要算法，以便它们全部可用。一些SSL证书无法验证，会报告“未知算法”错误。（由Beda "
"Kosata报告，Antoine Pitrou修复；参见 :issue:`8484`。）"

#: ../../whatsnew/2.7.rst:1560
msgid ""
"The version of OpenSSL being used is now available as the module attributes "
":const:`ssl.OPENSSL_VERSION` (a string), :const:`ssl.OPENSSL_VERSION_INFO` "
"(a 5-tuple), and :const:`ssl.OPENSSL_VERSION_NUMBER` (an integer).  (Added "
"by Antoine Pitrou; :issue:`8321`.)"
msgstr ""
"当前使用的 OpenSSL 版本现在可以作为模块属性 :const:`ssl.OPENSSL_VERSION` "
"(一个字符串)、:const:`ssl.OPENSSL_VERSION_INFO` (一个 5 元组) 和 "
":const:`ssl.OPENSSL_VERSION_NUMBER` (一个整数) 使用。 （由 Antoine Pitrou 添加；参见 "
":issue:`8321`。）"

#: ../../whatsnew/2.7.rst:1566
msgid ""
"The :mod:`struct` module will no longer silently ignore overflow errors when"
" a value is too large for a particular integer format code (one of "
"``bBhHiIlLqQ``); it now always raises a :exc:`struct.error` exception.  "
"(Changed by Mark Dickinson; :issue:`1523`.)  The :func:`~struct.pack` "
"function will also attempt to use :meth:`~object.__index__` to convert and "
"pack non-integers before trying the :meth:`~object.__int__` method or "
"reporting an error. (Changed by Mark Dickinson; :issue:`8300`.)"
msgstr ""
":mod:`struct` 模块将不再在值对于特定整数格式代码 (``bBhHiIlLqQ`` 之一) 过大时静默忽略溢出错误；它现在总是引发 "
":exc:`struct.error` 异常。 （由 Mark Dickinson 更改；参见 :issue:`1523`。） "
":func:`~struct.pack` 函数也将尝试使用 :meth:`~object.__index__` 来转换并打包非整数，然后再尝试 "
":meth:`~object.__int__` 方法或报告错误。 （由 Mark Dickinson 更改；参见 :issue:`8300`。）"

#: ../../whatsnew/2.7.rst:1575
msgid ""
"New function: the :mod:`subprocess` module's "
":func:`~subprocess.check_output` runs a command with a specified set of "
"arguments and returns the command's output as a string when the command runs"
" without error, or raises a :exc:`~subprocess.CalledProcessError` exception "
"otherwise."
msgstr ""
"新增函数: :mod:`subprocess` 模块的 :func:`~subprocess.check_output` "
"运行一个带有指定参数集的命令，并在命令无错误运行时返回命令的输出作为字符串，否则引发 "
":exc:`~subprocess.CalledProcessError` 异常。"

#: ../../whatsnew/2.7.rst:1582
msgid ""
">>> subprocess.check_output(['df', '-h', '.'])\n"
"'Filesystem     Size   Used  Avail Capacity  Mounted on\\n\n"
"/dev/disk0s2    52G    49G   3.0G    94%    /\\n'\n"
"\n"
">>> subprocess.check_output(['df', '-h', '/bogus'])\n"
"  ...\n"
"subprocess.CalledProcessError: Command '['df', '-h', '/bogus']' returned non-zero exit status 1"
msgstr ""
">>> subprocess.check_output(['df', '-h', '.'])\n"
"'Filesystem     Size   Used  Avail Capacity  Mounted on\\n\n"
"/dev/disk0s2    52G    49G   3.0G    94%    /\\n'\n"
"\n"
">>> subprocess.check_output(['df', '-h', '/bogus'])\n"
"  ...\n"
"subprocess.CalledProcessError: Command '['df', '-h', '/bogus']' returned non-zero exit status 1"

#: ../../whatsnew/2.7.rst:1590
msgid "(Contributed by Gregory P. Smith.)"
msgstr "（由 Gregory P. Smith 贡献）"

#: ../../whatsnew/2.7.rst:1592
msgid ""
"The :mod:`subprocess` module will now retry its internal system calls on "
"receiving an :const:`~errno.EINTR` signal.  (Reported by several people; "
"final patch by Gregory P. Smith in :issue:`1068268`.)"
msgstr ""
":mod:`subprocess` 模块现在在接收到 :const:`~errno.EINTR` 信号时会重试其内部系统调用。（由多人报告；最终补丁由 "
"Gregory P. Smith 在 :issue:`1068268` 中提供。）"

#: ../../whatsnew/2.7.rst:1596
msgid ""
"New function: :func:`~symtable.Symbol.is_declared_global` in the "
":mod:`symtable` module returns true for variables that are explicitly "
"declared to be global, false for ones that are implicitly global. "
"(Contributed by Jeremy Hylton.)"
msgstr ""
"新增函数：在 :mod:`symtable` 模块中的 :func:`~symtable.Symbol.is_declared_global` "
"函数，对于明确声明为全局变量的变量返回 true，对于隐式全局变量返回 false。（由 Jeremy Hylton 贡献。）"

#: ../../whatsnew/2.7.rst:1601 ../../whatsnew/2.7.rst:2500
msgid ""
"The :mod:`syslog` module will now use the value of ``sys.argv[0]`` as the "
"identifier instead of the previous default value of ``'python'``. (Changed "
"by Sean Reifschneider; :issue:`8451`.)"
msgstr ""
":mod:`syslog` 模块现在将使用 ``sys.argv[0]`` 的值作为标识符，而不是之前的默认值 ``'python'``。（由 Sean"
" Reifschneider 更改；参见 :issue:`8451`。）"

#: ../../whatsnew/2.7.rst:1605
msgid ""
"The :data:`sys.version_info` value is now a named tuple, with attributes "
"named :attr:`!major`, :attr:`!minor`, :attr:`!micro`, :attr:`!releaselevel`,"
" and :attr:`!serial`.  (Contributed by Ross Light; :issue:`4285`.)"
msgstr ""
":data:`sys.version_info` 的值现在是一个具名元组，其属性名为 "
":attr:`!major`、:attr:`!minor`、:attr:`!micro`、:attr:`!releaselevel` 和 "
":attr:`!serial`。（由 Ross Light 贡献；参见 :issue:`4285`。）"

#: ../../whatsnew/2.7.rst:1610
msgid ""
":func:`sys.getwindowsversion` also returns a named tuple, with attributes "
"named :attr:`!major`, :attr:`!minor`, :attr:`!build`, :attr:`!platform`, "
":attr:`!service_pack`, :attr:`!service_pack_major`, "
":attr:`!service_pack_minor`, :attr:`!suite_mask`, and :attr:`!product_type`."
"  (Contributed by Brian Curtin; :issue:`7766`.)"
msgstr ""
":func:`sys.getwindowsversion` 也返回一个具名元组，其属性名为 "
":attr:`!major`、:attr:`!minor`、:attr:`!build`、:attr:`!platform`、:attr:`!service_pack`、:attr:`!service_pack_major`、:attr:`!service_pack_minor`、:attr:`!suite_mask`"
" 和 :attr:`!product_type`。（由 Brian Curtin 贡献；参见 :issue:`7766`。）"

#: ../../whatsnew/2.7.rst:1616 ../../whatsnew/2.7.rst:2504
msgid ""
"The :mod:`tarfile` module's default error handling has changed, to no longer"
" suppress fatal errors.  The default error level was previously 0, which "
"meant that errors would only result in a message being written to the debug "
"log, but because the debug log is not activated by default, these errors go "
"unnoticed.  The default error level is now 1, which raises an exception if "
"there's an error. (Changed by Lars Gustäbel; :issue:`7357`.)"
msgstr ""
":mod:`tarfile` 模块的默认错误处理已更改，不再抑制致命错误。之前的默认错误级别为 "
"0，这意味着错误只会导致一条消息被写入调试日志，但由于调试日志默认不激活，这些错误会被忽略。现在的默认错误级别为 1，如果出现错误会引发异常。（由 "
"Lars Gustäbel 改变；参见 :issue:`7357`。）"

#: ../../whatsnew/2.7.rst:1624
msgid ""
":mod:`tarfile` now supports filtering the :class:`~tarfile.TarInfo` objects "
"being added to a tar file.  When you call :meth:`~tarfile.TarFile.add`, you "
"may supply an optional *filter* argument that's a callable.  The *filter* "
"callable will be passed the :class:`~tarfile.TarInfo` for every file being "
"added, and can modify and return it. If the callable returns ``None``, the "
"file will be excluded from the resulting archive.  This is more powerful "
"than the existing *exclude* argument, which has therefore been deprecated. "
"(Added by Lars Gustäbel; :issue:`6856`.) The :class:`~tarfile.TarFile` class"
" also now supports the context management protocol. (Added by Lars Gustäbel;"
" :issue:`7232`.)"
msgstr ""
":mod:`tarfile` 现在支持过滤添加到 tar 文件中的 :class:`~tarfile.TarInfo` 对象。 当你调用 "
":meth:`~tarfile.TarFile.add` 时，可以提供一个可选的 *filter* 参数，该参数是一个可调用的函数。 *filter* "
"可调用函数将为每个被添加的文件传递 :class:`~tarfile.TarInfo`，并可以修改并返回它。 如果可调用函数返回 "
"``None``，该文件将被排除在最终归档之外。 这比现有的 *exclude* 参数更强大，因此 *exclude* 参数已被弃用。 （由 Lars "
"Gustäbel 添加；参见 :issue:`6856`。） :class:`~tarfile.TarFile` 类现在也支持上下文管理协议。 （由 "
"Lars Gustäbel 添加；参见 :issue:`7232`。）"

#: ../../whatsnew/2.7.rst:1636
msgid ""
"The :meth:`~threading.Event.wait` method of the :class:`threading.Event` "
"class now returns the internal flag on exit.  This means the method will "
"usually return true because :meth:`~threading.Event.wait` is supposed to "
"block until the internal flag becomes true.  The return value will only be "
"false if a timeout was provided and the operation timed out. (Contributed by"
" Tim Lesher; :issue:`1674032`.)"
msgstr ""
":class:`threading.Event` 类的 :meth:`~threading.Event.wait` "
"方法现在在退出时返回内部标志。这意味着该方法通常会返回 true，因为 :meth:`~threading.Event.wait` "
"应该阻塞直到内部标志变为 true。只有在提供了超时并且操作超时时，返回值才会是 false。（由 Tim Lesher 贡献；参见 "
":issue:`1674032`。）"

#: ../../whatsnew/2.7.rst:1643
msgid ""
"The Unicode database provided by the :mod:`unicodedata` module is now used "
"internally to determine which characters are numeric, whitespace, or "
"represent line breaks.  The database also includes information from the "
":file:`Unihan.txt` data file (patch by Anders Chrigström and Amaury Forgeot "
"d'Arc; :issue:`1571184`) and has been updated to version 5.2.0 (updated by "
"Florent Xicluna; :issue:`8024`)."
msgstr ""
":mod:`unicodedata` 模块提供的 Unicode 数据库现在用于内部确定哪些字符是数字、空格或表示换行。该数据库还包括来自 "
":file:`Unihan.txt` 数据文件的信息（由 Anders Chrigström 和 Amaury Forgeot d'Arc "
"提交的补丁；参见 :issue:`1571184`），并已更新到版本 5.2.0（由 Florent Xicluna 更新；参见 "
":issue:`8024`。）"

#: ../../whatsnew/2.7.rst:1651 ../../whatsnew/2.7.rst:2512
msgid ""
"The :mod:`urlparse <urllib.parse>` module's :func:`~urllib.parse.urlsplit` "
"now handles unknown URL schemes in a fashion compliant with :rfc:`3986`: if "
"the URL is of the form ``\"<something>://...\"``, the text before the "
"``://`` is treated as the scheme, even if it's a made-up scheme that the "
"module doesn't know about.  This change may break code that worked around "
"the old behaviour.  For example, Python 2.6.4 or 2.5 will return the "
"following:"
msgstr ""
":mod:`urlparse <urllib.parse>` 模块的 :func:`~urllib.parse.urlsplit` 现在以一种符合 "
":rfc:`3986` 的方式处理未知的 URL 方案：如果 URL 形如 ``\"<something>://...\"``，则 ``://`` "
"之前的文本被视为方案，即使它是一个模块不知道的自定义方案。这一更改可能会破坏针对旧行为进行工作的代码。例如，Python 2.6.4 或 2.5 "
"将返回以下内容："

#: ../../whatsnew/2.7.rst:1659 ../../whatsnew/2.7.rst:2520
msgid ""
">>> import urlparse\n"
">>> urlparse.urlsplit('invented://host/filename?query')\n"
"('invented', '', '//host/filename?query', '', '')"
msgstr ""
">>> import urlparse\n"
">>> urlparse.urlsplit('invented://host/filename?query')\n"
"('invented', '', '//host/filename?query', '', '')"

#: ../../whatsnew/2.7.rst:1666 ../../whatsnew/2.7.rst:2527
msgid "Python 2.7 (and Python 2.6.5) will return:"
msgstr "Python 2.7（以及Python 2.6.5）将返回："

#: ../../whatsnew/2.7.rst:1668 ../../whatsnew/2.7.rst:2529
msgid ""
">>> import urlparse\n"
">>> urlparse.urlsplit('invented://host/filename?query')\n"
"('invented', 'host', '/filename?query', '', '')"
msgstr ""
">>> import urlparse\n"
">>> urlparse.urlsplit('invented://host/filename?query')\n"
"('invented', 'host', '/filename?query', '', '')"

#: ../../whatsnew/2.7.rst:1675 ../../whatsnew/2.7.rst:2536
msgid ""
"(Python 2.7 actually produces slightly different output, since it returns a "
"named tuple instead of a standard tuple.)"
msgstr "（Python 2.7实际上产生的输出略有不同，因为它返回的是一个具名元组而不是标准元组。）"

#: ../../whatsnew/2.7.rst:1678
msgid ""
"The :mod:`urlparse <urllib.parse>` module also supports IPv6 literal "
"addresses as defined by :rfc:`2732` (contributed by Senthil Kumaran; "
":issue:`2987`)."
msgstr ""
":mod:`urlparse <urllib.parse>` 模块还支持由 :rfc:`2732` 定义的IPv6文字地址（由Senthil "
"Kumaran贡献；参见 :issue:`2987`）。"

#: ../../whatsnew/2.7.rst:1681
msgid ""
">>> urlparse.urlparse('http://[1080::8:800:200C:417A]/foo')\n"
"ParseResult(scheme='http', netloc='[1080::8:800:200C:417A]',\n"
"            path='/foo', params='', query='', fragment='')"
msgstr ""
">>> urlparse.urlparse('http://[1080::8:800:200C:417A]/foo')\n"
"ParseResult(scheme='http', netloc='[1080::8:800:200C:417A]',\n"
"            path='/foo', params='', query='', fragment='')"

#: ../../whatsnew/2.7.rst:1688
msgid ""
"New class: the :class:`~weakref.WeakSet` class in the :mod:`weakref` module "
"is a set that only holds weak references to its elements; elements will be "
"removed once there are no references pointing to them. (Originally "
"implemented in Python 3.x by Raymond Hettinger, and backported to 2.7 by "
"Michael Foord.)"
msgstr ""
"新增类：:mod:`weakref` 模块中的 :class:`~weakref.WeakSet` "
"类是一个集合，它只对其元素保持弱引用；一旦没有引用指向这些元素，它们将被移除。（最初由 Raymond Hettinger 在 Python 3.x "
"中实现，并由 Michael Foord 向下移植到2.7。）"

#: ../../whatsnew/2.7.rst:1694
msgid ""
"The :mod:`xml.etree.ElementTree` library, no longer escapes ampersands and "
"angle brackets when outputting an XML processing instruction (which looks "
"like ``<?xml-stylesheet href=\"#style1\"?>``) or comment (which looks like "
"``<!-- comment -->``). (Patch by Neil Muller; :issue:`2746`.)"
msgstr ""
":mod:`xml.etree.ElementTree`库在输出XML处理指令（看起来像``<?xml-stylesheet "
"href=\"#style1\"?>``）或注释（看起来像``<!-- comment "
"-->``）时，不再转义与符号“&”和尖括号“<>”。（由Neil Muller修补；参见 :issue:`2746`。）"

#: ../../whatsnew/2.7.rst:1700
msgid ""
"The XML-RPC client and server, provided by the :mod:`xmlrpclib "
"<xmlrpc.client>` and :mod:`SimpleXMLRPCServer <xmlrpc.server>` modules, have"
" improved performance by supporting HTTP/1.1 keep-alive and by optionally "
"using gzip encoding to compress the XML being exchanged.  The gzip "
"compression is controlled by the :attr:`!encode_threshold` attribute of "
":class:`~xmlrpc.server.SimpleXMLRPCRequestHandler`, which contains a size in"
" bytes; responses larger than this will be compressed. (Contributed by "
"Kristján Valur Jónsson; :issue:`6267`.)"
msgstr ""
"由 :mod:`xmlrpclib <xmlrpc.client>` 和 :mod:`SimpleXMLRPCServer "
"<xmlrpc.server>` 模块提供的XML-"
"RPC客户端和服务器，通过支持HTTP/1.1保持连接和可选使用gzip编码压缩交换的XML，提高了性能。gzip压缩由 "
":class:`~xmlrpc.server.SimpleXMLRPCRequestHandler` 的 "
":attr:`!encode_threshold` 属性控制，该属性包含一个字节大小；大于此大小的响应将被压缩。（由Kristján Valur "
"Jónsson贡献；参见 :issue:`6267`。）"

#: ../../whatsnew/2.7.rst:1709
msgid ""
"The :mod:`zipfile` module's :class:`~zipfile.ZipFile` now supports the "
"context management protocol, so you can write ``with zipfile.ZipFile(...) as"
" f:``. (Contributed by Brian Curtin; :issue:`5511`.)"
msgstr ""
":mod:`zipfile` 模块的 :class:`~zipfile.ZipFile` 现在支持上下文管理协议，因此你可以写 ``with "
"zipfile.ZipFile(...) as f:``。（由 Brian Curtin 贡献；参见 :issue:`5511`。）"

#: ../../whatsnew/2.7.rst:1713
msgid ""
":mod:`zipfile` now also supports archiving empty directories and extracts "
"them correctly.  (Fixed by Kuba Wieczorek; :issue:`4710`.) Reading files out"
" of an archive is faster, and interleaving :meth:`read() "
"<io.BufferedIOBase.read>` and :meth:`readline() <io.IOBase.readline>` now "
"works correctly. (Contributed by Nir Aides; :issue:`7610`.)"
msgstr ""
":mod:`zipfile` 现在也支持归档空目录并正确提取它们。（由 Kuba Wieczorek 修复；参见 "
":issue:`4710`。）从归档中读取文件更快，交替使用 :meth:`read() <io.BufferedIOBase.read>` 和 "
":meth:`readline() <io.IOBase.readline>` 现在也能正确工作。（由 Nir Aides 贡献；参见 "
":issue:`7610`。）"

#: ../../whatsnew/2.7.rst:1720
msgid ""
"The :func:`~zipfile.is_zipfile` function now accepts a file object, in "
"addition to the path names accepted in earlier versions.  (Contributed by "
"Gabriel Genellina; :issue:`4756`.)"
msgstr ""
":func:`~zipfile.is_zipfile` 函数现在接受文件对象，除了早期版本中接受的路径名。（由 Gabriel Genellina "
"贡献；参见 :issue:`4756`。）"

#: ../../whatsnew/2.7.rst:1724
msgid ""
"The :meth:`~zipfile.ZipFile.writestr` method now has an optional "
"*compress_type* parameter that lets you override the default compression "
"method specified in the :class:`~zipfile.ZipFile` constructor.  (Contributed"
" by Ronald Oussoren; :issue:`6003`.)"
msgstr ""
":meth:`~zipfile.ZipFile.writestr` 方法现在有一个可选的 *compress_type* 参数，允许你覆盖在 "
":class:`~zipfile.ZipFile` 构造函数中指定的默认压缩方法。（由 Ronald Oussoren 贡献；参见 "
":issue:`6003`。）"

#: ../../whatsnew/2.7.rst:1737
msgid "New module: importlib"
msgstr "新增模块：importlib"

#: ../../whatsnew/2.7.rst:1739
msgid ""
"Python 3.1 includes the :mod:`importlib` package, a re-implementation of the"
" logic underlying Python's :keyword:`import` statement. :mod:`importlib` is "
"useful for implementers of Python interpreters and to users who wish to "
"write new importers that can participate in the import process.  Python 2.7 "
"doesn't contain the complete :mod:`importlib` package, but instead has a "
"tiny subset that contains a single function, "
":func:`~importlib.import_module`."
msgstr ""
"Python 3.1 包含 :mod:`importlib` 包，这是对 Python 的 :keyword:`import` "
"语句背后逻辑的重新实现。:mod:`importlib` 对 Python 解释器的实现者和希望编写新导入器以参与导入过程的用户很有用。Python "
"2.7 不包含完整的 :mod:`importlib` "
"包，而是有一个小型的子集，其中包含一个单一函数，:func:`~importlib.import_module`。"

#: ../../whatsnew/2.7.rst:1747
msgid ""
"``import_module(name, package=None)`` imports a module.  *name* is a string "
"containing the module or package's name.  It's possible to do relative "
"imports by providing a string that begins with a ``.`` character, such as "
"``..utils.errors``.  For relative imports, the *package* argument must be "
"provided and is the name of the package that will be used as the anchor for "
"the relative import.  :func:`~importlib.import_module` both inserts the "
"imported module into ``sys.modules`` and returns the module object."
msgstr ""
"``import_module(name, package=None)`` 导入一个模块。*name* "
"是一个包含模块或包名称的字符串。可以通过提供一个以 ``.`` 字符开头的字符串来进行相对导入，例如 "
"``..utils.errors``。对于相对导入，必须提供 *package* "
"参数，它是将用作相对导入锚点的包名称。:func:`~importlib.import_module` 既将导入的模块插入到 "
"``sys.modules`` 中，也返回模块对象。"

#: ../../whatsnew/2.7.rst:1756
msgid "Here are some examples::"
msgstr "这是一些例子::"

#: ../../whatsnew/2.7.rst:1758
msgid ""
">>> from importlib import import_module\n"
">>> anydbm = import_module('anydbm')  # Standard absolute import\n"
">>> anydbm\n"
"<module 'anydbm' from '/p/python/Lib/anydbm.py'>\n"
">>> # Relative import\n"
">>> file_util = import_module('..file_util', 'distutils.command')\n"
">>> file_util\n"
"<module 'distutils.file_util' from '/python/Lib/distutils/file_util.pyc'>"
msgstr ""
">>> from importlib import import_module\n"
">>> anydbm = import_module('anydbm')  # 标准的绝对导入\n"
">>> anydbm\n"
"<module 'anydbm' from '/p/python/Lib/anydbm.py'>\n"
">>> # 相对导入\n"
">>> file_util = import_module('..file_util', 'distutils.command')\n"
">>> file_util\n"
"<module 'distutils.file_util' from '/python/Lib/distutils/file_util.pyc'>"

#: ../../whatsnew/2.7.rst:1767
msgid ""
":mod:`importlib` was implemented by Brett Cannon and introduced in Python "
"3.1."
msgstr ":mod:`importlib` 由 Brett Cannon 实现，并在 Python 3.1 中引入。"

#: ../../whatsnew/2.7.rst:1772
msgid "New module: sysconfig"
msgstr "新增模块：sysconfig"

#: ../../whatsnew/2.7.rst:1774
msgid ""
"The :mod:`sysconfig` module has been pulled out of the Distutils package, "
"becoming a new top-level module in its own right. :mod:`sysconfig` provides "
"functions for getting information about Python's build process: compiler "
"switches, installation paths, the platform name, and whether Python is "
"running from its source directory."
msgstr ""
":mod:`sysconfig` 模块已从 Distutils 包中提取出来，成为一个新的顶级模块。:mod:`sysconfig` 提供了用于获取有关"
" Python 构建过程信息的函数：编译器开关、安装路径、平台名称以及 Python 是否从其源目录运行。"

#: ../../whatsnew/2.7.rst:1781
msgid "Some of the functions in the module are:"
msgstr "该模块中的部分函数:"

#: ../../whatsnew/2.7.rst:1783
msgid ""
":func:`~sysconfig.get_config_var` returns variables from Python's Makefile "
"and the :file:`pyconfig.h` file."
msgstr ""
":func:`~sysconfig.get_config_var` 返回来自 Python 的 Makefile 和 "
":file:`pyconfig.h` 文件的变量。"

#: ../../whatsnew/2.7.rst:1785
msgid ""
":func:`~sysconfig.get_config_vars` returns a dictionary containing all of "
"the configuration variables."
msgstr ":func:`~sysconfig.get_config_vars` 返回一个包含所有配置变量的字典。"

#: ../../whatsnew/2.7.rst:1787
msgid ""
":func:`~sysconfig.get_path` returns the configured path for a particular "
"type of module: the standard library, site-specific modules, platform-"
"specific modules, etc."
msgstr ":func:`~sysconfig.get_path` 返回特定模块类型的配置路径：标准库、站点专属模块、平台专属模块等等。"

#: ../../whatsnew/2.7.rst:1790
msgid ""
":func:`~sysconfig.is_python_build` returns true if you're running a binary "
"from a Python source tree, and false otherwise."
msgstr ""
":func:`~sysconfig.is_python_build` 会在你从 Python "
"源码树运行二进制可执行文件时返回真值，而在其他情况下返回假值。"

#: ../../whatsnew/2.7.rst:1793
msgid ""
"Consult the :mod:`sysconfig` documentation for more details and for a "
"complete list of functions."
msgstr "请参阅 :mod:`sysconfig` 文档以获取更多详细信息以及完整的函数列表。"

#: ../../whatsnew/2.7.rst:1796
msgid ""
"The Distutils package and :mod:`sysconfig` are now maintained by Tarek "
"Ziadé, who has also started a Distutils2 package (source repository at "
"https://hg.python.org/distutils2/) for developing a next-generation version "
"of Distutils."
msgstr ""
"Distutils 包和 :mod:`sysconfig` 现由 Tarek Ziadé 维护，他还启动了一个 Distutils2 包（源代码仓库位于"
" https://hg.python.org/distutils2/），用于开发 Distutils 的下一代版本。"

#: ../../whatsnew/2.7.rst:1803
msgid "ttk: Themed Widgets for Tk"
msgstr "ttk：Tk 主题组件"

#: ../../whatsnew/2.7.rst:1805
msgid ""
"Tcl/Tk 8.5 includes a set of themed widgets that re-implement basic Tk "
"widgets but have a more customizable appearance and can therefore more "
"closely resemble the native platform's widgets.  This widget set was "
"originally called Tile, but was renamed to Ttk (for \"themed Tk\") on being "
"added to Tcl/Tck release 8.5."
msgstr ""
"Tcl/Tk 8.5 包含一组主题化的小部件，这些小部件重新实现了基本的 Tk "
"小部件，但具有更可定制的外观，因此可以更接近本地平台的小部件。这个小部件集最初称为 Tile，但在添加到 Tcl/Tk 8.5 版本时被重命名为 "
"Ttk（意为“主题化 Tk”）。"

#: ../../whatsnew/2.7.rst:1811
msgid ""
"To learn more, read the :mod:`~tkinter.ttk` module documentation.  You may "
"also wish to read the Tcl/Tk manual page describing the Ttk theme engine, "
"available at https://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.html. Some "
"screenshots of the Python/Ttk code in use are at "
"https://code.google.com/archive/p/python-ttk/wikis/Screenshots.wiki."
msgstr ""
"要了解更多信息，请阅读 :mod:`~tkinter.ttk` 模块文档。你可能还希望阅读 Tcl/Tk 手册页，其中描述了 Ttk 主题引擎，位于 "
"https://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.html。一些 Python/Ttk 代码的截图可在 "
"https://code.google.com/archive/p/python-ttk/wikis/Screenshots.wiki 查看。"

#: ../../whatsnew/2.7.rst:1818
msgid ""
"The :mod:`tkinter.ttk` module was written by Guilherme Polo and added in "
":issue:`2983`.  An alternate version called ``Tile.py``, written by Martin "
"Franklin and maintained by Kevin Walzer, was proposed for inclusion in "
":issue:`2618`, but the authors argued that Guilherme Polo's work was more "
"comprehensive."
msgstr ""
":mod:`tkinter.ttk` 模块由 Guilherme Polo 编写，并在 :issue:`2983` 中添加。另一个版本名为 "
"``Tile.py``，由 Martin Franklin 编写并由 Kevin Walzer 维护，曾在 :issue:`2618` "
"中提议纳入，但作者们认为 Guilherme Polo 的工作更为全面。"

#: ../../whatsnew/2.7.rst:1828
msgid "Updated module: unittest"
msgstr "更新的模块：unittest"

#: ../../whatsnew/2.7.rst:1830
msgid ""
"The :mod:`unittest` module was greatly enhanced; many new features were "
"added.  Most of these features were implemented by Michael Foord, unless "
"otherwise noted.  The enhanced version of the module is downloadable "
"separately for use with Python versions 2.4 to 2.6, packaged as the "
":mod:`!unittest2` package, from :pypi:`unittest2`."
msgstr ""
":mod:`unittest` 模块得到了大幅增强；添加了许多新功能。这些功能大多由 Michael Foord "
"实现，除非另有说明。该模块的增强版本可以单独下载，用于 Python 2.4 至 2.6 版本，打包为 :mod:`!unittest2` 包，可从 "
":pypi:`unittest2` 获取。"

#: ../../whatsnew/2.7.rst:1836
msgid ""
"When used from the command line, the module can automatically discover "
"tests.  It's not as fancy as `py.test <https://pytest.org>`__ or `nose "
"<https://nose.readthedocs.io/>`__, but provides a simple way to run tests "
"kept within a set of package directories.  For example, the following "
"command will search the :file:`test/` subdirectory for any importable test "
"files named ``test*.py``::"
msgstr ""
"当从命令行使用时，该模块可以自动发现测试。它不如 `py.test <https://pytest.org>`__ 或 `nose "
"<https://nose.readthedocs.io/>`__ 那么花哨，但提供了一种简单的方式来运行保存在一组包目录中的测试。例如，以下命令将搜索"
" :file:`test/` 子目录中名为 ``test*.py`` 的任何可导入测试文件："

#: ../../whatsnew/2.7.rst:1843
msgid "python -m unittest discover -s test"
msgstr "python -m unittest discover -s test"

#: ../../whatsnew/2.7.rst:1845
msgid ""
"Consult the :mod:`unittest` module documentation for more details. "
"(Developed in :issue:`6001`.)"
msgstr "更多详细信息，请参阅 :mod:`unittest` 模块文档。（开发于 :issue:`6001`。）"

#: ../../whatsnew/2.7.rst:1848
msgid "The :func:`~unittest.main` function supports some other new options:"
msgstr ":func:`~unittest.main` 函数支持一些其他新选项："

#: ../../whatsnew/2.7.rst:1850
msgid ""
":option:`-b <unittest -b>` or :option:`!--buffer` will buffer the standard "
"output and standard error streams during each test.  If the test passes, any"
" resulting output will be discarded; on failure, the buffered output will be"
" displayed."
msgstr ""
":option:`-b <unittest -b>` 或 :option:`!--buffer` "
"将在每个测试期间缓冲标准输出和标准错误流。如果测试通过，任何生成的输出将被丢弃；如果失败，缓冲的输出将被显示。"

#: ../../whatsnew/2.7.rst:1855
msgid ""
":option:`-c <unittest -c>` or :option:`!--catch` will cause the control-C "
"interrupt to be handled more gracefully.  Instead of interrupting the test "
"process immediately, the currently running test will be completed and then "
"the partial results up to the interruption will be reported. If you're "
"impatient, a second press of control-C will cause an immediate interruption."
msgstr ""
":option:`-c <unittest -c>` 或 :option:`!--catch` 将使 control-C "
"中断处理得更为优雅。而不是立即中断测试进程，当前运行的测试将被完成，然后报告中断前的部分结果。如果你不耐烦，再次按下 control-C "
"将导致立即中断。"

#: ../../whatsnew/2.7.rst:1862
msgid ""
"This control-C handler tries to avoid causing problems when the code being "
"tested or the tests being run have defined a signal handler of their own, by"
" noticing that a signal handler was already set and calling it.  If this "
"doesn't work for you, there's a :func:`~unittest.removeHandler` decorator "
"that can be used to mark tests that should have the control-C handling "
"disabled."
msgstr ""
"此 Control-C "
"处理程序尝试避免在测试的代码或运行的测试已定义了自己的信号处理程序时引发问题，通过检测到已设置信号处理程序并调用它来实现。如果这对你不起作用，可以使用 "
":func:`~unittest.removeHandler` 装饰器来标记应禁用 Control-C 处理的测试。"

#: ../../whatsnew/2.7.rst:1869
msgid ""
":option:`-f <unittest -f>` or :option:`!--failfast` makes test execution "
"stop immediately when a test fails instead of continuing to execute further "
"tests.  (Suggested by Cliff Dyer and implemented by Michael Foord; "
":issue:`8074`.)"
msgstr ""
":option:`-f <unittest -f>` 或 :option:`!--failfast` "
"选项使测试执行在测试失败时立即停止，而不是继续执行后续测试。（由 Cliff Dyer 建议，Michael Foord 实现；参见 "
":issue:`8074`。）"

#: ../../whatsnew/2.7.rst:1874
msgid ""
"The progress messages now show 'x' for expected failures and 'u' for "
"unexpected successes when run in verbose mode. (Contributed by Benjamin "
"Peterson.)"
msgstr "在详细模式下运行时，进度消息现在会用 'x' 表示预期失败，用 'u' 表示意外成功。（由 Benjamin Peterson 贡献。）"

#: ../../whatsnew/2.7.rst:1878
msgid ""
"Test cases can raise the :exc:`~unittest.SkipTest` exception to skip a test "
"(:issue:`1034053`)."
msgstr "测试用例可以引发 :exc:`~unittest.SkipTest` 异常来跳过测试（参见 :issue:`1034053`）。"

#: ../../whatsnew/2.7.rst:1881
msgid ""
"The error messages for :meth:`~unittest.TestCase.assertEqual`, "
":meth:`~unittest.TestCase.assertTrue`, and "
":meth:`~unittest.TestCase.assertFalse` failures now provide more "
"information.  If you set the :attr:`~unittest.TestCase.longMessage` "
"attribute of your :class:`~unittest.TestCase` classes to true, both the "
"standard error message and any additional message you provide will be "
"printed for failures.  (Added by Michael Foord; :issue:`5663`.)"
msgstr ""
":meth:`~unittest.TestCase.assertEqual`、:meth:`~unittest.TestCase.assertTrue`"
" 和 :meth:`~unittest.TestCase.assertFalse` 失败的错误消息现在提供更多信息。如果你将 "
":attr:`~unittest.TestCase.longMessage` 属性在你的 :class:`~unittest.TestCase` "
"类中设置为 true，那么标准错误消息和你提供的任何附加消息都将在失败时打印出来。（由 Michael Foord 添加；参见 "
":issue:`5663`。）"

#: ../../whatsnew/2.7.rst:1888
msgid ""
"The :meth:`~unittest.TestCase.assertRaises` method now returns a context "
"handler when called without providing a callable object to run.  For "
"example, you can write this::"
msgstr ""
":meth:`~unittest.TestCase.assertRaises` "
"方法在调用时如果不提供可调用对象来运行，现在返回一个上下文处理程序。例如，你可以这样写："

#: ../../whatsnew/2.7.rst:1892
msgid ""
"with self.assertRaises(KeyError):\n"
"    {}['foo']"
msgstr ""
"with self.assertRaises(KeyError):\n"
"    {}['foo']"

#: ../../whatsnew/2.7.rst:1895
msgid "(Implemented by Antoine Pitrou; :issue:`4444`.)"
msgstr "（由 Antoine Pitrou 实现；参见 :issue:`4444`。）"

#: ../../whatsnew/2.7.rst:1899
msgid ""
"Module- and class-level setup and teardown fixtures are now supported. "
"Modules can contain :func:`~unittest.setUpModule` and "
":func:`~unittest.tearDownModule` functions.  Classes can have "
":meth:`~unittest.TestCase.setUpClass` and "
":meth:`~unittest.TestCase.tearDownClass` methods that must be defined as "
"class methods (using ``@classmethod`` or equivalent).  These functions and "
"methods are invoked when the test runner switches to a test case in a "
"different module or class."
msgstr ""
"现在支持模块级和类级的初始化（setup）与清理（teardown）夹具（fixture）。模块中可以包含 "
":func:`~unittest.setUpModule` 和 :func:`~unittest.tearDownModule` 函数；类中可以定义 "
":meth:`~unittest.TestCase.setUpClass` 和 "
":meth:`~unittest.TestCase.tearDownClass` 方法，这些方法必须声明为类方法（使用 ``@classmethod``"
" 或等效方式）。当测试运行器切换到不同模块或类中的测试用例时，这些函数和方法会被调用。"

#: ../../whatsnew/2.7.rst:1907
msgid ""
"The methods :meth:`~unittest.TestCase.addCleanup` and "
":meth:`~unittest.TestCase.doCleanups` were added. "
":meth:`~unittest.TestCase.addCleanup` lets you add cleanup functions that "
"will be called unconditionally (after :meth:`~unittest.TestCase.setUp` if "
":meth:`~unittest.TestCase.setUp` fails, otherwise after "
":meth:`~unittest.TestCase.tearDown`). This allows for much simpler resource "
"allocation and deallocation during tests (:issue:`5679`)."
msgstr ""
"添加了 :meth:`~unittest.TestCase.addCleanup` 和 "
":meth:`~unittest.TestCase.doCleanups` "
"方法。:meth:`~unittest.TestCase.addCleanup` 允许你添加清理函数，这些函数将无条件调用（如果 "
":meth:`~unittest.TestCase.setUp` 失败，则在 :meth:`~unittest.TestCase.setUp` "
"之后调用，否则在 :meth:`~unittest.TestCase.tearDown` 之后调用）。这大大简化了测试期间的资源分配和释放（参见 "
":issue:`5679`）。"

#: ../../whatsnew/2.7.rst:1915
msgid ""
"A number of new methods were added that provide more specialized tests.  "
"Many of these methods were written by Google engineers for use in their test"
" suites; Gregory P. Smith, Michael Foord, and GvR worked on merging them "
"into Python's version of :mod:`unittest`."
msgstr ""
"新增了多个提供更专业测试功能的方法。其中许多方法由谷歌工程师编写，用于他们内部的测试套件；Gregory P. Smith、Michael Foord "
"和 GvR 参与了将这些方法合并到 Python 版 :mod:`unittest` 模块的工作。"

#: ../../whatsnew/2.7.rst:1920
msgid ""
":meth:`~unittest.TestCase.assertIsNone` and "
":meth:`~unittest.TestCase.assertIsNotNone` take one expression and verify "
"that the result is or is not ``None``."
msgstr ""
":meth:`~unittest.TestCase.assertIsNone` 和 "
":meth:`~unittest.TestCase.assertIsNotNone` 接受一个表达式，并验证结果是否为 ``None``。"

#: ../../whatsnew/2.7.rst:1923
msgid ""
":meth:`~unittest.TestCase.assertIs` and "
":meth:`~unittest.TestCase.assertIsNot` take two values and check whether the"
" two values evaluate to the same object or not. (Added by Michael Foord; "
":issue:`2578`.)"
msgstr ""
":meth:`~unittest.TestCase.assertIs` 和 :meth:`~unittest.TestCase.assertIsNot`"
" 接受两个值，并检查这两个值是否评估为同一个对象。（由 Michael Foord 添加；参见 :issue:`2578`。）"

#: ../../whatsnew/2.7.rst:1927
msgid ""
":meth:`~unittest.TestCase.assertIsInstance` and "
":meth:`~unittest.TestCase.assertNotIsInstance` check whether the resulting "
"object is an instance of a particular class, or of one of a tuple of "
"classes.  (Added by Georg Brandl; :issue:`7031`.)"
msgstr ""
":meth:`~unittest.TestCase.assertIsInstance` 和 "
":meth:`~unittest.TestCase.assertNotIsInstance` "
"检查结果对象是否是特定类的实例，或是否是类元组中的一个类的实例。（由 Georg Brandl 添加；参见 :issue:`7031`。）"

#: ../../whatsnew/2.7.rst:1932
msgid ""
":meth:`~unittest.TestCase.assertGreater`, "
":meth:`~unittest.TestCase.assertGreaterEqual`, "
":meth:`~unittest.TestCase.assertLess`, and "
":meth:`~unittest.TestCase.assertLessEqual` compare two quantities."
msgstr ""
":meth:`~unittest.TestCase.assertGreater`、:meth:`~unittest.TestCase.assertGreaterEqual`、:meth:`~unittest.TestCase.assertLess`"
" 和 :meth:`~unittest.TestCase.assertLessEqual` 比较两个数量。"

#: ../../whatsnew/2.7.rst:1936
msgid ""
":meth:`~unittest.TestCase.assertMultiLineEqual` compares two strings, and if"
" they're not equal, displays a helpful comparison that highlights the "
"differences in the two strings.  This comparison is now used by default when"
" Unicode strings are compared with :meth:`~unittest.TestCase.assertEqual`."
msgstr ""
":meth:`~unittest.TestCase.assertMultiLineEqual` "
"比较两个字符串，如果不相等，会显示一个有用的比较结果，突出显示两个字符串中的差异。这种比较现在默认用于比较 Unicode 字符串时与 "
":meth:`~unittest.TestCase.assertEqual`。"

#: ../../whatsnew/2.7.rst:1941
msgid ""
":meth:`assertRegexpMatches() <unittest.TestCase.assertRegex>` and "
":meth:`assertNotRegexpMatches() <unittest.TestCase.assertNotRegex>` checks "
"whether the first argument is a string matching or not matching the regular "
"expression provided as the second argument (:issue:`8038`)."
msgstr ""
":meth:`assertRegexpMatches() <unittest.TestCase.assertRegex>` 和 "
":meth:`assertNotRegexpMatches() <unittest.TestCase.assertNotRegex>` "
"检查第一个参数是否为与第二个参数提供的正则表达式匹配或不匹配的字符串 (参见 :issue:`8038`)。"

#: ../../whatsnew/2.7.rst:1946
msgid ""
":meth:`assertRaisesRegexp() <unittest.TestCase.assertRaisesRegex>` checks "
"whether a particular exception is raised, and then also checks that the "
"string representation of the exception matches the provided regular "
"expression."
msgstr ""
":meth:`assertRaisesRegexp() <unittest.TestCase.assertRaisesRegex>` "
"检查是否引发了特定的异常，并进一步检查异常的字符串表示是否与提供的正则表达式匹配。"

#: ../../whatsnew/2.7.rst:1951
msgid ""
":meth:`~unittest.TestCase.assertIn` and "
":meth:`~unittest.TestCase.assertNotIn` tests whether *first* is or is not in"
"  *second*."
msgstr ""
":meth:`~unittest.TestCase.assertIn` 和 :meth:`~unittest.TestCase.assertNotIn`"
" 测试 *first* 是否在 *second* 中。"

#: ../../whatsnew/2.7.rst:1954
msgid ""
":meth:`assertItemsEqual() <unittest.TestCase.assertCountEqual>` tests "
"whether two provided sequences contain the same elements."
msgstr ""
":meth:`assertItemsEqual() <unittest.TestCase.assertCountEqual>` "
"测试两个提供的序列是否包含相同的元素。"

#: ../../whatsnew/2.7.rst:1957
msgid ""
":meth:`~unittest.TestCase.assertSetEqual` compares whether two sets are "
"equal, and only reports the differences between the sets in case of error."
msgstr ""
":meth:`~unittest.TestCase.assertSetEqual` 比较两个集合是否相等，在错误情况下仅报告集合之间的差异。"

#: ../../whatsnew/2.7.rst:1960
msgid ""
"Similarly, :meth:`~unittest.TestCase.assertListEqual` and "
":meth:`~unittest.TestCase.assertTupleEqual` compare the specified types and "
"explain any differences without necessarily printing their full values; "
"these methods are now used by default when comparing lists and tuples using "
":meth:`~unittest.TestCase.assertEqual`. More generally, "
":meth:`~unittest.TestCase.assertSequenceEqual` compares two sequences and "
"can optionally check whether both sequences are of a particular type."
msgstr ""
"同样，:meth:`~unittest.TestCase.assertListEqual` 和 "
":meth:`~unittest.TestCase.assertTupleEqual` "
"比较指定的类型并解释任何差异，而不一定打印它们的完整值；这些方法现在默认用于使用 "
":meth:`~unittest.TestCase.assertEqual` "
"比较列表和元组。更一般地，:meth:`~unittest.TestCase.assertSequenceEqual` "
"比较两个序列，并可以可选地检查两个序列是否为特定类型。"

#: ../../whatsnew/2.7.rst:1968
msgid ""
":meth:`~unittest.TestCase.assertDictEqual` compares two dictionaries and "
"reports the differences; it's now used by default when you compare two "
"dictionaries using :meth:`~unittest.TestCase.assertEqual`.  "
":meth:`!assertDictContainsSubset` checks whether all of the key/value pairs "
"in *first* are found in *second*."
msgstr ""
":meth:`~unittest.TestCase.assertDictEqual` 比较两个字典并报告差异；现在默认用于使用 "
":meth:`~unittest.TestCase.assertEqual` "
"比较两个字典。:meth:`!assertDictContainsSubset` 检查 *first* 中的所有键/值对是否都在 *second* "
"中找到。"

#: ../../whatsnew/2.7.rst:1973
msgid ""
":meth:`~unittest.TestCase.assertAlmostEqual` and "
":meth:`~unittest.TestCase.assertNotAlmostEqual` test whether *first* and "
"*second* are approximately equal.  This method can either round their "
"difference to an optionally specified number of *places* (the default is 7) "
"and compare it to zero, or require the difference to be smaller than a "
"supplied *delta* value."
msgstr ""
":meth:`~unittest.TestCase.assertAlmostEqual` 和 "
":meth:`~unittest.TestCase.assertNotAlmostEqual` 测试 *first* 和 *second* "
"是否近似相等。此方法可以将其差异四舍五入到可选指定的 *places* 数（默认为 7）并与零比较，或者要求差异小于提供的 *delta* 值。"

#: ../../whatsnew/2.7.rst:1979
msgid ""
":meth:`~unittest.TestLoader.loadTestsFromName` properly honors the "
":attr:`~unittest.TestLoader.suiteClass` attribute of the "
":class:`~unittest.TestLoader`. (Fixed by Mark Roddy; :issue:`6866`.)"
msgstr ""
":meth:`~unittest.TestLoader.loadTestsFromName` 正确地尊重 "
":class:`~unittest.TestLoader` 的 :attr:`~unittest.TestLoader.suiteClass` "
"属性。（由 Mark Roddy 修复；参见 :issue:`6866`。）"

#: ../../whatsnew/2.7.rst:1983
msgid ""
"A new hook lets you extend the :meth:`~unittest.TestCase.assertEqual` method"
" to handle new data types.  The "
":meth:`~unittest.TestCase.addTypeEqualityFunc` method takes a type object "
"and a function. The function will be used when both of the objects being "
"compared are of the specified type.  This function should compare the two "
"objects and raise an exception if they don't match; it's a good idea for the"
" function to provide additional information about why the two objects aren't"
" matching, much as the new sequence comparison methods do."
msgstr ""
"一个新的钩子允许你扩展 :meth:`~unittest.TestCase.assertEqual` "
"方法以处理新的数据类型。:meth:`~unittest.TestCase.addTypeEqualityFunc` "
"方法接受一个类型对象和一个函数。当比较的两个对象都是指定类型时，将使用该函数。此函数应比较两个对象，并在它们不匹配时引发异常；建议该函数提供关于两个对象为什么不匹配的额外信息，就像新的序列比较方法一样。"

#: ../../whatsnew/2.7.rst:1992
msgid ""
":func:`unittest.main` now takes an optional ``exit`` argument.  If false, "
":func:`~unittest.main` doesn't call :func:`sys.exit`, allowing "
":func:`~unittest.main` to be used from the interactive interpreter. "
"(Contributed by J. Pablo Fernández; :issue:`3379`.)"
msgstr ""
":func:`unittest.main` 现在接受一个可选的 ``exit`` 参数。如果为假，:func:`~unittest.main` 不调用 "
":func:`sys.exit`，允许从交互式解释器中使用 :func:`~unittest.main`。（由 J. Pablo Fernández "
"贡献；参见 :issue:`3379`。）"

#: ../../whatsnew/2.7.rst:1997
msgid ""
":class:`~unittest.TestResult` has new "
":meth:`~unittest.TestResult.startTestRun` and "
":meth:`~unittest.TestResult.stopTestRun` methods that are called immediately"
" before and after a test run.  (Contributed by Robert Collins; "
":issue:`5728`.)"
msgstr ""
":class:`~unittest.TestResult` 有新的 :meth:`~unittest.TestResult.startTestRun` "
"和 :meth:`~unittest.TestResult.stopTestRun` 方法，它们分别在测试运行之前和之后立即被调用。（由 Robert "
"Collins 贡献；参见 :issue:`5728`。）"

#: ../../whatsnew/2.7.rst:2001
msgid ""
"With all these changes, the :file:`unittest.py` was becoming awkwardly "
"large, so the module was turned into a package and the code split into "
"several files (by Benjamin Peterson).  This doesn't affect how the module is"
" imported or used."
msgstr ""
"随着所有这些更改，:file:`unittest.py` 变得异常庞大，因此该模块被转换为一个包，代码被分割成几个文件（由 Benjamin "
"Peterson 完成）。这不会影响模块的导入或使用。"

#: ../../whatsnew/2.7.rst:2008
msgid ""
"https://web.archive.org/web/20210619163128/http://www.voidspace.org.uk/python/articles/unittest2.shtml"
msgstr ""
"https://web.archive.org/web/20210619163128/http://www.voidspace.org.uk/python/articles/unittest2.shtml"

#: ../../whatsnew/2.7.rst:2009
msgid ""
"Describes the new features, how to use them, and the rationale for various "
"design decisions.  (By Michael Foord.)"
msgstr "描述新特性、如何使用它们以及各种设计决策的合理性。（由 Michael Foord 撰写。）"

#: ../../whatsnew/2.7.rst:2015
msgid "Updated module: ElementTree 1.3"
msgstr "更新的模块：ElementTree 1.3"

#: ../../whatsnew/2.7.rst:2017
msgid ""
"The version of the ElementTree library included with Python was updated to "
"version 1.3.  Some of the new features are:"
msgstr "Python自带的ElementTree库已更新至1.3版本。一些新特性包括："

#: ../../whatsnew/2.7.rst:2020
msgid ""
"The various parsing functions now take a *parser* keyword argument giving an"
" :class:`~xml.etree.ElementTree.XMLParser` instance that will be used.  This"
" makes it possible to override the file's internal encoding::"
msgstr ""
"各种解析函数现在接受一个 *parser* 关键字参数，该参数提供一个 "
":class:`~xml.etree.ElementTree.XMLParser` 实例用于解析。 这使得可以覆盖文件的内部编码："

#: ../../whatsnew/2.7.rst:2024
msgid ""
"p = ET.XMLParser(encoding='utf-8')\n"
"t = ET.XML(\"\"\"<root/>\"\"\", parser=p)"
msgstr ""
"p = ET.XMLParser(encoding='utf-8')\n"
"t = ET.XML(\"\"\"<root/>\"\"\", parser=p)"

#: ../../whatsnew/2.7.rst:2027
msgid ""
"Errors in parsing XML now raise a :exc:`~xml.etree.ElementTree.ParseError` "
"exception, whose instances have a :attr:`!position` attribute containing a "
"(*line*, *column*) tuple giving the location of the problem."
msgstr ""
"解析 XML 时的错误现在会引发一个 :exc:`~xml.etree.ElementTree.ParseError` 异常，其实例具有一个 "
":attr:`!position` 属性，包含一个 (*line*, *column*) 元组，指示问题的位置。"

#: ../../whatsnew/2.7.rst:2031
msgid ""
"ElementTree's code for converting trees to a string has been significantly "
"reworked, making it roughly twice as fast in many cases.  The "
":meth:`ElementTree.write() <xml.etree.ElementTree.ElementTree.write>` and "
":meth:`Element.write` methods now have a *method* parameter that can be "
"\"xml\" (the default), \"html\", or \"text\".  HTML mode will output empty "
"elements as ``<empty></empty>`` instead of ``<empty/>``, and text mode will "
"skip over elements and only output the text chunks.  If you set the "
":attr:`~xml.etree.ElementTree.Element.tag` attribute of an element to "
"``None`` but leave its children in place, the element will be omitted when "
"the tree is written out, so you don't need to do more extensive "
"rearrangement to remove a single element."
msgstr ""
"ElementTree将树转换为字符串的代码已大幅重构，在许多情况下速度大约提高了一倍。:meth:`ElementTree.write() "
"<xml.etree.ElementTree.ElementTree.write>` 和 :meth:`Element.write` 方法现在有一个 "
"*method* 参数，可以是\"xml\"（默认）、\"html\"或\"text\"。HTML模式会将空元素输出为 "
"``<empty></empty>`` 而不是 ``<empty/>``，文本模式将跳过元素仅输出文本块。如果将一个元素的 "
":attr:`~xml.etree.ElementTree.Element.tag` 属性设置为 ``None`` "
"但其子元素仍在原位，则在写出树时该元素将被省略，因此无需进行更广泛的重新排列来移除单个元素。"

#: ../../whatsnew/2.7.rst:2044
msgid ""
"Namespace handling has also been improved.  All ``xmlns:<whatever>`` "
"declarations are now output on the root element, not scattered throughout "
"the resulting XML.  You can set the default namespace for a tree by setting "
"the :attr:`default_namespace` attribute and can register new prefixes with "
":meth:`~xml.etree.ElementTree.register_namespace`.  In XML mode, you can use"
" the true/false *xml_declaration* parameter to suppress the XML declaration."
msgstr ""
"命名空间处理也得到了改进。所有 ``xmlns:<whatever>`` 声明现在都输出在根元素上，而不是散布在生成的XML中。可以通过设置 "
":attr:`default_namespace` 属性来设置树的默认命名空间，并可以使用 "
":meth:`~xml.etree.ElementTree.register_namespace` "
"注册新的前缀。在XML模式下，可以使用true/false的 *xml_declaration* 参数来抑制XML声明。"

#: ../../whatsnew/2.7.rst:2052
msgid ""
"New :class:`~xml.etree.ElementTree.Element` method: "
":meth:`~xml.etree.ElementTree.Element.extend` appends the items from a "
"sequence to the element's children.  Elements themselves behave like "
"sequences, so it's easy to move children from one element to another::"
msgstr ""
"新的 :class:`~xml.etree.ElementTree.Element` 方法： "
":meth:`~xml.etree.ElementTree.Element.extend` "
"将序列中的项追加到元素的子元素中。元素本身表现得像序列，因此可以轻松地将子元素从一个元素移动到另一个元素::"

#: ../../whatsnew/2.7.rst:2058
msgid ""
"from xml.etree import ElementTree as ET\n"
"\n"
"t = ET.XML(\"\"\"<list>\n"
"  <item>1</item> <item>2</item>  <item>3</item>\n"
"</list>\"\"\")\n"
"new = ET.XML('<root/>')\n"
"new.extend(t)\n"
"\n"
"# Outputs <root><item>1</item>...</root>\n"
"print ET.tostring(new)"
msgstr ""
"from xml.etree import ElementTree as ET\n"
"\n"
"t = ET.XML(\"\"\"<list>\n"
"  <item>1</item> <item>2</item>  <item>3</item>\n"
"</list>\"\"\")\n"
"new = ET.XML('<root/>')\n"
"new.extend(t)\n"
"\n"
"# 输出 <root><item>1</item>...</root>\n"
"print ET.tostring(new)"

#: ../../whatsnew/2.7.rst:2069
msgid ""
"New :class:`~xml.etree.ElementTree.Element` method: "
":meth:`~xml.etree.ElementTree.Element.iter` yields the children of the "
"element as a generator.  It's also possible to write ``for child in elem:`` "
"to loop over an element's children.  The existing method "
":meth:`!getiterator` is now deprecated, as is :meth:`!getchildren` which "
"constructs and returns a list of children."
msgstr ""
"新增 :class:`~xml.etree.ElementTree.Element` 方法： "
":meth:`~xml.etree.ElementTree.Element.iter` 以生成器的形式生成元素的子元素。也可以使用 ``for "
"child in elem:`` 来遍历元素的子元素。现有的方法 :meth:`!getiterator` 现在已被弃用，同样 "
":meth:`!getchildren` 也会被弃用，因为它构造并返回子元素的列表。"

#: ../../whatsnew/2.7.rst:2076
msgid ""
"New :class:`~xml.etree.ElementTree.Element` method: "
":meth:`~xml.etree.ElementTree.Element.itertext` yields all chunks of text "
"that are descendants of the element.  For example::"
msgstr ""
"新增 :class:`~xml.etree.ElementTree.Element` 方法： "
":meth:`~xml.etree.ElementTree.Element.itertext` 生成元素的所有后代文本块。例如::"

#: ../../whatsnew/2.7.rst:2080
msgid ""
"t = ET.XML(\"\"\"<list>\n"
"  <item>1</item> <item>2</item>  <item>3</item>\n"
"</list>\"\"\")\n"
"\n"
"# Outputs ['\\n  ', '1', ' ', '2', '  ', '3', '\\n']\n"
"print list(t.itertext())"
msgstr ""
"t = ET.XML(\"\"\"<list>\n"
"  <item>1</item> <item>2</item>  <item>3</item>\n"
"</list>\"\"\")\n"
"\n"
"# 输出 ['\\n  ', '1', ' ', '2', '  ', '3', '\\n']\n"
"print list(t.itertext())"

#: ../../whatsnew/2.7.rst:2087
msgid ""
"Deprecated: using an element as a Boolean (i.e., ``if elem:``) would return "
"true if the element had any children, or false if there were no children.  "
"This behaviour is confusing -- ``None`` is false, but so is a childless "
"element? -- so it will now trigger a :exc:`FutureWarning`.  In your code, "
"you should be explicit: write ``len(elem) != 0`` if you're interested in the"
" number of children, or ``elem is not None``."
msgstr ""
"已弃用：使用元素作为布尔值（即 ``if elem:``）如果元素有任何子元素则返回真，如果没有子元素则返回假。这种行为是令人困惑的——``None``"
" 是假，但无子元素的元素也是假？——因此现在会触发 :exc:`FutureWarning`。在你的代码中，应该明确：如果你关心子元素的数量，写 "
"``len(elem) != 0``；如果你想检查元素是否为空，写 ``elem is not None``。"

#: ../../whatsnew/2.7.rst:2095
msgid ""
"Fredrik Lundh develops ElementTree and produced the 1.3 version; you can "
"read his article describing 1.3 at "
"https://web.archive.org/web/20200703234532/http://effbot.org/zone/elementtree-13-intro.htm."
" Florent Xicluna updated the version included with Python, after discussions"
" on python-dev and in :issue:`6472`.)"
msgstr ""
"Fredrik Lundh 开发了 ElementTree 并制作了 1.3 版本；你可以在 "
"https://web.archive.org/web/20200703234532/http://effbot.org/zone/elementtree-13-intro.htm"
" 阅读他描述 1.3 的文章。Florent Xicluna 在 python-dev 上的讨论和在 :issue:`6472` 中更新了包含在 "
"Python 中的版本。"

#: ../../whatsnew/2.7.rst:2105
msgid "Build and C API Changes"
msgstr "构建和 C API 的变更"

#: ../../whatsnew/2.7.rst:2107
msgid "Changes to Python's build process and to the C API include:"
msgstr "针对 Python 构建过程和 C API 的变更包括:"

#: ../../whatsnew/2.7.rst:2109
msgid ""
"The latest release of the GNU Debugger, GDB 7, can be `scripted using Python"
" "
"<https://web.archive.org/web/20110715084810/http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html>`__."
" When you begin debugging an executable program P, GDB will look for a file "
"named ``P-gdb.py`` and automatically read it.  Dave Malcolm contributed a "
":file:`python-gdb.py` that adds a number of commands useful when debugging "
"Python itself.  For example, ``py-up`` and ``py-down`` go up or down one "
"Python stack frame, which usually corresponds to several C stack frames.  "
"``py-print`` prints the value of a Python variable, and ``py-bt`` prints the"
" Python stack trace.  (Added as a result of :issue:`8032`.)"
msgstr ""
"最新发布的GNU调试器GDB 7可以使用Python进行`脚本化 "
"<https://web.archive.org/web/20110715084810/http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html>`__。当你开始调试可执行程序P时，GDB会查找名为``P-gdb.py``的文件并自动读取它。Dave"
" Malcolm 贡献了一个 :file:`python-gdb.py`，该文件添加了许多在调试Python本身时非常有用的命令。例如，``py-"
"up`` 和 ``py-down`` 可以向上或向下移动一个 Python 堆栈帧，这通常对应于多个C堆栈帧。``py-print`` 打印 "
"Python 变量的值，而 ``py-bt`` 打印 Python 堆栈跟踪。（作为 :issue:`8032` 的结果添加。）"

#: ../../whatsnew/2.7.rst:2121
msgid ""
"If you use the :file:`.gdbinit` file provided with Python, the \"pyo\" macro"
" in the 2.7 version now works correctly when the thread being debugged "
"doesn't hold the GIL; the macro now acquires it before printing. "
"(Contributed by Victor Stinner; :issue:`3632`.)"
msgstr ""
"如果你使用Python提供的 :file:`.gdbinit` 文件，2.7版本中的 \"pyo\" "
"宏现在在调试的线程不持有GIL时也能正确工作；该宏现在在打印之前会获取GIL。（由 Victor Stinner 贡献；参见 "
":issue:`3632`。）"

#: ../../whatsnew/2.7.rst:2126
msgid ""
":c:func:`Py_AddPendingCall` is now thread-safe, letting any worker thread "
"submit notifications to the main Python thread.  This is particularly useful"
" for asynchronous IO operations. (Contributed by Kristján Valur Jónsson; "
":issue:`4293`.)"
msgstr ""
":c:func:`Py_AddPendingCall` 现在线程安全，允许任何工作线程向主 Python 线程提交通知。 这对于异步 IO "
"操作特别有用。 （由 Kristján Valur Jónsson 贡献；参见 :issue:`4293`。）"

#: ../../whatsnew/2.7.rst:2131
msgid ""
"New function: :c:func:`PyCode_NewEmpty` creates an empty code object; only "
"the filename, function name, and first line number are required. This is "
"useful for extension modules that are attempting to construct a more useful "
"traceback stack.  Previously such extensions needed to call "
":c:func:`!PyCode_New`, which had many more arguments.  (Added by Jeffrey "
"Yasskin.)"
msgstr ""
"新增函数：:c:func:`PyCode_NewEmpty` "
"创建一个空代码对象；只需要文件名、函数名和首行号。这对于试图构建更有用的回溯堆栈的扩展模块非常有用。之前这样的扩展需要调用 "
":c:func:`!PyCode_New`，该函数有更多的参数。 （由 Jeffrey Yasskin 添加。）"

#: ../../whatsnew/2.7.rst:2138
msgid ""
"New function: :c:func:`PyErr_NewExceptionWithDoc` creates a new exception "
"class, just as the existing :c:func:`PyErr_NewException` does, but takes an "
"extra ``char *`` argument containing the docstring for the new exception "
"class.  (Added by 'lekma' on the Python bug tracker; :issue:`7033`.)"
msgstr ""
"新增函数: :c:func:`PyErr_NewExceptionWithDoc` 创建一个新的异常类，就像现有的 "
":c:func:`PyErr_NewException` 一样，但多了一个包含新异常类文档字符串的 ``char *`` 参数。 （由 'lekma' "
"在 Python 错误跟踪器中添加；参见 :issue:`7033`。）"

#: ../../whatsnew/2.7.rst:2144
msgid ""
"New function: :c:func:`PyFrame_GetLineNumber` takes a frame object and "
"returns the line number that the frame is currently executing. Previously "
"code would need to get the index of the bytecode instruction currently "
"executing, and then look up the line number corresponding to that address.  "
"(Added by Jeffrey Yasskin.)"
msgstr ""
"新增函数：:c:func:`PyFrame_GetLineNumber` "
"接受一个帧对象，并返回该帧当前执行的行号。之前需要获取当前执行的字节码指令的索引，然后查找对应地址的行号。（由 Jeffrey Yasskin 添加。）"

#: ../../whatsnew/2.7.rst:2150
msgid ""
"New functions: :c:func:`PyLong_AsLongAndOverflow` and "
":c:func:`PyLong_AsLongLongAndOverflow`  approximates a Python long integer "
"as a C :c:expr:`long` or :c:expr:`long long`. If the number is too large to "
"fit into the output type, an *overflow* flag is set and returned to the "
"caller. (Contributed by Case Van Horsen; :issue:`7528` and :issue:`7767`.)"
msgstr ""
"新增函数：:c:func:`PyLong_AsLongAndOverflow` 和 "
":c:func:`PyLong_AsLongLongAndOverflow` 可将 Python 长整型数值近似转换为 C 语言的 "
":c:expr:`long` 或 :c:expr:`long long` 类型。若数值过大而无法容纳于目标输出类型中，则会设置 *溢出* "
"标志位，并将该标志返回给调用者。（由 Case Van Horsen 贡献；参见 :issue:`7528` 和 :issue:`7767`。）"

#: ../../whatsnew/2.7.rst:2157
msgid ""
"New function: stemming from the rewrite of string-to-float conversion, a new"
" :c:func:`PyOS_string_to_double` function was added.  The old "
":c:func:`!PyOS_ascii_strtod` and :c:func:`!PyOS_ascii_atof` functions are "
"now deprecated."
msgstr ""
"新增函数：由于字符串到浮点数转换的重写，新增了 :c:func:`PyOS_string_to_double` 函数。旧的 "
":c:func:`!PyOS_ascii_strtod` 和 :c:func:`!PyOS_ascii_atof` 函数现已弃用。"

#: ../../whatsnew/2.7.rst:2162
msgid ""
"New function: :c:func:`!PySys_SetArgvEx` sets the value of ``sys.argv`` and "
"can optionally update ``sys.path`` to include the directory containing the "
"script named by ``sys.argv[0]`` depending on the value of an *updatepath* "
"parameter."
msgstr ""
"新增函数：:c:func:`!PySys_SetArgvEx` 设置 ``sys.argv`` 的值，并可根据 *updatepath* "
"参数的值，选择性地更新 ``sys.path`` 以包含包含由 ``sys.argv[0]`` 指定的脚本的目录。"

#: ../../whatsnew/2.7.rst:2167
msgid ""
"This function was added to close a security hole for applications that embed"
" Python.  The old function, :c:func:`!PySys_SetArgv`, would always update "
"``sys.path``, and sometimes it would add the current directory.  This meant "
"that, if you ran an application embedding Python in a directory controlled "
"by someone else, attackers could put a Trojan-horse module in the directory "
"(say, a file named :file:`os.py`) that your application would then import "
"and run."
msgstr ""
"添加此函数是为了关闭嵌入 Python 的应用程序的安全漏洞。旧的函数 :c:func:`!PySys_SetArgv` 总是更新 "
"``sys.path``，有时还会添加当前目录。这意味着，如果你在受他人控制的目录中运行嵌入 Python "
"的应用程序，攻击者可以在该目录中放置一个木马模块（例如，一个名为 :file:`os.py` 的文件），你的应用程序将会导入并运行它。"

#: ../../whatsnew/2.7.rst:2175
msgid ""
"If you maintain a C/C++ application that embeds Python, check whether you're"
" calling :c:func:`!PySys_SetArgv` and carefully consider whether the "
"application should be using :c:func:`!PySys_SetArgvEx` with *updatepath* set"
" to false."
msgstr ""
"如果你维护一个嵌入 Python 的 C/C++ 应用程序，请检查你是否调用了 :c:func:`!PySys_SetArgv`，并仔细考虑是否应该使用"
" *updatepath* 设置为 false 的 :c:func:`!PySys_SetArgvEx`。"

#: ../../whatsnew/2.7.rst:2180
msgid ""
"Security issue reported as :cve:`2008-5983`; discussed in :issue:`5753`, and"
" fixed by Antoine Pitrou."
msgstr "安全问题报告为 :cve:`2008-5983`；在 :issue:`5753` 中讨论，并由 Antoine Pitrou 修复。"

#: ../../whatsnew/2.7.rst:2183
msgid ""
"New macros: the Python header files now define the following macros: "
":c:macro:`Py_ISALNUM`, :c:macro:`Py_ISALPHA`, :c:macro:`Py_ISDIGIT`, "
":c:macro:`Py_ISLOWER`, :c:macro:`Py_ISSPACE`, :c:macro:`Py_ISUPPER`, "
":c:macro:`Py_ISXDIGIT`, :c:macro:`Py_TOLOWER`, and :c:macro:`Py_TOUPPER`. "
"All of these functions are analogous to the C standard macros for "
"classifying characters, but ignore the current locale setting, because in "
"several places Python needs to analyze characters in a locale-independent "
"way.  (Added by Eric Smith; :issue:`5793`.)"
msgstr ""
"新增宏：Python 头文件现在定义了以下宏：:c:macro:`Py_ISALNUM`、 :c:macro:`Py_ISALPHA`、 "
":c:macro:`Py_ISDIGIT`、 :c:macro:`Py_ISLOWER`、 :c:macro:`Py_ISSPACE`、 "
":c:macro:`Py_ISUPPER`、 :c:macro:`Py_ISXDIGIT`、 :c:macro:`Py_TOLOWER` 和 "
":c:macro:`Py_TOUPPER`。所有这些函数都类似于 C 标准宏，用于分类字符，但忽略当前区域设置，因为在几个地方 Python "
"需要以与区域设置无关的方式分析字符。（由 Eric Smith 添加；参见 :issue:`5793`。）"

#: ../../whatsnew/2.7.rst:2201
msgid ""
"Removed function: :c:func:`!PyEval_CallObject` is now only available as a "
"macro.  A function version was being kept around to preserve ABI linking "
"compatibility, but that was in 1997; it can certainly be deleted by now.  "
"(Removed by Antoine Pitrou; :issue:`8276`.)"
msgstr ""
"移除函数：:c:func:`!PyEval_CallObject` 现在仅作为宏可用。保留函数版本是为了保持 ABI 链接兼容性，但这已是 1997 "
"年的事；现在可以删除了。（由 Antoine Pitrou 移除；参见 :issue:`8276`。）"

#: ../../whatsnew/2.7.rst:2206
msgid ""
"New format codes: the :c:func:`!PyString_FromFormat`, "
":c:func:`!PyString_FromFormatV`, and :c:func:`PyErr_Format` functions now "
"accept ``%lld`` and ``%llu`` format codes for displaying C's :c:expr:`long "
"long` types. (Contributed by Mark Dickinson; :issue:`7228`.)"
msgstr ""
"新增格式代码：:c:func:`!PyString_FromFormat`、 :c:func:`!PyString_FromFormatV` 和 "
":c:func:`PyErr_Format` 函数现在接受 ``%lld`` 和 ``%llu`` 格式代码，用于显示 C 的 "
":c:expr:`long long` 类型。（由 Mark Dickinson 贡献；参见 :issue:`7228`。）"

#: ../../whatsnew/2.7.rst:2212
msgid ""
"The complicated interaction between threads and process forking has been "
"changed.  Previously, the child process created by :func:`os.fork` might "
"fail because the child is created with only a single thread running, the "
"thread performing the :func:`os.fork`. If other threads were holding a lock,"
" such as Python's import lock, when the fork was performed, the lock would "
"still be marked as \"held\" in the new process.  But in the child process "
"nothing would ever release the lock, since the other threads weren't "
"replicated, and the child process would no longer be able to perform "
"imports."
msgstr ""
"线程和进程分叉之间的复杂交互已更改。之前，由 :func:`os.fork` 创建的子进程可能会失败，因为子进程仅有一个线程在运行，即执行 "
":func:`os.fork` 的线程。如果其他线程在执行分叉时持有锁（例如 Python "
"的导入锁），则该锁在新进程中仍会标记为“已持有”。但在子进程中，由于其他线程未复制，子进程将无法释放该锁，从而无法再执行导入。"

#: ../../whatsnew/2.7.rst:2222
msgid ""
"Python 2.7 acquires the import lock before performing an :func:`os.fork`, "
"and will also clean up any locks created using the :mod:`threading` module."
"  C extension modules that have internal locks, or that call "
":c:func:`fork()` themselves, will not benefit from this clean-up."
msgstr ""
"Python 2.7 在执行 :func:`os.fork` 之前获取导入锁，并清理使用 :mod:`threading` "
"模块创建的任何锁。具有内部锁的 C 扩展模块，或自行调用 :c:func:`fork()` 的模块，将不会受益于这种清理。"

#: ../../whatsnew/2.7.rst:2228
msgid "(Fixed by Thomas Wouters; :issue:`1590864`.)"
msgstr "（由 Thomas Wouters 修复；参见 :issue:`1590864`。）"

#: ../../whatsnew/2.7.rst:2230
msgid ""
"The :c:func:`Py_Finalize` function now calls the internal "
":func:`!threading._shutdown` function; this prevents some exceptions from "
"being raised when an interpreter shuts down. (Patch by Adam Olsen; "
":issue:`1722344`.)"
msgstr ""
":c:func:`Py_Finalize` 函数现在调用内部的 :func:`!threading._shutdown` "
"函数；这防止了解释器关闭时一些异常的抛出。（由 Adam Olsen 提交补丁；参见 :issue:`1722344`。）"

#: ../../whatsnew/2.7.rst:2235
msgid ""
"When using the :c:type:`PyMemberDef` structure to define attributes of a "
"type, Python will no longer let you try to delete or set a "
":c:macro:`T_STRING_INPLACE` attribute."
msgstr ""
"当使用 :c:type:`PyMemberDef` 结构体定义类型的属性时，Python 将不再允许你尝试删除或设置 "
":c:macro:`T_STRING_INPLACE` 属性。"

#: ../../whatsnew/2.7.rst:2241
msgid ""
"Global symbols defined by the :mod:`ctypes` module are now prefixed with "
"``Py``, or with ``_ctypes``.  (Implemented by Thomas Heller; :issue:`3102`.)"
msgstr ""
"由 :mod:`ctypes` 模块定义的全局符号现在以 ``Py`` 或 ``_ctypes`` 为前缀。（由 Thomas Heller 实现；参见"
" :issue:`3102`。）"

#: ../../whatsnew/2.7.rst:2245
msgid ""
"New configure option: the :option:`!--with-system-expat` switch allows "
"building the :mod:`pyexpat <xml.parsers.expat>` module to use the system "
"Expat library. (Contributed by Arfrever Frehtes Taifersar Arahesis; "
":issue:`7609`.)"
msgstr ""
"新增配置选项：:option:`!--with-system-expat` 开关允许构建 :mod:`pyexpat "
"<xml.parsers.expat>` 模块以使用系统 Expat 库。（由 Arfrever Frehtes Taifersar Arahesis "
"贡献；参见 :issue:`7609`。）"

#: ../../whatsnew/2.7.rst:2249
msgid ""
"New configure option: the :option:`!--with-valgrind` option will now disable"
" the pymalloc allocator, which is difficult for the Valgrind memory-error "
"detector to analyze correctly. Valgrind will therefore be better at "
"detecting memory leaks and overruns. (Contributed by James Henstridge; "
":issue:`2422`.)"
msgstr ""
"新增配置选项：:option:`!--with-valgrind` 选项现在将禁用 pymalloc 分配器，该分配器难以被 Valgrind "
"内存错误检测器正确分析。因此，Valgrind 将更好地检测内存泄漏和溢出。（由 James Henstridge 贡献；参见 "
":issue:`2422`。）"

#: ../../whatsnew/2.7.rst:2256
msgid ""
"New configure option: you can now supply an empty string to :option:`!--"
"with-dbmliborder=` in order to disable all of the various DBM modules.  "
"(Added by Arfrever Frehtes Taifersar Arahesis; :issue:`6491`.)"
msgstr ""
"新增配置选项：你现在可以提供一个空字符串给 :option:`!--with-dbmliborder=` 以禁用所有各种 DBM 模块。（由 "
"Arfrever Frehtes Taifersar Arahesis 添加；参见 :issue:`6491`。）"

#: ../../whatsnew/2.7.rst:2261
msgid ""
"The :program:`configure` script now checks for floating-point rounding bugs "
"on certain 32-bit Intel chips and defines a :c:macro:`X87_DOUBLE_ROUNDING` "
"preprocessor definition.  No code currently uses this definition, but it's "
"available if anyone wishes to use it. (Added by Mark Dickinson; "
":issue:`2937`.)"
msgstr ""
":program:`configure` 脚本现在检查某些 32 位 Intel 芯片上的浮点舍入错误，并定义一个 "
":c:macro:`X87_DOUBLE_ROUNDING` 预处理器定义。当前没有代码使用这个定义，但它是可用的，如果有人希望使用它。（由 Mark "
"Dickinson 添加；参见 :issue:`2937`。）"

#: ../../whatsnew/2.7.rst:2267
msgid ""
":program:`configure` also now sets a :envvar:`LDCXXSHARED` Makefile variable"
" for supporting C++ linking.  (Contributed by Arfrever Frehtes Taifersar "
"Arahesis; :issue:`1222585`.)"
msgstr ""
":program:`configure` 现在还设置了一个 :envvar:`LDCXXSHARED` Makefile 变量以支持 C++ 链接。（由"
" Arfrever Frehtes Taifersar Arahesis 贡献；参见 :issue:`1222585`。）"

#: ../../whatsnew/2.7.rst:2271
msgid ""
"The build process now creates the necessary files for pkg-config support.  "
"(Contributed by Clinton Roy; :issue:`3585`.)"
msgstr "构建过程现在创建必要的文件以支持 pkg-config。（由 Clinton Roy 贡献；参见 :issue:`3585`。）"

#: ../../whatsnew/2.7.rst:2274
msgid ""
"The build process now supports Subversion 1.7.  (Contributed by Arfrever "
"Frehtes Taifersar Arahesis; :issue:`6094`.)"
msgstr ""
"构建过程现在支持 Subversion 1.7。（由 Arfrever Frehtes Taifersar Arahesis 贡献；参见 "
":issue:`6094`。）"

#: ../../whatsnew/2.7.rst:2281
msgid "Capsules"
msgstr "Capsule 对象"

#: ../../whatsnew/2.7.rst:2283
msgid ""
"Python 3.1 adds a new C datatype, :c:type:`PyCapsule`, for providing a C API"
" to an extension module.  A capsule is essentially the holder of a C ``void "
"*`` pointer, and is made available as a module attribute; for example, the "
":mod:`socket` module's API is exposed as ``socket.CAPI``, and "
":mod:`unicodedata` exposes ``ucnhash_CAPI``.  Other extensions can import "
"the module, access its dictionary to get the capsule object, and then get "
"the ``void *`` pointer, which will usually point to an array of pointers to "
"the module's various API functions."
msgstr ""
"Python 3.1 新增了一种 C 数据类型 :c:type:`PyCapsule`，用于为扩展模块提供 C 语言 API "
"接口。胶囊（capsule）本质上是 C 语言中 ``void *`` 指针的封装载体，并作为模块属性对外暴露；例如，:mod:`socket` 模块的"
" API 通过 ``socket.CAPI`` 暴露，而 :mod:`unicodedata` 模块则暴露了 "
"``ucnhash_CAPI``。其他扩展模块可以导入该模块，访问其字典以获取胶囊对象，进而获取其中的 ``void *`` "
"指针——该指针通常指向一个指针数组，其中包含模块各类 API 函数的地址。"

#: ../../whatsnew/2.7.rst:2292
msgid ""
"There is an existing data type already used for this, :c:type:`!PyCObject`, "
"but it doesn't provide type safety.  Evil code written in pure Python could "
"cause a segmentation fault by taking a :c:type:`!PyCObject` from module A "
"and somehow substituting it for the :c:type:`!PyCObject` in module B.   "
"Capsules know their own name, and getting the pointer requires providing the"
" name:"
msgstr ""
"已经有一个用于此目的的现有数据类型，:c:type:`!PyCObject`，但它不提供类型安全。用纯 Python 编写的恶意代码可能会通过从模块 A"
" 获取 :c:type:`!PyCObject` 并以某种方式将其替换为模块 B 中的 :c:type:`!PyCObject` "
"来导致段错误。胶囊知道它们自己的名称，获取指针需要提供名称："

#: ../../whatsnew/2.7.rst:2299
msgid ""
"void *vtable;\n"
"\n"
"if (!PyCapsule_IsValid(capsule, \"mymodule.CAPI\") {\n"
"        PyErr_SetString(PyExc_ValueError, \"argument type invalid\");\n"
"        return NULL;\n"
"}\n"
"\n"
"vtable = PyCapsule_GetPointer(capsule, \"mymodule.CAPI\");"
msgstr ""
"void *vtable;\n"
"\n"
"if (!PyCapsule_IsValid(capsule, \"mymodule.CAPI\") {\n"
"        PyErr_SetString(PyExc_ValueError, \"argument type invalid\");\n"
"        return NULL;\n"
"}\n"
"\n"
"vtable = PyCapsule_GetPointer(capsule, \"mymodule.CAPI\");"

#: ../../whatsnew/2.7.rst:2310
msgid ""
"You are assured that ``vtable`` points to whatever you're expecting. If a "
"different capsule was passed in, :c:func:`PyCapsule_IsValid` would detect "
"the mismatched name and return false.  Refer to :ref:`using-capsules` for "
"more information on using these objects."
msgstr ""
"你可以确信 ``vtable`` 指向你所期望的内容。如果传递了不同的胶囊，:c:func:`PyCapsule_IsValid` "
"会检测到不匹配的名称并返回 false。有关使用这些对象的更多信息，请参阅 :ref:`using-capsules`。"

#: ../../whatsnew/2.7.rst:2315
msgid ""
"Python 2.7 now uses capsules internally to provide various extension-module "
"APIs, but the :c:func:`!PyCObject_AsVoidPtr` was modified to handle "
"capsules, preserving compile-time compatibility with the "
":c:type:`!PyCObject` interface.  Use of :c:func:`!PyCObject_AsVoidPtr` will "
"signal a :exc:`PendingDeprecationWarning`, which is silent by default."
msgstr ""
"Python 2.7 现在内部使用胶囊来提供各种扩展模块 API，但 :c:func:`!PyCObject_AsVoidPtr` "
"已被修改以处理胶囊，保留了与 :c:type:`!PyCObject` 接口的编译时兼容性。使用 "
":c:func:`!PyCObject_AsVoidPtr` 将发出 "
":exc:`PendingDeprecationWarning`，默认情况下是静默的。"

#: ../../whatsnew/2.7.rst:2322
msgid ""
"Implemented in Python 3.1 and backported to 2.7 by Larry Hastings; discussed"
" in :issue:`5630`."
msgstr "在 Python 3.1 中实现并向下移植到 2.7，由 Larry Hastings 完成；在 :issue:`5630` 中讨论。"

#: ../../whatsnew/2.7.rst:2329
msgid "Port-Specific Changes: Windows"
msgstr "特定于 Windows 的更改："

#: ../../whatsnew/2.7.rst:2331
msgid ""
"The :mod:`msvcrt` module now contains some constants from the "
":file:`crtassem.h` header file: :data:`~msvcrt.CRT_ASSEMBLY_VERSION`, "
":data:`~msvcrt.VC_ASSEMBLY_PUBLICKEYTOKEN`, and "
":data:`~msvcrt.LIBRARIES_ASSEMBLY_NAME_PREFIX`. (Contributed by David "
"Cournapeau; :issue:`4365`.)"
msgstr ""
":mod:`msvcrt` 模块现在包含来自 :file:`crtassem.h` "
"头文件的一些常量：:data:`~msvcrt.CRT_ASSEMBLY_VERSION`、 "
":data:`~msvcrt.VC_ASSEMBLY_PUBLICKEYTOKEN` 和 "
":data:`~msvcrt.LIBRARIES_ASSEMBLY_NAME_PREFIX`。（由 David Cournapeau 贡献；参见 "
":issue:`4365`。）"

#: ../../whatsnew/2.7.rst:2338
msgid ""
"The :mod:`_winreg <winreg>` module for accessing the registry now implements"
" the :func:`~winreg.CreateKeyEx` and :func:`~winreg.DeleteKeyEx` functions, "
"extended versions of previously supported functions that take several extra "
"arguments.  The :func:`~winreg.DisableReflectionKey`, "
":func:`~winreg.EnableReflectionKey`, and :func:`~winreg.QueryReflectionKey` "
"were also tested and documented. (Implemented by Brian Curtin: "
":issue:`7347`.)"
msgstr ""
"用于访问注册表的 :mod:`_winreg <winreg>` 模块现在实现了 :func:`~winreg.CreateKeyEx` 和 "
":func:`~winreg.DeleteKeyEx` "
"函数，这些是之前支持函数的扩展版本，它们接受几个额外的参数。:func:`~winreg.DisableReflectionKey`、 "
":func:`~winreg.EnableReflectionKey` 和 :func:`~winreg.QueryReflectionKey` "
"也经过了测试和文档记录。（由 Brian Curtin 实现：:issue:`7347`。）"

#: ../../whatsnew/2.7.rst:2346
msgid ""
"The new :c:func:`!_beginthreadex` API is used to start threads, and the "
"native thread-local storage functions are now used. (Contributed by Kristján"
" Valur Jónsson; :issue:`3582`.)"
msgstr ""
"新的 :c:func:`!_beginthreadex` API 用于启动线程，现在使用了本地线程局部存储函数。（由 Kristján Valur "
"Jónsson 贡献；参见 :issue:`3582`。）"

#: ../../whatsnew/2.7.rst:2350
msgid ""
"The :func:`os.kill` function now works on Windows.  The signal value can be "
"the constants :const:`~signal.CTRL_C_EVENT`, "
":const:`~signal.CTRL_BREAK_EVENT`, or any integer.  The first two constants "
"will send :kbd:`Control-C` and :kbd:`Control-Break` keystroke events to "
"subprocesses; any other value will use the :c:func:`!TerminateProcess` API."
"  (Contributed by Miki Tebeka; :issue:`1220212`.)"
msgstr ""
":func:`os.kill` 函数现在在 Windows 上工作。信号值可以是常量 :const:`~signal.CTRL_C_EVENT`、 "
":const:`~signal.CTRL_BREAK_EVENT` 或任何整数。前两个常量将向子进程发送 :kbd:`Control-C` 和 "
":kbd:`Control-Break` 键盘事件；任何其他值将使用 :c:func:`!TerminateProcess` API。（由 Miki "
"Tebeka 贡献；参见 :issue:`1220212`。）"

#: ../../whatsnew/2.7.rst:2357
msgid ""
"The :func:`os.listdir` function now correctly fails for an empty path.  "
"(Fixed by Hirokazu Yamamoto; :issue:`5913`.)"
msgstr ""
":func:`os.listdir` 函数现在在空路径时正确地失败。（由 Hirokazu Yamamoto 修复；参见 :issue:`5913`。）"

#: ../../whatsnew/2.7.rst:2360
msgid ""
"The :mod:`mimetypes` module will now read the MIME database from the Windows"
" registry when initializing. (Patch by Gabriel Genellina; :issue:`4969`.)"
msgstr ""
":mod:`mimetypes` 模块在初始化时现在会从 Windows 注册表读取 MIME 数据库。（由 Gabriel Genellina "
"提供补丁；参见 :issue:`4969`。）"

#: ../../whatsnew/2.7.rst:2367
msgid "Port-Specific Changes: Mac OS X"
msgstr "特定于 Mac OS X 的更改："

#: ../../whatsnew/2.7.rst:2369
msgid ""
"The path ``/Library/Python/2.7/site-packages`` is now appended to "
"``sys.path``, in order to share added packages between the system "
"installation and a user-installed copy of the same version. (Changed by "
"Ronald Oussoren; :issue:`4865`.)"
msgstr ""
"路径 ``/Library/Python/2.7/site-packages`` 现在附加到 "
"``sys.path``，以便在系统安装和用户安装的同一版本的副本之间共享添加的包。（由 Ronald Oussoren 更改；参见 "
":issue:`4865`。）"

#: ../../whatsnew/2.7.rst:2376
msgid ""
"As of 2.7.13, this change was removed. ``/Library/Python/2.7/site-"
"packages``, the site-packages directory used by the Apple-supplied system "
"Python 2.7 is no longer appended to ``sys.path`` for user-installed Pythons "
"such as from the python.org installers.  As of macOS 10.12, Apple changed "
"how the system site-packages directory is configured, which could cause "
"installation of pip components, like setuptools, to fail.  Packages "
"installed for the system Python will no longer be shared with user-installed"
" Pythons. (:issue:`28440`)"
msgstr ""
"自2.7.13版本起，这一变更已被移除。``/Library/Python/2.7/site-packages``，即Apple提供的系统Python "
"2.7所使用的site-packages目录，不再被追加到用户安装的Python（例如通过python.org安装器安装的Python）的 "
"``sys.path`` 中。自 macOS 10.12 起，Apple 更改了系统 site-packages "
"目录的配置方式，这可能导致安装pip组件（如setuptools）失败。为系统 Python 安装的包将不再与用户安装的 Python 共享。(参见 "
":issue:`28440`)"

#: ../../whatsnew/2.7.rst:2387
msgid "Port-Specific Changes: FreeBSD"
msgstr "特定于 FreeBSD 的更改："

#: ../../whatsnew/2.7.rst:2389
msgid ""
"FreeBSD 7.1's :const:`!SO_SETFIB` constant, used with the "
":func:`~socket.socket` methods "
":func:`~socket.socket.getsockopt`/:func:`~socket.socket.setsockopt` to "
"select an alternate routing table, is now available in the :mod:`socket` "
"module.  (Added by Kyle VanderBeek; :issue:`8235`.)"
msgstr ""
"FreeBSD 7.1中的 :const:`!SO_SETFIB` 常量，用于与 :func:`~socket.socket` 方法的 "
":func:`~socket.socket.getsockopt`/:func:`~socket.socket.setsockopt` "
"一起选择备用路由表，现在已在 :mod:`socket` 模块中提供。（由 Kyle VanderBeek 添加;参见 :issue:`8235`。）"

#: ../../whatsnew/2.7.rst:2395
msgid "Other Changes and Fixes"
msgstr "其他的变更和修正"

#: ../../whatsnew/2.7.rst:2397
msgid ""
"Two benchmark scripts, :file:`iobench` and :file:`ccbench`, were added to "
"the :file:`Tools` directory.  :file:`iobench` measures the speed of the "
"built-in file I/O objects returned by :func:`open` while performing various "
"operations, and :file:`ccbench` is a concurrency benchmark that tries to "
"measure computing throughput, thread switching latency, and IO processing "
"bandwidth when performing several tasks using a varying number of threads."
msgstr ""
"两个基准测试脚本，:file:`iobench` 和 :file:`ccbench`，已被添加到 :file:`Tools` "
"目录中。:file:`iobench` 用于测量内置文件I/O对象（由 :func:`open` 返回）在进行各种操作时的速度，而 "
":file:`ccbench` 是一个并发基准测试，旨在测量在使用不同数量线程执行多个任务时的计算吞吐量、线程切换延迟和IO处理带宽。"

#: ../../whatsnew/2.7.rst:2405
msgid ""
"The :file:`Tools/i18n/msgfmt.py` script now understands plural forms in "
":file:`.po` files.  (Fixed by Martin von Löwis; :issue:`5464`.)"
msgstr ""
":file:`Tools/i18n/msgfmt.py` 脚本现在能够理解 :file:`.po` 文件中的复数形式。（由 Martin von "
"Löwis 修复;参见 :issue:`5464`。）"

#: ../../whatsnew/2.7.rst:2409
msgid ""
"When importing a module from a :file:`.pyc` or :file:`.pyo` file with an "
"existing :file:`.py` counterpart, the :attr:`~codeobject.co_filename` "
"attributes of the resulting code objects are overwritten when the original "
"filename is obsolete.  This can happen if the file has been renamed, moved, "
"or is accessed through different paths.  (Patch by Ziga Seilnacht and Jean-"
"Paul Calderone; :issue:`1180193`.)"
msgstr ""
"当从具有现有 :file:`.py` 对应文件的 :file:`.pyc` 或 :file:`.pyo` "
"文件导入模块时，如果原始文件名已过时，则生成的代码对象的 :attr:`~codeobject.co_filename` "
"属性将被覆盖。这可能发生在文件被重命名、移动或通过不同路径访问时。（由 Ziga Seilnacht 和 Jean-Paul Calderone "
"提供补丁;参见 :issue:`1180193`。)"

#: ../../whatsnew/2.7.rst:2416
msgid ""
"The :file:`regrtest.py` script now takes a :option:`!--randseed=` switch "
"that takes an integer that will be used as the random seed for the "
":option:`!-r` option that executes tests in random order. The :option:`!-r` "
"option also reports the seed that was used (Added by Collin Winter.)"
msgstr ""
":file:`regrtest.py` 脚本现在接受一个 :option:`!--randseed=` 开关，该开关需要一个整数作为随机种子，用于 "
":option:`!-r` 选项以随机顺序执行测试。:option:`!-r` 选项还会报告所使用的种子（由 Collin Winter 添加）。"

#: ../../whatsnew/2.7.rst:2422
msgid ""
"Another :file:`regrtest.py` switch is :option:`!-j`, which takes an integer "
"specifying how many tests run in parallel. This allows reducing the total "
"runtime on multi-core machines. This option is compatible with several other"
" options, including the :option:`!-R` switch which is known to produce long "
"runtimes. (Added by Antoine Pitrou, :issue:`6152`.)  This can also be used "
"with a new :option:`!-F` switch that runs selected tests in a loop until "
"they fail.  (Added by Antoine Pitrou; :issue:`7312`.)"
msgstr ""
"另一个 :file:`regrtest.py` 开关是 "
":option:`!-j`，它需要一个整数来指定并行运行的测试数量。这可以减少多核机器上的总运行时间。此选项与多个其他选项兼容，包括已知会产生长运行时间的"
" :option:`!-R` 开关（由 Antoine Pitrou 添加，参见 :issue:`6152`）。这也可以与新的 "
":option:`!-F` 开关一起使用，该开关会循环运行选定的测试，直到它们失败为止（由 Antoine Pitrou 添加；参见 "
":issue:`7312`）。"

#: ../../whatsnew/2.7.rst:2431
msgid ""
"When executed as a script, the :file:`py_compile.py` module now accepts "
"``'-'`` as an argument, which will read standard input for the list of "
"filenames to be compiled.  (Contributed by Piotr Ożarowski; :issue:`8233`.)"
msgstr ""
"当作为脚本执行时，:file:`py_compile.py` 模块现在接受 ``'-'`` 作为参数，这将从标准输入读取要编译的文件名列表（由 "
"Piotr Ożarowski 贡献；参见 :issue:`8233`）。"

#: ../../whatsnew/2.7.rst:2439
msgid "Porting to Python 2.7"
msgstr "移植到 Python 2.7"

#: ../../whatsnew/2.7.rst:2441
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr "本节列出了先前描述的变更以及可能需要修改你的代码的其他问题修正:"

#: ../../whatsnew/2.7.rst:2444
msgid ""
"The :func:`range` function processes its arguments more consistently; it "
"will now call :meth:`~object.__int__` on non-float, non-integer arguments "
"that are supplied to it.  (Fixed by Alexander Belopolsky; :issue:`1533`.)"
msgstr ""
":func:`range` 函数现在更一致地处理其参数；它将调用 :meth:`~object.__int__` "
"方法来处理提供给它的非浮点、非整数参数（由 Alexander Belopolsky 修复；参见 :issue:`1533`）。"

#: ../../whatsnew/2.7.rst:2449
msgid ""
"The string :meth:`format` method changed the default precision used for "
"floating-point and complex numbers from 6 decimal places to 12, which "
"matches the precision used by :func:`str`. (Changed by Eric Smith; "
":issue:`5920`.)"
msgstr ""
"字符串的 :meth:`format` 方法将浮点数和复数的默认精度从 6 小数位改为 12 小数位，这与 :func:`str` 使用的精度一致（由 "
"Eric Smith 更改；参见 :issue:`5920`）。"

#: ../../whatsnew/2.7.rst:2454
msgid ""
"Because of an optimization for the :keyword:`with` statement, the special "
"methods :meth:`~object.__enter__` and :meth:`~object.__exit__` must belong "
"to the object's type, and cannot be directly attached to the object's "
"instance.  This affects new-style classes (derived from :class:`object`) and"
" C extension types.  (:issue:`6101`.)"
msgstr ""
"由于对 :keyword:`with` 语句的优化，特殊方法 :meth:`~object.__enter__` 和 "
":meth:`~object.__exit__` 必须属于对象的类型，不能直接附加到对象的实例上。这影响新式类（从 :class:`object` "
"派生）和 C 扩展类型（参见 :issue:`6101`）。"

#: ../../whatsnew/2.7.rst:2460
msgid ""
"Due to a bug in Python 2.6, the *exc_value* parameter to "
":meth:`~object.__exit__` methods was often the string representation of the "
"exception, not an instance.  This was fixed in 2.7, so *exc_value* will be "
"an instance as expected.  (Fixed by Florent Xicluna; :issue:`7853`.)"
msgstr ""
"由于 Python 2.6 中的一个 bug，传递给 :meth:`~object.__exit__` 方法的 *exc_value* "
"参数通常是异常的字符串表示，而不是实例。这在 2.7 中已修复，因此 *exc_value* 将如预期那样是一个实例。（由 Florent "
"Xicluna 修复；参见 :issue:`7853`。）"

#: ../../whatsnew/2.7.rst:2470
msgid "In the standard library:"
msgstr "在标准库中:"

#: ../../whatsnew/2.7.rst:2472
msgid ""
"Operations with :class:`~datetime.datetime` instances that resulted in a "
"year falling outside the supported range didn't always raise "
":exc:`OverflowError`.  Such errors are now checked more carefully and will "
"now raise the exception. (Reported by Mark Leander, patch by Anand B. Pillai"
" and Alexander Belopolsky; :issue:`7150`.)"
msgstr ""
"涉及 :class:`~datetime.datetime` 实例的操作，如果结果年份超出支持范围，并不总是引发 "
":exc:`OverflowError`。现在此类错误将更仔细地检查，并会引发异常。（由 Mark Leander 报告，Anand B. Pillai"
" 和 Alexander Belopolsky 提供补丁；参见 :issue:`7150`。）"

#: ../../whatsnew/2.7.rst:2478
msgid ""
"When using :class:`~decimal.Decimal` instances with a string's "
":meth:`format` method, the default alignment was previously left-alignment."
"  This has been changed to right-alignment, which might change the output of"
" your programs. (Changed by Mark Dickinson; :issue:`6857`.)"
msgstr ""
"当使用 :class:`~decimal.Decimal` 实例与字符串的 :meth:`format` "
"方法时，默认对齐方式之前是左对齐。这已更改为右对齐，可能会改变你的程序输出。（由 Mark Dickinson 更改；参见 "
":issue:`6857`。）"

#: ../../whatsnew/2.7.rst:2490
msgid ""
"The :mod:`xml.etree.ElementTree` library no longer escapes ampersands and "
"angle brackets when outputting an XML processing instruction (which looks "
"like ``<?xml-stylesheet href=\"#style1\"?>``) or comment (which looks like "
"``<!-- comment -->``). (Patch by Neil Muller; :issue:`2746`.)"
msgstr ""
":mod:`xml.etree.ElementTree` 库在输出 XML 处理指令（看起来像 ``<?xml-stylesheet "
"href=\"#style1\"?>``）或注释（看起来像 ``<!-- comment -->``）时，不再转义与符号“&”和尖括号“<>”。（由 "
"Neil Muller 提供补丁；参见 :issue:`2746`。）"

#: ../../whatsnew/2.7.rst:2496
msgid ""
"The :meth:`!readline` method of :class:`~io.StringIO` objects now does "
"nothing when a negative length is requested, as other file-like objects do."
"  (:issue:`7348`)."
msgstr ""
":class:`~io.StringIO` 对象的 :meth:`!readline` "
"方法在请求负长度时现在不执行任何操作，与其他文件类对象一致。（参见 :issue:`7348`。）"

#: ../../whatsnew/2.7.rst:2539
msgid "For C extensions:"
msgstr "对于C 扩展模块："

#: ../../whatsnew/2.7.rst:2541
msgid ""
"C extensions that use integer format codes with the ``PyArg_Parse*`` family "
"of functions will now raise a :exc:`TypeError` exception instead of "
"triggering a :exc:`DeprecationWarning` (:issue:`5080`)."
msgstr ""
"使用整数格式代码与 ``PyArg_Parse*`` 函数族的 C 扩展现在将引发 :exc:`TypeError` 异常，而不是触发 "
":exc:`DeprecationWarning`（参见 :issue:`5080`。）"

#: ../../whatsnew/2.7.rst:2545
msgid ""
"Use the new :c:func:`PyOS_string_to_double` function instead of the old "
":c:func:`!PyOS_ascii_strtod` and :c:func:`!PyOS_ascii_atof` functions, which"
" are now deprecated."
msgstr ""
"使用新的 :c:func:`PyOS_string_to_double` 函数，而不是已弃用的旧函数 "
":c:func:`!PyOS_ascii_strtod` 和 :c:func:`!PyOS_ascii_atof`。"

#: ../../whatsnew/2.7.rst:2549
msgid "For applications that embed Python:"
msgstr "对于嵌入 Python 的应用程序："

#: ../../whatsnew/2.7.rst:2551
msgid ""
"The :c:func:`!PySys_SetArgvEx` function was added, letting applications "
"close a security hole when the existing :c:func:`!PySys_SetArgv` function "
"was used.  Check whether you're calling :c:func:`!PySys_SetArgv` and "
"carefully consider whether the application should be using "
":c:func:`!PySys_SetArgvEx` with *updatepath* set to false."
msgstr ""
":c:func:`!PySys_SetArgvEx` 函数已添加，允许应用程序在使用现有的 :c:func:`!PySys_SetArgv` "
"函数时关闭安全漏洞。检查你是否调用了 :c:func:`!PySys_SetArgv`，并仔细考虑是否应该使用 *updatepath* 设置为 "
"false 的 :c:func:`!PySys_SetArgvEx`。"

#: ../../whatsnew/2.7.rst:2564
msgid "New Features Added to Python 2.7 Maintenance Releases"
msgstr "Python 2.7 维护版本中添加的新特性"

#: ../../whatsnew/2.7.rst:2566
msgid ""
"New features may be added to Python 2.7 maintenance releases when the "
"situation genuinely calls for it. Any such additions must go through the "
"Python Enhancement Proposal process, and make a compelling case for why they"
" can't be adequately addressed by either adding the new feature solely to "
"Python 3, or else by publishing it on the Python Package Index."
msgstr ""
"当情况确实需要时，新特性可能会添加到 Python 2.7 的维护版本中。任何此类添加必须经过 Python "
"增强提案（PEP）流程，并充分说明为什么不能仅通过将新功能添加到 Python 3 或将其发布到 Python 包索引来妥善解决。"

#: ../../whatsnew/2.7.rst:2572
msgid ""
"In addition to the specific proposals listed below, there is a general "
"exemption allowing new ``-3`` warnings to be added in any Python 2.7 "
"maintenance release."
msgstr "除了下面列出的具体提案外，还有一个一般性豁免，允许在任何 Python 2.7 维护版本中添加新的 ``-3`` 警告。"

#: ../../whatsnew/2.7.rst:2578
msgid "Two new environment variables for debug mode"
msgstr "调试模式的两个新环境变量"

#: ../../whatsnew/2.7.rst:2580
msgid ""
"In debug mode, the ``[xxx refs]`` statistic is not written by default, the "
":envvar:`!PYTHONSHOWREFCOUNT` environment variable now must also be set. "
"(Contributed by Victor Stinner; :issue:`31733`.)"
msgstr ""
"在调试模式下，默认不写入 ``[xxx refs]`` 统计信息，现在还必须设置 :envvar:`!PYTHONSHOWREFCOUNT` "
"环境变量。（由 Victor Stinner 贡献；参见 :issue:`31733`。）"

#: ../../whatsnew/2.7.rst:2584
msgid ""
"When Python is compiled with ``COUNT_ALLOC`` defined, allocation counts are "
"no longer dumped by default anymore: the :envvar:`!PYTHONSHOWALLOCCOUNT` "
"environment variable must now also be set. Moreover, allocation counts are "
"now dumped into stderr, rather than stdout. (Contributed by Victor Stinner; "
":issue:`31692`.)"
msgstr ""
"当 Python 编译时定义了 ``COUNT_ALLOC``，默认不再转储分配计数：现在还必须设置 "
":envvar:`!PYTHONSHOWALLOCCOUNT` 环境变量。此外，分配计数现在转储到 stderr，而不是 stdout。（由 "
"Victor Stinner 贡献；参见 :issue:`31692`。）"

#: ../../whatsnew/2.7.rst:2593
msgid "PEP 434: IDLE Enhancement Exception for All Branches"
msgstr "PEP 434：针对所有分支的 IDLE 增强功能豁免提案"

#: ../../whatsnew/2.7.rst:2595
msgid ""
":pep:`434` describes a general exemption for changes made to the IDLE "
"development environment shipped along with Python. This exemption makes it "
"possible for the IDLE developers to provide a more consistent user "
"experience across all supported versions of Python 2 and 3."
msgstr ""
":pep:`434` 描述了对随 Python 一起提供的 IDLE 开发环境所做的更改的一般性豁免。此豁免使 IDLE 开发人员能够在所有受支持的 "
"Python 2 和 3 版本中提供更一致的用户体验。"

#: ../../whatsnew/2.7.rst:2600
msgid ""
"For details of any IDLE changes, refer to the NEWS file for the specific "
"release."
msgstr "有关 IDLE 任何变更的详细信息，请参考特定版本的 NEWS 文件。"

#: ../../whatsnew/2.7.rst:2605
msgid "PEP 466: Network Security Enhancements for Python 2.7"
msgstr "PEP 466: 针对 Python 2.7 的网络安全加固"

#: ../../whatsnew/2.7.rst:2607
msgid ""
":pep:`466` describes a number of network security enhancement proposals that"
" have been approved for inclusion in Python 2.7 maintenance releases, with "
"the first of those changes appearing in the Python 2.7.7 release."
msgstr ""
":pep:`466` 描述了一系列已获批准纳入 Python 2.7 维护版本的网络安全增强提案，其中首个变更出现在 Python 2.7.7 版本中。"

#: ../../whatsnew/2.7.rst:2611
msgid ":pep:`466` related features added in Python 2.7.7:"
msgstr ":pep:`466` Python 2.7.7 中添加的相关特性："

#: ../../whatsnew/2.7.rst:2613
msgid ""
":func:`hmac.compare_digest` was backported from Python 3 to make a timing "
"attack resistant comparison operation available to Python 2 applications. "
"(Contributed by Alex Gaynor; :issue:`21306`.)"
msgstr ""
":func:`hmac.compare_digest` 从 Python 3 向下移植，以向 Python 2 应用提供抵抗定时攻击的比较操作。（由 "
"Alex Gaynor 贡献；参见 :issue:`21306`。）"

#: ../../whatsnew/2.7.rst:2617
msgid ""
"OpenSSL 1.0.1g was upgraded in the official Windows installers published on "
"python.org. (Contributed by Zachary Ware; :issue:`21462`.)"
msgstr ""
"官方 Windows 安装程序中的 OpenSSL 1.0.1g 已在 python.org 上升级。（由 Zachary Ware 贡献；参见 "
":issue:`21462`。）"

#: ../../whatsnew/2.7.rst:2620
msgid ":pep:`466` related features added in Python 2.7.8:"
msgstr ":pep:`466` Python 2.7.8 中添加的相关特性："

#: ../../whatsnew/2.7.rst:2622
msgid ""
":func:`hashlib.pbkdf2_hmac` was backported from Python 3 to make a hashing "
"algorithm suitable for secure password storage broadly available to Python 2"
" applications. (Contributed by Alex Gaynor; :issue:`21304`.)"
msgstr ""
":func:`hashlib.pbkdf2_hmac` 从 Python 3 向下移植，以向 Python 2 "
"应用广泛提供适用于安全密码存储的哈希算法。（由 Alex Gaynor 贡献；参见 :issue:`21304`。）"

#: ../../whatsnew/2.7.rst:2626
msgid ""
"OpenSSL 1.0.1h was upgraded for the official Windows installers published on"
" python.org. (Contributed by Zachary Ware in :issue:`21671` for "
":cve:`2014-0224`.)"
msgstr ""
"官方 Windows 安装程序中的 OpenSSL 1.0.1h 已在 python.org 上升级。（由 Zachary Ware 针对 "
":cve:`2014-0224`在 :issue:`21671` 中贡献。）"

#: ../../whatsnew/2.7.rst:2629
msgid ":pep:`466` related features added in Python 2.7.9:"
msgstr ":pep:`466` Python 2.7.9 中添加的相关特性："

#: ../../whatsnew/2.7.rst:2631
msgid ""
"Most of Python 3.4's :mod:`ssl` module was backported. This means :mod:`ssl`"
" now supports Server Name Indication, TLS1.x settings, access to the "
"platform certificate store, the :class:`~ssl.SSLContext` class, and other "
"features. (Contributed by Alex Gaynor and David Reid; :issue:`21308`.)"
msgstr ""
"大部分 Python 3.4 的 :mod:`ssl` 模块已向下移植。这意味着 :mod:`ssl` 现在支持服务器名称指示、TLS1.x "
"设置、访问平台证书存储、:class:`~ssl.SSLContext` 类以及其他特性。（由 Alex Gaynor 和 David Reid "
"贡献；参见 :issue:`21308`。）"

#: ../../whatsnew/2.7.rst:2636
msgid ""
"Refer to the \"Version added: 2.7.9\" notes in the module documentation for "
"specific details."
msgstr "有关具体细节，请参阅模块文档中标记为\"Version added: 2.7.9\"的说明注释。"

#: ../../whatsnew/2.7.rst:2639
msgid ""
":func:`os.urandom` was changed to cache a file descriptor to "
"``/dev/urandom`` instead of reopening ``/dev/urandom`` on every call. "
"(Contributed by Alex Gaynor; :issue:`21305`.)"
msgstr ""
":func:`os.urandom` 已更改，以缓存对 ``/dev/urandom`` 的文件描述符，而不是在每次调用时重新打开 "
"``/dev/urandom``。（由 Alex Gaynor 贡献；参见 :issue:`21305`。）"

#: ../../whatsnew/2.7.rst:2643
msgid ""
":data:`hashlib.algorithms_guaranteed` and "
":data:`hashlib.algorithms_available` were backported from Python 3 to make "
"it easier for Python 2 applications to select the strongest available hash "
"algorithm. (Contributed by Alex Gaynor in :issue:`21307`)"
msgstr ""
":data:`hashlib.algorithms_guaranteed` 和 :data:`hashlib.algorithms_available`"
" 从 Python 3 向下移植，以简化 Python 2 应用选择最强可用哈希算法的过程。（由 Alex Gaynor 在 "
":issue:`21307` 中贡献）"

#: ../../whatsnew/2.7.rst:2650
msgid "PEP 477: Backport ensurepip (PEP 453) to Python 2.7"
msgstr "PEP 477: 将 ensurepip (PEP 453) 向下移植到 Python 2.7"

#: ../../whatsnew/2.7.rst:2652
msgid ""
":pep:`477` approves the inclusion of the :pep:`453` ensurepip module and the"
" improved documentation that was enabled by it in the Python 2.7 maintenance"
" releases, appearing first in the Python 2.7.9 release."
msgstr ""
":pep:`477` 批准将 :pep:`453` ensurepip 模块及其启用的新增文档纳入 Python 2.7 维护版本，首次出现在 "
"Python 2.7.9 版本中。"

#: ../../whatsnew/2.7.rst:2658
msgid "Bootstrapping pip By Default"
msgstr "默认对 pip 进行初始配置"

#: ../../whatsnew/2.7.rst:2660
msgid ""
"The new :mod:`ensurepip` module (defined in :pep:`453`) provides a standard "
"cross-platform mechanism to bootstrap the pip installer into Python "
"installations. The version of ``pip`` included with Python 2.7.9 is ``pip`` "
"1.5.6, and future 2.7.x maintenance releases will update the bundled version"
" to the latest version of ``pip`` that is available at the time of creating "
"the release candidate."
msgstr ""
"新的 :mod:`ensurepip` 模块（定义于 :pep:`453`）提供了一个标准的跨平台机制，用于将 pip 安装程序引导到 Python "
"安装中。Python 2.7.9 中包含的 ``pip`` 版本是 ``pip`` 1.5.6，未来的 2.7.x "
"维护版本将更新捆绑版本为创建发布候选时最新的 ``pip`` 版本。"

#: ../../whatsnew/2.7.rst:2667
msgid ""
"By default, the commands ``pip``, ``pipX`` and ``pipX.Y`` will be installed "
"on all platforms (where X.Y stands for the version of the Python "
"installation), along with the ``pip`` Python package and its dependencies."
msgstr ""
"默认情况下，命令 ``pip``、``pipX`` 和 ``pipX.Y`` 将在所有平台上安装（其中 X.Y 代表 Python "
"安装的版本），同时安装 ``pip`` Python 包及其依赖项。"

#: ../../whatsnew/2.7.rst:2671
msgid ""
"For CPython :ref:`source builds on POSIX systems <building-python-on-unix>`,"
" the ``make install`` and ``make altinstall`` commands do not bootstrap "
"``pip`` by default.  This behaviour can be controlled through configure "
"options, and overridden through Makefile options."
msgstr ""
"对于 CPython :ref:`在 POSIX 系统上的源代码构建 <building-python-on-unix>`，``make "
"install`` 和 ``make altinstall`` 命令默认不会自动安装 ``pip``。这种行为可以通过配置选项控制，并通过 "
"Makefile 选项覆盖。"

#: ../../whatsnew/2.7.rst:2676
msgid ""
"On Windows and Mac OS X, the CPython installers now default to installing "
"``pip`` along with CPython itself (users may opt out of installing it during"
" the installation process). Window users will need to opt in to the "
"automatic ``PATH`` modifications to have ``pip`` available from the command "
"line by default, otherwise it can still be accessed through the Python "
"launcher for Windows as ``py -m pip``."
msgstr ""
"在 Windows 和 Mac OS X 上，现在 CPython 安装程序默认会将 ``pip`` 与 CPython "
"本身一同安装（用户可以在安装过程中选择不安装它）。 Window 用户需要选择执行 ``PATH`` 修改以使 ``pip`` "
"在命令行中默认可用，在其他情况下它仍然可以通过 Windows 版 Python 启动器以 ``py -m pip`` 的方式使用。"

#: ../../whatsnew/2.7.rst:2683
msgid ""
"As :pep:`discussed in the PEP <0477#disabling-ensurepip-by-downstream-"
"distributors>`, platform packagers may choose not to install these commands "
"by default, as long as, when invoked, they provide clear and simple "
"directions on how to install them on that platform (usually using the system"
" package manager)."
msgstr ""
"如 :pep:`在 PEP 中讨论的 <0477#disabling-ensurepip-by-downstream-"
"distributors>`，平台打包者可以选择默认不安装这些命令，只要在调用时，它们提供清晰简单的说明，说明如何在那个平台上安装它们（通常使用系统包管理器）。"

#: ../../whatsnew/2.7.rst:2690
msgid "Documentation Changes"
msgstr "文档更改"

#: ../../whatsnew/2.7.rst:2692
msgid ""
"As part of this change, the :ref:`installing-index` and :ref:`distributing-"
"index` sections of the documentation have been completely redesigned as "
"short getting started and FAQ documents. Most packaging documentation has "
"now been moved out to the Python Packaging Authority maintained `Python "
"Packaging User Guide <https://packaging.python.org>`__ and the documentation"
" of the individual projects."
msgstr ""
"作为此项更改的一部分，文档的 :ref:`installing-index` 和 :ref:`distributing-index` "
"章节已经完全重新设计，快速入门和 FAQ 文档也是如此。 大部分打包指南文档现在都已被移至由 Python Packaging Authority "
"维护的 `Python Packaging User Guide <https://packaging.python.org>`__ "
"以及相应的独立项目文档。"

#: ../../whatsnew/2.7.rst:2700
msgid ""
"However, as this migration is currently still incomplete, the legacy "
"versions of those guides remaining available as :ref:`install-index` and "
":ref:`setuptools-index`."
msgstr ""
"不过，由于目前迁移过程尚未完成，这些指南的旧版本仍然可通过 :ref:`install-index` 和 :ref:`setuptools-index`"
" 来访问。"

#: ../../whatsnew/2.7.rst:2706
msgid ":pep:`453` -- Explicit bootstrapping of pip in Python installations"
msgstr ":pep:`453` -- Python安装过程中pip的显式引导机制"

#: ../../whatsnew/2.7.rst:2707
msgid ""
"PEP written by Donald Stufft and Nick Coghlan, implemented by Donald Stufft,"
" Nick Coghlan, Martin von Löwis and Ned Deily."
msgstr ""
"PEP 由Donald Stufft 和 Nick Coghlan 撰写，由 Donald Stufft、Nick Coghlan、Martin von"
" Löwis 和 Ned Deily 实现。"

#: ../../whatsnew/2.7.rst:2711
msgid ""
"PEP 476: Enabling certificate verification by default for stdlib http "
"clients"
msgstr "PEP 476: 默认为 stdlib http 客户端启用证书验证"

#: ../../whatsnew/2.7.rst:2713
msgid ""
":pep:`476` updated :mod:`httplib <http>` and modules which use it, such as "
":mod:`urllib2 <urllib.request>` and :mod:`xmlrpclib <xmlrpc.client>`, to now"
" verify that the server presents a certificate which is signed by a "
"Certificate Authority in the platform trust store and whose hostname matches"
" the hostname being requested by default, significantly improving security "
"for many applications. This change was made in the Python 2.7.9 release."
msgstr ""
":pep:`476` 更新了 :mod:`httplib <http>` 及其使用的模块，例如 :mod:`urllib2 "
"<urllib.request>` 和 :mod:`xmlrpclib "
"<xmlrpc.client>`，现在默认验证服务器提供的证书是否由平台信任存储中的证书颁发机构签名，且其主机名与请求的主机名匹配，显著提高了许多应用程序的安全性。这一更改在"
" Python 2.7.9 版本中实现。"

#: ../../whatsnew/2.7.rst:2721
msgid ""
"For applications which require the old previous behavior, they can pass an "
"alternate context::"
msgstr "对于需要之前版本的旧有行为的应用程序，可以传入一个替代的上下文::"

#: ../../whatsnew/2.7.rst:2724
msgid ""
"import urllib2\n"
"import ssl\n"
"\n"
"# This disables all verification\n"
"context = ssl._create_unverified_context()\n"
"\n"
"# This allows using a specific certificate for the host, which doesn't need\n"
"# to be in the trust store\n"
"context = ssl.create_default_context(cafile=\"/path/to/file.crt\")\n"
"\n"
"urllib2.urlopen(\"https://invalid-cert\", context=context)"
msgstr ""
"import urllib2\n"
"import ssl\n"
"\n"
"# 这将禁用所有验证\n"
"context = ssl._create_unverified_context()\n"
"\n"
"# 这允许为特定主机使用特定证书，该证书不需要\n"
"# 在信任存储中\n"
"context = ssl.create_default_context(cafile=\"/path/to/file.crt\")\n"
"\n"
"urllib2.urlopen(\"https://invalid-cert\", context=context)"

#: ../../whatsnew/2.7.rst:2738
msgid "PEP 493: HTTPS verification migration tools for Python 2.7"
msgstr "PEP 493：适用于Python 2.7 的 HTTPS 验证迁移工具"

#: ../../whatsnew/2.7.rst:2740
msgid ""
":pep:`493` provides additional migration tools to support a more incremental"
" infrastructure upgrade process for environments containing applications and"
" services relying on the historically permissive processing of server "
"certificates when establishing client HTTPS connections.  These additions "
"were made in the Python 2.7.12 release."
msgstr ""
":pep:`493` 提供了额外的迁移工具，以支持对包含依赖历史宽松服务器证书处理的应用程序和服务的环境进行更渐进的基础设施升级过程。这些添加内容在 "
"Python 2.7.12 版本中实现。"

#: ../../whatsnew/2.7.rst:2746
msgid ""
"These tools are intended for use in cases where affected applications and "
"services can't be modified to explicitly pass a more permissive SSL context "
"when establishing the connection."
msgstr "这些工具旨在用于那些无法修改以显式传递更宽松 SSL 上下文的应用程序和服务，在建立连接时使用。"

#: ../../whatsnew/2.7.rst:2750
msgid ""
"For applications and services which can't be modified at all, the new "
"``PYTHONHTTPSVERIFY`` environment variable may be set to ``0`` to revert an "
"entire Python process back to the default permissive behaviour of Python "
"2.7.8 and earlier."
msgstr ""
"对于完全无法修改的应用程序和服务，可以设置新的 ``PYTHONHTTPSVERIFY`` 环境变量为 ``0``，以将整个 Python 进程恢复到 "
"Python 2.7.8 及早期版本的默认宽松行为。"

#: ../../whatsnew/2.7.rst:2755
msgid ""
"For cases where the connection establishment code can't be modified, but the"
" overall application can be, the new :func:`!ssl._https_verify_certificates`"
" function can be used to adjust the default behaviour at runtime."
msgstr ""
"对于连接建立代码无法修改，但整体应用程序可以修改的情况，可以使用新的 :func:`!ssl._https_verify_certificates` "
"函数来调整运行时的默认行为。"

#: ../../whatsnew/2.7.rst:2761
msgid "New ``make regen-all`` build target"
msgstr "新增 ``make regen-all`` 构建目标"

#: ../../whatsnew/2.7.rst:2763
msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be "
"compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to implicitly"
" recompile generated files based on file modification times."
msgstr ""
"为了简化交叉编译，并确保 CPython 能够可靠地编译而不需要已存在可用的 Python 版本，基于 autotools "
"的构建系统将不再尝试根据文件修改时间隐式地重新编译已生成的文件。"

#: ../../whatsnew/2.7.rst:2768
msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version of "
"Python has already been built based on the pregenerated versions)."
msgstr ""
"取而代之的是，新增了一个 ``make regen-all`` 命令以便在需要时强制重新生成这些文件（例如在基于预生成版本构建了 Python "
"的初始版本之后）。"

#: ../../whatsnew/2.7.rst:2772
msgid ""
"More selective regeneration targets are also defined - see "
":source:`Makefile.pre.in` for details."
msgstr "还定义了其他一些更具选择性的重生成目标 —— 详情参见 :source:`Makefile.pre.in`。"

#: ../../whatsnew/2.7.rst:2775 ../../whatsnew/2.7.rst:2788
msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr "（由 Victor Stinner 在 :issue:`23404` 中贡献。）"

#: ../../whatsnew/2.7.rst:2781
msgid "Removal of ``make touch`` build target"
msgstr "移除了 ``make touch`` 构建目标"

#: ../../whatsnew/2.7.rst:2783
msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr "之前用于通过更新生成文件的修改时间来请求隐式的重新生成这些文件的 ``make touch`` 构建目标已被移除。"

#: ../../whatsnew/2.7.rst:2786
msgid "It has been replaced by the new ``make regen-all`` target."
msgstr "它已被新的 ``make regen-all`` 目标所替代。"

#: ../../whatsnew/2.7.rst:2797
msgid "Acknowledgements"
msgstr "致谢"

#: ../../whatsnew/2.7.rst:2799
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article:"
" Nick Coghlan, Philip Jenvey, Ryan Lovett, R. David Murray, Hugh Secker-"
"Walker."
msgstr ""
"作者要感谢以下人员为本文的各种草案提供建议，更正和帮助： Nick Coghlan、 Philip Jenvey、 Ryan Lovett、 R. "
"David Murray、 Hugh Secker-Walker。"
