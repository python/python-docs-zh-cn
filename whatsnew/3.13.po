# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# sgqy <sgqyzh@gmail.com>, 2024
# jacky <jackylvm@foxmail.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# ProgramRipper, 2024
# lqks, 2024
# Kaizhao Zhang <zhangkaizhao@gmail.com>, 2024
# Shengjing Zhu <zsj950618@gmail.com>, 2024
# Dai Xu <daixu61@hotmail.com>, 2024
# ppcfish <ppcfish@gmail.com>, 2024
# Aruelius.L, 2024
# Sefank <sefank@foxmail.com>, 2024
# 赵天悦 <terrychao.me@gmail.com>, 2024
# Wulian233 <xiguawulian@gmail.com>, 2025
# Alpha Du <alphanow@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 汇民 王 <whuim@qq.com>, 2025
# Nyuan Zhang, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-04 14:20+0000\n"
"PO-Revision-Date: 2024-05-11 01:09+0000\n"
"Last-Translator: Nyuan Zhang, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.13.rst:4
msgid "What's New In Python 3.13"
msgstr "Python 3.13 有什么新变化"

#: ../../whatsnew/3.13.rst:0
msgid "Editors"
msgstr "编者"

#: ../../whatsnew/3.13.rst:6
msgid "Adam Turner and Thomas Wouters"
msgstr "Adam Turner 和 Thomas Wouters"

#: ../../whatsnew/3.13.rst:48
msgid ""
"This article explains the new features in Python 3.13, compared to 3.12. "
"Python 3.13 was released on October 7, 2024. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""
"本文介绍了 Python 3.13 相比 3.12 增加的新特性。 Python 3.13 已于 2024 年 10 月 7 日发布。 "
"要获取详细信息，可参阅 :ref:`更新日志 <changelog>`。"

#: ../../whatsnew/3.13.rst:54
msgid ":pep:`719` -- Python 3.13 Release Schedule"
msgstr ":pep:`719` -- Python 3.13 发布计划"

#: ../../whatsnew/3.13.rst:58
msgid "Summary -- Release Highlights"
msgstr "摘要 -- 发布重点"

#: ../../whatsnew/3.13.rst:63
msgid ""
"Python 3.13 is the latest stable release of the Python programming language,"
" with a mix of changes to the language, the implementation and the standard "
"library. The biggest changes include a new `interactive interpreter "
"<whatsnew313-better-interactive-interpreter_>`_, experimental support for "
"running in a `free-threaded mode <whatsnew313-free-threaded-cpython_>`_ "
"(:pep:`703`), and a `Just-In-Time compiler <whatsnew313-jit-compiler_>`_ "
"(:pep:`744`)."
msgstr ""
"Python 3.13 是 Python 编程语言的最新稳定发布版，包含多项针对语言、实现和标准库的改变。 最大的变化包括一个新的 `交互式解释器 "
"<whatsnew313-better-interactive-interpreter_>`_，以及对于在 `自由线程模式 "
"<whatsnew313-free-threaded-cpython_>`_ (:pep:`703`) 下运行和 `即时编译器 "
"<whatsnew313-jit-compiler_>`_ (:pep:`744`) 的实验性支持。"

#: ../../whatsnew/3.13.rst:72
msgid ""
"Error messages continue to improve, with tracebacks now highlighted in color"
" by default. The :func:`locals` builtin now has :ref:`defined semantics "
"<whatsnew313-locals-semantics>` for changing the returned mapping, and type "
"parameters now support default values."
msgstr ""
"错误消息继续得到改进，回溯信息现在默认使用彩色高亮显示。 :func:`locals` 内置函数现在对于修改所返回的映射具有 :ref:`更细化的语法 "
"<whatsnew313-locals-semantics>`，并且类型形参现在支持设置默认值。"

#: ../../whatsnew/3.13.rst:77
msgid ""
"The library changes contain removal of deprecated APIs and modules, as well "
"as the usual improvements in user-friendliness and correctness. Several "
"legacy standard library modules have now `been removed "
"<whatsnew313-pep594_>`_ following their deprecation in Python 3.11 "
"(:pep:`594`)."
msgstr ""
"针对标准库的改变包括移除已弃用的 API 和模块，以及用户友好度和正确性方面的常规提升。 一些旧式标准库模块自 Python 3.11 起被弃用 "
"(:pep:`594`) 之后现在 `已被移除 <whatsnew313-pep594_>`_。"

#: ../../whatsnew/3.13.rst:82
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead gives a convenient overview. For full details refer to"
" the documentation, such as the :ref:`Library Reference <library-index>` and"
" :ref:`Language Reference <reference-index>`. To understand the complete "
"implementation and design rationale for a change, refer to the PEP for a "
"particular new feature; but note that PEPs usually are not kept up-to-date "
"once a feature has been fully implemented. See `Porting to Python 3.13`_ for"
" guidance on upgrading from earlier versions of Python."
msgstr ""
"本文并不试图提供所有新特性的完整规范说明，而是提供一个方便的概览。 要了解完整细节请参阅相应文档，如 :ref:`标准库参数 <library-"
"index>` 和 :ref:`语言参考 <reference-index>`。 要了解某项改变的完整实现和设计理念，请参阅相应新特性的 "
"PEP；但请注意一旦某项特性已完全实现则相应 PEP 通常不会再继续更新。 请参阅 `迁移到 Python 3.13`_ 了解如何从较早 Python "
"进行升级的指导。"

#: ../../whatsnew/3.13.rst:98
msgid "Interpreter improvements:"
msgstr "解释器的改进："

#: ../../whatsnew/3.13.rst:100
msgid ""
"A greatly improved :ref:`interactive interpreter <whatsnew313-better-"
"interactive-interpreter>` and :ref:`improved error messages "
"<whatsnew313-improved-error-messages>`."
msgstr ""
"大幅改进的 :ref:`交互式解释器 <whatsnew313-better-interactive-interpreter>` 和 "
":ref:`改进的错误消息 <whatsnew313-improved-error-messages>`。"

#: ../../whatsnew/3.13.rst:103
msgid ""
":pep:`667`: The :func:`locals` builtin now has :ref:`defined semantics "
"<whatsnew313-locals-semantics>` when mutating the returned mapping. Python "
"debuggers and similar tools may now more reliably update local variables in "
"optimized scopes even during concurrent code execution."
msgstr ""
":pep:`667`: 现在 :func:`locals` 内置函数在修改被返回的映射时具有 :ref:`已定义语义 "
"<whatsnew313-locals-semantics>`。 Python "
"调试器及类似的工具现在即使在并发代码执行期间也能更可靠地在已优化的作用域中更新局部变量。"

#: ../../whatsnew/3.13.rst:108
msgid ""
":pep:`703`: CPython 3.13 has experimental support for running with the "
":term:`global interpreter lock` disabled. See :ref:`Free-threaded CPython "
"<whatsnew313-free-threaded-cpython>` for more details."
msgstr ""
":pep:`703`: CPython 3.13 具有对在运行时禁用 :term:`global interpreter lock` 的实验性支持。 "
"请参阅 :ref:`自由线程 CPython <whatsnew313-free-threaded-cpython>` 了解详情。"

#: ../../whatsnew/3.13.rst:111
msgid ""
":pep:`744`: A basic :ref:`JIT compiler <whatsnew313-jit-compiler>` was "
"added. It is currently disabled by default (though we may turn it on later)."
" Performance improvements are modest -- we expect to improve this over the "
"next few releases."
msgstr ""
":pep:`744`: 增加了一个基本的 :ref:`JIT 编译器 <whatsnew313-jit-compiler>`。 "
"目前默认是禁用的（但以后可能启用）。 能够小幅提升性能 -- 我们预计在接下来的几个发布版中不断改进它。"

#: ../../whatsnew/3.13.rst:115
msgid ""
"Color support in the new :ref:`interactive interpreter <whatsnew313-better-"
"interactive-interpreter>`, as well as in :ref:`tracebacks "
"<whatsnew313-improved-error-messages>` and :ref:`doctest "
"<whatsnew313-doctest>` output. This can be disabled through the "
":envvar:`PYTHON_COLORS` and |NO_COLOR|_ environment variables."
msgstr ""
"在新的 :ref:`交互式解释器 <whatsnew313-better-interactive-interpreter>` 中，以及 "
":ref:`回溯信息 <whatsnew313-improved-error-messages>` 和 :ref:`文档测试 "
"<whatsnew313-doctest>` 输出中的颜色支持。 这可以通过 :envvar:`PYTHON_COLORS` and "
"|NO_COLOR|_ 环境变量来禁用。"

#: ../../whatsnew/3.13.rst:122
msgid "Python data model improvements:"
msgstr "对 Python 数据模型的改进："

#: ../../whatsnew/3.13.rst:124
msgid ""
":attr:`~type.__static_attributes__` stores the names of attributes accessed "
"through ``self.X`` in any function in a class body."
msgstr ""
":attr:`~type.__static_attributes__` 保存了可在一个类体的任何函数中通过 ``self.X`` 来访问的属性名称。"

#: ../../whatsnew/3.13.rst:126
msgid ""
":attr:`~type.__firstlineno__` records the first line number of a class "
"definition."
msgstr ":attr:`~type.__firstlineno__` 记录了一个类定义的首行的行号。"

#: ../../whatsnew/3.13.rst:129
msgid "Significant improvements in the standard library:"
msgstr "标准库中的重大改进："

#: ../../whatsnew/3.13.rst:131
msgid ""
"Add a new :exc:`PythonFinalizationError` exception, raised when an operation"
" is blocked during :term:`finalization <interpreter shutdown>`."
msgstr ""
"新增了 :exc:`PythonFinalizationError` 异常，当操作在 :term:`最终化 <interpreter "
"shutdown>` 期间被阻塞时将被引发。"

#: ../../whatsnew/3.13.rst:133
msgid ""
"The :mod:`argparse` module now supports deprecating command-line options, "
"positional arguments, and subcommands."
msgstr "现在 :mod:`argparse` 模块可支持弃用命令行选项、位置参数和子命令。"

#: ../../whatsnew/3.13.rst:135
msgid ""
"The new functions :func:`base64.z85encode` and :func:`base64.z85decode` "
"support encoding and decoding `Z85 data`_."
msgstr ""
"新增的函数 :func:`base64.z85encode` 和 :func:`base64.z85decode` 支持对 `Z85 数据`_ "
"进行编码和解码。"

#: ../../whatsnew/3.13.rst:137
msgid ""
"The :mod:`copy` module now has a :func:`copy.replace` function, with support"
" for many builtin types and any class defining the "
":func:`~object.__replace__` method."
msgstr ""
"现在 :mod:`copy` 模块有一个 :func:`copy.replace` 函数，支持许多内置类型和任何定义了 "
":func:`~object.__replace__` 方法的类。"

#: ../../whatsnew/3.13.rst:140
msgid ""
"The new :mod:`dbm.sqlite3` module is now the default :mod:`dbm` backend."
msgstr "新的 :mod:`dbm.sqlite3` 模块现在是默认的 :mod:`dbm` 后端。"

#: ../../whatsnew/3.13.rst:141
msgid ""
"The :mod:`os` module has a :ref:`suite of new functions <os-timerfd>` for "
"working with Linux's timer notification file descriptors."
msgstr ":mod:`os` 模块增加了 :ref:`一套新函数 <os-timerfd>` 用于处理 Linux 的定时器通知文件描述符。"

#: ../../whatsnew/3.13.rst:143
msgid ""
"The :mod:`random` module now has a :ref:`command-line interface <random-"
"cli>`."
msgstr "现在 :mod:`random` 模块提供了一个 :ref:`命令行界面 <random-cli>`。"

#: ../../whatsnew/3.13.rst:145
msgid "Security improvements:"
msgstr "安全改进："

#: ../../whatsnew/3.13.rst:147
msgid ""
":func:`ssl.create_default_context` sets "
":data:`ssl.VERIFY_X509_PARTIAL_CHAIN` and :data:`ssl.VERIFY_X509_STRICT` as "
"default flags."
msgstr ""
":func:`ssl.create_default_context` 设置了 :data:`ssl.VERIFY_X509_PARTIAL_CHAIN`"
" 和 :data:`ssl.VERIFY_X509_STRICT` 作为默认的旗标。"

#: ../../whatsnew/3.13.rst:150
msgid "C API improvements:"
msgstr "C API 的改进："

#: ../../whatsnew/3.13.rst:152
msgid ""
"The :c:data:`Py_mod_gil` slot is now used to indicate that an extension "
"module supports running with the :term:`GIL` disabled."
msgstr "现在 :c:data:`Py_mod_gil` 槽位被用来指明一个扩展模块支持在禁用 :term:`GIL` 的情况下运行。"

#: ../../whatsnew/3.13.rst:154
msgid ""
"The :doc:`PyTime C API </c-api/time>` has been added, providing access to "
"system clocks."
msgstr "增加了 :doc:`PyTime C API </c-api/time>`，提供了对系统时钟的访问。"

#: ../../whatsnew/3.13.rst:156
msgid ""
":c:type:`PyMutex` is a new lightweight mutex that occupies a single byte."
msgstr ":c:type:`PyMutex` 是新增的轻量级互斥锁，只占用一个字节。"

#: ../../whatsnew/3.13.rst:157
msgid ""
"There is a new :ref:`suite of functions <c-api-monitoring>` for generating "
":pep:`669` monitoring events in the C API."
msgstr "新增了 :ref:`一套函数 <c-api-monitoring>` 用于在 C API 中生成 :pep:`669` 监控事件。"

#: ../../whatsnew/3.13.rst:160
msgid "New typing features:"
msgstr "新的类型标注特性："

#: ../../whatsnew/3.13.rst:162
msgid ""
":pep:`696`: Type parameters (:data:`typing.TypeVar`, "
":data:`typing.ParamSpec`, and :data:`typing.TypeVarTuple`) now support "
"defaults."
msgstr ""
":pep:`696`: 类型形参 (:data:`typing.TypeVar`, :data:`typing.ParamSpec` 和 "
":data:`typing.TypeVarTuple`) 现在可支持默认值。"

#: ../../whatsnew/3.13.rst:164
msgid ""
":pep:`702`: The new :func:`warnings.deprecated` decorator adds support for "
"marking deprecations in the type system and at runtime."
msgstr ":pep:`702`: 新的 :func:`warnings.deprecated` 装饰器在类型系统和运行时中增加了对标记为弃用的支持。"

#: ../../whatsnew/3.13.rst:166
msgid ""
":pep:`705`: :data:`typing.ReadOnly` can be used to mark an item of a "
":class:`typing.TypedDict` as read-only for type checkers."
msgstr ""
":pep:`705`: :data:`typing.ReadOnly` 可被用来将 :class:`typing.TypedDict` "
"的项标记为对类型检查器只读。"

#: ../../whatsnew/3.13.rst:168
msgid ""
":pep:`742`: :data:`typing.TypeIs` provides more intuitive type narrowing "
"behavior, as an alternative to :data:`typing.TypeGuard`."
msgstr ""
":pep:`742`: :data:`typing.TypeIs` 提供了更直观的类型细化行为，作为对 :data:`typing.TypeGuard`"
" 的替代。"

#: ../../whatsnew/3.13.rst:171
msgid "Platform support:"
msgstr "平台支持："

#: ../../whatsnew/3.13.rst:173
msgid ""
":pep:`730`: Apple's iOS is now an :ref:`officially supported platform "
"<whatsnew313-platform-support>`, at :pep:`tier 3 <11#tier-3>`."
msgstr ""
":pep:`730`: 现在 Apple 的 iOS 是 :ref:`官方支持的平台 <whatsnew313-platform-"
"support>`，处于 :pep:`第 3 层级 <11#tier-3>`。"

#: ../../whatsnew/3.13.rst:175
msgid ""
":pep:`738`: Android is now an :ref:`officially supported platform "
"<whatsnew313-platform-support>`, at :pep:`tier 3 <11#tier-3>`."
msgstr ""
":pep:`738`: 现在 Android 是 :ref:`官方支持的平台 <whatsnew313-platform-support>`，处于 "
":pep:`第 3 层级 <11#tier-3>`。"

#: ../../whatsnew/3.13.rst:177
msgid ""
"``wasm32-wasi`` is now supported as a :pep:`tier 2 <11#tier-2>` platform."
msgstr "现在 ``wasm32-wasi`` 作为 :pep:`第 2 层级 <11#tier-2>` 的平台受到支持。"

#: ../../whatsnew/3.13.rst:178
msgid "``wasm32-emscripten`` is no longer an officially supported platform."
msgstr "``wasm32-emscripten`` 不再是受到官方支持的平台。"

#: ../../whatsnew/3.13.rst:180
msgid "Important removals:"
msgstr "重要的移除："

#: ../../whatsnew/3.13.rst:182
msgid ""
":ref:`PEP 594 <whatsnew313-pep594>`: The remaining 19 \"dead batteries\" "
"(legacy stdlib modules) have been removed from the standard library: "
":mod:`!aifc`, :mod:`!audioop`, :mod:`!cgi`, :mod:`!cgitb`, :mod:`!chunk`, "
":mod:`!crypt`, :mod:`!imghdr`, :mod:`!mailcap`, :mod:`!msilib`, :mod:`!nis`,"
" :mod:`!nntplib`, :mod:`!ossaudiodev`, :mod:`!pipes`, :mod:`!sndhdr`, "
":mod:`!spwd`, :mod:`!sunau`, :mod:`!telnetlib`, :mod:`!uu` and "
":mod:`!xdrlib`."
msgstr ""
":ref:`PEP 594 <whatsnew313-pep594>`: 剩余的 19 个“死电池”（老旧 stdlib 模块）已从标准库中移除: "
":mod:`!aifc`, :mod:`!audioop`, :mod:`!cgi`, :mod:`!cgitb`, :mod:`!chunk`, "
":mod:`!crypt`, :mod:`!imghdr`, :mod:`!mailcap`, :mod:`!msilib`, :mod:`!nis`,"
" :mod:`!nntplib`, :mod:`!ossaudiodev`, :mod:`!pipes`, :mod:`!sndhdr`, "
":mod:`!spwd`, :mod:`!sunau`, :mod:`!telnetlib`, :mod:`!uu` 和 :mod:`!xdrlib`。"

#: ../../whatsnew/3.13.rst:188
msgid ""
"Remove the :program:`2to3` tool and :mod:`!lib2to3` module (deprecated in "
"Python 3.11)."
msgstr "移除了 :program:`2to3` 工具和 :mod:`!lib2to3` 模块（在 Python 3.11 中已被弃用）。"

#: ../../whatsnew/3.13.rst:190
msgid "Remove the :mod:`!tkinter.tix` module (deprecated in Python 3.6)."
msgstr "移除了 :mod:`!tkinter.tix` 模块（在 Python 3.6 中已被弃用）。"

#: ../../whatsnew/3.13.rst:191
msgid "Remove the :func:`!locale.resetlocale` function."
msgstr "移除了 :func:`!locale.resetlocale` 函数。"

#: ../../whatsnew/3.13.rst:192
msgid "Remove the :mod:`!typing.io` and :mod:`!typing.re` namespaces."
msgstr "移除了 :mod:`!typing.io` 和 :mod:`!typing.re` 命名空间。"

#: ../../whatsnew/3.13.rst:193
msgid "Remove chained :class:`classmethod` descriptors."
msgstr "移除了链式的 :class:`classmethod` 描述器。"

#: ../../whatsnew/3.13.rst:195
msgid "Release schedule changes:"
msgstr "发布计划的变化："

#: ../../whatsnew/3.13.rst:197
msgid ""
":pep:`602` (\"Annual Release Cycle for Python\") has been updated to extend "
"the full support ('bugfix') period for new releases to two years. This "
"updated policy means that:"
msgstr ""
":pep:`602` (\"Annual Release Cycle for Python\") 已被更新为将新发布版的完整支持 ('bugfix') "
"期扩展至两年。 这个更新的政策意味着："

#: ../../whatsnew/3.13.rst:201
msgid ""
"Python 3.9--3.12 have one and a half years of full support, followed by "
"three and a half years of security fixes."
msgstr "Python 3.9--3.12 有一年半的完整支持，另加三年半的安全修正。"

#: ../../whatsnew/3.13.rst:203
msgid ""
"Python 3.13 and later have two years of full support, followed by three "
"years of security fixes."
msgstr "Python 3.13 及以后的版本有两年的完整支持，另加三年的安全修正。"

#: ../../whatsnew/3.13.rst:208 ../../whatsnew/3.13.rst:2046
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.13.rst:214
msgid "A better interactive interpreter"
msgstr "更好的交互式解释器"

#: ../../whatsnew/3.13.rst:216
msgid ""
"Python now uses a new :term:`interactive` shell by default, based on code "
"from the `PyPy project`_. When the user starts the :term:`REPL` from an "
"interactive terminal, the following new features are now supported:"
msgstr ""
"Python 现在默认会使用新的 :term:`interactive` shell，它基于来自 `PyPy 项目`_ 的代码。 当使用从交互式终端启动"
" :term:`REPL` 时，下列新特性将受到支持："

#: ../../whatsnew/3.13.rst:221
msgid "Multiline editing with history preservation."
msgstr "多行编辑并保留历史记录。"

#: ../../whatsnew/3.13.rst:222
msgid ""
"Direct support for REPL-specific commands like :kbd:`help`, :kbd:`exit`, and"
" :kbd:`quit`, without the need to call them as functions."
msgstr ""
"对 REPL 专属的命令如 :kbd:`help`, :kbd:`exit` 和 :kbd:`quit` 的直接支持，无需以函数形式调用它们。"

#: ../../whatsnew/3.13.rst:224
msgid ""
"Prompts and tracebacks with :ref:`color enabled by default <using-on-"
"controlling-color>`."
msgstr "提示和回溯 :ref:`默认启用彩色显示 <using-on-controlling-color>`。"

#: ../../whatsnew/3.13.rst:226
msgid ""
"Interactive help browsing using :kbd:`F1` with a separate command history."
msgstr "使用 :kbd:`F1` 浏览交互式帮助并带有单独的命令历史。"

#: ../../whatsnew/3.13.rst:228
msgid ""
"History browsing using :kbd:`F2` that skips output as well as the "
":term:`>>>` and :term:`...` prompts."
msgstr "使用 :kbd:`F2` 浏览去除了输出以及 :term:`>>>` 和 :term:`...` 提示符的历史。"

#: ../../whatsnew/3.13.rst:230
msgid ""
"\"Paste mode\" with :kbd:`F3` that makes pasting larger blocks of code "
"easier (press :kbd:`F3` again to return to the regular prompt)."
msgstr "使用 :kbd:`F3` 进入“粘贴模式”以更方便地粘贴大段代码（再次按 :kbd:`F3` 返回常规提示符）。"

#: ../../whatsnew/3.13.rst:233
msgid ""
"To disable the new interactive shell, set the :envvar:`PYTHON_BASIC_REPL` "
"environment variable. For more on interactive mode, see :ref:`tut-interac`."
msgstr ""
"要禁用新的交互式 shell，可设置 :envvar:`PYTHON_BASIC_REPL` 环境变量。 有关交互模式的详情，请参见 "
":ref:`tut-interac`。"

#: ../../whatsnew/3.13.rst:237
msgid ""
"(Contributed by Pablo Galindo Salgado, Łukasz Langa, and Lysandros Nikolaou "
"in :gh:`111201` based on code from the PyPy project. Windows support "
"contributed by Dino Viehland and Anthony Shaw.)"
msgstr ""
"（由 Pablo Galindo Salgado, Łukasz Langa 和 Lysandros Nikolaou 在 :gh:`111201` "
"基于来自 PyPy 项目的代码贡献。 Windows 支持由 Dino Viehland 和 Anthony Shaw 贡献。）"

#: ../../whatsnew/3.13.rst:247
msgid "Improved error messages"
msgstr "改进的错误消息"

#: ../../whatsnew/3.13.rst:249
msgid ""
"The interpreter now uses color by default when displaying tracebacks in the "
"terminal. This feature :ref:`can be controlled <using-on-controlling-color>`"
" via the new :envvar:`PYTHON_COLORS` environment variable as well as the "
"canonical |NO_COLOR|_ and |FORCE_COLOR|_ environment variables. (Contributed"
" by Pablo Galindo Salgado in :gh:`112730`.)"
msgstr ""
"在终端里显示回溯时解释器现在会默认使用彩色。 此特性可通过新的 :envvar:`PYTHON_COLORS` 环境变量以及传统的 "
"|NO_COLOR|_ 和 |FORCE_COLOR|_ 环境变量来 :ref:`进行控制 <using-on-controlling-color>`。"
" （由 Pablo Galindo Salgado 在 :gh:`112730` 中贡献。）"

#: ../../whatsnew/3.13.rst:255
msgid ""
"A common mistake is to write a script with the same name as a standard "
"library module. When this results in errors, we now display a more helpful "
"error message:"
msgstr "一个常见错误是撰写的脚本和标准库中的某个模块重名。现在出现此类错误时会显示一条更有用的错误信息："

#: ../../whatsnew/3.13.rst:259
msgid ""
"$ python random.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/random.py\", line 1, in <module>\n"
"    import random\n"
"  File \"/home/me/random.py\", line 3, in <module>\n"
"    print(random.randint(5))\n"
"          ^^^^^^^^^^^^^^\n"
"AttributeError: module 'random' has no attribute 'randint' (consider renaming '/home/me/random.py' since it has the same name as the standard library module named 'random' and prevents importing that standard library module)"
msgstr ""
"$ python random.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/random.py\", line 1, in <module>\n"
"    import random\n"
"  File \"/home/me/random.py\", line 3, in <module>\n"
"    print(random.randint(5))\n"
"          ^^^^^^^^^^^^^^\n"
"AttributeError: module 'random' has no attribute 'randint' (consider renaming '/home/me/random.py' since it has the same name as the standard library module named 'random' and prevents importing that standard library module)"

#: ../../whatsnew/3.13.rst:270
msgid ""
"Similarly, if a script has the same name as a third-party module that it "
"attempts to import and this results in errors, we also display a more "
"helpful error message:"
msgstr "类似地，如果一个脚本具有与它尝试导入的第三方模块相同的名称并因此导致错误，我们也会显示一条更有帮助的错误消息："

#: ../../whatsnew/3.13.rst:274
msgid ""
"$ python numpy.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/numpy.py\", line 1, in <module>\n"
"    import numpy as np\n"
"  File \"/home/me/numpy.py\", line 3, in <module>\n"
"    np.array([1, 2, 3])\n"
"    ^^^^^^^^\n"
"AttributeError: module 'numpy' has no attribute 'array' (consider renaming '/home/me/numpy.py' if it has the same name as a library you intended to import)"
msgstr ""
"$ python numpy.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/numpy.py\", line 1, in <module>\n"
"    import numpy as np\n"
"  File \"/home/me/numpy.py\", line 3, in <module>\n"
"    np.array([1, 2, 3])\n"
"    ^^^^^^^^\n"
"AttributeError: module 'numpy' has no attribute 'array' (consider renaming '/home/me/numpy.py' if it has the same name as a library you intended to import)"

#: ../../whatsnew/3.13.rst:285
msgid "(Contributed by Shantanu Jain in :gh:`95754`.)"
msgstr "(由 Shantanu Jain 在 :gh:`95754` 中贡献）。"

#: ../../whatsnew/3.13.rst:287
msgid ""
"The error message now tries to suggest the correct keyword argument when an "
"incorrect keyword argument is passed to a function."
msgstr "现在当向一个函数传入不正确的关键字参数时错误消息会尝试提示正确的关键字参数。"

#: ../../whatsnew/3.13.rst:290
msgid ""
">>> \"Better error messages!\".split(max_split=1)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-0>\", line 1, in <module>\n"
"    \"Better error messages!\".split(max_split=1)\n"
"    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\n"
"TypeError: split() got an unexpected keyword argument 'max_split'. Did you mean 'maxsplit'?"
msgstr ""
">>> \"Better error messages!\".split(max_split=1)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-0>\", line 1, in <module>\n"
"    \"Better error messages!\".split(max_split=1)\n"
"    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\n"
"TypeError: split() got an unexpected keyword argument 'max_split'. Did you mean 'maxsplit'?"

#: ../../whatsnew/3.13.rst:299
msgid ""
"(Contributed by Pablo Galindo Salgado and Shantanu Jain in :gh:`107944`.)"
msgstr "（由 Pablo Galindo Salgado 和 Shantanu Jain 在 :gh:`107944` 中贡献。）"

#: ../../whatsnew/3.13.rst:305
msgid "Free-threaded CPython"
msgstr "自由线程的 CPython"

#: ../../whatsnew/3.13.rst:307
msgid ""
"CPython now has experimental support for running in a free-threaded mode, "
"with the :term:`global interpreter lock` (GIL) disabled. This is an "
"experimental feature and therefore is not enabled by default. The free-"
"threaded mode requires a different executable, usually called "
"``python3.13t`` or ``python3.13t.exe``. Pre-built binaries marked as *free-"
"threaded* can be installed as part of the official :ref:`Windows <install-"
"freethreaded-windows>` and :ref:`macOS <install-freethreaded-macos>` "
"installers, or CPython can be built from source with the :option:`--disable-"
"gil` option."
msgstr ""
"现在 CPython 具有对运行于禁用 :term:`global interpreter lock` (GIL) 的自由线程模式的实验性支持。 "
"这是一个实验性的特性因而默认是不启用的。 自由线程模式需要一个不同的可执行程序，通常名为 ``python3.13t`` 或 "
"``python3.13t.exe``。 标记为 *free-threaded* 的预构建二进制文件可作为官方 :ref:`Windows "
"<install-freethreaded-windows>` 和 :ref:`macOS <install-freethreaded-macos>` "
"安装器的一部分被安装，或者可以附带 :option:`--disable-gil` 选项使用源代码来构建 CPython。"

#: ../../whatsnew/3.13.rst:317
msgid ""
"Free-threaded execution allows for full utilization of the available "
"processing power by running threads in parallel on available CPU cores. "
"While not all software will benefit from this automatically, programs "
"designed with threading in mind will run faster on multi-core hardware. "
"**The free-threaded mode is experimental** and work is ongoing to improve "
"it: expect some bugs and a substantial single-threaded performance hit. "
"Free-threaded builds of CPython support optionally running with the GIL "
"enabled at runtime using the environment variable :envvar:`PYTHON_GIL` or "
"the command-line option :option:`-X gil=1`."
msgstr ""
"自由线程模式的执行允许在可用的 CPU 核心上并行地运行线程从而充分利用可用的处理能力。 "
"虽然并非所有软件都能自动从中受益，但在设计时将线程纳入考虑的程序在多核心硬件上运行速度会更快。 **自由线程模式是实验性的** "
"并且处于不断改进的过程中：预计会出现一些程序错误并且在单线程场景下出现明显的性能损失。 可以选择使用环境变量 :envvar:`PYTHON_GIL` "
"或命令行选项 :option:`-X gil=1` 让 CPython 的自由线程构建版支持在运行时启用 GIL。"

#: ../../whatsnew/3.13.rst:327
msgid ""
"To check if the current interpreter supports free-threading, :option:`python"
" -VV <-V>` and :data:`sys.version` contain \"experimental free-threading "
"build\". The new :func:`!sys._is_gil_enabled` function can be used to check "
"whether the GIL is actually disabled in the running process."
msgstr ""
"要判断当前解释器是否支持自由线程，可检查 :option:`python -VV <-V>` 和 :data:`sys.version` 是否包含 "
"\"experimental free-threading build\"。 新的 :func:`!sys._is_gil_enabled` "
"函数可用于检查在运行进程中 GIL 是否确实被关闭。"

#: ../../whatsnew/3.13.rst:332
msgid ""
"C-API extension modules need to be built specifically for the free-threaded "
"build. Extensions that support running with the :term:`GIL` disabled should "
"use the :c:data:`Py_mod_gil` slot. Extensions using single-phase init should"
" use :c:func:`PyUnstable_Module_SetGIL` to indicate whether they support "
"running with the GIL disabled. Importing C extensions that don't use these "
"mechanisms will cause the GIL to be enabled, unless the GIL was explicitly "
"disabled with the :envvar:`PYTHON_GIL` environment variable or the "
":option:`-X gil=0` option. pip 24.1 or newer is required to install packages"
" with C extensions in the free-threaded build."
msgstr ""
"C-API 扩展模块需要针对自由线程构建版专门进行构建。 支持在禁用 :term:`GIL` 的情况下运行的扩展应当使用 "
":c:data:`Py_mod_gil` 槽位。 使用单阶段初始化的扩展应当使用 :c:func:`PyUnstable_Module_SetGIL` "
"来指明它们是支支持在禁用 GIL 的情况下运行。 导入不使用这些机制的 C 扩展将导致 GIL 被启用，除非通过 "
":envvar:`PYTHON_GIL` 环境变量或 :option:`-X gil=0` 选项显式地禁用 GIL。 需要 pip 24.1 "
"或更新的版本才能在自由线程构建版中安装带有 C 扩展的软件包。"

#: ../../whatsnew/3.13.rst:343
msgid ""
"This work was made possible thanks to many individuals and organizations, "
"including the large community of contributors to Python and third-party "
"projects to test and enable free-threading support. Notable contributors "
"include: Sam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett "
"Simmers, Dino Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers, Lysandros"
" Nikolaou, and many others. Many of these contributors are employed by Meta,"
" which has provided significant engineering resources to support this "
"project."
msgstr ""
"这项工作成为可能要感谢许多个人和组织，包括针对 Python 和第三方项目测试并启用自由线程支持的庞大的贡献者社区。 重要的贡献者包括：Sam "
"Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett Simmers, Dino "
"Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers, Lysandros Nikolaou "
"及其他许多人。 有许多贡献者受雇于 Meta，该公司提供了大量的工程资源来支持此项目。"

#: ../../whatsnew/3.13.rst:355
msgid ""
":pep:`703` \"Making the Global Interpreter Lock Optional in CPython\" "
"contains rationale and information surrounding this work."
msgstr ""
":pep:`703` \"Making the Global Interpreter Lock Optional in CPython\" "
"中包含了有关此项工作的理念和信息。"

#: ../../whatsnew/3.13.rst:358
msgid ""
"`Porting Extension Modules to Support Free-Threading <https://py-free-"
"threading.github.io/porting/>`_: A community-maintained porting guide for "
"extension authors."
msgstr ""
"`Porting Extension Modules to Support Free-Threading <https://py-free-"
"threading.github.io/porting/>`_: 一份由社区维护的针对扩展开发者的移植指南。"

#: ../../whatsnew/3.13.rst:366
msgid "An experimental just-in-time (JIT) compiler"
msgstr "实验性的即时 (JIT) 编译器"

#: ../../whatsnew/3.13.rst:368
msgid ""
"When CPython is configured and built using the :option:`!--enable-"
"experimental-jit` option, a just-in-time (JIT) compiler is added which may "
"speed up some Python programs. On Windows, use ``PCbuild/build.bat "
"--experimental-jit`` to enable the JIT or ``--experimental-jit-interpreter``"
" to enable the Tier 2 interpreter. Build requirements and further supporting"
" information `are contained at`__ :file:`Tools/jit/README.md`."
msgstr ""
"当 CPython 使用 :option:`!--enable-experimental-jit` "
"选项进行配置和构建时，会添加一个即时（JIT）编译器以加快某些 Python 程序的运行速度。 在 Windows 上，可使用 "
"``PCbuild/build.bat --experimental-jit`` 启用 JIT 或使用 ``--experimental-jit-"
"interpreter`` 启用第 2 层级解释器。 构建要求和进一步的支持信息 `包含在`__ :file:`Tools/jit/README.md`"
" 中。"

#: ../../whatsnew/3.13.rst:378
msgid ""
"The :option:`!--enable-experimental-jit` option takes these (optional) "
"values, defaulting to ``yes`` if :option:`!--enable-experimental-jit` is "
"present without the optional value."
msgstr ""
":option:`!--enable-experimental-jit` 选项接受这些（可选）值，如果不带可选值地预设 :option:`!--"
"enable-experimental-jit` 则默认为 ``yes``。"

#: ../../whatsnew/3.13.rst:382
msgid "``no``: Disable the entire Tier 2 and JIT pipeline."
msgstr "``no``: 禁用整个第 2 层级和 JIT 管线。"

#: ../../whatsnew/3.13.rst:383
msgid ""
"``yes``: Enable the JIT. To disable the JIT at runtime, pass the environment"
" variable ``PYTHON_JIT=0``."
msgstr "``yes``: 启用 JIT。 要在运行时禁用 JIT，则传入环境变量 ``PYTHON_JIT=0``。"

#: ../../whatsnew/3.13.rst:385
msgid ""
"``yes-off``: Build the JIT but disable it by default. To enable the JIT at "
"runtime, pass the environment variable ``PYTHON_JIT=1``."
msgstr "``yes-off``: 构建 JIT 但默认禁用它。 要在运行时启用 JIT，则传入环境变量 ``PYTHON_JIT=1``。"

#: ../../whatsnew/3.13.rst:387
msgid ""
"``interpreter``: Enable the Tier 2 interpreter but disable the JIT. The "
"interpreter can be disabled by running with ``PYTHON_JIT=0``."
msgstr ""
"``interpreter``: 启用第 2 层级解释器但是禁用 JIT。 可以在运行时传入 ``PYTHON_JIT=0`` 来禁用该解释器。"

#: ../../whatsnew/3.13.rst:390
msgid "The internal architecture is roughly as follows:"
msgstr "其内部架构大致如下："

#: ../../whatsnew/3.13.rst:392
msgid ""
"We start with specialized *Tier 1 bytecode*. See :ref:`What's new in 3.11 "
"<whatsnew311-pep659>` for details."
msgstr ""
"我们将从特化的 *第 1 层级字节码* 开始。 请参阅 :ref:`3.11 有什么新变化 <whatsnew311-pep659>` 了解详情。"

#: ../../whatsnew/3.13.rst:394
msgid ""
"When the Tier 1 bytecode gets hot enough, it gets translated to a new purely"
" internal intermediate representation (IR), called the *Tier 2 IR*, and "
"sometimes referred to as micro-ops (\"uops\")."
msgstr ""
"当第 1 层级字节码达到足够热度，它将被翻译为新的纯内部的中间表示形式 (IR)，称为 *第 2 层级 IR*，有时也称为微操作码 "
"(\"uops\")。"

#: ../../whatsnew/3.13.rst:397
msgid ""
"The Tier 2 IR uses the same stack-based virtual machine as Tier 1, but the "
"instruction format is better suited to translation to machine code."
msgstr "第 2 层级 IR 使用与第 1 层级相同的基于栈的虚拟机，但其指令格式更适合被翻译为机器码。"

#: ../../whatsnew/3.13.rst:399
msgid ""
"We have several optimization passes for Tier 2 IR, which are applied before "
"it is interpreted or translated to machine code."
msgstr "在第 2 层级 IR 被解释或翻译为机器码之前，我们会预先应用一些优化通路。"

#: ../../whatsnew/3.13.rst:401
msgid ""
"There is a Tier 2 interpreter, but it is mostly intended for debugging the "
"earlier stages of the optimization pipeline. The Tier 2 interpreter can be "
"enabled by configuring Python with ``--enable-experimental-"
"jit=interpreter``."
msgstr ""
"虽然第 2 层级解释器存在，但它主要用于对优化管线的先前阶段进行调试。可通过为 Python 配置 ``--enable-experimental-"
"jit=interpreter`` 选项启用第 2 层级解释器。"

#: ../../whatsnew/3.13.rst:405
msgid ""
"When the JIT is enabled, the optimized Tier 2 IR is translated to machine "
"code, which is then executed."
msgstr "启用 JIT 时，经优化的第 2 层级 IR 将被翻译为机器码后再执行。"

#: ../../whatsnew/3.13.rst:407
msgid ""
"The machine code translation process uses a technique called *copy-and-"
"patch*. It has no runtime dependencies, but there is a new build-time "
"dependency on LLVM."
msgstr "这个机器码翻译过程使用了名为 *拷贝并打补丁* 的技巧。 它没有运行时依赖，但增加了构建时对 LLVM 的依赖。"

#: ../../whatsnew/3.13.rst:411
msgid ":pep:`744`"
msgstr ":pep:`744`"

#: ../../whatsnew/3.13.rst:413
msgid ""
"(JIT by Brandt Bucher, inspired by a paper by Haoran Xu and Fredrik "
"Kjolstad. Tier 2 IR by Mark Shannon and Guido van Rossum. Tier 2 optimizer "
"by Ken Jin.)"
msgstr ""
"（JIT 来自 Brandt Bucher 且受到 Haoran Xu 和 Fredrik Kjolstad 论文的启发。第 2 层级 IR 来自 "
"Mark Shannon 和 Guido van Rossum。第 2 层级解释器来自 Ken Jin。）"

#: ../../whatsnew/3.13.rst:421
msgid "Defined mutation semantics for :py:func:`locals`"
msgstr "针对 :py:func:`locals` 的已定义修改语义"

#: ../../whatsnew/3.13.rst:423
msgid ""
"Historically, the expected result of mutating the return value of "
":func:`locals` has been left to individual Python implementations to define."
" Starting from Python 3.13, :pep:`667` standardises the historical behavior "
"of CPython for most code execution scopes, but changes :term:`optimized "
"scopes <optimized scope>` (functions, generators, coroutines, "
"comprehensions, and generator expressions) to explicitly return independent "
"snapshots of the currently assigned local variables, including locally "
"referenced nonlocal variables captured in closures."
msgstr ""
"在历史上，改变 :func:`locals` 的返回值的预期结果是留给具体的 Python 实现来定义的。 从 Python 3.13 "
"开始，:pep:`667` 标准化了 CPython 对于大多数代码执行作用域的历史行为，但也将 :term:`已优化作用域 <optimized "
"scope>` (函数、生成器、协程、推导式和生成器表达式) 修改为显式地返回当前已赋值的局部变量的独立快照，包括局部引用的在闭包中捕获的非局部变量。"

#: ../../whatsnew/3.13.rst:432
msgid ""
"This change to the semantics of :func:`locals` in optimized scopes also "
"affects the default behavior of code execution functions that implicitly "
"target :func:`!locals` if no explicit namespace is provided (such as "
":func:`exec` and :func:`eval`). In previous versions, whether or not changes"
" could be accessed by calling :func:`!locals` after calling the code "
"execution function was implementation-dependent. In CPython specifically, "
"such code would typically appear to work as desired, but could sometimes "
"fail in optimized scopes based on other code (including debuggers and code "
"execution tracing tools) potentially resetting the shared snapshot in that "
"scope. Now, the code will always run against an independent snapshot of the "
"local variables in optimized scopes, and hence the changes will never be "
"visible in subsequent calls to :func:`!locals`. To access the changes made "
"in these cases, an explicit namespace reference must now be passed to the "
"relevant function. Alternatively, it may make sense to update affected code "
"to use a higher level code execution API that returns the resulting code "
"execution namespace (e.g. :func:`runpy.run_path` when executing Python files"
" from disk)."
msgstr ""
"在已优化作用域中对 :func:`locals` 语义的这项修改也会影响隐式地以 :func:`!locals` "
"为目标的代码执行函数的默认行为，如果没有提供显式命名空间的话（例如 :func:`exec` 和 :func:`eval` 等）。 "
"在之前的版本中，在调用代码执行函数后是否可以通过调用 :func:`!locals` 访问更改情况取决于具体的实现。 具体到 CPython "
"而言，此类代码通常会按预期工作，但有时可能会在基于其他代码（包括调试器和代码执行跟踪工具）的已优化作用域中失败，因为代码有可能重置该作用域中的共享快照。"
" 现在，代码在已优化作用域中将始终针对局部变量的独立快照运行，因为在后续调用 :func:`!locals` 时将永远看不到更改。 "
"要访问在这些情况下所做的更改，现在必须将一个显式命名空间引用传递给相关的函数。 或者，也可以更新受影响的代码以使用更高层级的代码执行 API "
"返回结果代码命名空间（例如，当执行磁盘上的 Python 文件时使用 :func:`runpy.run_path` 函数）。"

#: ../../whatsnew/3.13.rst:451
msgid ""
"To ensure debuggers and similar tools can reliably update local variables in"
" scopes affected by this change, :attr:`FrameType.f_locals <frame.f_locals>`"
" now returns a write-through proxy to the frame's local and locally "
"referenced nonlocal variables in these scopes, rather than returning an "
"inconsistently updated shared ``dict`` instance with undefined runtime "
"semantics."
msgstr ""
"为确保调试器和类似工具能可靠地更新受到此变化影响的作用域中的局部变量，现在 :attr:`FrameType.f_locals "
"<frame.f_locals>` "
"将返回一个针对此种作用域中的帧的局部变量和在局部引用的非局部变量的直通写入代理对象，而不是返回一个非持续更新的具有规定义的运行时语义的共享 "
"``dict`` 实例。"

#: ../../whatsnew/3.13.rst:457
msgid ""
"See :pep:`667` for more details, including related C API changes and "
"deprecations. Porting notes are also provided below for the affected "
":ref:`Python APIs <pep667-porting-notes-py>` and :ref:`C APIs "
"<pep667-porting-notes-c>`."
msgstr ""
"请参阅 :pep:`667` 了解详情，包括相关的 C API 更改和弃用。 下文还针对受影响的 :ref:`Python API "
"<pep667-porting-notes-py>` 和 :ref:`C API <pep667-porting-notes-c>` 提供了移植说明。"

#: ../../whatsnew/3.13.rst:462
msgid ""
"(PEP and implementation contributed by Mark Shannon and Tian Gao in "
":gh:`74929`. Documentation updates provided by Guido van Rossum and Alyssa "
"Coghlan.)"
msgstr ""
"（PEP 和实现由 Mark Shannon 和 Tian Gao 在 :gh:`74929` 中贡献。 文档更新由 Guido van Rossum "
"和 Alyssa Coghlan 提供。）"

#: ../../whatsnew/3.13.rst:470
msgid "Support for mobile platforms"
msgstr "对移动平台的支持"

#: ../../whatsnew/3.13.rst:472
msgid ""
":pep:`730`: iOS is now a :pep:`11` supported platform, with the "
"``arm64-apple-ios`` and ``arm64-apple-ios-simulator`` targets at tier 3 "
"(iPhone and iPad devices released after 2013 and the Xcode iOS simulator "
"running on Apple silicon hardware, respectively). ``x86_64-apple-ios-"
"simulator`` (the Xcode iOS simulator running on older ``x86_64`` hardware) "
"is not a tier 3 supported platform, but will have best-effort support. (PEP "
"written and implementation contributed by Russell Keith-Magee in "
":gh:`114099`.)"
msgstr ""
":pep:`730`: iOS 现在是 :pep:`11` 所支持的平台，包括第 3 层级的 ``arm64-apple-ios`` 和 "
"``arm64-apple-ios-simulator`` 等目标（分别为2013 年后的 iPhone 和 iPad 设备以及运行于 Apple "
"silicon 硬件的 Xcode iOS 模拟器）。 ``x86_64-apple-ios-simulator`` （运行于较旧的 "
"``x86_64`` 硬件的 Xcode iOS 模拟器）不是第 3 层级的受支持平台，但也将尽可能地支持。 （PEP 撰写及实现由 Russell "
"Keith-Magee 在 :gh:`114099` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:482
msgid ""
":pep:`738`: Android is now a :pep:`11` supported platform, with the "
"``aarch64-linux-android`` and ``x86_64-linux-android`` targets at tier 3. "
"The 32-bit targets ``arm-linux-androideabi`` and ``i686-linux-android`` are "
"not tier 3 supported platforms, but will have best-effort support. (PEP "
"written and implementation contributed by Malcolm Smith in :gh:`116622`.)"
msgstr ""
":pep:`738`: Android 现在是 :pep:`11` 所支持的平台，包括位于第 3 层级的 ``aarch64-linux-"
"android`` 和 ``x86_64-linux-android`` 等目标。 32 位的目标 ``arm-linux-androideabi`` "
"和 ``i686-linux-android`` 不是第 3 层级的受支持平台，但也将尽可能地支持。 （PEP 撰写及实现由 Malcolm Smith"
" 在 :gh:`116622` 中贡献。）"

#: ../../whatsnew/3.13.rst:489
msgid ":pep:`730`, :pep:`738`"
msgstr ":pep:`730`, :pep:`738`"

#: ../../whatsnew/3.13.rst:493
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.13.rst:495
msgid ""
"The compiler now strips common leading whitespace from every line in a "
"docstring. This reduces the size of the :term:`bytecode cache <bytecode>` "
"(such as ``.pyc`` files), with reductions in file size of around 5%, for "
"example in :mod:`!sqlalchemy.orm.session` from SQLAlchemy 2.0. This change "
"affects tools that use docstrings, such as :mod:`doctest`."
msgstr ""
"编译器现在将从文档字符串的每一行去除共有的前导空格。 这会减少 :term:`字节码缓存 <bytecode>` 的大小（例如 ``.pyc`` "
"文件），例如在 SQLAlchemy 2.0 的 :mod:`!sqlalchemy.orm.session` 中文件大小将减少约 5%。 "
"这项改变将影响各种使用了文档字符串的工具，如 :mod:`doctest`。"

#: ../../whatsnew/3.13.rst:502
msgid ""
">>> def spam():\n"
"...     \"\"\"\n"
"...         This is a docstring with\n"
"...           leading whitespace.\n"
"...\n"
"...         It even has multiple paragraphs!\n"
"...     \"\"\"\n"
"...\n"
">>> spam.__doc__\n"
"'\\nThis is a docstring with\\n  leading whitespace.\\n\\nIt even has multiple paragraphs!\\n'"
msgstr ""
">>> def spam():\n"
"...     \"\"\"\n"
"...         This is a docstring with\n"
"...           leading whitespace.\n"
"...\n"
"...         It even has multiple paragraphs!\n"
"...     \"\"\"\n"
"...\n"
">>> spam.__doc__\n"
"'\\nThis is a docstring with\\n  leading whitespace.\\n\\nIt even has multiple paragraphs!\\n'"

#: ../../whatsnew/3.13.rst:515
msgid "(Contributed by Inada Naoki in :gh:`81283`.)"
msgstr "（由 Inada Naoki 在 :gh:`81283` 中贡献。）"

#: ../../whatsnew/3.13.rst:517
msgid ""
":ref:`Annotation scopes <annotation-scopes>` within class scopes can now "
"contain lambdas and comprehensions. Comprehensions that are located within "
"class scopes are not inlined into their parent scope."
msgstr ""
"类作用域内的 :ref:`标注作用域 <annotation-scopes>` 现在可以包含 lambda 和推导式。 "
"位于类作用域内的推导式不会内联到其父作用域中。"

#: ../../whatsnew/3.13.rst:522
msgid ""
"class C[T]:\n"
"    type Alias = lambda: T"
msgstr ""
"class C[T]:\n"
"    type Alias = lambda: T"

#: ../../whatsnew/3.13.rst:527
msgid "(Contributed by Jelle Zijlstra in :gh:`109118` and :gh:`118160`.)"
msgstr "（由 Jelle Zijlstra 在 :gh:`109118` 和 :gh:`118160` 中贡献。）"

#: ../../whatsnew/3.13.rst:529
msgid ""
":ref:`Future statements <future>` are no longer triggered by relative "
"imports of the :mod:`__future__` module, meaning that statements of the form"
" ``from .__future__ import ...`` are now simply standard relative imports, "
"with no special features activated. (Contributed by Jeremiah Gabriel Pascual"
" in :gh:`118216`.)"
msgstr ""
":ref:`future 语句 <future>` 不再会被 :mod:`__future__` 模块的相对导入触发，意味着 ``from "
".__future__ import ...`` 形式的语句现在只是标准的相对导入，而不会激活任何特殊特性。 （由 Jeremiah Gabriel "
"Pascual 在 :gh:`118216` 中贡献。）"

#: ../../whatsnew/3.13.rst:535
msgid ""
":keyword:`global` declarations are now permitted in :keyword:`except` blocks"
" when that global is used in the :keyword:`else` block. Previously this "
"raised an erroneous :exc:`SyntaxError`. (Contributed by Irit Katriel in "
":gh:`111123`.)"
msgstr ""
"现在 :keyword:`global` 声明当其被用于 :keyword:`else` 代码块中时也将被允许在 :keyword:`except` "
"代码块中使用。 在之前版本中这会错误地引发 :exc:`SyntaxError`。 （由 Irit Katriel 在 :gh:`111123` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:540
msgid ""
"Add :envvar:`PYTHON_FROZEN_MODULES`, a new environment variable that "
"determines whether frozen modules are ignored by the import machinery, "
"equivalent to the :option:`-X frozen_modules <-X>` command-line option. "
"(Contributed by Yilei Yang in :gh:`111374`.)"
msgstr ""
"增加了新的环境变量 :envvar:`PYTHON_FROZEN_MODULES`，它确定冻结模块是否会被导入机制所忽略，等价于 :option:`-X"
" frozen_modules <-X>` 命令行选项。 （由 Yilei Yang 在 :gh:`111374` 中贡献。）"

#: ../../whatsnew/3.13.rst:545
msgid ""
"Add :ref:`support for the perf profiler <perf_profiling>` working without "
"`frame pointers <https://en.wikipedia.org/wiki/Call_stack>`_ through the new"
" environment variable :envvar:`PYTHON_PERF_JIT_SUPPORT` and command-line "
"option :option:`-X perf_jit <-X>`. (Contributed by Pablo Galindo in "
":gh:`118518`.)"
msgstr ""
"通过新的环境变量 :envvar:`PYTHON_PERF_JIT_SUPPORT` 和命令行选项 :option:`-X perf_jit <-X>`"
" 添加无需 `帧指针 <https://en.wikipedia.org/wiki/Call_stack>`_ 即可工作的 :ref:`对 perf "
"性能分析器的支持 <perf_profiling>`。 （由 Pablo Galindo 在 :gh:`118518` 中贡献。）"

#: ../../whatsnew/3.13.rst:551
msgid ""
"The location of a :file:`.python_history` file can be changed via the new "
":envvar:`PYTHON_HISTORY` environment variable. (Contributed by Levi Sabah, "
"Zackery Spytz and Hugo van Kemenade in :gh:`73965`.)"
msgstr ""
"可通过新的 :envvar:`PYTHON_HISTORY` 环境变量来更改 :file:`.python_history` 文件的位置。 （由 "
"Levi Sabah, Zackery Spytz 和 Hugo van Kemenade 在 :gh:`73965` 中贡献。）"

#: ../../whatsnew/3.13.rst:556
msgid ""
"Classes have a new :attr:`~type.__static_attributes__` attribute. This is "
"populated by the compiler with a tuple of the class's attribute names which "
"are assigned through ``self.<name>`` from any function in its body. "
"(Contributed by Irit Katriel in :gh:`115775`.)"
msgstr ""
"类新增了一个 :attr:`~type.__static_attributes__` 属性。 "
"这由编译器以类属性名称的元组来填充，这些名称是从类体中的任何函数通过 ``self.<name>`` 来赋值的。 （由 Irit Katriel 在 "
":gh:`115775` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:561
msgid ""
"The compiler now creates a :attr:`!__firstlineno__` attribute on classes "
"with the line number of the first line of the class definition. (Contributed"
" by Serhiy Storchaka in :gh:`118465`.)"
msgstr ""
"编译器现在会在类上创建一个 :attr:`!__firstlineno__` 属性，其值为类定义第一行的行号。 （由 Serhiy Storchaka "
"在 :gh:`118465` 中贡献。）"

#: ../../whatsnew/3.13.rst:565
msgid ""
"The :func:`exec` and :func:`eval` builtins now accept the *globals* and "
"*locals* arguments as keywords. (Contributed by Raphael Gaschignard in "
":gh:`105879`)"
msgstr ""
"现在 :func:`exec` 和 :func:`eval` 内置函数接受以关键字形式传入的 *globals* 和 *locals* 参数。 （由 "
"Raphael Gaschignard 在 :gh:`105879` 中贡献。）"

#: ../../whatsnew/3.13.rst:569
msgid ""
"The :func:`compile` builtin now accepts a new flag, "
"``ast.PyCF_OPTIMIZED_AST``, which is similar to ``ast.PyCF_ONLY_AST`` except"
" that the returned AST is optimized according to the value of the *optimize*"
" argument. (Contributed by Irit Katriel in :gh:`108113`)."
msgstr ""
"现在 :func:`compile` 内置函数接受一个新的旗标 ``ast.PyCF_OPTIMIZED_AST``，它类似于 "
"``ast.PyCF_ONLY_AST`` 但区别在于返回的 AST 是根据 *optimize* 参数的值进行优化的。 （由 Irit Katriel"
" 在 :gh:`108113` 中贡献。）"

#: ../../whatsnew/3.13.rst:575
msgid ""
"Add a :attr:`~property.__name__` attribute on :class:`property` objects. "
"(Contributed by Eugene Toder in :gh:`101860`.)"
msgstr ""
"在 :class:`property` 对象上增加了 :attr:`~property.__name__` 属性。 （由 Eugene Toder 在 "
":gh:`101860` 中贡献。）"

#: ../../whatsnew/3.13.rst:578
msgid ""
"Add :exc:`PythonFinalizationError`, a new exception derived from "
":exc:`RuntimeError` and used to signal when operations are blocked during "
":term:`finalization <interpreter shutdown>`. The following callables now "
"raise :exc:`!PythonFinalizationError`, instead of :exc:`RuntimeError`:"
msgstr ""
"增加了新的异常 :exc:`PythonFinalizationError`，它派生自 :exc:`RuntimeError`，用于当操作在 "
":term:`最终化 <interpreter shutdown>` 期间被阻塞时发出信号。 下列可调用对象现在将引发 "
":exc:`!PythonFinalizationError`，而不是 :exc:`RuntimeError`:"

#: ../../whatsnew/3.13.rst:584
msgid ":func:`_thread.start_new_thread`"
msgstr ":func:`_thread.start_new_thread`"

#: ../../whatsnew/3.13.rst:585
msgid ":func:`os.fork`"
msgstr ":func:`os.fork`"

#: ../../whatsnew/3.13.rst:586
msgid ":func:`os.forkpty`"
msgstr ":func:`os.forkpty`"

#: ../../whatsnew/3.13.rst:587
msgid ":class:`subprocess.Popen`"
msgstr ":class:`subprocess.Popen`"

#: ../../whatsnew/3.13.rst:589
msgid "(Contributed by Victor Stinner in :gh:`114570`.)"
msgstr "（由 Victor Stinner 在 :gh:`114570` 中贡献。）"

#: ../../whatsnew/3.13.rst:591
msgid ""
"Allow the *count* argument of :meth:`str.replace` to be a keyword. "
"(Contributed by Hugo van Kemenade in :gh:`106487`.)"
msgstr ""
"允许 :meth:`str.replace` 的 *count* 参数为关键字参数。 （由 Hugo van Kemenade 在 "
":gh:`106487` 中贡献。）"

#: ../../whatsnew/3.13.rst:594
msgid ""
"Many functions now emit a warning if a boolean value is passed as a file "
"descriptor argument. This can help catch some errors earlier. (Contributed "
"by Serhiy Storchaka in :gh:`82626`.)"
msgstr ""
"现在许多函数会对将布尔值作为文件描述符参数发出警告。这可以帮助尽早发现一些错误。（由 Serhiy Storchaka 在 :gh:`82626` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:599
msgid ""
"Added :attr:`!name` and :attr:`!mode` attributes for compressed and archived"
" file-like objects in the :mod:`bz2`, :mod:`lzma`, :mod:`tarfile`, and "
":mod:`zipfile` modules. (Contributed by Serhiy Storchaka in :gh:`115961`.)"
msgstr ""
"为 :mod:`bz2`, :mod:`lzma`, :mod:`tarfile` 和 :mod:`zipfile` "
"等模块中的已压缩和已归档文件型对象添加了 :attr:`!name` 和 :attr:`!mode` 属性。 （由 Serhiy Storchaka 在"
" :gh:`115961` 中贡献。）"

#: ../../whatsnew/3.13.rst:606
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.13.rst:608
msgid ""
":mod:`dbm.sqlite3`: An SQLite backend for :mod:`dbm`. (Contributed by "
"Raymond Hettinger and Erlend E. Aasland in :gh:`100414`.)"
msgstr ""
":mod:`dbm.sqlite3`: 针对 :mod:`dbm` 的 SQLite 后端。 （由 Raymond Hettinger 和 Erlend"
" E. Aasland 在 :gh:`100414` 中贡献。）"

#: ../../whatsnew/3.13.rst:613
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.13.rst:617
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.13.rst:619
msgid ""
"Add the *deprecated* parameter to the "
":meth:`~argparse.ArgumentParser.add_argument` and :meth:`!add_parser` "
"methods, to enable deprecating command-line options, positional arguments, "
"and subcommands. (Contributed by Serhiy Storchaka in :gh:`83648`.)"
msgstr ""
"为 :meth:`~argparse.ArgumentParser.add_argument` 和 :meth:`!add_parser` 方法添加了 "
"*deprecated* 形参，以允许弃用命令行选项、位置参数和子命令。 （由 Serhiy Storchaka 在 :gh:`83648` 中贡献。）"

#: ../../whatsnew/3.13.rst:627
msgid "array"
msgstr "array"

#: ../../whatsnew/3.13.rst:629
msgid ""
"Add the ``'w'`` type code (``Py_UCS4``) for Unicode characters. It should be"
" used instead of the deprecated ``'u'`` type code. (Contributed by Inada "
"Naoki in :gh:`80480`.)"
msgstr ""
"增加了 ``'w'`` 类型码 (``Py_UCS4``) 表示 Unicode 字符。 它应被用来代替已弃用的 ``'u'`` 类型码。 （由 "
"Inada Naoki 在 :gh:`80480` 中贡献。）"

#: ../../whatsnew/3.13.rst:633
msgid ""
"Register :class:`array.array` as a :class:`~collections.abc.MutableSequence`"
" by implementing the :meth:`~array.array.clear` method. (Contributed by Mike"
" Zimin in :gh:`114894`.)"
msgstr ""
"通过实现 :meth:`~array.array.clear` 方法将 :class:`array.array` 注册为 "
":class:`~collections.abc.MutableSequence`。 （由 Mike Zimin 在 :gh:`114894` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:639
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.13.rst:641
msgid ""
"The constructors of node types in the :mod:`ast` module are now stricter in "
"the arguments they accept, with more intuitive behavior when arguments are "
"omitted."
msgstr "现在 :mod:`ast` 模块中节点类型的构造器对其接受的参数要求更为严格，并在参数被省略时有更易理解的行为。"

#: ../../whatsnew/3.13.rst:645
msgid ""
"If an optional field on an AST node is not included as an argument when "
"constructing an instance, the field will now be set to ``None``. Similarly, "
"if a list field is omitted, that field will now be set to an empty list, and"
" if an :class:`!expr_context` field is omitted, it defaults to "
":class:`Load() <ast.Load>`. (Previously, in all cases, the attribute would "
"be missing on the newly constructed AST node instance.)"
msgstr ""
"如果在构造实例时某个 AST 节点上的可选字段没有被作为参数包括在内，则该字段现在将被设为 ``None``。 "
"类似地，如果某个列表字段被省略，则该字段现在将被设为空列表，而如果某个 :class:`!expr_context` 字段被省略，则它将默认为 "
":class:`Load() <ast.Load>`。 （之前，在所有情况下，新构造的 AST 节点实例上的相应属性都将缺失。）"

#: ../../whatsnew/3.13.rst:653
msgid ""
"In all other cases, where a required argument is omitted, the node "
"constructor will emit a :exc:`DeprecationWarning`. This will raise an "
"exception in Python 3.15. Similarly, passing a keyword argument to the "
"constructor that does not map to a field on the AST node is now deprecated, "
"and will raise an exception in Python 3.15."
msgstr ""
"在所有其他情况下，当需要的参数被省略时，节点构造器将发出 :exc:`DeprecationWarning`。 这在 Python 3.15 "
"中将会引发异常。 类似地，将关键字参数传入一个未映射到 AST 节点上的字段的构造器的做法现在已被弃用，并且在 Python 3.15 中将会引发异常。"

#: ../../whatsnew/3.13.rst:660
msgid ""
"These changes do not apply to user-defined subclasses of :class:`ast.AST` "
"unless the class opts in to the new behavior by defining the "
":attr:`.AST._field_types` mapping."
msgstr ""
"这些更改将不会应用于用户自定义的 :class:`ast.AST` 子类，除非该类选择通过设置 :attr:`.AST._field_types` "
"映射的方式加入新的行为。"

#: ../../whatsnew/3.13.rst:664
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`105858`, :gh:`117486`, and "
":gh:`118851`.)"
msgstr "（由 Jelle Zijlstra 在 :gh:`105858`, :gh:`117486` 和 :gh:`118851` 中贡献。）"

#: ../../whatsnew/3.13.rst:666
msgid ""
":func:`ast.parse` now accepts an optional argument *optimize* which is "
"passed on to :func:`compile`. This makes it possible to obtain an optimized "
"AST. (Contributed by Irit Katriel in :gh:`108113`.)"
msgstr ""
"现在 :func:`ast.parse` 接受一个可选参数 *optimize*，它会被传递给 :func:`compile`。 这使得获取已优化的 "
"AST 成为可能。 （由 Irit Katriel 在 :gh:`108113` 中贡献。）"

#: ../../whatsnew/3.13.rst:673
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.13.rst:675
msgid ""
":func:`asyncio.as_completed` now returns an object that is both an "
":term:`asynchronous iterator` and a plain :term:`iterator` of "
":term:`awaitables <awaitable>`. The awaitables yielded by asynchronous "
"iteration include original task or future objects that were passed in, "
"making it easier to associate results with the tasks being completed. "
"(Contributed by Justin Arthur in :gh:`77714`.)"
msgstr ""
"现在 :func:`asyncio.as_completed` 将返回一个即是 :term:`asynchronous iterator` "
"又是基本的产生 :term:`可等待对象 <awaitable>`  的 :term:`iterator` 的对象。 "
"由异常迭代产生的可等待对象包括被传入的原始 Task 或 Future 对象，使得将结果与正在完成的任务相关联更为容易。 （由 Justin "
"Arthur 在 :gh:`77714` 中贡献。）"

#: ../../whatsnew/3.13.rst:683
msgid ""
":meth:`asyncio.loop.create_unix_server` will now automatically remove the "
"Unix socket when the server is closed. (Contributed by Pierre Ossman in "
":gh:`111246`.)"
msgstr ""
"现在当服务器被关闭时 :meth:`asyncio.loop.create_unix_server` 会自动移除 Unix 套接字。 （由 Pierre"
" Ossman 在 :gh:`111246` 中贡献。）"

#: ../../whatsnew/3.13.rst:687
msgid ""
":meth:`.DatagramTransport.sendto` will now send zero-length datagrams if "
"called with an empty bytes object. The transport flow control also now "
"accounts for the datagram header when calculating the buffer size. "
"(Contributed by Jamie Phan in :gh:`115199`.)"
msgstr ""
"现在当附带一个空字节串对象调用时 :meth:`.DatagramTransport.sendto` 将发送零长度的数据报。 "
"现在当计算缓冲区大小时传输控制流还会将数据报标头纳入考量。 （由 Jamie Phan 在 :gh:`115199` 中贡献。）"

#: ../../whatsnew/3.13.rst:693
msgid ""
"Add :meth:`Queue.shutdown <asyncio.Queue.shutdown>` and "
":exc:`~asyncio.QueueShutDown` to manage queue termination. (Contributed by "
"Laurie Opperman and Yves Duprat in :gh:`104228`.)"
msgstr ""
"增加了 :meth:`Queue.shutdown <asyncio.Queue.shutdown>` 和 "
":exc:`~asyncio.QueueShutDown` 用于管理队列终结。 （由 Laurie Opperman 和 Yves Duprat 在 "
":gh:`104228` 中贡献。）"

#: ../../whatsnew/3.13.rst:697
msgid ""
"Add the :meth:`.Server.close_clients` and :meth:`.Server.abort_clients` "
"methods, which more forcefully close an asyncio server. (Contributed by "
"Pierre Ossman in :gh:`113538`.)"
msgstr ""
"增加了 :meth:`.Server.close_clients` 和 :meth:`.Server.abort_clients` "
"方法，它们会以更强制的方式关闭 asyncio 服务器。 （由 Pierre Ossman 在 :gh:`113538` 中贡献。）"

#: ../../whatsnew/3.13.rst:701
msgid ""
"Accept a tuple of separators in :meth:`.StreamReader.readuntil`, stopping "
"when any one of them is encountered. (Contributed by Bruce Merry in "
":gh:`81322`.)"
msgstr ""
"在 :meth:`.StreamReader.readuntil` 中接受一个由分隔符组成的元组，当遇到其中之一时就会停止。 （由 Bruce "
"Merry 在 :gh:`81322` 中贡献。）"

#: ../../whatsnew/3.13.rst:705
msgid ""
"Improve the behavior of :class:`~asyncio.TaskGroup` when an external "
"cancellation collides with an internal cancellation. For example, when two "
"task groups are nested and both experience an exception in a child task "
"simultaneously, it was possible that the outer task group would hang, "
"because its internal cancellation was swallowed by the inner task group."
msgstr ""
"改进了 :class:`~asyncio.TaskGroup` 在外部的取消操作与内部的取消操作发生冲突时的行为。 "
"例如，当嵌套两个任务分组并且两者同时在某个子任务中遇到异常时，外层的任务分组有可能被挂起，因为其内部的取消操作已由内层的任务分组进行处理。"

#: ../../whatsnew/3.13.rst:712
msgid ""
"In the case where a task group is cancelled externally and also must raise "
"an :exc:`ExceptionGroup`, it will now call the parent task's "
":meth:`~asyncio.Task.cancel` method. This ensures that a "
":exc:`~asyncio.CancelledError` will be raised at the next :keyword:`await`, "
"so the cancellation is not lost."
msgstr ""
"对于任务分组在外部被取消时同时必须引发 :exc:`ExceptionGroup` 的情况，现在它将调用父任务的 "
":meth:`~asyncio.Task.cancel` 方法。 这样可以确保 :exc:`~asyncio.CancelledError` 会在下一次"
" :keyword:`await` 时被引发，因此取消操作不会丢失。, so the cancellation is not lost."

#: ../../whatsnew/3.13.rst:718
msgid ""
"An added benefit of these changes is that task groups now preserve the "
"cancellation count (:meth:`~asyncio.Task.cancelling`)."
msgstr "这些更改的一个附加好处是现在任务组会保留取消操作计数 (:meth:`~asyncio.Task.cancelling`)。"

#: ../../whatsnew/3.13.rst:721
msgid ""
"In order to handle some corner cases, :meth:`~asyncio.Task.uncancel` may now"
" reset the undocumented ``_must_cancel`` flag when the cancellation count "
"reaches zero."
msgstr ""
"为了处理某些边界情况，现在 :meth:`~asyncio.Task.uncancel` 可以在取消操作计数达到零时重置未写入文档的 "
"``_must_cancel`` 旗标。"

#: ../../whatsnew/3.13.rst:725
msgid "(Inspired by an issue reported by Arthur Tacca in :gh:`116720`.)"
msgstr "（受到由 Arthur Tacca 在 :gh:`116720` 中报告的问题的启发。）"

#: ../../whatsnew/3.13.rst:727
msgid ""
"When :meth:`.TaskGroup.create_task` is called on an inactive "
":class:`~asyncio.TaskGroup`, the given coroutine will be closed (which "
"prevents a :exc:`RuntimeWarning` about the given coroutine being never "
"awaited). (Contributed by Arthur Tacca and Jason Zhang in :gh:`115957`.)"
msgstr ""
"当在一个未激活的 :class:`~asyncio.TaskGroup` 上调用 :meth:`.TaskGroup.create_task` "
"时，给定的协程将被关闭 (这将防止引发有关给定的协程从未被等待的 :exc:`RuntimeWarning`)。 （由 Arthur Tacca 和 "
"Jason Zhang 在 :gh:`115957` 中贡献。）"

#: ../../whatsnew/3.13.rst:733
msgid ""
"The function and methods named ``create_task`` have received a new "
"``**kwargs`` argument that is passed through to the task constructor. This "
"change was accidentally added in 3.13.3, and broke the API contract for "
"custom task factories. Several third-party task factories implemented "
"workarounds for this. In 3.13.4 and later releases the old factory contract "
"is honored once again (until 3.14). To keep the workarounds working, the "
"extra ``**kwargs`` argument still allows passing additional keyword "
"arguments to :class:`~asyncio.Task` and to custom task factories."
msgstr ""
"名为 ``create_task`` 的函数和方法新增了一个 ``**kwargs`` 参数，它会被传递给任务构造器。 这项更改是在 3.13.3 "
"意外添加的，并且破坏了自定义任务工厂函数的 API 约定。 某些第三方任务工厂对此实现了绕过手段。 在 3.13.4 "
"及之后的发布版中旧的工厂约定再次被遵守（直到 3.14）。 要让绕过手段保持有效，附加的 ``**kwargs`` 参数仍然允许传递额外关键字参数给 "
":class:`~asyncio.Task` 以及自定义任务工厂。"

#: ../../whatsnew/3.13.rst:744
msgid ""
"This affects the following function and methods: "
":meth:`asyncio.create_task`, :meth:`asyncio.loop.create_task`, "
":meth:`asyncio.TaskGroup.create_task`. (Contributed by Thomas Grainger in "
":gh:`128307`.)"
msgstr ""
"这会影响下列函数和方法: :meth:`asyncio.create_task`, :meth:`asyncio.loop.create_task`, "
":meth:`asyncio.TaskGroup.create_task`。 （由 Thomas Grainger 在 :gh:`128307` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:751
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.13.rst:753
msgid ""
"Add :func:`~base64.z85encode` and :func:`~base64.z85decode` functions for "
"encoding :class:`bytes` as `Z85 data`_ and decoding Z85-encoded data to "
":class:`!bytes`. (Contributed by Matan Perelman in :gh:`75299`.)"
msgstr ""
"增加了 :func:`~base64.z85encode` 和 :func:`~base64.z85decode` 函数用于将 "
":class:`bytes` 编码为 `Z85 data`_ 和将 Z85 编码的数据解码为 :class:`!bytes`。 （由 Matan "
"Perelman 在 :gh:`75299` 中贡献。）"

#: ../../whatsnew/3.13.rst:762
msgid "compileall"
msgstr "compileall"

#: ../../whatsnew/3.13.rst:764 ../../whatsnew/3.13.rst:772
#: ../../whatsnew/3.13.rst:1031
msgid ""
"The default number of worker threads and processes is now selected using "
":func:`os.process_cpu_count` instead of :func:`os.cpu_count`. (Contributed "
"by Victor Stinner in :gh:`109649`.)"
msgstr ""
"工作线程和进程的默认数据现在是使用 :func:`os.process_cpu_count` 而不是 :func:`os.cpu_count` "
"来选择的。 （由 Victor Stinner 在 :gh:`109649` 中贡献。）"

#: ../../whatsnew/3.13.rst:770
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.13.rst:778 ../../whatsnew/3.13.rst:1680
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.13.rst:780
msgid ""
":class:`~configparser.ConfigParser` now has support for unnamed sections, "
"which allows for top-level key-value pairs. This can be enabled with the new"
" *allow_unnamed_section* parameter. (Contributed by Pedro Sousa Lacerda in "
":gh:`66449`.)"
msgstr ""
"现在 :class:`~configparser.ConfigParser` 具有对未命名节的支持，这将允许使用最高层级的键值对。 此特性可通过新增的 "
"*allow_unnamed_section* 形参来启用。 （由 Pedro Sousa Lacerda 在 :gh:`66449` 中贡献。）"

#: ../../whatsnew/3.13.rst:787
msgid "copy"
msgstr "copy"

#: ../../whatsnew/3.13.rst:789
msgid ""
"The new :func:`~copy.replace` function and the :meth:`replace protocol "
"<object.__replace__>` make creating modified copies of objects much simpler."
" This is especially useful when working with immutable objects. The "
"following types support the :func:`~copy.replace` function and implement the"
" replace protocol:"
msgstr ""
"新增的 :func:`~copy.replace` 函数和 :meth:`replace 协议 <object.__replace__>` "
"使得创建经修改的对象副本更为简单。 这在操作不可变对象时特别有用。 以下类型将支持 :func:`~copy.replace` 函数并实现了 "
"replace 协议："

#: ../../whatsnew/3.13.rst:795
msgid ":func:`collections.namedtuple`"
msgstr ":func:`collections.namedtuple`"

#: ../../whatsnew/3.13.rst:796
msgid ":class:`dataclasses.dataclass`"
msgstr ":class:`dataclasses.dataclass`"

#: ../../whatsnew/3.13.rst:797
msgid ""
":class:`datetime.datetime`, :class:`datetime.date`, :class:`datetime.time`"
msgstr ""
":class:`datetime.datetime`, :class:`datetime.date`, :class:`datetime.time`"

#: ../../whatsnew/3.13.rst:798
msgid ":class:`inspect.Signature`, :class:`inspect.Parameter`"
msgstr ":class:`inspect.Signature`, :class:`inspect.Parameter`"

#: ../../whatsnew/3.13.rst:799
msgid ":class:`types.SimpleNamespace`"
msgstr ":class:`types.SimpleNamespace`"

#: ../../whatsnew/3.13.rst:800
msgid ":ref:`code objects <code-objects>`"
msgstr ":ref:`代码对象 <code-objects>`"

#: ../../whatsnew/3.13.rst:802
msgid ""
"Any user-defined class can also support :func:`copy.replace` by defining the"
" :meth:`~object.__replace__` method. (Contributed by Serhiy Storchaka in "
":gh:`108751`.)"
msgstr ""
"任何用户自定义类也可以通过定义 :meth:`~object.__replace__` 方法来支持 :func:`copy.replace`。 （由 "
"Serhiy Storchaka 在 :gh:`108751` 中贡献。）"

#: ../../whatsnew/3.13.rst:808
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.13.rst:810
msgid ""
"As a consequence of necessary internal refactoring, initialization of "
"internal metaclasses now happens in ``__init__`` rather than in ``__new__``."
" This affects projects that subclass these internal metaclasses to provide "
"custom initialization. Generally:"
msgstr ""
"作为必要的内部重构的一个后果，内部元类的初始化现在将发生于 ``__init__`` 中而不是 ``__new__`` 中。 "
"这会影响子类化这些内部元类以提供自定义初始化的项目。 一般而言："

#: ../../whatsnew/3.13.rst:816
msgid ""
"Custom logic that was done in ``__new__`` after calling ``super().__new__`` "
"should be moved to ``__init__``."
msgstr "调用 ``super().__new__`` 之后在 ``__new__`` 中完成的自定义逻辑应当移至 ``__init__``。"

#: ../../whatsnew/3.13.rst:818
msgid ""
"To create a class, call the metaclass, not only the metaclass's ``__new__`` "
"method."
msgstr "要创建一个类，需调用相应的元类，而不仅是该元类的 ``__new__`` 方法。"

#: ../../whatsnew/3.13.rst:821
msgid ""
"See :gh:`124520` for discussion and links to changes in some affected "
"projects."
msgstr "请参阅 :gh:`124520` 了解相关讨论和对某些受影响项目的修改的链接。"

#: ../../whatsnew/3.13.rst:824
msgid ""
":class:`ctypes.Structure` objects have a new "
":attr:`~ctypes.Structure._align_` attribute which allows the alignment of "
"the structure being packed to/from memory to be specified explicitly. "
"(Contributed by Matt Sanderson in :gh:`112433`)"
msgstr ""
":class:`ctypes.Structure` 对象新增了一个 :attr:`~ctypes.Structure._align_` "
"属性以允许显式地指定发往内存的结构体对齐方式。 （由 Matt Sanderson 在 :gh:`112433` 中贡献。）"

#: ../../whatsnew/3.13.rst:830
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.13.rst:832
msgid ""
"Add :mod:`dbm.sqlite3`, a new module which implements an SQLite backend, and"
" make it the default :mod:`!dbm` backend. (Contributed by Raymond Hettinger "
"and Erlend E. Aasland in :gh:`100414`.)"
msgstr ""
"增加 :mod:`dbm.sqlite3`，一个实现了 SQLite 后端的新模块，并将其设为默认的 :mod:`!dbm` 后端。 （由 "
"Raymond Hettinger 和 Erlend E. Aasland 在 :gh:`100414` 中贡献。）"

#: ../../whatsnew/3.13.rst:836
msgid ""
"Allow removing all items from the database through the new "
":meth:`.gdbm.clear` and :meth:`.ndbm.clear` methods. (Contributed by Donghee"
" Na in :gh:`107122`.)"
msgstr ""
"允许通过新增的 :meth:`.gdbm.clear` 和 :meth:`.ndbm.clear` 方法移除数据库中的所有条目。 （由 Donghee "
"Na 在 :gh:`107122` 中贡献。）"

#: ../../whatsnew/3.13.rst:842
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.13.rst:844
msgid ""
"Change the output of :mod:`dis` module functions to show logical labels for "
"jump targets and exception handlers, rather than offsets. The offsets can be"
" added with the new :option:`-O <dis --show-offsets>` command-line option or"
" the *show_offsets* argument. (Contributed by Irit Katriel in :gh:`112137`.)"
msgstr ""
"将 :mod:`dis` 模块的函数的输出修改为显示跳转目标和异常处理器的逻辑标签，而不是偏移量。 可以使用新的 :option:`-O <dis "
"--show-offsets>` 命令行选项或 *show_offsets* 参数来添加偏移量。 （由 Irit Katriel 在 "
":gh:`112137` 中贡献。）"

#: ../../whatsnew/3.13.rst:851
msgid ""
":meth:`~dis.get_instructions` no longer represents cache entries as separate"
" instructions. Instead, it returns them as part of the "
":class:`~dis.Instruction`, in the new *cache_info* field. The *show_caches* "
"argument to :meth:`~dis.get_instructions` is deprecated and no longer has "
"any effect. (Contributed by Irit Katriel in :gh:`112962`.)"
msgstr ""
":meth:`~dis.get_instructions` 不再将缓存条目表示为单独的指令。 作为替代，它会将它们作为 "
":class:`~dis.Instruction` 的组成部分返回，放在新的 *cache_info* 字段中。 传给 "
":meth:`~dis.get_instructions` 的 *show_caches* 参数已被弃用并且不再有任何效果。 （由 Irit "
"Katriel 在 :gh:`112962` 中贡献。）"

#: ../../whatsnew/3.13.rst:863
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.13.rst:865
msgid ""
":mod:`doctest` output is now colored by default. This can be controlled via "
"the new :envvar:`PYTHON_COLORS` environment variable as well as the "
"canonical |NO_COLOR|_ and |FORCE_COLOR|_ environment variables. See also "
":ref:`using-on-controlling-color`. (Contributed by Hugo van Kemenade in "
":gh:`117225`.)"
msgstr ""
"现在 :mod:`doctest` 输出默认是彩色的。 此特性可通过新增的 :envvar:`PYTHON_COLORS` 环境变量和传统的 "
"|NO_COLOR|_ 和 |FORCE_COLOR|_ 环境变量来控制。 另请参阅 :ref:`using-on-controlling-"
"color`。 （由 Hugo van Kemenade 在 :gh:`117225` 中贡献。）"

#: ../../whatsnew/3.13.rst:872
msgid ""
"The :meth:`.DocTestRunner.run` method now counts the number of skipped "
"tests. Add the :attr:`.DocTestRunner.skips` and :attr:`.TestResults.skipped`"
" attributes. (Contributed by Victor Stinner in :gh:`108794`.)"
msgstr ""
"现在 :meth:`.DocTestRunner.run` 方法会统计已跳过测试的数量。 增加了 "
":attr:`.DocTestRunner.skips` 和 :attr:`.TestResults.skipped` 属性。 （由 Victor "
"Stinner 在 :gh:`108794` 中贡献。）"

#: ../../whatsnew/3.13.rst:878
msgid "email"
msgstr "email"

#: ../../whatsnew/3.13.rst:880
msgid ""
"Headers with embedded newlines are now quoted on output. The "
":mod:`~email.generator` will now refuse to serialize (write) headers that "
"are improperly folded or delimited, such that they would be parsed as "
"multiple headers or joined with adjacent data. If you need to turn this "
"safety feature off, set "
":attr:`~email.policy.Policy.verify_generated_headers`. (Contributed by Bas "
"Bloemsaat and Petr Viktorin in :gh:`121650`.)"
msgstr ""
"现在带有嵌入的换行符的标头在输出时会加上引号。 现在 :mod:`~email.generator` "
"会拒绝序列化（写入）不正确地折叠或分隔的标头，例如将被解析为多个标头或与相邻数据合并的标头等。 如果你需要禁用此安全特性，请设置 "
":attr:`~email.policy.Policy.verify_generated_headers`。 （由 Bas Bloemsaat 和 "
"Petr Viktorin 在 :gh:`121650` 中贡献。）"

#: ../../whatsnew/3.13.rst:888
msgid ""
":func:`~email.utils.getaddresses` and :func:`~email.utils.parseaddr` now "
"return ``('', '')`` pairs in more situations where invalid email addresses "
"are encountered instead of potentially inaccurate values. The two functions "
"have a new optional *strict* parameter (default ``True``). To get the old "
"behavior (accepting malformed input), use ``strict=False``. "
"``getattr(email.utils, 'supports_strict_parsing', False)`` can be used to "
"check if the *strict* parameter is available. (Contributed by Thomas Dwyer "
"and Victor Stinner for :gh:`102988` to improve the :cve:`2023-27043` fix.)"
msgstr ""
"现在 :func:`~email.utils.getaddresses` 和 :func:`~email.utils.parseaddr` "
"会在更多遇到无效 email 地址的情况下返回 ``('', '')`` 对非可能不准确的值。 这两个函数新增了可选的 *strict* 形参 (默认为"
" ``True``)。 要获取旧版本的行为 (接受错误格式的输入)，请使用 ``strict=False``。 "
"``getattr(email.utils, 'supports_strict_parsing', False)`` 可被用于检查 *strict* "
"形参是否可用。 （由 Thomas Dwyer 和 Victor Stinner 针对 :gh:`102988` 贡献以改进 "
":cve:`2023-27043` 修正。）"

#: ../../whatsnew/3.13.rst:900
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.13.rst:902
msgid ""
":class:`~enum.EnumDict` has been made public to better support subclassing "
":class:`~enum.EnumType`."
msgstr ":class:`~enum.EnumDict` 被改为公有以更好的支持子类化 :class:`~enum.EnumType`。"

#: ../../whatsnew/3.13.rst:907
msgid "fractions"
msgstr "fractions"

#: ../../whatsnew/3.13.rst:909
msgid ""
":class:`~fractions.Fraction` objects now support the standard :ref:`format "
"specification mini-language <formatspec>` rules for fill, alignment, sign "
"handling, minimum width, and grouping. (Contributed by Mark Dickinson in "
":gh:`111320`.)"
msgstr ""
"现在 :class:`~fractions.Fraction` 对象支持用于填充、对齐、正负号处理、最小宽度和分组的标准 :ref:`格式说明迷你语言 "
"<formatspec>` 规则。 （由 Mark Dickinson 在 :gh:`111320` 中贡献。）"

#: ../../whatsnew/3.13.rst:916
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.13.rst:918
msgid ""
"Add :func:`~glob.translate`, a function to convert a path specification with"
" shell-style wildcards to a regular expression. (Contributed by Barney Gale "
"in :gh:`72904`.)"
msgstr ""
"增加了 :func:`~glob.translate`，这是个用来将具有 shell 风格通配符的路径说明转换为正则表达式的函数。 （由 Barney "
"Gale 在 :gh:`72904` 中贡献。）"

#: ../../whatsnew/3.13.rst:924
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.13.rst:926
msgid ""
"The following functions in :mod:`importlib.resources` now allow accessing a "
"directory (or tree) of resources, using multiple positional arguments (the "
"*encoding* and *errors* arguments in the text-reading functions are now "
"keyword-only):"
msgstr ""
"现在 :mod:`importlib.resources` 中的下列函数允许访问资源目录（或树），并使用多个位置参数（现在文本读取函数中的 "
"*encoding* 和 *errors* 参数是仅限关键字参数）："

#: ../../whatsnew/3.13.rst:931
msgid ":func:`~importlib.resources.is_resource`"
msgstr ":func:`~importlib.resources.is_resource`"

#: ../../whatsnew/3.13.rst:932
msgid ":func:`~importlib.resources.open_binary`"
msgstr ":func:`~importlib.resources.open_binary`"

#: ../../whatsnew/3.13.rst:933
msgid ":func:`~importlib.resources.open_text`"
msgstr ":func:`~importlib.resources.open_text`"

#: ../../whatsnew/3.13.rst:934
msgid ":func:`~importlib.resources.path`"
msgstr ":func:`~importlib.resources.path`"

#: ../../whatsnew/3.13.rst:935
msgid ":func:`~importlib.resources.read_binary`"
msgstr ":func:`~importlib.resources.read_binary`"

#: ../../whatsnew/3.13.rst:936
msgid ":func:`~importlib.resources.read_text`"
msgstr ":func:`~importlib.resources.read_text`"

#: ../../whatsnew/3.13.rst:938
msgid ""
"These functions are no longer deprecated and are not scheduled for removal. "
"(Contributed by Petr Viktorin in :gh:`116608`.)"
msgstr "这些函数将不再被弃用也不会被加入移除计划。 （由 Petr Viktorin 在 :gh:`116608` 中贡献。）"

#: ../../whatsnew/3.13.rst:941
msgid ""
":func:`~importlib.resources.contents` remains deprecated in favor of the "
"fully-featured :class:`~importlib.resources.abc.Traversable` API. However, "
"there is now no plan to remove it. (Contributed by Petr Viktorin in "
":gh:`116608`.)"
msgstr ""
":func:`~importlib.resources.contents` 仍然被弃用而应改用功能完整的 "
":class:`~importlib.resources.abc.Traversable` API。 不过，目前还没有移除它的计划。 （由 Petr "
"Viktorin 在 :gh:`116608` 中贡献。）"

#: ../../whatsnew/3.13.rst:948
msgid "io"
msgstr "io"

#: ../../whatsnew/3.13.rst:950
msgid ""
"The :class:`~io.IOBase` finalizer now logs any errors raised by the "
":meth:`~io.IOBase.close` method with :data:`sys.unraisablehook`. Previously,"
" errors were ignored silently by default, and only logged in :ref:`Python "
"Development Mode <devmode>` or when using a :ref:`Python debug build <debug-"
"build>`. (Contributed by Victor Stinner in :gh:`62948`.)"
msgstr ""
"现在 :class:`~io.IOBase` 最终化器会使用 :data:`sys.unraisablehook` 来将由 "
":meth:`~io.IOBase.close` 方法引发的错误写入日志。 在之前版本中，错误在默认情况下会被静默地忽略，而只有在 "
":ref:`Python 开发模式 <devmode>` 或在使用 :ref:`Python 调试构建版 <debug-build>` "
"时才会被写入日志。 （由 Victor Stinner 在 :gh:`62948` 中贡献。）"

#: ../../whatsnew/3.13.rst:959
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.13.rst:961
msgid ""
"Add the :attr:`.IPv4Address.ipv6_mapped` property, which returns the "
"IPv4-mapped IPv6 address. (Contributed by Charles Machalow in :gh:`109466`.)"
msgstr ""
"增加了 :attr:`.IPv4Address.ipv6_mapped` 特征属性，它将返回映射 IPv4 的 IPv6 地址。 （由 Charles "
"Machalow 在 :gh:`109466` 中贡献。）"

#: ../../whatsnew/3.13.rst:965
msgid ""
"Fix ``is_global`` and ``is_private`` behavior in "
":class:`~ipaddress.IPv4Address`, :class:`~ipaddress.IPv6Address`, "
":class:`~ipaddress.IPv4Network`, and :class:`~ipaddress.IPv6Network`. "
"(Contributed by Jakub Stasiak in :gh:`113171`.)"
msgstr ""
"修正了 :class:`~ipaddress.IPv4Address`, :class:`~ipaddress.IPv6Address`, "
":class:`~ipaddress.IPv4Network` 和 :class:`~ipaddress.IPv6Network` 中 "
"``is_global`` 和 ``is_private`` 的行为。 （由 Jakub Stasiak 在 :gh:`113171` 中贡献。）"

#: ../../whatsnew/3.13.rst:972
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.13.rst:974
msgid ""
":func:`~itertools.batched` has a new *strict* parameter, which raises a "
":exc:`ValueError` if the final batch is shorter than the specified batch "
"size. (Contributed by Raymond Hettinger in :gh:`113202`.)"
msgstr ""
":func:`~itertools.batched` 新增了 *strict* 形参，它会在最后一批次数据小于指定批准大小时引发 "
":exc:`ValueError`。 （由 Raymond Hettinger 在 :gh:`113202` 中贡献。）"

#: ../../whatsnew/3.13.rst:981
msgid "marshal"
msgstr "marshal"

#: ../../whatsnew/3.13.rst:983
msgid ""
"Add the *allow_code* parameter in module functions. Passing "
"``allow_code=False`` prevents serialization and de-serialization of code "
"objects which are incompatible between Python versions. (Contributed by "
"Serhiy Storchaka in :gh:`113626`.)"
msgstr ""
"在模块函数中增加了 *allow_code* 形参。 传入 ``allow_code=False`` 将防止在 Python "
"各版本间不兼容的代码对象的序列化和反序列化。 （由 Serhiy Storchaka 在 :gh:`113626` 中贡献。）"

#: ../../whatsnew/3.13.rst:990
msgid "math"
msgstr "math"

#: ../../whatsnew/3.13.rst:992
msgid ""
"The new function :func:`~math.fma` performs fused multiply-add operations. "
"This computes ``x * y + z`` with only a single round, and so avoids any "
"intermediate loss of precision. It wraps the ``fma()`` function provided by "
"C99, and follows the specification of the IEEE 754 \"fusedMultiplyAdd\" "
"operation for special cases. (Contributed by Mark Dickinson and Victor "
"Stinner in :gh:`73468`.)"
msgstr ""
"新增函数 :func:`~math.fma` 可执行合并的乘法-加法运算。 此函数只需一轮操作即可计算 ``x * y + "
"z``，从而避免了任何中间步骤导致的精度损失。 它包装了 C99 所提供的 ``fma()`` 函数，并且遵从针对特殊情况的 IEEE 754 "
"\"fusedMultiplyAdd\" 运算规范。 （由 Mark Dickinson 和 Victor Stinner 在 :gh:`73468` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:1002
msgid "mimetypes"
msgstr "mimetypes"

#: ../../whatsnew/3.13.rst:1004
msgid ""
"Add the :func:`~mimetypes.guess_file_type` function to guess a MIME type "
"from a filesystem path. Using paths with :func:`~mimetypes.guess_type` is "
"now :term:`soft deprecated`. (Contributed by Serhiy Storchaka in "
":gh:`66543`.)"
msgstr ""
"增加了 :func:`~mimetypes.guess_file_type` 函数用于根据文件系统路径来猜测 MIME 类型。 在 "
":func:`~mimetypes.guess_type` 中使用路径的做法现在已是 :term:`soft deprecated`。 （由 "
"Serhiy Storchaka 在 :gh:`66543` 中贡献。）"

#: ../../whatsnew/3.13.rst:1011
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.13.rst:1013
msgid ""
":class:`~mmap.mmap` is now protected from crashing on Windows when the "
"mapped memory is inaccessible due to file system errors or access "
"violations. (Contributed by Jannis Weigend in :gh:`118209`.)"
msgstr ""
"现在 :class:`~mmap.mmap` 在 Windows 上当被映射的内存由于文件系统错误或访问限制而不可访问时将获得保护以避免崩溃。 （由 "
"Jannis Weigend 在 :gh:`118209` 中贡献。）"

#: ../../whatsnew/3.13.rst:1017
msgid ""
":class:`~mmap.mmap` has a new :meth:`~mmap.mmap.seekable` method that can be"
" used when a seekable file-like object is required. The "
":meth:`~mmap.mmap.seek` method now returns the new absolute position. "
"(Contributed by Donghee Na and Sylvie Liberman in :gh:`111835`.)"
msgstr ""
":class:`~mmap.mmap` 具有新的 :meth:`~mmap.mmap.seekable` 方法将在需要可定位的文件型对象时被使用。 现在"
" :meth:`~mmap.mmap.seek` 方法将返回一个新的绝对位置。 （由 Donghee Na 和 Sylvie Liberman 在 "
":gh:`111835` 中贡献。）"

#: ../../whatsnew/3.13.rst:1022
msgid ""
"The new UNIX-only *trackfd* parameter for :class:`~mmap.mmap` controls file "
"descriptor duplication; if false, the file descriptor specified by *fileno* "
"will not be duplicated. (Contributed by Zackery Spytz and Petr Viktorin in "
":gh:`78502`.)"
msgstr ""
":class:`~mmap.mmap` 新增了 UNIX 专属的 *trackfd* 形参用来控制文件描述符的复制；如为假值，则由 *fileno* "
"指定的文件描述符将不会被复制。 （由 Zackery Spytz 和 Petr Viktorin 在 :gh:`78502` 中贡献。）"

#: ../../whatsnew/3.13.rst:1029
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.13.rst:1037
msgid "os"
msgstr "os"

#: ../../whatsnew/3.13.rst:1039
msgid ""
"Add :func:`~os.process_cpu_count` function to get the number of logical CPU "
"cores usable by the calling thread of the current process. (Contributed by "
"Victor Stinner in :gh:`109649`.)"
msgstr ""
"增加了 :func:`~os.process_cpu_count` 函数用于获取当前进程的调用方线程可以使用的逻辑 CPU 核心数量。 （由 "
"Victor Stinner 在 :gh:`109649` 中贡献。）"

#: ../../whatsnew/3.13.rst:1043
msgid ""
":func:`~os.cpu_count` and :func:`~os.process_cpu_count` can be overridden "
"through the new environment variable :envvar:`PYTHON_CPU_COUNT` or the new "
"command-line option :option:`-X cpu_count <-X>`. This option is useful for "
"users who need to limit CPU resources of a container system without having "
"to modify application code or the container itself. (Contributed by Donghee "
"Na in :gh:`109595`.)"
msgstr ""
":func:`~os.cpu_count` 和 :func:`~os.process_cpu_count` 可通过新的环境变量 "
":envvar:`PYTHON_CPU_COUNT` 或新的命令行选项 :option:`-X cpu_count <-X>` 来覆盖。 "
"此选项对于需要在不修改应用程序代码或容器本身的情况下限制一个容器系统的 CPU 资源的用户会很有用处。 （由 Donghee Na 在 "
":gh:`109595` 中贡献。）"

#: ../../whatsnew/3.13.rst:1051
msgid ""
"Add a :ref:`low level interface <os-timerfd>` to Linux's :manpage:`timer "
"file descriptors <timerfd_create(2)>` via :func:`~os.timerfd_create`, "
":func:`~os.timerfd_settime`, :func:`~os.timerfd_settime_ns`, "
":func:`~os.timerfd_gettime`, :func:`~os.timerfd_gettime_ns`, "
":const:`~os.TFD_NONBLOCK`, :const:`~os.TFD_CLOEXEC`, "
":const:`~os.TFD_TIMER_ABSTIME`, and :const:`~os.TFD_TIMER_CANCEL_ON_SET` "
"(Contributed by Masaru Tsuchiyama in :gh:`108277`.)"
msgstr ""
"通过 :func:`~os.timerfd_create`, :func:`~os.timerfd_settime`, "
":func:`~os.timerfd_settime_ns`, :func:`~os.timerfd_gettime`, "
":func:`~os.timerfd_gettime_ns`, :const:`~os.TFD_NONBLOCK`, "
":const:`~os.TFD_CLOEXEC`, :const:`~os.TFD_TIMER_ABSTIME` 和 "
":const:`~os.TFD_TIMER_CANCEL_ON_SET` 增加了针对 Linux 的 :manpage:`计算器文件描述符 "
"<timerfd_create(2)>` 的 :ref:`低层级接口 <os-timerfd>`。 （由 Masaru Tsuchiyama 在 "
":gh:`108277` 中贡献。）"

#: ../../whatsnew/3.13.rst:1060
msgid ""
":func:`~os.lchmod` and the *follow_symlinks* argument of :func:`~os.chmod` "
"are both now available on Windows. Note that the default value of "
"*follow_symlinks* in :func:`!lchmod` is ``False`` on Windows. (Contributed "
"by Serhiy Storchaka in :gh:`59616`.)"
msgstr ""
"在 Windows 上现在同时增加了对 :func:`~os.lchmod` 和 :func:`~os.chmod` 的 "
"*follow_symlinks* 参数的支持。 请注意在 Windows 上 :func:`!lchmod` 中的 *follow_symlinks*"
" 的默认值为 ``False``。 （由 Serhiy Storchaka 在 :gh:`59616` 中贡献。）"

#: ../../whatsnew/3.13.rst:1066
msgid ""
":func:`~os.fchmod` and support for file descriptors in :func:`~os.chmod` are"
" both now available on Windows. (Contributed by Serhiy Storchaka in "
":gh:`113191`.)"
msgstr ""
"在 Windows 上现在同时增加了 :func:`~os.fchmod` 和对 :func:`~os.chmod` 中的文件描述符的支持。 （由 "
"Serhiy Storchaka 在 :gh:`113191` 中贡献。）"

#: ../../whatsnew/3.13.rst:1070
msgid ""
"On Windows, :func:`~os.mkdir` and :func:`~os.makedirs` now support passing a"
" *mode* value of ``0o700`` to apply access control to the new directory. "
"This implicitly affects :func:`tempfile.mkdtemp` and is a mitigation for "
":cve:`2024-4030`. Other values for *mode* continue to be ignored. "
"(Contributed by Steve Dower in :gh:`118486`.)"
msgstr ""
"在 Windows 上，:func:`~os.mkdir` 和 :func:`~os.makedirs` 现在支持传入 *mode* 值 "
"``0o700`` 以对新目录应用访问控制。 这会隐式地影响 :func:`tempfile.mkdtemp` 并可缓解 "
":cve:`2024-4030`。 其他的 *mode* 值仍然会被忽略。 （由 Steve Dower 在 :gh:`118486` 中贡献。）"

#: ../../whatsnew/3.13.rst:1077
msgid ""
":func:`~os.posix_spawn` now accepts ``None`` for the *env* argument, which "
"makes the newly spawned process use the current process environment. "
"(Contributed by Jakub Kulik in :gh:`113119`.)"
msgstr ""
"现在 :func:`~os.posix_spawn` 可接受 ``None`` 作为 *env* 参数，这将让新产生的进程使用当前进程的环境。 （由 "
"Jakub Kulik 在 :gh:`113119` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:1081
msgid ""
":func:`~os.posix_spawn` can now use the :const:`~os.POSIX_SPAWN_CLOSEFROM` "
"attribute in the *file_actions* parameter on platforms that support "
":c:func:`!posix_spawn_file_actions_addclosefrom_np`. (Contributed by Jakub "
"Kulik in :gh:`113117`.)"
msgstr ""
"在支持 :c:func:`!posix_spawn_file_actions_addclosefrom_np` 的平台上 "
":func:`~os.posix_spawn` 现在可以在 *file_actions* 形参中使用 "
":const:`~os.POSIX_SPAWN_CLOSEFROM` 属性。 （由 Jakub Kulik 在 :gh:`113117` 中贡献。）"

#: ../../whatsnew/3.13.rst:1088
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.13.rst:1090
msgid ""
"Add :func:`~os.path.isreserved` to check if a path is reserved on the "
"current system. This function is only available on Windows. (Contributed by "
"Barney Gale in :gh:`88569`.)"
msgstr ""
"增加了 :func:`~os.path.isreserved` 用于检查一个路径在当前系统中是否为保留路径。 此函数仅在 Windows 上可用。 （由"
" Barney Gale 在 :gh:`88569` 中贡献。）"

#: ../../whatsnew/3.13.rst:1095
msgid ""
"On Windows, :func:`~os.path.isabs` no longer considers paths starting with "
"exactly one slash (``\\`` or ``/``) to be absolute. (Contributed by Barney "
"Gale and Jon Foster in :gh:`44626`.)"
msgstr ""
"在 Windows 上，:func:`~os.path.isabs` 将不再把以恰好一个斜杠 (``\\`` 或 ``/``) 开头的路径视为绝对路径。"
" （由 Barney Gale 和 Jon Foster 在 :gh:`44626` 中贡献。）"

#: ../../whatsnew/3.13.rst:1099
msgid ""
":func:`~os.path.realpath` now resolves MS-DOS style file names even if the "
"file is not accessible. (Contributed by Moonsik Park in :gh:`82367`.)"
msgstr ""
"现在即使文件不可访问 :func:`~os.path.realpath` 也能够解析 MS-DOS 风格的文件名。 （由 Moonsik Park 在 "
":gh:`82367` 中贡献。）"

#: ../../whatsnew/3.13.rst:1105 ../../whatsnew/3.13.rst:1736
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.13.rst:1107
msgid ""
"Add :exc:`~pathlib.UnsupportedOperation`, which is raised instead of "
":exc:`NotImplementedError` when a path operation isn't supported. "
"(Contributed by Barney Gale in :gh:`89812`.)"
msgstr ""
"增加了 :exc:`~pathlib.UnsupportedOperation`，它会在一个路径操作不受支持时代替 "
":exc:`NotImplementedError` 被引发。 （由 Barney Gale 在 :gh:`89812` 中贡献。）"

#: ../../whatsnew/3.13.rst:1111
msgid ""
"Add a new constructor for creating :class:`~pathlib.Path` objects from "
"'file' URIs (``file:///``), :meth:`.Path.from_uri`. (Contributed by Barney "
"Gale in :gh:`107465`.)"
msgstr ""
"新增了一个用于根据 'file' URI (``file:///``) 来创建 :class:`~pathlib.Path` 对象的构造器 "
":meth:`.Path.from_uri`。 （由 Barney Gale 在 :gh:`107465` 中贡献。）"

#: ../../whatsnew/3.13.rst:1115
msgid ""
"Add :meth:`.PurePath.full_match` for matching paths with shell-style "
"wildcards, including the recursive wildcard \"``**``\". (Contributed by "
"Barney Gale in :gh:`73435`.)"
msgstr ""
"增加了 :meth:`.PurePath.full_match` 用于匹配带有 shell 风格通配符的路径，包括递归通配符 \"``**``\"。 "
"（由 Barney Gale 在 :gh:`73435` 中贡献。）"

#: ../../whatsnew/3.13.rst:1119
msgid ""
"Add the :attr:`.PurePath.parser` class attribute to store the implementation"
" of :mod:`os.path` used for low-level path parsing and joining. This will be"
" either :mod:`!posixpath` or :mod:`!ntpath`."
msgstr ""
"增加了 :attr:`.PurePath.parser` 类属性以存储用于低层级路径解析与合并的 :mod:`os.path` 实现。 这可以是 "
":mod:`!posixpath` 或 :mod:`!ntpath`。"

#: ../../whatsnew/3.13.rst:1124
msgid ""
"Add *recurse_symlinks* keyword-only argument to :meth:`.Path.glob` and "
":meth:`~pathlib.Path.rglob`. (Contributed by Barney Gale in :gh:`77609`.)"
msgstr ""
"为 :meth:`.Path.glob` 和 :meth:`~pathlib.Path.rglob` 增加了 *recurse_symlinks* "
"仅限关键字参数。 （由 Barney Gale 在 :gh:`77609` 中贡献。）"

#: ../../whatsnew/3.13.rst:1128
msgid ""
":meth:`.Path.glob` and :meth:`~pathlib.Path.rglob` now return files and "
"directories when given a pattern that ends with \"``**``\". Previously, only"
" directories were returned. (Contributed by Barney Gale in :gh:`70303`.)"
msgstr ""
"现在当给出以 \"``**``\" 结束的模式时 :meth:`.Path.glob` 和 :meth:`~pathlib.Path.rglob` "
"将返回文件和目录。 在之前版本中，仅会返回目录。 （由 Barney Gale 在 :gh:`70303` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:1133
msgid ""
"Add the *follow_symlinks* keyword-only argument to :meth:`Path.is_file "
"<pathlib.Path.is_file>`, :meth:`Path.is_dir <pathlib.Path.is_dir>`, "
":meth:`.Path.owner`, and :meth:`.Path.group`. (Contributed by Barney Gale in"
" :gh:`105793` and Kamil Turek in :gh:`107962`.)"
msgstr ""
"为 :meth:`Path.is_file <pathlib.Path.is_file>`, :meth:`Path.is_dir "
"<pathlib.Path.is_dir>`, :meth:`.Path.owner` 和 :meth:`.Path.group` 增加了 "
"*follow_symlinks* 仅限关键字参数。 （由 Barney Gale 在 :gh:`105793` 中，以及 Kamil Turek 在 "
":gh:`107962` 中贡献。）"

#: ../../whatsnew/3.13.rst:1141
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.13.rst:1143
msgid ""
":func:`breakpoint` and :func:`~pdb.set_trace` now enter the debugger "
"immediately rather than on the next line of code to be executed. This change"
" prevents the debugger from breaking outside of the context when "
":func:`!breakpoint` is positioned at the end of the context. (Contributed by"
" Tian Gao in :gh:`118579`.)"
msgstr ""
"现在 :func:`breakpoint` 和 :func:`~pdb.set_trace` 会立即进入调试器而不是在被执行代码的下一行进入。 "
"这一更改可防止当 :func:`!breakpoint` 位于上下文末尾 时调试器在上下文以外被中断。 （由 Tian Gao 在 "
":gh:`118579` 中贡献。）"

#: ../../whatsnew/3.13.rst:1149
msgid ""
"``sys.path[0]`` is no longer replaced by the directory of the script being "
"debugged when :attr:`sys.flags.safe_path` is set. (Contributed by Tian Gao "
"and Christian Walther in :gh:`111762`.)"
msgstr ""
"当设置了 :attr:`sys.flags.safe_path` 时 ``sys.path[0]`` 将不会再被替换为被调试脚本的目录。 （由 Tian"
" Gao 和 Christian Walther 在 :gh:`111762` 中贡献。）"

#: ../../whatsnew/3.13.rst:1153
msgid ""
":mod:`zipapp` is now supported as a debugging target. (Contributed by Tian "
"Gao in :gh:`118501`.)"
msgstr "现在支持将 :mod:`zipapp` 作为调试目标。 （由 Tian Gao 在 :gh:`118501` 中贡献。）"

#: ../../whatsnew/3.13.rst:1156
msgid ""
"Add ability to move between chained exceptions during post-mortem debugging "
"in :func:`~pdb.pm` using the new :pdbcmd:`exceptions [exc_number] "
"<exceptions>` command for Pdb. (Contributed by Matthias Bussonnier in "
":gh:`106676`.)"
msgstr ""
"添加了在 :func:`~pdb.pm` 中进行事后调试期间使用 Pdb 新增的 :pdbcmd:`exceptions [exc_number] "
"<exceptions>` 命令在串连的异常之间移动的能力。 （由 Matthias Bussonnier 在 :gh:`106676` 中贡献。）"

#: ../../whatsnew/3.13.rst:1161
msgid ""
"Expressions and statements whose prefix is a pdb command are now correctly "
"identified and executed. (Contributed by Tian Gao in :gh:`108464`.)"
msgstr "以一条 pdb 命令打头的表达式和语句现在会被正确地标识并执行。 （由 Tian Gao 在 :gh:`108464` 中贡献。）"

#: ../../whatsnew/3.13.rst:1167
msgid "queue"
msgstr "queue"

#: ../../whatsnew/3.13.rst:1169
msgid ""
"Add :meth:`Queue.shutdown <queue.Queue.shutdown>` and :exc:`~queue.ShutDown`"
" to manage queue termination. (Contributed by Laurie Opperman and Yves "
"Duprat in :gh:`104750`.)"
msgstr ""
"增加了 :meth:`Queue.shutdown <queue.Queue.shutdown>` 和 :exc:`~queue.ShutDown` "
"用于管理队列的终结。 （由 Laurie Opperman 和 Yves Duprat 在 :gh:`104750` 中贡献。）"

#: ../../whatsnew/3.13.rst:1175
msgid "random"
msgstr "random"

#: ../../whatsnew/3.13.rst:1177
msgid ""
"Add a :ref:`command-line interface <random-cli>`. (Contributed by Hugo van "
"Kemenade in :gh:`118131`.)"
msgstr ""
"增加了一个 :ref:`命令行接口 <random-cli>`。 （由 Hugo van Kemenade 在 :gh:`118131` 中贡献。）"

#: ../../whatsnew/3.13.rst:1182 ../../whatsnew/3.13.rst:1744
msgid "re"
msgstr "re"

#: ../../whatsnew/3.13.rst:1184
msgid ""
"Rename :exc:`!re.error` to :exc:`~re.PatternError` for improved clarity. "
":exc:`!re.error` is kept for backward compatibility."
msgstr ""
"将 :exc:`!re.error` 重命名为 :exc:`~re.PatternError` 以改善准确性。 :exc:`!re.error` "
"仍被保留用于向下兼容。"

#: ../../whatsnew/3.13.rst:1189
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.13.rst:1191
msgid ""
"Support the *dir_fd* and *follow_symlinks* keyword arguments in "
":func:`~shutil.chown`. (Contributed by Berker Peksag and Tahia K in "
":gh:`62308`)"
msgstr ""
"在 :func:`~shutil.chown` 中增加了对 *dir_fd* 和 *follow_symlinks* 关键字参数的支持。 （由 "
"Berker Peksag 和 Tahia K 在 :gh:`62308` 中贡献。）"

#: ../../whatsnew/3.13.rst:1197
msgid "site"
msgstr "site"

#: ../../whatsnew/3.13.rst:1199
msgid ""
":file:`.pth` files are now decoded using UTF-8 first, and then with the "
":term:`locale encoding` if UTF-8 decoding fails. (Contributed by Inada Naoki"
" in :gh:`117802`.)"
msgstr ""
"现在 :file:`.pth` 文件将先使用 UTF-8 来解码，如果 UTF-8 解码失败再使用 :term:`locale encoding`。 "
"（由 Inada Naoki 在 :gh:`117802` 中贡献。）"

#: ../../whatsnew/3.13.rst:1205
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.13.rst:1207
msgid ""
"A :exc:`ResourceWarning` is now emitted if a :class:`~sqlite3.Connection` "
"object is not :meth:`closed <sqlite3.Connection.close>` explicitly. "
"(Contributed by Erlend E. Aasland in :gh:`105539`.)"
msgstr ""
"现在当一个 :class:`~sqlite3.Connection` 对象未被显式地 :meth:`关闭 "
"<sqlite3.Connection.close>` 时将发出 :exc:`ResourceWarning`。 （由 Erlend E. "
"Aasland 在 :gh:`105539` 中贡献。）"

#: ../../whatsnew/3.13.rst:1211
msgid ""
"Add the *filter* keyword-only parameter to :meth:`.Connection.iterdump` for "
"filtering database objects to dump. (Contributed by Mariusz Felisiak in "
":gh:`91602`.)"
msgstr ""
"为 :meth:`.Connection.iterdump` 增加了 *filter* 仅限关键字形参用于过滤要转储的数据库对象。 （由 Mariusz"
" Felisiak 在 :gh:`91602` 中贡献。）"

#: ../../whatsnew/3.13.rst:1217
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.13.rst:1219
msgid ""
"The :func:`~ssl.create_default_context` API now includes "
":data:`~ssl.VERIFY_X509_PARTIAL_CHAIN` and :data:`~ssl.VERIFY_X509_STRICT` "
"in its default flags."
msgstr ""
"现在 :func:`~ssl.create_default_context` API 将在其默认旗标中包括 "
":data:`~ssl.VERIFY_X509_PARTIAL_CHAIN` 和 :data:`~ssl.VERIFY_X509_STRICT`。"

#: ../../whatsnew/3.13.rst:1225
msgid ""
":data:`~ssl.VERIFY_X509_STRICT` may reject pre-:rfc:`5280` or malformed "
"certificates that the underlying OpenSSL implementation might otherwise "
"accept. Whilst disabling this is not recommended, you can do so using:"
msgstr ""
":data:`~ssl.VERIFY_X509_STRICT` 可能会拒绝下层 OpenSSL 实现本来会接受的 :rfc:`5280` "
"以前的证书或格式错误的证书。 虽然不建议禁用此功能，但你可以使用以下方式禁用它："

#: ../../whatsnew/3.13.rst:1230
msgid ""
"import ssl\n"
"\n"
"ctx = ssl.create_default_context()\n"
"ctx.verify_flags &= ~ssl.VERIFY_X509_STRICT"
msgstr ""
"import ssl\n"
"\n"
"ctx = ssl.create_default_context()\n"
"ctx.verify_flags &= ~ssl.VERIFY_X509_STRICT"

#: ../../whatsnew/3.13.rst:1237
msgid "(Contributed by William Woodruff in :gh:`112389`.)"
msgstr "（由 William Woodruff 在 :gh:`112389` 贡献。）"

#: ../../whatsnew/3.13.rst:1241
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.13.rst:1243
msgid ""
"Add :func:`~statistics.kde` for kernel density estimation. This makes it "
"possible to estimate a continuous probability density function from a fixed "
"number of discrete samples. (Contributed by Raymond Hettinger in "
":gh:`115863`.)"
msgstr ""
"增加了用于核密度估计的 :func:`~statistics.kde`。 这使得根据固定数量的离散样本估计连续概率密度函数成为可能。 （由 "
"Raymond Hettinger 在 :gh:`115863` 中贡献。）"

#: ../../whatsnew/3.13.rst:1248
msgid ""
"Add :func:`~statistics.kde_random` for sampling from an estimated "
"probability density function created by :func:`~statistics.kde`. "
"(Contributed by Raymond Hettinger in :gh:`115863`.)"
msgstr ""
"增加了 :func:`~statistics.kde_random` 用来从 :func:`~statistics.kde` "
"创建的估计概率密度函数进行取样。 （由 Hettinger 在 :gh:`115863` 中贡献。）"

#: ../../whatsnew/3.13.rst:1256
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.13.rst:1258
msgid ""
"The :mod:`subprocess` module now uses the :func:`~os.posix_spawn` function "
"in more situations."
msgstr "现在 :mod:`subprocess` 模块会在更多场合下使用 :func:`~os.posix_spawn` 函数。"

#: ../../whatsnew/3.13.rst:1261
msgid ""
"Notably, when *close_fds* is ``True`` (the default), :func:`~os.posix_spawn`"
" will be used when the C library provides "
":c:func:`!posix_spawn_file_actions_addclosefrom_np`, which includes recent "
"versions of Linux, FreeBSD, and Solaris. On Linux, this should perform "
"similarly to the existing Linux :c:func:`!vfork` based code."
msgstr ""
"需要注意的是，当 *close_fds* 为 ``True`` 时（默认值），则将在 C 库提供了 "
":c:func:`!posix_spawn_file_actions_addclosefrom_np` 时使用 "
":func:`~os.posix_spawn`，这包括近期的 Linux, FreeBSD 和 Solaris 版本。 在 "
"Linux，其性能应当与现有的 Linux :c:func:`!vfork` 基础代码类似。"

#: ../../whatsnew/3.13.rst:1268
msgid ""
"A private control knob :attr:`!subprocess._USE_POSIX_SPAWN` can be set to "
"``False`` if you need to force :mod:`subprocess` to never use "
":func:`~os.posix_spawn`. Please report your reason and platform details in "
"the :ref:`issue tracker <using-the-tracker>` if you set this so that we can "
"improve our API selection logic for everyone. (Contributed by Jakub Kulik in"
" :gh:`113117`.)"
msgstr ""
"如果你需要强制 :mod:`subprocess` 绝不使用 :func:`~os.posix_spawn` 可以将私有的控制节点 "
":attr:`!subprocess._USE_POSIX_SPAWN` 设为 ``False``。 如果你这样设置的话请在 :ref:`issue "
"tracker <using-the-tracker>` 中报告你的理由和平台相关的细节以便我们能够为大家改进 API 的选择逻辑。 （由 Jakub "
"Kulik 在 :gh:`113117` 中贡献。）"

#: ../../whatsnew/3.13.rst:1278
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.13.rst:1280
msgid ""
"Add the :func:`~sys._is_interned` function to test if a string was interned."
" This function is not guaranteed to exist in all implementations of Python. "
"(Contributed by Serhiy Storchaka in :gh:`78573`.)"
msgstr ""
"增加了 :func:`~sys._is_interned` 函数用于检测字符串是否被内部化。 此函数不保证在所有的 Python 实现中均存在。 （由 "
"Serhiy Storchaka 在 :gh:`78573` 中贡献。）"

#: ../../whatsnew/3.13.rst:1286
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.13.rst:1288
msgid ""
"On Windows, the default mode ``0o700`` used by :func:`tempfile.mkdtemp` now "
"limits access to the new directory due to changes to :func:`os.mkdir`. This "
"is a mitigation for :cve:`2024-4030`. (Contributed by Steve Dower in "
":gh:`118486`.)"
msgstr ""
"在 Windows 上，:func:`tempfile.mkdtemp` 所使用的默认模式 ``0o700`` 由于 :func:`os.mkdir` "
"的更改现在将限制对新目录的访问。 这是对 :cve:`2024-4030` 的缓解措施。 （由 Steve Dower 在 :gh:`118486` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:1295
msgid "time"
msgstr "time"

#: ../../whatsnew/3.13.rst:1297
msgid ""
"On Windows, :func:`~time.monotonic` now uses the "
"``QueryPerformanceCounter()`` clock for a resolution of 1 microsecond, "
"instead of the ``GetTickCount64()`` clock which has a resolution of 15.6 "
"milliseconds. (Contributed by Victor Stinner in :gh:`88494`.)"
msgstr ""
"在 Windows 上，:func:`~time.monotonic` 现在将使用精度为 1 微秒的 "
"``QueryPerformanceCounter()`` 时钟，而不是精度只有 15.6 毫秒的 ``GetTickCount64()`` 时钟。 "
"（由 Victor Stinner 在 :gh:`88494` 中贡献。）"

#: ../../whatsnew/3.13.rst:1303
msgid ""
"On Windows, :func:`~time.time` now uses the "
"``GetSystemTimePreciseAsFileTime()`` clock for a resolution of 1 "
"microsecond, instead of the ``GetSystemTimeAsFileTime()`` clock which has a "
"resolution of 15.6 milliseconds. (Contributed by Victor Stinner in "
":gh:`63207`.)"
msgstr ""
"在 Windows 上，:func:`~time.time` 现在将使用精度为 1 微秒的 "
"``GetSystemTimePreciseAsFileTime()`` 时钟，代替精度为 15.6 毫秒的 "
"``GetSystemTimeAsFileTime()`` 时钟。 （由 Victor Stinner 在 :gh:`63207` 中贡献。）"

#: ../../whatsnew/3.13.rst:1311
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.13.rst:1313
msgid ""
"Add :mod:`tkinter` widget methods: :meth:`!tk_busy_hold`, "
":meth:`!tk_busy_configure`, :meth:`!tk_busy_cget`, :meth:`!tk_busy_forget`, "
":meth:`!tk_busy_current`, and :meth:`!tk_busy_status`. (Contributed by "
"Miguel, klappnase and Serhiy Storchaka in :gh:`72684`.)"
msgstr ""
"增加了 :mod:`tkinter` 控件方法: :meth:`!tk_busy_hold`, :meth:`!tk_busy_configure`, "
":meth:`!tk_busy_cget`, :meth:`!tk_busy_forget`, :meth:`!tk_busy_current` 和 "
":meth:`!tk_busy_status`。 （由 Miguel, klappnase 和 Serhiy Storchaka 在 "
":gh:`72684` 中贡献。）"

#: ../../whatsnew/3.13.rst:1319
msgid ""
"The :mod:`tkinter` widget method :meth:`!wm_attributes` now accepts the "
"attribute name without the minus prefix to get window attributes, for "
"example ``w.wm_attributes('alpha')`` and allows specifying attributes and "
"values to set as keyword arguments, for example "
"``w.wm_attributes(alpha=0.5)``. (Contributed by Serhiy Storchaka in "
":gh:`43457`.)"
msgstr ""
"现在 :mod:`tkinter` 控件 :meth:`!wm_attributes` 接受不带负号前缀的属性名称来获取窗口属性，例如 "
"``w.wm_attributes('alpha')`` 并允许指定属性和值以关键字参数形式来设置，例如 "
"``w.wm_attributes(alpha=0.5)``。 （由 Serhiy Storchaka 在 :gh:`43457` 中贡献。）"

#: ../../whatsnew/3.13.rst:1326
msgid ""
":meth:`!wm_attributes` can now return attributes as a :class:`dict`, by "
"using the new optional keyword-only parameter *return_python_dict*. "
"(Contributed by Serhiy Storchaka in :gh:`43457`.)"
msgstr ""
"通过使用新的可选关键字形参 *return_python_dict*，现在 :meth:`!wm_attributes` 可将属性作为 "
":class:`dict` 返回。 （由 Serhiy Storchaka 在 :gh:`43457` 中贡献。）"

#: ../../whatsnew/3.13.rst:1330
msgid ""
":meth:`!Text.count` can now return a simple :class:`int` when the new "
"optional keyword-only parameter *return_ints* is used. Otherwise, the single"
" count is returned as a 1-tuple or ``None``. (Contributed by Serhiy "
"Storchaka in :gh:`97928`.)"
msgstr ""
"现在当使用新的可选仅限关键字形参 *return_ints* 时 :meth:`!Text.count` 可以返回一个简单的 :class:`int`。"
" 在其他情况下，将以 1 个元素的元组形式返回单个计数值或者 ``None``。 （由 Serhiy Storchaka 在 :gh:`97928` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:1335
msgid ""
"Support the \"vsapi\" element type in the "
":meth:`~tkinter.ttk.Style.element_create` method of "
":class:`tkinter.ttk.Style`. (Contributed by Serhiy Storchaka in "
":gh:`68166`.)"
msgstr ""
"在 :class:`tkinter.ttk.Style` 的 :meth:`~tkinter.ttk.Style.element_create` "
"方法中增加了对 \"vsapi\" 元素类型的支持。 （由 Serhiy Storchaka 在 :gh:`68166` 中贡献。）"

#: ../../whatsnew/3.13.rst:1340
msgid ""
"Add the :meth:`!after_info` method for Tkinter widgets. (Contributed by "
"Cheryl Sabella in :gh:`77020`.)"
msgstr ""
"为 Tkinter 的控件增加了 :meth:`!after_info` 方法。 （由 Cheryl Sabella 在 :gh:`77020` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:1343
msgid ""
"Add a new :meth:`!copy_replace` method to :class:`!PhotoImage` to copy a "
"region from one image to another, possibly with pixel zooming, subsampling, "
"or both. (Contributed by Serhiy Storchaka in :gh:`118225`.)"
msgstr ""
"为 :class:`!PhotoImage` 新增 :meth:`!copy_replace` "
"方法用于将一个图像的某个区域拷贝到另一个图像，可能带有像素缩放、子采样，或两者皆有。 （由 Serhiy Storchaka 在 "
":gh:`118225` 中贡献。）"

#: ../../whatsnew/3.13.rst:1348
msgid ""
"Add *from_coords* parameter to the :class:`!PhotoImage` methods "
":meth:`!copy`, :meth:`!zoom` and :meth:`!subsample`. Add *zoom* and "
"*subsample* parameters to the :class:`!PhotoImage` method :meth:`!copy`. "
"(Contributed by Serhiy Storchaka in :gh:`118225`.)"
msgstr ""
"为 :class:`!PhotoImage` 的方法 :meth:`!copy`, :meth:`!zoom` 和 :meth:`!subsample`"
" 增加了 *from_coords* 形参。 为 :class:`!PhotoImage` 的方法 :meth:`!copy` 增加了 *zoom* 和"
" *subsample* 形参。 （由 Serhiy Storchaka 在 :gh:`118225` 中贡献。）"

#: ../../whatsnew/3.13.rst:1354
msgid ""
"Add the :class:`!PhotoImage` methods :meth:`!read` to read an image from a "
"file and :meth:`!data` to get the image data. Add *background* and "
"*grayscale* parameters to the :meth:`!write` method. (Contributed by Serhiy "
"Storchaka in :gh:`118271`.)"
msgstr ""
"增加了 :class:`!PhotoImage` 方法 :meth:`!read` 用于从文件读取图像以及 :meth:`!data` "
"用于获取图像数据。 为 :meth:`!write` 方法增加了 *background* 和 *grayscale* 形参。 （由 Serhiy "
"Storchaka 在 :gh:`118271` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:1362
msgid "traceback"
msgstr "traceback"

#: ../../whatsnew/3.13.rst:1364
msgid ""
"Add the :attr:`~traceback.TracebackException.exc_type_str` attribute to "
":class:`~traceback.TracebackException`, which holds a string display of the "
"*exc_type*. Deprecate the :attr:`~traceback.TracebackException.exc_type` "
"attribute, which holds the type object itself. Add parameter *save_exc_type*"
" (default ``True``) to indicate whether ``exc_type`` should be saved. "
"(Contributed by Irit Katriel in :gh:`112332`.)"
msgstr ""
"为 :class:`~traceback.TracebackException` 增加了 "
":attr:`~traceback.TracebackException.exc_type_str` 属性，它用于保存 *exc_type* "
"字符串表示。 弃用了 :attr:`~traceback.TracebackException.exc_type` 属性，它用于保存类型对象本身。 "
"增加了 *save_exc_type* 形参 (默认值为 ``True``) 用于指明 ``exc_type`` 是否应当被保存。 （由 Irit "
"Katriel 在 :gh:`112332` 中贡献。）"

#: ../../whatsnew/3.13.rst:1373
msgid ""
"Add a new *show_group* keyword-only parameter to "
":meth:`.TracebackException.format_exception_only` to (recursively) format "
"the nested exceptions of a :exc:`BaseExceptionGroup` instance. (Contributed "
"by Irit Katriel in :gh:`105292`.)"
msgstr ""
"为 :meth:`.TracebackException.format_exception_only` 增加了新的 *show_group* "
"仅限关键字形参用于（递归地）格式化 :exc:`BaseExceptionGroup` 实例中嵌套的异常。 （由 Irit Katriel 在 "
":gh:`105292` 中贡献。）"

#: ../../whatsnew/3.13.rst:1380
msgid "types"
msgstr "types"

#: ../../whatsnew/3.13.rst:1382
msgid ""
":class:`~types.SimpleNamespace` can now take a single positional argument to"
" initialise the namespace's arguments. This argument must either be a "
"mapping or an iterable of key-value pairs. (Contributed by Serhiy Storchaka "
"in :gh:`108191`.)"
msgstr ""
"现在 :class:`~types.SimpleNamespace` 可以接受单个位置参数来初始化命名空间的各个参数值。 "
"该参数必须为映射或键值对的可迭代对象。 （由 Serhiy Storchaka 在 :gh:`108191` 中贡献。）"

#: ../../whatsnew/3.13.rst:1389 ../../whatsnew/3.13.rst:1769
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.13.rst:1391
msgid ""
":pep:`705`: Add :data:`~typing.ReadOnly`, a special typing construct to mark"
" a :class:`~typing.TypedDict` item as read-only for type checkers."
msgstr ""
":pep:`705`: 增加 :data:`~typing.ReadOnly`，一个针对类型检查器的特殊类型结构，用于将 "
":class:`~typing.TypedDict` 的项标记为只读。"

#: ../../whatsnew/3.13.rst:1394
msgid ""
":pep:`742`: Add :data:`~typing.TypeIs`, a typing construct that can be used "
"to instruct a type checker how to narrow a type."
msgstr ":pep:`742`: 增加 :data:`~typing.TypeIs`，一个可被用于指示类型检查器如何细化类型的类型结构。"

#: ../../whatsnew/3.13.rst:1397
msgid ""
"Add :data:`~typing.NoDefault`, a sentinel object used to represent the "
"defaults of some parameters in the :mod:`typing` module. (Contributed by "
"Jelle Zijlstra in :gh:`116126`.)"
msgstr ""
"增加 :data:`~typing.NoDefault`，一个用于代表 :mod:`typing` 模块中某些形参的默认值的哨兵对象。 （由 Jelle"
" Zijlstra 在 :gh:`116126` 中贡献。）"

#: ../../whatsnew/3.13.rst:1401
msgid ""
"Add :func:`~typing.get_protocol_members` to return the set of members "
"defining a :class:`typing.Protocol`. (Contributed by Jelle Zijlstra in "
":gh:`104873`.)"
msgstr ""
"增加 :func:`~typing.get_protocol_members` 用于返回定义一个 :class:`typing.Protocol` "
"的成员的集合。 （由 Jelle Zijlstra 在 :gh:`104873` 中贡献。）"

#: ../../whatsnew/3.13.rst:1405
msgid ""
"Add :func:`~typing.is_protocol` to check whether a class is a "
":class:`~typing.Protocol`. (Contributed by Jelle Zijlstra in :gh:`104873`.)"
msgstr ""
"增加 :func:`~typing.is_protocol` 用于检查一个类是否属于 :class:`~typing.Protocol`。 （由 "
"Jelle Zijlstra 在 :gh:`104873` 中贡献。）"

#: ../../whatsnew/3.13.rst:1409
msgid ""
":data:`~typing.ClassVar` can now be nested in :data:`~typing.Final`, and "
"vice versa. (Contributed by Mehdi Drissi in :gh:`89547`.)"
msgstr ""
"现在 :data:`~typing.ClassVar` 可以被嵌套在 :data:`~typing.Final` 中，反之亦然。 （由 Mehdi "
"Drissi 在 :gh:`89547` 中贡献。）"

#: ../../whatsnew/3.13.rst:1415
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.13.rst:1417
msgid ""
"Update the Unicode database to `version 15.1.0`__. (Contributed by James "
"Gerity in :gh:`109559`.)"
msgstr "将 Unicode 数据库更新到 `15.1.0 版`__。 （由 James Gerity 在 :gh:`109559` 中贡献。）"

#: ../../whatsnew/3.13.rst:1424
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.13.rst:1426
msgid ""
"Add support for creating source control management (SCM) ignore files in a "
"virtual environment's directory. By default, Git is supported. This is "
"implemented as opt-in via the API, which can be extended to support other "
"SCMs (:class:`~venv.EnvBuilder` and :func:`~venv.create`), and opt-out via "
"the CLI, using :option:`!--without-scm-ignore-files`. (Contributed by Brett "
"Cannon in :gh:`108125`.)"
msgstr ""
"增加了对在虚拟环境目录中添加源码控制管理 (SCM) 忽略文件的支持。 在默认情况下，Git 已受到支持。 此特性是以可被扩展为支持其他 SCM 的通过"
" API 选择启用 (:class:`~venv.EnvBuilder` 和 :func:`~venv.create`)，并通过 CLI 使用 "
":option:`!--without-scm-ignore-files`  选择禁用的方式实现的。 （由 Brett Cannon 在 "
":gh:`108125` 中贡献。）"

#: ../../whatsnew/3.13.rst:1437
msgid "warnings"
msgstr "warnings"

#: ../../whatsnew/3.13.rst:1439
msgid ""
":pep:`702`: The new :func:`warnings.deprecated` decorator provides a way to "
"communicate deprecations to a :term:`static type checker` and to warn on "
"usage of deprecated classes and functions. A :exc:`DeprecationWarning` may "
"also be emitted when a decorated function or class is used at runtime. "
"(Contributed by Jelle Zijlstra in :gh:`104003`.)"
msgstr ""
":pep:`702`: 新的 :func:`warnings.deprecated` 装饰器提供了一种将弃用消息传送给 :term:`static "
"type checker` 并在使用已弃用的类和函数时发出警告的方式。 当被装饰的函数或类在运行时被使用时也可以发出 "
":exc:`DeprecationWarning`。 （由 Jelle Zijlstra 在 :gh:`104003` 中贡献。）"

#: ../../whatsnew/3.13.rst:1448
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.13.rst:1450
msgid ""
"Allow controlling Expat >=2.6.0 reparse deferral (:cve:`2023-52425`) by "
"adding five new methods:"
msgstr "通过添加五个新方法来允许控制 Expat >=2.6.0 重解析延迟 (:cve:`2023-52425`)："

#: ../../whatsnew/3.13.rst:1453
msgid ":meth:`xml.etree.ElementTree.XMLParser.flush`"
msgstr ":meth:`xml.etree.ElementTree.XMLParser.flush`"

#: ../../whatsnew/3.13.rst:1454
msgid ":meth:`xml.etree.ElementTree.XMLPullParser.flush`"
msgstr ":meth:`xml.etree.ElementTree.XMLPullParser.flush`"

#: ../../whatsnew/3.13.rst:1455
msgid ":meth:`xml.parsers.expat.xmlparser.GetReparseDeferralEnabled`"
msgstr ":meth:`xml.parsers.expat.xmlparser.GetReparseDeferralEnabled`"

#: ../../whatsnew/3.13.rst:1456
msgid ":meth:`xml.parsers.expat.xmlparser.SetReparseDeferralEnabled`"
msgstr ":meth:`xml.parsers.expat.xmlparser.SetReparseDeferralEnabled`"

#: ../../whatsnew/3.13.rst:1457
msgid ":meth:`!xml.sax.expatreader.ExpatParser.flush`"
msgstr ":meth:`!xml.sax.expatreader.ExpatParser.flush`"

#: ../../whatsnew/3.13.rst:1459
msgid "(Contributed by Sebastian Pipping in :gh:`115623`.)"
msgstr "（由 Sebastian Pipping 在 :gh:`115623` 中贡献。）"

#: ../../whatsnew/3.13.rst:1461
msgid ""
"Add the :meth:`!close` method for the iterator returned by "
":func:`~xml.etree.ElementTree.iterparse` for explicit cleanup. (Contributed "
"by Serhiy Storchaka in :gh:`69893`.)"
msgstr ""
"为 :func:`~xml.etree.ElementTree.iterparse` 所返回的迭代器增加了 :meth:`!close` "
"方法用于执行显式的清理。 （由 Serhiy Storchaka 在 :gh:`69893` 中贡献。）"

#: ../../whatsnew/3.13.rst:1467
msgid "zipimport"
msgstr "zipimport"

#: ../../whatsnew/3.13.rst:1469
msgid ""
"Add support for ZIP64_ format files. Everybody loves huge data, right? "
"(Contributed by Tim Hatch in :gh:`94146`.)"
msgstr ""
"增加了对 ZIP64_ 格式的文件的支持。 大家都喜欢更庞大的数据，对吧？ （由 Tim Hatch 在 :gh:`94146` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:1477
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.13.rst:1479
msgid ""
"Several standard library modules have had their import times significantly "
"improved. For example, the import time of the :mod:`typing` module has been "
"reduced by around a third by removing dependencies on :mod:`re` and "
":mod:`contextlib`. Other modules to enjoy import-time speedups include "
":mod:`email.utils`, :mod:`enum`, :mod:`functools`, "
":mod:`importlib.metadata`, and :mod:`threading`. (Contributed by Alex "
"Waygood, Shantanu Jain, Adam Turner, Daniel Hollas, and others in "
":gh:`109653`.)"
msgstr ""
"一些标准库模块的导入时间得到了显著改善。 例如，:mod:`typing` 模块的导入时间通过移除对 :mod:`re` 和 "
":mod:`contextlib` 的依赖而减少了大约三分之一。 其他获得导入时间加速的模块包括 :mod:`email.utils`, "
":mod:`enum`, :mod:`functools`, :mod:`importlib.metadata` 和 :mod:`threading`。"
" （由 Alex Waygood, Shantanu Jain, Adam Turner, Daniel Hollas 等人在 :gh:`109653`"
" 中贡献。）"

#: ../../whatsnew/3.13.rst:1490
msgid ""
":func:`textwrap.indent` is now around 30% faster than before for large "
"input. (Contributed by Inada Naoki in :gh:`107369`.)"
msgstr ""
"现在对于大量输入 :func:`textwrap.indent` 相比之前可提速大约 30%。 （由 Inada Naoki 在 "
":gh:`107369` 中贡献。）"

#: ../../whatsnew/3.13.rst:1493
msgid ""
"The :mod:`subprocess` module now uses the :func:`~os.posix_spawn` function "
"in more situations, including when *close_fds* is ``True`` (the default) on "
"many modern platforms. This should provide a notable performance increase "
"when launching processes on FreeBSD and Solaris. See the :ref:`subprocess "
"<whatsnew313-subprocess>` section above for details. (Contributed by Jakub "
"Kulik in :gh:`113117`.)"
msgstr ""
"现在 :mod:`subprocess` 模块会在更多场合下使用 :func:`~os.posix_spawn` 函数，包括在许多现代系统平台上当 "
"*close_fds* 为 ``True`` (默认值) 的时候。 当在 FreeBSD 和 Solaris 上启动进程时这应该能提供显著的性能提升。 "
"请参阅上面的 :ref:`subprocess <whatsnew313-subprocess>` 小节了解详情。 （由 Jakub Kulik 在 "
":gh:`113117` 中贡献。）"

#: ../../whatsnew/3.13.rst:1503
msgid "Removed Modules And APIs"
msgstr "被移除的模块与 API"

#: ../../whatsnew/3.13.rst:1509
msgid "PEP 594: Remove \"dead batteries\" from the standard library"
msgstr "PEP 594: 从标准库中移除“死电池”"

#: ../../whatsnew/3.13.rst:1511
msgid ""
":pep:`594` proposed removing 19 modules from the standard library, "
"colloquially referred to as 'dead batteries' due to their historic, "
"obsolete, or insecure status. All of the following modules were deprecated "
"in Python 3.11, and are now removed:"
msgstr ""
":pep:`594` 提议从标准库移除 19 个模块，它们因其古旧、过时或不安全的状态而被非正式地称呼为‘死电池’。 下列所有模块在 Python "
"3.11 中被弃用，现在已被移除："

#: ../../whatsnew/3.13.rst:1517
msgid ":mod:`!aifc`"
msgstr ":mod:`!aifc`"

#: ../../whatsnew/3.13.rst:1519
msgid ""
":pypi:`standard-aifc`: Use the redistribution of ``aifc`` library from PyPI."
msgstr ":pypi:`standard-aifc`: 使用 PyPI 上的重新分发版 ``aifc`` 库。"

#: ../../whatsnew/3.13.rst:1522
msgid ":mod:`!audioop`"
msgstr ":mod:`!audioop`"

#: ../../whatsnew/3.13.rst:1524
msgid ":pypi:`audioop-lts`: Use ``audioop-lts`` library from PyPI."
msgstr ":pypi:`audioop-lts`: 使用 PyPI 上的 ``audioop-lts`` 库。"

#: ../../whatsnew/3.13.rst:1527
msgid ":mod:`!chunk`"
msgstr ":mod:`!chunk`"

#: ../../whatsnew/3.13.rst:1529
msgid ""
":pypi:`standard-chunk`: Use the redistribution of ``chunk`` library from "
"PyPI."
msgstr ":pypi:`standard-chunk`: 使用 PyPI 上的重新分发版 ``chunk`` 库。"

#: ../../whatsnew/3.13.rst:1532
msgid ":mod:`!cgi` and :mod:`!cgitb`"
msgstr ":mod:`!cgi` 和 :mod:`!cgitb`"

#: ../../whatsnew/3.13.rst:1534
msgid ""
":class:`!cgi.FieldStorage` can typically be replaced with "
":func:`urllib.parse.parse_qsl` for ``GET`` and ``HEAD`` requests, and the "
":mod:`email.message` module or the :pypi:`multipart` library for ``POST`` "
"and ``PUT`` requests."
msgstr ""
"对于 ``GET`` 和 ``HEAD`` 请求 :class:`!cgi.FieldStorage` 通常可以用 "
":func:`urllib.parse.parse_qsl` 来替换，而对于 ``POST`` 和 ``PUT`` 请求则可以用 "
":mod:`email.message` 模块或 :pypi:`multipart` 库。"

#: ../../whatsnew/3.13.rst:1539
msgid ""
":func:`!cgi.parse` can be replaced by calling :func:`urllib.parse.parse_qs` "
"directly on the desired query string, unless the input is ``multipart/form-"
"data``, which should be replaced as described below for "
":func:`!cgi.parse_multipart`."
msgstr ""
":func:`!cgi.parse` 可被替换为在想要的查询字符串上直接调用 :func:`urllib.parse.parse_qs`，除非输入为 "
"``multipart/form-data``，它应当如下文针对 :func:`!cgi.parse_multipart` 所描述的那样被替换。"

#: ../../whatsnew/3.13.rst:1544
msgid ""
":func:`!cgi.parse_header` can be replaced with the functionality in the "
":mod:`email` package, which implements the same MIME RFCs. For example, with"
" :class:`email.message.EmailMessage`:"
msgstr ""
":func:`!cgi.parse_header` 可被 :mod:`email` 包中的功能所替换，它实现了相同的 MIME RFC。 例如，使用 "
":class:`email.message.EmailMessage`:"

#: ../../whatsnew/3.13.rst:1548
msgid ""
"from email.message import EmailMessage\n"
"\n"
"msg = EmailMessage()\n"
"msg['content-type'] = 'application/json; charset=\"utf8\"'\n"
"main, params = msg.get_content_type(), msg['content-type'].params"
msgstr ""
"from email.message import EmailMessage\n"
"\n"
"msg = EmailMessage()\n"
"msg['content-type'] = 'application/json; charset=\"utf8\"'\n"
"main, params = msg.get_content_type(), msg['content-type'].params"

#: ../../whatsnew/3.13.rst:1556
msgid ""
":func:`!cgi.parse_multipart` can be replaced with the functionality in the "
":mod:`email` package, which implements the same MIME RFCs, or with the "
":pypi:`multipart` library. For example, the "
":class:`email.message.EmailMessage` and :class:`email.message.Message` "
"classes."
msgstr ""
":func:`!cgi.parse_multipart` 可以用 :mod:`email` 包中的功能来替换，它实现了相同的 MIME RFC，也可以用"
" :pypi:`multipart` 库。 例如，:class:`email.message.EmailMessage` 和 "
":class:`email.message.Message` 类。"

#: ../../whatsnew/3.13.rst:1562
msgid ""
":pypi:`standard-cgi`: and :pypi:`standard-cgitb`: Use the redistribution of "
"``cgi`` and ``cgitb`` library from PyPI."
msgstr ""
":pypi:`standard-cgi`: 和 :pypi:`standard-cgitb`: 使用 PyPI 上的重新分发版 ``cgi`` 和 "
"``cgitb`` 库。"

#: ../../whatsnew/3.13.rst:1565
msgid ""
":mod:`!crypt` and the private :mod:`!_crypt` extension. The :mod:`hashlib` "
"module may be an appropriate replacement when simply hashing a value is "
"required. Otherwise, various third-party libraries on PyPI are available:"
msgstr ""
":mod:`!crypt` 以及私有的 :mod:`!_crypt` 扩展。 :mod:`hashlib` 模块在仅需对值执行哈希时是一个适当的替代物。"
" 在其他情况下，可以使用 PyPI 上的一些第三方库："

#: ../../whatsnew/3.13.rst:1570
msgid ""
":pypi:`bcrypt`: Modern password hashing for your software and your servers."
msgstr ":pypi:`bcrypt`: 用于软件和服务器的现代密码哈希算法。"

#: ../../whatsnew/3.13.rst:1572
msgid ""
":pypi:`passlib`: Comprehensive password hashing framework supporting over 30"
" schemes."
msgstr ":pypi:`passlib`: 支持超过 over 30 种方案的综合密码哈希算法框架。"

#: ../../whatsnew/3.13.rst:1574
msgid ":pypi:`argon2-cffi`: The secure Argon2 password hashing algorithm."
msgstr ":pypi:`argon2-cffi`: 安全的 Argon2 密码哈希算法。"

#: ../../whatsnew/3.13.rst:1576
msgid ""
":pypi:`legacycrypt`: :mod:`ctypes` wrapper to the POSIX crypt library call "
"and associated functionality."
msgstr ":pypi:`legacycrypt`: 针对 POSIX 加密库调用和相关功能的 :mod:`ctypes` 包装器。"

#: ../../whatsnew/3.13.rst:1579
msgid ""
":pypi:`crypt_r`: Fork of the :mod:`!crypt` module, wrapper to the "
":manpage:`crypt_r(3)` library call and associated functionality."
msgstr ""
":pypi:`crypt_r`: :mod:`!crypt` 模块的分叉，针对 :manpage:`crypt_r(3)` 库调用和相关功能和包装器。"

#: ../../whatsnew/3.13.rst:1583
msgid ""
":pypi:`standard-crypt` and :pypi:`deprecated-crypt-alternative`: Use the "
"redistribution of ``crypt`` and reimplementation of ``_crypt`` libraries "
"from PyPI."
msgstr ""
":pypi:`standard-crypt` 和 :pypi:`deprecated-crypt-alternative`: 使用 PyPI "
"上的重新分发版 ``crypt`` 和重新实现的 ``_crypt`` 库。"

#: ../../whatsnew/3.13.rst:1586
msgid ""
":mod:`!imghdr`: The :pypi:`filetype`, :pypi:`puremagic`, or :pypi:`python-"
"magic` libraries should be used as replacements. For example, the "
":func:`!puremagic.what` function can be used to replace the "
":func:`!imghdr.what` function for all file formats that were supported by "
":mod:`!imghdr`."
msgstr ""
":mod:`!imghdr`: 应当使用 :pypi:`filetype`, :pypi:`puremagic` 或 :pypi:`python-"
"magic` 等库作为替代。 例如，对于 :mod:`!imghdr` 所支持的所有文件格式 :func:`!puremagic.what` "
"函数可被用来替代 :func:`!imghdr.what` 函数。"

#: ../../whatsnew/3.13.rst:1593
msgid ""
":pypi:`standard-imghdr`: Use the redistribution of ``imghdr`` library from "
"PyPI."
msgstr ":pypi:`standard-imghdr`：使用 PyPI 上的重新分发版 ``imghdr`` 库。"

#: ../../whatsnew/3.13.rst:1596
msgid ":mod:`!mailcap`: Use the :mod:`mimetypes` module instead."
msgstr ":mod:`!mailcap`: 改用 :mod:`mimetypes` 模块。"

#: ../../whatsnew/3.13.rst:1599
msgid ""
":pypi:`standard-mailcap`: Use the redistribution of ``mailcap`` library from"
" PyPI."
msgstr ":pypi:`standard-mailcap`：使用 PyPI 上的重新分发版 ``mailcap`` 库。"

#: ../../whatsnew/3.13.rst:1602
msgid ":mod:`!msilib`"
msgstr ":mod:`!msilib`"

#: ../../whatsnew/3.13.rst:1603
msgid ":mod:`!nis`"
msgstr ":mod:`!nis`"

#: ../../whatsnew/3.13.rst:1604
msgid ":mod:`!nntplib`: Use the :pypi:`pynntp` library from PyPI instead."
msgstr ":mod:`!nntplib`: 改用 PyPI 上的 :pypi:`pynntp` 库。"

#: ../../whatsnew/3.13.rst:1607
msgid ""
":pypi:`standard-nntplib`: Use the redistribution of ``nntplib`` library from"
" PyPI."
msgstr ":pypi:`standard-nntplib`：使用 PyPI 上的重新分发版 ``nntplib`` 库。"

#: ../../whatsnew/3.13.rst:1610
msgid ""
":mod:`!ossaudiodev`: For audio playback, use the :pypi:`pygame` library from"
" PyPI instead."
msgstr ":mod:`!ossaudiodev`: 对于音频回放，改用 PyPI 上的 :pypi:`pygame` 库。"

#: ../../whatsnew/3.13.rst:1612
msgid ""
":mod:`!pipes`: Use the :mod:`subprocess` module instead. Use "
":func:`shlex.quote` to replace the undocumented ``pipes.quote`` function."
msgstr ""
":mod:`!pipes`: 改用 :mod:`subprocess` 模块。 使用 :func:`shlex.quote` 来替代未写入文档的 "
"``pipes.quote`` 函数。"

#: ../../whatsnew/3.13.rst:1617
msgid ""
":pypi:`standard-pipes`: Use the redistribution of ``pipes`` library from "
"PyPI."
msgstr ":pypi:`standard-pipes`：使用 PyPI 上的重新分发版 ``pipes`` 库。"

#: ../../whatsnew/3.13.rst:1620
msgid ""
":mod:`!sndhdr`: The :pypi:`filetype`, :pypi:`puremagic`, or :pypi:`python-"
"magic` libraries should be used as replacements."
msgstr ""
":mod:`!sndhdr`: 应当使用 :pypi:`filetype`, :pypi:`puremagic` 或 :pypi:`python-"
"magic` 库作为替代。"

#: ../../whatsnew/3.13.rst:1624
msgid ""
":pypi:`standard-sndhdr`: Use the redistribution of ``sndhdr`` library from "
"PyPI."
msgstr ":pypi:`standard-sndhdr`：使用 PyPI 上的重新分发版 ``sndhdr`` 库。"

#: ../../whatsnew/3.13.rst:1627
msgid ":mod:`!spwd`: Use the :pypi:`python-pam` library from PyPI instead."
msgstr ":mod:`!spwd`: 改用 PyPI 上的 :pypi:`python-pam` 库。"

#: ../../whatsnew/3.13.rst:1629
msgid ":mod:`!sunau`"
msgstr ":mod:`!sunau`"

#: ../../whatsnew/3.13.rst:1631
msgid ""
":pypi:`standard-sunau`: Use the redistribution of ``sunau`` library from "
"PyPI."
msgstr ":pypi:`standard-sunau`：使用 PyPI 上的重新分发版 ``sunau`` 库。"

#: ../../whatsnew/3.13.rst:1634
msgid ""
":mod:`!telnetlib`, Use the :pypi:`telnetlib3` or :pypi:`Exscript` libraries "
"from PyPI instead."
msgstr ":mod:`!telnetlib`，改用 PyPI 上的 :pypi:`telnetlib3` 或 :pypi:`Exscript` 库。"

#: ../../whatsnew/3.13.rst:1637
msgid ""
":pypi:`standard-telnetlib`: Use the redistribution of ``telnetlib`` library "
"from PyPI."
msgstr ":pypi:`standard-telnetlib`：使用 PyPI 上的重新分发版 ``telnetlib`` 库。"

#: ../../whatsnew/3.13.rst:1640
msgid ""
":mod:`!uu`: Use the :mod:`base64` module instead, as a modern alternative."
msgstr ":mod:`!uu`: 改用 the :mod:`base64` 模块，作为一款现代化的替代。"

#: ../../whatsnew/3.13.rst:1643
msgid ""
":pypi:`standard-uu`: Use the redistribution of ``uu`` library from PyPI."
msgstr ":pypi:`standard-uu`：使用 PyPI 上的重新分发版 ``uu`` 库。"

#: ../../whatsnew/3.13.rst:1646
msgid ":mod:`!xdrlib`"
msgstr ":mod:`!xdrlib`"

#: ../../whatsnew/3.13.rst:1648
msgid ""
":pypi:`standard-xdrlib`: Use the redistribution of ``xdrlib`` library from "
"PyPI."
msgstr ":pypi:`standard-xdrlib`：使用 PyPI 上的重新分发版 ``xdrlib`` 库。"

#: ../../whatsnew/3.13.rst:1651
msgid ""
"(Contributed by Victor Stinner and Zachary Ware in :gh:`104773` and "
":gh:`104780`.)"
msgstr "（由 Victor Stinner 和 Zachary Ware 在 :gh:`104773` 和 :gh:`104780` 中贡献。）"

#: ../../whatsnew/3.13.rst:1655
msgid "2to3"
msgstr "2to3"

#: ../../whatsnew/3.13.rst:1657
msgid ""
"Remove the :program:`2to3` program and the :mod:`!lib2to3` module, "
"previously deprecated in Python 3.11. (Contributed by Victor Stinner in "
":gh:`104780`.)"
msgstr ""
"移除 :program:`2to3` 程序和 :mod:`!lib2to3` 模块，此前已在 Python 3.11 中被弃用。 （由 Victor "
"Stinner 在 :gh:`104780` 中贡献。）"

#: ../../whatsnew/3.13.rst:1663
msgid "builtins"
msgstr "builtins"

#: ../../whatsnew/3.13.rst:1665
msgid ""
"Remove support for chained :class:`classmethod` descriptors (introduced in "
":gh:`63272`). These can no longer be used to wrap other descriptors, such as"
" :class:`property`. The core design of this feature was flawed and led to "
"several problems. To \"pass-through\" a :class:`classmethod`, consider using"
" the :attr:`!__wrapped__` attribute that was added in Python 3.10. "
"(Contributed by Raymond Hettinger in :gh:`89519`.)"
msgstr ""
"移除了对串联 :class:`classmethod` 描述器的支持（在 :gh:`63272` 中引入）。 它们不能再被用来包装其他描述器，如 "
":class:`property`。 此特性的核心设计存在缺陷并导致了一些问题。 要“穿过”一个 :class:`classmethod`，请考虑使用在"
" Python 3.10 中增加的 :attr:`!__wrapped__` 属性。 （由 Raymond Hettinger 在 "
":gh:`89519` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:1674
msgid ""
"Raise a :exc:`RuntimeError` when calling :meth:`frame.clear` on a suspended "
"frame (as has always been the case for an executing frame). (Contributed by "
"Irit Katriel in :gh:`79932`.)"
msgstr ""
"当在被挂起的帧上调用 :meth:`frame.clear` 时将引发 :exc:`RuntimeError`。  "
"(就如正在执行的帧一直以来的情况那样)。 （由 Irit Katriel 在 :gh:`79932` 中贡献。）"

#: ../../whatsnew/3.13.rst:1682
msgid ""
"Remove the undocumented :class:`!LegacyInterpolation` class, deprecated in "
"the docstring since Python 3.2, and at runtime since Python 3.11. "
"(Contributed by Hugo van Kemenade in :gh:`104886`.)"
msgstr ""
"移除了未写入文档的 :class:`!LegacyInterpolation` 类，它自 Python 3.2 起已在文档字符串中声明弃用，并且自 "
"Python 3.11 起在运行时也已弃用。 （由 Hugo van Kemenade 在 :gh:`104886` 中贡献。）"

#: ../../whatsnew/3.13.rst:1689
msgid "importlib.metadata"
msgstr "importlib.metadata"

#: ../../whatsnew/3.13.rst:1691
msgid ""
"Remove deprecated subscript (:meth:`~object.__getitem__`) access for "
":ref:`EntryPoint <entry-points>` objects. (Contributed by Jason R. Coombs in"
" :gh:`113175`.)"
msgstr ""
"移除了已弃用的针对 :ref:`EntryPoint <entry-points>` 对象的下标 "
"(:meth:`~object.__getitem__`) 访问。 （由 Jason R. Coombs 在 :gh:`113175` 中贡献。）"

#: ../../whatsnew/3.13.rst:1697
msgid "locale"
msgstr "locale"

#: ../../whatsnew/3.13.rst:1699
msgid ""
"Remove the :func:`!locale.resetlocale` function, deprecated in Python 3.11. "
"Use ``locale.setlocale(locale.LC_ALL, \"\")`` instead. (Contributed by "
"Victor Stinner in :gh:`104783`.)"
msgstr ""
"移除了 :func:`!locale.resetlocale` 函数，它已在 Python 3.11 中被弃用。 请改用 "
"``locale.setlocale(locale.LC_ALL, \"\")``。 （由 Victor Stinner 在 :gh:`104783` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:1705
msgid "opcode"
msgstr "opcode"

#: ../../whatsnew/3.13.rst:1707
msgid ""
"Move :attr:`!opcode.ENABLE_SPECIALIZATION` to "
":attr:`!_opcode.ENABLE_SPECIALIZATION`. This field was added in 3.12, it was"
" never documented, and is not intended for external use. (Contributed by "
"Irit Katriel in :gh:`105481`.)"
msgstr ""
"将 :attr:`!opcode.ENABLE_SPECIALIZATION` 移至 "
":attr:`!_opcode.ENABLE_SPECIALIZATION`。 这个字段在是 3.12 "
"中增加的，它从未被写入文档，也无意开放给外部使用。 （由 Irit Katriel 在 :gh:`105481` 中贡献。）"

#: ../../whatsnew/3.13.rst:1712
msgid ""
"Remove :func:`!opcode.is_pseudo`, :attr:`!opcode.MIN_PSEUDO_OPCODE`, and "
":attr:`!opcode.MAX_PSEUDO_OPCODE`, which were added in Python 3.12, but were"
" neither documented nor exposed through :mod:`dis`, and were not intended to"
" be used externally. (Contributed by Irit Katriel in :gh:`105481`.)"
msgstr ""
"移除了 :func:`!opcode.is_pseudo`, :attr:`!opcode.MIN_PSEUDO_OPCODE` 和 "
":attr:`!opcode.MAX_PSEUDO_OPCODE`，它们是在 Python 3.12 中增加了，但从未被写入文档也未通过 "
":mod:`dis` 对外公开，并且不应当在外部被使用。 （由 Irit Katriel 在 :gh:`105481` 中贡献。）"

#: ../../whatsnew/3.13.rst:1720
msgid "optparse"
msgstr "optparse"

#: ../../whatsnew/3.13.rst:1722
msgid ""
"This module is no longer considered :term:`soft deprecated`. While "
":mod:`argparse` remains preferred for new projects that aren't using a third"
" party command line argument processing library, there are aspects of the "
"way ``argparse`` works that mean the lower level ``optparse`` module may "
"provide a better foundation for *writing* argument processing libraries, and"
" for implementing command line applications which adhere more strictly than "
"``argparse`` does to various Unix command line processing conventions that "
"originate in the behaviour of the C :c:func:`!getopt` function . "
"(Contributed by Alyssa Coghlan and Serhiy Storchaka in :gh:`126180`.)"
msgstr ""
"此模块已不再被设为 :term:`soft deprecated`。 虽然对于不使用第三方命令行参数处理库的新项目 :mod:`argparse` "
"仍是推荐的选择，但在某些方面 ``argparse`` 的特征意味着较低层级的 ``optparse`` 模块为 *编写* 参数处理库以及实现相比 "
"``argparse`` 与多种 Unix 命令行处理规范绑定更严格、源自 C :c:func:`!getopt` "
"函数行为的命令行应用程序提供了坚实的基础。 （由 Alyssa Coghlan 和 Serhiy Storchaka 在 :gh:`126180` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:1738
msgid ""
"Remove the ability to use :class:`~pathlib.Path` objects as context "
"managers. This functionality was deprecated and has had no effect since "
"Python 3.9. (Contributed by Barney Gale in :gh:`83863`.)"
msgstr ""
"移除了使用 :class:`~pathlib.Path` 对象作为上下文管理器的能力。 此功能自 Python 3.9 起已被弃用并设为空操作。 （由 "
"Barney Gale 在 :gh:`83863` 中贡献。）"

#: ../../whatsnew/3.13.rst:1746
msgid ""
"Remove the undocumented, deprecated, and broken :func:`!re.template` "
"function and :attr:`!re.TEMPLATE` / :attr:`!re.T` flag. (Contributed by "
"Serhiy Storchaka and Nikita Sobolev in :gh:`105687`.)"
msgstr ""
"移除了未被写入文档、已被弃用且已不能工作的 :func:`!re.template` 函数和 :attr:`!re.TEMPLATE` / "
":attr:`!re.T` 旗标。 （由 Serhiy Storchaka 和 Nikita Sobolev 在 :gh:`105687` 中贡献。）"

#: ../../whatsnew/3.13.rst:1752
msgid "tkinter.tix"
msgstr "tkinter.tix"

#: ../../whatsnew/3.13.rst:1754
msgid ""
"Remove the :mod:`!tkinter.tix` module, deprecated in Python 3.6. The third-"
"party Tix library which the module wrapped is unmaintained. (Contributed by "
"Zachary Ware in :gh:`75552`.)"
msgstr ""
"移除了 :mod:`!tkinter.tix` 模块，它在 Python 3.6 中已被弃用。 该模块所包装的第三方库 Tix 已不再维护。 （由 "
"Zachary Ware 在 :gh:`75552` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:1760
msgid "turtle"
msgstr "turtle"

#: ../../whatsnew/3.13.rst:1762
msgid ""
"Remove the :meth:`!RawTurtle.settiltangle` method, deprecated in the "
"documentation since Python 3.1 and at runtime since Python 3.11. "
"(Contributed by Hugo van Kemenade in :gh:`104876`.)"
msgstr ""
"移除了 :meth:`!RawTurtle.settiltangle` 方法，它自 Python 3.1 起已在文档中声明弃用并自 Python "
"3.11 起在运行时声明弃用。 （由 Hugo van Kemenade 在 :gh:`104876` 中贡献。）"

#: ../../whatsnew/3.13.rst:1771
msgid ""
"Remove the :mod:`!typing.io` and :mod:`!typing.re` namespaces, deprecated "
"since Python 3.8. The items in those namespaces can be imported directly "
"from the :mod:`typing` module. (Contributed by Sebastian Rittau in "
":gh:`92871`.)"
msgstr ""
"移除了 :mod:`!typing.io` 和 :mod:`!typing.re` 命令空间，它们自 Python 3.8 起已被弃用。 "
"这些命名空间中的条目可从 :mod:`typing` 模块直接导入。 （由 Sebastian Rittau 在 :gh:`92871` 中贡献。）"

#: ../../whatsnew/3.13.rst:1777
msgid ""
"Remove the keyword-argument method of creating :class:`~typing.TypedDict` "
"types, deprecated in Python 3.11. (Contributed by Tomas Roun in "
":gh:`104786`.)"
msgstr ""
"移除了创建 :class:`~typing.TypedDict` 类型的关键字参数方法，它在 Python 3.11 中已被弃用。 （由 Tomas "
"Roun 在 :gh:`104786` 中贡献。）"

#: ../../whatsnew/3.13.rst:1783
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.13.rst:1785
msgid ""
"Remove the following :mod:`unittest` functions, deprecated in Python 3.11:"
msgstr "移除了下列 :mod:`unittest` 函数，它们在 Python 3.11 中已被弃用："

#: ../../whatsnew/3.13.rst:1787
msgid ":func:`!unittest.findTestCases`"
msgstr ":func:`!unittest.findTestCases`"

#: ../../whatsnew/3.13.rst:1788
msgid ":func:`!unittest.makeSuite`"
msgstr ":func:`!unittest.makeSuite`"

#: ../../whatsnew/3.13.rst:1789
msgid ":func:`!unittest.getTestCaseNames`"
msgstr ":func:`!unittest.getTestCaseNames`"

#: ../../whatsnew/3.13.rst:1791
msgid "Use :class:`~unittest.TestLoader` methods instead:"
msgstr "请改用 :class:`~unittest.TestLoader` 方法:"

#: ../../whatsnew/3.13.rst:1793
msgid ":meth:`~unittest.TestLoader.loadTestsFromModule`"
msgstr ":meth:`~unittest.TestLoader.loadTestsFromModule`"

#: ../../whatsnew/3.13.rst:1794
msgid ":meth:`~unittest.TestLoader.loadTestsFromTestCase`"
msgstr ":meth:`~unittest.TestLoader.loadTestsFromTestCase`"

#: ../../whatsnew/3.13.rst:1795
msgid ":meth:`~unittest.TestLoader.getTestCaseNames`"
msgstr ":meth:`~unittest.TestLoader.getTestCaseNames`"

#: ../../whatsnew/3.13.rst:1797
msgid "(Contributed by Hugo van Kemenade in :gh:`104835`.)"
msgstr "（由 Hugo van Kemenade 在 :gh:`104835` 中贡献。）"

#: ../../whatsnew/3.13.rst:1799
msgid ""
"Remove the untested and undocumented :meth:`!TestProgram.usageExit` method, "
"deprecated in Python 3.11. (Contributed by Hugo van Kemenade in "
":gh:`104992`.)"
msgstr ""
"移除了未经测试且未写入文档的 :meth:`!TestProgram.usageExit` 方法，它在 Python 3.11 中已被弃用。 （由 "
"Hugo van Kemenade 在 :gh:`104992` 中贡献。）"

#: ../../whatsnew/3.13.rst:1805
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.13.rst:1807
msgid ""
"Remove the *cafile*, *capath*, and *cadefault* parameters of the "
":func:`urllib.request.urlopen` function, deprecated in Python 3.6. Use the "
"*context* parameter instead with an :class:`~ssl.SSLContext` instance. The "
":meth:`ssl.SSLContext.load_cert_chain` function can be used to load specific"
" certificates, or let :func:`ssl.create_default_context` select the "
"operating system's trusted certificate authority (CA) certificates. "
"(Contributed by Victor Stinner in :gh:`105382`.)"
msgstr ""
"移除了 :func:`urllib.request.urlopen` 函数的 *cafile*, *capath* 和 *cadefault* "
"等形参，它们在 Python 3.6 中已弃用。 应改为向 *context* 形参传入一个 :class:`~ssl.SSLContext` 实例。 "
"可以使用 :meth:`ssl.SSLContext.load_cert_chain` 函数来加载指定的证书，或是让 "
":func:`ssl.create_default_context` 来选择操作系统的受信任证书颁发机构 (CA) 证书。 （由 Victor "
"Stinner 在 :gh:`105382` 中贡献。）"

#: ../../whatsnew/3.13.rst:1818
msgid "webbrowser"
msgstr "webbrowser"

#: ../../whatsnew/3.13.rst:1820
msgid ""
"Remove the untested and undocumented :class:`!MacOSX` class, deprecated in "
"Python 3.11. Use the :class:`!MacOSXOSAScript` class (introduced in Python "
"3.2) instead. (Contributed by Hugo van Kemenade in :gh:`104804`.)"
msgstr ""
"移除了未经测试且未写入文档的 :class:`!MacOSX` 类，它在 Python 3.11 中已弃用。 请改用 "
":class:`!MacOSXOSAScript` 类（在 Python 3.2 中引入）。 （由 Hugo van Kemenade 在 "
":gh:`104804` 中贡献。）"

#: ../../whatsnew/3.13.rst:1825
msgid ""
"Remove the deprecated :attr:`!MacOSXOSAScript._name` attribute. Use the "
":attr:`MacOSXOSAScript.name <webbrowser.controller.name>` attribute instead."
" (Contributed by Nikita Sobolev in :gh:`105546`.)"
msgstr ""
"移除了已被弃用的 :attr:`!MacOSXOSAScript._name` 属性。 请改用 :attr:`MacOSXOSAScript.name "
"<webbrowser.controller.name>` 属性。 （由 Nikita Sobolev 在 :gh:`105546` 中贡献。）"

#: ../../whatsnew/3.13.rst:1832
msgid "New Deprecations"
msgstr "新的弃用"

#: ../../whatsnew/3.13.rst:1834
msgid ":ref:`User-defined functions <user-defined-funcs>`:"
msgstr ":ref:`用户自定义函数 <user-defined-funcs>`:"

#: ../../whatsnew/3.13.rst:1836
msgid ""
"Deprecate assignment to a function's :attr:`~function.__code__` attribute, "
"where the new code object's type does not match the function's type. The "
"different types are: plain function, generator, async generator, and "
"coroutine. (Contributed by Irit Katriel in :gh:`81137`.)"
msgstr ""
"弃用对函数的 :attr:`~function.__code__` 属性的赋值，其中新代码对象的类型与函数的类型不匹配。 "
"不同的类型有：普通函数、生成器、异步生成器和协程。 （由 Irit Katriel 在 :gh:`81137` 中贡献。）"

#: ../../whatsnew/3.13.rst:1842
#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ":mod:`array`:"

#: ../../whatsnew/3.13.rst:1844
msgid ""
"Deprecate the ``'u'`` format code (:c:type:`wchar_t`) at runtime. This "
"format code has been deprecated in documentation since Python 3.3, and will "
"be removed in Python 3.16. Use the ``'w'`` format code (:c:type:`Py_UCS4`) "
"for Unicode characters instead. (Contributed by Hugo van Kemenade in "
":gh:`80480`.)"
msgstr ""
"在运行时弃用 ``'u'`` 格式代码 (:c:type:`wchar_t`)。 此格式代码自 Python 3.3 起在文档中已被弃用，并将在 "
"Python 3.16 中被移除。对于 Unicode 字符，请使用 ``'w'`` 格式代码 (:c:type:`Py_UCS4`)。 （由 Hugo"
" van Kemenade 在 :gh:`80480` 中贡献。）"

#: ../../whatsnew/3.13.rst:1851
#: ../../deprecations/pending-removal-in-3.15.rst:16
msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

#: ../../whatsnew/3.13.rst:1853
msgid ""
"Deprecate the undocumented :func:`!SetPointerType` function, to be removed "
"in Python 3.15. (Contributed by Victor Stinner in :gh:`105733`.)"
msgstr ""
"弃用了未写入文档的 :func:`!SetPointerType` 函数，并将在 Python 3.15 中移除。 （由 Victor Stinner "
"在 :gh:`105733` 中贡献。）"

#: ../../whatsnew/3.13.rst:1857
msgid ""
":term:`Soft-deprecate <soft deprecated>` the :func:`~ctypes.ARRAY` function "
"in favour of ``type * length`` multiplication. (Contributed by Victor "
"Stinner in :gh:`105733`.)"
msgstr ""
":term:`软弃用 <soft deprecated>` :func:`~ctypes.ARRAY` 函数并改用 ``type * length`` "
"乘法运算。 （由 Victor Stinner 在 :gh:`105733` 中贡献。）"

#: ../../whatsnew/3.13.rst:1861
msgid ":mod:`decimal`:"
msgstr ":mod:`decimal`:"

#: ../../whatsnew/3.13.rst:1863
msgid ""
"Deprecate the non-standard and undocumented :class:`~decimal.Decimal` format"
" specifier ``'N'``, which is only supported in the :mod:`!decimal` module's "
"C implementation. (Contributed by Serhiy Storchaka in :gh:`89902`.)"
msgstr ""
"弃用了非标准且未写入文档的 :class:`~decimal.Decimal` 格式说明符 ``'N'``，它仅在 :mod:`!decimal` "
"模块的 C 实现中受到支持。 （由 Serhiy Storchaka 在 :gh:`89902` 中贡献。）"

#: ../../whatsnew/3.13.rst:1868
msgid ":mod:`dis`:"
msgstr ":mod:`dis`:"

#: ../../whatsnew/3.13.rst:1870
msgid ""
"Deprecate the :attr:`!HAVE_ARGUMENT` separator. Check membership in "
":data:`~dis.hasarg` instead. (Contributed by Irit Katriel in :gh:`109319`.)"
msgstr ""
"弃用了 :attr:`!HAVE_ARGUMENT` 分隔符。 改为在 :data:`~dis.hasarg` 中的成员检测。 （由 Irit "
"Katriel 在 :gh:`109319` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:1874
msgid ":mod:`gettext`:"
msgstr ":mod:`gettext`:"

#: ../../whatsnew/3.13.rst:1876
msgid ""
"Deprecate non-integer numbers as arguments to functions and methods that "
"consider plural forms in the :mod:`!gettext` module, even if no translation "
"was found. (Contributed by Serhiy Storchaka in :gh:`88434`.)"
msgstr ""
"在 :mod:`!gettext` 模块中，弃用非整数作为考虑复数形式的函数和方法的参数，即使没有找到翻译时也不可以。 （由 Serhiy "
"Storchaka 在 :gh:`88434` 中贡献。）"

#: ../../whatsnew/3.13.rst:1881
msgid ":mod:`glob`:"
msgstr ":mod:`glob`:"

#: ../../whatsnew/3.13.rst:1883
msgid ""
"Deprecate the undocumented :func:`!glob0` and :func:`!glob1` functions. Use "
":func:`~glob.glob` and pass a :term:`path-like object` specifying the root "
"directory to the *root_dir* parameter instead. (Contributed by Barney Gale "
"in :gh:`117337`.)"
msgstr ""
"弃用未写入文档的 :func:`!glob0` 和 :func:`!glob1` 函数。改为使用 :func:`~glob.glob` "
"并传递一个指定根目录的 :term:`path-like object` 到 *root_dir* 形参。 （由 Barney Gale 在 "
":gh:`117337` 中贡献。）"

#: ../../whatsnew/3.13.rst:1888
#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

#: ../../whatsnew/3.13.rst:1890
msgid ""
"Deprecate :class:`~http.server.CGIHTTPRequestHandler`, to be removed in "
"Python 3.15. Process-based CGI HTTP servers have been out of favor for a "
"very long time. This code was outdated, unmaintained, and rarely used. It "
"has a high potential for both security and functionality bugs. (Contributed "
"by Gregory P. Smith in :gh:`109096`.)"
msgstr ""
"弃用 :class:`~http.server.CGIHTTPRequestHandler` 类，将在 Python 3.15 中移除。 基于进程的 "
"CGI HTTP 服务器已经过时很久了。 该代码已经过时，无人维护，而且很少使用。 它极有可能出现安全和功能方面的程序错误。 （由 Gregory P."
" Smith 在 :gh:`109096` 中贡献。）"

#: ../../whatsnew/3.13.rst:1897
msgid ""
"Deprecate the :option:`!--cgi` flag to the :program:`python -m http.server` "
"command-line interface, to be removed in Python 3.15. (Contributed by "
"Gregory P. Smith in :gh:`109096`.)"
msgstr ""
"弃用 :program:`python -m http.server` 命令行接口的 :option:`!--cgi` 标志位，将在 Python "
"3.15 中移除。（由 Gregory P. Smith 在 :gh:`109096` 中贡献。）"

#: ../../whatsnew/3.13.rst:1902
#: ../../deprecations/pending-removal-in-3.16.rst:70
msgid ":mod:`mimetypes`:"
msgstr ":mod:`mimetypes`:"

#: ../../whatsnew/3.13.rst:1904
msgid ""
":term:`Soft-deprecate <soft deprecated>` file path arguments to "
":func:`~mimetypes.guess_type`, use :func:`~mimetypes.guess_file_type` "
"instead. (Contributed by Serhiy Storchaka in :gh:`66543`.)"
msgstr ""
":term:`软弃用 <soft deprecated>` 传给 :func:`~mimetypes.guess_type` 的文件路径参数，改用 "
":func:`~mimetypes.guess_file_type`。 （由 Serhiy Storchaka 在 :gh:`66543` "
"中贡献。）.)"

#: ../../whatsnew/3.13.rst:1909
msgid ":mod:`re`:"
msgstr ":mod:`re`:"

#: ../../whatsnew/3.13.rst:1911
msgid ""
"Deprecate passing the optional *maxsplit*, *count*, or *flags* arguments as "
"positional arguments to the module-level :func:`~re.split`, :func:`~re.sub`,"
" and :func:`~re.subn` functions. These parameters will become :ref:`keyword-"
"only <keyword-only_parameter>` in a future version of Python. (Contributed "
"by Serhiy Storchaka in :gh:`56166`.)"
msgstr ""
"弃用将可选的 *maxsplit*, *count* 或 *flags* 参数以位置参数形式传给模块级 :func:`~re.split`, "
":func:`~re.sub` 和 :func:`~re.subn` 函数的做法。 这些形参将在未来的 Python 版本中成为 "
":ref:`仅限关键字形参 <keyword-only_parameter>`。 （由 Serhiy Storchaka 在 :gh:`56166` "
"中贡献。）.)"

#: ../../whatsnew/3.13.rst:1918
#: ../../deprecations/pending-removal-in-3.15.rst:46
msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

#: ../../whatsnew/3.13.rst:1920
msgid ""
"Deprecate :meth:`.PurePath.is_reserved`, to be removed in Python 3.15. Use "
":func:`os.path.isreserved` to detect reserved paths on Windows. (Contributed"
" by Barney Gale in :gh:`88569`.)"
msgstr ""
"弃用 :meth:`.PurePath.is_reserved`，将在 Python 3.15 中移除。 请使用 "
":func:`os.path.isreserved` 来检测 Windows 上的保留路径。 （由 Barney Gale 在 :gh:`88569` "
"中贡献。）.)"

#: ../../whatsnew/3.13.rst:1925
#: ../../deprecations/pending-removal-in-3.15.rst:52
msgid ":mod:`platform`:"
msgstr ":mod:`platform`:"

#: ../../whatsnew/3.13.rst:1927
msgid ""
"Deprecate :func:`~platform.java_ver`, to be removed in Python 3.15. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested. (Contributed by Nikita Sobolev in :gh:`116349`.)"
msgstr ""
"弃用了 :func:`~platform.java_ver`，并将在 Python 3.15 中移除。 此函数仅对 Jython "
"支持有用，具有令人困惑的 API，并且大部分未经测试。 （由 Nikita Sobolev 在 :gh:`116349` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:1933
msgid ":mod:`pydoc`:"
msgstr ":mod:`pydoc`:"

#: ../../whatsnew/3.13.rst:1935
msgid ""
"Deprecate the undocumented :func:`!ispackage` function. (Contributed by "
"Zackery Spytz in :gh:`64020`.)"
msgstr "弃用未写入文档的 :func:`!ispackage` 函数。 （由 Zackery Spytz 在 :gh:`64020` 中贡献。）"

#: ../../whatsnew/3.13.rst:1938
#: ../../deprecations/pending-removal-in-3.14.rst:91
msgid ":mod:`sqlite3`:"
msgstr ":mod:`sqlite3`:"

#: ../../whatsnew/3.13.rst:1940
msgid ""
"Deprecate passing more than one positional argument to the "
":func:`~sqlite3.connect` function and the :class:`~sqlite3.Connection` "
"constructor. The remaining parameters will become keyword-only in Python "
"3.15. (Contributed by Erlend E. Aasland in :gh:`107948`.)"
msgstr ""
"弃用向 :func:`~sqlite3.connect` 函数和 :class:`~sqlite3.Connection` "
"构造器传入多个位置参数的做法。 其余的形参在 Python 3.15 中将成为仅限关键字形参。 （由 Erlend E. Aasland 在 "
":gh:`107948` 中贡献。）"

#: ../../whatsnew/3.13.rst:1946
msgid ""
"Deprecate passing name, number of arguments, and the callable as keyword "
"arguments for :meth:`.Connection.create_function` and "
":meth:`.Connection.create_aggregate` These parameters will become "
"positional-only in Python 3.15. (Contributed by Erlend E. Aasland in "
":gh:`108278`.)"
msgstr ""
"弃用将名称、参数数量和可调用对象作为 :meth:`.Connection.create_function` 和 "
":meth:`.Connection.create_aggregate` 的关键字参数传入的做法。 这些形参在 Python 3.15 "
"中将成为仅限位置形参。 （由 Erlend E. Aasland 在 :gh:`108278` 中贡献。）"

#: ../../whatsnew/3.13.rst:1952
msgid ""
"Deprecate passing the callback callable by keyword for the "
":meth:`~sqlite3.Connection.set_authorizer`, "
":meth:`~sqlite3.Connection.set_progress_handler`, and "
":meth:`~sqlite3.Connection.set_trace_callback` :class:`~sqlite3.Connection` "
"methods. The callback callables will become positional-only in Python 3.15. "
"(Contributed by Erlend E. Aasland in :gh:`108278`.)"
msgstr ""
"弃用将 callback 可调用对象作为 :meth:`~sqlite3.Connection.set_authorizer`, "
":meth:`~sqlite3.Connection.set_progress_handler` 和 "
":meth:`~sqlite3.Connection.set_trace_callback` 等 "
":class:`~sqlite3.Connection` 方法的关键字参数传入的做法。 callback 可调用对象在 Python 3.15 "
"中将成为仅限位置参数。 （由 Erlend E. Aasland 在 :gh:`108278` 中贡献。）"

#: ../../whatsnew/3.13.rst:1960
#: ../../deprecations/pending-removal-in-3.16.rst:90
msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

#: ../../whatsnew/3.13.rst:1962
msgid ""
"Deprecate the :func:`~sys._enablelegacywindowsfsencoding` function, to be "
"removed in Python 3.16. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead. (Contributed by Inada Naoki in :gh:`73427`.)"
msgstr ""
"弃用 :func:`~sys._enablelegacywindowsfsencoding` 函数，并将在 Python 3.16 中移除。 请改用 "
":envvar:`PYTHONLEGACYWINDOWSFSENCODING` 环境变量。 （由 Inada Naoki 在 :gh:`73427` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:1967
#: ../../deprecations/pending-removal-in-3.16.rst:102
msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

#: ../../whatsnew/3.13.rst:1969
msgid ""
"Deprecate the undocumented and unused :attr:`!TarFile.tarfile` attribute, to"
" be removed in Python 3.16. (Contributed in :gh:`115256`.)"
msgstr ""
"弃用了未写入文档也未被使用的 :attr:`!TarFile.tarfile` 属性，并将在 Python 3.16 中移除。 （在 "
":gh:`115256` 中贡献。）"

#: ../../whatsnew/3.13.rst:1973
msgid ":mod:`traceback`:"
msgstr ":mod:`traceback`:"

#: ../../whatsnew/3.13.rst:1975
msgid ""
"Deprecate the :attr:`.TracebackException.exc_type` attribute. Use "
":attr:`.TracebackException.exc_type_str` instead. (Contributed by Irit "
"Katriel in :gh:`112332`.)"
msgstr ""
"已弃用 :attr:`.TracebackException.exc_type` 属性。 请改用 "
":attr:`.TracebackException.exc_type_str`。 （由 Irit Katriel 在 :gh:`112332` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:1979
#: ../../deprecations/pending-removal-in-3.15.rst:80
#: ../../deprecations/pending-removal-in-3.17.rst:4
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: ../../whatsnew/3.13.rst:1981
msgid ""
"Deprecate the undocumented keyword argument syntax for creating "
":class:`~typing.NamedTuple` classes (e.g. ``Point = NamedTuple(\"Point\", "
"x=int, y=int)``), to be removed in Python 3.15. Use the class-based syntax "
"or the functional syntax instead. (Contributed by Alex Waygood in "
":gh:`105566`.)"
msgstr ""
"弃用了未写入文档的用于创建 :class:`~typing.NamedTuple` 类的关键字参数语法 (例如 ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``)，将在 Python 3.15 中移除。 请改用基于类的语法或函数式语法。 "
"（由 Alex Waygood 在 :gh:`105566` 中贡献。）"

#: ../../whatsnew/3.13.rst:1988
msgid ""
"Deprecate omitting the *fields* parameter when creating a "
":class:`~typing.NamedTuple` or :class:`typing.TypedDict` class, and "
"deprecate passing ``None`` to the *fields* parameter of both types. Python "
"3.15 will require a valid sequence for the *fields* parameter. To create a "
"NamedTuple class with zero fields, use ``class NT(NamedTuple): pass`` or "
"``NT = NamedTuple(\"NT\", ())``. To create a TypedDict class with zero "
"fields, use ``class TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``."
" (Contributed by Alex Waygood in :gh:`105566` and :gh:`105570`.)"
msgstr ""
"弃用当创建 :class:`~typing.NamedTuple` 或 :class:`typing.TypedDict` 类时省略 *fields* "
"形参的做法，并弃用将 ``None`` 传给这两种类型的 *fields* 形参的做法。 Python 3.15 将要求以一个有效的序列作为 "
"*fields* 形参。 要创建具有零个字段的 NamedTuple 类，请使用 ``class NT(NamedTuple): pass`` 或 "
"``NT = NamedTuple(\"NT\", ())``。 要创建具有零人字段的 TypedDict 类，请使用 ``class "
"TD(TypedDict): pass`` 或 ``TD = TypedDict(\"TD\", {})``。 （由 Alex Waygood 在 "
":gh:`105566` 和 :gh:`105570` 中贡献。）"

#: ../../whatsnew/3.13.rst:1998
msgid ""
"Deprecate the :func:`typing.no_type_check_decorator` decorator function, to "
"be removed in Python 3.15. After eight years in the :mod:`typing` module, it"
" has yet to be supported by any major type checker. (Contributed by Alex "
"Waygood in :gh:`106309`.)"
msgstr ""
"弃用 :func:`typing.no_type_check_decorator` 装饰器函数，将在 Python 3.15 中移除。 存在于 "
":mod:`typing` 模块中八年之后，它仍未被任何主要类型检查器所支持。 （由 Alex Waygood 在 :gh:`106309` 中贡献。）"

#: ../../whatsnew/3.13.rst:2004
msgid ""
"Deprecate :data:`typing.AnyStr`. In Python 3.16, it will be removed from "
"``typing.__all__``, and a :exc:`DeprecationWarning` will be emitted at "
"runtime when it is imported or accessed. It will be removed entirely in "
"Python 3.18. Use the new :ref:`type parameter syntax <type-params>` instead."
" (Contributed by Michael The in :gh:`107116`.)"
msgstr ""
"弃用 :data:`typing.AnyStr`。 在 Python 3.16 中，它将从 ``typing.__all__`` "
"移除，当它被导入或被访问时将会发出 :exc:`DeprecationWarning`。 它将在 Python 3.18 中被完全移除。 请改用新的 "
":ref:`类型形参语法 <type-params>`。 （由 Michael The 在 :gh:`107116` 中贡献。）"

#: ../../whatsnew/3.13.rst:2012
#: ../../deprecations/pending-removal-in-3.15.rst:100
msgid ":mod:`wave`:"
msgstr ":mod:`wave`:"

#: ../../whatsnew/3.13.rst:2014
msgid ""
"Deprecate the :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and "
":meth:`~wave.Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` "
"and :class:`~wave.Wave_write` classes, to be removed in Python 3.15. "
"(Contributed by Victor Stinner in :gh:`105096`.)"
msgstr ""
"弃用 :class:`~wave.Wave_read` 和 :class:`~wave.Wave_write` 类的 "
":meth:`~wave.Wave_read.getmark`, :meth:`!setmark` 和 "
":meth:`~wave.Wave_read.getmarkers` 方法，将在 Python 3.15 中移除。 （由 Victor Stinner "
"在 :gh:`105096` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:2
#: ../../deprecations/pending-removal-in-3.14.rst:2
msgid "Pending removal in Python 3.14"
msgstr "计划在 Python 3.14 中移除"

#: ../../deprecations/pending-removal-in-3.14.rst:4
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of "
":class:`!argparse.BooleanOptionalAction` are deprecated and will be removed "
"in 3.14. (Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""
":mod:`argparse`: :class:`!argparse.BooleanOptionalAction` 的 *type*, "
"*choices* 和 *metavar* 形参已被弃用并将在 3.14 中移除。 （由 Nikita Sobolev 在 :gh:`92248` "
"中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:9
msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""
":mod:`ast`: 以下特性自 Python 3.8 起已在文档中声明弃用，现在当运行时如果它们被访问或使用时将发出 "
":exc:`DeprecationWarning`，并将在 Python 3.14 中移除："

#: ../../deprecations/pending-removal-in-3.14.rst:13
msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

#: ../../deprecations/pending-removal-in-3.14.rst:14
msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

#: ../../deprecations/pending-removal-in-3.14.rst:15
msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

#: ../../deprecations/pending-removal-in-3.14.rst:16
msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NameConstant`"

#: ../../deprecations/pending-removal-in-3.14.rst:17
msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

#: ../../deprecations/pending-removal-in-3.14.rst:19
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in "
":gh:`90953`.)"
msgstr "请改用 :class:`ast.Constant`。 （由 Serhiy Storchaka 在 :gh:`90953` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:22
#: ../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

#: ../../deprecations/pending-removal-in-3.14.rst:24
msgid ""
"The child watcher classes :class:`!asyncio.MultiLoopChildWatcher`, "
":class:`!asyncio.FastChildWatcher`, :class:`!asyncio.AbstractChildWatcher` "
"and :class:`!asyncio.SafeChildWatcher` are deprecated and will be removed in"
" Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
"子监视器类 "
":class:`!asyncio.MultiLoopChildWatcher`、:class:`!asyncio.FastChildWatcher`、:class:`!asyncio.AbstractChildWatcher`和"
" :class:`!asyncio.SafeChildWatcher` 已被弃用并将在 Python 3.14 中移除。 （由 Kumar Aditya"
" 在 :gh:`94597` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:30
msgid ""
":func:`!asyncio.set_child_watcher`, :func:`!asyncio.get_child_watcher`, "
":meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher` and "
":meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher` are deprecated "
"and will be removed in Python 3.14. (Contributed by Kumar Aditya in "
":gh:`94597`.)"
msgstr ""
":func:`!asyncio.set_child_watcher`、:func:`!asyncio.get_child_watcher`、:meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher`"
" 和 :meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher` 已弃用，并将在 Python"
" 3.14 中移除。（由 Kumar Aditya 在 :gh:`94597` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:36
msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van"
" Rossum in :gh:`100160`.)"
msgstr ""
"现在默认事件循环策略的 :meth:`~asyncio.get_event_loop` 方法在当前事件循环未设置并决定创建一个时将发出 "
":exc:`DeprecationWarning`。 （由 Serhiy Storchaka 和 Guido van Rossum 在 "
":gh:`100160` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:41
msgid ""
":mod:`collections.abc`: Deprecated :class:`!collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or "
":class:`collections.abc.Buffer`. (Contributed by Shantanu Jain in "
":gh:`91896`.)"
msgstr ""
":mod:`collections.abc`: 已弃用 :class:`!collections.abc.ByteString`。 推荐改用 "
":class:`!Sequence` 或 :class:`~collections.abc.Buffer`。 用于类型标注时，则推荐并集运算符，如 "
"``bytes | bytearray``，或 :class:`collections.abc.Buffer`。 （由 Shantanu Jain 在 "
":gh:`91896` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:47
msgid ""
":mod:`email`: Deprecated the *isdst* parameter in "
":func:`email.utils.localtime`. (Contributed by Alan Williams in "
":gh:`72346`.)"
msgstr ""
":mod:`email`: 已弃用 :func:`email.utils.localtime` 中的 *isdst* 形参。 （由 Alan "
"Williams 在 :gh:`72346` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:50
msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ":mod:`importlib.abc` 中已弃用的类："

#: ../../deprecations/pending-removal-in-3.14.rst:52
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

#: ../../deprecations/pending-removal-in-3.14.rst:53
msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

#: ../../deprecations/pending-removal-in-3.14.rst:54
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

#: ../../deprecations/pending-removal-in-3.14.rst:56
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr "使用 :mod:`importlib.resources.abc` 类代替:"

#: ../../deprecations/pending-removal-in-3.14.rst:58
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

#: ../../deprecations/pending-removal-in-3.14.rst:59
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

#: ../../deprecations/pending-removal-in-3.14.rst:61
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "（由 Jason R. Coombs 和 Hugo van Kemenade 在 :gh:`93963` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:63
msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be"
" removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""
":mod:`itertools` 具有对 copy, deepcopy 和 pickle 等操作的未写入文档的、低效的、历史上充满问题的且不稳定的支持。"
" 这将在 3.14 中移除以显著减少代码量和维护负担。 （由 Raymond Hettinger 在 :gh:`101588` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:69
msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was"
" deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or "
":func:`~multiprocessing.set_start_method` APIs to explicitly specify when "
"your code *requires* ``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""
":mod:`multiprocessing`: 默认的启动方法在目前默认使用 ``'fork'`` 的 Linux, BSD 和其他非 macOS "
"POSIX 平台上将改为更安全的方法 (:gh:`84559`)。 为此添加运行时警告将带来糟糕的体验因为大部分代码并不会关心这个问题。 当你的代码 "
"*需要* ``'fork'`` 时请使用 :func:`~multiprocessing.get_context` 或 "
":func:`~multiprocessing.set_start_method` API 来显式地指明。 参见 "
":ref:`multiprocessing-start-methods`。"

#: ../../deprecations/pending-removal-in-3.14.rst:77
msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` and "
":meth:`~pathlib.PurePath.relative_to`: passing additional arguments is "
"deprecated."
msgstr ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` 和 "
":meth:`~pathlib.PurePath.relative_to`: 传入额外参数的做法已被弃用。"

#: ../../deprecations/pending-removal-in-3.14.rst:81
msgid ""
":mod:`pkgutil`: :func:`!pkgutil.find_loader` and :func:`!pkgutil.get_loader`"
" now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""
":mod:`pkgutil`: 现在 :func:`!pkgutil.find_loader` 和 "
":func:`!pkgutil.get_loader` 将引发 :exc:`DeprecationWarning`；请改用 "
":func:`importlib.util.find_spec`。 （由 Nikita Sobolev 在 :gh:`97850` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.14.rst:86
msgid ":mod:`pty`:"
msgstr ":mod:`pty`:"

#: ../../deprecations/pending-removal-in-3.14.rst:88
msgid "``master_open()``: use :func:`pty.openpty`."
msgstr "``master_open()``: 使用 :func:`pty.openpty`。"

#: ../../deprecations/pending-removal-in-3.14.rst:89
msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr "``slave_open()``: 使用 :func:`pty.openpty`。"

#: ../../deprecations/pending-removal-in-3.14.rst:93
msgid ":data:`!version` and :data:`!version_info`."
msgstr ":data:`!version` 和 :data:`!version_info`。"

#: ../../deprecations/pending-removal-in-3.14.rst:95
msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if "
":ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* "
"is a sequence instead of a :class:`dict`."
msgstr ""
"如果使用了 :ref:`命名占位符 <sqlite3-placeholders>` 且 *parameters* 是一个序列而不是 "
":class:`dict` 则选择 :meth:`~sqlite3.Cursor.execute` 和 "
":meth:`~sqlite3.Cursor.executemany`。"

#: ../../deprecations/pending-removal-in-3.14.rst:99
msgid ""
":mod:`typing`: :class:`!typing.ByteString`, deprecated since Python 3.9, now"
" causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""
":mod:`typing`: :class:`!typing.ByteString` 自 Python 3.9 起已被弃用，现在当被使用时将会发出 "
":exc:`DeprecationWarning`。"

#: ../../deprecations/pending-removal-in-3.14.rst:102
msgid ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in "
":gh:`88168`.)"
msgstr ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` 已被弃用：它不应被作为公有 API。 （由 Gregory "
"P. Smith 在 :gh:`88168` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending removal in Python 3.15"
msgstr "计划在 Python 3.15 中移除"

#: ../../deprecations/pending-removal-in-3.15.rst:4
#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr "导入系统："

#: ../../deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set "
":attr:`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is "
"deprecated. In Python 3.15, :attr:`!__cached__` will cease to be set or take"
" into consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"当设置 :attr:`__spec__.cached <importlib.machinery.ModuleSpec.cached>` "
"失败时在模块上设置 :attr:`~module.__cached__` 的做法已被弃用。 在 Python 3.15 "
"中，:attr:`!__cached__` 将不会再被导入系统或标准库纳入考虑。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set "
":attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is "
"deprecated. In Python 3.15, :attr:`!__package__` will cease to be set or "
"take into consideration by the import system or standard library. "
"(:gh:`97879`)"
msgstr ""
"当设备 :attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` "
"失败时在模块上设置 :attr:`~module.__package__` 的做法已被弃用。 在 Python 3.15 "
"中，:attr:`!__package__` 将不会再被导入系统或标准库纳入考虑。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated"
" since Python 3.13."
msgstr "未写入文档的 :func:`!ctypes.SetPointerType` 函数自 Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has"
" been deprecated since Python 3.13. No direct replacement exists. *Anything*"
" is better than CGI to interface a web server with a request handler."
msgstr ""
"过时且很少被使用的 :class:`~http.server.CGIHTTPRequestHandler` 自 Python 3.13 起已被弃用。 "
"不存在直接的替代品。 对于建立带有请求处理器的 Web 服务程序来说 *任何东西* 都比 CGI 要好。"

#: ../../deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"用于 :program:`python -m http.server` 命令行界面的 :option:`!--cgi` 旗标自 Python 3.13 "
"起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:32
#: ../../deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "``load_module()`` 方法：改用 ``exec_module()``。"

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ":class:`locale`:"
msgstr ":class:`locale`:"

#: ../../deprecations/pending-removal-in-3.15.rst:38
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 "
"(:gh:`90817`), but has been postponed to Python 3.15. Use "
":func:`~locale.getlocale`, :func:`~locale.setlocale`, and "
":func:`~locale.getencoding` instead. (Contributed by Hugo van Kemenade in "
":gh:`111187`.)"
msgstr ""
":func:`~locale.getdefaultlocale` 函数自 Python 3.11 起已被弃用。 最初计划在 Python 3.13 "
"中移除它 (:gh:`90817`)，但已被推迟至 Python 3.15。 请改用 :func:`~locale.getlocale`, "
":func:`~locale.setlocale` 和 :func:`~locale.getencoding`。 （由 Hugo van "
"Kemenade 在 :gh:`111187` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.15.rst:48
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use "
":func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` 自 Python 3.13 起已被弃用。 请使用 "
":func:`os.path.isreserved` 来检测 Windows 上的保留路径。"

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` 自 Python 3.13 起已被弃用。 此函数仅对 Jython 支持有用，具有令人困惑的 "
"API，并且大部分未经测试。"

#: ../../deprecations/pending-removal-in-3.15.rst:58
#: ../../deprecations/pending-removal-in-3.16.rst:96
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
":func:`sysconfig.is_python_build` 的 *check_home* 参数自 Python 3.12 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:63
msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

#: ../../deprecations/pending-removal-in-3.15.rst:65
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does"
" not permit any arguments, but the C version allows any number of positional"
" or keyword arguments, ignoring every argument."
msgstr ""
"在 Python 3.15 中 :func:`~threading.RLock` 将不再接受参数。 传入参数的做法自 Python 3.14 "
"起已被弃用，因为 Python 版本不接受任何参数，而 C 版本允许任意数量的位置或关键字参数，但会忽略所有参数。"

#: ../../deprecations/pending-removal-in-3.15.rst:71
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:73
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: 访问 :attr:`~codeobject.co_lnotab` 的做法自 3.10 起已根据 "
":pep:`626` 被弃用并曾计划在 3.12 中移除，但在 3.12 中实际仅设置了 :exc:`DeprecationWarning`。 可能会在"
" 3.15 中移除。 （由 Nikita Sobolev 在 :gh:`101866` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.15.rst:82
msgid ""
"The undocumented keyword argument syntax for creating "
":class:`~typing.NamedTuple` classes (for example, ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``) has been deprecated since Python "
"3.13. Use the class-based syntax or the functional syntax instead."
msgstr ""
"未写入文档的用于创建 :class:`~typing.NamedTuple` 类的关键字参数语法（例如 ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``）自 Python 3.13 起已被弃用。 请改用基于类的语法或函数语法。"

#: ../../deprecations/pending-removal-in-3.15.rst:88
msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""
"当使用 :class:`~typing.TypedDict` 的函数式语法时，不向 *fields* 形参传递值 (``TD = "
"TypedDict(\"TD\")``) 或传递 ``None`` (``TD = TypedDict(\"TD\", None)``) 的做法自 "
"Python 3.13 起已被弃用。 请改用 ``class TD(TypedDict): pass`` 或 ``TD = "
"TypedDict(\"TD\", {})`` 来创建一个零字段的 TypedDict。"

#: ../../deprecations/pending-removal-in-3.15.rst:95
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module,"
" it has yet to be supported by any major type checker."
msgstr ""
":func:`typing.no_type_check_decorator` 装饰器自 Python 3.13 起已被弃用。 存在于 "
":mod:`typing` 模块八年之后，它仍未被任何主要类型检查器所支持。"

#: ../../deprecations/pending-removal-in-3.15.rst:102
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and "
":meth:`~wave.Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` "
"and :class:`~wave.Wave_write` classes have been deprecated since Python "
"3.13."
msgstr ""
":class:`~wave.Wave_read` 和 :class:`~wave.Wave_write` 类的 "
":meth:`~wave.Wave_read.getmark`, :meth:`!setmark` 和 "
":meth:`~wave.Wave_read.getmarkers` 方法自 Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:107
msgid ":mod:`zipimport`:"
msgstr ":mod:`zipimport`:"

#: ../../deprecations/pending-removal-in-3.15.rst:109
msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""
":meth:`~zipimport.zipimporter.load_module` 自 Python 3.10 起已被弃用。请改用 :meth:`~zipimport.zipimporter.exec_module` 。\n"
"（由李佳昊在 :gh:`125746` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:2
#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr "计划在 Python 3.16 中移除"

#: ../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set "
":attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is "
"deprecated. In Python 3.16, :attr:`!__loader__` will cease to be set or "
"taken into consideration by the import system or the standard library."
msgstr ""
"当设置 :attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>` "
"失败时在模块上设置 :attr:`~module.__loader__` 的做法已被弃用。 在 Python 3.16 "
"中，:attr:`!__loader__` 将不会再被设置或是被导入系统或标准库纳入考虑。"

#: ../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"``'u'`` 格式代码 (:c:type:`wchar_t`) 自 Python 3.3 起已在文档中弃用并自 Python 3.13 "
"起在运行时弃用。 对于 Unicode 字符请改用 ``'w'`` 格式代码 (:c:type:`Py_UCS4`)。"

#: ../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
":func:`!asyncio.iscoroutinefunction` 已被弃用并将在 Python 3.16 中移除，请改用 :func:`inspect.iscoroutinefunction`。\n"
"（由李佳昊和 Kumar Aditya 在 :gh:`122875` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:26
msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ":mod:`asyncio` 策略系统已被弃用并将在 Python 3.16 中移除。 具体而言，是弃用了下列类和函数："

#: ../../deprecations/pending-removal-in-3.16.rst:29
msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ":class:`asyncio.AbstractEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:30
msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ":class:`asyncio.DefaultEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:31
msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsSelectorEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:32
msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsProactorEventLoopPolicy`"

#: ../../deprecations/pending-removal-in-3.16.rst:33
msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ":func:`asyncio.get_event_loop_policy`"

#: ../../deprecations/pending-removal-in-3.16.rst:34
msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ":func:`asyncio.set_event_loop_policy`"

#: ../../deprecations/pending-removal-in-3.16.rst:36
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""
"用户应当使用 :func:`asyncio.run` 或 :class:`asyncio.Runner` 并附带 *loop_factory* "
"以使用想要的事件循环实现。"

#: ../../deprecations/pending-removal-in-3.16.rst:39
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr "例如，在 Windows 上使用 :class:`asyncio.SelectorEventLoop`::"

#: ../../deprecations/pending-removal-in-3.16.rst:41
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"

#: ../../deprecations/pending-removal-in-3.16.rst:48
msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr "（由 Kumar Aditya 在 :gh:`127949` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:50
#: ../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

#: ../../deprecations/pending-removal-in-3.16.rst:52
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"对布尔类型 ``~True`` 或 ``~False`` 执行按位取反的操作自 Python 3.12 起已被弃用，因为它会产生奇怪和不直观的结果 "
"(``-2`` and ``-1``)。 请改用 ``not x`` 来对布尔值执行逻辑否操作。 "
"对于需要对下层整数执行按位取反操作的少数场合，请显式地将其转换为 ``int`` (``~int(x)``)。"

#: ../../deprecations/pending-removal-in-3.16.rst:59
msgid ":mod:`functools`:"
msgstr ":mod:`functools`："

#: ../../deprecations/pending-removal-in-3.16.rst:61
msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""
"调用 :func:`functools.reduce` 的 Python 实现并传入 *function* 或 *sequence* "
"作为关键字参数的做法自 Python 3.14 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.16.rst:64
msgid ":mod:`logging`:"
msgstr ":mod:`logging`："

#: ../../deprecations/pending-removal-in-3.16.rst:66
msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""
"使用 *strm* 参数对自定义日志记录处理器提供支持的做法已被弃用并计划在 Python 3.16 中移除。 改为使用 *stream* "
"参数定义处理器。 （由 Mariusz Felisiak 在 :gh:`115032` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:72
msgid ""
"Valid extensions start with a '.' or are empty for "
":meth:`mimetypes.MimeTypes.add_type`. Undotted extensions are deprecated and"
" will raise a :exc:`ValueError` in Python 3.16. (Contributed by Hugo van "
"Kemenade in :gh:`75223`.)"
msgstr ""
"有效扩展以 \". \" 开头或在 :meth:`mimetypes.MimeTypes.add_type` 为空。 未加点的扩展已弃用，在 "
"Python 3.16 中将引发 :exc:`ValueError`。 （由 Hugo van Kemenade 在 :gh:`75223` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:78
msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

#: ../../deprecations/pending-removal-in-3.16.rst:80
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is"
" now an alias of :exc:`RuntimeError`."
msgstr ""
":class:`!ExecError` 异常自 Python 3.14 起已被弃用。 它自 Python 3.4 起就未被 :mod:`!shutil`"
" 中的任何函数所使用，现在是 :exc:`RuntimeError` 的一个别名。"

#: ../../deprecations/pending-removal-in-3.16.rst:85
msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

#: ../../deprecations/pending-removal-in-3.16.rst:87
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
":meth:`Class.get_methods <symtable.Class.get_methods>` 方法自 Python 3.14 起被弃用。"

#: ../../deprecations/pending-removal-in-3.16.rst:92
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated"
" since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
":func:`~sys._enablelegacywindowsfsencoding` 函数自 Python 3.13 起被弃用。 请改用 "
":envvar:`PYTHONLEGACYWINDOWSFSENCODING` 环境变量。"

#: ../../deprecations/pending-removal-in-3.16.rst:98
msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""
"自Python 3.14 起，:func:`!sysconfig.expand_makefile_vars` 函数已被弃用。请使用 "
":func:`sysconfig.get_paths` 的 ``vars`` 参数代替。"

#: ../../deprecations/pending-removal-in-3.16.rst:104
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr "未写入文档也未被使用的 :attr:`!TarFile.tarfile` 属性自 Python 3.13 起被弃用。"

#: ../../deprecations/pending-removal-in-3.17.rst:2
msgid "Pending removal in Python 3.17"
msgstr "计划在 Python 3.17 中移除"

#: ../../deprecations/pending-removal-in-3.17.rst:6
msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection"
" helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"在 Python 3.14 之前，旧式的联合是通过私有类 ``typing._UnionGenericAlias`` "
"实现的。实现已不再需要该类，但为向后兼容性保留了该类，并计划在 Python 3.17 中删除。用户应使用记录在案的内省助手函数，如 "
":func:`typing.get_origin` 和 :func:`typing.get_args`，而不是依赖于私有的实现细节。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr "计划在未来版本中移除"

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr "以下API将会被移除，尽管具体时间还未确定。"

#: ../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ":mod:`argparse`："

#: ../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are "
"deprecated."
msgstr "嵌套参数组和嵌套互斥组已被弃用 。"

#: ../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to "
":meth:`~argparse.ArgumentParser.add_argument_group` is now deprecated."
msgstr ""
"将未写入文档的关键字参数 *prefix_chars* 传递给 "
":meth:`~argparse.ArgumentParser.add_argument_group` 的做法现在已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr ":class:`argparse.FileType` 类型转换器已弃用 。"

#: ../../deprecations/pending-removal-in-future.rst:18
msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``。"

#: ../../deprecations/pending-removal-in-future.rst:19
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature"
" is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"生成器: ``throw(type, exc, tb)`` 和 ``athrow(type, exc, tb)`` 签名已被弃用：请改用 "
"``throw(exc)`` 和 ``athrow(exc)``，即单参数签名。"

#: ../../deprecations/pending-removal-in-future.rst:22
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords "
":keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, "
":keyword:`in`, :keyword:`is` and :keyword:`or`.  In a future release it will"
" be changed to a syntax error. (:gh:`87999`)"
msgstr ""
"目前 Python 接受数字类字面值后面紧跟关键字的写法，例如 ``0in x``, ``1or x``, ``0if 1else 2``。 它允许像 "
"``[0x1for x in y]`` 这样令人困惑且有歧义的表达式 (它可以被解读为 ``[0x1 for x in y]`` 或者 ``[0x1f "
"or x in y]``)。 如果数字类字面值后面紧跟关键字 :keyword:`and`, :keyword:`else`, "
":keyword:`for`, :keyword:`if`, :keyword:`in`, :keyword:`is` 和 :keyword:`or` "
"中的一个将会引发语法警告。 在未来的版本中它将改为语法错误。 (:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type:"
" these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"对 ``__index__()`` 和 ``__int__()`` 方法返回非 int 类型的支持：将要求这些方法必须返回 :class:`int` "
"的子类的实例。"

#: ../../deprecations/pending-removal-in-future.rst:33
msgid ""
"Support for ``__float__()`` method returning a strict subclass of "
":class:`float`: these methods will be required to return an instance of "
":class:`float`."
msgstr ""
"对 ``__float__()`` 方法返回 :class:`float` 的子类的支持：将要求这些方法必须返回 :class:`float` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:36
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of "
":class:`complex`: these methods will be required to return an instance of "
":class:`complex`."
msgstr ""
"对 ``__complex__()`` 方法返回 :class:`complex` 的子类的支持：将要求这些方法必须返回 "
":class:`complex` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:39
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "将 ``int()`` 委托给 ``__trunc__()`` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:40
msgid ""
"Passing a complex number as the *real* or *imag* argument in the "
":func:`complex` constructor is now deprecated; it should only be passed as a"
" single positional argument. (Contributed by Serhiy Storchaka in "
":gh:`109218`.)"
msgstr ""
"传入一个复数作为 :func:`complex` 构造器中的 *real* 或 *imag* 参数的做法现在已被弃用；它应当仅作为单个位置参数被传入。 "
"（由 Serhiy Storchaka 在 :gh:`109218` 中贡献。）.)"

#: ../../deprecations/pending-removal-in-future.rst:45
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and "
":data:`calendar.FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: ``calendar.January`` 和 ``calendar.February`` 常量已被弃用并由 "
":data:`calendar.JANUARY` 和 :data:`calendar.FEBRUARY` 替代。 （由 Prince Roshan 在 "
":gh:`103636` 中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:50
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. "
"(:gh:`133038`)"
msgstr ":mod:`codecs`：:func:`codecs.open` 请改用 :func:`open` 。 (:gh:`133038`)"

#: ../../deprecations/pending-removal-in-future.rst:52
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ":attr:`codeobject.co_lnotab`: 改用 :meth:`codeobject.co_lines` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:55
msgid ":mod:`datetime`:"
msgstr ":mod:`datetime`:"

#: ../../deprecations/pending-removal-in-future.rst:57
msgid ""
":meth:`~datetime.datetime.utcnow`: use "
"``datetime.datetime.now(tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: 使用 "
"``datetime.datetime.now(tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:59
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use "
"``datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: 使用 "
"``datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:62
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: 复数值必须是一个整数。"

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` *debug_override* 形参已被弃用：改用 "
"*optimization* 形能耐。"

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

#: ../../deprecations/pending-removal-in-future.rst:71
msgid "``EntryPoints`` tuple interface."
msgstr "``EntryPoints`` 元组接口。"

#: ../../deprecations/pending-removal-in-future.rst:72
msgid "Implicit ``None`` on return values."
msgstr "返回值中隐式的 ``None``。"

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: ``warn()`` 方法自 Python 3.3 起已被弃用，请改用 "
":meth:`~logging.warning`。"

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ":mod:`mailbox`: 对 StringIO 输入和文本模式的使用已被弃用，改用 BytesIO 和二进制模式。"

#: ../../deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: 在多线程的进程中调用 :func:`os.register_at_fork`。"

#: ../../deprecations/pending-removal-in-future.rst:82
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is"
" deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: 使用元组值作为 *exc_info* 形参的做法已被弃用，应使用异常实例。"

#: ../../deprecations/pending-removal-in-future.rst:85
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and"
" replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: 现在对于正则表达式中的数字分组引用和分组名称将应用更严格的规则。 现在只接受 ASCII 数字序列作为数字引用。 "
"字节串模式和替换字符串中的分组名称现在只能包含 ASCII 字母和数字以及下划线。 （由 Serhiy Storchaka 在 :gh:`91760` "
"中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ":mod:`!sre_compile`, :mod:`!sre_constants` 和 :mod:`!sre_parse` 模块。"

#: ../../deprecations/pending-removal-in-future.rst:94
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in"
" Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree` 的 *onerror* 形参在 Python 3.12 中已被弃用；请改用 "
"*onexc* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:97
msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` 选项和协议："

#: ../../deprecations/pending-removal-in-future.rst:99
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` 不带 protocol 参数的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:100
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and "
":meth:`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` 和 "
":meth:`!selected_npn_protocol` 已被弃用：请改用 ALPN."

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:110
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:111
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:112
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` 的方法："

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Condition.notifyAll`: use "
":meth:`~threading.Condition.notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: 使用 "
":meth:`~threading.Condition.notify_all`。"

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ":meth:`!threading.Event.isSet`: 使用 :meth:`~threading.Event.is_set`。"

#: ../../deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use "
":attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: 使用 "
":attr:`threading.Thread.daemon` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:120
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use "
":attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: 使用 "
":attr:`threading.Thread.name` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ""
":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: 使用 :meth:`threading.current_thread`。"

#: ../../deprecations/pending-removal-in-future.rst:123
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`: 使用 :meth:`threading.active_count`。"

#: ../../deprecations/pending-removal-in-future.rst:125
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)。"

#: ../../deprecations/pending-removal-in-future.rst:127
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
"内部类 ``typing._UnionGenericAlias`` 不再用于实现 :class:`typing.Union`。 "
"为了保护使用该私有类的用户的兼容性，将至少在 Python 3.17 之前提供兼容性。 （由 Jelle Zijlstra 在 :gh:`105499`"
" 中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:132
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: 从测试用例返回不为 ``None`` 的值的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:135
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ":mod:`urllib.parse` 函数已被弃用：改用 :func:`~urllib.parse.urlparse`"

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splithost()``"
msgstr "``splithost()``"

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:141
msgid "``splitport()``"
msgstr "``splitport()``"

#: ../../deprecations/pending-removal-in-future.rst:142
msgid "``splitquery()``"
msgstr "``splitquery()``"

#: ../../deprecations/pending-removal-in-future.rst:143
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:144
msgid "``splittype()``"
msgstr "``splittype()``"

#: ../../deprecations/pending-removal-in-future.rst:145
msgid "``splituser()``"
msgstr "``splituser()``"

#: ../../deprecations/pending-removal-in-future.rst:146
msgid "``splitvalue()``"
msgstr "``splitvalue()``"

#: ../../deprecations/pending-removal-in-future.rst:147
msgid "``to_bytes()``"
msgstr "``to_bytes()``"

#: ../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` 不应执行部分写入。"

#: ../../deprecations/pending-removal-in-future.rst:152
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an "
":class:`~xml.etree.ElementTree.Element` is deprecated. In a future release "
"it will always return ``True``. Prefer explicit ``len(elem)`` or ``elem is "
"not None`` tests instead."
msgstr ""
":mod:`xml.etree.ElementTree`: 对 :class:`~xml.etree.ElementTree.Element` "
"的真值测试已被弃用。 在未来的发布版中它将始终返回 ``True``。 建议改用显式的 ``len(elem)`` 或 ``elem is not "
"None`` 测试。"

#: ../../deprecations/pending-removal-in-future.rst:157
msgid ""
":func:`sys._clear_type_cache` is deprecated: use "
":func:`sys._clear_internal_caches` instead."
msgstr ""
":func:`sys._clear_type_cache` 已弃用，请改用 :func:`sys._clear_internal_caches` 。"

#: ../../whatsnew/3.13.rst:2033
msgid "CPython Bytecode Changes"
msgstr "CPython 字节码的变化"

#: ../../whatsnew/3.13.rst:2035
msgid ""
"The oparg of :opcode:`YIELD_VALUE` is now ``1`` if the yield is part of a "
"yield-from or await, and ``0`` otherwise. The oparg of :opcode:`RESUME` was "
"changed to add a bit indicating if the except-depth is 1, which is needed to"
" optimize closing of generators. (Contributed by Irit Katriel in "
":gh:`111354`.)"
msgstr ""
"现在 :opcode:`YIELD_VALUE` 的操作数在 yield 是 yield-from 或 await 的一部分时为 ``1``，否则为 "
"``0``。 :opcode:`RESUME` 的操作数被修改为增加一个比特位来指明 except-depth 是否为 "
"1，这是优化生成器的关闭所需要的。 （由 Irit Katriel 在 :gh:`111354` 中贡献。）"

#: ../../whatsnew/3.13.rst:2043
msgid "C API Changes"
msgstr "C API 的变化"

#: ../../whatsnew/3.13.rst:2048
msgid ""
"Add the :ref:`PyMonitoring C API <c-api-monitoring>` for generating "
":pep:`669` monitoring events:"
msgstr "增加 :ref:`PyMonitoring C API <c-api-monitoring>` 用于生成 :pep:`669` 监控事件："

#: ../../whatsnew/3.13.rst:2051
msgid ":c:type:`PyMonitoringState`"
msgstr ":c:type:`PyMonitoringState`"

#: ../../whatsnew/3.13.rst:2052
msgid ":c:func:`PyMonitoring_FirePyStartEvent`"
msgstr ":c:func:`PyMonitoring_FirePyStartEvent`"

#: ../../whatsnew/3.13.rst:2053
msgid ":c:func:`PyMonitoring_FirePyResumeEvent`"
msgstr ":c:func:`PyMonitoring_FirePyResumeEvent`"

#: ../../whatsnew/3.13.rst:2054
msgid ":c:func:`PyMonitoring_FirePyReturnEvent`"
msgstr ":c:func:`PyMonitoring_FirePyReturnEvent`"

#: ../../whatsnew/3.13.rst:2055
msgid ":c:func:`PyMonitoring_FirePyYieldEvent`"
msgstr ":c:func:`PyMonitoring_FirePyYieldEvent`"

#: ../../whatsnew/3.13.rst:2056
msgid ":c:func:`PyMonitoring_FireCallEvent`"
msgstr ":c:func:`PyMonitoring_FireCallEvent`"

#: ../../whatsnew/3.13.rst:2057
msgid ":c:func:`PyMonitoring_FireLineEvent`"
msgstr ":c:func:`PyMonitoring_FireLineEvent`"

#: ../../whatsnew/3.13.rst:2058
msgid ":c:func:`PyMonitoring_FireJumpEvent`"
msgstr ":c:func:`PyMonitoring_FireJumpEvent`"

#: ../../whatsnew/3.13.rst:2059
msgid "``PyMonitoring_FireBranchEvent``"
msgstr "``PyMonitoring_FireBranchEvent``"

#: ../../whatsnew/3.13.rst:2060
msgid ":c:func:`PyMonitoring_FireCReturnEvent`"
msgstr ":c:func:`PyMonitoring_FireCReturnEvent`"

#: ../../whatsnew/3.13.rst:2061
msgid ":c:func:`PyMonitoring_FirePyThrowEvent`"
msgstr ":c:func:`PyMonitoring_FirePyThrowEvent`"

#: ../../whatsnew/3.13.rst:2062
msgid ":c:func:`PyMonitoring_FireRaiseEvent`"
msgstr ":c:func:`PyMonitoring_FireRaiseEvent`"

#: ../../whatsnew/3.13.rst:2063
msgid ":c:func:`PyMonitoring_FireCRaiseEvent`"
msgstr ":c:func:`PyMonitoring_FireCRaiseEvent`"

#: ../../whatsnew/3.13.rst:2064
msgid ":c:func:`PyMonitoring_FireReraiseEvent`"
msgstr ":c:func:`PyMonitoring_FireReraiseEvent`"

#: ../../whatsnew/3.13.rst:2065
msgid ":c:func:`PyMonitoring_FireExceptionHandledEvent`"
msgstr ":c:func:`PyMonitoring_FireExceptionHandledEvent`"

#: ../../whatsnew/3.13.rst:2066
msgid ":c:func:`PyMonitoring_FirePyUnwindEvent`"
msgstr ":c:func:`PyMonitoring_FirePyUnwindEvent`"

#: ../../whatsnew/3.13.rst:2067
msgid ":c:func:`PyMonitoring_FireStopIterationEvent`"
msgstr ":c:func:`PyMonitoring_FireStopIterationEvent`"

#: ../../whatsnew/3.13.rst:2068
msgid ":c:func:`PyMonitoring_EnterScope`"
msgstr ":c:func:`PyMonitoring_EnterScope`"

#: ../../whatsnew/3.13.rst:2069
msgid ":c:func:`PyMonitoring_ExitScope`"
msgstr ":c:func:`PyMonitoring_ExitScope`"

#: ../../whatsnew/3.13.rst:2071
msgid "(Contributed by Irit Katriel in :gh:`111997`)."
msgstr "（由 Irit Katriel 在 :gh:`111997` 中贡献。）"

#: ../../whatsnew/3.13.rst:2073
msgid ""
"Add :c:type:`PyMutex`, a lightweight mutex that occupies a single byte, and "
"the new :c:func:`PyMutex_Lock` and :c:func:`PyMutex_Unlock` functions. "
":c:func:`!PyMutex_Lock` will release the :term:`GIL` (if currently held) if "
"the operation needs to block. (Contributed by Sam Gross in :gh:`108724`.)"
msgstr ""
"增加了 :c:type:`PyMutex`，它是占用一个字节的轻量级互斥锁，以及新的 :c:func:`PyMutex_Lock` 和 "
":c:func:`PyMutex_Unlock` 函数。 如果操作需要阻塞则 :c:func:`!PyMutex_Lock` 将释放 (当前持有的) "
":term:`GIL`。 （由 Sam Gross 在 :gh:`108724` 中贡献。）"

#: ../../whatsnew/3.13.rst:2079
msgid ""
"Add the :ref:`PyTime C API <c-api-time>` to provide access to system clocks:"
msgstr "增加了 :ref:`PyTime C API <c-api-time>` 以提供对系统时钟的访问："

#: ../../whatsnew/3.13.rst:2081
msgid ":c:type:`PyTime_t`."
msgstr ":c:type:`PyTime_t`。"

#: ../../whatsnew/3.13.rst:2082
msgid ":c:var:`PyTime_MIN` and :c:var:`PyTime_MAX`."
msgstr ":c:var:`PyTime_MIN` 和 :c:var:`PyTime_MAX`。"

#: ../../whatsnew/3.13.rst:2083
msgid ":c:func:`PyTime_AsSecondsDouble`."
msgstr ":c:func:`PyTime_AsSecondsDouble`。"

#: ../../whatsnew/3.13.rst:2084
msgid ":c:func:`PyTime_Monotonic`."
msgstr ":c:func:`PyTime_Monotonic`。"

#: ../../whatsnew/3.13.rst:2085
msgid ":c:func:`PyTime_MonotonicRaw`."
msgstr ":c:func:`PyTime_MonotonicRaw`。"

#: ../../whatsnew/3.13.rst:2086
msgid ":c:func:`PyTime_PerfCounter`."
msgstr ":c:func:`PyTime_PerfCounter`。"

#: ../../whatsnew/3.13.rst:2087
msgid ":c:func:`PyTime_PerfCounterRaw`."
msgstr ":c:func:`PyTime_PerfCounterRaw`。"

#: ../../whatsnew/3.13.rst:2088
msgid ":c:func:`PyTime_Time`."
msgstr ":c:func:`PyTime_Time`。"

#: ../../whatsnew/3.13.rst:2089
msgid ":c:func:`PyTime_TimeRaw`."
msgstr ":c:func:`PyTime_TimeRaw`。"

#: ../../whatsnew/3.13.rst:2091
msgid "(Contributed by Victor Stinner and Petr Viktorin in :gh:`110850`.)"
msgstr "（由 Victor Stinner 和 Petr Viktorin 在 :gh:`110850` 中贡献。）"

#: ../../whatsnew/3.13.rst:2093
msgid ""
"Add the :c:func:`PyDict_ContainsString` function with the same behavior as "
":c:func:`PyDict_Contains`, but *key* is specified as a :c:expr:`const char*`"
" UTF-8 encoded bytes string, rather than a :c:expr:`PyObject*`. (Contributed"
" by Victor Stinner in :gh:`108314`.)"
msgstr ""
"增加了 :c:func:`PyDict_ContainsString` 函数，其行为与 :c:func:`PyDict_Contains` 相同，但 "
"*key* 被指定为一个 :c:expr:`const char*` UTF-8 编码的字节串，而不是 :c:expr:`PyObject*`。 （由 "
"Victor Stinner 在 :gh:`108314` 中贡献。）"

#: ../../whatsnew/3.13.rst:2099
msgid ""
"Add the :c:func:`PyDict_GetItemRef` and :c:func:`PyDict_GetItemStringRef` "
"functions, which behave similarly to :c:func:`PyDict_GetItemWithError`, but "
"return a  :term:`strong reference` instead of a :term:`borrowed reference`. "
"Moreover, these functions return ``-1`` on error, removing the need to check"
" :c:func:`!PyErr_Occurred`. (Contributed by Victor Stinner in :gh:`106004`.)"
msgstr ""
"增加了 :c:func:`PyDict_GetItemRef` 和 :c:func:`PyDict_GetItemStringRef` "
"函数，其行为类似于 :c:func:`PyDict_GetItemWithError`，但将返回一个  :term:`strong reference`"
" 而不是 :term:`borrowed reference`。 此外，这些函数在出错时将返回 ``-1``，因而不必再检测 "
":c:func:`!PyErr_Occurred`。 （由 Victor Stinner 在 :gh:`106004` 中贡献。）"

#: ../../whatsnew/3.13.rst:2107
msgid ""
"Add the :c:func:`PyDict_SetDefaultRef` function, which behaves similarly to "
":c:func:`PyDict_SetDefault`, but returns a :term:`strong reference` instead "
"of a :term:`borrowed reference`. This function returns ``-1`` on error, "
"``0`` on insertion, and ``1`` if the key was already present in the "
"dictionary. (Contributed by Sam Gross in :gh:`112066`.)"
msgstr ""
"增加了 :c:func:`PyDict_SetDefaultRef` 函数，其行为类似于 "
":c:func:`PyDict_SetDefault`，但将返回一个 :term:`strong reference` 而不是 "
":term:`borrowed reference`。 此函数在出错时将返回 ``-1``，插入时返回 ``0``，而在键已存在于字典中时返回 "
"``1``。 （由 Sam Gross 在 :gh:`112066` 中贡献。）"

#: ../../whatsnew/3.13.rst:2115
msgid ""
"Add the :c:func:`PyDict_Pop` and :c:func:`PyDict_PopString` functions to "
"remove a key from a dictionary and optionally return the removed value. This"
" is similar to :meth:`dict.pop`, though there is no default value, and "
":exc:`KeyError` is not raised for missing keys. (Contributed by Stefan "
"Behnel and Victor Stinner in :gh:`111262`.)"
msgstr ""
"增加了 :c:func:`PyDict_Pop` 和 :c:func:`PyDict_PopString` 函数用于从字典移除键并可选择返回被移除的值。"
" 这类似于 :meth:`dict.pop`，但是没有默认值，且对缺失的键不会引发 :exc:`KeyError`。 （由 Stefan Behnel "
"和 Victor Stinner 在 :gh:`111262` 中贡献。）"

#: ../../whatsnew/3.13.rst:2122
msgid ""
"Add the :c:func:`PyMapping_GetOptionalItem` and "
":c:func:`PyMapping_GetOptionalItemString` functions as alternatives to "
":c:func:`PyObject_GetItem` and :c:func:`PyMapping_GetItemString` "
"respectively. The new functions do not raise :exc:`KeyError` if the "
"requested key is missing from the mapping. These variants are more "
"convenient and faster if a missing key should not be treated as a failure. "
"(Contributed by Serhiy Storchaka in :gh:`106307`.)"
msgstr ""
"增加了 :c:func:`PyMapping_GetOptionalItem` 和 "
":c:func:`PyMapping_GetOptionalItemString` 函数分别作为 :c:func:`PyObject_GetItem` "
"和 :c:func:`PyMapping_GetItemString` 的替代。 这些新函数在映射中缺失所请求的键时不会引发 "
":exc:`KeyError`。 这些变体形式在键缺失不应被视为执行失败的场合下更为方便和快速。 （由 Serhiy Storchaka 在 "
":gh:`106307` 中贡献。）"

#: ../../whatsnew/3.13.rst:2132
msgid ""
"Add the :c:func:`PyObject_GetOptionalAttr` and "
":c:func:`PyObject_GetOptionalAttrString` functions as alternatives to  "
":c:func:`PyObject_GetAttr` and :c:func:`PyObject_GetAttrString` "
"respectively. The new functions do not raise :exc:`AttributeError` if the "
"requested attribute is not found on the object. These variants are more "
"convenient and faster if the missing attribute should not be treated as a "
"failure. (Contributed by Serhiy Storchaka in :gh:`106521`.)"
msgstr ""
"增加了 :c:func:`PyObject_GetOptionalAttr` 和 "
":c:func:`PyObject_GetOptionalAttrString` 函数分别作为  :c:func:`PyObject_GetAttr` "
"和 :c:func:`PyObject_GetAttrString` 的替代。 这些新函数在对象中未找到所请求的属性时不会引发 "
":exc:`AttributeError`。 这些变体形式在属性缺失不应被视为执行失败的场合下更为方便和快速。 （由 Serhiy Storchaka "
"在 :gh:`106521` 中贡献。）"

#: ../../whatsnew/3.13.rst:2142
msgid ""
"Add the :c:func:`PyErr_FormatUnraisable` function as an extension to "
":c:func:`PyErr_WriteUnraisable` that allows customizing the warning message."
" (Contributed by Serhiy Storchaka in :gh:`108082`.)"
msgstr ""
"增加了 :c:func:`PyErr_FormatUnraisable` 函数作为对 :c:func:`PyErr_WriteUnraisable` "
"的扩展，它允许自定义警告消息。 （由 Serhiy Storchaka 在 :gh:`108082` 中贡献。）"

#: ../../whatsnew/3.13.rst:2147
msgid ""
"Add new functions that return a :term:`strong reference` instead of a "
":term:`borrowed reference` for frame locals, globals, and builtins, as part "
"of :ref:`PEP 667 <whatsnew313-locals-semantics>`:"
msgstr ""
"作为 :ref:`PEP 667 <whatsnew313-locals-semantics>` 的一部分，增加了一组针对帧的 locals, "
"globals 和 builtins 返回 :term:`strong reference` 而不是 :term:`borrowed "
"reference` 的函数："

#: ../../whatsnew/3.13.rst:2151
msgid ""
":c:func:`PyEval_GetFrameBuiltins` replaces :c:func:`PyEval_GetBuiltins`"
msgstr ":c:func:`PyEval_GetFrameBuiltins` 替代 :c:func:`PyEval_GetBuiltins`"

#: ../../whatsnew/3.13.rst:2152
msgid ":c:func:`PyEval_GetFrameGlobals` replaces :c:func:`PyEval_GetGlobals`"
msgstr ":c:func:`PyEval_GetFrameGlobals` 替代 :c:func:`PyEval_GetGlobals`"

#: ../../whatsnew/3.13.rst:2153
msgid ":c:func:`PyEval_GetFrameLocals` replaces :c:func:`PyEval_GetLocals`"
msgstr ":c:func:`PyEval_GetFrameLocals` 替代 :c:func:`PyEval_GetLocals`"

#: ../../whatsnew/3.13.rst:2155
msgid "(Contributed by Mark Shannon and Tian Gao in :gh:`74929`.)"
msgstr "（由 Mark Shannon 和 Tian Gao 在 :gh:`74929` 中贡献。）"

#: ../../whatsnew/3.13.rst:2157
msgid ""
"Add the :c:func:`Py_GetConstant` and :c:func:`Py_GetConstantBorrowed` "
"functions to get :term:`strong <strong reference>` or :term:`borrowed "
"<borrowed reference>` references to constants. For example, "
"``Py_GetConstant(Py_CONSTANT_ZERO)`` returns a strong reference to the "
"constant zero. (Contributed by Victor  Stinner in :gh:`115754`.)"
msgstr ""
"增加了 :c:func:`Py_GetConstant` 和 :c:func:`Py_GetConstantBorrowed` 函数用来获取对常量的 "
":term:`强引用 <strong reference>` 或 :term:`借入引用 <borrowed reference>`。 "
"例如，``Py_GetConstant(Py_CONSTANT_ZERO)`` 将返回一个对常量零的强引用。 （由 Victor  Stinner 在 "
":gh:`115754` 中贡献。）"

#: ../../whatsnew/3.13.rst:2164
msgid ""
"Add the :c:func:`PyImport_AddModuleRef` function as a replacement for "
":c:func:`PyImport_AddModule` that returns a :term:`strong reference` instead"
" of a :term:`borrowed reference`. (Contributed by Victor Stinner in "
":gh:`105922`.)"
msgstr ""
"增加了 :c:func:`PyImport_AddModuleRef` 函数作为 :c:func:`PyImport_AddModule` "
"的替代，它将返回一个 :term:`strong reference` 而不是 :term:`borrowed reference`。 （由 "
"Victor Stinner 在 :gh:`105922` 中贡献。）"

#: ../../whatsnew/3.13.rst:2169
msgid ""
"Add the :c:func:`Py_IsFinalizing` function to check whether the main Python "
"interpreter is :term:`shutting down <interpreter shutdown>`. (Contributed by"
" Victor Stinner in :gh:`108014`.)"
msgstr ""
"增加了 :c:func:`Py_IsFinalizing` 函数用于检测主 Python 解释器是否 :term:`正在关闭 <interpreter "
"shutdown>`。 （由 Victor Stinner 在 :gh:`108014` 中贡献。）"

#: ../../whatsnew/3.13.rst:2174
msgid ""
"Add the :c:func:`PyList_GetItemRef` function as a replacement for "
":c:func:`PyList_GetItem` that returns a :term:`strong reference` instead of "
"a :term:`borrowed reference`. (Contributed by Sam Gross in :gh:`114329`.)"
msgstr ""
"增加了 :c:func:`PyList_GetItemRef` 函数作为 :c:func:`PyList_GetItem` 的替代，它将返回一个 "
":term:`strong reference` 而不是 :term:`borrowed reference`。 （由 Sam Gross 在 "
":gh:`114329` 中贡献。）"

#: ../../whatsnew/3.13.rst:2179
msgid ""
"Add the :c:func:`PyList_Extend` and :c:func:`PyList_Clear` functions, "
"mirroring the Python :meth:`!list.extend` and :meth:`!list.clear` methods. "
"(Contributed by Victor Stinner in :gh:`111138`.)"
msgstr ""
"增加了 :c:func:`PyList_Extend` 和 :c:func:`PyList_Clear` 函数，对应于 Python "
":meth:`!list.extend` 和 :meth:`!list.clear` 方法。 （由 Victor Stinner 在 "
":gh:`111138` 中贡献。）"

#: ../../whatsnew/3.13.rst:2183
msgid ""
"Add the :c:func:`PyLong_AsInt` function. It behaves similarly to "
":c:func:`PyLong_AsLong`, but stores the result in a C :c:expr:`int` instead "
"of a C :c:expr:`long`. (Contributed by Victor Stinner in :gh:`108014`.)"
msgstr ""
"增加了 :c:func:`PyLong_AsInt` 函数。 其行为类似于 :c:func:`PyLong_AsLong`，但会将结果存储于一个 C "
":c:expr:`int` 而不是 C :c:expr:`long` 。 （由 Victor Stinner 在 :gh:`108014` 中贡献。）"

#: ../../whatsnew/3.13.rst:2188
msgid ""
"Add the :c:func:`PyLong_AsNativeBytes`, :c:func:`PyLong_FromNativeBytes`, "
"and :c:func:`PyLong_FromUnsignedNativeBytes` functions to simplify "
"converting between native integer types and Python :class:`int` objects. "
"(Contributed by Steve Dower in :gh:`111140`.)"
msgstr ""
"增加了 :c:func:`PyLong_AsNativeBytes`, :c:func:`PyLong_FromNativeBytes` 和 "
":c:func:`PyLong_FromUnsignedNativeBytes` 等函数以简化原生整数类型与 Python :class:`int` "
"对象之间的转换。 （由 Steve Dower 在 :gh:`111140` 中贡献。）"

#: ../../whatsnew/3.13.rst:2194
msgid ""
"Add :c:func:`PyModule_Add` function, which is similar to "
":c:func:`PyModule_AddObjectRef` and :c:func:`PyModule_AddObject`, but always"
" steals a reference to the value. (Contributed by Serhiy Storchaka in "
":gh:`86493`.)"
msgstr ""
"增加了 :c:func:`PyModule_Add` 函数，它类似于 :c:func:`PyModule_AddObjectRef` 和 "
":c:func:`PyModule_AddObject`，但总是会偷取一个对值的引用。 （由 Serhiy Storchaka 在 "
":gh:`86493` 中贡献。）"

#: ../../whatsnew/3.13.rst:2199
msgid ""
"Add the :c:func:`PyObject_GenericHash` function that implements the default "
"hashing function of a Python object. (Contributed by Serhiy Storchaka in "
":gh:`113024`.)"
msgstr ""
"增加了实现 Python 对象的默认哈希函数的 :c:func:`PyObject_GenericHash` 函数。 （由 Serhiy "
"Storchaka 在 :gh:`113024` 中贡献。）"

#: ../../whatsnew/3.13.rst:2203
msgid ""
"Add the :c:func:`Py_HashPointer` function to hash a raw pointer. "
"(Contributed by Victor Stinner in :gh:`111545`.)"
msgstr ""
"增加了 :c:func:`Py_HashPointer` 函数用于对原始指针执行哈希运算。 （由 Victor Stinner 在 "
":gh:`111545` 中贡献。）"

#: ../../whatsnew/3.13.rst:2206
msgid ""
"Add the :c:func:`PyObject_VisitManagedDict` and "
":c:func:`PyObject_ClearManagedDict` functions. which must be called by the "
"traverse and clear functions of a type using the "
":c:macro:`Py_TPFLAGS_MANAGED_DICT` flag. The `pythoncapi-compat project`_ "
"can be used to use these functions with Python 3.11 and 3.12. (Contributed "
"by Victor Stinner in :gh:`107073`.)"
msgstr ""
"增加了 :c:func:`PyObject_VisitManagedDict` 和 "
":c:func:`PyObject_ClearManagedDict` 函数。 它们必须由一个使用 "
":c:macro:`Py_TPFLAGS_MANAGED_DICT` 旗标的类型的遍历和清理函数来调用。 `pythoncapi-compat "
"project`_ 可被用于在 Python 3.11 和 3.12 中使用这些函数。 （由 Victor Stinner 在 :gh:`107073`"
" 中贡献。）"

#: ../../whatsnew/3.13.rst:2214
msgid ""
"Add the :c:func:`PyRefTracer_SetTracer` and :c:func:`PyRefTracer_GetTracer` "
"functions, which enable tracking object creation and destruction in the same"
" way that the :mod:`tracemalloc` module does. (Contributed by Pablo Galindo "
"in :gh:`93502`.)"
msgstr ""
"增加了 :c:func:`PyRefTracer_SetTracer` 和 :c:func:`PyRefTracer_GetTracer` "
"函数，它们会以与 :mod:`tracemalloc` 模块相同的方式启用对象创建和销毁的追踪。 （由 Pablo Galindo 在 "
":gh:`93502` 中贡献。）"

#: ../../whatsnew/3.13.rst:2220
msgid ""
"Add the :c:func:`PySys_AuditTuple` function as an alternative to "
":c:func:`PySys_Audit` that takes event arguments as a Python :class:`tuple` "
"object. (Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""
"增加 :c:func:`PySys_AuditTuple` 函数作为 :c:func:`PySys_Audit` 的替代，它将接受一个 Python "
":class:`tuple` 对象作为事件参数。 （由 Victor Stinner 在 :gh:`85283` 中贡献。）"

#: ../../whatsnew/3.13.rst:2225
msgid ""
"Add the :c:func:`PyThreadState_GetUnchecked()` function as an alternative to"
" :c:func:`PyThreadState_Get()` that doesn't kill the process with a fatal "
"error if it is ``NULL``. The caller is responsible for checking if the "
"result is ``NULL``. (Contributed by Victor Stinner in :gh:`108867`.)"
msgstr ""
"增加 :c:func:`PyThreadState_GetUnchecked()` 函数作为 :c:func:`PyThreadState_Get()`"
" 的替代，它在结果为 ``NULL`` 时不会杀死进程并报告致命错误。 调用方要负责检查结果是否为 ``NULL``。 （由 Victor "
"Stinner 在 :gh:`108867` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:2231
msgid ""
"Add the :c:func:`PyType_GetFullyQualifiedName` function to get the type's "
"fully qualified name. The module name is prepended if "
":attr:`type.__module__` is a string and is not equal to either "
"``'builtins'`` or ``'__main__'``. (Contributed by Victor Stinner in "
":gh:`111696`.)"
msgstr ""
"增加 :c:func:`PyType_GetFullyQualifiedName` 函数用来获取类型的完整限定名称。 如果 "
":attr:`type.__module__` 是一个字符串且不等于 ``'builtins'`` 或 ``'__main__'`` "
"则会在开头添加模块名称。 （由 Victor Stinner 在 :gh:`111696` 中贡献。）"

#: ../../whatsnew/3.13.rst:2237
msgid ""
"Add the :c:func:`PyType_GetModuleName` function to get the type's module "
"name. This is equivalent to getting the :attr:`type.__module__` attribute. "
"(Contributed by Eric Snow and Victor Stinner in :gh:`111696`.)"
msgstr ""
"增加了 :c:func:`PyType_GetModuleName` 函数用来获取类型的模块名称。 这等价于获取 "
":attr:`type.__module__` 属性。 （由 Eric Snow 和 Victor Stinner 在 :gh:`111696` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:2242
msgid ""
"Add the :c:func:`PyUnicode_EqualToUTF8AndSize` and "
":c:func:`PyUnicode_EqualToUTF8` functions to compare a Unicode object with a"
" :c:expr:`const char*` UTF-8 encoded string and ``1`` if they are equal or "
"``0`` otherwise. These functions do not raise exceptions. (Contributed by "
"Serhiy Storchaka in :gh:`110289`.)"
msgstr ""
"添加了 :c:func:`PyUnicode_EqualToUTF8AndSize` 和 :c:func:`PyUnicode_EqualToUTF8`"
" 函数以将 Unicode 对象与 :c:expr:`const char*` UTF-8 编码的字符串进行比较并在它们相等时返回 ``1`` 否则返回"
" ``0``。 这些函数不会引发异常。 （由 Serhiy Storchaka 在 :gh:`110289` 中贡献。）"

#: ../../whatsnew/3.13.rst:2249
msgid ""
"Add the :c:func:`PyWeakref_GetRef` function as an alternative to  "
":c:func:`PyWeakref_GetObject` that returns a :term:`strong reference` or "
"``NULL`` if the referent is no longer live. (Contributed by Victor Stinner "
"in :gh:`105927`.)"
msgstr ""
"增加 :c:func:`PyWeakref_GetRef` 函数作为 :c:func:`PyWeakref_GetObject` 的替代，它将返回一个 "
":term:`strong reference` 或是在引用对象不再存活时返回 ``NULL``。 （由 Victor Stinner 在 "
":gh:`105927` 中贡献。）"

#: ../../whatsnew/3.13.rst:2255
msgid "Add fixed variants of functions which silently ignore errors:"
msgstr "增加了静默地忽略错误的函数的已修正变体形式："

#: ../../whatsnew/3.13.rst:2257
msgid ""
":c:func:`PyObject_HasAttrWithError` replaces :c:func:`PyObject_HasAttr`."
msgstr ":c:func:`PyObject_HasAttrWithError` 替代 :c:func:`PyObject_HasAttr`。"

#: ../../whatsnew/3.13.rst:2258
msgid ""
":c:func:`PyObject_HasAttrStringWithError` replaces "
":c:func:`PyObject_HasAttrString`."
msgstr ""
":c:func:`PyObject_HasAttrStringWithError` 替代 "
":c:func:`PyObject_HasAttrString`。"

#: ../../whatsnew/3.13.rst:2260
msgid ""
":c:func:`PyMapping_HasKeyWithError` replaces :c:func:`PyMapping_HasKey`."
msgstr ":c:func:`PyMapping_HasKeyWithError` 替代 :c:func:`PyMapping_HasKey`。"

#: ../../whatsnew/3.13.rst:2261
msgid ""
":c:func:`PyMapping_HasKeyStringWithError` replaces "
":c:func:`PyMapping_HasKeyString`."
msgstr ""
":c:func:`PyMapping_HasKeyStringWithError` 替代 "
":c:func:`PyMapping_HasKeyString`。"

#: ../../whatsnew/3.13.rst:2264
msgid ""
"The new functions return ``-1`` for errors and the standard ``1`` for true "
"and ``0`` for false."
msgstr "这些新函数将返回 ``-1`` 表示错误而返回标准的 ``1`` 表示真值以及 ``0`` 表示假值。"

#: ../../whatsnew/3.13.rst:2267
msgid "(Contributed by Serhiy Storchaka in :gh:`108511`.)"
msgstr "（由 Serhiy Storchaka 在 :gh:`108511` 中贡献。）"

#: ../../whatsnew/3.13.rst:2271
msgid "Changed C APIs"
msgstr "被改变的 C API"

#: ../../whatsnew/3.13.rst:2273
msgid ""
"The *keywords* parameter of :c:func:`PyArg_ParseTupleAndKeywords` and "
":c:func:`PyArg_VaParseTupleAndKeywords` now has type :c:expr:`char * const "
"*` in C and :c:expr:`const char * const *` in C++, instead of :c:expr:`char "
"**`. In C++, this makes these functions compatible with arguments of type "
":c:expr:`const char * const *`, :c:expr:`const char **`, or :c:expr:`char * "
"const *` without an explicit type cast. In C, the functions only support "
"arguments of type :c:expr:`char * const *`. This can be overridden with the "
":c:macro:`PY_CXX_CONST` macro. (Contributed by Serhiy Storchaka in "
":gh:`65210`.)"
msgstr ""
"现在 :c:func:`PyArg_ParseTupleAndKeywords` 和 "
":c:func:`PyArg_VaParseTupleAndKeywords` 的 *keywords* 形参类型在 C 中为 "
":c:expr:`char * const *` 而在 C++ 中为 :c:expr:`const char * const *`，而不是 "
":c:expr:`char **`。 在 C++ 中，这将使这些函数与类型为 :c:expr:`const char * const *`, "
":c:expr:`const char **` 或 :c:expr:`char * const *` 的参数保持兼容而不必使用显式的类型转换。 在 C "
"中，这些函数仅支持类型为 :c:expr:`char * const *` 的参数。 这可以通过 :c:macro:`PY_CXX_CONST` "
"宏来覆盖。 （由 Serhiy Storchaka 在 :gh:`65210` 中贡献。）.)"

#: ../../whatsnew/3.13.rst:2285
msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` now supports non-ASCII keyword "
"parameter names. (Contributed by Serhiy Storchaka in :gh:`110815`.)"
msgstr ""
"现在 :c:func:`PyArg_ParseTupleAndKeywords` 支持非 ASCII 关键字形参名称。 （由 Serhiy "
"Storchaka 在 :gh:`110815` 中贡献。）"

#: ../../whatsnew/3.13.rst:2289
msgid ""
"The :c:func:`!PyCode_GetFirstFree` function is now unstable API and is now "
"named :c:func:`PyUnstable_Code_GetFirstFree`. (Contributed by Bogdan "
"Romanyuk in :gh:`115781`.)"
msgstr ""
"现在 :c:func:`!PyCode_GetFirstFree` 函数属于非稳定 API 并被命名为 "
":c:func:`PyUnstable_Code_GetFirstFree`。 （由 Bogdan Romanyuk 在 :gh:`115781` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:2293
msgid ""
"The :c:func:`PyDict_GetItem`, :c:func:`PyDict_GetItemString`, "
":c:func:`PyMapping_HasKey`, :c:func:`PyMapping_HasKeyString`, "
":c:func:`PyObject_HasAttr`, :c:func:`PyObject_HasAttrString`, and "
":c:func:`PySys_GetObject` functions, each of which clears all errors which "
"occurred when calling them now reports these errors using "
":func:`sys.unraisablehook`. You may replace them with other functions as "
"recommended in the documentation. (Contributed by Serhiy Storchaka in "
":gh:`106672`.)"
msgstr ""
"现在当调用 :c:func:`PyDict_GetItem`, :c:func:`PyDict_GetItemString`, "
":c:func:`PyMapping_HasKey`, :c:func:`PyMapping_HasKeyString`, "
":c:func:`PyObject_HasAttr`, :c:func:`PyObject_HasAttrString` 和 "
":c:func:`PySys_GetObject` 等函数时如果使用 :func:`sys.unraisablehook` "
"报告这些错误它们将清空所有已发生的错误。 你可以用本文档中推荐的其他函数来替换它们。 （由 Serhiy Storchaka 在 "
":gh:`106672` 中贡献。）"

#: ../../whatsnew/3.13.rst:2302
msgid ""
"Add support for the ``%T``, ``%#T``, ``%N`` and ``%#N`` formats to "
":c:func:`PyUnicode_FromFormat`:"
msgstr ""
"为 :c:func:`PyUnicode_FromFormat` 增加了 ``%T``, ``%#T``, ``%N`` 和 ``%#N`` "
"格式的支持："

#: ../../whatsnew/3.13.rst:2305
msgid "``%T``: Get the fully qualified name of an object type"
msgstr "``%T``: 获取一个对象类型的完整限定名称"

#: ../../whatsnew/3.13.rst:2306
msgid "``%#T``: As above, but use a colon as the separator"
msgstr "``%#T``: 同上，但使用冒号作为分隔符"

#: ../../whatsnew/3.13.rst:2307
msgid "``%N``: Get the fully qualified name of a type"
msgstr "``%N``: 获取一个类型的完整限定名称"

#: ../../whatsnew/3.13.rst:2308
msgid "``%#N``: As above, but use a colon as the separator"
msgstr "``%#N``: 同上，但使用冒号作为分隔符"

#: ../../whatsnew/3.13.rst:2310
msgid ""
"See :pep:`737` for more information. (Contributed by Victor Stinner in "
":gh:`111696`.)"
msgstr "请参阅 :pep:`737` 了解详情。 （由 Victor Stinner 在 :gh:`111696` 中贡献。）"

#: ../../whatsnew/3.13.rst:2313
msgid ""
"You no longer have to define the ``PY_SSIZE_T_CLEAN`` macro before including"
" :file:`Python.h` when using ``#`` formats in :ref:`format codes <arg-"
"parsing-string-and-buffers>`. APIs accepting the format codes always use "
"``Py_ssize_t`` for ``#`` formats. (Contributed by Inada Naoki in "
":gh:`104922`.)"
msgstr ""
"当在 :ref:`格式编解码器 <arg-parsing-string-and-buffers>` 中使用 ``#`` 时包括 "
":file:`Python.h` 之前你不必再定义 ``PY_SSIZE_T_CLEAN`` 宏。 接受格式编解码器的 API 总是会使用 "
"``Py_ssize_t`` 作为 ``#`` 格式。 （由 Inada Naoki 在 :gh:`104922` 中贡献。）"

#: ../../whatsnew/3.13.rst:2319
msgid ""
"If Python is built in :ref:`debug mode <debug-build>` or :option:`with "
"assertions <--with-assertions>`, :c:func:`PyTuple_SET_ITEM` and "
":c:func:`PyList_SET_ITEM` now check the index argument with an assertion. "
"(Contributed by Victor Stinner in :gh:`106168`.)"
msgstr ""
"如果 Python 是使用 :ref:`调试模式 <debug-build>` 或 :option:`附带断言 <--with-assertions>`"
" 构建的，:c:func:`PyTuple_SET_ITEM` 和 :c:func:`PyList_SET_ITEM` 现在将通过一个断言来检查 "
"index 参数。 （由 Victor Stinner 在 :gh:`106168` 中贡献。）"

#: ../../whatsnew/3.13.rst:2327
msgid "Limited C API Changes"
msgstr "受限 C API 的改变"

#: ../../whatsnew/3.13.rst:2329
msgid "The following functions are now included in the Limited C API:"
msgstr "下列函数现在被包括在受限 C API 中："

#: ../../whatsnew/3.13.rst:2331
msgid ":c:func:`PyMem_RawMalloc`"
msgstr ":c:func:`PyMem_RawMalloc`"

#: ../../whatsnew/3.13.rst:2332
msgid ":c:func:`PyMem_RawCalloc`"
msgstr ":c:func:`PyMem_RawCalloc`"

#: ../../whatsnew/3.13.rst:2333
msgid ":c:func:`PyMem_RawRealloc`"
msgstr ":c:func:`PyMem_RawRealloc`"

#: ../../whatsnew/3.13.rst:2334
msgid ":c:func:`PyMem_RawFree`"
msgstr ":c:func:`PyMem_RawFree`"

#: ../../whatsnew/3.13.rst:2335
msgid ":c:func:`PySys_Audit`"
msgstr ":c:func:`PySys_Audit`"

#: ../../whatsnew/3.13.rst:2336
msgid ":c:func:`PySys_AuditTuple`"
msgstr ":c:func:`PySys_AuditTuple`"

#: ../../whatsnew/3.13.rst:2337
msgid ":c:func:`PyType_GetModuleByDef`"
msgstr ":c:func:`PyType_GetModuleByDef`"

#: ../../whatsnew/3.13.rst:2339
msgid ""
"(Contributed by Victor Stinner in :gh:`85283`, :gh:`85283`, and "
":gh:`116936`.)"
msgstr "（由 Victor Stinner 在 :gh:`85283`, :gh:`85283` 和 :gh:`116936` 中贡献。）"

#: ../../whatsnew/3.13.rst:2341
msgid ""
"Python built with :option:`--with-trace-refs` (tracing references) now "
"supports the :ref:`Limited API <limited-c-api>`. (Contributed by Victor "
"Stinner in :gh:`108634`.)"
msgstr ""
"使用 :option:`--with-trace-refs` (跟踪引用) 构建的 Python 现在支持 :ref:`受限 API <limited-"
"c-api>`。 （由 Victor Stinner 在 :gh:`108634` 中贡献。）"

#: ../../whatsnew/3.13.rst:2347
msgid "Removed C APIs"
msgstr "被移除的 C API"

#: ../../whatsnew/3.13.rst:2349
msgid ""
"Remove several functions, macros, variables, etc with names prefixed by "
"``_Py`` or ``_PY`` (which are considered private). If your project is "
"affected  by one of these removals and you believe that the removed API "
"should remain available, please :ref:`open a new issue <using-the-tracker>` "
"to request a public C API and add ``cc: @vstinner`` to the issue to notify "
"Victor Stinner. (Contributed by Victor Stinner in :gh:`106320`.)"
msgstr ""
"移除了一些名称带有 ``_Py`` 或 ``_PY`` 前缀（即被视为私有）的函数、宏和变量。 如果你的项目受到了此项修改的影响并且你认为这些被移除的 "
"API 应当保持可用，请 :ref:`发起一个新事项 <using-the-tracker>` 以请求提供公有 C API 并向该事项添加 ``cc: "
"@vstinner`` 来通知 Victor Stinner。 （由 Victor Stinner 在 :gh:`106320` 中贡献。）"

#: ../../whatsnew/3.13.rst:2357
msgid ""
"Remove old buffer protocols deprecated in Python 3.0. Use "
":ref:`bufferobjects` instead."
msgstr "移除在 Python 3.0 中已弃用的旧缓冲区协议。 改用 :ref:`bufferobjects`。"

#: ../../whatsnew/3.13.rst:2360
msgid ""
":c:func:`!PyObject_CheckReadBuffer`: Use :c:func:`PyObject_CheckBuffer` to "
"test whether the object supports the buffer protocol. Note that "
":c:func:`PyObject_CheckBuffer` doesn't guarantee that "
":c:func:`PyObject_GetBuffer` will succeed. To test if the object is actually"
" readable, see the next example of :c:func:`PyObject_GetBuffer`."
msgstr ""
":c:func:`!PyObject_CheckReadBuffer`: 使用 :c:func:`PyObject_CheckBuffer` "
"来测试对象是否支持缓冲区协议。 请注意 :c:func:`PyObject_CheckBuffer` 并不保证 "
":c:func:`PyObject_GetBuffer` 会成功。 要测试对象是否确实可读，参见下面的 "
":c:func:`PyObject_GetBuffer` 示例。"

#: ../../whatsnew/3.13.rst:2368
msgid ""
":c:func:`!PyObject_AsCharBuffer`, :c:func:`!PyObject_AsReadBuffer`: Use "
":c:func:`PyObject_GetBuffer` and :c:func:`PyBuffer_Release` instead:"
msgstr ""
":c:func:`!PyObject_AsCharBuffer`, :c:func:`!PyObject_AsReadBuffer`: 改用 "
":c:func:`PyObject_GetBuffer` 和 :c:func:`PyBuffer_Release`:"

#: ../../whatsnew/3.13.rst:2371
msgid ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_SIMPLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// Use `view.buf` and `view.len` to read from the buffer.\n"
"// You may need to cast buf as `(const char*)view.buf`.\n"
"PyBuffer_Release(&view);"
msgstr ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_SIMPLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// 使用 `view.buf` 和 `view.len` 从缓冲区读取。\n"
"// 你可能需要将 buf 转换为 `(const char*)view.buf`。\n"
"PyBuffer_Release(&view);"

#: ../../whatsnew/3.13.rst:2381
msgid ""
":c:func:`!PyObject_AsWriteBuffer`: Use :c:func:`PyObject_GetBuffer` and "
":c:func:`PyBuffer_Release` instead:"
msgstr ""
":c:func:`!PyObject_AsWriteBuffer`: 改用 :c:func:`PyObject_GetBuffer` 和 "
":c:func:`PyBuffer_Release`:"

#: ../../whatsnew/3.13.rst:2384
msgid ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_WRITABLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// Use `view.buf` and `view.len` to write to the buffer.\n"
"PyBuffer_Release(&view);"
msgstr ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_WRITABLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// 使用 `view.buf` 和 `view.len` 向缓冲区写入。\n"
"PyBuffer_Release(&view);"

#: ../../whatsnew/3.13.rst:2393
msgid "(Contributed by Inada Naoki in :gh:`85275`.)"
msgstr "（由 Inada Naoki 在 :gh:`85275` 中贡献。）"

#: ../../whatsnew/3.13.rst:2395
msgid "Remove various functions deprecated in Python 3.9:"
msgstr "删除了在 Python 3.9 中弃用的各种函数："

#: ../../whatsnew/3.13.rst:2397
msgid ""
":c:func:`!PyEval_CallObject`, :c:func:`!PyEval_CallObjectWithKeywords`: Use "
":c:func:`PyObject_CallNoArgs` or :c:func:`PyObject_Call` instead."
msgstr ""
":c:func:`!PyEval_CallObject`, :c:func:`!PyEval_CallObjectWithKeywords`: 改用 "
":c:func:`PyObject_CallNoArgs` 或 :c:func:`PyObject_Call`。"

#: ../../whatsnew/3.13.rst:2402
msgid ""
"In :c:func:`PyObject_Call`, positional arguments must be a :class:`tuple` "
"and must not be ``NULL``, and keyword arguments must be a :class:`dict` or "
"``NULL``, whereas the removed functions checked argument types and accepted "
"``NULL`` positional and keyword arguments. To replace "
"``PyEval_CallObjectWithKeywords(func, NULL, kwargs)`` with "
":c:func:`PyObject_Call`, pass an empty tuple as positional arguments using "
":c:func:`PyTuple_New(0) <PyTuple_New>`."
msgstr ""
"在 :c:func:`PyObject_Call` 中，位置参数必须是 :class:`tuple` 且不可为 ``NULL``，而关键字参数必须是 "
":class:`dict` 或 ``NULL``，但是被移除的函数会检查参数类型且接受 ``NULL`` 位置参数和关键字参数。 要将 "
"``PyEval_CallObjectWithKeywords(func, NULL, kwargs)`` 替换为 "
":c:func:`PyObject_Call`，请使用 :c:func:`PyTuple_New(0) <PyTuple_New>` "
"传入一个空元组作为位置参数。"

#: ../../whatsnew/3.13.rst:2412
msgid ""
":c:func:`!PyEval_CallFunction`: Use :c:func:`PyObject_CallFunction` instead."
msgstr ":c:func:`!PyEval_CallFunction`: 改用 :c:func:`PyObject_CallFunction`。"

#: ../../whatsnew/3.13.rst:2414
msgid ""
":c:func:`!PyEval_CallMethod`: Use :c:func:`PyObject_CallMethod` instead."
msgstr ":c:func:`!PyEval_CallMethod`: 改用 :c:func:`PyObject_CallMethod`。"

#: ../../whatsnew/3.13.rst:2416
msgid ":c:func:`!PyCFunction_Call`: Use :c:func:`PyObject_Call` instead."
msgstr ":c:func:`!PyCFunction_Call`: 改用 :c:func:`PyObject_Call`。"

#: ../../whatsnew/3.13.rst:2419
msgid "(Contributed by Victor Stinner in :gh:`105107`.)"
msgstr "（由 Victor Stinner 在 :gh:`105107` 中贡献。）"

#: ../../whatsnew/3.13.rst:2421
msgid ""
"Remove the following old functions to configure the Python initialization, "
"deprecated in Python 3.11:"
msgstr "移除了下列用于配置 Python 初始化的旧函数，它们在 Python 3.11 中已被弃用："

#: ../../whatsnew/3.13.rst:2424
msgid ""
":c:func:`!PySys_AddWarnOptionUnicode`: Use :c:member:`PyConfig.warnoptions` "
"instead."
msgstr ""
":c:func:`!PySys_AddWarnOptionUnicode`: 改用 :c:member:`PyConfig.warnoptions`。"

#: ../../whatsnew/3.13.rst:2426
msgid ""
":c:func:`!PySys_AddWarnOption`: Use :c:member:`PyConfig.warnoptions` "
"instead."
msgstr ":c:func:`!PySys_AddWarnOption`: 改用 :c:member:`PyConfig.warnoptions`。"

#: ../../whatsnew/3.13.rst:2428
msgid ""
":c:func:`!PySys_AddXOption`: Use :c:member:`PyConfig.xoptions` instead."
msgstr ":c:func:`!PySys_AddXOption`: 改用 :c:member:`PyConfig.xoptions`。"

#: ../../whatsnew/3.13.rst:2430
msgid ""
":c:func:`!PySys_HasWarnOptions`: Use :c:member:`PyConfig.xoptions` instead."
msgstr ":c:func:`!PySys_HasWarnOptions`: 改用 :c:member:`PyConfig.xoptions`。"

#: ../../whatsnew/3.13.rst:2432
msgid ""
":c:func:`!PySys_SetPath`: Set :c:member:`PyConfig.module_search_paths` "
"instead."
msgstr ""
":c:func:`!PySys_SetPath`: 改为设置 :c:member:`PyConfig.module_search_paths`。"

#: ../../whatsnew/3.13.rst:2434
msgid ""
":c:func:`!Py_SetPath`: Set :c:member:`PyConfig.module_search_paths` instead."
msgstr ":c:func:`!Py_SetPath`: 改为设置 :c:member:`PyConfig.module_search_paths`。"

#: ../../whatsnew/3.13.rst:2436
msgid ""
":c:func:`!Py_SetStandardStreamEncoding`: Set "
":c:member:`PyConfig.stdio_encoding` instead, and set also maybe "
":c:member:`PyConfig.legacy_windows_stdio` (on Windows)."
msgstr ""
":c:func:`!Py_SetStandardStreamEncoding`: 改为设置 "
":c:member:`PyConfig.stdio_encoding`，或者也可以设置 "
":c:member:`PyConfig.legacy_windows_stdio` (在 Windows 上)。"

#: ../../whatsnew/3.13.rst:2439
msgid ""
":c:func:`!_Py_SetProgramFullPath`: Set :c:member:`PyConfig.executable` "
"instead."
msgstr ""
":c:func:`!_Py_SetProgramFullPath`: 改为设置 :c:member:`PyConfig.executable`。"

#: ../../whatsnew/3.13.rst:2442
msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`), added to Python 3.8. "
"(Contributed by Victor Stinner in :gh:`105145`.)"
msgstr ""
"改用新的 :ref:`Python 初始化配置 <init-config>` 的 :c:type:`PyConfig` API "
"(:pep:`587`)，在 Python 3.8 已添加。 （由 Victor Stinner 在 :gh:`105145` 中贡献。）"

#: ../../whatsnew/3.13.rst:2446
msgid ""
"Remove :c:func:`!PyEval_AcquireLock` and :c:func:`!PyEval_ReleaseLock` "
"functions, deprecated in Python 3.2. They didn't update the current thread "
"state. They can be replaced with:"
msgstr ""
"移除 :c:func:`!PyEval_AcquireLock` 和 :c:func:`!PyEval_ReleaseLock` 函数，它们在 "
"Python 3.2 中已被弃用。 它们不会更新当前线程状态。 它们可被替换为："

#: ../../whatsnew/3.13.rst:2451
msgid ":c:func:`PyEval_SaveThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ":c:func:`PyEval_SaveThread` 和 :c:func:`PyEval_RestoreThread`；"

#: ../../whatsnew/3.13.rst:2452
msgid ""
"low-level :c:func:`PyEval_AcquireThread` and :c:func:`PyEval_RestoreThread`;"
msgstr "低层级的 :c:func:`PyEval_AcquireThread` 和 :c:func:`PyEval_RestoreThread`；"

#: ../../whatsnew/3.13.rst:2453
msgid "or :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release`."
msgstr "或者 :c:func:`PyGILState_Ensure` 和 :c:func:`PyGILState_Release`。"

#: ../../whatsnew/3.13.rst:2455
msgid "(Contributed by Victor Stinner in :gh:`105182`.)"
msgstr "（由 Victor Stinner 在 :gh:`105182` 中贡献。）"

#: ../../whatsnew/3.13.rst:2457
msgid ""
"Remove the :c:func:`!PyEval_ThreadsInitialized` function, deprecated in "
"Python 3.9. Since Python 3.7, :c:func:`!Py_Initialize` always creates the "
"GIL: calling :c:func:`!PyEval_InitThreads` does nothing and "
":c:func:`!PyEval_ThreadsInitialized` always returns non-zero. (Contributed "
"by Victor Stinner in :gh:`105182`.)"
msgstr ""
"删除了在 Python 3.9 弃用的 :c:func:`!PyEval_ThreadsInitialized` 函数。自 Python 3.7 "
"起，:c:func:`!Py_Initialize` 总是创建全局解释器锁 ：调用 :c:func:`!PyEval_InitThreads` "
"不做任何事情，而 :c:func:`!PyEval_ThreadsInitialized` 总返回非零值。 （由 Victor Stinner 在 "
":gh:`105182` 中贡献。）"

#: ../../whatsnew/3.13.rst:2464
msgid ""
"Remove the :c:func:`!_PyInterpreterState_Get` alias to "
":c:func:`PyInterpreterState_Get()` which was kept for backward compatibility"
" with Python 3.8. The `pythoncapi-compat project`_ can be used to get "
":c:func:`PyInterpreterState_Get()` on Python 3.8 and older. (Contributed by "
"Victor Stinner in :gh:`106320`.)"
msgstr ""
"移除了 :c:func:`PyInterpreterState_Get()` 的别名 "
":c:func:`!_PyInterpreterState_Get`，它曾经因要向下兼容 Python 3.8 而被保留。 在 Python 3.8 "
"及更旧版本中可以使用 `pythoncapi-compat project`_ 来获得 "
":c:func:`PyInterpreterState_Get()`。 （由 Victor Stinner 在 :gh:`106320` 中贡献。）"

#: ../../whatsnew/3.13.rst:2471
msgid ""
"Remove the private :c:func:`!_PyObject_FastCall` function: use "
":c:func:`!PyObject_Vectorcall` which is available since Python 3.8 "
"(:pep:`590`). (Contributed by Victor Stinner in :gh:`106023`.)"
msgstr ""
"移除了私有的 :c:func:`!_PyObject_FastCall` 函数：请使用自 Python 3.8 起增加的 "
":c:func:`!PyObject_Vectorcall` (:pep:`590`)。 （由 Victor Stinner 在 "
":gh:`106023` 中贡献。）"

#: ../../whatsnew/3.13.rst:2476
msgid ""
"Remove the ``cpython/pytime.h`` header file, which only contained private "
"functions. (Contributed by Victor Stinner in :gh:`106316`.)"
msgstr ""
"移除了 ``cpython/pytime.h`` 头文件，它仅包含私有函数。 （由 Victor Stinner 在 :gh:`106316` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:2480
msgid ""
"Remove the undocumented ``PY_TIMEOUT_MAX`` constant from the limited C API. "
"(Contributed by Victor Stinner in :gh:`110014`.)"
msgstr ""
"从受限 C API 移除了未写入文档的 ``PY_TIMEOUT_MAX`` 常量。 （由 Victor Stinner 在 :gh:`110014` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:2483
msgid ""
"Remove the old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END``. Replace both with the new macros "
"``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``. (Contributed by Irit Katriel "
"in :gh:`105111`.)"
msgstr ""
"移除了旧的 trashcan 宏 ``Py_TRASHCAN_SAFE_BEGIN`` 和 ``Py_TRASHCAN_SAFE_END``。 "
"将两者替换为新的宏 ``Py_TRASHCAN_BEGIN`` 和 ``Py_TRASHCAN_END``。 （由 Irit Katriel 在 "
":gh:`105111` 中贡献。）"

#: ../../whatsnew/3.13.rst:2490
msgid "Deprecated C APIs"
msgstr "已弃用的 C API"

#: ../../whatsnew/3.13.rst:2492
msgid "Deprecate old Python initialization functions:"
msgstr "已弃用旧的 Python 初始化函数："

#: ../../whatsnew/3.13.rst:2494
#: ../../deprecations/c-api-pending-removal-in-3.15.rst:62
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and "
":data:`!warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: 改为清除 :data:`sys.warnoptions` 和 "
":data:`!warnings.filters`。"

#: ../../whatsnew/3.13.rst:2496
msgid ":c:func:`Py_GetExecPrefix`: Get :data:`sys.exec_prefix` instead."
msgstr ":c:func:`Py_GetExecPrefix`: 改为获取 :data:`sys.exec_prefix`。"

#: ../../whatsnew/3.13.rst:2498
msgid ":c:func:`Py_GetPath`: Get :data:`sys.path` instead."
msgstr ":c:func:`Py_GetPath`: 改为获取 :data:`sys.path`。"

#: ../../whatsnew/3.13.rst:2500
msgid ":c:func:`Py_GetPrefix`: Get :data:`sys.prefix` instead."
msgstr ":c:func:`Py_GetPrefix`: 改为获取 :data:`sys.prefix`。"

#: ../../whatsnew/3.13.rst:2502
msgid ":c:func:`Py_GetProgramFullPath`: Get :data:`sys.executable` instead."
msgstr ":c:func:`Py_GetProgramFullPath`: 改为获取 :data:`sys.executable`。"

#: ../../whatsnew/3.13.rst:2504
msgid ":c:func:`Py_GetProgramName`: Get :data:`sys.executable` instead."
msgstr ":c:func:`Py_GetProgramName`: 改为获取 :data:`sys.executable`。"

#: ../../whatsnew/3.13.rst:2506
msgid ""
":c:func:`Py_GetPythonHome`: Get :c:member:`PyConfig.home` or the "
":envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: 改为获取 :c:member:`PyConfig.home` 或 "
":envvar:`PYTHONHOME` 环境变量。"

#: ../../whatsnew/3.13.rst:2510
msgid "(Contributed by Victor Stinner in :gh:`105145`.)"
msgstr "（由 Victor Stinner 在 :gh:`105145` 中贡献。）"

#: ../../whatsnew/3.13.rst:2512
msgid ""
":term:`Soft deprecate <soft deprecated>` the :c:func:`PyEval_GetBuiltins`, "
":c:func:`PyEval_GetGlobals`, and :c:func:`PyEval_GetLocals` functions, which"
" return a :term:`borrowed reference`. (Soft deprecated as part of "
":pep:`667`.)"
msgstr ""
":term:`软弃用 <soft deprecated>` :c:func:`PyEval_GetBuiltins`, "
":c:func:`PyEval_GetGlobals` 和 :c:func:`PyEval_GetLocals` 函数，它们会返回 "
":term:`borrowed reference`。 （作为 :pep:`667` 的一部分被软弃用。）"

#: ../../whatsnew/3.13.rst:2518
msgid ""
"Deprecate the :c:func:`PyImport_ImportModuleNoBlock` function, which is just"
" an alias to :c:func:`PyImport_ImportModule` since Python 3.3. (Contributed "
"by Victor Stinner in :gh:`105396`.)"
msgstr ""
"弃用了 :c:func:`PyImport_ImportModuleNoBlock` 函数，它自 Python 3.3 起就只是 "
":c:func:`PyImport_ImportModule` 的别名。 （由 Victor Stinner 在 :gh:`105396` 中贡献。）"

#: ../../whatsnew/3.13.rst:2522
msgid ""
":term:`Soft deprecate <soft deprecated>` the :c:func:`PyModule_AddObject` "
"function. It should be replaced with :c:func:`PyModule_Add` or "
":c:func:`PyModule_AddObjectRef`. (Contributed by Serhiy Storchaka in "
":gh:`86493`.)"
msgstr ""
":term:`软弃用 <soft deprecated>` :c:func:`PyModule_AddObject` 函数。 它应被替换为 "
":c:func:`PyModule_Add` 或 :c:func:`PyModule_AddObjectRef`。 （由 Serhiy "
"Storchaka 在 :gh:`86493` 中贡献。）"

#: ../../whatsnew/3.13.rst:2528
msgid ""
"Deprecate the old ``Py_UNICODE`` and ``PY_UNICODE_TYPE`` types and the "
":c:macro:`!Py_UNICODE_WIDE` define. Use the :c:type:`wchar_t` type directly "
"instead. Since Python 3.3, ``Py_UNICODE`` and ``PY_UNICODE_TYPE`` are just "
"aliases to :c:type:`!wchar_t`. (Contributed by Victor Stinner in "
":gh:`105156`.)"
msgstr ""
"软弃用旧的 ``Py_UNICODE`` 和 ``PY_UNICODE_TYPE`` 类型和 :c:macro:`!Py_UNICODE_WIDE` "
"定义。 改为直接使用 :c:type:`wchar_t` 类型。 自 Python 3.3 起，``Py_UNICODE`` 和 "
"``PY_UNICODE_TYPE`` 就只是 :c:type:`!wchar_t` 的别名。 （由 Victor Stinner 在 "
":gh:`105156` 中贡献。）"

#: ../../whatsnew/3.13.rst:2535
msgid ""
"Deprecate the :c:func:`PyWeakref_GetObject` and "
":c:func:`PyWeakref_GET_OBJECT` functions, which return a :term:`borrowed "
"reference`. Replace them with the new :c:func:`PyWeakref_GetRef` function, "
"which returns a :term:`strong reference`. The `pythoncapi-compat project`_ "
"can be used to get :c:func:`PyWeakref_GetRef` on Python 3.12 and older. "
"(Contributed by Victor Stinner in :gh:`105927`.)"
msgstr ""
"弃用 :c:func:`PyWeakref_GetObject` 和 :c:func:`PyWeakref_GET_OBJECT` 函数，它们都是返回 "
":term:`borrowed reference`。 将它们替换为新的 :c:func:`PyWeakref_GetRef` 函数，它是返回 "
":term:`strong reference`。 在 Python 3.12 或更旧的版本中可以使用 `pythoncapi-compat "
"project`_ 来获取 :c:func:`PyWeakref_GetRef`。 （由 Victor Stinner 在 :gh:`105927` "
"中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:4
msgid ""
"The ``ma_version_tag`` field in :c:type:`PyDictObject` for extension modules"
" (:pep:`699`; :gh:`101193`)."
msgstr ""
":c:type:`PyDictObject` 中的 ``ma_version_tag`` 字段用于扩展模块 ( :pep:`699` ; "
":gh:`101193` )。"

#: ../../deprecations/c-api-pending-removal-in-3.14.rst:7
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases (:gh:`95388`)."
msgstr ""
"创建 :c:data:`immutable types<Py_TPFLAGS_IMMUTABLETYPE>`  的可变基础 ( :gh:`95388` "
")。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use "
":c:func:`PyImport_ImportModule` instead."
msgstr ""
"The :c:func:`PyImport_ImportModuleNoBlock`: 改用 "
":c:func:`PyImport_ImportModule`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:6
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use "
":c:func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project "
"<https://github.com/python/pythoncapi-compat/>`__ can be used to get "
":c:func:`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""
":c:func:`PyWeakref_GetObject` 和 :c:func:`PyWeakref_GET_OBJECT`: 改用 "
":c:func:`PyWeakref_GetRef`。 在 Python 3.12 及更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取 "
":c:func:`PyWeakref_GetRef`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:10
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use "
":c:type:`wchar_t` instead."
msgstr ""
":c:type:`Py_UNICODE` 类型和 :c:macro:`!Py_UNICODE_WIDE` 宏：改用 :c:type:`wchar_t`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:12
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ":c:func:`!PyUnicode_AsDecodedObject`: 改用 :c:func:`PyCodec_Decode`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:14
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead;"
" Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: 改用 :c:func:`PyCodec_Decode`；请注意某些编解码器"
" (例如 \"base64\") 可能返回 :class:`str` 以外的类型，比如 :class:`bytes`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:17
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ":c:func:`!PyUnicode_AsEncodedObject`: 改用 :c:func:`PyCodec_Encode`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:19
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead;"
" Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: 使用 :c:func:`PyCodec_Encode` "
"代替；请注意，某些编解码器（如 \"base64\"）可能返回 :class:`bytes` 之外的类型，如 :class:`str`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:22
msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr "Python 初始化函数， Python 3.13 中弃用："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:24
msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""
":c:func:`Py_GetPath`:使用  :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>`   (:data:`sys.path`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:27
msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use "
":c:func:`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if "
":ref:`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetPrefix`:使用  :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) 代替。如果需要处理 :ref:`virtual "
"environments<venv-def>` ，请使用 :c:func:`PyConfig_Get(\"prefix\") "
"<PyConfig_Get>` (:data:`sys.prefix`) 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:32
msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use "
":c:func:`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` "
"(:data:`sys.exec_prefix`) if :ref:`virtual environments <venv-def>` need to "
"be handled."
msgstr ""
":c:func:`Py_GetExecPrefix`:使用 "
":c:func:`PyConfig_Get(\"base_exec_prefix\")<PyConfig_Get>` "
"(:data:`sys.base_exec_prefix`) 代替。如果需要处理 :ref:`virtual environments<venv-"
"def>` ，请使用 :c:func:`PyConfig_Get(\"exec_prefix\")<PyConfig_Get>` "
"(:data:`sys.exec_prefix`) 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:38
msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`:使用 :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:41
msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramName`:使用 :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:44
msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: 使用 :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` 或 :envvar:`PYTHONHOME` 环境变量代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:48
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat/>`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and "
"older."
msgstr ""
"在 Python 3.13 和更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取 :c:func:`PyConfig_Get`"
" 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:52
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr "用于配置 Python 的初始化的函数，在 Python 3.11 中已弃用："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:54
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgvEx()`: 改为设置 :c:member:`PyConfig.argv`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:56
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgv()`: 改为设置 :c:member:`PyConfig.argv`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:58
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: 改为设置 :c:member:`PyConfig.program_name`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:60
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ":c:func:`!Py_SetPythonHome()`: 改为设置 :c:member:`PyConfig.home`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:65
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` instead."
msgstr ":c:func:`Py_InitializeFromConfig` API 应与 :c:type:`PyConfig` 一起使用。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:68
msgid "Global configuration variables:"
msgstr "全局配置变量："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:70
msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or "
":c:func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DebugFlag`: 改用 :c:member:`PyConfig.parser_debug` 或 "
":c:func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:73
msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or "
":c:func:`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: 改用 :c:member:`PyConfig.verbose` 或 "
":c:func:`PyConfig_Get(\"verbose\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:76
msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or "
":c:func:`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_QuietFlag`: 改用 :c:member:`PyConfig.quiet` 或 "
":c:func:`PyConfig_Get(\"quiet\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:79
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or "
":c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: 改用 :c:member:`PyConfig.interactive` 或 "
":c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:82
msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or "
":c:func:`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InspectFlag`: 改用 :c:member:`PyConfig.inspect` 或 "
":c:func:`PyConfig_Get(\"inspect\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:85
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or "
":c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: 改用 :c:member:`PyConfig.optimization_level` or "
":c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:88
msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or "
":c:func:`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: 改用 :c:member:`PyConfig.site_import` 或 "
":c:func:`PyConfig_Get(\"site_import\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:91
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or "
":c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: 改用 :c:member:`PyConfig.bytes_warning` or "
":c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:94
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or "
":c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: 使用 :c:member:`PyConfig.pathconfig_warnings` 或 "
":c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:97
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: 使用 :c:member:`PyConfig.use_environment` 或"
" :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:100
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: 使用 :c:member:`PyConfig.write_bytecode` 或 "
":c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:103
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use "
":c:member:`PyConfig.user_site_directory` or "
":c:func:`PyConfig_Get(\"user_site_directory\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: 使用 :c:member:`PyConfig.user_site_directory`"
" 或 :c:func:`PyConfig_Get(\"user_site_directory\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:106
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or "
":c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: 使用 :c:member:`PyConfig.buffered_stdio` 或 "
":c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:109
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: 使用 :c:member:`PyConfig.use_hash_seed` 和 "
":c:member:`PyConfig.hash_seed` 或 :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:113
msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or "
":c:func:`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: 使用 :c:member:`PyConfig.isolated` 或 "
":c:func:`PyConfig_Get(\"isolated\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:116
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use "
":c:member:`PyPreConfig.legacy_windows_fs_encoding` or "
":c:func:`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` "
"instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: 使用 "
":c:member:`PyPreConfig.legacy_windows_fs_encoding` 或 "
":c:func:`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:119
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use "
":c:member:`PyConfig.legacy_windows_stdio` or "
":c:func:`PyConfig_Get(\"legacy_windows_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: 使用 "
":c:member:`PyConfig.legacy_windows_stdio` 或 "
":c:func:`PyConfig_Get(\"legacy_windows_stdio\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:122
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, "
":c:var:`!Py_HasFileSystemDefaultEncoding`: Use "
":c:member:`PyConfig.filesystem_encoding` or "
":c:func:`PyConfig_Get(\"filesystem_encoding\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`, "
":c:var:`!Py_HasFileSystemDefaultEncoding`: 使用 "
":c:member:`PyConfig.filesystem_encoding` 或 "
":c:func:`PyConfig_Get(\"filesystem_encoding\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:125
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use "
":c:member:`PyConfig.filesystem_errors` or "
":c:func:`PyConfig_Get(\"filesystem_errors\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: 使用 "
":c:member:`PyConfig.filesystem_errors` 或 "
":c:func:`PyConfig_Get(\"filesystem_errors\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:128
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or "
":c:func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see "
":c:func:`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: 使用 :c:member:`PyPreConfig.utf8_mode` 或 "
":c:func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` 代替。 (参见 "
":c:func:`Py_PreInitialize`)。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:133
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be "
"used to get these options at runtime."
msgstr ""
":c:func:`Py_InitializeFromConfig` API 应与 :c:type:`PyConfig` "
"一起使用，以设置这些选项。或者使用 :c:func:`PyConfig_Get` 在运行时获取这些选项。"

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:4
msgid "The bundled copy of ``libmpdec``."
msgstr "捆绑的 ``libmpdec`` 副本。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:2
msgid "Pending removal in Python 3.18"
msgstr "计划在 Python 3.18 中移除"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:4
msgid "Deprecated private functions (:gh:`128863`):"
msgstr "弃用的私有函数（:gh:`128863`）："

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:6
msgid ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."
msgstr ":c:func:`!_PyBytes_Join`：使用 :c:func:`PyBytes_Join`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:7
msgid ""
":c:func:`!_PyDict_GetItemStringWithError`: use "
":c:func:`PyDict_GetItemStringRef`."
msgstr ""
":c:func:`!_PyDict_GetItemStringWithError`：使用 "
":c:func:`PyDict_GetItemStringRef`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:8
msgid ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."
msgstr ":c:func:`!_PyDict_Pop()`：:c:func:`PyDict_Pop`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:9
msgid ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."
msgstr ":c:func:`!_PyLong_Sign()`：使用 :c:func:`PyLong_GetSign`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:10
msgid ""
":c:func:`!_PyLong_FromDigits` and :c:func:`!_PyLong_New`: use "
":c:func:`PyLongWriter_Create`."
msgstr ""
":c:func:`!_PyLong_FromDigits` 和 :c:func:`!_PyLong_New`：使用 "
":c:func:`PyLongWriter_Create`."

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:12
msgid ""
":c:func:`!_PyThreadState_UncheckedGet`: use "
":c:func:`PyThreadState_GetUnchecked`."
msgstr ""
":c:func:`!_PyThreadState_UncheckedGet`：使用 "
":c:func:`PyThreadState_GetUnchecked`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:13
msgid ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."
msgstr ":c:func:`!_PyUnicode_AsString`：使用 :c:func:`PyUnicode_AsUTF8`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:14
msgid ""
":c:func:`!_PyUnicodeWriter_Init`: replace ``_PyUnicodeWriter_Init(&writer)``"
" with :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Init`: 将 ``_PyUnicodeWriter_Init(&writer)`` 替换为 "
":c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:17
msgid ""
":c:func:`!_PyUnicodeWriter_Finish`: replace "
"``_PyUnicodeWriter_Finish(&writer)`` with "
":c:func:`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Finish`: 将 ``_PyUnicodeWriter_Finish(&writer)`` "
"替换为 :c:func:`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:20
msgid ""
":c:func:`!_PyUnicodeWriter_Dealloc`: replace "
"``_PyUnicodeWriter_Dealloc(&writer)`` with "
":c:func:`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Dealloc`: 将 ``_PyUnicodeWriter_Dealloc(&writer)``"
" 替换为 :c:func:`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:23
msgid ""
":c:func:`!_PyUnicodeWriter_WriteChar`: replace "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` with "
":c:func:`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteChar`: 将 "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:26
msgid ""
":c:func:`!_PyUnicodeWriter_WriteStr`: replace "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` with "
":c:func:`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteStr`: 将 ``_PyUnicodeWriter_WriteStr(&writer,"
" str)`` 替换为 :c:func:`PyUnicodeWriter_WriteStr(writer, str) "
"<PyUnicodeWriter_WriteStr>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:29
msgid ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: replace "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` with "
":c:func:`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: 将 "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:32
msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: 将 "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:35
msgid ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: replace "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` with "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: 将 "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:38
msgid ":c:func:`!_PyUnicodeWriter_Prepare`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_Prepare`: (无替代)。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:39
msgid ":c:func:`!_PyUnicodeWriter_PrepareKind`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_PrepareKind`: (无替代)。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:40
msgid ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."
msgstr ":c:func:`!_Py_HashPointer`：使用 :c:func:`Py_HashPointer`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:41
msgid ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."
msgstr ":c:func:`!_Py_fopen_obj`：使用 :c:func:`Py_fopen`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:43
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat/>`__ can be used to get these new public functions on Python 3.13 and"
" older."
msgstr ""
"在 Python 3.13 和更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取这些新的公有函数。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr "以下 API 已被弃用，将被移除，但目前尚未确定移除日期。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: 自 Python 3.8 起不再需要。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ":c:func:`PyErr_Fetch`: 改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: 改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ":c:func:`PyErr_Restore`: 改用 :c:func:`PyErr_SetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: 改用 :c:func:`PyModule_GetFilenameObject`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ":c:func:`PyOS_AfterFork`: 改用 :c:func:`PyOS_AfterFork_Child`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: 改用 :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: 自 Python 3.12 起不再需要"

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ""
":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ":c:func:`!PyErr_Display`: 改用 :c:func:`PyErr_DisplayException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: 改用 :c:func:`!_PyErr_ChainExceptions1`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ":c:member:`!PyBytesObject.ob_shash` 成员：改为调用 :c:func:`PyObject_Hash`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid "Thread Local Storage (TLS) API:"
msgstr "线程本地存储 (TLS) API："

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ":c:func:`PyThread_create_key`: 改用 :c:func:`PyThread_tss_alloc`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:33
msgid ""
":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ":c:func:`PyThread_delete_key`: 改用 :c:func:`PyThread_tss_free`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ":c:func:`PyThread_set_key_value`: 改用 :c:func:`PyThread_tss_set`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:37
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ":c:func:`PyThread_get_key_value`: 改用 :c:func:`PyThread_tss_get`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:39
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: 改用 :c:func:`PyThread_tss_delete`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:41
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: 自 Python 3.7 起不再需要。"

#: ../../whatsnew/3.13.rst:2559
msgid "Build Changes"
msgstr "构建变化"

#: ../../whatsnew/3.13.rst:2561
msgid ""
"``arm64-apple-ios`` and ``arm64-apple-ios-simulator`` are both now :pep:`11`"
" tier 3 platforms. (:ref:`PEP 730 <whatsnew313-platform-support>` written "
"and implementation contributed by Russell Keith-Magee in :gh:`114099`.)"
msgstr ""
"现在 ``arm64-apple-ios`` 和 ``arm64-apple-ios-simulator`` 都是 :pep:`11` 第 3 "
"层级的平台。 (:ref:`PEP 730 <whatsnew313-platform-support>` 由 Russell Keith-Magee "
"编写并在 :gh:`114099` 中贡献实现。)"

#: ../../whatsnew/3.13.rst:2566
msgid ""
"``aarch64-linux-android`` and ``x86_64-linux-android`` are both now "
":pep:`11` tier 3 platforms. (:ref:`PEP 738 <whatsnew313-platform-support>` "
"written and implementation contributed by Malcolm Smith in :gh:`116622`.)"
msgstr ""
"现在 ``aarch64-linux-android`` 和 ``x86_64-linux-android`` 都是 :pep:`11` 第 3 "
"层级的平台。 (:ref:`PEP 738 <whatsnew313-platform-support>` 由 Malcolm Smith 编写并在 "
":gh:`116622` 中贡献实现。)"

#: ../../whatsnew/3.13.rst:2571
msgid ""
"``wasm32-wasi`` is now a :pep:`11` tier 2 platform. (Contributed by Brett "
"Cannon in :gh:`115192`.)"
msgstr ""
"现在 ``wasm32-wasi`` 是 :pep:`11` 第 2 层级的平台。 （由 Brett Cannon 在 :gh:`115192` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:2574
msgid ""
"``wasm32-emscripten`` is no longer a :pep:`11` supported platform. "
"(Contributed by Brett Cannon in :gh:`115192`.)"
msgstr ""
"``wasm32-emscripten`` 不再是 :pep:`11` 的受支持平台。 （由 Brett Cannon 在 :gh:`115192` "
"中贡献。）"

#: ../../whatsnew/3.13.rst:2577
msgid ""
"Building CPython now requires a compiler with support for the C11 atomic "
"library, GCC built-in atomic functions, or MSVC interlocked intrinsics."
msgstr "现在构建 CPython 需要带有 C11 atomic 库支持的编译器、GCC 内置 atomic 函数或 MSVC 互锁内生函数。"

#: ../../whatsnew/3.13.rst:2580
msgid ""
"Autoconf 2.71 and aclocal 1.16.5 are now required to regenerate the "
":file:`configure` script. (Contributed by Christian Heimes in :gh:`89886` "
"and by Victor Stinner in :gh:`112090`.)"
msgstr ""
"现在需要有 autoconf 2.71 和 aclocal 1.16.5 才能重新生成 :file:`configure` 脚本。 （由 "
"Christian Heimes 在 :gh:`89886` 中并由 Victor Stinner 在 :gh:`112090` 中贡献。）"

#: ../../whatsnew/3.13.rst:2584
msgid ""
"SQLite 3.15.2 or newer is required to build the :mod:`sqlite3` extension "
"module. (Contributed by Erlend Aasland in :gh:`105875`.)"
msgstr ""
"需要 SQLite 3.15.2 或更新的版本才能构建 :mod:`sqlite3` 扩展模块。 （由 Erlend Aasland 在 "
":gh:`105875` 中贡献。）"

#: ../../whatsnew/3.13.rst:2588
msgid ""
"CPython now bundles the `mimalloc library`_ by default. It is licensed under"
" the MIT license; see :ref:`mimalloc license <mimalloc-license>`. The "
"bundled mimalloc has custom changes, see :gh:`113141` for details. "
"(Contributed by Dino Viehland in :gh:`109914`.)"
msgstr ""
"现在 CPython 默认会捆绑 `mimalloc library`_。 它使用 MIT 许可证提供许可；请参阅 :ref:`mimalloc "
"license <mimalloc-license>`。 捆绑的 mimalloc 带有定制的修改，详情参见 :gh:`113141`。 （由 Dino"
" Viehland 在 :gh:`109914` 中贡献。）"

#: ../../whatsnew/3.13.rst:2596
msgid ""
"The :file:`configure` option :option:`--with-system-libmpdec` now defaults "
"to ``yes``. The bundled copy of ``libmpdec`` will be removed in Python 3.16."
msgstr ""
"现在 :file:`configure` 选项 :option:`--with-system-libmpdec` 默认为 ``yes``。 捆绑的 "
"``libmpdec`` 副本将在 Python 3.16 中被移除。"

#: ../../whatsnew/3.13.rst:2600
msgid ""
"Python built with :file:`configure` :option:`--with-trace-refs` (tracing "
"references) is now ABI compatible with the Python release build and "
":ref:`debug build <debug-build>`. (Contributed by Victor Stinner in "
":gh:`108634`.)"
msgstr ""
"使用 :file:`configure` :option:`--with-trace-refs` (跟踪引用) 构建的 Python 现在与 "
"Python 发布构建版和 :ref:`调试构建版 <debug-build>` 是 ABI 兼容的。 （由 Victor Stinner 在 "
":gh:`108634` 中贡献。）"

#: ../../whatsnew/3.13.rst:2605
msgid ""
"On POSIX systems, the pkg-config (``.pc``) filenames now include the ABI "
"flags.  For example, the free-threaded build generates ``python-3.13t.pc`` "
"and the debug build generates ``python-3.13d.pc``."
msgstr ""
"在 POSIX 系统上，pkg-config (``.pc``) 文件名现在会包括 ABI 旗标。 例如，自由线程构建版将生成 "
"``python-3.13t.pc`` 而调试构建版将生成 ``python-3.13d.pc``。"

#: ../../whatsnew/3.13.rst:2609
msgid ""
"The ``errno``, ``fcntl``, ``grp``, ``md5``, ``pwd``, ``resource``, "
"``termios``, ``winsound``, ``_ctypes_test``, "
"``_multiprocessing.posixshmem``, ``_scproxy``, ``_stat``, ``_statistics``, "
"``_testconsole``, ``_testimportmultiple`` and ``_uuid`` C extensions are now"
" built with the :ref:`limited C API <limited-c-api>`. (Contributed by Victor"
" Stinner in :gh:`85283`.)"
msgstr ""
"现在 ``errno``, ``fcntl``, ``grp``, ``md5``, ``pwd``, ``resource``, "
"``termios``, ``winsound``, ``_ctypes_test``, "
"``_multiprocessing.posixshmem``, ``_scproxy``, ``_stat``, ``_statistics``, "
"``_testconsole``, ``_testimportmultiple`` 和 ``_uuid`` C 扩展是使用 :ref:`受限 C API"
" <limited-c-api>` 构建的。 （由 Victor Stinner 在 :gh:`85283` 中贡献。）"

#: ../../whatsnew/3.13.rst:2618
msgid "Porting to Python 3.13"
msgstr "移植到 Python 3.13"

#: ../../whatsnew/3.13.rst:2620
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.13.rst:2624
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.13.rst:2628
msgid ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` introduces several changes to "
"the semantics of :func:`locals` and :attr:`f_locals <frame.f_locals>`:"
msgstr ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` 引入了对 :func:`locals` 和 "
":attr:`f_locals <frame.f_locals>` 语义的多项更改："

#: ../../whatsnew/3.13.rst:2631
msgid ""
"Calling :func:`locals` in an :term:`optimized scope` now produces an "
"independent snapshot on each call, and hence no longer implicitly updates "
"previously returned references. Obtaining the legacy CPython behavior now "
"requires explicit calls to update the initially returned dictionary with the"
" results of subsequent calls to :func:`!locals`. Code execution functions "
"that implicitly target :func:`!locals` (such as ``exec`` and ``eval``) must "
"be passed an explicit namespace to access their results in an optimized "
"scope. (Changed as part of :pep:`667`.)"
msgstr ""
"在 :term:`optimized scope` 中调用 :func:`locals` "
"时，每次调用都会生成一个独立的快照，因此不再隐式更新之前返回的引用。要获得以往版本 CPython 的行为，现需显式调用以使用后来调用 "
":func:`!locals` 得到的结果来更新初次调用返回的字典。隐式使用 :func:`!locals` 的代码执行函数 (如 ``exec`` 和"
" ``eval``) 必须传入一个显式命名空间，才能在已优化的作用域中访问其结果。（此更改为 :pep:`667` 的一部分。） "

#: ../../whatsnew/3.13.rst:2640
msgid ""
"Calling :func:`locals` from a comprehension at module or class scope "
"(including via ``exec`` or ``eval``) once more behaves as if the "
"comprehension were running as an independent nested function (i.e. the local"
" variables from the containing scope are not included). In Python 3.12, this"
" had changed to include the local variables from the containing scope when "
"implementing :pep:`709`. (Changed as part of :pep:`667`.)"
msgstr ""
"从模块作用域或类作用域的推导式中调用 :func:`locals`（包括 ``exec`` 或 ``eval`` "
"导致的间接调用）时，行为再次表现得像是推导式作为独立的嵌套函数运行（即不包含外部作用域的局部变量）。在 Python 3.12 中，此场景下的行为曾按照"
" :pep:`709` 更改为包含存放推导式的作用域的局部变量。（此更改为 :pep:`667` 的一部分。） "

#: ../../whatsnew/3.13.rst:2647
msgid ""
"Accessing :attr:`FrameType.f_locals <frame.f_locals>` in an :term:`optimized"
" scope` now returns a write-through proxy rather than a snapshot that gets "
"updated at ill-specified times. If a snapshot is desired, it must be created"
" explicitly with ``dict`` or the proxy's ``.copy()`` method. (Changed as "
"part of :pep:`667`.)"
msgstr ""
"在 :term:`optimized scope` 中访问 :attr:`FrameType.f_locals <frame.f_locals>` "
"现在会返回一个写入代理，而不是一个在不明确时间更新的快照。如果需要快照，必须使用 ``dict`` 或该代理的 ``.copy()`` "
"方法显式地创建。（此修改是 :pep:`667` 的一部分。）"

#: ../../whatsnew/3.13.rst:2653
msgid ""
":class:`functools.partial` now emits a :exc:`FutureWarning` when used as a "
"method. The behavior will change in future Python versions. Wrap it in "
":func:`staticmethod` if you want to preserve the old behavior. (Contributed "
"by Serhiy Storchaka in :gh:`121027`.)"
msgstr ""
"当作为方法使用时，:class:`functools.partial` 现在会发出 :exc:`FutureWarning`。该行为将在 Python "
"的未来版本中更改。如果想保留旧行为，请将其包装在 :func:`staticmethod` 中。（由 Serhiy Storchaka 在 "
":gh:`121027` 贡献。） "

#: ../../whatsnew/3.13.rst:2659
msgid ""
"An :exc:`OSError` is now raised by :func:`getpass.getuser` for any failure "
"to retrieve a username, instead of :exc:`ImportError` on non-Unix platforms "
"or :exc:`KeyError` on Unix platforms where the password database is empty."
msgstr ""
"现在当无法获取到用户名时 :func:`getpass.getuser` 将会引发 :exc:`OSError`，而不是在非 Unix 平台上引发 "
":exc:`ImportError` 或因密码数据库为空在 Unix 平台上引发 :exc:`KeyError`。"

#: ../../whatsnew/3.13.rst:2664
msgid ""
"The value of the :attr:`!mode` attribute of :class:`gzip.GzipFile` is now a "
"string (``'rb'`` or ``'wb'``) instead of an integer (``1`` or ``2``). The "
"value of the :attr:`!mode` attribute of the readable file-like object "
"returned by :meth:`zipfile.ZipFile.open` is now ``'rb'`` instead of ``'r'``."
" (Contributed by Serhiy Storchaka in :gh:`115961`.)"
msgstr ""
":class:`gzip.GzipFile` 的 :attr:`!mode` 属性值现在是字符串（``'rb'`` 或 "
"``'wb'``）而不是整数（``1`` 或 ``2``）。:meth:`zipfile.ZipFile.open` 返回的可读文件型对象的 "
":attr:`!mode` 属性值现在是 ``'rb'``，而非 ``'r'``。（由 Serhiy Storchaka 在 :gh:`115961` "
"贡献。） "

#: ../../whatsnew/3.13.rst:2670
msgid ""
":class:`mailbox.Maildir` now ignores files with a leading dot (``.``). "
"(Contributed by Zackery Spytz in :gh:`65559`.)"
msgstr ""
":class:`mailbox.Maildir` 现在会忽略以点（``.``）开头的文件。（由 Zackery Spytz 在 :gh:`65559` "
"贡献。）"

#: ../../whatsnew/3.13.rst:2673
msgid ""
":meth:`pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` now return both "
"files and directories if a pattern that ends with \"``**``\" is given, "
"rather than directories only. Add a trailing slash to keep the previous "
"behavior and only match directories."
msgstr ""
":meth:`pathlib.Path.glob` 和 :meth:`~pathlib.Path.rglob` "
"现在会在匹配模式以“``**``”结尾时同时返回文件和目录，而不仅仅是目录。若要保持之前的行为，仅匹配目录，请添加尾部斜杠。 "

#: ../../whatsnew/3.13.rst:2678
msgid ""
"The :mod:`threading` module now expects the :mod:`!_thread` module to have "
"an :func:`!_is_main_interpreter` function. This function takes no arguments "
"and returns ``True`` if the current interpreter is the main interpreter."
msgstr ""
":mod:`threading` 模块现在期望 :mod:`!_thread` 模块具有 :func:`!_is_main_interpreter` "
"函数。该函数不接受任何参数，如果当前解释器是主解释器，则返回 ``True``。 "

#: ../../whatsnew/3.13.rst:2683
msgid ""
"Any library or application that provides a custom :mod:`!_thread` module "
"must provide :func:`!_is_main_interpreter`, just like the module's other "
"\"private\" attributes. (:gh:`112826`.)"
msgstr ""
"与模块的其他“私有”属性一样，任何提供自定义 :mod:`!_thread` 模块的库或应用都必须提供 "
":func:`!_is_main_interpreter`。（:gh:`112826`。）"

#: ../../whatsnew/3.13.rst:2690
msgid "Changes in the C API"
msgstr "C API 的变化"

#: ../../whatsnew/3.13.rst:2692
msgid ""
"``Python.h`` no longer includes the ``<ieeefp.h>`` standard header. It was "
"included for the :c:func:`!finite` function which is now provided by the "
"``<math.h>`` header. It should now be included explicitly if needed. Remove "
"also the ``HAVE_IEEEFP_H`` macro. (Contributed by Victor Stinner in "
":gh:`108765`.)"
msgstr ""
"``Python.h`` 不再包括 ``<ieeefp.h>`` 标准头文件。 它曾经为了 :c:func:`!finite` "
"函数被包括，该函数现在是由 ``<math.h>`` 头文件提供的。 现在如有必要应当显式地包括它。 此外还移除了 ``HAVE_IEEEFP_H`` "
"宏。 （由 Victor Stinner 在 :gh:`108765` 中贡献。）"

#: ../../whatsnew/3.13.rst:2698
msgid ""
"``Python.h`` no longer includes these standard header files: ``<time.h>``, "
"``<sys/select.h>`` and ``<sys/time.h>``. If needed, they should now be "
"included explicitly. For example, ``<time.h>`` provides the :c:func:`!clock`"
" and :c:func:`!gmtime` functions, ``<sys/select.h>`` provides the "
":c:func:`!select` function, and ``<sys/time.h>`` provides the "
":c:func:`!futimes`, :c:func:`!gettimeofday` and :c:func:`!setitimer` "
"functions. (Contributed by Victor Stinner in :gh:`108765`.)"
msgstr ""
"``Python.h`` 不再包括这些标准头文件: ``<time.h>``, ``<sys/select.h>`` 和 "
"``<sys/time.h>``。 如果需要，它们应当被显式地包括。 例如，``<time.h>`` 提供 :c:func:`!clock` 和 "
":c:func:`!gmtime` 函数，``<sys/select.h>`` 提供 :c:func:`!select` 函数，而 "
"``<sys/time.h>`` 提供 the :c:func:`!futimes`, :c:func:`!gettimeofday` 和 "
":c:func:`!setitimer` 函数。 （由 Victor Stinner 在 :gh:`108765` 中贡献。）"

#: ../../whatsnew/3.13.rst:2706
msgid ""
"On Windows, ``Python.h`` no longer includes the ``<stddef.h>`` standard "
"header file. If needed, it should now be included explicitly. For example, "
"it provides :c:func:`!offsetof` function, and ``size_t`` and ``ptrdiff_t`` "
"types. Including ``<stddef.h>`` explicitly was already needed by all other "
"platforms, the ``HAVE_STDDEF_H`` macro is only defined on Windows. "
"(Contributed by Victor Stinner in :gh:`108765`.)"
msgstr ""
"在 Windows 上，``Python.h`` 不再包括 ``<stddef.h>`` 标准头文件。 如果需要，它应当被显式地包括。 例如，它提供 "
":c:func:`!offsetof` 函数，以及 ``size_t`` 和 ``ptrdiff_t`` 类型。 显式地包括 "
"``<stddef.h>`` 在所有其他平台都已经是必须的，``HAVE_STDDEF_H`` 宏仅在 Windows 上被定义。 （由 Victor "
"Stinner 在 :gh:`108765` 中贡献。）"

#: ../../whatsnew/3.13.rst:2713
msgid ""
"If the :c:macro:`Py_LIMITED_API` macro is defined, "
":c:macro:`!Py_BUILD_CORE`, :c:macro:`!Py_BUILD_CORE_BUILTIN` and "
":c:macro:`!Py_BUILD_CORE_MODULE` macros are now undefined by ``<Python.h>``."
" (Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""
"如果 :c:macro:`Py_LIMITED_API` 宏已被定义，则 :c:macro:`!Py_BUILD_CORE`, "
":c:macro:`!Py_BUILD_CORE_BUILTIN` 和 :c:macro:`!Py_BUILD_CORE_MODULE` 宏现在会被 "
"``<Python.h>`` 撤销定义。 （由 Victor Stinner 在 :gh:`85283` 中贡献。）"

#: ../../whatsnew/3.13.rst:2718
msgid ""
"The old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END`` were removed. They should be replaced by the new "
"macros ``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``."
msgstr ""
"旧的 trashcan 宏 ``Py_TRASHCAN_SAFE_BEGIN`` 和 ``Py_TRASHCAN_SAFE_END`` 已被移除。 "
"它们应该被替换为新的宏 ``Py_TRASHCAN_BEGIN`` 和 ``Py_TRASHCAN_END``。"

#: ../../whatsnew/3.13.rst:2722
msgid "A ``tp_dealloc`` function that has the old macros, such as::"
msgstr "带有旧版宏的 ``tp_dealloc`` 函数，例如::"

#: ../../whatsnew/3.13.rst:2724
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"
msgstr ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"

#: ../../whatsnew/3.13.rst:2733
msgid "should migrate to the new macros as follows::"
msgstr "应当按照以下方式迁移到新版宏::"

#: ../../whatsnew/3.13.rst:2735
msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"
msgstr ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"

#: ../../whatsnew/3.13.rst:2744
msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in. The new macros were added in Python 3.8 and "
"the old macros were deprecated in Python 3.11. (Contributed by Irit Katriel "
"in :gh:`105111`.)"
msgstr ""
"请注意 ``Py_TRASHCAN_BEGIN`` 具有第二个参数，其值应为它所在的析构函数。 这些新宏是在 Python 3.8 中添加而旧的宏是在 "
"Python 3.11 中弃用的。 （由 Irit Katriel 在 :gh:`105111` 中贡献。）"

#: ../../whatsnew/3.13.rst:2751
msgid ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` introduces several changes to "
"frame-related functions:"
msgstr ":ref:`PEP 667 <whatsnew313-locals-semantics>` 引入了对帧相关函数的多项更改："

#: ../../whatsnew/3.13.rst:2754
msgid ""
"The effects of mutating the dictionary returned from "
":c:func:`PyEval_GetLocals` in an :term:`optimized scope` have changed. New "
"dict entries added this way will now *only* be visible to subsequent "
":c:func:`PyEval_GetLocals` calls in that frame, as "
":c:func:`PyFrame_GetLocals`, :func:`locals`, and :attr:`FrameType.f_locals "
"<frame.f_locals>` no longer access the same underlying cached dictionary. "
"Changes made to entries for actual variable names and names added via the "
"write-through proxy interfaces will be overwritten on subsequent calls to "
":c:func:`PyEval_GetLocals` in that frame. The recommended code update "
"depends on how the function was being used, so refer to the deprecation "
"notice on the function for details."
msgstr ""
"在一个 :term:`optimized scope` 中修改从 :c:func:`PyEval_GetLocals` 的字典的效果已被改变。 "
"以这种方式新加的字典条目现在将 *仅对* 该帧内的后续 :c:func:`PyEval_GetLocals` 调用是可见的，因为 "
":c:func:`PyFrame_GetLocals`, :func:`locals` 和 :attr:`FrameType.f_locals "
"<frame.f_locals>` 不会再访问相同的底层已缓存字典。  针对实际变量名称所做的条目修改和通过直通写入代理接口添加的名称在该帧内对 "
":c:func:`PyEval_GetLocals` 的后续调用中被覆盖。 推荐的代码更新取决于该函数是如何被使用的，因此请参考函数的弃用通知了解详情。"

#: ../../whatsnew/3.13.rst:2767
msgid ""
"Calling :c:func:`PyFrame_GetLocals` in an :term:`optimized scope` now "
"returns a write-through proxy rather than a snapshot that gets updated at "
"ill-specified times. If a snapshot is desired, it must be created explicitly"
" (e.g. with :c:func:`PyDict_Copy`), or by calling the new "
":c:func:`PyEval_GetFrameLocals` API."
msgstr ""
"在 :term:`optimized scope` 中调用 :c:func:`PyFrame_GetLocals` "
"现在将返回一个直通写入代理而不是一个在不明确的时刻更新的快照。 如果需要快照，必须显式地创建它 (例如使用 "
":c:func:`PyDict_Copy`)，或是通过调用新的 :c:func:`PyEval_GetFrameLocals` API。"

#: ../../whatsnew/3.13.rst:2774
msgid ""
":c:func:`!PyFrame_FastToLocals` and :c:func:`!PyFrame_FastToLocalsWithError`"
" no longer have any effect. Calling these functions has been redundant since"
" Python 3.11, when :c:func:`PyFrame_GetLocals` was first introduced."
msgstr ""
":c:func:`!PyFrame_FastToLocals` 和 :c:func:`!PyFrame_FastToLocalsWithError` "
"将不再有任何效果。 自 Python 3.11 起调用这些函数是多余的，因为该版本首次引入了 :c:func:`PyFrame_GetLocals`。"

#: ../../whatsnew/3.13.rst:2779
msgid ""
":c:func:`!PyFrame_LocalsToFast` no longer has any effect. Calling this "
"function is redundant now that :c:func:`PyFrame_GetLocals` returns a write-"
"through proxy for :term:`optimized scopes <optimized scope>`."
msgstr ""
":c:func:`!PyFrame_LocalsToFast` 将不再有任何效果。 现在调用此函数是多余的因为 "
":c:func:`PyFrame_GetLocals` 将为 :term:`已优化作用域 <optimized scope>` 返回一个直通写入代理。"

#: ../../whatsnew/3.13.rst:2783
msgid ""
"Python 3.13 removed many private functions. Some of them can be replaced "
"using these alternatives:"
msgstr "Python 3.13 移除了许多私有函数。其中一些可以用下列的替代："

#: ../../whatsnew/3.13.rst:2786
msgid "``_PyDict_Pop()``: :c:func:`PyDict_Pop` or :c:func:`PyDict_PopString`;"
msgstr "``_PyDict_Pop()``: :c:func:`PyDict_Pop` 或 :c:func:`PyDict_PopString`；"

#: ../../whatsnew/3.13.rst:2787
msgid "``_PyDict_GetItemWithError()``: :c:func:`PyDict_GetItemRef`;"
msgstr "``_PyDict_GetItemWithError()``：:c:func:`PyDict_GetItemRef`；"

#: ../../whatsnew/3.13.rst:2788
msgid "``_PyErr_WriteUnraisableMsg()``:  :c:func:`PyErr_FormatUnraisable`;"
msgstr "``_PyErr_WriteUnraisableMsg()``：:c:func:`PyErr_FormatUnraisable`；"

#: ../../whatsnew/3.13.rst:2789
msgid ""
"``_PyEval_SetTrace()``: :c:func:`PyEval_SetTrace` or "
":c:func:`PyEval_SetTraceAllThreads`;"
msgstr ""
"``_PyEval_SetTrace()``: :c:func:`PyEval_SetTrace` 或 "
":c:func:`PyEval_SetTraceAllThreads`；"

#: ../../whatsnew/3.13.rst:2790
msgid "``_PyList_Extend()``: :c:func:`PyList_Extend`;"
msgstr "``_PyList_Extend()``：:c:func:`PyList_Extend`；"

#: ../../whatsnew/3.13.rst:2791
msgid "``_PyLong_AsInt()``: :c:func:`PyLong_AsInt`;"
msgstr "``_PyLong_AsInt()``：:c:func:`PyLong_AsInt`；"

#: ../../whatsnew/3.13.rst:2792
msgid "``_PyMem_RawStrdup()``: ``strdup()``;"
msgstr "``_PyMem_RawStrdup()``：``strdup()``；"

#: ../../whatsnew/3.13.rst:2793
msgid "``_PyMem_Strdup()``: ``strdup()``;"
msgstr "``_PyMem_Strdup()``：``strdup()``；"

#: ../../whatsnew/3.13.rst:2794
msgid "``_PyObject_ClearManagedDict()``: :c:func:`PyObject_ClearManagedDict`;"
msgstr "``_PyObject_ClearManagedDict()``：:c:func:`PyObject_ClearManagedDict`；"

#: ../../whatsnew/3.13.rst:2795
msgid "``_PyObject_VisitManagedDict()``: :c:func:`PyObject_VisitManagedDict`;"
msgstr "``_PyObject_VisitManagedDict()``：:c:func:`PyObject_VisitManagedDict`；"

#: ../../whatsnew/3.13.rst:2796
msgid ""
"``_PyThreadState_UncheckedGet()``: :c:func:`PyThreadState_GetUnchecked()`;"
msgstr ""
"``_PyThreadState_UncheckedGet()``：:c:func:`PyThreadState_GetUnchecked()`；"

#: ../../whatsnew/3.13.rst:2797
msgid "``_PyTime_AsSecondsDouble()``: :c:func:`PyTime_AsSecondsDouble`;"
msgstr "``_PyTime_AsSecondsDouble()``：:c:func:`PyTime_AsSecondsDouble`；"

#: ../../whatsnew/3.13.rst:2798
msgid ""
"``_PyTime_GetMonotonicClock()``: :c:func:`PyTime_Monotonic` or "
":c:func:`PyTime_MonotonicRaw`;"
msgstr ""
"``_PyTime_GetMonotonicClock()``: :c:func:`PyTime_Monotonic` 或 "
":c:func:`PyTime_MonotonicRaw`；"

#: ../../whatsnew/3.13.rst:2799
msgid ""
"``_PyTime_GetPerfCounter()``: :c:func:`PyTime_PerfCounter` or "
":c:func:`PyTime_PerfCounterRaw`;"
msgstr ""
"``_PyTime_GetPerfCounter()``: :c:func:`PyTime_PerfCounter` 或 "
":c:func:`PyTime_PerfCounterRaw`；"

#: ../../whatsnew/3.13.rst:2800
msgid ""
"``_PyTime_GetSystemClock()``: :c:func:`PyTime_Time` or "
":c:func:`PyTime_TimeRaw`;"
msgstr ""
"``_PyTime_GetSystemClock()``: :c:func:`PyTime_Time` 或 "
":c:func:`PyTime_TimeRaw`；"

#: ../../whatsnew/3.13.rst:2801
msgid "``_PyTime_MAX``: :c:var:`PyTime_MAX`;"
msgstr "``_PyTime_MAX``：:c:var:`PyTime_MAX`；"

#: ../../whatsnew/3.13.rst:2802
msgid "``_PyTime_MIN``: :c:var:`PyTime_MIN`;"
msgstr "``_PyTime_MIN``：:c:var:`PyTime_MIN`；"

#: ../../whatsnew/3.13.rst:2803
msgid "``_PyTime_t``: :c:type:`PyTime_t`;"
msgstr "``_PyTime_t``：:c:type:`PyTime_t`；"

#: ../../whatsnew/3.13.rst:2804
msgid "``_Py_HashPointer()``: :c:func:`Py_HashPointer`;"
msgstr "``_Py_HashPointer()``：:c:func:`Py_HashPointer`；"

#: ../../whatsnew/3.13.rst:2805
msgid "``_Py_IsFinalizing()``: :c:func:`Py_IsFinalizing`."
msgstr "``_Py_IsFinalizing()``：:c:func:`Py_IsFinalizing`。"

#: ../../whatsnew/3.13.rst:2807
msgid ""
"The `pythoncapi-compat project`_ can be used to get most of these new "
"functions on Python 3.12 and older."
msgstr "在 Python 3.12 和更旧的版本中可以使用 `pythoncapi-compat project`_ 来充分利用这些新函数。"

#: ../../whatsnew/3.13.rst:2811
msgid "Regression Test Changes"
msgstr "回归测试的变化"

#: ../../whatsnew/3.13.rst:2813
msgid ""
"Python built with :file:`configure` :option:`--with-pydebug` now supports a "
":option:`-X presite=package.module <-X>` command-line option. If used, it "
"specifies a module that should be imported early in the lifecycle of the "
"interpreter, before ``site.py`` is executed. (Contributed by Łukasz Langa in"
" :gh:`110769`.)"
msgstr ""
"现在使用 :file:`configure` :option:`--with-pydebug` 编译的 Python 将支持 :option:`-X "
"presite=package.module <-X>` 命令行选项。 如果被使用，它指明一个模块应当在解释器生命周期开始时，即 ``site.py``"
" 被执行之前被导入。 （由 Łukasz Langa 在 :gh:`110769` 中贡献。）"
