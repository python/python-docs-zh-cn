# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-03 14:18+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.7.rst:3
msgid "What's New In Python 3.7"
msgstr "Python 3.7 有什么新变化"

#: ../../whatsnew/3.7.rst:0
msgid "Editor"
msgstr "编者"

#: ../../whatsnew/3.7.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>"

#: ../../whatsnew/3.7.rst:47
msgid ""
"This article explains the new features in Python 3.7, compared to 3.6. "
"Python 3.7 was released on June 27, 2018. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""
"本文解释了 Python 3.7 相比 3.6 的新增特性。Python 3.7 于 2018 年 6 月 27 日发布。完整的详情可参阅 "
":ref:`更新日志 <changelog>`。"

#: ../../whatsnew/3.7.rst:53
msgid "Summary -- Release Highlights"
msgstr "摘要 - 发布重点"

#: ../../whatsnew/3.7.rst:58
msgid "New syntax features:"
msgstr "新的语法特性："

#: ../../whatsnew/3.7.rst:60
msgid ""
":ref:`PEP 563 <whatsnew37-pep563>`, postponed evaluation of type "
"annotations."
msgstr ":ref:`PEP 563 <whatsnew37-pep563>`，类型标注延迟求值。"

#: ../../whatsnew/3.7.rst:62
msgid "Backwards incompatible syntax changes:"
msgstr "向后不兼容的语法更改："

#: ../../whatsnew/3.7.rst:64
msgid ":keyword:`async` and :keyword:`await` are now reserved keywords."
msgstr ":keyword:`async` 和 :keyword:`await` 现在是保留的关键字。"

#: ../../whatsnew/3.7.rst:66
msgid "New library modules:"
msgstr "新的库模块："

#: ../../whatsnew/3.7.rst:68
msgid ""
":mod:`contextvars`: :ref:`PEP 567 -- Context Variables <whatsnew37-pep567>`"
msgstr ":mod:`contextvars`: :ref:`PEP 567 -- 上下文变量 <whatsnew37-pep567>`"

#: ../../whatsnew/3.7.rst:69
msgid ":mod:`dataclasses`: :ref:`PEP 557 -- Data Classes <whatsnew37-pep557>`"
msgstr ":mod:`dataclasses`: :ref:`PEP 557 -- 数据类 <whatsnew37-pep557>`"

#: ../../whatsnew/3.7.rst:70
msgid ":ref:`whatsnew37_importlib_resources`"
msgstr ":ref:`whatsnew37_importlib_resources`"

#: ../../whatsnew/3.7.rst:72
msgid "New built-in features:"
msgstr "新的内置特性："

#: ../../whatsnew/3.7.rst:74
msgid ""
":ref:`PEP 553 <whatsnew37-pep553>`, the new :func:`breakpoint` function."
msgstr ":ref:`PEP 553 <whatsnew37-pep553>`, 新的 :func:`breakpoint` 函数。"

#: ../../whatsnew/3.7.rst:76
msgid "Python data model improvements:"
msgstr "对 Python 数据模型的改进："

#: ../../whatsnew/3.7.rst:78
msgid ""
":ref:`PEP 562 <whatsnew37-pep562>`, customization of access to module "
"attributes."
msgstr ":ref:`PEP 562 <whatsnew37-pep562>`, 自定义可访问的模块属性。"

#: ../../whatsnew/3.7.rst:81
msgid ""
":ref:`PEP 560 <whatsnew37-pep560>`, core support for typing module and "
"generic types."
msgstr ":ref:`PEP 560 <whatsnew37-pep560>`, typing模块和泛型类型的核心支持。"

#: ../../whatsnew/3.7.rst:84
msgid ""
"the insertion-order preservation nature of :ref:`dict <typesmapping>` "
"objects `has been declared`_ to be an official part of the Python language "
"spec."
msgstr ""
":ref:`dict <typesmapping>` 对象会保持插入时的顺序这个特性 `正式宣布`_ 成为 Python 语言官方规范的一部分。"

#: ../../whatsnew/3.7.rst:90
msgid "Significant improvements in the standard library:"
msgstr "标准库中的重大改进："

#: ../../whatsnew/3.7.rst:92
msgid ""
"The :mod:`asyncio` module has received new features, significant "
":ref:`usability and performance improvements <whatsnew37_asyncio>`."
msgstr ""
":mod:`asyncio` 模块添加了新的功能，重大改进请参阅 :ref:`可用性与性能提升 <whatsnew37_asyncio>`。"

#: ../../whatsnew/3.7.rst:95
msgid ""
"The :mod:`time` module gained support for :ref:`functions with nanosecond "
"resolution <whatsnew37-pep564>`."
msgstr ":mod:`time` 模块现在提供 :ref:`纳秒级精度函数 <whatsnew37-pep564>` 的支持。"

#: ../../whatsnew/3.7.rst:98
msgid "CPython implementation improvements:"
msgstr "CPython 实现的改进："

#: ../../whatsnew/3.7.rst:100
msgid "Avoiding the use of ASCII as a default text encoding:"
msgstr "避免使用 ASCII 作为默认的文本编码："

#: ../../whatsnew/3.7.rst:102
msgid ":ref:`PEP 538 <whatsnew37-pep538>`, legacy C locale coercion"
msgstr ":ref:`PEP 538 <whatsnew37-pep538>`，传统 C 区域强制转换"

#: ../../whatsnew/3.7.rst:103
msgid ":ref:`PEP 540 <whatsnew37-pep540>`, forced UTF-8 runtime mode"
msgstr ":ref:`PEP 540 <whatsnew37-pep540>`，强制 UTF-8 运行时模式"

#: ../../whatsnew/3.7.rst:104
msgid ":ref:`PEP 552 <whatsnew37-pep552>`, deterministic .pycs"
msgstr ":ref:`PEP 552 <whatsnew37-pep552>`，确定性的 .pyc 文件"

#: ../../whatsnew/3.7.rst:105
msgid ":ref:`New Python Development Mode <whatsnew37-devmode>`"
msgstr ":ref:`新的 Python 开发模式 <whatsnew37-devmode>`"

#: ../../whatsnew/3.7.rst:106
msgid ""
":ref:`PEP 565 <whatsnew37-pep565>`, improved :exc:`DeprecationWarning` "
"handling"
msgstr ":ref:`PEP 565 <whatsnew37-pep565>`，改进的 :exc:`DeprecationWarning` 处理"

#: ../../whatsnew/3.7.rst:109
msgid "C API improvements:"
msgstr "C API 的改进："

#: ../../whatsnew/3.7.rst:111
msgid ":ref:`PEP 539 <whatsnew37-pep539>`, new C API for thread-local storage"
msgstr ":ref:`PEP 539 <whatsnew37-pep539>`，用于线程本地存储的新 C API"

#: ../../whatsnew/3.7.rst:113
msgid "Documentation improvements:"
msgstr "文档的改进："

#: ../../whatsnew/3.7.rst:115
msgid ":ref:`PEP 545 <whatsnew37-pep545>`, Python documentation translations"
msgstr ":ref:`PEP 545 <whatsnew37-pep545>`, Python 文档翻译"

#: ../../whatsnew/3.7.rst:116
msgid ""
"New documentation translations: `Japanese <https://docs.python.org/ja/>`_, "
"`French <https://docs.python.org/fr/>`_, and `Korean "
"<https://docs.python.org/ko/>`_."
msgstr ""
"新的文档翻译：`Japanese <https://docs.python.org/ja/>`_，`French "
"<https://docs.python.org/fr/>`_ 和 `Korean <https://docs.python.org/ko/>`_。"

#: ../../whatsnew/3.7.rst:120
msgid ""
"This release features notable performance improvements in many areas. The "
":ref:`whatsnew37-perf` section lists them in detail."
msgstr "此版本在诸多方面有显著的性能改进。:ref:`whatsnew37-perf` 章节详细列出了它们。"

#: ../../whatsnew/3.7.rst:123
msgid ""
"For a list of changes that may affect compatibility with previous Python "
"releases please refer to the :ref:`porting-to-python-37` section."
msgstr "和之前的 Python 版本存在兼容性的更改列表，请参阅 :ref:`porting-to-python-37` 章节。"

#: ../../whatsnew/3.7.rst:128
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.7.rst:133
msgid "PEP 563: Postponed Evaluation of Annotations"
msgstr "PEP 563：延迟的标注求值"

#: ../../whatsnew/3.7.rst:135
msgid ""
"The advent of type hints in Python uncovered two glaring usability issues "
"with the functionality of annotations added in :pep:`3107` and refined "
"further in :pep:`526`:"
msgstr ""
"随着 :pep:`3107` 加入标注功能并在 :pep:`526` 进一步细化，Python 中类型提示的出现揭示了两个明显的可用性问题："

#: ../../whatsnew/3.7.rst:139
msgid ""
"annotations could only use names which were already available in the current"
" scope, in other words they didn't support forward references of any kind; "
"and"
msgstr "标注只能使用在当前作用域中已经存在的名称，也就是说，它们不支持任何形式的前向引用；而且——"

#: ../../whatsnew/3.7.rst:143
msgid ""
"annotating source code had adverse effects on startup time of Python "
"programs."
msgstr "标注源码对 Python 程序的启动时间有不利的影响。"

#: ../../whatsnew/3.7.rst:146
msgid ""
"Both of these issues are fixed by postponing the evaluation of annotations."
"  Instead of compiling code which executes expressions in annotations at "
"their definition time, the compiler stores the annotation in a string form "
"equivalent to the AST of the expression in question. If needed, annotations "
"can be resolved at runtime using :func:`typing.get_type_hints`.  In the "
"common case where this is not required, the annotations are cheaper to store"
" (since short strings are interned by the interpreter) and make startup time"
" faster."
msgstr ""
"这两个问题都可以通过延迟标注求值来解决。在定义标注的时候，编译器并不会编译执行相应表达式的代码，而是保存与相应表达式的 AST "
"等价的字符串形式。如果有需要，标注可以在运行时使用 :func:`typing.get_type_hints` "
"进行解析。在不需要这种解析的通常情况下，标注的存储成本更低（因为解析器只需处理较短的字符串）且启动时间更短。"

#: ../../whatsnew/3.7.rst:155
msgid ""
"Usability-wise, annotations now support forward references, making the "
"following syntax valid::"
msgstr "在可用性方面，标注现在支持向前引用，以使以下句法有效::"

#: ../../whatsnew/3.7.rst:158
msgid ""
"class C:\n"
"    @classmethod\n"
"    def from_string(cls, source: str) -> C:\n"
"        ...\n"
"\n"
"    def validate_b(self, obj: B) -> bool:\n"
"        ...\n"
"\n"
"class B:\n"
"    ..."
msgstr ""
"class C:\n"
"    @classmethod\n"
"    def from_string(cls, source: str) -> C:\n"
"        ...\n"
"\n"
"    def validate_b(self, obj: B) -> bool:\n"
"        ...\n"
"\n"
"class B:\n"
"    ..."

#: ../../whatsnew/3.7.rst:169
msgid ""
"Since this change breaks compatibility, the new behavior needs to be enabled"
" on a per-module basis in Python 3.7 using a :mod:`__future__` import::"
msgstr ""
"由于此修改会破坏兼容性，在 Python 3.7 中此种新的行为需要在每个模块层级上使用 :mod:`__future__` 导入来启用::"

#: ../../whatsnew/3.7.rst:172
msgid "from __future__ import annotations"
msgstr "from __future__ import annotations"

#: ../../whatsnew/3.7.rst:174
msgid "It will become the default in Python 3.10."
msgstr "它将在 Python 3.10 中成为默认行为。"

#: ../../whatsnew/3.7.rst:178
msgid ":pep:`563` -- Postponed evaluation of annotations"
msgstr ":pep:`563` -- 延迟的标注求值"

#: ../../whatsnew/3.7.rst:179
msgid "PEP written and implemented by Łukasz Langa."
msgstr "PEP 由 Łukasz Langa 撰写并实现。"

#: ../../whatsnew/3.7.rst:185
msgid "PEP 538: Legacy C Locale Coercion"
msgstr "PEP 538: 传统 C 区域强制转换"

#: ../../whatsnew/3.7.rst:187
msgid ""
"An ongoing challenge within the Python 3 series has been determining a "
"sensible default strategy for handling the \"7-bit ASCII\" text encoding "
"assumption currently implied by the use of the default C or POSIX locale on "
"non-Windows platforms."
msgstr ""
"Python 3 系列有一个持续的挑战就是为处理 7 比特位 ASCII 文本的假定编码确定合理的默认策略，目前的设定是在非 Windows "
"平台上使用默认的 C 或 POSIX 区域设置。"

#: ../../whatsnew/3.7.rst:192
msgid ""
":pep:`538` updates the default interpreter command line interface to "
"automatically coerce that locale to an available UTF-8 based locale as "
"described in the documentation of the new :envvar:`PYTHONCOERCECLOCALE` "
"environment variable. Automatically setting ``LC_CTYPE`` this way means that"
" both the core interpreter and locale-aware C extensions (such as "
":mod:`readline`) will assume the use of UTF-8 as the default text encoding, "
"rather than ASCII."
msgstr ""
":pep:`538` 更新了默认的解释器命令行接口，以自动将上述区域强制转换为可用的基于 UTF-8 的区域，具体描述可参见有关新增环境变量 "
":envvar:`PYTHONCOERCECLOCALE` 的文档。 以这种方式自动设置 ``LC_CTYPE`` 意味着核心解释器和能感知区域的 C "
"扩展 (例如 :mod:`readline`) 都将会假定 UTF-8 已被用作默认的文本编码，而不再是 ASCII。"

#: ../../whatsnew/3.7.rst:200
msgid ""
"The platform support definition in :pep:`11` has also been updated to limit "
"full text handling support to suitably configured non-ASCII based locales."
msgstr ":pep:`11` 中的平台支持定义也已被更新以限制完整文本处理支持适当配置的基于非 ASCII 的语言区域。"

#: ../../whatsnew/3.7.rst:203
msgid ""
"As part of this change, the default error handler for :data:`~sys.stdin` and"
" :data:`~sys.stdout` is now ``surrogateescape`` (rather than ``strict``) "
"when using any of the defined coercion target locales (currently "
"``C.UTF-8``, ``C.utf8``, and ``UTF-8``).  The default error handler for "
":data:`~sys.stderr` continues to be ``backslashreplace``, regardless of "
"locale."
msgstr ""
"作为此更改的一部分，当使用任何已定义的强制转换目标区域时 (目前为 ``C.UTF-8``, ``C.utf8`` 和 ``UTF-8``) "
":data:`~sys.stdin` 和 :data:`~sys.stdout` 默认的处理器现在将为 ``surrogateescape`` (而不是"
" ``strict``)。 而无论是什么区域，:data:`~sys.stderr` 默认的处理器仍为 ``backslashreplace``。"

#: ../../whatsnew/3.7.rst:209
msgid ""
"Locale coercion is silent by default, but to assist in debugging potentially"
" locale related integration problems, explicit warnings (emitted directly on"
" :data:`~sys.stderr`) can be requested by setting "
"``PYTHONCOERCECLOCALE=warn``. This setting will also cause the Python "
"runtime to emit a warning if the legacy C locale remains active when the "
"core interpreter is initialized."
msgstr ""
"默认情况下区域强制转换会静默进行，但为了辅助调试潜在的区域相关集成问题，可以通过设置 ``PYTHONCOERCECLOCALE=warn`` "
"来请求显式地启用警告信息（直接在 :data:`~sys.stderr` 上发出）。 此设置还会使得 Python 运行时在核心解释器初始化时如果传统 "
"C 区域仍然处于激活状态时发出警告。"

#: ../../whatsnew/3.7.rst:215
msgid ""
"While :pep:`538`'s locale coercion has the benefit of also affecting "
"extension modules (such as GNU ``readline``), as well as child processes "
"(including those running non-Python applications and older versions of "
"Python), it has the downside of requiring that a suitable target locale be "
"present on the running system. To better handle the case where no suitable "
"target locale is available (as occurs on RHEL/CentOS 7, for example), Python"
" 3.7 also implements :ref:`whatsnew37-pep540`."
msgstr ""
"虽然 :pep:`538` 的区域强制转换的好处在于它还会同时影响扩展模块 (例如 GNU ``readline``) 以及子进程 (包括运行非 "
"Python 应用和旧版本 Python 的子进程)，但它也存在需要所运行系统必须存在适合的目标区域的缺点。 为了更好地处理没有可用适合的目标区域的情况"
" (例如在 RHEL/CentOS 7 上就会出现此情况)，Python 3.7 还实现了 :ref:`whatsnew37-pep540`。"

#: ../../whatsnew/3.7.rst:225
msgid ":pep:`538` -- Coercing the legacy C locale to a UTF-8 based locale"
msgstr ":pep:`538` -- 强制转换传统 C 区域到基于 UTF-8 的区域"

#: ../../whatsnew/3.7.rst:226
msgid "PEP written and implemented by Nick Coghlan."
msgstr "PEP 由 Nick Coghlan 撰写并实现。"

#: ../../whatsnew/3.7.rst:232
msgid "PEP 540: Forced UTF-8 Runtime Mode"
msgstr "PEP 540: 强制 UTF-8 运行时模式"

#: ../../whatsnew/3.7.rst:234
msgid ""
"The new :option:`-X` ``utf8`` command line option and :envvar:`PYTHONUTF8` "
"environment variable can be used to enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>`."
msgstr ""
"新的 :option:`-X` ``utf8`` 命令行选项和 :envvar:`PYTHONUTF8` 环境变量可被用来启用 :ref:`Python"
" UTF-8 模式 <utf8-mode>`。"

#: ../../whatsnew/3.7.rst:238
msgid ""
"When in UTF-8 mode, CPython ignores the locale settings, and uses the UTF-8 "
"encoding by default.  The error handlers for :data:`sys.stdin` and "
":data:`sys.stdout` streams are set to ``surrogateescape``."
msgstr ""
"当处于 UTF-8 模式时，CPython 会忽略区域设置，并默认使用 UTF-8 编码。 用于 :data:`sys.stdin` 和 "
":data:`sys.stdout` 流的错误处理器将设置为 ``surrogateescape``。"

#: ../../whatsnew/3.7.rst:242
msgid ""
"The forced UTF-8 mode can be used to change the text handling behavior in an"
" embedded Python interpreter without changing the locale settings of an "
"embedding application."
msgstr "强制 UTF-8 模式可被用来在嵌入的 Python 解释器中改变文本处理行为，而不会改变嵌入方应用的区域设置。"

#: ../../whatsnew/3.7.rst:246
msgid ""
"While :pep:`540`'s UTF-8 mode has the benefit of working regardless of which"
" locales are available on the running system, it has the downside of having "
"no effect on extension modules (such as GNU ``readline``), child processes "
"running non-Python applications, and child processes running older versions "
"of Python. To reduce the risk of corrupting text data when communicating "
"with such components, Python 3.7 also implements :ref:`whatsnew37-pep540`)."
msgstr ""
":pep:`540` 的 UTF-8 模式的好处是不必关心运行所在系统中有哪些可用区域即可工作，但它也存在对扩展模块 (例如 GNU "
"``readline``)、运行非 Python 应用的子进程以及运行旧版本 Python 的子进程不起作用的缺点。 "
"为了减小与这些组件通信时破坏文本数据的风险，Python 3.7 还实现了 :ref:`whatsnew37-pep540`)。"

#: ../../whatsnew/3.7.rst:253
msgid ""
"The UTF-8 mode is enabled by default when the locale is ``C`` or ``POSIX``, "
"and the :pep:`538` locale coercion feature fails to change it to a UTF-8 "
"based alternative (whether that failure is due to ``PYTHONCOERCECLOCALE=0`` "
"being set, ``LC_ALL`` being set, or the lack of a suitable target locale)."
msgstr ""
"UTF-8 模式在语言区域为 ``C`` 或 ``POSIX`` 并且 :pep:`538` 区域强制转换特性无法将其修改为某种基于 UTF-8 "
"的替代项时会被默认启用（无论修改失败是由于设置了 ``PYTHONCOERCECLOCALE=0``, ``LC_ALL`` "
"还是由于缺少适合的目标区域）。"

#: ../../whatsnew/3.7.rst:260
msgid ":pep:`540` -- Add a new UTF-8 mode"
msgstr ":pep:`540` -- 增加了新的 UTF-8 模式"

#: ../../whatsnew/3.7.rst:261 ../../whatsnew/3.7.rst:363
msgid "PEP written and implemented by Victor Stinner"
msgstr "PEP 由 Victor Stinner 撰写并实现"

#: ../../whatsnew/3.7.rst:267
msgid "PEP 553: Built-in ``breakpoint()``"
msgstr "PEP 553: 内置的 ``breakpoint()``"

#: ../../whatsnew/3.7.rst:269
msgid ""
"Python 3.7 includes the new built-in :func:`breakpoint` function as an easy "
"and consistent way to enter the Python debugger."
msgstr "Python 3.7 包含了新的内置 :func:`breakpoint` 函数，作为一种简单方便地进入 Python 调试器的方式。"

#: ../../whatsnew/3.7.rst:272
msgid ""
"Built-in ``breakpoint()`` calls :func:`sys.breakpointhook`.  By default, the"
" latter imports :mod:`pdb` and then calls ``pdb.set_trace()``, but by "
"binding ``sys.breakpointhook()`` to the function of your choosing, "
"``breakpoint()`` can enter any debugger. Additionally, the environment "
"variable :envvar:`PYTHONBREAKPOINT` can be set to the callable of your "
"debugger of choice.  Set ``PYTHONBREAKPOINT=0`` to completely disable built-"
"in ``breakpoint()``."
msgstr ""
"内置 ``breakpoint()`` 会调用 :func:`sys.breakpointhook`。 在默认情况下后者会导入 :mod:`pdb` "
"然后再调用 ``pdb.set_trace()``，但是通过将 ``sys.breakpointhook()`` "
"绑定到你选定的函数，``breakpoint()`` 可以进入任何调试器。 此外，环境变量 :envvar:`PYTHONBREAKPOINT` "
"可被设置为你选定的调试器的可调用对象。 设置 ``PYTHONBREAKPOINT=0`` 会完全禁用内置 ``breakpoint()``。"

#: ../../whatsnew/3.7.rst:282
msgid ":pep:`553` -- Built-in breakpoint()"
msgstr ":pep:`553` -- 内置的 breakpoint()"

#: ../../whatsnew/3.7.rst:283
msgid "PEP written and implemented by Barry Warsaw"
msgstr "PEP 由 Barry Warsaw 撰写并实现"

#: ../../whatsnew/3.7.rst:289
msgid "PEP 539: New C API for Thread-Local Storage"
msgstr "PEP 539: 用于线程局部存储的新 C API"

#: ../../whatsnew/3.7.rst:291
msgid ""
"While Python provides a C API for thread-local storage support; the existing"
" :ref:`Thread Local Storage (TLS) API <thread-local-storage-api>` has used "
":c:expr:`int` to represent TLS keys across all platforms.  This has not "
"generally been a problem for officially support platforms, but that is "
"neither POSIX-compliant, nor portable in any practical sense."
msgstr ""
"虽然 Python 提供了用于线程存储支持的 C API；但原有的 :ref:`线程局部存储 (TLS) API <thread-local-"
"storage-api>` 已使用 :c:expr:`int` 来表示所有平台上的 TLS 密钥。 对于官方支持的平台而言这通常不是问题，但这即不符合 "
"POSIX 标准，也不具备任何实际意义上的可移植性。"

#: ../../whatsnew/3.7.rst:297
msgid ""
":pep:`539` changes this by providing a new :ref:`Thread Specific Storage "
"(TSS) API <thread-specific-storage-api>` to CPython which supersedes use of "
"the existing TLS API within the CPython interpreter, while deprecating the "
"existing API.  The TSS API uses a new type :c:type:`Py_tss_t` instead of "
":c:expr:`int` to represent TSS keys--an opaque type the definition of which "
"may depend on the underlying TLS implementation.  Therefore, this will allow"
" to build CPython on platforms where the native TLS key is defined in a way "
"that cannot be safely cast to :c:expr:`int`."
msgstr ""
":pep:`539` 通过向 CPython 提供一个取代 CPython 解释器内部的现有 TLS API 的使用的新的 :ref:`线程专属存储 "
"(TSS) API <thread-specific-storage-api>` 来改变这一点，同时弃用了现有的 API。 TSS API "
"使用一种新类型 :c:type:`Py_tss_t` 而非 :c:expr:`int` 来表示 TSS 密钥 -- 这是一种具体定义依赖于下层 TLS "
"实现的不透明类型。 因此，这将允许在以无法安全地转换为 :c:expr:`int` 的方式定义原生 TLS 密钥的平台上构建 CPython。"

#: ../../whatsnew/3.7.rst:306
msgid ""
"Note that on platforms where the native TLS key is defined in a way that "
"cannot be safely cast to :c:expr:`int`, all functions of the existing TLS "
"API will be no-op and immediately return failure. This indicates clearly "
"that the old API is not supported on platforms where it cannot be used "
"reliably, and that no effort will be made to add such support."
msgstr ""
"请注意在 TLS 密钥定义方式使其无法被安全地转换为 :c:expr:`int` 的平台上，现有 TLS API "
"中的全部函数将无法执行并会立即返回失败信息。 这样可以清楚地表明原有 API 在无法可选使用的平台上不受支持，并且也不准备添加此种支持。"

#: ../../whatsnew/3.7.rst:314
msgid ":pep:`539` -- A New C-API for Thread-Local Storage in CPython"
msgstr ":pep:`539` -- 在 CPython 中用于线程局部存储的新 C-API"

#: ../../whatsnew/3.7.rst:315
msgid "PEP written by Erik M. Bray; implementation by Masayuki Yamamoto."
msgstr "PEP 由 Erik M. Bray 撰写；由 Masayuki Yamamoto 实现。"

#: ../../whatsnew/3.7.rst:321
msgid "PEP 562: Customization of Access to Module Attributes"
msgstr "PEP 562: 定制对模块属性的访问"

#: ../../whatsnew/3.7.rst:323
msgid ""
"Python 3.7 allows defining :meth:`~module.__getattr__` on modules and will "
"call it whenever a module attribute is otherwise not found.  Defining "
":meth:`~module.__dir__` on modules is now also allowed."
msgstr ""

#: ../../whatsnew/3.7.rst:327
msgid ""
"A typical example of where this may be useful is module attribute "
"deprecation and lazy loading."
msgstr "一个典型的可能有用的例子是已弃用模块属性和惰性加载。"

#: ../../whatsnew/3.7.rst:332
msgid ":pep:`562` -- Module ``__getattr__`` and ``__dir__``"
msgstr ":pep:`562` -- 模块的 ``__getattr__`` 和 ``__dir__``"

#: ../../whatsnew/3.7.rst:333 ../../whatsnew/3.7.rst:422
msgid "PEP written and implemented by Ivan Levkivskyi"
msgstr "PEP 由 Ivan Levkivskyi 撰写并实现"

#: ../../whatsnew/3.7.rst:339
msgid "PEP 564: New Time Functions With Nanosecond Resolution"
msgstr "PEP 564: 具有纳秒级精度的新时间函数"

#: ../../whatsnew/3.7.rst:341
msgid ""
"The resolution of clocks in modern systems can exceed the limited precision "
"of a floating-point number returned by the :func:`time.time` function and "
"its variants.  To avoid loss of precision, :pep:`564` adds six new "
"\"nanosecond\" variants of the existing timer functions to the :mod:`time` "
"module:"
msgstr ""
"现代系统的时钟精度可以超过由 :func:`time.time` 函数及其变化形式所返回的浮点数的有限精度。 为了避免精度损失，:pep:`564` 在"
" :mod:`time` 模块中增加了原有计时器函数的六个新“纳秒版”变化形式:"

#: ../../whatsnew/3.7.rst:347 ../../whatsnew/3.7.rst:1455
msgid ":func:`time.clock_gettime_ns`"
msgstr ":func:`time.clock_gettime_ns`"

#: ../../whatsnew/3.7.rst:348 ../../whatsnew/3.7.rst:1456
msgid ":func:`time.clock_settime_ns`"
msgstr ":func:`time.clock_settime_ns`"

#: ../../whatsnew/3.7.rst:349 ../../whatsnew/3.7.rst:1457
msgid ":func:`time.monotonic_ns`"
msgstr ":func:`time.monotonic_ns`"

#: ../../whatsnew/3.7.rst:350 ../../whatsnew/3.7.rst:1458
msgid ":func:`time.perf_counter_ns`"
msgstr ":func:`time.perf_counter_ns`"

#: ../../whatsnew/3.7.rst:351 ../../whatsnew/3.7.rst:1459
msgid ":func:`time.process_time_ns`"
msgstr ":func:`time.process_time_ns`"

#: ../../whatsnew/3.7.rst:352 ../../whatsnew/3.7.rst:1460
msgid ":func:`time.time_ns`"
msgstr ":func:`time.time_ns`"

#: ../../whatsnew/3.7.rst:354
msgid ""
"The new functions return the number of nanoseconds as an integer value."
msgstr "这些新函数会以整数值的形式返回纳秒数。"

#: ../../whatsnew/3.7.rst:356
msgid ""
":pep:`Measurements <0564#annex-clocks-resolution-in-python>` show that on "
"Linux and Windows the resolution of :func:`time.time_ns` is approximately 3 "
"times better than that of :func:`time.time`."
msgstr ""
":pep:`测量结果 <0564#annex-clocks-resolution-in-python>` 显示在 Linux 和 Windows 上 "
":func:`time.time_ns` 的精度相比 :func:`time.time` 大约高出 3 倍。"

#: ../../whatsnew/3.7.rst:362
msgid ":pep:`564` -- Add new time functions with nanosecond resolution"
msgstr ":pep:`564` -- 增加具有纳秒级精度的新时间函数"

#: ../../whatsnew/3.7.rst:369
msgid "PEP 565: Show DeprecationWarning in ``__main__``"
msgstr "PEP 565: 在 ``__main__`` 中显示 DeprecationWarning"

#: ../../whatsnew/3.7.rst:371
msgid ""
"The default handling of :exc:`DeprecationWarning` has been changed such that"
" these warnings are once more shown by default, but only when the code "
"triggering them is running directly in the :mod:`__main__` module.  As a "
"result, developers of single file scripts and those using Python "
"interactively should once again start seeing deprecation warnings for the "
"APIs they use, but deprecation warnings triggered by imported application, "
"library and framework modules will continue to be hidden by default."
msgstr ""
":exc:`DeprecationWarning` 的默认处理方式已经被更改，这此警告默认只显示一次，仅有当直接在 :mod:`__main__` "
"模块中运行的代码触发它们时才会再次显示。 因此，单文件脚本开发者以及 Python 交互模式使用者应该会再次开始看到针对他们所使用 API "
"的已弃用警告，但被导入应用、库和框架模块所触发的已弃用警告默认将继续隐藏。"

#: ../../whatsnew/3.7.rst:379
msgid ""
"As a result of this change, the standard library now allows developers to "
"choose between three different deprecation warning behaviours:"
msgstr "作为此项更改的结果，标准库现在允许开发者在三种不同的已弃用警告行为之间进行选择:"

#: ../../whatsnew/3.7.rst:382
msgid ""
":exc:`FutureWarning`: always displayed by default, recommended for warnings "
"intended to be seen by application end users (e.g. for deprecated "
"application configuration settings)."
msgstr ""
":exc:`FutureWarning`: 默认情况下总是会显示，建议用于应用程序最终用户应该看到的警告信息（例如对于已弃用的应用程序配置的设置选项）。"

#: ../../whatsnew/3.7.rst:385
msgid ""
":exc:`DeprecationWarning`: displayed by default only in :mod:`__main__` and "
"when running tests, recommended for warnings intended to be seen by other "
"Python developers where a version upgrade may result in changed behaviour or"
" an error."
msgstr ""
":exc:`DeprecationWarning`: 默认情况下仅在 :mod:`__main__` 中以及当运行测试时会显示，建议用于其他 "
"Python 开发者应该看到的警告信息，提示版本升级可能导致行为改变或者错误。"

#: ../../whatsnew/3.7.rst:389
msgid ""
":exc:`PendingDeprecationWarning`: displayed by default only when running "
"tests, intended for cases where a future version upgrade will change the "
"warning category to :exc:`DeprecationWarning` or :exc:`FutureWarning`."
msgstr ""
":exc:`PendingDeprecationWarning`: 默认情况下仅在运行测试时会显示，可用于提示未来版本升级将会改变警告类别为 "
":exc:`DeprecationWarning` 或 :exc:`FutureWarning` 的情况。"

#: ../../whatsnew/3.7.rst:393
msgid ""
"Previously both :exc:`DeprecationWarning` and "
":exc:`PendingDeprecationWarning` were only visible when running tests, which"
" meant that developers primarily writing single file scripts or using Python"
" interactively could be surprised by breaking changes in the APIs they used."
msgstr ""
"在此之前 :exc:`DeprecationWarning` 和 :exc:`PendingDeprecationWarning` "
"都仅在运行测试时可见，这意味着主要编写单文件脚本或使用 Python 交互模式的开发者可能会因他们所用 API 突然出现的改变而感到惊讶。"

#: ../../whatsnew/3.7.rst:400
msgid ":pep:`565` -- Show DeprecationWarning in ``__main__``"
msgstr ":pep:`565` -- 在 ``__main__`` 中显示 DeprecationWarning"

#: ../../whatsnew/3.7.rst:401
msgid "PEP written and implemented by Nick Coghlan"
msgstr "PEP 由 Nick Coghlan 撰写并实现"

#: ../../whatsnew/3.7.rst:407
msgid "PEP 560: Core Support for ``typing`` module and Generic Types"
msgstr "PEP 560: 对 ``typing`` 模块和泛型类型的核心支持"

#: ../../whatsnew/3.7.rst:409
msgid ""
"Initially :pep:`484` was designed in such way that it would not introduce "
"*any* changes to the core CPython interpreter. Now type hints and the "
":mod:`typing` module are extensively used by the community, so this "
"restriction is removed. The PEP introduces two special methods "
":meth:`~object.__class_getitem__` and :meth:`~object.__mro_entries__`, these"
" methods are now used by most classes and special constructs in "
":mod:`typing`. As a result, the speed of various operations with types "
"increased up to 7 times, the generic types can be used without metaclass "
"conflicts, and several long standing bugs in :mod:`typing` module are fixed."
msgstr ""

#: ../../whatsnew/3.7.rst:421
msgid ":pep:`560` -- Core support for typing module and generic types"
msgstr ":pep:`560` -- 对 typing 模块和泛型类型的核心支持"

#: ../../whatsnew/3.7.rst:428
msgid "PEP 552: Hash-based .pyc Files"
msgstr "PEP 552: 基于哈希值的 .pyc 文件"

#: ../../whatsnew/3.7.rst:430
msgid ""
"Python has traditionally checked the up-to-dateness of bytecode cache files "
"(i.e., ``.pyc`` files) by comparing the source metadata (last-modified "
"timestamp and size) with source metadata saved in the cache file header when"
" it was generated. While effective, this invalidation method has its "
"drawbacks.  When filesystem timestamps are too coarse, Python can miss "
"source updates, leading to user confusion. Additionally, having a timestamp "
"in the cache file is problematic for `build reproducibility "
"<https://reproducible-builds.org/>`_ and content-based build systems."
msgstr ""
"传统上 Python 检查字节码缓存文件 (即 ``.pyc`` 文件) 是否最新的方式是通过对源码元数据 "
"(最后更改的时间戳和大小）和生成缓存时保存在其文件头中的源码元数据进行比较。 这种检查方法虽然有效，但也存在缺点。 "
"当文件系统的时间戳太粗糙时，Python 有可能错过源码更新，导致用户感到困惑。 此外，在缓存文件中存在时间戳对于 `构建可再现 "
"<https://reproducible-builds.org/>`_ 并且基于内容的构建系统来说是有问题的。"

#: ../../whatsnew/3.7.rst:439
msgid ""
":pep:`552` extends the pyc format to allow the hash of the source file to be"
" used for invalidation instead of the source timestamp. Such ``.pyc`` files "
"are called \"hash-based\". By default, Python still uses timestamp-based "
"invalidation and does not generate hash-based ``.pyc`` files at runtime. "
"Hash-based ``.pyc`` files may be generated with :mod:`py_compile` or "
":mod:`compileall`."
msgstr ""
":pep:`552` 扩展了 pyc 格式以允许使用源文件的哈希值而非源文件的时间戳来检查有效性。 这种 ``.pyc`` 文件就称为“基于哈希值的”。"
" 默认情况下，Python 仍然使用基于时间戳的有效性检查，不会在运行时生成基于哈希值的 ``.pyc`` 文件。 基于哈希值的 ``.pyc`` "
"文件可以使用 :mod:`py_compile` 或 :mod:`compileall` 来生成。"

#: ../../whatsnew/3.7.rst:445
msgid ""
"Hash-based ``.pyc`` files come in two variants: checked and unchecked. "
"Python validates checked hash-based ``.pyc`` files against the corresponding"
" source files at runtime but doesn't do so for unchecked hash-based pycs. "
"Unchecked hash-based ``.pyc`` files are a useful performance optimization "
"for environments where a system external to Python (e.g., the build system) "
"is responsible for keeping ``.pyc`` files up-to-date."
msgstr ""
"基于哈希值的 ``.pyc`` 文件包含两种变体：已选定和未选定。 Python 会在运行时针对相应源码文件验证已选定基于哈希值的 ``.pyc`` "
"文件，但对未选定基于哈希值的 pyc 文件则不会这样做。 未选定基于哈希值的 ``.pyc`` 文件对于需要由 Python "
"外部的系统（例如构建系统）负责使 ``.pyc`` 文件保持最新的环境来说是一种有用的性能优化。"

#: ../../whatsnew/3.7.rst:452
msgid "See :ref:`pyc-invalidation` for more information."
msgstr "请参阅 :ref:`pyc-invalidation` 了解更多信息。"

#: ../../whatsnew/3.7.rst:456
msgid ":pep:`552` -- Deterministic pycs"
msgstr ":pep:`552` -- 确定性的 pyc 文件"

#: ../../whatsnew/3.7.rst:457
msgid "PEP written and implemented by Benjamin Peterson"
msgstr "PEP 由 Benjamin Peterson 撰写并实现"

#: ../../whatsnew/3.7.rst:463
msgid "PEP 545: Python Documentation Translations"
msgstr "PEP 545: Python 文档翻译"

#: ../../whatsnew/3.7.rst:465
msgid ""
":pep:`545` describes the process of creating and maintaining Python "
"documentation translations."
msgstr ":pep:`545` 描述了创建和维护 Python 文档翻译的整个过程。"

#: ../../whatsnew/3.7.rst:468
msgid "Three new translations have been added:"
msgstr "新增了三个新的翻译版本:"

#: ../../whatsnew/3.7.rst:470
msgid "Japanese: https://docs.python.org/ja/"
msgstr "日语: https://docs.python.org/ja/"

#: ../../whatsnew/3.7.rst:471
msgid "French: https://docs.python.org/fr/"
msgstr "法语: https://docs.python.org/fr/"

#: ../../whatsnew/3.7.rst:472
msgid "Korean: https://docs.python.org/ko/"
msgstr "韩语: https://docs.python.org/ko/"

#: ../../whatsnew/3.7.rst:476
msgid ":pep:`545` -- Python Documentation Translations"
msgstr ":pep:`545` -- Python 文档翻译"

#: ../../whatsnew/3.7.rst:477
msgid ""
"PEP written and implemented by Julien Palard, Inada Naoki, and Victor "
"Stinner."
msgstr "PEP 由 Julien Palard, Inada Naoki 和 Victor Stinner 撰写并实现。"

#: ../../whatsnew/3.7.rst:484
msgid "Python Development Mode (-X dev)"
msgstr "Python 开发模式 (-X dev)"

#: ../../whatsnew/3.7.rst:486
msgid ""
"The new :option:`-X` ``dev`` command line option or the new "
":envvar:`PYTHONDEVMODE` environment variable can be used to enable "
":ref:`Python Development Mode <devmode>`.  When in development mode, Python "
"performs additional runtime checks that are too expensive to be enabled by "
"default. See :ref:`Python Development Mode <devmode>` documentation for the "
"full description."
msgstr ""
"新的 :option:`-X` ``dev`` 命令行选项或新的 :envvar:`PYTHONDEVMODE` 环境变量可被用来启用 "
":ref:`Python 开发模式 <devmode>`。 在开发模式下，Python 将执行额外的如果默认启用会导致开销过大的运行时检查。 请参阅 "
":ref:`Python 开发模式 <devmode>` 文档查看完整说明。"

#: ../../whatsnew/3.7.rst:495
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.7.rst:497
msgid ""
"An :keyword:`await` expression and comprehensions containing an "
":keyword:`async for` clause were illegal in the expressions in "
":ref:`formatted string literals <f-strings>` due to a problem with the "
"implementation.  In Python 3.7 this restriction was lifted."
msgstr ""
":keyword:`await` 表达式和包含 :keyword:`async for` 子句的推导式不允许在 :ref:`格式化字符串字面值 "
"<f-strings>` 的表达式中使用。 在 Python 3.7 中此限制已被取消。"

#: ../../whatsnew/3.7.rst:502
msgid ""
"More than 255 arguments can now be passed to a function, and a function can "
"now have more than 255 parameters. (Contributed by Serhiy Storchaka in "
":issue:`12844` and :issue:`18896`.)"
msgstr ""
"现在可以将超过 255 个参数传递给一个函数，而现在一个函数也可以拥有超过 255 个形参。 （由 Serhiy Storchaka 在 "
":issue:`12844` 和 :issue:`18896` 中贡献。）"

#: ../../whatsnew/3.7.rst:506
msgid ""
":meth:`bytes.fromhex` and :meth:`bytearray.fromhex` now ignore all ASCII "
"whitespace, not only spaces. (Contributed by Robert Xiao in :issue:`28927`.)"
msgstr ""
"现在 :meth:`bytes.fromhex` 和 :meth:`bytearray.fromhex` 会忽略所有 ASCII "
"空白符，而非仅是空格符. （由 Robert Xiao 在 :issue:`28927` 中贡献。）"

#: ../../whatsnew/3.7.rst:509
msgid ""
":class:`str`, :class:`bytes`, and :class:`bytearray` gained support for the "
"new :meth:`isascii() <str.isascii>` method, which can be used to test if a "
"string or bytes contain only the ASCII characters. (Contributed by INADA "
"Naoki in :issue:`32677`.)"
msgstr ""
":class:`str`, :class:`bytes` 和 :class:`bytearray` 获得了对新 :meth:`isascii() "
"<str.isascii>` 方法的支持，该方法可被用来测试是个字符串或字节串是否仅包含 ASCII 字符。 （由 INADA Naoki 在 "
":issue:`32677` 中贡献。）"

#: ../../whatsnew/3.7.rst:514
msgid ""
":exc:`ImportError` now displays module name and module ``__file__`` path "
"when ``from ... import ...`` fails. (Contributed by Matthias Bussonnier in "
":issue:`29546`.)"
msgstr ""
"现在当 ``from ... import ...`` 失败时 :exc:`ImportError` 会显示模块名称和模块 ``__file__`` "
"路径。 （由 Matthias Bussonnier 在 :issue:`29546` 中贡献。）"

#: ../../whatsnew/3.7.rst:518
msgid ""
"Circular imports involving absolute imports with binding a submodule to a "
"name are now supported. (Contributed by Serhiy Storchaka in :issue:`30024`.)"
msgstr ""
"现在已支持涉及将子模块绑定到一个名称的绝对导入的循环导入。 （由 Serhiy Storchaka 在 :issue:`30024` 中贡献。）"

#: ../../whatsnew/3.7.rst:522
msgid ""
"``object.__format__(x, '')`` is now equivalent to ``str(x)`` rather than "
"``format(str(self), '')``. (Contributed by Serhiy Storchaka in "
":issue:`28974`.)"
msgstr ""
"现在 ``object.__format__(x, '')`` 等价于 ``str(x)`` 而非 ``format(str(self), '')``。"
" （由 Serhiy Storchaka d  :issue:`28974` 中贡献。）"

#: ../../whatsnew/3.7.rst:526
msgid ""
"In order to better support dynamic creation of stack traces, "
":class:`types.TracebackType` can now be instantiated from Python code, and "
"the :attr:`~traceback.tb_next` attribute on :ref:`tracebacks <traceback-"
"objects>` is now writable. (Contributed by Nathaniel J. Smith in "
":issue:`30579`.)"
msgstr ""
"为了更好地支持栈跟踪的动态创建，现在 :class:`types.TracebackType` 可以从 Python 代码中被实例化，并且 "
":ref:`回溯对象 <traceback-objects>` 的 :attr:`~traceback.tb_next` 属性现在是可写的。 （由 "
"Nathaniel J. Smith 在 :issue:`30579` 中贡献。）"

#: ../../whatsnew/3.7.rst:532
msgid ""
"When using the :option:`-m` switch, ``sys.path[0]`` is now eagerly expanded "
"to the full starting directory path, rather than being left as the empty "
"directory (which allows imports from the *current* working directory at the "
"time when an import occurs) (Contributed by Nick Coghlan in :issue:`33053`.)"
msgstr ""
"当使用 :option:`-m` 开关时，现在 ``sys.path[0]`` "
"会主动扩展为完整的起始目录路径，而不是保持为空目录（这将允许在发生导入时从 *当前* 工作目录导入） （由 Nick Coghlan 在 "
":issue:`33053` 中贡献。）"

#: ../../whatsnew/3.7.rst:538
msgid ""
"The new :option:`-X` ``importtime`` option or the "
":envvar:`PYTHONPROFILEIMPORTTIME` environment variable can be used to show "
"the timing of each module import. (Contributed by Inada Naoki in "
":issue:`31415`.)"
msgstr ""
"新的 :option:`-X` ``importtime`` 选项或 :envvar:`PYTHONPROFILEIMPORTTIME` "
"环境变量可被用来显示每次模块导入的时间。 （由 Inada Naoki 在 :issue:`31415` 中贡献。）"

#: ../../whatsnew/3.7.rst:545
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.7.rst:550
msgid "contextvars"
msgstr "contextvars"

#: ../../whatsnew/3.7.rst:552
msgid ""
"The new :mod:`contextvars` module and a set of :ref:`new C APIs "
"<contextvarsobjects>` introduce support for *context variables*.  Context "
"variables are conceptually similar to thread-local variables.  Unlike TLS, "
"context variables support asynchronous code correctly."
msgstr ""
"新的 :mod:`contextvars` 模块和一组 :ref:`新的 C API <contextvarsobjects>` 引入了对 "
"*上下文变量* 的支持。 上下文变量在概念上类似于线程局部变量。 与 TLS 不同，上下文变量能正确地支持异步代码。"

#: ../../whatsnew/3.7.rst:558
msgid ""
"The :mod:`asyncio` and :mod:`decimal` modules have been updated to use and "
"support context variables out of the box.  Particularly the active decimal "
"context is now stored in a context variable, which allows decimal operations"
" to work with the correct context in asynchronous code."
msgstr ""
":mod:`asyncio` 和 :mod:`decimal` 已得到更新以使用和支持开箱即用的上下文变量。 特别是激活的 decimal "
"上下文现在将存储在上下文变量中，它允许十进制运算在异步代码中使用正确的上下文。"

#: ../../whatsnew/3.7.rst:565
msgid ":pep:`567` -- Context Variables"
msgstr ":pep:`567` -- 上下文变量"

#: ../../whatsnew/3.7.rst:566
msgid "PEP written and implemented by Yury Selivanov"
msgstr "PEP 由 Yury Selivanov 撰写并实现"

#: ../../whatsnew/3.7.rst:572
msgid "dataclasses"
msgstr "dataclasses"

#: ../../whatsnew/3.7.rst:574
msgid ""
"The new :func:`~dataclasses.dataclass` decorator provides a way to declare "
"*data classes*.  A data class describes its attributes using class variable "
"annotations.  Its constructor and other magic methods, such as "
":meth:`~object.__repr__`, :meth:`~object.__eq__`, and "
":meth:`~object.__hash__` are generated automatically."
msgstr ""
"新的 :func:`~dataclasses.dataclass` 装饰器提供了一种声明 *数据类* 的方式。  数据类使用变量标注来描述其属性。 "
"它的构造器和其他魔术方法例如 :meth:`~object.__repr__`, :meth:`~object.__eq__` 以及 "
":meth:`~object.__hash__` 会自动地生成。"

#: ../../whatsnew/3.7.rst:580
msgid "Example::"
msgstr "示例::"

#: ../../whatsnew/3.7.rst:582
msgid ""
"@dataclass\n"
"class Point:\n"
"    x: float\n"
"    y: float\n"
"    z: float = 0.0\n"
"\n"
"p = Point(1.5, 2.5)\n"
"print(p)   # produces \"Point(x=1.5, y=2.5, z=0.0)\""
msgstr ""
"@dataclass\n"
"class Point:\n"
"    x: float\n"
"    y: float\n"
"    z: float = 0.0\n"
"\n"
"p = Point(1.5, 2.5)\n"
"print(p)   # produces \"Point(x=1.5, y=2.5, z=0.0)\""

#: ../../whatsnew/3.7.rst:593
msgid ":pep:`557` -- Data Classes"
msgstr ":pep:`557` -- 数据类"

#: ../../whatsnew/3.7.rst:594
msgid "PEP written and implemented by Eric V. Smith"
msgstr "PEP 由 Eric V. Smith 撰写并实现"

#: ../../whatsnew/3.7.rst:600
msgid "importlib.resources"
msgstr "importlib.resources"

#: ../../whatsnew/3.7.rst:602
msgid ""
"The new :mod:`importlib.resources` module provides several new APIs and one "
"new ABC for access to, opening, and reading *resources* inside packages. "
"Resources are roughly similar to files inside packages, but they needn't be "
"actual files on the physical file system.  Module loaders can provide a "
":meth:`!get_resource_reader` function which returns a "
":class:`importlib.abc.ResourceReader` instance to support this new API.  "
"Built-in file path loaders and zip file loaders both support this."
msgstr ""

#: ../../whatsnew/3.7.rst:610
msgid "Contributed by Barry Warsaw and Brett Cannon in :issue:`32248`."
msgstr "由 Barry Warsaw 和 Brett Cannon 在 :issue:`32248` 中贡献。"

#: ../../whatsnew/3.7.rst:614
msgid ""
"`importlib_resources <https://importlib-"
"resources.readthedocs.io/en/latest/>`_ -- a PyPI backport for earlier Python"
" versions."
msgstr ""
"`importlib_resources <https://importlib-"
"resources.readthedocs.io/en/latest/>`_ -- 用于较早版本 Python 的 PyPI 向下移植包。"

#: ../../whatsnew/3.7.rst:619
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.7.rst:623
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.7.rst:625
msgid ""
"The new :meth:`ArgumentParser.parse_intermixed_args() "
"<argparse.ArgumentParser.parse_intermixed_args>` method allows intermixing "
"options and positional arguments. (Contributed by paul.j3 in "
":issue:`14191`.)"
msgstr ""
"新的 :meth:`ArgumentParser.parse_intermixed_args() "
"<argparse.ArgumentParser.parse_intermixed_args>` 方法允许混合选项与位置参数。 （由 paul.j3 在"
" :issue:`14191` 中提供。）"

#: ../../whatsnew/3.7.rst:634 ../../whatsnew/3.7.rst:1968
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.7.rst:636
msgid ""
"The :mod:`asyncio` module has received many new features, usability and "
":ref:`performance improvements <whatsnew37-asyncio-perf>`.  Notable changes "
"include:"
msgstr ""
":mod:`asyncio` 模块获得了许多新的特性、可用性和 :ref:`性能提升 <whatsnew37-asyncio-perf>`。 "
"重要的改变包括:"

#: ../../whatsnew/3.7.rst:640
msgid ""
"The new :term:`provisional <provisional API>` :func:`asyncio.run` function "
"can be used to run a coroutine from synchronous code by automatically "
"creating and destroying the event loop. (Contributed by Yury Selivanov in "
":issue:`32314`.)"
msgstr ""
"新的 :term:`暂定 <provisional API>` :func:`asyncio.run` "
"函数可被用于通过自动创建和销毁事件循环来基于同步代码运行协程。 （由 Yury Selivanov 在 :issue:`32314` 中贡献。）"

#: ../../whatsnew/3.7.rst:645
msgid ""
"asyncio gained support for :mod:`contextvars`. :meth:`loop.call_soon() "
"<asyncio.loop.call_soon>`, :meth:`loop.call_soon_threadsafe() "
"<asyncio.loop.call_soon_threadsafe>`, :meth:`loop.call_later() "
"<asyncio.loop.call_later>`, :meth:`loop.call_at() <asyncio.loop.call_at>`, "
"and :meth:`Future.add_done_callback() <asyncio.Future.add_done_callback>` "
"have a new optional keyword-only *context* parameter. :class:`Tasks "
"<asyncio.Task>` now track their context automatically. See :pep:`567` for "
"more details. (Contributed by Yury Selivanov in :issue:`32436`.)"
msgstr ""
"asyncio 增加支持 :mod:`contextvars`. :meth:`loop.call_soon() "
"<asyncio.loop.call_soon>`, :meth:`loop.call_soon_threadsafe() "
"<asyncio.loop.call_soon_threadsafe>`, :meth:`loop.call_later() "
"<asyncio.loop.call_later>`, :meth:`loop.call_at() <asyncio.loop.call_at>` 并且"
" :meth:`Future.add_done_callback() <asyncio.Future.add_done_callback>` "
"具有新的可选仅关键字参数 *context*。 现在 :class:`Tasks <asyncio.Task>` 会自动跟踪其上下文。 详情参见 "
":pep:`567`。 （由 Yury Selivanov 在 :issue:`32436` 中贡献。）"

#: ../../whatsnew/3.7.rst:656
msgid ""
"The new :func:`asyncio.create_task` function has been added as a shortcut to"
" ``asyncio.get_event_loop().create_task()``. (Contributed by Andrew Svetlov "
"in :issue:`32311`.)"
msgstr ""
"增加了新的 :func:`asyncio.create_task` 函数作为 "
"``asyncio.get_event_loop().create_task()`` 的快捷方式。 （由 Andrew Svetlov 在 "
":issue:`32311` 中贡献。）"

#: ../../whatsnew/3.7.rst:660
msgid ""
"The new :meth:`loop.start_tls() <asyncio.loop.start_tls>` method can be used"
" to upgrade an existing connection to TLS. (Contributed by Yury Selivanov in"
" :issue:`23749`.)"
msgstr ""
"新的 :meth:`loop.start_tls() <asyncio.loop.start_tls>` 方法可用于升级现有的 TLS 连接。 （由 "
"Yury Selivanov 在 :issue:`23749` 中贡献。）"

#: ../../whatsnew/3.7.rst:664
msgid ""
"The new :meth:`loop.sock_recv_into() <asyncio.loop.sock_recv_into>` method "
"allows reading data from a socket directly into a provided buffer making it "
"possible to reduce data copies. (Contributed by Antoine Pitrou in "
":issue:`31819`.)"
msgstr ""
"新的 :meth:`loop.sock_recv_into() <asyncio.loop.sock_recv_into>` "
"方法允许直接从套接字读取数据放入所提供的缓冲区，从而可以减少数据复制。 （由 Antoine Pitrou 在 :issue:`31819` 中贡献。）"

#: ../../whatsnew/3.7.rst:669
msgid ""
"The new :func:`asyncio.current_task` function returns the currently running "
":class:`~asyncio.Task` instance, and the new :func:`asyncio.all_tasks` "
"function returns a set of all existing ``Task`` instances in a given loop. "
"The :meth:`!Task.current_task` and :meth:`!Task.all_tasks` methods have been"
" deprecated. (Contributed by Andrew Svetlov in :issue:`32250`.)"
msgstr ""
"新增的 :func:`asyncio.current_task` 函数可返回当前运行的 :class:`~asyncio.Task` 实例，而新增的 "
":func:`asyncio.all_tasks` 函数可返回给定循环中所有现存 ``Task`` 实例的集合。 "
":meth:`!Task.current_task` 和 :meth:`!Task.all_tasks` 方法已被弃用。 （由 Andrew "
"Svetlov 在 :issue:`32250` 中贡献。）"

#: ../../whatsnew/3.7.rst:676
msgid ""
"The new *provisional* :class:`~asyncio.BufferedProtocol` class allows "
"implementing streaming protocols with manual control over the receive "
"buffer. (Contributed by Yury Selivanov in :issue:`32251`.)"
msgstr ""
"新的 *暂定* :class:`~asyncio.BufferedProtocol` 类允许通过手动控制接收缓冲区来实现流式协议。 （由 Yury "
"Selivanov 在 :issue:`32251` 中贡献。）"

#: ../../whatsnew/3.7.rst:680
msgid ""
"The new :func:`asyncio.get_running_loop` function returns the currently "
"running loop, and raises a :exc:`RuntimeError` if no loop is running. This "
"is in contrast with :func:`asyncio.get_event_loop`, which will *create* a "
"new event loop if none is running. (Contributed by Yury Selivanov in "
":issue:`32269`.)"
msgstr ""
"新的 :func:`asyncio.get_running_loop` 函数可返回当前运行的循环，如果没有循环在运行则引发 "
":exc:`RuntimeError`。 这与 :func:`asyncio.get_event_loop` 不同，后者在没有循环在运行时将 *创建* "
"一个新的事件循环。 （由 Yury Selivanov 在 :issue:`32269` 中提供。）"

#: ../../whatsnew/3.7.rst:686
msgid ""
"The new :meth:`StreamWriter.wait_closed() "
"<asyncio.StreamWriter.wait_closed>` coroutine method allows waiting until "
"the stream writer is closed.  The new :meth:`StreamWriter.is_closing() "
"<asyncio.StreamWriter.is_closing>` method can be used to determine if the "
"writer is closing. (Contributed by Andrew Svetlov in :issue:`32391`.)"
msgstr ""
"新的 :meth:`StreamWriter.wait_closed() <asyncio.StreamWriter.wait_closed>` "
"协程方法允许执行等待直到流写入器被关闭。 新的 :meth:`StreamWriter.is_closing() "
"<asyncio.StreamWriter.is_closing>` 方法可用于确定写入器是否被关闭。 （由 Andrew Svetlov 在 "
":issue:`32391` 中贡献。）"

#: ../../whatsnew/3.7.rst:692
msgid ""
"The new :meth:`loop.sock_sendfile() <asyncio.loop.sock_sendfile>` coroutine "
"method allows sending files using :mod:`os.sendfile` when possible. "
"(Contributed by Andrew Svetlov in :issue:`32410`.)"
msgstr ""
"新的 :meth:`loop.sock_sendfile() <asyncio.loop.sock_sendfile>` 协程方法允许在可能的情况下使用"
" :mod:`os.sendfile` 发送文件。 （由 Andrew Svetlov 在 :issue:`32410` 中贡献。）"

#: ../../whatsnew/3.7.rst:696
msgid ""
"The new :meth:`Future.get_loop() <asyncio.Future.get_loop>` and "
"``Task.get_loop()`` methods return the instance of the loop on which a task "
"or a future were created. :meth:`Server.get_loop() "
"<asyncio.Server.get_loop>` allows doing the same for :class:`asyncio.Server`"
" objects. (Contributed by Yury Selivanov in :issue:`32415` and Srinivas "
"Reddy Thatiparthy in :issue:`32418`.)"
msgstr ""
"新的 :meth:`Future.get_loop() <asyncio.Future.get_loop>` 和 ``Task.get_loop()``"
" 方法会返回创建 task 或 future 对象的事件循环的实例。 :meth:`Server.get_loop() "
"<asyncio.Server.get_loop>` 允许为 :class:`asyncio.Server` 对象执行同样操作。 （由 Yury "
"Selivanov 在 :issue:`32415` 中，以及由 Srinivas Reddy Thatiparthy 在 :issue:`32418`"
" 中贡献。）"

#: ../../whatsnew/3.7.rst:704
msgid ""
"It is now possible to control how instances of :class:`asyncio.Server` begin"
" serving.  Previously, the server would start serving immediately when "
"created. The new *start_serving* keyword argument to "
":meth:`loop.create_server() <asyncio.loop.create_server>` and "
":meth:`loop.create_unix_server() <asyncio.loop.create_unix_server>`, as well"
" as :meth:`Server.start_serving() <asyncio.Server.start_serving>`, and "
":meth:`Server.serve_forever() <asyncio.Server.serve_forever>` can be used to"
" decouple server instantiation and serving.  The new "
":meth:`Server.is_serving() <asyncio.Server.is_serving>` method returns "
"``True`` if the server is serving.  :class:`~asyncio.Server` objects are now"
" asynchronous context managers::"
msgstr ""
"现在可以控制 :class:`asyncio.Server` 的实例如何开启服务。 之前，服务在创建后将立即开启服务。 新的 "
"*start_serving* 关键字参数已添加到 :meth:`loop.create_server() "
"<asyncio.loop.create_server>` 和 :meth:`loop.create_unix_server() "
"<asyncio.loop.create_unix_server>`，并且 :meth:`Server.start_serving() "
"<asyncio.Server.start_serving>`, 和 :meth:`Server.serve_forever() "
"<asyncio.Server.serve_forever>` 可被用来分离服务的实例化和服务的开启。 新的 "
":meth:`Server.is_serving() <asyncio.Server.is_serving>` 方法会在服务开启时返回 "
"``True``。 现在 :class:`~asyncio.Server` 对象已是异步上下文管理器::"

#: ../../whatsnew/3.7.rst:716
msgid ""
"srv = await loop.create_server(...)\n"
"\n"
"async with srv:\n"
"    # some code\n"
"\n"
"# At this point, srv is closed and no longer accepts new connections."
msgstr ""
"srv = await loop.create_server(...)\n"
"\n"
"async with srv:\n"
"    # 一些代码\n"
"\n"
"# 此时，srv 已关闭并不再接受新的连接。"

#: ../../whatsnew/3.7.rst:723
msgid "(Contributed by Yury Selivanov in :issue:`32662`.)"
msgstr "（由 Yury Selivanov 在 :issue:`32662` 中贡献。）"

#: ../../whatsnew/3.7.rst:725
msgid ""
"Callback objects returned by :func:`loop.call_later() "
"<asyncio.loop.call_later>` gained the new :meth:`when() "
"<asyncio.TimerHandle.when>` method which returns an absolute scheduled "
"callback timestamp. (Contributed by Andrew Svetlov in :issue:`32741`.)"
msgstr ""
"由 :func:`loop.call_later() <asyncio.loop.call_later>` 所返回的回调对象已获得新的 "
":meth:`when() <asyncio.TimerHandle.when>` 方法，该方法会返回一个排入计划日程的绝对时间戳。 （由 Andrew"
" Svetlov 在 :issue:`32741` 中贡献。）"

#: ../../whatsnew/3.7.rst:731
msgid ""
"The :meth:`loop.create_datagram_endpoint() \\ "
"<asyncio.loop.create_datagram_endpoint>` method gained support for Unix "
"sockets. (Contributed by Quentin Dawans in :issue:`31245`.)"
msgstr ""
":meth:`loop.create_datagram_endpoint() \\ "
"<asyncio.loop.create_datagram_endpoint>` 方法已获得对 Unix 套接字的支持。 （由 Quentin "
"Dawans 在 :issue:`31245` 中贡献。）"

#: ../../whatsnew/3.7.rst:736
msgid ""
"The :func:`asyncio.open_connection`, :func:`asyncio.start_server` functions,"
" :meth:`loop.create_connection() <asyncio.loop.create_connection>`, "
":meth:`loop.create_server() <asyncio.loop.create_server>`, "
":meth:`loop.create_accepted_socket() <asyncio.loop.connect_accepted_socket>`"
" methods and their corresponding UNIX socket variants now accept the "
"*ssl_handshake_timeout* keyword argument. (Contributed by Neil Aspinall in "
":issue:`29970`.)"
msgstr ""
":func:`asyncio.open_connection`, :func:`asyncio.start_server` functions, "
":meth:`loop.create_connection() <asyncio.loop.create_connection>`, "
":meth:`loop.create_server() <asyncio.loop.create_server>`, "
":meth:`loop.create_accepted_socket() <asyncio.loop.connect_accepted_socket>`"
" 方法及其对应的 UNIX 套接字变体现在接受 *ssl_handshake_timeout* 关键字参数。 （由 Neil Aspinall 在 "
":issue:`29970` 中贡献。）"

#: ../../whatsnew/3.7.rst:744
msgid ""
"The new :meth:`Handle.cancelled() <asyncio.Handle.cancelled>` method returns"
" ``True`` if the callback was cancelled. (Contributed by Marat Sharafutdinov"
" in :issue:`31943`.)"
msgstr ""
"新的 :meth:`Handle.cancelled() <asyncio.Handle.cancelled>` 方法会在回调被取消时返回 "
"``True``。 （由 Marat Sharafutdinov 在 :issue:`31943` 中贡献。）"

#: ../../whatsnew/3.7.rst:748
msgid ""
"The asyncio source has been converted to use the "
":keyword:`async`/:keyword:`await` syntax. (Contributed by Andrew Svetlov in "
":issue:`32193`.)"
msgstr ""
"asyncio 源已被转换为使用 :keyword:`async`/:keyword:`await` 语法。 （由 Andrew Svetlov 在 "
":issue:`32193` 中贡献。）"

#: ../../whatsnew/3.7.rst:752
msgid ""
"The new :meth:`ReadTransport.is_reading() "
"<asyncio.ReadTransport.is_reading>` method can be used to determine the "
"reading state of the transport. Additionally, calls to "
":meth:`ReadTransport.resume_reading() "
"<asyncio.ReadTransport.resume_reading>` and "
":meth:`ReadTransport.pause_reading() <asyncio.ReadTransport.pause_reading>` "
"are now idempotent. (Contributed by Yury Selivanov in :issue:`32356`.)"
msgstr ""
"新的 :meth:`ReadTransport.is_reading() <asyncio.ReadTransport.is_reading>` "
"方法可用于确定传输的读取状态。 此外，对 :meth:`ReadTransport.resume_reading() "
"<asyncio.ReadTransport.resume_reading>` 和 "
":meth:`ReadTransport.pause_reading() <asyncio.ReadTransport.pause_reading>` "
"的调用现在是幂等的。 （由 Yury Selivanov 在 :issue:`32356` 中贡献。）"

#: ../../whatsnew/3.7.rst:760
msgid ""
"Loop methods which accept socket paths now support passing :term:`path-like "
"objects <path-like object>`. (Contributed by Yury Selivanov in "
":issue:`32066`.)"
msgstr ""
"接受套接字路径的循环方法现在支持传入 :term:`路径类对象 <path-like object>`。 （由 Yury Selivanov 在 "
":issue:`32066` 中贡献。）"

#: ../../whatsnew/3.7.rst:764
msgid ""
"In :mod:`asyncio` TCP sockets on Linux are now created with ``TCP_NODELAY`` "
"flag set by default. (Contributed by Yury Selivanov and Victor Stinner in "
":issue:`27456`.)"
msgstr ""
"在 :mod:`asyncio` 中，Linux 上的 TCP 套接字现在创建时默认带有 ``TCP_NODELAY`` 旗标设置。 （由 Yury "
"Selivanov 和 Victor Stinner 在 :issue:`27456` 中贡献。）"

#: ../../whatsnew/3.7.rst:768
msgid ""
"Exceptions occurring in cancelled tasks are no longer logged. (Contributed "
"by Yury Selivanov in :issue:`30508`.)"
msgstr "在被取消任务中发生的异常不会再被记录。 （由 Yury Selivanov 在 :issue:`30508` 中贡献。）"

#: ../../whatsnew/3.7.rst:771
msgid ""
"New ``WindowsSelectorEventLoopPolicy`` and "
"``WindowsProactorEventLoopPolicy`` classes. (Contributed by Yury Selivanov "
"in :issue:`33792`.)"
msgstr ""
"新的 ``WindowsSelectorEventLoopPolicy`` 和 ``WindowsProactorEventLoopPolicy`` "
"类。 （由 Yury Selivanov 在 :issue:`33792` 中贡献。）"

#: ../../whatsnew/3.7.rst:775
msgid ""
"Several ``asyncio`` APIs have been :ref:`deprecated <whatsnew37-asyncio-"
"deprecated>`."
msgstr "部分 ``asyncio`` API 改为 :ref:`已弃用 <whatsnew37-asyncio-deprecated>`。"

#: ../../whatsnew/3.7.rst:780
msgid "binascii"
msgstr "binascii"

#: ../../whatsnew/3.7.rst:782
msgid ""
"The :func:`~binascii.b2a_uu` function now accepts an optional *backtick* "
"keyword argument.  When it's true, zeros are represented by ``'`'`` instead "
"of spaces.  (Contributed by Xiang Zhang in :issue:`30103`.)"
msgstr ""
":func:`~binascii.b2a_uu` 函数现在接受可选的 *backtick* 关键字参数。 当其为真值时，零会以 ``'`'`` "
"而非空格来表示。 （由 Xiang Zhang 在 :issue:`30103` 中贡献。）"

#: ../../whatsnew/3.7.rst:788
msgid "calendar"
msgstr "calendar"

#: ../../whatsnew/3.7.rst:790
msgid ""
"The :class:`~calendar.HTMLCalendar` class has new class attributes which "
"ease the customization of CSS classes in the produced HTML calendar. "
"(Contributed by Oz Tiram in :issue:`30095`.)"
msgstr ""
":class:`~calendar.HTMLCalendar` 类具有新的类属性，可以简化所生成 HTML 日历中 CSS 类的自定义。 （由 Oz "
"Tiram 在 :issue:`30095` 中贡献。）"

#: ../../whatsnew/3.7.rst:796 ../../whatsnew/3.7.rst:1982
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.7.rst:798
msgid ""
"``collections.namedtuple()`` now supports default values. (Contributed by "
"Raymond Hettinger in :issue:`32320`.)"
msgstr ""
"``collections.namedtuple()`` 现在支持默认值。 （由 Raymond Hettinger 在 :issue:`32320` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:803
msgid "compileall"
msgstr "compileall"

#: ../../whatsnew/3.7.rst:805
msgid ""
":func:`compileall.compile_dir` learned the new *invalidation_mode* "
"parameter, which can be used to enable :ref:`hash-based .pyc invalidation "
"<whatsnew37-pep552>`.  The invalidation mode can also be specified on the "
"command line using the new ``--invalidation-mode`` argument. (Contributed by"
" Benjamin Peterson in :issue:`31650`.)"
msgstr ""
":func:`compileall.compile_dir` 增加了新的 *invalidation_mode* 形参，可用于启用 "
":ref:`基于哈希值的 .pyc 有效性检测 <whatsnew37-pep552>`。 失效模式也可以在命令行中使用新的 "
"``--invalidation-mode`` 参数来指定。 （由 Benjamin Peterson 在 :issue:`31650` 中贡献。）"

#: ../../whatsnew/3.7.rst:814
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.7.rst:816
msgid ""
":class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` and "
":class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` now "
"support the new *initializer* and *initargs* constructor arguments. "
"(Contributed by Antoine Pitrou in :issue:`21423`.)"
msgstr ""
":class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` 和 "
":class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` 现在支持新的 "
"*初始化器* 以及 *initargs* 构造器参数。 （由 Antoine Pitrou 在 :issue:`21423` 中贡献。）"

#: ../../whatsnew/3.7.rst:821
msgid ""
"The :class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` "
"can now take the multiprocessing context via the new *mp_context* argument. "
"(Contributed by Thomas Moreau in :issue:`31540`.)"
msgstr ""
":class:`ProcessPoolExecutor <concurrent.futures.ProcessPoolExecutor>` "
"现在能通过新的 *mp_context* 参数来接受多进程上下文。 （由 Thomas Moreau 在 :issue:`31540` 中贡献。）"

#: ../../whatsnew/3.7.rst:827
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.7.rst:829
msgid ""
"The new :func:`~contextlib.nullcontext` is a simpler and faster no-op "
"context manager than :class:`~contextlib.ExitStack`. (Contributed by Jesse-"
"Bakker in :issue:`10049`.)"
msgstr ""
"新的 :func:`~contextlib.nullcontext` 是一个比 :class:`~contextlib.ExitStack` "
"更简单和快速的无操作上下文管理器。 （由 Jesse-Bakker 在 :issue:`10049` 中贡献。）"

#: ../../whatsnew/3.7.rst:833
msgid ""
"The new :func:`~contextlib.asynccontextmanager`, "
":class:`~contextlib.AbstractAsyncContextManager`, and "
":class:`~contextlib.AsyncExitStack` have been added to complement their "
"synchronous counterparts.  (Contributed by Jelle Zijlstra in :issue:`29679` "
"and :issue:`30241`, and by Alexander Mohr and Ilya Kulakov in "
":issue:`29302`.)"
msgstr ""
"增加了新的 :func:`~contextlib.asynccontextmanager`, "
":class:`~contextlib.AbstractAsyncContextManager` 和 "
":class:`~contextlib.AsyncExitStack` 以补充它们所对应的同步项。 （由 Jelle Zijlstra 在 "
":issue:`29679` 和 :issue:`30241` 中，以及由 Alexander Mohr 和 Ilya Kulakov 在 "
":issue:`29302` 中贡献。）"

#: ../../whatsnew/3.7.rst:842
msgid "cProfile"
msgstr "cProfile"

#: ../../whatsnew/3.7.rst:844
msgid ""
"The :mod:`cProfile` command line now accepts ``-m module_name`` as an "
"alternative to script path.  (Contributed by Sanyam Khurana in "
":issue:`21862`.)"
msgstr ""
":mod:`cProfile` 命令行现在接受 ``-m module_name`` 作为脚本路径的替代。 （由 Sanyam Khurana 在 "
":issue:`21862` 中贡献。）"

#: ../../whatsnew/3.7.rst:849
msgid "crypt"
msgstr "crypt"

#: ../../whatsnew/3.7.rst:851
msgid ""
"The :mod:`!crypt` module now supports the Blowfish hashing method. "
"(Contributed by Serhiy Storchaka in :issue:`31664`.)"
msgstr ""
"现在 :mod:`!crypt` 模块已支持 Blowfish 哈希算法。 （由 Serhiy Storchaka 在 :issue:`31664` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:854
msgid ""
"The :func:`!mksalt` function now allows specifying the number of rounds for "
"hashing.  (Contributed by Serhiy Storchaka in :issue:`31702`.)"
msgstr ""
"现在 :func:`!mksalt` 函数允许指定哈希操作的轮数。 （由 Serhiy Storchaka 在 :issue:`31702` 中贡献。）"

#: ../../whatsnew/3.7.rst:859
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.7.rst:861
msgid ""
"The new :meth:`datetime.fromisoformat() <datetime.datetime.fromisoformat>` "
"method constructs a :class:`~datetime.datetime` object from a string in one "
"of the formats output by :meth:`datetime.isoformat() "
"<datetime.datetime.isoformat>`. (Contributed by Paul Ganssle in "
":issue:`15873`.)"
msgstr ""
"新的 :meth:`datetime.fromisoformat() <datetime.datetime.fromisoformat>` 方法会基于由"
" :meth:`datetime.isoformat() <datetime.datetime.isoformat>` 所输出的某一特定格式字符串构建 "
":class:`~datetime.datetime` 对象。 （由 Paul Ganssle 在 :issue:`15873` 中贡献。）"

#: ../../whatsnew/3.7.rst:867
msgid ""
"The :class:`tzinfo <datetime.tzinfo>` class now supports sub-minute offsets."
" (Contributed by Alexander Belopolsky in :issue:`5288`.)"
msgstr ""
":class:`tzinfo <datetime.tzinfo>` 类现在支持小于一分钟的偏移量。 （由 Alexander Belopolsky 在 "
":issue:`5288` 中贡献。）"

#: ../../whatsnew/3.7.rst:872 ../../whatsnew/3.7.rst:1992
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.7.rst:874
msgid ""
":mod:`dbm.dumb` now supports reading read-only files and no longer writes "
"the index file when it is not changed."
msgstr ":mod:`dbm.dumb` 现在支持读取只读文件，并且在其未改变时不再写入索引文件。"

#: ../../whatsnew/3.7.rst:879
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.7.rst:881
msgid ""
"The :mod:`decimal` module now uses :ref:`context variables "
"<whatsnew37-pep567>` to store the decimal context. (Contributed by Yury "
"Selivanov in :issue:`32630`.)"
msgstr ""
":mod:`decimal` 模块现在使用 :ref:`上下文变量 <whatsnew37-pep567>` 来储存十进制值上下文。 （由 Yury "
"Selivanov 在 :issue:`32630` 中贡献。）"

#: ../../whatsnew/3.7.rst:887
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.7.rst:889
msgid ""
"The :func:`~dis.dis` function is now able to disassemble nested code objects"
" (the code of comprehensions, generator expressions and nested functions, "
"and the code used for building nested classes).  The maximum depth of "
"disassembly recursion is controlled by the new *depth* parameter. "
"(Contributed by Serhiy Storchaka in :issue:`11822`.)"
msgstr ""
":func:`~dis.dis` 函数现在能够反汇编嵌套的代码对象（推导式、生成器表达式和嵌套函数的代码，以及用于构建嵌套类的代码）。 "
"反汇编递归的最大深度由新的 *depth* 形参来控制。 （由 Serhiy Storchaka 在 :issue:`11822` 中贡献。）"

#: ../../whatsnew/3.7.rst:898
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.7.rst:900
msgid ""
"``README.rst`` is now included in the list of distutils standard READMEs and"
" therefore included in source distributions. (Contributed by Ryan Gonzalez "
"in :issue:`11913`.)"
msgstr ""
"``README.rst`` 现在包含在 distutils 的标准 README 列表之中，因而也包含在源码发布之中。 （由 Ryan "
"Gonzalez 在 :issue:`11913` 中贡献。）"

#: ../../whatsnew/3.7.rst:906 ../../whatsnew/3.7.rst:2002
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.7.rst:908
msgid ""
"The :class:`Enum <enum.Enum>` learned the new ``_ignore_`` class property, "
"which allows listing the names of properties which should not become enum "
"members. (Contributed by Ethan Furman in :issue:`31801`.)"
msgstr ""
":class:`Enum <enum.Enum>` 增加了新的 ``_ignore_`` 类特征属性，该属性允许列出不应当成为枚举成员的特征属性名称。 "
"（由 Ethan Furman 在 :issue:`31801` 中贡献。）"

#: ../../whatsnew/3.7.rst:913
msgid ""
"In Python 3.8, attempting to check for non-Enum objects in "
":class:`~enum.Enum` classes will raise a :exc:`TypeError` (e.g. ``1 in "
"Color``); similarly, attempting to check for non-Flag objects in a "
":class:`~enum.Flag` member will raise :exc:`TypeError` (e.g. ``1 in "
"Perm.RW``); currently, both operations return :const:`False` instead and are"
" deprecated. (Contributed by Ethan Furman in :issue:`33217`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:922
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.7.rst:924
msgid ""
":func:`functools.singledispatch` now supports registering implementations "
"using type annotations. (Contributed by Łukasz Langa in :issue:`32227`.)"
msgstr ""
":func:`functools.singledispatch` 现在支持使用类型标注来注册实现。 （由 Łukasz Langa 在 "
":issue:`32227` 中贡献。）"

#: ../../whatsnew/3.7.rst:930
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.7.rst:932
msgid ""
"The new :func:`gc.freeze` function allows freezing all objects tracked by "
"the garbage collector and excluding them from future collections. This can "
"be used before a POSIX ``fork()`` call to make the GC copy-on-write friendly"
" or to speed up collection.  The new :func:`gc.unfreeze` functions reverses "
"this operation.  Additionally, :func:`gc.get_freeze_count` can be used to "
"obtain the number of frozen objects. (Contributed by Li Zekun in "
":issue:`31558`.)"
msgstr ""
"新的 :func:`gc.freeze` 函数允许冻结由垃圾回收器所跟踪的所有对象，并将它们从未来的集合中排除。 这可以在 POSIX "
"``fork()`` 调用之前使用以令 GC 友好地进行写入时复制或加速收集。 新的 :func:`gc.unfreeze` 函数会反转此操作。 "
"此外，:func:`gc.get_freeze_count` 可被用于获取冻结对象的数量。 （由 Li Zekun 在 :issue:`31558` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:942
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.7.rst:944
msgid ""
"The :mod:`hmac` module now has an optimized one-shot :func:`~hmac.digest` "
"function, which is up to three times faster than :func:`~hmac.HMAC`. "
"(Contributed by Christian Heimes in :issue:`32433`.)"
msgstr ""
":mod:`hmac` 现在具有经优化的一次性 :func:`~hmac.digest` 函数，其速度比 :func:`~hmac.HMAC` "
"要快三倍。 （由 Christian Heimes 在 :issue:`32433` 中贡献。）"

#: ../../whatsnew/3.7.rst:950
msgid "http.client"
msgstr "http.client"

#: ../../whatsnew/3.7.rst:952
msgid ""
":class:`~http.client.HTTPConnection` and "
":class:`~http.client.HTTPSConnection` now support the new *blocksize* "
"argument for improved upload throughput. (Contributed by Nir Soffer in "
":issue:`31945`.)"
msgstr ""
":class:`~http.client.HTTPConnection` 和 :class:`~http.client.HTTPSConnection`"
" 现在支持新的 *blocksize* 参数以提升上传吞吐量。 （由 Nir Soffer 在 :issue:`31945` 中贡献。）"

#: ../../whatsnew/3.7.rst:958
msgid "http.server"
msgstr "http.server"

#: ../../whatsnew/3.7.rst:960
msgid ""
":class:`~http.server.SimpleHTTPRequestHandler` now supports the HTTP ``If-"
"Modified-Since`` header.  The server returns the 304 response status if the "
"target file was not modified after the time specified in the header. "
"(Contributed by Pierre Quentel in :issue:`29654`.)"
msgstr ""
":class:`~http.server.SimpleHTTPRequestHandler` 现在支持 HTTP ``If-Modified-"
"Since`` 标头。 如果目标文件在该标点指定的时间之后未被修改则服务器会返回 304 响应状态。 （由 Pierre Quentel 在 "
":issue:`29654` 中贡献。）"

#: ../../whatsnew/3.7.rst:965
msgid ""
":class:`~http.server.SimpleHTTPRequestHandler` accepts the new *directory* "
"argument, in addition to the new ``--directory`` command line argument. With"
" this parameter, the server serves the specified directory, by default it "
"uses the current working directory. (Contributed by Stéphane Wirtel and "
"Julien Palard in :issue:`28707`.)"
msgstr ""
":class:`~http.server.SimpleHTTPRequestHandler` 接受新的 *directory* 参数并增加了新的 "
"``--directory`` 命令行参数。 通过此形参，服务器可以对服务指定目录，默认情况下它使用当前工作目录。 （由 Stéphane Wirtel"
" 和 Julien Palard 在 :issue:`28707` 中贡献。）"

#: ../../whatsnew/3.7.rst:971
msgid ""
"The new :class:`ThreadingHTTPServer <http.server.ThreadingHTTPServer>` class"
" uses threads to handle requests using "
":class:`~socketserver.ThreadingMixIn`. It is used when ``http.server`` is "
"run with ``-m``. (Contributed by Julien Palard in :issue:`31639`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:978
msgid "idlelib and IDLE"
msgstr "idlelib 与 IDLE"

#: ../../whatsnew/3.7.rst:980
msgid ""
"Multiple fixes for autocompletion. (Contributed by Louie Lu in "
":issue:`15786`.)"
msgstr "多个对自动补全的修正。 （由 Louie Lu 在 :issue:`15786` 中贡献。）"

#: ../../whatsnew/3.7.rst:982
msgid ""
"Module Browser (on the File menu, formerly called Class Browser), now "
"displays nested functions and classes in addition to top-level functions and"
" classes. (Contributed by Guilherme Polo, Cheryl Sabella, and Terry Jan "
"Reedy in :issue:`1612262`.)"
msgstr ""
"Module Browser (在 File 菜单中，之前称为 Class Browser) 现在会在最高层级函数和类之外显示嵌套的函数和类。 （由 "
"Guilherme Polo, Cheryl Sabella 和 Terry Jan Reedy 在 :issue:`1612262` 中贡献。）"

#: ../../whatsnew/3.7.rst:988
msgid ""
"The Settings dialog (Options, Configure IDLE) has been partly rewritten to "
"improve both appearance and function. (Contributed by Cheryl Sabella and "
"Terry Jan Reedy in multiple issues.)"
msgstr ""
"Settings 对话框 (Options 中的 Configure IDLE) 已经被部分重写以改进外观和功能。 （由 Cheryl Sabella "
"和 Terry Jan Reedy 在多个问题项中贡献。）"

#: ../../whatsnew/3.7.rst:992
msgid ""
"The font sample now includes a selection of non-Latin characters so that "
"users can better see the effect of selecting a particular font. (Contributed"
" by Terry Jan Reedy in :issue:`13802`.) The sample can be edited to include "
"other characters. (Contributed by Serhiy Storchaka in :issue:`31860`.)"
msgstr ""
"字体样本现在包括一组非拉丁字符以便用户能更好地查看所选特定字体的效果。 （由 Terry Jan Reedy 在 :issue:`13802` "
"中贡献。） 样本可以被修改以包括其他字符。 （由 Serhiy Storchaka 在 :issue:`31860` 中贡献。）"

#: ../../whatsnew/3.7.rst:998
msgid ""
"The IDLE features formerly implemented as extensions have been reimplemented"
" as normal features.  Their settings have been moved from the Extensions tab"
" to other dialog tabs. (Contributed by Charles Wohlganger and Terry Jan "
"Reedy in :issue:`27099`.)"
msgstr ""
"之前以扩展形式实现的 IDLE 特性已作为正常特性重新实现。 它们的设置已从 Extensions 选项卡移至其他对话框选项卡。 （由 Charles "
"Wohlganger 和 Terry Jan Reedy 在 :issue:`27099` 中实现。）"

#: ../../whatsnew/3.7.rst:1003
msgid ""
"Editor code context option revised.  Box displays all context lines up to "
"maxlines.  Clicking on a context line jumps the editor to that line.  "
"Context colors for custom themes is added to Highlights tab of Settings "
"dialog. (Contributed by Cheryl Sabella and Terry Jan Reedy in "
":issue:`33642`, :issue:`33768`, and :issue:`33679`.)"
msgstr ""
"编辑器代码上下文选项已经过修改。 Box 会显示所有上下文行直到最大行数。 点击一个上下文行会使编辑器跳转到该行。 自定义主题的上下文颜色已添加到 "
"Settings 对话框的 Highlights 选项卡。 （由 Cheryl Sabella 和 Terry Jan Reedy 在 "
":issue:`33642`, :issue:`33768` 和 :issue:`33679` 中贡献。）"

#: ../../whatsnew/3.7.rst:1009
msgid ""
"On Windows, a new API call tells Windows that tk scales for DPI. On Windows "
"8.1+ or 10, with DPI compatibility properties of the Python binary "
"unchanged, and a monitor resolution greater than 96 DPI, this should make "
"text and lines sharper.  It should otherwise have no effect. (Contributed by"
" Terry Jan Reedy in :issue:`33656`.)"
msgstr ""
"在 Windows 上，会有新的 API 调用将 tk 对 DPI 的调整告知 Windows。 在 Windows 8.1+ 或 10 上，如果 "
"Python 二进制码的 DPI 兼容属性未改变，并且监视器分辨率大于 96 DPI，这应该会令文本和线条更清晰。 否则的话它应该不造成影响。 （由 "
"Terry Jan Reedy 在 :issue:`33656` 中贡献。）"

#: ../../whatsnew/3.7.rst:1015
msgid "New in 3.7.1:"
msgstr "在 3.7.1 中新增:"

#: ../../whatsnew/3.7.rst:1017
msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can be "
"changed in the PyShell section of the General page of the Settings dialog.  "
"Fewer, but possibly extra long, lines can be squeezed by right clicking on "
"the output.  Squeezed output can be expanded in place by double-clicking the"
" button or into the clipboard or a separate window by right-clicking the "
"button.  (Contributed by Tal Einat in :issue:`1529353`.)"
msgstr ""
"超过 N 行（默认值为 50）的输出将被折叠为一个按钮。 N 可以在 Settings 对话框的 General 页的 PyShell 部分中进行修改。"
" 数量较少但是超长的行可以通过在输出上右击来折叠。 被折叠的输出可通过双击按钮来展开，或是通过右击按钮来放入剪贴板或是单独的窗口。 （由 Tal "
"Einat 在 :issue:`1529353` 中贡献。）"

#: ../../whatsnew/3.7.rst:1024
msgid "The changes above have been backported to 3.6 maintenance releases."
msgstr "上述修改已被反向移植到 3.6 维护发行版中。"

#: ../../whatsnew/3.7.rst:1026
msgid "NEW in 3.7.4:"
msgstr "在 3.7.4 中新增:"

#: ../../whatsnew/3.7.rst:1028
msgid ""
"Add \"Run Customized\" to the Run menu to run a module with customized "
"settings. Any command line arguments entered are added to sys.argv. They re-"
"appear in the box for the next customized run.  One can also suppress the "
"normal Shell main module restart.  (Contributed by Cheryl Sabella, Terry Jan"
" Reedy, and others in :issue:`5680` and :issue:`37627`.)"
msgstr ""
"在 Run 菜单中增加了 \"Run Customized\" 以使用自定义设置来运行模块。 输入的任何命令行参数都会被加入 sys.argv。 "
"它们在下次自定义运行时会再次显示在窗体中。 用户也可以禁用通常的 Shell 主模块重启。 （由 Cheryl Sabella, Terry Jan "
"Reedy 等人在 :issue:`5680` 和 :issue:`37627` 中贡献。）"

#: ../../whatsnew/3.7.rst:1034
msgid "New in 3.7.5:"
msgstr "在 3.7.5 中新增:"

#: ../../whatsnew/3.7.rst:1036
msgid ""
"Add optional line numbers for IDLE editor windows. Windows open without line"
" numbers unless set otherwise in the General tab of the configuration "
"dialog.  Line numbers for an existing window are shown and hidden in the "
"Options menu. (Contributed by Tal Einat and Saimadhav Heblikar in "
":issue:`17535`.)"
msgstr ""
"在 IDLE 编辑器窗口中增加了可选的行序号。 窗口打开时默认不带行序号，除非在配置对话框的 General 选项卡中进行设置。 "
"已打开窗口中的行序号可以在 Options 菜单中显示和隐藏。 （由 Tal Einat 和 Saimadhav Heblikar 在 "
":issue:`17535` 中贡献。）"

#: ../../whatsnew/3.7.rst:1044 ../../whatsnew/3.7.rst:2021
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.7.rst:1046
msgid ""
"The :class:`importlib.abc.ResourceReader` ABC was introduced to support the "
"loading of resources from packages.  See also "
":ref:`whatsnew37_importlib_resources`. (Contributed by Barry Warsaw, Brett "
"Cannon in :issue:`32248`.)"
msgstr ""
"引入了 :class:`importlib.abc.ResourceReader` ABC 以支持从包中加载资源。 另请参阅 "
":ref:`whatsnew37_importlib_resources`。 （由 Barry Warsaw, Brett Cannon 在 "
":issue:`32248` 中贡献。）"

#: ../../whatsnew/3.7.rst:1051
msgid ""
":func:`importlib.reload` now raises :exc:`ModuleNotFoundError` if the module"
" lacks a spec. (Contributed by Garvit Khatri in :issue:`29851`.)"
msgstr ""
"如果模块缺少规格描述 :func:`importlib.reload` 现在会引发 :exc:`ModuleNotFoundError`。 （由 "
"Garvit Khatri 在 :issue:`29851` 中贡献。）"

#: ../../whatsnew/3.7.rst:1055
msgid ""
":func:`importlib.util.find_spec` now raises :exc:`ModuleNotFoundError` "
"instead of :exc:`AttributeError` if the specified parent module is not a "
"package (i.e. lacks a ``__path__`` attribute). (Contributed by Milan "
"Oberkirch in :issue:`30436`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1060
msgid ""
"The new :func:`importlib.util.source_hash` can be used to compute the hash "
"of the passed source.  A :ref:`hash-based .pyc file <whatsnew37-pep552>` "
"embeds the value returned by this function."
msgstr ""

#: ../../whatsnew/3.7.rst:1066
msgid "io"
msgstr "io"

#: ../../whatsnew/3.7.rst:1068
msgid ""
"The new :meth:`TextIOWrapper.reconfigure() <io.TextIOWrapper.reconfigure>` "
"method can be used to reconfigure the text stream with the new settings. "
"(Contributed by Antoine Pitrou in :issue:`30526` and INADA Naoki in "
":issue:`15216`.)"
msgstr ""
"新的 :meth:`TextIOWrapper.reconfigure() <io.TextIOWrapper.reconfigure>` "
"方法可用于根据新的设置重新配置文本流。 （由 Antoine Pitrou 在 :issue:`30526` 以及 INADA Naoki 在 "
":issue:`15216` 中贡献。）"

#: ../../whatsnew/3.7.rst:1075
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.7.rst:1077
msgid ""
"The new ``subnet_of()`` and ``supernet_of()`` methods of "
":class:`ipaddress.IPv6Network` and :class:`ipaddress.IPv4Network` can be "
"used for network containment tests. (Contributed by Michel Albert and Cheryl"
" Sabella in :issue:`20825`.)"
msgstr ""
"methods of :class:`ipaddress.IPv6Network` 和 :class:`ipaddress.IPv4Network` "
"中新的 ``subnet_of()`` 以及 ``supernet_of()`` 方法可用于网络包含测试。 （由 Michel Albert 和 "
"Cheryl Sabella 在 :issue:`20825` 中贡献。）"

#: ../../whatsnew/3.7.rst:1084
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.7.rst:1086
msgid ""
":func:`itertools.islice` now accepts :meth:`integer-like objects "
"<object.__index__>` as start, stop, and slice arguments. (Contributed by "
"Will Roberts in :issue:`30537`.)"
msgstr ""
":func:`itertools.islice` 现在接受 :meth:`类整数对象 <object.__index__>` 作为 start, "
"stop 和 slice 参数。 （由 Will Roberts 在 :issue:`30537` 中贡献。）"

#: ../../whatsnew/3.7.rst:1093 ../../whatsnew/3.7.rst:2039
msgid "locale"
msgstr "locale"

#: ../../whatsnew/3.7.rst:1095
msgid ""
"The new *monetary* argument to :func:`locale.format_string` can be used to "
"make the conversion use monetary thousands separators and grouping strings."
"  (Contributed by Garvit in :issue:`10379`.)"
msgstr ""
":func:`locale.format_string` 中新的 *monetary* 参数可用于转换所使用的千位分隔符和分组字符串。 （由 "
"Garvit 在 :issue:`10379` 中贡献。）"

#: ../../whatsnew/3.7.rst:1099
msgid ""
"The :func:`locale.getpreferredencoding` function now always returns "
"``'UTF-8'`` on Android or when in the :ref:`forced UTF-8 mode "
"<whatsnew37-pep540>`."
msgstr ""
"现在 :func:`locale.getpreferredencoding` 函数在 Android 上或是在 :ref:`强制 UTF-8 模式 "
"<whatsnew37-pep540>` 下总是返回 ``'UTF-8'`` 。"

#: ../../whatsnew/3.7.rst:1104
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.7.rst:1106
msgid ""
":class:`~logging.Logger` instances can now be pickled. (Contributed by Vinay"
" Sajip in :issue:`30520`.)"
msgstr ""
":class:`~logging.Logger` 实例现在可以被 pickle。 （由 Vinay Sajip 在 :issue:`30520` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:1109
msgid ""
"The new :meth:`StreamHandler.setStream() <logging.StreamHandler.setStream>` "
"method can be used to replace the logger stream after handler creation. "
"(Contributed by Vinay Sajip in :issue:`30522`.)"
msgstr ""
"新的 :meth:`StreamHandler.setStream() <logging.StreamHandler.setStream>` "
"方法可用于在句柄创建之后替换日志流。 （由 Vinay Sajip 在 :issue:`30522` 中创建。）"

#: ../../whatsnew/3.7.rst:1113
msgid ""
"It is now possible to specify keyword arguments to handler constructors in "
"configuration passed to :func:`logging.config.fileConfig`. (Contributed by "
"Preston Landers in :issue:`31080`.)"
msgstr ""
"现在可以在传递给 :func:`logging.config.fileConfig` 的配置信息中对句柄构造器指定关键字参数。 （由 Preston "
"Landers 在 :issue:`31080` 中贡献。)"

#: ../../whatsnew/3.7.rst:1119
msgid "math"
msgstr "math"

#: ../../whatsnew/3.7.rst:1121
msgid ""
"The new :func:`math.remainder` function implements the IEEE 754-style "
"remainder operation.  (Contributed by Mark Dickinson in :issue:`29962`.)"
msgstr ""
"新的 :func:`math.remainder` 函数实现了 IEEE 754 风格的余数运算。 （由 Mark Dickinson 在 "
":issue:`29962` 中贡献。）"

#: ../../whatsnew/3.7.rst:1126
msgid "mimetypes"
msgstr "mimetypes"

#: ../../whatsnew/3.7.rst:1128
msgid ""
"The MIME type of .bmp has been changed from ``'image/x-ms-bmp'`` to "
"``'image/bmp'``. (Contributed by Nitish Chandra in :issue:`22589`.)"
msgstr ""
".bmp 的 MIME type 从 ``'image/x-ms-bmp'`` 改为 ``'image/bmp'``。 （由 Nitish "
"Chandra 在 :issue:`22589` 中贡献。）"

#: ../../whatsnew/3.7.rst:1134
msgid "msilib"
msgstr "msilib"

#: ../../whatsnew/3.7.rst:1136
msgid ""
"The new :meth:`!Database.Close` method can be used to close the :abbr:`MSI` "
"database. (Contributed by Berker Peksag in :issue:`20486`.)"
msgstr ""
"新增的 :meth:`!Database.Close` 方法可被用来关闭 :abbr:`MSI` 数据库。 （由 Berker Peksag 在 "
":issue:`20486` 中贡献。）"

#: ../../whatsnew/3.7.rst:1142
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.7.rst:1144
msgid ""
"The new :meth:`Process.close() <multiprocessing.Process.close>` method "
"explicitly closes the process object and releases all resources associated "
"with it.  :exc:`ValueError` is raised if the underlying process is still "
"running. (Contributed by Antoine Pitrou in :issue:`30596`.)"
msgstr ""
"新的 :meth:`Process.close() <multiprocessing.Process.close>` "
"方法会显式地关闭进程对象并释放与其关联的所有资源。 如果底层进程仍在运行则将引发 :exc:`ValueError`。 （由 Antoine "
"Pitrou 在 :issue:`30596` 中贡献。）"

#: ../../whatsnew/3.7.rst:1150
msgid ""
"The new :meth:`Process.kill() <multiprocessing.Process.kill>` method can be "
"used to terminate the process using the :data:`~signal.SIGKILL` signal on "
"Unix. (Contributed by Vitor Pereira in :issue:`30794`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1154
msgid ""
"Non-daemonic threads created by :class:`~multiprocessing.Process` are now "
"joined on process exit. (Contributed by Antoine Pitrou in :issue:`18966`.)"
msgstr ""
"由 :class:`~multiprocessing.Process` 所创建的非守护线程现在会在进程退出时被合并。 （由 Antoine Pitrou"
" 在 :issue:`18966` 中贡献。）"

#: ../../whatsnew/3.7.rst:1160
msgid "os"
msgstr "os"

#: ../../whatsnew/3.7.rst:1162
msgid ""
":func:`os.fwalk` now accepts the *path* argument as :class:`bytes`. "
"(Contributed by Serhiy Storchaka in :issue:`28682`.)"
msgstr ""
":func:`os.fwalk` 现在接受 :class:`bytes` 类型的 *path* 参数。 （由 Serhiy Storchaka 在 "
":issue:`28682` 中贡献。）"

#: ../../whatsnew/3.7.rst:1165
msgid ""
":func:`os.scandir` gained support for :ref:`file descriptors <path_fd>`. "
"(Contributed by Serhiy Storchaka in :issue:`25996`.)"
msgstr ""
":func:`os.scandir` 已获得对 :ref:`文件描述器 <path_fd>` 的支持。 （由 Serhiy Storchaka 在 "
":issue:`25996` 中贡献。）"

#: ../../whatsnew/3.7.rst:1168
msgid ""
"The new :func:`~os.register_at_fork` function allows registering Python "
"callbacks to be executed at process fork. (Contributed by Antoine Pitrou in "
":issue:`16500`.)"
msgstr ""
"新的 :func:`~os.register_at_fork` 函数允许注册 Python 回调以便在进程分叉中执行。 （由 Antoine "
"Pitrou 在 :issue:`16500` 中贡献。）"

#: ../../whatsnew/3.7.rst:1172
msgid ""
"Added :func:`os.preadv` (combine the functionality of :func:`os.readv` and "
":func:`os.pread`) and :func:`os.pwritev` functions (combine the "
"functionality of :func:`os.writev` and :func:`os.pwrite`). (Contributed by "
"Pablo Galindo in :issue:`31368`.)"
msgstr ""
"增加了 :func:`os.preadv` (结合了 :func:`os.readv` 与 :func:`os.pread` 的功能) 以及 "
":func:`os.pwritev` 函数 (结合了 :func:`os.writev` 和 :func:`os.pwrite` 的功能)。 （由 "
"Pablo Galindo 在 :issue:`31368` 中贡献。）"

#: ../../whatsnew/3.7.rst:1177
msgid ""
"The mode argument of :func:`os.makedirs` no longer affects the file "
"permission bits of newly created intermediate-level directories. "
"(Contributed by Serhiy Storchaka in :issue:`19930`.)"
msgstr ""
":func:`os.makedirs` 的 mode 参数不再会影响新创建的中间层级目录的权限位。 （由 Serhiy Storchaka 在 "
":issue:`19930` 中贡献。）"

#: ../../whatsnew/3.7.rst:1181
msgid ""
":func:`os.dup2` now returns the new file descriptor.  Previously, ``None`` "
"was always returned. (Contributed by Benjamin Peterson in :issue:`32441`.)"
msgstr ""
":func:`os.dup2` 现在会返回新的文件描述器。 之前，返回的总是 ``None``。 （由 Benjamin Peterson 在 "
":issue:`32441` 中贡献。）"

#: ../../whatsnew/3.7.rst:1185
msgid ""
"The structure returned by :func:`os.stat` now contains the "
":attr:`~os.stat_result.st_fstype` attribute on Solaris and its derivatives. "
"(Contributed by Jesús Cea Avión in :issue:`32659`.)"
msgstr ""
"在 Solaris 及其派生系统上 :func:`os.stat` 所返回的结构现在会包含 "
":attr:`~os.stat_result.st_fstype` 属性。 （由 Jesús Cea Avión 在 :issue:`32659` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:1191
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.7.rst:1193
msgid ""
"The new :meth:`Path.is_mount() <pathlib.Path.is_mount>` method is now "
"available on POSIX systems and can be used to determine whether a path is a "
"mount point. (Contributed by Cooper Ry Lees in :issue:`30897`.)"
msgstr ""
"在 POSIX 类系统上新的 :meth:`Path.is_mount() <pathlib.Path.is_mount>` "
"方法现在可用于确定一个路径是否为挂载点。 （由 Cooper Ry Lees 在 :issue:`30897` 中贡献。）"

#: ../../whatsnew/3.7.rst:1199
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.7.rst:1201
msgid ""
":func:`pdb.set_trace` now takes an optional *header* keyword-only argument."
"  If given, it is printed to the console just before debugging begins.  "
"(Contributed by Barry Warsaw in :issue:`31389`.)"
msgstr ""
":func:`pdb.set_trace` 现在接受一个可选的限关键字参数 *header*。 如果给出，它会在调试开始之前被打印到控制台。 （由 "
"Barry Warsaw 在 :issue:`31389` 中贡献。）"

#: ../../whatsnew/3.7.rst:1205
msgid ""
":mod:`pdb` command line now accepts ``-m module_name`` as an alternative to "
"script file.  (Contributed by Mario Corchero in :issue:`32206`.)"
msgstr ""
":mod:`pdb` 命令行现在接受 ``-m module_name`` 作为对脚本文件的替代。 （由 Mario Corchero 在 "
":issue:`32206` 中贡献。）"

#: ../../whatsnew/3.7.rst:1210
msgid "py_compile"
msgstr "py_compile"

#: ../../whatsnew/3.7.rst:1212
msgid ""
":func:`py_compile.compile` -- and by extension, :mod:`compileall` -- now "
"respects the :envvar:`SOURCE_DATE_EPOCH` environment variable by "
"unconditionally creating ``.pyc`` files for hash-based validation. This "
"allows for guaranteeing `reproducible builds <https://reproducible-"
"builds.org/>`_ of ``.pyc`` files when they are created eagerly. (Contributed"
" by Bernhard M. Wiedemann in :issue:`29708`.)"
msgstr ""
":func:`py_compile.compile` -- 及其扩展形式 :mod:`compileall` -- "
"现在会通过无条件地为基于哈希值的有效性验证创建 ``.pyc`` 文件来支持 :envvar:`SOURCE_DATE_EPOCH` 环境变量。 "
"这样可以确保当 ``.pyc`` 文件被主动创建时 `可重现的生成 <https://reproducible-builds.org/>`_。 （由 "
"Bernhard M. Wiedemann 在 :issue:`29708` 中贡献。）"

#: ../../whatsnew/3.7.rst:1222
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.7.rst:1224
msgid ""
"The pydoc server can now bind to an arbitrary hostname specified by the new "
"``-n`` command-line argument. (Contributed by Feanil Patel in "
":issue:`31128`.)"
msgstr ""
"pydoc 服务器现在可以绑定到由新的 ``-n`` 命令行参数所指定的任意主机名。 （由 Feanil Patel 在 :issue:`31128` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:1230
msgid "queue"
msgstr "queue"

#: ../../whatsnew/3.7.rst:1232
msgid ""
"The new :class:`~queue.SimpleQueue` class is an unbounded :abbr:`FIFO` "
"queue. (Contributed by Antoine Pitrou in :issue:`14976`.)"
msgstr ""
"新的 :class:`~queue.SimpleQueue` 类是一个无界的 :abbr:`FIFO` 队列。 （由 Antoine Pitrou 在 "
":issue:`14976` 中贡献。）"

#: ../../whatsnew/3.7.rst:1237
msgid "re"
msgstr "re"

#: ../../whatsnew/3.7.rst:1239
msgid ""
"The flags :const:`re.ASCII`, :const:`re.LOCALE` and :const:`re.UNICODE` can "
"be set within the scope of a group. (Contributed by Serhiy Storchaka in "
":issue:`31690`.)"
msgstr ""
"旗标 :const:`re.ASCII`, :const:`re.LOCALE` 和 :const:`re.UNICODE` 可以在组的范围内设置。 "
"（由 Serhiy Storchaka 在 :issue:`31690` 中贡献。）"

#: ../../whatsnew/3.7.rst:1243
msgid ""
":func:`re.split` now supports splitting on a pattern like ``r'\\b'``, "
"``'^$'`` or ``(?=-)`` that matches an empty string. (Contributed by Serhiy "
"Storchaka in :issue:`25054`.)"
msgstr ""
":func:`re.split` 现在支持基于匹配一个空字符串的模式例如 ``r'\\b'``, ``'^$'`` 或 ``(?=-)`` 进行拆分。 "
"（由 Serhiy Storchaka 在 :issue:`25054` 中贡献。）"

#: ../../whatsnew/3.7.rst:1247
msgid ""
"Regular expressions compiled with the :const:`re.LOCALE` flag no longer "
"depend on the locale at compile time.  Locale settings are applied only when"
" the compiled regular expression is used. (Contributed by Serhiy Storchaka "
"in :issue:`30215`.)"
msgstr ""
"使用 :const:`re.LOCALE` 旗标编译的正则表达式不再依赖于编译时的区域设置。 区域设置仅在已编译正则表达式被使用时才被应用。 （由 "
"Serhiy Storchaka 在 :issue:`30215` 中贡献。）"

#: ../../whatsnew/3.7.rst:1252
msgid ""
":exc:`FutureWarning` is now emitted if a regular expression contains "
"character set constructs that will change semantically in the future, such "
"as nested sets and set operations. (Contributed by Serhiy Storchaka in "
":issue:`30349`.)"
msgstr ""
"现在如果一个正则表达式包含语义将在未来发生改变的字符集构造，则会引发 :exc:`FutureWarning`，例如嵌套集与集合操作等。 （由 "
"Serhiy Storchaka 在 :issue:`30349` 中贡献。）"

#: ../../whatsnew/3.7.rst:1257
msgid ""
"Compiled regular expression and match objects can now be copied using "
":func:`copy.copy` and :func:`copy.deepcopy`. (Contributed by Serhiy "
"Storchaka in :issue:`10076`.)"
msgstr ""
"已编译正则表达式和匹配对象现在可以使用 :func:`copy.copy` 和 :func:`copy.deepcopy` 进行拷贝。 （由 "
"Serhiy Storchaka 在 :issue:`10076` 中贡献。）"

#: ../../whatsnew/3.7.rst:1263
msgid "signal"
msgstr "signal"

#: ../../whatsnew/3.7.rst:1265
msgid ""
"The new *warn_on_full_buffer* argument to the :func:`signal.set_wakeup_fd` "
"function makes it possible to specify whether Python prints a warning on "
"stderr when the wakeup buffer overflows. (Contributed by Nathaniel J. Smith "
"in :issue:`30050`.)"
msgstr ""
":func:`signal.set_wakeup_fd` 函数新增的 *warn_on_full_buffer* 参数可以指定当唤醒缓冲区溢出时 "
"Python 是否要在 stderr 上打印警告信息。 （由 Nathaniel J. Smith 在 :issue:`30050` 中贡献。）"

#: ../../whatsnew/3.7.rst:1272 ../../whatsnew/3.7.rst:2062
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.7.rst:1274
msgid ""
"The new :func:`socket.getblocking() <socket.socket.getblocking>` method "
"returns ``True`` if the socket is in blocking mode and ``False`` otherwise. "
"(Contributed by Yury Selivanov in :issue:`32373`.)"
msgstr ""
"新增的 :func:`socket.getblocking() <socket.socket.getblocking>` "
"方法会在套接字处于阻塞模式时返回 ``True``，否则返回 ``False``。 （由 Yury Selivanov 在 :issue:`32373`"
" 中贡献。）"

#: ../../whatsnew/3.7.rst:1278
msgid ""
"The new :func:`socket.close` function closes the passed socket file "
"descriptor. This function should be used instead of :func:`os.close` for "
"better compatibility across platforms. (Contributed by Christian Heimes in "
":issue:`32454`.)"
msgstr ""
"新的 :func:`socket.close` 函数可关闭所传入的套接字文件描述符。 应该用此函数来代替 :func:`os.close` "
"以获得更好的跨平台兼容性。 （由 Christian Heimes 在 :issue:`32454` 中贡献。）"

#: ../../whatsnew/3.7.rst:1283
msgid ""
"The :mod:`socket` module now exposes the :ref:`socket.TCP_CONGESTION "
"<socket-unix-constants>` (Linux 2.6.13), :ref:`socket.TCP_USER_TIMEOUT "
"<socket-unix-constants>` (Linux 2.6.37), and :ref:`socket.TCP_NOTSENT_LOWAT "
"<socket-unix-constants>` (Linux 3.12) constants. (Contributed by Omar "
"Sandoval in :issue:`26273` and Nathaniel J. Smith in :issue:`29728`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1290
msgid ""
"Support for :const:`socket.AF_VSOCK` sockets has been added to allow "
"communication between virtual machines and their hosts. (Contributed by "
"Cathy Avery in :issue:`27584`.)"
msgstr ""
"已增加对 :const:`socket.AF_VSOCK` 套接字的支持以允许在虚拟机及其宿主机之间进行通信。 （由 Cathy Avery 在 "
":issue:`27584` 中贡献。）"

#: ../../whatsnew/3.7.rst:1294
msgid ""
"Sockets now auto-detect family, type and protocol from file descriptor by "
"default. (Contributed by Christian Heimes in :issue:`28134`.)"
msgstr ""
"套接字现在默认会根据文件描述符自动检测所属族、类型和协议。 （由 Christian Heimes 在 :issue:`28134` 中贡献。）"

#: ../../whatsnew/3.7.rst:1300
msgid "socketserver"
msgstr "socketserver"

#: ../../whatsnew/3.7.rst:1302
msgid ""
":meth:`socketserver.ThreadingMixIn.server_close "
"<socketserver.BaseServer.server_close>` now waits until all non-daemon "
"threads complete. :meth:`socketserver.ForkingMixIn.server_close "
"<socketserver.BaseServer.server_close>` now waits until all child processes "
"complete."
msgstr ""

#: ../../whatsnew/3.7.rst:1308
msgid ""
"Add a new :attr:`socketserver.ForkingMixIn.block_on_close "
"<socketserver.ThreadingMixIn.block_on_close>` class attribute to "
":class:`socketserver.ForkingMixIn` and :class:`socketserver.ThreadingMixIn` "
"classes. Set the class attribute to ``False`` to get the pre-3.7 behaviour."
msgstr ""

#: ../../whatsnew/3.7.rst:1315
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.7.rst:1317
msgid ""
":class:`sqlite3.Connection` now exposes the "
":meth:`~sqlite3.Connection.backup` method when the underlying SQLite library"
" is at version 3.6.11 or higher. (Contributed by Lele Gaifax in "
":issue:`27645`.)"
msgstr ""
"现在当下层的 SQLite 库版本为 3.6.11 及以上时 :class:`sqlite3.Connection` 会开放 "
":meth:`~sqlite3.Connection.backup` 方法。 （由 Lele Gaifax 在 :issue:`27645` 中贡献。）"

#: ../../whatsnew/3.7.rst:1321
msgid ""
"The *database* argument of :func:`sqlite3.connect` now accepts any "
":term:`path-like object`, instead of just a string. (Contributed by Anders "
"Lorentsen in :issue:`31843`.)"
msgstr ""
":func:`sqlite3.connect` 的 *database* 参数现在接受任何 :term:`path-like "
"object`，而不是只接受字符串。 （由 Anders Lorentsen 在 :issue:`31843` 中贡献。）"

#: ../../whatsnew/3.7.rst:1327 ../../whatsnew/3.7.rst:2071
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.7.rst:1329
msgid ""
"The :mod:`ssl` module now uses OpenSSL's builtin API instead of "
":func:`!match_hostname` to check a host name or an IP address.  Values are "
"validated during TLS handshake.  Any certificate validation error including "
"failing the host name check now raises :exc:`~ssl.SSLCertVerificationError` "
"and aborts the handshake with a proper TLS Alert message.  The new exception"
" contains additional information. Host name validation can be customized "
"with :attr:`SSLContext.hostname_checks_common_name "
"<ssl.SSLContext.hostname_checks_common_name>`. (Contributed by Christian "
"Heimes in :issue:`31399`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1340
msgid ""
"The improved host name check requires a *libssl* implementation compatible "
"with OpenSSL 1.0.2 or 1.1.  Consequently, OpenSSL 0.9.8 and 1.0.1 are no "
"longer supported (see :ref:`37-platform-support-removals` for more details)."
" The ssl module is mostly compatible with LibreSSL 2.7.2 and newer."
msgstr ""
"改进的主机名检测需要有兼容 OpenSSL 1.0.2 或 1.1 的 *libssl* 实现。 因此，OpenSSL 0.9.8 和 1.0.1 "
"不再被支持（请参阅 :ref:`37-platform-support-removals` 了解详情）。 目前 ssl 模块主要兼容 LibreSSL "
"2.7.2 及更高版本。"

#: ../../whatsnew/3.7.rst:1345
msgid ""
"The ``ssl`` module no longer sends IP addresses in SNI TLS extension. "
"(Contributed by Christian Heimes in :issue:`32185`.)"
msgstr ""
"``ssl`` 模块不再以 SNI TLS 扩展发送 IP 地址。 （由 Christian Heimes 在 :issue:`32185` 中贡献。）"

#: ../../whatsnew/3.7.rst:1348
msgid ""
":func:`!match_hostname` no longer supports partial wildcards like "
"``www*.example.org``. (Contributed by Mandeep Singh in :issue:`23033` and "
"Christian Heimes in :issue:`31399`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1353
msgid ""
"The default cipher suite selection of the ``ssl`` module now uses a "
"blacklist approach rather than a hard-coded whitelist.  Python no longer re-"
"enables ciphers that have been blocked by OpenSSL security updates.  Default"
" cipher suite selection can be configured at compile time. (Contributed by "
"Christian Heimes in :issue:`31429`.)"
msgstr ""
"``ssl`` 模块默认的加密套件选择现在是使用黑名单方式而非硬编码的白名单。 Python 不会再重新启用已经被 OpenSSL "
"安全更新所阻止的加密。 默认的加密套件选择可以在编译时进行配置。 （由 Christian Heimes 在 :issue:`31429` 中贡献。）"

#: ../../whatsnew/3.7.rst:1359
msgid ""
"Validation of server certificates containing internationalized domain names "
"(IDNs) is now supported.  As part of this change, the "
":attr:`SSLSocket.server_hostname <ssl.SSLSocket.server_hostname>` attribute "
"now stores the expected hostname in A-label form (``\"xn--pythn-"
"mua.org\"``), rather than the U-label form (``\"pythön.org\"``).  "
"(Contributed by Nathaniel J. Smith and Christian Heimes in :issue:`28414`.)"
msgstr ""
"现在已支持包含国际化域名 (IDN) 的服务器证书验证。 作为此更改的一部分，:attr:`SSLSocket.server_hostname "
"<ssl.SSLSocket.server_hostname>` 属性现在会以预期的 A 标签形式 (``\"xn--pythn-"
"mua.org\"``) 而不是以 U 标签形式 (``\"pythön.org\"``) 存储。 （由 Nathaniel J. Smith 与 "
"Christian Heimes 在 :issue:`28414` 中贡献。）"

#: ../../whatsnew/3.7.rst:1366
msgid ""
"The ``ssl`` module has preliminary and experimental support for TLS 1.3 and "
"OpenSSL 1.1.1.  At the time of Python 3.7.0 release, OpenSSL 1.1.1 is still "
"under development and TLS 1.3 hasn't been finalized yet.  The TLS 1.3 "
"handshake and protocol behaves slightly differently than TLS 1.2 and "
"earlier, see :ref:`ssl-tlsv1_3`. (Contributed by Christian Heimes in "
":issue:`32947`, :issue:`20995`, :issue:`29136`, :issue:`30622` and "
":issue:`33618`)"
msgstr ""
"``ssl`` 模块对 TLS 1.3 和 OpenSSL 1.1.1 具有初步和实验性的支持。 在 Python 3.7.0 "
"发布的时刻，OpenSSL 1.1.1 仍在开发中，而 TLS 1.3 尚未最终确定。 TLS 1.3 握手和协议行为与 TLS 1.2 "
"及更早的版本略有差异，请参阅 :ref:`ssl-tlsv1_3`。 （由 Christian Heimes 在 :issue:`32947`, "
":issue:`20995`, :issue:`29136`, :issue:`30622` 以及 :issue:`33618` 中贡献。）"

#: ../../whatsnew/3.7.rst:1374
msgid ""
":class:`~ssl.SSLSocket` and :class:`~ssl.SSLObject` no longer have a public "
"constructor.  Direct instantiation was never a documented and supported "
"feature.  Instances must be created with :class:`~ssl.SSLContext` methods "
":meth:`~ssl.SSLContext.wrap_socket` and :meth:`~ssl.SSLContext.wrap_bio`. "
"(Contributed by Christian Heimes in :issue:`32951`)"
msgstr ""
":class:`~ssl.SSLSocket` 和 :class:`~ssl.SSLObject` 不再具有公共构造器。 "
"直接实例化从未成为有文档和受支持的特性。 实际必须通过 :class:`~ssl.SSLContext` 的方法 "
":meth:`~ssl.SSLContext.wrap_socket` 和 :meth:`~ssl.SSLContext.wrap_bio` 来创建。 "
"（由 Christian Heimes 在 :issue:`32951` 中贡献。）"

#: ../../whatsnew/3.7.rst:1380
msgid ""
"OpenSSL 1.1 APIs for setting the minimum and maximum TLS protocol version "
"are available as :attr:`SSLContext.minimum_version "
"<ssl.SSLContext.minimum_version>` and :attr:`SSLContext.maximum_version "
"<ssl.SSLContext.maximum_version>`. Supported protocols are indicated by "
"several new flags, such as :data:`~ssl.HAS_TLSv1_1`. (Contributed by "
"Christian Heimes in :issue:`32609`.)"
msgstr ""
"用于设置最小和最大 TLS 协议版本的 OpenSSL 1.1 API 现已可用，名称分别为 "
":attr:`SSLContext.minimum_version <ssl.SSLContext.minimum_version>` 和 "
":attr:`SSLContext.maximum_version <ssl.SSLContext.maximum_version>`。 "
"受支持的协议由几个新增旗标指定，例如 :data:`~ssl.HAS_TLSv1_1`。 （由 Christian Heimes 在 "
":issue:`32609` 中贡献。）"

#: ../../whatsnew/3.7.rst:1387
msgid ""
"Added :attr:`ssl.SSLContext.post_handshake_auth` to enable and "
":meth:`ssl.SSLSocket.verify_client_post_handshake` to initiate TLS 1.3 post-"
"handshake authentication. (Contributed by Christian Heimes in :gh:`78851`.)"
msgstr ""
"增加了 :attr:`ssl.SSLContext.post_handshake_auth` 以启用并通过 "
":meth:`ssl.SSLSocket.verify_client_post_handshake` 来初始化 TLS 1.3 握手后验证。 （由 "
"Christian Heimes 在 :gh:`78851` 中贡献。）"

#: ../../whatsnew/3.7.rst:1393
msgid "string"
msgstr "string"

#: ../../whatsnew/3.7.rst:1395
msgid ""
":class:`string.Template` now lets you to optionally modify the regular "
"expression pattern for braced placeholders and non-braced placeholders "
"separately.  (Contributed by Barry Warsaw in :issue:`1198569`.)"
msgstr ""
":class:`string.Template` 现在允许你有选择地分别修改带大括号的占位符和不带大括号的占位符所对应的正则表达式模式。 （由 "
"Barry Warsaw 在 :issue:`1198569` 中贡献。）"

#: ../../whatsnew/3.7.rst:1401
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.7.rst:1403
msgid ""
"The :func:`subprocess.run` function accepts the new *capture_output* keyword"
" argument.  When true, stdout and stderr will be captured. This is "
"equivalent to passing :const:`subprocess.PIPE` as *stdout* and *stderr* "
"arguments. (Contributed by Bo Bayles in :issue:`32102`.)"
msgstr ""
":func:`subprocess.run` 函数接受新的 *capture_output* 关键字参数。 当其为真值时，将会捕获 stdout 和 "
"stderr。 这等价于传入 :const:`subprocess.PIPE` 作为 *stdout* 和 *stderr* 参数。 （由 Bo "
"Bayles 在 :issue:`32102` 中贡献。）.)"

#: ../../whatsnew/3.7.rst:1409
msgid ""
"The ``subprocess.run`` function and the :class:`subprocess.Popen` "
"constructor now accept the *text* keyword argument as an alias to "
"*universal_newlines*. (Contributed by Andrew Clegg in :issue:`31756`.)"
msgstr ""
"``subprocess.run`` 函数和 :class:`subprocess.Popen` 构造器现在接受 *text* 关键字参数作为 "
"*universal_newlines* 的别名。 （由 Andrew Clegg 在 :issue:`31756` 中贡献。）"

#: ../../whatsnew/3.7.rst:1414
msgid ""
"On Windows the default for *close_fds* was changed from ``False`` to "
"``True`` when redirecting the standard handles.  It's now possible to set "
"*close_fds* to true when redirecting the standard handles.  See "
":class:`subprocess.Popen`.  This means that *close_fds* now defaults to "
"``True`` on all supported platforms. (Contributed by Segev Finer in "
":issue:`19764`.)"
msgstr ""
"在 Windows 中当重定向标准句柄时 *close_fds* 的默认值由 ``False`` 改为 ``True``。 现在可以在重定向标准句柄时将"
" *close_fds* 设为真值。 参阅 :class:`subprocess.Popen`。 这意味着现在 *close_fds* "
"在所有受支持的平台上默认值均为 ``True``。 （由 Segev Finer 在 :issue:`19764` 中贡献。）"

#: ../../whatsnew/3.7.rst:1421
msgid ""
"The subprocess module is now more graceful when handling "
":exc:`KeyboardInterrupt` during :func:`subprocess.call`, "
":func:`subprocess.run`, or in a :class:`~subprocess.Popen` context manager."
"  It now waits a short amount of time for the child to exit, before "
"continuing the handling of the ``KeyboardInterrupt`` exception. (Contributed"
" by Gregory P. Smith in :issue:`25942`.)"
msgstr ""
"在 :func:`subprocess.call`, :func:`subprocess.run` 期间或在 "
":class:`~subprocess.Popen` 上下文管理器中，subprocess 模块现在能更优雅地处理 "
":exc:`KeyboardInterrupt`。 它现在会等待一小段时间以便子进程退出，然后再继续处理 ``KeyboardInterrupt`` "
"异常。 （由 Gregory P. Smith 在 :issue:`25942` 中贡献。）"

#: ../../whatsnew/3.7.rst:1431 ../../whatsnew/3.7.rst:2087
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.7.rst:1433
msgid ""
"The new :func:`sys.breakpointhook` hook function is called by the built-in "
":func:`breakpoint`. (Contributed by Barry Warsaw in :issue:`31353`.)"
msgstr ""
"新增 :func:`sys.breakpointhook` 钩子函数，供内置的 :func:`breakpoint` 进行调用。 （由 Barry "
"Warsaw 在 :issue:`31353` 中贡献。）"

#: ../../whatsnew/3.7.rst:1437
msgid ""
"On Android, the new :func:`sys.getandroidapilevel` returns the build-time "
"Android API version. (Contributed by Victor Stinner in :issue:`28740`.)"
msgstr ""
"在 Android 中新增的 :func:`sys.getandroidapilevel` 会返回构建时的 Android API 版本。 （由 "
"Victor Stinner 在 :issue:`28740` 中贡献。）"

#: ../../whatsnew/3.7.rst:1441
msgid ""
"The new :func:`sys.get_coroutine_origin_tracking_depth` function returns the"
" current coroutine origin tracking depth, as set by the new "
":func:`sys.set_coroutine_origin_tracking_depth`.  :mod:`asyncio` has been "
"converted to use this new API instead of the deprecated "
":func:`!sys.set_coroutine_wrapper`. (Contributed by Nathaniel J. Smith in "
":issue:`32591`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1450
msgid "time"
msgstr "time"

#: ../../whatsnew/3.7.rst:1452
msgid ""
":pep:`564` adds six new functions with nanosecond resolution to the "
":mod:`time` module:"
msgstr ":pep:`564`  向 :mod:`time` 模块增加六个具有纳秒级精度的新函数:"

#: ../../whatsnew/3.7.rst:1462
msgid "New clock identifiers have been added:"
msgstr "增加了新的时钟标识符:"

#: ../../whatsnew/3.7.rst:1464
msgid ""
":const:`time.CLOCK_BOOTTIME` (Linux): Identical to "
":const:`time.CLOCK_MONOTONIC`, except it also includes any time that the "
"system is suspended."
msgstr ""
":const:`time.CLOCK_BOOTTIME` (Linux): 与 :const:`time.CLOCK_MONOTONIC` "
"相似，不同之处在于它还包括任何系统挂起的时间。"

#: ../../whatsnew/3.7.rst:1467
msgid ""
":const:`time.CLOCK_PROF` (FreeBSD, NetBSD and OpenBSD): High-resolution per-"
"process CPU timer."
msgstr ""
":const:`time.CLOCK_PROF` (FreeBSD, NetBSD 和 OpenBSD): 高精度的分进程 CPU 计时器。"

#: ../../whatsnew/3.7.rst:1469
msgid ""
":const:`time.CLOCK_UPTIME` (FreeBSD, OpenBSD): Time whose absolute value is "
"the time the system has been running and not suspended, providing accurate "
"uptime measurement."
msgstr ""
":const:`time.CLOCK_UPTIME` (FreeBSD, OpenBSD): "
"该时间的绝对值是系统运行且未挂起的时间，提供准确的正常运行时间度量。"

#: ../../whatsnew/3.7.rst:1473
msgid ""
"The new :func:`time.thread_time` and :func:`time.thread_time_ns` functions "
"can be used to get per-thread CPU time measurements. (Contributed by Antoine"
" Pitrou in :issue:`32025`.)"
msgstr ""
"新的 :func:`time.thread_time` 和 :func:`time.thread_time_ns` 函数可用于获取每线程的 CPU "
"时间度量。 （由 Antoine Pitrou 在 :issue:`32025` 中贡献。）"

#: ../../whatsnew/3.7.rst:1477
msgid ""
"The new :func:`time.pthread_getcpuclockid` function returns the clock ID of "
"the thread-specific CPU-time clock."
msgstr "新的 :func:`time.pthread_getcpuclockid` 函数会返回特定线程中 CPU 时钟的时钟 ID。"

#: ../../whatsnew/3.7.rst:1482
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.7.rst:1484
msgid ""
"The new :class:`tkinter.ttk.Spinbox` class is now available. (Contributed by"
" Alan Moore in :issue:`32585`.)"
msgstr ""
"新的 :class:`tkinter.ttk.Spinbox` 类现已可用。 （由 Alan Moore 在 :issue:`32585` 中贡献。）"

#: ../../whatsnew/3.7.rst:1489
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../../whatsnew/3.7.rst:1491
msgid ""
":class:`tracemalloc.Traceback` behaves more like regular tracebacks, sorting"
" the frames from oldest to most recent. :meth:`Traceback.format() "
"<tracemalloc.Traceback.format>` now accepts negative *limit*, truncating the"
" result to the ``abs(limit)`` oldest frames.  To get the old behaviour, use "
"the new *most_recent_first* argument to ``Traceback.format()``. (Contributed"
" by Jesse Bakker in :issue:`32121`.)"
msgstr ""
":class:`tracemalloc.Traceback` 的行为更接近正规的回溯，会对所有帧按从最旧到最新来排序。 "
":meth:`Traceback.format() <tracemalloc.Traceback.format>` 现在接受负的 "
"*limit*，并会将结果截短至排在第 ``abs(limit)`` 位的旧帧。 如果要获得旧的行为，请在 ``Traceback.format()``"
" 中使用新的  *most_recent_first* 参数。 （由 Jesse Bakker 在 :issue:`32121` 中贡献。）"

#: ../../whatsnew/3.7.rst:1501
msgid "types"
msgstr "types"

#: ../../whatsnew/3.7.rst:1503
msgid ""
"The new :class:`~types.WrapperDescriptorType`, "
":class:`~types.MethodWrapperType`, :class:`~types.MethodDescriptorType`, and"
" :class:`~types.ClassMethodDescriptorType` classes are now available. "
"(Contributed by Manuel Krebber and Guido van Rossum in :issue:`29377`, and "
"Serhiy Storchaka in :issue:`32265`.)"
msgstr ""
"新的 :class:`~types.WrapperDescriptorType`, :class:`~types.MethodWrapperType`,"
" :class:`~types.MethodDescriptorType` 和 "
":class:`~types.ClassMethodDescriptorType` 类现已可用。 （由 Manuel Krebber 和 Guido "
"van Rossum 在 :issue:`29377` 以及 Serhiy Storchaka 在 :issue:`32265` 中贡献。）"

#: ../../whatsnew/3.7.rst:1509
msgid ""
"The new :func:`types.resolve_bases` function resolves MRO entries "
"dynamically as specified by :pep:`560`. (Contributed by Ivan Levkivskyi in "
":issue:`32717`.)"
msgstr ""
"新的 :func:`types.resolve_bases` 函数会以 :pep:`560` 所规定的方式动态解析 MRO 条目。 （由 Ivan "
"Levkivskyi 在 :issue:`32717` 中贡献。）"

#: ../../whatsnew/3.7.rst:1515
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.7.rst:1517
msgid ""
"The internal :mod:`unicodedata` database has been upgraded to use `Unicode "
"11 <https://www.unicode.org/versions/Unicode11.0.0/>`_. (Contributed by "
"Benjamin Peterson.)"
msgstr ""
"内部 :mod:`unicodedata` 数据库已升级为使用 `Unicode 11 "
"<https://www.unicode.org/versions/Unicode11.0.0/>`_。 （由 Benjamin Peterson "
"贡献。）"

#: ../../whatsnew/3.7.rst:1523
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.7.rst:1525
msgid ""
"The new ``-k`` command-line option allows filtering tests by a name "
"substring or a Unix shell-like pattern. For example, ``python -m unittest -k"
" foo`` runs ``foo_tests.SomeTest.test_something``, "
"``bar_tests.SomeTest.test_foo``, but not "
"``bar_tests.FooTest.test_something``. (Contributed by Jonas Haag in "
":issue:`32071`.)"
msgstr ""
"新的 ``-k`` 命令行选项允许通过名称子字符串或类似于 Unix shell 的模式来筛选测试项。 例如，``python -m unittest "
"-k foo`` 将运行 ``foo_tests.SomeTest.test_something``, "
"``bar_tests.SomeTest.test_foo``，但不会运行 ``bar_tests.FooTest.test_something``。 "
"（由 Jonas Haag 在 :issue:`32071` 中贡献。）"

#: ../../whatsnew/3.7.rst:1534
msgid "unittest.mock"
msgstr "unittest.mock"

#: ../../whatsnew/3.7.rst:1536
msgid ""
"The :const:`~unittest.mock.sentinel` attributes now preserve their identity "
"when they are :mod:`copied <copy>` or :mod:`pickled <pickle>`. (Contributed "
"by Serhiy Storchaka in :issue:`20804`.)"
msgstr ""
"现在 :const:`~unittest.mock.sentinel` 属性会在它们被 :mod:`复制 <copy>` 或 :mod:`封存 "
"<pickle>` 时保存其标识。 （由 Serhiy Storchaka 在 :issue:`20804` 中贡献。）"

#: ../../whatsnew/3.7.rst:1540
msgid ""
"The new :func:`~unittest.mock.seal` function allows sealing "
":class:`~unittest.mock.Mock` instances, which will disallow further creation"
" of attribute mocks.  The seal is applied recursively to all attributes that"
" are themselves mocks. (Contributed by Mario Corchero in :issue:`30541`.)"
msgstr ""
"新的 :func:`~unittest.mock.seal` 函数允许 :class:`~unittest.mock.Mock` "
"对实例进行密封，这将禁止进一步创建属性模拟。 密封会以递归方式应用于自身模拟的所有属性。 （由 Mario Corchero 在 "
":issue:`30541` 中贡献。）"

#: ../../whatsnew/3.7.rst:1548
msgid "urllib.parse"
msgstr "urllib.parse"

#: ../../whatsnew/3.7.rst:1550
msgid ""
":func:`urllib.parse.quote` has been updated from :rfc:`2396` to :rfc:`3986`,"
" adding ``~`` to the set of characters that are never quoted by default. "
"(Contributed by Christian Theune and Ratnadeep Debnath in :issue:`16285`.)"
msgstr ""
":func:`urllib.parse.quote` 已经从 :rfc:`2396` 更新为 :rfc:`3986`，将 ``~`` "
"添加到默认情况下从未引用的字符集。 （由 Christian Theune 和 Ratnadeep Debnath 在 :issue:`16285` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:1556
msgid "uu"
msgstr "uu"

#: ../../whatsnew/3.7.rst:1558
msgid ""
"The :func:`!uu.encode` function now accepts an optional *backtick* keyword "
"argument.  When it's true, zeros are represented by ``'`'`` instead of "
"spaces.  (Contributed by Xiang Zhang in :issue:`30103`.)"
msgstr ""
"现在 :func:`!uu.encode` 函数接受可选的 *backtick* 关键字参数。 当其为真时，零会以 ``'`'`` 而非空格来表示。 "
"（由 Xiang Zhang 在 :issue:`30103` 中贡献。）"

#: ../../whatsnew/3.7.rst:1564
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.7.rst:1566
msgid ""
"The new :attr:`UUID.is_safe <uuid.UUID.is_safe>` attribute relays "
"information from the platform about whether generated UUIDs are generated "
"with a multiprocessing-safe method. (Contributed by Barry Warsaw in "
":issue:`22807`.)"
msgstr ""
"新的 :attr:`UUID.is_safe <uuid.UUID.is_safe>` 属性会从平台中继有关是否使用多进程安全模式来生成所需  UUID"
" 的信息。 （由 Barry Warsaw 在 :issue:`22807` 中贡献。）"

#: ../../whatsnew/3.7.rst:1571
msgid ""
":func:`uuid.getnode` now prefers universally administered MAC addresses over"
" locally administered MAC addresses. This makes a better guarantee for "
"global uniqueness of UUIDs returned from :func:`uuid.uuid1`.  If only "
"locally administered MAC addresses are available, the first such one found "
"is returned. (Contributed by Barry Warsaw in :issue:`32107`.)"
msgstr ""
":func:`uuid.getnode` 现在更倾向于统一管理的 MAC 地址而不是本地管理的 MAC 地址。 这样可以更好地保证从 "
":func:`uuid.uuid1` 返回的 UUID 的全局唯一性。 如果只有本地管理的 MAC 地址可用，则返回首个找到的此类地址。 （由 "
"Barry Warsaw 在 :issue:`32107` 中贡献。）"

#: ../../whatsnew/3.7.rst:1580
msgid "warnings"
msgstr "warnings"

#: ../../whatsnew/3.7.rst:1582
msgid ""
"The initialization of the default warnings filters has changed as follows:"
msgstr "默认警告过滤器的初始化已进行以下更改:"

#: ../../whatsnew/3.7.rst:1584
msgid ""
"warnings enabled via command line options (including those for :option:`-b` "
"and the new CPython-specific :option:`-X` ``dev`` option) are always passed "
"to the warnings machinery via the :data:`sys.warnoptions` attribute."
msgstr ""
"通过命令行选项（包括 :option:`-b` 以及新的 CPython 专属的 :option:`-X` ``dev`` 选项）启用的警告总是会通过 "
":data:`sys.warnoptions` 属性被传递给警告机制。"

#: ../../whatsnew/3.7.rst:1588
msgid ""
"warnings filters enabled via the command line or the environment now have "
"the following order of precedence:"
msgstr "通过命令行或环境变量启用的警告过滤器现在具有以下优先顺序:"

#: ../../whatsnew/3.7.rst:1591
msgid "the ``BytesWarning`` filter for :option:`-b` (or ``-bb``)"
msgstr "用于 :option:`-b` (或 ``-bb``) 的 ``BytesWarning`` 过滤器"

#: ../../whatsnew/3.7.rst:1592
msgid "any filters specified with the :option:`-W` option"
msgstr "通过 :option:`-W` 选项指定的任何过滤器"

#: ../../whatsnew/3.7.rst:1593
msgid ""
"any filters specified with the :envvar:`PYTHONWARNINGS` environment variable"
msgstr "通过 :envvar:`PYTHONWARNINGS` 环境变量指定的任何过滤器"

#: ../../whatsnew/3.7.rst:1595
msgid ""
"any other CPython specific filters (e.g. the ``default`` filter added for "
"the new ``-X dev`` mode)"
msgstr "任何其他 CPython 专属过滤器（例如 ``-X dev`` 模式中新增的 ``default`` 过滤器）"

#: ../../whatsnew/3.7.rst:1597
msgid "any implicit filters defined directly by the warnings machinery"
msgstr "由警告机制所定义的任何隐式过滤器"

#: ../../whatsnew/3.7.rst:1599
msgid ""
"in :ref:`CPython debug builds <debug-build>`, all warnings are now displayed"
" by default (the implicit filter list is empty)"
msgstr "在 :ref:`CPython 调试版本 <debug-build>` 中，现在默认情况下会显示所有警告（隐式过滤器列表为空）"

#: ../../whatsnew/3.7.rst:1602
msgid ""
"(Contributed by Nick Coghlan and Victor Stinner in :issue:`20361`, "
":issue:`32043`, and :issue:`32230`.)"
msgstr ""
"（由 Nick Coghlan 和 Victor Stinner 在 :issue:`20361`, :issue:`32043` 以及 "
":issue:`32230` 中贡献。）"

#: ../../whatsnew/3.7.rst:1605
msgid ""
"Deprecation warnings are once again shown by default in single-file scripts "
"and at the interactive prompt.  See :ref:`whatsnew37-pep565` for details. "
"(Contributed by Nick Coghlan in :issue:`31975`.)"
msgstr ""
"在单文件脚本和交互式提示符中，默认情况下会再次显示已弃用警告。 详情参见 :ref:`whatsnew37-pep565`。 （由 Nick "
"Coghlan 在 :issue:`31975` 中贡献。）"

#: ../../whatsnew/3.7.rst:1611
msgid "xml"
msgstr "xml"

#: ../../whatsnew/3.7.rst:1613
msgid ""
"As mitigation against DTD and external entity retrieval, the "
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process external"
" entities by default. (Contributed by Christian Heimes in :gh:`61441`.)"
msgstr ""
"作为对 DTD 和外部实体检查的缓解，在默认情况下 :mod:`xml.dom.minidom` 和 :mod:`xml.sax` "
"模块将不再处理外部实体。 （由 Christian Heimes 在 :gh:`61441` 中贡献。）"

#: ../../whatsnew/3.7.rst:1620
msgid "xml.etree"
msgstr "xml.etree"

#: ../../whatsnew/3.7.rst:1622
msgid ""
":ref:`ElementPath <elementtree-xpath>` predicates in the :meth:`!find` "
"methods can now compare text of the current node with ``[. = \"text\"]``, "
"not only text in children.  Predicates also allow adding spaces for better "
"readability.  (Contributed by Stefan Behnel in :issue:`31648`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1629
msgid "xmlrpc.server"
msgstr "xmlrpc.server"

#: ../../whatsnew/3.7.rst:1631
msgid ""
":meth:`!SimpleXMLRPCDispatcher.register_function` can now be used as a "
"decorator.  (Contributed by Xiang Zhang in :issue:`7769`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1637
msgid "zipapp"
msgstr "zipapp"

#: ../../whatsnew/3.7.rst:1639
msgid ""
"Function :func:`~zipapp.create_archive` now accepts an optional *filter* "
"argument to allow the user to select which files should be included in the "
"archive.  (Contributed by Irmen de Jong in :issue:`31072`.)"
msgstr ""
"函数 :func:`~zipapp.create_archive` 现在接受可选的 *filter* 参数，以允许用户选择哪些文件应被加入归档包。 （由"
" Irmen de Jong 在 :issue:`31072` 中贡献。）"

#: ../../whatsnew/3.7.rst:1643
msgid ""
"Function :func:`~zipapp.create_archive` now accepts an optional *compressed*"
" argument to generate a compressed archive.  A command line option "
"``--compress`` has also been added to support compression. (Contributed by "
"Zhiming Wang in :issue:`31638`.)"
msgstr ""
"函数 :func:`~zipapp.create_archive` 现在接受可选的 *compressed* 参数，以生成压缩归档包。 "
"另外也加入了命令行选项 ``--compress`` 以支持压缩。 （由 Zhiming Wang 在 :issue:`31638` 中贡献。）"

#: ../../whatsnew/3.7.rst:1650
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.7.rst:1652
msgid ""
":class:`~zipfile.ZipFile` now accepts the new *compresslevel* parameter to "
"control the compression level. (Contributed by Bo Bayles in :issue:`21417`.)"
msgstr ""
":class:`~zipfile.ZipFile` 现在接受新的 *compresslevel* 形参，以控制压缩级别。 （由 Bo Bayles 在 "
":issue:`21417` 中贡献。）"

#: ../../whatsnew/3.7.rst:1656
msgid ""
"Subdirectories in archives created by ``ZipFile`` are now stored in "
"alphabetical order. (Contributed by Bernhard M. Wiedemann in "
":issue:`30693`.)"
msgstr ""
"``ZipFile`` 所创建的归档包中的子目录现在会按字母表顺序保存。 （由 Bernhard M. Wiedemann 在 "
":issue:`30693` 中贡献。）"

#: ../../whatsnew/3.7.rst:1662
msgid "C API Changes"
msgstr "C API 的改变"

#: ../../whatsnew/3.7.rst:1664
msgid ""
"A new API for thread-local storage has been implemented.  See "
":ref:`whatsnew37-pep539` for an overview and :ref:`thread-specific-storage-"
"api` for a complete reference. (Contributed by Masayuki Yamamoto in "
":issue:`25658`.)"
msgstr ""
"已实现了用于线程本地存储的新 API。 相关概述请参阅 :ref:`whatsnew37-pep539`，完整参考文档请查看 :ref:`thread-"
"specific-storage-api`。 （由 Masayuki Yamamoto 在 :issue:`25658` 中贡献。)"

#: ../../whatsnew/3.7.rst:1669
msgid ""
"The new :ref:`context variables <whatsnew37-pep567>` functionality exposes a"
" number of :ref:`new C APIs <contextvarsobjects>`."
msgstr ""
"新的 :ref:`上下文变量 <whatsnew37-pep567>` 功能开放了许多 :ref:`新的 C API "
"<contextvarsobjects>`。"

#: ../../whatsnew/3.7.rst:1672
msgid ""
"The new :c:func:`PyImport_GetModule` function returns the previously "
"imported module with the given name. (Contributed by Eric Snow in "
":issue:`28411`.)"
msgstr ""
"新的 :c:func:`PyImport_GetModule` 函数会返回之前所导入的具有给定名称的模块。 （由 Eric Snow 在 "
":issue:`28411` 中贡献。）"

#: ../../whatsnew/3.7.rst:1676
msgid ""
"The new :c:macro:`Py_RETURN_RICHCOMPARE` macro eases writing rich comparison"
" functions. (Contributed by Petr Victorin in :issue:`23699`.)"
msgstr ""
"新的 :c:macro:`Py_RETURN_RICHCOMPARE` 宏可以简化丰富比较函数的编写。 （由 Petr Victorin 在 "
":issue:`23699` 中贡献。）"

#: ../../whatsnew/3.7.rst:1680
msgid ""
"The new :c:macro:`Py_UNREACHABLE` macro can be used to mark unreachable code"
" paths. (Contributed by Barry Warsaw in :issue:`31338`.)"
msgstr ""
"新的 :c:macro:`Py_UNREACHABLE` 宏可用于标记不可到达的代码路径。 （由 Barry Warsaw 在 "
":issue:`31338` 中贡献。）"

#: ../../whatsnew/3.7.rst:1684
msgid ""
"The :mod:`tracemalloc` now exposes a C API through the new "
":c:func:`PyTraceMalloc_Track` and :c:func:`PyTraceMalloc_Untrack` functions."
" (Contributed by Victor Stinner in :issue:`30054`.)"
msgstr ""
":mod:`tracemalloc` 现在通过新的 :c:func:`PyTraceMalloc_Track` 和 "
":c:func:`PyTraceMalloc_Untrack` 函数公开了一个 C API。 （由 Victor Stinner 在 "
":issue:`30054` 中贡献。）"

#: ../../whatsnew/3.7.rst:1689
msgid ""
"The new :ref:`import__find__load__start <static-markers>` and "
":ref:`import__find__load__done <static-markers>` static markers can be used "
"to trace module imports. (Contributed by Christian Heimes in "
":issue:`31574`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1694
msgid ""
"The fields :c:member:`!name` and :c:member:`!doc` of structures "
":c:type:`PyMemberDef`, :c:type:`PyGetSetDef`, "
":c:type:`PyStructSequence_Field`, :c:type:`PyStructSequence_Desc`, and "
":c:struct:`!wrapperbase` are now of type ``const char *`` rather of ``char "
"*``.  (Contributed by Serhiy Storchaka in :issue:`28761`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1700
msgid ""
"The result of :c:func:`PyUnicode_AsUTF8AndSize` and "
":c:func:`PyUnicode_AsUTF8` is now of type ``const char *`` rather of ``char "
"*``. (Contributed by Serhiy Storchaka in :issue:`28769`.)"
msgstr ""
":c:func:`PyUnicode_AsUTF8AndSize` 和 :c:func:`PyUnicode_AsUTF8` 的结果类型现在是 "
"``const char *`` 而非 ``char *``。 （由 Serhiy Storchaka 在 :issue:`28769` 中贡献。）"

#: ../../whatsnew/3.7.rst:1704
msgid ""
"The result of :c:func:`PyMapping_Keys`, :c:func:`PyMapping_Values` and "
":c:func:`PyMapping_Items` is now always a list, rather than a list or a "
"tuple. (Contributed by Oren Milman in :issue:`28280`.)"
msgstr ""
":c:func:`PyMapping_Keys`, :c:func:`PyMapping_Values` 和 "
":c:func:`PyMapping_Items` 的结果现在肯定是列表，而非可能是列表也可能是元组。 （由 Oren Milman 在 "
":issue:`28280` 中贡献。）"

#: ../../whatsnew/3.7.rst:1708
msgid ""
"Added functions :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices`. (Contributed by Serhiy Storchaka in "
":issue:`27867`.)"
msgstr ""
"添加了函数 :c:func:`PySlice_Unpack` 和 :c:func:`PySlice_AdjustIndices`。 （由 Serhiy "
"Storchaka 在 :issue:`27867` 中贡献。）"

#: ../../whatsnew/3.7.rst:1711
msgid ""
":c:func:`PyOS_AfterFork` is deprecated in favour of the new functions "
":c:func:`PyOS_BeforeFork`, :c:func:`PyOS_AfterFork_Parent` and "
":c:func:`PyOS_AfterFork_Child`.  (Contributed by Antoine Pitrou in "
":issue:`16500`.)"
msgstr ""
":c:func:`PyOS_AfterFork` 已弃用，建议改用新的 functions :c:func:`PyOS_BeforeFork`, "
":c:func:`PyOS_AfterFork_Parent` 和 :c:func:`PyOS_AfterFork_Child`。 （由 Antoine"
" Pitrou 在 :issue:`16500` 中贡献。）"

#: ../../whatsnew/3.7.rst:1716
msgid ""
"The ``PyExc_RecursionErrorInst`` singleton that was part of the public API "
"has been removed as its members being never cleared may cause a segfault "
"during finalization of the interpreter. Contributed by Xavier de Gaye in "
":issue:`22898` and :issue:`30697`."
msgstr ""
"曾经作为公共 API 一部分的 ``PyExc_RecursionErrorInst`` "
"单例已被移除，因为它的成员永远不会被清理，可能在解释器的最终化过程中导致段错误。 由 Xavier de Gaye 在 :issue:`22898` 和"
" :issue:`30697` 中贡献。"

#: ../../whatsnew/3.7.rst:1721
msgid ""
"Added C API support for timezones with timezone constructors "
":c:func:`PyTimeZone_FromOffset` and :c:func:`PyTimeZone_FromOffsetAndName`, "
"and access to the UTC singleton with :c:data:`PyDateTime_TimeZone_UTC`. "
"Contributed by Paul Ganssle in :issue:`10381`."
msgstr ""
"添加 C API 对使用 timezone 的构造器 :c:func:`PyTimeZone_FromOffset` 和 "
":c:func:`PyTimeZone_FromOffsetAndName` 的时区的支持，以及通常 "
":c:data:`PyDateTime_TimeZone_UTC` 使用 UTC 单例。 由 Paul Ganssle 在 :issue:`10381`"
" 中贡献。"

#: ../../whatsnew/3.7.rst:1726
msgid ""
"The type of results of :c:func:`!PyThread_start_new_thread` and "
":c:func:`!PyThread_get_thread_ident`, and the *id* parameter of "
":c:func:`PyThreadState_SetAsyncExc` changed from :c:expr:`long` to "
":c:expr:`unsigned long`. (Contributed by Serhiy Storchaka in :issue:`6532`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1732
msgid ""
":c:func:`PyUnicode_AsWideCharString` now raises a :exc:`ValueError` if the "
"second argument is ``NULL`` and the :c:expr:`wchar_t*` string contains null "
"characters.  (Contributed by Serhiy Storchaka in :issue:`30708`.)"
msgstr ""
"现在 :c:func:`PyUnicode_AsWideCharString` 在第二个参数为 ``NULL`` 且 "
":c:expr:`wchar_t*` 字符串包含空字符时会引发 :exc:`ValueError`。 （由 Serhiy Storchaka 在 "
":issue:`30708` 中贡献。）"

#: ../../whatsnew/3.7.rst:1736
msgid ""
"Changes to the startup sequence and the management of dynamic memory "
"allocators mean that the long documented requirement to call "
":c:func:`Py_Initialize` before calling most C API functions is now relied on"
" more heavily, and failing to abide by it may lead to segfaults in embedding"
" applications. See the :ref:`porting-to-python-37` section in this document "
"and the :ref:`pre-init-safe` section in the C API documentation for more "
"details."
msgstr ""
"对启动顺序以及动态内存分配器管理的更改意味着早已记录在案的，对在调用大多数 C API 函数之前调用 :c:func:`Py_Initialize` "
"的要求的依赖现在变得更加强烈，未遵循此要求可能导致嵌入式应用程序中的段错误。 请参阅此文档的 :ref:`porting-to-python-37` "
"一节以及 C API 文档的 :ref:`pre-init-safe` 一节了解更多细节。"

#: ../../whatsnew/3.7.rst:1744
msgid ""
"The new :c:func:`PyInterpreterState_GetID` returns the unique ID for a given"
" interpreter. (Contributed by Eric Snow in :issue:`29102`.)"
msgstr ""
"新的 :c:func:`PyInterpreterState_GetID` 会返回给定解释器的唯一 ID。 （由 Eric Snow 在 "
":issue:`29102` 中贡献。）"

#: ../../whatsnew/3.7.rst:1748
msgid ""
":c:func:`Py_DecodeLocale`, :c:func:`Py_EncodeLocale` now use the UTF-8 "
"encoding when the :ref:`UTF-8 mode <whatsnew37-pep540>` is enabled. "
"(Contributed by Victor Stinner in :issue:`29240`.)"
msgstr ""
"现在当启用 :ref:`UTF-8 模式 <whatsnew37-pep540>` 时 :c:func:`Py_DecodeLocale`, "
":c:func:`Py_EncodeLocale` 会使用 UTF-8 编码。 （由 Victor Stinner 在 :issue:`29240` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:1752
msgid ""
":c:func:`PyUnicode_DecodeLocaleAndSize` and :c:func:`PyUnicode_EncodeLocale`"
" now use the current locale encoding for ``surrogateescape`` error handler. "
"(Contributed by Victor Stinner in :issue:`29240`.)"
msgstr ""
":c:func:`PyUnicode_DecodeLocaleAndSize` 和 :c:func:`PyUnicode_EncodeLocale` "
"现在会为 ``surrogateescape`` 错误句柄使用当前区域编码。 （由 Victor Stinner 在 :issue:`29240` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:1756
msgid ""
"The *start* and *end* parameters of :c:func:`PyUnicode_FindChar` are now "
"adjusted to behave like string slices. (Contributed by Xiang Zhang in "
":issue:`28822`.)"
msgstr ""
":c:func:`PyUnicode_FindChar` 的 *start* 和 *end* 形参的行为现在调整为与字符串切片类似。 （由 Xiang "
"Zhang 在 :issue:`28822` 中贡献。）"

#: ../../whatsnew/3.7.rst:1762
msgid "Build Changes"
msgstr "构建的改变"

#: ../../whatsnew/3.7.rst:1764
msgid ""
"Support for building ``--without-threads`` has been removed.  The "
":mod:`threading` module is now always available. (Contributed by Antoine "
"Pitrou in :issue:`31370`.)."
msgstr ""
"对于 ``--without-threads`` 构建的支持已被移除。 :mod:`threading` 模块现在将总是可用。 （由 Antoine "
"Pitrou 在 :issue:`31370` 中贡献。）"

#: ../../whatsnew/3.7.rst:1768
msgid ""
"A full copy of libffi is no longer bundled for use when building the "
":mod:`_ctypes <ctypes>` module on non-OSX UNIX platforms.  An installed copy"
" of libffi is now required when building ``_ctypes`` on such platforms. "
"(Contributed by Zachary Ware in :issue:`27979`.)"
msgstr ""
"在非 OSX UNIX 平台上已不再包含用于构建 :mod:`_ctypes <ctypes>` 模块的完整 libffi 副本。 "
"现在当在此类平台上构建 ``_ctypes`` 时需要事先装有 libffi 的副本。 （由 Zachary Ware 在 :issue:`27979`"
" 中贡献。）"

#: ../../whatsnew/3.7.rst:1773
msgid ""
"The Windows build process no longer depends on Subversion to pull in "
"external sources, a Python script is used to download zipfiles from GitHub "
"instead. If Python 3.6 is not found on the system (via ``py -3.6``), NuGet "
"is used to download a copy of 32-bit Python for this purpose.  (Contributed "
"by Zachary Ware in :issue:`30450`.)"
msgstr ""
"Windows 构建过程不再依赖 Subversion 来拉取外部源码，而是改用一段 Python 脚本从 GitHub 下载 zip 文件。 "
"如果未在系统中找到 Python 3.6 (通过 ``py -3.6``)，则会使用 NuGet 下载一份 32 位的 Python 副本用于此目的。 "
"（由 Zachary Ware 在 :issue:`30450` 中贡献。）"

#: ../../whatsnew/3.7.rst:1779
msgid ""
"The :mod:`ssl` module requires OpenSSL 1.0.2 or 1.1 compatible libssl. "
"OpenSSL 1.0.1 has reached end of lifetime on 2016-12-31 and is no longer "
"supported. LibreSSL is temporarily not supported as well. LibreSSL releases "
"up to version 2.6.4 are missing required OpenSSL 1.0.2 APIs."
msgstr ""
":mod:`ssl` 模块需要兼容 OpenSSL 1.0.2 或 1.1 的 libssl。 OpenSSL 1.0.1 的生命期已于 "
"2016-12-31 终止且不再受支持。 LibreSSL 暂时也不受支持。 LibreSSL 发布版直到 2.6.4 版还缺少所需的 OpenSSL "
"1.0.2 API。"

#: ../../whatsnew/3.7.rst:1788
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.7.rst:1790
msgid ""
"The overhead of calling many methods of various standard library classes "
"implemented in C has been significantly reduced by porting more code to use "
"the ``METH_FASTCALL`` convention. (Contributed by Victor Stinner in "
":issue:`29300`, :issue:`29507`, :issue:`29452`, and :issue:`29286`.)"
msgstr ""
"通过移植更多代码来使用 ``METH_FASTCALL`` 的约定，可以显著地减少调用 C 代码中实现的各类标准库的很多方法的开销。 （由 Victor"
" Stinner 在 :issue:`29300`、:issue:`29507`、:issue:`29452` 以及 :issue:`29286` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:1796
msgid ""
"Various optimizations have reduced Python startup time by 10% on Linux and "
"up to 30% on macOS. (Contributed by Victor Stinner, INADA Naoki in "
":issue:`29585`, and Ivan Levkivskyi in :issue:`31333`.)"
msgstr ""
"通过各种优化方式，使 Python 在 Linux 上的启动时间缩短了 10%，在 macOS 上缩短了 30%。 （由 Victor Stinner,"
" INADA Naoki 在 :issue:`29585` 中，以及 Ivan Levkivskyi 在 :issue:`31333` 中贡献。）"

#: ../../whatsnew/3.7.rst:1801
msgid ""
"Method calls are now up to 20% faster due to the bytecode changes which "
"avoid creating bound method instances. (Contributed by Yury Selivanov and "
"INADA Naoki in :issue:`26110`.)"
msgstr ""
"由于避免创建绑定方法案例的字节码更改，方法调用速度现在加快了 20%。 （由 Yury Selivanov 和 INADA Naoki 在 "
":issue:`26110` 中贡献。）"

#: ../../whatsnew/3.7.rst:1807
msgid ""
"The :mod:`asyncio` module received a number of notable optimizations for "
"commonly used functions:"
msgstr "对 :mod:`asyncio` 模块里面的一些常用函数做了显著的性能优化。"

#: ../../whatsnew/3.7.rst:1810
msgid ""
"The :func:`asyncio.get_event_loop` function has been reimplemented in C to "
"make it up to 15 times faster. (Contributed by Yury Selivanov in "
":issue:`32296`.)"
msgstr ""
":func:`asyncio.get_event_loop` 函数已经改用 C 重新实现，使其执行速度加快了 15 倍。 （由 Yury "
"Selivanov 在 :issue:`32296` 中贡献。）"

#: ../../whatsnew/3.7.rst:1814
msgid ""
":class:`asyncio.Future` callback management has been optimized. (Contributed"
" by Yury Selivanov in :issue:`32348`.)"
msgstr ""
":class:`asyncio.Future` 回调管理已经过优化。 （由 Yury Selivanov 在 :issue:`32348` 中贡献。）"

#: ../../whatsnew/3.7.rst:1817
msgid ""
":func:`asyncio.gather` is now up to 15% faster. (Contributed by Yury "
"Selivanov in :issue:`32355`.)"
msgstr ""
":func:`asyncio.gather` 的执行速度现在加快了 15%。 （由 Yury Selivanov 在 :issue:`32355` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:1820
msgid ""
":func:`asyncio.sleep` is now up to 2 times faster when the *delay* argument "
"is zero or negative. (Contributed by Andrew Svetlov in :issue:`32351`.)"
msgstr ""
"当 *delay* 参数为零或负值时 :func:`asyncio.sleep` 的执行速度现在加快了 2 倍。 （由 Andrew Svetlov 在"
" :issue:`32351` 中贡献。）"

#: ../../whatsnew/3.7.rst:1824
msgid ""
"The performance overhead of asyncio debug mode has been reduced. "
"(Contributed by Antoine Pitrou in :issue:`31970`.)"
msgstr "asyncio 调试模式的执行开销已获减轻。 （由 Antoine Pitrou 在 :issue:`31970` 中贡献。）"

#: ../../whatsnew/3.7.rst:1827
msgid ""
"As a result of :ref:`PEP 560 work <whatsnew37-pep560>`, the import time of "
":mod:`typing` has been reduced by a factor of 7, and many typing operations "
"are now faster. (Contributed by Ivan Levkivskyi in :issue:`32226`.)"
msgstr ""
"作为 :ref:`PEP 560 工作 <whatsnew37-pep560>` 的结果，:mod:`typing` 的导入时间已减少了 7 "
"倍，许多与类型相关的操作现在会执行得更快。 （由 Ivan Levkivskyi 在 :issue:`32226` 中贡献。）"

#: ../../whatsnew/3.7.rst:1832
msgid ""
":func:`sorted` and :meth:`list.sort` have been optimized for common cases to"
" be up to 40-75% faster. (Contributed by Elliot Gorokhovsky in "
":issue:`28685`.)"
msgstr ""
":func:`sorted` 和 :meth:`list.sort` 已经过优化，在通常情况下执行速度可提升 40-75%。 （由 Elliot "
"Gorokhovsky 在 :issue:`28685` 中贡献。）"

#: ../../whatsnew/3.7.rst:1836
msgid ""
":meth:`dict.copy` is now up to 5.5 times faster. (Contributed by Yury "
"Selivanov in :issue:`31179`.)"
msgstr ""
":meth:`dict.copy` 的执行速度现在加快了 5.5 倍。 （由 Yury Selivanov 在 :issue:`31179` 中贡献。）"

#: ../../whatsnew/3.7.rst:1839
msgid ""
":func:`hasattr` and :func:`getattr` are now about 4 times faster when *name*"
" is not found and *obj* does not override :meth:`object.__getattr__` or "
":meth:`object.__getattribute__`. (Contributed by INADA Naoki in "
":issue:`32544`.)"
msgstr ""
"当 *name* 未找到并且 *obj* 未重载 :meth:`object.__getattr__` 或 "
":meth:`object.__getattribute__` 时 :func:`hasattr` 和 :func:`getattr` "
"现在会比原来快大约 4 倍。 （由 INADA Naoki 在 :issue:`32544` 中贡献。）"

#: ../../whatsnew/3.7.rst:1844
msgid ""
"Searching for certain Unicode characters (like Ukrainian capital \"Є\") in a"
" string was up to 25 times slower than searching for other characters. It is"
" now only 3 times slower in the worst case. (Contributed by Serhiy Storchaka"
" in :issue:`24821`.)"
msgstr ""
"在字符串中搜索特定的 Unicode 字符（例如乌克兰语字母“Є”）会比搜索其他字符慢上 25 倍。 而现在最坏情况下也只会慢上 3 倍。 （由 "
"Serhiy Storchaka 在 :issue:`24821` 中贡献。）"

#: ../../whatsnew/3.7.rst:1849
msgid ""
"The :func:`collections.namedtuple` factory has been reimplemented to make "
"the creation of named tuples 4 to 6 times faster. (Contributed by Jelle "
"Zijlstra with further improvements by INADA Naoki, Serhiy Storchaka, and "
"Raymond Hettinger in :issue:`28638`.)"
msgstr ""
":func:`collections.namedtuple` 工厂对象已经重写实现，使得创建具名元组的速度加快了 4 到 6 倍。 （由 Jelle "
"Zijlstra 在 :issue:`28638` 中贡献，进一步的改进由 INADA Naoki, Serhiy Storchaka 和 "
"Raymond Hettinger 贡献。）"

#: ../../whatsnew/3.7.rst:1854
msgid ""
":meth:`datetime.date.fromordinal` and :meth:`datetime.date.fromtimestamp` "
"are now up to 30% faster in the common case. (Contributed by Paul Ganssle in"
" :issue:`32403`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:1858
msgid ""
"The :func:`os.fwalk` function is now up to 2 times faster thanks to the use "
"of :func:`os.scandir`. (Contributed by Serhiy Storchaka in :issue:`25996`.)"
msgstr ""
"由于使用了 :func:`os.scandir`，现在 :func:`os.fwalk` 函数执行速度提升了 2 倍。 （由 Serhiy "
"Storchaka 在 :issue:`25996` 中贡献。）"

#: ../../whatsnew/3.7.rst:1862
msgid ""
"The speed of the :func:`shutil.rmtree` function has been improved by 20--40%"
" thanks to the use of the :func:`os.scandir` function. (Contributed by "
"Serhiy Storchaka in :issue:`28564`.)"
msgstr ""
"由于使用了 :func:`os.scandir` 函数，:func:`shutil.rmtree` 函数的执行速度已经提升了 20--40%。 （由 "
"Serhiy Storchaka 在 :issue:`28564` 中贡献。）"

#: ../../whatsnew/3.7.rst:1866
msgid ""
"Optimized case-insensitive matching and searching of :mod:`regular "
"expressions <re>`.  Searching some patterns can now be up to 20 times "
"faster. (Contributed by Serhiy Storchaka in :issue:`30285`.)"
msgstr ""
":mod:`正则表达式 <re>` 忽略大小写的匹配和搜索已获得优化。 现在搜索某些模式的速度提升了 20 倍。 （由 Serhiy Storchaka"
" 在 :issue:`30285` 中贡献。）"

#: ../../whatsnew/3.7.rst:1870
msgid ""
":func:`re.compile` now converts ``flags`` parameter to int object if it is "
"``RegexFlag``.  It is now as fast as Python 3.5, and faster than Python 3.6 "
"by about 10% depending on the pattern. (Contributed by INADA Naoki in "
":issue:`31671`.)"
msgstr ""
":func:`re.compile` 现在会将 ``flags`` 形参转换为 int 对象，如果它是 ``RegexFlag`` 的话。 它现在会和 "
"Python 3.5 一样快，而比 Python 3.6 快大约 10%，实际速度取决于具体的模式。 （由 INADA Naoki 在 "
":issue:`31671` 中贡献。）"

#: ../../whatsnew/3.7.rst:1875
msgid ""
"The :meth:`~selectors.BaseSelector.modify` methods of classes "
":class:`selectors.EpollSelector`, :class:`selectors.PollSelector` and "
":class:`selectors.DevpollSelector` may be around 10% faster under heavy "
"loads.  (Contributed by Giampaolo Rodola' in :issue:`30014`)"
msgstr ""
":class:`selectors.EpollSelector`, :class:`selectors.PollSelector` 和 "
":class:`selectors.DevpollSelector` 这几个类的 "
":meth:`~selectors.BaseSelector.modify` 方法在重负载下可以加快 10% 左右。 （由 Giampaolo "
"Rodola' 在 :issue:`30014` 中贡献。）"

#: ../../whatsnew/3.7.rst:1880
msgid ""
"Constant folding has been moved from the peephole optimizer to the new AST "
"optimizer, which is able perform optimizations more consistently. "
"(Contributed by Eugene Toder and INADA Naoki in :issue:`29469` and "
":issue:`11549`.)"
msgstr ""
"常量折叠已经从窥孔优化器迁移至新的 AST 优化器，后者可以以更高的一致性来执行优化。 （由 Eugene Toder 和 INADA Naoki 在 "
":issue:`29469` 和 :issue:`11549` 中贡献。）"

#: ../../whatsnew/3.7.rst:1885
msgid ""
"Most functions and methods in :mod:`abc` have been rewritten in C. This "
"makes creation of abstract base classes, and calling :func:`isinstance` and "
":func:`issubclass` on them 1.5x faster.  This also reduces Python start-up "
"time by up to 10%. (Contributed by Ivan Levkivskyi and INADA Naoki in "
":issue:`31333`)"
msgstr ""
":mod:`abc` 中的大部分函数和方法已经用 C 重写。 这使得创建抽像基类以及调用其 :func:`isinstance` 和 "
":func:`issubclass` 的速度加快了 1.5 倍。 这也使得 Python 启动耗时减少了 10%。 （由 Ivan Levkivskyi"
" 和 INADA Naoki 在 :issue:`31333` 中贡献。）"

#: ../../whatsnew/3.7.rst:1891
msgid ""
"Significant speed improvements to alternate constructors for "
":class:`datetime.date` and :class:`datetime.datetime` by using fast-path "
"constructors when not constructing subclasses. (Contributed by Paul Ganssle "
"in :issue:`32403`)"
msgstr ""
"在不构造子类时，通过使用快速路径构造器使得 :class:`datetime.date` 和 :class:`datetime.datetime` "
"的替代构造器获得了显著的速度提升。 （由 Paul Ganssle 在 :issue:`32403` 中贡献。）"

#: ../../whatsnew/3.7.rst:1896
msgid ""
"The speed of comparison of :class:`array.array` instances has been improved "
"considerably in certain cases.  It is now from 10x to 70x faster when "
"comparing arrays holding values of the same integer type. (Contributed by "
"Adrian Wielgosik in :issue:`24700`.)"
msgstr ""
"在特定情况下 :class:`array.array` 实例的比较速度已获得很大提升。 现在当比较存放相同的整数类型的值的数组时会比原来快 10 到 "
"70 倍。 （由 Adrian Wielgosik 在 :issue:`24700` 中贡献。）"

#: ../../whatsnew/3.7.rst:1901
msgid ""
"The :func:`math.erf` and :func:`math.erfc` functions now use the (faster) C "
"library implementation on most platforms. (Contributed by Serhiy Storchaka "
"in :issue:`26121`.)"
msgstr ""
"在大多数平台上 :func:`math.erf` 和 :func:`math.erfc` 函数现在使用（更快的）C 库实现。 （由 Serhiy "
"Storchaka 在 :issue:`26121` 中贡献。）"

#: ../../whatsnew/3.7.rst:1907
msgid "Other CPython Implementation Changes"
msgstr "其他 CPython 实现的改变"

#: ../../whatsnew/3.7.rst:1909
msgid ""
"Trace hooks may now opt out of receiving the ``line`` and opt into receiving"
" the ``opcode`` events from the interpreter by setting the corresponding new"
" :attr:`~frame.f_trace_lines` and :attr:`~frame.f_trace_opcodes` attributes "
"on the frame being traced. (Contributed by Nick Coghlan in :issue:`31344`.)"
msgstr ""
"跟踪钩子现在可以选择不接收 ``line`` 而选择从解释器接收 ``opcode`` 事件，具体做法是在被跟踪的帧上相应地设置新的 "
":attr:`~frame.f_trace_lines` 和 :attr:`~frame.f_trace_opcodes` 属性。 （由 Nick "
"Coghlan 在 :issue:`31344` 中贡献。）"

#: ../../whatsnew/3.7.rst:1914
msgid ""
"Fixed some consistency problems with namespace package module attributes. "
"Namespace module objects now have an ``__file__`` that is set to ``None`` "
"(previously unset), and their ``__spec__.origin`` is also set to ``None`` "
"(previously the string ``\"namespace\"``).  See :issue:`32305`.  Also, the "
"namespace module object's ``__spec__.loader`` is set to the same value as "
"``__loader__`` (previously, the former was set to ``None``).  See "
":issue:`32303`."
msgstr ""
"修复了一些命名空间包模块属性的一致性问题。 命名空间模块对象的 ``__file__`` 被设置为 ``None``  (原先未设置)，对象的 "
"``__spec__.origin`` 也被设置为 ``None`` (之前为字符串 ``\"namespace\"``)。 参见 "
":issue:`32305`。 而且，命名空间模块对象的 ``__spec__.loader`` 被设置的值与 ``__loader__`` 相同 "
"(原先前者被设置为 ``None``)。 参见 :issue:`32303`。"

#: ../../whatsnew/3.7.rst:1922
msgid ""
"The :func:`locals` dictionary now displays in the lexical order that "
"variables were defined.  Previously, the order was undefined. (Contributed "
"by Raymond Hettinger in :issue:`32690`.)"
msgstr ""
":func:`locals` 字典现在以变量定义的词法顺序显示。 原先未定义顺序。 （由 Raymond Hettinger 在 "
":issue:`32690` 中贡献。）"

#: ../../whatsnew/3.7.rst:1926
msgid ""
"The ``distutils`` ``upload`` command no longer tries to change CR end-of-"
"line characters to CRLF.  This fixes a corruption issue with sdists that "
"ended with a byte equivalent to CR. (Contributed by Bo Bayles in "
":issue:`32304`.)"
msgstr ""
"``distutils`` ``upload`` 命令不会再试图将行结束符 CR 改为 CRLF。 这修复了 sdists 的一个以与 CR "
"等价的字节结束的数据损坏问题。 （由 Bo Bayles 在 :issue:`32304` 中贡献。）"

#: ../../whatsnew/3.7.rst:1933
msgid "Deprecated Python Behavior"
msgstr "已弃用的 Python 行为"

#: ../../whatsnew/3.7.rst:1935
msgid ""
"Yield expressions (both ``yield`` and ``yield from`` clauses) are now "
"deprecated in comprehensions and generator expressions (aside from the "
"iterable expression in the leftmost :keyword:`!for` clause). This ensures "
"that comprehensions always immediately return a container of the appropriate"
" type (rather than potentially returning a :term:`generator iterator` "
"object), while generator expressions won't attempt to interleave their "
"implicit output with the output from any explicit yield expressions.  In "
"Python 3.7, such expressions emit :exc:`DeprecationWarning` when compiled, "
"in Python 3.8 this will be a :exc:`SyntaxError`. (Contributed by Serhiy "
"Storchaka in :issue:`10544`.)"
msgstr ""
"在推导式和生成器表达式中的 yield 语句（包括 ``yield`` 和 ``yield from`` 子句）现在已弃用（最左端的 "
":keyword:`!for` 子句中的可迭代对象表达式除外）。 这确保了推导式总是立即返回适当类型的容器（而不是有可能返回 "
":term:`generator iterator` 对象），这样生成器表达式不会试图将它们的隐式输出与任何来自显式 yield 表达式的输出交错起来。"
" 在 Python 3.7 中，这样的表达式会在编译时引发 :exc:`DeprecationWarning`，在 Python 3.8 中则将引发 "
":exc:`SyntaxError`。 （由 Serhiy Storchaka 在 :issue:`10544` 中贡献。）"

#: ../../whatsnew/3.7.rst:1946
msgid ""
"Returning a subclass of :class:`complex` from :meth:`object.__complex__` is "
"deprecated and will be an error in future Python versions.  This makes "
"``__complex__()`` consistent with :meth:`object.__int__` and "
":meth:`object.__float__`. (Contributed by Serhiy Storchaka in "
":issue:`28894`.)"
msgstr ""
"从 :meth:`object.__complex__` 返回一个 :class:`complex` 的子类的行为已弃用并将在未来的 Python "
"版本中引发错误。 这使得 ``__complex__()`` 的行为与 :meth:`object.__int__` 和 "
":meth:`object.__float__` 保持一致。 （由 Serhiy Storchaka 在 :issue:`28894` 中贡献。）"

#: ../../whatsnew/3.7.rst:1955
msgid "Deprecated Python modules, functions and methods"
msgstr "已弃用的 Python 模块、函数和方法"

#: ../../whatsnew/3.7.rst:1958
msgid "aifc"
msgstr "aifc"

#: ../../whatsnew/3.7.rst:1960
msgid ""
":func:`!aifc.openfp` has been deprecated and will be removed in Python 3.9. "
"Use :func:`!aifc.open` instead. (Contributed by Brian Curtin in "
":issue:`31985`.)"
msgstr ""
":func:`!aifc.openfp` 已被弃用并将在 Python 3.9 中移除。 请改用 :func:`!aifc.open`。 （由 "
"Brian Curtin 在 :issue:`31985` 中贡献。）"

#: ../../whatsnew/3.7.rst:1970
msgid ""
"Support for directly ``await``-ing instances of :class:`asyncio.Lock` and "
"other asyncio synchronization primitives has been deprecated.  An "
"asynchronous context manager must be used in order to acquire and release "
"the synchronization resource. (Contributed by Andrew Svetlov in "
":issue:`32253`.)"
msgstr ""
"对 :class:`asyncio.Lock` 和其他 asyncio 同步原语的 ``await`` 实例的直接支持已弃用。 "
"想要获取并释放同步资源必须使用异步上下文管理器。 （由 Andrew Svetlov 在 :issue:`32253` 中贡献。）"

#: ../../whatsnew/3.7.rst:1976
msgid ""
"The :meth:`!asyncio.Task.current_task` and :meth:`!asyncio.Task.all_tasks` "
"methods have been deprecated. (Contributed by Andrew Svetlov in "
":issue:`32250`.)"
msgstr ""
":meth:`!asyncio.Task.current_task` 和 :meth:`!asyncio.Task.all_tasks` 方法已被弃用。"
" （由 Andrew Svetlov 在 :issue:`32250` 中贡献。）"

#: ../../whatsnew/3.7.rst:1984
msgid ""
"In Python 3.8, the abstract base classes in :mod:`collections.abc` will no "
"longer be exposed in the regular :mod:`collections` module.  This will help "
"create a clearer distinction between the concrete classes and the abstract "
"base classes. (Contributed by Serhiy Storchaka in :issue:`25988`.)"
msgstr ""
"在 Python 3.8 中，:mod:`collections.abc` 内的抽象基类将不会再通过常规的 :mod:`collections` "
"模块公开。 这有助于更清晰地区别具体类与抽象基类。 （由 Serhiy Storchaka 在 :issue:`25988` 中贡献。）"

#: ../../whatsnew/3.7.rst:1994
msgid ""
":mod:`dbm.dumb` now supports reading read-only files and no longer writes "
"the index file when it is not changed.  A deprecation warning is now emitted"
" if the index file is missing and recreated in the ``'r'`` and ``'w'`` modes"
" (this will be an error in future Python releases). (Contributed by Serhiy "
"Storchaka in :issue:`28847`.)"
msgstr ""
":mod:`dbm.dumb` 现在支持读取只读文件，且当其未被更改时不会再写入索引文件。 现在如果索引文件丢失并在 ``'r'`` 与 ``'w'``"
" 模式下被重新创建，则会发出已弃用警告（在未来的 Python 发布版中将改为错误）。 （由 Serhiy Storchaka 在 "
":issue:`28847` 中贡献。）"

#: ../../whatsnew/3.7.rst:2004
msgid ""
"In Python 3.8, attempting to check for non-Enum objects in "
":class:`~enum.Enum` classes will raise a :exc:`TypeError` (e.g. ``1 in "
"Color``); similarly, attempting to check for non-Flag objects in a "
":class:`~enum.Flag` member will raise :exc:`TypeError` (e.g. ``1 in "
"Perm.RW``); currently, both operations return :const:`False` instead. "
"(Contributed by Ethan Furman in :issue:`33217`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2013
msgid "gettext"
msgstr "gettext"

#: ../../whatsnew/3.7.rst:2015
msgid ""
"Using non-integer value for selecting a plural form in :mod:`gettext` is now"
" deprecated.  It never correctly worked. (Contributed by Serhiy Storchaka in"
" :issue:`28692`.)"
msgstr ""
"使用非整数值在 :mod:`gettext` 中选择复数形式现在已弃用。 它从未正确地发挥作用。 （由 Serhiy Storchaka 在 "
":issue:`28692` 中贡献。）"

#: ../../whatsnew/3.7.rst:2023
msgid ""
"Methods :meth:`!MetaPathFinder.find_module` (replaced by "
":meth:`MetaPathFinder.find_spec() <importlib.abc.MetaPathFinder.find_spec>`)"
" and :meth:`!PathEntryFinder.find_loader` (replaced by "
":meth:`PathEntryFinder.find_spec() "
"<importlib.abc.PathEntryFinder.find_spec>`) both deprecated in Python 3.4 "
"now emit :exc:`DeprecationWarning`. (Contributed by Matthias Bussonnier in "
":issue:`29576`.)"
msgstr ""
"方法 :meth:`!MetaPathFinder.find_module` (被 :meth:`MetaPathFinder.find_spec() "
"<importlib.abc.MetaPathFinder.find_spec>` 替代) 和 "
":meth:`!PathEntryFinder.find_loader` (被 :meth:`PathEntryFinder.find_spec() "
"<importlib.abc.PathEntryFinder.find_spec>` 替代) 都已在 Python 3.4 中被弃用，现在会发出 "
":exc:`DeprecationWarning`。 （由 Matthias Bussonnier 在 :issue:`29576` 中贡献。）"

#: ../../whatsnew/3.7.rst:2034
msgid ""
"The :class:`importlib.abc.ResourceLoader` ABC has been deprecated in favour "
"of :class:`importlib.abc.ResourceReader`."
msgstr ""
":class:`importlib.abc.ResourceLoader` ABC 已弃用，推荐改用 "
":class:`importlib.abc.ResourceReader`。"

#: ../../whatsnew/3.7.rst:2041
msgid ""
":func:`!locale.format` has been deprecated, use :meth:`locale.format_string`"
" instead.  (Contributed by Garvit in :issue:`10379`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2046
msgid "macpath"
msgstr "macpath"

#: ../../whatsnew/3.7.rst:2048
msgid ""
"The :mod:`!macpath` is now deprecated and will be removed in Python 3.8. "
"(Contributed by Chi Hsuan Yen in :issue:`9850`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2053
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.7.rst:2055
msgid ""
":mod:`!dummy_threading` and :mod:`!_dummy_thread` have been deprecated.  It "
"is no longer possible to build Python with threading disabled. Use "
":mod:`threading` instead. (Contributed by Antoine Pitrou in :issue:`31370`.)"
msgstr ""
":mod:`!dummy_threading` 和 :mod:`!_dummy_thread` 已被弃用。 构建禁用线程的 Python 已不再可能。 "
"请改用 :mod:`threading`。 （由 Antoine Pitrou 在 :issue:`31370` 中贡献。）"

#: ../../whatsnew/3.7.rst:2064
msgid ""
"The silent argument value truncation in :func:`socket.htons` and "
":func:`socket.ntohs` has been deprecated.  In future versions of Python, if "
"the passed argument is larger than 16 bits, an exception will be raised. "
"(Contributed by Oren Milman in :issue:`28332`.)"
msgstr ""
":func:`socket.htons` 和 :func:`socket.ntohs` 中的静默参数截断已弃用。 在未来的 Python "
"版本中，如果传入的参数长度大于 16 比特位，将会引发异常。 （由 Oren Milman 在 :issue:`28332` 中贡献。）"

#: ../../whatsnew/3.7.rst:2073
msgid ""
":func:`!ssl.wrap_socket` is deprecated.  Use "
":meth:`ssl.SSLContext.wrap_socket` instead. (Contributed by Christian Heimes"
" in :issue:`28124`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2079
msgid "sunau"
msgstr "sunau"

#: ../../whatsnew/3.7.rst:2081
msgid ""
":func:`!sunau.openfp` has been deprecated and will be removed in Python 3.9."
" Use :func:`!sunau.open` instead. (Contributed by Brian Curtin in "
":issue:`31985`.)"
msgstr ""
":func:`!sunau.openfp` 已被弃用并将在 Python 3.9 中移除。 请改用 :func:`!sunau.open`。 （由 "
"Brian Curtin 在 :issue:`31985` 中贡献。）"

#: ../../whatsnew/3.7.rst:2089
msgid ""
"Deprecated :func:`!sys.set_coroutine_wrapper` and "
":func:`!sys.get_coroutine_wrapper`."
msgstr ""

#: ../../whatsnew/3.7.rst:2092
msgid ""
"The undocumented ``sys.callstats()`` function has been deprecated and will "
"be removed in a future Python version. (Contributed by Victor Stinner in "
":issue:`28799`.)"
msgstr ""
"未写入文档的 ``sys.callstats()`` 函数已弃用并将在未来的 Python 版本中被移除。 （由 Victor Stinner 在 "
":issue:`28799` 中贡献。）"

#: ../../whatsnew/3.7.rst:2098
msgid "wave"
msgstr "wave"

#: ../../whatsnew/3.7.rst:2100
msgid ""
":func:`!wave.openfp` has been deprecated and will be removed in Python 3.9. "
"Use :func:`wave.open` instead. (Contributed by Brian Curtin in "
":issue:`31985`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2106
msgid "Deprecated functions and types of the C API"
msgstr "已弃用的 C API 函数和类型"

#: ../../whatsnew/3.7.rst:2108
msgid ""
"Function :c:func:`PySlice_GetIndicesEx` is deprecated and replaced with a "
"macro if ``Py_LIMITED_API`` is not set or set to a value in the range "
"between ``0x03050400`` and ``0x03060000`` (not inclusive), or is "
"``0x03060100`` or higher.  (Contributed by Serhiy Storchaka in "
":issue:`27867`.)"
msgstr ""
"如果 ``Py_LIMITED_API`` 未设定或设定为范围在 ``0x03050400`` 和 ``0x03060000`` (不含) 之间，或为 "
"``0x03060100`` 或更高的值，函数 :c:func:`PySlice_GetIndicesEx` 已弃用并被一个宏所替代。 （由 "
"Serhiy Storchaka 在 :issue:`27867` 中贡献。）"

#: ../../whatsnew/3.7.rst:2113
msgid ""
":c:func:`PyOS_AfterFork` has been deprecated.  Use "
":c:func:`PyOS_BeforeFork`, :c:func:`PyOS_AfterFork_Parent` or "
":c:func:`PyOS_AfterFork_Child()` instead. (Contributed by Antoine Pitrou in "
":issue:`16500`.)"
msgstr ""
":c:func:`PyOS_AfterFork` 已弃用。 请改用 :c:func:`PyOS_BeforeFork`, "
":c:func:`PyOS_AfterFork_Parent` 或 :c:func:`PyOS_AfterFork_Child()`。 （由 "
"Antoine Pitrou 在 :issue:`16500` 中贡献。）"

#: ../../whatsnew/3.7.rst:2121
msgid "Platform Support Removals"
msgstr "平台支持的移除"

#: ../../whatsnew/3.7.rst:2123
msgid "FreeBSD 9 and older are no longer officially supported."
msgstr "官方已不再支持 FreeBSD 9 及更旧的版本。"

#: ../../whatsnew/3.7.rst:2124
msgid ""
"For full Unicode support, including within extension modules, \\*nix "
"platforms are now expected to provide at least one of ``C.UTF-8`` (full "
"locale), ``C.utf8`` (full locale) or ``UTF-8`` (``LC_CTYPE``-only locale) as"
" an alternative to the legacy ``ASCII``-based ``C`` locale."
msgstr ""
"为了完整的 Unicode 支持，包括在扩展模块之内，\\*nix 平台现在至少应当提供 ``C.UTF-8`` (完整区域), ``C.utf8`` "
"(完整区域) 或 ``UTF-8`` (``LC_CTYPE`` 专属区域) 中的一个作为基于 ``ASCII`` 的传统 ``C`` 区域的替代。"

#: ../../whatsnew/3.7.rst:2128
msgid ""
"OpenSSL 0.9.8 and 1.0.1 are no longer supported, which means building "
"CPython 3.7 with SSL/TLS support on older platforms still using these "
"versions requires custom build options that link to a more recent version of"
" OpenSSL."
msgstr ""
"OpenSSL 0.9.8 和 1.0.1 已不再受支持，这意味着在仍然使用这些版本的旧平台上构建带有 SSL/TLS 支持的 CPython 3.7 "
"时，需要自定义构建选项以链接到更新的 OpenSSL 版本。"

#: ../../whatsnew/3.7.rst:2132
msgid ""
"Notably, this issue affects the Debian 8 (aka \"jessie\") and Ubuntu 14.04 "
"(aka \"Trusty\") LTS Linux distributions, as they still use OpenSSL 1.0.1 by"
" default."
msgstr ""
"注意，此问题会影响到 Debian 8 (代号“jessie”) 和 Ubuntu 14.04 (代号“Trusty”) 等长期支持 Linux "
"发行版，因为它们默认仍然使用 OpenSSL 1.0.1。"

#: ../../whatsnew/3.7.rst:2136
msgid ""
"Debian 9 (\"stretch\") and Ubuntu 16.04 (\"xenial\"), as well as recent "
"releases of other LTS Linux releases (e.g. RHEL/CentOS 7.5, SLES 12-SP3), "
"use OpenSSL 1.0.2 or later, and remain supported in the default build "
"configuration."
msgstr ""
"Debian 9 (“stretch”) 和 Ubuntu 16.04 (“xenial”) 以及其他最新的长期支持 Linux 发行版 (例如 "
"RHEL/CentOS 7.5, SLES 12-SP3) 都使用 OpenSSL 1.0.2 或更新的版本，因此继续在默认的构建配置中受到支持。"

#: ../../whatsnew/3.7.rst:2140
msgid ""
"CPython's own `CI configuration file "
"<https://github.com/python/cpython/blob/v3.7.13/.travis.yml>`_ provides an "
"example of using the SSL :source:`compatibility testing infrastructure "
"<Tools/ssl/multissltests.py>` in CPython's test suite to build and link "
"against OpenSSL 1.1.0 rather than an outdated system provided OpenSSL."
msgstr ""
"CPython 自己的 `CI 配置文件 "
"<https://github.com/python/cpython/blob/v3.7.13/.travis.yml>`_ 提供了一个使用 "
"CPython 测试套件中的 SSL :source:`兼容性测试架构 <Tools/ssl/multissltests.py>` 基于 OpenSSL"
" 1.1.0 而非系统所提供的过时 OpenSSL 进行构建和链接的例子。"

#: ../../whatsnew/3.7.rst:2149
msgid "API and Feature Removals"
msgstr "API 与特性的移除"

#: ../../whatsnew/3.7.rst:2151
msgid "The following features and APIs have been removed from Python 3.7:"
msgstr "下列特性与 API 已从 Python 3.7 中移除:"

#: ../../whatsnew/3.7.rst:2153
msgid ""
"The ``os.stat_float_times()`` function has been removed. It was introduced "
"in Python 2.3 for backward compatibility with Python 2.2, and was deprecated"
" since Python 3.1."
msgstr ""
"``os.stat_float_times()`` 函数已被移除。 它在 Python 2.3 中被引入用于向下兼容 Python 2.2，并自 "
"Python 3.1 起就已弃用。"

#: ../../whatsnew/3.7.rst:2157
msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter in replacement "
"templates for :func:`re.sub` were deprecated in Python 3.5, and will now "
"cause an error."
msgstr ""
"在 :func:`re.sub` 的替换模块中由 ``'\\'`` 与一个 ASCII 字母构成的未知转义在 Python 3.5 "
"中已弃用，现在将会引发错误。"

#: ../../whatsnew/3.7.rst:2161
msgid ""
"Removed support of the *exclude* argument in :meth:`tarfile.TarFile.add`. It"
" was deprecated in Python 2.7 and 3.2.  Use the *filter* argument instead."
msgstr ""
"在 :meth:`tarfile.TarFile.add` 中移除了对 *exclude* 参数的支持。 它在 Python 2.7 和 3.2 "
"中已弃用。 请改用 *filter* 参数。"

#: ../../whatsnew/3.7.rst:2164
msgid ""
"The :func:`!ntpath.splitunc` function was deprecated in Python 3.1, and has "
"now been removed.  Use :func:`~os.path.splitdrive` instead."
msgstr ""
":func:`!ntpath.splitunc` 函数在 Python 3.1 中被弃用，现在已被移除。 请改用 "
":func:`~os.path.splitdrive`。"

#: ../../whatsnew/3.7.rst:2168
msgid ""
":func:`collections.namedtuple` no longer supports the *verbose* parameter or"
" ``_source`` attribute which showed the generated source code for the named "
"tuple class.  This was part of an optimization designed to speed-up class "
"creation.  (Contributed by Jelle Zijlstra with further improvements by INADA"
" Naoki, Serhiy Storchaka, and Raymond Hettinger in :issue:`28638`.)"
msgstr ""
":func:`collections.namedtuple` 不再支持 *verbose* 形参或 ``_source`` "
"属性，该属性会显示为具名元组类所生成的源代码。 这是加速类创建的设计优化的一部分。 （由 Jelle Zijlstra 在 :issue:`28638`"
" 中贡献，进一步的改进由 INADA Naoki, Serhiy Storchaka 和 Raymond Hettinger 贡献。）"

#: ../../whatsnew/3.7.rst:2174
msgid ""
"Functions :func:`bool`, :func:`float`, :func:`list` and :func:`tuple` no "
"longer take keyword arguments.  The first argument of :func:`int` can now be"
" passed only as positional argument."
msgstr ""
"函数 :func:`bool`, :func:`float`, :func:`list` 和 :func:`tuple` 不再接受关键字参数。 "
":func:`int` 的第一个参数现在只能作为位置参数传入。"

#: ../../whatsnew/3.7.rst:2178
msgid ""
"Removed previously deprecated in Python 2.4 classes ``Plist``, ``Dict`` and "
"``_InternalDict`` in the :mod:`plistlib` module.  Dict values in the result "
"of functions :func:`!readPlist` and :func:`!readPlistFromBytes` are now "
"normal dicts.  You no longer can use attribute access to access items of "
"these dictionaries."
msgstr ""

#: ../../whatsnew/3.7.rst:2184
msgid ""
"The ``asyncio.windows_utils.socketpair()`` function has been removed.  Use "
"the :func:`socket.socketpair` function instead, it is available on all "
"platforms since Python 3.5. ``asyncio.windows_utils.socketpair`` was just an"
" alias to ``socket.socketpair`` on Python 3.5 and newer."
msgstr ""
"``asyncio.windows_utils.socketpair()`` 函数已被移除。 请改用 :func:`socket.socketpair`"
" 函数，它自 Python 3.5 起就在所有平台上可用。 ``asyncio.windows_utils.socketpair`` 在 Python "
"3.5 及更新版本上只是 ``socket.socketpair`` 的别名。"

#: ../../whatsnew/3.7.rst:2190
msgid ""
":mod:`asyncio` no longer exports the :mod:`selectors` and "
":mod:`!_overlapped` modules as ``asyncio.selectors`` and "
"``asyncio._overlapped``. Replace ``from asyncio import selectors`` with "
"``import selectors``."
msgstr ""
":mod:`asyncio` 不再将 :mod:`selectors` 和 :mod:`!_overlapped` 模块导出为 "
"``asyncio.selectors`` 和 ``asyncio._overlapped``。 请将 ``from asyncio import "
"selectors`` 替换为 ``import selectors``。"

#: ../../whatsnew/3.7.rst:2195
msgid ""
"Direct instantiation of :class:`ssl.SSLSocket` and :class:`ssl.SSLObject` "
"objects is now prohibited. The constructors were never documented, tested, "
"or designed as public constructors.  Users were supposed to use "
":func:`!ssl.wrap_socket` or :class:`ssl.SSLContext`. (Contributed by "
"Christian Heimes in :issue:`32951`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2201
msgid ""
"The unused ``distutils`` ``install_misc`` command has been removed. "
"(Contributed by Eric N. Vander Weele in :issue:`29218`.)"
msgstr ""
"未被使用的 ``distutils`` ``install_misc`` 命令已被移除。 （由 Eric N. Vander Weele 在 "
":issue:`29218` 中贡献。）"

#: ../../whatsnew/3.7.rst:2206
msgid "Module Removals"
msgstr "移除的模块"

#: ../../whatsnew/3.7.rst:2208
msgid ""
"The ``fpectl`` module has been removed.  It was never enabled by default, "
"never worked correctly on x86-64, and it changed the Python ABI in ways that"
" caused unexpected breakage of C extensions. (Contributed by Nathaniel J. "
"Smith in :issue:`29137`.)"
msgstr ""
"``fpectl`` 模块已被移除。 它从未被默认启用，从未在 x86-64 上正确发挥效果，并且它对 Python ABI 的改变会导致 C "
"扩展的意外损坏。 （由 Nathaniel J. Smith 在 :issue:`29137` 中贡献。）"

#: ../../whatsnew/3.7.rst:2215 ../../whatsnew/3.7.rst:2494
msgid "Windows-only Changes"
msgstr "Windows 专属的改变"

#: ../../whatsnew/3.7.rst:2217
msgid ""
"The python launcher, (py.exe), can accept 32 & 64 bit specifiers **without**"
" having to specify a minor version as well. So ``py -3-32`` and ``py -3-64``"
" become valid as well as ``py -3.7-32``, also the -*m*-64 and -*m.n*-64 "
"forms are now accepted to force 64 bit python even if 32 bit would have "
"otherwise been used. If the specified version is not available py.exe will "
"error exit. (Contributed by Steve Barnes in :issue:`30291`.)"
msgstr ""
"Python 启动器（py.exe）可以接受 32 位或 64 位标记而 **不必** 同时指定一个小版本。 因此 ``py -3-32`` 和 "
"``py -3-64`` 与 ``py -3.7-32`` 均为有效，并且现在还接受 -*m*-64 和 -*m.n*-64 来强制使用 64 位 "
"python 命令，即使是本应使用 32 位的时候。 如果指定版本不可用则 py.exe 将报错退出。 （由 Steve Barnes 在 "
":issue:`30291` 中贡献。）"

#: ../../whatsnew/3.7.rst:2224
msgid ""
"The launcher can be run as ``py -0`` to produce a list of the installed "
"pythons, *with default marked with an asterisk*. Running ``py -0p`` will "
"include the paths. If py is run with a version specifier that cannot be "
"matched it will also print the *short form* list of available specifiers. "
"(Contributed by Steve Barnes in :issue:`30362`.)"
msgstr ""
"启动器可以运行 ``py -0`` 来列出已安装的所有 python，*默认版本会以星号标出*。 运行 ``py -0p`` 将同时列出相应的路径。 "
"如果运行 py 时指定了无法匹配的版本，它将显示 *简短形式* 的可用版本列表。 （由 Steve Barnes 在 :issue:`30362` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:2234
msgid "Porting to Python 3.7"
msgstr "移植到 Python 3.7"

#: ../../whatsnew/3.7.rst:2236
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.7.rst:2241
msgid "Changes in Python Behavior"
msgstr "Python 行为的更改"

#: ../../whatsnew/3.7.rst:2243
msgid ""
":keyword:`async` and :keyword:`await` names are now reserved keywords. Code "
"using these names as identifiers will now raise a :exc:`SyntaxError`. "
"(Contributed by Jelle Zijlstra in :issue:`30406`.)"
msgstr ""
":keyword:`async` 和 :keyword:`await` 现在是保留关键字。 使用了这些名称作为标识符的代码现在将引发 "
":exc:`SyntaxError`。 （由 Jelle Zijlstra 在 :issue:`30406` 中贡献。）"

#: ../../whatsnew/3.7.rst:2247
msgid ""
":pep:`479` is enabled for all code in Python 3.7, meaning that "
":exc:`StopIteration` exceptions raised directly or indirectly in coroutines "
"and generators are transformed into :exc:`RuntimeError` exceptions. "
"(Contributed by Yury Selivanov in :issue:`32670`.)"
msgstr ""
":pep:`479` 在 Python 3.7 中对所有代码启用，在协程和生成器中直接或间接引发的 :exc:`StopIteration` "
"异常会被转换为 :exc:`RuntimeError` 异常。 （由 Yury Selivanov 在 :issue:`32670` 中贡献。）"

#: ../../whatsnew/3.7.rst:2253
msgid ""
":meth:`object.__aiter__` methods can no longer be declared as asynchronous."
"  (Contributed by Yury Selivanov in :issue:`31709`.)"
msgstr ""
":meth:`object.__aiter__` 方法不再能被声明为异步的。 （由 Yury Selivanov 在 :issue:`31709` "
"中贡献。）"

#: ../../whatsnew/3.7.rst:2256
msgid ""
"Due to an oversight, earlier Python versions erroneously accepted the "
"following syntax::"
msgstr "由于一个疏忽，之前的 Python 版本会错误地接受以下语法::"

#: ../../whatsnew/3.7.rst:2259
msgid ""
"f(1 for x in [1],)\n"
"\n"
"class C(1 for x in [1]):\n"
"    pass"
msgstr ""
"f(1 for x in [1],)\n"
"\n"
"class C(1 for x in [1]):\n"
"    pass"

#: ../../whatsnew/3.7.rst:2264
msgid ""
"Python 3.7 now correctly raises a :exc:`SyntaxError`, as a generator "
"expression always needs to be directly inside a set of parentheses and "
"cannot have a comma on either side, and the duplication of the parentheses "
"can be omitted only on calls. (Contributed by Serhiy Storchaka in "
":issue:`32012` and :issue:`32023`.)"
msgstr ""
"现在 Python 3.7 会正确地引发 :exc:`SyntaxError`，因为生成器表达式总是必须直接包含于一对括号之内， "
"且前后都不能有逗号，仅在调用时可以忽略重复的括号。 （由 Serhiy Storchaka 在 :issue:`32012` 和 "
":issue:`32023` 中贡献。）"

#: ../../whatsnew/3.7.rst:2270
msgid ""
"When using the :option:`-m` switch, the initial working directory is now "
"added to :data:`sys.path`, rather than an empty string (which dynamically "
"denoted the current working directory at the time of each import). Any "
"programs that are checking for the empty string, or otherwise relying on the"
" previous behaviour, will need to be updated accordingly (e.g. by also "
"checking for ``os.getcwd()`` or ``os.path.dirname(__main__.__file__)``, "
"depending on why the code was checking for the empty string in the first "
"place)."
msgstr ""
"现在当使用 :option:`-m` 开关时，会将初始工作目录添加到 "
":data:`sys.path`，而不再是一个空字符串（即在每次导入时动态地指明当前工作目录）。 "
"任何会检测该空字符串，或是以其他方式依赖之前行为的的程序将需要进行相应的更新（例如改为还要检测 ``os.getcwd()`` 或 "
"``os.path.dirname(__main__.__file__)``，具体做法首先要取决于为何要对代码执行空字符串检测）。"

#: ../../whatsnew/3.7.rst:2280
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.7.rst:2282
msgid ""
":meth:`socketserver.ThreadingMixIn.server_close "
"<socketserver.BaseServer.server_close>` now waits until all non-daemon "
"threads complete.  Set the new "
":attr:`socketserver.ThreadingMixIn.block_on_close` class attribute to "
"``False`` to get the pre-3.7 behaviour. (Contributed by Victor Stinner in "
":issue:`31233` and :issue:`33540`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2289
msgid ""
":meth:`socketserver.ForkingMixIn.server_close "
"<socketserver.BaseServer.server_close>` now waits until all child processes "
"complete. Set the new :attr:`socketserver.ForkingMixIn.block_on_close "
"<socketserver.ThreadingMixIn.block_on_close>` class attribute to ``False`` "
"to get the pre-3.7 behaviour. (Contributed by Victor Stinner in "
":issue:`31151` and :issue:`33540`.)"
msgstr ""

#: ../../whatsnew/3.7.rst:2297
msgid ""
"The :func:`locale.localeconv` function now temporarily sets the ``LC_CTYPE``"
" locale to the value of ``LC_NUMERIC`` in some cases. (Contributed by Victor"
" Stinner in :issue:`31900`.)"
msgstr ""
"某些情况下 :func:`locale.localeconv` 函数现在会临时将 ``LC_CTYPE`` 区域设置为 ``LC_NUMERIC`` "
"的值。 （由 Victor Stinner 在 :issue:`31900` 中贡献。）"

#: ../../whatsnew/3.7.rst:2301
msgid ""
":meth:`pkgutil.walk_packages` now raises a :exc:`ValueError` if *path* is a "
"string.  Previously an empty list was returned. (Contributed by Sanyam "
"Khurana in :issue:`24744`.)"
msgstr ""
"如果 *path* 为字符串 :meth:`pkgutil.walk_packages` 现在会引发 :exc:`ValueError`。 "
"之前则是返回一个空列表。 （由 Sanyam Khurana 在 :issue:`24744` 中贡献。）"

#: ../../whatsnew/3.7.rst:2305
msgid ""
"A format string argument for :meth:`string.Formatter.format` is now "
":ref:`positional-only <positional-only_parameter>`. Passing it as a keyword "
"argument was deprecated in Python 3.5. (Contributed by Serhiy Storchaka in "
":issue:`29193`.)"
msgstr ""
":meth:`string.Formatter.format` 的格式字符串参数现在为 :ref:`仅限位置 <positional-"
"only_parameter>` 参数。 将其作为关键字参数传入的方式自 Python 3.5 起已弃用。 （由 Serhiy Storchaka 在 "
":issue:`29193` 中贡献。）"

#: ../../whatsnew/3.7.rst:2310
msgid ""
"Attributes :attr:`~http.cookies.Morsel.key`, "
":attr:`~http.cookies.Morsel.value` and "
":attr:`~http.cookies.Morsel.coded_value` of class "
":class:`http.cookies.Morsel` are now read-only. Assigning to them was "
"deprecated in Python 3.5. Use the :meth:`~http.cookies.Morsel.set` method "
"for setting them. (Contributed by Serhiy Storchaka in :issue:`29192`.)"
msgstr ""
"类 :class:`http.cookies.Morsel` 的属性 :attr:`~http.cookies.Morsel.key`, "
":attr:`~http.cookies.Morsel.value` 和 "
":attr:`~http.cookies.Morsel.coded_value` 现在均为只读。 对其赋值的操作自 Python 3.5 起已弃用。 "
"要设置它们的值请使用 :meth:`~http.cookies.Morsel.set` 方法。 （由 Serhiy Storchaka 在 "
":issue:`29192` 中贡献。）"

#: ../../whatsnew/3.7.rst:2318
msgid ""
"The *mode* argument of :func:`os.makedirs` no longer affects the file "
"permission bits of newly created intermediate-level directories. To set "
"their file permission bits you can set the umask before invoking "
"``makedirs()``. (Contributed by Serhiy Storchaka in :issue:`19930`.)"
msgstr ""
":func:`os.makedirs` 的 *mode* 参数不会再影响新建中间层级目录的权限位。 要设置它们的文件权限你可以在唤起 "
"``makedirs()`` 之前设置 umask。 （由 Serhiy Storchaka 在 :issue:`19930` 中贡献。）"

#: ../../whatsnew/3.7.rst:2324
msgid ""
"The :attr:`struct.Struct.format` type is now :class:`str` instead of "
":class:`bytes`. (Contributed by Victor Stinner in :issue:`21071`.)"
msgstr ""
":attr:`struct.Struct.format` 的类型现在是 :class:`str` 而非 :class:`bytes`。 （由 "
"Victor Stinner 在 :issue:`21071` 中贡献。）"

#: ../../whatsnew/3.7.rst:2327
msgid ""
":func:`!cgi.parse_multipart` now accepts the *encoding* and *errors* "
"arguments and returns the same results as :class:`!FieldStorage`: for non-"
"file fields, the value associated to a key is a list of strings, not bytes. "
"(Contributed by Pierre Quentel in :issue:`29979`.)"
msgstr ""
"现在 :func:`!cgi.parse_multipart` 接受 *encoding* 和 *errors* 参数并返回与 "
":class:`!FieldStorage` 相同的结果：对于非文件字段，与键相关联的值是一个字符串列表，而非字节串列表。 （由 Pierre "
"Quentel 在 :issue:`29979` 中贡献。）"

#: ../../whatsnew/3.7.rst:2333
msgid ""
"Due to internal changes in :mod:`socket`, calling :func:`socket.fromshare` "
"on a socket created by :func:`socket.share <socket.socket.share>` in older "
"Python versions is not supported."
msgstr ""
"由于 :mod:`socket` 中的内部更改，在由旧版 Python 中的 :func:`socket.share "
"<socket.socket.share>` 所创建的套接字上调用 :func:`socket.fromshare` 已不受支持。"

#: ../../whatsnew/3.7.rst:2337
msgid ""
"``repr`` for :exc:`BaseException` has changed to not include the trailing "
"comma.  Most exceptions are affected by this change. (Contributed by Serhiy "
"Storchaka in :issue:`30399`.)"
msgstr ""
":exc:`BaseException` 的 ``repr`` 已更改为不包含末尾的逗号。 大多数异常都会受此更改影响。 （由 Serhiy "
"Storchaka 在 :issue:`30399` 中贡献。）"

#: ../../whatsnew/3.7.rst:2341
msgid ""
"``repr`` for :class:`datetime.timedelta` has changed to include the keyword "
"arguments in the output. (Contributed by Utkarsh Upadhyay in "
":issue:`30302`.)"
msgstr ""
":class:`datetime.timedelta` 的 ``repr`` 已更改为在输出中包含关键字参数。 （由 Utkarsh Upadhyay "
"在 :issue:`30302` 中贡献。）"

#: ../../whatsnew/3.7.rst:2344
msgid ""
"Because :func:`shutil.rmtree` is now implemented using the "
":func:`os.scandir` function, the user specified handler *onerror* is now "
"called with the first argument ``os.scandir`` instead of ``os.listdir`` when"
" listing the directory is failed."
msgstr ""
"因为 :func:`shutil.rmtree` 现在是使用 :func:`os.scandir` 函数实现的，用户指定的句柄 *onerror* "
"现在被调用时如果列目录失败会附带第一个参数 ``os.scandir`` 而不是 ``os.listdir``。"

#: ../../whatsnew/3.7.rst:2349
msgid ""
"Support for nested sets and set operations in regular expressions as in "
"`Unicode Technical Standard #18`_ might be added in the future.  This would "
"change the syntax.  To facilitate this future change a :exc:`FutureWarning` "
"will be raised in ambiguous cases for the time being. That include sets "
"starting with a literal ``'['`` or containing literal character sequences "
"``'--'``, ``'&&'``, ``'~~'``, and ``'||'``.  To avoid a warning, escape them"
" with a backslash. (Contributed by Serhiy Storchaka in :issue:`30349`.)"
msgstr ""
"未来可能加入在正则表达式中对 `Unicode 技术标准 #18`_ 中嵌套集合与集合操作的支持。 这会改变现有语法。 "
"为了推动这项未来的改变，目前在有歧义的情况下会引发 :exc:`FutureWarning`。 这包括以字面值 ``'['`` 开头或包含字面值字符序列"
" ``'--'``, ``'&&'``, ``'~~'`` 以及 ``'||'``  的集合。 要避免警告，请用反斜杠对其进行转义。 （由 Serhiy"
" Storchaka 在 :issue:`30349` 中贡献。）"

#: ../../whatsnew/3.7.rst:2360
msgid ""
"The result of splitting a string on a :mod:`regular expression <re>` that "
"could match an empty string has been changed.  For example splitting on "
"``r'\\s*'`` will now split not only on whitespaces as it did previously, but"
" also on empty strings before all non-whitespace characters and just before "
"the end of the string. The previous behavior can be restored by changing the"
" pattern to ``r'\\s+'``.  A :exc:`FutureWarning` was emitted for such "
"patterns since Python 3.5."
msgstr ""
"基于可以匹配空字符串的 :mod:`正则表达式 <re>` 对字符串进行拆分的结果已被更改。 例如基于 ``r'\\s*'`` "
"的拆分现在不仅会像原先那样拆分空格符，而且会拆分所有非空格字符之前和字符串结尾处的空字符串。 通过将模式修改为 ``r'\\s+'`` "
"可以恢复原先的行为。 自 Python 3.5 开始此类模式将会引发 :exc:`FutureWarning`。"

#: ../../whatsnew/3.7.rst:2369
msgid ""
"For patterns that match both empty and non-empty strings, the result of "
"searching for all matches may also be changed in other cases.  For example "
"in the string ``'a\\n\\n'``, the pattern ``r'(?m)^\\s*?$'`` will not only "
"match empty strings at positions 2 and 3, but also the string ``'\\n'`` at "
"positions 2--3.  To match only blank lines, the pattern should be rewritten "
"as ``r'(?m)^[^\\S\\n]*$'``."
msgstr ""
"对于同时匹配空字符串和非空字符串的模式，在其他情况下搜索所有匹配的结果也可能会被更改。 例如在字符串 ``'a\\n\\n'`` 中，模式 "
"``r'(?m)^\\s*?$'`` 将不仅会匹配位置 2 和 3 上的空字符串，还会匹配位置 2--3 上的字符串 ``'\\n'``。 "
"想要只匹配空行，模式应当改写为 ``r'(?m)^[^\\S\\n]*$'``。"

#: ../../whatsnew/3.7.rst:2376
msgid ""
":func:`re.sub` now replaces empty matches adjacent to a previous non-empty "
"match.  For example ``re.sub('x*', '-', 'abxd')`` returns now ``'-a-b--d-'``"
" instead of ``'-a-b-d-'`` (the first minus between 'b' and 'd' replaces 'x',"
" and the second minus replaces an empty string between 'x' and 'd')."
msgstr ""
"现在 :func:`re.sub` 会替换与前一个非空匹配相邻的空匹配。 例如 ``re.sub('x*', '-', 'abxd')`` 现在将返回 "
"``'-a-b--d-'`` 而不是 ``'-a-b-d-'`` ('b' 和 'd' 之间的第一个减号是替换 'x'，而第二个减号是替换 'x' 和 "
"'d' 之前的空字符串)。"

#: ../../whatsnew/3.7.rst:2382
msgid ""
"(Contributed by Serhiy Storchaka in :issue:`25054` and :issue:`32308`.)"
msgstr "（由 Serhiy Storchaka 在 :issue:`25054` 和 :issue:`32308` 中贡献。）"

#: ../../whatsnew/3.7.rst:2384
msgid ""
"Change :func:`re.escape` to only escape regex special characters instead of "
"escaping all characters other than ASCII letters, numbers, and ``'_'``. "
"(Contributed by Serhiy Storchaka in :issue:`29995`.)"
msgstr ""
":func:`re.escape` 更改为只转义正则表达式特殊字符，而不转义 ASCII 字母、数字和 ``'_'`` 以外的所有字符。 （由 "
"Serhiy Storchaka 在 :issue:`29995` 中贡献。）"

#: ../../whatsnew/3.7.rst:2388
msgid ""
":class:`tracemalloc.Traceback` frames are now sorted from oldest to most "
"recent to be more consistent with :mod:`traceback`. (Contributed by Jesse "
"Bakker in :issue:`32121`.)"
msgstr ""
":class:`tracemalloc.Traceback` 帧现在是按从最旧到最新排序，以便与 :mod:`traceback` 更为一致。 （由 "
"Jesse Bakker 在 :issue:`32121` 中贡献。）"

#: ../../whatsnew/3.7.rst:2392
msgid ""
"On OSes that support :const:`socket.SOCK_NONBLOCK` or "
":const:`socket.SOCK_CLOEXEC` bit flags, the :attr:`socket.type "
"<socket.socket.type>` no longer has them applied. Therefore, checks like "
"``if sock.type == socket.SOCK_STREAM`` work as expected on all platforms. "
"(Contributed by Yury Selivanov in :issue:`32331`.)"
msgstr ""
"在支持 :const:`socket.SOCK_NONBLOCK` 或 :const:`socket.SOCK_CLOEXEC` "
"标志位的操作系统上，:attr:`socket.type <socket.socket.type>` 不再应用它们。 因此，像 ``if "
"sock.type == socket.SOCK_STREAM`` 之类的检测会在所有平台上按预期的方式工作。 （由 Yury Selivanov 在 "
":issue:`32331` 中贡献。）"

#: ../../whatsnew/3.7.rst:2399
msgid ""
"On Windows the default for the *close_fds* argument of "
":class:`subprocess.Popen` was changed from :const:`False` to :const:`True` "
"when redirecting the standard handles. If you previously depended on handles"
" being inherited when using :class:`subprocess.Popen` with standard io "
"redirection, you will have to pass ``close_fds=False`` to preserve the "
"previous behaviour, or use :attr:`STARTUPINFO.lpAttributeList "
"<subprocess.STARTUPINFO.lpAttributeList>`."
msgstr ""
"在 Windows 上当重定向标准句柄时，:class:`subprocess.Popen` 的 *close_fds* 参数的默认值从 "
":const:`False` 更改为 :const:`True`。 如果你以前依赖于在使用带有标准 io 重定向的 "
":class:`subprocess.Popen` 时所继承的句柄，则必须传入 ``close_fds=False`` 以保留原先的行为，或是使用 "
":attr:`STARTUPINFO.lpAttributeList "
"<subprocess.STARTUPINFO.lpAttributeList>`。"

#: ../../whatsnew/3.7.rst:2407
msgid ""
":meth:`importlib.machinery.PathFinder.invalidate_caches` -- which implicitly"
" affects :func:`importlib.invalidate_caches` -- now deletes entries in "
":data:`sys.path_importer_cache` which are set to ``None``. (Contributed by "
"Brett Cannon in :issue:`33169`.)"
msgstr ""
":meth:`importlib.machinery.PathFinder.invalidate_caches` -- 此方法隐式地影响 "
":func:`importlib.invalidate_caches` -- 现在会删除 :data:`sys.path_importer_cache`"
" 中被设为 ``None`` 的条目。 （由 Brett Cannon 在 :issue:`33169` 中贡献。）"

#: ../../whatsnew/3.7.rst:2412
msgid ""
"In :mod:`asyncio`, :meth:`loop.sock_recv() <asyncio.loop.sock_recv>`, "
":meth:`loop.sock_sendall() <asyncio.loop.sock_sendall>`, "
":meth:`loop.sock_accept() <asyncio.loop.sock_accept>`, "
":meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>`, "
":meth:`loop.getnameinfo() <asyncio.loop.getnameinfo>` have been changed to "
"be proper coroutine methods to match their documentation.  Previously, these"
" methods returned :class:`asyncio.Future` instances. (Contributed by Yury "
"Selivanov in :issue:`32327`.)"
msgstr ""
"在 :mod:`asyncio` 中，:meth:`loop.sock_recv() <asyncio.loop.sock_recv>`, "
":meth:`loop.sock_sendall() <asyncio.loop.sock_sendall>`, "
":meth:`loop.sock_accept() <asyncio.loop.sock_accept>`, "
":meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>`, "
":meth:`loop.getnameinfo() <asyncio.loop.getnameinfo>` "
"已被更改为正确的协程方法以与培训五日文档相匹配。 之前，这些方法会返回 :class:`asyncio.Future` 实例。 （由 Yury "
"Selivanov 在 :issue:`32327` 中贡献。）"

#: ../../whatsnew/3.7.rst:2423
msgid ""
":attr:`asyncio.Server.sockets` now returns a copy of the internal list of "
"server sockets, instead of returning it directly. (Contributed by Yury "
"Selivanov in :issue:`32662`.)"
msgstr ""
":attr:`asyncio.Server.sockets` 现在会返回服务器套接字列表的副本，而不是直接地返回它。 （由 Yury Selivanov"
" 在 :issue:`32662` 中贡献。）"

#: ../../whatsnew/3.7.rst:2427
msgid ""
":attr:`Struct.format <struct.Struct.format>` is now a :class:`str` instance "
"instead of a :class:`bytes` instance. (Contributed by Victor Stinner in "
":issue:`21071`.)"
msgstr ""
":attr:`Struct.format <struct.Struct.format>` 现在是一个 :class:`str` 实例而非 "
":class:`bytes` 实例。 （由 Victor Stinner 在 :issue:`21071` 中贡献。）"

#: ../../whatsnew/3.7.rst:2431
msgid ""
":mod:`argparse` subparsers can now be made mandatory by passing "
"``required=True`` to :meth:`ArgumentParser.add_subparsers() "
"<argparse.ArgumentParser.add_subparsers>`. (Contributed by Anthony Sottile "
"in :issue:`26510`.)"
msgstr ""
"现在可以通过将 ``required=True`` 传给 :meth:`ArgumentParser.add_subparsers() "
"<argparse.ArgumentParser.add_subparsers>` 使得 :mod:`argparse` 子解析器成为必需的。 （由 "
"Anthony Sottile 在 :issue:`26510` 中贡献。）"

#: ../../whatsnew/3.7.rst:2435
msgid ""
":meth:`ast.literal_eval` is now stricter.  Addition and subtraction of "
"arbitrary numbers are no longer allowed. (Contributed by Serhiy Storchaka in"
" :issue:`31778`.)"
msgstr ""
":meth:`ast.literal_eval` 现在变得更为严格。 任意地加减数字已不再被允许。 （由 Serhiy Storchaka 在 "
":issue:`31778` 中贡献。）"

#: ../../whatsnew/3.7.rst:2439
msgid ""
":meth:`Calendar.itermonthdates <calendar.Calendar.itermonthdates>` will now "
"consistently raise an exception when a date falls outside of the "
"``0001-01-01`` through ``9999-12-31`` range.  To support applications that "
"cannot tolerate such exceptions, the new :meth:`Calendar.itermonthdays3 "
"<calendar.Calendar.itermonthdays3>` and :meth:`Calendar.itermonthdays4 "
"<calendar.Calendar.itermonthdays4>` can be used. The new methods return "
"tuples and are not restricted by the range supported by "
":class:`datetime.date`. (Contributed by Alexander Belopolsky in "
":issue:`28292`.)"
msgstr ""
"当一个日期超出 ``0001-01-01`` 到 ``9999-12-31`` 范围时 :meth:`Calendar.itermonthdates "
"<calendar.Calendar.itermonthdates>` 现在将始终如一地引发异常，以便支持不能容忍此类异常的应用程序，可以使用新增的 "
":meth:`Calendar.itermonthdays3 <calendar.Calendar.itermonthdays3>` 和 "
":meth:`Calendar.itermonthdays4 <calendar.Calendar.itermonthdays4>`。 "
"这些新方法返回元组，并且其不受 :class:`datetime.date` 所支持的范围限制。 （由 Alexander Belopolsky 在 "
":issue:`28292` 中贡献。）"

#: ../../whatsnew/3.7.rst:2449
msgid ""
":class:`collections.ChainMap` now preserves the order of the underlying "
"mappings.  (Contributed by Raymond Hettinger in :issue:`32792`.)"
msgstr ""
":class:`collections.ChainMap` 现在会保留底层映射的顺序。 （由 Raymond Hettinger 在 "
":issue:`32792` 中贡献。）"

#: ../../whatsnew/3.7.rst:2452
msgid ""
"The ``submit()`` method of :class:`concurrent.futures.ThreadPoolExecutor` "
"and :class:`concurrent.futures.ProcessPoolExecutor` now raises a "
":exc:`RuntimeError` if called during interpreter shutdown. (Contributed by "
"Mark Nemec in :issue:`33097`.)"
msgstr ""
"如果在解释器关闭期间被调用，:class:`concurrent.futures.ThreadPoolExecutor` 和 "
":class:`concurrent.futures.ProcessPoolExecutor` 的 ``submit()`` 方法现在会引发 "
":exc:`RuntimeError`。 （由 Mark Nemec 在 :issue:`33097` 中贡献。）"

#: ../../whatsnew/3.7.rst:2457
msgid ""
"The :class:`configparser.ConfigParser` constructor now uses ``read_dict()`` "
"to process the default values, making its behavior consistent with the rest "
"of the parser.  Non-string keys and values in the defaults dictionary are "
"now being implicitly converted to strings. (Contributed by James Tocknell in"
" :issue:`23835`.)"
msgstr ""
":class:`configparser.ConfigParser` 构造器现在使用 ``read_dict()`` "
"来处理默认值，以使其行为与解析器的其余部分保持致。 在默认字典中的非字符串键和值现在会被隐式地转换为字符串。 （由 James Tocknell 在 "
":issue:`23835` 中贡献。）"

#: ../../whatsnew/3.7.rst:2463
msgid ""
"Several undocumented internal imports were removed. One example is that "
"``os.errno`` is no longer available; use ``import errno`` directly instead. "
"Note that such undocumented internal imports may be removed any time without"
" notice, even in micro version releases."
msgstr ""
"一些未写入文档的内部导入已被移除。 一个例子是 ``os.errno`` 已不再可用；应改为直接使用 ``import errno``。 "
"请注意此类未写入文档的内部导入可能未经通知地随时被移除，甚至是在微版本号发行版中移除。"

#: ../../whatsnew/3.7.rst:2471
msgid "Changes in the C API"
msgstr "C API 的变化"

#: ../../whatsnew/3.7.rst:2473
msgid ""
"The function :c:func:`PySlice_GetIndicesEx` is considered unsafe for "
"resizable sequences.  If the slice indices are not instances of "
":class:`int`, but objects that implement the :meth:`!__index__` method, the "
"sequence can be resized after passing its length to "
":c:func:`!PySlice_GetIndicesEx`.  This can lead to returning indices out of "
"the length of the sequence.  For avoiding possible problems use new "
"functions :c:func:`PySlice_Unpack` and :c:func:`PySlice_AdjustIndices`. "
"(Contributed by Serhiy Storchaka in :issue:`27867`.)"
msgstr ""
"函数 :c:func:`PySlice_GetIndicesEx` 被认为对于大小可变的序列来说并不安全。 如果切片索引不是 :class:`int` "
"的实例，而是实现了 :meth:`!__index__` 方法的对象，则序列可以在其长度被传给 "
":c:func:`!PySlice_GetIndicesEx` 之后调整大小。 这可能导致返回超出序列长度的索引号。 "
"为了避免可能的问题，请使用新增的函数 :c:func:`PySlice_Unpack` 和 "
":c:func:`PySlice_AdjustIndices`。 （由 Serhiy Storchaka 在 :issue:`27867` 中贡献。）"

#: ../../whatsnew/3.7.rst:2484
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.7.rst:2486
msgid ""
"There are two new opcodes: :opcode:`LOAD_METHOD` and :opcode:`!CALL_METHOD`."
" (Contributed by Yury Selivanov and INADA Naoki in :issue:`26110`.)"
msgstr ""
"新增两个操作码: :opcode:`LOAD_METHOD` 和 :opcode:`!CALL_METHOD`。 （由 Yury Selivanov 和"
" INADA Naoki 在 :issue:`26110` 中贡献。）"

#: ../../whatsnew/3.7.rst:2489
msgid ""
"The :opcode:`!STORE_ANNOTATION` opcode has been removed. (Contributed by "
"Mark Shannon in :issue:`32550`.)"
msgstr ""
":opcode:`!STORE_ANNOTATION` 操作码已被移除。 （由 Mark Shannon 在 :issue:`32550` 中贡献。）"

#: ../../whatsnew/3.7.rst:2496
msgid ""
"The file used to override :data:`sys.path` is now called ``<python-"
"executable>._pth`` instead of ``'sys.path'``. See "
":ref:`windows_finding_modules` for more information. (Contributed by Steve "
"Dower in :issue:`28137`.)"
msgstr ""
"用于覆盖 :data:`sys.path` 的文件现在被命名为 ``<python-executable>._pth`` 而不是 "
"``'sys.path'``。 请参阅 :ref:`windows_finding_modules` 了解更多信息。 （由 Steve Dower 在 "
":issue:`28137` 中贡献。）"

#: ../../whatsnew/3.7.rst:2503
msgid "Other CPython implementation changes"
msgstr "其他 CPython 实现的改变"

#: ../../whatsnew/3.7.rst:2505
msgid ""
"In preparation for potential future changes to the public CPython runtime "
"initialization API (see :pep:`432` for an initial, but somewhat outdated, "
"draft), CPython's internal startup and configuration management logic has "
"been significantly refactored. While these updates are intended to be "
"entirely transparent to both embedding applications and users of the regular"
" CPython CLI, they're being mentioned here as the refactoring changes the "
"internal order of various operations during interpreter startup, and hence "
"may uncover previously latent defects, either in embedding applications, or "
"in CPython itself. (Initially contributed by Nick Coghlan and Eric Snow as "
"part of :issue:`22257`, and further updated by Nick, Eric, and Victor "
"Stinner in a number of other issues). Some known details affected:"
msgstr ""
"为了准备在未来对公开的 CPython 运行时初始化 API 进行潜在更改（请参阅 :pep:`432` 获取最初但略为过时的文稿），CPython "
"内部的启动和配置管理逻辑已经过大幅重构。 虽然这些更新旨在对嵌入式应用程序和常规的 CPython CLI "
"用户都完全透明，但它们在这里被提及是因为重构会改变解释器启动期间许多操作的内部顺序，因此可能提示出原先隐藏的缺陷，这可能存在于嵌入式应用程序中，或是在 "
"CPython 自身内部。 （最初由 Nick Coghlan 和 Eric Snow 作为 :issue:`22257` 的一部分贡献，并由 "
"Nick, Eric 和 Victor Stinner 在一系列其他问题报告中进一步更新）。 已知会受到影响的一些细节："

#: ../../whatsnew/3.7.rst:2518
msgid ""
":c:func:`!PySys_AddWarnOptionUnicode` is not currently usable by embedding "
"applications due to the requirement to create a Unicode object prior to "
"calling ``Py_Initialize``. Use :c:func:`!PySys_AddWarnOption` instead."
msgstr ""
"目前 :c:func:`!PySys_AddWarnOptionUnicode` 对嵌入式应用程序不可用，因为在调用 ``Py_Initialize``"
" 之前需要创建一个 Unicode 对象。 请改用 :c:func:`!PySys_AddWarnOption`。"

#: ../../whatsnew/3.7.rst:2522
msgid ""
"warnings filters added by an embedding application with "
":c:func:`!PySys_AddWarnOption` should now more consistently take precedence "
"over the default filters set by the interpreter"
msgstr ""
"嵌入式应用程序通过 :c:func:`!PySys_AddWarnOption` 添加的警告过滤器现在应当以更高的一致性优先于由解释器所设置的过滤器"

#: ../../whatsnew/3.7.rst:2526
msgid ""
"Due to changes in the way the default warnings filters are configured, "
"setting :c:data:`Py_BytesWarningFlag` to a value greater than one is no "
"longer sufficient to both emit :exc:`BytesWarning` messages and have them "
"converted to exceptions.  Instead, the flag must be set (to cause the "
"warnings to be emitted in the first place), and an explicit "
"``error::BytesWarning`` warnings filter added to convert them to exceptions."
msgstr ""
"由于默认警告过滤器的配置方式发生了变化，将 :c:data:`Py_BytesWarningFlag` 设置为大于一的值不再足以在发出 "
":exc:`BytesWarning` 消息的同时将其转换为异常。 而是改为必须设置旗标（以便首先发出警告），以及添加显式的 "
"``error::BytesWarning`` 警告过滤器来将其转换为异常。"

#: ../../whatsnew/3.7.rst:2533
msgid ""
"Due to a change in the way docstrings are handled by the compiler, the "
"implicit ``return None`` in a function body consisting solely of a docstring"
" is now marked as occurring on the same line as the docstring, not on the "
"function's header line."
msgstr ""
"由于编译器处理文档字符串的方式发生了变化，一个仅由文档字符串构成的函数体中隐式的 ``return None`` "
"现在被标记为在与文档字符串相同的行，而不是在函数的标题行。"

#: ../../whatsnew/3.7.rst:2538
msgid ""
"The current exception state has been moved from the frame object to the co-"
"routine. This simplified the interpreter and fixed a couple of obscure bugs "
"caused by having swap exception state when entering or exiting a generator. "
"(Contributed by Mark Shannon in :issue:`25612`.)"
msgstr ""
"当前异常状态已从帧对象移到协程对象。 这会简化解释器并修正由于在进入或退出生成器时具有交换异常状态而导致的一些模糊错误。 （由 Mark Shannon"
" 在 :issue:`25612` 中贡献。）"

#: ../../whatsnew/3.7.rst:2544
msgid "Notable changes in Python 3.7.1"
msgstr "Python 3.7.1 中的重要变化"

#: ../../whatsnew/3.7.rst:2546
msgid ""
"Starting in 3.7.1, :c:func:`Py_Initialize` now consistently reads and "
"respects all of the same environment settings as :c:func:`Py_Main` (in "
"earlier Python versions, it respected an ill-defined subset of those "
"environment variables, while in Python 3.7.0 it didn't read any of them due "
"to :issue:`34247`). If this behavior is unwanted, set "
":c:data:`Py_IgnoreEnvironmentFlag` to 1 before calling "
":c:func:`Py_Initialize`."
msgstr ""
"从 3.7.1 开始，:c:func:`Py_Initialize` 现在始终会读取并遵循与 :c:func:`Py_Main` "
"相同的环境设置（在更早的 Python 版本中，它会遵循一个错误定义的环境变量子集，而在 Python 3.7.0 中则会由于 "
":issue:`34247` 而完全不读取它们）。 如果不想要此行为，请在调用 :c:func:`Py_Initialize` 之前将 "
":c:data:`Py_IgnoreEnvironmentFlag` 设为 1。"

#: ../../whatsnew/3.7.rst:2553
msgid ""
"In 3.7.1 the C API for Context Variables :ref:`was updated "
"<contextvarsobjects_pointertype_change>` to use :c:type:`PyObject` pointers."
"  See also :issue:`34762`."
msgstr ""
"在 3.7.1 中，上下文变量的 C API 已 :ref:`获得更新 <contextvarsobjects_pointertype_change>`"
" 以使用 :c:type:`PyObject` 指针。 另请参阅 :issue:`34762`。"

#: ../../whatsnew/3.7.rst:2557
msgid ""
"In 3.7.1 the :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token"
" when provided with input that does not have a trailing new line.  This "
"behavior now matches what the C tokenizer does internally. (Contributed by "
"Ammar Askar in :issue:`33899`.)"
msgstr ""
"在 3.7.1 中，当提供不带末尾新行的输入时 :mod:`tokenize` 模块现在会隐式地添加 ``NEWLINE`` 形符。 此行为现在已与 C"
" 词法分析器的内部行为相匹配。 （由 Ammar Askar 在 :issue:`33899` 中贡献。）"

#: ../../whatsnew/3.7.rst:2563
msgid "Notable changes in Python 3.7.2"
msgstr "Python 3.7.2 中的重要变化"

#: ../../whatsnew/3.7.rst:2565
msgid ""
"In 3.7.2, :mod:`venv` on Windows no longer copies the original binaries, but"
" creates redirector scripts named ``python.exe`` and ``pythonw.exe`` "
"instead. This resolves a long standing issue where all virtual environments "
"would have to be upgraded or recreated with each Python update. However, "
"note that this release will still require recreation of virtual environments"
" in order to get the new scripts."
msgstr ""
"在 3.7.2 中，Windows 下的 :mod:`venv` 不再复制原来的二进制文件，而是改为创建名为 ``python.exe`` 和 "
"``pythonw.exe`` 的重定向脚本。 这解决了一个长期存在的问题，即所有虚拟环境在每次 Python 升级后都必须进行升级或是重新创建。 "
"然而，要注意此发布版仍然要求重新创建虚拟环境以获得新的脚本。"

#: ../../whatsnew/3.7.rst:2573
msgid "Notable changes in Python 3.7.6"
msgstr "Python 3.7.6 中的重要变化"

#: ../../whatsnew/3.7.rst:2575
msgid ""
"Due to significant security concerns, the *reuse_address* parameter of "
":meth:`asyncio.loop.create_datagram_endpoint` is no longer supported. This "
"is because of the behavior of the socket option ``SO_REUSEADDR`` in UDP. For"
" more details, see the documentation for "
"``loop.create_datagram_endpoint()``. (Contributed by Kyle Stanley, Antoine "
"Pitrou, and Yury Selivanov in :issue:`37228`.)"
msgstr ""
"出于重要的安全性考量，:meth:`asyncio.loop.create_datagram_endpoint` 的 *reuse_address* "
"形参不再被支持。 这是由 UDP 中的套接字选项 ``SO_REUSEADDR`` 的行为导致的。 更多细节请参阅 "
"``loop.create_datagram_endpoint()`` 的文档。 （由 Kyle Stanley, Antoine Pitrou 和 "
"Yury Selivanov 在 :issue:`37228` 中贡献。。）"

#: ../../whatsnew/3.7.rst:2583
msgid "Notable changes in Python 3.7.10"
msgstr "Python 3.7.10 中的重要变化"

#: ../../whatsnew/3.7.rst:2585
msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and "
":func:`urllib.parse.parse_qsl`.  Due to security concerns, and to conform "
"with newer W3C recommendations, this has been changed to allow only a single"
" separator key, with ``&`` as the default.  This change also affects "
":func:`!cgi.parse` and :func:`!cgi.parse_multipart` as they use the affected"
" functions internally. For more details, please see their respective "
"documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin"
" in :issue:`42967`.)"
msgstr ""
"较早的 Python 版本允许同时使用 ``;`` 和 ``&`` 作为 :func:`urllib.parse.parse_qs` 和 "
":func:`urllib.parse.parse_qsl` 中查询形参的分隔符。 出于安全考虑，并遵循新版的 W3C "
"建议，这已被更改为只允许一种分隔符，默认为 ``&``。 这一改变也会影响 :func:`!cgi.parse` 和 "
":func:`!cgi.parse_multipart` 因为它们在内部使用了受影响的函数。 要了解更多细节，请参阅相应的文档。 （由 Adam "
"Goldschmidt, Senthil Kumaran 和 Ken Jin 在 :issue:`42967` 中贡献。）"

#: ../../whatsnew/3.7.rst:2596
msgid "Notable changes in Python 3.7.11"
msgstr "Python 3.7.11 中的重要变化"

#: ../../whatsnew/3.7.rst:2598
msgid ""
"A security fix alters the :class:`ftplib.FTP` behavior to not trust the IPv4"
" address sent from the remote server when setting up a passive data channel."
"  We reuse the ftp server IP address instead.  For unusual code requiring "
"the old behavior, set a ``trust_server_pasv_ipv4_address`` attribute on your"
" FTP instance to ``True``.  (See :gh:`87451`)"
msgstr ""
"新的安全修正将 :class:`ftplib.FTP` 的行为改成当设置被动数据通道时不信任远程服务器所发送的 IPv4 地址。 我们会改为重用 ftp"
" 服务器的 IP 地址。 对于需要原先的行为的不常见代码，请在你的 FTP 实例上将 "
"``trust_server_pasv_ipv4_address`` 属性设为 ``True``。 （参见 :gh:`87451`。）"

#: ../../whatsnew/3.7.rst:2605
msgid ""
"The presence of newline or tab characters in parts of a URL allows for some "
"forms of attacks. Following the WHATWG specification that updates RFC 3986, "
"ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters are stripped from "
"the URL by the parser :func:`urllib.parse` preventing such attacks. The "
"removal characters are controlled by a new module level variable "
"``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See :gh:`88048`)"
msgstr ""
"在 URL 中存在换行符或制表符可能会导致某种形式的攻击。 根据更新了 RFC 3986 的 WHATWG 规范，解析器 "
":func:`urllib.parse` 将从 URL 中去除 ASCII 换行符 ``\\n``, ``\\r`` 和制表符 ``\\t`` "
"以防止这种攻击。 移除的字符将由一个新的模块层级变量 ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE`` 来控制。"
" （参见 :gh:`88048`。）"

#: ../../whatsnew/3.7.rst:2613
msgid "Notable security feature in 3.7.14"
msgstr "3.7.14 中的重要安全特性"

#: ../../whatsnew/3.7.rst:2615
msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line "
"flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length "
"limitation <int_max_str_digits>` documentation.  The default limit is 4300 "
"digits in string form."
msgstr ""
"使用 2 (二进制), 4, 8 (八进制), 16 (十六进制) 或 32 以外的基数例如以 10 (十进制) 为基数在 :class:`int` 和"
" :class:`str` 之间进行转换现在如果字符串表示形式中的位数超过特定限制则会引发 :exc:`ValueError` "
"以避免因算法复杂度导致的拒绝服务攻击风险。 这是对于 :cve:`2020-10735` 的一种缓解方案。 此限制可通过环境变量、命令行旗标或 "
":mod:`sys` API 来配置或者禁用。 参见 :ref:`整数字符串转换长度限制 <int_max_str_digits>` 文档。 "
"字符串形式的默认限制为 4300 位数字。"
