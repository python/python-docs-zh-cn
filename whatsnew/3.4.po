# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# ww song <sww4718168@gmail.com>, 2021
# jacky <jackylvm@foxmail.com>, 2021
# Kaizhao Zhang <zhangkaizhao@gmail.com>, 2021
# ppcfish <ppcfish@gmail.com>, 2021
# zeroswan <zeroswan@outlook.com>, 2022
# ProgramRipper, 2023
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-29 13:04+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.4.rst:3
msgid "What's New In Python 3.4"
msgstr "Python 3.4 有什么新变化"

#: ../../whatsnew/3.4.rst:0
msgid "Author"
msgstr "作者"

#: ../../whatsnew/3.4.rst:5
msgid "R. David Murray <rdmurray@bitdance.com> (Editor)"
msgstr "R. David Murray <rdmurray@bitdance.com> (Editor)"

#: ../../whatsnew/3.4.rst:63
msgid ""
"This article explains the new features in Python 3.4, compared to 3.3. "
"Python 3.4 was released on March 16, 2014.  For full details, see the "
"`changelog <https://docs.python.org/3.4/whatsnew/changelog.html>`_."
msgstr ""
"这篇文章介绍了 Python 3.4 相比 3.3 增加的新特性。 Python 3.4 发布于 2014 年 3 月 16 日。 "
"对于完整的细节，请参见 `更新日志 <https://docs.python.org/3.4/whatsnew/changelog.html>`_。"

#: ../../whatsnew/3.4.rst:70
msgid ":pep:`429` -- Python 3.4 Release Schedule"
msgstr ":pep:`429` -- Python 3.4 发布计划"

#: ../../whatsnew/3.4.rst:75
msgid "Summary -- Release Highlights"
msgstr "摘要 - 发布重点"

#: ../../whatsnew/3.4.rst:80
msgid "New syntax features:"
msgstr "新的语法特性："

#: ../../whatsnew/3.4.rst:82
msgid "No new syntax features were added in Python 3.4."
msgstr "Python 3.4 中没有增加新的语法特性。"

#: ../../whatsnew/3.4.rst:84
msgid "Other new features:"
msgstr "其他的新特性"

#: ../../whatsnew/3.4.rst:86
msgid ":ref:`pip should always be available <whatsnew-pep-453>` (:pep:`453`)."
msgstr ":ref:`pip 能够随时可用 <whatsnew-pep-453>` (:pep:`453`)."

#: ../../whatsnew/3.4.rst:87
msgid ""
":ref:`Newly created file descriptors are non-inheritable <whatsnew-pep-446>`"
" (:pep:`446`)."
msgstr ":ref:`新创建的文件描述符是不可继承的 <whatsnew-pep-446>` (:pep:`446`)。"

#: ../../whatsnew/3.4.rst:89
msgid ""
"command line option for :ref:`isolated mode <whatsnew-isolated-mode>` "
"(:issue:`16499`)."
msgstr "对应 :ref:`隔离模式 <whatsnew-isolated-mode>` 的命令行选项 (:issue:`16499`)。"

#: ../../whatsnew/3.4.rst:91
msgid ""
":ref:`improvements in the handling of codecs <codec-handling-improvements>` "
"that are not text encodings (multiple issues)."
msgstr "针对非文本编码格式的 :ref:`编解码器处理方式的改进 <codec-handling-improvements>` (多个相关问题)。"

#: ../../whatsnew/3.4.rst:93
msgid ""
":ref:`A ModuleSpec Type <whatsnew-pep-451>` for the Import System "
"(:pep:`451`).  (Affects importer authors.)"
msgstr ""
"针对导入系统的 :ref:`ModuleSpec 类型 <whatsnew-pep-451>` (:pep:`451`)。 （将影响导入器的作者。）"

#: ../../whatsnew/3.4.rst:95
msgid ""
"The :mod:`marshal` format has been made :ref:`more compact and efficient "
"<whatsnew-marshal-3>` (:issue:`16475`)."
msgstr ""
":mod:`marshal` 格式已被改进为 :ref:`更为紧凑与高效 <whatsnew-marshal-3>` (:issue:`16475`)。"

#: ../../whatsnew/3.4.rst:98
msgid "New library modules:"
msgstr "新的库模块："

#: ../../whatsnew/3.4.rst:100
msgid ""
":mod:`asyncio`: :ref:`New provisional API for asynchronous IO <whatsnew-"
"asyncio>` (:pep:`3156`)."
msgstr ""
":mod:`asyncio`: :ref:`针对异步 IO 的新版暂定 API <whatsnew-asyncio>` (:pep:`3156`)。"

#: ../../whatsnew/3.4.rst:102
msgid ""
":mod:`ensurepip`: :ref:`Bootstrapping the pip installer <whatsnew-"
"ensurepip>` (:pep:`453`)."
msgstr ""
":mod:`ensurepip`: :ref:`引导设置 pip 安装器 <whatsnew-ensurepip>` (:pep:`453`)。"

#: ../../whatsnew/3.4.rst:104
msgid ""
":mod:`enum`: :ref:`Support for enumeration types <whatsnew-enum>` "
"(:pep:`435`)."
msgstr ":mod:`enum`: :ref:`对枚举类型的支持 <whatsnew-enum>` (:pep:`435`)。"

#: ../../whatsnew/3.4.rst:106
msgid ""
":mod:`pathlib`: :ref:`Object-oriented filesystem paths <whatsnew-pathlib>` "
"(:pep:`428`)."
msgstr ":mod:`pathlib`: :ref:`面向对象的文件系统路径 <whatsnew-pathlib>` (:pep:`428`)。"

#: ../../whatsnew/3.4.rst:108
msgid ""
":mod:`selectors`: :ref:`High-level and efficient I/O multiplexing <whatsnew-"
"selectors>`, built upon the :mod:`select` module primitives (part of "
":pep:`3156`)."
msgstr ""
":mod:`selectors`: :ref:`高层级且高效率的 I/O 复用 <whatsnew-selectors>`，在 "
":mod:`select` 模块的基础之上建立（为 :pep:`3156` 的组成部分）。"

#: ../../whatsnew/3.4.rst:111
msgid ""
":mod:`statistics`: A basic :ref:`numerically stable statistics library "
"<whatsnew-statistics>` (:pep:`450`)."
msgstr ""
":mod:`statistics`: 基础 :ref:`数字领域稳定统计库 <whatsnew-statistics>` (:pep:`450`)。"

#: ../../whatsnew/3.4.rst:113
msgid ""
":mod:`tracemalloc`: :ref:`Trace Python memory allocations <whatsnew-"
"tracemalloc>` (:pep:`454`)."
msgstr ""
":mod:`tracemalloc`: :ref:`追踪 Python 内存分配 <whatsnew-tracemalloc>` "
"(:pep:`454`)。"

#: ../../whatsnew/3.4.rst:116
msgid "Significantly improved library modules:"
msgstr "显著改进的库模块:"

#: ../../whatsnew/3.4.rst:118
msgid ""
":ref:`Single-dispatch generic functions <whatsnew-singledispatch>` in "
":mod:`functools` (:pep:`443`)."
msgstr ""
":mod:`functools` 中的 :ref:`单一调度泛型函数 <whatsnew-singledispatch>` (:pep:`443`)。"

#: ../../whatsnew/3.4.rst:120
msgid ""
"New :mod:`pickle` :ref:`protocol 4 <whatsnew-protocol-4>` (:pep:`3154`)."
msgstr "新的 :mod:`pickle` :ref:`协议 4 <whatsnew-protocol-4>` (:pep:`3154`)。"

#: ../../whatsnew/3.4.rst:121
msgid ""
":mod:`multiprocessing` now has :ref:`an option to avoid using os.fork on "
"Unix <whatsnew-multiprocessing-no-fork>` (:issue:`8713`)."
msgstr ""
":mod:`multiprocessing` 现在包含 :ref:`一个避免在 Unix 上使用 os.fork 的选项 <whatsnew-"
"multiprocessing-no-fork>` (:issue:`8713`)。"

#: ../../whatsnew/3.4.rst:123
msgid ""
":mod:`email` has a new submodule, :mod:`~email.contentmanager`, and a new "
":mod:`~email.message.Message` subclass "
"(:class:`~email.contentmanager.EmailMessage`) that :ref:`simplify MIME "
"handling <whatsnew_email_contentmanager>` (:issue:`18891`)."
msgstr ""
":mod:`email` 增加新的子模块 :mod:`~email.contentmanager` 和新的子类型 "
":mod:`~email.message.Message` (:class:`~email.contentmanager.EmailMessage`) "
"用以 :ref:`简化 MIME 处理 <whatsnew_email_contentmanager>` (:issue:`18891`)。"

#: ../../whatsnew/3.4.rst:127
msgid ""
"The :mod:`inspect` and :mod:`pydoc` modules are now capable of correct "
"introspection of a much wider variety of callable objects, which improves "
"the output of the Python :func:`help` system."
msgstr ""
":mod:`inspect` 和 :mod:`pydoc` 模块现在能够自省更多种类的可调用对象，这改进了 Python :func:`help` "
"系统的输出。"

#: ../../whatsnew/3.4.rst:130
msgid "The :mod:`ipaddress` module API has been declared stable"
msgstr ":mod:`ipaddress` 模块 API 已被声明为稳定状态"

#: ../../whatsnew/3.4.rst:132
msgid "Security improvements:"
msgstr "安全改进："

#: ../../whatsnew/3.4.rst:134
msgid ""
":ref:`Secure and interchangeable hash algorithm <whatsnew-pep-456>` "
"(:pep:`456`)."
msgstr ":ref:`安全且可互换的哈希算法 <whatsnew-pep-456>` (:pep:`456`)。"

#: ../../whatsnew/3.4.rst:136
msgid ""
":ref:`Make newly created file descriptors non-inheritable <whatsnew-"
"pep-446>` (:pep:`446`) to avoid leaking file descriptors to child processes."
msgstr ""
":ref:`将新创建的文件描述符设为不可继承 <whatsnew-pep-446>` (:pep:`446`) 以避免将文件描述符泄露给子进程。"

#: ../../whatsnew/3.4.rst:138
msgid ""
"New command line option for :ref:`isolated mode <whatsnew-isolated-mode>`, "
"(:issue:`16499`)."
msgstr "新增对应 :ref:`隔离模式 <whatsnew-isolated-mode>` 的命令行选项。 (:issue:`16499`)。"

#: ../../whatsnew/3.4.rst:140
msgid ""
":mod:`multiprocessing` now has :ref:`an option to avoid using os.fork on "
"Unix <whatsnew-multiprocessing-no-fork>`.  *spawn* and *forkserver* are more"
" secure because they avoid sharing data with child processes."
msgstr ""
"现在 :mod:`multiprocessing` 具有 :ref:`一个在 Unix 上避免使用 os.fork 的选项 <whatsnew-"
"multiprocessing-no-fork>`。 *spawn* 和 *forkserver* 更为安全因为它们会避免与子进程共享数据。"

#: ../../whatsnew/3.4.rst:143
msgid ""
":mod:`multiprocessing` child processes on Windows no longer inherit all of "
"the parent's inheritable handles, only the necessary ones."
msgstr "在 Windows 上 :mod:`multiprocessing` 子进程将不再继承父进程的所有可继承句柄，而仅继承必需的几个。"

#: ../../whatsnew/3.4.rst:145
msgid ""
"A new :func:`hashlib.pbkdf2_hmac` function provides the `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_."
msgstr ""
"新增的 :func:`hashlib.pbkdf2_hmac` 函数可提供 `PKCS#5 基于口令的密钥派生函数 2 "
"<https://en.wikipedia.org/wiki/PBKDF2>`_。"

#: ../../whatsnew/3.4.rst:148
msgid ""
":ref:`TLSv1.1 and TLSv1.2 support <whatsnew-tls-11-12>` for :mod:`ssl`."
msgstr "在 :mod:`ssl` 中对于 :ref:`TLSv1.1 和 TLSv1.2 的支持 <whatsnew-tls-11-12>`。"

#: ../../whatsnew/3.4.rst:149
msgid ""
":ref:`Retrieving certificates from the Windows system cert store support "
"<whatsnew34-win-cert-store>` for :mod:`ssl`."
msgstr ""
"在 :mod:`ssl` 中对于 :ref:`从 Windows 系统证书库获取证书的支持 <whatsnew34-win-cert-store>`。"

#: ../../whatsnew/3.4.rst:151
msgid ""
":ref:`Server-side SNI (Server Name Indication) support <whatsnew34-sni>` for"
" :mod:`ssl`."
msgstr ""
"在 :mod:`ssl` 中对于 :ref:`服务端 SNI (Server Name Indication) 的支持 "
"<whatsnew34-sni>`。"

#: ../../whatsnew/3.4.rst:153
msgid ""
"The :class:`ssl.SSLContext` class has a :ref:`lot of improvements "
"<whatsnew34-sslcontext>`."
msgstr ":class:`ssl.SSLContext` 类具有 :ref:`大量改进 <whatsnew34-sslcontext>`。"

#: ../../whatsnew/3.4.rst:155
msgid ""
"All modules in the standard library that support SSL now support server "
"certificate verification, including hostname matching "
"(:func:`ssl.match_hostname`) and CRLs (Certificate Revocation lists, see "
":func:`ssl.SSLContext.load_verify_locations`)."
msgstr ""
"标准库中所有支持 SSL 的模块现在都支持服务器证书验证，包括主机名匹配 (:func:`ssl.match_hostname`) 和 CRL "
"(Certificate Revocation Lists，参见 "
":func:`ssl.SSLContext.load_verify_locations`)。"

#: ../../whatsnew/3.4.rst:160
msgid "CPython implementation improvements:"
msgstr "CPython 实现的改进："

#: ../../whatsnew/3.4.rst:162
msgid ":ref:`Safe object finalization <whatsnew-pep-442>` (:pep:`442`)."
msgstr ":ref:`安全的对象最终化 <whatsnew-pep-442>` (:pep:`442`)。"

#: ../../whatsnew/3.4.rst:163
msgid ""
"Leveraging :pep:`442`, in most cases :ref:`module globals are no longer set "
"to None during finalization <whatsnew-pep-442>` (:issue:`18214`)."
msgstr ""
"通过应用 :pep:`442`，在大多数情况下 :ref:`模块的 globals 在最终化期间将不再被设为 None <whatsnew-"
"pep-442>` (:issue:`18214`)。"

#: ../../whatsnew/3.4.rst:165
msgid ":ref:`Configurable memory allocators <whatsnew-pep-445>` (:pep:`445`)."
msgstr ":ref:`可配置的内存分配器 <whatsnew-pep-445>` (:pep:`445`)。"

#: ../../whatsnew/3.4.rst:166
msgid ":ref:`Argument Clinic <whatsnew-pep-436>` (:pep:`436`)."
msgstr ":ref:`Argument Clinic <whatsnew-pep-436>` (:pep:`436`)。"

#: ../../whatsnew/3.4.rst:168
msgid ""
"Please read on for a comprehensive list of user-facing changes, including "
"many other smaller improvements, CPython optimizations, deprecations, and "
"potential porting issues."
msgstr "请继续阅读有关针对用户的改变的完整清单，包括许多其他较小的改进、CPython 优化、弃用以及潜在的移植问题。"

#: ../../whatsnew/3.4.rst:175
msgid "New Features"
msgstr "新的特性"

#: ../../whatsnew/3.4.rst:180
msgid "PEP 453: Explicit Bootstrapping of PIP in Python Installations"
msgstr "PEP 453: 在 Python 安装版中对 PIP 的显式初始设置"

#: ../../whatsnew/3.4.rst:183
msgid "Bootstrapping pip By Default"
msgstr "默认对 pip 进行初始设置"

#: ../../whatsnew/3.4.rst:185
msgid ""
"The new :mod:`ensurepip` module (defined in :pep:`453`) provides a standard "
"cross-platform mechanism to bootstrap the pip installer into Python "
"installations and virtual environments. The version of ``pip`` included with"
" Python 3.4.0 is ``pip`` 1.5.4, and future 3.4.x maintenance releases will "
"update the bundled version to the latest version of ``pip`` that is "
"available at the time of creating the release candidate."
msgstr ""
"新增的 :mod:`ensurepip` 模块（在 :pep:`453` 中定义）提供了一个在 Python 安装版和虚拟环境中初始设置 pip "
"安装器的标准跨平台机制。 包括在 Python 3.4.0 中的 ``pip`` 版本是 ``pip`` 1.5.4，未来的 3.4.x "
"维护发布版会将附带版本升级为创建候选发布版时的 ``pip`` 最新版本。"

#: ../../whatsnew/3.4.rst:192
msgid ""
"By default, the commands ``pipX`` and ``pipX.Y`` will be installed on all "
"platforms (where X.Y stands for the version of the Python installation), "
"along with the ``pip`` Python package and its dependencies. On Windows and "
"in virtual environments on all platforms, the unversioned ``pip`` command "
"will also be installed. On other platforms, the system wide unversioned "
"``pip`` command typically refers to the separately installed Python 2 "
"version."
msgstr ""
"在默认情况下，将在所有平台上安装 ``pipX`` 和 ``pipX.Y`` 等命令（其中 X.Y 表示 Python 安装包的版本），并包括 "
"``pip`` Python 包及其依赖。 在 Windows 中以及所有平台的虚拟环境中，还将安装不带版本号的 ``pip`` 命令。 "
"在其他平台中，系统层级上不带版本号的 ``pip`` 命令通常是指向单独安装的 Python 2 版本。"

#: ../../whatsnew/3.4.rst:200
msgid ""
"The ``pyvenv`` command line utility and the :mod:`venv` module make use of "
"the :mod:`ensurepip` module to make ``pip`` readily available in virtual "
"environments. When using the command line utility, ``pip`` is installed by "
"default, while when using the :mod:`venv` module :ref:`venv-api` "
"installation of ``pip`` must be requested explicitly."
msgstr ""
"``pyvenv`` 命令行工具和 :mod:`venv` 模块可利用 :mod:`ensurepip` 模块在虚拟环境中准备好 ``pip``。 "
"当使用命令行工具时，会默认安装 ``pip``，而当使用 :mod:`venv` 模块的 :ref:`venv-api` 安装版时必须显式地安装 "
"``pip``。"

#: ../../whatsnew/3.4.rst:206
msgid ""
"For CPython :ref:`source builds on POSIX systems <building-python-on-unix>`,"
" the ``make install`` and ``make altinstall`` commands bootstrap ``pip`` by "
"default.  This behaviour can be controlled through configure options, and "
"overridden through Makefile options."
msgstr ""
"对于 CPython :ref:`在 POSIX 系统上的源代码编译版 <building-python-on-unix>`，``make "
"install`` 和 ``make altinstall`` 命令默认会初始设置 ``pip``。 此行为可通过配置选项来控制，并通过 "
"Makefile 选项来重写。"

#: ../../whatsnew/3.4.rst:211
msgid ""
"On Windows and Mac OS X, the CPython installers now default to installing "
"``pip`` along with CPython itself (users may opt out of installing it during"
" the installation process). Window users will need to opt in to the "
"automatic ``PATH`` modifications to have ``pip`` available from the command "
"line by default, otherwise it can still be accessed through the Python "
"launcher for Windows as ``py -m pip``."
msgstr ""
"在 Windows 和 Mac OS X 上，现在 CPython 安装程序默认会将 ``pip`` 与 CPython "
"本身一同安装（用户可以在安装过程中选择不安装它）。 Window 用户需要选择执行 ``PATH`` 修改以使 ``pip`` "
"在命令行中默认可用，在其他情况下它仍然可以通过 Windows 版 Python 启动器以 ``py -m pip`` 的方式使用。"

#: ../../whatsnew/3.4.rst:218
msgid ""
"As :pep:`discussed in the PEP <0453#recommendations-for-downstream-"
"distributors>` platform packagers may choose not to install these commands "
"by default, as long as, when invoked, they provide clear and simple "
"directions on how to install them on that platform (usually using the system"
" package manager)."
msgstr ""
"正如 :pep:`在 PEP 中已讨论的 <0453#recommendations-for-downstream-distributors>` "
"那样平台打包者可以选择不默认安装这些命令，只需在它们被唤起时，能够提供有关如何在该平台上安装它们的简单清晰的指引（通常是使用系统的包管理器）。"

#: ../../whatsnew/3.4.rst:226
msgid ""
"To avoid conflicts between parallel Python 2 and Python 3 installations, "
"only the versioned ``pip3`` and ``pip3.4`` commands are bootstrapped by "
"default when ``ensurepip`` is invoked directly - the ``--default-pip`` "
"option is needed to also request the unversioned ``pip`` command. ``pyvenv``"
" and the Windows installer ensure that the unqualified ``pip`` command is "
"made available in those environments, and ``pip`` can always be invoked via "
"the ``-m`` switch rather than directly to avoid ambiguity on systems with "
"multiple Python installations."
msgstr ""
"为了避免同时存在的 Python 2 和 Python 3 安装版之前的冲突，当 ``ensurepip`` 被直接唤起时默认只会初始设置带版本号的 "
"``pip3`` 和 ``pip3.4`` 命令 —— 需要添加 ``--default-pip`` 选项来请求设置不带版本号的 ``pip`` 命令。"
" ``pyvenv`` 和 Windows 安装程序会确保未限定版本的 ``pip`` 命令在环境中可用，并且 ``pip`` 始终可以通过 "
"``-m`` 选项开关而不是直接唤起以避免在具有多个 Python 安装版的系统中造成歧义。"

#: ../../whatsnew/3.4.rst:237
msgid "Documentation Changes"
msgstr "文档更改"

#: ../../whatsnew/3.4.rst:239
msgid ""
"As part of this change, the :ref:`installing-index` and :ref:`distributing-"
"index` sections of the documentation have been completely redesigned as "
"short getting started and FAQ documents. Most packaging documentation has "
"now been moved out to the Python Packaging Authority maintained `Python "
"Packaging User Guide <https://packaging.python.org>`__ and the documentation"
" of the individual projects."
msgstr ""
"作为此项更改的一部分，文档的 :ref:`installing-index` 和 :ref:`distributing-index` "
"章节已经完全重新设计，快速入门和 FAQ 文档也是如此。 大部分打包指南文档现在都已被移至由 Python Packaging Authority "
"维护的 `Python Packaging User Guide <https://packaging.python.org>`__ "
"以及相应的独立项目文档。"

#: ../../whatsnew/3.4.rst:247
msgid ""
"However, as this migration is currently still incomplete, the legacy "
"versions of those guides remaining available as :ref:`install-index` and "
":ref:`setuptools-index`."
msgstr ""
"不过，由于目前迁移过程尚未完成，这些指南的旧版本仍然可通过 :ref:`install-index` 和 :ref:`setuptools-index`"
" 来访问。"

#: ../../whatsnew/3.4.rst:253
msgid ":pep:`453` -- Explicit bootstrapping of pip in Python installations"
msgstr ":pep:`453` -- Python 安装版中对 pip 的显式初始设置"

#: ../../whatsnew/3.4.rst:254
msgid ""
"PEP written by Donald Stufft and Nick Coghlan, implemented by Donald Stufft,"
" Nick Coghlan, Martin von Löwis and Ned Deily."
msgstr ""
"PEP 由Donald Stufft 和 Nick Coghlan 撰写，由 Donald Stufft，Nick Coghlan，Martin von"
" Löwis 和 Ned Deily 实现。"

#: ../../whatsnew/3.4.rst:261
msgid "PEP 446: Newly Created File Descriptors Are Non-Inheritable"
msgstr "PEP 446: 新创建的文件描述符将设为不可继承"

#: ../../whatsnew/3.4.rst:263
msgid ""
":pep:`446` makes newly created file descriptors :ref:`non-inheritable "
"<fd_inheritance>`.  In general, this is the behavior an application will "
"want: when launching a new process, having currently open files also open in"
" the new process can lead to all sorts of hard to find bugs, and potentially"
" to security issues."
msgstr ""
":pep:`446` 将新创建的文件描述符设为 :ref:`不可继承的 <fd_inheritance>`。 "
"通常，这就是应用程序所需要的行为：当启动一个新进程时，让当前打开的文件也在新进程里打开可能导致各种难以查找的程序错误以及潜在的安全问题。"

#: ../../whatsnew/3.4.rst:269
msgid ""
"However, there are occasions when inheritance is desired.  To support these "
"cases, the following new functions and methods are available:"
msgstr "不过，也存在一些需要继承行为的情况。 为了支持这些情况，可以使用以下的新增函数和方法："

#: ../../whatsnew/3.4.rst:272
msgid ":func:`os.get_inheritable`, :func:`os.set_inheritable`"
msgstr ":func:`os.get_inheritable`, :func:`os.set_inheritable`"

#: ../../whatsnew/3.4.rst:273
msgid ":func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`"
msgstr ":func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`"

#: ../../whatsnew/3.4.rst:274
msgid ""
":meth:`socket.socket.get_inheritable`, :meth:`socket.socket.set_inheritable`"
msgstr ""
":meth:`socket.socket.get_inheritable`, :meth:`socket.socket.set_inheritable`"

#: ../../whatsnew/3.4.rst:278
msgid ":pep:`446` -- Make newly created file descriptors non-inheritable"
msgstr ":pep:`446` -- 将新创建的文件描述符设为不可继承"

#: ../../whatsnew/3.4.rst:279 ../../whatsnew/3.4.rst:1811
msgid "PEP written and implemented by Victor Stinner."
msgstr "PEP 由 Victor Stinner 撰写并实现。"

#: ../../whatsnew/3.4.rst:285
msgid "Improvements to Codec Handling"
msgstr "编解码器处理方式的改进"

#: ../../whatsnew/3.4.rst:287
msgid ""
"Since it was first introduced, the :mod:`codecs` module has always been "
"intended to operate as a type-neutral dynamic encoding and decoding system. "
"However, its close coupling with the Python text model, especially the type "
"restricted convenience methods on the builtin :class:`str`, :class:`bytes` "
"and :class:`bytearray` types, has historically obscured that fact."
msgstr ""
"自首次被引入以来，:mod:`codecs` 模块始终是作为一个类型中立的动态编码和解码系统来运作的。 然而，它与 Python 文本模型，尤其是内置 "
":class:`str`、:class:`bytes` 和 :class:`bytearray` "
"类型上的限定类型的便捷方法的紧密耦合，在历史上掩盖了这一事实。"

#: ../../whatsnew/3.4.rst:294
msgid ""
"As a key step in clarifying the situation, the :meth:`codecs.encode` and "
":meth:`codecs.decode` convenience functions are now properly documented in "
"Python 2.7, 3.3 and 3.4. These functions have existed in the :mod:`codecs` "
"module (and have been covered by the regression test suite) since Python "
"2.4, but were previously only discoverable through runtime introspection."
msgstr ""
"作为明晰情况的关键一步，现在 :meth:`codecs.encode` 和 :meth:`codecs.decode` 便捷函数在 Python "
"2.7、3.3 和 3.4 中都正确地写入了文档。 自 Python 2.4 以来这些函数即已存在于 :mod:`codecs` "
"模块中（并已被回归测试套件所覆盖），但在此前只能通过运行时自省才能发现。"

#: ../../whatsnew/3.4.rst:300
msgid ""
"Unlike the convenience methods on :class:`str`, :class:`bytes` and "
":class:`bytearray`, the :mod:`codecs` convenience functions support "
"arbitrary codecs in both Python 2 and Python 3, rather than being limited to"
" Unicode text encodings (in Python 3) or ``basestring`` <-> ``basestring`` "
"conversions (in Python 2)."
msgstr ""
"不同于 :class:`str`, :class:`bytes` 和 :class:`bytearray` 上的便捷方法，:mod:`codecs` "
"的便捷函数同时支持 Python 2 和 Python 3 中的任意编解码器，而非仅限于 Unicode 文本编码格式（在 Python 3 中) 或 "
"``basestring`` <-> ``basestring`` 转换（在 Python 2 中）。"

#: ../../whatsnew/3.4.rst:306
msgid ""
"In Python 3.4, the interpreter is able to identify the known non-text "
"encodings provided in the standard library and direct users towards these "
"general purpose convenience functions when appropriate::"
msgstr "在 Python 3.4 中，解释器能够识别标准库中提供的已知非文本编码格式并会在适当的时候引导用户找到这些通用型便捷函数::"

#: ../../whatsnew/3.4.rst:310
msgid ""
">>> b\"abcdef\".decode(\"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'hex' is not a text encoding; use codecs.decode() to handle arbitrary codecs\n"
"\n"
">>> \"hello\".encode(\"rot13\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'rot13' is not a text encoding; use codecs.encode() to handle arbitrary codecs\n"
"\n"
">>> open(\"foo.txt\", encoding=\"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'hex' is not a text encoding; use codecs.open() to handle arbitrary codecs"
msgstr ""
">>> b\"abcdef\".decode(\"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'hex' is not a text encoding; use codecs.decode() to handle arbitrary codecs\n"
"\n"
">>> \"hello\".encode(\"rot13\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'rot13' is not a text encoding; use codecs.encode() to handle arbitrary codecs\n"
"\n"
">>> open(\"foo.txt\", encoding=\"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'hex' is not a text encoding; use codecs.open() to handle arbitrary codecs"

#: ../../whatsnew/3.4.rst:325
msgid ""
"In a related change, whenever it is feasible without breaking backwards "
"compatibility, exceptions raised during encoding and decoding operations are"
" wrapped in a chained exception of the same type that mentions the name of "
"the codec responsible for producing the error::"
msgstr ""
"在相关的改变中，只要在不破坏向下兼容性 "
"的情况下是可行的，则在编码和解码操作期间引发的异常都会被包装在一个特定类型的链式异常中，该类型的名称与产生错误的相应编解码器一致::"

#: ../../whatsnew/3.4.rst:330
msgid ""
">>> import codecs\n"
"\n"
">>> codecs.decode(b\"abcdefgh\", \"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"/usr/lib/python3.4/encodings/hex_codec.py\", line 20, in hex_decode\n"
"    return (binascii.a2b_hex(input), len(input))\n"
"binascii.Error: Non-hexadecimal digit found\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"binascii.Error: decoding with 'hex' codec failed (Error: Non-hexadecimal digit found)\n"
"\n"
">>> codecs.encode(\"hello\", \"bz2\")\n"
"Traceback (most recent call last):\n"
"  File \"/usr/lib/python3.4/encodings/bz2_codec.py\", line 17, in bz2_encode\n"
"    return (bz2.compress(input), len(input))\n"
"  File \"/usr/lib/python3.4/bz2.py\", line 498, in compress\n"
"    return comp.compress(data) + comp.flush()\n"
"TypeError: 'str' does not support the buffer interface\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: encoding with 'bz2' codec failed (TypeError: 'str' does not support the buffer interface)"
msgstr ""
">>> import codecs\n"
"\n"
">>> codecs.decode(b\"abcdefgh\", \"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"/usr/lib/python3.4/encodings/hex_codec.py\", line 20, in hex_decode\n"
"    return (binascii.a2b_hex(input), len(input))\n"
"binascii.Error: Non-hexadecimal digit found\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"binascii.Error: decoding with 'hex' codec failed (Error: Non-hexadecimal digit found)\n"
"\n"
">>> codecs.encode(\"hello\", \"bz2\")\n"
"Traceback (most recent call last):\n"
"  File \"/usr/lib/python3.4/encodings/bz2_codec.py\", line 17, in bz2_encode\n"
"    return (bz2.compress(input), len(input))\n"
"  File \"/usr/lib/python3.4/bz2.py\", line 498, in compress\n"
"    return comp.compress(data) + comp.flush()\n"
"TypeError: 'str' does not support the buffer interface\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: encoding with 'bz2' codec failed (TypeError: 'str' does not support the buffer interface)"

#: ../../whatsnew/3.4.rst:358
msgid ""
"Finally, as the examples above show, these improvements have permitted the "
"restoration of the convenience aliases for the non-Unicode codecs that were "
"themselves restored in Python 3.2. This means that encoding binary data to "
"and from its hexadecimal representation (for example) can now be written "
"as::"
msgstr ""
"最后，正如上面的例子所示，这些改进允许恢复非 Unicode 编解码器的便捷别名，这些别名在 Python 3.2 中已被恢复。 "
"这意味着（举例来说）二进制数据到其十六进制表示形式的编码转换现在可以写成::"

#: ../../whatsnew/3.4.rst:364
msgid ""
">>> from codecs import encode, decode\n"
">>> encode(b\"hello\", \"hex\")\n"
"b'68656c6c6f'\n"
">>> decode(b\"68656c6c6f\", \"hex\")\n"
"b'hello'"
msgstr ""
">>> from codecs import encode, decode\n"
">>> encode(b\"hello\", \"hex\")\n"
"b'68656c6c6f'\n"
">>> decode(b\"68656c6c6f\", \"hex\")\n"
"b'hello'"

#: ../../whatsnew/3.4.rst:370
msgid ""
"The binary and text transforms provided in the standard library are detailed"
" in :ref:`binary-transforms` and :ref:`text-transforms`."
msgstr ""
"在标准库中提供的二进制和文本转换操作详见 :ref:`binary-transforms` 和 :ref:`text-transforms`。"

#: ../../whatsnew/3.4.rst:373
msgid ""
"(Contributed by Nick Coghlan in :issue:`7475`, :issue:`17827`, "
":issue:`17828` and :issue:`19619`.)"
msgstr ""
"（由 Nick Coghlan 在 :issue:`7475`, :issue:`17827`, :issue:`17828` 和 "
":issue:`19619` 中贡献。）"

#: ../../whatsnew/3.4.rst:380
msgid "PEP 451: A ModuleSpec Type for the Import System"
msgstr "PEP 451: 针对导入系统的 ModuleSpec 类型"

#: ../../whatsnew/3.4.rst:382
msgid ""
":pep:`451` provides an encapsulation of the information about a module that "
"the import machinery will use to load it (that is, a module specification)."
"  This helps simplify both the import implementation and several import-"
"related APIs. The change is also a stepping stone for `several future "
"import-related improvements`__."
msgstr ""
":pep:`451` 提供了对模块相关信息的封装，导入机制将使用这些信息来加载它（即模块规范说明）。 这有助于简化导入的实现和几个导入相关的 API。 "
"这一改动也是 `某些未来导入相关改进`__ 的基石。"

#: ../../whatsnew/3.4.rst:390
msgid ""
"The public-facing changes from the PEP are entirely backward-compatible. "
"Furthermore, they should be transparent to everyone but importer authors.  "
"Key finder and loader methods have been deprecated, but they will continue "
"working. New importers should use the new methods described in the PEP.  "
"Existing importers should be updated to implement the new methods.  See the "
":ref:`deprecated-3.4` section for a list of methods that should be replaced "
"and their replacements."
msgstr ""
"PEP 中面向公众的修改是完全向下兼容的。 并且，它们应当对除导入器开发者之外的其他所有人都可见。 主要查找器和加载器方法已被弃用，但它们将继续工作。 "
"新的导入器应当使用 PEP 中描述的新方法。  现有的导入器应当被更新以实现这些新方法。 请参阅 :ref:`deprecated-3.4` "
"一节获取应当被替代的方法及其替代物的列表。"

#: ../../whatsnew/3.4.rst:400
msgid "Other Language Changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.4.rst:402
msgid "Some smaller changes made to the core Python language are:"
msgstr "对Python 语言核心进行的小改动："

#: ../../whatsnew/3.4.rst:404
msgid "Unicode database updated to UCD version 6.3."
msgstr "Unicode 数据库更新至 UCD 版本 6.3。"

#: ../../whatsnew/3.4.rst:406
msgid ""
":func:`min` and :func:`max` now accept a *default* keyword-only argument "
"that can be used to specify the value they return if the iterable they are "
"evaluating has no elements.  (Contributed by Julian Berman in "
":issue:`18111`.)"
msgstr ""
"现在 :func:`min` 和 :func:`max` 均接受一个 *default* "
"仅限关键字参数可被用来指定当它们要求值的可迭代对象中没有任何元素时要返回的值。 （由 Julian Berman 在 :issue:`18111` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:411
msgid "Module objects are now :ref:`weakly referenceable <mod-weakref>`."
msgstr "模块对象现在是 :ref:`可弱引用的 <mod-weakref>`。"

#: ../../whatsnew/3.4.rst:413
msgid ""
"Module ``__file__`` attributes (and related values) should now always "
"contain absolute paths by default, with the sole exception of "
"``__main__.__file__`` when a script has been executed directly using a "
"relative path.  (Contributed by Brett Cannon in :issue:`18416`.)"
msgstr ""
"模块的 ``__file__`` 属性（以及相关的值）现在应当总是默认包含绝对路径，唯一的例外是当使用相对路径直接执行一个脚本时的 "
"``__main__.__file__``。 （由 Brett Cannon 在 :issue:`18416` 中贡献。）"

#: ../../whatsnew/3.4.rst:418
msgid ""
"All the UTF-\\* codecs (except UTF-7) now reject surrogates during both "
"encoding and decoding unless the ``surrogatepass`` error handler is used, "
"with the exception of the UTF-16 decoder (which accepts valid surrogate "
"pairs) and the UTF-16 encoder (which produces them while encoding non-BMP "
"characters). (Contributed by Victor Stinner, Kang-Hao (Kenny) Lu and Serhiy "
"Storchaka in :issue:`12892`.)"
msgstr ""
"现在所有 UTF-\\* 编解码器（UTF-7 除外）在编码和解码期间都将拒绝替代符除非使用 ``surrogatepass`` 错误处理器，例外情况有"
" UTF-16 解码器（接受有效的替代符对）和 UTF-16 编码器（在编码非 BMP 字符时会产生替代符）。 （由 Victor Stinner, "
"Kang-Hao (Kenny) Lu 和 Serhiy Storchaka 在 :issue:`12892` 中贡献。）"

#: ../../whatsnew/3.4.rst:425
msgid ""
"New German EBCDIC :ref:`codec <standard-encodings>` ``cp273``.  (Contributed"
" by Michael Bierenfeld and Andrew Kuchling in :issue:`1097797`.)"
msgstr ""
"新增 German EBCDIC :ref:`编解码器 <standard-encodings>` ``cp273``。 （由 Michael "
"Bierenfeld 和 Andrew Kuchling 在 :issue:`1097797` 中贡献。）"

#: ../../whatsnew/3.4.rst:428
msgid ""
"New Ukrainian :ref:`codec <standard-encodings>` ``cp1125``.  (Contributed by"
" Serhiy Storchaka in :issue:`19668`.)"
msgstr ""
"新增 Ukrainian :ref:`编解码器 <standard-encodings>` ``cp1125``。 （由 Serhiy "
"Storchaka 在 :issue:`19668` 中贡献。）"

#: ../../whatsnew/3.4.rst:431
msgid ""
":class:`bytes`.join() and :class:`bytearray`.join() now accept arbitrary "
"buffer objects as arguments.  (Contributed by Antoine Pitrou in "
":issue:`15958`.)"
msgstr ""
"现在 :class:`bytes`.join() 和 :class:`bytearray`.join() 接受任意缓冲区对象作为参数。 （由 "
"Antoine Pitrou 在 :issue:`15958` 中贡献。）"

#: ../../whatsnew/3.4.rst:435
msgid ""
"The :class:`int` constructor now accepts any object that has an "
"``__index__`` method for its *base* argument.  (Contributed by Mark "
"Dickinson in :issue:`16772`.)"
msgstr ""
"现在 :class:`int` 构造器接受任何具有 ``__index__`` 方法的对象作为其 *base* 参数。 （由 Mark "
"Dickinson 在 :issue:`16772` 中贡献。）"

#: ../../whatsnew/3.4.rst:439
msgid ""
"Frame objects now have a :func:`~frame.clear` method that clears all "
"references to local variables from the frame.  (Contributed by Antoine "
"Pitrou in :issue:`17934`.)"
msgstr ""
"帧对象现在具有 :func:`~frame.clear` 方法用来从帧中清除所有对局部变量的引用。 （由 Antoine Pitrou 在 "
":issue:`17934` 中贡献。）"

#: ../../whatsnew/3.4.rst:443
msgid ""
":class:`memoryview` is now registered as a :class:`Sequence "
"<collections.abc>`, and supports the :func:`reversed` builtin.  (Contributed"
" by Nick Coghlan and Claudiu Popa in :issue:`18690` and :issue:`19078`.)"
msgstr ""
"现在 :class:`memoryview` 被注册为 :class:`序列 <collections.abc>`，并支持 "
":func:`reversed` 内置函数。 （由 Nick Coghlan 和 Claudiu Popa 在 :issue:`18690` 和 "
":issue:`19078` 中贡献。）"

#: ../../whatsnew/3.4.rst:447
msgid ""
"Signatures reported by :func:`help` have been modified and improved in "
"several cases as a result of the introduction of Argument Clinic and other "
"changes to the :mod:`inspect` and :mod:`pydoc` modules."
msgstr ""
"作为对引入 Argument Clinic 以及对 :mod:`inspect` 和 :mod:`pydoc` 模块的其他修改的结果，在各种场合下由 "
":func:`help` 所报告的签名信息已获得修改和提升。"

#: ../../whatsnew/3.4.rst:451
msgid ""
":meth:`~object.__length_hint__` is now part of the formal language "
"specification (see :pep:`424`).  (Contributed by Armin Ronacher in "
":issue:`16148`.)"
msgstr ""
"现在 :meth:`~object.__length_hint__` 已成为正式语言规范的一部分 (参见 :pep:`424`)。 （由 Armin "
"Ronacher 在 :issue:`16148` 中贡献。）"

#: ../../whatsnew/3.4.rst:457
msgid "New Modules"
msgstr "新增模块"

#: ../../whatsnew/3.4.rst:463
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.4.rst:465
msgid ""
"The new :mod:`asyncio` module (defined in :pep:`3156`) provides a standard "
"pluggable event loop model for Python, providing solid asynchronous IO "
"support in the standard library, and making it easier for other event loop "
"implementations to interoperate with the standard library and each other."
msgstr ""
"新增的 :mod:`asyncio` 模块（在 :pep:`3156` 中定义）为 Python "
"提供了一个标准的可插入事件循环模型，在标准库中提供了坚实的异步 IO 支持，并使得其他事件循环的实现与标准库和其他库的相互操作更为容易。"

#: ../../whatsnew/3.4.rst:470 ../../whatsnew/3.4.rst:533
msgid "For Python 3.4, this module is considered a :term:`provisional API`."
msgstr "对于 Python 3.4，此模块被视为属于 :term:`provisional API`。"

#: ../../whatsnew/3.4.rst:474
msgid ":pep:`3156` -- Asynchronous IO Support Rebooted: the \"asyncio\" Module"
msgstr ":pep:`3156` -- 异步 IO 支持的重启: \"asyncio\" 模块"

#: ../../whatsnew/3.4.rst:475
msgid "PEP written and implementation led by Guido van Rossum."
msgstr "PEP 由 Guido van Rossum 领导编写和实现。"

#: ../../whatsnew/3.4.rst:481
msgid "ensurepip"
msgstr "ensurepip"

#: ../../whatsnew/3.4.rst:483
msgid ""
"The new :mod:`ensurepip` module is the primary infrastructure for the "
":pep:`453` implementation.  In the normal course of events end users will "
"not need to interact with this module, but it can be used to manually "
"bootstrap ``pip`` if the automated bootstrapping into an installation or "
"virtual environment was declined."
msgstr ""
"新增的 :mod:`ensurepip` 模块是用于 :pep:`453` 实现的主要基础设施。   "
"在正常情况下最终用户不需要与此模块进行交互，但如果对安装版或虚拟环境的自动初始设置遭到拒绝则可使用它来手动初始设置 ``pip``。"

#: ../../whatsnew/3.4.rst:489
msgid ""
":mod:`ensurepip` includes a bundled copy of ``pip``, up-to-date as of the "
"first release candidate of the release of CPython with which it ships (this "
"applies to both maintenance releases and feature releases).  ``ensurepip`` "
"does not access the internet.  If the installation has internet access, "
"after ``ensurepip`` is run the bundled ``pip`` can be used to upgrade "
"``pip`` to a more recent release than the bundled one.  (Note that such an "
"upgraded version of ``pip`` is considered to be a separately installed "
"package and will not be removed if Python is uninstalled.)"
msgstr ""
":mod:`ensurepip` 包括了一个捆绑的 ``pip`` 副本，其版本更新时间即 CPython "
"发布包的第一个候选发布版的发布时间（此规则同样适用于维护发布版和新特性发布版）。 ``ensurepip`` 不会访问因特网。 "
"如果安装版可以访问因特网，则在运行 ``ensurepip`` 之后可以使用所捆绑的 ``pip`` 来将 ``pip`` "
"升级为比所捆绑版本更高的版本。 （请注意这样得到的 ``pip`` 升级版本将被视为一个单独安装的软件包并且在 Python 被卸载时将不会被移除。）"

#: ../../whatsnew/3.4.rst:498
msgid ""
"The module is named *ensure*\\ pip because if called when ``pip`` is already"
" installed, it does nothing.  It also has an ``--upgrade`` option that will "
"cause it to install the bundled copy of ``pip`` if the existing installed "
"version of ``pip`` is older than the bundled copy."
msgstr ""
"该模块被命名为 *ensure*\\ pip 是因为如果在已安装 ``pip`` 的情况下被调用，它将不做任何操作。 它还有一个 "
"``--upgrade`` 选项可以在当前已安装的 ``pip`` 版本比所捆绑的副本更旧的情况下安装所捆绑的 ``pip`` 副本。"

#: ../../whatsnew/3.4.rst:507
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.4.rst:509
msgid ""
"The new :mod:`enum` module (defined in :pep:`435`) provides a standard "
"implementation of enumeration types, allowing other modules (such as "
":mod:`socket`) to provide more informative error messages and better "
"debugging support by replacing opaque integer constants with backwards "
"compatible enumeration values."
msgstr ""
"新增的 :mod:`enum` 模块（在 :pep:`435` 中定义）提供了枚举类型的标准实现，允许其他模块（如 :mod:`socket` "
"等）通过将含义不清晰的整数常量替换为可向下兼容的枚举值来提供更具信息量的错误消息和更好的调试支持。"

#: ../../whatsnew/3.4.rst:517
msgid ":pep:`435` -- Adding an Enum type to the Python standard library"
msgstr ":pep:`435` -- 为 Python 标准库增加了 Enum 类型"

#: ../../whatsnew/3.4.rst:518
msgid ""
"PEP written by Barry Warsaw, Eli Bendersky and Ethan Furman, implemented by "
"Ethan Furman."
msgstr ""
"PEP 由 Barry Warsaw，Eli Bendersky 和 Ethan Furman 撰写 ，由 Ethan Furman 实现。"

#: ../../whatsnew/3.4.rst:525
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.4.rst:527
msgid ""
"The new :mod:`pathlib` module offers classes representing filesystem paths "
"with semantics appropriate for different operating systems.  Path classes "
"are divided between *pure paths*, which provide purely computational "
"operations without I/O, and *concrete paths*, which inherit from pure paths "
"but also provide I/O operations."
msgstr ""
"新增的 :mod:`pathlib` 模块提供了代表文件系统路径的类，其语义适用于不同的操作系统。 路径类被划分为提供不带 I/O 的纯计算操作的 "
"*纯路径*，以及继承自纯路径但提供 I/O 操作的 *实体路径*。"

#: ../../whatsnew/3.4.rst:537
msgid ":pep:`428` -- The pathlib module -- object-oriented filesystem paths"
msgstr ":pep:`428` -- pathlib 模块 -- 面向对象的文件系统路径"

#: ../../whatsnew/3.4.rst:538 ../../whatsnew/3.4.rst:1834
msgid "PEP written and implemented by Antoine Pitrou."
msgstr "PEP 由 Antoine Pitrou 撰写并实现"

#: ../../whatsnew/3.4.rst:544
msgid "selectors"
msgstr "selectors"

#: ../../whatsnew/3.4.rst:546
msgid ""
"The new :mod:`selectors` module (created as part of implementing "
":pep:`3156`) allows high-level and efficient I/O multiplexing, built upon "
"the :mod:`select` module primitives."
msgstr ""
"新增的 :mod:`selectors` 模块（作为 :pep:`3156` 实现的一部分被创建）允许高层级且高效的 I/O 多路复用，它是在 "
":mod:`select` 模块的基础上构建的。"

#: ../../whatsnew/3.4.rst:554
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.4.rst:556
msgid ""
"The new :mod:`statistics` module (defined in :pep:`450`) offers some core "
"statistics functionality directly in the standard library. This module "
"supports calculation of the mean, median, mode, variance and standard "
"deviation of a data series."
msgstr ""
"新增的 :mod:`statistics` 模块（在 :pep:`450` 中定义）直接在标准库中提供了一些核心统计功能。 "
"该模块支持计算数据系列的平均值、中位数、模式、方差和标准差等。"

#: ../../whatsnew/3.4.rst:563
msgid ":pep:`450` -- Adding A Statistics Module To The Standard Library"
msgstr ":pep:`450` -- 为标准库增加 statistics 模块"

#: ../../whatsnew/3.4.rst:564
msgid "PEP written and implemented by Steven D'Aprano"
msgstr "PEP 由 Steven D'Aprano 撰写并实现。"

#: ../../whatsnew/3.4.rst:570
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../../whatsnew/3.4.rst:572
msgid ""
"The new :mod:`tracemalloc` module (defined in :pep:`454`) is a debug tool to"
" trace memory blocks allocated by Python. It provides the following "
"information:"
msgstr ""
"新增的 :mod:`tracemalloc` 模块（在 :pep:`454` 中定义）是用于追踪由 Python 所分配的内存块的调试工具。 "
"它提供了以下信息："

#: ../../whatsnew/3.4.rst:575
msgid "Trace where an object was allocated"
msgstr "追踪对象被分配所在的位置"

#: ../../whatsnew/3.4.rst:576
msgid ""
"Statistics on allocated memory blocks per filename and per line number: "
"total size, number and average size of allocated memory blocks"
msgstr "按文件、按行统计python的内存块分配情况: 总大小、块的数量以及块平均大小。"

#: ../../whatsnew/3.4.rst:578
msgid "Compute the differences between two snapshots to detect memory leaks"
msgstr "对比两个内存快照的差异，以便排查内存泄漏"

#: ../../whatsnew/3.4.rst:582
msgid ""
":pep:`454` -- Add a new tracemalloc module to trace Python memory "
"allocations"
msgstr ":pep:`454` -- 新增 tracemalloc 模块用于追踪 Python 内存分配"

#: ../../whatsnew/3.4.rst:583
msgid "PEP written and implemented by Victor Stinner"
msgstr "PEP 由 Victor Stinner 撰写并实现"

#: ../../whatsnew/3.4.rst:588
msgid "Improved Modules"
msgstr "改进的模块"

#: ../../whatsnew/3.4.rst:592
msgid "abc"
msgstr "abc"

#: ../../whatsnew/3.4.rst:594
msgid ""
"New function :func:`abc.get_cache_token` can be used to know when to "
"invalidate caches that are affected by changes in the object graph.  "
"(Contributed by Łukasz Langa in :issue:`16832`.)"
msgstr ""
"新增的函数 :func:`abc.get_cache_token` 可被用来获知何时使得受到对象图改变影响的缓存失效。 （由 Łukasz Langa "
"在 :issue:`16832` 中贡献。）"

#: ../../whatsnew/3.4.rst:598
msgid ""
"New class :class:`~abc.ABC` has :class:`~abc.ABCMeta` as its meta class. "
"Using ``ABC`` as a base class has essentially the same effect as specifying "
"``metaclass=abc.ABCMeta``, but is simpler to type and easier to read. "
"(Contributed by Bruno Dupuis in :issue:`16049`.)"
msgstr ""
"新增的类型 :class:`~abc.ABC` 以 :class:`~abc.ABCMeta` 作为其元类。 使用 ``ABC`` "
"作为基类的效果实际上相当于指定 ``metaclass=abc.ABCMeta``，但其写法更简单也更易读。 （由 Bruno Dupuis 在 "
":issue:`16049` 中贡献。）"

#: ../../whatsnew/3.4.rst:605
msgid "aifc"
msgstr "aifc"

#: ../../whatsnew/3.4.rst:607
msgid ""
"The :meth:`!getparams` method now returns a namedtuple rather than a plain "
"tuple.  (Contributed by Claudiu Popa in :issue:`17818`.)"
msgstr ""
"现在 :meth:`!getparams` 方法将返回一个具名元组而不是普通元组。 （由 Claudiu Popa 在 :issue:`17818` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:610
msgid ""
":func:`!aifc.open` now supports the context management protocol: when used "
"in a :keyword:`with` block, the :meth:`!close` method of the returned object"
" will be called automatically at the end of the block.  (Contributed by "
"Serhiy Storchacha in :issue:`16486`.)"
msgstr ""
"现在 :func:`!aifc.open` 已支持上下文管理协议：当在 :keyword:`with` 代码块中使用时，所返回对象的 "
":meth:`!close` 方法将在代码块结束时被自动调用。 （由 Serhiy Storchacha 在 :issue:`16486` 中贡献。）"

#: ../../whatsnew/3.4.rst:615 ../../whatsnew/3.4.rst:1542
msgid ""
"The :meth:`!writeframesraw` and :meth:`!writeframes` methods now accept any "
":term:`bytes-like object`.  (Contributed by Serhiy Storchaka in "
":issue:`8311`.)"
msgstr ""
"现在 :meth:`!writeframesraw` 和 :meth:`!writeframes` 方法将接受任意 :term:`bytes-like "
"object`。 （由 Serhiy Storchaka 在 :issue:`8311` 中贡献。）"

#: ../../whatsnew/3.4.rst:621
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.4.rst:623
msgid ""
"The :class:`~argparse.FileType` class now accepts *encoding* and *errors* "
"arguments, which are passed through to :func:`open`.  (Contributed by Lucas "
"Maystre in :issue:`11175`.)"
msgstr ""
"现在 :class:`~argparse.FileType` 类可接受 *encoding* 和 *errors* 参数，它们将被传递给 "
":func:`open`。 （由 Lucas Maystre 在 :issue:`11175` 中贡献。）"

#: ../../whatsnew/3.4.rst:629
msgid "audioop"
msgstr "audioop"

#: ../../whatsnew/3.4.rst:631
msgid ""
":mod:`!audioop` now supports 24-bit samples.  (Contributed by Serhiy "
"Storchaka in :issue:`12866`.)"
msgstr ""
"现在 :mod:`!audioop` 可支持 24 位采样。 （由 Serhiy Storchaka 在 :issue:`12866` 中贡献。）"

#: ../../whatsnew/3.4.rst:634
msgid ""
"New :func:`!byteswap` function converts big-endian samples to little-endian "
"and vice versa.  (Contributed by Serhiy Storchaka in :issue:`19641`.)"
msgstr ""
"新增的 :func:`!byteswap` 函数可将大端序样本转换为小端序，并可反向转换。 （由 Serhiy Storchaka 在 "
":issue:`19641` 中贡献。）.)"

#: ../../whatsnew/3.4.rst:638
msgid ""
"All :mod:`!audioop` functions now accept any :term:`bytes-like object`.  "
"Strings are not accepted: they didn't work before, now they raise an error "
"right away. (Contributed by Serhiy Storchaka in :issue:`16685`.)"
msgstr ""
"所有 :mod:`!audioop` 函数现在可接受任意 :term:`bytes-like object`。 "
"字符串将不被接受：它们在之前也不可用，现在它们将立即引发错误。 （由 Serhiy Storchaka 在 :issue:`16685` 中贡献。）"

#: ../../whatsnew/3.4.rst:644
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.4.rst:646
msgid ""
"The encoding and decoding functions in :mod:`base64` now accept any "
":term:`bytes-like object` in cases where it previously required a "
":class:`bytes` or :class:`bytearray` instance.  (Contributed by Nick Coghlan"
" in :issue:`17839`.)"
msgstr ""
"现在 :mod:`base64` 中的编码和解码函数在之前需要 :class:`bytes` 或 :class:`bytearray` "
"实例的场合下均接受任意 :term:`bytes-like object`。 （由 Nick Coghlan 在 :issue:`17839` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:651
msgid ""
"New functions :func:`~base64.a85encode`, :func:`~base64.a85decode`, "
":func:`~base64.b85encode`, and :func:`~base64.b85decode` provide the ability"
" to encode and decode binary data from and to ``Ascii85`` and the "
"git/mercurial ``Base85`` formats, respectively.  The ``a85`` functions have "
"options that can be used to make them compatible with the variants of the "
"``Ascii85`` encoding, including the Adobe variant.  (Contributed by Martin "
"Morrison, the Mercurial project, Serhiy Storchaka, and Antoine Pitrou in "
":issue:`17618`.)"
msgstr ""
"新增的函数 :func:`~base64.a85encode`, :func:`~base64.a85decode`, "
":func:`~base64.b85encode` 以及 :func:`~base64.b85decode` 分别提供针对 ``Ascii85`` 以及"
" git/mercurial ``Base85`` 格式的二进制数据进行编码和解码的能力。 ``a85`` 函数具有可被用于使其与 "
"``Ascii85`` 编码格式的变种，包括 Adobe 变种相互兼容的选项。 （由 Martin Morrison, Mercurial 项目, "
"Serhiy Storchaka 和 Antoine Pitrou 在 :issue:`17618` 中贡献。）"

#: ../../whatsnew/3.4.rst:661
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.4.rst:663
msgid ""
"The :meth:`.ChainMap.new_child` method now accepts an *m* argument "
"specifying the child map to add to the chain.  This allows an existing "
"mapping and/or a custom mapping type to be used for the child.  (Contributed"
" by Vinay Sajip in :issue:`16613`.)"
msgstr ""
"现在 :meth:`.ChainMap.new_child` 方法接受一个 *m* 参数用于指定要向链结构中添加的子映射表。 "
"这允许将现有的映射和/或自定义映射类型用于子映射表。 （由 Vinay Sajip 在 :issue:`16613` 中贡献。）"

#: ../../whatsnew/3.4.rst:670
msgid "colorsys"
msgstr "colorsys"

#: ../../whatsnew/3.4.rst:672
msgid ""
"The number of digits in the coefficients for the RGB --- YIQ conversions "
"have been expanded so that they match the FCC NTSC versions.  The change in "
"results should be less than 1% and may better match results found elsewhere."
" (Contributed by Brian Landers and Serhiy Storchaka in :issue:`14323`.)"
msgstr ""
"用于 RGB --- YIQ 转换系数的数码位数已被扩展以使其与 FCC NTSC 版本匹配。 结果中的变化应当少于 1% "
"并可与在其他地方找到的结果更好地匹配。 （由 Brian Landers 和 Serhiy Storchaka 在 :issue:`14323` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:679
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.4.rst:681
msgid ""
"The new :class:`contextlib.suppress` context manager helps to clarify the "
"intent of code that deliberately suppresses exceptions from a single "
"statement.  (Contributed by Raymond Hettinger in :issue:`15806` and Zero "
"Piraeus in :issue:`19266`.)"
msgstr ""
"新增的 :class:`contextlib.suppress` 上下文管理器可以帮助澄清故意抑制来自单条语句的异常的代码的意图。 （由 Raymond"
" Hettinger 在 :issue:`15806` 和 Zero Piraeus 在 :issue:`19266` 中贡献。）"

#: ../../whatsnew/3.4.rst:686
msgid ""
"The new :func:`contextlib.redirect_stdout` context manager makes it easier "
"for utility scripts to handle inflexible APIs that write their output to "
":data:`sys.stdout` and don't provide any options to redirect it.  Using the "
"context manager, the :data:`sys.stdout` output can be redirected to any "
"other stream or, in conjunction with :class:`io.StringIO`, to a string. The "
"latter can be especially useful, for example, to capture output from a "
"function that was written to implement a command line interface. It is "
"recommended only for utility scripts because it affects the global state of "
":data:`sys.stdout`.  (Contributed by Raymond Hettinger in :issue:`15805`.)"
msgstr ""
"新增的 :func:`contextlib.redirect_stdout` 上下文管理器使得工具脚本能更容易地处理将输出写入 "
":data:`sys.stdout` 并且不提供任何重定向选项的不灵活 API。  使用该上下文管理器，可以将 :data:`sys.stdout` "
"的输出重定向到任何其他流，或者配合使用 :class:`io.StringIO` 来重定向到字符串。 后一种方式有时会特别有用，例如写入函数的输出来实现"
" 命令行接口。 由于它会影响 :data:`sys.stdout` 的全局状态因此只推荐用于工具脚本。 （由 Raymond Hettinger 在 "
":issue:`15805` 中贡献。）"

#: ../../whatsnew/3.4.rst:697
msgid ""
"The :mod:`contextlib` documentation has also been updated to include a "
":ref:`discussion <single-use-reusable-and-reentrant-cms>` of the differences"
" between single use, reusable and reentrant context managers."
msgstr ""
":mod:`contextlib` 文档也已获得更新以包括有关仅单用、可重用与可重入上下文管理器之间的区别的 :ref:`讨论 <single-use-"
"reusable-and-reentrant-cms>`。"

#: ../../whatsnew/3.4.rst:703
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.4.rst:705
msgid ""
":func:`dbm.open` objects now support the context management protocol.  When "
"used in a :keyword:`with` statement, the ``close`` method of the database "
"object will be called automatically at the end of the block.  (Contributed "
"by Claudiu Popa and Nick Coghlan in :issue:`19282`.)"
msgstr ""
"现在 :func:`dbm.open` 对象已支持上下文管理器协议。 当在 :keyword:`with` 语句中使用时，数据库对象的 "
"``close`` 方法将在代码块结束时被自动调用。 （由 Claudiu Popa 和 Nick Coghlan 在 :issue:`19282` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:712
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.4.rst:714
msgid ""
"Functions :func:`~dis.show_code`, :func:`~dis.dis`, :func:`~dis.distb`, and "
":func:`~dis.disassemble` now accept a keyword-only *file* argument that "
"controls where they write their output."
msgstr ""
"现在 :func:`~dis.show_code`, :func:`~dis.dis`, :func:`~dis.distb` 和 "
":func:`~dis.disassemble` 等函数可接受仅限关键字参数 *file* 来控制其输出的写入目标。"

#: ../../whatsnew/3.4.rst:718
msgid ""
"The :mod:`dis` module is now built around an :class:`~dis.Instruction` class"
" that provides object oriented access to the details of each individual "
"bytecode operation."
msgstr ""
"现在 :mod:`dis` 模块是围绕 :class:`~dis.Instruction` "
"类来构建的，该类以面向对象的访问方式提供对于每个单独字节码操作的细节。"

#: ../../whatsnew/3.4.rst:722
msgid ""
"A new method, :func:`~dis.get_instructions`, provides an iterator that emits"
" the Instruction stream for a given piece of Python code.  Thus it is now "
"possible to write a program that inspects and manipulates a bytecode object "
"in ways different from those provided by the :mod:`~dis` module itself.  For"
" example::"
msgstr ""
"新增的方法 :func:`~dis.get_instructions` 提供了一个为给定 Python 代码段产生 Instruction 流的迭代器。"
" 这使得现在可以编写以不同于由 :mod:`~dis` 模块本身所提供的方式检查和操纵字节码对象的程序。 例如::"

#: ../../whatsnew/3.4.rst:728
msgid ""
">>> import dis\n"
">>> for instr in dis.get_instructions(lambda x: x + 1):\n"
"...     print(instr.opname)\n"
"LOAD_FAST\n"
"LOAD_CONST\n"
"BINARY_ADD\n"
"RETURN_VALUE"
msgstr ""
">>> import dis\n"
">>> for instr in dis.get_instructions(lambda x: x + 1):\n"
"...     print(instr.opname)\n"
"LOAD_FAST\n"
"LOAD_CONST\n"
"BINARY_ADD\n"
"RETURN_VALUE"

#: ../../whatsnew/3.4.rst:736
msgid ""
"The various display tools in the :mod:`dis` module have been rewritten to "
"use these new components."
msgstr ":mod:`dis` 模块中的各种显示工具已被重新编写以使用这些新组件。"

#: ../../whatsnew/3.4.rst:739
msgid ""
"In addition, a new application-friendly class :class:`~dis.Bytecode` "
"provides an object-oriented API for inspecting bytecode in both in human-"
"readable form and for iterating over instructions.  The "
":class:`~dis.Bytecode` constructor takes the same arguments that "
":func:`~dis.get_instruction` does (plus an optional *current_offset*), and "
"the resulting object can be iterated to produce :class:`~dis.Instruction` "
"objects.  But it also has a :mod:`~dis.Bytecode.dis` method, equivalent to "
"calling :mod:`~dis.dis` on the constructor argument, but returned as a "
"multi-line string::"
msgstr ""
"此外，新增的对应用程序友好的类 :class:`~dis.Bytecode` 提供了一个面向对象的 API "
"用于以人类可读的形式检查字节码并对指令进行迭代。 :class:`~dis.Bytecode` 构造器接受与 "
":func:`~dis.get_instruction` 相同的参数（外加一个可选的 *current_offset* 参数），其结果对象可被迭代以产生"
" :class:`~dis.Instruction` 对象。 但它还有一个 :mod:`~dis.Bytecode.dis` "
"方法，相当于在构造器参数上调用 :mod:`~dis.dis`，但是返回一个多行字符串::"

#: ../../whatsnew/3.4.rst:748
msgid ""
">>> bytecode = dis.Bytecode(lambda x: x + 1, current_offset=3)\n"
">>> for instr in bytecode:\n"
"...     print('{} ({})'.format(instr.opname, instr.opcode))\n"
"LOAD_FAST (124)\n"
"LOAD_CONST (100)\n"
"BINARY_ADD (23)\n"
"RETURN_VALUE (83)\n"
">>> bytecode.dis().splitlines()\n"
"['  1           0 LOAD_FAST                0 (x)',\n"
" '      -->     3 LOAD_CONST               1 (1)',\n"
" '              6 BINARY_ADD',\n"
" '              7 RETURN_VALUE']"
msgstr ""
">>> bytecode = dis.Bytecode(lambda x: x + 1, current_offset=3)\n"
">>> for instr in bytecode:\n"
"...     print('{} ({})'.format(instr.opname, instr.opcode))\n"
"LOAD_FAST (124)\n"
"LOAD_CONST (100)\n"
"BINARY_ADD (23)\n"
"RETURN_VALUE (83)\n"
">>> bytecode.dis().splitlines()\n"
"['  1           0 LOAD_FAST                0 (x)',\n"
" '      -->     3 LOAD_CONST               1 (1)',\n"
" '              6 BINARY_ADD',\n"
" '              7 RETURN_VALUE']"

#: ../../whatsnew/3.4.rst:761
msgid ""
":class:`~dis.Bytecode` also has a class method, "
":meth:`~dis.Bytecode.from_traceback`, that provides the ability to "
"manipulate a traceback (that is, "
"``print(Bytecode.from_traceback(tb).dis())`` is equivalent to "
"``distb(tb)``)."
msgstr ""
":class:`~dis.Bytecode` 还有一个类方法 "
":meth:`~dis.Bytecode.from_traceback`，它提供了操纵回溯对象的能力（也就是说，``print(Bytecode.from_traceback(tb).dis())``"
" 等价于 ``distb(tb)``。）"

#: ../../whatsnew/3.4.rst:766
msgid ""
"(Contributed by Nick Coghlan, Ryan Kelly and Thomas Kluyver in "
":issue:`11816` and Claudiu Popa in :issue:`17916`.)"
msgstr ""
"（由 Nick Coghlan, Ryan Kelly 和 Thomas Kluyver 在 :issue:`11816` 并由 Claudiu "
"Popa 在 :issue:`17916` 中贡献。）"

#: ../../whatsnew/3.4.rst:769
msgid ""
"New function :func:`~dis.stack_effect` computes the effect on the Python "
"stack of a given opcode and argument, information that is not otherwise "
"available. (Contributed by Larry Hastings in :issue:`19722`.)"
msgstr ""
"新增的函数 :func:`~dis.stack_effect` 可在给定操作码和参数的 Python 栈上计算其效果，相关信息是无法以其他方式获得的。 "
"（由 Larry Hastings 在 :issue:`19722` 中贡献。）"

#: ../../whatsnew/3.4.rst:775
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.4.rst:777
msgid ""
"A new :ref:`option flag <doctest-options>`, :const:`~doctest.FAIL_FAST`, "
"halts test running as soon as the first failure is detected.  (Contributed "
"by R. David Murray and Daniel Urban in :issue:`16522`.)"
msgstr ""
"新增的 :ref:`选项旗标 <doctest-options>` :const:`~doctest.FAIL_FAST` "
"将在检测到首次失败时暂停测试运行。 （由 R. David Murray 和 Daniel Urban 在 :issue:`16522` 中贡献。）"

#: ../../whatsnew/3.4.rst:781
msgid ""
"The :mod:`doctest` command line interface now uses :mod:`argparse`, and has "
"two new options, ``-o`` and ``-f``.  ``-o`` allows :ref:`doctest options "
"<doctest-options>` to be specified on the command line, and ``-f`` is a "
"shorthand for ``-o FAIL_FAST`` (to parallel the similar option supported by "
"the :mod:`unittest` CLI).  (Contributed by R. David Murray in "
":issue:`11390`.)"
msgstr ""
"现在 :mod:`doctest` 的命令行接口使用 :mod:`argparse`，并新增了两个选项 ``-o`` 和 ``-f``。 ``-o`` "
"允许在命令行中指定 :ref:`doctest 选项 <doctest-options>`，而 ``-f`` 是 ``-o FAIL_FAST`` "
"的简写形式（与 :mod:`unittest` CLI 所支持的类似选项相对应）。 （由 R. David Murray 在 "
":issue:`11390` 中贡献。）"

#: ../../whatsnew/3.4.rst:787
msgid ""
":mod:`doctest` will now find doctests in extension module ``__doc__`` "
"strings. (Contributed by Zachary Ware in :issue:`3158`.)"
msgstr ""
"现在 :mod:`doctest` 会在扩展模块的 ``__doc__`` 字符串中查找文档测试。 （由 Zachary Ware 在 "
":issue:`3158` 中贡献。）"

#: ../../whatsnew/3.4.rst:792
msgid "email"
msgstr "email"

#: ../../whatsnew/3.4.rst:794
msgid ""
":meth:`~email.message.Message.as_string` now accepts a *policy* argument to "
"override the default policy of the message when generating a string "
"representation of it.  This means that ``as_string`` can now be used in more"
" circumstances, instead of having to create and use a "
":mod:`~email.generator` in order to pass formatting parameters to its "
"``flatten`` method.  (Contributed by R. David Murray in :issue:`18600`.)"
msgstr ""
"现在 :meth:`~email.message.Message.as_string` 接受一个 *policy* "
"参数用于在生成其字符串表示形式时重写默认的消息策略。 这意味着 ``as_string`` 现在可以在更多情况下被使用，而不必创建和使用 "
":mod:`~email.generator` 来将已格式化的形参传递给其 ``flatten`` 方法。 （由 R. David Murray 在 "
":issue:`18600` 中贡献。）"

#: ../../whatsnew/3.4.rst:801
msgid ""
"New method :meth:`~email.message.Message.as_bytes` added to produce a bytes "
"representation of the message in a fashion similar to how ``as_string`` "
"produces a string representation.  It does not accept the *maxheaderlen* "
"argument, but does accept the *unixfrom* and *policy* arguments. The "
":class:`~email.message.Message` :meth:`~email.message.Message.__bytes__` "
"method calls it, meaning that ``bytes(mymsg)`` will now produce the "
"intuitive result:  a bytes object containing the fully formatted message.  "
"(Contributed by R. David Murray in :issue:`18600`.)"
msgstr ""
"新增方法 :meth:`~email.message.Message.as_bytes` 用于产生消息的与 ``as_string`` "
"所产生的字符串表示形式类似的字节串表示形式。 它不接受 *maxheaderlen* 参数，但接受 *unixfrom* 和 *policy* 参数。 "
":class:`~email.message.Message` 的 :meth:`~email.message.Message.__bytes__` "
"方法将调用它，这意味着现在 ``bytes(mymsg)`` 将产生直观的结果：一个包含完整已格式化消息的字节串对象。 （由 R. David "
"Murray 在 :issue:`18600` 中贡献。）"

#: ../../whatsnew/3.4.rst:810
msgid ""
"The :meth:`.Message.set_param` message now accepts a *replace* keyword "
"argument. When specified, the associated header will be updated without "
"changing its location in the list of headers.  For backward compatibility, "
"the default is ``False``.  (Contributed by R. David Murray in "
":issue:`18891`.)"
msgstr ""
"现在 :meth:`.Message.set_param` 消息接受一个 *replace* 关键字参数。 "
"当指定该参数时，关联的标头将被更新而不会修改其在标头列表中的位置。 为了保持向下兼容，该参数默认值为 ``False``。 （由 R. David "
"Murray 在 :issue:`18891` 中贡献。）"

#: ../../whatsnew/3.4.rst:818
msgid ""
"A pair of new subclasses of :class:`~email.message.Message` have been added "
"(:class:`.EmailMessage` and :class:`.MIMEPart`), along with a new sub-"
"module, :mod:`~email.contentmanager` and a new :mod:`~email.policy` "
"attribute :attr:`~email.policy.EmailPolicy.content_manager`.  All "
"documentation is currently in the new module, which is being added as part "
"of email's new :term:`provisional API`.  These classes provide a number of "
"new methods that make extracting content from and inserting content into "
"email messages much easier.  For details, see the "
":mod:`~email.contentmanager` documentation and the :ref:`email-examples`.  "
"These API additions complete the bulk of the work that was planned as part "
"of the email6 project.  The currently provisional API is scheduled to become"
" final in Python 3.5 (possibly with a few minor additions in the area of "
"error handling).  (Contributed by R. David Murray in :issue:`18891`.)"
msgstr ""
"新增了一对 :class:`~email.message.Message` 的子类 (:class:`.EmailMessage` 和 "
":class:`.MIMEPart`)，以及新的子模块 :mod:`~email.contentmanager` 和新的 "
":mod:`~email.policy` 属性 :attr:`~email.policy.EmailPolicy.content_manager`。 "
"所有文档目前都在新模块中，它是作为 email 的新 :term:`provisional API` 的一部分添加的。 "
"这些类提供了多个使从内容提取邮件消息和插入内容到消息更容易的新方法。 相关细节，请参阅 :mod:`~email.contentmanager` 文档和"
" :ref:`email-examples`。 这些 API 的加入完成了作为 email6 项目计划组成部分的大部分工作。 目前的暂定 API 计划在"
" Python 3.5 最终确定 (可能在错误处理方面再增加少量内容)。 （由 R. David Murray 在 :issue:`18891` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:834
msgid "filecmp"
msgstr "filecmp"

#: ../../whatsnew/3.4.rst:836
msgid ""
"A new :func:`~filecmp.clear_cache` function provides the ability to clear "
"the :mod:`filecmp` comparison cache, which uses :func:`os.stat` information "
"to determine if the file has changed since the last compare.  This can be "
"used, for example, if the file might have been changed and re-checked in "
"less time than the resolution of a particular filesystem's file modification"
" time field. (Contributed by Mark Levitt in :issue:`18149`.)"
msgstr ""
"新增的 :func:`~filecmp.clear_cache` 函数提供了清除 :mod:`filecmp` 比较缓存的功能，它使用 "
":func:`os.stat` 信息来确定文件自上次比较后是否发生了更改。 "
"例如，如果文件被修改和重新检查的时间短于特定文件系统文件修改时间的精度就可使用这一功能。 （由 Mark Levitt 在 :issue:`18149`"
" 中贡献。）"

#: ../../whatsnew/3.4.rst:843
msgid ""
"New module attribute :const:`~filecmp.DEFAULT_IGNORES` provides the list of "
"directories that are used as the default value for the *ignore* parameter of"
" the :func:`~filecmp.dircmp` function.  (Contributed by Eli Bendersky in "
":issue:`15442`.)"
msgstr ""
"新增的模块属性 :const:`~filecmp.DEFAULT_IGNORES` 提供了作为 :func:`~filecmp.dircmp` 函数的 "
"*ignore* 形参默认值的目录列表。 （由 Eli Bendersky 在 :issue:`15442` 中贡献。）"

#: ../../whatsnew/3.4.rst:850
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.4.rst:852
msgid ""
"The new :func:`~functools.partialmethod` descriptor brings partial argument "
"application to descriptors, just as :func:`~functools.partial` provides for "
"normal callables. The new descriptor also makes it easier to get arbitrary "
"callables (including :func:`~functools.partial` instances) to behave like "
"normal instance methods when included in a class definition. (Contributed by"
" Alon Horev and Nick Coghlan in :issue:`4331`.)"
msgstr ""
"新增的 :func:`~functools.partialmethod` 描述器提供了对描述器的部分参数应用，就像 "
":func:`~functools.partial` 为普通可调用对象提供的一样。 新的描述器还可以让任意可调用对象 （包括 "
":func:`~functools.partial` 实例）在包括在类定义中时表现得像普通的实例方法一样。 （由 Alon Horev 和 Nick "
"Coghlan 在 :issue:`4331` 中贡献。）"

#: ../../whatsnew/3.4.rst:861
msgid ""
"The new :func:`~functools.singledispatch` decorator brings support for "
"single-dispatch generic functions to the Python standard library. Where "
"object oriented programming focuses on grouping multiple operations on a "
"common set of data into a class, a generic function focuses on grouping "
"multiple implementations of an operation that allows it to work with "
"*different* kinds of data."
msgstr ""
"新增的 :func:`~functools.singledispatch` 装饰器为 Python 标准库带来了对单分派泛型函数的支持。 "
"面向对象编程侧重于将对一组共同数据的多种操作组合到一个类中，而泛型函数则侧重于将一种操作的多个实现组合在一起使其能够处理 *不同* 种类的数据。"

#: ../../whatsnew/3.4.rst:870
msgid ":pep:`443` -- Single-dispatch generic functions"
msgstr ":pep:`443` -- 单分派泛型函数"

#: ../../whatsnew/3.4.rst:871
msgid "PEP written and implemented by Łukasz Langa."
msgstr "PEP 由 Łukasz Langa 撰写并实现。"

#: ../../whatsnew/3.4.rst:873
msgid ""
":func:`~functools.total_ordering` now supports a return value of "
":data:`NotImplemented` from the underlying comparison function.  "
"(Contributed by Katie Miller in :issue:`10042`.)"
msgstr ""
"现在 :func:`~functools.total_ordering` 支持从下层的比较函数返回 :data:`NotImplemented` "
"作为返回值。 （由 Katie Miller 在 :issue:`10042` 中贡献。）"

#: ../../whatsnew/3.4.rst:877
msgid ""
"A pure-python version of the :func:`~functools.partial` function is now in "
"the stdlib; in CPython it is overridden by the C accelerated version, but it"
" is available for other implementations to use.  (Contributed by Brian "
"Thorne in :issue:`12428`.)"
msgstr ""
"现在标准库中增加了 :func:`~functools.partial` 函数的纯 Python 版本；在 CPython 中它会被 C "
"加速版本覆盖，但它以供其他实现来使用。 （由 Brian Thorne 在 :issue:`12428` 中贡献。）"

#: ../../whatsnew/3.4.rst:884
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.4.rst:886
msgid ""
"New function :func:`~gc.get_stats` returns a list of three per-generation "
"dictionaries containing the collections statistics since interpreter "
"startup. (Contributed by Antoine Pitrou in :issue:`16351`.)"
msgstr ""
"新增的函数 :func:`~gc.get_stats` 可返回由三个单独生成字典组成的列表，每个字典均包含自解释器启动以来收集的统计信息。 （由 "
"Antoine Pitrou 在 :issue:`16351` 中贡献。）"

#: ../../whatsnew/3.4.rst:892
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.4.rst:894
msgid ""
"A new function :func:`~glob.escape` provides a way to escape special "
"characters in a filename so that they do not become part of the globbing "
"expansion but are instead matched literally.  (Contributed by Serhiy "
"Storchaka in :issue:`8402`.)"
msgstr ""
"新增函数 :func:`~glob.escape` 提供了为文件名中的特殊字符进行转义的方式以使它们不会成为 glob "
"扩展的组成部分而是按字面值来匹配。 （由 Serhiy Storchaka 在 :issue:`8402` 中贡献。）"

#: ../../whatsnew/3.4.rst:900
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.4.rst:902
msgid ""
"A new :func:`hashlib.pbkdf2_hmac` function provides the `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_.  "
"(Contributed by Christian Heimes in :issue:`18582`.)"
msgstr ""
"新增的 :func:`hashlib.pbkdf2_hmac` 函数提供了 `PKCS#5 基于口令的密钥派生函数 2 "
"<https://en.wikipedia.org/wiki/PBKDF2>`_。 （由 Christian Heimes 在 "
":issue:`18582` 中贡献。）"

#: ../../whatsnew/3.4.rst:907
msgid ""
"The :attr:`~hashlib.hash.name` attribute of :mod:`hashlib` hash objects is "
"now a formally supported interface.  It has always existed in CPython's "
":mod:`hashlib` (although it did not return lower case names for all "
"supported hashes), but it was not a public interface and so some other "
"Python implementations have not previously supported it.  (Contributed by "
"Jason R. Coombs in :issue:`18532`.)"
msgstr ""
"现在 :mod:`hashlib` 哈希对象的 :attr:`~hashlib.hash.name` 属性已成为受正式支持的接口。 它一直存在于 "
"CPython 的 :mod:`hashlib` 中（尽管它没有返回所有受支持的哈希算法的小写名称），但它不是一个公开的接口因此其他一些 Python "
"实现以前并不支持它。 （由 Jason R. Coombs 在 :issue:`18532` 中提供。）"

#: ../../whatsnew/3.4.rst:916
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.4.rst:918
msgid ""
":mod:`hmac` now accepts ``bytearray`` as well as ``bytes`` for the *key* "
"argument to the :func:`~hmac.new` function, and the *msg* parameter to both "
"the :func:`~hmac.new` function and the :meth:`~hmac.HMAC.update` method now "
"accepts any type supported by the :mod:`hashlib` module.  (Contributed by "
"Jonas Borgström in :issue:`18240`.)"
msgstr ""
"现在 :mod:`hmac` 可接受 ``bytearray`` 和 ``bytes`` 作为传给 :func:`~hmac.new` 函数的 "
"*key* 参数，而传给 :func:`~hmac.new` 函数和 :meth:`~hmac.HMAC.update` 方法的 *msg* "
"形参现在可接受 :mod:`hashlib` 模块所支持的任何类型。 （由 Jonas Borgström 的 :issue:`18240` 中贡献。）"

#: ../../whatsnew/3.4.rst:924
msgid ""
"The *digestmod* argument to the :func:`hmac.new` function may now be any "
"hash digest name recognized by :mod:`hashlib`.  In addition, the current "
"behavior in which the value of *digestmod* defaults to ``MD5`` is "
"deprecated: in a future version of Python there will be no default value.  "
"(Contributed by Christian Heimes in :issue:`17276`.)"
msgstr ""
"传给 :func:`hmac.new` 函数的 *digestmod* 参数现在可以是 :mod:`hashlib` 能识别的任何哈希摘要名称。 "
"此外，当前将 *digestmod* 默认值设为 ``MD5`` 的行为已被弃用：在未来的 Python 版本中将没有默认值。 （由 Christian"
" Heimes 在 :issue:`17276` 中贡献。）"

#: ../../whatsnew/3.4.rst:930
msgid ""
"With the addition of :attr:`~hmac.HMAC.block_size` and "
":attr:`~hmac.HMAC.name` attributes (and the formal documentation of the "
":attr:`~hmac.HMAC.digest_size` attribute), the :mod:`hmac` module now "
"conforms fully to the :pep:`247` API. (Contributed by Christian Heimes in "
":issue:`18775`.)"
msgstr ""
"由于增加了 :attr:`~hmac.HMAC.block_size` 和 :attr:`~hmac.HMAC.name` 属性 （以及 "
":attr:`~hmac.HMAC.digest_size` 属性的正式文档），:mod:`hmac` 模块现在已完全符合 :pep:`247` "
"API。 （由 Christian Heimes 在 :issue:`18775` 中贡献。）"

#: ../../whatsnew/3.4.rst:937
msgid "html"
msgstr "html"

#: ../../whatsnew/3.4.rst:939
msgid ""
"New function :func:`~html.unescape` function converts HTML5 character "
"references to the corresponding Unicode characters.  (Contributed by Ezio "
"Melotti in :issue:`2927`.)"
msgstr ""
"新增的函数 :func:`~html.unescape` 用于将 HTML5 字符引用转换为相应的 Unicode 字符。 （由 Ezio "
"Melotti 在 :issue:`2927` 中贡献。）.)"

#: ../../whatsnew/3.4.rst:943
msgid ""
":class:`~html.parser.HTMLParser` accepts a new keyword argument "
"*convert_charrefs* that, when ``True``, automatically converts all character"
" references.  For backward-compatibility, its value defaults to ``False``, "
"but it will change to ``True`` in a future version of Python, so you are "
"invited to set it explicitly and update your code to use this new feature.  "
"(Contributed by Ezio Melotti in :issue:`13633`.)"
msgstr ""
":class:`~html.parser.HTMLParser` 接受新的关键字参数 *convert_charrefs*，当其为 ``True`` "
"时，会自动转换所有字符引用。 为了保持向下兼容，其值默认为 ``False``，但在未来的 Python 版本中将改为 "
"``True``，因此建议你显式地设置它并更新代码以使用这个新特性。 （由 Ezio Melotti 在 :issue:`13633` 中贡献。）"

#: ../../whatsnew/3.4.rst:950
msgid ""
"The *strict* argument of :class:`~html.parser.HTMLParser` is now deprecated."
" (Contributed by Ezio Melotti in :issue:`15114`.)"
msgstr ""
"现在 :class:`~html.parser.HTMLParser` 的 *strict* 参数已被弃用。 （由 Ezio Melotti 在 "
":issue:`15114` 中贡献。）"

#: ../../whatsnew/3.4.rst:955
msgid "http"
msgstr "http"

#: ../../whatsnew/3.4.rst:957
msgid ""
":meth:`~http.server.BaseHTTPRequestHandler.send_error` now accepts an "
"optional additional *explain* parameter which can be used to provide an "
"extended error description, overriding the hardcoded default if there is "
"one. This extended error description will be formatted using the "
":attr:`~http.server.HTTP.error_message_format` attribute and sent as the "
"body of the error response.  (Contributed by Karl Cow in :issue:`12921`.)"
msgstr ""
"现在 :meth:`~http.server.BaseHTTPRequestHandler.send_error` 接受可选的附加形参 "
"*explain* 用于提供扩展的错误描述，覆盖可能存在的硬编码的默认值。 这个扩展的描述将使用 "
":attr:`~http.server.HTTP.error_message_format` 进行格式化并作为错误响应体发送。 （由 Karl Cow "
"在 :issue:`12921` 中贡献。）"

#: ../../whatsnew/3.4.rst:964
msgid ""
"The :mod:`http.server` :ref:`command line interface <http-server-cli>` now "
"has a ``-b/--bind`` option that causes the server to listen on a specific "
"address. (Contributed by Malte Swart in :issue:`17764`.)"
msgstr ""
"现在 :mod:`http.server` :ref:`命令行界面 <http-server-cli>` 增加了一个 ``-b/--bind`` "
"选项用于让服务器在指定的地址上进行监听。 （由 Malte Swart 在 :issue:`17764` 中贡献。）"

#: ../../whatsnew/3.4.rst:970
msgid "idlelib and IDLE"
msgstr "idlelib 与 IDLE"

#: ../../whatsnew/3.4.rst:972
msgid ""
"Since idlelib implements the IDLE shell and editor and is not intended for "
"import by other programs, it gets improvements with every release. See "
":file:`Lib/idlelib/NEWS.txt` for a cumulative list of changes since 3.3.0, "
"as well as changes made in future 3.4.x releases. This file is also "
"available from the IDLE :menuselection:`Help --> About IDLE` dialog."
msgstr ""
"由于 idlelib 实现了 IDLE 命令行界面和编辑器且不应被其他程序导入，它将随每个发布版获得改进。 请参阅 "
":file:`Lib/idlelib/NEWS.txt` 查看 3.3.0 以来的累积变化列表，以及未来 3.4.x 发布版即将发生的变化。 "
"此文件也可通过 IDLE :menuselection:`Help --> About IDLE` 对话框来查看。"

#: ../../whatsnew/3.4.rst:980
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.4.rst:982
msgid ""
"The :class:`~importlib.abc.InspectLoader` ABC defines a new method, "
":meth:`~importlib.abc.InspectLoader.source_to_code` that accepts source data"
" and a path and returns a code object.  The default implementation is "
"equivalent to ``compile(data, path, 'exec', dont_inherit=True)``. "
"(Contributed by Eric Snow and Brett Cannon in :issue:`15627`.)"
msgstr ""
":class:`~importlib.abc.InspectLoader` ABC 定义了一个新方法 "
":meth:`~importlib.abc.InspectLoader.source_to_code`，它接受源数据和一个路径并返回一个代码对象。 "
"其默认实现等价于 ``compile(data, path, 'exec', dont_inherit=True)``。 （由 Eric Snow 和 "
"Brett Cannon 在 :issue:`15627` 中贡献。）"

#: ../../whatsnew/3.4.rst:988
msgid ""
":class:`~importlib.abc.InspectLoader` also now has a default implementation "
"for the :meth:`~importlib.abc.InspectLoader.get_code` method.  However, it "
"will normally be desirable to override the default implementation for "
"performance reasons.  (Contributed by Brett Cannon in :issue:`18072`.)"
msgstr ""
"现在 :class:`~importlib.abc.InspectLoader` 也具有 "
":meth:`~importlib.abc.InspectLoader.get_code` 方法的默认实现。 不过，出于性能原因通常需要重写默认实现。 "
"（由 Brett Cannon 在 :issue:`18072` 中贡献。）"

#: ../../whatsnew/3.4.rst:993
msgid ""
"The :func:`~importlib.reload` function has been moved from :mod:`!imp` to "
":mod:`importlib` as part of the :mod:`!imp` module deprecation.  "
"(Contributed by Berker Peksag in :issue:`18193`.)"
msgstr ""
"由于 :mod:`!imp` 模块被弃用 :func:`~importlib.reload` 函数已从 :mod:`!imp` 移至 "
":mod:`importlib`。 （由 Berker Peksag 在 :issue:`18193` 中贡献。）"

#: ../../whatsnew/3.4.rst:997
msgid ""
":mod:`importlib.util` now has a :const:`~importlib.util.MAGIC_NUMBER` "
"attribute providing access to the bytecode version number.  This replaces "
"the :func:`!get_magic` function in the deprecated :mod:`!imp` module. "
"(Contributed by Brett Cannon in :issue:`18192`.)"
msgstr ""
"现在 :mod:`importlib.util` 有一个 :const:`~importlib.util.MAGIC_NUMBER` "
"属性提供对字节码版本号的访问。 该属性将取代已弃用的 :mod:`!imp` 模块中的 :func:`!get_magic` 函数。 （由 Brett "
"Cannon 在 :issue:`18192` 中贡献。）"

#: ../../whatsnew/3.4.rst:1002
msgid ""
"New :mod:`importlib.util` functions "
":func:`~importlib.util.cache_from_source` and "
":func:`~importlib.util.source_from_cache` replace the same-named functions "
"in the deprecated :mod:`!imp` module.  (Contributed by Brett Cannon in "
":issue:`18194`.)"
msgstr ""
"新增的 :mod:`importlib.util` 函数 :func:`~importlib.util.cache_from_source` 和 "
":func:`~importlib.util.source_from_cache` 替换了已弃用的 :mod:`!imp` 模块中的同名函数。 （由 "
"Brett Cannon 在 :issue:`18194` 中贡献。）"

#: ../../whatsnew/3.4.rst:1007
msgid ""
"The :mod:`importlib` bootstrap :class:`.NamespaceLoader` now conforms to the"
" :class:`.InspectLoader` ABC, which means that ``runpy`` and ``python -m`` "
"can now be used with namespace packages.  (Contributed by Brett Cannon in "
":issue:`18058`.)"
msgstr ""
"现在 :mod:`importlib` 将以符合 :class:`.InspectLoader` ABC 的方式初始设置 "
":class:`.NamespaceLoader`，这意味着 ``runpy `` 和``python -m`` 现在可以与命名空间包一起使用。 （由 "
"Brett Cannon 在 :issue:`18058` 中贡献。）"

#: ../../whatsnew/3.4.rst:1012
msgid ""
":mod:`importlib.util` has a new function "
":func:`~importlib.util.decode_source` that decodes source from bytes using "
"universal newline processing.  This is useful for implementing "
":meth:`.InspectLoader.get_source` methods."
msgstr ""
":mod:`importlib.util` 中新增的函数 :func:`~importlib.util.decode_source` "
"可使用通用换行处理方式从字节数据中解码源代码。 这适用于实现 :meth:`.InspectLoader.get_source` 方法。"

#: ../../whatsnew/3.4.rst:1016
msgid ""
":class:`importlib.machinery.ExtensionFileLoader` now has a "
":meth:`~importlib.machinery.ExtensionFileLoader.get_filename` method.  This "
"was inadvertently omitted in the original implementation.  (Contributed by "
"Eric Snow in :issue:`19152`.)"
msgstr ""
"现在 :class:`importlib.machinery.ExtensionFileLoader` 增加了 "
":meth:`~importlib.machinery.ExtensionFileLoader.get_filename` 方法。 "
"此方法在最初的实现中意外缺失。 （由 Eric Snow 在 :issue:`19152` 中贡献。）"

#: ../../whatsnew/3.4.rst:1023
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.4.rst:1025
msgid ""
"The :mod:`inspect` module now offers a basic :ref:`command line interface "
"<inspect-module-cli>` to quickly display source code and other information "
"for modules, classes and functions.  (Contributed by Claudiu Popa and Nick "
"Coghlan in :issue:`18626`.)"
msgstr ""
"现在 :mod:`inspect` 模块提供了一个基本的 :ref:`命令行界面 <inspect-module-cli>` "
"用于快速显示模块、类和函数的源代码以及其他信息。 （由 Claudiu Popa 和 Nick Coghlan 在 :issue:`18626` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1030
msgid ""
":func:`~inspect.unwrap` makes it easy to unravel wrapper function chains "
"created by :func:`functools.wraps` (and any other API that sets the "
"``__wrapped__`` attribute on a wrapper function).  (Contributed by Daniel "
"Urban, Aaron Iles and Nick Coghlan in :issue:`13266`.)"
msgstr ""
":func:`~inspect.unwrap` 用于方便地解开由 :func:`functools.wraps` (以及任何在包装器函数上设置 "
"``__wrapped__`` 属性的 API) 创建的包装器函数链。 （由 Daniel Urban, Aaron Iles 和 Nick "
"Coghlan 在 :issue:`13266` 中贡献。）"

#: ../../whatsnew/3.4.rst:1035
msgid ""
"As part of the implementation of the new :mod:`enum` module, the "
":mod:`inspect` module now has substantially better support for custom "
"``__dir__`` methods and dynamic class attributes provided through "
"metaclasses.  (Contributed by Ethan Furman in :issue:`18929` and "
":issue:`19030`.)"
msgstr ""
"作为新的 :mod:`enum` 模块实现的一部分，现在 :mod:`inspect` 模块通过元类为自定义 ``__dir__`` "
"方法和动态类属性提供了更好的支持。 （由 Ethan Furman 在 :issue:`18929` 和 :issue:`19030` 中贡献。）"

#: ../../whatsnew/3.4.rst:1041
msgid ""
":func:`~inspect.getfullargspec` and :func:`~inspect.getargspec` now use the "
":func:`~inspect.signature` API. This allows them to support a much broader "
"range of callables, including those with ``__signature__`` attributes, those"
" with metadata provided by argument clinic, :func:`functools.partial` "
"objects and more. Note that, unlike :func:`~inspect.signature`, these "
"functions still ignore ``__wrapped__`` attributes, and report the already "
"bound first argument for bound methods, so it is still necessary to update "
"your code to use :func:`~inspect.signature` directly if those features are "
"desired. (Contributed by Yury Selivanov in :issue:`17481`.)"
msgstr ""
"现在 :func:`~inspect.getfullargspec` 和 :func:`~inspect.getargspec` 将使用 "
":func:`~inspect.signature` API。 这允许它们支持更多种类的可调用对象，包括具有 ``__signature__`` "
"属性的、具有通过 argument clinic 提供元数据的、:func:`functools.partial` 对象等等。 请注意，不同于 "
":func:`~inspect.signature`，这些函数仍然会忽略 ``__wrapped__`` "
"属性，并会报告绑定方法已绑定的第一个参数，所以如果想要这些特性的话你仍然需要更新你的代码以直接使用 "
":func:`~inspect.signature`。 （由 Yury Selivanov 在 :issue:`17481` 中贡献。）"

#: ../../whatsnew/3.4.rst:1052
msgid ""
":func:`~inspect.signature` now supports duck types of CPython functions, "
"which adds support for functions compiled with Cython.  (Contributed by "
"Stefan Behnel and Yury Selivanov in :issue:`17159`.)"
msgstr ""
"现在 :func:`~inspect.signature` 支持 CPython 函数的鸭子类型，它增加了对使用 Cython 编译的函数的支持。 （由"
" Stefan Behnel 和 Yury Selivanov 在 :issue:`17159` 中贡献。）"

#: ../../whatsnew/3.4.rst:1058
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.4.rst:1060
msgid ""
":mod:`ipaddress` was added to the standard library in Python 3.3 as a "
":term:`provisional API`. With the release of Python 3.4, this qualification "
"has been removed: :mod:`ipaddress` is now considered a stable API, covered "
"by the normal standard library requirements to maintain backwards "
"compatibility."
msgstr ""
":mod:`ipaddress` 已在 Python 3.3 中作为 :term:`provisional API` 被添加到标准库。 随着 "
"Python 3.4 的发布，此限定已被移除：现在 :mod:`ipaddress` 属于稳定 API，由常规的标准库需求所覆盖以维护向下兼容性。"

#: ../../whatsnew/3.4.rst:1066
msgid ""
"A new :attr:`~ipaddress.IPv4Address.is_global` property is ``True`` if an "
"address is globally routeable.  (Contributed by Peter Moody in "
":issue:`17400`.)"
msgstr ""
"如果一个地址是全局可路由的则新增的 :attr:`~ipaddress.IPv4Address.is_global` 属性将为 ``True``。 （由"
" Peter Moody 在 :issue:`17400` 中贡献。）"

#: ../../whatsnew/3.4.rst:1072
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.4.rst:1074
msgid ""
"The :class:`~logging.handlers.TimedRotatingFileHandler` has a new *atTime* "
"parameter that can be used to specify the time of day when rollover should "
"happen.  (Contributed by Ronald Oussoren in :issue:`9556`.)"
msgstr ""
":class:`~logging.handlers.TimedRotatingFileHandler` 新增的 *atTime* "
"形参可被用于指定每日要执行日志文件轮转的时间。 （由 Ronald Oussoren 在 :issue:`9556` 中贡献。）"

#: ../../whatsnew/3.4.rst:1078
msgid ""
":class:`~logging.handlers.SocketHandler` and "
":class:`~logging.handlers.DatagramHandler` now support Unix domain sockets "
"(by setting *port* to ``None``).  (Contributed by Vinay Sajip in commit "
"ce46195b56a9.)"
msgstr ""
"现在 :class:`~logging.handlers.SocketHandler` 和 "
":class:`~logging.handlers.DatagramHandler` 已支持 Unix 域套接字 (通过将 *port* 设为 "
"``None``)。 （由 Vinay Sajip 在 commit ce46195b56a9 中贡献。）"

#: ../../whatsnew/3.4.rst:1083
msgid ""
":func:`~logging.config.fileConfig` now accepts a "
":class:`configparser.RawConfigParser` subclass instance for the *fname* "
"parameter.  This facilitates using a configuration file when logging "
"configuration is just a part of the overall application configuration, or "
"where the application modifies the configuration before passing it to "
":func:`~logging.config.fileConfig`.  (Contributed by Vinay Sajip in "
":issue:`16110`.)"
msgstr ""
"现在 :func:`~logging.config.fileConfig` 接受一个 "
":class:`configparser.RawConfigParser` 子类实例作为 *fname* 形参。 "
"这有助于在日志配置只是整体应用程序配置的一部分，或者在将配置传递给 :func:`~logging.config.fileConfig` "
"之前对其进行了修改时使用配置文件。 （由 Vinay Sajip 在 :issue:`16110` 中贡献。）"

#: ../../whatsnew/3.4.rst:1091
msgid ""
"Logging configuration data received from a socket via the "
":func:`logging.config.listen` function can now be validated before being "
"processed by supplying a verification function as the argument to the new "
"*verify* keyword argument.  (Contributed by Vinay Sajip in :issue:`15452`.)"
msgstr ""
"现在通过 :func:`logging.config.listen` 函数从套接字接收的日志配置数据可以在处理前以将验证函数作为参数提供给新的 "
"*verify* 关键字参数 的方式执行验证。 （由 Vinay Sajip 在 :issue:`15452` 中贡献。）"

#: ../../whatsnew/3.4.rst:1100
msgid "marshal"
msgstr "marshal"

#: ../../whatsnew/3.4.rst:1102
msgid ""
"The default :mod:`marshal` version has been bumped to 3.  The code "
"implementing the new version restores the Python2 behavior of recording only"
" one copy of interned strings and preserving the interning on "
"deserialization, and extends this \"one copy\" ability to any object type "
"(including handling recursive references).  This reduces both the size of "
"``.pyc`` files and the amount of memory a module occupies in memory when it "
"is loaded from a ``.pyc`` (or ``.pyo``) file.  (Contributed by Kristján "
"Valur Jónsson in :issue:`16475`, with additional speedups by Antoine Pitrou "
"in :issue:`19219`.)"
msgstr ""
"默认的 :mod:`marshal` 版本已被提升至 3。 新版本的代码实现恢复了 Python2 "
"行为即只记录内联字符串的一份副本并在反序列化时保留内联状态，并将此“一份副本”功能扩展到任何对象类型（包括处理递归引用）。 这既减少了 ``.pyc``"
" 文件的大小也减少了模块从 ``.pyc`` (或``.pyo``) 文件加载时占用的内存量。 （由 Kristján Valur Jónsson 在 "
":issue:`16475` 中贡献，并由 Antoine Pitrou 在 :issue:`19219` 中提供进一步的加速。）"

#: ../../whatsnew/3.4.rst:1113
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.4.rst:1115
msgid ""
"mmap objects are now :ref:`weakly referenceable <mod-weakref>`. (Contributed"
" by Valerie Lambert in :issue:`4885`.)"
msgstr ""
"现在 mmap 对象将是 :ref:`可弱引用的 <mod-weakref>`。 （由 Valerie Lambert 在 :issue:`4885` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1120
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.4.rst:1124
msgid ""
"On Unix two new :ref:`start methods <multiprocessing-start-methods>`, "
"``spawn`` and ``forkserver``, have been added for starting processes using "
":mod:`multiprocessing`.  These make the mixing of processes with threads "
"more robust, and the ``spawn`` method matches the semantics that "
"multiprocessing has always used on Windows.  New function "
":func:`~multiprocessing.get_all_start_methods` reports all start methods "
"available on the platform, :func:`~multiprocessing.get_start_method` reports"
" the current start method, and :func:`~multiprocessing.set_start_method` "
"sets the start method.  (Contributed by Richard Oudkerk in :issue:`8713`.)"
msgstr ""
"在 Unix 上新增了两个 :ref:`启动方法 <multiprocessing-start-methods>` ``spawn`` 和 "
"``forkserver`` 可使用 :mod:`multiprocessing` 来启动进程。 这两个方法使得进程和线程的混合更为健壮，并且 "
"``spawn`` 方法可以匹配 multiprocessing 在 Windows 上一直使用的语法。 新增的函数 "
":func:`~multiprocessing.get_all_start_methods` "
"可报告平台上可用的所有启动方法，:func:`~multiprocessing.get_start_method` 可报告当前的启动方法，而 "
":func:`~multiprocessing.set_start_method` 可设置启动方法。 （由 Richard Oudkerk 在 "
":issue:`8713` 中贡献。）"

#: ../../whatsnew/3.4.rst:1134
msgid ""
":mod:`multiprocessing` also now has the concept of a ``context``, which "
"determines how child processes are created.  New function "
":func:`~multiprocessing.get_context` returns a context that uses a specified"
" start method.  It has the same API as the :mod:`multiprocessing` module "
"itself, so you can use it to create :class:`~multiprocessing.pool.Pool`\\ s "
"and other objects that will operate within that context.  This allows a "
"framework and an application or different parts of the same application to "
"use multiprocessing without interfering with each other.  (Contributed by "
"Richard Oudkerk in :issue:`18999`.)"
msgstr ""
"现在 :mod:`multiprocessing` 还具有 ``上下文`` 的概念，它决定了子进程的创建方式。 新增的函数 "
":func:`~multiprocessing.get_context` 可返回一个使用指定启动方法的上下文。 它具有与 "
":mod:`multiprocessing` 模块本身一致的 API，因此你可以使用它来创建 "
":class:`~multiprocessing.pool.Pool` 和其他在上下文中执行操作的对象。 "
"这允许一个框架和某个应用程序或相同应用程序的不同部分使用多进程而不会彼此干扰。 （由 Richard Oudkerk 在 :issue:`18999` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1144
msgid ""
"Except when using the old *fork* start method, child processes no longer "
"inherit unneeded handles/file descriptors from their parents (part of "
":issue:`8713`)."
msgstr "除非是在使用旧的 *fork* 启动方法，子进程将不再从其父进程继承不需要的句柄/文件描述符 (:issue:`8713` 的一部分)。"

#: ../../whatsnew/3.4.rst:1148
msgid ""
":mod:`multiprocessing` now relies on :mod:`runpy` (which implements the "
"``-m`` switch) to initialise ``__main__`` appropriately in child processes "
"when using the ``spawn`` or ``forkserver`` start methods. This resolves some"
" edge cases where combining multiprocessing, the ``-m`` command line switch,"
" and explicit relative imports could cause obscure failures in child "
"processes.  (Contributed by Nick Coghlan in :issue:`19946`.)"
msgstr ""
"现在当使用 ``spawn`` 或 ``forkserver`` 启动方法时 :mod:`multiprocessing` 依赖于 "
":mod:`runpy` (它实现了 ``-m`` 开关) 在子进程中正确地初始化 ``__main__``。 "
"这解决了一些合并多进程操作中，``-m`` 命令行开关和显式相对导入可能在子进程中导致失败的边缘场景问题。 （由 Nick Coghlan 在 "
":issue:`19946` 中贡献。）"

#: ../../whatsnew/3.4.rst:1157
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.4.rst:1159
msgid ""
"New function :func:`~operator.length_hint` provides an implementation of the"
" specification for how the :meth:`~object.__length_hint__` special method "
"should be used, as part of the :pep:`424` formal specification of this "
"language feature.  (Contributed by Armin Ronacher in :issue:`16148`.)"
msgstr ""
"新增的函数 :func:`~operator.length_hint` 提供了应当如何使用 "
":meth:`~object.__length_hint__` 特殊方法的规范实现，作为该语言特性的 :pep:`424` 正式规范说明的一部分。 （由"
" Armin Ronacher 在 :issue:`16148` 中贡献。）"

#: ../../whatsnew/3.4.rst:1164
msgid ""
"There is now a pure-python version of the :mod:`operator` module available "
"for reference and for use by alternate implementations of Python.  "
"(Contributed by Zachary Ware in :issue:`16694`.)"
msgstr ""
"现在提供了一个纯 Python 版本的 :mod:`operator` 模块，可用于参考并由 Python 的其他实现使用。 （由 Zachary "
"Ware 在 :issue:`16694` 中贡献。）"

#: ../../whatsnew/3.4.rst:1170
msgid "os"
msgstr "os"

#: ../../whatsnew/3.4.rst:1172
msgid ""
"There are new functions to get and set the :ref:`inheritable flag "
"<fd_inheritance>` of a file descriptor (:func:`os.get_inheritable`, "
":func:`os.set_inheritable`) or a Windows handle "
"(:func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`)."
msgstr ""
"新增一些函数用于获取和设置文件描述符或 Windows 句柄的 :ref:`可继承旗标 <fd_inheritance>` "
"(:func:`os.get_inheritable`, :func:`os.set_inheritable`) 或 "
"(:func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`)。"

#: ../../whatsnew/3.4.rst:1177
msgid ""
"New function :func:`~os.cpu_count` reports the number of CPUs available on "
"the platform on which Python is running (or ``None`` if the count can't be "
"determined).  The :func:`multiprocessing.cpu_count` function is now "
"implemented in terms of this function).  (Contributed by Trent Nelson, "
"Yogesh Chaudhari, Victor Stinner, and Charles-François Natali in "
":issue:`17914`.)"
msgstr ""
"新增函数 :func:`~os.cpu_count` 可报告 Python 运行所在平台上可用 CPU 的数量 (如果无法确定数量则为 "
"``None``)。 现在 :func:`multiprocessing.cpu_count` 函数是根据此函数实现的。 （由 Trent "
"Nelson, Yogesh Chaudhari, Victor Stinner 和 Charles-François Natali 在 "
":issue:`17914` 中贡献。）"

#: ../../whatsnew/3.4.rst:1183
msgid ""
":func:`os.path.samestat` is now available on the Windows platform (and the "
":func:`os.path.samefile` implementation is now shared between Unix and "
"Windows).  (Contributed by Brian Curtin in :issue:`11939`.)"
msgstr ""
"现在 :func:`os.path.samestat` 将在 Windows 平台上可用（并且现在 :func:`os.path.samefile` "
"实现可在 Unix 和 Windows 间共享）。 （由 Brian Curtin 在 :issue:`11939` 中贡献。）"

#: ../../whatsnew/3.4.rst:1187
msgid ""
":func:`os.path.ismount` now recognizes volumes mounted below a drive root on"
" Windows.  (Contributed by Tim Golden in :issue:`9035`.)"
msgstr ""
"现在 :func:`os.path.ismount` 可识别 Windows 中在驱动器根目录下加载的卷。 （由 Tim Golden 在 "
":issue:`9035` 中贡献。）"

#: ../../whatsnew/3.4.rst:1190
msgid ""
":func:`os.open` supports two new flags on platforms that provide them, "
":const:`~os.O_PATH` (un-opened file descriptor), and :const:`~os.O_TMPFILE` "
"(unnamed temporary file; as of 3.4.0 release available only on Linux systems"
" with a kernel version of 3.11 or newer that have uapi headers).  "
"(Contributed by Christian Heimes in :issue:`18673` and Benjamin Peterson, "
"respectively.)"
msgstr ""
":func:`os.open` 在受支持的平台上提供了两个新旗标 :const:`~os.O_PATH` (未打开的文件描述符) 和 "
":const:`~os.O_TMPFILE` (未命名的临时文件；因为 3.4.0 发布版仅在具有 uapi 标头的内核版本 3.11 或更新的 "
"Linux 系统上可用)。 （分别由 Christian Heimes 在 :issue:`18673` 中以及 Benjamin Peterson "
"贡献。）"

#: ../../whatsnew/3.4.rst:1198
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.4.rst:1200
msgid ""
":mod:`pdb` has been enhanced to handle generators, :keyword:`yield`, and "
"``yield from`` in a more useful fashion.  This is especially helpful when "
"debugging :mod:`asyncio` based programs.  (Contributed by Andrew Svetlov and"
" Xavier de Gaye in :issue:`16596`.)"
msgstr ""
":mod:`pdb` 已被增强以通过更有用的方式来处理生成器, :keyword:`yield` 和 ``yield from``。 这在调试基于 "
":mod:`asyncio` 的程序时特别有帮助。 （由 Andrew Svetlov 和 Xavier de Gaye 在 "
":issue:`16596` 中贡献。）"

#: ../../whatsnew/3.4.rst:1205
msgid ""
"The ``print`` command has been removed from :mod:`pdb`, restoring access to "
"the Python :func:`print` function from the pdb command line.  Python2's "
"``pdb`` did not have a ``print`` command; instead, entering ``print`` "
"executed the ``print`` statement.  In Python3 ``print`` was mistakenly made "
"an alias for the pdb :pdbcmd:`p` command.  ``p``, however, prints the "
"``repr`` of its argument, not the ``str`` like the Python2 ``print`` command"
" did.  Worse, the Python3 ``pdb print`` command shadowed the Python3 "
"``print`` function, making it inaccessible at the ``pdb`` prompt.  "
"(Contributed by Connor Osborn in :issue:`18764`.)"
msgstr ""
"``print`` 命令已从 :mod:`pdb` 中移除，恢复了从 pdb 命令行对 Python :func:`print` 函数的访问。 "
"Python2 的 ``pdb`` 没有 ``print`` 命令；而是会在输入 ``print`` 时执行 ``print`` 语句。 在 "
"Python3 中 ``print`` 被错误地设为 pdb :pdbcmd:`p` 命令的别名。 然而，``p`` 会打印其参数的 "
"``repr``，而不是像 Python2 ``print`` 命令那样打印其参数的 ``str``。 更糟糕的是，Python3 ``pdb "
"print`` 命令会覆盖 Python3 ``print`` 函数，导致其在 ``pdb`` 提示符下无法被访问。 （由 Connor Osborn "
"在 :issue:`18764` 中贡献。）"

#: ../../whatsnew/3.4.rst:1219
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.4.rst:1221
msgid ""
":mod:`pickle` now supports (but does not use by default) a new pickle "
"protocol, protocol 4.  This new protocol addresses a number of issues that "
"were present in previous protocols, such as the serialization of nested "
"classes, very large strings and containers, and classes whose "
":meth:`__new__` method takes keyword-only arguments.  It also provides some "
"efficiency improvements."
msgstr ""
"现在 :mod:`pickle` 支持（但默认不使用）新的 pickle 协议即协议 4。 "
"这个新协议解决了在之前版本中存在的多个问题，例如嵌套类、超长字符串和容器、以及 :meth:`__new__` 方法接受仅限关键字参数的类的序列化。 "
"它还提供了一些效率上的改进。"

#: ../../whatsnew/3.4.rst:1229
msgid ":pep:`3154` -- Pickle protocol 4"
msgstr ":pep:`3154` -- pickle 协议 4"

#: ../../whatsnew/3.4.rst:1230
msgid "PEP written by Antoine Pitrou and implemented by Alexandre Vassalotti."
msgstr "PEP 由 Antoine Pitrou 撰写，并由 Alexandre Vassalotti 实现"

#: ../../whatsnew/3.4.rst:1234
msgid "plistlib"
msgstr "plistlib"

#: ../../whatsnew/3.4.rst:1236
msgid ""
":mod:`plistlib` now has an API that is similar to the standard pattern for "
"stdlib serialization protocols, with new :func:`~plistlib.load`, "
":func:`~plistlib.dump`, :func:`~plistlib.loads`, and :func:`~plistlib.dumps`"
" functions.  (The older API is now deprecated.)  In addition to the already "
"supported XML plist format (:const:`~plistlib.FMT_XML`), it also now "
"supports the binary plist format (:const:`~plistlib.FMT_BINARY`).  "
"(Contributed by Ronald Oussoren and others in :issue:`14455`.)"
msgstr ""
"现在 :mod:`plistlib` 个具有与 stdlib 序列化协议标准模式类似的 API，使用新的 :func:`~plistlib.load`,"
" :func:`~plistlib.dump`, :func:`~plistlib.loads` 和 :func:`~plistlib.dumps` "
"函数。 (旧 API 现已被弃用。) 除了已受支持的 XML plist 格式 "
"(:const:`~plistlib.FMT_XML`)，现在它还支持二进制 plist 格式 "
"(:const:`~plistlib.FMT_BINARY`)。 （由 Ronald Oussoren 等人在 :issue:`14455` 中贡献。）"

#: ../../whatsnew/3.4.rst:1246
msgid "poplib"
msgstr "poplib"

#: ../../whatsnew/3.4.rst:1248
msgid ""
"Two new methods have been added to :mod:`poplib`: :meth:`~poplib.POP3.capa`,"
" which returns the list of capabilities advertised by the POP server, and "
":meth:`~poplib.POP3.stls`, which switches a clear-text POP3 session into an "
"encrypted POP3 session if the POP server supports it.  (Contributed by "
"Lorenzo Catucci in :issue:`4473`.)"
msgstr ""
"在 :mod:`poplib` 中新增了两个方法: :meth:`~poplib.POP3.capa`，它将返回 POP 服务器公开的功能列表，以及 "
":meth:`~poplib.POP3.stls`，它将在 POP 支持的情况下将明文 POP3 会话切换为加密 POP3 会话。 （由 Lorenzo"
" Catucci 在 :issue:`4473` 中贡献。）"

#: ../../whatsnew/3.4.rst:1256
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.4.rst:1258
msgid ""
"The :mod:`pprint` module's :class:`~pprint.PrettyPrinter` class and its "
":func:`~pprint.pformat`, and :func:`~pprint.pprint` functions have a new "
"option, *compact*, that controls how the output is formatted.  Currently "
"setting *compact* to ``True`` means that sequences will be printed with as "
"many sequence elements as will fit within *width* on each (indented) line. "
"(Contributed by Serhiy Storchaka in :issue:`19132`.)"
msgstr ""
":mod:`pprint` 模块的 :class:`~pprint.PrettyPrinter` 类以及 :func:`~pprint.pformat`"
" 和 :func:`~pprint.pprint` 函数新增了一个选项 *compact*，它可控制输出所使用的格式。 目前将 *compact* 设为"
" ``True`` 表示打印序列时将在每个（缩进的）行中放入 *width* 所允许的尽可能多的元素。 （由 Serhiy Storchaka 在 "
":issue:`19132` 中贡献。）"

#: ../../whatsnew/3.4.rst:1265
msgid ""
"Long strings are now wrapped using Python's normal line continuation syntax."
"  (Contributed by Antoine Pitrou in :issue:`17150`.)"
msgstr ""
"长字符串现在将使用 Python 的常规续行语法进行包装。 （由 Antoine Pitrou 在 :issue:`17150` 中贡献。）"

#: ../../whatsnew/3.4.rst:1270
msgid "pty"
msgstr "pty"

#: ../../whatsnew/3.4.rst:1272
msgid ""
":func:`pty.spawn` now returns the status value from :func:`os.waitpid` on "
"the child process, instead of ``None``.  (Contributed by Gregory P. Smith.)"
msgstr ""
"现在 :func:`pty.spawn` 将返回来自子进程上 :func:`os.waitpid` 的状态值，而不是 ``None``。 （由 "
"Gregory P. Smith 贡献。）"

#: ../../whatsnew/3.4.rst:1277
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.4.rst:1279
msgid ""
"The :mod:`pydoc` module is now based directly on the "
":func:`inspect.signature` introspection API, allowing it to provide "
"signature information for a wider variety of callable objects. This change "
"also means that ``__wrapped__`` attributes are now taken into account when "
"displaying help information. (Contributed by Larry Hastings in "
":issue:`19674`.)"
msgstr ""
"现在 :mod:`pydoc` 模块是直接基于 :func:`inspect.signature` 内省 API，这允许它提供更多可调用对象的签名信息。"
" 这一改变也意味着现在当显示帮助信息时 ``__wrapped__`` 属性也会被纳入考虑。 （由 Larry Hastings 在 "
":issue:`19674` 中贡献。）"

#: ../../whatsnew/3.4.rst:1285
msgid ""
"The :mod:`pydoc` module no longer displays the ``self`` parameter for "
"already bound methods. Instead, it aims to always display the exact current "
"signature of the supplied callable.  (Contributed by Larry Hastings in "
":issue:`20710`.)"
msgstr ""
":mod:`pydoc` 模块将不再显示已绑定方法的 ``self`` 形参。 现在，它总是会显示所提供可调用对象实际的当前签名。 （由 Larry "
"Hastings 在 :issue:`20710` 中贡献。）"

#: ../../whatsnew/3.4.rst:1290
msgid ""
"In addition to the changes that have been made to :mod:`pydoc` directly, its"
" handling of custom ``__dir__`` methods and various descriptor behaviours "
"has also been improved substantially by the underlying changes in the "
":mod:`inspect` module."
msgstr ""
"除了 :mod:`pydoc` 已有的直接修改，它对自定义 ``__dir__`` 方法和各种描述器行为的处理也通过对下层 :mod:`inspect`"
" 模块的修改获得了显著的改进。"

#: ../../whatsnew/3.4.rst:1295
msgid ""
"As the :func:`help` builtin is based on :mod:`pydoc`, the above changes also"
" affect the behaviour of :func:`help`."
msgstr "由于 :func:`help` 内置函数是基于 :mod:`pydoc` 的，上述的变化也会影响 :func:`help` 的行为。"

#: ../../whatsnew/3.4.rst:1300
msgid "re"
msgstr "re"

#: ../../whatsnew/3.4.rst:1302
msgid ""
"New :func:`~re.fullmatch` function and :meth:`.regex.fullmatch` method "
"anchor the pattern at both ends of the string to match.  This provides a way"
" to be explicit about the goal of the match, which avoids a class of subtle "
"bugs where ``$`` characters get lost during code changes or the addition of "
"alternatives to an existing regular expression.  (Contributed by Matthew "
"Barnett in :issue:`16203`.)"
msgstr ""
"新增的 :func:`~re.fullmatch` 函数和 :meth:`.regex.fullmatch` 方法可将模式锚定到要匹配的字符串的两端。 "
"这提供了一种明确匹配目标的方式，从而避免了一类微妙的错误错误，即在代码更改或为现有正则表达式添加替代项时丢失 ``$`` 字符。 （由 Matthew "
"Barnett 在 :issue:`16203` 中贡献。）"

#: ../../whatsnew/3.4.rst:1309
msgid ""
"The repr of :ref:`regex objects <re-objects>` now includes the pattern and "
"the flags; the repr of :ref:`match objects <match-objects>` now includes the"
" start, end, and the part of the string that matched.  (Contributed by Hugo "
"Lopes Tavares and Serhiy Storchaka in :issue:`13592` and :issue:`17087`.)"
msgstr ""
":ref:`正则表达式对象 <re-objects>` 的 repr 现在将包括模式和旗标；:ref:`匹配对象 <match-objects>` 的 "
"repr 现在将包括已匹配字符串的开头、末尾和组成。 （由 Hugo Lopes Tavares 和 Serhiy Storchaka 在 "
":issue:`13592` 和 :issue:`17087` 中贡献。）"

#: ../../whatsnew/3.4.rst:1317
msgid "resource"
msgstr "resource"

#: ../../whatsnew/3.4.rst:1319
msgid ""
"New :func:`~resource.prlimit` function, available on Linux platforms with a "
"kernel version of 2.6.36 or later and glibc of 2.13 or later, provides the "
"ability to query or set the resource limits for processes other than the one"
" making the call.  (Contributed by Christian Heimes in :issue:`16595`.)"
msgstr ""
"新增的 :func:`~resource.prlimit` 函数，在内核版本 2.6.36 以上的 Linux 平台及 glibc 版本 2.13 "
"以上可用，提供了查询或设置执行调用的进程以外的进程的资源限制的功能。 （由 Christian Heimes 在 :issue:`16595` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1324
msgid ""
"On Linux kernel version 2.6.36 or later, there are also some new Linux "
"specific constants: :const:`~resource.RLIMIT_MSGQUEUE`, "
":const:`~resource.RLIMIT_NICE`, :const:`~resource.RLIMIT_RTPRIO`, "
":const:`~resource.RLIMIT_RTTIME`, and :const:`~resource.RLIMIT_SIGPENDING`. "
"(Contributed by Christian Heimes in :issue:`19324`.)"
msgstr ""
"在内核版本 2.6.36 以上的 Linux 上，新增了一些 Linux 专属的常量: "
":const:`~resource.RLIMIT_MSGQUEUE`, :const:`~resource.RLIMIT_NICE`, "
":const:`~resource.RLIMIT_RTPRIO`, :const:`~resource.RLIMIT_RTTIME` 和 "
":const:`~resource.RLIMIT_SIGPENDING`。 （由 Christian Heimes 在 :issue:`19324` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1330
msgid ""
"On FreeBSD version 9 and later, there some new FreeBSD specific constants: "
":const:`~resource.RLIMIT_SBSIZE`, :const:`~resource.RLIMIT_SWAP`, and "
":const:`~resource.RLIMIT_NPTS`.  (Contributed by Claudiu Popa in "
":issue:`19343`.)"
msgstr ""
"在版本 9 以上的 FreeBSD 上，新增了一些 FreeBSD 专属的常量: :const:`~resource.RLIMIT_SBSIZE`, "
":const:`~resource.RLIMIT_SWAP` 和 :const:`~resource.RLIMIT_NPTS`。 （由 Claudiu "
"Popa 在 :issue:`19343` 中贡献。）"

#: ../../whatsnew/3.4.rst:1337
msgid "select"
msgstr "select"

#: ../../whatsnew/3.4.rst:1339
msgid ""
":class:`~select.epoll` objects now support the context management protocol. "
"When used in a :keyword:`with` statement, the :meth:`~select.epoll.close` "
"method will be called automatically at the end of the block.  (Contributed "
"by Serhiy Storchaka in :issue:`16488`.)"
msgstr ""
"现在 :class:`~select.epoll` 对象可支持上下文管理协议。 当在 :keyword:`with` "
"语句中使用时，:meth:`~select.epoll.close` 方法将在代码块结束时被自动调用。 （由 Serhiy Storchaka 在 "
":issue:`16488` 中贡献。）"

#: ../../whatsnew/3.4.rst:1344
msgid ""
":class:`~select.devpoll` objects now have :meth:`~select.devpoll.fileno` and"
" :meth:`~select.devpoll.close` methods, as well as a new attribute "
":attr:`~select.devpoll.closed`.  (Contributed by Victor Stinner in "
":issue:`18794`.)"
msgstr ""
"现在 :class:`~select.devpoll` 对象具有 :meth:`~select.devpoll.fileno` 和 "
":meth:`~select.devpoll.close` 方法，以及新的属性 :attr:`~select.devpoll.closed`。 （由 "
"Victor Stinner 在 :issue:`18794` 中贡献。）"

#: ../../whatsnew/3.4.rst:1351
msgid "shelve"
msgstr "shelve"

#: ../../whatsnew/3.4.rst:1353
msgid ""
":class:`~shelve.Shelf` instances may now be used in :keyword:`with` "
"statements, and will be automatically closed at the end of the "
":keyword:`!with` block. (Contributed by Filip Gruszczyński in "
":issue:`13896`.)"
msgstr ""
"现在 :class:`~shelve.Shelf` 实例可以在 :keyword:`with` 语句中使用，并将在 :keyword:`!with` "
"代码块结束时自动关闭。 （由 Filip Gruszczyński 在 :issue:`13896` 中贡献。）"

#: ../../whatsnew/3.4.rst:1359
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.4.rst:1361
msgid ""
":func:`~shutil.copyfile` now raises a specific :exc:`~shutil.Error` "
"subclass, :exc:`~shutil.SameFileError`, when the source and destination are "
"the same file, which allows an application to take appropriate action on "
"this specific error.  (Contributed by Atsuo Ishimoto and Hynek Schlawack in "
":issue:`1492704`.)"
msgstr ""
"现在当源和目标为相同文件时 :func:`~shutil.copyfile` 会引发专门的 :exc:`~shutil.Error` 子类 "
":exc:`~shutil.SameFileError`，这允许应用程序针对这个特定错误采取适当的动作。 （由 Atsuo Ishimoto 和 "
"Hynek Schlawack 在 :issue:`1492704` 中贡献。）"

#: ../../whatsnew/3.4.rst:1369
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.4.rst:1371
msgid ""
"The :class:`!SMTPServer` and :class:`!SMTPChannel` classes now accept a "
"*map* keyword argument which, if specified, is passed in to "
":class:`!asynchat.async_chat` as its *map* argument.  This allows an "
"application to avoid affecting the global socket map.  (Contributed by Vinay"
" Sajip in :issue:`11959`.)"
msgstr ""
"现在 :class:`!SMTPServer` 和 :class:`!SMTPChannel` 类接受一个 *map* "
"关键字参数，如果指定了该参数，它将被传给 :class:`!asynchat.async_chat` 作为其 *map* 参数。 "
"这允许应用程序避免影响全局套接字映射表。 （由 Vinay Sajip 在 :issue:`11959` 中贡献。）"

#: ../../whatsnew/3.4.rst:1379
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.4.rst:1381
msgid ""
":exc:`~smtplib.SMTPException` is now a subclass of :exc:`OSError`, which "
"allows both socket level errors and SMTP protocol level errors to be caught "
"in one try/except statement by code that only cares whether or not an error "
"occurred. (Contributed by Ned Jackson Lovely in :issue:`2118`.)"
msgstr ""
"现在 :exc:`~smtplib.SMTPException` 是 :exc:`OSError` 的子类，它允许仅需关注是否有错误发生的代码在一个 "
"try/except 语句中同时捕获套接字级错误和 SMTP 协议级错误。 （由 Ned Jackson Lovely 在 :issue:`2118` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1388
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.4.rst:1390
msgid ""
"The socket module now supports the :const:`~socket.CAN_BCM` protocol on "
"platforms that support it.  (Contributed by Brian Thorne in :issue:`15359`.)"
msgstr ""
"现在 socket 模块会在受支持的平台上支持 :const:`~socket.CAN_BCM` 协议。 （由 Brian Thorne 在 "
":issue:`15359` 中贡献。）"

#: ../../whatsnew/3.4.rst:1393
msgid ""
"Socket objects have new methods to get or set their :ref:`inheritable flag "
"<fd_inheritance>`, :meth:`~socket.socket.get_inheritable` and "
":meth:`~socket.socket.set_inheritable`."
msgstr ""
"Socket 对象新增了用于获取或设置其 :ref:`可继承旗标 <fd_inheritance>` "
"的方法，:meth:`~socket.socket.get_inheritable` 和 "
":meth:`~socket.socket.set_inheritable`。"

#: ../../whatsnew/3.4.rst:1397
msgid ""
"The ``socket.AF_*`` and ``socket.SOCK_*`` constants are now enumeration "
"values using the new :mod:`enum` module.  This allows meaningful names to be"
" printed during debugging, instead of integer \"magic numbers\"."
msgstr ""
"现在 ``socket.AF_*`` 和 ``socket.SOCK_*`` 常量是使用了新增的 :mod:`enum` 模块的枚举值。 "
"这允许在调试期间打印有意义的名称，而不是整数形式的“魔法数字”。"

#: ../../whatsnew/3.4.rst:1401
msgid "The :const:`~socket.AF_LINK` constant is now available on BSD and OSX."
msgstr "现在 :const:`~socket.AF_LINK` 常量将在 BSD 和 OSX 上可用。"

#: ../../whatsnew/3.4.rst:1403
msgid ""
":func:`~socket.inet_pton` and :func:`~socket.inet_ntop` are now supported on"
" Windows.  (Contributed by Atsuo Ishimoto in :issue:`7171`.)"
msgstr ""
"现在 :func:`~socket.inet_pton` 和 :func:`~socket.inet_ntop` 在 Windows 上已受到支持。 "
"（由 Atsuo Ishimoto 在 :issue:`7171` 中贡献。）"

#: ../../whatsnew/3.4.rst:1408
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.4.rst:1410
msgid ""
"A new boolean parameter to the :func:`~sqlite3.connect` function, *uri*, can"
" be used to indicate that the *database* parameter is a ``uri`` (see the "
"`SQLite URI documentation <https://www.sqlite.org/uri.html>`_).  "
"(Contributed by poq in :issue:`13773`.)"
msgstr ""
":func:`~sqlite3.connect` 函数新增布尔值形参 *uri*，它可被用来指明 *database* 形参是一个 ``uri`` "
"(参见 `SQLite URI 文档 <https://www.sqlite.org/uri.html>`_)。 （由 poq 在 "
":issue:`13773` 中贡献。）"

#: ../../whatsnew/3.4.rst:1417
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.4.rst:1421
msgid ""
":data:`~ssl.PROTOCOL_TLSv1_1` and :data:`~ssl.PROTOCOL_TLSv1_2` (TLSv1.1 and"
" TLSv1.2 support) have been added; support for these protocols is only "
"available if Python is linked with OpenSSL 1.0.1 or later.  (Contributed by "
"Michele Orrù and Antoine Pitrou in :issue:`16692`.)"
msgstr ""
"添加了 :data:`~ssl.PROTOCOL_TLSv1_1` 和 :data:`~ssl.PROTOCOL_TLSv1_2` (TLSv1.1 和"
" TLSv1.2 支持)；对这些协议的支持仅在 Python 使用 OpenSSL 1.0.1 或更高版本链接时可用。 （由 Michele Orrù "
"和 Antoine Pitrou 在 :issue:`16692` 中贡献。）"

#: ../../whatsnew/3.4.rst:1428
msgid ""
"New function :func:`~ssl.create_default_context` provides a standard way to "
"obtain an :class:`~ssl.SSLContext` whose settings are intended to be a "
"reasonable balance between compatibility and security.  These settings are "
"more stringent than the defaults provided by the :class:`~ssl.SSLContext` "
"constructor, and may be adjusted in the future, without prior deprecation, "
"if best-practice security requirements change.  The new recommended best "
"practice for using stdlib libraries that support SSL is to use "
":func:`~ssl.create_default_context` to obtain an :class:`~ssl.SSLContext` "
"object, modify it if needed, and then pass it as the *context* argument of "
"the appropriate stdlib API.  (Contributed by Christian Heimes in "
":issue:`19689`.)"
msgstr ""
"新增的函数 :func:`~ssl.create_default_context` 提供了获取 :class:`~ssl.SSLContext` "
"的标准方式，其设置旨在合理兼顾兼容性和安全性。 这些设置比 :class:`~ssl.SSLContext` "
"构造器所提供的默认设置更为严格，如果最佳实践的安全要求发生变化，将来可能会对其进行调整，而不预先提示弃用。 对于使用支持 SSL 的 stdlib "
"库来新推荐的最佳实践是使用 :func:`~ssl.create_default_context` 来获取 "
":class:`~ssl.SSLContext` 对象，必要时对其进行修改，然后将其作为相应 stdlib API 的 *contex* 参数传入。 "
"（由 Christian Heimes 在 :issue:`19689` 中贡献。）"

#: ../../whatsnew/3.4.rst:1440
msgid ""
":class:`~ssl.SSLContext` method "
":meth:`~ssl.SSLContext.load_verify_locations` accepts a new optional "
"argument *cadata*, which can be used to provide PEM or DER encoded "
"certificates directly via strings or bytes, respectively. (Contributed by "
"Christian Heimes in :issue:`18138`.)"
msgstr ""
":class:`~ssl.SSLContext` 方法 :meth:`~ssl.SSLContext.load_verify_locations` "
"接受新增的可选参数 *cadata*，它可被来分别通过字符串或字节串来直接提供 PEM 或 DER 编码的证书。 （由 Christian Heimes"
" 在 :issue:`18138` 中贡献。）"

#: ../../whatsnew/3.4.rst:1445
msgid ""
"New function :func:`~ssl.get_default_verify_paths` returns a named tuple of "
"the paths and environment variables that the "
":meth:`~ssl.SSLContext.set_default_verify_paths` method uses to set "
"OpenSSL's default ``cafile`` and ``capath``.  This can be an aid in "
"debugging default verification issues.  (Contributed by Christian Heimes in "
":issue:`18143`.)"
msgstr ""
"新增的函数 :func:`~ssl.get_default_verify_paths` 可返回一个由路径和环境变量组成的具名元组， 供 "
":meth:`~ssl.SSLContext.set_default_verify_paths` 方法用来设置 OpenSSL 的默认 "
"``cafile`` 和``capath``。 这有助于对默认的验证问题进行调试。 （由 Christian Heimes 在 "
":issue:`18143` 中贡献。）"

#: ../../whatsnew/3.4.rst:1452
msgid ""
":class:`~ssl.SSLContext` has a new method, "
":meth:`~ssl.SSLContext.cert_store_stats`, that reports the number of loaded "
"``X.509`` certs, ``X.509 CA`` certs, and certificate revocation lists "
"(``crl``\\ s), as well as a :meth:`~ssl.SSLContext.get_ca_certs` method that"
" returns a list of the loaded ``CA`` certificates.  (Contributed by "
"Christian Heimes in :issue:`18147`.)"
msgstr ""
":class:`~ssl.SSLContext` 增加了一个新方法 "
":meth:`~ssl.SSLContext.cert_store_stats`，用来报告已加载的 ``X.509`` 证书, ``X.509 CA``"
" 证书数量和证书吊销列表 (``crl``\\ s)，以及 :meth:`~ssl.SSLContext.get_ca_certs` "
"方法用来返回已加载的 ``CA`` 证书列表。 （由 Christian Heimes 在 :issue:`18147` 中贡献。）"

#: ../../whatsnew/3.4.rst:1459
msgid ""
"If OpenSSL 0.9.8 or later is available, :class:`~ssl.SSLContext` has a new "
"attribute :attr:`~ssl.SSLContext.verify_flags` that can be used to control "
"the certificate verification process by setting it to some combination of "
"the new constants :const:`~ssl.VERIFY_DEFAULT`, "
":const:`~ssl.VERIFY_CRL_CHECK_LEAF`, :const:`~ssl.VERIFY_CRL_CHECK_CHAIN`, "
"or :const:`~ssl.VERIFY_X509_STRICT`. OpenSSL does not do any CRL "
"verification by default.  (Contributed by Christien Heimes in "
":issue:`8813`.)"
msgstr ""
"如果 OpenSSL 0.9.8 或更高版本可用，:class:`~ssl.SSLContext` 将具有一个新增属性 "
":attr:`~ssl.SSLContext.verify_flags` 可被用于通过设置新增常量 "
":const:`~ssl.VERIFY_DEFAULT`, :const:`~ssl.VERIFY_CRL_CHECK_LEAF`, "
":const:`~ssl.VERIFY_CRL_CHECK_CHAIN` 或 :const:`~ssl.VERIFY_X509_STRICT` "
"的组合来控制证书验证过程。 在默认情况下 OpenSSL 不会执行任何 CRL 验证。 （由 Christien Heimes 在 "
":issue:`8813` 中贡献。）"

#: ../../whatsnew/3.4.rst:1467
msgid ""
"New :class:`~ssl.SSLContext` method "
":meth:`~ssl.SSLContext.load_default_certs` loads a set of default "
"\"certificate authority\" (CA) certificates from default locations, which "
"vary according to the platform.  It can be used to load both TLS web server "
"authentication certificates (``purpose=``:data:`~ssl.Purpose.SERVER_AUTH`) "
"for a client to use to verify a server, and certificates for a server to use"
" in verifying client certificates "
"(``purpose=``:data:`~ssl.Purpose.CLIENT_AUTH`).  (Contributed by Christian "
"Heimes in :issue:`19292`.)"
msgstr ""
"新增的 :class:`~ssl.SSLContext` 方法 :meth:`~ssl.SSLContext.load_default_certs` "
"可从默认位置加载一组默认的“证书颁发机构”（CA）证书，此位置随平台而异。 它可被用于加载 TLS Web 服务器验证证书 "
"(``purpose=``:data:`~ssl.Purpose.SERVER_AUTH` ) "
"供客户端用来验证服务器，或加载证书供服务器用来验证客户端证书 (``purpose=``:data:`~ssl.Purpose.CLIENT_AUTH`"
" )。 （由 Christian Heimes 在 :issue:`19292` 中贡献。）"

#: ../../whatsnew/3.4.rst:1478
msgid ""
"Two new windows-only functions, :func:`~ssl.enum_certificates` and "
":func:`~ssl.enum_crls` provide the ability to retrieve certificates, "
"certificate information, and CRLs from the Windows cert store.  (Contributed"
" by Christian Heimes in :issue:`17134`.)"
msgstr ""
"新增的两个 Windows 专属函数 :func:`~ssl.enum_certificates` 和 :func:`~ssl.enum_crls` "
"提供了从 Windows 证书存储库提取证书、证书信息和 CRL 的功能。 （由 Christian Heimes 在 :issue:`17134` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1485
msgid ""
"Support for server-side SNI (Server Name Indication) using the new "
":meth:`ssl.SSLContext.set_servername_callback` method. (Contributed by "
"Daniel Black in :issue:`8109`.)"
msgstr ""
"使用新增的 :meth:`ssl.SSLContext.set_servername_callback` 方法来支持服务器端 SNI (Server "
"Name Indication)。 （由 Daniel Black 在 :issue:`8109` 中贡献。）"

#: ../../whatsnew/3.4.rst:1489
msgid ""
"The dictionary returned by :meth:`.SSLSocket.getpeercert` contains "
"additional ``X509v3`` extension items: ``crlDistributionPoints``, "
"``calIssuers``, and ``OCSP`` URIs.  (Contributed by Christian Heimes in "
":issue:`18379`.)"
msgstr ""
"由 :meth:`.SSLSocket.getpeercert` 返回的字典包含额外的 ``X509v3`` 扩展条目: "
"``crlDistributionPoints``, ``calIssuers`` 和 ``OCSP`` URI。 （由 Christian "
"Heimes 在 :issue:`18379` 中贡献。）"

#: ../../whatsnew/3.4.rst:1495
msgid "stat"
msgstr "stat"

#: ../../whatsnew/3.4.rst:1497
msgid ""
"The :mod:`stat` module is now backed by a C implementation in :mod:`!_stat`."
" A C implementation is required as most of the values aren't standardized "
"and are platform-dependent.  (Contributed by Christian Heimes in "
":issue:`11016`.)"
msgstr ""
"现在 :mod:`stat` 模块以 :mod:`!_stat` 中的 C 实现作为后端。 C 实现是必需的因为大多数值都未被标准化并且依赖于平台。 "
"（由 Christian Heimes 在 :issue:`11016` 中贡献。）"

#: ../../whatsnew/3.4.rst:1501
msgid ""
"The module supports new :mod:`~stat.ST_MODE` flags, :mod:`~stat.S_IFDOOR`, "
":const:`~stat.S_IFPORT`, and :const:`~stat.S_IFWHT`.  (Contributed by "
"Christian Hiemes in :issue:`11016`.)"
msgstr ""
"该模块支持新的 :mod:`~stat.ST_MODE` 旗标, :mod:`~stat.S_IFDOOR`, "
":const:`~stat.S_IFPORT` 和 :const:`~stat.S_IFWHT`。 （由 Christian Hiemes 在 "
":issue:`11016` 中贡献。）"

#: ../../whatsnew/3.4.rst:1507
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.4.rst:1509
msgid ""
"New function :mod:`~struct.iter_unpack` and a new "
":meth:`struct.Struct.iter_unpack` method on compiled formats provide "
"streamed unpacking of a buffer containing repeated instances of a given "
"format of data. (Contributed by Antoine Pitrou in :issue:`17804`.)"
msgstr ""
"新增函数 :mod:`~struct.iter_unpack` 和在已编译格式上的新增方法 "
":meth:`struct.Struct.iter_unpack` 提供了对包含给定格式数据的重复实例的缓冲区的流式解包功能。 （由 Antoine "
"Pitrou 在 :issue:`17804` 中贡献。）"

#: ../../whatsnew/3.4.rst:1516
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.4.rst:1518
msgid ""
":func:`~subprocess.check_output` now accepts an *input* argument that can be"
" used to provide the contents of ``stdin`` for the command that is run. "
"(Contributed by Zack Weinberg in :issue:`16624`.)"
msgstr ""
"现在 :func:`~subprocess.check_output` 接受一个 *input* 参数用于为所运行的命令提供 ``stdin`` "
"的内容。 （由 Zack Weinberg 在 :issue:`16624` 中贡献。）"

#: ../../whatsnew/3.4.rst:1522
msgid ""
":func:`~subprocess.getstatus` and :func:`~subprocess.getstatusoutput` now "
"work on Windows.  This change was actually inadvertently made in 3.3.4. "
"(Contributed by Tim Golden in :issue:`10197`.)"
msgstr ""
"现在 :func:`~subprocess.getstatus` 和 :func:`~subprocess.getstatusoutput` 已适用于 "
"Windows。 这一修改是在 3.3.4 中意外实施的。 （由 Tim Golden 在 :issue:`10197` 中贡献。）"

#: ../../whatsnew/3.4.rst:1528
msgid "sunau"
msgstr "sunau"

#: ../../whatsnew/3.4.rst:1530
msgid ""
"The :meth:`!getparams` method now returns a namedtuple rather than a plain "
"tuple.  (Contributed by Claudiu Popa in :issue:`18901`.)"
msgstr ""
"现在 :meth:`!getparams` 方法将返回一个具名元组而不是普通元组。 （由 Claudiu Popa 在 :issue:`18901` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1533
msgid ""
":meth:`!sunau.open` now supports the context management protocol: when used "
"in a :keyword:`with` block, the ``close`` method of the returned object will"
" be called automatically at the end of the block.  (Contributed by Serhiy "
"Storchaka in :issue:`18878`.)"
msgstr ""
"现在 :meth:`!sunau.open` 可支持上下文管理协议：当在 :keyword:`with` 代码块中使用时，所返回对象的 "
"``close`` 方法将在代码块结束时被自动调用。 （由 Serhiy Storchaka 在 :issue:`18878` 中贡献。）"

#: ../../whatsnew/3.4.rst:1538
msgid ""
":meth:`.AU_write.setsampwidth` now supports 24 bit samples, thus adding "
"support for writing 24 sample using the module.  (Contributed by Serhiy "
"Storchaka in :issue:`19261`.)"
msgstr ""
"现在 :meth:`.AU_write.setsampwidth` 已支持 24 位采样，因此增加了使用该模块写入 24 位采样的支持。 （由 "
"Serhiy Storchaka 在 :issue:`19261` 中贡献。）"

#: ../../whatsnew/3.4.rst:1548
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.4.rst:1550
msgid ""
"New function :func:`sys.getallocatedblocks` returns the current number of "
"blocks allocated by the interpreter.  (In CPython with the default ``--with-"
"pymalloc`` setting, this is allocations made through the "
":c:func:`PyObject_Malloc` API.)  This can be useful for tracking memory "
"leaks, especially if automated via a test suite.  (Contributed by Antoine "
"Pitrou in :issue:`13390`.)"
msgstr ""
"新增函数 :func:`sys.getallocatedblocks` 可返回当前由解释器所分配的内存块数量。 （在使用默认 ``--with-"
"pymalloc`` 设置的 CPython 中，这将是通过 :c:func:`PyObject_Malloc` API 执行的分配。） "
"这在追踪内存泄漏时会很有用处，特别是对于通过测试套件自动追踪的场景。 （由 Antoine Pitrou 在 :issue:`13390` 中贡献。）"

#: ../../whatsnew/3.4.rst:1557
msgid ""
"When the Python interpreter starts in :ref:`interactive mode <tut-"
"interactive>`, it checks for an :data:`~sys.__interactivehook__` attribute "
"on the :mod:`sys` module.  If the attribute exists, its value is called with"
" no arguments just before interactive mode is started.  The check is made "
"after the :envvar:`PYTHONSTARTUP` file is read, so it can be set there.  The"
" :mod:`site` module :ref:`sets it <rlcompleter-config>` to a function that "
"enables tab completion and history saving (in :file:`~/.python-history`) if "
"the platform supports :mod:`readline`.  If you do not want this (new) "
"behavior, you can override it in :envvar:`PYTHONSTARTUP`, "
":mod:`sitecustomize`, or :mod:`usercustomize` by deleting this attribute "
"from :mod:`sys` (or setting it to some other callable).  (Contributed by "
"Éric Araujo and Antoine Pitrou in :issue:`5845`.)"
msgstr ""
"当 Python 解释器以 :ref:`交互模式 <tut-interactive>` 启动时，它会检查 :mod:`sys` 模块中的 "
":data:`~sys.__interactivehook__` 属性。 如果该属性存在，它的值将在交互模式启动之前不附带参数地被调用。 "
"这个检查是在读取 :envvar:`PYTHONSTARTUP` 文件之后进行的，因此可以在那里设置它。 :mod:`site` 模块会在平台支持 "
":mod:`readline` 的情况下 :ref:`把它设置为 <rlcompleter-config>` 一个启用制表符补全和历史记录保存（在 "
":file:`~/.python-history` 中）的函数。 如果你不想要这个（新增的）行为，可以通过从 :mod:`sys` "
"中删除这个属性（或将其设为其他可调用对象）在 :envvar:`PYTHONSTARTUP`, :mod:`sitecustomize` 或 "
":mod:`usercustomize` 中覆盖它。 （由 Éric Araujo 和 Antoine Pitrou 在 :issue:`5845` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1572
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.4.rst:1574
msgid ""
"The :mod:`tarfile` module now supports a simple :ref:`tarfile-commandline` "
"when called as a script directly or via ``-m``.  This can be used to create "
"and extract tarfile archives.  (Contributed by Berker Peksag in "
":issue:`13477`.)"
msgstr ""
"现在 :mod:`tarfile` 模块当直接作为脚本或通过 ``-m`` 调用时将支持简单的 :ref:`tarfile-commandline`。 "
"这可被用来创建和提取 tar 归档文件。 （由 Berker Peksag 在 :issue:`13477` 中贡献。）"

#: ../../whatsnew/3.4.rst:1580
msgid "textwrap"
msgstr "textwrap"

#: ../../whatsnew/3.4.rst:1582
msgid ""
"The :class:`~textwrap.TextWrapper` class has two new attributes/constructor "
"arguments: :attr:`~textwrap.TextWrapper.max_lines`, which limits the number "
"of lines in the output, and :attr:`~textwrap.TextWrapper.placeholder`, which"
" is a string that will appear at the end of the output if it has been "
"truncated because of *max_lines*.  Building on these capabilities, a new "
"convenience function :func:`~textwrap.shorten` collapses all of the "
"whitespace in the input to single spaces and produces a single line of a "
"given *width* that ends with the *placeholder* (by default, ``[...]``).  "
"(Contributed by Antoine Pitrou and Serhiy Storchaka in :issue:`18585` and "
":issue:`18725`.)"
msgstr ""
":class:`~textwrap.TextWrapper` 类新增了两个属性/构造器参数: "
":attr:`~textwrap.TextWrapper.max_lines`，用来限制输出的行数，以及 "
":attr:`~textwrap.TextWrapper.placeholder`，它是一个当输出由于 *max_lines* "
"限制被截断时将出现在输出末尾处的字符串。 一个在此功能之上新增的便捷函数 :func:`~textwrap.shorten` "
"可将输入中的所有空格压缩为单个空格并产生一个宽度为 *width* 并以 *placeholder* (默认为 ``[...]``) 结束的单独行。 "
"（由 Antoine Pitrou 和 Serhiy Storchaka 在 :issue:`18585` 和 :issue:`18725` 中贡献。）"

#: ../../whatsnew/3.4.rst:1594
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.4.rst:1596
msgid ""
"The :class:`~threading.Thread` object representing the main thread can be "
"obtained from the new :func:`~threading.main_thread` function.  In normal "
"conditions this will be the thread from which the Python interpreter was "
"started.  (Contributed by Andrew Svetlov in :issue:`18882`.)"
msgstr ""
"代表可通过新增的 :func:`~threading.main_thread` 函数来获取的主线程的 "
":class:`~threading.Thread` 对象。 在通常条件下这将是启动 Python 解释器所在的线程。 （由 Andrew "
"Svetlov 在 :issue:`18882` 中贡献。）"

#: ../../whatsnew/3.4.rst:1603
msgid "traceback"
msgstr "回溯"

#: ../../whatsnew/3.4.rst:1605
msgid ""
"A new :func:`traceback.clear_frames` function takes a traceback object and "
"clears the local variables in all of the frames it references, reducing the "
"amount of memory consumed.  (Contributed by Andrew Kuchling in "
":issue:`1565525`.)"
msgstr ""
"新增的 :func:`traceback.clear_frames` 函数可接受一个回溯对象清除它所引用的所有帧中的局部变量，以减少内存消耗量。 （由 "
"Andrew Kuchling 在 :issue:`1565525` 中贡献。）"

#: ../../whatsnew/3.4.rst:1612
msgid "types"
msgstr "types"

#: ../../whatsnew/3.4.rst:1614
msgid ""
"A new :func:`~types.DynamicClassAttribute` descriptor provides a way to "
"define an attribute that acts normally when looked up through an instance "
"object, but which is routed to the *class* ``__getattr__`` when looked up "
"through the class.  This allows one to have properties active on a class, "
"and have virtual attributes on the class with the same name (see :mod:`Enum`"
" for an example). (Contributed by Ethan Furman in :issue:`19030`.)"
msgstr ""
"新增的 :func:`~types.DynamicClassAttribute` "
"描述器提供了一种定义属性的方式，这种属性可正常地在实例对象中查找，但在类中查找时会被导向 *类的* ``__getattr__``。 "
"这将允许设置在类上激活的特征属性，并在相同名称的类上具有虚拟属性（参见 :mod:`Enum` 的例子）。 （由 Ethan Furman 在 "
":issue:`19030` 中贡献。）"

#: ../../whatsnew/3.4.rst:1623
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.4.rst:1625
msgid ""
":mod:`urllib.request` now supports ``data:`` URLs via the "
":class:`~urllib.request.DataHandler` class.  (Contributed by Mathias "
"Panzenböck in :issue:`16423`.)"
msgstr ""
"现在 :mod:`urllib.request` 支持 ``data:`` 使用 "
":class:`~urllib.request.DataHandler` 类的 URL。 （由 Mathias Panzenböck 在 "
":issue:`16423` 中贡献。）"

#: ../../whatsnew/3.4.rst:1629
msgid ""
"The http method that will be used by a :class:`~urllib.request.Request` "
"class can now be specified by setting a "
":class:`~urllib.request.Request.method` class attribute on the subclass.  "
"(Contributed by Jason R Coombs in :issue:`18978`.)"
msgstr ""
"由 :class:`~urllib.request.Request` 类使用的 http 方法现在可通过在子类上设置 "
":class:`~urllib.request.Request.method` 类属性来指定。 （由 Jason R Coombs 在 "
":issue:`18978` 中贡献。）"

#: ../../whatsnew/3.4.rst:1634
msgid ""
":class:`~urllib.request.Request` objects are now reusable: if the "
":attr:`~urllib.request.Request.full_url` or "
":attr:`~urllib.request.Request.data` attributes are modified, all relevant "
"internal properties are updated.  This means, for example, that it is now "
"possible to use the same :class:`~urllib.request.Request` object in more "
"than one :meth:`.OpenerDirector.open` call with different *data* arguments, "
"or to modify a :class:`~urllib.request.Request`\\ 's ``url`` rather than "
"recomputing it from scratch.  There is also a new "
":meth:`~urllib.request.Request.remove_header` method that can be used to "
"remove headers from a :class:`~urllib.request.Request`.  (Contributed by "
"Alexey Kachayev in :issue:`16464`, Daniel Wozniak in :issue:`17485`, and "
"Damien Brecht and Senthil Kumaran in :issue:`17272`.)"
msgstr ""
"现在 :class:`~urllib.request.Request` 对象是可重用的：如果 "
":attr:`~urllib.request.Request.full_url` 或 "
":attr:`~urllib.request.Request.data` 属性被修改，所有相关的内部特征属性都将被更新。 "
"例如，这意味着现在可以在多个使用不同 *data* 参数的 :meth:`.OpenerDirector.open` 调用中使用相同的 "
":class:`~urllib.request.Request` 对象，或者修改 :class:`~urllib.request.Request` 的 "
"``url`` 而不必从头重新计算它们。 此外还有新增的 :meth:`~urllib.request.Request.remove_header` "
"方法可被用来从 :class:`~urllib.request.Request` 中移除标头。 （由 Alexey Kachayev 在 "
":issue:`16464` 中，Daniel Wozniak 在 :issue:`17485` 中，以及 Damien Brecht 和 "
"Senthil Kumaran 在 :issue:`17272` 中贡献。）"

#: ../../whatsnew/3.4.rst:1647
msgid ""
":class:`~urllib.error.HTTPError` objects now have a "
":attr:`~urllib.error.HTTPError.headers` attribute that provides access to "
"the HTTP response headers associated with the error.  (Contributed by Berker"
" Peksag in :issue:`15701`.)"
msgstr ""
"现在 :class:`~urllib.error.HTTPError` 对象具有一个 "
":attr:`~urllib.error.HTTPError.headers` 属性可提供对与错误相关的 HTTP 响应的访问。 （由 Berker "
"Peksag 在 :issue:`15701` 中贡献。）"

#: ../../whatsnew/3.4.rst:1654
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.4.rst:1656
msgid ""
"The :class:`~unittest.TestCase` class has a new method, "
":meth:`~unittest.TestCase.subTest`, that produces a context manager whose "
":keyword:`with` block becomes a \"sub-test\".  This context manager allows a"
" test method to dynamically generate subtests  by, say, calling the "
"``subTest`` context manager inside a loop.  A single test method can thereby"
" produce an indefinite number of separately identified and separately "
"counted tests, all of which will run even if one or more of them fail.  For "
"example::"
msgstr ""
":class:`~unittest.TestCase` 类有一个新方法 "
":meth:`~unittest.TestCase.subTest`，它可产生一个以 :keyword:`with` "
"代码块作为“子测试”的上下文管理器。 这个上下文管理器允许测试方法通过调用一个循环内的 ``subTest`` 上下文管理器这样的方式动态生成子测试。 "
"这样单个测试方法就可以产生无限多个单独标识并单独计数的测试，这些测试即使在其中一个或多个测试失败的情况下仍然会全部运行。 例如::"

#: ../../whatsnew/3.4.rst:1664
msgid ""
"class NumbersTest(unittest.TestCase):\n"
"    def test_even(self):\n"
"        for i in range(6):\n"
"            with self.subTest(i=i):\n"
"                self.assertEqual(i % 2, 0)"
msgstr ""
"class NumbersTest(unittest.TestCase):\n"
"    def test_even(self):\n"
"        for i in range(6):\n"
"            with self.subTest(i=i):\n"
"                self.assertEqual(i % 2, 0)"

#: ../../whatsnew/3.4.rst:1670
msgid ""
"will result in six subtests, each identified in the unittest verbose output "
"with a label consisting of the variable name ``i`` and a particular value "
"for that variable (``i=0``, ``i=1``, etc).  See :ref:`subtests` for the full"
" version of this example.  (Contributed by Antoine Pitrou in "
":issue:`16997`.)"
msgstr ""
"将得到六个子测试，在单元测试详细输出中各自以变量名 ``i`` 加该变量专属的值来标识 (``i=0``, ``i=1`` 等等)。 该示例的完整版本见"
" :ref:`subtests`。 （由 Antoine Pitrou 在 :issue:`16997` 中贡献。）"

#: ../../whatsnew/3.4.rst:1675
msgid ""
":func:`unittest.main` now accepts an iterable of test names for "
"*defaultTest*, where previously it only accepted a single test name as a "
"string.  (Contributed by Jyrki Pulliainen in :issue:`15132`.)"
msgstr ""
"现在 :func:`unittest.main` 接受一个包含测试名称的可迭代对象作为 "
"*defaultTest*，而在之前版本中它只接受单个字符串形式的测试名称。 （由 Jyrki Pulliainen 在 :issue:`15132` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1679
msgid ""
"If :class:`~unittest.SkipTest` is raised during test discovery (that is, at "
"the module level in the test file), it is now reported as a skip instead of "
"an error.  (Contributed by Zach Ware in :issue:`16935`.)"
msgstr ""
"如果在测试发现期间（即在测试文件中的模块层级）引发了 :class:`~unittest.SkipTest`，现在它将被报告为跳过而不是错误。 （由 "
"Zach Ware 在 :issue:`16935` 中贡献。）"

#: ../../whatsnew/3.4.rst:1683
msgid ""
":meth:`~unittest.TestLoader.discover` now sorts the discovered files to "
"provide consistent test ordering.  (Contributed by Martin Melin and Jeff "
"Ramnani in :issue:`16709`.)"
msgstr ""
"现在 :meth:`~unittest.TestLoader.discover` 会对所发现的文件进行排序以提供一致的测试顺序。 （由 Martin "
"Melin 和 Jeff Ramnani 在 :issue:`16709` 中贡献。）"

#: ../../whatsnew/3.4.rst:1687
msgid ""
":class:`~unittest.TestSuite` now drops references to tests as soon as the "
"test has been run, if the test is successful.  On Python interpreters that "
"do garbage collection, this allows the tests to be garbage collected if "
"nothing else is holding a reference to the test.  It is possible to override"
" this behavior by creating a :class:`~unittest.TestSuite` subclass that "
"defines a custom ``_removeTestAtIndex`` method.  (Contributed by Tom "
"Wardill, Matt McClure, and Andrew Svetlov in :issue:`11798`.)"
msgstr ""
"如果测试成功，现在 :class:`~unittest.TestSuite` 会在测试完成运行时立即丢弃对测试的引用。 在支持垃圾回收的 Python "
"解释器上，这允许当没有其他对象持有对测试的引用时将该测试作为垃圾回收。 可以通过创建一个定义了自定义 ``_removeTestAtIndex`` "
"方法的 :class:`~unittest.TestSuite` 子类来覆盖此行为。 （由 Tom Wardill, Matt McClure 和 "
"Andrew Svetlov 在 :issue:`11798` 中贡献。）"

#: ../../whatsnew/3.4.rst:1695
msgid ""
"A new test assertion context-manager, :meth:`~unittest.TestCase.assertLogs`,"
" will ensure that a given block of code emits a log message using the "
":mod:`logging` module.  By default the message can come from any logger and "
"have a priority of ``INFO`` or higher, but both the logger name and an "
"alternative minimum logging level may be specified.  The object returned by "
"the context manager can be queried for the :class:`~logging.LogRecord`\\ s "
"and/or formatted messages that were logged.  (Contributed by Antoine Pitrou "
"in :issue:`18937`.)"
msgstr ""
"新增的测试断言上下文管理器 :meth:`~unittest.TestCase.assertLogs` 将确保给定的代码块使用 "
":mod:`logging` 模块发出日志记录消息。 在默认情况下消息可来自任意日志记录器并具有 ``INFO`` "
"或更高的优先级，但要指明日志记录器名称和替代的最低日志级别。 可以在该上下文管理器所返回的对象中查询 "
":class:`~logging.LogRecord` 和/或所记录的已格式化消息。 （由 Antoine Pitrou 在 "
":issue:`18937` 中贡献。）"

#: ../../whatsnew/3.4.rst:1704
msgid ""
"Test discovery now works with namespace packages (Contributed by Claudiu "
"Popa in :issue:`17457`.)"
msgstr "现在测试发现将可用于命名空间包（由 Claudiu Popa 在 :issue:`17457` 中贡献。）.)"

#: ../../whatsnew/3.4.rst:1707
msgid ""
":mod:`unittest.mock` objects now inspect their specification signatures when"
" matching calls, which means an argument can now be matched by either "
"position or name, instead of only by position.  (Contributed by Antoine "
"Pitrou in :issue:`17015`.)"
msgstr ""
"现在 :mod:`unittest.mock` 对象可以在匹配调用时检查其规范签名，这意味着现在可以通过位置或名称来匹配参数，而不是仅能通过位置。 （由"
" Antoine Pitrou 在 :issue:`17015` 中贡献。）"

#: ../../whatsnew/3.4.rst:1712
msgid ""
":func:`~mock.mock_open` objects now have ``readline`` and ``readlines`` "
"methods.  (Contributed by Toshio Kuratomi in :issue:`17467`.)"
msgstr ""
"现在 :func:`~mock.mock_open` 对象具有 ``readline`` 和 ``readlines`` 方法。 （由 Toshio "
"Kuratomi 在 :issue:`17467` 中贡献。）"

#: ../../whatsnew/3.4.rst:1717
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.4.rst:1719
msgid ""
":mod:`venv` now includes activation scripts for the ``csh`` and ``fish`` "
"shells.  (Contributed by Andrew Svetlov in :issue:`15417`.)"
msgstr ""
"现在 :mod:`venv` 包括了用于 ``csh`` 和 ``fish`` shell 的激活脚本。 （由 Andrew Svetlov 在 "
":issue:`15417` 中贡献。）"

#: ../../whatsnew/3.4.rst:1722
msgid ""
":class:`~venv.EnvBuilder` and the :func:`~venv.create` convenience function "
"take a new keyword argument *with_pip*, which defaults to ``False``, that "
"controls whether or not :class:`~venv.EnvBuilder` ensures that ``pip`` is "
"installed in the virtual environment.  (Contributed by Nick Coghlan in "
":issue:`19552` as part of the :pep:`453` implementation.)"
msgstr ""
":class:`~venv.EnvBuilder` 和 :func:`~venv.create` 便捷函数接受新的关键字参数 "
"*with_pip*，默认值为 ``False``，它控制 :class:`~venv.EnvBuilder` 是否确保 ``pip`` "
"在虚拟环境中安装。 （作为 :pep:`453` 实现的组成部分由 Nick Coghlan 在 :issue:`19552` 中贡献。）"

#: ../../whatsnew/3.4.rst:1730
msgid "wave"
msgstr "wave"

#: ../../whatsnew/3.4.rst:1732
msgid ""
"The :meth:`~wave.getparams` method now returns a namedtuple rather than a "
"plain tuple.  (Contributed by Claudiu Popa in :issue:`17487`.)"
msgstr ""
"现在 :meth:`~wave.getparams` 方法将返回一个具名元组而不是普通元组。 （由 Claudiu Popa 在 "
":issue:`17487` 中贡献。）"

#: ../../whatsnew/3.4.rst:1735
msgid ""
":meth:`wave.open` now supports the context management protocol.  "
"(Contributed by Claudiu Popa in :issue:`17616`.)"
msgstr ""
"现在 :meth:`wave.open` 已支持上下文管理器协议。 （由 Claudiu Popa 在 :issue:`17616` 中贡献。）"

#: ../../whatsnew/3.4.rst:1738
msgid ""
":mod:`wave` can now :ref:`write output to unseekable files <wave-write-"
"objects>`.  (Contributed by David Jones, Guilherme Polo, and Serhiy "
"Storchaka in :issue:`5202`.)"
msgstr ""
"现在 :mod:`wave` 可以 :ref:`将输出写入到不可定位的文件 <wave-write-objects>`。 （由 David Jones,"
" Guilherme Polo 和 Serhiy Storchaka 在 :issue:`5202` 中贡献。）"

#: ../../whatsnew/3.4.rst:1742
msgid ""
"The :meth:`~wave.Wave_write.writeframesraw` and "
":meth:`~wave.Wave_write.writeframes` methods now accept any :term:`bytes-"
"like object`.  (Contributed by Serhiy Storchaka in :issue:`8311`.)"
msgstr ""
"现在 :meth:`~wave.Wave_write.writeframesraw` 和 "
":meth:`~wave.Wave_write.writeframes` 方法将接受任意 :term:`bytes-like object`。 （由 "
"Serhiy Storchaka 在 :issue:`8311` 中贡献。）"

#: ../../whatsnew/3.4.rst:1748
msgid "weakref"
msgstr "weakref"

#: ../../whatsnew/3.4.rst:1750
msgid ""
"New :class:`~weakref.WeakMethod` class simulates weak references to bound "
"methods.  (Contributed by Antoine Pitrou in :issue:`14631`.)"
msgstr ""
"新增的 :class:`~weakref.WeakMethod` 类可模拟指向绑定方法的弱引用。 （由 Antoine Pitrou 在 "
":issue:`14631` 中贡献。）"

#: ../../whatsnew/3.4.rst:1753
msgid ""
"New :class:`~weakref.finalize` class makes it possible to register a "
"callback to be invoked when an object is garbage collected, without needing "
"to carefully manage the lifecycle of the weak reference itself.  "
"(Contributed by Richard Oudkerk in :issue:`15528`.)"
msgstr ""
"新增的 :class:`~weakref.finalize` "
"类使得注册一个当对象被作为垃圾回收时唤起的回调成为可能，而无需小心地管理弱引用本身的生命周期。 （由 Richard Oudkerk 在 "
":issue:`15528` 中贡献。）"

#: ../../whatsnew/3.4.rst:1758
msgid ""
"The callback, if any, associated with a :class:`~weakref.ref` is now exposed"
" via the :attr:`~weakref.ref.__callback__` attribute.  (Contributed by Mark "
"Dickinson in :issue:`17643`.)"
msgstr ""
"如果存在任何与 :class:`~weakref.ref` 相关联的回调，现在将通过 :attr:`~weakref.ref.__callback__`"
" 属性对外公开。 （由 Mark Dickinson 在 :issue:`17643` 中贡献。）"

#: ../../whatsnew/3.4.rst:1764
msgid "xml.etree"
msgstr "xml.etree"

#: ../../whatsnew/3.4.rst:1766
msgid ""
"A new parser, :class:`~xml.etree.ElementTree.XMLPullParser`, allows a non-"
"blocking applications to parse XML documents.  An example can be seen at "
":ref:`elementtree-pull-parsing`.  (Contributed by Antoine Pitrou in "
":issue:`17741`.)"
msgstr ""
"新增的解析器 :class:`~xml.etree.ElementTree.XMLPullParser` 允许用非阻塞的应用程序来解析 XML 文档。 "
"相关示例可参见 :ref:`elementtree-pull-parsing`。 （由 Antoine Pitrou 在 :issue:`17741` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1771
msgid ""
"The :mod:`xml.etree.ElementTree` :func:`~xml.etree.ElementTree.tostring` and"
" :func:`~xml.etree.ElementTree.tostringlist` functions, and the "
":class:`~xml.etree.ElementTree.ElementTree` "
":meth:`~xml.etree.ElementTree.ElementTree.write` method, now have a "
"*short_empty_elements* :ref:`keyword-only parameter <keyword-"
"only_parameter>` providing control over whether elements with no content are"
" written in abbreviated (``<tag />``) or expanded (``<tag></tag>``) form.  "
"(Contributed by Ariel Poliak and Serhiy Storchaka in :issue:`14377`.)"
msgstr ""
"现在 :mod:`xml.etree.ElementTree` :func:`~xml.etree.ElementTree.tostring` 和 "
":func:`~xml.etree.ElementTree.tostringlist` 函数，以及 "
":class:`~xml.etree.ElementTree.ElementTree` 的 "
":meth:`~xml.etree.ElementTree.ElementTree.write` 方法都具有一个 "
"*short_empty_elements* :ref:`仅限关键字形参 <keyword-only_parameter>` "
"用来提供对于无内容的元素要采取缩写 (``<tag />``) 还是扩展 (``<tag></tag>``) 形式的控制。 （由 Ariel "
"Poliak 和 Serhiy Storchaka 在 :issue:`14377` 中贡献。）"

#: ../../whatsnew/3.4.rst:1782
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.4.rst:1784
msgid ""
"The :meth:`~zipfile.PyZipFile.writepy` method of the "
":class:`~zipfile.PyZipFile` class has a new *filterfunc* option that can be "
"used to control which directories and files are added to the archive.  For "
"example, this could be used to exclude test files from the archive. "
"(Contributed by Christian Tismer in :issue:`19274`.)"
msgstr ""
":class:`~zipfile.PyZipFile` 类的 :meth:`~zipfile.PyZipFile.writepy` 方法新增的 "
"*filterfunc* 选项可用来控制要将哪些目录添加到归档中。 例如，可以用它将测试文件排除在归档之外。 （由 Christian Tismer 在"
" :issue:`19274` 中贡献。）"

#: ../../whatsnew/3.4.rst:1790
msgid ""
"The *allowZip64* parameter to :class:`~zipfile.ZipFile` and "
":class:`~zipfile.PyZipfile` is now ``True`` by default.  (Contributed by "
"William Mallard in :issue:`17201`.)"
msgstr ""
"现在 :class:`~zipfile.ZipFile` 和 :class:`~zipfile.PyZipfile` 的 *allowZip64* "
"形参默认值为 ``True``。 （由 William Mallard 在 :issue:`17201` 中贡献。）"

#: ../../whatsnew/3.4.rst:1797
msgid "CPython Implementation Changes"
msgstr "CPython 实现的变化"

#: ../../whatsnew/3.4.rst:1803
msgid "PEP 445: Customization of CPython Memory Allocators"
msgstr "PEP 445: 自定义 CPython 内存分配器"

#: ../../whatsnew/3.4.rst:1805
msgid ""
":pep:`445` adds new C level interfaces to customize memory allocation in the"
" CPython interpreter."
msgstr ":pep:`445` 添加了新的 C 层级接口用来在 CPython 解释器中对内存分配进行自定义。"

#: ../../whatsnew/3.4.rst:1810
msgid ":pep:`445` -- Add new APIs to customize Python memory allocators"
msgstr ":pep:`445` -- 新增用于自定义 Python 内存分配器的 API"

#: ../../whatsnew/3.4.rst:1817
msgid "PEP 442: Safe Object Finalization"
msgstr "PEP 442: 安全的对象最终化"

#: ../../whatsnew/3.4.rst:1819
msgid ""
":pep:`442` removes the current limitations and quirks of object finalization"
" in CPython. With it, objects with :meth:`__del__` methods, as well as "
"generators with :keyword:`finally` clauses, can be finalized when they are "
"part of a reference cycle."
msgstr ""
":pep:`442` 移除了 CPython 中有关对象最终化的限制和特殊处理。 有了它，具有 :meth:`__del__` 方法的对象，以及具有 "
":keyword:`finally` 子句的生成器在有循环引用的情况下也可以被最终化。"

#: ../../whatsnew/3.4.rst:1824
msgid ""
"As part of this change, module globals are no longer forcibly set to "
":const:`None` during interpreter shutdown in most cases, instead relying on "
"the normal operation of the cyclic garbage collector.  This avoids a whole "
"class of interpreter-shutdown-time errors, usually involving ``__del__`` "
"methods, that have plagued Python since the cyclic GC was first introduced."
msgstr ""
"作为此项改变的一部分，大多数情况下在解释器关闭期间模块的全局变量不会被强制设为 :const:`None`，而是取决于循环垃圾回收器的正常操作。 "
"这避免了大量的解释器关闭时错误，这类错误通常都涉及 ``__del__`` 方法，它们自循环 GC 首次被引入起就一直困扰着 Python。"

#: ../../whatsnew/3.4.rst:1833
msgid ":pep:`442` -- Safe object finalization"
msgstr ":pep:`442` -- 安全的对象最终化"

#: ../../whatsnew/3.4.rst:1840
msgid "PEP 456: Secure and Interchangeable Hash Algorithm"
msgstr "PEP 456: 安全且可互换的哈希算法"

#: ../../whatsnew/3.4.rst:1842
msgid ""
":pep:`456` follows up on earlier security fix work done on Python's hash "
"algorithm to address certain DOS attacks to which public facing APIs backed "
"by dictionary lookups may be subject.  (See :issue:`14621` for the start of "
"the current round of improvements.)  The PEP unifies CPython's hash code to "
"make it easier for a packager to substitute a different hash algorithm, and "
"switches Python's default implementation to a SipHash implementation on "
"platforms that have a 64 bit data type.  Any performance differences in "
"comparison with the older FNV algorithm are trivial."
msgstr ""
":pep:`456` 在早先对 Python 的哈希算法所做安全修复上更进一步以解决特定的 DOS 攻击问题，以字典查找为基础的对外公开的 API "
"可能面临此种攻击。（请参阅 :issue:`14621` 了解此轮改进的缘起。） 该 PEP 统一了 CPython "
"的哈希代码以使打包者能更容易地用不同哈希算法进行替换，并在具有 64 位数据类型的平台上将 Python 的默认实现切换为 SipHash 实现。 "
"与旧版 FNV 算法相比只有很小的性能差异。"

#: ../../whatsnew/3.4.rst:1851
msgid ""
"The PEP adds additional fields to the :data:`sys.hash_info` named tuple to "
"describe the hash algorithm in use by the currently executing binary.  "
"Otherwise, the PEP does not alter any existing CPython APIs."
msgstr ""
"该 PEP 向 :data:`sys.hash_info` 具名元组添加了额外字段来描述当前正在执行的二进制文件所使用的哈希算法。 除此之外，该 PEP"
" 没有改变任何现有的 CPython API。"

#: ../../whatsnew/3.4.rst:1859
msgid "PEP 436: Argument Clinic"
msgstr "PEP 436: Argument Clinic"

#: ../../whatsnew/3.4.rst:1861
msgid ""
"\"Argument Clinic\" (:pep:`436`) is now part of the CPython build process "
"and can be used to simplify the process of defining and maintaining accurate"
" signatures for builtins and standard library extension modules implemented "
"in C."
msgstr ""
"现在 \"Argument Clinic\" (:pep:`436`) 是 CPython 构建过程的一部分并可被用于简化为内置对象和以 C "
"实现的标准库扩展模块定义和维护准确签名的过程。"

#: ../../whatsnew/3.4.rst:1866
msgid ""
"Some standard library extension modules have been converted to use Argument "
"Clinic in Python 3.4, and :mod:`pydoc` and :mod:`inspect` have been updated "
"accordingly."
msgstr ""
"在 Python 3.4 中有一些标准库模块已被转换为使用 Argument Clinic，而 :mod:`pydoc` 和 "
":mod:`inspect` 也进行了相应的更新。"

#: ../../whatsnew/3.4.rst:1870
msgid ""
"It is expected that signature metadata for programmatic introspection will "
"be added to additional callables implemented in C as part of Python 3.4 "
"maintenance releases."
msgstr "预期针对程序化内省的签名元数据将被添加到更多的以 C 实现的可调用对象中作为 Python 3.4 维护发布版的组成部分。"

#: ../../whatsnew/3.4.rst:1875
msgid ""
"The Argument Clinic PEP is not fully up to date with the state of the "
"implementation. This has been deemed acceptable by the release manager and "
"core development team in this case, as Argument Clinic will not be made "
"available as a public API for third party use in Python 3.4."
msgstr ""
"Argument Clinic PEP 尚未完整更新到与具体实现的状态相一致。 这种情况被发布版管理者和核心开发团队认为是可接受的，因为 "
"Argument Clinic 在 Python 3.4 中将不会作为公有 API 提供给第三方。"

#: ../../whatsnew/3.4.rst:1882
msgid ":pep:`436` -- The Argument Clinic DSL"
msgstr ":pep:`436` -- The Argument Clinic DSL"

#: ../../whatsnew/3.4.rst:1883
msgid "PEP written and implemented by Larry Hastings."
msgstr "PEP 由 Larry Hastings 撰写并实现"

#: ../../whatsnew/3.4.rst:1887
msgid "Other Build and C API Changes"
msgstr "其他的构建和 C API 的改变"

#: ../../whatsnew/3.4.rst:1889
msgid ""
"The new :c:func:`PyType_GetSlot` function has been added to the stable ABI, "
"allowing retrieval of function pointers from named type slots when using the"
" limited API.  (Contributed by Martin von Löwis in :issue:`17162`.)"
msgstr ""
"新的 :c:func:`PyType_GetSlot` 函数已被添加到稳定 ABI，以允许在使用受限 API 时从指定的类型槽位提取函数指针。 （由 "
"Martin von Löwis 在 :issue:`17162` 中贡献。）"

#: ../../whatsnew/3.4.rst:1893
msgid ""
"The new :c:func:`!Py_SetStandardStreamEncoding` pre-initialization API "
"allows applications embedding the CPython interpreter to reliably force a "
"particular encoding and error handler for the standard streams. (Contributed"
" by Bastien Montagne and Nick Coghlan in :issue:`16129`.)"
msgstr ""
"新的 :c:func:`!Py_SetStandardStreamEncoding` 预初始化 API 允许嵌入了 CPython "
"解释器的应用程序为标准流可靠地强制设置特定的编码格式和错误处理器。 （由 Bastien Montagne 和 Nick Coghlan 在 "
":issue:`16129` 中贡献。）"

#: ../../whatsnew/3.4.rst:1898
msgid ""
"Most Python C APIs that don't mutate string arguments are now correctly "
"marked as accepting ``const char *`` rather than ``char *``.  (Contributed "
"by Serhiy Storchaka in :issue:`1772673`.)"
msgstr ""
"大多数不修改字符串参数的 Python C API 现在已被正确地标记为接受 ``const char *`` 而不是 ``char *``。 （由 "
"Serhiy Storchaka 在 :issue:`1772673` 中贡献。）"

#: ../../whatsnew/3.4.rst:1902
msgid ""
"A new shell version of ``python-config`` can be used even when a python "
"interpreter is not available (for example, in cross compilation scenarios)."
msgstr ""
"一个新的 ``python-config`` 的 shell 版本即使在 python 解释器不可用时仍可被使用（例如，在交叉编译的场景中）。"

#: ../../whatsnew/3.4.rst:1905
msgid ""
":c:func:`PyUnicode_FromFormat` now supports width and precision "
"specifications for ``%s``, ``%A``, ``%U``, ``%V``, ``%S``, and ``%R``. "
"(Contributed by Ysj Ray and Victor Stinner in :issue:`7330`.)"
msgstr ""
"现在 :c:func:`PyUnicode_FromFormat` 支持为 ``%s``, ``%A``, ``%U``, ``%V``, ``%S``"
" 和 ``%R`` 使用宽度和精度说明符。 （由 Ysj Ray 和 Victor Stinner 在 :issue:`7330` 中贡献。）"

#: ../../whatsnew/3.4.rst:1909
msgid ""
"New function :c:func:`PyStructSequence_InitType2` supplements the existing "
":c:func:`PyStructSequence_InitType` function.  The difference is that it "
"returns ``0`` on success and ``-1`` on failure."
msgstr ""
"新的函数 :c:func:`PyStructSequence_InitType2` 为现有的 "
":c:func:`PyStructSequence_InitType` 函数提供了补充。 其不同之处在于它会在成功时返回 ``0`` 而在失败时返回 "
"``-1``。"

#: ../../whatsnew/3.4.rst:1913
msgid ""
"The CPython source can now be compiled using the address sanity checking "
"features of recent versions of GCC and clang:  the false alarms in the small"
" object allocator have been silenced.  (Contributed by Dhiru Kholia in "
":issue:`18596`.)"
msgstr ""
"现在 CPython 源代码可以使用最近版本的 GCC 和 clang 的地址确定性检查特性进行编译：小对象分配器中的假警报已被消除。 （由 Dhiru"
" Kholia 在 :issue:`18596` 中贡献。）"

#: ../../whatsnew/3.4.rst:1918
msgid ""
"The Windows build now uses `Address Space Layout Randomization "
"<https://en.wikipedia.org/wiki/Address_space_layout_randomization>`_ and "
"`Data Execution Prevention "
"<https://en.wikipedia.org/wiki/Data_Execution_Prevention>`_.  (Contributed "
"by Christian Heimes in :issue:`16632`.)"
msgstr ""
"Windows 构建版现在会使用 `寻址空间布局随机化 "
"<https://en.wikipedia.org/wiki/Address_space_layout_randomization>`_ 和 "
"`数据执行保护 <https://en.wikipedia.org/wiki/Data_Execution_Prevention>`_。 （由 "
"Christian Heimes 在 :issue:`16632` 中贡献。）"

#: ../../whatsnew/3.4.rst:1923
msgid ""
"New function :c:func:`PyObject_LengthHint` is the C API equivalent of "
":func:`operator.length_hint`.  (Contributed by Armin Ronacher in "
":issue:`16148`.)"
msgstr ""
"新的函数 :c:func:`PyObject_LengthHint` 是 :func:`operator.length_hint` 的 C API "
"等价形式。 （由 Armin Ronacher 在 :issue:`16148` 中贡献。）"

#: ../../whatsnew/3.4.rst:1931
msgid "Other Improvements"
msgstr "其他改进"

#: ../../whatsnew/3.4.rst:1935
msgid ""
"The :ref:`python <using-on-cmdline>` command has a new :ref:`option <using-"
"on-misc-options>`, ``-I``, which causes it to run in \"isolated mode\", "
"which means that :data:`sys.path` contains neither the script's directory "
"nor the user's ``site-packages`` directory, and all :envvar:`!PYTHON*` "
"environment variables are ignored (it implies both ``-s`` and ``-E``).  "
"Other restrictions may also be applied in the future, with the goal being to"
" isolate the execution of a script from the user's environment.  This is "
"appropriate, for example, when Python is used to run a system script.  On "
"most POSIX systems it can and should be used in the ``#!`` line of system "
"scripts.  (Contributed by Christian Heimes in :issue:`16499`.)"
msgstr ""
":ref:`python <using-on-cmdline>` 命令增加了一个新的 :ref:`选项 <using-on-misc-options>`"
" ``-I``，将使其运行于“隔离模式”，即 :data:`sys.path` 将不包含脚本的目录和用户的 ``site-packages`` "
"目录，并且所有 :envvar:`!PYTHON*` 环境变量都将被忽略（相当于 ``-s`` 和 ``-E`` 同时启用）。 "
"未来还可能会应用其他的限制，其目的是将脚本执行与用户的环境隔离开来。 举例来说，当 Python 被用于运行系统脚本时此模式将是适当的。 在大多数 "
"POSIX 系统上它可以并且应当在系统脚本的 ``#!`` 行中使用。 （由 Christian Heimes 在 :issue:`16499` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:1946
msgid ""
"Tab-completion is now enabled by default in the interactive interpreter on "
"systems that support :mod:`readline`.  History is also enabled by default, "
"and is written to (and read from) the file :file:`~/.python-history`. "
"(Contributed by Antoine Pitrou and Éric Araujo in :issue:`5845`.)"
msgstr ""
"在支持 :mod:`readline` 的系统上的交互模式中现在将默认启用 Tab 键补全。 历史记录也将默认启用，并会写入到 "
":file:`~/.python-history` 文件（也会从中读取）。 （由 Antoine Pitrou 和 Éric Araujo 在 "
":issue:`5845` 中贡献。）"

#: ../../whatsnew/3.4.rst:1951
msgid ""
"Invoking the Python interpreter with ``--version`` now outputs the version "
"to standard output instead of standard error (:issue:`18338`). Similar "
"changes were made to :mod:`argparse` (:issue:`18920`) and other modules that"
" have script-like invocation capabilities (:issue:`18922`)."
msgstr ""
"现在附带 ``--version`` 唤起 Python 解释器将会把版本信息输出到标准输出而不是标准错误 (:issue:`18338`)。 对于 "
":mod:`argparse` (:issue:`18920`) 和其他具有脚本类唤起功能的模块也做了类似的修改 (:issue:`18922`)。"

#: ../../whatsnew/3.4.rst:1956
msgid ""
"The CPython Windows installer now adds ``.py`` to the :envvar:`PATHEXT` "
"variable when extensions are registered, allowing users to run a python "
"script at the windows command prompt by just typing its name without the "
"``.py`` extension.  (Contributed by Paul Moore in :issue:`18569`.)"
msgstr ""
"现在 CPython Windows 安装程序会在注册扩展名时将 ``.py`` 添加到 :envvar:`PATHEXT` 变量，以允许用户在 "
"windows 命令提示符下直接键入不带 ``.py`` 扩展名的 python 脚本名称来运行它。 （由 Paul Moore 在 "
":issue:`18569` 中贡献。）"

#: ../../whatsnew/3.4.rst:1961
msgid ""
"A new ``make`` target `coverage-report "
"<https://devguide.python.org/coverage/#measuring-coverage-of-c-code-with-"
"gcov-and-lcov>`_ will build python, run the test suite, and generate an HTML"
" coverage report for the C codebase using ``gcov`` and `lcov "
"<https://github.com/linux-test-project/lcov>`_."
msgstr ""
"新的 ``make`` 目标 `coverage-report "
"<https://devguide.python.org/coverage/#measuring-coverage-of-c-code-with-"
"gcov-and-lcov>`_ 将使用 ``gcov`` 和 `lcov <https://github.com/linux-test-"
"project/lcov>`_ 基于 C 代码库构建 python，运行测试套件并生成 HTML 消息报告。"

#: ../../whatsnew/3.4.rst:1967
msgid ""
"The ``-R`` option to the :ref:`python regression test suite <regrtest>` now "
"also checks for memory allocation leaks, using "
":func:`sys.getallocatedblocks`.  (Contributed by Antoine Pitrou in "
":issue:`13390`.)"
msgstr ""
"现在 :ref:`python 回归测试套件 <regrtest>` 的 ``-R`` 选项还将使用 "
":func:`sys.getallocatedblocks` 来检查内存分配泄漏。 （由 Antoine Pitrou 在 :issue:`13390`"
" 中贡献。）"

#: ../../whatsnew/3.4.rst:1972
msgid "``python -m`` now works with namespace packages."
msgstr "现在 ``python -m`` 将可用于命名空间包。"

#: ../../whatsnew/3.4.rst:1974
msgid ""
"The :mod:`stat` module is now implemented in C, which means it gets the "
"values for its constants from the C header files, instead of having the "
"values hard-coded in the python module as was previously the case."
msgstr ""
"现在 :mod:`stat` 模块是用 C 实现的，这意味着它将从 C 头文件中获取其常量值，而不是像之前版本中那样将值码编码在 python 模块中。"

#: ../../whatsnew/3.4.rst:1978
msgid ""
"Loading multiple python modules from a single OS module (``.so``, ``.dll``) "
"now works correctly (previously it silently returned the first python module"
" in the file).  (Contributed by Václav Šmilauer in :issue:`16421`.)"
msgstr ""
"现在将能够正确地从单个 OS 模块加载多个 (``.so``, ``.dll``) python 模块（在之前版本中则会静默地返回文件中的第一个 "
"python 模块）。 （由 Václav Šmilauer 在 :issue:`16421` 中贡献。）"

#: ../../whatsnew/3.4.rst:1982
msgid ""
"A new opcode, :opcode:`!LOAD_CLASSDEREF`, has been added to fix a bug in the"
" loading of free variables in class bodies that could be triggered by "
"certain uses of :ref:`__prepare__ <prepare>`.  (Contributed by Benjamin "
"Peterson in :issue:`17853`.)"
msgstr ""
"增加了新的操作码 :opcode:`!LOAD_CLASSDEREF` 用来修复一个在类体中加载自由变量时的程序缺陷，它可能因 "
":ref:`__prepare__ <prepare>` 的特定用法而被触发。 （由 Benjamin Peterson 在 "
":issue:`17853` 中贡献。）"

#: ../../whatsnew/3.4.rst:1987
msgid ""
"A number of MemoryError-related crashes were identified and fixed by Victor "
"Stinner using his :pep:`445`-based ``pyfailmalloc`` tool (:issue:`18408`, "
":issue:`18520`)."
msgstr ""
"多个有关 MemoryError 的崩溃问题被 Victor Stinner 使用他基于 :pep:`445` 的 ``pyfailmalloc`` "
"工具加以确定并修复 (:issue:`18408`, :issue:`18520`)。"

#: ../../whatsnew/3.4.rst:1991
msgid ""
"The ``pyvenv`` command now accepts a ``--copies`` option to use copies "
"rather than symlinks even on systems where symlinks are the default.  "
"(Contributed by Vinay Sajip in :issue:`18807`.)"
msgstr ""
"现在 ``pyvenv`` 命令接受一个 ``--copies`` 选项以使用拷贝而不是符号链接，即使在默认使用符号链接的系统上也是如此。 （由 "
"Vinay Sajip 在 :issue:`18807` 中贡献。）"

#: ../../whatsnew/3.4.rst:1995
msgid ""
"The ``pyvenv`` command also accepts a ``--without-pip`` option to suppress "
"the otherwise-automatic bootstrapping of pip into the virtual environment.  "
"(Contributed by Nick Coghlan in :issue:`19552` as part of the :pep:`453` "
"implementation.)"
msgstr ""
"``pyvenv`` 命令也接受一个 ``--without-pip`` 选项用来抑制在其他情况下将自动将 pip 初始设置到虚拟环境中。 （作为 "
":pep:`453` 实现的一部分由 Nick Coghlan 在 :issue:`19552` 中贡献。）"

#: ../../whatsnew/3.4.rst:2000
msgid ""
"The encoding name is now optional in the value set for the "
":envvar:`PYTHONIOENCODING` environment variable.  This makes it possible to "
"set just the error handler, without changing the default encoding. "
"(Contributed by Serhiy Storchaka in :issue:`18818`.)"
msgstr ""
"现在编码格式名称在 :envvar:`PYTHONIOENCODING` 环境变量的设置值中将为可选项。 "
"这使得只设置错误处理器而不改变默认编码格式成为可能。 （由 Serhiy Storchaka 在 :issue:`18818` 中贡献。）"

#: ../../whatsnew/3.4.rst:2005
msgid ""
"The :mod:`bz2`, :mod:`lzma`, and :mod:`gzip` module ``open`` functions now "
"support ``x`` (exclusive creation) mode.  (Contributed by Tim Heaney and "
"Vajrasky Kok in :issue:`19201`, :issue:`19222`, and :issue:`19223`.)"
msgstr ""
"现在 :mod:`bz2`, :mod:`lzma`, and :mod:`gzip` 模块的 ``open`` 函数已支持 ``x`` (独占式创建)"
" 模式。 （由 Tim Heaney 和 Vajrasky Kok 在 :issue:`19201`, :issue:`19222` 和 "
":issue:`19223` 中贡献。）"

#: ../../whatsnew/3.4.rst:2011
msgid "Significant Optimizations"
msgstr "显著的优化"

#: ../../whatsnew/3.4.rst:2013
msgid ""
"The UTF-32 decoder is now 3x to 4x faster.  (Contributed by Serhiy Storchaka"
" in :issue:`14625`.)"
msgstr ""
"现在 UTF-32 解码器获得了 3x 至 4x 的提速。 （由 Serhiy Storchaka 在 :issue:`14625` 中贡献。）"

#: ../../whatsnew/3.4.rst:2016
msgid ""
"The cost of hash collisions for sets is now reduced.  Each hash table probe "
"now checks a series of consecutive, adjacent key/hash pairs before "
"continuing to make random probes through the hash table.  This exploits "
"cache locality to make collision resolution less expensive. The collision "
"resolution scheme can be described as a hybrid of linear probing and open "
"addressing.  The number of additional linear probes defaults to nine.  This "
"can be changed at compile-time by defining LINEAR_PROBES to be any value.  "
"Set LINEAR_PROBES=0 to turn-off linear probing entirely.  (Contributed by "
"Raymond Hettinger in :issue:`18771`.)"
msgstr ""
"针对集合的哈希碰撞的耗费现在已被降低。 每次哈希表检测现在会先检查一系列连续的、相邻的键/哈希值对再继续对整个哈希表执行随机检测。 "
"这将利用缓存本地化来使得碰撞求解付出较少代价。 这种碰撞求解方案可被描述为线性检测和开放寻址的结合。 额外的线性检测数默认为九次。 这可以在编译时通过将"
" LINEAR_PROBES 定义为任意值来修改。 设置 LINEAR_PROBES=0 可完全关闭线性检测。 （由 Raymond Hettinger"
" 在 :issue:`18771` 中贡献。）"

#: ../../whatsnew/3.4.rst:2027
msgid ""
"The interpreter starts about 30% faster. A couple of measures lead to the "
"speedup. The interpreter loads fewer modules on startup, e.g. the :mod:`re`,"
" :mod:`collections` and :mod:`locale` modules and their dependencies are no "
"longer imported by default. The marshal module has been improved to load "
"compiled Python code faster.  (Contributed by Antoine Pitrou, Christian "
"Heimes and Victor Stinner in :issue:`19219`, :issue:`19218`, :issue:`19209`,"
" :issue:`19205` and :issue:`9548`.)"
msgstr ""
"解释器启动速度加快了约 30%。 多项措施促成了此次加速。 解释器在启动时加载的模块有所减少，例如 :mod:`re`, "
":mod:`collections` 和 :mod:`locale` 模块及其依赖默认不再被导入。 marshal 模块得到改进以便更快速地加载已编译的"
" Python 代码。 （由 Antoine Pitrou, Christian Heimes 和 Victor Stinner 在 "
":issue:`19219`, :issue:`19218`, :issue:`19209`, :issue:`19205` 和 "
":issue:`9548` 中贡献。）"

#: ../../whatsnew/3.4.rst:2035
msgid ""
":class:`bz2.BZ2File` is now as fast or faster than the Python2 version for "
"most cases.  :class:`lzma.LZMAFile` has also been optimized.  (Contributed "
"by Serhiy Storchaka and Nadeem Vawda in :issue:`16034`.)"
msgstr ""
"现在 :class:`bz2.BZ2File` 在多数情况下相比 Python2 版本速度都一样快更快或。 :class:`lzma.LZMAFile`"
" 也获得了优化。 （由 Serhiy Storchaka 和 Nadeem Vawda 在 :issue:`16034` 中贡献。）"

#: ../../whatsnew/3.4.rst:2039
msgid ""
":func:`random.getrandbits` is 20%-40% faster for small integers (the most "
"common use case).  (Contributed by Serhiy Storchaka in :issue:`16674`.)"
msgstr ""
":func:`random.getrandbits` 对于小整数（最常见的应用场景）可加速 20%-40%。 （由 Serhiy Storchaka 在"
" :issue:`16674` 中贡献。）"

#: ../../whatsnew/3.4.rst:2042
msgid ""
"By taking advantage of the new storage format for strings, pickling of "
"strings is now significantly faster.  (Contributed by Victor Stinner and "
"Antoine Pitrou in :issue:`15596`.)"
msgstr ""
"得益于字符串的新存储格式，对字符串执行 pickle 操作现在将有明显加速。 （由 Victor Stinner 和 Antoine Pitrou 在 "
":issue:`15596` 中贡献。）"

#: ../../whatsnew/3.4.rst:2046
msgid ""
"A performance issue in :meth:`io.FileIO.readall` has been solved.  This "
"particularly affects Windows, and significantly speeds up the case of piping"
" significant amounts of data through :mod:`subprocess`.  (Contributed by "
"Richard Oudkerk in :issue:`15758`.)"
msgstr ""
"一个 :meth:`io.FileIO.readall` 中的性能问题已被解决。 这对 Windows 有更具体的情况，将显著地提升通过 "
":mod:`subprocess` 以管道方式传递大量数据这一应用场景下的速度。 （由 Richard Oudkerk 在 :issue:`15758`"
" 中贡献。）"

#: ../../whatsnew/3.4.rst:2051
msgid ""
":func:`html.escape` is now 10x faster.  (Contributed by Matt Bryant in "
":issue:`18020`.)"
msgstr ""
"现在 :func:`html.escape` 获得了 10x 速度提升。 （由 Matt Bryant 在 :issue:`18020` 中贡献。）"

#: ../../whatsnew/3.4.rst:2054
msgid ""
"On Windows, the native ``VirtualAlloc`` is now used instead of the CRT "
"``malloc`` in ``obmalloc``.  Artificial benchmarks show about a 3% memory "
"savings."
msgstr ""
"在 Windows 上，现在将使用原生的 ``VirtualAlloc`` 而不是 ``obmalloc`` 中的 CRT ``malloc``。 "
"人工基准测试显示可节省约 3% 的内存。"

#: ../../whatsnew/3.4.rst:2058
msgid ""
":func:`os.urandom` now uses a lazily opened persistent file descriptor so as"
" to avoid using many file descriptors when run in parallel from multiple "
"threads.  (Contributed by Antoine Pitrou in :issue:`18756`.)"
msgstr ""
"现在 :func:`os.urandom` 会使用延迟打开的持久性文件描述符以避免在从多个线程并行时使用过多的文件描述符。 （由 Antoine "
"Pitrou 在 :issue:`18756` 中贡献。）"

#: ../../whatsnew/3.4.rst:2066
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.4.rst:2068
msgid ""
"This section covers various APIs and other features that have been "
"deprecated in Python 3.4, and will be removed in Python 3.5 or later.  In "
"most (but not all) cases, using the deprecated APIs will produce a "
":exc:`DeprecationWarning` when the interpreter is run with deprecation "
"warnings enabled (for example, by using ``-Wd``)."
msgstr ""
"本小节列出了已在 Python 3.4 中弃用，并将在 Python 3.5 或之后的版本中移除的各种 API 和其他特性。 "
"在大多数（但并非全部）情况下，在解释器运行时设置了弃用警告时（例如通过使用 ``-Wd`` 选项）使用已弃用的 API 将产生 "
":exc:`DeprecationWarning`。"

#: ../../whatsnew/3.4.rst:2076
msgid "Deprecations in the Python API"
msgstr "Python API 中的弃用"

#: ../../whatsnew/3.4.rst:2078
msgid ""
"As mentioned in :ref:`whatsnew-pep-451`, a number of :mod:`importlib` "
"methods and functions are deprecated: :meth:`!importlib.find_loader` is "
"replaced by :func:`importlib.util.find_spec`; "
":meth:`!importlib.machinery.PathFinder.find_module` is replaced by "
":meth:`importlib.machinery.PathFinder.find_spec`; "
":meth:`!importlib.abc.MetaPathFinder.find_module` is replaced by "
":meth:`importlib.abc.MetaPathFinder.find_spec`; "
":meth:`!importlib.abc.PathEntryFinder.find_loader` and :meth:`!find_module` "
"are replaced by :meth:`importlib.abc.PathEntryFinder.find_spec`; all of the "
":samp:`{xxx}Loader` ABC ``load_module`` methods "
"(:meth:`!importlib.abc.Loader.load_module`, "
":meth:`!importlib.abc.InspectLoader.load_module`, "
":meth:`!importlib.abc.FileLoader.load_module`, "
":meth:`!importlib.abc.SourceLoader.load_module`) should no longer be "
"implemented, instead loaders should implement an ``exec_module`` method "
"(:meth:`importlib.abc.Loader.exec_module`, "
":meth:`importlib.abc.InspectLoader.exec_module` "
":meth:`importlib.abc.SourceLoader.exec_module`) and let the import system "
"take care of the rest; and :meth:`!importlib.abc.Loader.module_repr`, "
":meth:`!importlib.util.module_for_loader`, "
":meth:`!importlib.util.set_loader`, and :meth:`!importlib.util.set_package` "
"are no longer needed because their functions are now handled automatically "
"by the import system."
msgstr ""
"正如 :ref:`whatsnew-pep-451` 所提及的，:mod:`importlib` 中的多个方法和函数已被弃用: "
":meth:`!importlib.find_loader` 被 :func:`importlib.util.find_spec` 替代; "
":meth:`!importlib.machinery.PathFinder.find_module` 被 "
":meth:`importlib.machinery.PathFinder.find_spec` 替代; "
":meth:`!importlib.abc.MetaPathFinder.find_module` 被 "
":meth:`importlib.abc.MetaPathFinder.find_spec` 替代; "
":meth:`!importlib.abc.PathEntryFinder.find_loader` 和 :meth:`!find_module` 被 "
":meth:`importlib.abc.PathEntryFinder.find_spec` 替代; 所有的 :samp:`{xxx}Loader` "
"ABC ``load_module`` 方法 (:meth:`!importlib.abc.Loader.load_module`, "
":meth:`!importlib.abc.InspectLoader.load_module`, "
":meth:`!importlib.abc.FileLoader.load_module`, "
":meth:`!importlib.abc.SourceLoader.load_module`) 应当不再被实现，加载器应当改为实现 "
"``exec_module`` 方法 (:meth:`importlib.abc.Loader.exec_module`, "
":meth:`importlib.abc.InspectLoader.exec_module` "
":meth:`importlib.abc.SourceLoader.exec_module`) 并让导入系统处理其余的操作; 而 "
":meth:`!importlib.abc.Loader.module_repr`, "
":meth:`!importlib.util.module_for_loader`, "
":meth:`!importlib.util.set_loader` 和 :meth:`!importlib.util.set_package` "
"已不再需要因为它们的功能现在将由导入系统自动处理。"

#: ../../whatsnew/3.4.rst:2103
msgid ""
"The :mod:`!imp` module is pending deprecation. To keep compatibility with "
"Python 2/3 code bases, the module's removal is currently not scheduled."
msgstr ":mod:`!imp` 模块已被弃用。 为保持与 Python 2/3 基础代码的兼容性，目前还没有移除该模块的计划。"

#: ../../whatsnew/3.4.rst:2106
msgid ""
"The :mod:`formatter` module is pending deprecation and is slated for removal"
" in Python 3.6."
msgstr ":mod:`formatter` 模块已被弃用并计划在 Python 3.6 中移除。"

#: ../../whatsnew/3.4.rst:2109
msgid ""
"``MD5`` as the default *digestmod* for the :func:`hmac.new` function is "
"deprecated.  Python 3.6 will require an explicit digest name or constructor "
"as *digestmod* argument."
msgstr ""
"将 ``MD5`` 作为 :func:`hmac.new` 函数的默认 *digestmod* 的设置已被弃用。 Python 3.6 "
"将要求以一个显式的摘要名称或构造器作为 *digestmod* 参数。"

#: ../../whatsnew/3.4.rst:2113
msgid ""
"The internal ``Netrc`` class in the :mod:`ftplib` module has been documented"
" as deprecated in its docstring for quite some time.  It now emits a "
":exc:`DeprecationWarning` and will be removed completely in Python 3.5."
msgstr ""
"很长一段时间以来 :mod:`ftplib` 模块中的内部 ``Netrc`` 类在其文档字符串中被声明为已弃用。 现在它将发出 "
":exc:`DeprecationWarning` 并将在 Python 3.5 中完全移除。"

#: ../../whatsnew/3.4.rst:2117
msgid ""
"The undocumented *endtime* argument to :meth:`subprocess.Popen.wait` should "
"not have been exposed and is hopefully not in use; it is deprecated and will"
" mostly likely be removed in Python 3.5."
msgstr ""
"传给 :meth:`subprocess.Popen.wait` 的未写入文档的 *endtime* 参数不应被公开也不应被使用；它已被弃用并很可能在 "
"Python 3.5 中移除。"

#: ../../whatsnew/3.4.rst:2121
msgid ""
"The *strict* argument of :class:`~html.parser.HTMLParser` is deprecated."
msgstr ":class:`~html.parser.HTMLParser` 的 *strict* 参数已被弃用。"

#: ../../whatsnew/3.4.rst:2123
msgid ""
"The :mod:`plistlib` :func:`~plistlib.readPlist`, "
":func:`~plistlib.writePlist`, :func:`~plistlib.readPlistFromBytes`, and "
":func:`~plistlib.writePlistToBytes` functions are deprecated in favor of the"
" corresponding new functions :func:`~plistlib.load`, :func:`~plistlib.dump`,"
" :func:`~plistlib.loads`, and :func:`~plistlib.dumps`.  "
":func:`~plistlib.Data` is deprecated in favor of just using the "
":class:`bytes` constructor."
msgstr ""
":mod:`plistlib` :func:`~plistlib.readPlist`, :func:`~plistlib.writePlist`, "
":func:`~plistlib.readPlistFromBytes` 和 :func:`~plistlib.writePlistToBytes` "
"等函数已被弃用而应改用相应的新函数 :func:`~plistlib.load`, :func:`~plistlib.dump`, "
":func:`~plistlib.loads` 和 :func:`~plistlib.dumps`。 :func:`~plistlib.Data` "
"已被弃用而应直接使用 :class:`bytes` 构造器。"

#: ../../whatsnew/3.4.rst:2130
msgid ""
"The :mod:`sysconfig` key ``SO`` is deprecated, it has been replaced by "
"``EXT_SUFFIX``."
msgstr ":mod:`sysconfig` 的键 ``SO`` 已被弃用，它已被 ``EXT_SUFFIX`` 所替代。"

#: ../../whatsnew/3.4.rst:2133
msgid ""
"The ``U`` mode accepted by various ``open`` functions is deprecated. In "
"Python3 it does not do anything useful, and should be replaced by "
"appropriate uses of :class:`io.TextIOWrapper` (if needed) and its *newline* "
"argument."
msgstr ""
"各种 ``open`` 函数所接受的 ``U`` 模式已被弃用。 在 Python3 中它已不再有任何实际作用，并应当改用适当的 "
":class:`io.TextIOWrapper` (如有必要) 及其 *newline* 参数。"

#: ../../whatsnew/3.4.rst:2138
msgid ""
"The *parser* argument of :func:`xml.etree.ElementTree.iterparse` has been "
"deprecated, as has the *html* argument of "
":func:`~xml.etree.ElementTree.XMLParser`.  To prepare for the removal of the"
" latter, all arguments to ``XMLParser`` should be passed by keyword."
msgstr ""
":func:`xml.etree.ElementTree.iterparse` 的 *parser* 参数，就如 "
":func:`~xml.etree.ElementTree.XMLParser` 的 *html* 参数一样。 要对后者的移除做好准备，所有 "
"``XMLParser`` 的参数都应当以关键字形式传入。"

#: ../../whatsnew/3.4.rst:2145
msgid "Deprecated Features"
msgstr "弃用的特性"

#: ../../whatsnew/3.4.rst:2147
msgid ""
"Running :ref:`idle` with the ``-n`` flag (no subprocess) is deprecated. "
"However, the feature will not be removed until :issue:`18823` is resolved."
msgstr ""
"运行 :ref:`idle` 时附带 ``-n`` 旗标（无子进程）的做法已被弃用。 但是，该特性在 :issue:`18823` "
"解决之前将不会被移除。"

#: ../../whatsnew/3.4.rst:2150
msgid ""
"The site module adding a \"site-python\" directory to sys.path, if it "
"exists, is deprecated (:issue:`19375`)."
msgstr "site 模块在 \"site-python\" 目录存在的情况下 sys.path 添加该目录的做法已被弃用 (:issue:`19375`)。"

#: ../../whatsnew/3.4.rst:2156
msgid "Removed"
msgstr "移除"

#: ../../whatsnew/3.4.rst:2160
msgid "Operating Systems No Longer Supported"
msgstr "不再支持的操作系统"

#: ../../whatsnew/3.4.rst:2162
msgid ""
"Support for the following operating systems has been removed from the source"
" and build tools:"
msgstr "从源代码和构建工具中删除了对以下操作系统的支持："

#: ../../whatsnew/3.4.rst:2165
msgid "OS/2 (:issue:`16135`)."
msgstr "OS/2 (:issue:`16135`)."

#: ../../whatsnew/3.4.rst:2166
msgid "Windows 2000 (changeset e52df05b496a)."
msgstr "Windows 2000（变更集e52df05b496a）。"

#: ../../whatsnew/3.4.rst:2167
msgid ""
"Windows systems where ``COMSPEC`` points to ``command.com`` "
"(:issue:`14470`)."
msgstr "Windows系统中 ``COMSPEC`` 指向 ``command.com`` 的版本（ :issue:`14470` ）。"

#: ../../whatsnew/3.4.rst:2168
msgid "VMS (:issue:`16136`)."
msgstr "VMS (:issue:`16136`)."

#: ../../whatsnew/3.4.rst:2172
msgid "API and Feature Removals"
msgstr "API 与特性的移除"

#: ../../whatsnew/3.4.rst:2174
msgid ""
"The following obsolete and previously deprecated APIs and features have been"
" removed:"
msgstr "以下过时并在之前版本中弃用的 API 和特性现已被移除："

#: ../../whatsnew/3.4.rst:2177
msgid ""
"The unmaintained ``Misc/TextMate`` and ``Misc/vim`` directories have been "
"removed (see the `devguide <https://devguide.python.org>`_ for suggestions "
"on what to use instead)."
msgstr ""
"不再继续维护的 ``Misc/TextMate`` 和 ``Misc/vim`` 目录已被移除（请参阅 `devguide "
"<https://devguide.python.org>`_ 了解相关替代器的使用建议）。"

#: ../../whatsnew/3.4.rst:2181
msgid ""
"The ``SO`` makefile macro is removed (it was replaced by the "
"``SHLIB_SUFFIX`` and ``EXT_SUFFIX`` macros) (:issue:`16754`)."
msgstr ""
"``SO`` makefile 宏已被移除（被 ``SHLIB_SUFFIX`` 和 ``EXT_SUFFIX`` 宏所替代） "
"(:issue:`16754`)。"

#: ../../whatsnew/3.4.rst:2184
msgid ""
"The ``PyThreadState.tick_counter`` field has been removed; its value has "
"been meaningless since Python 3.2, when the \"new GIL\" was introduced "
"(:issue:`19199`)."
msgstr ""
"``PyThreadState.tick_counter`` 字段已被移除；该字段值自 Python 3.2 即 \"新 GIL\" "
"被引入时起就不再有意义了 (:issue:`19199`)。"

#: ../../whatsnew/3.4.rst:2188
msgid ""
"``PyLoader`` and ``PyPycLoader`` have been removed from :mod:`importlib`. "
"(Contributed by Taras Lyapun in :issue:`15641`.)"
msgstr ""
"``PyLoader`` 和 ``PyPycLoader`` 已从 :mod:`importlib` 中移除。 （由 Taras Lyapun 在 "
":issue:`15641` 中贡献。）"

#: ../../whatsnew/3.4.rst:2191
msgid ""
"The *strict* argument to :class:`~http.client.HTTPConnection` and "
":class:`~http.client.HTTPSConnection` has been removed.  HTTP 0.9-style "
"\"Simple Responses\" are no longer supported."
msgstr ""
":class:`~http.client.HTTPConnection` 和 :class:`~http.client.HTTPSConnection`"
" 的 *strict* 参数已被移除。 HTTP 0.9 风格的 \"简单响应\" 不再受到支持。"

#: ../../whatsnew/3.4.rst:2195
msgid ""
"The deprecated :mod:`urllib.request.Request` getter and setter methods "
"``add_data``, ``has_data``, ``get_data``, ``get_type``, ``get_host``, "
"``get_selector``, ``set_proxy``, ``get_origin_req_host``, and "
"``is_unverifiable`` have been removed (use direct attribute access instead)."
msgstr ""
"被弃用的 :mod:`urllib.request.Request` 读取和设置方法 ``add_data``, ``has_data``, "
"``get_data``, ``get_type``, ``get_host``, ``get_selector``, ``set_proxy``, "
"``get_origin_req_host`` 和 ``is_unverifiable`` 已被移除（请改为直接属性访问）。"

#: ../../whatsnew/3.4.rst:2200
msgid ""
"Support for loading the deprecated ``TYPE_INT64`` has been removed from "
":mod:`marshal`.  (Contributed by Dan Riti in :issue:`15480`.)"
msgstr ""
"对加载已弃用的 ``TYPE_INT64`` 的支持已从 :mod:`marshal` 中被移除。 （由 Dan Riti 在 "
":issue:`15480` 中贡献。）"

#: ../../whatsnew/3.4.rst:2203
msgid ""
":class:`inspect.Signature`: positional-only parameters are now required to "
"have a valid name."
msgstr ":class:`inspect.Signature`: 仅限位置形参现在需要有一个合法的名称。"

#: ../../whatsnew/3.4.rst:2206
msgid ""
":meth:`object.__format__` no longer accepts non-empty format strings, it now"
" raises a :exc:`TypeError` instead.  Using a non-empty string has been "
"deprecated since Python 3.2.  This change has been made to prevent a "
"situation where previously working (but incorrect) code would start failing "
"if an object gained a __format__ method, which means that your code may now "
"raise a :exc:`TypeError` if you are using an ``'s'`` format code with "
"objects that do not have a __format__ method that handles it.  See "
":issue:`7994` for background."
msgstr ""
":meth:`object.__format__` 不再接受非空格式字符串，它现在会改为引发 :exc:`TypeError`。 使用非空字符串自 "
"Python 3.2 起已被弃用。 做出此项改变是为了防止当对象获得 __format__ "
"方法时之前可用（但不正确）的代码执行失败的情况，这意味着现在当你对没有用于处理 ``'s'`` 的 __format__ "
"方法的对象使用该格式代码时你的代码可能会引发 :exc:`TypeError`。 请参阅 :issue:`7994` 了解相关背景。"

#: ../../whatsnew/3.4.rst:2215
msgid ""
":meth:`difflib.SequenceMatcher.isbjunk` and "
":meth:`difflib.SequenceMatcher.isbpopular` were deprecated in 3.2, and have "
"now been removed: use ``x in sm.bjunk`` and ``x in sm.bpopular``, where *sm*"
" is a :class:`~difflib.SequenceMatcher` object (:issue:`13248`)."
msgstr ""
":meth:`difflib.SequenceMatcher.isbjunk` 和 "
":meth:`difflib.SequenceMatcher.isbpopular` 已在 3.2 中被弃用，现在已被移除：请使用 ``x in "
"sm.bjunk`` 和 ``x in sm.bpopular``，其中 *sm* 是一个 "
":class:`~difflib.SequenceMatcher` 对象 (:issue:`13248`)。"

#: ../../whatsnew/3.4.rst:2223
msgid "Code Cleanups"
msgstr "代码清理"

#: ../../whatsnew/3.4.rst:2225
msgid ""
"The unused and undocumented internal ``Scanner`` class has been removed from"
" the :mod:`pydoc` module."
msgstr "未被使用并且未写入文档的内部 ``Scanner`` 类已从 :mod:`pydoc` 模块中移除。"

#: ../../whatsnew/3.4.rst:2228
msgid ""
"The private and effectively unused ``_gestalt`` module has been removed, "
"along with the private :mod:`platform` functions ``_mac_ver_lookup``, "
"``_mac_ver_gstalt``, and ``_bcd2str``, which would only have ever been "
"called on badly broken OSX systems (see :issue:`18393`)."
msgstr ""
"私有并且实际未使用的 ``_gestalt`` 模块已被移除，同时移除了私有的 :mod:`platform` 函数 "
"``_mac_ver_lookup``, ``_mac_ver_gstalt`` 和 ``_bcd2str``，它们仅会在严重过时的 OSX "
"系统上被调用 (参见 :issue:`18393`)。"

#: ../../whatsnew/3.4.rst:2233
msgid ""
"The hardcoded copies of certain :mod:`stat` constants that were included in "
"the :mod:`tarfile` module namespace have been removed."
msgstr "曾经包括于 :mod:`tarfile` 模块命名空间的某些 :mod:`stat` 常量的硬编码副本已被移除。"

#: ../../whatsnew/3.4.rst:2239
msgid "Porting to Python 3.4"
msgstr "移植到 Python 3.4"

#: ../../whatsnew/3.4.rst:2241
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.4.rst:2246
msgid "Changes in 'python' Command Behavior"
msgstr " 'python' 命令行为的变化"

#: ../../whatsnew/3.4.rst:2248
msgid ""
"In a posix shell, setting the :envvar:`PATH` environment variable to an "
"empty value is equivalent to not setting it at all.  However, setting "
":envvar:`PYTHONPATH` to an empty value was *not* equivalent to not setting "
"it at all: setting :envvar:`PYTHONPATH` to an empty value was equivalent to "
"setting it to ``.``, which leads to confusion when reasoning by analogy to "
"how :envvar:`PATH` works.  The behavior now conforms to the posix convention"
" for :envvar:`PATH`."
msgstr ""
"在 posix shell 中，将 :envvar:`PATH` 环境变量设为空值就等于完全不设置。 不过，将 :envvar:`PYTHONPATH`"
" 设为空值则 *不等于* 完全不设置：将 :envvar:`PYTHONPATH` 设为空值等于将其设为 ``.``，这在类 "
":envvar:`PATH` 运作方式来进行理解时会导致困惑。 现在的行为将与 posix 中 :envvar:`PATH` 的惯例保持一致。"

#: ../../whatsnew/3.4.rst:2256
msgid ""
"The [X refs, Y blocks] output of a debug (``--with-pydebug``) build of the "
"CPython interpreter is now off by default.  It can be re-enabled using the "
"``-X showrefcount`` option.  (Contributed by Ezio Melotti in "
":issue:`17323`.)"
msgstr ""
"现在 CPython 解释器的调试构建版 (``--with-pydebug``) 的 [X refs, Y blocks] 输出默认将关闭。 可以使用"
" ``-X showrefcount`` 选项来重新启用它。 （由 Ezio Melotti 在 :issue:`17323` 中贡献。）"

#: ../../whatsnew/3.4.rst:2260
msgid ""
"The python command and most stdlib scripts (as well as :mod:`argparse`) now "
"output ``--version`` information to ``stdout`` instead of ``stderr`` (for "
"issue list see :ref:`other-improvements-3.4` above)."
msgstr ""
"现在 python 命令和大多数标准库脚本（和 :mod:`argparse` 一样）会将 ``--version`` 信息输出到 ``stdout``"
" 而不是 ``stderr`` (相关问题列表参见上面的 :ref:`other-improvements-3.4`)。"

#: ../../whatsnew/3.4.rst:2266
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.4.rst:2268
msgid ""
"The ABCs defined in :mod:`importlib.abc` now either raise the appropriate "
"exception or return a default value instead of raising "
":exc:`NotImplementedError` blindly. This will only affect code calling "
":func:`super` and falling through all the way to the ABCs. For "
"compatibility, catch both :exc:`NotImplementedError` or the appropriate "
"exception as needed."
msgstr ""
"在 :mod:`importlib.abc` 中定义的 ABC 现在将会引发适当的异常或是返回默认值而不是无脑引发 "
":exc:`NotImplementedError`。 这将只影响调用 :func:`super` 并一路下落到这些 ABC 的代码。 "
"为保持兼容性，:exc:`NotImplementedError` 和所需的相应异常都要被捕获。"

#: ../../whatsnew/3.4.rst:2274
msgid ""
"The module type now initializes the :attr:`~module.__package__` and "
":attr:`~module.__loader__` attributes to ``None`` by default. To determine "
"if these attributes were set in a backwards-compatible fashion, use e.g. "
"``getattr(module, '__loader__', None) is not None``.  (:issue:`17115`.)"
msgstr ""
"模块类型现在默认会将 :attr:`~module.__package__` 和 :attr:`~module.__loader__` 属性初始化为 "
"``None``。 要确定这些属性是否以向下兼容的方式被设置，可使用像 ``getattr(module, '__loader__', None) is"
" not None`` 这样的写法。 (:issue:`17115`。)"

#: ../../whatsnew/3.4.rst:2280
msgid ""
":meth:`!importlib.util.module_for_loader` now sets ``__loader__`` and "
"``__package__`` unconditionally to properly support reloading. If this is "
"not desired then you will need to set these attributes manually. You can use"
" :func:`importlib.util.module_to_load` for module management."
msgstr ""
"现在 :meth:`!importlib.util.module_for_loader` 会无条件地设置 ``__loader__`` 和 "
"``__package__`` 以正确地支持重加载。 如果不希望如此那么你将需要手动设置这些属性。 你可以使用 "
":func:`importlib.util.module_to_load` 进行模块管理。"

#: ../../whatsnew/3.4.rst:2285
msgid ""
"Import now resets relevant attributes (e.g. ``__name__``, ``__loader__``, "
"``__package__``, ``__file__``, ``__cached__``) unconditionally when "
"reloading. Note that this restores a pre-3.3 behavior in that it means a "
"module is re-found when re-loaded (:issue:`19413`)."
msgstr ""
"当重载时 import 操作现在会无条件地重置相关属性 (例如 ``__name__``, ``__loader__``, "
"``__package__``, ``__file__``, ``__cached__``)。 请注意在模块重载时会被重发现这一点上该操作恢复了 3.3"
" 之前的行为 (:issue:`19413`)。"

#: ../../whatsnew/3.4.rst:2290
msgid ""
"Frozen packages no longer set ``__path__`` to a list containing the package "
"name, they now set it to an empty list.  The previous behavior could cause "
"the import system to do the wrong thing on submodule imports if there was "
"also a directory with the same name as the frozen package.  The correct way "
"to determine if a module is a package or not is to use ``hasattr(module, "
"'__path__')`` (:issue:`18065`)."
msgstr ""
"冻结的包将不再把 ``__path__`` 设为一个包含包名的列表，它们现在会把它设为一个空列表。 "
"当存在与冻结的包同名的目录时之前版本的行为可能会使导入系统错误地处理子模块。 确定一个模块是否属于包的正确方式是使用 ``hasattr(module,"
" '__path__')`` (:issue:`18065`)。"

#: ../../whatsnew/3.4.rst:2297
msgid ""
"Frozen modules no longer define a ``__file__`` attribute. It's semantically "
"incorrect for frozen modules to set the attribute as they are not loaded "
"from any explicit location. If you must know that a module comes from frozen"
" code then you can see if the module's ``__spec__.location`` is set to "
"``'frozen'``, check if the loader is a subclass of "
":class:`importlib.machinery.FrozenImporter`, or if Python 2 compatibility is"
" necessary you can use :func:`!imp.is_frozen`."
msgstr ""
"冻结的包将不再定义 ``__file__`` 属性。 对冻结模块设置该属性在语义上是不正确的因为它们并不是从任何显式位置加载。 "
"如果你必须知道一个模块是来自冻结的代码那么你可以查看该模块的 ``__spec__.location`` 是否被设为 "
"``'frozen'``，检测加载器是否为 :class:`importlib.machinery.FrozenImporter` 的子类，或者如果需要"
" Python 2 兼容性则可以使用 :func:`!imp.is_frozen`。"

#: ../../whatsnew/3.4.rst:2305
msgid ""
":func:`py_compile.compile` now raises :exc:`FileExistsError` if the file "
"path it would write to is a symlink or a non-regular file. This is to act as"
" a warning that import will overwrite those files with a regular file "
"regardless of what type of file path they were originally."
msgstr ""
"现在 :func:`py_compile.compile` 在它要写入的文件路径是符号链接或非常规文件时会引发 "
":exc:`FileExistsError`。 这是为了提示导入系统将用一个常规文件覆盖相应文件而不管原始文件路径是什么类型而发出的警告。"

#: ../../whatsnew/3.4.rst:2310
msgid ""
":meth:`importlib.abc.SourceLoader.get_source` no longer raises "
":exc:`ImportError` when the source code being loaded triggers a "
":exc:`SyntaxError` or :exc:`UnicodeDecodeError`. As :exc:`ImportError` is "
"meant to be raised only when source code cannot be found but it should, it "
"was felt to be over-reaching/overloading of that meaning when the source "
"code is found but improperly structured. If you were catching ImportError "
"before and wish to continue to ignore syntax or decoding issues, catch all "
"three exceptions now."
msgstr ""
"当被加载的源代码触发了 :exc:`SyntaxError` 或 :exc:`UnicodeDecodeError` 时 "
":meth:`importlib.abc.SourceLoader.get_source` 将不再引发 :exc:`ImportError`。 因为 "
":exc:`ImportError` 本意只是在应该找到源代码但却找不到时被引发，而在源代码已找到但结构不正确时使用此异常会感觉有些过度/过载。 "
"如果你在之前是捕获 ImportError 并希望继续忽略语法或解码问题，现在应当捕获所有这三个异常。"

#: ../../whatsnew/3.4.rst:2319
msgid ""
":func:`functools.update_wrapper` and :func:`functools.wraps` now correctly "
"set the ``__wrapped__`` attribute to the function being wrapped, even if "
"that function also had its ``__wrapped__`` attribute set. This means "
"``__wrapped__`` attributes now correctly link a stack of decorated functions"
" rather than every ``__wrapped__`` attribute in the chain referring to the "
"innermost function. Introspection libraries that assumed the previous "
"behaviour was intentional can use :func:`inspect.unwrap` to access the first"
" function in the chain that has no ``__wrapped__`` attribute."
msgstr ""
"现在 :func:`functools.update_wrapper` 和 :func:`functools.wraps` 会正确地将 "
"``__wrapped__`` 属性设为被包装的函数，即使该函数同样设置了 ``__wrapped__`` 属性。 这意味着 "
"``__wrapped__`` 属性现在会正确地链接由被装饰函数组成的栈而不是链中指向最内层函数的的每个 ``__wrapped__`` 属性。 "
"确定要沿袭之前版本行为的内省库可以使用 :func:`inspect.unwrap` 来访问链中没有 ``__wrapped__`` 属性的第一个函数。"

#: ../../whatsnew/3.4.rst:2329
msgid ""
":func:`inspect.getfullargspec` has been reimplemented on top of "
":func:`inspect.signature` and hence handles a much wider variety of callable"
" objects than it did in the past. It is expected that additional builtin and"
" extension module callables will gain signature metadata over the course of "
"the Python 3.4 series. Code that assumes that :func:`inspect.getfullargspec`"
" will fail on non-Python callables may need to be adjusted accordingly."
msgstr ""
":func:`inspect.getfullargspec` 已在 :func:`inspect.signature` "
"之上重新实现因而能够处理比之前更多种类的可调用对象。 预计在 Python 3.4 系列发布过程中将会有更多内置和扩展模块的可调用对象获得签名元数据。 "
"假定 :func:`inspect.getfullargspec` 会在非 Python 可调用对象上出错的代码可能需要做相应的调整。"

#: ../../whatsnew/3.4.rst:2337
msgid ""
":class:`importlib.machinery.PathFinder` now passes on the current working "
"directory to objects in :data:`sys.path_hooks` for the empty string. This "
"results in :data:`sys.path_importer_cache` never containing ``''``, thus "
"iterating through :data:`sys.path_importer_cache` based on :data:`sys.path` "
"will not find all keys. A module's ``__file__`` when imported in the current"
" working directory will also now have an absolute path, including when using"
" ``-m`` with the interpreter (except for ``__main__.__file__`` when a script"
" has been executed directly using a relative path) (Contributed by Brett "
"Cannon in :issue:`18416`).  is specified on the command-line) "
"(:issue:`18416`)."
msgstr ""
"对于空字符串 :class:`importlib.machinery.PathFinder` 现在会将当前工作目录传给 "
":data:`sys.path_hooks` 中的对象。 这导致 :data:`sys.path_importer_cache` 绝不会包含 "
"``''``，因此基于 :data:`sys.path` 迭代 :data:`sys.path_importer_cache` 将不无找出所有的键。 "
"当从当前工作目录导入时模块的 ``__file__`` 现在也将是一个绝对路径，包括在命令行中指定解释器使用 ``-m`` "
"的情况（但当一个脚本已经直接使用相对路径被执行时的 ``__main__.__file__`` 除外） （由 Brett Cannon 在 "
":issue:`18416` 中贡献）。 (:issue:`18416`)。"

#: ../../whatsnew/3.4.rst:2348
msgid ""
"The removal of the *strict* argument to :class:`~http.client.HTTPConnection`"
" and :class:`~http.client.HTTPSConnection` changes the meaning of the "
"remaining arguments if you are specifying them positionally rather than by "
"keyword.  If you've been paying attention to deprecation warnings your code "
"should already be specifying any additional arguments via keywords."
msgstr ""
"传给 :class:`~http.client.HTTPConnection` 和 "
":class:`~http.client.HTTPSConnection` 的 *strict* "
"参数被移除会改变剩余参数的含义，如果你是以位置参数而不是关键字参数方式指定它们的话。 "
"如果你已经注意到弃用警告那么你的代码应当已经通过关键字参数方式指定所有额外参数了。"

#: ../../whatsnew/3.4.rst:2354
msgid ""
"Strings between ``from __future__ import ...`` statements now *always* raise"
" a :exc:`SyntaxError`.  Previously if there was no leading docstring, an "
"interstitial string would sometimes be ignored.  This brings CPython into "
"compliance with the language spec; Jython and PyPy already were. "
"(:issue:`17434`)."
msgstr ""
"现在 ``from __future__ import ...`` 语句之间的字符串 *总是* 会引发 :exc:`SyntaxError`。 "
"在之前版本中如果没有开头的文档字符串，则中间的字符串有时会被忽略。 这使得 CPython 与语言规范保持一致；Jython 和 PyPy "
"已经是这样了。 (:issue:`17434`)。"

#: ../../whatsnew/3.4.rst:2360
msgid ""
":meth:`ssl.SSLSocket.getpeercert` and :meth:`ssl.SSLSocket.do_handshake` now"
" raise an :exc:`OSError` with ``ENOTCONN`` when the ``SSLSocket`` is not "
"connected, instead of the previous behavior of raising an "
":exc:`AttributeError`.  In addition, :meth:`~ssl.SSLSocket.getpeercert` will"
" raise a :exc:`ValueError` if the handshake has not yet been done."
msgstr ""
"当 ``SSLSocket`` 未连接时 :meth:`ssl.SSLSocket.getpeercert` 和 "
":meth:`ssl.SSLSocket.do_handshake` 现在会引发 :exc:`OSError` 并附带 "
"``ENOTCONN``，而非如之前版本的行为那样引发 :exc:`AttributeError`。 此外，当握手尚未完成时 "
":meth:`~ssl.SSLSocket.getpeercert` 将会引发 :exc:`ValueError`。"

#: ../../whatsnew/3.4.rst:2366
msgid ""
":func:`base64.b32decode` now raises a :exc:`binascii.Error` when the input "
"string contains non-b32-alphabet characters, instead of a :exc:`TypeError`."
"  This particular :exc:`TypeError` was missed when the other "
":exc:`TypeError`\\ s were converted.  (Contributed by Serhiy Storchaka in "
":issue:`18011`.)  Note: this change was also inadvertently applied in Python"
" 3.3.3."
msgstr ""
"当输入字符串包含 non-b32-alphabet 字符时 :func:`base64.b32decode` 现在会引发 "
":exc:`binascii.Error`，而不是 :exc:`TypeError`。 之前在其他 :exc:`TypeError` 被转换时这个 "
":exc:`TypeError` 被忽略了。 （由 Serhiy Storchaka 在 :issue:`18011` 中贡献。） "
"注意：这项修改也被非故意地应用到了 Python 3.3.3。"

#: ../../whatsnew/3.4.rst:2373
msgid ""
"The :attr:`!file` attribute is now automatically closed when the creating "
":class:`!cgi.FieldStorage` instance is garbage collected. If you were "
"pulling the file object out separately from the :class:`!cgi.FieldStorage` "
"instance and not keeping the instance alive, then you should either store "
"the entire :class:`!cgi.FieldStorage` instance or read the contents of the "
"file before the :class:`!cgi.FieldStorage` instance is garbage collected."
msgstr ""
"当正在创建的 :class:`!cgi.FieldStorage` 实例被作为垃圾回收时 :attr:`!file` 属性现在会自动关闭。 "
"如果你要单独从 :class:`!cgi.FieldStorage` 实例取出文件对象而不让该实例保持存活，那么你应当在 "
":class:`!cgi.FieldStorage` 实例被作为垃圾回收之前存储整个 :class:`!cgi.FieldStorage` "
"实例或读取文件的内容。"

#: ../../whatsnew/3.4.rst:2380
msgid ""
"Calling ``read`` or ``write`` on a closed SSL socket now raises an "
"informative :exc:`ValueError` rather than the previous more mysterious "
":exc:`AttributeError` (:issue:`9177`)."
msgstr ""
"在已关闭的 SSL 套接字上调用 ``read`` 或 ``write`` 现在会引发更具信息量的 :exc:`ValueError` "
"而非之前更令人困惑的 :exc:`AttributeError` (:issue:`9177`)。"

#: ../../whatsnew/3.4.rst:2384
msgid ""
":meth:`slice.indices` no longer produces an :exc:`OverflowError` for huge "
"values.  As a consequence of this fix, :meth:`slice.indices` now raises a "
":exc:`ValueError` if given a negative length; previously it returned "
"nonsense values (:issue:`14794`)."
msgstr ""
"对于巨大数值 :meth:`slice.indices` 将不再产生 :exc:`OverflowError`。 作为此项修复的结果，当给予负的长度时 "
":meth:`slice.indices` 现在会引发 :exc:`ValueError`；在之前版本中它会返回无意义的值 "
"(:issue:`14794`)。"

#: ../../whatsnew/3.4.rst:2389
msgid ""
"The :class:`complex` constructor, unlike the :mod:`cmath` functions, was "
"incorrectly accepting :class:`float` values if an object's ``__complex__`` "
"special method returned one.  This now raises a :exc:`TypeError`. "
"(:issue:`16290`.)"
msgstr ""
"与 :mod:`cmath` 中的函数不同，当一个对象的 ``__complex__`` 特殊方法返回 :class:`float` 值时 "
":class:`complex` 构造器会不正确地接受它。 现在这会引发 :exc:`TypeError`。 (:issue:`16290`。)"

#: ../../whatsnew/3.4.rst:2394
msgid ""
"The :class:`int` constructor in 3.2 and 3.3 erroneously accepts "
":class:`float` values for the *base* parameter.  It is unlikely anyone was "
"doing this, but if so, it will now raise a :exc:`TypeError` "
"(:issue:`16772`)."
msgstr ""
"在 3.2 和 3.3 中的 :class:`int` 构造器会错误地接受 :class:`float` 值作为 *base* 形参。 "
"多数人不太可能这样做，但如果真的如此，现在它将引发 :exc:`TypeError` (:issue:`16772`)。"

#: ../../whatsnew/3.4.rst:2398
msgid ""
"Defaults for keyword-only arguments are now evaluated *after* defaults for "
"regular keyword arguments, instead of before.  Hopefully no one wrote any "
"code that depends on the previous buggy behavior (:issue:`16967`)."
msgstr ""
"现在仅限关键字参数的默认值将在常规关键字参数的默认值 *之后* 被求值，而非之前。 希望没有人写过任何依赖于之前的有缺陷行为的代码 "
"(:issue:`16967`)。"

#: ../../whatsnew/3.4.rst:2402
msgid ""
"Stale thread states are now cleared after :func:`~os.fork`.  This may cause "
"some system resources to be released that previously were incorrectly kept "
"perpetually alive (for example, database connections kept in thread-local "
"storage).  (:issue:`17094`.)"
msgstr ""
"现在陈旧的线程状态将在 :func:`~os.fork` 之后被清除。 "
"这可能导致某些之前被不正确地保持永久存活的系统资源（例如，保存在本线程存储中的数据库连接）被释放。 (:issue:`17094`。)"

#: ../../whatsnew/3.4.rst:2407
msgid ""
"Parameter names in ``__annotations__`` dicts are now mangled properly, "
"similarly to :attr:`~function.__kwdefaults__`. (Contributed by Yury "
"Selivanov in :issue:`20625`.)"
msgstr ""
"现在 ``__annotations__`` 字典中的形参名称将被正确地处理，具体方式与 "
":attr:`~function.__kwdefaults__` 类似。 （由 Yury Selivanov 在 :issue:`20625` "
"中贡献。）"

#: ../../whatsnew/3.4.rst:2411
msgid ""
":attr:`hashlib.hash.name` now always returns the identifier in lower case. "
"Previously some builtin hashes had uppercase names, but now that it is a "
"formal public interface the naming has been made consistent "
"(:issue:`18532`)."
msgstr ""
"现在 :attr:`hashlib.hash.name` 将总是返回小写形式的标识符。 "
"在之前版本中某些内置哈希具有大写的名称，但现在它已成为命名方式保持一致的正式公有接口 (:issue:`18532`)。"

#: ../../whatsnew/3.4.rst:2415
msgid ""
"Because :mod:`unittest.TestSuite` now drops references to tests after they "
"are run, test harnesses that reuse a :class:`~unittest.TestSuite` to re-run "
"a set of tests may fail.   Test suites should not be re-used in this fashion"
" since it means state is retained between test runs, breaking the test "
"isolation that :mod:`unittest` is designed to provide.  However, if the lack"
" of isolation is considered acceptable, the old behavior can be restored by "
"creating a :mod:`~unittest.TestSuite` subclass that defines a "
"``_removeTestAtIndex`` method that does nothing (see "
":meth:`.TestSuite.__iter__`) (:issue:`11798`)."
msgstr ""
"因为现在 :mod:`unittest.TestSuite` 会在测试被运行后丢弃对它们的引用，所以那些重用 "
":class:`~unittest.TestSuite` 来重新运行测试集的测试套件可能会失败。 "
"测试套件不应以这样的方式被重用，因为这意味着状态会在多次测试运行之间保持不变，破坏 :mod:`unittest` 设计时要提供的测试状态隔离。 "
"不过，如果缺乏隔离被视为是可接受的，则可通过创建定义了不执行任何操作的 ``_removeTestAtIndex`` 方法的 "
":mod:`~unittest.TestSuite` 子类来恢复旧版行为 (参见 :meth:`.TestSuite.__iter__`) "
"(:issue:`11798`)。"

#: ../../whatsnew/3.4.rst:2425
msgid ""
":mod:`unittest` now uses :mod:`argparse` for command line parsing.  There "
"are certain invalid command forms that used to work that are no longer "
"allowed; in theory this should not cause backward compatibility issues since"
" the disallowed command forms didn't make any sense and are unlikely to be "
"in use."
msgstr ""
"现在 :mod:`unittest` 会使用 :mod:`argparse` 执行命令行解析。 "
"有些过去可用的不合法命令形式将不再被允许；理论上说这不会导致向下兼容性问题因为这些不允许的命令形式没有任何意义也不大可能会被使用。"

#: ../../whatsnew/3.4.rst:2430
msgid ""
"The :func:`re.split`, :func:`re.findall`, and :func:`re.sub` functions, and "
"the :meth:`~re.match.group` and :meth:`~re.match.groups` methods of "
"``match`` objects now always return a *bytes* object when the string to be "
"matched is a :term:`bytes-like object`.  Previously the return type matched "
"the input type, so if your code was depending on the return value being, "
"say, a ``bytearray``, you will need to change your code."
msgstr ""
"现在当要匹配的对象类型为 :term:`bytes-like object` 时 :func:`re.split`, "
":func:`re.findall` 和 :func:`re.sub` 等函数，以及 ``match`` 对象的 "
":meth:`~re.match.group` 和 :meth:`~re.match.groups` 方法将总是返回 *bytes* 对象。 "
"在之前版本中返回类型将与输入类型相匹配，因此如果你的代码依赖于返回值必须为 ``bytearray`` 之类的行为，你将需要修改你的代码。"

#: ../../whatsnew/3.4.rst:2437
msgid ""
":mod:`!audioop` functions now raise an error immediately if passed string "
"input, instead of failing randomly later on (:issue:`16685`)."
msgstr "现在当输入字符串时 :mod:`!audioop` 的函数会立即引发错误，而不是稍后随机出错 (:issue:`16685`)。"

#: ../../whatsnew/3.4.rst:2440
msgid ""
"The new *convert_charrefs* argument to :class:`~html.parser.HTMLParser` "
"currently defaults to ``False`` for backward compatibility, but will "
"eventually be changed to default to ``True``.  It is recommended that you "
"add this keyword, with the appropriate value, to any "
":class:`~html.parser.HTMLParser` calls in your code (:issue:`13633`)."
msgstr ""
"新增的传给 :class:`~html.parser.HTMLParser` 的 *convert_charrefs* 参数目前默认为 "
"``False`` 以保持向下兼容，但最终将修改成默认为 ``True``。 建议你在你的代码中为所有 "
":class:`~html.parser.HTMLParser` 调用添加此关键字，并设置适当的值 (:issue:`13633`)。"

#: ../../whatsnew/3.4.rst:2446
msgid ""
"Since the *digestmod* argument to the :func:`hmac.new` function will in the "
"future have no default, all calls to :func:`hmac.new` should be changed to "
"explicitly specify a *digestmod* (:issue:`17276`)."
msgstr ""
"由于传给 :func:`hmac.new` 函数的 *digestmod* 参数在未来将不设默认值，所有对 :func:`hmac.new` "
"的调用都应当修改为显式地指定 *digestmod* (:issue:`17276`)。"

#: ../../whatsnew/3.4.rst:2450
msgid ""
"Calling :func:`sysconfig.get_config_var` with the ``SO`` key, or looking "
"``SO`` up in the results of a call to :func:`sysconfig.get_config_vars` is "
"deprecated.  This key should be replaced by ``EXT_SUFFIX`` or "
"``SHLIB_SUFFIX``, depending on the context (:issue:`19555`)."
msgstr ""
"附带 ``SO`` 键调用 :func:`sysconfig.get_config_var`，或者在对 "
":func:`sysconfig.get_config_vars` 的调用结果中查找 ``SO`` 的做法已被弃用。 该键应当被 "
"``EXT_SUFFIX`` 或 ``SHLIB_SUFFIX`` 替代，由具体场景决定 (:issue:`19555`)。"

#: ../../whatsnew/3.4.rst:2455
msgid ""
"Any calls to ``open`` functions that specify ``U`` should be modified. ``U``"
" is ineffective in Python3 and will eventually raise an error if used. "
"Depending on the function, the equivalent of its old Python2 behavior can be"
" achieved using either a *newline* argument, or if necessary by wrapping the"
" stream in :mod:`~io.TextIOWrapper` to use its *newline* argument "
"(:issue:`15204`)."
msgstr ""
"任何指定了 ``U`` 的 ``open`` 函数调用都应当被修改。 ``U`` 在 Python3 将没有效果并且最终会在被使用时引发错误。 "
"对于该函数，要得到与它的旧 Python2 行为相同的效果可以使用 *newline* 参数，或者在必要时将流包装在 "
":mod:`~io.TextIOWrapper` 以使用其 *newline* 参数 (:issue:`15204`)。"

#: ../../whatsnew/3.4.rst:2462
msgid ""
"If you use ``pyvenv`` in a script and desire that pip *not* be installed, "
"you must add ``--without-pip`` to your command invocation."
msgstr ""
"如果你在脚本中使用 ``pyvenv`` 并且希望 *不要* 安装 pip，你必须在你的唤起命令中添加 ``--without-pip``。"

#: ../../whatsnew/3.4.rst:2466
msgid ""
"The default behavior of :func:`json.dump` and :func:`json.dumps` when an "
"indent is specified has changed: it no longer produces trailing spaces after"
" the item separating commas at the ends of lines.  This will matter only if "
"you have tests that are doing white-space-sensitive comparisons of such "
"output (:issue:`16333`)."
msgstr ""
":func:`json.dump` 和 :func:`json.dumps` "
"在指定了缩进值时的默认行为已被改变：它不会在行末的条目分隔逗号后面再附加空格。 此项改变仅在你使用了对这样的输出执行空格敏感比较的测试时才会有影响 "
"(:issue:`16333`)。"

#: ../../whatsnew/3.4.rst:2472
msgid ""
":mod:`doctest` now looks for doctests in extension module ``__doc__`` "
"strings, so if your doctest test discovery includes extension modules that "
"have things that look like doctests in them you may see test failures you've"
" never seen before when running your tests (:issue:`3158`)."
msgstr ""
"现在 :mod:`doctest` 会在扩展模块的 ``__doc__`` 字符串中寻找 doctest，因此如果你的 doctest "
"测试发现包括具有类似 doctest 内容的扩展模块那么你可能会遇到在你之前运行测试时从未遇到过的测试失败 (:issue:`3158`)。"

#: ../../whatsnew/3.4.rst:2477
msgid ""
"The :mod:`collections.abc` module has been slightly refactored as part of "
"the Python startup improvements.  As a consequence of this, it is no longer "
"the case that importing :mod:`collections` automatically imports "
":mod:`collections.abc`.  If your program depended on the (undocumented) "
"implicit import, you will need to add an explicit ``import collections.abc``"
" (:issue:`20784`)."
msgstr ""
"作为 Python 启动过程改进的一部分 :mod:`collections.abc` 模块进行了小幅度的重构。 作为此项重构的结果，导入 "
":mod:`collections` 将不再自动导入 :mod:`collections.abc`。 "
"如果你的程序依赖于这个（未写入文档的）隐式导入，你将需要添加显式的 ``import collections.abc`` "
"(:issue:`20784`)。"

#: ../../whatsnew/3.4.rst:2486
msgid "Changes in the C API"
msgstr "C API 的变化"

#: ../../whatsnew/3.4.rst:2488
msgid ""
":c:func:`PyEval_EvalFrameEx`, :c:func:`PyObject_Repr`, and "
":c:func:`PyObject_Str`, along with some other internal C APIs, now include a"
" debugging assertion that ensures they are not used in situations where they"
" may silently discard a currently active exception. In cases where "
"discarding the active exception is expected and desired (for example, "
"because it has already been saved locally with :c:func:`PyErr_Fetch` or is "
"being deliberately replaced with a different exception), an explicit "
":c:func:`PyErr_Clear` call will be needed to avoid triggering the assertion "
"when invoking these operations (directly or indirectly) and running against "
"a version of Python that is compiled with assertions enabled."
msgstr ""
"现在 :c:func:`PyEval_EvalFrameEx`, :c:func:`PyObject_Repr` 和 "
":c:func:`PyObject_Str` 以及其他一些内部 C API "
"都包括了一个调试断言，以确保它们不会在可能会静默地丢弃当前活动异常的情况下使用。 在预期并且希望丢弃活动异常的情况下（例如，由于已通过 "
":c:func:`PyErr_Fetch` 将其保存在本地或是有意将其替换为不同的异常 ），则需调用显式的 :c:func:`PyErr_Clear` "
"以避免在（直接或间接）唤起这些操作和针对启用断言编译的 Python 的版本运行时触发断言。"

#: ../../whatsnew/3.4.rst:2500
msgid ""
":c:func:`PyErr_SetImportError` now sets :exc:`TypeError` when its **msg** "
"argument is not set. Previously only ``NULL`` was returned with no exception"
" set."
msgstr ""
"现在 :c:func:`PyErr_SetImportError` 在其 **msg** 参数未被设置时会设置 :exc:`TypeError`。 "
"在之前版本中仅会返回 ``NULL`` 而不设置异常。"

#: ../../whatsnew/3.4.rst:2504
msgid ""
"The result of the :c:data:`PyOS_ReadlineFunctionPointer` callback must now "
"be a string allocated by :c:func:`PyMem_RawMalloc` or "
":c:func:`PyMem_RawRealloc`, or ``NULL`` if an error occurred, instead of a "
"string allocated by :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc` "
"(:issue:`16742`)"
msgstr ""
"现在 :c:data:`PyOS_ReadlineFunctionPointer` 回调的结果必须是一个由 "
":c:func:`PyMem_RawMalloc` 或 :c:func:`PyMem_RawRealloc` 分配的字符串，或者如果发生错误则为 "
"``NULL``，而不是由 :c:func:`PyMem_Malloc` 或 :c:func:`PyMem_Realloc` 分配的字符串 "
"(:issue:`16742`)"

#: ../../whatsnew/3.4.rst:2510
msgid ""
":c:func:`PyThread_set_key_value` now always set the value. In Python 3.3, "
"the function did nothing if the key already exists (if the current value is "
"a non-``NULL`` pointer)."
msgstr ""
"现在 :c:func:`PyThread_set_key_value` 总是会设置值。 在 Python 3.3 中，如果键已存在（如果当前值为非 "
"``NULL`` 指针）该函数将不执行任何操作。"

#: ../../whatsnew/3.4.rst:2514
msgid ""
"The ``f_tstate`` (thread state) field of the :c:type:`PyFrameObject` "
"structure has been removed to fix a bug: see :issue:`14432` for the "
"rationale."
msgstr ""
":c:type:`PyFrameObject` 结构体的 ``f_tstate`` (线程状态) 字段已被移除以修复一个程序错误；相关理由参见 "
":issue:`14432`。"

#: ../../whatsnew/3.4.rst:2519
msgid "Changed in 3.4.3"
msgstr "3.4.3 的变化"

#: ../../whatsnew/3.4.rst:2524
msgid ""
"PEP 476: Enabling certificate verification by default for stdlib http "
"clients"
msgstr "PEP 476: 默认为 stdlib http 客户端启用证书验证"

#: ../../whatsnew/3.4.rst:2526
msgid ""
":mod:`http.client` and modules which use it, such as :mod:`urllib.request` "
"and :mod:`xmlrpc.client`, will now verify that the server presents a "
"certificate which is signed by a CA in the platform trust store and whose "
"hostname matches the hostname being requested by default, significantly "
"improving security for many applications."
msgstr ""
":mod:`http.client` 及其他依赖它的模块，比如 :mod:`urllib.request` 和 "
":mod:`xmlrpc.client`，现在将验证服务器是否提供了由平台信任的仓库中的 CA "
"签名的证书并且其主机名与默认被请求的主机名相匹配，这将显著提升许多应用程序的安全性。"

#: ../../whatsnew/3.4.rst:2532
msgid ""
"For applications which require the old previous behavior, they can pass an "
"alternate context::"
msgstr "对于需要之前版本的旧有行为的应用程序，可以传入一个替代的上下文::"

#: ../../whatsnew/3.4.rst:2535
msgid ""
"import urllib.request\n"
"import ssl\n"
"\n"
"# This disables all verification\n"
"context = ssl._create_unverified_context()\n"
"\n"
"# This allows using a specific certificate for the host, which doesn't need\n"
"# to be in the trust store\n"
"context = ssl.create_default_context(cafile=\"/path/to/file.crt\")\n"
"\n"
"urllib.request.urlopen(\"https://invalid-cert\", context=context)"
msgstr ""
"import urllib.request\n"
"import ssl\n"
"\n"
"# 这将禁用所有验证\n"
"context = ssl._create_unverified_context()\n"
"\n"
"# 这将允许为主机使用指定证书，\n"
"# 它无须位于受信任的证书存储库中\n"
"context = ssl.create_default_context(cafile=\"/path/to/file.crt\")\n"
"\n"
"urllib.request.urlopen(\"https://invalid-cert\", context=context)"
