# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# python-doc bot, 2025
# 汇民 王 <whuim@qq.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-05 14:17+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.14.rst:3
msgid "What's new in Python 3.14"
msgstr "Python 3.14 有什么新变化"

#: ../../whatsnew/3.14.rst:0
msgid "Editor"
msgstr "编者"

#: ../../whatsnew/3.14.rst:5
msgid "Hugo van Kemenade"
msgstr "Hugo van Kemenade"

#: ../../whatsnew/3.14.rst:47
msgid ""
"This article explains the new features in Python 3.14, compared to 3.13."
msgstr "本文介绍了 Python 3.14 相比 3.13 的新增特性。"

#: ../../whatsnew/3.14.rst:49
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr "完整的详情可参阅 :ref:`更新日志 <changelog>`。"

#: ../../whatsnew/3.14.rst:53
msgid ":pep:`745` -- Python 3.14 release schedule"
msgstr ":pep:`745` -- Python 3.14 发布计划"

#: ../../whatsnew/3.14.rst:57
msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.14 moves towards release,"
" so it's worth checking back even after reading earlier versions."
msgstr ""
"预发布版用户应当了解到此文档目前处于草稿状态。 它将随着 Python 3.14 的发布进程不断更新，因此即使已经阅读过较早的版本也仍然值得再次查看。"

#: ../../whatsnew/3.14.rst:63
msgid "Summary -- release highlights"
msgstr "摘要 -- 发布关键要点"

#: ../../whatsnew/3.14.rst:68
msgid ""
"Python 3.14 will be the latest stable release of the Python programming "
"language, with a mix of changes to the language, the implementation and the "
"standard library."
msgstr "Python 3.14 将成为 Python 编程语言的最新稳定版本，包含对语言本身、实现细节及标准库的一系列更新。"

#: ../../whatsnew/3.14.rst:72
msgid ""
"The biggest changes to the implementation include template strings "
"(:pep:`750`), deferred evaluation of annotations (:pep:`649`), and a new "
"type of interpreter that uses tail calls."
msgstr "对于实现的最大变化包括模板字符串 (:pep:`750`)，标注的迟延求值 (:pep:`649`)，以及一种使用尾调用的新解释器类型。"

#: ../../whatsnew/3.14.rst:76
msgid ""
"The library changes include the addition of a new :mod:`!annotationlib` "
"module for introspecting and wrapping annotations (:pep:`749`), a new "
":mod:`!compression.zstd` module for Zstandard support (:pep:`784`), plus "
"syntax highlighting in the REPL, as well as the usual deprecations and "
"removals, and improvements in user-friendliness and correctness."
msgstr ""
"标准库的变化包括新增 :mod:`!annotationlib` 模块用于内省和包裹标注 (:pep:`749`)，新增 "
":mod:`!compression.zstd` 模块用于 Zstandard 支持 (:pep:`784`)，以及 REPL "
"中的语法高亮，以及常规的弃用和移除，还有用户友好度和正确性方面的改进。"

#: ../../whatsnew/3.14.rst:85
msgid ""
":ref:`PEP 779: Free-threaded Python is officially supported "
"<whatsnew314-pep779>`"
msgstr ":ref:`PEP 779: 自由线程 Python 已获官方支持 <whatsnew314-pep779>`"

#: ../../whatsnew/3.14.rst:86
msgid ""
":ref:`PEP 649 and 749: deferred evaluation of annotations "
"<whatsnew314-pep649>`"
msgstr ":ref:`PEP 649 和 749：标注的迟延求值 <whatsnew314-pep649>`"

#: ../../whatsnew/3.14.rst:87
msgid ""
":ref:`PEP 734: Multiple interpreters in the stdlib <whatsnew314-pep734>`"
msgstr ":ref:`PEP 734: 添加多解释器到标准库 <whatsnew314-pep734>`"

#: ../../whatsnew/3.14.rst:88
msgid ":ref:`PEP 741: Python configuration C API <whatsnew314-pep741>`"
msgstr ":ref:`PEP 741: Python 配置 C API <whatsnew314-pep741>`"

#: ../../whatsnew/3.14.rst:89
msgid ":ref:`PEP 750: Template strings <whatsnew314-pep750>`"
msgstr ":ref:`PEP 750: 模板字符串 <whatsnew314-pep750>`"

#: ../../whatsnew/3.14.rst:90
msgid ""
":ref:`PEP 758: Allow except and except* expressions without parentheses "
"<whatsnew314-pep758>`"
msgstr ":ref:`PEP 758：允许不带括号的 except 和 except* 表达式 <whatsnew314-pep758>`"

#: ../../whatsnew/3.14.rst:91
msgid ":ref:`PEP 761: Discontinuation of PGP signatures <whatsnew314-pep761>`"
msgstr ":ref:`PEP 761：停止使用 PGP 签名 <whatsnew314-pep761>`"

#: ../../whatsnew/3.14.rst:92
msgid ""
":ref:`PEP 765: Disallow return/break/continue that exit a finally block "
"<whatsnew314-pep765>`"
msgstr ""
":ref:`PEP 765: 不允许退出 finally 代码块的 return/break/continue "
"<whatsnew314-pep765>`"

#: ../../whatsnew/3.14.rst:93
msgid ""
":ref:`Free-threaded mode improvements <whatsnew314-free-threaded-cpython>`"
msgstr ":ref:`自由线程模式的改进 <whatsnew314-free-threaded-cpython>`"

#: ../../whatsnew/3.14.rst:94
msgid ""
":ref:`PEP 768: Safe external debugger interface for CPython "
"<whatsnew314-pep768>`"
msgstr ":ref:`PEP 768：Cpython 的安全外部调试器接口<whatsnew314-pep768>`"

#: ../../whatsnew/3.14.rst:95
msgid ""
":ref:`PEP 784: Adding Zstandard to the standard library "
"<whatsnew314-pep784>`"
msgstr ":ref:`PEP 784: 添加 Zstandard 到标准库 <whatsnew314-pep784>`"

#: ../../whatsnew/3.14.rst:96
msgid ":ref:`A new type of interpreter <whatsnew314-tail-call>`"
msgstr ":ref:`一种新型的解释器 <whatsnew314-tail-call>`"

#: ../../whatsnew/3.14.rst:97
msgid ""
":ref:`Syntax highlighting in PyREPL <whatsnew314-pyrepl-highlighting>`, and "
"color output in :ref:`unittest <whatsnew314-color-unittest>`, :ref:`argparse"
" <whatsnew314-color-argparse>`, :ref:`json <whatsnew314-color-json>` and "
":ref:`calendar <whatsnew314-color-calendar>` CLIs"
msgstr ""
":ref:`PyREPL 中的语法高亮 <whatsnew314-pyrepl-highlighting>`，以及 :ref:`unittest "
"<whatsnew314-color-unittest>`, :ref:`argparse <whatsnew314-color-argparse>`,"
" :ref:`json <whatsnew314-color-json>` 和 :ref:`calendar <whatsnew314-color-"
"calendar>` CLI 中的彩色输出"

#: ../../whatsnew/3.14.rst:102
msgid ""
":ref:`Binary releases for the experimental just-in-time compiler "
"<whatsnew314-jit-compiler>`"
msgstr ":ref:`针对实验性即时编译器的二进制发布包 <whatsnew314-jit-compiler>`"

#: ../../whatsnew/3.14.rst:106
msgid "Incompatible changes"
msgstr "不兼容的更改"

#: ../../whatsnew/3.14.rst:108
msgid ""
"On platforms other than macOS and Windows, the default :ref:`start method "
"<multiprocessing-start-methods>` for :mod:`multiprocessing` and "
":class:`~concurrent.futures.ProcessPoolExecutor` switches from *fork* to "
"*forkserver*."
msgstr ""
"在 macOS 和 Windows 以外的平台上，用于 :mod:`multiprocessing` 和 "
":class:`~concurrent.futures.ProcessPoolExecutor` 的默认 :ref:`start 方法 "
"<multiprocessing-start-methods>` 由 *fork* 改为 *forkserver*。"

#: ../../whatsnew/3.14.rst:113
msgid ""
"See :ref:`(1) <whatsnew314-concurrent-futures-start-method>` and :ref:`(2) "
"<whatsnew314-multiprocessing-start-method>` for details."
msgstr ""
"请参阅 :ref:`(1) <whatsnew314-concurrent-futures-start-method>` 和 :ref:`(2) "
"<whatsnew314-multiprocessing-start-method>` 了解详情。"

#: ../../whatsnew/3.14.rst:116
msgid ""
"If you encounter :exc:`NameError`\\s or pickling errors coming out of "
":mod:`multiprocessing` or :mod:`concurrent.futures`, see the "
":ref:`forkserver restrictions <multiprocessing-programming-forkserver>`."
msgstr ""
"如果你在 :mod:`multiprocessing` 或 :mod:`concurrent.futures` 中遇到 :exc:`NameError`"
" 或 pickle 错误，请参阅 :ref:`forkserver 的限制 <multiprocessing-programming-"
"forkserver>`。"

#: ../../whatsnew/3.14.rst:120
msgid ""
"The interpreter avoids some reference count modifications internally when "
"it's safe to do so. This can lead to different values returned from "
":func:`sys.getrefcount` and :c:func:`Py_REFCNT` compared to previous "
"versions of Python.  See :ref:`below <whatsnew314-refcount>` for details."
msgstr ""
"解释器会在保证安全的情况下避免某些引用计数修改。 这可能导致 :func:`sys.getrefcount` 和 :c:func:`Py_REFCNT`"
" 返回相比之前 Python 版本有所不同的值。 请参阅 :ref:`下文 <whatsnew314-refcount>` 了解详情。"

#: ../../whatsnew/3.14.rst:126 ../../whatsnew/3.14.rst:2850
msgid "New features"
msgstr "新的特性"

#: ../../whatsnew/3.14.rst:131
msgid "PEP 779: Free-threaded Python is officially supported"
msgstr "PEP 779: 自由线程 Python 已获官方支持"

#: ../../whatsnew/3.14.rst:133
msgid ""
"The free-threaded build of Python is now supported and no longer "
"experimental. This is the start of phase II where free-threaded Python is "
"officially supported but still optional."
msgstr "自由线程的 Python 构建版现在已被支持而不再是实验性的。 这是自由线程 Python 获得官方支持但仍为可选项的阶段 II 的开始。"

#: ../../whatsnew/3.14.rst:137
msgid ""
"We are confident that the project is on the right path, and we appreciate "
"the continued dedication from everyone working to make free-threading ready "
"for broader adoption across the Python community."
msgstr "我们相信该项目走在正确的路径上，我们赞赏各位持续努力的贡献使得自由线程特性已准备好在 Python 社区获得更广泛的接受。"

#: ../../whatsnew/3.14.rst:141
msgid ""
"With these recommendations and the acceptance of this PEP, we as the Python "
"developer community should broadly advertise that free-threading is a "
"supported Python build option now and into the future, and that it will not "
"be removed without a proper deprecation schedule."
msgstr ""
"随着这些建议和这个 PEP 被接受，我们 Python 开发者社区应当广泛宣传自由线程现在已成为受支持的 Python "
"构建选项并在未来继续发展，它不会在没有适当的弃用计划的情况下被移除。"

#: ../../whatsnew/3.14.rst:146
msgid ""
"Any decision to transition to phase III, with free-threading as the default "
"or sole build of Python is still undecided, and dependent on many factors "
"both within CPython itself and the community. This decision is for the "
"future."
msgstr ""
"任何过渡到第三阶段（将自由线程作为Python的默认或唯一构建）的决定仍未决定，这取决于CPython本身和社区内部的许多因素。这个决定是为了将来。"

#: ../../whatsnew/3.14.rst:151
msgid ""
":pep:`779` and its `acceptance "
"<https://discuss.python.org/t/pep-779-criteria-for-supported-status-for-"
"free-threaded-python/84319/123>`__."
msgstr ""
":pep:`779` 及其 `接受 <https://discuss.python.org/t/pep-779-criteria-for-"
"supported-status-for-free-threaded-python/84319/123>`__."

#: ../../whatsnew/3.14.rst:157
msgid "PEP 734: Multiple interpreters in the stdlib"
msgstr "PEP 734: 添加多解释器到标准库"

#: ../../whatsnew/3.14.rst:159
msgid ""
"The CPython runtime supports running multiple copies of Python in the same "
"process simultaneously and has done so for over 20 years. Each of these "
"separate copies is called an \"interpreter\". However, the feature had been "
"available only through the C-API."
msgstr ""
"CPython 运行时支持在同一个进程中同时运行多个 Python 的副本并且已经这样做了 20 年以上。 每个这样的单独副本被称为“解释器”。 "
"不过，该特性过去只能通过 C-API 来使用。"

#: ../../whatsnew/3.14.rst:164
msgid ""
"That limitation is removed in the 3.14 release, with the new "
":mod:`concurrent.interpreters` module."
msgstr "通过新增的 :mod:`concurrent.interpreters` 模块，这一限制已在 3.14 发布版中被移除。"

#: ../../whatsnew/3.14.rst:167
msgid ""
"There are at least two notable reasons why using multiple interpreters is "
"worth considering:"
msgstr "使用多解释器的做法值得被考虑至少有两个重要的理由："

#: ../../whatsnew/3.14.rst:170
msgid "they support a new (to Python), human-friendly concurrency model"
msgstr "它们支持（对 Python 来说）全新的、用户友好的并发模型"

#: ../../whatsnew/3.14.rst:171
msgid "true multi-core parallelism"
msgstr "真正的多核心并行"

#: ../../whatsnew/3.14.rst:173
msgid ""
"For some use cases, concurrency in software enables efficiency and can "
"simplify software, at a high level.  At the same time, implementing and "
"maintaining all but the simplest concurrency is often a struggle for the "
"human brain.  That especially applies to plain threads (for example, "
":mod:`threading`), where all memory is shared between all threads."
msgstr ""
"在某些应用场景中，软件中的并发机制能够在宏观层面上提高效率并简化软件设计。但与此同时，实现和维护除最简单形式之外的并发逻辑，通常对人脑来说是一项挑战。这一点尤其适用于普通线程（例如：:mod:`threading`），其中所有线程之间共享全部内存。"

#: ../../whatsnew/3.14.rst:179
msgid ""
"With multiple isolated interpreters, you can take advantage of a class of "
"concurrency models, like CSP or the actor model, that have found success in "
"other programming languages, like Smalltalk, Erlang, Haskell, and Go.  Think"
" of multiple interpreters like threads but with opt-in sharing."
msgstr ""
"通过使用多个隔离的解释器，您可以利用一类在其他编程语言（如 Smalltalk、Erlang、Haskell 和 Go）中已被证明成功的并发模型，例如 "
"CSP 或演员模型。可以将多个解释器视为线程，但它们之间的资源共享是可选的。"

#: ../../whatsnew/3.14.rst:185
msgid ""
"Regarding multi-core parallelism: as of the 3.12 release, interpreters are "
"now sufficiently isolated from one another to be used in parallel. (See "
":pep:`684`.)  This unlocks a variety of CPU-intensive use cases for Python "
"that were limited by the :term:`GIL`."
msgstr ""
"关于多核并行性：从 3.12 版本开始，各个解释器之间已实现足够的隔离，从而可以并行使用。（参见 :pep:`684`。）这使得 Python "
"能够解锁一系列此前受 :term:`GIL` 限制的 CPU 密集型应用场景。"

#: ../../whatsnew/3.14.rst:190
msgid ""
"Using multiple interpreters is similar in many ways to "
":mod:`multiprocessing`, in that they both provide isolated logical "
"\"processes\" that can run in parallel, with no sharing by default. However,"
" when using multiple interpreters, an application will use fewer system "
"resources and will operate more efficiently (since it stays within the same "
"process).  Think of multiple interpreters as having the isolation of "
"processes with the efficiency of threads."
msgstr ""
"使用多个解释器在许多方面与 :mod:`multiprocessing` "
"类似，因为它们都提供了相互隔离的逻辑“进程”，默认情况下不共享任何资源，并且可以并行运行。然而，在使用多个解释器时，应用程序将占用更少的系统资源，并能以更高的效率运行（因为它仍处于同一个进程内）。"
" 可以将多个解释器看作是：拥有进程级别的隔离性，同时具备线程级别的执行效率。"

#: ../../whatsnew/3.14.rst:201
msgid ""
"While the feature has been around for decades, multiple interpreters have "
"not been used widely, due to low awareness and the lack of a stdlib module."
"  Consequently, they currently have several notable limitations, which will "
"improve significantly now that the feature is finally going mainstream."
msgstr ""
"尽管该特性已经存在数十年，但由于认知度较低且缺乏标准库模块的支持，多个解释器并未被广泛使用。因此，目前它仍存在一些显著的限制。不过，随着这一特性终于开始走向主流，这些限制将得到显著改善。"

#: ../../whatsnew/3.14.rst:207
msgid "Current limitations:"
msgstr "当前限制："

#: ../../whatsnew/3.14.rst:209
msgid "starting each interpreter has not been optimized yet"
msgstr "启动每个解释器尚未经过优化。"

#: ../../whatsnew/3.14.rst:210
msgid ""
"each interpreter uses more memory than necessary (we will be working next on"
" extensive internal sharing between interpreters)"
msgstr "每个解释器目前占用的内存比实际需要的更多（我们下一步将重点推进解释器之间的内部共享，以优化这一问题）。"

#: ../../whatsnew/3.14.rst:213
msgid ""
"there aren't many options *yet* for truly sharing objects or other data "
"between interpreters (other than :type:`memoryview`)"
msgstr "解释器之间真正实现对象或其他数据共享的选项还很有限（除了 :type:`memoryview`）。"

#: ../../whatsnew/3.14.rst:215
msgid ""
"many extension modules on PyPI are not compatible with multiple interpreters"
" yet (stdlib extension modules *are* compatible)"
msgstr "PyPI 上的许多扩展模块目前尚不兼容多个解释器（标准库中的扩展模块 *是* 兼容的）。"

#: ../../whatsnew/3.14.rst:217
msgid ""
"the approach to writing applications that use multiple isolated interpreters"
" is mostly unfamiliar to Python users, for now"
msgstr "目前，针对使用多个隔离解释器编写应用程序的方法，对大多数 Python 用户来说仍较为陌生"

#: ../../whatsnew/3.14.rst:220
msgid ""
"The impact of these limitations will depend on future CPython improvements, "
"how interpreters are used, and what the community solves through PyPI "
"packages.  Depending on the use case, the limitations may not have much "
"impact, so try it out!"
msgstr ""
"这些限制的影响将取决于未来 CPython 的改进程度、解释器的使用方式，以及社区通过 PyPI "
"包所解决的问题。根据具体的应用场景，这些限制可能并不会造成太大影响，因此不妨尝试一下！"

#: ../../whatsnew/3.14.rst:225
msgid ""
"Furthermore, future CPython releases will reduce or eliminate overhead and "
"provide utilities that are less appropriate on PyPI.  In the meantime, most "
"of the limitations can also be addressed through extension modules, meaning "
"PyPI packages can fill any gap for 3.14, and even back to 3.12 where "
"interpreters were finally properly isolated and stopped sharing the "
":term:`GIL`.  Likewise, we expect to slowly see libraries on PyPI for high-"
"level abstractions on top of interpreters."
msgstr ""
"此外，未来的 CPython 版本将进一步减少甚至消除相关开销，并提供一些目前在 PyPI "
"上不太合适的工具。在此期间，大多数限制也可以通过扩展模块来解决，这意味着 PyPI 包可以填补 3.14 乃至回溯到 "
"3.12（此时解释器终于实现真正隔离并停止共享 :term:`GIL`）之间的功能缺口。同样地，我们预计 PyPI "
"上将逐渐出现基于多解释器构建的高级抽象库。"

#: ../../whatsnew/3.14.rst:233
msgid ""
"Regarding extension modules, work is in progress to update some PyPI "
"projects, as well as tools like Cython, pybind11, nanobind, and PyO3. The "
"steps for isolating an extension module are found at :ref:`isolating-"
"extensions-howto`.  Isolating a module has a lot of overlap with what is "
"required to support :ref:`free-threading <whatsnew314-free-threaded-"
"cpython>`, so the ongoing work in the community in that area will help "
"accelerate support for multiple interpreters."
msgstr ""
"关于扩展模块，目前正在进行一些 PyPI 项目的更新，以及对 Cython、pybind11、nanobind 和 PyO3 "
"等工具的支持工作。有关隔离扩展模块的具体步骤，可参考 :ref:`isolating-extensions-howto`。模块的隔离与支持 "
":ref:`自由线程 <whatsnew314-free-threaded-cpython>` "
"所需的工作有大量重叠，因此社区在该领域的持续努力将有助于加快对多个解释器的支持进程。"

#: ../../whatsnew/3.14.rst:242
msgid ""
"Also added in 3.14: :ref:`concurrent.futures.InterpreterPoolExecutor "
"<whatsnew314-concurrent-futures-interp-pool>`."
msgstr ""
"在 3.14 中还增加了：:ref:`concurrent.futures.InterpreterPoolExecutor "
"<whatsnew314-concurrent-futures-interp-pool>`。"

#: ../../whatsnew/3.14.rst:246
msgid ":pep:`734`."
msgstr ":pep:`734`."

#: ../../whatsnew/3.14.rst:252
msgid "PEP 750: Template strings"
msgstr "PEP 750：模板字符串"

#: ../../whatsnew/3.14.rst:254
msgid ""
"Template string literals (t-strings) are a generalization of f-strings, "
"using a ``t`` in place of the ``f`` prefix. Instead of evaluating to "
":class:`str`, t-strings evaluate to a new "
":class:`!string.templatelib.Template` type:"
msgstr ""
"模板字符串（t-字符串）是f-字符串的通用化，使用 ``t`` 代替 ``f`` 前缀。 与前者求值为 :class:`str` "
"不同，t-字符串将求值为新增的 :class:`!string.templatelib.Template` 类型:"

#: ../../whatsnew/3.14.rst:258
msgid ""
"from string.templatelib import Template\n"
"\n"
"name = \"World\"\n"
"template: Template = t\"Hello {name}\""
msgstr ""
"from string.templatelib import Template\n"
"\n"
"name = \"World\"\n"
"template: Template = t\"Hello {name}\""

#: ../../whatsnew/3.14.rst:265
msgid ""
"The template can then be combined with functions that operate on the "
"template's structure to produce a :class:`str` or a string-like result. For "
"example, sanitizing input:"
msgstr "随后 template 可以被用于操作该模板的结构以产生 :class:`str` 或字符串型结果的函数。 例如，对输入进行无害化："

#: ../../whatsnew/3.14.rst:269
msgid ""
"evil = \"<script>alert('evil')</script>\"\n"
"template = t\"<p>{evil}</p>\"\n"
"assert html(template) == \"<p>&lt;script&gt;alert('evil')&lt;/script&gt;</p>\""
msgstr ""
"evil = \"<script>alert('evil')</script>\"\n"
"template = t\"<p>{evil}</p>\"\n"
"assert html(template) == \"<p>&lt;script&gt;alert('evil')&lt;/script&gt;</p>\""

#: ../../whatsnew/3.14.rst:275
msgid "As another example, generating HTML attributes from data:"
msgstr "再比如，根据数据生成 HTML 属性："

#: ../../whatsnew/3.14.rst:277
msgid ""
"attributes = {\"src\": \"shrubbery.jpg\", \"alt\": \"looks nice\"}\n"
"template = t\"<img {attributes}>\"\n"
"assert html(template) == '<img src=\"shrubbery.jpg\" alt=\"looks nice\" />'"
msgstr ""
"attributes = {\"src\": \"shrubbery.jpg\", \"alt\": \"looks nice\"}\n"
"template = t\"<img {attributes}>\"\n"
"assert html(template) == '<img src=\"shrubbery.jpg\" alt=\"looks nice\" />'"

#: ../../whatsnew/3.14.rst:283
msgid ""
"Compared to using an f-string, the ``html`` function has access to template "
"attributes containing the original information: static strings, "
"interpolations, and values from the original scope. Unlike existing "
"templating approaches, t-strings build from the well-known f-string syntax "
"and rules. Template systems thus benefit from Python tooling as they are "
"much closer to the Python language, syntax, scoping, and more."
msgstr ""
"与使用 f-string 相比，``html`` "
"函数能够访问包含原始信息的模板属性：静态字符串、插值表达式，以及来自原始作用域的值。与现有的模板系统不同，t-string 是基于广为人知的 "
"f-string 语法和规则构建的。因此，模板系统能够更好地受益于 Python 的工具生态，因为它们在语言特性、语法结构、作用域规则等方面都更加贴近 "
"Python 本身。"

#: ../../whatsnew/3.14.rst:290
msgid "Writing template handlers is straightforward:"
msgstr "编写模板处理程序非常简单："

#: ../../whatsnew/3.14.rst:292
msgid ""
"from string.templatelib import Template, Interpolation\n"
"\n"
"def lower_upper(template: Template) -> str:\n"
"    \"\"\"Render static parts lowercased and interpolations uppercased.\"\"\"\n"
"    parts: list[str] = []\n"
"    for item in template:\n"
"        if isinstance(item, Interpolation):\n"
"            parts.append(str(item.value).upper())\n"
"        else:\n"
"            parts.append(item.lower())\n"
"    return \"\".join(parts)\n"
"\n"
"name = \"world\"\n"
"assert lower_upper(t\"HELLO {name}\") == \"hello WORLD\""
msgstr ""
"from string.templatelib import Template, Interpolation\n"
"\n"
"def lower_upper(template: Template) -> str:\n"
"    \"\"\"Render static parts lowercased and interpolations uppercased.\"\"\"\n"
"    parts: list[str] = []\n"
"    for item in template:\n"
"        if isinstance(item, Interpolation):\n"
"            parts.append(str(item.value).upper())\n"
"        else:\n"
"            parts.append(item.lower())\n"
"    return \"\".join(parts)\n"
"\n"
"name = \"world\"\n"
"assert lower_upper(t\"HELLO {name}\") == \"hello WORLD\""

#: ../../whatsnew/3.14.rst:309
msgid ""
"With this in place, developers can write template systems to sanitize SQL, "
"make safe shell operations, improve logging, tackle modern ideas in web "
"development (HTML, CSS, and so on), and implement lightweight, custom "
"business DSLs."
msgstr ""
"使用此特性，开发者可以编写模板系统来对 SQL 做无害化处理，执行安全的 shell 操作，改进日志记录，处理 Web "
"开发中的现代概念（HTML、CSS 等等），以及实现轻量的、定制的业务 DSL。"

#: ../../whatsnew/3.14.rst:313
msgid ""
"(Contributed by Jim Baker, Guido van Rossum, Paul Everitt, Koudai Aono, "
"Lysandros Nikolaou, Dave Peck, Adam Turner, Jelle Zijlstra, Bénédikt Tran, "
"and Pablo Galindo Salgado in :gh:`132661`.)"
msgstr ""
"（由 Jim Baker、Guido van Rossum、Paul Everitt、Koudai Aono、Lysandros "
"Nikolaou、Dave Peck、Adam Turner、Jelle Zijlstra、Bénédikt Tran 和 Pablo Galindo "
"Salgado 在 :gh:`132661` 中贡献。）"

#: ../../whatsnew/3.14.rst:318
msgid ":pep:`750`."
msgstr ":pep:`750`。"

#: ../../whatsnew/3.14.rst:324
msgid "PEP 768: Safe external debugger interface for CPython"
msgstr "PEP 768：Cpython 的安全外部调试器接口"

#: ../../whatsnew/3.14.rst:326
msgid ""
":pep:`768` introduces a zero-overhead debugging interface that allows "
"debuggers and profilers to safely attach to running Python processes. This "
"is a significant enhancement to Python's debugging capabilities allowing "
"debuggers to forego unsafe alternatives. See :ref:`below "
"<whatsnew314-remote-pdb>` for how this feature is leveraged to implement the"
" new :mod:`pdb` module's remote attaching capabilities."
msgstr ""
":pep:`768` 引入了一个零开销的调试接口，允许调试器和性能分析工具安全地附加到正在运行的 Python 进程上。这是对 Python "
"调试能力的重要增强，使调试器可以避免使用不安全的替代方案。有关该特性如何用于实现新版 :mod:`pdb` 模块的远程附加功能，请参见 :ref:`下面"
" <whatsnew314-remote-pdb>`。"

#: ../../whatsnew/3.14.rst:332
msgid ""
"The new interface provides safe execution points for attaching debugger code"
" without modifying the interpreter's normal execution path or adding runtime"
" overhead. This enables tools to inspect and interact with Python "
"applications in real-time without stopping or restarting them — a crucial "
"capability for high-availability systems and production environments."
msgstr ""
"新的接口在不修改解释器正常执行路径或增加运行时开销的前提下，提供了安全的调试代码附加点。这使得工具能够在不停止或重启 Python "
"应用程序的情况下，实时地对其进行检查和交互——这对于高可用性系统和生产环境至关重要。"

#: ../../whatsnew/3.14.rst:337
msgid ""
"For convenience, CPython implements this interface through the :mod:`sys` "
"module with a :func:`sys.remote_exec` function::"
msgstr "为方便起见，CPython 通过 :mod:`sys` 模块中的 :func:`sys.remote_exec` 函数实现该接口::"

#: ../../whatsnew/3.14.rst:340
msgid "sys.remote_exec(pid, script_path)"
msgstr "sys.remote_exec(pid, script_path)"

#: ../../whatsnew/3.14.rst:342
msgid ""
"This function allows sending Python code to be executed in a target process "
"at the next safe execution point. However, tool authors can also implement "
"the protocol directly as described in the PEP, which details the underlying "
"mechanisms used to safely attach to running processes."
msgstr ""
"此函数允许发送 Python 代码以便在目标进程中的下一个安全执行点上执行。 不过，工具作者也可以直接实现在 PEP "
"中描述的协议，它详细讲解了用于安全附加到运行进程的底层机制。"

#: ../../whatsnew/3.14.rst:346
msgid ""
"Here's a simple example that inspects object types in a running Python "
"process:"
msgstr "以下是一个检查运行中 Python 进程内对象类型的简单示例："

#: ../../whatsnew/3.14.rst:348
msgid ""
"import os\n"
"import sys\n"
"import tempfile\n"
"\n"
"# Create a temporary script\n"
"with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:\n"
"    script_path = f.name\n"
"    f.write(f\"import my_debugger; my_debugger.connect({os.getpid()})\")\n"
"try:\n"
"    # Execute in process with PID 1234\n"
"    print(\"Behold! An offering:\")\n"
"    sys.remote_exec(1234, script_path)\n"
"finally:\n"
"    os.unlink(script_path)"
msgstr ""
"import os\n"
"import sys\n"
"import tempfile\n"
"\n"
"# 创建一个临时脚本\n"
"with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:\n"
"    script_path = f.name\n"
"    f.write(f\"import my_debugger; my_debugger.connect({os.getpid()})\")\n"
"try:\n"
"    # 在进程 PID 1234 中执行：\n"
"    print(\"Behold! An offering:\")\n"
"    sys.remote_exec(1234, script_path)\n"
"finally:\n"
"    os.unlink(script_path)"

#: ../../whatsnew/3.14.rst:365
msgid ""
"The debugging interface has been carefully designed with security in mind "
"and includes several mechanisms to control access:"
msgstr "该调试接口在设计时已充分考虑安全性，并包含多种访问控制机制："

#: ../../whatsnew/3.14.rst:368
msgid "A :envvar:`PYTHON_DISABLE_REMOTE_DEBUG` environment variable."
msgstr ":envvar:`PYTHON_DISABLE_REMOTE_DEBUG` 环境变量。"

#: ../../whatsnew/3.14.rst:369
msgid "A :option:`-X disable-remote-debug` command-line option."
msgstr ":option:`-X disable-remote-debug` 命令行选项。"

#: ../../whatsnew/3.14.rst:370
msgid ""
"A :option:`--without-remote-debug` configure flag to completely disable the "
"feature at build time."
msgstr ":option:`--without-remote-debug` 配置标志，用于在构建时完全禁用此功能。"

#: ../../whatsnew/3.14.rst:372
msgid ""
"A key implementation detail is that the interface piggybacks on the "
"interpreter's existing evaluation loop and safe points, ensuring zero "
"overhead during normal execution while providing a reliable way for external"
" processes to coordinate debugging operations."
msgstr "关键实现细节在于：该接口复用了解释器现有的求值循环和安全点机制，既确保正常执行时零开销，又为外部进程提供了可靠的调试操作协调方式。"

#: ../../whatsnew/3.14.rst:376
msgid ""
"(Contributed by Pablo Galindo Salgado, Matt Wozniski, and Ivona Stojanovic "
"in :gh:`131591`.)"
msgstr ""
"（由 Pablo Galindo Salgado，Matt Wozniski 和 Ivona Stojanovic 在 :gh:`131591` "
"中贡献）"

#: ../../whatsnew/3.14.rst:379 ../../whatsnew/3.14.rst:453
msgid ":pep:`768`."
msgstr ":pep:`768`。"

#: ../../whatsnew/3.14.rst:385
msgid "PEP 784: Adding Zstandard to the standard library"
msgstr "PEP 784: 添加 Zstandard 到标准库"

#: ../../whatsnew/3.14.rst:387
msgid ""
"The new ``compression`` package contains modules :mod:`!compression.lzma`, "
":mod:`!compression.bz2`, :mod:`!compression.gzip` and "
":mod:`!compression.zlib` which re-export the :mod:`lzma`, :mod:`bz2`, "
":mod:`gzip` and :mod:`zlib` modules respectively. The new import names under"
" ``compression`` are the canonical names for importing these compression "
"modules going forward. However, the existing modules names have not been "
"deprecated. Any deprecation or removal of the existing compression modules "
"will occur no sooner than five years after the release of 3.14."
msgstr ""
"新推出的 ``compression`` "
"包包含以下模块：:mod:`!compression.lzma`、:mod:`!compression.bz2`、:mod:`!compression.gzip`"
" 和 :mod:`!compression.zlib`，它们分别重新导出了 :mod:`lzma`、:mod:`bz2`、:mod:`gzip` 和 "
":mod:`zlib` 模块。今后，``compression`` "
"下的新导入名称将成为这些压缩模块的标准导入方式。不过，现有的模块名称尚未被弃用。任何对现有压缩模块的弃用或移除都不会早于 3.14 版本发布后的五年。"

#: ../../whatsnew/3.14.rst:396
msgid ""
"The new :mod:`!compression.zstd` module provides compression and "
"decompression APIs for the Zstandard format via bindings to `Meta's zstd "
"library <https://facebook.github.io/zstd/>`__. Zstandard is a widely "
"adopted, highly efficient, and fast compression format. In addition to the "
"APIs introduced in :mod:`!compression.zstd`, support for reading and writing"
" Zstandard compressed archives has been added to the :mod:`tarfile`, "
":mod:`zipfile`, and :mod:`shutil` modules."
msgstr ""
"新引入的 :mod:`!compression.zstd` 模块通过绑定 `Meta的zstd库 "
"<https://facebook.github.io/zstd/>`__ "
"提供了Zstandard格式的压缩和解压API。Zstandard是一种被广泛采用、高效且快速的压缩格式。除了 "
":mod:`!compression.zstd` 中引入的API外，对Zstandard压缩归档文件的读写支持也已添加到 "
":mod:`tarfile`、:mod:`zipfile` 和 :mod:`shutil` 模块中。"

#: ../../whatsnew/3.14.rst:404
msgid "Here's an example of using the new module to compress some data:"
msgstr "下面是一个使用新模块压缩数据的示例："

#: ../../whatsnew/3.14.rst:406
msgid ""
"from compression import zstd\n"
"import math\n"
"\n"
"data = str(math.pi).encode() * 20\n"
"\n"
"compressed = zstd.compress(data)\n"
"\n"
"ratio = len(compressed) / len(data)\n"
"print(f\"Achieved compression ratio of {ratio}\")"
msgstr ""
"from compression import zstd\n"
"import math\n"
"\n"
"data = str(math.pi).encode() * 20\n"
"\n"
"compressed = zstd.compress(data)\n"
"\n"
"ratio = len(compressed) / len(data)\n"
"print(f\"达到的压缩比为 {ratio}\")"

#: ../../whatsnew/3.14.rst:418
msgid ""
"As can be seen, the API is similar to the APIs of the :mod:`!lzma` and "
":mod:`!bz2` modules."
msgstr "可以看出，该API与 :mod:`!lzma` 和 :mod:`!bz2` 模块的API类似。"

#: ../../whatsnew/3.14.rst:421
msgid ""
"(Contributed by Emma Harper Smith, Adam Turner, Gregory P. Smith, Tomas "
"Roun, Victor Stinner, and Rogdham in :gh:`132983`.)"
msgstr ""
"（由 Emma Harper Smith、Adam Turner、Gregory P. Smith、Tomas Roun、Victor Stinner "
"和 Rogdham 在 :gh:`132983` 中贡献。）"

#: ../../whatsnew/3.14.rst:425
msgid ":pep:`784`."
msgstr ":pep:`784`。"

#: ../../whatsnew/3.14.rst:431
msgid "Remote attaching to a running Python process with PDB"
msgstr "使用PDB远程附加到正在运行的Python进程"

#: ../../whatsnew/3.14.rst:433
msgid ""
"The :mod:`pdb` module now supports remote attaching to a running Python "
"process using a new ``-p PID`` command-line option:"
msgstr ":mod:`pdb`模块现在支持通过新的 ``-p PID`` 命令行选项远程附加到正在运行的Python进程："

#: ../../whatsnew/3.14.rst:436
msgid "python -m pdb -p 1234"
msgstr "python -m pdb -p 1234"

#: ../../whatsnew/3.14.rst:440
msgid ""
"This will connect to the Python process with the given PID and allow you to "
"debug it interactively. Notice that due to how the Python interpreter works "
"attaching to a remote process that is blocked in a system call or waiting "
"for I/O will only work once the next bytecode instruction is executed or "
"when the process receives a signal."
msgstr ""
"该操作将连接到指定PID的Python进程，并允许您进行交互式调试。请注意，由于Python解释器的工作原理，当附加到阻塞在系统调用或等待I/O的远程进程时，调试功能只有在执行下一条字节码指令或进程收到信号时才会生效。"

#: ../../whatsnew/3.14.rst:446
msgid ""
"This feature uses :pep:`768` and the :func:`sys.remote_exec` function to "
"attach to the remote process and send the PDB commands to it."
msgstr "该功能使用 :pep:`768` 和 :func:`sys.remote_exec` 函数来附加到远程进程，并向其发送PDB命令。"

#: ../../whatsnew/3.14.rst:450
msgid "(Contributed by Matt Wozniski and Pablo Galindo in :gh:`131591`.)"
msgstr "（由 Matt Wozniski 和 Pablo Galindo 在 :gh:`131591` 中贡献。）"

#: ../../whatsnew/3.14.rst:459
msgid "PEP 758 – Allow except and except* expressions without parentheses"
msgstr "PEP 758 – 允许不带括号的 except 和 except* 表达式"

#: ../../whatsnew/3.14.rst:461
msgid ""
"The :keyword:`except` and :keyword:`except* <except_star>` expressions now "
"allow parentheses to be omitted when there are multiple exception types and "
"the ``as`` clause is not used. For example the following expressions are now"
" valid:"
msgstr ""
":keyword:`except` 和 :keyword:`except* <except_star>` 表达式现在允许在存在多个异常类型且未使用 "
"``as`` 子句时省略括号。例如，以下表达式现在有效："

#: ../../whatsnew/3.14.rst:465
msgid ""
"try:\n"
"    connect_to_server()\n"
"except TimeoutError, ConnectionRefusedError:\n"
"    print(\"Network issue encountered.\")\n"
"\n"
" # The same applies to except* (for exception groups):\n"
"\n"
"try:\n"
"    connect_to_server()\n"
"except* TimeoutError, ConnectionRefusedError:\n"
"    print(\"Network issue encountered.\")"
msgstr ""
"try:\n"
"    connect_to_server()\n"
"except TimeoutError, ConnectionRefusedError:\n"
"    print(\"遇到网络问题。\")\n"
"\n"
" # 同样适用于 except* （针对异常组）：\n"
"\n"
"try:\n"
"    connect_to_server()\n"
"except* TimeoutError, ConnectionRefusedError:\n"
"    print(\"遇到网络问题。\")"

#: ../../whatsnew/3.14.rst:479
msgid "Check :pep:`758` for more details."
msgstr "请参阅 :pep:`758` 获取更多细节。"

#: ../../whatsnew/3.14.rst:481
msgid "(Contributed by Pablo Galindo and Brett Cannon in :gh:`131831`.)"
msgstr "（由 Pablo Galindo 和 Brett Cannon 在 :gh:`131831` 中贡献。）"

#: ../../whatsnew/3.14.rst:484
msgid ":pep:`758`."
msgstr ":pep:`758`。"

#: ../../whatsnew/3.14.rst:490
msgid "PEP 649 and 749: deferred evaluation of annotations"
msgstr "PEP 649 和 749：注解的延迟求值"

#: ../../whatsnew/3.14.rst:492
msgid ""
"The :term:`annotations <annotation>` on functions, classes, and modules are "
"no longer evaluated eagerly. Instead, annotations are stored in special-"
"purpose :term:`annotate functions <annotate function>` and evaluated only "
"when necessary (except if ``from __future__ import annotations`` is used). "
"This is specified in :pep:`649` and :pep:`749`."
msgstr ""
"在函数、类和模块上的 :term:`注解 <annotation>` 不再被立即求值。相反，注解会被存储在专用的 :term:`注解函数 "
"<annotate function>` 中，仅在必要时进行求值（除非使用了 ``from __future__ import "
"annotations``）。这一特性在 :pep:`649` 和 :pep:`749` 中进行了规范。"

#: ../../whatsnew/3.14.rst:498
msgid ""
"This change is designed to make annotations in Python more performant and "
"more usable in most circumstances. The runtime cost for defining annotations"
" is minimized, but it remains possible to introspect annotations at runtime."
" It is no longer necessary to enclose annotations in strings if they contain"
" forward references."
msgstr ""
"这一改进旨在使 Python "
"中的注解在大多数情况下性能更高、更易用。定义注解的运行时开销被降至最低，同时仍可在运行时内省注解。如果注解包含前向引用，也不再需要将其包裹在字符串中。"

#: ../../whatsnew/3.14.rst:504
msgid ""
"The new :mod:`annotationlib` module provides tools for inspecting deferred "
"annotations. Annotations may be evaluated in the "
":attr:`~annotationlib.Format.VALUE` format (which evaluates annotations to "
"runtime values, similar to the behavior in earlier Python versions), the "
":attr:`~annotationlib.Format.FORWARDREF` format (which replaces undefined "
"names with special markers), and the :attr:`~annotationlib.Format.STRING` "
"format (which returns annotations as strings)."
msgstr ""
"新引入的 :mod:`annotationlib` "
"模块提供了检查延迟注解的工具。注解可以通过以下格式进行求值：:attr:`~annotationlib.Format.VALUE` "
"格式（将注解求值为运行时值，类似于早期Python版本的行为）、:attr:`~annotationlib.Format.FORWARDREF` "
"格式（用特殊标记替换未定义名称）、:attr:`~annotationlib.Format.STRING` 格式（以字符串形式返回注解）。"

#: ../../whatsnew/3.14.rst:511
msgid "This example shows how these formats behave:"
msgstr "以下示例展示了这些格式的具体行为："

#: ../../whatsnew/3.14.rst:513
msgid ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Undefined):\n"
"...     pass\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NameError: name 'Undefined' is not defined\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Undefined', owner=<function func at 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Undefined'}"
msgstr ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Undefined):\n"
"...     pass\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NameError: name 'Undefined' is not defined\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Undefined', owner=<function func at 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Undefined'}"

#: ../../whatsnew/3.14.rst:528
msgid "Implications for annotated code"
msgstr "注解代码的影响"

#: ../../whatsnew/3.14.rst:530
msgid ""
"If you define annotations in your code (for example, for use with a static "
"type checker), then this change probably does not affect you: you can keep "
"writing annotations the same way you did with previous versions of Python."
msgstr "如果在代码中定义注解（例如用于静态类型检查器），那么这一变更可能不会产生影响：你可以继续保持与之前Python版本相同的注解书写方式。"

#: ../../whatsnew/3.14.rst:534
msgid ""
"You will likely be able to remove quoted strings in annotations, which are "
"frequently used for forward references. Similarly, if you use ``from "
"__future__ import annotations`` to avoid having to write strings in "
"annotations, you may well be able to remove that import once you support "
"only Python 3.14 and newer. However, if you rely on third-party libraries "
"that read annotations, those libraries may need changes to support unquoted "
"annotations before they work as expected."
msgstr ""
"你很可能可以移除注解中的引号字符串（这些通常用于前向引用）。同样地，如果使用 ``from __future__ import "
"annotations`` 来避免在注解中书写字符串，当你仅支持 Python 3.14 "
"及更新版本时，很可能可以移除该导入。不过，如果依赖读取注解的第三方库，这些库可能需要相应修改以支持无引号注解，才能正常工作。"

#: ../../whatsnew/3.14.rst:543
msgid "Implications for readers of ``__annotations__``"
msgstr "访问 ``__annotations__`` 的影响"

#: ../../whatsnew/3.14.rst:545
msgid ""
"If your code reads the ``__annotations__`` attribute on objects, you may "
"want to make changes in order to support code that relies on deferred "
"evaluation of annotations. For example, you may want to use "
":func:`annotationlib.get_annotations` with the "
":attr:`~annotationlib.Format.FORWARDREF` format, as the :mod:`dataclasses` "
"module now does."
msgstr ""
"如果代码会读取对象的 ``__annotations__`` 属性，你可能需要进行调整以支持依赖注解延迟求值的代码。例如，可以像 "
":mod:`dataclasses` 模块现在所做的那样，使用 :func:`annotationlib.get_annotations` 函数并指定 "
":attr:`~annotationlib.Format.FORWARDREF` 格式。"

#: ../../whatsnew/3.14.rst:551
msgid ""
"The external :pypi:`typing_extensions` package provides partial backports of"
" some of the functionality of the :mod:`annotationlib` module, such as the "
":class:`~annotationlib.Format` enum and the "
":func:`~annotationlib.get_annotations` function. These can be used to write "
"cross-version code that takes advantage of the new behavior in Python 3.14."
msgstr ""
"外部包 :pypi:`typing_extensions` 提供了 :mod:`annotationlib` 模块部分功能的向后兼容实现，包括 "
":class:`~annotationlib.Format` 枚举和 :func:`~annotationlib.get_annotations` "
"函数。这些可用于编写跨版本代码，以利用 Python 3.14 中的新行为。"

#: ../../whatsnew/3.14.rst:557
msgid "Related changes"
msgstr "相关变更"

#: ../../whatsnew/3.14.rst:559
msgid ""
"The changes in Python 3.14 are designed to rework how ``__annotations__`` "
"works at runtime while minimizing breakage to code that contains annotations"
" in source code and to code that reads ``__annotations__``. However, if you "
"rely on undocumented details of the annotation behavior or on private "
"functions in the standard library, there are many ways in which your code "
"may not work in Python 3.14. To safeguard your code against future changes, "
"use only the documented functionality of the :mod:`annotationlib` module."
msgstr ""
"Python 3.14 的变更旨在重构 ``__annotations__`` 的运行时行为，同时最小化对以下两类代码的影响：(1) "
"源代码中包含注解的代码 (2) 读取 ``__annotations__`` "
"的代码。不过，如果依赖注解行为的未文档化细节或标准库中的私有函数，你的代码可能在 Python 3.14 "
"中存在多种兼容性问题。为确保代码的未来兼容性，请仅使用 :mod:`annotationlib` 模块中已文档化的功能。"

#: ../../whatsnew/3.14.rst:567
msgid ""
"In particular, do not read annotations directly from the namespace "
"dictionary attribute of type objects. Use "
":func:`annotationlib.get_annotate_from_class_namespace` during class "
"construction and :func:`annotationlib.get_annotations` afterwards."
msgstr ""
"特别需要注意的是，不要直接从类型对象的命名空间字典属性中读取注解。在类构造期间应使用 "
":func:`annotationlib.get_annotate_from_class_namespace` 函数，之后则使用 "
":func:`annotationlib.get_annotations` 函数。"

#: ../../whatsnew/3.14.rst:571
msgid ""
"In previous releases, it was sometimes possible to access class annotations "
"from an instance of an annotated class. This behavior was undocumented and "
"accidental, and will no longer work in Python 3.14."
msgstr "在之前的版本中，有时可以通过带注解类的实例访问类注解。这种行为属于未文档化的意外实现，在 Python 3.14 中将不再有效。"

#: ../../whatsnew/3.14.rst:576
msgid "``from __future__ import annotations``"
msgstr "``from __future__ import annotations``"

#: ../../whatsnew/3.14.rst:578
msgid ""
"In Python 3.7, :pep:`563` introduced the ``from __future__ import "
"annotations`` directive, which turns all annotations into strings. This "
"directive is now considered deprecated and it is expected to be removed in a"
" future version of Python. However, this removal will not happen until after"
" Python 3.13, the last version of Python without deferred evaluation of "
"annotations, reaches its end of life in 2029. In Python 3.14, the behavior "
"of code using ``from __future__ import annotations`` is unchanged."
msgstr ""
"在 Python 3.7 中，:pep:`563` 引入了 ``from __future__ import annotations`` "
"指令，该指令会将所有注解转换为字符串。此指令现已被视为弃用，预计将在未来的 Python 版本中移除。不过，在 Python "
"3.13（最后一个不支持注解延迟求值的 Python 版本）于 2029 年结束生命周期之前，这一移除操作不会实施。在 Python 3.14 中，使用"
" ``from __future__ import annotations`` 的代码行为保持不变。"

#: ../../whatsnew/3.14.rst:586
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`119180`; :pep:`649` was written by "
"Larry Hastings.)"
msgstr "（由 Jelle Zijlstra 在 :gh:`119180` 中贡献；:pep:`649` 由 Larry Hastings 编写。）"

#: ../../whatsnew/3.14.rst:589
msgid ":pep:`649` and :pep:`749`."
msgstr ":pep:`649` 和 :pep:`749`。"

#: ../../whatsnew/3.14.rst:593
msgid "Improved error messages"
msgstr "改进的错误消息"

#: ../../whatsnew/3.14.rst:595
msgid ""
"The interpreter now provides helpful suggestions when it detects typos in "
"Python keywords. When a word that closely resembles a Python keyword is "
"encountered, the interpreter will suggest the correct keyword in the error "
"message. This feature helps programmers quickly identify and fix common "
"typing mistakes. For example:"
msgstr ""
"解释器现在能在检测到Python关键字拼写错误时提供有用的建议。当遇到与Python关键字高度相似的单词时，解释器将在错误信息中建议正确的关键字。该功能可帮助程序员快速识别和修复常见的输入错误。例如："

#: ../../whatsnew/3.14.rst:601
msgid ""
">>> whille True:\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    whille True:\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'while'?\n"
"\n"
">>> asynch def fetch_data():\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    asynch def fetch_data():\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'async'?\n"
"\n"
">>> async def foo():\n"
"...     awaid fetch_data()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2\n"
"    awaid fetch_data()\n"
"    ^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'await'?\n"
"\n"
">>> raisee ValueError(\"Error\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    raisee ValueError(\"Error\")\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'raise'?"
msgstr ""
">>> whille True:\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    whille True:\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'while'?\n"
"\n"
">>> asynch def fetch_data():\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    asynch def fetch_data():\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'async'?\n"
"\n"
">>> async def foo():\n"
"...     awaid fetch_data()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2\n"
"    awaid fetch_data()\n"
"    ^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'await'?\n"
"\n"
">>> raisee ValueError(\"Error\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    raisee ValueError(\"Error\")\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'raise'?"

#: ../../whatsnew/3.14.rst:634
msgid ""
"While the feature focuses on the most common cases, some variations of "
"misspellings may still result in regular syntax errors. (Contributed by "
"Pablo Galindo in :gh:`132449`.)"
msgstr ""
"虽然该功能主要针对最常见的拼写错误情况，但某些变体的拼写错误仍可能导致常规语法错误。（由 Pablo Galindo 在 :gh:`132449` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:638
msgid ""
"When an unpacking assignment fails due to an incorrect number of variables, "
"the error message prints the received number of values in more cases than "
"before. (Contributed by Tushar Sadhwani in :gh:`122239`.)"
msgstr ""
"当一个解包赋值因变量数量不匹配而失败时，错误消息现在会在更多情况下显示实际接收到的数值数量。（由 Tushar Sadhwani 在 "
":gh:`122239` 中贡献。）"

#: ../../whatsnew/3.14.rst:642
msgid ""
">>> x, y, z = 1, 2, 3, 4\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    x, y, z = 1, 2, 3, 4\n"
"    ^^^^^^^\n"
"ValueError: too many values to unpack (expected 3, got 4)"
msgstr ""
">>> x, y, z = 1, 2, 3, 4\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    x, y, z = 1, 2, 3, 4\n"
"    ^^^^^^^\n"
"ValueError: too many values to unpack (expected 3, got 4)"

#: ../../whatsnew/3.14.rst:651
msgid ""
":keyword:`elif` statements that follow an :keyword:`else` block now have a "
"specific error message. (Contributed by Steele Farnsworth in :gh:`129902`.)"
msgstr ""
"跟在 :keyword:`else` 块后的 :keyword:`elif` 语句现在会触发特定的错误提示。（由 Steele Farnsworth 在"
" :gh:`129902` 中贡献。）"

#: ../../whatsnew/3.14.rst:654
msgid ""
">>> if who == \"me\":\n"
"...     print(\"It's me!\")\n"
"... else:\n"
"...     print(\"It's not me!\")\n"
"... elif who is None:\n"
"...     print(\"Who is it?\")\n"
"File \"<stdin>\", line 5\n"
"  elif who is None:\n"
"  ^^^^\n"
"SyntaxError: 'elif' block follows an 'else' block"
msgstr ""
">>> if who == \"me\":\n"
"...     print(\"It's me!\")\n"
"... else:\n"
"...     print(\"It's not me!\")\n"
"... elif who is None:\n"
"...     print(\"Who is it?\")\n"
"File \"<stdin>\", line 5\n"
"  elif who is None:\n"
"  ^^^^\n"
"SyntaxError: 'elif' block follows an 'else' block"

#: ../../whatsnew/3.14.rst:667
msgid ""
"If a statement (:keyword:`pass`, :keyword:`del`, :keyword:`return`, "
":keyword:`yield`, :keyword:`raise`, :keyword:`break`, :keyword:`continue`, "
":keyword:`assert`, :keyword:`import`, :keyword:`from`) is passed to the "
":ref:`if_expr` after :keyword:`else`, or one of :keyword:`pass`, "
":keyword:`break`, or :keyword:`continue` is passed before :keyword:`if`, "
"then the error message highlights where the :token:`~python-"
"grammar:expression` is required. (Contributed by Sergey Miryanov in "
":gh:`129515`.)"
msgstr ""
"当以下语句（:keyword:`pass`、:keyword:`del`、:keyword:`return`、:keyword:`yield`、:keyword:`raise`、:keyword:`break`、:keyword:`continue`、:keyword:`assert`、:keyword:`import`、:keyword:`from`）被传递到"
" :keyword:`else` 后的 :ref:`if_expr`，或者 "
":keyword:`pass`、:keyword:`break`、:keyword:`continue` 之一被传递到 :keyword:`if` "
"之前时，错误消息会明确标出需要 :token:`~python-grammar:expression` 的位置。（由 Sergey Miryanov 在"
" :gh:`129515` 中贡献。）"

#: ../../whatsnew/3.14.rst:675
msgid ""
">>> x = 1 if True else pass\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = 1 if True else pass\n"
"                       ^^^^\n"
"SyntaxError: expected expression after 'else', but statement is given\n"
"\n"
">>> x = continue if True else break\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = continue if True else break\n"
"        ^^^^^^^^\n"
"SyntaxError: expected expression before 'if', but statement is given"
msgstr ""
">>> x = 1 if True else pass\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = 1 if True else pass\n"
"                       ^^^^\n"
"SyntaxError: expected expression after 'else', but statement is given\n"
"\n"
">>> x = continue if True else break\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = continue if True else break\n"
"        ^^^^^^^^\n"
"SyntaxError: expected expression before 'if', but statement is given"

#: ../../whatsnew/3.14.rst:692
msgid ""
"When incorrectly closed strings are detected, the error message suggests "
"that the string may be intended to be part of the string. (Contributed by "
"Pablo Galindo in :gh:`88535`.)"
msgstr ""
"当检测到未正确闭合的字符串时，错误消息会提示该字符串可能是字符串的一部分。（由 Pablo Galindo 在 :gh:`88535` 中贡献。）"

#: ../../whatsnew/3.14.rst:696
msgid ""
">>> \"The interesting object \"The important object\" is very important\"\n"
"Traceback (most recent call last):\n"
"SyntaxError: invalid syntax. Is this intended to be part of the string?"
msgstr ""
">>> \"The interesting object \"The important object\" is very important\"\n"
"Traceback (most recent call last):\n"
"SyntaxError: invalid syntax. Is this intended to be part of the string?"

#: ../../whatsnew/3.14.rst:702
msgid ""
"When strings have incompatible prefixes, the error now shows which prefixes "
"are incompatible. (Contributed by Nikita Sobolev in :gh:`133197`.)"
msgstr "当字符串前缀不兼容时，错误提示现在会明确显示哪些前缀存在冲突。（由 Nikita Sobolev 在 :gh:`133197` 中贡献。）"

#: ../../whatsnew/3.14.rst:706
msgid ""
">>> ub'abc'\n"
"  File \"<python-input-0>\", line 1\n"
"    ub'abc'\n"
"    ^^\n"
"SyntaxError: 'u' and 'b' prefixes are incompatible"
msgstr ""
">>> ub'abc'\n"
"  File \"<python-input-0>\", line 1\n"
"    ub'abc'\n"
"    ^^\n"
"SyntaxError: 'u' and 'b' prefixes are incompatible"

#: ../../whatsnew/3.14.rst:714
msgid ""
"Improved error messages when using ``as`` with incompatible targets in:"
msgstr "在以下场景中使用不兼容目标的 as 语句时，错误提示已得到改进："

#: ../../whatsnew/3.14.rst:716
msgid "Imports: ``import ... as ...``"
msgstr "导入：``import ... as ...``"

#: ../../whatsnew/3.14.rst:717
msgid "From imports: ``from ... import ... as ...``"
msgstr "From 导入：``from ... import ... as ...``"

#: ../../whatsnew/3.14.rst:718
msgid "Except handlers: ``except ... as ...``"
msgstr "Except 处理器：``except ... as ...``"

#: ../../whatsnew/3.14.rst:719
msgid "Pattern-match cases: ``case ... as ...``"
msgstr "模式匹配 case 语句：``case ... as ...``"

#: ../../whatsnew/3.14.rst:721
msgid ""
"(Contributed by Nikita Sobolev in :gh:`123539`, :gh:`123562`, and "
":gh:`123440`.)"
msgstr "（由 Nikita Sobolev 在 :gh:`123539`、:gh:`123562` 和 :gh:`123440` 中贡献。）"

#: ../../whatsnew/3.14.rst:724
msgid ""
">>> import ast as arr[0]\n"
"  File \"<python-input-1>\", line 1\n"
"    import ast as arr[0]\n"
"                  ^^^^^^\n"
"SyntaxError: cannot use subscript as import target"
msgstr ""
">>> import ast as arr[0]\n"
"  File \"<python-input-1>\", line 1\n"
"    import ast as arr[0]\n"
"                  ^^^^^^\n"
"SyntaxError: cannot use subscript as import target"

#: ../../whatsnew/3.14.rst:732
msgid ""
"Improved error message when trying to add an instance of an unhashable type "
"to a :class:`dict` or :class:`set`. (Contributed by CF Bolz-Tereick and "
"Victor Stinner in :gh:`132828`.)"
msgstr ""
"尝试向 :class:`dict` 或 :class:`set` 添加不可哈希类型的实例时，错误提示信息已改进。（由 CF Bolz-Tereick 和"
" Victor Stinner 在 :gh:`132828` 中贡献。）"

#: ../../whatsnew/3.14.rst:736
msgid ""
">>> s = set()\n"
">>> s.add({'pages': 12, 'grade': 'A'})\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 1, in <module>\n"
"    s.add({'pages': 12, 'grade': 'A'})\n"
"    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"TypeError: cannot use 'dict' as a set element (unhashable type: 'dict')\n"
">>> d = {}\n"
">>> l = [1, 2, 3]\n"
">>> d[l] = 12\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-4>\", line 1, in <module>\n"
"    d[l] = 12\n"
"    ~^^^\n"
"TypeError: cannot use 'list' as a dict key (unhashable type: 'list')"
msgstr ""
">>> s = set()\n"
">>> s.add({'pages': 12, 'grade': 'A'})\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 1, in <module>\n"
"    s.add({'pages': 12, 'grade': 'A'})\n"
"    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"TypeError: cannot use 'dict' as a set element (unhashable type: 'dict')\n"
">>> d = {}\n"
">>> l = [1, 2, 3]\n"
">>> d[l] = 12\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-4>\", line 1, in <module>\n"
"    d[l] = 12\n"
"    ~^^^\n"
"TypeError: cannot use 'list' as a dict key (unhashable type: 'list')"

#: ../../whatsnew/3.14.rst:758
msgid "PEP 741: Python configuration C API"
msgstr ":pep:`741`：Python 配置 C API"

#: ../../whatsnew/3.14.rst:760
msgid ""
"Add a :ref:`PyInitConfig C API <pyinitconfig_api>` to configure the Python "
"initialization without relying on C structures and the ability to make ABI-"
"compatible changes in the future."
msgstr ""
"新增 :ref:`PyInitConfig C API <pyinitconfig_api>` 用于配置 Python 初始化过程，无需依赖 C "
"结构体，同时支持未来进行 ABI 兼容性变更。"

#: ../../whatsnew/3.14.rst:764
msgid ""
"Complete the :pep:`587` :ref:`PyConfig C API <pyconfig_api>` by adding "
":c:func:`PyInitConfig_AddModule` which can be used to add a built-in "
"extension module; a feature previously referred to as the “inittab”."
msgstr ""
"通过添加 :c:func:`PyInitConfig_AddModule` 函数来完成 :pep:`587` 规范中定义的 :ref:`PyConfig"
" C API <pyconfig_api>`，该函数可用于添加内置扩展模块；该特性此前被称为“inittab”。"

#: ../../whatsnew/3.14.rst:768
msgid ""
"Add :c:func:`PyConfig_Get` and :c:func:`PyConfig_Set` functions to get and "
"set the current runtime configuration."
msgstr "新增 :c:func:`PyConfig_Get` 和 :c:func:`PyConfig_Set` 函数，用于获取和设置当前运行时配置。"

#: ../../whatsnew/3.14.rst:771
msgid ""
"PEP 587 “Python Initialization Configuration” unified all the ways to "
"configure the Python initialization. This PEP unifies also the configuration"
" of the Python preinitialization and the Python initialization in a single "
"API. Moreover, this PEP only provides a single choice to embed Python, "
"instead of having two “Python” and “Isolated” choices (PEP 587), to simplify"
" the API further."
msgstr ""
"PEP 587《Python 初始化配置》统一了所有配置 Python 初始化的方式。该PEP进一步将 Python "
"预初始化配置与初始化配置整合至单一API中。此外，为进一步简化API设计，本PEP仅提供\"嵌入式Python\"这一种选择，而非PEP "
"587中的\"Python\"和\"隔离模式\"双选项方案。"

#: ../../whatsnew/3.14.rst:778
msgid ""
"The lower level PEP 587 PyConfig API remains available for use cases with an"
" intentionally higher level of coupling to CPython implementation details "
"(such as emulating the full functionality of CPython’s CLI, including its "
"configuration mechanisms)."
msgstr ""
"较低层级的 PEP 587 PyConfig API 仍保留可用，适用于需要与 CPython 实现细节保持较高耦合度的使用场景（例如模拟 "
"CPython CLI 的完整功能，包括其配置机制）。"

#: ../../whatsnew/3.14.rst:783 ../../whatsnew/3.14.rst:2912
#: ../../whatsnew/3.14.rst:2931
msgid "(Contributed by Victor Stinner in :gh:`107954`.)"
msgstr "（由 Victor Stinner 在 :gh:`107954` 中贡献。）"

#: ../../whatsnew/3.14.rst:786
msgid ":pep:`741`."
msgstr ":pep:`741`。"

#: ../../whatsnew/3.14.rst:791
msgid "Asyncio introspection capabilities"
msgstr "asyncio 内省能力"

#: ../../whatsnew/3.14.rst:793
msgid ""
"Added a new command-line interface to inspect running Python processes using"
" asynchronous tasks, available via:"
msgstr "新增了一个通过异步任务检查运行中Python进程的命令行接口，可通过以下方式使用："

#: ../../whatsnew/3.14.rst:796
msgid "python -m asyncio ps PID"
msgstr "python -m asyncio ps PID"

#: ../../whatsnew/3.14.rst:800
msgid ""
"This tool inspects the given process ID (PID) and displays information about"
" currently running asyncio tasks.  It outputs a task table: a flat listing "
"of all tasks, their names, their coroutine stacks, and which tasks are "
"awaiting them."
msgstr ""
"该工具会检查指定的进程ID（PID），并显示当前正在运行的asyncio任务信息。其输出包含一个任务表格：以扁平列表形式展示所有任务及其名称、协程堆栈信息，以及各任务正在等待的其他任务。"

#: ../../whatsnew/3.14.rst:805
msgid "python -m asyncio pstree PID"
msgstr "python -m asyncio pstree PID"

#: ../../whatsnew/3.14.rst:809
msgid ""
"This tool fetches the same information, but renders a visual async call "
"tree, showing coroutine relationships in a hierarchical format.  This "
"command is particularly useful for debugging long-running or stuck "
"asynchronous programs. It can help developers quickly identify where a "
"program is blocked, what tasks are pending, and how coroutines are chained "
"together."
msgstr ""
"该工具获取相同的信息，但会以可视化异步调用树的形式呈现，采用层级结构展示协程关系。此命令特别适用于调试长时间运行或卡死的异步程序，能帮助开发者快速定位程序阻塞位置、识别待处理任务，以及理清协程间的调用链关系。"

#: ../../whatsnew/3.14.rst:815
msgid "For example given this code:"
msgstr "例如给定以下代码："

#: ../../whatsnew/3.14.rst:817
msgid ""
"import asyncio\n"
"\n"
"async def play(track):\n"
"    await asyncio.sleep(5)\n"
"    print(f\"🎵 Finished: {track}\")\n"
"\n"
"async def album(name, tracks):\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        for track in tracks:\n"
"            tg.create_task(play(track), name=track)\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        tg.create_task(\n"
"          album(\"Sundowning\", [\"TNDNBTG\", \"Levitate\"]), name=\"Sundowning\")\n"
"        tg.create_task(\n"
"          album(\"TMBTE\", [\"DYWTYLM\", \"Aqua Regia\"]), name=\"TMBTE\")\n"
"\n"
"if __name__ == \"__main__\":\n"
"    asyncio.run(main())"
msgstr ""
"import asyncio\n"
"\n"
"async def play(track):\n"
"    await asyncio.sleep(5)\n"
"    print(f\"🎵 Finished: {track}\")\n"
"\n"
"async def album(name, tracks):\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        for track in tracks:\n"
"            tg.create_task(play(track), name=track)\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        tg.create_task(\n"
"          album(\"Sundowning\", [\"TNDNBTG\", \"Levitate\"]), name=\"Sundowning\")\n"
"        tg.create_task(\n"
"          album(\"TMBTE\", [\"DYWTYLM\", \"Aqua Regia\"]), name=\"TMBTE\")\n"
"\n"
"if __name__ == \"__main__\":\n"
"    asyncio.run(main())"

#: ../../whatsnew/3.14.rst:840
msgid ""
"Executing the new tool on the running process will yield a table like this:"
msgstr "在运行中的进程上执行该新工具将生成如下表格："

#: ../../whatsnew/3.14.rst:842
msgid ""
"python -m asyncio ps 12345\n"
"\n"
"tid        task id              task name            coroutine stack                                    awaiter chain                                      awaiter name    awaiter id\n"
"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"1935500    0x7fc930c18050       Task-1               TaskGroup._aexit -> TaskGroup.__aexit__ -> main                                                                       0x0\n"
"1935500    0x7fc930c18230       Sundowning           TaskGroup._aexit -> TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fa50       TMBTE                TaskGroup._aexit -> TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fdf0       TNDNBTG              sleep -> play                                      TaskGroup._aexit -> TaskGroup.__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32510       Levitate             sleep -> play                                      TaskGroup._aexit -> TaskGroup.__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32890       DYWTYLM              sleep -> play                                      TaskGroup._aexit -> TaskGroup.__aexit__ -> album   TMBTE           0x7fc93173fa50\n"
"1935500    0x7fc93161ec30       Aqua Regia           sleep -> play                                      TaskGroup._aexit -> TaskGroup.__aexit__ -> album   TMBTE           0x7fc93173fa50"
msgstr ""
"python -m asyncio ps 12345\n"
"\n"
"tid        task id              task name            coroutine stack                                    awaiter chain                                      awaiter name    awaiter id\n"
"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"1935500    0x7fc930c18050       Task-1               TaskGroup._aexit -> TaskGroup.__aexit__ -> main                                                                       0x0\n"
"1935500    0x7fc930c18230       Sundowning           TaskGroup._aexit -> TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fa50       TMBTE                TaskGroup._aexit -> TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fdf0       TNDNBTG              sleep -> play                                      TaskGroup._aexit -> TaskGroup.__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32510       Levitate             sleep -> play                                      TaskGroup._aexit -> TaskGroup.__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32890       DYWTYLM              sleep -> play                                      TaskGroup._aexit -> TaskGroup.__aexit__ -> album   TMBTE           0x7fc93173fa50\n"
"1935500    0x7fc93161ec30       Aqua Regia           sleep -> play                                      TaskGroup._aexit -> TaskGroup.__aexit__ -> album   TMBTE           0x7fc93173fa50"

#: ../../whatsnew/3.14.rst:856
msgid "or a tree like this:"
msgstr "或生成如下树状结构："

#: ../../whatsnew/3.14.rst:858
msgid ""
"python -m asyncio pstree 12345\n"
"\n"
"└── (T) Task-1\n"
"    └──  main example.py:13\n"
"        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"            └──  TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                ├── (T) Sundowning\n"
"                │   └──  album example.py:8\n"
"                │       └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"                │           └──  TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                │               ├── (T) TNDNBTG\n"
"                │               │   └──  play example.py:4\n"
"                │               │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                │               └── (T) Levitate\n"
"                │                   └──  play example.py:4\n"
"                │                       └──  sleep Lib/asyncio/tasks.py:702\n"
"                └── (T) TMBTE\n"
"                    └──  album example.py:8\n"
"                        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"                            └──  TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                                ├── (T) DYWTYLM\n"
"                                │   └──  play example.py:4\n"
"                                │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                                └── (T) Aqua Regia\n"
"                                    └──  play example.py:4\n"
"                                        └──  sleep Lib/asyncio/tasks.py:702"
msgstr ""
"python -m asyncio pstree 12345\n"
"\n"
"└── (T) Task-1\n"
"    └──  main example.py:13\n"
"        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"            └──  TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                ├── (T) Sundowning\n"
"                │   └──  album example.py:8\n"
"                │       └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"                │           └──  TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                │               ├── (T) TNDNBTG\n"
"                │               │   └──  play example.py:4\n"
"                │               │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                │               └── (T) Levitate\n"
"                │                   └──  play example.py:4\n"
"                │                       └──  sleep Lib/asyncio/tasks.py:702\n"
"                └── (T) TMBTE\n"
"                    └──  album example.py:8\n"
"                        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"                            └──  TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                                ├── (T) DYWTYLM\n"
"                                │   └──  play example.py:4\n"
"                                │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                                └── (T) Aqua Regia\n"
"                                    └──  play example.py:4\n"
"                                        └──  sleep Lib/asyncio/tasks.py:702"

#: ../../whatsnew/3.14.rst:887
msgid ""
"If a cycle is detected in the async await graph (which could indicate a "
"programming issue), the tool raises an error and lists the cycle paths that "
"prevent tree construction:"
msgstr "当检测到异步等待图中存在循环引用（可能表明存在编程问题）时，该工具将报错并列出阻碍树形结构构建的循环路径："

#: ../../whatsnew/3.14.rst:891
msgid ""
"python -m asyncio pstree 12345\n"
"\n"
"ERROR: await-graph contains cycles - cannot print a tree!\n"
"\n"
"cycle: Task-2 → Task-3 → Task-2"
msgstr ""
"python -m asyncio pstree 12345\n"
"\n"
"ERROR: await-graph contains cycles - cannot print a tree!\n"
"\n"
"cycle: Task-2 → Task-3 → Task-2"

#: ../../whatsnew/3.14.rst:899
msgid ""
"(Contributed by Pablo Galindo, Łukasz Langa, Yury Selivanov, and Marta Gomez"
" Macias in :gh:`91048`.)"
msgstr ""
"（由 Pablo Galindo、 Łukasz Langa、 Yury Selivanov 和 Marta Gomez Macias 在 "
":gh:`91048` 中贡献。）"

#: ../../whatsnew/3.14.rst:905
msgid "A new type of interpreter"
msgstr "一种新型的解释器"

#: ../../whatsnew/3.14.rst:907
msgid ""
"A new type of interpreter has been added to CPython. It uses tail calls "
"between small C functions that implement individual Python opcodes, rather "
"than one large C case statement. For certain newer compilers, this "
"interpreter provides significantly better performance. Preliminary numbers "
"on our machines suggest anywhere up to 30% faster Python code, and a "
"geometric mean of 3-5% faster on ``pyperformance`` depending on platform and"
" architecture. The baseline is Python 3.14 built with Clang 19 without this "
"new interpreter."
msgstr ""
"CPython 新增了一种全新的解释器类型。它通过在实现各个 Python 操作码的小型 C 函数之间使用尾调用来运行，而不是使用单个大型 C case"
" 语句。对于某些较新的编译器，这种解释器能带来显著的性能提升。我们在测试机器上的初步数据显示，Python 代码的运行速度最高可提升 "
"30%，在不同平台和架构上运行 ``pyperformance`` 基准测试的几何平均提速为 3% 到 5%。作为对比的基线是使用 Clang 19 "
"编译、未启用该新解释器的 Python 3.14。"

#: ../../whatsnew/3.14.rst:916
msgid ""
"This interpreter currently only works with Clang 19 and newer on x86-64 and "
"AArch64 architectures. However, we expect that a future release of GCC will "
"support this as well."
msgstr ""
"此解释器目前仅适用于 x86-64 和 AArch64 架构上的 Clang 19 及更高版本。不过，我们预计 GCC 的未来版本也将支持此功能。"

#: ../../whatsnew/3.14.rst:920
msgid ""
"This feature is opt-in for now. We highly recommend enabling profile-guided "
"optimization with the new interpreter as it is the only configuration we "
"have tested and can validate its improved performance. For further "
"information on how to build Python, see :option:`--with-tail-call-interp`."
msgstr ""
"此功能目前为可选功能。 我们强烈建议在新解释器中启用配置文件引导优化，因为这是我们测试过的唯一配置，可以验证其性能提升。 有关如何构建 Python "
"的更多信息，请参阅 :option:`--with-tail-call-interp`。"

#: ../../whatsnew/3.14.rst:928
msgid ""
"This is not to be confused with `tail call optimization`__ of Python "
"functions, which is currently not implemented in CPython."
msgstr "这不应与Python函数的 `尾调用优化`__ 相混淆，该特性目前在CPython中尚未实现。"

#: ../../whatsnew/3.14.rst:931
msgid ""
"This new interpreter type is an internal implementation detail of the "
"CPython interpreter.  It doesn't change the visible behavior of Python "
"programs at all.  It can improve their performance, but doesn't change "
"anything else."
msgstr "这一新型解释器属于CPython解释器的内部实现细节，完全不会改变Python程序的可见行为。它能提升程序性能，但不会引发任何其他变更。"

#: ../../whatsnew/3.14.rst:939
msgid ""
"This section previously reported a 9-15% geometric mean speedup. This number"
" has since been cautiously revised down to 3-5%. While we expect performance"
" results to be better than what we report, our estimates are more "
"conservative due to a `compiler bug <https://github.com/llvm/llvm-"
"project/issues/106846>`_ found in Clang/LLVM 19, which causes the normal "
"interpreter to be slower. We were unaware of this bug, resulting in "
"inaccurate results. We sincerely apologize for communicating results that "
"were only accurate for LLVM v19.1.x and v20.1.0. In the meantime, the bug "
"has been fixed in LLVM v20.1.1 and for the upcoming v21.1, but it will "
"remain unfixed for LLVM v19.1.x and v20.1.0. Thus any benchmarks with those "
"versions of LLVM may produce inaccurate numbers. (Thanks to Nelson Elhage "
"for bringing this to light.)"
msgstr ""
"本节原先报告的几何平均加速比为 9-15%，但这一数字现已谨慎地下调为 3% 到 5%。 尽管我们预计实际性能提升可能高于这一范围，但由于在 "
"Clang/LLVM 19 中发现了一个`编译器漏洞 <https://github.com/llvm/llvm-"
"project/issues/106846>`_，我们对性能估算变得更加保守。该漏洞会导致常规解释器变慢，我们在早期并未意识到这一点，导致报告的性能数据不准确。"
" 对此我们深感抱歉，之前的数据实际上仅对 LLVM v19.1.x 和 v20.1.0 有效。 目前，这个漏洞已经在 LLVM v20.1.1 "
"和即将发布的 v21.1 中被修复，但在 LLVM v19.1.x 和 v20.1.0 中将不会得到修复。 因此，使用这些 LLVM "
"版本进行的基准测试可能会生成不准确的数据。 （感谢 Nelson Elhage 揭示了这个问题。）"

#: ../../whatsnew/3.14.rst:951
msgid ""
"(Contributed by Ken Jin in :gh:`128563`, with ideas on how to implement this"
" in CPython by Mark Shannon, Garrett Gu, Haoran Xu, and Josh Haberman.)"
msgstr ""
"（由 Ken Jin 在 :gh:`128563` 中贡献，CPython实现方案融合了Mark Shannon、Garrett Gu、Haoran "
"Xu和Josh Haberman的设计理念。）"

#: ../../whatsnew/3.14.rst:957
msgid "Free-threaded mode"
msgstr "自由线程模式"

#: ../../whatsnew/3.14.rst:959
msgid ""
"Free-threaded mode (:pep:`703`), initially added in 3.13, has been "
"significantly improved. The implementation described in PEP 703 was "
"finished, including C API changes, and temporary workarounds in the "
"interpreter were replaced with more permanent solutions. The specializing "
"adaptive interpreter (:pep:`659`) is now enabled in free-threaded mode, "
"which along with many other optimizations greatly improves its performance. "
"The performance penalty on single-threaded code in free-threaded mode is now"
" roughly 5-10%, depending on platform and C compiler used."
msgstr ""
"自由线程模式（:pep:`703`，最初在3.13版本引入）已得到显著改进。PEP 703中描述的实现方案已完成，包括C "
"API变更，且解释器中的临时解决方案已被更持久的方案取代。专业化自适应解释器（:pep:`659`）现已在自由线程模式中启用，结合众多其他优化措施，其性能得到大幅提升。当前自由线程模式对单线程代码的性能影响已降至约5-10%，具体取决于平台和使用的C编译器。"

#: ../../whatsnew/3.14.rst:967
msgid ""
"This work was done by many contributors: Sam Gross, Matt Page, Neil "
"Schemenauer, Thomas Wouters, Donghee Na, Kirill Podoprigora, Ken Jin, Itamar"
" Oren, Brett Simmers, Dino Viehland, Nathan Goldbaum, Ralf Gommers, "
"Lysandros Nikolaou, Kumar Aditya, Edgar Margffoy, and many others."
msgstr ""
"此项工作由众多贡献者共同完成：Sam Gross、Matt Page、Neil Schemenauer、Thomas Wouters、Donghee "
"Na、Kirill Podoprigora、Ken Jin、Itamar Oren、Brett Simmers、Dino Viehland、Nathan"
" Goldbaum、Ralf Gommers、Lysandros Nikolaou、Kumar Aditya、Edgar Margffoy "
"以及其他很多人。"

#: ../../whatsnew/3.14.rst:972
msgid ""
"Some of these contributors are employed by Meta, which has continued to "
"provide significant engineering resources to support this project."
msgstr "部分贡献者受雇于Meta，该公司持续为本项目提供了大量工程技术资源支持。"

#: ../../whatsnew/3.14.rst:975
msgid ""
"From 3.14, when compiling extension modules for the free-threaded build of "
"CPython on Windows, the preprocessor variable ``Py_GIL_DISABLED`` now needs "
"to be specified by the build backend, as it will no longer be determined "
"automatically by the C compiler. For a running interpreter, the setting that"
" was used at compile time can be found using "
":func:`sysconfig.get_config_var`."
msgstr ""
"自3.14版本起，在Windows平台上为CPython的自由线程构建编译扩展模块时，构建后端现在需要显式指定预处理器变量 "
"``Py_GIL_DISABLED``，因为该变量将不再由C编译器自动确定。对于运行中的解释器，可通过 "
":func:`sysconfig.get_config_var` 查询编译时使用的配置。"

#: ../../whatsnew/3.14.rst:981
msgid ""
"A new flag has been added, :data:`~sys.flags.context_aware_warnings`.  This "
"flag defaults to true for the free-threaded build and false for the GIL-"
"enabled build. If the flag is true then the :class:`warnings.catch_warnings`"
" context manager uses a context variable for warning filters.  This makes "
"the context manager behave predictably when used with multiple threads or "
"asynchronous tasks."
msgstr ""
"新增了一个旗标 :data:`~sys.flags.context_aware_warnings`。 这个旗标在自由线程构建版中默认为真值而在启用了 "
"GIL 的构建版中为假值。 如果该旗标为真值则 :class:`warnings.catch_warnings` "
"上下文管理器会使用一个上下文变量作为警告过滤器。 这使得该上下文管理器在多线程或异步任务场景下具有可预测的行为。"

#: ../../whatsnew/3.14.rst:988
msgid ""
"A new flag has been added, :data:`~sys.flags.thread_inherit_context`. This "
"flag defaults to true for the free-threaded build and false for the GIL-"
"enabled build. If the flag is true then threads created with "
":class:`threading.Thread` start with a copy of the "
":class:`~contextvars.Context()` of the caller of "
":meth:`~threading.Thread.start`.  Most significantly, this makes the warning"
" filtering context established by :class:`~warnings.catch_warnings` be "
"\"inherited\" by threads (or asyncio tasks) started within that context.  It"
" also affects other modules that use context variables, such as the "
":mod:`decimal` context manager."
msgstr ""
"新增了一个标志位 "
":data:`~sys.flags.thread_inherit_context`。该标志在自由线程构建中默认为真（True），在启用GIL的构建中默认为假（False）。当标志为真时，通过"
" :class:`threading.Thread` 创建的线程会继承 :meth:`~threading.Thread.start` 调用者的 "
":class:`~contextvars.Context()` 副本。最重要的是，这使得由 "
":class:`~warnings.catch_warnings` "
"建立的警告过滤上下文能够被该上下文中启动的线程（或asyncio任务）\"继承\"。该标志还会影响其他使用上下文变量的模块，例如 "
":mod:`decimal` 上下文管理器。"

#: ../../whatsnew/3.14.rst:1002
msgid "Syntax highlighting in PyREPL"
msgstr "PyREPL 的语法高亮功能"

#: ../../whatsnew/3.14.rst:1004
msgid ""
"The default :term:`interactive` shell now highlights Python syntax as you "
"type.  The feature is enabled by default unless the "
":envvar:`PYTHON_BASIC_REPL` environment is set or any color-disabling "
"environment variables are used. See :ref:`using-on-controlling-color` for "
"details."
msgstr ""
"默认的 :term:`interactive` 式 shell 现已支持实时 Python 语法高亮。 除非设置了 "
":envvar:`PYTHON_BASIC_REPL` 环境变量或使用了任何禁用颜色的环境变量，否则该功能默认启用。 详情请参阅 "
":ref:`using-on-controlling-color`。"

#: ../../whatsnew/3.14.rst:1010
msgid ""
"The default color theme for syntax highlighting strives for good contrast "
"and uses exclusively the 4-bit VGA standard ANSI color codes for maximum "
"compatibility. The theme can be customized using an experimental API "
"``_colorize.set_theme()``.  This can be called interactively, as well as in "
"the :envvar:`PYTHONSTARTUP` script."
msgstr ""
"语法高亮的默认配色方案追求高对比度，并仅使用4位VGA标准ANSI颜色代码以确保最大兼容性。可通过实验性API "
"``_colorize.set_theme()`` 自定义主题，该API既支持交互式调用，也可在 :envvar:`PYTHONSTARTUP` "
"脚本中使用。"

#: ../../whatsnew/3.14.rst:1016
msgid "(Contributed by Łukasz Langa in :gh:`131507`.)"
msgstr "（由 Łukasz Langa 在 :gh:`131507` 中贡献。）"

#: ../../whatsnew/3.14.rst:1022
msgid "Binary releases for the experimental just-in-time compiler"
msgstr "实验性即时编译器（JIT）的二进制发布版本"

#: ../../whatsnew/3.14.rst:1024
msgid ""
"The official macOS and Windows release binaries now include an "
"*experimental* just-in-time (JIT) compiler. Although it is **not** "
"recommended for production use, it can be tested by setting "
":envvar:`PYTHON_JIT=1 <PYTHON_JIT>` as an environment variable. Downstream "
"source builds and redistributors can use the :option:`--enable-experimental-"
"jit=yes-off` configuration option for similar behavior."
msgstr ""
"官方 macOS 和 Windows 发布版二进制文件现已包含 *实验性* 即时编译（JIT）器。虽然不建议在生产环境中使用，但可通过设置环境变量 "
":envvar:`PYTHON_JIT=1 <PYTHON_JIT>` 进行测试。下游源码构建和再分发方可使用配置选项 "
":option:`--enable-experimental-jit=yes-off` 实现类似行为。"

#: ../../whatsnew/3.14.rst:1031
msgid ""
"The JIT is at an early stage and still in active development. As such, the "
"typical performance impact of enabling it can range from 10% slower to 20% "
"faster, depending on workload. To aid in testing and evaluation, a set of "
"introspection functions has been provided in the :data:`sys._jit` namespace."
" :func:`sys._jit.is_available` can be used to determine if the current "
"executable supports JIT compilation, while :func:`sys._jit.is_enabled` can "
"be used to tell if JIT compilation has been enabled for the current process."
msgstr ""
"该JIT编译器尚处于早期开发阶段，性能表现存在波动：启用后根据工作负载不同，可能产生10%的性能下降至20%的性能提升。为便于测试评估，:data:`sys._jit`"
" 命名空间提供了一组内省函数：:func:`sys._jit.is_available` 用于检测当前可执行文件是否支持JIT编译，而 "
":func:`sys._jit.is_available` 则可判断当前进程是否已启用JIT编译功能。"

#: ../../whatsnew/3.14.rst:1039
msgid ""
"Currently, the most significant missing functionality is that native "
"debuggers and profilers like ``gdb`` and ``perf`` are unable to unwind "
"through JIT frames (Python debuggers and profilers, like :mod:`pdb` or "
":mod:`profile`, continue to work without modification). Free-threaded builds"
" do not support JIT compilation."
msgstr ""
"当前最显著的功能缺失是原生调试器（如 ``gdb``）和性能分析工具（如 ``perf``）无法展开JIT调用栈（而Python原生调试器如 "
":mod:`pdb` 和性能分析器如 :mod:`profile` 仍可无需修改直接使用）。此外，自由线程构建版本暂不支持JIT编译功能。"

#: ../../whatsnew/3.14.rst:1044
msgid ""
"Please report any bugs or major performance regressions that you encounter!"
msgstr "如遇任何错误或严重性能退化问题，请务必提交报告！"

#: ../../whatsnew/3.14.rst:1046
msgid ":pep:`744`"
msgstr ":pep:`744`"

#: ../../whatsnew/3.14.rst:1049
msgid "Concurrent safe warnings control"
msgstr "并发安全的警告控制"

#: ../../whatsnew/3.14.rst:1051
msgid ""
"The :class:`warnings.catch_warnings` context manager will now optionally use"
" a context variable for warning filters.  This is enabled by setting the "
":data:`~sys.flags.context_aware_warnings` flag, either with the ``-X`` "
"command-line option or an environment variable.  This gives predictable "
"warnings control when using :class:`~warnings.catch_warnings` combined with "
"multiple threads or asynchronous tasks. The flag defaults to true for the "
"free-threaded build and false for the GIL-enabled build."
msgstr ""
":class:`warnings.catch_warnings` 上下文管理器现在支持通过上下文变量处理警告过滤器，该功能需通过设置 "
":data:`~sys.flags.context_aware_warnings` 标志启用（可使用 -X "
"命令行选项或环境变量）。当结合多线程或异步任务使用 :class:`~warnings.catch_warnings` "
"时，此举能提供可预测的警告控制。该标志在自由线程构建中默认为真(True)，在启用GIL的构建中默认为假(False)。"

#: ../../whatsnew/3.14.rst:1059
msgid "(Contributed by Neil Schemenauer and Kumar Aditya in :gh:`130010`.)"
msgstr "（由 Neil Schemenauer 和 Kumar Aditya 在 :gh:`130010` 中贡献。）"

#: ../../whatsnew/3.14.rst:1064
msgid "Incremental garbage collection"
msgstr "增量式垃圾回收"

#: ../../whatsnew/3.14.rst:1066
msgid ""
"The cycle garbage collector is now incremental. This means that maximum "
"pause times are reduced by an order of magnitude or more for larger heaps."
msgstr "循环垃圾回收器现在是增量式的。 这意味着针对较大的堆的最大暂停时间将减少一个或更多的数量级。"

#: ../../whatsnew/3.14.rst:1070
msgid ""
"There are now only two generations: young and old. When :func:`gc.collect` "
"is not called directly, the GC is invoked a little less frequently. When "
"invoked, it collects the young generation and an increment of the old "
"generation, instead of collecting one or more generations."
msgstr ""
"现在只有两个代：年轻代和老年代。当不直接调用 :func:`gc.collect` "
"时，GC的调用频率会稍低。当被调用时，它回收年轻代和老年代的一部分，而不是回收一个或多个代。"

#: ../../whatsnew/3.14.rst:1076
msgid "The behavior of :func:`!gc.collect` changes slightly:"
msgstr ":func:`!gc.collect` 的行为略有变化："

#: ../../whatsnew/3.14.rst:1078 ../../whatsnew/3.14.rst:3140
msgid ""
"``gc.collect(1)``: Performs an increment of garbage collection, rather than "
"collecting generation 1."
msgstr "``gc.collect(1)``: 执行增量垃圾回收，而不是回收第 1 代。"

#: ../../whatsnew/3.14.rst:1080 ../../whatsnew/3.14.rst:3142
msgid "Other calls to :func:`!gc.collect` are unchanged."
msgstr "其他对 :func:`!gc.collect` 的调用保持不变。"

#: ../../whatsnew/3.14.rst:1082 ../../whatsnew/3.14.rst:2332
msgid "(Contributed by Mark Shannon in :gh:`108362`.)"
msgstr "（由 Mark Shannon 在 :gh:`108362` 中贡献。）"

#: ../../whatsnew/3.14.rst:1085
msgid "Platform support"
msgstr "平台支持"

#: ../../whatsnew/3.14.rst:1087
msgid ""
":pep:`776`: Emscripten is now an officially supported platform at :pep:`tier"
" 3 <11#tier-3>`. As a part of this effort, more than 25 bugs in `Emscripten "
"libc`__ were fixed. Emscripten now includes support for :mod:`ctypes`, "
":mod:`termios`, and :mod:`fcntl`, as well as experimental support for "
":ref:`PyREPL <tut-interactive>`."
msgstr ""
":pep:`776`：Emscripten现在是一个官方支持的 :pep:`三级 <11#tier-3>` 平台。作为这一努力的一部分，修复了 "
"`Emscripten libc`__ 中的25个以上的bug。Emscripten现在包括对 :mod:`ctypes`、:mod:`termios`"
" 和 :mod:`fcntl` 的支持，以及对 :ref:`PyREPL <tut-interactive>` 的实验性支持。"

#: ../../whatsnew/3.14.rst:1093
msgid ""
"(Contributed by R. Hood Chatham in :gh:`127146`, :gh:`127683`, and "
":gh:`136931`.)"
msgstr "（由 R. Hood Chatham 在 :gh:`127146`, :gh:`127683` 和 :gh:`136931` 中贡献。）"

#: ../../whatsnew/3.14.rst:1098
msgid "Other language changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.14.rst:1100
msgid ""
"The default :term:`interactive` shell now supports import autocompletion. "
"This means that typing ``import foo`` and pressing ``<tab>`` will suggest "
"modules starting with ``foo``. Similarly, typing ``from foo import b`` will "
"suggest submodules of ``foo`` starting with ``b``. Note that autocompletion "
"of module attributes is not currently supported. (Contributed by Tomas Roun "
"in :gh:`69605`.)"
msgstr ""
"默认的 :term:`interactive` shell 现已支持导入自动补全功能。 具体表现为：输入 ``import foo`` 后按下 "
"``<tab>`` 键会建议以 ``foo`` 开头的模块；类似地，输入 ``from foo import b`` 则会建议以 ``b`` 开头的 "
"``foo`` 子模块。 需注意当前暂不支持模块属性的自动补全。 （由 Tomas Roun 在 :gh:`69605` 中贡献。）"

#: ../../whatsnew/3.14.rst:1107
msgid ""
"The :func:`map` built-in now has an optional keyword-only *strict* flag like"
" :func:`zip` to check that all the iterables are of equal length. "
"(Contributed by Wannes Boeykens in :gh:`119793`.)"
msgstr ""
"内置函数 :func:`map` 现在新增了一个可选的仅限关键字参数 *strict* （与 :func:`zip` "
"类似），用于校验所有可迭代对象长度是否一致。（由 Wannes Boeykens 在 :gh:`119793` 中贡献。）"

#: ../../whatsnew/3.14.rst:1111
msgid ""
"Incorrect usage of :keyword:`await` and asynchronous comprehensions is now "
"detected even if the code is optimized away by the :option:`-O` command-line"
" option. For example, ``python -O -c 'assert await 1'`` now produces a "
":exc:`SyntaxError`. (Contributed by Jelle Zijlstra in :gh:`121637`.)"
msgstr ""
"现在即使代码被 :option:`-O` 命令行选项优化移除，仍能检测出 :keyword:`await` 和异步推导式的错误用法。例如，执行 "
"``python -O -c 'assert await 1'`` 现在会触发 :exc:`SyntaxError`。（由 Jelle Zijlstra"
" 在 :gh:`121637` 中贡献。）"

#: ../../whatsnew/3.14.rst:1116
msgid ""
"Writes to ``__debug__`` are now detected even if the code is optimized away "
"by the :option:`-O` command-line option. For example, ``python -O -c 'assert"
" (__debug__ := 1)'`` now produces a :exc:`SyntaxError`. (Contributed by Irit"
" Katriel in :gh:`122245`.)"
msgstr ""
"现在即使代码被 :option:`-O` 命令行选项优化移除，对 ``__debug__`` 的写入操作仍会被检测到。例如，执行 ``python -O"
" -c 'assert (__debug__ := 1)'`` 现在会触发 :exc:`SyntaxError`。（由 Irit Katriel 在 "
":gh:`122245` 中贡献。）"

#: ../../whatsnew/3.14.rst:1121
msgid ""
"Add class methods :meth:`float.from_number` and :meth:`complex.from_number` "
"to convert a number to :class:`float` or :class:`complex` type "
"correspondingly. They raise an error if the argument is a string. "
"(Contributed by Serhiy Storchaka in :gh:`84978`.)"
msgstr ""
"新增类方法 :meth:`float.from_number` 和 :meth:`complex.from_number`，用于将数值分别转换为 "
":class:`float` 或 :class:`complex` 类型。若参数为字符串则会引发错误。（由 Serhiy Storchaka 在 "
":gh:`84978` 中贡献。）"

#: ../../whatsnew/3.14.rst:1126
msgid ""
"Implement mixed-mode arithmetic rules combining real and complex numbers as "
"specified by C standards since C99. (Contributed by Sergey B Kirpichev in "
":gh:`69639`.)"
msgstr "实现了符合C99以来C标准规范的实数与复数混合运算规则。（由 Sergey B Kirpichev 在 :gh:`69639` 中贡献。）"

#: ../../whatsnew/3.14.rst:1130
msgid ""
"All Windows code pages are now supported as \"cpXXX\" codecs on Windows. "
"(Contributed by Serhiy Storchaka in :gh:`123803`.)"
msgstr ""
"现在Windows平台已支持所有Windows代码页作为\"cpXXX\"编解码器使用。（由 Serhiy Storchaka 在 "
":gh:`123803` 中贡献。）"

#: ../../whatsnew/3.14.rst:1133
msgid ""
":class:`super` objects are now :mod:`pickleable <pickle>` and :mod:`copyable"
" <copy>`. (Contributed by Serhiy Storchaka in :gh:`125767`.)"
msgstr ""
":class:`super` 对象现在支持 :mod:`序列化 <pickle>` 和 :mod:`复制 <copy>` 操作。（由 Serhiy "
"Storchaka 在 :gh:`125767` 中贡献。）"

#: ../../whatsnew/3.14.rst:1137
msgid ""
"The :class:`memoryview` type now supports subscription, making it a "
":term:`generic type`. (Contributed by Brian Schubert in :gh:`126012`.)"
msgstr ""
":class:`memoryview` 类型现已支持下标，使其成为 :term:`generic type`。 （由 Brian Schubert 在 "
":gh:`126012` 中贡献。）"

#: ../../whatsnew/3.14.rst:1141
msgid ""
"Support underscore and comma as thousands separators in the fractional part "
"for floating-point presentation types of the new-style string formatting "
"(with :func:`format` or :ref:`f-strings`). (Contributed by Sergey B "
"Kirpichev in :gh:`87790`.)"
msgstr ""
"在新式字符串格式化（通过 :func:`format` 或 :ref:`f-strings` "
"实现）的浮点数表示类型中，现支持使用下划线和逗号作为小数部分的千位分隔符。（由 Sergey B Kirpichev 在 :gh:`87790` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1146
msgid ""
"The :func:`bytes.fromhex` and :func:`bytearray.fromhex` methods now accept "
"ASCII :class:`bytes` and :term:`bytes-like objects <bytes-like object>`. "
"(Contributed by Daniel Pope in :gh:`129349`.)"
msgstr ""
":func:`bytes.fromhex` 和 :func:`bytearray.fromhex` 方法现在支持 ASCII 格式的 "
":class:`bytes` 及 :term:`字节型对象 <bytes-like object>` 作为输入参数。（由 Daniel Pope 在 "
":gh:`129349` 中贡献。）"

#: ../../whatsnew/3.14.rst:1150
msgid ""
"Support ``\\z`` as a synonym for ``\\Z`` in :mod:`regular expressions <re>`."
" It is interpreted unambiguously in many other regular expression engines, "
"unlike ``\\Z``, which has subtly different behavior. (Contributed by Serhiy "
"Storchaka in :gh:`133306`.)"
msgstr ""
"在 :mod:`正则表达式 <re>` 中，现支持将 ``\\z`` 作为 ``\\Z`` 的同义符使用。与行为存在微妙差异的 ``\\Z`` "
"不同，``\\z`` 在其他多种正则表达式引擎中具有明确无歧义的解析方式。（由 Serhiy Storchaka 在 :gh:`133306` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1155
msgid ""
"``\\B`` in :mod:`regular expression <re>` now matches the empty input "
"string. Now it is always the opposite of ``\\b``. (Contributed by Serhiy "
"Storchaka in :gh:`124130`.)"
msgstr ""
"在 :mod:`正则表达式 <re>` 中，``\\B`` 现在可以匹配空输入字符串，其行为现在始终与 ``\\b`` 相反。（由 Serhiy "
"Storchaka 在 :gh:`124130` 中贡献。）"

#: ../../whatsnew/3.14.rst:1159
msgid ""
"iOS and macOS apps can now be configured to redirect ``stdout`` and "
"``stderr`` content to the system log. (Contributed by Russell Keith-Magee in"
" :gh:`127592`.)"
msgstr ""
"iOS 和 macOS 应用程序现在可配置为将 ``stdout`` 和 ``stderr`` 输出内容重定向至系统日志。（由 Russell "
"Keith-Magee 在 :gh:`127592` 中贡献。）"

#: ../../whatsnew/3.14.rst:1163
msgid ""
"The iOS testbed is now able to stream test output while the test is running."
" The testbed can also be used to run the test suite of projects other than "
"CPython itself. (Contributed by Russell Keith-Magee in :gh:`127592`.)"
msgstr ""
"iOS 测试平台现已支持在测试运行时实时流式传输测试输出，并可用于运行除 CPython 之外的其他项目测试套件。（由 Russell Keith-"
"Magee 在 :gh:`127592` 中贡献。）"

#: ../../whatsnew/3.14.rst:1167
msgid ""
"Three-argument :func:`pow` now tries calling :meth:`~object.__rpow__` if "
"necessary. Previously it was only called in two-argument :func:`!pow` and "
"the binary power operator. (Contributed by Serhiy Storchaka in "
":gh:`130104`.)"
msgstr ""
"三参数 :func:`pow` 现在会在必要时尝试调用 :meth:`~object.__rpow__` 方法。此前该方法仅在双参数 "
":func:`!pow` 和二元幂运算符中被调用。（由 Serhiy Storchaka 在 :gh:`130104` 中贡献。）"

#: ../../whatsnew/3.14.rst:1172
msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified"
" code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"This implementation is used as a fallback when the OpenSSL implementation of"
" HMAC is not available. (Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""
"新增基于 `HACL* <https://github.com/hacl-star/hacl-star/>`__ 项目形式化验证代码的 HMAC "
"(:rfc:`2104`) 内置实现。当 OpenSSL 的 HMAC 实现不可用时，该实现将作为备用方案。（由 Bénédikt Tran 在 "
":gh:`99108` 中贡献。）"

#: ../../whatsnew/3.14.rst:1178
msgid ""
"The import time flag can now track modules that are already loaded "
"('cached'), via the new :option:`-X importtime=2 <-X>`. When such a module "
"is imported, the ``self`` and ``cumulative`` times are replaced by the "
"string ``cached``. Values above ``2`` for ``-X importtime`` are now reserved"
" for future use. (Contributed by Noah Kim and Adam Turner in :gh:`118655`.)"
msgstr ""
"导入时间分析标志现可通过新增的 :option:`-X importtime=2 <-X>` "
"选项追踪已加载（'缓存'）模块。当导入此类模块时，``self`` 和 ``cumulative`` 时间值将被替换为字符串 "
"``cached``。当前规定 ``-X importtime`` 参数值大于 ``2`` 的选项保留供未来使用。（由 Noah Kim 和 Adam "
"Turner 在 :gh:`118655` 中贡献。）"

#: ../../whatsnew/3.14.rst:1185
msgid ""
"When subclassing from a pure C type, the C slots for the new type are no "
"longer replaced with a wrapped version on class creation if they are not "
"explicitly overridden in the subclass. (Contributed by Tomasz Pytel in "
":gh:`132329`.)"
msgstr ""
"当从纯C类型派生子类时，若子类未显式重写相关方法，新建类型的C槽位将不再被替换为封装版本。（由 Tomasz Pytel 在 :gh:`132329` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1190
msgid ""
"The command-line option :option:`-c` now automatically dedents its code "
"argument before execution. The auto-dedentation behavior mirrors "
":func:`textwrap.dedent`. (Contributed by Jon Crall and Steven Sun in "
":gh:`103998`.)"
msgstr ""
"命令行选项 :option:`-c` 现在会在执行前自动对其代码参数进行去缩进处理，该行为与 :func:`textwrap.dedent` "
"函数保持一致。（由 Jon Crall 和 Steven Sun 在 :gh:`103998` 中贡献。）"

#: ../../whatsnew/3.14.rst:1195
msgid ""
"Improve error message when an object supporting the synchronous context "
"manager protocol is entered using :keyword:`async with` instead of "
":keyword:`with`. And vice versa with the asynchronous context manager "
"protocol. (Contributed by Bénédikt Tran in :gh:`128398`.)"
msgstr ""
"当使用 :keyword:`async with` 而非 :keyword:`with` "
"进入支持同步上下文管理器协议的对象时，错误提示信息已改进。反之，对于异步上下文管理器协议的情况也做了相应优化。（由 Bénédikt Tran 在 "
":gh:`128398` 中贡献。）"

#: ../../whatsnew/3.14.rst:1201
msgid ""
":option:`!-J` is no longer a reserved flag for Jython_, and now has no "
"special meaning. (Contributed by Adam Turner in :gh:`133336`.)"
msgstr ""
":option:`!-J` 不再是 Jython_ 的保留标志，目前不具任何特殊含义。（由 Adam Turner 在 :gh:`133336` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1207
msgid ""
"The :func:`int` built-in no longer delegates to :meth:`~object.__trunc__`. "
"Classes that want to support conversion to :func:`!int` must implement "
"either :meth:`~object.__int__` or :meth:`~object.__index__`. (Contributed by"
" Mark Dickinson in :gh:`119743`.)"
msgstr ""
"内置的 :func:`int` 不再委托给 :meth:`~object.__trunc__`。 希望支持转换为 :func:`!int` 的类必须实现"
" :meth:`~object.__int__` 或 :meth:`~object.__index__`。 （由 Mark Dickinson 在 "
":gh:`119743` 中贡献。）"

#: ../../whatsnew/3.14.rst:1212
msgid ""
"Using :data:`NotImplemented` in a boolean context will now raise a "
":exc:`TypeError`. This has raised a :exc:`DeprecationWarning` since Python "
"3.9. (Contributed by Jelle Zijlstra in :gh:`118767`.)"
msgstr ""
"在布尔上下文中使用 :data:`NotImplemented` 现在会引发 :exc:`TypeError` 异常。该用法自 Python 3.9 "
"起已引发 :exc:`DeprecationWarning` 弃用警告。（由 Jelle Zijlstra 在 :gh:`118767` 中贡献。）"

#: ../../whatsnew/3.14.rst:1221
msgid ""
"PEP 765: Disallow ``return``/``break``/``continue`` that exit a ``finally`` "
"block"
msgstr ""
"PEP 765：禁止在 ``finally`` 代码块中使用会跳出该块的 ``return``/``break``/``continue`` 语句"

#: ../../whatsnew/3.14.rst:1223
msgid ""
"The compiler emits a :exc:`SyntaxWarning` when a :keyword:`return`, "
":keyword:`break` or :keyword:`continue` statement appears where it exits a "
":keyword:`finally` block. This change is specified in :pep:`765`."
msgstr ""
"编译器在检测到 :keyword:`return`、:keyword:`break` 或 :keyword:`continue` 语句跳出 "
":keyword:`finally` 代码块时，将触发 :exc:`SyntaxWarning`。此项变更遵循 :pep:`765` 规范。"

#: ../../whatsnew/3.14.rst:1229
msgid "New modules"
msgstr "新增模块"

#: ../../whatsnew/3.14.rst:1231
msgid ""
":mod:`annotationlib`: For introspecting :term:`annotations <annotation>`. "
"See :pep:`749` for more details. (Contributed by Jelle Zijlstra in "
":gh:`119180`.)"
msgstr ""
":mod:`annotationlib`：用于内省 :term:`注解 <annotation>` 的模块，详见 :pep:`749` 规范说明。（由 "
"Jelle Zijlstra 在 :gh:`119180` 中贡献。）"

#: ../../whatsnew/3.14.rst:1237
msgid "Improved modules"
msgstr "改进的模块"

#: ../../whatsnew/3.14.rst:1240 ../../whatsnew/3.14.rst:2397
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.14.rst:1242
msgid ""
"The default value of the :ref:`program name <prog>` for "
":class:`argparse.ArgumentParser` now reflects the way the Python interpreter"
" was instructed to find the ``__main__`` module code. (Contributed by Serhiy"
" Storchaka and Alyssa Coghlan in :gh:`66436`.)"
msgstr ""
":class:`argparse.ArgumentParser` 的 :ref:`程序名称 <prog>` 默认值现在会反映 Python 解释器定位 "
"``__main__`` 模块代码的方式。（由 Serhiy Storchaka 和 Alyssa Coghlan 在 :gh:`66436` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1247
msgid ""
"Introduced the optional *suggest_on_error* parameter to "
":class:`argparse.ArgumentParser`, enabling suggestions for argument choices "
"and subparser names if mistyped by the user. (Contributed by Savannah "
"Ostrowski in :gh:`124456`.)"
msgstr ""
":class:`argparse.ArgumentParser` 新增可选形参 "
"*suggest_on_error*，可在用户输入错误时提供参数选项及子解析器名称的建议。（由 Savannah Ostrowski 在 "
":gh:`124456` 中贡献。）"

#: ../../whatsnew/3.14.rst:1254
msgid ""
"Enable color for help text, which can be disabled with the optional *color* "
"parameter to :class:`argparse.ArgumentParser`. This can also be controlled "
"by :ref:`environment variables <using-on-controlling-color>`. (Contributed "
"by Hugo van Kemenade in :gh:`130645`.)"
msgstr ""
"为帮助文本启用颜色，可以通过向 :class:`argparse.ArgumentParser` 传递可选的 *color* 形参来禁用。这也可以通过 "
":ref:`环境变量 <using-on-controlling-color>` 来控制。（由 Hugo van Kemenade 在 "
":gh:`130645` 中贡献。）"

#: ../../whatsnew/3.14.rst:1262 ../../whatsnew/3.14.rst:2416
msgid "ast"
msgstr "ast（抽象语法树）"

#: ../../whatsnew/3.14.rst:1264
msgid ""
"Add :func:`ast.compare` for comparing two ASTs. (Contributed by Batuhan "
"Taskaya and Jeremy Hylton in :gh:`60191`.)"
msgstr ""
"新增 :func:`ast.compare` 函数用于比较两个抽象语法树（AST）。（由 Batuhan Taskaya 和 Jeremy Hylton"
" 在 :gh:`60191` 中贡献。）"

#: ../../whatsnew/3.14.rst:1267
msgid ""
"Add support for :func:`copy.replace` for AST nodes. (Contributed by Bénédikt"
" Tran in :gh:`121141`.)"
msgstr ""
"新增对AST节点 :func:`copy.replace` 操作的支持。（由 Bénédikt Tran 在 :gh:`121141` 中贡献。）"

#: ../../whatsnew/3.14.rst:1270
msgid ""
"Docstrings are now removed from an optimized AST in optimization level 2. "
"(Contributed by Irit Katriel in :gh:`123958`.)"
msgstr "在优化级别为2时，文档字符串现会从优化后的AST中移除。（由 Irit Katriel 在 :gh:`123958` 中贡献。）"

#: ../../whatsnew/3.14.rst:1273
msgid ""
"The ``repr()`` output for AST nodes now includes more information. "
"(Contributed by Tomas Roun in :gh:`116022`.)"
msgstr "AST节点的 ``repr()`` 输出现在包含更多信息。（由 Tomas Roun 在 :gh:`116022` 中贡献。）"

#: ../../whatsnew/3.14.rst:1276
msgid ""
":func:`ast.parse`, when called with an AST as input, now always verifies "
"that the root node type is appropriate. (Contributed by Irit Katriel in "
":gh:`130139`.)"
msgstr ""
"当传入AST作为输入时，:func:`ast.parse` 现在会始终验证根节点类型是否合规。（由 Irit Katriel 在 "
":gh:`130139` 中贡献。）"

#: ../../whatsnew/3.14.rst:1280
msgid ""
"Add new ``--feature-version``, ``--optimize``, ``--show-empty`` options to "
"the command-line interface. (Contributed by Semyon Moroz in :gh:`133367`.)"
msgstr ""
"新增命令行接口选项 ``--feature-version``、``--optimize`` 和 ``--show-empty``。（由 Semyon "
"Moroz 在 :gh:`133367` 中贡献。）"

#: ../../whatsnew/3.14.rst:1286 ../../whatsnew/3.14.rst:2258
#: ../../whatsnew/3.14.rst:2447
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.14.rst:1288
msgid ""
"The function and methods named :func:`!create_task` now take an arbitrary "
"list of keyword arguments. All keyword arguments are passed to the "
":class:`~asyncio.Task` constructor or the custom task factory. (See "
":meth:`~asyncio.loop.set_task_factory` for details.) The ``name`` and "
"``context`` keyword arguments are no longer special; the name should now be "
"set using the ``name`` keyword argument of the factory, and ``context`` may "
"be ``None``."
msgstr ""
"名为 :func:`!create_task` 的函数及方法现在接受任意关键字参数列表，所有关键字参数都将传递给 "
":class:`~asyncio.Task` 构造器或自定义任务工厂（详见 "
":meth:`~asyncio.loop.set_task_factory`）。``name`` 和 ``context`` "
"关键字参数不再具有特殊处理逻辑——名称现在应通过工厂的 ``name`` 关键字参数设置，而 ``context`` 可设为 ``None``。"

#: ../../whatsnew/3.14.rst:1296
msgid ""
"This affects the following function and methods: "
":meth:`asyncio.create_task`, :meth:`asyncio.loop.create_task`, "
":meth:`asyncio.TaskGroup.create_task`. (Contributed by Thomas Grainger in "
":gh:`128307`.)"
msgstr ""
"这会影响下列函数和方法: :meth:`asyncio.create_task`, :meth:`asyncio.loop.create_task`, "
":meth:`asyncio.TaskGroup.create_task`。 （由 Thomas Grainger 在 :gh:`128307` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1302
msgid ""
"There are two new utility functions for introspecting and printing a "
"program's call graph: :func:`~asyncio.capture_call_graph` and "
":func:`~asyncio.print_call_graph`. (Contributed by Yury Selivanov, Pablo "
"Galindo Salgado, and Łukasz Langa in :gh:`91048`.)"
msgstr ""
"有两个新的实用函数用于内省和打印程序的调用图：:func:`~asyncio.capture_call_graph` 和 "
":func:`~asyncio.print_call_graph`。（由 Yury Selivanov、Pablo Galindo Salgado 和 "
"Łukasz Langa 在 :gh:`91048` 中贡献。）"

#: ../../whatsnew/3.14.rst:1312
msgid "calendar"
msgstr "calendar（日历）"

#: ../../whatsnew/3.14.rst:1314
msgid ""
"By default, today's date is highlighted in color in :mod:`calendar`'s "
":ref:`command-line <calendar-cli>` text output. This can be controlled by "
":ref:`environment variables <using-on-controlling-color>`. (Contributed by "
"Hugo van Kemenade in :gh:`128317`.)"
msgstr ""
"默认情况下，:mod:`calendar` 模块的 :ref:`命令行 <calendar-cli>` 文本输出会以彩色高亮显示当日日期，该功能可通过 "
":ref:`环境变量 <using-on-controlling-color>` 控制。（由 Hugo van Kemenade 在 "
":gh:`128317` 中贡献。）"

#: ../../whatsnew/3.14.rst:1322
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.14.rst:1326
msgid ""
"Add :class:`~concurrent.futures.InterpreterPoolExecutor`, which exposes "
"\"subinterpreters\" (multiple Python interpreters in the same process) to "
"Python code.  This is separate from the proposed API in :pep:`734`. "
"(Contributed by Eric Snow in :gh:`124548`.)"
msgstr ""
"新增 :class:`~concurrent.futures.InterpreterPoolExecutor` "
"类，该功能向Python代码暴露\"子解释器\"能力（同一进程中的多个Python解释器）。此实现与 :pep:`734` 提案的API相互独立。（由 "
"Eric Snow 在 :gh:`124548` 中贡献。）"

#: ../../whatsnew/3.14.rst:1334
msgid ""
"The default :class:`~concurrent.futures.ProcessPoolExecutor` :ref:`start "
"method <multiprocessing-start-methods>` changed from :ref:`fork "
"<multiprocessing-start-method-fork>` to :ref:`forkserver <multiprocessing-"
"start-method-forkserver>` on platforms other than macOS and Windows where it"
" was already :ref:`spawn <multiprocessing-start-method-spawn>`."
msgstr ""
"默认的 :class:`~concurrent.futures.ProcessPoolExecutor` 的 :ref:`启动方法 "
"<multiprocessing-start-methods>` 在非 macOS 和 Windows 平台上已从 :ref:`fork "
"<multiprocessing-start-method-fork>` 变更为 :ref:`forkserver <multiprocessing-"
"start-method-forkserver>`，在 macOS 和 Windows 平台上仍保持原有的 :ref:`spawn "
"<multiprocessing-start-method-spawn>` 方式。"

#: ../../whatsnew/3.14.rst:1340
msgid ""
"If the threading incompatible *fork* method is required, you must explicitly"
" request it by supplying a multiprocessing context *mp_context* to "
":class:`~concurrent.futures.ProcessPoolExecutor`."
msgstr ""
"如需使用与线程不兼容的 *fork* 启动方法，必须通过向 "
":class:`~concurrent.futures.ProcessPoolExecutor` 提供 *mp_context* "
"多进程上下文参数来显式指定。"

#: ../../whatsnew/3.14.rst:1344 ../../whatsnew/3.14.rst:1774
msgid ""
"See :ref:`forkserver restrictions <multiprocessing-programming-forkserver>` "
"for information and differences with the *fork* method and how this change "
"may affect existing code with mutable global shared variables and/or shared "
"objects that can not be automatically :mod:`pickled <pickle>`."
msgstr ""
"请参阅 :ref:`forkserver 限制说明 <multiprocessing-programming-forkserver>` 了解与 "
"*fork* 方法的差异信息，以及此项变更对存在以下情况的现有代码可能产生的影响：(1) 使用可变全局共享变量 (2) 包含无法被 "
":mod:`pickle <pickle>` 自动序列化的共享对象。"

#: ../../whatsnew/3.14.rst:1349 ../../whatsnew/3.14.rst:1779
msgid "(Contributed by Gregory P. Smith in :gh:`84559`.)"
msgstr "（由 Gregory P. Smith 在 :gh:`84559` 中贡献）"

#: ../../whatsnew/3.14.rst:1351
msgid ""
"Add :meth:`concurrent.futures.ProcessPoolExecutor.terminate_workers` and "
":meth:`concurrent.futures.ProcessPoolExecutor.kill_workers` as ways to "
"terminate or kill all living worker processes in the given pool. "
"(Contributed by Charles Machalow in :gh:`130849`.)"
msgstr ""
"新增 :meth:`concurrent.futures.ProcessPoolExecutor.terminate_workers` 和 "
":meth:`concurrent.futures.ProcessPoolExecutor.kill_workers` "
"方法，用于终止或强制终止给定进程池中的所有存活工作进程。（由 Charles Machalow 在 :gh:`130849` 中贡献。）"

#: ../../whatsnew/3.14.rst:1356
msgid ""
"Add the optional ``buffersize`` parameter to "
":meth:`concurrent.futures.Executor.map` to limit the number of submitted "
"tasks whose results have not yet been yielded. If the buffer is full, "
"iteration over the *iterables* pauses until a result is yielded from the "
"buffer. (Contributed by Enzo Bonnal and Josh Rosenberg in :gh:`74028`.)"
msgstr ""
"为 :meth:`concurrent.futures.Executor.map` 新增可选形参 "
"``buffersize``，用于限制已提交但尚未产出结果的任务数量。当缓冲区满时，对 *iterables* 的迭代将暂停，直至缓冲区产出结果。（由 "
"Enzo Bonnal 和 Josh Rosenberg 在 :gh:`74028` 中贡献。）"

#: ../../whatsnew/3.14.rst:1364
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.14.rst:1366
msgid ""
"Security fix: will no longer write config files it cannot read. Attempting "
"to :meth:`configparser.ConfigParser.write` keys containing delimiters or "
"beginning with the section header pattern will raise a "
":class:`configparser.InvalidWriteError`. (Contributed by Jacob Lincoln in "
":gh:`129270`.)"
msgstr ""
"安全修复：不再写入无法读取的配置文件。尝试使用 :meth:`configparser.ConfigParser.write` "
"写入包含定界符或以节头模式开头的键时，将触发 :class:`configparser.InvalidWriteError`。（由 Jacob "
"Lincoln 在 :gh:`129270` 中贡献。）"

#: ../../whatsnew/3.14.rst:1373
msgid "contextvars"
msgstr "contextvars"

#: ../../whatsnew/3.14.rst:1375
msgid ""
"Support context manager protocol by :class:`contextvars.Token`. (Contributed"
" by Andrew Svetlov in :gh:`129889`.)"
msgstr ""
":class:`contextvars.Token` 现已支持上下文管理器协议。（由 Andrew Svetlov 在 :gh:`129889` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1380
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.14.rst:1382
msgid ""
"The layout of :ref:`bit fields <ctypes-bit-fields-in-structures-unions>` in "
":class:`~ctypes.Structure` and :class:`~ctypes.Union` now matches platform "
"defaults (GCC/Clang or MSVC) more closely. In particular, fields no longer "
"overlap. (Contributed by Matthias Görgens in :gh:`97702`.)"
msgstr ""
":class:`~ctypes.Structure` 和 :class:`~ctypes.Union` 中的 :ref:`位字段 <ctypes-"
"bit-fields-in-structures-unions>` 布局现已更紧密匹配平台默认行为（GCC/Clang 或 "
"MSVC），特别值得注意的是字段间不再出现重叠现象。（由 Matthias Görgens 在 :gh:`97702` 中贡献。）"

#: ../../whatsnew/3.14.rst:1388
msgid ""
"The :attr:`.Structure._layout_` class attribute can now be set to help match"
" a non-default ABI. (Contributed by Petr Viktorin in :gh:`97702`.)"
msgstr ""
"现在可通过设置 :attr:`.Structure._layout_` 类属性来匹配非默认ABI。（由 Petr Viktorin 在 "
":gh:`97702` 中贡献。）"

#: ../../whatsnew/3.14.rst:1392
msgid ""
"The class of :class:`~ctypes.Structure`/:class:`~ctypes.Union` field "
"descriptors is now available as :class:`~ctypes.CField`, and has new "
"attributes to aid debugging and introspection. (Contributed by Petr Viktorin"
" in :gh:`128715`.)"
msgstr ""
":class:`~ctypes.Structure`/:class:`~ctypes.Union` 的字段描述符类现以 "
":class:`~ctypes.CField` 形式提供，并新增了辅助调试和内省的属性。（由 Petr Viktorin 在 :gh:`128715` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1397
msgid ""
"On Windows, the :exc:`~ctypes.COMError` exception is now public. "
"(Contributed by Jun Komoda in :gh:`126686`.)"
msgstr ""
"在Windows平台上，:exc:`~ctypes.COMError` 异常现已公开。（由 Jun Komoda 在 :gh:`126686` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1400
msgid ""
"On Windows, the :func:`~ctypes.CopyComPointer` function is now public. "
"(Contributed by Jun Komoda in :gh:`127275`.)"
msgstr ""
"在Windows平台上，:func:`~ctypes.CopyComPointer` 函数现已公开。（由 Jun Komoda 在 "
":gh:`127275` 中贡献。）"

#: ../../whatsnew/3.14.rst:1403
msgid ""
":func:`ctypes.memoryview_at` now exists to create a :class:`memoryview` "
"object that refers to the supplied pointer and length. This works like "
":func:`ctypes.string_at` except it avoids a buffer copy, and is typically "
"useful when implementing pure Python callback functions that are passed "
"dynamically-sized buffers. (Contributed by Rian Hunter in :gh:`112018`.)"
msgstr ""
"新增 :func:`ctypes.memoryview_at` 函数，用于创建引用指定指针和长度的 :class:`memoryview` "
"对象。该函数与 :func:`ctypes.string_at` "
"类似，但避免了缓冲区复制，通常在实现接收动态大小缓冲区的纯Python回调函数时特别有用。（由 Rian Hunter 在 :gh:`112018` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1410
msgid ""
"Complex types, :class:`~ctypes.c_float_complex`, "
":class:`~ctypes.c_double_complex` and :class:`~ctypes.c_longdouble_complex`,"
" are now available if both the compiler and the ``libffi`` library support "
"complex C types. (Contributed by Sergey B Kirpichev in :gh:`61103`.)"
msgstr ""
"复数类型 :class:`~ctypes.c_float_complex`、:class:`~ctypes.c_double_complex` 和 "
":class:`~ctypes.c_longdouble_complex` 现已在编译器和 ``libffi`` 库均支持C语言复数类型时可用。（由 "
"Sergey B Kirpichev 在 :gh:`61103` 中贡献。）"

#: ../../whatsnew/3.14.rst:1416
msgid ""
"Add :func:`ctypes.util.dllist` for listing the shared libraries loaded by "
"the current process. (Contributed by Brian Ward in :gh:`119349`.)"
msgstr ""
"新增 :func:`ctypes.util.dllist` 函数，用于列出当前进程已加载的共享库。（由 Brian Ward 在 "
":gh:`119349` 中贡献。）"

#: ../../whatsnew/3.14.rst:1420
msgid ""
"Move :func:`ctypes.POINTER` types cache from a global internal cache "
"(``_pointer_type_cache``) to the :attr:`ctypes._CData.__pointer_type__` "
"attribute of the corresponding :mod:`ctypes` types. This will stop the cache"
" from growing without limits in some situations. (Contributed by Sergey "
"Miryanov in :gh:`100926`.)"
msgstr ""
"将 :func:`ctypes.POINTER` 类型缓存从全局内部缓存（``_pointer_type_cache``）迁移至对应 "
":mod:`ctypes` 类型的 :attr:`ctypes._CData.__pointer_type__` "
"属性，此举可防止某些情况下缓存无限增长。（由 Sergey Miryanov 在 :gh:`100926` 中贡献。）"

#: ../../whatsnew/3.14.rst:1426
msgid ""
"The :class:`ctypes.py_object` type now supports subscription, making it a "
":term:`generic type`. (Contributed by Brian Schubert in :gh:`132168`.)"
msgstr ""
":class:`ctypes.py_object` 类型现已支持下标，使其成为 :term:`generic type`。（由 Brian "
"Schubert 在 :gh:`132168` 中贡献。）"

#: ../../whatsnew/3.14.rst:1430
msgid ""
":mod:`ctypes` now supports :term:`free-threading builds <free threading>`. "
"(Contributed by Kumar Aditya and Peter Bierma in :gh:`127945`.)"
msgstr ""
":mod:`ctypes` 现已支持 :term:`自由线程构建 <free threading>`。（由 Kumar Aditya 和 Peter "
"Bierma 在 :gh:`127945` 中贡献。）"

#: ../../whatsnew/3.14.rst:1434
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.14.rst:1436
msgid ""
"Add the :func:`~curses.assume_default_colors` function, a refinement of the "
":func:`~curses.use_default_colors` function which allows to change the color"
" pair ``0``. (Contributed by Serhiy Storchaka in :gh:`133139`.)"
msgstr ""
"新增 :func:`~curses.assume_default_colors` 函数，作为对 "
":func:`~curses.use_default_colors` 的改进，允许修改颜色对 ``0`` 的默认值。（由 Serhiy "
"Storchaka 在 :gh:`133139` 中贡献。）"

#: ../../whatsnew/3.14.rst:1442
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.14.rst:1444
msgid ""
"Add :meth:`datetime.time.strptime` and :meth:`datetime.date.strptime`. "
"(Contributed by Wannes Boeykens in :gh:`41431`.)"
msgstr ""
"新增 :meth:`datetime.time.strptime` 和 :meth:`datetime.date.strptime` 方法。（由 "
"Wannes Boeykens 在 :gh:`41431` 中贡献。）"

#: ../../whatsnew/3.14.rst:1448
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.14.rst:1450
msgid ""
"Add alternative :class:`~decimal.Decimal` constructor "
":meth:`Decimal.from_number() <decimal.Decimal.from_number>`. (Contributed by"
" Serhiy Storchaka in :gh:`121798`.)"
msgstr ""
"新增 :class:`~decimal.Decimal` 替代性构造函数 :meth:`Decimal.from_number() "
"<decimal.Decimal.from_number>`。（由 Serhiy Storchaka 在 :gh:`121798` 中贡献。）"

#: ../../whatsnew/3.14.rst:1454
msgid ""
"Expose :func:`decimal.IEEEContext` to support creation of contexts "
"corresponding to the IEEE 754 (2008) decimal interchange formats. "
"(Contributed by Sergey B Kirpichev in :gh:`53032`.)"
msgstr ""
"公开 :func:`decimal.IEEEContext` 函数以支持创建符合 IEEE 754 (2008) 十进制交换格式的上下文。（由 "
"Sergey B Kirpichev 在 :gh:`53032` 中贡献。）"

#: ../../whatsnew/3.14.rst:1459 ../../whatsnew/3.14.rst:2294
msgid "difflib"
msgstr "difflib"

#: ../../whatsnew/3.14.rst:1461
msgid ""
"Comparison pages with highlighted changes generated by the "
":class:`difflib.HtmlDiff` class now support dark mode. (Contributed by "
"Jiahao Li in :gh:`129939`.)"
msgstr ""
"由 :class:`difflib.HtmlDiff` 类生成的高亮显示更改的比较页面现在支持暗色模式。 （由李佳昊在 :gh:`129939` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1466
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.14.rst:1468
msgid ""
"Add support for rendering full source location information of "
":class:`instructions <dis.Instruction>`, rather than only the line number. "
"This feature is added to the following interfaces via the *show_positions* "
"keyword argument:"
msgstr ""
"新增对 :class:`指令 <dis.Instruction>` 完整源码位置信息（而非仅行号）的渲染支持，该特性通过 "
"*show_positions* 关键字参数添加到以下接口："

#: ../../whatsnew/3.14.rst:1473
msgid ":class:`dis.Bytecode`"
msgstr ":class:`dis.Bytecode`"

#: ../../whatsnew/3.14.rst:1474
msgid ":func:`dis.dis`"
msgstr ":func:`dis.dis`"

#: ../../whatsnew/3.14.rst:1475
msgid ":func:`dis.distb`"
msgstr ":func:`dis.distb`"

#: ../../whatsnew/3.14.rst:1476
msgid ":func:`dis.disassemble`"
msgstr ":func:`dis.disassemble`"

#: ../../whatsnew/3.14.rst:1478
msgid ""
"This feature is also exposed via :option:`dis --show-positions`. "
"(Contributed by Bénédikt Tran in :gh:`123165`.)"
msgstr ""
"该特性同时通过 :option:`dis --show-positions` 命令行选项提供。（由 Bénédikt Tran 在 "
":gh:`123165` 中贡献。）"

#: ../../whatsnew/3.14.rst:1481
msgid ""
"Add the :option:`dis --specialized` command-line option to show specialized "
"bytecode. (Contributed by Bénédikt Tran in :gh:`127413`.)"
msgstr ""
"新增 :option:`dis --specialized` 命令行选项，用于显示特化字节码。（由 Bénédikt Tran 在 "
":gh:`127413` 中贡献。）"

#: ../../whatsnew/3.14.rst:1487
msgid "errno"
msgstr "errno"

#: ../../whatsnew/3.14.rst:1489
msgid ""
"Add :data:`errno.EHWPOISON` error code. (Contributed by James Roy in "
":gh:`126585`.)"
msgstr "新增 :data:`errno.EHWPOISON` 错误码。（由 James Roy 在 :gh:`126585` 中贡献。）"

#: ../../whatsnew/3.14.rst:1494
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.14.rst:1496
msgid ""
"Add support for printing the C stack trace on systems that :ref:`support it "
"<c-stack-compatibility>` via :func:`faulthandler.dump_c_stack` or via the "
"*c_stack* argument in :func:`faulthandler.enable`. (Contributed by Peter "
"Bierma in :gh:`127604`.)"
msgstr ""
"添加对在 :ref:`支持此功能的系统 <c-stack-compatibility>` 上打印 C 栈回溯的支持，可通过 "
":func:`faulthandler.dump_c_stack` 或 :func:`faulthandler.enable` 中的 *c_stack*"
" 参数实现。（由 Peter Bierma 在 :gh:`127604` 中贡献。）"

#: ../../whatsnew/3.14.rst:1503
msgid "fnmatch"
msgstr "fnmatch"

#: ../../whatsnew/3.14.rst:1505
msgid ""
"Added :func:`fnmatch.filterfalse` for excluding names matching a pattern. "
"(Contributed by Bénédikt Tran in :gh:`74598`.)"
msgstr ""
"新增 :func:`fnmatch.filterfalse` 函数，用于排除符合模式匹配的名称。（由 Bénédikt Tran 在 "
":gh:`74598` 中贡献。）"

#: ../../whatsnew/3.14.rst:1510
msgid "fractions"
msgstr "fractions"

#: ../../whatsnew/3.14.rst:1512
msgid ""
"Add support for converting any objects that have the "
":meth:`!as_integer_ratio` method to a :class:`~fractions.Fraction`. "
"(Contributed by Serhiy Storchaka in :gh:`82017`.)"
msgstr ""
"新增对实现了 :meth:`!as_integer_ratio` 方法的任意对象转换为 :class:`~fractions.Fraction` "
"的支持。（由 Serhiy Storchaka 在 :gh:`82017` 中贡献。）"

#: ../../whatsnew/3.14.rst:1516
msgid ""
"Add alternative :class:`~fractions.Fraction` constructor "
":meth:`Fraction.from_number() <fractions.Fraction.from_number>`. "
"(Contributed by Serhiy Storchaka in :gh:`121797`.)"
msgstr ""
"新增 :class:`~fractions.Fraction` 替代性构造器 :meth:`Fraction.from_number() "
"<fractions.Fraction.from_number>`。（由 Serhiy Storchaka 在 :gh:`121797` 中贡献。）"

#: ../../whatsnew/3.14.rst:1522
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.14.rst:1524
msgid ""
"Add support to :func:`functools.partial` and :func:`functools.partialmethod`"
" for :data:`functools.Placeholder` sentinels to reserve a place for "
"positional arguments. (Contributed by Dominykas Grigonis in :gh:`119127`.)"
msgstr ""
"新增对 :func:`functools.partial` 和 :func:`functools.partialmethod` 支持 "
":data:`functools.Placeholder` 哨兵的功能，用于为位置参数预留位置。（由 Dominykas Grigonis 在 "
":gh:`119127` 中贡献。）"

#: ../../whatsnew/3.14.rst:1529
msgid ""
"Allow the *initial* parameter of :func:`functools.reduce` to be passed as a "
"keyword argument. (Contributed by Sayandip Dutta in :gh:`125916`.)"
msgstr ""
"允许将 :func:`functools.reduce` 的 *initial* 形参作为关键字参数传递。（由 Sayandip Dutta 在 "
":gh:`125916` 中贡献。）"

#: ../../whatsnew/3.14.rst:1535
msgid "getopt"
msgstr "getopt"

#: ../../whatsnew/3.14.rst:1537
msgid ""
"Add support for options with optional arguments. (Contributed by Serhiy "
"Storchaka in :gh:`126374`.)"
msgstr "新增对可选参数选项的支持。（由 Serhiy Storchaka 在 :gh:`126374` 中贡献。）"

#: ../../whatsnew/3.14.rst:1540
msgid ""
"Add support for returning intermixed options and non-option arguments in "
"order. (Contributed by Serhiy Storchaka in :gh:`126390`.)"
msgstr "新增对按顺序返回混合选项和非选项参数的支持。（由 Serhiy Storchaka 在 :gh:`126390` 中贡献。）"

#: ../../whatsnew/3.14.rst:1545
msgid "getpass"
msgstr "getpass"

#: ../../whatsnew/3.14.rst:1547
msgid ""
"Support keyboard feedback by :func:`getpass.getpass` via the keyword-only "
"optional argument ``echo_char``. Placeholder characters are rendered "
"whenever a character is entered, and removed when a character is deleted. "
"(Contributed by Semyon Moroz in :gh:`77065`.)"
msgstr ""
"新增 :func:`getpass.getpass` 通过仅限关键字可选参数 ``echo_char`` "
"提供键盘反馈的功能。每当输入字符时会显示占位符，删除字符时则会移除该占位符。（由 Semyon Moroz 在 :gh:`77065` 中贡献。）"

#: ../../whatsnew/3.14.rst:1554
msgid "graphlib"
msgstr "graphlib"

#: ../../whatsnew/3.14.rst:1556
msgid ""
"Allow :meth:`graphlib.TopologicalSorter.prepare` to be called more than once"
" as long as sorting has not started. (Contributed by Daniel Pope in "
":gh:`130914`.)"
msgstr ""
"允许在排序尚未开始的情况下多次调用 :meth:`graphlib.TopologicalSorter.prepare`。（由 Daniel Pope "
"在 :gh:`130914` 中贡献。）"

#: ../../whatsnew/3.14.rst:1562
msgid "heapq"
msgstr "heapq"

#: ../../whatsnew/3.14.rst:1564
msgid "Add functions for working with max-heaps:"
msgstr "添加用于处理最大堆的函数："

#: ../../whatsnew/3.14.rst:1566
msgid ":func:`heapq.heapify_max`,"
msgstr ":func:`heapq.heapify_max`,"

#: ../../whatsnew/3.14.rst:1567
msgid ":func:`heapq.heappush_max`,"
msgstr ":func:`heapq.heappush_max`,"

#: ../../whatsnew/3.14.rst:1568
msgid ":func:`heapq.heappop_max`,"
msgstr ":func:`heapq.heappop_max`,"

#: ../../whatsnew/3.14.rst:1569
msgid ":func:`heapq.heapreplace_max`"
msgstr ":func:`heapq.heapreplace_max`"

#: ../../whatsnew/3.14.rst:1570
msgid ":func:`heapq.heappushpop_max`"
msgstr ":func:`heapq.heappushpop_max`"

#: ../../whatsnew/3.14.rst:1574
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.14.rst:1576
msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified"
" code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"(Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""
"新增基于 `HACL* <https://github.com/hacl-star/hacl-star/>`__ 项目形式化验证代码的 HMAC "
"(:rfc:`2104`) 内置实现。（由 Bénédikt Tran 在 :gh:`99108` 中贡献。）"

#: ../../whatsnew/3.14.rst:1582
msgid "http"
msgstr "http"

#: ../../whatsnew/3.14.rst:1584
msgid ""
"Directory lists and error pages generated by the :mod:`http.server` module "
"allow the browser to apply its default dark mode. (Contributed by Yorik "
"Hansen in :gh:`123430`.)"
msgstr ""
"由 :mod:`http.server` 模块生成的目录列表和错误页面允许浏览器应用其默认暗模式。（由 Yorik Hansen 在 "
":gh:`123430` 中贡献。）"

#: ../../whatsnew/3.14.rst:1588
msgid ""
"The :mod:`http.server` module now supports serving over HTTPS using the "
":class:`http.server.HTTPSServer` class. This functionality is exposed by the"
" command-line interface (``python -m http.server``) through the following "
"options:"
msgstr ""
":mod:`http.server` 模块现在支持使用 :class:`http.server.HTTPSServer` 类通过 HTTPS "
"提供服务。此功能通过命令行界面 (``python -m http.server``) 通过以下选项公开："

#: ../../whatsnew/3.14.rst:1593
msgid "``--tls-cert <path>``: Path to the TLS certificate file."
msgstr "``--tls-cert <path>``: TLS 证书文件的路径。"

#: ../../whatsnew/3.14.rst:1594
msgid "``--tls-key <path>``: Optional path to the private key file."
msgstr "``--tls-key <path>``: 私钥文件的可选路径。"

#: ../../whatsnew/3.14.rst:1595
msgid ""
"``--tls-password-file <path>``: Optional path to the password file for the "
"private key."
msgstr "``--tls-password-file <path>``: 私钥密码文件的可选路径。"

#: ../../whatsnew/3.14.rst:1597
msgid "(Contributed by Semyon Moroz in :gh:`85162`.)"
msgstr "（由 Semyon Moroz 在 :gh:`85162` 中贡献。）"

#: ../../whatsnew/3.14.rst:1601
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.14.rst:1603
msgid ""
"Add :meth:`IMAP4.idle() <imaplib.IMAP4.idle>`, implementing the IMAP4 "
"``IDLE`` command as defined in :rfc:`2177`. (Contributed by Forest in "
":gh:`55454`.)"
msgstr ""
"添加 :meth:`IMAP4.idle() <imaplib.IMAP4.idle>`，实现了 :rfc:`2177` 中定义的 IMAP4 "
"``IDLE`` 命令。（由 Forest 在 :gh:`55454` 中贡献。）"

#: ../../whatsnew/3.14.rst:1609
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.14.rst:1611
msgid ""
":func:`inspect.signature` takes a new argument *annotation_format* to "
"control the :class:`annotationlib.Format` used for representing annotations."
" (Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""
":func:`inspect.signature` 新增了一个参数 *annotation_format*，用于控制表示注解所使用的 "
":class:`annotationlib.Format`。（由 Jelle Zijlstra 在 :gh:`101552` 中贡献。）"

#: ../../whatsnew/3.14.rst:1615
msgid ""
":meth:`inspect.Signature.format` takes a new argument *unquote_annotations*."
" If true, string :term:`annotations <annotation>` are displayed without "
"surrounding quotes. (Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""
":meth:`inspect.Signature.format` 新增了一个参数 *unquote_annotations*。如果该参数为 "
"True，字符串 :term:`注解 <annotation>` 将不带引号显示。（由 Jelle Zijlstra 在 :gh:`101552` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1619
msgid ""
"Add function :func:`inspect.ispackage` to determine whether an object is a "
":term:`package` or not. (Contributed by Zhikang Yan in :gh:`125634`.)"
msgstr ""
"新增 :func:`inspect.ispackage` 函数，用于判断对象是否为 :term:`package`。 （由 Zhikang Yan 在 "
":gh:`125634` 中贡献。）"

#: ../../whatsnew/3.14.rst:1625 ../../whatsnew/3.14.rst:2336
msgid "io"
msgstr "io"

#: ../../whatsnew/3.14.rst:1627
msgid ""
"Reading text from a non-blocking stream with ``read`` may now raise a "
":exc:`BlockingIOError` if the operation cannot immediately return bytes. "
"(Contributed by Giovanni Siragusa in :gh:`109523`.)"
msgstr ""
"使用 ``read`` 从非阻塞流读取文本时，如果操作无法立即返回字节，现在可能会引发 :exc:`BlockingIOError`。（由 "
"Giovanni Siragusa 在 :gh:`109523` 中贡献。）"

#: ../../whatsnew/3.14.rst:1631
msgid ""
"Add protocols :class:`io.Reader` and :class:`io.Writer` as simpler "
"alternatives to the pseudo-protocols :class:`typing.IO`, "
":class:`typing.TextIO`, and :class:`typing.BinaryIO`. (Contributed by "
"Sebastian Rittau in :gh:`127648`.)"
msgstr ""
"添加协议 :class:`io.Reader` 和 :class:`io.Writer`，作为伪协议 "
":class:`typing.IO`、:class:`typing.TextIO` 和 :class:`typing.BinaryIO` "
"的更简单替代。（由 Sebastian Rittau 在 :gh:`127648` 中贡献。）"

#: ../../whatsnew/3.14.rst:1638
msgid "json"
msgstr "json"

#: ../../whatsnew/3.14.rst:1640
msgid ""
"Add notes for JSON serialization errors that allow to identify the source of"
" the error. (Contributed by Serhiy Storchaka in :gh:`122163`.)"
msgstr "添加关于 JSON 序列化错误的说明，以便识别错误来源。（由 Serhiy Storchaka 在 :gh:`122163` 中贡献。）"

#: ../../whatsnew/3.14.rst:1644
msgid ""
"Enable the :mod:`json` module to work as a script using the :option:`-m` "
"switch: :program:`python -m json`. See the :ref:`JSON command-line interface"
" <json-commandline>` documentation. (Contributed by Trey Hunner in "
":gh:`122873`.)"
msgstr ""
"使 :mod:`json` 模块能够使用 :option:`-m` 开关作为脚本运行：:program:`python -m json`。请参阅 "
":ref:`JSON 命令行界面 <json-commandline>` 文档。（由 Trey Hunner 在 :gh:`122873` 中贡献。）"

#: ../../whatsnew/3.14.rst:1651
msgid ""
"By default, the output of the :ref:`JSON command-line interface <json-"
"commandline>` is highlighted in color. This can be controlled by "
":ref:`environment variables <using-on-controlling-color>`. (Contributed by "
"Tomas Roun in :gh:`131952`.)"
msgstr ""
"默认情况下，:ref:`JSON 命令行界面 <json-commandline>` 的输出会以彩色突出显示。这可以通过 :ref:`环境变量 "
"<using-on-controlling-color>` 进行控制。（由 Tomas Roun 在 :gh:`131952` 中贡献。）"

#: ../../whatsnew/3.14.rst:1658
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.14.rst:1660
msgid ""
":func:`linecache.getline` can retrieve source code for frozen modules. "
"(Contributed by Tian Gao in :gh:`131638`.)"
msgstr ""
":func:`linecache.getline` 可以检索冻结模块的源代码。（由 Tian Gao 在 :gh:`131638` 中贡献。）"

#: ../../whatsnew/3.14.rst:1665
msgid "logging.handlers"
msgstr "logging.handlers"

#: ../../whatsnew/3.14.rst:1667
msgid ""
":class:`logging.handlers.QueueListener` now implements the context manager "
"protocol, allowing it to be used in a :keyword:`with` statement. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""
":class:`logging.handlers.QueueListener` 现在实现了上下文管理器协议，允许在 :keyword:`with` "
"语句中使用它。（由 Charles Machalow 在 :gh:`132106` 中贡献。）"

#: ../../whatsnew/3.14.rst:1671
msgid ""
":meth:`QueueListener.start <logging.handlers.QueueListener.start>` now "
"raises a :exc:`RuntimeError` if the listener is already started. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""
":meth:`QueueListener.start <logging.handlers.QueueListener.start>` "
"现在如果监听器已启动，会引发 :exc:`RuntimeError`。（由 Charles Machalow 在 :gh:`132106` 中贡献。）"

#: ../../whatsnew/3.14.rst:1677
msgid "math"
msgstr "math"

#: ../../whatsnew/3.14.rst:1679
msgid ""
"Added more detailed error messages for domain errors in the module. "
"(Contributed by Charlie Zhao and Sergey B Kirpichev in :gh:`101410`.)"
msgstr ""
"为模块中的域错误添加了更详细的错误消息。（由 Charlie Zhao 和 Sergey B Kirpichev 在 :gh:`101410` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1684
msgid "mimetypes"
msgstr "mimetypes"

#: ../../whatsnew/3.14.rst:1686
msgid ""
"Document the command-line for :mod:`mimetypes`. It now exits with ``1`` on "
"failure instead of ``0`` and ``2`` on incorrect command-line parameters "
"instead of ``1``. Also, errors are printed to stderr instead of stdout and "
"their text is made tighter. (Contributed by Oleg Iarygin and Hugo van "
"Kemenade in :gh:`93096`.)"
msgstr ""
"完善 :mod:`mimetypes` 模块的命令行文档。现在，在失败时返回码由 ``0`` 改为 ``1``，在命令行形参错误时返回码由 ``1`` "
"改为 ``2``。此外，错误会输出到 stderr 而非 stdout，且错误文本更为简洁。（由 Oleg Iarygin 和 Hugo van "
"Kemenade 在 :gh:`93096` 中贡献。）"

#: ../../whatsnew/3.14.rst:1693
msgid "Add MS and :rfc:`8081` MIME types for fonts:"
msgstr "添加用于字体的 MS 和 :rfc:`8081` MIME 类型："

#: ../../whatsnew/3.14.rst:1695
msgid "Embedded OpenType: ``application/vnd.ms-fontobject``"
msgstr "嵌入式 OpenType： ``application/vnd.ms-fontobject``"

#: ../../whatsnew/3.14.rst:1696
msgid "OpenType Layout (OTF) ``font/otf``"
msgstr "OpenType 布局(OTF) ``font/otf``"

#: ../../whatsnew/3.14.rst:1697
msgid "TrueType: ``font/ttf``"
msgstr "TrueType: ``font/ttf``"

#: ../../whatsnew/3.14.rst:1698
msgid "WOFF 1.0 ``font/woff``"
msgstr "WOFF 1.0 ``font/woff``"

#: ../../whatsnew/3.14.rst:1699
msgid "WOFF 2.0 ``font/woff2``"
msgstr "WOFF 2.0 ``font/woff2``"

#: ../../whatsnew/3.14.rst:1701
msgid "(Contributed by Sahil Prajapati and Hugo van Kemenade in :gh:`84852`.)"
msgstr "（由 Sahil Prajapati 和 Hugo van Kemenade 在 :gh:`84852` 中贡献。）"

#: ../../whatsnew/3.14.rst:1703
msgid ""
"Add :rfc:`9559` MIME types for Matroska audiovisual data container "
"structures, containing:"
msgstr "添加用于 Matroska 视听数据容器结构的 :rfc:`9559` MIME 类型，包括："

#: ../../whatsnew/3.14.rst:1706
msgid "audio with no video: ``audio/matroska`` (``.mka``)"
msgstr "仅有音频，无视频： ``audio/matroska`` (``.mka``)"

#: ../../whatsnew/3.14.rst:1707
msgid "video: ``video/matroska`` (``.mkv``)"
msgstr "视频：``video/matroska`` (``.mkv``)"

#: ../../whatsnew/3.14.rst:1708
msgid "stereoscopic video: ``video/matroska-3d`` (``.mk3d``)"
msgstr "立体视频: ``video/matroska-3d`` (``.mk3d``)"

#: ../../whatsnew/3.14.rst:1710
msgid "(Contributed by Hugo van Kemenade in :gh:`89416`.)"
msgstr "（由 Hugo van Kemenade 在 :gh:`89416` 中贡献。）"

#: ../../whatsnew/3.14.rst:1712
msgid "Add MIME types for images with RFCs:"
msgstr "新增符合RFC标准的图像MIME类型："

#: ../../whatsnew/3.14.rst:1714
msgid ":rfc:`1494`: CCITT Group 3 (``.g3``)"
msgstr ":rfc:`1494`: CCITT Group 3 (``.g3``)"

#: ../../whatsnew/3.14.rst:1715
msgid ":rfc:`3362`: Real-time Facsimile, T.38 (``.t38``)"
msgstr ":rfc:`3362`: Real-time Facsimile, T.38 (``.t38``)"

#: ../../whatsnew/3.14.rst:1716
msgid ""
":rfc:`3745`: JPEG 2000 (``.jp2``), extension (``.jpx``) and compound "
"(``.jpm``)"
msgstr ":rfc:`3745`: JPEG 2000 (``.jp2``)、扩展格式 (``.jpx``) 和复合格式 (``.jpm``)"

#: ../../whatsnew/3.14.rst:1717
msgid ":rfc:`3950`: Tag Image File Format Fax eXtended, TIFF-FX (``.tfx``)"
msgstr ":rfc:`3950`: 标签图像文件格式传真扩展，TIFF-FX (``.tfx``)"

#: ../../whatsnew/3.14.rst:1718
msgid ":rfc:`4047`: Flexible Image Transport System (``.fits``)"
msgstr ":rfc:`4047`: 灵活图像传输系统 (``.fits``)"

#: ../../whatsnew/3.14.rst:1719
msgid ""
":rfc:`7903`: Enhanced Metafile (``.emf``) and Windows Metafile (``.wmf``)"
msgstr ":rfc:`7903`: 增强型图元文件 (``.emf``) 和 Windows 图元文件 (``.wmf``)"

#: ../../whatsnew/3.14.rst:1721
msgid "(Contributed by Hugo van Kemenade in :gh:`85957`.)"
msgstr "（由 Hugo van Kemenade 在 :gh:`85957` 中贡献。）"

#: ../../whatsnew/3.14.rst:1723
msgid "More MIME type changes:"
msgstr "更多 MIME 类型更改："

#: ../../whatsnew/3.14.rst:1725
msgid ""
":rfc:`2361`: Change type for ``.avi`` to ``video/vnd.avi`` and for ``.wav`` "
"to ``audio/vnd.wave``"
msgstr ""
":rfc:`2361`: 将 ``.avi`` 的类型更改为 ``video/vnd.avi``，将 ``.wav`` 的类型更改为 "
"``audio/vnd.wave``"

#: ../../whatsnew/3.14.rst:1727
msgid ":rfc:`4337`: Add MPEG-4 ``audio/mp4`` (``.m4a``)"
msgstr ":rfc:`4337`：添加 MPEG-4 ``audio/mp4`` (``.m4a``)"

#: ../../whatsnew/3.14.rst:1728
msgid ":rfc:`5334`: Add Ogg media (``.oga``, ``.ogg`` and ``.ogx``)"
msgstr ":rfc:`5334`：添加 Ogg 媒体（``.oga``，``.ogg`` 和 ``.ogx``）"

#: ../../whatsnew/3.14.rst:1729
msgid ":rfc:`6713`: Add gzip ``application/gzip`` (``.gz``)"
msgstr ":rfc:`6713`：添加 ``application/gzip`` (``.gz``)"

#: ../../whatsnew/3.14.rst:1730
msgid ":rfc:`9639`: Add FLAC ``audio/flac`` (``.flac``)"
msgstr ":rfc:`9639`: 添加 FLAC 格式的 ``audio/flac`` (``.flac``)"

#: ../../whatsnew/3.14.rst:1731
msgid "Add 7z ``application/x-7z-compressed`` (``.7z``)"
msgstr "添加 7z ``application/x-7z-compressed`` (``.7z``)"

#: ../../whatsnew/3.14.rst:1732
msgid ""
"Add Android Package ``application/vnd.android.package-archive`` (``.apk``) "
"when not strict"
msgstr ""
"非严格模式下，添加Android安装包 ``application/vnd.android.package-archive`` (``.apk``)"

#: ../../whatsnew/3.14.rst:1734
msgid "Add deb ``application/x-debian-package`` (``.deb``)"
msgstr "添加 deb ``application/x-debian-package`` (``.deb``)"

#: ../../whatsnew/3.14.rst:1735
msgid "Add glTF binary ``model/gltf-binary`` (``.glb``)"
msgstr "添加 glTF 二进制格式 ``model/gltf-binary`` (``.glb``)"

#: ../../whatsnew/3.14.rst:1736
msgid "Add glTF JSON/ASCII ``model/gltf+json`` (``.gltf``)"
msgstr "添加glTF JSON/ASCII格式 ``model/gltf+json`` (``.gltf``)"

#: ../../whatsnew/3.14.rst:1737
msgid "Add M4V ``video/x-m4v`` (``.m4v``)"
msgstr "添加 M4V ``video/x-m4v`` (``.m4v``)"

#: ../../whatsnew/3.14.rst:1738
msgid "Add PHP ``application/x-httpd-php`` (``.php``)"
msgstr "添加 PHP ``application/x-httpd-php`` (``.php``)"

#: ../../whatsnew/3.14.rst:1739
msgid "Add RAR ``application/vnd.rar`` (``.rar``)"
msgstr "添加 RAR ``application/vnd.rar`` (``.rar``)"

#: ../../whatsnew/3.14.rst:1740
msgid "Add RPM ``application/x-rpm`` (``.rpm``)"
msgstr "添加 RPM ``application/x-rpm`` (``.rpm``)"

#: ../../whatsnew/3.14.rst:1741
msgid "Add STL ``model/stl`` (``.stl``)"
msgstr "添加STL格式 ``model/stl`` (``.stl``)"

#: ../../whatsnew/3.14.rst:1742
msgid "Add Windows Media Video ``video/x-ms-wmv`` (``.wmv``)"
msgstr "添加 Windows 媒体视频 ``video/x-ms-wmv`` (``.wmv``)"

#: ../../whatsnew/3.14.rst:1743
msgid "De facto: Add WebM ``audio/webm`` (``.weba``)"
msgstr "事实上：添加WebM格式 ``audio/webm`` (``.weba``)"

#: ../../whatsnew/3.14.rst:1744
msgid ""
"`ECMA-376 <https://ecma-international.org/publications-and-"
"standards/standards/ecma-376/>`__: Add ``.docx``, ``.pptx`` and ``.xlsx`` "
"types"
msgstr ""
"`ECMA-376 <https://ecma-international.org/publications-and-"
"standards/standards/ecma-376/>`__: 添加 ``.docx``、``.pptx`` 和 ``.xlsx`` 类型"

#: ../../whatsnew/3.14.rst:1747
msgid ""
"`OASIS <https://docs.oasis-"
"open.org/office/v1.2/cs01/OpenDocument-v1.2-cs01-part1.html#Appendix_C>`__: "
"Add OpenDocument ``.odg``, ``.odp``, ``.ods`` and ``.odt`` types"
msgstr ""
"`OASIS <https://docs.oasis-"
"open.org/office/v1.2/cs01/OpenDocument-v1.2-cs01-part1.html#Appendix_C>`__: "
"添加 OpenDocument 格式的 ``.odg``、``.odp``、``.ods`` 和 ``.odt`` 类型"

#: ../../whatsnew/3.14.rst:1750
msgid ""
"`W3C <https://www.w3.org/TR/epub-33/#app-media-type>`__: Add EPUB "
"``application/epub+zip`` (``.epub``)"
msgstr ""
"`W3C <https://www.w3.org/TR/epub-33/#app-media-type>`__: 添加 EPUB 格式的 "
"``application/epub+zip`` (``.epub``)"

#: ../../whatsnew/3.14.rst:1753
msgid "(Contributed by Hugo van Kemenade in :gh:`129965`.)"
msgstr "（由 Hugo van Kemenade 在 :gh:`129965` 中贡献。）"

#: ../../whatsnew/3.14.rst:1755
msgid ""
"Add :rfc:`9512` ``application/yaml`` MIME type for YAML files (``.yaml`` and"
" ``.yml``). (Contributed by Sasha \"Nelie\" Chernykh and Hugo van Kemenade "
"in :gh:`132056`.)"
msgstr ""
"添加 :rfc:`9512` 中针对 YAML 文件（``.yaml`` 和 ``.yml``）的 ``application/yaml`` MIME "
"类型。（由 Sasha \"Nelie\" Chernykh 和 Hugo van Kemenade 在 :gh:`132056` 中贡献。）"

#: ../../whatsnew/3.14.rst:1761
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.14.rst:1765
msgid ""
"The default :ref:`start method <multiprocessing-start-methods>` changed from"
" :ref:`fork <multiprocessing-start-method-fork>` to :ref:`forkserver "
"<multiprocessing-start-method-forkserver>` on platforms other than macOS and"
" Windows where it was already :ref:`spawn <multiprocessing-start-method-"
"spawn>`."
msgstr ""
"默认的 :ref:`启动方法 <multiprocessing-start-methods>` 在 macOS 和 Windows 以外的平台上已从 "
":ref:`fork <multiprocessing-start-method-fork>` 改为 :ref:`forkserver "
"<multiprocessing-start-method-forkserver>`，而在 macOS 和 Windows 平台上，该方法原本就是 "
":ref:`spawn <multiprocessing-start-method-spawn>`。"

#: ../../whatsnew/3.14.rst:1770
msgid ""
"If the threading incompatible *fork* method is required, you must explicitly"
" request it via a context from :func:`multiprocessing.get_context` "
"(preferred) or change the default via "
":func:`multiprocessing.set_start_method`."
msgstr ""
"如果需要使用与线程不兼容的 *fork* 方法，则必须通过 :func:`multiprocessing.get_context` "
"提供的上下文显式请求该方法（推荐方式），或者通过 :func:`multiprocessing.set_start_method` 更改默认方法。"

#: ../../whatsnew/3.14.rst:1781
msgid ""
":mod:`multiprocessing`'s ``\"forkserver\"`` start method now authenticates "
"its control socket to avoid solely relying on filesystem permissions to "
"restrict what other processes could cause the forkserver to spawn workers "
"and run code. (Contributed by Gregory P. Smith for :gh:`97514`.)"
msgstr ""
":mod:`multiprocessing` 的 ``\"forkserver\"`` "
"启动方法现增加了控制套接字认证机制，不再仅依赖文件系统权限来限制其他进程可能触发的衍生工作进程及运行代码。（由 Gregory P. Smith 在 "
":gh:`97514` 中贡献。）"

#: ../../whatsnew/3.14.rst:1787
msgid ""
"The :ref:`multiprocessing proxy objects <multiprocessing-proxy_objects>` for"
" *list* and *dict* types gain previously overlooked missing methods:"
msgstr ""
"针对 *list* 和 *dict* 类型的 :ref:`多进程代理对象 <multiprocessing-proxy_objects>` "
"增加了此前被忽略的缺失方法："

#: ../../whatsnew/3.14.rst:1790
msgid ":meth:`!clear` and :meth:`!copy` for proxies of :class:`list`"
msgstr ":meth:`!clear` 和 :meth:`!copy` 用于 :class:`list` 的代理"

#: ../../whatsnew/3.14.rst:1791
msgid ""
":meth:`~dict.fromkeys`, ``reversed(d)``, ``d | {}``, ``{} | d``, ``d |= "
"{'b': 2}`` for proxies of :class:`dict`"
msgstr ""
":meth:`~dict.fromkeys`、``reversed(d)``、``d | {}``、``{} | d``、``d |= {'b': "
"2}`` 用于 :class:`dict` 的代理"

#: ../../whatsnew/3.14.rst:1794
msgid "(Contributed by Roy Hyunjin Han for :gh:`103134`.)"
msgstr "（由 Roy Hyunjin Han 在 :gh:`103134` 中贡献。）"

#: ../../whatsnew/3.14.rst:1796
msgid ""
"Add support for shared :class:`set` objects via :meth:`SyncManager.set() "
"<multiprocessing.managers.SyncManager.set>`. The :func:`set` in "
":func:`multiprocessing.Manager` method is now available. (Contributed by "
"Mingyu Park in :gh:`129949`.)"
msgstr ""
"通过 :meth:`SyncManager.set() <multiprocessing.managers.SyncManager.set>` "
"增加了对共享 :class:`set` 对象的支持。:func:`multiprocessing.Manager` 方法中的 :func:`set` "
"现已可用。（由 Mingyu Park 在 :gh:`129949` 中贡献。）"

#: ../../whatsnew/3.14.rst:1801
msgid ""
"Add :func:`multiprocessing.Process.interrupt` which terminates the child "
"process by sending :py:const:`~signal.SIGINT`. This enables "
":keyword:`finally` clauses to print a stack trace for the terminated "
"process. (Contributed by Artem Pulkin in :gh:`131913`.)"
msgstr ""
"新增 :func:`multiprocessing.Process.interrupt` 方法，该方法通过发送 "
":py:const:`~signal.SIGINT` 信号来终止子进程。这使得 :keyword:`finally` "
"子句能够为被终止的进程打印栈回溯信息。（由 Artem Pulkin 在 :gh:`131913` 中贡献。）"

#: ../../whatsnew/3.14.rst:1807
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.14.rst:1809
msgid ""
"Two new functions :func:`operator.is_none` and :func:`operator.is_not_none` "
"have been added, such that ``operator.is_none(obj)`` is equivalent to ``obj "
"is None`` and ``operator.is_not_none(obj)`` is equivalent to ``obj is not "
"None``. (Contributed by Raymond Hettinger and Nico Mexis in :gh:`115808`.)"
msgstr ""
"新增了两个函数: :func:`operator.is_none` 和 :func:`operator.is_not_none`，其中 "
"``operator.is_none(obj)`` 等价于 ``obj is None``，而 "
"``operator.is_not_none(obj)`` 等价于 ``obj is not None``。（由 Raymond Hettinger 和"
" Nico Mexis 在 :gh:`115808` 中贡献。）"

#: ../../whatsnew/3.14.rst:1817
msgid "os"
msgstr "os"

#: ../../whatsnew/3.14.rst:1819
msgid ""
"Add the :func:`os.reload_environ` function to update :data:`os.environ` and "
":data:`os.environb` with changes to the environment made by "
":func:`os.putenv`, by :func:`os.unsetenv`, or made outside Python in the "
"same process. (Contributed by Victor Stinner in :gh:`120057`.)"
msgstr ""
"新增 :func:`os.reload_environ` 函数，用于根据 :func:`os.putenv`、:func:`os.unsetenv` "
"所做的变更，或同一进程中 Python 外部所做的环境变更，来更新 :data:`os.environ` 和 "
":data:`os.environb`。（由 Victor Stinner 在 :gh:`120057` 中贡献。）"

#: ../../whatsnew/3.14.rst:1825
msgid ""
"Add the :data:`~os.SCHED_DEADLINE` and :data:`~os.SCHED_NORMAL` constants to"
" the :mod:`os` module. (Contributed by James Roy in :gh:`127688`.)"
msgstr ""
"向 :mod:`os` 模块中添加了 :data:`~os.SCHED_DEADLINE` 和 :data:`~os.SCHED_NORMAL` "
"常量。（由 James Roy 在 :gh:`127688` 中贡献。）"

#: ../../whatsnew/3.14.rst:1829
msgid ""
"Add the :func:`os.readinto` function to read into a :ref:`buffer object "
"<bufferobjects>` from a file descriptor. (Contributed by Cody Maloney in "
":gh:`129205`.)"
msgstr ""
"新增 :func:`os.readinto` 函数，用于从文件描述符读取数据到 :ref:`缓冲区对象 <bufferobjects>` 中。（由 "
"Cody Maloney 在 :gh:`129205` 中贡献。）"

#: ../../whatsnew/3.14.rst:1835
msgid "os.path"
msgstr "os.path"

#: ../../whatsnew/3.14.rst:1837
msgid ""
"The *strict* parameter to :func:`os.path.realpath` accepts a new value, "
":data:`os.path.ALLOW_MISSING`. If used, errors other than "
":exc:`FileNotFoundError` will be re-raised; the resulting path can be "
"missing but it will be free of symlinks. (Contributed by Petr Viktorin for "
":cve:`2025-4517`.)"
msgstr ""
":func:`os.path.realpath` 的 *strict* 形参新增支持 :data:`os.path.ALLOW_MISSING` "
"值。当启用该选项时：除 :exc:`FileNotFoundError` 外的错误将被重新引发；返回路径允许不存在，但保证已解析所有符号链接。（由 "
"Petr Viktorin 为修复 :cve:`2025-4517` 贡献。）"

#: ../../whatsnew/3.14.rst:1845 ../../whatsnew/3.14.rst:2345
#: ../../whatsnew/3.14.rst:2605
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.14.rst:1847
msgid ""
"Add methods to :class:`pathlib.Path` to recursively copy or move files and "
"directories:"
msgstr "为 :class:`pathlib.Path` 新增递归复制/移动文件和目录的方法："

#: ../../whatsnew/3.14.rst:1850
msgid ""
":meth:`~pathlib.Path.copy` copies a file or directory tree to a destination."
msgstr ":meth:`~pathlib.Path.copy` 将一个文件或目录树复制到目标位置。"

#: ../../whatsnew/3.14.rst:1851
msgid ":meth:`~pathlib.Path.copy_into` copies *into* a destination directory."
msgstr ":meth:`~pathlib.Path.copy_into` 会将内容复制 *到* 目标目录中。"

#: ../../whatsnew/3.14.rst:1852
msgid ""
":meth:`~pathlib.Path.move` moves a file or directory tree to a destination."
msgstr ":meth:`~pathlib.Path.move` 将一个文件或目录树移动到目标位置。"

#: ../../whatsnew/3.14.rst:1853
msgid ":meth:`~pathlib.Path.move_into` moves *into* a destination directory."
msgstr ":meth:`~pathlib.Path.move_into` 会将内容移动 *到* 目标目录中。"

#: ../../whatsnew/3.14.rst:1855
msgid "(Contributed by Barney Gale in :gh:`73991`.)"
msgstr "（由 Barney Gale 在 :gh:`73991` 中贡献。）"

#: ../../whatsnew/3.14.rst:1857
msgid ""
"Add :attr:`pathlib.Path.info` attribute, which stores an object implementing"
" the :class:`pathlib.types.PathInfo` protocol (also new). The object "
"supports querying the file type and internally caching :func:`~os.stat` "
"results. Path objects generated by :meth:`~pathlib.Path.iterdir` are "
"initialized with file type information gleaned from scanning the parent "
"directory. (Contributed by Barney Gale in :gh:`125413`.)"
msgstr ""
"新增 :attr:`pathlib.Path.info` 属性，该属性存储一个实现了 :class:`pathlib.types.PathInfo` "
"协议（同样为新增）的对象。此对象支持查询文件类型，并在内部缓存 :func:`~os.stat` 的结果。通过 "
":meth:`~pathlib.Path.iterdir` 生成的路径对象会利用扫描父目录时收集到的文件类型信息进行初始化。（由 Barney Gale"
" 在 :gh:`125413` 中贡献。）"

#: ../../whatsnew/3.14.rst:1867 ../../whatsnew/3.14.rst:2353
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.14.rst:1869
msgid ""
"Hardcoded breakpoints (:func:`breakpoint` and :func:`pdb.set_trace`) now "
"reuse the most recent :class:`~pdb.Pdb` instance that calls "
":meth:`~pdb.Pdb.set_trace`, instead of creating a new one each time. As a "
"result, all the instance specific data like :pdbcmd:`display` and "
":pdbcmd:`commands` are preserved across hardcoded breakpoints. (Contributed "
"by Tian Gao in :gh:`121450`.)"
msgstr ""
"硬编码断点（:func:`breakpoint` 和 :func:`pdb.set_trace`）现在会重用最近一次调用 "
":meth:`~pdb.Pdb.set_trace` 的 :class:`~pdb.Pdb` "
"实例，而不是每次都创建一个新实例。因此，所有实例特定的数据（如 :pdbcmd:`display` 和 "
":pdbcmd:`commands`）在硬编码断点之间都会被保留下来。（由 Tian Gao 在 :gh:`121450` 中贡献。）"

#: ../../whatsnew/3.14.rst:1876
msgid ""
"Add a new argument *mode* to :class:`pdb.Pdb`. Disable the ``restart`` "
"command when :mod:`pdb` is in ``inline`` mode. (Contributed by Tian Gao in "
":gh:`123757`.)"
msgstr ""
"为 :class:`pdb.Pdb` 新增一个 *mode* 参数。当 :mod:`pdb` 处于 ``inline`` 模式时，禁用 "
"``restart`` 命令。（由 Tian Gao 在 :gh:`123757` 中贡献。）"

#: ../../whatsnew/3.14.rst:1880
msgid ""
"A confirmation prompt will be shown when the user tries to quit :mod:`pdb` "
"in ``inline`` mode. ``y``, ``Y``, ``<Enter>`` or ``EOF`` will confirm the "
"quit and call :func:`sys.exit`, instead of raising :exc:`bdb.BdbQuit`. "
"(Contributed by Tian Gao in :gh:`124704`.)"
msgstr ""
"当用户尝试在 ``inline`` 模式下退出 :mod:`pdb` 时，会显示一个确认提示。输入 ``y``、``Y``、按 ``<Enter>`` "
"或 ``EOF`` 将确认退出并调用 :func:`sys.exit`，而非引发 :exc:`bdb.BdbQuit`。（由 Tian Gao 在 "
":gh:`124704` 中贡献。）"

#: ../../whatsnew/3.14.rst:1885
msgid ""
"Inline breakpoints like :func:`breakpoint` or :func:`pdb.set_trace` will "
"always stop the program at calling frame, ignoring the ``skip`` pattern (if "
"any). (Contributed by Tian Gao in :gh:`130493`.)"
msgstr ""
"像 :func:`breakpoint` 或 :func:`pdb.set_trace` 这样的内联断点将始终在调用帧处暂停程序，而忽略 "
"``skip`` 模式（如果有的话）。（由 Tian Gao 在 :gh:`130493` 中贡献。）"

#: ../../whatsnew/3.14.rst:1890
msgid ""
"``<tab>`` at the beginning of the line in :mod:`pdb` multi-line input will "
"fill in a 4-space indentation now, instead of inserting a ``\\t`` character."
" (Contributed by Tian Gao in :gh:`130471`.)"
msgstr ""
"在 :mod:`pdb` 的多行输入中，行首的 ``<tab>`` 键现在会填充 4 个空格的缩进，而不是插入 ``\\t`` 字符。（由 Tian "
"Gao 在 :gh:`130471` 中贡献。）"

#: ../../whatsnew/3.14.rst:1894
msgid ""
"Auto-indent is introduced in :mod:`pdb` multi-line input. It will either "
"keep the indentation of the last line or insert a 4-space indentation when "
"it detects a new code block. (Contributed by Tian Gao in :gh:`133350`.)"
msgstr ""
":mod:`pdb` 的多行输入中引入了自动缩进功能。当检测到新的代码块时，它会要么保持上一行的缩进，要么插入 4 个空格的缩进。（由 Tian Gao"
" 在 :gh:`133350` 中贡献。）"

#: ../../whatsnew/3.14.rst:1899
msgid ""
"``$_asynctask`` is added to access the current asyncio task if applicable. "
"(Contributed by Tian Gao in :gh:`124367`.)"
msgstr ""
"新增 ``$_asynctask`` 以在适用情况下访问当前的 asyncio 任务。（由 Tian Gao 在 :gh:`124367` 中贡献。）"

#: ../../whatsnew/3.14.rst:1902
msgid ""
":func:`pdb.set_trace_async` is added to support debugging asyncio "
"coroutines. :keyword:`await` statements are supported with this function. "
"(Contributed by Tian Gao in :gh:`132576`.)"
msgstr ""
"新增 :func:`pdb.set_trace_async` 以支持调试 asyncio 协程。此函数支持 :keyword:`await` 语句。（由"
" Tian Gao 在 :gh:`132576` 中贡献。）"

#: ../../whatsnew/3.14.rst:1907
msgid ""
"Source code displayed in :mod:`pdb` will be syntax-highlighted. This feature"
" can be controlled using the same methods as PyREPL, in addition to the "
"newly added ``colorize`` argument of :class:`pdb.Pdb`. (Contributed by Tian "
"Gao and Łukasz Langa in :gh:`133355`.)"
msgstr ""
"在 :mod:`pdb` 中显示的源代码将带有语法高亮。除了新添加的 :class:`pdb.Pdb` 的 ``colorize`` "
"参数外，还可以使用与 PyREPL 相同的方法来控制此特性。（由 Tian Gao 和 Łukasz Langa 在 :gh:`133355` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1914
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.14.rst:1916
msgid ""
"Set the default protocol version on the :mod:`pickle` module to 5. For more "
"details, see :ref:`pickle protocols <pickle-protocols>`."
msgstr ""
"将 :mod:`pickle` 模块的默认协议版本设置为 5。更多详细信息，请参见 :ref:`pickle protocols <pickle-"
"protocols>`。"

#: ../../whatsnew/3.14.rst:1919
msgid ""
"Add notes for pickle serialization errors that allow to identify the source "
"of the error. (Contributed by Serhiy Storchaka in :gh:`122213`.)"
msgstr ""
"添加了关于 pickle 序列化错误的说明，这些说明有助于识别错误的来源。（由 Serhiy Storchaka 在 :gh:`122213` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1925
msgid "platform"
msgstr "platform"

#: ../../whatsnew/3.14.rst:1927
msgid ""
"Add :func:`platform.invalidate_caches` to invalidate the cached results. "
"(Contributed by Bénédikt Tran in :gh:`122549`.)"
msgstr ""
"新增 :func:`platform.invalidate_caches` 函数，用于使缓存结果失效。（由 Bénédikt Tran 在 "
":gh:`122549` 中贡献。）"

#: ../../whatsnew/3.14.rst:1932
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.14.rst:1934
msgid ""
":term:`Annotations <annotation>` in help output are now usually displayed in"
" a format closer to that in the original source. (Contributed by Jelle "
"Zijlstra in :gh:`101552`.)"
msgstr ""
"帮助输出中的 :term:`注解 <annotation>` 现在通常以更接近原始源代码中的格式显示。（由 Jelle Zijlstra 在 "
":gh:`101552` 中贡献。）"

#: ../../whatsnew/3.14.rst:1940
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.14.rst:1942
msgid "Improve and fix support for Bluetooth sockets."
msgstr "改进并修复对蓝牙套接字的支持。"

#: ../../whatsnew/3.14.rst:1944
msgid ""
"Fix support of Bluetooth sockets on NetBSD and DragonFly BSD. (Contributed "
"by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""
"修复了 NetBSD 和 DragonFly BSD 系统上对蓝牙套接字的支持。（由 Serhiy Storchaka 在 :gh:`132429` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1946
msgid ""
"Fix support for :const:`~socket.BTPROTO_HCI` on FreeBSD. (Contributed by "
"Victor Stinner in :gh:`111178`.)"
msgstr ""
"修复了 FreeBSD 系统上对 :const:`~socket.BTPROTO_HCI` 的支持。（由 Victor Stinner 在 "
":gh:`111178` 中贡献。）"

#: ../../whatsnew/3.14.rst:1948
msgid ""
"Add support for :const:`~socket.BTPROTO_SCO` on FreeBSD. (Contributed by "
"Serhiy Storchaka in :gh:`85302`.)"
msgstr ""
"新增对 FreeBSD 系统上 :const:`~socket.BTPROTO_SCO` 的支持。（由 Serhiy Storchaka 在 "
":gh:`85302` 中贡献。）"

#: ../../whatsnew/3.14.rst:1950
msgid ""
"Add support for *cid* and *bdaddr_type* in the address for "
":const:`~socket.BTPROTO_L2CAP` on FreeBSD. (Contributed by Serhiy Storchaka "
"in :gh:`132429`.)"
msgstr ""
"新增对 FreeBSD 系统上 :const:`~socket.BTPROTO_L2CAP` 地址中 *cid* 和 *bdaddr_type* "
"的支持。（由 Serhiy Storchaka 在 :gh:`132429` 中贡献。）"

#: ../../whatsnew/3.14.rst:1953
msgid ""
"Add support for *channel* in the address for :const:`~socket.BTPROTO_HCI` on"
" Linux. (Contributed by Serhiy Storchaka in :gh:`70145`.)"
msgstr ""
"新增对 Linux 系统上 :const:`~socket.BTPROTO_HCI` 地址中 *channel* 的支持。（由 Serhiy "
"Storchaka 在 :gh:`70145` 中贡献。）"

#: ../../whatsnew/3.14.rst:1956
msgid ""
"Accept an integer as the address for :const:`~socket.BTPROTO_HCI` on Linux. "
"(Contributed by Serhiy Storchaka in :gh:`132099`.)"
msgstr ""
"在 Linux 系统上，允许将整数作为 :const:`~socket.BTPROTO_HCI` 的地址。（由 Serhiy Storchaka 在 "
":gh:`132099` 中贡献。）"

#: ../../whatsnew/3.14.rst:1959
msgid ""
"Return *cid* in :meth:`~socket.socket.getsockname` for "
":const:`~socket.BTPROTO_L2CAP`. (Contributed by Serhiy Storchaka in "
":gh:`132429`.)"
msgstr ""
"在 :const:`~socket.BTPROTO_L2CAP` 中，:meth:`~socket.socket.getsockname` 会返回 "
"*cid*。（由 Serhiy Storchaka 在 :gh:`132429` 中贡献。）"

#: ../../whatsnew/3.14.rst:1962
msgid ""
"Add many new constants. (Contributed by Serhiy Storchaka in :gh:`132734`.)"
msgstr "新增了许多常量。（由 Serhiy Storchaka 在 :gh:`132734` 中贡献。）"

#: ../../whatsnew/3.14.rst:1966
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.14.rst:1968
msgid ""
"Indicate through :data:`ssl.HAS_PHA` whether the :mod:`ssl` module supports "
"TLSv1.3 post-handshake client authentication (PHA). (Contributed by Will "
"Childs-Klein in :gh:`128036`.)"
msgstr ""
"通过 :data:`ssl.HAS_PHA` 指示 :mod:`ssl` 模块是否支持 TLSv1.3 握手后客户端认证（PHA）。（由 Will "
"Childs-Klein 在 :gh:`128036` 中贡献。）"

#: ../../whatsnew/3.14.rst:1974
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.14.rst:1976
msgid ""
"Support the :c:expr:`float complex` and :c:expr:`double complex` C types in "
"the :mod:`struct` module (formatting characters ``'F'`` and ``'D'`` "
"respectively). (Contributed by Sergey B Kirpichev in :gh:`121249`.)"
msgstr ""
"在 :mod:`struct` 模块中支持 :c:expr:`float complex` 和 :c:expr:`double complex` 这两种"
" C 类型（分别对应格式字符 ``'F'`` 和 ``'D'``）。（由 Sergey B Kirpichev 在 :gh:`121249` 中贡献。）"

#: ../../whatsnew/3.14.rst:1983
msgid "symtable"
msgstr "symtable"

#: ../../whatsnew/3.14.rst:1985
msgid "Expose the following :class:`symtable.Symbol` methods:"
msgstr "公开以下 :class:`symtable.Symbol` 方法："

#: ../../whatsnew/3.14.rst:1987
msgid ":meth:`~symtable.Symbol.is_comp_cell`"
msgstr ":meth:`~symtable.Symbol.is_comp_cell`"

#: ../../whatsnew/3.14.rst:1988
msgid ":meth:`~symtable.Symbol.is_comp_iter`"
msgstr ":meth:`~symtable.Symbol.is_comp_iter`"

#: ../../whatsnew/3.14.rst:1989
msgid ":meth:`~symtable.Symbol.is_free_class`"
msgstr ":meth:`~symtable.Symbol.is_free_class`"

#: ../../whatsnew/3.14.rst:1991
msgid "(Contributed by Bénédikt Tran in :gh:`120029`.)"
msgstr "（由 Bénédikt Tran 在 :gh:`120029` 中贡献。）"

#: ../../whatsnew/3.14.rst:1995
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.14.rst:1997
msgid ""
"The previously undocumented special function :func:`sys.getobjects`, which "
"only exists in specialized builds of Python, may now return objects from "
"other interpreters than the one it's called in."
msgstr ""
"之前未写入文档的特殊函数 :func:`sys.getobjects`，它仅存在于某些专用的 Python "
"构建版，现在可以从其他解释器而非调用它的解释器返回对象。"

#: ../../whatsnew/3.14.rst:2001
msgid ""
"Add :func:`sys._is_immortal` for determining if an object is "
":term:`immortal`. (Contributed by Peter Bierma in :gh:`128509`.)"
msgstr ""
"新增 :func:`sys._is_immortal` 函数，用于判断一个对象是否为 :term:`immortal`。 （由 Peter Bierma"
" 在 :gh:`128509` 中贡献。）"

#: ../../whatsnew/3.14.rst:2004
msgid ""
"On FreeBSD, :data:`sys.platform` doesn't contain the major version anymore. "
"It is always ``'freebsd'``, instead of ``'freebsd13'`` or ``'freebsd14'``."
msgstr ""
"在 FreeBSD 上，:data:`sys.platform` 将不再包含主版本号。 它将始终为 ``'freebsd'``，而不是 "
"``'freebsd13'`` 或 ``'freebsd14'``。"

#: ../../whatsnew/3.14.rst:2007
msgid ""
"Raise :exc:`DeprecationWarning` for :func:`sys._clear_type_cache`. This "
"function was deprecated in Python 3.13 but it didn't raise a runtime "
"warning."
msgstr ""
"为 :func:`sys._clear_type_cache` 函数引发 :exc:`DeprecationWarning` 警告。该函数在 "
"Python 3.13 中已被弃用，但此前并未引发运行时警告。"

#: ../../whatsnew/3.14.rst:2012
msgid "sys.monitoring"
msgstr "sys.monitoring"

#: ../../whatsnew/3.14.rst:2014
msgid ""
"Two new events are added: :monitoring-event:`BRANCH_LEFT` and :monitoring-"
"event:`BRANCH_RIGHT`. The ``BRANCH`` event is deprecated."
msgstr ""
"新增了两个事件：:monitoring-event:`BRANCH_LEFT` 和 :monitoring-"
"event:`BRANCH_RIGHT`。``BRANCH`` 事件已被弃用。"

#: ../../whatsnew/3.14.rst:2019
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.14.rst:2021
msgid ""
"Add ``ABIFLAGS`` key to :func:`sysconfig.get_config_vars` on Windows. "
"(Contributed by Xuehai Pan in :gh:`131799`.)"
msgstr ""
"在 Windows 系统上，为 :func:`sysconfig.get_config_vars` 新增 ``ABIFLAGS`` 键。（由 "
"Xuehai Pan 在 :gh:`131799` 中贡献。）"

#: ../../whatsnew/3.14.rst:2026
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.14.rst:2028
msgid ""
":func:`~tarfile.data_filter` now normalizes symbolic link targets in order "
"to avoid path traversal attacks. (Contributed by Petr Viktorin in "
":gh:`127987` and :cve:`2025-4138`.)"
msgstr ""
":func:`~tarfile.data_filter` 现在会对符号链接目标进行规范化处理，以避免路径遍历攻击。（由 Petr Viktorin 在 "
":gh:`127987` 和 :cve:`2025-4138` 中贡献。）"

#: ../../whatsnew/3.14.rst:2031
msgid ""
":func:`~tarfile.TarFile.extractall` now skips fixing up directory attributes"
" when a directory was removed or replaced by another kind of file. "
"(Contributed by Petr Viktorin in :gh:`127987` and :cve:`2024-12718`.)"
msgstr ""
":func:`~tarfile.TarFile.extractall` 现在在目录被移除或被其他类型的文件替换时，会跳过对目录属性的修复。（由 Petr"
" Viktorin 在 :gh:`127987` 和 :cve:`2024-12718` 中贡献。）"

#: ../../whatsnew/3.14.rst:2034
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` now"
" (re-)apply the extraction filter when substituting a link (hard or "
"symbolic) with a copy of another archive member, and when fixing up "
"directory attributes. The former raises a new exception, "
":exc:`~tarfile.LinkFallbackError`. (Contributed by Petr Viktorin for "
":cve:`2025-4330` and :cve:`2024-12718`.)"
msgstr ""
":func:`~tarfile.TarFile.extract` 和 :func:`~tarfile.TarFile.extractall` "
"现在在以下两种情况会（重新）应用提取过滤器：一是用另一个归档成员的副本替换链接（硬链接或符号链接）时，二是修复目录属性时。前者会引发一个新异常 "
":exc:`~tarfile.LinkFallbackError`。（由 Petr Viktorin 针对 :cve:`2025-4330` 和 "
":cve:`2024-12718` 贡献。）"

#: ../../whatsnew/3.14.rst:2040
msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` no "
"longer extract rejected members when :func:`~tarfile.TarFile.errorlevel` is "
"zero. (Contributed by Matt Prodani and Petr Viktorin in :gh:`112887` and "
":cve:`2025-4435`.)"
msgstr ""
":func:`~tarfile.TarFile.extract` 和 :func:`~tarfile.TarFile.extractall` 在 "
":func:`~tarfile.TarFile.errorlevel` 为 0 时，不再提取被拒绝的成员。（由 Matt Prodani 和 Petr "
"Viktorin 在 :gh:`112887` 以及 :cve:`2025-4435` 中贡献。）"

#: ../../whatsnew/3.14.rst:2048
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.14.rst:2050
msgid ""
":meth:`threading.Thread.start` now sets the operating system thread name to "
":attr:`threading.Thread.name`. (Contributed by Victor Stinner in "
":gh:`59705`.)"
msgstr ""
":meth:`threading.Thread.start` 现在会将操作系统线程名称设置为 "
":attr:`threading.Thread.name`。（由 Victor Stinner 在 :gh:`59705` 中贡献。）"

#: ../../whatsnew/3.14.rst:2056
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.14.rst:2058
msgid ""
"Make :mod:`tkinter` widget methods :meth:`!after` and :meth:`!after_idle` "
"accept arguments passed by keyword. (Contributed by Zhikang Yan in "
":gh:`126899`.)"
msgstr ""
"使 :mod:`tkinter` 控件的 :meth:`!after` 和 :meth:`!after_idle` 方法支持通过关键字传递参数。（由 "
"Zhikang Yan 在 :gh:`126899` 中贡献。）"

#: ../../whatsnew/3.14.rst:2062
msgid ""
"Add ability to specify name for :class:`!tkinter.OptionMenu` and "
":class:`!tkinter.ttk.OptionMenu`. (Contributed by Zhikang Yan in "
":gh:`130482`.)"
msgstr ""
"新增为 :class:`!tkinter.OptionMenu` 和 :class:`!tkinter.ttk.OptionMenu` "
"指定名称的功能。（由 Zhikang Yan 在 :gh:`130482` 中贡献。）"

#: ../../whatsnew/3.14.rst:2067
msgid "turtle"
msgstr "turtle（海龟绘图）"

#: ../../whatsnew/3.14.rst:2069
msgid ""
"Add context managers for :func:`turtle.fill`, :func:`turtle.poly` and "
":func:`turtle.no_animation`. (Contributed by Marie Roald and Yngve Mardal "
"Moe in :gh:`126350`.)"
msgstr ""
"为 :func:`turtle.fill`、:func:`turtle.poly` 和 :func:`turtle.no_animation` "
"添加了上下文管理器。（由 Marie Roald 和 Yngve Mardal Moe 在 :gh:`126350` 中贡献。）"

#: ../../whatsnew/3.14.rst:2075
msgid "types"
msgstr "types（类型）"

#: ../../whatsnew/3.14.rst:2077
msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`. See "
":ref:`below <whatsnew314-typing-union>` for more details. (Contributed by "
"Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
":class:`types.UnionType` 现在是 :class:`typing.Union` 的别名。更多详情请参见 :ref:`下方 "
"<whatsnew314-typing-union>`。（由 Jelle Zijlstra 在 :gh:`105499` 中贡献。）"

#: ../../whatsnew/3.14.rst:2083 ../../whatsnew/3.14.rst:2651
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.14.rst:2087
msgid ""
":class:`types.UnionType` and :class:`typing.Union` are now aliases for each "
"other, meaning that both old-style unions (created with ``Union[int, str]``)"
" and new-style unions (``int | str``) now create instances of the same "
"runtime type. This unifies the behavior between the two syntaxes, but leads "
"to some differences in behavior that may affect users who introspect types "
"at runtime:"
msgstr ""
":class:`types.UnionType` 和 :class:`typing.Union` 现在互为别名，这意味着旧式联合（通过 "
"``Union[int, str]`` 创建）和新式联合（``int | "
"str``）现在都会创建相同运行时类型的实例。这统一了两种语法的行为，但也带来了一些行为差异，可能会影响那些在运行时对类型进行内省的用户："

#: ../../whatsnew/3.14.rst:2093
msgid ""
"Both syntaxes for creating a union now produce the same string "
"representation in ``repr()``. For example, ``repr(Union[int, str])`` is now "
"``\"int | str\"`` instead of ``\"typing.Union[int, str]\"``."
msgstr ""
"创建联合的两种语法现在在 ``repr()`` 中会生成相同的字符串表示形式。例如，``repr(Union[int, str])`` 现在会返回 "
"``\"int | str\"``，而非 ``\"typing.Union[int, str]\"``。"

#: ../../whatsnew/3.14.rst:2096
msgid ""
"Unions created using the old syntax are no longer cached. Previously, "
"running ``Union[int, str]`` multiple times would return the same object "
"(``Union[int, str] is Union[int, str]`` would be ``True``), but now it will "
"return two different objects. Users should use ``==`` to compare unions for "
"equality, not ``is``. New-style unions have never been cached this way. This"
" change could increase memory usage for some programs that use a large "
"number of unions created by subscripting ``typing.Union``. However, several "
"factors offset this cost: unions used in annotations are no longer evaluated"
" by default in Python 3.14 because of :pep:`649`; an instance of "
":class:`types.UnionType` is itself much smaller than the object returned by "
"``Union[]`` was on prior Python versions; and removing the cache also saves "
"some space. It is therefore unlikely that this change will cause a "
"significant increase in memory usage for most users."
msgstr ""
"使用旧式语法创建的联合不再被缓存。此前，多次运行 ``Union[int, str]`` 会返回同一个对象（``Union[int, str] is "
"Union[int, str]`` 的结果为 ``True``），但现在会返回两个不同的对象。用户应当使用 ``==`` 来比较联合是否相等，而非 "
"``is``。新式联合从未以这种方式被缓存。 这一变化可能会增加某些程序的内存占用，这些程序会通过下标 ``typing.Union`` "
"创建大量联合。不过，有几个因素会抵消这一开销：由于 :pep:`649` 的引入，Python 3.14 "
"中默认不再对注解中使用的联合进行求值；:class:`types.UnionType` 的实例本身比早期 Python 版本中 ``Union[]`` "
"返回的对象小得多；此外，移除缓存也节省了部分空间。因此，对于大多数用户而言，这一变化不太可能导致内存占用显著增加。"

#: ../../whatsnew/3.14.rst:2109
msgid ""
"Previously, old-style unions were implemented using the private class "
"``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection"
" helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"此前，旧式联合是通过私有类 ``typing._UnionGenericAlias`` "
"实现的。该类在当前实现中已不再需要，但为了向后兼容性而被保留，计划在 Python 3.17 中移除。用户应使用有文档记录的内省辅助函数，如 "
":func:`typing.get_origin` 和 :func:`typing.get_args`，而非依赖私有实现细节。"

#: ../../whatsnew/3.14.rst:2114
msgid ""
"It is now possible to use :class:`typing.Union` itself in :func:`isinstance`"
" checks. For example, ``isinstance(int | str, typing.Union)`` will return "
"``True``; previously this raised :exc:`TypeError`."
msgstr ""
"现在可以在 :func:`isinstance` 检查中使用 :class:`typing.Union` 本身。例如，``isinstance(int "
"| str, typing.Union)`` 将返回 ``True``；而此前这会引发 :exc:`TypeError`。"

#: ../../whatsnew/3.14.rst:2117
msgid ""
"The ``__args__`` attribute of :class:`typing.Union` objects is no longer "
"writable."
msgstr ":class:`typing.Union` 对象的 ``__args__`` 属性不再可写。"

#: ../../whatsnew/3.14.rst:2118
msgid ""
"It is no longer possible to set any attributes on :class:`typing.Union` "
"objects. This only ever worked for dunder attributes on previous versions, "
"was never documented to work, and was subtly broken in many cases."
msgstr ""
":class:`typing.Union` "
"对象现在禁止设置任何属性。此前版本中仅能设置双下划线属性，且该行为既无文档支持，实际使用中也存在诸多潜在问题。"

#: ../../whatsnew/3.14.rst:2122
msgid "(Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr "（由 Jelle Zijlstra 在 :gh:`105499` 中贡献。）"

#: ../../whatsnew/3.14.rst:2124
msgid ":class:`typing.TypeAliasType` now supports star unpacking."
msgstr ":class:`typing.TypeAliasType` 现在支持星号解包操作。"

#: ../../whatsnew/3.14.rst:2128
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.14.rst:2130
msgid "The Unicode database has been updated to Unicode 16.0.0."
msgstr "Unicode 数据库已更新到 16.0.0 版本。"

#: ../../whatsnew/3.14.rst:2136
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.14.rst:2138
msgid ""
":mod:`unittest` output is now colored by default. This can be controlled by "
":ref:`environment variables <using-on-controlling-color>`. (Contributed by "
"Hugo van Kemenade in :gh:`127221`.)"
msgstr ""
":mod:`unittest` 模块的输出现在默认启用彩色显示，可通过 :ref:`环境变量 <using-on-controlling-color>`"
" 进行控制。（由 Hugo van Kemenade 在 :gh:`127221` 中贡献。）"

#: ../../whatsnew/3.14.rst:2143
msgid ""
"unittest discovery supports :term:`namespace package` as start directory "
"again. It was removed in Python 3.11. (Contributed by Jacob Walls in "
":gh:`80958`.)"
msgstr ""
"unittest 发现机制重新支持将 :term:`namespace package` 作为起始目录，该功能曾在 Python 3.11 中被移除。 "
"（由 Jacob Walls 在 :gh:`80958` 中贡献。）"

#: ../../whatsnew/3.14.rst:2147
msgid ""
"A number of new methods were added in the :class:`~unittest.TestCase` class "
"that provide more specialized tests."
msgstr "在 :class:`~unittest.TestCase` 类中新增了多个方法，这些方法可提供更专门化的测试。"

#: ../../whatsnew/3.14.rst:2150
msgid ""
":meth:`~unittest.TestCase.assertHasAttr` and "
":meth:`~unittest.TestCase.assertNotHasAttr` check whether the object has a "
"particular attribute."
msgstr ""
":meth:`~unittest.TestCase.assertHasAttr` 和 "
":meth:`~unittest.TestCase.assertNotHasAttr` 方法，用于检查对象是否包含特定属性。"

#: ../../whatsnew/3.14.rst:2153
msgid ""
":meth:`~unittest.TestCase.assertIsSubclass` and "
":meth:`~unittest.TestCase.assertNotIsSubclass` check whether the object is a"
" subclass of a particular class, or of one of a tuple of classes."
msgstr ""
":meth:`~unittest.TestCase.assertIsSubclass` 和 "
":meth:`~unittest.TestCase.assertNotIsSubclass` "
"用于检查对象是否是某个特定类的子类，或者是否是某个类元组中任一类的子类。"

#: ../../whatsnew/3.14.rst:2156
msgid ""
":meth:`~unittest.TestCase.assertStartsWith`, "
":meth:`~unittest.TestCase.assertNotStartsWith`, "
":meth:`~unittest.TestCase.assertEndsWith` and "
":meth:`~unittest.TestCase.assertNotEndsWith` check whether the Unicode or "
"byte string starts or ends with particular strings."
msgstr ""
":meth:`~unittest.TestCase.assertStartsWith`、:meth:`~unittest.TestCase.assertNotStartsWith`、:meth:`~unittest.TestCase.assertEndsWith`"
" 和 :meth:`~unittest.TestCase.assertNotEndsWith` 用于检查 Unicode "
"字符串或字节串是否以特定字符串开头或结尾。"

#: ../../whatsnew/3.14.rst:2162
msgid "(Contributed by Serhiy Storchaka in :gh:`71339`.)"
msgstr "（由 Serhiy Storchaka 在 :gh:`71339` 中贡献。）"

#: ../../whatsnew/3.14.rst:2166 ../../whatsnew/3.14.rst:2658
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.14.rst:2168
msgid ""
"Upgrade HTTP digest authentication algorithm for :mod:`urllib.request` by "
"supporting SHA-256 digest authentication as specified in :rfc:`7616`. "
"(Contributed by Calvin Bui in :gh:`128193`.)"
msgstr ""
"升级 :mod:`urllib.request` 的 HTTP 摘要认证算法，支持 :rfc:`7616` 中规定的 SHA-256 摘要认证。（由 "
"Calvin Bui 在 :gh:`128193` 中贡献。）"

#: ../../whatsnew/3.14.rst:2172
msgid ""
"Improve ergonomics and standards compliance when parsing and emitting "
"``file:`` URLs."
msgstr "改进解析和生成 ``file:`` URL 时的易用性和标准合规性。"

#: ../../whatsnew/3.14.rst:2175
msgid "In :func:`urllib.request.url2pathname`:"
msgstr "在 :func:`urllib.request.url2pathname`："

#: ../../whatsnew/3.14.rst:2177
msgid ""
"Accept a complete URL when the new *require_scheme* argument is set to true."
msgstr "当新的 *require_scheme* 参数设为 true 时，接受完整的 URL。"

#: ../../whatsnew/3.14.rst:2179
msgid "Discard URL authority if it matches the local hostname."
msgstr "如果 URL 的权限部分与本地主机名匹配，则舍弃该部分。"

#: ../../whatsnew/3.14.rst:2180
msgid ""
"Discard URL authority if it resolves to a local IP address when the new "
"*resolve_host* argument is set to true."
msgstr "当新的 *resolve_host* 参数设为 true 时，若 URL 的权限部分解析为本地 IP 地址，则舍弃该部分。"

#: ../../whatsnew/3.14.rst:2182
msgid "Discard URL query and fragment components."
msgstr "丢弃URL查询和片段组件。"

#: ../../whatsnew/3.14.rst:2183
msgid ""
"Raise :exc:`~urllib.error.URLError` if a URL authority isn't local, except "
"on Windows where we return a UNC path as before."
msgstr ""
"如果 URL 的权限部分不是本地的，则引发 :exc:`~urllib.error.URLError`，但在 Windows 系统上，仍会像以前一样返回"
" UNC 路径。"

#: ../../whatsnew/3.14.rst:2186
msgid "In :func:`urllib.request.pathname2url`:"
msgstr "在 :func:`urllib.request.pathname2url` 中："

#: ../../whatsnew/3.14.rst:2188
msgid ""
"Return a complete URL when the new *add_scheme* argument is set to true."
msgstr "当新的 *add_scheme* 参数设为 true 时，返回完整的 URL。"

#: ../../whatsnew/3.14.rst:2189
msgid ""
"Include an empty URL authority when a path begins with a slash. For example,"
" the path ``/etc/hosts`` is converted to the URL ``///etc/hosts``."
msgstr ""
"当路径以斜杠开头时，包含一个空的 URL 权限部分。例如，路径 ``/etc/hosts`` 会被转换为 URL ``///etc/hosts``。"

#: ../../whatsnew/3.14.rst:2192
msgid ""
"On Windows, drive letters are no longer converted to uppercase, and ``:`` "
"characters not following a drive letter no longer cause an :exc:`OSError` "
"exception to be raised."
msgstr "在 Windows 系统上，盘符不再转换为大写，且非紧跟在驱动器号后的 ``:`` 字符不再引发 :exc:`OSError` 异常。"

#: ../../whatsnew/3.14.rst:2196
msgid "(Contributed by Barney Gale in :gh:`125866`.)"
msgstr "（由 Barney Gale 在 :gh:`125866` 中贡献。）"

#: ../../whatsnew/3.14.rst:2200 ../../whatsnew/3.14.rst:2365
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.14.rst:2202
msgid ""
"Add support for UUID versions 6, 7, and 8 via :func:`uuid.uuid6`, "
":func:`uuid.uuid7`, and :func:`uuid.uuid8` respectively, as specified in "
":rfc:`9562`. (Contributed by Bénédikt Tran in :gh:`89083`.)"
msgstr ""
"通过 :func:`uuid.uuid6`、:func:`uuid.uuid7` 和 :func:`uuid.uuid8` 分别添加对 UUID 第 "
"6、7、8 版的支持，具体规范见 :rfc:`9562`。（由 Bénédikt Tran 在 :gh:`89083` 中贡献。）"

#: ../../whatsnew/3.14.rst:2207
msgid ""
":const:`uuid.NIL` and :const:`uuid.MAX` are now available to represent the "
"Nil and Max UUID formats as defined by :rfc:`9562`. (Contributed by Nick "
"Pope in :gh:`128427`.)"
msgstr ""
":const:`uuid.NIL` 和 :const:`uuid.MAX` 现已可用，分别用于表示 :rfc:`9562` 中定义的空 UUID（Nil"
" UUID）和最大 UUID（Max UUID）格式。（由 Nick Pope 在 :gh:`128427` 中贡献。）"

#: ../../whatsnew/3.14.rst:2211
msgid ""
"Allow to generate multiple UUIDs at once via :option:`python -m uuid --count"
" <uuid --count>`. (Contributed by Simon Legner in :gh:`131236`.)"
msgstr ""
"允许通过 :option:`python -m uuid --count <uuid --count>` 一次性生成多个 UUID。（由 Simon "
"Legner 在 :gh:`131236` 中贡献。）"

#: ../../whatsnew/3.14.rst:2216
msgid "webbrowser"
msgstr "webbrowser"

#: ../../whatsnew/3.14.rst:2218
msgid ""
"Names in the :envvar:`BROWSER` environment variable can now refer to already"
" registered browsers for the :mod:`webbrowser` module, instead of always "
"generating a new browser command."
msgstr ""
":envvar:`BROWSER` 环境变量中的名称现在可以引用 :mod:`webbrowser` "
"模块中已注册的浏览器，而不必总是生成新的浏览器命令。"

#: ../../whatsnew/3.14.rst:2222
msgid ""
"This makes it possible to set :envvar:`BROWSER` to the value of one of the "
"supported browsers on macOS."
msgstr "这使得可以将 :envvar:`BROWSER` 设置为 macOS 上受支持的浏览器之一的值。"

#: ../../whatsnew/3.14.rst:2227
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.14.rst:2229
msgid ""
"Added :func:`ZipInfo._for_archive <zipfile.ZipInfo._for_archive>` to resolve"
" suitable defaults for a :class:`~zipfile.ZipInfo` object as used by "
":func:`ZipFile.writestr <zipfile.ZipFile.writestr>`. (Contributed by "
"Bénédikt Tran in :gh:`123424`.)"
msgstr ""
"新增了 :func:`ZipInfo._for_archive <zipfile.ZipInfo._for_archive>` 方法，用于为 "
":class:`~zipfile.ZipInfo` 对象解析合适的默认值，该对象由 :func:`ZipFile.writestr "
"<zipfile.ZipFile.writestr>` 方法使用。（由 Bénédikt Tran 在 :gh:`123424` 中贡献。）"

#: ../../whatsnew/3.14.rst:2234
msgid ""
":meth:`zipfile.ZipFile.writestr` now respects ``SOURCE_DATE_EPOCH`` that "
"distributions can set centrally and have build tools consume this in order "
"to produce reproducible output. (Contributed by Jiahao Li in :gh:`91279`.)"
msgstr ""
":meth:`zipfile.ZipFile.writestr` 现在会遵从 ``SOURCE_DATE_EPOCH`` "
"环境变量。该变量可由发行版统一设置，以便构建工具通过读取该变量来生成可复现的输出。（由李佳昊在 :gh:`91279` 中贡献。）"

#: ../../whatsnew/3.14.rst:2244
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.14.rst:2246
msgid ""
"The import time for several standard library modules has been improved, "
"including :mod:`annotationlib`, :mod:`ast`, :mod:`asyncio`, :mod:`base64`, "
":mod:`cmd`, :mod:`csv`, :mod:`gettext`, :mod:`importlib.util`, "
":mod:`locale`, :mod:`mimetypes`, :mod:`optparse`, :mod:`pickle`, "
":mod:`pprint`, :mod:`pstats`, :mod:`shlex`, :mod:`socket`, :mod:`string`, "
":mod:`subprocess`, :mod:`threading`, :mod:`tomllib`, :mod:`types`, and "
":mod:`zipfile`."
msgstr ""
"几个标准库模块的导入时间已得到改进，包括 "
":mod:`annotationlib`、:mod:`ast`、:mod:`asyncio`、:mod:`base64`、:mod:`cmd`、:mod:`csv`、:mod:`gettext`、:mod:`importlib.util`、:mod:`locale`、:mod:`mimetypes`、:mod:`optparse`、:mod:`pickle`、:mod:`pprint`、:mod:`pstats`、:mod:`shlex`、:mod:`socket`、:mod:`string`、:mod:`subprocess`、:mod:`threading`、:mod:`tomllib`、:mod:`types`"
" 和 :mod:`zipfile`。"

#: ../../whatsnew/3.14.rst:2253
msgid ""
"(Contributed by Adam Turner, Bénédikt Tran, Chris Markiewicz, Eli Schwartz, "
"Hugo van Kemenade, Jelle Zijlstra, and others in :gh:`118761`.)"
msgstr ""
"（由 Adam Turner、Bénédikt Tran、Chris Markiewicz、Eli Schwartz、Hugo van "
"Kemenade、Jelle Zijlstra 等人在 :gh:`118761` 中贡献。）"

#: ../../whatsnew/3.14.rst:2260
msgid ""
"Standard benchmark results have improved by 10-20%, following the "
"implementation of a new per-thread double linked list for :class:`native "
"tasks <asyncio.Task>`, also reducing memory usage. This enables external "
"introspection tools such as :ref:`python -m asyncio pstree "
"<whatsnew314-asyncio-introspection>` to introspect the call graph of asyncio"
" tasks running in all threads. (Contributed by Kumar Aditya in "
":gh:`107803`.)"
msgstr ""
"标准基准测试结果提升了10-20%，这是在为 :class:`native tasks <asyncio.Task>` "
"实现新的每线程双链表后取得的，同时也减少了内存使用。这使得诸如 :ref:`python -m asyncio pstree "
"<whatsnew314-asyncio-introspection>` 等外部内省工具能够内省在所有线程中运行的 asyncio 任务的调用图。（由 "
"Kumar Aditya 在 :gh:`107803` 中贡献。）"

#: ../../whatsnew/3.14.rst:2269
msgid ""
"The module now has first class support for :term:`free-threading builds "
"<free threading>`. This enables parallel execution of multiple event loops "
"across different threads, scaling linearly with the number of threads. "
"(Contributed by Kumar Aditya in :gh:`128002`.)"
msgstr ""
"该模块现在对 :term:`自由线程构建 <free threading>` "
"提供了一流的支持。这使得多个事件循环可以在不同线程中并行执行，并且随着线程数量的增加线性扩展。（由 Kumar Aditya 在 "
":gh:`128002` 中贡献。）"

#: ../../whatsnew/3.14.rst:2277
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.14.rst:2279
msgid ""
":func:`~base64.b16decode` is now up to six times faster. (Contributed by "
"Bénédikt Tran, Chris Markiewicz, and Adam Turner in :gh:`118761`.)"
msgstr ""
":func:`~base64.b16decode` 的速度现在提升了高达六倍。（由 Bénédikt Tran、Chris Markiewicz 和 "
"Adam Turner 在 :gh:`118761` 中贡献。）"

#: ../../whatsnew/3.14.rst:2285
msgid "bdb"
msgstr "bdb"

#: ../../whatsnew/3.14.rst:2287
msgid ""
"The basic debugger now has a :mod:`sys.monitoring`-based backend, which can "
"be selected via the passing ``'monitoring'`` to the :class:`~bdb.Bdb` "
"class's new *backend* parameter. (Contributed by Tian Gao in :gh:`124533`.)"
msgstr ""
"基本调试器现在有了基于 :mod:`sys.monitoring` 的后端，可以通过将 ``'monitoring'`` 传递给 "
":class:`~bdb.Bdb` 类的新 *backend* 参数来选择。（由 Tian Gao 在 :gh:`124533` 中贡献。）"

#: ../../whatsnew/3.14.rst:2296
msgid ""
"The :func:`~difflib.IS_LINE_JUNK` function is now up to twice as fast. "
"(Contributed by Adam Turner and Semyon Moroz in :gh:`130167`.)"
msgstr ""
":func:`~difflib.IS_LINE_JUNK` 函数的速度现在提升了一倍。（由 Adam Turner 和 Semyon Moroz 在 "
":gh:`130167` 中贡献。）"

#: ../../whatsnew/3.14.rst:2301
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.14.rst:2303
msgid ""
"The new :ref:`incremental garbage collector <whatsnew314-incremental-gc>` "
"means that maximum pause times are reduced by an order of magnitude or more "
"for larger heaps."
msgstr ""
"新的 :ref:`增量垃圾回收器 <whatsnew314-incremental-gc>` 意味着对于较大的堆，最大暂停时间减少了至少一个数量级。"

#: ../../whatsnew/3.14.rst:2307
msgid ""
"Because of this optimization, the meaning of the results of "
":meth:`~gc.get_threshold` and :meth:`~gc.set_threshold` have changed, along "
"with :meth:`~gc.get_count` and :meth:`~gc.get_stats`."
msgstr ""
"由于这种优化，:meth:`~gc.get_threshold` 和 :meth:`~gc.set_threshold` 的结果含义发生了变化，同时还有"
" :meth:`~gc.get_count` 和 :meth:`~gc.get_stats`。"

#: ../../whatsnew/3.14.rst:2311
msgid ""
"For backwards compatibility, :meth:`~gc.get_threshold` continues to return a"
" three-item tuple. The first value is the threshold for young collections, "
"as before; the second value determines the rate at which the old collection "
"is scanned (the default is 10, and higher values mean that the old "
"collection is scanned more slowly). The third value is now meaningless and "
"is always zero."
msgstr ""
"为了向后兼容，:meth:`~gc.get_threshold` "
"继续返回一个三项元组。第一个值是年轻代回收的阈值，与之前相同；第二个值决定了老年代回收的扫描速率（默认值为10，值越高意味着老年代回收扫描越慢）。第三个值现在没有意义，总是为零。"

#: ../../whatsnew/3.14.rst:2319
msgid ":meth:`~gc.set_threshold` now ignores any items after the second."
msgstr ":meth:`~gc.set_threshold` 现在会忽略第二个之后的任何项。"

#: ../../whatsnew/3.14.rst:2321
msgid ""
":meth:`~gc.get_count` and :meth:`~gc.get_stats` continue to return the same "
"format of results. The only difference is that instead of the results "
"referring to the young, aging and old generations, the results refer to the "
"young generation and the aging and collecting spaces of the old generation."
msgstr ""
":meth:`~gc.get_count` 和 :meth:`~gc.get_stats` "
"继续返回相同格式的结果。唯一的区别是，结果不再指向年轻代、老化代和老年代，而是指向年轻代以及老年代的老化和回收空间。"

#: ../../whatsnew/3.14.rst:2328
msgid ""
"In summary, code that attempted to manipulate the behavior of the cycle GC "
"may not work exactly as intended, but it is very unlikely to be harmful. All"
" other code will work just fine."
msgstr "总的来说，试图操纵循环垃圾回收器行为的代码可能不会完全按预期工作，但极不可能造成危害。所有其他代码将正常工作。"

#: ../../whatsnew/3.14.rst:2338
msgid ""
"Opening and reading files now executes fewer system calls. Reading a small "
"operating system cached file in full is up to 15% faster. (Contributed by "
"Cody Maloney and Victor Stinner in :gh:`120754` and :gh:`90102`.)"
msgstr ""
"打开和读取文件现在执行更少的系统调用。完整读取一个小型操作系统缓存文件的速度提高了最多15%。（由 Cody Maloney 和 Victor "
"Stinner 在 :gh:`120754` 和 :gh:`90102` 中贡献。）"

#: ../../whatsnew/3.14.rst:2347
msgid ""
":func:`Path.read_bytes <pathlib.Path.read_bytes>` now uses unbuffered mode "
"to open files, which is between 9% and 17% faster to read in full. "
"(Contributed by Cody Maloney in :gh:`120754`.)"
msgstr ""
":func:`Path.read_bytes <pathlib.Path.read_bytes>` 现在使用无缓冲模式打开文件，完整读取的速度提高了 "
"9% 到 17%。（由 Cody Maloney 在 :gh:`120754` 中贡献。）"

#: ../../whatsnew/3.14.rst:2355
msgid ""
":mod:`pdb` now supports two backends, based on either :func:`sys.settrace` "
"or :mod:`sys.monitoring`. Using the :ref:`pdb CLI <pdb-cli>` or "
":func:`breakpoint` will always use the :mod:`sys.monitoring` backend. "
"Explicitly instantiating :class:`pdb.Pdb` and its derived classes will use "
"the :func:`sys.settrace` backend by default, which is configurable. "
"(Contributed by Tian Gao in :gh:`124533`.)"
msgstr ""
":mod:`pdb` 现在支持两种后端，基于 :func:`sys.settrace` 或 :mod:`sys.monitoring`。使用 "
":ref:`pdb CLI <pdb-cli>` 或 :func:`breakpoint` 将始终使用 :mod:`sys.monitoring` "
"后端。显式实例化 :class:`pdb.Pdb` 及其派生类将默认使用 :func:`sys.settrace` 后端，这是可配置的。（由 Tian "
"Gao 在 :gh:`124533` 中贡献。）"

#: ../../whatsnew/3.14.rst:2367
msgid ""
":func:`~uuid.uuid3` and :func:`~uuid.uuid5` are now both roughly 40% faster "
"for 16-byte names and 20% faster for 1024-byte names. Performance for longer"
" names remains unchanged. (Contributed by Bénédikt Tran in :gh:`128150`.)"
msgstr ""
":func:`~uuid.uuid3` 和 :func:`~uuid.uuid5` "
"对于16字节名称的速度现在大约提高了40%，对于1024字节名称的速度提高了20%。更长名称的性能保持不变。（由 Bénédikt Tran 在 "
":gh:`128150` 中贡献。）"

#: ../../whatsnew/3.14.rst:2372
msgid ""
":func:`~uuid.uuid4` is now c. 30% faster. (Contributed by Bénédikt Tran in "
":gh:`128150`.)"
msgstr ""
":func:`~uuid.uuid4` 的速度现在提高了约30%。（由 Bénédikt Tran 在 :gh:`128150` 中贡献。）"

#: ../../whatsnew/3.14.rst:2377
msgid "zlib"
msgstr "zlib"

#: ../../whatsnew/3.14.rst:2379
msgid ""
"On Windows, `zlib-ng <https://github.com/zlib-ng/zlib-ng>`__ is now used as "
"the implementation of the :mod:`zlib` module in the default binaries. There "
"are no known incompatibilities between ``zlib-ng`` and the previously-used "
"``zlib`` implementation. This should result in better performance at all "
"compression levels."
msgstr ""
"在 Windows 上，`zlib-ng <https://github.com/zlib-ng/zlib-ng>`__ 现在用作默认二进制文件中 "
":mod:`zlib` 模块的实现。已知 ``zlib-ng`` 与之前使用的 ``zlib`` "
"实现之间没有不兼容性。这应在所有压缩级别上带来更好的性能。"

#: ../../whatsnew/3.14.rst:2386
msgid ""
"It is worth noting that ``zlib.Z_BEST_SPEED`` (``1``) may result in "
"significantly less compression than the previous implementation, whilst also"
" significantly reducing the time taken to compress."
msgstr ""
"值得注意的是，``zlib.Z_BEST_SPEED`` （``1``） 可能会导致比之前的实现显著更低的压缩率，同时显著减少压缩所需的时间。"

#: ../../whatsnew/3.14.rst:2390
msgid "(Contributed by Steve Dower in :gh:`91349`.)"
msgstr "（由 Steve Dower 在 :gh:`91349` 中贡献。）"

#: ../../whatsnew/3.14.rst:2394 ../../whatsnew/3.14.rst:3102
msgid "Removed"
msgstr "移除"

#: ../../whatsnew/3.14.rst:2399
msgid ""
"Remove the *type*, *choices*, and *metavar* parameters of "
":class:`!BooleanOptionalAction`. These have been deprecated since Python "
"3.12. (Contributed by Nikita Sobolev in :gh:`118805`.)"
msgstr ""
"移除 :class:`!BooleanOptionalAction`的 *type*, *choices* 和 *metavar* 形参。 它们自 "
"Python 3.12 起已被弃用。 （由 Nikita Sobolev 在 :gh:`118805` 中贡献。）"

#: ../../whatsnew/3.14.rst:2404
msgid ""
"Calling :meth:`~argparse.ArgumentParser.add_argument_group` on an argument "
"group now raises a :exc:`ValueError`. Similarly, "
":meth:`~argparse.ArgumentParser.add_argument_group` or "
":meth:`~argparse.ArgumentParser.add_mutually_exclusive_group` on a mutually "
"exclusive group now both raise :exc:`ValueError`\\ s. This 'nesting' was "
"never supported, often failed to work correctly, and was unintentionally "
"exposed through inheritance. This functionality has been deprecated since "
"Python 3.11. (Contributed by Savannah Ostrowski in :gh:`127186`.)"
msgstr ""
"在参数组上调用 :meth:`~argparse.ArgumentParser.add_argument_group` 现在会引发 "
":exc:`ValueError`。 类似地，在互斥组上调用 "
":meth:`~argparse.ArgumentParser.add_argument_group` 或 "
":meth:`~argparse.ArgumentParser.add_mutually_exclusive_group` 现在都会引发 "
":exc:`ValueError`。 这种‘嵌套调用’从未被支持，经常无法正常工作，且通过继承关系被意外暴露。 该功能自 Python 3.11 "
"起已被弃用。 （由 Savannah Ostrowski 在 :gh:`127186` 中贡献。）"

#: ../../whatsnew/3.14.rst:2418
msgid ""
"Remove the following classes, which have been deprecated aliases of "
":class:`~ast.Constant` since Python 3.8 and have emitted deprecation "
"warnings since Python 3.12:"
msgstr ""
"移除以下自 Python 3.8 起作为 :class:`~ast.Constant` 的已弃用别名，且自 Python 3.12 "
"起已发出弃用警告的类："

#: ../../whatsnew/3.14.rst:2422
msgid ":class:`!Bytes`"
msgstr ":class:`!Bytes`"

#: ../../whatsnew/3.14.rst:2423
msgid ":class:`!Ellipsis`"
msgstr ":class:`!Ellipsis`"

#: ../../whatsnew/3.14.rst:2424
msgid ":class:`!NameConstant`"
msgstr ":class:`!NameConstant`"

#: ../../whatsnew/3.14.rst:2425
msgid ":class:`!Num`"
msgstr ":class:`!Num`"

#: ../../whatsnew/3.14.rst:2426
msgid ":class:`!Str`"
msgstr ":class:`!Str`"

#: ../../whatsnew/3.14.rst:2428
msgid ""
"As a consequence of these removals, user-defined ``visit_Num``, "
"``visit_Str``, ``visit_Bytes``, ``visit_NameConstant`` and "
"``visit_Ellipsis`` methods on custom :class:`~ast.NodeVisitor` subclasses "
"will no longer be called when the :class:`!NodeVisitor` subclass is visiting"
" an AST. Define a ``visit_Constant`` method instead."
msgstr ""
"由于这些移除操作，当自定义的 :class:`~ast.NodeVisitor` 子类访问抽象语法树（AST）时，用户定义的 "
"``visit_Num``、``visit_Str``、``visit_Bytes``、``visit_NameConstant`` 和 "
"``visit_Ellipsis`` 方法将不再被调用。请改用定义 ``visit_Constant`` 方法。"

#: ../../whatsnew/3.14.rst:2434
msgid "(Contributed by Alex Waygood in :gh:`119562`.)"
msgstr "（由 Alex Waygood 在 :gh:`119562` 中贡献。）"

#: ../../whatsnew/3.14.rst:2436
msgid ""
"Remove the following deprecated properties on :class:`ast.Constant`, which "
"were present for compatibility with the now-removed AST classes:"
msgstr "移除以下 :class:`ast.Constant` 为兼容现已移除的 AST 类而保留的已弃用属性："

#: ../../whatsnew/3.14.rst:2439
msgid ":attr:`!Constant.n`"
msgstr ":attr:`!Constant.n`"

#: ../../whatsnew/3.14.rst:2440
msgid ":attr:`!Constant.s`"
msgstr ":attr:`!Constant.s`"

#: ../../whatsnew/3.14.rst:2442
msgid ""
"Use :attr:`!Constant.value` instead. (Contributed by Alex Waygood in "
":gh:`119562`.)"
msgstr "改用 :attr:`!Constant.value`。 （由 Alex Waygood 在 :gh:`119562` 中贡献。）"

#: ../../whatsnew/3.14.rst:2449
msgid ""
"Remove the following classes, methods, and functions, which have been "
"deprecated since Python 3.12:"
msgstr "移除以下自 Python 3.12 起已被弃用的类、方法和函数："

#: ../../whatsnew/3.14.rst:2452
msgid ":class:`!AbstractChildWatcher`"
msgstr ":class:`!AbstractChildWatcher`"

#: ../../whatsnew/3.14.rst:2453
msgid ":class:`!FastChildWatcher`"
msgstr ":class:`!FastChildWatcher`"

#: ../../whatsnew/3.14.rst:2454
msgid ":class:`!MultiLoopChildWatcher`"
msgstr ":class:`!MultiLoopChildWatcher`"

#: ../../whatsnew/3.14.rst:2455
msgid ":class:`!PidfdChildWatcher`"
msgstr ":class:`!PidfdChildWatcher`"

#: ../../whatsnew/3.14.rst:2456
msgid ":class:`!SafeChildWatcher`"
msgstr ":class:`!SafeChildWatcher`"

#: ../../whatsnew/3.14.rst:2457
msgid ":class:`!ThreadedChildWatcher`"
msgstr ":class:`!ThreadedChildWatcher`"

#: ../../whatsnew/3.14.rst:2458
msgid ":meth:`!AbstractEventLoopPolicy.get_child_watcher`"
msgstr ":meth:`!AbstractEventLoopPolicy.get_child_watcher`"

#: ../../whatsnew/3.14.rst:2459
msgid ":meth:`!AbstractEventLoopPolicy.set_child_watcher`"
msgstr ":meth:`!AbstractEventLoopPolicy.set_child_watcher`"

#: ../../whatsnew/3.14.rst:2460
msgid ":func:`!get_child_watcher`"
msgstr ":func:`!get_child_watcher`"

#: ../../whatsnew/3.14.rst:2461
msgid ":func:`!set_child_watcher`"
msgstr ":func:`!set_child_watcher`"

#: ../../whatsnew/3.14.rst:2463
msgid "(Contributed by Kumar Aditya in :gh:`120804`.)"
msgstr "（由 Kumar Aditya 在 :gh:`120804` 中贡献。）"

#: ../../whatsnew/3.14.rst:2465
msgid ""
":func:`asyncio.get_event_loop` now raises a :exc:`RuntimeError` if there is "
"no current event loop, and no longer implicitly creates an event loop."
msgstr ""
":func:`asyncio.get_event_loop` 现在如果没有当前事件循环，会引发 :exc:`RuntimeError` "
"异常，且不再隐式创建事件循环。"

#: ../../whatsnew/3.14.rst:2469
msgid "(Contributed by Kumar Aditya in :gh:`126353`.)"
msgstr "（由 Kumar Aditya 在 :gh:`126353` 中贡献。）"

#: ../../whatsnew/3.14.rst:2474
msgid ""
"There's a few patterns that use :func:`asyncio.get_event_loop`, most of them"
" can be replaced with :func:`asyncio.run`."
msgstr ""
"当前存在几种使用 :func:`asyncio.get_event_loop` 的模式，其中大多数可替换为 :func:`asyncio.run`。"

#: ../../whatsnew/3.14.rst:2477
msgid "If you're running an async function, simply use :func:`asyncio.run`."
msgstr "如果正在运行异步函数，直接使用 :func:`asyncio.run` 即可。"

#: ../../whatsnew/3.14.rst:2479 ../../whatsnew/3.14.rst:2506
#: ../../whatsnew/3.14.rst:2534
msgid "Before:"
msgstr "之前："

#: ../../whatsnew/3.14.rst:2481
msgid ""
"async def main():\n"
"    ...\n"
"\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    loop.close()"
msgstr ""
"async def main():\n"
"    ...\n"
"\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    loop.close()"

#: ../../whatsnew/3.14.rst:2493 ../../whatsnew/3.14.rst:2519
#: ../../whatsnew/3.14.rst:2550
msgid "After:"
msgstr "之后："

#: ../../whatsnew/3.14.rst:2495
msgid ""
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main())"
msgstr ""
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main())"

#: ../../whatsnew/3.14.rst:2502
msgid ""
"If you need to start something, for example, a server listening on a socket "
"and then run forever, use :func:`asyncio.run` and an :class:`asyncio.Event`."
msgstr ""
"如果需要启动某些持续运行的服务，例如监听套接字的服务器，请使用 :func:`asyncio.run` 配合 "
":class:`asyncio.Event` 实现。"

#: ../../whatsnew/3.14.rst:2508
msgid ""
"def start_server(loop): ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    start_server(loop)\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"
msgstr ""
"def start_server(loop): ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    start_server(loop)\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"

#: ../../whatsnew/3.14.rst:2521
msgid ""
"def start_server(loop): ...\n"
"\n"
"async def main():\n"
"    start_server(asyncio.get_running_loop())\n"
"    await asyncio.Event().wait()\n"
"\n"
"asyncio.run(main())"
msgstr ""
"def start_server(loop): ...\n"
"\n"
"async def main():\n"
"    start_server(asyncio.get_running_loop())\n"
"    await asyncio.Event().wait()\n"
"\n"
"asyncio.run(main())"

#: ../../whatsnew/3.14.rst:2531
msgid ""
"If you need to run something in an event loop, then run some blocking code "
"around it, use :class:`asyncio.Runner`."
msgstr "如果需要在事件循环中运行某些任务，同时在其前后执行阻塞代码，请使用 :class:`asyncio.Runner`。"

#: ../../whatsnew/3.14.rst:2536
msgid ""
"async def operation_one(): ...\n"
"def blocking_code(): ...\n"
"async def operation_two(): ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(operation_one())\n"
"    blocking_code()\n"
"    loop.run_until_complete(operation_two())\n"
"finally:\n"
"    loop.close()"
msgstr ""
"async def operation_one(): ...\n"
"def blocking_code(): ...\n"
"async def operation_two(): ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(operation_one())\n"
"    blocking_code()\n"
"    loop.run_until_complete(operation_two())\n"
"finally:\n"
"    loop.close()"

#: ../../whatsnew/3.14.rst:2552
msgid ""
"async def operation_one(): ...\n"
"def blocking_code(): ...\n"
"async def operation_two(): ...\n"
"\n"
"with asyncio.Runner() as runner:\n"
"    runner.run(operation_one())\n"
"    blocking_code()\n"
"    runner.run(operation_two())"
msgstr ""
"async def operation_one(): ...\n"
"def blocking_code(): ...\n"
"async def operation_two(): ...\n"
"\n"
"with asyncio.Runner() as runner:\n"
"    runner.run(operation_one())\n"
"    blocking_code()\n"
"    runner.run(operation_two())"

#: ../../whatsnew/3.14.rst:2565
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.14.rst:2567 ../../whatsnew/3.14.rst:2653
msgid ""
"Remove :class:`!ByteString`, which has been deprecated since Python 3.12. "
"(Contributed by Nikita Sobolev in :gh:`118803`.)"
msgstr ""
"移除 :class:`!ByteString`，它自 Python 3.12 起已被弃用。 （由 Nikita Sobolev 在 "
":gh:`118803` 中贡献。）"

#: ../../whatsnew/3.14.rst:2573
msgid "email"
msgstr "email"

#: ../../whatsnew/3.14.rst:2575
msgid ""
"Remove :func:`email.utils.localtime`'s *isdst* parameter, which was "
"deprecated in and has been ignored since Python 3.12. (Contributed by Hugo "
"van Kemenade in :gh:`118798`.)"
msgstr ""
"移除 :func:`email.utils.localtime` 函数的 *isdst* 形参。该参数自 Python 3.12 "
"起已被弃用且一直被忽略。（由 Hugo van Kemenade 在 :gh:`118798` 中贡献。）"

#: ../../whatsnew/3.14.rst:2581
msgid "importlib.abc"
msgstr "importlib.abc"

#: ../../whatsnew/3.14.rst:2583
msgid "Remove deprecated :mod:`importlib.abc` classes:"
msgstr "移除已弃用的 :mod:`importlib.abc` 类："

#: ../../whatsnew/3.14.rst:2585
msgid ""
":class:`!ResourceReader` (use "
":class:`~importlib.resources.abc.TraversableResources`)"
msgstr ""
":class:`!ResourceReader` (使用 "
":class:`~importlib.resources.abc.TraversableResources`)"

#: ../../whatsnew/3.14.rst:2587
msgid ""
":class:`!Traversable` (use :class:`~importlib.resources.abc.Traversable`)"
msgstr ""
":class:`!Traversable` (使用 :class:`~importlib.resources.abc.Traversable`)"

#: ../../whatsnew/3.14.rst:2589
msgid ""
":class:`!TraversableResources` (use "
":class:`~importlib.resources.abc.TraversableResources`)"
msgstr ""
":class:`!TraversableResources` (使用 "
":class:`~importlib.resources.abc.TraversableResources`)"

#: ../../whatsnew/3.14.rst:2592
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "（由 Jason R. Coombs 和 Hugo van Kemenade 在 :gh:`93963` 中贡献。）"

#: ../../whatsnew/3.14.rst:2596
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.14.rst:2598
msgid ""
"Remove support for copy, deepcopy, and pickle operations from "
":mod:`itertools` iterators. These have emitted a :exc:`DeprecationWarning` "
"since Python 3.12. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""
"移除 :mod:`itertools` 迭代器对复制（copy）、深度复制（deepcopy）和序列化（pickle）操作的支持。自 Python "
"3.12 起，这些操作已触发 :exc:`DeprecationWarning` 警告。（由 Raymond Hettinger 在 "
":gh:`101588` 中贡献。）"

#: ../../whatsnew/3.14.rst:2607
msgid ""
"Remove support for passing additional keyword arguments to "
":class:`~pathlib.Path`. In previous versions, any such arguments are "
"ignored. (Contributed by Barney Gale in :gh:`74033`.)"
msgstr ""
"移除向 :class:`~pathlib.Path` 传递额外关键字参数的支持。在先前版本中，此类参数均会被忽略。（由 Barney Gale 在 "
":gh:`74033` 中贡献。）"

#: ../../whatsnew/3.14.rst:2612
msgid ""
"Remove support for passing additional positional arguments to "
":meth:`.PurePath.relative_to` and :meth:`~pathlib.PurePath.is_relative_to`. "
"In previous versions, any such arguments are joined onto *other*. "
"(Contributed by Barney Gale in :gh:`78707`.)"
msgstr ""
"移除向 :meth:`.PurePath.relative_to` 和 :meth:`~pathlib.PurePath.is_relative_to`"
" 方法传递额外位置参数的支持。在先前版本中，此类参数会被拼接到 *other* 参数上。（由 Barney Gale 在 :gh:`78707` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:2619
msgid "pkgutil"
msgstr "pkgutil"

#: ../../whatsnew/3.14.rst:2621
msgid ""
"Remove the :func:`!get_loader` and :func:`!find_loader` functions, which "
"have been deprecated since Python 3.12. (Contributed by Bénédikt Tran in "
":gh:`97850`.)"
msgstr ""
"移除 :func:`!get_loader` 和 :func:`!find_loader` 函数，这两个函数自 Python 3.12 起已被弃用。（由"
" Bénédikt Tran 在 :gh:`97850` 中贡献。）"

#: ../../whatsnew/3.14.rst:2627
msgid "pty"
msgstr "pty"

#: ../../whatsnew/3.14.rst:2629
msgid ""
"Remove the :func:`!master_open` and :func:`!slave_open` functions, which "
"have been deprecated since Python 3.12. Use :func:`pty.openpty` instead. "
"(Contributed by Nikita Sobolev in :gh:`118824`.)"
msgstr ""
"移除 :func:`!master_open` 和 :func:`!slave_open` 函数，这两个函数自 Python 3.12 "
"起已被弃用。请改用 :func:`pty.openpty` 函数。"

#: ../../whatsnew/3.14.rst:2636
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.14.rst:2638
msgid ""
"Remove :data:`!version` and :data:`!version_info` from the :mod:`sqlite3` "
"module; use :data:`~sqlite3.sqlite_version` and "
":data:`~sqlite3.sqlite_version_info` for the actual version number of the "
"runtime SQLite library. (Contributed by Hugo van Kemenade in :gh:`118924`.)"
msgstr ""
"从 :mod:`sqlite3` 模块中移除 :data:`!version` 和 :data:`!version_info`；请使用 "
":data:`~sqlite3.sqlite_version` 和 :data:`~sqlite3.sqlite_version_info` "
"来获取运行时 SQLite 库的实际版本号。（由 Hugo van Kemenade 在 :gh:`118924` 中贡献。）"

#: ../../whatsnew/3.14.rst:2644
msgid ""
"Using a sequence of parameters with named placeholders now raises a "
":exc:`~sqlite3.ProgrammingError`, having been deprecated since Python 3.12. "
"(Contributed by Erlend E. Aasland in :gh:`118928` and :gh:`101693`.)"
msgstr ""
"现在，使用带具名占位符的形参序列会引发 :exc:`~sqlite3.ProgrammingError` 异常，该用法自 Python 3.12 "
"起已被弃用。（由 Erlend E. Aasland 在 :gh:`118928` 和 :gh:`101693` 中贡献。）"

#: ../../whatsnew/3.14.rst:2660
msgid ""
"Remove the :class:`!Quoter` class from :mod:`urllib.parse`, which has been "
"deprecated since Python 3.11. (Contributed by Nikita Sobolev in "
":gh:`118827`.)"
msgstr ""
"从 :mod:`urllib.parse` 模块中移除 :class:`!Quoter` 类，该类自 Python 3.11 起已被弃用。（由 "
"Nikita Sobolev 在 :gh:`118827` 中贡献。）"

#: ../../whatsnew/3.14.rst:2664
msgid ""
"Remove the :class:`!URLopener` and :class:`!FancyURLopener` classes from "
":mod:`urllib.request`, which have been deprecated since Python 3.3."
msgstr ""
"从 :mod:`urllib.request` 模块中移除 :class:`!URLopener` 和 :class:`!FancyURLopener`"
" 类，这两个类自 Python 3.3 起已被弃用。"

#: ../../whatsnew/3.14.rst:2668
msgid ""
"``myopener.open()`` can be replaced with :func:`~urllib.request.urlopen`. "
"``myopener.retrieve()`` can be replaced with "
":func:`~urllib.request.urlretrieve`. Customisations to the opener classes "
"can be replaced by passing customized handlers to "
":func:`~urllib.request.build_opener`. (Contributed by Barney Gale in "
":gh:`84850`.)"
msgstr ""
"``myopener.open()`` 可以替换为 "
":func:`~urllib.request.urlopen`。``myopener.retrieve()`` 可以替换为 "
":func:`~urllib.request.urlretrieve`。对 opener 类的自定义操作可以通过向 "
":func:`~urllib.request.build_opener` 传递定制化的处理程序来实现替换。（由 Barney Gale 在 "
":gh:`84850` 中贡献。）"

#: ../../whatsnew/3.14.rst:2677 ../../whatsnew/3.14.rst:3019
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.14.rst:2679
#: ../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ":mod:`argparse`："

#: ../../whatsnew/3.14.rst:2681
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to "
":meth:`~argparse.ArgumentParser.add_argument_group` is now deprecated. "
"(Contributed by Savannah Ostrowski in :gh:`125563`.)"
msgstr ""
"向 :meth:`~argparse.ArgumentParser.add_argument_group` 传递未公开的关键字参数 "
"*prefix_chars* 现已被弃用。（由 Savannah Ostrowski 在 :gh:`125563` 中贡献。）"

#: ../../whatsnew/3.14.rst:2685
msgid ""
"Deprecated the :class:`argparse.FileType` type converter. Anything with "
"resource management should be done downstream after the arguments are "
"parsed. (Contributed by Serhiy Storchaka in :gh:`58032`.)"
msgstr ""
"已弃用 :class:`argparse.FileType` 类型转换器。任何涉及资源管理的操作都应在参数解析完成后在下游进行。（由 Serhiy "
"Storchaka 在 :gh:`58032` 中贡献。）"

#: ../../whatsnew/3.14.rst:2690
#: ../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

#: ../../whatsnew/3.14.rst:2692
#: ../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
":func:`!asyncio.iscoroutinefunction` 已被弃用并将在 Python 3.16 中移除，请改用 :func:`inspect.iscoroutinefunction`。\n"
"（由李佳昊和 Kumar Aditya 在 :gh:`122875` 中贡献。）"

#: ../../whatsnew/3.14.rst:2697
#: ../../deprecations/pending-removal-in-3.16.rst:26
msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ":mod:`asyncio` 策略系统已被弃用并将在 Python 3.16 中移除。 具体而言，是弃用了下列类和函数："

#: ../../whatsnew/3.14.rst:2700
#: ../../deprecations/pending-removal-in-3.16.rst:29
msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ":class:`asyncio.AbstractEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2701
#: ../../deprecations/pending-removal-in-3.16.rst:30
msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ":class:`asyncio.DefaultEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2702
#: ../../deprecations/pending-removal-in-3.16.rst:31
msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsSelectorEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2703
#: ../../deprecations/pending-removal-in-3.16.rst:32
msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsProactorEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2704
#: ../../deprecations/pending-removal-in-3.16.rst:33
msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ":func:`asyncio.get_event_loop_policy`"

#: ../../whatsnew/3.14.rst:2705
#: ../../deprecations/pending-removal-in-3.16.rst:34
msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ":func:`asyncio.set_event_loop_policy`"

#: ../../whatsnew/3.14.rst:2707
#: ../../deprecations/pending-removal-in-3.16.rst:36
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""
"用户应当使用 :func:`asyncio.run` 或 :class:`asyncio.Runner` 并附带 *loop_factory* "
"以使用想要的事件循环实现。"

#: ../../whatsnew/3.14.rst:2710
#: ../../deprecations/pending-removal-in-3.16.rst:39
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr "例如，在 Windows 上使用 :class:`asyncio.SelectorEventLoop`::"

#: ../../whatsnew/3.14.rst:2712
#: ../../deprecations/pending-removal-in-3.16.rst:41
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"

#: ../../whatsnew/3.14.rst:2719
#: ../../deprecations/pending-removal-in-3.16.rst:48
msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr "（由 Kumar Aditya 在 :gh:`127949` 中贡献。）"

#: ../../whatsnew/3.14.rst:2721
msgid ""
":mod:`builtins`: Passing a complex number as the *real* or *imag* argument "
"in the :func:`complex` constructor is now deprecated; it should only be "
"passed as a single positional argument. (Contributed by Serhiy Storchaka in "
":gh:`109218`.)"
msgstr ""
":mod:`builtins`: 现在不推荐在 :func:`complex` 构造器中，将复数作为 *real* 或 *imag* "
"参数传递；复数应仅作为单个位置参数传递。（由 Serhiy Storchaka 在 :gh:`109218` 中贡献。）"

#: ../../whatsnew/3.14.rst:2727
msgid ""
":mod:`codecs`: :func:`codecs.open` is now deprecated. Use :func:`open` "
"instead. (Contributed by Inada Naoki in :gh:`133036`.)"
msgstr ""
":mod:`codecs`: :func:`codecs.open` 现已被弃用。请改用 :func:`open`。（由 Inada Naoki 在 "
":gh:`133036` 中贡献。）"

#: ../../whatsnew/3.14.rst:2731
#: ../../deprecations/pending-removal-in-3.15.rst:16
#: ../../deprecations/pending-removal-in-3.19.rst:4
msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

#: ../../whatsnew/3.14.rst:2733
msgid ""
"On non-Windows platforms, setting :attr:`.Structure._pack_` to use a MSVC-"
"compatible default memory layout is deprecated in favor of setting "
":attr:`.Structure._layout_` to ``'ms'``. (Contributed by Petr Viktorin in "
":gh:`131747`.)"
msgstr ""
"在非 Windows 平台上，现已弃用通过设置 :attr:`.Structure._pack_` 来使用 MSVC 兼容的默认内存布局，推荐改用 "
":attr:`.Structure._layout_` 并设置为 ``'ms'``。（由 Petr Viktorin 在 :gh:`131747` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:2738
msgid ""
"Calling :func:`ctypes.POINTER` on a string is deprecated. Use :ref:`ctypes-"
"incomplete-types` for self-referential structures. Also, the internal "
"``ctypes._pointer_type_cache`` is deprecated. See :func:`ctypes.POINTER` for"
" updated implementation details. (Contributed by Sergey Myrianov in "
":gh:`100926`.)"
msgstr ""
"在字符串上调用 :func:`ctypes.POINTER` 的做法已被弃用。 对于自引用的结构体请使用 :ref:`ctypes-"
"incomplete-types`。 并且，内部的 ``ctypes._pointer_type_cache`` 也已被弃用。 请参阅 "
":func:`ctypes.POINTER` 了解更新的实现细节。 （由 Sergey Myrianov 在 :gh:`100926` 中贡献。）"

#: ../../whatsnew/3.14.rst:2744
msgid ""
":mod:`functools`: Calling the Python implementation of "
":func:`functools.reduce` with *function* or *sequence* as keyword arguments "
"is now deprecated. (Contributed by Kirill Podoprigora in :gh:`121676`.)"
msgstr ""
":mod:`functools`: 现在已弃用以关键字参数形式传递 *function* 或 *sequence* 来调用 Python 实现的 "
":func:`functools.reduce`。（由 Kirill Podoprigora 在 :gh:`121676` 中贡献。）"

#: ../../whatsnew/3.14.rst:2749
msgid ""
":mod:`logging`: Support for custom logging handlers with the *strm* argument"
" is deprecated and scheduled for removal in Python 3.16. Define handlers "
"with the *stream* argument instead. (Contributed by Mariusz Felisiak in "
":gh:`115032`.)"
msgstr ""
":mod:`logging`: 现已弃用使用 *strm* 参数定义自定义日志处理器，并计划在 Python 3.16 中移除该功能。请改用 "
"*stream* 参数来定义处理器。（由 Mariusz Felisiak 在 :gh:`115032` 中贡献。）"

#: ../../whatsnew/3.14.rst:2754
msgid ""
":mod:`mimetypes`: Valid extensions start with a '.' or are empty for "
":meth:`mimetypes.MimeTypes.add_type`. Undotted extensions are deprecated and"
" will raise a :exc:`ValueError` in Python 3.16. (Contributed by Hugo van "
"Kemenade in :gh:`75223`.)"
msgstr ""
":mod:`mimetypes`: 对于 :meth:`mimetypes.MimeTypes.add_type` 方法，有效的扩展名应以 '.' "
"开头或为空字符串。无点号的扩展名已被弃用，并将在 Python 3.16 中引发 :exc:`ValueError`。（由 Hugo van "
"Kemenade 在 :gh:`75223` 中贡献。）"

#: ../../whatsnew/3.14.rst:2761
msgid ""
":mod:`!nturl2path`: This module is now deprecated. Call "
":func:`urllib.request.url2pathname` and :func:`~urllib.request.pathname2url`"
" instead. (Contributed by Barney Gale in :gh:`125866`.)"
msgstr ""
":mod:`!nturl2path`: 该模块现已弃用，请改用 :func:`urllib.request.url2pathname` 和 "
":func:`~urllib.request.pathname2url`。（由 Barney Gale 在 :gh:`125866` 中贡献。）"

#: ../../whatsnew/3.14.rst:2766
msgid ""
":mod:`os`: :term:`Soft deprecate <soft deprecated>` :func:`os.popen` and "
":func:`os.spawn* <os.spawnl>` functions. They should no longer be used to "
"write new code.  The :mod:`subprocess` module is recommended instead. "
"(Contributed by Victor Stinner in :gh:`120743`.)"
msgstr ""
":mod:`os`: 对 :func:`os.popen` 和 :func:`os.spawn* <os.spawnl>` 函数进行 "
":term:`软弃用 <soft deprecated>`，不再建议在新代码中使用。推荐改用 :mod:`subprocess` 模块。（由 "
"Victor Stinner 在 :gh:`120743` 中贡献。）"

#: ../../whatsnew/3.14.rst:2772
msgid ""
":mod:`pathlib`: :meth:`!pathlib.PurePath.as_uri` is deprecated and will be "
"removed in Python 3.19. Use :meth:`pathlib.Path.as_uri` instead. "
"(Contributed by Barney Gale in :gh:`123599`.)"
msgstr ""
":mod:`pathlib`: :meth:`!pathlib.PurePath.as_uri` 方法已被弃用，并将在 Python 3.19 "
"中移除。请改用 :meth:`pathlib.Path.as_uri`。（由 Barney Gale 在 :gh:`123599` 中贡献。）"

#: ../../whatsnew/3.14.rst:2777
msgid ""
":mod:`pdb`: The undocumented ``pdb.Pdb.curframe_locals`` attribute is now a "
"deprecated read-only property. The low overhead dynamic frame locals access "
"added in Python 3.13 by PEP 667 means the frame locals cache reference "
"previously stored in this attribute is no longer needed. Derived debuggers "
"should access ``pdb.Pdb.curframe.f_locals`` directly in Python 3.13 and "
"later versions. (Contributed by Tian Gao in :gh:`124369` and :gh:`125951`.)"
msgstr ""
":mod:`pdb`: 未文档化的 ``pdb.Pdb.curframe_locals`` 属性现已成为只读的弃用属性。由于 Python 3.13 "
"中通过 PEP 667 添加了低开销的动态帧局部变量访问机制，此前存储在该属性中的帧局部变量缓存引用已不再需要。派生调试器在 Python 3.13 "
"及更高版本中应直接访问 ``pdb.Pdb.curframe.f_locals``。（由 Tian Gao 在 :gh:`124369` 和 "
":gh:`125951` 中贡献。）"

#: ../../whatsnew/3.14.rst:2785
msgid ""
":mod:`symtable`: Deprecate :meth:`symtable.Class.get_methods` due to the "
"lack of interest. (Contributed by Bénédikt Tran in :gh:`119698`.)"
msgstr ""
":mod:`symtable`: :meth:`symtable.Class.get_methods` 因缺少适当的场景已被弃用。 （由 "
"Bénédikt Tran 在 :gh:`119698` 中贡献。）"

#: ../../whatsnew/3.14.rst:2789
msgid ""
":mod:`tkinter`: The :class:`!tkinter.Variable` methods "
":meth:`!trace_variable`, :meth:`!trace_vdelete` and :meth:`!trace_vinfo` are"
" now deprecated. Use :meth:`!trace_add`, :meth:`!trace_remove` and "
":meth:`!trace_info` instead. (Contributed by Serhiy Storchaka in "
":gh:`120220`.)"
msgstr ""
":mod:`tkinter`：:class:`!tkinter.Variable` 的方法 "
":meth:`!trace_variable`、:meth:`!trace_vdelete` 和 :meth:`!trace_vinfo` "
"现已被弃用。请改用 :meth:`!trace_add`、:meth:`!trace_remove` 和 :meth:`!trace_info`。（由 "
"Serhiy Storchaka 在 :gh:`120220` 中贡献。）"

#: ../../whatsnew/3.14.rst:2796
msgid ""
":mod:`urllib.parse`: Accepting objects with false values (like ``0`` and "
"``[]``) except empty strings, byte-like objects and ``None`` in "
":mod:`urllib.parse` functions :func:`~urllib.parse.parse_qsl` and "
":func:`~urllib.parse.parse_qs` is now deprecated. (Contributed by Serhiy "
"Storchaka in :gh:`116897`.)"
msgstr ""
":mod:`urllib.parse`: 在 :mod:`urllib.parse` 的 :func:`~urllib.parse.parse_qsl`"
" 和 :func:`~urllib.parse.parse_qs` 函数中，现已弃用接受除空字符串、类字节对象和 ``None`` 之外的假值对象 (如"
" ``0`` 和 ``[]``) 的行为。 （由 Serhiy Storchaka 在 :gh:`116897` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending removal in Python 3.15"
msgstr "计划在 Python 3.15 中移除"

#: ../../deprecations/pending-removal-in-3.15.rst:4
#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr "导入系统："

#: ../../deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set "
":attr:`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is "
"deprecated. In Python 3.15, :attr:`!__cached__` will cease to be set or take"
" into consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"当设置 :attr:`__spec__.cached <importlib.machinery.ModuleSpec.cached>` "
"失败时在模块上设置 :attr:`~module.__cached__` 的做法已被弃用。 在 Python 3.15 "
"中，:attr:`!__cached__` 将不会再被导入系统或标准库纳入考虑。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set "
":attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is "
"deprecated. In Python 3.15, :attr:`!__package__` will cease to be set or "
"take into consideration by the import system or standard library. "
"(:gh:`97879`)"
msgstr ""
"当设备 :attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` "
"失败时在模块上设置 :attr:`~module.__package__` 的做法已被弃用。 在 Python 3.15 "
"中，:attr:`!__package__` 将不会再被导入系统或标准库纳入考虑。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated"
" since Python 3.13."
msgstr "未写入文档的 :func:`!ctypes.SetPointerType` 函数自 Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

#: ../../deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has"
" been deprecated since Python 3.13. No direct replacement exists. *Anything*"
" is better than CGI to interface a web server with a request handler."
msgstr ""
"过时且很少被使用的 :class:`~http.server.CGIHTTPRequestHandler` 自 Python 3.13 起已被弃用。 "
"不存在直接的替代品。 对于建立带有请求处理器的 Web 服务程序来说 *任何东西* 都比 CGI 要好。"

#: ../../deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"用于 :program:`python -m http.server` 命令行界面的 :option:`!--cgi` 旗标自 Python 3.13 "
"起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:32
#: ../../deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "``load_module()`` 方法：改用 ``exec_module()``。"

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ":class:`locale`:"
msgstr ":class:`locale`:"

#: ../../deprecations/pending-removal-in-3.15.rst:38
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 "
"(:gh:`90817`), but has been postponed to Python 3.15. Use "
":func:`~locale.getlocale`, :func:`~locale.setlocale`, and "
":func:`~locale.getencoding` instead. (Contributed by Hugo van Kemenade in "
":gh:`111187`.)"
msgstr ""
":func:`~locale.getdefaultlocale` 函数自 Python 3.11 起已被弃用。 最初计划在 Python 3.13 "
"中移除它 (:gh:`90817`)，但已被推迟至 Python 3.15。 请改用 :func:`~locale.getlocale`, "
":func:`~locale.setlocale` 和 :func:`~locale.getencoding`。 （由 Hugo van "
"Kemenade 在 :gh:`111187` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.15.rst:46
msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:48
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use "
":func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` 自 Python 3.13 起已被弃用。 请使用 "
":func:`os.path.isreserved` 来检测 Windows 上的保留路径。"

#: ../../deprecations/pending-removal-in-3.15.rst:52
msgid ":mod:`platform`:"
msgstr ":mod:`platform`:"

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` 自 Python 3.13 起已被弃用。 此函数仅对 Jython 支持有用，具有令人困惑的 "
"API，并且大部分未经测试。"

#: ../../deprecations/pending-removal-in-3.15.rst:58
#: ../../deprecations/pending-removal-in-3.16.rst:96
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
":func:`sysconfig.is_python_build` 的 *check_home* 参数自 Python 3.12 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:63
msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

#: ../../deprecations/pending-removal-in-3.15.rst:65
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does"
" not permit any arguments, but the C version allows any number of positional"
" or keyword arguments, ignoring every argument."
msgstr ""
"在 Python 3.15 中 :func:`~threading.RLock` 将不再接受参数。 传入参数的做法自 Python 3.14 "
"起已被弃用，因为 Python 版本不接受任何参数，而 C 版本允许任意数量的位置或关键字参数，但会忽略所有参数。"

#: ../../deprecations/pending-removal-in-3.15.rst:71
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:73
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: 访问 :attr:`~codeobject.co_lnotab` 的做法自 3.10 起已根据 "
":pep:`626` 被弃用并曾计划在 3.12 中移除，但在 3.12 中实际仅设置了 :exc:`DeprecationWarning`。 可能会在"
" 3.15 中移除。 （由 Nikita Sobolev 在 :gh:`101866` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.15.rst:80
#: ../../deprecations/pending-removal-in-3.17.rst:4
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: ../../deprecations/pending-removal-in-3.15.rst:82
msgid ""
"The undocumented keyword argument syntax for creating "
":class:`~typing.NamedTuple` classes (for example, ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``) has been deprecated since Python "
"3.13. Use the class-based syntax or the functional syntax instead."
msgstr ""
"未写入文档的用于创建 :class:`~typing.NamedTuple` 类的关键字参数语法（例如 ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``）自 Python 3.13 起已被弃用。 请改用基于类的语法或函数语法。"

#: ../../deprecations/pending-removal-in-3.15.rst:88
msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""
"当使用 :class:`~typing.TypedDict` 的函数式语法时，不向 *fields* 形参传递值 (``TD = "
"TypedDict(\"TD\")``) 或传递 ``None`` (``TD = TypedDict(\"TD\", None)``) 的做法自 "
"Python 3.13 起已被弃用。 请改用 ``class TD(TypedDict): pass`` 或 ``TD = "
"TypedDict(\"TD\", {})`` 来创建一个零字段的 TypedDict。"

#: ../../deprecations/pending-removal-in-3.15.rst:95
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module,"
" it has yet to be supported by any major type checker."
msgstr ""
":func:`typing.no_type_check_decorator` 装饰器自 Python 3.13 起已被弃用。 存在于 "
":mod:`typing` 模块八年之后，它仍未被任何主要类型检查器所支持。"

#: ../../deprecations/pending-removal-in-3.15.rst:100
msgid ":mod:`wave`:"
msgstr ":mod:`wave`："

#: ../../deprecations/pending-removal-in-3.15.rst:102
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and "
":meth:`~wave.Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` "
"and :class:`~wave.Wave_write` classes have been deprecated since Python "
"3.13."
msgstr ""
":class:`~wave.Wave_read` 和 :class:`~wave.Wave_write` 类的 "
":meth:`~wave.Wave_read.getmark`, :meth:`!setmark` 和 "
":meth:`~wave.Wave_read.getmarkers` 方法自 Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:107
msgid ":mod:`zipimport`:"
msgstr ":mod:`zipimport`:"

#: ../../deprecations/pending-removal-in-3.15.rst:109
msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""
":meth:`~zipimport.zipimporter.load_module` 自 Python 3.10 起已被弃用。请改用 :meth:`~zipimport.zipimporter.exec_module` 。\n"
"（由李佳昊在 :gh:`125746` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:2
#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr "计划在 Python 3.16 中移除"

#: ../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set "
":attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is "
"deprecated. In Python 3.16, :attr:`!__loader__` will cease to be set or "
"taken into consideration by the import system or the standard library."
msgstr ""
"当设置 :attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>` "
"失败时在模块上设置 :attr:`~module.__loader__` 的做法已被弃用。 在 Python 3.16 "
"中，:attr:`!__loader__` 将不会再被设置或是被导入系统或标准库纳入考虑。"

#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ":mod:`array`:"

#: ../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"``'u'`` 格式代码 (:c:type:`wchar_t`) 自 Python 3.3 起已在文档中弃用并自 Python 3.13 "
"起在运行时弃用。 对于 Unicode 字符请改用 ``'w'`` 格式代码 (:c:type:`Py_UCS4`)。"

#: ../../deprecations/pending-removal-in-3.16.rst:50
#: ../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

#: ../../deprecations/pending-removal-in-3.16.rst:52
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"对布尔类型 ``~True`` 或 ``~False`` 执行按位取反的操作自 Python 3.12 起已被弃用，因为它会产生奇怪和不直观的结果 "
"(``-2`` and ``-1``)。 请改用 ``not x`` 来对布尔值执行逻辑否操作。 "
"对于需要对下层整数执行按位取反操作的少数场合，请显式地将其转换为 ``int`` (``~int(x)``)。"

#: ../../deprecations/pending-removal-in-3.16.rst:59
msgid ":mod:`functools`:"
msgstr ":mod:`functools`："

#: ../../deprecations/pending-removal-in-3.16.rst:61
msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""
"调用 :func:`functools.reduce` 的 Python 实现并传入 *function* 或 *sequence* "
"作为关键字参数的做法自 Python 3.14 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.16.rst:64
msgid ":mod:`logging`:"
msgstr ":mod:`logging`："

#: ../../deprecations/pending-removal-in-3.16.rst:66
msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""
"使用 *strm* 参数对自定义日志记录处理器提供支持的做法已被弃用并计划在 Python 3.16 中移除。 改为使用 *stream* "
"参数定义处理器。 （由 Mariusz Felisiak 在 :gh:`115032` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:70
msgid ":mod:`mimetypes`:"
msgstr ":mod:`mimetypes`:"

#: ../../deprecations/pending-removal-in-3.16.rst:72
msgid ""
"Valid extensions start with a '.' or are empty for "
":meth:`mimetypes.MimeTypes.add_type`. Undotted extensions are deprecated and"
" will raise a :exc:`ValueError` in Python 3.16. (Contributed by Hugo van "
"Kemenade in :gh:`75223`.)"
msgstr ""
"有效扩展以 \". \" 开头或在 :meth:`mimetypes.MimeTypes.add_type` 为空。 未加点的扩展已弃用，在 "
"Python 3.16 中将引发 :exc:`ValueError`。 （由 Hugo van Kemenade 在 :gh:`75223` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:78
msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

#: ../../deprecations/pending-removal-in-3.16.rst:80
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is"
" now an alias of :exc:`RuntimeError`."
msgstr ""
":class:`!ExecError` 异常自 Python 3.14 起已被弃用。 它自 Python 3.4 起就未被 :mod:`!shutil`"
" 中的任何函数所使用，现在是 :exc:`RuntimeError` 的一个别名。"

#: ../../deprecations/pending-removal-in-3.16.rst:85
msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

#: ../../deprecations/pending-removal-in-3.16.rst:87
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
":meth:`Class.get_methods <symtable.Class.get_methods>` 方法自 Python 3.14 起被弃用。"

#: ../../deprecations/pending-removal-in-3.16.rst:90
msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

#: ../../deprecations/pending-removal-in-3.16.rst:92
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated"
" since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
":func:`~sys._enablelegacywindowsfsencoding` 函数自 Python 3.13 起被弃用。 请改用 "
":envvar:`PYTHONLEGACYWINDOWSFSENCODING` 环境变量。"

#: ../../deprecations/pending-removal-in-3.16.rst:98
msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""
"自Python 3.14 起，:func:`!sysconfig.expand_makefile_vars` 函数已被弃用。请使用 "
":func:`sysconfig.get_paths` 的 ``vars`` 参数代替。"

#: ../../deprecations/pending-removal-in-3.16.rst:102
msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

#: ../../deprecations/pending-removal-in-3.16.rst:104
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr "未写入文档也未被使用的 :attr:`!TarFile.tarfile` 属性自 Python 3.13 起被弃用。"

#: ../../deprecations/pending-removal-in-3.17.rst:2
msgid "Pending removal in Python 3.17"
msgstr "计划在 Python 3.17 中移除"

#: ../../deprecations/pending-removal-in-3.17.rst:6
msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection"
" helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"在 Python 3.14 之前，旧式的联合是通过私有类 ``typing._UnionGenericAlias`` "
"实现的。实现已不再需要该类，但为向后兼容性保留了该类，并计划在 Python 3.17 中删除。 用户应使用记录在案的内省助手函数，如 "
":func:`typing.get_origin` 和 :func:`typing.get_args`，而不是依赖于私有的实现细节。"

#: ../../deprecations/pending-removal-in-3.19.rst:2
msgid "Pending removal in Python 3.19"
msgstr "计划在 Python 3.19 中移除"

#: ../../deprecations/pending-removal-in-3.19.rst:6
msgid ""
"Implicitly switching to the MSVC-compatible struct layout by setting "
":attr:`~ctypes.Structure._pack_` but not :attr:`~ctypes.Structure._layout_` "
"on non-Windows platforms."
msgstr ""
"在非 Windows 平台上，通过设置 :attr:`~ctypes.Structure._pack_` 而非 "
":attr:`~ctypes.Structure._layout_` ，隐式切换到与 MSVC 兼容的结构布局。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr "计划在未来版本中移除"

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr "以下API将会被移除，尽管具体时间还未确定。"

#: ../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are "
"deprecated."
msgstr "嵌套参数组和嵌套互斥组已被弃用 。"

#: ../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to "
":meth:`~argparse.ArgumentParser.add_argument_group` is now deprecated."
msgstr ""
"将未写入文档的关键字参数 *prefix_chars* 传递给 "
":meth:`~argparse.ArgumentParser.add_argument_group` 的做法现在已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr ":class:`argparse.FileType` 类型转换器已弃用 。"

#: ../../deprecations/pending-removal-in-future.rst:18
msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``。"

#: ../../deprecations/pending-removal-in-future.rst:19
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature"
" is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"生成器: ``throw(type, exc, tb)`` 和 ``athrow(type, exc, tb)`` 签名已被弃用：请改用 "
"``throw(exc)`` 和 ``athrow(exc)``，即单参数签名。"

#: ../../deprecations/pending-removal-in-future.rst:22
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords "
":keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, "
":keyword:`in`, :keyword:`is` and :keyword:`or`.  In a future release it will"
" be changed to a syntax error. (:gh:`87999`)"
msgstr ""
"目前 Python 接受数字类字面值后面紧跟关键字的写法，例如 ``0in x``, ``1or x``, ``0if 1else 2``。 它允许像 "
"``[0x1for x in y]`` 这样令人困惑且有歧义的表达式 (它可以被解读为 ``[0x1 for x in y]`` 或者 ``[0x1f "
"or x in y]``)。 如果数字类字面值后面紧跟关键字 :keyword:`and`, :keyword:`else`, "
":keyword:`for`, :keyword:`if`, :keyword:`in`, :keyword:`is` 和 :keyword:`or` "
"中的一个将会引发语法警告。 在未来的版本中它将改为语法错误。 (:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type:"
" these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"对 ``__index__()`` 和 ``__int__()`` 方法返回非 int 类型的支持：将要求这些方法必须返回 :class:`int` "
"的子类的实例。"

#: ../../deprecations/pending-removal-in-future.rst:33
msgid ""
"Support for ``__float__()`` method returning a strict subclass of "
":class:`float`: these methods will be required to return an instance of "
":class:`float`."
msgstr ""
"对 ``__float__()`` 方法返回 :class:`float` 的子类的支持：将要求这些方法必须返回 :class:`float` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:36
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of "
":class:`complex`: these methods will be required to return an instance of "
":class:`complex`."
msgstr ""
"对 ``__complex__()`` 方法返回 :class:`complex` 的子类的支持：将要求这些方法必须返回 "
":class:`complex` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:39
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "将 ``int()`` 委托给 ``__trunc__()`` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:40
msgid ""
"Passing a complex number as the *real* or *imag* argument in the "
":func:`complex` constructor is now deprecated; it should only be passed as a"
" single positional argument. (Contributed by Serhiy Storchaka in "
":gh:`109218`.)"
msgstr ""
"传入一个复数作为 :func:`complex` 构造器中的 *real* 或 *imag* 参数的做法现在已被弃用；它应当仅作为单个位置参数被传入。 "
"（由 Serhiy Storchaka 在 :gh:`109218` 中贡献。）.)"

#: ../../deprecations/pending-removal-in-future.rst:45
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and "
":data:`calendar.FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: ``calendar.January`` 和 ``calendar.February`` 常量已被弃用并由 "
":data:`calendar.JANUARY` 和 :data:`calendar.FEBRUARY` 替代。 （由 Prince Roshan 在 "
":gh:`103636` 中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:50
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. "
"(:gh:`133038`)"
msgstr ":mod:`codecs`：:func:`codecs.open` 请改用 :func:`open` 。 (:gh:`133038`)"

#: ../../deprecations/pending-removal-in-future.rst:52
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ":attr:`codeobject.co_lnotab`: 改用 :meth:`codeobject.co_lines` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:55
msgid ":mod:`datetime`:"
msgstr ":mod:`datetime`:"

#: ../../deprecations/pending-removal-in-future.rst:57
msgid ""
":meth:`~datetime.datetime.utcnow`: use "
"``datetime.datetime.now(tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: 使用 "
"``datetime.datetime.now(tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:59
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use "
"``datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: 使用 "
"``datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:62
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: 复数值必须是一个整数。"

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` *debug_override* 形参已被弃用：改用 "
"*optimization* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

#: ../../deprecations/pending-removal-in-future.rst:71
msgid "``EntryPoints`` tuple interface."
msgstr "``EntryPoints`` 元组接口。"

#: ../../deprecations/pending-removal-in-future.rst:72
msgid "Implicit ``None`` on return values."
msgstr "返回值中隐式的 ``None``。"

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: ``warn()`` 方法自 Python 3.3 起已被弃用，请改用 "
":meth:`~logging.warning`。"

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ":mod:`mailbox`: 对 StringIO 输入和文本模式的使用已被弃用，改用 BytesIO 和二进制模式。"

#: ../../deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: 在多线程的进程中调用 :func:`os.register_at_fork`。"

#: ../../deprecations/pending-removal-in-future.rst:82
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is"
" deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: 使用元组值作为 *exc_info* 形参的做法已被弃用，应使用异常实例。"

#: ../../deprecations/pending-removal-in-future.rst:85
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and"
" replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: 现在对于正则表达式中的数字分组引用和分组名称将应用更严格的规则。 现在只接受 ASCII 数字序列作为数字引用。 "
"字节串模式和替换字符串中的分组名称现在只能包含 ASCII 字母和数字以及下划线。 （由 Serhiy Storchaka 在 :gh:`91760` "
"中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ":mod:`!sre_compile`, :mod:`!sre_constants` 和 :mod:`!sre_parse` 模块。"

#: ../../deprecations/pending-removal-in-future.rst:94
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in"
" Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree` 的 *onerror* 形参在 Python 3.12 中已被弃用；请改用 "
"*onexc* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:97
msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` 选项和协议："

#: ../../deprecations/pending-removal-in-future.rst:99
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` 不带 protocol 参数的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:100
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and "
":meth:`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` 和 "
":meth:`!selected_npn_protocol` 已被弃用：请改用 ALPN。"

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:110
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:111
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:112
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` 的方法："

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Condition.notifyAll`: use "
":meth:`~threading.Condition.notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: 使用 "
":meth:`~threading.Condition.notify_all`。"

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ":meth:`!threading.Event.isSet`: 使用 :meth:`~threading.Event.is_set`。"

#: ../../deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use "
":attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: 使用 "
":attr:`threading.Thread.daemon` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:120
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use "
":attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: 使用 "
":attr:`threading.Thread.name` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ""
":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: 使用 :meth:`threading.current_thread`。"

#: ../../deprecations/pending-removal-in-future.rst:123
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`: 使用 :meth:`threading.active_count`。"

#: ../../deprecations/pending-removal-in-future.rst:125
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)。"

#: ../../deprecations/pending-removal-in-future.rst:127
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
"内部类 ``typing._UnionGenericAlias`` 不再用于实现 "
":class:`typing.Union`。为了保护使用该私有类的用户的兼容性 ，将至少在 Python 3.17 之前提供兼容性。 （由 Jelle "
"Zijlstra 在 :gh:`105499` 中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:132
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: 从测试用例返回不为 ``None`` 的值的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:135
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ":mod:`urllib.parse` 函数已被弃用：改用 :func:`~urllib.parse.urlparse`"

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splithost()``"
msgstr "``splithost()``"

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:141
msgid "``splitport()``"
msgstr "``splitport()``"

#: ../../deprecations/pending-removal-in-future.rst:142
msgid "``splitquery()``"
msgstr "``splitquery()``"

#: ../../deprecations/pending-removal-in-future.rst:143
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:144
msgid "``splittype()``"
msgstr "``splittype()``"

#: ../../deprecations/pending-removal-in-future.rst:145
msgid "``splituser()``"
msgstr "``splituser()``"

#: ../../deprecations/pending-removal-in-future.rst:146
msgid "``splitvalue()``"
msgstr "``splitvalue()``"

#: ../../deprecations/pending-removal-in-future.rst:147
msgid "``to_bytes()``"
msgstr "``to_bytes()``"

#: ../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` 不应执行部分写入。"

#: ../../deprecations/pending-removal-in-future.rst:152
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an "
":class:`~xml.etree.ElementTree.Element` is deprecated. In a future release "
"it will always return ``True``. Prefer explicit ``len(elem)`` or ``elem is "
"not None`` tests instead."
msgstr ""
":mod:`xml.etree.ElementTree`: 对 :class:`~xml.etree.ElementTree.Element` "
"的真值测试已被弃用。 在未来的发布版中它将始终返回 ``True``。 建议改用显式的 ``len(elem)`` 或 ``elem is not "
"None`` 测试。"

#: ../../deprecations/pending-removal-in-future.rst:157
msgid ""
":func:`sys._clear_type_cache` is deprecated: use "
":func:`sys._clear_internal_caches` instead."
msgstr ""
":func:`sys._clear_type_cache` 已弃用，请改用 :func:`sys._clear_internal_caches` 。"

#: ../../whatsnew/3.14.rst:2817
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.14.rst:2819
msgid ""
"Replaced the opcode ``BINARY_SUBSCR`` by :opcode:`BINARY_OP` with oparg "
"``NB_SUBSCR``. (Contributed by Irit Katriel in :gh:`100239`.)"
msgstr ""
"将操作码 ``BINARY_SUBSCR`` 替换为带有操作数 ``NB_SUBSCR`` 的 :opcode:`BINARY_OP` 操作码。（由 "
"Irit Katriel 在 :gh:`100239` 中贡献。）"

#: ../../whatsnew/3.14.rst:2824
msgid "Build changes"
msgstr "构建变化"

#: ../../whatsnew/3.14.rst:2826
msgid ""
"GNU Autoconf 2.72 is now required to generate :file:`configure`. "
"(Contributed by Erlend Aasland in :gh:`115765`.)"
msgstr ""
"生成 :file:`configure` 文件现在需要 GNU Autoconf 2.72 版本。（由 Erlend Aasland 在 "
":gh:`115765` 中贡献。）"

#: ../../whatsnew/3.14.rst:2829
msgid ""
"``#pragma``-based linking with ``python3*.lib`` can now be switched off with"
" :c:expr:`Py_NO_LINK_LIB`. (Contributed by Jean-Christophe Fillion-Robin in "
":gh:`82909`.)"
msgstr ""
"现在可以通过 :c:expr:`Py_NO_LINK_LIB` 关闭基于 ``#pragma`` 与 ``python3*.lib`` 的链接。（由 "
"Jean-Christophe Fillion-Robin 在 :gh:`82909` 中贡献。）"

#: ../../whatsnew/3.14.rst:2836
msgid "PEP 761: Discontinuation of PGP signatures"
msgstr "PEP 761：停止使用 PGP 签名"

#: ../../whatsnew/3.14.rst:2838
msgid ""
"PGP signatures will not be available for CPython 3.14 and onwards. Users "
"verifying artifacts must use `Sigstore verification materials`_ for "
"verifying CPython artifacts. This change in release process is specified in "
":pep:`761`."
msgstr ""
"从 CPython 3.14 版本开始，将不再提供 PGP 签名。验证发布产物的用户必须使用 `Sigstore 验证材料`_ 来验证 CPython "
"的发布包。这一发布流程的变更已在 :pep:`761` 中明确规定。"

#: ../../whatsnew/3.14.rst:2847
msgid "C API changes"
msgstr "C API 的变化"

#: ../../whatsnew/3.14.rst:2852
msgid ""
"Add :c:func:`PyLong_GetSign` function to get the sign of :class:`int` "
"objects. (Contributed by Sergey B Kirpichev in :gh:`116560`.)"
msgstr ""
"新增 :c:func:`PyLong_GetSign` 函数用于获取 :class:`int` 对象的符号位。（由 Sergey B Kirpichev"
" 在 :gh:`116560` 中贡献。）"

#: ../../whatsnew/3.14.rst:2855
msgid ""
"Add a new :c:type:`PyUnicodeWriter` API to create a Python :class:`str` "
"object:"
msgstr "新增 :c:type:`PyUnicodeWriter` API 用于创建 Python :class:`str` 对象："

#: ../../whatsnew/3.14.rst:2858
msgid ":c:func:`PyUnicodeWriter_Create`"
msgstr ":c:func:`PyUnicodeWriter_Create`"

#: ../../whatsnew/3.14.rst:2859
msgid ":c:func:`PyUnicodeWriter_DecodeUTF8Stateful`"
msgstr ":c:func:`PyUnicodeWriter_DecodeUTF8Stateful`"

#: ../../whatsnew/3.14.rst:2860
msgid ":c:func:`PyUnicodeWriter_Discard`"
msgstr ":c:func:`PyUnicodeWriter_Discard`"

#: ../../whatsnew/3.14.rst:2861
msgid ":c:func:`PyUnicodeWriter_Finish`"
msgstr ":c:func:`PyUnicodeWriter_Finish`"

#: ../../whatsnew/3.14.rst:2862
msgid ":c:func:`PyUnicodeWriter_Format`"
msgstr ":c:func:`PyUnicodeWriter_Format`"

#: ../../whatsnew/3.14.rst:2863
msgid ":c:func:`PyUnicodeWriter_WriteASCII`"
msgstr ":c:func:`PyUnicodeWriter_WriteASCII`"

#: ../../whatsnew/3.14.rst:2864
msgid ":c:func:`PyUnicodeWriter_WriteChar`"
msgstr ":c:func:`PyUnicodeWriter_WriteChar`"

#: ../../whatsnew/3.14.rst:2865
msgid ":c:func:`PyUnicodeWriter_WriteRepr`"
msgstr ":c:func:`PyUnicodeWriter_WriteRepr`"

#: ../../whatsnew/3.14.rst:2866
msgid ":c:func:`PyUnicodeWriter_WriteStr`"
msgstr ":c:func:`PyUnicodeWriter_WriteStr`"

#: ../../whatsnew/3.14.rst:2867
msgid ":c:func:`PyUnicodeWriter_WriteSubstring`"
msgstr ":c:func:`PyUnicodeWriter_WriteSubstring`"

#: ../../whatsnew/3.14.rst:2868
msgid ":c:func:`PyUnicodeWriter_WriteUCS4`"
msgstr ":c:func:`PyUnicodeWriter_WriteUCS4`"

#: ../../whatsnew/3.14.rst:2869
msgid ":c:func:`PyUnicodeWriter_WriteUTF8`"
msgstr ":c:func:`PyUnicodeWriter_WriteUTF8`"

#: ../../whatsnew/3.14.rst:2870
msgid ":c:func:`PyUnicodeWriter_WriteWideChar`"
msgstr ":c:func:`PyUnicodeWriter_WriteWideChar`"

#: ../../whatsnew/3.14.rst:2872
msgid "(Contributed by Victor Stinner in :gh:`119182`.)"
msgstr "（由 Victor Stinner 在 :gh:`119182` 中贡献。）"

#: ../../whatsnew/3.14.rst:2874
msgid ""
"Add :c:func:`PyIter_NextItem` to replace :c:func:`PyIter_Next`, which has an"
" ambiguous return value. (Contributed by Irit Katriel and Erlend Aasland in "
":gh:`105201`.)"
msgstr ""
"新增 :c:func:`PyIter_NextItem` 函数以替代返回值含义模糊的 :c:func:`PyIter_Next` 函数。（由 Irit "
"Katriel 和 Erlend Aasland 在 :gh:`105201` 中贡献。）"

#: ../../whatsnew/3.14.rst:2878
msgid ""
"Add :c:func:`PyLong_IsPositive`, :c:func:`PyLong_IsNegative` and "
":c:func:`PyLong_IsZero` for checking if :c:type:`PyLongObject` is positive, "
"negative, or zero, respectively. (Contributed by James Roy and Sergey B "
"Kirpichev in :gh:`126061`.)"
msgstr ""
"新增 :c:func:`PyLong_IsPositive`、:c:func:`PyLong_IsNegative` 和 "
":c:func:`PyLong_IsZero` 三个函数，分别用于检查 :c:type:`PyLongObject` 是否为正数、负数或零。（由 "
"James Roy 和 Sergey B Kirpichev 在 :gh:`126061` 中贡献。）"

#: ../../whatsnew/3.14.rst:2883
msgid ""
"Add new functions to convert C ``<stdint.h>`` numbers from/to Python "
":class:`int`:"
msgstr "新增用于在C语言 ``<stdint.h>`` 数字类型与Python :class:`int` 对象之间相互转换的新函数："

#: ../../whatsnew/3.14.rst:2886
msgid ":c:func:`PyLong_AsInt32`"
msgstr ":c:func:`PyLong_AsInt32`"

#: ../../whatsnew/3.14.rst:2887
msgid ":c:func:`PyLong_AsInt64`"
msgstr ":c:func:`PyLong_AsInt64`"

#: ../../whatsnew/3.14.rst:2888
msgid ":c:func:`PyLong_AsUInt32`"
msgstr ":c:func:`PyLong_AsUInt32`"

#: ../../whatsnew/3.14.rst:2889
msgid ":c:func:`PyLong_AsUInt64`"
msgstr ":c:func:`PyLong_AsUInt64`"

#: ../../whatsnew/3.14.rst:2890
msgid ":c:func:`PyLong_FromInt32`"
msgstr ":c:func:`PyLong_FromInt32`"

#: ../../whatsnew/3.14.rst:2891
msgid ":c:func:`PyLong_FromInt64`"
msgstr ":c:func:`PyLong_FromInt64`"

#: ../../whatsnew/3.14.rst:2892
msgid ":c:func:`PyLong_FromUInt32`"
msgstr ":c:func:`PyLong_FromUInt32`"

#: ../../whatsnew/3.14.rst:2893
msgid ":c:func:`PyLong_FromUInt64`"
msgstr ":c:func:`PyLong_FromUInt64`"

#: ../../whatsnew/3.14.rst:2895
msgid "(Contributed by Victor Stinner in :gh:`120389`.)"
msgstr "（由 Victor Stinner 在 :gh:`120389` 中贡献。）"

#: ../../whatsnew/3.14.rst:2897
msgid ""
"Add :c:func:`PyBytes_Join(sep, iterable) <PyBytes_Join>` function, similar "
"to ``sep.join(iterable)`` in Python. (Contributed by Victor Stinner in "
":gh:`121645`.)"
msgstr ""
"新增 :c:func:`PyBytes_Join(sep, iterable) <PyBytes_Join>` 函数，其功能类似于Python中的 "
"``sep.join(iterable)`` 操作。（由Victor Stinner在 :gh:`121645` 中贡献。）"

#: ../../whatsnew/3.14.rst:2901
msgid ""
"Add :c:func:`Py_HashBuffer` to compute and return the hash value of a "
"buffer. (Contributed by Antoine Pitrou and Victor Stinner in :gh:`122854`.)"
msgstr ""
"新增 :c:func:`Py_HashBuffer` 函数用于计算并返回缓冲区的哈希值。（由 Antoine Pitrou 和 Victor "
"Stinner 在 :gh:`122854` 中贡献。）"

#: ../../whatsnew/3.14.rst:2904
msgid ""
"Add functions to get and set the current runtime Python configuration "
"(:pep:`741`):"
msgstr "新增用于获取和设置当前运行时Python配置的函数 (参见 :pep:`741`)："

#: ../../whatsnew/3.14.rst:2907
msgid ":c:func:`PyConfig_Get`"
msgstr ":c:func:`PyConfig_Get`"

#: ../../whatsnew/3.14.rst:2908
msgid ":c:func:`PyConfig_GetInt`"
msgstr ":c:func:`PyConfig_GetInt`"

#: ../../whatsnew/3.14.rst:2909
msgid ":c:func:`PyConfig_Set`"
msgstr ":c:func:`PyConfig_Set`"

#: ../../whatsnew/3.14.rst:2910
msgid ":c:func:`PyConfig_Names`"
msgstr ":c:func:`PyConfig_Names`"

#: ../../whatsnew/3.14.rst:2914
msgid "Add functions to configure the Python initialization (:pep:`741`):"
msgstr "新增用于配置Python初始化过程的函数 (参见 :pep:`741`)："

#: ../../whatsnew/3.14.rst:2916
msgid ":c:func:`Py_InitializeFromInitConfig`"
msgstr ":c:func:`Py_InitializeFromInitConfig`"

#: ../../whatsnew/3.14.rst:2917
msgid ":c:func:`PyInitConfig_AddModule`"
msgstr ":c:func:`PyInitConfig_AddModule`"

#: ../../whatsnew/3.14.rst:2918
msgid ":c:func:`PyInitConfig_Create`"
msgstr ":c:func:`PyInitConfig_Create`"

#: ../../whatsnew/3.14.rst:2919
msgid ":c:func:`PyInitConfig_Free`"
msgstr ":c:func:`PyInitConfig_Free`"

#: ../../whatsnew/3.14.rst:2920
msgid ":c:func:`PyInitConfig_FreeStrList`"
msgstr ":c:func:`PyInitConfig_FreeStrList`"

#: ../../whatsnew/3.14.rst:2921
msgid ":c:func:`PyInitConfig_GetError`"
msgstr ":c:func:`PyInitConfig_GetError`"

#: ../../whatsnew/3.14.rst:2922
msgid ":c:func:`PyInitConfig_GetExitCode`"
msgstr ":c:func:`PyInitConfig_GetExitCode`"

#: ../../whatsnew/3.14.rst:2923
msgid ":c:func:`PyInitConfig_GetInt`"
msgstr ":c:func:`PyInitConfig_GetInt`"

#: ../../whatsnew/3.14.rst:2924
msgid ":c:func:`PyInitConfig_GetStr`"
msgstr ":c:func:`PyInitConfig_GetStr`"

#: ../../whatsnew/3.14.rst:2925
msgid ":c:func:`PyInitConfig_GetStrList`"
msgstr ":c:func:`PyInitConfig_GetStrList`"

#: ../../whatsnew/3.14.rst:2926
msgid ":c:func:`PyInitConfig_HasOption`"
msgstr ":c:func:`PyInitConfig_HasOption`"

#: ../../whatsnew/3.14.rst:2927
msgid ":c:func:`PyInitConfig_SetInt`"
msgstr ":c:func:`PyInitConfig_SetInt`"

#: ../../whatsnew/3.14.rst:2928
msgid ":c:func:`PyInitConfig_SetStr`"
msgstr ":c:func:`PyInitConfig_SetStr`"

#: ../../whatsnew/3.14.rst:2929
msgid ":c:func:`PyInitConfig_SetStrList`"
msgstr ":c:func:`PyInitConfig_SetStrList`"

#: ../../whatsnew/3.14.rst:2933
msgid ""
"Add a new import and export API for Python :class:`int` objects "
"(:pep:`757`):"
msgstr "新增用于Python :class:`int`对象的导入导出API（参见 :pep:`757`）："

#: ../../whatsnew/3.14.rst:2935
msgid ":c:func:`PyLong_GetNativeLayout`"
msgstr ":c:func:`PyLong_GetNativeLayout`"

#: ../../whatsnew/3.14.rst:2936
msgid ":c:func:`PyLong_Export`"
msgstr ":c:func:`PyLong_Export`"

#: ../../whatsnew/3.14.rst:2937
msgid ":c:func:`PyLong_FreeExport`"
msgstr ":c:func:`PyLong_FreeExport`"

#: ../../whatsnew/3.14.rst:2938
msgid ":c:func:`PyLongWriter_Create`"
msgstr ":c:func:`PyLongWriter_Create`"

#: ../../whatsnew/3.14.rst:2939
msgid ":c:func:`PyLongWriter_Finish`"
msgstr ":c:func:`PyLongWriter_Finish`"

#: ../../whatsnew/3.14.rst:2940
msgid ":c:func:`PyLongWriter_Discard`"
msgstr ":c:func:`PyLongWriter_Discard`"

#: ../../whatsnew/3.14.rst:2942
msgid ""
"(Contributed by Sergey B Kirpichev and Victor Stinner in :gh:`102471`.)"
msgstr "（由 Sergey B Kirpichev 和 Victor Stinner 在 :gh:`102471` 中贡献。）"

#: ../../whatsnew/3.14.rst:2944
msgid ""
"Add :c:func:`PyType_GetBaseByToken` and :c:data:`Py_tp_token` slot for "
"easier superclass identification, which attempts to resolve the `type "
"checking issue <https://peps.python.org/pep-0630/#type-checking>`__ "
"mentioned in :pep:`630`. (Contributed in :gh:`124153`.)"
msgstr ""
"新增 :c:func:`PyType_GetBaseByToken` 函数和 :c:data:`Py_tp_token` "
"类型槽，以简化超类识别功能。该特性尝试解决 :pep:`630` 中提到的 `类型检查问题 "
"<https://peps.python.org/pep-0630/#type-checking>`__。（贡献记录于 :gh:`124153`）"

#: ../../whatsnew/3.14.rst:2949
msgid ""
"Add :c:func:`PyUnicode_Equal` function to the limited C API: test if two "
"strings are equal. (Contributed by Victor Stinner in :gh:`124502`.)"
msgstr ""
"在受限C API中新增 :c:func:`PyUnicode_Equal` 函数，用于比较两个字符串是否相等。（由Victor Stinner在 "
":gh:`124502` 中贡献。）"

#: ../../whatsnew/3.14.rst:2953
msgid ""
"Add :c:func:`PyType_Freeze` function to make a type immutable. (Contributed "
"by Victor Stinner in :gh:`121654`.)"
msgstr ""
"新增 :c:func:`PyType_Freeze` 函数用于将类型设为不可变。（由 Victor Stinner 在 :gh:`121654` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:2956
msgid ""
"Add :c:func:`PyUnstable_Object_EnableDeferredRefcount` for enabling deferred"
" reference counting, as outlined in :pep:`703`."
msgstr ""
"新增 :c:func:`PyUnstable_Object_EnableDeferredRefcount` 函数用于启用延迟引用计数功能，该功能如 "
":pep:`703` 所述。"

#: ../../whatsnew/3.14.rst:2959
msgid ""
"Add :c:func:`PyMonitoring_FireBranchLeftEvent` and "
":c:func:`PyMonitoring_FireBranchRightEvent` for generating :monitoring-"
"event:`BRANCH_LEFT` and :monitoring-event:`BRANCH_RIGHT` events, "
"respectively."
msgstr ""
"新增 :c:func:`PyMonitoring_FireBranchLeftEvent` 和 "
":c:func:`PyMonitoring_FireBranchRightEvent` 函数，分别用于生成 :monitoring-"
"event:`BRANCH_LEFT` 和 :monitoring-event:`BRANCH_RIGHT` 监控事件。"

#: ../../whatsnew/3.14.rst:2964
msgid ""
"Add :c:func:`Py_fopen` function to open a file. Similar to the "
":c:func:`!fopen` function, but the *path* parameter is a Python object and "
"an exception is set on error. Add also :c:func:`Py_fclose` function to close"
" a file. (Contributed by Victor Stinner in :gh:`127350`.)"
msgstr ""
"新增 :c:func:`Py_fopen` 函数用于打开文件。该函数与C标准库的 :c:func:`!fopen` 功能类似，但其 *path* "
"形参接受Python对象，并在出错时设置异常。同时新增 :c:func:`Py_fclose` 函数用于关闭文件。（由Victor Stinner在 "
":gh:`127350` 中贡献。）"

#: ../../whatsnew/3.14.rst:2970
msgid ""
"The ``k`` and ``K`` formats in :c:func:`PyArg_ParseTuple` and similar "
"functions now use :meth:`~object.__index__` if available, like all other "
"integer formats. (Contributed by Serhiy Storchaka in :gh:`112068`.)"
msgstr ""
"在 :c:func:`PyArg_ParseTuple` 及相关函数中，``k`` 和 ``K`` 格式现在会优先使用 "
":meth:`~object.__index__` 方法（如果可用），与其他整数格式的处理方式保持一致。（由 Serhiy Storchaka 在 "
":gh:`112068` 中贡献。）"

#: ../../whatsnew/3.14.rst:2975
msgid ""
"Add macros :c:func:`Py_PACK_VERSION` and :c:func:`Py_PACK_FULL_VERSION` for "
"bit-packing Python version numbers. (Contributed by Petr Viktorin in "
":gh:`128629`.)"
msgstr ""
"新增 :c:func:`Py_PACK_VERSION` 和 :c:func:`Py_PACK_FULL_VERSION` "
"宏，用于对Python版本号进行位打包操作。（由Petr Viktorin在 :gh:`128629` 中贡献。）"

#: ../../whatsnew/3.14.rst:2979
msgid ""
"Add :c:func:`PyUnstable_IsImmortal` for determining whether an object is "
":term:`immortal`, for debugging purposes."
msgstr ""
"新增 :c:func:`PyUnstable_IsImmortal` 函数，用于调试目的判断对象是否为 :term:`immortal` 。"

#: ../../whatsnew/3.14.rst:2982
msgid ""
"Add :c:func:`PyImport_ImportModuleAttr` and "
":c:func:`PyImport_ImportModuleAttrString` helper functions to import a "
"module and get an attribute of the module. (Contributed by Victor Stinner in"
" :gh:`128911`.)"
msgstr ""
"新增 :c:func:`PyImport_ImportModuleAttr` 和 "
":c:func:`PyImport_ImportModuleAttrString` 辅助函数，用于导入模块并获取该模块的属性。（由 Victor "
"Stinner 在 :gh:`128911` 中贡献。）"

#: ../../whatsnew/3.14.rst:2987
msgid ""
"Add support for a new ``p`` format unit in :c:func:`Py_BuildValue` that "
"allows taking a C integer and produces a Python :class:`bool` object. "
"(Contributed by Pablo Galindo in :issue:`45325`.)"
msgstr ""
"在 :c:func:`Py_BuildValue` 函数中新增对 ``p`` 格式单元的支持，可将C语言整数转换为Python "
":class:`bool` 对象。（由Pablo Galindo在 :issue:`45325` 中贡献）"

#: ../../whatsnew/3.14.rst:2991
msgid ""
"Add :c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` to determine if "
"an object is a unique temporary object on the interpreter's operand stack. "
"This can be used in some cases as a replacement for checking if "
":c:func:`Py_REFCNT` is ``1`` for Python objects passed as arguments to C API"
" functions."
msgstr ""
"新增 :c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` "
"函数，用于判断对象是否为解释器操作数栈上的唯一临时对象。在某些情况下，该函数可替代通过检查 :c:func:`Py_REFCNT` 是否为 ``1`` "
"来判断传递给C API函数的Python对象是否为临时对象的方法。"

#: ../../whatsnew/3.14.rst:2996
msgid ""
"Add :c:func:`PyUnstable_Object_IsUniquelyReferenced` as a replacement for "
"``Py_REFCNT(op) == 1`` on :term:`free threaded <free threading>` builds. "
"(Contributed by Peter Bierma in :gh:`133140`.)"
msgstr ""
"新增 :c:func:`PyUnstable_Object_IsUniquelyReferenced` 函数，作为 :term:`自由线程 <free "
"threading>` 构建环境下 ``Py_REFCNT(op) == 1`` 的替代方案。（由 Peter Bierma 在 "
":gh:`133140` 中贡献）"

#: ../../whatsnew/3.14.rst:3002
msgid "Limited C API changes"
msgstr "受限 C API 的变化"

#: ../../whatsnew/3.14.rst:3004
msgid ""
"In the limited C API 3.14 and newer, :c:func:`Py_TYPE` and "
":c:func:`Py_REFCNT` are now implemented as an opaque function call to hide "
"implementation details. (Contributed by Victor Stinner in :gh:`120600` and "
":gh:`124127`.)"
msgstr ""
"在受限C API 3.14及更高版本中，:c:func:`Py_TYPE` 和 :c:func:`Py_REFCNT` "
"现在通过不透明函数调用来实现，以隐藏实现细节。（由Victor Stinner在 :gh:`120600` 和 :gh:`124127` 中贡献）"

#: ../../whatsnew/3.14.rst:3009
msgid ""
"Remove the :c:macro:`PySequence_Fast_GET_SIZE`, "
":c:macro:`PySequence_Fast_GET_ITEM` and :c:macro:`PySequence_Fast_ITEMS` "
"macros from the limited C API, since these macros never worked in the "
"limited C API. Keep :c:func:`PySequence_Fast` in the limited C API. "
"(Contributed by Victor Stinner in :gh:`91417`.)"
msgstr ""
"从受限C API中移除了 "
":c:macro:`PySequence_Fast_GET_SIZE`、:c:macro:`PySequence_Fast_GET_ITEM` 和 "
":c:macro:`PySequence_Fast_ITEMS` 这三个宏，因为这些宏在受限C API中从未正常工作。保留 "
":c:func:`PySequence_Fast` 函数在受限C API中。（由Victor Stinner在 :gh:`91417` 中贡献）"

#: ../../whatsnew/3.14.rst:3021
msgid ""
"The :c:macro:`!Py_HUGE_VAL` macro is :term:`soft deprecated`, use "
":c:macro:`!Py_INFINITY` instead. (Contributed by Sergey B Kirpichev in "
":gh:`120026`.)"
msgstr ""
":c:macro:`!Py_HUGE_VAL` 宏已被 :term:`soft deprecated`，请改用 "
":c:macro:`!Py_INFINITY`。（由 Sergey B Kirpichev 在 :gh:`120026` 中贡献。）"

#: ../../whatsnew/3.14.rst:3025
msgid ""
"Macros :c:macro:`!Py_IS_NAN`, :c:macro:`!Py_IS_INFINITY` and "
":c:macro:`!Py_IS_FINITE` are :term:`soft deprecated`, use instead "
":c:macro:`!isnan`, :c:macro:`!isinf` and :c:macro:`!isfinite` available from"
" :file:`math.h` since C99.  (Contributed by Sergey B Kirpichev in "
":gh:`119613`.)"
msgstr ""
"宏 :c:macro:`!Py_IS_NAN`、:c:macro:`!Py_IS_INFINITY` 和 "
":c:macro:`!Py_IS_FINITE` 已被 :term:`soft deprecated`，请改用自 C99 标准起在 "
":file:`math.h` 中提供的 :c:macro:`!isnan`、:c:macro:`!isinf` 和 "
":c:macro:`!isfinite`。（由 Sergey B Kirpichev 在 :gh:`119613` 中贡献。）"

#: ../../whatsnew/3.14.rst:3031
msgid ""
"Non-tuple sequences are deprecated as argument for the ``(items)`` format "
"unit in :c:func:`PyArg_ParseTuple` and other :ref:`argument parsing <arg-"
"parsing>` functions if *items* contains format units which store a "
":ref:`borrowed buffer <c-arg-borrowed-buffer>` or a :term:`borrowed "
"reference`. (Contributed by Serhiy Storchaka in :gh:`50333`.)"
msgstr ""
"在 :c:func:`PyArg_ParseTuple` 及其他 :ref:`参数解析函数 <arg-parsing>` 中，若 *items* "
"包含存储 :ref:`借用缓冲区 <c-arg-borrowed-buffer>` 或 :term:`borrowed reference` "
"的格式单元，则非元组序列作为 ``(items)`` 格式单元参数的行为已被弃用。（由 Serhiy Storchaka 在 :gh:`50333` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:3038
msgid ""
"The previously undocumented function :c:func:`PySequence_In` is :term:`soft "
"deprecated`. Use :c:func:`PySequence_Contains` instead. (Contributed by Yuki"
" Kobayashi in :gh:`127896`.)"
msgstr ""
"原先未文档化的函数 :c:func:`PySequence_In` 已被 :term:`soft deprecated`，请改用 "
":c:func:`PySequence_Contains`。（由 Yuki Kobayashi 在 :gh:`127896` 中贡献。）"

#: ../../whatsnew/3.14.rst:3044
msgid ""
"The ``PyMonitoring_FireBranchEvent`` function is deprecated and should be "
"replaced with calls to :c:func:`PyMonitoring_FireBranchLeftEvent` and "
":c:func:`PyMonitoring_FireBranchRightEvent`."
msgstr ""
"``PyMonitoring_FireBranchEvent`` 函数已被弃用，应替换为调用 "
":c:func:`PyMonitoring_FireBranchLeftEvent` 和 "
":c:func:`PyMonitoring_FireBranchRightEvent`。"

#: ../../whatsnew/3.14.rst:3048
msgid ""
"The following private functions are deprecated and planned for removal in "
"Python 3.18:"
msgstr "以下私有函数已被弃用，并计划在 Python 3.18 中移除："

#: ../../whatsnew/3.14.rst:3051
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:6
msgid ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."
msgstr ":c:func:`!_PyBytes_Join`：使用 :c:func:`PyBytes_Join`。"

#: ../../whatsnew/3.14.rst:3052
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:7
msgid ""
":c:func:`!_PyDict_GetItemStringWithError`: use "
":c:func:`PyDict_GetItemStringRef`."
msgstr ""
":c:func:`!_PyDict_GetItemStringWithError`: 使用 "
":c:func:`PyDict_GetItemStringRef`。"

#: ../../whatsnew/3.14.rst:3053
msgid ":c:func:`!_PyDict_Pop()`: use :c:func:`PyDict_Pop`."
msgstr ":c:func:`!_PyDict_Pop()`: 使用 :c:func:`PyDict_Pop`."

#: ../../whatsnew/3.14.rst:3054
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:9
msgid ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."
msgstr ":c:func:`!_PyLong_Sign()`：使用 :c:func:`PyLong_GetSign`。"

#: ../../whatsnew/3.14.rst:3055
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:10
msgid ""
":c:func:`!_PyLong_FromDigits` and :c:func:`!_PyLong_New`: use "
":c:func:`PyLongWriter_Create`."
msgstr ""
":c:func:`!_PyLong_FromDigits` 和 :c:func:`!_PyLong_New`：使用 "
":c:func:`PyLongWriter_Create`."

#: ../../whatsnew/3.14.rst:3057
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:12
msgid ""
":c:func:`!_PyThreadState_UncheckedGet`: use "
":c:func:`PyThreadState_GetUnchecked`."
msgstr ""
":c:func:`!_PyThreadState_UncheckedGet`：使用 "
":c:func:`PyThreadState_GetUnchecked`。"

#: ../../whatsnew/3.14.rst:3058
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:13
msgid ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."
msgstr ":c:func:`!_PyUnicode_AsString`：使用 :c:func:`PyUnicode_AsUTF8`。"

#: ../../whatsnew/3.14.rst:3059
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:14
msgid ""
":c:func:`!_PyUnicodeWriter_Init`: replace ``_PyUnicodeWriter_Init(&writer)``"
" with :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Init`: 将 ``_PyUnicodeWriter_Init(&writer)`` 替换为 "
":c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`。"

#: ../../whatsnew/3.14.rst:3062
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:17
msgid ""
":c:func:`!_PyUnicodeWriter_Finish`: replace "
"``_PyUnicodeWriter_Finish(&writer)`` with "
":c:func:`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Finish`: 将 ``_PyUnicodeWriter_Finish(&writer)`` "
"替换为 :c:func:`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`。"

#: ../../whatsnew/3.14.rst:3065
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:20
msgid ""
":c:func:`!_PyUnicodeWriter_Dealloc`: replace "
"``_PyUnicodeWriter_Dealloc(&writer)`` with "
":c:func:`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Dealloc`: 将 ``_PyUnicodeWriter_Dealloc(&writer)``"
" 替换为 :c:func:`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`。"

#: ../../whatsnew/3.14.rst:3068
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:23
msgid ""
":c:func:`!_PyUnicodeWriter_WriteChar`: replace "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` with "
":c:func:`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteChar`: 将 "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."

#: ../../whatsnew/3.14.rst:3071
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:26
msgid ""
":c:func:`!_PyUnicodeWriter_WriteStr`: replace "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` with "
":c:func:`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteStr`: 将 ``_PyUnicodeWriter_WriteStr(&writer,"
" str)`` 替换为 :c:func:`PyUnicodeWriter_WriteStr(writer, str) "
"<PyUnicodeWriter_WriteStr>`。"

#: ../../whatsnew/3.14.rst:3074
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:29
msgid ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: replace "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` with "
":c:func:`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: 将 "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`。"

#: ../../whatsnew/3.14.rst:3077
msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with "
":c:func:`PyUnicodeWriter_WriteASCII(writer, str) "
"<PyUnicodeWriter_WriteASCII>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: 请将 "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteASCII(writer, str) "
"<PyUnicodeWriter_WriteASCII>`。"

#: ../../whatsnew/3.14.rst:3080
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:35
msgid ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: replace "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` with "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: 将 "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`。"

#: ../../whatsnew/3.14.rst:3083
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:40
msgid ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."
msgstr ":c:func:`!_Py_HashPointer`：使用 :c:func:`Py_HashPointer`。"

#: ../../whatsnew/3.14.rst:3084
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:41
msgid ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."
msgstr ":c:func:`!_Py_fopen_obj`：使用 :c:func:`Py_fopen`。"

#: ../../whatsnew/3.14.rst:3086
msgid ""
"The `pythoncapi-compat project`_ can be used to get these new public "
"functions on Python 3.13 and older. (Contributed by Victor Stinner in "
":gh:`128863`.)"
msgstr ""
"`pythoncapi-compat 项目`_ 可用于在 Python 3.13 及更早版本中获取这些新的公共函数。（由 Victor Stinner "
"在 :gh:`128863` 中贡献。）"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use "
":c:func:`PyImport_ImportModule` instead."
msgstr ""
"The :c:func:`PyImport_ImportModuleNoBlock`: 改用 "
":c:func:`PyImport_ImportModule`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:6
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use "
":c:func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project "
"<https://github.com/python/pythoncapi-compat/>`__ can be used to get "
":c:func:`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""
":c:func:`PyWeakref_GetObject` 和 :c:func:`PyWeakref_GET_OBJECT`: 改用 "
":c:func:`PyWeakref_GetRef`。 在 Python 3.12 及更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取 "
":c:func:`PyWeakref_GetRef`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:10
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use "
":c:type:`wchar_t` instead."
msgstr ""
":c:type:`Py_UNICODE` 类型和 :c:macro:`!Py_UNICODE_WIDE` 宏：改用 :c:type:`wchar_t`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:12
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ":c:func:`!PyUnicode_AsDecodedObject`: 改用 :c:func:`PyCodec_Decode`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:14
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead;"
" Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: 改用 :c:func:`PyCodec_Decode`；请注意某些编解码器"
" (例如 \"base64\") 可能返回 :class:`str` 以外的类型，比如 :class:`bytes`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:17
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ":c:func:`!PyUnicode_AsEncodedObject`: 改用 :c:func:`PyCodec_Encode`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:19
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead;"
" Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: 使用 :c:func:`PyCodec_Encode` "
"代替；请注意，某些编解码器（如 \"base64\"）可能返回 :class:`bytes` 之外的类型，如 :class:`str`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:22
msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr "Python 初始化函数， Python 3.13 中弃用："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:24
msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""
":c:func:`Py_GetPath`:使用  :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>`   (:data:`sys.path`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:27
msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use "
":c:func:`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if "
":ref:`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetPrefix`:使用  :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) 代替。如果需要处理 :ref:`virtual "
"environments<venv-def>` ，请使用 :c:func:`PyConfig_Get(\"prefix\") "
"<PyConfig_Get>` (:data:`sys.prefix`) 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:32
msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use "
":c:func:`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` "
"(:data:`sys.exec_prefix`) if :ref:`virtual environments <venv-def>` need to "
"be handled."
msgstr ""
":c:func:`Py_GetExecPrefix`:使用 "
":c:func:`PyConfig_Get(\"base_exec_prefix\")<PyConfig_Get>` "
"(:data:`sys.base_exec_prefix`) 代替。如果需要处理 :ref:`virtual environments<venv-"
"def>` ，请使用 :c:func:`PyConfig_Get(\"exec_prefix\")<PyConfig_Get>` "
"(:data:`sys.exec_prefix`) 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:38
msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`:使用 :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:41
msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramName`:使用 :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:44
msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: 使用 :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` 或 :envvar:`PYTHONHOME` 环境变量代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:48
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat/>`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and "
"older."
msgstr ""
"在 Python 3.13 和更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取 :c:func:`PyConfig_Get`"
" 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:52
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr "用于配置 Python 的初始化的函数，在 Python 3.11 中已弃用："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:54
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgvEx()`: 改为设置 :c:member:`PyConfig.argv`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:56
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgv()`: 改为设置 :c:member:`PyConfig.argv`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:58
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: 改为设置 :c:member:`PyConfig.program_name`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:60
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ":c:func:`!Py_SetPythonHome()`: 改为设置 :c:member:`PyConfig.home`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:62
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and "
":data:`!warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: 改为清除 :data:`sys.warnoptions` 和 "
":data:`!warnings.filters`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:65
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` instead."
msgstr ":c:func:`Py_InitializeFromConfig` API 应与 :c:type:`PyConfig` 一起使用。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:68
msgid "Global configuration variables:"
msgstr "全局配置变量："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:70
msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or "
":c:func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DebugFlag`: 改用 :c:member:`PyConfig.parser_debug` 或 "
":c:func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:73
msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or "
":c:func:`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: 改用 :c:member:`PyConfig.verbose` 或 "
":c:func:`PyConfig_Get(\"verbose\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:76
msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or "
":c:func:`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_QuietFlag`: 改用 :c:member:`PyConfig.quiet` 或 "
":c:func:`PyConfig_Get(\"quiet\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:79
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or "
":c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: 改用 :c:member:`PyConfig.interactive` 或 "
":c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:82
msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or "
":c:func:`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InspectFlag`: 改用 :c:member:`PyConfig.inspect` 或 "
":c:func:`PyConfig_Get(\"inspect\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:85
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or "
":c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: 改用 :c:member:`PyConfig.optimization_level` or "
":c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:88
msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or "
":c:func:`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: 改用 :c:member:`PyConfig.site_import` 或 "
":c:func:`PyConfig_Get(\"site_import\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:91
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or "
":c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: 改用 :c:member:`PyConfig.bytes_warning` or "
":c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:94
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or "
":c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: 使用 :c:member:`PyConfig.pathconfig_warnings` 或 "
":c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:97
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: 使用 :c:member:`PyConfig.use_environment` 或"
" :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:100
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: 使用 :c:member:`PyConfig.write_bytecode` 或 "
":c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:103
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use "
":c:member:`PyConfig.user_site_directory` or "
":c:func:`PyConfig_Get(\"user_site_directory\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: 使用 :c:member:`PyConfig.user_site_directory`"
" 或 :c:func:`PyConfig_Get(\"user_site_directory\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:106
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or "
":c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: 使用 :c:member:`PyConfig.buffered_stdio` 或 "
":c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:109
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: 使用 :c:member:`PyConfig.use_hash_seed` 和 "
":c:member:`PyConfig.hash_seed` 或 :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:113
msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or "
":c:func:`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: 使用 :c:member:`PyConfig.isolated` 或 "
":c:func:`PyConfig_Get(\"isolated\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:116
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use "
":c:member:`PyPreConfig.legacy_windows_fs_encoding` or "
":c:func:`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` "
"instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: 使用 "
":c:member:`PyPreConfig.legacy_windows_fs_encoding` 或 "
":c:func:`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:119
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use "
":c:member:`PyConfig.legacy_windows_stdio` or "
":c:func:`PyConfig_Get(\"legacy_windows_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: 使用 "
":c:member:`PyConfig.legacy_windows_stdio` 或 "
":c:func:`PyConfig_Get(\"legacy_windows_stdio\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:122
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, "
":c:var:`!Py_HasFileSystemDefaultEncoding`: Use "
":c:member:`PyConfig.filesystem_encoding` or "
":c:func:`PyConfig_Get(\"filesystem_encoding\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`, "
":c:var:`!Py_HasFileSystemDefaultEncoding`: 使用 "
":c:member:`PyConfig.filesystem_encoding` 或 "
":c:func:`PyConfig_Get(\"filesystem_encoding\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:125
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use "
":c:member:`PyConfig.filesystem_errors` or "
":c:func:`PyConfig_Get(\"filesystem_errors\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: 使用 "
":c:member:`PyConfig.filesystem_errors` 或 "
":c:func:`PyConfig_Get(\"filesystem_errors\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:128
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or "
":c:func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see "
":c:func:`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: 使用 :c:member:`PyPreConfig.utf8_mode` 或 "
":c:func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` 代替。 (参见 "
":c:func:`Py_PreInitialize`)。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:133
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be "
"used to get these options at runtime."
msgstr ""
":c:func:`Py_InitializeFromConfig` API 应与 :c:type:`PyConfig` "
"一起使用，以设置这些选项。或者使用 :c:func:`PyConfig_Get` 在运行时获取这些选项。"

#: ../../deprecations/c-api-pending-removal-in-3.16.rst:4
msgid "The bundled copy of ``libmpdec``."
msgstr "捆绑的 ``libmpdec`` 副本。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:2
msgid "Pending removal in Python 3.18"
msgstr "计划在 Python 3.18 中移除"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:4
msgid "Deprecated private functions (:gh:`128863`):"
msgstr "弃用的私有函数（:gh:`128863`）："

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:8
msgid ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."
msgstr ":c:func:`!_PyDict_Pop()`：:c:func:`PyDict_Pop`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:32
msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: 将 "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:38
msgid ":c:func:`!_PyUnicodeWriter_Prepare`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_Prepare`: (无替代)。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:39
msgid ":c:func:`!_PyUnicodeWriter_PrepareKind`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_PrepareKind`: (无替代)。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:43
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat/>`__ can be used to get these new public functions on Python 3.13 and"
" older."
msgstr ""
"在 Python 3.13 和更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取这些新的公有函数。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr "以下 API 已被弃用，将被移除，但目前尚未确定移除日期。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: 自 Python 3.8 起不再需要。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ":c:func:`PyErr_Fetch`: 改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: 改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ":c:func:`PyErr_Restore`: 改用 :c:func:`PyErr_SetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: 改用 :c:func:`PyModule_GetFilenameObject`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ":c:func:`PyOS_AfterFork`: 改用 :c:func:`PyOS_AfterFork_Child`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: 改用 :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: 自 Python 3.12 起不再需要"

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ""
":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ":c:func:`!PyErr_Display`: 改用 :c:func:`PyErr_DisplayException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: 改用 :c:func:`!_PyErr_ChainExceptions1`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ":c:member:`!PyBytesObject.ob_shash` 成员：改为调用 :c:func:`PyObject_Hash`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid "Thread Local Storage (TLS) API:"
msgstr "线程本地存储 (TLS) API："

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ":c:func:`PyThread_create_key`: 改用 :c:func:`PyThread_tss_alloc`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:33
msgid ""
":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ":c:func:`PyThread_delete_key`: 改用 :c:func:`PyThread_tss_free`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ":c:func:`PyThread_set_key_value`: 改用 :c:func:`PyThread_tss_set`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:37
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ":c:func:`PyThread_get_key_value`: 改用 :c:func:`PyThread_tss_get`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:39
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: 改用 :c:func:`PyThread_tss_delete`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:41
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: 自 Python 3.7 起不再需要。"

#: ../../whatsnew/3.14.rst:3104
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases was deprecated since 3.12 and now raises a :exc:`TypeError`."
msgstr ""
"使用可变基类创建 :c:data:`不可变类型 <Py_TPFLAGS_IMMUTABLETYPE>` 的行为自 Python 3.12 "
"起已被弃用，现会引发 :exc:`TypeError`。"

#: ../../whatsnew/3.14.rst:3107
msgid ""
"Remove ``PyDictObject.ma_version_tag`` member which was deprecated since "
"Python 3.12. Use the :c:func:`PyDict_AddWatcher` API instead. (Contributed "
"by Sam Gross in :gh:`124296`.)"
msgstr ""
"移除自 Python 3.12 起已被弃用的 ``PyDictObject.ma_version_tag`` 成员变量，请改用 "
":c:func:`PyDict_AddWatcher` API。 （由 Sam Gross 在 :gh:`124296` 中贡献。）"

#: ../../whatsnew/3.14.rst:3111
msgid ""
"Remove the private ``_Py_InitializeMain()`` function. It was a "
":term:`provisional API` added to Python 3.8 by :pep:`587`. (Contributed by "
"Victor Stinner in :gh:`129033`.)"
msgstr ""
"移除私有函数 ``_Py_InitializeMain()``。该函数是 :pep:`587` 在 Python 3.8 中引入的 "
":term:`provisional API`。 （由 Victor Stinner 在 :gh:`129033` 中贡献。）"

#: ../../whatsnew/3.14.rst:3115
msgid ""
"The undocumented APIs :c:macro:`!Py_C_RECURSION_LIMIT` and "
":c:member:`!PyThreadState.c_recursion_remaining`, added in 3.13, are removed"
" without a deprecation period. Please use :c:func:`Py_EnterRecursiveCall` to"
" guard against runaway recursion in C code. (Removed in :gh:`133079`, see "
"also :gh:`130396`.)"
msgstr ""
"移除 Python 3.13 中新增的未文档化 API: :c:macro:`!Py_C_RECURSION_LIMIT` 和 "
":c:member:`!PyThreadState.c_recursion_remaining`，未经弃用期直接移除。 请在 C 代码中使用 "
":c:func:`Py_EnterRecursiveCall` 来防范无限递归问题。（移除于 :gh:`133079`，另请参见 "
":gh:`130396`。）"

#: ../../whatsnew/3.14.rst:3124
msgid "Porting to Python 3.14"
msgstr "移植到 Python 3.14"

#: ../../whatsnew/3.14.rst:3126
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.14.rst:3131
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.14.rst:3133
msgid ""
":class:`functools.partial` is now a method descriptor. Wrap it in "
":func:`staticmethod` if you want to preserve the old behavior. (Contributed "
"by Serhiy Storchaka and Dominykas Grigonis in :gh:`121027`.)"
msgstr ""
":class:`functools.partial` 现在是一个方法描述符。若需保持原有行为，请将其包装在 :func:`staticmethod` "
"中。（由 Serhiy Storchaka 和 Dominykas Grigonis 在 :gh:`121027` 中贡献。）"

#: ../../whatsnew/3.14.rst:3137
msgid ""
"The :ref:`garbage collector is now incremental <whatsnew314-incremental-"
"gc>`, which means that the behavior of :func:`gc.collect` changes slightly:"
msgstr ""
":ref:`垃圾回收器现在是增量的 <whatsnew314-incremental-gc>`，这意味着 :func:`gc.collect` "
"的行为略有变化："

#: ../../whatsnew/3.14.rst:3144
msgid ""
"The :func:`locale.nl_langinfo` function now temporarily sets the "
"``LC_CTYPE`` locale in some cases. This temporary change affects other "
"threads. (Contributed by Serhiy Storchaka in :gh:`69998`.)"
msgstr ""
":func:`locale.nl_langinfo` 函数现在会在某些情况下临时设置 ``LC_CTYPE`` "
"区域设置。这种临时修改会影响其他线程。（由 Serhiy Storchaka 在 :gh:`69998` 中贡献。）"

#: ../../whatsnew/3.14.rst:3149
msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`, causing "
"changes in some behaviors. See :ref:`above <whatsnew314-typing-union>` for "
"more details. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
":class:`types.UnionType` 现在是 :class:`typing.Union` 的别名，这会导致部分行为发生变化。更多细节请参见 "
":ref:`上文 <whatsnew314-typing-union>`。（由 Jelle Zijlstra 在 :gh:`105499` 中贡献。）"

#: ../../whatsnew/3.14.rst:3154
msgid ""
"The runtime behavior of annotations has changed in various ways; see "
":ref:`above <whatsnew314-pep649>` for details. While most code that "
"interacts with annotations should continue to work, some undocumented "
"details may behave differently."
msgstr ""
"注解的运行时行为在多个方面发生了变化；详见 :ref:`上文 "
"<whatsnew314-pep649>`。虽然大多数与注解交互的代码应该能继续正常工作，但某些未记录的细节可能会有不同的表现。"

#: ../../whatsnew/3.14.rst:3161
msgid "Changes in the C API"
msgstr "C API 的变化"

#: ../../whatsnew/3.14.rst:3163
msgid ""
":c:func:`Py_Finalize` now deletes all interned strings. This is backwards "
"incompatible to any C extension that holds onto an interned string after a "
"call to :c:func:`Py_Finalize` and is then reused after a call to "
":c:func:`Py_Initialize`.  Any issues arising from this behavior will "
"normally result in crashes during the execution of the subsequent call to "
":c:func:`Py_Initialize` from accessing uninitialized memory. To fix, use an "
"address sanitizer to identify any use-after-free coming from an interned "
"string and deallocate it during module shutdown. (Contributed by Eddie "
"Elizondo in :gh:`113601`.)"
msgstr ""
":c:func:`Py_Finalize` 现在会删除所有已驻留字符串。 这一变更将不向下兼容任何在调用 :c:func:`Py_Finalize` "
"后仍拥有驻留字符串并在后续调用 :c:func:`Py_Initialize` 时重复使用的 C 扩展模块。 此行为引发的任何问题通常会导致在后续 "
":c:func:`Py_Initialize` 调用执行期间因访问未初始化内存而引发崩溃。 "
"要修复此问题，应使用地址静化器来标识任何来自驻留字符串的释放后使用并在模块关闭期间释放它。 （由 Eddie Elizondo 在 "
":gh:`113601` 中贡献。）"

#: ../../whatsnew/3.14.rst:3173
msgid ""
"The :ref:`Unicode Exception Objects <unicodeexceptions>` C API now raises a "
":exc:`TypeError` if its exception argument is not a :exc:`UnicodeError` "
"object. (Contributed by Bénédikt Tran in :gh:`127691`.)"
msgstr ""
":ref:`Unicode异常对象 <unicodeexceptions>` C API现会在异常参数不是 :exc:`UnicodeError` "
"对象时抛出 :exc:`TypeError` 异常。（由Bénédikt Tran在 :gh:`127691` 中贡献）"

#: ../../whatsnew/3.14.rst:3180
msgid ""
"The interpreter internally avoids some reference count modifications when "
"loading objects onto the operands stack by :term:`borrowing <borrowed "
"reference>` references when possible. This can lead to smaller reference "
"count values compared to previous Python versions. C API extensions that "
"checked :c:func:`Py_REFCNT` of ``1`` to determine if an function argument is"
" not referenced by any other code should instead use "
":c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` as a safer "
"replacement."
msgstr ""
"解释器在将对象加载到操作数栈时，会通过尽可能 :term:`借用 <borrowed reference>` 引用来避免部分引用计数的修改。 "
"这可能导致引用计数值比先前 Python 版本更小。 之前通过检查 :c:func:`Py_REFCNT` 是否为 ``1`` "
"来判断函数参数是否未被其他代码引用的 C 扩展 API，现在应改用更安全的替代方案 "
":c:func:`PyUnstable_Object_IsUniqueReferencedTemporary`。"

#: ../../whatsnew/3.14.rst:3189
msgid "Private functions promoted to public C APIs:"
msgstr "以下私有函数已提升为公开 C API："

#: ../../whatsnew/3.14.rst:3191
msgid "``_PyBytes_Join()``: :c:func:`PyBytes_Join`"
msgstr "``_PyBytes_Join()``：:c:func:`PyBytes_Join`"

#: ../../whatsnew/3.14.rst:3192
msgid "``_PyLong_IsNegative()``: :c:func:`PyLong_IsNegative`"
msgstr "``_PyLong_IsNegative()``：:c:func:`PyLong_IsNegative`"

#: ../../whatsnew/3.14.rst:3193
msgid "``_PyLong_IsPositive()``: :c:func:`PyLong_IsPositive`"
msgstr "``_PyLong_IsPositive()``：:c:func:`PyLong_IsPositive`"

#: ../../whatsnew/3.14.rst:3194
msgid "``_PyLong_IsZero()``: :c:func:`PyLong_IsZero`"
msgstr "``_PyLong_IsZero()``：:c:func:`PyLong_IsZero`"

#: ../../whatsnew/3.14.rst:3195
msgid "``_PyLong_Sign()``: :c:func:`PyLong_GetSign`"
msgstr "``_PyLong_Sign()``：:c:func:`PyLong_GetSign`"

#: ../../whatsnew/3.14.rst:3196
msgid "``_PyUnicodeWriter_Dealloc()``: :c:func:`PyUnicodeWriter_Discard`"
msgstr "``_PyUnicodeWriter_Dealloc()``：:c:func:`PyUnicodeWriter_Discard`"

#: ../../whatsnew/3.14.rst:3197
msgid "``_PyUnicodeWriter_Finish()``: :c:func:`PyUnicodeWriter_Finish`"
msgstr "``_PyUnicodeWriter_Finish()``：:c:func:`PyUnicodeWriter_Finish`"

#: ../../whatsnew/3.14.rst:3198
msgid "``_PyUnicodeWriter_Init()``: use :c:func:`PyUnicodeWriter_Create`"
msgstr "``_PyUnicodeWriter_Init()``: 使用 :c:func:`PyUnicodeWriter_Create`"

#: ../../whatsnew/3.14.rst:3199
msgid "``_PyUnicodeWriter_Prepare()``: (no replacement)"
msgstr "``_PyUnicodeWriter_Prepare()``: (无替代)"

#: ../../whatsnew/3.14.rst:3200
msgid "``_PyUnicodeWriter_PrepareKind()``: (no replacement)"
msgstr "``_PyUnicodeWriter_PrepareKind()``: (无替代)"

#: ../../whatsnew/3.14.rst:3201
msgid "``_PyUnicodeWriter_WriteChar()``: :c:func:`PyUnicodeWriter_WriteChar`"
msgstr "``_PyUnicodeWriter_WriteChar()``：:c:func:`PyUnicodeWriter_WriteChar`"

#: ../../whatsnew/3.14.rst:3202
msgid "``_PyUnicodeWriter_WriteStr()``: :c:func:`PyUnicodeWriter_WriteStr`"
msgstr "``_PyUnicodeWriter_WriteStr()``：:c:func:`PyUnicodeWriter_WriteStr`"

#: ../../whatsnew/3.14.rst:3203
msgid ""
"``_PyUnicodeWriter_WriteSubstring()``: "
":c:func:`PyUnicodeWriter_WriteSubstring`"
msgstr ""
"``_PyUnicodeWriter_WriteSubstring()``：:c:func:`PyUnicodeWriter_WriteSubstring`"

#: ../../whatsnew/3.14.rst:3204
msgid "``_PyUnicode_EQ()``: :c:func:`PyUnicode_Equal`"
msgstr "``_PyUnicode_EQ()``：:c:func:`PyUnicode_Equal`"

#: ../../whatsnew/3.14.rst:3205
msgid "``_PyUnicode_Equal()``: :c:func:`PyUnicode_Equal`"
msgstr "``_PyUnicode_Equal()``：:c:func:`PyUnicode_Equal`"

#: ../../whatsnew/3.14.rst:3206
msgid ""
"``_Py_GetConfig()``: :c:func:`PyConfig_Get` and :c:func:`PyConfig_GetInt`"
msgstr ""
"``_Py_GetConfig()``: :c:func:`PyConfig_Get` 和 :c:func:`PyConfig_GetInt`"

#: ../../whatsnew/3.14.rst:3207
msgid "``_Py_HashBytes()``: :c:func:`Py_HashBuffer`"
msgstr "``_Py_HashBytes()``: :c:func:`Py_HashBuffer`"

#: ../../whatsnew/3.14.rst:3208
msgid "``_Py_fopen_obj()``: :c:func:`Py_fopen`"
msgstr "``_Py_fopen_obj()``：:c:func:`Py_fopen`"

#: ../../whatsnew/3.14.rst:3209
msgid "``PyMutex_IsLocked()`` : :c:func:`PyMutex_IsLocked`"
msgstr "``PyMutex_IsLocked()`` : :c:func:`PyMutex_IsLocked`"

#: ../../whatsnew/3.14.rst:3211
msgid ""
"The `pythoncapi-compat project`_ can be used to get most of these new "
"functions on Python 3.13 and older."
msgstr "在 Python 3.13 和更早的版本中可以使用 `pythoncapi-compat project`_ 来充分利用这些新函数。"
