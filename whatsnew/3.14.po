# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# MuSheng Chen <sheng.2179@gmail.com>, 2025
# lqks, 2025
# Dai Xu <daixu61@hotmail.com>, 2025
# jacky <jackylvm@foxmail.com>, 2025
# Rafael Fontenelle <rffontenelle@gmail.com>, 2025
# ppcfish <ppcfish@gmail.com>, 2025
# Alpha Du <alphanow@gmail.com>, 2025
# Nyuan Zhang, 2025
# lian Wu (Wulian) <xiguawulian@gmail.com>, 2025
# Freesand Leo <yuqinju@163.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 14:19+0000\n"
"PO-Revision-Date: 2025-05-08 06:05+0000\n"
"Last-Translator: Freesand Leo <yuqinju@163.com>, 2025\n"
"Language-Team: Chinese (China) (https://app.transifex.com/python-doc/teams/5390/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.14.rst:3
msgid "What's new in Python 3.14"
msgstr "Python 3.14 有什么新变化"

#: ../../whatsnew/3.14.rst:0
msgid "Editor"
msgstr "编者"

#: ../../whatsnew/3.14.rst:5
msgid "Hugo van Kemenade"
msgstr "Hugo van Kemenade"

#: ../../whatsnew/3.14.rst:47
msgid ""
"This article explains the new features in Python 3.14, compared to 3.13."
msgstr "本文介绍了 Python 3.14 相比 3.13 的新增特性。"

#: ../../whatsnew/3.14.rst:49
msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr "完整的详情可参阅 :ref:`更新日志 <changelog>`。"

#: ../../whatsnew/3.14.rst:53
msgid ":pep:`745` -- Python 3.14 release schedule"
msgstr ":pep:`745` -- Python 3.14 发布计划"

#: ../../whatsnew/3.14.rst:57
msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.14 moves towards release,"
" so it's worth checking back even after reading earlier versions."
msgstr ""
"预发布版用户应当了解到此文档目前处于草稿状态。 它将随着 Python 3.14 的发布进程不断更新，因此即使已经阅读过较早的版本也仍然值得再次查看。"

#: ../../whatsnew/3.14.rst:63
msgid "Summary -- release highlights"
msgstr "摘要 -- 发布关键要点"

#: ../../whatsnew/3.14.rst:68
msgid ""
"Python 3.14 beta is the pre-release of the next version of the Python "
"programming language, with a mix of changes to the language, the "
"implementation and the standard library."
msgstr "Python 3.14 beta 是 Python 编程语言下一版本的预发布版，包含对语言、实现和标准库的多项改变。"

#: ../../whatsnew/3.14.rst:72
msgid ""
"The biggest changes to the implementation include template strings "
"(:pep:`750`), deferred evaluation of annotations (:pep:`649`), and a new "
"type of interpreter that uses tail calls."
msgstr "对于实现的最大变化包括模板字符串 (:pep:`750`)，标注的迟延求值 (:pep:`649`)，以及一种使用尾调用的新解释器类型。"

#: ../../whatsnew/3.14.rst:76
msgid ""
"The library changes include the addition of a new :mod:`!annotationlib` "
"module for introspecting and wrapping annotations (:pep:`649`), a new "
":mod:`!compression.zstd` module for Zstandard support (:pep:`784`), plus "
"syntax highlighting in the REPL, as well as the usual deprecations and "
"removals, and improvements in user-friendliness and correctness."
msgstr ""
"标准库的变化包括新增 :mod:`!annotationlib` 模块用于内省和包裹标注 (:pep:`649`)，新增 "
":mod:`!compression.zstd` 模块用于 Zstandard 支持 (:pep:`784`)，以及 REPL "
"中的语法高亮，和常规的弃用和移除，还有用户友好度和正确性方面的改进。"

#: ../../whatsnew/3.14.rst:85
msgid ""
":ref:`PEP 649 and 749: deferred evaluation of annotations "
"<whatsnew314-pep649>`"
msgstr ":ref:`PEP 649 和 749：标注的迟延求值 <whatsnew314-pep649>`"

#: ../../whatsnew/3.14.rst:86
msgid ":ref:`PEP 741: Python Configuration C API <whatsnew314-pep741>`"
msgstr ":ref:`PEP 741：Python 配置 C API <whatsnew314-pep741>`"

#: ../../whatsnew/3.14.rst:87
msgid ":ref:`PEP 750: Template strings <whatsnew314-pep750>`"
msgstr ":ref:`PEP 750: 模板字符串 <whatsnew314-pep750>`"

#: ../../whatsnew/3.14.rst:88
msgid ""
":ref:`PEP 758: Allow except and except* expressions without parentheses "
"<whatsnew314-pep758>`"
msgstr ":ref:`PEP 758：允许不带括号的 except 和 except* 表达式 <whatsnew314-pep758>`"

#: ../../whatsnew/3.14.rst:89
msgid ":ref:`PEP 761: Discontinuation of PGP signatures <whatsnew314-pep761>`"
msgstr ":ref:`PEP 761：停止使用 PGP 签名 <whatsnew314-pep761>`"

#: ../../whatsnew/3.14.rst:90
msgid ""
":ref:`PEP 765: Disallow return/break/continue that exit a finally block "
"<whatsnew314-pep765>`"
msgstr ""
":ref:`PEP 765: 不允许退出 finally 代码块的 return/break/continue "
"<whatsnew314-pep765>`"

#: ../../whatsnew/3.14.rst:91
msgid ""
":ref:`Free-threaded mode improvements <whatsnew314-free-threaded-cpython>`"
msgstr ""

#: ../../whatsnew/3.14.rst:92
msgid ""
":ref:`PEP 768: Safe external debugger interface for CPython "
"<whatsnew314-pep768>`"
msgstr ":ref:`PEP 768：Cpython 的安全外部调试器接口<whatsnew314-pep768>`"

#: ../../whatsnew/3.14.rst:93
msgid ""
":ref:`PEP 784: Adding Zstandard to the standard library "
"<whatsnew314-pep784>`"
msgstr ":ref:`PEP 784: 添加 Zstandard 到标准库 <whatsnew314-pep784>`"

#: ../../whatsnew/3.14.rst:94
msgid ":ref:`A new type of interpreter <whatsnew314-tail-call>`"
msgstr ":ref:`一种新型的解释器 <whatsnew314-tail-call>`"

#: ../../whatsnew/3.14.rst:95
msgid ""
":ref:`Syntax highlighting in PyREPL <whatsnew314-pyrepl-highlighting>`, and "
"color output in :ref:`unittest <whatsnew314-color-unittest>`, :ref:`argparse"
" <whatsnew314-color-argparse>`, :ref:`json <whatsnew314-color-json>` and "
":ref:`calendar <whatsnew314-color-calendar>` CLIs"
msgstr ""
":ref:`PyREPL 中的语法高亮 <whatsnew314-pyrepl-highlighting>`，以及 :ref:`unittest "
"<whatsnew314-color-unittest>`, :ref:`argparse <whatsnew314-color-argparse>`,"
" :ref:`json <whatsnew314-color-json>` 和 :ref:`calendar <whatsnew314-color-"
"calendar>` CLI 中的彩色输出"

#: ../../whatsnew/3.14.rst:100
msgid ""
":ref:`Binary releases for the experimental just-in-time compiler "
"<whatsnew314-jit-compiler>`"
msgstr ":ref:`针对实验性即时编译器的二进制发布包 <whatsnew314-jit-compiler>`"

#: ../../whatsnew/3.14.rst:104
msgid "Incompatible changes"
msgstr "不兼容的更改"

#: ../../whatsnew/3.14.rst:106
msgid ""
"On platforms other than macOS and Windows, the default :ref:`start method "
"<multiprocessing-start-methods>` for :mod:`multiprocessing` and "
":class:`~concurrent.futures.ProcessPoolExecutor` switches from *fork* to "
"*forkserver*."
msgstr ""
"在 macOS 和 Windows 以外的平台上，用于 :mod:`multiprocessing` 和 "
":class:`~concurrent.futures.ProcessPoolExecutor` 的默认 :ref:`start 方法 "
"<multiprocessing-start-methods>` 由 *fork* 改为 *forkserver*。"

#: ../../whatsnew/3.14.rst:111
msgid ""
"See :ref:`(1) <whatsnew314-concurrent-futures-start-method>` and :ref:`(2) "
"<whatsnew314-multiprocessing-start-method>` for details."
msgstr ""
"请参阅 :ref:`(1) <whatsnew314-concurrent-futures-start-method>` 和 :ref:`(2) "
"<whatsnew314-multiprocessing-start-method>` 了解详情。"

#: ../../whatsnew/3.14.rst:114
msgid ""
"If you encounter :exc:`NameError`\\s or pickling errors coming out of "
":mod:`multiprocessing` or :mod:`concurrent.futures`, see the "
":ref:`forkserver restrictions <multiprocessing-programming-forkserver>`."
msgstr ""
"如果你在 :mod:`multiprocessing` 或 :mod:`concurrent.futures` 中遇到 :exc:`NameError`"
" 或 pickle 错误，请参阅 :ref:`forkserver 的限制 <multiprocessing-programming-"
"forkserver>`。"

#: ../../whatsnew/3.14.rst:118
msgid ""
"The interpreter avoids some reference count modifications internally when "
"it's safe to do so. This can lead to different values returned from "
":func:`sys.getrefcount` and :c:func:`Py_REFCNT` compared to previous "
"versions of Python.  See :ref:`below <whatsnew314-refcount>` for details."
msgstr ""
"解释器会在保证安全的情况下避免某些引用计数修改。 这可能导致 :func:`sys.getrefcount` 和 :c:func:`Py_REFCNT`"
" 返回相比之前 Python 版本有所不同的值。 请参阅 :ref:`下文 <whatsnew314-refcount>` 了解详情。"

#: ../../whatsnew/3.14.rst:124 ../../whatsnew/3.14.rst:2498
msgid "New features"
msgstr "新的特性"

#: ../../whatsnew/3.14.rst:129
msgid "PEP 750: Template strings"
msgstr "PEP 750：模板字符串"

#: ../../whatsnew/3.14.rst:131
msgid ""
"Template string literals (t-strings) are a generalization of f-strings, "
"using a ``t`` in place of the ``f`` prefix. Instead of evaluating to "
":class:`str`, t-strings evaluate to a new "
":class:`!string.templatelib.Template` type:"
msgstr ""

#: ../../whatsnew/3.14.rst:135
msgid ""
"from string.templatelib import Template\n"
"\n"
"name = \"World\"\n"
"template: Template = t\"Hello {name}\""
msgstr ""
"from string.templatelib import Template\n"
"\n"
"name = \"World\"\n"
"template: Template = t\"Hello {name}\""

#: ../../whatsnew/3.14.rst:142
msgid ""
"The template can then be combined with functions that operate on the "
"template's structure to produce a :class:`str` or a string-like result. For "
"example, sanitizing input:"
msgstr ""

#: ../../whatsnew/3.14.rst:146
msgid ""
"evil = \"<script>alert('evil')</script>\"\n"
"template = t\"<p>{evil}</p>\"\n"
"assert html(template) == \"<p>&lt;script&gt;alert('evil')&lt;/script&gt;</p>\""
msgstr ""
"evil = \"<script>alert('evil')</script>\"\n"
"template = t\"<p>{evil}</p>\"\n"
"assert html(template) == \"<p>&lt;script&gt;alert('evil')&lt;/script&gt;</p>\""

#: ../../whatsnew/3.14.rst:152
msgid "As another example, generating HTML attributes from data:"
msgstr "再比如，根据数据生成 HTML 属性："

#: ../../whatsnew/3.14.rst:154
msgid ""
"attributes = {\"src\": \"shrubbery.jpg\", \"alt\": \"looks nice\"}\n"
"template = t\"<img {attributes}>\"\n"
"assert html(template) == '<img src=\"shrubbery.jpg\" alt=\"looks nice\" class=\"looks-nice\">'"
msgstr ""
"attributes = {\"src\": \"shrubbery.jpg\", \"alt\": \"looks nice\"}\n"
"template = t\"<img {attributes}>\"\n"
"assert html(template) == '<img src=\"shrubbery.jpg\" alt=\"looks nice\" class=\"looks-nice\">'"

#: ../../whatsnew/3.14.rst:160
msgid ""
"Compared to using an f-string, the ``html`` function has access to template "
"attributes containing the original information: static strings, "
"interpolations, and values from the original scope. Unlike existing "
"templating approaches, t-strings build from the well-known f-string syntax "
"and rules. Template systems thus benefit from Python tooling as they are "
"much closer to the Python language, syntax, scoping, and more."
msgstr ""
"与使用 f-string 相比，``html`` "
"函数能够访问包含原始信息的模板属性：静态字符串、插值表达式，以及来自原始作用域的值。与现有的模板系统不同，t-string 是基于广为人知的 "
"f-string 语法和规则构建的。因此，模板系统能够更好地受益于 Python 的工具生态，因为它们在语言特性、语法结构、作用域规则等方面都更加贴近 "
"Python 本身。"

#: ../../whatsnew/3.14.rst:167
msgid "Writing template handlers is straightforward:"
msgstr "编写模板处理程序非常简单："

#: ../../whatsnew/3.14.rst:169
msgid ""
"from string.templatelib import Template, Interpolation\n"
"\n"
"def lower_upper(template: Template) -> str:\n"
"    \"\"\"Render static parts lowercased and interpolations uppercased.\"\"\"\n"
"    parts: list[str] = []\n"
"    for item in template:\n"
"        if isinstance(item, Interpolation):\n"
"            parts.append(str(item.value).upper())\n"
"        else:\n"
"            parts.append(item.lower())\n"
"    return \"\".join(parts)\n"
"\n"
"name = \"world\"\n"
"assert lower_upper(t\"HELLO {name}\") == \"hello WORLD\""
msgstr ""

#: ../../whatsnew/3.14.rst:186
msgid ""
"With this in place, developers can write template systems to sanitize SQL, "
"make safe shell operations, improve logging, tackle modern ideas in web "
"development (HTML, CSS, and so on), and implement lightweight, custom "
"business DSLs."
msgstr ""

#: ../../whatsnew/3.14.rst:190
msgid ""
"(Contributed by Jim Baker, Guido van Rossum, Paul Everitt, Koudai Aono, "
"Lysandros Nikolaou, Dave Peck, Adam Turner, Jelle Zijlstra, Bénédikt Tran, "
"and Pablo Galindo Salgado in :gh:`132661`.)"
msgstr ""
"（由 Jim Baker、Guido van Rossum、Paul Everitt、Koudai Aono、Lysandros "
"Nikolaou、Dave Peck、Adam Turner、Jelle Zijlstra、Bénédikt Tran 和 Pablo Galindo "
"Salgado 在 :gh:`132661` 中贡献。）"

#: ../../whatsnew/3.14.rst:195
msgid ":pep:`750`."
msgstr ":pep:`750`。"

#: ../../whatsnew/3.14.rst:201
msgid "PEP 768: Safe external debugger interface for CPython"
msgstr "PEP 768：Cpython 的安全外部调试器接口"

#: ../../whatsnew/3.14.rst:203
msgid ""
":pep:`768` introduces a zero-overhead debugging interface that allows "
"debuggers and profilers to safely attach to running Python processes. This "
"is a significant enhancement to Python's debugging capabilities allowing "
"debuggers to forego unsafe alternatives. See :ref:`below "
"<whatsnew314-remote-pdb>` for how this feature is leveraged to implement the"
" new :mod:`pdb` module's remote attaching capabilities."
msgstr ""

#: ../../whatsnew/3.14.rst:209
msgid ""
"The new interface provides safe execution points for attaching debugger code"
" without modifying the interpreter's normal execution path or adding runtime"
" overhead. This enables tools to inspect and interact with Python "
"applications in real-time without stopping or restarting them — a crucial "
"capability for high-availability systems and production environments."
msgstr ""

#: ../../whatsnew/3.14.rst:214
msgid ""
"For convenience, CPython implements this interface through the :mod:`sys` "
"module with a :func:`sys.remote_exec` function::"
msgstr ""

#: ../../whatsnew/3.14.rst:217
msgid "sys.remote_exec(pid, script_path)"
msgstr "sys.remote_exec(pid, script_path)"

#: ../../whatsnew/3.14.rst:219
msgid ""
"This function allows sending Python code to be executed in a target process "
"at the next safe execution point. However, tool authors can also implement "
"the protocol directly as described in the PEP, which details the underlying "
"mechanisms used to safely attach to running processes."
msgstr ""

#: ../../whatsnew/3.14.rst:223
msgid ""
"Here's a simple example that inspects object types in a running Python "
"process:"
msgstr ""

#: ../../whatsnew/3.14.rst:225
msgid ""
"import os\n"
"import sys\n"
"import tempfile\n"
"\n"
"# Create a temporary script\n"
"with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:\n"
"    script_path = f.name\n"
"    f.write(f\"import my_debugger; my_debugger.connect({os.getpid()})\")\n"
"try:\n"
"    # Execute in process with PID 1234\n"
"    print(\"Behold! An offering:\")\n"
"    sys.remote_exec(1234, script_path)\n"
"finally:\n"
"    os.unlink(script_path)"
msgstr ""

#: ../../whatsnew/3.14.rst:242
msgid ""
"The debugging interface has been carefully designed with security in mind "
"and includes several mechanisms to control access:"
msgstr ""

#: ../../whatsnew/3.14.rst:245
msgid "A :envvar:`PYTHON_DISABLE_REMOTE_DEBUG` environment variable."
msgstr ""

#: ../../whatsnew/3.14.rst:246
msgid "A :option:`-X disable-remote-debug` command-line option."
msgstr ""

#: ../../whatsnew/3.14.rst:247
msgid ""
"A :option:`--without-remote-debug` configure flag to completely disable the "
"feature at build time."
msgstr ""

#: ../../whatsnew/3.14.rst:249
msgid ""
"A key implementation detail is that the interface piggybacks on the "
"interpreter's existing evaluation loop and safe points, ensuring zero "
"overhead during normal execution while providing a reliable way for external"
" processes to coordinate debugging operations."
msgstr ""

#: ../../whatsnew/3.14.rst:253
msgid ""
"(Contributed by Pablo Galindo Salgado, Matt Wozniski, and Ivona Stojanovic "
"in :gh:`131591`.)"
msgstr ""
"（由 Pablo Galindo Salgado，Matt Wozniski 和 Ivona Stojanovic 在 :gh:`131591` "
"中贡献）"

#: ../../whatsnew/3.14.rst:256 ../../whatsnew/3.14.rst:330
msgid ":pep:`768`."
msgstr ":pep:`768`。"

#: ../../whatsnew/3.14.rst:262
msgid "PEP 784: Adding Zstandard to the standard library"
msgstr ""

#: ../../whatsnew/3.14.rst:264
msgid ""
"The new ``compression`` package contains modules :mod:`!compression.lzma`, "
":mod:`!compression.bz2`, :mod:`!compression.gzip` and "
":mod:`!compression.zlib` which re-export the :mod:`lzma`, :mod:`bz2`, "
":mod:`gzip` and :mod:`zlib` modules respectively. The new import names under"
" ``compression`` are the canonical names for importing these compression "
"modules going forward. However, the existing modules names have not been "
"deprecated. Any deprecation or removal of the existing compression modules "
"will occur no sooner than five years after the release of 3.14."
msgstr ""

#: ../../whatsnew/3.14.rst:273
msgid ""
"The new :mod:`!compression.zstd` module provides compression and "
"decompression APIs for the Zstandard format via bindings to `Meta's zstd "
"library <https://facebook.github.io/zstd/>`__. Zstandard is a widely "
"adopted, highly efficient, and fast compression format. In addition to the "
"APIs introduced in :mod:`!compression.zstd`, support for reading and writing"
" Zstandard compressed archives has been added to the :mod:`tarfile`, "
":mod:`zipfile`, and :mod:`shutil` modules."
msgstr ""

#: ../../whatsnew/3.14.rst:281
msgid "Here's an example of using the new module to compress some data:"
msgstr "下面是一个使用新模块压缩数据的示例："

#: ../../whatsnew/3.14.rst:283
msgid ""
"from compression import zstd\n"
"import math\n"
"\n"
"data = str(math.pi).encode() * 20\n"
"\n"
"compressed = zstd.compress(data)\n"
"\n"
"ratio = len(compressed) / len(data)\n"
"print(f\"Achieved compression ratio of {ratio}\")"
msgstr ""

#: ../../whatsnew/3.14.rst:295
msgid ""
"As can be seen, the API is similar to the APIs of the :mod:`!lzma` and "
":mod:`!bz2` modules."
msgstr ""

#: ../../whatsnew/3.14.rst:298
msgid ""
"(Contributed by Emma Harper Smith, Adam Turner, Gregory P. Smith, Tomas "
"Roun, Victor Stinner, and Rogdham in :gh:`132983`)"
msgstr ""

#: ../../whatsnew/3.14.rst:302
msgid ":pep:`784`."
msgstr ":pep:`784`。"

#: ../../whatsnew/3.14.rst:308
msgid "Remote attaching to a running Python process with PDB"
msgstr ""

#: ../../whatsnew/3.14.rst:310
msgid ""
"The :mod:`pdb` module now supports remote attaching to a running Python "
"process using a new ``-p PID`` command-line option:"
msgstr ""

#: ../../whatsnew/3.14.rst:313
msgid "python -m pdb -p 1234"
msgstr "python -m pdb -p 1234"

#: ../../whatsnew/3.14.rst:317
msgid ""
"This will connect to the Python process with the given PID and allow you to "
"debug it interactively. Notice that due to how the Python interpreter works "
"attaching to a remote process that is blocked in a system call or waiting "
"for I/O will only work once the next bytecode instruction is executed or "
"when the process receives a signal."
msgstr ""

#: ../../whatsnew/3.14.rst:323
msgid ""
"This feature uses :pep:`768` and the :func:`sys.remote_exec` function to "
"attach to the remote process and send the PDB commands to it."
msgstr ""

#: ../../whatsnew/3.14.rst:327
msgid "(Contributed by Matt Wozniski and Pablo Galindo in :gh:`131591`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:336
msgid "PEP 758 – Allow except and except* expressions without parentheses"
msgstr "PEP 758 – 允许不带括号的 except 和 except* 表达式"

#: ../../whatsnew/3.14.rst:338
msgid ""
"The :keyword:`except` and :keyword:`except* <except_star>` expressions now "
"allow parentheses to be omitted when there are multiple exception types and "
"the ``as`` clause is not used. For example the following expressions are now"
" valid:"
msgstr ""

#: ../../whatsnew/3.14.rst:342
msgid ""
"try:\n"
"    release_new_sleep_token_album()\n"
"except AlbumNotFound, SongsTooGoodToBeReleased:\n"
"    print(\"Sorry, no new album this year.\")\n"
"\n"
" # The same applies to except* (for exception groups):\n"
"try:\n"
"    release_new_sleep_token_album()\n"
"except* AlbumNotFound, SongsTooGoodToBeReleased:\n"
"    print(\"Sorry, no new album this year.\")"
msgstr ""

#: ../../whatsnew/3.14.rst:355
msgid "Check :pep:`758` for more details."
msgstr ""

#: ../../whatsnew/3.14.rst:357
msgid "(Contributed by Pablo Galindo and Brett Cannon in :gh:`131831`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:360
msgid ":pep:`758`."
msgstr ":pep:`758`。"

#: ../../whatsnew/3.14.rst:366
msgid "PEP 649 and 749: deferred evaluation of annotations"
msgstr ""

#: ../../whatsnew/3.14.rst:368
msgid ""
"The :term:`annotations <annotation>` on functions, classes, and modules are "
"no longer evaluated eagerly. Instead, annotations are stored in special-"
"purpose :term:`annotate functions <annotate function>` and evaluated only "
"when necessary (except if ``from __future__ import annotations`` is used). "
"This is specified in :pep:`649` and :pep:`749`."
msgstr ""

#: ../../whatsnew/3.14.rst:374
msgid ""
"This change is designed to make annotations in Python more performant and "
"more usable in most circumstances. The runtime cost for defining annotations"
" is minimized, but it remains possible to introspect annotations at runtime."
" It is no longer necessary to enclose annotations in strings if they contain"
" forward references."
msgstr ""

#: ../../whatsnew/3.14.rst:380
msgid ""
"The new :mod:`annotationlib` module provides tools for inspecting deferred "
"annotations. Annotations may be evaluated in the "
":attr:`~annotationlib.Format.VALUE` format (which evaluates annotations to "
"runtime values, similar to the behavior in earlier Python versions), the "
":attr:`~annotationlib.Format.FORWARDREF` format (which replaces undefined "
"names with special markers), and the :attr:`~annotationlib.Format.STRING` "
"format (which returns annotations as strings)."
msgstr ""

#: ../../whatsnew/3.14.rst:387
msgid "This example shows how these formats behave:"
msgstr ""

#: ../../whatsnew/3.14.rst:389
msgid ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Undefined):\n"
"...     pass\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NameError: name 'Undefined' is not defined\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Undefined', owner=<function func at 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Undefined'}"
msgstr ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Undefined):\n"
"...     pass\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NameError: name 'Undefined' is not defined\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Undefined', owner=<function func at 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Undefined'}"

#: ../../whatsnew/3.14.rst:404
msgid "Implications for annotated code"
msgstr "对标注代码的影响"

#: ../../whatsnew/3.14.rst:406
msgid ""
"If you define annotations in your code (for example, for use with a static "
"type checker), then this change probably does not affect you: you can keep "
"writing annotations the same way you did with previous versions of Python."
msgstr ""

#: ../../whatsnew/3.14.rst:410
msgid ""
"You will likely be able to remove quoted strings in annotations, which are "
"frequently used for forward references. Similarly, if you use ``from "
"__future__ import annotations`` to avoid having to write strings in "
"annotations, you may well be able to remove that import once you support "
"only Python 3.14 and newer. However, if you rely on third-party libraries "
"that read annotations, those libraries may need changes to support unquoted "
"annotations before they work as expected."
msgstr ""

#: ../../whatsnew/3.14.rst:419
msgid "Implications for readers of ``__annotations__``"
msgstr ""

#: ../../whatsnew/3.14.rst:421
msgid ""
"If your code reads the ``__annotations__`` attribute on objects, you may "
"want to make changes in order to support code that relies on deferred "
"evaluation of annotations. For example, you may want to use "
":func:`annotationlib.get_annotations` with the "
":attr:`~annotationlib.Format.FORWARDREF` format, as the :mod:`dataclasses` "
"module now does."
msgstr ""

#: ../../whatsnew/3.14.rst:427
msgid ""
"The external :pypi:`typing_extensions` package provides partial backports of"
" some of the functionality of the :mod:`annotationlib` module, such as the "
":class:`~annotationlib.Format` enum and the "
":func:`~annotationlib.get_annotations` function. These can be used to write "
"cross-version code that takes advantage of the new behavior in Python 3.14."
msgstr ""

#: ../../whatsnew/3.14.rst:433
msgid "Related changes"
msgstr "相关更改"

#: ../../whatsnew/3.14.rst:435
msgid ""
"The changes in Python 3.14 are designed to rework how ``__annotations__`` "
"works at runtime while minimizing breakage to code that contains annotations"
" in source code and to code that reads ``__annotations__``. However, if you "
"rely on undocumented details of the annotation behavior or on private "
"functions in the standard library, there are many ways in which your code "
"may not work in Python 3.14. To safeguard your code against future changes, "
"use only the documented functionality of the :mod:`annotationlib` module."
msgstr ""

#: ../../whatsnew/3.14.rst:443
msgid ""
"In particular, do not read annotations directly from the namespace "
"dictionary attribute of type objects. Use "
":func:`annotationlib.get_annotate_from_class_namespace` during class "
"construction and :func:`annotationlib.get_annotations` afterwards."
msgstr ""

#: ../../whatsnew/3.14.rst:448
msgid "``from __future__ import annotations``"
msgstr "``from __future__ import annotations``"

#: ../../whatsnew/3.14.rst:450
msgid ""
"In Python 3.7, :pep:`563` introduced the ``from __future__ import "
"annotations`` directive, which turns all annotations into strings. This "
"directive is now considered deprecated and it is expected to be removed in a"
" future version of Python. However, this removal will not happen until after"
" Python 3.13, the last version of Python without deferred evaluation of "
"annotations, reaches its end of life in 2029. In Python 3.14, the behavior "
"of code using ``from __future__ import annotations`` is unchanged."
msgstr ""

#: ../../whatsnew/3.14.rst:458
msgid ""
"(Contributed by Jelle Zijlstra in :gh:`119180`; :pep:`649` was written by "
"Larry Hastings.)"
msgstr ""

#: ../../whatsnew/3.14.rst:461
msgid ":pep:`649` and :pep:`749`."
msgstr ":pep:`649` 和 :pep:`749`。"

#: ../../whatsnew/3.14.rst:465
msgid "Improved error messages"
msgstr "改进的错误消息"

#: ../../whatsnew/3.14.rst:467
msgid ""
"The interpreter now provides helpful suggestions when it detects typos in "
"Python keywords. When a word that closely resembles a Python keyword is "
"encountered, the interpreter will suggest the correct keyword in the error "
"message. This feature helps programmers quickly identify and fix common "
"typing mistakes. For example:"
msgstr ""

#: ../../whatsnew/3.14.rst:473
msgid ""
">>> whille True:\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    whille True:\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'while'?\n"
"\n"
">>> asynch def fetch_data():\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    asynch def fetch_data():\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'async'?\n"
"\n"
">>> async def foo():\n"
"...     awaid fetch_data()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2\n"
"    awaid fetch_data()\n"
"    ^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'await'?\n"
"\n"
">>> raisee ValueError(\"Error\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    raisee ValueError(\"Error\")\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'raise'?"
msgstr ""
">>> whille True:\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    whille True:\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'while'?\n"
"\n"
">>> asynch def fetch_data():\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    asynch def fetch_data():\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'async'?\n"
"\n"
">>> async def foo():\n"
"...     awaid fetch_data()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2\n"
"    awaid fetch_data()\n"
"    ^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'await'?\n"
"\n"
">>> raisee ValueError(\"Error\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    raisee ValueError(\"Error\")\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'raise'?"

#: ../../whatsnew/3.14.rst:506
msgid ""
"While the feature focuses on the most common cases, some variations of "
"misspellings may still result in regular syntax errors. (Contributed by "
"Pablo Galindo in :gh:`132449`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:510
msgid ""
"When unpacking assignment fails due to incorrect number of variables, the "
"error message prints the received number of values in more cases than "
"before. (Contributed by Tushar Sadhwani in :gh:`122239`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:514
msgid ""
">>> x, y, z = 1, 2, 3, 4\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    x, y, z = 1, 2, 3, 4\n"
"    ^^^^^^^\n"
"ValueError: too many values to unpack (expected 3, got 4)"
msgstr ""
">>> x, y, z = 1, 2, 3, 4\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    x, y, z = 1, 2, 3, 4\n"
"    ^^^^^^^\n"
"ValueError: too many values to unpack (expected 3, got 4)"

#: ../../whatsnew/3.14.rst:523
msgid ""
":keyword:`elif` statements that follow an :keyword:`else` block now have a "
"specific error message. (Contributed by Steele Farnsworth in :gh:`129902`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:526
msgid ""
">>> if who == \"me\":\n"
"...     print(\"It's me!\")\n"
"... else:\n"
"...     print(\"It's not me!\")\n"
"... elif who is None:\n"
"...     print(\"Who is it?\")\n"
"File \"<stdin>\", line 5\n"
"  elif who is None:\n"
"  ^^^^\n"
"SyntaxError: 'elif' block follows an 'else' block"
msgstr ""

#: ../../whatsnew/3.14.rst:539
msgid ""
"If a statement (:keyword:`pass`, :keyword:`del`, :keyword:`return`, "
":keyword:`yield`, :keyword:`raise`, :keyword:`break`, :keyword:`continue`, "
":keyword:`assert`, :keyword:`import`, :keyword:`from`) is passed to the "
":ref:`if_expr` after :keyword:`else`, or one of :keyword:`pass`, "
":keyword:`break`, or :keyword:`continue` is passed before :keyword:`if`, "
"then the error message highlights where the :token:`~python-"
"grammar:expression` is required. (Contributed by Sergey Miryanov in "
":gh:`129515`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:547
msgid ""
">>> x = 1 if True else pass\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = 1 if True else pass\n"
"                       ^^^^\n"
"SyntaxError: expected expression after 'else', but statement is given\n"
"\n"
">>> x = continue if True else break\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = continue if True else break\n"
"        ^^^^^^^^\n"
"SyntaxError: expected expression before 'if', but statement is given"
msgstr ""

#: ../../whatsnew/3.14.rst:564
msgid ""
"When incorrectly closed strings are detected, the error message suggests "
"that the string may be intended to be part of the string. (Contributed by "
"Pablo Galindo in :gh:`88535`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:568
msgid ""
">>> \"The interesting object \"The important object\" is very important\"\n"
"Traceback (most recent call last):\n"
"SyntaxError: invalid syntax. Is this intended to be part of the string?"
msgstr ""

#: ../../whatsnew/3.14.rst:574
msgid ""
"When strings have incompatible prefixes, the error now shows which prefixes "
"are incompatible. (Contributed by Nikita Sobolev in :gh:`133197`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:578
msgid ""
">>> ub'abc'\n"
"  File \"<python-input-0>\", line 1\n"
"    ub'abc'\n"
"    ^^\n"
"SyntaxError: 'u' and 'b' prefixes are incompatible"
msgstr ""
">>> ub'abc'\n"
"  File \"<python-input-0>\", line 1\n"
"    ub'abc'\n"
"    ^^\n"
"SyntaxError: 'u' and 'b' prefixes are incompatible"

#: ../../whatsnew/3.14.rst:586
msgid ""
"Improved error messages when using ``as`` with incompatible targets in:"
msgstr ""

#: ../../whatsnew/3.14.rst:588
msgid "Imports: ``import ... as ...``"
msgstr ""

#: ../../whatsnew/3.14.rst:589
msgid "From imports: ``from ... import ... as ...``"
msgstr ""

#: ../../whatsnew/3.14.rst:590
msgid "Except handlers: ``except ... as ...``"
msgstr ""

#: ../../whatsnew/3.14.rst:591
msgid "Pattern-match cases: ``case ... as ...``"
msgstr ""

#: ../../whatsnew/3.14.rst:593
msgid ""
"(Contributed by Nikita Sobolev in :gh:`123539`, :gh:`123562`, and "
":gh:`123440`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:596
msgid ""
">>> import ast as arr[0]\n"
"  File \"<python-input-1>\", line 1\n"
"    import ast as arr[0]\n"
"                  ^^^^^^\n"
"SyntaxError: cannot use subscript as import target"
msgstr ""

#: ../../whatsnew/3.14.rst:604
msgid ""
"Improved error message when trying to add an instance of an unhashable type "
"to a :class:`dict` or :class:`set`. (Contributed by CF Bolz-Tereick and "
"Victor Stinner in :gh:`132828`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:608
msgid ""
">>> s = set()\n"
">>> s.add({'pages': 12, 'grade': 'A'})\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 1, in <module>\n"
"    s.add({'pages': 12, 'grade': 'A'})\n"
"    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"TypeError: cannot use 'dict' as a set element (unhashable type: 'dict')\n"
">>> d = {}\n"
">>> l = [1, 2, 3]\n"
">>> d[l] = 12\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-4>\", line 1, in <module>\n"
"    d[l] = 12\n"
"    ~^^^\n"
"TypeError: cannot use 'list' as a dict key (unhashable type: 'list')"
msgstr ""
">>> s = set()\n"
">>> s.add({'pages': 12, 'grade': 'A'})\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 1, in <module>\n"
"    s.add({'pages': 12, 'grade': 'A'})\n"
"    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"TypeError: cannot use 'dict' as a set element (unhashable type: 'dict')\n"
">>> d = {}\n"
">>> l = [1, 2, 3]\n"
">>> d[l] = 12\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-4>\", line 1, in <module>\n"
"    d[l] = 12\n"
"    ~^^^\n"
"TypeError: cannot use 'list' as a dict key (unhashable type: 'list')"

#: ../../whatsnew/3.14.rst:630
msgid "PEP 741: Python Configuration C API"
msgstr ""

#: ../../whatsnew/3.14.rst:632
msgid ""
"Add a :ref:`PyInitConfig C API <pyinitconfig_api>` to configure the Python "
"initialization without relying on C structures and the ability to make ABI-"
"compatible changes in the future."
msgstr ""

#: ../../whatsnew/3.14.rst:636
msgid ""
"Complete the :pep:`587` :ref:`PyConfig C API <pyconfig_api>` by adding "
":c:func:`PyInitConfig_AddModule` which can be used to add a built-in "
"extension module; feature previously referred to as the “inittab”."
msgstr ""

#: ../../whatsnew/3.14.rst:640
msgid ""
"Add :c:func:`PyConfig_Get` and :c:func:`PyConfig_Set` functions to get and "
"set the current runtime configuration."
msgstr ""

#: ../../whatsnew/3.14.rst:643
msgid ""
"PEP 587 “Python Initialization Configuration” unified all the ways to "
"configure the Python initialization. This PEP unifies also the configuration"
" of the Python preinitialization and the Python initialization in a single "
"API. Moreover, this PEP only provides a single choice to embed Python, "
"instead of having two “Python” and “Isolated” choices (PEP 587), to simplify"
" the API further."
msgstr ""

#: ../../whatsnew/3.14.rst:650
msgid ""
"The lower level PEP 587 PyConfig API remains available for use cases with an"
" intentionally higher level of coupling to CPython implementation details "
"(such as emulating the full functionality of CPython’s CLI, including its "
"configuration mechanisms)."
msgstr ""

#: ../../whatsnew/3.14.rst:655 ../../whatsnew/3.14.rst:2559
#: ../../whatsnew/3.14.rst:2578
msgid "(Contributed by Victor Stinner in :gh:`107954`.)"
msgstr "（由 Victor Stinner 在 :gh:`107954` 中贡献。）"

#: ../../whatsnew/3.14.rst:658
msgid ":pep:`741`."
msgstr ":pep:`741`。"

#: ../../whatsnew/3.14.rst:663
msgid "Asyncio introspection capabilities"
msgstr ""

#: ../../whatsnew/3.14.rst:665
msgid ""
"Added a new command-line interface to inspect running Python processes using"
" asynchronous tasks, available via:"
msgstr ""

#: ../../whatsnew/3.14.rst:668
msgid "python -m asyncio ps PID"
msgstr "python -m asyncio ps PID"

#: ../../whatsnew/3.14.rst:672
msgid ""
"This tool inspects the given process ID (PID) and displays information about"
" currently running asyncio tasks.  It outputs a task table: a flat listing "
"of all tasks, their names, their coroutine stacks, and which tasks are "
"awaiting them."
msgstr ""

#: ../../whatsnew/3.14.rst:677
msgid "python -m asyncio pstree PID"
msgstr "python -m asyncio pstree PID"

#: ../../whatsnew/3.14.rst:681
msgid ""
"This tool fetches the same information, but renders a visual async call "
"tree, showing coroutine relationships in a hierarchical format.  This "
"command is particularly useful for debugging long-running or stuck "
"asynchronous programs. It can help developers quickly identify where a "
"program is blocked, what tasks are pending, and how coroutines are chained "
"together."
msgstr ""

#: ../../whatsnew/3.14.rst:687
msgid "For example given this code:"
msgstr ""

#: ../../whatsnew/3.14.rst:689
msgid ""
"import asyncio\n"
"\n"
"async def play(track):\n"
"    await asyncio.sleep(5)\n"
"    print(f\"🎵 Finished: {track}\")\n"
"\n"
"async def album(name, tracks):\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        for track in tracks:\n"
"            tg.create_task(play(track), name=track)\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        tg.create_task(\n"
"          album(\"Sundowning\", [\"TNDNBTG\", \"Levitate\"]), name=\"Sundowning\")\n"
"        tg.create_task(\n"
"          album(\"TMBTE\", [\"DYWTYLM\", \"Aqua Regia\"]), name=\"TMBTE\")\n"
"\n"
"if __name__ == \"__main__\":\n"
"    asyncio.run(main())"
msgstr ""

#: ../../whatsnew/3.14.rst:712
msgid ""
"Executing the new tool on the running process will yield a table like this:"
msgstr ""

#: ../../whatsnew/3.14.rst:714
msgid ""
"python -m asyncio ps 12345\n"
"\n"
"tid        task id              task name            coroutine chain                                    awaiter name         awaiter id\n"
"---------------------------------------------------------------------------------------------------------------------------------------\n"
"8138752    0x564bd3d0210        Task-1                                                                                       0x0\n"
"8138752    0x564bd3d0410        Sundowning           _aexit -> __aexit__ -> main                        Task-1               0x564bd3d0210\n"
"8138752    0x564bd3d0610        TMBTE                _aexit -> __aexit__ -> main                        Task-1               0x564bd3d0210\n"
"8138752    0x564bd3d0810        TNDNBTG              _aexit -> __aexit__ -> album                       Sundowning           0x564bd3d0410\n"
"8138752    0x564bd3d0a10        Levitate             _aexit -> __aexit__ -> album                       Sundowning           0x564bd3d0410\n"
"8138752    0x564bd3e0550        DYWTYLM              _aexit -> __aexit__ -> album                       TMBTE                 0x564bd3d0610\n"
"8138752    0x564bd3e0710        Aqua Regia           _aexit -> __aexit__ -> album                       TMBTE                 0x564bd3d0610"
msgstr ""
"python -m asyncio ps 12345\n"
"\n"
"tid        task id              task name            coroutine chain                                    awaiter name         awaiter id\n"
"---------------------------------------------------------------------------------------------------------------------------------------\n"
"8138752    0x564bd3d0210        Task-1                                                                                       0x0\n"
"8138752    0x564bd3d0410        Sundowning           _aexit -> __aexit__ -> main                        Task-1               0x564bd3d0210\n"
"8138752    0x564bd3d0610        TMBTE                _aexit -> __aexit__ -> main                        Task-1               0x564bd3d0210\n"
"8138752    0x564bd3d0810        TNDNBTG              _aexit -> __aexit__ -> album                       Sundowning           0x564bd3d0410\n"
"8138752    0x564bd3d0a10        Levitate             _aexit -> __aexit__ -> album                       Sundowning           0x564bd3d0410\n"
"8138752    0x564bd3e0550        DYWTYLM              _aexit -> __aexit__ -> album                       TMBTE                 0x564bd3d0610\n"
"8138752    0x564bd3e0710        Aqua Regia           _aexit -> __aexit__ -> album                       TMBTE                 0x564bd3d0610"

#: ../../whatsnew/3.14.rst:729
msgid "or:"
msgstr "或者:"

#: ../../whatsnew/3.14.rst:731
msgid ""
"python -m asyncio pstree 12345\n"
"\n"
"└── (T) Task-1\n"
"    └──  main\n"
"        └──  __aexit__\n"
"            └──  _aexit\n"
"                ├── (T) Sundowning\n"
"                │   └──  album\n"
"                │       └──  __aexit__\n"
"                │           └──  _aexit\n"
"                │               ├── (T) TNDNBTG\n"
"                │               └── (T) Levitate\n"
"                └── (T) TMBTE\n"
"                    └──  album\n"
"                        └──  __aexit__\n"
"                            └──  _aexit\n"
"                                ├── (T) DYWTYLM\n"
"                                └── (T) Aqua Regia"
msgstr ""
"python -m asyncio pstree 12345\n"
"\n"
"└── (T) Task-1\n"
"    └──  main\n"
"        └──  __aexit__\n"
"            └──  _aexit\n"
"                ├── (T) Sundowning\n"
"                │   └──  album\n"
"                │       └──  __aexit__\n"
"                │           └──  _aexit\n"
"                │               ├── (T) TNDNBTG\n"
"                │               └── (T) Levitate\n"
"                └── (T) TMBTE\n"
"                    └──  album\n"
"                        └──  __aexit__\n"
"                            └──  _aexit\n"
"                                ├── (T) DYWTYLM\n"
"                                └── (T) Aqua Regia"

#: ../../whatsnew/3.14.rst:752
msgid ""
"If a cycle is detected in the async await graph (which could indicate a "
"programming issue), the tool raises an error and lists the cycle paths that "
"prevent tree construction."
msgstr ""

#: ../../whatsnew/3.14.rst:756
msgid ""
"(Contributed by Pablo Galindo, Łukasz Langa, Yury Selivanov, and Marta Gomez"
" Macias in :gh:`91048`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:762
msgid "A new type of interpreter"
msgstr "一种新型的解释器"

#: ../../whatsnew/3.14.rst:764
msgid ""
"A new type of interpreter has been added to CPython. It uses tail calls "
"between small C functions that implement individual Python opcodes, rather "
"than one large C case statement. For certain newer compilers, this "
"interpreter provides significantly better performance. Preliminary numbers "
"on our machines suggest anywhere up to 30% faster Python code, and a "
"geometric mean of 3-5% faster on ``pyperformance`` depending on platform and"
" architecture. The baseline is Python 3.14 built with Clang 19 without this "
"new interpreter."
msgstr ""
"CPython 新增了一种全新的解释器类型。它通过在实现各个 Python 操作码的小型 C 函数之间使用尾调用来运行，而不是使用单个大型 C case"
" 语句。对于某些较新的编译器，这种解释器能带来显著的性能提升。我们在测试机器上的初步数据显示，Python 代码的运行速度最高可提升 "
"30%，在不同平台和架构上运行 ``pyperformance`` 基准测试的几何平均提速为 3% 到 5%。作为对比的基线是使用 Clang 19 "
"编译、未启用该新解释器的 Python 3.14。"

#: ../../whatsnew/3.14.rst:773
msgid ""
"This interpreter currently only works with Clang 19 and newer on x86-64 and "
"AArch64 architectures. However, we expect that a future release of GCC will "
"support this as well."
msgstr ""
"此解释器目前仅适用于 x86-64 和 AArch64 架构上的 Clang 19 及更高版本。不过，我们预计 GCC 的未来版本也将支持此功能。"

#: ../../whatsnew/3.14.rst:777
msgid ""
"This feature is opt-in for now. We highly recommend enabling profile-guided "
"optimization with the new interpreter as it is the only configuration we "
"have tested and can validate its improved performance. For further "
"information on how to build Python, see :option:`--with-tail-call-interp`."
msgstr ""
"此功能目前为可选功能。 我们强烈建议在新解释器中启用配置文件引导优化，因为这是我们测试过的唯一配置，可以验证其性能提升。 有关如何构建 Python "
"的更多信息，请参阅 :option:`--with-tail-call-interp`。"

#: ../../whatsnew/3.14.rst:785
msgid ""
"This is not to be confused with `tail call optimization`__ of Python "
"functions, which is currently not implemented in CPython."
msgstr ""

#: ../../whatsnew/3.14.rst:788
msgid ""
"This new interpreter type is an internal implementation detail of the "
"CPython interpreter.  It doesn't change the visible behavior of Python "
"programs at all.  It can improve their performance, but doesn't change "
"anything else."
msgstr ""

#: ../../whatsnew/3.14.rst:796
msgid ""
"This section previously reported a 9-15% geometric mean speedup. This number"
" has since been cautiously revised down to 3-5%. While we expect performance"
" results to be better than what we report, our estimates are more "
"conservative due to a `compiler bug <https://github.com/llvm/llvm-"
"project/issues/106846>`_ found in Clang/LLVM 19, which causes the normal "
"interpreter to be slower. We were unaware of this bug, resulting in "
"inaccurate results. We sincerely apologize for communicating results that "
"were only accurate for LLVM v19.1.x and v20.1.0. In the meantime, the bug "
"has been fixed in LLVM v20.1.1 and for the upcoming v21.1, but it will "
"remain unfixed for LLVM v19.1.x and v20.1.0. Thus any benchmarks with those "
"versions of LLVM may produce inaccurate numbers. (Thanks to Nelson Elhage "
"for bringing this to light.)"
msgstr ""
"本节原先报告的几何平均加速比为 9-15%，但这一数字现已谨慎地下调为 3% 到 5%。尽管我们预计实际性能提升可能高于这一范围，但由于在 Clang/LLVM 19 中发现了一个`编译器漏洞<https://github.com/llvm/llvm-project/issues/106846>`_，我们对性能估算变得更加保守。该漏洞会导致常规解释器变慢，我们在早期并未意识到这一点，导致报告的性能数据不准确。对此我们深感抱歉，之前的数据实际上仅对 LLVM v19.1.x 和 v20.1.0 有效。\n"
"目前，这个漏洞已经在 LLVM v20.1.1 和即将发布的 v21.1 中被修复，但在 LLVM v19.1.x 和 v20.1.0 中将不会得到修复。因此，使用这些 LLVM 版本进行的基准测试可能会生成不准确的数据。（感谢 Nelson Elhage 揭示了这个问题。）"

#: ../../whatsnew/3.14.rst:808
msgid ""
"(Contributed by Ken Jin in :gh:`128563`, with ideas on how to implement this"
" in CPython by Mark Shannon, Garrett Gu, Haoran Xu, and Josh Haberman.)"
msgstr ""

#: ../../whatsnew/3.14.rst:814
msgid "Free-threaded mode"
msgstr ""

#: ../../whatsnew/3.14.rst:816
msgid ""
"Free-threaded mode (:pep:`703`), initially added in 3.13, has been "
"significantly improved. The implementation described in PEP 703 was "
"finished, including C API changes, and temporary workarounds in the "
"interpreter were replaced with more permanent solutions. The specializing "
"adaptive interpreter (:pep:`659`) is now enabled in free-threaded mode, "
"which along with many other optimizations greatly improves its performance. "
"The performance penalty on single-threaded code in free-threaded mode is now"
" roughly 5-10%, depending on platform and C compiler used."
msgstr ""

#: ../../whatsnew/3.14.rst:824
msgid ""
"This work was done by many contributors: Sam Gross, Matt Page, Neil "
"Schemenauer, Thomas Wouters, Donghee Na, Kirill Podoprigora, Ken Jin, Itamar"
" Oren, Brett Simmers, Dino Viehland, Nathan Goldbaum, Ralf Gommers, "
"Lysandros Nikolaou, Kumar Aditya, Edgar Margffoy, and many others."
msgstr ""

#: ../../whatsnew/3.14.rst:829
msgid ""
"Some of these contributors are employed by Meta, which has continued to "
"provide significant engineering resources to support this project."
msgstr ""

#: ../../whatsnew/3.14.rst:836
msgid "Syntax highlighting in PyREPL"
msgstr ""

#: ../../whatsnew/3.14.rst:838
msgid ""
"The default :term:`interactive` shell now highlights Python syntax as you "
"type.  The feature is enabled by default unless the "
":envvar:`PYTHON_BASIC_REPL` environment is set or any color-disabling "
"environment variables are used. See :ref:`using-on-controlling-color` for "
"details."
msgstr ""

#: ../../whatsnew/3.14.rst:844
msgid ""
"The default color theme for syntax highlighting strives for good contrast "
"and uses exclusively the 4-bit VGA standard ANSI color codes for maximum "
"compatibility. The theme can be customized using an experimental API "
"``_colorize.set_theme()``.  This can be called interactively, as well as in "
"the :envvar:`PYTHONSTARTUP` script."
msgstr ""

#: ../../whatsnew/3.14.rst:850
msgid "(Contributed by Łukasz Langa in :gh:`131507`.)"
msgstr "（由 Łukasz Langa 在 :gh:`131507` 中贡献。）"

#: ../../whatsnew/3.14.rst:856
msgid "Binary releases for the experimental just-in-time compiler"
msgstr ""

#: ../../whatsnew/3.14.rst:858
msgid ""
"The official macOS and Windows release binaries now include an "
"*experimental* just-in-time (JIT) compiler. Although it is **not** "
"recommended for production use, it can be tested by setting "
":envvar:`PYTHON_JIT=1 <PYTHON_JIT>` as an environment variable. Downstream "
"source builds and redistributors can use the :option:`--enable-experimental-"
"jit=yes-off` configuration option for similar behavior."
msgstr ""

#: ../../whatsnew/3.14.rst:865
msgid ""
"The JIT is at an early stage and still in active development. As such, the "
"typical performance impact of enabling it can range from 10% slower to 20% "
"faster, depending on workload. To aid in testing and evaluation, a set of "
"introspection functions has been provided in the :data:`sys._jit` namespace."
" :func:`sys._jit.is_available` can be used to determine if the current "
"executable supports JIT compilation, while :func:`sys._jit.is_enabled` can "
"be used to tell if JIT compilation has been enabled for the current process."
msgstr ""

#: ../../whatsnew/3.14.rst:873
msgid ""
"Currently, the most significant missing functionality is that native "
"debuggers and profilers like ``gdb`` and ``perf`` are unable to unwind "
"through JIT frames (Python debuggers and profilers, like :mod:`pdb` or "
":mod:`profile`, continue to work without modification). Free-threaded builds"
" do not support JIT compilation."
msgstr ""

#: ../../whatsnew/3.14.rst:878
msgid ""
"Please report any bugs or major performance regressions that you encounter!"
msgstr ""

#: ../../whatsnew/3.14.rst:880
msgid ":pep:`744`"
msgstr ":pep:`744`"

#: ../../whatsnew/3.14.rst:884
msgid "Other language changes"
msgstr "其他语言特性修改"

#: ../../whatsnew/3.14.rst:886
msgid ""
"The default :term:`interactive` shell now supports import autocompletion. "
"This means that typing ``import foo`` and pressing ``<tab>`` will suggest "
"modules starting with ``foo``. Similarly, typing ``from foo import b`` will "
"suggest submodules of ``foo`` starting with ``b``. Note that autocompletion "
"of module attributes is not currently supported. (Contributed by Tomas Roun "
"in :gh:`69605`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:893
msgid ""
"The :func:`map` built-in now has an optional keyword-only *strict* flag like"
" :func:`zip` to check that all the iterables are of equal length. "
"(Contributed by Wannes Boeykens in :gh:`119793`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:897
msgid ""
"Incorrect usage of :keyword:`await` and asynchronous comprehensions is now "
"detected even if the code is optimized away by the :option:`-O` command-line"
" option. For example, ``python -O -c 'assert await 1'`` now produces a "
":exc:`SyntaxError`. (Contributed by Jelle Zijlstra in :gh:`121637`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:902
msgid ""
"Writes to ``__debug__`` are now detected even if the code is optimized away "
"by the :option:`-O` command-line option. For example, ``python -O -c 'assert"
" (__debug__ := 1)'`` now produces a :exc:`SyntaxError`. (Contributed by Irit"
" Katriel in :gh:`122245`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:907
msgid ""
"Add class methods :meth:`float.from_number` and :meth:`complex.from_number` "
"to convert a number to :class:`float` or :class:`complex` type "
"correspondingly. They raise an error if the argument is a string. "
"(Contributed by Serhiy Storchaka in :gh:`84978`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:912
msgid ""
"Implement mixed-mode arithmetic rules combining real and complex numbers as "
"specified by C standards since C99. (Contributed by Sergey B Kirpichev in "
":gh:`69639`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:916
msgid ""
"All Windows code pages are now supported as \"cpXXX\" codecs on Windows. "
"(Contributed by Serhiy Storchaka in :gh:`123803`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:919
msgid ""
":class:`super` objects are now :mod:`pickleable <pickle>` and :mod:`copyable"
" <copy>`. (Contributed by Serhiy Storchaka in :gh:`125767`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:923
msgid ""
"The :class:`memoryview` type now supports subscription, making it a "
":term:`generic type`. (Contributed by Brian Schubert in :gh:`126012`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:927
msgid ""
"Support underscore and comma as thousands separators in the fractional part "
"for floating-point presentation types of the new-style string formatting "
"(with :func:`format` or :ref:`f-strings`). (Contributed by Sergey B "
"Kirpichev in :gh:`87790`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:932
msgid ""
"The :func:`bytes.fromhex` and :func:`bytearray.fromhex` methods now accept "
"ASCII :class:`bytes` and :term:`bytes-like objects <bytes-like object>`. "
"(Contributed by Daniel Pope in :gh:`129349`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:936
msgid ""
"Support ``\\z`` as a synonym for ``\\Z`` in :mod:`regular expressions <re>`."
" It is interpreted unambiguously in many other regular expression engines, "
"unlike ``\\Z``, which has subtly different behavior. (Contributed by Serhiy "
"Storchaka in :gh:`133306`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:941
msgid ""
"``\\B`` in :mod:`regular expression <re>` now matches empty input string. "
"Now it is always the opposite of ``\\b``. (Contributed by Serhiy Storchaka "
"in :gh:`124130`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:945
msgid ""
"iOS and macOS apps can now be configured to redirect ``stdout`` and "
"``stderr`` content to the system log. (Contributed by Russell Keith-Magee in"
" :gh:`127592`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:949
msgid ""
"The iOS testbed is now able to stream test output while the test is running."
" The testbed can also be used to run the test suite of projects other than "
"CPython itself. (Contributed by Russell Keith-Magee in :gh:`127592`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:953
msgid ""
"Three-argument :func:`pow` now tries calling :meth:`~object.__rpow__` if "
"necessary. Previously it was only called in two-argument :func:`!pow` and "
"the binary power operator. (Contributed by Serhiy Storchaka in "
":gh:`130104`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:958
msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified"
" code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"This implementation is used as a fallback when the OpenSSL implementation of"
" HMAC is not available. (Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:964
msgid ""
"The import time flag can now track modules that are already loaded "
"('cached'), via the new :option:`-X importtime=2 <-X>`. When such a module "
"is imported, the ``self`` and ``cumulative`` times are replaced by the "
"string ``cached``. Values above ``2`` for ``-X importtime`` are now reserved"
" for future use. (Contributed by Noah Kim and Adam Turner in :gh:`118655`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:971
msgid ""
"When subclassing from a pure C type, the C slots for the new type are no "
"longer replaced with a wrapped version on class creation if they are not "
"explicitly overridden in the subclass. (Contributed by Tomasz Pytel in "
":gh:`132329`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:976
msgid ""
"The command-line option :option:`-c` now automatically dedents its code "
"argument before execution. The auto-dedentation behavior mirrors "
":func:`textwrap.dedent`. (Contributed by Jon Crall and Steven Sun in "
":gh:`103998`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:981
msgid ""
"Improve error message when an object supporting the synchronous context "
"manager protocol is entered using :keyword:`async with` instead of "
":keyword:`with`. And vice versa with the asynchronous context manager "
"protocol. (Contributed by Bénédikt Tran in :gh:`128398`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:987
msgid ""
":option:`!-J` is no longer a reserved flag for Jython_, and now has no "
"special meaning. (Contributed by Adam Turner in :gh:`133336`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:996
msgid ""
"PEP 765: Disallow ``return``/``break``/``continue`` that exit a ``finally`` "
"block"
msgstr ""

#: ../../whatsnew/3.14.rst:998
msgid ""
"The compiler emits a :exc:`SyntaxWarning` when a :keyword:`return`, "
":keyword:`break` or :keyword:`continue` statements appears where it exits a "
":keyword:`finally` block. This change is specified in :pep:`765`."
msgstr ""

#: ../../whatsnew/3.14.rst:1004
msgid "New modules"
msgstr "新增模块"

#: ../../whatsnew/3.14.rst:1006
msgid ""
":mod:`annotationlib`: For introspecting :term:`annotations <annotation>`. "
"See :pep:`749` for more details. (Contributed by Jelle Zijlstra in "
":gh:`119180`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1012
msgid "Improved modules"
msgstr "改进的模块"

#: ../../whatsnew/3.14.rst:1015 ../../whatsnew/3.14.rst:2176
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.14.rst:1017
msgid ""
"The default value of the :ref:`program name <prog>` for "
":class:`argparse.ArgumentParser` now reflects the way the Python interpreter"
" was instructed to find the ``__main__`` module code. (Contributed by Serhiy"
" Storchaka and Alyssa Coghlan in :gh:`66436`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1022
msgid ""
"Introduced the optional *suggest_on_error* parameter to "
":class:`argparse.ArgumentParser`, enabling suggestions for argument choices "
"and subparser names if mistyped by the user. (Contributed by Savannah "
"Ostrowski in :gh:`124456`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1029
msgid ""
"Introduced the optional *color* parameter to "
":class:`argparse.ArgumentParser`, enabling color for help text. This can be "
"controlled by :ref:`environment variables <using-on-controlling-color>`. "
"Color has also been enabled for help in the :ref:`stdlib CLIs <library-"
"cmdline>` which use :mod:`!argparse`. (Contributed by Hugo van Kemenade in "
":gh:`130645`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1038 ../../whatsnew/3.14.rst:2191
msgid "ast"
msgstr "ast"

#: ../../whatsnew/3.14.rst:1040
msgid ""
"Add :func:`ast.compare` for comparing two ASTs. (Contributed by Batuhan "
"Taskaya and Jeremy Hylton in :gh:`60191`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1043
msgid ""
"Add support for :func:`copy.replace` for AST nodes. (Contributed by Bénédikt"
" Tran in :gh:`121141`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1046
msgid ""
"Docstrings are now removed from an optimized AST in optimization level 2. "
"(Contributed by Irit Katriel in :gh:`123958`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1049
msgid ""
"The ``repr()`` output for AST nodes now includes more information. "
"(Contributed by Tomas Roun in :gh:`116022`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1052
msgid ""
":func:`ast.parse`, when called with an AST as input, now always verifies "
"that the root node type is appropriate. (Contributed by Irit Katriel in "
":gh:`130139`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1056
msgid ""
"Add new ``--feature-version``, ``--optimize``, ``--show-empty`` options to "
"command-line interface. (Contributed by Semyon Moroz in :gh:`133367`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1062
msgid "bdb"
msgstr "bdb"

#: ../../whatsnew/3.14.rst:1064
msgid ""
"The :mod:`bdb` module now supports the :mod:`sys.monitoring` backend. "
"(Contributed by Tian Gao in :gh:`124533`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1071
msgid "calendar"
msgstr "calendar"

#: ../../whatsnew/3.14.rst:1073
msgid ""
"By default, today's date is highlighted in color in :mod:`calendar`'s "
":ref:`command-line <calendar-cli>` text output. This can be controlled by "
":ref:`environment variables <using-on-controlling-color>`. (Contributed by "
"Hugo van Kemenade in :gh:`128317`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1081
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.14.rst:1083
msgid ""
"Add :class:`~concurrent.futures.InterpreterPoolExecutor`, which exposes "
"\"subinterpreters\" (multiple Python interpreters in the same process) to "
"Python code.  This is separate from the proposed API in :pep:`734`. "
"(Contributed by Eric Snow in :gh:`124548`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1091
msgid ""
"The default :class:`~concurrent.futures.ProcessPoolExecutor` :ref:`start "
"method <multiprocessing-start-methods>` changed from :ref:`fork "
"<multiprocessing-start-method-fork>` to :ref:`forkserver <multiprocessing-"
"start-method-forkserver>` on platforms other than macOS and Windows where it"
" was already :ref:`spawn <multiprocessing-start-method-spawn>`."
msgstr ""

#: ../../whatsnew/3.14.rst:1097
msgid ""
"If the threading incompatible *fork* method is required, you must explicitly"
" request it by supplying a multiprocessing context *mp_context* to "
":class:`~concurrent.futures.ProcessPoolExecutor`."
msgstr ""

#: ../../whatsnew/3.14.rst:1101 ../../whatsnew/3.14.rst:1520
msgid ""
"See :ref:`forkserver restrictions <multiprocessing-programming-forkserver>` "
"for information and differences with the *fork* method and how this change "
"may affect existing code with mutable global shared variables and/or shared "
"objects that can not be automatically :mod:`pickled <pickle>`."
msgstr ""

#: ../../whatsnew/3.14.rst:1106 ../../whatsnew/3.14.rst:1525
msgid "(Contributed by Gregory P. Smith in :gh:`84559`.)"
msgstr "（由 Gregory P. Smith 在 :gh:`84559` 中贡献）"

#: ../../whatsnew/3.14.rst:1108
msgid ""
"Add :meth:`concurrent.futures.ProcessPoolExecutor.terminate_workers` and "
":meth:`concurrent.futures.ProcessPoolExecutor.kill_workers` as ways to "
"terminate or kill all living worker processes in the given pool. "
"(Contributed by Charles Machalow in :gh:`130849`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1113
msgid ""
"Add the optional ``buffersize`` parameter to "
":meth:`concurrent.futures.Executor.map` to limit the number of submitted "
"tasks whose results have not yet been yielded. If the buffer is full, "
"iteration over the *iterables* pauses until a result is yielded from the "
"buffer. (Contributed by Enzo Bonnal and Josh Rosenberg in :gh:`74028`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1122
msgid "contextvars"
msgstr "contextvars"

#: ../../whatsnew/3.14.rst:1124
msgid ""
"Support context manager protocol by :class:`contextvars.Token`. (Contributed"
" by Andrew Svetlov in :gh:`129889`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1129
msgid "ctypes"
msgstr "ctypes"

#: ../../whatsnew/3.14.rst:1131
msgid ""
"The layout of :ref:`bit fields <ctypes-bit-fields-in-structures-unions>` in "
":class:`~ctypes.Structure` and :class:`~ctypes.Union` now matches platform "
"defaults (GCC/Clang or MSVC) more closely. In particular, fields no longer "
"overlap. (Contributed by Matthias Görgens in :gh:`97702`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1137
msgid ""
"The :attr:`.Structure._layout_` class attribute can now be set to help match"
" a non-default ABI. (Contributed by Petr Viktorin in :gh:`97702`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1141
msgid ""
"The class of :class:`~ctypes.Structure`/:class:`~ctypes.Union` field "
"descriptors is now available as :class:`~ctypes.CField`, and has new "
"attributes to aid debugging and introspection. (Contributed by Petr Viktorin"
" in :gh:`128715`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1146
msgid ""
"On Windows, the :exc:`~ctypes.COMError` exception is now public. "
"(Contributed by Jun Komoda in :gh:`126686`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1149
msgid ""
"On Windows, the :func:`~ctypes.CopyComPointer` function is now public. "
"(Contributed by Jun Komoda in :gh:`127275`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1152
msgid ""
":func:`ctypes.memoryview_at` now exists to create a :class:`memoryview` "
"object that refers to the supplied pointer and length. This works like "
":func:`ctypes.string_at` except it avoids a buffer copy, and is typically "
"useful when implementing pure Python callback functions that are passed "
"dynamically-sized buffers. (Contributed by Rian Hunter in :gh:`112018`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1159
msgid ""
"Complex types, :class:`~ctypes.c_float_complex`, "
":class:`~ctypes.c_double_complex` and :class:`~ctypes.c_longdouble_complex`,"
" are now available if both the compiler and the ``libffi`` library support "
"complex C types. (Contributed by Sergey B Kirpichev in :gh:`61103`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1165
msgid ""
"Add :func:`ctypes.util.dllist` for listing the shared libraries loaded by "
"the current process. (Contributed by Brian Ward in :gh:`119349`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1169
msgid ""
"Move :func:`ctypes.POINTER` types cache from a global internal cache "
"(``_pointer_type_cache``) to the :attr:`ctypes._CData.__pointer_type__` "
"attribute of the corresponding :mod:`ctypes` types. This will stop the cache"
" from growing without limits in some situations. (Contributed by Sergey "
"Miryanov in :gh:`100926`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1175
msgid ""
"The :class:`ctypes.py_object` type now supports subscription, making it a "
":term:`generic type`. (Contributed by Brian Schubert in :gh:`132168`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1180
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.14.rst:1182
msgid ""
"Add the :func:`~curses.assume_default_colors` function, a refinement of the "
":func:`~curses.use_default_colors` function which allows to change the color"
" pair ``0``. (Contributed by Serhiy Storchaka in :gh:`133139`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1188
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.14.rst:1190
msgid ""
"Add :meth:`datetime.time.strptime` and :meth:`datetime.date.strptime`. "
"(Contributed by Wannes Boeykens in :gh:`41431`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1194
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.14.rst:1196
msgid ""
"Add alternative :class:`~decimal.Decimal` constructor "
":meth:`Decimal.from_number() <decimal.Decimal.from_number>`. (Contributed by"
" Serhiy Storchaka in :gh:`121798`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1200
msgid ""
"Expose :func:`decimal.IEEEContext` to support creation of contexts "
"corresponding to the IEEE 754 (2008) decimal interchange formats. "
"(Contributed by Sergey B Kirpichev in :gh:`53032`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1205
msgid "difflib"
msgstr "difflib"

#: ../../whatsnew/3.14.rst:1207
msgid ""
"Comparison pages with highlighted changes generated by the "
":class:`difflib.HtmlDiff` class now support dark mode. (Contributed by "
"Jiahao Li in :gh:`129939`.)"
msgstr ""
"由 :class:`difflib.HtmlDiff` 类生成的高亮显示更改的比较页面现在支持暗色模式。 （由李佳昊在 :gh:`129939` "
"中贡献。）"

#: ../../whatsnew/3.14.rst:1212
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.14.rst:1214
msgid ""
"Add support for rendering full source location information of "
":class:`instructions <dis.Instruction>`, rather than only the line number. "
"This feature is added to the following interfaces via the *show_positions* "
"keyword argument:"
msgstr ""

#: ../../whatsnew/3.14.rst:1219
msgid ":class:`dis.Bytecode`"
msgstr ":class:`dis.Bytecode`"

#: ../../whatsnew/3.14.rst:1220
msgid ":func:`dis.dis`"
msgstr ":func:`dis.dis`"

#: ../../whatsnew/3.14.rst:1221
msgid ":func:`dis.distb`"
msgstr ":func:`dis.distb`"

#: ../../whatsnew/3.14.rst:1222
msgid ":func:`dis.disassemble`"
msgstr ":func:`dis.disassemble`"

#: ../../whatsnew/3.14.rst:1224
msgid ""
"This feature is also exposed via :option:`dis --show-positions`. "
"(Contributed by Bénédikt Tran in :gh:`123165`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1227
msgid ""
"Add the :option:`dis --specialized` command-line option to show specialized "
"bytecode. (Contributed by Bénédikt Tran in :gh:`127413`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1233
msgid "errno"
msgstr "errno"

#: ../../whatsnew/3.14.rst:1235
msgid ""
"Add :data:`errno.EHWPOISON` error code. (Contributed by James Roy in "
":gh:`126585`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1240
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.14.rst:1242
msgid ""
"Add support for printing the C stack trace on systems that :ref:`support it "
"<c-stack-compatibility>` via :func:`faulthandler.dump_c_stack` or via the "
"*c_stack* argument in :func:`faulthandler.enable`. (Contributed by Peter "
"Bierma in :gh:`127604`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1249
msgid "fnmatch"
msgstr "fnmatch"

#: ../../whatsnew/3.14.rst:1251
msgid ""
"Added :func:`fnmatch.filterfalse` for excluding names matching a pattern. "
"(Contributed by Bénédikt Tran in :gh:`74598`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1256
msgid "fractions"
msgstr "fractions"

#: ../../whatsnew/3.14.rst:1258
msgid ""
"Add support for converting any objects that have the "
":meth:`!as_integer_ratio` method to a :class:`~fractions.Fraction`. "
"(Contributed by Serhiy Storchaka in :gh:`82017`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1262
msgid ""
"Add alternative :class:`~fractions.Fraction` constructor "
":meth:`Fraction.from_number() <fractions.Fraction.from_number>`. "
"(Contributed by Serhiy Storchaka in :gh:`121797`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1268
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.14.rst:1270
msgid ""
"Add support to :func:`functools.partial` and :func:`functools.partialmethod`"
" for :data:`functools.Placeholder` sentinels to reserve a place for "
"positional arguments. (Contributed by Dominykas Grigonis in :gh:`119127`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1275
msgid ""
"Allow the *initial* parameter of :func:`functools.reduce` to be passed as a "
"keyword argument. (Contributed by Sayandip Dutta in :gh:`125916`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1281
msgid "getopt"
msgstr "getopt"

#: ../../whatsnew/3.14.rst:1283
msgid ""
"Add support for options with optional arguments. (Contributed by Serhiy "
"Storchaka in :gh:`126374`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1286
msgid ""
"Add support for returning intermixed options and non-option arguments in "
"order. (Contributed by Serhiy Storchaka in :gh:`126390`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1291
msgid "getpass"
msgstr "getpass"

#: ../../whatsnew/3.14.rst:1293
msgid ""
"Support keyboard feedback by :func:`getpass.getpass` via the keyword-only "
"optional argument ``echo_char``. Placeholder characters are rendered "
"whenever a character is entered, and removed when a character is deleted. "
"(Contributed by Semyon Moroz in :gh:`77065`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1300
msgid "graphlib"
msgstr "graphlib"

#: ../../whatsnew/3.14.rst:1302
msgid ""
"Allow :meth:`graphlib.TopologicalSorter.prepare` to be called more than once"
" as long as sorting has not started. (Contributed by Daniel Pope in "
":gh:`130914`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1308
msgid "heapq"
msgstr "heapq"

#: ../../whatsnew/3.14.rst:1310
msgid "Add functions for working with max-heaps:"
msgstr ""

#: ../../whatsnew/3.14.rst:1312
msgid ":func:`heapq.heapify_max`,"
msgstr ":func:`heapq.heapify_max`,"

#: ../../whatsnew/3.14.rst:1313
msgid ":func:`heapq.heappush_max`,"
msgstr ":func:`heapq.heappush_max`,"

#: ../../whatsnew/3.14.rst:1314
msgid ":func:`heapq.heappop_max`,"
msgstr ":func:`heapq.heappop_max`,"

#: ../../whatsnew/3.14.rst:1315
msgid ":func:`heapq.heapreplace_max`"
msgstr ":func:`heapq.heapreplace_max`"

#: ../../whatsnew/3.14.rst:1316
msgid ":func:`heapq.heappushpop_max`"
msgstr ":func:`heapq.heappushpop_max`"

#: ../../whatsnew/3.14.rst:1320
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.14.rst:1322
msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified"
" code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"(Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1328
msgid "http"
msgstr "http"

#: ../../whatsnew/3.14.rst:1330
msgid ""
"Directory lists and error pages generated by the :mod:`http.server` module "
"allow the browser to apply its default dark mode. (Contributed by Yorik "
"Hansen in :gh:`123430`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1334
msgid ""
"The :mod:`http.server` module now supports serving over HTTPS using the "
":class:`http.server.HTTPSServer` class. This functionality is exposed by the"
" command-line interface (``python -m http.server``) through the following "
"options:"
msgstr ""

#: ../../whatsnew/3.14.rst:1339
msgid "``--tls-cert <path>``: Path to the TLS certificate file."
msgstr ""

#: ../../whatsnew/3.14.rst:1340
msgid "``--tls-key <path>``: Optional path to the private key file."
msgstr ""

#: ../../whatsnew/3.14.rst:1341
msgid ""
"``--tls-password-file <path>``: Optional path to the password file for the "
"private key."
msgstr ""

#: ../../whatsnew/3.14.rst:1343
msgid "(Contributed by Semyon Moroz in :gh:`85162`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1347
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.14.rst:1349
msgid ""
"Add :meth:`IMAP4.idle() <imaplib.IMAP4.idle>`, implementing the IMAP4 "
"``IDLE`` command as defined in :rfc:`2177`. (Contributed by Forest in "
":gh:`55454`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1355
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.14.rst:1357
msgid ""
":func:`inspect.signature` takes a new argument *annotation_format* to "
"control the :class:`annotationlib.Format` used for representing annotations."
" (Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1361
msgid ""
":meth:`inspect.Signature.format` takes a new argument *unquote_annotations*."
" If true, string :term:`annotations <annotation>` are displayed without "
"surrounding quotes. (Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1365
msgid ""
"Add function :func:`inspect.ispackage` to determine whether an object is a "
":term:`package` or not. (Contributed by Zhikang Yan in :gh:`125634`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1371 ../../whatsnew/3.14.rst:1996
msgid "io"
msgstr "io"

#: ../../whatsnew/3.14.rst:1373
msgid ""
"Reading text from a non-blocking stream with ``read`` may now raise a "
":exc:`BlockingIOError` if the operation cannot immediately return bytes. "
"(Contributed by Giovanni Siragusa in :gh:`109523`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1377
msgid ""
"Add protocols :class:`io.Reader` and :class:`io.Writer` as a simpler "
"alternatives to the pseudo-protocols :class:`typing.IO`, "
":class:`typing.TextIO`, and :class:`typing.BinaryIO`. (Contributed by "
"Sebastian Rittau in :gh:`127648`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1384
msgid "json"
msgstr "json"

#: ../../whatsnew/3.14.rst:1386
msgid ""
"Add notes for JSON serialization errors that allow to identify the source of"
" the error. (Contributed by Serhiy Storchaka in :gh:`122163`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1390
msgid ""
"Enable the :mod:`json` module to work as a script using the :option:`-m` "
"switch: :program:`python -m json`. See the :ref:`JSON command-line interface"
" <json-commandline>` documentation. (Contributed by Trey Hunner in "
":gh:`122873`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1397
msgid ""
"By default, the output of the :ref:`JSON command-line interface <json-"
"commandline>` is highlighted in color. This can be controlled by "
":ref:`environment variables <using-on-controlling-color>`. (Contributed by "
"Tomas Roun in :gh:`131952`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1404
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.14.rst:1406
msgid ""
":func:`linecache.getline` can retrieve source code for frozen modules. "
"(Contributed by Tian Gao in :gh:`131638`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1411
msgid "logging.handlers"
msgstr "logging.handlers"

#: ../../whatsnew/3.14.rst:1413
msgid ""
":class:`logging.handlers.QueueListener` now implements the context manager "
"protocol, allowing it to be used in a :keyword:`with` statement. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1417
msgid ""
":meth:`QueueListener.start <logging.handlers.QueueListener.start>` now "
"raises a :exc:`RuntimeError` if the listener is already started. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1423
msgid "math"
msgstr "math"

#: ../../whatsnew/3.14.rst:1425
msgid ""
"Added more detailed error messages for domain errors in the module. "
"(Contributed by by Charlie Zhao and Sergey B Kirpichev in :gh:`101410`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1430
msgid "mimetypes"
msgstr "mimetypes"

#: ../../whatsnew/3.14.rst:1432
msgid ""
"Document the command-line for :mod:`mimetypes`. It now exits with ``1`` on "
"failure instead of ``0`` and ``2`` on incorrect command-line parameters "
"instead of ``1``. Also, errors are printed to stderr instead of stdout and "
"their text is made tighter. (Contributed by Oleg Iarygin and Hugo van "
"Kemenade in :gh:`93096`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1439
msgid "Add MS and :rfc:`8081` MIME types for fonts:"
msgstr ""

#: ../../whatsnew/3.14.rst:1441
msgid "Embedded OpenType: ``application/vnd.ms-fontobject``"
msgstr ""

#: ../../whatsnew/3.14.rst:1442
msgid "OpenType Layout (OTF) ``font/otf``"
msgstr ""

#: ../../whatsnew/3.14.rst:1443
msgid "TrueType: ``font/ttf``"
msgstr ""

#: ../../whatsnew/3.14.rst:1444
msgid "WOFF 1.0 ``font/woff``"
msgstr ""

#: ../../whatsnew/3.14.rst:1445
msgid "WOFF 2.0 ``font/woff2``"
msgstr ""

#: ../../whatsnew/3.14.rst:1447
msgid "(Contributed by Sahil Prajapati and Hugo van Kemenade in :gh:`84852`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1449
msgid ""
"Add :rfc:`9559` MIME types for Matroska audiovisual data container "
"structures, containing:"
msgstr ""

#: ../../whatsnew/3.14.rst:1452
msgid "audio with no video: ``audio/matroska`` (``.mka``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1453
msgid "video: ``video/matroska`` (``.mkv``)"
msgstr "视频：``video/matroska`` (``.mkv``)"

#: ../../whatsnew/3.14.rst:1454
msgid "stereoscopic video: ``video/matroska-3d`` (``.mk3d``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1456
msgid "(Contributed by Hugo van Kemenade in :gh:`89416`.)"
msgstr "（由 Hugo van Kemenade 在 :gh:`89416` 中贡献。）"

#: ../../whatsnew/3.14.rst:1458
msgid "Add MIME types for images with RFCs:"
msgstr ""

#: ../../whatsnew/3.14.rst:1460
msgid ":rfc:`1494`: CCITT Group 3 (``.g3``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1461
msgid ":rfc:`3362`: Real-time Facsimile, T.38 (``.t38``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1462
msgid ""
":rfc:`3745`: JPEG 2000 (``.jp2``), extension (``.jpx``) and compound "
"(``.jpm``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1463
msgid ":rfc:`3950`: Tag Image File Format Fax eXtended, TIFF-FX (``.tfx``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1464
msgid ":rfc:`4047`: Flexible Image Transport System (``.fits``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1465
msgid ""
":rfc:`7903`: Enhanced Metafile (``.emf``) and Windows Metafile (``.wmf``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1467
msgid "(Contributed by Hugo van Kemenade in :gh:`85957`.)"
msgstr "（由 Hugo van Kemenade 在 :gh:`85957` 中贡献。）"

#: ../../whatsnew/3.14.rst:1469
msgid "More MIME type changes:"
msgstr "更多 MIME 类型更改："

#: ../../whatsnew/3.14.rst:1471
msgid ""
":rfc:`2361`: Change type for ``.avi`` to ``video/vnd.avi`` and for ``.wav`` "
"to ``audio/vnd.wave``"
msgstr ""

#: ../../whatsnew/3.14.rst:1473
msgid ":rfc:`4337`: Add MPEG-4 ``audio/mp4`` (``.m4a``)"
msgstr ":rfc:`4337`：添加 MPEG-4 ``audio/mp4`` (``.m4a``)"

#: ../../whatsnew/3.14.rst:1474
msgid ":rfc:`5334`: Add Ogg media (``.oga``, ``.ogg`` and ``.ogx``)"
msgstr ":rfc:`5334`：添加 Ogg 媒体（``.oga``，``.ogg`` 和 ``.ogx``）"

#: ../../whatsnew/3.14.rst:1475
msgid ":rfc:`6713`: Add gzip ``application/gzip`` (``.gz``)"
msgstr ":rfc:`6713`：添加 ``application/gzip`` (``.gz``)"

#: ../../whatsnew/3.14.rst:1476
msgid ":rfc:`9639`: Add FLAC ``audio/flac`` (``.flac``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1477
msgid "Add 7z ``application/x-7z-compressed`` (``.7z``)"
msgstr "添加 7z ``application/x-7z-compressed`` (``.7z``)"

#: ../../whatsnew/3.14.rst:1478
msgid ""
"Add Android Package ``application/vnd.android.package-archive`` (``.apk``) "
"when not strict"
msgstr ""

#: ../../whatsnew/3.14.rst:1480
msgid "Add deb ``application/x-debian-package`` (``.deb``)"
msgstr "添加 deb ``application/x-debian-package`` (``.deb``)"

#: ../../whatsnew/3.14.rst:1481
msgid "Add glTF binary ``model/gltf-binary`` (``.glb``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1482
msgid "Add glTF JSON/ASCII ``model/gltf+json`` (``.gltf``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1483
msgid "Add M4V ``video/x-m4v`` (``.m4v``)"
msgstr "添加 M4V ``video/x-m4v`` (``.m4v``)"

#: ../../whatsnew/3.14.rst:1484
msgid "Add PHP ``application/x-httpd-php`` (``.php``)"
msgstr "添加 PHP ``application/x-httpd-php`` (``.php``)"

#: ../../whatsnew/3.14.rst:1485
msgid "Add RAR ``application/vnd.rar`` (``.rar``)"
msgstr "添加 RAR ``application/vnd.rar`` (``.rar``)"

#: ../../whatsnew/3.14.rst:1486
msgid "Add RPM ``application/x-rpm`` (``.rpm``)"
msgstr "添加 RPM ``application/x-rpm`` (``.rpm``)"

#: ../../whatsnew/3.14.rst:1487
msgid "Add STL ``model/stl`` (``.stl``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1488
msgid "Add Windows Media Video ``video/x-ms-wmv`` (``.wmv``)"
msgstr "添加 Windows 媒体视频 ``video/x-ms-wmv`` (``.wmv``)"

#: ../../whatsnew/3.14.rst:1489
msgid "De facto: Add WebM ``audio/webm`` (``.weba``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1490
msgid ""
"`ECMA-376 <https://ecma-international.org/publications-and-"
"standards/standards/ecma-376/>`__: Add ``.docx``, ``.pptx`` and ``.xlsx`` "
"types"
msgstr ""

#: ../../whatsnew/3.14.rst:1493
msgid ""
"`OASIS <https://docs.oasis-"
"open.org/office/v1.2/cs01/OpenDocument-v1.2-cs01-part1.html#Appendix_C>`__: "
"Add OpenDocument ``.odg``, ``.odp``, ``.ods`` and ``.odt`` types"
msgstr ""

#: ../../whatsnew/3.14.rst:1496
msgid ""
"`W3C <https://www.w3.org/TR/epub-33/#app-media-type>`__: Add EPUB "
"``application/epub+zip`` (``.epub``)"
msgstr ""

#: ../../whatsnew/3.14.rst:1499
msgid "(Contributed by Hugo van Kemenade in :gh:`129965`.)"
msgstr "（由 Hugo van Kemenade 在 :gh:`129965` 中贡献。）"

#: ../../whatsnew/3.14.rst:1501
msgid ""
"Add :rfc:`9512` ``application/yaml`` MIME type for YAML files (``.yaml`` and"
" ``.yml``). (Contributed by Sasha \"Nelie\" Chernykh and Hugo van Kemenade "
"in :gh:`132056`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1507
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.14.rst:1511
msgid ""
"The default :ref:`start method <multiprocessing-start-methods>` changed from"
" :ref:`fork <multiprocessing-start-method-fork>` to :ref:`forkserver "
"<multiprocessing-start-method-forkserver>` on platforms other than macOS and"
" Windows where it was already :ref:`spawn <multiprocessing-start-method-"
"spawn>`."
msgstr ""

#: ../../whatsnew/3.14.rst:1516
msgid ""
"If the threading incompatible *fork* method is required, you must explicitly"
" request it via a context from :func:`multiprocessing.get_context` "
"(preferred) or change the default via "
":func:`multiprocessing.set_start_method`."
msgstr ""

#: ../../whatsnew/3.14.rst:1527
msgid ""
":mod:`multiprocessing`'s ``\"forkserver\"`` start method now authenticates "
"its control socket to avoid solely relying on filesystem permissions to "
"restrict what other processes could cause the forkserver to spawn workers "
"and run code. (Contributed by Gregory P. Smith for :gh:`97514`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1533
msgid ""
"The :ref:`multiprocessing proxy objects <multiprocessing-proxy_objects>` for"
" *list* and *dict* types gain previously overlooked missing methods:"
msgstr ""

#: ../../whatsnew/3.14.rst:1536
msgid ":meth:`!clear` and :meth:`!copy` for proxies of :class:`list`"
msgstr ""

#: ../../whatsnew/3.14.rst:1537
msgid ""
":meth:`~dict.fromkeys`, ``reversed(d)``, ``d | {}``, ``{} | d``, ``d |= "
"{'b': 2}`` for proxies of :class:`dict`"
msgstr ""

#: ../../whatsnew/3.14.rst:1540
msgid "(Contributed by Roy Hyunjin Han for :gh:`103134`.)"
msgstr "（由 Roy Hyunjin Han 在 :gh:`103134` 中贡献。）"

#: ../../whatsnew/3.14.rst:1542
msgid ""
"Add support for shared :class:`set` objects via :meth:`SyncManager.set() "
"<multiprocessing.managers.SyncManager.set>`. The :func:`set` in "
":func:`multiprocessing.Manager` method is now available. (Contributed by "
"Mingyu Park in :gh:`129949`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1547
msgid ""
"Add :func:`multiprocessing.Process.interrupt` which terminates the child "
"process by sending :py:const:`~signal.SIGINT`. This enables "
":keyword:`finally` clauses to print a stack trace for the terminated "
"process. (Contributed by Artem Pulkin in :gh:`131913`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1553
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.14.rst:1555
msgid ""
"Two new functions :func:`operator.is_none` and :func:`operator.is_not_none` "
"have been added, such that ``operator.is_none(obj)`` is equivalent to ``obj "
"is None`` and ``operator.is_not_none(obj)`` is equivalent to ``obj is not "
"None``. (Contributed by Raymond Hettinger and Nico Mexis in :gh:`115808`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1563
msgid "os"
msgstr "os"

#: ../../whatsnew/3.14.rst:1565
msgid ""
"Add the :func:`os.reload_environ` function to update :data:`os.environ` and "
":data:`os.environb` with changes to the environment made by "
":func:`os.putenv`, by :func:`os.unsetenv`, or made outside Python in the "
"same process. (Contributed by Victor Stinner in :gh:`120057`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1571
msgid ""
"Add the :data:`~os.SCHED_DEADLINE` and :data:`~os.SCHED_NORMAL` constants to"
" the :mod:`os` module. (Contributed by James Roy in :gh:`127688`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1575
msgid ""
"Add the :func:`os.readinto` function to read into a :ref:`buffer object "
"<bufferobjects>` from a file descriptor. (Contributed by Cody Maloney in "
":gh:`129205`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1581 ../../whatsnew/3.14.rst:2368
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.14.rst:1583
msgid ""
"Add methods to :class:`pathlib.Path` to recursively copy or move files and "
"directories:"
msgstr ""

#: ../../whatsnew/3.14.rst:1586
msgid ""
":meth:`~pathlib.Path.copy` copies a file or directory tree to a destination."
msgstr ""

#: ../../whatsnew/3.14.rst:1587
msgid ":meth:`~pathlib.Path.copy_into` copies *into* a destination directory."
msgstr ""

#: ../../whatsnew/3.14.rst:1588
msgid ""
":meth:`~pathlib.Path.move` moves a file or directory tree to a destination."
msgstr ""

#: ../../whatsnew/3.14.rst:1589
msgid ":meth:`~pathlib.Path.move_into` moves *into* a destination directory."
msgstr ""

#: ../../whatsnew/3.14.rst:1591
msgid "(Contributed by Barney Gale in :gh:`73991`.)"
msgstr "（由 Barney Gale 在 :gh:`73991` 中贡献。）"

#: ../../whatsnew/3.14.rst:1593
msgid ""
"Add :attr:`pathlib.Path.info` attribute, which stores an object implementing"
" the :class:`pathlib.types.PathInfo` protocol (also new). The object "
"supports querying the file type and internally caching :func:`~os.stat` "
"results. Path objects generated by :meth:`~pathlib.Path.iterdir` are "
"initialized with file type information gleaned from scanning the parent "
"directory. (Contributed by Barney Gale in :gh:`125413`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1603
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.14.rst:1605
msgid ""
"Hardcoded breakpoints (:func:`breakpoint` and :func:`pdb.set_trace`) now "
"reuse the most recent :class:`~pdb.Pdb` instance that calls "
":meth:`~pdb.Pdb.set_trace`, instead of creating a new one each time. As a "
"result, all the instance specific data like :pdbcmd:`display` and "
":pdbcmd:`commands` are preserved across hardcoded breakpoints. (Contributed "
"by Tian Gao in :gh:`121450`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1612
msgid ""
"Add a new argument *mode* to :class:`pdb.Pdb`. Disable the ``restart`` "
"command when :mod:`pdb` is in ``inline`` mode. (Contributed by Tian Gao in "
":gh:`123757`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1616
msgid ""
"A confirmation prompt will be shown when the user tries to quit :mod:`pdb` "
"in ``inline`` mode. ``y``, ``Y``, ``<Enter>`` or ``EOF`` will confirm the "
"quit and call :func:`sys.exit`, instead of raising :exc:`bdb.BdbQuit`. "
"(Contributed by Tian Gao in :gh:`124704`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1621
msgid ""
"Inline breakpoints like :func:`breakpoint` or :func:`pdb.set_trace` will "
"always stop the program at calling frame, ignoring the ``skip`` pattern (if "
"any). (Contributed by Tian Gao in :gh:`130493`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1626
msgid ""
"``<tab>`` at the beginning of the line in :mod:`pdb` multi-line input will "
"fill in a 4-space indentation now, instead of inserting a ``\\t`` character."
" (Contributed by Tian Gao in :gh:`130471`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1630
msgid ""
"Auto-indent is introduced in :mod:`pdb` multi-line input. It will either "
"keep the indentation of the last line or insert a 4-space indentation when "
"it detects a new code block. (Contributed by Tian Gao in :gh:`133350`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1635
msgid ""
"``$_asynctask`` is added to access the current asyncio task if applicable. "
"(Contributed by Tian Gao in :gh:`124367`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1638
msgid ""
":mod:`pdb` now supports two backends: :func:`sys.settrace` and "
":mod:`sys.monitoring`. Using :mod:`pdb` CLI or :func:`breakpoint` will "
"always use the :mod:`sys.monitoring` backend. Explicitly instantiating "
":class:`pdb.Pdb` and its derived classes will use the :func:`sys.settrace` "
"backend by default, which is configurable. (Contributed by Tian Gao in "
":gh:`124533`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1645
msgid ""
":func:`pdb.set_trace_async` is added to support debugging asyncio "
"coroutines. :keyword:`await` statements are supported with this function. "
"(Contributed by Tian Gao in :gh:`132576`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1650
msgid ""
"Source code displayed in :mod:`pdb` will be syntax-highlighted. This feature"
" can be controlled using the same methods as PyREPL, in addition to the "
"newly added ``colorize`` argument of :class:`pdb.Pdb`. (Contributed by Tian "
"Gao and Łukasz Langa in :gh:`133355`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1657
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.14.rst:1659
msgid ""
"Set the default protocol version on the :mod:`pickle` module to 5. For more "
"details, see :ref:`pickle protocols <pickle-protocols>`."
msgstr ""

#: ../../whatsnew/3.14.rst:1662
msgid ""
"Add notes for pickle serialization errors that allow to identify the source "
"of the error. (Contributed by Serhiy Storchaka in :gh:`122213`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1668
msgid "platform"
msgstr "platform"

#: ../../whatsnew/3.14.rst:1670
msgid ""
"Add :func:`platform.invalidate_caches` to invalidate the cached results. "
"(Contributed by Bénédikt Tran in :gh:`122549`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1675
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.14.rst:1677
msgid ""
":term:`Annotations <annotation>` in help output are now usually displayed in"
" a format closer to that in the original source. (Contributed by Jelle "
"Zijlstra in :gh:`101552`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1683
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.14.rst:1685
msgid "Improve and fix support for Bluetooth sockets."
msgstr ""

#: ../../whatsnew/3.14.rst:1687
msgid ""
"Fix support of Bluetooth sockets on NetBSD and DragonFly BSD. (Contributed "
"by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1689
msgid ""
"Fix support for :const:`~socket.BTPROTO_HCI` on FreeBSD. (Contributed by "
"Victor Stinner in :gh:`111178`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1691
msgid ""
"Add support for :const:`~socket.BTPROTO_SCO` on FreeBSD. (Contributed by "
"Serhiy Storchaka in :gh:`85302`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1693
msgid ""
"Add support for *cid* and *bdaddr_type* in the address for "
":const:`~socket.BTPROTO_L2CAP` on FreeBSD. (Contributed by Serhiy Storchaka "
"in :gh:`132429`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1696
msgid ""
"Add support for *channel* in the address for :const:`~socket.BTPROTO_HCI` on"
" Linux. (Contributed by Serhiy Storchaka in :gh:`70145`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1699
msgid ""
"Accept an integer as the address for :const:`~socket.BTPROTO_HCI` on Linux. "
"(Contributed by Serhiy Storchaka in :gh:`132099`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1702
msgid ""
"Return *cid* in :meth:`~socket.socket.getsockname` for "
":const:`~socket.BTPROTO_L2CAP`. (Contributed by Serhiy Storchaka in "
":gh:`132429`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1705
msgid ""
"Add many new constants. (Contributed by Serhiy Storchaka in :gh:`132734`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1709
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.14.rst:1711
msgid ""
"Indicate through :data:`ssl.HAS_PHA` whether the :mod:`ssl` module supports "
"TLSv1.3 post-handshake client authentication (PHA). (Contributed by Will "
"Childs-Klein in :gh:`128036`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1717
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.14.rst:1719
msgid ""
"Support the :c:expr:`float complex` and :c:expr:`double complex` C types in "
"the :mod:`struct` module (formatting characters ``'F'`` and ``'D'`` "
"respectively). (Contributed by Sergey B Kirpichev in :gh:`121249`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1726
msgid "symtable"
msgstr "symtable"

#: ../../whatsnew/3.14.rst:1728
msgid "Expose the following :class:`symtable.Symbol` methods:"
msgstr ""

#: ../../whatsnew/3.14.rst:1730
msgid ":meth:`~symtable.Symbol.is_comp_cell`"
msgstr ":meth:`~symtable.Symbol.is_comp_cell`"

#: ../../whatsnew/3.14.rst:1731
msgid ":meth:`~symtable.Symbol.is_comp_iter`"
msgstr ":meth:`~symtable.Symbol.is_comp_iter`"

#: ../../whatsnew/3.14.rst:1732
msgid ":meth:`~symtable.Symbol.is_free_class`"
msgstr ":meth:`~symtable.Symbol.is_free_class`"

#: ../../whatsnew/3.14.rst:1734
msgid "(Contributed by Bénédikt Tran in :gh:`120029`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1738
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.14.rst:1740
msgid ""
"The previously undocumented special function :func:`sys.getobjects`, which "
"only exists in specialized builds of Python, may now return objects from "
"other interpreters than the one it's called in."
msgstr ""
"之前未写入文档的特殊函数 :func:`sys.getobjects`，它仅存在于某些专用的 Python "
"构建版，现在可以从其他解释器而非调用它的解释器返回对象。"

#: ../../whatsnew/3.14.rst:1744
msgid ""
"Add :func:`sys._is_immortal` for determining if an object is "
":term:`immortal`. (Contributed by Peter Bierma in :gh:`128509`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1747
msgid ""
"On FreeBSD, :data:`sys.platform` doesn't contain the major version anymore. "
"It is always ``'freebsd'``, instead of ``'freebsd13'`` or ``'freebsd14'``."
msgstr ""

#: ../../whatsnew/3.14.rst:1750
msgid ""
"Raise :exc:`DeprecationWarning` for :func:`sys._clear_type_cache`. This "
"function was deprecated in Python 3.13 but it didn't raise a runtime "
"warning."
msgstr ""

#: ../../whatsnew/3.14.rst:1755
msgid "sys.monitoring"
msgstr "sys.monitoring"

#: ../../whatsnew/3.14.rst:1757
msgid ""
"Two new events are added: :monitoring-event:`BRANCH_LEFT` and :monitoring-"
"event:`BRANCH_RIGHT`. The ``BRANCH`` event is deprecated."
msgstr ""

#: ../../whatsnew/3.14.rst:1762
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.14.rst:1764
msgid ""
"Add ``ABIFLAGS`` key to :func:`sysconfig.get_config_vars` on Windows. "
"(Contributed by Xuehai Pan in :gh:`131799`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1769
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.14.rst:1771
msgid ""
":meth:`threading.Thread.start` now sets the operating system thread name to "
":attr:`threading.Thread.name`. (Contributed by Victor Stinner in "
":gh:`59705`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1777
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.14.rst:1779
msgid ""
"Make :mod:`tkinter` widget methods :meth:`!after` and :meth:`!after_idle` "
"accept arguments passed by keyword. (Contributed by Zhikang Yan in "
":gh:`126899`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1783
msgid ""
"Add ability to specify name for :class:`!tkinter.OptionMenu` and "
":class:`!tkinter.ttk.OptionMenu`. (Contributed by Zhikang Yan in "
":gh:`130482`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1788
msgid "turtle"
msgstr "turtle"

#: ../../whatsnew/3.14.rst:1790
msgid ""
"Add context managers for :func:`turtle.fill`, :func:`turtle.poly` and "
":func:`turtle.no_animation`. (Contributed by Marie Roald and Yngve Mardal "
"Moe in :gh:`126350`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1796
msgid "types"
msgstr "types"

#: ../../whatsnew/3.14.rst:1798
msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`. See "
":ref:`below <whatsnew314-typing-union>` for more details. (Contributed by "
"Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1804 ../../whatsnew/3.14.rst:2404
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.14.rst:1808
msgid ""
":class:`types.UnionType` and :class:`typing.Union` are now aliases for each "
"other, meaning that both old-style unions (created with ``Union[int, str]``)"
" and new-style unions (``int | str``) now create instances of the same "
"runtime type. This unifies the behavior between the two syntaxes, but leads "
"to some differences in behavior that may affect users who introspect types "
"at runtime:"
msgstr ""

#: ../../whatsnew/3.14.rst:1814
msgid ""
"Both syntaxes for creating a union now produce the same string "
"representation in ``repr()``. For example, ``repr(Union[int, str])`` is now "
"``\"int | str\"`` instead of ``\"typing.Union[int, str]\"``."
msgstr ""

#: ../../whatsnew/3.14.rst:1817
msgid ""
"Unions created using the old syntax are no longer cached. Previously, "
"running ``Union[int, str]`` multiple times would return the same object "
"(``Union[int, str] is Union[int, str]`` would be ``True``), but now it will "
"return two different objects. Users should use ``==`` to compare unions for "
"equality, not ``is``. New-style unions have never been cached this way. This"
" change could increase memory usage for some programs that use a large "
"number of unions created by subscripting ``typing.Union``. However, several "
"factors offset this cost: unions used in annotations are no longer evaluated"
" by default in Python 3.14 because of :pep:`649`; an instance of "
":class:`types.UnionType` is itself much smaller than the object returned by "
"``Union[]`` was on prior Python versions; and removing the cache also saves "
"some space. It is therefore unlikely that this change will cause a "
"significant increase in memory usage for most users."
msgstr ""

#: ../../whatsnew/3.14.rst:1830
msgid ""
"Previously, old-style unions were implemented using the private class "
"``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection"
" helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""

#: ../../whatsnew/3.14.rst:1835
msgid ""
"It is now possible to use :class:`typing.Union` itself in :func:`isinstance`"
" checks. For example, ``isinstance(int | str, typing.Union)`` will return "
"``True``; previously this raised :exc:`TypeError`."
msgstr ""

#: ../../whatsnew/3.14.rst:1838
msgid ""
"The ``__args__`` attribute of :class:`typing.Union` objects is no longer "
"writable."
msgstr ""

#: ../../whatsnew/3.14.rst:1839
msgid ""
"It is no longer possible to set any attributes on :class:`typing.Union` "
"objects. This only ever worked for dunder attributes on previous versions, "
"was never documented to work, and was subtly broken in many cases."
msgstr ""

#: ../../whatsnew/3.14.rst:1843
msgid "(Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1847
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.14.rst:1849
msgid "The Unicode database has been updated to Unicode 16.0.0."
msgstr "Unicode 数据库已更新到 16.0.0 版本。"

#: ../../whatsnew/3.14.rst:1855
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.14.rst:1857
msgid ""
":mod:`unittest` output is now colored by default. This can be controlled by "
":ref:`environment variables <using-on-controlling-color>`. (Contributed by "
"Hugo van Kemenade in :gh:`127221`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1862
msgid ""
"unittest discovery supports :term:`namespace package` as start directory "
"again. It was removed in Python 3.11. (Contributed by Jacob Walls in "
":gh:`80958`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1866
msgid ""
"A number of new methods were added in the :class:`~unittest.TestCase` class "
"that provide more specialized tests."
msgstr ""

#: ../../whatsnew/3.14.rst:1869
msgid ""
":meth:`~unittest.TestCase.assertHasAttr` and "
":meth:`~unittest.TestCase.assertNotHasAttr` check whether the object has a "
"particular attribute."
msgstr ""

#: ../../whatsnew/3.14.rst:1872
msgid ""
":meth:`~unittest.TestCase.assertIsSubclass` and "
":meth:`~unittest.TestCase.assertNotIsSubclass` check whether the object is a"
" subclass of a particular class, or of one of a tuple of classes."
msgstr ""

#: ../../whatsnew/3.14.rst:1875
msgid ""
":meth:`~unittest.TestCase.assertStartsWith`, "
":meth:`~unittest.TestCase.assertNotStartsWith`, "
":meth:`~unittest.TestCase.assertEndsWith` and "
":meth:`~unittest.TestCase.assertNotEndsWith` check whether the Unicode or "
"byte string starts or ends with particular string(s)."
msgstr ""

#: ../../whatsnew/3.14.rst:1881
msgid "(Contributed by Serhiy Storchaka in :gh:`71339`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1885 ../../whatsnew/3.14.rst:2412
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.14.rst:1887
msgid ""
"Upgrade HTTP digest authentication algorithm for :mod:`urllib.request` by "
"supporting SHA-256 digest authentication as specified in :rfc:`7616`. "
"(Contributed by Calvin Bui in :gh:`128193`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1891
msgid ""
"Improve ergonomics and standards compliance when parsing and emitting "
"``file:`` URLs."
msgstr ""

#: ../../whatsnew/3.14.rst:1894
msgid "In :func:`urllib.request.url2pathname`:"
msgstr "在 :func:`urllib.request.url2pathname`："

#: ../../whatsnew/3.14.rst:1896
msgid ""
"Accept a complete URL when the new *require_scheme* argument is set to true."
msgstr ""

#: ../../whatsnew/3.14.rst:1898
msgid "Discard URL authority if it matches the local hostname."
msgstr ""

#: ../../whatsnew/3.14.rst:1899
msgid ""
"Discard URL authority if it resolves to a local IP address when the new "
"*resolve_host* argument is set to true."
msgstr ""

#: ../../whatsnew/3.14.rst:1901
msgid ""
"Raise :exc:`~urllib.error.URLError` if a URL authority isn't local, except "
"on Windows where we return a UNC path as before."
msgstr ""

#: ../../whatsnew/3.14.rst:1904
msgid "In :func:`urllib.request.pathname2url`:"
msgstr ""

#: ../../whatsnew/3.14.rst:1906
msgid ""
"Return a complete URL when the new *add_scheme* argument is set to true."
msgstr ""

#: ../../whatsnew/3.14.rst:1907
msgid ""
"Include an empty URL authority when a path begins with a slash. For example,"
" the path ``/etc/hosts`` is converted to the URL ``///etc/hosts``."
msgstr ""

#: ../../whatsnew/3.14.rst:1910
msgid ""
"On Windows, drive letters are no longer converted to uppercase, and ``:`` "
"characters not following a drive letter no longer cause an :exc:`OSError` "
"exception to be raised."
msgstr ""

#: ../../whatsnew/3.14.rst:1914
msgid "(Contributed by Barney Gale in :gh:`125866`.)"
msgstr "（由 Barney Gale 在 :gh:`125866` 中贡献。）"

#: ../../whatsnew/3.14.rst:1918 ../../whatsnew/3.14.rst:2006
msgid "uuid"
msgstr "uuid"

#: ../../whatsnew/3.14.rst:1920
msgid ""
"Add support for UUID versions 6, 7, and 8 via :func:`uuid.uuid6`, "
":func:`uuid.uuid7`, and :func:`uuid.uuid8` respectively, as specified in "
":rfc:`9562`. (Contributed by Bénédikt Tran in :gh:`89083`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1925
msgid ""
":const:`uuid.NIL` and :const:`uuid.MAX` are now available to represent the "
"Nil and Max UUID formats as defined by :rfc:`9562`. (Contributed by Nick "
"Pope in :gh:`128427`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1929
msgid ""
"Allow to generate multiple UUIDs at once via :option:`python -m uuid --count"
" <uuid --count>`. (Contributed by Simon Legner in :gh:`131236`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1934
msgid "webbrowser"
msgstr "webbrowser"

#: ../../whatsnew/3.14.rst:1936
msgid ""
"Names in the :envvar:`BROWSER` environment variable can now refer to already"
" registered browsers for the :mod:`webbrowser` module, instead of always "
"generating a new browser command."
msgstr ""

#: ../../whatsnew/3.14.rst:1940
msgid ""
"This makes it possible to set :envvar:`BROWSER` to the value of one of the "
"supported browsers on macOS."
msgstr ""

#: ../../whatsnew/3.14.rst:1945
msgid "zipinfo"
msgstr "zipinfo"

#: ../../whatsnew/3.14.rst:1947
msgid ""
"Added :func:`ZipInfo._for_archive <zipfile.ZipInfo._for_archive>` to resolve"
" suitable defaults for a :class:`~zipfile.ZipInfo` object as used by "
":func:`ZipFile.writestr <zipfile.ZipFile.writestr>`. (Contributed by "
"Bénédikt Tran in :gh:`123424`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1952
msgid ""
":meth:`zipfile.ZipFile.writestr` now respect ``SOURCE_DATE_EPOCH`` that "
"distributions can set centrally and have build tools consume this in order "
"to produce reproducible output. (Contributed by Jiahao Li in :gh:`91279`.)"
msgstr ""
":meth:`zipfile.ZipFile.writestr` 现在会遵从 ``SOURCE_DATE_EPOCH`` "
"环境变量。该变量可由发行版统一设置，以便构建工具通过读取该变量来生成可复现的输出。（由李佳昊在 :gh:`91279` 中贡献。）"

#: ../../whatsnew/3.14.rst:1961
msgid "Optimizations"
msgstr "性能优化"

#: ../../whatsnew/3.14.rst:1963
msgid ""
"The import time for several standard library modules has been improved, "
"including :mod:`ast`, :mod:`asyncio`, :mod:`base64`, :mod:`cmd`, :mod:`csv`,"
" :mod:`gettext`, :mod:`importlib.util`, :mod:`locale`, :mod:`mimetypes`, "
":mod:`optparse`, :mod:`pickle`, :mod:`pprint`, :mod:`pstats`, :mod:`socket`,"
" :mod:`subprocess`, :mod:`threading`, :mod:`tomllib`, and :mod:`zipfile`."
msgstr ""

#: ../../whatsnew/3.14.rst:1969
msgid ""
"(Contributed by Adam Turner, Bénédikt Tran, Chris Markiewicz, Eli Schwartz, "
"Hugo van Kemenade, Jelle Zijlstra, and others in :gh:`118761`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1974 ../../whatsnew/3.14.rst:2219
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.14.rst:1976
msgid ""
":mod:`asyncio` now uses double linked list implementation for native tasks "
"which speeds up execution by 10% on standard pyperformance benchmarks and "
"reduces memory usage. (Contributed by Kumar Aditya in :gh:`107803`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1981
msgid ""
":mod:`asyncio` has new utility functions for introspecting and printing the "
"program's call graph: :func:`asyncio.capture_call_graph` and "
":func:`asyncio.print_call_graph`. (Contributed by Yury Selivanov, Pablo "
"Galindo Salgado, and Łukasz Langa in :gh:`91048`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1988
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.14.rst:1990
msgid ""
"Improve the performance of :func:`base64.b16decode` by up to ten times, and "
"reduce the import time of :mod:`base64` by up to six times. (Contributed by "
"Bénédikt Tran, Chris Markiewicz, and Adam Turner in :gh:`118761`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:1997
msgid ""
":mod:`io` which provides the built-in :func:`open` makes less system calls "
"when opening regular files as well as reading whole files. Reading a small "
"operating system cached file in full is up to 15% faster. "
":func:`pathlib.Path.read_bytes` has the most optimizations for reading a "
"file's bytes in full. (Contributed by Cody Maloney and Victor Stinner in "
":gh:`120754` and :gh:`90102`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2008
msgid ""
"Improve generation of :class:`~uuid.UUID` objects via their dedicated "
"functions:"
msgstr ""

#: ../../whatsnew/3.14.rst:2011
msgid ""
":func:`~uuid.uuid3` and :func:`~uuid.uuid5` are both roughly 40% faster for "
"16-byte names and 20% faster for 1024-byte names. Performance for longer "
"names remains unchanged."
msgstr ""

#: ../../whatsnew/3.14.rst:2014
msgid ""
":func:`~uuid.uuid4` and :func:`~uuid.uuid8` are 30% and 40% faster "
"respectively."
msgstr ""

#: ../../whatsnew/3.14.rst:2017
msgid "(Contributed by Bénédikt Tran in :gh:`128150`.)"
msgstr "（由 Bénédikt Tran 在 :gh:`128150` 中贡献。）"

#: ../../whatsnew/3.14.rst:2021
msgid "zlib"
msgstr "zlib"

#: ../../whatsnew/3.14.rst:2023
msgid ""
"On Windows, ``zlib-ng`` is now used as the implementation of the :mod:`zlib`"
" module. This should produce compatible and comparable results with better "
"performance, though it is worth noting that ``zlib.Z_BEST_SPEED`` (1) may "
"result in significantly less compression than the previous implementation "
"(while also significantly reducing the time taken to compress). (Contributed"
" by Steve Dower in :gh:`91349`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2033 ../../whatsnew/3.14.rst:2727
msgid "Deprecated"
msgstr "弃用"

#: ../../whatsnew/3.14.rst:2035
#: ../../deprecations/pending-removal-in-future.rst:7
msgid ":mod:`argparse`:"
msgstr ":mod:`argparse`："

#: ../../whatsnew/3.14.rst:2037
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to "
":meth:`~argparse.ArgumentParser.add_argument_group` is now deprecated. "
"(Contributed by Savannah Ostrowski in :gh:`125563`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2041
msgid ""
"Deprecated the :class:`argparse.FileType` type converter. Anything with "
"resource management should be done downstream after the arguments are "
"parsed. (Contributed by Serhiy Storchaka in :gh:`58032`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2046
#: ../../deprecations/pending-removal-in-3.16.rst:19
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

#: ../../whatsnew/3.14.rst:2048
#: ../../deprecations/pending-removal-in-3.16.rst:21
msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
":func:`!asyncio.iscoroutinefunction` 已被弃用并将在 Python 3.16 中移除，请改用 :func:`inspect.iscoroutinefunction`。\n"
"（由李佳昊和 Kumar Aditya 在 :gh:`122875` 中贡献。）"

#: ../../whatsnew/3.14.rst:2053
#: ../../deprecations/pending-removal-in-3.16.rst:26
msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ":mod:`asyncio` 策略系统已被弃用并将在 Python 3.16 中移除。 具体而言，是弃用了下列类和函数："

#: ../../whatsnew/3.14.rst:2056
#: ../../deprecations/pending-removal-in-3.16.rst:29
msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ":class:`asyncio.AbstractEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2057
#: ../../deprecations/pending-removal-in-3.16.rst:30
msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ":class:`asyncio.DefaultEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2058
#: ../../deprecations/pending-removal-in-3.16.rst:31
msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsSelectorEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2059
#: ../../deprecations/pending-removal-in-3.16.rst:32
msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsProactorEventLoopPolicy`"

#: ../../whatsnew/3.14.rst:2060
#: ../../deprecations/pending-removal-in-3.16.rst:33
msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ":func:`asyncio.get_event_loop_policy`"

#: ../../whatsnew/3.14.rst:2061
#: ../../deprecations/pending-removal-in-3.16.rst:34
msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ":func:`asyncio.set_event_loop_policy`"

#: ../../whatsnew/3.14.rst:2062
msgid ":func:`asyncio.set_event_loop`"
msgstr ":func:`asyncio.set_event_loop`"

#: ../../whatsnew/3.14.rst:2064
#: ../../deprecations/pending-removal-in-3.16.rst:36
msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""
"用户应当使用 :func:`asyncio.run` 或 :class:`asyncio.Runner` 并附带 *loop_factory* "
"以使用想要的事件循环实现。"

#: ../../whatsnew/3.14.rst:2067
#: ../../deprecations/pending-removal-in-3.16.rst:39
msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr "例如，在 Windows 上使用 :class:`asyncio.SelectorEventLoop`::"

#: ../../whatsnew/3.14.rst:2069
#: ../../deprecations/pending-removal-in-3.16.rst:41
msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"

#: ../../whatsnew/3.14.rst:2076
#: ../../deprecations/pending-removal-in-3.16.rst:48
msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr "（由 Kumar Aditya 在 :gh:`127949` 中贡献。）"

#: ../../whatsnew/3.14.rst:2078
msgid ""
":mod:`builtins`: Passing a complex number as the *real* or *imag* argument "
"in the :func:`complex` constructor is now deprecated; it should only be "
"passed as a single positional argument. (Contributed by Serhiy Storchaka in "
":gh:`109218`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2084
msgid ""
":mod:`codecs`: :func:`codecs.open` is now deprecated. Use :func:`open` "
"instead. (Contributed by Inada Naoki in :gh:`133036`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2088
#: ../../deprecations/pending-removal-in-3.15.rst:16
#: ../../deprecations/pending-removal-in-3.19.rst:4
msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

#: ../../whatsnew/3.14.rst:2090
msgid ""
"On non-Windows platforms, setting :attr:`.Structure._pack_` to use a MSVC-"
"compatible default memory layout is deprecated in favor of setting "
":attr:`.Structure._layout_` to ``'ms'``. (Contributed by Petr Viktorin in "
":gh:`131747`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2095
msgid ""
"Calling :func:`ctypes.POINTER` on a string is deprecated. Use :ref:`ctypes-"
"incomplete-types` for self-referential structures. Also, the internal "
"``ctypes._pointer_type_cache`` is deprecated. See :func:`ctypes.POINTER` for"
" updated implementation details. (Contributed by Sergey Myrianov in "
":gh:`100926`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2101
msgid ""
":mod:`functools`: Calling the Python implementation of "
":func:`functools.reduce` with *function* or *sequence* as keyword arguments "
"is now deprecated. (Contributed by Kirill Podoprigora in :gh:`121676`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2106
msgid ""
":mod:`logging`: Support for custom logging handlers with the *strm* argument"
" is deprecated and scheduled for removal in Python 3.16. Define handlers "
"with the *stream* argument instead. (Contributed by Mariusz Felisiak in "
":gh:`115032`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2111
msgid ""
":mod:`mimetypes`: Valid extensions start with a '.' or are empty for "
":meth:`mimetypes.MimeTypes.add_type`. Undotted extensions are deprecated and"
" will raise a :exc:`ValueError` in Python 3.16. (Contributed by Hugo van "
"Kemenade in :gh:`75223`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2118
msgid ""
":mod:`!nturl2path`: This module is now deprecated. Call "
":func:`urllib.request.url2pathname` and :func:`~urllib.request.pathname2url`"
" instead. (Contributed by Barney Gale in :gh:`125866`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2123
msgid ""
":mod:`os`: :term:`Soft deprecate <soft deprecated>` :func:`os.popen` and "
":func:`os.spawn* <os.spawnl>` functions. They should no longer be used to "
"write new code.  The :mod:`subprocess` module is recommended instead. "
"(Contributed by Victor Stinner in :gh:`120743`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2129
msgid ""
":mod:`pathlib`: :meth:`!pathlib.PurePath.as_uri` is deprecated and will be "
"removed in Python 3.19. Use :meth:`pathlib.Path.as_uri` instead. "
"(Contributed by Barney Gale in :gh:`123599`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2134
msgid ""
":mod:`pdb`: The undocumented ``pdb.Pdb.curframe_locals`` attribute is now a "
"deprecated read-only property. The low overhead dynamic frame locals access "
"added in Python 3.13 by PEP 667 means the frame locals cache reference "
"previously stored in this attribute is no longer needed. Derived debuggers "
"should access ``pdb.Pdb.curframe.f_locals`` directly in Python 3.13 and "
"later versions. (Contributed by Tian Gao in :gh:`124369` and :gh:`125951`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2142
msgid ""
":mod:`symtable`: Deprecate :meth:`symtable.Class.get_methods` due to the "
"lack of interest. (Contributed by Bénédikt Tran in :gh:`119698`.)"
msgstr ""
":mod:`symtable`: :meth:`symtable.Class.get_methods` 因缺少适当的场景已被弃用。 （由 "
"Bénédikt Tran 在 :gh:`119698` 中贡献。）"

#: ../../whatsnew/3.14.rst:2146
msgid ""
":mod:`tkinter`: The :class:`!tkinter.Variable` methods "
":meth:`!trace_variable`, :meth:`!trace_vdelete` and :meth:`!trace_vinfo` are"
" now deprecated. Use :meth:`!trace_add`, :meth:`!trace_remove` and "
":meth:`!trace_info` instead. (Contributed by Serhiy Storchaka in "
":gh:`120220`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2153
msgid ""
":mod:`urllib.parse`: Accepting objects with false values (like ``0`` and "
"``[]``) except empty strings, byte-like objects and ``None`` in "
":mod:`urllib.parse` functions :func:`~urllib.parse.parse_qsl` and "
":func:`~urllib.parse.parse_qs` is now deprecated. (Contributed by Serhiy "
"Storchaka in :gh:`116897`.)"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:2
#: ../../deprecations/pending-removal-in-3.15.rst:2
msgid "Pending removal in Python 3.15"
msgstr "计划在 Python 3.15 中移除"

#: ../../deprecations/pending-removal-in-3.15.rst:4
#: ../../deprecations/pending-removal-in-3.16.rst:4
msgid "The import system:"
msgstr "导入系统："

#: ../../deprecations/pending-removal-in-3.15.rst:6
msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set "
":attr:`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is "
"deprecated. In Python 3.15, :attr:`!__cached__` will cease to be set or take"
" into consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"当设置 :attr:`__spec__.cached <importlib.machinery.ModuleSpec.cached>` "
"失败时在模块上设置 :attr:`~module.__cached__` 的做法已被弃用。 在 Python 3.15 "
"中，:attr:`!__cached__` 将不会再被导入系统或标准库纳入考虑。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:11
msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set "
":attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is "
"deprecated. In Python 3.15, :attr:`!__package__` will cease to be set or "
"take into consideration by the import system or standard library. "
"(:gh:`97879`)"
msgstr ""
"当设备 :attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` "
"失败时在模块上设置 :attr:`~module.__package__` 的做法已被弃用。 在 Python 3.15 "
"中，:attr:`!__package__` 将不会再被导入系统或标准库纳入考虑。 (:gh:`97879`)"

#: ../../deprecations/pending-removal-in-3.15.rst:18
msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated"
" since Python 3.13."
msgstr "未写入文档的 :func:`!ctypes.SetPointerType` 函数自 Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:21
msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

#: ../../deprecations/pending-removal-in-3.15.rst:23
msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has"
" been deprecated since Python 3.13. No direct replacement exists. *Anything*"
" is better than CGI to interface a web server with a request handler."
msgstr ""
"过时且很少被使用的 :class:`~http.server.CGIHTTPRequestHandler` 自 Python 3.13 起已被弃用。 "
"不存在直接的替代品。 对于建立带有请求处理器的 Web 服务程序来说 *任何东西* 都比 CGI 要好。"

#: ../../deprecations/pending-removal-in-3.15.rst:29
msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"用于 :program:`python -m http.server` 命令行界面的 :option:`!--cgi` 旗标自 Python 3.13 "
"起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:32
#: ../../deprecations/pending-removal-in-future.rst:64
msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:34
msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "``load_module()`` 方法：改用 ``exec_module()``。"

#: ../../deprecations/pending-removal-in-3.15.rst:36
msgid ":class:`locale`:"
msgstr ":class:`locale`:"

#: ../../deprecations/pending-removal-in-3.15.rst:38
msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 "
"(:gh:`90817`), but has been postponed to Python 3.15. Use "
":func:`~locale.getlocale`, :func:`~locale.setlocale`, and "
":func:`~locale.getencoding` instead. (Contributed by Hugo van Kemenade in "
":gh:`111187`.)"
msgstr ""
":func:`~locale.getdefaultlocale` 函数自 Python 3.11 起已被弃用。 最初计划在 Python 3.13 "
"中移除它 (:gh:`90817`)，但已被推迟至 Python 3.15。 请改用 :func:`~locale.getlocale`, "
":func:`~locale.setlocale` 和 :func:`~locale.getencoding`。 （由 Hugo van "
"Kemenade 在 :gh:`111187` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.15.rst:46
msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

#: ../../deprecations/pending-removal-in-3.15.rst:48
msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use "
":func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` 自 Python 3.13 起已被弃用。 请使用 "
":func:`os.path.isreserved` 来检测 Windows 上的保留路径。"

#: ../../deprecations/pending-removal-in-3.15.rst:52
msgid ":mod:`platform`:"
msgstr ":mod:`platform`:"

#: ../../deprecations/pending-removal-in-3.15.rst:54
msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` 自 Python 3.13 起已被弃用。 此函数仅对 Jython 支持有用，具有令人困惑的 "
"API，并且大部分未经测试。"

#: ../../deprecations/pending-removal-in-3.15.rst:58
#: ../../deprecations/pending-removal-in-3.16.rst:96
msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

#: ../../deprecations/pending-removal-in-3.15.rst:60
msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
":func:`sysconfig.is_python_build` 的 *check_home* 参数自 Python 3.12 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:63
msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

#: ../../deprecations/pending-removal-in-3.15.rst:65
msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does"
" not permit any arguments, but the C version allows any number of positional"
" or keyword arguments, ignoring every argument."
msgstr ""
"在 Python 3.15 中 :func:`~threading.RLock` 将不再接受参数。 传入参数的做法自 Python 3.14 "
"起已被弃用，因为 Python 版本不接受任何参数，而 C 版本允许任意数量的位置或关键字参数，但会忽略所有参数。"

#: ../../deprecations/pending-removal-in-3.15.rst:71
msgid ":mod:`types`:"
msgstr ":mod:`types`:"

#: ../../deprecations/pending-removal-in-3.15.rst:73
msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: 访问 :attr:`~codeobject.co_lnotab` 的做法自 3.10 起已根据 "
":pep:`626` 被弃用并曾计划在 3.12 中移除，但在 3.12 中实际仅设置了 :exc:`DeprecationWarning`。 可能会在"
" 3.15 中移除。 （由 Nikita Sobolev 在 :gh:`101866` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.15.rst:80
#: ../../deprecations/pending-removal-in-3.17.rst:4
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: ../../deprecations/pending-removal-in-3.15.rst:82
msgid ""
"The undocumented keyword argument syntax for creating "
":class:`~typing.NamedTuple` classes (for example, ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``) has been deprecated since Python "
"3.13. Use the class-based syntax or the functional syntax instead."
msgstr ""
"未写入文档的用于创建 :class:`~typing.NamedTuple` 类的关键字参数语法（例如 ``Point = "
"NamedTuple(\"Point\", x=int, y=int)``）自 Python 3.13 起已被弃用。 请改用基于类的语法或函数语法。"

#: ../../deprecations/pending-removal-in-3.15.rst:88
msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""

#: ../../deprecations/pending-removal-in-3.15.rst:95
msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module,"
" it has yet to be supported by any major type checker."
msgstr ""
":func:`typing.no_type_check_decorator` 装饰器自 Python 3.13 起已被弃用。 存在于 "
":mod:`typing` 模块八年之后，它仍未被任何主要类型检查器所支持。"

#: ../../deprecations/pending-removal-in-3.15.rst:100
msgid ":mod:`wave`:"
msgstr ":mod:`wave`："

#: ../../deprecations/pending-removal-in-3.15.rst:102
msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and "
":meth:`~wave.Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` "
"and :class:`~wave.Wave_write` classes have been deprecated since Python "
"3.13."
msgstr ""
":class:`~wave.Wave_read` 和 :class:`~wave.Wave_write` 类的 "
":meth:`~wave.Wave_read.getmark`, :meth:`!setmark` 和 "
":meth:`~wave.Wave_read.getmarkers` 方法自 Python 3.13 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.15.rst:107
msgid ":mod:`zipimport`:"
msgstr ":mod:`zipimport`:"

#: ../../deprecations/pending-removal-in-3.15.rst:109
msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""
":meth:`~zipimport.zipimporter.load_module` 自 Python 3.10 起已被弃用。请改用 :meth:`~zipimport.zipimporter.exec_module` 。\n"
"（由李佳昊在 :gh:`125746` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:2
msgid "Pending removal in Python 3.16"
msgstr "计划在 Python 3.16 中移除"

#: ../../deprecations/pending-removal-in-3.16.rst:6
msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set "
":attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is "
"deprecated. In Python 3.16, :attr:`!__loader__` will cease to be set or "
"taken into consideration by the import system or the standard library."
msgstr ""
"当设置 :attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>` "
"失败时在模块上设置 :attr:`~module.__loader__` 的做法已被弃用。 在 Python 3.16 "
"中，:attr:`!__loader__` 将不会再被设置或是被导入系统或标准库纳入考虑。"

#: ../../deprecations/pending-removal-in-3.16.rst:11
msgid ":mod:`array`:"
msgstr ":mod:`array`:"

#: ../../deprecations/pending-removal-in-3.16.rst:13
msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"``'u'`` 格式代码 (:c:type:`wchar_t`) 自 Python 3.3 起已在文档中弃用并自 Python 3.13 "
"起在运行时弃用。 对于 Unicode 字符请改用 ``'w'`` 格式代码 (:c:type:`Py_UCS4`)。"

#: ../../deprecations/pending-removal-in-3.16.rst:50
#: ../../deprecations/pending-removal-in-future.rst:16
msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

#: ../../deprecations/pending-removal-in-3.16.rst:52
msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"对布尔类型 ``~True`` 或 ``~False`` 执行按位取反的操作自 Python 3.12 起已被弃用，因为它会产生奇怪和不直观的结果 "
"(``-2`` and ``-1``)。 请改用 ``not x`` 来对布尔值执行逻辑否操作。 "
"对于需要对下层整数执行按位取反操作的少数场合，请显式地将其转换为 ``int`` (``~int(x)``)。"

#: ../../deprecations/pending-removal-in-3.16.rst:59
msgid ":mod:`functools`:"
msgstr ":mod:`functools`："

#: ../../deprecations/pending-removal-in-3.16.rst:61
msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""
"调用 :func:`functools.reduce` 的 Python 实现并传入 *function* 或 *sequence* "
"作为关键字参数的做法自 Python 3.14 起已被弃用。"

#: ../../deprecations/pending-removal-in-3.16.rst:64
msgid ":mod:`logging`:"
msgstr ":mod:`logging`："

#: ../../deprecations/pending-removal-in-3.16.rst:66
msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""
"使用 *strm* 参数对自定义日志记录处理器提供支持的做法已被弃用并计划在 Python 3.16 中移除。 改为使用 *stream* "
"参数定义处理器。 （由 Mariusz Felisiak 在 :gh:`115032` 中贡献。）"

#: ../../deprecations/pending-removal-in-3.16.rst:70
msgid ":mod:`mimetypes`:"
msgstr ":mod:`mimetypes`:"

#: ../../deprecations/pending-removal-in-3.16.rst:72
msgid ""
"Valid extensions start with a '.' or are empty for "
":meth:`mimetypes.MimeTypes.add_type`. Undotted extensions are deprecated and"
" will raise a :exc:`ValueError` in Python 3.16. (Contributed by Hugo van "
"Kemenade in :gh:`75223`.)"
msgstr ""
"有效扩展以\". \"开头或在 :meth:`mimetypes.MimeTypes.add_type` 为空。未加点的扩展已弃用，在Python "
"3.16 中将引发 :exc:`ValueError` 。（由 Hugo van Kemenade 在:gh:`75223` 中贡献）。"

#: ../../deprecations/pending-removal-in-3.16.rst:78
msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

#: ../../deprecations/pending-removal-in-3.16.rst:80
msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is"
" now an alias of :exc:`RuntimeError`."
msgstr ""
":class:`!ExecError` 异常自 Python 3.14 起已被弃用。 它自 Python 3.4 起就未被 :mod:`!shutil`"
" 中的任何函数所使用，现在是 :exc:`RuntimeError` 的一个别名。"

#: ../../deprecations/pending-removal-in-3.16.rst:85
msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

#: ../../deprecations/pending-removal-in-3.16.rst:87
msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
":meth:`Class.get_methods <symtable.Class.get_methods>` 方法自 Python 3.14 起被弃用。"

#: ../../deprecations/pending-removal-in-3.16.rst:90
msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

#: ../../deprecations/pending-removal-in-3.16.rst:92
msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated"
" since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
":func:`~sys._enablelegacywindowsfsencoding` 函数自 Python 3.13 起被弃用。 请改用 "
":envvar:`PYTHONLEGACYWINDOWSFSENCODING` 环境变量。"

#: ../../deprecations/pending-removal-in-3.16.rst:98
msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""
"自Python 3.14 起，:func:`!sysconfig.expand_makefile_vars` 函数已被弃用。请使用 "
":func:`sysconfig.get_paths` 的 ``vars`` 参数代替。"

#: ../../deprecations/pending-removal-in-3.16.rst:102
msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

#: ../../deprecations/pending-removal-in-3.16.rst:104
msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr "未写入文档也未被使用的 :attr:`!TarFile.tarfile` 属性自 Python 3.13 起被弃用。"

#: ../../deprecations/pending-removal-in-3.17.rst:2
msgid "Pending removal in Python 3.17"
msgstr "计划在 Python 3.17 中移除"

#: ../../deprecations/pending-removal-in-3.17.rst:6
msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection"
" helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"在Python 3.14 之前，旧式的联合是通过私有类``typing._UnionGenericAlias`` "
"实现的。实现已不再需要该类，但为向后兼容性保留了该类，并计划在 Python 3.17 中删除。用户应使用记录在案的内省助手函数，如 "
":func:`typing.get_origin` 和 :func:`typing.get_args` ，而不是依赖于私有的实现细节。"

#: ../../deprecations/pending-removal-in-3.19.rst:2
msgid "Pending removal in Python 3.19"
msgstr "计划在 Python 3.19 中移除"

#: ../../deprecations/pending-removal-in-3.19.rst:6
msgid ""
"Implicitly switching to the MSVC-compatible struct layout by setting "
":attr:`~ctypes.Structure._pack_` but not :attr:`~ctypes.Structure._layout_` "
"on non-Windows platforms."
msgstr ""
"在非 Windows 平台上，通过设置 :attr:`~ctypes.Structure._pack_` 而非 "
":attr:`~ctypes.Structure._layout_` ，隐式切换到与 MSVC 兼容的结构布局。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:2
#: ../../deprecations/pending-removal-in-future.rst:2
msgid "Pending removal in future versions"
msgstr "计划在未来版本中移除"

#: ../../deprecations/pending-removal-in-future.rst:4
msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr "以下API将会被移除，尽管具体时间还未确定。"

#: ../../deprecations/pending-removal-in-future.rst:9
msgid ""
"Nesting argument groups and nesting mutually exclusive groups are "
"deprecated."
msgstr "嵌套参数组和嵌套互斥组已被弃用 。"

#: ../../deprecations/pending-removal-in-future.rst:11
msgid ""
"Passing the undocumented keyword argument *prefix_chars* to "
":meth:`~argparse.ArgumentParser.add_argument_group` is now deprecated."
msgstr ""
"将未写入文档的关键字参数 *prefix_chars* 传递给 "
":meth:`~argparse.ArgumentParser.add_argument_group` 的做法现在已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:14
msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr ":class:`argparse.FileType` 类型转换器已弃用 。"

#: ../../deprecations/pending-removal-in-future.rst:18
msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``。"

#: ../../deprecations/pending-removal-in-future.rst:19
msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature"
" is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"生成器: ``throw(type, exc, tb)`` 和 ``athrow(type, exc, tb)`` 签名已被弃用：请改用 "
"``throw(exc)`` 和 ``athrow(exc)``，即单参数签名。"

#: ../../deprecations/pending-removal-in-future.rst:22
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords "
":keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, "
":keyword:`in`, :keyword:`is` and :keyword:`or`.  In a future release it will"
" be changed to a syntax error. (:gh:`87999`)"
msgstr ""
"目前 Python 接受数字类字面值后面紧跟关键字的写法，例如 ``0in x``, ``1or x``, ``0if 1else 2``。 它允许像 "
"``[0x1for x in y]`` 这样令人困惑且有歧义的表达式 (它可以被解读为 ``[0x1 for x in y]`` 或者 ``[0x1f "
"or x in y]``)。 如果数字类字面值后面紧跟关键字 :keyword:`and`, :keyword:`else`, "
":keyword:`for`, :keyword:`if`, :keyword:`in`, :keyword:`is` 和 :keyword:`or` "
"中的一个将会引发语法警告。 在未来的版本中它将改为语法错误。 (:gh:`87999`)"

#: ../../deprecations/pending-removal-in-future.rst:30
msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type:"
" these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"对 ``__index__()`` 和 ``__int__()`` 方法返回非 int 类型的支持：将要求这些方法必须返回 :class:`int` "
"的子类的实例。"

#: ../../deprecations/pending-removal-in-future.rst:33
msgid ""
"Support for ``__float__()`` method returning a strict subclass of "
":class:`float`: these methods will be required to return an instance of "
":class:`float`."
msgstr ""
"对 ``__float__()`` 方法返回 :class:`float` 的子类的支持：将要求这些方法必须返回 :class:`float` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:36
msgid ""
"Support for ``__complex__()`` method returning a strict subclass of "
":class:`complex`: these methods will be required to return an instance of "
":class:`complex`."
msgstr ""
"对 ``__complex__()`` 方法返回 :class:`complex` 的子类的支持：将要求这些方法必须返回 "
":class:`complex` 的实例。"

#: ../../deprecations/pending-removal-in-future.rst:39
msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "将 ``int()`` 委托给 ``__trunc__()`` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:40
msgid ""
"Passing a complex number as the *real* or *imag* argument in the "
":func:`complex` constructor is now deprecated; it should only be passed as a"
" single positional argument. (Contributed by Serhiy Storchaka in "
":gh:`109218`.)"
msgstr ""
"传入一个复数作为 :func:`complex` 构造器中的 *real* 或 *imag* 参数的做法现在已被弃用；它应当仅作为单个位置参数被传入。 "
"（由 Serhiy Storchaka 在 :gh:`109218` 中贡献。）.)"

#: ../../deprecations/pending-removal-in-future.rst:45
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and "
":data:`calendar.FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: ``calendar.January`` 和 ``calendar.February`` 常量已被弃用并由 "
":data:`calendar.JANUARY` 和 :data:`calendar.FEBRUARY` 替代。 （由 Prince Roshan 在 "
":gh:`103636` 中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:50
msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. "
"(:gh:`133038`)"
msgstr ":mod:`codecs`：:func:`codecs.open` 请改用 :func:`open` 。 (:gh:`133038`)"

#: ../../deprecations/pending-removal-in-future.rst:52
msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ":attr:`codeobject.co_lnotab`: 改用 :meth:`codeobject.co_lines` 方法。"

#: ../../deprecations/pending-removal-in-future.rst:55
msgid ":mod:`datetime`:"
msgstr ":mod:`datetime`:"

#: ../../deprecations/pending-removal-in-future.rst:57
msgid ""
":meth:`~datetime.datetime.utcnow`: use "
"``datetime.datetime.now(tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: 使用 "
"``datetime.datetime.now(tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:59
msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use "
"``datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: 使用 "
"``datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)``。"

#: ../../deprecations/pending-removal-in-future.rst:62
msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: 复数值必须是一个整数。"

#: ../../deprecations/pending-removal-in-future.rst:66
msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` *debug_override* 形参已被弃用：改用 "
"*optimization* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:69
msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

#: ../../deprecations/pending-removal-in-future.rst:71
msgid "``EntryPoints`` tuple interface."
msgstr "``EntryPoints`` 元组接口。"

#: ../../deprecations/pending-removal-in-future.rst:72
msgid "Implicit ``None`` on return values."
msgstr "返回值中隐式的 ``None``。"

#: ../../deprecations/pending-removal-in-future.rst:74
msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: ``warn()`` 方法自 Python 3.3 起已被弃用，请改用 "
":meth:`~logging.warning`。"

#: ../../deprecations/pending-removal-in-future.rst:77
msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ":mod:`mailbox`: 对 StringIO 输入和文本模式的使用已被弃用，改用 BytesIO 和二进制模式。"

#: ../../deprecations/pending-removal-in-future.rst:80
msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: 在多线程的进程中调用 :func:`os.register_at_fork`。"

#: ../../deprecations/pending-removal-in-future.rst:82
msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is"
" deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: 使用元组值作为 *exc_info* 形参的做法已被弃用，应使用异常实例。"

#: ../../deprecations/pending-removal-in-future.rst:85
msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and"
" replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: 现在对于正则表达式中的数字分组引用和分组名称将应用更严格的规则。 现在只接受 ASCII 数字序列作为数字引用。 "
"字节串模式和替换字符串中的分组名称现在只能包含 ASCII 字母和数字以及下划线。 （由 Serhiy Storchaka 在 :gh:`91760` "
"中贡献。）"

#: ../../deprecations/pending-removal-in-future.rst:92
msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ":mod:`!sre_compile`, :mod:`!sre_constants` 和 :mod:`!sre_parse` 模块。"

#: ../../deprecations/pending-removal-in-future.rst:94
msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in"
" Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree` 的 *onerror* 形参在 Python 3.12 中已被弃用；请改用 "
"*onexc* 形参。"

#: ../../deprecations/pending-removal-in-future.rst:97
msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` 选项和协议："

#: ../../deprecations/pending-removal-in-future.rst:99
msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` 不带 protocol 参数的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:100
msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and "
":meth:`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` 和 "
":meth:`!selected_npn_protocol` 已被弃用：请改用 ALPN。"

#: ../../deprecations/pending-removal-in-future.rst:103
msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:104
msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` 选项"

#: ../../deprecations/pending-removal-in-future.rst:105
msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:106
msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

#: ../../deprecations/pending-removal-in-future.rst:107
msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:108
msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:109
msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

#: ../../deprecations/pending-removal-in-future.rst:110
msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

#: ../../deprecations/pending-removal-in-future.rst:111
msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

#: ../../deprecations/pending-removal-in-future.rst:112
msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

#: ../../deprecations/pending-removal-in-future.rst:114
msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` 的方法："

#: ../../deprecations/pending-removal-in-future.rst:116
msgid ""
":meth:`!threading.Condition.notifyAll`: use "
":meth:`~threading.Condition.notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: 使用 "
":meth:`~threading.Condition.notify_all`。"

#: ../../deprecations/pending-removal-in-future.rst:117
msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ":meth:`!threading.Event.isSet`: 使用 :meth:`~threading.Event.is_set`。"

#: ../../deprecations/pending-removal-in-future.rst:118
msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use "
":attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: 使用 "
":attr:`threading.Thread.daemon` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:120
msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use "
":attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: 使用 "
":attr:`threading.Thread.name` 属性。"

#: ../../deprecations/pending-removal-in-future.rst:122
msgid ""
":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: 使用 :meth:`threading.current_thread`。"

#: ../../deprecations/pending-removal-in-future.rst:123
msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`: 使用 :meth:`threading.active_count`。"

#: ../../deprecations/pending-removal-in-future.rst:125
msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)。"

#: ../../deprecations/pending-removal-in-future.rst:127
msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
"内部类 ``typing._UnionGenericAlias`` 不再用于实现 :class:`typing.Union` "
"。为了保护使用该私有类的用户的兼容性 ，将至少在 Python 3.17 之前提供兼容性。（由 Jelle Zijlstra 在:gh:`105499`"
" 中贡献）。"

#: ../../deprecations/pending-removal-in-future.rst:132
msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: 从测试用例返回不为 ``None`` 的值的做法已被弃用。"

#: ../../deprecations/pending-removal-in-future.rst:135
msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ":mod:`urllib.parse` 函数已被弃用：改用 :func:`~urllib.parse.urlparse`"

#: ../../deprecations/pending-removal-in-future.rst:137
msgid "``splitattr()``"
msgstr "``splitattr()``"

#: ../../deprecations/pending-removal-in-future.rst:138
msgid "``splithost()``"
msgstr "``splithost()``"

#: ../../deprecations/pending-removal-in-future.rst:139
msgid "``splitnport()``"
msgstr "``splitnport()``"

#: ../../deprecations/pending-removal-in-future.rst:140
msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

#: ../../deprecations/pending-removal-in-future.rst:141
msgid "``splitport()``"
msgstr "``splitport()``"

#: ../../deprecations/pending-removal-in-future.rst:142
msgid "``splitquery()``"
msgstr "``splitquery()``"

#: ../../deprecations/pending-removal-in-future.rst:143
msgid "``splittag()``"
msgstr "``splittag()``"

#: ../../deprecations/pending-removal-in-future.rst:144
msgid "``splittype()``"
msgstr "``splittype()``"

#: ../../deprecations/pending-removal-in-future.rst:145
msgid "``splituser()``"
msgstr "``splituser()``"

#: ../../deprecations/pending-removal-in-future.rst:146
msgid "``splitvalue()``"
msgstr "``splitvalue()``"

#: ../../deprecations/pending-removal-in-future.rst:147
msgid "``to_bytes()``"
msgstr "``to_bytes()``"

#: ../../deprecations/pending-removal-in-future.rst:149
msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` 不应执行部分写入。"

#: ../../deprecations/pending-removal-in-future.rst:152
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an "
":class:`~xml.etree.ElementTree.Element` is deprecated. In a future release "
"it will always return ``True``. Prefer explicit ``len(elem)`` or ``elem is "
"not None`` tests instead."
msgstr ""
":mod:`xml.etree.ElementTree`: 对 :class:`~xml.etree.ElementTree.Element` "
"的真值测试已被弃用。 在未来的发布版中它将始终返回 ``True``。 建议改用显式的 ``len(elem)`` 或 ``elem is not "
"None`` 测试。"

#: ../../deprecations/pending-removal-in-future.rst:157
msgid ""
":func:`sys._clear_type_cache` is deprecated: use "
":func:`sys._clear_internal_caches` instead."
msgstr ""
":func:`sys._clear_type_cache` 已弃用，请改用 :func:`sys._clear_internal_caches` 。"

#: ../../whatsnew/3.14.rst:2173 ../../whatsnew/3.14.rst:2808
msgid "Removed"
msgstr "移除"

#: ../../whatsnew/3.14.rst:2178
msgid ""
"Remove the *type*, *choices*, and *metavar* parameters of "
":class:`!argparse.BooleanOptionalAction`. They were deprecated since 3.12."
msgstr ""

#: ../../whatsnew/3.14.rst:2182
msgid ""
"Calling :meth:`~argparse.ArgumentParser.add_argument_group` on an argument "
"group, and calling :meth:`~argparse.ArgumentParser.add_argument_group` or "
":meth:`~argparse.ArgumentParser.add_mutually_exclusive_group` on a mutually "
"exclusive group now raise exceptions. This nesting was never supported, "
"often failed to work correctly, and was unintentionally exposed through "
"inheritance. This functionality has been deprecated since Python 3.11. "
"(Contributed by Savannah Ostrowski in :gh:`127186`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2193
msgid ""
"Remove the following classes. They were all deprecated since Python 3.8, and"
" have emitted deprecation warnings since Python 3.12:"
msgstr ""

#: ../../whatsnew/3.14.rst:2196
msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

#: ../../whatsnew/3.14.rst:2197
msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

#: ../../whatsnew/3.14.rst:2198
msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NameConstant`"

#: ../../whatsnew/3.14.rst:2199
msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

#: ../../whatsnew/3.14.rst:2200
msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

#: ../../whatsnew/3.14.rst:2202
msgid ""
"Use :class:`ast.Constant` instead. As a consequence of these removals, user-"
"defined ``visit_Num``, ``visit_Str``, ``visit_Bytes``, "
"``visit_NameConstant`` and ``visit_Ellipsis`` methods on custom "
":class:`ast.NodeVisitor` subclasses will no longer be called when the "
":class:`!NodeVisitor` subclass is visiting an AST. Define a "
"``visit_Constant`` method instead."
msgstr ""

#: ../../whatsnew/3.14.rst:2209
msgid ""
"Also, remove the following deprecated properties on :class:`ast.Constant`, "
"which were present for compatibility with the now-removed AST classes:"
msgstr ""

#: ../../whatsnew/3.14.rst:2212
msgid ":attr:`!ast.Constant.n`"
msgstr ":attr:`!ast.Constant.n`"

#: ../../whatsnew/3.14.rst:2213
msgid ":attr:`!ast.Constant.s`"
msgstr ":attr:`!ast.Constant.s`"

#: ../../whatsnew/3.14.rst:2215
msgid ""
"Use :attr:`!ast.Constant.value` instead. (Contributed by Alex Waygood in "
":gh:`119562`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2221
msgid ""
"Remove the following classes and functions. They were all deprecated and "
"emitted deprecation warnings since Python 3.12:"
msgstr ""

#: ../../whatsnew/3.14.rst:2224
msgid ":func:`!asyncio.get_child_watcher`"
msgstr ":func:`!asyncio.get_child_watcher`"

#: ../../whatsnew/3.14.rst:2225
msgid ":func:`!asyncio.set_child_watcher`"
msgstr ":func:`!asyncio.set_child_watcher`"

#: ../../whatsnew/3.14.rst:2226
msgid ":meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher`"
msgstr ":meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher`"

#: ../../whatsnew/3.14.rst:2227
msgid ":meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher`"
msgstr ":meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher`"

#: ../../whatsnew/3.14.rst:2228
msgid ":class:`!asyncio.AbstractChildWatcher`"
msgstr ":class:`!asyncio.AbstractChildWatcher`"

#: ../../whatsnew/3.14.rst:2229
msgid ":class:`!asyncio.FastChildWatcher`"
msgstr ":class:`!asyncio.FastChildWatcher`"

#: ../../whatsnew/3.14.rst:2230
msgid ":class:`!asyncio.MultiLoopChildWatcher`"
msgstr ":class:`!asyncio.MultiLoopChildWatcher`"

#: ../../whatsnew/3.14.rst:2231
msgid ":class:`!asyncio.PidfdChildWatcher`"
msgstr ":class:`!asyncio.PidfdChildWatcher`"

#: ../../whatsnew/3.14.rst:2232
msgid ":class:`!asyncio.SafeChildWatcher`"
msgstr ":class:`!asyncio.SafeChildWatcher`"

#: ../../whatsnew/3.14.rst:2233
msgid ":class:`!asyncio.ThreadedChildWatcher`"
msgstr ":class:`!asyncio.ThreadedChildWatcher`"

#: ../../whatsnew/3.14.rst:2235
msgid "(Contributed by Kumar Aditya in :gh:`120804`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2237
msgid ""
"Removed implicit creation of event loop by :func:`asyncio.get_event_loop`. "
"It now raises a :exc:`RuntimeError` if there is no current event loop. "
"(Contributed by Kumar Aditya in :gh:`126353`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2241
msgid ""
"There's a few patterns that use :func:`asyncio.get_event_loop`, most of them"
" can be replaced with :func:`asyncio.run`."
msgstr ""

#: ../../whatsnew/3.14.rst:2244
msgid "If you're running an async function, simply use :func:`asyncio.run`."
msgstr ""

#: ../../whatsnew/3.14.rst:2246 ../../whatsnew/3.14.rst:2269
#: ../../whatsnew/3.14.rst:2295
msgid "Before::"
msgstr "之前::"

#: ../../whatsnew/3.14.rst:2248
msgid ""
"async def main():\n"
"    ...\n"
"\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    loop.close()"
msgstr ""
"async def main():\n"
"    ...\n"
"\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    loop.close()"

#: ../../whatsnew/3.14.rst:2258 ../../whatsnew/3.14.rst:2281
#: ../../whatsnew/3.14.rst:2314
msgid "After::"
msgstr "之后::"

#: ../../whatsnew/3.14.rst:2260
msgid ""
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main())"
msgstr ""
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main())"

#: ../../whatsnew/3.14.rst:2265
msgid ""
"If you need to start something, for example, a server listening on a socket "
"and then run forever, use :func:`asyncio.run` and an :class:`asyncio.Event`."
msgstr ""

#: ../../whatsnew/3.14.rst:2271
msgid ""
"def start_server(loop):\n"
"    ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    start_server(loop)\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"
msgstr ""
"def start_server(loop):\n"
"    ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    start_server(loop)\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"

#: ../../whatsnew/3.14.rst:2283
msgid ""
"def start_server(loop):\n"
"    ...\n"
"\n"
"async def main():\n"
"    start_server(asyncio.get_running_loop())\n"
"    await asyncio.Event().wait()\n"
"\n"
"asyncio.run(main())"
msgstr ""

#: ../../whatsnew/3.14.rst:2292
msgid ""
"If you need to run something in an event loop, then run some blocking code "
"around it, use :class:`asyncio.Runner`."
msgstr ""

#: ../../whatsnew/3.14.rst:2297
msgid ""
"async def operation_one():\n"
"    ...\n"
"\n"
"def blocking_code():\n"
"    ...\n"
"\n"
"async def operation_two():\n"
"    ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(operation_one())\n"
"    blocking_code()\n"
"    loop.run_until_complete(operation_two())\n"
"finally:\n"
"    loop.close()"
msgstr ""
"async def operation_one():\n"
"    ...\n"
"\n"
"def blocking_code():\n"
"    ...\n"
"\n"
"async def operation_two():\n"
"    ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(operation_one())\n"
"    blocking_code()\n"
"    loop.run_until_complete(operation_two())\n"
"finally:\n"
"    loop.close()"

#: ../../whatsnew/3.14.rst:2316
msgid ""
"async def operation_one():\n"
"    ...\n"
"\n"
"def blocking_code():\n"
"    ...\n"
"\n"
"async def operation_two():\n"
"    ...\n"
"\n"
"with asyncio.Runner() as runner:\n"
"    runner.run(operation_one())\n"
"    blocking_code()\n"
"    runner.run(operation_two())"
msgstr ""
"async def operation_one():\n"
"    ...\n"
"\n"
"def blocking_code():\n"
"    ...\n"
"\n"
"async def operation_two():\n"
"    ...\n"
"\n"
"with asyncio.Runner() as runner:\n"
"    runner.run(operation_one())\n"
"    blocking_code()\n"
"    runner.run(operation_two())"

#: ../../whatsnew/3.14.rst:2333
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.14.rst:2335
msgid ""
"Remove :class:`!collections.abc.ByteString`. It had previously raised a "
":exc:`DeprecationWarning` since Python 3.12."
msgstr ""

#: ../../whatsnew/3.14.rst:2339
msgid "email"
msgstr "email"

#: ../../whatsnew/3.14.rst:2341
msgid ""
"Remove the *isdst* parameter from :func:`email.utils.localtime`. "
"(Contributed by Hugo van Kemenade in :gh:`118798`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2345
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.14.rst:2347
msgid "Remove deprecated :mod:`importlib.abc` classes:"
msgstr ""

#: ../../whatsnew/3.14.rst:2349
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

#: ../../whatsnew/3.14.rst:2350
msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

#: ../../whatsnew/3.14.rst:2351
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

#: ../../whatsnew/3.14.rst:2353
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr "使用 :mod:`importlib.resources.abc` 类代替:"

#: ../../whatsnew/3.14.rst:2355
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

#: ../../whatsnew/3.14.rst:2356
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

#: ../../whatsnew/3.14.rst:2358
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "（由 Jason R. Coombs 和 Hugo van Kemenade 在 :gh:`93963` 中贡献。）"

#: ../../whatsnew/3.14.rst:2361
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.14.rst:2363
msgid ""
"Remove :mod:`itertools` support for copy, deepcopy, and pickle operations. "
"These had previously raised a :exc:`DeprecationWarning` since Python 3.12. "
"(Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2370
msgid ""
"Remove support for passing additional keyword arguments to "
":class:`pathlib.Path`. In previous versions, any such arguments are ignored."
msgstr ""

#: ../../whatsnew/3.14.rst:2372
msgid ""
"Remove support for passing additional positional arguments to "
":meth:`pathlib.PurePath.relative_to` and "
":meth:`~pathlib.PurePath.is_relative_to`. In previous versions, any such "
"arguments are joined onto *other*."
msgstr ""

#: ../../whatsnew/3.14.rst:2378
msgid "pkgutil"
msgstr "pkgutil"

#: ../../whatsnew/3.14.rst:2380
msgid ""
"Remove deprecated :func:`!pkgutil.get_loader` and "
":func:`!pkgutil.find_loader`. These had previously raised a "
":exc:`DeprecationWarning` since Python 3.12. (Contributed by Bénédikt Tran "
"in :gh:`97850`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2385
msgid "pty"
msgstr "pty"

#: ../../whatsnew/3.14.rst:2387
msgid ""
"Remove deprecated :func:`!pty.master_open` and :func:`!pty.slave_open`. They"
" had previously raised a :exc:`DeprecationWarning` since Python 3.12. Use "
":func:`pty.openpty` instead. (Contributed by Nikita Sobolev in "
":gh:`118824`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2393
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.14.rst:2395
msgid ""
"Remove :data:`!version` and :data:`!version_info` from :mod:`sqlite3`. "
"(Contributed by Hugo van Kemenade in :gh:`118924`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2398
msgid ""
"Disallow using a sequence of parameters with named placeholders. This had "
"previously raised a :exc:`DeprecationWarning` since Python 3.12; it will now"
" raise a :exc:`sqlite3.ProgrammingError`. (Contributed by Erlend E. Aasland "
"in :gh:`118928` and :gh:`101693`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2406
msgid ""
"Remove :class:`!typing.ByteString`. It had previously raised a "
":exc:`DeprecationWarning` since Python 3.12."
msgstr ""

#: ../../whatsnew/3.14.rst:2409
msgid ":class:`typing.TypeAliasType` now supports star unpacking."
msgstr ""

#: ../../whatsnew/3.14.rst:2414
msgid ""
"Remove deprecated :class:`!Quoter` class from :mod:`urllib.parse`. It had "
"previously raised a :exc:`DeprecationWarning` since Python 3.11. "
"(Contributed by Nikita Sobolev in :gh:`118827`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2417
msgid ""
"Remove deprecated :class:`!URLopener` and :class:`!FancyURLopener` classes "
"from :mod:`urllib.request`. They had previously raised a "
":exc:`DeprecationWarning` since Python 3.3."
msgstr ""

#: ../../whatsnew/3.14.rst:2421
msgid ""
"``myopener.open()`` can be replaced with :func:`~urllib.request.urlopen`, "
"and ``myopener.retrieve()`` can be replaced with "
":func:`~urllib.request.urlretrieve`. Customizations to the opener classes "
"can be replaced by passing customized handlers to "
":func:`~urllib.request.build_opener`. (Contributed by Barney Gale in "
":gh:`84850`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2429
msgid "Others"
msgstr "其他事项"

#: ../../whatsnew/3.14.rst:2431
msgid ""
"Using :data:`NotImplemented` in a boolean context will now raise a "
":exc:`TypeError`. It had previously raised a :exc:`DeprecationWarning` since"
" Python 3.9. (Contributed by Jelle Zijlstra in :gh:`118767`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2435
msgid ""
"The :func:`int` built-in no longer delegates to :meth:`~object.__trunc__`. "
"Classes that want to support conversion to integer must implement either "
":meth:`~object.__int__` or :meth:`~object.__index__`. (Contributed by Mark "
"Dickinson in :gh:`119743`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2442
msgid "CPython bytecode changes"
msgstr "CPython 字节码的改变"

#: ../../whatsnew/3.14.rst:2444
msgid ""
"Replaced the opcode ``BINARY_SUBSCR`` by :opcode:`BINARY_OP` with oparg "
"``NB_SUBSCR``. (Contributed by Irit Katriel in :gh:`100239`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2448 ../../whatsnew/3.14.rst:2669
msgid "Porting to Python 3.14"
msgstr "移植到 Python 3.14"

#: ../../whatsnew/3.14.rst:2450
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "本节列出了先前描述的更改以及可能需要更改代码的其他错误修正."

#: ../../whatsnew/3.14.rst:2454
msgid "Changes in the Python API"
msgstr "Python API 的变化"

#: ../../whatsnew/3.14.rst:2456
msgid ""
":class:`functools.partial` is now a method descriptor. Wrap it in "
":func:`staticmethod` if you want to preserve the old behavior. (Contributed "
"by Serhiy Storchaka and Dominykas Grigonis in :gh:`121027`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2460
msgid ""
"The :func:`locale.nl_langinfo` function now sets temporarily the "
"``LC_CTYPE`` locale in some cases. This temporary change affects other "
"threads. (Contributed by Serhiy Storchaka in :gh:`69998`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2465
msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`, causing "
"changes in some behaviors. See :ref:`above <whatsnew314-typing-union>` for "
"more details. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2472
msgid "Build changes"
msgstr "构建变化"

#: ../../whatsnew/3.14.rst:2474
msgid ""
"GNU Autoconf 2.72 is now required to generate :file:`configure`. "
"(Contributed by Erlend Aasland in :gh:`115765`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2477
msgid ""
"``#pragma``-based linking with ``python3*.lib`` can now be switched off with"
" :c:expr:`Py_NO_LINK_LIB`. (Contributed by Jean-Christophe Fillion-Robin in "
":gh:`82909`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2484
msgid "PEP 761: Discontinuation of PGP signatures"
msgstr "PEP 761：停止使用 PGP 签名"

#: ../../whatsnew/3.14.rst:2486
msgid ""
"PGP signatures will not be available for CPython 3.14 and onwards. Users "
"verifying artifacts must use `Sigstore verification materials`_ for "
"verifying CPython artifacts. This change in release process is specified in "
":pep:`761`."
msgstr ""

#: ../../whatsnew/3.14.rst:2495
msgid "C API changes"
msgstr "C API 的变化"

#: ../../whatsnew/3.14.rst:2500
msgid ""
"Add :c:func:`PyLong_GetSign` function to get the sign of :class:`int` "
"objects. (Contributed by Sergey B Kirpichev in :gh:`116560`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2503
msgid ""
"Add a new :c:type:`PyUnicodeWriter` API to create a Python :class:`str` "
"object:"
msgstr ""

#: ../../whatsnew/3.14.rst:2506
msgid ":c:func:`PyUnicodeWriter_Create`"
msgstr ":c:func:`PyUnicodeWriter_Create`"

#: ../../whatsnew/3.14.rst:2507
msgid ":c:func:`PyUnicodeWriter_DecodeUTF8Stateful`"
msgstr ":c:func:`PyUnicodeWriter_DecodeUTF8Stateful`"

#: ../../whatsnew/3.14.rst:2508
msgid ":c:func:`PyUnicodeWriter_Discard`"
msgstr ":c:func:`PyUnicodeWriter_Discard`"

#: ../../whatsnew/3.14.rst:2509
msgid ":c:func:`PyUnicodeWriter_Finish`"
msgstr ":c:func:`PyUnicodeWriter_Finish`"

#: ../../whatsnew/3.14.rst:2510
msgid ":c:func:`PyUnicodeWriter_Format`"
msgstr ":c:func:`PyUnicodeWriter_Format`"

#: ../../whatsnew/3.14.rst:2511
msgid ":c:func:`PyUnicodeWriter_WriteChar`"
msgstr ":c:func:`PyUnicodeWriter_WriteChar`"

#: ../../whatsnew/3.14.rst:2512
msgid ":c:func:`PyUnicodeWriter_WriteRepr`"
msgstr ":c:func:`PyUnicodeWriter_WriteRepr`"

#: ../../whatsnew/3.14.rst:2513
msgid ":c:func:`PyUnicodeWriter_WriteStr`"
msgstr ":c:func:`PyUnicodeWriter_WriteStr`"

#: ../../whatsnew/3.14.rst:2514
msgid ":c:func:`PyUnicodeWriter_WriteSubstring`"
msgstr ":c:func:`PyUnicodeWriter_WriteSubstring`"

#: ../../whatsnew/3.14.rst:2515
msgid ":c:func:`PyUnicodeWriter_WriteUCS4`"
msgstr ":c:func:`PyUnicodeWriter_WriteUCS4`"

#: ../../whatsnew/3.14.rst:2516
msgid ":c:func:`PyUnicodeWriter_WriteUTF8`"
msgstr ":c:func:`PyUnicodeWriter_WriteUTF8`"

#: ../../whatsnew/3.14.rst:2517
msgid ":c:func:`PyUnicodeWriter_WriteWideChar`"
msgstr ":c:func:`PyUnicodeWriter_WriteWideChar`"

#: ../../whatsnew/3.14.rst:2519
msgid "(Contributed by Victor Stinner in :gh:`119182`.)"
msgstr "（由 Victor Stinner 在 :gh:`119182` 中贡献。）"

#: ../../whatsnew/3.14.rst:2521
msgid ""
"Add :c:func:`PyIter_NextItem` to replace :c:func:`PyIter_Next`, which has an"
" ambiguous return value. (Contributed by Irit Katriel and Erlend Aasland in "
":gh:`105201`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2525
msgid ""
"Add :c:func:`PyLong_IsPositive`, :c:func:`PyLong_IsNegative` and "
":c:func:`PyLong_IsZero` for checking if :c:type:`PyLongObject` is positive, "
"negative, or zero, respectively. (Contributed by James Roy and Sergey B "
"Kirpichev in :gh:`126061`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2530
msgid ""
"Add new functions to convert C ``<stdint.h>`` numbers from/to Python "
":class:`int`:"
msgstr ""

#: ../../whatsnew/3.14.rst:2533
msgid ":c:func:`PyLong_AsInt32`"
msgstr ":c:func:`PyLong_AsInt32`"

#: ../../whatsnew/3.14.rst:2534
msgid ":c:func:`PyLong_AsInt64`"
msgstr ":c:func:`PyLong_AsInt64`"

#: ../../whatsnew/3.14.rst:2535
msgid ":c:func:`PyLong_AsUInt32`"
msgstr ":c:func:`PyLong_AsUInt32`"

#: ../../whatsnew/3.14.rst:2536
msgid ":c:func:`PyLong_AsUInt64`"
msgstr ":c:func:`PyLong_AsUInt64`"

#: ../../whatsnew/3.14.rst:2537
msgid ":c:func:`PyLong_FromInt32`"
msgstr ":c:func:`PyLong_FromInt32`"

#: ../../whatsnew/3.14.rst:2538
msgid ":c:func:`PyLong_FromInt64`"
msgstr ":c:func:`PyLong_FromInt64`"

#: ../../whatsnew/3.14.rst:2539
msgid ":c:func:`PyLong_FromUInt32`"
msgstr ":c:func:`PyLong_FromUInt32`"

#: ../../whatsnew/3.14.rst:2540
msgid ":c:func:`PyLong_FromUInt64`"
msgstr ":c:func:`PyLong_FromUInt64`"

#: ../../whatsnew/3.14.rst:2542
msgid "(Contributed by Victor Stinner in :gh:`120389`.)"
msgstr "（由 Victor Stinner 在 :gh:`120389` 中贡献。）"

#: ../../whatsnew/3.14.rst:2544
msgid ""
"Add :c:func:`PyBytes_Join(sep, iterable) <PyBytes_Join>` function, similar "
"to ``sep.join(iterable)`` in Python. (Contributed by Victor Stinner in "
":gh:`121645`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2548
msgid ""
"Add :c:func:`Py_HashBuffer` to compute and return the hash value of a "
"buffer. (Contributed by Antoine Pitrou and Victor Stinner in :gh:`122854`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2551
msgid ""
"Add functions to get and set the current runtime Python configuration "
"(:pep:`741`):"
msgstr ""

#: ../../whatsnew/3.14.rst:2554
msgid ":c:func:`PyConfig_Get`"
msgstr ":c:func:`PyConfig_Get`"

#: ../../whatsnew/3.14.rst:2555
msgid ":c:func:`PyConfig_GetInt`"
msgstr ":c:func:`PyConfig_GetInt`"

#: ../../whatsnew/3.14.rst:2556
msgid ":c:func:`PyConfig_Set`"
msgstr ":c:func:`PyConfig_Set`"

#: ../../whatsnew/3.14.rst:2557
msgid ":c:func:`PyConfig_Names`"
msgstr ":c:func:`PyConfig_Names`"

#: ../../whatsnew/3.14.rst:2561
msgid "Add functions to configure the Python initialization (:pep:`741`):"
msgstr ""

#: ../../whatsnew/3.14.rst:2563
msgid ":c:func:`Py_InitializeFromInitConfig`"
msgstr ":c:func:`Py_InitializeFromInitConfig`"

#: ../../whatsnew/3.14.rst:2564
msgid ":c:func:`PyInitConfig_AddModule`"
msgstr ":c:func:`PyInitConfig_AddModule`"

#: ../../whatsnew/3.14.rst:2565
msgid ":c:func:`PyInitConfig_Create`"
msgstr ":c:func:`PyInitConfig_Create`"

#: ../../whatsnew/3.14.rst:2566
msgid ":c:func:`PyInitConfig_Free`"
msgstr ":c:func:`PyInitConfig_Free`"

#: ../../whatsnew/3.14.rst:2567
msgid ":c:func:`PyInitConfig_FreeStrList`"
msgstr ":c:func:`PyInitConfig_FreeStrList`"

#: ../../whatsnew/3.14.rst:2568
msgid ":c:func:`PyInitConfig_GetError`"
msgstr ":c:func:`PyInitConfig_GetError`"

#: ../../whatsnew/3.14.rst:2569
msgid ":c:func:`PyInitConfig_GetExitCode`"
msgstr ":c:func:`PyInitConfig_GetExitCode`"

#: ../../whatsnew/3.14.rst:2570
msgid ":c:func:`PyInitConfig_GetInt`"
msgstr ":c:func:`PyInitConfig_GetInt`"

#: ../../whatsnew/3.14.rst:2571
msgid ":c:func:`PyInitConfig_GetStr`"
msgstr ":c:func:`PyInitConfig_GetStr`"

#: ../../whatsnew/3.14.rst:2572
msgid ":c:func:`PyInitConfig_GetStrList`"
msgstr ":c:func:`PyInitConfig_GetStrList`"

#: ../../whatsnew/3.14.rst:2573
msgid ":c:func:`PyInitConfig_HasOption`"
msgstr ":c:func:`PyInitConfig_HasOption`"

#: ../../whatsnew/3.14.rst:2574
msgid ":c:func:`PyInitConfig_SetInt`"
msgstr ":c:func:`PyInitConfig_SetInt`"

#: ../../whatsnew/3.14.rst:2575
msgid ":c:func:`PyInitConfig_SetStr`"
msgstr ":c:func:`PyInitConfig_SetStr`"

#: ../../whatsnew/3.14.rst:2576
msgid ":c:func:`PyInitConfig_SetStrList`"
msgstr ":c:func:`PyInitConfig_SetStrList`"

#: ../../whatsnew/3.14.rst:2580
msgid ""
"Add a new import and export API for Python :class:`int` objects "
"(:pep:`757`):"
msgstr ""

#: ../../whatsnew/3.14.rst:2582
msgid ":c:func:`PyLong_GetNativeLayout`"
msgstr ":c:func:`PyLong_GetNativeLayout`"

#: ../../whatsnew/3.14.rst:2583
msgid ":c:func:`PyLong_Export`"
msgstr ":c:func:`PyLong_Export`"

#: ../../whatsnew/3.14.rst:2584
msgid ":c:func:`PyLong_FreeExport`"
msgstr ":c:func:`PyLong_FreeExport`"

#: ../../whatsnew/3.14.rst:2585
msgid ":c:func:`PyLongWriter_Create`"
msgstr ":c:func:`PyLongWriter_Create`"

#: ../../whatsnew/3.14.rst:2586
msgid ":c:func:`PyLongWriter_Finish`"
msgstr ":c:func:`PyLongWriter_Finish`"

#: ../../whatsnew/3.14.rst:2587
msgid ":c:func:`PyLongWriter_Discard`"
msgstr ":c:func:`PyLongWriter_Discard`"

#: ../../whatsnew/3.14.rst:2589
msgid ""
"(Contributed by Sergey B Kirpichev and Victor Stinner in :gh:`102471`.)"
msgstr "（由 Sergey B Kirpichev 和 Victor Stinner 在 :gh:`102471` 中贡献。）"

#: ../../whatsnew/3.14.rst:2591
msgid ""
"Add :c:func:`PyType_GetBaseByToken` and :c:data:`Py_tp_token` slot for "
"easier superclass identification, which attempts to resolve the `type "
"checking issue <https://peps.python.org/pep-0630/#type-checking>`__ "
"mentioned in :pep:`630` (:gh:`124153`)."
msgstr ""

#: ../../whatsnew/3.14.rst:2596
msgid ""
"Add :c:func:`PyUnicode_Equal` function to the limited C API: test if two "
"strings are equal. (Contributed by Victor Stinner in :gh:`124502`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2600
msgid ""
"Add :c:func:`PyType_Freeze` function to make a type immutable. (Contributed "
"by Victor Stinner in :gh:`121654`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2603
msgid ""
"Add :c:func:`PyUnstable_Object_EnableDeferredRefcount` for enabling deferred"
" reference counting, as outlined in :pep:`703`."
msgstr ""

#: ../../whatsnew/3.14.rst:2606
msgid ""
"Add :c:func:`PyMonitoring_FireBranchLeftEvent` and "
":c:func:`PyMonitoring_FireBranchRightEvent` for generating :monitoring-"
"event:`BRANCH_LEFT` and :monitoring-event:`BRANCH_RIGHT` events, "
"respectively."
msgstr ""

#: ../../whatsnew/3.14.rst:2611
msgid ""
"Add :c:func:`Py_fopen` function to open a file. Similar to the "
":c:func:`!fopen` function, but the *path* parameter is a Python object and "
"an exception is set on error. Add also :c:func:`Py_fclose` function to close"
" a file. (Contributed by Victor Stinner in :gh:`127350`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2617
msgid ""
"Add support of nullable arguments in :c:func:`PyArg_ParseTuple` and similar "
"functions. Adding ``?`` after any format unit makes ``None`` be accepted as "
"a value. (Contributed by Serhiy Storchaka in :gh:`112068`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2622
msgid ""
"The ``k`` and ``K`` formats in :c:func:`PyArg_ParseTuple` and similar "
"functions now use :meth:`~object.__index__` if available, like all other "
"integer formats. (Contributed by Serhiy Storchaka in :gh:`112068`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2627
msgid ""
"Add macros :c:func:`Py_PACK_VERSION` and :c:func:`Py_PACK_FULL_VERSION` for "
"bit-packing Python version numbers. (Contributed by Petr Viktorin in "
":gh:`128629`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2631
msgid ""
"Add :c:func:`PyUnstable_IsImmortal` for determining whether an object is "
":term:`immortal`, for debugging purposes."
msgstr ""

#: ../../whatsnew/3.14.rst:2634
msgid ""
"Add :c:func:`PyImport_ImportModuleAttr` and "
":c:func:`PyImport_ImportModuleAttrString` helper functions to import a "
"module and get an attribute of the module. (Contributed by Victor Stinner in"
" :gh:`128911`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2639
msgid ""
"Add support for a new ``p`` format unit in :c:func:`Py_BuildValue` that "
"allows to take a C integer and produce a Python :class:`bool` object. "
"(Contributed by Pablo Galindo in :issue:`45325`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2643
msgid ""
"Add :c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` to determine if "
"an object is a unique temporary object on the interpreter's operand stack. "
"This can be used in some cases as a replacement for checking if "
":c:func:`Py_REFCNT` is ``1`` for Python objects passed as arguments to C API"
" functions."
msgstr ""

#: ../../whatsnew/3.14.rst:2648
msgid ""
"Add :c:func:`PyUnstable_Object_IsUniquelyReferenced` as a replacement for "
"``Py_REFCNT(op) == 1`` on :term:`free threaded <free threading>` builds. "
"(Contributed by Peter Bierma in :gh:`133140`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2654
msgid "Limited C API changes"
msgstr "受限 C API 的变化"

#: ../../whatsnew/3.14.rst:2656
msgid ""
"In the limited C API 3.14 and newer, :c:func:`Py_TYPE` and "
":c:func:`Py_REFCNT` are now implemented as an opaque function call to hide "
"implementation details. (Contributed by Victor Stinner in :gh:`120600` and "
":gh:`124127`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2661
msgid ""
"Remove the :c:macro:`PySequence_Fast_GET_SIZE`, "
":c:macro:`PySequence_Fast_GET_ITEM` and :c:macro:`PySequence_Fast_ITEMS` "
"macros from the limited C API, since these macros never worked in the "
"limited C API. Keep :c:func:`PySequence_Fast` in the limited C API. "
"(Contributed by Victor Stinner in :gh:`91417`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2671
msgid ""
":c:func:`Py_Finalize` now deletes all interned strings. This is backwards "
"incompatible to any C-Extension that holds onto an interned string after a "
"call to :c:func:`Py_Finalize` and is then reused after a call to "
":c:func:`Py_Initialize`.  Any issues arising from this behavior will "
"normally result in crashes during the execution of the subsequent call to "
":c:func:`Py_Initialize` from accessing uninitialized memory. To fix, use an "
"address sanitizer to identify any use-after-free coming from an interned "
"string and deallocate it during module shutdown. (Contributed by Eddie "
"Elizondo in :gh:`113601`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2681
msgid ""
"The :ref:`Unicode Exception Objects <unicodeexceptions>` C API now raises a "
":exc:`TypeError` if its exception argument is not a :exc:`UnicodeError` "
"object. (Contributed by Bénédikt Tran in :gh:`127691`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2688
msgid ""
"The interpreter internally avoids some reference count modifications when "
"loading objects onto the operands stack by :term:`borrowing <borrowed "
"reference>` references when possible. This can lead to smaller reference "
"count values compared to previous Python versions. C API extensions that "
"checked :c:func:`Py_REFCNT` of ``1`` to determine if an function argument is"
" not referenced by any other code should instead use "
":c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` as a safer "
"replacement."
msgstr ""

#: ../../whatsnew/3.14.rst:2697
msgid "Private functions promoted to public C APIs:"
msgstr ""

#: ../../whatsnew/3.14.rst:2699
msgid "``_PyBytes_Join()``: :c:func:`PyBytes_Join`"
msgstr "``_PyBytes_Join()``：:c:func:`PyBytes_Join`"

#: ../../whatsnew/3.14.rst:2700
msgid "``_PyLong_IsNegative()``: :c:func:`PyLong_IsNegative`"
msgstr "``_PyLong_IsNegative()``：:c:func:`PyLong_IsNegative`"

#: ../../whatsnew/3.14.rst:2701
msgid "``_PyLong_IsPositive()``: :c:func:`PyLong_IsPositive`"
msgstr "``_PyLong_IsPositive()``：:c:func:`PyLong_IsPositive`"

#: ../../whatsnew/3.14.rst:2702
msgid "``_PyLong_IsZero()``: :c:func:`PyLong_IsZero`"
msgstr "``_PyLong_IsZero()``：:c:func:`PyLong_IsZero`"

#: ../../whatsnew/3.14.rst:2703
msgid "``_PyLong_Sign()``: :c:func:`PyLong_GetSign`"
msgstr "``_PyLong_Sign()``：:c:func:`PyLong_GetSign`"

#: ../../whatsnew/3.14.rst:2704
msgid "``_PyUnicodeWriter_Dealloc()``: :c:func:`PyUnicodeWriter_Discard`"
msgstr "``_PyUnicodeWriter_Dealloc()``：:c:func:`PyUnicodeWriter_Discard`"

#: ../../whatsnew/3.14.rst:2705
msgid "``_PyUnicodeWriter_Finish()``: :c:func:`PyUnicodeWriter_Finish`"
msgstr "``_PyUnicodeWriter_Finish()``：:c:func:`PyUnicodeWriter_Finish`"

#: ../../whatsnew/3.14.rst:2706
msgid "``_PyUnicodeWriter_Init()``: use :c:func:`PyUnicodeWriter_Create`"
msgstr ""

#: ../../whatsnew/3.14.rst:2707
msgid "``_PyUnicodeWriter_Prepare()``: (no replacement)"
msgstr ""

#: ../../whatsnew/3.14.rst:2708
msgid "``_PyUnicodeWriter_PrepareKind()``: (no replacement)"
msgstr ""

#: ../../whatsnew/3.14.rst:2709
msgid "``_PyUnicodeWriter_WriteChar()``: :c:func:`PyUnicodeWriter_WriteChar`"
msgstr "``_PyUnicodeWriter_WriteChar()``：:c:func:`PyUnicodeWriter_WriteChar`"

#: ../../whatsnew/3.14.rst:2710
msgid "``_PyUnicodeWriter_WriteStr()``: :c:func:`PyUnicodeWriter_WriteStr`"
msgstr "``_PyUnicodeWriter_WriteStr()``：:c:func:`PyUnicodeWriter_WriteStr`"

#: ../../whatsnew/3.14.rst:2711
msgid ""
"``_PyUnicodeWriter_WriteSubstring()``: "
":c:func:`PyUnicodeWriter_WriteSubstring`"
msgstr ""
"``_PyUnicodeWriter_WriteSubstring()``：:c:func:`PyUnicodeWriter_WriteSubstring`"

#: ../../whatsnew/3.14.rst:2712
msgid "``_PyUnicode_EQ()``: :c:func:`PyUnicode_Equal`"
msgstr "``_PyUnicode_EQ()``：:c:func:`PyUnicode_Equal`"

#: ../../whatsnew/3.14.rst:2713
msgid "``_PyUnicode_Equal()``: :c:func:`PyUnicode_Equal`"
msgstr "``_PyUnicode_Equal()``：:c:func:`PyUnicode_Equal`"

#: ../../whatsnew/3.14.rst:2714
msgid ""
"``_Py_GetConfig()``: :c:func:`PyConfig_Get` and :c:func:`PyConfig_GetInt`"
msgstr ""

#: ../../whatsnew/3.14.rst:2715
msgid "``_Py_HashBytes()``: :c:func:`Py_HashBuffer`"
msgstr ""

#: ../../whatsnew/3.14.rst:2716
msgid "``_Py_fopen_obj()``: :c:func:`Py_fopen`"
msgstr "``_Py_fopen_obj()``：:c:func:`Py_fopen`"

#: ../../whatsnew/3.14.rst:2718
msgid ""
"The `pythoncapi-compat project`_ can be used to get most of these new "
"functions on Python 3.13 and older."
msgstr ""

#: ../../whatsnew/3.14.rst:2729
msgid ""
"The :c:macro:`!Py_HUGE_VAL` macro is :term:`soft deprecated`, use "
":c:macro:`!Py_INFINITY` instead. (Contributed by Sergey B Kirpichev in "
":gh:`120026`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2733
msgid ""
"Macros :c:macro:`!Py_IS_NAN`, :c:macro:`!Py_IS_INFINITY` and "
":c:macro:`!Py_IS_FINITE` are :term:`soft deprecated`, use instead "
":c:macro:`!isnan`, :c:macro:`!isinf` and :c:macro:`!isfinite` available from"
" :file:`math.h` since C99.  (Contributed by Sergey B Kirpichev in "
":gh:`119613`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2739
msgid ""
"Non-tuple sequences are deprecated as argument for the ``(items)`` format "
"unit in :c:func:`PyArg_ParseTuple` and other :ref:`argument parsing <arg-"
"parsing>` functions if *items* contains format units which store a "
":ref:`borrowed buffer <c-arg-borrowed-buffer>` or a :term:`borrowed "
"reference`. (Contributed by Serhiy Storchaka in :gh:`50333`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2746
msgid ""
"The previously undocumented function :c:func:`PySequence_In` is :term:`soft "
"deprecated`. Use :c:func:`PySequence_Contains` instead. (Contributed by Yuki"
" Kobayashi in :gh:`127896`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2752
msgid ""
"The ``PyMonitoring_FireBranchEvent`` function is deprecated and should be "
"replaced with calls to :c:func:`PyMonitoring_FireBranchLeftEvent` and "
":c:func:`PyMonitoring_FireBranchRightEvent`."
msgstr ""

#: ../../whatsnew/3.14.rst:2756
msgid ""
"The following private functions are deprecated and planned for removal in "
"Python 3.18:"
msgstr ""

#: ../../whatsnew/3.14.rst:2759
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:6
msgid ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."
msgstr ":c:func:`!_PyBytes_Join`：使用 :c:func:`PyBytes_Join`。"

#: ../../whatsnew/3.14.rst:2760
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:7
msgid ""
":c:func:`!_PyDict_GetItemStringWithError`: use "
":c:func:`PyDict_GetItemStringRef`."
msgstr ""
":c:func:`!_PyDict_GetItemStringWithError`: 使用 "
":c:func:`PyDict_GetItemStringRef`。"

#: ../../whatsnew/3.14.rst:2761
msgid ":c:func:`!_PyDict_Pop()`: use :c:func:`PyDict_Pop`."
msgstr ""

#: ../../whatsnew/3.14.rst:2762
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:9
msgid ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."
msgstr ":c:func:`!_PyLong_Sign()`：使用 :c:func:`PyLong_GetSign`。"

#: ../../whatsnew/3.14.rst:2763
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:10
msgid ""
":c:func:`!_PyLong_FromDigits` and :c:func:`!_PyLong_New`: use "
":c:func:`PyLongWriter_Create`."
msgstr ""
":c:func:`!_PyLong_FromDigits` 和 :c:func:`!_PyLong_New`：使用 "
":c:func:`PyLongWriter_Create`."

#: ../../whatsnew/3.14.rst:2765
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:12
msgid ""
":c:func:`!_PyThreadState_UncheckedGet`: use "
":c:func:`PyThreadState_GetUnchecked`."
msgstr ""
":c:func:`!_PyThreadState_UncheckedGet`：使用 "
":c:func:`PyThreadState_GetUnchecked`。"

#: ../../whatsnew/3.14.rst:2766
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:13
msgid ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."
msgstr ":c:func:`!_PyUnicode_AsString`：使用 :c:func:`PyUnicode_AsUTF8`。"

#: ../../whatsnew/3.14.rst:2767
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:14
msgid ""
":c:func:`!_PyUnicodeWriter_Init`: replace ``_PyUnicodeWriter_Init(&writer)``"
" with :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Init`: 将 ``_PyUnicodeWriter_Init(&writer)`` 替换为 "
":c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`。"

#: ../../whatsnew/3.14.rst:2770
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:17
msgid ""
":c:func:`!_PyUnicodeWriter_Finish`: replace "
"``_PyUnicodeWriter_Finish(&writer)`` with "
":c:func:`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Finish`: 将 ``_PyUnicodeWriter_Finish(&writer)`` "
"替换为 :c:func:`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`。"

#: ../../whatsnew/3.14.rst:2773
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:20
msgid ""
":c:func:`!_PyUnicodeWriter_Dealloc`: replace "
"``_PyUnicodeWriter_Dealloc(&writer)`` with "
":c:func:`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Dealloc`: 将 ``_PyUnicodeWriter_Dealloc(&writer)``"
" 替换为 :c:func:`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`。"

#: ../../whatsnew/3.14.rst:2776
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:23
msgid ""
":c:func:`!_PyUnicodeWriter_WriteChar`: replace "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` with "
":c:func:`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteChar`: 将 "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."

#: ../../whatsnew/3.14.rst:2779
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:26
msgid ""
":c:func:`!_PyUnicodeWriter_WriteStr`: replace "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` with "
":c:func:`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteStr`: 将 ``_PyUnicodeWriter_WriteStr(&writer,"
" str)`` 替换为 :c:func:`PyUnicodeWriter_WriteStr(writer, str) "
"<PyUnicodeWriter_WriteStr>`。"

#: ../../whatsnew/3.14.rst:2782
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:29
msgid ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: replace "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` with "
":c:func:`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: 将 "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`。"

#: ../../whatsnew/3.14.rst:2785
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:32
msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: 将 "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`。"

#: ../../whatsnew/3.14.rst:2788
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:35
msgid ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: replace "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` with "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: 将 "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` 替换为 "
":c:func:`PyUnicodeWriter_WriteUTF8(writer, str) "
"<PyUnicodeWriter_WriteUTF8>`。"

#: ../../whatsnew/3.14.rst:2791
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:40
msgid ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."
msgstr ":c:func:`!_Py_HashPointer`：使用 :c:func:`Py_HashPointer`。"

#: ../../whatsnew/3.14.rst:2792
#: ../../deprecations/c-api-pending-removal-in-3.18.rst:41
msgid ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."
msgstr ":c:func:`!_Py_fopen_obj`：使用 :c:func:`Py_fopen`。"

#: ../../whatsnew/3.14.rst:2794
msgid ""
"The `pythoncapi-compat project`_ can be used to get these new public "
"functions on Python 3.13 and older. (Contributed by Victor Stinner in "
":gh:`128863`.)"
msgstr ""

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:4
msgid "The bundled copy of ``libmpdecimal``."
msgstr "捆绑的 ``libmpdecimal`` 副本。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:5
msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use "
":c:func:`PyImport_ImportModule` instead."
msgstr ""
"The :c:func:`PyImport_ImportModuleNoBlock`: 改用 "
":c:func:`PyImport_ImportModule`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:7
msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use "
":c:func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project "
"<https://github.com/python/pythoncapi-compat/>`__ can be used to get "
":c:func:`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""
":c:func:`PyWeakref_GetObject` 和 :c:func:`PyWeakref_GET_OBJECT`: 改用 "
":c:func:`PyWeakref_GetRef`。 在 Python 3.12 及更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取 "
":c:func:`PyWeakref_GetRef`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:11
msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use "
":c:type:`wchar_t` instead."
msgstr ""
":c:type:`Py_UNICODE` 类型和 :c:macro:`!Py_UNICODE_WIDE` 宏：改用 :c:type:`wchar_t`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:13
msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ":c:func:`!PyUnicode_AsDecodedObject`: 改用 :c:func:`PyCodec_Decode`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:15
msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead;"
" Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: 改用 :c:func:`PyCodec_Decode`；请注意某些编解码器"
" (例如 \"base64\") 可能返回 :class:`str` 以外的类型，比如 :class:`bytes`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:18
msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ":c:func:`!PyUnicode_AsEncodedObject`: 改用 :c:func:`PyCodec_Encode`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:20
msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead;"
" Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: 使用 :c:func:`PyCodec_Encode` "
"代替；请注意，某些编解码器（如 \"base64\"）可能返回 :class:`bytes` 之外的类型，如 :class:`str`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:23
msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr "Python 初始化函数， Python 3.13 中弃用："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:25
msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""
":c:func:`Py_GetPath`:使用  :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>`   (:data:`sys.path`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:28
msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use "
":c:func:`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if "
":ref:`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetPrefix`:使用  :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) 代替。如果需要处理 :ref:`virtual "
"environments<venv-def>` ，请使用 :c:func:`PyConfig_Get(\"prefix\") "
"<PyConfig_Get>` (:data:`sys.prefix`) 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:33
msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use "
":c:func:`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` "
"(:data:`sys.exec_prefix`) if :ref:`virtual environments <venv-def>` need to "
"be handled."
msgstr ""
":c:func:`Py_GetExecPrefix`:使用 "
":c:func:`PyConfig_Get(\"base_exec_prefix\")<PyConfig_Get>` "
"(:data:`sys.base_exec_prefix`) 代替。如果需要处理 :ref:`virtual environments<venv-"
"def>` ，请使用 :c:func:`PyConfig_Get(\"exec_prefix\")<PyConfig_Get>` "
"(:data:`sys.exec_prefix`) 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:39
msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`:使用 :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:42
msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramName`:使用 :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:45
msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: 使用 :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` 或 :envvar:`PYTHONHOME` 环境变量代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:49
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat/>`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and "
"older."
msgstr ""
"在 Python 3.13 和更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取 :c:func:`PyConfig_Get`"
" 。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:53
msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr "用于配置 Python 的初始化的函数，在 Python 3.11 中已弃用："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:55
msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgvEx()`: 改为设置 :c:member:`PyConfig.argv`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:57
msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ":c:func:`!PySys_SetArgv()`: 改为设置 :c:member:`PyConfig.argv`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:59
msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: 改为设置 :c:member:`PyConfig.program_name`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:61
msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ":c:func:`!Py_SetPythonHome()`: 改为设置 :c:member:`PyConfig.home`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:63
msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and "
":data:`!warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: 改为清除 :data:`sys.warnoptions` 和 "
":data:`!warnings.filters`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:66
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` instead."
msgstr ":c:func:`Py_InitializeFromConfig` API 应与 :c:type:`PyConfig` 一起使用。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:69
msgid "Global configuration variables:"
msgstr "全局配置变量："

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:71
msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or "
":c:func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DebugFlag`: 改用 :c:member:`PyConfig.parser_debug` 或 "
":c:func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:74
msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or "
":c:func:`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: 改用 :c:member:`PyConfig.verbose` 或 "
":c:func:`PyConfig_Get(\"verbose\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:77
msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or "
":c:func:`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_QuietFlag`: 改用 :c:member:`PyConfig.quiet` 或 "
":c:func:`PyConfig_Get(\"quiet\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:80
msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or "
":c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: 改用 :c:member:`PyConfig.interactive` 或 "
":c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:83
msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or "
":c:func:`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InspectFlag`: 改用 :c:member:`PyConfig.inspect` 或 "
":c:func:`PyConfig_Get(\"inspect\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:86
msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or "
":c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: 改用 :c:member:`PyConfig.optimization_level` or "
":c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:89
msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or "
":c:func:`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: 改用 :c:member:`PyConfig.site_import` 或 "
":c:func:`PyConfig_Get(\"site_import\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:92
msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or "
":c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: 改用 :c:member:`PyConfig.bytes_warning` or "
":c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>`。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:95
msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or "
":c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: 使用 :c:member:`PyConfig.pathconfig_warnings` 或 "
":c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:98
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: 使用 :c:member:`PyConfig.use_environment` 或"
" :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:101
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: 使用 :c:member:`PyConfig.write_bytecode` 或 "
":c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:104
msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use "
":c:member:`PyConfig.user_site_directory` or "
":c:func:`PyConfig_Get(\"user_site_directory\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: 使用 :c:member:`PyConfig.user_site_directory`"
" 或 :c:func:`PyConfig_Get(\"user_site_directory\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:107
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or "
":c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: 使用 :c:member:`PyConfig.buffered_stdio` 或 "
":c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:110
msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: 使用 :c:member:`PyConfig.use_hash_seed` 和 "
":c:member:`PyConfig.hash_seed` 或 :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:114
msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or "
":c:func:`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: 使用 :c:member:`PyConfig.isolated` 或 "
":c:func:`PyConfig_Get(\"isolated\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:117
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use "
":c:member:`PyPreConfig.legacy_windows_fs_encoding` or "
":c:func:`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` "
"instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: 使用 "
":c:member:`PyPreConfig.legacy_windows_fs_encoding` 或 "
":c:func:`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:120
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use "
":c:member:`PyConfig.legacy_windows_stdio` or "
":c:func:`PyConfig_Get(\"legacy_windows_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: 使用 "
":c:member:`PyConfig.legacy_windows_stdio` 或 "
":c:func:`PyConfig_Get(\"legacy_windows_stdio\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:123
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, "
":c:var:`!Py_HasFileSystemDefaultEncoding`: Use "
":c:member:`PyConfig.filesystem_encoding` or "
":c:func:`PyConfig_Get(\"filesystem_encoding\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`, "
":c:var:`!Py_HasFileSystemDefaultEncoding`: 使用 "
":c:member:`PyConfig.filesystem_encoding` 或 "
":c:func:`PyConfig_Get(\"filesystem_encoding\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:126
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use "
":c:member:`PyConfig.filesystem_errors` or "
":c:func:`PyConfig_Get(\"filesystem_errors\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: 使用 "
":c:member:`PyConfig.filesystem_errors` 或 "
":c:func:`PyConfig_Get(\"filesystem_errors\") <PyConfig_Get>` 代替。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:129
msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or "
":c:func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see "
":c:func:`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: 使用 :c:member:`PyPreConfig.utf8_mode` 或 "
":c:func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` 代替。 (参见 "
":c:func:`Py_PreInitialize`)。"

#: ../../deprecations/c-api-pending-removal-in-3.15.rst:134
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be "
"used to get these options at runtime."
msgstr ""
":c:func:`Py_InitializeFromConfig` API 应与 :c:type:`PyConfig` "
"一起使用，以设置这些选项。或者使用 :c:func:`PyConfig_Get` 在运行时获取这些选项。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:2
msgid "Pending removal in Python 3.18"
msgstr "计划在 Python 3.18 中移除"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:4
msgid "Deprecated private functions (:gh:`128863`):"
msgstr "弃用的私有函数（:gh:`128863`）："

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:8
msgid ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."
msgstr ":c:func:`!_PyDict_Pop()`：:c:func:`PyDict_Pop`。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:38
msgid ":c:func:`!_PyUnicodeWriter_Prepare`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_Prepare`: (无替代)。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:39
msgid ":c:func:`!_PyUnicodeWriter_PrepareKind`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_PrepareKind`: (无替代)。"

#: ../../deprecations/c-api-pending-removal-in-3.18.rst:43
msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-"
"compat/>`__ can be used to get these new public functions on Python 3.13 and"
" older."
msgstr ""
"在 Python 3.13 和更旧的版本中可以使用 `pythoncapi-compat 项目 "
"<https://github.com/python/pythoncapi-compat/>`__ 来获取这些新的公有函数。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:4
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr "以下 API 已被弃用，将被移除，但目前尚未确定移除日期。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:7
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: 自 Python 3.8 起不再需要。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:9
msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ":c:func:`PyErr_Fetch`: 改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:11
msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: 改用 :c:func:`PyErr_GetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:13
msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ":c:func:`PyErr_Restore`: 改用 :c:func:`PyErr_SetRaisedException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:15
msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: 改用 :c:func:`PyModule_GetFilenameObject`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:17
msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ":c:func:`PyOS_AfterFork`: 改用 :c:func:`PyOS_AfterFork_Child`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:19
msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: 改用 :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:21
msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: 自 Python 3.12 起不再需要"

#: ../../deprecations/c-api-pending-removal-in-future.rst:23
msgid ""
":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ":c:func:`!PyErr_Display`: 改用 :c:func:`PyErr_DisplayException`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:25
msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: 改用 :c:func:`!_PyErr_ChainExceptions1`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:27
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ":c:member:`!PyBytesObject.ob_shash` 成员：改为调用 :c:func:`PyObject_Hash`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:29
msgid "Thread Local Storage (TLS) API:"
msgstr "线程本地存储 (TLS) API："

#: ../../deprecations/c-api-pending-removal-in-future.rst:31
msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ":c:func:`PyThread_create_key`: 改用 :c:func:`PyThread_tss_alloc`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:33
msgid ""
":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ":c:func:`PyThread_delete_key`: 改用 :c:func:`PyThread_tss_free`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:35
msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ":c:func:`PyThread_set_key_value`: 改用 :c:func:`PyThread_tss_set`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:37
msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ":c:func:`PyThread_get_key_value`: 改用 :c:func:`PyThread_tss_get`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:39
msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: 改用 :c:func:`PyThread_tss_delete`。"

#: ../../deprecations/c-api-pending-removal-in-future.rst:41
msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: 自 Python 3.7 起不再需要。"

#: ../../whatsnew/3.14.rst:2810
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases was deprecated since 3.12 and now raises a :exc:`TypeError`."
msgstr ""

#: ../../whatsnew/3.14.rst:2813
msgid ""
"Remove ``PyDictObject.ma_version_tag`` member which was deprecated since "
"Python 3.12. Use the :c:func:`PyDict_AddWatcher` API instead. (Contributed "
"by Sam Gross in :gh:`124296`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2817
msgid ""
"Remove the private ``_Py_InitializeMain()`` function. It was a "
":term:`provisional API` added to Python 3.8 by :pep:`587`. (Contributed by "
"Victor Stinner in :gh:`129033`.)"
msgstr ""

#: ../../whatsnew/3.14.rst:2821
msgid ""
"The undocumented APIs :c:macro:`!Py_C_RECURSION_LIMIT` and "
":c:member:`!PyThreadState.c_recursion_remaining`, added in 3.13, are removed"
" without a deprecation period. Please use :c:func:`Py_EnterRecursiveCall` to"
" guard against runaway recursion in C code. (Removed in :gh:`133079`, see "
"also :gh:`130396`.)"
msgstr ""
